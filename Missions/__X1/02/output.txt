// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 46 0 0
// CreateNature ;
  19: CALL 537 0 0
// PrepareAmericans ;
  23: CALL 834 0 0
// PrepareArabian ;
  27: CALL 11715 0 0
// if debug then
  31: LD_EXP 1
  35: IFFALSE 41
// DebugMode ;
  37: CALL 218 0 0
// Action ;
  41: CALL 4691 0 0
// end ;
  45: END
// export debug , prefix , missionStart , aviradzeSpotted , deltaSpotted , spottedBeforeRadio , sciSpotted , aviradzeQuestDone , sciCounterKill , usAlert , usActiveDefend , gladstoneEscaped , timeUntilFarmer , attackDeltaAllowed , trickyMove , usPatrol , trap , lostCounter ; function Init ; begin
  46: LD_INT 0
  48: PPUSH
// debug := false ;
  49: LD_ADDR_EXP 1
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// missionStart := false ;
  57: LD_ADDR_EXP 3
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// aviradzeSpotted := false ;
  65: LD_ADDR_EXP 4
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// deltaSpotted := false ;
  73: LD_ADDR_EXP 5
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// sciSpotted := false ;
  81: LD_ADDR_EXP 7
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// sciCounterKill := 0 ;
  89: LD_ADDR_EXP 9
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// aviradzeQuestDone := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// attackDeltaAllowed := false ;
 105: LD_ADDR_EXP 14
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usAlert := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// usActiveDefend := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// usPatrol := [ ] ;
 129: LD_ADDR_EXP 16
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// timeUntilFarmer := [ 40 40$00 , 30 30$00 , 20 20$00 , 15 15$00 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 13
 140: PUSH
 141: LD_INT 84000
 143: PUSH
 144: LD_INT 63000
 146: PUSH
 147: LD_INT 42000
 149: PUSH
 150: LD_INT 31500
 152: PUSH
 153: EMPTY
 154: LIST
 155: LIST
 156: LIST
 157: LIST
 158: PUSH
 159: LD_OWVAR 67
 163: ARRAY
 164: ST_TO_ADDR
// trickyMove := false ;
 165: LD_ADDR_EXP 15
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// gladstoneEscaped := false ;
 173: LD_ADDR_EXP 12
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// prefix := 01_ ;
 181: LD_ADDR_EXP 2
 185: PUSH
 186: LD_STRING 01_
 188: ST_TO_ADDR
// trap := 0 ;
 189: LD_ADDR_EXP 17
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// lostCounter := false ;
 197: LD_ADDR_EXP 18
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// spottedBeforeRadio := false ;
 205: LD_ADDR_EXP 6
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// end ;
 213: LD_VAR 0 1
 217: RET
// function DebugMode ; begin
 218: LD_INT 0
 220: PPUSH
// FogOff ( 1 ) ;
 221: LD_INT 1
 223: PPUSH
 224: CALL_OW 344
// Difficulty := 2 ;
 228: LD_ADDR_OWVAR 67
 232: PUSH
 233: LD_INT 2
 235: ST_TO_ADDR
// end ; end_of_file
 236: LD_VAR 0 1
 240: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 241: LD_INT 0
 243: PPUSH
// uc_side := side ;
 244: LD_ADDR_OWVAR 20
 248: PUSH
 249: LD_VAR 0 1
 253: ST_TO_ADDR
// uc_nation := nation ;
 254: LD_ADDR_OWVAR 21
 258: PUSH
 259: LD_VAR 0 2
 263: ST_TO_ADDR
// vc_chassis := chassis ;
 264: LD_ADDR_OWVAR 37
 268: PUSH
 269: LD_VAR 0 3
 273: ST_TO_ADDR
// vc_engine := engine ;
 274: LD_ADDR_OWVAR 39
 278: PUSH
 279: LD_VAR 0 4
 283: ST_TO_ADDR
// vc_control := control ;
 284: LD_ADDR_OWVAR 38
 288: PUSH
 289: LD_VAR 0 5
 293: ST_TO_ADDR
// vc_weapon := weapon ;
 294: LD_ADDR_OWVAR 40
 298: PUSH
 299: LD_VAR 0 6
 303: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 304: LD_ADDR_OWVAR 41
 308: PUSH
 309: LD_VAR 0 7
 313: ST_TO_ADDR
// result := CreateVehicle ;
 314: LD_ADDR_VAR 0 8
 318: PUSH
 319: CALL_OW 45
 323: ST_TO_ADDR
// end ;
 324: LD_VAR 0 8
 328: RET
// export function SayX ( units , ident ) ; var i ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
// result := false ;
 333: LD_ADDR_VAR 0 3
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// if not units then
 341: LD_VAR 0 1
 345: NOT
 346: IFFALSE 350
// exit ;
 348: GO 404
// for i in units do
 350: LD_ADDR_VAR 0 4
 354: PUSH
 355: LD_VAR 0 1
 359: PUSH
 360: FOR_IN
 361: IFFALSE 402
// if IsOk ( i ) then
 363: LD_VAR 0 4
 367: PPUSH
 368: CALL_OW 302
 372: IFFALSE 400
// begin Say ( i , ident ) ;
 374: LD_VAR 0 4
 378: PPUSH
 379: LD_VAR 0 2
 383: PPUSH
 384: CALL_OW 88
// result := i ;
 388: LD_ADDR_VAR 0 3
 392: PUSH
 393: LD_VAR 0 4
 397: ST_TO_ADDR
// break ;
 398: GO 402
// end ;
 400: GO 360
 402: POP
 403: POP
// end ;
 404: LD_VAR 0 3
 408: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 409: LD_INT 0
 411: PPUSH
 412: PPUSH
// InitUc ;
 413: CALL_OW 18
// InitHc ;
 417: CALL_OW 19
// uc_side := 0 ;
 421: LD_ADDR_OWVAR 20
 425: PUSH
 426: LD_INT 0
 428: ST_TO_ADDR
// uc_nation := 0 ;
 429: LD_ADDR_OWVAR 21
 433: PUSH
 434: LD_INT 0
 436: ST_TO_ADDR
// for i = 1 to amount do
 437: LD_ADDR_VAR 0 4
 441: PUSH
 442: DOUBLE
 443: LD_INT 1
 445: DEC
 446: ST_TO_ADDR
 447: LD_VAR 0 2
 451: PUSH
 452: FOR_TO
 453: IFFALSE 526
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 455: LD_ADDR_OWVAR 29
 459: PUSH
 460: LD_INT 9
 462: PPUSH
 463: LD_INT 12
 465: PPUSH
 466: CALL_OW 12
 470: PUSH
 471: LD_INT 9
 473: PPUSH
 474: LD_INT 12
 476: PPUSH
 477: CALL_OW 12
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: ST_TO_ADDR
// hc_agressivity := 0 ;
 486: LD_ADDR_OWVAR 35
 490: PUSH
 491: LD_INT 0
 493: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 494: LD_INT 0
 496: PPUSH
 497: LD_INT 12
 499: PPUSH
 500: LD_INT 1
 502: PPUSH
 503: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 507: CALL_OW 44
 511: PPUSH
 512: LD_VAR 0 1
 516: PPUSH
 517: LD_INT 0
 519: PPUSH
 520: CALL_OW 49
// end ;
 524: GO 452
 526: POP
 527: POP
// InitHc ;
 528: CALL_OW 19
// end ;
 532: LD_VAR 0 3
 536: RET
// export function CreateNature ; var i ; begin
 537: LD_INT 0
 539: PPUSH
 540: PPUSH
// SpawnApeman ( forest , 9 ) ;
 541: LD_INT 1
 543: PPUSH
 544: LD_INT 9
 546: PPUSH
 547: CALL 409 0 2
// for i := 1 to 4 do
 551: LD_ADDR_VAR 0 2
 555: PUSH
 556: DOUBLE
 557: LD_INT 1
 559: DEC
 560: ST_TO_ADDR
 561: LD_INT 4
 563: PUSH
 564: FOR_TO
 565: IFFALSE 600
// begin hc_class := 21 ;
 567: LD_ADDR_OWVAR 28
 571: PUSH
 572: LD_INT 21
 574: ST_TO_ADDR
// hc_gallery :=  ;
 575: LD_ADDR_OWVAR 33
 579: PUSH
 580: LD_STRING 
 582: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 583: CALL_OW 44
 587: PPUSH
 588: LD_INT 1
 590: PPUSH
 591: LD_INT 0
 593: PPUSH
 594: CALL_OW 49
// end ;
 598: GO 564
 600: POP
 601: POP
// for i := 1 to 2 do
 602: LD_ADDR_VAR 0 2
 606: PUSH
 607: DOUBLE
 608: LD_INT 1
 610: DEC
 611: ST_TO_ADDR
 612: LD_INT 2
 614: PUSH
 615: FOR_TO
 616: IFFALSE 651
// begin hc_class := 18 ;
 618: LD_ADDR_OWVAR 28
 622: PUSH
 623: LD_INT 18
 625: ST_TO_ADDR
// hc_gallery :=  ;
 626: LD_ADDR_OWVAR 33
 630: PUSH
 631: LD_STRING 
 633: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 634: CALL_OW 44
 638: PPUSH
 639: LD_INT 1
 641: PPUSH
 642: LD_INT 0
 644: PPUSH
 645: CALL_OW 49
// end ;
 649: GO 615
 651: POP
 652: POP
// for i := 1 to 3 do
 653: LD_ADDR_VAR 0 2
 657: PUSH
 658: DOUBLE
 659: LD_INT 1
 661: DEC
 662: ST_TO_ADDR
 663: LD_INT 3
 665: PUSH
 666: FOR_TO
 667: IFFALSE 702
// begin hc_class := 13 ;
 669: LD_ADDR_OWVAR 28
 673: PUSH
 674: LD_INT 13
 676: ST_TO_ADDR
// hc_gallery :=  ;
 677: LD_ADDR_OWVAR 33
 681: PUSH
 682: LD_STRING 
 684: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 685: CALL_OW 44
 689: PPUSH
 690: LD_INT 1
 692: PPUSH
 693: LD_INT 0
 695: PPUSH
 696: CALL_OW 49
// end ;
 700: GO 666
 702: POP
 703: POP
// for i := 1 to 4 do
 704: LD_ADDR_VAR 0 2
 708: PUSH
 709: DOUBLE
 710: LD_INT 1
 712: DEC
 713: ST_TO_ADDR
 714: LD_INT 4
 716: PUSH
 717: FOR_TO
 718: IFFALSE 753
// begin hc_class := class_frog ;
 720: LD_ADDR_OWVAR 28
 724: PUSH
 725: LD_INT 19
 727: ST_TO_ADDR
// hc_gallery :=  ;
 728: LD_ADDR_OWVAR 33
 732: PUSH
 733: LD_STRING 
 735: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 736: CALL_OW 44
 740: PPUSH
 741: LD_INT 8
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: CALL_OW 49
// end ;
 751: GO 717
 753: POP
 754: POP
// end ;
 755: LD_VAR 0 1
 759: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 760: LD_INT 0
 762: PPUSH
 763: PPUSH
 764: PPUSH
// if not observer or not unit then
 765: LD_VAR 0 1
 769: NOT
 770: PUSH
 771: LD_VAR 0 2
 775: NOT
 776: OR
 777: IFFALSE 781
// exit ;
 779: GO 829
// if not See ( GetSide ( observer ) , unit ) then
 781: LD_VAR 0 1
 785: PPUSH
 786: CALL_OW 255
 790: PPUSH
 791: LD_VAR 0 2
 795: PPUSH
 796: CALL_OW 292
 800: NOT
 801: IFFALSE 805
// exit ;
 803: GO 829
// result := GetDistUnits ( observer , unit ) < 12 ;
 805: LD_ADDR_VAR 0 3
 809: PUSH
 810: LD_VAR 0 1
 814: PPUSH
 815: LD_VAR 0 2
 819: PPUSH
 820: CALL_OW 296
 824: PUSH
 825: LD_INT 12
 827: LESS
 828: ST_TO_ADDR
// end ; end_of_file
 829: LD_VAR 0 3
 833: RET
// export Gladstone , Lynch ; export usForces , usSci ; export function PrepareAmericans ; var i , un , veh , tmp , arm ; begin
 834: LD_INT 0
 836: PPUSH
 837: PPUSH
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
// usForces := [ ] ;
 842: LD_ADDR_EXP 21
 846: PUSH
 847: EMPTY
 848: ST_TO_ADDR
// usSci := [ ] ;
 849: LD_ADDR_EXP 22
 853: PUSH
 854: EMPTY
 855: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
 856: LD_INT 1
 858: PPUSH
 859: LD_STRING Delta
 861: PPUSH
 862: CALL_OW 500
// SetResourceType ( GetBase ( Delta ) , mat_cans , 400 ) ;
 866: LD_INT 1
 868: PPUSH
 869: CALL_OW 274
 873: PPUSH
 874: LD_INT 1
 876: PPUSH
 877: LD_INT 400
 879: PPUSH
 880: CALL_OW 277
// SetResourceType ( GetBase ( Delta ) , mat_oil , 80 ) ;
 884: LD_INT 1
 886: PPUSH
 887: CALL_OW 274
 891: PPUSH
 892: LD_INT 2
 894: PPUSH
 895: LD_INT 80
 897: PPUSH
 898: CALL_OW 277
// uc_side := 1 ;
 902: LD_ADDR_OWVAR 20
 906: PUSH
 907: LD_INT 1
 909: ST_TO_ADDR
// uc_nation := 1 ;
 910: LD_ADDR_OWVAR 21
 914: PUSH
 915: LD_INT 1
 917: ST_TO_ADDR
// InitHc ;
 918: CALL_OW 19
// hc_importance := 0 ;
 922: LD_ADDR_OWVAR 32
 926: PUSH
 927: LD_INT 0
 929: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
 930: LD_ADDR_EXP 20
 934: PUSH
 935: LD_STRING Lynch
 937: PPUSH
 938: LD_INT 0
 940: PPUSH
 941: LD_STRING 
 943: PPUSH
 944: CALL 32874 0 3
 948: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false ,  ) ;
 949: LD_ADDR_EXP 19
 953: PUSH
 954: LD_STRING Gladstone
 956: PPUSH
 957: LD_INT 0
 959: PPUSH
 960: LD_STRING 
 962: PPUSH
 963: CALL 32874 0 3
 967: ST_TO_ADDR
// PlaceHumanInUnit ( Lynch , Delta ) ;
 968: LD_EXP 20
 972: PPUSH
 973: LD_INT 1
 975: PPUSH
 976: CALL_OW 52
// PlaceHumanInUnit ( Gladstone , usLab ) ;
 980: LD_EXP 19
 984: PPUSH
 985: LD_INT 3
 987: PPUSH
 988: CALL_OW 52
// for i := 1 to [ 1 , 2 , 2 , 2 ] [ Difficulty ] do
 992: LD_ADDR_VAR 0 2
 996: PUSH
 997: DOUBLE
 998: LD_INT 1
1000: DEC
1001: ST_TO_ADDR
1002: LD_INT 1
1004: PUSH
1005: LD_INT 2
1007: PUSH
1008: LD_INT 2
1010: PUSH
1011: LD_INT 2
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: LIST
1018: LIST
1019: PUSH
1020: LD_OWVAR 67
1024: ARRAY
1025: PUSH
1026: FOR_TO
1027: IFFALSE 1077
// begin PrepareHuman ( false , 2 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
1029: LD_INT 0
1031: PPUSH
1032: LD_INT 2
1034: PPUSH
1035: LD_INT 1
1037: PUSH
1038: LD_INT 2
1040: PUSH
1041: LD_INT 2
1043: PUSH
1044: LD_INT 3
1046: PUSH
1047: EMPTY
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: LD_OWVAR 67
1057: ARRAY
1058: PPUSH
1059: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , Delta ) ;
1063: CALL_OW 44
1067: PPUSH
1068: LD_INT 1
1070: PPUSH
1071: CALL_OW 52
// end ;
1075: GO 1026
1077: POP
1078: POP
// for i := 1 to 7 - Difficulty do
1079: LD_ADDR_VAR 0 2
1083: PUSH
1084: DOUBLE
1085: LD_INT 1
1087: DEC
1088: ST_TO_ADDR
1089: LD_INT 7
1091: PUSH
1092: LD_OWVAR 67
1096: MINUS
1097: PUSH
1098: FOR_TO
1099: IFFALSE 1188
// begin PrepareHuman ( false , 4 , [ 1 , 2 , 2 , 2 ] [ Difficulty ] ) ;
1101: LD_INT 0
1103: PPUSH
1104: LD_INT 4
1106: PPUSH
1107: LD_INT 1
1109: PUSH
1110: LD_INT 2
1112: PUSH
1113: LD_INT 2
1115: PUSH
1116: LD_INT 2
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: LIST
1123: LIST
1124: PUSH
1125: LD_OWVAR 67
1129: ARRAY
1130: PPUSH
1131: CALL_OW 380
// un := CreateHuman ;
1135: LD_ADDR_VAR 0 3
1139: PUSH
1140: CALL_OW 44
1144: ST_TO_ADDR
// PlaceHumanInUnit ( un , usLab ) ;
1145: LD_VAR 0 3
1149: PPUSH
1150: LD_INT 3
1152: PPUSH
1153: CALL_OW 52
// usSci := Replace ( usSci , usSci + 1 , un ) ;
1157: LD_ADDR_EXP 22
1161: PUSH
1162: LD_EXP 22
1166: PPUSH
1167: LD_EXP 22
1171: PUSH
1172: LD_INT 1
1174: PLUS
1175: PPUSH
1176: LD_VAR 0 3
1180: PPUSH
1181: CALL_OW 1
1185: ST_TO_ADDR
// end ;
1186: GO 1098
1188: POP
1189: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
1190: LD_ADDR_VAR 0 6
1194: PUSH
1195: LD_INT 22
1197: PUSH
1198: LD_INT 1
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: PUSH
1205: LD_INT 30
1207: PUSH
1208: LD_INT 4
1210: PUSH
1211: EMPTY
1212: LIST
1213: LIST
1214: PUSH
1215: EMPTY
1216: LIST
1217: LIST
1218: PPUSH
1219: CALL_OW 69
1223: ST_TO_ADDR
// for i := 1 to 3 + [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
1224: LD_ADDR_VAR 0 2
1228: PUSH
1229: DOUBLE
1230: LD_INT 1
1232: DEC
1233: ST_TO_ADDR
1234: LD_INT 3
1236: PUSH
1237: LD_INT 1
1239: PUSH
1240: LD_INT 2
1242: PUSH
1243: LD_INT 2
1245: PUSH
1246: LD_INT 3
1248: PUSH
1249: EMPTY
1250: LIST
1251: LIST
1252: LIST
1253: LIST
1254: PUSH
1255: LD_OWVAR 67
1259: ARRAY
1260: PLUS
1261: PUSH
1262: FOR_TO
1263: IFFALSE 1345
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
1265: LD_INT 0
1267: PPUSH
1268: LD_INT 1
1270: PPUSH
1271: LD_INT 1
1273: PUSH
1274: LD_INT 2
1276: PUSH
1277: LD_INT 3
1279: PUSH
1280: LD_INT 3
1282: PUSH
1283: EMPTY
1284: LIST
1285: LIST
1286: LIST
1287: LIST
1288: PUSH
1289: LD_OWVAR 67
1293: ARRAY
1294: PPUSH
1295: CALL_OW 380
// un := CreateHuman ;
1299: LD_ADDR_VAR 0 3
1303: PUSH
1304: CALL_OW 44
1308: ST_TO_ADDR
// usForces := usForces ^ un ;
1309: LD_ADDR_EXP 21
1313: PUSH
1314: LD_EXP 21
1318: PUSH
1319: LD_VAR 0 3
1323: ADD
1324: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm [ 1 ] ) ;
1325: LD_VAR 0 3
1329: PPUSH
1330: LD_VAR 0 6
1334: PUSH
1335: LD_INT 1
1337: ARRAY
1338: PPUSH
1339: CALL_OW 52
// end ;
1343: GO 1262
1345: POP
1346: POP
// if Difficulty > 1 then
1347: LD_OWVAR 67
1351: PUSH
1352: LD_INT 1
1354: GREATER
1355: IFFALSE 1454
// begin for i := 1 to Difficulty do
1357: LD_ADDR_VAR 0 2
1361: PUSH
1362: DOUBLE
1363: LD_INT 1
1365: DEC
1366: ST_TO_ADDR
1367: LD_OWVAR 67
1371: PUSH
1372: FOR_TO
1373: IFFALSE 1452
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
1375: LD_INT 0
1377: PPUSH
1378: LD_INT 1
1380: PPUSH
1381: LD_INT 1
1383: PUSH
1384: LD_INT 2
1386: PUSH
1387: LD_INT 2
1389: PUSH
1390: LD_INT 3
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: PUSH
1399: LD_OWVAR 67
1403: ARRAY
1404: PPUSH
1405: CALL_OW 380
// un := CreateHuman ;
1409: LD_ADDR_VAR 0 3
1413: PUSH
1414: CALL_OW 44
1418: ST_TO_ADDR
// usForces := usForces ^ un ;
1419: LD_ADDR_EXP 21
1423: PUSH
1424: LD_EXP 21
1428: PUSH
1429: LD_VAR 0 3
1433: ADD
1434: ST_TO_ADDR
// PlaceUnitArea ( un , usAdditionalDefenceArea , false ) ;
1435: LD_VAR 0 3
1439: PPUSH
1440: LD_INT 9
1442: PPUSH
1443: LD_INT 0
1445: PPUSH
1446: CALL_OW 49
// end ;
1450: GO 1372
1452: POP
1453: POP
// end ; PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 100 ) ;
1454: LD_INT 1
1456: PPUSH
1457: LD_INT 1
1459: PPUSH
1460: LD_INT 1
1462: PPUSH
1463: LD_INT 2
1465: PPUSH
1466: LD_INT 1
1468: PPUSH
1469: LD_INT 2
1471: PPUSH
1472: LD_INT 100
1474: PPUSH
1475: CALL 241 0 7
// veh := CreateVehicle ;
1479: LD_ADDR_VAR 0 4
1483: PUSH
1484: CALL_OW 45
1488: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1489: LD_VAR 0 4
1493: PPUSH
1494: LD_INT 2
1496: PPUSH
1497: CALL_OW 233
// PlaceUnitXY ( veh , 43 , 24 , false ) ;
1501: LD_VAR 0 4
1505: PPUSH
1506: LD_INT 43
1508: PPUSH
1509: LD_INT 24
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: CALL_OW 48
// end ;
1519: LD_VAR 0 1
1523: RET
// export function SendSciToForest ; var i , j , k , tmp , xy ; begin
1524: LD_INT 0
1526: PPUSH
1527: PPUSH
1528: PPUSH
1529: PPUSH
1530: PPUSH
1531: PPUSH
// if not usSci then
1532: LD_EXP 22
1536: NOT
1537: IFFALSE 1541
// exit ;
1539: GO 1715
// xy := AreaToList ( tameArea , 0 ) ;
1541: LD_ADDR_VAR 0 6
1545: PUSH
1546: LD_INT 5
1548: PPUSH
1549: LD_INT 0
1551: PPUSH
1552: CALL_OW 517
1556: ST_TO_ADDR
// for i in usSci do
1557: LD_ADDR_VAR 0 2
1561: PUSH
1562: LD_EXP 22
1566: PUSH
1567: FOR_IN
1568: IFFALSE 1713
// begin k := rand ( 1 , xy [ 1 ] ) ;
1570: LD_ADDR_VAR 0 4
1574: PUSH
1575: LD_INT 1
1577: PPUSH
1578: LD_VAR 0 6
1582: PUSH
1583: LD_INT 1
1585: ARRAY
1586: PPUSH
1587: CALL_OW 12
1591: ST_TO_ADDR
// ComExitBuilding ( i ) ;
1592: LD_VAR 0 2
1596: PPUSH
1597: CALL_OW 122
// AddComMoveXY ( i , xy [ 1 ] [ k ] , xy [ 2 ] [ k ] ) ;
1601: LD_VAR 0 2
1605: PPUSH
1606: LD_VAR 0 6
1610: PUSH
1611: LD_INT 1
1613: ARRAY
1614: PUSH
1615: LD_VAR 0 4
1619: ARRAY
1620: PPUSH
1621: LD_VAR 0 6
1625: PUSH
1626: LD_INT 2
1628: ARRAY
1629: PUSH
1630: LD_VAR 0 4
1634: ARRAY
1635: PPUSH
1636: CALL_OW 171
// for j := 1 to 2 do
1640: LD_ADDR_VAR 0 3
1644: PUSH
1645: DOUBLE
1646: LD_INT 1
1648: DEC
1649: ST_TO_ADDR
1650: LD_INT 2
1652: PUSH
1653: FOR_TO
1654: IFFALSE 1709
// begin tmp := Delete ( xy [ j ] , k ) ;
1656: LD_ADDR_VAR 0 5
1660: PUSH
1661: LD_VAR 0 6
1665: PUSH
1666: LD_VAR 0 3
1670: ARRAY
1671: PPUSH
1672: LD_VAR 0 4
1676: PPUSH
1677: CALL_OW 3
1681: ST_TO_ADDR
// xy := Replace ( xy , j , tmp ) ;
1682: LD_ADDR_VAR 0 6
1686: PUSH
1687: LD_VAR 0 6
1691: PPUSH
1692: LD_VAR 0 3
1696: PPUSH
1697: LD_VAR 0 5
1701: PPUSH
1702: CALL_OW 1
1706: ST_TO_ADDR
// end ;
1707: GO 1653
1709: POP
1710: POP
// end ;
1711: GO 1567
1713: POP
1714: POP
// end ;
1715: LD_VAR 0 1
1719: RET
// every 0 0$5 + 0 0$10 trigger aviradzeSpotted and usSci and not usAlert and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do var i , x , y , d , ape ;
1720: LD_EXP 4
1724: PUSH
1725: LD_EXP 22
1729: AND
1730: PUSH
1731: LD_EXP 10
1735: NOT
1736: AND
1737: PUSH
1738: LD_INT 22
1740: PUSH
1741: LD_INT 0
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: LD_INT 25
1750: PUSH
1751: LD_INT 12
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: PPUSH
1762: CALL_OW 69
1766: AND
1767: IFFALSE 2259
1769: GO 1771
1771: DISABLE
1772: LD_INT 0
1774: PPUSH
1775: PPUSH
1776: PPUSH
1777: PPUSH
1778: PPUSH
// begin enable ;
1779: ENABLE
// if UnitFilter ( usSci , [ f_or , [ f_hastask ] , [ f_inside ] ] ) then
1780: LD_EXP 22
1784: PPUSH
1785: LD_INT 2
1787: PUSH
1788: LD_INT 60
1790: PUSH
1791: EMPTY
1792: LIST
1793: PUSH
1794: LD_INT 54
1796: PUSH
1797: EMPTY
1798: LIST
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: LIST
1804: PPUSH
1805: CALL_OW 72
1809: IFFALSE 1813
// exit ;
1811: GO 2259
// for i in usSci do
1813: LD_ADDR_VAR 0 1
1817: PUSH
1818: LD_EXP 22
1822: PUSH
1823: FOR_IN
1824: IFFALSE 2257
// begin if not HasTask ( i ) and GetLives ( i ) = 1000 then
1826: LD_VAR 0 1
1830: PPUSH
1831: CALL_OW 314
1835: NOT
1836: PUSH
1837: LD_VAR 0 1
1841: PPUSH
1842: CALL_OW 256
1846: PUSH
1847: LD_INT 1000
1849: EQUAL
1850: AND
1851: IFFALSE 2058
// begin ape := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) , i ) ;
1853: LD_ADDR_VAR 0 5
1857: PUSH
1858: LD_INT 22
1860: PUSH
1861: LD_INT 0
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: LD_INT 25
1870: PUSH
1871: LD_INT 12
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: PPUSH
1882: CALL_OW 69
1886: PPUSH
1887: LD_VAR 0 1
1891: PPUSH
1892: CALL_OW 74
1896: ST_TO_ADDR
// if GetDistUnits ( i , ape ) < 10 then
1897: LD_VAR 0 1
1901: PPUSH
1902: LD_VAR 0 5
1906: PPUSH
1907: CALL_OW 296
1911: PUSH
1912: LD_INT 10
1914: LESS
1915: IFFALSE 1948
// ComTameXY ( i , GetX ( ape ) , GetY ( ape ) ) else
1917: LD_VAR 0 1
1921: PPUSH
1922: LD_VAR 0 5
1926: PPUSH
1927: CALL_OW 250
1931: PPUSH
1932: LD_VAR 0 5
1936: PPUSH
1937: CALL_OW 251
1941: PPUSH
1942: CALL_OW 131
1946: GO 2058
// begin d := rand ( 0 , 5 ) ;
1948: LD_ADDR_VAR 0 4
1952: PUSH
1953: LD_INT 0
1955: PPUSH
1956: LD_INT 5
1958: PPUSH
1959: CALL_OW 12
1963: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 3 ) ;
1964: LD_ADDR_VAR 0 2
1968: PUSH
1969: LD_VAR 0 1
1973: PPUSH
1974: CALL_OW 250
1978: PPUSH
1979: LD_VAR 0 4
1983: PPUSH
1984: LD_INT 3
1986: PPUSH
1987: CALL_OW 272
1991: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 3 ) ;
1992: LD_ADDR_VAR 0 3
1996: PUSH
1997: LD_VAR 0 1
2001: PPUSH
2002: CALL_OW 251
2006: PPUSH
2007: LD_VAR 0 4
2011: PPUSH
2012: LD_INT 3
2014: PPUSH
2015: CALL_OW 273
2019: ST_TO_ADDR
// if not ValidHex ( x , y ) then
2020: LD_VAR 0 2
2024: PPUSH
2025: LD_VAR 0 3
2029: PPUSH
2030: CALL_OW 488
2034: NOT
2035: IFFALSE 2039
// continue ;
2037: GO 1823
// ComMoveXY ( i , x , y ) ;
2039: LD_VAR 0 1
2043: PPUSH
2044: LD_VAR 0 2
2048: PPUSH
2049: LD_VAR 0 3
2053: PPUSH
2054: CALL_OW 111
// end ; end ; if GetLives ( i ) < 900 and GetDistUnitXY ( i , 37 , 23 ) > 10 then
2058: LD_VAR 0 1
2062: PPUSH
2063: CALL_OW 256
2067: PUSH
2068: LD_INT 900
2070: LESS
2071: PUSH
2072: LD_VAR 0 1
2076: PPUSH
2077: LD_INT 37
2079: PPUSH
2080: LD_INT 23
2082: PPUSH
2083: CALL_OW 297
2087: PUSH
2088: LD_INT 10
2090: GREATER
2091: AND
2092: IFFALSE 2168
// begin if IsOk ( Gladstone ) and IsInUnit ( Gladstone ) then
2094: LD_EXP 19
2098: PPUSH
2099: CALL_OW 302
2103: PUSH
2104: LD_EXP 19
2108: PPUSH
2109: CALL_OW 310
2113: AND
2114: IFFALSE 2125
// ComExitBuilding ( Gladstone ) ;
2116: LD_EXP 19
2120: PPUSH
2121: CALL_OW 122
// AddComHeal ( Gladstone , i ) ;
2125: LD_EXP 19
2129: PPUSH
2130: LD_VAR 0 1
2134: PPUSH
2135: CALL_OW 188
// AddComEnterUnit ( Gladstone , usLab ) ;
2139: LD_EXP 19
2143: PPUSH
2144: LD_INT 3
2146: PPUSH
2147: CALL_OW 180
// ComMoveXY ( i , 37 , 23 ) ;
2151: LD_VAR 0 1
2155: PPUSH
2156: LD_INT 37
2158: PPUSH
2159: LD_INT 23
2161: PPUSH
2162: CALL_OW 111
// end else
2166: GO 2255
// if GetLives ( i ) = 1000 then
2168: LD_VAR 0 1
2172: PPUSH
2173: CALL_OW 256
2177: PUSH
2178: LD_INT 1000
2180: EQUAL
2181: IFFALSE 2255
// begin if SideShoot ( i ) = 2 then
2183: LD_VAR 0 1
2187: PPUSH
2188: CALL_OW 503
2192: PUSH
2193: LD_INT 2
2195: EQUAL
2196: IFFALSE 2243
// begin if not usAlert then
2198: LD_EXP 10
2202: NOT
2203: IFFALSE 2213
// usAlert := true ;
2205: LD_ADDR_EXP 10
2209: PUSH
2210: LD_INT 1
2212: ST_TO_ADDR
// AddComEnterUnit ( i , usLab ) ;
2213: LD_VAR 0 1
2217: PPUSH
2218: LD_INT 3
2220: PPUSH
2221: CALL_OW 180
// usSci := usSci diff i ;
2225: LD_ADDR_EXP 22
2229: PUSH
2230: LD_EXP 22
2234: PUSH
2235: LD_VAR 0 1
2239: DIFF
2240: ST_TO_ADDR
// end else
2241: GO 2255
// ComMoveToArea ( i , tameArea ) ;
2243: LD_VAR 0 1
2247: PPUSH
2248: LD_INT 5
2250: PPUSH
2251: CALL_OW 113
// end ; end ;
2255: GO 1823
2257: POP
2258: POP
// end ;
2259: PPOPN 5
2261: END
// every 0 0$1 trigger not usAlert and ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 999 ] ] ] ) or FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) ) do
2262: LD_EXP 10
2266: NOT
2267: PUSH
2268: LD_INT 22
2270: PUSH
2271: LD_INT 1
2273: PUSH
2274: EMPTY
2275: LIST
2276: LIST
2277: PUSH
2278: LD_INT 21
2280: PUSH
2281: LD_INT 3
2283: PUSH
2284: EMPTY
2285: LIST
2286: LIST
2287: PUSH
2288: LD_INT 3
2290: PUSH
2291: LD_INT 57
2293: PUSH
2294: EMPTY
2295: LIST
2296: PUSH
2297: EMPTY
2298: LIST
2299: LIST
2300: PUSH
2301: LD_INT 3
2303: PUSH
2304: LD_INT 24
2306: PUSH
2307: LD_INT 999
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: PUSH
2314: EMPTY
2315: LIST
2316: LIST
2317: PUSH
2318: EMPTY
2319: LIST
2320: LIST
2321: LIST
2322: LIST
2323: PPUSH
2324: CALL_OW 69
2328: PUSH
2329: LD_INT 7
2331: PPUSH
2332: LD_INT 22
2334: PUSH
2335: LD_INT 2
2337: PUSH
2338: EMPTY
2339: LIST
2340: LIST
2341: PPUSH
2342: CALL_OW 70
2346: OR
2347: AND
2348: IFFALSE 2361
2350: GO 2352
2352: DISABLE
// usAlert := true ;
2353: LD_ADDR_EXP 10
2357: PUSH
2358: LD_INT 1
2360: ST_TO_ADDR
2361: END
// every 0 0$1 trigger usAlert do var i , b , arm ;
2362: LD_EXP 10
2366: IFFALSE 2713
2368: GO 2370
2370: DISABLE
2371: LD_INT 0
2373: PPUSH
2374: PPUSH
2375: PPUSH
// begin usActiveDefend := true ;
2376: LD_ADDR_EXP 11
2380: PUSH
2381: LD_INT 1
2383: ST_TO_ADDR
// if not usForces then
2384: LD_EXP 21
2388: NOT
2389: IFFALSE 2393
// exit ;
2391: GO 2713
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
2393: LD_ADDR_VAR 0 3
2397: PUSH
2398: LD_INT 22
2400: PUSH
2401: LD_INT 1
2403: PUSH
2404: EMPTY
2405: LIST
2406: LIST
2407: PUSH
2408: LD_INT 30
2410: PUSH
2411: LD_INT 4
2413: PUSH
2414: EMPTY
2415: LIST
2416: LIST
2417: PUSH
2418: EMPTY
2419: LIST
2420: LIST
2421: PPUSH
2422: CALL_OW 69
2426: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
2427: LD_ADDR_VAR 0 2
2431: PUSH
2432: LD_INT 22
2434: PUSH
2435: LD_INT 1
2437: PUSH
2438: EMPTY
2439: LIST
2440: LIST
2441: PUSH
2442: LD_INT 30
2444: PUSH
2445: LD_INT 31
2447: PUSH
2448: EMPTY
2449: LIST
2450: LIST
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: PPUSH
2456: CALL_OW 69
2460: ST_TO_ADDR
// ComExitBuilding ( Lynch ) ;
2461: LD_EXP 20
2465: PPUSH
2466: CALL_OW 122
// AddComEnterUnit ( Lynch , arm [ 1 ] ) ;
2470: LD_EXP 20
2474: PPUSH
2475: LD_VAR 0 3
2479: PUSH
2480: LD_INT 1
2482: ARRAY
2483: PPUSH
2484: CALL_OW 180
// if IsOk ( Gladstone ) then
2488: LD_EXP 19
2492: PPUSH
2493: CALL_OW 302
2497: IFFALSE 2538
// begin ComExitBuilding ( Gladstone ) ;
2499: LD_EXP 19
2503: PPUSH
2504: CALL_OW 122
// AddComEnterUnit ( Gladstone , arm [ 1 ] ) ;
2508: LD_EXP 19
2512: PPUSH
2513: LD_VAR 0 3
2517: PUSH
2518: LD_INT 1
2520: ARRAY
2521: PPUSH
2522: CALL_OW 180
// AddComChangeProfession ( Gladstone , class_soldier ) ;
2526: LD_EXP 19
2530: PPUSH
2531: LD_INT 1
2533: PPUSH
2534: CALL_OW 183
// end ; ComExitBuilding ( usForces [ 1 ] ) ;
2538: LD_EXP 21
2542: PUSH
2543: LD_INT 1
2545: ARRAY
2546: PPUSH
2547: CALL_OW 122
// AddComEnterUnit ( usForces [ 1 ] , b [ 1 ] ) ;
2551: LD_EXP 21
2555: PUSH
2556: LD_INT 1
2558: ARRAY
2559: PPUSH
2560: LD_VAR 0 2
2564: PUSH
2565: LD_INT 1
2567: ARRAY
2568: PPUSH
2569: CALL_OW 180
// ComExitBuilding ( usForces [ 2 ] ) ;
2573: LD_EXP 21
2577: PUSH
2578: LD_INT 2
2580: ARRAY
2581: PPUSH
2582: CALL_OW 122
// AddComEnterUnit ( usForces [ 2 ] , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
2586: LD_EXP 21
2590: PUSH
2591: LD_INT 2
2593: ARRAY
2594: PPUSH
2595: LD_INT 22
2597: PUSH
2598: LD_INT 1
2600: PUSH
2601: EMPTY
2602: LIST
2603: LIST
2604: PUSH
2605: LD_INT 30
2607: PUSH
2608: LD_INT 32
2610: PUSH
2611: EMPTY
2612: LIST
2613: LIST
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: PPUSH
2619: CALL_OW 69
2623: PUSH
2624: LD_INT 1
2626: ARRAY
2627: PPUSH
2628: CALL_OW 180
// if b > 1 and usForces > 2 then
2632: LD_VAR 0 2
2636: PUSH
2637: LD_INT 1
2639: GREATER
2640: PUSH
2641: LD_EXP 21
2645: PUSH
2646: LD_INT 2
2648: GREATER
2649: AND
2650: IFFALSE 2713
// begin repeat wait ( 0 0$1 ) ;
2652: LD_INT 35
2654: PPUSH
2655: CALL_OW 67
// until BuildingStatus ( b [ 2 ] ) <> bs_build ;
2659: LD_VAR 0 2
2663: PUSH
2664: LD_INT 2
2666: ARRAY
2667: PPUSH
2668: CALL_OW 461
2672: PUSH
2673: LD_INT 1
2675: NONEQUAL
2676: IFFALSE 2652
// ComExitBuilding ( usForces [ 3 ] ) ;
2678: LD_EXP 21
2682: PUSH
2683: LD_INT 3
2685: ARRAY
2686: PPUSH
2687: CALL_OW 122
// AddComEnterUnit ( usForces [ 3 ] , b [ 2 ] ) ;
2691: LD_EXP 21
2695: PUSH
2696: LD_INT 3
2698: ARRAY
2699: PPUSH
2700: LD_VAR 0 2
2704: PUSH
2705: LD_INT 2
2707: ARRAY
2708: PPUSH
2709: CALL_OW 180
// end ; end ;
2713: PPOPN 3
2715: END
// every 0 0$1 trigger GetLives ( usLab ) < 999 and usAlert and usForces do var i ;
2716: LD_INT 3
2718: PPUSH
2719: CALL_OW 256
2723: PUSH
2724: LD_INT 999
2726: LESS
2727: PUSH
2728: LD_EXP 10
2732: AND
2733: PUSH
2734: LD_EXP 21
2738: AND
2739: IFFALSE 2910
2741: GO 2743
2743: DISABLE
2744: LD_INT 0
2746: PPUSH
// begin for i in usForces do
2747: LD_ADDR_VAR 0 1
2751: PUSH
2752: LD_EXP 21
2756: PUSH
2757: FOR_IN
2758: IFFALSE 2797
// begin if IsInUnit ( i ) then
2760: LD_VAR 0 1
2764: PPUSH
2765: CALL_OW 310
2769: IFFALSE 2780
// ComExitBuilding ( i ) ;
2771: LD_VAR 0 1
2775: PPUSH
2776: CALL_OW 122
// AddComAgressiveMove ( i , 31 , 8 ) ;
2780: LD_VAR 0 1
2784: PPUSH
2785: LD_INT 31
2787: PPUSH
2788: LD_INT 8
2790: PPUSH
2791: CALL_OW 174
// end ;
2795: GO 2757
2797: POP
2798: POP
// wait ( 0 0$8 ) ;
2799: LD_INT 280
2801: PPUSH
2802: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) then
2806: LD_INT 22
2808: PUSH
2809: LD_INT 2
2811: PUSH
2812: EMPTY
2813: LIST
2814: LIST
2815: PUSH
2816: LD_INT 91
2818: PUSH
2819: LD_INT 3
2821: PUSH
2822: LD_INT 14
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: LIST
2829: PUSH
2830: EMPTY
2831: LIST
2832: LIST
2833: PPUSH
2834: CALL_OW 69
2838: IFFALSE 2888
// ComAttackUnit ( usForces , FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) [ 1 ] ) else
2840: LD_EXP 21
2844: PPUSH
2845: LD_INT 22
2847: PUSH
2848: LD_INT 2
2850: PUSH
2851: EMPTY
2852: LIST
2853: LIST
2854: PUSH
2855: LD_INT 91
2857: PUSH
2858: LD_INT 3
2860: PUSH
2861: LD_INT 14
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: LIST
2868: PUSH
2869: EMPTY
2870: LIST
2871: LIST
2872: PPUSH
2873: CALL_OW 69
2877: PUSH
2878: LD_INT 1
2880: ARRAY
2881: PPUSH
2882: CALL_OW 115
2886: GO 2910
// begin wait ( 0 0$20 ) ;
2888: LD_INT 700
2890: PPUSH
2891: CALL_OW 67
// AddComMoveXY ( usForces , 39 , 19 ) ;
2895: LD_EXP 21
2899: PPUSH
2900: LD_INT 39
2902: PPUSH
2903: LD_INT 19
2905: PPUSH
2906: CALL_OW 171
// end ; end ;
2910: PPOPN 1
2912: END
// every 0 0$3 trigger ( GetDistUnits ( Heike , Delta ) < 10 or GetLives ( usLab ) < 999 ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do var tmp , veh ;
2913: LD_EXP 23
2917: PPUSH
2918: LD_INT 1
2920: PPUSH
2921: CALL_OW 296
2925: PUSH
2926: LD_INT 10
2928: LESS
2929: PUSH
2930: LD_INT 3
2932: PPUSH
2933: CALL_OW 256
2937: PUSH
2938: LD_INT 999
2940: LESS
2941: OR
2942: PUSH
2943: LD_INT 22
2945: PUSH
2946: LD_INT 1
2948: PUSH
2949: EMPTY
2950: LIST
2951: LIST
2952: PUSH
2953: LD_INT 25
2955: PUSH
2956: LD_INT 2
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: PPUSH
2967: CALL_OW 69
2971: AND
2972: IFFALSE 3086
2974: GO 2976
2976: DISABLE
2977: LD_INT 0
2979: PPUSH
2980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
2981: LD_ADDR_VAR 0 1
2985: PUSH
2986: LD_INT 22
2988: PUSH
2989: LD_INT 1
2991: PUSH
2992: EMPTY
2993: LIST
2994: LIST
2995: PUSH
2996: LD_INT 25
2998: PUSH
2999: LD_INT 2
3001: PUSH
3002: EMPTY
3003: LIST
3004: LIST
3005: PUSH
3006: EMPTY
3007: LIST
3008: LIST
3009: PPUSH
3010: CALL_OW 69
3014: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3015: LD_ADDR_VAR 0 2
3019: PUSH
3020: LD_INT 22
3022: PUSH
3023: LD_INT 1
3025: PUSH
3026: EMPTY
3027: LIST
3028: LIST
3029: PUSH
3030: LD_INT 21
3032: PUSH
3033: LD_INT 2
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: PUSH
3040: LD_INT 58
3042: PUSH
3043: EMPTY
3044: LIST
3045: PUSH
3046: EMPTY
3047: LIST
3048: LIST
3049: LIST
3050: PPUSH
3051: CALL_OW 69
3055: ST_TO_ADDR
// if not tmp then
3056: LD_VAR 0 1
3060: NOT
3061: IFFALSE 3065
// exit ;
3063: GO 3086
// ComExitBuilding ( tmp ) ;
3065: LD_VAR 0 1
3069: PPUSH
3070: CALL_OW 122
// AddComDismantle ( tmp , usLab ) ;
3074: LD_VAR 0 1
3078: PPUSH
3079: LD_INT 3
3081: PPUSH
3082: CALL_OW 227
// end ;
3086: PPOPN 2
3088: END
// every 0 0$1 trigger usAlert and FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) do var i , tmp ;
3089: LD_EXP 10
3093: PUSH
3094: LD_INT 7
3096: PPUSH
3097: LD_INT 22
3099: PUSH
3100: LD_INT 1
3102: PUSH
3103: EMPTY
3104: LIST
3105: LIST
3106: PUSH
3107: LD_INT 21
3109: PUSH
3110: LD_INT 1
3112: PUSH
3113: EMPTY
3114: LIST
3115: LIST
3116: PUSH
3117: LD_INT 3
3119: PUSH
3120: LD_INT 24
3122: PUSH
3123: LD_INT 600
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: PUSH
3130: EMPTY
3131: LIST
3132: LIST
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: LIST
3138: PPUSH
3139: CALL_OW 70
3143: AND
3144: IFFALSE 3272
3146: GO 3148
3148: DISABLE
3149: LD_INT 0
3151: PPUSH
3152: PPUSH
// begin enable ;
3153: ENABLE
// tmp := FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) ;
3154: LD_ADDR_VAR 0 2
3158: PUSH
3159: LD_INT 7
3161: PPUSH
3162: LD_INT 22
3164: PUSH
3165: LD_INT 1
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: PUSH
3172: LD_INT 21
3174: PUSH
3175: LD_INT 1
3177: PUSH
3178: EMPTY
3179: LIST
3180: LIST
3181: PUSH
3182: LD_INT 3
3184: PUSH
3185: LD_INT 24
3187: PUSH
3188: LD_INT 600
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: LIST
3203: PPUSH
3204: CALL_OW 70
3208: ST_TO_ADDR
// if not tmp then
3209: LD_VAR 0 2
3213: NOT
3214: IFFALSE 3218
// exit ;
3216: GO 3272
// for i in tmp do
3218: LD_ADDR_VAR 0 1
3222: PUSH
3223: LD_VAR 0 2
3227: PUSH
3228: FOR_IN
3229: IFFALSE 3270
// if IsInUnit ( i ) then
3231: LD_VAR 0 1
3235: PPUSH
3236: CALL_OW 310
3240: IFFALSE 3253
// ComExitBuilding ( i ) else
3242: LD_VAR 0 1
3246: PPUSH
3247: CALL_OW 122
3251: GO 3268
// ComMoveXY ( i , 48 , 74 ) ;
3253: LD_VAR 0 1
3257: PPUSH
3258: LD_INT 48
3260: PPUSH
3261: LD_INT 74
3263: PPUSH
3264: CALL_OW 111
3268: GO 3228
3270: POP
3271: POP
// end ;
3272: PPOPN 2
3274: END
// every 12 12$00 do var i , un , tmp ;
3275: GO 3277
3277: DISABLE
3278: LD_INT 0
3280: PPUSH
3281: PPUSH
3282: PPUSH
// begin tmp := [ ] ;
3283: LD_ADDR_VAR 0 3
3287: PUSH
3288: EMPTY
3289: ST_TO_ADDR
// uc_side := 1 ;
3290: LD_ADDR_OWVAR 20
3294: PUSH
3295: LD_INT 1
3297: ST_TO_ADDR
// uc_nation := 1 ;
3298: LD_ADDR_OWVAR 21
3302: PUSH
3303: LD_INT 1
3305: ST_TO_ADDR
// case Difficulty of 1 :
3306: LD_OWVAR 67
3310: PUSH
3311: LD_INT 1
3313: DOUBLE
3314: EQUAL
3315: IFTRUE 3319
3317: GO 3422
3319: POP
// begin wait ( 1 1$00 ) ;
3320: LD_INT 2100
3322: PPUSH
3323: CALL_OW 67
// for i := 1 to 2 do
3327: LD_ADDR_VAR 0 1
3331: PUSH
3332: DOUBLE
3333: LD_INT 1
3335: DEC
3336: ST_TO_ADDR
3337: LD_INT 2
3339: PUSH
3340: FOR_TO
3341: IFFALSE 3418
// begin PrepareHuman ( false , [ 1 , 4 ] [ i mod 2 + 1 ] , 1 ) ;
3343: LD_INT 0
3345: PPUSH
3346: LD_INT 1
3348: PUSH
3349: LD_INT 4
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PUSH
3356: LD_VAR 0 1
3360: PUSH
3361: LD_INT 2
3363: MOD
3364: PUSH
3365: LD_INT 1
3367: PLUS
3368: ARRAY
3369: PPUSH
3370: LD_INT 1
3372: PPUSH
3373: CALL_OW 380
// un := CreateHuman ;
3377: LD_ADDR_VAR 0 2
3381: PUSH
3382: CALL_OW 44
3386: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3387: LD_ADDR_VAR 0 3
3391: PUSH
3392: LD_VAR 0 3
3396: PPUSH
3397: LD_VAR 0 3
3401: PUSH
3402: LD_INT 1
3404: PLUS
3405: PPUSH
3406: LD_VAR 0 2
3410: PPUSH
3411: CALL_OW 1
3415: ST_TO_ADDR
// end ;
3416: GO 3340
3418: POP
3419: POP
// end ; 2 :
3420: GO 3822
3422: LD_INT 2
3424: DOUBLE
3425: EQUAL
3426: IFTRUE 3430
3428: GO 3564
3430: POP
// begin wait ( 0 0$30 ) ;
3431: LD_INT 1050
3433: PPUSH
3434: CALL_OW 67
// for i := 1 to 2 do
3438: LD_ADDR_VAR 0 1
3442: PUSH
3443: DOUBLE
3444: LD_INT 1
3446: DEC
3447: ST_TO_ADDR
3448: LD_INT 2
3450: PUSH
3451: FOR_TO
3452: IFFALSE 3508
// begin PrepareHuman ( false , 1 , 2 ) ;
3454: LD_INT 0
3456: PPUSH
3457: LD_INT 1
3459: PPUSH
3460: LD_INT 2
3462: PPUSH
3463: CALL_OW 380
// un := CreateHuman ;
3467: LD_ADDR_VAR 0 2
3471: PUSH
3472: CALL_OW 44
3476: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3477: LD_ADDR_VAR 0 3
3481: PUSH
3482: LD_VAR 0 3
3486: PPUSH
3487: LD_VAR 0 3
3491: PUSH
3492: LD_INT 1
3494: PLUS
3495: PPUSH
3496: LD_VAR 0 2
3500: PPUSH
3501: CALL_OW 1
3505: ST_TO_ADDR
// end ;
3506: GO 3451
3508: POP
3509: POP
// PrepareHuman ( false , 4 , 2 ) ;
3510: LD_INT 0
3512: PPUSH
3513: LD_INT 4
3515: PPUSH
3516: LD_INT 2
3518: PPUSH
3519: CALL_OW 380
// un := CreateHuman ;
3523: LD_ADDR_VAR 0 2
3527: PUSH
3528: CALL_OW 44
3532: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3533: LD_ADDR_VAR 0 3
3537: PUSH
3538: LD_VAR 0 3
3542: PPUSH
3543: LD_VAR 0 3
3547: PUSH
3548: LD_INT 1
3550: PLUS
3551: PPUSH
3552: LD_VAR 0 2
3556: PPUSH
3557: CALL_OW 1
3561: ST_TO_ADDR
// end ; 3 .. 4 :
3562: GO 3822
3564: LD_INT 3
3566: DOUBLE
3567: GREATEREQUAL
3568: IFFALSE 3576
3570: LD_INT 4
3572: DOUBLE
3573: LESSEQUAL
3574: IFTRUE 3578
3576: GO 3821
3578: POP
// begin for i := 1 to 2 do
3579: LD_ADDR_VAR 0 1
3583: PUSH
3584: DOUBLE
3585: LD_INT 1
3587: DEC
3588: ST_TO_ADDR
3589: LD_INT 2
3591: PUSH
3592: FOR_TO
3593: IFFALSE 3649
// begin PrepareHuman ( false , 1 , 2 ) ;
3595: LD_INT 0
3597: PPUSH
3598: LD_INT 1
3600: PPUSH
3601: LD_INT 2
3603: PPUSH
3604: CALL_OW 380
// un := CreateHuman ;
3608: LD_ADDR_VAR 0 2
3612: PUSH
3613: CALL_OW 44
3617: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3618: LD_ADDR_VAR 0 3
3622: PUSH
3623: LD_VAR 0 3
3627: PPUSH
3628: LD_VAR 0 3
3632: PUSH
3633: LD_INT 1
3635: PLUS
3636: PPUSH
3637: LD_VAR 0 2
3641: PPUSH
3642: CALL_OW 1
3646: ST_TO_ADDR
// end ;
3647: GO 3592
3649: POP
3650: POP
// PrepareHuman ( false , 4 , 2 ) ;
3651: LD_INT 0
3653: PPUSH
3654: LD_INT 4
3656: PPUSH
3657: LD_INT 2
3659: PPUSH
3660: CALL_OW 380
// un := CreateHuman ;
3664: LD_ADDR_VAR 0 2
3668: PUSH
3669: CALL_OW 44
3673: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3674: LD_ADDR_VAR 0 3
3678: PUSH
3679: LD_VAR 0 3
3683: PPUSH
3684: LD_VAR 0 3
3688: PUSH
3689: LD_INT 1
3691: PLUS
3692: PPUSH
3693: LD_VAR 0 2
3697: PPUSH
3698: CALL_OW 1
3702: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_machine_gun , 90 ) ;
3703: LD_INT 1
3705: PPUSH
3706: LD_INT 1
3708: PPUSH
3709: LD_INT 2
3711: PPUSH
3712: LD_INT 2
3714: PPUSH
3715: LD_INT 1
3717: PPUSH
3718: LD_INT 2
3720: PPUSH
3721: LD_INT 90
3723: PPUSH
3724: CALL 241 0 7
// un := CreateVehicle ;
3728: LD_ADDR_VAR 0 2
3732: PUSH
3733: CALL_OW 45
3737: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3738: LD_ADDR_VAR 0 3
3742: PUSH
3743: LD_VAR 0 3
3747: PPUSH
3748: LD_VAR 0 3
3752: PUSH
3753: LD_INT 1
3755: PLUS
3756: PPUSH
3757: LD_VAR 0 2
3761: PPUSH
3762: CALL_OW 1
3766: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
3767: LD_INT 0
3769: PPUSH
3770: LD_INT 1
3772: PPUSH
3773: LD_INT 2
3775: PPUSH
3776: CALL_OW 380
// un := CreateHuman ;
3780: LD_ADDR_VAR 0 2
3784: PUSH
3785: CALL_OW 44
3789: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3790: LD_ADDR_VAR 0 3
3794: PUSH
3795: LD_VAR 0 3
3799: PPUSH
3800: LD_VAR 0 3
3804: PUSH
3805: LD_INT 1
3807: PLUS
3808: PPUSH
3809: LD_VAR 0 2
3813: PPUSH
3814: CALL_OW 1
3818: ST_TO_ADDR
// end ; end ;
3819: GO 3822
3821: POP
// for i := 1 to tmp do
3822: LD_ADDR_VAR 0 1
3826: PUSH
3827: DOUBLE
3828: LD_INT 1
3830: DEC
3831: ST_TO_ADDR
3832: LD_VAR 0 3
3836: PUSH
3837: FOR_TO
3838: IFFALSE 4003
// begin SetDir ( tmp [ i ] , 1 ) ;
3840: LD_VAR 0 3
3844: PUSH
3845: LD_VAR 0 1
3849: ARRAY
3850: PPUSH
3851: LD_INT 1
3853: PPUSH
3854: CALL_OW 233
// if GetType ( tmp [ i ] ) = unit_human then
3858: LD_VAR 0 3
3862: PUSH
3863: LD_VAR 0 1
3867: ARRAY
3868: PPUSH
3869: CALL_OW 247
3873: PUSH
3874: LD_INT 1
3876: EQUAL
3877: IFFALSE 3905
// PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) else
3879: LD_VAR 0 3
3883: PUSH
3884: LD_VAR 0 1
3888: ARRAY
3889: PPUSH
3890: LD_INT 28
3892: PPUSH
3893: LD_INT 52
3895: PPUSH
3896: LD_INT 0
3898: PPUSH
3899: CALL_OW 48
3903: GO 3973
// begin PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) ;
3905: LD_VAR 0 3
3909: PUSH
3910: LD_VAR 0 1
3914: ARRAY
3915: PPUSH
3916: LD_INT 28
3918: PPUSH
3919: LD_INT 52
3921: PPUSH
3922: LD_INT 0
3924: PPUSH
3925: CALL_OW 48
// i := i + 1 ;
3929: LD_ADDR_VAR 0 1
3933: PUSH
3934: LD_VAR 0 1
3938: PUSH
3939: LD_INT 1
3941: PLUS
3942: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ i ] , tmp [ i - 1 ] ) ;
3943: LD_VAR 0 3
3947: PUSH
3948: LD_VAR 0 1
3952: ARRAY
3953: PPUSH
3954: LD_VAR 0 3
3958: PUSH
3959: LD_VAR 0 1
3963: PUSH
3964: LD_INT 1
3966: MINUS
3967: ARRAY
3968: PPUSH
3969: CALL_OW 52
// end ; ComMoveXY ( tmp [ i ] , 43 , 56 ) ;
3973: LD_VAR 0 3
3977: PUSH
3978: LD_VAR 0 1
3982: ARRAY
3983: PPUSH
3984: LD_INT 43
3986: PPUSH
3987: LD_INT 56
3989: PPUSH
3990: CALL_OW 111
// wait ( 0 0$2 ) ;
3994: LD_INT 70
3996: PPUSH
3997: CALL_OW 67
// end ;
4001: GO 3837
4003: POP
4004: POP
// wait ( 0 0$2 ) ;
4005: LD_INT 70
4007: PPUSH
4008: CALL_OW 67
// if not FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) then
4012: LD_INT 7
4014: PPUSH
4015: LD_INT 22
4017: PUSH
4018: LD_INT 2
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: PPUSH
4025: CALL_OW 70
4029: NOT
4030: IFFALSE 4228
// begin AddComAgressiveMove ( tmp , 35 , 24 ) ;
4032: LD_VAR 0 3
4036: PPUSH
4037: LD_INT 35
4039: PPUSH
4040: LD_INT 24
4042: PPUSH
4043: CALL_OW 174
// usForces := usForces union UnitFilter ( tmp , [ f_class , 1 ] ) ;
4047: LD_ADDR_EXP 21
4051: PUSH
4052: LD_EXP 21
4056: PUSH
4057: LD_VAR 0 3
4061: PPUSH
4062: LD_INT 25
4064: PUSH
4065: LD_INT 1
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PPUSH
4072: CALL_OW 72
4076: UNION
4077: ST_TO_ADDR
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
4078: LD_INT 22
4080: PUSH
4081: LD_INT 1
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: PUSH
4088: LD_INT 30
4090: PUSH
4091: LD_INT 4
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PPUSH
4102: CALL_OW 69
4106: PUSH
4107: LD_INT 1
4109: ARRAY
4110: PPUSH
4111: CALL_OW 313
4115: PUSH
4116: LD_INT 6
4118: LESS
4119: IFFALSE 4178
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 1 ] ) , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
4121: LD_VAR 0 3
4125: PPUSH
4126: LD_INT 25
4128: PUSH
4129: LD_INT 1
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: PPUSH
4136: CALL_OW 72
4140: PPUSH
4141: LD_INT 22
4143: PUSH
4144: LD_INT 1
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: PUSH
4151: LD_INT 30
4153: PUSH
4154: LD_INT 4
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: PUSH
4161: EMPTY
4162: LIST
4163: LIST
4164: PPUSH
4165: CALL_OW 69
4169: PUSH
4170: LD_INT 1
4172: ARRAY
4173: PPUSH
4174: CALL_OW 180
// if UnitFilter ( tmp , [ f_class , 4 ] ) then
4178: LD_VAR 0 3
4182: PPUSH
4183: LD_INT 25
4185: PUSH
4186: LD_INT 4
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PPUSH
4193: CALL_OW 72
4197: IFFALSE 4226
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 4 ] ) , usLab ) ;
4199: LD_VAR 0 3
4203: PPUSH
4204: LD_INT 25
4206: PUSH
4207: LD_INT 4
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: PPUSH
4214: CALL_OW 72
4218: PPUSH
4219: LD_INT 3
4221: PPUSH
4222: CALL_OW 180
// end else
4226: GO 4503
// begin tmp := tmp union FilterUnitsInArea ( retreatArea , [ f_side , 1 ] ) ;
4228: LD_ADDR_VAR 0 3
4232: PUSH
4233: LD_VAR 0 3
4237: PUSH
4238: LD_INT 6
4240: PPUSH
4241: LD_INT 22
4243: PUSH
4244: LD_INT 1
4246: PUSH
4247: EMPTY
4248: LIST
4249: LIST
4250: PPUSH
4251: CALL_OW 70
4255: UNION
4256: ST_TO_ADDR
// ComMoveXY ( tmp , 45 , 54 ) ;
4257: LD_VAR 0 3
4261: PPUSH
4262: LD_INT 45
4264: PPUSH
4265: LD_INT 54
4267: PPUSH
4268: CALL_OW 111
// wait ( 0 0$3 ) ;
4272: LD_INT 105
4274: PPUSH
4275: CALL_OW 67
// AddComAgressiveMove ( tmp diff UnitFilter ( tmp , [ f_class , 4 ] ) , 35 , 24 ) ;
4279: LD_VAR 0 3
4283: PUSH
4284: LD_VAR 0 3
4288: PPUSH
4289: LD_INT 25
4291: PUSH
4292: LD_INT 4
4294: PUSH
4295: EMPTY
4296: LIST
4297: LIST
4298: PPUSH
4299: CALL_OW 72
4303: DIFF
4304: PPUSH
4305: LD_INT 35
4307: PPUSH
4308: LD_INT 24
4310: PPUSH
4311: CALL_OW 174
// AddComMoveXY ( UnitFilter ( tmp , [ f_class , 4 ] ) , 42 , 49 ) ;
4315: LD_VAR 0 3
4319: PPUSH
4320: LD_INT 25
4322: PUSH
4323: LD_INT 4
4325: PUSH
4326: EMPTY
4327: LIST
4328: LIST
4329: PPUSH
4330: CALL_OW 72
4334: PPUSH
4335: LD_INT 42
4337: PPUSH
4338: LD_INT 49
4340: PPUSH
4341: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4345: LD_INT 35
4347: PPUSH
4348: CALL_OW 67
// for i in tmp do
4352: LD_ADDR_VAR 0 1
4356: PUSH
4357: LD_VAR 0 3
4361: PUSH
4362: FOR_IN
4363: IFFALSE 4494
// if IsDead ( i ) then
4365: LD_VAR 0 1
4369: PPUSH
4370: CALL_OW 301
4374: IFFALSE 4394
// tmp := tmp diff i else
4376: LD_ADDR_VAR 0 3
4380: PUSH
4381: LD_VAR 0 3
4385: PUSH
4386: LD_VAR 0 1
4390: DIFF
4391: ST_TO_ADDR
4392: GO 4492
// if GetClass ( i ) = 1 then
4394: LD_VAR 0 1
4398: PPUSH
4399: CALL_OW 257
4403: PUSH
4404: LD_INT 1
4406: EQUAL
4407: IFFALSE 4492
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 42 , 49 ) > 6 then
4409: LD_VAR 0 1
4413: PPUSH
4414: CALL_OW 256
4418: PUSH
4419: LD_INT 600
4421: LESS
4422: PUSH
4423: LD_VAR 0 1
4427: PPUSH
4428: LD_INT 42
4430: PPUSH
4431: LD_INT 49
4433: PPUSH
4434: CALL_OW 297
4438: PUSH
4439: LD_INT 6
4441: GREATER
4442: AND
4443: IFFALSE 4462
// ComMoveXY ( i , 42 , 49 ) else
4445: LD_VAR 0 1
4449: PPUSH
4450: LD_INT 42
4452: PPUSH
4453: LD_INT 49
4455: PPUSH
4456: CALL_OW 111
4460: GO 4492
// if GetLives ( i ) = 1000 then
4462: LD_VAR 0 1
4466: PPUSH
4467: CALL_OW 256
4471: PUSH
4472: LD_INT 1000
4474: EQUAL
4475: IFFALSE 4492
// ComAgressiveMove ( i , 36 , 25 ) ;
4477: LD_VAR 0 1
4481: PPUSH
4482: LD_INT 36
4484: PPUSH
4485: LD_INT 25
4487: PPUSH
4488: CALL_OW 114
// end ;
4492: GO 4362
4494: POP
4495: POP
// until not tmp ;
4496: LD_VAR 0 3
4500: NOT
4501: IFFALSE 4345
// end ; end ;
4503: PPOPN 3
4505: END
// every 1 1$30 trigger FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) and not attackDeltaAllowed do var i , un , veh ;
4506: LD_INT 7
4508: PPUSH
4509: LD_INT 22
4511: PUSH
4512: LD_INT 2
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: PPUSH
4519: CALL_OW 70
4523: PUSH
4524: LD_EXP 14
4528: NOT
4529: AND
4530: IFFALSE 4688
4532: GO 4534
4534: DISABLE
4535: LD_INT 0
4537: PPUSH
4538: PPUSH
4539: PPUSH
// begin for i := 1 to 2 do
4540: LD_ADDR_VAR 0 1
4544: PUSH
4545: DOUBLE
4546: LD_INT 1
4548: DEC
4549: ST_TO_ADDR
4550: LD_INT 2
4552: PUSH
4553: FOR_TO
4554: IFFALSE 4686
// begin wait ( 0 0$3 ) ;
4556: LD_INT 105
4558: PPUSH
4559: CALL_OW 67
// uc_side := 1 ;
4563: LD_ADDR_OWVAR 20
4567: PUSH
4568: LD_INT 1
4570: ST_TO_ADDR
// uc_nation := 1 ;
4571: LD_ADDR_OWVAR 21
4575: PUSH
4576: LD_INT 1
4578: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 90 ) ;
4579: LD_INT 1
4581: PPUSH
4582: LD_INT 1
4584: PPUSH
4585: LD_INT 2
4587: PPUSH
4588: LD_INT 1
4590: PPUSH
4591: LD_INT 1
4593: PPUSH
4594: LD_INT 4
4596: PPUSH
4597: LD_INT 90
4599: PPUSH
4600: CALL 241 0 7
// veh := CreateVehicle ;
4604: LD_ADDR_VAR 0 3
4608: PUSH
4609: CALL_OW 45
4613: ST_TO_ADDR
// PlaceUnitXY ( veh , 29 , 52 , false ) ;
4614: LD_VAR 0 3
4618: PPUSH
4619: LD_INT 29
4621: PPUSH
4622: LD_INT 52
4624: PPUSH
4625: LD_INT 0
4627: PPUSH
4628: CALL_OW 48
// PrepareHuman ( false , 3 , 3 ) ;
4632: LD_INT 0
4634: PPUSH
4635: LD_INT 3
4637: PPUSH
4638: LD_INT 3
4640: PPUSH
4641: CALL_OW 380
// un := CreateHuman ;
4645: LD_ADDR_VAR 0 2
4649: PUSH
4650: CALL_OW 44
4654: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4655: LD_VAR 0 2
4659: PPUSH
4660: LD_VAR 0 3
4664: PPUSH
4665: CALL_OW 52
// ComAgressiveMove ( veh , 36 , 25 ) ;
4669: LD_VAR 0 3
4673: PPUSH
4674: LD_INT 36
4676: PPUSH
4677: LD_INT 25
4679: PPUSH
4680: CALL_OW 114
// end ;
4684: GO 4553
4686: POP
4687: POP
// end ; end_of_file
4688: PPOPN 3
4690: END
// export function Action ; var i , tmp ; begin
4691: LD_INT 0
4693: PPUSH
4694: PPUSH
4695: PPUSH
// InGameOn ;
4696: CALL_OW 8
// DoNotAttack ( 2 , usLab ) ;
4700: LD_INT 2
4702: PPUSH
4703: LD_INT 3
4705: PPUSH
4706: CALL_OW 471
// ComMoveXY ( Heike , 78 , 61 ) ;
4710: LD_EXP 23
4714: PPUSH
4715: LD_INT 78
4717: PPUSH
4718: LD_INT 61
4720: PPUSH
4721: CALL_OW 111
// if Mike then
4725: LD_EXP 25
4729: IFFALSE 4746
// ComMoveXY ( Mike , 80 , 66 ) ;
4731: LD_EXP 25
4735: PPUSH
4736: LD_INT 80
4738: PPUSH
4739: LD_INT 66
4741: PPUSH
4742: CALL_OW 111
// if Givi then
4746: LD_EXP 24
4750: IFFALSE 4767
// ComMoveXY ( Givi , 82 , 66 ) ;
4752: LD_EXP 24
4756: PPUSH
4757: LD_INT 82
4759: PPUSH
4760: LD_INT 66
4762: PPUSH
4763: CALL_OW 111
// if Kamil then
4767: LD_EXP 26
4771: IFFALSE 4788
// ComMoveXY ( Kamil , 82 , 67 ) ;
4773: LD_EXP 26
4777: PPUSH
4778: LD_INT 82
4780: PPUSH
4781: LD_INT 67
4783: PPUSH
4784: CALL_OW 111
// CenterNowOnUnits ( Heike ) ;
4788: LD_EXP 23
4792: PPUSH
4793: CALL_OW 87
// wait ( 0 0$2 ) ;
4797: LD_INT 70
4799: PPUSH
4800: CALL_OW 67
// if Givi and Mike then
4804: LD_EXP 24
4808: PUSH
4809: LD_EXP 25
4813: AND
4814: IFFALSE 5348
// begin AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
4816: LD_EXP 24
4820: PUSH
4821: LD_EXP 25
4825: PUSH
4826: LD_EXP 26
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: LIST
4835: PPUSH
4836: LD_EXP 23
4840: PPUSH
4841: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
4845: LD_EXP 23
4849: PPUSH
4850: LD_EXP 24
4854: PPUSH
4855: CALL_OW 179
// Say ( Givi , DG-1-start ) ;
4859: LD_EXP 24
4863: PPUSH
4864: LD_STRING DG-1-start
4866: PPUSH
4867: CALL_OW 88
// Say ( Heike , DH-1-start ) ;
4871: LD_EXP 23
4875: PPUSH
4876: LD_STRING DH-1-start
4878: PPUSH
4879: CALL_OW 88
// AddComTurnUnit ( Mike , Heike ) ;
4883: LD_EXP 25
4887: PPUSH
4888: LD_EXP 23
4892: PPUSH
4893: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
4897: LD_EXP 23
4901: PPUSH
4902: LD_EXP 25
4906: PPUSH
4907: CALL_OW 179
// Say ( Mike , DM-1-start ) ;
4911: LD_EXP 25
4915: PPUSH
4916: LD_STRING DM-1-start
4918: PPUSH
4919: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
4923: LD_EXP 23
4927: PPUSH
4928: LD_STRING DH-2-start
4930: PPUSH
4931: CALL_OW 88
// Say ( Mike , DM-2-start ) ;
4935: LD_EXP 25
4939: PPUSH
4940: LD_STRING DM-2-start
4942: PPUSH
4943: CALL_OW 88
// Say ( Givi , DG-2-start ) ;
4947: LD_EXP 24
4951: PPUSH
4952: LD_STRING DG-2-start
4954: PPUSH
4955: CALL_OW 88
// ComTurnUnit ( Mike , Givi ) ;
4959: LD_EXP 25
4963: PPUSH
4964: LD_EXP 24
4968: PPUSH
4969: CALL_OW 119
// ComTurnUnit ( Heike , Mike ) ;
4973: LD_EXP 23
4977: PPUSH
4978: LD_EXP 25
4982: PPUSH
4983: CALL_OW 119
// Say ( Mike , DM-3-start ) ;
4987: LD_EXP 25
4991: PPUSH
4992: LD_STRING DM-3-start
4994: PPUSH
4995: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
4999: LD_EXP 23
5003: PPUSH
5004: LD_STRING DH-3-start
5006: PPUSH
5007: CALL_OW 88
// ComMoveXY ( [ Heike , Mike , Givi , Kamil ] , 84 , 51 ) ;
5011: LD_EXP 23
5015: PUSH
5016: LD_EXP 25
5020: PUSH
5021: LD_EXP 24
5025: PUSH
5026: LD_EXP 26
5030: PUSH
5031: EMPTY
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: PPUSH
5037: LD_INT 84
5039: PPUSH
5040: LD_INT 51
5042: PPUSH
5043: CALL_OW 111
// wait ( 0 0$2 ) ;
5047: LD_INT 70
5049: PPUSH
5050: CALL_OW 67
// Say ( Givi , DG-3-start ) ;
5054: LD_EXP 24
5058: PPUSH
5059: LD_STRING DG-3-start
5061: PPUSH
5062: CALL_OW 88
// ComHold ( [ Heike , Mike , Givi , Kamil ] ) ;
5066: LD_EXP 23
5070: PUSH
5071: LD_EXP 25
5075: PUSH
5076: LD_EXP 24
5080: PUSH
5081: LD_EXP 26
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: PPUSH
5092: CALL_OW 140
// AddComTurnUnit ( Heike , Givi ) ;
5096: LD_EXP 23
5100: PPUSH
5101: LD_EXP 24
5105: PPUSH
5106: CALL_OW 179
// AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
5110: LD_EXP 24
5114: PUSH
5115: LD_EXP 25
5119: PUSH
5120: LD_EXP 26
5124: PUSH
5125: EMPTY
5126: LIST
5127: LIST
5128: LIST
5129: PPUSH
5130: LD_EXP 23
5134: PPUSH
5135: CALL_OW 179
// Say ( Heike , DH-4-start ) ;
5139: LD_EXP 23
5143: PPUSH
5144: LD_STRING DH-4-start
5146: PPUSH
5147: CALL_OW 88
// Say ( Givi , DG-4-start ) ;
5151: LD_EXP 24
5155: PPUSH
5156: LD_STRING DG-4-start
5158: PPUSH
5159: CALL_OW 88
// Say ( Heike , DH-5-start ) ;
5163: LD_EXP 23
5167: PPUSH
5168: LD_STRING DH-5-start
5170: PPUSH
5171: CALL_OW 88
// Say ( Givi , DG-5-start ) ;
5175: LD_EXP 24
5179: PPUSH
5180: LD_STRING DG-5-start
5182: PPUSH
5183: CALL_OW 88
// Say ( Heike , DH-6-start ) ;
5187: LD_EXP 23
5191: PPUSH
5192: LD_STRING DH-6-start
5194: PPUSH
5195: CALL_OW 88
// if not Kamil then
5199: LD_EXP 26
5203: NOT
5204: IFFALSE 5255
// begin Say ( Mike , DM-6-start ) ;
5206: LD_EXP 25
5210: PPUSH
5211: LD_STRING DM-6-start
5213: PPUSH
5214: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi ] , Mike ) ;
5218: LD_EXP 23
5222: PUSH
5223: LD_EXP 24
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PPUSH
5232: LD_EXP 25
5236: PPUSH
5237: CALL_OW 119
// Say ( Givi , DG-6-start ) ;
5241: LD_EXP 24
5245: PPUSH
5246: LD_STRING DG-6-start
5248: PPUSH
5249: CALL_OW 88
// end else
5253: GO 5334
// begin Say ( Mike , DM-6-start-a ) ;
5255: LD_EXP 25
5259: PPUSH
5260: LD_STRING DM-6-start-a
5262: PPUSH
5263: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi , Mike ] , Kamil ) ;
5267: LD_EXP 23
5271: PUSH
5272: LD_EXP 24
5276: PUSH
5277: LD_EXP 25
5281: PUSH
5282: EMPTY
5283: LIST
5284: LIST
5285: LIST
5286: PPUSH
5287: LD_EXP 26
5291: PPUSH
5292: CALL_OW 119
// ComTurnUnit ( Kamil , Mike ) ;
5296: LD_EXP 26
5300: PPUSH
5301: LD_EXP 25
5305: PPUSH
5306: CALL_OW 119
// Say ( Kamil , DKam-7-start-a ) ;
5310: LD_EXP 26
5314: PPUSH
5315: LD_STRING DKam-7-start-a
5317: PPUSH
5318: CALL_OW 88
// Say ( Givi , DG-6-start-a ) ;
5322: LD_EXP 24
5326: PPUSH
5327: LD_STRING DG-6-start-a
5329: PPUSH
5330: CALL_OW 88
// end ; Say ( Heike , DH-7-start ) ;
5334: LD_EXP 23
5338: PPUSH
5339: LD_STRING DH-7-start
5341: PPUSH
5342: CALL_OW 88
// end else
5346: GO 6070
// if not Mike and Givi then
5348: LD_EXP 25
5352: NOT
5353: PUSH
5354: LD_EXP 24
5358: AND
5359: IFFALSE 5704
// begin AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5361: LD_EXP 24
5365: PUSH
5366: LD_EXP 26
5370: PUSH
5371: EMPTY
5372: LIST
5373: LIST
5374: PPUSH
5375: LD_EXP 23
5379: PPUSH
5380: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
5384: LD_EXP 23
5388: PPUSH
5389: LD_EXP 24
5393: PPUSH
5394: CALL_OW 179
// Say ( Givi , DG-1-start-c ) ;
5398: LD_EXP 24
5402: PPUSH
5403: LD_STRING DG-1-start-c
5405: PPUSH
5406: CALL_OW 88
// Say ( Heike , DH-1-start-c ) ;
5410: LD_EXP 23
5414: PPUSH
5415: LD_STRING DH-1-start-c
5417: PPUSH
5418: CALL_OW 88
// Say ( Givi , DG-2-start-c ) ;
5422: LD_EXP 24
5426: PPUSH
5427: LD_STRING DG-2-start-c
5429: PPUSH
5430: CALL_OW 88
// Say ( Heike , DH-2-start-c ) ;
5434: LD_EXP 23
5438: PPUSH
5439: LD_STRING DH-2-start-c
5441: PPUSH
5442: CALL_OW 88
// Say ( Givi , DG-3-start-c ) ;
5446: LD_EXP 24
5450: PPUSH
5451: LD_STRING DG-3-start-c
5453: PPUSH
5454: CALL_OW 88
// ComMoveXY ( Heike , 83 , 56 ) ;
5458: LD_EXP 23
5462: PPUSH
5463: LD_INT 83
5465: PPUSH
5466: LD_INT 56
5468: PPUSH
5469: CALL_OW 111
// ComMoveXY ( Givi , 83 , 59 ) ;
5473: LD_EXP 24
5477: PPUSH
5478: LD_INT 83
5480: PPUSH
5481: LD_INT 59
5483: PPUSH
5484: CALL_OW 111
// if Kamil then
5488: LD_EXP 26
5492: IFFALSE 5509
// ComMoveXY ( Kamil , 80 , 58 ) ;
5494: LD_EXP 26
5498: PPUSH
5499: LD_INT 80
5501: PPUSH
5502: LD_INT 58
5504: PPUSH
5505: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5509: LD_EXP 23
5513: PPUSH
5514: LD_EXP 24
5518: PPUSH
5519: CALL_OW 179
// AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5523: LD_EXP 24
5527: PUSH
5528: LD_EXP 26
5532: PUSH
5533: EMPTY
5534: LIST
5535: LIST
5536: PPUSH
5537: LD_EXP 23
5541: PPUSH
5542: CALL_OW 179
// Say ( Heike , DH-3-start-c ) ;
5546: LD_EXP 23
5550: PPUSH
5551: LD_STRING DH-3-start-c
5553: PPUSH
5554: CALL_OW 88
// Say ( Givi , DG-4-start-c ) ;
5558: LD_EXP 24
5562: PPUSH
5563: LD_STRING DG-4-start-c
5565: PPUSH
5566: CALL_OW 88
// Say ( Heike , DH-5-start-c ) ;
5570: LD_EXP 23
5574: PPUSH
5575: LD_STRING DH-5-start-c
5577: PPUSH
5578: CALL_OW 88
// Say ( Givi , DG-5-start-c ) ;
5582: LD_EXP 24
5586: PPUSH
5587: LD_STRING DG-5-start-c
5589: PPUSH
5590: CALL_OW 88
// Say ( Heike , DH-6-start-c ) ;
5594: LD_EXP 23
5598: PPUSH
5599: LD_STRING DH-6-start-c
5601: PPUSH
5602: CALL_OW 88
// Say ( Givi , DG-6-start-c ) ;
5606: LD_EXP 24
5610: PPUSH
5611: LD_STRING DG-6-start-c
5613: PPUSH
5614: CALL_OW 88
// if Kamil then
5618: LD_EXP 26
5622: IFFALSE 5678
// begin ComTurnUnit ( Kamil , Heike ) ;
5624: LD_EXP 26
5628: PPUSH
5629: LD_EXP 23
5633: PPUSH
5634: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5638: LD_EXP 26
5642: PPUSH
5643: LD_STRING DKam-1-start-c
5645: PPUSH
5646: CALL_OW 88
// ComTurnUnit ( Givi , Kamil ) ;
5650: LD_EXP 24
5654: PPUSH
5655: LD_EXP 26
5659: PPUSH
5660: CALL_OW 119
// Say ( Givi , DG-7-start-c ) ;
5664: LD_EXP 24
5668: PPUSH
5669: LD_STRING DG-7-start-c
5671: PPUSH
5672: CALL_OW 88
// end else
5676: GO 5702
// begin Say ( Givi , DG-8-start-c ) ;
5678: LD_EXP 24
5682: PPUSH
5683: LD_STRING DG-8-start-c
5685: PPUSH
5686: CALL_OW 88
// Say ( Heike , DH-7-start-c ) ;
5690: LD_EXP 23
5694: PPUSH
5695: LD_STRING DH-7-start-c
5697: PPUSH
5698: CALL_OW 88
// end ; end else
5702: GO 6070
// if not Givi and Mike then
5704: LD_EXP 24
5708: NOT
5709: PUSH
5710: LD_EXP 25
5714: AND
5715: IFFALSE 5974
// begin AddComTurnUnit ( [ Mike , Kamil ] , Heike ) ;
5717: LD_EXP 25
5721: PUSH
5722: LD_EXP 26
5726: PUSH
5727: EMPTY
5728: LIST
5729: LIST
5730: PPUSH
5731: LD_EXP 23
5735: PPUSH
5736: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
5740: LD_EXP 23
5744: PPUSH
5745: LD_EXP 25
5749: PPUSH
5750: CALL_OW 179
// Say ( Mike , DM-1-start-b ) ;
5754: LD_EXP 25
5758: PPUSH
5759: LD_STRING DM-1-start-b
5761: PPUSH
5762: CALL_OW 88
// Say ( Heike , DH-1-start-b ) ;
5766: LD_EXP 23
5770: PPUSH
5771: LD_STRING DH-1-start-b
5773: PPUSH
5774: CALL_OW 88
// Say ( Mike , DM-2-start-b ) ;
5778: LD_EXP 25
5782: PPUSH
5783: LD_STRING DM-2-start-b
5785: PPUSH
5786: CALL_OW 88
// Say ( Heike , DH-2-start-b ) ;
5790: LD_EXP 23
5794: PPUSH
5795: LD_STRING DH-2-start-b
5797: PPUSH
5798: CALL_OW 88
// Say ( Mike , DM-3-start-b ) ;
5802: LD_EXP 25
5806: PPUSH
5807: LD_STRING DM-3-start-b
5809: PPUSH
5810: CALL_OW 88
// if Kamil then
5814: LD_EXP 26
5818: IFFALSE 5835
// ComMoveXY ( Kamil , 80 , 58 ) ;
5820: LD_EXP 26
5824: PPUSH
5825: LD_INT 80
5827: PPUSH
5828: LD_INT 58
5830: PPUSH
5831: CALL_OW 111
// ComMoveXY ( Heike , 83 , 56 ) ;
5835: LD_EXP 23
5839: PPUSH
5840: LD_INT 83
5842: PPUSH
5843: LD_INT 56
5845: PPUSH
5846: CALL_OW 111
// ComMoveXY ( Mike , 83 , 59 ) ;
5850: LD_EXP 25
5854: PPUSH
5855: LD_INT 83
5857: PPUSH
5858: LD_INT 59
5860: PPUSH
5861: CALL_OW 111
// AddComTurnUnit ( Heike , Mike ) ;
5865: LD_EXP 23
5869: PPUSH
5870: LD_EXP 25
5874: PPUSH
5875: CALL_OW 179
// AddComTurnUnit ( [ Kamil , Mike ] , Heike ) ;
5879: LD_EXP 26
5883: PUSH
5884: LD_EXP 25
5888: PUSH
5889: EMPTY
5890: LIST
5891: LIST
5892: PPUSH
5893: LD_EXP 23
5897: PPUSH
5898: CALL_OW 179
// Say ( Heike , DH-3-start-b ) ;
5902: LD_EXP 23
5906: PPUSH
5907: LD_STRING DH-3-start-b
5909: PPUSH
5910: CALL_OW 88
// Say ( Mike , DM-4-start-b ) ;
5914: LD_EXP 25
5918: PPUSH
5919: LD_STRING DM-4-start-b
5921: PPUSH
5922: CALL_OW 88
// if Kamil then
5926: LD_EXP 26
5930: IFFALSE 5960
// begin ComTurnUnit ( Kamil , Heike ) ;
5932: LD_EXP 26
5936: PPUSH
5937: LD_EXP 23
5941: PPUSH
5942: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5946: LD_EXP 26
5950: PPUSH
5951: LD_STRING DKam-1-start-c
5953: PPUSH
5954: CALL_OW 88
// end else
5958: GO 5972
// begin Say ( Mike , DM-5-start-b ) ;
5960: LD_EXP 25
5964: PPUSH
5965: LD_STRING DM-5-start-b
5967: PPUSH
5968: CALL_OW 88
// end ; end else
5972: GO 6070
// if Kamil then
5974: LD_EXP 26
5978: IFFALSE 6058
// begin AddComTurnUnit ( Heike , Kamil ) ;
5980: LD_EXP 23
5984: PPUSH
5985: LD_EXP 26
5989: PPUSH
5990: CALL_OW 179
// AddComTurnUnit ( Kamil , Heike ) ;
5994: LD_EXP 26
5998: PPUSH
5999: LD_EXP 23
6003: PPUSH
6004: CALL_OW 179
// Say ( Heike , DH-1-start-f ) ;
6008: LD_EXP 23
6012: PPUSH
6013: LD_STRING DH-1-start-f
6015: PPUSH
6016: CALL_OW 88
// Say ( Kamil , DKam-1-start-f ) ;
6020: LD_EXP 26
6024: PPUSH
6025: LD_STRING DKam-1-start-f
6027: PPUSH
6028: CALL_OW 88
// Say ( Heike , DH-2-start-f ) ;
6032: LD_EXP 23
6036: PPUSH
6037: LD_STRING DH-2-start-f
6039: PPUSH
6040: CALL_OW 88
// Say ( Kamil , DKam-2-start-f ) ;
6044: LD_EXP 26
6048: PPUSH
6049: LD_STRING DKam-2-start-f
6051: PPUSH
6052: CALL_OW 88
// end else
6056: GO 6070
// begin Say ( Heike , DH-1-start-d ) ;
6058: LD_EXP 23
6062: PPUSH
6063: LD_STRING DH-1-start-d
6065: PPUSH
6066: CALL_OW 88
// end ; ComFree ( [ Heike , Givi , Mike , Kamil ] ) ;
6070: LD_EXP 23
6074: PUSH
6075: LD_EXP 24
6079: PUSH
6080: LD_EXP 25
6084: PUSH
6085: LD_EXP 26
6089: PUSH
6090: EMPTY
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: PPUSH
6096: CALL_OW 139
// InGameOff ;
6100: CALL_OW 9
// ChangeMissionObjectives ( OEast ) ;
6104: LD_STRING OEast
6106: PPUSH
6107: CALL_OW 337
// SetAreaMapShow ( eastExitArea , 1 ) ;
6111: LD_INT 10
6113: PPUSH
6114: LD_INT 1
6116: PPUSH
6117: CALL_OW 424
// SaveForQuickRestart ;
6121: CALL_OW 22
// wait ( 0 0$20 ) ;
6125: LD_INT 700
6127: PPUSH
6128: CALL_OW 67
// SendSciToForest ;
6132: CALL 1524 0 0
// if Difficulty = 1 then
6136: LD_OWVAR 67
6140: PUSH
6141: LD_INT 1
6143: EQUAL
6144: IFFALSE 6148
// exit ;
6146: GO 6269
// wait ( [ 5 5$00 , 2 2$30 , 2 2$00 ] [ Difficulty - 1 ] ) ;
6148: LD_INT 10500
6150: PUSH
6151: LD_INT 5250
6153: PUSH
6154: LD_INT 4200
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: LIST
6161: PUSH
6162: LD_OWVAR 67
6166: PUSH
6167: LD_INT 1
6169: MINUS
6170: ARRAY
6171: PPUSH
6172: CALL_OW 67
// if usAlert then
6176: LD_EXP 10
6180: IFFALSE 6184
// exit ;
6182: GO 6269
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
6184: LD_ADDR_VAR 0 3
6188: PUSH
6189: LD_INT 22
6191: PUSH
6192: LD_INT 1
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: PUSH
6199: LD_INT 25
6201: PUSH
6202: LD_INT 2
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: PPUSH
6213: CALL_OW 69
6217: ST_TO_ADDR
// if not tmp then
6218: LD_VAR 0 3
6222: NOT
6223: IFFALSE 6227
// exit ;
6225: GO 6269
// ComExitBuilding ( tmp ) ;
6227: LD_VAR 0 3
6231: PPUSH
6232: CALL_OW 122
// AddComBuild ( tmp , b_breastwork , 40 , 13 , 3 ) ;
6236: LD_VAR 0 3
6240: PPUSH
6241: LD_INT 31
6243: PPUSH
6244: LD_INT 40
6246: PPUSH
6247: LD_INT 13
6249: PPUSH
6250: LD_INT 3
6252: PPUSH
6253: CALL_OW 205
// AddComEnterUnit ( tmp , Delta ) ;
6257: LD_VAR 0 3
6261: PPUSH
6262: LD_INT 1
6264: PPUSH
6265: CALL_OW 180
// end ;
6269: LD_VAR 0 1
6273: RET
// every 3 3$00 do
6274: GO 6276
6276: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
6277: LD_INT 1
6279: PPUSH
6280: LD_INT 570
6282: PPUSH
6283: LD_INT 350
6285: PPUSH
6286: CALL_OW 550
// wait ( 2 2$40 ) ;
6290: LD_INT 5600
6292: PPUSH
6293: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
6297: LD_INT 0
6299: PPUSH
6300: LD_INT 570
6302: PPUSH
6303: LD_INT 350
6305: PPUSH
6306: CALL_OW 550
// end ;
6310: END
// every 0 0$1 trigger not aviradzeSpotted and See ( 2 , Aviradze ) do var i , pepAmount ;
6311: LD_EXP 4
6315: NOT
6316: PUSH
6317: LD_INT 2
6319: PPUSH
6320: LD_EXP 27
6324: PPUSH
6325: CALL_OW 292
6329: AND
6330: IFFALSE 7255
6332: GO 6334
6334: DISABLE
6335: LD_INT 0
6337: PPUSH
6338: PPUSH
// begin SetAreaMapShow ( eastExitArea , 0 ) ;
6339: LD_INT 10
6341: PPUSH
6342: LD_INT 0
6344: PPUSH
6345: CALL_OW 424
// aviradzeSpotted := true ;
6349: LD_ADDR_EXP 4
6353: PUSH
6354: LD_INT 1
6356: ST_TO_ADDR
// pepAmount := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ;
6357: LD_ADDR_VAR 0 2
6361: PUSH
6362: LD_INT 22
6364: PUSH
6365: LD_INT 2
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: PUSH
6372: LD_INT 21
6374: PUSH
6375: LD_INT 1
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: PPUSH
6386: CALL_OW 69
6390: ST_TO_ADDR
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6391: LD_EXP 23
6395: PPUSH
6396: LD_EXP 27
6400: PPUSH
6401: CALL_OW 250
6405: PPUSH
6406: LD_EXP 27
6410: PPUSH
6411: CALL_OW 251
6415: PPUSH
6416: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6420: LD_INT 35
6422: PPUSH
6423: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 16 ;
6427: LD_EXP 23
6431: PPUSH
6432: LD_EXP 27
6436: PPUSH
6437: CALL_OW 296
6441: PUSH
6442: LD_INT 16
6444: LESS
6445: IFFALSE 6420
// InGameOn ;
6447: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
6451: LD_INT 5
6453: PPUSH
6454: LD_INT 2
6456: PPUSH
6457: CALL_OW 343
// if pepAmount > 2 then
6461: LD_VAR 0 2
6465: PUSH
6466: LD_INT 2
6468: GREATER
6469: IFFALSE 6485
// Say ( Heike , DH-1-spot ) else
6471: LD_EXP 23
6475: PPUSH
6476: LD_STRING DH-1-spot
6478: PPUSH
6479: CALL_OW 88
6483: GO 6497
// Say ( Heike , DH-1-spot-d ) ;
6485: LD_EXP 23
6489: PPUSH
6490: LD_STRING DH-1-spot-d
6492: PPUSH
6493: CALL_OW 88
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6497: LD_EXP 23
6501: PPUSH
6502: LD_EXP 27
6506: PPUSH
6507: CALL_OW 250
6511: PPUSH
6512: LD_EXP 27
6516: PPUSH
6517: CALL_OW 251
6521: PPUSH
6522: CALL_OW 111
// for i in [ Kamil , Mike , Givi ] do
6526: LD_ADDR_VAR 0 1
6530: PUSH
6531: LD_EXP 26
6535: PUSH
6536: LD_EXP 25
6540: PUSH
6541: LD_EXP 24
6545: PUSH
6546: EMPTY
6547: LIST
6548: LIST
6549: LIST
6550: PUSH
6551: FOR_IN
6552: IFFALSE 6591
// if GetDistUnits ( i , Aviradze ) > 7 then
6554: LD_VAR 0 1
6558: PPUSH
6559: LD_EXP 27
6563: PPUSH
6564: CALL_OW 296
6568: PUSH
6569: LD_INT 7
6571: GREATER
6572: IFFALSE 6589
// ComMoveXY ( i , 102 , 40 ) ;
6574: LD_VAR 0 1
6578: PPUSH
6579: LD_INT 102
6581: PPUSH
6582: LD_INT 40
6584: PPUSH
6585: CALL_OW 111
6589: GO 6551
6591: POP
6592: POP
// repeat wait ( 0 0$1 ) ;
6593: LD_INT 35
6595: PPUSH
6596: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 6 ;
6600: LD_EXP 23
6604: PPUSH
6605: LD_EXP 27
6609: PPUSH
6610: CALL_OW 296
6614: PUSH
6615: LD_INT 6
6617: LESS
6618: IFFALSE 6593
// ComTurnUnit ( Heike , Aviradze ) ;
6620: LD_EXP 23
6624: PPUSH
6625: LD_EXP 27
6629: PPUSH
6630: CALL_OW 119
// ComTurnUnit ( [ Aviradze , Sophia , Kaia ] , Heike ) ;
6634: LD_EXP 27
6638: PUSH
6639: LD_EXP 29
6643: PUSH
6644: LD_EXP 28
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: LIST
6653: PPUSH
6654: LD_EXP 23
6658: PPUSH
6659: CALL_OW 119
// if pepAmount > 1 then
6663: LD_VAR 0 2
6667: PUSH
6668: LD_INT 1
6670: GREATER
6671: IFFALSE 6723
// begin wait ( 0 0$2 ) ;
6673: LD_INT 70
6675: PPUSH
6676: CALL_OW 67
// ComTurnUnit ( [ Kamil , Mike , Givi ] , Aviradze ) ;
6680: LD_EXP 26
6684: PUSH
6685: LD_EXP 25
6689: PUSH
6690: LD_EXP 24
6694: PUSH
6695: EMPTY
6696: LIST
6697: LIST
6698: LIST
6699: PPUSH
6700: LD_EXP 27
6704: PPUSH
6705: CALL_OW 119
// Say ( Heike , DH-2-spot ) ;
6709: LD_EXP 23
6713: PPUSH
6714: LD_STRING DH-2-spot
6716: PPUSH
6717: CALL_OW 88
// end else
6721: GO 6735
// Say ( Heike , DH-2-spot-d ) ;
6723: LD_EXP 23
6727: PPUSH
6728: LD_STRING DH-2-spot-d
6730: PPUSH
6731: CALL_OW 88
// Say ( Aviradze , DA-2-spot ) ;
6735: LD_EXP 27
6739: PPUSH
6740: LD_STRING DA-2-spot
6742: PPUSH
6743: CALL_OW 88
// Say ( Heike , DH-3-spot ) ;
6747: LD_EXP 23
6751: PPUSH
6752: LD_STRING DH-3-spot
6754: PPUSH
6755: CALL_OW 88
// ComMoveUnit ( Kaia , Heike ) ;
6759: LD_EXP 28
6763: PPUSH
6764: LD_EXP 23
6768: PPUSH
6769: CALL_OW 112
// ComTurnUnit ( Heike , Kaia ) ;
6773: LD_EXP 23
6777: PPUSH
6778: LD_EXP 28
6782: PPUSH
6783: CALL_OW 119
// wait ( 0 0$0.3 ) ;
6787: LD_INT 10
6789: PPUSH
6790: CALL_OW 67
// Say ( Kaia , DK-3-spot ) ;
6794: LD_EXP 28
6798: PPUSH
6799: LD_STRING DK-3-spot
6801: PPUSH
6802: CALL_OW 88
// ComTurnUnit ( Kaia , Heike ) ;
6806: LD_EXP 28
6810: PPUSH
6811: LD_EXP 23
6815: PPUSH
6816: CALL_OW 119
// Say ( Heike , DH-4-spot ) ;
6820: LD_EXP 23
6824: PPUSH
6825: LD_STRING DH-4-spot
6827: PPUSH
6828: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6832: LD_INT 10
6834: PPUSH
6835: CALL_OW 67
// ComTurnUnit ( Heike , Aviradze ) ;
6839: LD_EXP 23
6843: PPUSH
6844: LD_EXP 27
6848: PPUSH
6849: CALL_OW 119
// Say ( Aviradze , DA-4-spot ) ;
6853: LD_EXP 27
6857: PPUSH
6858: LD_STRING DA-4-spot
6860: PPUSH
6861: CALL_OW 88
// ComTurnUnit ( Kaia , Aviradze ) ;
6865: LD_EXP 28
6869: PPUSH
6870: LD_EXP 27
6874: PPUSH
6875: CALL_OW 119
// Say ( Kaia , DK-4-spot ) ;
6879: LD_EXP 28
6883: PPUSH
6884: LD_STRING DK-4-spot
6886: PPUSH
6887: CALL_OW 88
// ComTurnUnit ( Aviradze , Kaia ) ;
6891: LD_EXP 27
6895: PPUSH
6896: LD_EXP 28
6900: PPUSH
6901: CALL_OW 119
// Say ( Aviradze , DA-5-spot ) ;
6905: LD_EXP 27
6909: PPUSH
6910: LD_STRING DA-5-spot
6912: PPUSH
6913: CALL_OW 88
// Say ( Kaia , DK-5-spot ) ;
6917: LD_EXP 28
6921: PPUSH
6922: LD_STRING DK-5-spot
6924: PPUSH
6925: CALL_OW 88
// if pepAmount = 1 then
6929: LD_VAR 0 2
6933: PUSH
6934: LD_INT 1
6936: EQUAL
6937: IFFALSE 6951
// Say ( Heike , DH-5-spot-f ) ;
6939: LD_EXP 23
6943: PPUSH
6944: LD_STRING DH-5-spot-f
6946: PPUSH
6947: CALL_OW 88
// if pepAmount < 3 then
6951: LD_VAR 0 2
6955: PUSH
6956: LD_INT 3
6958: LESS
6959: IFFALSE 6975
// Say ( Aviradze , DA-6-spot-f ) else
6961: LD_EXP 27
6965: PPUSH
6966: LD_STRING DA-6-spot-f
6968: PPUSH
6969: CALL_OW 88
6973: GO 7011
// if pepAmount < 4 then
6975: LD_VAR 0 2
6979: PUSH
6980: LD_INT 4
6982: LESS
6983: IFFALSE 6999
// Say ( Aviradze , DA-6-spot-c ) else
6985: LD_EXP 27
6989: PPUSH
6990: LD_STRING DA-6-spot-c
6992: PPUSH
6993: CALL_OW 88
6997: GO 7011
// Say ( Aviradze , DA-6-spot ) ;
6999: LD_EXP 27
7003: PPUSH
7004: LD_STRING DA-6-spot
7006: PPUSH
7007: CALL_OW 88
// if Kamil then
7011: LD_EXP 26
7015: IFFALSE 7029
// Say ( Kamil , DKam-6-spot ) ;
7017: LD_EXP 26
7021: PPUSH
7022: LD_STRING DKam-6-spot
7024: PPUSH
7025: CALL_OW 88
// Say ( Kaia , DK-6-spot ) ;
7029: LD_EXP 28
7033: PPUSH
7034: LD_STRING DK-6-spot
7036: PPUSH
7037: CALL_OW 88
// ComTurnUnit ( Aviradze , Heike ) ;
7041: LD_EXP 27
7045: PPUSH
7046: LD_EXP 23
7050: PPUSH
7051: CALL_OW 119
// Say ( Aviradze , DA-7-spot ) ;
7055: LD_EXP 27
7059: PPUSH
7060: LD_STRING DA-7-spot
7062: PPUSH
7063: CALL_OW 88
// Say ( Heike , DH-7-spot ) ;
7067: LD_EXP 23
7071: PPUSH
7072: LD_STRING DH-7-spot
7074: PPUSH
7075: CALL_OW 88
// if sciCounterKill >= 3 then
7079: LD_EXP 9
7083: PUSH
7084: LD_INT 3
7086: GREATEREQUAL
7087: IFFALSE 7113
// begin Say ( Heike , DH-7-spot-a ) ;
7089: LD_EXP 23
7093: PPUSH
7094: LD_STRING DH-7-spot-a
7096: PPUSH
7097: CALL_OW 88
// Say ( Aviradze , DA-8-spot-a ) ;
7101: LD_EXP 27
7105: PPUSH
7106: LD_STRING DA-8-spot-a
7108: PPUSH
7109: CALL_OW 88
// end ; InGameOff ;
7113: CALL_OW 9
// if sciCounterKill < 3 then
7117: LD_EXP 9
7121: PUSH
7122: LD_INT 3
7124: LESS
7125: IFFALSE 7193
// begin SetSide ( Kaia , 2 ) ;
7127: LD_EXP 28
7131: PPUSH
7132: LD_INT 2
7134: PPUSH
7135: CALL_OW 235
// ComFree ( Kaia ) ;
7139: LD_EXP 28
7143: PPUSH
7144: CALL_OW 139
// if Kamil then
7148: LD_EXP 26
7152: IFFALSE 7175
// begin ComHold ( Kamil ) ;
7154: LD_EXP 26
7158: PPUSH
7159: CALL_OW 140
// SetSide ( Kamil , 5 ) ;
7163: LD_EXP 26
7167: PPUSH
7168: LD_INT 5
7170: PPUSH
7171: CALL_OW 235
// end ; ChangeMissionObjectives ( OSci ) ;
7175: LD_STRING OSci
7177: PPUSH
7178: CALL_OW 337
// ComFree ( Aviradze ) ;
7182: LD_EXP 27
7186: PPUSH
7187: CALL_OW 139
// end else
7191: GO 7255
// begin aviradzeQuestDone := true ;
7193: LD_ADDR_EXP 8
7197: PUSH
7198: LD_INT 1
7200: ST_TO_ADDR
// attackDeltaAllowed := true ;
7201: LD_ADDR_EXP 14
7205: PUSH
7206: LD_INT 1
7208: ST_TO_ADDR
// ChangeMissionObjectives ( ODelta2 ) ;
7209: LD_STRING ODelta2
7211: PPUSH
7212: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
7216: LD_ADDR_VAR 0 1
7220: PUSH
7221: LD_INT 22
7223: PUSH
7224: LD_INT 5
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: PPUSH
7231: CALL_OW 69
7235: PUSH
7236: FOR_IN
7237: IFFALSE 7253
// SetSide ( i , 2 ) ;
7239: LD_VAR 0 1
7243: PPUSH
7244: LD_INT 2
7246: PPUSH
7247: CALL_OW 235
7251: GO 7236
7253: POP
7254: POP
// end ; end ;
7255: PPOPN 2
7257: END
// every 0 0$2 trigger GetDistUnitXY ( Aviradze , 106 , 38 ) > 8 and GetSide ( Aviradze ) = 5 do
7258: LD_EXP 27
7262: PPUSH
7263: LD_INT 106
7265: PPUSH
7266: LD_INT 38
7268: PPUSH
7269: CALL_OW 297
7273: PUSH
7274: LD_INT 8
7276: GREATER
7277: PUSH
7278: LD_EXP 27
7282: PPUSH
7283: CALL_OW 255
7287: PUSH
7288: LD_INT 5
7290: EQUAL
7291: AND
7292: IFFALSE 7313
7294: GO 7296
7296: DISABLE
// begin enable ;
7297: ENABLE
// ComMoveXY ( Aviradze , 106 , 38 ) ;
7298: LD_EXP 27
7302: PPUSH
7303: LD_INT 106
7305: PPUSH
7306: LD_INT 38
7308: PPUSH
7309: CALL_OW 111
// end ;
7313: END
// every 0 0$2 trigger usAlert and not aviradzeQuestDone do
7314: LD_EXP 10
7318: PUSH
7319: LD_EXP 8
7323: NOT
7324: AND
7325: IFFALSE 7342
7327: GO 7329
7329: DISABLE
// SayRadioNoFaceNoName ( Lynch , DDelta-Alarm-1 ) ;
7330: LD_EXP 20
7334: PPUSH
7335: LD_STRING DDelta-Alarm-1
7337: PPUSH
7338: CALL 74261 0 2
7342: END
// every 0 0$1 trigger not sciSpotted and GetDistUnits ( NearestUnitToUnit ( usSci , Heike ) , Heike ) < 8 and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and not aviradzeSpotted do
7343: LD_EXP 7
7347: NOT
7348: PUSH
7349: LD_EXP 22
7353: PPUSH
7354: LD_EXP 23
7358: PPUSH
7359: CALL_OW 74
7363: PPUSH
7364: LD_EXP 23
7368: PPUSH
7369: CALL_OW 296
7373: PUSH
7374: LD_INT 8
7376: LESS
7377: AND
7378: PUSH
7379: LD_INT 2
7381: PPUSH
7382: LD_EXP 22
7386: PPUSH
7387: LD_EXP 23
7391: PPUSH
7392: CALL_OW 74
7396: PPUSH
7397: CALL_OW 292
7401: AND
7402: PUSH
7403: LD_INT 22
7405: PUSH
7406: LD_INT 2
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 21
7415: PUSH
7416: LD_INT 1
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: PPUSH
7427: CALL_OW 69
7431: PUSH
7432: LD_INT 1
7434: GREATER
7435: AND
7436: PUSH
7437: LD_EXP 4
7441: NOT
7442: AND
7443: IFFALSE 7487
7445: GO 7447
7447: DISABLE
// begin sciSpotted := true ;
7448: LD_ADDR_EXP 7
7452: PUSH
7453: LD_INT 1
7455: ST_TO_ADDR
// CenterNowOnUnits ( NearestUnitToUnit ( usSci , Heike ) ) ;
7456: LD_EXP 22
7460: PPUSH
7461: LD_EXP 23
7465: PPUSH
7466: CALL_OW 74
7470: PPUSH
7471: CALL_OW 87
// Say ( Heike , DH-1-sci ) ;
7475: LD_EXP 23
7479: PPUSH
7480: LD_STRING DH-1-sci
7482: PPUSH
7483: CALL_OW 88
// end ;
7487: END
// every 0 0$1 trigger aviradzeSpotted and not sciSpotted and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and aviradzeSpotted and not aviradzeQuestDone do var un ;
7488: LD_EXP 4
7492: PUSH
7493: LD_EXP 7
7497: NOT
7498: AND
7499: PUSH
7500: LD_INT 2
7502: PPUSH
7503: LD_EXP 22
7507: PPUSH
7508: LD_EXP 23
7512: PPUSH
7513: CALL_OW 74
7517: PPUSH
7518: CALL_OW 292
7522: AND
7523: PUSH
7524: LD_INT 22
7526: PUSH
7527: LD_INT 2
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: PUSH
7534: LD_INT 21
7536: PUSH
7537: LD_INT 1
7539: PUSH
7540: EMPTY
7541: LIST
7542: LIST
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: PPUSH
7548: CALL_OW 69
7552: PUSH
7553: LD_INT 1
7555: GREATER
7556: AND
7557: PUSH
7558: LD_EXP 4
7562: AND
7563: PUSH
7564: LD_EXP 8
7568: NOT
7569: AND
7570: IFFALSE 7711
7572: GO 7574
7574: DISABLE
7575: LD_INT 0
7577: PPUSH
// begin sciSpotted := true ;
7578: LD_ADDR_EXP 7
7582: PUSH
7583: LD_INT 1
7585: ST_TO_ADDR
// un := NearestUnitToUnit ( usSci , Heike ) ;
7586: LD_ADDR_VAR 0 1
7590: PUSH
7591: LD_EXP 22
7595: PPUSH
7596: LD_EXP 23
7600: PPUSH
7601: CALL_OW 74
7605: ST_TO_ADDR
// DialogueOn ;
7606: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 2 , - 3 ) ;
7610: LD_VAR 0 1
7614: PPUSH
7615: CALL_OW 250
7619: PPUSH
7620: LD_VAR 0 1
7624: PPUSH
7625: CALL_OW 251
7629: PPUSH
7630: LD_INT 2
7632: PPUSH
7633: LD_INT 3
7635: NEG
7636: PPUSH
7637: CALL_OW 330
// CenterNowOnUnits ( un ) ;
7641: LD_VAR 0 1
7645: PPUSH
7646: CALL_OW 87
// Say ( Heike , DH-1-sci-a ) ;
7650: LD_EXP 23
7654: PPUSH
7655: LD_STRING DH-1-sci-a
7657: PPUSH
7658: CALL_OW 88
// if Mike then
7662: LD_EXP 25
7666: IFFALSE 7680
// Say ( Mike , DM-1-sci-a ) ;
7668: LD_EXP 25
7672: PPUSH
7673: LD_STRING DM-1-sci-a
7675: PPUSH
7676: CALL_OW 88
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 2 ) ;
7680: LD_VAR 0 1
7684: PPUSH
7685: CALL_OW 250
7689: PPUSH
7690: LD_VAR 0 1
7694: PPUSH
7695: CALL_OW 251
7699: PPUSH
7700: LD_INT 2
7702: PPUSH
7703: CALL_OW 331
// DialogueOff ;
7707: CALL_OW 7
// end ;
7711: PPOPN 1
7713: END
// every 0 0$1 trigger usAlert and ( GetLives ( Gladstone ) < 1000 or GetLives ( usLab ) < 999 ) do var veh ;
7714: LD_EXP 10
7718: PUSH
7719: LD_EXP 19
7723: PPUSH
7724: CALL_OW 256
7728: PUSH
7729: LD_INT 1000
7731: LESS
7732: PUSH
7733: LD_INT 3
7735: PPUSH
7736: CALL_OW 256
7740: PUSH
7741: LD_INT 999
7743: LESS
7744: OR
7745: AND
7746: IFFALSE 8002
7748: GO 7750
7750: DISABLE
7751: LD_INT 0
7753: PPUSH
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
7754: LD_ADDR_VAR 0 1
7758: PUSH
7759: LD_INT 22
7761: PUSH
7762: LD_INT 1
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: PUSH
7769: LD_INT 21
7771: PUSH
7772: LD_INT 2
7774: PUSH
7775: EMPTY
7776: LIST
7777: LIST
7778: PUSH
7779: LD_INT 58
7781: PUSH
7782: EMPTY
7783: LIST
7784: PUSH
7785: EMPTY
7786: LIST
7787: LIST
7788: LIST
7789: PPUSH
7790: CALL_OW 69
7794: ST_TO_ADDR
// if veh and IsOk ( Gladstone ) then
7795: LD_VAR 0 1
7799: PUSH
7800: LD_EXP 19
7804: PPUSH
7805: CALL_OW 302
7809: AND
7810: IFFALSE 7852
// begin if IsInUnit ( Gladstone ) then
7812: LD_EXP 19
7816: PPUSH
7817: CALL_OW 310
7821: IFFALSE 7832
// ComExitBuilding ( Gladstone ) ;
7823: LD_EXP 19
7827: PPUSH
7828: CALL_OW 122
// AddComEnterUnit ( Gladstone , veh [ 1 ] ) ;
7832: LD_EXP 19
7836: PPUSH
7837: LD_VAR 0 1
7841: PUSH
7842: LD_INT 1
7844: ARRAY
7845: PPUSH
7846: CALL_OW 180
// end else
7850: GO 7872
// if IsInUnit ( Gladstone ) then
7852: LD_EXP 19
7856: PPUSH
7857: CALL_OW 310
7861: IFFALSE 7872
// ComExitBuilding ( Gladstone ) ;
7863: LD_EXP 19
7867: PPUSH
7868: CALL_OW 122
// AddComMoveXY ( Gladstone , 27 , 51 ) ;
7872: LD_EXP 19
7876: PPUSH
7877: LD_INT 27
7879: PPUSH
7880: LD_INT 51
7882: PPUSH
7883: CALL_OW 171
// Say ( Gladstone , D8-Glad-2 ) ;
7887: LD_EXP 19
7891: PPUSH
7892: LD_STRING D8-Glad-2
7894: PPUSH
7895: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7899: LD_INT 35
7901: PPUSH
7902: CALL_OW 67
// until IsAt ( Gladstone , 27 , 51 ) or IsAt ( IsInUnit ( Gladstone ) , 27 , 51 ) or IsDead ( Gladstone ) ;
7906: LD_EXP 19
7910: PPUSH
7911: LD_INT 27
7913: PPUSH
7914: LD_INT 51
7916: PPUSH
7917: CALL_OW 307
7921: PUSH
7922: LD_EXP 19
7926: PPUSH
7927: CALL_OW 310
7931: PPUSH
7932: LD_INT 27
7934: PPUSH
7935: LD_INT 51
7937: PPUSH
7938: CALL_OW 307
7942: OR
7943: PUSH
7944: LD_EXP 19
7948: PPUSH
7949: CALL_OW 301
7953: OR
7954: IFFALSE 7899
// if IsDead ( Gladstone ) then
7956: LD_EXP 19
7960: PPUSH
7961: CALL_OW 301
7965: IFFALSE 7969
// exit ;
7967: GO 8002
// RemoveUnit ( HexInfo ( 27 , 51 ) ) ;
7969: LD_INT 27
7971: PPUSH
7972: LD_INT 51
7974: PPUSH
7975: CALL_OW 428
7979: PPUSH
7980: CALL_OW 64
// gladstoneEscaped := true ;
7984: LD_ADDR_EXP 12
7988: PUSH
7989: LD_INT 1
7991: ST_TO_ADDR
// SaveVariable ( true , 02_GladstoneEscaped ) ;
7992: LD_INT 1
7994: PPUSH
7995: LD_STRING 02_GladstoneEscaped
7997: PPUSH
7998: CALL_OW 39
// end ;
8002: PPOPN 1
8004: END
// every 0 0$1 trigger aviradzeSpotted and ( sciCounterKill >= 3 or not usSci ) and not aviradzeQuestDone do
8005: LD_EXP 4
8009: PUSH
8010: LD_EXP 9
8014: PUSH
8015: LD_INT 3
8017: GREATEREQUAL
8018: PUSH
8019: LD_EXP 22
8023: NOT
8024: OR
8025: AND
8026: PUSH
8027: LD_EXP 8
8031: NOT
8032: AND
8033: IFFALSE 8076
8035: GO 8037
8037: DISABLE
// begin aviradzeQuestDone := true ;
8038: LD_ADDR_EXP 8
8042: PUSH
8043: LD_INT 1
8045: ST_TO_ADDR
// Say ( Heike , DH-1-quest-done ) ;
8046: LD_EXP 23
8050: PPUSH
8051: LD_STRING DH-1-quest-done
8053: PPUSH
8054: CALL_OW 88
// if Givi then
8058: LD_EXP 24
8062: IFFALSE 8076
// Say ( Givi , DG-1-quest-done ) ;
8064: LD_EXP 24
8068: PPUSH
8069: LD_STRING DG-1-quest-done
8071: PPUSH
8072: CALL_OW 88
// end ;
8076: END
// every 0 0$1 trigger FilterUnitsInArea ( frontlineAttack , [ f_side , 2 ] ) > 1 and not aviradzeQuestDone and GetSide ( Delta ) <> 2 and IsOk ( Mike ) and IsOk ( Heike ) do
8077: LD_INT 11
8079: PPUSH
8080: LD_INT 22
8082: PUSH
8083: LD_INT 2
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: PPUSH
8090: CALL_OW 70
8094: PUSH
8095: LD_INT 1
8097: GREATER
8098: PUSH
8099: LD_EXP 8
8103: NOT
8104: AND
8105: PUSH
8106: LD_INT 1
8108: PPUSH
8109: CALL_OW 255
8113: PUSH
8114: LD_INT 2
8116: NONEQUAL
8117: AND
8118: PUSH
8119: LD_EXP 25
8123: PPUSH
8124: CALL_OW 302
8128: AND
8129: PUSH
8130: LD_EXP 23
8134: PPUSH
8135: CALL_OW 302
8139: AND
8140: IFFALSE 8285
8142: GO 8144
8144: DISABLE
// begin DialogueOn ;
8145: CALL_OW 6
// PlaceSeeing ( 47 , 19 , 2 , - 6 ) ;
8149: LD_INT 47
8151: PPUSH
8152: LD_INT 19
8154: PPUSH
8155: LD_INT 2
8157: PPUSH
8158: LD_INT 6
8160: NEG
8161: PPUSH
8162: CALL_OW 330
// RemoveSeeing ( 47 , 19 , 2 ) ;
8166: LD_INT 47
8168: PPUSH
8169: LD_INT 19
8171: PPUSH
8172: LD_INT 2
8174: PPUSH
8175: CALL_OW 331
// PlaceSeeing ( 34 , 32 , 2 , - 6 ) ;
8179: LD_INT 34
8181: PPUSH
8182: LD_INT 32
8184: PPUSH
8185: LD_INT 2
8187: PPUSH
8188: LD_INT 6
8190: NEG
8191: PPUSH
8192: CALL_OW 330
// RemoveSeeing ( 34 , 32 , 2 ) ;
8196: LD_INT 34
8198: PPUSH
8199: LD_INT 32
8201: PPUSH
8202: LD_INT 2
8204: PPUSH
8205: CALL_OW 331
// Say ( Mike , DM-Prem-1 ) ;
8209: LD_EXP 25
8213: PPUSH
8214: LD_STRING DM-Prem-1
8216: PPUSH
8217: CALL_OW 88
// Say ( Heike , DH-Prem-2 ) ;
8221: LD_EXP 23
8225: PPUSH
8226: LD_STRING DH-Prem-2
8228: PPUSH
8229: CALL_OW 88
// Say ( Heike , DH-Prem-3 ) ;
8233: LD_EXP 23
8237: PPUSH
8238: LD_STRING DH-Prem-3
8240: PPUSH
8241: CALL_OW 88
// Say ( Mike , DM-Prem-4 ) ;
8245: LD_EXP 25
8249: PPUSH
8250: LD_STRING DM-Prem-4
8252: PPUSH
8253: CALL_OW 88
// Say ( Mike , DM-Prem-5 ) ;
8257: LD_EXP 25
8261: PPUSH
8262: LD_STRING DM-Prem-5
8264: PPUSH
8265: CALL_OW 88
// Say ( Givi , DG-Prem-6 ) ;
8269: LD_EXP 24
8273: PPUSH
8274: LD_STRING DG-Prem-6
8276: PPUSH
8277: CALL_OW 88
// DialogueOff ;
8281: CALL_OW 7
// end ;
8285: END
// every 0 0$1 trigger See ( 5 , Heike ) and GetDistUnits ( Heike , Aviradze ) < 6 and aviradzeQuestDone and not attackDeltaAllowed do var i ;
8286: LD_INT 5
8288: PPUSH
8289: LD_EXP 23
8293: PPUSH
8294: CALL_OW 292
8298: PUSH
8299: LD_EXP 23
8303: PPUSH
8304: LD_EXP 27
8308: PPUSH
8309: CALL_OW 296
8313: PUSH
8314: LD_INT 6
8316: LESS
8317: AND
8318: PUSH
8319: LD_EXP 8
8323: AND
8324: PUSH
8325: LD_EXP 14
8329: NOT
8330: AND
8331: IFFALSE 8469
8333: GO 8335
8335: DISABLE
8336: LD_INT 0
8338: PPUSH
// begin attackDeltaAllowed := true ;
8339: LD_ADDR_EXP 14
8343: PUSH
8344: LD_INT 1
8346: ST_TO_ADDR
// InGameOn ;
8347: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
8351: LD_EXP 23
8355: PPUSH
8356: CALL_OW 87
// wait ( 0 0$0.3 ) ;
8360: LD_INT 10
8362: PPUSH
8363: CALL_OW 67
// ComTurnUnit ( Aviradze , Heike ) ;
8367: LD_EXP 27
8371: PPUSH
8372: LD_EXP 23
8376: PPUSH
8377: CALL_OW 119
// ComTurnUnit ( Heike , Aviradze ) ;
8381: LD_EXP 23
8385: PPUSH
8386: LD_EXP 27
8390: PPUSH
8391: CALL_OW 119
// Say ( Heike , DH-1-return ) ;
8395: LD_EXP 23
8399: PPUSH
8400: LD_STRING DH-1-return
8402: PPUSH
8403: CALL_OW 88
// Say ( Aviradze , DA-1-return ) ;
8407: LD_EXP 27
8411: PPUSH
8412: LD_STRING DA-1-return
8414: PPUSH
8415: CALL_OW 88
// InGameOff ;
8419: CALL_OW 9
// ChangeMissionObjectives ( ODelta ) ;
8423: LD_STRING ODelta
8425: PPUSH
8426: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
8430: LD_ADDR_VAR 0 1
8434: PUSH
8435: LD_INT 22
8437: PUSH
8438: LD_INT 5
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: PPUSH
8445: CALL_OW 69
8449: PUSH
8450: FOR_IN
8451: IFFALSE 8467
// SetSide ( i , 2 ) ;
8453: LD_VAR 0 1
8457: PPUSH
8458: LD_INT 2
8460: PPUSH
8461: CALL_OW 235
8465: GO 8450
8467: POP
8468: POP
// end ;
8469: PPOPN 1
8471: END
// every 0 0$1 trigger usAlert and not attackDeltaAllowed do
8472: LD_EXP 10
8476: PUSH
8477: LD_EXP 14
8481: NOT
8482: AND
8483: IFFALSE 8496
8485: GO 8487
8487: DISABLE
// spottedBeforeRadio := true ;
8488: LD_ADDR_EXP 6
8492: PUSH
8493: LD_INT 1
8495: ST_TO_ADDR
8496: END
// every 0 0$1 trigger attackDeltaAllowed and IsOk ( Markov ) and GetSide ( Delta ) = 1 and IsOk ( Lynch ) and not usAlert do var i , k , tmp ;
8497: LD_EXP 14
8501: PUSH
8502: LD_EXP 30
8506: PPUSH
8507: CALL_OW 302
8511: AND
8512: PUSH
8513: LD_INT 1
8515: PPUSH
8516: CALL_OW 255
8520: PUSH
8521: LD_INT 1
8523: EQUAL
8524: AND
8525: PUSH
8526: LD_EXP 20
8530: PPUSH
8531: CALL_OW 302
8535: AND
8536: PUSH
8537: LD_EXP 10
8541: NOT
8542: AND
8543: IFFALSE 9771
8545: GO 8547
8547: DISABLE
8548: LD_INT 0
8550: PPUSH
8551: PPUSH
8552: PPUSH
// begin trap := 0 ;
8553: LD_ADDR_EXP 17
8557: PUSH
8558: LD_INT 0
8560: ST_TO_ADDR
// wait ( 0 0$12 ) ;
8561: LD_INT 420
8563: PPUSH
8564: CALL_OW 67
// DialogueOn ;
8568: CALL_OW 6
// Say ( Markov , DMar-1-radio ) ;
8572: LD_EXP 30
8576: PPUSH
8577: LD_STRING DMar-1-radio
8579: PPUSH
8580: CALL_OW 88
// Say ( Heike , DH-1-radio ) ;
8584: LD_EXP 23
8588: PPUSH
8589: LD_STRING DH-1-radio
8591: PPUSH
8592: CALL_OW 88
// Say ( Markov , DMar-2-radio ) ;
8596: LD_EXP 30
8600: PPUSH
8601: LD_STRING DMar-2-radio
8603: PPUSH
8604: CALL_OW 88
// Say ( Heike , DH-2-radio ) ;
8608: LD_EXP 23
8612: PPUSH
8613: LD_STRING DH-2-radio
8615: PPUSH
8616: CALL_OW 88
// if IsOk ( Kamil ) or IsOk ( Sophia ) then
8620: LD_EXP 26
8624: PPUSH
8625: CALL_OW 302
8629: PUSH
8630: LD_EXP 29
8634: PPUSH
8635: CALL_OW 302
8639: OR
8640: IFFALSE 9771
// begin case Query ( Q1Trap ) of 1 :
8642: LD_STRING Q1Trap
8644: PPUSH
8645: CALL_OW 97
8649: PUSH
8650: LD_INT 1
8652: DOUBLE
8653: EQUAL
8654: IFTRUE 8658
8656: GO 8864
8658: POP
// begin if IsOk ( Kamil ) then
8659: LD_EXP 26
8663: PPUSH
8664: CALL_OW 302
8668: IFFALSE 8747
// begin Say ( Kamil , DKam-2-radio ) ;
8670: LD_EXP 26
8674: PPUSH
8675: LD_STRING DKam-2-radio
8677: PPUSH
8678: CALL_OW 88
// Say ( Kamil , DKam-3-radio ) ;
8682: LD_EXP 26
8686: PPUSH
8687: LD_STRING DKam-3-radio
8689: PPUSH
8690: CALL_OW 88
// SayRadioNoFaceNoName ( Lynch , DDelta-3-radio ) ;
8694: LD_EXP 20
8698: PPUSH
8699: LD_STRING DDelta-3-radio
8701: PPUSH
8702: CALL 74261 0 2
// dwait ( 0 0$01 ) ;
8706: LD_INT 35
8708: PPUSH
8709: CALL_OW 68
// Say ( Heike , DH-3-radio ) ;
8713: LD_EXP 23
8717: PPUSH
8718: LD_STRING DH-3-radio
8720: PPUSH
8721: CALL_OW 88
// Say ( Kamil , DKam-4-radio ) ;
8725: LD_EXP 26
8729: PPUSH
8730: LD_STRING DKam-4-radio
8732: PPUSH
8733: CALL_OW 88
// trap := 1 ;
8737: LD_ADDR_EXP 17
8741: PUSH
8742: LD_INT 1
8744: ST_TO_ADDR
// end else
8745: GO 8858
// begin Say ( Sophia , DS-1-radio ) ;
8747: LD_EXP 29
8751: PPUSH
8752: LD_STRING DS-1-radio
8754: PPUSH
8755: CALL_OW 88
// Say ( Sophia , DS-2-radio ) ;
8759: LD_EXP 29
8763: PPUSH
8764: LD_STRING DS-2-radio
8766: PPUSH
8767: CALL_OW 88
// SayRadioNoFaceNoName ( Lynch , DDelta-2-radio-s ) ;
8771: LD_EXP 20
8775: PPUSH
8776: LD_STRING DDelta-2-radio-s
8778: PPUSH
8779: CALL 74261 0 2
// Say ( Sophia , DS-3-radio ) ;
8783: LD_EXP 29
8787: PPUSH
8788: LD_STRING DS-3-radio
8790: PPUSH
8791: CALL_OW 88
// SayRadioNoFaceNoName ( Lynch , DDelta-3-radio-s ) ;
8795: LD_EXP 20
8799: PPUSH
8800: LD_STRING DDelta-3-radio-s
8802: PPUSH
8803: CALL 74261 0 2
// Say ( Sophia , DS-4-radio-s ) ;
8807: LD_EXP 29
8811: PPUSH
8812: LD_STRING DS-4-radio-s
8814: PPUSH
8815: CALL_OW 88
// SayRadioNoFaceNoName ( Lynch , DDelta-4-radio-s ) ;
8819: LD_EXP 20
8823: PPUSH
8824: LD_STRING DDelta-4-radio-s
8826: PPUSH
8827: CALL 74261 0 2
// dwait ( 0 0$01 ) ;
8831: LD_INT 35
8833: PPUSH
8834: CALL_OW 68
// Say ( Heike , DH-1-trap ) ;
8838: LD_EXP 23
8842: PPUSH
8843: LD_STRING DH-1-trap
8845: PPUSH
8846: CALL_OW 88
// trap := 0 ;
8850: LD_ADDR_EXP 17
8854: PUSH
8855: LD_INT 0
8857: ST_TO_ADDR
// end ; DialogueOff ;
8858: CALL_OW 7
// end ; 2 :
8862: GO 8882
8864: LD_INT 2
8866: DOUBLE
8867: EQUAL
8868: IFTRUE 8872
8870: GO 8881
8872: POP
// begin DialogueOff ;
8873: CALL_OW 7
// exit ;
8877: GO 9771
// end ; end ;
8879: GO 8882
8881: POP
// if trap = 1 then
8882: LD_EXP 17
8886: PUSH
8887: LD_INT 1
8889: EQUAL
8890: IFFALSE 9342
// begin PlaceSeeing ( 64 , 32 , 2 , 8 ) ;
8892: LD_INT 64
8894: PPUSH
8895: LD_INT 32
8897: PPUSH
8898: LD_INT 2
8900: PPUSH
8901: LD_INT 8
8903: PPUSH
8904: CALL_OW 330
// CenterOnXY ( 64 , 32 ) ;
8908: LD_INT 64
8910: PPUSH
8911: LD_INT 32
8913: PPUSH
8914: CALL_OW 84
// tmp := [ ] ;
8918: LD_ADDR_VAR 0 3
8922: PUSH
8923: EMPTY
8924: ST_TO_ADDR
// k := 3 ;
8925: LD_ADDR_VAR 0 2
8929: PUSH
8930: LD_INT 3
8932: ST_TO_ADDR
// if usForces < 3 then
8933: LD_EXP 21
8937: PUSH
8938: LD_INT 3
8940: LESS
8941: IFFALSE 8953
// k := usForces ;
8943: LD_ADDR_VAR 0 2
8947: PUSH
8948: LD_EXP 21
8952: ST_TO_ADDR
// for i := 1 to k do
8953: LD_ADDR_VAR 0 1
8957: PUSH
8958: DOUBLE
8959: LD_INT 1
8961: DEC
8962: ST_TO_ADDR
8963: LD_VAR 0 2
8967: PUSH
8968: FOR_TO
8969: IFFALSE 9024
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
8971: LD_ADDR_VAR 0 3
8975: PUSH
8976: LD_VAR 0 3
8980: PPUSH
8981: LD_VAR 0 3
8985: PUSH
8986: LD_INT 1
8988: PLUS
8989: PPUSH
8990: LD_EXP 21
8994: PUSH
8995: LD_INT 1
8997: ARRAY
8998: PPUSH
8999: CALL_OW 1
9003: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
9004: LD_ADDR_EXP 21
9008: PUSH
9009: LD_EXP 21
9013: PPUSH
9014: LD_INT 1
9016: PPUSH
9017: CALL_OW 3
9021: ST_TO_ADDR
// end ;
9022: GO 8968
9024: POP
9025: POP
// usPatrol := tmp ;
9026: LD_ADDR_EXP 16
9030: PUSH
9031: LD_VAR 0 3
9035: ST_TO_ADDR
// for i in tmp do
9036: LD_ADDR_VAR 0 1
9040: PUSH
9041: LD_VAR 0 3
9045: PUSH
9046: FOR_IN
9047: IFFALSE 9177
// begin if IsInUnit ( i ) then
9049: LD_VAR 0 1
9053: PPUSH
9054: CALL_OW 310
9058: IFFALSE 9069
// ComExitBuilding ( i ) ;
9060: LD_VAR 0 1
9064: PPUSH
9065: CALL_OW 122
// AddComAgressiveMove ( i , 63 , 31 ) ;
9069: LD_VAR 0 1
9073: PPUSH
9074: LD_INT 63
9076: PPUSH
9077: LD_INT 31
9079: PPUSH
9080: CALL_OW 174
// AddComWait ( i , 0 0$2 ) ;
9084: LD_VAR 0 1
9088: PPUSH
9089: LD_INT 70
9091: PPUSH
9092: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 43 ) ;
9096: LD_VAR 0 1
9100: PPUSH
9101: LD_INT 103
9103: PPUSH
9104: LD_INT 43
9106: PPUSH
9107: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
9111: LD_VAR 0 1
9115: PPUSH
9116: LD_INT 105
9118: PPUSH
9119: CALL_OW 202
// if Difficulty > 1 then
9123: LD_OWVAR 67
9127: PUSH
9128: LD_INT 1
9130: GREATER
9131: IFFALSE 9148
// AddComAgressiveMove ( i , 114 , 69 ) ;
9133: LD_VAR 0 1
9137: PPUSH
9138: LD_INT 114
9140: PPUSH
9141: LD_INT 69
9143: PPUSH
9144: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
9148: LD_VAR 0 1
9152: PPUSH
9153: LD_INT 105
9155: PPUSH
9156: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9160: LD_VAR 0 1
9164: PPUSH
9165: LD_INT 42
9167: PPUSH
9168: LD_INT 20
9170: PPUSH
9171: CALL_OW 174
// end ;
9175: GO 9046
9177: POP
9178: POP
// wait ( 0 0$8 ) ;
9179: LD_INT 280
9181: PPUSH
9182: CALL_OW 67
// RemoveSeeing ( 64 , 32 , 2 ) ;
9186: LD_INT 64
9188: PPUSH
9189: LD_INT 32
9191: PPUSH
9192: LD_INT 2
9194: PPUSH
9195: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
9199: LD_INT 35
9201: PPUSH
9202: CALL_OW 67
// for i in tmp do
9206: LD_ADDR_VAR 0 1
9210: PUSH
9211: LD_VAR 0 3
9215: PUSH
9216: FOR_IN
9217: IFFALSE 9248
// if IsDead ( i ) then
9219: LD_VAR 0 1
9223: PPUSH
9224: CALL_OW 301
9228: IFFALSE 9246
// tmp := tmp diff i ;
9230: LD_ADDR_VAR 0 3
9234: PUSH
9235: LD_VAR 0 3
9239: PUSH
9240: LD_VAR 0 1
9244: DIFF
9245: ST_TO_ADDR
9246: GO 9216
9248: POP
9249: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9250: LD_VAR 0 3
9254: NOT
9255: PUSH
9256: LD_VAR 0 3
9260: PPUSH
9261: LD_INT 95
9263: PUSH
9264: LD_INT 7
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: PUSH
9271: LD_INT 3
9273: PUSH
9274: LD_INT 60
9276: PUSH
9277: EMPTY
9278: LIST
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: PUSH
9284: EMPTY
9285: LIST
9286: LIST
9287: PPUSH
9288: CALL_OW 72
9292: PUSH
9293: LD_VAR 0 3
9297: EQUAL
9298: OR
9299: IFFALSE 9199
// if tmp then
9301: LD_VAR 0 3
9305: IFFALSE 9332
// begin usPatrol := [ ] ;
9307: LD_ADDR_EXP 16
9311: PUSH
9312: EMPTY
9313: ST_TO_ADDR
// usForces := usForces union tmp ;
9314: LD_ADDR_EXP 21
9318: PUSH
9319: LD_EXP 21
9323: PUSH
9324: LD_VAR 0 3
9328: UNION
9329: ST_TO_ADDR
// end else
9330: GO 9340
// trickyMove := true ;
9332: LD_ADDR_EXP 15
9336: PUSH
9337: LD_INT 1
9339: ST_TO_ADDR
// end else
9340: GO 9771
// begin tmp := [ ] ;
9342: LD_ADDR_VAR 0 3
9346: PUSH
9347: EMPTY
9348: ST_TO_ADDR
// k := 4 ;
9349: LD_ADDR_VAR 0 2
9353: PUSH
9354: LD_INT 4
9356: ST_TO_ADDR
// if usForces < 4 then
9357: LD_EXP 21
9361: PUSH
9362: LD_INT 4
9364: LESS
9365: IFFALSE 9377
// k := usForces ;
9367: LD_ADDR_VAR 0 2
9371: PUSH
9372: LD_EXP 21
9376: ST_TO_ADDR
// for i := 1 to k do
9377: LD_ADDR_VAR 0 1
9381: PUSH
9382: DOUBLE
9383: LD_INT 1
9385: DEC
9386: ST_TO_ADDR
9387: LD_VAR 0 2
9391: PUSH
9392: FOR_TO
9393: IFFALSE 9448
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
9395: LD_ADDR_VAR 0 3
9399: PUSH
9400: LD_VAR 0 3
9404: PPUSH
9405: LD_VAR 0 3
9409: PUSH
9410: LD_INT 1
9412: PLUS
9413: PPUSH
9414: LD_EXP 21
9418: PUSH
9419: LD_INT 1
9421: ARRAY
9422: PPUSH
9423: CALL_OW 1
9427: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
9428: LD_ADDR_EXP 21
9432: PUSH
9433: LD_EXP 21
9437: PPUSH
9438: LD_INT 1
9440: PPUSH
9441: CALL_OW 3
9445: ST_TO_ADDR
// end ;
9446: GO 9392
9448: POP
9449: POP
// if Lynch then
9450: LD_EXP 20
9454: IFFALSE 9472
// tmp := tmp ^ Lynch ;
9456: LD_ADDR_VAR 0 3
9460: PUSH
9461: LD_VAR 0 3
9465: PUSH
9466: LD_EXP 20
9470: ADD
9471: ST_TO_ADDR
// usPatrol := tmp ;
9472: LD_ADDR_EXP 16
9476: PUSH
9477: LD_VAR 0 3
9481: ST_TO_ADDR
// for i in tmp do
9482: LD_ADDR_VAR 0 1
9486: PUSH
9487: LD_VAR 0 3
9491: PUSH
9492: FOR_IN
9493: IFFALSE 9586
// begin if IsInUnit ( i ) then
9495: LD_VAR 0 1
9499: PPUSH
9500: CALL_OW 310
9504: IFFALSE 9515
// ComExitBuilding ( i ) ;
9506: LD_VAR 0 1
9510: PPUSH
9511: CALL_OW 122
// AddComAgressiveMove ( i , 69 , 15 ) ;
9515: LD_VAR 0 1
9519: PPUSH
9520: LD_INT 69
9522: PPUSH
9523: LD_INT 15
9525: PPUSH
9526: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9530: LD_VAR 0 1
9534: PPUSH
9535: LD_INT 700
9537: PPUSH
9538: CALL_OW 202
// AddComAgressiveMove ( i , 55 , 43 ) ;
9542: LD_VAR 0 1
9546: PPUSH
9547: LD_INT 55
9549: PPUSH
9550: LD_INT 43
9552: PPUSH
9553: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9557: LD_VAR 0 1
9561: PPUSH
9562: LD_INT 700
9564: PPUSH
9565: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9569: LD_VAR 0 1
9573: PPUSH
9574: LD_INT 42
9576: PPUSH
9577: LD_INT 20
9579: PPUSH
9580: CALL_OW 174
// end ;
9584: GO 9492
9586: POP
9587: POP
// repeat wait ( 0 0$1 ) ;
9588: LD_INT 35
9590: PPUSH
9591: CALL_OW 67
// for i in tmp do
9595: LD_ADDR_VAR 0 1
9599: PUSH
9600: LD_VAR 0 3
9604: PUSH
9605: FOR_IN
9606: IFFALSE 9637
// if IsDead ( i ) then
9608: LD_VAR 0 1
9612: PPUSH
9613: CALL_OW 301
9617: IFFALSE 9635
// tmp := tmp diff i ;
9619: LD_ADDR_VAR 0 3
9623: PUSH
9624: LD_VAR 0 3
9628: PUSH
9629: LD_VAR 0 1
9633: DIFF
9634: ST_TO_ADDR
9635: GO 9605
9637: POP
9638: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9639: LD_VAR 0 3
9643: NOT
9644: PUSH
9645: LD_VAR 0 3
9649: PPUSH
9650: LD_INT 95
9652: PUSH
9653: LD_INT 7
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: PUSH
9660: LD_INT 3
9662: PUSH
9663: LD_INT 60
9665: PUSH
9666: EMPTY
9667: LIST
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: PPUSH
9677: CALL_OW 72
9681: PUSH
9682: LD_VAR 0 3
9686: EQUAL
9687: OR
9688: IFFALSE 9588
// if not tmp then
9690: LD_VAR 0 3
9694: NOT
9695: IFFALSE 9707
// trickyMove := true else
9697: LD_ADDR_EXP 15
9701: PUSH
9702: LD_INT 1
9704: ST_TO_ADDR
9705: GO 9714
// usPatrol := [ ] ;
9707: LD_ADDR_EXP 16
9711: PUSH
9712: EMPTY
9713: ST_TO_ADDR
// if tmp diff Lynch then
9714: LD_VAR 0 3
9718: PUSH
9719: LD_EXP 20
9723: DIFF
9724: IFFALSE 9748
// usForces := usForces union ( tmp diff Lynch ) ;
9726: LD_ADDR_EXP 21
9730: PUSH
9731: LD_EXP 21
9735: PUSH
9736: LD_VAR 0 3
9740: PUSH
9741: LD_EXP 20
9745: DIFF
9746: UNION
9747: ST_TO_ADDR
// if IsOk ( Lynch ) then
9748: LD_EXP 20
9752: PPUSH
9753: CALL_OW 302
9757: IFFALSE 9771
// ComEnterUnit ( Lynch , Delta ) ;
9759: LD_EXP 20
9763: PPUSH
9764: LD_INT 1
9766: PPUSH
9767: CALL_OW 120
// end ; end ; end ;
9771: PPOPN 3
9773: END
// every 0 0$1 trigger trickyMove do
9774: LD_EXP 15
9778: IFFALSE 9790
9780: GO 9782
9782: DISABLE
// SetAchievement ( ACH_TRAP ) ;
9783: LD_STRING ACH_TRAP
9785: PPUSH
9786: CALL_OW 543
9790: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ) do
9791: LD_INT 22
9793: PUSH
9794: LD_INT 2
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: PUSH
9801: LD_INT 23
9803: PUSH
9804: LD_INT 1
9806: PUSH
9807: EMPTY
9808: LIST
9809: LIST
9810: PUSH
9811: LD_INT 21
9813: PUSH
9814: LD_INT 2
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: PUSH
9821: EMPTY
9822: LIST
9823: LIST
9824: LIST
9825: PPUSH
9826: CALL_OW 69
9830: IFFALSE 9842
9832: GO 9834
9834: DISABLE
// SetAchievement ( ACH_SCRAP ) ;
9835: LD_STRING ACH_SCRAP
9837: PPUSH
9838: CALL_OW 543
9842: END
// every 0 0$1 trigger UnitFilter ( usPatrol , [ f_see , 2 ] ) and See ( 1 , Heike ) do
9843: LD_EXP 16
9847: PPUSH
9848: LD_INT 101
9850: PUSH
9851: LD_INT 2
9853: PUSH
9854: EMPTY
9855: LIST
9856: LIST
9857: PPUSH
9858: CALL_OW 72
9862: PUSH
9863: LD_INT 1
9865: PPUSH
9866: LD_EXP 23
9870: PPUSH
9871: CALL_OW 292
9875: AND
9876: IFFALSE 10009
9878: GO 9880
9880: DISABLE
// begin if not trap then
9881: LD_EXP 17
9885: NOT
9886: IFFALSE 9914
// begin Say ( Heike , DH-2-trap ) ;
9888: LD_EXP 23
9892: PPUSH
9893: LD_STRING DH-2-trap
9895: PPUSH
9896: CALL_OW 88
// Say ( Mike , DM-2-trap ) ;
9900: LD_EXP 25
9904: PPUSH
9905: LD_STRING DM-2-trap
9907: PPUSH
9908: CALL_OW 88
// end else
9912: GO 9926
// begin Say ( Heike , DH-1-trap-a ) ;
9914: LD_EXP 23
9918: PPUSH
9919: LD_STRING DH-1-trap-a
9921: PPUSH
9922: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
9926: LD_INT 35
9928: PPUSH
9929: CALL_OW 67
// until trickyMove ;
9933: LD_EXP 15
9937: IFFALSE 9926
// Say ( Heike , DH-3-trap ) ;
9939: LD_EXP 23
9943: PPUSH
9944: LD_STRING DH-3-trap
9946: PPUSH
9947: CALL_OW 88
// if IsOk ( Givi ) and IsOk ( Kaia ) then
9951: LD_EXP 24
9955: PPUSH
9956: CALL_OW 302
9960: PUSH
9961: LD_EXP 28
9965: PPUSH
9966: CALL_OW 302
9970: AND
9971: IFFALSE 10009
// begin Say ( Givi , DG-3-trap ) ;
9973: LD_EXP 24
9977: PPUSH
9978: LD_STRING DG-3-trap
9980: PPUSH
9981: CALL_OW 88
// Say ( Kaia , DK-3-trap ) ;
9985: LD_EXP 28
9989: PPUSH
9990: LD_STRING DK-3-trap
9992: PPUSH
9993: CALL_OW 88
// Say ( Givi , DG-4-trap ) ;
9997: LD_EXP 24
10001: PPUSH
10002: LD_STRING DG-4-trap
10004: PPUSH
10005: CALL_OW 88
// end ; end ;
10009: END
// every 0 0$1 trigger GetSide ( Delta ) = 2 and attackDeltaAllowed do var i , tmp ;
10010: LD_INT 1
10012: PPUSH
10013: CALL_OW 255
10017: PUSH
10018: LD_INT 2
10020: EQUAL
10021: PUSH
10022: LD_EXP 14
10026: AND
10027: IFFALSE 10186
10029: GO 10031
10031: DISABLE
10032: LD_INT 0
10034: PPUSH
10035: PPUSH
// begin if not IsOk ( Kaia ) then
10036: LD_EXP 28
10040: PPUSH
10041: CALL_OW 302
10045: NOT
10046: IFFALSE 10050
// exit ;
10048: GO 10186
// if tick < 5 5$00 then
10050: LD_OWVAR 1
10054: PUSH
10055: LD_INT 10500
10057: LESS
10058: IFFALSE 10067
// SetAchievement ( ACH_DELTA ) ;
10060: LD_STRING ACH_DELTA
10062: PPUSH
10063: CALL_OW 543
// Say ( Kaia , DK-1-capture ) ;
10067: LD_EXP 28
10071: PPUSH
10072: LD_STRING DK-1-capture
10074: PPUSH
10075: CALL_OW 88
// Say ( Heike , DH-1-capture ) ;
10079: LD_EXP 23
10083: PPUSH
10084: LD_STRING DH-1-capture
10086: PPUSH
10087: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
10091: LD_ADDR_VAR 0 2
10095: PUSH
10096: LD_INT 22
10098: PUSH
10099: LD_INT 1
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: PUSH
10106: LD_INT 25
10108: PUSH
10109: LD_INT 1
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: PUSH
10116: EMPTY
10117: LIST
10118: LIST
10119: PPUSH
10120: CALL_OW 69
10124: ST_TO_ADDR
// if not tmp then
10125: LD_VAR 0 2
10129: NOT
10130: IFFALSE 10134
// exit ;
10132: GO 10186
// for i in tmp do
10134: LD_ADDR_VAR 0 1
10138: PUSH
10139: LD_VAR 0 2
10143: PUSH
10144: FOR_IN
10145: IFFALSE 10184
// begin if IsInUnit ( i ) then
10147: LD_VAR 0 1
10151: PPUSH
10152: CALL_OW 310
10156: IFFALSE 10167
// ComExitBuilding ( i ) ;
10158: LD_VAR 0 1
10162: PPUSH
10163: CALL_OW 122
// AddComAgressiveMove ( i , 38 , 23 ) ;
10167: LD_VAR 0 1
10171: PPUSH
10172: LD_INT 38
10174: PPUSH
10175: LD_INT 23
10177: PPUSH
10178: CALL_OW 174
// end ;
10182: GO 10144
10184: POP
10185: POP
// end ;
10186: PPOPN 2
10188: END
// every 0 0$1 trigger GetSide ( usLab ) = 2 and attackDeltaAllowed do
10189: LD_INT 3
10191: PPUSH
10192: CALL_OW 255
10196: PUSH
10197: LD_INT 2
10199: EQUAL
10200: PUSH
10201: LD_EXP 14
10205: AND
10206: IFFALSE 10238
10208: GO 10210
10210: DISABLE
// begin DialogueOn ;
10211: CALL_OW 6
// Say ( Aviradze , DA-1-capture ) ;
10215: LD_EXP 27
10219: PPUSH
10220: LD_STRING DA-1-capture
10222: PPUSH
10223: CALL_OW 88
// DialogueOff ;
10227: CALL_OW 7
// ChangeMissionObjectives ( OTame ) ;
10231: LD_STRING OTame
10233: PPUSH
10234: CALL_OW 337
// end ;
10238: END
// every 0 0$1 trigger GetTech ( tech_ApeLang , 2 ) = state_researched and attackDeltaAllowed do
10239: LD_INT 1
10241: PPUSH
10242: LD_INT 2
10244: PPUSH
10245: CALL_OW 321
10249: PUSH
10250: LD_INT 2
10252: EQUAL
10253: PUSH
10254: LD_EXP 14
10258: AND
10259: IFFALSE 10410
10261: GO 10263
10263: DISABLE
// begin DialogueOn ;
10264: CALL_OW 6
// Say ( Aviradze , DA-1-ape ) ;
10268: LD_EXP 27
10272: PPUSH
10273: LD_STRING DA-1-ape
10275: PPUSH
10276: CALL_OW 88
// Say ( Heike , DH-1-ape ) ;
10280: LD_EXP 23
10284: PPUSH
10285: LD_STRING DH-1-ape
10287: PPUSH
10288: CALL_OW 88
// Say ( Aviradze , DA-2-ape ) ;
10292: LD_EXP 27
10296: PPUSH
10297: LD_STRING DA-2-ape
10299: PPUSH
10300: CALL_OW 88
// Say ( Aviradze , DA-3-ape ) ;
10304: LD_EXP 27
10308: PPUSH
10309: LD_STRING DA-3-ape
10311: PPUSH
10312: CALL_OW 88
// Say ( Heike , DH-3-ape ) ;
10316: LD_EXP 23
10320: PPUSH
10321: LD_STRING DH-3-ape
10323: PPUSH
10324: CALL_OW 88
// DialogueOff ;
10328: CALL_OW 7
// if FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 then
10332: LD_INT 22
10334: PUSH
10335: LD_INT 0
10337: PUSH
10338: EMPTY
10339: LIST
10340: LIST
10341: PUSH
10342: LD_INT 25
10344: PUSH
10345: LD_INT 12
10347: PUSH
10348: EMPTY
10349: LIST
10350: LIST
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: PPUSH
10356: CALL_OW 69
10360: PUSH
10361: LD_INT 0
10363: EQUAL
10364: IFFALSE 10376
// SpawnApeman ( forest , 2 ) ;
10366: LD_INT 1
10368: PPUSH
10369: LD_INT 2
10371: PPUSH
10372: CALL 409 0 2
// repeat wait ( 0 0$1 ) ;
10376: LD_INT 35
10378: PPUSH
10379: CALL_OW 67
// until FilterAllUnits ( [ f_class , class_apeman ] ) = 0 ;
10383: LD_INT 25
10385: PUSH
10386: LD_INT 12
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PPUSH
10393: CALL_OW 69
10397: PUSH
10398: LD_INT 0
10400: EQUAL
10401: IFFALSE 10376
// YouLost ( Ape ) ;
10403: LD_STRING Ape
10405: PPUSH
10406: CALL_OW 104
// end ;
10410: END
// every 0 0$5 trigger lostCounter >= [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
10411: LD_EXP 18
10415: PUSH
10416: LD_INT 3
10418: PUSH
10419: LD_INT 2
10421: PUSH
10422: LD_INT 2
10424: PUSH
10425: LD_INT 2
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: PUSH
10434: LD_OWVAR 67
10438: ARRAY
10439: GREATEREQUAL
10440: IFFALSE 10484
10442: GO 10444
10444: DISABLE
// begin DialogueOn ;
10445: CALL_OW 6
// Say ( Aviradze , DA-1-failure ) ;
10449: LD_EXP 27
10453: PPUSH
10454: LD_STRING DA-1-failure
10456: PPUSH
10457: CALL_OW 88
// Say ( Aviradze , DA-2-failure ) ;
10461: LD_EXP 27
10465: PPUSH
10466: LD_STRING DA-2-failure
10468: PPUSH
10469: CALL_OW 88
// YouLost ( Failure ) ;
10473: LD_STRING Failure
10475: PPUSH
10476: CALL_OW 104
// DialogueOff ;
10480: CALL_OW 7
// end ;
10484: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
10485: LD_EXP 28
10489: PPUSH
10490: CALL_OW 256
10494: PUSH
10495: LD_INT 3
10497: LESS
10498: IFFALSE 10631
10500: GO 10502
10502: DISABLE
// begin DialogueOn ;
10503: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
10507: LD_EXP 28
10511: PPUSH
10512: CALL_OW 87
// ForceSay ( Kaia , DK-Kaiaout-1 ) ;
10516: LD_EXP 28
10520: PPUSH
10521: LD_STRING DK-Kaiaout-1
10523: PPUSH
10524: CALL_OW 91
// Say ( Heike , DH-Kaiaout-2 ) ;
10528: LD_EXP 23
10532: PPUSH
10533: LD_STRING DH-Kaiaout-2
10535: PPUSH
10536: CALL_OW 88
// Say ( Givi , DG-Kaiaout-3 ) ;
10540: LD_EXP 24
10544: PPUSH
10545: LD_STRING DG-Kaiaout-3
10547: PPUSH
10548: CALL_OW 88
// Say ( Heike , DH-Kaiaout-4 ) ;
10552: LD_EXP 23
10556: PPUSH
10557: LD_STRING DH-Kaiaout-4
10559: PPUSH
10560: CALL_OW 88
// if Givi then
10564: LD_EXP 24
10568: IFFALSE 10618
// begin Say ( Givi , DG-Kaiaout-5 ) ;
10570: LD_EXP 24
10574: PPUSH
10575: LD_STRING DG-Kaiaout-5
10577: PPUSH
10578: CALL_OW 88
// Say ( Heike , DH-Kaiaout-6 ) ;
10582: LD_EXP 23
10586: PPUSH
10587: LD_STRING DH-Kaiaout-6
10589: PPUSH
10590: CALL_OW 88
// Say ( Givi , DG-Kaiaout-7 ) ;
10594: LD_EXP 24
10598: PPUSH
10599: LD_STRING DG-Kaiaout-7
10601: PPUSH
10602: CALL_OW 88
// Say ( Heike , DH-Kaiaout-8 ) ;
10606: LD_EXP 23
10610: PPUSH
10611: LD_STRING DH-Kaiaout-8
10613: PPUSH
10614: CALL_OW 88
// end ; DialogueOff ;
10618: CALL_OW 7
// KillUnit ( Kaia ) ;
10622: LD_EXP 28
10626: PPUSH
10627: CALL_OW 66
// end ;
10631: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) and IsOk ( Aviradze ) and GetSide ( Aviradze ) = 2 do var tmp ;
10632: LD_INT 22
10634: PUSH
10635: LD_INT 2
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: PUSH
10642: LD_INT 23
10644: PUSH
10645: LD_INT 0
10647: PUSH
10648: EMPTY
10649: LIST
10650: LIST
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PPUSH
10656: CALL_OW 69
10660: PUSH
10661: LD_EXP 27
10665: PPUSH
10666: CALL_OW 302
10670: AND
10671: PUSH
10672: LD_EXP 27
10676: PPUSH
10677: CALL_OW 255
10681: PUSH
10682: LD_INT 2
10684: EQUAL
10685: AND
10686: IFFALSE 11655
10688: GO 10690
10690: DISABLE
10691: LD_INT 0
10693: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) then
10694: LD_INT 22
10696: PUSH
10697: LD_INT 1
10699: PUSH
10700: EMPTY
10701: LIST
10702: LIST
10703: PUSH
10704: LD_INT 2
10706: PUSH
10707: LD_INT 25
10709: PUSH
10710: LD_INT 1
10712: PUSH
10713: EMPTY
10714: LIST
10715: LIST
10716: PUSH
10717: LD_INT 34
10719: PUSH
10720: LD_INT 4
10722: PUSH
10723: EMPTY
10724: LIST
10725: LIST
10726: PUSH
10727: EMPTY
10728: LIST
10729: LIST
10730: LIST
10731: PUSH
10732: EMPTY
10733: LIST
10734: LIST
10735: PPUSH
10736: CALL_OW 69
10740: IFFALSE 10835
// begin Query ( QEnemyInSight ) ;
10742: LD_STRING QEnemyInSight
10744: PPUSH
10745: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
10749: LD_INT 35
10751: PPUSH
10752: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10756: LD_INT 22
10758: PUSH
10759: LD_INT 1
10761: PUSH
10762: EMPTY
10763: LIST
10764: LIST
10765: PUSH
10766: LD_INT 2
10768: PUSH
10769: LD_INT 25
10771: PUSH
10772: LD_INT 1
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PUSH
10779: LD_INT 34
10781: PUSH
10782: LD_INT 4
10784: PUSH
10785: EMPTY
10786: LIST
10787: LIST
10788: PUSH
10789: EMPTY
10790: LIST
10791: LIST
10792: LIST
10793: PUSH
10794: EMPTY
10795: LIST
10796: LIST
10797: PPUSH
10798: CALL_OW 69
10802: NOT
10803: PUSH
10804: LD_INT 22
10806: PUSH
10807: LD_INT 2
10809: PUSH
10810: EMPTY
10811: LIST
10812: LIST
10813: PUSH
10814: LD_INT 23
10816: PUSH
10817: LD_INT 0
10819: PUSH
10820: EMPTY
10821: LIST
10822: LIST
10823: PUSH
10824: EMPTY
10825: LIST
10826: LIST
10827: PPUSH
10828: CALL_OW 69
10832: AND
10833: IFFALSE 10749
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10835: LD_ADDR_VAR 0 1
10839: PUSH
10840: LD_INT 22
10842: PUSH
10843: LD_INT 2
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: PUSH
10850: LD_INT 23
10852: PUSH
10853: LD_INT 0
10855: PUSH
10856: EMPTY
10857: LIST
10858: LIST
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: PPUSH
10864: CALL_OW 69
10868: ST_TO_ADDR
// InGameOn ;
10869: CALL_OW 8
// CenterNowOnUnits ( tmp ) ;
10873: LD_VAR 0 1
10877: PPUSH
10878: CALL_OW 87
// ComMoveUnit ( tmp , Aviradze ) ;
10882: LD_VAR 0 1
10886: PPUSH
10887: LD_EXP 27
10891: PPUSH
10892: CALL_OW 112
// ComTurnUnit ( Aviradze , tmp ) ;
10896: LD_EXP 27
10900: PPUSH
10901: LD_VAR 0 1
10905: PPUSH
10906: CALL_OW 119
// wait ( 0 0$1 ) ;
10910: LD_INT 35
10912: PPUSH
10913: CALL_OW 67
// Say ( Aviradze , DA-1-tame-a ) ;
10917: LD_EXP 27
10921: PPUSH
10922: LD_STRING DA-1-tame-a
10924: PPUSH
10925: CALL_OW 88
// if IsOk ( Mike ) then
10929: LD_EXP 25
10933: PPUSH
10934: CALL_OW 302
10938: IFFALSE 10976
// begin Say ( Mike , DM-1-tame-a ) ;
10940: LD_EXP 25
10944: PPUSH
10945: LD_STRING DM-1-tame-a
10947: PPUSH
10948: CALL_OW 88
// Say ( Sophia , DS-1-tame-a ) ;
10952: LD_EXP 29
10956: PPUSH
10957: LD_STRING DS-1-tame-a
10959: PPUSH
10960: CALL_OW 88
// Say ( Mike , DM-2-tame-a ) ;
10964: LD_EXP 25
10968: PPUSH
10969: LD_STRING DM-2-tame-a
10971: PPUSH
10972: CALL_OW 88
// end ; wait ( 0 0$3 ) ;
10976: LD_INT 105
10978: PPUSH
10979: CALL_OW 67
// PrepareFarmer ;
10983: CALL 12334 0 0
// CenterOnUnits ( Farmer ) ;
10987: LD_EXP 31
10991: PPUSH
10992: CALL_OW 85
// ComMoveXY ( Farmer , 105 , 59 ) ;
10996: LD_EXP 31
11000: PPUSH
11001: LD_INT 105
11003: PPUSH
11004: LD_INT 59
11006: PPUSH
11007: CALL_OW 111
// AddComHold ( Farmer ) ;
11011: LD_EXP 31
11015: PPUSH
11016: CALL_OW 200
// SayRadio ( Farmer , DF-1-end ) ;
11020: LD_EXP 31
11024: PPUSH
11025: LD_STRING DF-1-end
11027: PPUSH
11028: CALL_OW 94
// Say ( Aviradze , DA-1-end ) ;
11032: LD_EXP 27
11036: PPUSH
11037: LD_STRING DA-1-end
11039: PPUSH
11040: CALL_OW 88
// SayRadio ( Farmer , DF-2-end ) ;
11044: LD_EXP 31
11048: PPUSH
11049: LD_STRING DF-2-end
11051: PPUSH
11052: CALL_OW 94
// Say ( Aviradze , DA-2-end ) ;
11056: LD_EXP 27
11060: PPUSH
11061: LD_STRING DA-2-end
11063: PPUSH
11064: CALL_OW 88
// SayRadio ( Farmer , DF-3-end ) ;
11068: LD_EXP 31
11072: PPUSH
11073: LD_STRING DF-3-end
11075: PPUSH
11076: CALL_OW 94
// Say ( Heike , DH-3-end ) ;
11080: LD_EXP 23
11084: PPUSH
11085: LD_STRING DH-3-end
11087: PPUSH
11088: CALL_OW 88
// SayRadio ( Farmer , DF-4-end ) ;
11092: LD_EXP 31
11096: PPUSH
11097: LD_STRING DF-4-end
11099: PPUSH
11100: CALL_OW 94
// if tick <= [ 25 25$00 , 22 22$30 , 20 20$00 , 15 15$00 ] [ Difficulty ] then
11104: LD_OWVAR 1
11108: PUSH
11109: LD_INT 52500
11111: PUSH
11112: LD_INT 47250
11114: PUSH
11115: LD_INT 42000
11117: PUSH
11118: LD_INT 31500
11120: PUSH
11121: EMPTY
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: PUSH
11127: LD_OWVAR 67
11131: ARRAY
11132: LESSEQUAL
11133: IFFALSE 11147
// AddMedal ( med1 , 1 ) else
11135: LD_STRING med1
11137: PPUSH
11138: LD_INT 1
11140: PPUSH
11141: CALL_OW 101
11145: GO 11158
// AddMedal ( med1 , - 1 ) ;
11147: LD_STRING med1
11149: PPUSH
11150: LD_INT 1
11152: NEG
11153: PPUSH
11154: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) = 0 and not gladstoneEscaped then
11158: LD_INT 22
11160: PUSH
11161: LD_INT 1
11163: PUSH
11164: EMPTY
11165: LIST
11166: LIST
11167: PUSH
11168: LD_INT 25
11170: PUSH
11171: LD_INT 4
11173: PUSH
11174: EMPTY
11175: LIST
11176: LIST
11177: PUSH
11178: EMPTY
11179: LIST
11180: LIST
11181: PPUSH
11182: CALL_OW 69
11186: PUSH
11187: LD_INT 0
11189: EQUAL
11190: PUSH
11191: LD_EXP 12
11195: NOT
11196: AND
11197: IFFALSE 11211
// AddMedal ( med2 , 1 ) else
11199: LD_STRING med2
11201: PPUSH
11202: LD_INT 1
11204: PPUSH
11205: CALL_OW 101
11209: GO 11222
// AddMedal ( med2 , - 1 ) ;
11211: LD_STRING med2
11213: PPUSH
11214: LD_INT 1
11216: NEG
11217: PPUSH
11218: CALL_OW 101
// if trickyMove then
11222: LD_EXP 15
11226: IFFALSE 11240
// AddMedal ( med3 , 1 ) else
11228: LD_STRING med3
11230: PPUSH
11231: LD_INT 1
11233: PPUSH
11234: CALL_OW 101
11238: GO 11270
// if spottedBeforeRadio then
11240: LD_EXP 6
11244: IFFALSE 11259
// AddMedal ( med3 , - 2 ) else
11246: LD_STRING med3
11248: PPUSH
11249: LD_INT 2
11251: NEG
11252: PPUSH
11253: CALL_OW 101
11257: GO 11270
// AddMedal ( med3 , - 1 ) ;
11259: LD_STRING med3
11261: PPUSH
11262: LD_INT 1
11264: NEG
11265: PPUSH
11266: CALL_OW 101
// GiveMedals ( MAIN ) ;
11270: LD_STRING MAIN
11272: PPUSH
11273: CALL_OW 102
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) , 02_ape ) ;
11277: LD_INT 22
11279: PUSH
11280: LD_INT 2
11282: PUSH
11283: EMPTY
11284: LIST
11285: LIST
11286: PUSH
11287: LD_INT 23
11289: PUSH
11290: LD_INT 0
11292: PUSH
11293: EMPTY
11294: LIST
11295: LIST
11296: PUSH
11297: EMPTY
11298: LIST
11299: LIST
11300: PPUSH
11301: CALL_OW 69
11305: PPUSH
11306: LD_STRING 02_ape
11308: PPUSH
11309: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
11313: LD_ADDR_VAR 0 1
11317: PUSH
11318: LD_INT 22
11320: PUSH
11321: LD_INT 2
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: PUSH
11328: LD_INT 23
11330: PUSH
11331: LD_INT 2
11333: PUSH
11334: EMPTY
11335: LIST
11336: LIST
11337: PUSH
11338: LD_INT 21
11340: PUSH
11341: LD_INT 1
11343: PUSH
11344: EMPTY
11345: LIST
11346: LIST
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: LIST
11352: PPUSH
11353: CALL_OW 69
11357: ST_TO_ADDR
// RewardPeople ( tmp ) ;
11358: LD_VAR 0 1
11362: PPUSH
11363: CALL_OW 43
// SaveCharacters ( Heike , 02_Heike ) ;
11367: LD_EXP 23
11371: PPUSH
11372: LD_STRING 02_Heike
11374: PPUSH
11375: CALL_OW 38
// SaveCharacters ( Aviradze , 02_Aviradze ) ;
11379: LD_EXP 27
11383: PPUSH
11384: LD_STRING 02_Aviradze
11386: PPUSH
11387: CALL_OW 38
// if Givi then
11391: LD_EXP 24
11395: IFFALSE 11409
// SaveCharacters ( Givi , 02_Givi ) ;
11397: LD_EXP 24
11401: PPUSH
11402: LD_STRING 02_Givi
11404: PPUSH
11405: CALL_OW 38
// if Mike then
11409: LD_EXP 25
11413: IFFALSE 11427
// SaveCharacters ( Mike , 02_Mike ) ;
11415: LD_EXP 25
11419: PPUSH
11420: LD_STRING 02_Mike
11422: PPUSH
11423: CALL_OW 38
// if Kamil then
11427: LD_EXP 26
11431: IFFALSE 11445
// SaveCharacters ( Kamil , 02_Kamil ) ;
11433: LD_EXP 26
11437: PPUSH
11438: LD_STRING 02_Kamil
11440: PPUSH
11441: CALL_OW 38
// if Kaia then
11445: LD_EXP 28
11449: IFFALSE 11463
// SaveCharacters ( Kaia , 02_Kaia ) ;
11451: LD_EXP 28
11455: PPUSH
11456: LD_STRING 02_Kaia
11458: PPUSH
11459: CALL_OW 38
// if Sophia then
11463: LD_EXP 29
11467: IFFALSE 11481
// SaveCharacters ( Sophia , 02_Sophia ) ;
11469: LD_EXP 29
11473: PPUSH
11474: LD_STRING 02_Sophia
11476: PPUSH
11477: CALL_OW 38
// if Markov then
11481: LD_EXP 30
11485: IFFALSE 11499
// SaveCharacters ( Markov , 02_Markov ) ;
11487: LD_EXP 30
11491: PPUSH
11492: LD_STRING 02_Markov
11494: PPUSH
11495: CALL_OW 38
// if tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] then
11499: LD_VAR 0 1
11503: PUSH
11504: LD_EXP 23
11508: PUSH
11509: LD_EXP 27
11513: PUSH
11514: LD_EXP 24
11518: PUSH
11519: LD_EXP 25
11523: PUSH
11524: LD_EXP 26
11528: PUSH
11529: LD_EXP 29
11533: PUSH
11534: LD_EXP 28
11538: PUSH
11539: LD_EXP 30
11543: PUSH
11544: EMPTY
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: DIFF
11554: IFFALSE 11619
// SaveCharacters ( tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] , 02_others ) ;
11556: LD_VAR 0 1
11560: PUSH
11561: LD_EXP 23
11565: PUSH
11566: LD_EXP 27
11570: PUSH
11571: LD_EXP 24
11575: PUSH
11576: LD_EXP 25
11580: PUSH
11581: LD_EXP 26
11585: PUSH
11586: LD_EXP 29
11590: PUSH
11591: LD_EXP 28
11595: PUSH
11596: LD_EXP 30
11600: PUSH
11601: EMPTY
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: DIFF
11611: PPUSH
11612: LD_STRING 02_others
11614: PPUSH
11615: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_KRAY) ) ;
11619: LD_STRING enableBioCharacter(BIO_KRAY)
11621: PPUSH
11622: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_AVIR) ) ;
11626: LD_STRING enableBioCharacter(BIO_AVIR)
11628: PPUSH
11629: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_SOPH) ) ;
11633: LD_STRING enableBioCharacter(BIO_SOPH)
11635: PPUSH
11636: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_KAMI) ) ;
11640: LD_STRING enableBioCharacter(BIO_KAMI)
11642: PPUSH
11643: CALL_OW 559
// YouWin ;
11647: CALL_OW 103
// InGameOff ;
11651: CALL_OW 9
// end ;
11655: PPOPN 1
11657: END
// every 0 0$1 trigger tick > timeUntilFarmer and aviradzeSpotted do
11658: LD_OWVAR 1
11662: PUSH
11663: LD_EXP 13
11667: GREATER
11668: PUSH
11669: LD_EXP 4
11673: AND
11674: IFFALSE 11714
11676: GO 11678
11678: DISABLE
// begin InGameOn ;
11679: CALL_OW 8
// PrepareFarmer ;
11683: CALL 12334 0 0
// CenterNowOnUnits ( Farmer ) ;
11687: LD_EXP 31
11691: PPUSH
11692: CALL_OW 87
// wait ( 0 0$2 ) ;
11696: LD_INT 70
11698: PPUSH
11699: CALL_OW 67
// YouLost ( Farmer ) ;
11703: LD_STRING Farmer
11705: PPUSH
11706: CALL_OW 104
// InGameOff ;
11710: CALL_OW 9
// end ; end_of_file
11714: END
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer ; export function PrepareArabian ; var un , veh ; begin
11715: LD_INT 0
11717: PPUSH
11718: PPUSH
11719: PPUSH
// uc_side := 2 ;
11720: LD_ADDR_OWVAR 20
11724: PUSH
11725: LD_INT 2
11727: ST_TO_ADDR
// uc_nation := 2 ;
11728: LD_ADDR_OWVAR 21
11732: PUSH
11733: LD_INT 2
11735: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
11736: LD_ADDR_EXP 23
11740: PUSH
11741: LD_STRING Heike
11743: PPUSH
11744: LD_EXP 1
11748: NOT
11749: PPUSH
11750: LD_EXP 2
11754: PPUSH
11755: CALL 32874 0 3
11759: ST_TO_ADDR
// PlaceUnitXY ( Heike , 83 , 72 , false ) ;
11760: LD_EXP 23
11764: PPUSH
11765: LD_INT 83
11767: PPUSH
11768: LD_INT 72
11770: PPUSH
11771: LD_INT 0
11773: PPUSH
11774: CALL_OW 48
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
11778: LD_ADDR_EXP 24
11782: PUSH
11783: LD_STRING Givi
11785: PPUSH
11786: LD_EXP 1
11790: NOT
11791: PPUSH
11792: LD_EXP 2
11796: PPUSH
11797: CALL 32874 0 3
11801: ST_TO_ADDR
// if Givi then
11802: LD_EXP 24
11806: IFFALSE 11826
// PlaceUnitXY ( Givi , 87 , 76 , false ) ;
11808: LD_EXP 24
11812: PPUSH
11813: LD_INT 87
11815: PPUSH
11816: LD_INT 76
11818: PPUSH
11819: LD_INT 0
11821: PPUSH
11822: CALL_OW 48
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
11826: LD_ADDR_EXP 25
11830: PUSH
11831: LD_STRING Mike
11833: PPUSH
11834: LD_EXP 1
11838: NOT
11839: PPUSH
11840: LD_EXP 2
11844: PPUSH
11845: CALL 32874 0 3
11849: ST_TO_ADDR
// if Mike then
11850: LD_EXP 25
11854: IFFALSE 11874
// PlaceUnitXY ( Mike , 84 , 76 , false ) ;
11856: LD_EXP 25
11860: PPUSH
11861: LD_INT 84
11863: PPUSH
11864: LD_INT 76
11866: PPUSH
11867: LD_INT 0
11869: PPUSH
11870: CALL_OW 48
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
11874: LD_ADDR_EXP 26
11878: PUSH
11879: LD_STRING Kamil
11881: PPUSH
11882: LD_EXP 1
11886: NOT
11887: PPUSH
11888: LD_EXP 2
11892: PPUSH
11893: CALL 32874 0 3
11897: ST_TO_ADDR
// if Kamil then
11898: LD_EXP 26
11902: IFFALSE 11922
// PlaceUnitXY ( Kamil , 85 , 78 , false ) ;
11904: LD_EXP 26
11908: PPUSH
11909: LD_INT 85
11911: PPUSH
11912: LD_INT 78
11914: PPUSH
11915: LD_INT 0
11917: PPUSH
11918: CALL_OW 48
// uc_side := 5 ;
11922: LD_ADDR_OWVAR 20
11926: PUSH
11927: LD_INT 5
11929: ST_TO_ADDR
// uc_nation := 2 ;
11930: LD_ADDR_OWVAR 21
11934: PUSH
11935: LD_INT 2
11937: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , false ,  ) ;
11938: LD_ADDR_EXP 27
11942: PUSH
11943: LD_STRING Aviradze
11945: PPUSH
11946: LD_INT 0
11948: PPUSH
11949: LD_STRING 
11951: PPUSH
11952: CALL 32874 0 3
11956: ST_TO_ADDR
// PlaceUnitXY ( Aviradze , 106 , 38 , false ) ;
11957: LD_EXP 27
11961: PPUSH
11962: LD_INT 106
11964: PPUSH
11965: LD_INT 38
11967: PPUSH
11968: LD_INT 0
11970: PPUSH
11971: CALL_OW 48
// ComTurnXY ( Aviradze , 103 , 38 ) ;
11975: LD_EXP 27
11979: PPUSH
11980: LD_INT 103
11982: PPUSH
11983: LD_INT 38
11985: PPUSH
11986: CALL_OW 118
// Kaia := PrepareUnit ( Kaia , false ,  ) ;
11990: LD_ADDR_EXP 28
11994: PUSH
11995: LD_STRING Kaia
11997: PPUSH
11998: LD_INT 0
12000: PPUSH
12001: LD_STRING 
12003: PPUSH
12004: CALL 32874 0 3
12008: ST_TO_ADDR
// PlaceUnitXY ( Kaia , 100 , 34 , false ) ;
12009: LD_EXP 28
12013: PPUSH
12014: LD_INT 100
12016: PPUSH
12017: LD_INT 34
12019: PPUSH
12020: LD_INT 0
12022: PPUSH
12023: CALL_OW 48
// ComTurnXY ( Kaia , 100 , 39 ) ;
12027: LD_EXP 28
12031: PPUSH
12032: LD_INT 100
12034: PPUSH
12035: LD_INT 39
12037: PPUSH
12038: CALL_OW 118
// Sophia := PrepareUnit ( Sophia , false ,  ) ;
12042: LD_ADDR_EXP 29
12046: PUSH
12047: LD_STRING Sophia
12049: PPUSH
12050: LD_INT 0
12052: PPUSH
12053: LD_STRING 
12055: PPUSH
12056: CALL 32874 0 3
12060: ST_TO_ADDR
// PlaceUnitXY ( Sophia , 109 , 50 , false ) ;
12061: LD_EXP 29
12065: PPUSH
12066: LD_INT 109
12068: PPUSH
12069: LD_INT 50
12071: PPUSH
12072: LD_INT 0
12074: PPUSH
12075: CALL_OW 48
// ComTurnXY ( Sophia , 100 , 39 ) ;
12079: LD_EXP 29
12083: PPUSH
12084: LD_INT 100
12086: PPUSH
12087: LD_INT 39
12089: PPUSH
12090: CALL_OW 118
// Markov := PrepareUnit ( Markov , false ,  ) ;
12094: LD_ADDR_EXP 30
12098: PUSH
12099: LD_STRING Markov
12101: PPUSH
12102: LD_INT 0
12104: PPUSH
12105: LD_STRING 
12107: PPUSH
12108: CALL 32874 0 3
12112: ST_TO_ADDR
// PrepareTank ( 5 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , [ 90 , 70 , 60 , 50 ] [ Difficulty ] ) ;
12113: LD_INT 5
12115: PPUSH
12116: LD_INT 3
12118: PPUSH
12119: LD_INT 21
12121: PPUSH
12122: LD_INT 1
12124: PPUSH
12125: LD_INT 1
12127: PPUSH
12128: LD_INT 42
12130: PPUSH
12131: LD_INT 90
12133: PUSH
12134: LD_INT 70
12136: PUSH
12137: LD_INT 60
12139: PUSH
12140: LD_INT 50
12142: PUSH
12143: EMPTY
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: PUSH
12149: LD_OWVAR 67
12153: ARRAY
12154: PPUSH
12155: CALL 241 0 7
// veh := CreateVehicle ;
12159: LD_ADDR_VAR 0 3
12163: PUSH
12164: CALL_OW 45
12168: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
12169: LD_VAR 0 3
12173: PPUSH
12174: LD_INT 4
12176: PPUSH
12177: CALL_OW 233
// PlaceUnitXY ( veh , 109 , 38 , false ) ;
12181: LD_VAR 0 3
12185: PPUSH
12186: LD_INT 109
12188: PPUSH
12189: LD_INT 38
12191: PPUSH
12192: LD_INT 0
12194: PPUSH
12195: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
12199: LD_EXP 30
12203: PPUSH
12204: LD_VAR 0 3
12208: PPUSH
12209: CALL_OW 52
// ComTurnUnit ( Kaia , Aviradze ) ;
12213: LD_EXP 28
12217: PPUSH
12218: LD_EXP 27
12222: PPUSH
12223: CALL_OW 119
// ComTurnUnit ( Aviradze , Kaia ) ;
12227: LD_EXP 27
12231: PPUSH
12232: LD_EXP 28
12236: PPUSH
12237: CALL_OW 119
// if not Givi or not Mike then
12241: LD_EXP 24
12245: NOT
12246: PUSH
12247: LD_EXP 25
12251: NOT
12252: OR
12253: IFFALSE 12329
// begin uc_nation := 2 ;
12255: LD_ADDR_OWVAR 21
12259: PUSH
12260: LD_INT 2
12262: ST_TO_ADDR
// uc_side := 5 ;
12263: LD_ADDR_OWVAR 20
12267: PUSH
12268: LD_INT 5
12270: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 1 ) ;
12271: LD_INT 1
12273: PPUSH
12274: LD_INT 1
12276: PPUSH
12277: LD_INT 1
12279: PPUSH
12280: CALL_OW 380
// un := CreateHuman ;
12284: LD_ADDR_VAR 0 2
12288: PUSH
12289: CALL_OW 44
12293: ST_TO_ADDR
// PlaceUnitXYR ( un , 112 , 40 , 3 , false ) ;
12294: LD_VAR 0 2
12298: PPUSH
12299: LD_INT 112
12301: PPUSH
12302: LD_INT 40
12304: PPUSH
12305: LD_INT 3
12307: PPUSH
12308: LD_INT 0
12310: PPUSH
12311: CALL_OW 50
// ComTurnUnit ( un , Aviradze ) ;
12315: LD_VAR 0 2
12319: PPUSH
12320: LD_EXP 27
12324: PPUSH
12325: CALL_OW 119
// end ; end ;
12329: LD_VAR 0 1
12333: RET
// export function PrepareFarmer ; var i ; begin
12334: LD_INT 0
12336: PPUSH
12337: PPUSH
// uc_side := 5 ;
12338: LD_ADDR_OWVAR 20
12342: PUSH
12343: LD_INT 5
12345: ST_TO_ADDR
// uc_nation := 2 ;
12346: LD_ADDR_OWVAR 21
12350: PUSH
12351: LD_INT 2
12353: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
12354: LD_ADDR_EXP 31
12358: PUSH
12359: LD_STRING Farmer
12361: PPUSH
12362: LD_INT 0
12364: PPUSH
12365: LD_STRING 
12367: PPUSH
12368: CALL 32874 0 3
12372: ST_TO_ADDR
// PlaceUnitXY ( Farmer , 106 , 62 , false ) ;
12373: LD_EXP 31
12377: PPUSH
12378: LD_INT 106
12380: PPUSH
12381: LD_INT 62
12383: PPUSH
12384: LD_INT 0
12386: PPUSH
12387: CALL_OW 48
// for i := 1 to 5 do
12391: LD_ADDR_VAR 0 2
12395: PUSH
12396: DOUBLE
12397: LD_INT 1
12399: DEC
12400: ST_TO_ADDR
12401: LD_INT 5
12403: PUSH
12404: FOR_TO
12405: IFFALSE 12443
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
12407: LD_INT 1
12409: PPUSH
12410: LD_INT 1
12412: PPUSH
12413: LD_INT 1
12415: PPUSH
12416: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 105 , 64 , 3 , false ) ;
12420: CALL_OW 44
12424: PPUSH
12425: LD_INT 105
12427: PPUSH
12428: LD_INT 64
12430: PPUSH
12431: LD_INT 3
12433: PPUSH
12434: LD_INT 0
12436: PPUSH
12437: CALL_OW 50
// end ;
12441: GO 12404
12443: POP
12444: POP
// end ; end_of_file
12445: LD_VAR 0 1
12449: RET
// every 2 2$20 + 0 0$10 do
12450: GO 12452
12452: DISABLE
// begin enable ;
12453: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , forest , true ) ;
12454: LD_INT 1
12456: PPUSH
12457: LD_INT 5
12459: PPUSH
12460: CALL_OW 12
12464: PPUSH
12465: LD_INT 1
12467: PPUSH
12468: LD_INT 1
12470: PPUSH
12471: CALL_OW 55
// if tick > 6 6$00 then
12475: LD_OWVAR 1
12479: PUSH
12480: LD_INT 12600
12482: GREATER
12483: IFFALSE 12486
// disable ;
12485: DISABLE
// end ; end_of_file
12486: END
// on UnitDestroyed ( un ) do begin if un = Heike then
12487: LD_VAR 0 1
12491: PUSH
12492: LD_EXP 23
12496: EQUAL
12497: IFFALSE 12506
// YouLost ( Heike ) ;
12499: LD_STRING Heike
12501: PPUSH
12502: CALL_OW 104
// if un = Aviradze then
12506: LD_VAR 0 1
12510: PUSH
12511: LD_EXP 27
12515: EQUAL
12516: IFFALSE 12525
// YouLost ( Aviradze ) ;
12518: LD_STRING Aviradze
12520: PPUSH
12521: CALL_OW 104
// if un = usLab then
12525: LD_VAR 0 1
12529: PUSH
12530: LD_INT 3
12532: EQUAL
12533: IFFALSE 12542
// YouLost ( Lab ) ;
12535: LD_STRING Lab
12537: PPUSH
12538: CALL_OW 104
// if ( un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) diff [ Heike , Aviradze ] ) and aviradzeSpotted then
12542: LD_VAR 0 1
12546: PUSH
12547: LD_INT 22
12549: PUSH
12550: LD_INT 2
12552: PUSH
12553: EMPTY
12554: LIST
12555: LIST
12556: PUSH
12557: LD_INT 21
12559: PUSH
12560: LD_INT 1
12562: PUSH
12563: EMPTY
12564: LIST
12565: LIST
12566: PUSH
12567: LD_INT 23
12569: PUSH
12570: LD_INT 2
12572: PUSH
12573: EMPTY
12574: LIST
12575: LIST
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: LIST
12581: PPUSH
12582: CALL_OW 69
12586: PUSH
12587: LD_EXP 23
12591: PUSH
12592: LD_EXP 27
12596: PUSH
12597: EMPTY
12598: LIST
12599: LIST
12600: DIFF
12601: IN
12602: PUSH
12603: LD_EXP 4
12607: AND
12608: IFFALSE 12624
// lostCounter := lostCounter + 1 ;
12610: LD_ADDR_EXP 18
12614: PUSH
12615: LD_EXP 18
12619: PUSH
12620: LD_INT 1
12622: PLUS
12623: ST_TO_ADDR
// end ;
12624: PPOPN 1
12626: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 2 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) = 0 do
12627: LD_INT 23
12629: PUSH
12630: LD_INT 2
12632: PUSH
12633: EMPTY
12634: LIST
12635: LIST
12636: PUSH
12637: LD_INT 25
12639: PUSH
12640: LD_INT 2
12642: PUSH
12643: EMPTY
12644: LIST
12645: LIST
12646: PUSH
12647: EMPTY
12648: LIST
12649: LIST
12650: PPUSH
12651: CALL_OW 69
12655: PUSH
12656: LD_INT 0
12658: EQUAL
12659: PUSH
12660: LD_INT 22
12662: PUSH
12663: LD_INT 2
12665: PUSH
12666: EMPTY
12667: LIST
12668: LIST
12669: PUSH
12670: LD_INT 21
12672: PUSH
12673: LD_INT 3
12675: PUSH
12676: EMPTY
12677: LIST
12678: LIST
12679: PUSH
12680: EMPTY
12681: LIST
12682: LIST
12683: PPUSH
12684: CALL_OW 69
12688: PUSH
12689: LD_INT 0
12691: EQUAL
12692: AND
12693: IFFALSE 12705
12695: GO 12697
12697: DISABLE
// YouLost ( Eng ) ;
12698: LD_STRING Eng
12700: PPUSH
12701: CALL_OW 104
12705: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in usSci and killerSide = 2 then
12706: LD_VAR 0 1
12710: PUSH
12711: LD_EXP 22
12715: IN
12716: PUSH
12717: LD_VAR 0 2
12721: PUSH
12722: LD_INT 2
12724: EQUAL
12725: AND
12726: IFFALSE 12758
// begin usSci := usSci diff un ;
12728: LD_ADDR_EXP 22
12732: PUSH
12733: LD_EXP 22
12737: PUSH
12738: LD_VAR 0 1
12742: DIFF
12743: ST_TO_ADDR
// sciCounterKill := sciCounterKill + 1 ;
12744: LD_ADDR_EXP 9
12748: PUSH
12749: LD_EXP 9
12753: PUSH
12754: LD_INT 1
12756: PLUS
12757: ST_TO_ADDR
// end ; end ;
12758: PPOPN 3
12760: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
12761: LD_VAR 0 1
12765: PUSH
12766: LD_INT 2
12768: EQUAL
12769: PUSH
12770: LD_VAR 0 2
12774: PUSH
12775: LD_INT 5
12777: EQUAL
12778: AND
12779: IFFALSE 12788
// YouLost ( FriendlyFire ) ;
12781: LD_STRING FriendlyFire
12783: PPUSH
12784: CALL_OW 104
// end ; end_of_file end_of_file
12788: PPOPN 2
12790: END
// export globalGameSaveCounter ; every 0 0$1 do
12791: GO 12793
12793: DISABLE
// begin enable ;
12794: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
12795: LD_STRING updateTimer(
12797: PUSH
12798: LD_OWVAR 1
12802: STR
12803: PUSH
12804: LD_STRING );
12806: STR
12807: PPUSH
12808: CALL_OW 559
// end ;
12812: END
// every 0 0$1 do
12813: GO 12815
12815: DISABLE
// begin globalGameSaveCounter := 0 ;
12816: LD_ADDR_EXP 32
12820: PUSH
12821: LD_INT 0
12823: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
12824: LD_STRING setGameSaveCounter(0)
12826: PPUSH
12827: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
12831: LD_STRING initStreamRollete();
12833: PPUSH
12834: CALL_OW 559
// InitStreamMode ;
12838: CALL 14164 0 0
// DefineStreamItems ( false ) ;
12842: LD_INT 0
12844: PPUSH
12845: CALL 14628 0 1
// end ;
12849: END
// export function SOS_MapStart ( ) ; begin
12850: LD_INT 0
12852: PPUSH
// if streamModeActive then
12853: LD_EXP 33
12857: IFFALSE 12866
// DefineStreamItems ( true ) ;
12859: LD_INT 1
12861: PPUSH
12862: CALL 14628 0 1
// UpdateLuaVariables ( ) ;
12866: CALL 12883 0 0
// UpdateFactoryWaypoints ( ) ;
12870: CALL 27489 0 0
// UpdateWarehouseGatheringPoints ( ) ;
12874: CALL 27746 0 0
// end ;
12878: LD_VAR 0 1
12882: RET
// function UpdateLuaVariables ( ) ; begin
12883: LD_INT 0
12885: PPUSH
// if globalGameSaveCounter then
12886: LD_EXP 32
12890: IFFALSE 12924
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
12892: LD_ADDR_EXP 32
12896: PUSH
12897: LD_EXP 32
12901: PPUSH
12902: CALL 71703 0 1
12906: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12907: LD_STRING setGameSaveCounter(
12909: PUSH
12910: LD_EXP 32
12914: STR
12915: PUSH
12916: LD_STRING )
12918: STR
12919: PPUSH
12920: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
12924: LD_STRING setGameDifficulty(
12926: PUSH
12927: LD_OWVAR 67
12931: STR
12932: PUSH
12933: LD_STRING )
12935: STR
12936: PPUSH
12937: CALL_OW 559
// end ;
12941: LD_VAR 0 1
12945: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12946: LD_INT 0
12948: PPUSH
// if p2 = stream_mode then
12949: LD_VAR 0 2
12953: PUSH
12954: LD_INT 100
12956: EQUAL
12957: IFFALSE 13960
// begin if not StreamModeActive then
12959: LD_EXP 33
12963: NOT
12964: IFFALSE 12974
// StreamModeActive := true ;
12966: LD_ADDR_EXP 33
12970: PUSH
12971: LD_INT 1
12973: ST_TO_ADDR
// if p3 = 0 then
12974: LD_VAR 0 3
12978: PUSH
12979: LD_INT 0
12981: EQUAL
12982: IFFALSE 12988
// InitStreamMode ;
12984: CALL 14164 0 0
// if p3 = 1 then
12988: LD_VAR 0 3
12992: PUSH
12993: LD_INT 1
12995: EQUAL
12996: IFFALSE 13006
// sRocket := true ;
12998: LD_ADDR_EXP 38
13002: PUSH
13003: LD_INT 1
13005: ST_TO_ADDR
// if p3 = 2 then
13006: LD_VAR 0 3
13010: PUSH
13011: LD_INT 2
13013: EQUAL
13014: IFFALSE 13024
// sSpeed := true ;
13016: LD_ADDR_EXP 37
13020: PUSH
13021: LD_INT 1
13023: ST_TO_ADDR
// if p3 = 3 then
13024: LD_VAR 0 3
13028: PUSH
13029: LD_INT 3
13031: EQUAL
13032: IFFALSE 13042
// sEngine := true ;
13034: LD_ADDR_EXP 39
13038: PUSH
13039: LD_INT 1
13041: ST_TO_ADDR
// if p3 = 4 then
13042: LD_VAR 0 3
13046: PUSH
13047: LD_INT 4
13049: EQUAL
13050: IFFALSE 13060
// sSpec := true ;
13052: LD_ADDR_EXP 36
13056: PUSH
13057: LD_INT 1
13059: ST_TO_ADDR
// if p3 = 5 then
13060: LD_VAR 0 3
13064: PUSH
13065: LD_INT 5
13067: EQUAL
13068: IFFALSE 13078
// sLevel := true ;
13070: LD_ADDR_EXP 40
13074: PUSH
13075: LD_INT 1
13077: ST_TO_ADDR
// if p3 = 6 then
13078: LD_VAR 0 3
13082: PUSH
13083: LD_INT 6
13085: EQUAL
13086: IFFALSE 13096
// sArmoury := true ;
13088: LD_ADDR_EXP 41
13092: PUSH
13093: LD_INT 1
13095: ST_TO_ADDR
// if p3 = 7 then
13096: LD_VAR 0 3
13100: PUSH
13101: LD_INT 7
13103: EQUAL
13104: IFFALSE 13114
// sRadar := true ;
13106: LD_ADDR_EXP 42
13110: PUSH
13111: LD_INT 1
13113: ST_TO_ADDR
// if p3 = 8 then
13114: LD_VAR 0 3
13118: PUSH
13119: LD_INT 8
13121: EQUAL
13122: IFFALSE 13132
// sBunker := true ;
13124: LD_ADDR_EXP 43
13128: PUSH
13129: LD_INT 1
13131: ST_TO_ADDR
// if p3 = 9 then
13132: LD_VAR 0 3
13136: PUSH
13137: LD_INT 9
13139: EQUAL
13140: IFFALSE 13150
// sHack := true ;
13142: LD_ADDR_EXP 44
13146: PUSH
13147: LD_INT 1
13149: ST_TO_ADDR
// if p3 = 10 then
13150: LD_VAR 0 3
13154: PUSH
13155: LD_INT 10
13157: EQUAL
13158: IFFALSE 13168
// sFire := true ;
13160: LD_ADDR_EXP 45
13164: PUSH
13165: LD_INT 1
13167: ST_TO_ADDR
// if p3 = 11 then
13168: LD_VAR 0 3
13172: PUSH
13173: LD_INT 11
13175: EQUAL
13176: IFFALSE 13186
// sRefresh := true ;
13178: LD_ADDR_EXP 46
13182: PUSH
13183: LD_INT 1
13185: ST_TO_ADDR
// if p3 = 12 then
13186: LD_VAR 0 3
13190: PUSH
13191: LD_INT 12
13193: EQUAL
13194: IFFALSE 13204
// sExp := true ;
13196: LD_ADDR_EXP 47
13200: PUSH
13201: LD_INT 1
13203: ST_TO_ADDR
// if p3 = 13 then
13204: LD_VAR 0 3
13208: PUSH
13209: LD_INT 13
13211: EQUAL
13212: IFFALSE 13222
// sDepot := true ;
13214: LD_ADDR_EXP 48
13218: PUSH
13219: LD_INT 1
13221: ST_TO_ADDR
// if p3 = 14 then
13222: LD_VAR 0 3
13226: PUSH
13227: LD_INT 14
13229: EQUAL
13230: IFFALSE 13240
// sFlag := true ;
13232: LD_ADDR_EXP 49
13236: PUSH
13237: LD_INT 1
13239: ST_TO_ADDR
// if p3 = 15 then
13240: LD_VAR 0 3
13244: PUSH
13245: LD_INT 15
13247: EQUAL
13248: IFFALSE 13258
// sKamikadze := true ;
13250: LD_ADDR_EXP 57
13254: PUSH
13255: LD_INT 1
13257: ST_TO_ADDR
// if p3 = 16 then
13258: LD_VAR 0 3
13262: PUSH
13263: LD_INT 16
13265: EQUAL
13266: IFFALSE 13276
// sTroll := true ;
13268: LD_ADDR_EXP 58
13272: PUSH
13273: LD_INT 1
13275: ST_TO_ADDR
// if p3 = 17 then
13276: LD_VAR 0 3
13280: PUSH
13281: LD_INT 17
13283: EQUAL
13284: IFFALSE 13294
// sSlow := true ;
13286: LD_ADDR_EXP 59
13290: PUSH
13291: LD_INT 1
13293: ST_TO_ADDR
// if p3 = 18 then
13294: LD_VAR 0 3
13298: PUSH
13299: LD_INT 18
13301: EQUAL
13302: IFFALSE 13312
// sLack := true ;
13304: LD_ADDR_EXP 60
13308: PUSH
13309: LD_INT 1
13311: ST_TO_ADDR
// if p3 = 19 then
13312: LD_VAR 0 3
13316: PUSH
13317: LD_INT 19
13319: EQUAL
13320: IFFALSE 13330
// sTank := true ;
13322: LD_ADDR_EXP 62
13326: PUSH
13327: LD_INT 1
13329: ST_TO_ADDR
// if p3 = 20 then
13330: LD_VAR 0 3
13334: PUSH
13335: LD_INT 20
13337: EQUAL
13338: IFFALSE 13348
// sRemote := true ;
13340: LD_ADDR_EXP 63
13344: PUSH
13345: LD_INT 1
13347: ST_TO_ADDR
// if p3 = 21 then
13348: LD_VAR 0 3
13352: PUSH
13353: LD_INT 21
13355: EQUAL
13356: IFFALSE 13366
// sPowell := true ;
13358: LD_ADDR_EXP 64
13362: PUSH
13363: LD_INT 1
13365: ST_TO_ADDR
// if p3 = 22 then
13366: LD_VAR 0 3
13370: PUSH
13371: LD_INT 22
13373: EQUAL
13374: IFFALSE 13384
// sTeleport := true ;
13376: LD_ADDR_EXP 67
13380: PUSH
13381: LD_INT 1
13383: ST_TO_ADDR
// if p3 = 23 then
13384: LD_VAR 0 3
13388: PUSH
13389: LD_INT 23
13391: EQUAL
13392: IFFALSE 13402
// sOilTower := true ;
13394: LD_ADDR_EXP 69
13398: PUSH
13399: LD_INT 1
13401: ST_TO_ADDR
// if p3 = 24 then
13402: LD_VAR 0 3
13406: PUSH
13407: LD_INT 24
13409: EQUAL
13410: IFFALSE 13420
// sShovel := true ;
13412: LD_ADDR_EXP 70
13416: PUSH
13417: LD_INT 1
13419: ST_TO_ADDR
// if p3 = 25 then
13420: LD_VAR 0 3
13424: PUSH
13425: LD_INT 25
13427: EQUAL
13428: IFFALSE 13438
// sSheik := true ;
13430: LD_ADDR_EXP 71
13434: PUSH
13435: LD_INT 1
13437: ST_TO_ADDR
// if p3 = 26 then
13438: LD_VAR 0 3
13442: PUSH
13443: LD_INT 26
13445: EQUAL
13446: IFFALSE 13456
// sEarthquake := true ;
13448: LD_ADDR_EXP 73
13452: PUSH
13453: LD_INT 1
13455: ST_TO_ADDR
// if p3 = 27 then
13456: LD_VAR 0 3
13460: PUSH
13461: LD_INT 27
13463: EQUAL
13464: IFFALSE 13474
// sAI := true ;
13466: LD_ADDR_EXP 74
13470: PUSH
13471: LD_INT 1
13473: ST_TO_ADDR
// if p3 = 28 then
13474: LD_VAR 0 3
13478: PUSH
13479: LD_INT 28
13481: EQUAL
13482: IFFALSE 13492
// sCargo := true ;
13484: LD_ADDR_EXP 77
13488: PUSH
13489: LD_INT 1
13491: ST_TO_ADDR
// if p3 = 29 then
13492: LD_VAR 0 3
13496: PUSH
13497: LD_INT 29
13499: EQUAL
13500: IFFALSE 13510
// sDLaser := true ;
13502: LD_ADDR_EXP 78
13506: PUSH
13507: LD_INT 1
13509: ST_TO_ADDR
// if p3 = 30 then
13510: LD_VAR 0 3
13514: PUSH
13515: LD_INT 30
13517: EQUAL
13518: IFFALSE 13528
// sExchange := true ;
13520: LD_ADDR_EXP 79
13524: PUSH
13525: LD_INT 1
13527: ST_TO_ADDR
// if p3 = 31 then
13528: LD_VAR 0 3
13532: PUSH
13533: LD_INT 31
13535: EQUAL
13536: IFFALSE 13546
// sFac := true ;
13538: LD_ADDR_EXP 80
13542: PUSH
13543: LD_INT 1
13545: ST_TO_ADDR
// if p3 = 32 then
13546: LD_VAR 0 3
13550: PUSH
13551: LD_INT 32
13553: EQUAL
13554: IFFALSE 13564
// sPower := true ;
13556: LD_ADDR_EXP 81
13560: PUSH
13561: LD_INT 1
13563: ST_TO_ADDR
// if p3 = 33 then
13564: LD_VAR 0 3
13568: PUSH
13569: LD_INT 33
13571: EQUAL
13572: IFFALSE 13582
// sRandom := true ;
13574: LD_ADDR_EXP 82
13578: PUSH
13579: LD_INT 1
13581: ST_TO_ADDR
// if p3 = 34 then
13582: LD_VAR 0 3
13586: PUSH
13587: LD_INT 34
13589: EQUAL
13590: IFFALSE 13600
// sShield := true ;
13592: LD_ADDR_EXP 83
13596: PUSH
13597: LD_INT 1
13599: ST_TO_ADDR
// if p3 = 35 then
13600: LD_VAR 0 3
13604: PUSH
13605: LD_INT 35
13607: EQUAL
13608: IFFALSE 13618
// sTime := true ;
13610: LD_ADDR_EXP 84
13614: PUSH
13615: LD_INT 1
13617: ST_TO_ADDR
// if p3 = 36 then
13618: LD_VAR 0 3
13622: PUSH
13623: LD_INT 36
13625: EQUAL
13626: IFFALSE 13636
// sTools := true ;
13628: LD_ADDR_EXP 85
13632: PUSH
13633: LD_INT 1
13635: ST_TO_ADDR
// if p3 = 101 then
13636: LD_VAR 0 3
13640: PUSH
13641: LD_INT 101
13643: EQUAL
13644: IFFALSE 13654
// sSold := true ;
13646: LD_ADDR_EXP 50
13650: PUSH
13651: LD_INT 1
13653: ST_TO_ADDR
// if p3 = 102 then
13654: LD_VAR 0 3
13658: PUSH
13659: LD_INT 102
13661: EQUAL
13662: IFFALSE 13672
// sDiff := true ;
13664: LD_ADDR_EXP 51
13668: PUSH
13669: LD_INT 1
13671: ST_TO_ADDR
// if p3 = 103 then
13672: LD_VAR 0 3
13676: PUSH
13677: LD_INT 103
13679: EQUAL
13680: IFFALSE 13690
// sFog := true ;
13682: LD_ADDR_EXP 54
13686: PUSH
13687: LD_INT 1
13689: ST_TO_ADDR
// if p3 = 104 then
13690: LD_VAR 0 3
13694: PUSH
13695: LD_INT 104
13697: EQUAL
13698: IFFALSE 13708
// sReset := true ;
13700: LD_ADDR_EXP 55
13704: PUSH
13705: LD_INT 1
13707: ST_TO_ADDR
// if p3 = 105 then
13708: LD_VAR 0 3
13712: PUSH
13713: LD_INT 105
13715: EQUAL
13716: IFFALSE 13726
// sSun := true ;
13718: LD_ADDR_EXP 56
13722: PUSH
13723: LD_INT 1
13725: ST_TO_ADDR
// if p3 = 106 then
13726: LD_VAR 0 3
13730: PUSH
13731: LD_INT 106
13733: EQUAL
13734: IFFALSE 13744
// sTiger := true ;
13736: LD_ADDR_EXP 52
13740: PUSH
13741: LD_INT 1
13743: ST_TO_ADDR
// if p3 = 107 then
13744: LD_VAR 0 3
13748: PUSH
13749: LD_INT 107
13751: EQUAL
13752: IFFALSE 13762
// sBomb := true ;
13754: LD_ADDR_EXP 53
13758: PUSH
13759: LD_INT 1
13761: ST_TO_ADDR
// if p3 = 108 then
13762: LD_VAR 0 3
13766: PUSH
13767: LD_INT 108
13769: EQUAL
13770: IFFALSE 13780
// sWound := true ;
13772: LD_ADDR_EXP 61
13776: PUSH
13777: LD_INT 1
13779: ST_TO_ADDR
// if p3 = 109 then
13780: LD_VAR 0 3
13784: PUSH
13785: LD_INT 109
13787: EQUAL
13788: IFFALSE 13798
// sBetray := true ;
13790: LD_ADDR_EXP 65
13794: PUSH
13795: LD_INT 1
13797: ST_TO_ADDR
// if p3 = 110 then
13798: LD_VAR 0 3
13802: PUSH
13803: LD_INT 110
13805: EQUAL
13806: IFFALSE 13816
// sContamin := true ;
13808: LD_ADDR_EXP 66
13812: PUSH
13813: LD_INT 1
13815: ST_TO_ADDR
// if p3 = 111 then
13816: LD_VAR 0 3
13820: PUSH
13821: LD_INT 111
13823: EQUAL
13824: IFFALSE 13834
// sOil := true ;
13826: LD_ADDR_EXP 68
13830: PUSH
13831: LD_INT 1
13833: ST_TO_ADDR
// if p3 = 112 then
13834: LD_VAR 0 3
13838: PUSH
13839: LD_INT 112
13841: EQUAL
13842: IFFALSE 13852
// sStu := true ;
13844: LD_ADDR_EXP 72
13848: PUSH
13849: LD_INT 1
13851: ST_TO_ADDR
// if p3 = 113 then
13852: LD_VAR 0 3
13856: PUSH
13857: LD_INT 113
13859: EQUAL
13860: IFFALSE 13870
// sBazooka := true ;
13862: LD_ADDR_EXP 75
13866: PUSH
13867: LD_INT 1
13869: ST_TO_ADDR
// if p3 = 114 then
13870: LD_VAR 0 3
13874: PUSH
13875: LD_INT 114
13877: EQUAL
13878: IFFALSE 13888
// sMortar := true ;
13880: LD_ADDR_EXP 76
13884: PUSH
13885: LD_INT 1
13887: ST_TO_ADDR
// if p3 = 115 then
13888: LD_VAR 0 3
13892: PUSH
13893: LD_INT 115
13895: EQUAL
13896: IFFALSE 13906
// sRanger := true ;
13898: LD_ADDR_EXP 86
13902: PUSH
13903: LD_INT 1
13905: ST_TO_ADDR
// if p3 = 116 then
13906: LD_VAR 0 3
13910: PUSH
13911: LD_INT 116
13913: EQUAL
13914: IFFALSE 13924
// sComputer := true ;
13916: LD_ADDR_EXP 87
13920: PUSH
13921: LD_INT 1
13923: ST_TO_ADDR
// if p3 = 117 then
13924: LD_VAR 0 3
13928: PUSH
13929: LD_INT 117
13931: EQUAL
13932: IFFALSE 13942
// s30 := true ;
13934: LD_ADDR_EXP 88
13938: PUSH
13939: LD_INT 1
13941: ST_TO_ADDR
// if p3 = 118 then
13942: LD_VAR 0 3
13946: PUSH
13947: LD_INT 118
13949: EQUAL
13950: IFFALSE 13960
// s60 := true ;
13952: LD_ADDR_EXP 89
13956: PUSH
13957: LD_INT 1
13959: ST_TO_ADDR
// end ; if p2 = hack_mode then
13960: LD_VAR 0 2
13964: PUSH
13965: LD_INT 101
13967: EQUAL
13968: IFFALSE 14096
// begin case p3 of 1 :
13970: LD_VAR 0 3
13974: PUSH
13975: LD_INT 1
13977: DOUBLE
13978: EQUAL
13979: IFTRUE 13983
13981: GO 13990
13983: POP
// hHackUnlimitedResources ; 2 :
13984: CALL 26235 0 0
13988: GO 14096
13990: LD_INT 2
13992: DOUBLE
13993: EQUAL
13994: IFTRUE 13998
13996: GO 14005
13998: POP
// hHackSetLevel10 ; 3 :
13999: CALL 26368 0 0
14003: GO 14096
14005: LD_INT 3
14007: DOUBLE
14008: EQUAL
14009: IFTRUE 14013
14011: GO 14020
14013: POP
// hHackSetLevel10YourUnits ; 4 :
14014: CALL 26453 0 0
14018: GO 14096
14020: LD_INT 4
14022: DOUBLE
14023: EQUAL
14024: IFTRUE 14028
14026: GO 14035
14028: POP
// hHackInvincible ; 5 :
14029: CALL 26901 0 0
14033: GO 14096
14035: LD_INT 5
14037: DOUBLE
14038: EQUAL
14039: IFTRUE 14043
14041: GO 14050
14043: POP
// hHackInvisible ; 6 :
14044: CALL 27012 0 0
14048: GO 14096
14050: LD_INT 6
14052: DOUBLE
14053: EQUAL
14054: IFTRUE 14058
14056: GO 14065
14058: POP
// hHackChangeYourSide ; 7 :
14059: CALL 27069 0 0
14063: GO 14096
14065: LD_INT 7
14067: DOUBLE
14068: EQUAL
14069: IFTRUE 14073
14071: GO 14080
14073: POP
// hHackChangeUnitSide ; 8 :
14074: CALL 27111 0 0
14078: GO 14096
14080: LD_INT 8
14082: DOUBLE
14083: EQUAL
14084: IFTRUE 14088
14086: GO 14095
14088: POP
// hHackFog ; end ;
14089: CALL 27212 0 0
14093: GO 14096
14095: POP
// end ; if p2 = game_save_mode then
14096: LD_VAR 0 2
14100: PUSH
14101: LD_INT 102
14103: EQUAL
14104: IFFALSE 14159
// begin if p3 = 1 then
14106: LD_VAR 0 3
14110: PUSH
14111: LD_INT 1
14113: EQUAL
14114: IFFALSE 14126
// globalGameSaveCounter := p4 ;
14116: LD_ADDR_EXP 32
14120: PUSH
14121: LD_VAR 0 4
14125: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
14126: LD_VAR 0 3
14130: PUSH
14131: LD_INT 2
14133: EQUAL
14134: PUSH
14135: LD_EXP 32
14139: AND
14140: IFFALSE 14159
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
14142: LD_STRING setGameSaveCounter(
14144: PUSH
14145: LD_EXP 32
14149: STR
14150: PUSH
14151: LD_STRING )
14153: STR
14154: PPUSH
14155: CALL_OW 559
// end ; end ;
14159: LD_VAR 0 7
14163: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
14164: LD_INT 0
14166: PPUSH
// streamModeActive := false ;
14167: LD_ADDR_EXP 33
14171: PUSH
14172: LD_INT 0
14174: ST_TO_ADDR
// normalCounter := 36 ;
14175: LD_ADDR_EXP 34
14179: PUSH
14180: LD_INT 36
14182: ST_TO_ADDR
// hardcoreCounter := 18 ;
14183: LD_ADDR_EXP 35
14187: PUSH
14188: LD_INT 18
14190: ST_TO_ADDR
// sRocket := false ;
14191: LD_ADDR_EXP 38
14195: PUSH
14196: LD_INT 0
14198: ST_TO_ADDR
// sSpeed := false ;
14199: LD_ADDR_EXP 37
14203: PUSH
14204: LD_INT 0
14206: ST_TO_ADDR
// sEngine := false ;
14207: LD_ADDR_EXP 39
14211: PUSH
14212: LD_INT 0
14214: ST_TO_ADDR
// sSpec := false ;
14215: LD_ADDR_EXP 36
14219: PUSH
14220: LD_INT 0
14222: ST_TO_ADDR
// sLevel := false ;
14223: LD_ADDR_EXP 40
14227: PUSH
14228: LD_INT 0
14230: ST_TO_ADDR
// sArmoury := false ;
14231: LD_ADDR_EXP 41
14235: PUSH
14236: LD_INT 0
14238: ST_TO_ADDR
// sRadar := false ;
14239: LD_ADDR_EXP 42
14243: PUSH
14244: LD_INT 0
14246: ST_TO_ADDR
// sBunker := false ;
14247: LD_ADDR_EXP 43
14251: PUSH
14252: LD_INT 0
14254: ST_TO_ADDR
// sHack := false ;
14255: LD_ADDR_EXP 44
14259: PUSH
14260: LD_INT 0
14262: ST_TO_ADDR
// sFire := false ;
14263: LD_ADDR_EXP 45
14267: PUSH
14268: LD_INT 0
14270: ST_TO_ADDR
// sRefresh := false ;
14271: LD_ADDR_EXP 46
14275: PUSH
14276: LD_INT 0
14278: ST_TO_ADDR
// sExp := false ;
14279: LD_ADDR_EXP 47
14283: PUSH
14284: LD_INT 0
14286: ST_TO_ADDR
// sDepot := false ;
14287: LD_ADDR_EXP 48
14291: PUSH
14292: LD_INT 0
14294: ST_TO_ADDR
// sFlag := false ;
14295: LD_ADDR_EXP 49
14299: PUSH
14300: LD_INT 0
14302: ST_TO_ADDR
// sKamikadze := false ;
14303: LD_ADDR_EXP 57
14307: PUSH
14308: LD_INT 0
14310: ST_TO_ADDR
// sTroll := false ;
14311: LD_ADDR_EXP 58
14315: PUSH
14316: LD_INT 0
14318: ST_TO_ADDR
// sSlow := false ;
14319: LD_ADDR_EXP 59
14323: PUSH
14324: LD_INT 0
14326: ST_TO_ADDR
// sLack := false ;
14327: LD_ADDR_EXP 60
14331: PUSH
14332: LD_INT 0
14334: ST_TO_ADDR
// sTank := false ;
14335: LD_ADDR_EXP 62
14339: PUSH
14340: LD_INT 0
14342: ST_TO_ADDR
// sRemote := false ;
14343: LD_ADDR_EXP 63
14347: PUSH
14348: LD_INT 0
14350: ST_TO_ADDR
// sPowell := false ;
14351: LD_ADDR_EXP 64
14355: PUSH
14356: LD_INT 0
14358: ST_TO_ADDR
// sTeleport := false ;
14359: LD_ADDR_EXP 67
14363: PUSH
14364: LD_INT 0
14366: ST_TO_ADDR
// sOilTower := false ;
14367: LD_ADDR_EXP 69
14371: PUSH
14372: LD_INT 0
14374: ST_TO_ADDR
// sShovel := false ;
14375: LD_ADDR_EXP 70
14379: PUSH
14380: LD_INT 0
14382: ST_TO_ADDR
// sSheik := false ;
14383: LD_ADDR_EXP 71
14387: PUSH
14388: LD_INT 0
14390: ST_TO_ADDR
// sEarthquake := false ;
14391: LD_ADDR_EXP 73
14395: PUSH
14396: LD_INT 0
14398: ST_TO_ADDR
// sAI := false ;
14399: LD_ADDR_EXP 74
14403: PUSH
14404: LD_INT 0
14406: ST_TO_ADDR
// sCargo := false ;
14407: LD_ADDR_EXP 77
14411: PUSH
14412: LD_INT 0
14414: ST_TO_ADDR
// sDLaser := false ;
14415: LD_ADDR_EXP 78
14419: PUSH
14420: LD_INT 0
14422: ST_TO_ADDR
// sExchange := false ;
14423: LD_ADDR_EXP 79
14427: PUSH
14428: LD_INT 0
14430: ST_TO_ADDR
// sFac := false ;
14431: LD_ADDR_EXP 80
14435: PUSH
14436: LD_INT 0
14438: ST_TO_ADDR
// sPower := false ;
14439: LD_ADDR_EXP 81
14443: PUSH
14444: LD_INT 0
14446: ST_TO_ADDR
// sRandom := false ;
14447: LD_ADDR_EXP 82
14451: PUSH
14452: LD_INT 0
14454: ST_TO_ADDR
// sShield := false ;
14455: LD_ADDR_EXP 83
14459: PUSH
14460: LD_INT 0
14462: ST_TO_ADDR
// sTime := false ;
14463: LD_ADDR_EXP 84
14467: PUSH
14468: LD_INT 0
14470: ST_TO_ADDR
// sTools := false ;
14471: LD_ADDR_EXP 85
14475: PUSH
14476: LD_INT 0
14478: ST_TO_ADDR
// sSold := false ;
14479: LD_ADDR_EXP 50
14483: PUSH
14484: LD_INT 0
14486: ST_TO_ADDR
// sDiff := false ;
14487: LD_ADDR_EXP 51
14491: PUSH
14492: LD_INT 0
14494: ST_TO_ADDR
// sFog := false ;
14495: LD_ADDR_EXP 54
14499: PUSH
14500: LD_INT 0
14502: ST_TO_ADDR
// sReset := false ;
14503: LD_ADDR_EXP 55
14507: PUSH
14508: LD_INT 0
14510: ST_TO_ADDR
// sSun := false ;
14511: LD_ADDR_EXP 56
14515: PUSH
14516: LD_INT 0
14518: ST_TO_ADDR
// sTiger := false ;
14519: LD_ADDR_EXP 52
14523: PUSH
14524: LD_INT 0
14526: ST_TO_ADDR
// sBomb := false ;
14527: LD_ADDR_EXP 53
14531: PUSH
14532: LD_INT 0
14534: ST_TO_ADDR
// sWound := false ;
14535: LD_ADDR_EXP 61
14539: PUSH
14540: LD_INT 0
14542: ST_TO_ADDR
// sBetray := false ;
14543: LD_ADDR_EXP 65
14547: PUSH
14548: LD_INT 0
14550: ST_TO_ADDR
// sContamin := false ;
14551: LD_ADDR_EXP 66
14555: PUSH
14556: LD_INT 0
14558: ST_TO_ADDR
// sOil := false ;
14559: LD_ADDR_EXP 68
14563: PUSH
14564: LD_INT 0
14566: ST_TO_ADDR
// sStu := false ;
14567: LD_ADDR_EXP 72
14571: PUSH
14572: LD_INT 0
14574: ST_TO_ADDR
// sBazooka := false ;
14575: LD_ADDR_EXP 75
14579: PUSH
14580: LD_INT 0
14582: ST_TO_ADDR
// sMortar := false ;
14583: LD_ADDR_EXP 76
14587: PUSH
14588: LD_INT 0
14590: ST_TO_ADDR
// sRanger := false ;
14591: LD_ADDR_EXP 86
14595: PUSH
14596: LD_INT 0
14598: ST_TO_ADDR
// sComputer := false ;
14599: LD_ADDR_EXP 87
14603: PUSH
14604: LD_INT 0
14606: ST_TO_ADDR
// s30 := false ;
14607: LD_ADDR_EXP 88
14611: PUSH
14612: LD_INT 0
14614: ST_TO_ADDR
// s60 := false ;
14615: LD_ADDR_EXP 89
14619: PUSH
14620: LD_INT 0
14622: ST_TO_ADDR
// end ;
14623: LD_VAR 0 1
14627: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
14628: LD_INT 0
14630: PPUSH
14631: PPUSH
14632: PPUSH
14633: PPUSH
14634: PPUSH
14635: PPUSH
14636: PPUSH
// result := [ ] ;
14637: LD_ADDR_VAR 0 2
14641: PUSH
14642: EMPTY
14643: ST_TO_ADDR
// if campaign_id = 1 then
14644: LD_OWVAR 69
14648: PUSH
14649: LD_INT 1
14651: EQUAL
14652: IFFALSE 17818
// begin case mission_number of 1 :
14654: LD_OWVAR 70
14658: PUSH
14659: LD_INT 1
14661: DOUBLE
14662: EQUAL
14663: IFTRUE 14667
14665: GO 14743
14667: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
14668: LD_ADDR_VAR 0 2
14672: PUSH
14673: LD_INT 2
14675: PUSH
14676: LD_INT 4
14678: PUSH
14679: LD_INT 11
14681: PUSH
14682: LD_INT 12
14684: PUSH
14685: LD_INT 15
14687: PUSH
14688: LD_INT 16
14690: PUSH
14691: LD_INT 22
14693: PUSH
14694: LD_INT 23
14696: PUSH
14697: LD_INT 26
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: PUSH
14711: LD_INT 101
14713: PUSH
14714: LD_INT 102
14716: PUSH
14717: LD_INT 106
14719: PUSH
14720: LD_INT 116
14722: PUSH
14723: LD_INT 117
14725: PUSH
14726: LD_INT 118
14728: PUSH
14729: EMPTY
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: LIST
14736: PUSH
14737: EMPTY
14738: LIST
14739: LIST
14740: ST_TO_ADDR
14741: GO 17816
14743: LD_INT 2
14745: DOUBLE
14746: EQUAL
14747: IFTRUE 14751
14749: GO 14835
14751: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
14752: LD_ADDR_VAR 0 2
14756: PUSH
14757: LD_INT 2
14759: PUSH
14760: LD_INT 4
14762: PUSH
14763: LD_INT 11
14765: PUSH
14766: LD_INT 12
14768: PUSH
14769: LD_INT 15
14771: PUSH
14772: LD_INT 16
14774: PUSH
14775: LD_INT 22
14777: PUSH
14778: LD_INT 23
14780: PUSH
14781: LD_INT 26
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: LIST
14788: LIST
14789: LIST
14790: LIST
14791: LIST
14792: LIST
14793: LIST
14794: PUSH
14795: LD_INT 101
14797: PUSH
14798: LD_INT 102
14800: PUSH
14801: LD_INT 105
14803: PUSH
14804: LD_INT 106
14806: PUSH
14807: LD_INT 108
14809: PUSH
14810: LD_INT 116
14812: PUSH
14813: LD_INT 117
14815: PUSH
14816: LD_INT 118
14818: PUSH
14819: EMPTY
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: LIST
14825: LIST
14826: LIST
14827: LIST
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: ST_TO_ADDR
14833: GO 17816
14835: LD_INT 3
14837: DOUBLE
14838: EQUAL
14839: IFTRUE 14843
14841: GO 14931
14843: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
14844: LD_ADDR_VAR 0 2
14848: PUSH
14849: LD_INT 2
14851: PUSH
14852: LD_INT 4
14854: PUSH
14855: LD_INT 5
14857: PUSH
14858: LD_INT 11
14860: PUSH
14861: LD_INT 12
14863: PUSH
14864: LD_INT 15
14866: PUSH
14867: LD_INT 16
14869: PUSH
14870: LD_INT 22
14872: PUSH
14873: LD_INT 26
14875: PUSH
14876: LD_INT 36
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: PUSH
14891: LD_INT 101
14893: PUSH
14894: LD_INT 102
14896: PUSH
14897: LD_INT 105
14899: PUSH
14900: LD_INT 106
14902: PUSH
14903: LD_INT 108
14905: PUSH
14906: LD_INT 116
14908: PUSH
14909: LD_INT 117
14911: PUSH
14912: LD_INT 118
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: PUSH
14925: EMPTY
14926: LIST
14927: LIST
14928: ST_TO_ADDR
14929: GO 17816
14931: LD_INT 4
14933: DOUBLE
14934: EQUAL
14935: IFTRUE 14939
14937: GO 15035
14939: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
14940: LD_ADDR_VAR 0 2
14944: PUSH
14945: LD_INT 2
14947: PUSH
14948: LD_INT 4
14950: PUSH
14951: LD_INT 5
14953: PUSH
14954: LD_INT 8
14956: PUSH
14957: LD_INT 11
14959: PUSH
14960: LD_INT 12
14962: PUSH
14963: LD_INT 15
14965: PUSH
14966: LD_INT 16
14968: PUSH
14969: LD_INT 22
14971: PUSH
14972: LD_INT 23
14974: PUSH
14975: LD_INT 26
14977: PUSH
14978: LD_INT 36
14980: PUSH
14981: EMPTY
14982: LIST
14983: LIST
14984: LIST
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: PUSH
14995: LD_INT 101
14997: PUSH
14998: LD_INT 102
15000: PUSH
15001: LD_INT 105
15003: PUSH
15004: LD_INT 106
15006: PUSH
15007: LD_INT 108
15009: PUSH
15010: LD_INT 116
15012: PUSH
15013: LD_INT 117
15015: PUSH
15016: LD_INT 118
15018: PUSH
15019: EMPTY
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: LIST
15028: PUSH
15029: EMPTY
15030: LIST
15031: LIST
15032: ST_TO_ADDR
15033: GO 17816
15035: LD_INT 5
15037: DOUBLE
15038: EQUAL
15039: IFTRUE 15043
15041: GO 15155
15043: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
15044: LD_ADDR_VAR 0 2
15048: PUSH
15049: LD_INT 2
15051: PUSH
15052: LD_INT 4
15054: PUSH
15055: LD_INT 5
15057: PUSH
15058: LD_INT 6
15060: PUSH
15061: LD_INT 8
15063: PUSH
15064: LD_INT 11
15066: PUSH
15067: LD_INT 12
15069: PUSH
15070: LD_INT 15
15072: PUSH
15073: LD_INT 16
15075: PUSH
15076: LD_INT 22
15078: PUSH
15079: LD_INT 23
15081: PUSH
15082: LD_INT 25
15084: PUSH
15085: LD_INT 26
15087: PUSH
15088: LD_INT 36
15090: PUSH
15091: EMPTY
15092: LIST
15093: LIST
15094: LIST
15095: LIST
15096: LIST
15097: LIST
15098: LIST
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: PUSH
15107: LD_INT 101
15109: PUSH
15110: LD_INT 102
15112: PUSH
15113: LD_INT 105
15115: PUSH
15116: LD_INT 106
15118: PUSH
15119: LD_INT 108
15121: PUSH
15122: LD_INT 109
15124: PUSH
15125: LD_INT 112
15127: PUSH
15128: LD_INT 116
15130: PUSH
15131: LD_INT 117
15133: PUSH
15134: LD_INT 118
15136: PUSH
15137: EMPTY
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: ST_TO_ADDR
15153: GO 17816
15155: LD_INT 6
15157: DOUBLE
15158: EQUAL
15159: IFTRUE 15163
15161: GO 15295
15163: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
15164: LD_ADDR_VAR 0 2
15168: PUSH
15169: LD_INT 2
15171: PUSH
15172: LD_INT 4
15174: PUSH
15175: LD_INT 5
15177: PUSH
15178: LD_INT 6
15180: PUSH
15181: LD_INT 8
15183: PUSH
15184: LD_INT 11
15186: PUSH
15187: LD_INT 12
15189: PUSH
15190: LD_INT 15
15192: PUSH
15193: LD_INT 16
15195: PUSH
15196: LD_INT 20
15198: PUSH
15199: LD_INT 21
15201: PUSH
15202: LD_INT 22
15204: PUSH
15205: LD_INT 23
15207: PUSH
15208: LD_INT 25
15210: PUSH
15211: LD_INT 26
15213: PUSH
15214: LD_INT 30
15216: PUSH
15217: LD_INT 31
15219: PUSH
15220: LD_INT 32
15222: PUSH
15223: LD_INT 36
15225: PUSH
15226: EMPTY
15227: LIST
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: PUSH
15247: LD_INT 101
15249: PUSH
15250: LD_INT 102
15252: PUSH
15253: LD_INT 105
15255: PUSH
15256: LD_INT 106
15258: PUSH
15259: LD_INT 108
15261: PUSH
15262: LD_INT 109
15264: PUSH
15265: LD_INT 112
15267: PUSH
15268: LD_INT 116
15270: PUSH
15271: LD_INT 117
15273: PUSH
15274: LD_INT 118
15276: PUSH
15277: EMPTY
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: PUSH
15289: EMPTY
15290: LIST
15291: LIST
15292: ST_TO_ADDR
15293: GO 17816
15295: LD_INT 7
15297: DOUBLE
15298: EQUAL
15299: IFTRUE 15303
15301: GO 15415
15303: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
15304: LD_ADDR_VAR 0 2
15308: PUSH
15309: LD_INT 2
15311: PUSH
15312: LD_INT 4
15314: PUSH
15315: LD_INT 5
15317: PUSH
15318: LD_INT 7
15320: PUSH
15321: LD_INT 11
15323: PUSH
15324: LD_INT 12
15326: PUSH
15327: LD_INT 15
15329: PUSH
15330: LD_INT 16
15332: PUSH
15333: LD_INT 20
15335: PUSH
15336: LD_INT 21
15338: PUSH
15339: LD_INT 22
15341: PUSH
15342: LD_INT 23
15344: PUSH
15345: LD_INT 25
15347: PUSH
15348: LD_INT 26
15350: PUSH
15351: EMPTY
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: PUSH
15367: LD_INT 101
15369: PUSH
15370: LD_INT 102
15372: PUSH
15373: LD_INT 103
15375: PUSH
15376: LD_INT 105
15378: PUSH
15379: LD_INT 106
15381: PUSH
15382: LD_INT 108
15384: PUSH
15385: LD_INT 112
15387: PUSH
15388: LD_INT 116
15390: PUSH
15391: LD_INT 117
15393: PUSH
15394: LD_INT 118
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: LIST
15401: LIST
15402: LIST
15403: LIST
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: PUSH
15409: EMPTY
15410: LIST
15411: LIST
15412: ST_TO_ADDR
15413: GO 17816
15415: LD_INT 8
15417: DOUBLE
15418: EQUAL
15419: IFTRUE 15423
15421: GO 15563
15423: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
15424: LD_ADDR_VAR 0 2
15428: PUSH
15429: LD_INT 2
15431: PUSH
15432: LD_INT 4
15434: PUSH
15435: LD_INT 5
15437: PUSH
15438: LD_INT 6
15440: PUSH
15441: LD_INT 7
15443: PUSH
15444: LD_INT 8
15446: PUSH
15447: LD_INT 11
15449: PUSH
15450: LD_INT 12
15452: PUSH
15453: LD_INT 15
15455: PUSH
15456: LD_INT 16
15458: PUSH
15459: LD_INT 20
15461: PUSH
15462: LD_INT 21
15464: PUSH
15465: LD_INT 22
15467: PUSH
15468: LD_INT 23
15470: PUSH
15471: LD_INT 25
15473: PUSH
15474: LD_INT 26
15476: PUSH
15477: LD_INT 30
15479: PUSH
15480: LD_INT 31
15482: PUSH
15483: LD_INT 32
15485: PUSH
15486: LD_INT 36
15488: PUSH
15489: EMPTY
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: PUSH
15511: LD_INT 101
15513: PUSH
15514: LD_INT 102
15516: PUSH
15517: LD_INT 103
15519: PUSH
15520: LD_INT 105
15522: PUSH
15523: LD_INT 106
15525: PUSH
15526: LD_INT 108
15528: PUSH
15529: LD_INT 109
15531: PUSH
15532: LD_INT 112
15534: PUSH
15535: LD_INT 116
15537: PUSH
15538: LD_INT 117
15540: PUSH
15541: LD_INT 118
15543: PUSH
15544: EMPTY
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: PUSH
15557: EMPTY
15558: LIST
15559: LIST
15560: ST_TO_ADDR
15561: GO 17816
15563: LD_INT 9
15565: DOUBLE
15566: EQUAL
15567: IFTRUE 15571
15569: GO 15719
15571: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
15572: LD_ADDR_VAR 0 2
15576: PUSH
15577: LD_INT 2
15579: PUSH
15580: LD_INT 4
15582: PUSH
15583: LD_INT 5
15585: PUSH
15586: LD_INT 6
15588: PUSH
15589: LD_INT 7
15591: PUSH
15592: LD_INT 8
15594: PUSH
15595: LD_INT 11
15597: PUSH
15598: LD_INT 12
15600: PUSH
15601: LD_INT 15
15603: PUSH
15604: LD_INT 16
15606: PUSH
15607: LD_INT 20
15609: PUSH
15610: LD_INT 21
15612: PUSH
15613: LD_INT 22
15615: PUSH
15616: LD_INT 23
15618: PUSH
15619: LD_INT 25
15621: PUSH
15622: LD_INT 26
15624: PUSH
15625: LD_INT 28
15627: PUSH
15628: LD_INT 30
15630: PUSH
15631: LD_INT 31
15633: PUSH
15634: LD_INT 32
15636: PUSH
15637: LD_INT 36
15639: PUSH
15640: EMPTY
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: PUSH
15663: LD_INT 101
15665: PUSH
15666: LD_INT 102
15668: PUSH
15669: LD_INT 103
15671: PUSH
15672: LD_INT 105
15674: PUSH
15675: LD_INT 106
15677: PUSH
15678: LD_INT 108
15680: PUSH
15681: LD_INT 109
15683: PUSH
15684: LD_INT 112
15686: PUSH
15687: LD_INT 114
15689: PUSH
15690: LD_INT 116
15692: PUSH
15693: LD_INT 117
15695: PUSH
15696: LD_INT 118
15698: PUSH
15699: EMPTY
15700: LIST
15701: LIST
15702: LIST
15703: LIST
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: PUSH
15713: EMPTY
15714: LIST
15715: LIST
15716: ST_TO_ADDR
15717: GO 17816
15719: LD_INT 10
15721: DOUBLE
15722: EQUAL
15723: IFTRUE 15727
15725: GO 15923
15727: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
15728: LD_ADDR_VAR 0 2
15732: PUSH
15733: LD_INT 2
15735: PUSH
15736: LD_INT 4
15738: PUSH
15739: LD_INT 5
15741: PUSH
15742: LD_INT 6
15744: PUSH
15745: LD_INT 7
15747: PUSH
15748: LD_INT 8
15750: PUSH
15751: LD_INT 9
15753: PUSH
15754: LD_INT 10
15756: PUSH
15757: LD_INT 11
15759: PUSH
15760: LD_INT 12
15762: PUSH
15763: LD_INT 13
15765: PUSH
15766: LD_INT 14
15768: PUSH
15769: LD_INT 15
15771: PUSH
15772: LD_INT 16
15774: PUSH
15775: LD_INT 17
15777: PUSH
15778: LD_INT 18
15780: PUSH
15781: LD_INT 19
15783: PUSH
15784: LD_INT 20
15786: PUSH
15787: LD_INT 21
15789: PUSH
15790: LD_INT 22
15792: PUSH
15793: LD_INT 23
15795: PUSH
15796: LD_INT 24
15798: PUSH
15799: LD_INT 25
15801: PUSH
15802: LD_INT 26
15804: PUSH
15805: LD_INT 28
15807: PUSH
15808: LD_INT 30
15810: PUSH
15811: LD_INT 31
15813: PUSH
15814: LD_INT 32
15816: PUSH
15817: LD_INT 36
15819: PUSH
15820: EMPTY
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: LIST
15850: PUSH
15851: LD_INT 101
15853: PUSH
15854: LD_INT 102
15856: PUSH
15857: LD_INT 103
15859: PUSH
15860: LD_INT 104
15862: PUSH
15863: LD_INT 105
15865: PUSH
15866: LD_INT 106
15868: PUSH
15869: LD_INT 107
15871: PUSH
15872: LD_INT 108
15874: PUSH
15875: LD_INT 109
15877: PUSH
15878: LD_INT 110
15880: PUSH
15881: LD_INT 111
15883: PUSH
15884: LD_INT 112
15886: PUSH
15887: LD_INT 114
15889: PUSH
15890: LD_INT 116
15892: PUSH
15893: LD_INT 117
15895: PUSH
15896: LD_INT 118
15898: PUSH
15899: EMPTY
15900: LIST
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: PUSH
15917: EMPTY
15918: LIST
15919: LIST
15920: ST_TO_ADDR
15921: GO 17816
15923: LD_INT 11
15925: DOUBLE
15926: EQUAL
15927: IFTRUE 15931
15929: GO 16135
15931: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
15932: LD_ADDR_VAR 0 2
15936: PUSH
15937: LD_INT 2
15939: PUSH
15940: LD_INT 3
15942: PUSH
15943: LD_INT 4
15945: PUSH
15946: LD_INT 5
15948: PUSH
15949: LD_INT 6
15951: PUSH
15952: LD_INT 7
15954: PUSH
15955: LD_INT 8
15957: PUSH
15958: LD_INT 9
15960: PUSH
15961: LD_INT 10
15963: PUSH
15964: LD_INT 11
15966: PUSH
15967: LD_INT 12
15969: PUSH
15970: LD_INT 13
15972: PUSH
15973: LD_INT 14
15975: PUSH
15976: LD_INT 15
15978: PUSH
15979: LD_INT 16
15981: PUSH
15982: LD_INT 17
15984: PUSH
15985: LD_INT 18
15987: PUSH
15988: LD_INT 19
15990: PUSH
15991: LD_INT 20
15993: PUSH
15994: LD_INT 21
15996: PUSH
15997: LD_INT 22
15999: PUSH
16000: LD_INT 23
16002: PUSH
16003: LD_INT 24
16005: PUSH
16006: LD_INT 25
16008: PUSH
16009: LD_INT 26
16011: PUSH
16012: LD_INT 28
16014: PUSH
16015: LD_INT 30
16017: PUSH
16018: LD_INT 31
16020: PUSH
16021: LD_INT 32
16023: PUSH
16024: LD_INT 34
16026: PUSH
16027: LD_INT 36
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: LIST
16053: LIST
16054: LIST
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: PUSH
16063: LD_INT 101
16065: PUSH
16066: LD_INT 102
16068: PUSH
16069: LD_INT 103
16071: PUSH
16072: LD_INT 104
16074: PUSH
16075: LD_INT 105
16077: PUSH
16078: LD_INT 106
16080: PUSH
16081: LD_INT 107
16083: PUSH
16084: LD_INT 108
16086: PUSH
16087: LD_INT 109
16089: PUSH
16090: LD_INT 110
16092: PUSH
16093: LD_INT 111
16095: PUSH
16096: LD_INT 112
16098: PUSH
16099: LD_INT 114
16101: PUSH
16102: LD_INT 116
16104: PUSH
16105: LD_INT 117
16107: PUSH
16108: LD_INT 118
16110: PUSH
16111: EMPTY
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: PUSH
16129: EMPTY
16130: LIST
16131: LIST
16132: ST_TO_ADDR
16133: GO 17816
16135: LD_INT 12
16137: DOUBLE
16138: EQUAL
16139: IFTRUE 16143
16141: GO 16363
16143: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
16144: LD_ADDR_VAR 0 2
16148: PUSH
16149: LD_INT 1
16151: PUSH
16152: LD_INT 2
16154: PUSH
16155: LD_INT 3
16157: PUSH
16158: LD_INT 4
16160: PUSH
16161: LD_INT 5
16163: PUSH
16164: LD_INT 6
16166: PUSH
16167: LD_INT 7
16169: PUSH
16170: LD_INT 8
16172: PUSH
16173: LD_INT 9
16175: PUSH
16176: LD_INT 10
16178: PUSH
16179: LD_INT 11
16181: PUSH
16182: LD_INT 12
16184: PUSH
16185: LD_INT 13
16187: PUSH
16188: LD_INT 14
16190: PUSH
16191: LD_INT 15
16193: PUSH
16194: LD_INT 16
16196: PUSH
16197: LD_INT 17
16199: PUSH
16200: LD_INT 18
16202: PUSH
16203: LD_INT 19
16205: PUSH
16206: LD_INT 20
16208: PUSH
16209: LD_INT 21
16211: PUSH
16212: LD_INT 22
16214: PUSH
16215: LD_INT 23
16217: PUSH
16218: LD_INT 24
16220: PUSH
16221: LD_INT 25
16223: PUSH
16224: LD_INT 26
16226: PUSH
16227: LD_INT 27
16229: PUSH
16230: LD_INT 28
16232: PUSH
16233: LD_INT 30
16235: PUSH
16236: LD_INT 31
16238: PUSH
16239: LD_INT 32
16241: PUSH
16242: LD_INT 33
16244: PUSH
16245: LD_INT 34
16247: PUSH
16248: LD_INT 36
16250: PUSH
16251: EMPTY
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: LIST
16268: LIST
16269: LIST
16270: LIST
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: LIST
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: LIST
16282: LIST
16283: LIST
16284: LIST
16285: LIST
16286: PUSH
16287: LD_INT 101
16289: PUSH
16290: LD_INT 102
16292: PUSH
16293: LD_INT 103
16295: PUSH
16296: LD_INT 104
16298: PUSH
16299: LD_INT 105
16301: PUSH
16302: LD_INT 106
16304: PUSH
16305: LD_INT 107
16307: PUSH
16308: LD_INT 108
16310: PUSH
16311: LD_INT 109
16313: PUSH
16314: LD_INT 110
16316: PUSH
16317: LD_INT 111
16319: PUSH
16320: LD_INT 112
16322: PUSH
16323: LD_INT 113
16325: PUSH
16326: LD_INT 114
16328: PUSH
16329: LD_INT 116
16331: PUSH
16332: LD_INT 117
16334: PUSH
16335: LD_INT 118
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: PUSH
16357: EMPTY
16358: LIST
16359: LIST
16360: ST_TO_ADDR
16361: GO 17816
16363: LD_INT 13
16365: DOUBLE
16366: EQUAL
16367: IFTRUE 16371
16369: GO 16579
16371: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
16372: LD_ADDR_VAR 0 2
16376: PUSH
16377: LD_INT 1
16379: PUSH
16380: LD_INT 2
16382: PUSH
16383: LD_INT 3
16385: PUSH
16386: LD_INT 4
16388: PUSH
16389: LD_INT 5
16391: PUSH
16392: LD_INT 8
16394: PUSH
16395: LD_INT 9
16397: PUSH
16398: LD_INT 10
16400: PUSH
16401: LD_INT 11
16403: PUSH
16404: LD_INT 12
16406: PUSH
16407: LD_INT 14
16409: PUSH
16410: LD_INT 15
16412: PUSH
16413: LD_INT 16
16415: PUSH
16416: LD_INT 17
16418: PUSH
16419: LD_INT 18
16421: PUSH
16422: LD_INT 19
16424: PUSH
16425: LD_INT 20
16427: PUSH
16428: LD_INT 21
16430: PUSH
16431: LD_INT 22
16433: PUSH
16434: LD_INT 23
16436: PUSH
16437: LD_INT 24
16439: PUSH
16440: LD_INT 25
16442: PUSH
16443: LD_INT 26
16445: PUSH
16446: LD_INT 27
16448: PUSH
16449: LD_INT 28
16451: PUSH
16452: LD_INT 30
16454: PUSH
16455: LD_INT 31
16457: PUSH
16458: LD_INT 32
16460: PUSH
16461: LD_INT 33
16463: PUSH
16464: LD_INT 34
16466: PUSH
16467: LD_INT 36
16469: PUSH
16470: EMPTY
16471: LIST
16472: LIST
16473: LIST
16474: LIST
16475: LIST
16476: LIST
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: LIST
16492: LIST
16493: LIST
16494: LIST
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: LIST
16500: LIST
16501: LIST
16502: PUSH
16503: LD_INT 101
16505: PUSH
16506: LD_INT 102
16508: PUSH
16509: LD_INT 103
16511: PUSH
16512: LD_INT 104
16514: PUSH
16515: LD_INT 105
16517: PUSH
16518: LD_INT 106
16520: PUSH
16521: LD_INT 107
16523: PUSH
16524: LD_INT 108
16526: PUSH
16527: LD_INT 109
16529: PUSH
16530: LD_INT 110
16532: PUSH
16533: LD_INT 111
16535: PUSH
16536: LD_INT 112
16538: PUSH
16539: LD_INT 113
16541: PUSH
16542: LD_INT 114
16544: PUSH
16545: LD_INT 116
16547: PUSH
16548: LD_INT 117
16550: PUSH
16551: LD_INT 118
16553: PUSH
16554: EMPTY
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: ST_TO_ADDR
16577: GO 17816
16579: LD_INT 14
16581: DOUBLE
16582: EQUAL
16583: IFTRUE 16587
16585: GO 16811
16587: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
16588: LD_ADDR_VAR 0 2
16592: PUSH
16593: LD_INT 1
16595: PUSH
16596: LD_INT 2
16598: PUSH
16599: LD_INT 3
16601: PUSH
16602: LD_INT 4
16604: PUSH
16605: LD_INT 5
16607: PUSH
16608: LD_INT 6
16610: PUSH
16611: LD_INT 7
16613: PUSH
16614: LD_INT 8
16616: PUSH
16617: LD_INT 9
16619: PUSH
16620: LD_INT 10
16622: PUSH
16623: LD_INT 11
16625: PUSH
16626: LD_INT 12
16628: PUSH
16629: LD_INT 13
16631: PUSH
16632: LD_INT 14
16634: PUSH
16635: LD_INT 15
16637: PUSH
16638: LD_INT 16
16640: PUSH
16641: LD_INT 17
16643: PUSH
16644: LD_INT 18
16646: PUSH
16647: LD_INT 19
16649: PUSH
16650: LD_INT 20
16652: PUSH
16653: LD_INT 21
16655: PUSH
16656: LD_INT 22
16658: PUSH
16659: LD_INT 23
16661: PUSH
16662: LD_INT 24
16664: PUSH
16665: LD_INT 25
16667: PUSH
16668: LD_INT 26
16670: PUSH
16671: LD_INT 27
16673: PUSH
16674: LD_INT 28
16676: PUSH
16677: LD_INT 29
16679: PUSH
16680: LD_INT 30
16682: PUSH
16683: LD_INT 31
16685: PUSH
16686: LD_INT 32
16688: PUSH
16689: LD_INT 33
16691: PUSH
16692: LD_INT 34
16694: PUSH
16695: LD_INT 36
16697: PUSH
16698: EMPTY
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: LIST
16704: LIST
16705: LIST
16706: LIST
16707: LIST
16708: LIST
16709: LIST
16710: LIST
16711: LIST
16712: LIST
16713: LIST
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: LIST
16734: PUSH
16735: LD_INT 101
16737: PUSH
16738: LD_INT 102
16740: PUSH
16741: LD_INT 103
16743: PUSH
16744: LD_INT 104
16746: PUSH
16747: LD_INT 105
16749: PUSH
16750: LD_INT 106
16752: PUSH
16753: LD_INT 107
16755: PUSH
16756: LD_INT 108
16758: PUSH
16759: LD_INT 109
16761: PUSH
16762: LD_INT 110
16764: PUSH
16765: LD_INT 111
16767: PUSH
16768: LD_INT 112
16770: PUSH
16771: LD_INT 113
16773: PUSH
16774: LD_INT 114
16776: PUSH
16777: LD_INT 116
16779: PUSH
16780: LD_INT 117
16782: PUSH
16783: LD_INT 118
16785: PUSH
16786: EMPTY
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: PUSH
16805: EMPTY
16806: LIST
16807: LIST
16808: ST_TO_ADDR
16809: GO 17816
16811: LD_INT 15
16813: DOUBLE
16814: EQUAL
16815: IFTRUE 16819
16817: GO 17043
16819: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
16820: LD_ADDR_VAR 0 2
16824: PUSH
16825: LD_INT 1
16827: PUSH
16828: LD_INT 2
16830: PUSH
16831: LD_INT 3
16833: PUSH
16834: LD_INT 4
16836: PUSH
16837: LD_INT 5
16839: PUSH
16840: LD_INT 6
16842: PUSH
16843: LD_INT 7
16845: PUSH
16846: LD_INT 8
16848: PUSH
16849: LD_INT 9
16851: PUSH
16852: LD_INT 10
16854: PUSH
16855: LD_INT 11
16857: PUSH
16858: LD_INT 12
16860: PUSH
16861: LD_INT 13
16863: PUSH
16864: LD_INT 14
16866: PUSH
16867: LD_INT 15
16869: PUSH
16870: LD_INT 16
16872: PUSH
16873: LD_INT 17
16875: PUSH
16876: LD_INT 18
16878: PUSH
16879: LD_INT 19
16881: PUSH
16882: LD_INT 20
16884: PUSH
16885: LD_INT 21
16887: PUSH
16888: LD_INT 22
16890: PUSH
16891: LD_INT 23
16893: PUSH
16894: LD_INT 24
16896: PUSH
16897: LD_INT 25
16899: PUSH
16900: LD_INT 26
16902: PUSH
16903: LD_INT 27
16905: PUSH
16906: LD_INT 28
16908: PUSH
16909: LD_INT 29
16911: PUSH
16912: LD_INT 30
16914: PUSH
16915: LD_INT 31
16917: PUSH
16918: LD_INT 32
16920: PUSH
16921: LD_INT 33
16923: PUSH
16924: LD_INT 34
16926: PUSH
16927: LD_INT 36
16929: PUSH
16930: EMPTY
16931: LIST
16932: LIST
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: LIST
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: PUSH
16967: LD_INT 101
16969: PUSH
16970: LD_INT 102
16972: PUSH
16973: LD_INT 103
16975: PUSH
16976: LD_INT 104
16978: PUSH
16979: LD_INT 105
16981: PUSH
16982: LD_INT 106
16984: PUSH
16985: LD_INT 107
16987: PUSH
16988: LD_INT 108
16990: PUSH
16991: LD_INT 109
16993: PUSH
16994: LD_INT 110
16996: PUSH
16997: LD_INT 111
16999: PUSH
17000: LD_INT 112
17002: PUSH
17003: LD_INT 113
17005: PUSH
17006: LD_INT 114
17008: PUSH
17009: LD_INT 116
17011: PUSH
17012: LD_INT 117
17014: PUSH
17015: LD_INT 118
17017: PUSH
17018: EMPTY
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: ST_TO_ADDR
17041: GO 17816
17043: LD_INT 16
17045: DOUBLE
17046: EQUAL
17047: IFTRUE 17051
17049: GO 17187
17051: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
17052: LD_ADDR_VAR 0 2
17056: PUSH
17057: LD_INT 2
17059: PUSH
17060: LD_INT 4
17062: PUSH
17063: LD_INT 5
17065: PUSH
17066: LD_INT 7
17068: PUSH
17069: LD_INT 11
17071: PUSH
17072: LD_INT 12
17074: PUSH
17075: LD_INT 15
17077: PUSH
17078: LD_INT 16
17080: PUSH
17081: LD_INT 20
17083: PUSH
17084: LD_INT 21
17086: PUSH
17087: LD_INT 22
17089: PUSH
17090: LD_INT 23
17092: PUSH
17093: LD_INT 25
17095: PUSH
17096: LD_INT 26
17098: PUSH
17099: LD_INT 30
17101: PUSH
17102: LD_INT 31
17104: PUSH
17105: LD_INT 32
17107: PUSH
17108: LD_INT 33
17110: PUSH
17111: LD_INT 34
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: LIST
17118: LIST
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: LIST
17127: LIST
17128: LIST
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: LIST
17134: PUSH
17135: LD_INT 101
17137: PUSH
17138: LD_INT 102
17140: PUSH
17141: LD_INT 103
17143: PUSH
17144: LD_INT 106
17146: PUSH
17147: LD_INT 108
17149: PUSH
17150: LD_INT 112
17152: PUSH
17153: LD_INT 113
17155: PUSH
17156: LD_INT 114
17158: PUSH
17159: LD_INT 116
17161: PUSH
17162: LD_INT 117
17164: PUSH
17165: LD_INT 118
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: PUSH
17181: EMPTY
17182: LIST
17183: LIST
17184: ST_TO_ADDR
17185: GO 17816
17187: LD_INT 17
17189: DOUBLE
17190: EQUAL
17191: IFTRUE 17195
17193: GO 17419
17195: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
17196: LD_ADDR_VAR 0 2
17200: PUSH
17201: LD_INT 1
17203: PUSH
17204: LD_INT 2
17206: PUSH
17207: LD_INT 3
17209: PUSH
17210: LD_INT 4
17212: PUSH
17213: LD_INT 5
17215: PUSH
17216: LD_INT 6
17218: PUSH
17219: LD_INT 7
17221: PUSH
17222: LD_INT 8
17224: PUSH
17225: LD_INT 9
17227: PUSH
17228: LD_INT 10
17230: PUSH
17231: LD_INT 11
17233: PUSH
17234: LD_INT 12
17236: PUSH
17237: LD_INT 13
17239: PUSH
17240: LD_INT 14
17242: PUSH
17243: LD_INT 15
17245: PUSH
17246: LD_INT 16
17248: PUSH
17249: LD_INT 17
17251: PUSH
17252: LD_INT 18
17254: PUSH
17255: LD_INT 19
17257: PUSH
17258: LD_INT 20
17260: PUSH
17261: LD_INT 21
17263: PUSH
17264: LD_INT 22
17266: PUSH
17267: LD_INT 23
17269: PUSH
17270: LD_INT 24
17272: PUSH
17273: LD_INT 25
17275: PUSH
17276: LD_INT 26
17278: PUSH
17279: LD_INT 27
17281: PUSH
17282: LD_INT 28
17284: PUSH
17285: LD_INT 29
17287: PUSH
17288: LD_INT 30
17290: PUSH
17291: LD_INT 31
17293: PUSH
17294: LD_INT 32
17296: PUSH
17297: LD_INT 33
17299: PUSH
17300: LD_INT 34
17302: PUSH
17303: LD_INT 36
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: LIST
17314: LIST
17315: LIST
17316: LIST
17317: LIST
17318: LIST
17319: LIST
17320: LIST
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: PUSH
17343: LD_INT 101
17345: PUSH
17346: LD_INT 102
17348: PUSH
17349: LD_INT 103
17351: PUSH
17352: LD_INT 104
17354: PUSH
17355: LD_INT 105
17357: PUSH
17358: LD_INT 106
17360: PUSH
17361: LD_INT 107
17363: PUSH
17364: LD_INT 108
17366: PUSH
17367: LD_INT 109
17369: PUSH
17370: LD_INT 110
17372: PUSH
17373: LD_INT 111
17375: PUSH
17376: LD_INT 112
17378: PUSH
17379: LD_INT 113
17381: PUSH
17382: LD_INT 114
17384: PUSH
17385: LD_INT 116
17387: PUSH
17388: LD_INT 117
17390: PUSH
17391: LD_INT 118
17393: PUSH
17394: EMPTY
17395: LIST
17396: LIST
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: ST_TO_ADDR
17417: GO 17816
17419: LD_INT 18
17421: DOUBLE
17422: EQUAL
17423: IFTRUE 17427
17425: GO 17575
17427: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
17428: LD_ADDR_VAR 0 2
17432: PUSH
17433: LD_INT 2
17435: PUSH
17436: LD_INT 4
17438: PUSH
17439: LD_INT 5
17441: PUSH
17442: LD_INT 7
17444: PUSH
17445: LD_INT 11
17447: PUSH
17448: LD_INT 12
17450: PUSH
17451: LD_INT 15
17453: PUSH
17454: LD_INT 16
17456: PUSH
17457: LD_INT 20
17459: PUSH
17460: LD_INT 21
17462: PUSH
17463: LD_INT 22
17465: PUSH
17466: LD_INT 23
17468: PUSH
17469: LD_INT 25
17471: PUSH
17472: LD_INT 26
17474: PUSH
17475: LD_INT 30
17477: PUSH
17478: LD_INT 31
17480: PUSH
17481: LD_INT 32
17483: PUSH
17484: LD_INT 33
17486: PUSH
17487: LD_INT 34
17489: PUSH
17490: LD_INT 35
17492: PUSH
17493: LD_INT 36
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: LIST
17500: LIST
17501: LIST
17502: LIST
17503: LIST
17504: LIST
17505: LIST
17506: LIST
17507: LIST
17508: LIST
17509: LIST
17510: LIST
17511: LIST
17512: LIST
17513: LIST
17514: LIST
17515: LIST
17516: LIST
17517: LIST
17518: PUSH
17519: LD_INT 101
17521: PUSH
17522: LD_INT 102
17524: PUSH
17525: LD_INT 103
17527: PUSH
17528: LD_INT 106
17530: PUSH
17531: LD_INT 108
17533: PUSH
17534: LD_INT 112
17536: PUSH
17537: LD_INT 113
17539: PUSH
17540: LD_INT 114
17542: PUSH
17543: LD_INT 115
17545: PUSH
17546: LD_INT 116
17548: PUSH
17549: LD_INT 117
17551: PUSH
17552: LD_INT 118
17554: PUSH
17555: EMPTY
17556: LIST
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: PUSH
17569: EMPTY
17570: LIST
17571: LIST
17572: ST_TO_ADDR
17573: GO 17816
17575: LD_INT 19
17577: DOUBLE
17578: EQUAL
17579: IFTRUE 17583
17581: GO 17815
17583: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
17584: LD_ADDR_VAR 0 2
17588: PUSH
17589: LD_INT 1
17591: PUSH
17592: LD_INT 2
17594: PUSH
17595: LD_INT 3
17597: PUSH
17598: LD_INT 4
17600: PUSH
17601: LD_INT 5
17603: PUSH
17604: LD_INT 6
17606: PUSH
17607: LD_INT 7
17609: PUSH
17610: LD_INT 8
17612: PUSH
17613: LD_INT 9
17615: PUSH
17616: LD_INT 10
17618: PUSH
17619: LD_INT 11
17621: PUSH
17622: LD_INT 12
17624: PUSH
17625: LD_INT 13
17627: PUSH
17628: LD_INT 14
17630: PUSH
17631: LD_INT 15
17633: PUSH
17634: LD_INT 16
17636: PUSH
17637: LD_INT 17
17639: PUSH
17640: LD_INT 18
17642: PUSH
17643: LD_INT 19
17645: PUSH
17646: LD_INT 20
17648: PUSH
17649: LD_INT 21
17651: PUSH
17652: LD_INT 22
17654: PUSH
17655: LD_INT 23
17657: PUSH
17658: LD_INT 24
17660: PUSH
17661: LD_INT 25
17663: PUSH
17664: LD_INT 26
17666: PUSH
17667: LD_INT 27
17669: PUSH
17670: LD_INT 28
17672: PUSH
17673: LD_INT 29
17675: PUSH
17676: LD_INT 30
17678: PUSH
17679: LD_INT 31
17681: PUSH
17682: LD_INT 32
17684: PUSH
17685: LD_INT 33
17687: PUSH
17688: LD_INT 34
17690: PUSH
17691: LD_INT 35
17693: PUSH
17694: LD_INT 36
17696: PUSH
17697: EMPTY
17698: LIST
17699: LIST
17700: LIST
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: LIST
17706: LIST
17707: LIST
17708: LIST
17709: LIST
17710: LIST
17711: LIST
17712: LIST
17713: LIST
17714: LIST
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: LIST
17733: LIST
17734: PUSH
17735: LD_INT 101
17737: PUSH
17738: LD_INT 102
17740: PUSH
17741: LD_INT 103
17743: PUSH
17744: LD_INT 104
17746: PUSH
17747: LD_INT 105
17749: PUSH
17750: LD_INT 106
17752: PUSH
17753: LD_INT 107
17755: PUSH
17756: LD_INT 108
17758: PUSH
17759: LD_INT 109
17761: PUSH
17762: LD_INT 110
17764: PUSH
17765: LD_INT 111
17767: PUSH
17768: LD_INT 112
17770: PUSH
17771: LD_INT 113
17773: PUSH
17774: LD_INT 114
17776: PUSH
17777: LD_INT 115
17779: PUSH
17780: LD_INT 116
17782: PUSH
17783: LD_INT 117
17785: PUSH
17786: LD_INT 118
17788: PUSH
17789: EMPTY
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: LIST
17803: LIST
17804: LIST
17805: LIST
17806: LIST
17807: LIST
17808: PUSH
17809: EMPTY
17810: LIST
17811: LIST
17812: ST_TO_ADDR
17813: GO 17816
17815: POP
// end else
17816: GO 18047
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
17818: LD_ADDR_VAR 0 2
17822: PUSH
17823: LD_INT 1
17825: PUSH
17826: LD_INT 2
17828: PUSH
17829: LD_INT 3
17831: PUSH
17832: LD_INT 4
17834: PUSH
17835: LD_INT 5
17837: PUSH
17838: LD_INT 6
17840: PUSH
17841: LD_INT 7
17843: PUSH
17844: LD_INT 8
17846: PUSH
17847: LD_INT 9
17849: PUSH
17850: LD_INT 10
17852: PUSH
17853: LD_INT 11
17855: PUSH
17856: LD_INT 12
17858: PUSH
17859: LD_INT 13
17861: PUSH
17862: LD_INT 14
17864: PUSH
17865: LD_INT 15
17867: PUSH
17868: LD_INT 16
17870: PUSH
17871: LD_INT 17
17873: PUSH
17874: LD_INT 18
17876: PUSH
17877: LD_INT 19
17879: PUSH
17880: LD_INT 20
17882: PUSH
17883: LD_INT 21
17885: PUSH
17886: LD_INT 22
17888: PUSH
17889: LD_INT 23
17891: PUSH
17892: LD_INT 24
17894: PUSH
17895: LD_INT 25
17897: PUSH
17898: LD_INT 26
17900: PUSH
17901: LD_INT 27
17903: PUSH
17904: LD_INT 28
17906: PUSH
17907: LD_INT 29
17909: PUSH
17910: LD_INT 30
17912: PUSH
17913: LD_INT 31
17915: PUSH
17916: LD_INT 32
17918: PUSH
17919: LD_INT 33
17921: PUSH
17922: LD_INT 34
17924: PUSH
17925: LD_INT 35
17927: PUSH
17928: LD_INT 36
17930: PUSH
17931: EMPTY
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: LIST
17937: LIST
17938: LIST
17939: LIST
17940: LIST
17941: LIST
17942: LIST
17943: LIST
17944: LIST
17945: LIST
17946: LIST
17947: LIST
17948: LIST
17949: LIST
17950: LIST
17951: LIST
17952: LIST
17953: LIST
17954: LIST
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: LIST
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: PUSH
17969: LD_INT 101
17971: PUSH
17972: LD_INT 102
17974: PUSH
17975: LD_INT 103
17977: PUSH
17978: LD_INT 104
17980: PUSH
17981: LD_INT 105
17983: PUSH
17984: LD_INT 106
17986: PUSH
17987: LD_INT 107
17989: PUSH
17990: LD_INT 108
17992: PUSH
17993: LD_INT 109
17995: PUSH
17996: LD_INT 110
17998: PUSH
17999: LD_INT 111
18001: PUSH
18002: LD_INT 112
18004: PUSH
18005: LD_INT 113
18007: PUSH
18008: LD_INT 114
18010: PUSH
18011: LD_INT 115
18013: PUSH
18014: LD_INT 116
18016: PUSH
18017: LD_INT 117
18019: PUSH
18020: LD_INT 118
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: PUSH
18043: EMPTY
18044: LIST
18045: LIST
18046: ST_TO_ADDR
// if result then
18047: LD_VAR 0 2
18051: IFFALSE 18837
// begin normal :=  ;
18053: LD_ADDR_VAR 0 5
18057: PUSH
18058: LD_STRING 
18060: ST_TO_ADDR
// hardcore :=  ;
18061: LD_ADDR_VAR 0 6
18065: PUSH
18066: LD_STRING 
18068: ST_TO_ADDR
// active :=  ;
18069: LD_ADDR_VAR 0 7
18073: PUSH
18074: LD_STRING 
18076: ST_TO_ADDR
// for i = 1 to normalCounter do
18077: LD_ADDR_VAR 0 8
18081: PUSH
18082: DOUBLE
18083: LD_INT 1
18085: DEC
18086: ST_TO_ADDR
18087: LD_EXP 34
18091: PUSH
18092: FOR_TO
18093: IFFALSE 18194
// begin tmp := 0 ;
18095: LD_ADDR_VAR 0 3
18099: PUSH
18100: LD_STRING 0
18102: ST_TO_ADDR
// if result [ 1 ] then
18103: LD_VAR 0 2
18107: PUSH
18108: LD_INT 1
18110: ARRAY
18111: IFFALSE 18176
// if result [ 1 ] [ 1 ] = i then
18113: LD_VAR 0 2
18117: PUSH
18118: LD_INT 1
18120: ARRAY
18121: PUSH
18122: LD_INT 1
18124: ARRAY
18125: PUSH
18126: LD_VAR 0 8
18130: EQUAL
18131: IFFALSE 18176
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
18133: LD_ADDR_VAR 0 2
18137: PUSH
18138: LD_VAR 0 2
18142: PPUSH
18143: LD_INT 1
18145: PPUSH
18146: LD_VAR 0 2
18150: PUSH
18151: LD_INT 1
18153: ARRAY
18154: PPUSH
18155: LD_INT 1
18157: PPUSH
18158: CALL_OW 3
18162: PPUSH
18163: CALL_OW 1
18167: ST_TO_ADDR
// tmp := 1 ;
18168: LD_ADDR_VAR 0 3
18172: PUSH
18173: LD_STRING 1
18175: ST_TO_ADDR
// end ; normal := normal & tmp ;
18176: LD_ADDR_VAR 0 5
18180: PUSH
18181: LD_VAR 0 5
18185: PUSH
18186: LD_VAR 0 3
18190: STR
18191: ST_TO_ADDR
// end ;
18192: GO 18092
18194: POP
18195: POP
// for i = 1 to hardcoreCounter do
18196: LD_ADDR_VAR 0 8
18200: PUSH
18201: DOUBLE
18202: LD_INT 1
18204: DEC
18205: ST_TO_ADDR
18206: LD_EXP 35
18210: PUSH
18211: FOR_TO
18212: IFFALSE 18317
// begin tmp := 0 ;
18214: LD_ADDR_VAR 0 3
18218: PUSH
18219: LD_STRING 0
18221: ST_TO_ADDR
// if result [ 2 ] then
18222: LD_VAR 0 2
18226: PUSH
18227: LD_INT 2
18229: ARRAY
18230: IFFALSE 18299
// if result [ 2 ] [ 1 ] = 100 + i then
18232: LD_VAR 0 2
18236: PUSH
18237: LD_INT 2
18239: ARRAY
18240: PUSH
18241: LD_INT 1
18243: ARRAY
18244: PUSH
18245: LD_INT 100
18247: PUSH
18248: LD_VAR 0 8
18252: PLUS
18253: EQUAL
18254: IFFALSE 18299
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
18256: LD_ADDR_VAR 0 2
18260: PUSH
18261: LD_VAR 0 2
18265: PPUSH
18266: LD_INT 2
18268: PPUSH
18269: LD_VAR 0 2
18273: PUSH
18274: LD_INT 2
18276: ARRAY
18277: PPUSH
18278: LD_INT 1
18280: PPUSH
18281: CALL_OW 3
18285: PPUSH
18286: CALL_OW 1
18290: ST_TO_ADDR
// tmp := 1 ;
18291: LD_ADDR_VAR 0 3
18295: PUSH
18296: LD_STRING 1
18298: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
18299: LD_ADDR_VAR 0 6
18303: PUSH
18304: LD_VAR 0 6
18308: PUSH
18309: LD_VAR 0 3
18313: STR
18314: ST_TO_ADDR
// end ;
18315: GO 18211
18317: POP
18318: POP
// if isGameLoad then
18319: LD_VAR 0 1
18323: IFFALSE 18798
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
18325: LD_ADDR_VAR 0 4
18329: PUSH
18330: LD_EXP 38
18334: PUSH
18335: LD_EXP 37
18339: PUSH
18340: LD_EXP 39
18344: PUSH
18345: LD_EXP 36
18349: PUSH
18350: LD_EXP 40
18354: PUSH
18355: LD_EXP 41
18359: PUSH
18360: LD_EXP 42
18364: PUSH
18365: LD_EXP 43
18369: PUSH
18370: LD_EXP 44
18374: PUSH
18375: LD_EXP 45
18379: PUSH
18380: LD_EXP 46
18384: PUSH
18385: LD_EXP 47
18389: PUSH
18390: LD_EXP 48
18394: PUSH
18395: LD_EXP 49
18399: PUSH
18400: LD_EXP 57
18404: PUSH
18405: LD_EXP 58
18409: PUSH
18410: LD_EXP 59
18414: PUSH
18415: LD_EXP 60
18419: PUSH
18420: LD_EXP 62
18424: PUSH
18425: LD_EXP 63
18429: PUSH
18430: LD_EXP 64
18434: PUSH
18435: LD_EXP 67
18439: PUSH
18440: LD_EXP 69
18444: PUSH
18445: LD_EXP 70
18449: PUSH
18450: LD_EXP 71
18454: PUSH
18455: LD_EXP 73
18459: PUSH
18460: LD_EXP 74
18464: PUSH
18465: LD_EXP 77
18469: PUSH
18470: LD_EXP 78
18474: PUSH
18475: LD_EXP 79
18479: PUSH
18480: LD_EXP 80
18484: PUSH
18485: LD_EXP 81
18489: PUSH
18490: LD_EXP 82
18494: PUSH
18495: LD_EXP 83
18499: PUSH
18500: LD_EXP 84
18504: PUSH
18505: LD_EXP 85
18509: PUSH
18510: LD_EXP 50
18514: PUSH
18515: LD_EXP 51
18519: PUSH
18520: LD_EXP 54
18524: PUSH
18525: LD_EXP 55
18529: PUSH
18530: LD_EXP 56
18534: PUSH
18535: LD_EXP 52
18539: PUSH
18540: LD_EXP 53
18544: PUSH
18545: LD_EXP 61
18549: PUSH
18550: LD_EXP 65
18554: PUSH
18555: LD_EXP 66
18559: PUSH
18560: LD_EXP 68
18564: PUSH
18565: LD_EXP 72
18569: PUSH
18570: LD_EXP 75
18574: PUSH
18575: LD_EXP 76
18579: PUSH
18580: LD_EXP 86
18584: PUSH
18585: LD_EXP 87
18589: PUSH
18590: LD_EXP 88
18594: PUSH
18595: LD_EXP 89
18599: PUSH
18600: EMPTY
18601: LIST
18602: LIST
18603: LIST
18604: LIST
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: LIST
18619: LIST
18620: LIST
18621: LIST
18622: LIST
18623: LIST
18624: LIST
18625: LIST
18626: LIST
18627: LIST
18628: LIST
18629: LIST
18630: LIST
18631: LIST
18632: LIST
18633: LIST
18634: LIST
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: ST_TO_ADDR
// tmp :=  ;
18656: LD_ADDR_VAR 0 3
18660: PUSH
18661: LD_STRING 
18663: ST_TO_ADDR
// for i = 1 to normalCounter do
18664: LD_ADDR_VAR 0 8
18668: PUSH
18669: DOUBLE
18670: LD_INT 1
18672: DEC
18673: ST_TO_ADDR
18674: LD_EXP 34
18678: PUSH
18679: FOR_TO
18680: IFFALSE 18716
// begin if flags [ i ] then
18682: LD_VAR 0 4
18686: PUSH
18687: LD_VAR 0 8
18691: ARRAY
18692: IFFALSE 18714
// tmp := tmp & i & ; ;
18694: LD_ADDR_VAR 0 3
18698: PUSH
18699: LD_VAR 0 3
18703: PUSH
18704: LD_VAR 0 8
18708: STR
18709: PUSH
18710: LD_STRING ;
18712: STR
18713: ST_TO_ADDR
// end ;
18714: GO 18679
18716: POP
18717: POP
// for i = 1 to hardcoreCounter do
18718: LD_ADDR_VAR 0 8
18722: PUSH
18723: DOUBLE
18724: LD_INT 1
18726: DEC
18727: ST_TO_ADDR
18728: LD_EXP 35
18732: PUSH
18733: FOR_TO
18734: IFFALSE 18780
// begin if flags [ normalCounter + i ] then
18736: LD_VAR 0 4
18740: PUSH
18741: LD_EXP 34
18745: PUSH
18746: LD_VAR 0 8
18750: PLUS
18751: ARRAY
18752: IFFALSE 18778
// tmp := tmp & ( 100 + i ) & ; ;
18754: LD_ADDR_VAR 0 3
18758: PUSH
18759: LD_VAR 0 3
18763: PUSH
18764: LD_INT 100
18766: PUSH
18767: LD_VAR 0 8
18771: PLUS
18772: STR
18773: PUSH
18774: LD_STRING ;
18776: STR
18777: ST_TO_ADDR
// end ;
18778: GO 18733
18780: POP
18781: POP
// if tmp then
18782: LD_VAR 0 3
18786: IFFALSE 18798
// active := tmp ;
18788: LD_ADDR_VAR 0 7
18792: PUSH
18793: LD_VAR 0 3
18797: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
18798: LD_STRING getStreamItemsFromMission("
18800: PUSH
18801: LD_VAR 0 5
18805: STR
18806: PUSH
18807: LD_STRING ","
18809: STR
18810: PUSH
18811: LD_VAR 0 6
18815: STR
18816: PUSH
18817: LD_STRING ","
18819: STR
18820: PUSH
18821: LD_VAR 0 7
18825: STR
18826: PUSH
18827: LD_STRING ")
18829: STR
18830: PPUSH
18831: CALL_OW 559
// end else
18835: GO 18844
// ToLua ( getStreamItemsFromMission("","","") ) ;
18837: LD_STRING getStreamItemsFromMission("","","")
18839: PPUSH
18840: CALL_OW 559
// end ;
18844: LD_VAR 0 2
18848: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
18849: LD_EXP 33
18853: PUSH
18854: LD_EXP 38
18858: AND
18859: IFFALSE 18983
18861: GO 18863
18863: DISABLE
18864: LD_INT 0
18866: PPUSH
18867: PPUSH
// begin enable ;
18868: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
18869: LD_ADDR_VAR 0 2
18873: PUSH
18874: LD_INT 22
18876: PUSH
18877: LD_OWVAR 2
18881: PUSH
18882: EMPTY
18883: LIST
18884: LIST
18885: PUSH
18886: LD_INT 2
18888: PUSH
18889: LD_INT 34
18891: PUSH
18892: LD_INT 7
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: PUSH
18899: LD_INT 34
18901: PUSH
18902: LD_INT 45
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: PUSH
18909: LD_INT 34
18911: PUSH
18912: LD_INT 28
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: PUSH
18919: LD_INT 34
18921: PUSH
18922: LD_INT 47
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: PUSH
18936: EMPTY
18937: LIST
18938: LIST
18939: PPUSH
18940: CALL_OW 69
18944: ST_TO_ADDR
// if not tmp then
18945: LD_VAR 0 2
18949: NOT
18950: IFFALSE 18954
// exit ;
18952: GO 18983
// for i in tmp do
18954: LD_ADDR_VAR 0 1
18958: PUSH
18959: LD_VAR 0 2
18963: PUSH
18964: FOR_IN
18965: IFFALSE 18981
// begin SetLives ( i , 0 ) ;
18967: LD_VAR 0 1
18971: PPUSH
18972: LD_INT 0
18974: PPUSH
18975: CALL_OW 234
// end ;
18979: GO 18964
18981: POP
18982: POP
// end ;
18983: PPOPN 2
18985: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
18986: LD_EXP 33
18990: PUSH
18991: LD_EXP 39
18995: AND
18996: IFFALSE 19080
18998: GO 19000
19000: DISABLE
19001: LD_INT 0
19003: PPUSH
19004: PPUSH
// begin enable ;
19005: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
19006: LD_ADDR_VAR 0 2
19010: PUSH
19011: LD_INT 22
19013: PUSH
19014: LD_OWVAR 2
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: PUSH
19023: LD_INT 32
19025: PUSH
19026: LD_INT 3
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: PPUSH
19037: CALL_OW 69
19041: ST_TO_ADDR
// if not tmp then
19042: LD_VAR 0 2
19046: NOT
19047: IFFALSE 19051
// exit ;
19049: GO 19080
// for i in tmp do
19051: LD_ADDR_VAR 0 1
19055: PUSH
19056: LD_VAR 0 2
19060: PUSH
19061: FOR_IN
19062: IFFALSE 19078
// begin SetLives ( i , 0 ) ;
19064: LD_VAR 0 1
19068: PPUSH
19069: LD_INT 0
19071: PPUSH
19072: CALL_OW 234
// end ;
19076: GO 19061
19078: POP
19079: POP
// end ;
19080: PPOPN 2
19082: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
19083: LD_EXP 33
19087: PUSH
19088: LD_EXP 36
19092: AND
19093: IFFALSE 19186
19095: GO 19097
19097: DISABLE
19098: LD_INT 0
19100: PPUSH
// begin enable ;
19101: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
19102: LD_ADDR_VAR 0 1
19106: PUSH
19107: LD_INT 22
19109: PUSH
19110: LD_OWVAR 2
19114: PUSH
19115: EMPTY
19116: LIST
19117: LIST
19118: PUSH
19119: LD_INT 2
19121: PUSH
19122: LD_INT 25
19124: PUSH
19125: LD_INT 5
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: PUSH
19132: LD_INT 25
19134: PUSH
19135: LD_INT 9
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: PUSH
19142: LD_INT 25
19144: PUSH
19145: LD_INT 8
19147: PUSH
19148: EMPTY
19149: LIST
19150: LIST
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: PUSH
19158: EMPTY
19159: LIST
19160: LIST
19161: PPUSH
19162: CALL_OW 69
19166: PUSH
19167: FOR_IN
19168: IFFALSE 19184
// begin SetClass ( i , 1 ) ;
19170: LD_VAR 0 1
19174: PPUSH
19175: LD_INT 1
19177: PPUSH
19178: CALL_OW 336
// end ;
19182: GO 19167
19184: POP
19185: POP
// end ;
19186: PPOPN 1
19188: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
19189: LD_EXP 33
19193: PUSH
19194: LD_EXP 37
19198: AND
19199: PUSH
19200: LD_OWVAR 65
19204: PUSH
19205: LD_INT 7
19207: LESS
19208: AND
19209: IFFALSE 19223
19211: GO 19213
19213: DISABLE
// begin enable ;
19214: ENABLE
// game_speed := 7 ;
19215: LD_ADDR_OWVAR 65
19219: PUSH
19220: LD_INT 7
19222: ST_TO_ADDR
// end ;
19223: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
19224: LD_EXP 33
19228: PUSH
19229: LD_EXP 40
19233: AND
19234: IFFALSE 19436
19236: GO 19238
19238: DISABLE
19239: LD_INT 0
19241: PPUSH
19242: PPUSH
19243: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19244: LD_ADDR_VAR 0 3
19248: PUSH
19249: LD_INT 81
19251: PUSH
19252: LD_OWVAR 2
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PUSH
19261: LD_INT 21
19263: PUSH
19264: LD_INT 1
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: PPUSH
19275: CALL_OW 69
19279: ST_TO_ADDR
// if not tmp then
19280: LD_VAR 0 3
19284: NOT
19285: IFFALSE 19289
// exit ;
19287: GO 19436
// if tmp > 5 then
19289: LD_VAR 0 3
19293: PUSH
19294: LD_INT 5
19296: GREATER
19297: IFFALSE 19309
// k := 5 else
19299: LD_ADDR_VAR 0 2
19303: PUSH
19304: LD_INT 5
19306: ST_TO_ADDR
19307: GO 19319
// k := tmp ;
19309: LD_ADDR_VAR 0 2
19313: PUSH
19314: LD_VAR 0 3
19318: ST_TO_ADDR
// for i := 1 to k do
19319: LD_ADDR_VAR 0 1
19323: PUSH
19324: DOUBLE
19325: LD_INT 1
19327: DEC
19328: ST_TO_ADDR
19329: LD_VAR 0 2
19333: PUSH
19334: FOR_TO
19335: IFFALSE 19434
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
19337: LD_VAR 0 3
19341: PUSH
19342: LD_VAR 0 1
19346: ARRAY
19347: PPUSH
19348: LD_VAR 0 1
19352: PUSH
19353: LD_INT 4
19355: MOD
19356: PUSH
19357: LD_INT 1
19359: PLUS
19360: PPUSH
19361: CALL_OW 259
19365: PUSH
19366: LD_INT 10
19368: LESS
19369: IFFALSE 19432
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
19371: LD_VAR 0 3
19375: PUSH
19376: LD_VAR 0 1
19380: ARRAY
19381: PPUSH
19382: LD_VAR 0 1
19386: PUSH
19387: LD_INT 4
19389: MOD
19390: PUSH
19391: LD_INT 1
19393: PLUS
19394: PPUSH
19395: LD_VAR 0 3
19399: PUSH
19400: LD_VAR 0 1
19404: ARRAY
19405: PPUSH
19406: LD_VAR 0 1
19410: PUSH
19411: LD_INT 4
19413: MOD
19414: PUSH
19415: LD_INT 1
19417: PLUS
19418: PPUSH
19419: CALL_OW 259
19423: PUSH
19424: LD_INT 1
19426: PLUS
19427: PPUSH
19428: CALL_OW 237
19432: GO 19334
19434: POP
19435: POP
// end ;
19436: PPOPN 3
19438: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
19439: LD_EXP 33
19443: PUSH
19444: LD_EXP 41
19448: AND
19449: IFFALSE 19469
19451: GO 19453
19453: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
19454: LD_INT 4
19456: PPUSH
19457: LD_OWVAR 2
19461: PPUSH
19462: LD_INT 0
19464: PPUSH
19465: CALL_OW 324
19469: END
// every 0 0$1 trigger StreamModeActive and sShovel do
19470: LD_EXP 33
19474: PUSH
19475: LD_EXP 70
19479: AND
19480: IFFALSE 19500
19482: GO 19484
19484: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
19485: LD_INT 19
19487: PPUSH
19488: LD_OWVAR 2
19492: PPUSH
19493: LD_INT 0
19495: PPUSH
19496: CALL_OW 324
19500: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
19501: LD_EXP 33
19505: PUSH
19506: LD_EXP 42
19510: AND
19511: IFFALSE 19613
19513: GO 19515
19515: DISABLE
19516: LD_INT 0
19518: PPUSH
19519: PPUSH
// begin enable ;
19520: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
19521: LD_ADDR_VAR 0 2
19525: PUSH
19526: LD_INT 22
19528: PUSH
19529: LD_OWVAR 2
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: PUSH
19538: LD_INT 2
19540: PUSH
19541: LD_INT 34
19543: PUSH
19544: LD_INT 11
19546: PUSH
19547: EMPTY
19548: LIST
19549: LIST
19550: PUSH
19551: LD_INT 34
19553: PUSH
19554: LD_INT 30
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: PUSH
19561: EMPTY
19562: LIST
19563: LIST
19564: LIST
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: PPUSH
19570: CALL_OW 69
19574: ST_TO_ADDR
// if not tmp then
19575: LD_VAR 0 2
19579: NOT
19580: IFFALSE 19584
// exit ;
19582: GO 19613
// for i in tmp do
19584: LD_ADDR_VAR 0 1
19588: PUSH
19589: LD_VAR 0 2
19593: PUSH
19594: FOR_IN
19595: IFFALSE 19611
// begin SetLives ( i , 0 ) ;
19597: LD_VAR 0 1
19601: PPUSH
19602: LD_INT 0
19604: PPUSH
19605: CALL_OW 234
// end ;
19609: GO 19594
19611: POP
19612: POP
// end ;
19613: PPOPN 2
19615: END
// every 0 0$1 trigger StreamModeActive and sBunker do
19616: LD_EXP 33
19620: PUSH
19621: LD_EXP 43
19625: AND
19626: IFFALSE 19646
19628: GO 19630
19630: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
19631: LD_INT 32
19633: PPUSH
19634: LD_OWVAR 2
19638: PPUSH
19639: LD_INT 0
19641: PPUSH
19642: CALL_OW 324
19646: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
19647: LD_EXP 33
19651: PUSH
19652: LD_EXP 44
19656: AND
19657: IFFALSE 19838
19659: GO 19661
19661: DISABLE
19662: LD_INT 0
19664: PPUSH
19665: PPUSH
19666: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
19667: LD_ADDR_VAR 0 2
19671: PUSH
19672: LD_INT 22
19674: PUSH
19675: LD_OWVAR 2
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: PUSH
19684: LD_INT 33
19686: PUSH
19687: LD_INT 3
19689: PUSH
19690: EMPTY
19691: LIST
19692: LIST
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: PPUSH
19698: CALL_OW 69
19702: ST_TO_ADDR
// if not tmp then
19703: LD_VAR 0 2
19707: NOT
19708: IFFALSE 19712
// exit ;
19710: GO 19838
// side := 0 ;
19712: LD_ADDR_VAR 0 3
19716: PUSH
19717: LD_INT 0
19719: ST_TO_ADDR
// for i := 1 to 8 do
19720: LD_ADDR_VAR 0 1
19724: PUSH
19725: DOUBLE
19726: LD_INT 1
19728: DEC
19729: ST_TO_ADDR
19730: LD_INT 8
19732: PUSH
19733: FOR_TO
19734: IFFALSE 19782
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
19736: LD_OWVAR 2
19740: PUSH
19741: LD_VAR 0 1
19745: NONEQUAL
19746: PUSH
19747: LD_OWVAR 2
19751: PPUSH
19752: LD_VAR 0 1
19756: PPUSH
19757: CALL_OW 81
19761: PUSH
19762: LD_INT 2
19764: EQUAL
19765: AND
19766: IFFALSE 19780
// begin side := i ;
19768: LD_ADDR_VAR 0 3
19772: PUSH
19773: LD_VAR 0 1
19777: ST_TO_ADDR
// break ;
19778: GO 19782
// end ;
19780: GO 19733
19782: POP
19783: POP
// if not side then
19784: LD_VAR 0 3
19788: NOT
19789: IFFALSE 19793
// exit ;
19791: GO 19838
// for i := 1 to tmp do
19793: LD_ADDR_VAR 0 1
19797: PUSH
19798: DOUBLE
19799: LD_INT 1
19801: DEC
19802: ST_TO_ADDR
19803: LD_VAR 0 2
19807: PUSH
19808: FOR_TO
19809: IFFALSE 19836
// if Prob ( 60 ) then
19811: LD_INT 60
19813: PPUSH
19814: CALL_OW 13
19818: IFFALSE 19834
// SetSide ( i , side ) ;
19820: LD_VAR 0 1
19824: PPUSH
19825: LD_VAR 0 3
19829: PPUSH
19830: CALL_OW 235
19834: GO 19808
19836: POP
19837: POP
// end ;
19838: PPOPN 3
19840: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
19841: LD_EXP 33
19845: PUSH
19846: LD_EXP 46
19850: AND
19851: IFFALSE 19970
19853: GO 19855
19855: DISABLE
19856: LD_INT 0
19858: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
19859: LD_ADDR_VAR 0 1
19863: PUSH
19864: LD_INT 22
19866: PUSH
19867: LD_OWVAR 2
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: PUSH
19876: LD_INT 21
19878: PUSH
19879: LD_INT 1
19881: PUSH
19882: EMPTY
19883: LIST
19884: LIST
19885: PUSH
19886: LD_INT 3
19888: PUSH
19889: LD_INT 23
19891: PUSH
19892: LD_INT 0
19894: PUSH
19895: EMPTY
19896: LIST
19897: LIST
19898: PUSH
19899: EMPTY
19900: LIST
19901: LIST
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: LIST
19907: PPUSH
19908: CALL_OW 69
19912: PUSH
19913: FOR_IN
19914: IFFALSE 19968
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
19916: LD_VAR 0 1
19920: PPUSH
19921: CALL_OW 257
19925: PUSH
19926: LD_INT 1
19928: PUSH
19929: LD_INT 2
19931: PUSH
19932: LD_INT 3
19934: PUSH
19935: LD_INT 4
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: IN
19944: IFFALSE 19966
// SetClass ( un , rand ( 1 , 4 ) ) ;
19946: LD_VAR 0 1
19950: PPUSH
19951: LD_INT 1
19953: PPUSH
19954: LD_INT 4
19956: PPUSH
19957: CALL_OW 12
19961: PPUSH
19962: CALL_OW 336
19966: GO 19913
19968: POP
19969: POP
// end ;
19970: PPOPN 1
19972: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
19973: LD_EXP 33
19977: PUSH
19978: LD_EXP 45
19982: AND
19983: IFFALSE 20062
19985: GO 19987
19987: DISABLE
19988: LD_INT 0
19990: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19991: LD_ADDR_VAR 0 1
19995: PUSH
19996: LD_INT 22
19998: PUSH
19999: LD_OWVAR 2
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: PUSH
20008: LD_INT 21
20010: PUSH
20011: LD_INT 3
20013: PUSH
20014: EMPTY
20015: LIST
20016: LIST
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: PPUSH
20022: CALL_OW 69
20026: ST_TO_ADDR
// if not tmp then
20027: LD_VAR 0 1
20031: NOT
20032: IFFALSE 20036
// exit ;
20034: GO 20062
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
20036: LD_VAR 0 1
20040: PUSH
20041: LD_INT 1
20043: PPUSH
20044: LD_VAR 0 1
20048: PPUSH
20049: CALL_OW 12
20053: ARRAY
20054: PPUSH
20055: LD_INT 100
20057: PPUSH
20058: CALL_OW 234
// end ;
20062: PPOPN 1
20064: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
20065: LD_EXP 33
20069: PUSH
20070: LD_EXP 47
20074: AND
20075: IFFALSE 20173
20077: GO 20079
20079: DISABLE
20080: LD_INT 0
20082: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20083: LD_ADDR_VAR 0 1
20087: PUSH
20088: LD_INT 22
20090: PUSH
20091: LD_OWVAR 2
20095: PUSH
20096: EMPTY
20097: LIST
20098: LIST
20099: PUSH
20100: LD_INT 21
20102: PUSH
20103: LD_INT 1
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: PUSH
20110: EMPTY
20111: LIST
20112: LIST
20113: PPUSH
20114: CALL_OW 69
20118: ST_TO_ADDR
// if not tmp then
20119: LD_VAR 0 1
20123: NOT
20124: IFFALSE 20128
// exit ;
20126: GO 20173
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
20128: LD_VAR 0 1
20132: PUSH
20133: LD_INT 1
20135: PPUSH
20136: LD_VAR 0 1
20140: PPUSH
20141: CALL_OW 12
20145: ARRAY
20146: PPUSH
20147: LD_INT 1
20149: PPUSH
20150: LD_INT 4
20152: PPUSH
20153: CALL_OW 12
20157: PPUSH
20158: LD_INT 3000
20160: PPUSH
20161: LD_INT 9000
20163: PPUSH
20164: CALL_OW 12
20168: PPUSH
20169: CALL_OW 492
// end ;
20173: PPOPN 1
20175: END
// every 0 0$1 trigger StreamModeActive and sDepot do
20176: LD_EXP 33
20180: PUSH
20181: LD_EXP 48
20185: AND
20186: IFFALSE 20206
20188: GO 20190
20190: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
20191: LD_INT 1
20193: PPUSH
20194: LD_OWVAR 2
20198: PPUSH
20199: LD_INT 0
20201: PPUSH
20202: CALL_OW 324
20206: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
20207: LD_EXP 33
20211: PUSH
20212: LD_EXP 49
20216: AND
20217: IFFALSE 20300
20219: GO 20221
20221: DISABLE
20222: LD_INT 0
20224: PPUSH
20225: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20226: LD_ADDR_VAR 0 2
20230: PUSH
20231: LD_INT 22
20233: PUSH
20234: LD_OWVAR 2
20238: PUSH
20239: EMPTY
20240: LIST
20241: LIST
20242: PUSH
20243: LD_INT 21
20245: PUSH
20246: LD_INT 3
20248: PUSH
20249: EMPTY
20250: LIST
20251: LIST
20252: PUSH
20253: EMPTY
20254: LIST
20255: LIST
20256: PPUSH
20257: CALL_OW 69
20261: ST_TO_ADDR
// if not tmp then
20262: LD_VAR 0 2
20266: NOT
20267: IFFALSE 20271
// exit ;
20269: GO 20300
// for i in tmp do
20271: LD_ADDR_VAR 0 1
20275: PUSH
20276: LD_VAR 0 2
20280: PUSH
20281: FOR_IN
20282: IFFALSE 20298
// SetBLevel ( i , 10 ) ;
20284: LD_VAR 0 1
20288: PPUSH
20289: LD_INT 10
20291: PPUSH
20292: CALL_OW 241
20296: GO 20281
20298: POP
20299: POP
// end ;
20300: PPOPN 2
20302: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
20303: LD_EXP 33
20307: PUSH
20308: LD_EXP 50
20312: AND
20313: IFFALSE 20424
20315: GO 20317
20317: DISABLE
20318: LD_INT 0
20320: PPUSH
20321: PPUSH
20322: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20323: LD_ADDR_VAR 0 3
20327: PUSH
20328: LD_INT 22
20330: PUSH
20331: LD_OWVAR 2
20335: PUSH
20336: EMPTY
20337: LIST
20338: LIST
20339: PUSH
20340: LD_INT 25
20342: PUSH
20343: LD_INT 1
20345: PUSH
20346: EMPTY
20347: LIST
20348: LIST
20349: PUSH
20350: EMPTY
20351: LIST
20352: LIST
20353: PPUSH
20354: CALL_OW 69
20358: ST_TO_ADDR
// if not tmp then
20359: LD_VAR 0 3
20363: NOT
20364: IFFALSE 20368
// exit ;
20366: GO 20424
// un := tmp [ rand ( 1 , tmp ) ] ;
20368: LD_ADDR_VAR 0 2
20372: PUSH
20373: LD_VAR 0 3
20377: PUSH
20378: LD_INT 1
20380: PPUSH
20381: LD_VAR 0 3
20385: PPUSH
20386: CALL_OW 12
20390: ARRAY
20391: ST_TO_ADDR
// if Crawls ( un ) then
20392: LD_VAR 0 2
20396: PPUSH
20397: CALL_OW 318
20401: IFFALSE 20412
// ComWalk ( un ) ;
20403: LD_VAR 0 2
20407: PPUSH
20408: CALL_OW 138
// SetClass ( un , class_sniper ) ;
20412: LD_VAR 0 2
20416: PPUSH
20417: LD_INT 5
20419: PPUSH
20420: CALL_OW 336
// end ;
20424: PPOPN 3
20426: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
20427: LD_EXP 33
20431: PUSH
20432: LD_EXP 51
20436: AND
20437: PUSH
20438: LD_OWVAR 67
20442: PUSH
20443: LD_INT 4
20445: LESS
20446: AND
20447: IFFALSE 20466
20449: GO 20451
20451: DISABLE
// begin Difficulty := Difficulty + 1 ;
20452: LD_ADDR_OWVAR 67
20456: PUSH
20457: LD_OWVAR 67
20461: PUSH
20462: LD_INT 1
20464: PLUS
20465: ST_TO_ADDR
// end ;
20466: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
20467: LD_EXP 33
20471: PUSH
20472: LD_EXP 52
20476: AND
20477: IFFALSE 20580
20479: GO 20481
20481: DISABLE
20482: LD_INT 0
20484: PPUSH
// begin for i := 1 to 5 do
20485: LD_ADDR_VAR 0 1
20489: PUSH
20490: DOUBLE
20491: LD_INT 1
20493: DEC
20494: ST_TO_ADDR
20495: LD_INT 5
20497: PUSH
20498: FOR_TO
20499: IFFALSE 20578
// begin uc_nation := nation_nature ;
20501: LD_ADDR_OWVAR 21
20505: PUSH
20506: LD_INT 0
20508: ST_TO_ADDR
// uc_side := 0 ;
20509: LD_ADDR_OWVAR 20
20513: PUSH
20514: LD_INT 0
20516: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20517: LD_ADDR_OWVAR 29
20521: PUSH
20522: LD_INT 12
20524: PUSH
20525: LD_INT 12
20527: PUSH
20528: EMPTY
20529: LIST
20530: LIST
20531: ST_TO_ADDR
// hc_agressivity := 20 ;
20532: LD_ADDR_OWVAR 35
20536: PUSH
20537: LD_INT 20
20539: ST_TO_ADDR
// hc_class := class_tiger ;
20540: LD_ADDR_OWVAR 28
20544: PUSH
20545: LD_INT 14
20547: ST_TO_ADDR
// hc_gallery :=  ;
20548: LD_ADDR_OWVAR 33
20552: PUSH
20553: LD_STRING 
20555: ST_TO_ADDR
// hc_name :=  ;
20556: LD_ADDR_OWVAR 26
20560: PUSH
20561: LD_STRING 
20563: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
20564: CALL_OW 44
20568: PPUSH
20569: LD_INT 0
20571: PPUSH
20572: CALL_OW 51
// end ;
20576: GO 20498
20578: POP
20579: POP
// end ;
20580: PPOPN 1
20582: END
// every 0 0$1 trigger StreamModeActive and sBomb do
20583: LD_EXP 33
20587: PUSH
20588: LD_EXP 53
20592: AND
20593: IFFALSE 20602
20595: GO 20597
20597: DISABLE
// StreamSibBomb ;
20598: CALL 20603 0 0
20602: END
// export function StreamSibBomb ; var i , x , y ; begin
20603: LD_INT 0
20605: PPUSH
20606: PPUSH
20607: PPUSH
20608: PPUSH
// result := false ;
20609: LD_ADDR_VAR 0 1
20613: PUSH
20614: LD_INT 0
20616: ST_TO_ADDR
// for i := 1 to 16 do
20617: LD_ADDR_VAR 0 2
20621: PUSH
20622: DOUBLE
20623: LD_INT 1
20625: DEC
20626: ST_TO_ADDR
20627: LD_INT 16
20629: PUSH
20630: FOR_TO
20631: IFFALSE 20830
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20633: LD_ADDR_VAR 0 3
20637: PUSH
20638: LD_INT 10
20640: PUSH
20641: LD_INT 20
20643: PUSH
20644: LD_INT 30
20646: PUSH
20647: LD_INT 40
20649: PUSH
20650: LD_INT 50
20652: PUSH
20653: LD_INT 60
20655: PUSH
20656: LD_INT 70
20658: PUSH
20659: LD_INT 80
20661: PUSH
20662: LD_INT 90
20664: PUSH
20665: LD_INT 100
20667: PUSH
20668: LD_INT 110
20670: PUSH
20671: LD_INT 120
20673: PUSH
20674: LD_INT 130
20676: PUSH
20677: LD_INT 140
20679: PUSH
20680: LD_INT 150
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: PUSH
20700: LD_INT 1
20702: PPUSH
20703: LD_INT 15
20705: PPUSH
20706: CALL_OW 12
20710: ARRAY
20711: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20712: LD_ADDR_VAR 0 4
20716: PUSH
20717: LD_INT 10
20719: PUSH
20720: LD_INT 20
20722: PUSH
20723: LD_INT 30
20725: PUSH
20726: LD_INT 40
20728: PUSH
20729: LD_INT 50
20731: PUSH
20732: LD_INT 60
20734: PUSH
20735: LD_INT 70
20737: PUSH
20738: LD_INT 80
20740: PUSH
20741: LD_INT 90
20743: PUSH
20744: LD_INT 100
20746: PUSH
20747: LD_INT 110
20749: PUSH
20750: LD_INT 120
20752: PUSH
20753: LD_INT 130
20755: PUSH
20756: LD_INT 140
20758: PUSH
20759: LD_INT 150
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: PUSH
20779: LD_INT 1
20781: PPUSH
20782: LD_INT 15
20784: PPUSH
20785: CALL_OW 12
20789: ARRAY
20790: ST_TO_ADDR
// if ValidHex ( x , y ) then
20791: LD_VAR 0 3
20795: PPUSH
20796: LD_VAR 0 4
20800: PPUSH
20801: CALL_OW 488
20805: IFFALSE 20828
// begin result := [ x , y ] ;
20807: LD_ADDR_VAR 0 1
20811: PUSH
20812: LD_VAR 0 3
20816: PUSH
20817: LD_VAR 0 4
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: ST_TO_ADDR
// break ;
20826: GO 20830
// end ; end ;
20828: GO 20630
20830: POP
20831: POP
// if result then
20832: LD_VAR 0 1
20836: IFFALSE 20896
// begin ToLua ( playSibBomb() ) ;
20838: LD_STRING playSibBomb()
20840: PPUSH
20841: CALL_OW 559
// wait ( 0 0$14 ) ;
20845: LD_INT 490
20847: PPUSH
20848: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
20852: LD_VAR 0 1
20856: PUSH
20857: LD_INT 1
20859: ARRAY
20860: PPUSH
20861: LD_VAR 0 1
20865: PUSH
20866: LD_INT 2
20868: ARRAY
20869: PPUSH
20870: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
20874: LD_VAR 0 1
20878: PUSH
20879: LD_INT 1
20881: ARRAY
20882: PPUSH
20883: LD_VAR 0 1
20887: PUSH
20888: LD_INT 2
20890: ARRAY
20891: PPUSH
20892: CALL_OW 429
// end ; end ;
20896: LD_VAR 0 1
20900: RET
// every 0 0$1 trigger StreamModeActive and sReset do
20901: LD_EXP 33
20905: PUSH
20906: LD_EXP 55
20910: AND
20911: IFFALSE 20923
20913: GO 20915
20915: DISABLE
// YouLost (  ) ;
20916: LD_STRING 
20918: PPUSH
20919: CALL_OW 104
20923: END
// every 0 0$1 trigger StreamModeActive and sFog do
20924: LD_EXP 33
20928: PUSH
20929: LD_EXP 54
20933: AND
20934: IFFALSE 20948
20936: GO 20938
20938: DISABLE
// FogOff ( your_side ) ;
20939: LD_OWVAR 2
20943: PPUSH
20944: CALL_OW 344
20948: END
// every 0 0$1 trigger StreamModeActive and sSun do
20949: LD_EXP 33
20953: PUSH
20954: LD_EXP 56
20958: AND
20959: IFFALSE 20987
20961: GO 20963
20963: DISABLE
// begin solar_recharge_percent := 0 ;
20964: LD_ADDR_OWVAR 79
20968: PUSH
20969: LD_INT 0
20971: ST_TO_ADDR
// wait ( 5 5$00 ) ;
20972: LD_INT 10500
20974: PPUSH
20975: CALL_OW 67
// solar_recharge_percent := 100 ;
20979: LD_ADDR_OWVAR 79
20983: PUSH
20984: LD_INT 100
20986: ST_TO_ADDR
// end ;
20987: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
20988: LD_EXP 33
20992: PUSH
20993: LD_EXP 57
20997: AND
20998: IFFALSE 21237
21000: GO 21002
21002: DISABLE
21003: LD_INT 0
21005: PPUSH
21006: PPUSH
21007: PPUSH
// begin tmp := [ ] ;
21008: LD_ADDR_VAR 0 3
21012: PUSH
21013: EMPTY
21014: ST_TO_ADDR
// for i := 1 to 6 do
21015: LD_ADDR_VAR 0 1
21019: PUSH
21020: DOUBLE
21021: LD_INT 1
21023: DEC
21024: ST_TO_ADDR
21025: LD_INT 6
21027: PUSH
21028: FOR_TO
21029: IFFALSE 21134
// begin uc_nation := nation_nature ;
21031: LD_ADDR_OWVAR 21
21035: PUSH
21036: LD_INT 0
21038: ST_TO_ADDR
// uc_side := 0 ;
21039: LD_ADDR_OWVAR 20
21043: PUSH
21044: LD_INT 0
21046: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21047: LD_ADDR_OWVAR 29
21051: PUSH
21052: LD_INT 12
21054: PUSH
21055: LD_INT 12
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: ST_TO_ADDR
// hc_agressivity := 20 ;
21062: LD_ADDR_OWVAR 35
21066: PUSH
21067: LD_INT 20
21069: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
21070: LD_ADDR_OWVAR 28
21074: PUSH
21075: LD_INT 17
21077: ST_TO_ADDR
// hc_gallery :=  ;
21078: LD_ADDR_OWVAR 33
21082: PUSH
21083: LD_STRING 
21085: ST_TO_ADDR
// hc_name :=  ;
21086: LD_ADDR_OWVAR 26
21090: PUSH
21091: LD_STRING 
21093: ST_TO_ADDR
// un := CreateHuman ;
21094: LD_ADDR_VAR 0 2
21098: PUSH
21099: CALL_OW 44
21103: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
21104: LD_VAR 0 2
21108: PPUSH
21109: LD_INT 1
21111: PPUSH
21112: CALL_OW 51
// tmp := tmp ^ un ;
21116: LD_ADDR_VAR 0 3
21120: PUSH
21121: LD_VAR 0 3
21125: PUSH
21126: LD_VAR 0 2
21130: ADD
21131: ST_TO_ADDR
// end ;
21132: GO 21028
21134: POP
21135: POP
// repeat wait ( 0 0$1 ) ;
21136: LD_INT 35
21138: PPUSH
21139: CALL_OW 67
// for un in tmp do
21143: LD_ADDR_VAR 0 2
21147: PUSH
21148: LD_VAR 0 3
21152: PUSH
21153: FOR_IN
21154: IFFALSE 21228
// begin if IsDead ( un ) then
21156: LD_VAR 0 2
21160: PPUSH
21161: CALL_OW 301
21165: IFFALSE 21185
// begin tmp := tmp diff un ;
21167: LD_ADDR_VAR 0 3
21171: PUSH
21172: LD_VAR 0 3
21176: PUSH
21177: LD_VAR 0 2
21181: DIFF
21182: ST_TO_ADDR
// continue ;
21183: GO 21153
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
21185: LD_VAR 0 2
21189: PPUSH
21190: LD_INT 3
21192: PUSH
21193: LD_INT 22
21195: PUSH
21196: LD_INT 0
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: PPUSH
21207: CALL_OW 69
21211: PPUSH
21212: LD_VAR 0 2
21216: PPUSH
21217: CALL_OW 74
21221: PPUSH
21222: CALL_OW 115
// end ;
21226: GO 21153
21228: POP
21229: POP
// until not tmp ;
21230: LD_VAR 0 3
21234: NOT
21235: IFFALSE 21136
// end ;
21237: PPOPN 3
21239: END
// every 0 0$1 trigger StreamModeActive and sTroll do
21240: LD_EXP 33
21244: PUSH
21245: LD_EXP 58
21249: AND
21250: IFFALSE 21304
21252: GO 21254
21254: DISABLE
// begin ToLua ( displayTroll(); ) ;
21255: LD_STRING displayTroll();
21257: PPUSH
21258: CALL_OW 559
// wait ( 3 3$00 ) ;
21262: LD_INT 6300
21264: PPUSH
21265: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21269: LD_STRING hideTroll();
21271: PPUSH
21272: CALL_OW 559
// wait ( 1 1$00 ) ;
21276: LD_INT 2100
21278: PPUSH
21279: CALL_OW 67
// ToLua ( displayTroll(); ) ;
21283: LD_STRING displayTroll();
21285: PPUSH
21286: CALL_OW 559
// wait ( 1 1$00 ) ;
21290: LD_INT 2100
21292: PPUSH
21293: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21297: LD_STRING hideTroll();
21299: PPUSH
21300: CALL_OW 559
// end ;
21304: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
21305: LD_EXP 33
21309: PUSH
21310: LD_EXP 59
21314: AND
21315: IFFALSE 21378
21317: GO 21319
21319: DISABLE
21320: LD_INT 0
21322: PPUSH
// begin p := 0 ;
21323: LD_ADDR_VAR 0 1
21327: PUSH
21328: LD_INT 0
21330: ST_TO_ADDR
// repeat game_speed := 1 ;
21331: LD_ADDR_OWVAR 65
21335: PUSH
21336: LD_INT 1
21338: ST_TO_ADDR
// wait ( 0 0$1 ) ;
21339: LD_INT 35
21341: PPUSH
21342: CALL_OW 67
// p := p + 1 ;
21346: LD_ADDR_VAR 0 1
21350: PUSH
21351: LD_VAR 0 1
21355: PUSH
21356: LD_INT 1
21358: PLUS
21359: ST_TO_ADDR
// until p >= 60 ;
21360: LD_VAR 0 1
21364: PUSH
21365: LD_INT 60
21367: GREATEREQUAL
21368: IFFALSE 21331
// game_speed := 4 ;
21370: LD_ADDR_OWVAR 65
21374: PUSH
21375: LD_INT 4
21377: ST_TO_ADDR
// end ;
21378: PPOPN 1
21380: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
21381: LD_EXP 33
21385: PUSH
21386: LD_EXP 60
21390: AND
21391: IFFALSE 21537
21393: GO 21395
21395: DISABLE
21396: LD_INT 0
21398: PPUSH
21399: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21400: LD_ADDR_VAR 0 1
21404: PUSH
21405: LD_INT 22
21407: PUSH
21408: LD_OWVAR 2
21412: PUSH
21413: EMPTY
21414: LIST
21415: LIST
21416: PUSH
21417: LD_INT 2
21419: PUSH
21420: LD_INT 30
21422: PUSH
21423: LD_INT 0
21425: PUSH
21426: EMPTY
21427: LIST
21428: LIST
21429: PUSH
21430: LD_INT 30
21432: PUSH
21433: LD_INT 1
21435: PUSH
21436: EMPTY
21437: LIST
21438: LIST
21439: PUSH
21440: EMPTY
21441: LIST
21442: LIST
21443: LIST
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PPUSH
21449: CALL_OW 69
21453: ST_TO_ADDR
// if not depot then
21454: LD_VAR 0 1
21458: NOT
21459: IFFALSE 21463
// exit ;
21461: GO 21537
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
21463: LD_ADDR_VAR 0 2
21467: PUSH
21468: LD_VAR 0 1
21472: PUSH
21473: LD_INT 1
21475: PPUSH
21476: LD_VAR 0 1
21480: PPUSH
21481: CALL_OW 12
21485: ARRAY
21486: PPUSH
21487: CALL_OW 274
21491: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
21492: LD_VAR 0 2
21496: PPUSH
21497: LD_INT 1
21499: PPUSH
21500: LD_INT 0
21502: PPUSH
21503: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
21507: LD_VAR 0 2
21511: PPUSH
21512: LD_INT 2
21514: PPUSH
21515: LD_INT 0
21517: PPUSH
21518: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
21522: LD_VAR 0 2
21526: PPUSH
21527: LD_INT 3
21529: PPUSH
21530: LD_INT 0
21532: PPUSH
21533: CALL_OW 277
// end ;
21537: PPOPN 2
21539: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
21540: LD_EXP 33
21544: PUSH
21545: LD_EXP 61
21549: AND
21550: IFFALSE 21647
21552: GO 21554
21554: DISABLE
21555: LD_INT 0
21557: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21558: LD_ADDR_VAR 0 1
21562: PUSH
21563: LD_INT 22
21565: PUSH
21566: LD_OWVAR 2
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: PUSH
21575: LD_INT 21
21577: PUSH
21578: LD_INT 1
21580: PUSH
21581: EMPTY
21582: LIST
21583: LIST
21584: PUSH
21585: LD_INT 3
21587: PUSH
21588: LD_INT 23
21590: PUSH
21591: LD_INT 0
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: PUSH
21602: EMPTY
21603: LIST
21604: LIST
21605: LIST
21606: PPUSH
21607: CALL_OW 69
21611: ST_TO_ADDR
// if not tmp then
21612: LD_VAR 0 1
21616: NOT
21617: IFFALSE 21621
// exit ;
21619: GO 21647
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
21621: LD_VAR 0 1
21625: PUSH
21626: LD_INT 1
21628: PPUSH
21629: LD_VAR 0 1
21633: PPUSH
21634: CALL_OW 12
21638: ARRAY
21639: PPUSH
21640: LD_INT 200
21642: PPUSH
21643: CALL_OW 234
// end ;
21647: PPOPN 1
21649: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
21650: LD_EXP 33
21654: PUSH
21655: LD_EXP 62
21659: AND
21660: IFFALSE 21739
21662: GO 21664
21664: DISABLE
21665: LD_INT 0
21667: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
21668: LD_ADDR_VAR 0 1
21672: PUSH
21673: LD_INT 22
21675: PUSH
21676: LD_OWVAR 2
21680: PUSH
21681: EMPTY
21682: LIST
21683: LIST
21684: PUSH
21685: LD_INT 21
21687: PUSH
21688: LD_INT 2
21690: PUSH
21691: EMPTY
21692: LIST
21693: LIST
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: PPUSH
21699: CALL_OW 69
21703: ST_TO_ADDR
// if not tmp then
21704: LD_VAR 0 1
21708: NOT
21709: IFFALSE 21713
// exit ;
21711: GO 21739
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
21713: LD_VAR 0 1
21717: PUSH
21718: LD_INT 1
21720: PPUSH
21721: LD_VAR 0 1
21725: PPUSH
21726: CALL_OW 12
21730: ARRAY
21731: PPUSH
21732: LD_INT 60
21734: PPUSH
21735: CALL_OW 234
// end ;
21739: PPOPN 1
21741: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
21742: LD_EXP 33
21746: PUSH
21747: LD_EXP 63
21751: AND
21752: IFFALSE 21851
21754: GO 21756
21756: DISABLE
21757: LD_INT 0
21759: PPUSH
21760: PPUSH
// begin enable ;
21761: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
21762: LD_ADDR_VAR 0 1
21766: PUSH
21767: LD_INT 22
21769: PUSH
21770: LD_OWVAR 2
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: PUSH
21779: LD_INT 61
21781: PUSH
21782: EMPTY
21783: LIST
21784: PUSH
21785: LD_INT 33
21787: PUSH
21788: LD_INT 2
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: PUSH
21795: EMPTY
21796: LIST
21797: LIST
21798: LIST
21799: PPUSH
21800: CALL_OW 69
21804: ST_TO_ADDR
// if not tmp then
21805: LD_VAR 0 1
21809: NOT
21810: IFFALSE 21814
// exit ;
21812: GO 21851
// for i in tmp do
21814: LD_ADDR_VAR 0 2
21818: PUSH
21819: LD_VAR 0 1
21823: PUSH
21824: FOR_IN
21825: IFFALSE 21849
// if IsControledBy ( i ) then
21827: LD_VAR 0 2
21831: PPUSH
21832: CALL_OW 312
21836: IFFALSE 21847
// ComUnlink ( i ) ;
21838: LD_VAR 0 2
21842: PPUSH
21843: CALL_OW 136
21847: GO 21824
21849: POP
21850: POP
// end ;
21851: PPOPN 2
21853: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
21854: LD_EXP 33
21858: PUSH
21859: LD_EXP 64
21863: AND
21864: IFFALSE 22004
21866: GO 21868
21868: DISABLE
21869: LD_INT 0
21871: PPUSH
21872: PPUSH
// begin ToLua ( displayPowell(); ) ;
21873: LD_STRING displayPowell();
21875: PPUSH
21876: CALL_OW 559
// uc_side := 0 ;
21880: LD_ADDR_OWVAR 20
21884: PUSH
21885: LD_INT 0
21887: ST_TO_ADDR
// uc_nation := 2 ;
21888: LD_ADDR_OWVAR 21
21892: PUSH
21893: LD_INT 2
21895: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
21896: LD_ADDR_OWVAR 37
21900: PUSH
21901: LD_INT 14
21903: ST_TO_ADDR
// vc_engine := engine_siberite ;
21904: LD_ADDR_OWVAR 39
21908: PUSH
21909: LD_INT 3
21911: ST_TO_ADDR
// vc_control := control_apeman ;
21912: LD_ADDR_OWVAR 38
21916: PUSH
21917: LD_INT 5
21919: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
21920: LD_ADDR_OWVAR 40
21924: PUSH
21925: LD_INT 29
21927: ST_TO_ADDR
// un := CreateVehicle ;
21928: LD_ADDR_VAR 0 2
21932: PUSH
21933: CALL_OW 45
21937: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21938: LD_VAR 0 2
21942: PPUSH
21943: LD_INT 1
21945: PPUSH
21946: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21950: LD_INT 35
21952: PPUSH
21953: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21957: LD_VAR 0 2
21961: PPUSH
21962: LD_INT 22
21964: PUSH
21965: LD_OWVAR 2
21969: PUSH
21970: EMPTY
21971: LIST
21972: LIST
21973: PPUSH
21974: CALL_OW 69
21978: PPUSH
21979: LD_VAR 0 2
21983: PPUSH
21984: CALL_OW 74
21988: PPUSH
21989: CALL_OW 115
// until IsDead ( un ) ;
21993: LD_VAR 0 2
21997: PPUSH
21998: CALL_OW 301
22002: IFFALSE 21950
// end ;
22004: PPOPN 2
22006: END
// every 0 0$1 trigger StreamModeActive and sStu do
22007: LD_EXP 33
22011: PUSH
22012: LD_EXP 72
22016: AND
22017: IFFALSE 22033
22019: GO 22021
22021: DISABLE
// begin ToLua ( displayStucuk(); ) ;
22022: LD_STRING displayStucuk();
22024: PPUSH
22025: CALL_OW 559
// ResetFog ;
22029: CALL_OW 335
// end ;
22033: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
22034: LD_EXP 33
22038: PUSH
22039: LD_EXP 65
22043: AND
22044: IFFALSE 22185
22046: GO 22048
22048: DISABLE
22049: LD_INT 0
22051: PPUSH
22052: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22053: LD_ADDR_VAR 0 2
22057: PUSH
22058: LD_INT 22
22060: PUSH
22061: LD_OWVAR 2
22065: PUSH
22066: EMPTY
22067: LIST
22068: LIST
22069: PUSH
22070: LD_INT 21
22072: PUSH
22073: LD_INT 1
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: PPUSH
22084: CALL_OW 69
22088: ST_TO_ADDR
// if not tmp then
22089: LD_VAR 0 2
22093: NOT
22094: IFFALSE 22098
// exit ;
22096: GO 22185
// un := tmp [ rand ( 1 , tmp ) ] ;
22098: LD_ADDR_VAR 0 1
22102: PUSH
22103: LD_VAR 0 2
22107: PUSH
22108: LD_INT 1
22110: PPUSH
22111: LD_VAR 0 2
22115: PPUSH
22116: CALL_OW 12
22120: ARRAY
22121: ST_TO_ADDR
// SetSide ( un , 0 ) ;
22122: LD_VAR 0 1
22126: PPUSH
22127: LD_INT 0
22129: PPUSH
22130: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
22134: LD_VAR 0 1
22138: PPUSH
22139: LD_OWVAR 3
22143: PUSH
22144: LD_VAR 0 1
22148: DIFF
22149: PPUSH
22150: LD_VAR 0 1
22154: PPUSH
22155: CALL_OW 74
22159: PPUSH
22160: CALL_OW 115
// wait ( 0 0$20 ) ;
22164: LD_INT 700
22166: PPUSH
22167: CALL_OW 67
// SetSide ( un , your_side ) ;
22171: LD_VAR 0 1
22175: PPUSH
22176: LD_OWVAR 2
22180: PPUSH
22181: CALL_OW 235
// end ;
22185: PPOPN 2
22187: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
22188: LD_EXP 33
22192: PUSH
22193: LD_EXP 66
22197: AND
22198: IFFALSE 22304
22200: GO 22202
22202: DISABLE
22203: LD_INT 0
22205: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22206: LD_ADDR_VAR 0 1
22210: PUSH
22211: LD_INT 22
22213: PUSH
22214: LD_OWVAR 2
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: PUSH
22223: LD_INT 2
22225: PUSH
22226: LD_INT 30
22228: PUSH
22229: LD_INT 0
22231: PUSH
22232: EMPTY
22233: LIST
22234: LIST
22235: PUSH
22236: LD_INT 30
22238: PUSH
22239: LD_INT 1
22241: PUSH
22242: EMPTY
22243: LIST
22244: LIST
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: LIST
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: PPUSH
22255: CALL_OW 69
22259: ST_TO_ADDR
// if not depot then
22260: LD_VAR 0 1
22264: NOT
22265: IFFALSE 22269
// exit ;
22267: GO 22304
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
22269: LD_VAR 0 1
22273: PUSH
22274: LD_INT 1
22276: ARRAY
22277: PPUSH
22278: CALL_OW 250
22282: PPUSH
22283: LD_VAR 0 1
22287: PUSH
22288: LD_INT 1
22290: ARRAY
22291: PPUSH
22292: CALL_OW 251
22296: PPUSH
22297: LD_INT 70
22299: PPUSH
22300: CALL_OW 495
// end ;
22304: PPOPN 1
22306: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
22307: LD_EXP 33
22311: PUSH
22312: LD_EXP 67
22316: AND
22317: IFFALSE 22528
22319: GO 22321
22321: DISABLE
22322: LD_INT 0
22324: PPUSH
22325: PPUSH
22326: PPUSH
22327: PPUSH
22328: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22329: LD_ADDR_VAR 0 5
22333: PUSH
22334: LD_INT 22
22336: PUSH
22337: LD_OWVAR 2
22341: PUSH
22342: EMPTY
22343: LIST
22344: LIST
22345: PUSH
22346: LD_INT 21
22348: PUSH
22349: LD_INT 1
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: PPUSH
22360: CALL_OW 69
22364: ST_TO_ADDR
// if not tmp then
22365: LD_VAR 0 5
22369: NOT
22370: IFFALSE 22374
// exit ;
22372: GO 22528
// for i in tmp do
22374: LD_ADDR_VAR 0 1
22378: PUSH
22379: LD_VAR 0 5
22383: PUSH
22384: FOR_IN
22385: IFFALSE 22526
// begin d := rand ( 0 , 5 ) ;
22387: LD_ADDR_VAR 0 4
22391: PUSH
22392: LD_INT 0
22394: PPUSH
22395: LD_INT 5
22397: PPUSH
22398: CALL_OW 12
22402: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
22403: LD_ADDR_VAR 0 2
22407: PUSH
22408: LD_VAR 0 1
22412: PPUSH
22413: CALL_OW 250
22417: PPUSH
22418: LD_VAR 0 4
22422: PPUSH
22423: LD_INT 3
22425: PPUSH
22426: LD_INT 12
22428: PPUSH
22429: CALL_OW 12
22433: PPUSH
22434: CALL_OW 272
22438: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
22439: LD_ADDR_VAR 0 3
22443: PUSH
22444: LD_VAR 0 1
22448: PPUSH
22449: CALL_OW 251
22453: PPUSH
22454: LD_VAR 0 4
22458: PPUSH
22459: LD_INT 3
22461: PPUSH
22462: LD_INT 12
22464: PPUSH
22465: CALL_OW 12
22469: PPUSH
22470: CALL_OW 273
22474: ST_TO_ADDR
// if ValidHex ( x , y ) then
22475: LD_VAR 0 2
22479: PPUSH
22480: LD_VAR 0 3
22484: PPUSH
22485: CALL_OW 488
22489: IFFALSE 22524
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
22491: LD_VAR 0 1
22495: PPUSH
22496: LD_VAR 0 2
22500: PPUSH
22501: LD_VAR 0 3
22505: PPUSH
22506: LD_INT 3
22508: PPUSH
22509: LD_INT 6
22511: PPUSH
22512: CALL_OW 12
22516: PPUSH
22517: LD_INT 1
22519: PPUSH
22520: CALL_OW 483
// end ;
22524: GO 22384
22526: POP
22527: POP
// end ;
22528: PPOPN 5
22530: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
22531: LD_EXP 33
22535: PUSH
22536: LD_EXP 68
22540: AND
22541: IFFALSE 22635
22543: GO 22545
22545: DISABLE
22546: LD_INT 0
22548: PPUSH
22549: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
22550: LD_ADDR_VAR 0 2
22554: PUSH
22555: LD_INT 22
22557: PUSH
22558: LD_OWVAR 2
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 32
22569: PUSH
22570: LD_INT 1
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: PUSH
22577: LD_INT 21
22579: PUSH
22580: LD_INT 2
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: LIST
22591: PPUSH
22592: CALL_OW 69
22596: ST_TO_ADDR
// if not tmp then
22597: LD_VAR 0 2
22601: NOT
22602: IFFALSE 22606
// exit ;
22604: GO 22635
// for i in tmp do
22606: LD_ADDR_VAR 0 1
22610: PUSH
22611: LD_VAR 0 2
22615: PUSH
22616: FOR_IN
22617: IFFALSE 22633
// SetFuel ( i , 0 ) ;
22619: LD_VAR 0 1
22623: PPUSH
22624: LD_INT 0
22626: PPUSH
22627: CALL_OW 240
22631: GO 22616
22633: POP
22634: POP
// end ;
22635: PPOPN 2
22637: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
22638: LD_EXP 33
22642: PUSH
22643: LD_EXP 69
22647: AND
22648: IFFALSE 22714
22650: GO 22652
22652: DISABLE
22653: LD_INT 0
22655: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22656: LD_ADDR_VAR 0 1
22660: PUSH
22661: LD_INT 22
22663: PUSH
22664: LD_OWVAR 2
22668: PUSH
22669: EMPTY
22670: LIST
22671: LIST
22672: PUSH
22673: LD_INT 30
22675: PUSH
22676: LD_INT 29
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: PPUSH
22687: CALL_OW 69
22691: ST_TO_ADDR
// if not tmp then
22692: LD_VAR 0 1
22696: NOT
22697: IFFALSE 22701
// exit ;
22699: GO 22714
// DestroyUnit ( tmp [ 1 ] ) ;
22701: LD_VAR 0 1
22705: PUSH
22706: LD_INT 1
22708: ARRAY
22709: PPUSH
22710: CALL_OW 65
// end ;
22714: PPOPN 1
22716: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
22717: LD_EXP 33
22721: PUSH
22722: LD_EXP 71
22726: AND
22727: IFFALSE 22856
22729: GO 22731
22731: DISABLE
22732: LD_INT 0
22734: PPUSH
// begin uc_side := 0 ;
22735: LD_ADDR_OWVAR 20
22739: PUSH
22740: LD_INT 0
22742: ST_TO_ADDR
// uc_nation := nation_arabian ;
22743: LD_ADDR_OWVAR 21
22747: PUSH
22748: LD_INT 2
22750: ST_TO_ADDR
// hc_gallery :=  ;
22751: LD_ADDR_OWVAR 33
22755: PUSH
22756: LD_STRING 
22758: ST_TO_ADDR
// hc_name :=  ;
22759: LD_ADDR_OWVAR 26
22763: PUSH
22764: LD_STRING 
22766: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
22767: LD_INT 1
22769: PPUSH
22770: LD_INT 11
22772: PPUSH
22773: LD_INT 10
22775: PPUSH
22776: CALL_OW 380
// un := CreateHuman ;
22780: LD_ADDR_VAR 0 1
22784: PUSH
22785: CALL_OW 44
22789: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22790: LD_VAR 0 1
22794: PPUSH
22795: LD_INT 1
22797: PPUSH
22798: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22802: LD_INT 35
22804: PPUSH
22805: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22809: LD_VAR 0 1
22813: PPUSH
22814: LD_INT 22
22816: PUSH
22817: LD_OWVAR 2
22821: PUSH
22822: EMPTY
22823: LIST
22824: LIST
22825: PPUSH
22826: CALL_OW 69
22830: PPUSH
22831: LD_VAR 0 1
22835: PPUSH
22836: CALL_OW 74
22840: PPUSH
22841: CALL_OW 115
// until IsDead ( un ) ;
22845: LD_VAR 0 1
22849: PPUSH
22850: CALL_OW 301
22854: IFFALSE 22802
// end ;
22856: PPOPN 1
22858: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
22859: LD_EXP 33
22863: PUSH
22864: LD_EXP 73
22868: AND
22869: IFFALSE 22881
22871: GO 22873
22873: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
22874: LD_STRING earthquake(getX(game), 0, 32)
22876: PPUSH
22877: CALL_OW 559
22881: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
22882: LD_EXP 33
22886: PUSH
22887: LD_EXP 74
22891: AND
22892: IFFALSE 22983
22894: GO 22896
22896: DISABLE
22897: LD_INT 0
22899: PPUSH
// begin enable ;
22900: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
22901: LD_ADDR_VAR 0 1
22905: PUSH
22906: LD_INT 22
22908: PUSH
22909: LD_OWVAR 2
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: PUSH
22918: LD_INT 21
22920: PUSH
22921: LD_INT 2
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: PUSH
22928: LD_INT 33
22930: PUSH
22931: LD_INT 3
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: PUSH
22938: EMPTY
22939: LIST
22940: LIST
22941: LIST
22942: PPUSH
22943: CALL_OW 69
22947: ST_TO_ADDR
// if not tmp then
22948: LD_VAR 0 1
22952: NOT
22953: IFFALSE 22957
// exit ;
22955: GO 22983
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22957: LD_VAR 0 1
22961: PUSH
22962: LD_INT 1
22964: PPUSH
22965: LD_VAR 0 1
22969: PPUSH
22970: CALL_OW 12
22974: ARRAY
22975: PPUSH
22976: LD_INT 1
22978: PPUSH
22979: CALL_OW 234
// end ;
22983: PPOPN 1
22985: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
22986: LD_EXP 33
22990: PUSH
22991: LD_EXP 75
22995: AND
22996: IFFALSE 23137
22998: GO 23000
23000: DISABLE
23001: LD_INT 0
23003: PPUSH
23004: PPUSH
23005: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23006: LD_ADDR_VAR 0 3
23010: PUSH
23011: LD_INT 22
23013: PUSH
23014: LD_OWVAR 2
23018: PUSH
23019: EMPTY
23020: LIST
23021: LIST
23022: PUSH
23023: LD_INT 25
23025: PUSH
23026: LD_INT 1
23028: PUSH
23029: EMPTY
23030: LIST
23031: LIST
23032: PUSH
23033: EMPTY
23034: LIST
23035: LIST
23036: PPUSH
23037: CALL_OW 69
23041: ST_TO_ADDR
// if not tmp then
23042: LD_VAR 0 3
23046: NOT
23047: IFFALSE 23051
// exit ;
23049: GO 23137
// un := tmp [ rand ( 1 , tmp ) ] ;
23051: LD_ADDR_VAR 0 2
23055: PUSH
23056: LD_VAR 0 3
23060: PUSH
23061: LD_INT 1
23063: PPUSH
23064: LD_VAR 0 3
23068: PPUSH
23069: CALL_OW 12
23073: ARRAY
23074: ST_TO_ADDR
// if Crawls ( un ) then
23075: LD_VAR 0 2
23079: PPUSH
23080: CALL_OW 318
23084: IFFALSE 23095
// ComWalk ( un ) ;
23086: LD_VAR 0 2
23090: PPUSH
23091: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
23095: LD_VAR 0 2
23099: PPUSH
23100: LD_INT 9
23102: PPUSH
23103: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
23107: LD_INT 28
23109: PPUSH
23110: LD_OWVAR 2
23114: PPUSH
23115: LD_INT 2
23117: PPUSH
23118: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
23122: LD_INT 29
23124: PPUSH
23125: LD_OWVAR 2
23129: PPUSH
23130: LD_INT 2
23132: PPUSH
23133: CALL_OW 322
// end ;
23137: PPOPN 3
23139: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
23140: LD_EXP 33
23144: PUSH
23145: LD_EXP 76
23149: AND
23150: IFFALSE 23261
23152: GO 23154
23154: DISABLE
23155: LD_INT 0
23157: PPUSH
23158: PPUSH
23159: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23160: LD_ADDR_VAR 0 3
23164: PUSH
23165: LD_INT 22
23167: PUSH
23168: LD_OWVAR 2
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: PUSH
23177: LD_INT 25
23179: PUSH
23180: LD_INT 1
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: PPUSH
23191: CALL_OW 69
23195: ST_TO_ADDR
// if not tmp then
23196: LD_VAR 0 3
23200: NOT
23201: IFFALSE 23205
// exit ;
23203: GO 23261
// un := tmp [ rand ( 1 , tmp ) ] ;
23205: LD_ADDR_VAR 0 2
23209: PUSH
23210: LD_VAR 0 3
23214: PUSH
23215: LD_INT 1
23217: PPUSH
23218: LD_VAR 0 3
23222: PPUSH
23223: CALL_OW 12
23227: ARRAY
23228: ST_TO_ADDR
// if Crawls ( un ) then
23229: LD_VAR 0 2
23233: PPUSH
23234: CALL_OW 318
23238: IFFALSE 23249
// ComWalk ( un ) ;
23240: LD_VAR 0 2
23244: PPUSH
23245: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23249: LD_VAR 0 2
23253: PPUSH
23254: LD_INT 8
23256: PPUSH
23257: CALL_OW 336
// end ;
23261: PPOPN 3
23263: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
23264: LD_EXP 33
23268: PUSH
23269: LD_EXP 77
23273: AND
23274: IFFALSE 23418
23276: GO 23278
23278: DISABLE
23279: LD_INT 0
23281: PPUSH
23282: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
23283: LD_ADDR_VAR 0 2
23287: PUSH
23288: LD_INT 22
23290: PUSH
23291: LD_OWVAR 2
23295: PUSH
23296: EMPTY
23297: LIST
23298: LIST
23299: PUSH
23300: LD_INT 21
23302: PUSH
23303: LD_INT 2
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: PUSH
23310: LD_INT 2
23312: PUSH
23313: LD_INT 34
23315: PUSH
23316: LD_INT 12
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: PUSH
23323: LD_INT 34
23325: PUSH
23326: LD_INT 51
23328: PUSH
23329: EMPTY
23330: LIST
23331: LIST
23332: PUSH
23333: LD_INT 34
23335: PUSH
23336: LD_INT 32
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: PUSH
23349: EMPTY
23350: LIST
23351: LIST
23352: LIST
23353: PPUSH
23354: CALL_OW 69
23358: ST_TO_ADDR
// if not tmp then
23359: LD_VAR 0 2
23363: NOT
23364: IFFALSE 23368
// exit ;
23366: GO 23418
// for i in tmp do
23368: LD_ADDR_VAR 0 1
23372: PUSH
23373: LD_VAR 0 2
23377: PUSH
23378: FOR_IN
23379: IFFALSE 23416
// if GetCargo ( i , mat_artifact ) = 0 then
23381: LD_VAR 0 1
23385: PPUSH
23386: LD_INT 4
23388: PPUSH
23389: CALL_OW 289
23393: PUSH
23394: LD_INT 0
23396: EQUAL
23397: IFFALSE 23414
// SetCargo ( i , mat_siberit , 100 ) ;
23399: LD_VAR 0 1
23403: PPUSH
23404: LD_INT 3
23406: PPUSH
23407: LD_INT 100
23409: PPUSH
23410: CALL_OW 290
23414: GO 23378
23416: POP
23417: POP
// end ;
23418: PPOPN 2
23420: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
23421: LD_EXP 33
23425: PUSH
23426: LD_EXP 78
23430: AND
23431: IFFALSE 23614
23433: GO 23435
23435: DISABLE
23436: LD_INT 0
23438: PPUSH
23439: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23440: LD_ADDR_VAR 0 2
23444: PUSH
23445: LD_INT 22
23447: PUSH
23448: LD_OWVAR 2
23452: PUSH
23453: EMPTY
23454: LIST
23455: LIST
23456: PPUSH
23457: CALL_OW 69
23461: ST_TO_ADDR
// if not tmp then
23462: LD_VAR 0 2
23466: NOT
23467: IFFALSE 23471
// exit ;
23469: GO 23614
// for i := 1 to 2 do
23471: LD_ADDR_VAR 0 1
23475: PUSH
23476: DOUBLE
23477: LD_INT 1
23479: DEC
23480: ST_TO_ADDR
23481: LD_INT 2
23483: PUSH
23484: FOR_TO
23485: IFFALSE 23612
// begin uc_side := your_side ;
23487: LD_ADDR_OWVAR 20
23491: PUSH
23492: LD_OWVAR 2
23496: ST_TO_ADDR
// uc_nation := nation_american ;
23497: LD_ADDR_OWVAR 21
23501: PUSH
23502: LD_INT 1
23504: ST_TO_ADDR
// vc_chassis := us_morphling ;
23505: LD_ADDR_OWVAR 37
23509: PUSH
23510: LD_INT 5
23512: ST_TO_ADDR
// vc_engine := engine_siberite ;
23513: LD_ADDR_OWVAR 39
23517: PUSH
23518: LD_INT 3
23520: ST_TO_ADDR
// vc_control := control_computer ;
23521: LD_ADDR_OWVAR 38
23525: PUSH
23526: LD_INT 3
23528: ST_TO_ADDR
// vc_weapon := us_double_laser ;
23529: LD_ADDR_OWVAR 40
23533: PUSH
23534: LD_INT 10
23536: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
23537: LD_VAR 0 2
23541: PUSH
23542: LD_INT 1
23544: ARRAY
23545: PPUSH
23546: CALL_OW 310
23550: NOT
23551: IFFALSE 23598
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
23553: CALL_OW 45
23557: PPUSH
23558: LD_VAR 0 2
23562: PUSH
23563: LD_INT 1
23565: ARRAY
23566: PPUSH
23567: CALL_OW 250
23571: PPUSH
23572: LD_VAR 0 2
23576: PUSH
23577: LD_INT 1
23579: ARRAY
23580: PPUSH
23581: CALL_OW 251
23585: PPUSH
23586: LD_INT 12
23588: PPUSH
23589: LD_INT 1
23591: PPUSH
23592: CALL_OW 50
23596: GO 23610
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
23598: CALL_OW 45
23602: PPUSH
23603: LD_INT 1
23605: PPUSH
23606: CALL_OW 51
// end ;
23610: GO 23484
23612: POP
23613: POP
// end ;
23614: PPOPN 2
23616: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
23617: LD_EXP 33
23621: PUSH
23622: LD_EXP 79
23626: AND
23627: IFFALSE 23849
23629: GO 23631
23631: DISABLE
23632: LD_INT 0
23634: PPUSH
23635: PPUSH
23636: PPUSH
23637: PPUSH
23638: PPUSH
23639: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23640: LD_ADDR_VAR 0 6
23644: PUSH
23645: LD_INT 22
23647: PUSH
23648: LD_OWVAR 2
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 21
23659: PUSH
23660: LD_INT 1
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: PUSH
23667: LD_INT 3
23669: PUSH
23670: LD_INT 23
23672: PUSH
23673: LD_INT 0
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: PUSH
23680: EMPTY
23681: LIST
23682: LIST
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: LIST
23688: PPUSH
23689: CALL_OW 69
23693: ST_TO_ADDR
// if not tmp then
23694: LD_VAR 0 6
23698: NOT
23699: IFFALSE 23703
// exit ;
23701: GO 23849
// s1 := rand ( 1 , 4 ) ;
23703: LD_ADDR_VAR 0 2
23707: PUSH
23708: LD_INT 1
23710: PPUSH
23711: LD_INT 4
23713: PPUSH
23714: CALL_OW 12
23718: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
23719: LD_ADDR_VAR 0 4
23723: PUSH
23724: LD_VAR 0 6
23728: PUSH
23729: LD_INT 1
23731: ARRAY
23732: PPUSH
23733: LD_VAR 0 2
23737: PPUSH
23738: CALL_OW 259
23742: ST_TO_ADDR
// if s1 = 1 then
23743: LD_VAR 0 2
23747: PUSH
23748: LD_INT 1
23750: EQUAL
23751: IFFALSE 23771
// s2 := rand ( 2 , 4 ) else
23753: LD_ADDR_VAR 0 3
23757: PUSH
23758: LD_INT 2
23760: PPUSH
23761: LD_INT 4
23763: PPUSH
23764: CALL_OW 12
23768: ST_TO_ADDR
23769: GO 23779
// s2 := 1 ;
23771: LD_ADDR_VAR 0 3
23775: PUSH
23776: LD_INT 1
23778: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
23779: LD_ADDR_VAR 0 5
23783: PUSH
23784: LD_VAR 0 6
23788: PUSH
23789: LD_INT 1
23791: ARRAY
23792: PPUSH
23793: LD_VAR 0 3
23797: PPUSH
23798: CALL_OW 259
23802: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
23803: LD_VAR 0 6
23807: PUSH
23808: LD_INT 1
23810: ARRAY
23811: PPUSH
23812: LD_VAR 0 2
23816: PPUSH
23817: LD_VAR 0 5
23821: PPUSH
23822: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
23826: LD_VAR 0 6
23830: PUSH
23831: LD_INT 1
23833: ARRAY
23834: PPUSH
23835: LD_VAR 0 3
23839: PPUSH
23840: LD_VAR 0 4
23844: PPUSH
23845: CALL_OW 237
// end ;
23849: PPOPN 6
23851: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
23852: LD_EXP 33
23856: PUSH
23857: LD_EXP 80
23861: AND
23862: IFFALSE 23941
23864: GO 23866
23866: DISABLE
23867: LD_INT 0
23869: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
23870: LD_ADDR_VAR 0 1
23874: PUSH
23875: LD_INT 22
23877: PUSH
23878: LD_OWVAR 2
23882: PUSH
23883: EMPTY
23884: LIST
23885: LIST
23886: PUSH
23887: LD_INT 30
23889: PUSH
23890: LD_INT 3
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PPUSH
23901: CALL_OW 69
23905: ST_TO_ADDR
// if not tmp then
23906: LD_VAR 0 1
23910: NOT
23911: IFFALSE 23915
// exit ;
23913: GO 23941
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23915: LD_VAR 0 1
23919: PUSH
23920: LD_INT 1
23922: PPUSH
23923: LD_VAR 0 1
23927: PPUSH
23928: CALL_OW 12
23932: ARRAY
23933: PPUSH
23934: LD_INT 1
23936: PPUSH
23937: CALL_OW 234
// end ;
23941: PPOPN 1
23943: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
23944: LD_EXP 33
23948: PUSH
23949: LD_EXP 81
23953: AND
23954: IFFALSE 24066
23956: GO 23958
23958: DISABLE
23959: LD_INT 0
23961: PPUSH
23962: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
23963: LD_ADDR_VAR 0 2
23967: PUSH
23968: LD_INT 22
23970: PUSH
23971: LD_OWVAR 2
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: PUSH
23980: LD_INT 2
23982: PUSH
23983: LD_INT 30
23985: PUSH
23986: LD_INT 27
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: PUSH
23993: LD_INT 30
23995: PUSH
23996: LD_INT 26
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: PUSH
24003: LD_INT 30
24005: PUSH
24006: LD_INT 28
24008: PUSH
24009: EMPTY
24010: LIST
24011: LIST
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: PPUSH
24023: CALL_OW 69
24027: ST_TO_ADDR
// if not tmp then
24028: LD_VAR 0 2
24032: NOT
24033: IFFALSE 24037
// exit ;
24035: GO 24066
// for i in tmp do
24037: LD_ADDR_VAR 0 1
24041: PUSH
24042: LD_VAR 0 2
24046: PUSH
24047: FOR_IN
24048: IFFALSE 24064
// SetLives ( i , 1 ) ;
24050: LD_VAR 0 1
24054: PPUSH
24055: LD_INT 1
24057: PPUSH
24058: CALL_OW 234
24062: GO 24047
24064: POP
24065: POP
// end ;
24066: PPOPN 2
24068: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
24069: LD_EXP 33
24073: PUSH
24074: LD_EXP 82
24078: AND
24079: IFFALSE 24366
24081: GO 24083
24083: DISABLE
24084: LD_INT 0
24086: PPUSH
24087: PPUSH
24088: PPUSH
// begin i := rand ( 1 , 7 ) ;
24089: LD_ADDR_VAR 0 1
24093: PUSH
24094: LD_INT 1
24096: PPUSH
24097: LD_INT 7
24099: PPUSH
24100: CALL_OW 12
24104: ST_TO_ADDR
// case i of 1 :
24105: LD_VAR 0 1
24109: PUSH
24110: LD_INT 1
24112: DOUBLE
24113: EQUAL
24114: IFTRUE 24118
24116: GO 24128
24118: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
24119: LD_STRING earthquake(getX(game), 0, 32)
24121: PPUSH
24122: CALL_OW 559
24126: GO 24366
24128: LD_INT 2
24130: DOUBLE
24131: EQUAL
24132: IFTRUE 24136
24134: GO 24150
24136: POP
// begin ToLua ( displayStucuk(); ) ;
24137: LD_STRING displayStucuk();
24139: PPUSH
24140: CALL_OW 559
// ResetFog ;
24144: CALL_OW 335
// end ; 3 :
24148: GO 24366
24150: LD_INT 3
24152: DOUBLE
24153: EQUAL
24154: IFTRUE 24158
24156: GO 24262
24158: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24159: LD_ADDR_VAR 0 2
24163: PUSH
24164: LD_INT 22
24166: PUSH
24167: LD_OWVAR 2
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: PUSH
24176: LD_INT 25
24178: PUSH
24179: LD_INT 1
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PPUSH
24190: CALL_OW 69
24194: ST_TO_ADDR
// if not tmp then
24195: LD_VAR 0 2
24199: NOT
24200: IFFALSE 24204
// exit ;
24202: GO 24366
// un := tmp [ rand ( 1 , tmp ) ] ;
24204: LD_ADDR_VAR 0 3
24208: PUSH
24209: LD_VAR 0 2
24213: PUSH
24214: LD_INT 1
24216: PPUSH
24217: LD_VAR 0 2
24221: PPUSH
24222: CALL_OW 12
24226: ARRAY
24227: ST_TO_ADDR
// if Crawls ( un ) then
24228: LD_VAR 0 3
24232: PPUSH
24233: CALL_OW 318
24237: IFFALSE 24248
// ComWalk ( un ) ;
24239: LD_VAR 0 3
24243: PPUSH
24244: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24248: LD_VAR 0 3
24252: PPUSH
24253: LD_INT 8
24255: PPUSH
24256: CALL_OW 336
// end ; 4 :
24260: GO 24366
24262: LD_INT 4
24264: DOUBLE
24265: EQUAL
24266: IFTRUE 24270
24268: GO 24344
24270: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24271: LD_ADDR_VAR 0 2
24275: PUSH
24276: LD_INT 22
24278: PUSH
24279: LD_OWVAR 2
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PUSH
24288: LD_INT 30
24290: PUSH
24291: LD_INT 29
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: PPUSH
24302: CALL_OW 69
24306: ST_TO_ADDR
// if not tmp then
24307: LD_VAR 0 2
24311: NOT
24312: IFFALSE 24316
// exit ;
24314: GO 24366
// CenterNowOnUnits ( tmp [ 1 ] ) ;
24316: LD_VAR 0 2
24320: PUSH
24321: LD_INT 1
24323: ARRAY
24324: PPUSH
24325: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
24329: LD_VAR 0 2
24333: PUSH
24334: LD_INT 1
24336: ARRAY
24337: PPUSH
24338: CALL_OW 65
// end ; 5 .. 7 :
24342: GO 24366
24344: LD_INT 5
24346: DOUBLE
24347: GREATEREQUAL
24348: IFFALSE 24356
24350: LD_INT 7
24352: DOUBLE
24353: LESSEQUAL
24354: IFTRUE 24358
24356: GO 24365
24358: POP
// StreamSibBomb ; end ;
24359: CALL 20603 0 0
24363: GO 24366
24365: POP
// end ;
24366: PPOPN 3
24368: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
24369: LD_EXP 33
24373: PUSH
24374: LD_EXP 83
24378: AND
24379: IFFALSE 24535
24381: GO 24383
24383: DISABLE
24384: LD_INT 0
24386: PPUSH
24387: PPUSH
24388: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
24389: LD_ADDR_VAR 0 2
24393: PUSH
24394: LD_INT 81
24396: PUSH
24397: LD_OWVAR 2
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: PUSH
24406: LD_INT 2
24408: PUSH
24409: LD_INT 21
24411: PUSH
24412: LD_INT 1
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: PUSH
24419: LD_INT 21
24421: PUSH
24422: LD_INT 2
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: LIST
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: PPUSH
24438: CALL_OW 69
24442: ST_TO_ADDR
// if not tmp then
24443: LD_VAR 0 2
24447: NOT
24448: IFFALSE 24452
// exit ;
24450: GO 24535
// p := 0 ;
24452: LD_ADDR_VAR 0 3
24456: PUSH
24457: LD_INT 0
24459: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24460: LD_INT 35
24462: PPUSH
24463: CALL_OW 67
// p := p + 1 ;
24467: LD_ADDR_VAR 0 3
24471: PUSH
24472: LD_VAR 0 3
24476: PUSH
24477: LD_INT 1
24479: PLUS
24480: ST_TO_ADDR
// for i in tmp do
24481: LD_ADDR_VAR 0 1
24485: PUSH
24486: LD_VAR 0 2
24490: PUSH
24491: FOR_IN
24492: IFFALSE 24523
// if GetLives ( i ) < 1000 then
24494: LD_VAR 0 1
24498: PPUSH
24499: CALL_OW 256
24503: PUSH
24504: LD_INT 1000
24506: LESS
24507: IFFALSE 24521
// SetLives ( i , 1000 ) ;
24509: LD_VAR 0 1
24513: PPUSH
24514: LD_INT 1000
24516: PPUSH
24517: CALL_OW 234
24521: GO 24491
24523: POP
24524: POP
// until p > 20 ;
24525: LD_VAR 0 3
24529: PUSH
24530: LD_INT 20
24532: GREATER
24533: IFFALSE 24460
// end ;
24535: PPOPN 3
24537: END
// every 0 0$1 trigger StreamModeActive and sTime do
24538: LD_EXP 33
24542: PUSH
24543: LD_EXP 84
24547: AND
24548: IFFALSE 24583
24550: GO 24552
24552: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
24553: LD_INT 28
24555: PPUSH
24556: LD_OWVAR 2
24560: PPUSH
24561: LD_INT 2
24563: PPUSH
24564: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
24568: LD_INT 30
24570: PPUSH
24571: LD_OWVAR 2
24575: PPUSH
24576: LD_INT 2
24578: PPUSH
24579: CALL_OW 322
// end ;
24583: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
24584: LD_EXP 33
24588: PUSH
24589: LD_EXP 85
24593: AND
24594: IFFALSE 24715
24596: GO 24598
24598: DISABLE
24599: LD_INT 0
24601: PPUSH
24602: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24603: LD_ADDR_VAR 0 2
24607: PUSH
24608: LD_INT 22
24610: PUSH
24611: LD_OWVAR 2
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: PUSH
24620: LD_INT 21
24622: PUSH
24623: LD_INT 1
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PUSH
24630: LD_INT 3
24632: PUSH
24633: LD_INT 23
24635: PUSH
24636: LD_INT 0
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: LIST
24651: PPUSH
24652: CALL_OW 69
24656: ST_TO_ADDR
// if not tmp then
24657: LD_VAR 0 2
24661: NOT
24662: IFFALSE 24666
// exit ;
24664: GO 24715
// for i in tmp do
24666: LD_ADDR_VAR 0 1
24670: PUSH
24671: LD_VAR 0 2
24675: PUSH
24676: FOR_IN
24677: IFFALSE 24713
// begin if Crawls ( i ) then
24679: LD_VAR 0 1
24683: PPUSH
24684: CALL_OW 318
24688: IFFALSE 24699
// ComWalk ( i ) ;
24690: LD_VAR 0 1
24694: PPUSH
24695: CALL_OW 138
// SetClass ( i , 2 ) ;
24699: LD_VAR 0 1
24703: PPUSH
24704: LD_INT 2
24706: PPUSH
24707: CALL_OW 336
// end ;
24711: GO 24676
24713: POP
24714: POP
// end ;
24715: PPOPN 2
24717: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
24718: LD_EXP 33
24722: PUSH
24723: LD_EXP 86
24727: AND
24728: IFFALSE 25016
24730: GO 24732
24732: DISABLE
24733: LD_INT 0
24735: PPUSH
24736: PPUSH
24737: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
24738: LD_OWVAR 2
24742: PPUSH
24743: LD_INT 9
24745: PPUSH
24746: LD_INT 1
24748: PPUSH
24749: LD_INT 1
24751: PPUSH
24752: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
24756: LD_INT 9
24758: PPUSH
24759: LD_OWVAR 2
24763: PPUSH
24764: CALL_OW 343
// uc_side := 9 ;
24768: LD_ADDR_OWVAR 20
24772: PUSH
24773: LD_INT 9
24775: ST_TO_ADDR
// uc_nation := 2 ;
24776: LD_ADDR_OWVAR 21
24780: PUSH
24781: LD_INT 2
24783: ST_TO_ADDR
// hc_name := Dark Warrior ;
24784: LD_ADDR_OWVAR 26
24788: PUSH
24789: LD_STRING Dark Warrior
24791: ST_TO_ADDR
// hc_gallery :=  ;
24792: LD_ADDR_OWVAR 33
24796: PUSH
24797: LD_STRING 
24799: ST_TO_ADDR
// hc_noskilllimit := true ;
24800: LD_ADDR_OWVAR 76
24804: PUSH
24805: LD_INT 1
24807: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
24808: LD_ADDR_OWVAR 31
24812: PUSH
24813: LD_INT 30
24815: PUSH
24816: LD_INT 30
24818: PUSH
24819: LD_INT 30
24821: PUSH
24822: LD_INT 30
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: ST_TO_ADDR
// un := CreateHuman ;
24831: LD_ADDR_VAR 0 3
24835: PUSH
24836: CALL_OW 44
24840: ST_TO_ADDR
// hc_noskilllimit := false ;
24841: LD_ADDR_OWVAR 76
24845: PUSH
24846: LD_INT 0
24848: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24849: LD_VAR 0 3
24853: PPUSH
24854: LD_INT 1
24856: PPUSH
24857: CALL_OW 51
// ToLua ( playRanger() ) ;
24861: LD_STRING playRanger()
24863: PPUSH
24864: CALL_OW 559
// p := 0 ;
24868: LD_ADDR_VAR 0 2
24872: PUSH
24873: LD_INT 0
24875: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24876: LD_INT 35
24878: PPUSH
24879: CALL_OW 67
// p := p + 1 ;
24883: LD_ADDR_VAR 0 2
24887: PUSH
24888: LD_VAR 0 2
24892: PUSH
24893: LD_INT 1
24895: PLUS
24896: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
24897: LD_VAR 0 3
24901: PPUSH
24902: CALL_OW 256
24906: PUSH
24907: LD_INT 1000
24909: LESS
24910: IFFALSE 24924
// SetLives ( un , 1000 ) ;
24912: LD_VAR 0 3
24916: PPUSH
24917: LD_INT 1000
24919: PPUSH
24920: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
24924: LD_VAR 0 3
24928: PPUSH
24929: LD_INT 81
24931: PUSH
24932: LD_OWVAR 2
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: LD_INT 91
24943: PUSH
24944: LD_VAR 0 3
24948: PUSH
24949: LD_INT 30
24951: PUSH
24952: EMPTY
24953: LIST
24954: LIST
24955: LIST
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: PPUSH
24961: CALL_OW 69
24965: PPUSH
24966: LD_VAR 0 3
24970: PPUSH
24971: CALL_OW 74
24975: PPUSH
24976: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
24980: LD_VAR 0 2
24984: PUSH
24985: LD_INT 80
24987: GREATER
24988: PUSH
24989: LD_VAR 0 3
24993: PPUSH
24994: CALL_OW 301
24998: OR
24999: IFFALSE 24876
// if un then
25001: LD_VAR 0 3
25005: IFFALSE 25016
// RemoveUnit ( un ) ;
25007: LD_VAR 0 3
25011: PPUSH
25012: CALL_OW 64
// end ;
25016: PPOPN 3
25018: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
25019: LD_EXP 87
25023: IFFALSE 25139
25025: GO 25027
25027: DISABLE
25028: LD_INT 0
25030: PPUSH
25031: PPUSH
25032: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25033: LD_ADDR_VAR 0 2
25037: PUSH
25038: LD_INT 81
25040: PUSH
25041: LD_OWVAR 2
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: PUSH
25050: LD_INT 21
25052: PUSH
25053: LD_INT 1
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: PPUSH
25064: CALL_OW 69
25068: ST_TO_ADDR
// ToLua ( playComputer() ) ;
25069: LD_STRING playComputer()
25071: PPUSH
25072: CALL_OW 559
// if not tmp then
25076: LD_VAR 0 2
25080: NOT
25081: IFFALSE 25085
// exit ;
25083: GO 25139
// for i in tmp do
25085: LD_ADDR_VAR 0 1
25089: PUSH
25090: LD_VAR 0 2
25094: PUSH
25095: FOR_IN
25096: IFFALSE 25137
// for j := 1 to 4 do
25098: LD_ADDR_VAR 0 3
25102: PUSH
25103: DOUBLE
25104: LD_INT 1
25106: DEC
25107: ST_TO_ADDR
25108: LD_INT 4
25110: PUSH
25111: FOR_TO
25112: IFFALSE 25133
// SetSkill ( i , j , 10 ) ;
25114: LD_VAR 0 1
25118: PPUSH
25119: LD_VAR 0 3
25123: PPUSH
25124: LD_INT 10
25126: PPUSH
25127: CALL_OW 237
25131: GO 25111
25133: POP
25134: POP
25135: GO 25095
25137: POP
25138: POP
// end ;
25139: PPOPN 3
25141: END
// every 0 0$1 trigger s30 do var i , tmp ;
25142: LD_EXP 88
25146: IFFALSE 25215
25148: GO 25150
25150: DISABLE
25151: LD_INT 0
25153: PPUSH
25154: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25155: LD_ADDR_VAR 0 2
25159: PUSH
25160: LD_INT 22
25162: PUSH
25163: LD_OWVAR 2
25167: PUSH
25168: EMPTY
25169: LIST
25170: LIST
25171: PPUSH
25172: CALL_OW 69
25176: ST_TO_ADDR
// if not tmp then
25177: LD_VAR 0 2
25181: NOT
25182: IFFALSE 25186
// exit ;
25184: GO 25215
// for i in tmp do
25186: LD_ADDR_VAR 0 1
25190: PUSH
25191: LD_VAR 0 2
25195: PUSH
25196: FOR_IN
25197: IFFALSE 25213
// SetLives ( i , 300 ) ;
25199: LD_VAR 0 1
25203: PPUSH
25204: LD_INT 300
25206: PPUSH
25207: CALL_OW 234
25211: GO 25196
25213: POP
25214: POP
// end ;
25215: PPOPN 2
25217: END
// every 0 0$1 trigger s60 do var i , tmp ;
25218: LD_EXP 89
25222: IFFALSE 25291
25224: GO 25226
25226: DISABLE
25227: LD_INT 0
25229: PPUSH
25230: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25231: LD_ADDR_VAR 0 2
25235: PUSH
25236: LD_INT 22
25238: PUSH
25239: LD_OWVAR 2
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: PPUSH
25248: CALL_OW 69
25252: ST_TO_ADDR
// if not tmp then
25253: LD_VAR 0 2
25257: NOT
25258: IFFALSE 25262
// exit ;
25260: GO 25291
// for i in tmp do
25262: LD_ADDR_VAR 0 1
25266: PUSH
25267: LD_VAR 0 2
25271: PUSH
25272: FOR_IN
25273: IFFALSE 25289
// SetLives ( i , 600 ) ;
25275: LD_VAR 0 1
25279: PPUSH
25280: LD_INT 600
25282: PPUSH
25283: CALL_OW 234
25287: GO 25272
25289: POP
25290: POP
// end ;
25291: PPOPN 2
25293: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
25294: LD_INT 0
25296: PPUSH
// case cmd of 301 :
25297: LD_VAR 0 1
25301: PUSH
25302: LD_INT 301
25304: DOUBLE
25305: EQUAL
25306: IFTRUE 25310
25308: GO 25342
25310: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
25311: LD_VAR 0 6
25315: PPUSH
25316: LD_VAR 0 7
25320: PPUSH
25321: LD_VAR 0 8
25325: PPUSH
25326: LD_VAR 0 4
25330: PPUSH
25331: LD_VAR 0 5
25335: PPUSH
25336: CALL 26543 0 5
25340: GO 25463
25342: LD_INT 302
25344: DOUBLE
25345: EQUAL
25346: IFTRUE 25350
25348: GO 25387
25350: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
25351: LD_VAR 0 6
25355: PPUSH
25356: LD_VAR 0 7
25360: PPUSH
25361: LD_VAR 0 8
25365: PPUSH
25366: LD_VAR 0 9
25370: PPUSH
25371: LD_VAR 0 4
25375: PPUSH
25376: LD_VAR 0 5
25380: PPUSH
25381: CALL 26634 0 6
25385: GO 25463
25387: LD_INT 303
25389: DOUBLE
25390: EQUAL
25391: IFTRUE 25395
25393: GO 25432
25395: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
25396: LD_VAR 0 6
25400: PPUSH
25401: LD_VAR 0 7
25405: PPUSH
25406: LD_VAR 0 8
25410: PPUSH
25411: LD_VAR 0 9
25415: PPUSH
25416: LD_VAR 0 4
25420: PPUSH
25421: LD_VAR 0 5
25425: PPUSH
25426: CALL 25468 0 6
25430: GO 25463
25432: LD_INT 304
25434: DOUBLE
25435: EQUAL
25436: IFTRUE 25440
25438: GO 25462
25440: POP
// hHackTeleport ( unit , x , y ) ; end ;
25441: LD_VAR 0 2
25445: PPUSH
25446: LD_VAR 0 4
25450: PPUSH
25451: LD_VAR 0 5
25455: PPUSH
25456: CALL 27227 0 3
25460: GO 25463
25462: POP
// end ;
25463: LD_VAR 0 12
25467: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
25468: LD_INT 0
25470: PPUSH
25471: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
25472: LD_VAR 0 1
25476: PUSH
25477: LD_INT 1
25479: LESS
25480: PUSH
25481: LD_VAR 0 1
25485: PUSH
25486: LD_INT 3
25488: GREATER
25489: OR
25490: PUSH
25491: LD_VAR 0 5
25495: PPUSH
25496: LD_VAR 0 6
25500: PPUSH
25501: CALL_OW 428
25505: OR
25506: IFFALSE 25510
// exit ;
25508: GO 26230
// uc_side := your_side ;
25510: LD_ADDR_OWVAR 20
25514: PUSH
25515: LD_OWVAR 2
25519: ST_TO_ADDR
// uc_nation := nation ;
25520: LD_ADDR_OWVAR 21
25524: PUSH
25525: LD_VAR 0 1
25529: ST_TO_ADDR
// bc_level = 1 ;
25530: LD_ADDR_OWVAR 43
25534: PUSH
25535: LD_INT 1
25537: ST_TO_ADDR
// case btype of 1 :
25538: LD_VAR 0 2
25542: PUSH
25543: LD_INT 1
25545: DOUBLE
25546: EQUAL
25547: IFTRUE 25551
25549: GO 25562
25551: POP
// bc_type := b_depot ; 2 :
25552: LD_ADDR_OWVAR 42
25556: PUSH
25557: LD_INT 0
25559: ST_TO_ADDR
25560: GO 26174
25562: LD_INT 2
25564: DOUBLE
25565: EQUAL
25566: IFTRUE 25570
25568: GO 25581
25570: POP
// bc_type := b_warehouse ; 3 :
25571: LD_ADDR_OWVAR 42
25575: PUSH
25576: LD_INT 1
25578: ST_TO_ADDR
25579: GO 26174
25581: LD_INT 3
25583: DOUBLE
25584: EQUAL
25585: IFTRUE 25589
25587: GO 25600
25589: POP
// bc_type := b_lab ; 4 .. 9 :
25590: LD_ADDR_OWVAR 42
25594: PUSH
25595: LD_INT 6
25597: ST_TO_ADDR
25598: GO 26174
25600: LD_INT 4
25602: DOUBLE
25603: GREATEREQUAL
25604: IFFALSE 25612
25606: LD_INT 9
25608: DOUBLE
25609: LESSEQUAL
25610: IFTRUE 25614
25612: GO 25666
25614: POP
// begin bc_type := b_lab_half ;
25615: LD_ADDR_OWVAR 42
25619: PUSH
25620: LD_INT 7
25622: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
25623: LD_ADDR_OWVAR 44
25627: PUSH
25628: LD_INT 10
25630: PUSH
25631: LD_INT 11
25633: PUSH
25634: LD_INT 12
25636: PUSH
25637: LD_INT 15
25639: PUSH
25640: LD_INT 14
25642: PUSH
25643: LD_INT 13
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: PUSH
25654: LD_VAR 0 2
25658: PUSH
25659: LD_INT 3
25661: MINUS
25662: ARRAY
25663: ST_TO_ADDR
// end ; 10 .. 13 :
25664: GO 26174
25666: LD_INT 10
25668: DOUBLE
25669: GREATEREQUAL
25670: IFFALSE 25678
25672: LD_INT 13
25674: DOUBLE
25675: LESSEQUAL
25676: IFTRUE 25680
25678: GO 25757
25680: POP
// begin bc_type := b_lab_full ;
25681: LD_ADDR_OWVAR 42
25685: PUSH
25686: LD_INT 8
25688: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
25689: LD_ADDR_OWVAR 44
25693: PUSH
25694: LD_INT 10
25696: PUSH
25697: LD_INT 12
25699: PUSH
25700: LD_INT 14
25702: PUSH
25703: LD_INT 13
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: PUSH
25712: LD_VAR 0 2
25716: PUSH
25717: LD_INT 9
25719: MINUS
25720: ARRAY
25721: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
25722: LD_ADDR_OWVAR 45
25726: PUSH
25727: LD_INT 11
25729: PUSH
25730: LD_INT 15
25732: PUSH
25733: LD_INT 12
25735: PUSH
25736: LD_INT 15
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: PUSH
25745: LD_VAR 0 2
25749: PUSH
25750: LD_INT 9
25752: MINUS
25753: ARRAY
25754: ST_TO_ADDR
// end ; 14 :
25755: GO 26174
25757: LD_INT 14
25759: DOUBLE
25760: EQUAL
25761: IFTRUE 25765
25763: GO 25776
25765: POP
// bc_type := b_workshop ; 15 :
25766: LD_ADDR_OWVAR 42
25770: PUSH
25771: LD_INT 2
25773: ST_TO_ADDR
25774: GO 26174
25776: LD_INT 15
25778: DOUBLE
25779: EQUAL
25780: IFTRUE 25784
25782: GO 25795
25784: POP
// bc_type := b_factory ; 16 :
25785: LD_ADDR_OWVAR 42
25789: PUSH
25790: LD_INT 3
25792: ST_TO_ADDR
25793: GO 26174
25795: LD_INT 16
25797: DOUBLE
25798: EQUAL
25799: IFTRUE 25803
25801: GO 25814
25803: POP
// bc_type := b_ext_gun ; 17 :
25804: LD_ADDR_OWVAR 42
25808: PUSH
25809: LD_INT 17
25811: ST_TO_ADDR
25812: GO 26174
25814: LD_INT 17
25816: DOUBLE
25817: EQUAL
25818: IFTRUE 25822
25820: GO 25850
25822: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
25823: LD_ADDR_OWVAR 42
25827: PUSH
25828: LD_INT 19
25830: PUSH
25831: LD_INT 23
25833: PUSH
25834: LD_INT 19
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: LIST
25841: PUSH
25842: LD_VAR 0 1
25846: ARRAY
25847: ST_TO_ADDR
25848: GO 26174
25850: LD_INT 18
25852: DOUBLE
25853: EQUAL
25854: IFTRUE 25858
25856: GO 25869
25858: POP
// bc_type := b_ext_radar ; 19 :
25859: LD_ADDR_OWVAR 42
25863: PUSH
25864: LD_INT 20
25866: ST_TO_ADDR
25867: GO 26174
25869: LD_INT 19
25871: DOUBLE
25872: EQUAL
25873: IFTRUE 25877
25875: GO 25888
25877: POP
// bc_type := b_ext_radio ; 20 :
25878: LD_ADDR_OWVAR 42
25882: PUSH
25883: LD_INT 22
25885: ST_TO_ADDR
25886: GO 26174
25888: LD_INT 20
25890: DOUBLE
25891: EQUAL
25892: IFTRUE 25896
25894: GO 25907
25896: POP
// bc_type := b_ext_siberium ; 21 :
25897: LD_ADDR_OWVAR 42
25901: PUSH
25902: LD_INT 21
25904: ST_TO_ADDR
25905: GO 26174
25907: LD_INT 21
25909: DOUBLE
25910: EQUAL
25911: IFTRUE 25915
25913: GO 25926
25915: POP
// bc_type := b_ext_computer ; 22 :
25916: LD_ADDR_OWVAR 42
25920: PUSH
25921: LD_INT 24
25923: ST_TO_ADDR
25924: GO 26174
25926: LD_INT 22
25928: DOUBLE
25929: EQUAL
25930: IFTRUE 25934
25932: GO 25945
25934: POP
// bc_type := b_ext_track ; 23 :
25935: LD_ADDR_OWVAR 42
25939: PUSH
25940: LD_INT 16
25942: ST_TO_ADDR
25943: GO 26174
25945: LD_INT 23
25947: DOUBLE
25948: EQUAL
25949: IFTRUE 25953
25951: GO 25964
25953: POP
// bc_type := b_ext_laser ; 24 :
25954: LD_ADDR_OWVAR 42
25958: PUSH
25959: LD_INT 25
25961: ST_TO_ADDR
25962: GO 26174
25964: LD_INT 24
25966: DOUBLE
25967: EQUAL
25968: IFTRUE 25972
25970: GO 25983
25972: POP
// bc_type := b_control_tower ; 25 :
25973: LD_ADDR_OWVAR 42
25977: PUSH
25978: LD_INT 36
25980: ST_TO_ADDR
25981: GO 26174
25983: LD_INT 25
25985: DOUBLE
25986: EQUAL
25987: IFTRUE 25991
25989: GO 26002
25991: POP
// bc_type := b_breastwork ; 26 :
25992: LD_ADDR_OWVAR 42
25996: PUSH
25997: LD_INT 31
25999: ST_TO_ADDR
26000: GO 26174
26002: LD_INT 26
26004: DOUBLE
26005: EQUAL
26006: IFTRUE 26010
26008: GO 26021
26010: POP
// bc_type := b_bunker ; 27 :
26011: LD_ADDR_OWVAR 42
26015: PUSH
26016: LD_INT 32
26018: ST_TO_ADDR
26019: GO 26174
26021: LD_INT 27
26023: DOUBLE
26024: EQUAL
26025: IFTRUE 26029
26027: GO 26040
26029: POP
// bc_type := b_turret ; 28 :
26030: LD_ADDR_OWVAR 42
26034: PUSH
26035: LD_INT 33
26037: ST_TO_ADDR
26038: GO 26174
26040: LD_INT 28
26042: DOUBLE
26043: EQUAL
26044: IFTRUE 26048
26046: GO 26059
26048: POP
// bc_type := b_armoury ; 29 :
26049: LD_ADDR_OWVAR 42
26053: PUSH
26054: LD_INT 4
26056: ST_TO_ADDR
26057: GO 26174
26059: LD_INT 29
26061: DOUBLE
26062: EQUAL
26063: IFTRUE 26067
26065: GO 26078
26067: POP
// bc_type := b_barracks ; 30 :
26068: LD_ADDR_OWVAR 42
26072: PUSH
26073: LD_INT 5
26075: ST_TO_ADDR
26076: GO 26174
26078: LD_INT 30
26080: DOUBLE
26081: EQUAL
26082: IFTRUE 26086
26084: GO 26097
26086: POP
// bc_type := b_solar_power ; 31 :
26087: LD_ADDR_OWVAR 42
26091: PUSH
26092: LD_INT 27
26094: ST_TO_ADDR
26095: GO 26174
26097: LD_INT 31
26099: DOUBLE
26100: EQUAL
26101: IFTRUE 26105
26103: GO 26116
26105: POP
// bc_type := b_oil_power ; 32 :
26106: LD_ADDR_OWVAR 42
26110: PUSH
26111: LD_INT 26
26113: ST_TO_ADDR
26114: GO 26174
26116: LD_INT 32
26118: DOUBLE
26119: EQUAL
26120: IFTRUE 26124
26122: GO 26135
26124: POP
// bc_type := b_siberite_power ; 33 :
26125: LD_ADDR_OWVAR 42
26129: PUSH
26130: LD_INT 28
26132: ST_TO_ADDR
26133: GO 26174
26135: LD_INT 33
26137: DOUBLE
26138: EQUAL
26139: IFTRUE 26143
26141: GO 26154
26143: POP
// bc_type := b_oil_mine ; 34 :
26144: LD_ADDR_OWVAR 42
26148: PUSH
26149: LD_INT 29
26151: ST_TO_ADDR
26152: GO 26174
26154: LD_INT 34
26156: DOUBLE
26157: EQUAL
26158: IFTRUE 26162
26160: GO 26173
26162: POP
// bc_type := b_siberite_mine ; end ;
26163: LD_ADDR_OWVAR 42
26167: PUSH
26168: LD_INT 30
26170: ST_TO_ADDR
26171: GO 26174
26173: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
26174: LD_ADDR_VAR 0 8
26178: PUSH
26179: LD_VAR 0 5
26183: PPUSH
26184: LD_VAR 0 6
26188: PPUSH
26189: LD_VAR 0 3
26193: PPUSH
26194: CALL_OW 47
26198: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
26199: LD_OWVAR 42
26203: PUSH
26204: LD_INT 32
26206: PUSH
26207: LD_INT 33
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: IN
26214: IFFALSE 26230
// PlaceWeaponTurret ( b , weapon ) ;
26216: LD_VAR 0 8
26220: PPUSH
26221: LD_VAR 0 4
26225: PPUSH
26226: CALL_OW 431
// end ;
26230: LD_VAR 0 7
26234: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
26235: LD_INT 0
26237: PPUSH
26238: PPUSH
26239: PPUSH
26240: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26241: LD_ADDR_VAR 0 4
26245: PUSH
26246: LD_INT 22
26248: PUSH
26249: LD_OWVAR 2
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: PUSH
26258: LD_INT 2
26260: PUSH
26261: LD_INT 30
26263: PUSH
26264: LD_INT 0
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: PUSH
26271: LD_INT 30
26273: PUSH
26274: LD_INT 1
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PUSH
26281: EMPTY
26282: LIST
26283: LIST
26284: LIST
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: PPUSH
26290: CALL_OW 69
26294: ST_TO_ADDR
// if not tmp then
26295: LD_VAR 0 4
26299: NOT
26300: IFFALSE 26304
// exit ;
26302: GO 26363
// for i in tmp do
26304: LD_ADDR_VAR 0 2
26308: PUSH
26309: LD_VAR 0 4
26313: PUSH
26314: FOR_IN
26315: IFFALSE 26361
// for j = 1 to 3 do
26317: LD_ADDR_VAR 0 3
26321: PUSH
26322: DOUBLE
26323: LD_INT 1
26325: DEC
26326: ST_TO_ADDR
26327: LD_INT 3
26329: PUSH
26330: FOR_TO
26331: IFFALSE 26357
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
26333: LD_VAR 0 2
26337: PPUSH
26338: CALL_OW 274
26342: PPUSH
26343: LD_VAR 0 3
26347: PPUSH
26348: LD_INT 99999
26350: PPUSH
26351: CALL_OW 277
26355: GO 26330
26357: POP
26358: POP
26359: GO 26314
26361: POP
26362: POP
// end ;
26363: LD_VAR 0 1
26367: RET
// export function hHackSetLevel10 ; var i , j ; begin
26368: LD_INT 0
26370: PPUSH
26371: PPUSH
26372: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26373: LD_ADDR_VAR 0 2
26377: PUSH
26378: LD_INT 21
26380: PUSH
26381: LD_INT 1
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: PPUSH
26388: CALL_OW 69
26392: PUSH
26393: FOR_IN
26394: IFFALSE 26446
// if IsSelected ( i ) then
26396: LD_VAR 0 2
26400: PPUSH
26401: CALL_OW 306
26405: IFFALSE 26444
// begin for j := 1 to 4 do
26407: LD_ADDR_VAR 0 3
26411: PUSH
26412: DOUBLE
26413: LD_INT 1
26415: DEC
26416: ST_TO_ADDR
26417: LD_INT 4
26419: PUSH
26420: FOR_TO
26421: IFFALSE 26442
// SetSkill ( i , j , 10 ) ;
26423: LD_VAR 0 2
26427: PPUSH
26428: LD_VAR 0 3
26432: PPUSH
26433: LD_INT 10
26435: PPUSH
26436: CALL_OW 237
26440: GO 26420
26442: POP
26443: POP
// end ;
26444: GO 26393
26446: POP
26447: POP
// end ;
26448: LD_VAR 0 1
26452: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
26453: LD_INT 0
26455: PPUSH
26456: PPUSH
26457: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
26458: LD_ADDR_VAR 0 2
26462: PUSH
26463: LD_INT 22
26465: PUSH
26466: LD_OWVAR 2
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: LD_INT 21
26477: PUSH
26478: LD_INT 1
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: PPUSH
26489: CALL_OW 69
26493: PUSH
26494: FOR_IN
26495: IFFALSE 26536
// begin for j := 1 to 4 do
26497: LD_ADDR_VAR 0 3
26501: PUSH
26502: DOUBLE
26503: LD_INT 1
26505: DEC
26506: ST_TO_ADDR
26507: LD_INT 4
26509: PUSH
26510: FOR_TO
26511: IFFALSE 26532
// SetSkill ( i , j , 10 ) ;
26513: LD_VAR 0 2
26517: PPUSH
26518: LD_VAR 0 3
26522: PPUSH
26523: LD_INT 10
26525: PPUSH
26526: CALL_OW 237
26530: GO 26510
26532: POP
26533: POP
// end ;
26534: GO 26494
26536: POP
26537: POP
// end ;
26538: LD_VAR 0 1
26542: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
26543: LD_INT 0
26545: PPUSH
// uc_side := your_side ;
26546: LD_ADDR_OWVAR 20
26550: PUSH
26551: LD_OWVAR 2
26555: ST_TO_ADDR
// uc_nation := nation ;
26556: LD_ADDR_OWVAR 21
26560: PUSH
26561: LD_VAR 0 1
26565: ST_TO_ADDR
// InitHc ;
26566: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
26570: LD_INT 0
26572: PPUSH
26573: LD_VAR 0 2
26577: PPUSH
26578: LD_VAR 0 3
26582: PPUSH
26583: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
26587: LD_VAR 0 4
26591: PPUSH
26592: LD_VAR 0 5
26596: PPUSH
26597: CALL_OW 428
26601: PUSH
26602: LD_INT 0
26604: EQUAL
26605: IFFALSE 26629
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
26607: CALL_OW 44
26611: PPUSH
26612: LD_VAR 0 4
26616: PPUSH
26617: LD_VAR 0 5
26621: PPUSH
26622: LD_INT 1
26624: PPUSH
26625: CALL_OW 48
// end ;
26629: LD_VAR 0 6
26633: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
26634: LD_INT 0
26636: PPUSH
26637: PPUSH
// uc_side := your_side ;
26638: LD_ADDR_OWVAR 20
26642: PUSH
26643: LD_OWVAR 2
26647: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
26648: LD_VAR 0 1
26652: PUSH
26653: LD_INT 1
26655: PUSH
26656: LD_INT 2
26658: PUSH
26659: LD_INT 3
26661: PUSH
26662: LD_INT 4
26664: PUSH
26665: LD_INT 5
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: LIST
26672: LIST
26673: LIST
26674: IN
26675: IFFALSE 26687
// uc_nation := nation_american else
26677: LD_ADDR_OWVAR 21
26681: PUSH
26682: LD_INT 1
26684: ST_TO_ADDR
26685: GO 26730
// if chassis in [ 11 , 12 , 13 , 14 ] then
26687: LD_VAR 0 1
26691: PUSH
26692: LD_INT 11
26694: PUSH
26695: LD_INT 12
26697: PUSH
26698: LD_INT 13
26700: PUSH
26701: LD_INT 14
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: IN
26710: IFFALSE 26722
// uc_nation := nation_arabian else
26712: LD_ADDR_OWVAR 21
26716: PUSH
26717: LD_INT 2
26719: ST_TO_ADDR
26720: GO 26730
// uc_nation := nation_russian ;
26722: LD_ADDR_OWVAR 21
26726: PUSH
26727: LD_INT 3
26729: ST_TO_ADDR
// vc_chassis := chassis ;
26730: LD_ADDR_OWVAR 37
26734: PUSH
26735: LD_VAR 0 1
26739: ST_TO_ADDR
// vc_engine := engine ;
26740: LD_ADDR_OWVAR 39
26744: PUSH
26745: LD_VAR 0 2
26749: ST_TO_ADDR
// vc_control := control ;
26750: LD_ADDR_OWVAR 38
26754: PUSH
26755: LD_VAR 0 3
26759: ST_TO_ADDR
// vc_weapon := weapon ;
26760: LD_ADDR_OWVAR 40
26764: PUSH
26765: LD_VAR 0 4
26769: ST_TO_ADDR
// un := CreateVehicle ;
26770: LD_ADDR_VAR 0 8
26774: PUSH
26775: CALL_OW 45
26779: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
26780: LD_VAR 0 8
26784: PPUSH
26785: LD_INT 0
26787: PPUSH
26788: LD_INT 5
26790: PPUSH
26791: CALL_OW 12
26795: PPUSH
26796: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
26800: LD_VAR 0 8
26804: PPUSH
26805: LD_VAR 0 5
26809: PPUSH
26810: LD_VAR 0 6
26814: PPUSH
26815: LD_INT 1
26817: PPUSH
26818: CALL_OW 48
// end ;
26822: LD_VAR 0 7
26826: RET
// export hInvincible ; every 1 do
26827: GO 26829
26829: DISABLE
// hInvincible := [ ] ;
26830: LD_ADDR_EXP 90
26834: PUSH
26835: EMPTY
26836: ST_TO_ADDR
26837: END
// every 10 do var i ;
26838: GO 26840
26840: DISABLE
26841: LD_INT 0
26843: PPUSH
// begin enable ;
26844: ENABLE
// if not hInvincible then
26845: LD_EXP 90
26849: NOT
26850: IFFALSE 26854
// exit ;
26852: GO 26898
// for i in hInvincible do
26854: LD_ADDR_VAR 0 1
26858: PUSH
26859: LD_EXP 90
26863: PUSH
26864: FOR_IN
26865: IFFALSE 26896
// if GetLives ( i ) < 1000 then
26867: LD_VAR 0 1
26871: PPUSH
26872: CALL_OW 256
26876: PUSH
26877: LD_INT 1000
26879: LESS
26880: IFFALSE 26894
// SetLives ( i , 1000 ) ;
26882: LD_VAR 0 1
26886: PPUSH
26887: LD_INT 1000
26889: PPUSH
26890: CALL_OW 234
26894: GO 26864
26896: POP
26897: POP
// end ;
26898: PPOPN 1
26900: END
// export function hHackInvincible ; var i ; begin
26901: LD_INT 0
26903: PPUSH
26904: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
26905: LD_ADDR_VAR 0 2
26909: PUSH
26910: LD_INT 2
26912: PUSH
26913: LD_INT 21
26915: PUSH
26916: LD_INT 1
26918: PUSH
26919: EMPTY
26920: LIST
26921: LIST
26922: PUSH
26923: LD_INT 21
26925: PUSH
26926: LD_INT 2
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: LIST
26937: PPUSH
26938: CALL_OW 69
26942: PUSH
26943: FOR_IN
26944: IFFALSE 27005
// if IsSelected ( i ) then
26946: LD_VAR 0 2
26950: PPUSH
26951: CALL_OW 306
26955: IFFALSE 27003
// begin if i in hInvincible then
26957: LD_VAR 0 2
26961: PUSH
26962: LD_EXP 90
26966: IN
26967: IFFALSE 26987
// hInvincible := hInvincible diff i else
26969: LD_ADDR_EXP 90
26973: PUSH
26974: LD_EXP 90
26978: PUSH
26979: LD_VAR 0 2
26983: DIFF
26984: ST_TO_ADDR
26985: GO 27003
// hInvincible := hInvincible union i ;
26987: LD_ADDR_EXP 90
26991: PUSH
26992: LD_EXP 90
26996: PUSH
26997: LD_VAR 0 2
27001: UNION
27002: ST_TO_ADDR
// end ;
27003: GO 26943
27005: POP
27006: POP
// end ;
27007: LD_VAR 0 1
27011: RET
// export function hHackInvisible ; var i , j ; begin
27012: LD_INT 0
27014: PPUSH
27015: PPUSH
27016: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27017: LD_ADDR_VAR 0 2
27021: PUSH
27022: LD_INT 21
27024: PUSH
27025: LD_INT 1
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: PPUSH
27032: CALL_OW 69
27036: PUSH
27037: FOR_IN
27038: IFFALSE 27062
// if IsSelected ( i ) then
27040: LD_VAR 0 2
27044: PPUSH
27045: CALL_OW 306
27049: IFFALSE 27060
// ComForceInvisible ( i ) ;
27051: LD_VAR 0 2
27055: PPUSH
27056: CALL_OW 496
27060: GO 27037
27062: POP
27063: POP
// end ;
27064: LD_VAR 0 1
27068: RET
// export function hHackChangeYourSide ; begin
27069: LD_INT 0
27071: PPUSH
// if your_side = 8 then
27072: LD_OWVAR 2
27076: PUSH
27077: LD_INT 8
27079: EQUAL
27080: IFFALSE 27092
// your_side := 0 else
27082: LD_ADDR_OWVAR 2
27086: PUSH
27087: LD_INT 0
27089: ST_TO_ADDR
27090: GO 27106
// your_side := your_side + 1 ;
27092: LD_ADDR_OWVAR 2
27096: PUSH
27097: LD_OWVAR 2
27101: PUSH
27102: LD_INT 1
27104: PLUS
27105: ST_TO_ADDR
// end ;
27106: LD_VAR 0 1
27110: RET
// export function hHackChangeUnitSide ; var i , j ; begin
27111: LD_INT 0
27113: PPUSH
27114: PPUSH
27115: PPUSH
// for i in all_units do
27116: LD_ADDR_VAR 0 2
27120: PUSH
27121: LD_OWVAR 3
27125: PUSH
27126: FOR_IN
27127: IFFALSE 27205
// if IsSelected ( i ) then
27129: LD_VAR 0 2
27133: PPUSH
27134: CALL_OW 306
27138: IFFALSE 27203
// begin j := GetSide ( i ) ;
27140: LD_ADDR_VAR 0 3
27144: PUSH
27145: LD_VAR 0 2
27149: PPUSH
27150: CALL_OW 255
27154: ST_TO_ADDR
// if j = 8 then
27155: LD_VAR 0 3
27159: PUSH
27160: LD_INT 8
27162: EQUAL
27163: IFFALSE 27175
// j := 0 else
27165: LD_ADDR_VAR 0 3
27169: PUSH
27170: LD_INT 0
27172: ST_TO_ADDR
27173: GO 27189
// j := j + 1 ;
27175: LD_ADDR_VAR 0 3
27179: PUSH
27180: LD_VAR 0 3
27184: PUSH
27185: LD_INT 1
27187: PLUS
27188: ST_TO_ADDR
// SetSide ( i , j ) ;
27189: LD_VAR 0 2
27193: PPUSH
27194: LD_VAR 0 3
27198: PPUSH
27199: CALL_OW 235
// end ;
27203: GO 27126
27205: POP
27206: POP
// end ;
27207: LD_VAR 0 1
27211: RET
// export function hHackFog ; begin
27212: LD_INT 0
27214: PPUSH
// FogOff ( true ) ;
27215: LD_INT 1
27217: PPUSH
27218: CALL_OW 344
// end ;
27222: LD_VAR 0 1
27226: RET
// export function hHackTeleport ( unit , x , y ) ; begin
27227: LD_INT 0
27229: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
27230: LD_VAR 0 1
27234: PPUSH
27235: LD_VAR 0 2
27239: PPUSH
27240: LD_VAR 0 3
27244: PPUSH
27245: LD_INT 1
27247: PPUSH
27248: LD_INT 1
27250: PPUSH
27251: CALL_OW 483
// CenterOnXY ( x , y ) ;
27255: LD_VAR 0 2
27259: PPUSH
27260: LD_VAR 0 3
27264: PPUSH
27265: CALL_OW 84
// end ;
27269: LD_VAR 0 4
27273: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
27274: LD_INT 0
27276: PPUSH
27277: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
27278: LD_VAR 0 1
27282: NOT
27283: PUSH
27284: LD_VAR 0 2
27288: PPUSH
27289: LD_VAR 0 3
27293: PPUSH
27294: CALL_OW 488
27298: NOT
27299: OR
27300: PUSH
27301: LD_VAR 0 1
27305: PPUSH
27306: CALL_OW 266
27310: PUSH
27311: LD_INT 3
27313: NONEQUAL
27314: PUSH
27315: LD_VAR 0 1
27319: PPUSH
27320: CALL_OW 247
27324: PUSH
27325: LD_INT 1
27327: EQUAL
27328: NOT
27329: AND
27330: OR
27331: IFFALSE 27335
// exit ;
27333: GO 27484
// if GetType ( factory ) = unit_human then
27335: LD_VAR 0 1
27339: PPUSH
27340: CALL_OW 247
27344: PUSH
27345: LD_INT 1
27347: EQUAL
27348: IFFALSE 27365
// factory := IsInUnit ( factory ) ;
27350: LD_ADDR_VAR 0 1
27354: PUSH
27355: LD_VAR 0 1
27359: PPUSH
27360: CALL_OW 310
27364: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
27365: LD_VAR 0 1
27369: PPUSH
27370: CALL_OW 266
27374: PUSH
27375: LD_INT 3
27377: NONEQUAL
27378: IFFALSE 27382
// exit ;
27380: GO 27484
// if HexInfo ( x , y ) = factory then
27382: LD_VAR 0 2
27386: PPUSH
27387: LD_VAR 0 3
27391: PPUSH
27392: CALL_OW 428
27396: PUSH
27397: LD_VAR 0 1
27401: EQUAL
27402: IFFALSE 27429
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
27404: LD_ADDR_EXP 91
27408: PUSH
27409: LD_EXP 91
27413: PPUSH
27414: LD_VAR 0 1
27418: PPUSH
27419: LD_INT 0
27421: PPUSH
27422: CALL_OW 1
27426: ST_TO_ADDR
27427: GO 27480
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
27429: LD_ADDR_EXP 91
27433: PUSH
27434: LD_EXP 91
27438: PPUSH
27439: LD_VAR 0 1
27443: PPUSH
27444: LD_VAR 0 1
27448: PPUSH
27449: CALL_OW 255
27453: PUSH
27454: LD_VAR 0 1
27458: PUSH
27459: LD_VAR 0 2
27463: PUSH
27464: LD_VAR 0 3
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: LIST
27473: LIST
27474: PPUSH
27475: CALL_OW 1
27479: ST_TO_ADDR
// UpdateFactoryWaypoints ;
27480: CALL 27489 0 0
// end ;
27484: LD_VAR 0 4
27488: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
27489: LD_INT 0
27491: PPUSH
27492: PPUSH
27493: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
27494: LD_STRING resetFactoryWaypoint();
27496: PPUSH
27497: CALL_OW 559
// if factoryWaypoints then
27501: LD_EXP 91
27505: IFFALSE 27631
// begin list := PrepareArray ( factoryWaypoints ) ;
27507: LD_ADDR_VAR 0 3
27511: PUSH
27512: LD_EXP 91
27516: PPUSH
27517: CALL 74100 0 1
27521: ST_TO_ADDR
// for i := 1 to list do
27522: LD_ADDR_VAR 0 2
27526: PUSH
27527: DOUBLE
27528: LD_INT 1
27530: DEC
27531: ST_TO_ADDR
27532: LD_VAR 0 3
27536: PUSH
27537: FOR_TO
27538: IFFALSE 27629
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27540: LD_STRING setFactoryWaypointXY(
27542: PUSH
27543: LD_VAR 0 3
27547: PUSH
27548: LD_VAR 0 2
27552: ARRAY
27553: PUSH
27554: LD_INT 1
27556: ARRAY
27557: STR
27558: PUSH
27559: LD_STRING ,
27561: STR
27562: PUSH
27563: LD_VAR 0 3
27567: PUSH
27568: LD_VAR 0 2
27572: ARRAY
27573: PUSH
27574: LD_INT 2
27576: ARRAY
27577: STR
27578: PUSH
27579: LD_STRING ,
27581: STR
27582: PUSH
27583: LD_VAR 0 3
27587: PUSH
27588: LD_VAR 0 2
27592: ARRAY
27593: PUSH
27594: LD_INT 3
27596: ARRAY
27597: STR
27598: PUSH
27599: LD_STRING ,
27601: STR
27602: PUSH
27603: LD_VAR 0 3
27607: PUSH
27608: LD_VAR 0 2
27612: ARRAY
27613: PUSH
27614: LD_INT 4
27616: ARRAY
27617: STR
27618: PUSH
27619: LD_STRING )
27621: STR
27622: PPUSH
27623: CALL_OW 559
27627: GO 27537
27629: POP
27630: POP
// end ; end ;
27631: LD_VAR 0 1
27635: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
27636: LD_INT 0
27638: PPUSH
// if HexInfo ( x , y ) = warehouse then
27639: LD_VAR 0 2
27643: PPUSH
27644: LD_VAR 0 3
27648: PPUSH
27649: CALL_OW 428
27653: PUSH
27654: LD_VAR 0 1
27658: EQUAL
27659: IFFALSE 27686
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
27661: LD_ADDR_EXP 92
27665: PUSH
27666: LD_EXP 92
27670: PPUSH
27671: LD_VAR 0 1
27675: PPUSH
27676: LD_INT 0
27678: PPUSH
27679: CALL_OW 1
27683: ST_TO_ADDR
27684: GO 27737
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
27686: LD_ADDR_EXP 92
27690: PUSH
27691: LD_EXP 92
27695: PPUSH
27696: LD_VAR 0 1
27700: PPUSH
27701: LD_VAR 0 1
27705: PPUSH
27706: CALL_OW 255
27710: PUSH
27711: LD_VAR 0 1
27715: PUSH
27716: LD_VAR 0 2
27720: PUSH
27721: LD_VAR 0 3
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: PPUSH
27732: CALL_OW 1
27736: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
27737: CALL 27746 0 0
// end ;
27741: LD_VAR 0 4
27745: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
27746: LD_INT 0
27748: PPUSH
27749: PPUSH
27750: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
27751: LD_STRING resetWarehouseGatheringPoints();
27753: PPUSH
27754: CALL_OW 559
// if warehouseGatheringPoints then
27758: LD_EXP 92
27762: IFFALSE 27888
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
27764: LD_ADDR_VAR 0 3
27768: PUSH
27769: LD_EXP 92
27773: PPUSH
27774: CALL 74100 0 1
27778: ST_TO_ADDR
// for i := 1 to list do
27779: LD_ADDR_VAR 0 2
27783: PUSH
27784: DOUBLE
27785: LD_INT 1
27787: DEC
27788: ST_TO_ADDR
27789: LD_VAR 0 3
27793: PUSH
27794: FOR_TO
27795: IFFALSE 27886
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27797: LD_STRING setWarehouseGatheringPointXY(
27799: PUSH
27800: LD_VAR 0 3
27804: PUSH
27805: LD_VAR 0 2
27809: ARRAY
27810: PUSH
27811: LD_INT 1
27813: ARRAY
27814: STR
27815: PUSH
27816: LD_STRING ,
27818: STR
27819: PUSH
27820: LD_VAR 0 3
27824: PUSH
27825: LD_VAR 0 2
27829: ARRAY
27830: PUSH
27831: LD_INT 2
27833: ARRAY
27834: STR
27835: PUSH
27836: LD_STRING ,
27838: STR
27839: PUSH
27840: LD_VAR 0 3
27844: PUSH
27845: LD_VAR 0 2
27849: ARRAY
27850: PUSH
27851: LD_INT 3
27853: ARRAY
27854: STR
27855: PUSH
27856: LD_STRING ,
27858: STR
27859: PUSH
27860: LD_VAR 0 3
27864: PUSH
27865: LD_VAR 0 2
27869: ARRAY
27870: PUSH
27871: LD_INT 4
27873: ARRAY
27874: STR
27875: PUSH
27876: LD_STRING )
27878: STR
27879: PPUSH
27880: CALL_OW 559
27884: GO 27794
27886: POP
27887: POP
// end ; end ;
27888: LD_VAR 0 1
27892: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
27893: LD_EXP 92
27897: IFFALSE 28582
27899: GO 27901
27901: DISABLE
27902: LD_INT 0
27904: PPUSH
27905: PPUSH
27906: PPUSH
27907: PPUSH
27908: PPUSH
27909: PPUSH
27910: PPUSH
27911: PPUSH
27912: PPUSH
// begin enable ;
27913: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
27914: LD_ADDR_VAR 0 3
27918: PUSH
27919: LD_EXP 92
27923: PPUSH
27924: CALL 74100 0 1
27928: ST_TO_ADDR
// if not list then
27929: LD_VAR 0 3
27933: NOT
27934: IFFALSE 27938
// exit ;
27936: GO 28582
// for i := 1 to list do
27938: LD_ADDR_VAR 0 1
27942: PUSH
27943: DOUBLE
27944: LD_INT 1
27946: DEC
27947: ST_TO_ADDR
27948: LD_VAR 0 3
27952: PUSH
27953: FOR_TO
27954: IFFALSE 28580
// begin depot := list [ i ] [ 2 ] ;
27956: LD_ADDR_VAR 0 8
27960: PUSH
27961: LD_VAR 0 3
27965: PUSH
27966: LD_VAR 0 1
27970: ARRAY
27971: PUSH
27972: LD_INT 2
27974: ARRAY
27975: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
27976: LD_ADDR_VAR 0 5
27980: PUSH
27981: LD_VAR 0 3
27985: PUSH
27986: LD_VAR 0 1
27990: ARRAY
27991: PUSH
27992: LD_INT 1
27994: ARRAY
27995: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
27996: LD_VAR 0 8
28000: PPUSH
28001: CALL_OW 301
28005: PUSH
28006: LD_VAR 0 5
28010: PUSH
28011: LD_VAR 0 8
28015: PPUSH
28016: CALL_OW 255
28020: NONEQUAL
28021: OR
28022: IFFALSE 28051
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
28024: LD_ADDR_EXP 92
28028: PUSH
28029: LD_EXP 92
28033: PPUSH
28034: LD_VAR 0 8
28038: PPUSH
28039: LD_INT 0
28041: PPUSH
28042: CALL_OW 1
28046: ST_TO_ADDR
// exit ;
28047: POP
28048: POP
28049: GO 28582
// end ; x := list [ i ] [ 3 ] ;
28051: LD_ADDR_VAR 0 6
28055: PUSH
28056: LD_VAR 0 3
28060: PUSH
28061: LD_VAR 0 1
28065: ARRAY
28066: PUSH
28067: LD_INT 3
28069: ARRAY
28070: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
28071: LD_ADDR_VAR 0 7
28075: PUSH
28076: LD_VAR 0 3
28080: PUSH
28081: LD_VAR 0 1
28085: ARRAY
28086: PUSH
28087: LD_INT 4
28089: ARRAY
28090: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
28091: LD_ADDR_VAR 0 9
28095: PUSH
28096: LD_VAR 0 6
28100: PPUSH
28101: LD_VAR 0 7
28105: PPUSH
28106: LD_INT 16
28108: PPUSH
28109: CALL 72688 0 3
28113: ST_TO_ADDR
// if not cratesNearbyPoint then
28114: LD_VAR 0 9
28118: NOT
28119: IFFALSE 28125
// exit ;
28121: POP
28122: POP
28123: GO 28582
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
28125: LD_ADDR_VAR 0 4
28129: PUSH
28130: LD_INT 22
28132: PUSH
28133: LD_VAR 0 5
28137: PUSH
28138: EMPTY
28139: LIST
28140: LIST
28141: PUSH
28142: LD_INT 3
28144: PUSH
28145: LD_INT 60
28147: PUSH
28148: EMPTY
28149: LIST
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: LD_INT 91
28157: PUSH
28158: LD_VAR 0 8
28162: PUSH
28163: LD_INT 6
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: LIST
28170: PUSH
28171: LD_INT 2
28173: PUSH
28174: LD_INT 25
28176: PUSH
28177: LD_INT 2
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PUSH
28184: LD_INT 25
28186: PUSH
28187: LD_INT 16
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: LIST
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: LIST
28203: LIST
28204: PPUSH
28205: CALL_OW 69
28209: PUSH
28210: LD_VAR 0 8
28214: PPUSH
28215: CALL_OW 313
28219: PPUSH
28220: LD_INT 3
28222: PUSH
28223: LD_INT 60
28225: PUSH
28226: EMPTY
28227: LIST
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: PUSH
28233: LD_INT 2
28235: PUSH
28236: LD_INT 25
28238: PUSH
28239: LD_INT 2
28241: PUSH
28242: EMPTY
28243: LIST
28244: LIST
28245: PUSH
28246: LD_INT 25
28248: PUSH
28249: LD_INT 16
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: LIST
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: PPUSH
28265: CALL_OW 72
28269: UNION
28270: ST_TO_ADDR
// if tmp then
28271: LD_VAR 0 4
28275: IFFALSE 28355
// begin tmp := ShrinkArray ( tmp , 3 ) ;
28277: LD_ADDR_VAR 0 4
28281: PUSH
28282: LD_VAR 0 4
28286: PPUSH
28287: LD_INT 3
28289: PPUSH
28290: CALL 70657 0 2
28294: ST_TO_ADDR
// for j in tmp do
28295: LD_ADDR_VAR 0 2
28299: PUSH
28300: LD_VAR 0 4
28304: PUSH
28305: FOR_IN
28306: IFFALSE 28349
// begin if IsInUnit ( j ) then
28308: LD_VAR 0 2
28312: PPUSH
28313: CALL_OW 310
28317: IFFALSE 28328
// ComExit ( j ) ;
28319: LD_VAR 0 2
28323: PPUSH
28324: CALL 70740 0 1
// AddComCollect ( j , x , y ) ;
28328: LD_VAR 0 2
28332: PPUSH
28333: LD_VAR 0 6
28337: PPUSH
28338: LD_VAR 0 7
28342: PPUSH
28343: CALL_OW 177
// end ;
28347: GO 28305
28349: POP
28350: POP
// exit ;
28351: POP
28352: POP
28353: GO 28582
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
28355: LD_ADDR_VAR 0 4
28359: PUSH
28360: LD_INT 22
28362: PUSH
28363: LD_VAR 0 5
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PUSH
28372: LD_INT 91
28374: PUSH
28375: LD_VAR 0 8
28379: PUSH
28380: LD_INT 8
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: LIST
28387: PUSH
28388: LD_INT 2
28390: PUSH
28391: LD_INT 34
28393: PUSH
28394: LD_INT 12
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: LD_INT 34
28403: PUSH
28404: LD_INT 51
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: PUSH
28411: LD_INT 34
28413: PUSH
28414: LD_INT 32
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: PUSH
28421: LD_INT 34
28423: PUSH
28424: LD_INT 89
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: LIST
28435: LIST
28436: LIST
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: LIST
28442: PPUSH
28443: CALL_OW 69
28447: ST_TO_ADDR
// if tmp then
28448: LD_VAR 0 4
28452: IFFALSE 28578
// begin for j in tmp do
28454: LD_ADDR_VAR 0 2
28458: PUSH
28459: LD_VAR 0 4
28463: PUSH
28464: FOR_IN
28465: IFFALSE 28576
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
28467: LD_VAR 0 2
28471: PPUSH
28472: CALL_OW 262
28476: PUSH
28477: LD_INT 3
28479: EQUAL
28480: PUSH
28481: LD_VAR 0 2
28485: PPUSH
28486: CALL_OW 261
28490: PUSH
28491: LD_INT 20
28493: GREATER
28494: OR
28495: PUSH
28496: LD_VAR 0 2
28500: PPUSH
28501: CALL_OW 314
28505: NOT
28506: AND
28507: PUSH
28508: LD_VAR 0 2
28512: PPUSH
28513: CALL_OW 263
28517: PUSH
28518: LD_INT 1
28520: NONEQUAL
28521: PUSH
28522: LD_VAR 0 2
28526: PPUSH
28527: CALL_OW 311
28531: OR
28532: AND
28533: IFFALSE 28574
// begin ComCollect ( j , x , y ) ;
28535: LD_VAR 0 2
28539: PPUSH
28540: LD_VAR 0 6
28544: PPUSH
28545: LD_VAR 0 7
28549: PPUSH
28550: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
28554: LD_VAR 0 2
28558: PPUSH
28559: LD_VAR 0 8
28563: PPUSH
28564: CALL_OW 172
// exit ;
28568: POP
28569: POP
28570: POP
28571: POP
28572: GO 28582
// end ;
28574: GO 28464
28576: POP
28577: POP
// end ; end ;
28578: GO 27953
28580: POP
28581: POP
// end ; end_of_file
28582: PPOPN 9
28584: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
28585: LD_INT 0
28587: PPUSH
28588: PPUSH
28589: PPUSH
28590: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
28591: LD_VAR 0 1
28595: PPUSH
28596: CALL_OW 264
28600: PUSH
28601: LD_INT 91
28603: EQUAL
28604: IFFALSE 28676
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28606: LD_INT 68
28608: PPUSH
28609: LD_VAR 0 1
28613: PPUSH
28614: CALL_OW 255
28618: PPUSH
28619: CALL_OW 321
28623: PUSH
28624: LD_INT 2
28626: EQUAL
28627: IFFALSE 28639
// eff := 70 else
28629: LD_ADDR_VAR 0 4
28633: PUSH
28634: LD_INT 70
28636: ST_TO_ADDR
28637: GO 28647
// eff := 30 ;
28639: LD_ADDR_VAR 0 4
28643: PUSH
28644: LD_INT 30
28646: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28647: LD_VAR 0 1
28651: PPUSH
28652: CALL_OW 250
28656: PPUSH
28657: LD_VAR 0 1
28661: PPUSH
28662: CALL_OW 251
28666: PPUSH
28667: LD_VAR 0 4
28671: PPUSH
28672: CALL_OW 495
// end ; end ;
28676: LD_VAR 0 2
28680: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
28681: LD_INT 0
28683: PPUSH
// end ;
28684: LD_VAR 0 4
28688: RET
// export function SOS_Command ( cmd ) ; begin
28689: LD_INT 0
28691: PPUSH
// end ;
28692: LD_VAR 0 2
28696: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
28697: LD_INT 0
28699: PPUSH
// end ;
28700: LD_VAR 0 6
28704: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
28705: LD_INT 0
28707: PPUSH
28708: PPUSH
// if not vehicle or not factory then
28709: LD_VAR 0 1
28713: NOT
28714: PUSH
28715: LD_VAR 0 2
28719: NOT
28720: OR
28721: IFFALSE 28725
// exit ;
28723: GO 28956
// if factoryWaypoints >= factory then
28725: LD_EXP 91
28729: PUSH
28730: LD_VAR 0 2
28734: GREATEREQUAL
28735: IFFALSE 28956
// if factoryWaypoints [ factory ] then
28737: LD_EXP 91
28741: PUSH
28742: LD_VAR 0 2
28746: ARRAY
28747: IFFALSE 28956
// begin if GetControl ( vehicle ) = control_manual then
28749: LD_VAR 0 1
28753: PPUSH
28754: CALL_OW 263
28758: PUSH
28759: LD_INT 1
28761: EQUAL
28762: IFFALSE 28843
// begin driver := IsDrivenBy ( vehicle ) ;
28764: LD_ADDR_VAR 0 4
28768: PUSH
28769: LD_VAR 0 1
28773: PPUSH
28774: CALL_OW 311
28778: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28779: LD_VAR 0 4
28783: PPUSH
28784: LD_EXP 91
28788: PUSH
28789: LD_VAR 0 2
28793: ARRAY
28794: PUSH
28795: LD_INT 3
28797: ARRAY
28798: PPUSH
28799: LD_EXP 91
28803: PUSH
28804: LD_VAR 0 2
28808: ARRAY
28809: PUSH
28810: LD_INT 4
28812: ARRAY
28813: PPUSH
28814: CALL_OW 171
// AddComExitVehicle ( driver ) ;
28818: LD_VAR 0 4
28822: PPUSH
28823: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
28827: LD_VAR 0 4
28831: PPUSH
28832: LD_VAR 0 2
28836: PPUSH
28837: CALL_OW 180
// end else
28841: GO 28956
// if GetControl ( vehicle ) = control_remote then
28843: LD_VAR 0 1
28847: PPUSH
28848: CALL_OW 263
28852: PUSH
28853: LD_INT 2
28855: EQUAL
28856: IFFALSE 28917
// begin wait ( 0 0$2 ) ;
28858: LD_INT 70
28860: PPUSH
28861: CALL_OW 67
// if Connect ( vehicle ) then
28865: LD_VAR 0 1
28869: PPUSH
28870: CALL 40980 0 1
28874: IFFALSE 28915
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28876: LD_VAR 0 1
28880: PPUSH
28881: LD_EXP 91
28885: PUSH
28886: LD_VAR 0 2
28890: ARRAY
28891: PUSH
28892: LD_INT 3
28894: ARRAY
28895: PPUSH
28896: LD_EXP 91
28900: PUSH
28901: LD_VAR 0 2
28905: ARRAY
28906: PUSH
28907: LD_INT 4
28909: ARRAY
28910: PPUSH
28911: CALL_OW 171
// end else
28915: GO 28956
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28917: LD_VAR 0 1
28921: PPUSH
28922: LD_EXP 91
28926: PUSH
28927: LD_VAR 0 2
28931: ARRAY
28932: PUSH
28933: LD_INT 3
28935: ARRAY
28936: PPUSH
28937: LD_EXP 91
28941: PUSH
28942: LD_VAR 0 2
28946: ARRAY
28947: PUSH
28948: LD_INT 4
28950: ARRAY
28951: PPUSH
28952: CALL_OW 171
// end ; end ;
28956: LD_VAR 0 3
28960: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
28961: LD_INT 0
28963: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
28964: LD_VAR 0 1
28968: PUSH
28969: LD_INT 250
28971: EQUAL
28972: PUSH
28973: LD_VAR 0 2
28977: PPUSH
28978: CALL_OW 264
28982: PUSH
28983: LD_INT 81
28985: EQUAL
28986: AND
28987: IFFALSE 29008
// MinerPlaceMine ( unit , x , y ) ;
28989: LD_VAR 0 2
28993: PPUSH
28994: LD_VAR 0 4
28998: PPUSH
28999: LD_VAR 0 5
29003: PPUSH
29004: CALL 31393 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
29008: LD_VAR 0 1
29012: PUSH
29013: LD_INT 251
29015: EQUAL
29016: PUSH
29017: LD_VAR 0 2
29021: PPUSH
29022: CALL_OW 264
29026: PUSH
29027: LD_INT 81
29029: EQUAL
29030: AND
29031: IFFALSE 29052
// MinerDetonateMine ( unit , x , y ) ;
29033: LD_VAR 0 2
29037: PPUSH
29038: LD_VAR 0 4
29042: PPUSH
29043: LD_VAR 0 5
29047: PPUSH
29048: CALL 31668 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
29052: LD_VAR 0 1
29056: PUSH
29057: LD_INT 252
29059: EQUAL
29060: PUSH
29061: LD_VAR 0 2
29065: PPUSH
29066: CALL_OW 264
29070: PUSH
29071: LD_INT 81
29073: EQUAL
29074: AND
29075: IFFALSE 29096
// MinerCreateMinefield ( unit , x , y ) ;
29077: LD_VAR 0 2
29081: PPUSH
29082: LD_VAR 0 4
29086: PPUSH
29087: LD_VAR 0 5
29091: PPUSH
29092: CALL 32085 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
29096: LD_VAR 0 1
29100: PUSH
29101: LD_INT 253
29103: EQUAL
29104: PUSH
29105: LD_VAR 0 2
29109: PPUSH
29110: CALL_OW 257
29114: PUSH
29115: LD_INT 5
29117: EQUAL
29118: AND
29119: IFFALSE 29140
// ComBinocular ( unit , x , y ) ;
29121: LD_VAR 0 2
29125: PPUSH
29126: LD_VAR 0 4
29130: PPUSH
29131: LD_VAR 0 5
29135: PPUSH
29136: CALL 32454 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
29140: LD_VAR 0 1
29144: PUSH
29145: LD_INT 254
29147: EQUAL
29148: PUSH
29149: LD_VAR 0 2
29153: PPUSH
29154: CALL_OW 264
29158: PUSH
29159: LD_INT 99
29161: EQUAL
29162: AND
29163: PUSH
29164: LD_VAR 0 3
29168: PPUSH
29169: CALL_OW 263
29173: PUSH
29174: LD_INT 3
29176: EQUAL
29177: AND
29178: IFFALSE 29194
// HackDestroyVehicle ( unit , selectedUnit ) ;
29180: LD_VAR 0 2
29184: PPUSH
29185: LD_VAR 0 3
29189: PPUSH
29190: CALL 30757 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
29194: LD_VAR 0 1
29198: PUSH
29199: LD_INT 255
29201: EQUAL
29202: PUSH
29203: LD_VAR 0 2
29207: PPUSH
29208: CALL_OW 264
29212: PUSH
29213: LD_INT 14
29215: PUSH
29216: LD_INT 53
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: IN
29223: AND
29224: PUSH
29225: LD_VAR 0 4
29229: PPUSH
29230: LD_VAR 0 5
29234: PPUSH
29235: CALL_OW 488
29239: AND
29240: IFFALSE 29264
// CutTreeXYR ( unit , x , y , 12 ) ;
29242: LD_VAR 0 2
29246: PPUSH
29247: LD_VAR 0 4
29251: PPUSH
29252: LD_VAR 0 5
29256: PPUSH
29257: LD_INT 12
29259: PPUSH
29260: CALL 29327 0 4
// if cmd = 256 then
29264: LD_VAR 0 1
29268: PUSH
29269: LD_INT 256
29271: EQUAL
29272: IFFALSE 29293
// SetFactoryWaypoint ( unit , x , y ) ;
29274: LD_VAR 0 2
29278: PPUSH
29279: LD_VAR 0 4
29283: PPUSH
29284: LD_VAR 0 5
29288: PPUSH
29289: CALL 27274 0 3
// if cmd = 257 then
29293: LD_VAR 0 1
29297: PUSH
29298: LD_INT 257
29300: EQUAL
29301: IFFALSE 29322
// SetWarehouseGatheringPoint ( unit , x , y ) ;
29303: LD_VAR 0 2
29307: PPUSH
29308: LD_VAR 0 4
29312: PPUSH
29313: LD_VAR 0 5
29317: PPUSH
29318: CALL 27636 0 3
// end ;
29322: LD_VAR 0 6
29326: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
29327: LD_INT 0
29329: PPUSH
29330: PPUSH
29331: PPUSH
29332: PPUSH
29333: PPUSH
29334: PPUSH
29335: PPUSH
29336: PPUSH
29337: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
29338: LD_VAR 0 1
29342: NOT
29343: PUSH
29344: LD_VAR 0 2
29348: PPUSH
29349: LD_VAR 0 3
29353: PPUSH
29354: CALL_OW 488
29358: NOT
29359: OR
29360: PUSH
29361: LD_VAR 0 4
29365: NOT
29366: OR
29367: IFFALSE 29371
// exit ;
29369: GO 29711
// list := [ ] ;
29371: LD_ADDR_VAR 0 13
29375: PUSH
29376: EMPTY
29377: ST_TO_ADDR
// if x - r < 0 then
29378: LD_VAR 0 2
29382: PUSH
29383: LD_VAR 0 4
29387: MINUS
29388: PUSH
29389: LD_INT 0
29391: LESS
29392: IFFALSE 29404
// min_x := 0 else
29394: LD_ADDR_VAR 0 7
29398: PUSH
29399: LD_INT 0
29401: ST_TO_ADDR
29402: GO 29420
// min_x := x - r ;
29404: LD_ADDR_VAR 0 7
29408: PUSH
29409: LD_VAR 0 2
29413: PUSH
29414: LD_VAR 0 4
29418: MINUS
29419: ST_TO_ADDR
// if y - r < 0 then
29420: LD_VAR 0 3
29424: PUSH
29425: LD_VAR 0 4
29429: MINUS
29430: PUSH
29431: LD_INT 0
29433: LESS
29434: IFFALSE 29446
// min_y := 0 else
29436: LD_ADDR_VAR 0 8
29440: PUSH
29441: LD_INT 0
29443: ST_TO_ADDR
29444: GO 29462
// min_y := y - r ;
29446: LD_ADDR_VAR 0 8
29450: PUSH
29451: LD_VAR 0 3
29455: PUSH
29456: LD_VAR 0 4
29460: MINUS
29461: ST_TO_ADDR
// max_x := x + r ;
29462: LD_ADDR_VAR 0 9
29466: PUSH
29467: LD_VAR 0 2
29471: PUSH
29472: LD_VAR 0 4
29476: PLUS
29477: ST_TO_ADDR
// max_y := y + r ;
29478: LD_ADDR_VAR 0 10
29482: PUSH
29483: LD_VAR 0 3
29487: PUSH
29488: LD_VAR 0 4
29492: PLUS
29493: ST_TO_ADDR
// for _x = min_x to max_x do
29494: LD_ADDR_VAR 0 11
29498: PUSH
29499: DOUBLE
29500: LD_VAR 0 7
29504: DEC
29505: ST_TO_ADDR
29506: LD_VAR 0 9
29510: PUSH
29511: FOR_TO
29512: IFFALSE 29629
// for _y = min_y to max_y do
29514: LD_ADDR_VAR 0 12
29518: PUSH
29519: DOUBLE
29520: LD_VAR 0 8
29524: DEC
29525: ST_TO_ADDR
29526: LD_VAR 0 10
29530: PUSH
29531: FOR_TO
29532: IFFALSE 29625
// begin if not ValidHex ( _x , _y ) then
29534: LD_VAR 0 11
29538: PPUSH
29539: LD_VAR 0 12
29543: PPUSH
29544: CALL_OW 488
29548: NOT
29549: IFFALSE 29553
// continue ;
29551: GO 29531
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29553: LD_VAR 0 11
29557: PPUSH
29558: LD_VAR 0 12
29562: PPUSH
29563: CALL_OW 351
29567: PUSH
29568: LD_VAR 0 11
29572: PPUSH
29573: LD_VAR 0 12
29577: PPUSH
29578: CALL_OW 554
29582: AND
29583: IFFALSE 29623
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29585: LD_ADDR_VAR 0 13
29589: PUSH
29590: LD_VAR 0 13
29594: PPUSH
29595: LD_VAR 0 13
29599: PUSH
29600: LD_INT 1
29602: PLUS
29603: PPUSH
29604: LD_VAR 0 11
29608: PUSH
29609: LD_VAR 0 12
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: PPUSH
29618: CALL_OW 2
29622: ST_TO_ADDR
// end ;
29623: GO 29531
29625: POP
29626: POP
29627: GO 29511
29629: POP
29630: POP
// if not list then
29631: LD_VAR 0 13
29635: NOT
29636: IFFALSE 29640
// exit ;
29638: GO 29711
// for i in list do
29640: LD_ADDR_VAR 0 6
29644: PUSH
29645: LD_VAR 0 13
29649: PUSH
29650: FOR_IN
29651: IFFALSE 29709
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
29653: LD_VAR 0 1
29657: PPUSH
29658: LD_STRING M
29660: PUSH
29661: LD_VAR 0 6
29665: PUSH
29666: LD_INT 1
29668: ARRAY
29669: PUSH
29670: LD_VAR 0 6
29674: PUSH
29675: LD_INT 2
29677: ARRAY
29678: PUSH
29679: LD_INT 0
29681: PUSH
29682: LD_INT 0
29684: PUSH
29685: LD_INT 0
29687: PUSH
29688: LD_INT 0
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: LIST
29695: LIST
29696: LIST
29697: LIST
29698: LIST
29699: PUSH
29700: EMPTY
29701: LIST
29702: PPUSH
29703: CALL_OW 447
29707: GO 29650
29709: POP
29710: POP
// end ;
29711: LD_VAR 0 5
29715: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29716: LD_EXP 94
29720: NOT
29721: IFFALSE 29771
29723: GO 29725
29725: DISABLE
// begin initHack := true ;
29726: LD_ADDR_EXP 94
29730: PUSH
29731: LD_INT 1
29733: ST_TO_ADDR
// hackTanks := [ ] ;
29734: LD_ADDR_EXP 95
29738: PUSH
29739: EMPTY
29740: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29741: LD_ADDR_EXP 96
29745: PUSH
29746: EMPTY
29747: ST_TO_ADDR
// hackLimit := 3 ;
29748: LD_ADDR_EXP 97
29752: PUSH
29753: LD_INT 3
29755: ST_TO_ADDR
// hackDist := 12 ;
29756: LD_ADDR_EXP 98
29760: PUSH
29761: LD_INT 12
29763: ST_TO_ADDR
// hackCounter := [ ] ;
29764: LD_ADDR_EXP 99
29768: PUSH
29769: EMPTY
29770: ST_TO_ADDR
// end ;
29771: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29772: LD_EXP 94
29776: PUSH
29777: LD_INT 34
29779: PUSH
29780: LD_INT 99
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: PPUSH
29787: CALL_OW 69
29791: AND
29792: IFFALSE 30045
29794: GO 29796
29796: DISABLE
29797: LD_INT 0
29799: PPUSH
29800: PPUSH
// begin enable ;
29801: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29802: LD_ADDR_VAR 0 1
29806: PUSH
29807: LD_INT 34
29809: PUSH
29810: LD_INT 99
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PPUSH
29817: CALL_OW 69
29821: PUSH
29822: FOR_IN
29823: IFFALSE 30043
// begin if not i in hackTanks then
29825: LD_VAR 0 1
29829: PUSH
29830: LD_EXP 95
29834: IN
29835: NOT
29836: IFFALSE 29919
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29838: LD_ADDR_EXP 95
29842: PUSH
29843: LD_EXP 95
29847: PPUSH
29848: LD_EXP 95
29852: PUSH
29853: LD_INT 1
29855: PLUS
29856: PPUSH
29857: LD_VAR 0 1
29861: PPUSH
29862: CALL_OW 1
29866: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29867: LD_ADDR_EXP 96
29871: PUSH
29872: LD_EXP 96
29876: PPUSH
29877: LD_EXP 96
29881: PUSH
29882: LD_INT 1
29884: PLUS
29885: PPUSH
29886: EMPTY
29887: PPUSH
29888: CALL_OW 1
29892: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29893: LD_ADDR_EXP 99
29897: PUSH
29898: LD_EXP 99
29902: PPUSH
29903: LD_EXP 99
29907: PUSH
29908: LD_INT 1
29910: PLUS
29911: PPUSH
29912: EMPTY
29913: PPUSH
29914: CALL_OW 1
29918: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29919: LD_VAR 0 1
29923: PPUSH
29924: CALL_OW 302
29928: NOT
29929: IFFALSE 29942
// begin HackUnlinkAll ( i ) ;
29931: LD_VAR 0 1
29935: PPUSH
29936: CALL 30048 0 1
// continue ;
29940: GO 29822
// end ; HackCheckCapturedStatus ( i ) ;
29942: LD_VAR 0 1
29946: PPUSH
29947: CALL 30491 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29951: LD_ADDR_VAR 0 2
29955: PUSH
29956: LD_INT 81
29958: PUSH
29959: LD_VAR 0 1
29963: PPUSH
29964: CALL_OW 255
29968: PUSH
29969: EMPTY
29970: LIST
29971: LIST
29972: PUSH
29973: LD_INT 33
29975: PUSH
29976: LD_INT 3
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: PUSH
29983: LD_INT 91
29985: PUSH
29986: LD_VAR 0 1
29990: PUSH
29991: LD_EXP 98
29995: PUSH
29996: EMPTY
29997: LIST
29998: LIST
29999: LIST
30000: PUSH
30001: LD_INT 50
30003: PUSH
30004: EMPTY
30005: LIST
30006: PUSH
30007: EMPTY
30008: LIST
30009: LIST
30010: LIST
30011: LIST
30012: PPUSH
30013: CALL_OW 69
30017: ST_TO_ADDR
// if not tmp then
30018: LD_VAR 0 2
30022: NOT
30023: IFFALSE 30027
// continue ;
30025: GO 29822
// HackLink ( i , tmp ) ;
30027: LD_VAR 0 1
30031: PPUSH
30032: LD_VAR 0 2
30036: PPUSH
30037: CALL 30184 0 2
// end ;
30041: GO 29822
30043: POP
30044: POP
// end ;
30045: PPOPN 2
30047: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
30048: LD_INT 0
30050: PPUSH
30051: PPUSH
30052: PPUSH
// if not hack in hackTanks then
30053: LD_VAR 0 1
30057: PUSH
30058: LD_EXP 95
30062: IN
30063: NOT
30064: IFFALSE 30068
// exit ;
30066: GO 30179
// index := GetElementIndex ( hackTanks , hack ) ;
30068: LD_ADDR_VAR 0 4
30072: PUSH
30073: LD_EXP 95
30077: PPUSH
30078: LD_VAR 0 1
30082: PPUSH
30083: CALL 37796 0 2
30087: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
30088: LD_EXP 96
30092: PUSH
30093: LD_VAR 0 4
30097: ARRAY
30098: IFFALSE 30179
// begin for i in hackTanksCaptured [ index ] do
30100: LD_ADDR_VAR 0 3
30104: PUSH
30105: LD_EXP 96
30109: PUSH
30110: LD_VAR 0 4
30114: ARRAY
30115: PUSH
30116: FOR_IN
30117: IFFALSE 30143
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
30119: LD_VAR 0 3
30123: PUSH
30124: LD_INT 1
30126: ARRAY
30127: PPUSH
30128: LD_VAR 0 3
30132: PUSH
30133: LD_INT 2
30135: ARRAY
30136: PPUSH
30137: CALL_OW 235
30141: GO 30116
30143: POP
30144: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
30145: LD_ADDR_EXP 96
30149: PUSH
30150: LD_EXP 96
30154: PPUSH
30155: LD_VAR 0 4
30159: PPUSH
30160: EMPTY
30161: PPUSH
30162: CALL_OW 1
30166: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
30167: LD_VAR 0 1
30171: PPUSH
30172: LD_INT 0
30174: PPUSH
30175: CALL_OW 505
// end ; end ;
30179: LD_VAR 0 2
30183: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
30184: LD_INT 0
30186: PPUSH
30187: PPUSH
30188: PPUSH
// if not hack in hackTanks or not vehicles then
30189: LD_VAR 0 1
30193: PUSH
30194: LD_EXP 95
30198: IN
30199: NOT
30200: PUSH
30201: LD_VAR 0 2
30205: NOT
30206: OR
30207: IFFALSE 30211
// exit ;
30209: GO 30486
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
30211: LD_ADDR_VAR 0 2
30215: PUSH
30216: LD_VAR 0 1
30220: PPUSH
30221: LD_VAR 0 2
30225: PPUSH
30226: LD_INT 1
30228: PPUSH
30229: LD_INT 1
30231: PPUSH
30232: CALL 38446 0 4
30236: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
30237: LD_ADDR_VAR 0 5
30241: PUSH
30242: LD_EXP 95
30246: PPUSH
30247: LD_VAR 0 1
30251: PPUSH
30252: CALL 37796 0 2
30256: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
30257: LD_EXP 96
30261: PUSH
30262: LD_VAR 0 5
30266: ARRAY
30267: PUSH
30268: LD_EXP 97
30272: LESS
30273: IFFALSE 30462
// begin for i := 1 to vehicles do
30275: LD_ADDR_VAR 0 4
30279: PUSH
30280: DOUBLE
30281: LD_INT 1
30283: DEC
30284: ST_TO_ADDR
30285: LD_VAR 0 2
30289: PUSH
30290: FOR_TO
30291: IFFALSE 30460
// begin if hackTanksCaptured [ index ] = hackLimit then
30293: LD_EXP 96
30297: PUSH
30298: LD_VAR 0 5
30302: ARRAY
30303: PUSH
30304: LD_EXP 97
30308: EQUAL
30309: IFFALSE 30313
// break ;
30311: GO 30460
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
30313: LD_ADDR_EXP 99
30317: PUSH
30318: LD_EXP 99
30322: PPUSH
30323: LD_VAR 0 5
30327: PPUSH
30328: LD_EXP 99
30332: PUSH
30333: LD_VAR 0 5
30337: ARRAY
30338: PUSH
30339: LD_INT 1
30341: PLUS
30342: PPUSH
30343: CALL_OW 1
30347: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
30348: LD_ADDR_EXP 96
30352: PUSH
30353: LD_EXP 96
30357: PPUSH
30358: LD_VAR 0 5
30362: PUSH
30363: LD_EXP 96
30367: PUSH
30368: LD_VAR 0 5
30372: ARRAY
30373: PUSH
30374: LD_INT 1
30376: PLUS
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PPUSH
30382: LD_VAR 0 2
30386: PUSH
30387: LD_VAR 0 4
30391: ARRAY
30392: PUSH
30393: LD_VAR 0 2
30397: PUSH
30398: LD_VAR 0 4
30402: ARRAY
30403: PPUSH
30404: CALL_OW 255
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: PPUSH
30413: CALL 38011 0 3
30417: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
30418: LD_VAR 0 2
30422: PUSH
30423: LD_VAR 0 4
30427: ARRAY
30428: PPUSH
30429: LD_VAR 0 1
30433: PPUSH
30434: CALL_OW 255
30438: PPUSH
30439: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
30443: LD_VAR 0 2
30447: PUSH
30448: LD_VAR 0 4
30452: ARRAY
30453: PPUSH
30454: CALL_OW 141
// end ;
30458: GO 30290
30460: POP
30461: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30462: LD_VAR 0 1
30466: PPUSH
30467: LD_EXP 96
30471: PUSH
30472: LD_VAR 0 5
30476: ARRAY
30477: PUSH
30478: LD_INT 0
30480: PLUS
30481: PPUSH
30482: CALL_OW 505
// end ;
30486: LD_VAR 0 3
30490: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
30491: LD_INT 0
30493: PPUSH
30494: PPUSH
30495: PPUSH
30496: PPUSH
// if not hack in hackTanks then
30497: LD_VAR 0 1
30501: PUSH
30502: LD_EXP 95
30506: IN
30507: NOT
30508: IFFALSE 30512
// exit ;
30510: GO 30752
// index := GetElementIndex ( hackTanks , hack ) ;
30512: LD_ADDR_VAR 0 4
30516: PUSH
30517: LD_EXP 95
30521: PPUSH
30522: LD_VAR 0 1
30526: PPUSH
30527: CALL 37796 0 2
30531: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
30532: LD_ADDR_VAR 0 3
30536: PUSH
30537: DOUBLE
30538: LD_EXP 96
30542: PUSH
30543: LD_VAR 0 4
30547: ARRAY
30548: INC
30549: ST_TO_ADDR
30550: LD_INT 1
30552: PUSH
30553: FOR_DOWNTO
30554: IFFALSE 30726
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
30556: LD_ADDR_VAR 0 5
30560: PUSH
30561: LD_EXP 96
30565: PUSH
30566: LD_VAR 0 4
30570: ARRAY
30571: PUSH
30572: LD_VAR 0 3
30576: ARRAY
30577: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
30578: LD_VAR 0 5
30582: PUSH
30583: LD_INT 1
30585: ARRAY
30586: PPUSH
30587: CALL_OW 302
30591: NOT
30592: PUSH
30593: LD_VAR 0 5
30597: PUSH
30598: LD_INT 1
30600: ARRAY
30601: PPUSH
30602: CALL_OW 255
30606: PUSH
30607: LD_VAR 0 1
30611: PPUSH
30612: CALL_OW 255
30616: NONEQUAL
30617: OR
30618: IFFALSE 30724
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30620: LD_VAR 0 5
30624: PUSH
30625: LD_INT 1
30627: ARRAY
30628: PPUSH
30629: CALL_OW 305
30633: PUSH
30634: LD_VAR 0 5
30638: PUSH
30639: LD_INT 1
30641: ARRAY
30642: PPUSH
30643: CALL_OW 255
30647: PUSH
30648: LD_VAR 0 1
30652: PPUSH
30653: CALL_OW 255
30657: EQUAL
30658: AND
30659: IFFALSE 30683
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30661: LD_VAR 0 5
30665: PUSH
30666: LD_INT 1
30668: ARRAY
30669: PPUSH
30670: LD_VAR 0 5
30674: PUSH
30675: LD_INT 2
30677: ARRAY
30678: PPUSH
30679: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30683: LD_ADDR_EXP 96
30687: PUSH
30688: LD_EXP 96
30692: PPUSH
30693: LD_VAR 0 4
30697: PPUSH
30698: LD_EXP 96
30702: PUSH
30703: LD_VAR 0 4
30707: ARRAY
30708: PPUSH
30709: LD_VAR 0 3
30713: PPUSH
30714: CALL_OW 3
30718: PPUSH
30719: CALL_OW 1
30723: ST_TO_ADDR
// end ; end ;
30724: GO 30553
30726: POP
30727: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30728: LD_VAR 0 1
30732: PPUSH
30733: LD_EXP 96
30737: PUSH
30738: LD_VAR 0 4
30742: ARRAY
30743: PUSH
30744: LD_INT 0
30746: PLUS
30747: PPUSH
30748: CALL_OW 505
// end ;
30752: LD_VAR 0 2
30756: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30757: LD_INT 0
30759: PPUSH
30760: PPUSH
30761: PPUSH
30762: PPUSH
// if not hack in hackTanks then
30763: LD_VAR 0 1
30767: PUSH
30768: LD_EXP 95
30772: IN
30773: NOT
30774: IFFALSE 30778
// exit ;
30776: GO 30863
// index := GetElementIndex ( hackTanks , hack ) ;
30778: LD_ADDR_VAR 0 5
30782: PUSH
30783: LD_EXP 95
30787: PPUSH
30788: LD_VAR 0 1
30792: PPUSH
30793: CALL 37796 0 2
30797: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30798: LD_ADDR_VAR 0 4
30802: PUSH
30803: DOUBLE
30804: LD_INT 1
30806: DEC
30807: ST_TO_ADDR
30808: LD_EXP 96
30812: PUSH
30813: LD_VAR 0 5
30817: ARRAY
30818: PUSH
30819: FOR_TO
30820: IFFALSE 30861
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30822: LD_EXP 96
30826: PUSH
30827: LD_VAR 0 5
30831: ARRAY
30832: PUSH
30833: LD_VAR 0 4
30837: ARRAY
30838: PUSH
30839: LD_INT 1
30841: ARRAY
30842: PUSH
30843: LD_VAR 0 2
30847: EQUAL
30848: IFFALSE 30859
// KillUnit ( vehicle ) ;
30850: LD_VAR 0 2
30854: PPUSH
30855: CALL_OW 66
30859: GO 30819
30861: POP
30862: POP
// end ;
30863: LD_VAR 0 3
30867: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
30868: LD_EXP 100
30872: NOT
30873: IFFALSE 30908
30875: GO 30877
30877: DISABLE
// begin initMiner := true ;
30878: LD_ADDR_EXP 100
30882: PUSH
30883: LD_INT 1
30885: ST_TO_ADDR
// minersList := [ ] ;
30886: LD_ADDR_EXP 101
30890: PUSH
30891: EMPTY
30892: ST_TO_ADDR
// minerMinesList := [ ] ;
30893: LD_ADDR_EXP 102
30897: PUSH
30898: EMPTY
30899: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
30900: LD_ADDR_EXP 103
30904: PUSH
30905: LD_INT 5
30907: ST_TO_ADDR
// end ;
30908: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
30909: LD_EXP 100
30913: PUSH
30914: LD_INT 34
30916: PUSH
30917: LD_INT 81
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: PPUSH
30924: CALL_OW 69
30928: AND
30929: IFFALSE 31390
30931: GO 30933
30933: DISABLE
30934: LD_INT 0
30936: PPUSH
30937: PPUSH
30938: PPUSH
30939: PPUSH
// begin enable ;
30940: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
30941: LD_ADDR_VAR 0 1
30945: PUSH
30946: LD_INT 34
30948: PUSH
30949: LD_INT 81
30951: PUSH
30952: EMPTY
30953: LIST
30954: LIST
30955: PPUSH
30956: CALL_OW 69
30960: PUSH
30961: FOR_IN
30962: IFFALSE 31034
// begin if not i in minersList then
30964: LD_VAR 0 1
30968: PUSH
30969: LD_EXP 101
30973: IN
30974: NOT
30975: IFFALSE 31032
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
30977: LD_ADDR_EXP 101
30981: PUSH
30982: LD_EXP 101
30986: PPUSH
30987: LD_EXP 101
30991: PUSH
30992: LD_INT 1
30994: PLUS
30995: PPUSH
30996: LD_VAR 0 1
31000: PPUSH
31001: CALL_OW 1
31005: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
31006: LD_ADDR_EXP 102
31010: PUSH
31011: LD_EXP 102
31015: PPUSH
31016: LD_EXP 102
31020: PUSH
31021: LD_INT 1
31023: PLUS
31024: PPUSH
31025: EMPTY
31026: PPUSH
31027: CALL_OW 1
31031: ST_TO_ADDR
// end end ;
31032: GO 30961
31034: POP
31035: POP
// for i := minerMinesList downto 1 do
31036: LD_ADDR_VAR 0 1
31040: PUSH
31041: DOUBLE
31042: LD_EXP 102
31046: INC
31047: ST_TO_ADDR
31048: LD_INT 1
31050: PUSH
31051: FOR_DOWNTO
31052: IFFALSE 31388
// begin if IsLive ( minersList [ i ] ) then
31054: LD_EXP 101
31058: PUSH
31059: LD_VAR 0 1
31063: ARRAY
31064: PPUSH
31065: CALL_OW 300
31069: IFFALSE 31097
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
31071: LD_EXP 101
31075: PUSH
31076: LD_VAR 0 1
31080: ARRAY
31081: PPUSH
31082: LD_EXP 102
31086: PUSH
31087: LD_VAR 0 1
31091: ARRAY
31092: PPUSH
31093: CALL_OW 505
// if not minerMinesList [ i ] then
31097: LD_EXP 102
31101: PUSH
31102: LD_VAR 0 1
31106: ARRAY
31107: NOT
31108: IFFALSE 31112
// continue ;
31110: GO 31051
// for j := minerMinesList [ i ] downto 1 do
31112: LD_ADDR_VAR 0 2
31116: PUSH
31117: DOUBLE
31118: LD_EXP 102
31122: PUSH
31123: LD_VAR 0 1
31127: ARRAY
31128: INC
31129: ST_TO_ADDR
31130: LD_INT 1
31132: PUSH
31133: FOR_DOWNTO
31134: IFFALSE 31384
// begin side := GetSide ( minersList [ i ] ) ;
31136: LD_ADDR_VAR 0 3
31140: PUSH
31141: LD_EXP 101
31145: PUSH
31146: LD_VAR 0 1
31150: ARRAY
31151: PPUSH
31152: CALL_OW 255
31156: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
31157: LD_ADDR_VAR 0 4
31161: PUSH
31162: LD_EXP 102
31166: PUSH
31167: LD_VAR 0 1
31171: ARRAY
31172: PUSH
31173: LD_VAR 0 2
31177: ARRAY
31178: PUSH
31179: LD_INT 1
31181: ARRAY
31182: PPUSH
31183: LD_EXP 102
31187: PUSH
31188: LD_VAR 0 1
31192: ARRAY
31193: PUSH
31194: LD_VAR 0 2
31198: ARRAY
31199: PUSH
31200: LD_INT 2
31202: ARRAY
31203: PPUSH
31204: CALL_OW 428
31208: ST_TO_ADDR
// if not tmp then
31209: LD_VAR 0 4
31213: NOT
31214: IFFALSE 31218
// continue ;
31216: GO 31133
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
31218: LD_VAR 0 4
31222: PUSH
31223: LD_INT 81
31225: PUSH
31226: LD_VAR 0 3
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PPUSH
31235: CALL_OW 69
31239: IN
31240: PUSH
31241: LD_EXP 102
31245: PUSH
31246: LD_VAR 0 1
31250: ARRAY
31251: PUSH
31252: LD_VAR 0 2
31256: ARRAY
31257: PUSH
31258: LD_INT 1
31260: ARRAY
31261: PPUSH
31262: LD_EXP 102
31266: PUSH
31267: LD_VAR 0 1
31271: ARRAY
31272: PUSH
31273: LD_VAR 0 2
31277: ARRAY
31278: PUSH
31279: LD_INT 2
31281: ARRAY
31282: PPUSH
31283: CALL_OW 458
31287: AND
31288: IFFALSE 31382
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
31290: LD_EXP 102
31294: PUSH
31295: LD_VAR 0 1
31299: ARRAY
31300: PUSH
31301: LD_VAR 0 2
31305: ARRAY
31306: PUSH
31307: LD_INT 1
31309: ARRAY
31310: PPUSH
31311: LD_EXP 102
31315: PUSH
31316: LD_VAR 0 1
31320: ARRAY
31321: PUSH
31322: LD_VAR 0 2
31326: ARRAY
31327: PUSH
31328: LD_INT 2
31330: ARRAY
31331: PPUSH
31332: LD_VAR 0 3
31336: PPUSH
31337: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
31341: LD_ADDR_EXP 102
31345: PUSH
31346: LD_EXP 102
31350: PPUSH
31351: LD_VAR 0 1
31355: PPUSH
31356: LD_EXP 102
31360: PUSH
31361: LD_VAR 0 1
31365: ARRAY
31366: PPUSH
31367: LD_VAR 0 2
31371: PPUSH
31372: CALL_OW 3
31376: PPUSH
31377: CALL_OW 1
31381: ST_TO_ADDR
// end ; end ;
31382: GO 31133
31384: POP
31385: POP
// end ;
31386: GO 31051
31388: POP
31389: POP
// end ;
31390: PPOPN 4
31392: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
31393: LD_INT 0
31395: PPUSH
31396: PPUSH
// result := false ;
31397: LD_ADDR_VAR 0 4
31401: PUSH
31402: LD_INT 0
31404: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
31405: LD_VAR 0 1
31409: PPUSH
31410: CALL_OW 264
31414: PUSH
31415: LD_INT 81
31417: EQUAL
31418: NOT
31419: IFFALSE 31423
// exit ;
31421: GO 31663
// index := GetElementIndex ( minersList , unit ) ;
31423: LD_ADDR_VAR 0 5
31427: PUSH
31428: LD_EXP 101
31432: PPUSH
31433: LD_VAR 0 1
31437: PPUSH
31438: CALL 37796 0 2
31442: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
31443: LD_EXP 102
31447: PUSH
31448: LD_VAR 0 5
31452: ARRAY
31453: PUSH
31454: LD_EXP 103
31458: GREATEREQUAL
31459: IFFALSE 31463
// exit ;
31461: GO 31663
// ComMoveXY ( unit , x , y ) ;
31463: LD_VAR 0 1
31467: PPUSH
31468: LD_VAR 0 2
31472: PPUSH
31473: LD_VAR 0 3
31477: PPUSH
31478: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31482: LD_INT 35
31484: PPUSH
31485: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
31489: LD_VAR 0 1
31493: PPUSH
31494: LD_VAR 0 2
31498: PPUSH
31499: LD_VAR 0 3
31503: PPUSH
31504: CALL 69151 0 3
31508: NOT
31509: PUSH
31510: LD_VAR 0 1
31514: PPUSH
31515: CALL_OW 314
31519: AND
31520: IFFALSE 31524
// exit ;
31522: GO 31663
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
31524: LD_VAR 0 2
31528: PPUSH
31529: LD_VAR 0 3
31533: PPUSH
31534: CALL_OW 428
31538: PUSH
31539: LD_VAR 0 1
31543: EQUAL
31544: PUSH
31545: LD_VAR 0 1
31549: PPUSH
31550: CALL_OW 314
31554: NOT
31555: AND
31556: IFFALSE 31482
// PlaySoundXY ( x , y , PlantMine ) ;
31558: LD_VAR 0 2
31562: PPUSH
31563: LD_VAR 0 3
31567: PPUSH
31568: LD_STRING PlantMine
31570: PPUSH
31571: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
31575: LD_VAR 0 2
31579: PPUSH
31580: LD_VAR 0 3
31584: PPUSH
31585: LD_VAR 0 1
31589: PPUSH
31590: CALL_OW 255
31594: PPUSH
31595: LD_INT 0
31597: PPUSH
31598: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31602: LD_ADDR_EXP 102
31606: PUSH
31607: LD_EXP 102
31611: PPUSH
31612: LD_VAR 0 5
31616: PUSH
31617: LD_EXP 102
31621: PUSH
31622: LD_VAR 0 5
31626: ARRAY
31627: PUSH
31628: LD_INT 1
31630: PLUS
31631: PUSH
31632: EMPTY
31633: LIST
31634: LIST
31635: PPUSH
31636: LD_VAR 0 2
31640: PUSH
31641: LD_VAR 0 3
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: PPUSH
31650: CALL 38011 0 3
31654: ST_TO_ADDR
// result := true ;
31655: LD_ADDR_VAR 0 4
31659: PUSH
31660: LD_INT 1
31662: ST_TO_ADDR
// end ;
31663: LD_VAR 0 4
31667: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31668: LD_INT 0
31670: PPUSH
31671: PPUSH
31672: PPUSH
// if not unit in minersList then
31673: LD_VAR 0 1
31677: PUSH
31678: LD_EXP 101
31682: IN
31683: NOT
31684: IFFALSE 31688
// exit ;
31686: GO 32080
// index := GetElementIndex ( minersList , unit ) ;
31688: LD_ADDR_VAR 0 6
31692: PUSH
31693: LD_EXP 101
31697: PPUSH
31698: LD_VAR 0 1
31702: PPUSH
31703: CALL 37796 0 2
31707: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31708: LD_ADDR_VAR 0 5
31712: PUSH
31713: DOUBLE
31714: LD_EXP 102
31718: PUSH
31719: LD_VAR 0 6
31723: ARRAY
31724: INC
31725: ST_TO_ADDR
31726: LD_INT 1
31728: PUSH
31729: FOR_DOWNTO
31730: IFFALSE 31891
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
31732: LD_EXP 102
31736: PUSH
31737: LD_VAR 0 6
31741: ARRAY
31742: PUSH
31743: LD_VAR 0 5
31747: ARRAY
31748: PUSH
31749: LD_INT 1
31751: ARRAY
31752: PUSH
31753: LD_VAR 0 2
31757: EQUAL
31758: PUSH
31759: LD_EXP 102
31763: PUSH
31764: LD_VAR 0 6
31768: ARRAY
31769: PUSH
31770: LD_VAR 0 5
31774: ARRAY
31775: PUSH
31776: LD_INT 2
31778: ARRAY
31779: PUSH
31780: LD_VAR 0 3
31784: EQUAL
31785: AND
31786: IFFALSE 31889
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31788: LD_EXP 102
31792: PUSH
31793: LD_VAR 0 6
31797: ARRAY
31798: PUSH
31799: LD_VAR 0 5
31803: ARRAY
31804: PUSH
31805: LD_INT 1
31807: ARRAY
31808: PPUSH
31809: LD_EXP 102
31813: PUSH
31814: LD_VAR 0 6
31818: ARRAY
31819: PUSH
31820: LD_VAR 0 5
31824: ARRAY
31825: PUSH
31826: LD_INT 2
31828: ARRAY
31829: PPUSH
31830: LD_VAR 0 1
31834: PPUSH
31835: CALL_OW 255
31839: PPUSH
31840: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31844: LD_ADDR_EXP 102
31848: PUSH
31849: LD_EXP 102
31853: PPUSH
31854: LD_VAR 0 6
31858: PPUSH
31859: LD_EXP 102
31863: PUSH
31864: LD_VAR 0 6
31868: ARRAY
31869: PPUSH
31870: LD_VAR 0 5
31874: PPUSH
31875: CALL_OW 3
31879: PPUSH
31880: CALL_OW 1
31884: ST_TO_ADDR
// exit ;
31885: POP
31886: POP
31887: GO 32080
// end ; end ;
31889: GO 31729
31891: POP
31892: POP
// for i := minerMinesList [ index ] downto 1 do
31893: LD_ADDR_VAR 0 5
31897: PUSH
31898: DOUBLE
31899: LD_EXP 102
31903: PUSH
31904: LD_VAR 0 6
31908: ARRAY
31909: INC
31910: ST_TO_ADDR
31911: LD_INT 1
31913: PUSH
31914: FOR_DOWNTO
31915: IFFALSE 32078
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
31917: LD_EXP 102
31921: PUSH
31922: LD_VAR 0 6
31926: ARRAY
31927: PUSH
31928: LD_VAR 0 5
31932: ARRAY
31933: PUSH
31934: LD_INT 1
31936: ARRAY
31937: PPUSH
31938: LD_EXP 102
31942: PUSH
31943: LD_VAR 0 6
31947: ARRAY
31948: PUSH
31949: LD_VAR 0 5
31953: ARRAY
31954: PUSH
31955: LD_INT 2
31957: ARRAY
31958: PPUSH
31959: LD_VAR 0 2
31963: PPUSH
31964: LD_VAR 0 3
31968: PPUSH
31969: CALL_OW 298
31973: PUSH
31974: LD_INT 6
31976: LESS
31977: IFFALSE 32076
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31979: LD_EXP 102
31983: PUSH
31984: LD_VAR 0 6
31988: ARRAY
31989: PUSH
31990: LD_VAR 0 5
31994: ARRAY
31995: PUSH
31996: LD_INT 1
31998: ARRAY
31999: PPUSH
32000: LD_EXP 102
32004: PUSH
32005: LD_VAR 0 6
32009: ARRAY
32010: PUSH
32011: LD_VAR 0 5
32015: ARRAY
32016: PUSH
32017: LD_INT 2
32019: ARRAY
32020: PPUSH
32021: LD_VAR 0 1
32025: PPUSH
32026: CALL_OW 255
32030: PPUSH
32031: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32035: LD_ADDR_EXP 102
32039: PUSH
32040: LD_EXP 102
32044: PPUSH
32045: LD_VAR 0 6
32049: PPUSH
32050: LD_EXP 102
32054: PUSH
32055: LD_VAR 0 6
32059: ARRAY
32060: PPUSH
32061: LD_VAR 0 5
32065: PPUSH
32066: CALL_OW 3
32070: PPUSH
32071: CALL_OW 1
32075: ST_TO_ADDR
// end ; end ;
32076: GO 31914
32078: POP
32079: POP
// end ;
32080: LD_VAR 0 4
32084: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
32085: LD_INT 0
32087: PPUSH
32088: PPUSH
32089: PPUSH
32090: PPUSH
32091: PPUSH
32092: PPUSH
32093: PPUSH
32094: PPUSH
32095: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
32096: LD_VAR 0 1
32100: PPUSH
32101: CALL_OW 264
32105: PUSH
32106: LD_INT 81
32108: EQUAL
32109: NOT
32110: PUSH
32111: LD_VAR 0 1
32115: PUSH
32116: LD_EXP 101
32120: IN
32121: NOT
32122: OR
32123: IFFALSE 32127
// exit ;
32125: GO 32449
// index := GetElementIndex ( minersList , unit ) ;
32127: LD_ADDR_VAR 0 6
32131: PUSH
32132: LD_EXP 101
32136: PPUSH
32137: LD_VAR 0 1
32141: PPUSH
32142: CALL 37796 0 2
32146: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
32147: LD_ADDR_VAR 0 8
32151: PUSH
32152: LD_EXP 103
32156: PUSH
32157: LD_EXP 102
32161: PUSH
32162: LD_VAR 0 6
32166: ARRAY
32167: MINUS
32168: ST_TO_ADDR
// if not minesFreeAmount then
32169: LD_VAR 0 8
32173: NOT
32174: IFFALSE 32178
// exit ;
32176: GO 32449
// tmp := [ ] ;
32178: LD_ADDR_VAR 0 7
32182: PUSH
32183: EMPTY
32184: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
32185: LD_ADDR_VAR 0 5
32189: PUSH
32190: DOUBLE
32191: LD_INT 1
32193: DEC
32194: ST_TO_ADDR
32195: LD_VAR 0 8
32199: PUSH
32200: FOR_TO
32201: IFFALSE 32396
// begin _d := rand ( 0 , 5 ) ;
32203: LD_ADDR_VAR 0 11
32207: PUSH
32208: LD_INT 0
32210: PPUSH
32211: LD_INT 5
32213: PPUSH
32214: CALL_OW 12
32218: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
32219: LD_ADDR_VAR 0 12
32223: PUSH
32224: LD_INT 2
32226: PPUSH
32227: LD_INT 6
32229: PPUSH
32230: CALL_OW 12
32234: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
32235: LD_ADDR_VAR 0 9
32239: PUSH
32240: LD_VAR 0 2
32244: PPUSH
32245: LD_VAR 0 11
32249: PPUSH
32250: LD_VAR 0 12
32254: PPUSH
32255: CALL_OW 272
32259: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
32260: LD_ADDR_VAR 0 10
32264: PUSH
32265: LD_VAR 0 3
32269: PPUSH
32270: LD_VAR 0 11
32274: PPUSH
32275: LD_VAR 0 12
32279: PPUSH
32280: CALL_OW 273
32284: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
32285: LD_VAR 0 9
32289: PPUSH
32290: LD_VAR 0 10
32294: PPUSH
32295: CALL_OW 488
32299: PUSH
32300: LD_VAR 0 9
32304: PUSH
32305: LD_VAR 0 10
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_VAR 0 7
32318: IN
32319: NOT
32320: AND
32321: PUSH
32322: LD_VAR 0 9
32326: PPUSH
32327: LD_VAR 0 10
32331: PPUSH
32332: CALL_OW 458
32336: NOT
32337: AND
32338: IFFALSE 32380
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
32340: LD_ADDR_VAR 0 7
32344: PUSH
32345: LD_VAR 0 7
32349: PPUSH
32350: LD_VAR 0 7
32354: PUSH
32355: LD_INT 1
32357: PLUS
32358: PPUSH
32359: LD_VAR 0 9
32363: PUSH
32364: LD_VAR 0 10
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PPUSH
32373: CALL_OW 1
32377: ST_TO_ADDR
32378: GO 32394
// i := i - 1 ;
32380: LD_ADDR_VAR 0 5
32384: PUSH
32385: LD_VAR 0 5
32389: PUSH
32390: LD_INT 1
32392: MINUS
32393: ST_TO_ADDR
// end ;
32394: GO 32200
32396: POP
32397: POP
// for i in tmp do
32398: LD_ADDR_VAR 0 5
32402: PUSH
32403: LD_VAR 0 7
32407: PUSH
32408: FOR_IN
32409: IFFALSE 32447
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
32411: LD_VAR 0 1
32415: PPUSH
32416: LD_VAR 0 5
32420: PUSH
32421: LD_INT 1
32423: ARRAY
32424: PPUSH
32425: LD_VAR 0 5
32429: PUSH
32430: LD_INT 2
32432: ARRAY
32433: PPUSH
32434: CALL 31393 0 3
32438: NOT
32439: IFFALSE 32445
// exit ;
32441: POP
32442: POP
32443: GO 32449
32445: GO 32408
32447: POP
32448: POP
// end ;
32449: LD_VAR 0 4
32453: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
32454: LD_INT 0
32456: PPUSH
32457: PPUSH
32458: PPUSH
32459: PPUSH
32460: PPUSH
32461: PPUSH
32462: PPUSH
// if not GetClass ( unit ) = class_sniper then
32463: LD_VAR 0 1
32467: PPUSH
32468: CALL_OW 257
32472: PUSH
32473: LD_INT 5
32475: EQUAL
32476: NOT
32477: IFFALSE 32481
// exit ;
32479: GO 32869
// dist := 8 ;
32481: LD_ADDR_VAR 0 5
32485: PUSH
32486: LD_INT 8
32488: ST_TO_ADDR
// viewRange := 12 ;
32489: LD_ADDR_VAR 0 7
32493: PUSH
32494: LD_INT 12
32496: ST_TO_ADDR
// side := GetSide ( unit ) ;
32497: LD_ADDR_VAR 0 6
32501: PUSH
32502: LD_VAR 0 1
32506: PPUSH
32507: CALL_OW 255
32511: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
32512: LD_INT 61
32514: PPUSH
32515: LD_VAR 0 6
32519: PPUSH
32520: CALL_OW 321
32524: PUSH
32525: LD_INT 2
32527: EQUAL
32528: IFFALSE 32538
// viewRange := 16 ;
32530: LD_ADDR_VAR 0 7
32534: PUSH
32535: LD_INT 16
32537: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
32538: LD_VAR 0 1
32542: PPUSH
32543: LD_VAR 0 2
32547: PPUSH
32548: LD_VAR 0 3
32552: PPUSH
32553: CALL_OW 297
32557: PUSH
32558: LD_VAR 0 5
32562: GREATER
32563: IFFALSE 32642
// begin ComMoveXY ( unit , x , y ) ;
32565: LD_VAR 0 1
32569: PPUSH
32570: LD_VAR 0 2
32574: PPUSH
32575: LD_VAR 0 3
32579: PPUSH
32580: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32584: LD_INT 35
32586: PPUSH
32587: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32591: LD_VAR 0 1
32595: PPUSH
32596: LD_VAR 0 2
32600: PPUSH
32601: LD_VAR 0 3
32605: PPUSH
32606: CALL 69151 0 3
32610: NOT
32611: IFFALSE 32615
// exit ;
32613: GO 32869
// until GetDistUnitXY ( unit , x , y ) < dist ;
32615: LD_VAR 0 1
32619: PPUSH
32620: LD_VAR 0 2
32624: PPUSH
32625: LD_VAR 0 3
32629: PPUSH
32630: CALL_OW 297
32634: PUSH
32635: LD_VAR 0 5
32639: LESS
32640: IFFALSE 32584
// end ; ComTurnXY ( unit , x , y ) ;
32642: LD_VAR 0 1
32646: PPUSH
32647: LD_VAR 0 2
32651: PPUSH
32652: LD_VAR 0 3
32656: PPUSH
32657: CALL_OW 118
// wait ( 5 ) ;
32661: LD_INT 5
32663: PPUSH
32664: CALL_OW 67
// _d := GetDir ( unit ) ;
32668: LD_ADDR_VAR 0 10
32672: PUSH
32673: LD_VAR 0 1
32677: PPUSH
32678: CALL_OW 254
32682: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
32683: LD_ADDR_VAR 0 8
32687: PUSH
32688: LD_VAR 0 1
32692: PPUSH
32693: CALL_OW 250
32697: PPUSH
32698: LD_VAR 0 10
32702: PPUSH
32703: LD_VAR 0 5
32707: PPUSH
32708: CALL_OW 272
32712: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
32713: LD_ADDR_VAR 0 9
32717: PUSH
32718: LD_VAR 0 1
32722: PPUSH
32723: CALL_OW 251
32727: PPUSH
32728: LD_VAR 0 10
32732: PPUSH
32733: LD_VAR 0 5
32737: PPUSH
32738: CALL_OW 273
32742: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32743: LD_VAR 0 8
32747: PPUSH
32748: LD_VAR 0 9
32752: PPUSH
32753: CALL_OW 488
32757: NOT
32758: IFFALSE 32762
// exit ;
32760: GO 32869
// ComAnimCustom ( unit , 1 ) ;
32762: LD_VAR 0 1
32766: PPUSH
32767: LD_INT 1
32769: PPUSH
32770: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32774: LD_VAR 0 8
32778: PPUSH
32779: LD_VAR 0 9
32783: PPUSH
32784: LD_VAR 0 6
32788: PPUSH
32789: LD_VAR 0 7
32793: PPUSH
32794: CALL_OW 330
// repeat wait ( 1 ) ;
32798: LD_INT 1
32800: PPUSH
32801: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
32805: LD_VAR 0 1
32809: PPUSH
32810: CALL_OW 316
32814: PUSH
32815: LD_VAR 0 1
32819: PPUSH
32820: CALL_OW 314
32824: OR
32825: PUSH
32826: LD_VAR 0 1
32830: PPUSH
32831: CALL_OW 302
32835: NOT
32836: OR
32837: PUSH
32838: LD_VAR 0 1
32842: PPUSH
32843: CALL_OW 301
32847: OR
32848: IFFALSE 32798
// RemoveSeeing ( _x , _y , side ) ;
32850: LD_VAR 0 8
32854: PPUSH
32855: LD_VAR 0 9
32859: PPUSH
32860: LD_VAR 0 6
32864: PPUSH
32865: CALL_OW 331
// end ; end_of_file
32869: LD_VAR 0 4
32873: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32874: LD_INT 0
32876: PPUSH
32877: PPUSH
// if exist_mode then
32878: LD_VAR 0 2
32882: IFFALSE 32907
// unit := CreateCharacter ( prefix & ident ) else
32884: LD_ADDR_VAR 0 5
32888: PUSH
32889: LD_VAR 0 3
32893: PUSH
32894: LD_VAR 0 1
32898: STR
32899: PPUSH
32900: CALL_OW 34
32904: ST_TO_ADDR
32905: GO 32922
// unit := NewCharacter ( ident ) ;
32907: LD_ADDR_VAR 0 5
32911: PUSH
32912: LD_VAR 0 1
32916: PPUSH
32917: CALL_OW 25
32921: ST_TO_ADDR
// result := unit ;
32922: LD_ADDR_VAR 0 4
32926: PUSH
32927: LD_VAR 0 5
32931: ST_TO_ADDR
// end ;
32932: LD_VAR 0 4
32936: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
32937: LD_INT 0
32939: PPUSH
32940: PPUSH
// if not side or not nation then
32941: LD_VAR 0 1
32945: NOT
32946: PUSH
32947: LD_VAR 0 2
32951: NOT
32952: OR
32953: IFFALSE 32957
// exit ;
32955: GO 33725
// case nation of nation_american :
32957: LD_VAR 0 2
32961: PUSH
32962: LD_INT 1
32964: DOUBLE
32965: EQUAL
32966: IFTRUE 32970
32968: GO 33184
32970: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
32971: LD_ADDR_VAR 0 4
32975: PUSH
32976: LD_INT 35
32978: PUSH
32979: LD_INT 45
32981: PUSH
32982: LD_INT 46
32984: PUSH
32985: LD_INT 47
32987: PUSH
32988: LD_INT 82
32990: PUSH
32991: LD_INT 83
32993: PUSH
32994: LD_INT 84
32996: PUSH
32997: LD_INT 85
32999: PUSH
33000: LD_INT 86
33002: PUSH
33003: LD_INT 1
33005: PUSH
33006: LD_INT 2
33008: PUSH
33009: LD_INT 6
33011: PUSH
33012: LD_INT 15
33014: PUSH
33015: LD_INT 16
33017: PUSH
33018: LD_INT 7
33020: PUSH
33021: LD_INT 12
33023: PUSH
33024: LD_INT 13
33026: PUSH
33027: LD_INT 10
33029: PUSH
33030: LD_INT 14
33032: PUSH
33033: LD_INT 20
33035: PUSH
33036: LD_INT 21
33038: PUSH
33039: LD_INT 22
33041: PUSH
33042: LD_INT 25
33044: PUSH
33045: LD_INT 32
33047: PUSH
33048: LD_INT 27
33050: PUSH
33051: LD_INT 36
33053: PUSH
33054: LD_INT 69
33056: PUSH
33057: LD_INT 39
33059: PUSH
33060: LD_INT 34
33062: PUSH
33063: LD_INT 40
33065: PUSH
33066: LD_INT 48
33068: PUSH
33069: LD_INT 49
33071: PUSH
33072: LD_INT 50
33074: PUSH
33075: LD_INT 51
33077: PUSH
33078: LD_INT 52
33080: PUSH
33081: LD_INT 53
33083: PUSH
33084: LD_INT 54
33086: PUSH
33087: LD_INT 55
33089: PUSH
33090: LD_INT 56
33092: PUSH
33093: LD_INT 57
33095: PUSH
33096: LD_INT 58
33098: PUSH
33099: LD_INT 59
33101: PUSH
33102: LD_INT 60
33104: PUSH
33105: LD_INT 61
33107: PUSH
33108: LD_INT 62
33110: PUSH
33111: LD_INT 80
33113: PUSH
33114: LD_INT 82
33116: PUSH
33117: LD_INT 83
33119: PUSH
33120: LD_INT 84
33122: PUSH
33123: LD_INT 85
33125: PUSH
33126: LD_INT 86
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: ST_TO_ADDR
33182: GO 33649
33184: LD_INT 2
33186: DOUBLE
33187: EQUAL
33188: IFTRUE 33192
33190: GO 33418
33192: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
33193: LD_ADDR_VAR 0 4
33197: PUSH
33198: LD_INT 35
33200: PUSH
33201: LD_INT 45
33203: PUSH
33204: LD_INT 46
33206: PUSH
33207: LD_INT 47
33209: PUSH
33210: LD_INT 82
33212: PUSH
33213: LD_INT 83
33215: PUSH
33216: LD_INT 84
33218: PUSH
33219: LD_INT 85
33221: PUSH
33222: LD_INT 87
33224: PUSH
33225: LD_INT 70
33227: PUSH
33228: LD_INT 1
33230: PUSH
33231: LD_INT 11
33233: PUSH
33234: LD_INT 3
33236: PUSH
33237: LD_INT 4
33239: PUSH
33240: LD_INT 5
33242: PUSH
33243: LD_INT 6
33245: PUSH
33246: LD_INT 15
33248: PUSH
33249: LD_INT 18
33251: PUSH
33252: LD_INT 7
33254: PUSH
33255: LD_INT 17
33257: PUSH
33258: LD_INT 8
33260: PUSH
33261: LD_INT 20
33263: PUSH
33264: LD_INT 21
33266: PUSH
33267: LD_INT 22
33269: PUSH
33270: LD_INT 72
33272: PUSH
33273: LD_INT 26
33275: PUSH
33276: LD_INT 69
33278: PUSH
33279: LD_INT 39
33281: PUSH
33282: LD_INT 40
33284: PUSH
33285: LD_INT 41
33287: PUSH
33288: LD_INT 42
33290: PUSH
33291: LD_INT 43
33293: PUSH
33294: LD_INT 48
33296: PUSH
33297: LD_INT 49
33299: PUSH
33300: LD_INT 50
33302: PUSH
33303: LD_INT 51
33305: PUSH
33306: LD_INT 52
33308: PUSH
33309: LD_INT 53
33311: PUSH
33312: LD_INT 54
33314: PUSH
33315: LD_INT 55
33317: PUSH
33318: LD_INT 56
33320: PUSH
33321: LD_INT 60
33323: PUSH
33324: LD_INT 61
33326: PUSH
33327: LD_INT 62
33329: PUSH
33330: LD_INT 66
33332: PUSH
33333: LD_INT 67
33335: PUSH
33336: LD_INT 68
33338: PUSH
33339: LD_INT 81
33341: PUSH
33342: LD_INT 82
33344: PUSH
33345: LD_INT 83
33347: PUSH
33348: LD_INT 84
33350: PUSH
33351: LD_INT 85
33353: PUSH
33354: LD_INT 87
33356: PUSH
33357: LD_INT 88
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: LIST
33364: LIST
33365: LIST
33366: LIST
33367: LIST
33368: LIST
33369: LIST
33370: LIST
33371: LIST
33372: LIST
33373: LIST
33374: LIST
33375: LIST
33376: LIST
33377: LIST
33378: LIST
33379: LIST
33380: LIST
33381: LIST
33382: LIST
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: ST_TO_ADDR
33416: GO 33649
33418: LD_INT 3
33420: DOUBLE
33421: EQUAL
33422: IFTRUE 33426
33424: GO 33648
33426: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
33427: LD_ADDR_VAR 0 4
33431: PUSH
33432: LD_INT 46
33434: PUSH
33435: LD_INT 47
33437: PUSH
33438: LD_INT 1
33440: PUSH
33441: LD_INT 2
33443: PUSH
33444: LD_INT 82
33446: PUSH
33447: LD_INT 83
33449: PUSH
33450: LD_INT 84
33452: PUSH
33453: LD_INT 85
33455: PUSH
33456: LD_INT 86
33458: PUSH
33459: LD_INT 11
33461: PUSH
33462: LD_INT 9
33464: PUSH
33465: LD_INT 20
33467: PUSH
33468: LD_INT 19
33470: PUSH
33471: LD_INT 21
33473: PUSH
33474: LD_INT 24
33476: PUSH
33477: LD_INT 22
33479: PUSH
33480: LD_INT 25
33482: PUSH
33483: LD_INT 28
33485: PUSH
33486: LD_INT 29
33488: PUSH
33489: LD_INT 30
33491: PUSH
33492: LD_INT 31
33494: PUSH
33495: LD_INT 37
33497: PUSH
33498: LD_INT 38
33500: PUSH
33501: LD_INT 32
33503: PUSH
33504: LD_INT 27
33506: PUSH
33507: LD_INT 33
33509: PUSH
33510: LD_INT 69
33512: PUSH
33513: LD_INT 39
33515: PUSH
33516: LD_INT 34
33518: PUSH
33519: LD_INT 40
33521: PUSH
33522: LD_INT 71
33524: PUSH
33525: LD_INT 23
33527: PUSH
33528: LD_INT 44
33530: PUSH
33531: LD_INT 48
33533: PUSH
33534: LD_INT 49
33536: PUSH
33537: LD_INT 50
33539: PUSH
33540: LD_INT 51
33542: PUSH
33543: LD_INT 52
33545: PUSH
33546: LD_INT 53
33548: PUSH
33549: LD_INT 54
33551: PUSH
33552: LD_INT 55
33554: PUSH
33555: LD_INT 56
33557: PUSH
33558: LD_INT 57
33560: PUSH
33561: LD_INT 58
33563: PUSH
33564: LD_INT 59
33566: PUSH
33567: LD_INT 63
33569: PUSH
33570: LD_INT 64
33572: PUSH
33573: LD_INT 65
33575: PUSH
33576: LD_INT 82
33578: PUSH
33579: LD_INT 83
33581: PUSH
33582: LD_INT 84
33584: PUSH
33585: LD_INT 85
33587: PUSH
33588: LD_INT 86
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: LIST
33632: LIST
33633: LIST
33634: LIST
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: LIST
33643: LIST
33644: LIST
33645: ST_TO_ADDR
33646: GO 33649
33648: POP
// if state > - 1 and state < 3 then
33649: LD_VAR 0 3
33653: PUSH
33654: LD_INT 1
33656: NEG
33657: GREATER
33658: PUSH
33659: LD_VAR 0 3
33663: PUSH
33664: LD_INT 3
33666: LESS
33667: AND
33668: IFFALSE 33725
// for i in result do
33670: LD_ADDR_VAR 0 5
33674: PUSH
33675: LD_VAR 0 4
33679: PUSH
33680: FOR_IN
33681: IFFALSE 33723
// if GetTech ( i , side ) <> state then
33683: LD_VAR 0 5
33687: PPUSH
33688: LD_VAR 0 1
33692: PPUSH
33693: CALL_OW 321
33697: PUSH
33698: LD_VAR 0 3
33702: NONEQUAL
33703: IFFALSE 33721
// result := result diff i ;
33705: LD_ADDR_VAR 0 4
33709: PUSH
33710: LD_VAR 0 4
33714: PUSH
33715: LD_VAR 0 5
33719: DIFF
33720: ST_TO_ADDR
33721: GO 33680
33723: POP
33724: POP
// end ;
33725: LD_VAR 0 4
33729: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33730: LD_INT 0
33732: PPUSH
33733: PPUSH
33734: PPUSH
// result := true ;
33735: LD_ADDR_VAR 0 3
33739: PUSH
33740: LD_INT 1
33742: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33743: LD_ADDR_VAR 0 5
33747: PUSH
33748: LD_VAR 0 2
33752: PPUSH
33753: CALL_OW 480
33757: ST_TO_ADDR
// if not tmp then
33758: LD_VAR 0 5
33762: NOT
33763: IFFALSE 33767
// exit ;
33765: GO 33816
// for i in tmp do
33767: LD_ADDR_VAR 0 4
33771: PUSH
33772: LD_VAR 0 5
33776: PUSH
33777: FOR_IN
33778: IFFALSE 33814
// if GetTech ( i , side ) <> state_researched then
33780: LD_VAR 0 4
33784: PPUSH
33785: LD_VAR 0 1
33789: PPUSH
33790: CALL_OW 321
33794: PUSH
33795: LD_INT 2
33797: NONEQUAL
33798: IFFALSE 33812
// begin result := false ;
33800: LD_ADDR_VAR 0 3
33804: PUSH
33805: LD_INT 0
33807: ST_TO_ADDR
// exit ;
33808: POP
33809: POP
33810: GO 33816
// end ;
33812: GO 33777
33814: POP
33815: POP
// end ;
33816: LD_VAR 0 3
33820: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33821: LD_INT 0
33823: PPUSH
33824: PPUSH
33825: PPUSH
33826: PPUSH
33827: PPUSH
33828: PPUSH
33829: PPUSH
33830: PPUSH
33831: PPUSH
33832: PPUSH
33833: PPUSH
33834: PPUSH
33835: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33836: LD_VAR 0 1
33840: NOT
33841: PUSH
33842: LD_VAR 0 1
33846: PPUSH
33847: CALL_OW 257
33851: PUSH
33852: LD_INT 9
33854: NONEQUAL
33855: OR
33856: IFFALSE 33860
// exit ;
33858: GO 34433
// side := GetSide ( unit ) ;
33860: LD_ADDR_VAR 0 9
33864: PUSH
33865: LD_VAR 0 1
33869: PPUSH
33870: CALL_OW 255
33874: ST_TO_ADDR
// tech_space := tech_spacanom ;
33875: LD_ADDR_VAR 0 12
33879: PUSH
33880: LD_INT 29
33882: ST_TO_ADDR
// tech_time := tech_taurad ;
33883: LD_ADDR_VAR 0 13
33887: PUSH
33888: LD_INT 28
33890: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33891: LD_ADDR_VAR 0 11
33895: PUSH
33896: LD_VAR 0 1
33900: PPUSH
33901: CALL_OW 310
33905: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
33906: LD_VAR 0 11
33910: PPUSH
33911: CALL_OW 247
33915: PUSH
33916: LD_INT 2
33918: EQUAL
33919: IFFALSE 33923
// exit ;
33921: GO 34433
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33923: LD_ADDR_VAR 0 8
33927: PUSH
33928: LD_INT 81
33930: PUSH
33931: LD_VAR 0 9
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: PUSH
33940: LD_INT 3
33942: PUSH
33943: LD_INT 21
33945: PUSH
33946: LD_INT 3
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: PPUSH
33961: CALL_OW 69
33965: ST_TO_ADDR
// if not tmp then
33966: LD_VAR 0 8
33970: NOT
33971: IFFALSE 33975
// exit ;
33973: GO 34433
// if in_unit then
33975: LD_VAR 0 11
33979: IFFALSE 34003
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33981: LD_ADDR_VAR 0 10
33985: PUSH
33986: LD_VAR 0 8
33990: PPUSH
33991: LD_VAR 0 11
33995: PPUSH
33996: CALL_OW 74
34000: ST_TO_ADDR
34001: GO 34023
// enemy := NearestUnitToUnit ( tmp , unit ) ;
34003: LD_ADDR_VAR 0 10
34007: PUSH
34008: LD_VAR 0 8
34012: PPUSH
34013: LD_VAR 0 1
34017: PPUSH
34018: CALL_OW 74
34022: ST_TO_ADDR
// if not enemy then
34023: LD_VAR 0 10
34027: NOT
34028: IFFALSE 34032
// exit ;
34030: GO 34433
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
34032: LD_VAR 0 11
34036: PUSH
34037: LD_VAR 0 11
34041: PPUSH
34042: LD_VAR 0 10
34046: PPUSH
34047: CALL_OW 296
34051: PUSH
34052: LD_INT 13
34054: GREATER
34055: AND
34056: PUSH
34057: LD_VAR 0 1
34061: PPUSH
34062: LD_VAR 0 10
34066: PPUSH
34067: CALL_OW 296
34071: PUSH
34072: LD_INT 12
34074: GREATER
34075: OR
34076: IFFALSE 34080
// exit ;
34078: GO 34433
// missile := [ 1 ] ;
34080: LD_ADDR_VAR 0 14
34084: PUSH
34085: LD_INT 1
34087: PUSH
34088: EMPTY
34089: LIST
34090: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34091: LD_VAR 0 9
34095: PPUSH
34096: LD_VAR 0 12
34100: PPUSH
34101: CALL_OW 325
34105: IFFALSE 34134
// missile := Replace ( missile , missile + 1 , 2 ) ;
34107: LD_ADDR_VAR 0 14
34111: PUSH
34112: LD_VAR 0 14
34116: PPUSH
34117: LD_VAR 0 14
34121: PUSH
34122: LD_INT 1
34124: PLUS
34125: PPUSH
34126: LD_INT 2
34128: PPUSH
34129: CALL_OW 1
34133: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34134: LD_VAR 0 9
34138: PPUSH
34139: LD_VAR 0 13
34143: PPUSH
34144: CALL_OW 325
34148: PUSH
34149: LD_VAR 0 10
34153: PPUSH
34154: CALL_OW 255
34158: PPUSH
34159: LD_VAR 0 13
34163: PPUSH
34164: CALL_OW 325
34168: NOT
34169: AND
34170: IFFALSE 34199
// missile := Replace ( missile , missile + 1 , 3 ) ;
34172: LD_ADDR_VAR 0 14
34176: PUSH
34177: LD_VAR 0 14
34181: PPUSH
34182: LD_VAR 0 14
34186: PUSH
34187: LD_INT 1
34189: PLUS
34190: PPUSH
34191: LD_INT 3
34193: PPUSH
34194: CALL_OW 1
34198: ST_TO_ADDR
// if missile < 2 then
34199: LD_VAR 0 14
34203: PUSH
34204: LD_INT 2
34206: LESS
34207: IFFALSE 34211
// exit ;
34209: GO 34433
// x := GetX ( enemy ) ;
34211: LD_ADDR_VAR 0 4
34215: PUSH
34216: LD_VAR 0 10
34220: PPUSH
34221: CALL_OW 250
34225: ST_TO_ADDR
// y := GetY ( enemy ) ;
34226: LD_ADDR_VAR 0 5
34230: PUSH
34231: LD_VAR 0 10
34235: PPUSH
34236: CALL_OW 251
34240: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34241: LD_ADDR_VAR 0 6
34245: PUSH
34246: LD_VAR 0 4
34250: PUSH
34251: LD_INT 1
34253: NEG
34254: PPUSH
34255: LD_INT 1
34257: PPUSH
34258: CALL_OW 12
34262: PLUS
34263: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
34264: LD_ADDR_VAR 0 7
34268: PUSH
34269: LD_VAR 0 5
34273: PUSH
34274: LD_INT 1
34276: NEG
34277: PPUSH
34278: LD_INT 1
34280: PPUSH
34281: CALL_OW 12
34285: PLUS
34286: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34287: LD_VAR 0 6
34291: PPUSH
34292: LD_VAR 0 7
34296: PPUSH
34297: CALL_OW 488
34301: NOT
34302: IFFALSE 34324
// begin _x := x ;
34304: LD_ADDR_VAR 0 6
34308: PUSH
34309: LD_VAR 0 4
34313: ST_TO_ADDR
// _y := y ;
34314: LD_ADDR_VAR 0 7
34318: PUSH
34319: LD_VAR 0 5
34323: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
34324: LD_ADDR_VAR 0 3
34328: PUSH
34329: LD_INT 1
34331: PPUSH
34332: LD_VAR 0 14
34336: PPUSH
34337: CALL_OW 12
34341: ST_TO_ADDR
// case i of 1 :
34342: LD_VAR 0 3
34346: PUSH
34347: LD_INT 1
34349: DOUBLE
34350: EQUAL
34351: IFTRUE 34355
34353: GO 34372
34355: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
34356: LD_VAR 0 1
34360: PPUSH
34361: LD_VAR 0 10
34365: PPUSH
34366: CALL_OW 115
34370: GO 34433
34372: LD_INT 2
34374: DOUBLE
34375: EQUAL
34376: IFTRUE 34380
34378: GO 34402
34380: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
34381: LD_VAR 0 1
34385: PPUSH
34386: LD_VAR 0 6
34390: PPUSH
34391: LD_VAR 0 7
34395: PPUSH
34396: CALL_OW 153
34400: GO 34433
34402: LD_INT 3
34404: DOUBLE
34405: EQUAL
34406: IFTRUE 34410
34408: GO 34432
34410: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
34411: LD_VAR 0 1
34415: PPUSH
34416: LD_VAR 0 6
34420: PPUSH
34421: LD_VAR 0 7
34425: PPUSH
34426: CALL_OW 154
34430: GO 34433
34432: POP
// end ;
34433: LD_VAR 0 2
34437: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
34438: LD_INT 0
34440: PPUSH
34441: PPUSH
34442: PPUSH
34443: PPUSH
34444: PPUSH
34445: PPUSH
// if not unit or not building then
34446: LD_VAR 0 1
34450: NOT
34451: PUSH
34452: LD_VAR 0 2
34456: NOT
34457: OR
34458: IFFALSE 34462
// exit ;
34460: GO 34620
// x := GetX ( building ) ;
34462: LD_ADDR_VAR 0 5
34466: PUSH
34467: LD_VAR 0 2
34471: PPUSH
34472: CALL_OW 250
34476: ST_TO_ADDR
// y := GetY ( building ) ;
34477: LD_ADDR_VAR 0 6
34481: PUSH
34482: LD_VAR 0 2
34486: PPUSH
34487: CALL_OW 251
34491: ST_TO_ADDR
// for i = 0 to 5 do
34492: LD_ADDR_VAR 0 4
34496: PUSH
34497: DOUBLE
34498: LD_INT 0
34500: DEC
34501: ST_TO_ADDR
34502: LD_INT 5
34504: PUSH
34505: FOR_TO
34506: IFFALSE 34618
// begin _x := ShiftX ( x , i , 3 ) ;
34508: LD_ADDR_VAR 0 7
34512: PUSH
34513: LD_VAR 0 5
34517: PPUSH
34518: LD_VAR 0 4
34522: PPUSH
34523: LD_INT 3
34525: PPUSH
34526: CALL_OW 272
34530: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
34531: LD_ADDR_VAR 0 8
34535: PUSH
34536: LD_VAR 0 6
34540: PPUSH
34541: LD_VAR 0 4
34545: PPUSH
34546: LD_INT 3
34548: PPUSH
34549: CALL_OW 273
34553: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34554: LD_VAR 0 7
34558: PPUSH
34559: LD_VAR 0 8
34563: PPUSH
34564: CALL_OW 488
34568: NOT
34569: IFFALSE 34573
// continue ;
34571: GO 34505
// if HexInfo ( _x , _y ) = 0 then
34573: LD_VAR 0 7
34577: PPUSH
34578: LD_VAR 0 8
34582: PPUSH
34583: CALL_OW 428
34587: PUSH
34588: LD_INT 0
34590: EQUAL
34591: IFFALSE 34616
// begin ComMoveXY ( unit , _x , _y ) ;
34593: LD_VAR 0 1
34597: PPUSH
34598: LD_VAR 0 7
34602: PPUSH
34603: LD_VAR 0 8
34607: PPUSH
34608: CALL_OW 111
// exit ;
34612: POP
34613: POP
34614: GO 34620
// end ; end ;
34616: GO 34505
34618: POP
34619: POP
// end ;
34620: LD_VAR 0 3
34624: RET
// export function ScanBase ( side , base_area ) ; begin
34625: LD_INT 0
34627: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34628: LD_ADDR_VAR 0 3
34632: PUSH
34633: LD_VAR 0 2
34637: PPUSH
34638: LD_INT 81
34640: PUSH
34641: LD_VAR 0 1
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PPUSH
34650: CALL_OW 70
34654: ST_TO_ADDR
// end ;
34655: LD_VAR 0 3
34659: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34660: LD_INT 0
34662: PPUSH
34663: PPUSH
34664: PPUSH
34665: PPUSH
// result := false ;
34666: LD_ADDR_VAR 0 2
34670: PUSH
34671: LD_INT 0
34673: ST_TO_ADDR
// side := GetSide ( unit ) ;
34674: LD_ADDR_VAR 0 3
34678: PUSH
34679: LD_VAR 0 1
34683: PPUSH
34684: CALL_OW 255
34688: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34689: LD_ADDR_VAR 0 4
34693: PUSH
34694: LD_VAR 0 1
34698: PPUSH
34699: CALL_OW 248
34703: ST_TO_ADDR
// case nat of 1 :
34704: LD_VAR 0 4
34708: PUSH
34709: LD_INT 1
34711: DOUBLE
34712: EQUAL
34713: IFTRUE 34717
34715: GO 34728
34717: POP
// tech := tech_lassight ; 2 :
34718: LD_ADDR_VAR 0 5
34722: PUSH
34723: LD_INT 12
34725: ST_TO_ADDR
34726: GO 34767
34728: LD_INT 2
34730: DOUBLE
34731: EQUAL
34732: IFTRUE 34736
34734: GO 34747
34736: POP
// tech := tech_mortar ; 3 :
34737: LD_ADDR_VAR 0 5
34741: PUSH
34742: LD_INT 41
34744: ST_TO_ADDR
34745: GO 34767
34747: LD_INT 3
34749: DOUBLE
34750: EQUAL
34751: IFTRUE 34755
34753: GO 34766
34755: POP
// tech := tech_bazooka ; end ;
34756: LD_ADDR_VAR 0 5
34760: PUSH
34761: LD_INT 44
34763: ST_TO_ADDR
34764: GO 34767
34766: POP
// if Researched ( side , tech ) then
34767: LD_VAR 0 3
34771: PPUSH
34772: LD_VAR 0 5
34776: PPUSH
34777: CALL_OW 325
34781: IFFALSE 34808
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34783: LD_ADDR_VAR 0 2
34787: PUSH
34788: LD_INT 5
34790: PUSH
34791: LD_INT 8
34793: PUSH
34794: LD_INT 9
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: LIST
34801: PUSH
34802: LD_VAR 0 4
34806: ARRAY
34807: ST_TO_ADDR
// end ;
34808: LD_VAR 0 2
34812: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34813: LD_INT 0
34815: PPUSH
34816: PPUSH
34817: PPUSH
// if not mines then
34818: LD_VAR 0 2
34822: NOT
34823: IFFALSE 34827
// exit ;
34825: GO 34971
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34827: LD_ADDR_VAR 0 5
34831: PUSH
34832: LD_INT 81
34834: PUSH
34835: LD_VAR 0 1
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: PUSH
34844: LD_INT 3
34846: PUSH
34847: LD_INT 21
34849: PUSH
34850: LD_INT 3
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PPUSH
34865: CALL_OW 69
34869: ST_TO_ADDR
// for i in mines do
34870: LD_ADDR_VAR 0 4
34874: PUSH
34875: LD_VAR 0 2
34879: PUSH
34880: FOR_IN
34881: IFFALSE 34969
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34883: LD_VAR 0 4
34887: PUSH
34888: LD_INT 1
34890: ARRAY
34891: PPUSH
34892: LD_VAR 0 4
34896: PUSH
34897: LD_INT 2
34899: ARRAY
34900: PPUSH
34901: CALL_OW 458
34905: NOT
34906: IFFALSE 34910
// continue ;
34908: GO 34880
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
34910: LD_VAR 0 4
34914: PUSH
34915: LD_INT 1
34917: ARRAY
34918: PPUSH
34919: LD_VAR 0 4
34923: PUSH
34924: LD_INT 2
34926: ARRAY
34927: PPUSH
34928: CALL_OW 428
34932: PUSH
34933: LD_VAR 0 5
34937: IN
34938: IFFALSE 34967
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
34940: LD_VAR 0 4
34944: PUSH
34945: LD_INT 1
34947: ARRAY
34948: PPUSH
34949: LD_VAR 0 4
34953: PUSH
34954: LD_INT 2
34956: ARRAY
34957: PPUSH
34958: LD_VAR 0 1
34962: PPUSH
34963: CALL_OW 456
// end ;
34967: GO 34880
34969: POP
34970: POP
// end ;
34971: LD_VAR 0 3
34975: RET
// export function Count ( array ) ; var i ; begin
34976: LD_INT 0
34978: PPUSH
34979: PPUSH
// result := 0 ;
34980: LD_ADDR_VAR 0 2
34984: PUSH
34985: LD_INT 0
34987: ST_TO_ADDR
// for i in array do
34988: LD_ADDR_VAR 0 3
34992: PUSH
34993: LD_VAR 0 1
34997: PUSH
34998: FOR_IN
34999: IFFALSE 35023
// if i then
35001: LD_VAR 0 3
35005: IFFALSE 35021
// result := result + 1 ;
35007: LD_ADDR_VAR 0 2
35011: PUSH
35012: LD_VAR 0 2
35016: PUSH
35017: LD_INT 1
35019: PLUS
35020: ST_TO_ADDR
35021: GO 34998
35023: POP
35024: POP
// end ;
35025: LD_VAR 0 2
35029: RET
// export function IsEmpty ( building ) ; begin
35030: LD_INT 0
35032: PPUSH
// if not building then
35033: LD_VAR 0 1
35037: NOT
35038: IFFALSE 35042
// exit ;
35040: GO 35085
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
35042: LD_ADDR_VAR 0 2
35046: PUSH
35047: LD_VAR 0 1
35051: PUSH
35052: LD_INT 22
35054: PUSH
35055: LD_VAR 0 1
35059: PPUSH
35060: CALL_OW 255
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: PUSH
35069: LD_INT 58
35071: PUSH
35072: EMPTY
35073: LIST
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PPUSH
35079: CALL_OW 69
35083: IN
35084: ST_TO_ADDR
// end ;
35085: LD_VAR 0 2
35089: RET
// export function IsNotFull ( building ) ; var places ; begin
35090: LD_INT 0
35092: PPUSH
35093: PPUSH
// if not building then
35094: LD_VAR 0 1
35098: NOT
35099: IFFALSE 35103
// exit ;
35101: GO 35274
// result := false ;
35103: LD_ADDR_VAR 0 2
35107: PUSH
35108: LD_INT 0
35110: ST_TO_ADDR
// places := 0 ;
35111: LD_ADDR_VAR 0 3
35115: PUSH
35116: LD_INT 0
35118: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
35119: LD_VAR 0 1
35123: PPUSH
35124: CALL_OW 266
35128: PUSH
35129: LD_INT 0
35131: DOUBLE
35132: EQUAL
35133: IFTRUE 35191
35135: LD_INT 1
35137: DOUBLE
35138: EQUAL
35139: IFTRUE 35191
35141: LD_INT 6
35143: DOUBLE
35144: EQUAL
35145: IFTRUE 35191
35147: LD_INT 7
35149: DOUBLE
35150: EQUAL
35151: IFTRUE 35191
35153: LD_INT 8
35155: DOUBLE
35156: EQUAL
35157: IFTRUE 35191
35159: LD_INT 4
35161: DOUBLE
35162: EQUAL
35163: IFTRUE 35191
35165: LD_INT 5
35167: DOUBLE
35168: EQUAL
35169: IFTRUE 35191
35171: LD_INT 2
35173: DOUBLE
35174: EQUAL
35175: IFTRUE 35191
35177: LD_INT 3
35179: DOUBLE
35180: EQUAL
35181: IFTRUE 35191
35183: LD_INT 35
35185: DOUBLE
35186: EQUAL
35187: IFTRUE 35191
35189: GO 35202
35191: POP
// places := 6 ; b_bunker , b_breastwork :
35192: LD_ADDR_VAR 0 3
35196: PUSH
35197: LD_INT 6
35199: ST_TO_ADDR
35200: GO 35247
35202: LD_INT 32
35204: DOUBLE
35205: EQUAL
35206: IFTRUE 35216
35208: LD_INT 31
35210: DOUBLE
35211: EQUAL
35212: IFTRUE 35216
35214: GO 35227
35216: POP
// places := 1 ; b_control_tower :
35217: LD_ADDR_VAR 0 3
35221: PUSH
35222: LD_INT 1
35224: ST_TO_ADDR
35225: GO 35247
35227: LD_INT 36
35229: DOUBLE
35230: EQUAL
35231: IFTRUE 35235
35233: GO 35246
35235: POP
// places := 3 ; end ;
35236: LD_ADDR_VAR 0 3
35240: PUSH
35241: LD_INT 3
35243: ST_TO_ADDR
35244: GO 35247
35246: POP
// if places then
35247: LD_VAR 0 3
35251: IFFALSE 35274
// result := UnitsInside ( building ) < places ;
35253: LD_ADDR_VAR 0 2
35257: PUSH
35258: LD_VAR 0 1
35262: PPUSH
35263: CALL_OW 313
35267: PUSH
35268: LD_VAR 0 3
35272: LESS
35273: ST_TO_ADDR
// end ;
35274: LD_VAR 0 2
35278: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35279: LD_INT 0
35281: PPUSH
35282: PPUSH
35283: PPUSH
35284: PPUSH
// tmp := [ ] ;
35285: LD_ADDR_VAR 0 3
35289: PUSH
35290: EMPTY
35291: ST_TO_ADDR
// list := [ ] ;
35292: LD_ADDR_VAR 0 5
35296: PUSH
35297: EMPTY
35298: ST_TO_ADDR
// for i = 16 to 25 do
35299: LD_ADDR_VAR 0 4
35303: PUSH
35304: DOUBLE
35305: LD_INT 16
35307: DEC
35308: ST_TO_ADDR
35309: LD_INT 25
35311: PUSH
35312: FOR_TO
35313: IFFALSE 35386
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35315: LD_ADDR_VAR 0 3
35319: PUSH
35320: LD_VAR 0 3
35324: PUSH
35325: LD_INT 22
35327: PUSH
35328: LD_VAR 0 1
35332: PPUSH
35333: CALL_OW 255
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: LD_INT 91
35344: PUSH
35345: LD_VAR 0 1
35349: PUSH
35350: LD_INT 6
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: LIST
35357: PUSH
35358: LD_INT 30
35360: PUSH
35361: LD_VAR 0 4
35365: PUSH
35366: EMPTY
35367: LIST
35368: LIST
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: LIST
35374: PUSH
35375: EMPTY
35376: LIST
35377: PPUSH
35378: CALL_OW 69
35382: ADD
35383: ST_TO_ADDR
35384: GO 35312
35386: POP
35387: POP
// for i = 1 to tmp do
35388: LD_ADDR_VAR 0 4
35392: PUSH
35393: DOUBLE
35394: LD_INT 1
35396: DEC
35397: ST_TO_ADDR
35398: LD_VAR 0 3
35402: PUSH
35403: FOR_TO
35404: IFFALSE 35492
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
35406: LD_ADDR_VAR 0 5
35410: PUSH
35411: LD_VAR 0 5
35415: PUSH
35416: LD_VAR 0 3
35420: PUSH
35421: LD_VAR 0 4
35425: ARRAY
35426: PPUSH
35427: CALL_OW 266
35431: PUSH
35432: LD_VAR 0 3
35436: PUSH
35437: LD_VAR 0 4
35441: ARRAY
35442: PPUSH
35443: CALL_OW 250
35447: PUSH
35448: LD_VAR 0 3
35452: PUSH
35453: LD_VAR 0 4
35457: ARRAY
35458: PPUSH
35459: CALL_OW 251
35463: PUSH
35464: LD_VAR 0 3
35468: PUSH
35469: LD_VAR 0 4
35473: ARRAY
35474: PPUSH
35475: CALL_OW 254
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: LIST
35484: LIST
35485: PUSH
35486: EMPTY
35487: LIST
35488: ADD
35489: ST_TO_ADDR
35490: GO 35403
35492: POP
35493: POP
// result := list ;
35494: LD_ADDR_VAR 0 2
35498: PUSH
35499: LD_VAR 0 5
35503: ST_TO_ADDR
// end ;
35504: LD_VAR 0 2
35508: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
35509: LD_INT 0
35511: PPUSH
35512: PPUSH
35513: PPUSH
35514: PPUSH
35515: PPUSH
35516: PPUSH
35517: PPUSH
// if not factory then
35518: LD_VAR 0 1
35522: NOT
35523: IFFALSE 35527
// exit ;
35525: GO 36120
// if control = control_apeman then
35527: LD_VAR 0 4
35531: PUSH
35532: LD_INT 5
35534: EQUAL
35535: IFFALSE 35644
// begin tmp := UnitsInside ( factory ) ;
35537: LD_ADDR_VAR 0 8
35541: PUSH
35542: LD_VAR 0 1
35546: PPUSH
35547: CALL_OW 313
35551: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
35552: LD_VAR 0 8
35556: PPUSH
35557: LD_INT 25
35559: PUSH
35560: LD_INT 12
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: PPUSH
35567: CALL_OW 72
35571: NOT
35572: IFFALSE 35582
// control := control_manual ;
35574: LD_ADDR_VAR 0 4
35578: PUSH
35579: LD_INT 1
35581: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
35582: LD_ADDR_VAR 0 8
35586: PUSH
35587: LD_VAR 0 1
35591: PPUSH
35592: CALL 35279 0 1
35596: ST_TO_ADDR
// if tmp then
35597: LD_VAR 0 8
35601: IFFALSE 35644
// begin for i in tmp do
35603: LD_ADDR_VAR 0 7
35607: PUSH
35608: LD_VAR 0 8
35612: PUSH
35613: FOR_IN
35614: IFFALSE 35642
// if i [ 1 ] = b_ext_radio then
35616: LD_VAR 0 7
35620: PUSH
35621: LD_INT 1
35623: ARRAY
35624: PUSH
35625: LD_INT 22
35627: EQUAL
35628: IFFALSE 35640
// begin control := control_remote ;
35630: LD_ADDR_VAR 0 4
35634: PUSH
35635: LD_INT 2
35637: ST_TO_ADDR
// break ;
35638: GO 35642
// end ;
35640: GO 35613
35642: POP
35643: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35644: LD_VAR 0 1
35648: PPUSH
35649: LD_VAR 0 2
35653: PPUSH
35654: LD_VAR 0 3
35658: PPUSH
35659: LD_VAR 0 4
35663: PPUSH
35664: LD_VAR 0 5
35668: PPUSH
35669: CALL_OW 448
35673: IFFALSE 35708
// begin result := [ chassis , engine , control , weapon ] ;
35675: LD_ADDR_VAR 0 6
35679: PUSH
35680: LD_VAR 0 2
35684: PUSH
35685: LD_VAR 0 3
35689: PUSH
35690: LD_VAR 0 4
35694: PUSH
35695: LD_VAR 0 5
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: LIST
35704: LIST
35705: ST_TO_ADDR
// exit ;
35706: GO 36120
// end ; _chassis := AvailableChassisList ( factory ) ;
35708: LD_ADDR_VAR 0 9
35712: PUSH
35713: LD_VAR 0 1
35717: PPUSH
35718: CALL_OW 475
35722: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35723: LD_ADDR_VAR 0 11
35727: PUSH
35728: LD_VAR 0 1
35732: PPUSH
35733: CALL_OW 476
35737: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35738: LD_ADDR_VAR 0 12
35742: PUSH
35743: LD_VAR 0 1
35747: PPUSH
35748: CALL_OW 477
35752: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35753: LD_ADDR_VAR 0 10
35757: PUSH
35758: LD_VAR 0 1
35762: PPUSH
35763: CALL_OW 478
35767: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35768: LD_VAR 0 9
35772: NOT
35773: PUSH
35774: LD_VAR 0 11
35778: NOT
35779: OR
35780: PUSH
35781: LD_VAR 0 12
35785: NOT
35786: OR
35787: PUSH
35788: LD_VAR 0 10
35792: NOT
35793: OR
35794: IFFALSE 35829
// begin result := [ chassis , engine , control , weapon ] ;
35796: LD_ADDR_VAR 0 6
35800: PUSH
35801: LD_VAR 0 2
35805: PUSH
35806: LD_VAR 0 3
35810: PUSH
35811: LD_VAR 0 4
35815: PUSH
35816: LD_VAR 0 5
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: LIST
35825: LIST
35826: ST_TO_ADDR
// exit ;
35827: GO 36120
// end ; if not chassis in _chassis then
35829: LD_VAR 0 2
35833: PUSH
35834: LD_VAR 0 9
35838: IN
35839: NOT
35840: IFFALSE 35866
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35842: LD_ADDR_VAR 0 2
35846: PUSH
35847: LD_VAR 0 9
35851: PUSH
35852: LD_INT 1
35854: PPUSH
35855: LD_VAR 0 9
35859: PPUSH
35860: CALL_OW 12
35864: ARRAY
35865: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35866: LD_VAR 0 2
35870: PPUSH
35871: LD_VAR 0 3
35875: PPUSH
35876: CALL 36125 0 2
35880: NOT
35881: IFFALSE 35940
// repeat engine := _engine [ 1 ] ;
35883: LD_ADDR_VAR 0 3
35887: PUSH
35888: LD_VAR 0 11
35892: PUSH
35893: LD_INT 1
35895: ARRAY
35896: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35897: LD_ADDR_VAR 0 11
35901: PUSH
35902: LD_VAR 0 11
35906: PPUSH
35907: LD_INT 1
35909: PPUSH
35910: CALL_OW 3
35914: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35915: LD_VAR 0 2
35919: PPUSH
35920: LD_VAR 0 3
35924: PPUSH
35925: CALL 36125 0 2
35929: PUSH
35930: LD_VAR 0 11
35934: PUSH
35935: EMPTY
35936: EQUAL
35937: OR
35938: IFFALSE 35883
// if not control in _control then
35940: LD_VAR 0 4
35944: PUSH
35945: LD_VAR 0 12
35949: IN
35950: NOT
35951: IFFALSE 35977
// control := _control [ rand ( 1 , _control ) ] ;
35953: LD_ADDR_VAR 0 4
35957: PUSH
35958: LD_VAR 0 12
35962: PUSH
35963: LD_INT 1
35965: PPUSH
35966: LD_VAR 0 12
35970: PPUSH
35971: CALL_OW 12
35975: ARRAY
35976: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35977: LD_VAR 0 2
35981: PPUSH
35982: LD_VAR 0 5
35986: PPUSH
35987: CALL 36345 0 2
35991: NOT
35992: IFFALSE 36051
// repeat weapon := _weapon [ 1 ] ;
35994: LD_ADDR_VAR 0 5
35998: PUSH
35999: LD_VAR 0 10
36003: PUSH
36004: LD_INT 1
36006: ARRAY
36007: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
36008: LD_ADDR_VAR 0 10
36012: PUSH
36013: LD_VAR 0 10
36017: PPUSH
36018: LD_INT 1
36020: PPUSH
36021: CALL_OW 3
36025: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
36026: LD_VAR 0 2
36030: PPUSH
36031: LD_VAR 0 5
36035: PPUSH
36036: CALL 36345 0 2
36040: PUSH
36041: LD_VAR 0 10
36045: PUSH
36046: EMPTY
36047: EQUAL
36048: OR
36049: IFFALSE 35994
// result := [ ] ;
36051: LD_ADDR_VAR 0 6
36055: PUSH
36056: EMPTY
36057: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36058: LD_VAR 0 1
36062: PPUSH
36063: LD_VAR 0 2
36067: PPUSH
36068: LD_VAR 0 3
36072: PPUSH
36073: LD_VAR 0 4
36077: PPUSH
36078: LD_VAR 0 5
36082: PPUSH
36083: CALL_OW 448
36087: IFFALSE 36120
// result := [ chassis , engine , control , weapon ] ;
36089: LD_ADDR_VAR 0 6
36093: PUSH
36094: LD_VAR 0 2
36098: PUSH
36099: LD_VAR 0 3
36103: PUSH
36104: LD_VAR 0 4
36108: PUSH
36109: LD_VAR 0 5
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: LIST
36118: LIST
36119: ST_TO_ADDR
// end ;
36120: LD_VAR 0 6
36124: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
36125: LD_INT 0
36127: PPUSH
// if not chassis or not engine then
36128: LD_VAR 0 1
36132: NOT
36133: PUSH
36134: LD_VAR 0 2
36138: NOT
36139: OR
36140: IFFALSE 36144
// exit ;
36142: GO 36340
// case engine of engine_solar :
36144: LD_VAR 0 2
36148: PUSH
36149: LD_INT 2
36151: DOUBLE
36152: EQUAL
36153: IFTRUE 36157
36155: GO 36195
36157: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
36158: LD_ADDR_VAR 0 3
36162: PUSH
36163: LD_INT 11
36165: PUSH
36166: LD_INT 12
36168: PUSH
36169: LD_INT 13
36171: PUSH
36172: LD_INT 14
36174: PUSH
36175: LD_INT 1
36177: PUSH
36178: LD_INT 2
36180: PUSH
36181: LD_INT 3
36183: PUSH
36184: EMPTY
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: ST_TO_ADDR
36193: GO 36324
36195: LD_INT 1
36197: DOUBLE
36198: EQUAL
36199: IFTRUE 36203
36201: GO 36265
36203: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36204: LD_ADDR_VAR 0 3
36208: PUSH
36209: LD_INT 11
36211: PUSH
36212: LD_INT 12
36214: PUSH
36215: LD_INT 13
36217: PUSH
36218: LD_INT 14
36220: PUSH
36221: LD_INT 1
36223: PUSH
36224: LD_INT 2
36226: PUSH
36227: LD_INT 3
36229: PUSH
36230: LD_INT 4
36232: PUSH
36233: LD_INT 5
36235: PUSH
36236: LD_INT 21
36238: PUSH
36239: LD_INT 23
36241: PUSH
36242: LD_INT 22
36244: PUSH
36245: LD_INT 24
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: ST_TO_ADDR
36263: GO 36324
36265: LD_INT 3
36267: DOUBLE
36268: EQUAL
36269: IFTRUE 36273
36271: GO 36323
36273: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36274: LD_ADDR_VAR 0 3
36278: PUSH
36279: LD_INT 13
36281: PUSH
36282: LD_INT 14
36284: PUSH
36285: LD_INT 2
36287: PUSH
36288: LD_INT 3
36290: PUSH
36291: LD_INT 4
36293: PUSH
36294: LD_INT 5
36296: PUSH
36297: LD_INT 21
36299: PUSH
36300: LD_INT 22
36302: PUSH
36303: LD_INT 23
36305: PUSH
36306: LD_INT 24
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: LIST
36313: LIST
36314: LIST
36315: LIST
36316: LIST
36317: LIST
36318: LIST
36319: LIST
36320: ST_TO_ADDR
36321: GO 36324
36323: POP
// result := ( chassis in result ) ;
36324: LD_ADDR_VAR 0 3
36328: PUSH
36329: LD_VAR 0 1
36333: PUSH
36334: LD_VAR 0 3
36338: IN
36339: ST_TO_ADDR
// end ;
36340: LD_VAR 0 3
36344: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36345: LD_INT 0
36347: PPUSH
// if not chassis or not weapon then
36348: LD_VAR 0 1
36352: NOT
36353: PUSH
36354: LD_VAR 0 2
36358: NOT
36359: OR
36360: IFFALSE 36364
// exit ;
36362: GO 37424
// case weapon of us_machine_gun :
36364: LD_VAR 0 2
36368: PUSH
36369: LD_INT 2
36371: DOUBLE
36372: EQUAL
36373: IFTRUE 36377
36375: GO 36407
36377: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36378: LD_ADDR_VAR 0 3
36382: PUSH
36383: LD_INT 1
36385: PUSH
36386: LD_INT 2
36388: PUSH
36389: LD_INT 3
36391: PUSH
36392: LD_INT 4
36394: PUSH
36395: LD_INT 5
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: ST_TO_ADDR
36405: GO 37408
36407: LD_INT 3
36409: DOUBLE
36410: EQUAL
36411: IFTRUE 36415
36413: GO 36445
36415: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
36416: LD_ADDR_VAR 0 3
36420: PUSH
36421: LD_INT 1
36423: PUSH
36424: LD_INT 2
36426: PUSH
36427: LD_INT 3
36429: PUSH
36430: LD_INT 4
36432: PUSH
36433: LD_INT 5
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: LIST
36442: ST_TO_ADDR
36443: GO 37408
36445: LD_INT 11
36447: DOUBLE
36448: EQUAL
36449: IFTRUE 36453
36451: GO 36483
36453: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
36454: LD_ADDR_VAR 0 3
36458: PUSH
36459: LD_INT 1
36461: PUSH
36462: LD_INT 2
36464: PUSH
36465: LD_INT 3
36467: PUSH
36468: LD_INT 4
36470: PUSH
36471: LD_INT 5
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: LIST
36478: LIST
36479: LIST
36480: ST_TO_ADDR
36481: GO 37408
36483: LD_INT 4
36485: DOUBLE
36486: EQUAL
36487: IFTRUE 36491
36489: GO 36517
36491: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
36492: LD_ADDR_VAR 0 3
36496: PUSH
36497: LD_INT 2
36499: PUSH
36500: LD_INT 3
36502: PUSH
36503: LD_INT 4
36505: PUSH
36506: LD_INT 5
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: ST_TO_ADDR
36515: GO 37408
36517: LD_INT 5
36519: DOUBLE
36520: EQUAL
36521: IFTRUE 36525
36523: GO 36551
36525: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
36526: LD_ADDR_VAR 0 3
36530: PUSH
36531: LD_INT 2
36533: PUSH
36534: LD_INT 3
36536: PUSH
36537: LD_INT 4
36539: PUSH
36540: LD_INT 5
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: ST_TO_ADDR
36549: GO 37408
36551: LD_INT 9
36553: DOUBLE
36554: EQUAL
36555: IFTRUE 36559
36557: GO 36585
36559: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
36560: LD_ADDR_VAR 0 3
36564: PUSH
36565: LD_INT 2
36567: PUSH
36568: LD_INT 3
36570: PUSH
36571: LD_INT 4
36573: PUSH
36574: LD_INT 5
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: LIST
36581: LIST
36582: ST_TO_ADDR
36583: GO 37408
36585: LD_INT 7
36587: DOUBLE
36588: EQUAL
36589: IFTRUE 36593
36591: GO 36619
36593: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
36594: LD_ADDR_VAR 0 3
36598: PUSH
36599: LD_INT 2
36601: PUSH
36602: LD_INT 3
36604: PUSH
36605: LD_INT 4
36607: PUSH
36608: LD_INT 5
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: LIST
36615: LIST
36616: ST_TO_ADDR
36617: GO 37408
36619: LD_INT 12
36621: DOUBLE
36622: EQUAL
36623: IFTRUE 36627
36625: GO 36653
36627: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
36628: LD_ADDR_VAR 0 3
36632: PUSH
36633: LD_INT 2
36635: PUSH
36636: LD_INT 3
36638: PUSH
36639: LD_INT 4
36641: PUSH
36642: LD_INT 5
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: LIST
36649: LIST
36650: ST_TO_ADDR
36651: GO 37408
36653: LD_INT 13
36655: DOUBLE
36656: EQUAL
36657: IFTRUE 36661
36659: GO 36687
36661: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
36662: LD_ADDR_VAR 0 3
36666: PUSH
36667: LD_INT 2
36669: PUSH
36670: LD_INT 3
36672: PUSH
36673: LD_INT 4
36675: PUSH
36676: LD_INT 5
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: ST_TO_ADDR
36685: GO 37408
36687: LD_INT 14
36689: DOUBLE
36690: EQUAL
36691: IFTRUE 36695
36693: GO 36713
36695: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
36696: LD_ADDR_VAR 0 3
36700: PUSH
36701: LD_INT 4
36703: PUSH
36704: LD_INT 5
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: ST_TO_ADDR
36711: GO 37408
36713: LD_INT 6
36715: DOUBLE
36716: EQUAL
36717: IFTRUE 36721
36719: GO 36739
36721: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36722: LD_ADDR_VAR 0 3
36726: PUSH
36727: LD_INT 4
36729: PUSH
36730: LD_INT 5
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: ST_TO_ADDR
36737: GO 37408
36739: LD_INT 10
36741: DOUBLE
36742: EQUAL
36743: IFTRUE 36747
36745: GO 36765
36747: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36748: LD_ADDR_VAR 0 3
36752: PUSH
36753: LD_INT 4
36755: PUSH
36756: LD_INT 5
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: ST_TO_ADDR
36763: GO 37408
36765: LD_INT 22
36767: DOUBLE
36768: EQUAL
36769: IFTRUE 36773
36771: GO 36799
36773: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36774: LD_ADDR_VAR 0 3
36778: PUSH
36779: LD_INT 11
36781: PUSH
36782: LD_INT 12
36784: PUSH
36785: LD_INT 13
36787: PUSH
36788: LD_INT 14
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: ST_TO_ADDR
36797: GO 37408
36799: LD_INT 23
36801: DOUBLE
36802: EQUAL
36803: IFTRUE 36807
36805: GO 36833
36807: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36808: LD_ADDR_VAR 0 3
36812: PUSH
36813: LD_INT 11
36815: PUSH
36816: LD_INT 12
36818: PUSH
36819: LD_INT 13
36821: PUSH
36822: LD_INT 14
36824: PUSH
36825: EMPTY
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: ST_TO_ADDR
36831: GO 37408
36833: LD_INT 24
36835: DOUBLE
36836: EQUAL
36837: IFTRUE 36841
36839: GO 36867
36841: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36842: LD_ADDR_VAR 0 3
36846: PUSH
36847: LD_INT 11
36849: PUSH
36850: LD_INT 12
36852: PUSH
36853: LD_INT 13
36855: PUSH
36856: LD_INT 14
36858: PUSH
36859: EMPTY
36860: LIST
36861: LIST
36862: LIST
36863: LIST
36864: ST_TO_ADDR
36865: GO 37408
36867: LD_INT 30
36869: DOUBLE
36870: EQUAL
36871: IFTRUE 36875
36873: GO 36901
36875: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36876: LD_ADDR_VAR 0 3
36880: PUSH
36881: LD_INT 11
36883: PUSH
36884: LD_INT 12
36886: PUSH
36887: LD_INT 13
36889: PUSH
36890: LD_INT 14
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: LIST
36897: LIST
36898: ST_TO_ADDR
36899: GO 37408
36901: LD_INT 25
36903: DOUBLE
36904: EQUAL
36905: IFTRUE 36909
36907: GO 36927
36909: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36910: LD_ADDR_VAR 0 3
36914: PUSH
36915: LD_INT 13
36917: PUSH
36918: LD_INT 14
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: ST_TO_ADDR
36925: GO 37408
36927: LD_INT 27
36929: DOUBLE
36930: EQUAL
36931: IFTRUE 36935
36933: GO 36953
36935: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
36936: LD_ADDR_VAR 0 3
36940: PUSH
36941: LD_INT 13
36943: PUSH
36944: LD_INT 14
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: ST_TO_ADDR
36951: GO 37408
36953: LD_INT 92
36955: DOUBLE
36956: EQUAL
36957: IFTRUE 36961
36959: GO 36987
36961: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36962: LD_ADDR_VAR 0 3
36966: PUSH
36967: LD_INT 11
36969: PUSH
36970: LD_INT 12
36972: PUSH
36973: LD_INT 13
36975: PUSH
36976: LD_INT 14
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: ST_TO_ADDR
36985: GO 37408
36987: LD_INT 28
36989: DOUBLE
36990: EQUAL
36991: IFTRUE 36995
36993: GO 37013
36995: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36996: LD_ADDR_VAR 0 3
37000: PUSH
37001: LD_INT 13
37003: PUSH
37004: LD_INT 14
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: ST_TO_ADDR
37011: GO 37408
37013: LD_INT 29
37015: DOUBLE
37016: EQUAL
37017: IFTRUE 37021
37019: GO 37039
37021: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
37022: LD_ADDR_VAR 0 3
37026: PUSH
37027: LD_INT 13
37029: PUSH
37030: LD_INT 14
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: ST_TO_ADDR
37037: GO 37408
37039: LD_INT 31
37041: DOUBLE
37042: EQUAL
37043: IFTRUE 37047
37045: GO 37065
37047: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
37048: LD_ADDR_VAR 0 3
37052: PUSH
37053: LD_INT 13
37055: PUSH
37056: LD_INT 14
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: ST_TO_ADDR
37063: GO 37408
37065: LD_INT 26
37067: DOUBLE
37068: EQUAL
37069: IFTRUE 37073
37071: GO 37091
37073: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
37074: LD_ADDR_VAR 0 3
37078: PUSH
37079: LD_INT 13
37081: PUSH
37082: LD_INT 14
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: ST_TO_ADDR
37089: GO 37408
37091: LD_INT 42
37093: DOUBLE
37094: EQUAL
37095: IFTRUE 37099
37097: GO 37125
37099: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
37100: LD_ADDR_VAR 0 3
37104: PUSH
37105: LD_INT 21
37107: PUSH
37108: LD_INT 22
37110: PUSH
37111: LD_INT 23
37113: PUSH
37114: LD_INT 24
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: LIST
37121: LIST
37122: ST_TO_ADDR
37123: GO 37408
37125: LD_INT 43
37127: DOUBLE
37128: EQUAL
37129: IFTRUE 37133
37131: GO 37159
37133: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
37134: LD_ADDR_VAR 0 3
37138: PUSH
37139: LD_INT 21
37141: PUSH
37142: LD_INT 22
37144: PUSH
37145: LD_INT 23
37147: PUSH
37148: LD_INT 24
37150: PUSH
37151: EMPTY
37152: LIST
37153: LIST
37154: LIST
37155: LIST
37156: ST_TO_ADDR
37157: GO 37408
37159: LD_INT 44
37161: DOUBLE
37162: EQUAL
37163: IFTRUE 37167
37165: GO 37193
37167: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
37168: LD_ADDR_VAR 0 3
37172: PUSH
37173: LD_INT 21
37175: PUSH
37176: LD_INT 22
37178: PUSH
37179: LD_INT 23
37181: PUSH
37182: LD_INT 24
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: ST_TO_ADDR
37191: GO 37408
37193: LD_INT 45
37195: DOUBLE
37196: EQUAL
37197: IFTRUE 37201
37199: GO 37227
37201: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37202: LD_ADDR_VAR 0 3
37206: PUSH
37207: LD_INT 21
37209: PUSH
37210: LD_INT 22
37212: PUSH
37213: LD_INT 23
37215: PUSH
37216: LD_INT 24
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: ST_TO_ADDR
37225: GO 37408
37227: LD_INT 49
37229: DOUBLE
37230: EQUAL
37231: IFTRUE 37235
37233: GO 37261
37235: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37236: LD_ADDR_VAR 0 3
37240: PUSH
37241: LD_INT 21
37243: PUSH
37244: LD_INT 22
37246: PUSH
37247: LD_INT 23
37249: PUSH
37250: LD_INT 24
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: LIST
37257: LIST
37258: ST_TO_ADDR
37259: GO 37408
37261: LD_INT 51
37263: DOUBLE
37264: EQUAL
37265: IFTRUE 37269
37267: GO 37295
37269: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37270: LD_ADDR_VAR 0 3
37274: PUSH
37275: LD_INT 21
37277: PUSH
37278: LD_INT 22
37280: PUSH
37281: LD_INT 23
37283: PUSH
37284: LD_INT 24
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: ST_TO_ADDR
37293: GO 37408
37295: LD_INT 52
37297: DOUBLE
37298: EQUAL
37299: IFTRUE 37303
37301: GO 37329
37303: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37304: LD_ADDR_VAR 0 3
37308: PUSH
37309: LD_INT 21
37311: PUSH
37312: LD_INT 22
37314: PUSH
37315: LD_INT 23
37317: PUSH
37318: LD_INT 24
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: LIST
37325: LIST
37326: ST_TO_ADDR
37327: GO 37408
37329: LD_INT 53
37331: DOUBLE
37332: EQUAL
37333: IFTRUE 37337
37335: GO 37355
37337: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37338: LD_ADDR_VAR 0 3
37342: PUSH
37343: LD_INT 23
37345: PUSH
37346: LD_INT 24
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: ST_TO_ADDR
37353: GO 37408
37355: LD_INT 46
37357: DOUBLE
37358: EQUAL
37359: IFTRUE 37363
37361: GO 37381
37363: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37364: LD_ADDR_VAR 0 3
37368: PUSH
37369: LD_INT 23
37371: PUSH
37372: LD_INT 24
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: ST_TO_ADDR
37379: GO 37408
37381: LD_INT 47
37383: DOUBLE
37384: EQUAL
37385: IFTRUE 37389
37387: GO 37407
37389: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37390: LD_ADDR_VAR 0 3
37394: PUSH
37395: LD_INT 23
37397: PUSH
37398: LD_INT 24
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: ST_TO_ADDR
37405: GO 37408
37407: POP
// result := ( chassis in result ) ;
37408: LD_ADDR_VAR 0 3
37412: PUSH
37413: LD_VAR 0 1
37417: PUSH
37418: LD_VAR 0 3
37422: IN
37423: ST_TO_ADDR
// end ;
37424: LD_VAR 0 3
37428: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
37429: LD_INT 0
37431: PPUSH
37432: PPUSH
37433: PPUSH
37434: PPUSH
37435: PPUSH
37436: PPUSH
37437: PPUSH
// result := array ;
37438: LD_ADDR_VAR 0 5
37442: PUSH
37443: LD_VAR 0 1
37447: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
37448: LD_VAR 0 1
37452: NOT
37453: PUSH
37454: LD_VAR 0 2
37458: NOT
37459: OR
37460: PUSH
37461: LD_VAR 0 3
37465: NOT
37466: OR
37467: PUSH
37468: LD_VAR 0 2
37472: PUSH
37473: LD_VAR 0 1
37477: GREATER
37478: OR
37479: PUSH
37480: LD_VAR 0 3
37484: PUSH
37485: LD_VAR 0 1
37489: GREATER
37490: OR
37491: IFFALSE 37495
// exit ;
37493: GO 37791
// if direction then
37495: LD_VAR 0 4
37499: IFFALSE 37563
// begin d := 1 ;
37501: LD_ADDR_VAR 0 9
37505: PUSH
37506: LD_INT 1
37508: ST_TO_ADDR
// if i_from > i_to then
37509: LD_VAR 0 2
37513: PUSH
37514: LD_VAR 0 3
37518: GREATER
37519: IFFALSE 37545
// length := ( array - i_from ) + i_to else
37521: LD_ADDR_VAR 0 11
37525: PUSH
37526: LD_VAR 0 1
37530: PUSH
37531: LD_VAR 0 2
37535: MINUS
37536: PUSH
37537: LD_VAR 0 3
37541: PLUS
37542: ST_TO_ADDR
37543: GO 37561
// length := i_to - i_from ;
37545: LD_ADDR_VAR 0 11
37549: PUSH
37550: LD_VAR 0 3
37554: PUSH
37555: LD_VAR 0 2
37559: MINUS
37560: ST_TO_ADDR
// end else
37561: GO 37624
// begin d := - 1 ;
37563: LD_ADDR_VAR 0 9
37567: PUSH
37568: LD_INT 1
37570: NEG
37571: ST_TO_ADDR
// if i_from > i_to then
37572: LD_VAR 0 2
37576: PUSH
37577: LD_VAR 0 3
37581: GREATER
37582: IFFALSE 37602
// length := i_from - i_to else
37584: LD_ADDR_VAR 0 11
37588: PUSH
37589: LD_VAR 0 2
37593: PUSH
37594: LD_VAR 0 3
37598: MINUS
37599: ST_TO_ADDR
37600: GO 37624
// length := ( array - i_to ) + i_from ;
37602: LD_ADDR_VAR 0 11
37606: PUSH
37607: LD_VAR 0 1
37611: PUSH
37612: LD_VAR 0 3
37616: MINUS
37617: PUSH
37618: LD_VAR 0 2
37622: PLUS
37623: ST_TO_ADDR
// end ; if not length then
37624: LD_VAR 0 11
37628: NOT
37629: IFFALSE 37633
// exit ;
37631: GO 37791
// tmp := array ;
37633: LD_ADDR_VAR 0 10
37637: PUSH
37638: LD_VAR 0 1
37642: ST_TO_ADDR
// for i = 1 to length do
37643: LD_ADDR_VAR 0 6
37647: PUSH
37648: DOUBLE
37649: LD_INT 1
37651: DEC
37652: ST_TO_ADDR
37653: LD_VAR 0 11
37657: PUSH
37658: FOR_TO
37659: IFFALSE 37779
// begin for j = 1 to array do
37661: LD_ADDR_VAR 0 7
37665: PUSH
37666: DOUBLE
37667: LD_INT 1
37669: DEC
37670: ST_TO_ADDR
37671: LD_VAR 0 1
37675: PUSH
37676: FOR_TO
37677: IFFALSE 37765
// begin k := j + d ;
37679: LD_ADDR_VAR 0 8
37683: PUSH
37684: LD_VAR 0 7
37688: PUSH
37689: LD_VAR 0 9
37693: PLUS
37694: ST_TO_ADDR
// if k > array then
37695: LD_VAR 0 8
37699: PUSH
37700: LD_VAR 0 1
37704: GREATER
37705: IFFALSE 37715
// k := 1 ;
37707: LD_ADDR_VAR 0 8
37711: PUSH
37712: LD_INT 1
37714: ST_TO_ADDR
// if not k then
37715: LD_VAR 0 8
37719: NOT
37720: IFFALSE 37732
// k := array ;
37722: LD_ADDR_VAR 0 8
37726: PUSH
37727: LD_VAR 0 1
37731: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
37732: LD_ADDR_VAR 0 10
37736: PUSH
37737: LD_VAR 0 10
37741: PPUSH
37742: LD_VAR 0 8
37746: PPUSH
37747: LD_VAR 0 1
37751: PUSH
37752: LD_VAR 0 7
37756: ARRAY
37757: PPUSH
37758: CALL_OW 1
37762: ST_TO_ADDR
// end ;
37763: GO 37676
37765: POP
37766: POP
// array := tmp ;
37767: LD_ADDR_VAR 0 1
37771: PUSH
37772: LD_VAR 0 10
37776: ST_TO_ADDR
// end ;
37777: GO 37658
37779: POP
37780: POP
// result := array ;
37781: LD_ADDR_VAR 0 5
37785: PUSH
37786: LD_VAR 0 1
37790: ST_TO_ADDR
// end ;
37791: LD_VAR 0 5
37795: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37796: LD_INT 0
37798: PPUSH
37799: PPUSH
// result := 0 ;
37800: LD_ADDR_VAR 0 3
37804: PUSH
37805: LD_INT 0
37807: ST_TO_ADDR
// if not array or not value in array then
37808: LD_VAR 0 1
37812: NOT
37813: PUSH
37814: LD_VAR 0 2
37818: PUSH
37819: LD_VAR 0 1
37823: IN
37824: NOT
37825: OR
37826: IFFALSE 37830
// exit ;
37828: GO 37884
// for i = 1 to array do
37830: LD_ADDR_VAR 0 4
37834: PUSH
37835: DOUBLE
37836: LD_INT 1
37838: DEC
37839: ST_TO_ADDR
37840: LD_VAR 0 1
37844: PUSH
37845: FOR_TO
37846: IFFALSE 37882
// if value = array [ i ] then
37848: LD_VAR 0 2
37852: PUSH
37853: LD_VAR 0 1
37857: PUSH
37858: LD_VAR 0 4
37862: ARRAY
37863: EQUAL
37864: IFFALSE 37880
// begin result := i ;
37866: LD_ADDR_VAR 0 3
37870: PUSH
37871: LD_VAR 0 4
37875: ST_TO_ADDR
// exit ;
37876: POP
37877: POP
37878: GO 37884
// end ;
37880: GO 37845
37882: POP
37883: POP
// end ;
37884: LD_VAR 0 3
37888: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37889: LD_INT 0
37891: PPUSH
// vc_chassis := chassis ;
37892: LD_ADDR_OWVAR 37
37896: PUSH
37897: LD_VAR 0 1
37901: ST_TO_ADDR
// vc_engine := engine ;
37902: LD_ADDR_OWVAR 39
37906: PUSH
37907: LD_VAR 0 2
37911: ST_TO_ADDR
// vc_control := control ;
37912: LD_ADDR_OWVAR 38
37916: PUSH
37917: LD_VAR 0 3
37921: ST_TO_ADDR
// vc_weapon := weapon ;
37922: LD_ADDR_OWVAR 40
37926: PUSH
37927: LD_VAR 0 4
37931: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37932: LD_ADDR_OWVAR 41
37936: PUSH
37937: LD_VAR 0 5
37941: ST_TO_ADDR
// end ;
37942: LD_VAR 0 6
37946: RET
// export function WantPlant ( unit ) ; var task ; begin
37947: LD_INT 0
37949: PPUSH
37950: PPUSH
// result := false ;
37951: LD_ADDR_VAR 0 2
37955: PUSH
37956: LD_INT 0
37958: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37959: LD_ADDR_VAR 0 3
37963: PUSH
37964: LD_VAR 0 1
37968: PPUSH
37969: CALL_OW 437
37973: ST_TO_ADDR
// if task then
37974: LD_VAR 0 3
37978: IFFALSE 38006
// if task [ 1 ] [ 1 ] = p then
37980: LD_VAR 0 3
37984: PUSH
37985: LD_INT 1
37987: ARRAY
37988: PUSH
37989: LD_INT 1
37991: ARRAY
37992: PUSH
37993: LD_STRING p
37995: EQUAL
37996: IFFALSE 38006
// result := true ;
37998: LD_ADDR_VAR 0 2
38002: PUSH
38003: LD_INT 1
38005: ST_TO_ADDR
// end ;
38006: LD_VAR 0 2
38010: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
38011: LD_INT 0
38013: PPUSH
38014: PPUSH
38015: PPUSH
38016: PPUSH
// if pos < 1 then
38017: LD_VAR 0 2
38021: PUSH
38022: LD_INT 1
38024: LESS
38025: IFFALSE 38029
// exit ;
38027: GO 38332
// if pos = 1 then
38029: LD_VAR 0 2
38033: PUSH
38034: LD_INT 1
38036: EQUAL
38037: IFFALSE 38070
// result := Replace ( arr , pos [ 1 ] , value ) else
38039: LD_ADDR_VAR 0 4
38043: PUSH
38044: LD_VAR 0 1
38048: PPUSH
38049: LD_VAR 0 2
38053: PUSH
38054: LD_INT 1
38056: ARRAY
38057: PPUSH
38058: LD_VAR 0 3
38062: PPUSH
38063: CALL_OW 1
38067: ST_TO_ADDR
38068: GO 38332
// begin tmp := arr ;
38070: LD_ADDR_VAR 0 6
38074: PUSH
38075: LD_VAR 0 1
38079: ST_TO_ADDR
// s_arr := [ tmp ] ;
38080: LD_ADDR_VAR 0 7
38084: PUSH
38085: LD_VAR 0 6
38089: PUSH
38090: EMPTY
38091: LIST
38092: ST_TO_ADDR
// for i = 1 to pos - 1 do
38093: LD_ADDR_VAR 0 5
38097: PUSH
38098: DOUBLE
38099: LD_INT 1
38101: DEC
38102: ST_TO_ADDR
38103: LD_VAR 0 2
38107: PUSH
38108: LD_INT 1
38110: MINUS
38111: PUSH
38112: FOR_TO
38113: IFFALSE 38158
// begin tmp := tmp [ pos [ i ] ] ;
38115: LD_ADDR_VAR 0 6
38119: PUSH
38120: LD_VAR 0 6
38124: PUSH
38125: LD_VAR 0 2
38129: PUSH
38130: LD_VAR 0 5
38134: ARRAY
38135: ARRAY
38136: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
38137: LD_ADDR_VAR 0 7
38141: PUSH
38142: LD_VAR 0 7
38146: PUSH
38147: LD_VAR 0 6
38151: PUSH
38152: EMPTY
38153: LIST
38154: ADD
38155: ST_TO_ADDR
// end ;
38156: GO 38112
38158: POP
38159: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
38160: LD_ADDR_VAR 0 6
38164: PUSH
38165: LD_VAR 0 6
38169: PPUSH
38170: LD_VAR 0 2
38174: PUSH
38175: LD_VAR 0 2
38179: ARRAY
38180: PPUSH
38181: LD_VAR 0 3
38185: PPUSH
38186: CALL_OW 1
38190: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38191: LD_ADDR_VAR 0 7
38195: PUSH
38196: LD_VAR 0 7
38200: PPUSH
38201: LD_VAR 0 7
38205: PPUSH
38206: LD_VAR 0 6
38210: PPUSH
38211: CALL_OW 1
38215: ST_TO_ADDR
// for i = s_arr downto 2 do
38216: LD_ADDR_VAR 0 5
38220: PUSH
38221: DOUBLE
38222: LD_VAR 0 7
38226: INC
38227: ST_TO_ADDR
38228: LD_INT 2
38230: PUSH
38231: FOR_DOWNTO
38232: IFFALSE 38316
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38234: LD_ADDR_VAR 0 6
38238: PUSH
38239: LD_VAR 0 7
38243: PUSH
38244: LD_VAR 0 5
38248: PUSH
38249: LD_INT 1
38251: MINUS
38252: ARRAY
38253: PPUSH
38254: LD_VAR 0 2
38258: PUSH
38259: LD_VAR 0 5
38263: PUSH
38264: LD_INT 1
38266: MINUS
38267: ARRAY
38268: PPUSH
38269: LD_VAR 0 7
38273: PUSH
38274: LD_VAR 0 5
38278: ARRAY
38279: PPUSH
38280: CALL_OW 1
38284: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38285: LD_ADDR_VAR 0 7
38289: PUSH
38290: LD_VAR 0 7
38294: PPUSH
38295: LD_VAR 0 5
38299: PUSH
38300: LD_INT 1
38302: MINUS
38303: PPUSH
38304: LD_VAR 0 6
38308: PPUSH
38309: CALL_OW 1
38313: ST_TO_ADDR
// end ;
38314: GO 38231
38316: POP
38317: POP
// result := s_arr [ 1 ] ;
38318: LD_ADDR_VAR 0 4
38322: PUSH
38323: LD_VAR 0 7
38327: PUSH
38328: LD_INT 1
38330: ARRAY
38331: ST_TO_ADDR
// end ; end ;
38332: LD_VAR 0 4
38336: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38337: LD_INT 0
38339: PPUSH
38340: PPUSH
// if not list then
38341: LD_VAR 0 1
38345: NOT
38346: IFFALSE 38350
// exit ;
38348: GO 38441
// i := list [ pos1 ] ;
38350: LD_ADDR_VAR 0 5
38354: PUSH
38355: LD_VAR 0 1
38359: PUSH
38360: LD_VAR 0 2
38364: ARRAY
38365: ST_TO_ADDR
// if not i then
38366: LD_VAR 0 5
38370: NOT
38371: IFFALSE 38375
// exit ;
38373: GO 38441
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
38375: LD_ADDR_VAR 0 1
38379: PUSH
38380: LD_VAR 0 1
38384: PPUSH
38385: LD_VAR 0 2
38389: PPUSH
38390: LD_VAR 0 1
38394: PUSH
38395: LD_VAR 0 3
38399: ARRAY
38400: PPUSH
38401: CALL_OW 1
38405: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38406: LD_ADDR_VAR 0 1
38410: PUSH
38411: LD_VAR 0 1
38415: PPUSH
38416: LD_VAR 0 3
38420: PPUSH
38421: LD_VAR 0 5
38425: PPUSH
38426: CALL_OW 1
38430: ST_TO_ADDR
// result := list ;
38431: LD_ADDR_VAR 0 4
38435: PUSH
38436: LD_VAR 0 1
38440: ST_TO_ADDR
// end ;
38441: LD_VAR 0 4
38445: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
38446: LD_INT 0
38448: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
38449: LD_ADDR_VAR 0 5
38453: PUSH
38454: LD_VAR 0 1
38458: PPUSH
38459: CALL_OW 250
38463: PPUSH
38464: LD_VAR 0 1
38468: PPUSH
38469: CALL_OW 251
38473: PPUSH
38474: LD_VAR 0 2
38478: PPUSH
38479: LD_VAR 0 3
38483: PPUSH
38484: LD_VAR 0 4
38488: PPUSH
38489: CALL 38499 0 5
38493: ST_TO_ADDR
// end ;
38494: LD_VAR 0 5
38498: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
38499: LD_INT 0
38501: PPUSH
38502: PPUSH
38503: PPUSH
38504: PPUSH
// if not list then
38505: LD_VAR 0 3
38509: NOT
38510: IFFALSE 38514
// exit ;
38512: GO 38902
// result := [ ] ;
38514: LD_ADDR_VAR 0 6
38518: PUSH
38519: EMPTY
38520: ST_TO_ADDR
// for i in list do
38521: LD_ADDR_VAR 0 7
38525: PUSH
38526: LD_VAR 0 3
38530: PUSH
38531: FOR_IN
38532: IFFALSE 38734
// begin tmp := GetDistUnitXY ( i , x , y ) ;
38534: LD_ADDR_VAR 0 9
38538: PUSH
38539: LD_VAR 0 7
38543: PPUSH
38544: LD_VAR 0 1
38548: PPUSH
38549: LD_VAR 0 2
38553: PPUSH
38554: CALL_OW 297
38558: ST_TO_ADDR
// if not result then
38559: LD_VAR 0 6
38563: NOT
38564: IFFALSE 38590
// result := [ [ i , tmp ] ] else
38566: LD_ADDR_VAR 0 6
38570: PUSH
38571: LD_VAR 0 7
38575: PUSH
38576: LD_VAR 0 9
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: EMPTY
38586: LIST
38587: ST_TO_ADDR
38588: GO 38732
// begin if result [ result ] [ 2 ] < tmp then
38590: LD_VAR 0 6
38594: PUSH
38595: LD_VAR 0 6
38599: ARRAY
38600: PUSH
38601: LD_INT 2
38603: ARRAY
38604: PUSH
38605: LD_VAR 0 9
38609: LESS
38610: IFFALSE 38652
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
38612: LD_ADDR_VAR 0 6
38616: PUSH
38617: LD_VAR 0 6
38621: PPUSH
38622: LD_VAR 0 6
38626: PUSH
38627: LD_INT 1
38629: PLUS
38630: PPUSH
38631: LD_VAR 0 7
38635: PUSH
38636: LD_VAR 0 9
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PPUSH
38645: CALL_OW 2
38649: ST_TO_ADDR
38650: GO 38732
// for j = 1 to result do
38652: LD_ADDR_VAR 0 8
38656: PUSH
38657: DOUBLE
38658: LD_INT 1
38660: DEC
38661: ST_TO_ADDR
38662: LD_VAR 0 6
38666: PUSH
38667: FOR_TO
38668: IFFALSE 38730
// begin if tmp < result [ j ] [ 2 ] then
38670: LD_VAR 0 9
38674: PUSH
38675: LD_VAR 0 6
38679: PUSH
38680: LD_VAR 0 8
38684: ARRAY
38685: PUSH
38686: LD_INT 2
38688: ARRAY
38689: LESS
38690: IFFALSE 38728
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38692: LD_ADDR_VAR 0 6
38696: PUSH
38697: LD_VAR 0 6
38701: PPUSH
38702: LD_VAR 0 8
38706: PPUSH
38707: LD_VAR 0 7
38711: PUSH
38712: LD_VAR 0 9
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PPUSH
38721: CALL_OW 2
38725: ST_TO_ADDR
// break ;
38726: GO 38730
// end ; end ;
38728: GO 38667
38730: POP
38731: POP
// end ; end ;
38732: GO 38531
38734: POP
38735: POP
// if result and not asc then
38736: LD_VAR 0 6
38740: PUSH
38741: LD_VAR 0 4
38745: NOT
38746: AND
38747: IFFALSE 38822
// begin tmp := result ;
38749: LD_ADDR_VAR 0 9
38753: PUSH
38754: LD_VAR 0 6
38758: ST_TO_ADDR
// for i = tmp downto 1 do
38759: LD_ADDR_VAR 0 7
38763: PUSH
38764: DOUBLE
38765: LD_VAR 0 9
38769: INC
38770: ST_TO_ADDR
38771: LD_INT 1
38773: PUSH
38774: FOR_DOWNTO
38775: IFFALSE 38820
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38777: LD_ADDR_VAR 0 6
38781: PUSH
38782: LD_VAR 0 6
38786: PPUSH
38787: LD_VAR 0 9
38791: PUSH
38792: LD_VAR 0 7
38796: MINUS
38797: PUSH
38798: LD_INT 1
38800: PLUS
38801: PPUSH
38802: LD_VAR 0 9
38806: PUSH
38807: LD_VAR 0 7
38811: ARRAY
38812: PPUSH
38813: CALL_OW 1
38817: ST_TO_ADDR
38818: GO 38774
38820: POP
38821: POP
// end ; tmp := [ ] ;
38822: LD_ADDR_VAR 0 9
38826: PUSH
38827: EMPTY
38828: ST_TO_ADDR
// if mode then
38829: LD_VAR 0 5
38833: IFFALSE 38902
// begin for i = 1 to result do
38835: LD_ADDR_VAR 0 7
38839: PUSH
38840: DOUBLE
38841: LD_INT 1
38843: DEC
38844: ST_TO_ADDR
38845: LD_VAR 0 6
38849: PUSH
38850: FOR_TO
38851: IFFALSE 38890
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38853: LD_ADDR_VAR 0 9
38857: PUSH
38858: LD_VAR 0 9
38862: PPUSH
38863: LD_VAR 0 7
38867: PPUSH
38868: LD_VAR 0 6
38872: PUSH
38873: LD_VAR 0 7
38877: ARRAY
38878: PUSH
38879: LD_INT 1
38881: ARRAY
38882: PPUSH
38883: CALL_OW 1
38887: ST_TO_ADDR
38888: GO 38850
38890: POP
38891: POP
// result := tmp ;
38892: LD_ADDR_VAR 0 6
38896: PUSH
38897: LD_VAR 0 9
38901: ST_TO_ADDR
// end ; end ;
38902: LD_VAR 0 6
38906: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38907: LD_INT 0
38909: PPUSH
38910: PPUSH
38911: PPUSH
38912: PPUSH
38913: PPUSH
38914: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38915: LD_ADDR_VAR 0 5
38919: PUSH
38920: LD_INT 0
38922: PUSH
38923: LD_INT 0
38925: PUSH
38926: LD_INT 0
38928: PUSH
38929: EMPTY
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: ST_TO_ADDR
// if not x or not y then
38937: LD_VAR 0 2
38941: NOT
38942: PUSH
38943: LD_VAR 0 3
38947: NOT
38948: OR
38949: IFFALSE 38953
// exit ;
38951: GO 40603
// if not range then
38953: LD_VAR 0 4
38957: NOT
38958: IFFALSE 38968
// range := 10 ;
38960: LD_ADDR_VAR 0 4
38964: PUSH
38965: LD_INT 10
38967: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38968: LD_ADDR_VAR 0 8
38972: PUSH
38973: LD_INT 81
38975: PUSH
38976: LD_VAR 0 1
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: LD_INT 92
38987: PUSH
38988: LD_VAR 0 2
38992: PUSH
38993: LD_VAR 0 3
38997: PUSH
38998: LD_VAR 0 4
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: PUSH
39009: LD_INT 3
39011: PUSH
39012: LD_INT 21
39014: PUSH
39015: LD_INT 3
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: LIST
39030: PPUSH
39031: CALL_OW 69
39035: ST_TO_ADDR
// if not tmp then
39036: LD_VAR 0 8
39040: NOT
39041: IFFALSE 39045
// exit ;
39043: GO 40603
// for i in tmp do
39045: LD_ADDR_VAR 0 6
39049: PUSH
39050: LD_VAR 0 8
39054: PUSH
39055: FOR_IN
39056: IFFALSE 40578
// begin points := [ 0 , 0 , 0 ] ;
39058: LD_ADDR_VAR 0 9
39062: PUSH
39063: LD_INT 0
39065: PUSH
39066: LD_INT 0
39068: PUSH
39069: LD_INT 0
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: LIST
39076: ST_TO_ADDR
// bpoints := 1 ;
39077: LD_ADDR_VAR 0 10
39081: PUSH
39082: LD_INT 1
39084: ST_TO_ADDR
// case GetType ( i ) of unit_human :
39085: LD_VAR 0 6
39089: PPUSH
39090: CALL_OW 247
39094: PUSH
39095: LD_INT 1
39097: DOUBLE
39098: EQUAL
39099: IFTRUE 39103
39101: GO 39681
39103: POP
// begin if GetClass ( i ) = 1 then
39104: LD_VAR 0 6
39108: PPUSH
39109: CALL_OW 257
39113: PUSH
39114: LD_INT 1
39116: EQUAL
39117: IFFALSE 39138
// points := [ 10 , 5 , 3 ] ;
39119: LD_ADDR_VAR 0 9
39123: PUSH
39124: LD_INT 10
39126: PUSH
39127: LD_INT 5
39129: PUSH
39130: LD_INT 3
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: LIST
39137: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
39138: LD_VAR 0 6
39142: PPUSH
39143: CALL_OW 257
39147: PUSH
39148: LD_INT 2
39150: PUSH
39151: LD_INT 3
39153: PUSH
39154: LD_INT 4
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: LIST
39161: IN
39162: IFFALSE 39183
// points := [ 3 , 2 , 1 ] ;
39164: LD_ADDR_VAR 0 9
39168: PUSH
39169: LD_INT 3
39171: PUSH
39172: LD_INT 2
39174: PUSH
39175: LD_INT 1
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: LIST
39182: ST_TO_ADDR
// if GetClass ( i ) = 5 then
39183: LD_VAR 0 6
39187: PPUSH
39188: CALL_OW 257
39192: PUSH
39193: LD_INT 5
39195: EQUAL
39196: IFFALSE 39217
// points := [ 130 , 5 , 2 ] ;
39198: LD_ADDR_VAR 0 9
39202: PUSH
39203: LD_INT 130
39205: PUSH
39206: LD_INT 5
39208: PUSH
39209: LD_INT 2
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: LIST
39216: ST_TO_ADDR
// if GetClass ( i ) = 8 then
39217: LD_VAR 0 6
39221: PPUSH
39222: CALL_OW 257
39226: PUSH
39227: LD_INT 8
39229: EQUAL
39230: IFFALSE 39251
// points := [ 35 , 35 , 30 ] ;
39232: LD_ADDR_VAR 0 9
39236: PUSH
39237: LD_INT 35
39239: PUSH
39240: LD_INT 35
39242: PUSH
39243: LD_INT 30
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: LIST
39250: ST_TO_ADDR
// if GetClass ( i ) = 9 then
39251: LD_VAR 0 6
39255: PPUSH
39256: CALL_OW 257
39260: PUSH
39261: LD_INT 9
39263: EQUAL
39264: IFFALSE 39285
// points := [ 20 , 55 , 40 ] ;
39266: LD_ADDR_VAR 0 9
39270: PUSH
39271: LD_INT 20
39273: PUSH
39274: LD_INT 55
39276: PUSH
39277: LD_INT 40
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: LIST
39284: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
39285: LD_VAR 0 6
39289: PPUSH
39290: CALL_OW 257
39294: PUSH
39295: LD_INT 12
39297: PUSH
39298: LD_INT 16
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: IN
39305: IFFALSE 39326
// points := [ 5 , 3 , 2 ] ;
39307: LD_ADDR_VAR 0 9
39311: PUSH
39312: LD_INT 5
39314: PUSH
39315: LD_INT 3
39317: PUSH
39318: LD_INT 2
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: LIST
39325: ST_TO_ADDR
// if GetClass ( i ) = 17 then
39326: LD_VAR 0 6
39330: PPUSH
39331: CALL_OW 257
39335: PUSH
39336: LD_INT 17
39338: EQUAL
39339: IFFALSE 39360
// points := [ 100 , 50 , 75 ] ;
39341: LD_ADDR_VAR 0 9
39345: PUSH
39346: LD_INT 100
39348: PUSH
39349: LD_INT 50
39351: PUSH
39352: LD_INT 75
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: LIST
39359: ST_TO_ADDR
// if GetClass ( i ) = 15 then
39360: LD_VAR 0 6
39364: PPUSH
39365: CALL_OW 257
39369: PUSH
39370: LD_INT 15
39372: EQUAL
39373: IFFALSE 39394
// points := [ 10 , 5 , 3 ] ;
39375: LD_ADDR_VAR 0 9
39379: PUSH
39380: LD_INT 10
39382: PUSH
39383: LD_INT 5
39385: PUSH
39386: LD_INT 3
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: LIST
39393: ST_TO_ADDR
// if GetClass ( i ) = 14 then
39394: LD_VAR 0 6
39398: PPUSH
39399: CALL_OW 257
39403: PUSH
39404: LD_INT 14
39406: EQUAL
39407: IFFALSE 39428
// points := [ 10 , 0 , 0 ] ;
39409: LD_ADDR_VAR 0 9
39413: PUSH
39414: LD_INT 10
39416: PUSH
39417: LD_INT 0
39419: PUSH
39420: LD_INT 0
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: LIST
39427: ST_TO_ADDR
// if GetClass ( i ) = 11 then
39428: LD_VAR 0 6
39432: PPUSH
39433: CALL_OW 257
39437: PUSH
39438: LD_INT 11
39440: EQUAL
39441: IFFALSE 39462
// points := [ 30 , 10 , 5 ] ;
39443: LD_ADDR_VAR 0 9
39447: PUSH
39448: LD_INT 30
39450: PUSH
39451: LD_INT 10
39453: PUSH
39454: LD_INT 5
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: LIST
39461: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
39462: LD_VAR 0 1
39466: PPUSH
39467: LD_INT 5
39469: PPUSH
39470: CALL_OW 321
39474: PUSH
39475: LD_INT 2
39477: EQUAL
39478: IFFALSE 39495
// bpoints := bpoints * 1.8 ;
39480: LD_ADDR_VAR 0 10
39484: PUSH
39485: LD_VAR 0 10
39489: PUSH
39490: LD_REAL  1.80000000000000E+0000
39493: MUL
39494: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
39495: LD_VAR 0 6
39499: PPUSH
39500: CALL_OW 257
39504: PUSH
39505: LD_INT 1
39507: PUSH
39508: LD_INT 2
39510: PUSH
39511: LD_INT 3
39513: PUSH
39514: LD_INT 4
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: IN
39523: PUSH
39524: LD_VAR 0 1
39528: PPUSH
39529: LD_INT 51
39531: PPUSH
39532: CALL_OW 321
39536: PUSH
39537: LD_INT 2
39539: EQUAL
39540: AND
39541: IFFALSE 39558
// bpoints := bpoints * 1.2 ;
39543: LD_ADDR_VAR 0 10
39547: PUSH
39548: LD_VAR 0 10
39552: PUSH
39553: LD_REAL  1.20000000000000E+0000
39556: MUL
39557: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
39558: LD_VAR 0 6
39562: PPUSH
39563: CALL_OW 257
39567: PUSH
39568: LD_INT 5
39570: PUSH
39571: LD_INT 7
39573: PUSH
39574: LD_INT 9
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: LIST
39581: IN
39582: PUSH
39583: LD_VAR 0 1
39587: PPUSH
39588: LD_INT 52
39590: PPUSH
39591: CALL_OW 321
39595: PUSH
39596: LD_INT 2
39598: EQUAL
39599: AND
39600: IFFALSE 39617
// bpoints := bpoints * 1.5 ;
39602: LD_ADDR_VAR 0 10
39606: PUSH
39607: LD_VAR 0 10
39611: PUSH
39612: LD_REAL  1.50000000000000E+0000
39615: MUL
39616: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
39617: LD_VAR 0 1
39621: PPUSH
39622: LD_INT 66
39624: PPUSH
39625: CALL_OW 321
39629: PUSH
39630: LD_INT 2
39632: EQUAL
39633: IFFALSE 39650
// bpoints := bpoints * 1.1 ;
39635: LD_ADDR_VAR 0 10
39639: PUSH
39640: LD_VAR 0 10
39644: PUSH
39645: LD_REAL  1.10000000000000E+0000
39648: MUL
39649: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
39650: LD_ADDR_VAR 0 10
39654: PUSH
39655: LD_VAR 0 10
39659: PUSH
39660: LD_VAR 0 6
39664: PPUSH
39665: LD_INT 1
39667: PPUSH
39668: CALL_OW 259
39672: PUSH
39673: LD_REAL  1.15000000000000E+0000
39676: MUL
39677: MUL
39678: ST_TO_ADDR
// end ; unit_vehicle :
39679: GO 40507
39681: LD_INT 2
39683: DOUBLE
39684: EQUAL
39685: IFTRUE 39689
39687: GO 40495
39689: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
39690: LD_VAR 0 6
39694: PPUSH
39695: CALL_OW 264
39699: PUSH
39700: LD_INT 2
39702: PUSH
39703: LD_INT 42
39705: PUSH
39706: LD_INT 24
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: LIST
39713: IN
39714: IFFALSE 39735
// points := [ 25 , 5 , 3 ] ;
39716: LD_ADDR_VAR 0 9
39720: PUSH
39721: LD_INT 25
39723: PUSH
39724: LD_INT 5
39726: PUSH
39727: LD_INT 3
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: LIST
39734: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
39735: LD_VAR 0 6
39739: PPUSH
39740: CALL_OW 264
39744: PUSH
39745: LD_INT 4
39747: PUSH
39748: LD_INT 43
39750: PUSH
39751: LD_INT 25
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: LIST
39758: IN
39759: IFFALSE 39780
// points := [ 40 , 15 , 5 ] ;
39761: LD_ADDR_VAR 0 9
39765: PUSH
39766: LD_INT 40
39768: PUSH
39769: LD_INT 15
39771: PUSH
39772: LD_INT 5
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: LIST
39779: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39780: LD_VAR 0 6
39784: PPUSH
39785: CALL_OW 264
39789: PUSH
39790: LD_INT 3
39792: PUSH
39793: LD_INT 23
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: IN
39800: IFFALSE 39821
// points := [ 7 , 25 , 8 ] ;
39802: LD_ADDR_VAR 0 9
39806: PUSH
39807: LD_INT 7
39809: PUSH
39810: LD_INT 25
39812: PUSH
39813: LD_INT 8
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: LIST
39820: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39821: LD_VAR 0 6
39825: PPUSH
39826: CALL_OW 264
39830: PUSH
39831: LD_INT 5
39833: PUSH
39834: LD_INT 27
39836: PUSH
39837: LD_INT 44
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: LIST
39844: IN
39845: IFFALSE 39866
// points := [ 14 , 50 , 16 ] ;
39847: LD_ADDR_VAR 0 9
39851: PUSH
39852: LD_INT 14
39854: PUSH
39855: LD_INT 50
39857: PUSH
39858: LD_INT 16
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: LIST
39865: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39866: LD_VAR 0 6
39870: PPUSH
39871: CALL_OW 264
39875: PUSH
39876: LD_INT 6
39878: PUSH
39879: LD_INT 46
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: IN
39886: IFFALSE 39907
// points := [ 32 , 120 , 70 ] ;
39888: LD_ADDR_VAR 0 9
39892: PUSH
39893: LD_INT 32
39895: PUSH
39896: LD_INT 120
39898: PUSH
39899: LD_INT 70
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: LIST
39906: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
39907: LD_VAR 0 6
39911: PPUSH
39912: CALL_OW 264
39916: PUSH
39917: LD_INT 7
39919: PUSH
39920: LD_INT 28
39922: PUSH
39923: LD_INT 45
39925: PUSH
39926: LD_INT 92
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: LIST
39933: LIST
39934: IN
39935: IFFALSE 39956
// points := [ 35 , 20 , 45 ] ;
39937: LD_ADDR_VAR 0 9
39941: PUSH
39942: LD_INT 35
39944: PUSH
39945: LD_INT 20
39947: PUSH
39948: LD_INT 45
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: LIST
39955: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39956: LD_VAR 0 6
39960: PPUSH
39961: CALL_OW 264
39965: PUSH
39966: LD_INT 47
39968: PUSH
39969: EMPTY
39970: LIST
39971: IN
39972: IFFALSE 39993
// points := [ 67 , 45 , 75 ] ;
39974: LD_ADDR_VAR 0 9
39978: PUSH
39979: LD_INT 67
39981: PUSH
39982: LD_INT 45
39984: PUSH
39985: LD_INT 75
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: LIST
39992: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39993: LD_VAR 0 6
39997: PPUSH
39998: CALL_OW 264
40002: PUSH
40003: LD_INT 26
40005: PUSH
40006: EMPTY
40007: LIST
40008: IN
40009: IFFALSE 40030
// points := [ 120 , 30 , 80 ] ;
40011: LD_ADDR_VAR 0 9
40015: PUSH
40016: LD_INT 120
40018: PUSH
40019: LD_INT 30
40021: PUSH
40022: LD_INT 80
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: LIST
40029: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
40030: LD_VAR 0 6
40034: PPUSH
40035: CALL_OW 264
40039: PUSH
40040: LD_INT 22
40042: PUSH
40043: EMPTY
40044: LIST
40045: IN
40046: IFFALSE 40067
// points := [ 40 , 1 , 1 ] ;
40048: LD_ADDR_VAR 0 9
40052: PUSH
40053: LD_INT 40
40055: PUSH
40056: LD_INT 1
40058: PUSH
40059: LD_INT 1
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: LIST
40066: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
40067: LD_VAR 0 6
40071: PPUSH
40072: CALL_OW 264
40076: PUSH
40077: LD_INT 29
40079: PUSH
40080: EMPTY
40081: LIST
40082: IN
40083: IFFALSE 40104
// points := [ 70 , 200 , 400 ] ;
40085: LD_ADDR_VAR 0 9
40089: PUSH
40090: LD_INT 70
40092: PUSH
40093: LD_INT 200
40095: PUSH
40096: LD_INT 400
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: LIST
40103: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
40104: LD_VAR 0 6
40108: PPUSH
40109: CALL_OW 264
40113: PUSH
40114: LD_INT 14
40116: PUSH
40117: LD_INT 53
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: IN
40124: IFFALSE 40145
// points := [ 40 , 10 , 20 ] ;
40126: LD_ADDR_VAR 0 9
40130: PUSH
40131: LD_INT 40
40133: PUSH
40134: LD_INT 10
40136: PUSH
40137: LD_INT 20
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: LIST
40144: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
40145: LD_VAR 0 6
40149: PPUSH
40150: CALL_OW 264
40154: PUSH
40155: LD_INT 9
40157: PUSH
40158: EMPTY
40159: LIST
40160: IN
40161: IFFALSE 40182
// points := [ 5 , 70 , 20 ] ;
40163: LD_ADDR_VAR 0 9
40167: PUSH
40168: LD_INT 5
40170: PUSH
40171: LD_INT 70
40173: PUSH
40174: LD_INT 20
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: LIST
40181: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
40182: LD_VAR 0 6
40186: PPUSH
40187: CALL_OW 264
40191: PUSH
40192: LD_INT 10
40194: PUSH
40195: EMPTY
40196: LIST
40197: IN
40198: IFFALSE 40219
// points := [ 35 , 110 , 70 ] ;
40200: LD_ADDR_VAR 0 9
40204: PUSH
40205: LD_INT 35
40207: PUSH
40208: LD_INT 110
40210: PUSH
40211: LD_INT 70
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: LIST
40218: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
40219: LD_VAR 0 6
40223: PPUSH
40224: CALL_OW 265
40228: PUSH
40229: LD_INT 25
40231: EQUAL
40232: IFFALSE 40253
// points := [ 80 , 65 , 100 ] ;
40234: LD_ADDR_VAR 0 9
40238: PUSH
40239: LD_INT 80
40241: PUSH
40242: LD_INT 65
40244: PUSH
40245: LD_INT 100
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: LIST
40252: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
40253: LD_VAR 0 6
40257: PPUSH
40258: CALL_OW 263
40262: PUSH
40263: LD_INT 1
40265: EQUAL
40266: IFFALSE 40301
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
40268: LD_ADDR_VAR 0 10
40272: PUSH
40273: LD_VAR 0 10
40277: PUSH
40278: LD_VAR 0 6
40282: PPUSH
40283: CALL_OW 311
40287: PPUSH
40288: LD_INT 3
40290: PPUSH
40291: CALL_OW 259
40295: PUSH
40296: LD_INT 4
40298: MUL
40299: MUL
40300: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
40301: LD_VAR 0 6
40305: PPUSH
40306: CALL_OW 263
40310: PUSH
40311: LD_INT 2
40313: EQUAL
40314: IFFALSE 40365
// begin j := IsControledBy ( i ) ;
40316: LD_ADDR_VAR 0 7
40320: PUSH
40321: LD_VAR 0 6
40325: PPUSH
40326: CALL_OW 312
40330: ST_TO_ADDR
// if j then
40331: LD_VAR 0 7
40335: IFFALSE 40365
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
40337: LD_ADDR_VAR 0 10
40341: PUSH
40342: LD_VAR 0 10
40346: PUSH
40347: LD_VAR 0 7
40351: PPUSH
40352: LD_INT 3
40354: PPUSH
40355: CALL_OW 259
40359: PUSH
40360: LD_INT 3
40362: MUL
40363: MUL
40364: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
40365: LD_VAR 0 6
40369: PPUSH
40370: CALL_OW 264
40374: PUSH
40375: LD_INT 5
40377: PUSH
40378: LD_INT 6
40380: PUSH
40381: LD_INT 46
40383: PUSH
40384: LD_INT 44
40386: PUSH
40387: LD_INT 47
40389: PUSH
40390: LD_INT 45
40392: PUSH
40393: LD_INT 28
40395: PUSH
40396: LD_INT 7
40398: PUSH
40399: LD_INT 27
40401: PUSH
40402: LD_INT 29
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: IN
40417: PUSH
40418: LD_VAR 0 1
40422: PPUSH
40423: LD_INT 52
40425: PPUSH
40426: CALL_OW 321
40430: PUSH
40431: LD_INT 2
40433: EQUAL
40434: AND
40435: IFFALSE 40452
// bpoints := bpoints * 1.2 ;
40437: LD_ADDR_VAR 0 10
40441: PUSH
40442: LD_VAR 0 10
40446: PUSH
40447: LD_REAL  1.20000000000000E+0000
40450: MUL
40451: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
40452: LD_VAR 0 6
40456: PPUSH
40457: CALL_OW 264
40461: PUSH
40462: LD_INT 6
40464: PUSH
40465: LD_INT 46
40467: PUSH
40468: LD_INT 47
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: LIST
40475: IN
40476: IFFALSE 40493
// bpoints := bpoints * 1.2 ;
40478: LD_ADDR_VAR 0 10
40482: PUSH
40483: LD_VAR 0 10
40487: PUSH
40488: LD_REAL  1.20000000000000E+0000
40491: MUL
40492: ST_TO_ADDR
// end ; unit_building :
40493: GO 40507
40495: LD_INT 3
40497: DOUBLE
40498: EQUAL
40499: IFTRUE 40503
40501: GO 40506
40503: POP
// ; end ;
40504: GO 40507
40506: POP
// for j = 1 to 3 do
40507: LD_ADDR_VAR 0 7
40511: PUSH
40512: DOUBLE
40513: LD_INT 1
40515: DEC
40516: ST_TO_ADDR
40517: LD_INT 3
40519: PUSH
40520: FOR_TO
40521: IFFALSE 40574
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
40523: LD_ADDR_VAR 0 5
40527: PUSH
40528: LD_VAR 0 5
40532: PPUSH
40533: LD_VAR 0 7
40537: PPUSH
40538: LD_VAR 0 5
40542: PUSH
40543: LD_VAR 0 7
40547: ARRAY
40548: PUSH
40549: LD_VAR 0 9
40553: PUSH
40554: LD_VAR 0 7
40558: ARRAY
40559: PUSH
40560: LD_VAR 0 10
40564: MUL
40565: PLUS
40566: PPUSH
40567: CALL_OW 1
40571: ST_TO_ADDR
40572: GO 40520
40574: POP
40575: POP
// end ;
40576: GO 39055
40578: POP
40579: POP
// result := Replace ( result , 4 , tmp ) ;
40580: LD_ADDR_VAR 0 5
40584: PUSH
40585: LD_VAR 0 5
40589: PPUSH
40590: LD_INT 4
40592: PPUSH
40593: LD_VAR 0 8
40597: PPUSH
40598: CALL_OW 1
40602: ST_TO_ADDR
// end ;
40603: LD_VAR 0 5
40607: RET
// export function DangerAtRange ( unit , range ) ; begin
40608: LD_INT 0
40610: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
40611: LD_ADDR_VAR 0 3
40615: PUSH
40616: LD_VAR 0 1
40620: PPUSH
40621: CALL_OW 255
40625: PPUSH
40626: LD_VAR 0 1
40630: PPUSH
40631: CALL_OW 250
40635: PPUSH
40636: LD_VAR 0 1
40640: PPUSH
40641: CALL_OW 251
40645: PPUSH
40646: LD_VAR 0 2
40650: PPUSH
40651: CALL 38907 0 4
40655: ST_TO_ADDR
// end ;
40656: LD_VAR 0 3
40660: RET
// export function DangerInArea ( side , area ) ; begin
40661: LD_INT 0
40663: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
40664: LD_ADDR_VAR 0 3
40668: PUSH
40669: LD_VAR 0 2
40673: PPUSH
40674: LD_INT 81
40676: PUSH
40677: LD_VAR 0 1
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: PPUSH
40686: CALL_OW 70
40690: ST_TO_ADDR
// end ;
40691: LD_VAR 0 3
40695: RET
// export function IsExtension ( b ) ; begin
40696: LD_INT 0
40698: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
40699: LD_ADDR_VAR 0 2
40703: PUSH
40704: LD_VAR 0 1
40708: PUSH
40709: LD_INT 23
40711: PUSH
40712: LD_INT 20
40714: PUSH
40715: LD_INT 22
40717: PUSH
40718: LD_INT 17
40720: PUSH
40721: LD_INT 24
40723: PUSH
40724: LD_INT 21
40726: PUSH
40727: LD_INT 19
40729: PUSH
40730: LD_INT 16
40732: PUSH
40733: LD_INT 25
40735: PUSH
40736: LD_INT 18
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: IN
40751: ST_TO_ADDR
// end ;
40752: LD_VAR 0 2
40756: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
40757: LD_INT 0
40759: PPUSH
40760: PPUSH
40761: PPUSH
// result := [ ] ;
40762: LD_ADDR_VAR 0 4
40766: PUSH
40767: EMPTY
40768: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40769: LD_ADDR_VAR 0 5
40773: PUSH
40774: LD_VAR 0 2
40778: PPUSH
40779: LD_INT 21
40781: PUSH
40782: LD_INT 3
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PPUSH
40789: CALL_OW 70
40793: ST_TO_ADDR
// if not tmp then
40794: LD_VAR 0 5
40798: NOT
40799: IFFALSE 40803
// exit ;
40801: GO 40867
// if checkLink then
40803: LD_VAR 0 3
40807: IFFALSE 40857
// begin for i in tmp do
40809: LD_ADDR_VAR 0 6
40813: PUSH
40814: LD_VAR 0 5
40818: PUSH
40819: FOR_IN
40820: IFFALSE 40855
// if GetBase ( i ) <> base then
40822: LD_VAR 0 6
40826: PPUSH
40827: CALL_OW 274
40831: PUSH
40832: LD_VAR 0 1
40836: NONEQUAL
40837: IFFALSE 40853
// ComLinkToBase ( base , i ) ;
40839: LD_VAR 0 1
40843: PPUSH
40844: LD_VAR 0 6
40848: PPUSH
40849: CALL_OW 169
40853: GO 40819
40855: POP
40856: POP
// end ; result := tmp ;
40857: LD_ADDR_VAR 0 4
40861: PUSH
40862: LD_VAR 0 5
40866: ST_TO_ADDR
// end ;
40867: LD_VAR 0 4
40871: RET
// export function ComComplete ( units , b ) ; var i ; begin
40872: LD_INT 0
40874: PPUSH
40875: PPUSH
// if not units then
40876: LD_VAR 0 1
40880: NOT
40881: IFFALSE 40885
// exit ;
40883: GO 40975
// for i in units do
40885: LD_ADDR_VAR 0 4
40889: PUSH
40890: LD_VAR 0 1
40894: PUSH
40895: FOR_IN
40896: IFFALSE 40973
// if BuildingStatus ( b ) = bs_build then
40898: LD_VAR 0 2
40902: PPUSH
40903: CALL_OW 461
40907: PUSH
40908: LD_INT 1
40910: EQUAL
40911: IFFALSE 40971
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40913: LD_VAR 0 4
40917: PPUSH
40918: LD_STRING h
40920: PUSH
40921: LD_VAR 0 2
40925: PPUSH
40926: CALL_OW 250
40930: PUSH
40931: LD_VAR 0 2
40935: PPUSH
40936: CALL_OW 251
40940: PUSH
40941: LD_VAR 0 2
40945: PUSH
40946: LD_INT 0
40948: PUSH
40949: LD_INT 0
40951: PUSH
40952: LD_INT 0
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: PUSH
40964: EMPTY
40965: LIST
40966: PPUSH
40967: CALL_OW 446
40971: GO 40895
40973: POP
40974: POP
// end ;
40975: LD_VAR 0 3
40979: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40980: LD_INT 0
40982: PPUSH
40983: PPUSH
40984: PPUSH
40985: PPUSH
40986: PPUSH
40987: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
40988: LD_VAR 0 1
40992: NOT
40993: PUSH
40994: LD_VAR 0 1
40998: PPUSH
40999: CALL_OW 263
41003: PUSH
41004: LD_INT 2
41006: NONEQUAL
41007: OR
41008: IFFALSE 41012
// exit ;
41010: GO 41328
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
41012: LD_ADDR_VAR 0 6
41016: PUSH
41017: LD_INT 22
41019: PUSH
41020: LD_VAR 0 1
41024: PPUSH
41025: CALL_OW 255
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 2
41036: PUSH
41037: LD_INT 30
41039: PUSH
41040: LD_INT 36
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: LD_INT 34
41049: PUSH
41050: LD_INT 31
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: LIST
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PPUSH
41066: CALL_OW 69
41070: ST_TO_ADDR
// if not tmp then
41071: LD_VAR 0 6
41075: NOT
41076: IFFALSE 41080
// exit ;
41078: GO 41328
// result := [ ] ;
41080: LD_ADDR_VAR 0 2
41084: PUSH
41085: EMPTY
41086: ST_TO_ADDR
// for i in tmp do
41087: LD_ADDR_VAR 0 3
41091: PUSH
41092: LD_VAR 0 6
41096: PUSH
41097: FOR_IN
41098: IFFALSE 41169
// begin t := UnitsInside ( i ) ;
41100: LD_ADDR_VAR 0 4
41104: PUSH
41105: LD_VAR 0 3
41109: PPUSH
41110: CALL_OW 313
41114: ST_TO_ADDR
// if t then
41115: LD_VAR 0 4
41119: IFFALSE 41167
// for j in t do
41121: LD_ADDR_VAR 0 7
41125: PUSH
41126: LD_VAR 0 4
41130: PUSH
41131: FOR_IN
41132: IFFALSE 41165
// result := Replace ( result , result + 1 , j ) ;
41134: LD_ADDR_VAR 0 2
41138: PUSH
41139: LD_VAR 0 2
41143: PPUSH
41144: LD_VAR 0 2
41148: PUSH
41149: LD_INT 1
41151: PLUS
41152: PPUSH
41153: LD_VAR 0 7
41157: PPUSH
41158: CALL_OW 1
41162: ST_TO_ADDR
41163: GO 41131
41165: POP
41166: POP
// end ;
41167: GO 41097
41169: POP
41170: POP
// if not result then
41171: LD_VAR 0 2
41175: NOT
41176: IFFALSE 41180
// exit ;
41178: GO 41328
// mech := result [ 1 ] ;
41180: LD_ADDR_VAR 0 5
41184: PUSH
41185: LD_VAR 0 2
41189: PUSH
41190: LD_INT 1
41192: ARRAY
41193: ST_TO_ADDR
// if result > 1 then
41194: LD_VAR 0 2
41198: PUSH
41199: LD_INT 1
41201: GREATER
41202: IFFALSE 41314
// begin for i = 2 to result do
41204: LD_ADDR_VAR 0 3
41208: PUSH
41209: DOUBLE
41210: LD_INT 2
41212: DEC
41213: ST_TO_ADDR
41214: LD_VAR 0 2
41218: PUSH
41219: FOR_TO
41220: IFFALSE 41312
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
41222: LD_ADDR_VAR 0 4
41226: PUSH
41227: LD_VAR 0 2
41231: PUSH
41232: LD_VAR 0 3
41236: ARRAY
41237: PPUSH
41238: LD_INT 3
41240: PPUSH
41241: CALL_OW 259
41245: PUSH
41246: LD_VAR 0 2
41250: PUSH
41251: LD_VAR 0 3
41255: ARRAY
41256: PPUSH
41257: CALL_OW 432
41261: MINUS
41262: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
41263: LD_VAR 0 4
41267: PUSH
41268: LD_VAR 0 5
41272: PPUSH
41273: LD_INT 3
41275: PPUSH
41276: CALL_OW 259
41280: PUSH
41281: LD_VAR 0 5
41285: PPUSH
41286: CALL_OW 432
41290: MINUS
41291: GREATEREQUAL
41292: IFFALSE 41310
// mech := result [ i ] ;
41294: LD_ADDR_VAR 0 5
41298: PUSH
41299: LD_VAR 0 2
41303: PUSH
41304: LD_VAR 0 3
41308: ARRAY
41309: ST_TO_ADDR
// end ;
41310: GO 41219
41312: POP
41313: POP
// end ; ComLinkTo ( vehicle , mech ) ;
41314: LD_VAR 0 1
41318: PPUSH
41319: LD_VAR 0 5
41323: PPUSH
41324: CALL_OW 135
// end ;
41328: LD_VAR 0 2
41332: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
41333: LD_INT 0
41335: PPUSH
41336: PPUSH
41337: PPUSH
41338: PPUSH
41339: PPUSH
41340: PPUSH
41341: PPUSH
41342: PPUSH
41343: PPUSH
41344: PPUSH
41345: PPUSH
41346: PPUSH
41347: PPUSH
// result := [ ] ;
41348: LD_ADDR_VAR 0 7
41352: PUSH
41353: EMPTY
41354: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
41355: LD_VAR 0 1
41359: PPUSH
41360: CALL_OW 266
41364: PUSH
41365: LD_INT 0
41367: PUSH
41368: LD_INT 1
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: IN
41375: NOT
41376: IFFALSE 41380
// exit ;
41378: GO 43014
// if name then
41380: LD_VAR 0 3
41384: IFFALSE 41400
// SetBName ( base_dep , name ) ;
41386: LD_VAR 0 1
41390: PPUSH
41391: LD_VAR 0 3
41395: PPUSH
41396: CALL_OW 500
// base := GetBase ( base_dep ) ;
41400: LD_ADDR_VAR 0 15
41404: PUSH
41405: LD_VAR 0 1
41409: PPUSH
41410: CALL_OW 274
41414: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
41415: LD_ADDR_VAR 0 16
41419: PUSH
41420: LD_VAR 0 1
41424: PPUSH
41425: CALL_OW 255
41429: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
41430: LD_ADDR_VAR 0 17
41434: PUSH
41435: LD_VAR 0 1
41439: PPUSH
41440: CALL_OW 248
41444: ST_TO_ADDR
// if sources then
41445: LD_VAR 0 5
41449: IFFALSE 41496
// for i = 1 to 3 do
41451: LD_ADDR_VAR 0 8
41455: PUSH
41456: DOUBLE
41457: LD_INT 1
41459: DEC
41460: ST_TO_ADDR
41461: LD_INT 3
41463: PUSH
41464: FOR_TO
41465: IFFALSE 41494
// AddResourceType ( base , i , sources [ i ] ) ;
41467: LD_VAR 0 15
41471: PPUSH
41472: LD_VAR 0 8
41476: PPUSH
41477: LD_VAR 0 5
41481: PUSH
41482: LD_VAR 0 8
41486: ARRAY
41487: PPUSH
41488: CALL_OW 276
41492: GO 41464
41494: POP
41495: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
41496: LD_ADDR_VAR 0 18
41500: PUSH
41501: LD_VAR 0 15
41505: PPUSH
41506: LD_VAR 0 2
41510: PPUSH
41511: LD_INT 1
41513: PPUSH
41514: CALL 40757 0 3
41518: ST_TO_ADDR
// InitHc ;
41519: CALL_OW 19
// InitUc ;
41523: CALL_OW 18
// uc_side := side ;
41527: LD_ADDR_OWVAR 20
41531: PUSH
41532: LD_VAR 0 16
41536: ST_TO_ADDR
// uc_nation := nation ;
41537: LD_ADDR_OWVAR 21
41541: PUSH
41542: LD_VAR 0 17
41546: ST_TO_ADDR
// if buildings then
41547: LD_VAR 0 18
41551: IFFALSE 42873
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
41553: LD_ADDR_VAR 0 19
41557: PUSH
41558: LD_VAR 0 18
41562: PPUSH
41563: LD_INT 2
41565: PUSH
41566: LD_INT 30
41568: PUSH
41569: LD_INT 29
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 30
41578: PUSH
41579: LD_INT 30
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: LIST
41590: PPUSH
41591: CALL_OW 72
41595: ST_TO_ADDR
// if tmp then
41596: LD_VAR 0 19
41600: IFFALSE 41648
// for i in tmp do
41602: LD_ADDR_VAR 0 8
41606: PUSH
41607: LD_VAR 0 19
41611: PUSH
41612: FOR_IN
41613: IFFALSE 41646
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
41615: LD_VAR 0 8
41619: PPUSH
41620: CALL_OW 250
41624: PPUSH
41625: LD_VAR 0 8
41629: PPUSH
41630: CALL_OW 251
41634: PPUSH
41635: LD_VAR 0 16
41639: PPUSH
41640: CALL_OW 441
41644: GO 41612
41646: POP
41647: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
41648: LD_VAR 0 18
41652: PPUSH
41653: LD_INT 2
41655: PUSH
41656: LD_INT 30
41658: PUSH
41659: LD_INT 32
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 30
41668: PUSH
41669: LD_INT 33
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: LIST
41680: PPUSH
41681: CALL_OW 72
41685: IFFALSE 41773
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
41687: LD_ADDR_VAR 0 8
41691: PUSH
41692: LD_VAR 0 18
41696: PPUSH
41697: LD_INT 2
41699: PUSH
41700: LD_INT 30
41702: PUSH
41703: LD_INT 32
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 30
41712: PUSH
41713: LD_INT 33
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: LIST
41724: PPUSH
41725: CALL_OW 72
41729: PUSH
41730: FOR_IN
41731: IFFALSE 41771
// begin if not GetBWeapon ( i ) then
41733: LD_VAR 0 8
41737: PPUSH
41738: CALL_OW 269
41742: NOT
41743: IFFALSE 41769
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
41745: LD_VAR 0 8
41749: PPUSH
41750: LD_VAR 0 8
41754: PPUSH
41755: LD_VAR 0 2
41759: PPUSH
41760: CALL 43019 0 2
41764: PPUSH
41765: CALL_OW 431
// end ;
41769: GO 41730
41771: POP
41772: POP
// end ; for i = 1 to personel do
41773: LD_ADDR_VAR 0 8
41777: PUSH
41778: DOUBLE
41779: LD_INT 1
41781: DEC
41782: ST_TO_ADDR
41783: LD_VAR 0 6
41787: PUSH
41788: FOR_TO
41789: IFFALSE 42853
// begin if i > 4 then
41791: LD_VAR 0 8
41795: PUSH
41796: LD_INT 4
41798: GREATER
41799: IFFALSE 41803
// break ;
41801: GO 42853
// case i of 1 :
41803: LD_VAR 0 8
41807: PUSH
41808: LD_INT 1
41810: DOUBLE
41811: EQUAL
41812: IFTRUE 41816
41814: GO 41896
41816: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41817: LD_ADDR_VAR 0 12
41821: PUSH
41822: LD_VAR 0 18
41826: PPUSH
41827: LD_INT 22
41829: PUSH
41830: LD_VAR 0 16
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 58
41841: PUSH
41842: EMPTY
41843: LIST
41844: PUSH
41845: LD_INT 2
41847: PUSH
41848: LD_INT 30
41850: PUSH
41851: LD_INT 32
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 30
41860: PUSH
41861: LD_INT 4
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 30
41870: PUSH
41871: LD_INT 5
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: LIST
41888: PPUSH
41889: CALL_OW 72
41893: ST_TO_ADDR
41894: GO 42118
41896: LD_INT 2
41898: DOUBLE
41899: EQUAL
41900: IFTRUE 41904
41902: GO 41966
41904: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41905: LD_ADDR_VAR 0 12
41909: PUSH
41910: LD_VAR 0 18
41914: PPUSH
41915: LD_INT 22
41917: PUSH
41918: LD_VAR 0 16
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PUSH
41927: LD_INT 2
41929: PUSH
41930: LD_INT 30
41932: PUSH
41933: LD_INT 0
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PUSH
41940: LD_INT 30
41942: PUSH
41943: LD_INT 1
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: LIST
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PPUSH
41959: CALL_OW 72
41963: ST_TO_ADDR
41964: GO 42118
41966: LD_INT 3
41968: DOUBLE
41969: EQUAL
41970: IFTRUE 41974
41972: GO 42036
41974: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41975: LD_ADDR_VAR 0 12
41979: PUSH
41980: LD_VAR 0 18
41984: PPUSH
41985: LD_INT 22
41987: PUSH
41988: LD_VAR 0 16
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 2
41999: PUSH
42000: LD_INT 30
42002: PUSH
42003: LD_INT 2
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 30
42012: PUSH
42013: LD_INT 3
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: LIST
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PPUSH
42029: CALL_OW 72
42033: ST_TO_ADDR
42034: GO 42118
42036: LD_INT 4
42038: DOUBLE
42039: EQUAL
42040: IFTRUE 42044
42042: GO 42117
42044: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
42045: LD_ADDR_VAR 0 12
42049: PUSH
42050: LD_VAR 0 18
42054: PPUSH
42055: LD_INT 22
42057: PUSH
42058: LD_VAR 0 16
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: LD_INT 2
42069: PUSH
42070: LD_INT 30
42072: PUSH
42073: LD_INT 6
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 30
42082: PUSH
42083: LD_INT 7
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: PUSH
42090: LD_INT 30
42092: PUSH
42093: LD_INT 8
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PPUSH
42110: CALL_OW 72
42114: ST_TO_ADDR
42115: GO 42118
42117: POP
// if i = 1 then
42118: LD_VAR 0 8
42122: PUSH
42123: LD_INT 1
42125: EQUAL
42126: IFFALSE 42237
// begin tmp := [ ] ;
42128: LD_ADDR_VAR 0 19
42132: PUSH
42133: EMPTY
42134: ST_TO_ADDR
// for j in f do
42135: LD_ADDR_VAR 0 9
42139: PUSH
42140: LD_VAR 0 12
42144: PUSH
42145: FOR_IN
42146: IFFALSE 42219
// if GetBType ( j ) = b_bunker then
42148: LD_VAR 0 9
42152: PPUSH
42153: CALL_OW 266
42157: PUSH
42158: LD_INT 32
42160: EQUAL
42161: IFFALSE 42188
// tmp := Insert ( tmp , 1 , j ) else
42163: LD_ADDR_VAR 0 19
42167: PUSH
42168: LD_VAR 0 19
42172: PPUSH
42173: LD_INT 1
42175: PPUSH
42176: LD_VAR 0 9
42180: PPUSH
42181: CALL_OW 2
42185: ST_TO_ADDR
42186: GO 42217
// tmp := Insert ( tmp , tmp + 1 , j ) ;
42188: LD_ADDR_VAR 0 19
42192: PUSH
42193: LD_VAR 0 19
42197: PPUSH
42198: LD_VAR 0 19
42202: PUSH
42203: LD_INT 1
42205: PLUS
42206: PPUSH
42207: LD_VAR 0 9
42211: PPUSH
42212: CALL_OW 2
42216: ST_TO_ADDR
42217: GO 42145
42219: POP
42220: POP
// if tmp then
42221: LD_VAR 0 19
42225: IFFALSE 42237
// f := tmp ;
42227: LD_ADDR_VAR 0 12
42231: PUSH
42232: LD_VAR 0 19
42236: ST_TO_ADDR
// end ; x := personel [ i ] ;
42237: LD_ADDR_VAR 0 13
42241: PUSH
42242: LD_VAR 0 6
42246: PUSH
42247: LD_VAR 0 8
42251: ARRAY
42252: ST_TO_ADDR
// if x = - 1 then
42253: LD_VAR 0 13
42257: PUSH
42258: LD_INT 1
42260: NEG
42261: EQUAL
42262: IFFALSE 42471
// begin for j in f do
42264: LD_ADDR_VAR 0 9
42268: PUSH
42269: LD_VAR 0 12
42273: PUSH
42274: FOR_IN
42275: IFFALSE 42467
// repeat InitHc ;
42277: CALL_OW 19
// if GetBType ( j ) = b_barracks then
42281: LD_VAR 0 9
42285: PPUSH
42286: CALL_OW 266
42290: PUSH
42291: LD_INT 5
42293: EQUAL
42294: IFFALSE 42364
// begin if UnitsInside ( j ) < 3 then
42296: LD_VAR 0 9
42300: PPUSH
42301: CALL_OW 313
42305: PUSH
42306: LD_INT 3
42308: LESS
42309: IFFALSE 42345
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42311: LD_INT 0
42313: PPUSH
42314: LD_INT 5
42316: PUSH
42317: LD_INT 8
42319: PUSH
42320: LD_INT 9
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: LIST
42327: PUSH
42328: LD_VAR 0 17
42332: ARRAY
42333: PPUSH
42334: LD_VAR 0 4
42338: PPUSH
42339: CALL_OW 380
42343: GO 42362
// PrepareHuman ( false , i , skill ) ;
42345: LD_INT 0
42347: PPUSH
42348: LD_VAR 0 8
42352: PPUSH
42353: LD_VAR 0 4
42357: PPUSH
42358: CALL_OW 380
// end else
42362: GO 42381
// PrepareHuman ( false , i , skill ) ;
42364: LD_INT 0
42366: PPUSH
42367: LD_VAR 0 8
42371: PPUSH
42372: LD_VAR 0 4
42376: PPUSH
42377: CALL_OW 380
// un := CreateHuman ;
42381: LD_ADDR_VAR 0 14
42385: PUSH
42386: CALL_OW 44
42390: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42391: LD_ADDR_VAR 0 7
42395: PUSH
42396: LD_VAR 0 7
42400: PPUSH
42401: LD_INT 1
42403: PPUSH
42404: LD_VAR 0 14
42408: PPUSH
42409: CALL_OW 2
42413: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
42414: LD_VAR 0 14
42418: PPUSH
42419: LD_VAR 0 9
42423: PPUSH
42424: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
42428: LD_VAR 0 9
42432: PPUSH
42433: CALL_OW 313
42437: PUSH
42438: LD_INT 6
42440: EQUAL
42441: PUSH
42442: LD_VAR 0 9
42446: PPUSH
42447: CALL_OW 266
42451: PUSH
42452: LD_INT 32
42454: PUSH
42455: LD_INT 31
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: IN
42462: OR
42463: IFFALSE 42277
42465: GO 42274
42467: POP
42468: POP
// end else
42469: GO 42851
// for j = 1 to x do
42471: LD_ADDR_VAR 0 9
42475: PUSH
42476: DOUBLE
42477: LD_INT 1
42479: DEC
42480: ST_TO_ADDR
42481: LD_VAR 0 13
42485: PUSH
42486: FOR_TO
42487: IFFALSE 42849
// begin InitHc ;
42489: CALL_OW 19
// if not f then
42493: LD_VAR 0 12
42497: NOT
42498: IFFALSE 42587
// begin PrepareHuman ( false , i , skill ) ;
42500: LD_INT 0
42502: PPUSH
42503: LD_VAR 0 8
42507: PPUSH
42508: LD_VAR 0 4
42512: PPUSH
42513: CALL_OW 380
// un := CreateHuman ;
42517: LD_ADDR_VAR 0 14
42521: PUSH
42522: CALL_OW 44
42526: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42527: LD_ADDR_VAR 0 7
42531: PUSH
42532: LD_VAR 0 7
42536: PPUSH
42537: LD_INT 1
42539: PPUSH
42540: LD_VAR 0 14
42544: PPUSH
42545: CALL_OW 2
42549: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42550: LD_VAR 0 14
42554: PPUSH
42555: LD_VAR 0 1
42559: PPUSH
42560: CALL_OW 250
42564: PPUSH
42565: LD_VAR 0 1
42569: PPUSH
42570: CALL_OW 251
42574: PPUSH
42575: LD_INT 10
42577: PPUSH
42578: LD_INT 0
42580: PPUSH
42581: CALL_OW 50
// continue ;
42585: GO 42486
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
42587: LD_VAR 0 12
42591: PUSH
42592: LD_INT 1
42594: ARRAY
42595: PPUSH
42596: CALL_OW 313
42600: PUSH
42601: LD_VAR 0 12
42605: PUSH
42606: LD_INT 1
42608: ARRAY
42609: PPUSH
42610: CALL_OW 266
42614: PUSH
42615: LD_INT 32
42617: PUSH
42618: LD_INT 31
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: IN
42625: AND
42626: PUSH
42627: LD_VAR 0 12
42631: PUSH
42632: LD_INT 1
42634: ARRAY
42635: PPUSH
42636: CALL_OW 313
42640: PUSH
42641: LD_INT 6
42643: EQUAL
42644: OR
42645: IFFALSE 42665
// f := Delete ( f , 1 ) ;
42647: LD_ADDR_VAR 0 12
42651: PUSH
42652: LD_VAR 0 12
42656: PPUSH
42657: LD_INT 1
42659: PPUSH
42660: CALL_OW 3
42664: ST_TO_ADDR
// if not f then
42665: LD_VAR 0 12
42669: NOT
42670: IFFALSE 42688
// begin x := x + 2 ;
42672: LD_ADDR_VAR 0 13
42676: PUSH
42677: LD_VAR 0 13
42681: PUSH
42682: LD_INT 2
42684: PLUS
42685: ST_TO_ADDR
// continue ;
42686: GO 42486
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
42688: LD_VAR 0 12
42692: PUSH
42693: LD_INT 1
42695: ARRAY
42696: PPUSH
42697: CALL_OW 266
42701: PUSH
42702: LD_INT 5
42704: EQUAL
42705: IFFALSE 42779
// begin if UnitsInside ( f [ 1 ] ) < 3 then
42707: LD_VAR 0 12
42711: PUSH
42712: LD_INT 1
42714: ARRAY
42715: PPUSH
42716: CALL_OW 313
42720: PUSH
42721: LD_INT 3
42723: LESS
42724: IFFALSE 42760
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42726: LD_INT 0
42728: PPUSH
42729: LD_INT 5
42731: PUSH
42732: LD_INT 8
42734: PUSH
42735: LD_INT 9
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: LIST
42742: PUSH
42743: LD_VAR 0 17
42747: ARRAY
42748: PPUSH
42749: LD_VAR 0 4
42753: PPUSH
42754: CALL_OW 380
42758: GO 42777
// PrepareHuman ( false , i , skill ) ;
42760: LD_INT 0
42762: PPUSH
42763: LD_VAR 0 8
42767: PPUSH
42768: LD_VAR 0 4
42772: PPUSH
42773: CALL_OW 380
// end else
42777: GO 42796
// PrepareHuman ( false , i , skill ) ;
42779: LD_INT 0
42781: PPUSH
42782: LD_VAR 0 8
42786: PPUSH
42787: LD_VAR 0 4
42791: PPUSH
42792: CALL_OW 380
// un := CreateHuman ;
42796: LD_ADDR_VAR 0 14
42800: PUSH
42801: CALL_OW 44
42805: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42806: LD_ADDR_VAR 0 7
42810: PUSH
42811: LD_VAR 0 7
42815: PPUSH
42816: LD_INT 1
42818: PPUSH
42819: LD_VAR 0 14
42823: PPUSH
42824: CALL_OW 2
42828: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42829: LD_VAR 0 14
42833: PPUSH
42834: LD_VAR 0 12
42838: PUSH
42839: LD_INT 1
42841: ARRAY
42842: PPUSH
42843: CALL_OW 52
// end ;
42847: GO 42486
42849: POP
42850: POP
// end ;
42851: GO 41788
42853: POP
42854: POP
// result := result ^ buildings ;
42855: LD_ADDR_VAR 0 7
42859: PUSH
42860: LD_VAR 0 7
42864: PUSH
42865: LD_VAR 0 18
42869: ADD
42870: ST_TO_ADDR
// end else
42871: GO 43014
// begin for i = 1 to personel do
42873: LD_ADDR_VAR 0 8
42877: PUSH
42878: DOUBLE
42879: LD_INT 1
42881: DEC
42882: ST_TO_ADDR
42883: LD_VAR 0 6
42887: PUSH
42888: FOR_TO
42889: IFFALSE 43012
// begin if i > 4 then
42891: LD_VAR 0 8
42895: PUSH
42896: LD_INT 4
42898: GREATER
42899: IFFALSE 42903
// break ;
42901: GO 43012
// x := personel [ i ] ;
42903: LD_ADDR_VAR 0 13
42907: PUSH
42908: LD_VAR 0 6
42912: PUSH
42913: LD_VAR 0 8
42917: ARRAY
42918: ST_TO_ADDR
// if x = - 1 then
42919: LD_VAR 0 13
42923: PUSH
42924: LD_INT 1
42926: NEG
42927: EQUAL
42928: IFFALSE 42932
// continue ;
42930: GO 42888
// PrepareHuman ( false , i , skill ) ;
42932: LD_INT 0
42934: PPUSH
42935: LD_VAR 0 8
42939: PPUSH
42940: LD_VAR 0 4
42944: PPUSH
42945: CALL_OW 380
// un := CreateHuman ;
42949: LD_ADDR_VAR 0 14
42953: PUSH
42954: CALL_OW 44
42958: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42959: LD_VAR 0 14
42963: PPUSH
42964: LD_VAR 0 1
42968: PPUSH
42969: CALL_OW 250
42973: PPUSH
42974: LD_VAR 0 1
42978: PPUSH
42979: CALL_OW 251
42983: PPUSH
42984: LD_INT 10
42986: PPUSH
42987: LD_INT 0
42989: PPUSH
42990: CALL_OW 50
// result := result ^ un ;
42994: LD_ADDR_VAR 0 7
42998: PUSH
42999: LD_VAR 0 7
43003: PUSH
43004: LD_VAR 0 14
43008: ADD
43009: ST_TO_ADDR
// end ;
43010: GO 42888
43012: POP
43013: POP
// end ; end ;
43014: LD_VAR 0 7
43018: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
43019: LD_INT 0
43021: PPUSH
43022: PPUSH
43023: PPUSH
43024: PPUSH
43025: PPUSH
43026: PPUSH
43027: PPUSH
43028: PPUSH
43029: PPUSH
43030: PPUSH
43031: PPUSH
43032: PPUSH
43033: PPUSH
43034: PPUSH
43035: PPUSH
43036: PPUSH
// result := false ;
43037: LD_ADDR_VAR 0 3
43041: PUSH
43042: LD_INT 0
43044: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
43045: LD_VAR 0 1
43049: NOT
43050: PUSH
43051: LD_VAR 0 1
43055: PPUSH
43056: CALL_OW 266
43060: PUSH
43061: LD_INT 32
43063: PUSH
43064: LD_INT 33
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: IN
43071: NOT
43072: OR
43073: IFFALSE 43077
// exit ;
43075: GO 44186
// nat := GetNation ( tower ) ;
43077: LD_ADDR_VAR 0 12
43081: PUSH
43082: LD_VAR 0 1
43086: PPUSH
43087: CALL_OW 248
43091: ST_TO_ADDR
// side := GetSide ( tower ) ;
43092: LD_ADDR_VAR 0 16
43096: PUSH
43097: LD_VAR 0 1
43101: PPUSH
43102: CALL_OW 255
43106: ST_TO_ADDR
// x := GetX ( tower ) ;
43107: LD_ADDR_VAR 0 10
43111: PUSH
43112: LD_VAR 0 1
43116: PPUSH
43117: CALL_OW 250
43121: ST_TO_ADDR
// y := GetY ( tower ) ;
43122: LD_ADDR_VAR 0 11
43126: PUSH
43127: LD_VAR 0 1
43131: PPUSH
43132: CALL_OW 251
43136: ST_TO_ADDR
// if not x or not y then
43137: LD_VAR 0 10
43141: NOT
43142: PUSH
43143: LD_VAR 0 11
43147: NOT
43148: OR
43149: IFFALSE 43153
// exit ;
43151: GO 44186
// weapon := 0 ;
43153: LD_ADDR_VAR 0 18
43157: PUSH
43158: LD_INT 0
43160: ST_TO_ADDR
// fac_list := [ ] ;
43161: LD_ADDR_VAR 0 17
43165: PUSH
43166: EMPTY
43167: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
43168: LD_ADDR_VAR 0 6
43172: PUSH
43173: LD_VAR 0 1
43177: PPUSH
43178: CALL_OW 274
43182: PPUSH
43183: LD_VAR 0 2
43187: PPUSH
43188: LD_INT 0
43190: PPUSH
43191: CALL 40757 0 3
43195: PPUSH
43196: LD_INT 30
43198: PUSH
43199: LD_INT 3
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PPUSH
43206: CALL_OW 72
43210: ST_TO_ADDR
// if not factories then
43211: LD_VAR 0 6
43215: NOT
43216: IFFALSE 43220
// exit ;
43218: GO 44186
// for i in factories do
43220: LD_ADDR_VAR 0 8
43224: PUSH
43225: LD_VAR 0 6
43229: PUSH
43230: FOR_IN
43231: IFFALSE 43256
// fac_list := fac_list union AvailableWeaponList ( i ) ;
43233: LD_ADDR_VAR 0 17
43237: PUSH
43238: LD_VAR 0 17
43242: PUSH
43243: LD_VAR 0 8
43247: PPUSH
43248: CALL_OW 478
43252: UNION
43253: ST_TO_ADDR
43254: GO 43230
43256: POP
43257: POP
// if not fac_list then
43258: LD_VAR 0 17
43262: NOT
43263: IFFALSE 43267
// exit ;
43265: GO 44186
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
43267: LD_ADDR_VAR 0 5
43271: PUSH
43272: LD_INT 4
43274: PUSH
43275: LD_INT 5
43277: PUSH
43278: LD_INT 9
43280: PUSH
43281: LD_INT 10
43283: PUSH
43284: LD_INT 6
43286: PUSH
43287: LD_INT 7
43289: PUSH
43290: LD_INT 11
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: LIST
43301: PUSH
43302: LD_INT 27
43304: PUSH
43305: LD_INT 28
43307: PUSH
43308: LD_INT 26
43310: PUSH
43311: LD_INT 30
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 43
43322: PUSH
43323: LD_INT 44
43325: PUSH
43326: LD_INT 46
43328: PUSH
43329: LD_INT 45
43331: PUSH
43332: LD_INT 47
43334: PUSH
43335: LD_INT 49
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: LIST
43350: PUSH
43351: LD_VAR 0 12
43355: ARRAY
43356: ST_TO_ADDR
// list := list isect fac_list ;
43357: LD_ADDR_VAR 0 5
43361: PUSH
43362: LD_VAR 0 5
43366: PUSH
43367: LD_VAR 0 17
43371: ISECT
43372: ST_TO_ADDR
// if not list then
43373: LD_VAR 0 5
43377: NOT
43378: IFFALSE 43382
// exit ;
43380: GO 44186
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
43382: LD_VAR 0 12
43386: PUSH
43387: LD_INT 3
43389: EQUAL
43390: PUSH
43391: LD_INT 49
43393: PUSH
43394: LD_VAR 0 5
43398: IN
43399: AND
43400: PUSH
43401: LD_INT 31
43403: PPUSH
43404: LD_VAR 0 16
43408: PPUSH
43409: CALL_OW 321
43413: PUSH
43414: LD_INT 2
43416: EQUAL
43417: AND
43418: IFFALSE 43478
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
43420: LD_INT 22
43422: PUSH
43423: LD_VAR 0 16
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 35
43434: PUSH
43435: LD_INT 49
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 91
43444: PUSH
43445: LD_VAR 0 1
43449: PUSH
43450: LD_INT 10
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: LIST
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: LIST
43462: PPUSH
43463: CALL_OW 69
43467: NOT
43468: IFFALSE 43478
// weapon := ru_time_lapser ;
43470: LD_ADDR_VAR 0 18
43474: PUSH
43475: LD_INT 49
43477: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
43478: LD_VAR 0 12
43482: PUSH
43483: LD_INT 1
43485: PUSH
43486: LD_INT 2
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: IN
43493: PUSH
43494: LD_INT 11
43496: PUSH
43497: LD_VAR 0 5
43501: IN
43502: PUSH
43503: LD_INT 30
43505: PUSH
43506: LD_VAR 0 5
43510: IN
43511: OR
43512: AND
43513: PUSH
43514: LD_INT 6
43516: PPUSH
43517: LD_VAR 0 16
43521: PPUSH
43522: CALL_OW 321
43526: PUSH
43527: LD_INT 2
43529: EQUAL
43530: AND
43531: IFFALSE 43696
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
43533: LD_INT 22
43535: PUSH
43536: LD_VAR 0 16
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 2
43547: PUSH
43548: LD_INT 35
43550: PUSH
43551: LD_INT 11
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 35
43560: PUSH
43561: LD_INT 30
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 91
43575: PUSH
43576: LD_VAR 0 1
43580: PUSH
43581: LD_INT 18
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: LIST
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: LIST
43593: PPUSH
43594: CALL_OW 69
43598: NOT
43599: PUSH
43600: LD_INT 22
43602: PUSH
43603: LD_VAR 0 16
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 2
43614: PUSH
43615: LD_INT 30
43617: PUSH
43618: LD_INT 32
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 30
43627: PUSH
43628: LD_INT 33
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 91
43642: PUSH
43643: LD_VAR 0 1
43647: PUSH
43648: LD_INT 12
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: LIST
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: LIST
43660: PUSH
43661: EMPTY
43662: LIST
43663: PPUSH
43664: CALL_OW 69
43668: PUSH
43669: LD_INT 2
43671: GREATER
43672: AND
43673: IFFALSE 43696
// weapon := [ us_radar , ar_radar ] [ nat ] ;
43675: LD_ADDR_VAR 0 18
43679: PUSH
43680: LD_INT 11
43682: PUSH
43683: LD_INT 30
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_VAR 0 12
43694: ARRAY
43695: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
43696: LD_VAR 0 18
43700: NOT
43701: PUSH
43702: LD_INT 40
43704: PPUSH
43705: LD_VAR 0 16
43709: PPUSH
43710: CALL_OW 321
43714: PUSH
43715: LD_INT 2
43717: EQUAL
43718: AND
43719: PUSH
43720: LD_INT 7
43722: PUSH
43723: LD_VAR 0 5
43727: IN
43728: PUSH
43729: LD_INT 28
43731: PUSH
43732: LD_VAR 0 5
43736: IN
43737: OR
43738: PUSH
43739: LD_INT 45
43741: PUSH
43742: LD_VAR 0 5
43746: IN
43747: OR
43748: AND
43749: IFFALSE 44003
// begin hex := GetHexInfo ( x , y ) ;
43751: LD_ADDR_VAR 0 4
43755: PUSH
43756: LD_VAR 0 10
43760: PPUSH
43761: LD_VAR 0 11
43765: PPUSH
43766: CALL_OW 546
43770: ST_TO_ADDR
// if hex [ 1 ] then
43771: LD_VAR 0 4
43775: PUSH
43776: LD_INT 1
43778: ARRAY
43779: IFFALSE 43783
// exit ;
43781: GO 44186
// height := hex [ 2 ] ;
43783: LD_ADDR_VAR 0 15
43787: PUSH
43788: LD_VAR 0 4
43792: PUSH
43793: LD_INT 2
43795: ARRAY
43796: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43797: LD_ADDR_VAR 0 14
43801: PUSH
43802: LD_INT 0
43804: PUSH
43805: LD_INT 2
43807: PUSH
43808: LD_INT 3
43810: PUSH
43811: LD_INT 5
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: ST_TO_ADDR
// for i in tmp do
43820: LD_ADDR_VAR 0 8
43824: PUSH
43825: LD_VAR 0 14
43829: PUSH
43830: FOR_IN
43831: IFFALSE 44001
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43833: LD_ADDR_VAR 0 9
43837: PUSH
43838: LD_VAR 0 10
43842: PPUSH
43843: LD_VAR 0 8
43847: PPUSH
43848: LD_INT 5
43850: PPUSH
43851: CALL_OW 272
43855: PUSH
43856: LD_VAR 0 11
43860: PPUSH
43861: LD_VAR 0 8
43865: PPUSH
43866: LD_INT 5
43868: PPUSH
43869: CALL_OW 273
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43878: LD_VAR 0 9
43882: PUSH
43883: LD_INT 1
43885: ARRAY
43886: PPUSH
43887: LD_VAR 0 9
43891: PUSH
43892: LD_INT 2
43894: ARRAY
43895: PPUSH
43896: CALL_OW 488
43900: IFFALSE 43999
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43902: LD_ADDR_VAR 0 4
43906: PUSH
43907: LD_VAR 0 9
43911: PUSH
43912: LD_INT 1
43914: ARRAY
43915: PPUSH
43916: LD_VAR 0 9
43920: PUSH
43921: LD_INT 2
43923: ARRAY
43924: PPUSH
43925: CALL_OW 546
43929: ST_TO_ADDR
// if hex [ 1 ] then
43930: LD_VAR 0 4
43934: PUSH
43935: LD_INT 1
43937: ARRAY
43938: IFFALSE 43942
// continue ;
43940: GO 43830
// h := hex [ 2 ] ;
43942: LD_ADDR_VAR 0 13
43946: PUSH
43947: LD_VAR 0 4
43951: PUSH
43952: LD_INT 2
43954: ARRAY
43955: ST_TO_ADDR
// if h + 7 < height then
43956: LD_VAR 0 13
43960: PUSH
43961: LD_INT 7
43963: PLUS
43964: PUSH
43965: LD_VAR 0 15
43969: LESS
43970: IFFALSE 43999
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43972: LD_ADDR_VAR 0 18
43976: PUSH
43977: LD_INT 7
43979: PUSH
43980: LD_INT 28
43982: PUSH
43983: LD_INT 45
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: LIST
43990: PUSH
43991: LD_VAR 0 12
43995: ARRAY
43996: ST_TO_ADDR
// break ;
43997: GO 44001
// end ; end ; end ;
43999: GO 43830
44001: POP
44002: POP
// end ; if not weapon then
44003: LD_VAR 0 18
44007: NOT
44008: IFFALSE 44068
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
44010: LD_ADDR_VAR 0 5
44014: PUSH
44015: LD_VAR 0 5
44019: PUSH
44020: LD_INT 11
44022: PUSH
44023: LD_INT 30
44025: PUSH
44026: LD_INT 49
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: LIST
44033: DIFF
44034: ST_TO_ADDR
// if not list then
44035: LD_VAR 0 5
44039: NOT
44040: IFFALSE 44044
// exit ;
44042: GO 44186
// weapon := list [ rand ( 1 , list ) ] ;
44044: LD_ADDR_VAR 0 18
44048: PUSH
44049: LD_VAR 0 5
44053: PUSH
44054: LD_INT 1
44056: PPUSH
44057: LD_VAR 0 5
44061: PPUSH
44062: CALL_OW 12
44066: ARRAY
44067: ST_TO_ADDR
// end ; if weapon then
44068: LD_VAR 0 18
44072: IFFALSE 44186
// begin tmp := CostOfWeapon ( weapon ) ;
44074: LD_ADDR_VAR 0 14
44078: PUSH
44079: LD_VAR 0 18
44083: PPUSH
44084: CALL_OW 451
44088: ST_TO_ADDR
// j := GetBase ( tower ) ;
44089: LD_ADDR_VAR 0 9
44093: PUSH
44094: LD_VAR 0 1
44098: PPUSH
44099: CALL_OW 274
44103: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
44104: LD_VAR 0 9
44108: PPUSH
44109: LD_INT 1
44111: PPUSH
44112: CALL_OW 275
44116: PUSH
44117: LD_VAR 0 14
44121: PUSH
44122: LD_INT 1
44124: ARRAY
44125: GREATEREQUAL
44126: PUSH
44127: LD_VAR 0 9
44131: PPUSH
44132: LD_INT 2
44134: PPUSH
44135: CALL_OW 275
44139: PUSH
44140: LD_VAR 0 14
44144: PUSH
44145: LD_INT 2
44147: ARRAY
44148: GREATEREQUAL
44149: AND
44150: PUSH
44151: LD_VAR 0 9
44155: PPUSH
44156: LD_INT 3
44158: PPUSH
44159: CALL_OW 275
44163: PUSH
44164: LD_VAR 0 14
44168: PUSH
44169: LD_INT 3
44171: ARRAY
44172: GREATEREQUAL
44173: AND
44174: IFFALSE 44186
// result := weapon ;
44176: LD_ADDR_VAR 0 3
44180: PUSH
44181: LD_VAR 0 18
44185: ST_TO_ADDR
// end ; end ;
44186: LD_VAR 0 3
44190: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
44191: LD_INT 0
44193: PPUSH
44194: PPUSH
// result := true ;
44195: LD_ADDR_VAR 0 3
44199: PUSH
44200: LD_INT 1
44202: ST_TO_ADDR
// if array1 = array2 then
44203: LD_VAR 0 1
44207: PUSH
44208: LD_VAR 0 2
44212: EQUAL
44213: IFFALSE 44273
// begin for i = 1 to array1 do
44215: LD_ADDR_VAR 0 4
44219: PUSH
44220: DOUBLE
44221: LD_INT 1
44223: DEC
44224: ST_TO_ADDR
44225: LD_VAR 0 1
44229: PUSH
44230: FOR_TO
44231: IFFALSE 44269
// if array1 [ i ] <> array2 [ i ] then
44233: LD_VAR 0 1
44237: PUSH
44238: LD_VAR 0 4
44242: ARRAY
44243: PUSH
44244: LD_VAR 0 2
44248: PUSH
44249: LD_VAR 0 4
44253: ARRAY
44254: NONEQUAL
44255: IFFALSE 44267
// begin result := false ;
44257: LD_ADDR_VAR 0 3
44261: PUSH
44262: LD_INT 0
44264: ST_TO_ADDR
// break ;
44265: GO 44269
// end ;
44267: GO 44230
44269: POP
44270: POP
// end else
44271: GO 44281
// result := false ;
44273: LD_ADDR_VAR 0 3
44277: PUSH
44278: LD_INT 0
44280: ST_TO_ADDR
// end ;
44281: LD_VAR 0 3
44285: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
44286: LD_INT 0
44288: PPUSH
44289: PPUSH
// if not array1 or not array2 then
44290: LD_VAR 0 1
44294: NOT
44295: PUSH
44296: LD_VAR 0 2
44300: NOT
44301: OR
44302: IFFALSE 44306
// exit ;
44304: GO 44370
// result := true ;
44306: LD_ADDR_VAR 0 3
44310: PUSH
44311: LD_INT 1
44313: ST_TO_ADDR
// for i = 1 to array1 do
44314: LD_ADDR_VAR 0 4
44318: PUSH
44319: DOUBLE
44320: LD_INT 1
44322: DEC
44323: ST_TO_ADDR
44324: LD_VAR 0 1
44328: PUSH
44329: FOR_TO
44330: IFFALSE 44368
// if array1 [ i ] <> array2 [ i ] then
44332: LD_VAR 0 1
44336: PUSH
44337: LD_VAR 0 4
44341: ARRAY
44342: PUSH
44343: LD_VAR 0 2
44347: PUSH
44348: LD_VAR 0 4
44352: ARRAY
44353: NONEQUAL
44354: IFFALSE 44366
// begin result := false ;
44356: LD_ADDR_VAR 0 3
44360: PUSH
44361: LD_INT 0
44363: ST_TO_ADDR
// break ;
44364: GO 44368
// end ;
44366: GO 44329
44368: POP
44369: POP
// end ;
44370: LD_VAR 0 3
44374: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
44375: LD_INT 0
44377: PPUSH
44378: PPUSH
44379: PPUSH
// pom := GetBase ( fac ) ;
44380: LD_ADDR_VAR 0 5
44384: PUSH
44385: LD_VAR 0 1
44389: PPUSH
44390: CALL_OW 274
44394: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
44395: LD_ADDR_VAR 0 4
44399: PUSH
44400: LD_VAR 0 2
44404: PUSH
44405: LD_INT 1
44407: ARRAY
44408: PPUSH
44409: LD_VAR 0 2
44413: PUSH
44414: LD_INT 2
44416: ARRAY
44417: PPUSH
44418: LD_VAR 0 2
44422: PUSH
44423: LD_INT 3
44425: ARRAY
44426: PPUSH
44427: LD_VAR 0 2
44431: PUSH
44432: LD_INT 4
44434: ARRAY
44435: PPUSH
44436: CALL_OW 449
44440: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44441: LD_ADDR_VAR 0 3
44445: PUSH
44446: LD_VAR 0 5
44450: PPUSH
44451: LD_INT 1
44453: PPUSH
44454: CALL_OW 275
44458: PUSH
44459: LD_VAR 0 4
44463: PUSH
44464: LD_INT 1
44466: ARRAY
44467: GREATEREQUAL
44468: PUSH
44469: LD_VAR 0 5
44473: PPUSH
44474: LD_INT 2
44476: PPUSH
44477: CALL_OW 275
44481: PUSH
44482: LD_VAR 0 4
44486: PUSH
44487: LD_INT 2
44489: ARRAY
44490: GREATEREQUAL
44491: AND
44492: PUSH
44493: LD_VAR 0 5
44497: PPUSH
44498: LD_INT 3
44500: PPUSH
44501: CALL_OW 275
44505: PUSH
44506: LD_VAR 0 4
44510: PUSH
44511: LD_INT 3
44513: ARRAY
44514: GREATEREQUAL
44515: AND
44516: ST_TO_ADDR
// end ;
44517: LD_VAR 0 3
44521: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
44522: LD_INT 0
44524: PPUSH
44525: PPUSH
44526: PPUSH
44527: PPUSH
// pom := GetBase ( building ) ;
44528: LD_ADDR_VAR 0 3
44532: PUSH
44533: LD_VAR 0 1
44537: PPUSH
44538: CALL_OW 274
44542: ST_TO_ADDR
// if not pom then
44543: LD_VAR 0 3
44547: NOT
44548: IFFALSE 44552
// exit ;
44550: GO 44722
// btype := GetBType ( building ) ;
44552: LD_ADDR_VAR 0 5
44556: PUSH
44557: LD_VAR 0 1
44561: PPUSH
44562: CALL_OW 266
44566: ST_TO_ADDR
// if btype = b_armoury then
44567: LD_VAR 0 5
44571: PUSH
44572: LD_INT 4
44574: EQUAL
44575: IFFALSE 44585
// btype := b_barracks ;
44577: LD_ADDR_VAR 0 5
44581: PUSH
44582: LD_INT 5
44584: ST_TO_ADDR
// if btype = b_depot then
44585: LD_VAR 0 5
44589: PUSH
44590: LD_INT 0
44592: EQUAL
44593: IFFALSE 44603
// btype := b_warehouse ;
44595: LD_ADDR_VAR 0 5
44599: PUSH
44600: LD_INT 1
44602: ST_TO_ADDR
// if btype = b_workshop then
44603: LD_VAR 0 5
44607: PUSH
44608: LD_INT 2
44610: EQUAL
44611: IFFALSE 44621
// btype := b_factory ;
44613: LD_ADDR_VAR 0 5
44617: PUSH
44618: LD_INT 3
44620: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44621: LD_ADDR_VAR 0 4
44625: PUSH
44626: LD_VAR 0 5
44630: PPUSH
44631: LD_VAR 0 1
44635: PPUSH
44636: CALL_OW 248
44640: PPUSH
44641: CALL_OW 450
44645: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44646: LD_ADDR_VAR 0 2
44650: PUSH
44651: LD_VAR 0 3
44655: PPUSH
44656: LD_INT 1
44658: PPUSH
44659: CALL_OW 275
44663: PUSH
44664: LD_VAR 0 4
44668: PUSH
44669: LD_INT 1
44671: ARRAY
44672: GREATEREQUAL
44673: PUSH
44674: LD_VAR 0 3
44678: PPUSH
44679: LD_INT 2
44681: PPUSH
44682: CALL_OW 275
44686: PUSH
44687: LD_VAR 0 4
44691: PUSH
44692: LD_INT 2
44694: ARRAY
44695: GREATEREQUAL
44696: AND
44697: PUSH
44698: LD_VAR 0 3
44702: PPUSH
44703: LD_INT 3
44705: PPUSH
44706: CALL_OW 275
44710: PUSH
44711: LD_VAR 0 4
44715: PUSH
44716: LD_INT 3
44718: ARRAY
44719: GREATEREQUAL
44720: AND
44721: ST_TO_ADDR
// end ;
44722: LD_VAR 0 2
44726: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
44727: LD_INT 0
44729: PPUSH
44730: PPUSH
44731: PPUSH
// pom := GetBase ( building ) ;
44732: LD_ADDR_VAR 0 4
44736: PUSH
44737: LD_VAR 0 1
44741: PPUSH
44742: CALL_OW 274
44746: ST_TO_ADDR
// if not pom then
44747: LD_VAR 0 4
44751: NOT
44752: IFFALSE 44756
// exit ;
44754: GO 44857
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44756: LD_ADDR_VAR 0 5
44760: PUSH
44761: LD_VAR 0 2
44765: PPUSH
44766: LD_VAR 0 1
44770: PPUSH
44771: CALL_OW 248
44775: PPUSH
44776: CALL_OW 450
44780: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44781: LD_ADDR_VAR 0 3
44785: PUSH
44786: LD_VAR 0 4
44790: PPUSH
44791: LD_INT 1
44793: PPUSH
44794: CALL_OW 275
44798: PUSH
44799: LD_VAR 0 5
44803: PUSH
44804: LD_INT 1
44806: ARRAY
44807: GREATEREQUAL
44808: PUSH
44809: LD_VAR 0 4
44813: PPUSH
44814: LD_INT 2
44816: PPUSH
44817: CALL_OW 275
44821: PUSH
44822: LD_VAR 0 5
44826: PUSH
44827: LD_INT 2
44829: ARRAY
44830: GREATEREQUAL
44831: AND
44832: PUSH
44833: LD_VAR 0 4
44837: PPUSH
44838: LD_INT 3
44840: PPUSH
44841: CALL_OW 275
44845: PUSH
44846: LD_VAR 0 5
44850: PUSH
44851: LD_INT 3
44853: ARRAY
44854: GREATEREQUAL
44855: AND
44856: ST_TO_ADDR
// end ;
44857: LD_VAR 0 3
44861: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
44862: LD_INT 0
44864: PPUSH
44865: PPUSH
44866: PPUSH
44867: PPUSH
44868: PPUSH
44869: PPUSH
44870: PPUSH
44871: PPUSH
44872: PPUSH
44873: PPUSH
44874: PPUSH
// result := false ;
44875: LD_ADDR_VAR 0 8
44879: PUSH
44880: LD_INT 0
44882: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
44883: LD_VAR 0 5
44887: NOT
44888: PUSH
44889: LD_VAR 0 1
44893: NOT
44894: OR
44895: PUSH
44896: LD_VAR 0 2
44900: NOT
44901: OR
44902: PUSH
44903: LD_VAR 0 3
44907: NOT
44908: OR
44909: IFFALSE 44913
// exit ;
44911: GO 45727
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
44913: LD_ADDR_VAR 0 14
44917: PUSH
44918: LD_VAR 0 1
44922: PPUSH
44923: LD_VAR 0 2
44927: PPUSH
44928: LD_VAR 0 3
44932: PPUSH
44933: LD_VAR 0 4
44937: PPUSH
44938: LD_VAR 0 5
44942: PUSH
44943: LD_INT 1
44945: ARRAY
44946: PPUSH
44947: CALL_OW 248
44951: PPUSH
44952: LD_INT 0
44954: PPUSH
44955: CALL 46960 0 6
44959: ST_TO_ADDR
// if not hexes then
44960: LD_VAR 0 14
44964: NOT
44965: IFFALSE 44969
// exit ;
44967: GO 45727
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44969: LD_ADDR_VAR 0 17
44973: PUSH
44974: LD_VAR 0 5
44978: PPUSH
44979: LD_INT 22
44981: PUSH
44982: LD_VAR 0 13
44986: PPUSH
44987: CALL_OW 255
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 2
44998: PUSH
44999: LD_INT 30
45001: PUSH
45002: LD_INT 0
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 30
45011: PUSH
45012: LD_INT 1
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: LIST
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PPUSH
45028: CALL_OW 72
45032: ST_TO_ADDR
// for i = 1 to hexes do
45033: LD_ADDR_VAR 0 9
45037: PUSH
45038: DOUBLE
45039: LD_INT 1
45041: DEC
45042: ST_TO_ADDR
45043: LD_VAR 0 14
45047: PUSH
45048: FOR_TO
45049: IFFALSE 45725
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45051: LD_ADDR_VAR 0 13
45055: PUSH
45056: LD_VAR 0 14
45060: PUSH
45061: LD_VAR 0 9
45065: ARRAY
45066: PUSH
45067: LD_INT 1
45069: ARRAY
45070: PPUSH
45071: LD_VAR 0 14
45075: PUSH
45076: LD_VAR 0 9
45080: ARRAY
45081: PUSH
45082: LD_INT 2
45084: ARRAY
45085: PPUSH
45086: CALL_OW 428
45090: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
45091: LD_VAR 0 14
45095: PUSH
45096: LD_VAR 0 9
45100: ARRAY
45101: PUSH
45102: LD_INT 1
45104: ARRAY
45105: PPUSH
45106: LD_VAR 0 14
45110: PUSH
45111: LD_VAR 0 9
45115: ARRAY
45116: PUSH
45117: LD_INT 2
45119: ARRAY
45120: PPUSH
45121: CALL_OW 351
45125: PUSH
45126: LD_VAR 0 14
45130: PUSH
45131: LD_VAR 0 9
45135: ARRAY
45136: PUSH
45137: LD_INT 1
45139: ARRAY
45140: PPUSH
45141: LD_VAR 0 14
45145: PUSH
45146: LD_VAR 0 9
45150: ARRAY
45151: PUSH
45152: LD_INT 2
45154: ARRAY
45155: PPUSH
45156: CALL_OW 488
45160: NOT
45161: OR
45162: PUSH
45163: LD_VAR 0 13
45167: PPUSH
45168: CALL_OW 247
45172: PUSH
45173: LD_INT 3
45175: EQUAL
45176: OR
45177: IFFALSE 45183
// exit ;
45179: POP
45180: POP
45181: GO 45727
// if not tmp then
45183: LD_VAR 0 13
45187: NOT
45188: IFFALSE 45192
// continue ;
45190: GO 45048
// result := true ;
45192: LD_ADDR_VAR 0 8
45196: PUSH
45197: LD_INT 1
45199: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
45200: LD_VAR 0 6
45204: PUSH
45205: LD_VAR 0 13
45209: PPUSH
45210: CALL_OW 247
45214: PUSH
45215: LD_INT 2
45217: EQUAL
45218: AND
45219: PUSH
45220: LD_VAR 0 13
45224: PPUSH
45225: CALL_OW 263
45229: PUSH
45230: LD_INT 1
45232: EQUAL
45233: AND
45234: IFFALSE 45398
// begin if IsDrivenBy ( tmp ) then
45236: LD_VAR 0 13
45240: PPUSH
45241: CALL_OW 311
45245: IFFALSE 45249
// continue ;
45247: GO 45048
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
45249: LD_VAR 0 6
45253: PPUSH
45254: LD_INT 3
45256: PUSH
45257: LD_INT 60
45259: PUSH
45260: EMPTY
45261: LIST
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 3
45269: PUSH
45270: LD_INT 55
45272: PUSH
45273: EMPTY
45274: LIST
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PPUSH
45284: CALL_OW 72
45288: IFFALSE 45396
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
45290: LD_ADDR_VAR 0 18
45294: PUSH
45295: LD_VAR 0 6
45299: PPUSH
45300: LD_INT 3
45302: PUSH
45303: LD_INT 60
45305: PUSH
45306: EMPTY
45307: LIST
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 3
45315: PUSH
45316: LD_INT 55
45318: PUSH
45319: EMPTY
45320: LIST
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PPUSH
45330: CALL_OW 72
45334: PUSH
45335: LD_INT 1
45337: ARRAY
45338: ST_TO_ADDR
// if IsInUnit ( driver ) then
45339: LD_VAR 0 18
45343: PPUSH
45344: CALL_OW 310
45348: IFFALSE 45359
// ComExit ( driver ) ;
45350: LD_VAR 0 18
45354: PPUSH
45355: CALL 70740 0 1
// AddComEnterUnit ( driver , tmp ) ;
45359: LD_VAR 0 18
45363: PPUSH
45364: LD_VAR 0 13
45368: PPUSH
45369: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
45373: LD_VAR 0 18
45377: PPUSH
45378: LD_VAR 0 7
45382: PPUSH
45383: CALL_OW 173
// AddComExitVehicle ( driver ) ;
45387: LD_VAR 0 18
45391: PPUSH
45392: CALL_OW 181
// end ; continue ;
45396: GO 45048
// end ; if not cleaners or not tmp in cleaners then
45398: LD_VAR 0 6
45402: NOT
45403: PUSH
45404: LD_VAR 0 13
45408: PUSH
45409: LD_VAR 0 6
45413: IN
45414: NOT
45415: OR
45416: IFFALSE 45723
// begin if dep then
45418: LD_VAR 0 17
45422: IFFALSE 45558
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
45424: LD_ADDR_VAR 0 16
45428: PUSH
45429: LD_VAR 0 17
45433: PUSH
45434: LD_INT 1
45436: ARRAY
45437: PPUSH
45438: CALL_OW 250
45442: PPUSH
45443: LD_VAR 0 17
45447: PUSH
45448: LD_INT 1
45450: ARRAY
45451: PPUSH
45452: CALL_OW 254
45456: PPUSH
45457: LD_INT 5
45459: PPUSH
45460: CALL_OW 272
45464: PUSH
45465: LD_VAR 0 17
45469: PUSH
45470: LD_INT 1
45472: ARRAY
45473: PPUSH
45474: CALL_OW 251
45478: PPUSH
45479: LD_VAR 0 17
45483: PUSH
45484: LD_INT 1
45486: ARRAY
45487: PPUSH
45488: CALL_OW 254
45492: PPUSH
45493: LD_INT 5
45495: PPUSH
45496: CALL_OW 273
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
45505: LD_VAR 0 16
45509: PUSH
45510: LD_INT 1
45512: ARRAY
45513: PPUSH
45514: LD_VAR 0 16
45518: PUSH
45519: LD_INT 2
45521: ARRAY
45522: PPUSH
45523: CALL_OW 488
45527: IFFALSE 45558
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
45529: LD_VAR 0 13
45533: PPUSH
45534: LD_VAR 0 16
45538: PUSH
45539: LD_INT 1
45541: ARRAY
45542: PPUSH
45543: LD_VAR 0 16
45547: PUSH
45548: LD_INT 2
45550: ARRAY
45551: PPUSH
45552: CALL_OW 111
// continue ;
45556: GO 45048
// end ; end ; r := GetDir ( tmp ) ;
45558: LD_ADDR_VAR 0 15
45562: PUSH
45563: LD_VAR 0 13
45567: PPUSH
45568: CALL_OW 254
45572: ST_TO_ADDR
// if r = 5 then
45573: LD_VAR 0 15
45577: PUSH
45578: LD_INT 5
45580: EQUAL
45581: IFFALSE 45591
// r := 0 ;
45583: LD_ADDR_VAR 0 15
45587: PUSH
45588: LD_INT 0
45590: ST_TO_ADDR
// for j = r to 5 do
45591: LD_ADDR_VAR 0 10
45595: PUSH
45596: DOUBLE
45597: LD_VAR 0 15
45601: DEC
45602: ST_TO_ADDR
45603: LD_INT 5
45605: PUSH
45606: FOR_TO
45607: IFFALSE 45721
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
45609: LD_ADDR_VAR 0 11
45613: PUSH
45614: LD_VAR 0 13
45618: PPUSH
45619: CALL_OW 250
45623: PPUSH
45624: LD_VAR 0 10
45628: PPUSH
45629: LD_INT 2
45631: PPUSH
45632: CALL_OW 272
45636: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
45637: LD_ADDR_VAR 0 12
45641: PUSH
45642: LD_VAR 0 13
45646: PPUSH
45647: CALL_OW 251
45651: PPUSH
45652: LD_VAR 0 10
45656: PPUSH
45657: LD_INT 2
45659: PPUSH
45660: CALL_OW 273
45664: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
45665: LD_VAR 0 11
45669: PPUSH
45670: LD_VAR 0 12
45674: PPUSH
45675: CALL_OW 488
45679: PUSH
45680: LD_VAR 0 11
45684: PPUSH
45685: LD_VAR 0 12
45689: PPUSH
45690: CALL_OW 428
45694: NOT
45695: AND
45696: IFFALSE 45719
// begin ComMoveXY ( tmp , _x , _y ) ;
45698: LD_VAR 0 13
45702: PPUSH
45703: LD_VAR 0 11
45707: PPUSH
45708: LD_VAR 0 12
45712: PPUSH
45713: CALL_OW 111
// break ;
45717: GO 45721
// end ; end ;
45719: GO 45606
45721: POP
45722: POP
// end ; end ;
45723: GO 45048
45725: POP
45726: POP
// end ;
45727: LD_VAR 0 8
45731: RET
// export function BuildingTechInvented ( side , btype ) ; begin
45732: LD_INT 0
45734: PPUSH
// result := true ;
45735: LD_ADDR_VAR 0 3
45739: PUSH
45740: LD_INT 1
45742: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
45743: LD_VAR 0 2
45747: PUSH
45748: LD_INT 24
45750: DOUBLE
45751: EQUAL
45752: IFTRUE 45762
45754: LD_INT 33
45756: DOUBLE
45757: EQUAL
45758: IFTRUE 45762
45760: GO 45787
45762: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
45763: LD_ADDR_VAR 0 3
45767: PUSH
45768: LD_INT 32
45770: PPUSH
45771: LD_VAR 0 1
45775: PPUSH
45776: CALL_OW 321
45780: PUSH
45781: LD_INT 2
45783: EQUAL
45784: ST_TO_ADDR
45785: GO 46103
45787: LD_INT 20
45789: DOUBLE
45790: EQUAL
45791: IFTRUE 45795
45793: GO 45820
45795: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
45796: LD_ADDR_VAR 0 3
45800: PUSH
45801: LD_INT 6
45803: PPUSH
45804: LD_VAR 0 1
45808: PPUSH
45809: CALL_OW 321
45813: PUSH
45814: LD_INT 2
45816: EQUAL
45817: ST_TO_ADDR
45818: GO 46103
45820: LD_INT 22
45822: DOUBLE
45823: EQUAL
45824: IFTRUE 45834
45826: LD_INT 36
45828: DOUBLE
45829: EQUAL
45830: IFTRUE 45834
45832: GO 45859
45834: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
45835: LD_ADDR_VAR 0 3
45839: PUSH
45840: LD_INT 15
45842: PPUSH
45843: LD_VAR 0 1
45847: PPUSH
45848: CALL_OW 321
45852: PUSH
45853: LD_INT 2
45855: EQUAL
45856: ST_TO_ADDR
45857: GO 46103
45859: LD_INT 30
45861: DOUBLE
45862: EQUAL
45863: IFTRUE 45867
45865: GO 45892
45867: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
45868: LD_ADDR_VAR 0 3
45872: PUSH
45873: LD_INT 20
45875: PPUSH
45876: LD_VAR 0 1
45880: PPUSH
45881: CALL_OW 321
45885: PUSH
45886: LD_INT 2
45888: EQUAL
45889: ST_TO_ADDR
45890: GO 46103
45892: LD_INT 28
45894: DOUBLE
45895: EQUAL
45896: IFTRUE 45906
45898: LD_INT 21
45900: DOUBLE
45901: EQUAL
45902: IFTRUE 45906
45904: GO 45931
45906: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
45907: LD_ADDR_VAR 0 3
45911: PUSH
45912: LD_INT 21
45914: PPUSH
45915: LD_VAR 0 1
45919: PPUSH
45920: CALL_OW 321
45924: PUSH
45925: LD_INT 2
45927: EQUAL
45928: ST_TO_ADDR
45929: GO 46103
45931: LD_INT 16
45933: DOUBLE
45934: EQUAL
45935: IFTRUE 45939
45937: GO 45964
45939: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
45940: LD_ADDR_VAR 0 3
45944: PUSH
45945: LD_INT 84
45947: PPUSH
45948: LD_VAR 0 1
45952: PPUSH
45953: CALL_OW 321
45957: PUSH
45958: LD_INT 2
45960: EQUAL
45961: ST_TO_ADDR
45962: GO 46103
45964: LD_INT 19
45966: DOUBLE
45967: EQUAL
45968: IFTRUE 45978
45970: LD_INT 23
45972: DOUBLE
45973: EQUAL
45974: IFTRUE 45978
45976: GO 46003
45978: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
45979: LD_ADDR_VAR 0 3
45983: PUSH
45984: LD_INT 83
45986: PPUSH
45987: LD_VAR 0 1
45991: PPUSH
45992: CALL_OW 321
45996: PUSH
45997: LD_INT 2
45999: EQUAL
46000: ST_TO_ADDR
46001: GO 46103
46003: LD_INT 17
46005: DOUBLE
46006: EQUAL
46007: IFTRUE 46011
46009: GO 46036
46011: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
46012: LD_ADDR_VAR 0 3
46016: PUSH
46017: LD_INT 39
46019: PPUSH
46020: LD_VAR 0 1
46024: PPUSH
46025: CALL_OW 321
46029: PUSH
46030: LD_INT 2
46032: EQUAL
46033: ST_TO_ADDR
46034: GO 46103
46036: LD_INT 18
46038: DOUBLE
46039: EQUAL
46040: IFTRUE 46044
46042: GO 46069
46044: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
46045: LD_ADDR_VAR 0 3
46049: PUSH
46050: LD_INT 40
46052: PPUSH
46053: LD_VAR 0 1
46057: PPUSH
46058: CALL_OW 321
46062: PUSH
46063: LD_INT 2
46065: EQUAL
46066: ST_TO_ADDR
46067: GO 46103
46069: LD_INT 27
46071: DOUBLE
46072: EQUAL
46073: IFTRUE 46077
46075: GO 46102
46077: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
46078: LD_ADDR_VAR 0 3
46082: PUSH
46083: LD_INT 35
46085: PPUSH
46086: LD_VAR 0 1
46090: PPUSH
46091: CALL_OW 321
46095: PUSH
46096: LD_INT 2
46098: EQUAL
46099: ST_TO_ADDR
46100: GO 46103
46102: POP
// end ;
46103: LD_VAR 0 3
46107: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
46108: LD_INT 0
46110: PPUSH
46111: PPUSH
46112: PPUSH
46113: PPUSH
46114: PPUSH
46115: PPUSH
46116: PPUSH
46117: PPUSH
46118: PPUSH
46119: PPUSH
46120: PPUSH
// result := false ;
46121: LD_ADDR_VAR 0 6
46125: PUSH
46126: LD_INT 0
46128: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
46129: LD_VAR 0 1
46133: NOT
46134: PUSH
46135: LD_VAR 0 1
46139: PPUSH
46140: CALL_OW 266
46144: PUSH
46145: LD_INT 0
46147: PUSH
46148: LD_INT 1
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: IN
46155: NOT
46156: OR
46157: PUSH
46158: LD_VAR 0 2
46162: NOT
46163: OR
46164: PUSH
46165: LD_VAR 0 5
46169: PUSH
46170: LD_INT 0
46172: PUSH
46173: LD_INT 1
46175: PUSH
46176: LD_INT 2
46178: PUSH
46179: LD_INT 3
46181: PUSH
46182: LD_INT 4
46184: PUSH
46185: LD_INT 5
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: IN
46196: NOT
46197: OR
46198: PUSH
46199: LD_VAR 0 3
46203: PPUSH
46204: LD_VAR 0 4
46208: PPUSH
46209: CALL_OW 488
46213: NOT
46214: OR
46215: IFFALSE 46219
// exit ;
46217: GO 46955
// side := GetSide ( depot ) ;
46219: LD_ADDR_VAR 0 9
46223: PUSH
46224: LD_VAR 0 1
46228: PPUSH
46229: CALL_OW 255
46233: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
46234: LD_VAR 0 9
46238: PPUSH
46239: LD_VAR 0 2
46243: PPUSH
46244: CALL 45732 0 2
46248: NOT
46249: IFFALSE 46253
// exit ;
46251: GO 46955
// pom := GetBase ( depot ) ;
46253: LD_ADDR_VAR 0 10
46257: PUSH
46258: LD_VAR 0 1
46262: PPUSH
46263: CALL_OW 274
46267: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
46268: LD_ADDR_VAR 0 11
46272: PUSH
46273: LD_VAR 0 2
46277: PPUSH
46278: LD_VAR 0 1
46282: PPUSH
46283: CALL_OW 248
46287: PPUSH
46288: CALL_OW 450
46292: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
46293: LD_VAR 0 10
46297: PPUSH
46298: LD_INT 1
46300: PPUSH
46301: CALL_OW 275
46305: PUSH
46306: LD_VAR 0 11
46310: PUSH
46311: LD_INT 1
46313: ARRAY
46314: GREATEREQUAL
46315: PUSH
46316: LD_VAR 0 10
46320: PPUSH
46321: LD_INT 2
46323: PPUSH
46324: CALL_OW 275
46328: PUSH
46329: LD_VAR 0 11
46333: PUSH
46334: LD_INT 2
46336: ARRAY
46337: GREATEREQUAL
46338: AND
46339: PUSH
46340: LD_VAR 0 10
46344: PPUSH
46345: LD_INT 3
46347: PPUSH
46348: CALL_OW 275
46352: PUSH
46353: LD_VAR 0 11
46357: PUSH
46358: LD_INT 3
46360: ARRAY
46361: GREATEREQUAL
46362: AND
46363: NOT
46364: IFFALSE 46368
// exit ;
46366: GO 46955
// if GetBType ( depot ) = b_depot then
46368: LD_VAR 0 1
46372: PPUSH
46373: CALL_OW 266
46377: PUSH
46378: LD_INT 0
46380: EQUAL
46381: IFFALSE 46393
// dist := 28 else
46383: LD_ADDR_VAR 0 14
46387: PUSH
46388: LD_INT 28
46390: ST_TO_ADDR
46391: GO 46401
// dist := 36 ;
46393: LD_ADDR_VAR 0 14
46397: PUSH
46398: LD_INT 36
46400: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
46401: LD_VAR 0 1
46405: PPUSH
46406: LD_VAR 0 3
46410: PPUSH
46411: LD_VAR 0 4
46415: PPUSH
46416: CALL_OW 297
46420: PUSH
46421: LD_VAR 0 14
46425: GREATER
46426: IFFALSE 46430
// exit ;
46428: GO 46955
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
46430: LD_ADDR_VAR 0 12
46434: PUSH
46435: LD_VAR 0 2
46439: PPUSH
46440: LD_VAR 0 3
46444: PPUSH
46445: LD_VAR 0 4
46449: PPUSH
46450: LD_VAR 0 5
46454: PPUSH
46455: LD_VAR 0 1
46459: PPUSH
46460: CALL_OW 248
46464: PPUSH
46465: LD_INT 0
46467: PPUSH
46468: CALL 46960 0 6
46472: ST_TO_ADDR
// if not hexes then
46473: LD_VAR 0 12
46477: NOT
46478: IFFALSE 46482
// exit ;
46480: GO 46955
// hex := GetHexInfo ( x , y ) ;
46482: LD_ADDR_VAR 0 15
46486: PUSH
46487: LD_VAR 0 3
46491: PPUSH
46492: LD_VAR 0 4
46496: PPUSH
46497: CALL_OW 546
46501: ST_TO_ADDR
// if hex [ 1 ] then
46502: LD_VAR 0 15
46506: PUSH
46507: LD_INT 1
46509: ARRAY
46510: IFFALSE 46514
// exit ;
46512: GO 46955
// height := hex [ 2 ] ;
46514: LD_ADDR_VAR 0 13
46518: PUSH
46519: LD_VAR 0 15
46523: PUSH
46524: LD_INT 2
46526: ARRAY
46527: ST_TO_ADDR
// for i = 1 to hexes do
46528: LD_ADDR_VAR 0 7
46532: PUSH
46533: DOUBLE
46534: LD_INT 1
46536: DEC
46537: ST_TO_ADDR
46538: LD_VAR 0 12
46542: PUSH
46543: FOR_TO
46544: IFFALSE 46874
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
46546: LD_VAR 0 12
46550: PUSH
46551: LD_VAR 0 7
46555: ARRAY
46556: PUSH
46557: LD_INT 1
46559: ARRAY
46560: PPUSH
46561: LD_VAR 0 12
46565: PUSH
46566: LD_VAR 0 7
46570: ARRAY
46571: PUSH
46572: LD_INT 2
46574: ARRAY
46575: PPUSH
46576: CALL_OW 488
46580: NOT
46581: PUSH
46582: LD_VAR 0 12
46586: PUSH
46587: LD_VAR 0 7
46591: ARRAY
46592: PUSH
46593: LD_INT 1
46595: ARRAY
46596: PPUSH
46597: LD_VAR 0 12
46601: PUSH
46602: LD_VAR 0 7
46606: ARRAY
46607: PUSH
46608: LD_INT 2
46610: ARRAY
46611: PPUSH
46612: CALL_OW 428
46616: PUSH
46617: LD_INT 0
46619: GREATER
46620: OR
46621: PUSH
46622: LD_VAR 0 12
46626: PUSH
46627: LD_VAR 0 7
46631: ARRAY
46632: PUSH
46633: LD_INT 1
46635: ARRAY
46636: PPUSH
46637: LD_VAR 0 12
46641: PUSH
46642: LD_VAR 0 7
46646: ARRAY
46647: PUSH
46648: LD_INT 2
46650: ARRAY
46651: PPUSH
46652: CALL_OW 351
46656: OR
46657: IFFALSE 46663
// exit ;
46659: POP
46660: POP
46661: GO 46955
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46663: LD_ADDR_VAR 0 8
46667: PUSH
46668: LD_VAR 0 12
46672: PUSH
46673: LD_VAR 0 7
46677: ARRAY
46678: PUSH
46679: LD_INT 1
46681: ARRAY
46682: PPUSH
46683: LD_VAR 0 12
46687: PUSH
46688: LD_VAR 0 7
46692: ARRAY
46693: PUSH
46694: LD_INT 2
46696: ARRAY
46697: PPUSH
46698: CALL_OW 546
46702: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
46703: LD_VAR 0 8
46707: PUSH
46708: LD_INT 1
46710: ARRAY
46711: PUSH
46712: LD_VAR 0 8
46716: PUSH
46717: LD_INT 2
46719: ARRAY
46720: PUSH
46721: LD_VAR 0 13
46725: PUSH
46726: LD_INT 2
46728: PLUS
46729: GREATER
46730: OR
46731: PUSH
46732: LD_VAR 0 8
46736: PUSH
46737: LD_INT 2
46739: ARRAY
46740: PUSH
46741: LD_VAR 0 13
46745: PUSH
46746: LD_INT 2
46748: MINUS
46749: LESS
46750: OR
46751: PUSH
46752: LD_VAR 0 8
46756: PUSH
46757: LD_INT 3
46759: ARRAY
46760: PUSH
46761: LD_INT 0
46763: PUSH
46764: LD_INT 8
46766: PUSH
46767: LD_INT 9
46769: PUSH
46770: LD_INT 10
46772: PUSH
46773: LD_INT 11
46775: PUSH
46776: LD_INT 12
46778: PUSH
46779: LD_INT 13
46781: PUSH
46782: LD_INT 16
46784: PUSH
46785: LD_INT 17
46787: PUSH
46788: LD_INT 18
46790: PUSH
46791: LD_INT 19
46793: PUSH
46794: LD_INT 20
46796: PUSH
46797: LD_INT 21
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: IN
46815: NOT
46816: OR
46817: PUSH
46818: LD_VAR 0 8
46822: PUSH
46823: LD_INT 5
46825: ARRAY
46826: NOT
46827: OR
46828: PUSH
46829: LD_VAR 0 8
46833: PUSH
46834: LD_INT 6
46836: ARRAY
46837: PUSH
46838: LD_INT 1
46840: PUSH
46841: LD_INT 2
46843: PUSH
46844: LD_INT 7
46846: PUSH
46847: LD_INT 9
46849: PUSH
46850: LD_INT 10
46852: PUSH
46853: LD_INT 11
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: IN
46864: NOT
46865: OR
46866: IFFALSE 46872
// exit ;
46868: POP
46869: POP
46870: GO 46955
// end ;
46872: GO 46543
46874: POP
46875: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46876: LD_VAR 0 9
46880: PPUSH
46881: LD_VAR 0 3
46885: PPUSH
46886: LD_VAR 0 4
46890: PPUSH
46891: LD_INT 20
46893: PPUSH
46894: CALL 38907 0 4
46898: PUSH
46899: LD_INT 4
46901: ARRAY
46902: IFFALSE 46906
// exit ;
46904: GO 46955
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46906: LD_VAR 0 2
46910: PUSH
46911: LD_INT 29
46913: PUSH
46914: LD_INT 30
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: IN
46921: PUSH
46922: LD_VAR 0 3
46926: PPUSH
46927: LD_VAR 0 4
46931: PPUSH
46932: LD_VAR 0 9
46936: PPUSH
46937: CALL_OW 440
46941: NOT
46942: AND
46943: IFFALSE 46947
// exit ;
46945: GO 46955
// result := true ;
46947: LD_ADDR_VAR 0 6
46951: PUSH
46952: LD_INT 1
46954: ST_TO_ADDR
// end ;
46955: LD_VAR 0 6
46959: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46960: LD_INT 0
46962: PPUSH
46963: PPUSH
46964: PPUSH
46965: PPUSH
46966: PPUSH
46967: PPUSH
46968: PPUSH
46969: PPUSH
46970: PPUSH
46971: PPUSH
46972: PPUSH
46973: PPUSH
46974: PPUSH
46975: PPUSH
46976: PPUSH
46977: PPUSH
46978: PPUSH
46979: PPUSH
46980: PPUSH
46981: PPUSH
46982: PPUSH
46983: PPUSH
46984: PPUSH
46985: PPUSH
46986: PPUSH
46987: PPUSH
46988: PPUSH
46989: PPUSH
46990: PPUSH
46991: PPUSH
46992: PPUSH
46993: PPUSH
46994: PPUSH
46995: PPUSH
46996: PPUSH
46997: PPUSH
46998: PPUSH
46999: PPUSH
47000: PPUSH
47001: PPUSH
47002: PPUSH
47003: PPUSH
47004: PPUSH
47005: PPUSH
47006: PPUSH
47007: PPUSH
47008: PPUSH
47009: PPUSH
47010: PPUSH
47011: PPUSH
47012: PPUSH
47013: PPUSH
47014: PPUSH
47015: PPUSH
47016: PPUSH
47017: PPUSH
47018: PPUSH
47019: PPUSH
// result = [ ] ;
47020: LD_ADDR_VAR 0 7
47024: PUSH
47025: EMPTY
47026: ST_TO_ADDR
// temp_list = [ ] ;
47027: LD_ADDR_VAR 0 9
47031: PUSH
47032: EMPTY
47033: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
47034: LD_VAR 0 4
47038: PUSH
47039: LD_INT 0
47041: PUSH
47042: LD_INT 1
47044: PUSH
47045: LD_INT 2
47047: PUSH
47048: LD_INT 3
47050: PUSH
47051: LD_INT 4
47053: PUSH
47054: LD_INT 5
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: IN
47065: NOT
47066: PUSH
47067: LD_VAR 0 1
47071: PUSH
47072: LD_INT 0
47074: PUSH
47075: LD_INT 1
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: IN
47082: PUSH
47083: LD_VAR 0 5
47087: PUSH
47088: LD_INT 1
47090: PUSH
47091: LD_INT 2
47093: PUSH
47094: LD_INT 3
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: LIST
47101: IN
47102: NOT
47103: AND
47104: OR
47105: IFFALSE 47109
// exit ;
47107: GO 65500
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
47109: LD_VAR 0 1
47113: PUSH
47114: LD_INT 6
47116: PUSH
47117: LD_INT 7
47119: PUSH
47120: LD_INT 8
47122: PUSH
47123: LD_INT 13
47125: PUSH
47126: LD_INT 12
47128: PUSH
47129: LD_INT 15
47131: PUSH
47132: LD_INT 11
47134: PUSH
47135: LD_INT 14
47137: PUSH
47138: LD_INT 10
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: IN
47152: IFFALSE 47162
// btype = b_lab ;
47154: LD_ADDR_VAR 0 1
47158: PUSH
47159: LD_INT 6
47161: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
47162: LD_VAR 0 6
47166: PUSH
47167: LD_INT 0
47169: PUSH
47170: LD_INT 1
47172: PUSH
47173: LD_INT 2
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: LIST
47180: IN
47181: NOT
47182: PUSH
47183: LD_VAR 0 1
47187: PUSH
47188: LD_INT 0
47190: PUSH
47191: LD_INT 1
47193: PUSH
47194: LD_INT 2
47196: PUSH
47197: LD_INT 3
47199: PUSH
47200: LD_INT 6
47202: PUSH
47203: LD_INT 36
47205: PUSH
47206: LD_INT 4
47208: PUSH
47209: LD_INT 5
47211: PUSH
47212: LD_INT 31
47214: PUSH
47215: LD_INT 32
47217: PUSH
47218: LD_INT 33
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: IN
47234: NOT
47235: PUSH
47236: LD_VAR 0 6
47240: PUSH
47241: LD_INT 1
47243: EQUAL
47244: AND
47245: OR
47246: PUSH
47247: LD_VAR 0 1
47251: PUSH
47252: LD_INT 2
47254: PUSH
47255: LD_INT 3
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: IN
47262: NOT
47263: PUSH
47264: LD_VAR 0 6
47268: PUSH
47269: LD_INT 2
47271: EQUAL
47272: AND
47273: OR
47274: IFFALSE 47284
// mode = 0 ;
47276: LD_ADDR_VAR 0 6
47280: PUSH
47281: LD_INT 0
47283: ST_TO_ADDR
// case mode of 0 :
47284: LD_VAR 0 6
47288: PUSH
47289: LD_INT 0
47291: DOUBLE
47292: EQUAL
47293: IFTRUE 47297
47295: GO 58750
47297: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47298: LD_ADDR_VAR 0 11
47302: PUSH
47303: LD_INT 0
47305: PUSH
47306: LD_INT 0
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 0
47315: PUSH
47316: LD_INT 1
47318: NEG
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 1
47326: PUSH
47327: LD_INT 0
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 1
47336: PUSH
47337: LD_INT 1
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 0
47346: PUSH
47347: LD_INT 1
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 1
47356: NEG
47357: PUSH
47358: LD_INT 0
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 1
47367: NEG
47368: PUSH
47369: LD_INT 1
47371: NEG
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 1
47379: NEG
47380: PUSH
47381: LD_INT 2
47383: NEG
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 0
47391: PUSH
47392: LD_INT 2
47394: NEG
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 1
47402: PUSH
47403: LD_INT 1
47405: NEG
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 1
47413: PUSH
47414: LD_INT 2
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 0
47423: PUSH
47424: LD_INT 2
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 1
47433: NEG
47434: PUSH
47435: LD_INT 1
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 1
47444: PUSH
47445: LD_INT 3
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 0
47454: PUSH
47455: LD_INT 3
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 1
47464: NEG
47465: PUSH
47466: LD_INT 2
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47491: LD_ADDR_VAR 0 12
47495: PUSH
47496: LD_INT 0
47498: PUSH
47499: LD_INT 0
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 0
47508: PUSH
47509: LD_INT 1
47511: NEG
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 1
47519: PUSH
47520: LD_INT 0
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 1
47529: PUSH
47530: LD_INT 1
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 0
47539: PUSH
47540: LD_INT 1
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 1
47549: NEG
47550: PUSH
47551: LD_INT 0
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 1
47560: NEG
47561: PUSH
47562: LD_INT 1
47564: NEG
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 1
47572: PUSH
47573: LD_INT 1
47575: NEG
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 2
47583: PUSH
47584: LD_INT 0
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 2
47593: PUSH
47594: LD_INT 1
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 1
47603: NEG
47604: PUSH
47605: LD_INT 1
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 2
47614: NEG
47615: PUSH
47616: LD_INT 0
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 2
47625: NEG
47626: PUSH
47627: LD_INT 1
47629: NEG
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 2
47637: NEG
47638: PUSH
47639: LD_INT 1
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 3
47648: NEG
47649: PUSH
47650: LD_INT 0
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 3
47659: NEG
47660: PUSH
47661: LD_INT 1
47663: NEG
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47687: LD_ADDR_VAR 0 13
47691: PUSH
47692: LD_INT 0
47694: PUSH
47695: LD_INT 0
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 0
47704: PUSH
47705: LD_INT 1
47707: NEG
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 1
47715: PUSH
47716: LD_INT 0
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 1
47725: PUSH
47726: LD_INT 1
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 0
47735: PUSH
47736: LD_INT 1
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 1
47745: NEG
47746: PUSH
47747: LD_INT 0
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 1
47756: NEG
47757: PUSH
47758: LD_INT 1
47760: NEG
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 1
47768: NEG
47769: PUSH
47770: LD_INT 2
47772: NEG
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 2
47780: PUSH
47781: LD_INT 1
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 2
47790: PUSH
47791: LD_INT 2
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 1
47800: PUSH
47801: LD_INT 2
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 2
47810: NEG
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 2
47822: NEG
47823: PUSH
47824: LD_INT 2
47826: NEG
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 2
47834: NEG
47835: PUSH
47836: LD_INT 3
47838: NEG
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 3
47846: NEG
47847: PUSH
47848: LD_INT 2
47850: NEG
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 3
47858: NEG
47859: PUSH
47860: LD_INT 3
47862: NEG
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47886: LD_ADDR_VAR 0 14
47890: PUSH
47891: LD_INT 0
47893: PUSH
47894: LD_INT 0
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 0
47903: PUSH
47904: LD_INT 1
47906: NEG
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 1
47914: PUSH
47915: LD_INT 0
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 1
47924: PUSH
47925: LD_INT 1
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 0
47934: PUSH
47935: LD_INT 1
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 1
47944: NEG
47945: PUSH
47946: LD_INT 0
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 1
47955: NEG
47956: PUSH
47957: LD_INT 1
47959: NEG
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 1
47967: NEG
47968: PUSH
47969: LD_INT 2
47971: NEG
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 0
47979: PUSH
47980: LD_INT 2
47982: NEG
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 1
47990: PUSH
47991: LD_INT 1
47993: NEG
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 1
48001: PUSH
48002: LD_INT 2
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 0
48011: PUSH
48012: LD_INT 2
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 1
48021: NEG
48022: PUSH
48023: LD_INT 1
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 1
48032: NEG
48033: PUSH
48034: LD_INT 3
48036: NEG
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 0
48044: PUSH
48045: LD_INT 3
48047: NEG
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 1
48055: PUSH
48056: LD_INT 2
48058: NEG
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48082: LD_ADDR_VAR 0 15
48086: PUSH
48087: LD_INT 0
48089: PUSH
48090: LD_INT 0
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 0
48099: PUSH
48100: LD_INT 1
48102: NEG
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 1
48110: PUSH
48111: LD_INT 0
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 1
48120: PUSH
48121: LD_INT 1
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 0
48130: PUSH
48131: LD_INT 1
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 1
48140: NEG
48141: PUSH
48142: LD_INT 0
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 1
48151: NEG
48152: PUSH
48153: LD_INT 1
48155: NEG
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 1
48163: PUSH
48164: LD_INT 1
48166: NEG
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 2
48174: PUSH
48175: LD_INT 0
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 2
48184: PUSH
48185: LD_INT 1
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 1
48194: NEG
48195: PUSH
48196: LD_INT 1
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 2
48205: NEG
48206: PUSH
48207: LD_INT 0
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 2
48216: NEG
48217: PUSH
48218: LD_INT 1
48220: NEG
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 2
48228: PUSH
48229: LD_INT 1
48231: NEG
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 3
48239: PUSH
48240: LD_INT 0
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 3
48249: PUSH
48250: LD_INT 1
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48275: LD_ADDR_VAR 0 16
48279: PUSH
48280: LD_INT 0
48282: PUSH
48283: LD_INT 0
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 0
48292: PUSH
48293: LD_INT 1
48295: NEG
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 1
48303: PUSH
48304: LD_INT 0
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 1
48313: PUSH
48314: LD_INT 1
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 0
48323: PUSH
48324: LD_INT 1
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 1
48333: NEG
48334: PUSH
48335: LD_INT 0
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 1
48344: NEG
48345: PUSH
48346: LD_INT 1
48348: NEG
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 1
48356: NEG
48357: PUSH
48358: LD_INT 2
48360: NEG
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 2
48368: PUSH
48369: LD_INT 1
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 2
48378: PUSH
48379: LD_INT 2
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 1
48388: PUSH
48389: LD_INT 2
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 2
48398: NEG
48399: PUSH
48400: LD_INT 1
48402: NEG
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 2
48410: NEG
48411: PUSH
48412: LD_INT 2
48414: NEG
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 3
48422: PUSH
48423: LD_INT 2
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 3
48432: PUSH
48433: LD_INT 3
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 2
48442: PUSH
48443: LD_INT 3
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48468: LD_ADDR_VAR 0 17
48472: PUSH
48473: LD_INT 0
48475: PUSH
48476: LD_INT 0
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 0
48485: PUSH
48486: LD_INT 1
48488: NEG
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 1
48496: PUSH
48497: LD_INT 0
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 1
48506: PUSH
48507: LD_INT 1
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 0
48516: PUSH
48517: LD_INT 1
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 1
48526: NEG
48527: PUSH
48528: LD_INT 0
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 1
48537: NEG
48538: PUSH
48539: LD_INT 1
48541: NEG
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 1
48549: NEG
48550: PUSH
48551: LD_INT 2
48553: NEG
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 0
48561: PUSH
48562: LD_INT 2
48564: NEG
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 1
48572: PUSH
48573: LD_INT 1
48575: NEG
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 2
48583: PUSH
48584: LD_INT 0
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 2
48593: PUSH
48594: LD_INT 1
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 2
48603: PUSH
48604: LD_INT 2
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 1
48613: PUSH
48614: LD_INT 2
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 0
48623: PUSH
48624: LD_INT 2
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 1
48633: NEG
48634: PUSH
48635: LD_INT 1
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 2
48644: NEG
48645: PUSH
48646: LD_INT 0
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 2
48655: NEG
48656: PUSH
48657: LD_INT 1
48659: NEG
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 2
48667: NEG
48668: PUSH
48669: LD_INT 2
48671: NEG
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48698: LD_ADDR_VAR 0 18
48702: PUSH
48703: LD_INT 0
48705: PUSH
48706: LD_INT 0
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 0
48715: PUSH
48716: LD_INT 1
48718: NEG
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 1
48726: PUSH
48727: LD_INT 0
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 1
48736: PUSH
48737: LD_INT 1
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 0
48746: PUSH
48747: LD_INT 1
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 1
48756: NEG
48757: PUSH
48758: LD_INT 0
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 1
48767: NEG
48768: PUSH
48769: LD_INT 1
48771: NEG
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 1
48779: NEG
48780: PUSH
48781: LD_INT 2
48783: NEG
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 0
48791: PUSH
48792: LD_INT 2
48794: NEG
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 1
48802: PUSH
48803: LD_INT 1
48805: NEG
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 2
48813: PUSH
48814: LD_INT 0
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 2
48823: PUSH
48824: LD_INT 1
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 2
48833: PUSH
48834: LD_INT 2
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 1
48843: PUSH
48844: LD_INT 2
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 0
48853: PUSH
48854: LD_INT 2
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 1
48863: NEG
48864: PUSH
48865: LD_INT 1
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 2
48874: NEG
48875: PUSH
48876: LD_INT 0
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 2
48885: NEG
48886: PUSH
48887: LD_INT 1
48889: NEG
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 2
48897: NEG
48898: PUSH
48899: LD_INT 2
48901: NEG
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48928: LD_ADDR_VAR 0 19
48932: PUSH
48933: LD_INT 0
48935: PUSH
48936: LD_INT 0
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 0
48945: PUSH
48946: LD_INT 1
48948: NEG
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 1
48956: PUSH
48957: LD_INT 0
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 1
48966: PUSH
48967: LD_INT 1
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 0
48976: PUSH
48977: LD_INT 1
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 1
48986: NEG
48987: PUSH
48988: LD_INT 0
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 1
48997: NEG
48998: PUSH
48999: LD_INT 1
49001: NEG
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 1
49009: NEG
49010: PUSH
49011: LD_INT 2
49013: NEG
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 0
49021: PUSH
49022: LD_INT 2
49024: NEG
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 1
49032: PUSH
49033: LD_INT 1
49035: NEG
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 2
49043: PUSH
49044: LD_INT 0
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 2
49053: PUSH
49054: LD_INT 1
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 2
49063: PUSH
49064: LD_INT 2
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 1
49073: PUSH
49074: LD_INT 2
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 0
49083: PUSH
49084: LD_INT 2
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 1
49093: NEG
49094: PUSH
49095: LD_INT 1
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 2
49104: NEG
49105: PUSH
49106: LD_INT 0
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 2
49115: NEG
49116: PUSH
49117: LD_INT 1
49119: NEG
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 2
49127: NEG
49128: PUSH
49129: LD_INT 2
49131: NEG
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49158: LD_ADDR_VAR 0 20
49162: PUSH
49163: LD_INT 0
49165: PUSH
49166: LD_INT 0
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 0
49175: PUSH
49176: LD_INT 1
49178: NEG
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 1
49186: PUSH
49187: LD_INT 0
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 1
49196: PUSH
49197: LD_INT 1
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 0
49206: PUSH
49207: LD_INT 1
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 1
49216: NEG
49217: PUSH
49218: LD_INT 0
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 1
49227: NEG
49228: PUSH
49229: LD_INT 1
49231: NEG
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 1
49239: NEG
49240: PUSH
49241: LD_INT 2
49243: NEG
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 0
49251: PUSH
49252: LD_INT 2
49254: NEG
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 1
49262: PUSH
49263: LD_INT 1
49265: NEG
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 2
49273: PUSH
49274: LD_INT 0
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 2
49283: PUSH
49284: LD_INT 1
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 2
49293: PUSH
49294: LD_INT 2
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 1
49303: PUSH
49304: LD_INT 2
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 0
49313: PUSH
49314: LD_INT 2
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 1
49323: NEG
49324: PUSH
49325: LD_INT 1
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 2
49334: NEG
49335: PUSH
49336: LD_INT 0
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 2
49345: NEG
49346: PUSH
49347: LD_INT 1
49349: NEG
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 2
49357: NEG
49358: PUSH
49359: LD_INT 2
49361: NEG
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49388: LD_ADDR_VAR 0 21
49392: PUSH
49393: LD_INT 0
49395: PUSH
49396: LD_INT 0
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 0
49405: PUSH
49406: LD_INT 1
49408: NEG
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 1
49416: PUSH
49417: LD_INT 0
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 1
49426: PUSH
49427: LD_INT 1
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 0
49436: PUSH
49437: LD_INT 1
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 1
49446: NEG
49447: PUSH
49448: LD_INT 0
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 1
49457: NEG
49458: PUSH
49459: LD_INT 1
49461: NEG
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 1
49469: NEG
49470: PUSH
49471: LD_INT 2
49473: NEG
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 0
49481: PUSH
49482: LD_INT 2
49484: NEG
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 1
49492: PUSH
49493: LD_INT 1
49495: NEG
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 2
49503: PUSH
49504: LD_INT 0
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 2
49513: PUSH
49514: LD_INT 1
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 2
49523: PUSH
49524: LD_INT 2
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 1
49533: PUSH
49534: LD_INT 2
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 0
49543: PUSH
49544: LD_INT 2
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 1
49553: NEG
49554: PUSH
49555: LD_INT 1
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 2
49564: NEG
49565: PUSH
49566: LD_INT 0
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 2
49575: NEG
49576: PUSH
49577: LD_INT 1
49579: NEG
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 2
49587: NEG
49588: PUSH
49589: LD_INT 2
49591: NEG
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49618: LD_ADDR_VAR 0 22
49622: PUSH
49623: LD_INT 0
49625: PUSH
49626: LD_INT 0
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 0
49635: PUSH
49636: LD_INT 1
49638: NEG
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 1
49646: PUSH
49647: LD_INT 0
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 1
49656: PUSH
49657: LD_INT 1
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 0
49666: PUSH
49667: LD_INT 1
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 1
49676: NEG
49677: PUSH
49678: LD_INT 0
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 1
49687: NEG
49688: PUSH
49689: LD_INT 1
49691: NEG
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 1
49699: NEG
49700: PUSH
49701: LD_INT 2
49703: NEG
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 0
49711: PUSH
49712: LD_INT 2
49714: NEG
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 1
49722: PUSH
49723: LD_INT 1
49725: NEG
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 2
49733: PUSH
49734: LD_INT 0
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 2
49743: PUSH
49744: LD_INT 1
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 2
49753: PUSH
49754: LD_INT 2
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 1
49763: PUSH
49764: LD_INT 2
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 0
49773: PUSH
49774: LD_INT 2
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 1
49783: NEG
49784: PUSH
49785: LD_INT 1
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 2
49794: NEG
49795: PUSH
49796: LD_INT 0
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 2
49805: NEG
49806: PUSH
49807: LD_INT 1
49809: NEG
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 2
49817: NEG
49818: PUSH
49819: LD_INT 2
49821: NEG
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49848: LD_ADDR_VAR 0 23
49852: PUSH
49853: LD_INT 0
49855: PUSH
49856: LD_INT 0
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 0
49865: PUSH
49866: LD_INT 1
49868: NEG
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 1
49876: PUSH
49877: LD_INT 0
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 1
49886: PUSH
49887: LD_INT 1
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 0
49896: PUSH
49897: LD_INT 1
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 1
49906: NEG
49907: PUSH
49908: LD_INT 0
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 1
49917: NEG
49918: PUSH
49919: LD_INT 1
49921: NEG
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 1
49929: NEG
49930: PUSH
49931: LD_INT 2
49933: NEG
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 0
49941: PUSH
49942: LD_INT 2
49944: NEG
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 1
49952: PUSH
49953: LD_INT 1
49955: NEG
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 2
49963: PUSH
49964: LD_INT 0
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 2
49973: PUSH
49974: LD_INT 1
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 2
49983: PUSH
49984: LD_INT 2
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 1
49993: PUSH
49994: LD_INT 2
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 0
50003: PUSH
50004: LD_INT 2
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 1
50013: NEG
50014: PUSH
50015: LD_INT 1
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 2
50024: NEG
50025: PUSH
50026: LD_INT 0
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 2
50035: NEG
50036: PUSH
50037: LD_INT 1
50039: NEG
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 2
50047: NEG
50048: PUSH
50049: LD_INT 2
50051: NEG
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 2
50059: NEG
50060: PUSH
50061: LD_INT 3
50063: NEG
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 1
50071: NEG
50072: PUSH
50073: LD_INT 3
50075: NEG
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 1
50083: PUSH
50084: LD_INT 2
50086: NEG
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 2
50094: PUSH
50095: LD_INT 1
50097: NEG
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
50128: LD_ADDR_VAR 0 24
50132: PUSH
50133: LD_INT 0
50135: PUSH
50136: LD_INT 0
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 0
50145: PUSH
50146: LD_INT 1
50148: NEG
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 1
50156: PUSH
50157: LD_INT 0
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 1
50166: PUSH
50167: LD_INT 1
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 0
50176: PUSH
50177: LD_INT 1
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 1
50186: NEG
50187: PUSH
50188: LD_INT 0
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 1
50197: NEG
50198: PUSH
50199: LD_INT 1
50201: NEG
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 1
50209: NEG
50210: PUSH
50211: LD_INT 2
50213: NEG
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 0
50221: PUSH
50222: LD_INT 2
50224: NEG
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 1
50232: PUSH
50233: LD_INT 1
50235: NEG
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 2
50243: PUSH
50244: LD_INT 0
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 2
50253: PUSH
50254: LD_INT 1
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 2
50263: PUSH
50264: LD_INT 2
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 1
50273: PUSH
50274: LD_INT 2
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 0
50283: PUSH
50284: LD_INT 2
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 1
50293: NEG
50294: PUSH
50295: LD_INT 1
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 2
50304: NEG
50305: PUSH
50306: LD_INT 0
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 2
50315: NEG
50316: PUSH
50317: LD_INT 1
50319: NEG
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 2
50327: NEG
50328: PUSH
50329: LD_INT 2
50331: NEG
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 1
50339: PUSH
50340: LD_INT 2
50342: NEG
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 2
50350: PUSH
50351: LD_INT 1
50353: NEG
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 3
50361: PUSH
50362: LD_INT 1
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 3
50371: PUSH
50372: LD_INT 2
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
50404: LD_ADDR_VAR 0 25
50408: PUSH
50409: LD_INT 0
50411: PUSH
50412: LD_INT 0
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 0
50421: PUSH
50422: LD_INT 1
50424: NEG
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 1
50432: PUSH
50433: LD_INT 0
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 1
50442: PUSH
50443: LD_INT 1
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 0
50452: PUSH
50453: LD_INT 1
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 1
50462: NEG
50463: PUSH
50464: LD_INT 0
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 1
50473: NEG
50474: PUSH
50475: LD_INT 1
50477: NEG
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 1
50485: NEG
50486: PUSH
50487: LD_INT 2
50489: NEG
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 0
50497: PUSH
50498: LD_INT 2
50500: NEG
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 1
50508: PUSH
50509: LD_INT 1
50511: NEG
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 2
50519: PUSH
50520: LD_INT 0
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 2
50529: PUSH
50530: LD_INT 1
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 2
50539: PUSH
50540: LD_INT 2
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 1
50549: PUSH
50550: LD_INT 2
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 0
50559: PUSH
50560: LD_INT 2
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 1
50569: NEG
50570: PUSH
50571: LD_INT 1
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 2
50580: NEG
50581: PUSH
50582: LD_INT 0
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 2
50591: NEG
50592: PUSH
50593: LD_INT 1
50595: NEG
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 2
50603: NEG
50604: PUSH
50605: LD_INT 2
50607: NEG
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 3
50615: PUSH
50616: LD_INT 1
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 3
50625: PUSH
50626: LD_INT 2
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 2
50635: PUSH
50636: LD_INT 3
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 1
50645: PUSH
50646: LD_INT 3
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50678: LD_ADDR_VAR 0 26
50682: PUSH
50683: LD_INT 0
50685: PUSH
50686: LD_INT 0
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 0
50695: PUSH
50696: LD_INT 1
50698: NEG
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 1
50706: PUSH
50707: LD_INT 0
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 1
50716: PUSH
50717: LD_INT 1
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 0
50726: PUSH
50727: LD_INT 1
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 1
50736: NEG
50737: PUSH
50738: LD_INT 0
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 1
50747: NEG
50748: PUSH
50749: LD_INT 1
50751: NEG
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 1
50759: NEG
50760: PUSH
50761: LD_INT 2
50763: NEG
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 0
50771: PUSH
50772: LD_INT 2
50774: NEG
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 1
50782: PUSH
50783: LD_INT 1
50785: NEG
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 2
50793: PUSH
50794: LD_INT 0
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 2
50803: PUSH
50804: LD_INT 1
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 2
50813: PUSH
50814: LD_INT 2
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 1
50823: PUSH
50824: LD_INT 2
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 0
50833: PUSH
50834: LD_INT 2
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 1
50843: NEG
50844: PUSH
50845: LD_INT 1
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 2
50854: NEG
50855: PUSH
50856: LD_INT 0
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 2
50865: NEG
50866: PUSH
50867: LD_INT 1
50869: NEG
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 2
50877: NEG
50878: PUSH
50879: LD_INT 2
50881: NEG
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 2
50889: PUSH
50890: LD_INT 3
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 1
50899: PUSH
50900: LD_INT 3
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 1
50909: NEG
50910: PUSH
50911: LD_INT 2
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 2
50920: NEG
50921: PUSH
50922: LD_INT 1
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50954: LD_ADDR_VAR 0 27
50958: PUSH
50959: LD_INT 0
50961: PUSH
50962: LD_INT 0
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 0
50971: PUSH
50972: LD_INT 1
50974: NEG
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 1
50982: PUSH
50983: LD_INT 0
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 1
50992: PUSH
50993: LD_INT 1
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 0
51002: PUSH
51003: LD_INT 1
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 1
51012: NEG
51013: PUSH
51014: LD_INT 0
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 1
51023: NEG
51024: PUSH
51025: LD_INT 1
51027: NEG
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 1
51035: NEG
51036: PUSH
51037: LD_INT 2
51039: NEG
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 0
51047: PUSH
51048: LD_INT 2
51050: NEG
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 1
51058: PUSH
51059: LD_INT 1
51061: NEG
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 2
51069: PUSH
51070: LD_INT 0
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 2
51079: PUSH
51080: LD_INT 1
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 2
51089: PUSH
51090: LD_INT 2
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 1
51099: PUSH
51100: LD_INT 2
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 0
51109: PUSH
51110: LD_INT 2
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 1
51119: NEG
51120: PUSH
51121: LD_INT 1
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 2
51130: NEG
51131: PUSH
51132: LD_INT 0
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 2
51141: NEG
51142: PUSH
51143: LD_INT 1
51145: NEG
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 2
51153: NEG
51154: PUSH
51155: LD_INT 2
51157: NEG
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 1
51165: NEG
51166: PUSH
51167: LD_INT 2
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 2
51176: NEG
51177: PUSH
51178: LD_INT 1
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 3
51187: NEG
51188: PUSH
51189: LD_INT 1
51191: NEG
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 3
51199: NEG
51200: PUSH
51201: LD_INT 2
51203: NEG
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51234: LD_ADDR_VAR 0 28
51238: PUSH
51239: LD_INT 0
51241: PUSH
51242: LD_INT 0
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 0
51251: PUSH
51252: LD_INT 1
51254: NEG
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 1
51262: PUSH
51263: LD_INT 0
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 1
51272: PUSH
51273: LD_INT 1
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 0
51282: PUSH
51283: LD_INT 1
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 1
51292: NEG
51293: PUSH
51294: LD_INT 0
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 1
51303: NEG
51304: PUSH
51305: LD_INT 1
51307: NEG
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 1
51315: NEG
51316: PUSH
51317: LD_INT 2
51319: NEG
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: LD_INT 2
51330: NEG
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 1
51338: PUSH
51339: LD_INT 1
51341: NEG
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 2
51349: PUSH
51350: LD_INT 0
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 2
51359: PUSH
51360: LD_INT 1
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 2
51369: PUSH
51370: LD_INT 2
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 1
51379: PUSH
51380: LD_INT 2
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 0
51389: PUSH
51390: LD_INT 2
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 1
51399: NEG
51400: PUSH
51401: LD_INT 1
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 2
51410: NEG
51411: PUSH
51412: LD_INT 0
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 2
51421: NEG
51422: PUSH
51423: LD_INT 1
51425: NEG
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 2
51433: NEG
51434: PUSH
51435: LD_INT 2
51437: NEG
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 2
51445: NEG
51446: PUSH
51447: LD_INT 3
51449: NEG
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 1
51457: NEG
51458: PUSH
51459: LD_INT 3
51461: NEG
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 3
51469: NEG
51470: PUSH
51471: LD_INT 1
51473: NEG
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 3
51481: NEG
51482: PUSH
51483: LD_INT 2
51485: NEG
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51516: LD_ADDR_VAR 0 29
51520: PUSH
51521: LD_INT 0
51523: PUSH
51524: LD_INT 0
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 0
51533: PUSH
51534: LD_INT 1
51536: NEG
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 1
51544: PUSH
51545: LD_INT 0
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 1
51554: PUSH
51555: LD_INT 1
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 0
51564: PUSH
51565: LD_INT 1
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 1
51574: NEG
51575: PUSH
51576: LD_INT 0
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 1
51585: NEG
51586: PUSH
51587: LD_INT 1
51589: NEG
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 1
51597: NEG
51598: PUSH
51599: LD_INT 2
51601: NEG
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 0
51609: PUSH
51610: LD_INT 2
51612: NEG
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 1
51620: PUSH
51621: LD_INT 1
51623: NEG
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 2
51631: PUSH
51632: LD_INT 0
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 2
51641: PUSH
51642: LD_INT 1
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 1
51651: PUSH
51652: LD_INT 2
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 0
51661: PUSH
51662: LD_INT 2
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 1
51671: NEG
51672: PUSH
51673: LD_INT 1
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 2
51682: NEG
51683: PUSH
51684: LD_INT 1
51686: NEG
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 2
51694: NEG
51695: PUSH
51696: LD_INT 2
51698: NEG
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 2
51706: NEG
51707: PUSH
51708: LD_INT 3
51710: NEG
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 2
51718: PUSH
51719: LD_INT 1
51721: NEG
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 3
51729: PUSH
51730: LD_INT 1
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 1
51739: PUSH
51740: LD_INT 3
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 1
51749: NEG
51750: PUSH
51751: LD_INT 2
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 3
51760: NEG
51761: PUSH
51762: LD_INT 2
51764: NEG
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51795: LD_ADDR_VAR 0 30
51799: PUSH
51800: LD_INT 0
51802: PUSH
51803: LD_INT 0
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 0
51812: PUSH
51813: LD_INT 1
51815: NEG
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 1
51823: PUSH
51824: LD_INT 0
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 1
51833: PUSH
51834: LD_INT 1
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 0
51843: PUSH
51844: LD_INT 1
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 1
51853: NEG
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 1
51864: NEG
51865: PUSH
51866: LD_INT 1
51868: NEG
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 1
51876: NEG
51877: PUSH
51878: LD_INT 2
51880: NEG
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 0
51888: PUSH
51889: LD_INT 2
51891: NEG
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 1
51899: PUSH
51900: LD_INT 1
51902: NEG
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 2
51910: PUSH
51911: LD_INT 0
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 2
51920: PUSH
51921: LD_INT 1
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 2
51930: PUSH
51931: LD_INT 2
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 1
51940: PUSH
51941: LD_INT 2
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 1
51950: NEG
51951: PUSH
51952: LD_INT 1
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 2
51961: NEG
51962: PUSH
51963: LD_INT 0
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 2
51972: NEG
51973: PUSH
51974: LD_INT 1
51976: NEG
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 1
51984: NEG
51985: PUSH
51986: LD_INT 3
51988: NEG
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 1
51996: PUSH
51997: LD_INT 2
51999: NEG
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 3
52007: PUSH
52008: LD_INT 2
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 2
52017: PUSH
52018: LD_INT 3
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 2
52027: NEG
52028: PUSH
52029: LD_INT 1
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 3
52038: NEG
52039: PUSH
52040: LD_INT 1
52042: NEG
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52073: LD_ADDR_VAR 0 31
52077: PUSH
52078: LD_INT 0
52080: PUSH
52081: LD_INT 0
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 0
52090: PUSH
52091: LD_INT 1
52093: NEG
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 1
52101: PUSH
52102: LD_INT 0
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 1
52111: PUSH
52112: LD_INT 1
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 0
52121: PUSH
52122: LD_INT 1
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 1
52131: NEG
52132: PUSH
52133: LD_INT 0
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 1
52142: NEG
52143: PUSH
52144: LD_INT 1
52146: NEG
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 1
52154: NEG
52155: PUSH
52156: LD_INT 2
52158: NEG
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 1
52166: PUSH
52167: LD_INT 1
52169: NEG
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 2
52177: PUSH
52178: LD_INT 0
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 2
52187: PUSH
52188: LD_INT 1
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 2
52197: PUSH
52198: LD_INT 2
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 1
52207: PUSH
52208: LD_INT 2
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 0
52217: PUSH
52218: LD_INT 2
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 1
52227: NEG
52228: PUSH
52229: LD_INT 1
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 2
52238: NEG
52239: PUSH
52240: LD_INT 1
52242: NEG
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 2
52250: NEG
52251: PUSH
52252: LD_INT 2
52254: NEG
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 2
52262: NEG
52263: PUSH
52264: LD_INT 3
52266: NEG
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 2
52274: PUSH
52275: LD_INT 1
52277: NEG
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 3
52285: PUSH
52286: LD_INT 1
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 1
52295: PUSH
52296: LD_INT 3
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 1
52305: NEG
52306: PUSH
52307: LD_INT 2
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 3
52316: NEG
52317: PUSH
52318: LD_INT 2
52320: NEG
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52351: LD_ADDR_VAR 0 32
52355: PUSH
52356: LD_INT 0
52358: PUSH
52359: LD_INT 0
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 0
52368: PUSH
52369: LD_INT 1
52371: NEG
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 1
52379: PUSH
52380: LD_INT 0
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 1
52389: PUSH
52390: LD_INT 1
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 0
52399: PUSH
52400: LD_INT 1
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 1
52409: NEG
52410: PUSH
52411: LD_INT 0
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 1
52420: NEG
52421: PUSH
52422: LD_INT 1
52424: NEG
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 1
52432: NEG
52433: PUSH
52434: LD_INT 2
52436: NEG
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 0
52444: PUSH
52445: LD_INT 2
52447: NEG
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 1
52455: PUSH
52456: LD_INT 1
52458: NEG
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 2
52466: PUSH
52467: LD_INT 1
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 2
52476: PUSH
52477: LD_INT 2
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 1
52486: PUSH
52487: LD_INT 2
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 0
52496: PUSH
52497: LD_INT 2
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: LD_INT 1
52506: NEG
52507: PUSH
52508: LD_INT 1
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 2
52517: NEG
52518: PUSH
52519: LD_INT 0
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 2
52528: NEG
52529: PUSH
52530: LD_INT 1
52532: NEG
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 1
52540: NEG
52541: PUSH
52542: LD_INT 3
52544: NEG
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 1
52552: PUSH
52553: LD_INT 2
52555: NEG
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 3
52563: PUSH
52564: LD_INT 2
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 2
52573: PUSH
52574: LD_INT 3
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 2
52583: NEG
52584: PUSH
52585: LD_INT 1
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 3
52594: NEG
52595: PUSH
52596: LD_INT 1
52598: NEG
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52629: LD_ADDR_VAR 0 33
52633: PUSH
52634: LD_INT 0
52636: PUSH
52637: LD_INT 0
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 0
52646: PUSH
52647: LD_INT 1
52649: NEG
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 1
52657: PUSH
52658: LD_INT 0
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 1
52667: PUSH
52668: LD_INT 1
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 0
52677: PUSH
52678: LD_INT 1
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 1
52687: NEG
52688: PUSH
52689: LD_INT 0
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 1
52698: NEG
52699: PUSH
52700: LD_INT 1
52702: NEG
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 1
52710: NEG
52711: PUSH
52712: LD_INT 2
52714: NEG
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 1
52722: PUSH
52723: LD_INT 1
52725: NEG
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 2
52733: PUSH
52734: LD_INT 0
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 2
52743: PUSH
52744: LD_INT 1
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 1
52753: PUSH
52754: LD_INT 2
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 0
52763: PUSH
52764: LD_INT 2
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 1
52773: NEG
52774: PUSH
52775: LD_INT 1
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 2
52784: NEG
52785: PUSH
52786: LD_INT 0
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 2
52795: NEG
52796: PUSH
52797: LD_INT 1
52799: NEG
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 2
52807: NEG
52808: PUSH
52809: LD_INT 2
52811: NEG
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 2
52819: NEG
52820: PUSH
52821: LD_INT 3
52823: NEG
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 2
52831: PUSH
52832: LD_INT 1
52834: NEG
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 3
52842: PUSH
52843: LD_INT 1
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 1
52852: PUSH
52853: LD_INT 3
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 1
52862: NEG
52863: PUSH
52864: LD_INT 2
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 3
52873: NEG
52874: PUSH
52875: LD_INT 2
52877: NEG
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52908: LD_ADDR_VAR 0 34
52912: PUSH
52913: LD_INT 0
52915: PUSH
52916: LD_INT 0
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 0
52925: PUSH
52926: LD_INT 1
52928: NEG
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 1
52936: PUSH
52937: LD_INT 0
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 1
52946: PUSH
52947: LD_INT 1
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 0
52956: PUSH
52957: LD_INT 1
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 1
52966: NEG
52967: PUSH
52968: LD_INT 0
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 1
52977: NEG
52978: PUSH
52979: LD_INT 1
52981: NEG
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 1
52989: NEG
52990: PUSH
52991: LD_INT 2
52993: NEG
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 0
53001: PUSH
53002: LD_INT 2
53004: NEG
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 1
53012: PUSH
53013: LD_INT 1
53015: NEG
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 2
53023: PUSH
53024: LD_INT 1
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 2
53033: PUSH
53034: LD_INT 2
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 1
53043: PUSH
53044: LD_INT 2
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 1
53053: NEG
53054: PUSH
53055: LD_INT 1
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 2
53064: NEG
53065: PUSH
53066: LD_INT 0
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 2
53075: NEG
53076: PUSH
53077: LD_INT 1
53079: NEG
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 2
53087: NEG
53088: PUSH
53089: LD_INT 2
53091: NEG
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 1
53099: NEG
53100: PUSH
53101: LD_INT 3
53103: NEG
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 1
53111: PUSH
53112: LD_INT 2
53114: NEG
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 3
53122: PUSH
53123: LD_INT 2
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 2
53132: PUSH
53133: LD_INT 3
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 2
53142: NEG
53143: PUSH
53144: LD_INT 1
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 3
53153: NEG
53154: PUSH
53155: LD_INT 1
53157: NEG
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53188: LD_ADDR_VAR 0 35
53192: PUSH
53193: LD_INT 0
53195: PUSH
53196: LD_INT 0
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 0
53205: PUSH
53206: LD_INT 1
53208: NEG
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 1
53216: PUSH
53217: LD_INT 0
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 1
53226: PUSH
53227: LD_INT 1
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 0
53236: PUSH
53237: LD_INT 1
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 1
53246: NEG
53247: PUSH
53248: LD_INT 0
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 1
53257: NEG
53258: PUSH
53259: LD_INT 1
53261: NEG
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 2
53269: PUSH
53270: LD_INT 1
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 2
53279: NEG
53280: PUSH
53281: LD_INT 1
53283: NEG
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53300: LD_ADDR_VAR 0 36
53304: PUSH
53305: LD_INT 0
53307: PUSH
53308: LD_INT 0
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 0
53317: PUSH
53318: LD_INT 1
53320: NEG
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 1
53328: PUSH
53329: LD_INT 0
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 1
53338: PUSH
53339: LD_INT 1
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 0
53348: PUSH
53349: LD_INT 1
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 1
53358: NEG
53359: PUSH
53360: LD_INT 0
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 1
53369: NEG
53370: PUSH
53371: LD_INT 1
53373: NEG
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 1
53381: NEG
53382: PUSH
53383: LD_INT 2
53385: NEG
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 1
53393: PUSH
53394: LD_INT 2
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53412: LD_ADDR_VAR 0 37
53416: PUSH
53417: LD_INT 0
53419: PUSH
53420: LD_INT 0
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 0
53429: PUSH
53430: LD_INT 1
53432: NEG
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 1
53440: PUSH
53441: LD_INT 0
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 1
53450: PUSH
53451: LD_INT 1
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 0
53460: PUSH
53461: LD_INT 1
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 1
53470: NEG
53471: PUSH
53472: LD_INT 0
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 1
53481: NEG
53482: PUSH
53483: LD_INT 1
53485: NEG
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 1
53493: PUSH
53494: LD_INT 1
53496: NEG
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 1
53504: NEG
53505: PUSH
53506: LD_INT 1
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53524: LD_ADDR_VAR 0 38
53528: PUSH
53529: LD_INT 0
53531: PUSH
53532: LD_INT 0
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 0
53541: PUSH
53542: LD_INT 1
53544: NEG
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 1
53552: PUSH
53553: LD_INT 0
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 1
53562: PUSH
53563: LD_INT 1
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 0
53572: PUSH
53573: LD_INT 1
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 1
53582: NEG
53583: PUSH
53584: LD_INT 0
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 1
53593: NEG
53594: PUSH
53595: LD_INT 1
53597: NEG
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 2
53605: PUSH
53606: LD_INT 1
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 2
53615: NEG
53616: PUSH
53617: LD_INT 1
53619: NEG
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53636: LD_ADDR_VAR 0 39
53640: PUSH
53641: LD_INT 0
53643: PUSH
53644: LD_INT 0
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 0
53653: PUSH
53654: LD_INT 1
53656: NEG
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 1
53664: PUSH
53665: LD_INT 0
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 1
53674: PUSH
53675: LD_INT 1
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 0
53684: PUSH
53685: LD_INT 1
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 1
53694: NEG
53695: PUSH
53696: LD_INT 0
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 1
53705: NEG
53706: PUSH
53707: LD_INT 1
53709: NEG
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 1
53717: NEG
53718: PUSH
53719: LD_INT 2
53721: NEG
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 1
53729: PUSH
53730: LD_INT 2
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53748: LD_ADDR_VAR 0 40
53752: PUSH
53753: LD_INT 0
53755: PUSH
53756: LD_INT 0
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 0
53765: PUSH
53766: LD_INT 1
53768: NEG
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 1
53776: PUSH
53777: LD_INT 0
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 1
53786: PUSH
53787: LD_INT 1
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 0
53796: PUSH
53797: LD_INT 1
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 1
53806: NEG
53807: PUSH
53808: LD_INT 0
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 1
53817: NEG
53818: PUSH
53819: LD_INT 1
53821: NEG
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 1
53829: PUSH
53830: LD_INT 1
53832: NEG
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 1
53840: NEG
53841: PUSH
53842: LD_INT 1
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53860: LD_ADDR_VAR 0 41
53864: PUSH
53865: LD_INT 0
53867: PUSH
53868: LD_INT 0
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 0
53877: PUSH
53878: LD_INT 1
53880: NEG
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 1
53888: PUSH
53889: LD_INT 0
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 1
53898: PUSH
53899: LD_INT 1
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 0
53908: PUSH
53909: LD_INT 1
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 1
53918: NEG
53919: PUSH
53920: LD_INT 0
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 1
53929: NEG
53930: PUSH
53931: LD_INT 1
53933: NEG
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 1
53941: NEG
53942: PUSH
53943: LD_INT 2
53945: NEG
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 1
53953: PUSH
53954: LD_INT 1
53956: NEG
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 2
53964: PUSH
53965: LD_INT 0
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 2
53974: PUSH
53975: LD_INT 1
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 2
53984: PUSH
53985: LD_INT 2
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 1
53994: PUSH
53995: LD_INT 2
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 1
54004: NEG
54005: PUSH
54006: LD_INT 1
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 2
54015: NEG
54016: PUSH
54017: LD_INT 0
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 2
54026: NEG
54027: PUSH
54028: LD_INT 1
54030: NEG
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 2
54038: NEG
54039: PUSH
54040: LD_INT 2
54042: NEG
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 2
54050: NEG
54051: PUSH
54052: LD_INT 3
54054: NEG
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 2
54062: PUSH
54063: LD_INT 1
54065: NEG
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 3
54073: PUSH
54074: LD_INT 0
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 3
54083: PUSH
54084: LD_INT 1
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 3
54093: PUSH
54094: LD_INT 2
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 3
54103: PUSH
54104: LD_INT 3
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 2
54113: PUSH
54114: LD_INT 3
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 2
54123: NEG
54124: PUSH
54125: LD_INT 1
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 3
54134: NEG
54135: PUSH
54136: LD_INT 0
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 3
54145: NEG
54146: PUSH
54147: LD_INT 1
54149: NEG
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 3
54157: NEG
54158: PUSH
54159: LD_INT 2
54161: NEG
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 3
54169: NEG
54170: PUSH
54171: LD_INT 3
54173: NEG
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54210: LD_ADDR_VAR 0 42
54214: PUSH
54215: LD_INT 0
54217: PUSH
54218: LD_INT 0
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 0
54227: PUSH
54228: LD_INT 1
54230: NEG
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 1
54238: PUSH
54239: LD_INT 0
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 1
54248: PUSH
54249: LD_INT 1
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 0
54258: PUSH
54259: LD_INT 1
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 1
54268: NEG
54269: PUSH
54270: LD_INT 0
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 1
54279: NEG
54280: PUSH
54281: LD_INT 1
54283: NEG
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 1
54291: NEG
54292: PUSH
54293: LD_INT 2
54295: NEG
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 0
54303: PUSH
54304: LD_INT 2
54306: NEG
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 1
54314: PUSH
54315: LD_INT 1
54317: NEG
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 2
54325: PUSH
54326: LD_INT 1
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 2
54335: PUSH
54336: LD_INT 2
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 1
54345: PUSH
54346: LD_INT 2
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 0
54355: PUSH
54356: LD_INT 2
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 1
54365: NEG
54366: PUSH
54367: LD_INT 1
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 2
54376: NEG
54377: PUSH
54378: LD_INT 1
54380: NEG
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 2
54388: NEG
54389: PUSH
54390: LD_INT 2
54392: NEG
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 2
54400: NEG
54401: PUSH
54402: LD_INT 3
54404: NEG
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 1
54412: NEG
54413: PUSH
54414: LD_INT 3
54416: NEG
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 0
54424: PUSH
54425: LD_INT 3
54427: NEG
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 1
54435: PUSH
54436: LD_INT 2
54438: NEG
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 3
54446: PUSH
54447: LD_INT 2
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 3
54456: PUSH
54457: LD_INT 3
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 2
54466: PUSH
54467: LD_INT 3
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 1
54476: PUSH
54477: LD_INT 3
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 0
54486: PUSH
54487: LD_INT 3
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 1
54496: NEG
54497: PUSH
54498: LD_INT 2
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 3
54507: NEG
54508: PUSH
54509: LD_INT 2
54511: NEG
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 3
54519: NEG
54520: PUSH
54521: LD_INT 3
54523: NEG
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54560: LD_ADDR_VAR 0 43
54564: PUSH
54565: LD_INT 0
54567: PUSH
54568: LD_INT 0
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 0
54577: PUSH
54578: LD_INT 1
54580: NEG
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 1
54588: PUSH
54589: LD_INT 0
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 1
54598: PUSH
54599: LD_INT 1
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 0
54608: PUSH
54609: LD_INT 1
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 1
54618: NEG
54619: PUSH
54620: LD_INT 0
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 1
54629: NEG
54630: PUSH
54631: LD_INT 1
54633: NEG
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 1
54641: NEG
54642: PUSH
54643: LD_INT 2
54645: NEG
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 0
54653: PUSH
54654: LD_INT 2
54656: NEG
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 1
54664: PUSH
54665: LD_INT 1
54667: NEG
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 2
54675: PUSH
54676: LD_INT 0
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 2
54685: PUSH
54686: LD_INT 1
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 1
54695: PUSH
54696: LD_INT 2
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 0
54705: PUSH
54706: LD_INT 2
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 1
54715: NEG
54716: PUSH
54717: LD_INT 1
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 2
54726: NEG
54727: PUSH
54728: LD_INT 0
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 2
54737: NEG
54738: PUSH
54739: LD_INT 1
54741: NEG
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 1
54749: NEG
54750: PUSH
54751: LD_INT 3
54753: NEG
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 0
54761: PUSH
54762: LD_INT 3
54764: NEG
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 1
54772: PUSH
54773: LD_INT 2
54775: NEG
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 2
54783: PUSH
54784: LD_INT 1
54786: NEG
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 3
54794: PUSH
54795: LD_INT 0
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 3
54804: PUSH
54805: LD_INT 1
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 1
54814: PUSH
54815: LD_INT 3
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 0
54824: PUSH
54825: LD_INT 3
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 1
54834: NEG
54835: PUSH
54836: LD_INT 2
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 2
54845: NEG
54846: PUSH
54847: LD_INT 1
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 3
54856: NEG
54857: PUSH
54858: LD_INT 0
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 3
54867: NEG
54868: PUSH
54869: LD_INT 1
54871: NEG
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54908: LD_ADDR_VAR 0 44
54912: PUSH
54913: LD_INT 0
54915: PUSH
54916: LD_INT 0
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 0
54925: PUSH
54926: LD_INT 1
54928: NEG
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 1
54936: PUSH
54937: LD_INT 0
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 1
54946: PUSH
54947: LD_INT 1
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 0
54956: PUSH
54957: LD_INT 1
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 1
54966: NEG
54967: PUSH
54968: LD_INT 0
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 1
54977: NEG
54978: PUSH
54979: LD_INT 1
54981: NEG
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 1
54989: NEG
54990: PUSH
54991: LD_INT 2
54993: NEG
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 1
55001: PUSH
55002: LD_INT 1
55004: NEG
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 2
55012: PUSH
55013: LD_INT 0
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 2
55022: PUSH
55023: LD_INT 1
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 2
55032: PUSH
55033: LD_INT 2
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 1
55042: PUSH
55043: LD_INT 2
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 1
55052: NEG
55053: PUSH
55054: LD_INT 1
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 2
55063: NEG
55064: PUSH
55065: LD_INT 0
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 2
55074: NEG
55075: PUSH
55076: LD_INT 1
55078: NEG
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 2
55086: NEG
55087: PUSH
55088: LD_INT 2
55090: NEG
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 2
55098: NEG
55099: PUSH
55100: LD_INT 3
55102: NEG
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 2
55110: PUSH
55111: LD_INT 1
55113: NEG
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 3
55121: PUSH
55122: LD_INT 0
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 3
55131: PUSH
55132: LD_INT 1
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 3
55141: PUSH
55142: LD_INT 2
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 3
55151: PUSH
55152: LD_INT 3
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 2
55161: PUSH
55162: LD_INT 3
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 2
55171: NEG
55172: PUSH
55173: LD_INT 1
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 3
55182: NEG
55183: PUSH
55184: LD_INT 0
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 3
55193: NEG
55194: PUSH
55195: LD_INT 1
55197: NEG
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 3
55205: NEG
55206: PUSH
55207: LD_INT 2
55209: NEG
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 3
55217: NEG
55218: PUSH
55219: LD_INT 3
55221: NEG
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55258: LD_ADDR_VAR 0 45
55262: PUSH
55263: LD_INT 0
55265: PUSH
55266: LD_INT 0
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 0
55275: PUSH
55276: LD_INT 1
55278: NEG
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 1
55286: PUSH
55287: LD_INT 0
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 1
55296: PUSH
55297: LD_INT 1
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 0
55306: PUSH
55307: LD_INT 1
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 1
55316: NEG
55317: PUSH
55318: LD_INT 0
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 1
55327: NEG
55328: PUSH
55329: LD_INT 1
55331: NEG
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 1
55339: NEG
55340: PUSH
55341: LD_INT 2
55343: NEG
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 0
55351: PUSH
55352: LD_INT 2
55354: NEG
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 1
55362: PUSH
55363: LD_INT 1
55365: NEG
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 2
55373: PUSH
55374: LD_INT 1
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 2
55383: PUSH
55384: LD_INT 2
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 1
55393: PUSH
55394: LD_INT 2
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 0
55403: PUSH
55404: LD_INT 2
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 1
55413: NEG
55414: PUSH
55415: LD_INT 1
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 2
55424: NEG
55425: PUSH
55426: LD_INT 1
55428: NEG
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 2
55436: NEG
55437: PUSH
55438: LD_INT 2
55440: NEG
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 2
55448: NEG
55449: PUSH
55450: LD_INT 3
55452: NEG
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 1
55460: NEG
55461: PUSH
55462: LD_INT 3
55464: NEG
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 0
55472: PUSH
55473: LD_INT 3
55475: NEG
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 1
55483: PUSH
55484: LD_INT 2
55486: NEG
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 3
55494: PUSH
55495: LD_INT 2
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 3
55504: PUSH
55505: LD_INT 3
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 2
55514: PUSH
55515: LD_INT 3
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 1
55524: PUSH
55525: LD_INT 3
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 0
55534: PUSH
55535: LD_INT 3
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 1
55544: NEG
55545: PUSH
55546: LD_INT 2
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 3
55555: NEG
55556: PUSH
55557: LD_INT 2
55559: NEG
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 3
55567: NEG
55568: PUSH
55569: LD_INT 3
55571: NEG
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55608: LD_ADDR_VAR 0 46
55612: PUSH
55613: LD_INT 0
55615: PUSH
55616: LD_INT 0
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 0
55625: PUSH
55626: LD_INT 1
55628: NEG
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 1
55636: PUSH
55637: LD_INT 0
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 1
55646: PUSH
55647: LD_INT 1
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 0
55656: PUSH
55657: LD_INT 1
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 1
55666: NEG
55667: PUSH
55668: LD_INT 0
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 1
55677: NEG
55678: PUSH
55679: LD_INT 1
55681: NEG
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 1
55689: NEG
55690: PUSH
55691: LD_INT 2
55693: NEG
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 0
55701: PUSH
55702: LD_INT 2
55704: NEG
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 1
55712: PUSH
55713: LD_INT 1
55715: NEG
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 2
55723: PUSH
55724: LD_INT 0
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 2
55733: PUSH
55734: LD_INT 1
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 1
55743: PUSH
55744: LD_INT 2
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 0
55753: PUSH
55754: LD_INT 2
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 1
55763: NEG
55764: PUSH
55765: LD_INT 1
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 2
55774: NEG
55775: PUSH
55776: LD_INT 0
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 2
55785: NEG
55786: PUSH
55787: LD_INT 1
55789: NEG
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 1
55797: NEG
55798: PUSH
55799: LD_INT 3
55801: NEG
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 0
55809: PUSH
55810: LD_INT 3
55812: NEG
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 1
55820: PUSH
55821: LD_INT 2
55823: NEG
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 2
55831: PUSH
55832: LD_INT 1
55834: NEG
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 3
55842: PUSH
55843: LD_INT 0
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 3
55852: PUSH
55853: LD_INT 1
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 1
55862: PUSH
55863: LD_INT 3
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 0
55872: PUSH
55873: LD_INT 3
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 1
55882: NEG
55883: PUSH
55884: LD_INT 2
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 2
55893: NEG
55894: PUSH
55895: LD_INT 1
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 3
55904: NEG
55905: PUSH
55906: LD_INT 0
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 3
55915: NEG
55916: PUSH
55917: LD_INT 1
55919: NEG
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55956: LD_ADDR_VAR 0 47
55960: PUSH
55961: LD_INT 0
55963: PUSH
55964: LD_INT 0
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 0
55973: PUSH
55974: LD_INT 1
55976: NEG
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 1
55984: PUSH
55985: LD_INT 0
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 1
55994: PUSH
55995: LD_INT 1
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 0
56004: PUSH
56005: LD_INT 1
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 1
56014: NEG
56015: PUSH
56016: LD_INT 0
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 1
56025: NEG
56026: PUSH
56027: LD_INT 1
56029: NEG
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 1
56037: NEG
56038: PUSH
56039: LD_INT 2
56041: NEG
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 0
56049: PUSH
56050: LD_INT 2
56052: NEG
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 1
56060: PUSH
56061: LD_INT 1
56063: NEG
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 2
56071: NEG
56072: PUSH
56073: LD_INT 1
56075: NEG
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 2
56083: NEG
56084: PUSH
56085: LD_INT 2
56087: NEG
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56107: LD_ADDR_VAR 0 48
56111: PUSH
56112: LD_INT 0
56114: PUSH
56115: LD_INT 0
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 0
56124: PUSH
56125: LD_INT 1
56127: NEG
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 1
56135: PUSH
56136: LD_INT 0
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 1
56145: PUSH
56146: LD_INT 1
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 0
56155: PUSH
56156: LD_INT 1
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 1
56165: NEG
56166: PUSH
56167: LD_INT 0
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 1
56176: NEG
56177: PUSH
56178: LD_INT 1
56180: NEG
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 1
56188: NEG
56189: PUSH
56190: LD_INT 2
56192: NEG
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 0
56200: PUSH
56201: LD_INT 2
56203: NEG
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 1
56211: PUSH
56212: LD_INT 1
56214: NEG
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 2
56222: PUSH
56223: LD_INT 0
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 2
56232: PUSH
56233: LD_INT 1
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56254: LD_ADDR_VAR 0 49
56258: PUSH
56259: LD_INT 0
56261: PUSH
56262: LD_INT 0
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 0
56271: PUSH
56272: LD_INT 1
56274: NEG
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 1
56282: PUSH
56283: LD_INT 0
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 1
56292: PUSH
56293: LD_INT 1
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 0
56302: PUSH
56303: LD_INT 1
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 1
56312: NEG
56313: PUSH
56314: LD_INT 0
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 1
56323: NEG
56324: PUSH
56325: LD_INT 1
56327: NEG
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 1
56335: PUSH
56336: LD_INT 1
56338: NEG
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 2
56346: PUSH
56347: LD_INT 0
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 2
56356: PUSH
56357: LD_INT 1
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 2
56366: PUSH
56367: LD_INT 2
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 1
56376: PUSH
56377: LD_INT 2
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56398: LD_ADDR_VAR 0 50
56402: PUSH
56403: LD_INT 0
56405: PUSH
56406: LD_INT 0
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 0
56415: PUSH
56416: LD_INT 1
56418: NEG
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 1
56426: PUSH
56427: LD_INT 0
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 1
56436: PUSH
56437: LD_INT 1
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 0
56446: PUSH
56447: LD_INT 1
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 1
56456: NEG
56457: PUSH
56458: LD_INT 0
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 1
56467: NEG
56468: PUSH
56469: LD_INT 1
56471: NEG
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 2
56479: PUSH
56480: LD_INT 1
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 2
56489: PUSH
56490: LD_INT 2
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 1
56499: PUSH
56500: LD_INT 2
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 0
56509: PUSH
56510: LD_INT 2
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 1
56519: NEG
56520: PUSH
56521: LD_INT 1
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56542: LD_ADDR_VAR 0 51
56546: PUSH
56547: LD_INT 0
56549: PUSH
56550: LD_INT 0
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 0
56559: PUSH
56560: LD_INT 1
56562: NEG
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 1
56570: PUSH
56571: LD_INT 0
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 1
56580: PUSH
56581: LD_INT 1
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 0
56590: PUSH
56591: LD_INT 1
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 1
56600: NEG
56601: PUSH
56602: LD_INT 0
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 1
56611: NEG
56612: PUSH
56613: LD_INT 1
56615: NEG
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 1
56623: PUSH
56624: LD_INT 2
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 0
56633: PUSH
56634: LD_INT 2
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 1
56643: NEG
56644: PUSH
56645: LD_INT 1
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 2
56654: NEG
56655: PUSH
56656: LD_INT 0
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 2
56665: NEG
56666: PUSH
56667: LD_INT 1
56669: NEG
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56689: LD_ADDR_VAR 0 52
56693: PUSH
56694: LD_INT 0
56696: PUSH
56697: LD_INT 0
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 0
56706: PUSH
56707: LD_INT 1
56709: NEG
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 1
56717: PUSH
56718: LD_INT 0
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 1
56727: PUSH
56728: LD_INT 1
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 0
56737: PUSH
56738: LD_INT 1
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 1
56747: NEG
56748: PUSH
56749: LD_INT 0
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 1
56758: NEG
56759: PUSH
56760: LD_INT 1
56762: NEG
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 1
56770: NEG
56771: PUSH
56772: LD_INT 2
56774: NEG
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 1
56782: NEG
56783: PUSH
56784: LD_INT 1
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 2
56793: NEG
56794: PUSH
56795: LD_INT 0
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 2
56804: NEG
56805: PUSH
56806: LD_INT 1
56808: NEG
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 2
56816: NEG
56817: PUSH
56818: LD_INT 2
56820: NEG
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56840: LD_ADDR_VAR 0 53
56844: PUSH
56845: LD_INT 0
56847: PUSH
56848: LD_INT 0
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 0
56857: PUSH
56858: LD_INT 1
56860: NEG
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 1
56868: PUSH
56869: LD_INT 0
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 1
56878: PUSH
56879: LD_INT 1
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 0
56888: PUSH
56889: LD_INT 1
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 1
56898: NEG
56899: PUSH
56900: LD_INT 0
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 1
56909: NEG
56910: PUSH
56911: LD_INT 1
56913: NEG
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 1
56921: NEG
56922: PUSH
56923: LD_INT 2
56925: NEG
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 0
56933: PUSH
56934: LD_INT 2
56936: NEG
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 1
56944: PUSH
56945: LD_INT 1
56947: NEG
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 2
56955: PUSH
56956: LD_INT 0
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 2
56965: PUSH
56966: LD_INT 1
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 2
56975: PUSH
56976: LD_INT 2
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 1
56985: PUSH
56986: LD_INT 2
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 0
56995: PUSH
56996: LD_INT 2
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 1
57005: NEG
57006: PUSH
57007: LD_INT 1
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 2
57016: NEG
57017: PUSH
57018: LD_INT 0
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 2
57027: NEG
57028: PUSH
57029: LD_INT 1
57031: NEG
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 2
57039: NEG
57040: PUSH
57041: LD_INT 2
57043: NEG
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57070: LD_ADDR_VAR 0 54
57074: PUSH
57075: LD_INT 0
57077: PUSH
57078: LD_INT 0
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 0
57087: PUSH
57088: LD_INT 1
57090: NEG
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 1
57098: PUSH
57099: LD_INT 0
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 1
57108: PUSH
57109: LD_INT 1
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 0
57118: PUSH
57119: LD_INT 1
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 1
57128: NEG
57129: PUSH
57130: LD_INT 0
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 1
57139: NEG
57140: PUSH
57141: LD_INT 1
57143: NEG
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 1
57151: NEG
57152: PUSH
57153: LD_INT 2
57155: NEG
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 0
57163: PUSH
57164: LD_INT 2
57166: NEG
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 1
57174: PUSH
57175: LD_INT 1
57177: NEG
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 2
57185: PUSH
57186: LD_INT 0
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 2
57195: PUSH
57196: LD_INT 1
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 2
57205: PUSH
57206: LD_INT 2
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 1
57215: PUSH
57216: LD_INT 2
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 0
57225: PUSH
57226: LD_INT 2
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 1
57235: NEG
57236: PUSH
57237: LD_INT 1
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 2
57246: NEG
57247: PUSH
57248: LD_INT 0
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 2
57257: NEG
57258: PUSH
57259: LD_INT 1
57261: NEG
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 2
57269: NEG
57270: PUSH
57271: LD_INT 2
57273: NEG
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57300: LD_ADDR_VAR 0 55
57304: PUSH
57305: LD_INT 0
57307: PUSH
57308: LD_INT 0
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 0
57317: PUSH
57318: LD_INT 1
57320: NEG
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 1
57328: PUSH
57329: LD_INT 0
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: LD_INT 1
57338: PUSH
57339: LD_INT 1
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 0
57348: PUSH
57349: LD_INT 1
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 1
57358: NEG
57359: PUSH
57360: LD_INT 0
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 1
57369: NEG
57370: PUSH
57371: LD_INT 1
57373: NEG
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 1
57381: NEG
57382: PUSH
57383: LD_INT 2
57385: NEG
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 0
57393: PUSH
57394: LD_INT 2
57396: NEG
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 1
57404: PUSH
57405: LD_INT 1
57407: NEG
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 2
57415: PUSH
57416: LD_INT 0
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 2
57425: PUSH
57426: LD_INT 1
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 2
57435: PUSH
57436: LD_INT 2
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 1
57445: PUSH
57446: LD_INT 2
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 0
57455: PUSH
57456: LD_INT 2
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 1
57465: NEG
57466: PUSH
57467: LD_INT 1
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 2
57476: NEG
57477: PUSH
57478: LD_INT 0
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 2
57487: NEG
57488: PUSH
57489: LD_INT 1
57491: NEG
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 2
57499: NEG
57500: PUSH
57501: LD_INT 2
57503: NEG
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57530: LD_ADDR_VAR 0 56
57534: PUSH
57535: LD_INT 0
57537: PUSH
57538: LD_INT 0
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 0
57547: PUSH
57548: LD_INT 1
57550: NEG
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 1
57558: PUSH
57559: LD_INT 0
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 1
57568: PUSH
57569: LD_INT 1
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 0
57578: PUSH
57579: LD_INT 1
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 1
57588: NEG
57589: PUSH
57590: LD_INT 0
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 1
57599: NEG
57600: PUSH
57601: LD_INT 1
57603: NEG
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 1
57611: NEG
57612: PUSH
57613: LD_INT 2
57615: NEG
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 0
57623: PUSH
57624: LD_INT 2
57626: NEG
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 1
57634: PUSH
57635: LD_INT 1
57637: NEG
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 2
57645: PUSH
57646: LD_INT 0
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 2
57655: PUSH
57656: LD_INT 1
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 2
57665: PUSH
57666: LD_INT 2
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 1
57675: PUSH
57676: LD_INT 2
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 0
57685: PUSH
57686: LD_INT 2
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 1
57695: NEG
57696: PUSH
57697: LD_INT 1
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 2
57706: NEG
57707: PUSH
57708: LD_INT 0
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 2
57717: NEG
57718: PUSH
57719: LD_INT 1
57721: NEG
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 2
57729: NEG
57730: PUSH
57731: LD_INT 2
57733: NEG
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57760: LD_ADDR_VAR 0 57
57764: PUSH
57765: LD_INT 0
57767: PUSH
57768: LD_INT 0
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 0
57777: PUSH
57778: LD_INT 1
57780: NEG
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 1
57788: PUSH
57789: LD_INT 0
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 1
57798: PUSH
57799: LD_INT 1
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 0
57808: PUSH
57809: LD_INT 1
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 1
57818: NEG
57819: PUSH
57820: LD_INT 0
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 1
57829: NEG
57830: PUSH
57831: LD_INT 1
57833: NEG
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 1
57841: NEG
57842: PUSH
57843: LD_INT 2
57845: NEG
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 0
57853: PUSH
57854: LD_INT 2
57856: NEG
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 1
57864: PUSH
57865: LD_INT 1
57867: NEG
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 2
57875: PUSH
57876: LD_INT 0
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 2
57885: PUSH
57886: LD_INT 1
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 2
57895: PUSH
57896: LD_INT 2
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 1
57905: PUSH
57906: LD_INT 2
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 0
57915: PUSH
57916: LD_INT 2
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 1
57925: NEG
57926: PUSH
57927: LD_INT 1
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 2
57936: NEG
57937: PUSH
57938: LD_INT 0
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 2
57947: NEG
57948: PUSH
57949: LD_INT 1
57951: NEG
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 2
57959: NEG
57960: PUSH
57961: LD_INT 2
57963: NEG
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57990: LD_ADDR_VAR 0 58
57994: PUSH
57995: LD_INT 0
57997: PUSH
57998: LD_INT 0
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 0
58007: PUSH
58008: LD_INT 1
58010: NEG
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 1
58018: PUSH
58019: LD_INT 0
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 1
58028: PUSH
58029: LD_INT 1
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 0
58038: PUSH
58039: LD_INT 1
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 1
58048: NEG
58049: PUSH
58050: LD_INT 0
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 1
58059: NEG
58060: PUSH
58061: LD_INT 1
58063: NEG
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 1
58071: NEG
58072: PUSH
58073: LD_INT 2
58075: NEG
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 0
58083: PUSH
58084: LD_INT 2
58086: NEG
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 1
58094: PUSH
58095: LD_INT 1
58097: NEG
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 2
58105: PUSH
58106: LD_INT 0
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 2
58115: PUSH
58116: LD_INT 1
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 2
58125: PUSH
58126: LD_INT 2
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 1
58135: PUSH
58136: LD_INT 2
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 0
58145: PUSH
58146: LD_INT 2
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 1
58155: NEG
58156: PUSH
58157: LD_INT 1
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 2
58166: NEG
58167: PUSH
58168: LD_INT 0
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 2
58177: NEG
58178: PUSH
58179: LD_INT 1
58181: NEG
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 2
58189: NEG
58190: PUSH
58191: LD_INT 2
58193: NEG
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58220: LD_ADDR_VAR 0 59
58224: PUSH
58225: LD_INT 0
58227: PUSH
58228: LD_INT 0
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 0
58237: PUSH
58238: LD_INT 1
58240: NEG
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 1
58248: PUSH
58249: LD_INT 0
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 1
58258: PUSH
58259: LD_INT 1
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 0
58268: PUSH
58269: LD_INT 1
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 1
58278: NEG
58279: PUSH
58280: LD_INT 0
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 1
58289: NEG
58290: PUSH
58291: LD_INT 1
58293: NEG
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58308: LD_ADDR_VAR 0 60
58312: PUSH
58313: LD_INT 0
58315: PUSH
58316: LD_INT 0
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 0
58325: PUSH
58326: LD_INT 1
58328: NEG
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 1
58336: PUSH
58337: LD_INT 0
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 1
58346: PUSH
58347: LD_INT 1
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 0
58356: PUSH
58357: LD_INT 1
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 1
58366: NEG
58367: PUSH
58368: LD_INT 0
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 1
58377: NEG
58378: PUSH
58379: LD_INT 1
58381: NEG
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58396: LD_ADDR_VAR 0 61
58400: PUSH
58401: LD_INT 0
58403: PUSH
58404: LD_INT 0
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 0
58413: PUSH
58414: LD_INT 1
58416: NEG
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 1
58424: PUSH
58425: LD_INT 0
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 1
58434: PUSH
58435: LD_INT 1
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 0
58444: PUSH
58445: LD_INT 1
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 1
58454: NEG
58455: PUSH
58456: LD_INT 0
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 1
58465: NEG
58466: PUSH
58467: LD_INT 1
58469: NEG
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58484: LD_ADDR_VAR 0 62
58488: PUSH
58489: LD_INT 0
58491: PUSH
58492: LD_INT 0
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 0
58501: PUSH
58502: LD_INT 1
58504: NEG
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 1
58512: PUSH
58513: LD_INT 0
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 1
58522: PUSH
58523: LD_INT 1
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 0
58532: PUSH
58533: LD_INT 1
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 1
58542: NEG
58543: PUSH
58544: LD_INT 0
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 1
58553: NEG
58554: PUSH
58555: LD_INT 1
58557: NEG
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58572: LD_ADDR_VAR 0 63
58576: PUSH
58577: LD_INT 0
58579: PUSH
58580: LD_INT 0
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 0
58589: PUSH
58590: LD_INT 1
58592: NEG
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 1
58600: PUSH
58601: LD_INT 0
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 1
58610: PUSH
58611: LD_INT 1
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 0
58620: PUSH
58621: LD_INT 1
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 1
58630: NEG
58631: PUSH
58632: LD_INT 0
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 1
58641: NEG
58642: PUSH
58643: LD_INT 1
58645: NEG
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58660: LD_ADDR_VAR 0 64
58664: PUSH
58665: LD_INT 0
58667: PUSH
58668: LD_INT 0
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 0
58677: PUSH
58678: LD_INT 1
58680: NEG
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 1
58688: PUSH
58689: LD_INT 0
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 1
58698: PUSH
58699: LD_INT 1
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 0
58708: PUSH
58709: LD_INT 1
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 1
58718: NEG
58719: PUSH
58720: LD_INT 0
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 1
58729: NEG
58730: PUSH
58731: LD_INT 1
58733: NEG
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: LIST
58745: LIST
58746: LIST
58747: ST_TO_ADDR
// end ; 1 :
58748: GO 64645
58750: LD_INT 1
58752: DOUBLE
58753: EQUAL
58754: IFTRUE 58758
58756: GO 61381
58758: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58759: LD_ADDR_VAR 0 11
58763: PUSH
58764: LD_INT 1
58766: NEG
58767: PUSH
58768: LD_INT 3
58770: NEG
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 0
58778: PUSH
58779: LD_INT 3
58781: NEG
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 1
58789: PUSH
58790: LD_INT 2
58792: NEG
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: LIST
58802: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58803: LD_ADDR_VAR 0 12
58807: PUSH
58808: LD_INT 2
58810: PUSH
58811: LD_INT 1
58813: NEG
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 3
58821: PUSH
58822: LD_INT 0
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 3
58831: PUSH
58832: LD_INT 1
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: LIST
58843: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58844: LD_ADDR_VAR 0 13
58848: PUSH
58849: LD_INT 3
58851: PUSH
58852: LD_INT 2
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 3
58861: PUSH
58862: LD_INT 3
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 2
58871: PUSH
58872: LD_INT 3
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: LIST
58883: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58884: LD_ADDR_VAR 0 14
58888: PUSH
58889: LD_INT 1
58891: PUSH
58892: LD_INT 3
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 0
58901: PUSH
58902: LD_INT 3
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 1
58911: NEG
58912: PUSH
58913: LD_INT 2
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: LIST
58924: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58925: LD_ADDR_VAR 0 15
58929: PUSH
58930: LD_INT 2
58932: NEG
58933: PUSH
58934: LD_INT 1
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 3
58943: NEG
58944: PUSH
58945: LD_INT 0
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 3
58954: NEG
58955: PUSH
58956: LD_INT 1
58958: NEG
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: LIST
58968: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58969: LD_ADDR_VAR 0 16
58973: PUSH
58974: LD_INT 2
58976: NEG
58977: PUSH
58978: LD_INT 3
58980: NEG
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 3
58988: NEG
58989: PUSH
58990: LD_INT 2
58992: NEG
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 3
59000: NEG
59001: PUSH
59002: LD_INT 3
59004: NEG
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: LIST
59014: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59015: LD_ADDR_VAR 0 17
59019: PUSH
59020: LD_INT 1
59022: NEG
59023: PUSH
59024: LD_INT 3
59026: NEG
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 0
59034: PUSH
59035: LD_INT 3
59037: NEG
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 1
59045: PUSH
59046: LD_INT 2
59048: NEG
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: LIST
59058: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59059: LD_ADDR_VAR 0 18
59063: PUSH
59064: LD_INT 2
59066: PUSH
59067: LD_INT 1
59069: NEG
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 3
59077: PUSH
59078: LD_INT 0
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 3
59087: PUSH
59088: LD_INT 1
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: LIST
59099: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59100: LD_ADDR_VAR 0 19
59104: PUSH
59105: LD_INT 3
59107: PUSH
59108: LD_INT 2
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 3
59117: PUSH
59118: LD_INT 3
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 2
59127: PUSH
59128: LD_INT 3
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: LIST
59139: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59140: LD_ADDR_VAR 0 20
59144: PUSH
59145: LD_INT 1
59147: PUSH
59148: LD_INT 3
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 0
59157: PUSH
59158: LD_INT 3
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 1
59167: NEG
59168: PUSH
59169: LD_INT 2
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: LIST
59180: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59181: LD_ADDR_VAR 0 21
59185: PUSH
59186: LD_INT 2
59188: NEG
59189: PUSH
59190: LD_INT 1
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 3
59199: NEG
59200: PUSH
59201: LD_INT 0
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 3
59210: NEG
59211: PUSH
59212: LD_INT 1
59214: NEG
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: LIST
59224: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59225: LD_ADDR_VAR 0 22
59229: PUSH
59230: LD_INT 2
59232: NEG
59233: PUSH
59234: LD_INT 3
59236: NEG
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 3
59244: NEG
59245: PUSH
59246: LD_INT 2
59248: NEG
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 3
59256: NEG
59257: PUSH
59258: LD_INT 3
59260: NEG
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: LIST
59270: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
59271: LD_ADDR_VAR 0 23
59275: PUSH
59276: LD_INT 0
59278: PUSH
59279: LD_INT 3
59281: NEG
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 1
59289: NEG
59290: PUSH
59291: LD_INT 4
59293: NEG
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 1
59301: PUSH
59302: LD_INT 3
59304: NEG
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: LIST
59314: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
59315: LD_ADDR_VAR 0 24
59319: PUSH
59320: LD_INT 3
59322: PUSH
59323: LD_INT 0
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 3
59332: PUSH
59333: LD_INT 1
59335: NEG
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 4
59343: PUSH
59344: LD_INT 1
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: LIST
59355: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
59356: LD_ADDR_VAR 0 25
59360: PUSH
59361: LD_INT 3
59363: PUSH
59364: LD_INT 3
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 4
59373: PUSH
59374: LD_INT 3
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 3
59383: PUSH
59384: LD_INT 4
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: LIST
59395: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
59396: LD_ADDR_VAR 0 26
59400: PUSH
59401: LD_INT 0
59403: PUSH
59404: LD_INT 3
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 1
59413: PUSH
59414: LD_INT 4
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 1
59423: NEG
59424: PUSH
59425: LD_INT 3
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: LIST
59436: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
59437: LD_ADDR_VAR 0 27
59441: PUSH
59442: LD_INT 3
59444: NEG
59445: PUSH
59446: LD_INT 0
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 3
59455: NEG
59456: PUSH
59457: LD_INT 1
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 4
59466: NEG
59467: PUSH
59468: LD_INT 1
59470: NEG
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: LIST
59480: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
59481: LD_ADDR_VAR 0 28
59485: PUSH
59486: LD_INT 3
59488: NEG
59489: PUSH
59490: LD_INT 3
59492: NEG
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 3
59500: NEG
59501: PUSH
59502: LD_INT 4
59504: NEG
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 4
59512: NEG
59513: PUSH
59514: LD_INT 3
59516: NEG
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: LIST
59526: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
59527: LD_ADDR_VAR 0 29
59531: PUSH
59532: LD_INT 1
59534: NEG
59535: PUSH
59536: LD_INT 3
59538: NEG
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 0
59546: PUSH
59547: LD_INT 3
59549: NEG
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 1
59557: PUSH
59558: LD_INT 2
59560: NEG
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 1
59568: NEG
59569: PUSH
59570: LD_INT 4
59572: NEG
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 0
59580: PUSH
59581: LD_INT 4
59583: NEG
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 1
59591: PUSH
59592: LD_INT 3
59594: NEG
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 1
59602: NEG
59603: PUSH
59604: LD_INT 5
59606: NEG
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 0
59614: PUSH
59615: LD_INT 5
59617: NEG
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 1
59625: PUSH
59626: LD_INT 4
59628: NEG
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 1
59636: NEG
59637: PUSH
59638: LD_INT 6
59640: NEG
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 0
59648: PUSH
59649: LD_INT 6
59651: NEG
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 1
59659: PUSH
59660: LD_INT 5
59662: NEG
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
59682: LD_ADDR_VAR 0 30
59686: PUSH
59687: LD_INT 2
59689: PUSH
59690: LD_INT 1
59692: NEG
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 3
59700: PUSH
59701: LD_INT 0
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 3
59710: PUSH
59711: LD_INT 1
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 3
59720: PUSH
59721: LD_INT 1
59723: NEG
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 4
59731: PUSH
59732: LD_INT 0
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 4
59741: PUSH
59742: LD_INT 1
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 4
59751: PUSH
59752: LD_INT 1
59754: NEG
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 5
59762: PUSH
59763: LD_INT 0
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 5
59772: PUSH
59773: LD_INT 1
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 5
59782: PUSH
59783: LD_INT 1
59785: NEG
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 6
59793: PUSH
59794: LD_INT 0
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 6
59803: PUSH
59804: LD_INT 1
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: LIST
59822: LIST
59823: LIST
59824: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59825: LD_ADDR_VAR 0 31
59829: PUSH
59830: LD_INT 3
59832: PUSH
59833: LD_INT 2
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 3
59842: PUSH
59843: LD_INT 3
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 2
59852: PUSH
59853: LD_INT 3
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 4
59862: PUSH
59863: LD_INT 3
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 4
59872: PUSH
59873: LD_INT 4
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 3
59882: PUSH
59883: LD_INT 4
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 5
59892: PUSH
59893: LD_INT 4
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 5
59902: PUSH
59903: LD_INT 5
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 4
59912: PUSH
59913: LD_INT 5
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 6
59922: PUSH
59923: LD_INT 5
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: LD_INT 6
59932: PUSH
59933: LD_INT 6
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 5
59942: PUSH
59943: LD_INT 6
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59964: LD_ADDR_VAR 0 32
59968: PUSH
59969: LD_INT 1
59971: PUSH
59972: LD_INT 3
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 0
59981: PUSH
59982: LD_INT 3
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 1
59991: NEG
59992: PUSH
59993: LD_INT 2
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 1
60002: PUSH
60003: LD_INT 4
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 0
60012: PUSH
60013: LD_INT 4
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 1
60022: NEG
60023: PUSH
60024: LD_INT 3
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 1
60033: PUSH
60034: LD_INT 5
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 0
60043: PUSH
60044: LD_INT 5
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 1
60053: NEG
60054: PUSH
60055: LD_INT 4
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 1
60064: PUSH
60065: LD_INT 6
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 0
60074: PUSH
60075: LD_INT 6
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 1
60084: NEG
60085: PUSH
60086: LD_INT 5
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
60107: LD_ADDR_VAR 0 33
60111: PUSH
60112: LD_INT 2
60114: NEG
60115: PUSH
60116: LD_INT 1
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 3
60125: NEG
60126: PUSH
60127: LD_INT 0
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 3
60136: NEG
60137: PUSH
60138: LD_INT 1
60140: NEG
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 3
60148: NEG
60149: PUSH
60150: LD_INT 1
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 4
60159: NEG
60160: PUSH
60161: LD_INT 0
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 4
60170: NEG
60171: PUSH
60172: LD_INT 1
60174: NEG
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: LD_INT 4
60182: NEG
60183: PUSH
60184: LD_INT 1
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: LD_INT 5
60193: NEG
60194: PUSH
60195: LD_INT 0
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 5
60204: NEG
60205: PUSH
60206: LD_INT 1
60208: NEG
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 5
60216: NEG
60217: PUSH
60218: LD_INT 1
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 6
60227: NEG
60228: PUSH
60229: LD_INT 0
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 6
60238: NEG
60239: PUSH
60240: LD_INT 1
60242: NEG
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
60262: LD_ADDR_VAR 0 34
60266: PUSH
60267: LD_INT 2
60269: NEG
60270: PUSH
60271: LD_INT 3
60273: NEG
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 3
60281: NEG
60282: PUSH
60283: LD_INT 2
60285: NEG
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 3
60293: NEG
60294: PUSH
60295: LD_INT 3
60297: NEG
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 3
60305: NEG
60306: PUSH
60307: LD_INT 4
60309: NEG
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 4
60317: NEG
60318: PUSH
60319: LD_INT 3
60321: NEG
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 4
60329: NEG
60330: PUSH
60331: LD_INT 4
60333: NEG
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 4
60341: NEG
60342: PUSH
60343: LD_INT 5
60345: NEG
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 5
60353: NEG
60354: PUSH
60355: LD_INT 4
60357: NEG
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: LD_INT 5
60365: NEG
60366: PUSH
60367: LD_INT 5
60369: NEG
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_INT 5
60377: NEG
60378: PUSH
60379: LD_INT 6
60381: NEG
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 6
60389: NEG
60390: PUSH
60391: LD_INT 5
60393: NEG
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 6
60401: NEG
60402: PUSH
60403: LD_INT 6
60405: NEG
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
60425: LD_ADDR_VAR 0 41
60429: PUSH
60430: LD_INT 0
60432: PUSH
60433: LD_INT 2
60435: NEG
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 1
60443: NEG
60444: PUSH
60445: LD_INT 3
60447: NEG
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 1
60455: PUSH
60456: LD_INT 2
60458: NEG
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: LIST
60468: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
60469: LD_ADDR_VAR 0 42
60473: PUSH
60474: LD_INT 2
60476: PUSH
60477: LD_INT 0
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 2
60486: PUSH
60487: LD_INT 1
60489: NEG
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 3
60497: PUSH
60498: LD_INT 1
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: LIST
60509: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
60510: LD_ADDR_VAR 0 43
60514: PUSH
60515: LD_INT 2
60517: PUSH
60518: LD_INT 2
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 3
60527: PUSH
60528: LD_INT 2
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 2
60537: PUSH
60538: LD_INT 3
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: LIST
60549: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
60550: LD_ADDR_VAR 0 44
60554: PUSH
60555: LD_INT 0
60557: PUSH
60558: LD_INT 2
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 1
60567: PUSH
60568: LD_INT 3
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 1
60577: NEG
60578: PUSH
60579: LD_INT 2
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: LIST
60590: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60591: LD_ADDR_VAR 0 45
60595: PUSH
60596: LD_INT 2
60598: NEG
60599: PUSH
60600: LD_INT 0
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 2
60609: NEG
60610: PUSH
60611: LD_INT 1
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 3
60620: NEG
60621: PUSH
60622: LD_INT 1
60624: NEG
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: LIST
60634: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
60635: LD_ADDR_VAR 0 46
60639: PUSH
60640: LD_INT 2
60642: NEG
60643: PUSH
60644: LD_INT 2
60646: NEG
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 2
60654: NEG
60655: PUSH
60656: LD_INT 3
60658: NEG
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 3
60666: NEG
60667: PUSH
60668: LD_INT 2
60670: NEG
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: LIST
60680: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
60681: LD_ADDR_VAR 0 47
60685: PUSH
60686: LD_INT 2
60688: NEG
60689: PUSH
60690: LD_INT 3
60692: NEG
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: LD_INT 1
60700: NEG
60701: PUSH
60702: LD_INT 3
60704: NEG
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60714: LD_ADDR_VAR 0 48
60718: PUSH
60719: LD_INT 1
60721: PUSH
60722: LD_INT 2
60724: NEG
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 2
60732: PUSH
60733: LD_INT 1
60735: NEG
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60745: LD_ADDR_VAR 0 49
60749: PUSH
60750: LD_INT 3
60752: PUSH
60753: LD_INT 1
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 3
60762: PUSH
60763: LD_INT 2
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60774: LD_ADDR_VAR 0 50
60778: PUSH
60779: LD_INT 2
60781: PUSH
60782: LD_INT 3
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: LD_INT 1
60791: PUSH
60792: LD_INT 3
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60803: LD_ADDR_VAR 0 51
60807: PUSH
60808: LD_INT 1
60810: NEG
60811: PUSH
60812: LD_INT 2
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 2
60821: NEG
60822: PUSH
60823: LD_INT 1
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60834: LD_ADDR_VAR 0 52
60838: PUSH
60839: LD_INT 3
60841: NEG
60842: PUSH
60843: LD_INT 1
60845: NEG
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 3
60853: NEG
60854: PUSH
60855: LD_INT 2
60857: NEG
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60867: LD_ADDR_VAR 0 53
60871: PUSH
60872: LD_INT 1
60874: NEG
60875: PUSH
60876: LD_INT 3
60878: NEG
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 0
60886: PUSH
60887: LD_INT 3
60889: NEG
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 1
60897: PUSH
60898: LD_INT 2
60900: NEG
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: LIST
60910: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60911: LD_ADDR_VAR 0 54
60915: PUSH
60916: LD_INT 2
60918: PUSH
60919: LD_INT 1
60921: NEG
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 3
60929: PUSH
60930: LD_INT 0
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_INT 3
60939: PUSH
60940: LD_INT 1
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: LIST
60951: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60952: LD_ADDR_VAR 0 55
60956: PUSH
60957: LD_INT 3
60959: PUSH
60960: LD_INT 2
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: LD_INT 3
60969: PUSH
60970: LD_INT 3
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 2
60979: PUSH
60980: LD_INT 3
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: LIST
60991: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60992: LD_ADDR_VAR 0 56
60996: PUSH
60997: LD_INT 1
60999: PUSH
61000: LD_INT 3
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 0
61009: PUSH
61010: LD_INT 3
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 1
61019: NEG
61020: PUSH
61021: LD_INT 2
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: LIST
61032: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61033: LD_ADDR_VAR 0 57
61037: PUSH
61038: LD_INT 2
61040: NEG
61041: PUSH
61042: LD_INT 1
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 3
61051: NEG
61052: PUSH
61053: LD_INT 0
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 3
61062: NEG
61063: PUSH
61064: LD_INT 1
61066: NEG
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: LIST
61076: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61077: LD_ADDR_VAR 0 58
61081: PUSH
61082: LD_INT 2
61084: NEG
61085: PUSH
61086: LD_INT 3
61088: NEG
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 3
61096: NEG
61097: PUSH
61098: LD_INT 2
61100: NEG
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 3
61108: NEG
61109: PUSH
61110: LD_INT 3
61112: NEG
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: LIST
61122: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
61123: LD_ADDR_VAR 0 59
61127: PUSH
61128: LD_INT 1
61130: NEG
61131: PUSH
61132: LD_INT 2
61134: NEG
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: LD_INT 0
61142: PUSH
61143: LD_INT 2
61145: NEG
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 1
61153: PUSH
61154: LD_INT 1
61156: NEG
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: LIST
61166: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61167: LD_ADDR_VAR 0 60
61171: PUSH
61172: LD_INT 1
61174: PUSH
61175: LD_INT 1
61177: NEG
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 2
61185: PUSH
61186: LD_INT 0
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 2
61195: PUSH
61196: LD_INT 1
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: LIST
61207: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61208: LD_ADDR_VAR 0 61
61212: PUSH
61213: LD_INT 2
61215: PUSH
61216: LD_INT 1
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 2
61225: PUSH
61226: LD_INT 2
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: LD_INT 1
61235: PUSH
61236: LD_INT 2
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: LIST
61247: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61248: LD_ADDR_VAR 0 62
61252: PUSH
61253: LD_INT 1
61255: PUSH
61256: LD_INT 2
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 0
61265: PUSH
61266: LD_INT 2
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: LD_INT 1
61275: NEG
61276: PUSH
61277: LD_INT 1
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: LIST
61288: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61289: LD_ADDR_VAR 0 63
61293: PUSH
61294: LD_INT 1
61296: NEG
61297: PUSH
61298: LD_INT 1
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 2
61307: NEG
61308: PUSH
61309: LD_INT 0
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 2
61318: NEG
61319: PUSH
61320: LD_INT 1
61322: NEG
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: LIST
61332: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61333: LD_ADDR_VAR 0 64
61337: PUSH
61338: LD_INT 1
61340: NEG
61341: PUSH
61342: LD_INT 2
61344: NEG
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 2
61352: NEG
61353: PUSH
61354: LD_INT 1
61356: NEG
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 2
61364: NEG
61365: PUSH
61366: LD_INT 2
61368: NEG
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: LIST
61378: ST_TO_ADDR
// end ; 2 :
61379: GO 64645
61381: LD_INT 2
61383: DOUBLE
61384: EQUAL
61385: IFTRUE 61389
61387: GO 64644
61389: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
61390: LD_ADDR_VAR 0 29
61394: PUSH
61395: LD_INT 4
61397: PUSH
61398: LD_INT 0
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 4
61407: PUSH
61408: LD_INT 1
61410: NEG
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 5
61418: PUSH
61419: LD_INT 0
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 5
61428: PUSH
61429: LD_INT 1
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 4
61438: PUSH
61439: LD_INT 1
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 3
61448: PUSH
61449: LD_INT 0
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 3
61458: PUSH
61459: LD_INT 1
61461: NEG
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: LD_INT 3
61469: PUSH
61470: LD_INT 2
61472: NEG
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: PUSH
61478: LD_INT 5
61480: PUSH
61481: LD_INT 2
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: PUSH
61488: LD_INT 3
61490: PUSH
61491: LD_INT 3
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PUSH
61498: LD_INT 3
61500: PUSH
61501: LD_INT 2
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: LD_INT 4
61510: PUSH
61511: LD_INT 3
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 4
61520: PUSH
61521: LD_INT 4
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 3
61530: PUSH
61531: LD_INT 4
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 2
61540: PUSH
61541: LD_INT 3
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 2
61550: PUSH
61551: LD_INT 2
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 4
61560: PUSH
61561: LD_INT 2
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: LD_INT 2
61570: PUSH
61571: LD_INT 4
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 0
61580: PUSH
61581: LD_INT 4
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 0
61590: PUSH
61591: LD_INT 3
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 1
61600: PUSH
61601: LD_INT 4
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 1
61610: PUSH
61611: LD_INT 5
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 0
61620: PUSH
61621: LD_INT 5
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 1
61630: NEG
61631: PUSH
61632: LD_INT 4
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 1
61641: NEG
61642: PUSH
61643: LD_INT 3
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: LD_INT 2
61652: PUSH
61653: LD_INT 5
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: LD_INT 2
61662: NEG
61663: PUSH
61664: LD_INT 3
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 3
61673: NEG
61674: PUSH
61675: LD_INT 0
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 3
61684: NEG
61685: PUSH
61686: LD_INT 1
61688: NEG
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 2
61696: NEG
61697: PUSH
61698: LD_INT 0
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: PUSH
61705: LD_INT 2
61707: NEG
61708: PUSH
61709: LD_INT 1
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: LD_INT 3
61718: NEG
61719: PUSH
61720: LD_INT 1
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 4
61729: NEG
61730: PUSH
61731: LD_INT 0
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 4
61740: NEG
61741: PUSH
61742: LD_INT 1
61744: NEG
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: LD_INT 4
61752: NEG
61753: PUSH
61754: LD_INT 2
61756: NEG
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: LD_INT 2
61764: NEG
61765: PUSH
61766: LD_INT 2
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 4
61775: NEG
61776: PUSH
61777: LD_INT 4
61779: NEG
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 4
61787: NEG
61788: PUSH
61789: LD_INT 5
61791: NEG
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 3
61799: NEG
61800: PUSH
61801: LD_INT 4
61803: NEG
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: LD_INT 3
61811: NEG
61812: PUSH
61813: LD_INT 3
61815: NEG
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 4
61823: NEG
61824: PUSH
61825: LD_INT 3
61827: NEG
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: LD_INT 5
61835: NEG
61836: PUSH
61837: LD_INT 4
61839: NEG
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 5
61847: NEG
61848: PUSH
61849: LD_INT 5
61851: NEG
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: LD_INT 3
61859: NEG
61860: PUSH
61861: LD_INT 5
61863: NEG
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: LD_INT 5
61871: NEG
61872: PUSH
61873: LD_INT 3
61875: NEG
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61928: LD_ADDR_VAR 0 30
61932: PUSH
61933: LD_INT 4
61935: PUSH
61936: LD_INT 4
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: LD_INT 4
61945: PUSH
61946: LD_INT 3
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 5
61955: PUSH
61956: LD_INT 4
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 5
61965: PUSH
61966: LD_INT 5
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 4
61975: PUSH
61976: LD_INT 5
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 3
61985: PUSH
61986: LD_INT 4
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 3
61995: PUSH
61996: LD_INT 3
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: LD_INT 5
62005: PUSH
62006: LD_INT 3
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: LD_INT 3
62015: PUSH
62016: LD_INT 5
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 0
62025: PUSH
62026: LD_INT 3
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: LD_INT 0
62035: PUSH
62036: LD_INT 2
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 1
62045: PUSH
62046: LD_INT 3
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 1
62055: PUSH
62056: LD_INT 4
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: LD_INT 0
62065: PUSH
62066: LD_INT 4
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 1
62075: NEG
62076: PUSH
62077: LD_INT 3
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 1
62086: NEG
62087: PUSH
62088: LD_INT 2
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 2
62097: PUSH
62098: LD_INT 4
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 2
62107: NEG
62108: PUSH
62109: LD_INT 2
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: LD_INT 4
62118: NEG
62119: PUSH
62120: LD_INT 0
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 4
62129: NEG
62130: PUSH
62131: LD_INT 1
62133: NEG
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: LD_INT 3
62141: NEG
62142: PUSH
62143: LD_INT 0
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 3
62152: NEG
62153: PUSH
62154: LD_INT 1
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 4
62163: NEG
62164: PUSH
62165: LD_INT 1
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: LD_INT 5
62174: NEG
62175: PUSH
62176: LD_INT 0
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 5
62185: NEG
62186: PUSH
62187: LD_INT 1
62189: NEG
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 5
62197: NEG
62198: PUSH
62199: LD_INT 2
62201: NEG
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: LD_INT 3
62209: NEG
62210: PUSH
62211: LD_INT 2
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: PUSH
62218: LD_INT 3
62220: NEG
62221: PUSH
62222: LD_INT 3
62224: NEG
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: LD_INT 3
62232: NEG
62233: PUSH
62234: LD_INT 4
62236: NEG
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: LD_INT 2
62244: NEG
62245: PUSH
62246: LD_INT 3
62248: NEG
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 2
62256: NEG
62257: PUSH
62258: LD_INT 2
62260: NEG
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: LD_INT 3
62268: NEG
62269: PUSH
62270: LD_INT 2
62272: NEG
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 4
62280: NEG
62281: PUSH
62282: LD_INT 3
62284: NEG
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 4
62292: NEG
62293: PUSH
62294: LD_INT 4
62296: NEG
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 2
62304: NEG
62305: PUSH
62306: LD_INT 4
62308: NEG
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 4
62316: NEG
62317: PUSH
62318: LD_INT 2
62320: NEG
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 0
62328: PUSH
62329: LD_INT 4
62331: NEG
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 0
62339: PUSH
62340: LD_INT 5
62342: NEG
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: LD_INT 1
62350: PUSH
62351: LD_INT 4
62353: NEG
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 1
62361: PUSH
62362: LD_INT 3
62364: NEG
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 0
62372: PUSH
62373: LD_INT 3
62375: NEG
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PUSH
62381: LD_INT 1
62383: NEG
62384: PUSH
62385: LD_INT 4
62387: NEG
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 1
62395: NEG
62396: PUSH
62397: LD_INT 5
62399: NEG
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: LD_INT 2
62407: PUSH
62408: LD_INT 3
62410: NEG
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: PUSH
62416: LD_INT 2
62418: NEG
62419: PUSH
62420: LD_INT 5
62422: NEG
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: LIST
62432: LIST
62433: LIST
62434: LIST
62435: LIST
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
62475: LD_ADDR_VAR 0 31
62479: PUSH
62480: LD_INT 0
62482: PUSH
62483: LD_INT 4
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 0
62492: PUSH
62493: LD_INT 3
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: LD_INT 1
62502: PUSH
62503: LD_INT 4
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: LD_INT 1
62512: PUSH
62513: LD_INT 5
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: PUSH
62520: LD_INT 0
62522: PUSH
62523: LD_INT 5
62525: PUSH
62526: EMPTY
62527: LIST
62528: LIST
62529: PUSH
62530: LD_INT 1
62532: NEG
62533: PUSH
62534: LD_INT 4
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PUSH
62541: LD_INT 1
62543: NEG
62544: PUSH
62545: LD_INT 3
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 2
62554: PUSH
62555: LD_INT 5
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PUSH
62562: LD_INT 2
62564: NEG
62565: PUSH
62566: LD_INT 3
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 3
62575: NEG
62576: PUSH
62577: LD_INT 0
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 3
62586: NEG
62587: PUSH
62588: LD_INT 1
62590: NEG
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 2
62598: NEG
62599: PUSH
62600: LD_INT 0
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: PUSH
62607: LD_INT 2
62609: NEG
62610: PUSH
62611: LD_INT 1
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: LD_INT 3
62620: NEG
62621: PUSH
62622: LD_INT 1
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: LD_INT 4
62631: NEG
62632: PUSH
62633: LD_INT 0
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: LD_INT 4
62642: NEG
62643: PUSH
62644: LD_INT 1
62646: NEG
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 4
62654: NEG
62655: PUSH
62656: LD_INT 2
62658: NEG
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 2
62666: NEG
62667: PUSH
62668: LD_INT 2
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: LD_INT 4
62677: NEG
62678: PUSH
62679: LD_INT 4
62681: NEG
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 4
62689: NEG
62690: PUSH
62691: LD_INT 5
62693: NEG
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 3
62701: NEG
62702: PUSH
62703: LD_INT 4
62705: NEG
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 3
62713: NEG
62714: PUSH
62715: LD_INT 3
62717: NEG
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 4
62725: NEG
62726: PUSH
62727: LD_INT 3
62729: NEG
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 5
62737: NEG
62738: PUSH
62739: LD_INT 4
62741: NEG
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 5
62749: NEG
62750: PUSH
62751: LD_INT 5
62753: NEG
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 3
62761: NEG
62762: PUSH
62763: LD_INT 5
62765: NEG
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 5
62773: NEG
62774: PUSH
62775: LD_INT 3
62777: NEG
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 0
62785: PUSH
62786: LD_INT 3
62788: NEG
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: LD_INT 0
62796: PUSH
62797: LD_INT 4
62799: NEG
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: LD_INT 1
62807: PUSH
62808: LD_INT 3
62810: NEG
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: PUSH
62816: LD_INT 1
62818: PUSH
62819: LD_INT 2
62821: NEG
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: PUSH
62827: LD_INT 0
62829: PUSH
62830: LD_INT 2
62832: NEG
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: PUSH
62838: LD_INT 1
62840: NEG
62841: PUSH
62842: LD_INT 3
62844: NEG
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: LD_INT 1
62852: NEG
62853: PUSH
62854: LD_INT 4
62856: NEG
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 2
62864: PUSH
62865: LD_INT 2
62867: NEG
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 2
62875: NEG
62876: PUSH
62877: LD_INT 4
62879: NEG
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: LD_INT 4
62887: PUSH
62888: LD_INT 0
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: PUSH
62895: LD_INT 4
62897: PUSH
62898: LD_INT 1
62900: NEG
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: LD_INT 5
62908: PUSH
62909: LD_INT 0
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: LD_INT 5
62918: PUSH
62919: LD_INT 1
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_INT 4
62928: PUSH
62929: LD_INT 1
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PUSH
62936: LD_INT 3
62938: PUSH
62939: LD_INT 0
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: LD_INT 3
62948: PUSH
62949: LD_INT 1
62951: NEG
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 3
62959: PUSH
62960: LD_INT 2
62962: NEG
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 5
62970: PUSH
62971: LD_INT 2
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: LIST
62982: LIST
62983: LIST
62984: LIST
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
63025: LD_ADDR_VAR 0 32
63029: PUSH
63030: LD_INT 4
63032: NEG
63033: PUSH
63034: LD_INT 0
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: LD_INT 4
63043: NEG
63044: PUSH
63045: LD_INT 1
63047: NEG
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PUSH
63053: LD_INT 3
63055: NEG
63056: PUSH
63057: LD_INT 0
63059: PUSH
63060: EMPTY
63061: LIST
63062: LIST
63063: PUSH
63064: LD_INT 3
63066: NEG
63067: PUSH
63068: LD_INT 1
63070: PUSH
63071: EMPTY
63072: LIST
63073: LIST
63074: PUSH
63075: LD_INT 4
63077: NEG
63078: PUSH
63079: LD_INT 1
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: PUSH
63086: LD_INT 5
63088: NEG
63089: PUSH
63090: LD_INT 0
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: PUSH
63097: LD_INT 5
63099: NEG
63100: PUSH
63101: LD_INT 1
63103: NEG
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 5
63111: NEG
63112: PUSH
63113: LD_INT 2
63115: NEG
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: LD_INT 3
63123: NEG
63124: PUSH
63125: LD_INT 2
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: LD_INT 3
63134: NEG
63135: PUSH
63136: LD_INT 3
63138: NEG
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: PUSH
63144: LD_INT 3
63146: NEG
63147: PUSH
63148: LD_INT 4
63150: NEG
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 2
63158: NEG
63159: PUSH
63160: LD_INT 3
63162: NEG
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: LD_INT 2
63170: NEG
63171: PUSH
63172: LD_INT 2
63174: NEG
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PUSH
63180: LD_INT 3
63182: NEG
63183: PUSH
63184: LD_INT 2
63186: NEG
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 4
63194: NEG
63195: PUSH
63196: LD_INT 3
63198: NEG
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 4
63206: NEG
63207: PUSH
63208: LD_INT 4
63210: NEG
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: LD_INT 2
63218: NEG
63219: PUSH
63220: LD_INT 4
63222: NEG
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: LD_INT 4
63230: NEG
63231: PUSH
63232: LD_INT 2
63234: NEG
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: LD_INT 0
63242: PUSH
63243: LD_INT 4
63245: NEG
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: LD_INT 0
63253: PUSH
63254: LD_INT 5
63256: NEG
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: PUSH
63262: LD_INT 1
63264: PUSH
63265: LD_INT 4
63267: NEG
63268: PUSH
63269: EMPTY
63270: LIST
63271: LIST
63272: PUSH
63273: LD_INT 1
63275: PUSH
63276: LD_INT 3
63278: NEG
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: PUSH
63284: LD_INT 0
63286: PUSH
63287: LD_INT 3
63289: NEG
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 1
63297: NEG
63298: PUSH
63299: LD_INT 4
63301: NEG
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: LD_INT 1
63309: NEG
63310: PUSH
63311: LD_INT 5
63313: NEG
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 2
63321: PUSH
63322: LD_INT 3
63324: NEG
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: PUSH
63330: LD_INT 2
63332: NEG
63333: PUSH
63334: LD_INT 5
63336: NEG
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: PUSH
63342: LD_INT 3
63344: PUSH
63345: LD_INT 0
63347: PUSH
63348: EMPTY
63349: LIST
63350: LIST
63351: PUSH
63352: LD_INT 3
63354: PUSH
63355: LD_INT 1
63357: NEG
63358: PUSH
63359: EMPTY
63360: LIST
63361: LIST
63362: PUSH
63363: LD_INT 4
63365: PUSH
63366: LD_INT 0
63368: PUSH
63369: EMPTY
63370: LIST
63371: LIST
63372: PUSH
63373: LD_INT 4
63375: PUSH
63376: LD_INT 1
63378: PUSH
63379: EMPTY
63380: LIST
63381: LIST
63382: PUSH
63383: LD_INT 3
63385: PUSH
63386: LD_INT 1
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: PUSH
63393: LD_INT 2
63395: PUSH
63396: LD_INT 0
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: PUSH
63403: LD_INT 2
63405: PUSH
63406: LD_INT 1
63408: NEG
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: PUSH
63414: LD_INT 2
63416: PUSH
63417: LD_INT 2
63419: NEG
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 4
63427: PUSH
63428: LD_INT 2
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 4
63437: PUSH
63438: LD_INT 4
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 4
63447: PUSH
63448: LD_INT 3
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: LD_INT 5
63457: PUSH
63458: LD_INT 4
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: PUSH
63465: LD_INT 5
63467: PUSH
63468: LD_INT 5
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: PUSH
63475: LD_INT 4
63477: PUSH
63478: LD_INT 5
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PUSH
63485: LD_INT 3
63487: PUSH
63488: LD_INT 4
63490: PUSH
63491: EMPTY
63492: LIST
63493: LIST
63494: PUSH
63495: LD_INT 3
63497: PUSH
63498: LD_INT 3
63500: PUSH
63501: EMPTY
63502: LIST
63503: LIST
63504: PUSH
63505: LD_INT 5
63507: PUSH
63508: LD_INT 3
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 3
63517: PUSH
63518: LD_INT 5
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: LIST
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: LIST
63570: LIST
63571: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
63572: LD_ADDR_VAR 0 33
63576: PUSH
63577: LD_INT 4
63579: NEG
63580: PUSH
63581: LD_INT 4
63583: NEG
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: PUSH
63589: LD_INT 4
63591: NEG
63592: PUSH
63593: LD_INT 5
63595: NEG
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_INT 3
63603: NEG
63604: PUSH
63605: LD_INT 4
63607: NEG
63608: PUSH
63609: EMPTY
63610: LIST
63611: LIST
63612: PUSH
63613: LD_INT 3
63615: NEG
63616: PUSH
63617: LD_INT 3
63619: NEG
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 4
63627: NEG
63628: PUSH
63629: LD_INT 3
63631: NEG
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: LD_INT 5
63639: NEG
63640: PUSH
63641: LD_INT 4
63643: NEG
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: PUSH
63649: LD_INT 5
63651: NEG
63652: PUSH
63653: LD_INT 5
63655: NEG
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: LD_INT 3
63663: NEG
63664: PUSH
63665: LD_INT 5
63667: NEG
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: LD_INT 5
63675: NEG
63676: PUSH
63677: LD_INT 3
63679: NEG
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: LD_INT 0
63687: PUSH
63688: LD_INT 3
63690: NEG
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: PUSH
63696: LD_INT 0
63698: PUSH
63699: LD_INT 4
63701: NEG
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: PUSH
63707: LD_INT 1
63709: PUSH
63710: LD_INT 3
63712: NEG
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: PUSH
63718: LD_INT 1
63720: PUSH
63721: LD_INT 2
63723: NEG
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PUSH
63729: LD_INT 0
63731: PUSH
63732: LD_INT 2
63734: NEG
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: LD_INT 1
63742: NEG
63743: PUSH
63744: LD_INT 3
63746: NEG
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: PUSH
63752: LD_INT 1
63754: NEG
63755: PUSH
63756: LD_INT 4
63758: NEG
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: PUSH
63764: LD_INT 2
63766: PUSH
63767: LD_INT 2
63769: NEG
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: LD_INT 2
63777: NEG
63778: PUSH
63779: LD_INT 4
63781: NEG
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 4
63789: PUSH
63790: LD_INT 0
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 4
63799: PUSH
63800: LD_INT 1
63802: NEG
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 5
63810: PUSH
63811: LD_INT 0
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: LD_INT 5
63820: PUSH
63821: LD_INT 1
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: LD_INT 4
63830: PUSH
63831: LD_INT 1
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: PUSH
63838: LD_INT 3
63840: PUSH
63841: LD_INT 0
63843: PUSH
63844: EMPTY
63845: LIST
63846: LIST
63847: PUSH
63848: LD_INT 3
63850: PUSH
63851: LD_INT 1
63853: NEG
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: LD_INT 3
63861: PUSH
63862: LD_INT 2
63864: NEG
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: LD_INT 5
63872: PUSH
63873: LD_INT 2
63875: PUSH
63876: EMPTY
63877: LIST
63878: LIST
63879: PUSH
63880: LD_INT 3
63882: PUSH
63883: LD_INT 3
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PUSH
63890: LD_INT 3
63892: PUSH
63893: LD_INT 2
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 4
63902: PUSH
63903: LD_INT 3
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 4
63912: PUSH
63913: LD_INT 4
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PUSH
63920: LD_INT 3
63922: PUSH
63923: LD_INT 4
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: PUSH
63930: LD_INT 2
63932: PUSH
63933: LD_INT 3
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 2
63942: PUSH
63943: LD_INT 2
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: LD_INT 4
63952: PUSH
63953: LD_INT 2
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: PUSH
63960: LD_INT 2
63962: PUSH
63963: LD_INT 4
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: LD_INT 0
63972: PUSH
63973: LD_INT 4
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: PUSH
63980: LD_INT 0
63982: PUSH
63983: LD_INT 3
63985: PUSH
63986: EMPTY
63987: LIST
63988: LIST
63989: PUSH
63990: LD_INT 1
63992: PUSH
63993: LD_INT 4
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: PUSH
64000: LD_INT 1
64002: PUSH
64003: LD_INT 5
64005: PUSH
64006: EMPTY
64007: LIST
64008: LIST
64009: PUSH
64010: LD_INT 0
64012: PUSH
64013: LD_INT 5
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: PUSH
64020: LD_INT 1
64022: NEG
64023: PUSH
64024: LD_INT 4
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: LD_INT 1
64033: NEG
64034: PUSH
64035: LD_INT 3
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PUSH
64042: LD_INT 2
64044: PUSH
64045: LD_INT 5
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: LD_INT 2
64054: NEG
64055: PUSH
64056: LD_INT 3
64058: PUSH
64059: EMPTY
64060: LIST
64061: LIST
64062: PUSH
64063: EMPTY
64064: LIST
64065: LIST
64066: LIST
64067: LIST
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: LIST
64073: LIST
64074: LIST
64075: LIST
64076: LIST
64077: LIST
64078: LIST
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: LIST
64091: LIST
64092: LIST
64093: LIST
64094: LIST
64095: LIST
64096: LIST
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: LIST
64102: LIST
64103: LIST
64104: LIST
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
64110: LD_ADDR_VAR 0 34
64114: PUSH
64115: LD_INT 0
64117: PUSH
64118: LD_INT 4
64120: NEG
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 0
64128: PUSH
64129: LD_INT 5
64131: NEG
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: PUSH
64137: LD_INT 1
64139: PUSH
64140: LD_INT 4
64142: NEG
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: LD_INT 1
64150: PUSH
64151: LD_INT 3
64153: NEG
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: PUSH
64159: LD_INT 0
64161: PUSH
64162: LD_INT 3
64164: NEG
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: LD_INT 1
64172: NEG
64173: PUSH
64174: LD_INT 4
64176: NEG
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: LD_INT 1
64184: NEG
64185: PUSH
64186: LD_INT 5
64188: NEG
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PUSH
64194: LD_INT 2
64196: PUSH
64197: LD_INT 3
64199: NEG
64200: PUSH
64201: EMPTY
64202: LIST
64203: LIST
64204: PUSH
64205: LD_INT 2
64207: NEG
64208: PUSH
64209: LD_INT 5
64211: NEG
64212: PUSH
64213: EMPTY
64214: LIST
64215: LIST
64216: PUSH
64217: LD_INT 3
64219: PUSH
64220: LD_INT 0
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: PUSH
64227: LD_INT 3
64229: PUSH
64230: LD_INT 1
64232: NEG
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: PUSH
64238: LD_INT 4
64240: PUSH
64241: LD_INT 0
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: PUSH
64248: LD_INT 4
64250: PUSH
64251: LD_INT 1
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: LD_INT 3
64260: PUSH
64261: LD_INT 1
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 2
64270: PUSH
64271: LD_INT 0
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: PUSH
64278: LD_INT 2
64280: PUSH
64281: LD_INT 1
64283: NEG
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: PUSH
64289: LD_INT 2
64291: PUSH
64292: LD_INT 2
64294: NEG
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: PUSH
64300: LD_INT 4
64302: PUSH
64303: LD_INT 2
64305: PUSH
64306: EMPTY
64307: LIST
64308: LIST
64309: PUSH
64310: LD_INT 4
64312: PUSH
64313: LD_INT 4
64315: PUSH
64316: EMPTY
64317: LIST
64318: LIST
64319: PUSH
64320: LD_INT 4
64322: PUSH
64323: LD_INT 3
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: PUSH
64330: LD_INT 5
64332: PUSH
64333: LD_INT 4
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: PUSH
64340: LD_INT 5
64342: PUSH
64343: LD_INT 5
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: LD_INT 4
64352: PUSH
64353: LD_INT 5
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 3
64362: PUSH
64363: LD_INT 4
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: LD_INT 3
64372: PUSH
64373: LD_INT 3
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: PUSH
64380: LD_INT 5
64382: PUSH
64383: LD_INT 3
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: PUSH
64390: LD_INT 3
64392: PUSH
64393: LD_INT 5
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PUSH
64400: LD_INT 0
64402: PUSH
64403: LD_INT 3
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: LD_INT 0
64412: PUSH
64413: LD_INT 2
64415: PUSH
64416: EMPTY
64417: LIST
64418: LIST
64419: PUSH
64420: LD_INT 1
64422: PUSH
64423: LD_INT 3
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: LD_INT 1
64432: PUSH
64433: LD_INT 4
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: PUSH
64440: LD_INT 0
64442: PUSH
64443: LD_INT 4
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: PUSH
64450: LD_INT 1
64452: NEG
64453: PUSH
64454: LD_INT 3
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: LD_INT 1
64463: NEG
64464: PUSH
64465: LD_INT 2
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PUSH
64472: LD_INT 2
64474: PUSH
64475: LD_INT 4
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: PUSH
64482: LD_INT 2
64484: NEG
64485: PUSH
64486: LD_INT 2
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: PUSH
64493: LD_INT 4
64495: NEG
64496: PUSH
64497: LD_INT 0
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: PUSH
64504: LD_INT 4
64506: NEG
64507: PUSH
64508: LD_INT 1
64510: NEG
64511: PUSH
64512: EMPTY
64513: LIST
64514: LIST
64515: PUSH
64516: LD_INT 3
64518: NEG
64519: PUSH
64520: LD_INT 0
64522: PUSH
64523: EMPTY
64524: LIST
64525: LIST
64526: PUSH
64527: LD_INT 3
64529: NEG
64530: PUSH
64531: LD_INT 1
64533: PUSH
64534: EMPTY
64535: LIST
64536: LIST
64537: PUSH
64538: LD_INT 4
64540: NEG
64541: PUSH
64542: LD_INT 1
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: PUSH
64549: LD_INT 5
64551: NEG
64552: PUSH
64553: LD_INT 0
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: PUSH
64560: LD_INT 5
64562: NEG
64563: PUSH
64564: LD_INT 1
64566: NEG
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PUSH
64572: LD_INT 5
64574: NEG
64575: PUSH
64576: LD_INT 2
64578: NEG
64579: PUSH
64580: EMPTY
64581: LIST
64582: LIST
64583: PUSH
64584: LD_INT 3
64586: NEG
64587: PUSH
64588: LD_INT 2
64590: PUSH
64591: EMPTY
64592: LIST
64593: LIST
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: LIST
64601: LIST
64602: LIST
64603: LIST
64604: LIST
64605: LIST
64606: LIST
64607: LIST
64608: LIST
64609: LIST
64610: LIST
64611: LIST
64612: LIST
64613: LIST
64614: LIST
64615: LIST
64616: LIST
64617: LIST
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: LIST
64623: LIST
64624: LIST
64625: LIST
64626: LIST
64627: LIST
64628: LIST
64629: LIST
64630: LIST
64631: LIST
64632: LIST
64633: LIST
64634: LIST
64635: LIST
64636: LIST
64637: LIST
64638: LIST
64639: LIST
64640: LIST
64641: ST_TO_ADDR
// end ; end ;
64642: GO 64645
64644: POP
// case btype of b_depot , b_warehouse :
64645: LD_VAR 0 1
64649: PUSH
64650: LD_INT 0
64652: DOUBLE
64653: EQUAL
64654: IFTRUE 64664
64656: LD_INT 1
64658: DOUBLE
64659: EQUAL
64660: IFTRUE 64664
64662: GO 64865
64664: POP
// case nation of nation_american :
64665: LD_VAR 0 5
64669: PUSH
64670: LD_INT 1
64672: DOUBLE
64673: EQUAL
64674: IFTRUE 64678
64676: GO 64734
64678: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
64679: LD_ADDR_VAR 0 9
64683: PUSH
64684: LD_VAR 0 11
64688: PUSH
64689: LD_VAR 0 12
64693: PUSH
64694: LD_VAR 0 13
64698: PUSH
64699: LD_VAR 0 14
64703: PUSH
64704: LD_VAR 0 15
64708: PUSH
64709: LD_VAR 0 16
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: LIST
64718: LIST
64719: LIST
64720: LIST
64721: PUSH
64722: LD_VAR 0 4
64726: PUSH
64727: LD_INT 1
64729: PLUS
64730: ARRAY
64731: ST_TO_ADDR
64732: GO 64863
64734: LD_INT 2
64736: DOUBLE
64737: EQUAL
64738: IFTRUE 64742
64740: GO 64798
64742: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
64743: LD_ADDR_VAR 0 9
64747: PUSH
64748: LD_VAR 0 17
64752: PUSH
64753: LD_VAR 0 18
64757: PUSH
64758: LD_VAR 0 19
64762: PUSH
64763: LD_VAR 0 20
64767: PUSH
64768: LD_VAR 0 21
64772: PUSH
64773: LD_VAR 0 22
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: LIST
64782: LIST
64783: LIST
64784: LIST
64785: PUSH
64786: LD_VAR 0 4
64790: PUSH
64791: LD_INT 1
64793: PLUS
64794: ARRAY
64795: ST_TO_ADDR
64796: GO 64863
64798: LD_INT 3
64800: DOUBLE
64801: EQUAL
64802: IFTRUE 64806
64804: GO 64862
64806: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64807: LD_ADDR_VAR 0 9
64811: PUSH
64812: LD_VAR 0 23
64816: PUSH
64817: LD_VAR 0 24
64821: PUSH
64822: LD_VAR 0 25
64826: PUSH
64827: LD_VAR 0 26
64831: PUSH
64832: LD_VAR 0 27
64836: PUSH
64837: LD_VAR 0 28
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: LIST
64846: LIST
64847: LIST
64848: LIST
64849: PUSH
64850: LD_VAR 0 4
64854: PUSH
64855: LD_INT 1
64857: PLUS
64858: ARRAY
64859: ST_TO_ADDR
64860: GO 64863
64862: POP
64863: GO 65418
64865: LD_INT 2
64867: DOUBLE
64868: EQUAL
64869: IFTRUE 64879
64871: LD_INT 3
64873: DOUBLE
64874: EQUAL
64875: IFTRUE 64879
64877: GO 64935
64879: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64880: LD_ADDR_VAR 0 9
64884: PUSH
64885: LD_VAR 0 29
64889: PUSH
64890: LD_VAR 0 30
64894: PUSH
64895: LD_VAR 0 31
64899: PUSH
64900: LD_VAR 0 32
64904: PUSH
64905: LD_VAR 0 33
64909: PUSH
64910: LD_VAR 0 34
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: LIST
64919: LIST
64920: LIST
64921: LIST
64922: PUSH
64923: LD_VAR 0 4
64927: PUSH
64928: LD_INT 1
64930: PLUS
64931: ARRAY
64932: ST_TO_ADDR
64933: GO 65418
64935: LD_INT 16
64937: DOUBLE
64938: EQUAL
64939: IFTRUE 64997
64941: LD_INT 17
64943: DOUBLE
64944: EQUAL
64945: IFTRUE 64997
64947: LD_INT 18
64949: DOUBLE
64950: EQUAL
64951: IFTRUE 64997
64953: LD_INT 19
64955: DOUBLE
64956: EQUAL
64957: IFTRUE 64997
64959: LD_INT 22
64961: DOUBLE
64962: EQUAL
64963: IFTRUE 64997
64965: LD_INT 20
64967: DOUBLE
64968: EQUAL
64969: IFTRUE 64997
64971: LD_INT 21
64973: DOUBLE
64974: EQUAL
64975: IFTRUE 64997
64977: LD_INT 23
64979: DOUBLE
64980: EQUAL
64981: IFTRUE 64997
64983: LD_INT 24
64985: DOUBLE
64986: EQUAL
64987: IFTRUE 64997
64989: LD_INT 25
64991: DOUBLE
64992: EQUAL
64993: IFTRUE 64997
64995: GO 65053
64997: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64998: LD_ADDR_VAR 0 9
65002: PUSH
65003: LD_VAR 0 35
65007: PUSH
65008: LD_VAR 0 36
65012: PUSH
65013: LD_VAR 0 37
65017: PUSH
65018: LD_VAR 0 38
65022: PUSH
65023: LD_VAR 0 39
65027: PUSH
65028: LD_VAR 0 40
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: LIST
65037: LIST
65038: LIST
65039: LIST
65040: PUSH
65041: LD_VAR 0 4
65045: PUSH
65046: LD_INT 1
65048: PLUS
65049: ARRAY
65050: ST_TO_ADDR
65051: GO 65418
65053: LD_INT 6
65055: DOUBLE
65056: EQUAL
65057: IFTRUE 65109
65059: LD_INT 7
65061: DOUBLE
65062: EQUAL
65063: IFTRUE 65109
65065: LD_INT 8
65067: DOUBLE
65068: EQUAL
65069: IFTRUE 65109
65071: LD_INT 13
65073: DOUBLE
65074: EQUAL
65075: IFTRUE 65109
65077: LD_INT 12
65079: DOUBLE
65080: EQUAL
65081: IFTRUE 65109
65083: LD_INT 15
65085: DOUBLE
65086: EQUAL
65087: IFTRUE 65109
65089: LD_INT 11
65091: DOUBLE
65092: EQUAL
65093: IFTRUE 65109
65095: LD_INT 14
65097: DOUBLE
65098: EQUAL
65099: IFTRUE 65109
65101: LD_INT 10
65103: DOUBLE
65104: EQUAL
65105: IFTRUE 65109
65107: GO 65165
65109: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
65110: LD_ADDR_VAR 0 9
65114: PUSH
65115: LD_VAR 0 41
65119: PUSH
65120: LD_VAR 0 42
65124: PUSH
65125: LD_VAR 0 43
65129: PUSH
65130: LD_VAR 0 44
65134: PUSH
65135: LD_VAR 0 45
65139: PUSH
65140: LD_VAR 0 46
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: LIST
65149: LIST
65150: LIST
65151: LIST
65152: PUSH
65153: LD_VAR 0 4
65157: PUSH
65158: LD_INT 1
65160: PLUS
65161: ARRAY
65162: ST_TO_ADDR
65163: GO 65418
65165: LD_INT 36
65167: DOUBLE
65168: EQUAL
65169: IFTRUE 65173
65171: GO 65229
65173: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
65174: LD_ADDR_VAR 0 9
65178: PUSH
65179: LD_VAR 0 47
65183: PUSH
65184: LD_VAR 0 48
65188: PUSH
65189: LD_VAR 0 49
65193: PUSH
65194: LD_VAR 0 50
65198: PUSH
65199: LD_VAR 0 51
65203: PUSH
65204: LD_VAR 0 52
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: LIST
65213: LIST
65214: LIST
65215: LIST
65216: PUSH
65217: LD_VAR 0 4
65221: PUSH
65222: LD_INT 1
65224: PLUS
65225: ARRAY
65226: ST_TO_ADDR
65227: GO 65418
65229: LD_INT 4
65231: DOUBLE
65232: EQUAL
65233: IFTRUE 65255
65235: LD_INT 5
65237: DOUBLE
65238: EQUAL
65239: IFTRUE 65255
65241: LD_INT 34
65243: DOUBLE
65244: EQUAL
65245: IFTRUE 65255
65247: LD_INT 37
65249: DOUBLE
65250: EQUAL
65251: IFTRUE 65255
65253: GO 65311
65255: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
65256: LD_ADDR_VAR 0 9
65260: PUSH
65261: LD_VAR 0 53
65265: PUSH
65266: LD_VAR 0 54
65270: PUSH
65271: LD_VAR 0 55
65275: PUSH
65276: LD_VAR 0 56
65280: PUSH
65281: LD_VAR 0 57
65285: PUSH
65286: LD_VAR 0 58
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: LIST
65295: LIST
65296: LIST
65297: LIST
65298: PUSH
65299: LD_VAR 0 4
65303: PUSH
65304: LD_INT 1
65306: PLUS
65307: ARRAY
65308: ST_TO_ADDR
65309: GO 65418
65311: LD_INT 31
65313: DOUBLE
65314: EQUAL
65315: IFTRUE 65361
65317: LD_INT 32
65319: DOUBLE
65320: EQUAL
65321: IFTRUE 65361
65323: LD_INT 33
65325: DOUBLE
65326: EQUAL
65327: IFTRUE 65361
65329: LD_INT 27
65331: DOUBLE
65332: EQUAL
65333: IFTRUE 65361
65335: LD_INT 26
65337: DOUBLE
65338: EQUAL
65339: IFTRUE 65361
65341: LD_INT 28
65343: DOUBLE
65344: EQUAL
65345: IFTRUE 65361
65347: LD_INT 29
65349: DOUBLE
65350: EQUAL
65351: IFTRUE 65361
65353: LD_INT 30
65355: DOUBLE
65356: EQUAL
65357: IFTRUE 65361
65359: GO 65417
65361: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
65362: LD_ADDR_VAR 0 9
65366: PUSH
65367: LD_VAR 0 59
65371: PUSH
65372: LD_VAR 0 60
65376: PUSH
65377: LD_VAR 0 61
65381: PUSH
65382: LD_VAR 0 62
65386: PUSH
65387: LD_VAR 0 63
65391: PUSH
65392: LD_VAR 0 64
65396: PUSH
65397: EMPTY
65398: LIST
65399: LIST
65400: LIST
65401: LIST
65402: LIST
65403: LIST
65404: PUSH
65405: LD_VAR 0 4
65409: PUSH
65410: LD_INT 1
65412: PLUS
65413: ARRAY
65414: ST_TO_ADDR
65415: GO 65418
65417: POP
// temp_list2 = [ ] ;
65418: LD_ADDR_VAR 0 10
65422: PUSH
65423: EMPTY
65424: ST_TO_ADDR
// for i in temp_list do
65425: LD_ADDR_VAR 0 8
65429: PUSH
65430: LD_VAR 0 9
65434: PUSH
65435: FOR_IN
65436: IFFALSE 65488
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
65438: LD_ADDR_VAR 0 10
65442: PUSH
65443: LD_VAR 0 10
65447: PUSH
65448: LD_VAR 0 8
65452: PUSH
65453: LD_INT 1
65455: ARRAY
65456: PUSH
65457: LD_VAR 0 2
65461: PLUS
65462: PUSH
65463: LD_VAR 0 8
65467: PUSH
65468: LD_INT 2
65470: ARRAY
65471: PUSH
65472: LD_VAR 0 3
65476: PLUS
65477: PUSH
65478: EMPTY
65479: LIST
65480: LIST
65481: PUSH
65482: EMPTY
65483: LIST
65484: ADD
65485: ST_TO_ADDR
65486: GO 65435
65488: POP
65489: POP
// result = temp_list2 ;
65490: LD_ADDR_VAR 0 7
65494: PUSH
65495: LD_VAR 0 10
65499: ST_TO_ADDR
// end ;
65500: LD_VAR 0 7
65504: RET
// export function EnemyInRange ( unit , dist ) ; begin
65505: LD_INT 0
65507: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
65508: LD_ADDR_VAR 0 3
65512: PUSH
65513: LD_VAR 0 1
65517: PPUSH
65518: CALL_OW 255
65522: PPUSH
65523: LD_VAR 0 1
65527: PPUSH
65528: CALL_OW 250
65532: PPUSH
65533: LD_VAR 0 1
65537: PPUSH
65538: CALL_OW 251
65542: PPUSH
65543: LD_VAR 0 2
65547: PPUSH
65548: CALL 38907 0 4
65552: PUSH
65553: LD_INT 4
65555: ARRAY
65556: ST_TO_ADDR
// end ;
65557: LD_VAR 0 3
65561: RET
// export function PlayerSeeMe ( unit ) ; begin
65562: LD_INT 0
65564: PPUSH
// result := See ( your_side , unit ) ;
65565: LD_ADDR_VAR 0 2
65569: PUSH
65570: LD_OWVAR 2
65574: PPUSH
65575: LD_VAR 0 1
65579: PPUSH
65580: CALL_OW 292
65584: ST_TO_ADDR
// end ;
65585: LD_VAR 0 2
65589: RET
// export function ReverseDir ( unit ) ; begin
65590: LD_INT 0
65592: PPUSH
// if not unit then
65593: LD_VAR 0 1
65597: NOT
65598: IFFALSE 65602
// exit ;
65600: GO 65625
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
65602: LD_ADDR_VAR 0 2
65606: PUSH
65607: LD_VAR 0 1
65611: PPUSH
65612: CALL_OW 254
65616: PUSH
65617: LD_INT 3
65619: PLUS
65620: PUSH
65621: LD_INT 6
65623: MOD
65624: ST_TO_ADDR
// end ;
65625: LD_VAR 0 2
65629: RET
// export function ReverseArray ( array ) ; var i ; begin
65630: LD_INT 0
65632: PPUSH
65633: PPUSH
// if not array then
65634: LD_VAR 0 1
65638: NOT
65639: IFFALSE 65643
// exit ;
65641: GO 65698
// result := [ ] ;
65643: LD_ADDR_VAR 0 2
65647: PUSH
65648: EMPTY
65649: ST_TO_ADDR
// for i := array downto 1 do
65650: LD_ADDR_VAR 0 3
65654: PUSH
65655: DOUBLE
65656: LD_VAR 0 1
65660: INC
65661: ST_TO_ADDR
65662: LD_INT 1
65664: PUSH
65665: FOR_DOWNTO
65666: IFFALSE 65696
// result := Join ( result , array [ i ] ) ;
65668: LD_ADDR_VAR 0 2
65672: PUSH
65673: LD_VAR 0 2
65677: PPUSH
65678: LD_VAR 0 1
65682: PUSH
65683: LD_VAR 0 3
65687: ARRAY
65688: PPUSH
65689: CALL 70342 0 2
65693: ST_TO_ADDR
65694: GO 65665
65696: POP
65697: POP
// end ;
65698: LD_VAR 0 2
65702: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
65703: LD_INT 0
65705: PPUSH
65706: PPUSH
65707: PPUSH
65708: PPUSH
65709: PPUSH
65710: PPUSH
// if not unit or not hexes then
65711: LD_VAR 0 1
65715: NOT
65716: PUSH
65717: LD_VAR 0 2
65721: NOT
65722: OR
65723: IFFALSE 65727
// exit ;
65725: GO 65850
// dist := 9999 ;
65727: LD_ADDR_VAR 0 5
65731: PUSH
65732: LD_INT 9999
65734: ST_TO_ADDR
// for i = 1 to hexes do
65735: LD_ADDR_VAR 0 4
65739: PUSH
65740: DOUBLE
65741: LD_INT 1
65743: DEC
65744: ST_TO_ADDR
65745: LD_VAR 0 2
65749: PUSH
65750: FOR_TO
65751: IFFALSE 65838
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65753: LD_ADDR_VAR 0 6
65757: PUSH
65758: LD_VAR 0 1
65762: PPUSH
65763: LD_VAR 0 2
65767: PUSH
65768: LD_VAR 0 4
65772: ARRAY
65773: PUSH
65774: LD_INT 1
65776: ARRAY
65777: PPUSH
65778: LD_VAR 0 2
65782: PUSH
65783: LD_VAR 0 4
65787: ARRAY
65788: PUSH
65789: LD_INT 2
65791: ARRAY
65792: PPUSH
65793: CALL_OW 297
65797: ST_TO_ADDR
// if tdist < dist then
65798: LD_VAR 0 6
65802: PUSH
65803: LD_VAR 0 5
65807: LESS
65808: IFFALSE 65836
// begin hex := hexes [ i ] ;
65810: LD_ADDR_VAR 0 8
65814: PUSH
65815: LD_VAR 0 2
65819: PUSH
65820: LD_VAR 0 4
65824: ARRAY
65825: ST_TO_ADDR
// dist := tdist ;
65826: LD_ADDR_VAR 0 5
65830: PUSH
65831: LD_VAR 0 6
65835: ST_TO_ADDR
// end ; end ;
65836: GO 65750
65838: POP
65839: POP
// result := hex ;
65840: LD_ADDR_VAR 0 3
65844: PUSH
65845: LD_VAR 0 8
65849: ST_TO_ADDR
// end ;
65850: LD_VAR 0 3
65854: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65855: LD_INT 0
65857: PPUSH
65858: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65859: LD_VAR 0 1
65863: NOT
65864: PUSH
65865: LD_VAR 0 1
65869: PUSH
65870: LD_INT 21
65872: PUSH
65873: LD_INT 2
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: PUSH
65880: LD_INT 23
65882: PUSH
65883: LD_INT 2
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: PPUSH
65894: CALL_OW 69
65898: IN
65899: NOT
65900: OR
65901: IFFALSE 65905
// exit ;
65903: GO 65952
// for i = 1 to 3 do
65905: LD_ADDR_VAR 0 3
65909: PUSH
65910: DOUBLE
65911: LD_INT 1
65913: DEC
65914: ST_TO_ADDR
65915: LD_INT 3
65917: PUSH
65918: FOR_TO
65919: IFFALSE 65950
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65921: LD_VAR 0 1
65925: PPUSH
65926: CALL_OW 250
65930: PPUSH
65931: LD_VAR 0 1
65935: PPUSH
65936: CALL_OW 251
65940: PPUSH
65941: LD_INT 1
65943: PPUSH
65944: CALL_OW 453
65948: GO 65918
65950: POP
65951: POP
// end ;
65952: LD_VAR 0 2
65956: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65957: LD_INT 0
65959: PPUSH
65960: PPUSH
65961: PPUSH
65962: PPUSH
65963: PPUSH
65964: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
65965: LD_VAR 0 1
65969: NOT
65970: PUSH
65971: LD_VAR 0 2
65975: NOT
65976: OR
65977: PUSH
65978: LD_VAR 0 1
65982: PPUSH
65983: CALL_OW 314
65987: OR
65988: IFFALSE 65992
// exit ;
65990: GO 66459
// if GetLives ( i ) < 250 then
65992: LD_VAR 0 4
65996: PPUSH
65997: CALL_OW 256
66001: PUSH
66002: LD_INT 250
66004: LESS
66005: IFFALSE 66018
// begin ComAutodestruct ( i ) ;
66007: LD_VAR 0 4
66011: PPUSH
66012: CALL 65855 0 1
// exit ;
66016: GO 66459
// end ; x := GetX ( enemy_unit ) ;
66018: LD_ADDR_VAR 0 7
66022: PUSH
66023: LD_VAR 0 2
66027: PPUSH
66028: CALL_OW 250
66032: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
66033: LD_ADDR_VAR 0 8
66037: PUSH
66038: LD_VAR 0 2
66042: PPUSH
66043: CALL_OW 251
66047: ST_TO_ADDR
// if not x or not y then
66048: LD_VAR 0 7
66052: NOT
66053: PUSH
66054: LD_VAR 0 8
66058: NOT
66059: OR
66060: IFFALSE 66064
// exit ;
66062: GO 66459
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
66064: LD_ADDR_VAR 0 6
66068: PUSH
66069: LD_VAR 0 7
66073: PPUSH
66074: LD_INT 0
66076: PPUSH
66077: LD_INT 4
66079: PPUSH
66080: CALL_OW 272
66084: PUSH
66085: LD_VAR 0 8
66089: PPUSH
66090: LD_INT 0
66092: PPUSH
66093: LD_INT 4
66095: PPUSH
66096: CALL_OW 273
66100: PUSH
66101: EMPTY
66102: LIST
66103: LIST
66104: PUSH
66105: LD_VAR 0 7
66109: PPUSH
66110: LD_INT 1
66112: PPUSH
66113: LD_INT 4
66115: PPUSH
66116: CALL_OW 272
66120: PUSH
66121: LD_VAR 0 8
66125: PPUSH
66126: LD_INT 1
66128: PPUSH
66129: LD_INT 4
66131: PPUSH
66132: CALL_OW 273
66136: PUSH
66137: EMPTY
66138: LIST
66139: LIST
66140: PUSH
66141: LD_VAR 0 7
66145: PPUSH
66146: LD_INT 2
66148: PPUSH
66149: LD_INT 4
66151: PPUSH
66152: CALL_OW 272
66156: PUSH
66157: LD_VAR 0 8
66161: PPUSH
66162: LD_INT 2
66164: PPUSH
66165: LD_INT 4
66167: PPUSH
66168: CALL_OW 273
66172: PUSH
66173: EMPTY
66174: LIST
66175: LIST
66176: PUSH
66177: LD_VAR 0 7
66181: PPUSH
66182: LD_INT 3
66184: PPUSH
66185: LD_INT 4
66187: PPUSH
66188: CALL_OW 272
66192: PUSH
66193: LD_VAR 0 8
66197: PPUSH
66198: LD_INT 3
66200: PPUSH
66201: LD_INT 4
66203: PPUSH
66204: CALL_OW 273
66208: PUSH
66209: EMPTY
66210: LIST
66211: LIST
66212: PUSH
66213: LD_VAR 0 7
66217: PPUSH
66218: LD_INT 4
66220: PPUSH
66221: LD_INT 4
66223: PPUSH
66224: CALL_OW 272
66228: PUSH
66229: LD_VAR 0 8
66233: PPUSH
66234: LD_INT 4
66236: PPUSH
66237: LD_INT 4
66239: PPUSH
66240: CALL_OW 273
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: PUSH
66249: LD_VAR 0 7
66253: PPUSH
66254: LD_INT 5
66256: PPUSH
66257: LD_INT 4
66259: PPUSH
66260: CALL_OW 272
66264: PUSH
66265: LD_VAR 0 8
66269: PPUSH
66270: LD_INT 5
66272: PPUSH
66273: LD_INT 4
66275: PPUSH
66276: CALL_OW 273
66280: PUSH
66281: EMPTY
66282: LIST
66283: LIST
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: LIST
66289: LIST
66290: LIST
66291: LIST
66292: ST_TO_ADDR
// for i = tmp downto 1 do
66293: LD_ADDR_VAR 0 4
66297: PUSH
66298: DOUBLE
66299: LD_VAR 0 6
66303: INC
66304: ST_TO_ADDR
66305: LD_INT 1
66307: PUSH
66308: FOR_DOWNTO
66309: IFFALSE 66410
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
66311: LD_VAR 0 6
66315: PUSH
66316: LD_VAR 0 4
66320: ARRAY
66321: PUSH
66322: LD_INT 1
66324: ARRAY
66325: PPUSH
66326: LD_VAR 0 6
66330: PUSH
66331: LD_VAR 0 4
66335: ARRAY
66336: PUSH
66337: LD_INT 2
66339: ARRAY
66340: PPUSH
66341: CALL_OW 488
66345: NOT
66346: PUSH
66347: LD_VAR 0 6
66351: PUSH
66352: LD_VAR 0 4
66356: ARRAY
66357: PUSH
66358: LD_INT 1
66360: ARRAY
66361: PPUSH
66362: LD_VAR 0 6
66366: PUSH
66367: LD_VAR 0 4
66371: ARRAY
66372: PUSH
66373: LD_INT 2
66375: ARRAY
66376: PPUSH
66377: CALL_OW 428
66381: PUSH
66382: LD_INT 0
66384: NONEQUAL
66385: OR
66386: IFFALSE 66408
// tmp := Delete ( tmp , i ) ;
66388: LD_ADDR_VAR 0 6
66392: PUSH
66393: LD_VAR 0 6
66397: PPUSH
66398: LD_VAR 0 4
66402: PPUSH
66403: CALL_OW 3
66407: ST_TO_ADDR
66408: GO 66308
66410: POP
66411: POP
// j := GetClosestHex ( unit , tmp ) ;
66412: LD_ADDR_VAR 0 5
66416: PUSH
66417: LD_VAR 0 1
66421: PPUSH
66422: LD_VAR 0 6
66426: PPUSH
66427: CALL 65703 0 2
66431: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
66432: LD_VAR 0 1
66436: PPUSH
66437: LD_VAR 0 5
66441: PUSH
66442: LD_INT 1
66444: ARRAY
66445: PPUSH
66446: LD_VAR 0 5
66450: PUSH
66451: LD_INT 2
66453: ARRAY
66454: PPUSH
66455: CALL_OW 111
// end ;
66459: LD_VAR 0 3
66463: RET
// export function PrepareApemanSoldier ( ) ; begin
66464: LD_INT 0
66466: PPUSH
// uc_nation := 0 ;
66467: LD_ADDR_OWVAR 21
66471: PUSH
66472: LD_INT 0
66474: ST_TO_ADDR
// hc_sex := sex_male ;
66475: LD_ADDR_OWVAR 27
66479: PUSH
66480: LD_INT 1
66482: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
66483: LD_ADDR_OWVAR 28
66487: PUSH
66488: LD_INT 15
66490: ST_TO_ADDR
// hc_gallery :=  ;
66491: LD_ADDR_OWVAR 33
66495: PUSH
66496: LD_STRING 
66498: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66499: LD_ADDR_OWVAR 31
66503: PUSH
66504: LD_INT 0
66506: PPUSH
66507: LD_INT 3
66509: PPUSH
66510: CALL_OW 12
66514: PUSH
66515: LD_INT 0
66517: PPUSH
66518: LD_INT 3
66520: PPUSH
66521: CALL_OW 12
66525: PUSH
66526: LD_INT 0
66528: PUSH
66529: LD_INT 0
66531: PUSH
66532: EMPTY
66533: LIST
66534: LIST
66535: LIST
66536: LIST
66537: ST_TO_ADDR
// end ;
66538: LD_VAR 0 1
66542: RET
// export function PrepareApemanEngineer ( ) ; begin
66543: LD_INT 0
66545: PPUSH
// uc_nation := 0 ;
66546: LD_ADDR_OWVAR 21
66550: PUSH
66551: LD_INT 0
66553: ST_TO_ADDR
// hc_sex := sex_male ;
66554: LD_ADDR_OWVAR 27
66558: PUSH
66559: LD_INT 1
66561: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
66562: LD_ADDR_OWVAR 28
66566: PUSH
66567: LD_INT 16
66569: ST_TO_ADDR
// hc_gallery :=  ;
66570: LD_ADDR_OWVAR 33
66574: PUSH
66575: LD_STRING 
66577: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66578: LD_ADDR_OWVAR 31
66582: PUSH
66583: LD_INT 0
66585: PPUSH
66586: LD_INT 3
66588: PPUSH
66589: CALL_OW 12
66593: PUSH
66594: LD_INT 0
66596: PPUSH
66597: LD_INT 3
66599: PPUSH
66600: CALL_OW 12
66604: PUSH
66605: LD_INT 0
66607: PUSH
66608: LD_INT 0
66610: PUSH
66611: EMPTY
66612: LIST
66613: LIST
66614: LIST
66615: LIST
66616: ST_TO_ADDR
// end ;
66617: LD_VAR 0 1
66621: RET
// export function PrepareApeman ( agressivity ) ; begin
66622: LD_INT 0
66624: PPUSH
// uc_side := 0 ;
66625: LD_ADDR_OWVAR 20
66629: PUSH
66630: LD_INT 0
66632: ST_TO_ADDR
// uc_nation := 0 ;
66633: LD_ADDR_OWVAR 21
66637: PUSH
66638: LD_INT 0
66640: ST_TO_ADDR
// hc_sex := sex_male ;
66641: LD_ADDR_OWVAR 27
66645: PUSH
66646: LD_INT 1
66648: ST_TO_ADDR
// hc_class := class_apeman ;
66649: LD_ADDR_OWVAR 28
66653: PUSH
66654: LD_INT 12
66656: ST_TO_ADDR
// hc_gallery :=  ;
66657: LD_ADDR_OWVAR 33
66661: PUSH
66662: LD_STRING 
66664: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66665: LD_ADDR_OWVAR 35
66669: PUSH
66670: LD_VAR 0 1
66674: NEG
66675: PPUSH
66676: LD_VAR 0 1
66680: PPUSH
66681: CALL_OW 12
66685: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66686: LD_ADDR_OWVAR 31
66690: PUSH
66691: LD_INT 0
66693: PPUSH
66694: LD_INT 3
66696: PPUSH
66697: CALL_OW 12
66701: PUSH
66702: LD_INT 0
66704: PPUSH
66705: LD_INT 3
66707: PPUSH
66708: CALL_OW 12
66712: PUSH
66713: LD_INT 0
66715: PUSH
66716: LD_INT 0
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: LIST
66723: LIST
66724: ST_TO_ADDR
// end ;
66725: LD_VAR 0 2
66729: RET
// export function PrepareTiger ( agressivity ) ; begin
66730: LD_INT 0
66732: PPUSH
// uc_side := 0 ;
66733: LD_ADDR_OWVAR 20
66737: PUSH
66738: LD_INT 0
66740: ST_TO_ADDR
// uc_nation := 0 ;
66741: LD_ADDR_OWVAR 21
66745: PUSH
66746: LD_INT 0
66748: ST_TO_ADDR
// hc_class := class_tiger ;
66749: LD_ADDR_OWVAR 28
66753: PUSH
66754: LD_INT 14
66756: ST_TO_ADDR
// hc_gallery :=  ;
66757: LD_ADDR_OWVAR 33
66761: PUSH
66762: LD_STRING 
66764: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66765: LD_ADDR_OWVAR 35
66769: PUSH
66770: LD_VAR 0 1
66774: NEG
66775: PPUSH
66776: LD_VAR 0 1
66780: PPUSH
66781: CALL_OW 12
66785: ST_TO_ADDR
// end ;
66786: LD_VAR 0 2
66790: RET
// export function PrepareEnchidna ( ) ; begin
66791: LD_INT 0
66793: PPUSH
// uc_side := 0 ;
66794: LD_ADDR_OWVAR 20
66798: PUSH
66799: LD_INT 0
66801: ST_TO_ADDR
// uc_nation := 0 ;
66802: LD_ADDR_OWVAR 21
66806: PUSH
66807: LD_INT 0
66809: ST_TO_ADDR
// hc_class := class_baggie ;
66810: LD_ADDR_OWVAR 28
66814: PUSH
66815: LD_INT 13
66817: ST_TO_ADDR
// hc_gallery :=  ;
66818: LD_ADDR_OWVAR 33
66822: PUSH
66823: LD_STRING 
66825: ST_TO_ADDR
// end ;
66826: LD_VAR 0 1
66830: RET
// export function PrepareFrog ( ) ; begin
66831: LD_INT 0
66833: PPUSH
// uc_side := 0 ;
66834: LD_ADDR_OWVAR 20
66838: PUSH
66839: LD_INT 0
66841: ST_TO_ADDR
// uc_nation := 0 ;
66842: LD_ADDR_OWVAR 21
66846: PUSH
66847: LD_INT 0
66849: ST_TO_ADDR
// hc_class := class_frog ;
66850: LD_ADDR_OWVAR 28
66854: PUSH
66855: LD_INT 19
66857: ST_TO_ADDR
// hc_gallery :=  ;
66858: LD_ADDR_OWVAR 33
66862: PUSH
66863: LD_STRING 
66865: ST_TO_ADDR
// end ;
66866: LD_VAR 0 1
66870: RET
// export function PrepareFish ( ) ; begin
66871: LD_INT 0
66873: PPUSH
// uc_side := 0 ;
66874: LD_ADDR_OWVAR 20
66878: PUSH
66879: LD_INT 0
66881: ST_TO_ADDR
// uc_nation := 0 ;
66882: LD_ADDR_OWVAR 21
66886: PUSH
66887: LD_INT 0
66889: ST_TO_ADDR
// hc_class := class_fish ;
66890: LD_ADDR_OWVAR 28
66894: PUSH
66895: LD_INT 20
66897: ST_TO_ADDR
// hc_gallery :=  ;
66898: LD_ADDR_OWVAR 33
66902: PUSH
66903: LD_STRING 
66905: ST_TO_ADDR
// end ;
66906: LD_VAR 0 1
66910: RET
// export function PrepareBird ( ) ; begin
66911: LD_INT 0
66913: PPUSH
// uc_side := 0 ;
66914: LD_ADDR_OWVAR 20
66918: PUSH
66919: LD_INT 0
66921: ST_TO_ADDR
// uc_nation := 0 ;
66922: LD_ADDR_OWVAR 21
66926: PUSH
66927: LD_INT 0
66929: ST_TO_ADDR
// hc_class := class_phororhacos ;
66930: LD_ADDR_OWVAR 28
66934: PUSH
66935: LD_INT 18
66937: ST_TO_ADDR
// hc_gallery :=  ;
66938: LD_ADDR_OWVAR 33
66942: PUSH
66943: LD_STRING 
66945: ST_TO_ADDR
// end ;
66946: LD_VAR 0 1
66950: RET
// export function PrepareHorse ( ) ; begin
66951: LD_INT 0
66953: PPUSH
// uc_side := 0 ;
66954: LD_ADDR_OWVAR 20
66958: PUSH
66959: LD_INT 0
66961: ST_TO_ADDR
// uc_nation := 0 ;
66962: LD_ADDR_OWVAR 21
66966: PUSH
66967: LD_INT 0
66969: ST_TO_ADDR
// hc_class := class_horse ;
66970: LD_ADDR_OWVAR 28
66974: PUSH
66975: LD_INT 21
66977: ST_TO_ADDR
// hc_gallery :=  ;
66978: LD_ADDR_OWVAR 33
66982: PUSH
66983: LD_STRING 
66985: ST_TO_ADDR
// end ;
66986: LD_VAR 0 1
66990: RET
// export function PrepareMastodont ( ) ; begin
66991: LD_INT 0
66993: PPUSH
// uc_side := 0 ;
66994: LD_ADDR_OWVAR 20
66998: PUSH
66999: LD_INT 0
67001: ST_TO_ADDR
// uc_nation := 0 ;
67002: LD_ADDR_OWVAR 21
67006: PUSH
67007: LD_INT 0
67009: ST_TO_ADDR
// vc_chassis := class_mastodont ;
67010: LD_ADDR_OWVAR 37
67014: PUSH
67015: LD_INT 31
67017: ST_TO_ADDR
// vc_control := control_rider ;
67018: LD_ADDR_OWVAR 38
67022: PUSH
67023: LD_INT 4
67025: ST_TO_ADDR
// end ;
67026: LD_VAR 0 1
67030: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
67031: LD_INT 0
67033: PPUSH
67034: PPUSH
67035: PPUSH
// uc_side = 0 ;
67036: LD_ADDR_OWVAR 20
67040: PUSH
67041: LD_INT 0
67043: ST_TO_ADDR
// uc_nation = 0 ;
67044: LD_ADDR_OWVAR 21
67048: PUSH
67049: LD_INT 0
67051: ST_TO_ADDR
// InitHc_All ( ) ;
67052: CALL_OW 584
// InitVc ;
67056: CALL_OW 20
// if mastodonts then
67060: LD_VAR 0 6
67064: IFFALSE 67131
// for i = 1 to mastodonts do
67066: LD_ADDR_VAR 0 11
67070: PUSH
67071: DOUBLE
67072: LD_INT 1
67074: DEC
67075: ST_TO_ADDR
67076: LD_VAR 0 6
67080: PUSH
67081: FOR_TO
67082: IFFALSE 67129
// begin vc_chassis := 31 ;
67084: LD_ADDR_OWVAR 37
67088: PUSH
67089: LD_INT 31
67091: ST_TO_ADDR
// vc_control := control_rider ;
67092: LD_ADDR_OWVAR 38
67096: PUSH
67097: LD_INT 4
67099: ST_TO_ADDR
// animal := CreateVehicle ;
67100: LD_ADDR_VAR 0 12
67104: PUSH
67105: CALL_OW 45
67109: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67110: LD_VAR 0 12
67114: PPUSH
67115: LD_VAR 0 8
67119: PPUSH
67120: LD_INT 0
67122: PPUSH
67123: CALL 69259 0 3
// end ;
67127: GO 67081
67129: POP
67130: POP
// if horses then
67131: LD_VAR 0 5
67135: IFFALSE 67202
// for i = 1 to horses do
67137: LD_ADDR_VAR 0 11
67141: PUSH
67142: DOUBLE
67143: LD_INT 1
67145: DEC
67146: ST_TO_ADDR
67147: LD_VAR 0 5
67151: PUSH
67152: FOR_TO
67153: IFFALSE 67200
// begin hc_class := 21 ;
67155: LD_ADDR_OWVAR 28
67159: PUSH
67160: LD_INT 21
67162: ST_TO_ADDR
// hc_gallery :=  ;
67163: LD_ADDR_OWVAR 33
67167: PUSH
67168: LD_STRING 
67170: ST_TO_ADDR
// animal := CreateHuman ;
67171: LD_ADDR_VAR 0 12
67175: PUSH
67176: CALL_OW 44
67180: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67181: LD_VAR 0 12
67185: PPUSH
67186: LD_VAR 0 8
67190: PPUSH
67191: LD_INT 0
67193: PPUSH
67194: CALL 69259 0 3
// end ;
67198: GO 67152
67200: POP
67201: POP
// if birds then
67202: LD_VAR 0 1
67206: IFFALSE 67273
// for i = 1 to birds do
67208: LD_ADDR_VAR 0 11
67212: PUSH
67213: DOUBLE
67214: LD_INT 1
67216: DEC
67217: ST_TO_ADDR
67218: LD_VAR 0 1
67222: PUSH
67223: FOR_TO
67224: IFFALSE 67271
// begin hc_class = 18 ;
67226: LD_ADDR_OWVAR 28
67230: PUSH
67231: LD_INT 18
67233: ST_TO_ADDR
// hc_gallery =  ;
67234: LD_ADDR_OWVAR 33
67238: PUSH
67239: LD_STRING 
67241: ST_TO_ADDR
// animal := CreateHuman ;
67242: LD_ADDR_VAR 0 12
67246: PUSH
67247: CALL_OW 44
67251: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67252: LD_VAR 0 12
67256: PPUSH
67257: LD_VAR 0 8
67261: PPUSH
67262: LD_INT 0
67264: PPUSH
67265: CALL 69259 0 3
// end ;
67269: GO 67223
67271: POP
67272: POP
// if tigers then
67273: LD_VAR 0 2
67277: IFFALSE 67361
// for i = 1 to tigers do
67279: LD_ADDR_VAR 0 11
67283: PUSH
67284: DOUBLE
67285: LD_INT 1
67287: DEC
67288: ST_TO_ADDR
67289: LD_VAR 0 2
67293: PUSH
67294: FOR_TO
67295: IFFALSE 67359
// begin hc_class = class_tiger ;
67297: LD_ADDR_OWVAR 28
67301: PUSH
67302: LD_INT 14
67304: ST_TO_ADDR
// hc_gallery =  ;
67305: LD_ADDR_OWVAR 33
67309: PUSH
67310: LD_STRING 
67312: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
67313: LD_ADDR_OWVAR 35
67317: PUSH
67318: LD_INT 7
67320: NEG
67321: PPUSH
67322: LD_INT 7
67324: PPUSH
67325: CALL_OW 12
67329: ST_TO_ADDR
// animal := CreateHuman ;
67330: LD_ADDR_VAR 0 12
67334: PUSH
67335: CALL_OW 44
67339: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67340: LD_VAR 0 12
67344: PPUSH
67345: LD_VAR 0 8
67349: PPUSH
67350: LD_INT 0
67352: PPUSH
67353: CALL 69259 0 3
// end ;
67357: GO 67294
67359: POP
67360: POP
// if apemans then
67361: LD_VAR 0 3
67365: IFFALSE 67488
// for i = 1 to apemans do
67367: LD_ADDR_VAR 0 11
67371: PUSH
67372: DOUBLE
67373: LD_INT 1
67375: DEC
67376: ST_TO_ADDR
67377: LD_VAR 0 3
67381: PUSH
67382: FOR_TO
67383: IFFALSE 67486
// begin hc_class = class_apeman ;
67385: LD_ADDR_OWVAR 28
67389: PUSH
67390: LD_INT 12
67392: ST_TO_ADDR
// hc_gallery =  ;
67393: LD_ADDR_OWVAR 33
67397: PUSH
67398: LD_STRING 
67400: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
67401: LD_ADDR_OWVAR 35
67405: PUSH
67406: LD_INT 2
67408: NEG
67409: PPUSH
67410: LD_INT 2
67412: PPUSH
67413: CALL_OW 12
67417: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
67418: LD_ADDR_OWVAR 31
67422: PUSH
67423: LD_INT 1
67425: PPUSH
67426: LD_INT 3
67428: PPUSH
67429: CALL_OW 12
67433: PUSH
67434: LD_INT 1
67436: PPUSH
67437: LD_INT 3
67439: PPUSH
67440: CALL_OW 12
67444: PUSH
67445: LD_INT 0
67447: PUSH
67448: LD_INT 0
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: LIST
67455: LIST
67456: ST_TO_ADDR
// animal := CreateHuman ;
67457: LD_ADDR_VAR 0 12
67461: PUSH
67462: CALL_OW 44
67466: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67467: LD_VAR 0 12
67471: PPUSH
67472: LD_VAR 0 8
67476: PPUSH
67477: LD_INT 0
67479: PPUSH
67480: CALL 69259 0 3
// end ;
67484: GO 67382
67486: POP
67487: POP
// if enchidnas then
67488: LD_VAR 0 4
67492: IFFALSE 67559
// for i = 1 to enchidnas do
67494: LD_ADDR_VAR 0 11
67498: PUSH
67499: DOUBLE
67500: LD_INT 1
67502: DEC
67503: ST_TO_ADDR
67504: LD_VAR 0 4
67508: PUSH
67509: FOR_TO
67510: IFFALSE 67557
// begin hc_class = 13 ;
67512: LD_ADDR_OWVAR 28
67516: PUSH
67517: LD_INT 13
67519: ST_TO_ADDR
// hc_gallery =  ;
67520: LD_ADDR_OWVAR 33
67524: PUSH
67525: LD_STRING 
67527: ST_TO_ADDR
// animal := CreateHuman ;
67528: LD_ADDR_VAR 0 12
67532: PUSH
67533: CALL_OW 44
67537: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67538: LD_VAR 0 12
67542: PPUSH
67543: LD_VAR 0 8
67547: PPUSH
67548: LD_INT 0
67550: PPUSH
67551: CALL 69259 0 3
// end ;
67555: GO 67509
67557: POP
67558: POP
// if fishes then
67559: LD_VAR 0 7
67563: IFFALSE 67630
// for i = 1 to fishes do
67565: LD_ADDR_VAR 0 11
67569: PUSH
67570: DOUBLE
67571: LD_INT 1
67573: DEC
67574: ST_TO_ADDR
67575: LD_VAR 0 7
67579: PUSH
67580: FOR_TO
67581: IFFALSE 67628
// begin hc_class = 20 ;
67583: LD_ADDR_OWVAR 28
67587: PUSH
67588: LD_INT 20
67590: ST_TO_ADDR
// hc_gallery =  ;
67591: LD_ADDR_OWVAR 33
67595: PUSH
67596: LD_STRING 
67598: ST_TO_ADDR
// animal := CreateHuman ;
67599: LD_ADDR_VAR 0 12
67603: PUSH
67604: CALL_OW 44
67608: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
67609: LD_VAR 0 12
67613: PPUSH
67614: LD_VAR 0 9
67618: PPUSH
67619: LD_INT 0
67621: PPUSH
67622: CALL 69259 0 3
// end ;
67626: GO 67580
67628: POP
67629: POP
// end ;
67630: LD_VAR 0 10
67634: RET
// export function WantHeal ( sci , unit ) ; begin
67635: LD_INT 0
67637: PPUSH
// if GetTaskList ( sci ) > 0 then
67638: LD_VAR 0 1
67642: PPUSH
67643: CALL_OW 437
67647: PUSH
67648: LD_INT 0
67650: GREATER
67651: IFFALSE 67721
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
67653: LD_VAR 0 1
67657: PPUSH
67658: CALL_OW 437
67662: PUSH
67663: LD_INT 1
67665: ARRAY
67666: PUSH
67667: LD_INT 1
67669: ARRAY
67670: PUSH
67671: LD_STRING l
67673: EQUAL
67674: PUSH
67675: LD_VAR 0 1
67679: PPUSH
67680: CALL_OW 437
67684: PUSH
67685: LD_INT 1
67687: ARRAY
67688: PUSH
67689: LD_INT 4
67691: ARRAY
67692: PUSH
67693: LD_VAR 0 2
67697: EQUAL
67698: AND
67699: IFFALSE 67711
// result := true else
67701: LD_ADDR_VAR 0 3
67705: PUSH
67706: LD_INT 1
67708: ST_TO_ADDR
67709: GO 67719
// result := false ;
67711: LD_ADDR_VAR 0 3
67715: PUSH
67716: LD_INT 0
67718: ST_TO_ADDR
// end else
67719: GO 67729
// result := false ;
67721: LD_ADDR_VAR 0 3
67725: PUSH
67726: LD_INT 0
67728: ST_TO_ADDR
// end ;
67729: LD_VAR 0 3
67733: RET
// export function HealTarget ( sci ) ; begin
67734: LD_INT 0
67736: PPUSH
// if not sci then
67737: LD_VAR 0 1
67741: NOT
67742: IFFALSE 67746
// exit ;
67744: GO 67811
// result := 0 ;
67746: LD_ADDR_VAR 0 2
67750: PUSH
67751: LD_INT 0
67753: ST_TO_ADDR
// if GetTaskList ( sci ) then
67754: LD_VAR 0 1
67758: PPUSH
67759: CALL_OW 437
67763: IFFALSE 67811
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
67765: LD_VAR 0 1
67769: PPUSH
67770: CALL_OW 437
67774: PUSH
67775: LD_INT 1
67777: ARRAY
67778: PUSH
67779: LD_INT 1
67781: ARRAY
67782: PUSH
67783: LD_STRING l
67785: EQUAL
67786: IFFALSE 67811
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
67788: LD_ADDR_VAR 0 2
67792: PUSH
67793: LD_VAR 0 1
67797: PPUSH
67798: CALL_OW 437
67802: PUSH
67803: LD_INT 1
67805: ARRAY
67806: PUSH
67807: LD_INT 4
67809: ARRAY
67810: ST_TO_ADDR
// end ;
67811: LD_VAR 0 2
67815: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
67816: LD_INT 0
67818: PPUSH
67819: PPUSH
67820: PPUSH
67821: PPUSH
// if not base_units then
67822: LD_VAR 0 1
67826: NOT
67827: IFFALSE 67831
// exit ;
67829: GO 67918
// result := false ;
67831: LD_ADDR_VAR 0 2
67835: PUSH
67836: LD_INT 0
67838: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
67839: LD_ADDR_VAR 0 5
67843: PUSH
67844: LD_VAR 0 1
67848: PPUSH
67849: LD_INT 21
67851: PUSH
67852: LD_INT 3
67854: PUSH
67855: EMPTY
67856: LIST
67857: LIST
67858: PPUSH
67859: CALL_OW 72
67863: ST_TO_ADDR
// if not tmp then
67864: LD_VAR 0 5
67868: NOT
67869: IFFALSE 67873
// exit ;
67871: GO 67918
// for i in tmp do
67873: LD_ADDR_VAR 0 3
67877: PUSH
67878: LD_VAR 0 5
67882: PUSH
67883: FOR_IN
67884: IFFALSE 67916
// begin result := EnemyInRange ( i , 22 ) ;
67886: LD_ADDR_VAR 0 2
67890: PUSH
67891: LD_VAR 0 3
67895: PPUSH
67896: LD_INT 22
67898: PPUSH
67899: CALL 65505 0 2
67903: ST_TO_ADDR
// if result then
67904: LD_VAR 0 2
67908: IFFALSE 67914
// exit ;
67910: POP
67911: POP
67912: GO 67918
// end ;
67914: GO 67883
67916: POP
67917: POP
// end ;
67918: LD_VAR 0 2
67922: RET
// export function FilterByTag ( units , tag ) ; begin
67923: LD_INT 0
67925: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
67926: LD_ADDR_VAR 0 3
67930: PUSH
67931: LD_VAR 0 1
67935: PPUSH
67936: LD_INT 120
67938: PUSH
67939: LD_VAR 0 2
67943: PUSH
67944: EMPTY
67945: LIST
67946: LIST
67947: PPUSH
67948: CALL_OW 72
67952: ST_TO_ADDR
// end ;
67953: LD_VAR 0 3
67957: RET
// export function IsDriver ( un ) ; begin
67958: LD_INT 0
67960: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67961: LD_ADDR_VAR 0 2
67965: PUSH
67966: LD_VAR 0 1
67970: PUSH
67971: LD_INT 55
67973: PUSH
67974: EMPTY
67975: LIST
67976: PPUSH
67977: CALL_OW 69
67981: IN
67982: ST_TO_ADDR
// end ;
67983: LD_VAR 0 2
67987: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67988: LD_INT 0
67990: PPUSH
67991: PPUSH
// list := [ ] ;
67992: LD_ADDR_VAR 0 5
67996: PUSH
67997: EMPTY
67998: ST_TO_ADDR
// case d of 0 :
67999: LD_VAR 0 3
68003: PUSH
68004: LD_INT 0
68006: DOUBLE
68007: EQUAL
68008: IFTRUE 68012
68010: GO 68145
68012: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
68013: LD_ADDR_VAR 0 5
68017: PUSH
68018: LD_VAR 0 1
68022: PUSH
68023: LD_INT 4
68025: MINUS
68026: PUSH
68027: LD_VAR 0 2
68031: PUSH
68032: LD_INT 4
68034: MINUS
68035: PUSH
68036: LD_INT 2
68038: PUSH
68039: EMPTY
68040: LIST
68041: LIST
68042: LIST
68043: PUSH
68044: LD_VAR 0 1
68048: PUSH
68049: LD_INT 3
68051: MINUS
68052: PUSH
68053: LD_VAR 0 2
68057: PUSH
68058: LD_INT 1
68060: PUSH
68061: EMPTY
68062: LIST
68063: LIST
68064: LIST
68065: PUSH
68066: LD_VAR 0 1
68070: PUSH
68071: LD_INT 4
68073: PLUS
68074: PUSH
68075: LD_VAR 0 2
68079: PUSH
68080: LD_INT 4
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: LIST
68087: PUSH
68088: LD_VAR 0 1
68092: PUSH
68093: LD_INT 3
68095: PLUS
68096: PUSH
68097: LD_VAR 0 2
68101: PUSH
68102: LD_INT 3
68104: PLUS
68105: PUSH
68106: LD_INT 5
68108: PUSH
68109: EMPTY
68110: LIST
68111: LIST
68112: LIST
68113: PUSH
68114: LD_VAR 0 1
68118: PUSH
68119: LD_VAR 0 2
68123: PUSH
68124: LD_INT 4
68126: PLUS
68127: PUSH
68128: LD_INT 0
68130: PUSH
68131: EMPTY
68132: LIST
68133: LIST
68134: LIST
68135: PUSH
68136: EMPTY
68137: LIST
68138: LIST
68139: LIST
68140: LIST
68141: LIST
68142: ST_TO_ADDR
// end ; 1 :
68143: GO 68843
68145: LD_INT 1
68147: DOUBLE
68148: EQUAL
68149: IFTRUE 68153
68151: GO 68286
68153: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
68154: LD_ADDR_VAR 0 5
68158: PUSH
68159: LD_VAR 0 1
68163: PUSH
68164: LD_VAR 0 2
68168: PUSH
68169: LD_INT 4
68171: MINUS
68172: PUSH
68173: LD_INT 3
68175: PUSH
68176: EMPTY
68177: LIST
68178: LIST
68179: LIST
68180: PUSH
68181: LD_VAR 0 1
68185: PUSH
68186: LD_INT 3
68188: MINUS
68189: PUSH
68190: LD_VAR 0 2
68194: PUSH
68195: LD_INT 3
68197: MINUS
68198: PUSH
68199: LD_INT 2
68201: PUSH
68202: EMPTY
68203: LIST
68204: LIST
68205: LIST
68206: PUSH
68207: LD_VAR 0 1
68211: PUSH
68212: LD_INT 4
68214: MINUS
68215: PUSH
68216: LD_VAR 0 2
68220: PUSH
68221: LD_INT 1
68223: PUSH
68224: EMPTY
68225: LIST
68226: LIST
68227: LIST
68228: PUSH
68229: LD_VAR 0 1
68233: PUSH
68234: LD_VAR 0 2
68238: PUSH
68239: LD_INT 3
68241: PLUS
68242: PUSH
68243: LD_INT 0
68245: PUSH
68246: EMPTY
68247: LIST
68248: LIST
68249: LIST
68250: PUSH
68251: LD_VAR 0 1
68255: PUSH
68256: LD_INT 4
68258: PLUS
68259: PUSH
68260: LD_VAR 0 2
68264: PUSH
68265: LD_INT 4
68267: PLUS
68268: PUSH
68269: LD_INT 5
68271: PUSH
68272: EMPTY
68273: LIST
68274: LIST
68275: LIST
68276: PUSH
68277: EMPTY
68278: LIST
68279: LIST
68280: LIST
68281: LIST
68282: LIST
68283: ST_TO_ADDR
// end ; 2 :
68284: GO 68843
68286: LD_INT 2
68288: DOUBLE
68289: EQUAL
68290: IFTRUE 68294
68292: GO 68423
68294: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
68295: LD_ADDR_VAR 0 5
68299: PUSH
68300: LD_VAR 0 1
68304: PUSH
68305: LD_VAR 0 2
68309: PUSH
68310: LD_INT 3
68312: MINUS
68313: PUSH
68314: LD_INT 3
68316: PUSH
68317: EMPTY
68318: LIST
68319: LIST
68320: LIST
68321: PUSH
68322: LD_VAR 0 1
68326: PUSH
68327: LD_INT 4
68329: PLUS
68330: PUSH
68331: LD_VAR 0 2
68335: PUSH
68336: LD_INT 4
68338: PUSH
68339: EMPTY
68340: LIST
68341: LIST
68342: LIST
68343: PUSH
68344: LD_VAR 0 1
68348: PUSH
68349: LD_VAR 0 2
68353: PUSH
68354: LD_INT 4
68356: PLUS
68357: PUSH
68358: LD_INT 0
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: LIST
68365: PUSH
68366: LD_VAR 0 1
68370: PUSH
68371: LD_INT 3
68373: MINUS
68374: PUSH
68375: LD_VAR 0 2
68379: PUSH
68380: LD_INT 1
68382: PUSH
68383: EMPTY
68384: LIST
68385: LIST
68386: LIST
68387: PUSH
68388: LD_VAR 0 1
68392: PUSH
68393: LD_INT 4
68395: MINUS
68396: PUSH
68397: LD_VAR 0 2
68401: PUSH
68402: LD_INT 4
68404: MINUS
68405: PUSH
68406: LD_INT 2
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: LIST
68413: PUSH
68414: EMPTY
68415: LIST
68416: LIST
68417: LIST
68418: LIST
68419: LIST
68420: ST_TO_ADDR
// end ; 3 :
68421: GO 68843
68423: LD_INT 3
68425: DOUBLE
68426: EQUAL
68427: IFTRUE 68431
68429: GO 68564
68431: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
68432: LD_ADDR_VAR 0 5
68436: PUSH
68437: LD_VAR 0 1
68441: PUSH
68442: LD_INT 3
68444: PLUS
68445: PUSH
68446: LD_VAR 0 2
68450: PUSH
68451: LD_INT 4
68453: PUSH
68454: EMPTY
68455: LIST
68456: LIST
68457: LIST
68458: PUSH
68459: LD_VAR 0 1
68463: PUSH
68464: LD_INT 4
68466: PLUS
68467: PUSH
68468: LD_VAR 0 2
68472: PUSH
68473: LD_INT 4
68475: PLUS
68476: PUSH
68477: LD_INT 5
68479: PUSH
68480: EMPTY
68481: LIST
68482: LIST
68483: LIST
68484: PUSH
68485: LD_VAR 0 1
68489: PUSH
68490: LD_INT 4
68492: MINUS
68493: PUSH
68494: LD_VAR 0 2
68498: PUSH
68499: LD_INT 1
68501: PUSH
68502: EMPTY
68503: LIST
68504: LIST
68505: LIST
68506: PUSH
68507: LD_VAR 0 1
68511: PUSH
68512: LD_VAR 0 2
68516: PUSH
68517: LD_INT 4
68519: MINUS
68520: PUSH
68521: LD_INT 3
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: LIST
68528: PUSH
68529: LD_VAR 0 1
68533: PUSH
68534: LD_INT 3
68536: MINUS
68537: PUSH
68538: LD_VAR 0 2
68542: PUSH
68543: LD_INT 3
68545: MINUS
68546: PUSH
68547: LD_INT 2
68549: PUSH
68550: EMPTY
68551: LIST
68552: LIST
68553: LIST
68554: PUSH
68555: EMPTY
68556: LIST
68557: LIST
68558: LIST
68559: LIST
68560: LIST
68561: ST_TO_ADDR
// end ; 4 :
68562: GO 68843
68564: LD_INT 4
68566: DOUBLE
68567: EQUAL
68568: IFTRUE 68572
68570: GO 68705
68572: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
68573: LD_ADDR_VAR 0 5
68577: PUSH
68578: LD_VAR 0 1
68582: PUSH
68583: LD_VAR 0 2
68587: PUSH
68588: LD_INT 4
68590: PLUS
68591: PUSH
68592: LD_INT 0
68594: PUSH
68595: EMPTY
68596: LIST
68597: LIST
68598: LIST
68599: PUSH
68600: LD_VAR 0 1
68604: PUSH
68605: LD_INT 3
68607: PLUS
68608: PUSH
68609: LD_VAR 0 2
68613: PUSH
68614: LD_INT 3
68616: PLUS
68617: PUSH
68618: LD_INT 5
68620: PUSH
68621: EMPTY
68622: LIST
68623: LIST
68624: LIST
68625: PUSH
68626: LD_VAR 0 1
68630: PUSH
68631: LD_INT 4
68633: PLUS
68634: PUSH
68635: LD_VAR 0 2
68639: PUSH
68640: LD_INT 4
68642: PUSH
68643: EMPTY
68644: LIST
68645: LIST
68646: LIST
68647: PUSH
68648: LD_VAR 0 1
68652: PUSH
68653: LD_VAR 0 2
68657: PUSH
68658: LD_INT 3
68660: MINUS
68661: PUSH
68662: LD_INT 3
68664: PUSH
68665: EMPTY
68666: LIST
68667: LIST
68668: LIST
68669: PUSH
68670: LD_VAR 0 1
68674: PUSH
68675: LD_INT 4
68677: MINUS
68678: PUSH
68679: LD_VAR 0 2
68683: PUSH
68684: LD_INT 4
68686: MINUS
68687: PUSH
68688: LD_INT 2
68690: PUSH
68691: EMPTY
68692: LIST
68693: LIST
68694: LIST
68695: PUSH
68696: EMPTY
68697: LIST
68698: LIST
68699: LIST
68700: LIST
68701: LIST
68702: ST_TO_ADDR
// end ; 5 :
68703: GO 68843
68705: LD_INT 5
68707: DOUBLE
68708: EQUAL
68709: IFTRUE 68713
68711: GO 68842
68713: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
68714: LD_ADDR_VAR 0 5
68718: PUSH
68719: LD_VAR 0 1
68723: PUSH
68724: LD_INT 4
68726: MINUS
68727: PUSH
68728: LD_VAR 0 2
68732: PUSH
68733: LD_INT 1
68735: PUSH
68736: EMPTY
68737: LIST
68738: LIST
68739: LIST
68740: PUSH
68741: LD_VAR 0 1
68745: PUSH
68746: LD_VAR 0 2
68750: PUSH
68751: LD_INT 4
68753: MINUS
68754: PUSH
68755: LD_INT 3
68757: PUSH
68758: EMPTY
68759: LIST
68760: LIST
68761: LIST
68762: PUSH
68763: LD_VAR 0 1
68767: PUSH
68768: LD_INT 4
68770: PLUS
68771: PUSH
68772: LD_VAR 0 2
68776: PUSH
68777: LD_INT 4
68779: PLUS
68780: PUSH
68781: LD_INT 5
68783: PUSH
68784: EMPTY
68785: LIST
68786: LIST
68787: LIST
68788: PUSH
68789: LD_VAR 0 1
68793: PUSH
68794: LD_INT 3
68796: PLUS
68797: PUSH
68798: LD_VAR 0 2
68802: PUSH
68803: LD_INT 4
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: LIST
68810: PUSH
68811: LD_VAR 0 1
68815: PUSH
68816: LD_VAR 0 2
68820: PUSH
68821: LD_INT 3
68823: PLUS
68824: PUSH
68825: LD_INT 0
68827: PUSH
68828: EMPTY
68829: LIST
68830: LIST
68831: LIST
68832: PUSH
68833: EMPTY
68834: LIST
68835: LIST
68836: LIST
68837: LIST
68838: LIST
68839: ST_TO_ADDR
// end ; end ;
68840: GO 68843
68842: POP
// result := list ;
68843: LD_ADDR_VAR 0 4
68847: PUSH
68848: LD_VAR 0 5
68852: ST_TO_ADDR
// end ;
68853: LD_VAR 0 4
68857: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68858: LD_INT 0
68860: PPUSH
68861: PPUSH
68862: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68863: LD_VAR 0 1
68867: NOT
68868: PUSH
68869: LD_VAR 0 2
68873: PUSH
68874: LD_INT 1
68876: PUSH
68877: LD_INT 2
68879: PUSH
68880: LD_INT 3
68882: PUSH
68883: LD_INT 4
68885: PUSH
68886: EMPTY
68887: LIST
68888: LIST
68889: LIST
68890: LIST
68891: IN
68892: NOT
68893: OR
68894: IFFALSE 68898
// exit ;
68896: GO 68981
// tmp := [ ] ;
68898: LD_ADDR_VAR 0 5
68902: PUSH
68903: EMPTY
68904: ST_TO_ADDR
// for i in units do
68905: LD_ADDR_VAR 0 4
68909: PUSH
68910: LD_VAR 0 1
68914: PUSH
68915: FOR_IN
68916: IFFALSE 68950
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
68918: LD_ADDR_VAR 0 5
68922: PUSH
68923: LD_VAR 0 5
68927: PPUSH
68928: LD_VAR 0 4
68932: PPUSH
68933: LD_VAR 0 2
68937: PPUSH
68938: CALL_OW 259
68942: PPUSH
68943: CALL 70342 0 2
68947: ST_TO_ADDR
68948: GO 68915
68950: POP
68951: POP
// if not tmp then
68952: LD_VAR 0 5
68956: NOT
68957: IFFALSE 68961
// exit ;
68959: GO 68981
// result := SortListByListDesc ( units , tmp ) ;
68961: LD_ADDR_VAR 0 3
68965: PUSH
68966: LD_VAR 0 1
68970: PPUSH
68971: LD_VAR 0 5
68975: PPUSH
68976: CALL_OW 77
68980: ST_TO_ADDR
// end ;
68981: LD_VAR 0 3
68985: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68986: LD_INT 0
68988: PPUSH
68989: PPUSH
68990: PPUSH
// result := false ;
68991: LD_ADDR_VAR 0 3
68995: PUSH
68996: LD_INT 0
68998: ST_TO_ADDR
// if not building then
68999: LD_VAR 0 2
69003: NOT
69004: IFFALSE 69008
// exit ;
69006: GO 69146
// x := GetX ( building ) ;
69008: LD_ADDR_VAR 0 4
69012: PUSH
69013: LD_VAR 0 2
69017: PPUSH
69018: CALL_OW 250
69022: ST_TO_ADDR
// y := GetY ( building ) ;
69023: LD_ADDR_VAR 0 5
69027: PUSH
69028: LD_VAR 0 2
69032: PPUSH
69033: CALL_OW 251
69037: ST_TO_ADDR
// if not x or not y then
69038: LD_VAR 0 4
69042: NOT
69043: PUSH
69044: LD_VAR 0 5
69048: NOT
69049: OR
69050: IFFALSE 69054
// exit ;
69052: GO 69146
// if GetTaskList ( unit ) then
69054: LD_VAR 0 1
69058: PPUSH
69059: CALL_OW 437
69063: IFFALSE 69146
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69065: LD_STRING e
69067: PUSH
69068: LD_VAR 0 1
69072: PPUSH
69073: CALL_OW 437
69077: PUSH
69078: LD_INT 1
69080: ARRAY
69081: PUSH
69082: LD_INT 1
69084: ARRAY
69085: EQUAL
69086: PUSH
69087: LD_VAR 0 4
69091: PUSH
69092: LD_VAR 0 1
69096: PPUSH
69097: CALL_OW 437
69101: PUSH
69102: LD_INT 1
69104: ARRAY
69105: PUSH
69106: LD_INT 2
69108: ARRAY
69109: EQUAL
69110: AND
69111: PUSH
69112: LD_VAR 0 5
69116: PUSH
69117: LD_VAR 0 1
69121: PPUSH
69122: CALL_OW 437
69126: PUSH
69127: LD_INT 1
69129: ARRAY
69130: PUSH
69131: LD_INT 3
69133: ARRAY
69134: EQUAL
69135: AND
69136: IFFALSE 69146
// result := true end ;
69138: LD_ADDR_VAR 0 3
69142: PUSH
69143: LD_INT 1
69145: ST_TO_ADDR
// end ;
69146: LD_VAR 0 3
69150: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
69151: LD_INT 0
69153: PPUSH
// result := false ;
69154: LD_ADDR_VAR 0 4
69158: PUSH
69159: LD_INT 0
69161: ST_TO_ADDR
// if GetTaskList ( unit ) then
69162: LD_VAR 0 1
69166: PPUSH
69167: CALL_OW 437
69171: IFFALSE 69254
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69173: LD_STRING M
69175: PUSH
69176: LD_VAR 0 1
69180: PPUSH
69181: CALL_OW 437
69185: PUSH
69186: LD_INT 1
69188: ARRAY
69189: PUSH
69190: LD_INT 1
69192: ARRAY
69193: EQUAL
69194: PUSH
69195: LD_VAR 0 2
69199: PUSH
69200: LD_VAR 0 1
69204: PPUSH
69205: CALL_OW 437
69209: PUSH
69210: LD_INT 1
69212: ARRAY
69213: PUSH
69214: LD_INT 2
69216: ARRAY
69217: EQUAL
69218: AND
69219: PUSH
69220: LD_VAR 0 3
69224: PUSH
69225: LD_VAR 0 1
69229: PPUSH
69230: CALL_OW 437
69234: PUSH
69235: LD_INT 1
69237: ARRAY
69238: PUSH
69239: LD_INT 3
69241: ARRAY
69242: EQUAL
69243: AND
69244: IFFALSE 69254
// result := true ;
69246: LD_ADDR_VAR 0 4
69250: PUSH
69251: LD_INT 1
69253: ST_TO_ADDR
// end ; end ;
69254: LD_VAR 0 4
69258: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
69259: LD_INT 0
69261: PPUSH
69262: PPUSH
69263: PPUSH
69264: PPUSH
// if not unit or not area then
69265: LD_VAR 0 1
69269: NOT
69270: PUSH
69271: LD_VAR 0 2
69275: NOT
69276: OR
69277: IFFALSE 69281
// exit ;
69279: GO 69445
// tmp := AreaToList ( area , i ) ;
69281: LD_ADDR_VAR 0 6
69285: PUSH
69286: LD_VAR 0 2
69290: PPUSH
69291: LD_VAR 0 5
69295: PPUSH
69296: CALL_OW 517
69300: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
69301: LD_ADDR_VAR 0 5
69305: PUSH
69306: DOUBLE
69307: LD_INT 1
69309: DEC
69310: ST_TO_ADDR
69311: LD_VAR 0 6
69315: PUSH
69316: LD_INT 1
69318: ARRAY
69319: PUSH
69320: FOR_TO
69321: IFFALSE 69443
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
69323: LD_ADDR_VAR 0 7
69327: PUSH
69328: LD_VAR 0 6
69332: PUSH
69333: LD_INT 1
69335: ARRAY
69336: PUSH
69337: LD_VAR 0 5
69341: ARRAY
69342: PUSH
69343: LD_VAR 0 6
69347: PUSH
69348: LD_INT 2
69350: ARRAY
69351: PUSH
69352: LD_VAR 0 5
69356: ARRAY
69357: PUSH
69358: EMPTY
69359: LIST
69360: LIST
69361: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
69362: LD_VAR 0 7
69366: PUSH
69367: LD_INT 1
69369: ARRAY
69370: PPUSH
69371: LD_VAR 0 7
69375: PUSH
69376: LD_INT 2
69378: ARRAY
69379: PPUSH
69380: CALL_OW 428
69384: PUSH
69385: LD_INT 0
69387: EQUAL
69388: IFFALSE 69441
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
69390: LD_VAR 0 1
69394: PPUSH
69395: LD_VAR 0 7
69399: PUSH
69400: LD_INT 1
69402: ARRAY
69403: PPUSH
69404: LD_VAR 0 7
69408: PUSH
69409: LD_INT 2
69411: ARRAY
69412: PPUSH
69413: LD_VAR 0 3
69417: PPUSH
69418: CALL_OW 48
// result := IsPlaced ( unit ) ;
69422: LD_ADDR_VAR 0 4
69426: PUSH
69427: LD_VAR 0 1
69431: PPUSH
69432: CALL_OW 305
69436: ST_TO_ADDR
// exit ;
69437: POP
69438: POP
69439: GO 69445
// end ; end ;
69441: GO 69320
69443: POP
69444: POP
// end ;
69445: LD_VAR 0 4
69449: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
69450: LD_INT 0
69452: PPUSH
69453: PPUSH
69454: PPUSH
// if not side or side > 8 then
69455: LD_VAR 0 1
69459: NOT
69460: PUSH
69461: LD_VAR 0 1
69465: PUSH
69466: LD_INT 8
69468: GREATER
69469: OR
69470: IFFALSE 69474
// exit ;
69472: GO 69661
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
69474: LD_ADDR_VAR 0 4
69478: PUSH
69479: LD_INT 22
69481: PUSH
69482: LD_VAR 0 1
69486: PUSH
69487: EMPTY
69488: LIST
69489: LIST
69490: PUSH
69491: LD_INT 21
69493: PUSH
69494: LD_INT 3
69496: PUSH
69497: EMPTY
69498: LIST
69499: LIST
69500: PUSH
69501: EMPTY
69502: LIST
69503: LIST
69504: PPUSH
69505: CALL_OW 69
69509: ST_TO_ADDR
// if not tmp then
69510: LD_VAR 0 4
69514: NOT
69515: IFFALSE 69519
// exit ;
69517: GO 69661
// enable_addtolog := true ;
69519: LD_ADDR_OWVAR 81
69523: PUSH
69524: LD_INT 1
69526: ST_TO_ADDR
// AddToLog ( [ ) ;
69527: LD_STRING [
69529: PPUSH
69530: CALL_OW 561
// for i in tmp do
69534: LD_ADDR_VAR 0 3
69538: PUSH
69539: LD_VAR 0 4
69543: PUSH
69544: FOR_IN
69545: IFFALSE 69652
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
69547: LD_STRING [
69549: PUSH
69550: LD_VAR 0 3
69554: PPUSH
69555: CALL_OW 266
69559: STR
69560: PUSH
69561: LD_STRING , 
69563: STR
69564: PUSH
69565: LD_VAR 0 3
69569: PPUSH
69570: CALL_OW 250
69574: STR
69575: PUSH
69576: LD_STRING , 
69578: STR
69579: PUSH
69580: LD_VAR 0 3
69584: PPUSH
69585: CALL_OW 251
69589: STR
69590: PUSH
69591: LD_STRING , 
69593: STR
69594: PUSH
69595: LD_VAR 0 3
69599: PPUSH
69600: CALL_OW 254
69604: STR
69605: PUSH
69606: LD_STRING , 
69608: STR
69609: PUSH
69610: LD_VAR 0 3
69614: PPUSH
69615: LD_INT 1
69617: PPUSH
69618: CALL_OW 268
69622: STR
69623: PUSH
69624: LD_STRING , 
69626: STR
69627: PUSH
69628: LD_VAR 0 3
69632: PPUSH
69633: LD_INT 2
69635: PPUSH
69636: CALL_OW 268
69640: STR
69641: PUSH
69642: LD_STRING ],
69644: STR
69645: PPUSH
69646: CALL_OW 561
// end ;
69650: GO 69544
69652: POP
69653: POP
// AddToLog ( ]; ) ;
69654: LD_STRING ];
69656: PPUSH
69657: CALL_OW 561
// end ;
69661: LD_VAR 0 2
69665: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
69666: LD_INT 0
69668: PPUSH
69669: PPUSH
69670: PPUSH
69671: PPUSH
69672: PPUSH
// if not area or not rate or not max then
69673: LD_VAR 0 1
69677: NOT
69678: PUSH
69679: LD_VAR 0 2
69683: NOT
69684: OR
69685: PUSH
69686: LD_VAR 0 4
69690: NOT
69691: OR
69692: IFFALSE 69696
// exit ;
69694: GO 69885
// while 1 do
69696: LD_INT 1
69698: IFFALSE 69885
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
69700: LD_ADDR_VAR 0 9
69704: PUSH
69705: LD_VAR 0 1
69709: PPUSH
69710: LD_INT 1
69712: PPUSH
69713: CALL_OW 287
69717: PUSH
69718: LD_INT 10
69720: MUL
69721: ST_TO_ADDR
// r := rate / 10 ;
69722: LD_ADDR_VAR 0 7
69726: PUSH
69727: LD_VAR 0 2
69731: PUSH
69732: LD_INT 10
69734: DIVREAL
69735: ST_TO_ADDR
// time := 1 1$00 ;
69736: LD_ADDR_VAR 0 8
69740: PUSH
69741: LD_INT 2100
69743: ST_TO_ADDR
// if amount < min then
69744: LD_VAR 0 9
69748: PUSH
69749: LD_VAR 0 3
69753: LESS
69754: IFFALSE 69772
// r := r * 2 else
69756: LD_ADDR_VAR 0 7
69760: PUSH
69761: LD_VAR 0 7
69765: PUSH
69766: LD_INT 2
69768: MUL
69769: ST_TO_ADDR
69770: GO 69798
// if amount > max then
69772: LD_VAR 0 9
69776: PUSH
69777: LD_VAR 0 4
69781: GREATER
69782: IFFALSE 69798
// r := r / 2 ;
69784: LD_ADDR_VAR 0 7
69788: PUSH
69789: LD_VAR 0 7
69793: PUSH
69794: LD_INT 2
69796: DIVREAL
69797: ST_TO_ADDR
// time := time / r ;
69798: LD_ADDR_VAR 0 8
69802: PUSH
69803: LD_VAR 0 8
69807: PUSH
69808: LD_VAR 0 7
69812: DIVREAL
69813: ST_TO_ADDR
// if time < 0 then
69814: LD_VAR 0 8
69818: PUSH
69819: LD_INT 0
69821: LESS
69822: IFFALSE 69839
// time := time * - 1 ;
69824: LD_ADDR_VAR 0 8
69828: PUSH
69829: LD_VAR 0 8
69833: PUSH
69834: LD_INT 1
69836: NEG
69837: MUL
69838: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
69839: LD_VAR 0 8
69843: PUSH
69844: LD_INT 35
69846: PPUSH
69847: LD_INT 875
69849: PPUSH
69850: CALL_OW 12
69854: PLUS
69855: PPUSH
69856: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69860: LD_INT 1
69862: PPUSH
69863: LD_INT 5
69865: PPUSH
69866: CALL_OW 12
69870: PPUSH
69871: LD_VAR 0 1
69875: PPUSH
69876: LD_INT 1
69878: PPUSH
69879: CALL_OW 55
// end ;
69883: GO 69696
// end ;
69885: LD_VAR 0 5
69889: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69890: LD_INT 0
69892: PPUSH
69893: PPUSH
69894: PPUSH
69895: PPUSH
69896: PPUSH
69897: PPUSH
69898: PPUSH
69899: PPUSH
// if not turrets or not factories then
69900: LD_VAR 0 1
69904: NOT
69905: PUSH
69906: LD_VAR 0 2
69910: NOT
69911: OR
69912: IFFALSE 69916
// exit ;
69914: GO 70223
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69916: LD_ADDR_VAR 0 10
69920: PUSH
69921: LD_INT 5
69923: PUSH
69924: LD_INT 6
69926: PUSH
69927: EMPTY
69928: LIST
69929: LIST
69930: PUSH
69931: LD_INT 2
69933: PUSH
69934: LD_INT 4
69936: PUSH
69937: EMPTY
69938: LIST
69939: LIST
69940: PUSH
69941: LD_INT 3
69943: PUSH
69944: LD_INT 5
69946: PUSH
69947: EMPTY
69948: LIST
69949: LIST
69950: PUSH
69951: EMPTY
69952: LIST
69953: LIST
69954: LIST
69955: PUSH
69956: LD_INT 24
69958: PUSH
69959: LD_INT 25
69961: PUSH
69962: EMPTY
69963: LIST
69964: LIST
69965: PUSH
69966: LD_INT 23
69968: PUSH
69969: LD_INT 27
69971: PUSH
69972: EMPTY
69973: LIST
69974: LIST
69975: PUSH
69976: EMPTY
69977: LIST
69978: LIST
69979: PUSH
69980: LD_INT 42
69982: PUSH
69983: LD_INT 43
69985: PUSH
69986: EMPTY
69987: LIST
69988: LIST
69989: PUSH
69990: LD_INT 44
69992: PUSH
69993: LD_INT 46
69995: PUSH
69996: EMPTY
69997: LIST
69998: LIST
69999: PUSH
70000: LD_INT 45
70002: PUSH
70003: LD_INT 47
70005: PUSH
70006: EMPTY
70007: LIST
70008: LIST
70009: PUSH
70010: EMPTY
70011: LIST
70012: LIST
70013: LIST
70014: PUSH
70015: EMPTY
70016: LIST
70017: LIST
70018: LIST
70019: ST_TO_ADDR
// result := [ ] ;
70020: LD_ADDR_VAR 0 3
70024: PUSH
70025: EMPTY
70026: ST_TO_ADDR
// for i in turrets do
70027: LD_ADDR_VAR 0 4
70031: PUSH
70032: LD_VAR 0 1
70036: PUSH
70037: FOR_IN
70038: IFFALSE 70221
// begin nat := GetNation ( i ) ;
70040: LD_ADDR_VAR 0 7
70044: PUSH
70045: LD_VAR 0 4
70049: PPUSH
70050: CALL_OW 248
70054: ST_TO_ADDR
// weapon := 0 ;
70055: LD_ADDR_VAR 0 8
70059: PUSH
70060: LD_INT 0
70062: ST_TO_ADDR
// if not nat then
70063: LD_VAR 0 7
70067: NOT
70068: IFFALSE 70072
// continue ;
70070: GO 70037
// for j in list [ nat ] do
70072: LD_ADDR_VAR 0 5
70076: PUSH
70077: LD_VAR 0 10
70081: PUSH
70082: LD_VAR 0 7
70086: ARRAY
70087: PUSH
70088: FOR_IN
70089: IFFALSE 70130
// if GetBWeapon ( i ) = j [ 1 ] then
70091: LD_VAR 0 4
70095: PPUSH
70096: CALL_OW 269
70100: PUSH
70101: LD_VAR 0 5
70105: PUSH
70106: LD_INT 1
70108: ARRAY
70109: EQUAL
70110: IFFALSE 70128
// begin weapon := j [ 2 ] ;
70112: LD_ADDR_VAR 0 8
70116: PUSH
70117: LD_VAR 0 5
70121: PUSH
70122: LD_INT 2
70124: ARRAY
70125: ST_TO_ADDR
// break ;
70126: GO 70130
// end ;
70128: GO 70088
70130: POP
70131: POP
// if not weapon then
70132: LD_VAR 0 8
70136: NOT
70137: IFFALSE 70141
// continue ;
70139: GO 70037
// for k in factories do
70141: LD_ADDR_VAR 0 6
70145: PUSH
70146: LD_VAR 0 2
70150: PUSH
70151: FOR_IN
70152: IFFALSE 70217
// begin weapons := AvailableWeaponList ( k ) ;
70154: LD_ADDR_VAR 0 9
70158: PUSH
70159: LD_VAR 0 6
70163: PPUSH
70164: CALL_OW 478
70168: ST_TO_ADDR
// if not weapons then
70169: LD_VAR 0 9
70173: NOT
70174: IFFALSE 70178
// continue ;
70176: GO 70151
// if weapon in weapons then
70178: LD_VAR 0 8
70182: PUSH
70183: LD_VAR 0 9
70187: IN
70188: IFFALSE 70215
// begin result := [ i , weapon ] ;
70190: LD_ADDR_VAR 0 3
70194: PUSH
70195: LD_VAR 0 4
70199: PUSH
70200: LD_VAR 0 8
70204: PUSH
70205: EMPTY
70206: LIST
70207: LIST
70208: ST_TO_ADDR
// exit ;
70209: POP
70210: POP
70211: POP
70212: POP
70213: GO 70223
// end ; end ;
70215: GO 70151
70217: POP
70218: POP
// end ;
70219: GO 70037
70221: POP
70222: POP
// end ;
70223: LD_VAR 0 3
70227: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
70228: LD_INT 0
70230: PPUSH
// if not side or side > 8 then
70231: LD_VAR 0 3
70235: NOT
70236: PUSH
70237: LD_VAR 0 3
70241: PUSH
70242: LD_INT 8
70244: GREATER
70245: OR
70246: IFFALSE 70250
// exit ;
70248: GO 70309
// if not range then
70250: LD_VAR 0 4
70254: NOT
70255: IFFALSE 70266
// range := - 12 ;
70257: LD_ADDR_VAR 0 4
70261: PUSH
70262: LD_INT 12
70264: NEG
70265: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
70266: LD_VAR 0 1
70270: PPUSH
70271: LD_VAR 0 2
70275: PPUSH
70276: LD_VAR 0 3
70280: PPUSH
70281: LD_VAR 0 4
70285: PPUSH
70286: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
70290: LD_VAR 0 1
70294: PPUSH
70295: LD_VAR 0 2
70299: PPUSH
70300: LD_VAR 0 3
70304: PPUSH
70305: CALL_OW 331
// end ;
70309: LD_VAR 0 5
70313: RET
// export function Video ( mode ) ; begin
70314: LD_INT 0
70316: PPUSH
// ingame_video = mode ;
70317: LD_ADDR_OWVAR 52
70321: PUSH
70322: LD_VAR 0 1
70326: ST_TO_ADDR
// interface_hidden = mode ;
70327: LD_ADDR_OWVAR 54
70331: PUSH
70332: LD_VAR 0 1
70336: ST_TO_ADDR
// end ;
70337: LD_VAR 0 2
70341: RET
// export function Join ( array , element ) ; begin
70342: LD_INT 0
70344: PPUSH
// result := Replace ( array , array + 1 , element ) ;
70345: LD_ADDR_VAR 0 3
70349: PUSH
70350: LD_VAR 0 1
70354: PPUSH
70355: LD_VAR 0 1
70359: PUSH
70360: LD_INT 1
70362: PLUS
70363: PPUSH
70364: LD_VAR 0 2
70368: PPUSH
70369: CALL_OW 1
70373: ST_TO_ADDR
// end ;
70374: LD_VAR 0 3
70378: RET
// export function JoinUnion ( array , element ) ; begin
70379: LD_INT 0
70381: PPUSH
// result := array union element ;
70382: LD_ADDR_VAR 0 3
70386: PUSH
70387: LD_VAR 0 1
70391: PUSH
70392: LD_VAR 0 2
70396: UNION
70397: ST_TO_ADDR
// end ;
70398: LD_VAR 0 3
70402: RET
// export function GetBehemoths ( side ) ; begin
70403: LD_INT 0
70405: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
70406: LD_ADDR_VAR 0 2
70410: PUSH
70411: LD_INT 22
70413: PUSH
70414: LD_VAR 0 1
70418: PUSH
70419: EMPTY
70420: LIST
70421: LIST
70422: PUSH
70423: LD_INT 31
70425: PUSH
70426: LD_INT 25
70428: PUSH
70429: EMPTY
70430: LIST
70431: LIST
70432: PUSH
70433: EMPTY
70434: LIST
70435: LIST
70436: PPUSH
70437: CALL_OW 69
70441: ST_TO_ADDR
// end ;
70442: LD_VAR 0 2
70446: RET
// export function Shuffle ( array ) ; var i , index ; begin
70447: LD_INT 0
70449: PPUSH
70450: PPUSH
70451: PPUSH
// result := [ ] ;
70452: LD_ADDR_VAR 0 2
70456: PUSH
70457: EMPTY
70458: ST_TO_ADDR
// if not array then
70459: LD_VAR 0 1
70463: NOT
70464: IFFALSE 70468
// exit ;
70466: GO 70567
// Randomize ;
70468: CALL_OW 10
// for i = array downto 1 do
70472: LD_ADDR_VAR 0 3
70476: PUSH
70477: DOUBLE
70478: LD_VAR 0 1
70482: INC
70483: ST_TO_ADDR
70484: LD_INT 1
70486: PUSH
70487: FOR_DOWNTO
70488: IFFALSE 70565
// begin index := rand ( 1 , array ) ;
70490: LD_ADDR_VAR 0 4
70494: PUSH
70495: LD_INT 1
70497: PPUSH
70498: LD_VAR 0 1
70502: PPUSH
70503: CALL_OW 12
70507: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
70508: LD_ADDR_VAR 0 2
70512: PUSH
70513: LD_VAR 0 2
70517: PPUSH
70518: LD_VAR 0 2
70522: PUSH
70523: LD_INT 1
70525: PLUS
70526: PPUSH
70527: LD_VAR 0 1
70531: PUSH
70532: LD_VAR 0 4
70536: ARRAY
70537: PPUSH
70538: CALL_OW 2
70542: ST_TO_ADDR
// array := Delete ( array , index ) ;
70543: LD_ADDR_VAR 0 1
70547: PUSH
70548: LD_VAR 0 1
70552: PPUSH
70553: LD_VAR 0 4
70557: PPUSH
70558: CALL_OW 3
70562: ST_TO_ADDR
// end ;
70563: GO 70487
70565: POP
70566: POP
// end ;
70567: LD_VAR 0 2
70571: RET
// export function GetBaseMaterials ( base ) ; begin
70572: LD_INT 0
70574: PPUSH
// result := [ 0 , 0 , 0 ] ;
70575: LD_ADDR_VAR 0 2
70579: PUSH
70580: LD_INT 0
70582: PUSH
70583: LD_INT 0
70585: PUSH
70586: LD_INT 0
70588: PUSH
70589: EMPTY
70590: LIST
70591: LIST
70592: LIST
70593: ST_TO_ADDR
// if not base then
70594: LD_VAR 0 1
70598: NOT
70599: IFFALSE 70603
// exit ;
70601: GO 70652
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
70603: LD_ADDR_VAR 0 2
70607: PUSH
70608: LD_VAR 0 1
70612: PPUSH
70613: LD_INT 1
70615: PPUSH
70616: CALL_OW 275
70620: PUSH
70621: LD_VAR 0 1
70625: PPUSH
70626: LD_INT 2
70628: PPUSH
70629: CALL_OW 275
70633: PUSH
70634: LD_VAR 0 1
70638: PPUSH
70639: LD_INT 3
70641: PPUSH
70642: CALL_OW 275
70646: PUSH
70647: EMPTY
70648: LIST
70649: LIST
70650: LIST
70651: ST_TO_ADDR
// end ;
70652: LD_VAR 0 2
70656: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
70657: LD_INT 0
70659: PPUSH
70660: PPUSH
// result := array ;
70661: LD_ADDR_VAR 0 3
70665: PUSH
70666: LD_VAR 0 1
70670: ST_TO_ADDR
// if size >= result then
70671: LD_VAR 0 2
70675: PUSH
70676: LD_VAR 0 3
70680: GREATEREQUAL
70681: IFFALSE 70685
// exit ;
70683: GO 70735
// if size then
70685: LD_VAR 0 2
70689: IFFALSE 70735
// for i := array downto size do
70691: LD_ADDR_VAR 0 4
70695: PUSH
70696: DOUBLE
70697: LD_VAR 0 1
70701: INC
70702: ST_TO_ADDR
70703: LD_VAR 0 2
70707: PUSH
70708: FOR_DOWNTO
70709: IFFALSE 70733
// result := Delete ( result , result ) ;
70711: LD_ADDR_VAR 0 3
70715: PUSH
70716: LD_VAR 0 3
70720: PPUSH
70721: LD_VAR 0 3
70725: PPUSH
70726: CALL_OW 3
70730: ST_TO_ADDR
70731: GO 70708
70733: POP
70734: POP
// end ;
70735: LD_VAR 0 3
70739: RET
// export function ComExit ( unit ) ; var tmp ; begin
70740: LD_INT 0
70742: PPUSH
70743: PPUSH
// if not IsInUnit ( unit ) then
70744: LD_VAR 0 1
70748: PPUSH
70749: CALL_OW 310
70753: NOT
70754: IFFALSE 70758
// exit ;
70756: GO 70818
// tmp := IsInUnit ( unit ) ;
70758: LD_ADDR_VAR 0 3
70762: PUSH
70763: LD_VAR 0 1
70767: PPUSH
70768: CALL_OW 310
70772: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
70773: LD_VAR 0 3
70777: PPUSH
70778: CALL_OW 247
70782: PUSH
70783: LD_INT 2
70785: EQUAL
70786: IFFALSE 70799
// ComExitVehicle ( unit ) else
70788: LD_VAR 0 1
70792: PPUSH
70793: CALL_OW 121
70797: GO 70808
// ComExitBuilding ( unit ) ;
70799: LD_VAR 0 1
70803: PPUSH
70804: CALL_OW 122
// result := tmp ;
70808: LD_ADDR_VAR 0 2
70812: PUSH
70813: LD_VAR 0 3
70817: ST_TO_ADDR
// end ;
70818: LD_VAR 0 2
70822: RET
// export function ComExitAll ( units ) ; var i ; begin
70823: LD_INT 0
70825: PPUSH
70826: PPUSH
// if not units then
70827: LD_VAR 0 1
70831: NOT
70832: IFFALSE 70836
// exit ;
70834: GO 70862
// for i in units do
70836: LD_ADDR_VAR 0 3
70840: PUSH
70841: LD_VAR 0 1
70845: PUSH
70846: FOR_IN
70847: IFFALSE 70860
// ComExit ( i ) ;
70849: LD_VAR 0 3
70853: PPUSH
70854: CALL 70740 0 1
70858: GO 70846
70860: POP
70861: POP
// end ;
70862: LD_VAR 0 2
70866: RET
// export function ResetHc ; begin
70867: LD_INT 0
70869: PPUSH
// InitHc ;
70870: CALL_OW 19
// hc_importance := 0 ;
70874: LD_ADDR_OWVAR 32
70878: PUSH
70879: LD_INT 0
70881: ST_TO_ADDR
// end ;
70882: LD_VAR 0 1
70886: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
70887: LD_INT 0
70889: PPUSH
70890: PPUSH
70891: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70892: LD_ADDR_VAR 0 6
70896: PUSH
70897: LD_VAR 0 1
70901: PUSH
70902: LD_VAR 0 3
70906: PLUS
70907: PUSH
70908: LD_INT 2
70910: DIV
70911: ST_TO_ADDR
// if _x < 0 then
70912: LD_VAR 0 6
70916: PUSH
70917: LD_INT 0
70919: LESS
70920: IFFALSE 70937
// _x := _x * - 1 ;
70922: LD_ADDR_VAR 0 6
70926: PUSH
70927: LD_VAR 0 6
70931: PUSH
70932: LD_INT 1
70934: NEG
70935: MUL
70936: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70937: LD_ADDR_VAR 0 7
70941: PUSH
70942: LD_VAR 0 2
70946: PUSH
70947: LD_VAR 0 4
70951: PLUS
70952: PUSH
70953: LD_INT 2
70955: DIV
70956: ST_TO_ADDR
// if _y < 0 then
70957: LD_VAR 0 7
70961: PUSH
70962: LD_INT 0
70964: LESS
70965: IFFALSE 70982
// _y := _y * - 1 ;
70967: LD_ADDR_VAR 0 7
70971: PUSH
70972: LD_VAR 0 7
70976: PUSH
70977: LD_INT 1
70979: NEG
70980: MUL
70981: ST_TO_ADDR
// result := [ _x , _y ] ;
70982: LD_ADDR_VAR 0 5
70986: PUSH
70987: LD_VAR 0 6
70991: PUSH
70992: LD_VAR 0 7
70996: PUSH
70997: EMPTY
70998: LIST
70999: LIST
71000: ST_TO_ADDR
// end ;
71001: LD_VAR 0 5
71005: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
71006: LD_INT 0
71008: PPUSH
71009: PPUSH
71010: PPUSH
71011: PPUSH
// task := GetTaskList ( unit ) ;
71012: LD_ADDR_VAR 0 7
71016: PUSH
71017: LD_VAR 0 1
71021: PPUSH
71022: CALL_OW 437
71026: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
71027: LD_VAR 0 7
71031: NOT
71032: PUSH
71033: LD_VAR 0 1
71037: PPUSH
71038: LD_VAR 0 2
71042: PPUSH
71043: CALL_OW 308
71047: NOT
71048: AND
71049: IFFALSE 71053
// exit ;
71051: GO 71171
// if IsInArea ( unit , area ) then
71053: LD_VAR 0 1
71057: PPUSH
71058: LD_VAR 0 2
71062: PPUSH
71063: CALL_OW 308
71067: IFFALSE 71085
// begin ComMoveToArea ( unit , goAway ) ;
71069: LD_VAR 0 1
71073: PPUSH
71074: LD_VAR 0 3
71078: PPUSH
71079: CALL_OW 113
// exit ;
71083: GO 71171
// end ; if task [ 1 ] [ 1 ] <> M then
71085: LD_VAR 0 7
71089: PUSH
71090: LD_INT 1
71092: ARRAY
71093: PUSH
71094: LD_INT 1
71096: ARRAY
71097: PUSH
71098: LD_STRING M
71100: NONEQUAL
71101: IFFALSE 71105
// exit ;
71103: GO 71171
// x := task [ 1 ] [ 2 ] ;
71105: LD_ADDR_VAR 0 5
71109: PUSH
71110: LD_VAR 0 7
71114: PUSH
71115: LD_INT 1
71117: ARRAY
71118: PUSH
71119: LD_INT 2
71121: ARRAY
71122: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
71123: LD_ADDR_VAR 0 6
71127: PUSH
71128: LD_VAR 0 7
71132: PUSH
71133: LD_INT 1
71135: ARRAY
71136: PUSH
71137: LD_INT 3
71139: ARRAY
71140: ST_TO_ADDR
// if InArea ( x , y , area ) then
71141: LD_VAR 0 5
71145: PPUSH
71146: LD_VAR 0 6
71150: PPUSH
71151: LD_VAR 0 2
71155: PPUSH
71156: CALL_OW 309
71160: IFFALSE 71171
// ComStop ( unit ) ;
71162: LD_VAR 0 1
71166: PPUSH
71167: CALL_OW 141
// end ;
71171: LD_VAR 0 4
71175: RET
// export function Abs ( value ) ; begin
71176: LD_INT 0
71178: PPUSH
// result := value ;
71179: LD_ADDR_VAR 0 2
71183: PUSH
71184: LD_VAR 0 1
71188: ST_TO_ADDR
// if value < 0 then
71189: LD_VAR 0 1
71193: PUSH
71194: LD_INT 0
71196: LESS
71197: IFFALSE 71214
// result := value * - 1 ;
71199: LD_ADDR_VAR 0 2
71203: PUSH
71204: LD_VAR 0 1
71208: PUSH
71209: LD_INT 1
71211: NEG
71212: MUL
71213: ST_TO_ADDR
// end ;
71214: LD_VAR 0 2
71218: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
71219: LD_INT 0
71221: PPUSH
71222: PPUSH
71223: PPUSH
71224: PPUSH
71225: PPUSH
71226: PPUSH
71227: PPUSH
71228: PPUSH
// if not unit or not building then
71229: LD_VAR 0 1
71233: NOT
71234: PUSH
71235: LD_VAR 0 2
71239: NOT
71240: OR
71241: IFFALSE 71245
// exit ;
71243: GO 71471
// x := GetX ( building ) ;
71245: LD_ADDR_VAR 0 4
71249: PUSH
71250: LD_VAR 0 2
71254: PPUSH
71255: CALL_OW 250
71259: ST_TO_ADDR
// y := GetY ( building ) ;
71260: LD_ADDR_VAR 0 6
71264: PUSH
71265: LD_VAR 0 2
71269: PPUSH
71270: CALL_OW 251
71274: ST_TO_ADDR
// d := GetDir ( building ) ;
71275: LD_ADDR_VAR 0 8
71279: PUSH
71280: LD_VAR 0 2
71284: PPUSH
71285: CALL_OW 254
71289: ST_TO_ADDR
// r := 4 ;
71290: LD_ADDR_VAR 0 9
71294: PUSH
71295: LD_INT 4
71297: ST_TO_ADDR
// for i := 1 to 5 do
71298: LD_ADDR_VAR 0 10
71302: PUSH
71303: DOUBLE
71304: LD_INT 1
71306: DEC
71307: ST_TO_ADDR
71308: LD_INT 5
71310: PUSH
71311: FOR_TO
71312: IFFALSE 71469
// begin _x := ShiftX ( x , d , r + i ) ;
71314: LD_ADDR_VAR 0 5
71318: PUSH
71319: LD_VAR 0 4
71323: PPUSH
71324: LD_VAR 0 8
71328: PPUSH
71329: LD_VAR 0 9
71333: PUSH
71334: LD_VAR 0 10
71338: PLUS
71339: PPUSH
71340: CALL_OW 272
71344: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
71345: LD_ADDR_VAR 0 7
71349: PUSH
71350: LD_VAR 0 6
71354: PPUSH
71355: LD_VAR 0 8
71359: PPUSH
71360: LD_VAR 0 9
71364: PUSH
71365: LD_VAR 0 10
71369: PLUS
71370: PPUSH
71371: CALL_OW 273
71375: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
71376: LD_VAR 0 5
71380: PPUSH
71381: LD_VAR 0 7
71385: PPUSH
71386: CALL_OW 488
71390: PUSH
71391: LD_VAR 0 5
71395: PPUSH
71396: LD_VAR 0 7
71400: PPUSH
71401: CALL_OW 428
71405: PPUSH
71406: CALL_OW 247
71410: PUSH
71411: LD_INT 3
71413: PUSH
71414: LD_INT 2
71416: PUSH
71417: EMPTY
71418: LIST
71419: LIST
71420: IN
71421: NOT
71422: AND
71423: IFFALSE 71467
// begin ComMoveXY ( unit , _x , _y ) ;
71425: LD_VAR 0 1
71429: PPUSH
71430: LD_VAR 0 5
71434: PPUSH
71435: LD_VAR 0 7
71439: PPUSH
71440: CALL_OW 111
// result := [ _x , _y ] ;
71444: LD_ADDR_VAR 0 3
71448: PUSH
71449: LD_VAR 0 5
71453: PUSH
71454: LD_VAR 0 7
71458: PUSH
71459: EMPTY
71460: LIST
71461: LIST
71462: ST_TO_ADDR
// exit ;
71463: POP
71464: POP
71465: GO 71471
// end ; end ;
71467: GO 71311
71469: POP
71470: POP
// end ;
71471: LD_VAR 0 3
71475: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
71476: LD_INT 0
71478: PPUSH
71479: PPUSH
71480: PPUSH
// result := 0 ;
71481: LD_ADDR_VAR 0 3
71485: PUSH
71486: LD_INT 0
71488: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
71489: LD_VAR 0 1
71493: PUSH
71494: LD_INT 0
71496: LESS
71497: PUSH
71498: LD_VAR 0 1
71502: PUSH
71503: LD_INT 8
71505: GREATER
71506: OR
71507: PUSH
71508: LD_VAR 0 2
71512: PUSH
71513: LD_INT 0
71515: LESS
71516: OR
71517: PUSH
71518: LD_VAR 0 2
71522: PUSH
71523: LD_INT 8
71525: GREATER
71526: OR
71527: IFFALSE 71531
// exit ;
71529: GO 71606
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
71531: LD_ADDR_VAR 0 4
71535: PUSH
71536: LD_INT 22
71538: PUSH
71539: LD_VAR 0 2
71543: PUSH
71544: EMPTY
71545: LIST
71546: LIST
71547: PPUSH
71548: CALL_OW 69
71552: PUSH
71553: FOR_IN
71554: IFFALSE 71604
// begin un := UnitShoot ( i ) ;
71556: LD_ADDR_VAR 0 5
71560: PUSH
71561: LD_VAR 0 4
71565: PPUSH
71566: CALL_OW 504
71570: ST_TO_ADDR
// if GetSide ( un ) = side1 then
71571: LD_VAR 0 5
71575: PPUSH
71576: CALL_OW 255
71580: PUSH
71581: LD_VAR 0 1
71585: EQUAL
71586: IFFALSE 71602
// begin result := un ;
71588: LD_ADDR_VAR 0 3
71592: PUSH
71593: LD_VAR 0 5
71597: ST_TO_ADDR
// exit ;
71598: POP
71599: POP
71600: GO 71606
// end ; end ;
71602: GO 71553
71604: POP
71605: POP
// end ;
71606: LD_VAR 0 3
71610: RET
// export function GetCargoBay ( units ) ; begin
71611: LD_INT 0
71613: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
71614: LD_ADDR_VAR 0 2
71618: PUSH
71619: LD_VAR 0 1
71623: PPUSH
71624: LD_INT 2
71626: PUSH
71627: LD_INT 34
71629: PUSH
71630: LD_INT 12
71632: PUSH
71633: EMPTY
71634: LIST
71635: LIST
71636: PUSH
71637: LD_INT 34
71639: PUSH
71640: LD_INT 51
71642: PUSH
71643: EMPTY
71644: LIST
71645: LIST
71646: PUSH
71647: LD_INT 34
71649: PUSH
71650: LD_INT 32
71652: PUSH
71653: EMPTY
71654: LIST
71655: LIST
71656: PUSH
71657: LD_INT 34
71659: PUSH
71660: LD_INT 89
71662: PUSH
71663: EMPTY
71664: LIST
71665: LIST
71666: PUSH
71667: EMPTY
71668: LIST
71669: LIST
71670: LIST
71671: LIST
71672: LIST
71673: PPUSH
71674: CALL_OW 72
71678: ST_TO_ADDR
// end ;
71679: LD_VAR 0 2
71683: RET
// export function Negate ( value ) ; begin
71684: LD_INT 0
71686: PPUSH
// result := not value ;
71687: LD_ADDR_VAR 0 2
71691: PUSH
71692: LD_VAR 0 1
71696: NOT
71697: ST_TO_ADDR
// end ;
71698: LD_VAR 0 2
71702: RET
// export function Inc ( value ) ; begin
71703: LD_INT 0
71705: PPUSH
// result := value + 1 ;
71706: LD_ADDR_VAR 0 2
71710: PUSH
71711: LD_VAR 0 1
71715: PUSH
71716: LD_INT 1
71718: PLUS
71719: ST_TO_ADDR
// end ;
71720: LD_VAR 0 2
71724: RET
// export function Dec ( value ) ; begin
71725: LD_INT 0
71727: PPUSH
// result := value - 1 ;
71728: LD_ADDR_VAR 0 2
71732: PUSH
71733: LD_VAR 0 1
71737: PUSH
71738: LD_INT 1
71740: MINUS
71741: ST_TO_ADDR
// end ;
71742: LD_VAR 0 2
71746: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
71747: LD_INT 0
71749: PPUSH
71750: PPUSH
71751: PPUSH
71752: PPUSH
71753: PPUSH
71754: PPUSH
71755: PPUSH
71756: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
71757: LD_VAR 0 1
71761: PPUSH
71762: LD_VAR 0 2
71766: PPUSH
71767: CALL_OW 488
71771: NOT
71772: PUSH
71773: LD_VAR 0 3
71777: PPUSH
71778: LD_VAR 0 4
71782: PPUSH
71783: CALL_OW 488
71787: NOT
71788: OR
71789: IFFALSE 71802
// begin result := - 1 ;
71791: LD_ADDR_VAR 0 5
71795: PUSH
71796: LD_INT 1
71798: NEG
71799: ST_TO_ADDR
// exit ;
71800: GO 72037
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
71802: LD_ADDR_VAR 0 12
71806: PUSH
71807: LD_VAR 0 1
71811: PPUSH
71812: LD_VAR 0 2
71816: PPUSH
71817: LD_VAR 0 3
71821: PPUSH
71822: LD_VAR 0 4
71826: PPUSH
71827: CALL 70887 0 4
71831: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
71832: LD_ADDR_VAR 0 11
71836: PUSH
71837: LD_VAR 0 1
71841: PPUSH
71842: LD_VAR 0 2
71846: PPUSH
71847: LD_VAR 0 12
71851: PUSH
71852: LD_INT 1
71854: ARRAY
71855: PPUSH
71856: LD_VAR 0 12
71860: PUSH
71861: LD_INT 2
71863: ARRAY
71864: PPUSH
71865: CALL_OW 298
71869: ST_TO_ADDR
// distance := 9999 ;
71870: LD_ADDR_VAR 0 10
71874: PUSH
71875: LD_INT 9999
71877: ST_TO_ADDR
// for i := 0 to 5 do
71878: LD_ADDR_VAR 0 6
71882: PUSH
71883: DOUBLE
71884: LD_INT 0
71886: DEC
71887: ST_TO_ADDR
71888: LD_INT 5
71890: PUSH
71891: FOR_TO
71892: IFFALSE 72035
// begin _x := ShiftX ( x1 , i , centerDist ) ;
71894: LD_ADDR_VAR 0 7
71898: PUSH
71899: LD_VAR 0 1
71903: PPUSH
71904: LD_VAR 0 6
71908: PPUSH
71909: LD_VAR 0 11
71913: PPUSH
71914: CALL_OW 272
71918: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
71919: LD_ADDR_VAR 0 8
71923: PUSH
71924: LD_VAR 0 2
71928: PPUSH
71929: LD_VAR 0 6
71933: PPUSH
71934: LD_VAR 0 11
71938: PPUSH
71939: CALL_OW 273
71943: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71944: LD_VAR 0 7
71948: PPUSH
71949: LD_VAR 0 8
71953: PPUSH
71954: CALL_OW 488
71958: NOT
71959: IFFALSE 71963
// continue ;
71961: GO 71891
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
71963: LD_ADDR_VAR 0 9
71967: PUSH
71968: LD_VAR 0 12
71972: PUSH
71973: LD_INT 1
71975: ARRAY
71976: PPUSH
71977: LD_VAR 0 12
71981: PUSH
71982: LD_INT 2
71984: ARRAY
71985: PPUSH
71986: LD_VAR 0 7
71990: PPUSH
71991: LD_VAR 0 8
71995: PPUSH
71996: CALL_OW 298
72000: ST_TO_ADDR
// if tmp < distance then
72001: LD_VAR 0 9
72005: PUSH
72006: LD_VAR 0 10
72010: LESS
72011: IFFALSE 72033
// begin result := i ;
72013: LD_ADDR_VAR 0 5
72017: PUSH
72018: LD_VAR 0 6
72022: ST_TO_ADDR
// distance := tmp ;
72023: LD_ADDR_VAR 0 10
72027: PUSH
72028: LD_VAR 0 9
72032: ST_TO_ADDR
// end ; end ;
72033: GO 71891
72035: POP
72036: POP
// end ;
72037: LD_VAR 0 5
72041: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72042: LD_INT 0
72044: PPUSH
72045: PPUSH
// if not driver or not IsInUnit ( driver ) then
72046: LD_VAR 0 1
72050: NOT
72051: PUSH
72052: LD_VAR 0 1
72056: PPUSH
72057: CALL_OW 310
72061: NOT
72062: OR
72063: IFFALSE 72067
// exit ;
72065: GO 72157
// vehicle := IsInUnit ( driver ) ;
72067: LD_ADDR_VAR 0 3
72071: PUSH
72072: LD_VAR 0 1
72076: PPUSH
72077: CALL_OW 310
72081: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72082: LD_VAR 0 1
72086: PPUSH
72087: LD_STRING \
72089: PUSH
72090: LD_INT 0
72092: PUSH
72093: LD_INT 0
72095: PUSH
72096: LD_INT 0
72098: PUSH
72099: LD_INT 0
72101: PUSH
72102: LD_INT 0
72104: PUSH
72105: LD_INT 0
72107: PUSH
72108: EMPTY
72109: LIST
72110: LIST
72111: LIST
72112: LIST
72113: LIST
72114: LIST
72115: LIST
72116: PUSH
72117: LD_STRING E
72119: PUSH
72120: LD_INT 0
72122: PUSH
72123: LD_INT 0
72125: PUSH
72126: LD_VAR 0 3
72130: PUSH
72131: LD_INT 0
72133: PUSH
72134: LD_INT 0
72136: PUSH
72137: LD_INT 0
72139: PUSH
72140: EMPTY
72141: LIST
72142: LIST
72143: LIST
72144: LIST
72145: LIST
72146: LIST
72147: LIST
72148: PUSH
72149: EMPTY
72150: LIST
72151: LIST
72152: PPUSH
72153: CALL_OW 446
// end ;
72157: LD_VAR 0 2
72161: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72162: LD_INT 0
72164: PPUSH
72165: PPUSH
// if not driver or not IsInUnit ( driver ) then
72166: LD_VAR 0 1
72170: NOT
72171: PUSH
72172: LD_VAR 0 1
72176: PPUSH
72177: CALL_OW 310
72181: NOT
72182: OR
72183: IFFALSE 72187
// exit ;
72185: GO 72277
// vehicle := IsInUnit ( driver ) ;
72187: LD_ADDR_VAR 0 3
72191: PUSH
72192: LD_VAR 0 1
72196: PPUSH
72197: CALL_OW 310
72201: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72202: LD_VAR 0 1
72206: PPUSH
72207: LD_STRING \
72209: PUSH
72210: LD_INT 0
72212: PUSH
72213: LD_INT 0
72215: PUSH
72216: LD_INT 0
72218: PUSH
72219: LD_INT 0
72221: PUSH
72222: LD_INT 0
72224: PUSH
72225: LD_INT 0
72227: PUSH
72228: EMPTY
72229: LIST
72230: LIST
72231: LIST
72232: LIST
72233: LIST
72234: LIST
72235: LIST
72236: PUSH
72237: LD_STRING E
72239: PUSH
72240: LD_INT 0
72242: PUSH
72243: LD_INT 0
72245: PUSH
72246: LD_VAR 0 3
72250: PUSH
72251: LD_INT 0
72253: PUSH
72254: LD_INT 0
72256: PUSH
72257: LD_INT 0
72259: PUSH
72260: EMPTY
72261: LIST
72262: LIST
72263: LIST
72264: LIST
72265: LIST
72266: LIST
72267: LIST
72268: PUSH
72269: EMPTY
72270: LIST
72271: LIST
72272: PPUSH
72273: CALL_OW 447
// end ;
72277: LD_VAR 0 2
72281: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
72282: LD_INT 0
72284: PPUSH
72285: PPUSH
72286: PPUSH
// tmp := [ ] ;
72287: LD_ADDR_VAR 0 5
72291: PUSH
72292: EMPTY
72293: ST_TO_ADDR
// for i in units do
72294: LD_ADDR_VAR 0 4
72298: PUSH
72299: LD_VAR 0 1
72303: PUSH
72304: FOR_IN
72305: IFFALSE 72343
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
72307: LD_ADDR_VAR 0 5
72311: PUSH
72312: LD_VAR 0 5
72316: PPUSH
72317: LD_VAR 0 5
72321: PUSH
72322: LD_INT 1
72324: PLUS
72325: PPUSH
72326: LD_VAR 0 4
72330: PPUSH
72331: CALL_OW 256
72335: PPUSH
72336: CALL_OW 2
72340: ST_TO_ADDR
72341: GO 72304
72343: POP
72344: POP
// if not tmp then
72345: LD_VAR 0 5
72349: NOT
72350: IFFALSE 72354
// exit ;
72352: GO 72402
// if asc then
72354: LD_VAR 0 2
72358: IFFALSE 72382
// result := SortListByListAsc ( units , tmp ) else
72360: LD_ADDR_VAR 0 3
72364: PUSH
72365: LD_VAR 0 1
72369: PPUSH
72370: LD_VAR 0 5
72374: PPUSH
72375: CALL_OW 76
72379: ST_TO_ADDR
72380: GO 72402
// result := SortListByListDesc ( units , tmp ) ;
72382: LD_ADDR_VAR 0 3
72386: PUSH
72387: LD_VAR 0 1
72391: PPUSH
72392: LD_VAR 0 5
72396: PPUSH
72397: CALL_OW 77
72401: ST_TO_ADDR
// end ;
72402: LD_VAR 0 3
72406: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
72407: LD_INT 0
72409: PPUSH
72410: PPUSH
// task := GetTaskList ( mech ) ;
72411: LD_ADDR_VAR 0 4
72415: PUSH
72416: LD_VAR 0 1
72420: PPUSH
72421: CALL_OW 437
72425: ST_TO_ADDR
// if not task then
72426: LD_VAR 0 4
72430: NOT
72431: IFFALSE 72435
// exit ;
72433: GO 72477
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
72435: LD_ADDR_VAR 0 3
72439: PUSH
72440: LD_VAR 0 4
72444: PUSH
72445: LD_INT 1
72447: ARRAY
72448: PUSH
72449: LD_INT 1
72451: ARRAY
72452: PUSH
72453: LD_STRING r
72455: EQUAL
72456: PUSH
72457: LD_VAR 0 4
72461: PUSH
72462: LD_INT 1
72464: ARRAY
72465: PUSH
72466: LD_INT 4
72468: ARRAY
72469: PUSH
72470: LD_VAR 0 2
72474: EQUAL
72475: AND
72476: ST_TO_ADDR
// end ;
72477: LD_VAR 0 3
72481: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
72482: LD_INT 0
72484: PPUSH
// SetDir ( unit , d ) ;
72485: LD_VAR 0 1
72489: PPUSH
72490: LD_VAR 0 4
72494: PPUSH
72495: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
72499: LD_VAR 0 1
72503: PPUSH
72504: LD_VAR 0 2
72508: PPUSH
72509: LD_VAR 0 3
72513: PPUSH
72514: LD_VAR 0 5
72518: PPUSH
72519: CALL_OW 48
// end ;
72523: LD_VAR 0 6
72527: RET
// export function ToNaturalNumber ( number ) ; begin
72528: LD_INT 0
72530: PPUSH
// result := number div 1 ;
72531: LD_ADDR_VAR 0 2
72535: PUSH
72536: LD_VAR 0 1
72540: PUSH
72541: LD_INT 1
72543: DIV
72544: ST_TO_ADDR
// if number < 0 then
72545: LD_VAR 0 1
72549: PUSH
72550: LD_INT 0
72552: LESS
72553: IFFALSE 72563
// result := 0 ;
72555: LD_ADDR_VAR 0 2
72559: PUSH
72560: LD_INT 0
72562: ST_TO_ADDR
// end ;
72563: LD_VAR 0 2
72567: RET
// export function SortByClass ( units , class ) ; var un ; begin
72568: LD_INT 0
72570: PPUSH
72571: PPUSH
// if not units or not class then
72572: LD_VAR 0 1
72576: NOT
72577: PUSH
72578: LD_VAR 0 2
72582: NOT
72583: OR
72584: IFFALSE 72588
// exit ;
72586: GO 72683
// result := [ ] ;
72588: LD_ADDR_VAR 0 3
72592: PUSH
72593: EMPTY
72594: ST_TO_ADDR
// for un in units do
72595: LD_ADDR_VAR 0 4
72599: PUSH
72600: LD_VAR 0 1
72604: PUSH
72605: FOR_IN
72606: IFFALSE 72681
// if GetClass ( un ) = class then
72608: LD_VAR 0 4
72612: PPUSH
72613: CALL_OW 257
72617: PUSH
72618: LD_VAR 0 2
72622: EQUAL
72623: IFFALSE 72650
// result := Insert ( result , 1 , un ) else
72625: LD_ADDR_VAR 0 3
72629: PUSH
72630: LD_VAR 0 3
72634: PPUSH
72635: LD_INT 1
72637: PPUSH
72638: LD_VAR 0 4
72642: PPUSH
72643: CALL_OW 2
72647: ST_TO_ADDR
72648: GO 72679
// result := Replace ( result , result + 1 , un ) ;
72650: LD_ADDR_VAR 0 3
72654: PUSH
72655: LD_VAR 0 3
72659: PPUSH
72660: LD_VAR 0 3
72664: PUSH
72665: LD_INT 1
72667: PLUS
72668: PPUSH
72669: LD_VAR 0 4
72673: PPUSH
72674: CALL_OW 1
72678: ST_TO_ADDR
72679: GO 72605
72681: POP
72682: POP
// end ;
72683: LD_VAR 0 3
72687: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
72688: LD_INT 0
72690: PPUSH
72691: PPUSH
72692: PPUSH
72693: PPUSH
72694: PPUSH
72695: PPUSH
72696: PPUSH
// result := [ ] ;
72697: LD_ADDR_VAR 0 4
72701: PUSH
72702: EMPTY
72703: ST_TO_ADDR
// if x - r < 0 then
72704: LD_VAR 0 1
72708: PUSH
72709: LD_VAR 0 3
72713: MINUS
72714: PUSH
72715: LD_INT 0
72717: LESS
72718: IFFALSE 72730
// min_x := 0 else
72720: LD_ADDR_VAR 0 8
72724: PUSH
72725: LD_INT 0
72727: ST_TO_ADDR
72728: GO 72746
// min_x := x - r ;
72730: LD_ADDR_VAR 0 8
72734: PUSH
72735: LD_VAR 0 1
72739: PUSH
72740: LD_VAR 0 3
72744: MINUS
72745: ST_TO_ADDR
// if y - r < 0 then
72746: LD_VAR 0 2
72750: PUSH
72751: LD_VAR 0 3
72755: MINUS
72756: PUSH
72757: LD_INT 0
72759: LESS
72760: IFFALSE 72772
// min_y := 0 else
72762: LD_ADDR_VAR 0 7
72766: PUSH
72767: LD_INT 0
72769: ST_TO_ADDR
72770: GO 72788
// min_y := y - r ;
72772: LD_ADDR_VAR 0 7
72776: PUSH
72777: LD_VAR 0 2
72781: PUSH
72782: LD_VAR 0 3
72786: MINUS
72787: ST_TO_ADDR
// max_x := x + r ;
72788: LD_ADDR_VAR 0 9
72792: PUSH
72793: LD_VAR 0 1
72797: PUSH
72798: LD_VAR 0 3
72802: PLUS
72803: ST_TO_ADDR
// max_y := y + r ;
72804: LD_ADDR_VAR 0 10
72808: PUSH
72809: LD_VAR 0 2
72813: PUSH
72814: LD_VAR 0 3
72818: PLUS
72819: ST_TO_ADDR
// for _x = min_x to max_x do
72820: LD_ADDR_VAR 0 5
72824: PUSH
72825: DOUBLE
72826: LD_VAR 0 8
72830: DEC
72831: ST_TO_ADDR
72832: LD_VAR 0 9
72836: PUSH
72837: FOR_TO
72838: IFFALSE 72939
// for _y = min_y to max_y do
72840: LD_ADDR_VAR 0 6
72844: PUSH
72845: DOUBLE
72846: LD_VAR 0 7
72850: DEC
72851: ST_TO_ADDR
72852: LD_VAR 0 10
72856: PUSH
72857: FOR_TO
72858: IFFALSE 72935
// begin if not ValidHex ( _x , _y ) then
72860: LD_VAR 0 5
72864: PPUSH
72865: LD_VAR 0 6
72869: PPUSH
72870: CALL_OW 488
72874: NOT
72875: IFFALSE 72879
// continue ;
72877: GO 72857
// if GetResourceTypeXY ( _x , _y ) then
72879: LD_VAR 0 5
72883: PPUSH
72884: LD_VAR 0 6
72888: PPUSH
72889: CALL_OW 283
72893: IFFALSE 72933
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
72895: LD_ADDR_VAR 0 4
72899: PUSH
72900: LD_VAR 0 4
72904: PPUSH
72905: LD_VAR 0 4
72909: PUSH
72910: LD_INT 1
72912: PLUS
72913: PPUSH
72914: LD_VAR 0 5
72918: PUSH
72919: LD_VAR 0 6
72923: PUSH
72924: EMPTY
72925: LIST
72926: LIST
72927: PPUSH
72928: CALL_OW 1
72932: ST_TO_ADDR
// end ;
72933: GO 72857
72935: POP
72936: POP
72937: GO 72837
72939: POP
72940: POP
// end ;
72941: LD_VAR 0 4
72945: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
72946: LD_INT 0
72948: PPUSH
72949: PPUSH
72950: PPUSH
72951: PPUSH
72952: PPUSH
72953: PPUSH
72954: PPUSH
72955: PPUSH
// if not units then
72956: LD_VAR 0 1
72960: NOT
72961: IFFALSE 72965
// exit ;
72963: GO 73489
// result := UnitFilter ( units , [ f_ok ] ) ;
72965: LD_ADDR_VAR 0 3
72969: PUSH
72970: LD_VAR 0 1
72974: PPUSH
72975: LD_INT 50
72977: PUSH
72978: EMPTY
72979: LIST
72980: PPUSH
72981: CALL_OW 72
72985: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
72986: LD_ADDR_VAR 0 8
72990: PUSH
72991: LD_VAR 0 1
72995: PUSH
72996: LD_INT 1
72998: ARRAY
72999: PPUSH
73000: CALL_OW 255
73004: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
73005: LD_ADDR_VAR 0 10
73009: PUSH
73010: LD_INT 29
73012: PUSH
73013: LD_INT 91
73015: PUSH
73016: LD_INT 49
73018: PUSH
73019: EMPTY
73020: LIST
73021: LIST
73022: LIST
73023: ST_TO_ADDR
// if not result then
73024: LD_VAR 0 3
73028: NOT
73029: IFFALSE 73033
// exit ;
73031: GO 73489
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
73033: LD_ADDR_VAR 0 5
73037: PUSH
73038: LD_INT 81
73040: PUSH
73041: LD_VAR 0 8
73045: PUSH
73046: EMPTY
73047: LIST
73048: LIST
73049: PPUSH
73050: CALL_OW 69
73054: ST_TO_ADDR
// for i in result do
73055: LD_ADDR_VAR 0 4
73059: PUSH
73060: LD_VAR 0 3
73064: PUSH
73065: FOR_IN
73066: IFFALSE 73487
// begin tag := GetTag ( i ) + 1 ;
73068: LD_ADDR_VAR 0 9
73072: PUSH
73073: LD_VAR 0 4
73077: PPUSH
73078: CALL_OW 110
73082: PUSH
73083: LD_INT 1
73085: PLUS
73086: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
73087: LD_ADDR_VAR 0 7
73091: PUSH
73092: LD_VAR 0 4
73096: PPUSH
73097: CALL_OW 250
73101: PPUSH
73102: LD_VAR 0 4
73106: PPUSH
73107: CALL_OW 251
73111: PPUSH
73112: LD_INT 6
73114: PPUSH
73115: CALL 72688 0 3
73119: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
73120: LD_VAR 0 4
73124: PPUSH
73125: CALL_OW 247
73129: PUSH
73130: LD_INT 2
73132: EQUAL
73133: PUSH
73134: LD_VAR 0 7
73138: AND
73139: PUSH
73140: LD_VAR 0 4
73144: PPUSH
73145: CALL_OW 264
73149: PUSH
73150: LD_VAR 0 10
73154: IN
73155: NOT
73156: AND
73157: IFFALSE 73196
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
73159: LD_VAR 0 4
73163: PPUSH
73164: LD_VAR 0 7
73168: PUSH
73169: LD_INT 1
73171: ARRAY
73172: PUSH
73173: LD_INT 1
73175: ARRAY
73176: PPUSH
73177: LD_VAR 0 7
73181: PUSH
73182: LD_INT 1
73184: ARRAY
73185: PUSH
73186: LD_INT 2
73188: ARRAY
73189: PPUSH
73190: CALL_OW 116
73194: GO 73485
// if path > tag then
73196: LD_VAR 0 2
73200: PUSH
73201: LD_VAR 0 9
73205: GREATER
73206: IFFALSE 73414
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
73208: LD_ADDR_VAR 0 6
73212: PUSH
73213: LD_VAR 0 5
73217: PPUSH
73218: LD_INT 91
73220: PUSH
73221: LD_VAR 0 4
73225: PUSH
73226: LD_INT 8
73228: PUSH
73229: EMPTY
73230: LIST
73231: LIST
73232: LIST
73233: PPUSH
73234: CALL_OW 72
73238: ST_TO_ADDR
// if nearEnemy then
73239: LD_VAR 0 6
73243: IFFALSE 73312
// begin if GetWeapon ( i ) = ru_time_lapser then
73245: LD_VAR 0 4
73249: PPUSH
73250: CALL_OW 264
73254: PUSH
73255: LD_INT 49
73257: EQUAL
73258: IFFALSE 73286
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
73260: LD_VAR 0 4
73264: PPUSH
73265: LD_VAR 0 6
73269: PPUSH
73270: LD_VAR 0 4
73274: PPUSH
73275: CALL_OW 74
73279: PPUSH
73280: CALL_OW 112
73284: GO 73310
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
73286: LD_VAR 0 4
73290: PPUSH
73291: LD_VAR 0 6
73295: PPUSH
73296: LD_VAR 0 4
73300: PPUSH
73301: CALL_OW 74
73305: PPUSH
73306: CALL_OW 115
// end else
73310: GO 73412
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
73312: LD_VAR 0 4
73316: PPUSH
73317: LD_VAR 0 2
73321: PUSH
73322: LD_VAR 0 9
73326: ARRAY
73327: PUSH
73328: LD_INT 1
73330: ARRAY
73331: PPUSH
73332: LD_VAR 0 2
73336: PUSH
73337: LD_VAR 0 9
73341: ARRAY
73342: PUSH
73343: LD_INT 2
73345: ARRAY
73346: PPUSH
73347: CALL_OW 297
73351: PUSH
73352: LD_INT 6
73354: GREATER
73355: IFFALSE 73398
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
73357: LD_VAR 0 4
73361: PPUSH
73362: LD_VAR 0 2
73366: PUSH
73367: LD_VAR 0 9
73371: ARRAY
73372: PUSH
73373: LD_INT 1
73375: ARRAY
73376: PPUSH
73377: LD_VAR 0 2
73381: PUSH
73382: LD_VAR 0 9
73386: ARRAY
73387: PUSH
73388: LD_INT 2
73390: ARRAY
73391: PPUSH
73392: CALL_OW 114
73396: GO 73412
// SetTag ( i , tag ) ;
73398: LD_VAR 0 4
73402: PPUSH
73403: LD_VAR 0 9
73407: PPUSH
73408: CALL_OW 109
// end else
73412: GO 73485
// if enemy then
73414: LD_VAR 0 5
73418: IFFALSE 73485
// begin if GetWeapon ( i ) = ru_time_lapser then
73420: LD_VAR 0 4
73424: PPUSH
73425: CALL_OW 264
73429: PUSH
73430: LD_INT 49
73432: EQUAL
73433: IFFALSE 73461
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
73435: LD_VAR 0 4
73439: PPUSH
73440: LD_VAR 0 5
73444: PPUSH
73445: LD_VAR 0 4
73449: PPUSH
73450: CALL_OW 74
73454: PPUSH
73455: CALL_OW 112
73459: GO 73485
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
73461: LD_VAR 0 4
73465: PPUSH
73466: LD_VAR 0 5
73470: PPUSH
73471: LD_VAR 0 4
73475: PPUSH
73476: CALL_OW 74
73480: PPUSH
73481: CALL_OW 115
// end ; end ;
73485: GO 73065
73487: POP
73488: POP
// end ;
73489: LD_VAR 0 3
73493: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
73494: LD_INT 0
73496: PPUSH
73497: PPUSH
73498: PPUSH
// if not unit or IsInUnit ( unit ) then
73499: LD_VAR 0 1
73503: NOT
73504: PUSH
73505: LD_VAR 0 1
73509: PPUSH
73510: CALL_OW 310
73514: OR
73515: IFFALSE 73519
// exit ;
73517: GO 73610
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
73519: LD_ADDR_VAR 0 4
73523: PUSH
73524: LD_VAR 0 1
73528: PPUSH
73529: CALL_OW 250
73533: PPUSH
73534: LD_VAR 0 2
73538: PPUSH
73539: LD_INT 1
73541: PPUSH
73542: CALL_OW 272
73546: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
73547: LD_ADDR_VAR 0 5
73551: PUSH
73552: LD_VAR 0 1
73556: PPUSH
73557: CALL_OW 251
73561: PPUSH
73562: LD_VAR 0 2
73566: PPUSH
73567: LD_INT 1
73569: PPUSH
73570: CALL_OW 273
73574: ST_TO_ADDR
// if ValidHex ( x , y ) then
73575: LD_VAR 0 4
73579: PPUSH
73580: LD_VAR 0 5
73584: PPUSH
73585: CALL_OW 488
73589: IFFALSE 73610
// ComTurnXY ( unit , x , y ) ;
73591: LD_VAR 0 1
73595: PPUSH
73596: LD_VAR 0 4
73600: PPUSH
73601: LD_VAR 0 5
73605: PPUSH
73606: CALL_OW 118
// end ;
73610: LD_VAR 0 3
73614: RET
// export function SeeUnits ( side , units ) ; var i ; begin
73615: LD_INT 0
73617: PPUSH
73618: PPUSH
// result := false ;
73619: LD_ADDR_VAR 0 3
73623: PUSH
73624: LD_INT 0
73626: ST_TO_ADDR
// if not units then
73627: LD_VAR 0 2
73631: NOT
73632: IFFALSE 73636
// exit ;
73634: GO 73681
// for i in units do
73636: LD_ADDR_VAR 0 4
73640: PUSH
73641: LD_VAR 0 2
73645: PUSH
73646: FOR_IN
73647: IFFALSE 73679
// if See ( side , i ) then
73649: LD_VAR 0 1
73653: PPUSH
73654: LD_VAR 0 4
73658: PPUSH
73659: CALL_OW 292
73663: IFFALSE 73677
// begin result := true ;
73665: LD_ADDR_VAR 0 3
73669: PUSH
73670: LD_INT 1
73672: ST_TO_ADDR
// exit ;
73673: POP
73674: POP
73675: GO 73681
// end ;
73677: GO 73646
73679: POP
73680: POP
// end ;
73681: LD_VAR 0 3
73685: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
73686: LD_INT 0
73688: PPUSH
73689: PPUSH
73690: PPUSH
73691: PPUSH
// if not unit or not points then
73692: LD_VAR 0 1
73696: NOT
73697: PUSH
73698: LD_VAR 0 2
73702: NOT
73703: OR
73704: IFFALSE 73708
// exit ;
73706: GO 73798
// dist := 99999 ;
73708: LD_ADDR_VAR 0 5
73712: PUSH
73713: LD_INT 99999
73715: ST_TO_ADDR
// for i in points do
73716: LD_ADDR_VAR 0 4
73720: PUSH
73721: LD_VAR 0 2
73725: PUSH
73726: FOR_IN
73727: IFFALSE 73796
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
73729: LD_ADDR_VAR 0 6
73733: PUSH
73734: LD_VAR 0 1
73738: PPUSH
73739: LD_VAR 0 4
73743: PUSH
73744: LD_INT 1
73746: ARRAY
73747: PPUSH
73748: LD_VAR 0 4
73752: PUSH
73753: LD_INT 2
73755: ARRAY
73756: PPUSH
73757: CALL_OW 297
73761: ST_TO_ADDR
// if tmpDist < dist then
73762: LD_VAR 0 6
73766: PUSH
73767: LD_VAR 0 5
73771: LESS
73772: IFFALSE 73794
// begin result := i ;
73774: LD_ADDR_VAR 0 3
73778: PUSH
73779: LD_VAR 0 4
73783: ST_TO_ADDR
// dist := tmpDist ;
73784: LD_ADDR_VAR 0 5
73788: PUSH
73789: LD_VAR 0 6
73793: ST_TO_ADDR
// end ; end ;
73794: GO 73726
73796: POP
73797: POP
// end ;
73798: LD_VAR 0 3
73802: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
73803: LD_INT 0
73805: PPUSH
// uc_side := side ;
73806: LD_ADDR_OWVAR 20
73810: PUSH
73811: LD_VAR 0 1
73815: ST_TO_ADDR
// uc_nation := 3 ;
73816: LD_ADDR_OWVAR 21
73820: PUSH
73821: LD_INT 3
73823: ST_TO_ADDR
// vc_chassis := 25 ;
73824: LD_ADDR_OWVAR 37
73828: PUSH
73829: LD_INT 25
73831: ST_TO_ADDR
// vc_engine := engine_siberite ;
73832: LD_ADDR_OWVAR 39
73836: PUSH
73837: LD_INT 3
73839: ST_TO_ADDR
// vc_control := control_computer ;
73840: LD_ADDR_OWVAR 38
73844: PUSH
73845: LD_INT 3
73847: ST_TO_ADDR
// vc_weapon := 59 ;
73848: LD_ADDR_OWVAR 40
73852: PUSH
73853: LD_INT 59
73855: ST_TO_ADDR
// result := CreateVehicle ;
73856: LD_ADDR_VAR 0 5
73860: PUSH
73861: CALL_OW 45
73865: ST_TO_ADDR
// SetDir ( result , d ) ;
73866: LD_VAR 0 5
73870: PPUSH
73871: LD_VAR 0 4
73875: PPUSH
73876: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
73880: LD_VAR 0 5
73884: PPUSH
73885: LD_VAR 0 2
73889: PPUSH
73890: LD_VAR 0 3
73894: PPUSH
73895: LD_INT 0
73897: PPUSH
73898: CALL_OW 48
// end ;
73902: LD_VAR 0 5
73906: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
73907: LD_INT 0
73909: PPUSH
73910: PPUSH
73911: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
73912: LD_ADDR_VAR 0 2
73916: PUSH
73917: LD_INT 0
73919: PUSH
73920: LD_INT 0
73922: PUSH
73923: LD_INT 0
73925: PUSH
73926: LD_INT 0
73928: PUSH
73929: EMPTY
73930: LIST
73931: LIST
73932: LIST
73933: LIST
73934: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
73935: LD_VAR 0 1
73939: NOT
73940: PUSH
73941: LD_VAR 0 1
73945: PPUSH
73946: CALL_OW 264
73950: PUSH
73951: LD_INT 12
73953: PUSH
73954: LD_INT 51
73956: PUSH
73957: LD_INT 32
73959: PUSH
73960: LD_INT 89
73962: PUSH
73963: EMPTY
73964: LIST
73965: LIST
73966: LIST
73967: LIST
73968: IN
73969: NOT
73970: OR
73971: IFFALSE 73975
// exit ;
73973: GO 74073
// for i := 1 to 3 do
73975: LD_ADDR_VAR 0 3
73979: PUSH
73980: DOUBLE
73981: LD_INT 1
73983: DEC
73984: ST_TO_ADDR
73985: LD_INT 3
73987: PUSH
73988: FOR_TO
73989: IFFALSE 74071
// begin tmp := GetCargo ( cargo , i ) ;
73991: LD_ADDR_VAR 0 4
73995: PUSH
73996: LD_VAR 0 1
74000: PPUSH
74001: LD_VAR 0 3
74005: PPUSH
74006: CALL_OW 289
74010: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
74011: LD_ADDR_VAR 0 2
74015: PUSH
74016: LD_VAR 0 2
74020: PPUSH
74021: LD_VAR 0 3
74025: PPUSH
74026: LD_VAR 0 4
74030: PPUSH
74031: CALL_OW 1
74035: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
74036: LD_ADDR_VAR 0 2
74040: PUSH
74041: LD_VAR 0 2
74045: PPUSH
74046: LD_INT 4
74048: PPUSH
74049: LD_VAR 0 2
74053: PUSH
74054: LD_INT 4
74056: ARRAY
74057: PUSH
74058: LD_VAR 0 4
74062: PLUS
74063: PPUSH
74064: CALL_OW 1
74068: ST_TO_ADDR
// end ;
74069: GO 73988
74071: POP
74072: POP
// end ;
74073: LD_VAR 0 2
74077: RET
// export function Length ( array ) ; begin
74078: LD_INT 0
74080: PPUSH
// result := array + 0 ;
74081: LD_ADDR_VAR 0 2
74085: PUSH
74086: LD_VAR 0 1
74090: PUSH
74091: LD_INT 0
74093: PLUS
74094: ST_TO_ADDR
// end ;
74095: LD_VAR 0 2
74099: RET
// export function PrepareArray ( array ) ; begin
74100: LD_INT 0
74102: PPUSH
// result := array diff 0 ;
74103: LD_ADDR_VAR 0 2
74107: PUSH
74108: LD_VAR 0 1
74112: PUSH
74113: LD_INT 0
74115: DIFF
74116: ST_TO_ADDR
// if not result [ 1 ] then
74117: LD_VAR 0 2
74121: PUSH
74122: LD_INT 1
74124: ARRAY
74125: NOT
74126: IFFALSE 74146
// result := Delete ( result , 1 ) ;
74128: LD_ADDR_VAR 0 2
74132: PUSH
74133: LD_VAR 0 2
74137: PPUSH
74138: LD_INT 1
74140: PPUSH
74141: CALL_OW 3
74145: ST_TO_ADDR
// end ;
74146: LD_VAR 0 2
74150: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
74151: LD_INT 0
74153: PPUSH
74154: PPUSH
74155: PPUSH
74156: PPUSH
// sibRocketRange := 25 ;
74157: LD_ADDR_VAR 0 6
74161: PUSH
74162: LD_INT 25
74164: ST_TO_ADDR
// result := false ;
74165: LD_ADDR_VAR 0 4
74169: PUSH
74170: LD_INT 0
74172: ST_TO_ADDR
// for i := 0 to 5 do
74173: LD_ADDR_VAR 0 5
74177: PUSH
74178: DOUBLE
74179: LD_INT 0
74181: DEC
74182: ST_TO_ADDR
74183: LD_INT 5
74185: PUSH
74186: FOR_TO
74187: IFFALSE 74254
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
74189: LD_VAR 0 1
74193: PPUSH
74194: LD_VAR 0 5
74198: PPUSH
74199: LD_VAR 0 6
74203: PPUSH
74204: CALL_OW 272
74208: PPUSH
74209: LD_VAR 0 2
74213: PPUSH
74214: LD_VAR 0 5
74218: PPUSH
74219: LD_VAR 0 6
74223: PPUSH
74224: CALL_OW 273
74228: PPUSH
74229: LD_VAR 0 3
74233: PPUSH
74234: CALL_OW 309
74238: IFFALSE 74252
// begin result := true ;
74240: LD_ADDR_VAR 0 4
74244: PUSH
74245: LD_INT 1
74247: ST_TO_ADDR
// exit ;
74248: POP
74249: POP
74250: GO 74256
// end ;
74252: GO 74186
74254: POP
74255: POP
// end ;
74256: LD_VAR 0 4
74260: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
74261: LD_INT 0
74263: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
74264: LD_VAR 0 1
74268: PPUSH
74269: LD_VAR 0 2
74273: PPUSH
74274: LD_INT 0
74276: PPUSH
74277: LD_INT 0
74279: PPUSH
74280: LD_INT 1
74282: PPUSH
74283: LD_INT 0
74285: PPUSH
74286: CALL_OW 587
// end ; end_of_file
74290: LD_VAR 0 3
74294: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
74295: LD_VAR 0 1
74299: PUSH
74300: LD_INT 200
74302: DOUBLE
74303: GREATEREQUAL
74304: IFFALSE 74312
74306: LD_INT 299
74308: DOUBLE
74309: LESSEQUAL
74310: IFTRUE 74314
74312: GO 74346
74314: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
74315: LD_VAR 0 1
74319: PPUSH
74320: LD_VAR 0 2
74324: PPUSH
74325: LD_VAR 0 3
74329: PPUSH
74330: LD_VAR 0 4
74334: PPUSH
74335: LD_VAR 0 5
74339: PPUSH
74340: CALL 28961 0 5
74344: GO 74423
74346: LD_INT 300
74348: DOUBLE
74349: GREATEREQUAL
74350: IFFALSE 74358
74352: LD_INT 399
74354: DOUBLE
74355: LESSEQUAL
74356: IFTRUE 74360
74358: GO 74422
74360: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
74361: LD_VAR 0 1
74365: PPUSH
74366: LD_VAR 0 2
74370: PPUSH
74371: LD_VAR 0 3
74375: PPUSH
74376: LD_VAR 0 4
74380: PPUSH
74381: LD_VAR 0 5
74385: PPUSH
74386: LD_VAR 0 6
74390: PPUSH
74391: LD_VAR 0 7
74395: PPUSH
74396: LD_VAR 0 8
74400: PPUSH
74401: LD_VAR 0 9
74405: PPUSH
74406: LD_VAR 0 10
74410: PPUSH
74411: LD_VAR 0 11
74415: PPUSH
74416: CALL 25294 0 11
74420: GO 74423
74422: POP
// end ;
74423: PPOPN 11
74425: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
74426: LD_VAR 0 1
74430: PPUSH
74431: LD_VAR 0 2
74435: PPUSH
74436: LD_VAR 0 3
74440: PPUSH
74441: LD_VAR 0 4
74445: PPUSH
74446: LD_VAR 0 5
74450: PPUSH
74451: CALL 28697 0 5
// end ; end_of_file
74455: PPOPN 5
74457: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
74458: LD_VAR 0 1
74462: PPUSH
74463: LD_VAR 0 2
74467: PPUSH
74468: LD_VAR 0 3
74472: PPUSH
74473: LD_VAR 0 4
74477: PPUSH
74478: LD_VAR 0 5
74482: PPUSH
74483: LD_VAR 0 6
74487: PPUSH
74488: CALL 12946 0 6
// end ;
74492: PPOPN 6
74494: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
74495: LD_INT 0
74497: PPUSH
// begin if not units then
74498: LD_VAR 0 1
74502: NOT
74503: IFFALSE 74507
// exit ;
74505: GO 74507
// end ;
74507: PPOPN 7
74509: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
74510: CALL 12850 0 0
// end ;
74514: PPOPN 1
74516: END
