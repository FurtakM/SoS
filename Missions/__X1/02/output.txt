// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 46 0 0
// CreateNature ;
  19: CALL 533 0 0
// PrepareAmericans ;
  23: CALL 830 0 0
// PrepareArabian ;
  27: CALL 11330 0 0
// if debug then
  31: LD_EXP 1
  35: IFFALSE 41
// DebugMode ;
  37: CALL 214 0 0
// Action ;
  41: CALL 4657 0 0
// end ;
  45: END
// export debug , prefix , missionStart , aviradzeSpotted , deltaSpotted , spottedBeforeRadio , sciSpotted , aviradzeQuestDone , sciCounterKill , usAlert , usActiveDefend , gladstoneEscaped , timeUntilFarmer , attackDeltaAllowed , trickyMove , usPatrol , trap , lostCounter ; function Init ; begin
  46: LD_INT 0
  48: PPUSH
// debug := false ;
  49: LD_ADDR_EXP 1
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// missionStart := false ;
  57: LD_ADDR_EXP 3
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// aviradzeSpotted := false ;
  65: LD_ADDR_EXP 4
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// deltaSpotted := false ;
  73: LD_ADDR_EXP 5
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// sciSpotted := false ;
  81: LD_ADDR_EXP 7
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// sciCounterKill := 0 ;
  89: LD_ADDR_EXP 9
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// aviradzeQuestDone := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// attackDeltaAllowed := false ;
 105: LD_ADDR_EXP 14
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usAlert := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// usActiveDefend := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// usPatrol := [ ] ;
 129: LD_ADDR_EXP 16
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// timeUntilFarmer := [ 40 40$00 , 30 30$00 , 20 20$00 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 13
 140: PUSH
 141: LD_INT 84000
 143: PUSH
 144: LD_INT 63000
 146: PUSH
 147: LD_INT 42000
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: PUSH
 155: LD_OWVAR 67
 159: ARRAY
 160: ST_TO_ADDR
// trickyMove := false ;
 161: LD_ADDR_EXP 15
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// gladstoneEscaped := false ;
 169: LD_ADDR_EXP 12
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// prefix := 01_ ;
 177: LD_ADDR_EXP 2
 181: PUSH
 182: LD_STRING 01_
 184: ST_TO_ADDR
// trap := 0 ;
 185: LD_ADDR_EXP 17
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// lostCounter := false ;
 193: LD_ADDR_EXP 18
 197: PUSH
 198: LD_INT 0
 200: ST_TO_ADDR
// spottedBeforeRadio := false ;
 201: LD_ADDR_EXP 6
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// end ;
 209: LD_VAR 0 1
 213: RET
// function DebugMode ; begin
 214: LD_INT 0
 216: PPUSH
// FogOff ( 1 ) ;
 217: LD_INT 1
 219: PPUSH
 220: CALL_OW 344
// Difficulty := 2 ;
 224: LD_ADDR_OWVAR 67
 228: PUSH
 229: LD_INT 2
 231: ST_TO_ADDR
// end ; end_of_file
 232: LD_VAR 0 1
 236: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 237: LD_INT 0
 239: PPUSH
// uc_side := side ;
 240: LD_ADDR_OWVAR 20
 244: PUSH
 245: LD_VAR 0 1
 249: ST_TO_ADDR
// uc_nation := nation ;
 250: LD_ADDR_OWVAR 21
 254: PUSH
 255: LD_VAR 0 2
 259: ST_TO_ADDR
// vc_chassis := chassis ;
 260: LD_ADDR_OWVAR 37
 264: PUSH
 265: LD_VAR 0 3
 269: ST_TO_ADDR
// vc_engine := engine ;
 270: LD_ADDR_OWVAR 39
 274: PUSH
 275: LD_VAR 0 4
 279: ST_TO_ADDR
// vc_control := control ;
 280: LD_ADDR_OWVAR 38
 284: PUSH
 285: LD_VAR 0 5
 289: ST_TO_ADDR
// vc_weapon := weapon ;
 290: LD_ADDR_OWVAR 40
 294: PUSH
 295: LD_VAR 0 6
 299: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 300: LD_ADDR_OWVAR 41
 304: PUSH
 305: LD_VAR 0 7
 309: ST_TO_ADDR
// result := CreateVehicle ;
 310: LD_ADDR_VAR 0 8
 314: PUSH
 315: CALL_OW 45
 319: ST_TO_ADDR
// end ;
 320: LD_VAR 0 8
 324: RET
// export function SayX ( units , ident ) ; var i ; begin
 325: LD_INT 0
 327: PPUSH
 328: PPUSH
// result := false ;
 329: LD_ADDR_VAR 0 3
 333: PUSH
 334: LD_INT 0
 336: ST_TO_ADDR
// if not units then
 337: LD_VAR 0 1
 341: NOT
 342: IFFALSE 346
// exit ;
 344: GO 400
// for i in units do
 346: LD_ADDR_VAR 0 4
 350: PUSH
 351: LD_VAR 0 1
 355: PUSH
 356: FOR_IN
 357: IFFALSE 398
// if IsOk ( i ) then
 359: LD_VAR 0 4
 363: PPUSH
 364: CALL_OW 302
 368: IFFALSE 396
// begin Say ( i , ident ) ;
 370: LD_VAR 0 4
 374: PPUSH
 375: LD_VAR 0 2
 379: PPUSH
 380: CALL_OW 88
// result := i ;
 384: LD_ADDR_VAR 0 3
 388: PUSH
 389: LD_VAR 0 4
 393: ST_TO_ADDR
// break ;
 394: GO 398
// end ;
 396: GO 356
 398: POP
 399: POP
// end ;
 400: LD_VAR 0 3
 404: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 405: LD_INT 0
 407: PPUSH
 408: PPUSH
// InitUc ;
 409: CALL_OW 18
// InitHc ;
 413: CALL_OW 19
// uc_side := 0 ;
 417: LD_ADDR_OWVAR 20
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// uc_nation := 0 ;
 425: LD_ADDR_OWVAR 21
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// for i = 1 to amount do
 433: LD_ADDR_VAR 0 4
 437: PUSH
 438: DOUBLE
 439: LD_INT 1
 441: DEC
 442: ST_TO_ADDR
 443: LD_VAR 0 2
 447: PUSH
 448: FOR_TO
 449: IFFALSE 522
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 451: LD_ADDR_OWVAR 29
 455: PUSH
 456: LD_INT 9
 458: PPUSH
 459: LD_INT 12
 461: PPUSH
 462: CALL_OW 12
 466: PUSH
 467: LD_INT 9
 469: PPUSH
 470: LD_INT 12
 472: PPUSH
 473: CALL_OW 12
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: ST_TO_ADDR
// hc_agressivity := 0 ;
 482: LD_ADDR_OWVAR 35
 486: PUSH
 487: LD_INT 0
 489: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 490: LD_INT 0
 492: PPUSH
 493: LD_INT 12
 495: PPUSH
 496: LD_INT 1
 498: PPUSH
 499: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 503: CALL_OW 44
 507: PPUSH
 508: LD_VAR 0 1
 512: PPUSH
 513: LD_INT 0
 515: PPUSH
 516: CALL_OW 49
// end ;
 520: GO 448
 522: POP
 523: POP
// InitHc ;
 524: CALL_OW 19
// end ;
 528: LD_VAR 0 3
 532: RET
// export function CreateNature ; var i ; begin
 533: LD_INT 0
 535: PPUSH
 536: PPUSH
// SpawnApeman ( forest , 9 ) ;
 537: LD_INT 1
 539: PPUSH
 540: LD_INT 9
 542: PPUSH
 543: CALL 405 0 2
// for i := 1 to 4 do
 547: LD_ADDR_VAR 0 2
 551: PUSH
 552: DOUBLE
 553: LD_INT 1
 555: DEC
 556: ST_TO_ADDR
 557: LD_INT 4
 559: PUSH
 560: FOR_TO
 561: IFFALSE 596
// begin hc_class := 21 ;
 563: LD_ADDR_OWVAR 28
 567: PUSH
 568: LD_INT 21
 570: ST_TO_ADDR
// hc_gallery :=  ;
 571: LD_ADDR_OWVAR 33
 575: PUSH
 576: LD_STRING 
 578: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 579: CALL_OW 44
 583: PPUSH
 584: LD_INT 1
 586: PPUSH
 587: LD_INT 0
 589: PPUSH
 590: CALL_OW 49
// end ;
 594: GO 560
 596: POP
 597: POP
// for i := 1 to 2 do
 598: LD_ADDR_VAR 0 2
 602: PUSH
 603: DOUBLE
 604: LD_INT 1
 606: DEC
 607: ST_TO_ADDR
 608: LD_INT 2
 610: PUSH
 611: FOR_TO
 612: IFFALSE 647
// begin hc_class := 18 ;
 614: LD_ADDR_OWVAR 28
 618: PUSH
 619: LD_INT 18
 621: ST_TO_ADDR
// hc_gallery :=  ;
 622: LD_ADDR_OWVAR 33
 626: PUSH
 627: LD_STRING 
 629: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 630: CALL_OW 44
 634: PPUSH
 635: LD_INT 1
 637: PPUSH
 638: LD_INT 0
 640: PPUSH
 641: CALL_OW 49
// end ;
 645: GO 611
 647: POP
 648: POP
// for i := 1 to 3 do
 649: LD_ADDR_VAR 0 2
 653: PUSH
 654: DOUBLE
 655: LD_INT 1
 657: DEC
 658: ST_TO_ADDR
 659: LD_INT 3
 661: PUSH
 662: FOR_TO
 663: IFFALSE 698
// begin hc_class := 13 ;
 665: LD_ADDR_OWVAR 28
 669: PUSH
 670: LD_INT 13
 672: ST_TO_ADDR
// hc_gallery :=  ;
 673: LD_ADDR_OWVAR 33
 677: PUSH
 678: LD_STRING 
 680: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 681: CALL_OW 44
 685: PPUSH
 686: LD_INT 1
 688: PPUSH
 689: LD_INT 0
 691: PPUSH
 692: CALL_OW 49
// end ;
 696: GO 662
 698: POP
 699: POP
// for i := 1 to 4 do
 700: LD_ADDR_VAR 0 2
 704: PUSH
 705: DOUBLE
 706: LD_INT 1
 708: DEC
 709: ST_TO_ADDR
 710: LD_INT 4
 712: PUSH
 713: FOR_TO
 714: IFFALSE 749
// begin hc_class := class_frog ;
 716: LD_ADDR_OWVAR 28
 720: PUSH
 721: LD_INT 19
 723: ST_TO_ADDR
// hc_gallery :=  ;
 724: LD_ADDR_OWVAR 33
 728: PUSH
 729: LD_STRING 
 731: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 732: CALL_OW 44
 736: PPUSH
 737: LD_INT 8
 739: PPUSH
 740: LD_INT 0
 742: PPUSH
 743: CALL_OW 49
// end ;
 747: GO 713
 749: POP
 750: POP
// end ;
 751: LD_VAR 0 1
 755: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 756: LD_INT 0
 758: PPUSH
 759: PPUSH
 760: PPUSH
// if not observer or not unit then
 761: LD_VAR 0 1
 765: NOT
 766: PUSH
 767: LD_VAR 0 2
 771: NOT
 772: OR
 773: IFFALSE 777
// exit ;
 775: GO 825
// if not See ( GetSide ( observer ) , unit ) then
 777: LD_VAR 0 1
 781: PPUSH
 782: CALL_OW 255
 786: PPUSH
 787: LD_VAR 0 2
 791: PPUSH
 792: CALL_OW 292
 796: NOT
 797: IFFALSE 801
// exit ;
 799: GO 825
// result := GetDistUnits ( observer , unit ) < 12 ;
 801: LD_ADDR_VAR 0 3
 805: PUSH
 806: LD_VAR 0 1
 810: PPUSH
 811: LD_VAR 0 2
 815: PPUSH
 816: CALL_OW 296
 820: PUSH
 821: LD_INT 12
 823: LESS
 824: ST_TO_ADDR
// end ; end_of_file
 825: LD_VAR 0 3
 829: RET
// export Gladstone , Lynch ; export usForces , usSci ; export function PrepareAmericans ; var i , un , veh , tmp , arm ; begin
 830: LD_INT 0
 832: PPUSH
 833: PPUSH
 834: PPUSH
 835: PPUSH
 836: PPUSH
 837: PPUSH
// usForces := [ ] ;
 838: LD_ADDR_EXP 21
 842: PUSH
 843: EMPTY
 844: ST_TO_ADDR
// usSci := [ ] ;
 845: LD_ADDR_EXP 22
 849: PUSH
 850: EMPTY
 851: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
 852: LD_INT 1
 854: PPUSH
 855: LD_STRING Delta
 857: PPUSH
 858: CALL_OW 500
// SetResourceType ( GetBase ( Delta ) , mat_cans , 400 ) ;
 862: LD_INT 1
 864: PPUSH
 865: CALL_OW 274
 869: PPUSH
 870: LD_INT 1
 872: PPUSH
 873: LD_INT 400
 875: PPUSH
 876: CALL_OW 277
// SetResourceType ( GetBase ( Delta ) , mat_oil , 80 ) ;
 880: LD_INT 1
 882: PPUSH
 883: CALL_OW 274
 887: PPUSH
 888: LD_INT 2
 890: PPUSH
 891: LD_INT 80
 893: PPUSH
 894: CALL_OW 277
// uc_side := 1 ;
 898: LD_ADDR_OWVAR 20
 902: PUSH
 903: LD_INT 1
 905: ST_TO_ADDR
// uc_nation := 1 ;
 906: LD_ADDR_OWVAR 21
 910: PUSH
 911: LD_INT 1
 913: ST_TO_ADDR
// InitHc ;
 914: CALL_OW 19
// hc_importance := 0 ;
 918: LD_ADDR_OWVAR 32
 922: PUSH
 923: LD_INT 0
 925: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
 926: LD_ADDR_EXP 20
 930: PUSH
 931: LD_STRING Lynch
 933: PPUSH
 934: LD_INT 0
 936: PPUSH
 937: LD_STRING 
 939: PPUSH
 940: CALL 29757 0 3
 944: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false ,  ) ;
 945: LD_ADDR_EXP 19
 949: PUSH
 950: LD_STRING Gladstone
 952: PPUSH
 953: LD_INT 0
 955: PPUSH
 956: LD_STRING 
 958: PPUSH
 959: CALL 29757 0 3
 963: ST_TO_ADDR
// PlaceHumanInUnit ( Lynch , Delta ) ;
 964: LD_EXP 20
 968: PPUSH
 969: LD_INT 1
 971: PPUSH
 972: CALL_OW 52
// PlaceHumanInUnit ( Gladstone , usLab ) ;
 976: LD_EXP 19
 980: PPUSH
 981: LD_INT 3
 983: PPUSH
 984: CALL_OW 52
// for i := 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
 988: LD_ADDR_VAR 0 2
 992: PUSH
 993: DOUBLE
 994: LD_INT 1
 996: DEC
 997: ST_TO_ADDR
 998: LD_INT 1
1000: PUSH
1001: LD_INT 2
1003: PUSH
1004: LD_INT 2
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: LIST
1011: PUSH
1012: LD_OWVAR 67
1016: ARRAY
1017: PUSH
1018: FOR_TO
1019: IFFALSE 1065
// begin PrepareHuman ( false , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
1021: LD_INT 0
1023: PPUSH
1024: LD_INT 2
1026: PPUSH
1027: LD_INT 1
1029: PUSH
1030: LD_INT 2
1032: PUSH
1033: LD_INT 2
1035: PUSH
1036: EMPTY
1037: LIST
1038: LIST
1039: LIST
1040: PUSH
1041: LD_OWVAR 67
1045: ARRAY
1046: PPUSH
1047: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , Delta ) ;
1051: CALL_OW 44
1055: PPUSH
1056: LD_INT 1
1058: PPUSH
1059: CALL_OW 52
// end ;
1063: GO 1018
1065: POP
1066: POP
// for i := 1 to 7 - Difficulty do
1067: LD_ADDR_VAR 0 2
1071: PUSH
1072: DOUBLE
1073: LD_INT 1
1075: DEC
1076: ST_TO_ADDR
1077: LD_INT 7
1079: PUSH
1080: LD_OWVAR 67
1084: MINUS
1085: PUSH
1086: FOR_TO
1087: IFFALSE 1172
// begin PrepareHuman ( false , 4 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
1089: LD_INT 0
1091: PPUSH
1092: LD_INT 4
1094: PPUSH
1095: LD_INT 1
1097: PUSH
1098: LD_INT 2
1100: PUSH
1101: LD_INT 2
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: LIST
1108: PUSH
1109: LD_OWVAR 67
1113: ARRAY
1114: PPUSH
1115: CALL_OW 380
// un := CreateHuman ;
1119: LD_ADDR_VAR 0 3
1123: PUSH
1124: CALL_OW 44
1128: ST_TO_ADDR
// PlaceHumanInUnit ( un , usLab ) ;
1129: LD_VAR 0 3
1133: PPUSH
1134: LD_INT 3
1136: PPUSH
1137: CALL_OW 52
// usSci := Replace ( usSci , usSci + 1 , un ) ;
1141: LD_ADDR_EXP 22
1145: PUSH
1146: LD_EXP 22
1150: PPUSH
1151: LD_EXP 22
1155: PUSH
1156: LD_INT 1
1158: PLUS
1159: PPUSH
1160: LD_VAR 0 3
1164: PPUSH
1165: CALL_OW 1
1169: ST_TO_ADDR
// end ;
1170: GO 1086
1172: POP
1173: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
1174: LD_ADDR_VAR 0 6
1178: PUSH
1179: LD_INT 22
1181: PUSH
1182: LD_INT 1
1184: PUSH
1185: EMPTY
1186: LIST
1187: LIST
1188: PUSH
1189: LD_INT 30
1191: PUSH
1192: LD_INT 4
1194: PUSH
1195: EMPTY
1196: LIST
1197: LIST
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: PPUSH
1203: CALL_OW 69
1207: ST_TO_ADDR
// for i := 1 to 3 + [ 1 , 2 , 2 ] [ Difficulty ] do
1208: LD_ADDR_VAR 0 2
1212: PUSH
1213: DOUBLE
1214: LD_INT 1
1216: DEC
1217: ST_TO_ADDR
1218: LD_INT 3
1220: PUSH
1221: LD_INT 1
1223: PUSH
1224: LD_INT 2
1226: PUSH
1227: LD_INT 2
1229: PUSH
1230: EMPTY
1231: LIST
1232: LIST
1233: LIST
1234: PUSH
1235: LD_OWVAR 67
1239: ARRAY
1240: PLUS
1241: PUSH
1242: FOR_TO
1243: IFFALSE 1321
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
1245: LD_INT 0
1247: PPUSH
1248: LD_INT 1
1250: PPUSH
1251: LD_INT 1
1253: PUSH
1254: LD_INT 2
1256: PUSH
1257: LD_INT 3
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: LIST
1264: PUSH
1265: LD_OWVAR 67
1269: ARRAY
1270: PPUSH
1271: CALL_OW 380
// un := CreateHuman ;
1275: LD_ADDR_VAR 0 3
1279: PUSH
1280: CALL_OW 44
1284: ST_TO_ADDR
// usForces := usForces ^ un ;
1285: LD_ADDR_EXP 21
1289: PUSH
1290: LD_EXP 21
1294: PUSH
1295: LD_VAR 0 3
1299: ADD
1300: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm [ 1 ] ) ;
1301: LD_VAR 0 3
1305: PPUSH
1306: LD_VAR 0 6
1310: PUSH
1311: LD_INT 1
1313: ARRAY
1314: PPUSH
1315: CALL_OW 52
// end ;
1319: GO 1242
1321: POP
1322: POP
// if Difficulty > 1 then
1323: LD_OWVAR 67
1327: PUSH
1328: LD_INT 1
1330: GREATER
1331: IFFALSE 1426
// begin for i := 1 to Difficulty do
1333: LD_ADDR_VAR 0 2
1337: PUSH
1338: DOUBLE
1339: LD_INT 1
1341: DEC
1342: ST_TO_ADDR
1343: LD_OWVAR 67
1347: PUSH
1348: FOR_TO
1349: IFFALSE 1424
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
1351: LD_INT 0
1353: PPUSH
1354: LD_INT 1
1356: PPUSH
1357: LD_INT 1
1359: PUSH
1360: LD_INT 2
1362: PUSH
1363: LD_INT 2
1365: PUSH
1366: EMPTY
1367: LIST
1368: LIST
1369: LIST
1370: PUSH
1371: LD_OWVAR 67
1375: ARRAY
1376: PPUSH
1377: CALL_OW 380
// un := CreateHuman ;
1381: LD_ADDR_VAR 0 3
1385: PUSH
1386: CALL_OW 44
1390: ST_TO_ADDR
// usForces := usForces ^ un ;
1391: LD_ADDR_EXP 21
1395: PUSH
1396: LD_EXP 21
1400: PUSH
1401: LD_VAR 0 3
1405: ADD
1406: ST_TO_ADDR
// PlaceUnitArea ( un , usAdditionalDefenceArea , false ) ;
1407: LD_VAR 0 3
1411: PPUSH
1412: LD_INT 9
1414: PPUSH
1415: LD_INT 0
1417: PPUSH
1418: CALL_OW 49
// end ;
1422: GO 1348
1424: POP
1425: POP
// end ; PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 100 ) ;
1426: LD_INT 1
1428: PPUSH
1429: LD_INT 1
1431: PPUSH
1432: LD_INT 1
1434: PPUSH
1435: LD_INT 2
1437: PPUSH
1438: LD_INT 1
1440: PPUSH
1441: LD_INT 2
1443: PPUSH
1444: LD_INT 100
1446: PPUSH
1447: CALL 237 0 7
// veh := CreateVehicle ;
1451: LD_ADDR_VAR 0 4
1455: PUSH
1456: CALL_OW 45
1460: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1461: LD_VAR 0 4
1465: PPUSH
1466: LD_INT 2
1468: PPUSH
1469: CALL_OW 233
// PlaceUnitXY ( veh , 43 , 24 , false ) ;
1473: LD_VAR 0 4
1477: PPUSH
1478: LD_INT 43
1480: PPUSH
1481: LD_INT 24
1483: PPUSH
1484: LD_INT 0
1486: PPUSH
1487: CALL_OW 48
// end ;
1491: LD_VAR 0 1
1495: RET
// export function SendSciToForest ; var i , j , k , tmp , xy ; begin
1496: LD_INT 0
1498: PPUSH
1499: PPUSH
1500: PPUSH
1501: PPUSH
1502: PPUSH
1503: PPUSH
// if not usSci then
1504: LD_EXP 22
1508: NOT
1509: IFFALSE 1513
// exit ;
1511: GO 1687
// xy := AreaToList ( tameArea , 0 ) ;
1513: LD_ADDR_VAR 0 6
1517: PUSH
1518: LD_INT 5
1520: PPUSH
1521: LD_INT 0
1523: PPUSH
1524: CALL_OW 517
1528: ST_TO_ADDR
// for i in usSci do
1529: LD_ADDR_VAR 0 2
1533: PUSH
1534: LD_EXP 22
1538: PUSH
1539: FOR_IN
1540: IFFALSE 1685
// begin k := rand ( 1 , xy [ 1 ] ) ;
1542: LD_ADDR_VAR 0 4
1546: PUSH
1547: LD_INT 1
1549: PPUSH
1550: LD_VAR 0 6
1554: PUSH
1555: LD_INT 1
1557: ARRAY
1558: PPUSH
1559: CALL_OW 12
1563: ST_TO_ADDR
// ComExitBuilding ( i ) ;
1564: LD_VAR 0 2
1568: PPUSH
1569: CALL_OW 122
// AddComMoveXY ( i , xy [ 1 ] [ k ] , xy [ 2 ] [ k ] ) ;
1573: LD_VAR 0 2
1577: PPUSH
1578: LD_VAR 0 6
1582: PUSH
1583: LD_INT 1
1585: ARRAY
1586: PUSH
1587: LD_VAR 0 4
1591: ARRAY
1592: PPUSH
1593: LD_VAR 0 6
1597: PUSH
1598: LD_INT 2
1600: ARRAY
1601: PUSH
1602: LD_VAR 0 4
1606: ARRAY
1607: PPUSH
1608: CALL_OW 171
// for j := 1 to 2 do
1612: LD_ADDR_VAR 0 3
1616: PUSH
1617: DOUBLE
1618: LD_INT 1
1620: DEC
1621: ST_TO_ADDR
1622: LD_INT 2
1624: PUSH
1625: FOR_TO
1626: IFFALSE 1681
// begin tmp := Delete ( xy [ j ] , k ) ;
1628: LD_ADDR_VAR 0 5
1632: PUSH
1633: LD_VAR 0 6
1637: PUSH
1638: LD_VAR 0 3
1642: ARRAY
1643: PPUSH
1644: LD_VAR 0 4
1648: PPUSH
1649: CALL_OW 3
1653: ST_TO_ADDR
// xy := Replace ( xy , j , tmp ) ;
1654: LD_ADDR_VAR 0 6
1658: PUSH
1659: LD_VAR 0 6
1663: PPUSH
1664: LD_VAR 0 3
1668: PPUSH
1669: LD_VAR 0 5
1673: PPUSH
1674: CALL_OW 1
1678: ST_TO_ADDR
// end ;
1679: GO 1625
1681: POP
1682: POP
// end ;
1683: GO 1539
1685: POP
1686: POP
// end ;
1687: LD_VAR 0 1
1691: RET
// every 0 0$5 + 0 0$10 trigger aviradzeSpotted and usSci and not usAlert and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do var i , x , y , d , ape ;
1692: LD_EXP 4
1696: PUSH
1697: LD_EXP 22
1701: AND
1702: PUSH
1703: LD_EXP 10
1707: NOT
1708: AND
1709: PUSH
1710: LD_INT 22
1712: PUSH
1713: LD_INT 0
1715: PUSH
1716: EMPTY
1717: LIST
1718: LIST
1719: PUSH
1720: LD_INT 25
1722: PUSH
1723: LD_INT 12
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: PPUSH
1734: CALL_OW 69
1738: AND
1739: IFFALSE 2231
1741: GO 1743
1743: DISABLE
1744: LD_INT 0
1746: PPUSH
1747: PPUSH
1748: PPUSH
1749: PPUSH
1750: PPUSH
// begin enable ;
1751: ENABLE
// if UnitFilter ( usSci , [ f_or , [ f_hastask ] , [ f_inside ] ] ) then
1752: LD_EXP 22
1756: PPUSH
1757: LD_INT 2
1759: PUSH
1760: LD_INT 60
1762: PUSH
1763: EMPTY
1764: LIST
1765: PUSH
1766: LD_INT 54
1768: PUSH
1769: EMPTY
1770: LIST
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: LIST
1776: PPUSH
1777: CALL_OW 72
1781: IFFALSE 1785
// exit ;
1783: GO 2231
// for i in usSci do
1785: LD_ADDR_VAR 0 1
1789: PUSH
1790: LD_EXP 22
1794: PUSH
1795: FOR_IN
1796: IFFALSE 2229
// begin if not HasTask ( i ) and GetLives ( i ) = 1000 then
1798: LD_VAR 0 1
1802: PPUSH
1803: CALL_OW 314
1807: NOT
1808: PUSH
1809: LD_VAR 0 1
1813: PPUSH
1814: CALL_OW 256
1818: PUSH
1819: LD_INT 1000
1821: EQUAL
1822: AND
1823: IFFALSE 2030
// begin ape := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) , i ) ;
1825: LD_ADDR_VAR 0 5
1829: PUSH
1830: LD_INT 22
1832: PUSH
1833: LD_INT 0
1835: PUSH
1836: EMPTY
1837: LIST
1838: LIST
1839: PUSH
1840: LD_INT 25
1842: PUSH
1843: LD_INT 12
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: PPUSH
1854: CALL_OW 69
1858: PPUSH
1859: LD_VAR 0 1
1863: PPUSH
1864: CALL_OW 74
1868: ST_TO_ADDR
// if GetDistUnits ( i , ape ) < 10 then
1869: LD_VAR 0 1
1873: PPUSH
1874: LD_VAR 0 5
1878: PPUSH
1879: CALL_OW 296
1883: PUSH
1884: LD_INT 10
1886: LESS
1887: IFFALSE 1920
// ComTameXY ( i , GetX ( ape ) , GetY ( ape ) ) else
1889: LD_VAR 0 1
1893: PPUSH
1894: LD_VAR 0 5
1898: PPUSH
1899: CALL_OW 250
1903: PPUSH
1904: LD_VAR 0 5
1908: PPUSH
1909: CALL_OW 251
1913: PPUSH
1914: CALL_OW 131
1918: GO 2030
// begin d := rand ( 0 , 5 ) ;
1920: LD_ADDR_VAR 0 4
1924: PUSH
1925: LD_INT 0
1927: PPUSH
1928: LD_INT 5
1930: PPUSH
1931: CALL_OW 12
1935: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 3 ) ;
1936: LD_ADDR_VAR 0 2
1940: PUSH
1941: LD_VAR 0 1
1945: PPUSH
1946: CALL_OW 250
1950: PPUSH
1951: LD_VAR 0 4
1955: PPUSH
1956: LD_INT 3
1958: PPUSH
1959: CALL_OW 272
1963: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 3 ) ;
1964: LD_ADDR_VAR 0 3
1968: PUSH
1969: LD_VAR 0 1
1973: PPUSH
1974: CALL_OW 251
1978: PPUSH
1979: LD_VAR 0 4
1983: PPUSH
1984: LD_INT 3
1986: PPUSH
1987: CALL_OW 273
1991: ST_TO_ADDR
// if not ValidHex ( x , y ) then
1992: LD_VAR 0 2
1996: PPUSH
1997: LD_VAR 0 3
2001: PPUSH
2002: CALL_OW 488
2006: NOT
2007: IFFALSE 2011
// continue ;
2009: GO 1795
// ComMoveXY ( i , x , y ) ;
2011: LD_VAR 0 1
2015: PPUSH
2016: LD_VAR 0 2
2020: PPUSH
2021: LD_VAR 0 3
2025: PPUSH
2026: CALL_OW 111
// end ; end ; if GetLives ( i ) < 900 and GetDistUnitXY ( i , 37 , 23 ) > 10 then
2030: LD_VAR 0 1
2034: PPUSH
2035: CALL_OW 256
2039: PUSH
2040: LD_INT 900
2042: LESS
2043: PUSH
2044: LD_VAR 0 1
2048: PPUSH
2049: LD_INT 37
2051: PPUSH
2052: LD_INT 23
2054: PPUSH
2055: CALL_OW 297
2059: PUSH
2060: LD_INT 10
2062: GREATER
2063: AND
2064: IFFALSE 2140
// begin if IsOk ( Gladstone ) and IsInUnit ( Gladstone ) then
2066: LD_EXP 19
2070: PPUSH
2071: CALL_OW 302
2075: PUSH
2076: LD_EXP 19
2080: PPUSH
2081: CALL_OW 310
2085: AND
2086: IFFALSE 2097
// ComExitBuilding ( Gladstone ) ;
2088: LD_EXP 19
2092: PPUSH
2093: CALL_OW 122
// AddComHeal ( Gladstone , i ) ;
2097: LD_EXP 19
2101: PPUSH
2102: LD_VAR 0 1
2106: PPUSH
2107: CALL_OW 188
// AddComEnterUnit ( Gladstone , usLab ) ;
2111: LD_EXP 19
2115: PPUSH
2116: LD_INT 3
2118: PPUSH
2119: CALL_OW 180
// ComMoveXY ( i , 37 , 23 ) ;
2123: LD_VAR 0 1
2127: PPUSH
2128: LD_INT 37
2130: PPUSH
2131: LD_INT 23
2133: PPUSH
2134: CALL_OW 111
// end else
2138: GO 2227
// if GetLives ( i ) = 1000 then
2140: LD_VAR 0 1
2144: PPUSH
2145: CALL_OW 256
2149: PUSH
2150: LD_INT 1000
2152: EQUAL
2153: IFFALSE 2227
// begin if SideShoot ( i ) = 2 then
2155: LD_VAR 0 1
2159: PPUSH
2160: CALL_OW 503
2164: PUSH
2165: LD_INT 2
2167: EQUAL
2168: IFFALSE 2215
// begin if not usAlert then
2170: LD_EXP 10
2174: NOT
2175: IFFALSE 2185
// usAlert := true ;
2177: LD_ADDR_EXP 10
2181: PUSH
2182: LD_INT 1
2184: ST_TO_ADDR
// AddComEnterUnit ( i , usLab ) ;
2185: LD_VAR 0 1
2189: PPUSH
2190: LD_INT 3
2192: PPUSH
2193: CALL_OW 180
// usSci := usSci diff i ;
2197: LD_ADDR_EXP 22
2201: PUSH
2202: LD_EXP 22
2206: PUSH
2207: LD_VAR 0 1
2211: DIFF
2212: ST_TO_ADDR
// end else
2213: GO 2227
// ComMoveToArea ( i , tameArea ) ;
2215: LD_VAR 0 1
2219: PPUSH
2220: LD_INT 5
2222: PPUSH
2223: CALL_OW 113
// end ; end ;
2227: GO 1795
2229: POP
2230: POP
// end ;
2231: PPOPN 5
2233: END
// every 0 0$1 trigger not usAlert and ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 999 ] ] ] ) or FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) ) do
2234: LD_EXP 10
2238: NOT
2239: PUSH
2240: LD_INT 22
2242: PUSH
2243: LD_INT 1
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: PUSH
2250: LD_INT 21
2252: PUSH
2253: LD_INT 3
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: PUSH
2260: LD_INT 3
2262: PUSH
2263: LD_INT 57
2265: PUSH
2266: EMPTY
2267: LIST
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PUSH
2273: LD_INT 3
2275: PUSH
2276: LD_INT 24
2278: PUSH
2279: LD_INT 999
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: PUSH
2290: EMPTY
2291: LIST
2292: LIST
2293: LIST
2294: LIST
2295: PPUSH
2296: CALL_OW 69
2300: PUSH
2301: LD_INT 7
2303: PPUSH
2304: LD_INT 22
2306: PUSH
2307: LD_INT 2
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: PPUSH
2314: CALL_OW 70
2318: OR
2319: AND
2320: IFFALSE 2333
2322: GO 2324
2324: DISABLE
// usAlert := true ;
2325: LD_ADDR_EXP 10
2329: PUSH
2330: LD_INT 1
2332: ST_TO_ADDR
2333: END
// every 0 0$1 trigger usAlert do var i , b , arm ;
2334: LD_EXP 10
2338: IFFALSE 2685
2340: GO 2342
2342: DISABLE
2343: LD_INT 0
2345: PPUSH
2346: PPUSH
2347: PPUSH
// begin usActiveDefend := true ;
2348: LD_ADDR_EXP 11
2352: PUSH
2353: LD_INT 1
2355: ST_TO_ADDR
// if not usForces then
2356: LD_EXP 21
2360: NOT
2361: IFFALSE 2365
// exit ;
2363: GO 2685
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
2365: LD_ADDR_VAR 0 3
2369: PUSH
2370: LD_INT 22
2372: PUSH
2373: LD_INT 1
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: PUSH
2380: LD_INT 30
2382: PUSH
2383: LD_INT 4
2385: PUSH
2386: EMPTY
2387: LIST
2388: LIST
2389: PUSH
2390: EMPTY
2391: LIST
2392: LIST
2393: PPUSH
2394: CALL_OW 69
2398: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
2399: LD_ADDR_VAR 0 2
2403: PUSH
2404: LD_INT 22
2406: PUSH
2407: LD_INT 1
2409: PUSH
2410: EMPTY
2411: LIST
2412: LIST
2413: PUSH
2414: LD_INT 30
2416: PUSH
2417: LD_INT 31
2419: PUSH
2420: EMPTY
2421: LIST
2422: LIST
2423: PUSH
2424: EMPTY
2425: LIST
2426: LIST
2427: PPUSH
2428: CALL_OW 69
2432: ST_TO_ADDR
// ComExitBuilding ( Lynch ) ;
2433: LD_EXP 20
2437: PPUSH
2438: CALL_OW 122
// AddComEnterUnit ( Lynch , arm [ 1 ] ) ;
2442: LD_EXP 20
2446: PPUSH
2447: LD_VAR 0 3
2451: PUSH
2452: LD_INT 1
2454: ARRAY
2455: PPUSH
2456: CALL_OW 180
// if IsOk ( Gladstone ) then
2460: LD_EXP 19
2464: PPUSH
2465: CALL_OW 302
2469: IFFALSE 2510
// begin ComExitBuilding ( Gladstone ) ;
2471: LD_EXP 19
2475: PPUSH
2476: CALL_OW 122
// AddComEnterUnit ( Gladstone , arm [ 1 ] ) ;
2480: LD_EXP 19
2484: PPUSH
2485: LD_VAR 0 3
2489: PUSH
2490: LD_INT 1
2492: ARRAY
2493: PPUSH
2494: CALL_OW 180
// AddComChangeProfession ( Gladstone , class_soldier ) ;
2498: LD_EXP 19
2502: PPUSH
2503: LD_INT 1
2505: PPUSH
2506: CALL_OW 183
// end ; ComExitBuilding ( usForces [ 1 ] ) ;
2510: LD_EXP 21
2514: PUSH
2515: LD_INT 1
2517: ARRAY
2518: PPUSH
2519: CALL_OW 122
// AddComEnterUnit ( usForces [ 1 ] , b [ 1 ] ) ;
2523: LD_EXP 21
2527: PUSH
2528: LD_INT 1
2530: ARRAY
2531: PPUSH
2532: LD_VAR 0 2
2536: PUSH
2537: LD_INT 1
2539: ARRAY
2540: PPUSH
2541: CALL_OW 180
// ComExitBuilding ( usForces [ 2 ] ) ;
2545: LD_EXP 21
2549: PUSH
2550: LD_INT 2
2552: ARRAY
2553: PPUSH
2554: CALL_OW 122
// AddComEnterUnit ( usForces [ 2 ] , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
2558: LD_EXP 21
2562: PUSH
2563: LD_INT 2
2565: ARRAY
2566: PPUSH
2567: LD_INT 22
2569: PUSH
2570: LD_INT 1
2572: PUSH
2573: EMPTY
2574: LIST
2575: LIST
2576: PUSH
2577: LD_INT 30
2579: PUSH
2580: LD_INT 32
2582: PUSH
2583: EMPTY
2584: LIST
2585: LIST
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: PPUSH
2591: CALL_OW 69
2595: PUSH
2596: LD_INT 1
2598: ARRAY
2599: PPUSH
2600: CALL_OW 180
// if b > 1 and usForces > 2 then
2604: LD_VAR 0 2
2608: PUSH
2609: LD_INT 1
2611: GREATER
2612: PUSH
2613: LD_EXP 21
2617: PUSH
2618: LD_INT 2
2620: GREATER
2621: AND
2622: IFFALSE 2685
// begin repeat wait ( 0 0$1 ) ;
2624: LD_INT 35
2626: PPUSH
2627: CALL_OW 67
// until BuildingStatus ( b [ 2 ] ) <> bs_build ;
2631: LD_VAR 0 2
2635: PUSH
2636: LD_INT 2
2638: ARRAY
2639: PPUSH
2640: CALL_OW 461
2644: PUSH
2645: LD_INT 1
2647: NONEQUAL
2648: IFFALSE 2624
// ComExitBuilding ( usForces [ 3 ] ) ;
2650: LD_EXP 21
2654: PUSH
2655: LD_INT 3
2657: ARRAY
2658: PPUSH
2659: CALL_OW 122
// AddComEnterUnit ( usForces [ 3 ] , b [ 2 ] ) ;
2663: LD_EXP 21
2667: PUSH
2668: LD_INT 3
2670: ARRAY
2671: PPUSH
2672: LD_VAR 0 2
2676: PUSH
2677: LD_INT 2
2679: ARRAY
2680: PPUSH
2681: CALL_OW 180
// end ; end ;
2685: PPOPN 3
2687: END
// every 0 0$1 trigger GetLives ( usLab ) < 999 and usAlert and usForces do var i ;
2688: LD_INT 3
2690: PPUSH
2691: CALL_OW 256
2695: PUSH
2696: LD_INT 999
2698: LESS
2699: PUSH
2700: LD_EXP 10
2704: AND
2705: PUSH
2706: LD_EXP 21
2710: AND
2711: IFFALSE 2882
2713: GO 2715
2715: DISABLE
2716: LD_INT 0
2718: PPUSH
// begin for i in usForces do
2719: LD_ADDR_VAR 0 1
2723: PUSH
2724: LD_EXP 21
2728: PUSH
2729: FOR_IN
2730: IFFALSE 2769
// begin if IsInUnit ( i ) then
2732: LD_VAR 0 1
2736: PPUSH
2737: CALL_OW 310
2741: IFFALSE 2752
// ComExitBuilding ( i ) ;
2743: LD_VAR 0 1
2747: PPUSH
2748: CALL_OW 122
// AddComAgressiveMove ( i , 31 , 8 ) ;
2752: LD_VAR 0 1
2756: PPUSH
2757: LD_INT 31
2759: PPUSH
2760: LD_INT 8
2762: PPUSH
2763: CALL_OW 174
// end ;
2767: GO 2729
2769: POP
2770: POP
// wait ( 0 0$8 ) ;
2771: LD_INT 280
2773: PPUSH
2774: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) then
2778: LD_INT 22
2780: PUSH
2781: LD_INT 2
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: PUSH
2788: LD_INT 91
2790: PUSH
2791: LD_INT 3
2793: PUSH
2794: LD_INT 14
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: LIST
2801: PUSH
2802: EMPTY
2803: LIST
2804: LIST
2805: PPUSH
2806: CALL_OW 69
2810: IFFALSE 2860
// ComAttackUnit ( usForces , FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) [ 1 ] ) else
2812: LD_EXP 21
2816: PPUSH
2817: LD_INT 22
2819: PUSH
2820: LD_INT 2
2822: PUSH
2823: EMPTY
2824: LIST
2825: LIST
2826: PUSH
2827: LD_INT 91
2829: PUSH
2830: LD_INT 3
2832: PUSH
2833: LD_INT 14
2835: PUSH
2836: EMPTY
2837: LIST
2838: LIST
2839: LIST
2840: PUSH
2841: EMPTY
2842: LIST
2843: LIST
2844: PPUSH
2845: CALL_OW 69
2849: PUSH
2850: LD_INT 1
2852: ARRAY
2853: PPUSH
2854: CALL_OW 115
2858: GO 2882
// begin wait ( 0 0$20 ) ;
2860: LD_INT 700
2862: PPUSH
2863: CALL_OW 67
// AddComMoveXY ( usForces , 39 , 19 ) ;
2867: LD_EXP 21
2871: PPUSH
2872: LD_INT 39
2874: PPUSH
2875: LD_INT 19
2877: PPUSH
2878: CALL_OW 171
// end ; end ;
2882: PPOPN 1
2884: END
// every 0 0$3 trigger ( GetDistUnits ( Heike , Delta ) < 10 or GetLives ( usLab ) < 999 ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do var tmp , veh ;
2885: LD_EXP 23
2889: PPUSH
2890: LD_INT 1
2892: PPUSH
2893: CALL_OW 296
2897: PUSH
2898: LD_INT 10
2900: LESS
2901: PUSH
2902: LD_INT 3
2904: PPUSH
2905: CALL_OW 256
2909: PUSH
2910: LD_INT 999
2912: LESS
2913: OR
2914: PUSH
2915: LD_INT 22
2917: PUSH
2918: LD_INT 1
2920: PUSH
2921: EMPTY
2922: LIST
2923: LIST
2924: PUSH
2925: LD_INT 25
2927: PUSH
2928: LD_INT 2
2930: PUSH
2931: EMPTY
2932: LIST
2933: LIST
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: PPUSH
2939: CALL_OW 69
2943: AND
2944: IFFALSE 3058
2946: GO 2948
2948: DISABLE
2949: LD_INT 0
2951: PPUSH
2952: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
2953: LD_ADDR_VAR 0 1
2957: PUSH
2958: LD_INT 22
2960: PUSH
2961: LD_INT 1
2963: PUSH
2964: EMPTY
2965: LIST
2966: LIST
2967: PUSH
2968: LD_INT 25
2970: PUSH
2971: LD_INT 2
2973: PUSH
2974: EMPTY
2975: LIST
2976: LIST
2977: PUSH
2978: EMPTY
2979: LIST
2980: LIST
2981: PPUSH
2982: CALL_OW 69
2986: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2987: LD_ADDR_VAR 0 2
2991: PUSH
2992: LD_INT 22
2994: PUSH
2995: LD_INT 1
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: PUSH
3002: LD_INT 21
3004: PUSH
3005: LD_INT 2
3007: PUSH
3008: EMPTY
3009: LIST
3010: LIST
3011: PUSH
3012: LD_INT 58
3014: PUSH
3015: EMPTY
3016: LIST
3017: PUSH
3018: EMPTY
3019: LIST
3020: LIST
3021: LIST
3022: PPUSH
3023: CALL_OW 69
3027: ST_TO_ADDR
// if not tmp then
3028: LD_VAR 0 1
3032: NOT
3033: IFFALSE 3037
// exit ;
3035: GO 3058
// ComExitBuilding ( tmp ) ;
3037: LD_VAR 0 1
3041: PPUSH
3042: CALL_OW 122
// AddComDismantle ( tmp , usLab ) ;
3046: LD_VAR 0 1
3050: PPUSH
3051: LD_INT 3
3053: PPUSH
3054: CALL_OW 227
// end ;
3058: PPOPN 2
3060: END
// every 0 0$1 trigger usAlert and FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) do var i , tmp ;
3061: LD_EXP 10
3065: PUSH
3066: LD_INT 7
3068: PPUSH
3069: LD_INT 22
3071: PUSH
3072: LD_INT 1
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: PUSH
3079: LD_INT 21
3081: PUSH
3082: LD_INT 1
3084: PUSH
3085: EMPTY
3086: LIST
3087: LIST
3088: PUSH
3089: LD_INT 3
3091: PUSH
3092: LD_INT 24
3094: PUSH
3095: LD_INT 600
3097: PUSH
3098: EMPTY
3099: LIST
3100: LIST
3101: PUSH
3102: EMPTY
3103: LIST
3104: LIST
3105: PUSH
3106: EMPTY
3107: LIST
3108: LIST
3109: LIST
3110: PPUSH
3111: CALL_OW 70
3115: AND
3116: IFFALSE 3244
3118: GO 3120
3120: DISABLE
3121: LD_INT 0
3123: PPUSH
3124: PPUSH
// begin enable ;
3125: ENABLE
// tmp := FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) ;
3126: LD_ADDR_VAR 0 2
3130: PUSH
3131: LD_INT 7
3133: PPUSH
3134: LD_INT 22
3136: PUSH
3137: LD_INT 1
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: PUSH
3144: LD_INT 21
3146: PUSH
3147: LD_INT 1
3149: PUSH
3150: EMPTY
3151: LIST
3152: LIST
3153: PUSH
3154: LD_INT 3
3156: PUSH
3157: LD_INT 24
3159: PUSH
3160: LD_INT 600
3162: PUSH
3163: EMPTY
3164: LIST
3165: LIST
3166: PUSH
3167: EMPTY
3168: LIST
3169: LIST
3170: PUSH
3171: EMPTY
3172: LIST
3173: LIST
3174: LIST
3175: PPUSH
3176: CALL_OW 70
3180: ST_TO_ADDR
// if not tmp then
3181: LD_VAR 0 2
3185: NOT
3186: IFFALSE 3190
// exit ;
3188: GO 3244
// for i in tmp do
3190: LD_ADDR_VAR 0 1
3194: PUSH
3195: LD_VAR 0 2
3199: PUSH
3200: FOR_IN
3201: IFFALSE 3242
// if IsInUnit ( i ) then
3203: LD_VAR 0 1
3207: PPUSH
3208: CALL_OW 310
3212: IFFALSE 3225
// ComExitBuilding ( i ) else
3214: LD_VAR 0 1
3218: PPUSH
3219: CALL_OW 122
3223: GO 3240
// ComMoveXY ( i , 48 , 74 ) ;
3225: LD_VAR 0 1
3229: PPUSH
3230: LD_INT 48
3232: PPUSH
3233: LD_INT 74
3235: PPUSH
3236: CALL_OW 111
3240: GO 3200
3242: POP
3243: POP
// end ;
3244: PPOPN 2
3246: END
// every 12 12$00 do var i , un , tmp ;
3247: GO 3249
3249: DISABLE
3250: LD_INT 0
3252: PPUSH
3253: PPUSH
3254: PPUSH
// begin tmp := [ ] ;
3255: LD_ADDR_VAR 0 3
3259: PUSH
3260: EMPTY
3261: ST_TO_ADDR
// uc_side := 1 ;
3262: LD_ADDR_OWVAR 20
3266: PUSH
3267: LD_INT 1
3269: ST_TO_ADDR
// uc_nation := 1 ;
3270: LD_ADDR_OWVAR 21
3274: PUSH
3275: LD_INT 1
3277: ST_TO_ADDR
// case Difficulty of 1 :
3278: LD_OWVAR 67
3282: PUSH
3283: LD_INT 1
3285: DOUBLE
3286: EQUAL
3287: IFTRUE 3291
3289: GO 3394
3291: POP
// begin wait ( 1 1$00 ) ;
3292: LD_INT 2100
3294: PPUSH
3295: CALL_OW 67
// for i := 1 to 2 do
3299: LD_ADDR_VAR 0 1
3303: PUSH
3304: DOUBLE
3305: LD_INT 1
3307: DEC
3308: ST_TO_ADDR
3309: LD_INT 2
3311: PUSH
3312: FOR_TO
3313: IFFALSE 3390
// begin PrepareHuman ( false , [ 1 , 4 ] [ i mod 2 + 1 ] , 1 ) ;
3315: LD_INT 0
3317: PPUSH
3318: LD_INT 1
3320: PUSH
3321: LD_INT 4
3323: PUSH
3324: EMPTY
3325: LIST
3326: LIST
3327: PUSH
3328: LD_VAR 0 1
3332: PUSH
3333: LD_INT 2
3335: MOD
3336: PUSH
3337: LD_INT 1
3339: PLUS
3340: ARRAY
3341: PPUSH
3342: LD_INT 1
3344: PPUSH
3345: CALL_OW 380
// un := CreateHuman ;
3349: LD_ADDR_VAR 0 2
3353: PUSH
3354: CALL_OW 44
3358: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3359: LD_ADDR_VAR 0 3
3363: PUSH
3364: LD_VAR 0 3
3368: PPUSH
3369: LD_VAR 0 3
3373: PUSH
3374: LD_INT 1
3376: PLUS
3377: PPUSH
3378: LD_VAR 0 2
3382: PPUSH
3383: CALL_OW 1
3387: ST_TO_ADDR
// end ;
3388: GO 3312
3390: POP
3391: POP
// end ; 2 :
3392: GO 3788
3394: LD_INT 2
3396: DOUBLE
3397: EQUAL
3398: IFTRUE 3402
3400: GO 3536
3402: POP
// begin wait ( 0 0$30 ) ;
3403: LD_INT 1050
3405: PPUSH
3406: CALL_OW 67
// for i := 1 to 2 do
3410: LD_ADDR_VAR 0 1
3414: PUSH
3415: DOUBLE
3416: LD_INT 1
3418: DEC
3419: ST_TO_ADDR
3420: LD_INT 2
3422: PUSH
3423: FOR_TO
3424: IFFALSE 3480
// begin PrepareHuman ( false , 1 , 2 ) ;
3426: LD_INT 0
3428: PPUSH
3429: LD_INT 1
3431: PPUSH
3432: LD_INT 2
3434: PPUSH
3435: CALL_OW 380
// un := CreateHuman ;
3439: LD_ADDR_VAR 0 2
3443: PUSH
3444: CALL_OW 44
3448: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3449: LD_ADDR_VAR 0 3
3453: PUSH
3454: LD_VAR 0 3
3458: PPUSH
3459: LD_VAR 0 3
3463: PUSH
3464: LD_INT 1
3466: PLUS
3467: PPUSH
3468: LD_VAR 0 2
3472: PPUSH
3473: CALL_OW 1
3477: ST_TO_ADDR
// end ;
3478: GO 3423
3480: POP
3481: POP
// PrepareHuman ( false , 4 , 2 ) ;
3482: LD_INT 0
3484: PPUSH
3485: LD_INT 4
3487: PPUSH
3488: LD_INT 2
3490: PPUSH
3491: CALL_OW 380
// un := CreateHuman ;
3495: LD_ADDR_VAR 0 2
3499: PUSH
3500: CALL_OW 44
3504: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3505: LD_ADDR_VAR 0 3
3509: PUSH
3510: LD_VAR 0 3
3514: PPUSH
3515: LD_VAR 0 3
3519: PUSH
3520: LD_INT 1
3522: PLUS
3523: PPUSH
3524: LD_VAR 0 2
3528: PPUSH
3529: CALL_OW 1
3533: ST_TO_ADDR
// end ; 3 :
3534: GO 3788
3536: LD_INT 3
3538: DOUBLE
3539: EQUAL
3540: IFTRUE 3544
3542: GO 3787
3544: POP
// begin for i := 1 to 2 do
3545: LD_ADDR_VAR 0 1
3549: PUSH
3550: DOUBLE
3551: LD_INT 1
3553: DEC
3554: ST_TO_ADDR
3555: LD_INT 2
3557: PUSH
3558: FOR_TO
3559: IFFALSE 3615
// begin PrepareHuman ( false , 1 , 2 ) ;
3561: LD_INT 0
3563: PPUSH
3564: LD_INT 1
3566: PPUSH
3567: LD_INT 2
3569: PPUSH
3570: CALL_OW 380
// un := CreateHuman ;
3574: LD_ADDR_VAR 0 2
3578: PUSH
3579: CALL_OW 44
3583: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3584: LD_ADDR_VAR 0 3
3588: PUSH
3589: LD_VAR 0 3
3593: PPUSH
3594: LD_VAR 0 3
3598: PUSH
3599: LD_INT 1
3601: PLUS
3602: PPUSH
3603: LD_VAR 0 2
3607: PPUSH
3608: CALL_OW 1
3612: ST_TO_ADDR
// end ;
3613: GO 3558
3615: POP
3616: POP
// PrepareHuman ( false , 4 , 2 ) ;
3617: LD_INT 0
3619: PPUSH
3620: LD_INT 4
3622: PPUSH
3623: LD_INT 2
3625: PPUSH
3626: CALL_OW 380
// un := CreateHuman ;
3630: LD_ADDR_VAR 0 2
3634: PUSH
3635: CALL_OW 44
3639: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3640: LD_ADDR_VAR 0 3
3644: PUSH
3645: LD_VAR 0 3
3649: PPUSH
3650: LD_VAR 0 3
3654: PUSH
3655: LD_INT 1
3657: PLUS
3658: PPUSH
3659: LD_VAR 0 2
3663: PPUSH
3664: CALL_OW 1
3668: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_machine_gun , 90 ) ;
3669: LD_INT 1
3671: PPUSH
3672: LD_INT 1
3674: PPUSH
3675: LD_INT 2
3677: PPUSH
3678: LD_INT 2
3680: PPUSH
3681: LD_INT 1
3683: PPUSH
3684: LD_INT 2
3686: PPUSH
3687: LD_INT 90
3689: PPUSH
3690: CALL 237 0 7
// un := CreateVehicle ;
3694: LD_ADDR_VAR 0 2
3698: PUSH
3699: CALL_OW 45
3703: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3704: LD_ADDR_VAR 0 3
3708: PUSH
3709: LD_VAR 0 3
3713: PPUSH
3714: LD_VAR 0 3
3718: PUSH
3719: LD_INT 1
3721: PLUS
3722: PPUSH
3723: LD_VAR 0 2
3727: PPUSH
3728: CALL_OW 1
3732: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
3733: LD_INT 0
3735: PPUSH
3736: LD_INT 1
3738: PPUSH
3739: LD_INT 2
3741: PPUSH
3742: CALL_OW 380
// un := CreateHuman ;
3746: LD_ADDR_VAR 0 2
3750: PUSH
3751: CALL_OW 44
3755: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3756: LD_ADDR_VAR 0 3
3760: PUSH
3761: LD_VAR 0 3
3765: PPUSH
3766: LD_VAR 0 3
3770: PUSH
3771: LD_INT 1
3773: PLUS
3774: PPUSH
3775: LD_VAR 0 2
3779: PPUSH
3780: CALL_OW 1
3784: ST_TO_ADDR
// end ; end ;
3785: GO 3788
3787: POP
// for i := 1 to tmp do
3788: LD_ADDR_VAR 0 1
3792: PUSH
3793: DOUBLE
3794: LD_INT 1
3796: DEC
3797: ST_TO_ADDR
3798: LD_VAR 0 3
3802: PUSH
3803: FOR_TO
3804: IFFALSE 3969
// begin SetDir ( tmp [ i ] , 1 ) ;
3806: LD_VAR 0 3
3810: PUSH
3811: LD_VAR 0 1
3815: ARRAY
3816: PPUSH
3817: LD_INT 1
3819: PPUSH
3820: CALL_OW 233
// if GetType ( tmp [ i ] ) = unit_human then
3824: LD_VAR 0 3
3828: PUSH
3829: LD_VAR 0 1
3833: ARRAY
3834: PPUSH
3835: CALL_OW 247
3839: PUSH
3840: LD_INT 1
3842: EQUAL
3843: IFFALSE 3871
// PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) else
3845: LD_VAR 0 3
3849: PUSH
3850: LD_VAR 0 1
3854: ARRAY
3855: PPUSH
3856: LD_INT 28
3858: PPUSH
3859: LD_INT 52
3861: PPUSH
3862: LD_INT 0
3864: PPUSH
3865: CALL_OW 48
3869: GO 3939
// begin PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) ;
3871: LD_VAR 0 3
3875: PUSH
3876: LD_VAR 0 1
3880: ARRAY
3881: PPUSH
3882: LD_INT 28
3884: PPUSH
3885: LD_INT 52
3887: PPUSH
3888: LD_INT 0
3890: PPUSH
3891: CALL_OW 48
// i := i + 1 ;
3895: LD_ADDR_VAR 0 1
3899: PUSH
3900: LD_VAR 0 1
3904: PUSH
3905: LD_INT 1
3907: PLUS
3908: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ i ] , tmp [ i - 1 ] ) ;
3909: LD_VAR 0 3
3913: PUSH
3914: LD_VAR 0 1
3918: ARRAY
3919: PPUSH
3920: LD_VAR 0 3
3924: PUSH
3925: LD_VAR 0 1
3929: PUSH
3930: LD_INT 1
3932: MINUS
3933: ARRAY
3934: PPUSH
3935: CALL_OW 52
// end ; ComMoveXY ( tmp [ i ] , 43 , 56 ) ;
3939: LD_VAR 0 3
3943: PUSH
3944: LD_VAR 0 1
3948: ARRAY
3949: PPUSH
3950: LD_INT 43
3952: PPUSH
3953: LD_INT 56
3955: PPUSH
3956: CALL_OW 111
// wait ( 0 0$2 ) ;
3960: LD_INT 70
3962: PPUSH
3963: CALL_OW 67
// end ;
3967: GO 3803
3969: POP
3970: POP
// wait ( 0 0$2 ) ;
3971: LD_INT 70
3973: PPUSH
3974: CALL_OW 67
// if not FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) then
3978: LD_INT 7
3980: PPUSH
3981: LD_INT 22
3983: PUSH
3984: LD_INT 2
3986: PUSH
3987: EMPTY
3988: LIST
3989: LIST
3990: PPUSH
3991: CALL_OW 70
3995: NOT
3996: IFFALSE 4194
// begin AddComAgressiveMove ( tmp , 35 , 24 ) ;
3998: LD_VAR 0 3
4002: PPUSH
4003: LD_INT 35
4005: PPUSH
4006: LD_INT 24
4008: PPUSH
4009: CALL_OW 174
// usForces := usForces union UnitFilter ( tmp , [ f_class , 1 ] ) ;
4013: LD_ADDR_EXP 21
4017: PUSH
4018: LD_EXP 21
4022: PUSH
4023: LD_VAR 0 3
4027: PPUSH
4028: LD_INT 25
4030: PUSH
4031: LD_INT 1
4033: PUSH
4034: EMPTY
4035: LIST
4036: LIST
4037: PPUSH
4038: CALL_OW 72
4042: UNION
4043: ST_TO_ADDR
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
4044: LD_INT 22
4046: PUSH
4047: LD_INT 1
4049: PUSH
4050: EMPTY
4051: LIST
4052: LIST
4053: PUSH
4054: LD_INT 30
4056: PUSH
4057: LD_INT 4
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: PUSH
4064: EMPTY
4065: LIST
4066: LIST
4067: PPUSH
4068: CALL_OW 69
4072: PUSH
4073: LD_INT 1
4075: ARRAY
4076: PPUSH
4077: CALL_OW 313
4081: PUSH
4082: LD_INT 6
4084: LESS
4085: IFFALSE 4144
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 1 ] ) , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
4087: LD_VAR 0 3
4091: PPUSH
4092: LD_INT 25
4094: PUSH
4095: LD_INT 1
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PPUSH
4102: CALL_OW 72
4106: PPUSH
4107: LD_INT 22
4109: PUSH
4110: LD_INT 1
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: PUSH
4117: LD_INT 30
4119: PUSH
4120: LD_INT 4
4122: PUSH
4123: EMPTY
4124: LIST
4125: LIST
4126: PUSH
4127: EMPTY
4128: LIST
4129: LIST
4130: PPUSH
4131: CALL_OW 69
4135: PUSH
4136: LD_INT 1
4138: ARRAY
4139: PPUSH
4140: CALL_OW 180
// if UnitFilter ( tmp , [ f_class , 4 ] ) then
4144: LD_VAR 0 3
4148: PPUSH
4149: LD_INT 25
4151: PUSH
4152: LD_INT 4
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: PPUSH
4159: CALL_OW 72
4163: IFFALSE 4192
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 4 ] ) , usLab ) ;
4165: LD_VAR 0 3
4169: PPUSH
4170: LD_INT 25
4172: PUSH
4173: LD_INT 4
4175: PUSH
4176: EMPTY
4177: LIST
4178: LIST
4179: PPUSH
4180: CALL_OW 72
4184: PPUSH
4185: LD_INT 3
4187: PPUSH
4188: CALL_OW 180
// end else
4192: GO 4469
// begin tmp := tmp union FilterUnitsInArea ( retreatArea , [ f_side , 1 ] ) ;
4194: LD_ADDR_VAR 0 3
4198: PUSH
4199: LD_VAR 0 3
4203: PUSH
4204: LD_INT 6
4206: PPUSH
4207: LD_INT 22
4209: PUSH
4210: LD_INT 1
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: PPUSH
4217: CALL_OW 70
4221: UNION
4222: ST_TO_ADDR
// ComMoveXY ( tmp , 45 , 54 ) ;
4223: LD_VAR 0 3
4227: PPUSH
4228: LD_INT 45
4230: PPUSH
4231: LD_INT 54
4233: PPUSH
4234: CALL_OW 111
// wait ( 0 0$3 ) ;
4238: LD_INT 105
4240: PPUSH
4241: CALL_OW 67
// AddComAgressiveMove ( tmp diff UnitFilter ( tmp , [ f_class , 4 ] ) , 35 , 24 ) ;
4245: LD_VAR 0 3
4249: PUSH
4250: LD_VAR 0 3
4254: PPUSH
4255: LD_INT 25
4257: PUSH
4258: LD_INT 4
4260: PUSH
4261: EMPTY
4262: LIST
4263: LIST
4264: PPUSH
4265: CALL_OW 72
4269: DIFF
4270: PPUSH
4271: LD_INT 35
4273: PPUSH
4274: LD_INT 24
4276: PPUSH
4277: CALL_OW 174
// AddComMoveXY ( UnitFilter ( tmp , [ f_class , 4 ] ) , 42 , 49 ) ;
4281: LD_VAR 0 3
4285: PPUSH
4286: LD_INT 25
4288: PUSH
4289: LD_INT 4
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: PPUSH
4296: CALL_OW 72
4300: PPUSH
4301: LD_INT 42
4303: PPUSH
4304: LD_INT 49
4306: PPUSH
4307: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4311: LD_INT 35
4313: PPUSH
4314: CALL_OW 67
// for i in tmp do
4318: LD_ADDR_VAR 0 1
4322: PUSH
4323: LD_VAR 0 3
4327: PUSH
4328: FOR_IN
4329: IFFALSE 4460
// if IsDead ( i ) then
4331: LD_VAR 0 1
4335: PPUSH
4336: CALL_OW 301
4340: IFFALSE 4360
// tmp := tmp diff i else
4342: LD_ADDR_VAR 0 3
4346: PUSH
4347: LD_VAR 0 3
4351: PUSH
4352: LD_VAR 0 1
4356: DIFF
4357: ST_TO_ADDR
4358: GO 4458
// if GetClass ( i ) = 1 then
4360: LD_VAR 0 1
4364: PPUSH
4365: CALL_OW 257
4369: PUSH
4370: LD_INT 1
4372: EQUAL
4373: IFFALSE 4458
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 42 , 49 ) > 6 then
4375: LD_VAR 0 1
4379: PPUSH
4380: CALL_OW 256
4384: PUSH
4385: LD_INT 600
4387: LESS
4388: PUSH
4389: LD_VAR 0 1
4393: PPUSH
4394: LD_INT 42
4396: PPUSH
4397: LD_INT 49
4399: PPUSH
4400: CALL_OW 297
4404: PUSH
4405: LD_INT 6
4407: GREATER
4408: AND
4409: IFFALSE 4428
// ComMoveXY ( i , 42 , 49 ) else
4411: LD_VAR 0 1
4415: PPUSH
4416: LD_INT 42
4418: PPUSH
4419: LD_INT 49
4421: PPUSH
4422: CALL_OW 111
4426: GO 4458
// if GetLives ( i ) = 1000 then
4428: LD_VAR 0 1
4432: PPUSH
4433: CALL_OW 256
4437: PUSH
4438: LD_INT 1000
4440: EQUAL
4441: IFFALSE 4458
// ComAgressiveMove ( i , 36 , 25 ) ;
4443: LD_VAR 0 1
4447: PPUSH
4448: LD_INT 36
4450: PPUSH
4451: LD_INT 25
4453: PPUSH
4454: CALL_OW 114
// end ;
4458: GO 4328
4460: POP
4461: POP
// until not tmp ;
4462: LD_VAR 0 3
4466: NOT
4467: IFFALSE 4311
// end ; end ;
4469: PPOPN 3
4471: END
// every 1 1$30 trigger FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) and not attackDeltaAllowed do var i , un , veh ;
4472: LD_INT 7
4474: PPUSH
4475: LD_INT 22
4477: PUSH
4478: LD_INT 2
4480: PUSH
4481: EMPTY
4482: LIST
4483: LIST
4484: PPUSH
4485: CALL_OW 70
4489: PUSH
4490: LD_EXP 14
4494: NOT
4495: AND
4496: IFFALSE 4654
4498: GO 4500
4500: DISABLE
4501: LD_INT 0
4503: PPUSH
4504: PPUSH
4505: PPUSH
// begin for i := 1 to 2 do
4506: LD_ADDR_VAR 0 1
4510: PUSH
4511: DOUBLE
4512: LD_INT 1
4514: DEC
4515: ST_TO_ADDR
4516: LD_INT 2
4518: PUSH
4519: FOR_TO
4520: IFFALSE 4652
// begin wait ( 0 0$3 ) ;
4522: LD_INT 105
4524: PPUSH
4525: CALL_OW 67
// uc_side := 1 ;
4529: LD_ADDR_OWVAR 20
4533: PUSH
4534: LD_INT 1
4536: ST_TO_ADDR
// uc_nation := 1 ;
4537: LD_ADDR_OWVAR 21
4541: PUSH
4542: LD_INT 1
4544: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 90 ) ;
4545: LD_INT 1
4547: PPUSH
4548: LD_INT 1
4550: PPUSH
4551: LD_INT 2
4553: PPUSH
4554: LD_INT 1
4556: PPUSH
4557: LD_INT 1
4559: PPUSH
4560: LD_INT 4
4562: PPUSH
4563: LD_INT 90
4565: PPUSH
4566: CALL 237 0 7
// veh := CreateVehicle ;
4570: LD_ADDR_VAR 0 3
4574: PUSH
4575: CALL_OW 45
4579: ST_TO_ADDR
// PlaceUnitXY ( veh , 29 , 52 , false ) ;
4580: LD_VAR 0 3
4584: PPUSH
4585: LD_INT 29
4587: PPUSH
4588: LD_INT 52
4590: PPUSH
4591: LD_INT 0
4593: PPUSH
4594: CALL_OW 48
// PrepareHuman ( false , 3 , 3 ) ;
4598: LD_INT 0
4600: PPUSH
4601: LD_INT 3
4603: PPUSH
4604: LD_INT 3
4606: PPUSH
4607: CALL_OW 380
// un := CreateHuman ;
4611: LD_ADDR_VAR 0 2
4615: PUSH
4616: CALL_OW 44
4620: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4621: LD_VAR 0 2
4625: PPUSH
4626: LD_VAR 0 3
4630: PPUSH
4631: CALL_OW 52
// ComAgressiveMove ( veh , 36 , 25 ) ;
4635: LD_VAR 0 3
4639: PPUSH
4640: LD_INT 36
4642: PPUSH
4643: LD_INT 25
4645: PPUSH
4646: CALL_OW 114
// end ;
4650: GO 4519
4652: POP
4653: POP
// end ; end_of_file
4654: PPOPN 3
4656: END
// export function Action ; var i , tmp ; begin
4657: LD_INT 0
4659: PPUSH
4660: PPUSH
4661: PPUSH
// InGameOn ;
4662: CALL_OW 8
// DoNotAttack ( 2 , usLab ) ;
4666: LD_INT 2
4668: PPUSH
4669: LD_INT 3
4671: PPUSH
4672: CALL_OW 471
// ComMoveXY ( Heike , 78 , 61 ) ;
4676: LD_EXP 23
4680: PPUSH
4681: LD_INT 78
4683: PPUSH
4684: LD_INT 61
4686: PPUSH
4687: CALL_OW 111
// if Mike then
4691: LD_EXP 25
4695: IFFALSE 4712
// ComMoveXY ( Mike , 80 , 66 ) ;
4697: LD_EXP 25
4701: PPUSH
4702: LD_INT 80
4704: PPUSH
4705: LD_INT 66
4707: PPUSH
4708: CALL_OW 111
// if Givi then
4712: LD_EXP 24
4716: IFFALSE 4733
// ComMoveXY ( Givi , 82 , 66 ) ;
4718: LD_EXP 24
4722: PPUSH
4723: LD_INT 82
4725: PPUSH
4726: LD_INT 66
4728: PPUSH
4729: CALL_OW 111
// if Kamil then
4733: LD_EXP 26
4737: IFFALSE 4754
// ComMoveXY ( Kamil , 82 , 67 ) ;
4739: LD_EXP 26
4743: PPUSH
4744: LD_INT 82
4746: PPUSH
4747: LD_INT 67
4749: PPUSH
4750: CALL_OW 111
// CenterNowOnUnits ( Heike ) ;
4754: LD_EXP 23
4758: PPUSH
4759: CALL_OW 87
// wait ( 0 0$2 ) ;
4763: LD_INT 70
4765: PPUSH
4766: CALL_OW 67
// if Givi and Mike then
4770: LD_EXP 24
4774: PUSH
4775: LD_EXP 25
4779: AND
4780: IFFALSE 5314
// begin AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
4782: LD_EXP 24
4786: PUSH
4787: LD_EXP 25
4791: PUSH
4792: LD_EXP 26
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: LIST
4801: PPUSH
4802: LD_EXP 23
4806: PPUSH
4807: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
4811: LD_EXP 23
4815: PPUSH
4816: LD_EXP 24
4820: PPUSH
4821: CALL_OW 179
// Say ( Givi , DG-1-start ) ;
4825: LD_EXP 24
4829: PPUSH
4830: LD_STRING DG-1-start
4832: PPUSH
4833: CALL_OW 88
// Say ( Heike , DH-1-start ) ;
4837: LD_EXP 23
4841: PPUSH
4842: LD_STRING DH-1-start
4844: PPUSH
4845: CALL_OW 88
// AddComTurnUnit ( Mike , Heike ) ;
4849: LD_EXP 25
4853: PPUSH
4854: LD_EXP 23
4858: PPUSH
4859: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
4863: LD_EXP 23
4867: PPUSH
4868: LD_EXP 25
4872: PPUSH
4873: CALL_OW 179
// Say ( Mike , DM-1-start ) ;
4877: LD_EXP 25
4881: PPUSH
4882: LD_STRING DM-1-start
4884: PPUSH
4885: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
4889: LD_EXP 23
4893: PPUSH
4894: LD_STRING DH-2-start
4896: PPUSH
4897: CALL_OW 88
// Say ( Mike , DM-2-start ) ;
4901: LD_EXP 25
4905: PPUSH
4906: LD_STRING DM-2-start
4908: PPUSH
4909: CALL_OW 88
// Say ( Givi , DG-2-start ) ;
4913: LD_EXP 24
4917: PPUSH
4918: LD_STRING DG-2-start
4920: PPUSH
4921: CALL_OW 88
// ComTurnUnit ( Mike , Givi ) ;
4925: LD_EXP 25
4929: PPUSH
4930: LD_EXP 24
4934: PPUSH
4935: CALL_OW 119
// ComTurnUnit ( Heike , Mike ) ;
4939: LD_EXP 23
4943: PPUSH
4944: LD_EXP 25
4948: PPUSH
4949: CALL_OW 119
// Say ( Mike , DM-3-start ) ;
4953: LD_EXP 25
4957: PPUSH
4958: LD_STRING DM-3-start
4960: PPUSH
4961: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
4965: LD_EXP 23
4969: PPUSH
4970: LD_STRING DH-3-start
4972: PPUSH
4973: CALL_OW 88
// ComMoveXY ( [ Heike , Mike , Givi , Kamil ] , 84 , 51 ) ;
4977: LD_EXP 23
4981: PUSH
4982: LD_EXP 25
4986: PUSH
4987: LD_EXP 24
4991: PUSH
4992: LD_EXP 26
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: PPUSH
5003: LD_INT 84
5005: PPUSH
5006: LD_INT 51
5008: PPUSH
5009: CALL_OW 111
// wait ( 0 0$2 ) ;
5013: LD_INT 70
5015: PPUSH
5016: CALL_OW 67
// Say ( Givi , DG-3-start ) ;
5020: LD_EXP 24
5024: PPUSH
5025: LD_STRING DG-3-start
5027: PPUSH
5028: CALL_OW 88
// ComHold ( [ Heike , Mike , Givi , Kamil ] ) ;
5032: LD_EXP 23
5036: PUSH
5037: LD_EXP 25
5041: PUSH
5042: LD_EXP 24
5046: PUSH
5047: LD_EXP 26
5051: PUSH
5052: EMPTY
5053: LIST
5054: LIST
5055: LIST
5056: LIST
5057: PPUSH
5058: CALL_OW 140
// AddComTurnUnit ( Heike , Givi ) ;
5062: LD_EXP 23
5066: PPUSH
5067: LD_EXP 24
5071: PPUSH
5072: CALL_OW 179
// AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
5076: LD_EXP 24
5080: PUSH
5081: LD_EXP 25
5085: PUSH
5086: LD_EXP 26
5090: PUSH
5091: EMPTY
5092: LIST
5093: LIST
5094: LIST
5095: PPUSH
5096: LD_EXP 23
5100: PPUSH
5101: CALL_OW 179
// Say ( Heike , DH-4-start ) ;
5105: LD_EXP 23
5109: PPUSH
5110: LD_STRING DH-4-start
5112: PPUSH
5113: CALL_OW 88
// Say ( Givi , DG-4-start ) ;
5117: LD_EXP 24
5121: PPUSH
5122: LD_STRING DG-4-start
5124: PPUSH
5125: CALL_OW 88
// Say ( Heike , DH-5-start ) ;
5129: LD_EXP 23
5133: PPUSH
5134: LD_STRING DH-5-start
5136: PPUSH
5137: CALL_OW 88
// Say ( Givi , DG-5-start ) ;
5141: LD_EXP 24
5145: PPUSH
5146: LD_STRING DG-5-start
5148: PPUSH
5149: CALL_OW 88
// Say ( Heike , DH-6-start ) ;
5153: LD_EXP 23
5157: PPUSH
5158: LD_STRING DH-6-start
5160: PPUSH
5161: CALL_OW 88
// if not Kamil then
5165: LD_EXP 26
5169: NOT
5170: IFFALSE 5221
// begin Say ( Mike , DM-6-start ) ;
5172: LD_EXP 25
5176: PPUSH
5177: LD_STRING DM-6-start
5179: PPUSH
5180: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi ] , Mike ) ;
5184: LD_EXP 23
5188: PUSH
5189: LD_EXP 24
5193: PUSH
5194: EMPTY
5195: LIST
5196: LIST
5197: PPUSH
5198: LD_EXP 25
5202: PPUSH
5203: CALL_OW 119
// Say ( Givi , DG-6-start ) ;
5207: LD_EXP 24
5211: PPUSH
5212: LD_STRING DG-6-start
5214: PPUSH
5215: CALL_OW 88
// end else
5219: GO 5300
// begin Say ( Mike , DM-6-start-a ) ;
5221: LD_EXP 25
5225: PPUSH
5226: LD_STRING DM-6-start-a
5228: PPUSH
5229: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi , Mike ] , Kamil ) ;
5233: LD_EXP 23
5237: PUSH
5238: LD_EXP 24
5242: PUSH
5243: LD_EXP 25
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: LIST
5252: PPUSH
5253: LD_EXP 26
5257: PPUSH
5258: CALL_OW 119
// ComTurnUnit ( Kamil , Mike ) ;
5262: LD_EXP 26
5266: PPUSH
5267: LD_EXP 25
5271: PPUSH
5272: CALL_OW 119
// Say ( Kamil , DKam-7-start-a ) ;
5276: LD_EXP 26
5280: PPUSH
5281: LD_STRING DKam-7-start-a
5283: PPUSH
5284: CALL_OW 88
// Say ( Givi , DG-6-start-a ) ;
5288: LD_EXP 24
5292: PPUSH
5293: LD_STRING DG-6-start-a
5295: PPUSH
5296: CALL_OW 88
// end ; Say ( Heike , DH-7-start ) ;
5300: LD_EXP 23
5304: PPUSH
5305: LD_STRING DH-7-start
5307: PPUSH
5308: CALL_OW 88
// end else
5312: GO 6036
// if not Mike and Givi then
5314: LD_EXP 25
5318: NOT
5319: PUSH
5320: LD_EXP 24
5324: AND
5325: IFFALSE 5670
// begin AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5327: LD_EXP 24
5331: PUSH
5332: LD_EXP 26
5336: PUSH
5337: EMPTY
5338: LIST
5339: LIST
5340: PPUSH
5341: LD_EXP 23
5345: PPUSH
5346: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
5350: LD_EXP 23
5354: PPUSH
5355: LD_EXP 24
5359: PPUSH
5360: CALL_OW 179
// Say ( Givi , DG-1-start-c ) ;
5364: LD_EXP 24
5368: PPUSH
5369: LD_STRING DG-1-start-c
5371: PPUSH
5372: CALL_OW 88
// Say ( Heike , DH-1-start-c ) ;
5376: LD_EXP 23
5380: PPUSH
5381: LD_STRING DH-1-start-c
5383: PPUSH
5384: CALL_OW 88
// Say ( Givi , DG-2-start-c ) ;
5388: LD_EXP 24
5392: PPUSH
5393: LD_STRING DG-2-start-c
5395: PPUSH
5396: CALL_OW 88
// Say ( Heike , DH-2-start-c ) ;
5400: LD_EXP 23
5404: PPUSH
5405: LD_STRING DH-2-start-c
5407: PPUSH
5408: CALL_OW 88
// Say ( Givi , DG-3-start-c ) ;
5412: LD_EXP 24
5416: PPUSH
5417: LD_STRING DG-3-start-c
5419: PPUSH
5420: CALL_OW 88
// ComMoveXY ( Heike , 83 , 56 ) ;
5424: LD_EXP 23
5428: PPUSH
5429: LD_INT 83
5431: PPUSH
5432: LD_INT 56
5434: PPUSH
5435: CALL_OW 111
// ComMoveXY ( Givi , 83 , 59 ) ;
5439: LD_EXP 24
5443: PPUSH
5444: LD_INT 83
5446: PPUSH
5447: LD_INT 59
5449: PPUSH
5450: CALL_OW 111
// if Kamil then
5454: LD_EXP 26
5458: IFFALSE 5475
// ComMoveXY ( Kamil , 80 , 58 ) ;
5460: LD_EXP 26
5464: PPUSH
5465: LD_INT 80
5467: PPUSH
5468: LD_INT 58
5470: PPUSH
5471: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5475: LD_EXP 23
5479: PPUSH
5480: LD_EXP 24
5484: PPUSH
5485: CALL_OW 179
// AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5489: LD_EXP 24
5493: PUSH
5494: LD_EXP 26
5498: PUSH
5499: EMPTY
5500: LIST
5501: LIST
5502: PPUSH
5503: LD_EXP 23
5507: PPUSH
5508: CALL_OW 179
// Say ( Heike , DH-3-start-c ) ;
5512: LD_EXP 23
5516: PPUSH
5517: LD_STRING DH-3-start-c
5519: PPUSH
5520: CALL_OW 88
// Say ( Givi , DG-4-start-c ) ;
5524: LD_EXP 24
5528: PPUSH
5529: LD_STRING DG-4-start-c
5531: PPUSH
5532: CALL_OW 88
// Say ( Heike , DH-5-start-c ) ;
5536: LD_EXP 23
5540: PPUSH
5541: LD_STRING DH-5-start-c
5543: PPUSH
5544: CALL_OW 88
// Say ( Givi , DG-5-start-c ) ;
5548: LD_EXP 24
5552: PPUSH
5553: LD_STRING DG-5-start-c
5555: PPUSH
5556: CALL_OW 88
// Say ( Heike , DH-6-start-c ) ;
5560: LD_EXP 23
5564: PPUSH
5565: LD_STRING DH-6-start-c
5567: PPUSH
5568: CALL_OW 88
// Say ( Givi , DG-6-start-c ) ;
5572: LD_EXP 24
5576: PPUSH
5577: LD_STRING DG-6-start-c
5579: PPUSH
5580: CALL_OW 88
// if Kamil then
5584: LD_EXP 26
5588: IFFALSE 5644
// begin ComTurnUnit ( Kamil , Heike ) ;
5590: LD_EXP 26
5594: PPUSH
5595: LD_EXP 23
5599: PPUSH
5600: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5604: LD_EXP 26
5608: PPUSH
5609: LD_STRING DKam-1-start-c
5611: PPUSH
5612: CALL_OW 88
// ComTurnUnit ( Givi , Kamil ) ;
5616: LD_EXP 24
5620: PPUSH
5621: LD_EXP 26
5625: PPUSH
5626: CALL_OW 119
// Say ( Givi , DG-7-start-c ) ;
5630: LD_EXP 24
5634: PPUSH
5635: LD_STRING DG-7-start-c
5637: PPUSH
5638: CALL_OW 88
// end else
5642: GO 5668
// begin Say ( Givi , DG-8-start-c ) ;
5644: LD_EXP 24
5648: PPUSH
5649: LD_STRING DG-8-start-c
5651: PPUSH
5652: CALL_OW 88
// Say ( Heike , DH-7-start-c ) ;
5656: LD_EXP 23
5660: PPUSH
5661: LD_STRING DH-7-start-c
5663: PPUSH
5664: CALL_OW 88
// end ; end else
5668: GO 6036
// if not Givi and Mike then
5670: LD_EXP 24
5674: NOT
5675: PUSH
5676: LD_EXP 25
5680: AND
5681: IFFALSE 5940
// begin AddComTurnUnit ( [ Mike , Kamil ] , Heike ) ;
5683: LD_EXP 25
5687: PUSH
5688: LD_EXP 26
5692: PUSH
5693: EMPTY
5694: LIST
5695: LIST
5696: PPUSH
5697: LD_EXP 23
5701: PPUSH
5702: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
5706: LD_EXP 23
5710: PPUSH
5711: LD_EXP 25
5715: PPUSH
5716: CALL_OW 179
// Say ( Mike , DM-1-start-b ) ;
5720: LD_EXP 25
5724: PPUSH
5725: LD_STRING DM-1-start-b
5727: PPUSH
5728: CALL_OW 88
// Say ( Heike , DH-1-start-b ) ;
5732: LD_EXP 23
5736: PPUSH
5737: LD_STRING DH-1-start-b
5739: PPUSH
5740: CALL_OW 88
// Say ( Mike , DM-2-start-b ) ;
5744: LD_EXP 25
5748: PPUSH
5749: LD_STRING DM-2-start-b
5751: PPUSH
5752: CALL_OW 88
// Say ( Heike , DH-2-start-b ) ;
5756: LD_EXP 23
5760: PPUSH
5761: LD_STRING DH-2-start-b
5763: PPUSH
5764: CALL_OW 88
// Say ( Mike , DM-3-start-b ) ;
5768: LD_EXP 25
5772: PPUSH
5773: LD_STRING DM-3-start-b
5775: PPUSH
5776: CALL_OW 88
// if Kamil then
5780: LD_EXP 26
5784: IFFALSE 5801
// ComMoveXY ( Kamil , 80 , 58 ) ;
5786: LD_EXP 26
5790: PPUSH
5791: LD_INT 80
5793: PPUSH
5794: LD_INT 58
5796: PPUSH
5797: CALL_OW 111
// ComMoveXY ( Heike , 83 , 56 ) ;
5801: LD_EXP 23
5805: PPUSH
5806: LD_INT 83
5808: PPUSH
5809: LD_INT 56
5811: PPUSH
5812: CALL_OW 111
// ComMoveXY ( Mike , 83 , 59 ) ;
5816: LD_EXP 25
5820: PPUSH
5821: LD_INT 83
5823: PPUSH
5824: LD_INT 59
5826: PPUSH
5827: CALL_OW 111
// AddComTurnUnit ( Heike , Mike ) ;
5831: LD_EXP 23
5835: PPUSH
5836: LD_EXP 25
5840: PPUSH
5841: CALL_OW 179
// AddComTurnUnit ( [ Kamil , Mike ] , Heike ) ;
5845: LD_EXP 26
5849: PUSH
5850: LD_EXP 25
5854: PUSH
5855: EMPTY
5856: LIST
5857: LIST
5858: PPUSH
5859: LD_EXP 23
5863: PPUSH
5864: CALL_OW 179
// Say ( Heike , DH-3-start-b ) ;
5868: LD_EXP 23
5872: PPUSH
5873: LD_STRING DH-3-start-b
5875: PPUSH
5876: CALL_OW 88
// Say ( Mike , DM-4-start-b ) ;
5880: LD_EXP 25
5884: PPUSH
5885: LD_STRING DM-4-start-b
5887: PPUSH
5888: CALL_OW 88
// if Kamil then
5892: LD_EXP 26
5896: IFFALSE 5926
// begin ComTurnUnit ( Kamil , Heike ) ;
5898: LD_EXP 26
5902: PPUSH
5903: LD_EXP 23
5907: PPUSH
5908: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5912: LD_EXP 26
5916: PPUSH
5917: LD_STRING DKam-1-start-c
5919: PPUSH
5920: CALL_OW 88
// end else
5924: GO 5938
// begin Say ( Mike , DM-5-start-b ) ;
5926: LD_EXP 25
5930: PPUSH
5931: LD_STRING DM-5-start-b
5933: PPUSH
5934: CALL_OW 88
// end ; end else
5938: GO 6036
// if Kamil then
5940: LD_EXP 26
5944: IFFALSE 6024
// begin AddComTurnUnit ( Heike , Kamil ) ;
5946: LD_EXP 23
5950: PPUSH
5951: LD_EXP 26
5955: PPUSH
5956: CALL_OW 179
// AddComTurnUnit ( Kamil , Heike ) ;
5960: LD_EXP 26
5964: PPUSH
5965: LD_EXP 23
5969: PPUSH
5970: CALL_OW 179
// Say ( Heike , DH-1-start-f ) ;
5974: LD_EXP 23
5978: PPUSH
5979: LD_STRING DH-1-start-f
5981: PPUSH
5982: CALL_OW 88
// Say ( Kamil , DKam-1-start-f ) ;
5986: LD_EXP 26
5990: PPUSH
5991: LD_STRING DKam-1-start-f
5993: PPUSH
5994: CALL_OW 88
// Say ( Heike , DH-2-start-f ) ;
5998: LD_EXP 23
6002: PPUSH
6003: LD_STRING DH-2-start-f
6005: PPUSH
6006: CALL_OW 88
// Say ( Kamil , DKam-2-start-f ) ;
6010: LD_EXP 26
6014: PPUSH
6015: LD_STRING DKam-2-start-f
6017: PPUSH
6018: CALL_OW 88
// end else
6022: GO 6036
// begin Say ( Heike , DH-1-start-d ) ;
6024: LD_EXP 23
6028: PPUSH
6029: LD_STRING DH-1-start-d
6031: PPUSH
6032: CALL_OW 88
// end ; ComFree ( [ Heike , Givi , Mike , Kamil ] ) ;
6036: LD_EXP 23
6040: PUSH
6041: LD_EXP 24
6045: PUSH
6046: LD_EXP 25
6050: PUSH
6051: LD_EXP 26
6055: PUSH
6056: EMPTY
6057: LIST
6058: LIST
6059: LIST
6060: LIST
6061: PPUSH
6062: CALL_OW 139
// InGameOff ;
6066: CALL_OW 9
// ChangeMissionObjectives ( OEast ) ;
6070: LD_STRING OEast
6072: PPUSH
6073: CALL_OW 337
// SetAreaMapShow ( eastExitArea , 1 ) ;
6077: LD_INT 10
6079: PPUSH
6080: LD_INT 1
6082: PPUSH
6083: CALL_OW 424
// SaveForQuickRestart ;
6087: CALL_OW 22
// wait ( 0 0$20 ) ;
6091: LD_INT 700
6093: PPUSH
6094: CALL_OW 67
// SendSciToForest ;
6098: CALL 1496 0 0
// if Difficulty = 1 then
6102: LD_OWVAR 67
6106: PUSH
6107: LD_INT 1
6109: EQUAL
6110: IFFALSE 6114
// exit ;
6112: GO 6231
// wait ( [ 5 5$00 , 2 2$30 ] [ Difficulty - 1 ] ) ;
6114: LD_INT 10500
6116: PUSH
6117: LD_INT 5250
6119: PUSH
6120: EMPTY
6121: LIST
6122: LIST
6123: PUSH
6124: LD_OWVAR 67
6128: PUSH
6129: LD_INT 1
6131: MINUS
6132: ARRAY
6133: PPUSH
6134: CALL_OW 67
// if usAlert then
6138: LD_EXP 10
6142: IFFALSE 6146
// exit ;
6144: GO 6231
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
6146: LD_ADDR_VAR 0 3
6150: PUSH
6151: LD_INT 22
6153: PUSH
6154: LD_INT 1
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: PUSH
6161: LD_INT 25
6163: PUSH
6164: LD_INT 2
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: PPUSH
6175: CALL_OW 69
6179: ST_TO_ADDR
// if not tmp then
6180: LD_VAR 0 3
6184: NOT
6185: IFFALSE 6189
// exit ;
6187: GO 6231
// ComExitBuilding ( tmp ) ;
6189: LD_VAR 0 3
6193: PPUSH
6194: CALL_OW 122
// AddComBuild ( tmp , b_breastwork , 40 , 13 , 3 ) ;
6198: LD_VAR 0 3
6202: PPUSH
6203: LD_INT 31
6205: PPUSH
6206: LD_INT 40
6208: PPUSH
6209: LD_INT 13
6211: PPUSH
6212: LD_INT 3
6214: PPUSH
6215: CALL_OW 205
// AddComEnterUnit ( tmp , Delta ) ;
6219: LD_VAR 0 3
6223: PPUSH
6224: LD_INT 1
6226: PPUSH
6227: CALL_OW 180
// end ;
6231: LD_VAR 0 1
6235: RET
// every 3 3$00 do
6236: GO 6238
6238: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
6239: LD_INT 1
6241: PPUSH
6242: LD_INT 570
6244: PPUSH
6245: LD_INT 350
6247: PPUSH
6248: CALL_OW 550
// wait ( 2 2$40 ) ;
6252: LD_INT 5600
6254: PPUSH
6255: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
6259: LD_INT 0
6261: PPUSH
6262: LD_INT 570
6264: PPUSH
6265: LD_INT 350
6267: PPUSH
6268: CALL_OW 550
// end ;
6272: END
// every 0 0$1 trigger not aviradzeSpotted and See ( 2 , Aviradze ) do var i , pepAmount ;
6273: LD_EXP 4
6277: NOT
6278: PUSH
6279: LD_INT 2
6281: PPUSH
6282: LD_EXP 27
6286: PPUSH
6287: CALL_OW 292
6291: AND
6292: IFFALSE 7208
6294: GO 6296
6296: DISABLE
6297: LD_INT 0
6299: PPUSH
6300: PPUSH
// begin SetAreaMapShow ( eastExitArea , 0 ) ;
6301: LD_INT 10
6303: PPUSH
6304: LD_INT 0
6306: PPUSH
6307: CALL_OW 424
// aviradzeSpotted := true ;
6311: LD_ADDR_EXP 4
6315: PUSH
6316: LD_INT 1
6318: ST_TO_ADDR
// pepAmount := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ;
6319: LD_ADDR_VAR 0 2
6323: PUSH
6324: LD_INT 22
6326: PUSH
6327: LD_INT 2
6329: PUSH
6330: EMPTY
6331: LIST
6332: LIST
6333: PUSH
6334: LD_INT 21
6336: PUSH
6337: LD_INT 1
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: PPUSH
6348: CALL_OW 69
6352: ST_TO_ADDR
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6353: LD_EXP 23
6357: PPUSH
6358: LD_EXP 27
6362: PPUSH
6363: CALL_OW 250
6367: PPUSH
6368: LD_EXP 27
6372: PPUSH
6373: CALL_OW 251
6377: PPUSH
6378: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6382: LD_INT 35
6384: PPUSH
6385: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 16 ;
6389: LD_EXP 23
6393: PPUSH
6394: LD_EXP 27
6398: PPUSH
6399: CALL_OW 296
6403: PUSH
6404: LD_INT 16
6406: LESS
6407: IFFALSE 6382
// InGameOn ;
6409: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
6413: LD_INT 5
6415: PPUSH
6416: LD_INT 2
6418: PPUSH
6419: CALL_OW 343
// if pepAmount > 2 then
6423: LD_VAR 0 2
6427: PUSH
6428: LD_INT 2
6430: GREATER
6431: IFFALSE 6447
// Say ( Heike , DH-1-spot ) else
6433: LD_EXP 23
6437: PPUSH
6438: LD_STRING DH-1-spot
6440: PPUSH
6441: CALL_OW 88
6445: GO 6459
// Say ( Heike , DH-1-spot-d ) ;
6447: LD_EXP 23
6451: PPUSH
6452: LD_STRING DH-1-spot-d
6454: PPUSH
6455: CALL_OW 88
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6459: LD_EXP 23
6463: PPUSH
6464: LD_EXP 27
6468: PPUSH
6469: CALL_OW 250
6473: PPUSH
6474: LD_EXP 27
6478: PPUSH
6479: CALL_OW 251
6483: PPUSH
6484: CALL_OW 111
// for i in [ Kamil , Mike , Givi ] do
6488: LD_ADDR_VAR 0 1
6492: PUSH
6493: LD_EXP 26
6497: PUSH
6498: LD_EXP 25
6502: PUSH
6503: LD_EXP 24
6507: PUSH
6508: EMPTY
6509: LIST
6510: LIST
6511: LIST
6512: PUSH
6513: FOR_IN
6514: IFFALSE 6553
// if GetDistUnits ( i , Aviradze ) > 7 then
6516: LD_VAR 0 1
6520: PPUSH
6521: LD_EXP 27
6525: PPUSH
6526: CALL_OW 296
6530: PUSH
6531: LD_INT 7
6533: GREATER
6534: IFFALSE 6551
// ComMoveXY ( i , 102 , 40 ) ;
6536: LD_VAR 0 1
6540: PPUSH
6541: LD_INT 102
6543: PPUSH
6544: LD_INT 40
6546: PPUSH
6547: CALL_OW 111
6551: GO 6513
6553: POP
6554: POP
// repeat wait ( 0 0$1 ) ;
6555: LD_INT 35
6557: PPUSH
6558: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 6 ;
6562: LD_EXP 23
6566: PPUSH
6567: LD_EXP 27
6571: PPUSH
6572: CALL_OW 296
6576: PUSH
6577: LD_INT 6
6579: LESS
6580: IFFALSE 6555
// ComTurnUnit ( Heike , Aviradze ) ;
6582: LD_EXP 23
6586: PPUSH
6587: LD_EXP 27
6591: PPUSH
6592: CALL_OW 119
// ComTurnUnit ( [ Aviradze , Sophia , Kaia ] , Heike ) ;
6596: LD_EXP 27
6600: PUSH
6601: LD_EXP 29
6605: PUSH
6606: LD_EXP 28
6610: PUSH
6611: EMPTY
6612: LIST
6613: LIST
6614: LIST
6615: PPUSH
6616: LD_EXP 23
6620: PPUSH
6621: CALL_OW 119
// if pepAmount > 1 then
6625: LD_VAR 0 2
6629: PUSH
6630: LD_INT 1
6632: GREATER
6633: IFFALSE 6685
// begin wait ( 0 0$2 ) ;
6635: LD_INT 70
6637: PPUSH
6638: CALL_OW 67
// ComTurnUnit ( [ Kamil , Mike , Givi ] , Aviradze ) ;
6642: LD_EXP 26
6646: PUSH
6647: LD_EXP 25
6651: PUSH
6652: LD_EXP 24
6656: PUSH
6657: EMPTY
6658: LIST
6659: LIST
6660: LIST
6661: PPUSH
6662: LD_EXP 27
6666: PPUSH
6667: CALL_OW 119
// Say ( Heike , DH-2-spot ) ;
6671: LD_EXP 23
6675: PPUSH
6676: LD_STRING DH-2-spot
6678: PPUSH
6679: CALL_OW 88
// end else
6683: GO 6697
// Say ( Heike , DH-2-spot-d ) ;
6685: LD_EXP 23
6689: PPUSH
6690: LD_STRING DH-2-spot-d
6692: PPUSH
6693: CALL_OW 88
// Say ( Aviradze , DA-2-spot ) ;
6697: LD_EXP 27
6701: PPUSH
6702: LD_STRING DA-2-spot
6704: PPUSH
6705: CALL_OW 88
// Say ( Heike , DH-3-spot ) ;
6709: LD_EXP 23
6713: PPUSH
6714: LD_STRING DH-3-spot
6716: PPUSH
6717: CALL_OW 88
// ComMoveUnit ( Kaia , Heike ) ;
6721: LD_EXP 28
6725: PPUSH
6726: LD_EXP 23
6730: PPUSH
6731: CALL_OW 112
// ComTurnUnit ( Heike , Kaia ) ;
6735: LD_EXP 23
6739: PPUSH
6740: LD_EXP 28
6744: PPUSH
6745: CALL_OW 119
// wait ( 0 0$0.3 ) ;
6749: LD_INT 10
6751: PPUSH
6752: CALL_OW 67
// Say ( Kaia , DK-3-spot ) ;
6756: LD_EXP 28
6760: PPUSH
6761: LD_STRING DK-3-spot
6763: PPUSH
6764: CALL_OW 88
// ComTurnUnit ( Kaia , Heike ) ;
6768: LD_EXP 28
6772: PPUSH
6773: LD_EXP 23
6777: PPUSH
6778: CALL_OW 119
// Say ( Heike , DH-4-spot ) ;
6782: LD_EXP 23
6786: PPUSH
6787: LD_STRING DH-4-spot
6789: PPUSH
6790: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6794: LD_INT 10
6796: PPUSH
6797: CALL_OW 67
// ComTurnUnit ( Heike , Aviradze ) ;
6801: LD_EXP 23
6805: PPUSH
6806: LD_EXP 27
6810: PPUSH
6811: CALL_OW 119
// Say ( Aviradze , DA-4-spot ) ;
6815: LD_EXP 27
6819: PPUSH
6820: LD_STRING DA-4-spot
6822: PPUSH
6823: CALL_OW 88
// ComTurnUnit ( Kaia , Aviradze ) ;
6827: LD_EXP 28
6831: PPUSH
6832: LD_EXP 27
6836: PPUSH
6837: CALL_OW 119
// Say ( Kaia , DK-4-spot ) ;
6841: LD_EXP 28
6845: PPUSH
6846: LD_STRING DK-4-spot
6848: PPUSH
6849: CALL_OW 88
// ComTurnUnit ( Aviradze , Kaia ) ;
6853: LD_EXP 27
6857: PPUSH
6858: LD_EXP 28
6862: PPUSH
6863: CALL_OW 119
// Say ( Aviradze , DA-5-spot ) ;
6867: LD_EXP 27
6871: PPUSH
6872: LD_STRING DA-5-spot
6874: PPUSH
6875: CALL_OW 88
// Say ( Kaia , DK-5-spot ) ;
6879: LD_EXP 28
6883: PPUSH
6884: LD_STRING DK-5-spot
6886: PPUSH
6887: CALL_OW 88
// if pepAmount = 1 then
6891: LD_VAR 0 2
6895: PUSH
6896: LD_INT 1
6898: EQUAL
6899: IFFALSE 6913
// Say ( Heike , DH-5-spot-f ) ;
6901: LD_EXP 23
6905: PPUSH
6906: LD_STRING DH-5-spot-f
6908: PPUSH
6909: CALL_OW 88
// if pepAmount < 3 then
6913: LD_VAR 0 2
6917: PUSH
6918: LD_INT 3
6920: LESS
6921: IFFALSE 6937
// Say ( Aviradze , DA-6-spot-f ) else
6923: LD_EXP 27
6927: PPUSH
6928: LD_STRING DA-6-spot-f
6930: PPUSH
6931: CALL_OW 88
6935: GO 6973
// if pepAmount < 4 then
6937: LD_VAR 0 2
6941: PUSH
6942: LD_INT 4
6944: LESS
6945: IFFALSE 6961
// Say ( Aviradze , DA-6-spot-c ) else
6947: LD_EXP 27
6951: PPUSH
6952: LD_STRING DA-6-spot-c
6954: PPUSH
6955: CALL_OW 88
6959: GO 6973
// Say ( Aviradze , DA-6-spot ) ;
6961: LD_EXP 27
6965: PPUSH
6966: LD_STRING DA-6-spot
6968: PPUSH
6969: CALL_OW 88
// if Kamil then
6973: LD_EXP 26
6977: IFFALSE 6991
// Say ( Kamil , DKam-6-spot ) ;
6979: LD_EXP 26
6983: PPUSH
6984: LD_STRING DKam-6-spot
6986: PPUSH
6987: CALL_OW 88
// Say ( Kaia , DK-6-spot ) ;
6991: LD_EXP 28
6995: PPUSH
6996: LD_STRING DK-6-spot
6998: PPUSH
6999: CALL_OW 88
// ComTurnUnit ( Aviradze , Heike ) ;
7003: LD_EXP 27
7007: PPUSH
7008: LD_EXP 23
7012: PPUSH
7013: CALL_OW 119
// Say ( Aviradze , DA-7-spot ) ;
7017: LD_EXP 27
7021: PPUSH
7022: LD_STRING DA-7-spot
7024: PPUSH
7025: CALL_OW 88
// Say ( Heike , DH-7-spot ) ;
7029: LD_EXP 23
7033: PPUSH
7034: LD_STRING DH-7-spot
7036: PPUSH
7037: CALL_OW 88
// if sciCounterKill >= 3 then
7041: LD_EXP 9
7045: PUSH
7046: LD_INT 3
7048: GREATEREQUAL
7049: IFFALSE 7075
// begin Say ( Heike , DH-7-spot-a ) ;
7051: LD_EXP 23
7055: PPUSH
7056: LD_STRING DH-7-spot-a
7058: PPUSH
7059: CALL_OW 88
// Say ( Aviradze , DA-8-spot-a ) ;
7063: LD_EXP 27
7067: PPUSH
7068: LD_STRING DA-8-spot-a
7070: PPUSH
7071: CALL_OW 88
// end ; InGameOff ;
7075: CALL_OW 9
// if sciCounterKill < 3 then
7079: LD_EXP 9
7083: PUSH
7084: LD_INT 3
7086: LESS
7087: IFFALSE 7146
// begin SetSide ( Kaia , 2 ) ;
7089: LD_EXP 28
7093: PPUSH
7094: LD_INT 2
7096: PPUSH
7097: CALL_OW 235
// ComFree ( Kaia ) ;
7101: LD_EXP 28
7105: PPUSH
7106: CALL_OW 139
// if Kamil then
7110: LD_EXP 26
7114: IFFALSE 7137
// begin ComHold ( Kamil ) ;
7116: LD_EXP 26
7120: PPUSH
7121: CALL_OW 140
// SetSide ( Kamil , 5 ) ;
7125: LD_EXP 26
7129: PPUSH
7130: LD_INT 5
7132: PPUSH
7133: CALL_OW 235
// end ; ChangeMissionObjectives ( OSci ) ;
7137: LD_STRING OSci
7139: PPUSH
7140: CALL_OW 337
// end else
7144: GO 7208
// begin aviradzeQuestDone := true ;
7146: LD_ADDR_EXP 8
7150: PUSH
7151: LD_INT 1
7153: ST_TO_ADDR
// attackDeltaAllowed := true ;
7154: LD_ADDR_EXP 14
7158: PUSH
7159: LD_INT 1
7161: ST_TO_ADDR
// ChangeMissionObjectives ( ODelta2 ) ;
7162: LD_STRING ODelta2
7164: PPUSH
7165: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
7169: LD_ADDR_VAR 0 1
7173: PUSH
7174: LD_INT 22
7176: PUSH
7177: LD_INT 5
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PPUSH
7184: CALL_OW 69
7188: PUSH
7189: FOR_IN
7190: IFFALSE 7206
// SetSide ( i , 2 ) ;
7192: LD_VAR 0 1
7196: PPUSH
7197: LD_INT 2
7199: PPUSH
7200: CALL_OW 235
7204: GO 7189
7206: POP
7207: POP
// end ; end ;
7208: PPOPN 2
7210: END
// every 0 0$1 trigger not sciSpotted and GetDistUnits ( NearestUnitToUnit ( usSci , Heike ) , Heike ) < 8 and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and not aviradzeSpotted do
7211: LD_EXP 7
7215: NOT
7216: PUSH
7217: LD_EXP 22
7221: PPUSH
7222: LD_EXP 23
7226: PPUSH
7227: CALL_OW 74
7231: PPUSH
7232: LD_EXP 23
7236: PPUSH
7237: CALL_OW 296
7241: PUSH
7242: LD_INT 8
7244: LESS
7245: AND
7246: PUSH
7247: LD_INT 2
7249: PPUSH
7250: LD_EXP 22
7254: PPUSH
7255: LD_EXP 23
7259: PPUSH
7260: CALL_OW 74
7264: PPUSH
7265: CALL_OW 292
7269: AND
7270: PUSH
7271: LD_INT 22
7273: PUSH
7274: LD_INT 2
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: PUSH
7281: LD_INT 21
7283: PUSH
7284: LD_INT 1
7286: PUSH
7287: EMPTY
7288: LIST
7289: LIST
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: PPUSH
7295: CALL_OW 69
7299: PUSH
7300: LD_INT 1
7302: GREATER
7303: AND
7304: PUSH
7305: LD_EXP 4
7309: NOT
7310: AND
7311: IFFALSE 7355
7313: GO 7315
7315: DISABLE
// begin sciSpotted := true ;
7316: LD_ADDR_EXP 7
7320: PUSH
7321: LD_INT 1
7323: ST_TO_ADDR
// CenterNowOnUnits ( NearestUnitToUnit ( usSci , Heike ) ) ;
7324: LD_EXP 22
7328: PPUSH
7329: LD_EXP 23
7333: PPUSH
7334: CALL_OW 74
7338: PPUSH
7339: CALL_OW 87
// Say ( Heike , DH-1-sci ) ;
7343: LD_EXP 23
7347: PPUSH
7348: LD_STRING DH-1-sci
7350: PPUSH
7351: CALL_OW 88
// end ;
7355: END
// every 0 0$1 trigger aviradzeSpotted and not sciSpotted and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and aviradzeSpotted and not aviradzeQuestDone do var un ;
7356: LD_EXP 4
7360: PUSH
7361: LD_EXP 7
7365: NOT
7366: AND
7367: PUSH
7368: LD_INT 2
7370: PPUSH
7371: LD_EXP 22
7375: PPUSH
7376: LD_EXP 23
7380: PPUSH
7381: CALL_OW 74
7385: PPUSH
7386: CALL_OW 292
7390: AND
7391: PUSH
7392: LD_INT 22
7394: PUSH
7395: LD_INT 2
7397: PUSH
7398: EMPTY
7399: LIST
7400: LIST
7401: PUSH
7402: LD_INT 21
7404: PUSH
7405: LD_INT 1
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: PPUSH
7416: CALL_OW 69
7420: PUSH
7421: LD_INT 1
7423: GREATER
7424: AND
7425: PUSH
7426: LD_EXP 4
7430: AND
7431: PUSH
7432: LD_EXP 8
7436: NOT
7437: AND
7438: IFFALSE 7579
7440: GO 7442
7442: DISABLE
7443: LD_INT 0
7445: PPUSH
// begin sciSpotted := true ;
7446: LD_ADDR_EXP 7
7450: PUSH
7451: LD_INT 1
7453: ST_TO_ADDR
// un := NearestUnitToUnit ( usSci , Heike ) ;
7454: LD_ADDR_VAR 0 1
7458: PUSH
7459: LD_EXP 22
7463: PPUSH
7464: LD_EXP 23
7468: PPUSH
7469: CALL_OW 74
7473: ST_TO_ADDR
// DialogueOn ;
7474: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 2 , - 3 ) ;
7478: LD_VAR 0 1
7482: PPUSH
7483: CALL_OW 250
7487: PPUSH
7488: LD_VAR 0 1
7492: PPUSH
7493: CALL_OW 251
7497: PPUSH
7498: LD_INT 2
7500: PPUSH
7501: LD_INT 3
7503: NEG
7504: PPUSH
7505: CALL_OW 330
// CenterNowOnUnits ( un ) ;
7509: LD_VAR 0 1
7513: PPUSH
7514: CALL_OW 87
// Say ( Heike , DH-1-sci-a ) ;
7518: LD_EXP 23
7522: PPUSH
7523: LD_STRING DH-1-sci-a
7525: PPUSH
7526: CALL_OW 88
// if Mike then
7530: LD_EXP 25
7534: IFFALSE 7548
// Say ( Mike , DM-1-sci-a ) ;
7536: LD_EXP 25
7540: PPUSH
7541: LD_STRING DM-1-sci-a
7543: PPUSH
7544: CALL_OW 88
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 2 ) ;
7548: LD_VAR 0 1
7552: PPUSH
7553: CALL_OW 250
7557: PPUSH
7558: LD_VAR 0 1
7562: PPUSH
7563: CALL_OW 251
7567: PPUSH
7568: LD_INT 2
7570: PPUSH
7571: CALL_OW 331
// DialogueOff ;
7575: CALL_OW 7
// end ;
7579: PPOPN 1
7581: END
// every 0 0$1 trigger usAlert and ( GetLives ( Gladstone ) < 1000 or GetLives ( usLab ) < 999 ) do var veh ;
7582: LD_EXP 10
7586: PUSH
7587: LD_EXP 19
7591: PPUSH
7592: CALL_OW 256
7596: PUSH
7597: LD_INT 1000
7599: LESS
7600: PUSH
7601: LD_INT 3
7603: PPUSH
7604: CALL_OW 256
7608: PUSH
7609: LD_INT 999
7611: LESS
7612: OR
7613: AND
7614: IFFALSE 7870
7616: GO 7618
7618: DISABLE
7619: LD_INT 0
7621: PPUSH
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
7622: LD_ADDR_VAR 0 1
7626: PUSH
7627: LD_INT 22
7629: PUSH
7630: LD_INT 1
7632: PUSH
7633: EMPTY
7634: LIST
7635: LIST
7636: PUSH
7637: LD_INT 21
7639: PUSH
7640: LD_INT 2
7642: PUSH
7643: EMPTY
7644: LIST
7645: LIST
7646: PUSH
7647: LD_INT 58
7649: PUSH
7650: EMPTY
7651: LIST
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: LIST
7657: PPUSH
7658: CALL_OW 69
7662: ST_TO_ADDR
// if veh and IsOk ( Gladstone ) then
7663: LD_VAR 0 1
7667: PUSH
7668: LD_EXP 19
7672: PPUSH
7673: CALL_OW 302
7677: AND
7678: IFFALSE 7720
// begin if IsInUnit ( Gladstone ) then
7680: LD_EXP 19
7684: PPUSH
7685: CALL_OW 310
7689: IFFALSE 7700
// ComExitBuilding ( Gladstone ) ;
7691: LD_EXP 19
7695: PPUSH
7696: CALL_OW 122
// AddComEnterUnit ( Gladstone , veh [ 1 ] ) ;
7700: LD_EXP 19
7704: PPUSH
7705: LD_VAR 0 1
7709: PUSH
7710: LD_INT 1
7712: ARRAY
7713: PPUSH
7714: CALL_OW 180
// end else
7718: GO 7740
// if IsInUnit ( Gladstone ) then
7720: LD_EXP 19
7724: PPUSH
7725: CALL_OW 310
7729: IFFALSE 7740
// ComExitBuilding ( Gladstone ) ;
7731: LD_EXP 19
7735: PPUSH
7736: CALL_OW 122
// AddComMoveXY ( Gladstone , 27 , 51 ) ;
7740: LD_EXP 19
7744: PPUSH
7745: LD_INT 27
7747: PPUSH
7748: LD_INT 51
7750: PPUSH
7751: CALL_OW 171
// Say ( Gladstone , D8-Glad-2 ) ;
7755: LD_EXP 19
7759: PPUSH
7760: LD_STRING D8-Glad-2
7762: PPUSH
7763: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7767: LD_INT 35
7769: PPUSH
7770: CALL_OW 67
// until IsAt ( Gladstone , 27 , 51 ) or IsAt ( IsInUnit ( Gladstone ) , 27 , 51 ) or IsDead ( Gladstone ) ;
7774: LD_EXP 19
7778: PPUSH
7779: LD_INT 27
7781: PPUSH
7782: LD_INT 51
7784: PPUSH
7785: CALL_OW 307
7789: PUSH
7790: LD_EXP 19
7794: PPUSH
7795: CALL_OW 310
7799: PPUSH
7800: LD_INT 27
7802: PPUSH
7803: LD_INT 51
7805: PPUSH
7806: CALL_OW 307
7810: OR
7811: PUSH
7812: LD_EXP 19
7816: PPUSH
7817: CALL_OW 301
7821: OR
7822: IFFALSE 7767
// if IsDead ( Gladstone ) then
7824: LD_EXP 19
7828: PPUSH
7829: CALL_OW 301
7833: IFFALSE 7837
// exit ;
7835: GO 7870
// RemoveUnit ( HexInfo ( 27 , 51 ) ) ;
7837: LD_INT 27
7839: PPUSH
7840: LD_INT 51
7842: PPUSH
7843: CALL_OW 428
7847: PPUSH
7848: CALL_OW 64
// gladstoneEscaped := true ;
7852: LD_ADDR_EXP 12
7856: PUSH
7857: LD_INT 1
7859: ST_TO_ADDR
// SaveVariable ( true , 02_GladstoneEscaped ) ;
7860: LD_INT 1
7862: PPUSH
7863: LD_STRING 02_GladstoneEscaped
7865: PPUSH
7866: CALL_OW 39
// end ;
7870: PPOPN 1
7872: END
// every 0 0$1 trigger aviradzeSpotted and ( sciCounterKill >= 3 or not usSci ) and not aviradzeQuestDone do
7873: LD_EXP 4
7877: PUSH
7878: LD_EXP 9
7882: PUSH
7883: LD_INT 3
7885: GREATEREQUAL
7886: PUSH
7887: LD_EXP 22
7891: NOT
7892: OR
7893: AND
7894: PUSH
7895: LD_EXP 8
7899: NOT
7900: AND
7901: IFFALSE 7944
7903: GO 7905
7905: DISABLE
// begin aviradzeQuestDone := true ;
7906: LD_ADDR_EXP 8
7910: PUSH
7911: LD_INT 1
7913: ST_TO_ADDR
// Say ( Heike , DH-1-quest-done ) ;
7914: LD_EXP 23
7918: PPUSH
7919: LD_STRING DH-1-quest-done
7921: PPUSH
7922: CALL_OW 88
// if Givi then
7926: LD_EXP 24
7930: IFFALSE 7944
// Say ( Givi , DG-1-quest-done ) ;
7932: LD_EXP 24
7936: PPUSH
7937: LD_STRING DG-1-quest-done
7939: PPUSH
7940: CALL_OW 88
// end ;
7944: END
// every 0 0$1 trigger See ( 5 , Heike ) and GetDistUnits ( Heike , Aviradze ) < 6 and aviradzeQuestDone and not attackDeltaAllowed do var i ;
7945: LD_INT 5
7947: PPUSH
7948: LD_EXP 23
7952: PPUSH
7953: CALL_OW 292
7957: PUSH
7958: LD_EXP 23
7962: PPUSH
7963: LD_EXP 27
7967: PPUSH
7968: CALL_OW 296
7972: PUSH
7973: LD_INT 6
7975: LESS
7976: AND
7977: PUSH
7978: LD_EXP 8
7982: AND
7983: PUSH
7984: LD_EXP 14
7988: NOT
7989: AND
7990: IFFALSE 8128
7992: GO 7994
7994: DISABLE
7995: LD_INT 0
7997: PPUSH
// begin attackDeltaAllowed := true ;
7998: LD_ADDR_EXP 14
8002: PUSH
8003: LD_INT 1
8005: ST_TO_ADDR
// InGameOn ;
8006: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
8010: LD_EXP 23
8014: PPUSH
8015: CALL_OW 87
// wait ( 0 0$0.3 ) ;
8019: LD_INT 10
8021: PPUSH
8022: CALL_OW 67
// ComTurnUnit ( Aviradze , Heike ) ;
8026: LD_EXP 27
8030: PPUSH
8031: LD_EXP 23
8035: PPUSH
8036: CALL_OW 119
// ComTurnUnit ( Heike , Aviradze ) ;
8040: LD_EXP 23
8044: PPUSH
8045: LD_EXP 27
8049: PPUSH
8050: CALL_OW 119
// Say ( Heike , DH-1-return ) ;
8054: LD_EXP 23
8058: PPUSH
8059: LD_STRING DH-1-return
8061: PPUSH
8062: CALL_OW 88
// Say ( Aviradze , DA-1-return ) ;
8066: LD_EXP 27
8070: PPUSH
8071: LD_STRING DA-1-return
8073: PPUSH
8074: CALL_OW 88
// InGameOff ;
8078: CALL_OW 9
// ChangeMissionObjectives ( ODelta ) ;
8082: LD_STRING ODelta
8084: PPUSH
8085: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
8089: LD_ADDR_VAR 0 1
8093: PUSH
8094: LD_INT 22
8096: PUSH
8097: LD_INT 5
8099: PUSH
8100: EMPTY
8101: LIST
8102: LIST
8103: PPUSH
8104: CALL_OW 69
8108: PUSH
8109: FOR_IN
8110: IFFALSE 8126
// SetSide ( i , 2 ) ;
8112: LD_VAR 0 1
8116: PPUSH
8117: LD_INT 2
8119: PPUSH
8120: CALL_OW 235
8124: GO 8109
8126: POP
8127: POP
// end ;
8128: PPOPN 1
8130: END
// every 0 0$1 trigger usAlert and not attackDeltaAllowed do
8131: LD_EXP 10
8135: PUSH
8136: LD_EXP 14
8140: NOT
8141: AND
8142: IFFALSE 8155
8144: GO 8146
8146: DISABLE
// spottedBeforeRadio := true ;
8147: LD_ADDR_EXP 6
8151: PUSH
8152: LD_INT 1
8154: ST_TO_ADDR
8155: END
// every 0 0$1 trigger attackDeltaAllowed and IsOk ( Markov ) and GetSide ( Delta ) = 1 and IsOk ( Lynch ) and not usAlert do var i , k , tmp ;
8156: LD_EXP 14
8160: PUSH
8161: LD_EXP 30
8165: PPUSH
8166: CALL_OW 302
8170: AND
8171: PUSH
8172: LD_INT 1
8174: PPUSH
8175: CALL_OW 255
8179: PUSH
8180: LD_INT 1
8182: EQUAL
8183: AND
8184: PUSH
8185: LD_EXP 20
8189: PPUSH
8190: CALL_OW 302
8194: AND
8195: PUSH
8196: LD_EXP 10
8200: NOT
8201: AND
8202: IFFALSE 9418
8204: GO 8206
8206: DISABLE
8207: LD_INT 0
8209: PPUSH
8210: PPUSH
8211: PPUSH
// begin trap := 0 ;
8212: LD_ADDR_EXP 17
8216: PUSH
8217: LD_INT 0
8219: ST_TO_ADDR
// wait ( 0 0$12 ) ;
8220: LD_INT 420
8222: PPUSH
8223: CALL_OW 67
// DialogueOn ;
8227: CALL_OW 6
// Say ( Markov , DMar-1-radio ) ;
8231: LD_EXP 30
8235: PPUSH
8236: LD_STRING DMar-1-radio
8238: PPUSH
8239: CALL_OW 88
// Say ( Heike , DH-1-radio ) ;
8243: LD_EXP 23
8247: PPUSH
8248: LD_STRING DH-1-radio
8250: PPUSH
8251: CALL_OW 88
// Say ( Markov , DMar-2-radio ) ;
8255: LD_EXP 30
8259: PPUSH
8260: LD_STRING DMar-2-radio
8262: PPUSH
8263: CALL_OW 88
// Say ( Heike , DH-2-radio ) ;
8267: LD_EXP 23
8271: PPUSH
8272: LD_STRING DH-2-radio
8274: PPUSH
8275: CALL_OW 88
// if IsOk ( Kamil ) or IsOk ( Sophia ) then
8279: LD_EXP 26
8283: PPUSH
8284: CALL_OW 302
8288: PUSH
8289: LD_EXP 29
8293: PPUSH
8294: CALL_OW 302
8298: OR
8299: IFFALSE 9418
// begin case Query ( Q1Trap ) of 1 :
8301: LD_STRING Q1Trap
8303: PPUSH
8304: CALL_OW 97
8308: PUSH
8309: LD_INT 1
8311: DOUBLE
8312: EQUAL
8313: IFTRUE 8317
8315: GO 8511
8317: POP
// begin if IsOk ( Kamil ) then
8318: LD_EXP 26
8322: PPUSH
8323: CALL_OW 302
8327: IFFALSE 8406
// begin Say ( Kamil , DKam-2-radio ) ;
8329: LD_EXP 26
8333: PPUSH
8334: LD_STRING DKam-2-radio
8336: PPUSH
8337: CALL_OW 88
// Say ( Kamil , DKam-3-radio ) ;
8341: LD_EXP 26
8345: PPUSH
8346: LD_STRING DKam-3-radio
8348: PPUSH
8349: CALL_OW 88
// SayRadio ( Lynch , DDelta-3-radio ) ;
8353: LD_EXP 20
8357: PPUSH
8358: LD_STRING DDelta-3-radio
8360: PPUSH
8361: CALL_OW 94
// dwait ( 0 0$01 ) ;
8365: LD_INT 35
8367: PPUSH
8368: CALL_OW 68
// Say ( Heike , DH-3-radio ) ;
8372: LD_EXP 23
8376: PPUSH
8377: LD_STRING DH-3-radio
8379: PPUSH
8380: CALL_OW 88
// Say ( Kamil , DKam-4-radio ) ;
8384: LD_EXP 26
8388: PPUSH
8389: LD_STRING DKam-4-radio
8391: PPUSH
8392: CALL_OW 88
// trap := 1 ;
8396: LD_ADDR_EXP 17
8400: PUSH
8401: LD_INT 1
8403: ST_TO_ADDR
// end else
8404: GO 8505
// begin Say ( Sophia , DS-1-radio ) ;
8406: LD_EXP 29
8410: PPUSH
8411: LD_STRING DS-1-radio
8413: PPUSH
8414: CALL_OW 88
// Say ( Sophia , DS-2-radio ) ;
8418: LD_EXP 29
8422: PPUSH
8423: LD_STRING DS-2-radio
8425: PPUSH
8426: CALL_OW 88
// SayRadio ( Lynch , DDelta-2-radio-s ) ;
8430: LD_EXP 20
8434: PPUSH
8435: LD_STRING DDelta-2-radio-s
8437: PPUSH
8438: CALL_OW 94
// Say ( Sophia , DS-3-radio ) ;
8442: LD_EXP 29
8446: PPUSH
8447: LD_STRING DS-3-radio
8449: PPUSH
8450: CALL_OW 88
// SayRadio ( Lynch , DDelta-3-radio-s ) ;
8454: LD_EXP 20
8458: PPUSH
8459: LD_STRING DDelta-3-radio-s
8461: PPUSH
8462: CALL_OW 94
// Say ( Sophia , DS-4-radio-s ) ;
8466: LD_EXP 29
8470: PPUSH
8471: LD_STRING DS-4-radio-s
8473: PPUSH
8474: CALL_OW 88
// dwait ( 0 0$01 ) ;
8478: LD_INT 35
8480: PPUSH
8481: CALL_OW 68
// Say ( Heike , DH-1-trap ) ;
8485: LD_EXP 23
8489: PPUSH
8490: LD_STRING DH-1-trap
8492: PPUSH
8493: CALL_OW 88
// trap := 0 ;
8497: LD_ADDR_EXP 17
8501: PUSH
8502: LD_INT 0
8504: ST_TO_ADDR
// end ; DialogueOff ;
8505: CALL_OW 7
// end ; 2 :
8509: GO 8529
8511: LD_INT 2
8513: DOUBLE
8514: EQUAL
8515: IFTRUE 8519
8517: GO 8528
8519: POP
// begin DialogueOff ;
8520: CALL_OW 7
// exit ;
8524: GO 9418
// end ; end ;
8526: GO 8529
8528: POP
// if trap = 1 then
8529: LD_EXP 17
8533: PUSH
8534: LD_INT 1
8536: EQUAL
8537: IFFALSE 8989
// begin PlaceSeeing ( 64 , 32 , 2 , 8 ) ;
8539: LD_INT 64
8541: PPUSH
8542: LD_INT 32
8544: PPUSH
8545: LD_INT 2
8547: PPUSH
8548: LD_INT 8
8550: PPUSH
8551: CALL_OW 330
// CenterOnXY ( 64 , 32 ) ;
8555: LD_INT 64
8557: PPUSH
8558: LD_INT 32
8560: PPUSH
8561: CALL_OW 84
// tmp := [ ] ;
8565: LD_ADDR_VAR 0 3
8569: PUSH
8570: EMPTY
8571: ST_TO_ADDR
// k := 3 ;
8572: LD_ADDR_VAR 0 2
8576: PUSH
8577: LD_INT 3
8579: ST_TO_ADDR
// if usForces < 3 then
8580: LD_EXP 21
8584: PUSH
8585: LD_INT 3
8587: LESS
8588: IFFALSE 8600
// k := usForces ;
8590: LD_ADDR_VAR 0 2
8594: PUSH
8595: LD_EXP 21
8599: ST_TO_ADDR
// for i := 1 to k do
8600: LD_ADDR_VAR 0 1
8604: PUSH
8605: DOUBLE
8606: LD_INT 1
8608: DEC
8609: ST_TO_ADDR
8610: LD_VAR 0 2
8614: PUSH
8615: FOR_TO
8616: IFFALSE 8671
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
8618: LD_ADDR_VAR 0 3
8622: PUSH
8623: LD_VAR 0 3
8627: PPUSH
8628: LD_VAR 0 3
8632: PUSH
8633: LD_INT 1
8635: PLUS
8636: PPUSH
8637: LD_EXP 21
8641: PUSH
8642: LD_INT 1
8644: ARRAY
8645: PPUSH
8646: CALL_OW 1
8650: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
8651: LD_ADDR_EXP 21
8655: PUSH
8656: LD_EXP 21
8660: PPUSH
8661: LD_INT 1
8663: PPUSH
8664: CALL_OW 3
8668: ST_TO_ADDR
// end ;
8669: GO 8615
8671: POP
8672: POP
// usPatrol := tmp ;
8673: LD_ADDR_EXP 16
8677: PUSH
8678: LD_VAR 0 3
8682: ST_TO_ADDR
// for i in tmp do
8683: LD_ADDR_VAR 0 1
8687: PUSH
8688: LD_VAR 0 3
8692: PUSH
8693: FOR_IN
8694: IFFALSE 8824
// begin if IsInUnit ( i ) then
8696: LD_VAR 0 1
8700: PPUSH
8701: CALL_OW 310
8705: IFFALSE 8716
// ComExitBuilding ( i ) ;
8707: LD_VAR 0 1
8711: PPUSH
8712: CALL_OW 122
// AddComAgressiveMove ( i , 63 , 31 ) ;
8716: LD_VAR 0 1
8720: PPUSH
8721: LD_INT 63
8723: PPUSH
8724: LD_INT 31
8726: PPUSH
8727: CALL_OW 174
// AddComWait ( i , 0 0$2 ) ;
8731: LD_VAR 0 1
8735: PPUSH
8736: LD_INT 70
8738: PPUSH
8739: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 43 ) ;
8743: LD_VAR 0 1
8747: PPUSH
8748: LD_INT 103
8750: PPUSH
8751: LD_INT 43
8753: PPUSH
8754: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
8758: LD_VAR 0 1
8762: PPUSH
8763: LD_INT 105
8765: PPUSH
8766: CALL_OW 202
// if Difficulty > 1 then
8770: LD_OWVAR 67
8774: PUSH
8775: LD_INT 1
8777: GREATER
8778: IFFALSE 8795
// AddComAgressiveMove ( i , 114 , 69 ) ;
8780: LD_VAR 0 1
8784: PPUSH
8785: LD_INT 114
8787: PPUSH
8788: LD_INT 69
8790: PPUSH
8791: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
8795: LD_VAR 0 1
8799: PPUSH
8800: LD_INT 105
8802: PPUSH
8803: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
8807: LD_VAR 0 1
8811: PPUSH
8812: LD_INT 42
8814: PPUSH
8815: LD_INT 20
8817: PPUSH
8818: CALL_OW 174
// end ;
8822: GO 8693
8824: POP
8825: POP
// wait ( 0 0$8 ) ;
8826: LD_INT 280
8828: PPUSH
8829: CALL_OW 67
// RemoveSeeing ( 64 , 32 , 2 ) ;
8833: LD_INT 64
8835: PPUSH
8836: LD_INT 32
8838: PPUSH
8839: LD_INT 2
8841: PPUSH
8842: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
8846: LD_INT 35
8848: PPUSH
8849: CALL_OW 67
// for i in tmp do
8853: LD_ADDR_VAR 0 1
8857: PUSH
8858: LD_VAR 0 3
8862: PUSH
8863: FOR_IN
8864: IFFALSE 8895
// if IsDead ( i ) then
8866: LD_VAR 0 1
8870: PPUSH
8871: CALL_OW 301
8875: IFFALSE 8893
// tmp := tmp diff i ;
8877: LD_ADDR_VAR 0 3
8881: PUSH
8882: LD_VAR 0 3
8886: PUSH
8887: LD_VAR 0 1
8891: DIFF
8892: ST_TO_ADDR
8893: GO 8863
8895: POP
8896: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
8897: LD_VAR 0 3
8901: NOT
8902: PUSH
8903: LD_VAR 0 3
8907: PPUSH
8908: LD_INT 95
8910: PUSH
8911: LD_INT 7
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: PUSH
8918: LD_INT 3
8920: PUSH
8921: LD_INT 60
8923: PUSH
8924: EMPTY
8925: LIST
8926: PUSH
8927: EMPTY
8928: LIST
8929: LIST
8930: PUSH
8931: EMPTY
8932: LIST
8933: LIST
8934: PPUSH
8935: CALL_OW 72
8939: PUSH
8940: LD_VAR 0 3
8944: EQUAL
8945: OR
8946: IFFALSE 8846
// if tmp then
8948: LD_VAR 0 3
8952: IFFALSE 8979
// begin usPatrol := [ ] ;
8954: LD_ADDR_EXP 16
8958: PUSH
8959: EMPTY
8960: ST_TO_ADDR
// usForces := usForces union tmp ;
8961: LD_ADDR_EXP 21
8965: PUSH
8966: LD_EXP 21
8970: PUSH
8971: LD_VAR 0 3
8975: UNION
8976: ST_TO_ADDR
// end else
8977: GO 8987
// trickyMove := true ;
8979: LD_ADDR_EXP 15
8983: PUSH
8984: LD_INT 1
8986: ST_TO_ADDR
// end else
8987: GO 9418
// begin tmp := [ ] ;
8989: LD_ADDR_VAR 0 3
8993: PUSH
8994: EMPTY
8995: ST_TO_ADDR
// k := 4 ;
8996: LD_ADDR_VAR 0 2
9000: PUSH
9001: LD_INT 4
9003: ST_TO_ADDR
// if usForces < 4 then
9004: LD_EXP 21
9008: PUSH
9009: LD_INT 4
9011: LESS
9012: IFFALSE 9024
// k := usForces ;
9014: LD_ADDR_VAR 0 2
9018: PUSH
9019: LD_EXP 21
9023: ST_TO_ADDR
// for i := 1 to k do
9024: LD_ADDR_VAR 0 1
9028: PUSH
9029: DOUBLE
9030: LD_INT 1
9032: DEC
9033: ST_TO_ADDR
9034: LD_VAR 0 2
9038: PUSH
9039: FOR_TO
9040: IFFALSE 9095
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
9042: LD_ADDR_VAR 0 3
9046: PUSH
9047: LD_VAR 0 3
9051: PPUSH
9052: LD_VAR 0 3
9056: PUSH
9057: LD_INT 1
9059: PLUS
9060: PPUSH
9061: LD_EXP 21
9065: PUSH
9066: LD_INT 1
9068: ARRAY
9069: PPUSH
9070: CALL_OW 1
9074: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
9075: LD_ADDR_EXP 21
9079: PUSH
9080: LD_EXP 21
9084: PPUSH
9085: LD_INT 1
9087: PPUSH
9088: CALL_OW 3
9092: ST_TO_ADDR
// end ;
9093: GO 9039
9095: POP
9096: POP
// if Lynch then
9097: LD_EXP 20
9101: IFFALSE 9119
// tmp := tmp ^ Lynch ;
9103: LD_ADDR_VAR 0 3
9107: PUSH
9108: LD_VAR 0 3
9112: PUSH
9113: LD_EXP 20
9117: ADD
9118: ST_TO_ADDR
// usPatrol := tmp ;
9119: LD_ADDR_EXP 16
9123: PUSH
9124: LD_VAR 0 3
9128: ST_TO_ADDR
// for i in tmp do
9129: LD_ADDR_VAR 0 1
9133: PUSH
9134: LD_VAR 0 3
9138: PUSH
9139: FOR_IN
9140: IFFALSE 9233
// begin if IsInUnit ( i ) then
9142: LD_VAR 0 1
9146: PPUSH
9147: CALL_OW 310
9151: IFFALSE 9162
// ComExitBuilding ( i ) ;
9153: LD_VAR 0 1
9157: PPUSH
9158: CALL_OW 122
// AddComAgressiveMove ( i , 69 , 15 ) ;
9162: LD_VAR 0 1
9166: PPUSH
9167: LD_INT 69
9169: PPUSH
9170: LD_INT 15
9172: PPUSH
9173: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9177: LD_VAR 0 1
9181: PPUSH
9182: LD_INT 700
9184: PPUSH
9185: CALL_OW 202
// AddComAgressiveMove ( i , 55 , 43 ) ;
9189: LD_VAR 0 1
9193: PPUSH
9194: LD_INT 55
9196: PPUSH
9197: LD_INT 43
9199: PPUSH
9200: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9204: LD_VAR 0 1
9208: PPUSH
9209: LD_INT 700
9211: PPUSH
9212: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9216: LD_VAR 0 1
9220: PPUSH
9221: LD_INT 42
9223: PPUSH
9224: LD_INT 20
9226: PPUSH
9227: CALL_OW 174
// end ;
9231: GO 9139
9233: POP
9234: POP
// repeat wait ( 0 0$1 ) ;
9235: LD_INT 35
9237: PPUSH
9238: CALL_OW 67
// for i in tmp do
9242: LD_ADDR_VAR 0 1
9246: PUSH
9247: LD_VAR 0 3
9251: PUSH
9252: FOR_IN
9253: IFFALSE 9284
// if IsDead ( i ) then
9255: LD_VAR 0 1
9259: PPUSH
9260: CALL_OW 301
9264: IFFALSE 9282
// tmp := tmp diff i ;
9266: LD_ADDR_VAR 0 3
9270: PUSH
9271: LD_VAR 0 3
9275: PUSH
9276: LD_VAR 0 1
9280: DIFF
9281: ST_TO_ADDR
9282: GO 9252
9284: POP
9285: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9286: LD_VAR 0 3
9290: NOT
9291: PUSH
9292: LD_VAR 0 3
9296: PPUSH
9297: LD_INT 95
9299: PUSH
9300: LD_INT 7
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: PUSH
9307: LD_INT 3
9309: PUSH
9310: LD_INT 60
9312: PUSH
9313: EMPTY
9314: LIST
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: PUSH
9320: EMPTY
9321: LIST
9322: LIST
9323: PPUSH
9324: CALL_OW 72
9328: PUSH
9329: LD_VAR 0 3
9333: EQUAL
9334: OR
9335: IFFALSE 9235
// if not tmp then
9337: LD_VAR 0 3
9341: NOT
9342: IFFALSE 9354
// trickyMove := true else
9344: LD_ADDR_EXP 15
9348: PUSH
9349: LD_INT 1
9351: ST_TO_ADDR
9352: GO 9361
// usPatrol := [ ] ;
9354: LD_ADDR_EXP 16
9358: PUSH
9359: EMPTY
9360: ST_TO_ADDR
// if tmp diff Lynch then
9361: LD_VAR 0 3
9365: PUSH
9366: LD_EXP 20
9370: DIFF
9371: IFFALSE 9395
// usForces := usForces union ( tmp diff Lynch ) ;
9373: LD_ADDR_EXP 21
9377: PUSH
9378: LD_EXP 21
9382: PUSH
9383: LD_VAR 0 3
9387: PUSH
9388: LD_EXP 20
9392: DIFF
9393: UNION
9394: ST_TO_ADDR
// if IsOk ( Lynch ) then
9395: LD_EXP 20
9399: PPUSH
9400: CALL_OW 302
9404: IFFALSE 9418
// ComEnterUnit ( Lynch , Delta ) ;
9406: LD_EXP 20
9410: PPUSH
9411: LD_INT 1
9413: PPUSH
9414: CALL_OW 120
// end ; end ; end ;
9418: PPOPN 3
9420: END
// every 0 0$1 trigger trickyMove do
9421: LD_EXP 15
9425: IFFALSE 9437
9427: GO 9429
9429: DISABLE
// SetAchievement ( ACH_TRAP ) ;
9430: LD_STRING ACH_TRAP
9432: PPUSH
9433: CALL_OW 543
9437: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ) do
9438: LD_INT 22
9440: PUSH
9441: LD_INT 2
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: PUSH
9448: LD_INT 23
9450: PUSH
9451: LD_INT 1
9453: PUSH
9454: EMPTY
9455: LIST
9456: LIST
9457: PUSH
9458: LD_INT 21
9460: PUSH
9461: LD_INT 2
9463: PUSH
9464: EMPTY
9465: LIST
9466: LIST
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: LIST
9472: PPUSH
9473: CALL_OW 69
9477: IFFALSE 9489
9479: GO 9481
9481: DISABLE
// SetAchievement ( ACH_SCRAP ) ;
9482: LD_STRING ACH_SCRAP
9484: PPUSH
9485: CALL_OW 543
9489: END
// every 0 0$1 trigger UnitFilter ( usPatrol , [ f_see , 2 ] ) and See ( 1 , Heike ) do
9490: LD_EXP 16
9494: PPUSH
9495: LD_INT 101
9497: PUSH
9498: LD_INT 2
9500: PUSH
9501: EMPTY
9502: LIST
9503: LIST
9504: PPUSH
9505: CALL_OW 72
9509: PUSH
9510: LD_INT 1
9512: PPUSH
9513: LD_EXP 23
9517: PPUSH
9518: CALL_OW 292
9522: AND
9523: IFFALSE 9656
9525: GO 9527
9527: DISABLE
// begin if not trap then
9528: LD_EXP 17
9532: NOT
9533: IFFALSE 9561
// begin Say ( Heike , DH-2-trap ) ;
9535: LD_EXP 23
9539: PPUSH
9540: LD_STRING DH-2-trap
9542: PPUSH
9543: CALL_OW 88
// Say ( Mike , DM-2-trap ) ;
9547: LD_EXP 25
9551: PPUSH
9552: LD_STRING DM-2-trap
9554: PPUSH
9555: CALL_OW 88
// end else
9559: GO 9573
// begin Say ( Heike , DH-1-trap-a ) ;
9561: LD_EXP 23
9565: PPUSH
9566: LD_STRING DH-1-trap-a
9568: PPUSH
9569: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
9573: LD_INT 35
9575: PPUSH
9576: CALL_OW 67
// until trickyMove ;
9580: LD_EXP 15
9584: IFFALSE 9573
// Say ( Heike , DH-3-trap ) ;
9586: LD_EXP 23
9590: PPUSH
9591: LD_STRING DH-3-trap
9593: PPUSH
9594: CALL_OW 88
// if IsOk ( Givi ) and IsOk ( Kaia ) then
9598: LD_EXP 24
9602: PPUSH
9603: CALL_OW 302
9607: PUSH
9608: LD_EXP 28
9612: PPUSH
9613: CALL_OW 302
9617: AND
9618: IFFALSE 9656
// begin Say ( Givi , DG-3-trap ) ;
9620: LD_EXP 24
9624: PPUSH
9625: LD_STRING DG-3-trap
9627: PPUSH
9628: CALL_OW 88
// Say ( Kaia , DK-3-trap ) ;
9632: LD_EXP 28
9636: PPUSH
9637: LD_STRING DK-3-trap
9639: PPUSH
9640: CALL_OW 88
// Say ( Givi , DG-4-trap ) ;
9644: LD_EXP 24
9648: PPUSH
9649: LD_STRING DG-4-trap
9651: PPUSH
9652: CALL_OW 88
// end ; end ;
9656: END
// every 0 0$1 trigger GetSide ( Delta ) = 2 and attackDeltaAllowed do var i , tmp ;
9657: LD_INT 1
9659: PPUSH
9660: CALL_OW 255
9664: PUSH
9665: LD_INT 2
9667: EQUAL
9668: PUSH
9669: LD_EXP 14
9673: AND
9674: IFFALSE 9833
9676: GO 9678
9678: DISABLE
9679: LD_INT 0
9681: PPUSH
9682: PPUSH
// begin if not IsOk ( Kaia ) then
9683: LD_EXP 28
9687: PPUSH
9688: CALL_OW 302
9692: NOT
9693: IFFALSE 9697
// exit ;
9695: GO 9833
// if tick < 5 5$00 then
9697: LD_OWVAR 1
9701: PUSH
9702: LD_INT 10500
9704: LESS
9705: IFFALSE 9714
// SetAchievement ( ACH_DELTA ) ;
9707: LD_STRING ACH_DELTA
9709: PPUSH
9710: CALL_OW 543
// Say ( Kaia , DK-1-capture ) ;
9714: LD_EXP 28
9718: PPUSH
9719: LD_STRING DK-1-capture
9721: PPUSH
9722: CALL_OW 88
// Say ( Heike , DH-1-capture ) ;
9726: LD_EXP 23
9730: PPUSH
9731: LD_STRING DH-1-capture
9733: PPUSH
9734: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
9738: LD_ADDR_VAR 0 2
9742: PUSH
9743: LD_INT 22
9745: PUSH
9746: LD_INT 1
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: PUSH
9753: LD_INT 25
9755: PUSH
9756: LD_INT 1
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: PPUSH
9767: CALL_OW 69
9771: ST_TO_ADDR
// if not tmp then
9772: LD_VAR 0 2
9776: NOT
9777: IFFALSE 9781
// exit ;
9779: GO 9833
// for i in tmp do
9781: LD_ADDR_VAR 0 1
9785: PUSH
9786: LD_VAR 0 2
9790: PUSH
9791: FOR_IN
9792: IFFALSE 9831
// begin if IsInUnit ( i ) then
9794: LD_VAR 0 1
9798: PPUSH
9799: CALL_OW 310
9803: IFFALSE 9814
// ComExitBuilding ( i ) ;
9805: LD_VAR 0 1
9809: PPUSH
9810: CALL_OW 122
// AddComAgressiveMove ( i , 38 , 23 ) ;
9814: LD_VAR 0 1
9818: PPUSH
9819: LD_INT 38
9821: PPUSH
9822: LD_INT 23
9824: PPUSH
9825: CALL_OW 174
// end ;
9829: GO 9791
9831: POP
9832: POP
// end ;
9833: PPOPN 2
9835: END
// every 0 0$1 trigger GetSide ( usLab ) = 2 and attackDeltaAllowed do
9836: LD_INT 3
9838: PPUSH
9839: CALL_OW 255
9843: PUSH
9844: LD_INT 2
9846: EQUAL
9847: PUSH
9848: LD_EXP 14
9852: AND
9853: IFFALSE 9885
9855: GO 9857
9857: DISABLE
// begin DialogueOn ;
9858: CALL_OW 6
// Say ( Aviradze , DA-1-capture ) ;
9862: LD_EXP 27
9866: PPUSH
9867: LD_STRING DA-1-capture
9869: PPUSH
9870: CALL_OW 88
// DialogueOff ;
9874: CALL_OW 7
// ChangeMissionObjectives ( OTame ) ;
9878: LD_STRING OTame
9880: PPUSH
9881: CALL_OW 337
// end ;
9885: END
// every 0 0$1 trigger GetTech ( tech_ApeLang , 2 ) = state_researched and attackDeltaAllowed do
9886: LD_INT 1
9888: PPUSH
9889: LD_INT 2
9891: PPUSH
9892: CALL_OW 321
9896: PUSH
9897: LD_INT 2
9899: EQUAL
9900: PUSH
9901: LD_EXP 14
9905: AND
9906: IFFALSE 10057
9908: GO 9910
9910: DISABLE
// begin DialogueOn ;
9911: CALL_OW 6
// Say ( Aviradze , DA-1-ape ) ;
9915: LD_EXP 27
9919: PPUSH
9920: LD_STRING DA-1-ape
9922: PPUSH
9923: CALL_OW 88
// Say ( Heike , DH-1-ape ) ;
9927: LD_EXP 23
9931: PPUSH
9932: LD_STRING DH-1-ape
9934: PPUSH
9935: CALL_OW 88
// Say ( Aviradze , DA-2-ape ) ;
9939: LD_EXP 27
9943: PPUSH
9944: LD_STRING DA-2-ape
9946: PPUSH
9947: CALL_OW 88
// Say ( Aviradze , DA-3-ape ) ;
9951: LD_EXP 27
9955: PPUSH
9956: LD_STRING DA-3-ape
9958: PPUSH
9959: CALL_OW 88
// Say ( Heike , DH-3-ape ) ;
9963: LD_EXP 23
9967: PPUSH
9968: LD_STRING DH-3-ape
9970: PPUSH
9971: CALL_OW 88
// DialogueOff ;
9975: CALL_OW 7
// if FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 then
9979: LD_INT 22
9981: PUSH
9982: LD_INT 0
9984: PUSH
9985: EMPTY
9986: LIST
9987: LIST
9988: PUSH
9989: LD_INT 25
9991: PUSH
9992: LD_INT 12
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: PPUSH
10003: CALL_OW 69
10007: PUSH
10008: LD_INT 0
10010: EQUAL
10011: IFFALSE 10023
// SpawnApeman ( forest , 2 ) ;
10013: LD_INT 1
10015: PPUSH
10016: LD_INT 2
10018: PPUSH
10019: CALL 405 0 2
// repeat wait ( 0 0$1 ) ;
10023: LD_INT 35
10025: PPUSH
10026: CALL_OW 67
// until FilterAllUnits ( [ f_class , class_apeman ] ) = 0 ;
10030: LD_INT 25
10032: PUSH
10033: LD_INT 12
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: PPUSH
10040: CALL_OW 69
10044: PUSH
10045: LD_INT 0
10047: EQUAL
10048: IFFALSE 10023
// YouLost ( Ape ) ;
10050: LD_STRING Ape
10052: PPUSH
10053: CALL_OW 104
// end ;
10057: END
// every 0 0$5 trigger lostCounter >= [ 3 , 2 , 2 ] [ Difficulty ] do
10058: LD_EXP 18
10062: PUSH
10063: LD_INT 3
10065: PUSH
10066: LD_INT 2
10068: PUSH
10069: LD_INT 2
10071: PUSH
10072: EMPTY
10073: LIST
10074: LIST
10075: LIST
10076: PUSH
10077: LD_OWVAR 67
10081: ARRAY
10082: GREATEREQUAL
10083: IFFALSE 10127
10085: GO 10087
10087: DISABLE
// begin DialogueOn ;
10088: CALL_OW 6
// Say ( Aviradze , DA-1-failure ) ;
10092: LD_EXP 27
10096: PPUSH
10097: LD_STRING DA-1-failure
10099: PPUSH
10100: CALL_OW 88
// Say ( Aviradze , DA-2-failure ) ;
10104: LD_EXP 27
10108: PPUSH
10109: LD_STRING DA-2-failure
10111: PPUSH
10112: CALL_OW 88
// YouLost ( Failure ) ;
10116: LD_STRING Failure
10118: PPUSH
10119: CALL_OW 104
// DialogueOff ;
10123: CALL_OW 7
// end ;
10127: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
10128: LD_EXP 28
10132: PPUSH
10133: CALL_OW 256
10137: PUSH
10138: LD_INT 3
10140: LESS
10141: IFFALSE 10274
10143: GO 10145
10145: DISABLE
// begin DialogueOn ;
10146: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
10150: LD_EXP 28
10154: PPUSH
10155: CALL_OW 87
// ForceSay ( Kaia , DK-Kaiaout-1 ) ;
10159: LD_EXP 28
10163: PPUSH
10164: LD_STRING DK-Kaiaout-1
10166: PPUSH
10167: CALL_OW 91
// Say ( Heike , DH-Kaiaout-2 ) ;
10171: LD_EXP 23
10175: PPUSH
10176: LD_STRING DH-Kaiaout-2
10178: PPUSH
10179: CALL_OW 88
// Say ( Givi , DG-Kaiaout-3 ) ;
10183: LD_EXP 24
10187: PPUSH
10188: LD_STRING DG-Kaiaout-3
10190: PPUSH
10191: CALL_OW 88
// Say ( Heike , DH-Kaiaout-4 ) ;
10195: LD_EXP 23
10199: PPUSH
10200: LD_STRING DH-Kaiaout-4
10202: PPUSH
10203: CALL_OW 88
// if Givi then
10207: LD_EXP 24
10211: IFFALSE 10261
// begin Say ( Givi , DG-Kaiaout-5 ) ;
10213: LD_EXP 24
10217: PPUSH
10218: LD_STRING DG-Kaiaout-5
10220: PPUSH
10221: CALL_OW 88
// Say ( Heike , DH-Kaiaout-6 ) ;
10225: LD_EXP 23
10229: PPUSH
10230: LD_STRING DH-Kaiaout-6
10232: PPUSH
10233: CALL_OW 88
// Say ( Givi , DG-Kaiaout-7 ) ;
10237: LD_EXP 24
10241: PPUSH
10242: LD_STRING DG-Kaiaout-7
10244: PPUSH
10245: CALL_OW 88
// Say ( Heike , DH-Kaiaout-8 ) ;
10249: LD_EXP 23
10253: PPUSH
10254: LD_STRING DH-Kaiaout-8
10256: PPUSH
10257: CALL_OW 88
// end ; DialogueOff ;
10261: CALL_OW 7
// KillUnit ( Kaia ) ;
10265: LD_EXP 28
10269: PPUSH
10270: CALL_OW 66
// end ;
10274: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) and IsOk ( Aviradze ) and GetSide ( Aviradze ) = 2 do var tmp ;
10275: LD_INT 22
10277: PUSH
10278: LD_INT 2
10280: PUSH
10281: EMPTY
10282: LIST
10283: LIST
10284: PUSH
10285: LD_INT 23
10287: PUSH
10288: LD_INT 0
10290: PUSH
10291: EMPTY
10292: LIST
10293: LIST
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: PPUSH
10299: CALL_OW 69
10303: PUSH
10304: LD_EXP 27
10308: PPUSH
10309: CALL_OW 302
10313: AND
10314: PUSH
10315: LD_EXP 27
10319: PPUSH
10320: CALL_OW 255
10324: PUSH
10325: LD_INT 2
10327: EQUAL
10328: AND
10329: IFFALSE 11270
10331: GO 10333
10333: DISABLE
10334: LD_INT 0
10336: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) then
10337: LD_INT 22
10339: PUSH
10340: LD_INT 1
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: PUSH
10347: LD_INT 2
10349: PUSH
10350: LD_INT 25
10352: PUSH
10353: LD_INT 1
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: PUSH
10360: LD_INT 34
10362: PUSH
10363: LD_INT 4
10365: PUSH
10366: EMPTY
10367: LIST
10368: LIST
10369: PUSH
10370: EMPTY
10371: LIST
10372: LIST
10373: LIST
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: PPUSH
10379: CALL_OW 69
10383: IFFALSE 10478
// begin Query ( QEnemyInSight ) ;
10385: LD_STRING QEnemyInSight
10387: PPUSH
10388: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
10392: LD_INT 35
10394: PPUSH
10395: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10399: LD_INT 22
10401: PUSH
10402: LD_INT 1
10404: PUSH
10405: EMPTY
10406: LIST
10407: LIST
10408: PUSH
10409: LD_INT 2
10411: PUSH
10412: LD_INT 25
10414: PUSH
10415: LD_INT 1
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: PUSH
10422: LD_INT 34
10424: PUSH
10425: LD_INT 4
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: PUSH
10432: EMPTY
10433: LIST
10434: LIST
10435: LIST
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: PPUSH
10441: CALL_OW 69
10445: NOT
10446: PUSH
10447: LD_INT 22
10449: PUSH
10450: LD_INT 2
10452: PUSH
10453: EMPTY
10454: LIST
10455: LIST
10456: PUSH
10457: LD_INT 23
10459: PUSH
10460: LD_INT 0
10462: PUSH
10463: EMPTY
10464: LIST
10465: LIST
10466: PUSH
10467: EMPTY
10468: LIST
10469: LIST
10470: PPUSH
10471: CALL_OW 69
10475: AND
10476: IFFALSE 10392
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10478: LD_ADDR_VAR 0 1
10482: PUSH
10483: LD_INT 22
10485: PUSH
10486: LD_INT 2
10488: PUSH
10489: EMPTY
10490: LIST
10491: LIST
10492: PUSH
10493: LD_INT 23
10495: PUSH
10496: LD_INT 0
10498: PUSH
10499: EMPTY
10500: LIST
10501: LIST
10502: PUSH
10503: EMPTY
10504: LIST
10505: LIST
10506: PPUSH
10507: CALL_OW 69
10511: ST_TO_ADDR
// InGameOn ;
10512: CALL_OW 8
// CenterNowOnUnits ( tmp ) ;
10516: LD_VAR 0 1
10520: PPUSH
10521: CALL_OW 87
// ComMoveUnit ( tmp , Aviradze ) ;
10525: LD_VAR 0 1
10529: PPUSH
10530: LD_EXP 27
10534: PPUSH
10535: CALL_OW 112
// ComTurnUnit ( Aviradze , tmp ) ;
10539: LD_EXP 27
10543: PPUSH
10544: LD_VAR 0 1
10548: PPUSH
10549: CALL_OW 119
// wait ( 0 0$1 ) ;
10553: LD_INT 35
10555: PPUSH
10556: CALL_OW 67
// Say ( Aviradze , DA-1-tame-a ) ;
10560: LD_EXP 27
10564: PPUSH
10565: LD_STRING DA-1-tame-a
10567: PPUSH
10568: CALL_OW 88
// if IsOk ( Mike ) then
10572: LD_EXP 25
10576: PPUSH
10577: CALL_OW 302
10581: IFFALSE 10619
// begin Say ( Mike , DM-1-tame-a ) ;
10583: LD_EXP 25
10587: PPUSH
10588: LD_STRING DM-1-tame-a
10590: PPUSH
10591: CALL_OW 88
// Say ( Sophia , DS-1-tame-a ) ;
10595: LD_EXP 29
10599: PPUSH
10600: LD_STRING DS-1-tame-a
10602: PPUSH
10603: CALL_OW 88
// Say ( Mike , DM-2-tame-a ) ;
10607: LD_EXP 25
10611: PPUSH
10612: LD_STRING DM-2-tame-a
10614: PPUSH
10615: CALL_OW 88
// end ; wait ( 0 0$3 ) ;
10619: LD_INT 105
10621: PPUSH
10622: CALL_OW 67
// PrepareFarmer ;
10626: CALL 11945 0 0
// CenterOnUnits ( Farmer ) ;
10630: LD_EXP 31
10634: PPUSH
10635: CALL_OW 85
// ComMoveXY ( Farmer , 105 , 59 ) ;
10639: LD_EXP 31
10643: PPUSH
10644: LD_INT 105
10646: PPUSH
10647: LD_INT 59
10649: PPUSH
10650: CALL_OW 111
// AddComHold ( Farmer ) ;
10654: LD_EXP 31
10658: PPUSH
10659: CALL_OW 200
// SayRadio ( Farmer , DF-1-end ) ;
10663: LD_EXP 31
10667: PPUSH
10668: LD_STRING DF-1-end
10670: PPUSH
10671: CALL_OW 94
// Say ( Aviradze , DA-1-end ) ;
10675: LD_EXP 27
10679: PPUSH
10680: LD_STRING DA-1-end
10682: PPUSH
10683: CALL_OW 88
// SayRadio ( Farmer , DF-2-end ) ;
10687: LD_EXP 31
10691: PPUSH
10692: LD_STRING DF-2-end
10694: PPUSH
10695: CALL_OW 94
// Say ( Aviradze , DA-2-end ) ;
10699: LD_EXP 27
10703: PPUSH
10704: LD_STRING DA-2-end
10706: PPUSH
10707: CALL_OW 88
// SayRadio ( Farmer , DF-3-end ) ;
10711: LD_EXP 31
10715: PPUSH
10716: LD_STRING DF-3-end
10718: PPUSH
10719: CALL_OW 94
// Say ( Heike , DH-3-end ) ;
10723: LD_EXP 23
10727: PPUSH
10728: LD_STRING DH-3-end
10730: PPUSH
10731: CALL_OW 88
// SayRadio ( Farmer , DF-4-end ) ;
10735: LD_EXP 31
10739: PPUSH
10740: LD_STRING DF-4-end
10742: PPUSH
10743: CALL_OW 94
// if tick <= [ 25 25$00 , 22 22$30 , 20 20$00 ] [ Difficulty ] then
10747: LD_OWVAR 1
10751: PUSH
10752: LD_INT 52500
10754: PUSH
10755: LD_INT 47250
10757: PUSH
10758: LD_INT 42000
10760: PUSH
10761: EMPTY
10762: LIST
10763: LIST
10764: LIST
10765: PUSH
10766: LD_OWVAR 67
10770: ARRAY
10771: LESSEQUAL
10772: IFFALSE 10786
// AddMedal ( med1 , 1 ) else
10774: LD_STRING med1
10776: PPUSH
10777: LD_INT 1
10779: PPUSH
10780: CALL_OW 101
10784: GO 10797
// AddMedal ( med1 , - 1 ) ;
10786: LD_STRING med1
10788: PPUSH
10789: LD_INT 1
10791: NEG
10792: PPUSH
10793: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) = 0 and not gladstoneEscaped then
10797: LD_INT 22
10799: PUSH
10800: LD_INT 1
10802: PUSH
10803: EMPTY
10804: LIST
10805: LIST
10806: PUSH
10807: LD_INT 25
10809: PUSH
10810: LD_INT 4
10812: PUSH
10813: EMPTY
10814: LIST
10815: LIST
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: PPUSH
10821: CALL_OW 69
10825: PUSH
10826: LD_INT 0
10828: EQUAL
10829: PUSH
10830: LD_EXP 12
10834: NOT
10835: AND
10836: IFFALSE 10850
// AddMedal ( med2 , 1 ) else
10838: LD_STRING med2
10840: PPUSH
10841: LD_INT 1
10843: PPUSH
10844: CALL_OW 101
10848: GO 10861
// AddMedal ( med2 , - 1 ) ;
10850: LD_STRING med2
10852: PPUSH
10853: LD_INT 1
10855: NEG
10856: PPUSH
10857: CALL_OW 101
// if trickyMove then
10861: LD_EXP 15
10865: IFFALSE 10879
// AddMedal ( med3 , 1 ) else
10867: LD_STRING med3
10869: PPUSH
10870: LD_INT 1
10872: PPUSH
10873: CALL_OW 101
10877: GO 10909
// if spottedBeforeRadio then
10879: LD_EXP 6
10883: IFFALSE 10898
// AddMedal ( med3 , - 2 ) else
10885: LD_STRING med3
10887: PPUSH
10888: LD_INT 2
10890: NEG
10891: PPUSH
10892: CALL_OW 101
10896: GO 10909
// AddMedal ( med3 , - 1 ) ;
10898: LD_STRING med3
10900: PPUSH
10901: LD_INT 1
10903: NEG
10904: PPUSH
10905: CALL_OW 101
// GiveMedals ( MAIN ) ;
10909: LD_STRING MAIN
10911: PPUSH
10912: CALL_OW 102
// SaveCharacters ( tmp , 02_ape ) ;
10916: LD_VAR 0 1
10920: PPUSH
10921: LD_STRING 02_ape
10923: PPUSH
10924: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
10928: LD_ADDR_VAR 0 1
10932: PUSH
10933: LD_INT 22
10935: PUSH
10936: LD_INT 2
10938: PUSH
10939: EMPTY
10940: LIST
10941: LIST
10942: PUSH
10943: LD_INT 23
10945: PUSH
10946: LD_INT 2
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: PUSH
10953: LD_INT 21
10955: PUSH
10956: LD_INT 1
10958: PUSH
10959: EMPTY
10960: LIST
10961: LIST
10962: PUSH
10963: EMPTY
10964: LIST
10965: LIST
10966: LIST
10967: PPUSH
10968: CALL_OW 69
10972: ST_TO_ADDR
// RewardPeople ( tmp ) ;
10973: LD_VAR 0 1
10977: PPUSH
10978: CALL_OW 43
// SaveCharacters ( Heike , 02_Heike ) ;
10982: LD_EXP 23
10986: PPUSH
10987: LD_STRING 02_Heike
10989: PPUSH
10990: CALL_OW 38
// SaveCharacters ( Aviradze , 02_Aviradze ) ;
10994: LD_EXP 27
10998: PPUSH
10999: LD_STRING 02_Aviradze
11001: PPUSH
11002: CALL_OW 38
// if Givi then
11006: LD_EXP 24
11010: IFFALSE 11024
// SaveCharacters ( Givi , 02_Givi ) ;
11012: LD_EXP 24
11016: PPUSH
11017: LD_STRING 02_Givi
11019: PPUSH
11020: CALL_OW 38
// if Mike then
11024: LD_EXP 25
11028: IFFALSE 11042
// SaveCharacters ( Mike , 02_Mike ) ;
11030: LD_EXP 25
11034: PPUSH
11035: LD_STRING 02_Mike
11037: PPUSH
11038: CALL_OW 38
// if Kamil then
11042: LD_EXP 26
11046: IFFALSE 11060
// SaveCharacters ( Kamil , 02_Kamil ) ;
11048: LD_EXP 26
11052: PPUSH
11053: LD_STRING 02_Kamil
11055: PPUSH
11056: CALL_OW 38
// if Kaia then
11060: LD_EXP 28
11064: IFFALSE 11078
// SaveCharacters ( Kaia , 02_Kaia ) ;
11066: LD_EXP 28
11070: PPUSH
11071: LD_STRING 02_Kaia
11073: PPUSH
11074: CALL_OW 38
// if Sophia then
11078: LD_EXP 29
11082: IFFALSE 11096
// SaveCharacters ( Sophia , 02_Sophia ) ;
11084: LD_EXP 29
11088: PPUSH
11089: LD_STRING 02_Sophia
11091: PPUSH
11092: CALL_OW 38
// if Markov then
11096: LD_EXP 30
11100: IFFALSE 11114
// SaveCharacters ( Markov , 02_Markov ) ;
11102: LD_EXP 30
11106: PPUSH
11107: LD_STRING 02_Markov
11109: PPUSH
11110: CALL_OW 38
// if tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] then
11114: LD_VAR 0 1
11118: PUSH
11119: LD_EXP 23
11123: PUSH
11124: LD_EXP 27
11128: PUSH
11129: LD_EXP 24
11133: PUSH
11134: LD_EXP 25
11138: PUSH
11139: LD_EXP 26
11143: PUSH
11144: LD_EXP 29
11148: PUSH
11149: LD_EXP 28
11153: PUSH
11154: LD_EXP 30
11158: PUSH
11159: EMPTY
11160: LIST
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: DIFF
11169: IFFALSE 11234
// SaveCharacters ( tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] , 02_others ) ;
11171: LD_VAR 0 1
11175: PUSH
11176: LD_EXP 23
11180: PUSH
11181: LD_EXP 27
11185: PUSH
11186: LD_EXP 24
11190: PUSH
11191: LD_EXP 25
11195: PUSH
11196: LD_EXP 26
11200: PUSH
11201: LD_EXP 29
11205: PUSH
11206: LD_EXP 28
11210: PUSH
11211: LD_EXP 30
11215: PUSH
11216: EMPTY
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: DIFF
11226: PPUSH
11227: LD_STRING 02_others
11229: PPUSH
11230: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_KRAY) ) ;
11234: LD_STRING enableBioCharacter(BIO_KRAY)
11236: PPUSH
11237: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_AVIR) ) ;
11241: LD_STRING enableBioCharacter(BIO_AVIR)
11243: PPUSH
11244: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_SOPH) ) ;
11248: LD_STRING enableBioCharacter(BIO_SOPH)
11250: PPUSH
11251: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_KAMI) ) ;
11255: LD_STRING enableBioCharacter(BIO_KAMI)
11257: PPUSH
11258: CALL_OW 559
// YouWin ;
11262: CALL_OW 103
// InGameOff ;
11266: CALL_OW 9
// end ;
11270: PPOPN 1
11272: END
// every 0 0$1 trigger tick > timeUntilFarmer and aviradzeSpotted do
11273: LD_OWVAR 1
11277: PUSH
11278: LD_EXP 13
11282: GREATER
11283: PUSH
11284: LD_EXP 4
11288: AND
11289: IFFALSE 11329
11291: GO 11293
11293: DISABLE
// begin InGameOn ;
11294: CALL_OW 8
// PrepareFarmer ;
11298: CALL 11945 0 0
// CenterNowOnUnits ( Farmer ) ;
11302: LD_EXP 31
11306: PPUSH
11307: CALL_OW 87
// wait ( 0 0$2 ) ;
11311: LD_INT 70
11313: PPUSH
11314: CALL_OW 67
// YouLost ( Farmer ) ;
11318: LD_STRING Farmer
11320: PPUSH
11321: CALL_OW 104
// InGameOff ;
11325: CALL_OW 9
// end ; end_of_file
11329: END
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer ; export function PrepareArabian ; var un , veh ; begin
11330: LD_INT 0
11332: PPUSH
11333: PPUSH
11334: PPUSH
// uc_side := 2 ;
11335: LD_ADDR_OWVAR 20
11339: PUSH
11340: LD_INT 2
11342: ST_TO_ADDR
// uc_nation := 2 ;
11343: LD_ADDR_OWVAR 21
11347: PUSH
11348: LD_INT 2
11350: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
11351: LD_ADDR_EXP 23
11355: PUSH
11356: LD_STRING Heike
11358: PPUSH
11359: LD_EXP 1
11363: NOT
11364: PPUSH
11365: LD_EXP 2
11369: PPUSH
11370: CALL 29757 0 3
11374: ST_TO_ADDR
// PlaceUnitXY ( Heike , 83 , 72 , false ) ;
11375: LD_EXP 23
11379: PPUSH
11380: LD_INT 83
11382: PPUSH
11383: LD_INT 72
11385: PPUSH
11386: LD_INT 0
11388: PPUSH
11389: CALL_OW 48
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
11393: LD_ADDR_EXP 24
11397: PUSH
11398: LD_STRING Givi
11400: PPUSH
11401: LD_EXP 1
11405: NOT
11406: PPUSH
11407: LD_EXP 2
11411: PPUSH
11412: CALL 29757 0 3
11416: ST_TO_ADDR
// if Givi then
11417: LD_EXP 24
11421: IFFALSE 11441
// PlaceUnitXY ( Givi , 87 , 76 , false ) ;
11423: LD_EXP 24
11427: PPUSH
11428: LD_INT 87
11430: PPUSH
11431: LD_INT 76
11433: PPUSH
11434: LD_INT 0
11436: PPUSH
11437: CALL_OW 48
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
11441: LD_ADDR_EXP 25
11445: PUSH
11446: LD_STRING Mike
11448: PPUSH
11449: LD_EXP 1
11453: NOT
11454: PPUSH
11455: LD_EXP 2
11459: PPUSH
11460: CALL 29757 0 3
11464: ST_TO_ADDR
// if Mike then
11465: LD_EXP 25
11469: IFFALSE 11489
// PlaceUnitXY ( Mike , 84 , 76 , false ) ;
11471: LD_EXP 25
11475: PPUSH
11476: LD_INT 84
11478: PPUSH
11479: LD_INT 76
11481: PPUSH
11482: LD_INT 0
11484: PPUSH
11485: CALL_OW 48
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
11489: LD_ADDR_EXP 26
11493: PUSH
11494: LD_STRING Kamil
11496: PPUSH
11497: LD_EXP 1
11501: NOT
11502: PPUSH
11503: LD_EXP 2
11507: PPUSH
11508: CALL 29757 0 3
11512: ST_TO_ADDR
// if Kamil then
11513: LD_EXP 26
11517: IFFALSE 11537
// PlaceUnitXY ( Kamil , 85 , 78 , false ) ;
11519: LD_EXP 26
11523: PPUSH
11524: LD_INT 85
11526: PPUSH
11527: LD_INT 78
11529: PPUSH
11530: LD_INT 0
11532: PPUSH
11533: CALL_OW 48
// uc_side := 5 ;
11537: LD_ADDR_OWVAR 20
11541: PUSH
11542: LD_INT 5
11544: ST_TO_ADDR
// uc_nation := 2 ;
11545: LD_ADDR_OWVAR 21
11549: PUSH
11550: LD_INT 2
11552: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , false ,  ) ;
11553: LD_ADDR_EXP 27
11557: PUSH
11558: LD_STRING Aviradze
11560: PPUSH
11561: LD_INT 0
11563: PPUSH
11564: LD_STRING 
11566: PPUSH
11567: CALL 29757 0 3
11571: ST_TO_ADDR
// PlaceUnitXY ( Aviradze , 106 , 38 , false ) ;
11572: LD_EXP 27
11576: PPUSH
11577: LD_INT 106
11579: PPUSH
11580: LD_INT 38
11582: PPUSH
11583: LD_INT 0
11585: PPUSH
11586: CALL_OW 48
// ComTurnXY ( Aviradze , 103 , 38 ) ;
11590: LD_EXP 27
11594: PPUSH
11595: LD_INT 103
11597: PPUSH
11598: LD_INT 38
11600: PPUSH
11601: CALL_OW 118
// Kaia := PrepareUnit ( Kaia , false ,  ) ;
11605: LD_ADDR_EXP 28
11609: PUSH
11610: LD_STRING Kaia
11612: PPUSH
11613: LD_INT 0
11615: PPUSH
11616: LD_STRING 
11618: PPUSH
11619: CALL 29757 0 3
11623: ST_TO_ADDR
// PlaceUnitXY ( Kaia , 100 , 34 , false ) ;
11624: LD_EXP 28
11628: PPUSH
11629: LD_INT 100
11631: PPUSH
11632: LD_INT 34
11634: PPUSH
11635: LD_INT 0
11637: PPUSH
11638: CALL_OW 48
// ComTurnXY ( Kaia , 100 , 39 ) ;
11642: LD_EXP 28
11646: PPUSH
11647: LD_INT 100
11649: PPUSH
11650: LD_INT 39
11652: PPUSH
11653: CALL_OW 118
// Sophia := PrepareUnit ( Sophia , false ,  ) ;
11657: LD_ADDR_EXP 29
11661: PUSH
11662: LD_STRING Sophia
11664: PPUSH
11665: LD_INT 0
11667: PPUSH
11668: LD_STRING 
11670: PPUSH
11671: CALL 29757 0 3
11675: ST_TO_ADDR
// PlaceUnitXY ( Sophia , 109 , 50 , false ) ;
11676: LD_EXP 29
11680: PPUSH
11681: LD_INT 109
11683: PPUSH
11684: LD_INT 50
11686: PPUSH
11687: LD_INT 0
11689: PPUSH
11690: CALL_OW 48
// ComTurnXY ( Sophia , 100 , 39 ) ;
11694: LD_EXP 29
11698: PPUSH
11699: LD_INT 100
11701: PPUSH
11702: LD_INT 39
11704: PPUSH
11705: CALL_OW 118
// Markov := PrepareUnit ( Markov , false ,  ) ;
11709: LD_ADDR_EXP 30
11713: PUSH
11714: LD_STRING Markov
11716: PPUSH
11717: LD_INT 0
11719: PPUSH
11720: LD_STRING 
11722: PPUSH
11723: CALL 29757 0 3
11727: ST_TO_ADDR
// PrepareTank ( 5 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , [ 90 , 70 , 60 ] [ Difficulty ] ) ;
11728: LD_INT 5
11730: PPUSH
11731: LD_INT 3
11733: PPUSH
11734: LD_INT 21
11736: PPUSH
11737: LD_INT 1
11739: PPUSH
11740: LD_INT 1
11742: PPUSH
11743: LD_INT 42
11745: PPUSH
11746: LD_INT 90
11748: PUSH
11749: LD_INT 70
11751: PUSH
11752: LD_INT 60
11754: PUSH
11755: EMPTY
11756: LIST
11757: LIST
11758: LIST
11759: PUSH
11760: LD_OWVAR 67
11764: ARRAY
11765: PPUSH
11766: CALL 237 0 7
// veh := CreateVehicle ;
11770: LD_ADDR_VAR 0 3
11774: PUSH
11775: CALL_OW 45
11779: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
11780: LD_VAR 0 3
11784: PPUSH
11785: LD_INT 4
11787: PPUSH
11788: CALL_OW 233
// PlaceUnitXY ( veh , 109 , 38 , false ) ;
11792: LD_VAR 0 3
11796: PPUSH
11797: LD_INT 109
11799: PPUSH
11800: LD_INT 38
11802: PPUSH
11803: LD_INT 0
11805: PPUSH
11806: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
11810: LD_EXP 30
11814: PPUSH
11815: LD_VAR 0 3
11819: PPUSH
11820: CALL_OW 52
// ComTurnUnit ( Kaia , Aviradze ) ;
11824: LD_EXP 28
11828: PPUSH
11829: LD_EXP 27
11833: PPUSH
11834: CALL_OW 119
// ComTurnUnit ( Aviradze , Kaia ) ;
11838: LD_EXP 27
11842: PPUSH
11843: LD_EXP 28
11847: PPUSH
11848: CALL_OW 119
// if not Givi or not Mike then
11852: LD_EXP 24
11856: NOT
11857: PUSH
11858: LD_EXP 25
11862: NOT
11863: OR
11864: IFFALSE 11940
// begin uc_nation := 2 ;
11866: LD_ADDR_OWVAR 21
11870: PUSH
11871: LD_INT 2
11873: ST_TO_ADDR
// uc_side := 5 ;
11874: LD_ADDR_OWVAR 20
11878: PUSH
11879: LD_INT 5
11881: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 1 ) ;
11882: LD_INT 1
11884: PPUSH
11885: LD_INT 1
11887: PPUSH
11888: LD_INT 1
11890: PPUSH
11891: CALL_OW 380
// un := CreateHuman ;
11895: LD_ADDR_VAR 0 2
11899: PUSH
11900: CALL_OW 44
11904: ST_TO_ADDR
// PlaceUnitXYR ( un , 112 , 40 , 3 , false ) ;
11905: LD_VAR 0 2
11909: PPUSH
11910: LD_INT 112
11912: PPUSH
11913: LD_INT 40
11915: PPUSH
11916: LD_INT 3
11918: PPUSH
11919: LD_INT 0
11921: PPUSH
11922: CALL_OW 50
// ComTurnUnit ( un , Aviradze ) ;
11926: LD_VAR 0 2
11930: PPUSH
11931: LD_EXP 27
11935: PPUSH
11936: CALL_OW 119
// end ; end ;
11940: LD_VAR 0 1
11944: RET
// export function PrepareFarmer ; var i ; begin
11945: LD_INT 0
11947: PPUSH
11948: PPUSH
// uc_side := 5 ;
11949: LD_ADDR_OWVAR 20
11953: PUSH
11954: LD_INT 5
11956: ST_TO_ADDR
// uc_nation := 2 ;
11957: LD_ADDR_OWVAR 21
11961: PUSH
11962: LD_INT 2
11964: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
11965: LD_ADDR_EXP 31
11969: PUSH
11970: LD_STRING Farmer
11972: PPUSH
11973: LD_INT 0
11975: PPUSH
11976: LD_STRING 
11978: PPUSH
11979: CALL 29757 0 3
11983: ST_TO_ADDR
// PlaceUnitXY ( Farmer , 106 , 62 , false ) ;
11984: LD_EXP 31
11988: PPUSH
11989: LD_INT 106
11991: PPUSH
11992: LD_INT 62
11994: PPUSH
11995: LD_INT 0
11997: PPUSH
11998: CALL_OW 48
// for i := 1 to 5 do
12002: LD_ADDR_VAR 0 2
12006: PUSH
12007: DOUBLE
12008: LD_INT 1
12010: DEC
12011: ST_TO_ADDR
12012: LD_INT 5
12014: PUSH
12015: FOR_TO
12016: IFFALSE 12054
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
12018: LD_INT 1
12020: PPUSH
12021: LD_INT 1
12023: PPUSH
12024: LD_INT 1
12026: PPUSH
12027: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 105 , 64 , 3 , false ) ;
12031: CALL_OW 44
12035: PPUSH
12036: LD_INT 105
12038: PPUSH
12039: LD_INT 64
12041: PPUSH
12042: LD_INT 3
12044: PPUSH
12045: LD_INT 0
12047: PPUSH
12048: CALL_OW 50
// end ;
12052: GO 12015
12054: POP
12055: POP
// end ; end_of_file
12056: LD_VAR 0 1
12060: RET
// every 2 2$20 + 0 0$10 do
12061: GO 12063
12063: DISABLE
// begin enable ;
12064: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , forest , true ) ;
12065: LD_INT 1
12067: PPUSH
12068: LD_INT 5
12070: PPUSH
12071: CALL_OW 12
12075: PPUSH
12076: LD_INT 1
12078: PPUSH
12079: LD_INT 1
12081: PPUSH
12082: CALL_OW 55
// if tick > 6 6$00 then
12086: LD_OWVAR 1
12090: PUSH
12091: LD_INT 12600
12093: GREATER
12094: IFFALSE 12097
// disable ;
12096: DISABLE
// end ; end_of_file
12097: END
// on UnitDestroyed ( un ) do begin if un = Heike then
12098: LD_VAR 0 1
12102: PUSH
12103: LD_EXP 23
12107: EQUAL
12108: IFFALSE 12117
// YouLost ( Heike ) ;
12110: LD_STRING Heike
12112: PPUSH
12113: CALL_OW 104
// if un = Aviradze then
12117: LD_VAR 0 1
12121: PUSH
12122: LD_EXP 27
12126: EQUAL
12127: IFFALSE 12136
// YouLost ( Aviradze ) ;
12129: LD_STRING Aviradze
12131: PPUSH
12132: CALL_OW 104
// if un = usLab then
12136: LD_VAR 0 1
12140: PUSH
12141: LD_INT 3
12143: EQUAL
12144: IFFALSE 12153
// YouLost ( Lab ) ;
12146: LD_STRING Lab
12148: PPUSH
12149: CALL_OW 104
// if ( un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) diff [ Heike , Aviradze ] ) and aviradzeSpotted then
12153: LD_VAR 0 1
12157: PUSH
12158: LD_INT 22
12160: PUSH
12161: LD_INT 2
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: PUSH
12168: LD_INT 21
12170: PUSH
12171: LD_INT 1
12173: PUSH
12174: EMPTY
12175: LIST
12176: LIST
12177: PUSH
12178: LD_INT 23
12180: PUSH
12181: LD_INT 2
12183: PUSH
12184: EMPTY
12185: LIST
12186: LIST
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: LIST
12192: PPUSH
12193: CALL_OW 69
12197: PUSH
12198: LD_EXP 23
12202: PUSH
12203: LD_EXP 27
12207: PUSH
12208: EMPTY
12209: LIST
12210: LIST
12211: DIFF
12212: IN
12213: PUSH
12214: LD_EXP 4
12218: AND
12219: IFFALSE 12235
// lostCounter := lostCounter + 1 ;
12221: LD_ADDR_EXP 18
12225: PUSH
12226: LD_EXP 18
12230: PUSH
12231: LD_INT 1
12233: PLUS
12234: ST_TO_ADDR
// end ;
12235: PPOPN 1
12237: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 2 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) = 0 do
12238: LD_INT 23
12240: PUSH
12241: LD_INT 2
12243: PUSH
12244: EMPTY
12245: LIST
12246: LIST
12247: PUSH
12248: LD_INT 25
12250: PUSH
12251: LD_INT 2
12253: PUSH
12254: EMPTY
12255: LIST
12256: LIST
12257: PUSH
12258: EMPTY
12259: LIST
12260: LIST
12261: PPUSH
12262: CALL_OW 69
12266: PUSH
12267: LD_INT 0
12269: EQUAL
12270: PUSH
12271: LD_INT 22
12273: PUSH
12274: LD_INT 2
12276: PUSH
12277: EMPTY
12278: LIST
12279: LIST
12280: PUSH
12281: LD_INT 21
12283: PUSH
12284: LD_INT 3
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: PPUSH
12295: CALL_OW 69
12299: PUSH
12300: LD_INT 0
12302: EQUAL
12303: AND
12304: IFFALSE 12316
12306: GO 12308
12308: DISABLE
// YouLost ( Eng ) ;
12309: LD_STRING Eng
12311: PPUSH
12312: CALL_OW 104
12316: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in usSci and killerSide = 2 then
12317: LD_VAR 0 1
12321: PUSH
12322: LD_EXP 22
12326: IN
12327: PUSH
12328: LD_VAR 0 2
12332: PUSH
12333: LD_INT 2
12335: EQUAL
12336: AND
12337: IFFALSE 12369
// begin usSci := usSci diff un ;
12339: LD_ADDR_EXP 22
12343: PUSH
12344: LD_EXP 22
12348: PUSH
12349: LD_VAR 0 1
12353: DIFF
12354: ST_TO_ADDR
// sciCounterKill := sciCounterKill + 1 ;
12355: LD_ADDR_EXP 9
12359: PUSH
12360: LD_EXP 9
12364: PUSH
12365: LD_INT 1
12367: PLUS
12368: ST_TO_ADDR
// end ; end ;
12369: PPOPN 3
12371: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
12372: LD_VAR 0 1
12376: PUSH
12377: LD_INT 2
12379: EQUAL
12380: PUSH
12381: LD_VAR 0 2
12385: PUSH
12386: LD_INT 5
12388: EQUAL
12389: AND
12390: IFFALSE 12399
// YouLost ( FriendlyFire ) ;
12392: LD_STRING FriendlyFire
12394: PPUSH
12395: CALL_OW 104
// end ; end_of_file
12399: PPOPN 2
12401: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
12402: LD_INT 0
12404: PPUSH
// ar_miner := 81 ;
12405: LD_ADDR_EXP 39
12409: PUSH
12410: LD_INT 81
12412: ST_TO_ADDR
// ar_crane := 88 ;
12413: LD_ADDR_EXP 38
12417: PUSH
12418: LD_INT 88
12420: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
12421: LD_ADDR_EXP 33
12425: PUSH
12426: LD_INT 89
12428: ST_TO_ADDR
// us_hack := 99 ;
12429: LD_ADDR_EXP 34
12433: PUSH
12434: LD_INT 99
12436: ST_TO_ADDR
// us_artillery := 97 ;
12437: LD_ADDR_EXP 35
12441: PUSH
12442: LD_INT 97
12444: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12445: LD_ADDR_EXP 36
12449: PUSH
12450: LD_INT 91
12452: ST_TO_ADDR
// ar_mortar := 92 ;
12453: LD_ADDR_EXP 37
12457: PUSH
12458: LD_INT 92
12460: ST_TO_ADDR
// ru_radar := 98 ;
12461: LD_ADDR_EXP 32
12465: PUSH
12466: LD_INT 98
12468: ST_TO_ADDR
// tech_Artillery := 80 ;
12469: LD_ADDR_EXP 40
12473: PUSH
12474: LD_INT 80
12476: ST_TO_ADDR
// tech_RadMat := 81 ;
12477: LD_ADDR_EXP 41
12481: PUSH
12482: LD_INT 81
12484: ST_TO_ADDR
// tech_BasicTools := 82 ;
12485: LD_ADDR_EXP 42
12489: PUSH
12490: LD_INT 82
12492: ST_TO_ADDR
// tech_Cargo := 83 ;
12493: LD_ADDR_EXP 43
12497: PUSH
12498: LD_INT 83
12500: ST_TO_ADDR
// tech_Track := 84 ;
12501: LD_ADDR_EXP 44
12505: PUSH
12506: LD_INT 84
12508: ST_TO_ADDR
// tech_Crane := 85 ;
12509: LD_ADDR_EXP 45
12513: PUSH
12514: LD_INT 85
12516: ST_TO_ADDR
// tech_Bulldozer := 86 ;
12517: LD_ADDR_EXP 46
12521: PUSH
12522: LD_INT 86
12524: ST_TO_ADDR
// tech_Hovercraft := 87 ;
12525: LD_ADDR_EXP 47
12529: PUSH
12530: LD_INT 87
12532: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
12533: LD_ADDR_EXP 48
12537: PUSH
12538: LD_INT 88
12540: ST_TO_ADDR
// class_mastodont := 31 ;
12541: LD_ADDR_EXP 49
12545: PUSH
12546: LD_INT 31
12548: ST_TO_ADDR
// class_horse := 21 ;
12549: LD_ADDR_EXP 50
12553: PUSH
12554: LD_INT 21
12556: ST_TO_ADDR
// end ;
12557: LD_VAR 0 1
12561: RET
// every 1 do
12562: GO 12564
12564: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
12565: CALL 12402 0 0
12569: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12570: LD_INT 0
12572: PPUSH
// if p2 = 100 then
12573: LD_VAR 0 2
12577: PUSH
12578: LD_INT 100
12580: EQUAL
12581: IFFALSE 13530
// begin if not StreamModeActive then
12583: LD_EXP 51
12587: NOT
12588: IFFALSE 12598
// StreamModeActive := true ;
12590: LD_ADDR_EXP 51
12594: PUSH
12595: LD_INT 1
12597: ST_TO_ADDR
// if p3 = 0 then
12598: LD_VAR 0 3
12602: PUSH
12603: LD_INT 0
12605: EQUAL
12606: IFFALSE 12612
// InitStreamMode ;
12608: CALL 13690 0 0
// if p3 = 1 then
12612: LD_VAR 0 3
12616: PUSH
12617: LD_INT 1
12619: EQUAL
12620: IFFALSE 12630
// sRocket := true ;
12622: LD_ADDR_EXP 56
12626: PUSH
12627: LD_INT 1
12629: ST_TO_ADDR
// if p3 = 2 then
12630: LD_VAR 0 3
12634: PUSH
12635: LD_INT 2
12637: EQUAL
12638: IFFALSE 12648
// sSpeed := true ;
12640: LD_ADDR_EXP 55
12644: PUSH
12645: LD_INT 1
12647: ST_TO_ADDR
// if p3 = 3 then
12648: LD_VAR 0 3
12652: PUSH
12653: LD_INT 3
12655: EQUAL
12656: IFFALSE 12666
// sEngine := true ;
12658: LD_ADDR_EXP 57
12662: PUSH
12663: LD_INT 1
12665: ST_TO_ADDR
// if p3 = 4 then
12666: LD_VAR 0 3
12670: PUSH
12671: LD_INT 4
12673: EQUAL
12674: IFFALSE 12684
// sSpec := true ;
12676: LD_ADDR_EXP 54
12680: PUSH
12681: LD_INT 1
12683: ST_TO_ADDR
// if p3 = 5 then
12684: LD_VAR 0 3
12688: PUSH
12689: LD_INT 5
12691: EQUAL
12692: IFFALSE 12702
// sLevel := true ;
12694: LD_ADDR_EXP 58
12698: PUSH
12699: LD_INT 1
12701: ST_TO_ADDR
// if p3 = 6 then
12702: LD_VAR 0 3
12706: PUSH
12707: LD_INT 6
12709: EQUAL
12710: IFFALSE 12720
// sArmoury := true ;
12712: LD_ADDR_EXP 59
12716: PUSH
12717: LD_INT 1
12719: ST_TO_ADDR
// if p3 = 7 then
12720: LD_VAR 0 3
12724: PUSH
12725: LD_INT 7
12727: EQUAL
12728: IFFALSE 12738
// sRadar := true ;
12730: LD_ADDR_EXP 60
12734: PUSH
12735: LD_INT 1
12737: ST_TO_ADDR
// if p3 = 8 then
12738: LD_VAR 0 3
12742: PUSH
12743: LD_INT 8
12745: EQUAL
12746: IFFALSE 12756
// sBunker := true ;
12748: LD_ADDR_EXP 61
12752: PUSH
12753: LD_INT 1
12755: ST_TO_ADDR
// if p3 = 9 then
12756: LD_VAR 0 3
12760: PUSH
12761: LD_INT 9
12763: EQUAL
12764: IFFALSE 12774
// sHack := true ;
12766: LD_ADDR_EXP 62
12770: PUSH
12771: LD_INT 1
12773: ST_TO_ADDR
// if p3 = 10 then
12774: LD_VAR 0 3
12778: PUSH
12779: LD_INT 10
12781: EQUAL
12782: IFFALSE 12792
// sFire := true ;
12784: LD_ADDR_EXP 63
12788: PUSH
12789: LD_INT 1
12791: ST_TO_ADDR
// if p3 = 11 then
12792: LD_VAR 0 3
12796: PUSH
12797: LD_INT 11
12799: EQUAL
12800: IFFALSE 12810
// sRefresh := true ;
12802: LD_ADDR_EXP 64
12806: PUSH
12807: LD_INT 1
12809: ST_TO_ADDR
// if p3 = 12 then
12810: LD_VAR 0 3
12814: PUSH
12815: LD_INT 12
12817: EQUAL
12818: IFFALSE 12828
// sExp := true ;
12820: LD_ADDR_EXP 65
12824: PUSH
12825: LD_INT 1
12827: ST_TO_ADDR
// if p3 = 13 then
12828: LD_VAR 0 3
12832: PUSH
12833: LD_INT 13
12835: EQUAL
12836: IFFALSE 12846
// sDepot := true ;
12838: LD_ADDR_EXP 66
12842: PUSH
12843: LD_INT 1
12845: ST_TO_ADDR
// if p3 = 14 then
12846: LD_VAR 0 3
12850: PUSH
12851: LD_INT 14
12853: EQUAL
12854: IFFALSE 12864
// sFlag := true ;
12856: LD_ADDR_EXP 67
12860: PUSH
12861: LD_INT 1
12863: ST_TO_ADDR
// if p3 = 15 then
12864: LD_VAR 0 3
12868: PUSH
12869: LD_INT 15
12871: EQUAL
12872: IFFALSE 12882
// sKamikadze := true ;
12874: LD_ADDR_EXP 75
12878: PUSH
12879: LD_INT 1
12881: ST_TO_ADDR
// if p3 = 16 then
12882: LD_VAR 0 3
12886: PUSH
12887: LD_INT 16
12889: EQUAL
12890: IFFALSE 12900
// sTroll := true ;
12892: LD_ADDR_EXP 76
12896: PUSH
12897: LD_INT 1
12899: ST_TO_ADDR
// if p3 = 17 then
12900: LD_VAR 0 3
12904: PUSH
12905: LD_INT 17
12907: EQUAL
12908: IFFALSE 12918
// sSlow := true ;
12910: LD_ADDR_EXP 77
12914: PUSH
12915: LD_INT 1
12917: ST_TO_ADDR
// if p3 = 18 then
12918: LD_VAR 0 3
12922: PUSH
12923: LD_INT 18
12925: EQUAL
12926: IFFALSE 12936
// sLack := true ;
12928: LD_ADDR_EXP 78
12932: PUSH
12933: LD_INT 1
12935: ST_TO_ADDR
// if p3 = 19 then
12936: LD_VAR 0 3
12940: PUSH
12941: LD_INT 19
12943: EQUAL
12944: IFFALSE 12954
// sTank := true ;
12946: LD_ADDR_EXP 80
12950: PUSH
12951: LD_INT 1
12953: ST_TO_ADDR
// if p3 = 20 then
12954: LD_VAR 0 3
12958: PUSH
12959: LD_INT 20
12961: EQUAL
12962: IFFALSE 12972
// sRemote := true ;
12964: LD_ADDR_EXP 81
12968: PUSH
12969: LD_INT 1
12971: ST_TO_ADDR
// if p3 = 21 then
12972: LD_VAR 0 3
12976: PUSH
12977: LD_INT 21
12979: EQUAL
12980: IFFALSE 12990
// sPowell := true ;
12982: LD_ADDR_EXP 82
12986: PUSH
12987: LD_INT 1
12989: ST_TO_ADDR
// if p3 = 22 then
12990: LD_VAR 0 3
12994: PUSH
12995: LD_INT 22
12997: EQUAL
12998: IFFALSE 13008
// sTeleport := true ;
13000: LD_ADDR_EXP 85
13004: PUSH
13005: LD_INT 1
13007: ST_TO_ADDR
// if p3 = 23 then
13008: LD_VAR 0 3
13012: PUSH
13013: LD_INT 23
13015: EQUAL
13016: IFFALSE 13026
// sOilTower := true ;
13018: LD_ADDR_EXP 87
13022: PUSH
13023: LD_INT 1
13025: ST_TO_ADDR
// if p3 = 24 then
13026: LD_VAR 0 3
13030: PUSH
13031: LD_INT 24
13033: EQUAL
13034: IFFALSE 13044
// sShovel := true ;
13036: LD_ADDR_EXP 88
13040: PUSH
13041: LD_INT 1
13043: ST_TO_ADDR
// if p3 = 25 then
13044: LD_VAR 0 3
13048: PUSH
13049: LD_INT 25
13051: EQUAL
13052: IFFALSE 13062
// sSheik := true ;
13054: LD_ADDR_EXP 89
13058: PUSH
13059: LD_INT 1
13061: ST_TO_ADDR
// if p3 = 26 then
13062: LD_VAR 0 3
13066: PUSH
13067: LD_INT 26
13069: EQUAL
13070: IFFALSE 13080
// sEarthquake := true ;
13072: LD_ADDR_EXP 91
13076: PUSH
13077: LD_INT 1
13079: ST_TO_ADDR
// if p3 = 27 then
13080: LD_VAR 0 3
13084: PUSH
13085: LD_INT 27
13087: EQUAL
13088: IFFALSE 13098
// sAI := true ;
13090: LD_ADDR_EXP 92
13094: PUSH
13095: LD_INT 1
13097: ST_TO_ADDR
// if p3 = 28 then
13098: LD_VAR 0 3
13102: PUSH
13103: LD_INT 28
13105: EQUAL
13106: IFFALSE 13116
// sCargo := true ;
13108: LD_ADDR_EXP 95
13112: PUSH
13113: LD_INT 1
13115: ST_TO_ADDR
// if p3 = 29 then
13116: LD_VAR 0 3
13120: PUSH
13121: LD_INT 29
13123: EQUAL
13124: IFFALSE 13134
// sDLaser := true ;
13126: LD_ADDR_EXP 96
13130: PUSH
13131: LD_INT 1
13133: ST_TO_ADDR
// if p3 = 30 then
13134: LD_VAR 0 3
13138: PUSH
13139: LD_INT 30
13141: EQUAL
13142: IFFALSE 13152
// sExchange := true ;
13144: LD_ADDR_EXP 97
13148: PUSH
13149: LD_INT 1
13151: ST_TO_ADDR
// if p3 = 31 then
13152: LD_VAR 0 3
13156: PUSH
13157: LD_INT 31
13159: EQUAL
13160: IFFALSE 13170
// sFac := true ;
13162: LD_ADDR_EXP 98
13166: PUSH
13167: LD_INT 1
13169: ST_TO_ADDR
// if p3 = 32 then
13170: LD_VAR 0 3
13174: PUSH
13175: LD_INT 32
13177: EQUAL
13178: IFFALSE 13188
// sPower := true ;
13180: LD_ADDR_EXP 99
13184: PUSH
13185: LD_INT 1
13187: ST_TO_ADDR
// if p3 = 33 then
13188: LD_VAR 0 3
13192: PUSH
13193: LD_INT 33
13195: EQUAL
13196: IFFALSE 13206
// sRandom := true ;
13198: LD_ADDR_EXP 100
13202: PUSH
13203: LD_INT 1
13205: ST_TO_ADDR
// if p3 = 34 then
13206: LD_VAR 0 3
13210: PUSH
13211: LD_INT 34
13213: EQUAL
13214: IFFALSE 13224
// sShield := true ;
13216: LD_ADDR_EXP 101
13220: PUSH
13221: LD_INT 1
13223: ST_TO_ADDR
// if p3 = 35 then
13224: LD_VAR 0 3
13228: PUSH
13229: LD_INT 35
13231: EQUAL
13232: IFFALSE 13242
// sTime := true ;
13234: LD_ADDR_EXP 102
13238: PUSH
13239: LD_INT 1
13241: ST_TO_ADDR
// if p3 = 36 then
13242: LD_VAR 0 3
13246: PUSH
13247: LD_INT 36
13249: EQUAL
13250: IFFALSE 13260
// sTools := true ;
13252: LD_ADDR_EXP 103
13256: PUSH
13257: LD_INT 1
13259: ST_TO_ADDR
// if p3 = 101 then
13260: LD_VAR 0 3
13264: PUSH
13265: LD_INT 101
13267: EQUAL
13268: IFFALSE 13278
// sSold := true ;
13270: LD_ADDR_EXP 68
13274: PUSH
13275: LD_INT 1
13277: ST_TO_ADDR
// if p3 = 102 then
13278: LD_VAR 0 3
13282: PUSH
13283: LD_INT 102
13285: EQUAL
13286: IFFALSE 13296
// sDiff := true ;
13288: LD_ADDR_EXP 69
13292: PUSH
13293: LD_INT 1
13295: ST_TO_ADDR
// if p3 = 103 then
13296: LD_VAR 0 3
13300: PUSH
13301: LD_INT 103
13303: EQUAL
13304: IFFALSE 13314
// sFog := true ;
13306: LD_ADDR_EXP 72
13310: PUSH
13311: LD_INT 1
13313: ST_TO_ADDR
// if p3 = 104 then
13314: LD_VAR 0 3
13318: PUSH
13319: LD_INT 104
13321: EQUAL
13322: IFFALSE 13332
// sReset := true ;
13324: LD_ADDR_EXP 73
13328: PUSH
13329: LD_INT 1
13331: ST_TO_ADDR
// if p3 = 105 then
13332: LD_VAR 0 3
13336: PUSH
13337: LD_INT 105
13339: EQUAL
13340: IFFALSE 13350
// sSun := true ;
13342: LD_ADDR_EXP 74
13346: PUSH
13347: LD_INT 1
13349: ST_TO_ADDR
// if p3 = 106 then
13350: LD_VAR 0 3
13354: PUSH
13355: LD_INT 106
13357: EQUAL
13358: IFFALSE 13368
// sTiger := true ;
13360: LD_ADDR_EXP 70
13364: PUSH
13365: LD_INT 1
13367: ST_TO_ADDR
// if p3 = 107 then
13368: LD_VAR 0 3
13372: PUSH
13373: LD_INT 107
13375: EQUAL
13376: IFFALSE 13386
// sBomb := true ;
13378: LD_ADDR_EXP 71
13382: PUSH
13383: LD_INT 1
13385: ST_TO_ADDR
// if p3 = 108 then
13386: LD_VAR 0 3
13390: PUSH
13391: LD_INT 108
13393: EQUAL
13394: IFFALSE 13404
// sWound := true ;
13396: LD_ADDR_EXP 79
13400: PUSH
13401: LD_INT 1
13403: ST_TO_ADDR
// if p3 = 109 then
13404: LD_VAR 0 3
13408: PUSH
13409: LD_INT 109
13411: EQUAL
13412: IFFALSE 13422
// sBetray := true ;
13414: LD_ADDR_EXP 83
13418: PUSH
13419: LD_INT 1
13421: ST_TO_ADDR
// if p3 = 110 then
13422: LD_VAR 0 3
13426: PUSH
13427: LD_INT 110
13429: EQUAL
13430: IFFALSE 13440
// sContamin := true ;
13432: LD_ADDR_EXP 84
13436: PUSH
13437: LD_INT 1
13439: ST_TO_ADDR
// if p3 = 111 then
13440: LD_VAR 0 3
13444: PUSH
13445: LD_INT 111
13447: EQUAL
13448: IFFALSE 13458
// sOil := true ;
13450: LD_ADDR_EXP 86
13454: PUSH
13455: LD_INT 1
13457: ST_TO_ADDR
// if p3 = 112 then
13458: LD_VAR 0 3
13462: PUSH
13463: LD_INT 112
13465: EQUAL
13466: IFFALSE 13476
// sStu := true ;
13468: LD_ADDR_EXP 90
13472: PUSH
13473: LD_INT 1
13475: ST_TO_ADDR
// if p3 = 113 then
13476: LD_VAR 0 3
13480: PUSH
13481: LD_INT 113
13483: EQUAL
13484: IFFALSE 13494
// sBazooka := true ;
13486: LD_ADDR_EXP 93
13490: PUSH
13491: LD_INT 1
13493: ST_TO_ADDR
// if p3 = 114 then
13494: LD_VAR 0 3
13498: PUSH
13499: LD_INT 114
13501: EQUAL
13502: IFFALSE 13512
// sMortar := true ;
13504: LD_ADDR_EXP 94
13508: PUSH
13509: LD_INT 1
13511: ST_TO_ADDR
// if p3 = 115 then
13512: LD_VAR 0 3
13516: PUSH
13517: LD_INT 115
13519: EQUAL
13520: IFFALSE 13530
// sRanger := true ;
13522: LD_ADDR_EXP 104
13526: PUSH
13527: LD_INT 1
13529: ST_TO_ADDR
// end ; if p2 = 101 then
13530: LD_VAR 0 2
13534: PUSH
13535: LD_INT 101
13537: EQUAL
13538: IFFALSE 13666
// begin case p3 of 1 :
13540: LD_VAR 0 3
13544: PUSH
13545: LD_INT 1
13547: DOUBLE
13548: EQUAL
13549: IFTRUE 13553
13551: GO 13560
13553: POP
// hHackUnlimitedResources ; 2 :
13554: CALL 24703 0 0
13558: GO 13666
13560: LD_INT 2
13562: DOUBLE
13563: EQUAL
13564: IFTRUE 13568
13566: GO 13575
13568: POP
// hHackSetLevel10 ; 3 :
13569: CALL 24836 0 0
13573: GO 13666
13575: LD_INT 3
13577: DOUBLE
13578: EQUAL
13579: IFTRUE 13583
13581: GO 13590
13583: POP
// hHackSetLevel10YourUnits ; 4 :
13584: CALL 24921 0 0
13588: GO 13666
13590: LD_INT 4
13592: DOUBLE
13593: EQUAL
13594: IFTRUE 13598
13596: GO 13605
13598: POP
// hHackInvincible ; 5 :
13599: CALL 25369 0 0
13603: GO 13666
13605: LD_INT 5
13607: DOUBLE
13608: EQUAL
13609: IFTRUE 13613
13611: GO 13620
13613: POP
// hHackInvisible ; 6 :
13614: CALL 25480 0 0
13618: GO 13666
13620: LD_INT 6
13622: DOUBLE
13623: EQUAL
13624: IFTRUE 13628
13626: GO 13635
13628: POP
// hHackChangeYourSide ; 7 :
13629: CALL 25537 0 0
13633: GO 13666
13635: LD_INT 7
13637: DOUBLE
13638: EQUAL
13639: IFTRUE 13643
13641: GO 13650
13643: POP
// hHackChangeUnitSide ; 8 :
13644: CALL 25579 0 0
13648: GO 13666
13650: LD_INT 8
13652: DOUBLE
13653: EQUAL
13654: IFTRUE 13658
13656: GO 13665
13658: POP
// hHackFog ; end ;
13659: CALL 25680 0 0
13663: GO 13666
13665: POP
// end ; end ;
13666: LD_VAR 0 7
13670: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
13671: GO 13673
13673: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
13674: LD_STRING initStreamRollete();
13676: PPUSH
13677: CALL_OW 559
// InitStreamMode ;
13681: CALL 13690 0 0
// DefineStreamItems ( ) ;
13685: CALL 14130 0 0
// end ;
13689: END
// function InitStreamMode ; begin
13690: LD_INT 0
13692: PPUSH
// streamModeActive := false ;
13693: LD_ADDR_EXP 51
13697: PUSH
13698: LD_INT 0
13700: ST_TO_ADDR
// normalCounter := 36 ;
13701: LD_ADDR_EXP 52
13705: PUSH
13706: LD_INT 36
13708: ST_TO_ADDR
// hardcoreCounter := 16 ;
13709: LD_ADDR_EXP 53
13713: PUSH
13714: LD_INT 16
13716: ST_TO_ADDR
// sRocket := false ;
13717: LD_ADDR_EXP 56
13721: PUSH
13722: LD_INT 0
13724: ST_TO_ADDR
// sSpeed := false ;
13725: LD_ADDR_EXP 55
13729: PUSH
13730: LD_INT 0
13732: ST_TO_ADDR
// sEngine := false ;
13733: LD_ADDR_EXP 57
13737: PUSH
13738: LD_INT 0
13740: ST_TO_ADDR
// sSpec := false ;
13741: LD_ADDR_EXP 54
13745: PUSH
13746: LD_INT 0
13748: ST_TO_ADDR
// sLevel := false ;
13749: LD_ADDR_EXP 58
13753: PUSH
13754: LD_INT 0
13756: ST_TO_ADDR
// sArmoury := false ;
13757: LD_ADDR_EXP 59
13761: PUSH
13762: LD_INT 0
13764: ST_TO_ADDR
// sRadar := false ;
13765: LD_ADDR_EXP 60
13769: PUSH
13770: LD_INT 0
13772: ST_TO_ADDR
// sBunker := false ;
13773: LD_ADDR_EXP 61
13777: PUSH
13778: LD_INT 0
13780: ST_TO_ADDR
// sHack := false ;
13781: LD_ADDR_EXP 62
13785: PUSH
13786: LD_INT 0
13788: ST_TO_ADDR
// sFire := false ;
13789: LD_ADDR_EXP 63
13793: PUSH
13794: LD_INT 0
13796: ST_TO_ADDR
// sRefresh := false ;
13797: LD_ADDR_EXP 64
13801: PUSH
13802: LD_INT 0
13804: ST_TO_ADDR
// sExp := false ;
13805: LD_ADDR_EXP 65
13809: PUSH
13810: LD_INT 0
13812: ST_TO_ADDR
// sDepot := false ;
13813: LD_ADDR_EXP 66
13817: PUSH
13818: LD_INT 0
13820: ST_TO_ADDR
// sFlag := false ;
13821: LD_ADDR_EXP 67
13825: PUSH
13826: LD_INT 0
13828: ST_TO_ADDR
// sKamikadze := false ;
13829: LD_ADDR_EXP 75
13833: PUSH
13834: LD_INT 0
13836: ST_TO_ADDR
// sTroll := false ;
13837: LD_ADDR_EXP 76
13841: PUSH
13842: LD_INT 0
13844: ST_TO_ADDR
// sSlow := false ;
13845: LD_ADDR_EXP 77
13849: PUSH
13850: LD_INT 0
13852: ST_TO_ADDR
// sLack := false ;
13853: LD_ADDR_EXP 78
13857: PUSH
13858: LD_INT 0
13860: ST_TO_ADDR
// sTank := false ;
13861: LD_ADDR_EXP 80
13865: PUSH
13866: LD_INT 0
13868: ST_TO_ADDR
// sRemote := false ;
13869: LD_ADDR_EXP 81
13873: PUSH
13874: LD_INT 0
13876: ST_TO_ADDR
// sPowell := false ;
13877: LD_ADDR_EXP 82
13881: PUSH
13882: LD_INT 0
13884: ST_TO_ADDR
// sTeleport := false ;
13885: LD_ADDR_EXP 85
13889: PUSH
13890: LD_INT 0
13892: ST_TO_ADDR
// sOilTower := false ;
13893: LD_ADDR_EXP 87
13897: PUSH
13898: LD_INT 0
13900: ST_TO_ADDR
// sShovel := false ;
13901: LD_ADDR_EXP 88
13905: PUSH
13906: LD_INT 0
13908: ST_TO_ADDR
// sSheik := false ;
13909: LD_ADDR_EXP 89
13913: PUSH
13914: LD_INT 0
13916: ST_TO_ADDR
// sEarthquake := false ;
13917: LD_ADDR_EXP 91
13921: PUSH
13922: LD_INT 0
13924: ST_TO_ADDR
// sAI := false ;
13925: LD_ADDR_EXP 92
13929: PUSH
13930: LD_INT 0
13932: ST_TO_ADDR
// sCargo := false ;
13933: LD_ADDR_EXP 95
13937: PUSH
13938: LD_INT 0
13940: ST_TO_ADDR
// sDLaser := false ;
13941: LD_ADDR_EXP 96
13945: PUSH
13946: LD_INT 0
13948: ST_TO_ADDR
// sExchange := false ;
13949: LD_ADDR_EXP 97
13953: PUSH
13954: LD_INT 0
13956: ST_TO_ADDR
// sFac := false ;
13957: LD_ADDR_EXP 98
13961: PUSH
13962: LD_INT 0
13964: ST_TO_ADDR
// sPower := false ;
13965: LD_ADDR_EXP 99
13969: PUSH
13970: LD_INT 0
13972: ST_TO_ADDR
// sRandom := false ;
13973: LD_ADDR_EXP 100
13977: PUSH
13978: LD_INT 0
13980: ST_TO_ADDR
// sShield := false ;
13981: LD_ADDR_EXP 101
13985: PUSH
13986: LD_INT 0
13988: ST_TO_ADDR
// sTime := false ;
13989: LD_ADDR_EXP 102
13993: PUSH
13994: LD_INT 0
13996: ST_TO_ADDR
// sTools := false ;
13997: LD_ADDR_EXP 103
14001: PUSH
14002: LD_INT 0
14004: ST_TO_ADDR
// sSold := false ;
14005: LD_ADDR_EXP 68
14009: PUSH
14010: LD_INT 0
14012: ST_TO_ADDR
// sDiff := false ;
14013: LD_ADDR_EXP 69
14017: PUSH
14018: LD_INT 0
14020: ST_TO_ADDR
// sFog := false ;
14021: LD_ADDR_EXP 72
14025: PUSH
14026: LD_INT 0
14028: ST_TO_ADDR
// sReset := false ;
14029: LD_ADDR_EXP 73
14033: PUSH
14034: LD_INT 0
14036: ST_TO_ADDR
// sSun := false ;
14037: LD_ADDR_EXP 74
14041: PUSH
14042: LD_INT 0
14044: ST_TO_ADDR
// sTiger := false ;
14045: LD_ADDR_EXP 70
14049: PUSH
14050: LD_INT 0
14052: ST_TO_ADDR
// sBomb := false ;
14053: LD_ADDR_EXP 71
14057: PUSH
14058: LD_INT 0
14060: ST_TO_ADDR
// sWound := false ;
14061: LD_ADDR_EXP 79
14065: PUSH
14066: LD_INT 0
14068: ST_TO_ADDR
// sBetray := false ;
14069: LD_ADDR_EXP 83
14073: PUSH
14074: LD_INT 0
14076: ST_TO_ADDR
// sContamin := false ;
14077: LD_ADDR_EXP 84
14081: PUSH
14082: LD_INT 0
14084: ST_TO_ADDR
// sOil := false ;
14085: LD_ADDR_EXP 86
14089: PUSH
14090: LD_INT 0
14092: ST_TO_ADDR
// sStu := false ;
14093: LD_ADDR_EXP 90
14097: PUSH
14098: LD_INT 0
14100: ST_TO_ADDR
// sBazooka := false ;
14101: LD_ADDR_EXP 93
14105: PUSH
14106: LD_INT 0
14108: ST_TO_ADDR
// sMortar := false ;
14109: LD_ADDR_EXP 94
14113: PUSH
14114: LD_INT 0
14116: ST_TO_ADDR
// sRanger := false ;
14117: LD_ADDR_EXP 104
14121: PUSH
14122: LD_INT 0
14124: ST_TO_ADDR
// end ;
14125: LD_VAR 0 1
14129: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
14130: LD_INT 0
14132: PPUSH
14133: PPUSH
14134: PPUSH
14135: PPUSH
14136: PPUSH
// result := [ ] ;
14137: LD_ADDR_VAR 0 1
14141: PUSH
14142: EMPTY
14143: ST_TO_ADDR
// if campaign_id = 1 then
14144: LD_OWVAR 69
14148: PUSH
14149: LD_INT 1
14151: EQUAL
14152: IFFALSE 17090
// begin case mission_number of 1 :
14154: LD_OWVAR 70
14158: PUSH
14159: LD_INT 1
14161: DOUBLE
14162: EQUAL
14163: IFTRUE 14167
14165: GO 14231
14167: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
14168: LD_ADDR_VAR 0 1
14172: PUSH
14173: LD_INT 2
14175: PUSH
14176: LD_INT 4
14178: PUSH
14179: LD_INT 11
14181: PUSH
14182: LD_INT 12
14184: PUSH
14185: LD_INT 15
14187: PUSH
14188: LD_INT 16
14190: PUSH
14191: LD_INT 22
14193: PUSH
14194: LD_INT 23
14196: PUSH
14197: LD_INT 26
14199: PUSH
14200: EMPTY
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: PUSH
14211: LD_INT 101
14213: PUSH
14214: LD_INT 102
14216: PUSH
14217: LD_INT 106
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: LIST
14224: PUSH
14225: EMPTY
14226: LIST
14227: LIST
14228: ST_TO_ADDR
14229: GO 17088
14231: LD_INT 2
14233: DOUBLE
14234: EQUAL
14235: IFTRUE 14239
14237: GO 14311
14239: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
14240: LD_ADDR_VAR 0 1
14244: PUSH
14245: LD_INT 2
14247: PUSH
14248: LD_INT 4
14250: PUSH
14251: LD_INT 11
14253: PUSH
14254: LD_INT 12
14256: PUSH
14257: LD_INT 15
14259: PUSH
14260: LD_INT 16
14262: PUSH
14263: LD_INT 22
14265: PUSH
14266: LD_INT 23
14268: PUSH
14269: LD_INT 26
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: PUSH
14283: LD_INT 101
14285: PUSH
14286: LD_INT 102
14288: PUSH
14289: LD_INT 105
14291: PUSH
14292: LD_INT 106
14294: PUSH
14295: LD_INT 108
14297: PUSH
14298: EMPTY
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: ST_TO_ADDR
14309: GO 17088
14311: LD_INT 3
14313: DOUBLE
14314: EQUAL
14315: IFTRUE 14319
14317: GO 14395
14319: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
14320: LD_ADDR_VAR 0 1
14324: PUSH
14325: LD_INT 2
14327: PUSH
14328: LD_INT 4
14330: PUSH
14331: LD_INT 5
14333: PUSH
14334: LD_INT 11
14336: PUSH
14337: LD_INT 12
14339: PUSH
14340: LD_INT 15
14342: PUSH
14343: LD_INT 16
14345: PUSH
14346: LD_INT 22
14348: PUSH
14349: LD_INT 26
14351: PUSH
14352: LD_INT 36
14354: PUSH
14355: EMPTY
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: PUSH
14367: LD_INT 101
14369: PUSH
14370: LD_INT 102
14372: PUSH
14373: LD_INT 105
14375: PUSH
14376: LD_INT 106
14378: PUSH
14379: LD_INT 108
14381: PUSH
14382: EMPTY
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: PUSH
14389: EMPTY
14390: LIST
14391: LIST
14392: ST_TO_ADDR
14393: GO 17088
14395: LD_INT 4
14397: DOUBLE
14398: EQUAL
14399: IFTRUE 14403
14401: GO 14487
14403: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
14404: LD_ADDR_VAR 0 1
14408: PUSH
14409: LD_INT 2
14411: PUSH
14412: LD_INT 4
14414: PUSH
14415: LD_INT 5
14417: PUSH
14418: LD_INT 8
14420: PUSH
14421: LD_INT 11
14423: PUSH
14424: LD_INT 12
14426: PUSH
14427: LD_INT 15
14429: PUSH
14430: LD_INT 16
14432: PUSH
14433: LD_INT 22
14435: PUSH
14436: LD_INT 23
14438: PUSH
14439: LD_INT 26
14441: PUSH
14442: LD_INT 36
14444: PUSH
14445: EMPTY
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: PUSH
14459: LD_INT 101
14461: PUSH
14462: LD_INT 102
14464: PUSH
14465: LD_INT 105
14467: PUSH
14468: LD_INT 106
14470: PUSH
14471: LD_INT 108
14473: PUSH
14474: EMPTY
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: PUSH
14481: EMPTY
14482: LIST
14483: LIST
14484: ST_TO_ADDR
14485: GO 17088
14487: LD_INT 5
14489: DOUBLE
14490: EQUAL
14491: IFTRUE 14495
14493: GO 14595
14495: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
14496: LD_ADDR_VAR 0 1
14500: PUSH
14501: LD_INT 2
14503: PUSH
14504: LD_INT 4
14506: PUSH
14507: LD_INT 5
14509: PUSH
14510: LD_INT 6
14512: PUSH
14513: LD_INT 8
14515: PUSH
14516: LD_INT 11
14518: PUSH
14519: LD_INT 12
14521: PUSH
14522: LD_INT 15
14524: PUSH
14525: LD_INT 16
14527: PUSH
14528: LD_INT 22
14530: PUSH
14531: LD_INT 23
14533: PUSH
14534: LD_INT 25
14536: PUSH
14537: LD_INT 26
14539: PUSH
14540: LD_INT 36
14542: PUSH
14543: EMPTY
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: PUSH
14559: LD_INT 101
14561: PUSH
14562: LD_INT 102
14564: PUSH
14565: LD_INT 105
14567: PUSH
14568: LD_INT 106
14570: PUSH
14571: LD_INT 108
14573: PUSH
14574: LD_INT 109
14576: PUSH
14577: LD_INT 112
14579: PUSH
14580: EMPTY
14581: LIST
14582: LIST
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: PUSH
14589: EMPTY
14590: LIST
14591: LIST
14592: ST_TO_ADDR
14593: GO 17088
14595: LD_INT 6
14597: DOUBLE
14598: EQUAL
14599: IFTRUE 14603
14601: GO 14723
14603: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
14604: LD_ADDR_VAR 0 1
14608: PUSH
14609: LD_INT 2
14611: PUSH
14612: LD_INT 4
14614: PUSH
14615: LD_INT 5
14617: PUSH
14618: LD_INT 6
14620: PUSH
14621: LD_INT 8
14623: PUSH
14624: LD_INT 11
14626: PUSH
14627: LD_INT 12
14629: PUSH
14630: LD_INT 15
14632: PUSH
14633: LD_INT 16
14635: PUSH
14636: LD_INT 20
14638: PUSH
14639: LD_INT 21
14641: PUSH
14642: LD_INT 22
14644: PUSH
14645: LD_INT 23
14647: PUSH
14648: LD_INT 25
14650: PUSH
14651: LD_INT 26
14653: PUSH
14654: LD_INT 30
14656: PUSH
14657: LD_INT 31
14659: PUSH
14660: LD_INT 32
14662: PUSH
14663: LD_INT 36
14665: PUSH
14666: EMPTY
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: PUSH
14687: LD_INT 101
14689: PUSH
14690: LD_INT 102
14692: PUSH
14693: LD_INT 105
14695: PUSH
14696: LD_INT 106
14698: PUSH
14699: LD_INT 108
14701: PUSH
14702: LD_INT 109
14704: PUSH
14705: LD_INT 112
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: PUSH
14717: EMPTY
14718: LIST
14719: LIST
14720: ST_TO_ADDR
14721: GO 17088
14723: LD_INT 7
14725: DOUBLE
14726: EQUAL
14727: IFTRUE 14731
14729: GO 14831
14731: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
14732: LD_ADDR_VAR 0 1
14736: PUSH
14737: LD_INT 2
14739: PUSH
14740: LD_INT 4
14742: PUSH
14743: LD_INT 5
14745: PUSH
14746: LD_INT 7
14748: PUSH
14749: LD_INT 11
14751: PUSH
14752: LD_INT 12
14754: PUSH
14755: LD_INT 15
14757: PUSH
14758: LD_INT 16
14760: PUSH
14761: LD_INT 20
14763: PUSH
14764: LD_INT 21
14766: PUSH
14767: LD_INT 22
14769: PUSH
14770: LD_INT 23
14772: PUSH
14773: LD_INT 25
14775: PUSH
14776: LD_INT 26
14778: PUSH
14779: EMPTY
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: LIST
14786: LIST
14787: LIST
14788: LIST
14789: LIST
14790: LIST
14791: LIST
14792: LIST
14793: LIST
14794: PUSH
14795: LD_INT 101
14797: PUSH
14798: LD_INT 102
14800: PUSH
14801: LD_INT 103
14803: PUSH
14804: LD_INT 105
14806: PUSH
14807: LD_INT 106
14809: PUSH
14810: LD_INT 108
14812: PUSH
14813: LD_INT 112
14815: PUSH
14816: EMPTY
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: ST_TO_ADDR
14829: GO 17088
14831: LD_INT 8
14833: DOUBLE
14834: EQUAL
14835: IFTRUE 14839
14837: GO 14967
14839: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
14840: LD_ADDR_VAR 0 1
14844: PUSH
14845: LD_INT 2
14847: PUSH
14848: LD_INT 4
14850: PUSH
14851: LD_INT 5
14853: PUSH
14854: LD_INT 6
14856: PUSH
14857: LD_INT 7
14859: PUSH
14860: LD_INT 8
14862: PUSH
14863: LD_INT 11
14865: PUSH
14866: LD_INT 12
14868: PUSH
14869: LD_INT 15
14871: PUSH
14872: LD_INT 16
14874: PUSH
14875: LD_INT 20
14877: PUSH
14878: LD_INT 21
14880: PUSH
14881: LD_INT 22
14883: PUSH
14884: LD_INT 23
14886: PUSH
14887: LD_INT 25
14889: PUSH
14890: LD_INT 26
14892: PUSH
14893: LD_INT 30
14895: PUSH
14896: LD_INT 31
14898: PUSH
14899: LD_INT 32
14901: PUSH
14902: LD_INT 36
14904: PUSH
14905: EMPTY
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: PUSH
14927: LD_INT 101
14929: PUSH
14930: LD_INT 102
14932: PUSH
14933: LD_INT 103
14935: PUSH
14936: LD_INT 105
14938: PUSH
14939: LD_INT 106
14941: PUSH
14942: LD_INT 108
14944: PUSH
14945: LD_INT 109
14947: PUSH
14948: LD_INT 112
14950: PUSH
14951: EMPTY
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: ST_TO_ADDR
14965: GO 17088
14967: LD_INT 9
14969: DOUBLE
14970: EQUAL
14971: IFTRUE 14975
14973: GO 15111
14975: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
14976: LD_ADDR_VAR 0 1
14980: PUSH
14981: LD_INT 2
14983: PUSH
14984: LD_INT 4
14986: PUSH
14987: LD_INT 5
14989: PUSH
14990: LD_INT 6
14992: PUSH
14993: LD_INT 7
14995: PUSH
14996: LD_INT 8
14998: PUSH
14999: LD_INT 11
15001: PUSH
15002: LD_INT 12
15004: PUSH
15005: LD_INT 15
15007: PUSH
15008: LD_INT 16
15010: PUSH
15011: LD_INT 20
15013: PUSH
15014: LD_INT 21
15016: PUSH
15017: LD_INT 22
15019: PUSH
15020: LD_INT 23
15022: PUSH
15023: LD_INT 25
15025: PUSH
15026: LD_INT 26
15028: PUSH
15029: LD_INT 28
15031: PUSH
15032: LD_INT 30
15034: PUSH
15035: LD_INT 31
15037: PUSH
15038: LD_INT 32
15040: PUSH
15041: LD_INT 36
15043: PUSH
15044: EMPTY
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: LIST
15054: LIST
15055: LIST
15056: LIST
15057: LIST
15058: LIST
15059: LIST
15060: LIST
15061: LIST
15062: LIST
15063: LIST
15064: LIST
15065: LIST
15066: PUSH
15067: LD_INT 101
15069: PUSH
15070: LD_INT 102
15072: PUSH
15073: LD_INT 103
15075: PUSH
15076: LD_INT 105
15078: PUSH
15079: LD_INT 106
15081: PUSH
15082: LD_INT 108
15084: PUSH
15085: LD_INT 109
15087: PUSH
15088: LD_INT 112
15090: PUSH
15091: LD_INT 114
15093: PUSH
15094: EMPTY
15095: LIST
15096: LIST
15097: LIST
15098: LIST
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: PUSH
15105: EMPTY
15106: LIST
15107: LIST
15108: ST_TO_ADDR
15109: GO 17088
15111: LD_INT 10
15113: DOUBLE
15114: EQUAL
15115: IFTRUE 15119
15117: GO 15303
15119: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
15120: LD_ADDR_VAR 0 1
15124: PUSH
15125: LD_INT 2
15127: PUSH
15128: LD_INT 4
15130: PUSH
15131: LD_INT 5
15133: PUSH
15134: LD_INT 6
15136: PUSH
15137: LD_INT 7
15139: PUSH
15140: LD_INT 8
15142: PUSH
15143: LD_INT 9
15145: PUSH
15146: LD_INT 10
15148: PUSH
15149: LD_INT 11
15151: PUSH
15152: LD_INT 12
15154: PUSH
15155: LD_INT 13
15157: PUSH
15158: LD_INT 14
15160: PUSH
15161: LD_INT 15
15163: PUSH
15164: LD_INT 16
15166: PUSH
15167: LD_INT 17
15169: PUSH
15170: LD_INT 18
15172: PUSH
15173: LD_INT 19
15175: PUSH
15176: LD_INT 20
15178: PUSH
15179: LD_INT 21
15181: PUSH
15182: LD_INT 22
15184: PUSH
15185: LD_INT 23
15187: PUSH
15188: LD_INT 24
15190: PUSH
15191: LD_INT 25
15193: PUSH
15194: LD_INT 26
15196: PUSH
15197: LD_INT 28
15199: PUSH
15200: LD_INT 30
15202: PUSH
15203: LD_INT 31
15205: PUSH
15206: LD_INT 32
15208: PUSH
15209: LD_INT 36
15211: PUSH
15212: EMPTY
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: PUSH
15243: LD_INT 101
15245: PUSH
15246: LD_INT 102
15248: PUSH
15249: LD_INT 103
15251: PUSH
15252: LD_INT 104
15254: PUSH
15255: LD_INT 105
15257: PUSH
15258: LD_INT 106
15260: PUSH
15261: LD_INT 107
15263: PUSH
15264: LD_INT 108
15266: PUSH
15267: LD_INT 109
15269: PUSH
15270: LD_INT 110
15272: PUSH
15273: LD_INT 111
15275: PUSH
15276: LD_INT 112
15278: PUSH
15279: LD_INT 114
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: PUSH
15297: EMPTY
15298: LIST
15299: LIST
15300: ST_TO_ADDR
15301: GO 17088
15303: LD_INT 11
15305: DOUBLE
15306: EQUAL
15307: IFTRUE 15311
15309: GO 15503
15311: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
15312: LD_ADDR_VAR 0 1
15316: PUSH
15317: LD_INT 2
15319: PUSH
15320: LD_INT 3
15322: PUSH
15323: LD_INT 4
15325: PUSH
15326: LD_INT 5
15328: PUSH
15329: LD_INT 6
15331: PUSH
15332: LD_INT 7
15334: PUSH
15335: LD_INT 8
15337: PUSH
15338: LD_INT 9
15340: PUSH
15341: LD_INT 10
15343: PUSH
15344: LD_INT 11
15346: PUSH
15347: LD_INT 12
15349: PUSH
15350: LD_INT 13
15352: PUSH
15353: LD_INT 14
15355: PUSH
15356: LD_INT 15
15358: PUSH
15359: LD_INT 16
15361: PUSH
15362: LD_INT 17
15364: PUSH
15365: LD_INT 18
15367: PUSH
15368: LD_INT 19
15370: PUSH
15371: LD_INT 20
15373: PUSH
15374: LD_INT 21
15376: PUSH
15377: LD_INT 22
15379: PUSH
15380: LD_INT 23
15382: PUSH
15383: LD_INT 24
15385: PUSH
15386: LD_INT 25
15388: PUSH
15389: LD_INT 26
15391: PUSH
15392: LD_INT 28
15394: PUSH
15395: LD_INT 30
15397: PUSH
15398: LD_INT 31
15400: PUSH
15401: LD_INT 32
15403: PUSH
15404: LD_INT 34
15406: PUSH
15407: LD_INT 36
15409: PUSH
15410: EMPTY
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: PUSH
15443: LD_INT 101
15445: PUSH
15446: LD_INT 102
15448: PUSH
15449: LD_INT 103
15451: PUSH
15452: LD_INT 104
15454: PUSH
15455: LD_INT 105
15457: PUSH
15458: LD_INT 106
15460: PUSH
15461: LD_INT 107
15463: PUSH
15464: LD_INT 108
15466: PUSH
15467: LD_INT 109
15469: PUSH
15470: LD_INT 110
15472: PUSH
15473: LD_INT 111
15475: PUSH
15476: LD_INT 112
15478: PUSH
15479: LD_INT 114
15481: PUSH
15482: EMPTY
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: ST_TO_ADDR
15501: GO 17088
15503: LD_INT 12
15505: DOUBLE
15506: EQUAL
15507: IFTRUE 15511
15509: GO 15719
15511: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
15512: LD_ADDR_VAR 0 1
15516: PUSH
15517: LD_INT 1
15519: PUSH
15520: LD_INT 2
15522: PUSH
15523: LD_INT 3
15525: PUSH
15526: LD_INT 4
15528: PUSH
15529: LD_INT 5
15531: PUSH
15532: LD_INT 6
15534: PUSH
15535: LD_INT 7
15537: PUSH
15538: LD_INT 8
15540: PUSH
15541: LD_INT 9
15543: PUSH
15544: LD_INT 10
15546: PUSH
15547: LD_INT 11
15549: PUSH
15550: LD_INT 12
15552: PUSH
15553: LD_INT 13
15555: PUSH
15556: LD_INT 14
15558: PUSH
15559: LD_INT 15
15561: PUSH
15562: LD_INT 16
15564: PUSH
15565: LD_INT 17
15567: PUSH
15568: LD_INT 18
15570: PUSH
15571: LD_INT 19
15573: PUSH
15574: LD_INT 20
15576: PUSH
15577: LD_INT 21
15579: PUSH
15580: LD_INT 22
15582: PUSH
15583: LD_INT 23
15585: PUSH
15586: LD_INT 24
15588: PUSH
15589: LD_INT 25
15591: PUSH
15592: LD_INT 26
15594: PUSH
15595: LD_INT 27
15597: PUSH
15598: LD_INT 28
15600: PUSH
15601: LD_INT 30
15603: PUSH
15604: LD_INT 31
15606: PUSH
15607: LD_INT 32
15609: PUSH
15610: LD_INT 33
15612: PUSH
15613: LD_INT 34
15615: PUSH
15616: LD_INT 36
15618: PUSH
15619: EMPTY
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: PUSH
15655: LD_INT 101
15657: PUSH
15658: LD_INT 102
15660: PUSH
15661: LD_INT 103
15663: PUSH
15664: LD_INT 104
15666: PUSH
15667: LD_INT 105
15669: PUSH
15670: LD_INT 106
15672: PUSH
15673: LD_INT 107
15675: PUSH
15676: LD_INT 108
15678: PUSH
15679: LD_INT 109
15681: PUSH
15682: LD_INT 110
15684: PUSH
15685: LD_INT 111
15687: PUSH
15688: LD_INT 112
15690: PUSH
15691: LD_INT 113
15693: PUSH
15694: LD_INT 114
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: LIST
15701: LIST
15702: LIST
15703: LIST
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: PUSH
15713: EMPTY
15714: LIST
15715: LIST
15716: ST_TO_ADDR
15717: GO 17088
15719: LD_INT 13
15721: DOUBLE
15722: EQUAL
15723: IFTRUE 15727
15725: GO 15923
15727: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
15728: LD_ADDR_VAR 0 1
15732: PUSH
15733: LD_INT 1
15735: PUSH
15736: LD_INT 2
15738: PUSH
15739: LD_INT 3
15741: PUSH
15742: LD_INT 4
15744: PUSH
15745: LD_INT 5
15747: PUSH
15748: LD_INT 8
15750: PUSH
15751: LD_INT 9
15753: PUSH
15754: LD_INT 10
15756: PUSH
15757: LD_INT 11
15759: PUSH
15760: LD_INT 12
15762: PUSH
15763: LD_INT 14
15765: PUSH
15766: LD_INT 15
15768: PUSH
15769: LD_INT 16
15771: PUSH
15772: LD_INT 17
15774: PUSH
15775: LD_INT 18
15777: PUSH
15778: LD_INT 19
15780: PUSH
15781: LD_INT 20
15783: PUSH
15784: LD_INT 21
15786: PUSH
15787: LD_INT 22
15789: PUSH
15790: LD_INT 23
15792: PUSH
15793: LD_INT 24
15795: PUSH
15796: LD_INT 25
15798: PUSH
15799: LD_INT 26
15801: PUSH
15802: LD_INT 27
15804: PUSH
15805: LD_INT 28
15807: PUSH
15808: LD_INT 30
15810: PUSH
15811: LD_INT 31
15813: PUSH
15814: LD_INT 32
15816: PUSH
15817: LD_INT 33
15819: PUSH
15820: LD_INT 34
15822: PUSH
15823: LD_INT 36
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: PUSH
15859: LD_INT 101
15861: PUSH
15862: LD_INT 102
15864: PUSH
15865: LD_INT 103
15867: PUSH
15868: LD_INT 104
15870: PUSH
15871: LD_INT 105
15873: PUSH
15874: LD_INT 106
15876: PUSH
15877: LD_INT 107
15879: PUSH
15880: LD_INT 108
15882: PUSH
15883: LD_INT 109
15885: PUSH
15886: LD_INT 110
15888: PUSH
15889: LD_INT 111
15891: PUSH
15892: LD_INT 112
15894: PUSH
15895: LD_INT 113
15897: PUSH
15898: LD_INT 114
15900: PUSH
15901: EMPTY
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: PUSH
15917: EMPTY
15918: LIST
15919: LIST
15920: ST_TO_ADDR
15921: GO 17088
15923: LD_INT 14
15925: DOUBLE
15926: EQUAL
15927: IFTRUE 15931
15929: GO 16143
15931: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
15932: LD_ADDR_VAR 0 1
15936: PUSH
15937: LD_INT 1
15939: PUSH
15940: LD_INT 2
15942: PUSH
15943: LD_INT 3
15945: PUSH
15946: LD_INT 4
15948: PUSH
15949: LD_INT 5
15951: PUSH
15952: LD_INT 6
15954: PUSH
15955: LD_INT 7
15957: PUSH
15958: LD_INT 8
15960: PUSH
15961: LD_INT 9
15963: PUSH
15964: LD_INT 10
15966: PUSH
15967: LD_INT 11
15969: PUSH
15970: LD_INT 12
15972: PUSH
15973: LD_INT 13
15975: PUSH
15976: LD_INT 14
15978: PUSH
15979: LD_INT 15
15981: PUSH
15982: LD_INT 16
15984: PUSH
15985: LD_INT 17
15987: PUSH
15988: LD_INT 18
15990: PUSH
15991: LD_INT 19
15993: PUSH
15994: LD_INT 20
15996: PUSH
15997: LD_INT 21
15999: PUSH
16000: LD_INT 22
16002: PUSH
16003: LD_INT 23
16005: PUSH
16006: LD_INT 24
16008: PUSH
16009: LD_INT 25
16011: PUSH
16012: LD_INT 26
16014: PUSH
16015: LD_INT 27
16017: PUSH
16018: LD_INT 28
16020: PUSH
16021: LD_INT 29
16023: PUSH
16024: LD_INT 30
16026: PUSH
16027: LD_INT 31
16029: PUSH
16030: LD_INT 32
16032: PUSH
16033: LD_INT 33
16035: PUSH
16036: LD_INT 34
16038: PUSH
16039: LD_INT 36
16041: PUSH
16042: EMPTY
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: LIST
16053: LIST
16054: LIST
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: PUSH
16079: LD_INT 101
16081: PUSH
16082: LD_INT 102
16084: PUSH
16085: LD_INT 103
16087: PUSH
16088: LD_INT 104
16090: PUSH
16091: LD_INT 105
16093: PUSH
16094: LD_INT 106
16096: PUSH
16097: LD_INT 107
16099: PUSH
16100: LD_INT 108
16102: PUSH
16103: LD_INT 109
16105: PUSH
16106: LD_INT 110
16108: PUSH
16109: LD_INT 111
16111: PUSH
16112: LD_INT 112
16114: PUSH
16115: LD_INT 113
16117: PUSH
16118: LD_INT 114
16120: PUSH
16121: EMPTY
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: PUSH
16137: EMPTY
16138: LIST
16139: LIST
16140: ST_TO_ADDR
16141: GO 17088
16143: LD_INT 15
16145: DOUBLE
16146: EQUAL
16147: IFTRUE 16151
16149: GO 16363
16151: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
16152: LD_ADDR_VAR 0 1
16156: PUSH
16157: LD_INT 1
16159: PUSH
16160: LD_INT 2
16162: PUSH
16163: LD_INT 3
16165: PUSH
16166: LD_INT 4
16168: PUSH
16169: LD_INT 5
16171: PUSH
16172: LD_INT 6
16174: PUSH
16175: LD_INT 7
16177: PUSH
16178: LD_INT 8
16180: PUSH
16181: LD_INT 9
16183: PUSH
16184: LD_INT 10
16186: PUSH
16187: LD_INT 11
16189: PUSH
16190: LD_INT 12
16192: PUSH
16193: LD_INT 13
16195: PUSH
16196: LD_INT 14
16198: PUSH
16199: LD_INT 15
16201: PUSH
16202: LD_INT 16
16204: PUSH
16205: LD_INT 17
16207: PUSH
16208: LD_INT 18
16210: PUSH
16211: LD_INT 19
16213: PUSH
16214: LD_INT 20
16216: PUSH
16217: LD_INT 21
16219: PUSH
16220: LD_INT 22
16222: PUSH
16223: LD_INT 23
16225: PUSH
16226: LD_INT 24
16228: PUSH
16229: LD_INT 25
16231: PUSH
16232: LD_INT 26
16234: PUSH
16235: LD_INT 27
16237: PUSH
16238: LD_INT 28
16240: PUSH
16241: LD_INT 29
16243: PUSH
16244: LD_INT 30
16246: PUSH
16247: LD_INT 31
16249: PUSH
16250: LD_INT 32
16252: PUSH
16253: LD_INT 33
16255: PUSH
16256: LD_INT 34
16258: PUSH
16259: LD_INT 36
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: LIST
16268: LIST
16269: LIST
16270: LIST
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: LIST
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: LIST
16282: LIST
16283: LIST
16284: LIST
16285: LIST
16286: LIST
16287: LIST
16288: LIST
16289: LIST
16290: LIST
16291: LIST
16292: LIST
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: PUSH
16299: LD_INT 101
16301: PUSH
16302: LD_INT 102
16304: PUSH
16305: LD_INT 103
16307: PUSH
16308: LD_INT 104
16310: PUSH
16311: LD_INT 105
16313: PUSH
16314: LD_INT 106
16316: PUSH
16317: LD_INT 107
16319: PUSH
16320: LD_INT 108
16322: PUSH
16323: LD_INT 109
16325: PUSH
16326: LD_INT 110
16328: PUSH
16329: LD_INT 111
16331: PUSH
16332: LD_INT 112
16334: PUSH
16335: LD_INT 113
16337: PUSH
16338: LD_INT 114
16340: PUSH
16341: EMPTY
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: PUSH
16357: EMPTY
16358: LIST
16359: LIST
16360: ST_TO_ADDR
16361: GO 17088
16363: LD_INT 16
16365: DOUBLE
16366: EQUAL
16367: IFTRUE 16371
16369: GO 16495
16371: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
16372: LD_ADDR_VAR 0 1
16376: PUSH
16377: LD_INT 2
16379: PUSH
16380: LD_INT 4
16382: PUSH
16383: LD_INT 5
16385: PUSH
16386: LD_INT 7
16388: PUSH
16389: LD_INT 11
16391: PUSH
16392: LD_INT 12
16394: PUSH
16395: LD_INT 15
16397: PUSH
16398: LD_INT 16
16400: PUSH
16401: LD_INT 20
16403: PUSH
16404: LD_INT 21
16406: PUSH
16407: LD_INT 22
16409: PUSH
16410: LD_INT 23
16412: PUSH
16413: LD_INT 25
16415: PUSH
16416: LD_INT 26
16418: PUSH
16419: LD_INT 30
16421: PUSH
16422: LD_INT 31
16424: PUSH
16425: LD_INT 32
16427: PUSH
16428: LD_INT 33
16430: PUSH
16431: LD_INT 34
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: PUSH
16455: LD_INT 101
16457: PUSH
16458: LD_INT 102
16460: PUSH
16461: LD_INT 103
16463: PUSH
16464: LD_INT 106
16466: PUSH
16467: LD_INT 108
16469: PUSH
16470: LD_INT 112
16472: PUSH
16473: LD_INT 113
16475: PUSH
16476: LD_INT 114
16478: PUSH
16479: EMPTY
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: ST_TO_ADDR
16493: GO 17088
16495: LD_INT 17
16497: DOUBLE
16498: EQUAL
16499: IFTRUE 16503
16501: GO 16715
16503: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
16504: LD_ADDR_VAR 0 1
16508: PUSH
16509: LD_INT 1
16511: PUSH
16512: LD_INT 2
16514: PUSH
16515: LD_INT 3
16517: PUSH
16518: LD_INT 4
16520: PUSH
16521: LD_INT 5
16523: PUSH
16524: LD_INT 6
16526: PUSH
16527: LD_INT 7
16529: PUSH
16530: LD_INT 8
16532: PUSH
16533: LD_INT 9
16535: PUSH
16536: LD_INT 10
16538: PUSH
16539: LD_INT 11
16541: PUSH
16542: LD_INT 12
16544: PUSH
16545: LD_INT 13
16547: PUSH
16548: LD_INT 14
16550: PUSH
16551: LD_INT 15
16553: PUSH
16554: LD_INT 16
16556: PUSH
16557: LD_INT 17
16559: PUSH
16560: LD_INT 18
16562: PUSH
16563: LD_INT 19
16565: PUSH
16566: LD_INT 20
16568: PUSH
16569: LD_INT 21
16571: PUSH
16572: LD_INT 22
16574: PUSH
16575: LD_INT 23
16577: PUSH
16578: LD_INT 24
16580: PUSH
16581: LD_INT 25
16583: PUSH
16584: LD_INT 26
16586: PUSH
16587: LD_INT 27
16589: PUSH
16590: LD_INT 28
16592: PUSH
16593: LD_INT 29
16595: PUSH
16596: LD_INT 30
16598: PUSH
16599: LD_INT 31
16601: PUSH
16602: LD_INT 32
16604: PUSH
16605: LD_INT 33
16607: PUSH
16608: LD_INT 34
16610: PUSH
16611: LD_INT 36
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: LIST
16623: LIST
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: LIST
16632: LIST
16633: LIST
16634: LIST
16635: LIST
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: LIST
16641: LIST
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: LIST
16647: LIST
16648: LIST
16649: LIST
16650: PUSH
16651: LD_INT 101
16653: PUSH
16654: LD_INT 102
16656: PUSH
16657: LD_INT 103
16659: PUSH
16660: LD_INT 104
16662: PUSH
16663: LD_INT 105
16665: PUSH
16666: LD_INT 106
16668: PUSH
16669: LD_INT 107
16671: PUSH
16672: LD_INT 108
16674: PUSH
16675: LD_INT 109
16677: PUSH
16678: LD_INT 110
16680: PUSH
16681: LD_INT 111
16683: PUSH
16684: LD_INT 112
16686: PUSH
16687: LD_INT 113
16689: PUSH
16690: LD_INT 114
16692: PUSH
16693: EMPTY
16694: LIST
16695: LIST
16696: LIST
16697: LIST
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: LIST
16704: LIST
16705: LIST
16706: LIST
16707: LIST
16708: PUSH
16709: EMPTY
16710: LIST
16711: LIST
16712: ST_TO_ADDR
16713: GO 17088
16715: LD_INT 18
16717: DOUBLE
16718: EQUAL
16719: IFTRUE 16723
16721: GO 16859
16723: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
16724: LD_ADDR_VAR 0 1
16728: PUSH
16729: LD_INT 2
16731: PUSH
16732: LD_INT 4
16734: PUSH
16735: LD_INT 5
16737: PUSH
16738: LD_INT 7
16740: PUSH
16741: LD_INT 11
16743: PUSH
16744: LD_INT 12
16746: PUSH
16747: LD_INT 15
16749: PUSH
16750: LD_INT 16
16752: PUSH
16753: LD_INT 20
16755: PUSH
16756: LD_INT 21
16758: PUSH
16759: LD_INT 22
16761: PUSH
16762: LD_INT 23
16764: PUSH
16765: LD_INT 25
16767: PUSH
16768: LD_INT 26
16770: PUSH
16771: LD_INT 30
16773: PUSH
16774: LD_INT 31
16776: PUSH
16777: LD_INT 32
16779: PUSH
16780: LD_INT 33
16782: PUSH
16783: LD_INT 34
16785: PUSH
16786: LD_INT 35
16788: PUSH
16789: LD_INT 36
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: PUSH
16815: LD_INT 101
16817: PUSH
16818: LD_INT 102
16820: PUSH
16821: LD_INT 103
16823: PUSH
16824: LD_INT 106
16826: PUSH
16827: LD_INT 108
16829: PUSH
16830: LD_INT 112
16832: PUSH
16833: LD_INT 113
16835: PUSH
16836: LD_INT 114
16838: PUSH
16839: LD_INT 115
16841: PUSH
16842: EMPTY
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: LIST
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: ST_TO_ADDR
16857: GO 17088
16859: LD_INT 19
16861: DOUBLE
16862: EQUAL
16863: IFTRUE 16867
16865: GO 17087
16867: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
16868: LD_ADDR_VAR 0 1
16872: PUSH
16873: LD_INT 1
16875: PUSH
16876: LD_INT 2
16878: PUSH
16879: LD_INT 3
16881: PUSH
16882: LD_INT 4
16884: PUSH
16885: LD_INT 5
16887: PUSH
16888: LD_INT 6
16890: PUSH
16891: LD_INT 7
16893: PUSH
16894: LD_INT 8
16896: PUSH
16897: LD_INT 9
16899: PUSH
16900: LD_INT 10
16902: PUSH
16903: LD_INT 11
16905: PUSH
16906: LD_INT 12
16908: PUSH
16909: LD_INT 13
16911: PUSH
16912: LD_INT 14
16914: PUSH
16915: LD_INT 15
16917: PUSH
16918: LD_INT 16
16920: PUSH
16921: LD_INT 17
16923: PUSH
16924: LD_INT 18
16926: PUSH
16927: LD_INT 19
16929: PUSH
16930: LD_INT 20
16932: PUSH
16933: LD_INT 21
16935: PUSH
16936: LD_INT 22
16938: PUSH
16939: LD_INT 23
16941: PUSH
16942: LD_INT 24
16944: PUSH
16945: LD_INT 25
16947: PUSH
16948: LD_INT 26
16950: PUSH
16951: LD_INT 27
16953: PUSH
16954: LD_INT 28
16956: PUSH
16957: LD_INT 29
16959: PUSH
16960: LD_INT 30
16962: PUSH
16963: LD_INT 31
16965: PUSH
16966: LD_INT 32
16968: PUSH
16969: LD_INT 33
16971: PUSH
16972: LD_INT 34
16974: PUSH
16975: LD_INT 35
16977: PUSH
16978: LD_INT 36
16980: PUSH
16981: EMPTY
16982: LIST
16983: LIST
16984: LIST
16985: LIST
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: LIST
16997: LIST
16998: LIST
16999: LIST
17000: LIST
17001: LIST
17002: LIST
17003: LIST
17004: LIST
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: PUSH
17019: LD_INT 101
17021: PUSH
17022: LD_INT 102
17024: PUSH
17025: LD_INT 103
17027: PUSH
17028: LD_INT 104
17030: PUSH
17031: LD_INT 105
17033: PUSH
17034: LD_INT 106
17036: PUSH
17037: LD_INT 107
17039: PUSH
17040: LD_INT 108
17042: PUSH
17043: LD_INT 109
17045: PUSH
17046: LD_INT 110
17048: PUSH
17049: LD_INT 111
17051: PUSH
17052: LD_INT 112
17054: PUSH
17055: LD_INT 113
17057: PUSH
17058: LD_INT 114
17060: PUSH
17061: LD_INT 115
17063: PUSH
17064: EMPTY
17065: LIST
17066: LIST
17067: LIST
17068: LIST
17069: LIST
17070: LIST
17071: LIST
17072: LIST
17073: LIST
17074: LIST
17075: LIST
17076: LIST
17077: LIST
17078: LIST
17079: LIST
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: ST_TO_ADDR
17085: GO 17088
17087: POP
// end else
17088: GO 17307
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
17090: LD_ADDR_VAR 0 1
17094: PUSH
17095: LD_INT 1
17097: PUSH
17098: LD_INT 2
17100: PUSH
17101: LD_INT 3
17103: PUSH
17104: LD_INT 4
17106: PUSH
17107: LD_INT 5
17109: PUSH
17110: LD_INT 6
17112: PUSH
17113: LD_INT 7
17115: PUSH
17116: LD_INT 8
17118: PUSH
17119: LD_INT 9
17121: PUSH
17122: LD_INT 10
17124: PUSH
17125: LD_INT 11
17127: PUSH
17128: LD_INT 12
17130: PUSH
17131: LD_INT 13
17133: PUSH
17134: LD_INT 14
17136: PUSH
17137: LD_INT 15
17139: PUSH
17140: LD_INT 16
17142: PUSH
17143: LD_INT 17
17145: PUSH
17146: LD_INT 18
17148: PUSH
17149: LD_INT 19
17151: PUSH
17152: LD_INT 20
17154: PUSH
17155: LD_INT 21
17157: PUSH
17158: LD_INT 22
17160: PUSH
17161: LD_INT 23
17163: PUSH
17164: LD_INT 24
17166: PUSH
17167: LD_INT 25
17169: PUSH
17170: LD_INT 26
17172: PUSH
17173: LD_INT 27
17175: PUSH
17176: LD_INT 28
17178: PUSH
17179: LD_INT 29
17181: PUSH
17182: LD_INT 30
17184: PUSH
17185: LD_INT 31
17187: PUSH
17188: LD_INT 32
17190: PUSH
17191: LD_INT 33
17193: PUSH
17194: LD_INT 34
17196: PUSH
17197: LD_INT 35
17199: PUSH
17200: LD_INT 36
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: PUSH
17241: LD_INT 101
17243: PUSH
17244: LD_INT 102
17246: PUSH
17247: LD_INT 103
17249: PUSH
17250: LD_INT 104
17252: PUSH
17253: LD_INT 105
17255: PUSH
17256: LD_INT 106
17258: PUSH
17259: LD_INT 107
17261: PUSH
17262: LD_INT 108
17264: PUSH
17265: LD_INT 109
17267: PUSH
17268: LD_INT 110
17270: PUSH
17271: LD_INT 111
17273: PUSH
17274: LD_INT 112
17276: PUSH
17277: LD_INT 113
17279: PUSH
17280: LD_INT 114
17282: PUSH
17283: LD_INT 115
17285: PUSH
17286: EMPTY
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: LIST
17293: LIST
17294: LIST
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: LIST
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: ST_TO_ADDR
// if result then
17307: LD_VAR 0 1
17311: IFFALSE 17600
// begin normal :=  ;
17313: LD_ADDR_VAR 0 3
17317: PUSH
17318: LD_STRING 
17320: ST_TO_ADDR
// hardcore :=  ;
17321: LD_ADDR_VAR 0 4
17325: PUSH
17326: LD_STRING 
17328: ST_TO_ADDR
// for i = 1 to normalCounter do
17329: LD_ADDR_VAR 0 5
17333: PUSH
17334: DOUBLE
17335: LD_INT 1
17337: DEC
17338: ST_TO_ADDR
17339: LD_EXP 52
17343: PUSH
17344: FOR_TO
17345: IFFALSE 17446
// begin tmp := 0 ;
17347: LD_ADDR_VAR 0 2
17351: PUSH
17352: LD_STRING 0
17354: ST_TO_ADDR
// if result [ 1 ] then
17355: LD_VAR 0 1
17359: PUSH
17360: LD_INT 1
17362: ARRAY
17363: IFFALSE 17428
// if result [ 1 ] [ 1 ] = i then
17365: LD_VAR 0 1
17369: PUSH
17370: LD_INT 1
17372: ARRAY
17373: PUSH
17374: LD_INT 1
17376: ARRAY
17377: PUSH
17378: LD_VAR 0 5
17382: EQUAL
17383: IFFALSE 17428
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
17385: LD_ADDR_VAR 0 1
17389: PUSH
17390: LD_VAR 0 1
17394: PPUSH
17395: LD_INT 1
17397: PPUSH
17398: LD_VAR 0 1
17402: PUSH
17403: LD_INT 1
17405: ARRAY
17406: PPUSH
17407: LD_INT 1
17409: PPUSH
17410: CALL_OW 3
17414: PPUSH
17415: CALL_OW 1
17419: ST_TO_ADDR
// tmp := 1 ;
17420: LD_ADDR_VAR 0 2
17424: PUSH
17425: LD_STRING 1
17427: ST_TO_ADDR
// end ; normal := normal & tmp ;
17428: LD_ADDR_VAR 0 3
17432: PUSH
17433: LD_VAR 0 3
17437: PUSH
17438: LD_VAR 0 2
17442: STR
17443: ST_TO_ADDR
// end ;
17444: GO 17344
17446: POP
17447: POP
// for i = 1 to hardcoreCounter do
17448: LD_ADDR_VAR 0 5
17452: PUSH
17453: DOUBLE
17454: LD_INT 1
17456: DEC
17457: ST_TO_ADDR
17458: LD_EXP 53
17462: PUSH
17463: FOR_TO
17464: IFFALSE 17569
// begin tmp := 0 ;
17466: LD_ADDR_VAR 0 2
17470: PUSH
17471: LD_STRING 0
17473: ST_TO_ADDR
// if result [ 2 ] then
17474: LD_VAR 0 1
17478: PUSH
17479: LD_INT 2
17481: ARRAY
17482: IFFALSE 17551
// if result [ 2 ] [ 1 ] = 100 + i then
17484: LD_VAR 0 1
17488: PUSH
17489: LD_INT 2
17491: ARRAY
17492: PUSH
17493: LD_INT 1
17495: ARRAY
17496: PUSH
17497: LD_INT 100
17499: PUSH
17500: LD_VAR 0 5
17504: PLUS
17505: EQUAL
17506: IFFALSE 17551
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17508: LD_ADDR_VAR 0 1
17512: PUSH
17513: LD_VAR 0 1
17517: PPUSH
17518: LD_INT 2
17520: PPUSH
17521: LD_VAR 0 1
17525: PUSH
17526: LD_INT 2
17528: ARRAY
17529: PPUSH
17530: LD_INT 1
17532: PPUSH
17533: CALL_OW 3
17537: PPUSH
17538: CALL_OW 1
17542: ST_TO_ADDR
// tmp := 1 ;
17543: LD_ADDR_VAR 0 2
17547: PUSH
17548: LD_STRING 1
17550: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17551: LD_ADDR_VAR 0 4
17555: PUSH
17556: LD_VAR 0 4
17560: PUSH
17561: LD_VAR 0 2
17565: STR
17566: ST_TO_ADDR
// end ;
17567: GO 17463
17569: POP
17570: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
17571: LD_STRING getStreamItemsFromMission("
17573: PUSH
17574: LD_VAR 0 3
17578: STR
17579: PUSH
17580: LD_STRING ","
17582: STR
17583: PUSH
17584: LD_VAR 0 4
17588: STR
17589: PUSH
17590: LD_STRING ")
17592: STR
17593: PPUSH
17594: CALL_OW 559
// end else
17598: GO 17607
// ToLua ( getStreamItemsFromMission("","") ) ;
17600: LD_STRING getStreamItemsFromMission("","")
17602: PPUSH
17603: CALL_OW 559
// end ;
17607: LD_VAR 0 1
17611: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17612: LD_EXP 51
17616: PUSH
17617: LD_EXP 56
17621: AND
17622: IFFALSE 17746
17624: GO 17626
17626: DISABLE
17627: LD_INT 0
17629: PPUSH
17630: PPUSH
// begin enable ;
17631: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17632: LD_ADDR_VAR 0 2
17636: PUSH
17637: LD_INT 22
17639: PUSH
17640: LD_OWVAR 2
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: PUSH
17649: LD_INT 2
17651: PUSH
17652: LD_INT 34
17654: PUSH
17655: LD_INT 7
17657: PUSH
17658: EMPTY
17659: LIST
17660: LIST
17661: PUSH
17662: LD_INT 34
17664: PUSH
17665: LD_INT 45
17667: PUSH
17668: EMPTY
17669: LIST
17670: LIST
17671: PUSH
17672: LD_INT 34
17674: PUSH
17675: LD_INT 28
17677: PUSH
17678: EMPTY
17679: LIST
17680: LIST
17681: PUSH
17682: LD_INT 34
17684: PUSH
17685: LD_INT 47
17687: PUSH
17688: EMPTY
17689: LIST
17690: LIST
17691: PUSH
17692: EMPTY
17693: LIST
17694: LIST
17695: LIST
17696: LIST
17697: LIST
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: PPUSH
17703: CALL_OW 69
17707: ST_TO_ADDR
// if not tmp then
17708: LD_VAR 0 2
17712: NOT
17713: IFFALSE 17717
// exit ;
17715: GO 17746
// for i in tmp do
17717: LD_ADDR_VAR 0 1
17721: PUSH
17722: LD_VAR 0 2
17726: PUSH
17727: FOR_IN
17728: IFFALSE 17744
// begin SetLives ( i , 0 ) ;
17730: LD_VAR 0 1
17734: PPUSH
17735: LD_INT 0
17737: PPUSH
17738: CALL_OW 234
// end ;
17742: GO 17727
17744: POP
17745: POP
// end ;
17746: PPOPN 2
17748: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17749: LD_EXP 51
17753: PUSH
17754: LD_EXP 57
17758: AND
17759: IFFALSE 17843
17761: GO 17763
17763: DISABLE
17764: LD_INT 0
17766: PPUSH
17767: PPUSH
// begin enable ;
17768: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17769: LD_ADDR_VAR 0 2
17773: PUSH
17774: LD_INT 22
17776: PUSH
17777: LD_OWVAR 2
17781: PUSH
17782: EMPTY
17783: LIST
17784: LIST
17785: PUSH
17786: LD_INT 32
17788: PUSH
17789: LD_INT 3
17791: PUSH
17792: EMPTY
17793: LIST
17794: LIST
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: PPUSH
17800: CALL_OW 69
17804: ST_TO_ADDR
// if not tmp then
17805: LD_VAR 0 2
17809: NOT
17810: IFFALSE 17814
// exit ;
17812: GO 17843
// for i in tmp do
17814: LD_ADDR_VAR 0 1
17818: PUSH
17819: LD_VAR 0 2
17823: PUSH
17824: FOR_IN
17825: IFFALSE 17841
// begin SetLives ( i , 0 ) ;
17827: LD_VAR 0 1
17831: PPUSH
17832: LD_INT 0
17834: PPUSH
17835: CALL_OW 234
// end ;
17839: GO 17824
17841: POP
17842: POP
// end ;
17843: PPOPN 2
17845: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17846: LD_EXP 51
17850: PUSH
17851: LD_EXP 54
17855: AND
17856: IFFALSE 17949
17858: GO 17860
17860: DISABLE
17861: LD_INT 0
17863: PPUSH
// begin enable ;
17864: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17865: LD_ADDR_VAR 0 1
17869: PUSH
17870: LD_INT 22
17872: PUSH
17873: LD_OWVAR 2
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: PUSH
17882: LD_INT 2
17884: PUSH
17885: LD_INT 25
17887: PUSH
17888: LD_INT 5
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: PUSH
17895: LD_INT 25
17897: PUSH
17898: LD_INT 9
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: PUSH
17905: LD_INT 25
17907: PUSH
17908: LD_INT 8
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: LIST
17919: LIST
17920: PUSH
17921: EMPTY
17922: LIST
17923: LIST
17924: PPUSH
17925: CALL_OW 69
17929: PUSH
17930: FOR_IN
17931: IFFALSE 17947
// begin SetClass ( i , 1 ) ;
17933: LD_VAR 0 1
17937: PPUSH
17938: LD_INT 1
17940: PPUSH
17941: CALL_OW 336
// end ;
17945: GO 17930
17947: POP
17948: POP
// end ;
17949: PPOPN 1
17951: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17952: LD_EXP 51
17956: PUSH
17957: LD_EXP 55
17961: AND
17962: PUSH
17963: LD_OWVAR 65
17967: PUSH
17968: LD_INT 7
17970: LESS
17971: AND
17972: IFFALSE 17986
17974: GO 17976
17976: DISABLE
// begin enable ;
17977: ENABLE
// game_speed := 7 ;
17978: LD_ADDR_OWVAR 65
17982: PUSH
17983: LD_INT 7
17985: ST_TO_ADDR
// end ;
17986: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17987: LD_EXP 51
17991: PUSH
17992: LD_EXP 58
17996: AND
17997: IFFALSE 18199
17999: GO 18001
18001: DISABLE
18002: LD_INT 0
18004: PPUSH
18005: PPUSH
18006: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18007: LD_ADDR_VAR 0 3
18011: PUSH
18012: LD_INT 81
18014: PUSH
18015: LD_OWVAR 2
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: PUSH
18024: LD_INT 21
18026: PUSH
18027: LD_INT 1
18029: PUSH
18030: EMPTY
18031: LIST
18032: LIST
18033: PUSH
18034: EMPTY
18035: LIST
18036: LIST
18037: PPUSH
18038: CALL_OW 69
18042: ST_TO_ADDR
// if not tmp then
18043: LD_VAR 0 3
18047: NOT
18048: IFFALSE 18052
// exit ;
18050: GO 18199
// if tmp > 5 then
18052: LD_VAR 0 3
18056: PUSH
18057: LD_INT 5
18059: GREATER
18060: IFFALSE 18072
// k := 5 else
18062: LD_ADDR_VAR 0 2
18066: PUSH
18067: LD_INT 5
18069: ST_TO_ADDR
18070: GO 18082
// k := tmp ;
18072: LD_ADDR_VAR 0 2
18076: PUSH
18077: LD_VAR 0 3
18081: ST_TO_ADDR
// for i := 1 to k do
18082: LD_ADDR_VAR 0 1
18086: PUSH
18087: DOUBLE
18088: LD_INT 1
18090: DEC
18091: ST_TO_ADDR
18092: LD_VAR 0 2
18096: PUSH
18097: FOR_TO
18098: IFFALSE 18197
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
18100: LD_VAR 0 3
18104: PUSH
18105: LD_VAR 0 1
18109: ARRAY
18110: PPUSH
18111: LD_VAR 0 1
18115: PUSH
18116: LD_INT 4
18118: MOD
18119: PUSH
18120: LD_INT 1
18122: PLUS
18123: PPUSH
18124: CALL_OW 259
18128: PUSH
18129: LD_INT 10
18131: LESS
18132: IFFALSE 18195
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18134: LD_VAR 0 3
18138: PUSH
18139: LD_VAR 0 1
18143: ARRAY
18144: PPUSH
18145: LD_VAR 0 1
18149: PUSH
18150: LD_INT 4
18152: MOD
18153: PUSH
18154: LD_INT 1
18156: PLUS
18157: PPUSH
18158: LD_VAR 0 3
18162: PUSH
18163: LD_VAR 0 1
18167: ARRAY
18168: PPUSH
18169: LD_VAR 0 1
18173: PUSH
18174: LD_INT 4
18176: MOD
18177: PUSH
18178: LD_INT 1
18180: PLUS
18181: PPUSH
18182: CALL_OW 259
18186: PUSH
18187: LD_INT 1
18189: PLUS
18190: PPUSH
18191: CALL_OW 237
18195: GO 18097
18197: POP
18198: POP
// end ;
18199: PPOPN 3
18201: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18202: LD_EXP 51
18206: PUSH
18207: LD_EXP 59
18211: AND
18212: IFFALSE 18232
18214: GO 18216
18216: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18217: LD_INT 4
18219: PPUSH
18220: LD_OWVAR 2
18224: PPUSH
18225: LD_INT 0
18227: PPUSH
18228: CALL_OW 324
18232: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18233: LD_EXP 51
18237: PUSH
18238: LD_EXP 88
18242: AND
18243: IFFALSE 18263
18245: GO 18247
18247: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18248: LD_INT 19
18250: PPUSH
18251: LD_OWVAR 2
18255: PPUSH
18256: LD_INT 0
18258: PPUSH
18259: CALL_OW 324
18263: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18264: LD_EXP 51
18268: PUSH
18269: LD_EXP 60
18273: AND
18274: IFFALSE 18376
18276: GO 18278
18278: DISABLE
18279: LD_INT 0
18281: PPUSH
18282: PPUSH
// begin enable ;
18283: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18284: LD_ADDR_VAR 0 2
18288: PUSH
18289: LD_INT 22
18291: PUSH
18292: LD_OWVAR 2
18296: PUSH
18297: EMPTY
18298: LIST
18299: LIST
18300: PUSH
18301: LD_INT 2
18303: PUSH
18304: LD_INT 34
18306: PUSH
18307: LD_INT 11
18309: PUSH
18310: EMPTY
18311: LIST
18312: LIST
18313: PUSH
18314: LD_INT 34
18316: PUSH
18317: LD_INT 30
18319: PUSH
18320: EMPTY
18321: LIST
18322: LIST
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: LIST
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: PPUSH
18333: CALL_OW 69
18337: ST_TO_ADDR
// if not tmp then
18338: LD_VAR 0 2
18342: NOT
18343: IFFALSE 18347
// exit ;
18345: GO 18376
// for i in tmp do
18347: LD_ADDR_VAR 0 1
18351: PUSH
18352: LD_VAR 0 2
18356: PUSH
18357: FOR_IN
18358: IFFALSE 18374
// begin SetLives ( i , 0 ) ;
18360: LD_VAR 0 1
18364: PPUSH
18365: LD_INT 0
18367: PPUSH
18368: CALL_OW 234
// end ;
18372: GO 18357
18374: POP
18375: POP
// end ;
18376: PPOPN 2
18378: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18379: LD_EXP 51
18383: PUSH
18384: LD_EXP 61
18388: AND
18389: IFFALSE 18409
18391: GO 18393
18393: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18394: LD_INT 32
18396: PPUSH
18397: LD_OWVAR 2
18401: PPUSH
18402: LD_INT 0
18404: PPUSH
18405: CALL_OW 324
18409: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18410: LD_EXP 51
18414: PUSH
18415: LD_EXP 62
18419: AND
18420: IFFALSE 18601
18422: GO 18424
18424: DISABLE
18425: LD_INT 0
18427: PPUSH
18428: PPUSH
18429: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18430: LD_ADDR_VAR 0 2
18434: PUSH
18435: LD_INT 22
18437: PUSH
18438: LD_OWVAR 2
18442: PUSH
18443: EMPTY
18444: LIST
18445: LIST
18446: PUSH
18447: LD_INT 33
18449: PUSH
18450: LD_INT 3
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PPUSH
18461: CALL_OW 69
18465: ST_TO_ADDR
// if not tmp then
18466: LD_VAR 0 2
18470: NOT
18471: IFFALSE 18475
// exit ;
18473: GO 18601
// side := 0 ;
18475: LD_ADDR_VAR 0 3
18479: PUSH
18480: LD_INT 0
18482: ST_TO_ADDR
// for i := 1 to 8 do
18483: LD_ADDR_VAR 0 1
18487: PUSH
18488: DOUBLE
18489: LD_INT 1
18491: DEC
18492: ST_TO_ADDR
18493: LD_INT 8
18495: PUSH
18496: FOR_TO
18497: IFFALSE 18545
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18499: LD_OWVAR 2
18503: PUSH
18504: LD_VAR 0 1
18508: NONEQUAL
18509: PUSH
18510: LD_OWVAR 2
18514: PPUSH
18515: LD_VAR 0 1
18519: PPUSH
18520: CALL_OW 81
18524: PUSH
18525: LD_INT 2
18527: EQUAL
18528: AND
18529: IFFALSE 18543
// begin side := i ;
18531: LD_ADDR_VAR 0 3
18535: PUSH
18536: LD_VAR 0 1
18540: ST_TO_ADDR
// break ;
18541: GO 18545
// end ;
18543: GO 18496
18545: POP
18546: POP
// if not side then
18547: LD_VAR 0 3
18551: NOT
18552: IFFALSE 18556
// exit ;
18554: GO 18601
// for i := 1 to tmp do
18556: LD_ADDR_VAR 0 1
18560: PUSH
18561: DOUBLE
18562: LD_INT 1
18564: DEC
18565: ST_TO_ADDR
18566: LD_VAR 0 2
18570: PUSH
18571: FOR_TO
18572: IFFALSE 18599
// if Prob ( 60 ) then
18574: LD_INT 60
18576: PPUSH
18577: CALL_OW 13
18581: IFFALSE 18597
// SetSide ( i , side ) ;
18583: LD_VAR 0 1
18587: PPUSH
18588: LD_VAR 0 3
18592: PPUSH
18593: CALL_OW 235
18597: GO 18571
18599: POP
18600: POP
// end ;
18601: PPOPN 3
18603: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18604: LD_EXP 51
18608: PUSH
18609: LD_EXP 64
18613: AND
18614: IFFALSE 18733
18616: GO 18618
18618: DISABLE
18619: LD_INT 0
18621: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18622: LD_ADDR_VAR 0 1
18626: PUSH
18627: LD_INT 22
18629: PUSH
18630: LD_OWVAR 2
18634: PUSH
18635: EMPTY
18636: LIST
18637: LIST
18638: PUSH
18639: LD_INT 21
18641: PUSH
18642: LD_INT 1
18644: PUSH
18645: EMPTY
18646: LIST
18647: LIST
18648: PUSH
18649: LD_INT 3
18651: PUSH
18652: LD_INT 23
18654: PUSH
18655: LD_INT 0
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PUSH
18666: EMPTY
18667: LIST
18668: LIST
18669: LIST
18670: PPUSH
18671: CALL_OW 69
18675: PUSH
18676: FOR_IN
18677: IFFALSE 18731
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18679: LD_VAR 0 1
18683: PPUSH
18684: CALL_OW 257
18688: PUSH
18689: LD_INT 1
18691: PUSH
18692: LD_INT 2
18694: PUSH
18695: LD_INT 3
18697: PUSH
18698: LD_INT 4
18700: PUSH
18701: EMPTY
18702: LIST
18703: LIST
18704: LIST
18705: LIST
18706: IN
18707: IFFALSE 18729
// SetClass ( un , rand ( 1 , 4 ) ) ;
18709: LD_VAR 0 1
18713: PPUSH
18714: LD_INT 1
18716: PPUSH
18717: LD_INT 4
18719: PPUSH
18720: CALL_OW 12
18724: PPUSH
18725: CALL_OW 336
18729: GO 18676
18731: POP
18732: POP
// end ;
18733: PPOPN 1
18735: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18736: LD_EXP 51
18740: PUSH
18741: LD_EXP 63
18745: AND
18746: IFFALSE 18825
18748: GO 18750
18750: DISABLE
18751: LD_INT 0
18753: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18754: LD_ADDR_VAR 0 1
18758: PUSH
18759: LD_INT 22
18761: PUSH
18762: LD_OWVAR 2
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: PUSH
18771: LD_INT 21
18773: PUSH
18774: LD_INT 3
18776: PUSH
18777: EMPTY
18778: LIST
18779: LIST
18780: PUSH
18781: EMPTY
18782: LIST
18783: LIST
18784: PPUSH
18785: CALL_OW 69
18789: ST_TO_ADDR
// if not tmp then
18790: LD_VAR 0 1
18794: NOT
18795: IFFALSE 18799
// exit ;
18797: GO 18825
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18799: LD_VAR 0 1
18803: PUSH
18804: LD_INT 1
18806: PPUSH
18807: LD_VAR 0 1
18811: PPUSH
18812: CALL_OW 12
18816: ARRAY
18817: PPUSH
18818: LD_INT 100
18820: PPUSH
18821: CALL_OW 234
// end ;
18825: PPOPN 1
18827: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18828: LD_EXP 51
18832: PUSH
18833: LD_EXP 65
18837: AND
18838: IFFALSE 18936
18840: GO 18842
18842: DISABLE
18843: LD_INT 0
18845: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18846: LD_ADDR_VAR 0 1
18850: PUSH
18851: LD_INT 22
18853: PUSH
18854: LD_OWVAR 2
18858: PUSH
18859: EMPTY
18860: LIST
18861: LIST
18862: PUSH
18863: LD_INT 21
18865: PUSH
18866: LD_INT 1
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: PPUSH
18877: CALL_OW 69
18881: ST_TO_ADDR
// if not tmp then
18882: LD_VAR 0 1
18886: NOT
18887: IFFALSE 18891
// exit ;
18889: GO 18936
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18891: LD_VAR 0 1
18895: PUSH
18896: LD_INT 1
18898: PPUSH
18899: LD_VAR 0 1
18903: PPUSH
18904: CALL_OW 12
18908: ARRAY
18909: PPUSH
18910: LD_INT 1
18912: PPUSH
18913: LD_INT 4
18915: PPUSH
18916: CALL_OW 12
18920: PPUSH
18921: LD_INT 3000
18923: PPUSH
18924: LD_INT 9000
18926: PPUSH
18927: CALL_OW 12
18931: PPUSH
18932: CALL_OW 492
// end ;
18936: PPOPN 1
18938: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18939: LD_EXP 51
18943: PUSH
18944: LD_EXP 66
18948: AND
18949: IFFALSE 18969
18951: GO 18953
18953: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18954: LD_INT 1
18956: PPUSH
18957: LD_OWVAR 2
18961: PPUSH
18962: LD_INT 0
18964: PPUSH
18965: CALL_OW 324
18969: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18970: LD_EXP 51
18974: PUSH
18975: LD_EXP 67
18979: AND
18980: IFFALSE 19063
18982: GO 18984
18984: DISABLE
18985: LD_INT 0
18987: PPUSH
18988: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18989: LD_ADDR_VAR 0 2
18993: PUSH
18994: LD_INT 22
18996: PUSH
18997: LD_OWVAR 2
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: PUSH
19006: LD_INT 21
19008: PUSH
19009: LD_INT 3
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: PPUSH
19020: CALL_OW 69
19024: ST_TO_ADDR
// if not tmp then
19025: LD_VAR 0 2
19029: NOT
19030: IFFALSE 19034
// exit ;
19032: GO 19063
// for i in tmp do
19034: LD_ADDR_VAR 0 1
19038: PUSH
19039: LD_VAR 0 2
19043: PUSH
19044: FOR_IN
19045: IFFALSE 19061
// SetBLevel ( i , 10 ) ;
19047: LD_VAR 0 1
19051: PPUSH
19052: LD_INT 10
19054: PPUSH
19055: CALL_OW 241
19059: GO 19044
19061: POP
19062: POP
// end ;
19063: PPOPN 2
19065: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
19066: LD_EXP 51
19070: PUSH
19071: LD_EXP 68
19075: AND
19076: IFFALSE 19187
19078: GO 19080
19080: DISABLE
19081: LD_INT 0
19083: PPUSH
19084: PPUSH
19085: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19086: LD_ADDR_VAR 0 3
19090: PUSH
19091: LD_INT 22
19093: PUSH
19094: LD_OWVAR 2
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: PUSH
19103: LD_INT 25
19105: PUSH
19106: LD_INT 1
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: PPUSH
19117: CALL_OW 69
19121: ST_TO_ADDR
// if not tmp then
19122: LD_VAR 0 3
19126: NOT
19127: IFFALSE 19131
// exit ;
19129: GO 19187
// un := tmp [ rand ( 1 , tmp ) ] ;
19131: LD_ADDR_VAR 0 2
19135: PUSH
19136: LD_VAR 0 3
19140: PUSH
19141: LD_INT 1
19143: PPUSH
19144: LD_VAR 0 3
19148: PPUSH
19149: CALL_OW 12
19153: ARRAY
19154: ST_TO_ADDR
// if Crawls ( un ) then
19155: LD_VAR 0 2
19159: PPUSH
19160: CALL_OW 318
19164: IFFALSE 19175
// ComWalk ( un ) ;
19166: LD_VAR 0 2
19170: PPUSH
19171: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19175: LD_VAR 0 2
19179: PPUSH
19180: LD_INT 5
19182: PPUSH
19183: CALL_OW 336
// end ;
19187: PPOPN 3
19189: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
19190: LD_EXP 51
19194: PUSH
19195: LD_EXP 69
19199: AND
19200: PUSH
19201: LD_OWVAR 67
19205: PUSH
19206: LD_INT 3
19208: LESS
19209: AND
19210: IFFALSE 19229
19212: GO 19214
19214: DISABLE
// Difficulty := Difficulty + 1 ;
19215: LD_ADDR_OWVAR 67
19219: PUSH
19220: LD_OWVAR 67
19224: PUSH
19225: LD_INT 1
19227: PLUS
19228: ST_TO_ADDR
19229: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19230: LD_EXP 51
19234: PUSH
19235: LD_EXP 70
19239: AND
19240: IFFALSE 19343
19242: GO 19244
19244: DISABLE
19245: LD_INT 0
19247: PPUSH
// begin for i := 1 to 5 do
19248: LD_ADDR_VAR 0 1
19252: PUSH
19253: DOUBLE
19254: LD_INT 1
19256: DEC
19257: ST_TO_ADDR
19258: LD_INT 5
19260: PUSH
19261: FOR_TO
19262: IFFALSE 19341
// begin uc_nation := nation_nature ;
19264: LD_ADDR_OWVAR 21
19268: PUSH
19269: LD_INT 0
19271: ST_TO_ADDR
// uc_side := 0 ;
19272: LD_ADDR_OWVAR 20
19276: PUSH
19277: LD_INT 0
19279: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19280: LD_ADDR_OWVAR 29
19284: PUSH
19285: LD_INT 12
19287: PUSH
19288: LD_INT 12
19290: PUSH
19291: EMPTY
19292: LIST
19293: LIST
19294: ST_TO_ADDR
// hc_agressivity := 20 ;
19295: LD_ADDR_OWVAR 35
19299: PUSH
19300: LD_INT 20
19302: ST_TO_ADDR
// hc_class := class_tiger ;
19303: LD_ADDR_OWVAR 28
19307: PUSH
19308: LD_INT 14
19310: ST_TO_ADDR
// hc_gallery :=  ;
19311: LD_ADDR_OWVAR 33
19315: PUSH
19316: LD_STRING 
19318: ST_TO_ADDR
// hc_name :=  ;
19319: LD_ADDR_OWVAR 26
19323: PUSH
19324: LD_STRING 
19326: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19327: CALL_OW 44
19331: PPUSH
19332: LD_INT 0
19334: PPUSH
19335: CALL_OW 51
// end ;
19339: GO 19261
19341: POP
19342: POP
// end ;
19343: PPOPN 1
19345: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19346: LD_EXP 51
19350: PUSH
19351: LD_EXP 71
19355: AND
19356: IFFALSE 19365
19358: GO 19360
19360: DISABLE
// StreamSibBomb ;
19361: CALL 19366 0 0
19365: END
// export function StreamSibBomb ; var i , x , y ; begin
19366: LD_INT 0
19368: PPUSH
19369: PPUSH
19370: PPUSH
19371: PPUSH
// result := false ;
19372: LD_ADDR_VAR 0 1
19376: PUSH
19377: LD_INT 0
19379: ST_TO_ADDR
// for i := 1 to 16 do
19380: LD_ADDR_VAR 0 2
19384: PUSH
19385: DOUBLE
19386: LD_INT 1
19388: DEC
19389: ST_TO_ADDR
19390: LD_INT 16
19392: PUSH
19393: FOR_TO
19394: IFFALSE 19593
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19396: LD_ADDR_VAR 0 3
19400: PUSH
19401: LD_INT 10
19403: PUSH
19404: LD_INT 20
19406: PUSH
19407: LD_INT 30
19409: PUSH
19410: LD_INT 40
19412: PUSH
19413: LD_INT 50
19415: PUSH
19416: LD_INT 60
19418: PUSH
19419: LD_INT 70
19421: PUSH
19422: LD_INT 80
19424: PUSH
19425: LD_INT 90
19427: PUSH
19428: LD_INT 100
19430: PUSH
19431: LD_INT 110
19433: PUSH
19434: LD_INT 120
19436: PUSH
19437: LD_INT 130
19439: PUSH
19440: LD_INT 140
19442: PUSH
19443: LD_INT 150
19445: PUSH
19446: EMPTY
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: PUSH
19463: LD_INT 1
19465: PPUSH
19466: LD_INT 15
19468: PPUSH
19469: CALL_OW 12
19473: ARRAY
19474: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19475: LD_ADDR_VAR 0 4
19479: PUSH
19480: LD_INT 10
19482: PUSH
19483: LD_INT 20
19485: PUSH
19486: LD_INT 30
19488: PUSH
19489: LD_INT 40
19491: PUSH
19492: LD_INT 50
19494: PUSH
19495: LD_INT 60
19497: PUSH
19498: LD_INT 70
19500: PUSH
19501: LD_INT 80
19503: PUSH
19504: LD_INT 90
19506: PUSH
19507: LD_INT 100
19509: PUSH
19510: LD_INT 110
19512: PUSH
19513: LD_INT 120
19515: PUSH
19516: LD_INT 130
19518: PUSH
19519: LD_INT 140
19521: PUSH
19522: LD_INT 150
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: PUSH
19542: LD_INT 1
19544: PPUSH
19545: LD_INT 15
19547: PPUSH
19548: CALL_OW 12
19552: ARRAY
19553: ST_TO_ADDR
// if ValidHex ( x , y ) then
19554: LD_VAR 0 3
19558: PPUSH
19559: LD_VAR 0 4
19563: PPUSH
19564: CALL_OW 488
19568: IFFALSE 19591
// begin result := [ x , y ] ;
19570: LD_ADDR_VAR 0 1
19574: PUSH
19575: LD_VAR 0 3
19579: PUSH
19580: LD_VAR 0 4
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: ST_TO_ADDR
// break ;
19589: GO 19593
// end ; end ;
19591: GO 19393
19593: POP
19594: POP
// if result then
19595: LD_VAR 0 1
19599: IFFALSE 19659
// begin ToLua ( playSibBomb() ) ;
19601: LD_STRING playSibBomb()
19603: PPUSH
19604: CALL_OW 559
// wait ( 0 0$14 ) ;
19608: LD_INT 490
19610: PPUSH
19611: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19615: LD_VAR 0 1
19619: PUSH
19620: LD_INT 1
19622: ARRAY
19623: PPUSH
19624: LD_VAR 0 1
19628: PUSH
19629: LD_INT 2
19631: ARRAY
19632: PPUSH
19633: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19637: LD_VAR 0 1
19641: PUSH
19642: LD_INT 1
19644: ARRAY
19645: PPUSH
19646: LD_VAR 0 1
19650: PUSH
19651: LD_INT 2
19653: ARRAY
19654: PPUSH
19655: CALL_OW 429
// end ; end ;
19659: LD_VAR 0 1
19663: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19664: LD_EXP 51
19668: PUSH
19669: LD_EXP 73
19673: AND
19674: IFFALSE 19686
19676: GO 19678
19678: DISABLE
// YouLost (  ) ;
19679: LD_STRING 
19681: PPUSH
19682: CALL_OW 104
19686: END
// every 0 0$1 trigger StreamModeActive and sFog do
19687: LD_EXP 51
19691: PUSH
19692: LD_EXP 72
19696: AND
19697: IFFALSE 19711
19699: GO 19701
19701: DISABLE
// FogOff ( your_side ) ;
19702: LD_OWVAR 2
19706: PPUSH
19707: CALL_OW 344
19711: END
// every 0 0$1 trigger StreamModeActive and sSun do
19712: LD_EXP 51
19716: PUSH
19717: LD_EXP 74
19721: AND
19722: IFFALSE 19750
19724: GO 19726
19726: DISABLE
// begin solar_recharge_percent := 0 ;
19727: LD_ADDR_OWVAR 79
19731: PUSH
19732: LD_INT 0
19734: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19735: LD_INT 10500
19737: PPUSH
19738: CALL_OW 67
// solar_recharge_percent := 100 ;
19742: LD_ADDR_OWVAR 79
19746: PUSH
19747: LD_INT 100
19749: ST_TO_ADDR
// end ;
19750: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19751: LD_EXP 51
19755: PUSH
19756: LD_EXP 75
19760: AND
19761: IFFALSE 20000
19763: GO 19765
19765: DISABLE
19766: LD_INT 0
19768: PPUSH
19769: PPUSH
19770: PPUSH
// begin tmp := [ ] ;
19771: LD_ADDR_VAR 0 3
19775: PUSH
19776: EMPTY
19777: ST_TO_ADDR
// for i := 1 to 6 do
19778: LD_ADDR_VAR 0 1
19782: PUSH
19783: DOUBLE
19784: LD_INT 1
19786: DEC
19787: ST_TO_ADDR
19788: LD_INT 6
19790: PUSH
19791: FOR_TO
19792: IFFALSE 19897
// begin uc_nation := nation_nature ;
19794: LD_ADDR_OWVAR 21
19798: PUSH
19799: LD_INT 0
19801: ST_TO_ADDR
// uc_side := 0 ;
19802: LD_ADDR_OWVAR 20
19806: PUSH
19807: LD_INT 0
19809: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19810: LD_ADDR_OWVAR 29
19814: PUSH
19815: LD_INT 12
19817: PUSH
19818: LD_INT 12
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: ST_TO_ADDR
// hc_agressivity := 20 ;
19825: LD_ADDR_OWVAR 35
19829: PUSH
19830: LD_INT 20
19832: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19833: LD_ADDR_OWVAR 28
19837: PUSH
19838: LD_INT 17
19840: ST_TO_ADDR
// hc_gallery :=  ;
19841: LD_ADDR_OWVAR 33
19845: PUSH
19846: LD_STRING 
19848: ST_TO_ADDR
// hc_name :=  ;
19849: LD_ADDR_OWVAR 26
19853: PUSH
19854: LD_STRING 
19856: ST_TO_ADDR
// un := CreateHuman ;
19857: LD_ADDR_VAR 0 2
19861: PUSH
19862: CALL_OW 44
19866: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19867: LD_VAR 0 2
19871: PPUSH
19872: LD_INT 1
19874: PPUSH
19875: CALL_OW 51
// tmp := tmp ^ un ;
19879: LD_ADDR_VAR 0 3
19883: PUSH
19884: LD_VAR 0 3
19888: PUSH
19889: LD_VAR 0 2
19893: ADD
19894: ST_TO_ADDR
// end ;
19895: GO 19791
19897: POP
19898: POP
// repeat wait ( 0 0$1 ) ;
19899: LD_INT 35
19901: PPUSH
19902: CALL_OW 67
// for un in tmp do
19906: LD_ADDR_VAR 0 2
19910: PUSH
19911: LD_VAR 0 3
19915: PUSH
19916: FOR_IN
19917: IFFALSE 19991
// begin if IsDead ( un ) then
19919: LD_VAR 0 2
19923: PPUSH
19924: CALL_OW 301
19928: IFFALSE 19948
// begin tmp := tmp diff un ;
19930: LD_ADDR_VAR 0 3
19934: PUSH
19935: LD_VAR 0 3
19939: PUSH
19940: LD_VAR 0 2
19944: DIFF
19945: ST_TO_ADDR
// continue ;
19946: GO 19916
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19948: LD_VAR 0 2
19952: PPUSH
19953: LD_INT 3
19955: PUSH
19956: LD_INT 22
19958: PUSH
19959: LD_INT 0
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: PUSH
19966: EMPTY
19967: LIST
19968: LIST
19969: PPUSH
19970: CALL_OW 69
19974: PPUSH
19975: LD_VAR 0 2
19979: PPUSH
19980: CALL_OW 74
19984: PPUSH
19985: CALL_OW 115
// end ;
19989: GO 19916
19991: POP
19992: POP
// until not tmp ;
19993: LD_VAR 0 3
19997: NOT
19998: IFFALSE 19899
// end ;
20000: PPOPN 3
20002: END
// every 0 0$1 trigger StreamModeActive and sTroll do
20003: LD_EXP 51
20007: PUSH
20008: LD_EXP 76
20012: AND
20013: IFFALSE 20067
20015: GO 20017
20017: DISABLE
// begin ToLua ( displayTroll(); ) ;
20018: LD_STRING displayTroll();
20020: PPUSH
20021: CALL_OW 559
// wait ( 3 3$00 ) ;
20025: LD_INT 6300
20027: PPUSH
20028: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20032: LD_STRING hideTroll();
20034: PPUSH
20035: CALL_OW 559
// wait ( 1 1$00 ) ;
20039: LD_INT 2100
20041: PPUSH
20042: CALL_OW 67
// ToLua ( displayTroll(); ) ;
20046: LD_STRING displayTroll();
20048: PPUSH
20049: CALL_OW 559
// wait ( 1 1$00 ) ;
20053: LD_INT 2100
20055: PPUSH
20056: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20060: LD_STRING hideTroll();
20062: PPUSH
20063: CALL_OW 559
// end ;
20067: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
20068: LD_EXP 51
20072: PUSH
20073: LD_EXP 77
20077: AND
20078: IFFALSE 20141
20080: GO 20082
20082: DISABLE
20083: LD_INT 0
20085: PPUSH
// begin p := 0 ;
20086: LD_ADDR_VAR 0 1
20090: PUSH
20091: LD_INT 0
20093: ST_TO_ADDR
// repeat game_speed := 1 ;
20094: LD_ADDR_OWVAR 65
20098: PUSH
20099: LD_INT 1
20101: ST_TO_ADDR
// wait ( 0 0$1 ) ;
20102: LD_INT 35
20104: PPUSH
20105: CALL_OW 67
// p := p + 1 ;
20109: LD_ADDR_VAR 0 1
20113: PUSH
20114: LD_VAR 0 1
20118: PUSH
20119: LD_INT 1
20121: PLUS
20122: ST_TO_ADDR
// until p >= 60 ;
20123: LD_VAR 0 1
20127: PUSH
20128: LD_INT 60
20130: GREATEREQUAL
20131: IFFALSE 20094
// game_speed := 4 ;
20133: LD_ADDR_OWVAR 65
20137: PUSH
20138: LD_INT 4
20140: ST_TO_ADDR
// end ;
20141: PPOPN 1
20143: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20144: LD_EXP 51
20148: PUSH
20149: LD_EXP 78
20153: AND
20154: IFFALSE 20300
20156: GO 20158
20158: DISABLE
20159: LD_INT 0
20161: PPUSH
20162: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20163: LD_ADDR_VAR 0 1
20167: PUSH
20168: LD_INT 22
20170: PUSH
20171: LD_OWVAR 2
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: PUSH
20180: LD_INT 2
20182: PUSH
20183: LD_INT 30
20185: PUSH
20186: LD_INT 0
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: PUSH
20193: LD_INT 30
20195: PUSH
20196: LD_INT 1
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: PUSH
20203: EMPTY
20204: LIST
20205: LIST
20206: LIST
20207: PUSH
20208: EMPTY
20209: LIST
20210: LIST
20211: PPUSH
20212: CALL_OW 69
20216: ST_TO_ADDR
// if not depot then
20217: LD_VAR 0 1
20221: NOT
20222: IFFALSE 20226
// exit ;
20224: GO 20300
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20226: LD_ADDR_VAR 0 2
20230: PUSH
20231: LD_VAR 0 1
20235: PUSH
20236: LD_INT 1
20238: PPUSH
20239: LD_VAR 0 1
20243: PPUSH
20244: CALL_OW 12
20248: ARRAY
20249: PPUSH
20250: CALL_OW 274
20254: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20255: LD_VAR 0 2
20259: PPUSH
20260: LD_INT 1
20262: PPUSH
20263: LD_INT 0
20265: PPUSH
20266: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20270: LD_VAR 0 2
20274: PPUSH
20275: LD_INT 2
20277: PPUSH
20278: LD_INT 0
20280: PPUSH
20281: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20285: LD_VAR 0 2
20289: PPUSH
20290: LD_INT 3
20292: PPUSH
20293: LD_INT 0
20295: PPUSH
20296: CALL_OW 277
// end ;
20300: PPOPN 2
20302: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20303: LD_EXP 51
20307: PUSH
20308: LD_EXP 79
20312: AND
20313: IFFALSE 20410
20315: GO 20317
20317: DISABLE
20318: LD_INT 0
20320: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20321: LD_ADDR_VAR 0 1
20325: PUSH
20326: LD_INT 22
20328: PUSH
20329: LD_OWVAR 2
20333: PUSH
20334: EMPTY
20335: LIST
20336: LIST
20337: PUSH
20338: LD_INT 21
20340: PUSH
20341: LD_INT 1
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: PUSH
20348: LD_INT 3
20350: PUSH
20351: LD_INT 23
20353: PUSH
20354: LD_INT 0
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: PUSH
20361: EMPTY
20362: LIST
20363: LIST
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: LIST
20369: PPUSH
20370: CALL_OW 69
20374: ST_TO_ADDR
// if not tmp then
20375: LD_VAR 0 1
20379: NOT
20380: IFFALSE 20384
// exit ;
20382: GO 20410
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20384: LD_VAR 0 1
20388: PUSH
20389: LD_INT 1
20391: PPUSH
20392: LD_VAR 0 1
20396: PPUSH
20397: CALL_OW 12
20401: ARRAY
20402: PPUSH
20403: LD_INT 200
20405: PPUSH
20406: CALL_OW 234
// end ;
20410: PPOPN 1
20412: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20413: LD_EXP 51
20417: PUSH
20418: LD_EXP 80
20422: AND
20423: IFFALSE 20502
20425: GO 20427
20427: DISABLE
20428: LD_INT 0
20430: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20431: LD_ADDR_VAR 0 1
20435: PUSH
20436: LD_INT 22
20438: PUSH
20439: LD_OWVAR 2
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: PUSH
20448: LD_INT 21
20450: PUSH
20451: LD_INT 2
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: PUSH
20458: EMPTY
20459: LIST
20460: LIST
20461: PPUSH
20462: CALL_OW 69
20466: ST_TO_ADDR
// if not tmp then
20467: LD_VAR 0 1
20471: NOT
20472: IFFALSE 20476
// exit ;
20474: GO 20502
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20476: LD_VAR 0 1
20480: PUSH
20481: LD_INT 1
20483: PPUSH
20484: LD_VAR 0 1
20488: PPUSH
20489: CALL_OW 12
20493: ARRAY
20494: PPUSH
20495: LD_INT 60
20497: PPUSH
20498: CALL_OW 234
// end ;
20502: PPOPN 1
20504: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20505: LD_EXP 51
20509: PUSH
20510: LD_EXP 81
20514: AND
20515: IFFALSE 20614
20517: GO 20519
20519: DISABLE
20520: LD_INT 0
20522: PPUSH
20523: PPUSH
// begin enable ;
20524: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20525: LD_ADDR_VAR 0 1
20529: PUSH
20530: LD_INT 22
20532: PUSH
20533: LD_OWVAR 2
20537: PUSH
20538: EMPTY
20539: LIST
20540: LIST
20541: PUSH
20542: LD_INT 61
20544: PUSH
20545: EMPTY
20546: LIST
20547: PUSH
20548: LD_INT 33
20550: PUSH
20551: LD_INT 2
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: LIST
20562: PPUSH
20563: CALL_OW 69
20567: ST_TO_ADDR
// if not tmp then
20568: LD_VAR 0 1
20572: NOT
20573: IFFALSE 20577
// exit ;
20575: GO 20614
// for i in tmp do
20577: LD_ADDR_VAR 0 2
20581: PUSH
20582: LD_VAR 0 1
20586: PUSH
20587: FOR_IN
20588: IFFALSE 20612
// if IsControledBy ( i ) then
20590: LD_VAR 0 2
20594: PPUSH
20595: CALL_OW 312
20599: IFFALSE 20610
// ComUnlink ( i ) ;
20601: LD_VAR 0 2
20605: PPUSH
20606: CALL_OW 136
20610: GO 20587
20612: POP
20613: POP
// end ;
20614: PPOPN 2
20616: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20617: LD_EXP 51
20621: PUSH
20622: LD_EXP 82
20626: AND
20627: IFFALSE 20767
20629: GO 20631
20631: DISABLE
20632: LD_INT 0
20634: PPUSH
20635: PPUSH
// begin ToLua ( displayPowell(); ) ;
20636: LD_STRING displayPowell();
20638: PPUSH
20639: CALL_OW 559
// uc_side := 0 ;
20643: LD_ADDR_OWVAR 20
20647: PUSH
20648: LD_INT 0
20650: ST_TO_ADDR
// uc_nation := 2 ;
20651: LD_ADDR_OWVAR 21
20655: PUSH
20656: LD_INT 2
20658: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20659: LD_ADDR_OWVAR 37
20663: PUSH
20664: LD_INT 14
20666: ST_TO_ADDR
// vc_engine := engine_siberite ;
20667: LD_ADDR_OWVAR 39
20671: PUSH
20672: LD_INT 3
20674: ST_TO_ADDR
// vc_control := control_apeman ;
20675: LD_ADDR_OWVAR 38
20679: PUSH
20680: LD_INT 5
20682: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20683: LD_ADDR_OWVAR 40
20687: PUSH
20688: LD_INT 29
20690: ST_TO_ADDR
// un := CreateVehicle ;
20691: LD_ADDR_VAR 0 2
20695: PUSH
20696: CALL_OW 45
20700: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20701: LD_VAR 0 2
20705: PPUSH
20706: LD_INT 1
20708: PPUSH
20709: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20713: LD_INT 35
20715: PPUSH
20716: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20720: LD_VAR 0 2
20724: PPUSH
20725: LD_INT 22
20727: PUSH
20728: LD_OWVAR 2
20732: PUSH
20733: EMPTY
20734: LIST
20735: LIST
20736: PPUSH
20737: CALL_OW 69
20741: PPUSH
20742: LD_VAR 0 2
20746: PPUSH
20747: CALL_OW 74
20751: PPUSH
20752: CALL_OW 115
// until IsDead ( un ) ;
20756: LD_VAR 0 2
20760: PPUSH
20761: CALL_OW 301
20765: IFFALSE 20713
// end ;
20767: PPOPN 2
20769: END
// every 0 0$1 trigger StreamModeActive and sStu do
20770: LD_EXP 51
20774: PUSH
20775: LD_EXP 90
20779: AND
20780: IFFALSE 20796
20782: GO 20784
20784: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20785: LD_STRING displayStucuk();
20787: PPUSH
20788: CALL_OW 559
// ResetFog ;
20792: CALL_OW 335
// end ;
20796: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20797: LD_EXP 51
20801: PUSH
20802: LD_EXP 83
20806: AND
20807: IFFALSE 20948
20809: GO 20811
20811: DISABLE
20812: LD_INT 0
20814: PPUSH
20815: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20816: LD_ADDR_VAR 0 2
20820: PUSH
20821: LD_INT 22
20823: PUSH
20824: LD_OWVAR 2
20828: PUSH
20829: EMPTY
20830: LIST
20831: LIST
20832: PUSH
20833: LD_INT 21
20835: PUSH
20836: LD_INT 1
20838: PUSH
20839: EMPTY
20840: LIST
20841: LIST
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: PPUSH
20847: CALL_OW 69
20851: ST_TO_ADDR
// if not tmp then
20852: LD_VAR 0 2
20856: NOT
20857: IFFALSE 20861
// exit ;
20859: GO 20948
// un := tmp [ rand ( 1 , tmp ) ] ;
20861: LD_ADDR_VAR 0 1
20865: PUSH
20866: LD_VAR 0 2
20870: PUSH
20871: LD_INT 1
20873: PPUSH
20874: LD_VAR 0 2
20878: PPUSH
20879: CALL_OW 12
20883: ARRAY
20884: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20885: LD_VAR 0 1
20889: PPUSH
20890: LD_INT 0
20892: PPUSH
20893: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20897: LD_VAR 0 1
20901: PPUSH
20902: LD_OWVAR 3
20906: PUSH
20907: LD_VAR 0 1
20911: DIFF
20912: PPUSH
20913: LD_VAR 0 1
20917: PPUSH
20918: CALL_OW 74
20922: PPUSH
20923: CALL_OW 115
// wait ( 0 0$20 ) ;
20927: LD_INT 700
20929: PPUSH
20930: CALL_OW 67
// SetSide ( un , your_side ) ;
20934: LD_VAR 0 1
20938: PPUSH
20939: LD_OWVAR 2
20943: PPUSH
20944: CALL_OW 235
// end ;
20948: PPOPN 2
20950: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20951: LD_EXP 51
20955: PUSH
20956: LD_EXP 84
20960: AND
20961: IFFALSE 21067
20963: GO 20965
20965: DISABLE
20966: LD_INT 0
20968: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20969: LD_ADDR_VAR 0 1
20973: PUSH
20974: LD_INT 22
20976: PUSH
20977: LD_OWVAR 2
20981: PUSH
20982: EMPTY
20983: LIST
20984: LIST
20985: PUSH
20986: LD_INT 2
20988: PUSH
20989: LD_INT 30
20991: PUSH
20992: LD_INT 0
20994: PUSH
20995: EMPTY
20996: LIST
20997: LIST
20998: PUSH
20999: LD_INT 30
21001: PUSH
21002: LD_INT 1
21004: PUSH
21005: EMPTY
21006: LIST
21007: LIST
21008: PUSH
21009: EMPTY
21010: LIST
21011: LIST
21012: LIST
21013: PUSH
21014: EMPTY
21015: LIST
21016: LIST
21017: PPUSH
21018: CALL_OW 69
21022: ST_TO_ADDR
// if not depot then
21023: LD_VAR 0 1
21027: NOT
21028: IFFALSE 21032
// exit ;
21030: GO 21067
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
21032: LD_VAR 0 1
21036: PUSH
21037: LD_INT 1
21039: ARRAY
21040: PPUSH
21041: CALL_OW 250
21045: PPUSH
21046: LD_VAR 0 1
21050: PUSH
21051: LD_INT 1
21053: ARRAY
21054: PPUSH
21055: CALL_OW 251
21059: PPUSH
21060: LD_INT 70
21062: PPUSH
21063: CALL_OW 495
// end ;
21067: PPOPN 1
21069: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
21070: LD_EXP 51
21074: PUSH
21075: LD_EXP 85
21079: AND
21080: IFFALSE 21291
21082: GO 21084
21084: DISABLE
21085: LD_INT 0
21087: PPUSH
21088: PPUSH
21089: PPUSH
21090: PPUSH
21091: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21092: LD_ADDR_VAR 0 5
21096: PUSH
21097: LD_INT 22
21099: PUSH
21100: LD_OWVAR 2
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PUSH
21109: LD_INT 21
21111: PUSH
21112: LD_INT 1
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: PPUSH
21123: CALL_OW 69
21127: ST_TO_ADDR
// if not tmp then
21128: LD_VAR 0 5
21132: NOT
21133: IFFALSE 21137
// exit ;
21135: GO 21291
// for i in tmp do
21137: LD_ADDR_VAR 0 1
21141: PUSH
21142: LD_VAR 0 5
21146: PUSH
21147: FOR_IN
21148: IFFALSE 21289
// begin d := rand ( 0 , 5 ) ;
21150: LD_ADDR_VAR 0 4
21154: PUSH
21155: LD_INT 0
21157: PPUSH
21158: LD_INT 5
21160: PPUSH
21161: CALL_OW 12
21165: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21166: LD_ADDR_VAR 0 2
21170: PUSH
21171: LD_VAR 0 1
21175: PPUSH
21176: CALL_OW 250
21180: PPUSH
21181: LD_VAR 0 4
21185: PPUSH
21186: LD_INT 3
21188: PPUSH
21189: LD_INT 12
21191: PPUSH
21192: CALL_OW 12
21196: PPUSH
21197: CALL_OW 272
21201: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21202: LD_ADDR_VAR 0 3
21206: PUSH
21207: LD_VAR 0 1
21211: PPUSH
21212: CALL_OW 251
21216: PPUSH
21217: LD_VAR 0 4
21221: PPUSH
21222: LD_INT 3
21224: PPUSH
21225: LD_INT 12
21227: PPUSH
21228: CALL_OW 12
21232: PPUSH
21233: CALL_OW 273
21237: ST_TO_ADDR
// if ValidHex ( x , y ) then
21238: LD_VAR 0 2
21242: PPUSH
21243: LD_VAR 0 3
21247: PPUSH
21248: CALL_OW 488
21252: IFFALSE 21287
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21254: LD_VAR 0 1
21258: PPUSH
21259: LD_VAR 0 2
21263: PPUSH
21264: LD_VAR 0 3
21268: PPUSH
21269: LD_INT 3
21271: PPUSH
21272: LD_INT 6
21274: PPUSH
21275: CALL_OW 12
21279: PPUSH
21280: LD_INT 1
21282: PPUSH
21283: CALL_OW 483
// end ;
21287: GO 21147
21289: POP
21290: POP
// end ;
21291: PPOPN 5
21293: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21294: LD_EXP 51
21298: PUSH
21299: LD_EXP 86
21303: AND
21304: IFFALSE 21398
21306: GO 21308
21308: DISABLE
21309: LD_INT 0
21311: PPUSH
21312: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21313: LD_ADDR_VAR 0 2
21317: PUSH
21318: LD_INT 22
21320: PUSH
21321: LD_OWVAR 2
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: PUSH
21330: LD_INT 32
21332: PUSH
21333: LD_INT 1
21335: PUSH
21336: EMPTY
21337: LIST
21338: LIST
21339: PUSH
21340: LD_INT 21
21342: PUSH
21343: LD_INT 2
21345: PUSH
21346: EMPTY
21347: LIST
21348: LIST
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: LIST
21354: PPUSH
21355: CALL_OW 69
21359: ST_TO_ADDR
// if not tmp then
21360: LD_VAR 0 2
21364: NOT
21365: IFFALSE 21369
// exit ;
21367: GO 21398
// for i in tmp do
21369: LD_ADDR_VAR 0 1
21373: PUSH
21374: LD_VAR 0 2
21378: PUSH
21379: FOR_IN
21380: IFFALSE 21396
// SetFuel ( i , 0 ) ;
21382: LD_VAR 0 1
21386: PPUSH
21387: LD_INT 0
21389: PPUSH
21390: CALL_OW 240
21394: GO 21379
21396: POP
21397: POP
// end ;
21398: PPOPN 2
21400: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21401: LD_EXP 51
21405: PUSH
21406: LD_EXP 87
21410: AND
21411: IFFALSE 21477
21413: GO 21415
21415: DISABLE
21416: LD_INT 0
21418: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21419: LD_ADDR_VAR 0 1
21423: PUSH
21424: LD_INT 22
21426: PUSH
21427: LD_OWVAR 2
21431: PUSH
21432: EMPTY
21433: LIST
21434: LIST
21435: PUSH
21436: LD_INT 30
21438: PUSH
21439: LD_INT 29
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: PPUSH
21450: CALL_OW 69
21454: ST_TO_ADDR
// if not tmp then
21455: LD_VAR 0 1
21459: NOT
21460: IFFALSE 21464
// exit ;
21462: GO 21477
// DestroyUnit ( tmp [ 1 ] ) ;
21464: LD_VAR 0 1
21468: PUSH
21469: LD_INT 1
21471: ARRAY
21472: PPUSH
21473: CALL_OW 65
// end ;
21477: PPOPN 1
21479: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21480: LD_EXP 51
21484: PUSH
21485: LD_EXP 89
21489: AND
21490: IFFALSE 21619
21492: GO 21494
21494: DISABLE
21495: LD_INT 0
21497: PPUSH
// begin uc_side := 0 ;
21498: LD_ADDR_OWVAR 20
21502: PUSH
21503: LD_INT 0
21505: ST_TO_ADDR
// uc_nation := nation_arabian ;
21506: LD_ADDR_OWVAR 21
21510: PUSH
21511: LD_INT 2
21513: ST_TO_ADDR
// hc_gallery :=  ;
21514: LD_ADDR_OWVAR 33
21518: PUSH
21519: LD_STRING 
21521: ST_TO_ADDR
// hc_name :=  ;
21522: LD_ADDR_OWVAR 26
21526: PUSH
21527: LD_STRING 
21529: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21530: LD_INT 1
21532: PPUSH
21533: LD_INT 11
21535: PPUSH
21536: LD_INT 10
21538: PPUSH
21539: CALL_OW 380
// un := CreateHuman ;
21543: LD_ADDR_VAR 0 1
21547: PUSH
21548: CALL_OW 44
21552: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21553: LD_VAR 0 1
21557: PPUSH
21558: LD_INT 1
21560: PPUSH
21561: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21565: LD_INT 35
21567: PPUSH
21568: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21572: LD_VAR 0 1
21576: PPUSH
21577: LD_INT 22
21579: PUSH
21580: LD_OWVAR 2
21584: PUSH
21585: EMPTY
21586: LIST
21587: LIST
21588: PPUSH
21589: CALL_OW 69
21593: PPUSH
21594: LD_VAR 0 1
21598: PPUSH
21599: CALL_OW 74
21603: PPUSH
21604: CALL_OW 115
// until IsDead ( un ) ;
21608: LD_VAR 0 1
21612: PPUSH
21613: CALL_OW 301
21617: IFFALSE 21565
// end ;
21619: PPOPN 1
21621: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21622: LD_EXP 51
21626: PUSH
21627: LD_EXP 91
21631: AND
21632: IFFALSE 21644
21634: GO 21636
21636: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21637: LD_STRING earthquake(getX(game), 0, 32)
21639: PPUSH
21640: CALL_OW 559
21644: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21645: LD_EXP 51
21649: PUSH
21650: LD_EXP 92
21654: AND
21655: IFFALSE 21746
21657: GO 21659
21659: DISABLE
21660: LD_INT 0
21662: PPUSH
// begin enable ;
21663: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21664: LD_ADDR_VAR 0 1
21668: PUSH
21669: LD_INT 22
21671: PUSH
21672: LD_OWVAR 2
21676: PUSH
21677: EMPTY
21678: LIST
21679: LIST
21680: PUSH
21681: LD_INT 21
21683: PUSH
21684: LD_INT 2
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: PUSH
21691: LD_INT 33
21693: PUSH
21694: LD_INT 3
21696: PUSH
21697: EMPTY
21698: LIST
21699: LIST
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: LIST
21705: PPUSH
21706: CALL_OW 69
21710: ST_TO_ADDR
// if not tmp then
21711: LD_VAR 0 1
21715: NOT
21716: IFFALSE 21720
// exit ;
21718: GO 21746
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21720: LD_VAR 0 1
21724: PUSH
21725: LD_INT 1
21727: PPUSH
21728: LD_VAR 0 1
21732: PPUSH
21733: CALL_OW 12
21737: ARRAY
21738: PPUSH
21739: LD_INT 1
21741: PPUSH
21742: CALL_OW 234
// end ;
21746: PPOPN 1
21748: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21749: LD_EXP 51
21753: PUSH
21754: LD_EXP 93
21758: AND
21759: IFFALSE 21900
21761: GO 21763
21763: DISABLE
21764: LD_INT 0
21766: PPUSH
21767: PPUSH
21768: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21769: LD_ADDR_VAR 0 3
21773: PUSH
21774: LD_INT 22
21776: PUSH
21777: LD_OWVAR 2
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: PUSH
21786: LD_INT 25
21788: PUSH
21789: LD_INT 1
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: PPUSH
21800: CALL_OW 69
21804: ST_TO_ADDR
// if not tmp then
21805: LD_VAR 0 3
21809: NOT
21810: IFFALSE 21814
// exit ;
21812: GO 21900
// un := tmp [ rand ( 1 , tmp ) ] ;
21814: LD_ADDR_VAR 0 2
21818: PUSH
21819: LD_VAR 0 3
21823: PUSH
21824: LD_INT 1
21826: PPUSH
21827: LD_VAR 0 3
21831: PPUSH
21832: CALL_OW 12
21836: ARRAY
21837: ST_TO_ADDR
// if Crawls ( un ) then
21838: LD_VAR 0 2
21842: PPUSH
21843: CALL_OW 318
21847: IFFALSE 21858
// ComWalk ( un ) ;
21849: LD_VAR 0 2
21853: PPUSH
21854: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21858: LD_VAR 0 2
21862: PPUSH
21863: LD_INT 9
21865: PPUSH
21866: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21870: LD_INT 28
21872: PPUSH
21873: LD_OWVAR 2
21877: PPUSH
21878: LD_INT 2
21880: PPUSH
21881: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21885: LD_INT 29
21887: PPUSH
21888: LD_OWVAR 2
21892: PPUSH
21893: LD_INT 2
21895: PPUSH
21896: CALL_OW 322
// end ;
21900: PPOPN 3
21902: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21903: LD_EXP 51
21907: PUSH
21908: LD_EXP 94
21912: AND
21913: IFFALSE 22024
21915: GO 21917
21917: DISABLE
21918: LD_INT 0
21920: PPUSH
21921: PPUSH
21922: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21923: LD_ADDR_VAR 0 3
21927: PUSH
21928: LD_INT 22
21930: PUSH
21931: LD_OWVAR 2
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: PUSH
21940: LD_INT 25
21942: PUSH
21943: LD_INT 1
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: PUSH
21950: EMPTY
21951: LIST
21952: LIST
21953: PPUSH
21954: CALL_OW 69
21958: ST_TO_ADDR
// if not tmp then
21959: LD_VAR 0 3
21963: NOT
21964: IFFALSE 21968
// exit ;
21966: GO 22024
// un := tmp [ rand ( 1 , tmp ) ] ;
21968: LD_ADDR_VAR 0 2
21972: PUSH
21973: LD_VAR 0 3
21977: PUSH
21978: LD_INT 1
21980: PPUSH
21981: LD_VAR 0 3
21985: PPUSH
21986: CALL_OW 12
21990: ARRAY
21991: ST_TO_ADDR
// if Crawls ( un ) then
21992: LD_VAR 0 2
21996: PPUSH
21997: CALL_OW 318
22001: IFFALSE 22012
// ComWalk ( un ) ;
22003: LD_VAR 0 2
22007: PPUSH
22008: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22012: LD_VAR 0 2
22016: PPUSH
22017: LD_INT 8
22019: PPUSH
22020: CALL_OW 336
// end ;
22024: PPOPN 3
22026: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
22027: LD_EXP 51
22031: PUSH
22032: LD_EXP 95
22036: AND
22037: IFFALSE 22181
22039: GO 22041
22041: DISABLE
22042: LD_INT 0
22044: PPUSH
22045: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
22046: LD_ADDR_VAR 0 2
22050: PUSH
22051: LD_INT 22
22053: PUSH
22054: LD_OWVAR 2
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: PUSH
22063: LD_INT 21
22065: PUSH
22066: LD_INT 2
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: PUSH
22073: LD_INT 2
22075: PUSH
22076: LD_INT 34
22078: PUSH
22079: LD_INT 12
22081: PUSH
22082: EMPTY
22083: LIST
22084: LIST
22085: PUSH
22086: LD_INT 34
22088: PUSH
22089: LD_INT 51
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: PUSH
22096: LD_INT 34
22098: PUSH
22099: LD_INT 32
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: LIST
22116: PPUSH
22117: CALL_OW 69
22121: ST_TO_ADDR
// if not tmp then
22122: LD_VAR 0 2
22126: NOT
22127: IFFALSE 22131
// exit ;
22129: GO 22181
// for i in tmp do
22131: LD_ADDR_VAR 0 1
22135: PUSH
22136: LD_VAR 0 2
22140: PUSH
22141: FOR_IN
22142: IFFALSE 22179
// if GetCargo ( i , mat_artifact ) = 0 then
22144: LD_VAR 0 1
22148: PPUSH
22149: LD_INT 4
22151: PPUSH
22152: CALL_OW 289
22156: PUSH
22157: LD_INT 0
22159: EQUAL
22160: IFFALSE 22177
// SetCargo ( i , mat_siberit , 100 ) ;
22162: LD_VAR 0 1
22166: PPUSH
22167: LD_INT 3
22169: PPUSH
22170: LD_INT 100
22172: PPUSH
22173: CALL_OW 290
22177: GO 22141
22179: POP
22180: POP
// end ;
22181: PPOPN 2
22183: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22184: LD_EXP 51
22188: PUSH
22189: LD_EXP 96
22193: AND
22194: IFFALSE 22377
22196: GO 22198
22198: DISABLE
22199: LD_INT 0
22201: PPUSH
22202: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22203: LD_ADDR_VAR 0 2
22207: PUSH
22208: LD_INT 22
22210: PUSH
22211: LD_OWVAR 2
22215: PUSH
22216: EMPTY
22217: LIST
22218: LIST
22219: PPUSH
22220: CALL_OW 69
22224: ST_TO_ADDR
// if not tmp then
22225: LD_VAR 0 2
22229: NOT
22230: IFFALSE 22234
// exit ;
22232: GO 22377
// for i := 1 to 2 do
22234: LD_ADDR_VAR 0 1
22238: PUSH
22239: DOUBLE
22240: LD_INT 1
22242: DEC
22243: ST_TO_ADDR
22244: LD_INT 2
22246: PUSH
22247: FOR_TO
22248: IFFALSE 22375
// begin uc_side := your_side ;
22250: LD_ADDR_OWVAR 20
22254: PUSH
22255: LD_OWVAR 2
22259: ST_TO_ADDR
// uc_nation := nation_american ;
22260: LD_ADDR_OWVAR 21
22264: PUSH
22265: LD_INT 1
22267: ST_TO_ADDR
// vc_chassis := us_morphling ;
22268: LD_ADDR_OWVAR 37
22272: PUSH
22273: LD_INT 5
22275: ST_TO_ADDR
// vc_engine := engine_siberite ;
22276: LD_ADDR_OWVAR 39
22280: PUSH
22281: LD_INT 3
22283: ST_TO_ADDR
// vc_control := control_computer ;
22284: LD_ADDR_OWVAR 38
22288: PUSH
22289: LD_INT 3
22291: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22292: LD_ADDR_OWVAR 40
22296: PUSH
22297: LD_INT 10
22299: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22300: LD_VAR 0 2
22304: PUSH
22305: LD_INT 1
22307: ARRAY
22308: PPUSH
22309: CALL_OW 310
22313: NOT
22314: IFFALSE 22361
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22316: CALL_OW 45
22320: PPUSH
22321: LD_VAR 0 2
22325: PUSH
22326: LD_INT 1
22328: ARRAY
22329: PPUSH
22330: CALL_OW 250
22334: PPUSH
22335: LD_VAR 0 2
22339: PUSH
22340: LD_INT 1
22342: ARRAY
22343: PPUSH
22344: CALL_OW 251
22348: PPUSH
22349: LD_INT 12
22351: PPUSH
22352: LD_INT 1
22354: PPUSH
22355: CALL_OW 50
22359: GO 22373
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22361: CALL_OW 45
22365: PPUSH
22366: LD_INT 1
22368: PPUSH
22369: CALL_OW 51
// end ;
22373: GO 22247
22375: POP
22376: POP
// end ;
22377: PPOPN 2
22379: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22380: LD_EXP 51
22384: PUSH
22385: LD_EXP 97
22389: AND
22390: IFFALSE 22612
22392: GO 22394
22394: DISABLE
22395: LD_INT 0
22397: PPUSH
22398: PPUSH
22399: PPUSH
22400: PPUSH
22401: PPUSH
22402: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22403: LD_ADDR_VAR 0 6
22407: PUSH
22408: LD_INT 22
22410: PUSH
22411: LD_OWVAR 2
22415: PUSH
22416: EMPTY
22417: LIST
22418: LIST
22419: PUSH
22420: LD_INT 21
22422: PUSH
22423: LD_INT 1
22425: PUSH
22426: EMPTY
22427: LIST
22428: LIST
22429: PUSH
22430: LD_INT 3
22432: PUSH
22433: LD_INT 23
22435: PUSH
22436: LD_INT 0
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: PUSH
22443: EMPTY
22444: LIST
22445: LIST
22446: PUSH
22447: EMPTY
22448: LIST
22449: LIST
22450: LIST
22451: PPUSH
22452: CALL_OW 69
22456: ST_TO_ADDR
// if not tmp then
22457: LD_VAR 0 6
22461: NOT
22462: IFFALSE 22466
// exit ;
22464: GO 22612
// s1 := rand ( 1 , 4 ) ;
22466: LD_ADDR_VAR 0 2
22470: PUSH
22471: LD_INT 1
22473: PPUSH
22474: LD_INT 4
22476: PPUSH
22477: CALL_OW 12
22481: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22482: LD_ADDR_VAR 0 4
22486: PUSH
22487: LD_VAR 0 6
22491: PUSH
22492: LD_INT 1
22494: ARRAY
22495: PPUSH
22496: LD_VAR 0 2
22500: PPUSH
22501: CALL_OW 259
22505: ST_TO_ADDR
// if s1 = 1 then
22506: LD_VAR 0 2
22510: PUSH
22511: LD_INT 1
22513: EQUAL
22514: IFFALSE 22534
// s2 := rand ( 2 , 4 ) else
22516: LD_ADDR_VAR 0 3
22520: PUSH
22521: LD_INT 2
22523: PPUSH
22524: LD_INT 4
22526: PPUSH
22527: CALL_OW 12
22531: ST_TO_ADDR
22532: GO 22542
// s2 := 1 ;
22534: LD_ADDR_VAR 0 3
22538: PUSH
22539: LD_INT 1
22541: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22542: LD_ADDR_VAR 0 5
22546: PUSH
22547: LD_VAR 0 6
22551: PUSH
22552: LD_INT 1
22554: ARRAY
22555: PPUSH
22556: LD_VAR 0 3
22560: PPUSH
22561: CALL_OW 259
22565: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22566: LD_VAR 0 6
22570: PUSH
22571: LD_INT 1
22573: ARRAY
22574: PPUSH
22575: LD_VAR 0 2
22579: PPUSH
22580: LD_VAR 0 5
22584: PPUSH
22585: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22589: LD_VAR 0 6
22593: PUSH
22594: LD_INT 1
22596: ARRAY
22597: PPUSH
22598: LD_VAR 0 3
22602: PPUSH
22603: LD_VAR 0 4
22607: PPUSH
22608: CALL_OW 237
// end ;
22612: PPOPN 6
22614: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22615: LD_EXP 51
22619: PUSH
22620: LD_EXP 98
22624: AND
22625: IFFALSE 22704
22627: GO 22629
22629: DISABLE
22630: LD_INT 0
22632: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22633: LD_ADDR_VAR 0 1
22637: PUSH
22638: LD_INT 22
22640: PUSH
22641: LD_OWVAR 2
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: PUSH
22650: LD_INT 30
22652: PUSH
22653: LD_INT 3
22655: PUSH
22656: EMPTY
22657: LIST
22658: LIST
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: PPUSH
22664: CALL_OW 69
22668: ST_TO_ADDR
// if not tmp then
22669: LD_VAR 0 1
22673: NOT
22674: IFFALSE 22678
// exit ;
22676: GO 22704
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22678: LD_VAR 0 1
22682: PUSH
22683: LD_INT 1
22685: PPUSH
22686: LD_VAR 0 1
22690: PPUSH
22691: CALL_OW 12
22695: ARRAY
22696: PPUSH
22697: LD_INT 1
22699: PPUSH
22700: CALL_OW 234
// end ;
22704: PPOPN 1
22706: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22707: LD_EXP 51
22711: PUSH
22712: LD_EXP 99
22716: AND
22717: IFFALSE 22829
22719: GO 22721
22721: DISABLE
22722: LD_INT 0
22724: PPUSH
22725: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22726: LD_ADDR_VAR 0 2
22730: PUSH
22731: LD_INT 22
22733: PUSH
22734: LD_OWVAR 2
22738: PUSH
22739: EMPTY
22740: LIST
22741: LIST
22742: PUSH
22743: LD_INT 2
22745: PUSH
22746: LD_INT 30
22748: PUSH
22749: LD_INT 27
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: PUSH
22756: LD_INT 30
22758: PUSH
22759: LD_INT 26
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: PUSH
22766: LD_INT 30
22768: PUSH
22769: LD_INT 28
22771: PUSH
22772: EMPTY
22773: LIST
22774: LIST
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: PUSH
22782: EMPTY
22783: LIST
22784: LIST
22785: PPUSH
22786: CALL_OW 69
22790: ST_TO_ADDR
// if not tmp then
22791: LD_VAR 0 2
22795: NOT
22796: IFFALSE 22800
// exit ;
22798: GO 22829
// for i in tmp do
22800: LD_ADDR_VAR 0 1
22804: PUSH
22805: LD_VAR 0 2
22809: PUSH
22810: FOR_IN
22811: IFFALSE 22827
// SetLives ( i , 1 ) ;
22813: LD_VAR 0 1
22817: PPUSH
22818: LD_INT 1
22820: PPUSH
22821: CALL_OW 234
22825: GO 22810
22827: POP
22828: POP
// end ;
22829: PPOPN 2
22831: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22832: LD_EXP 51
22836: PUSH
22837: LD_EXP 100
22841: AND
22842: IFFALSE 23116
22844: GO 22846
22846: DISABLE
22847: LD_INT 0
22849: PPUSH
22850: PPUSH
22851: PPUSH
// begin i := rand ( 1 , 7 ) ;
22852: LD_ADDR_VAR 0 1
22856: PUSH
22857: LD_INT 1
22859: PPUSH
22860: LD_INT 7
22862: PPUSH
22863: CALL_OW 12
22867: ST_TO_ADDR
// case i of 1 :
22868: LD_VAR 0 1
22872: PUSH
22873: LD_INT 1
22875: DOUBLE
22876: EQUAL
22877: IFTRUE 22881
22879: GO 22891
22881: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22882: LD_STRING earthquake(getX(game), 0, 32)
22884: PPUSH
22885: CALL_OW 559
22889: GO 23116
22891: LD_INT 2
22893: DOUBLE
22894: EQUAL
22895: IFTRUE 22899
22897: GO 22913
22899: POP
// begin ToLua ( displayStucuk(); ) ;
22900: LD_STRING displayStucuk();
22902: PPUSH
22903: CALL_OW 559
// ResetFog ;
22907: CALL_OW 335
// end ; 3 :
22911: GO 23116
22913: LD_INT 3
22915: DOUBLE
22916: EQUAL
22917: IFTRUE 22921
22919: GO 23025
22921: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22922: LD_ADDR_VAR 0 2
22926: PUSH
22927: LD_INT 22
22929: PUSH
22930: LD_OWVAR 2
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: PUSH
22939: LD_INT 25
22941: PUSH
22942: LD_INT 1
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: PPUSH
22953: CALL_OW 69
22957: ST_TO_ADDR
// if not tmp then
22958: LD_VAR 0 2
22962: NOT
22963: IFFALSE 22967
// exit ;
22965: GO 23116
// un := tmp [ rand ( 1 , tmp ) ] ;
22967: LD_ADDR_VAR 0 3
22971: PUSH
22972: LD_VAR 0 2
22976: PUSH
22977: LD_INT 1
22979: PPUSH
22980: LD_VAR 0 2
22984: PPUSH
22985: CALL_OW 12
22989: ARRAY
22990: ST_TO_ADDR
// if Crawls ( un ) then
22991: LD_VAR 0 3
22995: PPUSH
22996: CALL_OW 318
23000: IFFALSE 23011
// ComWalk ( un ) ;
23002: LD_VAR 0 3
23006: PPUSH
23007: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23011: LD_VAR 0 3
23015: PPUSH
23016: LD_INT 8
23018: PPUSH
23019: CALL_OW 336
// end ; 4 :
23023: GO 23116
23025: LD_INT 4
23027: DOUBLE
23028: EQUAL
23029: IFTRUE 23033
23031: GO 23094
23033: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23034: LD_ADDR_VAR 0 2
23038: PUSH
23039: LD_INT 22
23041: PUSH
23042: LD_OWVAR 2
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: PUSH
23051: LD_INT 30
23053: PUSH
23054: LD_INT 29
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: PUSH
23061: EMPTY
23062: LIST
23063: LIST
23064: PPUSH
23065: CALL_OW 69
23069: ST_TO_ADDR
// if not tmp then
23070: LD_VAR 0 2
23074: NOT
23075: IFFALSE 23079
// exit ;
23077: GO 23116
// DestroyUnit ( tmp [ 1 ] ) ;
23079: LD_VAR 0 2
23083: PUSH
23084: LD_INT 1
23086: ARRAY
23087: PPUSH
23088: CALL_OW 65
// end ; 5 .. 7 :
23092: GO 23116
23094: LD_INT 5
23096: DOUBLE
23097: GREATEREQUAL
23098: IFFALSE 23106
23100: LD_INT 7
23102: DOUBLE
23103: LESSEQUAL
23104: IFTRUE 23108
23106: GO 23115
23108: POP
// StreamSibBomb ; end ;
23109: CALL 19366 0 0
23113: GO 23116
23115: POP
// end ;
23116: PPOPN 3
23118: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23119: LD_EXP 51
23123: PUSH
23124: LD_EXP 101
23128: AND
23129: IFFALSE 23285
23131: GO 23133
23133: DISABLE
23134: LD_INT 0
23136: PPUSH
23137: PPUSH
23138: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23139: LD_ADDR_VAR 0 2
23143: PUSH
23144: LD_INT 81
23146: PUSH
23147: LD_OWVAR 2
23151: PUSH
23152: EMPTY
23153: LIST
23154: LIST
23155: PUSH
23156: LD_INT 2
23158: PUSH
23159: LD_INT 21
23161: PUSH
23162: LD_INT 1
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PUSH
23169: LD_INT 21
23171: PUSH
23172: LD_INT 2
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: PUSH
23179: EMPTY
23180: LIST
23181: LIST
23182: LIST
23183: PUSH
23184: EMPTY
23185: LIST
23186: LIST
23187: PPUSH
23188: CALL_OW 69
23192: ST_TO_ADDR
// if not tmp then
23193: LD_VAR 0 2
23197: NOT
23198: IFFALSE 23202
// exit ;
23200: GO 23285
// p := 0 ;
23202: LD_ADDR_VAR 0 3
23206: PUSH
23207: LD_INT 0
23209: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23210: LD_INT 35
23212: PPUSH
23213: CALL_OW 67
// p := p + 1 ;
23217: LD_ADDR_VAR 0 3
23221: PUSH
23222: LD_VAR 0 3
23226: PUSH
23227: LD_INT 1
23229: PLUS
23230: ST_TO_ADDR
// for i in tmp do
23231: LD_ADDR_VAR 0 1
23235: PUSH
23236: LD_VAR 0 2
23240: PUSH
23241: FOR_IN
23242: IFFALSE 23273
// if GetLives ( i ) < 1000 then
23244: LD_VAR 0 1
23248: PPUSH
23249: CALL_OW 256
23253: PUSH
23254: LD_INT 1000
23256: LESS
23257: IFFALSE 23271
// SetLives ( i , 1000 ) ;
23259: LD_VAR 0 1
23263: PPUSH
23264: LD_INT 1000
23266: PPUSH
23267: CALL_OW 234
23271: GO 23241
23273: POP
23274: POP
// until p > 20 ;
23275: LD_VAR 0 3
23279: PUSH
23280: LD_INT 20
23282: GREATER
23283: IFFALSE 23210
// end ;
23285: PPOPN 3
23287: END
// every 0 0$1 trigger StreamModeActive and sTime do
23288: LD_EXP 51
23292: PUSH
23293: LD_EXP 102
23297: AND
23298: IFFALSE 23333
23300: GO 23302
23302: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23303: LD_INT 28
23305: PPUSH
23306: LD_OWVAR 2
23310: PPUSH
23311: LD_INT 2
23313: PPUSH
23314: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23318: LD_INT 30
23320: PPUSH
23321: LD_OWVAR 2
23325: PPUSH
23326: LD_INT 2
23328: PPUSH
23329: CALL_OW 322
// end ;
23333: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23334: LD_EXP 51
23338: PUSH
23339: LD_EXP 103
23343: AND
23344: IFFALSE 23465
23346: GO 23348
23348: DISABLE
23349: LD_INT 0
23351: PPUSH
23352: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23353: LD_ADDR_VAR 0 2
23357: PUSH
23358: LD_INT 22
23360: PUSH
23361: LD_OWVAR 2
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: PUSH
23370: LD_INT 21
23372: PUSH
23373: LD_INT 1
23375: PUSH
23376: EMPTY
23377: LIST
23378: LIST
23379: PUSH
23380: LD_INT 3
23382: PUSH
23383: LD_INT 23
23385: PUSH
23386: LD_INT 0
23388: PUSH
23389: EMPTY
23390: LIST
23391: LIST
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: PUSH
23397: EMPTY
23398: LIST
23399: LIST
23400: LIST
23401: PPUSH
23402: CALL_OW 69
23406: ST_TO_ADDR
// if not tmp then
23407: LD_VAR 0 2
23411: NOT
23412: IFFALSE 23416
// exit ;
23414: GO 23465
// for i in tmp do
23416: LD_ADDR_VAR 0 1
23420: PUSH
23421: LD_VAR 0 2
23425: PUSH
23426: FOR_IN
23427: IFFALSE 23463
// begin if Crawls ( i ) then
23429: LD_VAR 0 1
23433: PPUSH
23434: CALL_OW 318
23438: IFFALSE 23449
// ComWalk ( i ) ;
23440: LD_VAR 0 1
23444: PPUSH
23445: CALL_OW 138
// SetClass ( i , 2 ) ;
23449: LD_VAR 0 1
23453: PPUSH
23454: LD_INT 2
23456: PPUSH
23457: CALL_OW 336
// end ;
23461: GO 23426
23463: POP
23464: POP
// end ;
23465: PPOPN 2
23467: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23468: LD_EXP 51
23472: PUSH
23473: LD_EXP 104
23477: AND
23478: IFFALSE 23759
23480: GO 23482
23482: DISABLE
23483: LD_INT 0
23485: PPUSH
23486: PPUSH
23487: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23488: LD_OWVAR 2
23492: PPUSH
23493: LD_INT 9
23495: PPUSH
23496: LD_INT 1
23498: PPUSH
23499: LD_INT 1
23501: PPUSH
23502: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23506: LD_INT 9
23508: PPUSH
23509: LD_OWVAR 2
23513: PPUSH
23514: CALL_OW 343
// uc_side := 9 ;
23518: LD_ADDR_OWVAR 20
23522: PUSH
23523: LD_INT 9
23525: ST_TO_ADDR
// uc_nation := 2 ;
23526: LD_ADDR_OWVAR 21
23530: PUSH
23531: LD_INT 2
23533: ST_TO_ADDR
// hc_name := Dark Warrior ;
23534: LD_ADDR_OWVAR 26
23538: PUSH
23539: LD_STRING Dark Warrior
23541: ST_TO_ADDR
// hc_gallery :=  ;
23542: LD_ADDR_OWVAR 33
23546: PUSH
23547: LD_STRING 
23549: ST_TO_ADDR
// hc_noskilllimit := true ;
23550: LD_ADDR_OWVAR 76
23554: PUSH
23555: LD_INT 1
23557: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23558: LD_ADDR_OWVAR 31
23562: PUSH
23563: LD_INT 30
23565: PUSH
23566: LD_INT 30
23568: PUSH
23569: LD_INT 30
23571: PUSH
23572: LD_INT 30
23574: PUSH
23575: EMPTY
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: ST_TO_ADDR
// un := CreateHuman ;
23581: LD_ADDR_VAR 0 3
23585: PUSH
23586: CALL_OW 44
23590: ST_TO_ADDR
// hc_noskilllimit := false ;
23591: LD_ADDR_OWVAR 76
23595: PUSH
23596: LD_INT 0
23598: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23599: LD_VAR 0 3
23603: PPUSH
23604: LD_INT 1
23606: PPUSH
23607: CALL_OW 51
// p := 0 ;
23611: LD_ADDR_VAR 0 2
23615: PUSH
23616: LD_INT 0
23618: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23619: LD_INT 35
23621: PPUSH
23622: CALL_OW 67
// p := p + 1 ;
23626: LD_ADDR_VAR 0 2
23630: PUSH
23631: LD_VAR 0 2
23635: PUSH
23636: LD_INT 1
23638: PLUS
23639: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23640: LD_VAR 0 3
23644: PPUSH
23645: CALL_OW 256
23649: PUSH
23650: LD_INT 1000
23652: LESS
23653: IFFALSE 23667
// SetLives ( un , 1000 ) ;
23655: LD_VAR 0 3
23659: PPUSH
23660: LD_INT 1000
23662: PPUSH
23663: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23667: LD_VAR 0 3
23671: PPUSH
23672: LD_INT 81
23674: PUSH
23675: LD_OWVAR 2
23679: PUSH
23680: EMPTY
23681: LIST
23682: LIST
23683: PUSH
23684: LD_INT 91
23686: PUSH
23687: LD_VAR 0 3
23691: PUSH
23692: LD_INT 30
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: LIST
23699: PUSH
23700: EMPTY
23701: LIST
23702: LIST
23703: PPUSH
23704: CALL_OW 69
23708: PPUSH
23709: LD_VAR 0 3
23713: PPUSH
23714: CALL_OW 74
23718: PPUSH
23719: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
23723: LD_VAR 0 2
23727: PUSH
23728: LD_INT 60
23730: GREATER
23731: PUSH
23732: LD_VAR 0 3
23736: PPUSH
23737: CALL_OW 301
23741: OR
23742: IFFALSE 23619
// if un then
23744: LD_VAR 0 3
23748: IFFALSE 23759
// RemoveUnit ( un ) ;
23750: LD_VAR 0 3
23754: PPUSH
23755: CALL_OW 64
// end ;
23759: PPOPN 3
23761: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23762: LD_INT 0
23764: PPUSH
// case cmd of 301 :
23765: LD_VAR 0 1
23769: PUSH
23770: LD_INT 301
23772: DOUBLE
23773: EQUAL
23774: IFTRUE 23778
23776: GO 23810
23778: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23779: LD_VAR 0 6
23783: PPUSH
23784: LD_VAR 0 7
23788: PPUSH
23789: LD_VAR 0 8
23793: PPUSH
23794: LD_VAR 0 4
23798: PPUSH
23799: LD_VAR 0 5
23803: PPUSH
23804: CALL 25011 0 5
23808: GO 23931
23810: LD_INT 302
23812: DOUBLE
23813: EQUAL
23814: IFTRUE 23818
23816: GO 23855
23818: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23819: LD_VAR 0 6
23823: PPUSH
23824: LD_VAR 0 7
23828: PPUSH
23829: LD_VAR 0 8
23833: PPUSH
23834: LD_VAR 0 9
23838: PPUSH
23839: LD_VAR 0 4
23843: PPUSH
23844: LD_VAR 0 5
23848: PPUSH
23849: CALL 25102 0 6
23853: GO 23931
23855: LD_INT 303
23857: DOUBLE
23858: EQUAL
23859: IFTRUE 23863
23861: GO 23900
23863: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23864: LD_VAR 0 6
23868: PPUSH
23869: LD_VAR 0 7
23873: PPUSH
23874: LD_VAR 0 8
23878: PPUSH
23879: LD_VAR 0 9
23883: PPUSH
23884: LD_VAR 0 4
23888: PPUSH
23889: LD_VAR 0 5
23893: PPUSH
23894: CALL 23936 0 6
23898: GO 23931
23900: LD_INT 304
23902: DOUBLE
23903: EQUAL
23904: IFTRUE 23908
23906: GO 23930
23908: POP
// hHackTeleport ( unit , x , y ) ; end ;
23909: LD_VAR 0 2
23913: PPUSH
23914: LD_VAR 0 4
23918: PPUSH
23919: LD_VAR 0 5
23923: PPUSH
23924: CALL 25695 0 3
23928: GO 23931
23930: POP
// end ;
23931: LD_VAR 0 12
23935: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23936: LD_INT 0
23938: PPUSH
23939: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23940: LD_VAR 0 1
23944: PUSH
23945: LD_INT 1
23947: LESS
23948: PUSH
23949: LD_VAR 0 1
23953: PUSH
23954: LD_INT 3
23956: GREATER
23957: OR
23958: PUSH
23959: LD_VAR 0 5
23963: PPUSH
23964: LD_VAR 0 6
23968: PPUSH
23969: CALL_OW 428
23973: OR
23974: IFFALSE 23978
// exit ;
23976: GO 24698
// uc_side := your_side ;
23978: LD_ADDR_OWVAR 20
23982: PUSH
23983: LD_OWVAR 2
23987: ST_TO_ADDR
// uc_nation := nation ;
23988: LD_ADDR_OWVAR 21
23992: PUSH
23993: LD_VAR 0 1
23997: ST_TO_ADDR
// bc_level = 1 ;
23998: LD_ADDR_OWVAR 43
24002: PUSH
24003: LD_INT 1
24005: ST_TO_ADDR
// case btype of 1 :
24006: LD_VAR 0 2
24010: PUSH
24011: LD_INT 1
24013: DOUBLE
24014: EQUAL
24015: IFTRUE 24019
24017: GO 24030
24019: POP
// bc_type := b_depot ; 2 :
24020: LD_ADDR_OWVAR 42
24024: PUSH
24025: LD_INT 0
24027: ST_TO_ADDR
24028: GO 24642
24030: LD_INT 2
24032: DOUBLE
24033: EQUAL
24034: IFTRUE 24038
24036: GO 24049
24038: POP
// bc_type := b_warehouse ; 3 :
24039: LD_ADDR_OWVAR 42
24043: PUSH
24044: LD_INT 1
24046: ST_TO_ADDR
24047: GO 24642
24049: LD_INT 3
24051: DOUBLE
24052: EQUAL
24053: IFTRUE 24057
24055: GO 24068
24057: POP
// bc_type := b_lab ; 4 .. 9 :
24058: LD_ADDR_OWVAR 42
24062: PUSH
24063: LD_INT 6
24065: ST_TO_ADDR
24066: GO 24642
24068: LD_INT 4
24070: DOUBLE
24071: GREATEREQUAL
24072: IFFALSE 24080
24074: LD_INT 9
24076: DOUBLE
24077: LESSEQUAL
24078: IFTRUE 24082
24080: GO 24134
24082: POP
// begin bc_type := b_lab_half ;
24083: LD_ADDR_OWVAR 42
24087: PUSH
24088: LD_INT 7
24090: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24091: LD_ADDR_OWVAR 44
24095: PUSH
24096: LD_INT 10
24098: PUSH
24099: LD_INT 11
24101: PUSH
24102: LD_INT 12
24104: PUSH
24105: LD_INT 15
24107: PUSH
24108: LD_INT 14
24110: PUSH
24111: LD_INT 13
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: PUSH
24122: LD_VAR 0 2
24126: PUSH
24127: LD_INT 3
24129: MINUS
24130: ARRAY
24131: ST_TO_ADDR
// end ; 10 .. 13 :
24132: GO 24642
24134: LD_INT 10
24136: DOUBLE
24137: GREATEREQUAL
24138: IFFALSE 24146
24140: LD_INT 13
24142: DOUBLE
24143: LESSEQUAL
24144: IFTRUE 24148
24146: GO 24225
24148: POP
// begin bc_type := b_lab_full ;
24149: LD_ADDR_OWVAR 42
24153: PUSH
24154: LD_INT 8
24156: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24157: LD_ADDR_OWVAR 44
24161: PUSH
24162: LD_INT 10
24164: PUSH
24165: LD_INT 12
24167: PUSH
24168: LD_INT 14
24170: PUSH
24171: LD_INT 13
24173: PUSH
24174: EMPTY
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: PUSH
24180: LD_VAR 0 2
24184: PUSH
24185: LD_INT 9
24187: MINUS
24188: ARRAY
24189: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24190: LD_ADDR_OWVAR 45
24194: PUSH
24195: LD_INT 11
24197: PUSH
24198: LD_INT 15
24200: PUSH
24201: LD_INT 12
24203: PUSH
24204: LD_INT 15
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: PUSH
24213: LD_VAR 0 2
24217: PUSH
24218: LD_INT 9
24220: MINUS
24221: ARRAY
24222: ST_TO_ADDR
// end ; 14 :
24223: GO 24642
24225: LD_INT 14
24227: DOUBLE
24228: EQUAL
24229: IFTRUE 24233
24231: GO 24244
24233: POP
// bc_type := b_workshop ; 15 :
24234: LD_ADDR_OWVAR 42
24238: PUSH
24239: LD_INT 2
24241: ST_TO_ADDR
24242: GO 24642
24244: LD_INT 15
24246: DOUBLE
24247: EQUAL
24248: IFTRUE 24252
24250: GO 24263
24252: POP
// bc_type := b_factory ; 16 :
24253: LD_ADDR_OWVAR 42
24257: PUSH
24258: LD_INT 3
24260: ST_TO_ADDR
24261: GO 24642
24263: LD_INT 16
24265: DOUBLE
24266: EQUAL
24267: IFTRUE 24271
24269: GO 24282
24271: POP
// bc_type := b_ext_gun ; 17 :
24272: LD_ADDR_OWVAR 42
24276: PUSH
24277: LD_INT 17
24279: ST_TO_ADDR
24280: GO 24642
24282: LD_INT 17
24284: DOUBLE
24285: EQUAL
24286: IFTRUE 24290
24288: GO 24318
24290: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24291: LD_ADDR_OWVAR 42
24295: PUSH
24296: LD_INT 19
24298: PUSH
24299: LD_INT 23
24301: PUSH
24302: LD_INT 19
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: LIST
24309: PUSH
24310: LD_VAR 0 1
24314: ARRAY
24315: ST_TO_ADDR
24316: GO 24642
24318: LD_INT 18
24320: DOUBLE
24321: EQUAL
24322: IFTRUE 24326
24324: GO 24337
24326: POP
// bc_type := b_ext_radar ; 19 :
24327: LD_ADDR_OWVAR 42
24331: PUSH
24332: LD_INT 20
24334: ST_TO_ADDR
24335: GO 24642
24337: LD_INT 19
24339: DOUBLE
24340: EQUAL
24341: IFTRUE 24345
24343: GO 24356
24345: POP
// bc_type := b_ext_radio ; 20 :
24346: LD_ADDR_OWVAR 42
24350: PUSH
24351: LD_INT 22
24353: ST_TO_ADDR
24354: GO 24642
24356: LD_INT 20
24358: DOUBLE
24359: EQUAL
24360: IFTRUE 24364
24362: GO 24375
24364: POP
// bc_type := b_ext_siberium ; 21 :
24365: LD_ADDR_OWVAR 42
24369: PUSH
24370: LD_INT 21
24372: ST_TO_ADDR
24373: GO 24642
24375: LD_INT 21
24377: DOUBLE
24378: EQUAL
24379: IFTRUE 24383
24381: GO 24394
24383: POP
// bc_type := b_ext_computer ; 22 :
24384: LD_ADDR_OWVAR 42
24388: PUSH
24389: LD_INT 24
24391: ST_TO_ADDR
24392: GO 24642
24394: LD_INT 22
24396: DOUBLE
24397: EQUAL
24398: IFTRUE 24402
24400: GO 24413
24402: POP
// bc_type := b_ext_track ; 23 :
24403: LD_ADDR_OWVAR 42
24407: PUSH
24408: LD_INT 16
24410: ST_TO_ADDR
24411: GO 24642
24413: LD_INT 23
24415: DOUBLE
24416: EQUAL
24417: IFTRUE 24421
24419: GO 24432
24421: POP
// bc_type := b_ext_laser ; 24 :
24422: LD_ADDR_OWVAR 42
24426: PUSH
24427: LD_INT 25
24429: ST_TO_ADDR
24430: GO 24642
24432: LD_INT 24
24434: DOUBLE
24435: EQUAL
24436: IFTRUE 24440
24438: GO 24451
24440: POP
// bc_type := b_control_tower ; 25 :
24441: LD_ADDR_OWVAR 42
24445: PUSH
24446: LD_INT 36
24448: ST_TO_ADDR
24449: GO 24642
24451: LD_INT 25
24453: DOUBLE
24454: EQUAL
24455: IFTRUE 24459
24457: GO 24470
24459: POP
// bc_type := b_breastwork ; 26 :
24460: LD_ADDR_OWVAR 42
24464: PUSH
24465: LD_INT 31
24467: ST_TO_ADDR
24468: GO 24642
24470: LD_INT 26
24472: DOUBLE
24473: EQUAL
24474: IFTRUE 24478
24476: GO 24489
24478: POP
// bc_type := b_bunker ; 27 :
24479: LD_ADDR_OWVAR 42
24483: PUSH
24484: LD_INT 32
24486: ST_TO_ADDR
24487: GO 24642
24489: LD_INT 27
24491: DOUBLE
24492: EQUAL
24493: IFTRUE 24497
24495: GO 24508
24497: POP
// bc_type := b_turret ; 28 :
24498: LD_ADDR_OWVAR 42
24502: PUSH
24503: LD_INT 33
24505: ST_TO_ADDR
24506: GO 24642
24508: LD_INT 28
24510: DOUBLE
24511: EQUAL
24512: IFTRUE 24516
24514: GO 24527
24516: POP
// bc_type := b_armoury ; 29 :
24517: LD_ADDR_OWVAR 42
24521: PUSH
24522: LD_INT 4
24524: ST_TO_ADDR
24525: GO 24642
24527: LD_INT 29
24529: DOUBLE
24530: EQUAL
24531: IFTRUE 24535
24533: GO 24546
24535: POP
// bc_type := b_barracks ; 30 :
24536: LD_ADDR_OWVAR 42
24540: PUSH
24541: LD_INT 5
24543: ST_TO_ADDR
24544: GO 24642
24546: LD_INT 30
24548: DOUBLE
24549: EQUAL
24550: IFTRUE 24554
24552: GO 24565
24554: POP
// bc_type := b_solar_power ; 31 :
24555: LD_ADDR_OWVAR 42
24559: PUSH
24560: LD_INT 27
24562: ST_TO_ADDR
24563: GO 24642
24565: LD_INT 31
24567: DOUBLE
24568: EQUAL
24569: IFTRUE 24573
24571: GO 24584
24573: POP
// bc_type := b_oil_power ; 32 :
24574: LD_ADDR_OWVAR 42
24578: PUSH
24579: LD_INT 26
24581: ST_TO_ADDR
24582: GO 24642
24584: LD_INT 32
24586: DOUBLE
24587: EQUAL
24588: IFTRUE 24592
24590: GO 24603
24592: POP
// bc_type := b_siberite_power ; 33 :
24593: LD_ADDR_OWVAR 42
24597: PUSH
24598: LD_INT 28
24600: ST_TO_ADDR
24601: GO 24642
24603: LD_INT 33
24605: DOUBLE
24606: EQUAL
24607: IFTRUE 24611
24609: GO 24622
24611: POP
// bc_type := b_oil_mine ; 34 :
24612: LD_ADDR_OWVAR 42
24616: PUSH
24617: LD_INT 29
24619: ST_TO_ADDR
24620: GO 24642
24622: LD_INT 34
24624: DOUBLE
24625: EQUAL
24626: IFTRUE 24630
24628: GO 24641
24630: POP
// bc_type := b_siberite_mine ; end ;
24631: LD_ADDR_OWVAR 42
24635: PUSH
24636: LD_INT 30
24638: ST_TO_ADDR
24639: GO 24642
24641: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24642: LD_ADDR_VAR 0 8
24646: PUSH
24647: LD_VAR 0 5
24651: PPUSH
24652: LD_VAR 0 6
24656: PPUSH
24657: LD_VAR 0 3
24661: PPUSH
24662: CALL_OW 47
24666: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24667: LD_OWVAR 42
24671: PUSH
24672: LD_INT 32
24674: PUSH
24675: LD_INT 33
24677: PUSH
24678: EMPTY
24679: LIST
24680: LIST
24681: IN
24682: IFFALSE 24698
// PlaceWeaponTurret ( b , weapon ) ;
24684: LD_VAR 0 8
24688: PPUSH
24689: LD_VAR 0 4
24693: PPUSH
24694: CALL_OW 431
// end ;
24698: LD_VAR 0 7
24702: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24703: LD_INT 0
24705: PPUSH
24706: PPUSH
24707: PPUSH
24708: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24709: LD_ADDR_VAR 0 4
24713: PUSH
24714: LD_INT 22
24716: PUSH
24717: LD_OWVAR 2
24721: PUSH
24722: EMPTY
24723: LIST
24724: LIST
24725: PUSH
24726: LD_INT 2
24728: PUSH
24729: LD_INT 30
24731: PUSH
24732: LD_INT 0
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: PUSH
24739: LD_INT 30
24741: PUSH
24742: LD_INT 1
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: LIST
24753: PUSH
24754: EMPTY
24755: LIST
24756: LIST
24757: PPUSH
24758: CALL_OW 69
24762: ST_TO_ADDR
// if not tmp then
24763: LD_VAR 0 4
24767: NOT
24768: IFFALSE 24772
// exit ;
24770: GO 24831
// for i in tmp do
24772: LD_ADDR_VAR 0 2
24776: PUSH
24777: LD_VAR 0 4
24781: PUSH
24782: FOR_IN
24783: IFFALSE 24829
// for j = 1 to 3 do
24785: LD_ADDR_VAR 0 3
24789: PUSH
24790: DOUBLE
24791: LD_INT 1
24793: DEC
24794: ST_TO_ADDR
24795: LD_INT 3
24797: PUSH
24798: FOR_TO
24799: IFFALSE 24825
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24801: LD_VAR 0 2
24805: PPUSH
24806: CALL_OW 274
24810: PPUSH
24811: LD_VAR 0 3
24815: PPUSH
24816: LD_INT 99999
24818: PPUSH
24819: CALL_OW 277
24823: GO 24798
24825: POP
24826: POP
24827: GO 24782
24829: POP
24830: POP
// end ;
24831: LD_VAR 0 1
24835: RET
// export function hHackSetLevel10 ; var i , j ; begin
24836: LD_INT 0
24838: PPUSH
24839: PPUSH
24840: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24841: LD_ADDR_VAR 0 2
24845: PUSH
24846: LD_INT 21
24848: PUSH
24849: LD_INT 1
24851: PUSH
24852: EMPTY
24853: LIST
24854: LIST
24855: PPUSH
24856: CALL_OW 69
24860: PUSH
24861: FOR_IN
24862: IFFALSE 24914
// if IsSelected ( i ) then
24864: LD_VAR 0 2
24868: PPUSH
24869: CALL_OW 306
24873: IFFALSE 24912
// begin for j := 1 to 4 do
24875: LD_ADDR_VAR 0 3
24879: PUSH
24880: DOUBLE
24881: LD_INT 1
24883: DEC
24884: ST_TO_ADDR
24885: LD_INT 4
24887: PUSH
24888: FOR_TO
24889: IFFALSE 24910
// SetSkill ( i , j , 10 ) ;
24891: LD_VAR 0 2
24895: PPUSH
24896: LD_VAR 0 3
24900: PPUSH
24901: LD_INT 10
24903: PPUSH
24904: CALL_OW 237
24908: GO 24888
24910: POP
24911: POP
// end ;
24912: GO 24861
24914: POP
24915: POP
// end ;
24916: LD_VAR 0 1
24920: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24921: LD_INT 0
24923: PPUSH
24924: PPUSH
24925: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24926: LD_ADDR_VAR 0 2
24930: PUSH
24931: LD_INT 22
24933: PUSH
24934: LD_OWVAR 2
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: PUSH
24943: LD_INT 21
24945: PUSH
24946: LD_INT 1
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: PPUSH
24957: CALL_OW 69
24961: PUSH
24962: FOR_IN
24963: IFFALSE 25004
// begin for j := 1 to 4 do
24965: LD_ADDR_VAR 0 3
24969: PUSH
24970: DOUBLE
24971: LD_INT 1
24973: DEC
24974: ST_TO_ADDR
24975: LD_INT 4
24977: PUSH
24978: FOR_TO
24979: IFFALSE 25000
// SetSkill ( i , j , 10 ) ;
24981: LD_VAR 0 2
24985: PPUSH
24986: LD_VAR 0 3
24990: PPUSH
24991: LD_INT 10
24993: PPUSH
24994: CALL_OW 237
24998: GO 24978
25000: POP
25001: POP
// end ;
25002: GO 24962
25004: POP
25005: POP
// end ;
25006: LD_VAR 0 1
25010: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
25011: LD_INT 0
25013: PPUSH
// uc_side := your_side ;
25014: LD_ADDR_OWVAR 20
25018: PUSH
25019: LD_OWVAR 2
25023: ST_TO_ADDR
// uc_nation := nation ;
25024: LD_ADDR_OWVAR 21
25028: PUSH
25029: LD_VAR 0 1
25033: ST_TO_ADDR
// InitHc ;
25034: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25038: LD_INT 0
25040: PPUSH
25041: LD_VAR 0 2
25045: PPUSH
25046: LD_VAR 0 3
25050: PPUSH
25051: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25055: LD_VAR 0 4
25059: PPUSH
25060: LD_VAR 0 5
25064: PPUSH
25065: CALL_OW 428
25069: PUSH
25070: LD_INT 0
25072: EQUAL
25073: IFFALSE 25097
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25075: CALL_OW 44
25079: PPUSH
25080: LD_VAR 0 4
25084: PPUSH
25085: LD_VAR 0 5
25089: PPUSH
25090: LD_INT 1
25092: PPUSH
25093: CALL_OW 48
// end ;
25097: LD_VAR 0 6
25101: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25102: LD_INT 0
25104: PPUSH
25105: PPUSH
// uc_side := your_side ;
25106: LD_ADDR_OWVAR 20
25110: PUSH
25111: LD_OWVAR 2
25115: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25116: LD_VAR 0 1
25120: PUSH
25121: LD_INT 1
25123: PUSH
25124: LD_INT 2
25126: PUSH
25127: LD_INT 3
25129: PUSH
25130: LD_INT 4
25132: PUSH
25133: LD_INT 5
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: IN
25143: IFFALSE 25155
// uc_nation := nation_american else
25145: LD_ADDR_OWVAR 21
25149: PUSH
25150: LD_INT 1
25152: ST_TO_ADDR
25153: GO 25198
// if chassis in [ 11 , 12 , 13 , 14 ] then
25155: LD_VAR 0 1
25159: PUSH
25160: LD_INT 11
25162: PUSH
25163: LD_INT 12
25165: PUSH
25166: LD_INT 13
25168: PUSH
25169: LD_INT 14
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: IN
25178: IFFALSE 25190
// uc_nation := nation_arabian else
25180: LD_ADDR_OWVAR 21
25184: PUSH
25185: LD_INT 2
25187: ST_TO_ADDR
25188: GO 25198
// uc_nation := nation_russian ;
25190: LD_ADDR_OWVAR 21
25194: PUSH
25195: LD_INT 3
25197: ST_TO_ADDR
// vc_chassis := chassis ;
25198: LD_ADDR_OWVAR 37
25202: PUSH
25203: LD_VAR 0 1
25207: ST_TO_ADDR
// vc_engine := engine ;
25208: LD_ADDR_OWVAR 39
25212: PUSH
25213: LD_VAR 0 2
25217: ST_TO_ADDR
// vc_control := control ;
25218: LD_ADDR_OWVAR 38
25222: PUSH
25223: LD_VAR 0 3
25227: ST_TO_ADDR
// vc_weapon := weapon ;
25228: LD_ADDR_OWVAR 40
25232: PUSH
25233: LD_VAR 0 4
25237: ST_TO_ADDR
// un := CreateVehicle ;
25238: LD_ADDR_VAR 0 8
25242: PUSH
25243: CALL_OW 45
25247: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25248: LD_VAR 0 8
25252: PPUSH
25253: LD_INT 0
25255: PPUSH
25256: LD_INT 5
25258: PPUSH
25259: CALL_OW 12
25263: PPUSH
25264: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25268: LD_VAR 0 8
25272: PPUSH
25273: LD_VAR 0 5
25277: PPUSH
25278: LD_VAR 0 6
25282: PPUSH
25283: LD_INT 1
25285: PPUSH
25286: CALL_OW 48
// end ;
25290: LD_VAR 0 7
25294: RET
// export hInvincible ; every 1 do
25295: GO 25297
25297: DISABLE
// hInvincible := [ ] ;
25298: LD_ADDR_EXP 105
25302: PUSH
25303: EMPTY
25304: ST_TO_ADDR
25305: END
// every 10 do var i ;
25306: GO 25308
25308: DISABLE
25309: LD_INT 0
25311: PPUSH
// begin enable ;
25312: ENABLE
// if not hInvincible then
25313: LD_EXP 105
25317: NOT
25318: IFFALSE 25322
// exit ;
25320: GO 25366
// for i in hInvincible do
25322: LD_ADDR_VAR 0 1
25326: PUSH
25327: LD_EXP 105
25331: PUSH
25332: FOR_IN
25333: IFFALSE 25364
// if GetLives ( i ) < 1000 then
25335: LD_VAR 0 1
25339: PPUSH
25340: CALL_OW 256
25344: PUSH
25345: LD_INT 1000
25347: LESS
25348: IFFALSE 25362
// SetLives ( i , 1000 ) ;
25350: LD_VAR 0 1
25354: PPUSH
25355: LD_INT 1000
25357: PPUSH
25358: CALL_OW 234
25362: GO 25332
25364: POP
25365: POP
// end ;
25366: PPOPN 1
25368: END
// export function hHackInvincible ; var i ; begin
25369: LD_INT 0
25371: PPUSH
25372: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25373: LD_ADDR_VAR 0 2
25377: PUSH
25378: LD_INT 2
25380: PUSH
25381: LD_INT 21
25383: PUSH
25384: LD_INT 1
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: PUSH
25391: LD_INT 21
25393: PUSH
25394: LD_INT 2
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: LIST
25405: PPUSH
25406: CALL_OW 69
25410: PUSH
25411: FOR_IN
25412: IFFALSE 25473
// if IsSelected ( i ) then
25414: LD_VAR 0 2
25418: PPUSH
25419: CALL_OW 306
25423: IFFALSE 25471
// begin if i in hInvincible then
25425: LD_VAR 0 2
25429: PUSH
25430: LD_EXP 105
25434: IN
25435: IFFALSE 25455
// hInvincible := hInvincible diff i else
25437: LD_ADDR_EXP 105
25441: PUSH
25442: LD_EXP 105
25446: PUSH
25447: LD_VAR 0 2
25451: DIFF
25452: ST_TO_ADDR
25453: GO 25471
// hInvincible := hInvincible union i ;
25455: LD_ADDR_EXP 105
25459: PUSH
25460: LD_EXP 105
25464: PUSH
25465: LD_VAR 0 2
25469: UNION
25470: ST_TO_ADDR
// end ;
25471: GO 25411
25473: POP
25474: POP
// end ;
25475: LD_VAR 0 1
25479: RET
// export function hHackInvisible ; var i , j ; begin
25480: LD_INT 0
25482: PPUSH
25483: PPUSH
25484: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25485: LD_ADDR_VAR 0 2
25489: PUSH
25490: LD_INT 21
25492: PUSH
25493: LD_INT 1
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PPUSH
25500: CALL_OW 69
25504: PUSH
25505: FOR_IN
25506: IFFALSE 25530
// if IsSelected ( i ) then
25508: LD_VAR 0 2
25512: PPUSH
25513: CALL_OW 306
25517: IFFALSE 25528
// ComForceInvisible ( i ) ;
25519: LD_VAR 0 2
25523: PPUSH
25524: CALL_OW 496
25528: GO 25505
25530: POP
25531: POP
// end ;
25532: LD_VAR 0 1
25536: RET
// export function hHackChangeYourSide ; begin
25537: LD_INT 0
25539: PPUSH
// if your_side = 8 then
25540: LD_OWVAR 2
25544: PUSH
25545: LD_INT 8
25547: EQUAL
25548: IFFALSE 25560
// your_side := 0 else
25550: LD_ADDR_OWVAR 2
25554: PUSH
25555: LD_INT 0
25557: ST_TO_ADDR
25558: GO 25574
// your_side := your_side + 1 ;
25560: LD_ADDR_OWVAR 2
25564: PUSH
25565: LD_OWVAR 2
25569: PUSH
25570: LD_INT 1
25572: PLUS
25573: ST_TO_ADDR
// end ;
25574: LD_VAR 0 1
25578: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25579: LD_INT 0
25581: PPUSH
25582: PPUSH
25583: PPUSH
// for i in all_units do
25584: LD_ADDR_VAR 0 2
25588: PUSH
25589: LD_OWVAR 3
25593: PUSH
25594: FOR_IN
25595: IFFALSE 25673
// if IsSelected ( i ) then
25597: LD_VAR 0 2
25601: PPUSH
25602: CALL_OW 306
25606: IFFALSE 25671
// begin j := GetSide ( i ) ;
25608: LD_ADDR_VAR 0 3
25612: PUSH
25613: LD_VAR 0 2
25617: PPUSH
25618: CALL_OW 255
25622: ST_TO_ADDR
// if j = 8 then
25623: LD_VAR 0 3
25627: PUSH
25628: LD_INT 8
25630: EQUAL
25631: IFFALSE 25643
// j := 0 else
25633: LD_ADDR_VAR 0 3
25637: PUSH
25638: LD_INT 0
25640: ST_TO_ADDR
25641: GO 25657
// j := j + 1 ;
25643: LD_ADDR_VAR 0 3
25647: PUSH
25648: LD_VAR 0 3
25652: PUSH
25653: LD_INT 1
25655: PLUS
25656: ST_TO_ADDR
// SetSide ( i , j ) ;
25657: LD_VAR 0 2
25661: PPUSH
25662: LD_VAR 0 3
25666: PPUSH
25667: CALL_OW 235
// end ;
25671: GO 25594
25673: POP
25674: POP
// end ;
25675: LD_VAR 0 1
25679: RET
// export function hHackFog ; begin
25680: LD_INT 0
25682: PPUSH
// FogOff ( true ) ;
25683: LD_INT 1
25685: PPUSH
25686: CALL_OW 344
// end ;
25690: LD_VAR 0 1
25694: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25695: LD_INT 0
25697: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25698: LD_VAR 0 1
25702: PPUSH
25703: LD_VAR 0 2
25707: PPUSH
25708: LD_VAR 0 3
25712: PPUSH
25713: LD_INT 1
25715: PPUSH
25716: LD_INT 1
25718: PPUSH
25719: CALL_OW 483
// CenterOnXY ( x , y ) ;
25723: LD_VAR 0 2
25727: PPUSH
25728: LD_VAR 0 3
25732: PPUSH
25733: CALL_OW 84
// end ; end_of_file
25737: LD_VAR 0 4
25741: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25742: LD_INT 0
25744: PPUSH
25745: PPUSH
25746: PPUSH
25747: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25748: LD_VAR 0 1
25752: PPUSH
25753: CALL_OW 264
25757: PUSH
25758: LD_EXP 36
25762: EQUAL
25763: IFFALSE 25835
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25765: LD_INT 68
25767: PPUSH
25768: LD_VAR 0 1
25772: PPUSH
25773: CALL_OW 255
25777: PPUSH
25778: CALL_OW 321
25782: PUSH
25783: LD_INT 2
25785: EQUAL
25786: IFFALSE 25798
// eff := 70 else
25788: LD_ADDR_VAR 0 4
25792: PUSH
25793: LD_INT 70
25795: ST_TO_ADDR
25796: GO 25806
// eff := 30 ;
25798: LD_ADDR_VAR 0 4
25802: PUSH
25803: LD_INT 30
25805: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25806: LD_VAR 0 1
25810: PPUSH
25811: CALL_OW 250
25815: PPUSH
25816: LD_VAR 0 1
25820: PPUSH
25821: CALL_OW 251
25825: PPUSH
25826: LD_VAR 0 4
25830: PPUSH
25831: CALL_OW 495
// end ; end ;
25835: LD_VAR 0 2
25839: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25840: LD_INT 0
25842: PPUSH
// end ;
25843: LD_VAR 0 4
25847: RET
// export function SOS_Command ( cmd ) ; begin
25848: LD_INT 0
25850: PPUSH
// end ;
25851: LD_VAR 0 2
25855: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25856: LD_INT 0
25858: PPUSH
// if cmd = 121 then
25859: LD_VAR 0 1
25863: PUSH
25864: LD_INT 121
25866: EQUAL
25867: IFFALSE 25869
// end ;
25869: LD_VAR 0 6
25873: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25874: LD_INT 0
25876: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25877: LD_VAR 0 1
25881: PUSH
25882: LD_INT 250
25884: EQUAL
25885: PUSH
25886: LD_VAR 0 2
25890: PPUSH
25891: CALL_OW 264
25895: PUSH
25896: LD_EXP 39
25900: EQUAL
25901: AND
25902: IFFALSE 25923
// MinerPlaceMine ( unit , x , y ) ;
25904: LD_VAR 0 2
25908: PPUSH
25909: LD_VAR 0 4
25913: PPUSH
25914: LD_VAR 0 5
25918: PPUSH
25919: CALL 28272 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
25923: LD_VAR 0 1
25927: PUSH
25928: LD_INT 251
25930: EQUAL
25931: PUSH
25932: LD_VAR 0 2
25936: PPUSH
25937: CALL_OW 264
25941: PUSH
25942: LD_EXP 39
25946: EQUAL
25947: AND
25948: IFFALSE 25969
// MinerDetonateMine ( unit , x , y ) ;
25950: LD_VAR 0 2
25954: PPUSH
25955: LD_VAR 0 4
25959: PPUSH
25960: LD_VAR 0 5
25964: PPUSH
25965: CALL 28549 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
25969: LD_VAR 0 1
25973: PUSH
25974: LD_INT 252
25976: EQUAL
25977: PUSH
25978: LD_VAR 0 2
25982: PPUSH
25983: CALL_OW 264
25987: PUSH
25988: LD_EXP 39
25992: EQUAL
25993: AND
25994: IFFALSE 26015
// MinerCreateMinefield ( unit , x , y ) ;
25996: LD_VAR 0 2
26000: PPUSH
26001: LD_VAR 0 4
26005: PPUSH
26006: LD_VAR 0 5
26010: PPUSH
26011: CALL 28966 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26015: LD_VAR 0 1
26019: PUSH
26020: LD_INT 253
26022: EQUAL
26023: PUSH
26024: LD_VAR 0 2
26028: PPUSH
26029: CALL_OW 257
26033: PUSH
26034: LD_INT 5
26036: EQUAL
26037: AND
26038: IFFALSE 26059
// ComBinocular ( unit , x , y ) ;
26040: LD_VAR 0 2
26044: PPUSH
26045: LD_VAR 0 4
26049: PPUSH
26050: LD_VAR 0 5
26054: PPUSH
26055: CALL 29337 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26059: LD_VAR 0 1
26063: PUSH
26064: LD_INT 254
26066: EQUAL
26067: PUSH
26068: LD_VAR 0 2
26072: PPUSH
26073: CALL_OW 264
26077: PUSH
26078: LD_EXP 34
26082: EQUAL
26083: AND
26084: PUSH
26085: LD_VAR 0 3
26089: PPUSH
26090: CALL_OW 263
26094: PUSH
26095: LD_INT 3
26097: EQUAL
26098: AND
26099: IFFALSE 26115
// HackDestroyVehicle ( unit , selectedUnit ) ;
26101: LD_VAR 0 2
26105: PPUSH
26106: LD_VAR 0 3
26110: PPUSH
26111: CALL 27632 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26115: LD_VAR 0 1
26119: PUSH
26120: LD_INT 255
26122: EQUAL
26123: PUSH
26124: LD_VAR 0 2
26128: PPUSH
26129: CALL_OW 264
26133: PUSH
26134: LD_INT 14
26136: PUSH
26137: LD_INT 53
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: IN
26144: AND
26145: PUSH
26146: LD_VAR 0 4
26150: PPUSH
26151: LD_VAR 0 5
26155: PPUSH
26156: CALL_OW 488
26160: AND
26161: IFFALSE 26185
// CutTreeXYR ( unit , x , y , 12 ) ;
26163: LD_VAR 0 2
26167: PPUSH
26168: LD_VAR 0 4
26172: PPUSH
26173: LD_VAR 0 5
26177: PPUSH
26178: LD_INT 12
26180: PPUSH
26181: CALL 26198 0 4
// end ;
26185: LD_VAR 0 6
26189: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
26190: LD_INT 0
26192: PPUSH
// end ;
26193: LD_VAR 0 4
26197: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26198: LD_INT 0
26200: PPUSH
26201: PPUSH
26202: PPUSH
26203: PPUSH
26204: PPUSH
26205: PPUSH
26206: PPUSH
26207: PPUSH
26208: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26209: LD_VAR 0 1
26213: NOT
26214: PUSH
26215: LD_VAR 0 2
26219: PPUSH
26220: LD_VAR 0 3
26224: PPUSH
26225: CALL_OW 488
26229: NOT
26230: OR
26231: PUSH
26232: LD_VAR 0 4
26236: NOT
26237: OR
26238: IFFALSE 26242
// exit ;
26240: GO 26582
// list := [ ] ;
26242: LD_ADDR_VAR 0 13
26246: PUSH
26247: EMPTY
26248: ST_TO_ADDR
// if x - r < 0 then
26249: LD_VAR 0 2
26253: PUSH
26254: LD_VAR 0 4
26258: MINUS
26259: PUSH
26260: LD_INT 0
26262: LESS
26263: IFFALSE 26275
// min_x := 0 else
26265: LD_ADDR_VAR 0 7
26269: PUSH
26270: LD_INT 0
26272: ST_TO_ADDR
26273: GO 26291
// min_x := x - r ;
26275: LD_ADDR_VAR 0 7
26279: PUSH
26280: LD_VAR 0 2
26284: PUSH
26285: LD_VAR 0 4
26289: MINUS
26290: ST_TO_ADDR
// if y - r < 0 then
26291: LD_VAR 0 3
26295: PUSH
26296: LD_VAR 0 4
26300: MINUS
26301: PUSH
26302: LD_INT 0
26304: LESS
26305: IFFALSE 26317
// min_y := 0 else
26307: LD_ADDR_VAR 0 8
26311: PUSH
26312: LD_INT 0
26314: ST_TO_ADDR
26315: GO 26333
// min_y := y - r ;
26317: LD_ADDR_VAR 0 8
26321: PUSH
26322: LD_VAR 0 3
26326: PUSH
26327: LD_VAR 0 4
26331: MINUS
26332: ST_TO_ADDR
// max_x := x + r ;
26333: LD_ADDR_VAR 0 9
26337: PUSH
26338: LD_VAR 0 2
26342: PUSH
26343: LD_VAR 0 4
26347: PLUS
26348: ST_TO_ADDR
// max_y := y + r ;
26349: LD_ADDR_VAR 0 10
26353: PUSH
26354: LD_VAR 0 3
26358: PUSH
26359: LD_VAR 0 4
26363: PLUS
26364: ST_TO_ADDR
// for _x = min_x to max_x do
26365: LD_ADDR_VAR 0 11
26369: PUSH
26370: DOUBLE
26371: LD_VAR 0 7
26375: DEC
26376: ST_TO_ADDR
26377: LD_VAR 0 9
26381: PUSH
26382: FOR_TO
26383: IFFALSE 26500
// for _y = min_y to max_y do
26385: LD_ADDR_VAR 0 12
26389: PUSH
26390: DOUBLE
26391: LD_VAR 0 8
26395: DEC
26396: ST_TO_ADDR
26397: LD_VAR 0 10
26401: PUSH
26402: FOR_TO
26403: IFFALSE 26496
// begin if not ValidHex ( _x , _y ) then
26405: LD_VAR 0 11
26409: PPUSH
26410: LD_VAR 0 12
26414: PPUSH
26415: CALL_OW 488
26419: NOT
26420: IFFALSE 26424
// continue ;
26422: GO 26402
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26424: LD_VAR 0 11
26428: PPUSH
26429: LD_VAR 0 12
26433: PPUSH
26434: CALL_OW 351
26438: PUSH
26439: LD_VAR 0 11
26443: PPUSH
26444: LD_VAR 0 12
26448: PPUSH
26449: CALL_OW 554
26453: AND
26454: IFFALSE 26494
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26456: LD_ADDR_VAR 0 13
26460: PUSH
26461: LD_VAR 0 13
26465: PPUSH
26466: LD_VAR 0 13
26470: PUSH
26471: LD_INT 1
26473: PLUS
26474: PPUSH
26475: LD_VAR 0 11
26479: PUSH
26480: LD_VAR 0 12
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: PPUSH
26489: CALL_OW 2
26493: ST_TO_ADDR
// end ;
26494: GO 26402
26496: POP
26497: POP
26498: GO 26382
26500: POP
26501: POP
// if not list then
26502: LD_VAR 0 13
26506: NOT
26507: IFFALSE 26511
// exit ;
26509: GO 26582
// for i in list do
26511: LD_ADDR_VAR 0 6
26515: PUSH
26516: LD_VAR 0 13
26520: PUSH
26521: FOR_IN
26522: IFFALSE 26580
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26524: LD_VAR 0 1
26528: PPUSH
26529: LD_STRING M
26531: PUSH
26532: LD_VAR 0 6
26536: PUSH
26537: LD_INT 1
26539: ARRAY
26540: PUSH
26541: LD_VAR 0 6
26545: PUSH
26546: LD_INT 2
26548: ARRAY
26549: PUSH
26550: LD_INT 0
26552: PUSH
26553: LD_INT 0
26555: PUSH
26556: LD_INT 0
26558: PUSH
26559: LD_INT 0
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: LIST
26566: LIST
26567: LIST
26568: LIST
26569: LIST
26570: PUSH
26571: EMPTY
26572: LIST
26573: PPUSH
26574: CALL_OW 447
26578: GO 26521
26580: POP
26581: POP
// end ;
26582: LD_VAR 0 5
26586: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26587: LD_EXP 108
26591: NOT
26592: IFFALSE 26642
26594: GO 26596
26596: DISABLE
// begin initHack := true ;
26597: LD_ADDR_EXP 108
26601: PUSH
26602: LD_INT 1
26604: ST_TO_ADDR
// hackTanks := [ ] ;
26605: LD_ADDR_EXP 109
26609: PUSH
26610: EMPTY
26611: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26612: LD_ADDR_EXP 110
26616: PUSH
26617: EMPTY
26618: ST_TO_ADDR
// hackLimit := 3 ;
26619: LD_ADDR_EXP 111
26623: PUSH
26624: LD_INT 3
26626: ST_TO_ADDR
// hackDist := 12 ;
26627: LD_ADDR_EXP 112
26631: PUSH
26632: LD_INT 12
26634: ST_TO_ADDR
// hackCounter := [ ] ;
26635: LD_ADDR_EXP 113
26639: PUSH
26640: EMPTY
26641: ST_TO_ADDR
// end ;
26642: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26643: LD_EXP 108
26647: PUSH
26648: LD_INT 34
26650: PUSH
26651: LD_EXP 34
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: PPUSH
26660: CALL_OW 69
26664: AND
26665: IFFALSE 26920
26667: GO 26669
26669: DISABLE
26670: LD_INT 0
26672: PPUSH
26673: PPUSH
// begin enable ;
26674: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26675: LD_ADDR_VAR 0 1
26679: PUSH
26680: LD_INT 34
26682: PUSH
26683: LD_EXP 34
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: PPUSH
26692: CALL_OW 69
26696: PUSH
26697: FOR_IN
26698: IFFALSE 26918
// begin if not i in hackTanks then
26700: LD_VAR 0 1
26704: PUSH
26705: LD_EXP 109
26709: IN
26710: NOT
26711: IFFALSE 26794
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26713: LD_ADDR_EXP 109
26717: PUSH
26718: LD_EXP 109
26722: PPUSH
26723: LD_EXP 109
26727: PUSH
26728: LD_INT 1
26730: PLUS
26731: PPUSH
26732: LD_VAR 0 1
26736: PPUSH
26737: CALL_OW 1
26741: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26742: LD_ADDR_EXP 110
26746: PUSH
26747: LD_EXP 110
26751: PPUSH
26752: LD_EXP 110
26756: PUSH
26757: LD_INT 1
26759: PLUS
26760: PPUSH
26761: EMPTY
26762: PPUSH
26763: CALL_OW 1
26767: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26768: LD_ADDR_EXP 113
26772: PUSH
26773: LD_EXP 113
26777: PPUSH
26778: LD_EXP 113
26782: PUSH
26783: LD_INT 1
26785: PLUS
26786: PPUSH
26787: EMPTY
26788: PPUSH
26789: CALL_OW 1
26793: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26794: LD_VAR 0 1
26798: PPUSH
26799: CALL_OW 302
26803: NOT
26804: IFFALSE 26817
// begin HackUnlinkAll ( i ) ;
26806: LD_VAR 0 1
26810: PPUSH
26811: CALL 26923 0 1
// continue ;
26815: GO 26697
// end ; HackCheckCapturedStatus ( i ) ;
26817: LD_VAR 0 1
26821: PPUSH
26822: CALL 27366 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26826: LD_ADDR_VAR 0 2
26830: PUSH
26831: LD_INT 81
26833: PUSH
26834: LD_VAR 0 1
26838: PPUSH
26839: CALL_OW 255
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: PUSH
26848: LD_INT 33
26850: PUSH
26851: LD_INT 3
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: PUSH
26858: LD_INT 91
26860: PUSH
26861: LD_VAR 0 1
26865: PUSH
26866: LD_EXP 112
26870: PUSH
26871: EMPTY
26872: LIST
26873: LIST
26874: LIST
26875: PUSH
26876: LD_INT 50
26878: PUSH
26879: EMPTY
26880: LIST
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: PPUSH
26888: CALL_OW 69
26892: ST_TO_ADDR
// if not tmp then
26893: LD_VAR 0 2
26897: NOT
26898: IFFALSE 26902
// continue ;
26900: GO 26697
// HackLink ( i , tmp ) ;
26902: LD_VAR 0 1
26906: PPUSH
26907: LD_VAR 0 2
26911: PPUSH
26912: CALL 27059 0 2
// end ;
26916: GO 26697
26918: POP
26919: POP
// end ;
26920: PPOPN 2
26922: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
26923: LD_INT 0
26925: PPUSH
26926: PPUSH
26927: PPUSH
// if not hack in hackTanks then
26928: LD_VAR 0 1
26932: PUSH
26933: LD_EXP 109
26937: IN
26938: NOT
26939: IFFALSE 26943
// exit ;
26941: GO 27054
// index := GetElementIndex ( hackTanks , hack ) ;
26943: LD_ADDR_VAR 0 4
26947: PUSH
26948: LD_EXP 109
26952: PPUSH
26953: LD_VAR 0 1
26957: PPUSH
26958: CALL 34528 0 2
26962: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
26963: LD_EXP 110
26967: PUSH
26968: LD_VAR 0 4
26972: ARRAY
26973: IFFALSE 27054
// begin for i in hackTanksCaptured [ index ] do
26975: LD_ADDR_VAR 0 3
26979: PUSH
26980: LD_EXP 110
26984: PUSH
26985: LD_VAR 0 4
26989: ARRAY
26990: PUSH
26991: FOR_IN
26992: IFFALSE 27018
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26994: LD_VAR 0 3
26998: PUSH
26999: LD_INT 1
27001: ARRAY
27002: PPUSH
27003: LD_VAR 0 3
27007: PUSH
27008: LD_INT 2
27010: ARRAY
27011: PPUSH
27012: CALL_OW 235
27016: GO 26991
27018: POP
27019: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27020: LD_ADDR_EXP 110
27024: PUSH
27025: LD_EXP 110
27029: PPUSH
27030: LD_VAR 0 4
27034: PPUSH
27035: EMPTY
27036: PPUSH
27037: CALL_OW 1
27041: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27042: LD_VAR 0 1
27046: PPUSH
27047: LD_INT 0
27049: PPUSH
27050: CALL_OW 505
// end ; end ;
27054: LD_VAR 0 2
27058: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27059: LD_INT 0
27061: PPUSH
27062: PPUSH
27063: PPUSH
// if not hack in hackTanks or not vehicles then
27064: LD_VAR 0 1
27068: PUSH
27069: LD_EXP 109
27073: IN
27074: NOT
27075: PUSH
27076: LD_VAR 0 2
27080: NOT
27081: OR
27082: IFFALSE 27086
// exit ;
27084: GO 27361
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27086: LD_ADDR_VAR 0 2
27090: PUSH
27091: LD_VAR 0 1
27095: PPUSH
27096: LD_VAR 0 2
27100: PPUSH
27101: LD_INT 1
27103: PPUSH
27104: LD_INT 1
27106: PPUSH
27107: CALL 35178 0 4
27111: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27112: LD_ADDR_VAR 0 5
27116: PUSH
27117: LD_EXP 109
27121: PPUSH
27122: LD_VAR 0 1
27126: PPUSH
27127: CALL 34528 0 2
27131: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27132: LD_EXP 110
27136: PUSH
27137: LD_VAR 0 5
27141: ARRAY
27142: PUSH
27143: LD_EXP 111
27147: LESS
27148: IFFALSE 27337
// begin for i := 1 to vehicles do
27150: LD_ADDR_VAR 0 4
27154: PUSH
27155: DOUBLE
27156: LD_INT 1
27158: DEC
27159: ST_TO_ADDR
27160: LD_VAR 0 2
27164: PUSH
27165: FOR_TO
27166: IFFALSE 27335
// begin if hackTanksCaptured [ index ] = hackLimit then
27168: LD_EXP 110
27172: PUSH
27173: LD_VAR 0 5
27177: ARRAY
27178: PUSH
27179: LD_EXP 111
27183: EQUAL
27184: IFFALSE 27188
// break ;
27186: GO 27335
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27188: LD_ADDR_EXP 113
27192: PUSH
27193: LD_EXP 113
27197: PPUSH
27198: LD_VAR 0 5
27202: PPUSH
27203: LD_EXP 113
27207: PUSH
27208: LD_VAR 0 5
27212: ARRAY
27213: PUSH
27214: LD_INT 1
27216: PLUS
27217: PPUSH
27218: CALL_OW 1
27222: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27223: LD_ADDR_EXP 110
27227: PUSH
27228: LD_EXP 110
27232: PPUSH
27233: LD_VAR 0 5
27237: PUSH
27238: LD_EXP 110
27242: PUSH
27243: LD_VAR 0 5
27247: ARRAY
27248: PUSH
27249: LD_INT 1
27251: PLUS
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: PPUSH
27257: LD_VAR 0 2
27261: PUSH
27262: LD_VAR 0 4
27266: ARRAY
27267: PUSH
27268: LD_VAR 0 2
27272: PUSH
27273: LD_VAR 0 4
27277: ARRAY
27278: PPUSH
27279: CALL_OW 255
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PPUSH
27288: CALL 34743 0 3
27292: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27293: LD_VAR 0 2
27297: PUSH
27298: LD_VAR 0 4
27302: ARRAY
27303: PPUSH
27304: LD_VAR 0 1
27308: PPUSH
27309: CALL_OW 255
27313: PPUSH
27314: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27318: LD_VAR 0 2
27322: PUSH
27323: LD_VAR 0 4
27327: ARRAY
27328: PPUSH
27329: CALL_OW 141
// end ;
27333: GO 27165
27335: POP
27336: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27337: LD_VAR 0 1
27341: PPUSH
27342: LD_EXP 110
27346: PUSH
27347: LD_VAR 0 5
27351: ARRAY
27352: PUSH
27353: LD_INT 0
27355: PLUS
27356: PPUSH
27357: CALL_OW 505
// end ;
27361: LD_VAR 0 3
27365: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27366: LD_INT 0
27368: PPUSH
27369: PPUSH
27370: PPUSH
27371: PPUSH
// if not hack in hackTanks then
27372: LD_VAR 0 1
27376: PUSH
27377: LD_EXP 109
27381: IN
27382: NOT
27383: IFFALSE 27387
// exit ;
27385: GO 27627
// index := GetElementIndex ( hackTanks , hack ) ;
27387: LD_ADDR_VAR 0 4
27391: PUSH
27392: LD_EXP 109
27396: PPUSH
27397: LD_VAR 0 1
27401: PPUSH
27402: CALL 34528 0 2
27406: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27407: LD_ADDR_VAR 0 3
27411: PUSH
27412: DOUBLE
27413: LD_EXP 110
27417: PUSH
27418: LD_VAR 0 4
27422: ARRAY
27423: INC
27424: ST_TO_ADDR
27425: LD_INT 1
27427: PUSH
27428: FOR_DOWNTO
27429: IFFALSE 27601
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27431: LD_ADDR_VAR 0 5
27435: PUSH
27436: LD_EXP 110
27440: PUSH
27441: LD_VAR 0 4
27445: ARRAY
27446: PUSH
27447: LD_VAR 0 3
27451: ARRAY
27452: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27453: LD_VAR 0 5
27457: PUSH
27458: LD_INT 1
27460: ARRAY
27461: PPUSH
27462: CALL_OW 302
27466: NOT
27467: PUSH
27468: LD_VAR 0 5
27472: PUSH
27473: LD_INT 1
27475: ARRAY
27476: PPUSH
27477: CALL_OW 255
27481: PUSH
27482: LD_VAR 0 1
27486: PPUSH
27487: CALL_OW 255
27491: NONEQUAL
27492: OR
27493: IFFALSE 27599
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27495: LD_VAR 0 5
27499: PUSH
27500: LD_INT 1
27502: ARRAY
27503: PPUSH
27504: CALL_OW 305
27508: PUSH
27509: LD_VAR 0 5
27513: PUSH
27514: LD_INT 1
27516: ARRAY
27517: PPUSH
27518: CALL_OW 255
27522: PUSH
27523: LD_VAR 0 1
27527: PPUSH
27528: CALL_OW 255
27532: EQUAL
27533: AND
27534: IFFALSE 27558
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27536: LD_VAR 0 5
27540: PUSH
27541: LD_INT 1
27543: ARRAY
27544: PPUSH
27545: LD_VAR 0 5
27549: PUSH
27550: LD_INT 2
27552: ARRAY
27553: PPUSH
27554: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27558: LD_ADDR_EXP 110
27562: PUSH
27563: LD_EXP 110
27567: PPUSH
27568: LD_VAR 0 4
27572: PPUSH
27573: LD_EXP 110
27577: PUSH
27578: LD_VAR 0 4
27582: ARRAY
27583: PPUSH
27584: LD_VAR 0 3
27588: PPUSH
27589: CALL_OW 3
27593: PPUSH
27594: CALL_OW 1
27598: ST_TO_ADDR
// end ; end ;
27599: GO 27428
27601: POP
27602: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27603: LD_VAR 0 1
27607: PPUSH
27608: LD_EXP 110
27612: PUSH
27613: LD_VAR 0 4
27617: ARRAY
27618: PUSH
27619: LD_INT 0
27621: PLUS
27622: PPUSH
27623: CALL_OW 505
// end ;
27627: LD_VAR 0 2
27631: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27632: LD_INT 0
27634: PPUSH
27635: PPUSH
27636: PPUSH
27637: PPUSH
// if not hack in hackTanks then
27638: LD_VAR 0 1
27642: PUSH
27643: LD_EXP 109
27647: IN
27648: NOT
27649: IFFALSE 27653
// exit ;
27651: GO 27738
// index := GetElementIndex ( hackTanks , hack ) ;
27653: LD_ADDR_VAR 0 5
27657: PUSH
27658: LD_EXP 109
27662: PPUSH
27663: LD_VAR 0 1
27667: PPUSH
27668: CALL 34528 0 2
27672: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27673: LD_ADDR_VAR 0 4
27677: PUSH
27678: DOUBLE
27679: LD_INT 1
27681: DEC
27682: ST_TO_ADDR
27683: LD_EXP 110
27687: PUSH
27688: LD_VAR 0 5
27692: ARRAY
27693: PUSH
27694: FOR_TO
27695: IFFALSE 27736
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27697: LD_EXP 110
27701: PUSH
27702: LD_VAR 0 5
27706: ARRAY
27707: PUSH
27708: LD_VAR 0 4
27712: ARRAY
27713: PUSH
27714: LD_INT 1
27716: ARRAY
27717: PUSH
27718: LD_VAR 0 2
27722: EQUAL
27723: IFFALSE 27734
// KillUnit ( vehicle ) ;
27725: LD_VAR 0 2
27729: PPUSH
27730: CALL_OW 66
27734: GO 27694
27736: POP
27737: POP
// end ;
27738: LD_VAR 0 3
27742: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
27743: LD_EXP 114
27747: NOT
27748: IFFALSE 27783
27750: GO 27752
27752: DISABLE
// begin initMiner := true ;
27753: LD_ADDR_EXP 114
27757: PUSH
27758: LD_INT 1
27760: ST_TO_ADDR
// minersList := [ ] ;
27761: LD_ADDR_EXP 115
27765: PUSH
27766: EMPTY
27767: ST_TO_ADDR
// minerMinesList := [ ] ;
27768: LD_ADDR_EXP 116
27772: PUSH
27773: EMPTY
27774: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
27775: LD_ADDR_EXP 117
27779: PUSH
27780: LD_INT 5
27782: ST_TO_ADDR
// end ;
27783: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
27784: LD_EXP 114
27788: PUSH
27789: LD_INT 34
27791: PUSH
27792: LD_EXP 39
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PPUSH
27801: CALL_OW 69
27805: AND
27806: IFFALSE 28269
27808: GO 27810
27810: DISABLE
27811: LD_INT 0
27813: PPUSH
27814: PPUSH
27815: PPUSH
27816: PPUSH
// begin enable ;
27817: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
27818: LD_ADDR_VAR 0 1
27822: PUSH
27823: LD_INT 34
27825: PUSH
27826: LD_EXP 39
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: PPUSH
27835: CALL_OW 69
27839: PUSH
27840: FOR_IN
27841: IFFALSE 27913
// begin if not i in minersList then
27843: LD_VAR 0 1
27847: PUSH
27848: LD_EXP 115
27852: IN
27853: NOT
27854: IFFALSE 27911
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
27856: LD_ADDR_EXP 115
27860: PUSH
27861: LD_EXP 115
27865: PPUSH
27866: LD_EXP 115
27870: PUSH
27871: LD_INT 1
27873: PLUS
27874: PPUSH
27875: LD_VAR 0 1
27879: PPUSH
27880: CALL_OW 1
27884: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27885: LD_ADDR_EXP 116
27889: PUSH
27890: LD_EXP 116
27894: PPUSH
27895: LD_EXP 116
27899: PUSH
27900: LD_INT 1
27902: PLUS
27903: PPUSH
27904: EMPTY
27905: PPUSH
27906: CALL_OW 1
27910: ST_TO_ADDR
// end end ;
27911: GO 27840
27913: POP
27914: POP
// for i := minerMinesList downto 1 do
27915: LD_ADDR_VAR 0 1
27919: PUSH
27920: DOUBLE
27921: LD_EXP 116
27925: INC
27926: ST_TO_ADDR
27927: LD_INT 1
27929: PUSH
27930: FOR_DOWNTO
27931: IFFALSE 28267
// begin if IsLive ( minersList [ i ] ) then
27933: LD_EXP 115
27937: PUSH
27938: LD_VAR 0 1
27942: ARRAY
27943: PPUSH
27944: CALL_OW 300
27948: IFFALSE 27976
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
27950: LD_EXP 115
27954: PUSH
27955: LD_VAR 0 1
27959: ARRAY
27960: PPUSH
27961: LD_EXP 116
27965: PUSH
27966: LD_VAR 0 1
27970: ARRAY
27971: PPUSH
27972: CALL_OW 505
// if not minerMinesList [ i ] then
27976: LD_EXP 116
27980: PUSH
27981: LD_VAR 0 1
27985: ARRAY
27986: NOT
27987: IFFALSE 27991
// continue ;
27989: GO 27930
// for j := minerMinesList [ i ] downto 1 do
27991: LD_ADDR_VAR 0 2
27995: PUSH
27996: DOUBLE
27997: LD_EXP 116
28001: PUSH
28002: LD_VAR 0 1
28006: ARRAY
28007: INC
28008: ST_TO_ADDR
28009: LD_INT 1
28011: PUSH
28012: FOR_DOWNTO
28013: IFFALSE 28263
// begin side := GetSide ( minersList [ i ] ) ;
28015: LD_ADDR_VAR 0 3
28019: PUSH
28020: LD_EXP 115
28024: PUSH
28025: LD_VAR 0 1
28029: ARRAY
28030: PPUSH
28031: CALL_OW 255
28035: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28036: LD_ADDR_VAR 0 4
28040: PUSH
28041: LD_EXP 116
28045: PUSH
28046: LD_VAR 0 1
28050: ARRAY
28051: PUSH
28052: LD_VAR 0 2
28056: ARRAY
28057: PUSH
28058: LD_INT 1
28060: ARRAY
28061: PPUSH
28062: LD_EXP 116
28066: PUSH
28067: LD_VAR 0 1
28071: ARRAY
28072: PUSH
28073: LD_VAR 0 2
28077: ARRAY
28078: PUSH
28079: LD_INT 2
28081: ARRAY
28082: PPUSH
28083: CALL_OW 428
28087: ST_TO_ADDR
// if not tmp then
28088: LD_VAR 0 4
28092: NOT
28093: IFFALSE 28097
// continue ;
28095: GO 28012
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28097: LD_VAR 0 4
28101: PUSH
28102: LD_INT 81
28104: PUSH
28105: LD_VAR 0 3
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: PPUSH
28114: CALL_OW 69
28118: IN
28119: PUSH
28120: LD_EXP 116
28124: PUSH
28125: LD_VAR 0 1
28129: ARRAY
28130: PUSH
28131: LD_VAR 0 2
28135: ARRAY
28136: PUSH
28137: LD_INT 1
28139: ARRAY
28140: PPUSH
28141: LD_EXP 116
28145: PUSH
28146: LD_VAR 0 1
28150: ARRAY
28151: PUSH
28152: LD_VAR 0 2
28156: ARRAY
28157: PUSH
28158: LD_INT 2
28160: ARRAY
28161: PPUSH
28162: CALL_OW 458
28166: AND
28167: IFFALSE 28261
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28169: LD_EXP 116
28173: PUSH
28174: LD_VAR 0 1
28178: ARRAY
28179: PUSH
28180: LD_VAR 0 2
28184: ARRAY
28185: PUSH
28186: LD_INT 1
28188: ARRAY
28189: PPUSH
28190: LD_EXP 116
28194: PUSH
28195: LD_VAR 0 1
28199: ARRAY
28200: PUSH
28201: LD_VAR 0 2
28205: ARRAY
28206: PUSH
28207: LD_INT 2
28209: ARRAY
28210: PPUSH
28211: LD_VAR 0 3
28215: PPUSH
28216: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28220: LD_ADDR_EXP 116
28224: PUSH
28225: LD_EXP 116
28229: PPUSH
28230: LD_VAR 0 1
28234: PPUSH
28235: LD_EXP 116
28239: PUSH
28240: LD_VAR 0 1
28244: ARRAY
28245: PPUSH
28246: LD_VAR 0 2
28250: PPUSH
28251: CALL_OW 3
28255: PPUSH
28256: CALL_OW 1
28260: ST_TO_ADDR
// end ; end ;
28261: GO 28012
28263: POP
28264: POP
// end ;
28265: GO 27930
28267: POP
28268: POP
// end ;
28269: PPOPN 4
28271: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28272: LD_INT 0
28274: PPUSH
28275: PPUSH
// result := false ;
28276: LD_ADDR_VAR 0 4
28280: PUSH
28281: LD_INT 0
28283: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28284: LD_VAR 0 1
28288: PPUSH
28289: CALL_OW 264
28293: PUSH
28294: LD_EXP 39
28298: EQUAL
28299: NOT
28300: IFFALSE 28304
// exit ;
28302: GO 28544
// index := GetElementIndex ( minersList , unit ) ;
28304: LD_ADDR_VAR 0 5
28308: PUSH
28309: LD_EXP 115
28313: PPUSH
28314: LD_VAR 0 1
28318: PPUSH
28319: CALL 34528 0 2
28323: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28324: LD_EXP 116
28328: PUSH
28329: LD_VAR 0 5
28333: ARRAY
28334: PUSH
28335: LD_EXP 117
28339: GREATEREQUAL
28340: IFFALSE 28344
// exit ;
28342: GO 28544
// ComMoveXY ( unit , x , y ) ;
28344: LD_VAR 0 1
28348: PPUSH
28349: LD_VAR 0 2
28353: PPUSH
28354: LD_VAR 0 3
28358: PPUSH
28359: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28363: LD_INT 35
28365: PPUSH
28366: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28370: LD_VAR 0 1
28374: PPUSH
28375: LD_VAR 0 2
28379: PPUSH
28380: LD_VAR 0 3
28384: PPUSH
28385: CALL 65301 0 3
28389: NOT
28390: PUSH
28391: LD_VAR 0 1
28395: PPUSH
28396: CALL_OW 314
28400: AND
28401: IFFALSE 28405
// exit ;
28403: GO 28544
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28405: LD_VAR 0 2
28409: PPUSH
28410: LD_VAR 0 3
28414: PPUSH
28415: CALL_OW 428
28419: PUSH
28420: LD_VAR 0 1
28424: EQUAL
28425: PUSH
28426: LD_VAR 0 1
28430: PPUSH
28431: CALL_OW 314
28435: NOT
28436: AND
28437: IFFALSE 28363
// PlaySoundXY ( x , y , PlantMine ) ;
28439: LD_VAR 0 2
28443: PPUSH
28444: LD_VAR 0 3
28448: PPUSH
28449: LD_STRING PlantMine
28451: PPUSH
28452: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28456: LD_VAR 0 2
28460: PPUSH
28461: LD_VAR 0 3
28465: PPUSH
28466: LD_VAR 0 1
28470: PPUSH
28471: CALL_OW 255
28475: PPUSH
28476: LD_INT 0
28478: PPUSH
28479: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28483: LD_ADDR_EXP 116
28487: PUSH
28488: LD_EXP 116
28492: PPUSH
28493: LD_VAR 0 5
28497: PUSH
28498: LD_EXP 116
28502: PUSH
28503: LD_VAR 0 5
28507: ARRAY
28508: PUSH
28509: LD_INT 1
28511: PLUS
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: PPUSH
28517: LD_VAR 0 2
28521: PUSH
28522: LD_VAR 0 3
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PPUSH
28531: CALL 34743 0 3
28535: ST_TO_ADDR
// result := true ;
28536: LD_ADDR_VAR 0 4
28540: PUSH
28541: LD_INT 1
28543: ST_TO_ADDR
// end ;
28544: LD_VAR 0 4
28548: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28549: LD_INT 0
28551: PPUSH
28552: PPUSH
28553: PPUSH
// if not unit in minersList then
28554: LD_VAR 0 1
28558: PUSH
28559: LD_EXP 115
28563: IN
28564: NOT
28565: IFFALSE 28569
// exit ;
28567: GO 28961
// index := GetElementIndex ( minersList , unit ) ;
28569: LD_ADDR_VAR 0 6
28573: PUSH
28574: LD_EXP 115
28578: PPUSH
28579: LD_VAR 0 1
28583: PPUSH
28584: CALL 34528 0 2
28588: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28589: LD_ADDR_VAR 0 5
28593: PUSH
28594: DOUBLE
28595: LD_EXP 116
28599: PUSH
28600: LD_VAR 0 6
28604: ARRAY
28605: INC
28606: ST_TO_ADDR
28607: LD_INT 1
28609: PUSH
28610: FOR_DOWNTO
28611: IFFALSE 28772
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28613: LD_EXP 116
28617: PUSH
28618: LD_VAR 0 6
28622: ARRAY
28623: PUSH
28624: LD_VAR 0 5
28628: ARRAY
28629: PUSH
28630: LD_INT 1
28632: ARRAY
28633: PUSH
28634: LD_VAR 0 2
28638: EQUAL
28639: PUSH
28640: LD_EXP 116
28644: PUSH
28645: LD_VAR 0 6
28649: ARRAY
28650: PUSH
28651: LD_VAR 0 5
28655: ARRAY
28656: PUSH
28657: LD_INT 2
28659: ARRAY
28660: PUSH
28661: LD_VAR 0 3
28665: EQUAL
28666: AND
28667: IFFALSE 28770
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28669: LD_EXP 116
28673: PUSH
28674: LD_VAR 0 6
28678: ARRAY
28679: PUSH
28680: LD_VAR 0 5
28684: ARRAY
28685: PUSH
28686: LD_INT 1
28688: ARRAY
28689: PPUSH
28690: LD_EXP 116
28694: PUSH
28695: LD_VAR 0 6
28699: ARRAY
28700: PUSH
28701: LD_VAR 0 5
28705: ARRAY
28706: PUSH
28707: LD_INT 2
28709: ARRAY
28710: PPUSH
28711: LD_VAR 0 1
28715: PPUSH
28716: CALL_OW 255
28720: PPUSH
28721: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28725: LD_ADDR_EXP 116
28729: PUSH
28730: LD_EXP 116
28734: PPUSH
28735: LD_VAR 0 6
28739: PPUSH
28740: LD_EXP 116
28744: PUSH
28745: LD_VAR 0 6
28749: ARRAY
28750: PPUSH
28751: LD_VAR 0 5
28755: PPUSH
28756: CALL_OW 3
28760: PPUSH
28761: CALL_OW 1
28765: ST_TO_ADDR
// exit ;
28766: POP
28767: POP
28768: GO 28961
// end ; end ;
28770: GO 28610
28772: POP
28773: POP
// for i := minerMinesList [ index ] downto 1 do
28774: LD_ADDR_VAR 0 5
28778: PUSH
28779: DOUBLE
28780: LD_EXP 116
28784: PUSH
28785: LD_VAR 0 6
28789: ARRAY
28790: INC
28791: ST_TO_ADDR
28792: LD_INT 1
28794: PUSH
28795: FOR_DOWNTO
28796: IFFALSE 28959
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
28798: LD_EXP 116
28802: PUSH
28803: LD_VAR 0 6
28807: ARRAY
28808: PUSH
28809: LD_VAR 0 5
28813: ARRAY
28814: PUSH
28815: LD_INT 1
28817: ARRAY
28818: PPUSH
28819: LD_EXP 116
28823: PUSH
28824: LD_VAR 0 6
28828: ARRAY
28829: PUSH
28830: LD_VAR 0 5
28834: ARRAY
28835: PUSH
28836: LD_INT 2
28838: ARRAY
28839: PPUSH
28840: LD_VAR 0 2
28844: PPUSH
28845: LD_VAR 0 3
28849: PPUSH
28850: CALL_OW 298
28854: PUSH
28855: LD_INT 6
28857: LESS
28858: IFFALSE 28957
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28860: LD_EXP 116
28864: PUSH
28865: LD_VAR 0 6
28869: ARRAY
28870: PUSH
28871: LD_VAR 0 5
28875: ARRAY
28876: PUSH
28877: LD_INT 1
28879: ARRAY
28880: PPUSH
28881: LD_EXP 116
28885: PUSH
28886: LD_VAR 0 6
28890: ARRAY
28891: PUSH
28892: LD_VAR 0 5
28896: ARRAY
28897: PUSH
28898: LD_INT 2
28900: ARRAY
28901: PPUSH
28902: LD_VAR 0 1
28906: PPUSH
28907: CALL_OW 255
28911: PPUSH
28912: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28916: LD_ADDR_EXP 116
28920: PUSH
28921: LD_EXP 116
28925: PPUSH
28926: LD_VAR 0 6
28930: PPUSH
28931: LD_EXP 116
28935: PUSH
28936: LD_VAR 0 6
28940: ARRAY
28941: PPUSH
28942: LD_VAR 0 5
28946: PPUSH
28947: CALL_OW 3
28951: PPUSH
28952: CALL_OW 1
28956: ST_TO_ADDR
// end ; end ;
28957: GO 28795
28959: POP
28960: POP
// end ;
28961: LD_VAR 0 4
28965: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
28966: LD_INT 0
28968: PPUSH
28969: PPUSH
28970: PPUSH
28971: PPUSH
28972: PPUSH
28973: PPUSH
28974: PPUSH
28975: PPUSH
28976: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
28977: LD_VAR 0 1
28981: PPUSH
28982: CALL_OW 264
28986: PUSH
28987: LD_EXP 39
28991: EQUAL
28992: NOT
28993: PUSH
28994: LD_VAR 0 1
28998: PUSH
28999: LD_EXP 115
29003: IN
29004: NOT
29005: OR
29006: IFFALSE 29010
// exit ;
29008: GO 29332
// index := GetElementIndex ( minersList , unit ) ;
29010: LD_ADDR_VAR 0 6
29014: PUSH
29015: LD_EXP 115
29019: PPUSH
29020: LD_VAR 0 1
29024: PPUSH
29025: CALL 34528 0 2
29029: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29030: LD_ADDR_VAR 0 8
29034: PUSH
29035: LD_EXP 117
29039: PUSH
29040: LD_EXP 116
29044: PUSH
29045: LD_VAR 0 6
29049: ARRAY
29050: MINUS
29051: ST_TO_ADDR
// if not minesFreeAmount then
29052: LD_VAR 0 8
29056: NOT
29057: IFFALSE 29061
// exit ;
29059: GO 29332
// tmp := [ ] ;
29061: LD_ADDR_VAR 0 7
29065: PUSH
29066: EMPTY
29067: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29068: LD_ADDR_VAR 0 5
29072: PUSH
29073: DOUBLE
29074: LD_INT 1
29076: DEC
29077: ST_TO_ADDR
29078: LD_VAR 0 8
29082: PUSH
29083: FOR_TO
29084: IFFALSE 29279
// begin _d := rand ( 0 , 5 ) ;
29086: LD_ADDR_VAR 0 11
29090: PUSH
29091: LD_INT 0
29093: PPUSH
29094: LD_INT 5
29096: PPUSH
29097: CALL_OW 12
29101: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29102: LD_ADDR_VAR 0 12
29106: PUSH
29107: LD_INT 2
29109: PPUSH
29110: LD_INT 6
29112: PPUSH
29113: CALL_OW 12
29117: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29118: LD_ADDR_VAR 0 9
29122: PUSH
29123: LD_VAR 0 2
29127: PPUSH
29128: LD_VAR 0 11
29132: PPUSH
29133: LD_VAR 0 12
29137: PPUSH
29138: CALL_OW 272
29142: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29143: LD_ADDR_VAR 0 10
29147: PUSH
29148: LD_VAR 0 3
29152: PPUSH
29153: LD_VAR 0 11
29157: PPUSH
29158: LD_VAR 0 12
29162: PPUSH
29163: CALL_OW 273
29167: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29168: LD_VAR 0 9
29172: PPUSH
29173: LD_VAR 0 10
29177: PPUSH
29178: CALL_OW 488
29182: PUSH
29183: LD_VAR 0 9
29187: PUSH
29188: LD_VAR 0 10
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PUSH
29197: LD_VAR 0 7
29201: IN
29202: NOT
29203: AND
29204: PUSH
29205: LD_VAR 0 9
29209: PPUSH
29210: LD_VAR 0 10
29214: PPUSH
29215: CALL_OW 458
29219: NOT
29220: AND
29221: IFFALSE 29263
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29223: LD_ADDR_VAR 0 7
29227: PUSH
29228: LD_VAR 0 7
29232: PPUSH
29233: LD_VAR 0 7
29237: PUSH
29238: LD_INT 1
29240: PLUS
29241: PPUSH
29242: LD_VAR 0 9
29246: PUSH
29247: LD_VAR 0 10
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PPUSH
29256: CALL_OW 1
29260: ST_TO_ADDR
29261: GO 29277
// i := i - 1 ;
29263: LD_ADDR_VAR 0 5
29267: PUSH
29268: LD_VAR 0 5
29272: PUSH
29273: LD_INT 1
29275: MINUS
29276: ST_TO_ADDR
// end ;
29277: GO 29083
29279: POP
29280: POP
// for i in tmp do
29281: LD_ADDR_VAR 0 5
29285: PUSH
29286: LD_VAR 0 7
29290: PUSH
29291: FOR_IN
29292: IFFALSE 29330
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29294: LD_VAR 0 1
29298: PPUSH
29299: LD_VAR 0 5
29303: PUSH
29304: LD_INT 1
29306: ARRAY
29307: PPUSH
29308: LD_VAR 0 5
29312: PUSH
29313: LD_INT 2
29315: ARRAY
29316: PPUSH
29317: CALL 28272 0 3
29321: NOT
29322: IFFALSE 29328
// exit ;
29324: POP
29325: POP
29326: GO 29332
29328: GO 29291
29330: POP
29331: POP
// end ;
29332: LD_VAR 0 4
29336: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29337: LD_INT 0
29339: PPUSH
29340: PPUSH
29341: PPUSH
29342: PPUSH
29343: PPUSH
29344: PPUSH
29345: PPUSH
// if not GetClass ( unit ) = class_sniper then
29346: LD_VAR 0 1
29350: PPUSH
29351: CALL_OW 257
29355: PUSH
29356: LD_INT 5
29358: EQUAL
29359: NOT
29360: IFFALSE 29364
// exit ;
29362: GO 29752
// dist := 8 ;
29364: LD_ADDR_VAR 0 5
29368: PUSH
29369: LD_INT 8
29371: ST_TO_ADDR
// viewRange := 12 ;
29372: LD_ADDR_VAR 0 7
29376: PUSH
29377: LD_INT 12
29379: ST_TO_ADDR
// side := GetSide ( unit ) ;
29380: LD_ADDR_VAR 0 6
29384: PUSH
29385: LD_VAR 0 1
29389: PPUSH
29390: CALL_OW 255
29394: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29395: LD_INT 61
29397: PPUSH
29398: LD_VAR 0 6
29402: PPUSH
29403: CALL_OW 321
29407: PUSH
29408: LD_INT 2
29410: EQUAL
29411: IFFALSE 29421
// viewRange := 16 ;
29413: LD_ADDR_VAR 0 7
29417: PUSH
29418: LD_INT 16
29420: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29421: LD_VAR 0 1
29425: PPUSH
29426: LD_VAR 0 2
29430: PPUSH
29431: LD_VAR 0 3
29435: PPUSH
29436: CALL_OW 297
29440: PUSH
29441: LD_VAR 0 5
29445: GREATER
29446: IFFALSE 29525
// begin ComMoveXY ( unit , x , y ) ;
29448: LD_VAR 0 1
29452: PPUSH
29453: LD_VAR 0 2
29457: PPUSH
29458: LD_VAR 0 3
29462: PPUSH
29463: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29467: LD_INT 35
29469: PPUSH
29470: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29474: LD_VAR 0 1
29478: PPUSH
29479: LD_VAR 0 2
29483: PPUSH
29484: LD_VAR 0 3
29488: PPUSH
29489: CALL 65301 0 3
29493: NOT
29494: IFFALSE 29498
// exit ;
29496: GO 29752
// until GetDistUnitXY ( unit , x , y ) < dist ;
29498: LD_VAR 0 1
29502: PPUSH
29503: LD_VAR 0 2
29507: PPUSH
29508: LD_VAR 0 3
29512: PPUSH
29513: CALL_OW 297
29517: PUSH
29518: LD_VAR 0 5
29522: LESS
29523: IFFALSE 29467
// end ; ComTurnXY ( unit , x , y ) ;
29525: LD_VAR 0 1
29529: PPUSH
29530: LD_VAR 0 2
29534: PPUSH
29535: LD_VAR 0 3
29539: PPUSH
29540: CALL_OW 118
// wait ( 5 ) ;
29544: LD_INT 5
29546: PPUSH
29547: CALL_OW 67
// _d := GetDir ( unit ) ;
29551: LD_ADDR_VAR 0 10
29555: PUSH
29556: LD_VAR 0 1
29560: PPUSH
29561: CALL_OW 254
29565: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29566: LD_ADDR_VAR 0 8
29570: PUSH
29571: LD_VAR 0 1
29575: PPUSH
29576: CALL_OW 250
29580: PPUSH
29581: LD_VAR 0 10
29585: PPUSH
29586: LD_VAR 0 5
29590: PPUSH
29591: CALL_OW 272
29595: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29596: LD_ADDR_VAR 0 9
29600: PUSH
29601: LD_VAR 0 1
29605: PPUSH
29606: CALL_OW 251
29610: PPUSH
29611: LD_VAR 0 10
29615: PPUSH
29616: LD_VAR 0 5
29620: PPUSH
29621: CALL_OW 273
29625: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29626: LD_VAR 0 8
29630: PPUSH
29631: LD_VAR 0 9
29635: PPUSH
29636: CALL_OW 488
29640: NOT
29641: IFFALSE 29645
// exit ;
29643: GO 29752
// ComAnimCustom ( unit , 1 ) ;
29645: LD_VAR 0 1
29649: PPUSH
29650: LD_INT 1
29652: PPUSH
29653: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29657: LD_VAR 0 8
29661: PPUSH
29662: LD_VAR 0 9
29666: PPUSH
29667: LD_VAR 0 6
29671: PPUSH
29672: LD_VAR 0 7
29676: PPUSH
29677: CALL_OW 330
// repeat wait ( 1 ) ;
29681: LD_INT 1
29683: PPUSH
29684: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29688: LD_VAR 0 1
29692: PPUSH
29693: CALL_OW 316
29697: PUSH
29698: LD_VAR 0 1
29702: PPUSH
29703: CALL_OW 314
29707: OR
29708: PUSH
29709: LD_VAR 0 1
29713: PPUSH
29714: CALL_OW 302
29718: NOT
29719: OR
29720: PUSH
29721: LD_VAR 0 1
29725: PPUSH
29726: CALL_OW 301
29730: OR
29731: IFFALSE 29681
// RemoveSeeing ( _x , _y , side ) ;
29733: LD_VAR 0 8
29737: PPUSH
29738: LD_VAR 0 9
29742: PPUSH
29743: LD_VAR 0 6
29747: PPUSH
29748: CALL_OW 331
// end ; end_of_file
29752: LD_VAR 0 4
29756: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29757: LD_INT 0
29759: PPUSH
29760: PPUSH
// if exist_mode then
29761: LD_VAR 0 2
29765: IFFALSE 29790
// unit := CreateCharacter ( prefix & ident ) else
29767: LD_ADDR_VAR 0 5
29771: PUSH
29772: LD_VAR 0 3
29776: PUSH
29777: LD_VAR 0 1
29781: STR
29782: PPUSH
29783: CALL_OW 34
29787: ST_TO_ADDR
29788: GO 29805
// unit := NewCharacter ( ident ) ;
29790: LD_ADDR_VAR 0 5
29794: PUSH
29795: LD_VAR 0 1
29799: PPUSH
29800: CALL_OW 25
29804: ST_TO_ADDR
// result := unit ;
29805: LD_ADDR_VAR 0 4
29809: PUSH
29810: LD_VAR 0 5
29814: ST_TO_ADDR
// end ;
29815: LD_VAR 0 4
29819: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29820: LD_INT 0
29822: PPUSH
29823: PPUSH
// if not side or not nation then
29824: LD_VAR 0 1
29828: NOT
29829: PUSH
29830: LD_VAR 0 2
29834: NOT
29835: OR
29836: IFFALSE 29840
// exit ;
29838: GO 30608
// case nation of nation_american :
29840: LD_VAR 0 2
29844: PUSH
29845: LD_INT 1
29847: DOUBLE
29848: EQUAL
29849: IFTRUE 29853
29851: GO 30067
29853: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29854: LD_ADDR_VAR 0 4
29858: PUSH
29859: LD_INT 35
29861: PUSH
29862: LD_INT 45
29864: PUSH
29865: LD_INT 46
29867: PUSH
29868: LD_INT 47
29870: PUSH
29871: LD_INT 82
29873: PUSH
29874: LD_INT 83
29876: PUSH
29877: LD_INT 84
29879: PUSH
29880: LD_INT 85
29882: PUSH
29883: LD_INT 86
29885: PUSH
29886: LD_INT 1
29888: PUSH
29889: LD_INT 2
29891: PUSH
29892: LD_INT 6
29894: PUSH
29895: LD_INT 15
29897: PUSH
29898: LD_INT 16
29900: PUSH
29901: LD_INT 7
29903: PUSH
29904: LD_INT 12
29906: PUSH
29907: LD_INT 13
29909: PUSH
29910: LD_INT 10
29912: PUSH
29913: LD_INT 14
29915: PUSH
29916: LD_INT 20
29918: PUSH
29919: LD_INT 21
29921: PUSH
29922: LD_INT 22
29924: PUSH
29925: LD_INT 25
29927: PUSH
29928: LD_INT 32
29930: PUSH
29931: LD_INT 27
29933: PUSH
29934: LD_INT 36
29936: PUSH
29937: LD_INT 69
29939: PUSH
29940: LD_INT 39
29942: PUSH
29943: LD_INT 34
29945: PUSH
29946: LD_INT 40
29948: PUSH
29949: LD_INT 48
29951: PUSH
29952: LD_INT 49
29954: PUSH
29955: LD_INT 50
29957: PUSH
29958: LD_INT 51
29960: PUSH
29961: LD_INT 52
29963: PUSH
29964: LD_INT 53
29966: PUSH
29967: LD_INT 54
29969: PUSH
29970: LD_INT 55
29972: PUSH
29973: LD_INT 56
29975: PUSH
29976: LD_INT 57
29978: PUSH
29979: LD_INT 58
29981: PUSH
29982: LD_INT 59
29984: PUSH
29985: LD_INT 60
29987: PUSH
29988: LD_INT 61
29990: PUSH
29991: LD_INT 62
29993: PUSH
29994: LD_INT 80
29996: PUSH
29997: LD_INT 82
29999: PUSH
30000: LD_INT 83
30002: PUSH
30003: LD_INT 84
30005: PUSH
30006: LD_INT 85
30008: PUSH
30009: LD_INT 86
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: LIST
30016: LIST
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: LIST
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: LIST
30046: LIST
30047: LIST
30048: LIST
30049: LIST
30050: LIST
30051: LIST
30052: LIST
30053: LIST
30054: LIST
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: LIST
30062: LIST
30063: LIST
30064: ST_TO_ADDR
30065: GO 30532
30067: LD_INT 2
30069: DOUBLE
30070: EQUAL
30071: IFTRUE 30075
30073: GO 30301
30075: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30076: LD_ADDR_VAR 0 4
30080: PUSH
30081: LD_INT 35
30083: PUSH
30084: LD_INT 45
30086: PUSH
30087: LD_INT 46
30089: PUSH
30090: LD_INT 47
30092: PUSH
30093: LD_INT 82
30095: PUSH
30096: LD_INT 83
30098: PUSH
30099: LD_INT 84
30101: PUSH
30102: LD_INT 85
30104: PUSH
30105: LD_INT 87
30107: PUSH
30108: LD_INT 70
30110: PUSH
30111: LD_INT 1
30113: PUSH
30114: LD_INT 11
30116: PUSH
30117: LD_INT 3
30119: PUSH
30120: LD_INT 4
30122: PUSH
30123: LD_INT 5
30125: PUSH
30126: LD_INT 6
30128: PUSH
30129: LD_INT 15
30131: PUSH
30132: LD_INT 18
30134: PUSH
30135: LD_INT 7
30137: PUSH
30138: LD_INT 17
30140: PUSH
30141: LD_INT 8
30143: PUSH
30144: LD_INT 20
30146: PUSH
30147: LD_INT 21
30149: PUSH
30150: LD_INT 22
30152: PUSH
30153: LD_INT 72
30155: PUSH
30156: LD_INT 26
30158: PUSH
30159: LD_INT 69
30161: PUSH
30162: LD_INT 39
30164: PUSH
30165: LD_INT 40
30167: PUSH
30168: LD_INT 41
30170: PUSH
30171: LD_INT 42
30173: PUSH
30174: LD_INT 43
30176: PUSH
30177: LD_INT 48
30179: PUSH
30180: LD_INT 49
30182: PUSH
30183: LD_INT 50
30185: PUSH
30186: LD_INT 51
30188: PUSH
30189: LD_INT 52
30191: PUSH
30192: LD_INT 53
30194: PUSH
30195: LD_INT 54
30197: PUSH
30198: LD_INT 55
30200: PUSH
30201: LD_INT 56
30203: PUSH
30204: LD_INT 60
30206: PUSH
30207: LD_INT 61
30209: PUSH
30210: LD_INT 62
30212: PUSH
30213: LD_INT 66
30215: PUSH
30216: LD_INT 67
30218: PUSH
30219: LD_INT 68
30221: PUSH
30222: LD_INT 81
30224: PUSH
30225: LD_INT 82
30227: PUSH
30228: LD_INT 83
30230: PUSH
30231: LD_INT 84
30233: PUSH
30234: LD_INT 85
30236: PUSH
30237: LD_INT 87
30239: PUSH
30240: LD_INT 88
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: LIST
30252: LIST
30253: LIST
30254: LIST
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: LIST
30266: LIST
30267: LIST
30268: LIST
30269: LIST
30270: LIST
30271: LIST
30272: LIST
30273: LIST
30274: LIST
30275: LIST
30276: LIST
30277: LIST
30278: LIST
30279: LIST
30280: LIST
30281: LIST
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: ST_TO_ADDR
30299: GO 30532
30301: LD_INT 3
30303: DOUBLE
30304: EQUAL
30305: IFTRUE 30309
30307: GO 30531
30309: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30310: LD_ADDR_VAR 0 4
30314: PUSH
30315: LD_INT 46
30317: PUSH
30318: LD_INT 47
30320: PUSH
30321: LD_INT 1
30323: PUSH
30324: LD_INT 2
30326: PUSH
30327: LD_INT 82
30329: PUSH
30330: LD_INT 83
30332: PUSH
30333: LD_INT 84
30335: PUSH
30336: LD_INT 85
30338: PUSH
30339: LD_INT 86
30341: PUSH
30342: LD_INT 11
30344: PUSH
30345: LD_INT 9
30347: PUSH
30348: LD_INT 20
30350: PUSH
30351: LD_INT 19
30353: PUSH
30354: LD_INT 21
30356: PUSH
30357: LD_INT 24
30359: PUSH
30360: LD_INT 22
30362: PUSH
30363: LD_INT 25
30365: PUSH
30366: LD_INT 28
30368: PUSH
30369: LD_INT 29
30371: PUSH
30372: LD_INT 30
30374: PUSH
30375: LD_INT 31
30377: PUSH
30378: LD_INT 37
30380: PUSH
30381: LD_INT 38
30383: PUSH
30384: LD_INT 32
30386: PUSH
30387: LD_INT 27
30389: PUSH
30390: LD_INT 33
30392: PUSH
30393: LD_INT 69
30395: PUSH
30396: LD_INT 39
30398: PUSH
30399: LD_INT 34
30401: PUSH
30402: LD_INT 40
30404: PUSH
30405: LD_INT 71
30407: PUSH
30408: LD_INT 23
30410: PUSH
30411: LD_INT 44
30413: PUSH
30414: LD_INT 48
30416: PUSH
30417: LD_INT 49
30419: PUSH
30420: LD_INT 50
30422: PUSH
30423: LD_INT 51
30425: PUSH
30426: LD_INT 52
30428: PUSH
30429: LD_INT 53
30431: PUSH
30432: LD_INT 54
30434: PUSH
30435: LD_INT 55
30437: PUSH
30438: LD_INT 56
30440: PUSH
30441: LD_INT 57
30443: PUSH
30444: LD_INT 58
30446: PUSH
30447: LD_INT 59
30449: PUSH
30450: LD_INT 63
30452: PUSH
30453: LD_INT 64
30455: PUSH
30456: LD_INT 65
30458: PUSH
30459: LD_INT 82
30461: PUSH
30462: LD_INT 83
30464: PUSH
30465: LD_INT 84
30467: PUSH
30468: LD_INT 85
30470: PUSH
30471: LD_INT 86
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: ST_TO_ADDR
30529: GO 30532
30531: POP
// if state > - 1 and state < 3 then
30532: LD_VAR 0 3
30536: PUSH
30537: LD_INT 1
30539: NEG
30540: GREATER
30541: PUSH
30542: LD_VAR 0 3
30546: PUSH
30547: LD_INT 3
30549: LESS
30550: AND
30551: IFFALSE 30608
// for i in result do
30553: LD_ADDR_VAR 0 5
30557: PUSH
30558: LD_VAR 0 4
30562: PUSH
30563: FOR_IN
30564: IFFALSE 30606
// if GetTech ( i , side ) <> state then
30566: LD_VAR 0 5
30570: PPUSH
30571: LD_VAR 0 1
30575: PPUSH
30576: CALL_OW 321
30580: PUSH
30581: LD_VAR 0 3
30585: NONEQUAL
30586: IFFALSE 30604
// result := result diff i ;
30588: LD_ADDR_VAR 0 4
30592: PUSH
30593: LD_VAR 0 4
30597: PUSH
30598: LD_VAR 0 5
30602: DIFF
30603: ST_TO_ADDR
30604: GO 30563
30606: POP
30607: POP
// end ;
30608: LD_VAR 0 4
30612: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30613: LD_INT 0
30615: PPUSH
30616: PPUSH
30617: PPUSH
// result := true ;
30618: LD_ADDR_VAR 0 3
30622: PUSH
30623: LD_INT 1
30625: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30626: LD_ADDR_VAR 0 5
30630: PUSH
30631: LD_VAR 0 2
30635: PPUSH
30636: CALL_OW 480
30640: ST_TO_ADDR
// if not tmp then
30641: LD_VAR 0 5
30645: NOT
30646: IFFALSE 30650
// exit ;
30648: GO 30699
// for i in tmp do
30650: LD_ADDR_VAR 0 4
30654: PUSH
30655: LD_VAR 0 5
30659: PUSH
30660: FOR_IN
30661: IFFALSE 30697
// if GetTech ( i , side ) <> state_researched then
30663: LD_VAR 0 4
30667: PPUSH
30668: LD_VAR 0 1
30672: PPUSH
30673: CALL_OW 321
30677: PUSH
30678: LD_INT 2
30680: NONEQUAL
30681: IFFALSE 30695
// begin result := false ;
30683: LD_ADDR_VAR 0 3
30687: PUSH
30688: LD_INT 0
30690: ST_TO_ADDR
// exit ;
30691: POP
30692: POP
30693: GO 30699
// end ;
30695: GO 30660
30697: POP
30698: POP
// end ;
30699: LD_VAR 0 3
30703: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30704: LD_INT 0
30706: PPUSH
30707: PPUSH
30708: PPUSH
30709: PPUSH
30710: PPUSH
30711: PPUSH
30712: PPUSH
30713: PPUSH
30714: PPUSH
30715: PPUSH
30716: PPUSH
30717: PPUSH
30718: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30719: LD_VAR 0 1
30723: NOT
30724: PUSH
30725: LD_VAR 0 1
30729: PPUSH
30730: CALL_OW 257
30734: PUSH
30735: LD_INT 9
30737: NONEQUAL
30738: OR
30739: IFFALSE 30743
// exit ;
30741: GO 31316
// side := GetSide ( unit ) ;
30743: LD_ADDR_VAR 0 9
30747: PUSH
30748: LD_VAR 0 1
30752: PPUSH
30753: CALL_OW 255
30757: ST_TO_ADDR
// tech_space := tech_spacanom ;
30758: LD_ADDR_VAR 0 12
30762: PUSH
30763: LD_INT 29
30765: ST_TO_ADDR
// tech_time := tech_taurad ;
30766: LD_ADDR_VAR 0 13
30770: PUSH
30771: LD_INT 28
30773: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30774: LD_ADDR_VAR 0 11
30778: PUSH
30779: LD_VAR 0 1
30783: PPUSH
30784: CALL_OW 310
30788: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30789: LD_VAR 0 11
30793: PPUSH
30794: CALL_OW 247
30798: PUSH
30799: LD_INT 2
30801: EQUAL
30802: IFFALSE 30806
// exit ;
30804: GO 31316
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30806: LD_ADDR_VAR 0 8
30810: PUSH
30811: LD_INT 81
30813: PUSH
30814: LD_VAR 0 9
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: PUSH
30823: LD_INT 3
30825: PUSH
30826: LD_INT 21
30828: PUSH
30829: LD_INT 3
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PPUSH
30844: CALL_OW 69
30848: ST_TO_ADDR
// if not tmp then
30849: LD_VAR 0 8
30853: NOT
30854: IFFALSE 30858
// exit ;
30856: GO 31316
// if in_unit then
30858: LD_VAR 0 11
30862: IFFALSE 30886
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30864: LD_ADDR_VAR 0 10
30868: PUSH
30869: LD_VAR 0 8
30873: PPUSH
30874: LD_VAR 0 11
30878: PPUSH
30879: CALL_OW 74
30883: ST_TO_ADDR
30884: GO 30906
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30886: LD_ADDR_VAR 0 10
30890: PUSH
30891: LD_VAR 0 8
30895: PPUSH
30896: LD_VAR 0 1
30900: PPUSH
30901: CALL_OW 74
30905: ST_TO_ADDR
// if not enemy then
30906: LD_VAR 0 10
30910: NOT
30911: IFFALSE 30915
// exit ;
30913: GO 31316
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30915: LD_VAR 0 11
30919: PUSH
30920: LD_VAR 0 11
30924: PPUSH
30925: LD_VAR 0 10
30929: PPUSH
30930: CALL_OW 296
30934: PUSH
30935: LD_INT 13
30937: GREATER
30938: AND
30939: PUSH
30940: LD_VAR 0 1
30944: PPUSH
30945: LD_VAR 0 10
30949: PPUSH
30950: CALL_OW 296
30954: PUSH
30955: LD_INT 12
30957: GREATER
30958: OR
30959: IFFALSE 30963
// exit ;
30961: GO 31316
// missile := [ 1 ] ;
30963: LD_ADDR_VAR 0 14
30967: PUSH
30968: LD_INT 1
30970: PUSH
30971: EMPTY
30972: LIST
30973: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30974: LD_VAR 0 9
30978: PPUSH
30979: LD_VAR 0 12
30983: PPUSH
30984: CALL_OW 325
30988: IFFALSE 31017
// missile := Insert ( missile , missile + 1 , 2 ) ;
30990: LD_ADDR_VAR 0 14
30994: PUSH
30995: LD_VAR 0 14
30999: PPUSH
31000: LD_VAR 0 14
31004: PUSH
31005: LD_INT 1
31007: PLUS
31008: PPUSH
31009: LD_INT 2
31011: PPUSH
31012: CALL_OW 2
31016: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31017: LD_VAR 0 9
31021: PPUSH
31022: LD_VAR 0 13
31026: PPUSH
31027: CALL_OW 325
31031: PUSH
31032: LD_VAR 0 10
31036: PPUSH
31037: CALL_OW 255
31041: PPUSH
31042: LD_VAR 0 13
31046: PPUSH
31047: CALL_OW 325
31051: NOT
31052: AND
31053: IFFALSE 31082
// missile := Insert ( missile , missile + 1 , 3 ) ;
31055: LD_ADDR_VAR 0 14
31059: PUSH
31060: LD_VAR 0 14
31064: PPUSH
31065: LD_VAR 0 14
31069: PUSH
31070: LD_INT 1
31072: PLUS
31073: PPUSH
31074: LD_INT 3
31076: PPUSH
31077: CALL_OW 2
31081: ST_TO_ADDR
// if missile < 2 then
31082: LD_VAR 0 14
31086: PUSH
31087: LD_INT 2
31089: LESS
31090: IFFALSE 31094
// exit ;
31092: GO 31316
// x := GetX ( enemy ) ;
31094: LD_ADDR_VAR 0 4
31098: PUSH
31099: LD_VAR 0 10
31103: PPUSH
31104: CALL_OW 250
31108: ST_TO_ADDR
// y := GetY ( enemy ) ;
31109: LD_ADDR_VAR 0 5
31113: PUSH
31114: LD_VAR 0 10
31118: PPUSH
31119: CALL_OW 251
31123: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31124: LD_ADDR_VAR 0 6
31128: PUSH
31129: LD_VAR 0 4
31133: PUSH
31134: LD_INT 1
31136: NEG
31137: PPUSH
31138: LD_INT 1
31140: PPUSH
31141: CALL_OW 12
31145: PLUS
31146: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31147: LD_ADDR_VAR 0 7
31151: PUSH
31152: LD_VAR 0 5
31156: PUSH
31157: LD_INT 1
31159: NEG
31160: PPUSH
31161: LD_INT 1
31163: PPUSH
31164: CALL_OW 12
31168: PLUS
31169: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31170: LD_VAR 0 6
31174: PPUSH
31175: LD_VAR 0 7
31179: PPUSH
31180: CALL_OW 488
31184: NOT
31185: IFFALSE 31207
// begin _x := x ;
31187: LD_ADDR_VAR 0 6
31191: PUSH
31192: LD_VAR 0 4
31196: ST_TO_ADDR
// _y := y ;
31197: LD_ADDR_VAR 0 7
31201: PUSH
31202: LD_VAR 0 5
31206: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31207: LD_ADDR_VAR 0 3
31211: PUSH
31212: LD_INT 1
31214: PPUSH
31215: LD_VAR 0 14
31219: PPUSH
31220: CALL_OW 12
31224: ST_TO_ADDR
// case i of 1 :
31225: LD_VAR 0 3
31229: PUSH
31230: LD_INT 1
31232: DOUBLE
31233: EQUAL
31234: IFTRUE 31238
31236: GO 31255
31238: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31239: LD_VAR 0 1
31243: PPUSH
31244: LD_VAR 0 10
31248: PPUSH
31249: CALL_OW 115
31253: GO 31316
31255: LD_INT 2
31257: DOUBLE
31258: EQUAL
31259: IFTRUE 31263
31261: GO 31285
31263: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31264: LD_VAR 0 1
31268: PPUSH
31269: LD_VAR 0 6
31273: PPUSH
31274: LD_VAR 0 7
31278: PPUSH
31279: CALL_OW 153
31283: GO 31316
31285: LD_INT 3
31287: DOUBLE
31288: EQUAL
31289: IFTRUE 31293
31291: GO 31315
31293: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31294: LD_VAR 0 1
31298: PPUSH
31299: LD_VAR 0 6
31303: PPUSH
31304: LD_VAR 0 7
31308: PPUSH
31309: CALL_OW 154
31313: GO 31316
31315: POP
// end ;
31316: LD_VAR 0 2
31320: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31321: LD_INT 0
31323: PPUSH
31324: PPUSH
31325: PPUSH
31326: PPUSH
31327: PPUSH
31328: PPUSH
// if not unit or not building then
31329: LD_VAR 0 1
31333: NOT
31334: PUSH
31335: LD_VAR 0 2
31339: NOT
31340: OR
31341: IFFALSE 31345
// exit ;
31343: GO 31503
// x := GetX ( building ) ;
31345: LD_ADDR_VAR 0 5
31349: PUSH
31350: LD_VAR 0 2
31354: PPUSH
31355: CALL_OW 250
31359: ST_TO_ADDR
// y := GetY ( building ) ;
31360: LD_ADDR_VAR 0 6
31364: PUSH
31365: LD_VAR 0 2
31369: PPUSH
31370: CALL_OW 251
31374: ST_TO_ADDR
// for i = 0 to 5 do
31375: LD_ADDR_VAR 0 4
31379: PUSH
31380: DOUBLE
31381: LD_INT 0
31383: DEC
31384: ST_TO_ADDR
31385: LD_INT 5
31387: PUSH
31388: FOR_TO
31389: IFFALSE 31501
// begin _x := ShiftX ( x , i , 3 ) ;
31391: LD_ADDR_VAR 0 7
31395: PUSH
31396: LD_VAR 0 5
31400: PPUSH
31401: LD_VAR 0 4
31405: PPUSH
31406: LD_INT 3
31408: PPUSH
31409: CALL_OW 272
31413: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31414: LD_ADDR_VAR 0 8
31418: PUSH
31419: LD_VAR 0 6
31423: PPUSH
31424: LD_VAR 0 4
31428: PPUSH
31429: LD_INT 3
31431: PPUSH
31432: CALL_OW 273
31436: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31437: LD_VAR 0 7
31441: PPUSH
31442: LD_VAR 0 8
31446: PPUSH
31447: CALL_OW 488
31451: NOT
31452: IFFALSE 31456
// continue ;
31454: GO 31388
// if HexInfo ( _x , _y ) = 0 then
31456: LD_VAR 0 7
31460: PPUSH
31461: LD_VAR 0 8
31465: PPUSH
31466: CALL_OW 428
31470: PUSH
31471: LD_INT 0
31473: EQUAL
31474: IFFALSE 31499
// begin ComMoveXY ( unit , _x , _y ) ;
31476: LD_VAR 0 1
31480: PPUSH
31481: LD_VAR 0 7
31485: PPUSH
31486: LD_VAR 0 8
31490: PPUSH
31491: CALL_OW 111
// exit ;
31495: POP
31496: POP
31497: GO 31503
// end ; end ;
31499: GO 31388
31501: POP
31502: POP
// end ;
31503: LD_VAR 0 3
31507: RET
// export function ScanBase ( side , base_area ) ; begin
31508: LD_INT 0
31510: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31511: LD_ADDR_VAR 0 3
31515: PUSH
31516: LD_VAR 0 2
31520: PPUSH
31521: LD_INT 81
31523: PUSH
31524: LD_VAR 0 1
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: PPUSH
31533: CALL_OW 70
31537: ST_TO_ADDR
// end ;
31538: LD_VAR 0 3
31542: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31543: LD_INT 0
31545: PPUSH
31546: PPUSH
31547: PPUSH
31548: PPUSH
// result := false ;
31549: LD_ADDR_VAR 0 2
31553: PUSH
31554: LD_INT 0
31556: ST_TO_ADDR
// side := GetSide ( unit ) ;
31557: LD_ADDR_VAR 0 3
31561: PUSH
31562: LD_VAR 0 1
31566: PPUSH
31567: CALL_OW 255
31571: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31572: LD_ADDR_VAR 0 4
31576: PUSH
31577: LD_VAR 0 1
31581: PPUSH
31582: CALL_OW 248
31586: ST_TO_ADDR
// case nat of 1 :
31587: LD_VAR 0 4
31591: PUSH
31592: LD_INT 1
31594: DOUBLE
31595: EQUAL
31596: IFTRUE 31600
31598: GO 31611
31600: POP
// tech := tech_lassight ; 2 :
31601: LD_ADDR_VAR 0 5
31605: PUSH
31606: LD_INT 12
31608: ST_TO_ADDR
31609: GO 31650
31611: LD_INT 2
31613: DOUBLE
31614: EQUAL
31615: IFTRUE 31619
31617: GO 31630
31619: POP
// tech := tech_mortar ; 3 :
31620: LD_ADDR_VAR 0 5
31624: PUSH
31625: LD_INT 41
31627: ST_TO_ADDR
31628: GO 31650
31630: LD_INT 3
31632: DOUBLE
31633: EQUAL
31634: IFTRUE 31638
31636: GO 31649
31638: POP
// tech := tech_bazooka ; end ;
31639: LD_ADDR_VAR 0 5
31643: PUSH
31644: LD_INT 44
31646: ST_TO_ADDR
31647: GO 31650
31649: POP
// if Researched ( side , tech ) then
31650: LD_VAR 0 3
31654: PPUSH
31655: LD_VAR 0 5
31659: PPUSH
31660: CALL_OW 325
31664: IFFALSE 31691
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31666: LD_ADDR_VAR 0 2
31670: PUSH
31671: LD_INT 5
31673: PUSH
31674: LD_INT 8
31676: PUSH
31677: LD_INT 9
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: LIST
31684: PUSH
31685: LD_VAR 0 4
31689: ARRAY
31690: ST_TO_ADDR
// end ;
31691: LD_VAR 0 2
31695: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31696: LD_INT 0
31698: PPUSH
31699: PPUSH
31700: PPUSH
// if not mines then
31701: LD_VAR 0 2
31705: NOT
31706: IFFALSE 31710
// exit ;
31708: GO 31854
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31710: LD_ADDR_VAR 0 5
31714: PUSH
31715: LD_INT 81
31717: PUSH
31718: LD_VAR 0 1
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: PUSH
31727: LD_INT 3
31729: PUSH
31730: LD_INT 21
31732: PUSH
31733: LD_INT 3
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PPUSH
31748: CALL_OW 69
31752: ST_TO_ADDR
// for i in mines do
31753: LD_ADDR_VAR 0 4
31757: PUSH
31758: LD_VAR 0 2
31762: PUSH
31763: FOR_IN
31764: IFFALSE 31852
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31766: LD_VAR 0 4
31770: PUSH
31771: LD_INT 1
31773: ARRAY
31774: PPUSH
31775: LD_VAR 0 4
31779: PUSH
31780: LD_INT 2
31782: ARRAY
31783: PPUSH
31784: CALL_OW 458
31788: NOT
31789: IFFALSE 31793
// continue ;
31791: GO 31763
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31793: LD_VAR 0 4
31797: PUSH
31798: LD_INT 1
31800: ARRAY
31801: PPUSH
31802: LD_VAR 0 4
31806: PUSH
31807: LD_INT 2
31809: ARRAY
31810: PPUSH
31811: CALL_OW 428
31815: PUSH
31816: LD_VAR 0 5
31820: IN
31821: IFFALSE 31850
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31823: LD_VAR 0 4
31827: PUSH
31828: LD_INT 1
31830: ARRAY
31831: PPUSH
31832: LD_VAR 0 4
31836: PUSH
31837: LD_INT 2
31839: ARRAY
31840: PPUSH
31841: LD_VAR 0 1
31845: PPUSH
31846: CALL_OW 456
// end ;
31850: GO 31763
31852: POP
31853: POP
// end ;
31854: LD_VAR 0 3
31858: RET
// export function Count ( array ) ; var i ; begin
31859: LD_INT 0
31861: PPUSH
31862: PPUSH
// result := 0 ;
31863: LD_ADDR_VAR 0 2
31867: PUSH
31868: LD_INT 0
31870: ST_TO_ADDR
// for i in array do
31871: LD_ADDR_VAR 0 3
31875: PUSH
31876: LD_VAR 0 1
31880: PUSH
31881: FOR_IN
31882: IFFALSE 31906
// if i then
31884: LD_VAR 0 3
31888: IFFALSE 31904
// result := result + 1 ;
31890: LD_ADDR_VAR 0 2
31894: PUSH
31895: LD_VAR 0 2
31899: PUSH
31900: LD_INT 1
31902: PLUS
31903: ST_TO_ADDR
31904: GO 31881
31906: POP
31907: POP
// end ;
31908: LD_VAR 0 2
31912: RET
// export function IsEmpty ( building ) ; begin
31913: LD_INT 0
31915: PPUSH
// if not building then
31916: LD_VAR 0 1
31920: NOT
31921: IFFALSE 31925
// exit ;
31923: GO 31968
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31925: LD_ADDR_VAR 0 2
31929: PUSH
31930: LD_VAR 0 1
31934: PUSH
31935: LD_INT 22
31937: PUSH
31938: LD_VAR 0 1
31942: PPUSH
31943: CALL_OW 255
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: PUSH
31952: LD_INT 58
31954: PUSH
31955: EMPTY
31956: LIST
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: PPUSH
31962: CALL_OW 69
31966: IN
31967: ST_TO_ADDR
// end ;
31968: LD_VAR 0 2
31972: RET
// export function IsNotFull ( building ) ; begin
31973: LD_INT 0
31975: PPUSH
// if not building then
31976: LD_VAR 0 1
31980: NOT
31981: IFFALSE 31985
// exit ;
31983: GO 32004
// result := UnitsInside ( building ) < 6 ;
31985: LD_ADDR_VAR 0 2
31989: PUSH
31990: LD_VAR 0 1
31994: PPUSH
31995: CALL_OW 313
31999: PUSH
32000: LD_INT 6
32002: LESS
32003: ST_TO_ADDR
// end ;
32004: LD_VAR 0 2
32008: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32009: LD_INT 0
32011: PPUSH
32012: PPUSH
32013: PPUSH
32014: PPUSH
// tmp := [ ] ;
32015: LD_ADDR_VAR 0 3
32019: PUSH
32020: EMPTY
32021: ST_TO_ADDR
// list := [ ] ;
32022: LD_ADDR_VAR 0 5
32026: PUSH
32027: EMPTY
32028: ST_TO_ADDR
// for i = 16 to 25 do
32029: LD_ADDR_VAR 0 4
32033: PUSH
32034: DOUBLE
32035: LD_INT 16
32037: DEC
32038: ST_TO_ADDR
32039: LD_INT 25
32041: PUSH
32042: FOR_TO
32043: IFFALSE 32116
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32045: LD_ADDR_VAR 0 3
32049: PUSH
32050: LD_VAR 0 3
32054: PUSH
32055: LD_INT 22
32057: PUSH
32058: LD_VAR 0 1
32062: PPUSH
32063: CALL_OW 255
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: LD_INT 91
32074: PUSH
32075: LD_VAR 0 1
32079: PUSH
32080: LD_INT 6
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: LIST
32087: PUSH
32088: LD_INT 30
32090: PUSH
32091: LD_VAR 0 4
32095: PUSH
32096: EMPTY
32097: LIST
32098: LIST
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: LIST
32104: PUSH
32105: EMPTY
32106: LIST
32107: PPUSH
32108: CALL_OW 69
32112: ADD
32113: ST_TO_ADDR
32114: GO 32042
32116: POP
32117: POP
// for i = 1 to tmp do
32118: LD_ADDR_VAR 0 4
32122: PUSH
32123: DOUBLE
32124: LD_INT 1
32126: DEC
32127: ST_TO_ADDR
32128: LD_VAR 0 3
32132: PUSH
32133: FOR_TO
32134: IFFALSE 32222
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32136: LD_ADDR_VAR 0 5
32140: PUSH
32141: LD_VAR 0 5
32145: PUSH
32146: LD_VAR 0 3
32150: PUSH
32151: LD_VAR 0 4
32155: ARRAY
32156: PPUSH
32157: CALL_OW 266
32161: PUSH
32162: LD_VAR 0 3
32166: PUSH
32167: LD_VAR 0 4
32171: ARRAY
32172: PPUSH
32173: CALL_OW 250
32177: PUSH
32178: LD_VAR 0 3
32182: PUSH
32183: LD_VAR 0 4
32187: ARRAY
32188: PPUSH
32189: CALL_OW 251
32193: PUSH
32194: LD_VAR 0 3
32198: PUSH
32199: LD_VAR 0 4
32203: ARRAY
32204: PPUSH
32205: CALL_OW 254
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: PUSH
32216: EMPTY
32217: LIST
32218: ADD
32219: ST_TO_ADDR
32220: GO 32133
32222: POP
32223: POP
// result := list ;
32224: LD_ADDR_VAR 0 2
32228: PUSH
32229: LD_VAR 0 5
32233: ST_TO_ADDR
// end ;
32234: LD_VAR 0 2
32238: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32239: LD_INT 0
32241: PPUSH
32242: PPUSH
32243: PPUSH
32244: PPUSH
32245: PPUSH
32246: PPUSH
32247: PPUSH
// if not factory then
32248: LD_VAR 0 1
32252: NOT
32253: IFFALSE 32257
// exit ;
32255: GO 32850
// if control = control_apeman then
32257: LD_VAR 0 4
32261: PUSH
32262: LD_INT 5
32264: EQUAL
32265: IFFALSE 32374
// begin tmp := UnitsInside ( factory ) ;
32267: LD_ADDR_VAR 0 8
32271: PUSH
32272: LD_VAR 0 1
32276: PPUSH
32277: CALL_OW 313
32281: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32282: LD_VAR 0 8
32286: PPUSH
32287: LD_INT 25
32289: PUSH
32290: LD_INT 12
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PPUSH
32297: CALL_OW 72
32301: NOT
32302: IFFALSE 32312
// control := control_manual ;
32304: LD_ADDR_VAR 0 4
32308: PUSH
32309: LD_INT 1
32311: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32312: LD_ADDR_VAR 0 8
32316: PUSH
32317: LD_VAR 0 1
32321: PPUSH
32322: CALL 32009 0 1
32326: ST_TO_ADDR
// if tmp then
32327: LD_VAR 0 8
32331: IFFALSE 32374
// begin for i in tmp do
32333: LD_ADDR_VAR 0 7
32337: PUSH
32338: LD_VAR 0 8
32342: PUSH
32343: FOR_IN
32344: IFFALSE 32372
// if i [ 1 ] = b_ext_radio then
32346: LD_VAR 0 7
32350: PUSH
32351: LD_INT 1
32353: ARRAY
32354: PUSH
32355: LD_INT 22
32357: EQUAL
32358: IFFALSE 32370
// begin control := control_remote ;
32360: LD_ADDR_VAR 0 4
32364: PUSH
32365: LD_INT 2
32367: ST_TO_ADDR
// break ;
32368: GO 32372
// end ;
32370: GO 32343
32372: POP
32373: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32374: LD_VAR 0 1
32378: PPUSH
32379: LD_VAR 0 2
32383: PPUSH
32384: LD_VAR 0 3
32388: PPUSH
32389: LD_VAR 0 4
32393: PPUSH
32394: LD_VAR 0 5
32398: PPUSH
32399: CALL_OW 448
32403: IFFALSE 32438
// begin result := [ chassis , engine , control , weapon ] ;
32405: LD_ADDR_VAR 0 6
32409: PUSH
32410: LD_VAR 0 2
32414: PUSH
32415: LD_VAR 0 3
32419: PUSH
32420: LD_VAR 0 4
32424: PUSH
32425: LD_VAR 0 5
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: LIST
32434: LIST
32435: ST_TO_ADDR
// exit ;
32436: GO 32850
// end ; _chassis := AvailableChassisList ( factory ) ;
32438: LD_ADDR_VAR 0 9
32442: PUSH
32443: LD_VAR 0 1
32447: PPUSH
32448: CALL_OW 475
32452: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32453: LD_ADDR_VAR 0 11
32457: PUSH
32458: LD_VAR 0 1
32462: PPUSH
32463: CALL_OW 476
32467: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32468: LD_ADDR_VAR 0 12
32472: PUSH
32473: LD_VAR 0 1
32477: PPUSH
32478: CALL_OW 477
32482: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32483: LD_ADDR_VAR 0 10
32487: PUSH
32488: LD_VAR 0 1
32492: PPUSH
32493: CALL_OW 478
32497: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32498: LD_VAR 0 9
32502: NOT
32503: PUSH
32504: LD_VAR 0 11
32508: NOT
32509: OR
32510: PUSH
32511: LD_VAR 0 12
32515: NOT
32516: OR
32517: PUSH
32518: LD_VAR 0 10
32522: NOT
32523: OR
32524: IFFALSE 32559
// begin result := [ chassis , engine , control , weapon ] ;
32526: LD_ADDR_VAR 0 6
32530: PUSH
32531: LD_VAR 0 2
32535: PUSH
32536: LD_VAR 0 3
32540: PUSH
32541: LD_VAR 0 4
32545: PUSH
32546: LD_VAR 0 5
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: ST_TO_ADDR
// exit ;
32557: GO 32850
// end ; if not chassis in _chassis then
32559: LD_VAR 0 2
32563: PUSH
32564: LD_VAR 0 9
32568: IN
32569: NOT
32570: IFFALSE 32596
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32572: LD_ADDR_VAR 0 2
32576: PUSH
32577: LD_VAR 0 9
32581: PUSH
32582: LD_INT 1
32584: PPUSH
32585: LD_VAR 0 9
32589: PPUSH
32590: CALL_OW 12
32594: ARRAY
32595: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32596: LD_VAR 0 2
32600: PPUSH
32601: LD_VAR 0 3
32605: PPUSH
32606: CALL 32855 0 2
32610: NOT
32611: IFFALSE 32670
// repeat engine := _engine [ 1 ] ;
32613: LD_ADDR_VAR 0 3
32617: PUSH
32618: LD_VAR 0 11
32622: PUSH
32623: LD_INT 1
32625: ARRAY
32626: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32627: LD_ADDR_VAR 0 11
32631: PUSH
32632: LD_VAR 0 11
32636: PPUSH
32637: LD_INT 1
32639: PPUSH
32640: CALL_OW 3
32644: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32645: LD_VAR 0 2
32649: PPUSH
32650: LD_VAR 0 3
32654: PPUSH
32655: CALL 32855 0 2
32659: PUSH
32660: LD_VAR 0 11
32664: PUSH
32665: EMPTY
32666: EQUAL
32667: OR
32668: IFFALSE 32613
// if not control in _control then
32670: LD_VAR 0 4
32674: PUSH
32675: LD_VAR 0 12
32679: IN
32680: NOT
32681: IFFALSE 32707
// control := _control [ rand ( 1 , _control ) ] ;
32683: LD_ADDR_VAR 0 4
32687: PUSH
32688: LD_VAR 0 12
32692: PUSH
32693: LD_INT 1
32695: PPUSH
32696: LD_VAR 0 12
32700: PPUSH
32701: CALL_OW 12
32705: ARRAY
32706: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32707: LD_VAR 0 2
32711: PPUSH
32712: LD_VAR 0 5
32716: PPUSH
32717: CALL 33075 0 2
32721: NOT
32722: IFFALSE 32781
// repeat weapon := _weapon [ 1 ] ;
32724: LD_ADDR_VAR 0 5
32728: PUSH
32729: LD_VAR 0 10
32733: PUSH
32734: LD_INT 1
32736: ARRAY
32737: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32738: LD_ADDR_VAR 0 10
32742: PUSH
32743: LD_VAR 0 10
32747: PPUSH
32748: LD_INT 1
32750: PPUSH
32751: CALL_OW 3
32755: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32756: LD_VAR 0 2
32760: PPUSH
32761: LD_VAR 0 5
32765: PPUSH
32766: CALL 33075 0 2
32770: PUSH
32771: LD_VAR 0 10
32775: PUSH
32776: EMPTY
32777: EQUAL
32778: OR
32779: IFFALSE 32724
// result := [ ] ;
32781: LD_ADDR_VAR 0 6
32785: PUSH
32786: EMPTY
32787: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32788: LD_VAR 0 1
32792: PPUSH
32793: LD_VAR 0 2
32797: PPUSH
32798: LD_VAR 0 3
32802: PPUSH
32803: LD_VAR 0 4
32807: PPUSH
32808: LD_VAR 0 5
32812: PPUSH
32813: CALL_OW 448
32817: IFFALSE 32850
// result := [ chassis , engine , control , weapon ] ;
32819: LD_ADDR_VAR 0 6
32823: PUSH
32824: LD_VAR 0 2
32828: PUSH
32829: LD_VAR 0 3
32833: PUSH
32834: LD_VAR 0 4
32838: PUSH
32839: LD_VAR 0 5
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: ST_TO_ADDR
// end ;
32850: LD_VAR 0 6
32854: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32855: LD_INT 0
32857: PPUSH
// if not chassis or not engine then
32858: LD_VAR 0 1
32862: NOT
32863: PUSH
32864: LD_VAR 0 2
32868: NOT
32869: OR
32870: IFFALSE 32874
// exit ;
32872: GO 33070
// case engine of engine_solar :
32874: LD_VAR 0 2
32878: PUSH
32879: LD_INT 2
32881: DOUBLE
32882: EQUAL
32883: IFTRUE 32887
32885: GO 32925
32887: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32888: LD_ADDR_VAR 0 3
32892: PUSH
32893: LD_INT 11
32895: PUSH
32896: LD_INT 12
32898: PUSH
32899: LD_INT 13
32901: PUSH
32902: LD_INT 14
32904: PUSH
32905: LD_INT 1
32907: PUSH
32908: LD_INT 2
32910: PUSH
32911: LD_INT 3
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: ST_TO_ADDR
32923: GO 33054
32925: LD_INT 1
32927: DOUBLE
32928: EQUAL
32929: IFTRUE 32933
32931: GO 32995
32933: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32934: LD_ADDR_VAR 0 3
32938: PUSH
32939: LD_INT 11
32941: PUSH
32942: LD_INT 12
32944: PUSH
32945: LD_INT 13
32947: PUSH
32948: LD_INT 14
32950: PUSH
32951: LD_INT 1
32953: PUSH
32954: LD_INT 2
32956: PUSH
32957: LD_INT 3
32959: PUSH
32960: LD_INT 4
32962: PUSH
32963: LD_INT 5
32965: PUSH
32966: LD_INT 21
32968: PUSH
32969: LD_INT 23
32971: PUSH
32972: LD_INT 22
32974: PUSH
32975: LD_INT 24
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: LIST
32988: LIST
32989: LIST
32990: LIST
32991: LIST
32992: ST_TO_ADDR
32993: GO 33054
32995: LD_INT 3
32997: DOUBLE
32998: EQUAL
32999: IFTRUE 33003
33001: GO 33053
33003: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33004: LD_ADDR_VAR 0 3
33008: PUSH
33009: LD_INT 13
33011: PUSH
33012: LD_INT 14
33014: PUSH
33015: LD_INT 2
33017: PUSH
33018: LD_INT 3
33020: PUSH
33021: LD_INT 4
33023: PUSH
33024: LD_INT 5
33026: PUSH
33027: LD_INT 21
33029: PUSH
33030: LD_INT 22
33032: PUSH
33033: LD_INT 23
33035: PUSH
33036: LD_INT 24
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: ST_TO_ADDR
33051: GO 33054
33053: POP
// result := ( chassis in result ) ;
33054: LD_ADDR_VAR 0 3
33058: PUSH
33059: LD_VAR 0 1
33063: PUSH
33064: LD_VAR 0 3
33068: IN
33069: ST_TO_ADDR
// end ;
33070: LD_VAR 0 3
33074: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33075: LD_INT 0
33077: PPUSH
// if not chassis or not weapon then
33078: LD_VAR 0 1
33082: NOT
33083: PUSH
33084: LD_VAR 0 2
33088: NOT
33089: OR
33090: IFFALSE 33094
// exit ;
33092: GO 34156
// case weapon of us_machine_gun :
33094: LD_VAR 0 2
33098: PUSH
33099: LD_INT 2
33101: DOUBLE
33102: EQUAL
33103: IFTRUE 33107
33105: GO 33137
33107: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33108: LD_ADDR_VAR 0 3
33112: PUSH
33113: LD_INT 1
33115: PUSH
33116: LD_INT 2
33118: PUSH
33119: LD_INT 3
33121: PUSH
33122: LD_INT 4
33124: PUSH
33125: LD_INT 5
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: ST_TO_ADDR
33135: GO 34140
33137: LD_INT 3
33139: DOUBLE
33140: EQUAL
33141: IFTRUE 33145
33143: GO 33175
33145: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33146: LD_ADDR_VAR 0 3
33150: PUSH
33151: LD_INT 1
33153: PUSH
33154: LD_INT 2
33156: PUSH
33157: LD_INT 3
33159: PUSH
33160: LD_INT 4
33162: PUSH
33163: LD_INT 5
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: ST_TO_ADDR
33173: GO 34140
33175: LD_INT 11
33177: DOUBLE
33178: EQUAL
33179: IFTRUE 33183
33181: GO 33213
33183: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33184: LD_ADDR_VAR 0 3
33188: PUSH
33189: LD_INT 1
33191: PUSH
33192: LD_INT 2
33194: PUSH
33195: LD_INT 3
33197: PUSH
33198: LD_INT 4
33200: PUSH
33201: LD_INT 5
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: ST_TO_ADDR
33211: GO 34140
33213: LD_INT 4
33215: DOUBLE
33216: EQUAL
33217: IFTRUE 33221
33219: GO 33247
33221: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33222: LD_ADDR_VAR 0 3
33226: PUSH
33227: LD_INT 2
33229: PUSH
33230: LD_INT 3
33232: PUSH
33233: LD_INT 4
33235: PUSH
33236: LD_INT 5
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: ST_TO_ADDR
33245: GO 34140
33247: LD_INT 5
33249: DOUBLE
33250: EQUAL
33251: IFTRUE 33255
33253: GO 33281
33255: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33256: LD_ADDR_VAR 0 3
33260: PUSH
33261: LD_INT 2
33263: PUSH
33264: LD_INT 3
33266: PUSH
33267: LD_INT 4
33269: PUSH
33270: LD_INT 5
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: ST_TO_ADDR
33279: GO 34140
33281: LD_INT 9
33283: DOUBLE
33284: EQUAL
33285: IFTRUE 33289
33287: GO 33315
33289: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33290: LD_ADDR_VAR 0 3
33294: PUSH
33295: LD_INT 2
33297: PUSH
33298: LD_INT 3
33300: PUSH
33301: LD_INT 4
33303: PUSH
33304: LD_INT 5
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: LIST
33311: LIST
33312: ST_TO_ADDR
33313: GO 34140
33315: LD_INT 7
33317: DOUBLE
33318: EQUAL
33319: IFTRUE 33323
33321: GO 33349
33323: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33324: LD_ADDR_VAR 0 3
33328: PUSH
33329: LD_INT 2
33331: PUSH
33332: LD_INT 3
33334: PUSH
33335: LD_INT 4
33337: PUSH
33338: LD_INT 5
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: LIST
33345: LIST
33346: ST_TO_ADDR
33347: GO 34140
33349: LD_INT 12
33351: DOUBLE
33352: EQUAL
33353: IFTRUE 33357
33355: GO 33383
33357: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33358: LD_ADDR_VAR 0 3
33362: PUSH
33363: LD_INT 2
33365: PUSH
33366: LD_INT 3
33368: PUSH
33369: LD_INT 4
33371: PUSH
33372: LD_INT 5
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: LIST
33379: LIST
33380: ST_TO_ADDR
33381: GO 34140
33383: LD_INT 13
33385: DOUBLE
33386: EQUAL
33387: IFTRUE 33391
33389: GO 33417
33391: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33392: LD_ADDR_VAR 0 3
33396: PUSH
33397: LD_INT 2
33399: PUSH
33400: LD_INT 3
33402: PUSH
33403: LD_INT 4
33405: PUSH
33406: LD_INT 5
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: ST_TO_ADDR
33415: GO 34140
33417: LD_INT 14
33419: DOUBLE
33420: EQUAL
33421: IFTRUE 33425
33423: GO 33443
33425: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33426: LD_ADDR_VAR 0 3
33430: PUSH
33431: LD_INT 4
33433: PUSH
33434: LD_INT 5
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: ST_TO_ADDR
33441: GO 34140
33443: LD_INT 6
33445: DOUBLE
33446: EQUAL
33447: IFTRUE 33451
33449: GO 33469
33451: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33452: LD_ADDR_VAR 0 3
33456: PUSH
33457: LD_INT 4
33459: PUSH
33460: LD_INT 5
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: ST_TO_ADDR
33467: GO 34140
33469: LD_INT 10
33471: DOUBLE
33472: EQUAL
33473: IFTRUE 33477
33475: GO 33495
33477: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33478: LD_ADDR_VAR 0 3
33482: PUSH
33483: LD_INT 4
33485: PUSH
33486: LD_INT 5
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: ST_TO_ADDR
33493: GO 34140
33495: LD_INT 22
33497: DOUBLE
33498: EQUAL
33499: IFTRUE 33503
33501: GO 33529
33503: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33504: LD_ADDR_VAR 0 3
33508: PUSH
33509: LD_INT 11
33511: PUSH
33512: LD_INT 12
33514: PUSH
33515: LD_INT 13
33517: PUSH
33518: LD_INT 14
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: ST_TO_ADDR
33527: GO 34140
33529: LD_INT 23
33531: DOUBLE
33532: EQUAL
33533: IFTRUE 33537
33535: GO 33563
33537: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33538: LD_ADDR_VAR 0 3
33542: PUSH
33543: LD_INT 11
33545: PUSH
33546: LD_INT 12
33548: PUSH
33549: LD_INT 13
33551: PUSH
33552: LD_INT 14
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: ST_TO_ADDR
33561: GO 34140
33563: LD_INT 24
33565: DOUBLE
33566: EQUAL
33567: IFTRUE 33571
33569: GO 33597
33571: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33572: LD_ADDR_VAR 0 3
33576: PUSH
33577: LD_INT 11
33579: PUSH
33580: LD_INT 12
33582: PUSH
33583: LD_INT 13
33585: PUSH
33586: LD_INT 14
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: ST_TO_ADDR
33595: GO 34140
33597: LD_INT 30
33599: DOUBLE
33600: EQUAL
33601: IFTRUE 33605
33603: GO 33631
33605: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33606: LD_ADDR_VAR 0 3
33610: PUSH
33611: LD_INT 11
33613: PUSH
33614: LD_INT 12
33616: PUSH
33617: LD_INT 13
33619: PUSH
33620: LD_INT 14
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: ST_TO_ADDR
33629: GO 34140
33631: LD_INT 25
33633: DOUBLE
33634: EQUAL
33635: IFTRUE 33639
33637: GO 33657
33639: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33640: LD_ADDR_VAR 0 3
33644: PUSH
33645: LD_INT 13
33647: PUSH
33648: LD_INT 14
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: ST_TO_ADDR
33655: GO 34140
33657: LD_INT 27
33659: DOUBLE
33660: EQUAL
33661: IFTRUE 33665
33663: GO 33683
33665: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33666: LD_ADDR_VAR 0 3
33670: PUSH
33671: LD_INT 13
33673: PUSH
33674: LD_INT 14
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: ST_TO_ADDR
33681: GO 34140
33683: LD_EXP 37
33687: DOUBLE
33688: EQUAL
33689: IFTRUE 33693
33691: GO 33719
33693: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33694: LD_ADDR_VAR 0 3
33698: PUSH
33699: LD_INT 11
33701: PUSH
33702: LD_INT 12
33704: PUSH
33705: LD_INT 13
33707: PUSH
33708: LD_INT 14
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: ST_TO_ADDR
33717: GO 34140
33719: LD_INT 28
33721: DOUBLE
33722: EQUAL
33723: IFTRUE 33727
33725: GO 33745
33727: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33728: LD_ADDR_VAR 0 3
33732: PUSH
33733: LD_INT 13
33735: PUSH
33736: LD_INT 14
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: ST_TO_ADDR
33743: GO 34140
33745: LD_INT 29
33747: DOUBLE
33748: EQUAL
33749: IFTRUE 33753
33751: GO 33771
33753: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33754: LD_ADDR_VAR 0 3
33758: PUSH
33759: LD_INT 13
33761: PUSH
33762: LD_INT 14
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: ST_TO_ADDR
33769: GO 34140
33771: LD_INT 31
33773: DOUBLE
33774: EQUAL
33775: IFTRUE 33779
33777: GO 33797
33779: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33780: LD_ADDR_VAR 0 3
33784: PUSH
33785: LD_INT 13
33787: PUSH
33788: LD_INT 14
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: ST_TO_ADDR
33795: GO 34140
33797: LD_INT 26
33799: DOUBLE
33800: EQUAL
33801: IFTRUE 33805
33803: GO 33823
33805: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33806: LD_ADDR_VAR 0 3
33810: PUSH
33811: LD_INT 13
33813: PUSH
33814: LD_INT 14
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: ST_TO_ADDR
33821: GO 34140
33823: LD_INT 42
33825: DOUBLE
33826: EQUAL
33827: IFTRUE 33831
33829: GO 33857
33831: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33832: LD_ADDR_VAR 0 3
33836: PUSH
33837: LD_INT 21
33839: PUSH
33840: LD_INT 22
33842: PUSH
33843: LD_INT 23
33845: PUSH
33846: LD_INT 24
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: ST_TO_ADDR
33855: GO 34140
33857: LD_INT 43
33859: DOUBLE
33860: EQUAL
33861: IFTRUE 33865
33863: GO 33891
33865: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33866: LD_ADDR_VAR 0 3
33870: PUSH
33871: LD_INT 21
33873: PUSH
33874: LD_INT 22
33876: PUSH
33877: LD_INT 23
33879: PUSH
33880: LD_INT 24
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: ST_TO_ADDR
33889: GO 34140
33891: LD_INT 44
33893: DOUBLE
33894: EQUAL
33895: IFTRUE 33899
33897: GO 33925
33899: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33900: LD_ADDR_VAR 0 3
33904: PUSH
33905: LD_INT 21
33907: PUSH
33908: LD_INT 22
33910: PUSH
33911: LD_INT 23
33913: PUSH
33914: LD_INT 24
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: ST_TO_ADDR
33923: GO 34140
33925: LD_INT 45
33927: DOUBLE
33928: EQUAL
33929: IFTRUE 33933
33931: GO 33959
33933: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33934: LD_ADDR_VAR 0 3
33938: PUSH
33939: LD_INT 21
33941: PUSH
33942: LD_INT 22
33944: PUSH
33945: LD_INT 23
33947: PUSH
33948: LD_INT 24
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: ST_TO_ADDR
33957: GO 34140
33959: LD_INT 49
33961: DOUBLE
33962: EQUAL
33963: IFTRUE 33967
33965: GO 33993
33967: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33968: LD_ADDR_VAR 0 3
33972: PUSH
33973: LD_INT 21
33975: PUSH
33976: LD_INT 22
33978: PUSH
33979: LD_INT 23
33981: PUSH
33982: LD_INT 24
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: LIST
33989: LIST
33990: ST_TO_ADDR
33991: GO 34140
33993: LD_INT 51
33995: DOUBLE
33996: EQUAL
33997: IFTRUE 34001
33999: GO 34027
34001: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34002: LD_ADDR_VAR 0 3
34006: PUSH
34007: LD_INT 21
34009: PUSH
34010: LD_INT 22
34012: PUSH
34013: LD_INT 23
34015: PUSH
34016: LD_INT 24
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: ST_TO_ADDR
34025: GO 34140
34027: LD_INT 52
34029: DOUBLE
34030: EQUAL
34031: IFTRUE 34035
34033: GO 34061
34035: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34036: LD_ADDR_VAR 0 3
34040: PUSH
34041: LD_INT 21
34043: PUSH
34044: LD_INT 22
34046: PUSH
34047: LD_INT 23
34049: PUSH
34050: LD_INT 24
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: LIST
34057: LIST
34058: ST_TO_ADDR
34059: GO 34140
34061: LD_INT 53
34063: DOUBLE
34064: EQUAL
34065: IFTRUE 34069
34067: GO 34087
34069: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34070: LD_ADDR_VAR 0 3
34074: PUSH
34075: LD_INT 23
34077: PUSH
34078: LD_INT 24
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: ST_TO_ADDR
34085: GO 34140
34087: LD_INT 46
34089: DOUBLE
34090: EQUAL
34091: IFTRUE 34095
34093: GO 34113
34095: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34096: LD_ADDR_VAR 0 3
34100: PUSH
34101: LD_INT 23
34103: PUSH
34104: LD_INT 24
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: ST_TO_ADDR
34111: GO 34140
34113: LD_INT 47
34115: DOUBLE
34116: EQUAL
34117: IFTRUE 34121
34119: GO 34139
34121: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34122: LD_ADDR_VAR 0 3
34126: PUSH
34127: LD_INT 23
34129: PUSH
34130: LD_INT 24
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: ST_TO_ADDR
34137: GO 34140
34139: POP
// result := ( chassis in result ) ;
34140: LD_ADDR_VAR 0 3
34144: PUSH
34145: LD_VAR 0 1
34149: PUSH
34150: LD_VAR 0 3
34154: IN
34155: ST_TO_ADDR
// end ;
34156: LD_VAR 0 3
34160: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34161: LD_INT 0
34163: PPUSH
34164: PPUSH
34165: PPUSH
34166: PPUSH
34167: PPUSH
34168: PPUSH
34169: PPUSH
// result := array ;
34170: LD_ADDR_VAR 0 5
34174: PUSH
34175: LD_VAR 0 1
34179: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34180: LD_VAR 0 1
34184: NOT
34185: PUSH
34186: LD_VAR 0 2
34190: NOT
34191: OR
34192: PUSH
34193: LD_VAR 0 3
34197: NOT
34198: OR
34199: PUSH
34200: LD_VAR 0 2
34204: PUSH
34205: LD_VAR 0 1
34209: GREATER
34210: OR
34211: PUSH
34212: LD_VAR 0 3
34216: PUSH
34217: LD_VAR 0 1
34221: GREATER
34222: OR
34223: IFFALSE 34227
// exit ;
34225: GO 34523
// if direction then
34227: LD_VAR 0 4
34231: IFFALSE 34295
// begin d := 1 ;
34233: LD_ADDR_VAR 0 9
34237: PUSH
34238: LD_INT 1
34240: ST_TO_ADDR
// if i_from > i_to then
34241: LD_VAR 0 2
34245: PUSH
34246: LD_VAR 0 3
34250: GREATER
34251: IFFALSE 34277
// length := ( array - i_from ) + i_to else
34253: LD_ADDR_VAR 0 11
34257: PUSH
34258: LD_VAR 0 1
34262: PUSH
34263: LD_VAR 0 2
34267: MINUS
34268: PUSH
34269: LD_VAR 0 3
34273: PLUS
34274: ST_TO_ADDR
34275: GO 34293
// length := i_to - i_from ;
34277: LD_ADDR_VAR 0 11
34281: PUSH
34282: LD_VAR 0 3
34286: PUSH
34287: LD_VAR 0 2
34291: MINUS
34292: ST_TO_ADDR
// end else
34293: GO 34356
// begin d := - 1 ;
34295: LD_ADDR_VAR 0 9
34299: PUSH
34300: LD_INT 1
34302: NEG
34303: ST_TO_ADDR
// if i_from > i_to then
34304: LD_VAR 0 2
34308: PUSH
34309: LD_VAR 0 3
34313: GREATER
34314: IFFALSE 34334
// length := i_from - i_to else
34316: LD_ADDR_VAR 0 11
34320: PUSH
34321: LD_VAR 0 2
34325: PUSH
34326: LD_VAR 0 3
34330: MINUS
34331: ST_TO_ADDR
34332: GO 34356
// length := ( array - i_to ) + i_from ;
34334: LD_ADDR_VAR 0 11
34338: PUSH
34339: LD_VAR 0 1
34343: PUSH
34344: LD_VAR 0 3
34348: MINUS
34349: PUSH
34350: LD_VAR 0 2
34354: PLUS
34355: ST_TO_ADDR
// end ; if not length then
34356: LD_VAR 0 11
34360: NOT
34361: IFFALSE 34365
// exit ;
34363: GO 34523
// tmp := array ;
34365: LD_ADDR_VAR 0 10
34369: PUSH
34370: LD_VAR 0 1
34374: ST_TO_ADDR
// for i = 1 to length do
34375: LD_ADDR_VAR 0 6
34379: PUSH
34380: DOUBLE
34381: LD_INT 1
34383: DEC
34384: ST_TO_ADDR
34385: LD_VAR 0 11
34389: PUSH
34390: FOR_TO
34391: IFFALSE 34511
// begin for j = 1 to array do
34393: LD_ADDR_VAR 0 7
34397: PUSH
34398: DOUBLE
34399: LD_INT 1
34401: DEC
34402: ST_TO_ADDR
34403: LD_VAR 0 1
34407: PUSH
34408: FOR_TO
34409: IFFALSE 34497
// begin k := j + d ;
34411: LD_ADDR_VAR 0 8
34415: PUSH
34416: LD_VAR 0 7
34420: PUSH
34421: LD_VAR 0 9
34425: PLUS
34426: ST_TO_ADDR
// if k > array then
34427: LD_VAR 0 8
34431: PUSH
34432: LD_VAR 0 1
34436: GREATER
34437: IFFALSE 34447
// k := 1 ;
34439: LD_ADDR_VAR 0 8
34443: PUSH
34444: LD_INT 1
34446: ST_TO_ADDR
// if not k then
34447: LD_VAR 0 8
34451: NOT
34452: IFFALSE 34464
// k := array ;
34454: LD_ADDR_VAR 0 8
34458: PUSH
34459: LD_VAR 0 1
34463: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34464: LD_ADDR_VAR 0 10
34468: PUSH
34469: LD_VAR 0 10
34473: PPUSH
34474: LD_VAR 0 8
34478: PPUSH
34479: LD_VAR 0 1
34483: PUSH
34484: LD_VAR 0 7
34488: ARRAY
34489: PPUSH
34490: CALL_OW 1
34494: ST_TO_ADDR
// end ;
34495: GO 34408
34497: POP
34498: POP
// array := tmp ;
34499: LD_ADDR_VAR 0 1
34503: PUSH
34504: LD_VAR 0 10
34508: ST_TO_ADDR
// end ;
34509: GO 34390
34511: POP
34512: POP
// result := array ;
34513: LD_ADDR_VAR 0 5
34517: PUSH
34518: LD_VAR 0 1
34522: ST_TO_ADDR
// end ;
34523: LD_VAR 0 5
34527: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34528: LD_INT 0
34530: PPUSH
34531: PPUSH
// result := 0 ;
34532: LD_ADDR_VAR 0 3
34536: PUSH
34537: LD_INT 0
34539: ST_TO_ADDR
// if not array or not value in array then
34540: LD_VAR 0 1
34544: NOT
34545: PUSH
34546: LD_VAR 0 2
34550: PUSH
34551: LD_VAR 0 1
34555: IN
34556: NOT
34557: OR
34558: IFFALSE 34562
// exit ;
34560: GO 34616
// for i = 1 to array do
34562: LD_ADDR_VAR 0 4
34566: PUSH
34567: DOUBLE
34568: LD_INT 1
34570: DEC
34571: ST_TO_ADDR
34572: LD_VAR 0 1
34576: PUSH
34577: FOR_TO
34578: IFFALSE 34614
// if value = array [ i ] then
34580: LD_VAR 0 2
34584: PUSH
34585: LD_VAR 0 1
34589: PUSH
34590: LD_VAR 0 4
34594: ARRAY
34595: EQUAL
34596: IFFALSE 34612
// begin result := i ;
34598: LD_ADDR_VAR 0 3
34602: PUSH
34603: LD_VAR 0 4
34607: ST_TO_ADDR
// exit ;
34608: POP
34609: POP
34610: GO 34616
// end ;
34612: GO 34577
34614: POP
34615: POP
// end ;
34616: LD_VAR 0 3
34620: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34621: LD_INT 0
34623: PPUSH
// vc_chassis := chassis ;
34624: LD_ADDR_OWVAR 37
34628: PUSH
34629: LD_VAR 0 1
34633: ST_TO_ADDR
// vc_engine := engine ;
34634: LD_ADDR_OWVAR 39
34638: PUSH
34639: LD_VAR 0 2
34643: ST_TO_ADDR
// vc_control := control ;
34644: LD_ADDR_OWVAR 38
34648: PUSH
34649: LD_VAR 0 3
34653: ST_TO_ADDR
// vc_weapon := weapon ;
34654: LD_ADDR_OWVAR 40
34658: PUSH
34659: LD_VAR 0 4
34663: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34664: LD_ADDR_OWVAR 41
34668: PUSH
34669: LD_VAR 0 5
34673: ST_TO_ADDR
// end ;
34674: LD_VAR 0 6
34678: RET
// export function WantPlant ( unit ) ; var task ; begin
34679: LD_INT 0
34681: PPUSH
34682: PPUSH
// result := false ;
34683: LD_ADDR_VAR 0 2
34687: PUSH
34688: LD_INT 0
34690: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34691: LD_ADDR_VAR 0 3
34695: PUSH
34696: LD_VAR 0 1
34700: PPUSH
34701: CALL_OW 437
34705: ST_TO_ADDR
// if task then
34706: LD_VAR 0 3
34710: IFFALSE 34738
// if task [ 1 ] [ 1 ] = p then
34712: LD_VAR 0 3
34716: PUSH
34717: LD_INT 1
34719: ARRAY
34720: PUSH
34721: LD_INT 1
34723: ARRAY
34724: PUSH
34725: LD_STRING p
34727: EQUAL
34728: IFFALSE 34738
// result := true ;
34730: LD_ADDR_VAR 0 2
34734: PUSH
34735: LD_INT 1
34737: ST_TO_ADDR
// end ;
34738: LD_VAR 0 2
34742: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34743: LD_INT 0
34745: PPUSH
34746: PPUSH
34747: PPUSH
34748: PPUSH
// if pos < 1 then
34749: LD_VAR 0 2
34753: PUSH
34754: LD_INT 1
34756: LESS
34757: IFFALSE 34761
// exit ;
34759: GO 35064
// if pos = 1 then
34761: LD_VAR 0 2
34765: PUSH
34766: LD_INT 1
34768: EQUAL
34769: IFFALSE 34802
// result := Replace ( arr , pos [ 1 ] , value ) else
34771: LD_ADDR_VAR 0 4
34775: PUSH
34776: LD_VAR 0 1
34780: PPUSH
34781: LD_VAR 0 2
34785: PUSH
34786: LD_INT 1
34788: ARRAY
34789: PPUSH
34790: LD_VAR 0 3
34794: PPUSH
34795: CALL_OW 1
34799: ST_TO_ADDR
34800: GO 35064
// begin tmp := arr ;
34802: LD_ADDR_VAR 0 6
34806: PUSH
34807: LD_VAR 0 1
34811: ST_TO_ADDR
// s_arr := [ tmp ] ;
34812: LD_ADDR_VAR 0 7
34816: PUSH
34817: LD_VAR 0 6
34821: PUSH
34822: EMPTY
34823: LIST
34824: ST_TO_ADDR
// for i = 1 to pos - 1 do
34825: LD_ADDR_VAR 0 5
34829: PUSH
34830: DOUBLE
34831: LD_INT 1
34833: DEC
34834: ST_TO_ADDR
34835: LD_VAR 0 2
34839: PUSH
34840: LD_INT 1
34842: MINUS
34843: PUSH
34844: FOR_TO
34845: IFFALSE 34890
// begin tmp := tmp [ pos [ i ] ] ;
34847: LD_ADDR_VAR 0 6
34851: PUSH
34852: LD_VAR 0 6
34856: PUSH
34857: LD_VAR 0 2
34861: PUSH
34862: LD_VAR 0 5
34866: ARRAY
34867: ARRAY
34868: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34869: LD_ADDR_VAR 0 7
34873: PUSH
34874: LD_VAR 0 7
34878: PUSH
34879: LD_VAR 0 6
34883: PUSH
34884: EMPTY
34885: LIST
34886: ADD
34887: ST_TO_ADDR
// end ;
34888: GO 34844
34890: POP
34891: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34892: LD_ADDR_VAR 0 6
34896: PUSH
34897: LD_VAR 0 6
34901: PPUSH
34902: LD_VAR 0 2
34906: PUSH
34907: LD_VAR 0 2
34911: ARRAY
34912: PPUSH
34913: LD_VAR 0 3
34917: PPUSH
34918: CALL_OW 1
34922: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34923: LD_ADDR_VAR 0 7
34927: PUSH
34928: LD_VAR 0 7
34932: PPUSH
34933: LD_VAR 0 7
34937: PPUSH
34938: LD_VAR 0 6
34942: PPUSH
34943: CALL_OW 1
34947: ST_TO_ADDR
// for i = s_arr downto 2 do
34948: LD_ADDR_VAR 0 5
34952: PUSH
34953: DOUBLE
34954: LD_VAR 0 7
34958: INC
34959: ST_TO_ADDR
34960: LD_INT 2
34962: PUSH
34963: FOR_DOWNTO
34964: IFFALSE 35048
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34966: LD_ADDR_VAR 0 6
34970: PUSH
34971: LD_VAR 0 7
34975: PUSH
34976: LD_VAR 0 5
34980: PUSH
34981: LD_INT 1
34983: MINUS
34984: ARRAY
34985: PPUSH
34986: LD_VAR 0 2
34990: PUSH
34991: LD_VAR 0 5
34995: PUSH
34996: LD_INT 1
34998: MINUS
34999: ARRAY
35000: PPUSH
35001: LD_VAR 0 7
35005: PUSH
35006: LD_VAR 0 5
35010: ARRAY
35011: PPUSH
35012: CALL_OW 1
35016: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35017: LD_ADDR_VAR 0 7
35021: PUSH
35022: LD_VAR 0 7
35026: PPUSH
35027: LD_VAR 0 5
35031: PUSH
35032: LD_INT 1
35034: MINUS
35035: PPUSH
35036: LD_VAR 0 6
35040: PPUSH
35041: CALL_OW 1
35045: ST_TO_ADDR
// end ;
35046: GO 34963
35048: POP
35049: POP
// result := s_arr [ 1 ] ;
35050: LD_ADDR_VAR 0 4
35054: PUSH
35055: LD_VAR 0 7
35059: PUSH
35060: LD_INT 1
35062: ARRAY
35063: ST_TO_ADDR
// end ; end ;
35064: LD_VAR 0 4
35068: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35069: LD_INT 0
35071: PPUSH
35072: PPUSH
// if not list then
35073: LD_VAR 0 1
35077: NOT
35078: IFFALSE 35082
// exit ;
35080: GO 35173
// i := list [ pos1 ] ;
35082: LD_ADDR_VAR 0 5
35086: PUSH
35087: LD_VAR 0 1
35091: PUSH
35092: LD_VAR 0 2
35096: ARRAY
35097: ST_TO_ADDR
// if not i then
35098: LD_VAR 0 5
35102: NOT
35103: IFFALSE 35107
// exit ;
35105: GO 35173
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35107: LD_ADDR_VAR 0 1
35111: PUSH
35112: LD_VAR 0 1
35116: PPUSH
35117: LD_VAR 0 2
35121: PPUSH
35122: LD_VAR 0 1
35126: PUSH
35127: LD_VAR 0 3
35131: ARRAY
35132: PPUSH
35133: CALL_OW 1
35137: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35138: LD_ADDR_VAR 0 1
35142: PUSH
35143: LD_VAR 0 1
35147: PPUSH
35148: LD_VAR 0 3
35152: PPUSH
35153: LD_VAR 0 5
35157: PPUSH
35158: CALL_OW 1
35162: ST_TO_ADDR
// result := list ;
35163: LD_ADDR_VAR 0 4
35167: PUSH
35168: LD_VAR 0 1
35172: ST_TO_ADDR
// end ;
35173: LD_VAR 0 4
35177: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35178: LD_INT 0
35180: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35181: LD_ADDR_VAR 0 5
35185: PUSH
35186: LD_VAR 0 1
35190: PPUSH
35191: CALL_OW 250
35195: PPUSH
35196: LD_VAR 0 1
35200: PPUSH
35201: CALL_OW 251
35205: PPUSH
35206: LD_VAR 0 2
35210: PPUSH
35211: LD_VAR 0 3
35215: PPUSH
35216: LD_VAR 0 4
35220: PPUSH
35221: CALL 35231 0 5
35225: ST_TO_ADDR
// end ;
35226: LD_VAR 0 5
35230: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35231: LD_INT 0
35233: PPUSH
35234: PPUSH
35235: PPUSH
35236: PPUSH
// if not list then
35237: LD_VAR 0 3
35241: NOT
35242: IFFALSE 35246
// exit ;
35244: GO 35634
// result := [ ] ;
35246: LD_ADDR_VAR 0 6
35250: PUSH
35251: EMPTY
35252: ST_TO_ADDR
// for i in list do
35253: LD_ADDR_VAR 0 7
35257: PUSH
35258: LD_VAR 0 3
35262: PUSH
35263: FOR_IN
35264: IFFALSE 35466
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35266: LD_ADDR_VAR 0 9
35270: PUSH
35271: LD_VAR 0 7
35275: PPUSH
35276: LD_VAR 0 1
35280: PPUSH
35281: LD_VAR 0 2
35285: PPUSH
35286: CALL_OW 297
35290: ST_TO_ADDR
// if not result then
35291: LD_VAR 0 6
35295: NOT
35296: IFFALSE 35322
// result := [ [ i , tmp ] ] else
35298: LD_ADDR_VAR 0 6
35302: PUSH
35303: LD_VAR 0 7
35307: PUSH
35308: LD_VAR 0 9
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: PUSH
35317: EMPTY
35318: LIST
35319: ST_TO_ADDR
35320: GO 35464
// begin if result [ result ] [ 2 ] < tmp then
35322: LD_VAR 0 6
35326: PUSH
35327: LD_VAR 0 6
35331: ARRAY
35332: PUSH
35333: LD_INT 2
35335: ARRAY
35336: PUSH
35337: LD_VAR 0 9
35341: LESS
35342: IFFALSE 35384
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35344: LD_ADDR_VAR 0 6
35348: PUSH
35349: LD_VAR 0 6
35353: PPUSH
35354: LD_VAR 0 6
35358: PUSH
35359: LD_INT 1
35361: PLUS
35362: PPUSH
35363: LD_VAR 0 7
35367: PUSH
35368: LD_VAR 0 9
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: PPUSH
35377: CALL_OW 2
35381: ST_TO_ADDR
35382: GO 35464
// for j = 1 to result do
35384: LD_ADDR_VAR 0 8
35388: PUSH
35389: DOUBLE
35390: LD_INT 1
35392: DEC
35393: ST_TO_ADDR
35394: LD_VAR 0 6
35398: PUSH
35399: FOR_TO
35400: IFFALSE 35462
// begin if tmp < result [ j ] [ 2 ] then
35402: LD_VAR 0 9
35406: PUSH
35407: LD_VAR 0 6
35411: PUSH
35412: LD_VAR 0 8
35416: ARRAY
35417: PUSH
35418: LD_INT 2
35420: ARRAY
35421: LESS
35422: IFFALSE 35460
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35424: LD_ADDR_VAR 0 6
35428: PUSH
35429: LD_VAR 0 6
35433: PPUSH
35434: LD_VAR 0 8
35438: PPUSH
35439: LD_VAR 0 7
35443: PUSH
35444: LD_VAR 0 9
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PPUSH
35453: CALL_OW 2
35457: ST_TO_ADDR
// break ;
35458: GO 35462
// end ; end ;
35460: GO 35399
35462: POP
35463: POP
// end ; end ;
35464: GO 35263
35466: POP
35467: POP
// if result and not asc then
35468: LD_VAR 0 6
35472: PUSH
35473: LD_VAR 0 4
35477: NOT
35478: AND
35479: IFFALSE 35554
// begin tmp := result ;
35481: LD_ADDR_VAR 0 9
35485: PUSH
35486: LD_VAR 0 6
35490: ST_TO_ADDR
// for i = tmp downto 1 do
35491: LD_ADDR_VAR 0 7
35495: PUSH
35496: DOUBLE
35497: LD_VAR 0 9
35501: INC
35502: ST_TO_ADDR
35503: LD_INT 1
35505: PUSH
35506: FOR_DOWNTO
35507: IFFALSE 35552
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35509: LD_ADDR_VAR 0 6
35513: PUSH
35514: LD_VAR 0 6
35518: PPUSH
35519: LD_VAR 0 9
35523: PUSH
35524: LD_VAR 0 7
35528: MINUS
35529: PUSH
35530: LD_INT 1
35532: PLUS
35533: PPUSH
35534: LD_VAR 0 9
35538: PUSH
35539: LD_VAR 0 7
35543: ARRAY
35544: PPUSH
35545: CALL_OW 1
35549: ST_TO_ADDR
35550: GO 35506
35552: POP
35553: POP
// end ; tmp := [ ] ;
35554: LD_ADDR_VAR 0 9
35558: PUSH
35559: EMPTY
35560: ST_TO_ADDR
// if mode then
35561: LD_VAR 0 5
35565: IFFALSE 35634
// begin for i = 1 to result do
35567: LD_ADDR_VAR 0 7
35571: PUSH
35572: DOUBLE
35573: LD_INT 1
35575: DEC
35576: ST_TO_ADDR
35577: LD_VAR 0 6
35581: PUSH
35582: FOR_TO
35583: IFFALSE 35622
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35585: LD_ADDR_VAR 0 9
35589: PUSH
35590: LD_VAR 0 9
35594: PPUSH
35595: LD_VAR 0 7
35599: PPUSH
35600: LD_VAR 0 6
35604: PUSH
35605: LD_VAR 0 7
35609: ARRAY
35610: PUSH
35611: LD_INT 1
35613: ARRAY
35614: PPUSH
35615: CALL_OW 1
35619: ST_TO_ADDR
35620: GO 35582
35622: POP
35623: POP
// result := tmp ;
35624: LD_ADDR_VAR 0 6
35628: PUSH
35629: LD_VAR 0 9
35633: ST_TO_ADDR
// end ; end ;
35634: LD_VAR 0 6
35638: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35639: LD_INT 0
35641: PPUSH
35642: PPUSH
35643: PPUSH
35644: PPUSH
35645: PPUSH
35646: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35647: LD_ADDR_VAR 0 5
35651: PUSH
35652: LD_INT 0
35654: PUSH
35655: LD_INT 0
35657: PUSH
35658: LD_INT 0
35660: PUSH
35661: EMPTY
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: ST_TO_ADDR
// if not x or not y then
35669: LD_VAR 0 2
35673: NOT
35674: PUSH
35675: LD_VAR 0 3
35679: NOT
35680: OR
35681: IFFALSE 35685
// exit ;
35683: GO 37337
// if not range then
35685: LD_VAR 0 4
35689: NOT
35690: IFFALSE 35700
// range := 10 ;
35692: LD_ADDR_VAR 0 4
35696: PUSH
35697: LD_INT 10
35699: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35700: LD_ADDR_VAR 0 8
35704: PUSH
35705: LD_INT 81
35707: PUSH
35708: LD_VAR 0 1
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: PUSH
35717: LD_INT 92
35719: PUSH
35720: LD_VAR 0 2
35724: PUSH
35725: LD_VAR 0 3
35729: PUSH
35730: LD_VAR 0 4
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: LIST
35739: LIST
35740: PUSH
35741: LD_INT 3
35743: PUSH
35744: LD_INT 21
35746: PUSH
35747: LD_INT 3
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: LIST
35762: PPUSH
35763: CALL_OW 69
35767: ST_TO_ADDR
// if not tmp then
35768: LD_VAR 0 8
35772: NOT
35773: IFFALSE 35777
// exit ;
35775: GO 37337
// for i in tmp do
35777: LD_ADDR_VAR 0 6
35781: PUSH
35782: LD_VAR 0 8
35786: PUSH
35787: FOR_IN
35788: IFFALSE 37312
// begin points := [ 0 , 0 , 0 ] ;
35790: LD_ADDR_VAR 0 9
35794: PUSH
35795: LD_INT 0
35797: PUSH
35798: LD_INT 0
35800: PUSH
35801: LD_INT 0
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: LIST
35808: ST_TO_ADDR
// bpoints := 1 ;
35809: LD_ADDR_VAR 0 10
35813: PUSH
35814: LD_INT 1
35816: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35817: LD_VAR 0 6
35821: PPUSH
35822: CALL_OW 247
35826: PUSH
35827: LD_INT 1
35829: DOUBLE
35830: EQUAL
35831: IFTRUE 35835
35833: GO 36413
35835: POP
// begin if GetClass ( i ) = 1 then
35836: LD_VAR 0 6
35840: PPUSH
35841: CALL_OW 257
35845: PUSH
35846: LD_INT 1
35848: EQUAL
35849: IFFALSE 35870
// points := [ 10 , 5 , 3 ] ;
35851: LD_ADDR_VAR 0 9
35855: PUSH
35856: LD_INT 10
35858: PUSH
35859: LD_INT 5
35861: PUSH
35862: LD_INT 3
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: LIST
35869: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35870: LD_VAR 0 6
35874: PPUSH
35875: CALL_OW 257
35879: PUSH
35880: LD_INT 2
35882: PUSH
35883: LD_INT 3
35885: PUSH
35886: LD_INT 4
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: LIST
35893: IN
35894: IFFALSE 35915
// points := [ 3 , 2 , 1 ] ;
35896: LD_ADDR_VAR 0 9
35900: PUSH
35901: LD_INT 3
35903: PUSH
35904: LD_INT 2
35906: PUSH
35907: LD_INT 1
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: LIST
35914: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35915: LD_VAR 0 6
35919: PPUSH
35920: CALL_OW 257
35924: PUSH
35925: LD_INT 5
35927: EQUAL
35928: IFFALSE 35949
// points := [ 130 , 5 , 2 ] ;
35930: LD_ADDR_VAR 0 9
35934: PUSH
35935: LD_INT 130
35937: PUSH
35938: LD_INT 5
35940: PUSH
35941: LD_INT 2
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: LIST
35948: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35949: LD_VAR 0 6
35953: PPUSH
35954: CALL_OW 257
35958: PUSH
35959: LD_INT 8
35961: EQUAL
35962: IFFALSE 35983
// points := [ 35 , 35 , 30 ] ;
35964: LD_ADDR_VAR 0 9
35968: PUSH
35969: LD_INT 35
35971: PUSH
35972: LD_INT 35
35974: PUSH
35975: LD_INT 30
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: LIST
35982: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35983: LD_VAR 0 6
35987: PPUSH
35988: CALL_OW 257
35992: PUSH
35993: LD_INT 9
35995: EQUAL
35996: IFFALSE 36017
// points := [ 20 , 55 , 40 ] ;
35998: LD_ADDR_VAR 0 9
36002: PUSH
36003: LD_INT 20
36005: PUSH
36006: LD_INT 55
36008: PUSH
36009: LD_INT 40
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: LIST
36016: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36017: LD_VAR 0 6
36021: PPUSH
36022: CALL_OW 257
36026: PUSH
36027: LD_INT 12
36029: PUSH
36030: LD_INT 16
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: IN
36037: IFFALSE 36058
// points := [ 5 , 3 , 2 ] ;
36039: LD_ADDR_VAR 0 9
36043: PUSH
36044: LD_INT 5
36046: PUSH
36047: LD_INT 3
36049: PUSH
36050: LD_INT 2
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: LIST
36057: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36058: LD_VAR 0 6
36062: PPUSH
36063: CALL_OW 257
36067: PUSH
36068: LD_INT 17
36070: EQUAL
36071: IFFALSE 36092
// points := [ 100 , 50 , 75 ] ;
36073: LD_ADDR_VAR 0 9
36077: PUSH
36078: LD_INT 100
36080: PUSH
36081: LD_INT 50
36083: PUSH
36084: LD_INT 75
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: LIST
36091: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36092: LD_VAR 0 6
36096: PPUSH
36097: CALL_OW 257
36101: PUSH
36102: LD_INT 15
36104: EQUAL
36105: IFFALSE 36126
// points := [ 10 , 5 , 3 ] ;
36107: LD_ADDR_VAR 0 9
36111: PUSH
36112: LD_INT 10
36114: PUSH
36115: LD_INT 5
36117: PUSH
36118: LD_INT 3
36120: PUSH
36121: EMPTY
36122: LIST
36123: LIST
36124: LIST
36125: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36126: LD_VAR 0 6
36130: PPUSH
36131: CALL_OW 257
36135: PUSH
36136: LD_INT 14
36138: EQUAL
36139: IFFALSE 36160
// points := [ 10 , 0 , 0 ] ;
36141: LD_ADDR_VAR 0 9
36145: PUSH
36146: LD_INT 10
36148: PUSH
36149: LD_INT 0
36151: PUSH
36152: LD_INT 0
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: LIST
36159: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36160: LD_VAR 0 6
36164: PPUSH
36165: CALL_OW 257
36169: PUSH
36170: LD_INT 11
36172: EQUAL
36173: IFFALSE 36194
// points := [ 30 , 10 , 5 ] ;
36175: LD_ADDR_VAR 0 9
36179: PUSH
36180: LD_INT 30
36182: PUSH
36183: LD_INT 10
36185: PUSH
36186: LD_INT 5
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: LIST
36193: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36194: LD_VAR 0 1
36198: PPUSH
36199: LD_INT 5
36201: PPUSH
36202: CALL_OW 321
36206: PUSH
36207: LD_INT 2
36209: EQUAL
36210: IFFALSE 36227
// bpoints := bpoints * 1.8 ;
36212: LD_ADDR_VAR 0 10
36216: PUSH
36217: LD_VAR 0 10
36221: PUSH
36222: LD_REAL  1.80000000000000E+0000
36225: MUL
36226: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36227: LD_VAR 0 6
36231: PPUSH
36232: CALL_OW 257
36236: PUSH
36237: LD_INT 1
36239: PUSH
36240: LD_INT 2
36242: PUSH
36243: LD_INT 3
36245: PUSH
36246: LD_INT 4
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: IN
36255: PUSH
36256: LD_VAR 0 1
36260: PPUSH
36261: LD_INT 51
36263: PPUSH
36264: CALL_OW 321
36268: PUSH
36269: LD_INT 2
36271: EQUAL
36272: AND
36273: IFFALSE 36290
// bpoints := bpoints * 1.2 ;
36275: LD_ADDR_VAR 0 10
36279: PUSH
36280: LD_VAR 0 10
36284: PUSH
36285: LD_REAL  1.20000000000000E+0000
36288: MUL
36289: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36290: LD_VAR 0 6
36294: PPUSH
36295: CALL_OW 257
36299: PUSH
36300: LD_INT 5
36302: PUSH
36303: LD_INT 7
36305: PUSH
36306: LD_INT 9
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: LIST
36313: IN
36314: PUSH
36315: LD_VAR 0 1
36319: PPUSH
36320: LD_INT 52
36322: PPUSH
36323: CALL_OW 321
36327: PUSH
36328: LD_INT 2
36330: EQUAL
36331: AND
36332: IFFALSE 36349
// bpoints := bpoints * 1.5 ;
36334: LD_ADDR_VAR 0 10
36338: PUSH
36339: LD_VAR 0 10
36343: PUSH
36344: LD_REAL  1.50000000000000E+0000
36347: MUL
36348: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36349: LD_VAR 0 1
36353: PPUSH
36354: LD_INT 66
36356: PPUSH
36357: CALL_OW 321
36361: PUSH
36362: LD_INT 2
36364: EQUAL
36365: IFFALSE 36382
// bpoints := bpoints * 1.1 ;
36367: LD_ADDR_VAR 0 10
36371: PUSH
36372: LD_VAR 0 10
36376: PUSH
36377: LD_REAL  1.10000000000000E+0000
36380: MUL
36381: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36382: LD_ADDR_VAR 0 10
36386: PUSH
36387: LD_VAR 0 10
36391: PUSH
36392: LD_VAR 0 6
36396: PPUSH
36397: LD_INT 1
36399: PPUSH
36400: CALL_OW 259
36404: PUSH
36405: LD_REAL  1.15000000000000E+0000
36408: MUL
36409: MUL
36410: ST_TO_ADDR
// end ; unit_vehicle :
36411: GO 37241
36413: LD_INT 2
36415: DOUBLE
36416: EQUAL
36417: IFTRUE 36421
36419: GO 37229
36421: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36422: LD_VAR 0 6
36426: PPUSH
36427: CALL_OW 264
36431: PUSH
36432: LD_INT 2
36434: PUSH
36435: LD_INT 42
36437: PUSH
36438: LD_INT 24
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: LIST
36445: IN
36446: IFFALSE 36467
// points := [ 25 , 5 , 3 ] ;
36448: LD_ADDR_VAR 0 9
36452: PUSH
36453: LD_INT 25
36455: PUSH
36456: LD_INT 5
36458: PUSH
36459: LD_INT 3
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: LIST
36466: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36467: LD_VAR 0 6
36471: PPUSH
36472: CALL_OW 264
36476: PUSH
36477: LD_INT 4
36479: PUSH
36480: LD_INT 43
36482: PUSH
36483: LD_INT 25
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: LIST
36490: IN
36491: IFFALSE 36512
// points := [ 40 , 15 , 5 ] ;
36493: LD_ADDR_VAR 0 9
36497: PUSH
36498: LD_INT 40
36500: PUSH
36501: LD_INT 15
36503: PUSH
36504: LD_INT 5
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: LIST
36511: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36512: LD_VAR 0 6
36516: PPUSH
36517: CALL_OW 264
36521: PUSH
36522: LD_INT 3
36524: PUSH
36525: LD_INT 23
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: IN
36532: IFFALSE 36553
// points := [ 7 , 25 , 8 ] ;
36534: LD_ADDR_VAR 0 9
36538: PUSH
36539: LD_INT 7
36541: PUSH
36542: LD_INT 25
36544: PUSH
36545: LD_INT 8
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: LIST
36552: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36553: LD_VAR 0 6
36557: PPUSH
36558: CALL_OW 264
36562: PUSH
36563: LD_INT 5
36565: PUSH
36566: LD_INT 27
36568: PUSH
36569: LD_INT 44
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: LIST
36576: IN
36577: IFFALSE 36598
// points := [ 14 , 50 , 16 ] ;
36579: LD_ADDR_VAR 0 9
36583: PUSH
36584: LD_INT 14
36586: PUSH
36587: LD_INT 50
36589: PUSH
36590: LD_INT 16
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: LIST
36597: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36598: LD_VAR 0 6
36602: PPUSH
36603: CALL_OW 264
36607: PUSH
36608: LD_INT 6
36610: PUSH
36611: LD_INT 46
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: IN
36618: IFFALSE 36639
// points := [ 32 , 120 , 70 ] ;
36620: LD_ADDR_VAR 0 9
36624: PUSH
36625: LD_INT 32
36627: PUSH
36628: LD_INT 120
36630: PUSH
36631: LD_INT 70
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: LIST
36638: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36639: LD_VAR 0 6
36643: PPUSH
36644: CALL_OW 264
36648: PUSH
36649: LD_INT 7
36651: PUSH
36652: LD_INT 28
36654: PUSH
36655: LD_INT 45
36657: PUSH
36658: LD_EXP 37
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: IN
36669: IFFALSE 36690
// points := [ 35 , 20 , 45 ] ;
36671: LD_ADDR_VAR 0 9
36675: PUSH
36676: LD_INT 35
36678: PUSH
36679: LD_INT 20
36681: PUSH
36682: LD_INT 45
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: LIST
36689: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36690: LD_VAR 0 6
36694: PPUSH
36695: CALL_OW 264
36699: PUSH
36700: LD_INT 47
36702: PUSH
36703: EMPTY
36704: LIST
36705: IN
36706: IFFALSE 36727
// points := [ 67 , 45 , 75 ] ;
36708: LD_ADDR_VAR 0 9
36712: PUSH
36713: LD_INT 67
36715: PUSH
36716: LD_INT 45
36718: PUSH
36719: LD_INT 75
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: LIST
36726: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36727: LD_VAR 0 6
36731: PPUSH
36732: CALL_OW 264
36736: PUSH
36737: LD_INT 26
36739: PUSH
36740: EMPTY
36741: LIST
36742: IN
36743: IFFALSE 36764
// points := [ 120 , 30 , 80 ] ;
36745: LD_ADDR_VAR 0 9
36749: PUSH
36750: LD_INT 120
36752: PUSH
36753: LD_INT 30
36755: PUSH
36756: LD_INT 80
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: LIST
36763: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36764: LD_VAR 0 6
36768: PPUSH
36769: CALL_OW 264
36773: PUSH
36774: LD_INT 22
36776: PUSH
36777: EMPTY
36778: LIST
36779: IN
36780: IFFALSE 36801
// points := [ 40 , 1 , 1 ] ;
36782: LD_ADDR_VAR 0 9
36786: PUSH
36787: LD_INT 40
36789: PUSH
36790: LD_INT 1
36792: PUSH
36793: LD_INT 1
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: LIST
36800: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36801: LD_VAR 0 6
36805: PPUSH
36806: CALL_OW 264
36810: PUSH
36811: LD_INT 29
36813: PUSH
36814: EMPTY
36815: LIST
36816: IN
36817: IFFALSE 36838
// points := [ 70 , 200 , 400 ] ;
36819: LD_ADDR_VAR 0 9
36823: PUSH
36824: LD_INT 70
36826: PUSH
36827: LD_INT 200
36829: PUSH
36830: LD_INT 400
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: LIST
36837: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36838: LD_VAR 0 6
36842: PPUSH
36843: CALL_OW 264
36847: PUSH
36848: LD_INT 14
36850: PUSH
36851: LD_INT 53
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: IN
36858: IFFALSE 36879
// points := [ 40 , 10 , 20 ] ;
36860: LD_ADDR_VAR 0 9
36864: PUSH
36865: LD_INT 40
36867: PUSH
36868: LD_INT 10
36870: PUSH
36871: LD_INT 20
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: LIST
36878: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36879: LD_VAR 0 6
36883: PPUSH
36884: CALL_OW 264
36888: PUSH
36889: LD_INT 9
36891: PUSH
36892: EMPTY
36893: LIST
36894: IN
36895: IFFALSE 36916
// points := [ 5 , 70 , 20 ] ;
36897: LD_ADDR_VAR 0 9
36901: PUSH
36902: LD_INT 5
36904: PUSH
36905: LD_INT 70
36907: PUSH
36908: LD_INT 20
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: LIST
36915: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36916: LD_VAR 0 6
36920: PPUSH
36921: CALL_OW 264
36925: PUSH
36926: LD_INT 10
36928: PUSH
36929: EMPTY
36930: LIST
36931: IN
36932: IFFALSE 36953
// points := [ 35 , 110 , 70 ] ;
36934: LD_ADDR_VAR 0 9
36938: PUSH
36939: LD_INT 35
36941: PUSH
36942: LD_INT 110
36944: PUSH
36945: LD_INT 70
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: LIST
36952: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36953: LD_VAR 0 6
36957: PPUSH
36958: CALL_OW 265
36962: PUSH
36963: LD_INT 25
36965: EQUAL
36966: IFFALSE 36987
// points := [ 80 , 65 , 100 ] ;
36968: LD_ADDR_VAR 0 9
36972: PUSH
36973: LD_INT 80
36975: PUSH
36976: LD_INT 65
36978: PUSH
36979: LD_INT 100
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: LIST
36986: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36987: LD_VAR 0 6
36991: PPUSH
36992: CALL_OW 263
36996: PUSH
36997: LD_INT 1
36999: EQUAL
37000: IFFALSE 37035
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37002: LD_ADDR_VAR 0 10
37006: PUSH
37007: LD_VAR 0 10
37011: PUSH
37012: LD_VAR 0 6
37016: PPUSH
37017: CALL_OW 311
37021: PPUSH
37022: LD_INT 3
37024: PPUSH
37025: CALL_OW 259
37029: PUSH
37030: LD_INT 4
37032: MUL
37033: MUL
37034: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37035: LD_VAR 0 6
37039: PPUSH
37040: CALL_OW 263
37044: PUSH
37045: LD_INT 2
37047: EQUAL
37048: IFFALSE 37099
// begin j := IsControledBy ( i ) ;
37050: LD_ADDR_VAR 0 7
37054: PUSH
37055: LD_VAR 0 6
37059: PPUSH
37060: CALL_OW 312
37064: ST_TO_ADDR
// if j then
37065: LD_VAR 0 7
37069: IFFALSE 37099
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37071: LD_ADDR_VAR 0 10
37075: PUSH
37076: LD_VAR 0 10
37080: PUSH
37081: LD_VAR 0 7
37085: PPUSH
37086: LD_INT 3
37088: PPUSH
37089: CALL_OW 259
37093: PUSH
37094: LD_INT 3
37096: MUL
37097: MUL
37098: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37099: LD_VAR 0 6
37103: PPUSH
37104: CALL_OW 264
37108: PUSH
37109: LD_INT 5
37111: PUSH
37112: LD_INT 6
37114: PUSH
37115: LD_INT 46
37117: PUSH
37118: LD_INT 44
37120: PUSH
37121: LD_INT 47
37123: PUSH
37124: LD_INT 45
37126: PUSH
37127: LD_INT 28
37129: PUSH
37130: LD_INT 7
37132: PUSH
37133: LD_INT 27
37135: PUSH
37136: LD_INT 29
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: LIST
37143: LIST
37144: LIST
37145: LIST
37146: LIST
37147: LIST
37148: LIST
37149: LIST
37150: IN
37151: PUSH
37152: LD_VAR 0 1
37156: PPUSH
37157: LD_INT 52
37159: PPUSH
37160: CALL_OW 321
37164: PUSH
37165: LD_INT 2
37167: EQUAL
37168: AND
37169: IFFALSE 37186
// bpoints := bpoints * 1.2 ;
37171: LD_ADDR_VAR 0 10
37175: PUSH
37176: LD_VAR 0 10
37180: PUSH
37181: LD_REAL  1.20000000000000E+0000
37184: MUL
37185: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37186: LD_VAR 0 6
37190: PPUSH
37191: CALL_OW 264
37195: PUSH
37196: LD_INT 6
37198: PUSH
37199: LD_INT 46
37201: PUSH
37202: LD_INT 47
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: LIST
37209: IN
37210: IFFALSE 37227
// bpoints := bpoints * 1.2 ;
37212: LD_ADDR_VAR 0 10
37216: PUSH
37217: LD_VAR 0 10
37221: PUSH
37222: LD_REAL  1.20000000000000E+0000
37225: MUL
37226: ST_TO_ADDR
// end ; unit_building :
37227: GO 37241
37229: LD_INT 3
37231: DOUBLE
37232: EQUAL
37233: IFTRUE 37237
37235: GO 37240
37237: POP
// ; end ;
37238: GO 37241
37240: POP
// for j = 1 to 3 do
37241: LD_ADDR_VAR 0 7
37245: PUSH
37246: DOUBLE
37247: LD_INT 1
37249: DEC
37250: ST_TO_ADDR
37251: LD_INT 3
37253: PUSH
37254: FOR_TO
37255: IFFALSE 37308
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37257: LD_ADDR_VAR 0 5
37261: PUSH
37262: LD_VAR 0 5
37266: PPUSH
37267: LD_VAR 0 7
37271: PPUSH
37272: LD_VAR 0 5
37276: PUSH
37277: LD_VAR 0 7
37281: ARRAY
37282: PUSH
37283: LD_VAR 0 9
37287: PUSH
37288: LD_VAR 0 7
37292: ARRAY
37293: PUSH
37294: LD_VAR 0 10
37298: MUL
37299: PLUS
37300: PPUSH
37301: CALL_OW 1
37305: ST_TO_ADDR
37306: GO 37254
37308: POP
37309: POP
// end ;
37310: GO 35787
37312: POP
37313: POP
// result := Replace ( result , 4 , tmp ) ;
37314: LD_ADDR_VAR 0 5
37318: PUSH
37319: LD_VAR 0 5
37323: PPUSH
37324: LD_INT 4
37326: PPUSH
37327: LD_VAR 0 8
37331: PPUSH
37332: CALL_OW 1
37336: ST_TO_ADDR
// end ;
37337: LD_VAR 0 5
37341: RET
// export function DangerAtRange ( unit , range ) ; begin
37342: LD_INT 0
37344: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37345: LD_ADDR_VAR 0 3
37349: PUSH
37350: LD_VAR 0 1
37354: PPUSH
37355: CALL_OW 255
37359: PPUSH
37360: LD_VAR 0 1
37364: PPUSH
37365: CALL_OW 250
37369: PPUSH
37370: LD_VAR 0 1
37374: PPUSH
37375: CALL_OW 251
37379: PPUSH
37380: LD_VAR 0 2
37384: PPUSH
37385: CALL 35639 0 4
37389: ST_TO_ADDR
// end ;
37390: LD_VAR 0 3
37394: RET
// export function DangerInArea ( side , area ) ; begin
37395: LD_INT 0
37397: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37398: LD_ADDR_VAR 0 3
37402: PUSH
37403: LD_VAR 0 2
37407: PPUSH
37408: LD_INT 81
37410: PUSH
37411: LD_VAR 0 1
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: PPUSH
37420: CALL_OW 70
37424: ST_TO_ADDR
// end ;
37425: LD_VAR 0 3
37429: RET
// export function IsExtension ( b ) ; begin
37430: LD_INT 0
37432: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37433: LD_ADDR_VAR 0 2
37437: PUSH
37438: LD_VAR 0 1
37442: PUSH
37443: LD_INT 23
37445: PUSH
37446: LD_INT 20
37448: PUSH
37449: LD_INT 22
37451: PUSH
37452: LD_INT 17
37454: PUSH
37455: LD_INT 24
37457: PUSH
37458: LD_INT 21
37460: PUSH
37461: LD_INT 19
37463: PUSH
37464: LD_INT 16
37466: PUSH
37467: LD_INT 25
37469: PUSH
37470: LD_INT 18
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: IN
37485: ST_TO_ADDR
// end ;
37486: LD_VAR 0 2
37490: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37491: LD_INT 0
37493: PPUSH
37494: PPUSH
37495: PPUSH
// result := [ ] ;
37496: LD_ADDR_VAR 0 4
37500: PUSH
37501: EMPTY
37502: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37503: LD_ADDR_VAR 0 5
37507: PUSH
37508: LD_VAR 0 2
37512: PPUSH
37513: LD_INT 21
37515: PUSH
37516: LD_INT 3
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: PPUSH
37523: CALL_OW 70
37527: ST_TO_ADDR
// if not tmp then
37528: LD_VAR 0 5
37532: NOT
37533: IFFALSE 37537
// exit ;
37535: GO 37601
// if checkLink then
37537: LD_VAR 0 3
37541: IFFALSE 37591
// begin for i in tmp do
37543: LD_ADDR_VAR 0 6
37547: PUSH
37548: LD_VAR 0 5
37552: PUSH
37553: FOR_IN
37554: IFFALSE 37589
// if GetBase ( i ) <> base then
37556: LD_VAR 0 6
37560: PPUSH
37561: CALL_OW 274
37565: PUSH
37566: LD_VAR 0 1
37570: NONEQUAL
37571: IFFALSE 37587
// ComLinkToBase ( base , i ) ;
37573: LD_VAR 0 1
37577: PPUSH
37578: LD_VAR 0 6
37582: PPUSH
37583: CALL_OW 169
37587: GO 37553
37589: POP
37590: POP
// end ; result := tmp ;
37591: LD_ADDR_VAR 0 4
37595: PUSH
37596: LD_VAR 0 5
37600: ST_TO_ADDR
// end ;
37601: LD_VAR 0 4
37605: RET
// export function ComComplete ( units , b ) ; var i ; begin
37606: LD_INT 0
37608: PPUSH
37609: PPUSH
// if not units then
37610: LD_VAR 0 1
37614: NOT
37615: IFFALSE 37619
// exit ;
37617: GO 37709
// for i in units do
37619: LD_ADDR_VAR 0 4
37623: PUSH
37624: LD_VAR 0 1
37628: PUSH
37629: FOR_IN
37630: IFFALSE 37707
// if BuildingStatus ( b ) = bs_build then
37632: LD_VAR 0 2
37636: PPUSH
37637: CALL_OW 461
37641: PUSH
37642: LD_INT 1
37644: EQUAL
37645: IFFALSE 37705
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37647: LD_VAR 0 4
37651: PPUSH
37652: LD_STRING h
37654: PUSH
37655: LD_VAR 0 2
37659: PPUSH
37660: CALL_OW 250
37664: PUSH
37665: LD_VAR 0 2
37669: PPUSH
37670: CALL_OW 251
37674: PUSH
37675: LD_VAR 0 2
37679: PUSH
37680: LD_INT 0
37682: PUSH
37683: LD_INT 0
37685: PUSH
37686: LD_INT 0
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: LIST
37693: LIST
37694: LIST
37695: LIST
37696: LIST
37697: PUSH
37698: EMPTY
37699: LIST
37700: PPUSH
37701: CALL_OW 446
37705: GO 37629
37707: POP
37708: POP
// end ;
37709: LD_VAR 0 3
37713: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37714: LD_INT 0
37716: PPUSH
37717: PPUSH
37718: PPUSH
37719: PPUSH
37720: PPUSH
37721: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
37722: LD_VAR 0 1
37726: NOT
37727: PUSH
37728: LD_VAR 0 1
37732: PPUSH
37733: CALL_OW 263
37737: PUSH
37738: LD_INT 2
37740: EQUAL
37741: NOT
37742: OR
37743: IFFALSE 37747
// exit ;
37745: GO 38063
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37747: LD_ADDR_VAR 0 6
37751: PUSH
37752: LD_INT 22
37754: PUSH
37755: LD_VAR 0 1
37759: PPUSH
37760: CALL_OW 255
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: LD_INT 2
37771: PUSH
37772: LD_INT 30
37774: PUSH
37775: LD_INT 36
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: LD_INT 34
37784: PUSH
37785: LD_INT 31
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: LIST
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: PPUSH
37801: CALL_OW 69
37805: ST_TO_ADDR
// if not tmp then
37806: LD_VAR 0 6
37810: NOT
37811: IFFALSE 37815
// exit ;
37813: GO 38063
// result := [ ] ;
37815: LD_ADDR_VAR 0 2
37819: PUSH
37820: EMPTY
37821: ST_TO_ADDR
// for i in tmp do
37822: LD_ADDR_VAR 0 3
37826: PUSH
37827: LD_VAR 0 6
37831: PUSH
37832: FOR_IN
37833: IFFALSE 37904
// begin t := UnitsInside ( i ) ;
37835: LD_ADDR_VAR 0 4
37839: PUSH
37840: LD_VAR 0 3
37844: PPUSH
37845: CALL_OW 313
37849: ST_TO_ADDR
// if t then
37850: LD_VAR 0 4
37854: IFFALSE 37902
// for j in t do
37856: LD_ADDR_VAR 0 7
37860: PUSH
37861: LD_VAR 0 4
37865: PUSH
37866: FOR_IN
37867: IFFALSE 37900
// result := Insert ( result , result + 1 , j ) ;
37869: LD_ADDR_VAR 0 2
37873: PUSH
37874: LD_VAR 0 2
37878: PPUSH
37879: LD_VAR 0 2
37883: PUSH
37884: LD_INT 1
37886: PLUS
37887: PPUSH
37888: LD_VAR 0 7
37892: PPUSH
37893: CALL_OW 2
37897: ST_TO_ADDR
37898: GO 37866
37900: POP
37901: POP
// end ;
37902: GO 37832
37904: POP
37905: POP
// if not result then
37906: LD_VAR 0 2
37910: NOT
37911: IFFALSE 37915
// exit ;
37913: GO 38063
// mech := result [ 1 ] ;
37915: LD_ADDR_VAR 0 5
37919: PUSH
37920: LD_VAR 0 2
37924: PUSH
37925: LD_INT 1
37927: ARRAY
37928: ST_TO_ADDR
// if result > 1 then
37929: LD_VAR 0 2
37933: PUSH
37934: LD_INT 1
37936: GREATER
37937: IFFALSE 38049
// for i = 2 to result do
37939: LD_ADDR_VAR 0 3
37943: PUSH
37944: DOUBLE
37945: LD_INT 2
37947: DEC
37948: ST_TO_ADDR
37949: LD_VAR 0 2
37953: PUSH
37954: FOR_TO
37955: IFFALSE 38047
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37957: LD_ADDR_VAR 0 4
37961: PUSH
37962: LD_VAR 0 2
37966: PUSH
37967: LD_VAR 0 3
37971: ARRAY
37972: PPUSH
37973: LD_INT 3
37975: PPUSH
37976: CALL_OW 259
37980: PUSH
37981: LD_VAR 0 2
37985: PUSH
37986: LD_VAR 0 3
37990: ARRAY
37991: PPUSH
37992: CALL_OW 432
37996: MINUS
37997: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37998: LD_VAR 0 4
38002: PUSH
38003: LD_VAR 0 5
38007: PPUSH
38008: LD_INT 3
38010: PPUSH
38011: CALL_OW 259
38015: PUSH
38016: LD_VAR 0 5
38020: PPUSH
38021: CALL_OW 432
38025: MINUS
38026: GREATEREQUAL
38027: IFFALSE 38045
// mech := result [ i ] ;
38029: LD_ADDR_VAR 0 5
38033: PUSH
38034: LD_VAR 0 2
38038: PUSH
38039: LD_VAR 0 3
38043: ARRAY
38044: ST_TO_ADDR
// end ;
38045: GO 37954
38047: POP
38048: POP
// ComLinkTo ( vehicle , mech ) ;
38049: LD_VAR 0 1
38053: PPUSH
38054: LD_VAR 0 5
38058: PPUSH
38059: CALL_OW 135
// end ;
38063: LD_VAR 0 2
38067: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38068: LD_INT 0
38070: PPUSH
38071: PPUSH
38072: PPUSH
38073: PPUSH
38074: PPUSH
38075: PPUSH
38076: PPUSH
38077: PPUSH
38078: PPUSH
38079: PPUSH
38080: PPUSH
38081: PPUSH
38082: PPUSH
// result := [ ] ;
38083: LD_ADDR_VAR 0 7
38087: PUSH
38088: EMPTY
38089: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38090: LD_VAR 0 1
38094: PPUSH
38095: CALL_OW 266
38099: PUSH
38100: LD_INT 0
38102: PUSH
38103: LD_INT 1
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: IN
38110: NOT
38111: IFFALSE 38115
// exit ;
38113: GO 39749
// if name then
38115: LD_VAR 0 3
38119: IFFALSE 38135
// SetBName ( base_dep , name ) ;
38121: LD_VAR 0 1
38125: PPUSH
38126: LD_VAR 0 3
38130: PPUSH
38131: CALL_OW 500
// base := GetBase ( base_dep ) ;
38135: LD_ADDR_VAR 0 15
38139: PUSH
38140: LD_VAR 0 1
38144: PPUSH
38145: CALL_OW 274
38149: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38150: LD_ADDR_VAR 0 16
38154: PUSH
38155: LD_VAR 0 1
38159: PPUSH
38160: CALL_OW 255
38164: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38165: LD_ADDR_VAR 0 17
38169: PUSH
38170: LD_VAR 0 1
38174: PPUSH
38175: CALL_OW 248
38179: ST_TO_ADDR
// if sources then
38180: LD_VAR 0 5
38184: IFFALSE 38231
// for i = 1 to 3 do
38186: LD_ADDR_VAR 0 8
38190: PUSH
38191: DOUBLE
38192: LD_INT 1
38194: DEC
38195: ST_TO_ADDR
38196: LD_INT 3
38198: PUSH
38199: FOR_TO
38200: IFFALSE 38229
// AddResourceType ( base , i , sources [ i ] ) ;
38202: LD_VAR 0 15
38206: PPUSH
38207: LD_VAR 0 8
38211: PPUSH
38212: LD_VAR 0 5
38216: PUSH
38217: LD_VAR 0 8
38221: ARRAY
38222: PPUSH
38223: CALL_OW 276
38227: GO 38199
38229: POP
38230: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38231: LD_ADDR_VAR 0 18
38235: PUSH
38236: LD_VAR 0 15
38240: PPUSH
38241: LD_VAR 0 2
38245: PPUSH
38246: LD_INT 1
38248: PPUSH
38249: CALL 37491 0 3
38253: ST_TO_ADDR
// InitHc ;
38254: CALL_OW 19
// InitUc ;
38258: CALL_OW 18
// uc_side := side ;
38262: LD_ADDR_OWVAR 20
38266: PUSH
38267: LD_VAR 0 16
38271: ST_TO_ADDR
// uc_nation := nation ;
38272: LD_ADDR_OWVAR 21
38276: PUSH
38277: LD_VAR 0 17
38281: ST_TO_ADDR
// if buildings then
38282: LD_VAR 0 18
38286: IFFALSE 39608
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38288: LD_ADDR_VAR 0 19
38292: PUSH
38293: LD_VAR 0 18
38297: PPUSH
38298: LD_INT 2
38300: PUSH
38301: LD_INT 30
38303: PUSH
38304: LD_INT 29
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: LD_INT 30
38313: PUSH
38314: LD_INT 30
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: LIST
38325: PPUSH
38326: CALL_OW 72
38330: ST_TO_ADDR
// if tmp then
38331: LD_VAR 0 19
38335: IFFALSE 38383
// for i in tmp do
38337: LD_ADDR_VAR 0 8
38341: PUSH
38342: LD_VAR 0 19
38346: PUSH
38347: FOR_IN
38348: IFFALSE 38381
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38350: LD_VAR 0 8
38354: PPUSH
38355: CALL_OW 250
38359: PPUSH
38360: LD_VAR 0 8
38364: PPUSH
38365: CALL_OW 251
38369: PPUSH
38370: LD_VAR 0 16
38374: PPUSH
38375: CALL_OW 441
38379: GO 38347
38381: POP
38382: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38383: LD_VAR 0 18
38387: PPUSH
38388: LD_INT 2
38390: PUSH
38391: LD_INT 30
38393: PUSH
38394: LD_INT 32
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 30
38403: PUSH
38404: LD_INT 33
38406: PUSH
38407: EMPTY
38408: LIST
38409: LIST
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: LIST
38415: PPUSH
38416: CALL_OW 72
38420: IFFALSE 38508
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38422: LD_ADDR_VAR 0 8
38426: PUSH
38427: LD_VAR 0 18
38431: PPUSH
38432: LD_INT 2
38434: PUSH
38435: LD_INT 30
38437: PUSH
38438: LD_INT 32
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: PUSH
38445: LD_INT 30
38447: PUSH
38448: LD_INT 33
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: LIST
38459: PPUSH
38460: CALL_OW 72
38464: PUSH
38465: FOR_IN
38466: IFFALSE 38506
// begin if not GetBWeapon ( i ) then
38468: LD_VAR 0 8
38472: PPUSH
38473: CALL_OW 269
38477: NOT
38478: IFFALSE 38504
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38480: LD_VAR 0 8
38484: PPUSH
38485: LD_VAR 0 8
38489: PPUSH
38490: LD_VAR 0 2
38494: PPUSH
38495: CALL 39754 0 2
38499: PPUSH
38500: CALL_OW 431
// end ;
38504: GO 38465
38506: POP
38507: POP
// end ; for i = 1 to personel do
38508: LD_ADDR_VAR 0 8
38512: PUSH
38513: DOUBLE
38514: LD_INT 1
38516: DEC
38517: ST_TO_ADDR
38518: LD_VAR 0 6
38522: PUSH
38523: FOR_TO
38524: IFFALSE 39588
// begin if i > 4 then
38526: LD_VAR 0 8
38530: PUSH
38531: LD_INT 4
38533: GREATER
38534: IFFALSE 38538
// break ;
38536: GO 39588
// case i of 1 :
38538: LD_VAR 0 8
38542: PUSH
38543: LD_INT 1
38545: DOUBLE
38546: EQUAL
38547: IFTRUE 38551
38549: GO 38631
38551: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38552: LD_ADDR_VAR 0 12
38556: PUSH
38557: LD_VAR 0 18
38561: PPUSH
38562: LD_INT 22
38564: PUSH
38565: LD_VAR 0 16
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 58
38576: PUSH
38577: EMPTY
38578: LIST
38579: PUSH
38580: LD_INT 2
38582: PUSH
38583: LD_INT 30
38585: PUSH
38586: LD_INT 32
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: LD_INT 30
38595: PUSH
38596: LD_INT 4
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: LD_INT 30
38605: PUSH
38606: LD_INT 5
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: LIST
38623: PPUSH
38624: CALL_OW 72
38628: ST_TO_ADDR
38629: GO 38853
38631: LD_INT 2
38633: DOUBLE
38634: EQUAL
38635: IFTRUE 38639
38637: GO 38701
38639: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38640: LD_ADDR_VAR 0 12
38644: PUSH
38645: LD_VAR 0 18
38649: PPUSH
38650: LD_INT 22
38652: PUSH
38653: LD_VAR 0 16
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: PUSH
38662: LD_INT 2
38664: PUSH
38665: LD_INT 30
38667: PUSH
38668: LD_INT 0
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: PUSH
38675: LD_INT 30
38677: PUSH
38678: LD_INT 1
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: LIST
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PPUSH
38694: CALL_OW 72
38698: ST_TO_ADDR
38699: GO 38853
38701: LD_INT 3
38703: DOUBLE
38704: EQUAL
38705: IFTRUE 38709
38707: GO 38771
38709: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38710: LD_ADDR_VAR 0 12
38714: PUSH
38715: LD_VAR 0 18
38719: PPUSH
38720: LD_INT 22
38722: PUSH
38723: LD_VAR 0 16
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 2
38734: PUSH
38735: LD_INT 30
38737: PUSH
38738: LD_INT 2
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 30
38747: PUSH
38748: LD_INT 3
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: LIST
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PPUSH
38764: CALL_OW 72
38768: ST_TO_ADDR
38769: GO 38853
38771: LD_INT 4
38773: DOUBLE
38774: EQUAL
38775: IFTRUE 38779
38777: GO 38852
38779: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38780: LD_ADDR_VAR 0 12
38784: PUSH
38785: LD_VAR 0 18
38789: PPUSH
38790: LD_INT 22
38792: PUSH
38793: LD_VAR 0 16
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 2
38804: PUSH
38805: LD_INT 30
38807: PUSH
38808: LD_INT 6
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: LD_INT 30
38817: PUSH
38818: LD_INT 7
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: LD_INT 30
38827: PUSH
38828: LD_INT 8
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PPUSH
38845: CALL_OW 72
38849: ST_TO_ADDR
38850: GO 38853
38852: POP
// if i = 1 then
38853: LD_VAR 0 8
38857: PUSH
38858: LD_INT 1
38860: EQUAL
38861: IFFALSE 38972
// begin tmp := [ ] ;
38863: LD_ADDR_VAR 0 19
38867: PUSH
38868: EMPTY
38869: ST_TO_ADDR
// for j in f do
38870: LD_ADDR_VAR 0 9
38874: PUSH
38875: LD_VAR 0 12
38879: PUSH
38880: FOR_IN
38881: IFFALSE 38954
// if GetBType ( j ) = b_bunker then
38883: LD_VAR 0 9
38887: PPUSH
38888: CALL_OW 266
38892: PUSH
38893: LD_INT 32
38895: EQUAL
38896: IFFALSE 38923
// tmp := Insert ( tmp , 1 , j ) else
38898: LD_ADDR_VAR 0 19
38902: PUSH
38903: LD_VAR 0 19
38907: PPUSH
38908: LD_INT 1
38910: PPUSH
38911: LD_VAR 0 9
38915: PPUSH
38916: CALL_OW 2
38920: ST_TO_ADDR
38921: GO 38952
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38923: LD_ADDR_VAR 0 19
38927: PUSH
38928: LD_VAR 0 19
38932: PPUSH
38933: LD_VAR 0 19
38937: PUSH
38938: LD_INT 1
38940: PLUS
38941: PPUSH
38942: LD_VAR 0 9
38946: PPUSH
38947: CALL_OW 2
38951: ST_TO_ADDR
38952: GO 38880
38954: POP
38955: POP
// if tmp then
38956: LD_VAR 0 19
38960: IFFALSE 38972
// f := tmp ;
38962: LD_ADDR_VAR 0 12
38966: PUSH
38967: LD_VAR 0 19
38971: ST_TO_ADDR
// end ; x := personel [ i ] ;
38972: LD_ADDR_VAR 0 13
38976: PUSH
38977: LD_VAR 0 6
38981: PUSH
38982: LD_VAR 0 8
38986: ARRAY
38987: ST_TO_ADDR
// if x = - 1 then
38988: LD_VAR 0 13
38992: PUSH
38993: LD_INT 1
38995: NEG
38996: EQUAL
38997: IFFALSE 39206
// begin for j in f do
38999: LD_ADDR_VAR 0 9
39003: PUSH
39004: LD_VAR 0 12
39008: PUSH
39009: FOR_IN
39010: IFFALSE 39202
// repeat InitHc ;
39012: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39016: LD_VAR 0 9
39020: PPUSH
39021: CALL_OW 266
39025: PUSH
39026: LD_INT 5
39028: EQUAL
39029: IFFALSE 39099
// begin if UnitsInside ( j ) < 3 then
39031: LD_VAR 0 9
39035: PPUSH
39036: CALL_OW 313
39040: PUSH
39041: LD_INT 3
39043: LESS
39044: IFFALSE 39080
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39046: LD_INT 0
39048: PPUSH
39049: LD_INT 5
39051: PUSH
39052: LD_INT 8
39054: PUSH
39055: LD_INT 9
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: LIST
39062: PUSH
39063: LD_VAR 0 17
39067: ARRAY
39068: PPUSH
39069: LD_VAR 0 4
39073: PPUSH
39074: CALL_OW 380
39078: GO 39097
// PrepareHuman ( false , i , skill ) ;
39080: LD_INT 0
39082: PPUSH
39083: LD_VAR 0 8
39087: PPUSH
39088: LD_VAR 0 4
39092: PPUSH
39093: CALL_OW 380
// end else
39097: GO 39116
// PrepareHuman ( false , i , skill ) ;
39099: LD_INT 0
39101: PPUSH
39102: LD_VAR 0 8
39106: PPUSH
39107: LD_VAR 0 4
39111: PPUSH
39112: CALL_OW 380
// un := CreateHuman ;
39116: LD_ADDR_VAR 0 14
39120: PUSH
39121: CALL_OW 44
39125: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39126: LD_ADDR_VAR 0 7
39130: PUSH
39131: LD_VAR 0 7
39135: PPUSH
39136: LD_INT 1
39138: PPUSH
39139: LD_VAR 0 14
39143: PPUSH
39144: CALL_OW 2
39148: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39149: LD_VAR 0 14
39153: PPUSH
39154: LD_VAR 0 9
39158: PPUSH
39159: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39163: LD_VAR 0 9
39167: PPUSH
39168: CALL_OW 313
39172: PUSH
39173: LD_INT 6
39175: EQUAL
39176: PUSH
39177: LD_VAR 0 9
39181: PPUSH
39182: CALL_OW 266
39186: PUSH
39187: LD_INT 32
39189: PUSH
39190: LD_INT 31
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: IN
39197: OR
39198: IFFALSE 39012
39200: GO 39009
39202: POP
39203: POP
// end else
39204: GO 39586
// for j = 1 to x do
39206: LD_ADDR_VAR 0 9
39210: PUSH
39211: DOUBLE
39212: LD_INT 1
39214: DEC
39215: ST_TO_ADDR
39216: LD_VAR 0 13
39220: PUSH
39221: FOR_TO
39222: IFFALSE 39584
// begin InitHc ;
39224: CALL_OW 19
// if not f then
39228: LD_VAR 0 12
39232: NOT
39233: IFFALSE 39322
// begin PrepareHuman ( false , i , skill ) ;
39235: LD_INT 0
39237: PPUSH
39238: LD_VAR 0 8
39242: PPUSH
39243: LD_VAR 0 4
39247: PPUSH
39248: CALL_OW 380
// un := CreateHuman ;
39252: LD_ADDR_VAR 0 14
39256: PUSH
39257: CALL_OW 44
39261: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39262: LD_ADDR_VAR 0 7
39266: PUSH
39267: LD_VAR 0 7
39271: PPUSH
39272: LD_INT 1
39274: PPUSH
39275: LD_VAR 0 14
39279: PPUSH
39280: CALL_OW 2
39284: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39285: LD_VAR 0 14
39289: PPUSH
39290: LD_VAR 0 1
39294: PPUSH
39295: CALL_OW 250
39299: PPUSH
39300: LD_VAR 0 1
39304: PPUSH
39305: CALL_OW 251
39309: PPUSH
39310: LD_INT 10
39312: PPUSH
39313: LD_INT 0
39315: PPUSH
39316: CALL_OW 50
// continue ;
39320: GO 39221
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39322: LD_VAR 0 12
39326: PUSH
39327: LD_INT 1
39329: ARRAY
39330: PPUSH
39331: CALL_OW 313
39335: PUSH
39336: LD_VAR 0 12
39340: PUSH
39341: LD_INT 1
39343: ARRAY
39344: PPUSH
39345: CALL_OW 266
39349: PUSH
39350: LD_INT 32
39352: PUSH
39353: LD_INT 31
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: IN
39360: AND
39361: PUSH
39362: LD_VAR 0 12
39366: PUSH
39367: LD_INT 1
39369: ARRAY
39370: PPUSH
39371: CALL_OW 313
39375: PUSH
39376: LD_INT 6
39378: EQUAL
39379: OR
39380: IFFALSE 39400
// f := Delete ( f , 1 ) ;
39382: LD_ADDR_VAR 0 12
39386: PUSH
39387: LD_VAR 0 12
39391: PPUSH
39392: LD_INT 1
39394: PPUSH
39395: CALL_OW 3
39399: ST_TO_ADDR
// if not f then
39400: LD_VAR 0 12
39404: NOT
39405: IFFALSE 39423
// begin x := x + 2 ;
39407: LD_ADDR_VAR 0 13
39411: PUSH
39412: LD_VAR 0 13
39416: PUSH
39417: LD_INT 2
39419: PLUS
39420: ST_TO_ADDR
// continue ;
39421: GO 39221
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39423: LD_VAR 0 12
39427: PUSH
39428: LD_INT 1
39430: ARRAY
39431: PPUSH
39432: CALL_OW 266
39436: PUSH
39437: LD_INT 5
39439: EQUAL
39440: IFFALSE 39514
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39442: LD_VAR 0 12
39446: PUSH
39447: LD_INT 1
39449: ARRAY
39450: PPUSH
39451: CALL_OW 313
39455: PUSH
39456: LD_INT 3
39458: LESS
39459: IFFALSE 39495
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39461: LD_INT 0
39463: PPUSH
39464: LD_INT 5
39466: PUSH
39467: LD_INT 8
39469: PUSH
39470: LD_INT 9
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: LIST
39477: PUSH
39478: LD_VAR 0 17
39482: ARRAY
39483: PPUSH
39484: LD_VAR 0 4
39488: PPUSH
39489: CALL_OW 380
39493: GO 39512
// PrepareHuman ( false , i , skill ) ;
39495: LD_INT 0
39497: PPUSH
39498: LD_VAR 0 8
39502: PPUSH
39503: LD_VAR 0 4
39507: PPUSH
39508: CALL_OW 380
// end else
39512: GO 39531
// PrepareHuman ( false , i , skill ) ;
39514: LD_INT 0
39516: PPUSH
39517: LD_VAR 0 8
39521: PPUSH
39522: LD_VAR 0 4
39526: PPUSH
39527: CALL_OW 380
// un := CreateHuman ;
39531: LD_ADDR_VAR 0 14
39535: PUSH
39536: CALL_OW 44
39540: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39541: LD_ADDR_VAR 0 7
39545: PUSH
39546: LD_VAR 0 7
39550: PPUSH
39551: LD_INT 1
39553: PPUSH
39554: LD_VAR 0 14
39558: PPUSH
39559: CALL_OW 2
39563: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39564: LD_VAR 0 14
39568: PPUSH
39569: LD_VAR 0 12
39573: PUSH
39574: LD_INT 1
39576: ARRAY
39577: PPUSH
39578: CALL_OW 52
// end ;
39582: GO 39221
39584: POP
39585: POP
// end ;
39586: GO 38523
39588: POP
39589: POP
// result := result ^ buildings ;
39590: LD_ADDR_VAR 0 7
39594: PUSH
39595: LD_VAR 0 7
39599: PUSH
39600: LD_VAR 0 18
39604: ADD
39605: ST_TO_ADDR
// end else
39606: GO 39749
// begin for i = 1 to personel do
39608: LD_ADDR_VAR 0 8
39612: PUSH
39613: DOUBLE
39614: LD_INT 1
39616: DEC
39617: ST_TO_ADDR
39618: LD_VAR 0 6
39622: PUSH
39623: FOR_TO
39624: IFFALSE 39747
// begin if i > 4 then
39626: LD_VAR 0 8
39630: PUSH
39631: LD_INT 4
39633: GREATER
39634: IFFALSE 39638
// break ;
39636: GO 39747
// x := personel [ i ] ;
39638: LD_ADDR_VAR 0 13
39642: PUSH
39643: LD_VAR 0 6
39647: PUSH
39648: LD_VAR 0 8
39652: ARRAY
39653: ST_TO_ADDR
// if x = - 1 then
39654: LD_VAR 0 13
39658: PUSH
39659: LD_INT 1
39661: NEG
39662: EQUAL
39663: IFFALSE 39667
// continue ;
39665: GO 39623
// PrepareHuman ( false , i , skill ) ;
39667: LD_INT 0
39669: PPUSH
39670: LD_VAR 0 8
39674: PPUSH
39675: LD_VAR 0 4
39679: PPUSH
39680: CALL_OW 380
// un := CreateHuman ;
39684: LD_ADDR_VAR 0 14
39688: PUSH
39689: CALL_OW 44
39693: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39694: LD_VAR 0 14
39698: PPUSH
39699: LD_VAR 0 1
39703: PPUSH
39704: CALL_OW 250
39708: PPUSH
39709: LD_VAR 0 1
39713: PPUSH
39714: CALL_OW 251
39718: PPUSH
39719: LD_INT 10
39721: PPUSH
39722: LD_INT 0
39724: PPUSH
39725: CALL_OW 50
// result := result ^ un ;
39729: LD_ADDR_VAR 0 7
39733: PUSH
39734: LD_VAR 0 7
39738: PUSH
39739: LD_VAR 0 14
39743: ADD
39744: ST_TO_ADDR
// end ;
39745: GO 39623
39747: POP
39748: POP
// end ; end ;
39749: LD_VAR 0 7
39753: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39754: LD_INT 0
39756: PPUSH
39757: PPUSH
39758: PPUSH
39759: PPUSH
39760: PPUSH
39761: PPUSH
39762: PPUSH
39763: PPUSH
39764: PPUSH
39765: PPUSH
39766: PPUSH
39767: PPUSH
39768: PPUSH
39769: PPUSH
39770: PPUSH
39771: PPUSH
// result := false ;
39772: LD_ADDR_VAR 0 3
39776: PUSH
39777: LD_INT 0
39779: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39780: LD_VAR 0 1
39784: NOT
39785: PUSH
39786: LD_VAR 0 1
39790: PPUSH
39791: CALL_OW 266
39795: PUSH
39796: LD_INT 32
39798: PUSH
39799: LD_INT 33
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: IN
39806: NOT
39807: OR
39808: IFFALSE 39812
// exit ;
39810: GO 40921
// nat := GetNation ( tower ) ;
39812: LD_ADDR_VAR 0 12
39816: PUSH
39817: LD_VAR 0 1
39821: PPUSH
39822: CALL_OW 248
39826: ST_TO_ADDR
// side := GetSide ( tower ) ;
39827: LD_ADDR_VAR 0 16
39831: PUSH
39832: LD_VAR 0 1
39836: PPUSH
39837: CALL_OW 255
39841: ST_TO_ADDR
// x := GetX ( tower ) ;
39842: LD_ADDR_VAR 0 10
39846: PUSH
39847: LD_VAR 0 1
39851: PPUSH
39852: CALL_OW 250
39856: ST_TO_ADDR
// y := GetY ( tower ) ;
39857: LD_ADDR_VAR 0 11
39861: PUSH
39862: LD_VAR 0 1
39866: PPUSH
39867: CALL_OW 251
39871: ST_TO_ADDR
// if not x or not y then
39872: LD_VAR 0 10
39876: NOT
39877: PUSH
39878: LD_VAR 0 11
39882: NOT
39883: OR
39884: IFFALSE 39888
// exit ;
39886: GO 40921
// weapon := 0 ;
39888: LD_ADDR_VAR 0 18
39892: PUSH
39893: LD_INT 0
39895: ST_TO_ADDR
// fac_list := [ ] ;
39896: LD_ADDR_VAR 0 17
39900: PUSH
39901: EMPTY
39902: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39903: LD_ADDR_VAR 0 6
39907: PUSH
39908: LD_VAR 0 1
39912: PPUSH
39913: CALL_OW 274
39917: PPUSH
39918: LD_VAR 0 2
39922: PPUSH
39923: LD_INT 0
39925: PPUSH
39926: CALL 37491 0 3
39930: PPUSH
39931: LD_INT 30
39933: PUSH
39934: LD_INT 3
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PPUSH
39941: CALL_OW 72
39945: ST_TO_ADDR
// if not factories then
39946: LD_VAR 0 6
39950: NOT
39951: IFFALSE 39955
// exit ;
39953: GO 40921
// for i in factories do
39955: LD_ADDR_VAR 0 8
39959: PUSH
39960: LD_VAR 0 6
39964: PUSH
39965: FOR_IN
39966: IFFALSE 39991
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39968: LD_ADDR_VAR 0 17
39972: PUSH
39973: LD_VAR 0 17
39977: PUSH
39978: LD_VAR 0 8
39982: PPUSH
39983: CALL_OW 478
39987: UNION
39988: ST_TO_ADDR
39989: GO 39965
39991: POP
39992: POP
// if not fac_list then
39993: LD_VAR 0 17
39997: NOT
39998: IFFALSE 40002
// exit ;
40000: GO 40921
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40002: LD_ADDR_VAR 0 5
40006: PUSH
40007: LD_INT 4
40009: PUSH
40010: LD_INT 5
40012: PUSH
40013: LD_INT 9
40015: PUSH
40016: LD_INT 10
40018: PUSH
40019: LD_INT 6
40021: PUSH
40022: LD_INT 7
40024: PUSH
40025: LD_INT 11
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: PUSH
40037: LD_INT 27
40039: PUSH
40040: LD_INT 28
40042: PUSH
40043: LD_INT 26
40045: PUSH
40046: LD_INT 30
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 43
40057: PUSH
40058: LD_INT 44
40060: PUSH
40061: LD_INT 46
40063: PUSH
40064: LD_INT 45
40066: PUSH
40067: LD_INT 47
40069: PUSH
40070: LD_INT 49
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: LIST
40085: PUSH
40086: LD_VAR 0 12
40090: ARRAY
40091: ST_TO_ADDR
// list := list isect fac_list ;
40092: LD_ADDR_VAR 0 5
40096: PUSH
40097: LD_VAR 0 5
40101: PUSH
40102: LD_VAR 0 17
40106: ISECT
40107: ST_TO_ADDR
// if not list then
40108: LD_VAR 0 5
40112: NOT
40113: IFFALSE 40117
// exit ;
40115: GO 40921
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40117: LD_VAR 0 12
40121: PUSH
40122: LD_INT 3
40124: EQUAL
40125: PUSH
40126: LD_INT 49
40128: PUSH
40129: LD_VAR 0 5
40133: IN
40134: AND
40135: PUSH
40136: LD_INT 31
40138: PPUSH
40139: LD_VAR 0 16
40143: PPUSH
40144: CALL_OW 321
40148: PUSH
40149: LD_INT 2
40151: EQUAL
40152: AND
40153: IFFALSE 40213
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40155: LD_INT 22
40157: PUSH
40158: LD_VAR 0 16
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 35
40169: PUSH
40170: LD_INT 49
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 91
40179: PUSH
40180: LD_VAR 0 1
40184: PUSH
40185: LD_INT 10
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: LIST
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: LIST
40197: PPUSH
40198: CALL_OW 69
40202: NOT
40203: IFFALSE 40213
// weapon := ru_time_lapser ;
40205: LD_ADDR_VAR 0 18
40209: PUSH
40210: LD_INT 49
40212: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40213: LD_VAR 0 12
40217: PUSH
40218: LD_INT 1
40220: PUSH
40221: LD_INT 2
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: IN
40228: PUSH
40229: LD_INT 11
40231: PUSH
40232: LD_VAR 0 5
40236: IN
40237: PUSH
40238: LD_INT 30
40240: PUSH
40241: LD_VAR 0 5
40245: IN
40246: OR
40247: AND
40248: PUSH
40249: LD_INT 6
40251: PPUSH
40252: LD_VAR 0 16
40256: PPUSH
40257: CALL_OW 321
40261: PUSH
40262: LD_INT 2
40264: EQUAL
40265: AND
40266: IFFALSE 40431
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40268: LD_INT 22
40270: PUSH
40271: LD_VAR 0 16
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: LD_INT 2
40282: PUSH
40283: LD_INT 35
40285: PUSH
40286: LD_INT 11
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 35
40295: PUSH
40296: LD_INT 30
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: LIST
40307: PUSH
40308: LD_INT 91
40310: PUSH
40311: LD_VAR 0 1
40315: PUSH
40316: LD_INT 18
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: LIST
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: LIST
40328: PPUSH
40329: CALL_OW 69
40333: NOT
40334: PUSH
40335: LD_INT 22
40337: PUSH
40338: LD_VAR 0 16
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 2
40349: PUSH
40350: LD_INT 30
40352: PUSH
40353: LD_INT 32
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: LD_INT 30
40362: PUSH
40363: LD_INT 33
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 91
40377: PUSH
40378: LD_VAR 0 1
40382: PUSH
40383: LD_INT 12
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: LIST
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: LIST
40395: PUSH
40396: EMPTY
40397: LIST
40398: PPUSH
40399: CALL_OW 69
40403: PUSH
40404: LD_INT 2
40406: GREATER
40407: AND
40408: IFFALSE 40431
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40410: LD_ADDR_VAR 0 18
40414: PUSH
40415: LD_INT 11
40417: PUSH
40418: LD_INT 30
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: PUSH
40425: LD_VAR 0 12
40429: ARRAY
40430: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40431: LD_VAR 0 18
40435: NOT
40436: PUSH
40437: LD_INT 40
40439: PPUSH
40440: LD_VAR 0 16
40444: PPUSH
40445: CALL_OW 321
40449: PUSH
40450: LD_INT 2
40452: EQUAL
40453: AND
40454: PUSH
40455: LD_INT 7
40457: PUSH
40458: LD_VAR 0 5
40462: IN
40463: PUSH
40464: LD_INT 28
40466: PUSH
40467: LD_VAR 0 5
40471: IN
40472: OR
40473: PUSH
40474: LD_INT 45
40476: PUSH
40477: LD_VAR 0 5
40481: IN
40482: OR
40483: AND
40484: IFFALSE 40738
// begin hex := GetHexInfo ( x , y ) ;
40486: LD_ADDR_VAR 0 4
40490: PUSH
40491: LD_VAR 0 10
40495: PPUSH
40496: LD_VAR 0 11
40500: PPUSH
40501: CALL_OW 546
40505: ST_TO_ADDR
// if hex [ 1 ] then
40506: LD_VAR 0 4
40510: PUSH
40511: LD_INT 1
40513: ARRAY
40514: IFFALSE 40518
// exit ;
40516: GO 40921
// height := hex [ 2 ] ;
40518: LD_ADDR_VAR 0 15
40522: PUSH
40523: LD_VAR 0 4
40527: PUSH
40528: LD_INT 2
40530: ARRAY
40531: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40532: LD_ADDR_VAR 0 14
40536: PUSH
40537: LD_INT 0
40539: PUSH
40540: LD_INT 2
40542: PUSH
40543: LD_INT 3
40545: PUSH
40546: LD_INT 5
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: ST_TO_ADDR
// for i in tmp do
40555: LD_ADDR_VAR 0 8
40559: PUSH
40560: LD_VAR 0 14
40564: PUSH
40565: FOR_IN
40566: IFFALSE 40736
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40568: LD_ADDR_VAR 0 9
40572: PUSH
40573: LD_VAR 0 10
40577: PPUSH
40578: LD_VAR 0 8
40582: PPUSH
40583: LD_INT 5
40585: PPUSH
40586: CALL_OW 272
40590: PUSH
40591: LD_VAR 0 11
40595: PPUSH
40596: LD_VAR 0 8
40600: PPUSH
40601: LD_INT 5
40603: PPUSH
40604: CALL_OW 273
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40613: LD_VAR 0 9
40617: PUSH
40618: LD_INT 1
40620: ARRAY
40621: PPUSH
40622: LD_VAR 0 9
40626: PUSH
40627: LD_INT 2
40629: ARRAY
40630: PPUSH
40631: CALL_OW 488
40635: IFFALSE 40734
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40637: LD_ADDR_VAR 0 4
40641: PUSH
40642: LD_VAR 0 9
40646: PUSH
40647: LD_INT 1
40649: ARRAY
40650: PPUSH
40651: LD_VAR 0 9
40655: PUSH
40656: LD_INT 2
40658: ARRAY
40659: PPUSH
40660: CALL_OW 546
40664: ST_TO_ADDR
// if hex [ 1 ] then
40665: LD_VAR 0 4
40669: PUSH
40670: LD_INT 1
40672: ARRAY
40673: IFFALSE 40677
// continue ;
40675: GO 40565
// h := hex [ 2 ] ;
40677: LD_ADDR_VAR 0 13
40681: PUSH
40682: LD_VAR 0 4
40686: PUSH
40687: LD_INT 2
40689: ARRAY
40690: ST_TO_ADDR
// if h + 7 < height then
40691: LD_VAR 0 13
40695: PUSH
40696: LD_INT 7
40698: PLUS
40699: PUSH
40700: LD_VAR 0 15
40704: LESS
40705: IFFALSE 40734
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40707: LD_ADDR_VAR 0 18
40711: PUSH
40712: LD_INT 7
40714: PUSH
40715: LD_INT 28
40717: PUSH
40718: LD_INT 45
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: LIST
40725: PUSH
40726: LD_VAR 0 12
40730: ARRAY
40731: ST_TO_ADDR
// break ;
40732: GO 40736
// end ; end ; end ;
40734: GO 40565
40736: POP
40737: POP
// end ; if not weapon then
40738: LD_VAR 0 18
40742: NOT
40743: IFFALSE 40803
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40745: LD_ADDR_VAR 0 5
40749: PUSH
40750: LD_VAR 0 5
40754: PUSH
40755: LD_INT 11
40757: PUSH
40758: LD_INT 30
40760: PUSH
40761: LD_INT 49
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: LIST
40768: DIFF
40769: ST_TO_ADDR
// if not list then
40770: LD_VAR 0 5
40774: NOT
40775: IFFALSE 40779
// exit ;
40777: GO 40921
// weapon := list [ rand ( 1 , list ) ] ;
40779: LD_ADDR_VAR 0 18
40783: PUSH
40784: LD_VAR 0 5
40788: PUSH
40789: LD_INT 1
40791: PPUSH
40792: LD_VAR 0 5
40796: PPUSH
40797: CALL_OW 12
40801: ARRAY
40802: ST_TO_ADDR
// end ; if weapon then
40803: LD_VAR 0 18
40807: IFFALSE 40921
// begin tmp := CostOfWeapon ( weapon ) ;
40809: LD_ADDR_VAR 0 14
40813: PUSH
40814: LD_VAR 0 18
40818: PPUSH
40819: CALL_OW 451
40823: ST_TO_ADDR
// j := GetBase ( tower ) ;
40824: LD_ADDR_VAR 0 9
40828: PUSH
40829: LD_VAR 0 1
40833: PPUSH
40834: CALL_OW 274
40838: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40839: LD_VAR 0 9
40843: PPUSH
40844: LD_INT 1
40846: PPUSH
40847: CALL_OW 275
40851: PUSH
40852: LD_VAR 0 14
40856: PUSH
40857: LD_INT 1
40859: ARRAY
40860: GREATEREQUAL
40861: PUSH
40862: LD_VAR 0 9
40866: PPUSH
40867: LD_INT 2
40869: PPUSH
40870: CALL_OW 275
40874: PUSH
40875: LD_VAR 0 14
40879: PUSH
40880: LD_INT 2
40882: ARRAY
40883: GREATEREQUAL
40884: AND
40885: PUSH
40886: LD_VAR 0 9
40890: PPUSH
40891: LD_INT 3
40893: PPUSH
40894: CALL_OW 275
40898: PUSH
40899: LD_VAR 0 14
40903: PUSH
40904: LD_INT 3
40906: ARRAY
40907: GREATEREQUAL
40908: AND
40909: IFFALSE 40921
// result := weapon ;
40911: LD_ADDR_VAR 0 3
40915: PUSH
40916: LD_VAR 0 18
40920: ST_TO_ADDR
// end ; end ;
40921: LD_VAR 0 3
40925: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40926: LD_INT 0
40928: PPUSH
40929: PPUSH
// result := true ;
40930: LD_ADDR_VAR 0 3
40934: PUSH
40935: LD_INT 1
40937: ST_TO_ADDR
// if array1 = array2 then
40938: LD_VAR 0 1
40942: PUSH
40943: LD_VAR 0 2
40947: EQUAL
40948: IFFALSE 41008
// begin for i = 1 to array1 do
40950: LD_ADDR_VAR 0 4
40954: PUSH
40955: DOUBLE
40956: LD_INT 1
40958: DEC
40959: ST_TO_ADDR
40960: LD_VAR 0 1
40964: PUSH
40965: FOR_TO
40966: IFFALSE 41004
// if array1 [ i ] <> array2 [ i ] then
40968: LD_VAR 0 1
40972: PUSH
40973: LD_VAR 0 4
40977: ARRAY
40978: PUSH
40979: LD_VAR 0 2
40983: PUSH
40984: LD_VAR 0 4
40988: ARRAY
40989: NONEQUAL
40990: IFFALSE 41002
// begin result := false ;
40992: LD_ADDR_VAR 0 3
40996: PUSH
40997: LD_INT 0
40999: ST_TO_ADDR
// break ;
41000: GO 41004
// end ;
41002: GO 40965
41004: POP
41005: POP
// end else
41006: GO 41016
// result := false ;
41008: LD_ADDR_VAR 0 3
41012: PUSH
41013: LD_INT 0
41015: ST_TO_ADDR
// end ;
41016: LD_VAR 0 3
41020: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41021: LD_INT 0
41023: PPUSH
41024: PPUSH
// if not array1 or not array2 then
41025: LD_VAR 0 1
41029: NOT
41030: PUSH
41031: LD_VAR 0 2
41035: NOT
41036: OR
41037: IFFALSE 41041
// exit ;
41039: GO 41105
// result := true ;
41041: LD_ADDR_VAR 0 3
41045: PUSH
41046: LD_INT 1
41048: ST_TO_ADDR
// for i = 1 to array1 do
41049: LD_ADDR_VAR 0 4
41053: PUSH
41054: DOUBLE
41055: LD_INT 1
41057: DEC
41058: ST_TO_ADDR
41059: LD_VAR 0 1
41063: PUSH
41064: FOR_TO
41065: IFFALSE 41103
// if array1 [ i ] <> array2 [ i ] then
41067: LD_VAR 0 1
41071: PUSH
41072: LD_VAR 0 4
41076: ARRAY
41077: PUSH
41078: LD_VAR 0 2
41082: PUSH
41083: LD_VAR 0 4
41087: ARRAY
41088: NONEQUAL
41089: IFFALSE 41101
// begin result := false ;
41091: LD_ADDR_VAR 0 3
41095: PUSH
41096: LD_INT 0
41098: ST_TO_ADDR
// break ;
41099: GO 41103
// end ;
41101: GO 41064
41103: POP
41104: POP
// end ;
41105: LD_VAR 0 3
41109: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41110: LD_INT 0
41112: PPUSH
41113: PPUSH
41114: PPUSH
// pom := GetBase ( fac ) ;
41115: LD_ADDR_VAR 0 5
41119: PUSH
41120: LD_VAR 0 1
41124: PPUSH
41125: CALL_OW 274
41129: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41130: LD_ADDR_VAR 0 4
41134: PUSH
41135: LD_VAR 0 2
41139: PUSH
41140: LD_INT 1
41142: ARRAY
41143: PPUSH
41144: LD_VAR 0 2
41148: PUSH
41149: LD_INT 2
41151: ARRAY
41152: PPUSH
41153: LD_VAR 0 2
41157: PUSH
41158: LD_INT 3
41160: ARRAY
41161: PPUSH
41162: LD_VAR 0 2
41166: PUSH
41167: LD_INT 4
41169: ARRAY
41170: PPUSH
41171: CALL_OW 449
41175: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41176: LD_ADDR_VAR 0 3
41180: PUSH
41181: LD_VAR 0 5
41185: PPUSH
41186: LD_INT 1
41188: PPUSH
41189: CALL_OW 275
41193: PUSH
41194: LD_VAR 0 4
41198: PUSH
41199: LD_INT 1
41201: ARRAY
41202: GREATEREQUAL
41203: PUSH
41204: LD_VAR 0 5
41208: PPUSH
41209: LD_INT 2
41211: PPUSH
41212: CALL_OW 275
41216: PUSH
41217: LD_VAR 0 4
41221: PUSH
41222: LD_INT 2
41224: ARRAY
41225: GREATEREQUAL
41226: AND
41227: PUSH
41228: LD_VAR 0 5
41232: PPUSH
41233: LD_INT 3
41235: PPUSH
41236: CALL_OW 275
41240: PUSH
41241: LD_VAR 0 4
41245: PUSH
41246: LD_INT 3
41248: ARRAY
41249: GREATEREQUAL
41250: AND
41251: ST_TO_ADDR
// end ;
41252: LD_VAR 0 3
41256: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41257: LD_INT 0
41259: PPUSH
41260: PPUSH
41261: PPUSH
41262: PPUSH
// pom := GetBase ( building ) ;
41263: LD_ADDR_VAR 0 3
41267: PUSH
41268: LD_VAR 0 1
41272: PPUSH
41273: CALL_OW 274
41277: ST_TO_ADDR
// if not pom then
41278: LD_VAR 0 3
41282: NOT
41283: IFFALSE 41287
// exit ;
41285: GO 41457
// btype := GetBType ( building ) ;
41287: LD_ADDR_VAR 0 5
41291: PUSH
41292: LD_VAR 0 1
41296: PPUSH
41297: CALL_OW 266
41301: ST_TO_ADDR
// if btype = b_armoury then
41302: LD_VAR 0 5
41306: PUSH
41307: LD_INT 4
41309: EQUAL
41310: IFFALSE 41320
// btype := b_barracks ;
41312: LD_ADDR_VAR 0 5
41316: PUSH
41317: LD_INT 5
41319: ST_TO_ADDR
// if btype = b_depot then
41320: LD_VAR 0 5
41324: PUSH
41325: LD_INT 0
41327: EQUAL
41328: IFFALSE 41338
// btype := b_warehouse ;
41330: LD_ADDR_VAR 0 5
41334: PUSH
41335: LD_INT 1
41337: ST_TO_ADDR
// if btype = b_workshop then
41338: LD_VAR 0 5
41342: PUSH
41343: LD_INT 2
41345: EQUAL
41346: IFFALSE 41356
// btype := b_factory ;
41348: LD_ADDR_VAR 0 5
41352: PUSH
41353: LD_INT 3
41355: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41356: LD_ADDR_VAR 0 4
41360: PUSH
41361: LD_VAR 0 5
41365: PPUSH
41366: LD_VAR 0 1
41370: PPUSH
41371: CALL_OW 248
41375: PPUSH
41376: CALL_OW 450
41380: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41381: LD_ADDR_VAR 0 2
41385: PUSH
41386: LD_VAR 0 3
41390: PPUSH
41391: LD_INT 1
41393: PPUSH
41394: CALL_OW 275
41398: PUSH
41399: LD_VAR 0 4
41403: PUSH
41404: LD_INT 1
41406: ARRAY
41407: GREATEREQUAL
41408: PUSH
41409: LD_VAR 0 3
41413: PPUSH
41414: LD_INT 2
41416: PPUSH
41417: CALL_OW 275
41421: PUSH
41422: LD_VAR 0 4
41426: PUSH
41427: LD_INT 2
41429: ARRAY
41430: GREATEREQUAL
41431: AND
41432: PUSH
41433: LD_VAR 0 3
41437: PPUSH
41438: LD_INT 3
41440: PPUSH
41441: CALL_OW 275
41445: PUSH
41446: LD_VAR 0 4
41450: PUSH
41451: LD_INT 3
41453: ARRAY
41454: GREATEREQUAL
41455: AND
41456: ST_TO_ADDR
// end ;
41457: LD_VAR 0 2
41461: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41462: LD_INT 0
41464: PPUSH
41465: PPUSH
41466: PPUSH
// pom := GetBase ( building ) ;
41467: LD_ADDR_VAR 0 4
41471: PUSH
41472: LD_VAR 0 1
41476: PPUSH
41477: CALL_OW 274
41481: ST_TO_ADDR
// if not pom then
41482: LD_VAR 0 4
41486: NOT
41487: IFFALSE 41491
// exit ;
41489: GO 41592
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41491: LD_ADDR_VAR 0 5
41495: PUSH
41496: LD_VAR 0 2
41500: PPUSH
41501: LD_VAR 0 1
41505: PPUSH
41506: CALL_OW 248
41510: PPUSH
41511: CALL_OW 450
41515: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41516: LD_ADDR_VAR 0 3
41520: PUSH
41521: LD_VAR 0 4
41525: PPUSH
41526: LD_INT 1
41528: PPUSH
41529: CALL_OW 275
41533: PUSH
41534: LD_VAR 0 5
41538: PUSH
41539: LD_INT 1
41541: ARRAY
41542: GREATEREQUAL
41543: PUSH
41544: LD_VAR 0 4
41548: PPUSH
41549: LD_INT 2
41551: PPUSH
41552: CALL_OW 275
41556: PUSH
41557: LD_VAR 0 5
41561: PUSH
41562: LD_INT 2
41564: ARRAY
41565: GREATEREQUAL
41566: AND
41567: PUSH
41568: LD_VAR 0 4
41572: PPUSH
41573: LD_INT 3
41575: PPUSH
41576: CALL_OW 275
41580: PUSH
41581: LD_VAR 0 5
41585: PUSH
41586: LD_INT 3
41588: ARRAY
41589: GREATEREQUAL
41590: AND
41591: ST_TO_ADDR
// end ;
41592: LD_VAR 0 3
41596: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41597: LD_INT 0
41599: PPUSH
41600: PPUSH
41601: PPUSH
41602: PPUSH
41603: PPUSH
41604: PPUSH
41605: PPUSH
41606: PPUSH
41607: PPUSH
41608: PPUSH
41609: PPUSH
// result := false ;
41610: LD_ADDR_VAR 0 8
41614: PUSH
41615: LD_INT 0
41617: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41618: LD_VAR 0 5
41622: NOT
41623: PUSH
41624: LD_VAR 0 1
41628: NOT
41629: OR
41630: PUSH
41631: LD_VAR 0 2
41635: NOT
41636: OR
41637: PUSH
41638: LD_VAR 0 3
41642: NOT
41643: OR
41644: IFFALSE 41648
// exit ;
41646: GO 42462
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41648: LD_ADDR_VAR 0 14
41652: PUSH
41653: LD_VAR 0 1
41657: PPUSH
41658: LD_VAR 0 2
41662: PPUSH
41663: LD_VAR 0 3
41667: PPUSH
41668: LD_VAR 0 4
41672: PPUSH
41673: LD_VAR 0 5
41677: PUSH
41678: LD_INT 1
41680: ARRAY
41681: PPUSH
41682: CALL_OW 248
41686: PPUSH
41687: LD_INT 0
41689: PPUSH
41690: CALL 43699 0 6
41694: ST_TO_ADDR
// if not hexes then
41695: LD_VAR 0 14
41699: NOT
41700: IFFALSE 41704
// exit ;
41702: GO 42462
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41704: LD_ADDR_VAR 0 17
41708: PUSH
41709: LD_VAR 0 5
41713: PPUSH
41714: LD_INT 22
41716: PUSH
41717: LD_VAR 0 13
41721: PPUSH
41722: CALL_OW 255
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 2
41733: PUSH
41734: LD_INT 30
41736: PUSH
41737: LD_INT 0
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 30
41746: PUSH
41747: LD_INT 1
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: LIST
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PPUSH
41763: CALL_OW 72
41767: ST_TO_ADDR
// for i = 1 to hexes do
41768: LD_ADDR_VAR 0 9
41772: PUSH
41773: DOUBLE
41774: LD_INT 1
41776: DEC
41777: ST_TO_ADDR
41778: LD_VAR 0 14
41782: PUSH
41783: FOR_TO
41784: IFFALSE 42460
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41786: LD_ADDR_VAR 0 13
41790: PUSH
41791: LD_VAR 0 14
41795: PUSH
41796: LD_VAR 0 9
41800: ARRAY
41801: PUSH
41802: LD_INT 1
41804: ARRAY
41805: PPUSH
41806: LD_VAR 0 14
41810: PUSH
41811: LD_VAR 0 9
41815: ARRAY
41816: PUSH
41817: LD_INT 2
41819: ARRAY
41820: PPUSH
41821: CALL_OW 428
41825: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41826: LD_VAR 0 14
41830: PUSH
41831: LD_VAR 0 9
41835: ARRAY
41836: PUSH
41837: LD_INT 1
41839: ARRAY
41840: PPUSH
41841: LD_VAR 0 14
41845: PUSH
41846: LD_VAR 0 9
41850: ARRAY
41851: PUSH
41852: LD_INT 2
41854: ARRAY
41855: PPUSH
41856: CALL_OW 351
41860: PUSH
41861: LD_VAR 0 14
41865: PUSH
41866: LD_VAR 0 9
41870: ARRAY
41871: PUSH
41872: LD_INT 1
41874: ARRAY
41875: PPUSH
41876: LD_VAR 0 14
41880: PUSH
41881: LD_VAR 0 9
41885: ARRAY
41886: PUSH
41887: LD_INT 2
41889: ARRAY
41890: PPUSH
41891: CALL_OW 488
41895: NOT
41896: OR
41897: PUSH
41898: LD_VAR 0 13
41902: PPUSH
41903: CALL_OW 247
41907: PUSH
41908: LD_INT 3
41910: EQUAL
41911: OR
41912: IFFALSE 41918
// exit ;
41914: POP
41915: POP
41916: GO 42462
// if not tmp then
41918: LD_VAR 0 13
41922: NOT
41923: IFFALSE 41927
// continue ;
41925: GO 41783
// result := true ;
41927: LD_ADDR_VAR 0 8
41931: PUSH
41932: LD_INT 1
41934: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41935: LD_VAR 0 6
41939: PUSH
41940: LD_VAR 0 13
41944: PPUSH
41945: CALL_OW 247
41949: PUSH
41950: LD_INT 2
41952: EQUAL
41953: AND
41954: PUSH
41955: LD_VAR 0 13
41959: PPUSH
41960: CALL_OW 263
41964: PUSH
41965: LD_INT 1
41967: EQUAL
41968: AND
41969: IFFALSE 42133
// begin if IsDrivenBy ( tmp ) then
41971: LD_VAR 0 13
41975: PPUSH
41976: CALL_OW 311
41980: IFFALSE 41984
// continue ;
41982: GO 41783
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41984: LD_VAR 0 6
41988: PPUSH
41989: LD_INT 3
41991: PUSH
41992: LD_INT 60
41994: PUSH
41995: EMPTY
41996: LIST
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 3
42004: PUSH
42005: LD_INT 55
42007: PUSH
42008: EMPTY
42009: LIST
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PPUSH
42019: CALL_OW 72
42023: IFFALSE 42131
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42025: LD_ADDR_VAR 0 18
42029: PUSH
42030: LD_VAR 0 6
42034: PPUSH
42035: LD_INT 3
42037: PUSH
42038: LD_INT 60
42040: PUSH
42041: EMPTY
42042: LIST
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 3
42050: PUSH
42051: LD_INT 55
42053: PUSH
42054: EMPTY
42055: LIST
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PPUSH
42065: CALL_OW 72
42069: PUSH
42070: LD_INT 1
42072: ARRAY
42073: ST_TO_ADDR
// if IsInUnit ( driver ) then
42074: LD_VAR 0 18
42078: PPUSH
42079: CALL_OW 310
42083: IFFALSE 42094
// ComExit ( driver ) ;
42085: LD_VAR 0 18
42089: PPUSH
42090: CALL 66883 0 1
// AddComEnterUnit ( driver , tmp ) ;
42094: LD_VAR 0 18
42098: PPUSH
42099: LD_VAR 0 13
42103: PPUSH
42104: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42108: LD_VAR 0 18
42112: PPUSH
42113: LD_VAR 0 7
42117: PPUSH
42118: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42122: LD_VAR 0 18
42126: PPUSH
42127: CALL_OW 181
// end ; continue ;
42131: GO 41783
// end ; if not cleaners or not tmp in cleaners then
42133: LD_VAR 0 6
42137: NOT
42138: PUSH
42139: LD_VAR 0 13
42143: PUSH
42144: LD_VAR 0 6
42148: IN
42149: NOT
42150: OR
42151: IFFALSE 42458
// begin if dep then
42153: LD_VAR 0 17
42157: IFFALSE 42293
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42159: LD_ADDR_VAR 0 16
42163: PUSH
42164: LD_VAR 0 17
42168: PUSH
42169: LD_INT 1
42171: ARRAY
42172: PPUSH
42173: CALL_OW 250
42177: PPUSH
42178: LD_VAR 0 17
42182: PUSH
42183: LD_INT 1
42185: ARRAY
42186: PPUSH
42187: CALL_OW 254
42191: PPUSH
42192: LD_INT 5
42194: PPUSH
42195: CALL_OW 272
42199: PUSH
42200: LD_VAR 0 17
42204: PUSH
42205: LD_INT 1
42207: ARRAY
42208: PPUSH
42209: CALL_OW 251
42213: PPUSH
42214: LD_VAR 0 17
42218: PUSH
42219: LD_INT 1
42221: ARRAY
42222: PPUSH
42223: CALL_OW 254
42227: PPUSH
42228: LD_INT 5
42230: PPUSH
42231: CALL_OW 273
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42240: LD_VAR 0 16
42244: PUSH
42245: LD_INT 1
42247: ARRAY
42248: PPUSH
42249: LD_VAR 0 16
42253: PUSH
42254: LD_INT 2
42256: ARRAY
42257: PPUSH
42258: CALL_OW 488
42262: IFFALSE 42293
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42264: LD_VAR 0 13
42268: PPUSH
42269: LD_VAR 0 16
42273: PUSH
42274: LD_INT 1
42276: ARRAY
42277: PPUSH
42278: LD_VAR 0 16
42282: PUSH
42283: LD_INT 2
42285: ARRAY
42286: PPUSH
42287: CALL_OW 111
// continue ;
42291: GO 41783
// end ; end ; r := GetDir ( tmp ) ;
42293: LD_ADDR_VAR 0 15
42297: PUSH
42298: LD_VAR 0 13
42302: PPUSH
42303: CALL_OW 254
42307: ST_TO_ADDR
// if r = 5 then
42308: LD_VAR 0 15
42312: PUSH
42313: LD_INT 5
42315: EQUAL
42316: IFFALSE 42326
// r := 0 ;
42318: LD_ADDR_VAR 0 15
42322: PUSH
42323: LD_INT 0
42325: ST_TO_ADDR
// for j = r to 5 do
42326: LD_ADDR_VAR 0 10
42330: PUSH
42331: DOUBLE
42332: LD_VAR 0 15
42336: DEC
42337: ST_TO_ADDR
42338: LD_INT 5
42340: PUSH
42341: FOR_TO
42342: IFFALSE 42456
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42344: LD_ADDR_VAR 0 11
42348: PUSH
42349: LD_VAR 0 13
42353: PPUSH
42354: CALL_OW 250
42358: PPUSH
42359: LD_VAR 0 10
42363: PPUSH
42364: LD_INT 2
42366: PPUSH
42367: CALL_OW 272
42371: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42372: LD_ADDR_VAR 0 12
42376: PUSH
42377: LD_VAR 0 13
42381: PPUSH
42382: CALL_OW 251
42386: PPUSH
42387: LD_VAR 0 10
42391: PPUSH
42392: LD_INT 2
42394: PPUSH
42395: CALL_OW 273
42399: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42400: LD_VAR 0 11
42404: PPUSH
42405: LD_VAR 0 12
42409: PPUSH
42410: CALL_OW 488
42414: PUSH
42415: LD_VAR 0 11
42419: PPUSH
42420: LD_VAR 0 12
42424: PPUSH
42425: CALL_OW 428
42429: NOT
42430: AND
42431: IFFALSE 42454
// begin ComMoveXY ( tmp , _x , _y ) ;
42433: LD_VAR 0 13
42437: PPUSH
42438: LD_VAR 0 11
42442: PPUSH
42443: LD_VAR 0 12
42447: PPUSH
42448: CALL_OW 111
// break ;
42452: GO 42456
// end ; end ;
42454: GO 42341
42456: POP
42457: POP
// end ; end ;
42458: GO 41783
42460: POP
42461: POP
// end ;
42462: LD_VAR 0 8
42466: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42467: LD_INT 0
42469: PPUSH
// result := true ;
42470: LD_ADDR_VAR 0 3
42474: PUSH
42475: LD_INT 1
42477: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42478: LD_VAR 0 2
42482: PUSH
42483: LD_INT 24
42485: DOUBLE
42486: EQUAL
42487: IFTRUE 42497
42489: LD_INT 33
42491: DOUBLE
42492: EQUAL
42493: IFTRUE 42497
42495: GO 42522
42497: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42498: LD_ADDR_VAR 0 3
42502: PUSH
42503: LD_INT 32
42505: PPUSH
42506: LD_VAR 0 1
42510: PPUSH
42511: CALL_OW 321
42515: PUSH
42516: LD_INT 2
42518: EQUAL
42519: ST_TO_ADDR
42520: GO 42842
42522: LD_INT 20
42524: DOUBLE
42525: EQUAL
42526: IFTRUE 42530
42528: GO 42555
42530: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42531: LD_ADDR_VAR 0 3
42535: PUSH
42536: LD_INT 6
42538: PPUSH
42539: LD_VAR 0 1
42543: PPUSH
42544: CALL_OW 321
42548: PUSH
42549: LD_INT 2
42551: EQUAL
42552: ST_TO_ADDR
42553: GO 42842
42555: LD_INT 22
42557: DOUBLE
42558: EQUAL
42559: IFTRUE 42569
42561: LD_INT 36
42563: DOUBLE
42564: EQUAL
42565: IFTRUE 42569
42567: GO 42594
42569: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42570: LD_ADDR_VAR 0 3
42574: PUSH
42575: LD_INT 15
42577: PPUSH
42578: LD_VAR 0 1
42582: PPUSH
42583: CALL_OW 321
42587: PUSH
42588: LD_INT 2
42590: EQUAL
42591: ST_TO_ADDR
42592: GO 42842
42594: LD_INT 30
42596: DOUBLE
42597: EQUAL
42598: IFTRUE 42602
42600: GO 42627
42602: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42603: LD_ADDR_VAR 0 3
42607: PUSH
42608: LD_INT 20
42610: PPUSH
42611: LD_VAR 0 1
42615: PPUSH
42616: CALL_OW 321
42620: PUSH
42621: LD_INT 2
42623: EQUAL
42624: ST_TO_ADDR
42625: GO 42842
42627: LD_INT 28
42629: DOUBLE
42630: EQUAL
42631: IFTRUE 42641
42633: LD_INT 21
42635: DOUBLE
42636: EQUAL
42637: IFTRUE 42641
42639: GO 42666
42641: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42642: LD_ADDR_VAR 0 3
42646: PUSH
42647: LD_INT 21
42649: PPUSH
42650: LD_VAR 0 1
42654: PPUSH
42655: CALL_OW 321
42659: PUSH
42660: LD_INT 2
42662: EQUAL
42663: ST_TO_ADDR
42664: GO 42842
42666: LD_INT 16
42668: DOUBLE
42669: EQUAL
42670: IFTRUE 42674
42672: GO 42701
42674: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42675: LD_ADDR_VAR 0 3
42679: PUSH
42680: LD_EXP 44
42684: PPUSH
42685: LD_VAR 0 1
42689: PPUSH
42690: CALL_OW 321
42694: PUSH
42695: LD_INT 2
42697: EQUAL
42698: ST_TO_ADDR
42699: GO 42842
42701: LD_INT 19
42703: DOUBLE
42704: EQUAL
42705: IFTRUE 42715
42707: LD_INT 23
42709: DOUBLE
42710: EQUAL
42711: IFTRUE 42715
42713: GO 42742
42715: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42716: LD_ADDR_VAR 0 3
42720: PUSH
42721: LD_EXP 43
42725: PPUSH
42726: LD_VAR 0 1
42730: PPUSH
42731: CALL_OW 321
42735: PUSH
42736: LD_INT 2
42738: EQUAL
42739: ST_TO_ADDR
42740: GO 42842
42742: LD_INT 17
42744: DOUBLE
42745: EQUAL
42746: IFTRUE 42750
42748: GO 42775
42750: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42751: LD_ADDR_VAR 0 3
42755: PUSH
42756: LD_INT 39
42758: PPUSH
42759: LD_VAR 0 1
42763: PPUSH
42764: CALL_OW 321
42768: PUSH
42769: LD_INT 2
42771: EQUAL
42772: ST_TO_ADDR
42773: GO 42842
42775: LD_INT 18
42777: DOUBLE
42778: EQUAL
42779: IFTRUE 42783
42781: GO 42808
42783: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42784: LD_ADDR_VAR 0 3
42788: PUSH
42789: LD_INT 40
42791: PPUSH
42792: LD_VAR 0 1
42796: PPUSH
42797: CALL_OW 321
42801: PUSH
42802: LD_INT 2
42804: EQUAL
42805: ST_TO_ADDR
42806: GO 42842
42808: LD_INT 27
42810: DOUBLE
42811: EQUAL
42812: IFTRUE 42816
42814: GO 42841
42816: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42817: LD_ADDR_VAR 0 3
42821: PUSH
42822: LD_INT 35
42824: PPUSH
42825: LD_VAR 0 1
42829: PPUSH
42830: CALL_OW 321
42834: PUSH
42835: LD_INT 2
42837: EQUAL
42838: ST_TO_ADDR
42839: GO 42842
42841: POP
// end ;
42842: LD_VAR 0 3
42846: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42847: LD_INT 0
42849: PPUSH
42850: PPUSH
42851: PPUSH
42852: PPUSH
42853: PPUSH
42854: PPUSH
42855: PPUSH
42856: PPUSH
42857: PPUSH
42858: PPUSH
42859: PPUSH
// result := false ;
42860: LD_ADDR_VAR 0 6
42864: PUSH
42865: LD_INT 0
42867: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42868: LD_VAR 0 1
42872: NOT
42873: PUSH
42874: LD_VAR 0 1
42878: PPUSH
42879: CALL_OW 266
42883: PUSH
42884: LD_INT 0
42886: PUSH
42887: LD_INT 1
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: IN
42894: NOT
42895: OR
42896: PUSH
42897: LD_VAR 0 2
42901: NOT
42902: OR
42903: PUSH
42904: LD_VAR 0 5
42908: PUSH
42909: LD_INT 0
42911: PUSH
42912: LD_INT 1
42914: PUSH
42915: LD_INT 2
42917: PUSH
42918: LD_INT 3
42920: PUSH
42921: LD_INT 4
42923: PUSH
42924: LD_INT 5
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: IN
42935: NOT
42936: OR
42937: PUSH
42938: LD_VAR 0 3
42942: PPUSH
42943: LD_VAR 0 4
42947: PPUSH
42948: CALL_OW 488
42952: NOT
42953: OR
42954: IFFALSE 42958
// exit ;
42956: GO 43694
// side := GetSide ( depot ) ;
42958: LD_ADDR_VAR 0 9
42962: PUSH
42963: LD_VAR 0 1
42967: PPUSH
42968: CALL_OW 255
42972: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42973: LD_VAR 0 9
42977: PPUSH
42978: LD_VAR 0 2
42982: PPUSH
42983: CALL 42467 0 2
42987: NOT
42988: IFFALSE 42992
// exit ;
42990: GO 43694
// pom := GetBase ( depot ) ;
42992: LD_ADDR_VAR 0 10
42996: PUSH
42997: LD_VAR 0 1
43001: PPUSH
43002: CALL_OW 274
43006: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43007: LD_ADDR_VAR 0 11
43011: PUSH
43012: LD_VAR 0 2
43016: PPUSH
43017: LD_VAR 0 1
43021: PPUSH
43022: CALL_OW 248
43026: PPUSH
43027: CALL_OW 450
43031: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43032: LD_VAR 0 10
43036: PPUSH
43037: LD_INT 1
43039: PPUSH
43040: CALL_OW 275
43044: PUSH
43045: LD_VAR 0 11
43049: PUSH
43050: LD_INT 1
43052: ARRAY
43053: GREATEREQUAL
43054: PUSH
43055: LD_VAR 0 10
43059: PPUSH
43060: LD_INT 2
43062: PPUSH
43063: CALL_OW 275
43067: PUSH
43068: LD_VAR 0 11
43072: PUSH
43073: LD_INT 2
43075: ARRAY
43076: GREATEREQUAL
43077: AND
43078: PUSH
43079: LD_VAR 0 10
43083: PPUSH
43084: LD_INT 3
43086: PPUSH
43087: CALL_OW 275
43091: PUSH
43092: LD_VAR 0 11
43096: PUSH
43097: LD_INT 3
43099: ARRAY
43100: GREATEREQUAL
43101: AND
43102: NOT
43103: IFFALSE 43107
// exit ;
43105: GO 43694
// if GetBType ( depot ) = b_depot then
43107: LD_VAR 0 1
43111: PPUSH
43112: CALL_OW 266
43116: PUSH
43117: LD_INT 0
43119: EQUAL
43120: IFFALSE 43132
// dist := 28 else
43122: LD_ADDR_VAR 0 14
43126: PUSH
43127: LD_INT 28
43129: ST_TO_ADDR
43130: GO 43140
// dist := 36 ;
43132: LD_ADDR_VAR 0 14
43136: PUSH
43137: LD_INT 36
43139: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43140: LD_VAR 0 1
43144: PPUSH
43145: LD_VAR 0 3
43149: PPUSH
43150: LD_VAR 0 4
43154: PPUSH
43155: CALL_OW 297
43159: PUSH
43160: LD_VAR 0 14
43164: GREATER
43165: IFFALSE 43169
// exit ;
43167: GO 43694
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43169: LD_ADDR_VAR 0 12
43173: PUSH
43174: LD_VAR 0 2
43178: PPUSH
43179: LD_VAR 0 3
43183: PPUSH
43184: LD_VAR 0 4
43188: PPUSH
43189: LD_VAR 0 5
43193: PPUSH
43194: LD_VAR 0 1
43198: PPUSH
43199: CALL_OW 248
43203: PPUSH
43204: LD_INT 0
43206: PPUSH
43207: CALL 43699 0 6
43211: ST_TO_ADDR
// if not hexes then
43212: LD_VAR 0 12
43216: NOT
43217: IFFALSE 43221
// exit ;
43219: GO 43694
// hex := GetHexInfo ( x , y ) ;
43221: LD_ADDR_VAR 0 15
43225: PUSH
43226: LD_VAR 0 3
43230: PPUSH
43231: LD_VAR 0 4
43235: PPUSH
43236: CALL_OW 546
43240: ST_TO_ADDR
// if hex [ 1 ] then
43241: LD_VAR 0 15
43245: PUSH
43246: LD_INT 1
43248: ARRAY
43249: IFFALSE 43253
// exit ;
43251: GO 43694
// height := hex [ 2 ] ;
43253: LD_ADDR_VAR 0 13
43257: PUSH
43258: LD_VAR 0 15
43262: PUSH
43263: LD_INT 2
43265: ARRAY
43266: ST_TO_ADDR
// for i = 1 to hexes do
43267: LD_ADDR_VAR 0 7
43271: PUSH
43272: DOUBLE
43273: LD_INT 1
43275: DEC
43276: ST_TO_ADDR
43277: LD_VAR 0 12
43281: PUSH
43282: FOR_TO
43283: IFFALSE 43613
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43285: LD_VAR 0 12
43289: PUSH
43290: LD_VAR 0 7
43294: ARRAY
43295: PUSH
43296: LD_INT 1
43298: ARRAY
43299: PPUSH
43300: LD_VAR 0 12
43304: PUSH
43305: LD_VAR 0 7
43309: ARRAY
43310: PUSH
43311: LD_INT 2
43313: ARRAY
43314: PPUSH
43315: CALL_OW 488
43319: NOT
43320: PUSH
43321: LD_VAR 0 12
43325: PUSH
43326: LD_VAR 0 7
43330: ARRAY
43331: PUSH
43332: LD_INT 1
43334: ARRAY
43335: PPUSH
43336: LD_VAR 0 12
43340: PUSH
43341: LD_VAR 0 7
43345: ARRAY
43346: PUSH
43347: LD_INT 2
43349: ARRAY
43350: PPUSH
43351: CALL_OW 428
43355: PUSH
43356: LD_INT 0
43358: GREATER
43359: OR
43360: PUSH
43361: LD_VAR 0 12
43365: PUSH
43366: LD_VAR 0 7
43370: ARRAY
43371: PUSH
43372: LD_INT 1
43374: ARRAY
43375: PPUSH
43376: LD_VAR 0 12
43380: PUSH
43381: LD_VAR 0 7
43385: ARRAY
43386: PUSH
43387: LD_INT 2
43389: ARRAY
43390: PPUSH
43391: CALL_OW 351
43395: OR
43396: IFFALSE 43402
// exit ;
43398: POP
43399: POP
43400: GO 43694
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43402: LD_ADDR_VAR 0 8
43406: PUSH
43407: LD_VAR 0 12
43411: PUSH
43412: LD_VAR 0 7
43416: ARRAY
43417: PUSH
43418: LD_INT 1
43420: ARRAY
43421: PPUSH
43422: LD_VAR 0 12
43426: PUSH
43427: LD_VAR 0 7
43431: ARRAY
43432: PUSH
43433: LD_INT 2
43435: ARRAY
43436: PPUSH
43437: CALL_OW 546
43441: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43442: LD_VAR 0 8
43446: PUSH
43447: LD_INT 1
43449: ARRAY
43450: PUSH
43451: LD_VAR 0 8
43455: PUSH
43456: LD_INT 2
43458: ARRAY
43459: PUSH
43460: LD_VAR 0 13
43464: PUSH
43465: LD_INT 2
43467: PLUS
43468: GREATER
43469: OR
43470: PUSH
43471: LD_VAR 0 8
43475: PUSH
43476: LD_INT 2
43478: ARRAY
43479: PUSH
43480: LD_VAR 0 13
43484: PUSH
43485: LD_INT 2
43487: MINUS
43488: LESS
43489: OR
43490: PUSH
43491: LD_VAR 0 8
43495: PUSH
43496: LD_INT 3
43498: ARRAY
43499: PUSH
43500: LD_INT 0
43502: PUSH
43503: LD_INT 8
43505: PUSH
43506: LD_INT 9
43508: PUSH
43509: LD_INT 10
43511: PUSH
43512: LD_INT 11
43514: PUSH
43515: LD_INT 12
43517: PUSH
43518: LD_INT 13
43520: PUSH
43521: LD_INT 16
43523: PUSH
43524: LD_INT 17
43526: PUSH
43527: LD_INT 18
43529: PUSH
43530: LD_INT 19
43532: PUSH
43533: LD_INT 20
43535: PUSH
43536: LD_INT 21
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: IN
43554: NOT
43555: OR
43556: PUSH
43557: LD_VAR 0 8
43561: PUSH
43562: LD_INT 5
43564: ARRAY
43565: NOT
43566: OR
43567: PUSH
43568: LD_VAR 0 8
43572: PUSH
43573: LD_INT 6
43575: ARRAY
43576: PUSH
43577: LD_INT 1
43579: PUSH
43580: LD_INT 2
43582: PUSH
43583: LD_INT 7
43585: PUSH
43586: LD_INT 9
43588: PUSH
43589: LD_INT 10
43591: PUSH
43592: LD_INT 11
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: IN
43603: NOT
43604: OR
43605: IFFALSE 43611
// exit ;
43607: POP
43608: POP
43609: GO 43694
// end ;
43611: GO 43282
43613: POP
43614: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43615: LD_VAR 0 9
43619: PPUSH
43620: LD_VAR 0 3
43624: PPUSH
43625: LD_VAR 0 4
43629: PPUSH
43630: LD_INT 20
43632: PPUSH
43633: CALL 35639 0 4
43637: PUSH
43638: LD_INT 4
43640: ARRAY
43641: IFFALSE 43645
// exit ;
43643: GO 43694
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43645: LD_VAR 0 2
43649: PUSH
43650: LD_INT 29
43652: PUSH
43653: LD_INT 30
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: IN
43660: PUSH
43661: LD_VAR 0 3
43665: PPUSH
43666: LD_VAR 0 4
43670: PPUSH
43671: LD_VAR 0 9
43675: PPUSH
43676: CALL_OW 440
43680: NOT
43681: AND
43682: IFFALSE 43686
// exit ;
43684: GO 43694
// result := true ;
43686: LD_ADDR_VAR 0 6
43690: PUSH
43691: LD_INT 1
43693: ST_TO_ADDR
// end ;
43694: LD_VAR 0 6
43698: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43699: LD_INT 0
43701: PPUSH
43702: PPUSH
43703: PPUSH
43704: PPUSH
43705: PPUSH
43706: PPUSH
43707: PPUSH
43708: PPUSH
43709: PPUSH
43710: PPUSH
43711: PPUSH
43712: PPUSH
43713: PPUSH
43714: PPUSH
43715: PPUSH
43716: PPUSH
43717: PPUSH
43718: PPUSH
43719: PPUSH
43720: PPUSH
43721: PPUSH
43722: PPUSH
43723: PPUSH
43724: PPUSH
43725: PPUSH
43726: PPUSH
43727: PPUSH
43728: PPUSH
43729: PPUSH
43730: PPUSH
43731: PPUSH
43732: PPUSH
43733: PPUSH
43734: PPUSH
43735: PPUSH
43736: PPUSH
43737: PPUSH
43738: PPUSH
43739: PPUSH
43740: PPUSH
43741: PPUSH
43742: PPUSH
43743: PPUSH
43744: PPUSH
43745: PPUSH
43746: PPUSH
43747: PPUSH
43748: PPUSH
43749: PPUSH
43750: PPUSH
43751: PPUSH
43752: PPUSH
43753: PPUSH
43754: PPUSH
43755: PPUSH
43756: PPUSH
43757: PPUSH
43758: PPUSH
// result = [ ] ;
43759: LD_ADDR_VAR 0 7
43763: PUSH
43764: EMPTY
43765: ST_TO_ADDR
// temp_list = [ ] ;
43766: LD_ADDR_VAR 0 9
43770: PUSH
43771: EMPTY
43772: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43773: LD_VAR 0 4
43777: PUSH
43778: LD_INT 0
43780: PUSH
43781: LD_INT 1
43783: PUSH
43784: LD_INT 2
43786: PUSH
43787: LD_INT 3
43789: PUSH
43790: LD_INT 4
43792: PUSH
43793: LD_INT 5
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: IN
43804: NOT
43805: PUSH
43806: LD_VAR 0 1
43810: PUSH
43811: LD_INT 0
43813: PUSH
43814: LD_INT 1
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: IN
43821: PUSH
43822: LD_VAR 0 5
43826: PUSH
43827: LD_INT 1
43829: PUSH
43830: LD_INT 2
43832: PUSH
43833: LD_INT 3
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: LIST
43840: IN
43841: NOT
43842: AND
43843: OR
43844: IFFALSE 43848
// exit ;
43846: GO 62239
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43848: LD_VAR 0 1
43852: PUSH
43853: LD_INT 6
43855: PUSH
43856: LD_INT 7
43858: PUSH
43859: LD_INT 8
43861: PUSH
43862: LD_INT 13
43864: PUSH
43865: LD_INT 12
43867: PUSH
43868: LD_INT 15
43870: PUSH
43871: LD_INT 11
43873: PUSH
43874: LD_INT 14
43876: PUSH
43877: LD_INT 10
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: IN
43891: IFFALSE 43901
// btype = b_lab ;
43893: LD_ADDR_VAR 0 1
43897: PUSH
43898: LD_INT 6
43900: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43901: LD_VAR 0 6
43905: PUSH
43906: LD_INT 0
43908: PUSH
43909: LD_INT 1
43911: PUSH
43912: LD_INT 2
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: LIST
43919: IN
43920: NOT
43921: PUSH
43922: LD_VAR 0 1
43926: PUSH
43927: LD_INT 0
43929: PUSH
43930: LD_INT 1
43932: PUSH
43933: LD_INT 2
43935: PUSH
43936: LD_INT 3
43938: PUSH
43939: LD_INT 6
43941: PUSH
43942: LD_INT 36
43944: PUSH
43945: LD_INT 4
43947: PUSH
43948: LD_INT 5
43950: PUSH
43951: LD_INT 31
43953: PUSH
43954: LD_INT 32
43956: PUSH
43957: LD_INT 33
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: IN
43973: NOT
43974: PUSH
43975: LD_VAR 0 6
43979: PUSH
43980: LD_INT 1
43982: EQUAL
43983: AND
43984: OR
43985: PUSH
43986: LD_VAR 0 1
43990: PUSH
43991: LD_INT 2
43993: PUSH
43994: LD_INT 3
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: IN
44001: NOT
44002: PUSH
44003: LD_VAR 0 6
44007: PUSH
44008: LD_INT 2
44010: EQUAL
44011: AND
44012: OR
44013: IFFALSE 44023
// mode = 0 ;
44015: LD_ADDR_VAR 0 6
44019: PUSH
44020: LD_INT 0
44022: ST_TO_ADDR
// case mode of 0 :
44023: LD_VAR 0 6
44027: PUSH
44028: LD_INT 0
44030: DOUBLE
44031: EQUAL
44032: IFTRUE 44036
44034: GO 55489
44036: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44037: LD_ADDR_VAR 0 11
44041: PUSH
44042: LD_INT 0
44044: PUSH
44045: LD_INT 0
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: PUSH
44052: LD_INT 0
44054: PUSH
44055: LD_INT 1
44057: NEG
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 1
44065: PUSH
44066: LD_INT 0
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 1
44075: PUSH
44076: LD_INT 1
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 0
44085: PUSH
44086: LD_INT 1
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: PUSH
44093: LD_INT 1
44095: NEG
44096: PUSH
44097: LD_INT 0
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 1
44106: NEG
44107: PUSH
44108: LD_INT 1
44110: NEG
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 1
44118: NEG
44119: PUSH
44120: LD_INT 2
44122: NEG
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 0
44130: PUSH
44131: LD_INT 2
44133: NEG
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 1
44141: PUSH
44142: LD_INT 1
44144: NEG
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 1
44152: PUSH
44153: LD_INT 2
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 0
44162: PUSH
44163: LD_INT 2
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 1
44172: NEG
44173: PUSH
44174: LD_INT 1
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 1
44183: PUSH
44184: LD_INT 3
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 0
44193: PUSH
44194: LD_INT 3
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 1
44203: NEG
44204: PUSH
44205: LD_INT 2
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44230: LD_ADDR_VAR 0 12
44234: PUSH
44235: LD_INT 0
44237: PUSH
44238: LD_INT 0
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 0
44247: PUSH
44248: LD_INT 1
44250: NEG
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 1
44258: PUSH
44259: LD_INT 0
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 1
44268: PUSH
44269: LD_INT 1
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 0
44278: PUSH
44279: LD_INT 1
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 1
44288: NEG
44289: PUSH
44290: LD_INT 0
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 1
44299: NEG
44300: PUSH
44301: LD_INT 1
44303: NEG
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 1
44311: PUSH
44312: LD_INT 1
44314: NEG
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 2
44322: PUSH
44323: LD_INT 0
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 2
44332: PUSH
44333: LD_INT 1
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 1
44342: NEG
44343: PUSH
44344: LD_INT 1
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 2
44353: NEG
44354: PUSH
44355: LD_INT 0
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 2
44364: NEG
44365: PUSH
44366: LD_INT 1
44368: NEG
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 2
44376: NEG
44377: PUSH
44378: LD_INT 1
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 3
44387: NEG
44388: PUSH
44389: LD_INT 0
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 3
44398: NEG
44399: PUSH
44400: LD_INT 1
44402: NEG
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44426: LD_ADDR_VAR 0 13
44430: PUSH
44431: LD_INT 0
44433: PUSH
44434: LD_INT 0
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 0
44443: PUSH
44444: LD_INT 1
44446: NEG
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 1
44454: PUSH
44455: LD_INT 0
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 1
44464: PUSH
44465: LD_INT 1
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 0
44474: PUSH
44475: LD_INT 1
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 1
44484: NEG
44485: PUSH
44486: LD_INT 0
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 1
44495: NEG
44496: PUSH
44497: LD_INT 1
44499: NEG
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: LD_INT 1
44507: NEG
44508: PUSH
44509: LD_INT 2
44511: NEG
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 2
44519: PUSH
44520: LD_INT 1
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 2
44529: PUSH
44530: LD_INT 2
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 1
44539: PUSH
44540: LD_INT 2
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 2
44549: NEG
44550: PUSH
44551: LD_INT 1
44553: NEG
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 2
44561: NEG
44562: PUSH
44563: LD_INT 2
44565: NEG
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 2
44573: NEG
44574: PUSH
44575: LD_INT 3
44577: NEG
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 3
44585: NEG
44586: PUSH
44587: LD_INT 2
44589: NEG
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 3
44597: NEG
44598: PUSH
44599: LD_INT 3
44601: NEG
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44625: LD_ADDR_VAR 0 14
44629: PUSH
44630: LD_INT 0
44632: PUSH
44633: LD_INT 0
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 0
44642: PUSH
44643: LD_INT 1
44645: NEG
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 1
44653: PUSH
44654: LD_INT 0
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 1
44663: PUSH
44664: LD_INT 1
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 0
44673: PUSH
44674: LD_INT 1
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 1
44683: NEG
44684: PUSH
44685: LD_INT 0
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 1
44694: NEG
44695: PUSH
44696: LD_INT 1
44698: NEG
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 1
44706: NEG
44707: PUSH
44708: LD_INT 2
44710: NEG
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 0
44718: PUSH
44719: LD_INT 2
44721: NEG
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 1
44729: PUSH
44730: LD_INT 1
44732: NEG
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: LD_INT 1
44740: PUSH
44741: LD_INT 2
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 0
44750: PUSH
44751: LD_INT 2
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 1
44760: NEG
44761: PUSH
44762: LD_INT 1
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 1
44771: NEG
44772: PUSH
44773: LD_INT 3
44775: NEG
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 0
44783: PUSH
44784: LD_INT 3
44786: NEG
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 1
44794: PUSH
44795: LD_INT 2
44797: NEG
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44821: LD_ADDR_VAR 0 15
44825: PUSH
44826: LD_INT 0
44828: PUSH
44829: LD_INT 0
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 0
44838: PUSH
44839: LD_INT 1
44841: NEG
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: LD_INT 1
44849: PUSH
44850: LD_INT 0
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 1
44859: PUSH
44860: LD_INT 1
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 0
44869: PUSH
44870: LD_INT 1
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 1
44879: NEG
44880: PUSH
44881: LD_INT 0
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 1
44890: NEG
44891: PUSH
44892: LD_INT 1
44894: NEG
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 1
44902: PUSH
44903: LD_INT 1
44905: NEG
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 2
44913: PUSH
44914: LD_INT 0
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 2
44923: PUSH
44924: LD_INT 1
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 1
44933: NEG
44934: PUSH
44935: LD_INT 1
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 2
44944: NEG
44945: PUSH
44946: LD_INT 0
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 2
44955: NEG
44956: PUSH
44957: LD_INT 1
44959: NEG
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 2
44967: PUSH
44968: LD_INT 1
44970: NEG
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 3
44978: PUSH
44979: LD_INT 0
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 3
44988: PUSH
44989: LD_INT 1
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45014: LD_ADDR_VAR 0 16
45018: PUSH
45019: LD_INT 0
45021: PUSH
45022: LD_INT 0
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 0
45031: PUSH
45032: LD_INT 1
45034: NEG
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 1
45042: PUSH
45043: LD_INT 0
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 1
45052: PUSH
45053: LD_INT 1
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 0
45062: PUSH
45063: LD_INT 1
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 1
45072: NEG
45073: PUSH
45074: LD_INT 0
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 1
45083: NEG
45084: PUSH
45085: LD_INT 1
45087: NEG
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 1
45095: NEG
45096: PUSH
45097: LD_INT 2
45099: NEG
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 2
45107: PUSH
45108: LD_INT 1
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 2
45117: PUSH
45118: LD_INT 2
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 1
45127: PUSH
45128: LD_INT 2
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 2
45137: NEG
45138: PUSH
45139: LD_INT 1
45141: NEG
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 2
45149: NEG
45150: PUSH
45151: LD_INT 2
45153: NEG
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 3
45161: PUSH
45162: LD_INT 2
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 3
45171: PUSH
45172: LD_INT 3
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 2
45181: PUSH
45182: LD_INT 3
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45207: LD_ADDR_VAR 0 17
45211: PUSH
45212: LD_INT 0
45214: PUSH
45215: LD_INT 0
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 0
45224: PUSH
45225: LD_INT 1
45227: NEG
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 1
45235: PUSH
45236: LD_INT 0
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 1
45245: PUSH
45246: LD_INT 1
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 0
45255: PUSH
45256: LD_INT 1
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 1
45265: NEG
45266: PUSH
45267: LD_INT 0
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: LD_INT 1
45276: NEG
45277: PUSH
45278: LD_INT 1
45280: NEG
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 1
45288: NEG
45289: PUSH
45290: LD_INT 2
45292: NEG
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 0
45300: PUSH
45301: LD_INT 2
45303: NEG
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 1
45311: PUSH
45312: LD_INT 1
45314: NEG
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 2
45322: PUSH
45323: LD_INT 0
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 2
45332: PUSH
45333: LD_INT 1
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 2
45342: PUSH
45343: LD_INT 2
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 1
45352: PUSH
45353: LD_INT 2
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 0
45362: PUSH
45363: LD_INT 2
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 1
45372: NEG
45373: PUSH
45374: LD_INT 1
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 2
45383: NEG
45384: PUSH
45385: LD_INT 0
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 2
45394: NEG
45395: PUSH
45396: LD_INT 1
45398: NEG
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 2
45406: NEG
45407: PUSH
45408: LD_INT 2
45410: NEG
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45437: LD_ADDR_VAR 0 18
45441: PUSH
45442: LD_INT 0
45444: PUSH
45445: LD_INT 0
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 0
45454: PUSH
45455: LD_INT 1
45457: NEG
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 1
45465: PUSH
45466: LD_INT 0
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 1
45475: PUSH
45476: LD_INT 1
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 0
45485: PUSH
45486: LD_INT 1
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 1
45495: NEG
45496: PUSH
45497: LD_INT 0
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 1
45506: NEG
45507: PUSH
45508: LD_INT 1
45510: NEG
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 1
45518: NEG
45519: PUSH
45520: LD_INT 2
45522: NEG
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 0
45530: PUSH
45531: LD_INT 2
45533: NEG
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 1
45541: PUSH
45542: LD_INT 1
45544: NEG
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 2
45552: PUSH
45553: LD_INT 0
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 2
45562: PUSH
45563: LD_INT 1
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 2
45572: PUSH
45573: LD_INT 2
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 1
45582: PUSH
45583: LD_INT 2
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 0
45592: PUSH
45593: LD_INT 2
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 1
45602: NEG
45603: PUSH
45604: LD_INT 1
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 2
45613: NEG
45614: PUSH
45615: LD_INT 0
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 2
45624: NEG
45625: PUSH
45626: LD_INT 1
45628: NEG
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 2
45636: NEG
45637: PUSH
45638: LD_INT 2
45640: NEG
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45667: LD_ADDR_VAR 0 19
45671: PUSH
45672: LD_INT 0
45674: PUSH
45675: LD_INT 0
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 0
45684: PUSH
45685: LD_INT 1
45687: NEG
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 1
45695: PUSH
45696: LD_INT 0
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 1
45705: PUSH
45706: LD_INT 1
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 0
45715: PUSH
45716: LD_INT 1
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 1
45725: NEG
45726: PUSH
45727: LD_INT 0
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 1
45736: NEG
45737: PUSH
45738: LD_INT 1
45740: NEG
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 1
45748: NEG
45749: PUSH
45750: LD_INT 2
45752: NEG
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 0
45760: PUSH
45761: LD_INT 2
45763: NEG
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 1
45771: PUSH
45772: LD_INT 1
45774: NEG
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 2
45782: PUSH
45783: LD_INT 0
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 2
45792: PUSH
45793: LD_INT 1
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 2
45802: PUSH
45803: LD_INT 2
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 1
45812: PUSH
45813: LD_INT 2
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 0
45822: PUSH
45823: LD_INT 2
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 1
45832: NEG
45833: PUSH
45834: LD_INT 1
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 2
45843: NEG
45844: PUSH
45845: LD_INT 0
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 2
45854: NEG
45855: PUSH
45856: LD_INT 1
45858: NEG
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 2
45866: NEG
45867: PUSH
45868: LD_INT 2
45870: NEG
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45897: LD_ADDR_VAR 0 20
45901: PUSH
45902: LD_INT 0
45904: PUSH
45905: LD_INT 0
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 0
45914: PUSH
45915: LD_INT 1
45917: NEG
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 1
45925: PUSH
45926: LD_INT 0
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 1
45935: PUSH
45936: LD_INT 1
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 0
45945: PUSH
45946: LD_INT 1
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 1
45955: NEG
45956: PUSH
45957: LD_INT 0
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 1
45966: NEG
45967: PUSH
45968: LD_INT 1
45970: NEG
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 1
45978: NEG
45979: PUSH
45980: LD_INT 2
45982: NEG
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 0
45990: PUSH
45991: LD_INT 2
45993: NEG
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 1
46001: PUSH
46002: LD_INT 1
46004: NEG
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 2
46012: PUSH
46013: LD_INT 0
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 2
46022: PUSH
46023: LD_INT 1
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 2
46032: PUSH
46033: LD_INT 2
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 1
46042: PUSH
46043: LD_INT 2
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 0
46052: PUSH
46053: LD_INT 2
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 1
46062: NEG
46063: PUSH
46064: LD_INT 1
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 2
46073: NEG
46074: PUSH
46075: LD_INT 0
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 2
46084: NEG
46085: PUSH
46086: LD_INT 1
46088: NEG
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 2
46096: NEG
46097: PUSH
46098: LD_INT 2
46100: NEG
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46127: LD_ADDR_VAR 0 21
46131: PUSH
46132: LD_INT 0
46134: PUSH
46135: LD_INT 0
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 0
46144: PUSH
46145: LD_INT 1
46147: NEG
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 1
46155: PUSH
46156: LD_INT 0
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 1
46165: PUSH
46166: LD_INT 1
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 0
46175: PUSH
46176: LD_INT 1
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 1
46185: NEG
46186: PUSH
46187: LD_INT 0
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 1
46196: NEG
46197: PUSH
46198: LD_INT 1
46200: NEG
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 1
46208: NEG
46209: PUSH
46210: LD_INT 2
46212: NEG
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 0
46220: PUSH
46221: LD_INT 2
46223: NEG
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 1
46231: PUSH
46232: LD_INT 1
46234: NEG
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 2
46242: PUSH
46243: LD_INT 0
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 2
46252: PUSH
46253: LD_INT 1
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 2
46262: PUSH
46263: LD_INT 2
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 1
46272: PUSH
46273: LD_INT 2
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 0
46282: PUSH
46283: LD_INT 2
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 1
46292: NEG
46293: PUSH
46294: LD_INT 1
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 2
46303: NEG
46304: PUSH
46305: LD_INT 0
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 2
46314: NEG
46315: PUSH
46316: LD_INT 1
46318: NEG
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 2
46326: NEG
46327: PUSH
46328: LD_INT 2
46330: NEG
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46357: LD_ADDR_VAR 0 22
46361: PUSH
46362: LD_INT 0
46364: PUSH
46365: LD_INT 0
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 0
46374: PUSH
46375: LD_INT 1
46377: NEG
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 1
46385: PUSH
46386: LD_INT 0
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 1
46395: PUSH
46396: LD_INT 1
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 0
46405: PUSH
46406: LD_INT 1
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 1
46415: NEG
46416: PUSH
46417: LD_INT 0
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 1
46426: NEG
46427: PUSH
46428: LD_INT 1
46430: NEG
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 1
46438: NEG
46439: PUSH
46440: LD_INT 2
46442: NEG
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 0
46450: PUSH
46451: LD_INT 2
46453: NEG
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 1
46461: PUSH
46462: LD_INT 1
46464: NEG
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 2
46472: PUSH
46473: LD_INT 0
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 2
46482: PUSH
46483: LD_INT 1
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 2
46492: PUSH
46493: LD_INT 2
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 1
46502: PUSH
46503: LD_INT 2
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 0
46512: PUSH
46513: LD_INT 2
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 1
46522: NEG
46523: PUSH
46524: LD_INT 1
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 2
46533: NEG
46534: PUSH
46535: LD_INT 0
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 2
46544: NEG
46545: PUSH
46546: LD_INT 1
46548: NEG
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 2
46556: NEG
46557: PUSH
46558: LD_INT 2
46560: NEG
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: LIST
46586: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46587: LD_ADDR_VAR 0 23
46591: PUSH
46592: LD_INT 0
46594: PUSH
46595: LD_INT 0
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 0
46604: PUSH
46605: LD_INT 1
46607: NEG
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 1
46615: PUSH
46616: LD_INT 0
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 1
46625: PUSH
46626: LD_INT 1
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 0
46635: PUSH
46636: LD_INT 1
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 1
46645: NEG
46646: PUSH
46647: LD_INT 0
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 1
46656: NEG
46657: PUSH
46658: LD_INT 1
46660: NEG
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 1
46668: NEG
46669: PUSH
46670: LD_INT 2
46672: NEG
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 0
46680: PUSH
46681: LD_INT 2
46683: NEG
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 1
46691: PUSH
46692: LD_INT 1
46694: NEG
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 2
46702: PUSH
46703: LD_INT 0
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 2
46712: PUSH
46713: LD_INT 1
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 2
46722: PUSH
46723: LD_INT 2
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 1
46732: PUSH
46733: LD_INT 2
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 0
46742: PUSH
46743: LD_INT 2
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 1
46752: NEG
46753: PUSH
46754: LD_INT 1
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 2
46763: NEG
46764: PUSH
46765: LD_INT 0
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 2
46774: NEG
46775: PUSH
46776: LD_INT 1
46778: NEG
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 2
46786: NEG
46787: PUSH
46788: LD_INT 2
46790: NEG
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 2
46798: NEG
46799: PUSH
46800: LD_INT 3
46802: NEG
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 1
46810: NEG
46811: PUSH
46812: LD_INT 3
46814: NEG
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 1
46822: PUSH
46823: LD_INT 2
46825: NEG
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 2
46833: PUSH
46834: LD_INT 1
46836: NEG
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46867: LD_ADDR_VAR 0 24
46871: PUSH
46872: LD_INT 0
46874: PUSH
46875: LD_INT 0
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 0
46884: PUSH
46885: LD_INT 1
46887: NEG
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 1
46895: PUSH
46896: LD_INT 0
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 1
46905: PUSH
46906: LD_INT 1
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 0
46915: PUSH
46916: LD_INT 1
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 1
46925: NEG
46926: PUSH
46927: LD_INT 0
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 1
46936: NEG
46937: PUSH
46938: LD_INT 1
46940: NEG
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 1
46948: NEG
46949: PUSH
46950: LD_INT 2
46952: NEG
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 0
46960: PUSH
46961: LD_INT 2
46963: NEG
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 1
46971: PUSH
46972: LD_INT 1
46974: NEG
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: LD_INT 2
46982: PUSH
46983: LD_INT 0
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 2
46992: PUSH
46993: LD_INT 1
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 2
47002: PUSH
47003: LD_INT 2
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 1
47012: PUSH
47013: LD_INT 2
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 0
47022: PUSH
47023: LD_INT 2
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 1
47032: NEG
47033: PUSH
47034: LD_INT 1
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 2
47043: NEG
47044: PUSH
47045: LD_INT 0
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 2
47054: NEG
47055: PUSH
47056: LD_INT 1
47058: NEG
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 2
47066: NEG
47067: PUSH
47068: LD_INT 2
47070: NEG
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 1
47078: PUSH
47079: LD_INT 2
47081: NEG
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 2
47089: PUSH
47090: LD_INT 1
47092: NEG
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 3
47100: PUSH
47101: LD_INT 1
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 3
47110: PUSH
47111: LD_INT 2
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47143: LD_ADDR_VAR 0 25
47147: PUSH
47148: LD_INT 0
47150: PUSH
47151: LD_INT 0
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 0
47160: PUSH
47161: LD_INT 1
47163: NEG
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 1
47171: PUSH
47172: LD_INT 0
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 1
47181: PUSH
47182: LD_INT 1
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 0
47191: PUSH
47192: LD_INT 1
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 1
47201: NEG
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 1
47212: NEG
47213: PUSH
47214: LD_INT 1
47216: NEG
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 1
47224: NEG
47225: PUSH
47226: LD_INT 2
47228: NEG
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 0
47236: PUSH
47237: LD_INT 2
47239: NEG
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 1
47247: PUSH
47248: LD_INT 1
47250: NEG
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 2
47258: PUSH
47259: LD_INT 0
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 2
47268: PUSH
47269: LD_INT 1
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 2
47278: PUSH
47279: LD_INT 2
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 1
47288: PUSH
47289: LD_INT 2
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 0
47298: PUSH
47299: LD_INT 2
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 1
47308: NEG
47309: PUSH
47310: LD_INT 1
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 2
47319: NEG
47320: PUSH
47321: LD_INT 0
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 2
47330: NEG
47331: PUSH
47332: LD_INT 1
47334: NEG
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 2
47342: NEG
47343: PUSH
47344: LD_INT 2
47346: NEG
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 3
47354: PUSH
47355: LD_INT 1
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 3
47364: PUSH
47365: LD_INT 2
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 2
47374: PUSH
47375: LD_INT 3
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 1
47384: PUSH
47385: LD_INT 3
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47417: LD_ADDR_VAR 0 26
47421: PUSH
47422: LD_INT 0
47424: PUSH
47425: LD_INT 0
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 0
47434: PUSH
47435: LD_INT 1
47437: NEG
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 1
47445: PUSH
47446: LD_INT 0
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 1
47455: PUSH
47456: LD_INT 1
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 0
47465: PUSH
47466: LD_INT 1
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 1
47475: NEG
47476: PUSH
47477: LD_INT 0
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 1
47486: NEG
47487: PUSH
47488: LD_INT 1
47490: NEG
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 1
47498: NEG
47499: PUSH
47500: LD_INT 2
47502: NEG
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 0
47510: PUSH
47511: LD_INT 2
47513: NEG
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 1
47521: PUSH
47522: LD_INT 1
47524: NEG
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 2
47532: PUSH
47533: LD_INT 0
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 2
47542: PUSH
47543: LD_INT 1
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 2
47552: PUSH
47553: LD_INT 2
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 1
47562: PUSH
47563: LD_INT 2
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 0
47572: PUSH
47573: LD_INT 2
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 1
47582: NEG
47583: PUSH
47584: LD_INT 1
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 2
47593: NEG
47594: PUSH
47595: LD_INT 0
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 2
47604: NEG
47605: PUSH
47606: LD_INT 1
47608: NEG
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 2
47616: NEG
47617: PUSH
47618: LD_INT 2
47620: NEG
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 2
47628: PUSH
47629: LD_INT 3
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 1
47638: PUSH
47639: LD_INT 3
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 1
47648: NEG
47649: PUSH
47650: LD_INT 2
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 2
47659: NEG
47660: PUSH
47661: LD_INT 1
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47693: LD_ADDR_VAR 0 27
47697: PUSH
47698: LD_INT 0
47700: PUSH
47701: LD_INT 0
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 0
47710: PUSH
47711: LD_INT 1
47713: NEG
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 1
47721: PUSH
47722: LD_INT 0
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 1
47731: PUSH
47732: LD_INT 1
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 0
47741: PUSH
47742: LD_INT 1
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 1
47751: NEG
47752: PUSH
47753: LD_INT 0
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 1
47762: NEG
47763: PUSH
47764: LD_INT 1
47766: NEG
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 1
47774: NEG
47775: PUSH
47776: LD_INT 2
47778: NEG
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 0
47786: PUSH
47787: LD_INT 2
47789: NEG
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 1
47797: PUSH
47798: LD_INT 1
47800: NEG
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 2
47808: PUSH
47809: LD_INT 0
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 2
47818: PUSH
47819: LD_INT 1
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 2
47828: PUSH
47829: LD_INT 2
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 1
47838: PUSH
47839: LD_INT 2
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 0
47848: PUSH
47849: LD_INT 2
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 1
47858: NEG
47859: PUSH
47860: LD_INT 1
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 2
47869: NEG
47870: PUSH
47871: LD_INT 0
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 2
47880: NEG
47881: PUSH
47882: LD_INT 1
47884: NEG
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 2
47892: NEG
47893: PUSH
47894: LD_INT 2
47896: NEG
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 1
47904: NEG
47905: PUSH
47906: LD_INT 2
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 2
47915: NEG
47916: PUSH
47917: LD_INT 1
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 3
47926: NEG
47927: PUSH
47928: LD_INT 1
47930: NEG
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 3
47938: NEG
47939: PUSH
47940: LD_INT 2
47942: NEG
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47973: LD_ADDR_VAR 0 28
47977: PUSH
47978: LD_INT 0
47980: PUSH
47981: LD_INT 0
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 0
47990: PUSH
47991: LD_INT 1
47993: NEG
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 1
48001: PUSH
48002: LD_INT 0
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 1
48011: PUSH
48012: LD_INT 1
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 0
48021: PUSH
48022: LD_INT 1
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 1
48031: NEG
48032: PUSH
48033: LD_INT 0
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 1
48042: NEG
48043: PUSH
48044: LD_INT 1
48046: NEG
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 1
48054: NEG
48055: PUSH
48056: LD_INT 2
48058: NEG
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 0
48066: PUSH
48067: LD_INT 2
48069: NEG
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 1
48077: PUSH
48078: LD_INT 1
48080: NEG
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 2
48088: PUSH
48089: LD_INT 0
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 2
48098: PUSH
48099: LD_INT 1
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 2
48108: PUSH
48109: LD_INT 2
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 1
48118: PUSH
48119: LD_INT 2
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 0
48128: PUSH
48129: LD_INT 2
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 1
48138: NEG
48139: PUSH
48140: LD_INT 1
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 2
48149: NEG
48150: PUSH
48151: LD_INT 0
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 2
48160: NEG
48161: PUSH
48162: LD_INT 1
48164: NEG
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 2
48172: NEG
48173: PUSH
48174: LD_INT 2
48176: NEG
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 2
48184: NEG
48185: PUSH
48186: LD_INT 3
48188: NEG
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 1
48196: NEG
48197: PUSH
48198: LD_INT 3
48200: NEG
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 3
48208: NEG
48209: PUSH
48210: LD_INT 1
48212: NEG
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 3
48220: NEG
48221: PUSH
48222: LD_INT 2
48224: NEG
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48255: LD_ADDR_VAR 0 29
48259: PUSH
48260: LD_INT 0
48262: PUSH
48263: LD_INT 0
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 0
48272: PUSH
48273: LD_INT 1
48275: NEG
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 1
48283: PUSH
48284: LD_INT 0
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 1
48293: PUSH
48294: LD_INT 1
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 0
48303: PUSH
48304: LD_INT 1
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 1
48313: NEG
48314: PUSH
48315: LD_INT 0
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 1
48324: NEG
48325: PUSH
48326: LD_INT 1
48328: NEG
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 1
48336: NEG
48337: PUSH
48338: LD_INT 2
48340: NEG
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 0
48348: PUSH
48349: LD_INT 2
48351: NEG
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 1
48359: PUSH
48360: LD_INT 1
48362: NEG
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 2
48370: PUSH
48371: LD_INT 0
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 2
48380: PUSH
48381: LD_INT 1
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 1
48390: PUSH
48391: LD_INT 2
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 0
48400: PUSH
48401: LD_INT 2
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 1
48410: NEG
48411: PUSH
48412: LD_INT 1
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 2
48421: NEG
48422: PUSH
48423: LD_INT 1
48425: NEG
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 2
48433: NEG
48434: PUSH
48435: LD_INT 2
48437: NEG
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 2
48445: NEG
48446: PUSH
48447: LD_INT 3
48449: NEG
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 2
48457: PUSH
48458: LD_INT 1
48460: NEG
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 3
48468: PUSH
48469: LD_INT 1
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 1
48478: PUSH
48479: LD_INT 3
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 1
48488: NEG
48489: PUSH
48490: LD_INT 2
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 3
48499: NEG
48500: PUSH
48501: LD_INT 2
48503: NEG
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48534: LD_ADDR_VAR 0 30
48538: PUSH
48539: LD_INT 0
48541: PUSH
48542: LD_INT 0
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 0
48551: PUSH
48552: LD_INT 1
48554: NEG
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 1
48562: PUSH
48563: LD_INT 0
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 1
48572: PUSH
48573: LD_INT 1
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 0
48582: PUSH
48583: LD_INT 1
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 1
48592: NEG
48593: PUSH
48594: LD_INT 0
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 1
48603: NEG
48604: PUSH
48605: LD_INT 1
48607: NEG
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 1
48615: NEG
48616: PUSH
48617: LD_INT 2
48619: NEG
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 0
48627: PUSH
48628: LD_INT 2
48630: NEG
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 1
48638: PUSH
48639: LD_INT 1
48641: NEG
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 2
48649: PUSH
48650: LD_INT 0
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 2
48659: PUSH
48660: LD_INT 1
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 2
48669: PUSH
48670: LD_INT 2
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 1
48679: PUSH
48680: LD_INT 2
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 1
48689: NEG
48690: PUSH
48691: LD_INT 1
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 2
48700: NEG
48701: PUSH
48702: LD_INT 0
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 2
48711: NEG
48712: PUSH
48713: LD_INT 1
48715: NEG
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 1
48723: NEG
48724: PUSH
48725: LD_INT 3
48727: NEG
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 1
48735: PUSH
48736: LD_INT 2
48738: NEG
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 3
48746: PUSH
48747: LD_INT 2
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 2
48756: PUSH
48757: LD_INT 3
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 2
48766: NEG
48767: PUSH
48768: LD_INT 1
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 3
48777: NEG
48778: PUSH
48779: LD_INT 1
48781: NEG
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48812: LD_ADDR_VAR 0 31
48816: PUSH
48817: LD_INT 0
48819: PUSH
48820: LD_INT 0
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 0
48829: PUSH
48830: LD_INT 1
48832: NEG
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 1
48840: PUSH
48841: LD_INT 0
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 1
48850: PUSH
48851: LD_INT 1
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: LD_INT 0
48860: PUSH
48861: LD_INT 1
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 1
48870: NEG
48871: PUSH
48872: LD_INT 0
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 1
48881: NEG
48882: PUSH
48883: LD_INT 1
48885: NEG
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 1
48893: NEG
48894: PUSH
48895: LD_INT 2
48897: NEG
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 1
48905: PUSH
48906: LD_INT 1
48908: NEG
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 2
48916: PUSH
48917: LD_INT 0
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 2
48926: PUSH
48927: LD_INT 1
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 2
48936: PUSH
48937: LD_INT 2
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 1
48946: PUSH
48947: LD_INT 2
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 0
48956: PUSH
48957: LD_INT 2
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 1
48966: NEG
48967: PUSH
48968: LD_INT 1
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 2
48977: NEG
48978: PUSH
48979: LD_INT 1
48981: NEG
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 2
48989: NEG
48990: PUSH
48991: LD_INT 2
48993: NEG
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 2
49001: NEG
49002: PUSH
49003: LD_INT 3
49005: NEG
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 2
49013: PUSH
49014: LD_INT 1
49016: NEG
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 3
49024: PUSH
49025: LD_INT 1
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 1
49034: PUSH
49035: LD_INT 3
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 1
49044: NEG
49045: PUSH
49046: LD_INT 2
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 3
49055: NEG
49056: PUSH
49057: LD_INT 2
49059: NEG
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49090: LD_ADDR_VAR 0 32
49094: PUSH
49095: LD_INT 0
49097: PUSH
49098: LD_INT 0
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 0
49107: PUSH
49108: LD_INT 1
49110: NEG
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 1
49118: PUSH
49119: LD_INT 0
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 1
49128: PUSH
49129: LD_INT 1
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 0
49138: PUSH
49139: LD_INT 1
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 1
49148: NEG
49149: PUSH
49150: LD_INT 0
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 1
49159: NEG
49160: PUSH
49161: LD_INT 1
49163: NEG
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 1
49171: NEG
49172: PUSH
49173: LD_INT 2
49175: NEG
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 0
49183: PUSH
49184: LD_INT 2
49186: NEG
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 1
49194: PUSH
49195: LD_INT 1
49197: NEG
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 2
49205: PUSH
49206: LD_INT 1
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 2
49215: PUSH
49216: LD_INT 2
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 1
49225: PUSH
49226: LD_INT 2
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 0
49235: PUSH
49236: LD_INT 2
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 1
49245: NEG
49246: PUSH
49247: LD_INT 1
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 2
49256: NEG
49257: PUSH
49258: LD_INT 0
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 2
49267: NEG
49268: PUSH
49269: LD_INT 1
49271: NEG
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 1
49279: NEG
49280: PUSH
49281: LD_INT 3
49283: NEG
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 1
49291: PUSH
49292: LD_INT 2
49294: NEG
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 3
49302: PUSH
49303: LD_INT 2
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 2
49312: PUSH
49313: LD_INT 3
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 2
49322: NEG
49323: PUSH
49324: LD_INT 1
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 3
49333: NEG
49334: PUSH
49335: LD_INT 1
49337: NEG
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49368: LD_ADDR_VAR 0 33
49372: PUSH
49373: LD_INT 0
49375: PUSH
49376: LD_INT 0
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 0
49385: PUSH
49386: LD_INT 1
49388: NEG
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 1
49396: PUSH
49397: LD_INT 0
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 1
49406: PUSH
49407: LD_INT 1
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 0
49416: PUSH
49417: LD_INT 1
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 1
49426: NEG
49427: PUSH
49428: LD_INT 0
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 1
49437: NEG
49438: PUSH
49439: LD_INT 1
49441: NEG
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 1
49449: NEG
49450: PUSH
49451: LD_INT 2
49453: NEG
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 1
49461: PUSH
49462: LD_INT 1
49464: NEG
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 2
49472: PUSH
49473: LD_INT 0
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 2
49482: PUSH
49483: LD_INT 1
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 1
49492: PUSH
49493: LD_INT 2
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 0
49502: PUSH
49503: LD_INT 2
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 1
49512: NEG
49513: PUSH
49514: LD_INT 1
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 2
49523: NEG
49524: PUSH
49525: LD_INT 0
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 2
49534: NEG
49535: PUSH
49536: LD_INT 1
49538: NEG
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 2
49546: NEG
49547: PUSH
49548: LD_INT 2
49550: NEG
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 2
49558: NEG
49559: PUSH
49560: LD_INT 3
49562: NEG
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 2
49570: PUSH
49571: LD_INT 1
49573: NEG
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 3
49581: PUSH
49582: LD_INT 1
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 1
49591: PUSH
49592: LD_INT 3
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 1
49601: NEG
49602: PUSH
49603: LD_INT 2
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 3
49612: NEG
49613: PUSH
49614: LD_INT 2
49616: NEG
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49647: LD_ADDR_VAR 0 34
49651: PUSH
49652: LD_INT 0
49654: PUSH
49655: LD_INT 0
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 0
49664: PUSH
49665: LD_INT 1
49667: NEG
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 1
49675: PUSH
49676: LD_INT 0
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 1
49685: PUSH
49686: LD_INT 1
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 0
49695: PUSH
49696: LD_INT 1
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 1
49705: NEG
49706: PUSH
49707: LD_INT 0
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 1
49716: NEG
49717: PUSH
49718: LD_INT 1
49720: NEG
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 1
49728: NEG
49729: PUSH
49730: LD_INT 2
49732: NEG
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 0
49740: PUSH
49741: LD_INT 2
49743: NEG
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 1
49751: PUSH
49752: LD_INT 1
49754: NEG
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 2
49762: PUSH
49763: LD_INT 1
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 2
49772: PUSH
49773: LD_INT 2
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 1
49782: PUSH
49783: LD_INT 2
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 1
49792: NEG
49793: PUSH
49794: LD_INT 1
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 2
49803: NEG
49804: PUSH
49805: LD_INT 0
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 2
49814: NEG
49815: PUSH
49816: LD_INT 1
49818: NEG
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 2
49826: NEG
49827: PUSH
49828: LD_INT 2
49830: NEG
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 1
49838: NEG
49839: PUSH
49840: LD_INT 3
49842: NEG
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 1
49850: PUSH
49851: LD_INT 2
49853: NEG
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 3
49861: PUSH
49862: LD_INT 2
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 2
49871: PUSH
49872: LD_INT 3
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 2
49881: NEG
49882: PUSH
49883: LD_INT 1
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 3
49892: NEG
49893: PUSH
49894: LD_INT 1
49896: NEG
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49927: LD_ADDR_VAR 0 35
49931: PUSH
49932: LD_INT 0
49934: PUSH
49935: LD_INT 0
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 0
49944: PUSH
49945: LD_INT 1
49947: NEG
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 1
49955: PUSH
49956: LD_INT 0
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 1
49965: PUSH
49966: LD_INT 1
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 0
49975: PUSH
49976: LD_INT 1
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 1
49985: NEG
49986: PUSH
49987: LD_INT 0
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 1
49996: NEG
49997: PUSH
49998: LD_INT 1
50000: NEG
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 2
50008: PUSH
50009: LD_INT 1
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 2
50018: NEG
50019: PUSH
50020: LD_INT 1
50022: NEG
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50039: LD_ADDR_VAR 0 36
50043: PUSH
50044: LD_INT 0
50046: PUSH
50047: LD_INT 0
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 0
50056: PUSH
50057: LD_INT 1
50059: NEG
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 1
50067: PUSH
50068: LD_INT 0
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 1
50077: PUSH
50078: LD_INT 1
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 0
50087: PUSH
50088: LD_INT 1
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 1
50097: NEG
50098: PUSH
50099: LD_INT 0
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 1
50108: NEG
50109: PUSH
50110: LD_INT 1
50112: NEG
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 1
50120: NEG
50121: PUSH
50122: LD_INT 2
50124: NEG
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 1
50132: PUSH
50133: LD_INT 2
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50151: LD_ADDR_VAR 0 37
50155: PUSH
50156: LD_INT 0
50158: PUSH
50159: LD_INT 0
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 0
50168: PUSH
50169: LD_INT 1
50171: NEG
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 1
50179: PUSH
50180: LD_INT 0
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 1
50189: PUSH
50190: LD_INT 1
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 0
50199: PUSH
50200: LD_INT 1
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 1
50209: NEG
50210: PUSH
50211: LD_INT 0
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 1
50220: NEG
50221: PUSH
50222: LD_INT 1
50224: NEG
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 1
50232: PUSH
50233: LD_INT 1
50235: NEG
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 1
50243: NEG
50244: PUSH
50245: LD_INT 1
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50263: LD_ADDR_VAR 0 38
50267: PUSH
50268: LD_INT 0
50270: PUSH
50271: LD_INT 0
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 0
50280: PUSH
50281: LD_INT 1
50283: NEG
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 1
50291: PUSH
50292: LD_INT 0
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 1
50301: PUSH
50302: LD_INT 1
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 0
50311: PUSH
50312: LD_INT 1
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 1
50321: NEG
50322: PUSH
50323: LD_INT 0
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 1
50332: NEG
50333: PUSH
50334: LD_INT 1
50336: NEG
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 2
50344: PUSH
50345: LD_INT 1
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 2
50354: NEG
50355: PUSH
50356: LD_INT 1
50358: NEG
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50375: LD_ADDR_VAR 0 39
50379: PUSH
50380: LD_INT 0
50382: PUSH
50383: LD_INT 0
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 0
50392: PUSH
50393: LD_INT 1
50395: NEG
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 1
50403: PUSH
50404: LD_INT 0
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 1
50413: PUSH
50414: LD_INT 1
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 0
50423: PUSH
50424: LD_INT 1
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 1
50433: NEG
50434: PUSH
50435: LD_INT 0
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 1
50444: NEG
50445: PUSH
50446: LD_INT 1
50448: NEG
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 1
50456: NEG
50457: PUSH
50458: LD_INT 2
50460: NEG
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 1
50468: PUSH
50469: LD_INT 2
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50487: LD_ADDR_VAR 0 40
50491: PUSH
50492: LD_INT 0
50494: PUSH
50495: LD_INT 0
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 0
50504: PUSH
50505: LD_INT 1
50507: NEG
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 1
50515: PUSH
50516: LD_INT 0
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 1
50525: PUSH
50526: LD_INT 1
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 0
50535: PUSH
50536: LD_INT 1
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 1
50545: NEG
50546: PUSH
50547: LD_INT 0
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 1
50556: NEG
50557: PUSH
50558: LD_INT 1
50560: NEG
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 1
50568: PUSH
50569: LD_INT 1
50571: NEG
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 1
50579: NEG
50580: PUSH
50581: LD_INT 1
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50599: LD_ADDR_VAR 0 41
50603: PUSH
50604: LD_INT 0
50606: PUSH
50607: LD_INT 0
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 0
50616: PUSH
50617: LD_INT 1
50619: NEG
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 1
50627: PUSH
50628: LD_INT 0
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 1
50637: PUSH
50638: LD_INT 1
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 0
50647: PUSH
50648: LD_INT 1
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 1
50657: NEG
50658: PUSH
50659: LD_INT 0
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 1
50668: NEG
50669: PUSH
50670: LD_INT 1
50672: NEG
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 1
50680: NEG
50681: PUSH
50682: LD_INT 2
50684: NEG
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 1
50692: PUSH
50693: LD_INT 1
50695: NEG
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 2
50703: PUSH
50704: LD_INT 0
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 2
50713: PUSH
50714: LD_INT 1
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 2
50723: PUSH
50724: LD_INT 2
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 1
50733: PUSH
50734: LD_INT 2
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 1
50743: NEG
50744: PUSH
50745: LD_INT 1
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 2
50754: NEG
50755: PUSH
50756: LD_INT 0
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 2
50765: NEG
50766: PUSH
50767: LD_INT 1
50769: NEG
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 2
50777: NEG
50778: PUSH
50779: LD_INT 2
50781: NEG
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 2
50789: NEG
50790: PUSH
50791: LD_INT 3
50793: NEG
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 2
50801: PUSH
50802: LD_INT 1
50804: NEG
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 3
50812: PUSH
50813: LD_INT 0
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 3
50822: PUSH
50823: LD_INT 1
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 3
50832: PUSH
50833: LD_INT 2
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 3
50842: PUSH
50843: LD_INT 3
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 2
50852: PUSH
50853: LD_INT 3
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 2
50862: NEG
50863: PUSH
50864: LD_INT 1
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 3
50873: NEG
50874: PUSH
50875: LD_INT 0
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 3
50884: NEG
50885: PUSH
50886: LD_INT 1
50888: NEG
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 3
50896: NEG
50897: PUSH
50898: LD_INT 2
50900: NEG
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 3
50908: NEG
50909: PUSH
50910: LD_INT 3
50912: NEG
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50949: LD_ADDR_VAR 0 42
50953: PUSH
50954: LD_INT 0
50956: PUSH
50957: LD_INT 0
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 0
50966: PUSH
50967: LD_INT 1
50969: NEG
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 1
50977: PUSH
50978: LD_INT 0
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 1
50987: PUSH
50988: LD_INT 1
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 0
50997: PUSH
50998: LD_INT 1
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 1
51007: NEG
51008: PUSH
51009: LD_INT 0
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 1
51018: NEG
51019: PUSH
51020: LD_INT 1
51022: NEG
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 1
51030: NEG
51031: PUSH
51032: LD_INT 2
51034: NEG
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 0
51042: PUSH
51043: LD_INT 2
51045: NEG
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 1
51053: PUSH
51054: LD_INT 1
51056: NEG
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 2
51064: PUSH
51065: LD_INT 1
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 2
51074: PUSH
51075: LD_INT 2
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 1
51084: PUSH
51085: LD_INT 2
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 0
51094: PUSH
51095: LD_INT 2
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 1
51104: NEG
51105: PUSH
51106: LD_INT 1
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 2
51115: NEG
51116: PUSH
51117: LD_INT 1
51119: NEG
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 2
51127: NEG
51128: PUSH
51129: LD_INT 2
51131: NEG
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 2
51139: NEG
51140: PUSH
51141: LD_INT 3
51143: NEG
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 1
51151: NEG
51152: PUSH
51153: LD_INT 3
51155: NEG
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 0
51163: PUSH
51164: LD_INT 3
51166: NEG
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 1
51174: PUSH
51175: LD_INT 2
51177: NEG
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 3
51185: PUSH
51186: LD_INT 2
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 3
51195: PUSH
51196: LD_INT 3
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 2
51205: PUSH
51206: LD_INT 3
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 1
51215: PUSH
51216: LD_INT 3
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 0
51225: PUSH
51226: LD_INT 3
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 1
51235: NEG
51236: PUSH
51237: LD_INT 2
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 3
51246: NEG
51247: PUSH
51248: LD_INT 2
51250: NEG
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 3
51258: NEG
51259: PUSH
51260: LD_INT 3
51262: NEG
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51299: LD_ADDR_VAR 0 43
51303: PUSH
51304: LD_INT 0
51306: PUSH
51307: LD_INT 0
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 0
51316: PUSH
51317: LD_INT 1
51319: NEG
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 1
51327: PUSH
51328: LD_INT 0
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 1
51337: PUSH
51338: LD_INT 1
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: LD_INT 1
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 1
51357: NEG
51358: PUSH
51359: LD_INT 0
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 1
51368: NEG
51369: PUSH
51370: LD_INT 1
51372: NEG
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 1
51380: NEG
51381: PUSH
51382: LD_INT 2
51384: NEG
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 0
51392: PUSH
51393: LD_INT 2
51395: NEG
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 1
51403: PUSH
51404: LD_INT 1
51406: NEG
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 2
51414: PUSH
51415: LD_INT 0
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 2
51424: PUSH
51425: LD_INT 1
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 1
51434: PUSH
51435: LD_INT 2
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 0
51444: PUSH
51445: LD_INT 2
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 1
51454: NEG
51455: PUSH
51456: LD_INT 1
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 2
51465: NEG
51466: PUSH
51467: LD_INT 0
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 2
51476: NEG
51477: PUSH
51478: LD_INT 1
51480: NEG
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 1
51488: NEG
51489: PUSH
51490: LD_INT 3
51492: NEG
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 0
51500: PUSH
51501: LD_INT 3
51503: NEG
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 1
51511: PUSH
51512: LD_INT 2
51514: NEG
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 2
51522: PUSH
51523: LD_INT 1
51525: NEG
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 3
51533: PUSH
51534: LD_INT 0
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 3
51543: PUSH
51544: LD_INT 1
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 1
51553: PUSH
51554: LD_INT 3
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 0
51563: PUSH
51564: LD_INT 3
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 1
51573: NEG
51574: PUSH
51575: LD_INT 2
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 2
51584: NEG
51585: PUSH
51586: LD_INT 1
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 3
51595: NEG
51596: PUSH
51597: LD_INT 0
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 3
51606: NEG
51607: PUSH
51608: LD_INT 1
51610: NEG
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51647: LD_ADDR_VAR 0 44
51651: PUSH
51652: LD_INT 0
51654: PUSH
51655: LD_INT 0
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 0
51664: PUSH
51665: LD_INT 1
51667: NEG
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 1
51675: PUSH
51676: LD_INT 0
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 1
51685: PUSH
51686: LD_INT 1
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 0
51695: PUSH
51696: LD_INT 1
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 1
51705: NEG
51706: PUSH
51707: LD_INT 0
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 1
51716: NEG
51717: PUSH
51718: LD_INT 1
51720: NEG
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 1
51728: NEG
51729: PUSH
51730: LD_INT 2
51732: NEG
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 1
51740: PUSH
51741: LD_INT 1
51743: NEG
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 2
51751: PUSH
51752: LD_INT 0
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 2
51761: PUSH
51762: LD_INT 1
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 2
51771: PUSH
51772: LD_INT 2
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 1
51781: PUSH
51782: LD_INT 2
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 1
51791: NEG
51792: PUSH
51793: LD_INT 1
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 2
51802: NEG
51803: PUSH
51804: LD_INT 0
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 2
51813: NEG
51814: PUSH
51815: LD_INT 1
51817: NEG
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 2
51825: NEG
51826: PUSH
51827: LD_INT 2
51829: NEG
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 2
51837: NEG
51838: PUSH
51839: LD_INT 3
51841: NEG
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 2
51849: PUSH
51850: LD_INT 1
51852: NEG
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 3
51860: PUSH
51861: LD_INT 0
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 3
51870: PUSH
51871: LD_INT 1
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 3
51880: PUSH
51881: LD_INT 2
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 3
51890: PUSH
51891: LD_INT 3
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 2
51900: PUSH
51901: LD_INT 3
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 2
51910: NEG
51911: PUSH
51912: LD_INT 1
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 3
51921: NEG
51922: PUSH
51923: LD_INT 0
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 3
51932: NEG
51933: PUSH
51934: LD_INT 1
51936: NEG
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 3
51944: NEG
51945: PUSH
51946: LD_INT 2
51948: NEG
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 3
51956: NEG
51957: PUSH
51958: LD_INT 3
51960: NEG
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51997: LD_ADDR_VAR 0 45
52001: PUSH
52002: LD_INT 0
52004: PUSH
52005: LD_INT 0
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 0
52014: PUSH
52015: LD_INT 1
52017: NEG
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 1
52025: PUSH
52026: LD_INT 0
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 1
52035: PUSH
52036: LD_INT 1
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 0
52045: PUSH
52046: LD_INT 1
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 1
52055: NEG
52056: PUSH
52057: LD_INT 0
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 1
52066: NEG
52067: PUSH
52068: LD_INT 1
52070: NEG
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 1
52078: NEG
52079: PUSH
52080: LD_INT 2
52082: NEG
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 0
52090: PUSH
52091: LD_INT 2
52093: NEG
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 1
52101: PUSH
52102: LD_INT 1
52104: NEG
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 2
52112: PUSH
52113: LD_INT 1
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 2
52122: PUSH
52123: LD_INT 2
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 1
52132: PUSH
52133: LD_INT 2
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 0
52142: PUSH
52143: LD_INT 2
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 1
52152: NEG
52153: PUSH
52154: LD_INT 1
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 2
52163: NEG
52164: PUSH
52165: LD_INT 1
52167: NEG
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 2
52175: NEG
52176: PUSH
52177: LD_INT 2
52179: NEG
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 2
52187: NEG
52188: PUSH
52189: LD_INT 3
52191: NEG
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 1
52199: NEG
52200: PUSH
52201: LD_INT 3
52203: NEG
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 0
52211: PUSH
52212: LD_INT 3
52214: NEG
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 1
52222: PUSH
52223: LD_INT 2
52225: NEG
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 3
52233: PUSH
52234: LD_INT 2
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 3
52243: PUSH
52244: LD_INT 3
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 2
52253: PUSH
52254: LD_INT 3
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 1
52263: PUSH
52264: LD_INT 3
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 0
52273: PUSH
52274: LD_INT 3
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 1
52283: NEG
52284: PUSH
52285: LD_INT 2
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 3
52294: NEG
52295: PUSH
52296: LD_INT 2
52298: NEG
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 3
52306: NEG
52307: PUSH
52308: LD_INT 3
52310: NEG
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52347: LD_ADDR_VAR 0 46
52351: PUSH
52352: LD_INT 0
52354: PUSH
52355: LD_INT 0
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 0
52364: PUSH
52365: LD_INT 1
52367: NEG
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 1
52375: PUSH
52376: LD_INT 0
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 1
52385: PUSH
52386: LD_INT 1
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 0
52395: PUSH
52396: LD_INT 1
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 1
52405: NEG
52406: PUSH
52407: LD_INT 0
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 1
52416: NEG
52417: PUSH
52418: LD_INT 1
52420: NEG
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 1
52428: NEG
52429: PUSH
52430: LD_INT 2
52432: NEG
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 0
52440: PUSH
52441: LD_INT 2
52443: NEG
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 1
52451: PUSH
52452: LD_INT 1
52454: NEG
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 2
52462: PUSH
52463: LD_INT 0
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 2
52472: PUSH
52473: LD_INT 1
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 1
52482: PUSH
52483: LD_INT 2
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 0
52492: PUSH
52493: LD_INT 2
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 1
52502: NEG
52503: PUSH
52504: LD_INT 1
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 2
52513: NEG
52514: PUSH
52515: LD_INT 0
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 2
52524: NEG
52525: PUSH
52526: LD_INT 1
52528: NEG
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 1
52536: NEG
52537: PUSH
52538: LD_INT 3
52540: NEG
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 0
52548: PUSH
52549: LD_INT 3
52551: NEG
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 1
52559: PUSH
52560: LD_INT 2
52562: NEG
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 2
52570: PUSH
52571: LD_INT 1
52573: NEG
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 3
52581: PUSH
52582: LD_INT 0
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 3
52591: PUSH
52592: LD_INT 1
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 1
52601: PUSH
52602: LD_INT 3
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 0
52611: PUSH
52612: LD_INT 3
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 1
52621: NEG
52622: PUSH
52623: LD_INT 2
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 2
52632: NEG
52633: PUSH
52634: LD_INT 1
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 3
52643: NEG
52644: PUSH
52645: LD_INT 0
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 3
52654: NEG
52655: PUSH
52656: LD_INT 1
52658: NEG
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52695: LD_ADDR_VAR 0 47
52699: PUSH
52700: LD_INT 0
52702: PUSH
52703: LD_INT 0
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 0
52712: PUSH
52713: LD_INT 1
52715: NEG
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 1
52723: PUSH
52724: LD_INT 0
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 1
52733: PUSH
52734: LD_INT 1
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 0
52743: PUSH
52744: LD_INT 1
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 1
52753: NEG
52754: PUSH
52755: LD_INT 0
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 1
52764: NEG
52765: PUSH
52766: LD_INT 1
52768: NEG
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 1
52776: NEG
52777: PUSH
52778: LD_INT 2
52780: NEG
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 0
52788: PUSH
52789: LD_INT 2
52791: NEG
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 1
52799: PUSH
52800: LD_INT 1
52802: NEG
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 2
52810: NEG
52811: PUSH
52812: LD_INT 1
52814: NEG
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 2
52822: NEG
52823: PUSH
52824: LD_INT 2
52826: NEG
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52846: LD_ADDR_VAR 0 48
52850: PUSH
52851: LD_INT 0
52853: PUSH
52854: LD_INT 0
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 0
52863: PUSH
52864: LD_INT 1
52866: NEG
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 1
52874: PUSH
52875: LD_INT 0
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 1
52884: PUSH
52885: LD_INT 1
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 0
52894: PUSH
52895: LD_INT 1
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 1
52904: NEG
52905: PUSH
52906: LD_INT 0
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 1
52915: NEG
52916: PUSH
52917: LD_INT 1
52919: NEG
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 1
52927: NEG
52928: PUSH
52929: LD_INT 2
52931: NEG
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 0
52939: PUSH
52940: LD_INT 2
52942: NEG
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 1
52950: PUSH
52951: LD_INT 1
52953: NEG
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 2
52961: PUSH
52962: LD_INT 0
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 2
52971: PUSH
52972: LD_INT 1
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52993: LD_ADDR_VAR 0 49
52997: PUSH
52998: LD_INT 0
53000: PUSH
53001: LD_INT 0
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 0
53010: PUSH
53011: LD_INT 1
53013: NEG
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 1
53021: PUSH
53022: LD_INT 0
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 1
53031: PUSH
53032: LD_INT 1
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 0
53041: PUSH
53042: LD_INT 1
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 1
53051: NEG
53052: PUSH
53053: LD_INT 0
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 1
53062: NEG
53063: PUSH
53064: LD_INT 1
53066: NEG
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 1
53074: PUSH
53075: LD_INT 1
53077: NEG
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 2
53085: PUSH
53086: LD_INT 0
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 2
53095: PUSH
53096: LD_INT 1
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 2
53105: PUSH
53106: LD_INT 2
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 1
53115: PUSH
53116: LD_INT 2
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53137: LD_ADDR_VAR 0 50
53141: PUSH
53142: LD_INT 0
53144: PUSH
53145: LD_INT 0
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 0
53154: PUSH
53155: LD_INT 1
53157: NEG
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 1
53165: PUSH
53166: LD_INT 0
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 1
53175: PUSH
53176: LD_INT 1
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 0
53185: PUSH
53186: LD_INT 1
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 1
53195: NEG
53196: PUSH
53197: LD_INT 0
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 1
53206: NEG
53207: PUSH
53208: LD_INT 1
53210: NEG
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 2
53218: PUSH
53219: LD_INT 1
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 2
53228: PUSH
53229: LD_INT 2
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 1
53238: PUSH
53239: LD_INT 2
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 0
53248: PUSH
53249: LD_INT 2
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 1
53258: NEG
53259: PUSH
53260: LD_INT 1
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53281: LD_ADDR_VAR 0 51
53285: PUSH
53286: LD_INT 0
53288: PUSH
53289: LD_INT 0
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 0
53298: PUSH
53299: LD_INT 1
53301: NEG
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 1
53309: PUSH
53310: LD_INT 0
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 1
53319: PUSH
53320: LD_INT 1
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 0
53329: PUSH
53330: LD_INT 1
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 1
53339: NEG
53340: PUSH
53341: LD_INT 0
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 1
53350: NEG
53351: PUSH
53352: LD_INT 1
53354: NEG
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 1
53362: PUSH
53363: LD_INT 2
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 0
53372: PUSH
53373: LD_INT 2
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 1
53382: NEG
53383: PUSH
53384: LD_INT 1
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 2
53393: NEG
53394: PUSH
53395: LD_INT 0
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 2
53404: NEG
53405: PUSH
53406: LD_INT 1
53408: NEG
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53428: LD_ADDR_VAR 0 52
53432: PUSH
53433: LD_INT 0
53435: PUSH
53436: LD_INT 0
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 0
53445: PUSH
53446: LD_INT 1
53448: NEG
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 1
53456: PUSH
53457: LD_INT 0
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 1
53466: PUSH
53467: LD_INT 1
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 0
53476: PUSH
53477: LD_INT 1
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 1
53486: NEG
53487: PUSH
53488: LD_INT 0
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 1
53497: NEG
53498: PUSH
53499: LD_INT 1
53501: NEG
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 1
53509: NEG
53510: PUSH
53511: LD_INT 2
53513: NEG
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 1
53521: NEG
53522: PUSH
53523: LD_INT 1
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 2
53532: NEG
53533: PUSH
53534: LD_INT 0
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 2
53543: NEG
53544: PUSH
53545: LD_INT 1
53547: NEG
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 2
53555: NEG
53556: PUSH
53557: LD_INT 2
53559: NEG
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53579: LD_ADDR_VAR 0 53
53583: PUSH
53584: LD_INT 0
53586: PUSH
53587: LD_INT 0
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 0
53596: PUSH
53597: LD_INT 1
53599: NEG
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 1
53607: PUSH
53608: LD_INT 0
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 1
53617: PUSH
53618: LD_INT 1
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 0
53627: PUSH
53628: LD_INT 1
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 1
53637: NEG
53638: PUSH
53639: LD_INT 0
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 1
53648: NEG
53649: PUSH
53650: LD_INT 1
53652: NEG
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 1
53660: NEG
53661: PUSH
53662: LD_INT 2
53664: NEG
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 0
53672: PUSH
53673: LD_INT 2
53675: NEG
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 1
53683: PUSH
53684: LD_INT 1
53686: NEG
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 2
53694: PUSH
53695: LD_INT 0
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 2
53704: PUSH
53705: LD_INT 1
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 2
53714: PUSH
53715: LD_INT 2
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 1
53724: PUSH
53725: LD_INT 2
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 0
53734: PUSH
53735: LD_INT 2
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 1
53744: NEG
53745: PUSH
53746: LD_INT 1
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 2
53755: NEG
53756: PUSH
53757: LD_INT 0
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 2
53766: NEG
53767: PUSH
53768: LD_INT 1
53770: NEG
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 2
53778: NEG
53779: PUSH
53780: LD_INT 2
53782: NEG
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53809: LD_ADDR_VAR 0 54
53813: PUSH
53814: LD_INT 0
53816: PUSH
53817: LD_INT 0
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 0
53826: PUSH
53827: LD_INT 1
53829: NEG
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 1
53837: PUSH
53838: LD_INT 0
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 1
53847: PUSH
53848: LD_INT 1
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 0
53857: PUSH
53858: LD_INT 1
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 1
53867: NEG
53868: PUSH
53869: LD_INT 0
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 1
53878: NEG
53879: PUSH
53880: LD_INT 1
53882: NEG
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 1
53890: NEG
53891: PUSH
53892: LD_INT 2
53894: NEG
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 0
53902: PUSH
53903: LD_INT 2
53905: NEG
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 1
53913: PUSH
53914: LD_INT 1
53916: NEG
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 2
53924: PUSH
53925: LD_INT 0
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 2
53934: PUSH
53935: LD_INT 1
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 2
53944: PUSH
53945: LD_INT 2
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 1
53954: PUSH
53955: LD_INT 2
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 0
53964: PUSH
53965: LD_INT 2
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 1
53974: NEG
53975: PUSH
53976: LD_INT 1
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 2
53985: NEG
53986: PUSH
53987: LD_INT 0
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 2
53996: NEG
53997: PUSH
53998: LD_INT 1
54000: NEG
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 2
54008: NEG
54009: PUSH
54010: LD_INT 2
54012: NEG
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54039: LD_ADDR_VAR 0 55
54043: PUSH
54044: LD_INT 0
54046: PUSH
54047: LD_INT 0
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 0
54056: PUSH
54057: LD_INT 1
54059: NEG
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 1
54067: PUSH
54068: LD_INT 0
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 1
54077: PUSH
54078: LD_INT 1
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 0
54087: PUSH
54088: LD_INT 1
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 1
54097: NEG
54098: PUSH
54099: LD_INT 0
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 1
54108: NEG
54109: PUSH
54110: LD_INT 1
54112: NEG
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 1
54120: NEG
54121: PUSH
54122: LD_INT 2
54124: NEG
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 0
54132: PUSH
54133: LD_INT 2
54135: NEG
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 1
54143: PUSH
54144: LD_INT 1
54146: NEG
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 2
54154: PUSH
54155: LD_INT 0
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 2
54164: PUSH
54165: LD_INT 1
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 2
54174: PUSH
54175: LD_INT 2
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 1
54184: PUSH
54185: LD_INT 2
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 0
54194: PUSH
54195: LD_INT 2
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 1
54204: NEG
54205: PUSH
54206: LD_INT 1
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 2
54215: NEG
54216: PUSH
54217: LD_INT 0
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 2
54226: NEG
54227: PUSH
54228: LD_INT 1
54230: NEG
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 2
54238: NEG
54239: PUSH
54240: LD_INT 2
54242: NEG
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54269: LD_ADDR_VAR 0 56
54273: PUSH
54274: LD_INT 0
54276: PUSH
54277: LD_INT 0
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 0
54286: PUSH
54287: LD_INT 1
54289: NEG
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 1
54297: PUSH
54298: LD_INT 0
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 1
54307: PUSH
54308: LD_INT 1
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 0
54317: PUSH
54318: LD_INT 1
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 1
54327: NEG
54328: PUSH
54329: LD_INT 0
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 1
54338: NEG
54339: PUSH
54340: LD_INT 1
54342: NEG
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 1
54350: NEG
54351: PUSH
54352: LD_INT 2
54354: NEG
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 0
54362: PUSH
54363: LD_INT 2
54365: NEG
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 1
54373: PUSH
54374: LD_INT 1
54376: NEG
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 2
54384: PUSH
54385: LD_INT 0
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 2
54394: PUSH
54395: LD_INT 1
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 2
54404: PUSH
54405: LD_INT 2
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 1
54414: PUSH
54415: LD_INT 2
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 0
54424: PUSH
54425: LD_INT 2
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 1
54434: NEG
54435: PUSH
54436: LD_INT 1
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 2
54445: NEG
54446: PUSH
54447: LD_INT 0
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 2
54456: NEG
54457: PUSH
54458: LD_INT 1
54460: NEG
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 2
54468: NEG
54469: PUSH
54470: LD_INT 2
54472: NEG
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54499: LD_ADDR_VAR 0 57
54503: PUSH
54504: LD_INT 0
54506: PUSH
54507: LD_INT 0
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 0
54516: PUSH
54517: LD_INT 1
54519: NEG
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 1
54527: PUSH
54528: LD_INT 0
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 1
54537: PUSH
54538: LD_INT 1
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 0
54547: PUSH
54548: LD_INT 1
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 1
54557: NEG
54558: PUSH
54559: LD_INT 0
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 1
54568: NEG
54569: PUSH
54570: LD_INT 1
54572: NEG
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 1
54580: NEG
54581: PUSH
54582: LD_INT 2
54584: NEG
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 0
54592: PUSH
54593: LD_INT 2
54595: NEG
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 1
54603: PUSH
54604: LD_INT 1
54606: NEG
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 2
54614: PUSH
54615: LD_INT 0
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 2
54624: PUSH
54625: LD_INT 1
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 2
54634: PUSH
54635: LD_INT 2
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 1
54644: PUSH
54645: LD_INT 2
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 0
54654: PUSH
54655: LD_INT 2
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 1
54664: NEG
54665: PUSH
54666: LD_INT 1
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 2
54675: NEG
54676: PUSH
54677: LD_INT 0
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 2
54686: NEG
54687: PUSH
54688: LD_INT 1
54690: NEG
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 2
54698: NEG
54699: PUSH
54700: LD_INT 2
54702: NEG
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54729: LD_ADDR_VAR 0 58
54733: PUSH
54734: LD_INT 0
54736: PUSH
54737: LD_INT 0
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 0
54746: PUSH
54747: LD_INT 1
54749: NEG
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 1
54757: PUSH
54758: LD_INT 0
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 1
54767: PUSH
54768: LD_INT 1
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 0
54777: PUSH
54778: LD_INT 1
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 1
54787: NEG
54788: PUSH
54789: LD_INT 0
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 1
54798: NEG
54799: PUSH
54800: LD_INT 1
54802: NEG
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 1
54810: NEG
54811: PUSH
54812: LD_INT 2
54814: NEG
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 0
54822: PUSH
54823: LD_INT 2
54825: NEG
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 1
54833: PUSH
54834: LD_INT 1
54836: NEG
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 2
54844: PUSH
54845: LD_INT 0
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 2
54854: PUSH
54855: LD_INT 1
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 2
54864: PUSH
54865: LD_INT 2
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 1
54874: PUSH
54875: LD_INT 2
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 0
54884: PUSH
54885: LD_INT 2
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 1
54894: NEG
54895: PUSH
54896: LD_INT 1
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 2
54905: NEG
54906: PUSH
54907: LD_INT 0
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 2
54916: NEG
54917: PUSH
54918: LD_INT 1
54920: NEG
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 2
54928: NEG
54929: PUSH
54930: LD_INT 2
54932: NEG
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54959: LD_ADDR_VAR 0 59
54963: PUSH
54964: LD_INT 0
54966: PUSH
54967: LD_INT 0
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 0
54976: PUSH
54977: LD_INT 1
54979: NEG
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 1
54987: PUSH
54988: LD_INT 0
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 1
54997: PUSH
54998: LD_INT 1
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 0
55007: PUSH
55008: LD_INT 1
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 1
55017: NEG
55018: PUSH
55019: LD_INT 0
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 1
55028: NEG
55029: PUSH
55030: LD_INT 1
55032: NEG
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55047: LD_ADDR_VAR 0 60
55051: PUSH
55052: LD_INT 0
55054: PUSH
55055: LD_INT 0
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 0
55064: PUSH
55065: LD_INT 1
55067: NEG
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 1
55075: PUSH
55076: LD_INT 0
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 1
55085: PUSH
55086: LD_INT 1
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 0
55095: PUSH
55096: LD_INT 1
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 1
55105: NEG
55106: PUSH
55107: LD_INT 0
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 1
55116: NEG
55117: PUSH
55118: LD_INT 1
55120: NEG
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55135: LD_ADDR_VAR 0 61
55139: PUSH
55140: LD_INT 0
55142: PUSH
55143: LD_INT 0
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 0
55152: PUSH
55153: LD_INT 1
55155: NEG
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 1
55163: PUSH
55164: LD_INT 0
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 1
55173: PUSH
55174: LD_INT 1
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 0
55183: PUSH
55184: LD_INT 1
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 1
55193: NEG
55194: PUSH
55195: LD_INT 0
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 1
55204: NEG
55205: PUSH
55206: LD_INT 1
55208: NEG
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55223: LD_ADDR_VAR 0 62
55227: PUSH
55228: LD_INT 0
55230: PUSH
55231: LD_INT 0
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 0
55240: PUSH
55241: LD_INT 1
55243: NEG
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 1
55251: PUSH
55252: LD_INT 0
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 1
55261: PUSH
55262: LD_INT 1
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 0
55271: PUSH
55272: LD_INT 1
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 1
55281: NEG
55282: PUSH
55283: LD_INT 0
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 1
55292: NEG
55293: PUSH
55294: LD_INT 1
55296: NEG
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55311: LD_ADDR_VAR 0 63
55315: PUSH
55316: LD_INT 0
55318: PUSH
55319: LD_INT 0
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 0
55328: PUSH
55329: LD_INT 1
55331: NEG
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 1
55339: PUSH
55340: LD_INT 0
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 1
55349: PUSH
55350: LD_INT 1
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 0
55359: PUSH
55360: LD_INT 1
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 1
55369: NEG
55370: PUSH
55371: LD_INT 0
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 1
55380: NEG
55381: PUSH
55382: LD_INT 1
55384: NEG
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55399: LD_ADDR_VAR 0 64
55403: PUSH
55404: LD_INT 0
55406: PUSH
55407: LD_INT 0
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 0
55416: PUSH
55417: LD_INT 1
55419: NEG
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 1
55427: PUSH
55428: LD_INT 0
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 1
55437: PUSH
55438: LD_INT 1
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 0
55447: PUSH
55448: LD_INT 1
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 1
55457: NEG
55458: PUSH
55459: LD_INT 0
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 1
55468: NEG
55469: PUSH
55470: LD_INT 1
55472: NEG
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: ST_TO_ADDR
// end ; 1 :
55487: GO 61384
55489: LD_INT 1
55491: DOUBLE
55492: EQUAL
55493: IFTRUE 55497
55495: GO 58120
55497: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55498: LD_ADDR_VAR 0 11
55502: PUSH
55503: LD_INT 1
55505: NEG
55506: PUSH
55507: LD_INT 3
55509: NEG
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 0
55517: PUSH
55518: LD_INT 3
55520: NEG
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 1
55528: PUSH
55529: LD_INT 2
55531: NEG
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: LIST
55541: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55542: LD_ADDR_VAR 0 12
55546: PUSH
55547: LD_INT 2
55549: PUSH
55550: LD_INT 1
55552: NEG
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 3
55560: PUSH
55561: LD_INT 0
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 3
55570: PUSH
55571: LD_INT 1
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: LIST
55582: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55583: LD_ADDR_VAR 0 13
55587: PUSH
55588: LD_INT 3
55590: PUSH
55591: LD_INT 2
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 3
55600: PUSH
55601: LD_INT 3
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 2
55610: PUSH
55611: LD_INT 3
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: LIST
55622: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55623: LD_ADDR_VAR 0 14
55627: PUSH
55628: LD_INT 1
55630: PUSH
55631: LD_INT 3
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 0
55640: PUSH
55641: LD_INT 3
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 1
55650: NEG
55651: PUSH
55652: LD_INT 2
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: LIST
55663: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55664: LD_ADDR_VAR 0 15
55668: PUSH
55669: LD_INT 2
55671: NEG
55672: PUSH
55673: LD_INT 1
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 3
55682: NEG
55683: PUSH
55684: LD_INT 0
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 3
55693: NEG
55694: PUSH
55695: LD_INT 1
55697: NEG
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: LIST
55707: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55708: LD_ADDR_VAR 0 16
55712: PUSH
55713: LD_INT 2
55715: NEG
55716: PUSH
55717: LD_INT 3
55719: NEG
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 3
55727: NEG
55728: PUSH
55729: LD_INT 2
55731: NEG
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 3
55739: NEG
55740: PUSH
55741: LD_INT 3
55743: NEG
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: LIST
55753: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55754: LD_ADDR_VAR 0 17
55758: PUSH
55759: LD_INT 1
55761: NEG
55762: PUSH
55763: LD_INT 3
55765: NEG
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 0
55773: PUSH
55774: LD_INT 3
55776: NEG
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 1
55784: PUSH
55785: LD_INT 2
55787: NEG
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: LIST
55797: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55798: LD_ADDR_VAR 0 18
55802: PUSH
55803: LD_INT 2
55805: PUSH
55806: LD_INT 1
55808: NEG
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 3
55816: PUSH
55817: LD_INT 0
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 3
55826: PUSH
55827: LD_INT 1
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: LIST
55838: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55839: LD_ADDR_VAR 0 19
55843: PUSH
55844: LD_INT 3
55846: PUSH
55847: LD_INT 2
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 3
55856: PUSH
55857: LD_INT 3
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 2
55866: PUSH
55867: LD_INT 3
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: LIST
55878: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55879: LD_ADDR_VAR 0 20
55883: PUSH
55884: LD_INT 1
55886: PUSH
55887: LD_INT 3
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 0
55896: PUSH
55897: LD_INT 3
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 1
55906: NEG
55907: PUSH
55908: LD_INT 2
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: LIST
55919: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55920: LD_ADDR_VAR 0 21
55924: PUSH
55925: LD_INT 2
55927: NEG
55928: PUSH
55929: LD_INT 1
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 3
55938: NEG
55939: PUSH
55940: LD_INT 0
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 3
55949: NEG
55950: PUSH
55951: LD_INT 1
55953: NEG
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: LIST
55963: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55964: LD_ADDR_VAR 0 22
55968: PUSH
55969: LD_INT 2
55971: NEG
55972: PUSH
55973: LD_INT 3
55975: NEG
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 3
55983: NEG
55984: PUSH
55985: LD_INT 2
55987: NEG
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 3
55995: NEG
55996: PUSH
55997: LD_INT 3
55999: NEG
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: LIST
56009: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56010: LD_ADDR_VAR 0 23
56014: PUSH
56015: LD_INT 0
56017: PUSH
56018: LD_INT 3
56020: NEG
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 1
56028: NEG
56029: PUSH
56030: LD_INT 4
56032: NEG
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 1
56040: PUSH
56041: LD_INT 3
56043: NEG
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: LIST
56053: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56054: LD_ADDR_VAR 0 24
56058: PUSH
56059: LD_INT 3
56061: PUSH
56062: LD_INT 0
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 3
56071: PUSH
56072: LD_INT 1
56074: NEG
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 4
56082: PUSH
56083: LD_INT 1
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: LIST
56094: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56095: LD_ADDR_VAR 0 25
56099: PUSH
56100: LD_INT 3
56102: PUSH
56103: LD_INT 3
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 4
56112: PUSH
56113: LD_INT 3
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 3
56122: PUSH
56123: LD_INT 4
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: LIST
56134: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56135: LD_ADDR_VAR 0 26
56139: PUSH
56140: LD_INT 0
56142: PUSH
56143: LD_INT 3
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 1
56152: PUSH
56153: LD_INT 4
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 1
56162: NEG
56163: PUSH
56164: LD_INT 3
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: LIST
56175: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56176: LD_ADDR_VAR 0 27
56180: PUSH
56181: LD_INT 3
56183: NEG
56184: PUSH
56185: LD_INT 0
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 3
56194: NEG
56195: PUSH
56196: LD_INT 1
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 4
56205: NEG
56206: PUSH
56207: LD_INT 1
56209: NEG
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: LIST
56219: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56220: LD_ADDR_VAR 0 28
56224: PUSH
56225: LD_INT 3
56227: NEG
56228: PUSH
56229: LD_INT 3
56231: NEG
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 3
56239: NEG
56240: PUSH
56241: LD_INT 4
56243: NEG
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 4
56251: NEG
56252: PUSH
56253: LD_INT 3
56255: NEG
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: LIST
56265: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56266: LD_ADDR_VAR 0 29
56270: PUSH
56271: LD_INT 1
56273: NEG
56274: PUSH
56275: LD_INT 3
56277: NEG
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 0
56285: PUSH
56286: LD_INT 3
56288: NEG
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 1
56296: PUSH
56297: LD_INT 2
56299: NEG
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 1
56307: NEG
56308: PUSH
56309: LD_INT 4
56311: NEG
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 0
56319: PUSH
56320: LD_INT 4
56322: NEG
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 1
56330: PUSH
56331: LD_INT 3
56333: NEG
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 1
56341: NEG
56342: PUSH
56343: LD_INT 5
56345: NEG
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 0
56353: PUSH
56354: LD_INT 5
56356: NEG
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 1
56364: PUSH
56365: LD_INT 4
56367: NEG
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 1
56375: NEG
56376: PUSH
56377: LD_INT 6
56379: NEG
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 0
56387: PUSH
56388: LD_INT 6
56390: NEG
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 1
56398: PUSH
56399: LD_INT 5
56401: NEG
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56421: LD_ADDR_VAR 0 30
56425: PUSH
56426: LD_INT 2
56428: PUSH
56429: LD_INT 1
56431: NEG
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 3
56439: PUSH
56440: LD_INT 0
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 3
56449: PUSH
56450: LD_INT 1
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 3
56459: PUSH
56460: LD_INT 1
56462: NEG
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 4
56470: PUSH
56471: LD_INT 0
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 4
56480: PUSH
56481: LD_INT 1
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 4
56490: PUSH
56491: LD_INT 1
56493: NEG
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 5
56501: PUSH
56502: LD_INT 0
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 5
56511: PUSH
56512: LD_INT 1
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 5
56521: PUSH
56522: LD_INT 1
56524: NEG
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 6
56532: PUSH
56533: LD_INT 0
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 6
56542: PUSH
56543: LD_INT 1
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56564: LD_ADDR_VAR 0 31
56568: PUSH
56569: LD_INT 3
56571: PUSH
56572: LD_INT 2
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 3
56581: PUSH
56582: LD_INT 3
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 2
56591: PUSH
56592: LD_INT 3
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 4
56601: PUSH
56602: LD_INT 3
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 4
56611: PUSH
56612: LD_INT 4
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 3
56621: PUSH
56622: LD_INT 4
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 5
56631: PUSH
56632: LD_INT 4
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 5
56641: PUSH
56642: LD_INT 5
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 4
56651: PUSH
56652: LD_INT 5
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 6
56661: PUSH
56662: LD_INT 5
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 6
56671: PUSH
56672: LD_INT 6
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 5
56681: PUSH
56682: LD_INT 6
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56703: LD_ADDR_VAR 0 32
56707: PUSH
56708: LD_INT 1
56710: PUSH
56711: LD_INT 3
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 0
56720: PUSH
56721: LD_INT 3
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 1
56730: NEG
56731: PUSH
56732: LD_INT 2
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 1
56741: PUSH
56742: LD_INT 4
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 0
56751: PUSH
56752: LD_INT 4
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 1
56761: NEG
56762: PUSH
56763: LD_INT 3
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 1
56772: PUSH
56773: LD_INT 5
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 0
56782: PUSH
56783: LD_INT 5
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 1
56792: NEG
56793: PUSH
56794: LD_INT 4
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 1
56803: PUSH
56804: LD_INT 6
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 0
56813: PUSH
56814: LD_INT 6
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 1
56823: NEG
56824: PUSH
56825: LD_INT 5
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56846: LD_ADDR_VAR 0 33
56850: PUSH
56851: LD_INT 2
56853: NEG
56854: PUSH
56855: LD_INT 1
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 3
56864: NEG
56865: PUSH
56866: LD_INT 0
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 3
56875: NEG
56876: PUSH
56877: LD_INT 1
56879: NEG
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 3
56887: NEG
56888: PUSH
56889: LD_INT 1
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 4
56898: NEG
56899: PUSH
56900: LD_INT 0
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 4
56909: NEG
56910: PUSH
56911: LD_INT 1
56913: NEG
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 4
56921: NEG
56922: PUSH
56923: LD_INT 1
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 5
56932: NEG
56933: PUSH
56934: LD_INT 0
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: LD_INT 5
56943: NEG
56944: PUSH
56945: LD_INT 1
56947: NEG
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 5
56955: NEG
56956: PUSH
56957: LD_INT 1
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 6
56966: NEG
56967: PUSH
56968: LD_INT 0
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 6
56977: NEG
56978: PUSH
56979: LD_INT 1
56981: NEG
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57001: LD_ADDR_VAR 0 34
57005: PUSH
57006: LD_INT 2
57008: NEG
57009: PUSH
57010: LD_INT 3
57012: NEG
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 3
57020: NEG
57021: PUSH
57022: LD_INT 2
57024: NEG
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 3
57032: NEG
57033: PUSH
57034: LD_INT 3
57036: NEG
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 3
57044: NEG
57045: PUSH
57046: LD_INT 4
57048: NEG
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 4
57056: NEG
57057: PUSH
57058: LD_INT 3
57060: NEG
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 4
57068: NEG
57069: PUSH
57070: LD_INT 4
57072: NEG
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 4
57080: NEG
57081: PUSH
57082: LD_INT 5
57084: NEG
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 5
57092: NEG
57093: PUSH
57094: LD_INT 4
57096: NEG
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 5
57104: NEG
57105: PUSH
57106: LD_INT 5
57108: NEG
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 5
57116: NEG
57117: PUSH
57118: LD_INT 6
57120: NEG
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 6
57128: NEG
57129: PUSH
57130: LD_INT 5
57132: NEG
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 6
57140: NEG
57141: PUSH
57142: LD_INT 6
57144: NEG
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57164: LD_ADDR_VAR 0 41
57168: PUSH
57169: LD_INT 0
57171: PUSH
57172: LD_INT 2
57174: NEG
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 1
57182: NEG
57183: PUSH
57184: LD_INT 3
57186: NEG
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 1
57194: PUSH
57195: LD_INT 2
57197: NEG
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: LIST
57207: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57208: LD_ADDR_VAR 0 42
57212: PUSH
57213: LD_INT 2
57215: PUSH
57216: LD_INT 0
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 2
57225: PUSH
57226: LD_INT 1
57228: NEG
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 3
57236: PUSH
57237: LD_INT 1
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: LIST
57248: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57249: LD_ADDR_VAR 0 43
57253: PUSH
57254: LD_INT 2
57256: PUSH
57257: LD_INT 2
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 3
57266: PUSH
57267: LD_INT 2
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 2
57276: PUSH
57277: LD_INT 3
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: LIST
57288: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57289: LD_ADDR_VAR 0 44
57293: PUSH
57294: LD_INT 0
57296: PUSH
57297: LD_INT 2
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 1
57306: PUSH
57307: LD_INT 3
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 1
57316: NEG
57317: PUSH
57318: LD_INT 2
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: LIST
57329: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57330: LD_ADDR_VAR 0 45
57334: PUSH
57335: LD_INT 2
57337: NEG
57338: PUSH
57339: LD_INT 0
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 2
57348: NEG
57349: PUSH
57350: LD_INT 1
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 3
57359: NEG
57360: PUSH
57361: LD_INT 1
57363: NEG
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: LIST
57373: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57374: LD_ADDR_VAR 0 46
57378: PUSH
57379: LD_INT 2
57381: NEG
57382: PUSH
57383: LD_INT 2
57385: NEG
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 2
57393: NEG
57394: PUSH
57395: LD_INT 3
57397: NEG
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 3
57405: NEG
57406: PUSH
57407: LD_INT 2
57409: NEG
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: LIST
57419: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57420: LD_ADDR_VAR 0 47
57424: PUSH
57425: LD_INT 2
57427: NEG
57428: PUSH
57429: LD_INT 3
57431: NEG
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 1
57439: NEG
57440: PUSH
57441: LD_INT 3
57443: NEG
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57453: LD_ADDR_VAR 0 48
57457: PUSH
57458: LD_INT 1
57460: PUSH
57461: LD_INT 2
57463: NEG
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 2
57471: PUSH
57472: LD_INT 1
57474: NEG
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57484: LD_ADDR_VAR 0 49
57488: PUSH
57489: LD_INT 3
57491: PUSH
57492: LD_INT 1
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 3
57501: PUSH
57502: LD_INT 2
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57513: LD_ADDR_VAR 0 50
57517: PUSH
57518: LD_INT 2
57520: PUSH
57521: LD_INT 3
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 1
57530: PUSH
57531: LD_INT 3
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57542: LD_ADDR_VAR 0 51
57546: PUSH
57547: LD_INT 1
57549: NEG
57550: PUSH
57551: LD_INT 2
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 2
57560: NEG
57561: PUSH
57562: LD_INT 1
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57573: LD_ADDR_VAR 0 52
57577: PUSH
57578: LD_INT 3
57580: NEG
57581: PUSH
57582: LD_INT 1
57584: NEG
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 3
57592: NEG
57593: PUSH
57594: LD_INT 2
57596: NEG
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57606: LD_ADDR_VAR 0 53
57610: PUSH
57611: LD_INT 1
57613: NEG
57614: PUSH
57615: LD_INT 3
57617: NEG
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 0
57625: PUSH
57626: LD_INT 3
57628: NEG
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 1
57636: PUSH
57637: LD_INT 2
57639: NEG
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: LIST
57649: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57650: LD_ADDR_VAR 0 54
57654: PUSH
57655: LD_INT 2
57657: PUSH
57658: LD_INT 1
57660: NEG
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 3
57668: PUSH
57669: LD_INT 0
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 3
57678: PUSH
57679: LD_INT 1
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: LIST
57690: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57691: LD_ADDR_VAR 0 55
57695: PUSH
57696: LD_INT 3
57698: PUSH
57699: LD_INT 2
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 3
57708: PUSH
57709: LD_INT 3
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 2
57718: PUSH
57719: LD_INT 3
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: LIST
57730: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57731: LD_ADDR_VAR 0 56
57735: PUSH
57736: LD_INT 1
57738: PUSH
57739: LD_INT 3
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 0
57748: PUSH
57749: LD_INT 3
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 1
57758: NEG
57759: PUSH
57760: LD_INT 2
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: LIST
57771: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57772: LD_ADDR_VAR 0 57
57776: PUSH
57777: LD_INT 2
57779: NEG
57780: PUSH
57781: LD_INT 1
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 3
57790: NEG
57791: PUSH
57792: LD_INT 0
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 3
57801: NEG
57802: PUSH
57803: LD_INT 1
57805: NEG
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: LIST
57815: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57816: LD_ADDR_VAR 0 58
57820: PUSH
57821: LD_INT 2
57823: NEG
57824: PUSH
57825: LD_INT 3
57827: NEG
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 3
57835: NEG
57836: PUSH
57837: LD_INT 2
57839: NEG
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 3
57847: NEG
57848: PUSH
57849: LD_INT 3
57851: NEG
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: LIST
57861: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57862: LD_ADDR_VAR 0 59
57866: PUSH
57867: LD_INT 1
57869: NEG
57870: PUSH
57871: LD_INT 2
57873: NEG
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 0
57881: PUSH
57882: LD_INT 2
57884: NEG
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 1
57892: PUSH
57893: LD_INT 1
57895: NEG
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: LIST
57905: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57906: LD_ADDR_VAR 0 60
57910: PUSH
57911: LD_INT 1
57913: PUSH
57914: LD_INT 1
57916: NEG
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 2
57924: PUSH
57925: LD_INT 0
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 2
57934: PUSH
57935: LD_INT 1
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: LIST
57946: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57947: LD_ADDR_VAR 0 61
57951: PUSH
57952: LD_INT 2
57954: PUSH
57955: LD_INT 1
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 2
57964: PUSH
57965: LD_INT 2
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 1
57974: PUSH
57975: LD_INT 2
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: LIST
57986: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57987: LD_ADDR_VAR 0 62
57991: PUSH
57992: LD_INT 1
57994: PUSH
57995: LD_INT 2
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 0
58004: PUSH
58005: LD_INT 2
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 1
58014: NEG
58015: PUSH
58016: LD_INT 1
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: LIST
58027: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58028: LD_ADDR_VAR 0 63
58032: PUSH
58033: LD_INT 1
58035: NEG
58036: PUSH
58037: LD_INT 1
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 2
58046: NEG
58047: PUSH
58048: LD_INT 0
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 2
58057: NEG
58058: PUSH
58059: LD_INT 1
58061: NEG
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: LIST
58071: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58072: LD_ADDR_VAR 0 64
58076: PUSH
58077: LD_INT 1
58079: NEG
58080: PUSH
58081: LD_INT 2
58083: NEG
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 2
58091: NEG
58092: PUSH
58093: LD_INT 1
58095: NEG
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 2
58103: NEG
58104: PUSH
58105: LD_INT 2
58107: NEG
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: LIST
58117: ST_TO_ADDR
// end ; 2 :
58118: GO 61384
58120: LD_INT 2
58122: DOUBLE
58123: EQUAL
58124: IFTRUE 58128
58126: GO 61383
58128: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58129: LD_ADDR_VAR 0 29
58133: PUSH
58134: LD_INT 4
58136: PUSH
58137: LD_INT 0
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 4
58146: PUSH
58147: LD_INT 1
58149: NEG
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 5
58157: PUSH
58158: LD_INT 0
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 5
58167: PUSH
58168: LD_INT 1
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 4
58177: PUSH
58178: LD_INT 1
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 3
58187: PUSH
58188: LD_INT 0
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 3
58197: PUSH
58198: LD_INT 1
58200: NEG
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 3
58208: PUSH
58209: LD_INT 2
58211: NEG
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 5
58219: PUSH
58220: LD_INT 2
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 3
58229: PUSH
58230: LD_INT 3
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 3
58239: PUSH
58240: LD_INT 2
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 4
58249: PUSH
58250: LD_INT 3
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 4
58259: PUSH
58260: LD_INT 4
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 3
58269: PUSH
58270: LD_INT 4
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 2
58279: PUSH
58280: LD_INT 3
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 2
58289: PUSH
58290: LD_INT 2
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 4
58299: PUSH
58300: LD_INT 2
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 2
58309: PUSH
58310: LD_INT 4
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 0
58319: PUSH
58320: LD_INT 4
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 0
58329: PUSH
58330: LD_INT 3
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 1
58339: PUSH
58340: LD_INT 4
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 1
58349: PUSH
58350: LD_INT 5
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 0
58359: PUSH
58360: LD_INT 5
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 1
58369: NEG
58370: PUSH
58371: LD_INT 4
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 1
58380: NEG
58381: PUSH
58382: LD_INT 3
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 2
58391: PUSH
58392: LD_INT 5
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 2
58401: NEG
58402: PUSH
58403: LD_INT 3
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 3
58412: NEG
58413: PUSH
58414: LD_INT 0
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 3
58423: NEG
58424: PUSH
58425: LD_INT 1
58427: NEG
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 2
58435: NEG
58436: PUSH
58437: LD_INT 0
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 2
58446: NEG
58447: PUSH
58448: LD_INT 1
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 3
58457: NEG
58458: PUSH
58459: LD_INT 1
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 4
58468: NEG
58469: PUSH
58470: LD_INT 0
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 4
58479: NEG
58480: PUSH
58481: LD_INT 1
58483: NEG
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 4
58491: NEG
58492: PUSH
58493: LD_INT 2
58495: NEG
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 2
58503: NEG
58504: PUSH
58505: LD_INT 2
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 4
58514: NEG
58515: PUSH
58516: LD_INT 4
58518: NEG
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 4
58526: NEG
58527: PUSH
58528: LD_INT 5
58530: NEG
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 3
58538: NEG
58539: PUSH
58540: LD_INT 4
58542: NEG
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 3
58550: NEG
58551: PUSH
58552: LD_INT 3
58554: NEG
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 4
58562: NEG
58563: PUSH
58564: LD_INT 3
58566: NEG
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 5
58574: NEG
58575: PUSH
58576: LD_INT 4
58578: NEG
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 5
58586: NEG
58587: PUSH
58588: LD_INT 5
58590: NEG
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 3
58598: NEG
58599: PUSH
58600: LD_INT 5
58602: NEG
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 5
58610: NEG
58611: PUSH
58612: LD_INT 3
58614: NEG
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58667: LD_ADDR_VAR 0 30
58671: PUSH
58672: LD_INT 4
58674: PUSH
58675: LD_INT 4
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 4
58684: PUSH
58685: LD_INT 3
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 5
58694: PUSH
58695: LD_INT 4
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 5
58704: PUSH
58705: LD_INT 5
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 4
58714: PUSH
58715: LD_INT 5
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 3
58724: PUSH
58725: LD_INT 4
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 3
58734: PUSH
58735: LD_INT 3
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 5
58744: PUSH
58745: LD_INT 3
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 3
58754: PUSH
58755: LD_INT 5
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 0
58764: PUSH
58765: LD_INT 3
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 0
58774: PUSH
58775: LD_INT 2
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 1
58784: PUSH
58785: LD_INT 3
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 1
58794: PUSH
58795: LD_INT 4
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 0
58804: PUSH
58805: LD_INT 4
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 1
58814: NEG
58815: PUSH
58816: LD_INT 3
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 1
58825: NEG
58826: PUSH
58827: LD_INT 2
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 2
58836: PUSH
58837: LD_INT 4
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 2
58846: NEG
58847: PUSH
58848: LD_INT 2
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 4
58857: NEG
58858: PUSH
58859: LD_INT 0
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 4
58868: NEG
58869: PUSH
58870: LD_INT 1
58872: NEG
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 3
58880: NEG
58881: PUSH
58882: LD_INT 0
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 3
58891: NEG
58892: PUSH
58893: LD_INT 1
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 4
58902: NEG
58903: PUSH
58904: LD_INT 1
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 5
58913: NEG
58914: PUSH
58915: LD_INT 0
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 5
58924: NEG
58925: PUSH
58926: LD_INT 1
58928: NEG
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 5
58936: NEG
58937: PUSH
58938: LD_INT 2
58940: NEG
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 3
58948: NEG
58949: PUSH
58950: LD_INT 2
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 3
58959: NEG
58960: PUSH
58961: LD_INT 3
58963: NEG
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 3
58971: NEG
58972: PUSH
58973: LD_INT 4
58975: NEG
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 2
58983: NEG
58984: PUSH
58985: LD_INT 3
58987: NEG
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 2
58995: NEG
58996: PUSH
58997: LD_INT 2
58999: NEG
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 3
59007: NEG
59008: PUSH
59009: LD_INT 2
59011: NEG
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_INT 4
59019: NEG
59020: PUSH
59021: LD_INT 3
59023: NEG
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: LD_INT 4
59031: NEG
59032: PUSH
59033: LD_INT 4
59035: NEG
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 2
59043: NEG
59044: PUSH
59045: LD_INT 4
59047: NEG
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 4
59055: NEG
59056: PUSH
59057: LD_INT 2
59059: NEG
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 0
59067: PUSH
59068: LD_INT 4
59070: NEG
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 0
59078: PUSH
59079: LD_INT 5
59081: NEG
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 1
59089: PUSH
59090: LD_INT 4
59092: NEG
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 1
59100: PUSH
59101: LD_INT 3
59103: NEG
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 0
59111: PUSH
59112: LD_INT 3
59114: NEG
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 1
59122: NEG
59123: PUSH
59124: LD_INT 4
59126: NEG
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 1
59134: NEG
59135: PUSH
59136: LD_INT 5
59138: NEG
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 2
59146: PUSH
59147: LD_INT 3
59149: NEG
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 2
59157: NEG
59158: PUSH
59159: LD_INT 5
59161: NEG
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59214: LD_ADDR_VAR 0 31
59218: PUSH
59219: LD_INT 0
59221: PUSH
59222: LD_INT 4
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 0
59231: PUSH
59232: LD_INT 3
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 1
59241: PUSH
59242: LD_INT 4
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 1
59251: PUSH
59252: LD_INT 5
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 0
59261: PUSH
59262: LD_INT 5
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 1
59271: NEG
59272: PUSH
59273: LD_INT 4
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 1
59282: NEG
59283: PUSH
59284: LD_INT 3
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 2
59293: PUSH
59294: LD_INT 5
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: LD_INT 2
59303: NEG
59304: PUSH
59305: LD_INT 3
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 3
59314: NEG
59315: PUSH
59316: LD_INT 0
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 3
59325: NEG
59326: PUSH
59327: LD_INT 1
59329: NEG
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 2
59337: NEG
59338: PUSH
59339: LD_INT 0
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 2
59348: NEG
59349: PUSH
59350: LD_INT 1
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 3
59359: NEG
59360: PUSH
59361: LD_INT 1
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: LD_INT 4
59370: NEG
59371: PUSH
59372: LD_INT 0
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 4
59381: NEG
59382: PUSH
59383: LD_INT 1
59385: NEG
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 4
59393: NEG
59394: PUSH
59395: LD_INT 2
59397: NEG
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 2
59405: NEG
59406: PUSH
59407: LD_INT 2
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 4
59416: NEG
59417: PUSH
59418: LD_INT 4
59420: NEG
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 4
59428: NEG
59429: PUSH
59430: LD_INT 5
59432: NEG
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 3
59440: NEG
59441: PUSH
59442: LD_INT 4
59444: NEG
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 3
59452: NEG
59453: PUSH
59454: LD_INT 3
59456: NEG
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 4
59464: NEG
59465: PUSH
59466: LD_INT 3
59468: NEG
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 5
59476: NEG
59477: PUSH
59478: LD_INT 4
59480: NEG
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 5
59488: NEG
59489: PUSH
59490: LD_INT 5
59492: NEG
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 3
59500: NEG
59501: PUSH
59502: LD_INT 5
59504: NEG
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 5
59512: NEG
59513: PUSH
59514: LD_INT 3
59516: NEG
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 0
59524: PUSH
59525: LD_INT 3
59527: NEG
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 0
59535: PUSH
59536: LD_INT 4
59538: NEG
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 1
59546: PUSH
59547: LD_INT 3
59549: NEG
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 1
59557: PUSH
59558: LD_INT 2
59560: NEG
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 0
59568: PUSH
59569: LD_INT 2
59571: NEG
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 1
59579: NEG
59580: PUSH
59581: LD_INT 3
59583: NEG
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 1
59591: NEG
59592: PUSH
59593: LD_INT 4
59595: NEG
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 2
59603: PUSH
59604: LD_INT 2
59606: NEG
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 2
59614: NEG
59615: PUSH
59616: LD_INT 4
59618: NEG
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 4
59626: PUSH
59627: LD_INT 0
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 4
59636: PUSH
59637: LD_INT 1
59639: NEG
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 5
59647: PUSH
59648: LD_INT 0
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 5
59657: PUSH
59658: LD_INT 1
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 4
59667: PUSH
59668: LD_INT 1
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 3
59677: PUSH
59678: LD_INT 0
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 3
59687: PUSH
59688: LD_INT 1
59690: NEG
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 3
59698: PUSH
59699: LD_INT 2
59701: NEG
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 5
59709: PUSH
59710: LD_INT 2
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59764: LD_ADDR_VAR 0 32
59768: PUSH
59769: LD_INT 4
59771: NEG
59772: PUSH
59773: LD_INT 0
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 4
59782: NEG
59783: PUSH
59784: LD_INT 1
59786: NEG
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 3
59794: NEG
59795: PUSH
59796: LD_INT 0
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 3
59805: NEG
59806: PUSH
59807: LD_INT 1
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 4
59816: NEG
59817: PUSH
59818: LD_INT 1
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 5
59827: NEG
59828: PUSH
59829: LD_INT 0
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 5
59838: NEG
59839: PUSH
59840: LD_INT 1
59842: NEG
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 5
59850: NEG
59851: PUSH
59852: LD_INT 2
59854: NEG
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 3
59862: NEG
59863: PUSH
59864: LD_INT 2
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 3
59873: NEG
59874: PUSH
59875: LD_INT 3
59877: NEG
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 3
59885: NEG
59886: PUSH
59887: LD_INT 4
59889: NEG
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 2
59897: NEG
59898: PUSH
59899: LD_INT 3
59901: NEG
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 2
59909: NEG
59910: PUSH
59911: LD_INT 2
59913: NEG
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 3
59921: NEG
59922: PUSH
59923: LD_INT 2
59925: NEG
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 4
59933: NEG
59934: PUSH
59935: LD_INT 3
59937: NEG
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 4
59945: NEG
59946: PUSH
59947: LD_INT 4
59949: NEG
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 2
59957: NEG
59958: PUSH
59959: LD_INT 4
59961: NEG
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 4
59969: NEG
59970: PUSH
59971: LD_INT 2
59973: NEG
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 0
59981: PUSH
59982: LD_INT 4
59984: NEG
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 0
59992: PUSH
59993: LD_INT 5
59995: NEG
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: LD_INT 1
60003: PUSH
60004: LD_INT 4
60006: NEG
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 1
60014: PUSH
60015: LD_INT 3
60017: NEG
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 0
60025: PUSH
60026: LD_INT 3
60028: NEG
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 1
60036: NEG
60037: PUSH
60038: LD_INT 4
60040: NEG
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 1
60048: NEG
60049: PUSH
60050: LD_INT 5
60052: NEG
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 2
60060: PUSH
60061: LD_INT 3
60063: NEG
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 2
60071: NEG
60072: PUSH
60073: LD_INT 5
60075: NEG
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 3
60083: PUSH
60084: LD_INT 0
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 3
60093: PUSH
60094: LD_INT 1
60096: NEG
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 4
60104: PUSH
60105: LD_INT 0
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 4
60114: PUSH
60115: LD_INT 1
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 3
60124: PUSH
60125: LD_INT 1
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 2
60134: PUSH
60135: LD_INT 0
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 2
60144: PUSH
60145: LD_INT 1
60147: NEG
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 2
60155: PUSH
60156: LD_INT 2
60158: NEG
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 4
60166: PUSH
60167: LD_INT 2
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 4
60176: PUSH
60177: LD_INT 4
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 4
60186: PUSH
60187: LD_INT 3
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 5
60196: PUSH
60197: LD_INT 4
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: LD_INT 5
60206: PUSH
60207: LD_INT 5
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 4
60216: PUSH
60217: LD_INT 5
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 3
60226: PUSH
60227: LD_INT 4
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 3
60236: PUSH
60237: LD_INT 3
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 5
60246: PUSH
60247: LD_INT 3
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 3
60256: PUSH
60257: LD_INT 5
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: LIST
60309: LIST
60310: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60311: LD_ADDR_VAR 0 33
60315: PUSH
60316: LD_INT 4
60318: NEG
60319: PUSH
60320: LD_INT 4
60322: NEG
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 4
60330: NEG
60331: PUSH
60332: LD_INT 5
60334: NEG
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 3
60342: NEG
60343: PUSH
60344: LD_INT 4
60346: NEG
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 3
60354: NEG
60355: PUSH
60356: LD_INT 3
60358: NEG
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 4
60366: NEG
60367: PUSH
60368: LD_INT 3
60370: NEG
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 5
60378: NEG
60379: PUSH
60380: LD_INT 4
60382: NEG
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_INT 5
60390: NEG
60391: PUSH
60392: LD_INT 5
60394: NEG
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 3
60402: NEG
60403: PUSH
60404: LD_INT 5
60406: NEG
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 5
60414: NEG
60415: PUSH
60416: LD_INT 3
60418: NEG
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 0
60426: PUSH
60427: LD_INT 3
60429: NEG
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 0
60437: PUSH
60438: LD_INT 4
60440: NEG
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PUSH
60446: LD_INT 1
60448: PUSH
60449: LD_INT 3
60451: NEG
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 1
60459: PUSH
60460: LD_INT 2
60462: NEG
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 0
60470: PUSH
60471: LD_INT 2
60473: NEG
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 1
60481: NEG
60482: PUSH
60483: LD_INT 3
60485: NEG
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 1
60493: NEG
60494: PUSH
60495: LD_INT 4
60497: NEG
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 2
60505: PUSH
60506: LD_INT 2
60508: NEG
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 2
60516: NEG
60517: PUSH
60518: LD_INT 4
60520: NEG
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 4
60528: PUSH
60529: LD_INT 0
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 4
60538: PUSH
60539: LD_INT 1
60541: NEG
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 5
60549: PUSH
60550: LD_INT 0
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PUSH
60557: LD_INT 5
60559: PUSH
60560: LD_INT 1
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: LD_INT 4
60569: PUSH
60570: LD_INT 1
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 3
60579: PUSH
60580: LD_INT 0
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 3
60589: PUSH
60590: LD_INT 1
60592: NEG
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 3
60600: PUSH
60601: LD_INT 2
60603: NEG
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 5
60611: PUSH
60612: LD_INT 2
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 3
60621: PUSH
60622: LD_INT 3
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 3
60631: PUSH
60632: LD_INT 2
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 4
60641: PUSH
60642: LD_INT 3
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 4
60651: PUSH
60652: LD_INT 4
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 3
60661: PUSH
60662: LD_INT 4
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: LD_INT 2
60671: PUSH
60672: LD_INT 3
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 2
60681: PUSH
60682: LD_INT 2
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 4
60691: PUSH
60692: LD_INT 2
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: LD_INT 2
60701: PUSH
60702: LD_INT 4
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 0
60711: PUSH
60712: LD_INT 4
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 0
60721: PUSH
60722: LD_INT 3
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: LD_INT 1
60731: PUSH
60732: LD_INT 4
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 1
60741: PUSH
60742: LD_INT 5
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 0
60751: PUSH
60752: LD_INT 5
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 1
60761: NEG
60762: PUSH
60763: LD_INT 4
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 1
60772: NEG
60773: PUSH
60774: LD_INT 3
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 2
60783: PUSH
60784: LD_INT 5
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 2
60793: NEG
60794: PUSH
60795: LD_INT 3
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: LIST
60847: LIST
60848: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60849: LD_ADDR_VAR 0 34
60853: PUSH
60854: LD_INT 0
60856: PUSH
60857: LD_INT 4
60859: NEG
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 0
60867: PUSH
60868: LD_INT 5
60870: NEG
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 1
60878: PUSH
60879: LD_INT 4
60881: NEG
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 1
60889: PUSH
60890: LD_INT 3
60892: NEG
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 0
60900: PUSH
60901: LD_INT 3
60903: NEG
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 1
60911: NEG
60912: PUSH
60913: LD_INT 4
60915: NEG
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 1
60923: NEG
60924: PUSH
60925: LD_INT 5
60927: NEG
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 2
60935: PUSH
60936: LD_INT 3
60938: NEG
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 2
60946: NEG
60947: PUSH
60948: LD_INT 5
60950: NEG
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 3
60958: PUSH
60959: LD_INT 0
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 3
60968: PUSH
60969: LD_INT 1
60971: NEG
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 4
60979: PUSH
60980: LD_INT 0
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 4
60989: PUSH
60990: LD_INT 1
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 3
60999: PUSH
61000: LD_INT 1
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 2
61009: PUSH
61010: LD_INT 0
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 2
61019: PUSH
61020: LD_INT 1
61022: NEG
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 2
61030: PUSH
61031: LD_INT 2
61033: NEG
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 4
61041: PUSH
61042: LD_INT 2
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 4
61051: PUSH
61052: LD_INT 4
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 4
61061: PUSH
61062: LD_INT 3
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 5
61071: PUSH
61072: LD_INT 4
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 5
61081: PUSH
61082: LD_INT 5
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 4
61091: PUSH
61092: LD_INT 5
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 3
61101: PUSH
61102: LD_INT 4
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 3
61111: PUSH
61112: LD_INT 3
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 5
61121: PUSH
61122: LD_INT 3
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 3
61131: PUSH
61132: LD_INT 5
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 0
61141: PUSH
61142: LD_INT 3
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 0
61151: PUSH
61152: LD_INT 2
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 1
61161: PUSH
61162: LD_INT 3
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 1
61171: PUSH
61172: LD_INT 4
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 0
61181: PUSH
61182: LD_INT 4
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 1
61191: NEG
61192: PUSH
61193: LD_INT 3
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: LD_INT 1
61202: NEG
61203: PUSH
61204: LD_INT 2
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 2
61213: PUSH
61214: LD_INT 4
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: LD_INT 2
61223: NEG
61224: PUSH
61225: LD_INT 2
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 4
61234: NEG
61235: PUSH
61236: LD_INT 0
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 4
61245: NEG
61246: PUSH
61247: LD_INT 1
61249: NEG
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PUSH
61255: LD_INT 3
61257: NEG
61258: PUSH
61259: LD_INT 0
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 3
61268: NEG
61269: PUSH
61270: LD_INT 1
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 4
61279: NEG
61280: PUSH
61281: LD_INT 1
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 5
61290: NEG
61291: PUSH
61292: LD_INT 0
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 5
61301: NEG
61302: PUSH
61303: LD_INT 1
61305: NEG
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 5
61313: NEG
61314: PUSH
61315: LD_INT 2
61317: NEG
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 3
61325: NEG
61326: PUSH
61327: LD_INT 2
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: ST_TO_ADDR
// end ; end ;
61381: GO 61384
61383: POP
// case btype of b_depot , b_warehouse :
61384: LD_VAR 0 1
61388: PUSH
61389: LD_INT 0
61391: DOUBLE
61392: EQUAL
61393: IFTRUE 61403
61395: LD_INT 1
61397: DOUBLE
61398: EQUAL
61399: IFTRUE 61403
61401: GO 61604
61403: POP
// case nation of nation_american :
61404: LD_VAR 0 5
61408: PUSH
61409: LD_INT 1
61411: DOUBLE
61412: EQUAL
61413: IFTRUE 61417
61415: GO 61473
61417: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61418: LD_ADDR_VAR 0 9
61422: PUSH
61423: LD_VAR 0 11
61427: PUSH
61428: LD_VAR 0 12
61432: PUSH
61433: LD_VAR 0 13
61437: PUSH
61438: LD_VAR 0 14
61442: PUSH
61443: LD_VAR 0 15
61447: PUSH
61448: LD_VAR 0 16
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: PUSH
61461: LD_VAR 0 4
61465: PUSH
61466: LD_INT 1
61468: PLUS
61469: ARRAY
61470: ST_TO_ADDR
61471: GO 61602
61473: LD_INT 2
61475: DOUBLE
61476: EQUAL
61477: IFTRUE 61481
61479: GO 61537
61481: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61482: LD_ADDR_VAR 0 9
61486: PUSH
61487: LD_VAR 0 17
61491: PUSH
61492: LD_VAR 0 18
61496: PUSH
61497: LD_VAR 0 19
61501: PUSH
61502: LD_VAR 0 20
61506: PUSH
61507: LD_VAR 0 21
61511: PUSH
61512: LD_VAR 0 22
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: PUSH
61525: LD_VAR 0 4
61529: PUSH
61530: LD_INT 1
61532: PLUS
61533: ARRAY
61534: ST_TO_ADDR
61535: GO 61602
61537: LD_INT 3
61539: DOUBLE
61540: EQUAL
61541: IFTRUE 61545
61543: GO 61601
61545: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61546: LD_ADDR_VAR 0 9
61550: PUSH
61551: LD_VAR 0 23
61555: PUSH
61556: LD_VAR 0 24
61560: PUSH
61561: LD_VAR 0 25
61565: PUSH
61566: LD_VAR 0 26
61570: PUSH
61571: LD_VAR 0 27
61575: PUSH
61576: LD_VAR 0 28
61580: PUSH
61581: EMPTY
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: PUSH
61589: LD_VAR 0 4
61593: PUSH
61594: LD_INT 1
61596: PLUS
61597: ARRAY
61598: ST_TO_ADDR
61599: GO 61602
61601: POP
61602: GO 62157
61604: LD_INT 2
61606: DOUBLE
61607: EQUAL
61608: IFTRUE 61618
61610: LD_INT 3
61612: DOUBLE
61613: EQUAL
61614: IFTRUE 61618
61616: GO 61674
61618: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61619: LD_ADDR_VAR 0 9
61623: PUSH
61624: LD_VAR 0 29
61628: PUSH
61629: LD_VAR 0 30
61633: PUSH
61634: LD_VAR 0 31
61638: PUSH
61639: LD_VAR 0 32
61643: PUSH
61644: LD_VAR 0 33
61648: PUSH
61649: LD_VAR 0 34
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: PUSH
61662: LD_VAR 0 4
61666: PUSH
61667: LD_INT 1
61669: PLUS
61670: ARRAY
61671: ST_TO_ADDR
61672: GO 62157
61674: LD_INT 16
61676: DOUBLE
61677: EQUAL
61678: IFTRUE 61736
61680: LD_INT 17
61682: DOUBLE
61683: EQUAL
61684: IFTRUE 61736
61686: LD_INT 18
61688: DOUBLE
61689: EQUAL
61690: IFTRUE 61736
61692: LD_INT 19
61694: DOUBLE
61695: EQUAL
61696: IFTRUE 61736
61698: LD_INT 22
61700: DOUBLE
61701: EQUAL
61702: IFTRUE 61736
61704: LD_INT 20
61706: DOUBLE
61707: EQUAL
61708: IFTRUE 61736
61710: LD_INT 21
61712: DOUBLE
61713: EQUAL
61714: IFTRUE 61736
61716: LD_INT 23
61718: DOUBLE
61719: EQUAL
61720: IFTRUE 61736
61722: LD_INT 24
61724: DOUBLE
61725: EQUAL
61726: IFTRUE 61736
61728: LD_INT 25
61730: DOUBLE
61731: EQUAL
61732: IFTRUE 61736
61734: GO 61792
61736: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61737: LD_ADDR_VAR 0 9
61741: PUSH
61742: LD_VAR 0 35
61746: PUSH
61747: LD_VAR 0 36
61751: PUSH
61752: LD_VAR 0 37
61756: PUSH
61757: LD_VAR 0 38
61761: PUSH
61762: LD_VAR 0 39
61766: PUSH
61767: LD_VAR 0 40
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: PUSH
61780: LD_VAR 0 4
61784: PUSH
61785: LD_INT 1
61787: PLUS
61788: ARRAY
61789: ST_TO_ADDR
61790: GO 62157
61792: LD_INT 6
61794: DOUBLE
61795: EQUAL
61796: IFTRUE 61848
61798: LD_INT 7
61800: DOUBLE
61801: EQUAL
61802: IFTRUE 61848
61804: LD_INT 8
61806: DOUBLE
61807: EQUAL
61808: IFTRUE 61848
61810: LD_INT 13
61812: DOUBLE
61813: EQUAL
61814: IFTRUE 61848
61816: LD_INT 12
61818: DOUBLE
61819: EQUAL
61820: IFTRUE 61848
61822: LD_INT 15
61824: DOUBLE
61825: EQUAL
61826: IFTRUE 61848
61828: LD_INT 11
61830: DOUBLE
61831: EQUAL
61832: IFTRUE 61848
61834: LD_INT 14
61836: DOUBLE
61837: EQUAL
61838: IFTRUE 61848
61840: LD_INT 10
61842: DOUBLE
61843: EQUAL
61844: IFTRUE 61848
61846: GO 61904
61848: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61849: LD_ADDR_VAR 0 9
61853: PUSH
61854: LD_VAR 0 41
61858: PUSH
61859: LD_VAR 0 42
61863: PUSH
61864: LD_VAR 0 43
61868: PUSH
61869: LD_VAR 0 44
61873: PUSH
61874: LD_VAR 0 45
61878: PUSH
61879: LD_VAR 0 46
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: PUSH
61892: LD_VAR 0 4
61896: PUSH
61897: LD_INT 1
61899: PLUS
61900: ARRAY
61901: ST_TO_ADDR
61902: GO 62157
61904: LD_INT 36
61906: DOUBLE
61907: EQUAL
61908: IFTRUE 61912
61910: GO 61968
61912: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61913: LD_ADDR_VAR 0 9
61917: PUSH
61918: LD_VAR 0 47
61922: PUSH
61923: LD_VAR 0 48
61927: PUSH
61928: LD_VAR 0 49
61932: PUSH
61933: LD_VAR 0 50
61937: PUSH
61938: LD_VAR 0 51
61942: PUSH
61943: LD_VAR 0 52
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: LIST
61952: LIST
61953: LIST
61954: LIST
61955: PUSH
61956: LD_VAR 0 4
61960: PUSH
61961: LD_INT 1
61963: PLUS
61964: ARRAY
61965: ST_TO_ADDR
61966: GO 62157
61968: LD_INT 4
61970: DOUBLE
61971: EQUAL
61972: IFTRUE 61994
61974: LD_INT 5
61976: DOUBLE
61977: EQUAL
61978: IFTRUE 61994
61980: LD_INT 34
61982: DOUBLE
61983: EQUAL
61984: IFTRUE 61994
61986: LD_INT 37
61988: DOUBLE
61989: EQUAL
61990: IFTRUE 61994
61992: GO 62050
61994: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61995: LD_ADDR_VAR 0 9
61999: PUSH
62000: LD_VAR 0 53
62004: PUSH
62005: LD_VAR 0 54
62009: PUSH
62010: LD_VAR 0 55
62014: PUSH
62015: LD_VAR 0 56
62019: PUSH
62020: LD_VAR 0 57
62024: PUSH
62025: LD_VAR 0 58
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: PUSH
62038: LD_VAR 0 4
62042: PUSH
62043: LD_INT 1
62045: PLUS
62046: ARRAY
62047: ST_TO_ADDR
62048: GO 62157
62050: LD_INT 31
62052: DOUBLE
62053: EQUAL
62054: IFTRUE 62100
62056: LD_INT 32
62058: DOUBLE
62059: EQUAL
62060: IFTRUE 62100
62062: LD_INT 33
62064: DOUBLE
62065: EQUAL
62066: IFTRUE 62100
62068: LD_INT 27
62070: DOUBLE
62071: EQUAL
62072: IFTRUE 62100
62074: LD_INT 26
62076: DOUBLE
62077: EQUAL
62078: IFTRUE 62100
62080: LD_INT 28
62082: DOUBLE
62083: EQUAL
62084: IFTRUE 62100
62086: LD_INT 29
62088: DOUBLE
62089: EQUAL
62090: IFTRUE 62100
62092: LD_INT 30
62094: DOUBLE
62095: EQUAL
62096: IFTRUE 62100
62098: GO 62156
62100: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62101: LD_ADDR_VAR 0 9
62105: PUSH
62106: LD_VAR 0 59
62110: PUSH
62111: LD_VAR 0 60
62115: PUSH
62116: LD_VAR 0 61
62120: PUSH
62121: LD_VAR 0 62
62125: PUSH
62126: LD_VAR 0 63
62130: PUSH
62131: LD_VAR 0 64
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: PUSH
62144: LD_VAR 0 4
62148: PUSH
62149: LD_INT 1
62151: PLUS
62152: ARRAY
62153: ST_TO_ADDR
62154: GO 62157
62156: POP
// temp_list2 = [ ] ;
62157: LD_ADDR_VAR 0 10
62161: PUSH
62162: EMPTY
62163: ST_TO_ADDR
// for i in temp_list do
62164: LD_ADDR_VAR 0 8
62168: PUSH
62169: LD_VAR 0 9
62173: PUSH
62174: FOR_IN
62175: IFFALSE 62227
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62177: LD_ADDR_VAR 0 10
62181: PUSH
62182: LD_VAR 0 10
62186: PUSH
62187: LD_VAR 0 8
62191: PUSH
62192: LD_INT 1
62194: ARRAY
62195: PUSH
62196: LD_VAR 0 2
62200: PLUS
62201: PUSH
62202: LD_VAR 0 8
62206: PUSH
62207: LD_INT 2
62209: ARRAY
62210: PUSH
62211: LD_VAR 0 3
62215: PLUS
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: EMPTY
62222: LIST
62223: ADD
62224: ST_TO_ADDR
62225: GO 62174
62227: POP
62228: POP
// result = temp_list2 ;
62229: LD_ADDR_VAR 0 7
62233: PUSH
62234: LD_VAR 0 10
62238: ST_TO_ADDR
// end ;
62239: LD_VAR 0 7
62243: RET
// export function EnemyInRange ( unit , dist ) ; begin
62244: LD_INT 0
62246: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62247: LD_ADDR_VAR 0 3
62251: PUSH
62252: LD_VAR 0 1
62256: PPUSH
62257: CALL_OW 255
62261: PPUSH
62262: LD_VAR 0 1
62266: PPUSH
62267: CALL_OW 250
62271: PPUSH
62272: LD_VAR 0 1
62276: PPUSH
62277: CALL_OW 251
62281: PPUSH
62282: LD_VAR 0 2
62286: PPUSH
62287: CALL 35639 0 4
62291: PUSH
62292: LD_INT 4
62294: ARRAY
62295: ST_TO_ADDR
// end ;
62296: LD_VAR 0 3
62300: RET
// export function PlayerSeeMe ( unit ) ; begin
62301: LD_INT 0
62303: PPUSH
// result := See ( your_side , unit ) ;
62304: LD_ADDR_VAR 0 2
62308: PUSH
62309: LD_OWVAR 2
62313: PPUSH
62314: LD_VAR 0 1
62318: PPUSH
62319: CALL_OW 292
62323: ST_TO_ADDR
// end ;
62324: LD_VAR 0 2
62328: RET
// export function ReverseDir ( unit ) ; begin
62329: LD_INT 0
62331: PPUSH
// if not unit then
62332: LD_VAR 0 1
62336: NOT
62337: IFFALSE 62341
// exit ;
62339: GO 62364
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62341: LD_ADDR_VAR 0 2
62345: PUSH
62346: LD_VAR 0 1
62350: PPUSH
62351: CALL_OW 254
62355: PUSH
62356: LD_INT 3
62358: PLUS
62359: PUSH
62360: LD_INT 6
62362: MOD
62363: ST_TO_ADDR
// end ;
62364: LD_VAR 0 2
62368: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
62369: LD_INT 0
62371: PPUSH
62372: PPUSH
62373: PPUSH
62374: PPUSH
62375: PPUSH
// if not hexes then
62376: LD_VAR 0 2
62380: NOT
62381: IFFALSE 62385
// exit ;
62383: GO 62533
// dist := 9999 ;
62385: LD_ADDR_VAR 0 5
62389: PUSH
62390: LD_INT 9999
62392: ST_TO_ADDR
// for i = 1 to hexes do
62393: LD_ADDR_VAR 0 4
62397: PUSH
62398: DOUBLE
62399: LD_INT 1
62401: DEC
62402: ST_TO_ADDR
62403: LD_VAR 0 2
62407: PUSH
62408: FOR_TO
62409: IFFALSE 62521
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
62411: LD_VAR 0 1
62415: PPUSH
62416: LD_VAR 0 2
62420: PUSH
62421: LD_VAR 0 4
62425: ARRAY
62426: PUSH
62427: LD_INT 1
62429: ARRAY
62430: PPUSH
62431: LD_VAR 0 2
62435: PUSH
62436: LD_VAR 0 4
62440: ARRAY
62441: PUSH
62442: LD_INT 2
62444: ARRAY
62445: PPUSH
62446: CALL_OW 297
62450: PUSH
62451: LD_VAR 0 5
62455: LESS
62456: IFFALSE 62519
// begin hex := hexes [ i ] ;
62458: LD_ADDR_VAR 0 7
62462: PUSH
62463: LD_VAR 0 2
62467: PUSH
62468: LD_VAR 0 4
62472: ARRAY
62473: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62474: LD_ADDR_VAR 0 5
62478: PUSH
62479: LD_VAR 0 1
62483: PPUSH
62484: LD_VAR 0 2
62488: PUSH
62489: LD_VAR 0 4
62493: ARRAY
62494: PUSH
62495: LD_INT 1
62497: ARRAY
62498: PPUSH
62499: LD_VAR 0 2
62503: PUSH
62504: LD_VAR 0 4
62508: ARRAY
62509: PUSH
62510: LD_INT 2
62512: ARRAY
62513: PPUSH
62514: CALL_OW 297
62518: ST_TO_ADDR
// end ; end ;
62519: GO 62408
62521: POP
62522: POP
// result := hex ;
62523: LD_ADDR_VAR 0 3
62527: PUSH
62528: LD_VAR 0 7
62532: ST_TO_ADDR
// end ;
62533: LD_VAR 0 3
62537: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62538: LD_INT 0
62540: PPUSH
62541: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62542: LD_VAR 0 1
62546: NOT
62547: PUSH
62548: LD_VAR 0 1
62552: PUSH
62553: LD_INT 21
62555: PUSH
62556: LD_INT 2
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: PUSH
62563: LD_INT 23
62565: PUSH
62566: LD_INT 2
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PPUSH
62577: CALL_OW 69
62581: IN
62582: NOT
62583: OR
62584: IFFALSE 62588
// exit ;
62586: GO 62635
// for i = 1 to 3 do
62588: LD_ADDR_VAR 0 3
62592: PUSH
62593: DOUBLE
62594: LD_INT 1
62596: DEC
62597: ST_TO_ADDR
62598: LD_INT 3
62600: PUSH
62601: FOR_TO
62602: IFFALSE 62633
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62604: LD_VAR 0 1
62608: PPUSH
62609: CALL_OW 250
62613: PPUSH
62614: LD_VAR 0 1
62618: PPUSH
62619: CALL_OW 251
62623: PPUSH
62624: LD_INT 1
62626: PPUSH
62627: CALL_OW 453
62631: GO 62601
62633: POP
62634: POP
// end ;
62635: LD_VAR 0 2
62639: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62640: LD_INT 0
62642: PPUSH
62643: PPUSH
62644: PPUSH
62645: PPUSH
62646: PPUSH
62647: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62648: LD_VAR 0 1
62652: NOT
62653: PUSH
62654: LD_VAR 0 2
62658: NOT
62659: OR
62660: PUSH
62661: LD_VAR 0 1
62665: PPUSH
62666: CALL_OW 314
62670: OR
62671: IFFALSE 62675
// exit ;
62673: GO 63116
// x := GetX ( enemy_unit ) ;
62675: LD_ADDR_VAR 0 7
62679: PUSH
62680: LD_VAR 0 2
62684: PPUSH
62685: CALL_OW 250
62689: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62690: LD_ADDR_VAR 0 8
62694: PUSH
62695: LD_VAR 0 2
62699: PPUSH
62700: CALL_OW 251
62704: ST_TO_ADDR
// if not x or not y then
62705: LD_VAR 0 7
62709: NOT
62710: PUSH
62711: LD_VAR 0 8
62715: NOT
62716: OR
62717: IFFALSE 62721
// exit ;
62719: GO 63116
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62721: LD_ADDR_VAR 0 6
62725: PUSH
62726: LD_VAR 0 7
62730: PPUSH
62731: LD_INT 0
62733: PPUSH
62734: LD_INT 4
62736: PPUSH
62737: CALL_OW 272
62741: PUSH
62742: LD_VAR 0 8
62746: PPUSH
62747: LD_INT 0
62749: PPUSH
62750: LD_INT 4
62752: PPUSH
62753: CALL_OW 273
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_VAR 0 7
62766: PPUSH
62767: LD_INT 1
62769: PPUSH
62770: LD_INT 4
62772: PPUSH
62773: CALL_OW 272
62777: PUSH
62778: LD_VAR 0 8
62782: PPUSH
62783: LD_INT 1
62785: PPUSH
62786: LD_INT 4
62788: PPUSH
62789: CALL_OW 273
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: LD_VAR 0 7
62802: PPUSH
62803: LD_INT 2
62805: PPUSH
62806: LD_INT 4
62808: PPUSH
62809: CALL_OW 272
62813: PUSH
62814: LD_VAR 0 8
62818: PPUSH
62819: LD_INT 2
62821: PPUSH
62822: LD_INT 4
62824: PPUSH
62825: CALL_OW 273
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: LD_VAR 0 7
62838: PPUSH
62839: LD_INT 3
62841: PPUSH
62842: LD_INT 4
62844: PPUSH
62845: CALL_OW 272
62849: PUSH
62850: LD_VAR 0 8
62854: PPUSH
62855: LD_INT 3
62857: PPUSH
62858: LD_INT 4
62860: PPUSH
62861: CALL_OW 273
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: LD_VAR 0 7
62874: PPUSH
62875: LD_INT 4
62877: PPUSH
62878: LD_INT 4
62880: PPUSH
62881: CALL_OW 272
62885: PUSH
62886: LD_VAR 0 8
62890: PPUSH
62891: LD_INT 4
62893: PPUSH
62894: LD_INT 4
62896: PPUSH
62897: CALL_OW 273
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: LD_VAR 0 7
62910: PPUSH
62911: LD_INT 5
62913: PPUSH
62914: LD_INT 4
62916: PPUSH
62917: CALL_OW 272
62921: PUSH
62922: LD_VAR 0 8
62926: PPUSH
62927: LD_INT 5
62929: PPUSH
62930: LD_INT 4
62932: PPUSH
62933: CALL_OW 273
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: LIST
62946: LIST
62947: LIST
62948: LIST
62949: ST_TO_ADDR
// for i = tmp downto 1 do
62950: LD_ADDR_VAR 0 4
62954: PUSH
62955: DOUBLE
62956: LD_VAR 0 6
62960: INC
62961: ST_TO_ADDR
62962: LD_INT 1
62964: PUSH
62965: FOR_DOWNTO
62966: IFFALSE 63067
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62968: LD_VAR 0 6
62972: PUSH
62973: LD_VAR 0 4
62977: ARRAY
62978: PUSH
62979: LD_INT 1
62981: ARRAY
62982: PPUSH
62983: LD_VAR 0 6
62987: PUSH
62988: LD_VAR 0 4
62992: ARRAY
62993: PUSH
62994: LD_INT 2
62996: ARRAY
62997: PPUSH
62998: CALL_OW 488
63002: NOT
63003: PUSH
63004: LD_VAR 0 6
63008: PUSH
63009: LD_VAR 0 4
63013: ARRAY
63014: PUSH
63015: LD_INT 1
63017: ARRAY
63018: PPUSH
63019: LD_VAR 0 6
63023: PUSH
63024: LD_VAR 0 4
63028: ARRAY
63029: PUSH
63030: LD_INT 2
63032: ARRAY
63033: PPUSH
63034: CALL_OW 428
63038: PUSH
63039: LD_INT 0
63041: NONEQUAL
63042: OR
63043: IFFALSE 63065
// tmp := Delete ( tmp , i ) ;
63045: LD_ADDR_VAR 0 6
63049: PUSH
63050: LD_VAR 0 6
63054: PPUSH
63055: LD_VAR 0 4
63059: PPUSH
63060: CALL_OW 3
63064: ST_TO_ADDR
63065: GO 62965
63067: POP
63068: POP
// j := GetClosestHex ( unit , tmp ) ;
63069: LD_ADDR_VAR 0 5
63073: PUSH
63074: LD_VAR 0 1
63078: PPUSH
63079: LD_VAR 0 6
63083: PPUSH
63084: CALL 62369 0 2
63088: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63089: LD_VAR 0 1
63093: PPUSH
63094: LD_VAR 0 5
63098: PUSH
63099: LD_INT 1
63101: ARRAY
63102: PPUSH
63103: LD_VAR 0 5
63107: PUSH
63108: LD_INT 2
63110: ARRAY
63111: PPUSH
63112: CALL_OW 111
// end ;
63116: LD_VAR 0 3
63120: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63121: LD_INT 0
63123: PPUSH
63124: PPUSH
63125: PPUSH
// uc_side = 0 ;
63126: LD_ADDR_OWVAR 20
63130: PUSH
63131: LD_INT 0
63133: ST_TO_ADDR
// uc_nation = 0 ;
63134: LD_ADDR_OWVAR 21
63138: PUSH
63139: LD_INT 0
63141: ST_TO_ADDR
// InitHc_All ( ) ;
63142: CALL_OW 584
// InitVc ;
63146: CALL_OW 20
// if mastodonts then
63150: LD_VAR 0 6
63154: IFFALSE 63221
// for i = 1 to mastodonts do
63156: LD_ADDR_VAR 0 11
63160: PUSH
63161: DOUBLE
63162: LD_INT 1
63164: DEC
63165: ST_TO_ADDR
63166: LD_VAR 0 6
63170: PUSH
63171: FOR_TO
63172: IFFALSE 63219
// begin vc_chassis := 31 ;
63174: LD_ADDR_OWVAR 37
63178: PUSH
63179: LD_INT 31
63181: ST_TO_ADDR
// vc_control := control_rider ;
63182: LD_ADDR_OWVAR 38
63186: PUSH
63187: LD_INT 4
63189: ST_TO_ADDR
// animal := CreateVehicle ;
63190: LD_ADDR_VAR 0 12
63194: PUSH
63195: CALL_OW 45
63199: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63200: LD_VAR 0 12
63204: PPUSH
63205: LD_VAR 0 8
63209: PPUSH
63210: LD_INT 0
63212: PPUSH
63213: CALL 65409 0 3
// end ;
63217: GO 63171
63219: POP
63220: POP
// if horses then
63221: LD_VAR 0 5
63225: IFFALSE 63292
// for i = 1 to horses do
63227: LD_ADDR_VAR 0 11
63231: PUSH
63232: DOUBLE
63233: LD_INT 1
63235: DEC
63236: ST_TO_ADDR
63237: LD_VAR 0 5
63241: PUSH
63242: FOR_TO
63243: IFFALSE 63290
// begin hc_class := 21 ;
63245: LD_ADDR_OWVAR 28
63249: PUSH
63250: LD_INT 21
63252: ST_TO_ADDR
// hc_gallery :=  ;
63253: LD_ADDR_OWVAR 33
63257: PUSH
63258: LD_STRING 
63260: ST_TO_ADDR
// animal := CreateHuman ;
63261: LD_ADDR_VAR 0 12
63265: PUSH
63266: CALL_OW 44
63270: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63271: LD_VAR 0 12
63275: PPUSH
63276: LD_VAR 0 8
63280: PPUSH
63281: LD_INT 0
63283: PPUSH
63284: CALL 65409 0 3
// end ;
63288: GO 63242
63290: POP
63291: POP
// if birds then
63292: LD_VAR 0 1
63296: IFFALSE 63363
// for i = 1 to birds do
63298: LD_ADDR_VAR 0 11
63302: PUSH
63303: DOUBLE
63304: LD_INT 1
63306: DEC
63307: ST_TO_ADDR
63308: LD_VAR 0 1
63312: PUSH
63313: FOR_TO
63314: IFFALSE 63361
// begin hc_class = 18 ;
63316: LD_ADDR_OWVAR 28
63320: PUSH
63321: LD_INT 18
63323: ST_TO_ADDR
// hc_gallery =  ;
63324: LD_ADDR_OWVAR 33
63328: PUSH
63329: LD_STRING 
63331: ST_TO_ADDR
// animal := CreateHuman ;
63332: LD_ADDR_VAR 0 12
63336: PUSH
63337: CALL_OW 44
63341: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63342: LD_VAR 0 12
63346: PPUSH
63347: LD_VAR 0 8
63351: PPUSH
63352: LD_INT 0
63354: PPUSH
63355: CALL 65409 0 3
// end ;
63359: GO 63313
63361: POP
63362: POP
// if tigers then
63363: LD_VAR 0 2
63367: IFFALSE 63451
// for i = 1 to tigers do
63369: LD_ADDR_VAR 0 11
63373: PUSH
63374: DOUBLE
63375: LD_INT 1
63377: DEC
63378: ST_TO_ADDR
63379: LD_VAR 0 2
63383: PUSH
63384: FOR_TO
63385: IFFALSE 63449
// begin hc_class = class_tiger ;
63387: LD_ADDR_OWVAR 28
63391: PUSH
63392: LD_INT 14
63394: ST_TO_ADDR
// hc_gallery =  ;
63395: LD_ADDR_OWVAR 33
63399: PUSH
63400: LD_STRING 
63402: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63403: LD_ADDR_OWVAR 35
63407: PUSH
63408: LD_INT 7
63410: NEG
63411: PPUSH
63412: LD_INT 7
63414: PPUSH
63415: CALL_OW 12
63419: ST_TO_ADDR
// animal := CreateHuman ;
63420: LD_ADDR_VAR 0 12
63424: PUSH
63425: CALL_OW 44
63429: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63430: LD_VAR 0 12
63434: PPUSH
63435: LD_VAR 0 8
63439: PPUSH
63440: LD_INT 0
63442: PPUSH
63443: CALL 65409 0 3
// end ;
63447: GO 63384
63449: POP
63450: POP
// if apemans then
63451: LD_VAR 0 3
63455: IFFALSE 63578
// for i = 1 to apemans do
63457: LD_ADDR_VAR 0 11
63461: PUSH
63462: DOUBLE
63463: LD_INT 1
63465: DEC
63466: ST_TO_ADDR
63467: LD_VAR 0 3
63471: PUSH
63472: FOR_TO
63473: IFFALSE 63576
// begin hc_class = class_apeman ;
63475: LD_ADDR_OWVAR 28
63479: PUSH
63480: LD_INT 12
63482: ST_TO_ADDR
// hc_gallery =  ;
63483: LD_ADDR_OWVAR 33
63487: PUSH
63488: LD_STRING 
63490: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63491: LD_ADDR_OWVAR 35
63495: PUSH
63496: LD_INT 2
63498: NEG
63499: PPUSH
63500: LD_INT 2
63502: PPUSH
63503: CALL_OW 12
63507: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63508: LD_ADDR_OWVAR 31
63512: PUSH
63513: LD_INT 1
63515: PPUSH
63516: LD_INT 3
63518: PPUSH
63519: CALL_OW 12
63523: PUSH
63524: LD_INT 1
63526: PPUSH
63527: LD_INT 3
63529: PPUSH
63530: CALL_OW 12
63534: PUSH
63535: LD_INT 0
63537: PUSH
63538: LD_INT 0
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: LIST
63545: LIST
63546: ST_TO_ADDR
// animal := CreateHuman ;
63547: LD_ADDR_VAR 0 12
63551: PUSH
63552: CALL_OW 44
63556: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63557: LD_VAR 0 12
63561: PPUSH
63562: LD_VAR 0 8
63566: PPUSH
63567: LD_INT 0
63569: PPUSH
63570: CALL 65409 0 3
// end ;
63574: GO 63472
63576: POP
63577: POP
// if enchidnas then
63578: LD_VAR 0 4
63582: IFFALSE 63649
// for i = 1 to enchidnas do
63584: LD_ADDR_VAR 0 11
63588: PUSH
63589: DOUBLE
63590: LD_INT 1
63592: DEC
63593: ST_TO_ADDR
63594: LD_VAR 0 4
63598: PUSH
63599: FOR_TO
63600: IFFALSE 63647
// begin hc_class = 13 ;
63602: LD_ADDR_OWVAR 28
63606: PUSH
63607: LD_INT 13
63609: ST_TO_ADDR
// hc_gallery =  ;
63610: LD_ADDR_OWVAR 33
63614: PUSH
63615: LD_STRING 
63617: ST_TO_ADDR
// animal := CreateHuman ;
63618: LD_ADDR_VAR 0 12
63622: PUSH
63623: CALL_OW 44
63627: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63628: LD_VAR 0 12
63632: PPUSH
63633: LD_VAR 0 8
63637: PPUSH
63638: LD_INT 0
63640: PPUSH
63641: CALL 65409 0 3
// end ;
63645: GO 63599
63647: POP
63648: POP
// if fishes then
63649: LD_VAR 0 7
63653: IFFALSE 63720
// for i = 1 to fishes do
63655: LD_ADDR_VAR 0 11
63659: PUSH
63660: DOUBLE
63661: LD_INT 1
63663: DEC
63664: ST_TO_ADDR
63665: LD_VAR 0 7
63669: PUSH
63670: FOR_TO
63671: IFFALSE 63718
// begin hc_class = 20 ;
63673: LD_ADDR_OWVAR 28
63677: PUSH
63678: LD_INT 20
63680: ST_TO_ADDR
// hc_gallery =  ;
63681: LD_ADDR_OWVAR 33
63685: PUSH
63686: LD_STRING 
63688: ST_TO_ADDR
// animal := CreateHuman ;
63689: LD_ADDR_VAR 0 12
63693: PUSH
63694: CALL_OW 44
63698: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63699: LD_VAR 0 12
63703: PPUSH
63704: LD_VAR 0 9
63708: PPUSH
63709: LD_INT 0
63711: PPUSH
63712: CALL 65409 0 3
// end ;
63716: GO 63670
63718: POP
63719: POP
// end ;
63720: LD_VAR 0 10
63724: RET
// export function WantHeal ( sci , unit ) ; begin
63725: LD_INT 0
63727: PPUSH
// if GetTaskList ( sci ) > 0 then
63728: LD_VAR 0 1
63732: PPUSH
63733: CALL_OW 437
63737: PUSH
63738: LD_INT 0
63740: GREATER
63741: IFFALSE 63811
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63743: LD_VAR 0 1
63747: PPUSH
63748: CALL_OW 437
63752: PUSH
63753: LD_INT 1
63755: ARRAY
63756: PUSH
63757: LD_INT 1
63759: ARRAY
63760: PUSH
63761: LD_STRING l
63763: EQUAL
63764: PUSH
63765: LD_VAR 0 1
63769: PPUSH
63770: CALL_OW 437
63774: PUSH
63775: LD_INT 1
63777: ARRAY
63778: PUSH
63779: LD_INT 4
63781: ARRAY
63782: PUSH
63783: LD_VAR 0 2
63787: EQUAL
63788: AND
63789: IFFALSE 63801
// result := true else
63791: LD_ADDR_VAR 0 3
63795: PUSH
63796: LD_INT 1
63798: ST_TO_ADDR
63799: GO 63809
// result := false ;
63801: LD_ADDR_VAR 0 3
63805: PUSH
63806: LD_INT 0
63808: ST_TO_ADDR
// end else
63809: GO 63819
// result := false ;
63811: LD_ADDR_VAR 0 3
63815: PUSH
63816: LD_INT 0
63818: ST_TO_ADDR
// end ;
63819: LD_VAR 0 3
63823: RET
// export function HealTarget ( sci ) ; begin
63824: LD_INT 0
63826: PPUSH
// if not sci then
63827: LD_VAR 0 1
63831: NOT
63832: IFFALSE 63836
// exit ;
63834: GO 63901
// result := 0 ;
63836: LD_ADDR_VAR 0 2
63840: PUSH
63841: LD_INT 0
63843: ST_TO_ADDR
// if GetTaskList ( sci ) then
63844: LD_VAR 0 1
63848: PPUSH
63849: CALL_OW 437
63853: IFFALSE 63901
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63855: LD_VAR 0 1
63859: PPUSH
63860: CALL_OW 437
63864: PUSH
63865: LD_INT 1
63867: ARRAY
63868: PUSH
63869: LD_INT 1
63871: ARRAY
63872: PUSH
63873: LD_STRING l
63875: EQUAL
63876: IFFALSE 63901
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63878: LD_ADDR_VAR 0 2
63882: PUSH
63883: LD_VAR 0 1
63887: PPUSH
63888: CALL_OW 437
63892: PUSH
63893: LD_INT 1
63895: ARRAY
63896: PUSH
63897: LD_INT 4
63899: ARRAY
63900: ST_TO_ADDR
// end ;
63901: LD_VAR 0 2
63905: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63906: LD_INT 0
63908: PPUSH
63909: PPUSH
63910: PPUSH
63911: PPUSH
// if not base_units then
63912: LD_VAR 0 1
63916: NOT
63917: IFFALSE 63921
// exit ;
63919: GO 64008
// result := false ;
63921: LD_ADDR_VAR 0 2
63925: PUSH
63926: LD_INT 0
63928: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63929: LD_ADDR_VAR 0 5
63933: PUSH
63934: LD_VAR 0 1
63938: PPUSH
63939: LD_INT 21
63941: PUSH
63942: LD_INT 3
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: PPUSH
63949: CALL_OW 72
63953: ST_TO_ADDR
// if not tmp then
63954: LD_VAR 0 5
63958: NOT
63959: IFFALSE 63963
// exit ;
63961: GO 64008
// for i in tmp do
63963: LD_ADDR_VAR 0 3
63967: PUSH
63968: LD_VAR 0 5
63972: PUSH
63973: FOR_IN
63974: IFFALSE 64006
// begin result := EnemyInRange ( i , 22 ) ;
63976: LD_ADDR_VAR 0 2
63980: PUSH
63981: LD_VAR 0 3
63985: PPUSH
63986: LD_INT 22
63988: PPUSH
63989: CALL 62244 0 2
63993: ST_TO_ADDR
// if result then
63994: LD_VAR 0 2
63998: IFFALSE 64004
// exit ;
64000: POP
64001: POP
64002: GO 64008
// end ;
64004: GO 63973
64006: POP
64007: POP
// end ;
64008: LD_VAR 0 2
64012: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
64013: LD_INT 0
64015: PPUSH
64016: PPUSH
// if not units then
64017: LD_VAR 0 1
64021: NOT
64022: IFFALSE 64026
// exit ;
64024: GO 64096
// result := [ ] ;
64026: LD_ADDR_VAR 0 3
64030: PUSH
64031: EMPTY
64032: ST_TO_ADDR
// for i in units do
64033: LD_ADDR_VAR 0 4
64037: PUSH
64038: LD_VAR 0 1
64042: PUSH
64043: FOR_IN
64044: IFFALSE 64094
// if GetTag ( i ) = tag then
64046: LD_VAR 0 4
64050: PPUSH
64051: CALL_OW 110
64055: PUSH
64056: LD_VAR 0 2
64060: EQUAL
64061: IFFALSE 64092
// result := Insert ( result , result + 1 , i ) ;
64063: LD_ADDR_VAR 0 3
64067: PUSH
64068: LD_VAR 0 3
64072: PPUSH
64073: LD_VAR 0 3
64077: PUSH
64078: LD_INT 1
64080: PLUS
64081: PPUSH
64082: LD_VAR 0 4
64086: PPUSH
64087: CALL_OW 2
64091: ST_TO_ADDR
64092: GO 64043
64094: POP
64095: POP
// end ;
64096: LD_VAR 0 3
64100: RET
// export function IsDriver ( un ) ; begin
64101: LD_INT 0
64103: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64104: LD_ADDR_VAR 0 2
64108: PUSH
64109: LD_VAR 0 1
64113: PUSH
64114: LD_INT 55
64116: PUSH
64117: EMPTY
64118: LIST
64119: PPUSH
64120: CALL_OW 69
64124: IN
64125: ST_TO_ADDR
// end ;
64126: LD_VAR 0 2
64130: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64131: LD_INT 0
64133: PPUSH
64134: PPUSH
// list := [ ] ;
64135: LD_ADDR_VAR 0 5
64139: PUSH
64140: EMPTY
64141: ST_TO_ADDR
// case d of 0 :
64142: LD_VAR 0 3
64146: PUSH
64147: LD_INT 0
64149: DOUBLE
64150: EQUAL
64151: IFTRUE 64155
64153: GO 64288
64155: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64156: LD_ADDR_VAR 0 5
64160: PUSH
64161: LD_VAR 0 1
64165: PUSH
64166: LD_INT 4
64168: MINUS
64169: PUSH
64170: LD_VAR 0 2
64174: PUSH
64175: LD_INT 4
64177: MINUS
64178: PUSH
64179: LD_INT 2
64181: PUSH
64182: EMPTY
64183: LIST
64184: LIST
64185: LIST
64186: PUSH
64187: LD_VAR 0 1
64191: PUSH
64192: LD_INT 3
64194: MINUS
64195: PUSH
64196: LD_VAR 0 2
64200: PUSH
64201: LD_INT 1
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: LIST
64208: PUSH
64209: LD_VAR 0 1
64213: PUSH
64214: LD_INT 4
64216: PLUS
64217: PUSH
64218: LD_VAR 0 2
64222: PUSH
64223: LD_INT 4
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: LIST
64230: PUSH
64231: LD_VAR 0 1
64235: PUSH
64236: LD_INT 3
64238: PLUS
64239: PUSH
64240: LD_VAR 0 2
64244: PUSH
64245: LD_INT 3
64247: PLUS
64248: PUSH
64249: LD_INT 5
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: LIST
64256: PUSH
64257: LD_VAR 0 1
64261: PUSH
64262: LD_VAR 0 2
64266: PUSH
64267: LD_INT 4
64269: PLUS
64270: PUSH
64271: LD_INT 0
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: LIST
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: LIST
64283: LIST
64284: LIST
64285: ST_TO_ADDR
// end ; 1 :
64286: GO 64986
64288: LD_INT 1
64290: DOUBLE
64291: EQUAL
64292: IFTRUE 64296
64294: GO 64429
64296: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64297: LD_ADDR_VAR 0 5
64301: PUSH
64302: LD_VAR 0 1
64306: PUSH
64307: LD_VAR 0 2
64311: PUSH
64312: LD_INT 4
64314: MINUS
64315: PUSH
64316: LD_INT 3
64318: PUSH
64319: EMPTY
64320: LIST
64321: LIST
64322: LIST
64323: PUSH
64324: LD_VAR 0 1
64328: PUSH
64329: LD_INT 3
64331: MINUS
64332: PUSH
64333: LD_VAR 0 2
64337: PUSH
64338: LD_INT 3
64340: MINUS
64341: PUSH
64342: LD_INT 2
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: LIST
64349: PUSH
64350: LD_VAR 0 1
64354: PUSH
64355: LD_INT 4
64357: MINUS
64358: PUSH
64359: LD_VAR 0 2
64363: PUSH
64364: LD_INT 1
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: LIST
64371: PUSH
64372: LD_VAR 0 1
64376: PUSH
64377: LD_VAR 0 2
64381: PUSH
64382: LD_INT 3
64384: PLUS
64385: PUSH
64386: LD_INT 0
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: LIST
64393: PUSH
64394: LD_VAR 0 1
64398: PUSH
64399: LD_INT 4
64401: PLUS
64402: PUSH
64403: LD_VAR 0 2
64407: PUSH
64408: LD_INT 4
64410: PLUS
64411: PUSH
64412: LD_INT 5
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: LIST
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: LIST
64424: LIST
64425: LIST
64426: ST_TO_ADDR
// end ; 2 :
64427: GO 64986
64429: LD_INT 2
64431: DOUBLE
64432: EQUAL
64433: IFTRUE 64437
64435: GO 64566
64437: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64438: LD_ADDR_VAR 0 5
64442: PUSH
64443: LD_VAR 0 1
64447: PUSH
64448: LD_VAR 0 2
64452: PUSH
64453: LD_INT 3
64455: MINUS
64456: PUSH
64457: LD_INT 3
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: LIST
64464: PUSH
64465: LD_VAR 0 1
64469: PUSH
64470: LD_INT 4
64472: PLUS
64473: PUSH
64474: LD_VAR 0 2
64478: PUSH
64479: LD_INT 4
64481: PUSH
64482: EMPTY
64483: LIST
64484: LIST
64485: LIST
64486: PUSH
64487: LD_VAR 0 1
64491: PUSH
64492: LD_VAR 0 2
64496: PUSH
64497: LD_INT 4
64499: PLUS
64500: PUSH
64501: LD_INT 0
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: LIST
64508: PUSH
64509: LD_VAR 0 1
64513: PUSH
64514: LD_INT 3
64516: MINUS
64517: PUSH
64518: LD_VAR 0 2
64522: PUSH
64523: LD_INT 1
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: LIST
64530: PUSH
64531: LD_VAR 0 1
64535: PUSH
64536: LD_INT 4
64538: MINUS
64539: PUSH
64540: LD_VAR 0 2
64544: PUSH
64545: LD_INT 4
64547: MINUS
64548: PUSH
64549: LD_INT 2
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: LIST
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: LIST
64561: LIST
64562: LIST
64563: ST_TO_ADDR
// end ; 3 :
64564: GO 64986
64566: LD_INT 3
64568: DOUBLE
64569: EQUAL
64570: IFTRUE 64574
64572: GO 64707
64574: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64575: LD_ADDR_VAR 0 5
64579: PUSH
64580: LD_VAR 0 1
64584: PUSH
64585: LD_INT 3
64587: PLUS
64588: PUSH
64589: LD_VAR 0 2
64593: PUSH
64594: LD_INT 4
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: LIST
64601: PUSH
64602: LD_VAR 0 1
64606: PUSH
64607: LD_INT 4
64609: PLUS
64610: PUSH
64611: LD_VAR 0 2
64615: PUSH
64616: LD_INT 4
64618: PLUS
64619: PUSH
64620: LD_INT 5
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: LIST
64627: PUSH
64628: LD_VAR 0 1
64632: PUSH
64633: LD_INT 4
64635: MINUS
64636: PUSH
64637: LD_VAR 0 2
64641: PUSH
64642: LD_INT 1
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: LIST
64649: PUSH
64650: LD_VAR 0 1
64654: PUSH
64655: LD_VAR 0 2
64659: PUSH
64660: LD_INT 4
64662: MINUS
64663: PUSH
64664: LD_INT 3
64666: PUSH
64667: EMPTY
64668: LIST
64669: LIST
64670: LIST
64671: PUSH
64672: LD_VAR 0 1
64676: PUSH
64677: LD_INT 3
64679: MINUS
64680: PUSH
64681: LD_VAR 0 2
64685: PUSH
64686: LD_INT 3
64688: MINUS
64689: PUSH
64690: LD_INT 2
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: LIST
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: LIST
64702: LIST
64703: LIST
64704: ST_TO_ADDR
// end ; 4 :
64705: GO 64986
64707: LD_INT 4
64709: DOUBLE
64710: EQUAL
64711: IFTRUE 64715
64713: GO 64848
64715: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64716: LD_ADDR_VAR 0 5
64720: PUSH
64721: LD_VAR 0 1
64725: PUSH
64726: LD_VAR 0 2
64730: PUSH
64731: LD_INT 4
64733: PLUS
64734: PUSH
64735: LD_INT 0
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: LIST
64742: PUSH
64743: LD_VAR 0 1
64747: PUSH
64748: LD_INT 3
64750: PLUS
64751: PUSH
64752: LD_VAR 0 2
64756: PUSH
64757: LD_INT 3
64759: PLUS
64760: PUSH
64761: LD_INT 5
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: LIST
64768: PUSH
64769: LD_VAR 0 1
64773: PUSH
64774: LD_INT 4
64776: PLUS
64777: PUSH
64778: LD_VAR 0 2
64782: PUSH
64783: LD_INT 4
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: LIST
64790: PUSH
64791: LD_VAR 0 1
64795: PUSH
64796: LD_VAR 0 2
64800: PUSH
64801: LD_INT 3
64803: MINUS
64804: PUSH
64805: LD_INT 3
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: LIST
64812: PUSH
64813: LD_VAR 0 1
64817: PUSH
64818: LD_INT 4
64820: MINUS
64821: PUSH
64822: LD_VAR 0 2
64826: PUSH
64827: LD_INT 4
64829: MINUS
64830: PUSH
64831: LD_INT 2
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: LIST
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: LIST
64843: LIST
64844: LIST
64845: ST_TO_ADDR
// end ; 5 :
64846: GO 64986
64848: LD_INT 5
64850: DOUBLE
64851: EQUAL
64852: IFTRUE 64856
64854: GO 64985
64856: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64857: LD_ADDR_VAR 0 5
64861: PUSH
64862: LD_VAR 0 1
64866: PUSH
64867: LD_INT 4
64869: MINUS
64870: PUSH
64871: LD_VAR 0 2
64875: PUSH
64876: LD_INT 1
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: LIST
64883: PUSH
64884: LD_VAR 0 1
64888: PUSH
64889: LD_VAR 0 2
64893: PUSH
64894: LD_INT 4
64896: MINUS
64897: PUSH
64898: LD_INT 3
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: LIST
64905: PUSH
64906: LD_VAR 0 1
64910: PUSH
64911: LD_INT 4
64913: PLUS
64914: PUSH
64915: LD_VAR 0 2
64919: PUSH
64920: LD_INT 4
64922: PLUS
64923: PUSH
64924: LD_INT 5
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: LIST
64931: PUSH
64932: LD_VAR 0 1
64936: PUSH
64937: LD_INT 3
64939: PLUS
64940: PUSH
64941: LD_VAR 0 2
64945: PUSH
64946: LD_INT 4
64948: PUSH
64949: EMPTY
64950: LIST
64951: LIST
64952: LIST
64953: PUSH
64954: LD_VAR 0 1
64958: PUSH
64959: LD_VAR 0 2
64963: PUSH
64964: LD_INT 3
64966: PLUS
64967: PUSH
64968: LD_INT 0
64970: PUSH
64971: EMPTY
64972: LIST
64973: LIST
64974: LIST
64975: PUSH
64976: EMPTY
64977: LIST
64978: LIST
64979: LIST
64980: LIST
64981: LIST
64982: ST_TO_ADDR
// end ; end ;
64983: GO 64986
64985: POP
// result := list ;
64986: LD_ADDR_VAR 0 4
64990: PUSH
64991: LD_VAR 0 5
64995: ST_TO_ADDR
// end ;
64996: LD_VAR 0 4
65000: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65001: LD_INT 0
65003: PPUSH
65004: PPUSH
65005: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65006: LD_VAR 0 1
65010: NOT
65011: PUSH
65012: LD_VAR 0 2
65016: PUSH
65017: LD_INT 1
65019: PUSH
65020: LD_INT 2
65022: PUSH
65023: LD_INT 3
65025: PUSH
65026: LD_INT 4
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: LIST
65033: LIST
65034: IN
65035: NOT
65036: OR
65037: IFFALSE 65041
// exit ;
65039: GO 65133
// tmp := [ ] ;
65041: LD_ADDR_VAR 0 5
65045: PUSH
65046: EMPTY
65047: ST_TO_ADDR
// for i in units do
65048: LD_ADDR_VAR 0 4
65052: PUSH
65053: LD_VAR 0 1
65057: PUSH
65058: FOR_IN
65059: IFFALSE 65102
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
65061: LD_ADDR_VAR 0 5
65065: PUSH
65066: LD_VAR 0 5
65070: PPUSH
65071: LD_VAR 0 5
65075: PUSH
65076: LD_INT 1
65078: PLUS
65079: PPUSH
65080: LD_VAR 0 4
65084: PPUSH
65085: LD_VAR 0 2
65089: PPUSH
65090: CALL_OW 259
65094: PPUSH
65095: CALL_OW 2
65099: ST_TO_ADDR
65100: GO 65058
65102: POP
65103: POP
// if not tmp then
65104: LD_VAR 0 5
65108: NOT
65109: IFFALSE 65113
// exit ;
65111: GO 65133
// result := SortListByListDesc ( units , tmp ) ;
65113: LD_ADDR_VAR 0 3
65117: PUSH
65118: LD_VAR 0 1
65122: PPUSH
65123: LD_VAR 0 5
65127: PPUSH
65128: CALL_OW 77
65132: ST_TO_ADDR
// end ;
65133: LD_VAR 0 3
65137: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65138: LD_INT 0
65140: PPUSH
65141: PPUSH
65142: PPUSH
// result := false ;
65143: LD_ADDR_VAR 0 3
65147: PUSH
65148: LD_INT 0
65150: ST_TO_ADDR
// x := GetX ( building ) ;
65151: LD_ADDR_VAR 0 4
65155: PUSH
65156: LD_VAR 0 2
65160: PPUSH
65161: CALL_OW 250
65165: ST_TO_ADDR
// y := GetY ( building ) ;
65166: LD_ADDR_VAR 0 5
65170: PUSH
65171: LD_VAR 0 2
65175: PPUSH
65176: CALL_OW 251
65180: ST_TO_ADDR
// if not building or not x or not y then
65181: LD_VAR 0 2
65185: NOT
65186: PUSH
65187: LD_VAR 0 4
65191: NOT
65192: OR
65193: PUSH
65194: LD_VAR 0 5
65198: NOT
65199: OR
65200: IFFALSE 65204
// exit ;
65202: GO 65296
// if GetTaskList ( unit ) then
65204: LD_VAR 0 1
65208: PPUSH
65209: CALL_OW 437
65213: IFFALSE 65296
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65215: LD_STRING e
65217: PUSH
65218: LD_VAR 0 1
65222: PPUSH
65223: CALL_OW 437
65227: PUSH
65228: LD_INT 1
65230: ARRAY
65231: PUSH
65232: LD_INT 1
65234: ARRAY
65235: EQUAL
65236: PUSH
65237: LD_VAR 0 4
65241: PUSH
65242: LD_VAR 0 1
65246: PPUSH
65247: CALL_OW 437
65251: PUSH
65252: LD_INT 1
65254: ARRAY
65255: PUSH
65256: LD_INT 2
65258: ARRAY
65259: EQUAL
65260: AND
65261: PUSH
65262: LD_VAR 0 5
65266: PUSH
65267: LD_VAR 0 1
65271: PPUSH
65272: CALL_OW 437
65276: PUSH
65277: LD_INT 1
65279: ARRAY
65280: PUSH
65281: LD_INT 3
65283: ARRAY
65284: EQUAL
65285: AND
65286: IFFALSE 65296
// result := true end ;
65288: LD_ADDR_VAR 0 3
65292: PUSH
65293: LD_INT 1
65295: ST_TO_ADDR
// end ;
65296: LD_VAR 0 3
65300: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65301: LD_INT 0
65303: PPUSH
// result := false ;
65304: LD_ADDR_VAR 0 4
65308: PUSH
65309: LD_INT 0
65311: ST_TO_ADDR
// if GetTaskList ( unit ) then
65312: LD_VAR 0 1
65316: PPUSH
65317: CALL_OW 437
65321: IFFALSE 65404
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65323: LD_STRING M
65325: PUSH
65326: LD_VAR 0 1
65330: PPUSH
65331: CALL_OW 437
65335: PUSH
65336: LD_INT 1
65338: ARRAY
65339: PUSH
65340: LD_INT 1
65342: ARRAY
65343: EQUAL
65344: PUSH
65345: LD_VAR 0 2
65349: PUSH
65350: LD_VAR 0 1
65354: PPUSH
65355: CALL_OW 437
65359: PUSH
65360: LD_INT 1
65362: ARRAY
65363: PUSH
65364: LD_INT 2
65366: ARRAY
65367: EQUAL
65368: AND
65369: PUSH
65370: LD_VAR 0 3
65374: PUSH
65375: LD_VAR 0 1
65379: PPUSH
65380: CALL_OW 437
65384: PUSH
65385: LD_INT 1
65387: ARRAY
65388: PUSH
65389: LD_INT 3
65391: ARRAY
65392: EQUAL
65393: AND
65394: IFFALSE 65404
// result := true ;
65396: LD_ADDR_VAR 0 4
65400: PUSH
65401: LD_INT 1
65403: ST_TO_ADDR
// end ; end ;
65404: LD_VAR 0 4
65408: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65409: LD_INT 0
65411: PPUSH
65412: PPUSH
65413: PPUSH
65414: PPUSH
// if not unit or not area then
65415: LD_VAR 0 1
65419: NOT
65420: PUSH
65421: LD_VAR 0 2
65425: NOT
65426: OR
65427: IFFALSE 65431
// exit ;
65429: GO 65595
// tmp := AreaToList ( area , i ) ;
65431: LD_ADDR_VAR 0 6
65435: PUSH
65436: LD_VAR 0 2
65440: PPUSH
65441: LD_VAR 0 5
65445: PPUSH
65446: CALL_OW 517
65450: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65451: LD_ADDR_VAR 0 5
65455: PUSH
65456: DOUBLE
65457: LD_INT 1
65459: DEC
65460: ST_TO_ADDR
65461: LD_VAR 0 6
65465: PUSH
65466: LD_INT 1
65468: ARRAY
65469: PUSH
65470: FOR_TO
65471: IFFALSE 65593
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65473: LD_ADDR_VAR 0 7
65477: PUSH
65478: LD_VAR 0 6
65482: PUSH
65483: LD_INT 1
65485: ARRAY
65486: PUSH
65487: LD_VAR 0 5
65491: ARRAY
65492: PUSH
65493: LD_VAR 0 6
65497: PUSH
65498: LD_INT 2
65500: ARRAY
65501: PUSH
65502: LD_VAR 0 5
65506: ARRAY
65507: PUSH
65508: EMPTY
65509: LIST
65510: LIST
65511: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
65512: LD_VAR 0 7
65516: PUSH
65517: LD_INT 1
65519: ARRAY
65520: PPUSH
65521: LD_VAR 0 7
65525: PUSH
65526: LD_INT 2
65528: ARRAY
65529: PPUSH
65530: CALL_OW 428
65534: PUSH
65535: LD_INT 0
65537: EQUAL
65538: IFFALSE 65591
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65540: LD_VAR 0 1
65544: PPUSH
65545: LD_VAR 0 7
65549: PUSH
65550: LD_INT 1
65552: ARRAY
65553: PPUSH
65554: LD_VAR 0 7
65558: PUSH
65559: LD_INT 2
65561: ARRAY
65562: PPUSH
65563: LD_VAR 0 3
65567: PPUSH
65568: CALL_OW 48
// result := IsPlaced ( unit ) ;
65572: LD_ADDR_VAR 0 4
65576: PUSH
65577: LD_VAR 0 1
65581: PPUSH
65582: CALL_OW 305
65586: ST_TO_ADDR
// exit ;
65587: POP
65588: POP
65589: GO 65595
// end ; end ;
65591: GO 65470
65593: POP
65594: POP
// end ;
65595: LD_VAR 0 4
65599: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65600: LD_INT 0
65602: PPUSH
65603: PPUSH
65604: PPUSH
// if not side or side > 8 then
65605: LD_VAR 0 1
65609: NOT
65610: PUSH
65611: LD_VAR 0 1
65615: PUSH
65616: LD_INT 8
65618: GREATER
65619: OR
65620: IFFALSE 65624
// exit ;
65622: GO 65811
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65624: LD_ADDR_VAR 0 4
65628: PUSH
65629: LD_INT 22
65631: PUSH
65632: LD_VAR 0 1
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: PUSH
65641: LD_INT 21
65643: PUSH
65644: LD_INT 3
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: PPUSH
65655: CALL_OW 69
65659: ST_TO_ADDR
// if not tmp then
65660: LD_VAR 0 4
65664: NOT
65665: IFFALSE 65669
// exit ;
65667: GO 65811
// enable_addtolog := true ;
65669: LD_ADDR_OWVAR 81
65673: PUSH
65674: LD_INT 1
65676: ST_TO_ADDR
// AddToLog ( [ ) ;
65677: LD_STRING [
65679: PPUSH
65680: CALL_OW 561
// for i in tmp do
65684: LD_ADDR_VAR 0 3
65688: PUSH
65689: LD_VAR 0 4
65693: PUSH
65694: FOR_IN
65695: IFFALSE 65802
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65697: LD_STRING [
65699: PUSH
65700: LD_VAR 0 3
65704: PPUSH
65705: CALL_OW 266
65709: STR
65710: PUSH
65711: LD_STRING , 
65713: STR
65714: PUSH
65715: LD_VAR 0 3
65719: PPUSH
65720: CALL_OW 250
65724: STR
65725: PUSH
65726: LD_STRING , 
65728: STR
65729: PUSH
65730: LD_VAR 0 3
65734: PPUSH
65735: CALL_OW 251
65739: STR
65740: PUSH
65741: LD_STRING , 
65743: STR
65744: PUSH
65745: LD_VAR 0 3
65749: PPUSH
65750: CALL_OW 254
65754: STR
65755: PUSH
65756: LD_STRING , 
65758: STR
65759: PUSH
65760: LD_VAR 0 3
65764: PPUSH
65765: LD_INT 1
65767: PPUSH
65768: CALL_OW 268
65772: STR
65773: PUSH
65774: LD_STRING , 
65776: STR
65777: PUSH
65778: LD_VAR 0 3
65782: PPUSH
65783: LD_INT 2
65785: PPUSH
65786: CALL_OW 268
65790: STR
65791: PUSH
65792: LD_STRING ],
65794: STR
65795: PPUSH
65796: CALL_OW 561
// end ;
65800: GO 65694
65802: POP
65803: POP
// AddToLog ( ]; ) ;
65804: LD_STRING ];
65806: PPUSH
65807: CALL_OW 561
// end ;
65811: LD_VAR 0 2
65815: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65816: LD_INT 0
65818: PPUSH
65819: PPUSH
65820: PPUSH
65821: PPUSH
65822: PPUSH
// if not area or not rate or not max then
65823: LD_VAR 0 1
65827: NOT
65828: PUSH
65829: LD_VAR 0 2
65833: NOT
65834: OR
65835: PUSH
65836: LD_VAR 0 4
65840: NOT
65841: OR
65842: IFFALSE 65846
// exit ;
65844: GO 66038
// while 1 do
65846: LD_INT 1
65848: IFFALSE 66038
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65850: LD_ADDR_VAR 0 9
65854: PUSH
65855: LD_VAR 0 1
65859: PPUSH
65860: LD_INT 1
65862: PPUSH
65863: CALL_OW 287
65867: PUSH
65868: LD_INT 10
65870: MUL
65871: ST_TO_ADDR
// r := rate / 10 ;
65872: LD_ADDR_VAR 0 7
65876: PUSH
65877: LD_VAR 0 2
65881: PUSH
65882: LD_INT 10
65884: DIVREAL
65885: ST_TO_ADDR
// time := 1 1$00 ;
65886: LD_ADDR_VAR 0 8
65890: PUSH
65891: LD_INT 2100
65893: ST_TO_ADDR
// if amount < min then
65894: LD_VAR 0 9
65898: PUSH
65899: LD_VAR 0 3
65903: LESS
65904: IFFALSE 65922
// r := r * 2 else
65906: LD_ADDR_VAR 0 7
65910: PUSH
65911: LD_VAR 0 7
65915: PUSH
65916: LD_INT 2
65918: MUL
65919: ST_TO_ADDR
65920: GO 65948
// if amount > max then
65922: LD_VAR 0 9
65926: PUSH
65927: LD_VAR 0 4
65931: GREATER
65932: IFFALSE 65948
// r := r / 2 ;
65934: LD_ADDR_VAR 0 7
65938: PUSH
65939: LD_VAR 0 7
65943: PUSH
65944: LD_INT 2
65946: DIVREAL
65947: ST_TO_ADDR
// time := time / r ;
65948: LD_ADDR_VAR 0 8
65952: PUSH
65953: LD_VAR 0 8
65957: PUSH
65958: LD_VAR 0 7
65962: DIVREAL
65963: ST_TO_ADDR
// if time < 0 then
65964: LD_VAR 0 8
65968: PUSH
65969: LD_INT 0
65971: LESS
65972: IFFALSE 65989
// time := time * - 1 ;
65974: LD_ADDR_VAR 0 8
65978: PUSH
65979: LD_VAR 0 8
65983: PUSH
65984: LD_INT 1
65986: NEG
65987: MUL
65988: ST_TO_ADDR
// wait ( time ) ;
65989: LD_VAR 0 8
65993: PPUSH
65994: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
65998: LD_INT 35
66000: PPUSH
66001: LD_INT 875
66003: PPUSH
66004: CALL_OW 12
66008: PPUSH
66009: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66013: LD_INT 1
66015: PPUSH
66016: LD_INT 5
66018: PPUSH
66019: CALL_OW 12
66023: PPUSH
66024: LD_VAR 0 1
66028: PPUSH
66029: LD_INT 1
66031: PPUSH
66032: CALL_OW 55
// end ;
66036: GO 65846
// end ;
66038: LD_VAR 0 5
66042: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66043: LD_INT 0
66045: PPUSH
66046: PPUSH
66047: PPUSH
66048: PPUSH
66049: PPUSH
66050: PPUSH
66051: PPUSH
66052: PPUSH
// if not turrets or not factories then
66053: LD_VAR 0 1
66057: NOT
66058: PUSH
66059: LD_VAR 0 2
66063: NOT
66064: OR
66065: IFFALSE 66069
// exit ;
66067: GO 66376
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66069: LD_ADDR_VAR 0 10
66073: PUSH
66074: LD_INT 5
66076: PUSH
66077: LD_INT 6
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: PUSH
66084: LD_INT 2
66086: PUSH
66087: LD_INT 4
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: PUSH
66094: LD_INT 3
66096: PUSH
66097: LD_INT 5
66099: PUSH
66100: EMPTY
66101: LIST
66102: LIST
66103: PUSH
66104: EMPTY
66105: LIST
66106: LIST
66107: LIST
66108: PUSH
66109: LD_INT 24
66111: PUSH
66112: LD_INT 25
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: PUSH
66119: LD_INT 23
66121: PUSH
66122: LD_INT 27
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: PUSH
66133: LD_INT 42
66135: PUSH
66136: LD_INT 43
66138: PUSH
66139: EMPTY
66140: LIST
66141: LIST
66142: PUSH
66143: LD_INT 44
66145: PUSH
66146: LD_INT 46
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: PUSH
66153: LD_INT 45
66155: PUSH
66156: LD_INT 47
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: PUSH
66163: EMPTY
66164: LIST
66165: LIST
66166: LIST
66167: PUSH
66168: EMPTY
66169: LIST
66170: LIST
66171: LIST
66172: ST_TO_ADDR
// result := [ ] ;
66173: LD_ADDR_VAR 0 3
66177: PUSH
66178: EMPTY
66179: ST_TO_ADDR
// for i in turrets do
66180: LD_ADDR_VAR 0 4
66184: PUSH
66185: LD_VAR 0 1
66189: PUSH
66190: FOR_IN
66191: IFFALSE 66374
// begin nat := GetNation ( i ) ;
66193: LD_ADDR_VAR 0 7
66197: PUSH
66198: LD_VAR 0 4
66202: PPUSH
66203: CALL_OW 248
66207: ST_TO_ADDR
// weapon := 0 ;
66208: LD_ADDR_VAR 0 8
66212: PUSH
66213: LD_INT 0
66215: ST_TO_ADDR
// if not nat then
66216: LD_VAR 0 7
66220: NOT
66221: IFFALSE 66225
// continue ;
66223: GO 66190
// for j in list [ nat ] do
66225: LD_ADDR_VAR 0 5
66229: PUSH
66230: LD_VAR 0 10
66234: PUSH
66235: LD_VAR 0 7
66239: ARRAY
66240: PUSH
66241: FOR_IN
66242: IFFALSE 66283
// if GetBWeapon ( i ) = j [ 1 ] then
66244: LD_VAR 0 4
66248: PPUSH
66249: CALL_OW 269
66253: PUSH
66254: LD_VAR 0 5
66258: PUSH
66259: LD_INT 1
66261: ARRAY
66262: EQUAL
66263: IFFALSE 66281
// begin weapon := j [ 2 ] ;
66265: LD_ADDR_VAR 0 8
66269: PUSH
66270: LD_VAR 0 5
66274: PUSH
66275: LD_INT 2
66277: ARRAY
66278: ST_TO_ADDR
// break ;
66279: GO 66283
// end ;
66281: GO 66241
66283: POP
66284: POP
// if not weapon then
66285: LD_VAR 0 8
66289: NOT
66290: IFFALSE 66294
// continue ;
66292: GO 66190
// for k in factories do
66294: LD_ADDR_VAR 0 6
66298: PUSH
66299: LD_VAR 0 2
66303: PUSH
66304: FOR_IN
66305: IFFALSE 66370
// begin weapons := AvailableWeaponList ( k ) ;
66307: LD_ADDR_VAR 0 9
66311: PUSH
66312: LD_VAR 0 6
66316: PPUSH
66317: CALL_OW 478
66321: ST_TO_ADDR
// if not weapons then
66322: LD_VAR 0 9
66326: NOT
66327: IFFALSE 66331
// continue ;
66329: GO 66304
// if weapon in weapons then
66331: LD_VAR 0 8
66335: PUSH
66336: LD_VAR 0 9
66340: IN
66341: IFFALSE 66368
// begin result := [ i , weapon ] ;
66343: LD_ADDR_VAR 0 3
66347: PUSH
66348: LD_VAR 0 4
66352: PUSH
66353: LD_VAR 0 8
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: ST_TO_ADDR
// exit ;
66362: POP
66363: POP
66364: POP
66365: POP
66366: GO 66376
// end ; end ;
66368: GO 66304
66370: POP
66371: POP
// end ;
66372: GO 66190
66374: POP
66375: POP
// end ;
66376: LD_VAR 0 3
66380: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66381: LD_INT 0
66383: PPUSH
// if not side or side > 8 then
66384: LD_VAR 0 3
66388: NOT
66389: PUSH
66390: LD_VAR 0 3
66394: PUSH
66395: LD_INT 8
66397: GREATER
66398: OR
66399: IFFALSE 66403
// exit ;
66401: GO 66462
// if not range then
66403: LD_VAR 0 4
66407: NOT
66408: IFFALSE 66419
// range := - 12 ;
66410: LD_ADDR_VAR 0 4
66414: PUSH
66415: LD_INT 12
66417: NEG
66418: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66419: LD_VAR 0 1
66423: PPUSH
66424: LD_VAR 0 2
66428: PPUSH
66429: LD_VAR 0 3
66433: PPUSH
66434: LD_VAR 0 4
66438: PPUSH
66439: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66443: LD_VAR 0 1
66447: PPUSH
66448: LD_VAR 0 2
66452: PPUSH
66453: LD_VAR 0 3
66457: PPUSH
66458: CALL_OW 331
// end ;
66462: LD_VAR 0 5
66466: RET
// export function Video ( mode ) ; begin
66467: LD_INT 0
66469: PPUSH
// ingame_video = mode ;
66470: LD_ADDR_OWVAR 52
66474: PUSH
66475: LD_VAR 0 1
66479: ST_TO_ADDR
// interface_hidden = mode ;
66480: LD_ADDR_OWVAR 54
66484: PUSH
66485: LD_VAR 0 1
66489: ST_TO_ADDR
// end ;
66490: LD_VAR 0 2
66494: RET
// export function Join ( array , element ) ; begin
66495: LD_INT 0
66497: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66498: LD_ADDR_VAR 0 3
66502: PUSH
66503: LD_VAR 0 1
66507: PPUSH
66508: LD_VAR 0 1
66512: PUSH
66513: LD_INT 1
66515: PLUS
66516: PPUSH
66517: LD_VAR 0 2
66521: PPUSH
66522: CALL_OW 1
66526: ST_TO_ADDR
// end ;
66527: LD_VAR 0 3
66531: RET
// export function JoinUnion ( array , element ) ; begin
66532: LD_INT 0
66534: PPUSH
// result := array union element ;
66535: LD_ADDR_VAR 0 3
66539: PUSH
66540: LD_VAR 0 1
66544: PUSH
66545: LD_VAR 0 2
66549: UNION
66550: ST_TO_ADDR
// end ;
66551: LD_VAR 0 3
66555: RET
// export function GetBehemoths ( side ) ; begin
66556: LD_INT 0
66558: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
66559: LD_ADDR_VAR 0 2
66563: PUSH
66564: LD_INT 22
66566: PUSH
66567: LD_VAR 0 1
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: PUSH
66576: LD_INT 31
66578: PUSH
66579: LD_INT 25
66581: PUSH
66582: EMPTY
66583: LIST
66584: LIST
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: PPUSH
66590: CALL_OW 69
66594: ST_TO_ADDR
// end ;
66595: LD_VAR 0 2
66599: RET
// export function Shuffle ( array ) ; var i , index ; begin
66600: LD_INT 0
66602: PPUSH
66603: PPUSH
66604: PPUSH
// result := [ ] ;
66605: LD_ADDR_VAR 0 2
66609: PUSH
66610: EMPTY
66611: ST_TO_ADDR
// if not array then
66612: LD_VAR 0 1
66616: NOT
66617: IFFALSE 66621
// exit ;
66619: GO 66720
// Randomize ;
66621: CALL_OW 10
// for i = array downto 1 do
66625: LD_ADDR_VAR 0 3
66629: PUSH
66630: DOUBLE
66631: LD_VAR 0 1
66635: INC
66636: ST_TO_ADDR
66637: LD_INT 1
66639: PUSH
66640: FOR_DOWNTO
66641: IFFALSE 66718
// begin index := rand ( 1 , array ) ;
66643: LD_ADDR_VAR 0 4
66647: PUSH
66648: LD_INT 1
66650: PPUSH
66651: LD_VAR 0 1
66655: PPUSH
66656: CALL_OW 12
66660: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66661: LD_ADDR_VAR 0 2
66665: PUSH
66666: LD_VAR 0 2
66670: PPUSH
66671: LD_VAR 0 2
66675: PUSH
66676: LD_INT 1
66678: PLUS
66679: PPUSH
66680: LD_VAR 0 1
66684: PUSH
66685: LD_VAR 0 4
66689: ARRAY
66690: PPUSH
66691: CALL_OW 2
66695: ST_TO_ADDR
// array := Delete ( array , index ) ;
66696: LD_ADDR_VAR 0 1
66700: PUSH
66701: LD_VAR 0 1
66705: PPUSH
66706: LD_VAR 0 4
66710: PPUSH
66711: CALL_OW 3
66715: ST_TO_ADDR
// end ;
66716: GO 66640
66718: POP
66719: POP
// end ;
66720: LD_VAR 0 2
66724: RET
// export function GetBaseMaterials ( base ) ; begin
66725: LD_INT 0
66727: PPUSH
// result := [ 0 , 0 , 0 ] ;
66728: LD_ADDR_VAR 0 2
66732: PUSH
66733: LD_INT 0
66735: PUSH
66736: LD_INT 0
66738: PUSH
66739: LD_INT 0
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: LIST
66746: ST_TO_ADDR
// if not base then
66747: LD_VAR 0 1
66751: NOT
66752: IFFALSE 66756
// exit ;
66754: GO 66805
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66756: LD_ADDR_VAR 0 2
66760: PUSH
66761: LD_VAR 0 1
66765: PPUSH
66766: LD_INT 1
66768: PPUSH
66769: CALL_OW 275
66773: PUSH
66774: LD_VAR 0 1
66778: PPUSH
66779: LD_INT 2
66781: PPUSH
66782: CALL_OW 275
66786: PUSH
66787: LD_VAR 0 1
66791: PPUSH
66792: LD_INT 3
66794: PPUSH
66795: CALL_OW 275
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: LIST
66804: ST_TO_ADDR
// end ;
66805: LD_VAR 0 2
66809: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66810: LD_INT 0
66812: PPUSH
66813: PPUSH
// result := array ;
66814: LD_ADDR_VAR 0 3
66818: PUSH
66819: LD_VAR 0 1
66823: ST_TO_ADDR
// if size > 0 then
66824: LD_VAR 0 2
66828: PUSH
66829: LD_INT 0
66831: GREATER
66832: IFFALSE 66878
// for i := array downto size do
66834: LD_ADDR_VAR 0 4
66838: PUSH
66839: DOUBLE
66840: LD_VAR 0 1
66844: INC
66845: ST_TO_ADDR
66846: LD_VAR 0 2
66850: PUSH
66851: FOR_DOWNTO
66852: IFFALSE 66876
// result := Delete ( result , result ) ;
66854: LD_ADDR_VAR 0 3
66858: PUSH
66859: LD_VAR 0 3
66863: PPUSH
66864: LD_VAR 0 3
66868: PPUSH
66869: CALL_OW 3
66873: ST_TO_ADDR
66874: GO 66851
66876: POP
66877: POP
// end ;
66878: LD_VAR 0 3
66882: RET
// export function ComExit ( unit ) ; var tmp ; begin
66883: LD_INT 0
66885: PPUSH
66886: PPUSH
// if not IsInUnit ( unit ) then
66887: LD_VAR 0 1
66891: PPUSH
66892: CALL_OW 310
66896: NOT
66897: IFFALSE 66901
// exit ;
66899: GO 66961
// tmp := IsInUnit ( unit ) ;
66901: LD_ADDR_VAR 0 3
66905: PUSH
66906: LD_VAR 0 1
66910: PPUSH
66911: CALL_OW 310
66915: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66916: LD_VAR 0 3
66920: PPUSH
66921: CALL_OW 247
66925: PUSH
66926: LD_INT 2
66928: EQUAL
66929: IFFALSE 66942
// ComExitVehicle ( unit ) else
66931: LD_VAR 0 1
66935: PPUSH
66936: CALL_OW 121
66940: GO 66951
// ComExitBuilding ( unit ) ;
66942: LD_VAR 0 1
66946: PPUSH
66947: CALL_OW 122
// result := tmp ;
66951: LD_ADDR_VAR 0 2
66955: PUSH
66956: LD_VAR 0 3
66960: ST_TO_ADDR
// end ;
66961: LD_VAR 0 2
66965: RET
// export function ComExitAll ( units ) ; var i ; begin
66966: LD_INT 0
66968: PPUSH
66969: PPUSH
// if not units then
66970: LD_VAR 0 1
66974: NOT
66975: IFFALSE 66979
// exit ;
66977: GO 67005
// for i in units do
66979: LD_ADDR_VAR 0 3
66983: PUSH
66984: LD_VAR 0 1
66988: PUSH
66989: FOR_IN
66990: IFFALSE 67003
// ComExit ( i ) ;
66992: LD_VAR 0 3
66996: PPUSH
66997: CALL 66883 0 1
67001: GO 66989
67003: POP
67004: POP
// end ;
67005: LD_VAR 0 2
67009: RET
// export function ResetHc ; begin
67010: LD_INT 0
67012: PPUSH
// InitHc ;
67013: CALL_OW 19
// hc_importance := 0 ;
67017: LD_ADDR_OWVAR 32
67021: PUSH
67022: LD_INT 0
67024: ST_TO_ADDR
// end ;
67025: LD_VAR 0 1
67029: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67030: LD_INT 0
67032: PPUSH
67033: PPUSH
67034: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67035: LD_ADDR_VAR 0 6
67039: PUSH
67040: LD_VAR 0 1
67044: PUSH
67045: LD_VAR 0 3
67049: PLUS
67050: PUSH
67051: LD_INT 2
67053: DIV
67054: ST_TO_ADDR
// if _x < 0 then
67055: LD_VAR 0 6
67059: PUSH
67060: LD_INT 0
67062: LESS
67063: IFFALSE 67080
// _x := _x * - 1 ;
67065: LD_ADDR_VAR 0 6
67069: PUSH
67070: LD_VAR 0 6
67074: PUSH
67075: LD_INT 1
67077: NEG
67078: MUL
67079: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67080: LD_ADDR_VAR 0 7
67084: PUSH
67085: LD_VAR 0 2
67089: PUSH
67090: LD_VAR 0 4
67094: PLUS
67095: PUSH
67096: LD_INT 2
67098: DIV
67099: ST_TO_ADDR
// if _y < 0 then
67100: LD_VAR 0 7
67104: PUSH
67105: LD_INT 0
67107: LESS
67108: IFFALSE 67125
// _y := _y * - 1 ;
67110: LD_ADDR_VAR 0 7
67114: PUSH
67115: LD_VAR 0 7
67119: PUSH
67120: LD_INT 1
67122: NEG
67123: MUL
67124: ST_TO_ADDR
// result := [ _x , _y ] ;
67125: LD_ADDR_VAR 0 5
67129: PUSH
67130: LD_VAR 0 6
67134: PUSH
67135: LD_VAR 0 7
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: ST_TO_ADDR
// end ;
67144: LD_VAR 0 5
67148: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67149: LD_INT 0
67151: PPUSH
67152: PPUSH
67153: PPUSH
67154: PPUSH
// task := GetTaskList ( unit ) ;
67155: LD_ADDR_VAR 0 7
67159: PUSH
67160: LD_VAR 0 1
67164: PPUSH
67165: CALL_OW 437
67169: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67170: LD_VAR 0 7
67174: NOT
67175: PUSH
67176: LD_VAR 0 1
67180: PPUSH
67181: LD_VAR 0 2
67185: PPUSH
67186: CALL_OW 308
67190: NOT
67191: AND
67192: IFFALSE 67196
// exit ;
67194: GO 67314
// if IsInArea ( unit , area ) then
67196: LD_VAR 0 1
67200: PPUSH
67201: LD_VAR 0 2
67205: PPUSH
67206: CALL_OW 308
67210: IFFALSE 67228
// begin ComMoveToArea ( unit , goAway ) ;
67212: LD_VAR 0 1
67216: PPUSH
67217: LD_VAR 0 3
67221: PPUSH
67222: CALL_OW 113
// exit ;
67226: GO 67314
// end ; if task [ 1 ] [ 1 ] <> M then
67228: LD_VAR 0 7
67232: PUSH
67233: LD_INT 1
67235: ARRAY
67236: PUSH
67237: LD_INT 1
67239: ARRAY
67240: PUSH
67241: LD_STRING M
67243: NONEQUAL
67244: IFFALSE 67248
// exit ;
67246: GO 67314
// x := task [ 1 ] [ 2 ] ;
67248: LD_ADDR_VAR 0 5
67252: PUSH
67253: LD_VAR 0 7
67257: PUSH
67258: LD_INT 1
67260: ARRAY
67261: PUSH
67262: LD_INT 2
67264: ARRAY
67265: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67266: LD_ADDR_VAR 0 6
67270: PUSH
67271: LD_VAR 0 7
67275: PUSH
67276: LD_INT 1
67278: ARRAY
67279: PUSH
67280: LD_INT 3
67282: ARRAY
67283: ST_TO_ADDR
// if InArea ( x , y , area ) then
67284: LD_VAR 0 5
67288: PPUSH
67289: LD_VAR 0 6
67293: PPUSH
67294: LD_VAR 0 2
67298: PPUSH
67299: CALL_OW 309
67303: IFFALSE 67314
// ComStop ( unit ) ;
67305: LD_VAR 0 1
67309: PPUSH
67310: CALL_OW 141
// end ;
67314: LD_VAR 0 4
67318: RET
// export function Abs ( value ) ; begin
67319: LD_INT 0
67321: PPUSH
// result := value ;
67322: LD_ADDR_VAR 0 2
67326: PUSH
67327: LD_VAR 0 1
67331: ST_TO_ADDR
// if value < 0 then
67332: LD_VAR 0 1
67336: PUSH
67337: LD_INT 0
67339: LESS
67340: IFFALSE 67357
// result := value * - 1 ;
67342: LD_ADDR_VAR 0 2
67346: PUSH
67347: LD_VAR 0 1
67351: PUSH
67352: LD_INT 1
67354: NEG
67355: MUL
67356: ST_TO_ADDR
// end ;
67357: LD_VAR 0 2
67361: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67362: LD_INT 0
67364: PPUSH
67365: PPUSH
67366: PPUSH
67367: PPUSH
67368: PPUSH
67369: PPUSH
67370: PPUSH
67371: PPUSH
// if not unit or not building then
67372: LD_VAR 0 1
67376: NOT
67377: PUSH
67378: LD_VAR 0 2
67382: NOT
67383: OR
67384: IFFALSE 67388
// exit ;
67386: GO 67614
// x := GetX ( building ) ;
67388: LD_ADDR_VAR 0 4
67392: PUSH
67393: LD_VAR 0 2
67397: PPUSH
67398: CALL_OW 250
67402: ST_TO_ADDR
// y := GetY ( building ) ;
67403: LD_ADDR_VAR 0 6
67407: PUSH
67408: LD_VAR 0 2
67412: PPUSH
67413: CALL_OW 251
67417: ST_TO_ADDR
// d := GetDir ( building ) ;
67418: LD_ADDR_VAR 0 8
67422: PUSH
67423: LD_VAR 0 2
67427: PPUSH
67428: CALL_OW 254
67432: ST_TO_ADDR
// r := 4 ;
67433: LD_ADDR_VAR 0 9
67437: PUSH
67438: LD_INT 4
67440: ST_TO_ADDR
// for i := 1 to 5 do
67441: LD_ADDR_VAR 0 10
67445: PUSH
67446: DOUBLE
67447: LD_INT 1
67449: DEC
67450: ST_TO_ADDR
67451: LD_INT 5
67453: PUSH
67454: FOR_TO
67455: IFFALSE 67612
// begin _x := ShiftX ( x , d , r + i ) ;
67457: LD_ADDR_VAR 0 5
67461: PUSH
67462: LD_VAR 0 4
67466: PPUSH
67467: LD_VAR 0 8
67471: PPUSH
67472: LD_VAR 0 9
67476: PUSH
67477: LD_VAR 0 10
67481: PLUS
67482: PPUSH
67483: CALL_OW 272
67487: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67488: LD_ADDR_VAR 0 7
67492: PUSH
67493: LD_VAR 0 6
67497: PPUSH
67498: LD_VAR 0 8
67502: PPUSH
67503: LD_VAR 0 9
67507: PUSH
67508: LD_VAR 0 10
67512: PLUS
67513: PPUSH
67514: CALL_OW 273
67518: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67519: LD_VAR 0 5
67523: PPUSH
67524: LD_VAR 0 7
67528: PPUSH
67529: CALL_OW 488
67533: PUSH
67534: LD_VAR 0 5
67538: PPUSH
67539: LD_VAR 0 7
67543: PPUSH
67544: CALL_OW 428
67548: PPUSH
67549: CALL_OW 247
67553: PUSH
67554: LD_INT 3
67556: PUSH
67557: LD_INT 2
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: IN
67564: NOT
67565: AND
67566: IFFALSE 67610
// begin ComMoveXY ( unit , _x , _y ) ;
67568: LD_VAR 0 1
67572: PPUSH
67573: LD_VAR 0 5
67577: PPUSH
67578: LD_VAR 0 7
67582: PPUSH
67583: CALL_OW 111
// result := [ _x , _y ] ;
67587: LD_ADDR_VAR 0 3
67591: PUSH
67592: LD_VAR 0 5
67596: PUSH
67597: LD_VAR 0 7
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: ST_TO_ADDR
// exit ;
67606: POP
67607: POP
67608: GO 67614
// end ; end ;
67610: GO 67454
67612: POP
67613: POP
// end ;
67614: LD_VAR 0 3
67618: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67619: LD_INT 0
67621: PPUSH
67622: PPUSH
67623: PPUSH
// result := 0 ;
67624: LD_ADDR_VAR 0 3
67628: PUSH
67629: LD_INT 0
67631: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67632: LD_VAR 0 1
67636: PUSH
67637: LD_INT 0
67639: LESS
67640: PUSH
67641: LD_VAR 0 1
67645: PUSH
67646: LD_INT 8
67648: GREATER
67649: OR
67650: PUSH
67651: LD_VAR 0 2
67655: PUSH
67656: LD_INT 0
67658: LESS
67659: OR
67660: PUSH
67661: LD_VAR 0 2
67665: PUSH
67666: LD_INT 8
67668: GREATER
67669: OR
67670: IFFALSE 67674
// exit ;
67672: GO 67749
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67674: LD_ADDR_VAR 0 4
67678: PUSH
67679: LD_INT 22
67681: PUSH
67682: LD_VAR 0 2
67686: PUSH
67687: EMPTY
67688: LIST
67689: LIST
67690: PPUSH
67691: CALL_OW 69
67695: PUSH
67696: FOR_IN
67697: IFFALSE 67747
// begin un := UnitShoot ( i ) ;
67699: LD_ADDR_VAR 0 5
67703: PUSH
67704: LD_VAR 0 4
67708: PPUSH
67709: CALL_OW 504
67713: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67714: LD_VAR 0 5
67718: PPUSH
67719: CALL_OW 255
67723: PUSH
67724: LD_VAR 0 1
67728: EQUAL
67729: IFFALSE 67745
// begin result := un ;
67731: LD_ADDR_VAR 0 3
67735: PUSH
67736: LD_VAR 0 5
67740: ST_TO_ADDR
// exit ;
67741: POP
67742: POP
67743: GO 67749
// end ; end ;
67745: GO 67696
67747: POP
67748: POP
// end ;
67749: LD_VAR 0 3
67753: RET
// export function GetCargoBay ( units ) ; begin
67754: LD_INT 0
67756: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67757: LD_ADDR_VAR 0 2
67761: PUSH
67762: LD_VAR 0 1
67766: PPUSH
67767: LD_INT 2
67769: PUSH
67770: LD_INT 34
67772: PUSH
67773: LD_INT 12
67775: PUSH
67776: EMPTY
67777: LIST
67778: LIST
67779: PUSH
67780: LD_INT 34
67782: PUSH
67783: LD_INT 51
67785: PUSH
67786: EMPTY
67787: LIST
67788: LIST
67789: PUSH
67790: LD_INT 34
67792: PUSH
67793: LD_INT 32
67795: PUSH
67796: EMPTY
67797: LIST
67798: LIST
67799: PUSH
67800: LD_INT 34
67802: PUSH
67803: LD_EXP 33
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: PUSH
67812: EMPTY
67813: LIST
67814: LIST
67815: LIST
67816: LIST
67817: LIST
67818: PPUSH
67819: CALL_OW 72
67823: ST_TO_ADDR
// end ;
67824: LD_VAR 0 2
67828: RET
// export function Negate ( value ) ; begin
67829: LD_INT 0
67831: PPUSH
// result := not value ;
67832: LD_ADDR_VAR 0 2
67836: PUSH
67837: LD_VAR 0 1
67841: NOT
67842: ST_TO_ADDR
// end ;
67843: LD_VAR 0 2
67847: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
67848: LD_INT 0
67850: PPUSH
// if x1 = x2 then
67851: LD_VAR 0 1
67855: PUSH
67856: LD_VAR 0 3
67860: EQUAL
67861: IFFALSE 67895
// begin if y1 > y2 then
67863: LD_VAR 0 2
67867: PUSH
67868: LD_VAR 0 4
67872: GREATER
67873: IFFALSE 67885
// result := 0 else
67875: LD_ADDR_VAR 0 5
67879: PUSH
67880: LD_INT 0
67882: ST_TO_ADDR
67883: GO 67893
// result := 3 ;
67885: LD_ADDR_VAR 0 5
67889: PUSH
67890: LD_INT 3
67892: ST_TO_ADDR
// exit ;
67893: GO 67981
// end ; if y1 = y2 then
67895: LD_VAR 0 2
67899: PUSH
67900: LD_VAR 0 4
67904: EQUAL
67905: IFFALSE 67939
// begin if x1 > x2 then
67907: LD_VAR 0 1
67911: PUSH
67912: LD_VAR 0 3
67916: GREATER
67917: IFFALSE 67929
// result := 1 else
67919: LD_ADDR_VAR 0 5
67923: PUSH
67924: LD_INT 1
67926: ST_TO_ADDR
67927: GO 67937
// result := 4 ;
67929: LD_ADDR_VAR 0 5
67933: PUSH
67934: LD_INT 4
67936: ST_TO_ADDR
// exit ;
67937: GO 67981
// end ; if x1 > x2 and y1 > y2 then
67939: LD_VAR 0 1
67943: PUSH
67944: LD_VAR 0 3
67948: GREATER
67949: PUSH
67950: LD_VAR 0 2
67954: PUSH
67955: LD_VAR 0 4
67959: GREATER
67960: AND
67961: IFFALSE 67973
// result := 2 else
67963: LD_ADDR_VAR 0 5
67967: PUSH
67968: LD_INT 2
67970: ST_TO_ADDR
67971: GO 67981
// result := 5 ;
67973: LD_ADDR_VAR 0 5
67977: PUSH
67978: LD_INT 5
67980: ST_TO_ADDR
// end ;
67981: LD_VAR 0 5
67985: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67986: LD_INT 0
67988: PPUSH
67989: PPUSH
// if not driver or not IsInUnit ( driver ) then
67990: LD_VAR 0 1
67994: NOT
67995: PUSH
67996: LD_VAR 0 1
68000: PPUSH
68001: CALL_OW 310
68005: NOT
68006: OR
68007: IFFALSE 68011
// exit ;
68009: GO 68101
// vehicle := IsInUnit ( driver ) ;
68011: LD_ADDR_VAR 0 3
68015: PUSH
68016: LD_VAR 0 1
68020: PPUSH
68021: CALL_OW 310
68025: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68026: LD_VAR 0 1
68030: PPUSH
68031: LD_STRING \
68033: PUSH
68034: LD_INT 0
68036: PUSH
68037: LD_INT 0
68039: PUSH
68040: LD_INT 0
68042: PUSH
68043: LD_INT 0
68045: PUSH
68046: LD_INT 0
68048: PUSH
68049: LD_INT 0
68051: PUSH
68052: EMPTY
68053: LIST
68054: LIST
68055: LIST
68056: LIST
68057: LIST
68058: LIST
68059: LIST
68060: PUSH
68061: LD_STRING E
68063: PUSH
68064: LD_INT 0
68066: PUSH
68067: LD_INT 0
68069: PUSH
68070: LD_VAR 0 3
68074: PUSH
68075: LD_INT 0
68077: PUSH
68078: LD_INT 0
68080: PUSH
68081: LD_INT 0
68083: PUSH
68084: EMPTY
68085: LIST
68086: LIST
68087: LIST
68088: LIST
68089: LIST
68090: LIST
68091: LIST
68092: PUSH
68093: EMPTY
68094: LIST
68095: LIST
68096: PPUSH
68097: CALL_OW 446
// end ;
68101: LD_VAR 0 2
68105: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68106: LD_INT 0
68108: PPUSH
68109: PPUSH
// if not driver or not IsInUnit ( driver ) then
68110: LD_VAR 0 1
68114: NOT
68115: PUSH
68116: LD_VAR 0 1
68120: PPUSH
68121: CALL_OW 310
68125: NOT
68126: OR
68127: IFFALSE 68131
// exit ;
68129: GO 68221
// vehicle := IsInUnit ( driver ) ;
68131: LD_ADDR_VAR 0 3
68135: PUSH
68136: LD_VAR 0 1
68140: PPUSH
68141: CALL_OW 310
68145: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68146: LD_VAR 0 1
68150: PPUSH
68151: LD_STRING \
68153: PUSH
68154: LD_INT 0
68156: PUSH
68157: LD_INT 0
68159: PUSH
68160: LD_INT 0
68162: PUSH
68163: LD_INT 0
68165: PUSH
68166: LD_INT 0
68168: PUSH
68169: LD_INT 0
68171: PUSH
68172: EMPTY
68173: LIST
68174: LIST
68175: LIST
68176: LIST
68177: LIST
68178: LIST
68179: LIST
68180: PUSH
68181: LD_STRING E
68183: PUSH
68184: LD_INT 0
68186: PUSH
68187: LD_INT 0
68189: PUSH
68190: LD_VAR 0 3
68194: PUSH
68195: LD_INT 0
68197: PUSH
68198: LD_INT 0
68200: PUSH
68201: LD_INT 0
68203: PUSH
68204: EMPTY
68205: LIST
68206: LIST
68207: LIST
68208: LIST
68209: LIST
68210: LIST
68211: LIST
68212: PUSH
68213: EMPTY
68214: LIST
68215: LIST
68216: PPUSH
68217: CALL_OW 447
// end ;
68221: LD_VAR 0 2
68225: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68226: LD_INT 0
68228: PPUSH
68229: PPUSH
68230: PPUSH
// tmp := [ ] ;
68231: LD_ADDR_VAR 0 5
68235: PUSH
68236: EMPTY
68237: ST_TO_ADDR
// for i in units do
68238: LD_ADDR_VAR 0 4
68242: PUSH
68243: LD_VAR 0 1
68247: PUSH
68248: FOR_IN
68249: IFFALSE 68287
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68251: LD_ADDR_VAR 0 5
68255: PUSH
68256: LD_VAR 0 5
68260: PPUSH
68261: LD_VAR 0 5
68265: PUSH
68266: LD_INT 1
68268: PLUS
68269: PPUSH
68270: LD_VAR 0 4
68274: PPUSH
68275: CALL_OW 256
68279: PPUSH
68280: CALL_OW 2
68284: ST_TO_ADDR
68285: GO 68248
68287: POP
68288: POP
// if not tmp then
68289: LD_VAR 0 5
68293: NOT
68294: IFFALSE 68298
// exit ;
68296: GO 68346
// if asc then
68298: LD_VAR 0 2
68302: IFFALSE 68326
// result := SortListByListAsc ( units , tmp ) else
68304: LD_ADDR_VAR 0 3
68308: PUSH
68309: LD_VAR 0 1
68313: PPUSH
68314: LD_VAR 0 5
68318: PPUSH
68319: CALL_OW 76
68323: ST_TO_ADDR
68324: GO 68346
// result := SortListByListDesc ( units , tmp ) ;
68326: LD_ADDR_VAR 0 3
68330: PUSH
68331: LD_VAR 0 1
68335: PPUSH
68336: LD_VAR 0 5
68340: PPUSH
68341: CALL_OW 77
68345: ST_TO_ADDR
// end ;
68346: LD_VAR 0 3
68350: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68351: LD_INT 0
68353: PPUSH
68354: PPUSH
// task := GetTaskList ( mech ) ;
68355: LD_ADDR_VAR 0 4
68359: PUSH
68360: LD_VAR 0 1
68364: PPUSH
68365: CALL_OW 437
68369: ST_TO_ADDR
// if not task then
68370: LD_VAR 0 4
68374: NOT
68375: IFFALSE 68379
// exit ;
68377: GO 68421
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68379: LD_ADDR_VAR 0 3
68383: PUSH
68384: LD_VAR 0 4
68388: PUSH
68389: LD_INT 1
68391: ARRAY
68392: PUSH
68393: LD_INT 1
68395: ARRAY
68396: PUSH
68397: LD_STRING r
68399: EQUAL
68400: PUSH
68401: LD_VAR 0 4
68405: PUSH
68406: LD_INT 1
68408: ARRAY
68409: PUSH
68410: LD_INT 4
68412: ARRAY
68413: PUSH
68414: LD_VAR 0 2
68418: EQUAL
68419: AND
68420: ST_TO_ADDR
// end ;
68421: LD_VAR 0 3
68425: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68426: LD_INT 0
68428: PPUSH
// SetDir ( unit , d ) ;
68429: LD_VAR 0 1
68433: PPUSH
68434: LD_VAR 0 4
68438: PPUSH
68439: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
68443: LD_VAR 0 1
68447: PPUSH
68448: LD_VAR 0 2
68452: PPUSH
68453: LD_VAR 0 3
68457: PPUSH
68458: LD_VAR 0 5
68462: PPUSH
68463: CALL_OW 48
// end ;
68467: LD_VAR 0 6
68471: RET
// export function ToNaturalNumber ( number ) ; begin
68472: LD_INT 0
68474: PPUSH
// result := number div 1 ;
68475: LD_ADDR_VAR 0 2
68479: PUSH
68480: LD_VAR 0 1
68484: PUSH
68485: LD_INT 1
68487: DIV
68488: ST_TO_ADDR
// if number < 0 then
68489: LD_VAR 0 1
68493: PUSH
68494: LD_INT 0
68496: LESS
68497: IFFALSE 68507
// result := 0 ;
68499: LD_ADDR_VAR 0 2
68503: PUSH
68504: LD_INT 0
68506: ST_TO_ADDR
// end ; end_of_file
68507: LD_VAR 0 2
68511: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
68512: LD_VAR 0 1
68516: PUSH
68517: LD_INT 200
68519: DOUBLE
68520: GREATEREQUAL
68521: IFFALSE 68529
68523: LD_INT 299
68525: DOUBLE
68526: LESSEQUAL
68527: IFTRUE 68531
68529: GO 68563
68531: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
68532: LD_VAR 0 1
68536: PPUSH
68537: LD_VAR 0 2
68541: PPUSH
68542: LD_VAR 0 3
68546: PPUSH
68547: LD_VAR 0 4
68551: PPUSH
68552: LD_VAR 0 5
68556: PPUSH
68557: CALL 25874 0 5
68561: GO 68640
68563: LD_INT 300
68565: DOUBLE
68566: GREATEREQUAL
68567: IFFALSE 68575
68569: LD_INT 399
68571: DOUBLE
68572: LESSEQUAL
68573: IFTRUE 68577
68575: GO 68639
68577: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
68578: LD_VAR 0 1
68582: PPUSH
68583: LD_VAR 0 2
68587: PPUSH
68588: LD_VAR 0 3
68592: PPUSH
68593: LD_VAR 0 4
68597: PPUSH
68598: LD_VAR 0 5
68602: PPUSH
68603: LD_VAR 0 6
68607: PPUSH
68608: LD_VAR 0 7
68612: PPUSH
68613: LD_VAR 0 8
68617: PPUSH
68618: LD_VAR 0 9
68622: PPUSH
68623: LD_VAR 0 10
68627: PPUSH
68628: LD_VAR 0 11
68632: PPUSH
68633: CALL 23762 0 11
68637: GO 68640
68639: POP
// end ;
68640: PPOPN 11
68642: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
68643: LD_VAR 0 1
68647: PPUSH
68648: LD_VAR 0 2
68652: PPUSH
68653: LD_VAR 0 3
68657: PPUSH
68658: LD_VAR 0 4
68662: PPUSH
68663: LD_VAR 0 5
68667: PPUSH
68668: CALL 25856 0 5
// end ; end_of_file
68672: PPOPN 5
68674: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
68675: LD_VAR 0 1
68679: PPUSH
68680: LD_VAR 0 2
68684: PPUSH
68685: LD_VAR 0 3
68689: PPUSH
68690: LD_VAR 0 4
68694: PPUSH
68695: LD_VAR 0 5
68699: PPUSH
68700: LD_VAR 0 6
68704: PPUSH
68705: CALL 12570 0 6
// end ;
68709: PPOPN 6
68711: END
