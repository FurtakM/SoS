// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 46 0 0
// PrepareNature ;
  19: CALL 580 0 0
// PrepareAmericans ;
  23: CALL 826 0 0
// PrepareArabian ;
  27: CALL 10670 0 0
// if debug then
  31: LD_EXP 1
  35: IFFALSE 41
// DebugMode ;
  37: CALL 198 0 0
// Action ;
  41: CALL 4605 0 0
// end ;
  45: END
// export debug , prefix , missionStart , aviradzeSpotted , deltaSpotted , sciSpotted , aviradzeQuestDone , sciCounterKill , usAlert , usActiveDefend , timeUntilFarmer , attackDeltaAllowed , trickyMove , usPatrol , trap , lostCounter ; function Init ; begin
  46: LD_INT 0
  48: PPUSH
// debug := false ;
  49: LD_ADDR_EXP 1
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// missionStart := false ;
  57: LD_ADDR_EXP 3
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// aviradzeSpotted := false ;
  65: LD_ADDR_EXP 4
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// deltaSpotted := false ;
  73: LD_ADDR_EXP 5
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// sciSpotted := false ;
  81: LD_ADDR_EXP 6
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// sciCounterKill := 0 ;
  89: LD_ADDR_EXP 8
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// aviradzeQuestDone := false ;
  97: LD_ADDR_EXP 7
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// attackDeltaAllowed := false ;
 105: LD_ADDR_EXP 12
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usAlert := false ;
 113: LD_ADDR_EXP 9
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// usActiveDefend := false ;
 121: LD_ADDR_EXP 10
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// usPatrol := [ ] ;
 129: LD_ADDR_EXP 14
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// timeUntilFarmer := [ 40 40$00 , 30 30$00 , 20 20$00 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 11
 140: PUSH
 141: LD_INT 84000
 143: PUSH
 144: LD_INT 63000
 146: PUSH
 147: LD_INT 42000
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: PUSH
 155: LD_OWVAR 67
 159: ARRAY
 160: ST_TO_ADDR
// trickyMove := false ;
 161: LD_ADDR_EXP 13
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// prefix := 01_ ;
 169: LD_ADDR_EXP 2
 173: PUSH
 174: LD_STRING 01_
 176: ST_TO_ADDR
// trap := 0 ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// lostCounter := false ;
 185: LD_ADDR_EXP 16
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// end ;
 193: LD_VAR 0 1
 197: RET
// function DebugMode ; begin
 198: LD_INT 0
 200: PPUSH
// FogOff ( 1 ) ;
 201: LD_INT 1
 203: PPUSH
 204: CALL_OW 344
// Difficulty := 2 ;
 208: LD_ADDR_OWVAR 67
 212: PUSH
 213: LD_INT 2
 215: ST_TO_ADDR
// end ; end_of_file
 216: LD_VAR 0 1
 220: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 221: LD_INT 0
 223: PPUSH
 224: PPUSH
// if exist_mode then
 225: LD_VAR 0 2
 229: IFFALSE 254
// unit := CreateCharacter ( prefix & ident ) else
 231: LD_ADDR_VAR 0 5
 235: PUSH
 236: LD_VAR 0 3
 240: PUSH
 241: LD_VAR 0 1
 245: STR
 246: PPUSH
 247: CALL_OW 34
 251: ST_TO_ADDR
 252: GO 269
// unit := NewCharacter ( ident ) ;
 254: LD_ADDR_VAR 0 5
 258: PUSH
 259: LD_VAR 0 1
 263: PPUSH
 264: CALL_OW 25
 268: ST_TO_ADDR
// result := unit ;
 269: LD_ADDR_VAR 0 4
 273: PUSH
 274: LD_VAR 0 5
 278: ST_TO_ADDR
// end ;
 279: LD_VAR 0 4
 283: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 284: LD_INT 0
 286: PPUSH
// uc_side := side ;
 287: LD_ADDR_OWVAR 20
 291: PUSH
 292: LD_VAR 0 1
 296: ST_TO_ADDR
// uc_nation := nation ;
 297: LD_ADDR_OWVAR 21
 301: PUSH
 302: LD_VAR 0 2
 306: ST_TO_ADDR
// vc_chassis := chassis ;
 307: LD_ADDR_OWVAR 37
 311: PUSH
 312: LD_VAR 0 3
 316: ST_TO_ADDR
// vc_engine := engine ;
 317: LD_ADDR_OWVAR 39
 321: PUSH
 322: LD_VAR 0 4
 326: ST_TO_ADDR
// vc_control := control ;
 327: LD_ADDR_OWVAR 38
 331: PUSH
 332: LD_VAR 0 5
 336: ST_TO_ADDR
// vc_weapon := weapon ;
 337: LD_ADDR_OWVAR 40
 341: PUSH
 342: LD_VAR 0 6
 346: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 347: LD_ADDR_OWVAR 41
 351: PUSH
 352: LD_VAR 0 7
 356: ST_TO_ADDR
// result := CreateVehicle ;
 357: LD_ADDR_VAR 0 8
 361: PUSH
 362: CALL_OW 45
 366: ST_TO_ADDR
// end ;
 367: LD_VAR 0 8
 371: RET
// export function SayX ( units , ident ) ; var i ; begin
 372: LD_INT 0
 374: PPUSH
 375: PPUSH
// result := false ;
 376: LD_ADDR_VAR 0 3
 380: PUSH
 381: LD_INT 0
 383: ST_TO_ADDR
// if not units then
 384: LD_VAR 0 1
 388: NOT
 389: IFFALSE 393
// exit ;
 391: GO 447
// for i in units do
 393: LD_ADDR_VAR 0 4
 397: PUSH
 398: LD_VAR 0 1
 402: PUSH
 403: FOR_IN
 404: IFFALSE 445
// if IsOk ( i ) then
 406: LD_VAR 0 4
 410: PPUSH
 411: CALL_OW 302
 415: IFFALSE 443
// begin Say ( i , ident ) ;
 417: LD_VAR 0 4
 421: PPUSH
 422: LD_VAR 0 2
 426: PPUSH
 427: CALL_OW 88
// result := i ;
 431: LD_ADDR_VAR 0 3
 435: PUSH
 436: LD_VAR 0 4
 440: ST_TO_ADDR
// break ;
 441: GO 445
// end ;
 443: GO 403
 445: POP
 446: POP
// end ;
 447: LD_VAR 0 3
 451: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 452: LD_INT 0
 454: PPUSH
 455: PPUSH
// InitUc ;
 456: CALL_OW 18
// InitHc ;
 460: CALL_OW 19
// uc_side := 0 ;
 464: LD_ADDR_OWVAR 20
 468: PUSH
 469: LD_INT 0
 471: ST_TO_ADDR
// uc_nation := 0 ;
 472: LD_ADDR_OWVAR 21
 476: PUSH
 477: LD_INT 0
 479: ST_TO_ADDR
// for i = 1 to amount do
 480: LD_ADDR_VAR 0 4
 484: PUSH
 485: DOUBLE
 486: LD_INT 1
 488: DEC
 489: ST_TO_ADDR
 490: LD_VAR 0 2
 494: PUSH
 495: FOR_TO
 496: IFFALSE 569
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 498: LD_ADDR_OWVAR 29
 502: PUSH
 503: LD_INT 9
 505: PPUSH
 506: LD_INT 12
 508: PPUSH
 509: CALL_OW 12
 513: PUSH
 514: LD_INT 9
 516: PPUSH
 517: LD_INT 12
 519: PPUSH
 520: CALL_OW 12
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: ST_TO_ADDR
// hc_agressivity := 0 ;
 529: LD_ADDR_OWVAR 35
 533: PUSH
 534: LD_INT 0
 536: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 537: LD_INT 0
 539: PPUSH
 540: LD_INT 12
 542: PPUSH
 543: LD_INT 1
 545: PPUSH
 546: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 550: CALL_OW 44
 554: PPUSH
 555: LD_VAR 0 1
 559: PPUSH
 560: LD_INT 0
 562: PPUSH
 563: CALL_OW 49
// end ;
 567: GO 495
 569: POP
 570: POP
// InitHc ;
 571: CALL_OW 19
// end ;
 575: LD_VAR 0 3
 579: RET
// export function PrepareNature ; var i ; begin
 580: LD_INT 0
 582: PPUSH
 583: PPUSH
// SpawnApeman ( forest , 9 ) ;
 584: LD_INT 1
 586: PPUSH
 587: LD_INT 9
 589: PPUSH
 590: CALL 452 0 2
// for i := 1 to 4 do
 594: LD_ADDR_VAR 0 2
 598: PUSH
 599: DOUBLE
 600: LD_INT 1
 602: DEC
 603: ST_TO_ADDR
 604: LD_INT 4
 606: PUSH
 607: FOR_TO
 608: IFFALSE 643
// begin hc_class := 21 ;
 610: LD_ADDR_OWVAR 28
 614: PUSH
 615: LD_INT 21
 617: ST_TO_ADDR
// hc_gallery :=  ;
 618: LD_ADDR_OWVAR 33
 622: PUSH
 623: LD_STRING 
 625: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 626: CALL_OW 44
 630: PPUSH
 631: LD_INT 1
 633: PPUSH
 634: LD_INT 0
 636: PPUSH
 637: CALL_OW 49
// end ;
 641: GO 607
 643: POP
 644: POP
// for i := 1 to 2 do
 645: LD_ADDR_VAR 0 2
 649: PUSH
 650: DOUBLE
 651: LD_INT 1
 653: DEC
 654: ST_TO_ADDR
 655: LD_INT 2
 657: PUSH
 658: FOR_TO
 659: IFFALSE 694
// begin hc_class := 18 ;
 661: LD_ADDR_OWVAR 28
 665: PUSH
 666: LD_INT 18
 668: ST_TO_ADDR
// hc_gallery :=  ;
 669: LD_ADDR_OWVAR 33
 673: PUSH
 674: LD_STRING 
 676: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 677: CALL_OW 44
 681: PPUSH
 682: LD_INT 1
 684: PPUSH
 685: LD_INT 0
 687: PPUSH
 688: CALL_OW 49
// end ;
 692: GO 658
 694: POP
 695: POP
// for i := 1 to 3 do
 696: LD_ADDR_VAR 0 2
 700: PUSH
 701: DOUBLE
 702: LD_INT 1
 704: DEC
 705: ST_TO_ADDR
 706: LD_INT 3
 708: PUSH
 709: FOR_TO
 710: IFFALSE 745
// begin hc_class := 13 ;
 712: LD_ADDR_OWVAR 28
 716: PUSH
 717: LD_INT 13
 719: ST_TO_ADDR
// hc_gallery :=  ;
 720: LD_ADDR_OWVAR 33
 724: PUSH
 725: LD_STRING 
 727: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 728: CALL_OW 44
 732: PPUSH
 733: LD_INT 1
 735: PPUSH
 736: LD_INT 0
 738: PPUSH
 739: CALL_OW 49
// end ;
 743: GO 709
 745: POP
 746: POP
// end ;
 747: LD_VAR 0 1
 751: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 752: LD_INT 0
 754: PPUSH
 755: PPUSH
 756: PPUSH
// if not observer or not unit then
 757: LD_VAR 0 1
 761: NOT
 762: PUSH
 763: LD_VAR 0 2
 767: NOT
 768: OR
 769: IFFALSE 773
// exit ;
 771: GO 821
// if not See ( GetSide ( observer ) , unit ) then
 773: LD_VAR 0 1
 777: PPUSH
 778: CALL_OW 255
 782: PPUSH
 783: LD_VAR 0 2
 787: PPUSH
 788: CALL_OW 292
 792: NOT
 793: IFFALSE 797
// exit ;
 795: GO 821
// result := GetDistUnits ( observer , unit ) < 12 ;
 797: LD_ADDR_VAR 0 3
 801: PUSH
 802: LD_VAR 0 1
 806: PPUSH
 807: LD_VAR 0 2
 811: PPUSH
 812: CALL_OW 296
 816: PUSH
 817: LD_INT 12
 819: LESS
 820: ST_TO_ADDR
// end ; end_of_file
 821: LD_VAR 0 3
 825: RET
// export Gladstone , Lynch ; export usForces , usSci ; export function PrepareAmericans ; var i , un , veh , tmp , arm ; begin
 826: LD_INT 0
 828: PPUSH
 829: PPUSH
 830: PPUSH
 831: PPUSH
 832: PPUSH
 833: PPUSH
// usForces := [ ] ;
 834: LD_ADDR_EXP 19
 838: PUSH
 839: EMPTY
 840: ST_TO_ADDR
// usSci := [ ] ;
 841: LD_ADDR_EXP 20
 845: PUSH
 846: EMPTY
 847: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
 848: LD_INT 1
 850: PPUSH
 851: LD_STRING Delta
 853: PPUSH
 854: CALL_OW 500
// SetResourceType ( GetBase ( Delta ) , mat_cans , 400 ) ;
 858: LD_INT 1
 860: PPUSH
 861: CALL_OW 274
 865: PPUSH
 866: LD_INT 1
 868: PPUSH
 869: LD_INT 400
 871: PPUSH
 872: CALL_OW 277
// SetResourceType ( GetBase ( Delta ) , mat_oil , 80 ) ;
 876: LD_INT 1
 878: PPUSH
 879: CALL_OW 274
 883: PPUSH
 884: LD_INT 2
 886: PPUSH
 887: LD_INT 80
 889: PPUSH
 890: CALL_OW 277
// uc_side := 1 ;
 894: LD_ADDR_OWVAR 20
 898: PUSH
 899: LD_INT 1
 901: ST_TO_ADDR
// uc_nation := 1 ;
 902: LD_ADDR_OWVAR 21
 906: PUSH
 907: LD_INT 1
 909: ST_TO_ADDR
// InitHc ;
 910: CALL_OW 19
// hc_importance := 0 ;
 914: LD_ADDR_OWVAR 32
 918: PUSH
 919: LD_INT 0
 921: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
 922: LD_ADDR_EXP 18
 926: PUSH
 927: LD_STRING Lynch
 929: PPUSH
 930: LD_INT 0
 932: PPUSH
 933: LD_STRING 
 935: PPUSH
 936: CALL 221 0 3
 940: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false ,  ) ;
 941: LD_ADDR_EXP 17
 945: PUSH
 946: LD_STRING Gladstone
 948: PPUSH
 949: LD_INT 0
 951: PPUSH
 952: LD_STRING 
 954: PPUSH
 955: CALL 221 0 3
 959: ST_TO_ADDR
// PlaceHumanInUnit ( Lynch , Delta ) ;
 960: LD_EXP 18
 964: PPUSH
 965: LD_INT 1
 967: PPUSH
 968: CALL_OW 52
// PlaceHumanInUnit ( Gladstone , usLab ) ;
 972: LD_EXP 17
 976: PPUSH
 977: LD_INT 3
 979: PPUSH
 980: CALL_OW 52
// for i := 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
 984: LD_ADDR_VAR 0 2
 988: PUSH
 989: DOUBLE
 990: LD_INT 1
 992: DEC
 993: ST_TO_ADDR
 994: LD_INT 1
 996: PUSH
 997: LD_INT 2
 999: PUSH
1000: LD_INT 2
1002: PUSH
1003: EMPTY
1004: LIST
1005: LIST
1006: LIST
1007: PUSH
1008: LD_OWVAR 67
1012: ARRAY
1013: PUSH
1014: FOR_TO
1015: IFFALSE 1061
// begin PrepareHuman ( false , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
1017: LD_INT 0
1019: PPUSH
1020: LD_INT 2
1022: PPUSH
1023: LD_INT 1
1025: PUSH
1026: LD_INT 2
1028: PUSH
1029: LD_INT 2
1031: PUSH
1032: EMPTY
1033: LIST
1034: LIST
1035: LIST
1036: PUSH
1037: LD_OWVAR 67
1041: ARRAY
1042: PPUSH
1043: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , Delta ) ;
1047: CALL_OW 44
1051: PPUSH
1052: LD_INT 1
1054: PPUSH
1055: CALL_OW 52
// end ;
1059: GO 1014
1061: POP
1062: POP
// for i := 1 to 2 + Difficulty do
1063: LD_ADDR_VAR 0 2
1067: PUSH
1068: DOUBLE
1069: LD_INT 1
1071: DEC
1072: ST_TO_ADDR
1073: LD_INT 2
1075: PUSH
1076: LD_OWVAR 67
1080: PLUS
1081: PUSH
1082: FOR_TO
1083: IFFALSE 1168
// begin PrepareHuman ( false , 4 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
1085: LD_INT 0
1087: PPUSH
1088: LD_INT 4
1090: PPUSH
1091: LD_INT 1
1093: PUSH
1094: LD_INT 2
1096: PUSH
1097: LD_INT 2
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: LIST
1104: PUSH
1105: LD_OWVAR 67
1109: ARRAY
1110: PPUSH
1111: CALL_OW 380
// un := CreateHuman ;
1115: LD_ADDR_VAR 0 3
1119: PUSH
1120: CALL_OW 44
1124: ST_TO_ADDR
// PlaceHumanInUnit ( un , usLab ) ;
1125: LD_VAR 0 3
1129: PPUSH
1130: LD_INT 3
1132: PPUSH
1133: CALL_OW 52
// usSci := Replace ( usSci , usSci + 1 , un ) ;
1137: LD_ADDR_EXP 20
1141: PUSH
1142: LD_EXP 20
1146: PPUSH
1147: LD_EXP 20
1151: PUSH
1152: LD_INT 1
1154: PLUS
1155: PPUSH
1156: LD_VAR 0 3
1160: PPUSH
1161: CALL_OW 1
1165: ST_TO_ADDR
// end ;
1166: GO 1082
1168: POP
1169: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
1170: LD_ADDR_VAR 0 6
1174: PUSH
1175: LD_INT 22
1177: PUSH
1178: LD_INT 1
1180: PUSH
1181: EMPTY
1182: LIST
1183: LIST
1184: PUSH
1185: LD_INT 30
1187: PUSH
1188: LD_INT 4
1190: PUSH
1191: EMPTY
1192: LIST
1193: LIST
1194: PUSH
1195: EMPTY
1196: LIST
1197: LIST
1198: PPUSH
1199: CALL_OW 69
1203: ST_TO_ADDR
// for i := 1 to 3 + Difficulty do
1204: LD_ADDR_VAR 0 2
1208: PUSH
1209: DOUBLE
1210: LD_INT 1
1212: DEC
1213: ST_TO_ADDR
1214: LD_INT 3
1216: PUSH
1217: LD_OWVAR 67
1221: PLUS
1222: PUSH
1223: FOR_TO
1224: IFFALSE 1302
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
1226: LD_INT 0
1228: PPUSH
1229: LD_INT 1
1231: PPUSH
1232: LD_INT 1
1234: PUSH
1235: LD_INT 2
1237: PUSH
1238: LD_INT 3
1240: PUSH
1241: EMPTY
1242: LIST
1243: LIST
1244: LIST
1245: PUSH
1246: LD_OWVAR 67
1250: ARRAY
1251: PPUSH
1252: CALL_OW 380
// un := CreateHuman ;
1256: LD_ADDR_VAR 0 3
1260: PUSH
1261: CALL_OW 44
1265: ST_TO_ADDR
// usForces := usForces ^ un ;
1266: LD_ADDR_EXP 19
1270: PUSH
1271: LD_EXP 19
1275: PUSH
1276: LD_VAR 0 3
1280: ADD
1281: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm [ 1 ] ) ;
1282: LD_VAR 0 3
1286: PPUSH
1287: LD_VAR 0 6
1291: PUSH
1292: LD_INT 1
1294: ARRAY
1295: PPUSH
1296: CALL_OW 52
// end ;
1300: GO 1223
1302: POP
1303: POP
// PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 100 ) ;
1304: LD_INT 1
1306: PPUSH
1307: LD_INT 1
1309: PPUSH
1310: LD_INT 1
1312: PPUSH
1313: LD_INT 2
1315: PPUSH
1316: LD_INT 1
1318: PPUSH
1319: LD_INT 2
1321: PPUSH
1322: LD_INT 100
1324: PPUSH
1325: CALL 284 0 7
// veh := CreateVehicle ;
1329: LD_ADDR_VAR 0 4
1333: PUSH
1334: CALL_OW 45
1338: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1339: LD_VAR 0 4
1343: PPUSH
1344: LD_INT 2
1346: PPUSH
1347: CALL_OW 233
// PlaceUnitXY ( veh , 43 , 24 , false ) ;
1351: LD_VAR 0 4
1355: PPUSH
1356: LD_INT 43
1358: PPUSH
1359: LD_INT 24
1361: PPUSH
1362: LD_INT 0
1364: PPUSH
1365: CALL_OW 48
// end ;
1369: LD_VAR 0 1
1373: RET
// export function SendSciToForest ; var i , j , k , tmp , xy ; begin
1374: LD_INT 0
1376: PPUSH
1377: PPUSH
1378: PPUSH
1379: PPUSH
1380: PPUSH
1381: PPUSH
// if not usSci then
1382: LD_EXP 20
1386: NOT
1387: IFFALSE 1391
// exit ;
1389: GO 1565
// xy := AreaToList ( tameArea , 0 ) ;
1391: LD_ADDR_VAR 0 6
1395: PUSH
1396: LD_INT 5
1398: PPUSH
1399: LD_INT 0
1401: PPUSH
1402: CALL_OW 517
1406: ST_TO_ADDR
// for i in usSci do
1407: LD_ADDR_VAR 0 2
1411: PUSH
1412: LD_EXP 20
1416: PUSH
1417: FOR_IN
1418: IFFALSE 1563
// begin k := rand ( 1 , xy [ 1 ] ) ;
1420: LD_ADDR_VAR 0 4
1424: PUSH
1425: LD_INT 1
1427: PPUSH
1428: LD_VAR 0 6
1432: PUSH
1433: LD_INT 1
1435: ARRAY
1436: PPUSH
1437: CALL_OW 12
1441: ST_TO_ADDR
// ComExitBuilding ( i ) ;
1442: LD_VAR 0 2
1446: PPUSH
1447: CALL_OW 122
// AddComMoveXY ( i , xy [ 1 ] [ k ] , xy [ 2 ] [ k ] ) ;
1451: LD_VAR 0 2
1455: PPUSH
1456: LD_VAR 0 6
1460: PUSH
1461: LD_INT 1
1463: ARRAY
1464: PUSH
1465: LD_VAR 0 4
1469: ARRAY
1470: PPUSH
1471: LD_VAR 0 6
1475: PUSH
1476: LD_INT 2
1478: ARRAY
1479: PUSH
1480: LD_VAR 0 4
1484: ARRAY
1485: PPUSH
1486: CALL_OW 171
// for j := 1 to 2 do
1490: LD_ADDR_VAR 0 3
1494: PUSH
1495: DOUBLE
1496: LD_INT 1
1498: DEC
1499: ST_TO_ADDR
1500: LD_INT 2
1502: PUSH
1503: FOR_TO
1504: IFFALSE 1559
// begin tmp := Delete ( xy [ j ] , k ) ;
1506: LD_ADDR_VAR 0 5
1510: PUSH
1511: LD_VAR 0 6
1515: PUSH
1516: LD_VAR 0 3
1520: ARRAY
1521: PPUSH
1522: LD_VAR 0 4
1526: PPUSH
1527: CALL_OW 3
1531: ST_TO_ADDR
// xy := Replace ( xy , j , tmp ) ;
1532: LD_ADDR_VAR 0 6
1536: PUSH
1537: LD_VAR 0 6
1541: PPUSH
1542: LD_VAR 0 3
1546: PPUSH
1547: LD_VAR 0 5
1551: PPUSH
1552: CALL_OW 1
1556: ST_TO_ADDR
// end ;
1557: GO 1503
1559: POP
1560: POP
// end ;
1561: GO 1417
1563: POP
1564: POP
// end ;
1565: LD_VAR 0 1
1569: RET
// every 0 0$5 + 0 0$10 trigger aviradzeSpotted and usSci and not usAlert and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do var i , x , y , d , ape ;
1570: LD_EXP 4
1574: PUSH
1575: LD_EXP 20
1579: AND
1580: PUSH
1581: LD_EXP 9
1585: NOT
1586: AND
1587: PUSH
1588: LD_INT 22
1590: PUSH
1591: LD_INT 0
1593: PUSH
1594: EMPTY
1595: LIST
1596: LIST
1597: PUSH
1598: LD_INT 25
1600: PUSH
1601: LD_INT 12
1603: PUSH
1604: EMPTY
1605: LIST
1606: LIST
1607: PUSH
1608: EMPTY
1609: LIST
1610: LIST
1611: PPUSH
1612: CALL_OW 69
1616: AND
1617: IFFALSE 2109
1619: GO 1621
1621: DISABLE
1622: LD_INT 0
1624: PPUSH
1625: PPUSH
1626: PPUSH
1627: PPUSH
1628: PPUSH
// begin enable ;
1629: ENABLE
// if UnitFilter ( usSci , [ f_or , [ f_hastask ] , [ f_inside ] ] ) then
1630: LD_EXP 20
1634: PPUSH
1635: LD_INT 2
1637: PUSH
1638: LD_INT 60
1640: PUSH
1641: EMPTY
1642: LIST
1643: PUSH
1644: LD_INT 54
1646: PUSH
1647: EMPTY
1648: LIST
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: LIST
1654: PPUSH
1655: CALL_OW 72
1659: IFFALSE 1663
// exit ;
1661: GO 2109
// for i in usSci do
1663: LD_ADDR_VAR 0 1
1667: PUSH
1668: LD_EXP 20
1672: PUSH
1673: FOR_IN
1674: IFFALSE 2107
// begin if not HasTask ( i ) and GetLives ( i ) = 1000 then
1676: LD_VAR 0 1
1680: PPUSH
1681: CALL_OW 314
1685: NOT
1686: PUSH
1687: LD_VAR 0 1
1691: PPUSH
1692: CALL_OW 256
1696: PUSH
1697: LD_INT 1000
1699: EQUAL
1700: AND
1701: IFFALSE 1908
// begin ape := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) , i ) ;
1703: LD_ADDR_VAR 0 5
1707: PUSH
1708: LD_INT 22
1710: PUSH
1711: LD_INT 0
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: PUSH
1718: LD_INT 25
1720: PUSH
1721: LD_INT 12
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: PUSH
1728: EMPTY
1729: LIST
1730: LIST
1731: PPUSH
1732: CALL_OW 69
1736: PPUSH
1737: LD_VAR 0 1
1741: PPUSH
1742: CALL_OW 74
1746: ST_TO_ADDR
// if GetDistUnits ( i , ape ) < 10 then
1747: LD_VAR 0 1
1751: PPUSH
1752: LD_VAR 0 5
1756: PPUSH
1757: CALL_OW 296
1761: PUSH
1762: LD_INT 10
1764: LESS
1765: IFFALSE 1798
// ComTameXY ( i , GetX ( ape ) , GetY ( ape ) ) else
1767: LD_VAR 0 1
1771: PPUSH
1772: LD_VAR 0 5
1776: PPUSH
1777: CALL_OW 250
1781: PPUSH
1782: LD_VAR 0 5
1786: PPUSH
1787: CALL_OW 251
1791: PPUSH
1792: CALL_OW 131
1796: GO 1908
// begin d := rand ( 0 , 5 ) ;
1798: LD_ADDR_VAR 0 4
1802: PUSH
1803: LD_INT 0
1805: PPUSH
1806: LD_INT 5
1808: PPUSH
1809: CALL_OW 12
1813: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 3 ) ;
1814: LD_ADDR_VAR 0 2
1818: PUSH
1819: LD_VAR 0 1
1823: PPUSH
1824: CALL_OW 250
1828: PPUSH
1829: LD_VAR 0 4
1833: PPUSH
1834: LD_INT 3
1836: PPUSH
1837: CALL_OW 272
1841: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 3 ) ;
1842: LD_ADDR_VAR 0 3
1846: PUSH
1847: LD_VAR 0 1
1851: PPUSH
1852: CALL_OW 251
1856: PPUSH
1857: LD_VAR 0 4
1861: PPUSH
1862: LD_INT 3
1864: PPUSH
1865: CALL_OW 273
1869: ST_TO_ADDR
// if not ValidHex ( x , y ) then
1870: LD_VAR 0 2
1874: PPUSH
1875: LD_VAR 0 3
1879: PPUSH
1880: CALL_OW 488
1884: NOT
1885: IFFALSE 1889
// continue ;
1887: GO 1673
// ComMoveXY ( i , x , y ) ;
1889: LD_VAR 0 1
1893: PPUSH
1894: LD_VAR 0 2
1898: PPUSH
1899: LD_VAR 0 3
1903: PPUSH
1904: CALL_OW 111
// end ; end ; if GetLives ( i ) < 900 and GetDistUnitXY ( i , 37 , 23 ) > 10 then
1908: LD_VAR 0 1
1912: PPUSH
1913: CALL_OW 256
1917: PUSH
1918: LD_INT 900
1920: LESS
1921: PUSH
1922: LD_VAR 0 1
1926: PPUSH
1927: LD_INT 37
1929: PPUSH
1930: LD_INT 23
1932: PPUSH
1933: CALL_OW 297
1937: PUSH
1938: LD_INT 10
1940: GREATER
1941: AND
1942: IFFALSE 2018
// begin if IsOk ( Gladstone ) and IsInUnit ( Gladstone ) then
1944: LD_EXP 17
1948: PPUSH
1949: CALL_OW 302
1953: PUSH
1954: LD_EXP 17
1958: PPUSH
1959: CALL_OW 310
1963: AND
1964: IFFALSE 1975
// ComExitBuilding ( Gladstone ) ;
1966: LD_EXP 17
1970: PPUSH
1971: CALL_OW 122
// AddComHeal ( Gladstone , i ) ;
1975: LD_EXP 17
1979: PPUSH
1980: LD_VAR 0 1
1984: PPUSH
1985: CALL_OW 188
// AddComEnterUnit ( Gladstone , usLab ) ;
1989: LD_EXP 17
1993: PPUSH
1994: LD_INT 3
1996: PPUSH
1997: CALL_OW 180
// ComMoveXY ( i , 37 , 23 ) ;
2001: LD_VAR 0 1
2005: PPUSH
2006: LD_INT 37
2008: PPUSH
2009: LD_INT 23
2011: PPUSH
2012: CALL_OW 111
// end else
2016: GO 2105
// if GetLives ( i ) = 1000 then
2018: LD_VAR 0 1
2022: PPUSH
2023: CALL_OW 256
2027: PUSH
2028: LD_INT 1000
2030: EQUAL
2031: IFFALSE 2105
// begin if SideShoot ( i ) = 2 then
2033: LD_VAR 0 1
2037: PPUSH
2038: CALL_OW 503
2042: PUSH
2043: LD_INT 2
2045: EQUAL
2046: IFFALSE 2093
// begin if not usAlert then
2048: LD_EXP 9
2052: NOT
2053: IFFALSE 2063
// usAlert := true ;
2055: LD_ADDR_EXP 9
2059: PUSH
2060: LD_INT 1
2062: ST_TO_ADDR
// AddComEnterUnit ( i , usLab ) ;
2063: LD_VAR 0 1
2067: PPUSH
2068: LD_INT 3
2070: PPUSH
2071: CALL_OW 180
// usSci := usSci diff i ;
2075: LD_ADDR_EXP 20
2079: PUSH
2080: LD_EXP 20
2084: PUSH
2085: LD_VAR 0 1
2089: DIFF
2090: ST_TO_ADDR
// end else
2091: GO 2105
// ComMoveToArea ( i , tameArea ) ;
2093: LD_VAR 0 1
2097: PPUSH
2098: LD_INT 5
2100: PPUSH
2101: CALL_OW 113
// end ; end ;
2105: GO 1673
2107: POP
2108: POP
// end ;
2109: PPOPN 5
2111: END
// every 0 0$1 trigger not usAlert and ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 999 ] ] ] ) or FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) ) do
2112: LD_EXP 9
2116: NOT
2117: PUSH
2118: LD_INT 22
2120: PUSH
2121: LD_INT 1
2123: PUSH
2124: EMPTY
2125: LIST
2126: LIST
2127: PUSH
2128: LD_INT 21
2130: PUSH
2131: LD_INT 3
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: PUSH
2138: LD_INT 3
2140: PUSH
2141: LD_INT 57
2143: PUSH
2144: EMPTY
2145: LIST
2146: PUSH
2147: EMPTY
2148: LIST
2149: LIST
2150: PUSH
2151: LD_INT 3
2153: PUSH
2154: LD_INT 24
2156: PUSH
2157: LD_INT 999
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: PUSH
2164: EMPTY
2165: LIST
2166: LIST
2167: PUSH
2168: EMPTY
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: PPUSH
2174: CALL_OW 69
2178: PUSH
2179: LD_INT 7
2181: PPUSH
2182: LD_INT 22
2184: PUSH
2185: LD_INT 2
2187: PUSH
2188: EMPTY
2189: LIST
2190: LIST
2191: PPUSH
2192: CALL_OW 70
2196: OR
2197: AND
2198: IFFALSE 2211
2200: GO 2202
2202: DISABLE
// usAlert := true ;
2203: LD_ADDR_EXP 9
2207: PUSH
2208: LD_INT 1
2210: ST_TO_ADDR
2211: END
// every 0 0$1 trigger usAlert do var i , b , arm ;
2212: LD_EXP 9
2216: IFFALSE 2563
2218: GO 2220
2220: DISABLE
2221: LD_INT 0
2223: PPUSH
2224: PPUSH
2225: PPUSH
// begin usActiveDefend := true ;
2226: LD_ADDR_EXP 10
2230: PUSH
2231: LD_INT 1
2233: ST_TO_ADDR
// if not usForces then
2234: LD_EXP 19
2238: NOT
2239: IFFALSE 2243
// exit ;
2241: GO 2563
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
2243: LD_ADDR_VAR 0 3
2247: PUSH
2248: LD_INT 22
2250: PUSH
2251: LD_INT 1
2253: PUSH
2254: EMPTY
2255: LIST
2256: LIST
2257: PUSH
2258: LD_INT 30
2260: PUSH
2261: LD_INT 4
2263: PUSH
2264: EMPTY
2265: LIST
2266: LIST
2267: PUSH
2268: EMPTY
2269: LIST
2270: LIST
2271: PPUSH
2272: CALL_OW 69
2276: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
2277: LD_ADDR_VAR 0 2
2281: PUSH
2282: LD_INT 22
2284: PUSH
2285: LD_INT 1
2287: PUSH
2288: EMPTY
2289: LIST
2290: LIST
2291: PUSH
2292: LD_INT 30
2294: PUSH
2295: LD_INT 31
2297: PUSH
2298: EMPTY
2299: LIST
2300: LIST
2301: PUSH
2302: EMPTY
2303: LIST
2304: LIST
2305: PPUSH
2306: CALL_OW 69
2310: ST_TO_ADDR
// ComExitBuilding ( Lynch ) ;
2311: LD_EXP 18
2315: PPUSH
2316: CALL_OW 122
// AddComEnterUnit ( Lynch , arm [ 1 ] ) ;
2320: LD_EXP 18
2324: PPUSH
2325: LD_VAR 0 3
2329: PUSH
2330: LD_INT 1
2332: ARRAY
2333: PPUSH
2334: CALL_OW 180
// if IsOk ( Gladstone ) then
2338: LD_EXP 17
2342: PPUSH
2343: CALL_OW 302
2347: IFFALSE 2388
// begin ComExitBuilding ( Gladstone ) ;
2349: LD_EXP 17
2353: PPUSH
2354: CALL_OW 122
// AddComEnterUnit ( Gladstone , arm [ 1 ] ) ;
2358: LD_EXP 17
2362: PPUSH
2363: LD_VAR 0 3
2367: PUSH
2368: LD_INT 1
2370: ARRAY
2371: PPUSH
2372: CALL_OW 180
// AddComChangeProfession ( Gladstone , class_soldier ) ;
2376: LD_EXP 17
2380: PPUSH
2381: LD_INT 1
2383: PPUSH
2384: CALL_OW 183
// end ; ComExitBuilding ( usForces [ 1 ] ) ;
2388: LD_EXP 19
2392: PUSH
2393: LD_INT 1
2395: ARRAY
2396: PPUSH
2397: CALL_OW 122
// AddComEnterUnit ( usForces [ 1 ] , b [ 1 ] ) ;
2401: LD_EXP 19
2405: PUSH
2406: LD_INT 1
2408: ARRAY
2409: PPUSH
2410: LD_VAR 0 2
2414: PUSH
2415: LD_INT 1
2417: ARRAY
2418: PPUSH
2419: CALL_OW 180
// ComExitBuilding ( usForces [ 2 ] ) ;
2423: LD_EXP 19
2427: PUSH
2428: LD_INT 2
2430: ARRAY
2431: PPUSH
2432: CALL_OW 122
// AddComEnterUnit ( usForces [ 2 ] , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
2436: LD_EXP 19
2440: PUSH
2441: LD_INT 2
2443: ARRAY
2444: PPUSH
2445: LD_INT 22
2447: PUSH
2448: LD_INT 1
2450: PUSH
2451: EMPTY
2452: LIST
2453: LIST
2454: PUSH
2455: LD_INT 30
2457: PUSH
2458: LD_INT 32
2460: PUSH
2461: EMPTY
2462: LIST
2463: LIST
2464: PUSH
2465: EMPTY
2466: LIST
2467: LIST
2468: PPUSH
2469: CALL_OW 69
2473: PUSH
2474: LD_INT 1
2476: ARRAY
2477: PPUSH
2478: CALL_OW 180
// if b > 1 and usForces > 2 then
2482: LD_VAR 0 2
2486: PUSH
2487: LD_INT 1
2489: GREATER
2490: PUSH
2491: LD_EXP 19
2495: PUSH
2496: LD_INT 2
2498: GREATER
2499: AND
2500: IFFALSE 2563
// begin repeat wait ( 0 0$1 ) ;
2502: LD_INT 35
2504: PPUSH
2505: CALL_OW 67
// until BuildingStatus ( b [ 2 ] ) <> bs_build ;
2509: LD_VAR 0 2
2513: PUSH
2514: LD_INT 2
2516: ARRAY
2517: PPUSH
2518: CALL_OW 461
2522: PUSH
2523: LD_INT 1
2525: NONEQUAL
2526: IFFALSE 2502
// ComExitBuilding ( usForces [ 3 ] ) ;
2528: LD_EXP 19
2532: PUSH
2533: LD_INT 3
2535: ARRAY
2536: PPUSH
2537: CALL_OW 122
// AddComEnterUnit ( usForces [ 3 ] , b [ 2 ] ) ;
2541: LD_EXP 19
2545: PUSH
2546: LD_INT 3
2548: ARRAY
2549: PPUSH
2550: LD_VAR 0 2
2554: PUSH
2555: LD_INT 2
2557: ARRAY
2558: PPUSH
2559: CALL_OW 180
// end ; end ;
2563: PPOPN 3
2565: END
// every 0 0$1 trigger GetLives ( usLab ) < 999 and usAlert and usForces do var i ;
2566: LD_INT 3
2568: PPUSH
2569: CALL_OW 256
2573: PUSH
2574: LD_INT 999
2576: LESS
2577: PUSH
2578: LD_EXP 9
2582: AND
2583: PUSH
2584: LD_EXP 19
2588: AND
2589: IFFALSE 2760
2591: GO 2593
2593: DISABLE
2594: LD_INT 0
2596: PPUSH
// begin for i in usForces do
2597: LD_ADDR_VAR 0 1
2601: PUSH
2602: LD_EXP 19
2606: PUSH
2607: FOR_IN
2608: IFFALSE 2647
// begin if IsInUnit ( i ) then
2610: LD_VAR 0 1
2614: PPUSH
2615: CALL_OW 310
2619: IFFALSE 2630
// ComExitBuilding ( i ) ;
2621: LD_VAR 0 1
2625: PPUSH
2626: CALL_OW 122
// AddComAgressiveMove ( i , 31 , 8 ) ;
2630: LD_VAR 0 1
2634: PPUSH
2635: LD_INT 31
2637: PPUSH
2638: LD_INT 8
2640: PPUSH
2641: CALL_OW 174
// end ;
2645: GO 2607
2647: POP
2648: POP
// wait ( 0 0$8 ) ;
2649: LD_INT 280
2651: PPUSH
2652: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) then
2656: LD_INT 22
2658: PUSH
2659: LD_INT 2
2661: PUSH
2662: EMPTY
2663: LIST
2664: LIST
2665: PUSH
2666: LD_INT 91
2668: PUSH
2669: LD_INT 3
2671: PUSH
2672: LD_INT 14
2674: PUSH
2675: EMPTY
2676: LIST
2677: LIST
2678: LIST
2679: PUSH
2680: EMPTY
2681: LIST
2682: LIST
2683: PPUSH
2684: CALL_OW 69
2688: IFFALSE 2738
// ComAttackUnit ( usForces , FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) [ 1 ] ) else
2690: LD_EXP 19
2694: PPUSH
2695: LD_INT 22
2697: PUSH
2698: LD_INT 2
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: PUSH
2705: LD_INT 91
2707: PUSH
2708: LD_INT 3
2710: PUSH
2711: LD_INT 14
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: LIST
2718: PUSH
2719: EMPTY
2720: LIST
2721: LIST
2722: PPUSH
2723: CALL_OW 69
2727: PUSH
2728: LD_INT 1
2730: ARRAY
2731: PPUSH
2732: CALL_OW 115
2736: GO 2760
// begin wait ( 0 0$20 ) ;
2738: LD_INT 700
2740: PPUSH
2741: CALL_OW 67
// AddComMoveXY ( usForces , 39 , 19 ) ;
2745: LD_EXP 19
2749: PPUSH
2750: LD_INT 39
2752: PPUSH
2753: LD_INT 19
2755: PPUSH
2756: CALL_OW 171
// end ; end ;
2760: PPOPN 1
2762: END
// every 0 0$3 trigger ( GetDistUnits ( Heike , Delta ) < 10 or GetLives ( usLab ) < 999 ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do var tmp , veh ;
2763: LD_EXP 21
2767: PPUSH
2768: LD_INT 1
2770: PPUSH
2771: CALL_OW 296
2775: PUSH
2776: LD_INT 10
2778: LESS
2779: PUSH
2780: LD_INT 3
2782: PPUSH
2783: CALL_OW 256
2787: PUSH
2788: LD_INT 999
2790: LESS
2791: OR
2792: PUSH
2793: LD_INT 22
2795: PUSH
2796: LD_INT 1
2798: PUSH
2799: EMPTY
2800: LIST
2801: LIST
2802: PUSH
2803: LD_INT 25
2805: PUSH
2806: LD_INT 2
2808: PUSH
2809: EMPTY
2810: LIST
2811: LIST
2812: PUSH
2813: EMPTY
2814: LIST
2815: LIST
2816: PPUSH
2817: CALL_OW 69
2821: AND
2822: IFFALSE 3006
2824: GO 2826
2826: DISABLE
2827: LD_INT 0
2829: PPUSH
2830: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
2831: LD_ADDR_VAR 0 1
2835: PUSH
2836: LD_INT 22
2838: PUSH
2839: LD_INT 1
2841: PUSH
2842: EMPTY
2843: LIST
2844: LIST
2845: PUSH
2846: LD_INT 25
2848: PUSH
2849: LD_INT 2
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: PUSH
2856: EMPTY
2857: LIST
2858: LIST
2859: PPUSH
2860: CALL_OW 69
2864: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2865: LD_ADDR_VAR 0 2
2869: PUSH
2870: LD_INT 22
2872: PUSH
2873: LD_INT 1
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: PUSH
2880: LD_INT 21
2882: PUSH
2883: LD_INT 2
2885: PUSH
2886: EMPTY
2887: LIST
2888: LIST
2889: PUSH
2890: LD_INT 58
2892: PUSH
2893: EMPTY
2894: LIST
2895: PUSH
2896: EMPTY
2897: LIST
2898: LIST
2899: LIST
2900: PPUSH
2901: CALL_OW 69
2905: ST_TO_ADDR
// if not tmp then
2906: LD_VAR 0 1
2910: NOT
2911: IFFALSE 2915
// exit ;
2913: GO 3006
// ComExitBuilding ( tmp ) ;
2915: LD_VAR 0 1
2919: PPUSH
2920: CALL_OW 122
// AddComDismantle ( tmp , usLab ) ;
2924: LD_VAR 0 1
2928: PPUSH
2929: LD_INT 3
2931: PPUSH
2932: CALL_OW 227
// if veh and IsOk ( Gladstone ) then
2936: LD_VAR 0 2
2940: PUSH
2941: LD_EXP 17
2945: PPUSH
2946: CALL_OW 302
2950: AND
2951: IFFALSE 3006
// begin if IsInUnit ( Gladstone ) then
2953: LD_EXP 17
2957: PPUSH
2958: CALL_OW 310
2962: IFFALSE 2973
// ComExitBuilding ( Gladstone ) ;
2964: LD_EXP 17
2968: PPUSH
2969: CALL_OW 122
// AddComEnterUnit ( Gladstone , veh [ 1 ] ) ;
2973: LD_EXP 17
2977: PPUSH
2978: LD_VAR 0 2
2982: PUSH
2983: LD_INT 1
2985: ARRAY
2986: PPUSH
2987: CALL_OW 180
// AddComAgressiveMove ( Gladstone , 39 , 14 ) ;
2991: LD_EXP 17
2995: PPUSH
2996: LD_INT 39
2998: PPUSH
2999: LD_INT 14
3001: PPUSH
3002: CALL_OW 174
// end ; end ;
3006: PPOPN 2
3008: END
// every 0 0$1 trigger usAlert and FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) do var i , tmp ;
3009: LD_EXP 9
3013: PUSH
3014: LD_INT 7
3016: PPUSH
3017: LD_INT 22
3019: PUSH
3020: LD_INT 1
3022: PUSH
3023: EMPTY
3024: LIST
3025: LIST
3026: PUSH
3027: LD_INT 21
3029: PUSH
3030: LD_INT 1
3032: PUSH
3033: EMPTY
3034: LIST
3035: LIST
3036: PUSH
3037: LD_INT 3
3039: PUSH
3040: LD_INT 24
3042: PUSH
3043: LD_INT 600
3045: PUSH
3046: EMPTY
3047: LIST
3048: LIST
3049: PUSH
3050: EMPTY
3051: LIST
3052: LIST
3053: PUSH
3054: EMPTY
3055: LIST
3056: LIST
3057: LIST
3058: PPUSH
3059: CALL_OW 70
3063: AND
3064: IFFALSE 3192
3066: GO 3068
3068: DISABLE
3069: LD_INT 0
3071: PPUSH
3072: PPUSH
// begin enable ;
3073: ENABLE
// tmp := FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) ;
3074: LD_ADDR_VAR 0 2
3078: PUSH
3079: LD_INT 7
3081: PPUSH
3082: LD_INT 22
3084: PUSH
3085: LD_INT 1
3087: PUSH
3088: EMPTY
3089: LIST
3090: LIST
3091: PUSH
3092: LD_INT 21
3094: PUSH
3095: LD_INT 1
3097: PUSH
3098: EMPTY
3099: LIST
3100: LIST
3101: PUSH
3102: LD_INT 3
3104: PUSH
3105: LD_INT 24
3107: PUSH
3108: LD_INT 600
3110: PUSH
3111: EMPTY
3112: LIST
3113: LIST
3114: PUSH
3115: EMPTY
3116: LIST
3117: LIST
3118: PUSH
3119: EMPTY
3120: LIST
3121: LIST
3122: LIST
3123: PPUSH
3124: CALL_OW 70
3128: ST_TO_ADDR
// if not tmp then
3129: LD_VAR 0 2
3133: NOT
3134: IFFALSE 3138
// exit ;
3136: GO 3192
// for i in tmp do
3138: LD_ADDR_VAR 0 1
3142: PUSH
3143: LD_VAR 0 2
3147: PUSH
3148: FOR_IN
3149: IFFALSE 3190
// if IsInUnit ( i ) then
3151: LD_VAR 0 1
3155: PPUSH
3156: CALL_OW 310
3160: IFFALSE 3173
// ComExitBuilding ( i ) else
3162: LD_VAR 0 1
3166: PPUSH
3167: CALL_OW 122
3171: GO 3188
// ComMoveXY ( i , 48 , 74 ) ;
3173: LD_VAR 0 1
3177: PPUSH
3178: LD_INT 48
3180: PPUSH
3181: LD_INT 74
3183: PPUSH
3184: CALL_OW 111
3188: GO 3148
3190: POP
3191: POP
// end ;
3192: PPOPN 2
3194: END
// every 5 5$00 do var i , un , tmp ;
3195: GO 3197
3197: DISABLE
3198: LD_INT 0
3200: PPUSH
3201: PPUSH
3202: PPUSH
// begin tmp := [ ] ;
3203: LD_ADDR_VAR 0 3
3207: PUSH
3208: EMPTY
3209: ST_TO_ADDR
// uc_side := 1 ;
3210: LD_ADDR_OWVAR 20
3214: PUSH
3215: LD_INT 1
3217: ST_TO_ADDR
// uc_nation := 1 ;
3218: LD_ADDR_OWVAR 21
3222: PUSH
3223: LD_INT 1
3225: ST_TO_ADDR
// case Difficulty of 1 :
3226: LD_OWVAR 67
3230: PUSH
3231: LD_INT 1
3233: DOUBLE
3234: EQUAL
3235: IFTRUE 3239
3237: GO 3342
3239: POP
// begin wait ( 1 1$00 ) ;
3240: LD_INT 2100
3242: PPUSH
3243: CALL_OW 67
// for i := 1 to 2 do
3247: LD_ADDR_VAR 0 1
3251: PUSH
3252: DOUBLE
3253: LD_INT 1
3255: DEC
3256: ST_TO_ADDR
3257: LD_INT 2
3259: PUSH
3260: FOR_TO
3261: IFFALSE 3338
// begin PrepareHuman ( false , [ 1 , 4 ] [ i mod 2 + 1 ] , 1 ) ;
3263: LD_INT 0
3265: PPUSH
3266: LD_INT 1
3268: PUSH
3269: LD_INT 4
3271: PUSH
3272: EMPTY
3273: LIST
3274: LIST
3275: PUSH
3276: LD_VAR 0 1
3280: PUSH
3281: LD_INT 2
3283: MOD
3284: PUSH
3285: LD_INT 1
3287: PLUS
3288: ARRAY
3289: PPUSH
3290: LD_INT 1
3292: PPUSH
3293: CALL_OW 380
// un := CreateHuman ;
3297: LD_ADDR_VAR 0 2
3301: PUSH
3302: CALL_OW 44
3306: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3307: LD_ADDR_VAR 0 3
3311: PUSH
3312: LD_VAR 0 3
3316: PPUSH
3317: LD_VAR 0 3
3321: PUSH
3322: LD_INT 1
3324: PLUS
3325: PPUSH
3326: LD_VAR 0 2
3330: PPUSH
3331: CALL_OW 1
3335: ST_TO_ADDR
// end ;
3336: GO 3260
3338: POP
3339: POP
// end ; 2 :
3340: GO 3736
3342: LD_INT 2
3344: DOUBLE
3345: EQUAL
3346: IFTRUE 3350
3348: GO 3484
3350: POP
// begin wait ( 0 0$30 ) ;
3351: LD_INT 1050
3353: PPUSH
3354: CALL_OW 67
// for i := 1 to 2 do
3358: LD_ADDR_VAR 0 1
3362: PUSH
3363: DOUBLE
3364: LD_INT 1
3366: DEC
3367: ST_TO_ADDR
3368: LD_INT 2
3370: PUSH
3371: FOR_TO
3372: IFFALSE 3428
// begin PrepareHuman ( false , 1 , 2 ) ;
3374: LD_INT 0
3376: PPUSH
3377: LD_INT 1
3379: PPUSH
3380: LD_INT 2
3382: PPUSH
3383: CALL_OW 380
// un := CreateHuman ;
3387: LD_ADDR_VAR 0 2
3391: PUSH
3392: CALL_OW 44
3396: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3397: LD_ADDR_VAR 0 3
3401: PUSH
3402: LD_VAR 0 3
3406: PPUSH
3407: LD_VAR 0 3
3411: PUSH
3412: LD_INT 1
3414: PLUS
3415: PPUSH
3416: LD_VAR 0 2
3420: PPUSH
3421: CALL_OW 1
3425: ST_TO_ADDR
// end ;
3426: GO 3371
3428: POP
3429: POP
// PrepareHuman ( false , 4 , 2 ) ;
3430: LD_INT 0
3432: PPUSH
3433: LD_INT 4
3435: PPUSH
3436: LD_INT 2
3438: PPUSH
3439: CALL_OW 380
// un := CreateHuman ;
3443: LD_ADDR_VAR 0 2
3447: PUSH
3448: CALL_OW 44
3452: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3453: LD_ADDR_VAR 0 3
3457: PUSH
3458: LD_VAR 0 3
3462: PPUSH
3463: LD_VAR 0 3
3467: PUSH
3468: LD_INT 1
3470: PLUS
3471: PPUSH
3472: LD_VAR 0 2
3476: PPUSH
3477: CALL_OW 1
3481: ST_TO_ADDR
// end ; 3 :
3482: GO 3736
3484: LD_INT 3
3486: DOUBLE
3487: EQUAL
3488: IFTRUE 3492
3490: GO 3735
3492: POP
// begin for i := 1 to 2 do
3493: LD_ADDR_VAR 0 1
3497: PUSH
3498: DOUBLE
3499: LD_INT 1
3501: DEC
3502: ST_TO_ADDR
3503: LD_INT 2
3505: PUSH
3506: FOR_TO
3507: IFFALSE 3563
// begin PrepareHuman ( false , 1 , 2 ) ;
3509: LD_INT 0
3511: PPUSH
3512: LD_INT 1
3514: PPUSH
3515: LD_INT 2
3517: PPUSH
3518: CALL_OW 380
// un := CreateHuman ;
3522: LD_ADDR_VAR 0 2
3526: PUSH
3527: CALL_OW 44
3531: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3532: LD_ADDR_VAR 0 3
3536: PUSH
3537: LD_VAR 0 3
3541: PPUSH
3542: LD_VAR 0 3
3546: PUSH
3547: LD_INT 1
3549: PLUS
3550: PPUSH
3551: LD_VAR 0 2
3555: PPUSH
3556: CALL_OW 1
3560: ST_TO_ADDR
// end ;
3561: GO 3506
3563: POP
3564: POP
// PrepareHuman ( false , 4 , 2 ) ;
3565: LD_INT 0
3567: PPUSH
3568: LD_INT 4
3570: PPUSH
3571: LD_INT 2
3573: PPUSH
3574: CALL_OW 380
// un := CreateHuman ;
3578: LD_ADDR_VAR 0 2
3582: PUSH
3583: CALL_OW 44
3587: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3588: LD_ADDR_VAR 0 3
3592: PUSH
3593: LD_VAR 0 3
3597: PPUSH
3598: LD_VAR 0 3
3602: PUSH
3603: LD_INT 1
3605: PLUS
3606: PPUSH
3607: LD_VAR 0 2
3611: PPUSH
3612: CALL_OW 1
3616: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_machine_gun , 90 ) ;
3617: LD_INT 1
3619: PPUSH
3620: LD_INT 1
3622: PPUSH
3623: LD_INT 2
3625: PPUSH
3626: LD_INT 2
3628: PPUSH
3629: LD_INT 1
3631: PPUSH
3632: LD_INT 2
3634: PPUSH
3635: LD_INT 90
3637: PPUSH
3638: CALL 284 0 7
// un := CreateVehicle ;
3642: LD_ADDR_VAR 0 2
3646: PUSH
3647: CALL_OW 45
3651: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3652: LD_ADDR_VAR 0 3
3656: PUSH
3657: LD_VAR 0 3
3661: PPUSH
3662: LD_VAR 0 3
3666: PUSH
3667: LD_INT 1
3669: PLUS
3670: PPUSH
3671: LD_VAR 0 2
3675: PPUSH
3676: CALL_OW 1
3680: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
3681: LD_INT 0
3683: PPUSH
3684: LD_INT 1
3686: PPUSH
3687: LD_INT 2
3689: PPUSH
3690: CALL_OW 380
// un := CreateHuman ;
3694: LD_ADDR_VAR 0 2
3698: PUSH
3699: CALL_OW 44
3703: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3704: LD_ADDR_VAR 0 3
3708: PUSH
3709: LD_VAR 0 3
3713: PPUSH
3714: LD_VAR 0 3
3718: PUSH
3719: LD_INT 1
3721: PLUS
3722: PPUSH
3723: LD_VAR 0 2
3727: PPUSH
3728: CALL_OW 1
3732: ST_TO_ADDR
// end ; end ;
3733: GO 3736
3735: POP
// for i := 1 to tmp do
3736: LD_ADDR_VAR 0 1
3740: PUSH
3741: DOUBLE
3742: LD_INT 1
3744: DEC
3745: ST_TO_ADDR
3746: LD_VAR 0 3
3750: PUSH
3751: FOR_TO
3752: IFFALSE 3917
// begin SetDir ( tmp [ i ] , 1 ) ;
3754: LD_VAR 0 3
3758: PUSH
3759: LD_VAR 0 1
3763: ARRAY
3764: PPUSH
3765: LD_INT 1
3767: PPUSH
3768: CALL_OW 233
// if GetType ( tmp [ i ] ) = unit_human then
3772: LD_VAR 0 3
3776: PUSH
3777: LD_VAR 0 1
3781: ARRAY
3782: PPUSH
3783: CALL_OW 247
3787: PUSH
3788: LD_INT 1
3790: EQUAL
3791: IFFALSE 3819
// PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) else
3793: LD_VAR 0 3
3797: PUSH
3798: LD_VAR 0 1
3802: ARRAY
3803: PPUSH
3804: LD_INT 28
3806: PPUSH
3807: LD_INT 52
3809: PPUSH
3810: LD_INT 0
3812: PPUSH
3813: CALL_OW 48
3817: GO 3887
// begin PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) ;
3819: LD_VAR 0 3
3823: PUSH
3824: LD_VAR 0 1
3828: ARRAY
3829: PPUSH
3830: LD_INT 28
3832: PPUSH
3833: LD_INT 52
3835: PPUSH
3836: LD_INT 0
3838: PPUSH
3839: CALL_OW 48
// i := i + 1 ;
3843: LD_ADDR_VAR 0 1
3847: PUSH
3848: LD_VAR 0 1
3852: PUSH
3853: LD_INT 1
3855: PLUS
3856: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ i ] , tmp [ i - 1 ] ) ;
3857: LD_VAR 0 3
3861: PUSH
3862: LD_VAR 0 1
3866: ARRAY
3867: PPUSH
3868: LD_VAR 0 3
3872: PUSH
3873: LD_VAR 0 1
3877: PUSH
3878: LD_INT 1
3880: MINUS
3881: ARRAY
3882: PPUSH
3883: CALL_OW 52
// end ; ComMoveXY ( tmp [ i ] , 43 , 56 ) ;
3887: LD_VAR 0 3
3891: PUSH
3892: LD_VAR 0 1
3896: ARRAY
3897: PPUSH
3898: LD_INT 43
3900: PPUSH
3901: LD_INT 56
3903: PPUSH
3904: CALL_OW 111
// wait ( 0 0$2 ) ;
3908: LD_INT 70
3910: PPUSH
3911: CALL_OW 67
// end ;
3915: GO 3751
3917: POP
3918: POP
// wait ( 0 0$2 ) ;
3919: LD_INT 70
3921: PPUSH
3922: CALL_OW 67
// if not FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) then
3926: LD_INT 7
3928: PPUSH
3929: LD_INT 22
3931: PUSH
3932: LD_INT 2
3934: PUSH
3935: EMPTY
3936: LIST
3937: LIST
3938: PPUSH
3939: CALL_OW 70
3943: NOT
3944: IFFALSE 4142
// begin AddComAgressiveMove ( tmp , 35 , 24 ) ;
3946: LD_VAR 0 3
3950: PPUSH
3951: LD_INT 35
3953: PPUSH
3954: LD_INT 24
3956: PPUSH
3957: CALL_OW 174
// usForces := usForces union UnitFilter ( tmp , [ f_class , 1 ] ) ;
3961: LD_ADDR_EXP 19
3965: PUSH
3966: LD_EXP 19
3970: PUSH
3971: LD_VAR 0 3
3975: PPUSH
3976: LD_INT 25
3978: PUSH
3979: LD_INT 1
3981: PUSH
3982: EMPTY
3983: LIST
3984: LIST
3985: PPUSH
3986: CALL_OW 72
3990: UNION
3991: ST_TO_ADDR
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
3992: LD_INT 22
3994: PUSH
3995: LD_INT 1
3997: PUSH
3998: EMPTY
3999: LIST
4000: LIST
4001: PUSH
4002: LD_INT 30
4004: PUSH
4005: LD_INT 4
4007: PUSH
4008: EMPTY
4009: LIST
4010: LIST
4011: PUSH
4012: EMPTY
4013: LIST
4014: LIST
4015: PPUSH
4016: CALL_OW 69
4020: PUSH
4021: LD_INT 1
4023: ARRAY
4024: PPUSH
4025: CALL_OW 313
4029: PUSH
4030: LD_INT 6
4032: LESS
4033: IFFALSE 4092
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 1 ] ) , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
4035: LD_VAR 0 3
4039: PPUSH
4040: LD_INT 25
4042: PUSH
4043: LD_INT 1
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: PPUSH
4050: CALL_OW 72
4054: PPUSH
4055: LD_INT 22
4057: PUSH
4058: LD_INT 1
4060: PUSH
4061: EMPTY
4062: LIST
4063: LIST
4064: PUSH
4065: LD_INT 30
4067: PUSH
4068: LD_INT 4
4070: PUSH
4071: EMPTY
4072: LIST
4073: LIST
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: PPUSH
4079: CALL_OW 69
4083: PUSH
4084: LD_INT 1
4086: ARRAY
4087: PPUSH
4088: CALL_OW 180
// if UnitFilter ( tmp , [ f_class , 4 ] ) then
4092: LD_VAR 0 3
4096: PPUSH
4097: LD_INT 25
4099: PUSH
4100: LD_INT 4
4102: PUSH
4103: EMPTY
4104: LIST
4105: LIST
4106: PPUSH
4107: CALL_OW 72
4111: IFFALSE 4140
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 4 ] ) , usLab ) ;
4113: LD_VAR 0 3
4117: PPUSH
4118: LD_INT 25
4120: PUSH
4121: LD_INT 4
4123: PUSH
4124: EMPTY
4125: LIST
4126: LIST
4127: PPUSH
4128: CALL_OW 72
4132: PPUSH
4133: LD_INT 3
4135: PPUSH
4136: CALL_OW 180
// end else
4140: GO 4417
// begin tmp := tmp union FilterUnitsInArea ( retreatArea , [ f_side , 1 ] ) ;
4142: LD_ADDR_VAR 0 3
4146: PUSH
4147: LD_VAR 0 3
4151: PUSH
4152: LD_INT 6
4154: PPUSH
4155: LD_INT 22
4157: PUSH
4158: LD_INT 1
4160: PUSH
4161: EMPTY
4162: LIST
4163: LIST
4164: PPUSH
4165: CALL_OW 70
4169: UNION
4170: ST_TO_ADDR
// ComMoveXY ( tmp , 45 , 54 ) ;
4171: LD_VAR 0 3
4175: PPUSH
4176: LD_INT 45
4178: PPUSH
4179: LD_INT 54
4181: PPUSH
4182: CALL_OW 111
// wait ( 0 0$3 ) ;
4186: LD_INT 105
4188: PPUSH
4189: CALL_OW 67
// AddComAgressiveMove ( tmp diff UnitFilter ( tmp , [ f_class , 4 ] ) , 35 , 24 ) ;
4193: LD_VAR 0 3
4197: PUSH
4198: LD_VAR 0 3
4202: PPUSH
4203: LD_INT 25
4205: PUSH
4206: LD_INT 4
4208: PUSH
4209: EMPTY
4210: LIST
4211: LIST
4212: PPUSH
4213: CALL_OW 72
4217: DIFF
4218: PPUSH
4219: LD_INT 35
4221: PPUSH
4222: LD_INT 24
4224: PPUSH
4225: CALL_OW 174
// AddComMoveXY ( UnitFilter ( tmp , [ f_class , 4 ] ) , 42 , 49 ) ;
4229: LD_VAR 0 3
4233: PPUSH
4234: LD_INT 25
4236: PUSH
4237: LD_INT 4
4239: PUSH
4240: EMPTY
4241: LIST
4242: LIST
4243: PPUSH
4244: CALL_OW 72
4248: PPUSH
4249: LD_INT 42
4251: PPUSH
4252: LD_INT 49
4254: PPUSH
4255: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4259: LD_INT 35
4261: PPUSH
4262: CALL_OW 67
// for i in tmp do
4266: LD_ADDR_VAR 0 1
4270: PUSH
4271: LD_VAR 0 3
4275: PUSH
4276: FOR_IN
4277: IFFALSE 4408
// if IsDead ( i ) then
4279: LD_VAR 0 1
4283: PPUSH
4284: CALL_OW 301
4288: IFFALSE 4308
// tmp := tmp diff i else
4290: LD_ADDR_VAR 0 3
4294: PUSH
4295: LD_VAR 0 3
4299: PUSH
4300: LD_VAR 0 1
4304: DIFF
4305: ST_TO_ADDR
4306: GO 4406
// if GetClass ( i ) = 1 then
4308: LD_VAR 0 1
4312: PPUSH
4313: CALL_OW 257
4317: PUSH
4318: LD_INT 1
4320: EQUAL
4321: IFFALSE 4406
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 42 , 49 ) > 6 then
4323: LD_VAR 0 1
4327: PPUSH
4328: CALL_OW 256
4332: PUSH
4333: LD_INT 600
4335: LESS
4336: PUSH
4337: LD_VAR 0 1
4341: PPUSH
4342: LD_INT 42
4344: PPUSH
4345: LD_INT 49
4347: PPUSH
4348: CALL_OW 297
4352: PUSH
4353: LD_INT 6
4355: GREATER
4356: AND
4357: IFFALSE 4376
// ComMoveXY ( i , 42 , 49 ) else
4359: LD_VAR 0 1
4363: PPUSH
4364: LD_INT 42
4366: PPUSH
4367: LD_INT 49
4369: PPUSH
4370: CALL_OW 111
4374: GO 4406
// if GetLives ( i ) = 1000 then
4376: LD_VAR 0 1
4380: PPUSH
4381: CALL_OW 256
4385: PUSH
4386: LD_INT 1000
4388: EQUAL
4389: IFFALSE 4406
// ComAgressiveMove ( i , 36 , 25 ) ;
4391: LD_VAR 0 1
4395: PPUSH
4396: LD_INT 36
4398: PPUSH
4399: LD_INT 25
4401: PPUSH
4402: CALL_OW 114
// end ;
4406: GO 4276
4408: POP
4409: POP
// until not tmp ;
4410: LD_VAR 0 3
4414: NOT
4415: IFFALSE 4259
// end ; end ;
4417: PPOPN 3
4419: END
// every 0 0$1 trigger FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) and not attackDeltaAllowed do var i , un , veh ;
4420: LD_INT 7
4422: PPUSH
4423: LD_INT 22
4425: PUSH
4426: LD_INT 2
4428: PUSH
4429: EMPTY
4430: LIST
4431: LIST
4432: PPUSH
4433: CALL_OW 70
4437: PUSH
4438: LD_EXP 12
4442: NOT
4443: AND
4444: IFFALSE 4602
4446: GO 4448
4448: DISABLE
4449: LD_INT 0
4451: PPUSH
4452: PPUSH
4453: PPUSH
// begin for i := 1 to 2 do
4454: LD_ADDR_VAR 0 1
4458: PUSH
4459: DOUBLE
4460: LD_INT 1
4462: DEC
4463: ST_TO_ADDR
4464: LD_INT 2
4466: PUSH
4467: FOR_TO
4468: IFFALSE 4600
// begin wait ( 0 0$3 ) ;
4470: LD_INT 105
4472: PPUSH
4473: CALL_OW 67
// uc_side := 1 ;
4477: LD_ADDR_OWVAR 20
4481: PUSH
4482: LD_INT 1
4484: ST_TO_ADDR
// uc_nation := 1 ;
4485: LD_ADDR_OWVAR 21
4489: PUSH
4490: LD_INT 1
4492: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 90 ) ;
4493: LD_INT 1
4495: PPUSH
4496: LD_INT 1
4498: PPUSH
4499: LD_INT 2
4501: PPUSH
4502: LD_INT 1
4504: PPUSH
4505: LD_INT 1
4507: PPUSH
4508: LD_INT 4
4510: PPUSH
4511: LD_INT 90
4513: PPUSH
4514: CALL 284 0 7
// veh := CreateVehicle ;
4518: LD_ADDR_VAR 0 3
4522: PUSH
4523: CALL_OW 45
4527: ST_TO_ADDR
// PlaceUnitXY ( veh , 29 , 52 , false ) ;
4528: LD_VAR 0 3
4532: PPUSH
4533: LD_INT 29
4535: PPUSH
4536: LD_INT 52
4538: PPUSH
4539: LD_INT 0
4541: PPUSH
4542: CALL_OW 48
// PrepareHuman ( false , 3 , 3 ) ;
4546: LD_INT 0
4548: PPUSH
4549: LD_INT 3
4551: PPUSH
4552: LD_INT 3
4554: PPUSH
4555: CALL_OW 380
// un := CreateHuman ;
4559: LD_ADDR_VAR 0 2
4563: PUSH
4564: CALL_OW 44
4568: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4569: LD_VAR 0 2
4573: PPUSH
4574: LD_VAR 0 3
4578: PPUSH
4579: CALL_OW 52
// ComAgressiveMove ( veh , 36 , 25 ) ;
4583: LD_VAR 0 3
4587: PPUSH
4588: LD_INT 36
4590: PPUSH
4591: LD_INT 25
4593: PPUSH
4594: CALL_OW 114
// end ;
4598: GO 4467
4600: POP
4601: POP
// end ; end_of_file
4602: PPOPN 3
4604: END
// export function Action ; var i , tmp ; begin
4605: LD_INT 0
4607: PPUSH
4608: PPUSH
4609: PPUSH
// InGameOn ;
4610: CALL_OW 8
// DoNotAttack ( 2 , usLab ) ;
4614: LD_INT 2
4616: PPUSH
4617: LD_INT 3
4619: PPUSH
4620: CALL_OW 471
// ComMoveXY ( Heike , 78 , 61 ) ;
4624: LD_EXP 21
4628: PPUSH
4629: LD_INT 78
4631: PPUSH
4632: LD_INT 61
4634: PPUSH
4635: CALL_OW 111
// if Mike then
4639: LD_EXP 23
4643: IFFALSE 4660
// ComMoveXY ( Mike , 80 , 66 ) ;
4645: LD_EXP 23
4649: PPUSH
4650: LD_INT 80
4652: PPUSH
4653: LD_INT 66
4655: PPUSH
4656: CALL_OW 111
// if Givi then
4660: LD_EXP 22
4664: IFFALSE 4681
// ComMoveXY ( Givi , 82 , 66 ) ;
4666: LD_EXP 22
4670: PPUSH
4671: LD_INT 82
4673: PPUSH
4674: LD_INT 66
4676: PPUSH
4677: CALL_OW 111
// if Kamil then
4681: LD_EXP 24
4685: IFFALSE 4702
// ComMoveXY ( Kamil , 82 , 67 ) ;
4687: LD_EXP 24
4691: PPUSH
4692: LD_INT 82
4694: PPUSH
4695: LD_INT 67
4697: PPUSH
4698: CALL_OW 111
// CenterNowOnUnits ( Heike ) ;
4702: LD_EXP 21
4706: PPUSH
4707: CALL_OW 87
// wait ( 0 0$2 ) ;
4711: LD_INT 70
4713: PPUSH
4714: CALL_OW 67
// if Givi and Mike then
4718: LD_EXP 22
4722: PUSH
4723: LD_EXP 23
4727: AND
4728: IFFALSE 5174
// begin AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
4730: LD_EXP 22
4734: PUSH
4735: LD_EXP 23
4739: PUSH
4740: LD_EXP 24
4744: PUSH
4745: EMPTY
4746: LIST
4747: LIST
4748: LIST
4749: PPUSH
4750: LD_EXP 21
4754: PPUSH
4755: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
4759: LD_EXP 21
4763: PPUSH
4764: LD_EXP 22
4768: PPUSH
4769: CALL_OW 179
// Say ( Givi , DG-1-start ) ;
4773: LD_EXP 22
4777: PPUSH
4778: LD_STRING DG-1-start
4780: PPUSH
4781: CALL_OW 88
// Say ( Heike , DH-1-start ) ;
4785: LD_EXP 21
4789: PPUSH
4790: LD_STRING DH-1-start
4792: PPUSH
4793: CALL_OW 88
// AddComTurnUnit ( Mike , Heike ) ;
4797: LD_EXP 23
4801: PPUSH
4802: LD_EXP 21
4806: PPUSH
4807: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
4811: LD_EXP 21
4815: PPUSH
4816: LD_EXP 23
4820: PPUSH
4821: CALL_OW 179
// Say ( Mike , DM-1-start ) ;
4825: LD_EXP 23
4829: PPUSH
4830: LD_STRING DM-1-start
4832: PPUSH
4833: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
4837: LD_EXP 21
4841: PPUSH
4842: LD_STRING DH-2-start
4844: PPUSH
4845: CALL_OW 88
// Say ( Mike , DM-2-start ) ;
4849: LD_EXP 23
4853: PPUSH
4854: LD_STRING DM-2-start
4856: PPUSH
4857: CALL_OW 88
// Say ( Givi , DG-2-start ) ;
4861: LD_EXP 22
4865: PPUSH
4866: LD_STRING DG-2-start
4868: PPUSH
4869: CALL_OW 88
// ComTurnUnit ( Mike , Givi ) ;
4873: LD_EXP 23
4877: PPUSH
4878: LD_EXP 22
4882: PPUSH
4883: CALL_OW 119
// ComTurnUnit ( Heike , Mike ) ;
4887: LD_EXP 21
4891: PPUSH
4892: LD_EXP 23
4896: PPUSH
4897: CALL_OW 119
// Say ( Mike , DM-3-start ) ;
4901: LD_EXP 23
4905: PPUSH
4906: LD_STRING DM-3-start
4908: PPUSH
4909: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
4913: LD_EXP 21
4917: PPUSH
4918: LD_STRING DH-3-start
4920: PPUSH
4921: CALL_OW 88
// ComMoveXY ( [ Heike , Mike , Givi , Kamil ] , 84 , 51 ) ;
4925: LD_EXP 21
4929: PUSH
4930: LD_EXP 23
4934: PUSH
4935: LD_EXP 22
4939: PUSH
4940: LD_EXP 24
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: LIST
4949: LIST
4950: PPUSH
4951: LD_INT 84
4953: PPUSH
4954: LD_INT 51
4956: PPUSH
4957: CALL_OW 111
// wait ( 0 0$2 ) ;
4961: LD_INT 70
4963: PPUSH
4964: CALL_OW 67
// Say ( Givi , DG-3-start ) ;
4968: LD_EXP 22
4972: PPUSH
4973: LD_STRING DG-3-start
4975: PPUSH
4976: CALL_OW 88
// ComHold ( [ Heike , Mike , Givi , Kamil ] ) ;
4980: LD_EXP 21
4984: PUSH
4985: LD_EXP 23
4989: PUSH
4990: LD_EXP 22
4994: PUSH
4995: LD_EXP 24
4999: PUSH
5000: EMPTY
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: PPUSH
5006: CALL_OW 140
// AddComTurnUnit ( Heike , Givi ) ;
5010: LD_EXP 21
5014: PPUSH
5015: LD_EXP 22
5019: PPUSH
5020: CALL_OW 179
// AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
5024: LD_EXP 22
5028: PUSH
5029: LD_EXP 23
5033: PUSH
5034: LD_EXP 24
5038: PUSH
5039: EMPTY
5040: LIST
5041: LIST
5042: LIST
5043: PPUSH
5044: LD_EXP 21
5048: PPUSH
5049: CALL_OW 179
// Say ( Heike , DH-4-start ) ;
5053: LD_EXP 21
5057: PPUSH
5058: LD_STRING DH-4-start
5060: PPUSH
5061: CALL_OW 88
// Say ( Givi , DG-4-start ) ;
5065: LD_EXP 22
5069: PPUSH
5070: LD_STRING DG-4-start
5072: PPUSH
5073: CALL_OW 88
// Say ( Heike , DH-5-start ) ;
5077: LD_EXP 21
5081: PPUSH
5082: LD_STRING DH-5-start
5084: PPUSH
5085: CALL_OW 88
// Say ( Givi , DG-5-start ) ;
5089: LD_EXP 22
5093: PPUSH
5094: LD_STRING DG-5-start
5096: PPUSH
5097: CALL_OW 88
// Say ( Heike , DH-6-start ) ;
5101: LD_EXP 21
5105: PPUSH
5106: LD_STRING DH-6-start
5108: PPUSH
5109: CALL_OW 88
// Say ( Mike , DM-6-start ) ;
5113: LD_EXP 23
5117: PPUSH
5118: LD_STRING DM-6-start
5120: PPUSH
5121: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi ] , Mike ) ;
5125: LD_EXP 21
5129: PUSH
5130: LD_EXP 22
5134: PUSH
5135: EMPTY
5136: LIST
5137: LIST
5138: PPUSH
5139: LD_EXP 23
5143: PPUSH
5144: CALL_OW 119
// Say ( Givi , DG-6-start ) ;
5148: LD_EXP 22
5152: PPUSH
5153: LD_STRING DG-6-start
5155: PPUSH
5156: CALL_OW 88
// Say ( Heike , DH-7-start ) ;
5160: LD_EXP 21
5164: PPUSH
5165: LD_STRING DH-7-start
5167: PPUSH
5168: CALL_OW 88
// end else
5172: GO 5896
// if not Mike and Givi then
5174: LD_EXP 23
5178: NOT
5179: PUSH
5180: LD_EXP 22
5184: AND
5185: IFFALSE 5530
// begin AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5187: LD_EXP 22
5191: PUSH
5192: LD_EXP 24
5196: PUSH
5197: EMPTY
5198: LIST
5199: LIST
5200: PPUSH
5201: LD_EXP 21
5205: PPUSH
5206: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
5210: LD_EXP 21
5214: PPUSH
5215: LD_EXP 22
5219: PPUSH
5220: CALL_OW 179
// Say ( Givi , DG-1-start-c ) ;
5224: LD_EXP 22
5228: PPUSH
5229: LD_STRING DG-1-start-c
5231: PPUSH
5232: CALL_OW 88
// Say ( Heike , DH-1-start-c ) ;
5236: LD_EXP 21
5240: PPUSH
5241: LD_STRING DH-1-start-c
5243: PPUSH
5244: CALL_OW 88
// Say ( Givi , DG-2-start-c ) ;
5248: LD_EXP 22
5252: PPUSH
5253: LD_STRING DG-2-start-c
5255: PPUSH
5256: CALL_OW 88
// Say ( Heike , DH-2-start-c ) ;
5260: LD_EXP 21
5264: PPUSH
5265: LD_STRING DH-2-start-c
5267: PPUSH
5268: CALL_OW 88
// Say ( Givi , DG-3-start-c ) ;
5272: LD_EXP 22
5276: PPUSH
5277: LD_STRING DG-3-start-c
5279: PPUSH
5280: CALL_OW 88
// ComMoveXY ( Heike , 83 , 56 ) ;
5284: LD_EXP 21
5288: PPUSH
5289: LD_INT 83
5291: PPUSH
5292: LD_INT 56
5294: PPUSH
5295: CALL_OW 111
// ComMoveXY ( Givi , 83 , 59 ) ;
5299: LD_EXP 22
5303: PPUSH
5304: LD_INT 83
5306: PPUSH
5307: LD_INT 59
5309: PPUSH
5310: CALL_OW 111
// if Kamil then
5314: LD_EXP 24
5318: IFFALSE 5335
// ComMoveXY ( Kamil , 80 , 58 ) ;
5320: LD_EXP 24
5324: PPUSH
5325: LD_INT 80
5327: PPUSH
5328: LD_INT 58
5330: PPUSH
5331: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5335: LD_EXP 21
5339: PPUSH
5340: LD_EXP 22
5344: PPUSH
5345: CALL_OW 179
// AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5349: LD_EXP 22
5353: PUSH
5354: LD_EXP 24
5358: PUSH
5359: EMPTY
5360: LIST
5361: LIST
5362: PPUSH
5363: LD_EXP 21
5367: PPUSH
5368: CALL_OW 179
// Say ( Heike , DH-3-start-c ) ;
5372: LD_EXP 21
5376: PPUSH
5377: LD_STRING DH-3-start-c
5379: PPUSH
5380: CALL_OW 88
// Say ( Givi , DG-4-start-c ) ;
5384: LD_EXP 22
5388: PPUSH
5389: LD_STRING DG-4-start-c
5391: PPUSH
5392: CALL_OW 88
// Say ( Heike , DH-5-start-c ) ;
5396: LD_EXP 21
5400: PPUSH
5401: LD_STRING DH-5-start-c
5403: PPUSH
5404: CALL_OW 88
// Say ( Givi , DG-5-start-c ) ;
5408: LD_EXP 22
5412: PPUSH
5413: LD_STRING DG-5-start-c
5415: PPUSH
5416: CALL_OW 88
// Say ( Heike , DH-6-start-c ) ;
5420: LD_EXP 21
5424: PPUSH
5425: LD_STRING DH-6-start-c
5427: PPUSH
5428: CALL_OW 88
// Say ( Givi , DG-6-start-c ) ;
5432: LD_EXP 22
5436: PPUSH
5437: LD_STRING DG-6-start-c
5439: PPUSH
5440: CALL_OW 88
// if Kamil then
5444: LD_EXP 24
5448: IFFALSE 5504
// begin ComTurnUnit ( Kamil , Heike ) ;
5450: LD_EXP 24
5454: PPUSH
5455: LD_EXP 21
5459: PPUSH
5460: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5464: LD_EXP 24
5468: PPUSH
5469: LD_STRING DKam-1-start-c
5471: PPUSH
5472: CALL_OW 88
// ComTurnUnit ( Givi , Kamil ) ;
5476: LD_EXP 22
5480: PPUSH
5481: LD_EXP 24
5485: PPUSH
5486: CALL_OW 119
// Say ( Givi , DG-7-start-c ) ;
5490: LD_EXP 22
5494: PPUSH
5495: LD_STRING DG-7-start-c
5497: PPUSH
5498: CALL_OW 88
// end else
5502: GO 5528
// begin Say ( Givi , DG-8-start-c ) ;
5504: LD_EXP 22
5508: PPUSH
5509: LD_STRING DG-8-start-c
5511: PPUSH
5512: CALL_OW 88
// Say ( Heike , DH-7-start-c ) ;
5516: LD_EXP 21
5520: PPUSH
5521: LD_STRING DH-7-start-c
5523: PPUSH
5524: CALL_OW 88
// end ; end else
5528: GO 5896
// if not Givi and Mike then
5530: LD_EXP 22
5534: NOT
5535: PUSH
5536: LD_EXP 23
5540: AND
5541: IFFALSE 5800
// begin AddComTurnUnit ( [ Mike , Kamil ] , Heike ) ;
5543: LD_EXP 23
5547: PUSH
5548: LD_EXP 24
5552: PUSH
5553: EMPTY
5554: LIST
5555: LIST
5556: PPUSH
5557: LD_EXP 21
5561: PPUSH
5562: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
5566: LD_EXP 21
5570: PPUSH
5571: LD_EXP 23
5575: PPUSH
5576: CALL_OW 179
// Say ( Mike , DM-1-start-b ) ;
5580: LD_EXP 23
5584: PPUSH
5585: LD_STRING DM-1-start-b
5587: PPUSH
5588: CALL_OW 88
// Say ( Heike , DH-1-start-b ) ;
5592: LD_EXP 21
5596: PPUSH
5597: LD_STRING DH-1-start-b
5599: PPUSH
5600: CALL_OW 88
// Say ( Mike , DM-2-start-b ) ;
5604: LD_EXP 23
5608: PPUSH
5609: LD_STRING DM-2-start-b
5611: PPUSH
5612: CALL_OW 88
// Say ( Heike , DH-2-start-b ) ;
5616: LD_EXP 21
5620: PPUSH
5621: LD_STRING DH-2-start-b
5623: PPUSH
5624: CALL_OW 88
// Say ( Mike , DM-3-start-b ) ;
5628: LD_EXP 23
5632: PPUSH
5633: LD_STRING DM-3-start-b
5635: PPUSH
5636: CALL_OW 88
// if Kamil then
5640: LD_EXP 24
5644: IFFALSE 5661
// ComMoveXY ( Kamil , 80 , 58 ) ;
5646: LD_EXP 24
5650: PPUSH
5651: LD_INT 80
5653: PPUSH
5654: LD_INT 58
5656: PPUSH
5657: CALL_OW 111
// ComMoveXY ( Heike , 83 , 56 ) ;
5661: LD_EXP 21
5665: PPUSH
5666: LD_INT 83
5668: PPUSH
5669: LD_INT 56
5671: PPUSH
5672: CALL_OW 111
// ComMoveXY ( Mike , 83 , 59 ) ;
5676: LD_EXP 23
5680: PPUSH
5681: LD_INT 83
5683: PPUSH
5684: LD_INT 59
5686: PPUSH
5687: CALL_OW 111
// AddComTurnUnit ( Heike , Mike ) ;
5691: LD_EXP 21
5695: PPUSH
5696: LD_EXP 23
5700: PPUSH
5701: CALL_OW 179
// AddComTurnUnit ( [ Kamil , Mike ] , Heike ) ;
5705: LD_EXP 24
5709: PUSH
5710: LD_EXP 23
5714: PUSH
5715: EMPTY
5716: LIST
5717: LIST
5718: PPUSH
5719: LD_EXP 21
5723: PPUSH
5724: CALL_OW 179
// Say ( Heike , DH-3-start-b ) ;
5728: LD_EXP 21
5732: PPUSH
5733: LD_STRING DH-3-start-b
5735: PPUSH
5736: CALL_OW 88
// Say ( Mike , DM-4-start-b ) ;
5740: LD_EXP 23
5744: PPUSH
5745: LD_STRING DM-4-start-b
5747: PPUSH
5748: CALL_OW 88
// if Kamil then
5752: LD_EXP 24
5756: IFFALSE 5786
// begin ComTurnUnit ( Kamil , Heike ) ;
5758: LD_EXP 24
5762: PPUSH
5763: LD_EXP 21
5767: PPUSH
5768: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5772: LD_EXP 24
5776: PPUSH
5777: LD_STRING DKam-1-start-c
5779: PPUSH
5780: CALL_OW 88
// end else
5784: GO 5798
// begin Say ( Mike , DM-5-start-b ) ;
5786: LD_EXP 23
5790: PPUSH
5791: LD_STRING DM-5-start-b
5793: PPUSH
5794: CALL_OW 88
// end ; end else
5798: GO 5896
// if Kamil then
5800: LD_EXP 24
5804: IFFALSE 5884
// begin AddComTurnUnit ( Heike , Kamil ) ;
5806: LD_EXP 21
5810: PPUSH
5811: LD_EXP 24
5815: PPUSH
5816: CALL_OW 179
// AddComTurnUnit ( Kamil , Heike ) ;
5820: LD_EXP 24
5824: PPUSH
5825: LD_EXP 21
5829: PPUSH
5830: CALL_OW 179
// Say ( Heike , DH-1-start-f ) ;
5834: LD_EXP 21
5838: PPUSH
5839: LD_STRING DH-1-start-f
5841: PPUSH
5842: CALL_OW 88
// Say ( Kamil , DKam-1-start-f ) ;
5846: LD_EXP 24
5850: PPUSH
5851: LD_STRING DKam-1-start-f
5853: PPUSH
5854: CALL_OW 88
// Say ( Heike , DH-2-start-f ) ;
5858: LD_EXP 21
5862: PPUSH
5863: LD_STRING DH-2-start-f
5865: PPUSH
5866: CALL_OW 88
// Say ( Kamil , DKam-2-start-f ) ;
5870: LD_EXP 24
5874: PPUSH
5875: LD_STRING DKam-2-start-f
5877: PPUSH
5878: CALL_OW 88
// end else
5882: GO 5896
// begin Say ( Heike , DH-1-start-d ) ;
5884: LD_EXP 21
5888: PPUSH
5889: LD_STRING DH-1-start-d
5891: PPUSH
5892: CALL_OW 88
// end ; ComFree ( [ Heike , Givi , Mike , Kamil ] ) ;
5896: LD_EXP 21
5900: PUSH
5901: LD_EXP 22
5905: PUSH
5906: LD_EXP 23
5910: PUSH
5911: LD_EXP 24
5915: PUSH
5916: EMPTY
5917: LIST
5918: LIST
5919: LIST
5920: LIST
5921: PPUSH
5922: CALL_OW 139
// InGameOff ;
5926: CALL_OW 9
// ChangeMissionObjectives ( OEast ) ;
5930: LD_STRING OEast
5932: PPUSH
5933: CALL_OW 337
// SaveForQuickRestart ;
5937: CALL_OW 22
// wait ( 0 0$20 ) ;
5941: LD_INT 700
5943: PPUSH
5944: CALL_OW 67
// SendSciToForest ;
5948: CALL 1374 0 0
// if Difficulty = 1 then
5952: LD_OWVAR 67
5956: PUSH
5957: LD_INT 1
5959: EQUAL
5960: IFFALSE 5964
// exit ;
5962: GO 6081
// wait ( [ 5 5$00 , 2 2$30 ] [ Difficulty - 1 ] ) ;
5964: LD_INT 10500
5966: PUSH
5967: LD_INT 5250
5969: PUSH
5970: EMPTY
5971: LIST
5972: LIST
5973: PUSH
5974: LD_OWVAR 67
5978: PUSH
5979: LD_INT 1
5981: MINUS
5982: ARRAY
5983: PPUSH
5984: CALL_OW 67
// if usAlert then
5988: LD_EXP 9
5992: IFFALSE 5996
// exit ;
5994: GO 6081
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
5996: LD_ADDR_VAR 0 3
6000: PUSH
6001: LD_INT 22
6003: PUSH
6004: LD_INT 1
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PUSH
6011: LD_INT 25
6013: PUSH
6014: LD_INT 2
6016: PUSH
6017: EMPTY
6018: LIST
6019: LIST
6020: PUSH
6021: EMPTY
6022: LIST
6023: LIST
6024: PPUSH
6025: CALL_OW 69
6029: ST_TO_ADDR
// if not tmp then
6030: LD_VAR 0 3
6034: NOT
6035: IFFALSE 6039
// exit ;
6037: GO 6081
// ComExitBuilding ( tmp ) ;
6039: LD_VAR 0 3
6043: PPUSH
6044: CALL_OW 122
// AddComBuild ( tmp , b_breastwork , 40 , 13 , 3 ) ;
6048: LD_VAR 0 3
6052: PPUSH
6053: LD_INT 31
6055: PPUSH
6056: LD_INT 40
6058: PPUSH
6059: LD_INT 13
6061: PPUSH
6062: LD_INT 3
6064: PPUSH
6065: CALL_OW 205
// AddComEnterUnit ( tmp , Delta ) ;
6069: LD_VAR 0 3
6073: PPUSH
6074: LD_INT 1
6076: PPUSH
6077: CALL_OW 180
// end ;
6081: LD_VAR 0 1
6085: RET
// every 3 3$00 do
6086: GO 6088
6088: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
6089: LD_INT 1
6091: PPUSH
6092: LD_INT 570
6094: PPUSH
6095: LD_INT 350
6097: PPUSH
6098: CALL_OW 550
// wait ( 2 2$40 ) ;
6102: LD_INT 5600
6104: PPUSH
6105: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
6109: LD_INT 0
6111: PPUSH
6112: LD_INT 570
6114: PPUSH
6115: LD_INT 350
6117: PPUSH
6118: CALL_OW 550
// end ;
6122: END
// every 0 0$1 trigger not aviradzeSpotted and See ( 2 , Aviradze ) do var i , pepAmount ;
6123: LD_EXP 4
6127: NOT
6128: PUSH
6129: LD_INT 2
6131: PPUSH
6132: LD_EXP 25
6136: PPUSH
6137: CALL_OW 292
6141: AND
6142: IFFALSE 7077
6144: GO 6146
6146: DISABLE
6147: LD_INT 0
6149: PPUSH
6150: PPUSH
// begin aviradzeSpotted := true ;
6151: LD_ADDR_EXP 4
6155: PUSH
6156: LD_INT 1
6158: ST_TO_ADDR
// pepAmount := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ;
6159: LD_ADDR_VAR 0 2
6163: PUSH
6164: LD_INT 22
6166: PUSH
6167: LD_INT 2
6169: PUSH
6170: EMPTY
6171: LIST
6172: LIST
6173: PUSH
6174: LD_INT 21
6176: PUSH
6177: LD_INT 1
6179: PUSH
6180: EMPTY
6181: LIST
6182: LIST
6183: PUSH
6184: EMPTY
6185: LIST
6186: LIST
6187: PPUSH
6188: CALL_OW 69
6192: ST_TO_ADDR
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6193: LD_EXP 21
6197: PPUSH
6198: LD_EXP 25
6202: PPUSH
6203: CALL_OW 250
6207: PPUSH
6208: LD_EXP 25
6212: PPUSH
6213: CALL_OW 251
6217: PPUSH
6218: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6222: LD_INT 35
6224: PPUSH
6225: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 16 ;
6229: LD_EXP 21
6233: PPUSH
6234: LD_EXP 25
6238: PPUSH
6239: CALL_OW 296
6243: PUSH
6244: LD_INT 16
6246: LESS
6247: IFFALSE 6222
// InGameOn ;
6249: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
6253: LD_INT 5
6255: PPUSH
6256: LD_INT 2
6258: PPUSH
6259: CALL_OW 343
// if pepAmount > 2 then
6263: LD_VAR 0 2
6267: PUSH
6268: LD_INT 2
6270: GREATER
6271: IFFALSE 6287
// Say ( Heike , DH-1-spot ) else
6273: LD_EXP 21
6277: PPUSH
6278: LD_STRING DH-1-spot
6280: PPUSH
6281: CALL_OW 88
6285: GO 6299
// Say ( Heike , DH-1-spot-d ) ;
6287: LD_EXP 21
6291: PPUSH
6292: LD_STRING DH-1-spot-d
6294: PPUSH
6295: CALL_OW 88
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6299: LD_EXP 21
6303: PPUSH
6304: LD_EXP 25
6308: PPUSH
6309: CALL_OW 250
6313: PPUSH
6314: LD_EXP 25
6318: PPUSH
6319: CALL_OW 251
6323: PPUSH
6324: CALL_OW 111
// for i in [ Kamil , Mike , Givi ] do
6328: LD_ADDR_VAR 0 1
6332: PUSH
6333: LD_EXP 24
6337: PUSH
6338: LD_EXP 23
6342: PUSH
6343: LD_EXP 22
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: LIST
6352: PUSH
6353: FOR_IN
6354: IFFALSE 6393
// if GetDistUnits ( i , Aviradze ) > 7 then
6356: LD_VAR 0 1
6360: PPUSH
6361: LD_EXP 25
6365: PPUSH
6366: CALL_OW 296
6370: PUSH
6371: LD_INT 7
6373: GREATER
6374: IFFALSE 6391
// ComMoveXY ( i , 102 , 40 ) ;
6376: LD_VAR 0 1
6380: PPUSH
6381: LD_INT 102
6383: PPUSH
6384: LD_INT 40
6386: PPUSH
6387: CALL_OW 111
6391: GO 6353
6393: POP
6394: POP
// repeat wait ( 0 0$1 ) ;
6395: LD_INT 35
6397: PPUSH
6398: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 6 ;
6402: LD_EXP 21
6406: PPUSH
6407: LD_EXP 25
6411: PPUSH
6412: CALL_OW 296
6416: PUSH
6417: LD_INT 6
6419: LESS
6420: IFFALSE 6395
// ComTurnUnit ( Heike , Aviradze ) ;
6422: LD_EXP 21
6426: PPUSH
6427: LD_EXP 25
6431: PPUSH
6432: CALL_OW 119
// ComTurnUnit ( [ Aviradze , Sophia , Kaia ] , Heike ) ;
6436: LD_EXP 25
6440: PUSH
6441: LD_EXP 27
6445: PUSH
6446: LD_EXP 26
6450: PUSH
6451: EMPTY
6452: LIST
6453: LIST
6454: LIST
6455: PPUSH
6456: LD_EXP 21
6460: PPUSH
6461: CALL_OW 119
// if pepAmount > 1 then
6465: LD_VAR 0 2
6469: PUSH
6470: LD_INT 1
6472: GREATER
6473: IFFALSE 6525
// begin wait ( 0 0$2 ) ;
6475: LD_INT 70
6477: PPUSH
6478: CALL_OW 67
// ComTurnUnit ( [ Kamil , Mike , Givi ] , Aviradze ) ;
6482: LD_EXP 24
6486: PUSH
6487: LD_EXP 23
6491: PUSH
6492: LD_EXP 22
6496: PUSH
6497: EMPTY
6498: LIST
6499: LIST
6500: LIST
6501: PPUSH
6502: LD_EXP 25
6506: PPUSH
6507: CALL_OW 119
// Say ( Heike , DH-2-spot ) ;
6511: LD_EXP 21
6515: PPUSH
6516: LD_STRING DH-2-spot
6518: PPUSH
6519: CALL_OW 88
// end else
6523: GO 6537
// Say ( Heike , DH-2-spot-d ) ;
6525: LD_EXP 21
6529: PPUSH
6530: LD_STRING DH-2-spot-d
6532: PPUSH
6533: CALL_OW 88
// Say ( Aviradze , DA-2-spot ) ;
6537: LD_EXP 25
6541: PPUSH
6542: LD_STRING DA-2-spot
6544: PPUSH
6545: CALL_OW 88
// Say ( Heike , DH-3-spot ) ;
6549: LD_EXP 21
6553: PPUSH
6554: LD_STRING DH-3-spot
6556: PPUSH
6557: CALL_OW 88
// ComMoveUnit ( Kaia , Heike ) ;
6561: LD_EXP 26
6565: PPUSH
6566: LD_EXP 21
6570: PPUSH
6571: CALL_OW 112
// ComTurnUNit ( Heike , Kaia ) ;
6575: LD_EXP 21
6579: PPUSH
6580: LD_EXP 26
6584: PPUSH
6585: CALL_OW 119
// wait ( 0 0$0.3 ) ;
6589: LD_INT 10
6591: PPUSH
6592: CALL_OW 67
// async ;
6596: ASYNC
// Say ( Kaia , DK-3-spot ) ;
6597: LD_EXP 26
6601: PPUSH
6602: LD_STRING DK-3-spot
6604: PPUSH
6605: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
6609: LD_INT 35
6611: PPUSH
6612: CALL_OW 67
// until GetDistUnits ( Heike , Kaia ) < 4 ;
6616: LD_EXP 21
6620: PPUSH
6621: LD_EXP 26
6625: PPUSH
6626: CALL_OW 296
6630: PUSH
6631: LD_INT 4
6633: LESS
6634: IFFALSE 6609
// ComTurnUnit ( Kaia , Heike ) ;
6636: LD_EXP 26
6640: PPUSH
6641: LD_EXP 21
6645: PPUSH
6646: CALL_OW 119
// sync ;
6650: SYNC
// Say ( Heike , DH-4-spot ) ;
6651: LD_EXP 21
6655: PPUSH
6656: LD_STRING DH-4-spot
6658: PPUSH
6659: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6663: LD_INT 10
6665: PPUSH
6666: CALL_OW 67
// ComTurnUnit ( Heike , Aviradze ) ;
6670: LD_EXP 21
6674: PPUSH
6675: LD_EXP 25
6679: PPUSH
6680: CALL_OW 119
// Say ( Aviradze , DA-4-spot ) ;
6684: LD_EXP 25
6688: PPUSH
6689: LD_STRING DA-4-spot
6691: PPUSH
6692: CALL_OW 88
// ComTurnUnit ( Kaia , Aviradze ) ;
6696: LD_EXP 26
6700: PPUSH
6701: LD_EXP 25
6705: PPUSH
6706: CALL_OW 119
// Say ( Kaia , DK-4-spot ) ;
6710: LD_EXP 26
6714: PPUSH
6715: LD_STRING DK-4-spot
6717: PPUSH
6718: CALL_OW 88
// ComTurnUnit ( Aviradze , Kaia ) ;
6722: LD_EXP 25
6726: PPUSH
6727: LD_EXP 26
6731: PPUSH
6732: CALL_OW 119
// Say ( Aviradze , DA-5-spot ) ;
6736: LD_EXP 25
6740: PPUSH
6741: LD_STRING DA-5-spot
6743: PPUSH
6744: CALL_OW 88
// Say ( Kaia , DK-5-spot ) ;
6748: LD_EXP 26
6752: PPUSH
6753: LD_STRING DK-5-spot
6755: PPUSH
6756: CALL_OW 88
// if pepAmount = 1 then
6760: LD_VAR 0 2
6764: PUSH
6765: LD_INT 1
6767: EQUAL
6768: IFFALSE 6782
// Say ( Heike , DH-5-spot-f ) ;
6770: LD_EXP 21
6774: PPUSH
6775: LD_STRING DH-5-spot-f
6777: PPUSH
6778: CALL_OW 88
// if pepAmount < 3 then
6782: LD_VAR 0 2
6786: PUSH
6787: LD_INT 3
6789: LESS
6790: IFFALSE 6806
// Say ( Aviradze , DA-6-spot-f ) else
6792: LD_EXP 25
6796: PPUSH
6797: LD_STRING DA-6-spot-f
6799: PPUSH
6800: CALL_OW 88
6804: GO 6842
// if pepAmount < 4 then
6806: LD_VAR 0 2
6810: PUSH
6811: LD_INT 4
6813: LESS
6814: IFFALSE 6830
// Say ( Aviradze , DA-6-spot-c ) else
6816: LD_EXP 25
6820: PPUSH
6821: LD_STRING DA-6-spot-c
6823: PPUSH
6824: CALL_OW 88
6828: GO 6842
// Say ( Aviradze , DA-6-spot ) ;
6830: LD_EXP 25
6834: PPUSH
6835: LD_STRING DA-6-spot
6837: PPUSH
6838: CALL_OW 88
// if Kamil then
6842: LD_EXP 24
6846: IFFALSE 6860
// Say ( Kamil , DKam-6-spot ) ;
6848: LD_EXP 24
6852: PPUSH
6853: LD_STRING DKam-6-spot
6855: PPUSH
6856: CALL_OW 88
// Say ( Kaia , DK-6-spot ) ;
6860: LD_EXP 26
6864: PPUSH
6865: LD_STRING DK-6-spot
6867: PPUSH
6868: CALL_OW 88
// ComTurnUnit ( Aviradze , Heike ) ;
6872: LD_EXP 25
6876: PPUSH
6877: LD_EXP 21
6881: PPUSH
6882: CALL_OW 119
// Say ( Aviradze , DA-7-spot ) ;
6886: LD_EXP 25
6890: PPUSH
6891: LD_STRING DA-7-spot
6893: PPUSH
6894: CALL_OW 88
// Say ( Heike , DH-7-spot ) ;
6898: LD_EXP 21
6902: PPUSH
6903: LD_STRING DH-7-spot
6905: PPUSH
6906: CALL_OW 88
// if sciCounterKill >= 3 then
6910: LD_EXP 8
6914: PUSH
6915: LD_INT 3
6917: GREATEREQUAL
6918: IFFALSE 6944
// begin Say ( Heike , DH-7-spot-a ) ;
6920: LD_EXP 21
6924: PPUSH
6925: LD_STRING DH-7-spot-a
6927: PPUSH
6928: CALL_OW 88
// Say ( Aviradze , DA-8-spot-a ) ;
6932: LD_EXP 25
6936: PPUSH
6937: LD_STRING DA-8-spot-a
6939: PPUSH
6940: CALL_OW 88
// end ; InGameOff ;
6944: CALL_OW 9
// if sciCounterKill < 3 then
6948: LD_EXP 8
6952: PUSH
6953: LD_INT 3
6955: LESS
6956: IFFALSE 7015
// begin SetSide ( Kaia , 2 ) ;
6958: LD_EXP 26
6962: PPUSH
6963: LD_INT 2
6965: PPUSH
6966: CALL_OW 235
// ComFree ( Kaia ) ;
6970: LD_EXP 26
6974: PPUSH
6975: CALL_OW 139
// if Kamil then
6979: LD_EXP 24
6983: IFFALSE 7006
// begin ComHold ( Kamil ) ;
6985: LD_EXP 24
6989: PPUSH
6990: CALL_OW 140
// SetSide ( Kamil , 5 ) ;
6994: LD_EXP 24
6998: PPUSH
6999: LD_INT 5
7001: PPUSH
7002: CALL_OW 235
// end ; ChangeMissionObjectives ( OSci ) ;
7006: LD_STRING OSci
7008: PPUSH
7009: CALL_OW 337
// end else
7013: GO 7077
// begin aviradzeQuestDone := true ;
7015: LD_ADDR_EXP 7
7019: PUSH
7020: LD_INT 1
7022: ST_TO_ADDR
// attackDeltaAllowed := true ;
7023: LD_ADDR_EXP 12
7027: PUSH
7028: LD_INT 1
7030: ST_TO_ADDR
// ChangeMissionObjectives ( ODelta2 ) ;
7031: LD_STRING ODelta2
7033: PPUSH
7034: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
7038: LD_ADDR_VAR 0 1
7042: PUSH
7043: LD_INT 22
7045: PUSH
7046: LD_INT 5
7048: PUSH
7049: EMPTY
7050: LIST
7051: LIST
7052: PPUSH
7053: CALL_OW 69
7057: PUSH
7058: FOR_IN
7059: IFFALSE 7075
// SetSide ( i , 2 ) ;
7061: LD_VAR 0 1
7065: PPUSH
7066: LD_INT 2
7068: PPUSH
7069: CALL_OW 235
7073: GO 7058
7075: POP
7076: POP
// end ; end ;
7077: PPOPN 2
7079: END
// every 0 0$1 trigger not sciSpotted and GetDistUnits ( NearestUnitToUnit ( usSci , Heike ) , Heike ) < 8 and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and not aviradzeSpotted do
7080: LD_EXP 6
7084: NOT
7085: PUSH
7086: LD_EXP 20
7090: PPUSH
7091: LD_EXP 21
7095: PPUSH
7096: CALL_OW 74
7100: PPUSH
7101: LD_EXP 21
7105: PPUSH
7106: CALL_OW 296
7110: PUSH
7111: LD_INT 8
7113: LESS
7114: AND
7115: PUSH
7116: LD_INT 2
7118: PPUSH
7119: LD_EXP 20
7123: PPUSH
7124: LD_EXP 21
7128: PPUSH
7129: CALL_OW 74
7133: PPUSH
7134: CALL_OW 292
7138: AND
7139: PUSH
7140: LD_INT 22
7142: PUSH
7143: LD_INT 2
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: PUSH
7150: LD_INT 21
7152: PUSH
7153: LD_INT 1
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: PUSH
7160: EMPTY
7161: LIST
7162: LIST
7163: PPUSH
7164: CALL_OW 69
7168: PUSH
7169: LD_INT 1
7171: GREATER
7172: AND
7173: PUSH
7174: LD_EXP 4
7178: NOT
7179: AND
7180: IFFALSE 7224
7182: GO 7184
7184: DISABLE
// begin sciSpotted := true ;
7185: LD_ADDR_EXP 6
7189: PUSH
7190: LD_INT 1
7192: ST_TO_ADDR
// CenterNowOnUnits ( NearestUnitToUnit ( usSci , Heike ) ) ;
7193: LD_EXP 20
7197: PPUSH
7198: LD_EXP 21
7202: PPUSH
7203: CALL_OW 74
7207: PPUSH
7208: CALL_OW 87
// Say ( Heike , DH-1-sci ) ;
7212: LD_EXP 21
7216: PPUSH
7217: LD_STRING DH-1-sci
7219: PPUSH
7220: CALL_OW 88
// end ;
7224: END
// every 0 0$1 trigger aviradzeSpotted and not sciSpotted and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and aviradzeSpotted and not aviradzeQuestDone do var un ;
7225: LD_EXP 4
7229: PUSH
7230: LD_EXP 6
7234: NOT
7235: AND
7236: PUSH
7237: LD_INT 2
7239: PPUSH
7240: LD_EXP 20
7244: PPUSH
7245: LD_EXP 21
7249: PPUSH
7250: CALL_OW 74
7254: PPUSH
7255: CALL_OW 292
7259: AND
7260: PUSH
7261: LD_INT 22
7263: PUSH
7264: LD_INT 2
7266: PUSH
7267: EMPTY
7268: LIST
7269: LIST
7270: PUSH
7271: LD_INT 21
7273: PUSH
7274: LD_INT 1
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: PUSH
7281: EMPTY
7282: LIST
7283: LIST
7284: PPUSH
7285: CALL_OW 69
7289: PUSH
7290: LD_INT 1
7292: GREATER
7293: AND
7294: PUSH
7295: LD_EXP 4
7299: AND
7300: PUSH
7301: LD_EXP 7
7305: NOT
7306: AND
7307: IFFALSE 7448
7309: GO 7311
7311: DISABLE
7312: LD_INT 0
7314: PPUSH
// begin sciSpotted := true ;
7315: LD_ADDR_EXP 6
7319: PUSH
7320: LD_INT 1
7322: ST_TO_ADDR
// un := NearestUnitToUnit ( usSci , Heike ) ;
7323: LD_ADDR_VAR 0 1
7327: PUSH
7328: LD_EXP 20
7332: PPUSH
7333: LD_EXP 21
7337: PPUSH
7338: CALL_OW 74
7342: ST_TO_ADDR
// DialogueOn ;
7343: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 2 , - 3 ) ;
7347: LD_VAR 0 1
7351: PPUSH
7352: CALL_OW 250
7356: PPUSH
7357: LD_VAR 0 1
7361: PPUSH
7362: CALL_OW 251
7366: PPUSH
7367: LD_INT 2
7369: PPUSH
7370: LD_INT 3
7372: NEG
7373: PPUSH
7374: CALL_OW 330
// CenterNowOnUnits ( un ) ;
7378: LD_VAR 0 1
7382: PPUSH
7383: CALL_OW 87
// Say ( Heike , DH-1-sci-a ) ;
7387: LD_EXP 21
7391: PPUSH
7392: LD_STRING DH-1-sci-a
7394: PPUSH
7395: CALL_OW 88
// if Mike then
7399: LD_EXP 23
7403: IFFALSE 7417
// Say ( Mike , DM-1-sci-a ) ;
7405: LD_EXP 23
7409: PPUSH
7410: LD_STRING DM-1-sci-a
7412: PPUSH
7413: CALL_OW 88
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 2 ) ;
7417: LD_VAR 0 1
7421: PPUSH
7422: CALL_OW 250
7426: PPUSH
7427: LD_VAR 0 1
7431: PPUSH
7432: CALL_OW 251
7436: PPUSH
7437: LD_INT 2
7439: PPUSH
7440: CALL_OW 331
// DialogueOff ;
7444: CALL_OW 7
// end ;
7448: PPOPN 1
7450: END
// every 0 0$1 trigger aviradzeSpotted and ( sciCounterKill >= 3 or not usSci ) and not aviradzeQuestDone do
7451: LD_EXP 4
7455: PUSH
7456: LD_EXP 8
7460: PUSH
7461: LD_INT 3
7463: GREATEREQUAL
7464: PUSH
7465: LD_EXP 20
7469: NOT
7470: OR
7471: AND
7472: PUSH
7473: LD_EXP 7
7477: NOT
7478: AND
7479: IFFALSE 7522
7481: GO 7483
7483: DISABLE
// begin aviradzeQuestDone := true ;
7484: LD_ADDR_EXP 7
7488: PUSH
7489: LD_INT 1
7491: ST_TO_ADDR
// Say ( Heike , DH-1-quest-done ) ;
7492: LD_EXP 21
7496: PPUSH
7497: LD_STRING DH-1-quest-done
7499: PPUSH
7500: CALL_OW 88
// if Givi then
7504: LD_EXP 22
7508: IFFALSE 7522
// Say ( Givi , DG-1-quest-done ) ;
7510: LD_EXP 22
7514: PPUSH
7515: LD_STRING DG-1-quest-done
7517: PPUSH
7518: CALL_OW 88
// end ;
7522: END
// every 0 0$1 trigger See ( 5 , Heike ) and GetDistUnits ( Heike , Aviradze ) < 6 and aviradzeQuestDone and not attackDeltaAllowed do var i ;
7523: LD_INT 5
7525: PPUSH
7526: LD_EXP 21
7530: PPUSH
7531: CALL_OW 292
7535: PUSH
7536: LD_EXP 21
7540: PPUSH
7541: LD_EXP 25
7545: PPUSH
7546: CALL_OW 296
7550: PUSH
7551: LD_INT 6
7553: LESS
7554: AND
7555: PUSH
7556: LD_EXP 7
7560: AND
7561: PUSH
7562: LD_EXP 12
7566: NOT
7567: AND
7568: IFFALSE 7706
7570: GO 7572
7572: DISABLE
7573: LD_INT 0
7575: PPUSH
// begin attackDeltaAllowed := true ;
7576: LD_ADDR_EXP 12
7580: PUSH
7581: LD_INT 1
7583: ST_TO_ADDR
// InGameOn ;
7584: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
7588: LD_EXP 21
7592: PPUSH
7593: CALL_OW 87
// wait ( 0 0$0.3 ) ;
7597: LD_INT 10
7599: PPUSH
7600: CALL_OW 67
// ComTurnUnit ( Aviradze , Heike ) ;
7604: LD_EXP 25
7608: PPUSH
7609: LD_EXP 21
7613: PPUSH
7614: CALL_OW 119
// ComTurnUnit ( Heike , Aviradze ) ;
7618: LD_EXP 21
7622: PPUSH
7623: LD_EXP 25
7627: PPUSH
7628: CALL_OW 119
// Say ( Heike , DH-1-return ) ;
7632: LD_EXP 21
7636: PPUSH
7637: LD_STRING DH-1-return
7639: PPUSH
7640: CALL_OW 88
// Say ( Aviradze , DA-1-return ) ;
7644: LD_EXP 25
7648: PPUSH
7649: LD_STRING DA-1-return
7651: PPUSH
7652: CALL_OW 88
// InGameOff ;
7656: CALL_OW 9
// ChangeMissionObjectives ( ODelta ) ;
7660: LD_STRING ODelta
7662: PPUSH
7663: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
7667: LD_ADDR_VAR 0 1
7671: PUSH
7672: LD_INT 22
7674: PUSH
7675: LD_INT 5
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: PPUSH
7682: CALL_OW 69
7686: PUSH
7687: FOR_IN
7688: IFFALSE 7704
// SetSide ( i , 2 ) ;
7690: LD_VAR 0 1
7694: PPUSH
7695: LD_INT 2
7697: PPUSH
7698: CALL_OW 235
7702: GO 7687
7704: POP
7705: POP
// end ;
7706: PPOPN 1
7708: END
// every 0 0$1 trigger attackDeltaAllowed and IsOk ( Markov ) and GetSide ( Delta ) = 1 and IsOk ( Lynch ) and not usAlert do var i , k , tmp ;
7709: LD_EXP 12
7713: PUSH
7714: LD_EXP 28
7718: PPUSH
7719: CALL_OW 302
7723: AND
7724: PUSH
7725: LD_INT 1
7727: PPUSH
7728: CALL_OW 255
7732: PUSH
7733: LD_INT 1
7735: EQUAL
7736: AND
7737: PUSH
7738: LD_EXP 18
7742: PPUSH
7743: CALL_OW 302
7747: AND
7748: PUSH
7749: LD_EXP 9
7753: NOT
7754: AND
7755: IFFALSE 8971
7757: GO 7759
7759: DISABLE
7760: LD_INT 0
7762: PPUSH
7763: PPUSH
7764: PPUSH
// begin trap := 0 ;
7765: LD_ADDR_EXP 15
7769: PUSH
7770: LD_INT 0
7772: ST_TO_ADDR
// wait ( 0 0$15 ) ;
7773: LD_INT 525
7775: PPUSH
7776: CALL_OW 67
// DialogueOn ;
7780: CALL_OW 6
// Say ( Markov , DMar-1-radio ) ;
7784: LD_EXP 28
7788: PPUSH
7789: LD_STRING DMar-1-radio
7791: PPUSH
7792: CALL_OW 88
// Say ( Heike , DH-1-radio ) ;
7796: LD_EXP 21
7800: PPUSH
7801: LD_STRING DH-1-radio
7803: PPUSH
7804: CALL_OW 88
// Say ( Markov , DMar-2-radio ) ;
7808: LD_EXP 28
7812: PPUSH
7813: LD_STRING DMar-2-radio
7815: PPUSH
7816: CALL_OW 88
// Say ( Heike , DH-2-radio ) ;
7820: LD_EXP 21
7824: PPUSH
7825: LD_STRING DH-2-radio
7827: PPUSH
7828: CALL_OW 88
// if IsOk ( Kamil ) or IsOk ( Sophia ) then
7832: LD_EXP 24
7836: PPUSH
7837: CALL_OW 302
7841: PUSH
7842: LD_EXP 27
7846: PPUSH
7847: CALL_OW 302
7851: OR
7852: IFFALSE 8971
// begin case Query ( Q1Trap ) of 1 :
7854: LD_STRING Q1Trap
7856: PPUSH
7857: CALL_OW 97
7861: PUSH
7862: LD_INT 1
7864: DOUBLE
7865: EQUAL
7866: IFTRUE 7870
7868: GO 8064
7870: POP
// begin if IsOk ( Kamil ) then
7871: LD_EXP 24
7875: PPUSH
7876: CALL_OW 302
7880: IFFALSE 7959
// begin Say ( Kamil , DKam-2-radio ) ;
7882: LD_EXP 24
7886: PPUSH
7887: LD_STRING DKam-2-radio
7889: PPUSH
7890: CALL_OW 88
// Say ( Kamil , DKam-3-radio ) ;
7894: LD_EXP 24
7898: PPUSH
7899: LD_STRING DKam-3-radio
7901: PPUSH
7902: CALL_OW 88
// SayRadio ( Lynch , DDelta-3-radio ) ;
7906: LD_EXP 18
7910: PPUSH
7911: LD_STRING DDelta-3-radio
7913: PPUSH
7914: CALL_OW 94
// dwait ( 0 0$01 ) ;
7918: LD_INT 35
7920: PPUSH
7921: CALL_OW 68
// Say ( Heike , DH-3-radio ) ;
7925: LD_EXP 21
7929: PPUSH
7930: LD_STRING DH-3-radio
7932: PPUSH
7933: CALL_OW 88
// Say ( Kamil , DKam-4-radio ) ;
7937: LD_EXP 24
7941: PPUSH
7942: LD_STRING DKam-4-radio
7944: PPUSH
7945: CALL_OW 88
// trap := 1 ;
7949: LD_ADDR_EXP 15
7953: PUSH
7954: LD_INT 1
7956: ST_TO_ADDR
// end else
7957: GO 8058
// begin Say ( Sophia , DS-1-radio ) ;
7959: LD_EXP 27
7963: PPUSH
7964: LD_STRING DS-1-radio
7966: PPUSH
7967: CALL_OW 88
// Say ( Sophia , DS-2-radio ) ;
7971: LD_EXP 27
7975: PPUSH
7976: LD_STRING DS-2-radio
7978: PPUSH
7979: CALL_OW 88
// SayRadio ( Lynch , DDelta-2-radio-s ) ;
7983: LD_EXP 18
7987: PPUSH
7988: LD_STRING DDelta-2-radio-s
7990: PPUSH
7991: CALL_OW 94
// Say ( Sophia , DS-3-radio ) ;
7995: LD_EXP 27
7999: PPUSH
8000: LD_STRING DS-3-radio
8002: PPUSH
8003: CALL_OW 88
// SayRadio ( Lynch , DDelta-3-radio-s ) ;
8007: LD_EXP 18
8011: PPUSH
8012: LD_STRING DDelta-3-radio-s
8014: PPUSH
8015: CALL_OW 94
// Say ( Sophia , DS-4-radio-s ) ;
8019: LD_EXP 27
8023: PPUSH
8024: LD_STRING DS-4-radio-s
8026: PPUSH
8027: CALL_OW 88
// dwait ( 0 0$01 ) ;
8031: LD_INT 35
8033: PPUSH
8034: CALL_OW 68
// Say ( Heike , DH-1-trap ) ;
8038: LD_EXP 21
8042: PPUSH
8043: LD_STRING DH-1-trap
8045: PPUSH
8046: CALL_OW 88
// trap := 0 ;
8050: LD_ADDR_EXP 15
8054: PUSH
8055: LD_INT 0
8057: ST_TO_ADDR
// end ; DialogueOff ;
8058: CALL_OW 7
// end ; 2 :
8062: GO 8082
8064: LD_INT 2
8066: DOUBLE
8067: EQUAL
8068: IFTRUE 8072
8070: GO 8081
8072: POP
// begin DialogueOff ;
8073: CALL_OW 7
// exit ;
8077: GO 8971
// end ; end ;
8079: GO 8082
8081: POP
// if trap = 1 then
8082: LD_EXP 15
8086: PUSH
8087: LD_INT 1
8089: EQUAL
8090: IFFALSE 8542
// begin PlaceSeeing ( 64 , 32 , 2 , 8 ) ;
8092: LD_INT 64
8094: PPUSH
8095: LD_INT 32
8097: PPUSH
8098: LD_INT 2
8100: PPUSH
8101: LD_INT 8
8103: PPUSH
8104: CALL_OW 330
// CenterOnXY ( 64 , 32 ) ;
8108: LD_INT 64
8110: PPUSH
8111: LD_INT 32
8113: PPUSH
8114: CALL_OW 84
// tmp := [ ] ;
8118: LD_ADDR_VAR 0 3
8122: PUSH
8123: EMPTY
8124: ST_TO_ADDR
// k := 3 ;
8125: LD_ADDR_VAR 0 2
8129: PUSH
8130: LD_INT 3
8132: ST_TO_ADDR
// if usForces < 3 then
8133: LD_EXP 19
8137: PUSH
8138: LD_INT 3
8140: LESS
8141: IFFALSE 8153
// k := usForces ;
8143: LD_ADDR_VAR 0 2
8147: PUSH
8148: LD_EXP 19
8152: ST_TO_ADDR
// for i := 1 to k do
8153: LD_ADDR_VAR 0 1
8157: PUSH
8158: DOUBLE
8159: LD_INT 1
8161: DEC
8162: ST_TO_ADDR
8163: LD_VAR 0 2
8167: PUSH
8168: FOR_TO
8169: IFFALSE 8224
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
8171: LD_ADDR_VAR 0 3
8175: PUSH
8176: LD_VAR 0 3
8180: PPUSH
8181: LD_VAR 0 3
8185: PUSH
8186: LD_INT 1
8188: PLUS
8189: PPUSH
8190: LD_EXP 19
8194: PUSH
8195: LD_INT 1
8197: ARRAY
8198: PPUSH
8199: CALL_OW 1
8203: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
8204: LD_ADDR_EXP 19
8208: PUSH
8209: LD_EXP 19
8213: PPUSH
8214: LD_INT 1
8216: PPUSH
8217: CALL_OW 3
8221: ST_TO_ADDR
// end ;
8222: GO 8168
8224: POP
8225: POP
// usPatrol := tmp ;
8226: LD_ADDR_EXP 14
8230: PUSH
8231: LD_VAR 0 3
8235: ST_TO_ADDR
// for i in tmp do
8236: LD_ADDR_VAR 0 1
8240: PUSH
8241: LD_VAR 0 3
8245: PUSH
8246: FOR_IN
8247: IFFALSE 8377
// begin if IsInUnit ( i ) then
8249: LD_VAR 0 1
8253: PPUSH
8254: CALL_OW 310
8258: IFFALSE 8269
// ComExitBuilding ( i ) ;
8260: LD_VAR 0 1
8264: PPUSH
8265: CALL_OW 122
// AddComAgressiveMove ( i , 63 , 31 ) ;
8269: LD_VAR 0 1
8273: PPUSH
8274: LD_INT 63
8276: PPUSH
8277: LD_INT 31
8279: PPUSH
8280: CALL_OW 174
// AddComWait ( i , 0 0$2 ) ;
8284: LD_VAR 0 1
8288: PPUSH
8289: LD_INT 70
8291: PPUSH
8292: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 43 ) ;
8296: LD_VAR 0 1
8300: PPUSH
8301: LD_INT 103
8303: PPUSH
8304: LD_INT 43
8306: PPUSH
8307: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
8311: LD_VAR 0 1
8315: PPUSH
8316: LD_INT 105
8318: PPUSH
8319: CALL_OW 202
// if Difficulty > 1 then
8323: LD_OWVAR 67
8327: PUSH
8328: LD_INT 1
8330: GREATER
8331: IFFALSE 8348
// AddComAgressiveMove ( i , 114 , 69 ) ;
8333: LD_VAR 0 1
8337: PPUSH
8338: LD_INT 114
8340: PPUSH
8341: LD_INT 69
8343: PPUSH
8344: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
8348: LD_VAR 0 1
8352: PPUSH
8353: LD_INT 105
8355: PPUSH
8356: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
8360: LD_VAR 0 1
8364: PPUSH
8365: LD_INT 42
8367: PPUSH
8368: LD_INT 20
8370: PPUSH
8371: CALL_OW 174
// end ;
8375: GO 8246
8377: POP
8378: POP
// wait ( 0 0$5 ) ;
8379: LD_INT 175
8381: PPUSH
8382: CALL_OW 67
// RemoveSeeing ( 64 , 32 , 2 ) ;
8386: LD_INT 64
8388: PPUSH
8389: LD_INT 32
8391: PPUSH
8392: LD_INT 2
8394: PPUSH
8395: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
8399: LD_INT 35
8401: PPUSH
8402: CALL_OW 67
// for i in tmp do
8406: LD_ADDR_VAR 0 1
8410: PUSH
8411: LD_VAR 0 3
8415: PUSH
8416: FOR_IN
8417: IFFALSE 8448
// if IsDead ( i ) then
8419: LD_VAR 0 1
8423: PPUSH
8424: CALL_OW 301
8428: IFFALSE 8446
// tmp := tmp diff i ;
8430: LD_ADDR_VAR 0 3
8434: PUSH
8435: LD_VAR 0 3
8439: PUSH
8440: LD_VAR 0 1
8444: DIFF
8445: ST_TO_ADDR
8446: GO 8416
8448: POP
8449: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
8450: LD_VAR 0 3
8454: NOT
8455: PUSH
8456: LD_VAR 0 3
8460: PPUSH
8461: LD_INT 95
8463: PUSH
8464: LD_INT 7
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: PUSH
8471: LD_INT 3
8473: PUSH
8474: LD_INT 60
8476: PUSH
8477: EMPTY
8478: LIST
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: PPUSH
8488: CALL_OW 72
8492: PUSH
8493: LD_VAR 0 3
8497: EQUAL
8498: OR
8499: IFFALSE 8399
// if tmp then
8501: LD_VAR 0 3
8505: IFFALSE 8532
// begin usPatrol := [ ] ;
8507: LD_ADDR_EXP 14
8511: PUSH
8512: EMPTY
8513: ST_TO_ADDR
// usForces := usForces union tmp ;
8514: LD_ADDR_EXP 19
8518: PUSH
8519: LD_EXP 19
8523: PUSH
8524: LD_VAR 0 3
8528: UNION
8529: ST_TO_ADDR
// end else
8530: GO 8540
// trickyMove := true ;
8532: LD_ADDR_EXP 13
8536: PUSH
8537: LD_INT 1
8539: ST_TO_ADDR
// end else
8540: GO 8971
// begin tmp := [ ] ;
8542: LD_ADDR_VAR 0 3
8546: PUSH
8547: EMPTY
8548: ST_TO_ADDR
// k := 4 ;
8549: LD_ADDR_VAR 0 2
8553: PUSH
8554: LD_INT 4
8556: ST_TO_ADDR
// if usForces < 4 then
8557: LD_EXP 19
8561: PUSH
8562: LD_INT 4
8564: LESS
8565: IFFALSE 8577
// k := usForces ;
8567: LD_ADDR_VAR 0 2
8571: PUSH
8572: LD_EXP 19
8576: ST_TO_ADDR
// for i := 1 to k do
8577: LD_ADDR_VAR 0 1
8581: PUSH
8582: DOUBLE
8583: LD_INT 1
8585: DEC
8586: ST_TO_ADDR
8587: LD_VAR 0 2
8591: PUSH
8592: FOR_TO
8593: IFFALSE 8648
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
8595: LD_ADDR_VAR 0 3
8599: PUSH
8600: LD_VAR 0 3
8604: PPUSH
8605: LD_VAR 0 3
8609: PUSH
8610: LD_INT 1
8612: PLUS
8613: PPUSH
8614: LD_EXP 19
8618: PUSH
8619: LD_INT 1
8621: ARRAY
8622: PPUSH
8623: CALL_OW 1
8627: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
8628: LD_ADDR_EXP 19
8632: PUSH
8633: LD_EXP 19
8637: PPUSH
8638: LD_INT 1
8640: PPUSH
8641: CALL_OW 3
8645: ST_TO_ADDR
// end ;
8646: GO 8592
8648: POP
8649: POP
// if Lynch then
8650: LD_EXP 18
8654: IFFALSE 8672
// tmp := tmp ^ Lynch ;
8656: LD_ADDR_VAR 0 3
8660: PUSH
8661: LD_VAR 0 3
8665: PUSH
8666: LD_EXP 18
8670: ADD
8671: ST_TO_ADDR
// usPatrol := tmp ;
8672: LD_ADDR_EXP 14
8676: PUSH
8677: LD_VAR 0 3
8681: ST_TO_ADDR
// for i in tmp do
8682: LD_ADDR_VAR 0 1
8686: PUSH
8687: LD_VAR 0 3
8691: PUSH
8692: FOR_IN
8693: IFFALSE 8786
// begin if IsInUnit ( i ) then
8695: LD_VAR 0 1
8699: PPUSH
8700: CALL_OW 310
8704: IFFALSE 8715
// ComExitBuilding ( i ) ;
8706: LD_VAR 0 1
8710: PPUSH
8711: CALL_OW 122
// AddComAgressiveMove ( i , 69 , 15 ) ;
8715: LD_VAR 0 1
8719: PPUSH
8720: LD_INT 69
8722: PPUSH
8723: LD_INT 15
8725: PPUSH
8726: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
8730: LD_VAR 0 1
8734: PPUSH
8735: LD_INT 700
8737: PPUSH
8738: CALL_OW 202
// AddComAgressiveMove ( i , 55 , 43 ) ;
8742: LD_VAR 0 1
8746: PPUSH
8747: LD_INT 55
8749: PPUSH
8750: LD_INT 43
8752: PPUSH
8753: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
8757: LD_VAR 0 1
8761: PPUSH
8762: LD_INT 700
8764: PPUSH
8765: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
8769: LD_VAR 0 1
8773: PPUSH
8774: LD_INT 42
8776: PPUSH
8777: LD_INT 20
8779: PPUSH
8780: CALL_OW 174
// end ;
8784: GO 8692
8786: POP
8787: POP
// repeat wait ( 0 0$1 ) ;
8788: LD_INT 35
8790: PPUSH
8791: CALL_OW 67
// for i in tmp do
8795: LD_ADDR_VAR 0 1
8799: PUSH
8800: LD_VAR 0 3
8804: PUSH
8805: FOR_IN
8806: IFFALSE 8837
// if IsDead ( i ) then
8808: LD_VAR 0 1
8812: PPUSH
8813: CALL_OW 301
8817: IFFALSE 8835
// tmp := tmp diff i ;
8819: LD_ADDR_VAR 0 3
8823: PUSH
8824: LD_VAR 0 3
8828: PUSH
8829: LD_VAR 0 1
8833: DIFF
8834: ST_TO_ADDR
8835: GO 8805
8837: POP
8838: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
8839: LD_VAR 0 3
8843: NOT
8844: PUSH
8845: LD_VAR 0 3
8849: PPUSH
8850: LD_INT 95
8852: PUSH
8853: LD_INT 7
8855: PUSH
8856: EMPTY
8857: LIST
8858: LIST
8859: PUSH
8860: LD_INT 3
8862: PUSH
8863: LD_INT 60
8865: PUSH
8866: EMPTY
8867: LIST
8868: PUSH
8869: EMPTY
8870: LIST
8871: LIST
8872: PUSH
8873: EMPTY
8874: LIST
8875: LIST
8876: PPUSH
8877: CALL_OW 72
8881: PUSH
8882: LD_VAR 0 3
8886: EQUAL
8887: OR
8888: IFFALSE 8788
// if not tmp then
8890: LD_VAR 0 3
8894: NOT
8895: IFFALSE 8907
// trickyMove := true else
8897: LD_ADDR_EXP 13
8901: PUSH
8902: LD_INT 1
8904: ST_TO_ADDR
8905: GO 8914
// usPatrol := [ ] ;
8907: LD_ADDR_EXP 14
8911: PUSH
8912: EMPTY
8913: ST_TO_ADDR
// if tmp diff Lynch then
8914: LD_VAR 0 3
8918: PUSH
8919: LD_EXP 18
8923: DIFF
8924: IFFALSE 8948
// usForces := usForces union ( tmp diff Lynch ) ;
8926: LD_ADDR_EXP 19
8930: PUSH
8931: LD_EXP 19
8935: PUSH
8936: LD_VAR 0 3
8940: PUSH
8941: LD_EXP 18
8945: DIFF
8946: UNION
8947: ST_TO_ADDR
// if IsOk ( Lynch ) then
8948: LD_EXP 18
8952: PPUSH
8953: CALL_OW 302
8957: IFFALSE 8971
// ComEnterUnit ( Lynch , Delta ) ;
8959: LD_EXP 18
8963: PPUSH
8964: LD_INT 1
8966: PPUSH
8967: CALL_OW 120
// end ; end ; end ;
8971: PPOPN 3
8973: END
// every 0 0$1 trigger trickyMove do
8974: LD_EXP 13
8978: IFFALSE 8990
8980: GO 8982
8982: DISABLE
// SetAchievement ( ACH_TRAP ) ;
8983: LD_STRING ACH_TRAP
8985: PPUSH
8986: CALL_OW 543
8990: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ) do
8991: LD_INT 22
8993: PUSH
8994: LD_INT 2
8996: PUSH
8997: EMPTY
8998: LIST
8999: LIST
9000: PUSH
9001: LD_INT 23
9003: PUSH
9004: LD_INT 1
9006: PUSH
9007: EMPTY
9008: LIST
9009: LIST
9010: PUSH
9011: LD_INT 21
9013: PUSH
9014: LD_INT 2
9016: PUSH
9017: EMPTY
9018: LIST
9019: LIST
9020: PUSH
9021: EMPTY
9022: LIST
9023: LIST
9024: LIST
9025: PPUSH
9026: CALL_OW 69
9030: IFFALSE 9042
9032: GO 9034
9034: DISABLE
// SetAchievement ( ACH_SCRAP ) ;
9035: LD_STRING ACH_SCRAP
9037: PPUSH
9038: CALL_OW 543
9042: END
// every 0 0$1 trigger UnitFilter ( usPatrol , [ f_see , 2 ] ) do
9043: LD_EXP 14
9047: PPUSH
9048: LD_INT 101
9050: PUSH
9051: LD_INT 2
9053: PUSH
9054: EMPTY
9055: LIST
9056: LIST
9057: PPUSH
9058: CALL_OW 72
9062: IFFALSE 9195
9064: GO 9066
9066: DISABLE
// begin if not trap then
9067: LD_EXP 15
9071: NOT
9072: IFFALSE 9100
// begin Say ( Heike , DH-2-trap ) ;
9074: LD_EXP 21
9078: PPUSH
9079: LD_STRING DH-2-trap
9081: PPUSH
9082: CALL_OW 88
// Say ( Mike , DM-2-trap ) ;
9086: LD_EXP 23
9090: PPUSH
9091: LD_STRING DM-2-trap
9093: PPUSH
9094: CALL_OW 88
// end else
9098: GO 9112
// begin Say ( Heike , DH-1-trap-a ) ;
9100: LD_EXP 21
9104: PPUSH
9105: LD_STRING DH-1-trap-a
9107: PPUSH
9108: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
9112: LD_INT 35
9114: PPUSH
9115: CALL_OW 67
// until trickyMove ;
9119: LD_EXP 13
9123: IFFALSE 9112
// Say ( Heike , DH-3-trap ) ;
9125: LD_EXP 21
9129: PPUSH
9130: LD_STRING DH-3-trap
9132: PPUSH
9133: CALL_OW 88
// if IsOk ( Givi ) and IsOk ( Kaia ) then
9137: LD_EXP 22
9141: PPUSH
9142: CALL_OW 302
9146: PUSH
9147: LD_EXP 26
9151: PPUSH
9152: CALL_OW 302
9156: AND
9157: IFFALSE 9195
// begin Say ( Givi , DG-3-trap ) ;
9159: LD_EXP 22
9163: PPUSH
9164: LD_STRING DG-3-trap
9166: PPUSH
9167: CALL_OW 88
// Say ( Kaia , DK-3-trap ) ;
9171: LD_EXP 26
9175: PPUSH
9176: LD_STRING DK-3-trap
9178: PPUSH
9179: CALL_OW 88
// Say ( Givi , DG-4-trap ) ;
9183: LD_EXP 22
9187: PPUSH
9188: LD_STRING DG-4-trap
9190: PPUSH
9191: CALL_OW 88
// end ; end ;
9195: END
// every 0 0$1 trigger GetSide ( Delta ) = 2 and attackDeltaAllowed do var i , tmp ;
9196: LD_INT 1
9198: PPUSH
9199: CALL_OW 255
9203: PUSH
9204: LD_INT 2
9206: EQUAL
9207: PUSH
9208: LD_EXP 12
9212: AND
9213: IFFALSE 9372
9215: GO 9217
9217: DISABLE
9218: LD_INT 0
9220: PPUSH
9221: PPUSH
// begin if not IsOk ( Kaia ) then
9222: LD_EXP 26
9226: PPUSH
9227: CALL_OW 302
9231: NOT
9232: IFFALSE 9236
// exit ;
9234: GO 9372
// if tick < 5 5$00 then
9236: LD_OWVAR 1
9240: PUSH
9241: LD_INT 10500
9243: LESS
9244: IFFALSE 9253
// SetAchievement ( ACH_DELTA ) ;
9246: LD_STRING ACH_DELTA
9248: PPUSH
9249: CALL_OW 543
// Say ( Kaia , DK-1-capture ) ;
9253: LD_EXP 26
9257: PPUSH
9258: LD_STRING DK-1-capture
9260: PPUSH
9261: CALL_OW 88
// Say ( Heike , DH-1-capture ) ;
9265: LD_EXP 21
9269: PPUSH
9270: LD_STRING DH-1-capture
9272: PPUSH
9273: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
9277: LD_ADDR_VAR 0 2
9281: PUSH
9282: LD_INT 22
9284: PUSH
9285: LD_INT 1
9287: PUSH
9288: EMPTY
9289: LIST
9290: LIST
9291: PUSH
9292: LD_INT 25
9294: PUSH
9295: LD_INT 1
9297: PUSH
9298: EMPTY
9299: LIST
9300: LIST
9301: PUSH
9302: EMPTY
9303: LIST
9304: LIST
9305: PPUSH
9306: CALL_OW 69
9310: ST_TO_ADDR
// if not tmp then
9311: LD_VAR 0 2
9315: NOT
9316: IFFALSE 9320
// exit ;
9318: GO 9372
// for i in tmp do
9320: LD_ADDR_VAR 0 1
9324: PUSH
9325: LD_VAR 0 2
9329: PUSH
9330: FOR_IN
9331: IFFALSE 9370
// begin if IsInUnit ( i ) then
9333: LD_VAR 0 1
9337: PPUSH
9338: CALL_OW 310
9342: IFFALSE 9353
// ComExitBuilding ( i ) ;
9344: LD_VAR 0 1
9348: PPUSH
9349: CALL_OW 122
// AddComAgressiveMove ( i , 38 , 23 ) ;
9353: LD_VAR 0 1
9357: PPUSH
9358: LD_INT 38
9360: PPUSH
9361: LD_INT 23
9363: PPUSH
9364: CALL_OW 174
// end ;
9368: GO 9330
9370: POP
9371: POP
// end ;
9372: PPOPN 2
9374: END
// every 0 0$1 trigger GetSide ( usLab ) = 2 and attackDeltaAllowed do
9375: LD_INT 3
9377: PPUSH
9378: CALL_OW 255
9382: PUSH
9383: LD_INT 2
9385: EQUAL
9386: PUSH
9387: LD_EXP 12
9391: AND
9392: IFFALSE 9424
9394: GO 9396
9396: DISABLE
// begin DialogueOn ;
9397: CALL_OW 6
// Say ( Aviradze , DA-1-capture ) ;
9401: LD_EXP 25
9405: PPUSH
9406: LD_STRING DA-1-capture
9408: PPUSH
9409: CALL_OW 88
// DialogueOff ;
9413: CALL_OW 7
// ChangeMissionObjectives ( OTame ) ;
9417: LD_STRING OTame
9419: PPUSH
9420: CALL_OW 337
// end ;
9424: END
// every 0 0$1 trigger GetTech ( tech_ApeLang , 2 ) = state_researched and attackDeltaAllowed do
9425: LD_INT 1
9427: PPUSH
9428: LD_INT 2
9430: PPUSH
9431: CALL_OW 321
9435: PUSH
9436: LD_INT 2
9438: EQUAL
9439: PUSH
9440: LD_EXP 12
9444: AND
9445: IFFALSE 9592
9447: GO 9449
9449: DISABLE
// begin DialogueOn ;
9450: CALL_OW 6
// Say ( Aviradze , DA-1-ape ) ;
9454: LD_EXP 25
9458: PPUSH
9459: LD_STRING DA-1-ape
9461: PPUSH
9462: CALL_OW 88
// Say ( Heike , DH-1-ape ) ;
9466: LD_EXP 21
9470: PPUSH
9471: LD_STRING DH-1-ape
9473: PPUSH
9474: CALL_OW 88
// Say ( Aviradze , DA-2-ape ) ;
9478: LD_EXP 25
9482: PPUSH
9483: LD_STRING DA-2-ape
9485: PPUSH
9486: CALL_OW 88
// Say ( Aviradze , DA-3-ape ) ;
9490: LD_EXP 25
9494: PPUSH
9495: LD_STRING DA-3-ape
9497: PPUSH
9498: CALL_OW 88
// Say ( Heike , DH-3-ape ) ;
9502: LD_EXP 21
9506: PPUSH
9507: LD_STRING DH-3-ape
9509: PPUSH
9510: CALL_OW 88
// DialogueOff ;
9514: CALL_OW 7
// if FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) then
9518: LD_INT 22
9520: PUSH
9521: LD_INT 0
9523: PUSH
9524: EMPTY
9525: LIST
9526: LIST
9527: PUSH
9528: LD_INT 25
9530: PUSH
9531: LD_INT 12
9533: PUSH
9534: EMPTY
9535: LIST
9536: LIST
9537: PUSH
9538: EMPTY
9539: LIST
9540: LIST
9541: PPUSH
9542: CALL_OW 69
9546: IFFALSE 9558
// SpawnApeman ( forest , 2 ) ;
9548: LD_INT 1
9550: PPUSH
9551: LD_INT 2
9553: PPUSH
9554: CALL 452 0 2
// repeat wait ( 0 0$1 ) ;
9558: LD_INT 35
9560: PPUSH
9561: CALL_OW 67
// until FilterAllUnits ( [ f_class , class_apeman ] ) = 0 ;
9565: LD_INT 25
9567: PUSH
9568: LD_INT 12
9570: PUSH
9571: EMPTY
9572: LIST
9573: LIST
9574: PPUSH
9575: CALL_OW 69
9579: PUSH
9580: LD_INT 0
9582: EQUAL
9583: IFFALSE 9558
// YouLost ( Ape ) ;
9585: LD_STRING Ape
9587: PPUSH
9588: CALL_OW 104
// end ;
9592: END
// every 0 0$5 trigger lostCounter >= [ 3 , 2 , 2 ] [ Difficulty ] do
9593: LD_EXP 16
9597: PUSH
9598: LD_INT 3
9600: PUSH
9601: LD_INT 2
9603: PUSH
9604: LD_INT 2
9606: PUSH
9607: EMPTY
9608: LIST
9609: LIST
9610: LIST
9611: PUSH
9612: LD_OWVAR 67
9616: ARRAY
9617: GREATEREQUAL
9618: IFFALSE 9662
9620: GO 9622
9622: DISABLE
// begin DialogueOn ;
9623: CALL_OW 6
// Say ( Aviradze , DA-1-failure ) ;
9627: LD_EXP 25
9631: PPUSH
9632: LD_STRING DA-1-failure
9634: PPUSH
9635: CALL_OW 88
// Say ( Aviradze , DA-2-failure ) ;
9639: LD_EXP 25
9643: PPUSH
9644: LD_STRING DA-2-failure
9646: PPUSH
9647: CALL_OW 88
// YouLost ( Failure ) ;
9651: LD_STRING Failure
9653: PPUSH
9654: CALL_OW 104
// DialogueOff ;
9658: CALL_OW 7
// end ;
9662: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
9663: LD_EXP 26
9667: PPUSH
9668: CALL_OW 256
9672: PUSH
9673: LD_INT 3
9675: LESS
9676: IFFALSE 9809
9678: GO 9680
9680: DISABLE
// begin DialogueOn ;
9681: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
9685: LD_EXP 26
9689: PPUSH
9690: CALL_OW 87
// ForceSay ( Kaia , DK-Kaiaout-1 ) ;
9694: LD_EXP 26
9698: PPUSH
9699: LD_STRING DK-Kaiaout-1
9701: PPUSH
9702: CALL_OW 91
// Say ( Heike , DH-Kaiaout-2 ) ;
9706: LD_EXP 21
9710: PPUSH
9711: LD_STRING DH-Kaiaout-2
9713: PPUSH
9714: CALL_OW 88
// Say ( Givi , DG-Kaiaout-3 ) ;
9718: LD_EXP 22
9722: PPUSH
9723: LD_STRING DG-Kaiaout-3
9725: PPUSH
9726: CALL_OW 88
// Say ( Heike , DH-Kaiaout-4 ) ;
9730: LD_EXP 21
9734: PPUSH
9735: LD_STRING DH-Kaiaout-4
9737: PPUSH
9738: CALL_OW 88
// if Givi then
9742: LD_EXP 22
9746: IFFALSE 9796
// begin Say ( Givi , DG-Kaiaout-5 ) ;
9748: LD_EXP 22
9752: PPUSH
9753: LD_STRING DG-Kaiaout-5
9755: PPUSH
9756: CALL_OW 88
// Say ( Heike , DH-Kaiaout-6 ) ;
9760: LD_EXP 21
9764: PPUSH
9765: LD_STRING DH-Kaiaout-6
9767: PPUSH
9768: CALL_OW 88
// Say ( Givi , DG-Kaiaout-7 ) ;
9772: LD_EXP 22
9776: PPUSH
9777: LD_STRING DG-Kaiaout-7
9779: PPUSH
9780: CALL_OW 88
// Say ( Heike , DH-Kaiaout-8 ) ;
9784: LD_EXP 21
9788: PPUSH
9789: LD_STRING DH-Kaiaout-8
9791: PPUSH
9792: CALL_OW 88
// end ; DialogueOff ;
9796: CALL_OW 7
// KillUnit ( Kaia ) ;
9800: LD_EXP 26
9804: PPUSH
9805: CALL_OW 66
// end ;
9809: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) and IsOk ( Aviradze ) and GetSide ( Aviradze ) = 2 do var tmp ;
9810: LD_INT 22
9812: PUSH
9813: LD_INT 2
9815: PUSH
9816: EMPTY
9817: LIST
9818: LIST
9819: PUSH
9820: LD_INT 23
9822: PUSH
9823: LD_INT 0
9825: PUSH
9826: EMPTY
9827: LIST
9828: LIST
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: PPUSH
9834: CALL_OW 69
9838: PUSH
9839: LD_EXP 25
9843: PPUSH
9844: CALL_OW 302
9848: AND
9849: PUSH
9850: LD_EXP 25
9854: PPUSH
9855: CALL_OW 255
9859: PUSH
9860: LD_INT 2
9862: EQUAL
9863: AND
9864: IFFALSE 10610
9866: GO 9868
9868: DISABLE
9869: LD_INT 0
9871: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
9872: LD_ADDR_VAR 0 1
9876: PUSH
9877: LD_INT 22
9879: PUSH
9880: LD_INT 2
9882: PUSH
9883: EMPTY
9884: LIST
9885: LIST
9886: PUSH
9887: LD_INT 23
9889: PUSH
9890: LD_INT 0
9892: PUSH
9893: EMPTY
9894: LIST
9895: LIST
9896: PUSH
9897: EMPTY
9898: LIST
9899: LIST
9900: PPUSH
9901: CALL_OW 69
9905: ST_TO_ADDR
// InGameOn ;
9906: CALL_OW 8
// CenterNowOnUnits ( tmp ) ;
9910: LD_VAR 0 1
9914: PPUSH
9915: CALL_OW 87
// ComMoveUnit ( tmp , Aviradze ) ;
9919: LD_VAR 0 1
9923: PPUSH
9924: LD_EXP 25
9928: PPUSH
9929: CALL_OW 112
// ComTurnUnit ( Aviradze , tmp ) ;
9933: LD_EXP 25
9937: PPUSH
9938: LD_VAR 0 1
9942: PPUSH
9943: CALL_OW 119
// wait ( 0 0$1 ) ;
9947: LD_INT 35
9949: PPUSH
9950: CALL_OW 67
// Say ( Aviradze , DA-1-tame-a ) ;
9954: LD_EXP 25
9958: PPUSH
9959: LD_STRING DA-1-tame-a
9961: PPUSH
9962: CALL_OW 88
// if IsOk ( Mike ) then
9966: LD_EXP 23
9970: PPUSH
9971: CALL_OW 302
9975: IFFALSE 10013
// begin Say ( Mike , DM-1-tame-a ) ;
9977: LD_EXP 23
9981: PPUSH
9982: LD_STRING DM-1-tame-a
9984: PPUSH
9985: CALL_OW 88
// Say ( Sophia , DS-1-tame-a ) ;
9989: LD_EXP 27
9993: PPUSH
9994: LD_STRING DS-1-tame-a
9996: PPUSH
9997: CALL_OW 88
// Say ( Mike , DM-2-tame-a ) ;
10001: LD_EXP 23
10005: PPUSH
10006: LD_STRING DM-2-tame-a
10008: PPUSH
10009: CALL_OW 88
// end ; wait ( 0 0$3 ) ;
10013: LD_INT 105
10015: PPUSH
10016: CALL_OW 67
// PrepareFarmer ;
10020: CALL 11285 0 0
// CenterOnUnits ( Farmer ) ;
10024: LD_EXP 29
10028: PPUSH
10029: CALL_OW 85
// ComMoveXY ( Farmer , 105 , 59 ) ;
10033: LD_EXP 29
10037: PPUSH
10038: LD_INT 105
10040: PPUSH
10041: LD_INT 59
10043: PPUSH
10044: CALL_OW 111
// AddComHold ( Farmer ) ;
10048: LD_EXP 29
10052: PPUSH
10053: CALL_OW 200
// SayRadio ( Farmer , DF-1-end ) ;
10057: LD_EXP 29
10061: PPUSH
10062: LD_STRING DF-1-end
10064: PPUSH
10065: CALL_OW 94
// Say ( Aviradze , DA-1-end ) ;
10069: LD_EXP 25
10073: PPUSH
10074: LD_STRING DA-1-end
10076: PPUSH
10077: CALL_OW 88
// SayRadio ( Farmer , DF-2-end ) ;
10081: LD_EXP 29
10085: PPUSH
10086: LD_STRING DF-2-end
10088: PPUSH
10089: CALL_OW 94
// Say ( Aviradze , DA-2-end ) ;
10093: LD_EXP 25
10097: PPUSH
10098: LD_STRING DA-2-end
10100: PPUSH
10101: CALL_OW 88
// SayRadio ( Farmer , DF-3-end ) ;
10105: LD_EXP 29
10109: PPUSH
10110: LD_STRING DF-3-end
10112: PPUSH
10113: CALL_OW 94
// Say ( Heike , DH-3-end ) ;
10117: LD_EXP 21
10121: PPUSH
10122: LD_STRING DH-3-end
10124: PPUSH
10125: CALL_OW 88
// SayRadio ( Farmer , DF-4-end ) ;
10129: LD_EXP 29
10133: PPUSH
10134: LD_STRING DF-4-end
10136: PPUSH
10137: CALL_OW 94
// if tick <= [ 25 25$00 , 23 23$00 , 21 21$00 ] [ Difficulty ] then
10141: LD_OWVAR 1
10145: PUSH
10146: LD_INT 52500
10148: PUSH
10149: LD_INT 48300
10151: PUSH
10152: LD_INT 44100
10154: PUSH
10155: EMPTY
10156: LIST
10157: LIST
10158: LIST
10159: PUSH
10160: LD_OWVAR 67
10164: ARRAY
10165: LESSEQUAL
10166: IFFALSE 10180
// AddMedal ( med1 , 1 ) else
10168: LD_STRING med1
10170: PPUSH
10171: LD_INT 1
10173: PPUSH
10174: CALL_OW 101
10178: GO 10191
// AddMedal ( med1 , - 1 ) ;
10180: LD_STRING med1
10182: PPUSH
10183: LD_INT 1
10185: NEG
10186: PPUSH
10187: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) = 0 then
10191: LD_INT 22
10193: PUSH
10194: LD_INT 1
10196: PUSH
10197: EMPTY
10198: LIST
10199: LIST
10200: PUSH
10201: LD_INT 25
10203: PUSH
10204: LD_INT 4
10206: PUSH
10207: EMPTY
10208: LIST
10209: LIST
10210: PUSH
10211: EMPTY
10212: LIST
10213: LIST
10214: PPUSH
10215: CALL_OW 69
10219: PUSH
10220: LD_INT 0
10222: EQUAL
10223: IFFALSE 10237
// AddMedal ( med2 , 1 ) else
10225: LD_STRING med2
10227: PPUSH
10228: LD_INT 1
10230: PPUSH
10231: CALL_OW 101
10235: GO 10248
// AddMedal ( med2 , - 1 ) ;
10237: LD_STRING med2
10239: PPUSH
10240: LD_INT 1
10242: NEG
10243: PPUSH
10244: CALL_OW 101
// if trickyMove then
10248: LD_EXP 13
10252: IFFALSE 10266
// AddMedal ( med3 , 1 ) else
10254: LD_STRING med3
10256: PPUSH
10257: LD_INT 1
10259: PPUSH
10260: CALL_OW 101
10264: GO 10277
// AddMedal ( med3 , - 1 ) ;
10266: LD_STRING med3
10268: PPUSH
10269: LD_INT 1
10271: NEG
10272: PPUSH
10273: CALL_OW 101
// GiveMedals ( MAIN ) ;
10277: LD_STRING MAIN
10279: PPUSH
10280: CALL_OW 102
// SaveCharacters ( tmp , 02_ape ) ;
10284: LD_VAR 0 1
10288: PPUSH
10289: LD_STRING 02_ape
10291: PPUSH
10292: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
10296: LD_ADDR_VAR 0 1
10300: PUSH
10301: LD_INT 22
10303: PUSH
10304: LD_INT 2
10306: PUSH
10307: EMPTY
10308: LIST
10309: LIST
10310: PUSH
10311: LD_INT 23
10313: PUSH
10314: LD_INT 2
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: PUSH
10321: LD_INT 21
10323: PUSH
10324: LD_INT 1
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: LIST
10335: PPUSH
10336: CALL_OW 69
10340: ST_TO_ADDR
// RewardPeople ( tmp ) ;
10341: LD_VAR 0 1
10345: PPUSH
10346: CALL_OW 43
// SaveCharacters ( Heike , 02_Heike ) ;
10350: LD_EXP 21
10354: PPUSH
10355: LD_STRING 02_Heike
10357: PPUSH
10358: CALL_OW 38
// SaveCharacters ( Aviradze , 02_Aviradze ) ;
10362: LD_EXP 25
10366: PPUSH
10367: LD_STRING 02_Aviradze
10369: PPUSH
10370: CALL_OW 38
// if Givi then
10374: LD_EXP 22
10378: IFFALSE 10392
// SaveCharacters ( Givi , 02_Givi ) ;
10380: LD_EXP 22
10384: PPUSH
10385: LD_STRING 02_Givi
10387: PPUSH
10388: CALL_OW 38
// if Mike then
10392: LD_EXP 23
10396: IFFALSE 10410
// SaveCharacters ( Mike , 02_Mike ) ;
10398: LD_EXP 23
10402: PPUSH
10403: LD_STRING 02_Mike
10405: PPUSH
10406: CALL_OW 38
// if Kamil then
10410: LD_EXP 24
10414: IFFALSE 10428
// SaveCharacters ( Kamil , 02_Kamil ) ;
10416: LD_EXP 24
10420: PPUSH
10421: LD_STRING 02_Kamil
10423: PPUSH
10424: CALL_OW 38
// if Kaia then
10428: LD_EXP 26
10432: IFFALSE 10446
// SaveCharacters ( Kaia , 02_Kaia ) ;
10434: LD_EXP 26
10438: PPUSH
10439: LD_STRING 02_Kaia
10441: PPUSH
10442: CALL_OW 38
// if Sophia then
10446: LD_EXP 27
10450: IFFALSE 10464
// SaveCharacters ( Sophia , 02_Sophia ) ;
10452: LD_EXP 27
10456: PPUSH
10457: LD_STRING 02_Sophia
10459: PPUSH
10460: CALL_OW 38
// if Markov then
10464: LD_EXP 28
10468: IFFALSE 10482
// SaveCharacters ( Markov , 02_Markov ) ;
10470: LD_EXP 28
10474: PPUSH
10475: LD_STRING 02_Markov
10477: PPUSH
10478: CALL_OW 38
// if tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] then
10482: LD_VAR 0 1
10486: PUSH
10487: LD_EXP 21
10491: PUSH
10492: LD_EXP 25
10496: PUSH
10497: LD_EXP 22
10501: PUSH
10502: LD_EXP 23
10506: PUSH
10507: LD_EXP 24
10511: PUSH
10512: LD_EXP 27
10516: PUSH
10517: LD_EXP 26
10521: PUSH
10522: LD_EXP 28
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: DIFF
10537: IFFALSE 10602
// SaveCharacters ( tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] , 02_others ) ;
10539: LD_VAR 0 1
10543: PUSH
10544: LD_EXP 21
10548: PUSH
10549: LD_EXP 25
10553: PUSH
10554: LD_EXP 22
10558: PUSH
10559: LD_EXP 23
10563: PUSH
10564: LD_EXP 24
10568: PUSH
10569: LD_EXP 27
10573: PUSH
10574: LD_EXP 26
10578: PUSH
10579: LD_EXP 28
10583: PUSH
10584: EMPTY
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: DIFF
10594: PPUSH
10595: LD_STRING 02_others
10597: PPUSH
10598: CALL_OW 38
// YouWin ;
10602: CALL_OW 103
// InGameOff ;
10606: CALL_OW 9
// end ;
10610: PPOPN 1
10612: END
// every 0 0$1 trigger tick > timeUntilFarmer and aviradzeSpotted do
10613: LD_OWVAR 1
10617: PUSH
10618: LD_EXP 11
10622: GREATER
10623: PUSH
10624: LD_EXP 4
10628: AND
10629: IFFALSE 10669
10631: GO 10633
10633: DISABLE
// begin InGameOn ;
10634: CALL_OW 8
// PrepareFarmer ;
10638: CALL 11285 0 0
// CenterNowOnUnits ( Farmer ) ;
10642: LD_EXP 29
10646: PPUSH
10647: CALL_OW 87
// wait ( 0 0$2 ) ;
10651: LD_INT 70
10653: PPUSH
10654: CALL_OW 67
// YouLost ( Farmer ) ;
10658: LD_STRING Farmer
10660: PPUSH
10661: CALL_OW 104
// InGameOff ;
10665: CALL_OW 9
// end ; end_of_file
10669: END
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer ; export function PrepareArabian ; var un , veh ; begin
10670: LD_INT 0
10672: PPUSH
10673: PPUSH
10674: PPUSH
// uc_side := 2 ;
10675: LD_ADDR_OWVAR 20
10679: PUSH
10680: LD_INT 2
10682: ST_TO_ADDR
// uc_nation := 2 ;
10683: LD_ADDR_OWVAR 21
10687: PUSH
10688: LD_INT 2
10690: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
10691: LD_ADDR_EXP 21
10695: PUSH
10696: LD_STRING Heike
10698: PPUSH
10699: LD_EXP 1
10703: NOT
10704: PPUSH
10705: LD_EXP 2
10709: PPUSH
10710: CALL 221 0 3
10714: ST_TO_ADDR
// PlaceUnitXY ( Heike , 83 , 72 , false ) ;
10715: LD_EXP 21
10719: PPUSH
10720: LD_INT 83
10722: PPUSH
10723: LD_INT 72
10725: PPUSH
10726: LD_INT 0
10728: PPUSH
10729: CALL_OW 48
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
10733: LD_ADDR_EXP 22
10737: PUSH
10738: LD_STRING Givi
10740: PPUSH
10741: LD_EXP 1
10745: NOT
10746: PPUSH
10747: LD_EXP 2
10751: PPUSH
10752: CALL 221 0 3
10756: ST_TO_ADDR
// if Givi then
10757: LD_EXP 22
10761: IFFALSE 10781
// PlaceUnitXY ( Givi , 87 , 76 , false ) ;
10763: LD_EXP 22
10767: PPUSH
10768: LD_INT 87
10770: PPUSH
10771: LD_INT 76
10773: PPUSH
10774: LD_INT 0
10776: PPUSH
10777: CALL_OW 48
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
10781: LD_ADDR_EXP 23
10785: PUSH
10786: LD_STRING Mike
10788: PPUSH
10789: LD_EXP 1
10793: NOT
10794: PPUSH
10795: LD_EXP 2
10799: PPUSH
10800: CALL 221 0 3
10804: ST_TO_ADDR
// if Mike then
10805: LD_EXP 23
10809: IFFALSE 10829
// PlaceUnitXY ( Mike , 84 , 76 , false ) ;
10811: LD_EXP 23
10815: PPUSH
10816: LD_INT 84
10818: PPUSH
10819: LD_INT 76
10821: PPUSH
10822: LD_INT 0
10824: PPUSH
10825: CALL_OW 48
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
10829: LD_ADDR_EXP 24
10833: PUSH
10834: LD_STRING Kamil
10836: PPUSH
10837: LD_EXP 1
10841: NOT
10842: PPUSH
10843: LD_EXP 2
10847: PPUSH
10848: CALL 221 0 3
10852: ST_TO_ADDR
// if Kamil then
10853: LD_EXP 24
10857: IFFALSE 10877
// PlaceUnitXY ( Kamil , 85 , 78 , false ) ;
10859: LD_EXP 24
10863: PPUSH
10864: LD_INT 85
10866: PPUSH
10867: LD_INT 78
10869: PPUSH
10870: LD_INT 0
10872: PPUSH
10873: CALL_OW 48
// uc_side := 5 ;
10877: LD_ADDR_OWVAR 20
10881: PUSH
10882: LD_INT 5
10884: ST_TO_ADDR
// uc_nation := 2 ;
10885: LD_ADDR_OWVAR 21
10889: PUSH
10890: LD_INT 2
10892: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , false ,  ) ;
10893: LD_ADDR_EXP 25
10897: PUSH
10898: LD_STRING Aviradze
10900: PPUSH
10901: LD_INT 0
10903: PPUSH
10904: LD_STRING 
10906: PPUSH
10907: CALL 221 0 3
10911: ST_TO_ADDR
// PlaceUnitXY ( Aviradze , 106 , 38 , false ) ;
10912: LD_EXP 25
10916: PPUSH
10917: LD_INT 106
10919: PPUSH
10920: LD_INT 38
10922: PPUSH
10923: LD_INT 0
10925: PPUSH
10926: CALL_OW 48
// ComTurnXY ( Aviradze , 103 , 38 ) ;
10930: LD_EXP 25
10934: PPUSH
10935: LD_INT 103
10937: PPUSH
10938: LD_INT 38
10940: PPUSH
10941: CALL_OW 118
// Kaia := PrepareUnit ( Kaia , false ,  ) ;
10945: LD_ADDR_EXP 26
10949: PUSH
10950: LD_STRING Kaia
10952: PPUSH
10953: LD_INT 0
10955: PPUSH
10956: LD_STRING 
10958: PPUSH
10959: CALL 221 0 3
10963: ST_TO_ADDR
// PlaceUnitXY ( Kaia , 100 , 34 , false ) ;
10964: LD_EXP 26
10968: PPUSH
10969: LD_INT 100
10971: PPUSH
10972: LD_INT 34
10974: PPUSH
10975: LD_INT 0
10977: PPUSH
10978: CALL_OW 48
// ComTurnXY ( Kaia , 100 , 39 ) ;
10982: LD_EXP 26
10986: PPUSH
10987: LD_INT 100
10989: PPUSH
10990: LD_INT 39
10992: PPUSH
10993: CALL_OW 118
// Sophia := PrepareUnit ( Sophia , false ,  ) ;
10997: LD_ADDR_EXP 27
11001: PUSH
11002: LD_STRING Sophia
11004: PPUSH
11005: LD_INT 0
11007: PPUSH
11008: LD_STRING 
11010: PPUSH
11011: CALL 221 0 3
11015: ST_TO_ADDR
// PlaceUnitXY ( Sophia , 109 , 50 , false ) ;
11016: LD_EXP 27
11020: PPUSH
11021: LD_INT 109
11023: PPUSH
11024: LD_INT 50
11026: PPUSH
11027: LD_INT 0
11029: PPUSH
11030: CALL_OW 48
// ComTurnXY ( Sophia , 100 , 39 ) ;
11034: LD_EXP 27
11038: PPUSH
11039: LD_INT 100
11041: PPUSH
11042: LD_INT 39
11044: PPUSH
11045: CALL_OW 118
// Markov := PrepareUnit ( Markov , false ,  ) ;
11049: LD_ADDR_EXP 28
11053: PUSH
11054: LD_STRING Markov
11056: PPUSH
11057: LD_INT 0
11059: PPUSH
11060: LD_STRING 
11062: PPUSH
11063: CALL 221 0 3
11067: ST_TO_ADDR
// PrepareTank ( 5 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , [ 90 , 70 , 60 ] [ Difficulty ] ) ;
11068: LD_INT 5
11070: PPUSH
11071: LD_INT 3
11073: PPUSH
11074: LD_INT 21
11076: PPUSH
11077: LD_INT 1
11079: PPUSH
11080: LD_INT 1
11082: PPUSH
11083: LD_INT 42
11085: PPUSH
11086: LD_INT 90
11088: PUSH
11089: LD_INT 70
11091: PUSH
11092: LD_INT 60
11094: PUSH
11095: EMPTY
11096: LIST
11097: LIST
11098: LIST
11099: PUSH
11100: LD_OWVAR 67
11104: ARRAY
11105: PPUSH
11106: CALL 284 0 7
// veh := CreateVehicle ;
11110: LD_ADDR_VAR 0 3
11114: PUSH
11115: CALL_OW 45
11119: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
11120: LD_VAR 0 3
11124: PPUSH
11125: LD_INT 4
11127: PPUSH
11128: CALL_OW 233
// PlaceUnitXY ( veh , 109 , 38 , false ) ;
11132: LD_VAR 0 3
11136: PPUSH
11137: LD_INT 109
11139: PPUSH
11140: LD_INT 38
11142: PPUSH
11143: LD_INT 0
11145: PPUSH
11146: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
11150: LD_EXP 28
11154: PPUSH
11155: LD_VAR 0 3
11159: PPUSH
11160: CALL_OW 52
// ComTurnUnit ( Kaia , Aviradze ) ;
11164: LD_EXP 26
11168: PPUSH
11169: LD_EXP 25
11173: PPUSH
11174: CALL_OW 119
// ComTurnUnit ( Aviradze , Kaia ) ;
11178: LD_EXP 25
11182: PPUSH
11183: LD_EXP 26
11187: PPUSH
11188: CALL_OW 119
// if not Givi or not Mike then
11192: LD_EXP 22
11196: NOT
11197: PUSH
11198: LD_EXP 23
11202: NOT
11203: OR
11204: IFFALSE 11280
// begin uc_nation := 2 ;
11206: LD_ADDR_OWVAR 21
11210: PUSH
11211: LD_INT 2
11213: ST_TO_ADDR
// uc_side := 5 ;
11214: LD_ADDR_OWVAR 20
11218: PUSH
11219: LD_INT 5
11221: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 1 ) ;
11222: LD_INT 1
11224: PPUSH
11225: LD_INT 1
11227: PPUSH
11228: LD_INT 1
11230: PPUSH
11231: CALL_OW 380
// un := CreateHuman ;
11235: LD_ADDR_VAR 0 2
11239: PUSH
11240: CALL_OW 44
11244: ST_TO_ADDR
// PlaceUnitXYR ( un , 112 , 40 , 3 , false ) ;
11245: LD_VAR 0 2
11249: PPUSH
11250: LD_INT 112
11252: PPUSH
11253: LD_INT 40
11255: PPUSH
11256: LD_INT 3
11258: PPUSH
11259: LD_INT 0
11261: PPUSH
11262: CALL_OW 50
// ComTurnUnit ( un , Aviradze ) ;
11266: LD_VAR 0 2
11270: PPUSH
11271: LD_EXP 25
11275: PPUSH
11276: CALL_OW 119
// end ; end ;
11280: LD_VAR 0 1
11284: RET
// export function PrepareFarmer ; var i ; begin
11285: LD_INT 0
11287: PPUSH
11288: PPUSH
// uc_side := 5 ;
11289: LD_ADDR_OWVAR 20
11293: PUSH
11294: LD_INT 5
11296: ST_TO_ADDR
// uc_nation := 2 ;
11297: LD_ADDR_OWVAR 21
11301: PUSH
11302: LD_INT 2
11304: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
11305: LD_ADDR_EXP 29
11309: PUSH
11310: LD_STRING Farmer
11312: PPUSH
11313: LD_INT 0
11315: PPUSH
11316: LD_STRING 
11318: PPUSH
11319: CALL 221 0 3
11323: ST_TO_ADDR
// PlaceUnitXY ( Farmer , 106 , 62 , false ) ;
11324: LD_EXP 29
11328: PPUSH
11329: LD_INT 106
11331: PPUSH
11332: LD_INT 62
11334: PPUSH
11335: LD_INT 0
11337: PPUSH
11338: CALL_OW 48
// for i := 1 to 5 do
11342: LD_ADDR_VAR 0 2
11346: PUSH
11347: DOUBLE
11348: LD_INT 1
11350: DEC
11351: ST_TO_ADDR
11352: LD_INT 5
11354: PUSH
11355: FOR_TO
11356: IFFALSE 11394
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
11358: LD_INT 1
11360: PPUSH
11361: LD_INT 1
11363: PPUSH
11364: LD_INT 1
11366: PPUSH
11367: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 105 , 64 , 3 , false ) ;
11371: CALL_OW 44
11375: PPUSH
11376: LD_INT 105
11378: PPUSH
11379: LD_INT 64
11381: PPUSH
11382: LD_INT 3
11384: PPUSH
11385: LD_INT 0
11387: PPUSH
11388: CALL_OW 50
// end ;
11392: GO 11355
11394: POP
11395: POP
// end ; end_of_file
11396: LD_VAR 0 1
11400: RET
// every 2 2$20 + 0 0$10 do
11401: GO 11403
11403: DISABLE
// begin enable ;
11404: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , forest , true ) ;
11405: LD_INT 1
11407: PPUSH
11408: LD_INT 5
11410: PPUSH
11411: CALL_OW 12
11415: PPUSH
11416: LD_INT 1
11418: PPUSH
11419: LD_INT 1
11421: PPUSH
11422: CALL_OW 55
// if tick > 6 6$00 then
11426: LD_OWVAR 1
11430: PUSH
11431: LD_INT 12600
11433: GREATER
11434: IFFALSE 11437
// disable ;
11436: DISABLE
// end ; end_of_file
11437: END
// on UnitDestroyed ( un ) do begin if un = Heike then
11438: LD_VAR 0 1
11442: PUSH
11443: LD_EXP 21
11447: EQUAL
11448: IFFALSE 11457
// YouLost ( Heike ) ;
11450: LD_STRING Heike
11452: PPUSH
11453: CALL_OW 104
// if un = Aviradze then
11457: LD_VAR 0 1
11461: PUSH
11462: LD_EXP 25
11466: EQUAL
11467: IFFALSE 11476
// YouLost ( Aviradze ) ;
11469: LD_STRING Aviradze
11471: PPUSH
11472: CALL_OW 104
// if un = usLab then
11476: LD_VAR 0 1
11480: PUSH
11481: LD_INT 3
11483: EQUAL
11484: IFFALSE 11493
// YouLost ( Lab ) ;
11486: LD_STRING Lab
11488: PPUSH
11489: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) diff [ Heike , Aviradze ] and aviradzeSpotted then
11493: LD_VAR 0 1
11497: PUSH
11498: LD_INT 22
11500: PUSH
11501: LD_INT 2
11503: PUSH
11504: EMPTY
11505: LIST
11506: LIST
11507: PUSH
11508: LD_INT 21
11510: PUSH
11511: LD_INT 1
11513: PUSH
11514: EMPTY
11515: LIST
11516: LIST
11517: PUSH
11518: LD_INT 23
11520: PUSH
11521: LD_INT 2
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: PUSH
11528: EMPTY
11529: LIST
11530: LIST
11531: LIST
11532: PPUSH
11533: CALL_OW 69
11537: PUSH
11538: LD_EXP 21
11542: PUSH
11543: LD_EXP 25
11547: PUSH
11548: EMPTY
11549: LIST
11550: LIST
11551: DIFF
11552: IN
11553: PUSH
11554: LD_EXP 4
11558: AND
11559: IFFALSE 11575
// lostCounter := lostCounter + 1 ;
11561: LD_ADDR_EXP 16
11565: PUSH
11566: LD_EXP 16
11570: PUSH
11571: LD_INT 1
11573: PLUS
11574: ST_TO_ADDR
// end ;
11575: PPOPN 1
11577: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in usSci and killerSide = 2 then
11578: LD_VAR 0 1
11582: PUSH
11583: LD_EXP 20
11587: IN
11588: PUSH
11589: LD_VAR 0 2
11593: PUSH
11594: LD_INT 2
11596: EQUAL
11597: AND
11598: IFFALSE 11630
// begin usSci := usSci diff un ;
11600: LD_ADDR_EXP 20
11604: PUSH
11605: LD_EXP 20
11609: PUSH
11610: LD_VAR 0 1
11614: DIFF
11615: ST_TO_ADDR
// sciCounterKill := sciCounterKill + 1 ;
11616: LD_ADDR_EXP 8
11620: PUSH
11621: LD_EXP 8
11625: PUSH
11626: LD_INT 1
11628: PLUS
11629: ST_TO_ADDR
// end ; end ;
11630: PPOPN 3
11632: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
11633: LD_VAR 0 1
11637: PUSH
11638: LD_INT 2
11640: EQUAL
11641: PUSH
11642: LD_VAR 0 2
11646: PUSH
11647: LD_INT 5
11649: EQUAL
11650: AND
11651: IFFALSE 11660
// YouLost ( FriendlyFire ) ;
11653: LD_STRING FriendlyFire
11655: PPUSH
11656: CALL_OW 104
// end ; end_of_file
11660: PPOPN 2
11662: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
11663: GO 11665
11665: DISABLE
// begin ru_radar := 98 ;
11666: LD_ADDR_EXP 30
11670: PUSH
11671: LD_INT 98
11673: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
11674: LD_ADDR_EXP 31
11678: PUSH
11679: LD_INT 89
11681: ST_TO_ADDR
// us_hack := 99 ;
11682: LD_ADDR_EXP 32
11686: PUSH
11687: LD_INT 99
11689: ST_TO_ADDR
// us_artillery := 97 ;
11690: LD_ADDR_EXP 33
11694: PUSH
11695: LD_INT 97
11697: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11698: LD_ADDR_EXP 34
11702: PUSH
11703: LD_INT 91
11705: ST_TO_ADDR
// tech_Artillery := 80 ;
11706: LD_ADDR_EXP 35
11710: PUSH
11711: LD_INT 80
11713: ST_TO_ADDR
// tech_RadMat := 81 ;
11714: LD_ADDR_EXP 36
11718: PUSH
11719: LD_INT 81
11721: ST_TO_ADDR
// tech_BasicTools := 82 ;
11722: LD_ADDR_EXP 37
11726: PUSH
11727: LD_INT 82
11729: ST_TO_ADDR
// tech_Cargo := 83 ;
11730: LD_ADDR_EXP 38
11734: PUSH
11735: LD_INT 83
11737: ST_TO_ADDR
// tech_Track := 84 ;
11738: LD_ADDR_EXP 39
11742: PUSH
11743: LD_INT 84
11745: ST_TO_ADDR
// tech_Crane := 85 ;
11746: LD_ADDR_EXP 40
11750: PUSH
11751: LD_INT 85
11753: ST_TO_ADDR
// tech_Bulldozer := 86 ;
11754: LD_ADDR_EXP 41
11758: PUSH
11759: LD_INT 86
11761: ST_TO_ADDR
// tech_Hovercraft := 87 ;
11762: LD_ADDR_EXP 42
11766: PUSH
11767: LD_INT 87
11769: ST_TO_ADDR
// end ; end_of_file end_of_file
11770: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
11771: GO 11773
11773: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
11774: LD_STRING initStreamRollete();
11776: PPUSH
11777: CALL_OW 559
// InitStreamMode ;
11781: CALL 11790 0 0
// DefineStreamItems ( ) ;
11785: CALL 12230 0 0
// end ;
11789: END
// function InitStreamMode ; begin
11790: LD_INT 0
11792: PPUSH
// streamModeActive := false ;
11793: LD_ADDR_EXP 43
11797: PUSH
11798: LD_INT 0
11800: ST_TO_ADDR
// normalCounter := 36 ;
11801: LD_ADDR_EXP 44
11805: PUSH
11806: LD_INT 36
11808: ST_TO_ADDR
// hardcoreCounter := 16 ;
11809: LD_ADDR_EXP 45
11813: PUSH
11814: LD_INT 16
11816: ST_TO_ADDR
// sRocket := false ;
11817: LD_ADDR_EXP 48
11821: PUSH
11822: LD_INT 0
11824: ST_TO_ADDR
// sSpeed := false ;
11825: LD_ADDR_EXP 47
11829: PUSH
11830: LD_INT 0
11832: ST_TO_ADDR
// sEngine := false ;
11833: LD_ADDR_EXP 49
11837: PUSH
11838: LD_INT 0
11840: ST_TO_ADDR
// sSpec := false ;
11841: LD_ADDR_EXP 46
11845: PUSH
11846: LD_INT 0
11848: ST_TO_ADDR
// sLevel := false ;
11849: LD_ADDR_EXP 50
11853: PUSH
11854: LD_INT 0
11856: ST_TO_ADDR
// sArmoury := false ;
11857: LD_ADDR_EXP 51
11861: PUSH
11862: LD_INT 0
11864: ST_TO_ADDR
// sRadar := false ;
11865: LD_ADDR_EXP 52
11869: PUSH
11870: LD_INT 0
11872: ST_TO_ADDR
// sBunker := false ;
11873: LD_ADDR_EXP 53
11877: PUSH
11878: LD_INT 0
11880: ST_TO_ADDR
// sHack := false ;
11881: LD_ADDR_EXP 54
11885: PUSH
11886: LD_INT 0
11888: ST_TO_ADDR
// sFire := false ;
11889: LD_ADDR_EXP 55
11893: PUSH
11894: LD_INT 0
11896: ST_TO_ADDR
// sRefresh := false ;
11897: LD_ADDR_EXP 56
11901: PUSH
11902: LD_INT 0
11904: ST_TO_ADDR
// sExp := false ;
11905: LD_ADDR_EXP 57
11909: PUSH
11910: LD_INT 0
11912: ST_TO_ADDR
// sDepot := false ;
11913: LD_ADDR_EXP 58
11917: PUSH
11918: LD_INT 0
11920: ST_TO_ADDR
// sFlag := false ;
11921: LD_ADDR_EXP 59
11925: PUSH
11926: LD_INT 0
11928: ST_TO_ADDR
// sKamikadze := false ;
11929: LD_ADDR_EXP 67
11933: PUSH
11934: LD_INT 0
11936: ST_TO_ADDR
// sTroll := false ;
11937: LD_ADDR_EXP 68
11941: PUSH
11942: LD_INT 0
11944: ST_TO_ADDR
// sSlow := false ;
11945: LD_ADDR_EXP 69
11949: PUSH
11950: LD_INT 0
11952: ST_TO_ADDR
// sLack := false ;
11953: LD_ADDR_EXP 70
11957: PUSH
11958: LD_INT 0
11960: ST_TO_ADDR
// sTank := false ;
11961: LD_ADDR_EXP 72
11965: PUSH
11966: LD_INT 0
11968: ST_TO_ADDR
// sRemote := false ;
11969: LD_ADDR_EXP 73
11973: PUSH
11974: LD_INT 0
11976: ST_TO_ADDR
// sPowell := false ;
11977: LD_ADDR_EXP 74
11981: PUSH
11982: LD_INT 0
11984: ST_TO_ADDR
// sTeleport := false ;
11985: LD_ADDR_EXP 77
11989: PUSH
11990: LD_INT 0
11992: ST_TO_ADDR
// sOilTower := false ;
11993: LD_ADDR_EXP 79
11997: PUSH
11998: LD_INT 0
12000: ST_TO_ADDR
// sShovel := false ;
12001: LD_ADDR_EXP 80
12005: PUSH
12006: LD_INT 0
12008: ST_TO_ADDR
// sSheik := false ;
12009: LD_ADDR_EXP 81
12013: PUSH
12014: LD_INT 0
12016: ST_TO_ADDR
// sEarthquake := false ;
12017: LD_ADDR_EXP 83
12021: PUSH
12022: LD_INT 0
12024: ST_TO_ADDR
// sAI := false ;
12025: LD_ADDR_EXP 84
12029: PUSH
12030: LD_INT 0
12032: ST_TO_ADDR
// sCargo := false ;
12033: LD_ADDR_EXP 87
12037: PUSH
12038: LD_INT 0
12040: ST_TO_ADDR
// sDLaser := false ;
12041: LD_ADDR_EXP 88
12045: PUSH
12046: LD_INT 0
12048: ST_TO_ADDR
// sExchange := false ;
12049: LD_ADDR_EXP 89
12053: PUSH
12054: LD_INT 0
12056: ST_TO_ADDR
// sFac := false ;
12057: LD_ADDR_EXP 90
12061: PUSH
12062: LD_INT 0
12064: ST_TO_ADDR
// sPower := false ;
12065: LD_ADDR_EXP 91
12069: PUSH
12070: LD_INT 0
12072: ST_TO_ADDR
// sRandom := false ;
12073: LD_ADDR_EXP 92
12077: PUSH
12078: LD_INT 0
12080: ST_TO_ADDR
// sShield := false ;
12081: LD_ADDR_EXP 93
12085: PUSH
12086: LD_INT 0
12088: ST_TO_ADDR
// sTime := false ;
12089: LD_ADDR_EXP 94
12093: PUSH
12094: LD_INT 0
12096: ST_TO_ADDR
// sTools := false ;
12097: LD_ADDR_EXP 95
12101: PUSH
12102: LD_INT 0
12104: ST_TO_ADDR
// sSold := false ;
12105: LD_ADDR_EXP 60
12109: PUSH
12110: LD_INT 0
12112: ST_TO_ADDR
// sDiff := false ;
12113: LD_ADDR_EXP 61
12117: PUSH
12118: LD_INT 0
12120: ST_TO_ADDR
// sFog := false ;
12121: LD_ADDR_EXP 64
12125: PUSH
12126: LD_INT 0
12128: ST_TO_ADDR
// sReset := false ;
12129: LD_ADDR_EXP 65
12133: PUSH
12134: LD_INT 0
12136: ST_TO_ADDR
// sSun := false ;
12137: LD_ADDR_EXP 66
12141: PUSH
12142: LD_INT 0
12144: ST_TO_ADDR
// sTiger := false ;
12145: LD_ADDR_EXP 62
12149: PUSH
12150: LD_INT 0
12152: ST_TO_ADDR
// sBomb := false ;
12153: LD_ADDR_EXP 63
12157: PUSH
12158: LD_INT 0
12160: ST_TO_ADDR
// sWound := false ;
12161: LD_ADDR_EXP 71
12165: PUSH
12166: LD_INT 0
12168: ST_TO_ADDR
// sBetray := false ;
12169: LD_ADDR_EXP 75
12173: PUSH
12174: LD_INT 0
12176: ST_TO_ADDR
// sContamin := false ;
12177: LD_ADDR_EXP 76
12181: PUSH
12182: LD_INT 0
12184: ST_TO_ADDR
// sOil := false ;
12185: LD_ADDR_EXP 78
12189: PUSH
12190: LD_INT 0
12192: ST_TO_ADDR
// sStu := false ;
12193: LD_ADDR_EXP 82
12197: PUSH
12198: LD_INT 0
12200: ST_TO_ADDR
// sBazooka := false ;
12201: LD_ADDR_EXP 85
12205: PUSH
12206: LD_INT 0
12208: ST_TO_ADDR
// sMortar := false ;
12209: LD_ADDR_EXP 86
12213: PUSH
12214: LD_INT 0
12216: ST_TO_ADDR
// sRanger := false ;
12217: LD_ADDR_EXP 96
12221: PUSH
12222: LD_INT 0
12224: ST_TO_ADDR
// end ;
12225: LD_VAR 0 1
12229: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
12230: LD_INT 0
12232: PPUSH
12233: PPUSH
12234: PPUSH
12235: PPUSH
12236: PPUSH
// result := [ ] ;
12237: LD_ADDR_VAR 0 1
12241: PUSH
12242: EMPTY
12243: ST_TO_ADDR
// if campaign_id = 1 then
12244: LD_OWVAR 69
12248: PUSH
12249: LD_INT 1
12251: EQUAL
12252: IFFALSE 15190
// begin case mission_number of 1 :
12254: LD_OWVAR 70
12258: PUSH
12259: LD_INT 1
12261: DOUBLE
12262: EQUAL
12263: IFTRUE 12267
12265: GO 12331
12267: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
12268: LD_ADDR_VAR 0 1
12272: PUSH
12273: LD_INT 2
12275: PUSH
12276: LD_INT 4
12278: PUSH
12279: LD_INT 11
12281: PUSH
12282: LD_INT 12
12284: PUSH
12285: LD_INT 15
12287: PUSH
12288: LD_INT 16
12290: PUSH
12291: LD_INT 22
12293: PUSH
12294: LD_INT 23
12296: PUSH
12297: LD_INT 26
12299: PUSH
12300: EMPTY
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: PUSH
12311: LD_INT 101
12313: PUSH
12314: LD_INT 102
12316: PUSH
12317: LD_INT 106
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: LIST
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: ST_TO_ADDR
12329: GO 15188
12331: LD_INT 2
12333: DOUBLE
12334: EQUAL
12335: IFTRUE 12339
12337: GO 12411
12339: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
12340: LD_ADDR_VAR 0 1
12344: PUSH
12345: LD_INT 2
12347: PUSH
12348: LD_INT 4
12350: PUSH
12351: LD_INT 11
12353: PUSH
12354: LD_INT 12
12356: PUSH
12357: LD_INT 15
12359: PUSH
12360: LD_INT 16
12362: PUSH
12363: LD_INT 22
12365: PUSH
12366: LD_INT 23
12368: PUSH
12369: LD_INT 26
12371: PUSH
12372: EMPTY
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: PUSH
12383: LD_INT 101
12385: PUSH
12386: LD_INT 102
12388: PUSH
12389: LD_INT 105
12391: PUSH
12392: LD_INT 106
12394: PUSH
12395: LD_INT 108
12397: PUSH
12398: EMPTY
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: LIST
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: ST_TO_ADDR
12409: GO 15188
12411: LD_INT 3
12413: DOUBLE
12414: EQUAL
12415: IFTRUE 12419
12417: GO 12495
12419: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
12420: LD_ADDR_VAR 0 1
12424: PUSH
12425: LD_INT 2
12427: PUSH
12428: LD_INT 4
12430: PUSH
12431: LD_INT 5
12433: PUSH
12434: LD_INT 11
12436: PUSH
12437: LD_INT 12
12439: PUSH
12440: LD_INT 15
12442: PUSH
12443: LD_INT 16
12445: PUSH
12446: LD_INT 22
12448: PUSH
12449: LD_INT 26
12451: PUSH
12452: LD_INT 36
12454: PUSH
12455: EMPTY
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: PUSH
12467: LD_INT 101
12469: PUSH
12470: LD_INT 102
12472: PUSH
12473: LD_INT 105
12475: PUSH
12476: LD_INT 106
12478: PUSH
12479: LD_INT 108
12481: PUSH
12482: EMPTY
12483: LIST
12484: LIST
12485: LIST
12486: LIST
12487: LIST
12488: PUSH
12489: EMPTY
12490: LIST
12491: LIST
12492: ST_TO_ADDR
12493: GO 15188
12495: LD_INT 4
12497: DOUBLE
12498: EQUAL
12499: IFTRUE 12503
12501: GO 12587
12503: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
12504: LD_ADDR_VAR 0 1
12508: PUSH
12509: LD_INT 2
12511: PUSH
12512: LD_INT 4
12514: PUSH
12515: LD_INT 5
12517: PUSH
12518: LD_INT 8
12520: PUSH
12521: LD_INT 11
12523: PUSH
12524: LD_INT 12
12526: PUSH
12527: LD_INT 15
12529: PUSH
12530: LD_INT 16
12532: PUSH
12533: LD_INT 22
12535: PUSH
12536: LD_INT 23
12538: PUSH
12539: LD_INT 26
12541: PUSH
12542: LD_INT 36
12544: PUSH
12545: EMPTY
12546: LIST
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: PUSH
12559: LD_INT 101
12561: PUSH
12562: LD_INT 102
12564: PUSH
12565: LD_INT 105
12567: PUSH
12568: LD_INT 106
12570: PUSH
12571: LD_INT 108
12573: PUSH
12574: EMPTY
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: LIST
12580: PUSH
12581: EMPTY
12582: LIST
12583: LIST
12584: ST_TO_ADDR
12585: GO 15188
12587: LD_INT 5
12589: DOUBLE
12590: EQUAL
12591: IFTRUE 12595
12593: GO 12695
12595: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
12596: LD_ADDR_VAR 0 1
12600: PUSH
12601: LD_INT 2
12603: PUSH
12604: LD_INT 4
12606: PUSH
12607: LD_INT 5
12609: PUSH
12610: LD_INT 6
12612: PUSH
12613: LD_INT 8
12615: PUSH
12616: LD_INT 11
12618: PUSH
12619: LD_INT 12
12621: PUSH
12622: LD_INT 15
12624: PUSH
12625: LD_INT 16
12627: PUSH
12628: LD_INT 22
12630: PUSH
12631: LD_INT 23
12633: PUSH
12634: LD_INT 25
12636: PUSH
12637: LD_INT 26
12639: PUSH
12640: LD_INT 36
12642: PUSH
12643: EMPTY
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: PUSH
12659: LD_INT 101
12661: PUSH
12662: LD_INT 102
12664: PUSH
12665: LD_INT 105
12667: PUSH
12668: LD_INT 106
12670: PUSH
12671: LD_INT 108
12673: PUSH
12674: LD_INT 109
12676: PUSH
12677: LD_INT 112
12679: PUSH
12680: EMPTY
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: LIST
12687: LIST
12688: PUSH
12689: EMPTY
12690: LIST
12691: LIST
12692: ST_TO_ADDR
12693: GO 15188
12695: LD_INT 6
12697: DOUBLE
12698: EQUAL
12699: IFTRUE 12703
12701: GO 12823
12703: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
12704: LD_ADDR_VAR 0 1
12708: PUSH
12709: LD_INT 2
12711: PUSH
12712: LD_INT 4
12714: PUSH
12715: LD_INT 5
12717: PUSH
12718: LD_INT 6
12720: PUSH
12721: LD_INT 8
12723: PUSH
12724: LD_INT 11
12726: PUSH
12727: LD_INT 12
12729: PUSH
12730: LD_INT 15
12732: PUSH
12733: LD_INT 16
12735: PUSH
12736: LD_INT 20
12738: PUSH
12739: LD_INT 21
12741: PUSH
12742: LD_INT 22
12744: PUSH
12745: LD_INT 23
12747: PUSH
12748: LD_INT 25
12750: PUSH
12751: LD_INT 26
12753: PUSH
12754: LD_INT 30
12756: PUSH
12757: LD_INT 31
12759: PUSH
12760: LD_INT 32
12762: PUSH
12763: LD_INT 36
12765: PUSH
12766: EMPTY
12767: LIST
12768: LIST
12769: LIST
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: LIST
12775: LIST
12776: LIST
12777: LIST
12778: LIST
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: PUSH
12787: LD_INT 101
12789: PUSH
12790: LD_INT 102
12792: PUSH
12793: LD_INT 105
12795: PUSH
12796: LD_INT 106
12798: PUSH
12799: LD_INT 108
12801: PUSH
12802: LD_INT 109
12804: PUSH
12805: LD_INT 112
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: PUSH
12817: EMPTY
12818: LIST
12819: LIST
12820: ST_TO_ADDR
12821: GO 15188
12823: LD_INT 7
12825: DOUBLE
12826: EQUAL
12827: IFTRUE 12831
12829: GO 12931
12831: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
12832: LD_ADDR_VAR 0 1
12836: PUSH
12837: LD_INT 2
12839: PUSH
12840: LD_INT 4
12842: PUSH
12843: LD_INT 5
12845: PUSH
12846: LD_INT 7
12848: PUSH
12849: LD_INT 11
12851: PUSH
12852: LD_INT 12
12854: PUSH
12855: LD_INT 15
12857: PUSH
12858: LD_INT 16
12860: PUSH
12861: LD_INT 20
12863: PUSH
12864: LD_INT 21
12866: PUSH
12867: LD_INT 22
12869: PUSH
12870: LD_INT 23
12872: PUSH
12873: LD_INT 25
12875: PUSH
12876: LD_INT 26
12878: PUSH
12879: EMPTY
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: PUSH
12895: LD_INT 101
12897: PUSH
12898: LD_INT 102
12900: PUSH
12901: LD_INT 103
12903: PUSH
12904: LD_INT 105
12906: PUSH
12907: LD_INT 106
12909: PUSH
12910: LD_INT 108
12912: PUSH
12913: LD_INT 112
12915: PUSH
12916: EMPTY
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: PUSH
12925: EMPTY
12926: LIST
12927: LIST
12928: ST_TO_ADDR
12929: GO 15188
12931: LD_INT 8
12933: DOUBLE
12934: EQUAL
12935: IFTRUE 12939
12937: GO 13067
12939: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
12940: LD_ADDR_VAR 0 1
12944: PUSH
12945: LD_INT 2
12947: PUSH
12948: LD_INT 4
12950: PUSH
12951: LD_INT 5
12953: PUSH
12954: LD_INT 6
12956: PUSH
12957: LD_INT 7
12959: PUSH
12960: LD_INT 8
12962: PUSH
12963: LD_INT 11
12965: PUSH
12966: LD_INT 12
12968: PUSH
12969: LD_INT 15
12971: PUSH
12972: LD_INT 16
12974: PUSH
12975: LD_INT 20
12977: PUSH
12978: LD_INT 21
12980: PUSH
12981: LD_INT 22
12983: PUSH
12984: LD_INT 23
12986: PUSH
12987: LD_INT 25
12989: PUSH
12990: LD_INT 26
12992: PUSH
12993: LD_INT 30
12995: PUSH
12996: LD_INT 31
12998: PUSH
12999: LD_INT 32
13001: PUSH
13002: LD_INT 36
13004: PUSH
13005: EMPTY
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: PUSH
13027: LD_INT 101
13029: PUSH
13030: LD_INT 102
13032: PUSH
13033: LD_INT 103
13035: PUSH
13036: LD_INT 105
13038: PUSH
13039: LD_INT 106
13041: PUSH
13042: LD_INT 108
13044: PUSH
13045: LD_INT 109
13047: PUSH
13048: LD_INT 112
13050: PUSH
13051: EMPTY
13052: LIST
13053: LIST
13054: LIST
13055: LIST
13056: LIST
13057: LIST
13058: LIST
13059: LIST
13060: PUSH
13061: EMPTY
13062: LIST
13063: LIST
13064: ST_TO_ADDR
13065: GO 15188
13067: LD_INT 9
13069: DOUBLE
13070: EQUAL
13071: IFTRUE 13075
13073: GO 13211
13075: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
13076: LD_ADDR_VAR 0 1
13080: PUSH
13081: LD_INT 2
13083: PUSH
13084: LD_INT 4
13086: PUSH
13087: LD_INT 5
13089: PUSH
13090: LD_INT 6
13092: PUSH
13093: LD_INT 7
13095: PUSH
13096: LD_INT 8
13098: PUSH
13099: LD_INT 11
13101: PUSH
13102: LD_INT 12
13104: PUSH
13105: LD_INT 15
13107: PUSH
13108: LD_INT 16
13110: PUSH
13111: LD_INT 20
13113: PUSH
13114: LD_INT 21
13116: PUSH
13117: LD_INT 22
13119: PUSH
13120: LD_INT 23
13122: PUSH
13123: LD_INT 25
13125: PUSH
13126: LD_INT 26
13128: PUSH
13129: LD_INT 28
13131: PUSH
13132: LD_INT 30
13134: PUSH
13135: LD_INT 31
13137: PUSH
13138: LD_INT 32
13140: PUSH
13141: LD_INT 36
13143: PUSH
13144: EMPTY
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: PUSH
13167: LD_INT 101
13169: PUSH
13170: LD_INT 102
13172: PUSH
13173: LD_INT 103
13175: PUSH
13176: LD_INT 105
13178: PUSH
13179: LD_INT 106
13181: PUSH
13182: LD_INT 108
13184: PUSH
13185: LD_INT 109
13187: PUSH
13188: LD_INT 112
13190: PUSH
13191: LD_INT 114
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: PUSH
13205: EMPTY
13206: LIST
13207: LIST
13208: ST_TO_ADDR
13209: GO 15188
13211: LD_INT 10
13213: DOUBLE
13214: EQUAL
13215: IFTRUE 13219
13217: GO 13403
13219: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
13220: LD_ADDR_VAR 0 1
13224: PUSH
13225: LD_INT 2
13227: PUSH
13228: LD_INT 4
13230: PUSH
13231: LD_INT 5
13233: PUSH
13234: LD_INT 6
13236: PUSH
13237: LD_INT 7
13239: PUSH
13240: LD_INT 8
13242: PUSH
13243: LD_INT 9
13245: PUSH
13246: LD_INT 10
13248: PUSH
13249: LD_INT 11
13251: PUSH
13252: LD_INT 12
13254: PUSH
13255: LD_INT 13
13257: PUSH
13258: LD_INT 14
13260: PUSH
13261: LD_INT 15
13263: PUSH
13264: LD_INT 16
13266: PUSH
13267: LD_INT 17
13269: PUSH
13270: LD_INT 18
13272: PUSH
13273: LD_INT 19
13275: PUSH
13276: LD_INT 20
13278: PUSH
13279: LD_INT 21
13281: PUSH
13282: LD_INT 22
13284: PUSH
13285: LD_INT 23
13287: PUSH
13288: LD_INT 24
13290: PUSH
13291: LD_INT 25
13293: PUSH
13294: LD_INT 26
13296: PUSH
13297: LD_INT 28
13299: PUSH
13300: LD_INT 30
13302: PUSH
13303: LD_INT 31
13305: PUSH
13306: LD_INT 32
13308: PUSH
13309: LD_INT 36
13311: PUSH
13312: EMPTY
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: LIST
13322: LIST
13323: LIST
13324: LIST
13325: LIST
13326: LIST
13327: LIST
13328: LIST
13329: LIST
13330: LIST
13331: LIST
13332: LIST
13333: LIST
13334: LIST
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: LIST
13342: PUSH
13343: LD_INT 101
13345: PUSH
13346: LD_INT 102
13348: PUSH
13349: LD_INT 103
13351: PUSH
13352: LD_INT 104
13354: PUSH
13355: LD_INT 105
13357: PUSH
13358: LD_INT 106
13360: PUSH
13361: LD_INT 107
13363: PUSH
13364: LD_INT 108
13366: PUSH
13367: LD_INT 109
13369: PUSH
13370: LD_INT 110
13372: PUSH
13373: LD_INT 111
13375: PUSH
13376: LD_INT 112
13378: PUSH
13379: LD_INT 114
13381: PUSH
13382: EMPTY
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: PUSH
13397: EMPTY
13398: LIST
13399: LIST
13400: ST_TO_ADDR
13401: GO 15188
13403: LD_INT 11
13405: DOUBLE
13406: EQUAL
13407: IFTRUE 13411
13409: GO 13603
13411: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
13412: LD_ADDR_VAR 0 1
13416: PUSH
13417: LD_INT 2
13419: PUSH
13420: LD_INT 3
13422: PUSH
13423: LD_INT 4
13425: PUSH
13426: LD_INT 5
13428: PUSH
13429: LD_INT 6
13431: PUSH
13432: LD_INT 7
13434: PUSH
13435: LD_INT 8
13437: PUSH
13438: LD_INT 9
13440: PUSH
13441: LD_INT 10
13443: PUSH
13444: LD_INT 11
13446: PUSH
13447: LD_INT 12
13449: PUSH
13450: LD_INT 13
13452: PUSH
13453: LD_INT 14
13455: PUSH
13456: LD_INT 15
13458: PUSH
13459: LD_INT 16
13461: PUSH
13462: LD_INT 17
13464: PUSH
13465: LD_INT 18
13467: PUSH
13468: LD_INT 19
13470: PUSH
13471: LD_INT 20
13473: PUSH
13474: LD_INT 21
13476: PUSH
13477: LD_INT 22
13479: PUSH
13480: LD_INT 23
13482: PUSH
13483: LD_INT 24
13485: PUSH
13486: LD_INT 25
13488: PUSH
13489: LD_INT 26
13491: PUSH
13492: LD_INT 28
13494: PUSH
13495: LD_INT 30
13497: PUSH
13498: LD_INT 31
13500: PUSH
13501: LD_INT 32
13503: PUSH
13504: LD_INT 34
13506: PUSH
13507: LD_INT 36
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: LIST
13538: LIST
13539: LIST
13540: LIST
13541: LIST
13542: PUSH
13543: LD_INT 101
13545: PUSH
13546: LD_INT 102
13548: PUSH
13549: LD_INT 103
13551: PUSH
13552: LD_INT 104
13554: PUSH
13555: LD_INT 105
13557: PUSH
13558: LD_INT 106
13560: PUSH
13561: LD_INT 107
13563: PUSH
13564: LD_INT 108
13566: PUSH
13567: LD_INT 109
13569: PUSH
13570: LD_INT 110
13572: PUSH
13573: LD_INT 111
13575: PUSH
13576: LD_INT 112
13578: PUSH
13579: LD_INT 114
13581: PUSH
13582: EMPTY
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: PUSH
13597: EMPTY
13598: LIST
13599: LIST
13600: ST_TO_ADDR
13601: GO 15188
13603: LD_INT 12
13605: DOUBLE
13606: EQUAL
13607: IFTRUE 13611
13609: GO 13819
13611: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
13612: LD_ADDR_VAR 0 1
13616: PUSH
13617: LD_INT 1
13619: PUSH
13620: LD_INT 2
13622: PUSH
13623: LD_INT 3
13625: PUSH
13626: LD_INT 4
13628: PUSH
13629: LD_INT 5
13631: PUSH
13632: LD_INT 6
13634: PUSH
13635: LD_INT 7
13637: PUSH
13638: LD_INT 8
13640: PUSH
13641: LD_INT 9
13643: PUSH
13644: LD_INT 10
13646: PUSH
13647: LD_INT 11
13649: PUSH
13650: LD_INT 12
13652: PUSH
13653: LD_INT 13
13655: PUSH
13656: LD_INT 14
13658: PUSH
13659: LD_INT 15
13661: PUSH
13662: LD_INT 16
13664: PUSH
13665: LD_INT 17
13667: PUSH
13668: LD_INT 18
13670: PUSH
13671: LD_INT 19
13673: PUSH
13674: LD_INT 20
13676: PUSH
13677: LD_INT 21
13679: PUSH
13680: LD_INT 22
13682: PUSH
13683: LD_INT 23
13685: PUSH
13686: LD_INT 24
13688: PUSH
13689: LD_INT 25
13691: PUSH
13692: LD_INT 26
13694: PUSH
13695: LD_INT 27
13697: PUSH
13698: LD_INT 28
13700: PUSH
13701: LD_INT 30
13703: PUSH
13704: LD_INT 31
13706: PUSH
13707: LD_INT 32
13709: PUSH
13710: LD_INT 33
13712: PUSH
13713: LD_INT 34
13715: PUSH
13716: LD_INT 36
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: PUSH
13755: LD_INT 101
13757: PUSH
13758: LD_INT 102
13760: PUSH
13761: LD_INT 103
13763: PUSH
13764: LD_INT 104
13766: PUSH
13767: LD_INT 105
13769: PUSH
13770: LD_INT 106
13772: PUSH
13773: LD_INT 107
13775: PUSH
13776: LD_INT 108
13778: PUSH
13779: LD_INT 109
13781: PUSH
13782: LD_INT 110
13784: PUSH
13785: LD_INT 111
13787: PUSH
13788: LD_INT 112
13790: PUSH
13791: LD_INT 113
13793: PUSH
13794: LD_INT 114
13796: PUSH
13797: EMPTY
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: PUSH
13813: EMPTY
13814: LIST
13815: LIST
13816: ST_TO_ADDR
13817: GO 15188
13819: LD_INT 13
13821: DOUBLE
13822: EQUAL
13823: IFTRUE 13827
13825: GO 14023
13827: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
13828: LD_ADDR_VAR 0 1
13832: PUSH
13833: LD_INT 1
13835: PUSH
13836: LD_INT 2
13838: PUSH
13839: LD_INT 3
13841: PUSH
13842: LD_INT 4
13844: PUSH
13845: LD_INT 5
13847: PUSH
13848: LD_INT 8
13850: PUSH
13851: LD_INT 9
13853: PUSH
13854: LD_INT 10
13856: PUSH
13857: LD_INT 11
13859: PUSH
13860: LD_INT 12
13862: PUSH
13863: LD_INT 14
13865: PUSH
13866: LD_INT 15
13868: PUSH
13869: LD_INT 16
13871: PUSH
13872: LD_INT 17
13874: PUSH
13875: LD_INT 18
13877: PUSH
13878: LD_INT 19
13880: PUSH
13881: LD_INT 20
13883: PUSH
13884: LD_INT 21
13886: PUSH
13887: LD_INT 22
13889: PUSH
13890: LD_INT 23
13892: PUSH
13893: LD_INT 24
13895: PUSH
13896: LD_INT 25
13898: PUSH
13899: LD_INT 26
13901: PUSH
13902: LD_INT 27
13904: PUSH
13905: LD_INT 28
13907: PUSH
13908: LD_INT 30
13910: PUSH
13911: LD_INT 31
13913: PUSH
13914: LD_INT 32
13916: PUSH
13917: LD_INT 33
13919: PUSH
13920: LD_INT 34
13922: PUSH
13923: LD_INT 36
13925: PUSH
13926: EMPTY
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: LIST
13932: LIST
13933: LIST
13934: LIST
13935: LIST
13936: LIST
13937: LIST
13938: LIST
13939: LIST
13940: LIST
13941: LIST
13942: LIST
13943: LIST
13944: LIST
13945: LIST
13946: LIST
13947: LIST
13948: LIST
13949: LIST
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: LIST
13957: LIST
13958: PUSH
13959: LD_INT 101
13961: PUSH
13962: LD_INT 102
13964: PUSH
13965: LD_INT 103
13967: PUSH
13968: LD_INT 104
13970: PUSH
13971: LD_INT 105
13973: PUSH
13974: LD_INT 106
13976: PUSH
13977: LD_INT 107
13979: PUSH
13980: LD_INT 108
13982: PUSH
13983: LD_INT 109
13985: PUSH
13986: LD_INT 110
13988: PUSH
13989: LD_INT 111
13991: PUSH
13992: LD_INT 112
13994: PUSH
13995: LD_INT 113
13997: PUSH
13998: LD_INT 114
14000: PUSH
14001: EMPTY
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: PUSH
14017: EMPTY
14018: LIST
14019: LIST
14020: ST_TO_ADDR
14021: GO 15188
14023: LD_INT 14
14025: DOUBLE
14026: EQUAL
14027: IFTRUE 14031
14029: GO 14243
14031: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
14032: LD_ADDR_VAR 0 1
14036: PUSH
14037: LD_INT 1
14039: PUSH
14040: LD_INT 2
14042: PUSH
14043: LD_INT 3
14045: PUSH
14046: LD_INT 4
14048: PUSH
14049: LD_INT 5
14051: PUSH
14052: LD_INT 6
14054: PUSH
14055: LD_INT 7
14057: PUSH
14058: LD_INT 8
14060: PUSH
14061: LD_INT 9
14063: PUSH
14064: LD_INT 10
14066: PUSH
14067: LD_INT 11
14069: PUSH
14070: LD_INT 12
14072: PUSH
14073: LD_INT 13
14075: PUSH
14076: LD_INT 14
14078: PUSH
14079: LD_INT 15
14081: PUSH
14082: LD_INT 16
14084: PUSH
14085: LD_INT 17
14087: PUSH
14088: LD_INT 18
14090: PUSH
14091: LD_INT 19
14093: PUSH
14094: LD_INT 20
14096: PUSH
14097: LD_INT 21
14099: PUSH
14100: LD_INT 22
14102: PUSH
14103: LD_INT 23
14105: PUSH
14106: LD_INT 24
14108: PUSH
14109: LD_INT 25
14111: PUSH
14112: LD_INT 26
14114: PUSH
14115: LD_INT 27
14117: PUSH
14118: LD_INT 28
14120: PUSH
14121: LD_INT 29
14123: PUSH
14124: LD_INT 30
14126: PUSH
14127: LD_INT 31
14129: PUSH
14130: LD_INT 32
14132: PUSH
14133: LD_INT 33
14135: PUSH
14136: LD_INT 34
14138: PUSH
14139: LD_INT 36
14141: PUSH
14142: EMPTY
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: PUSH
14179: LD_INT 101
14181: PUSH
14182: LD_INT 102
14184: PUSH
14185: LD_INT 103
14187: PUSH
14188: LD_INT 104
14190: PUSH
14191: LD_INT 105
14193: PUSH
14194: LD_INT 106
14196: PUSH
14197: LD_INT 107
14199: PUSH
14200: LD_INT 108
14202: PUSH
14203: LD_INT 109
14205: PUSH
14206: LD_INT 110
14208: PUSH
14209: LD_INT 111
14211: PUSH
14212: LD_INT 112
14214: PUSH
14215: LD_INT 113
14217: PUSH
14218: LD_INT 114
14220: PUSH
14221: EMPTY
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: PUSH
14237: EMPTY
14238: LIST
14239: LIST
14240: ST_TO_ADDR
14241: GO 15188
14243: LD_INT 15
14245: DOUBLE
14246: EQUAL
14247: IFTRUE 14251
14249: GO 14463
14251: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
14252: LD_ADDR_VAR 0 1
14256: PUSH
14257: LD_INT 1
14259: PUSH
14260: LD_INT 2
14262: PUSH
14263: LD_INT 3
14265: PUSH
14266: LD_INT 4
14268: PUSH
14269: LD_INT 5
14271: PUSH
14272: LD_INT 6
14274: PUSH
14275: LD_INT 7
14277: PUSH
14278: LD_INT 8
14280: PUSH
14281: LD_INT 9
14283: PUSH
14284: LD_INT 10
14286: PUSH
14287: LD_INT 11
14289: PUSH
14290: LD_INT 12
14292: PUSH
14293: LD_INT 13
14295: PUSH
14296: LD_INT 14
14298: PUSH
14299: LD_INT 15
14301: PUSH
14302: LD_INT 16
14304: PUSH
14305: LD_INT 17
14307: PUSH
14308: LD_INT 18
14310: PUSH
14311: LD_INT 19
14313: PUSH
14314: LD_INT 20
14316: PUSH
14317: LD_INT 21
14319: PUSH
14320: LD_INT 22
14322: PUSH
14323: LD_INT 23
14325: PUSH
14326: LD_INT 24
14328: PUSH
14329: LD_INT 25
14331: PUSH
14332: LD_INT 26
14334: PUSH
14335: LD_INT 27
14337: PUSH
14338: LD_INT 28
14340: PUSH
14341: LD_INT 29
14343: PUSH
14344: LD_INT 30
14346: PUSH
14347: LD_INT 31
14349: PUSH
14350: LD_INT 32
14352: PUSH
14353: LD_INT 33
14355: PUSH
14356: LD_INT 34
14358: PUSH
14359: LD_INT 36
14361: PUSH
14362: EMPTY
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: PUSH
14399: LD_INT 101
14401: PUSH
14402: LD_INT 102
14404: PUSH
14405: LD_INT 103
14407: PUSH
14408: LD_INT 104
14410: PUSH
14411: LD_INT 105
14413: PUSH
14414: LD_INT 106
14416: PUSH
14417: LD_INT 107
14419: PUSH
14420: LD_INT 108
14422: PUSH
14423: LD_INT 109
14425: PUSH
14426: LD_INT 110
14428: PUSH
14429: LD_INT 111
14431: PUSH
14432: LD_INT 112
14434: PUSH
14435: LD_INT 113
14437: PUSH
14438: LD_INT 114
14440: PUSH
14441: EMPTY
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: ST_TO_ADDR
14461: GO 15188
14463: LD_INT 16
14465: DOUBLE
14466: EQUAL
14467: IFTRUE 14471
14469: GO 14595
14471: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
14472: LD_ADDR_VAR 0 1
14476: PUSH
14477: LD_INT 2
14479: PUSH
14480: LD_INT 4
14482: PUSH
14483: LD_INT 5
14485: PUSH
14486: LD_INT 7
14488: PUSH
14489: LD_INT 11
14491: PUSH
14492: LD_INT 12
14494: PUSH
14495: LD_INT 15
14497: PUSH
14498: LD_INT 16
14500: PUSH
14501: LD_INT 20
14503: PUSH
14504: LD_INT 21
14506: PUSH
14507: LD_INT 22
14509: PUSH
14510: LD_INT 23
14512: PUSH
14513: LD_INT 25
14515: PUSH
14516: LD_INT 26
14518: PUSH
14519: LD_INT 30
14521: PUSH
14522: LD_INT 31
14524: PUSH
14525: LD_INT 32
14527: PUSH
14528: LD_INT 33
14530: PUSH
14531: LD_INT 34
14533: PUSH
14534: EMPTY
14535: LIST
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: PUSH
14555: LD_INT 101
14557: PUSH
14558: LD_INT 102
14560: PUSH
14561: LD_INT 103
14563: PUSH
14564: LD_INT 106
14566: PUSH
14567: LD_INT 108
14569: PUSH
14570: LD_INT 112
14572: PUSH
14573: LD_INT 113
14575: PUSH
14576: LD_INT 114
14578: PUSH
14579: EMPTY
14580: LIST
14581: LIST
14582: LIST
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: PUSH
14589: EMPTY
14590: LIST
14591: LIST
14592: ST_TO_ADDR
14593: GO 15188
14595: LD_INT 17
14597: DOUBLE
14598: EQUAL
14599: IFTRUE 14603
14601: GO 14815
14603: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
14604: LD_ADDR_VAR 0 1
14608: PUSH
14609: LD_INT 1
14611: PUSH
14612: LD_INT 2
14614: PUSH
14615: LD_INT 3
14617: PUSH
14618: LD_INT 4
14620: PUSH
14621: LD_INT 5
14623: PUSH
14624: LD_INT 6
14626: PUSH
14627: LD_INT 7
14629: PUSH
14630: LD_INT 8
14632: PUSH
14633: LD_INT 9
14635: PUSH
14636: LD_INT 10
14638: PUSH
14639: LD_INT 11
14641: PUSH
14642: LD_INT 12
14644: PUSH
14645: LD_INT 13
14647: PUSH
14648: LD_INT 14
14650: PUSH
14651: LD_INT 15
14653: PUSH
14654: LD_INT 16
14656: PUSH
14657: LD_INT 17
14659: PUSH
14660: LD_INT 18
14662: PUSH
14663: LD_INT 19
14665: PUSH
14666: LD_INT 20
14668: PUSH
14669: LD_INT 21
14671: PUSH
14672: LD_INT 22
14674: PUSH
14675: LD_INT 23
14677: PUSH
14678: LD_INT 24
14680: PUSH
14681: LD_INT 25
14683: PUSH
14684: LD_INT 26
14686: PUSH
14687: LD_INT 27
14689: PUSH
14690: LD_INT 28
14692: PUSH
14693: LD_INT 29
14695: PUSH
14696: LD_INT 30
14698: PUSH
14699: LD_INT 31
14701: PUSH
14702: LD_INT 32
14704: PUSH
14705: LD_INT 33
14707: PUSH
14708: LD_INT 34
14710: PUSH
14711: LD_INT 36
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: PUSH
14751: LD_INT 101
14753: PUSH
14754: LD_INT 102
14756: PUSH
14757: LD_INT 103
14759: PUSH
14760: LD_INT 104
14762: PUSH
14763: LD_INT 105
14765: PUSH
14766: LD_INT 106
14768: PUSH
14769: LD_INT 107
14771: PUSH
14772: LD_INT 108
14774: PUSH
14775: LD_INT 109
14777: PUSH
14778: LD_INT 110
14780: PUSH
14781: LD_INT 111
14783: PUSH
14784: LD_INT 112
14786: PUSH
14787: LD_INT 113
14789: PUSH
14790: LD_INT 114
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: LIST
14797: LIST
14798: LIST
14799: LIST
14800: LIST
14801: LIST
14802: LIST
14803: LIST
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: PUSH
14809: EMPTY
14810: LIST
14811: LIST
14812: ST_TO_ADDR
14813: GO 15188
14815: LD_INT 18
14817: DOUBLE
14818: EQUAL
14819: IFTRUE 14823
14821: GO 14959
14823: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
14824: LD_ADDR_VAR 0 1
14828: PUSH
14829: LD_INT 2
14831: PUSH
14832: LD_INT 4
14834: PUSH
14835: LD_INT 5
14837: PUSH
14838: LD_INT 7
14840: PUSH
14841: LD_INT 11
14843: PUSH
14844: LD_INT 12
14846: PUSH
14847: LD_INT 15
14849: PUSH
14850: LD_INT 16
14852: PUSH
14853: LD_INT 20
14855: PUSH
14856: LD_INT 21
14858: PUSH
14859: LD_INT 22
14861: PUSH
14862: LD_INT 23
14864: PUSH
14865: LD_INT 25
14867: PUSH
14868: LD_INT 26
14870: PUSH
14871: LD_INT 30
14873: PUSH
14874: LD_INT 31
14876: PUSH
14877: LD_INT 32
14879: PUSH
14880: LD_INT 33
14882: PUSH
14883: LD_INT 34
14885: PUSH
14886: LD_INT 35
14888: PUSH
14889: LD_INT 36
14891: PUSH
14892: EMPTY
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: PUSH
14915: LD_INT 101
14917: PUSH
14918: LD_INT 102
14920: PUSH
14921: LD_INT 103
14923: PUSH
14924: LD_INT 106
14926: PUSH
14927: LD_INT 108
14929: PUSH
14930: LD_INT 112
14932: PUSH
14933: LD_INT 113
14935: PUSH
14936: LD_INT 114
14938: PUSH
14939: LD_INT 115
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: LIST
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: ST_TO_ADDR
14957: GO 15188
14959: LD_INT 19
14961: DOUBLE
14962: EQUAL
14963: IFTRUE 14967
14965: GO 15187
14967: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
14968: LD_ADDR_VAR 0 1
14972: PUSH
14973: LD_INT 1
14975: PUSH
14976: LD_INT 2
14978: PUSH
14979: LD_INT 3
14981: PUSH
14982: LD_INT 4
14984: PUSH
14985: LD_INT 5
14987: PUSH
14988: LD_INT 6
14990: PUSH
14991: LD_INT 7
14993: PUSH
14994: LD_INT 8
14996: PUSH
14997: LD_INT 9
14999: PUSH
15000: LD_INT 10
15002: PUSH
15003: LD_INT 11
15005: PUSH
15006: LD_INT 12
15008: PUSH
15009: LD_INT 13
15011: PUSH
15012: LD_INT 14
15014: PUSH
15015: LD_INT 15
15017: PUSH
15018: LD_INT 16
15020: PUSH
15021: LD_INT 17
15023: PUSH
15024: LD_INT 18
15026: PUSH
15027: LD_INT 19
15029: PUSH
15030: LD_INT 20
15032: PUSH
15033: LD_INT 21
15035: PUSH
15036: LD_INT 22
15038: PUSH
15039: LD_INT 23
15041: PUSH
15042: LD_INT 24
15044: PUSH
15045: LD_INT 25
15047: PUSH
15048: LD_INT 26
15050: PUSH
15051: LD_INT 27
15053: PUSH
15054: LD_INT 28
15056: PUSH
15057: LD_INT 29
15059: PUSH
15060: LD_INT 30
15062: PUSH
15063: LD_INT 31
15065: PUSH
15066: LD_INT 32
15068: PUSH
15069: LD_INT 33
15071: PUSH
15072: LD_INT 34
15074: PUSH
15075: LD_INT 35
15077: PUSH
15078: LD_INT 36
15080: PUSH
15081: EMPTY
15082: LIST
15083: LIST
15084: LIST
15085: LIST
15086: LIST
15087: LIST
15088: LIST
15089: LIST
15090: LIST
15091: LIST
15092: LIST
15093: LIST
15094: LIST
15095: LIST
15096: LIST
15097: LIST
15098: LIST
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: PUSH
15119: LD_INT 101
15121: PUSH
15122: LD_INT 102
15124: PUSH
15125: LD_INT 103
15127: PUSH
15128: LD_INT 104
15130: PUSH
15131: LD_INT 105
15133: PUSH
15134: LD_INT 106
15136: PUSH
15137: LD_INT 107
15139: PUSH
15140: LD_INT 108
15142: PUSH
15143: LD_INT 109
15145: PUSH
15146: LD_INT 110
15148: PUSH
15149: LD_INT 111
15151: PUSH
15152: LD_INT 112
15154: PUSH
15155: LD_INT 113
15157: PUSH
15158: LD_INT 114
15160: PUSH
15161: LD_INT 115
15163: PUSH
15164: EMPTY
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: LIST
15177: LIST
15178: LIST
15179: LIST
15180: PUSH
15181: EMPTY
15182: LIST
15183: LIST
15184: ST_TO_ADDR
15185: GO 15188
15187: POP
// end else
15188: GO 15407
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
15190: LD_ADDR_VAR 0 1
15194: PUSH
15195: LD_INT 1
15197: PUSH
15198: LD_INT 2
15200: PUSH
15201: LD_INT 3
15203: PUSH
15204: LD_INT 4
15206: PUSH
15207: LD_INT 5
15209: PUSH
15210: LD_INT 6
15212: PUSH
15213: LD_INT 7
15215: PUSH
15216: LD_INT 8
15218: PUSH
15219: LD_INT 9
15221: PUSH
15222: LD_INT 10
15224: PUSH
15225: LD_INT 11
15227: PUSH
15228: LD_INT 12
15230: PUSH
15231: LD_INT 13
15233: PUSH
15234: LD_INT 14
15236: PUSH
15237: LD_INT 15
15239: PUSH
15240: LD_INT 16
15242: PUSH
15243: LD_INT 17
15245: PUSH
15246: LD_INT 18
15248: PUSH
15249: LD_INT 19
15251: PUSH
15252: LD_INT 20
15254: PUSH
15255: LD_INT 21
15257: PUSH
15258: LD_INT 22
15260: PUSH
15261: LD_INT 23
15263: PUSH
15264: LD_INT 24
15266: PUSH
15267: LD_INT 25
15269: PUSH
15270: LD_INT 26
15272: PUSH
15273: LD_INT 27
15275: PUSH
15276: LD_INT 28
15278: PUSH
15279: LD_INT 29
15281: PUSH
15282: LD_INT 30
15284: PUSH
15285: LD_INT 31
15287: PUSH
15288: LD_INT 32
15290: PUSH
15291: LD_INT 33
15293: PUSH
15294: LD_INT 34
15296: PUSH
15297: LD_INT 35
15299: PUSH
15300: LD_INT 36
15302: PUSH
15303: EMPTY
15304: LIST
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: LIST
15311: LIST
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: PUSH
15341: LD_INT 101
15343: PUSH
15344: LD_INT 102
15346: PUSH
15347: LD_INT 103
15349: PUSH
15350: LD_INT 104
15352: PUSH
15353: LD_INT 105
15355: PUSH
15356: LD_INT 106
15358: PUSH
15359: LD_INT 107
15361: PUSH
15362: LD_INT 108
15364: PUSH
15365: LD_INT 109
15367: PUSH
15368: LD_INT 110
15370: PUSH
15371: LD_INT 111
15373: PUSH
15374: LD_INT 112
15376: PUSH
15377: LD_INT 113
15379: PUSH
15380: LD_INT 114
15382: PUSH
15383: LD_INT 115
15385: PUSH
15386: EMPTY
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: LIST
15401: LIST
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: ST_TO_ADDR
// if result then
15407: LD_VAR 0 1
15411: IFFALSE 15700
// begin normal :=  ;
15413: LD_ADDR_VAR 0 3
15417: PUSH
15418: LD_STRING 
15420: ST_TO_ADDR
// hardcore :=  ;
15421: LD_ADDR_VAR 0 4
15425: PUSH
15426: LD_STRING 
15428: ST_TO_ADDR
// for i = 1 to normalCounter do
15429: LD_ADDR_VAR 0 5
15433: PUSH
15434: DOUBLE
15435: LD_INT 1
15437: DEC
15438: ST_TO_ADDR
15439: LD_EXP 44
15443: PUSH
15444: FOR_TO
15445: IFFALSE 15546
// begin tmp := 0 ;
15447: LD_ADDR_VAR 0 2
15451: PUSH
15452: LD_STRING 0
15454: ST_TO_ADDR
// if result [ 1 ] then
15455: LD_VAR 0 1
15459: PUSH
15460: LD_INT 1
15462: ARRAY
15463: IFFALSE 15528
// if result [ 1 ] [ 1 ] = i then
15465: LD_VAR 0 1
15469: PUSH
15470: LD_INT 1
15472: ARRAY
15473: PUSH
15474: LD_INT 1
15476: ARRAY
15477: PUSH
15478: LD_VAR 0 5
15482: EQUAL
15483: IFFALSE 15528
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15485: LD_ADDR_VAR 0 1
15489: PUSH
15490: LD_VAR 0 1
15494: PPUSH
15495: LD_INT 1
15497: PPUSH
15498: LD_VAR 0 1
15502: PUSH
15503: LD_INT 1
15505: ARRAY
15506: PPUSH
15507: LD_INT 1
15509: PPUSH
15510: CALL_OW 3
15514: PPUSH
15515: CALL_OW 1
15519: ST_TO_ADDR
// tmp := 1 ;
15520: LD_ADDR_VAR 0 2
15524: PUSH
15525: LD_STRING 1
15527: ST_TO_ADDR
// end ; normal := normal & tmp ;
15528: LD_ADDR_VAR 0 3
15532: PUSH
15533: LD_VAR 0 3
15537: PUSH
15538: LD_VAR 0 2
15542: STR
15543: ST_TO_ADDR
// end ;
15544: GO 15444
15546: POP
15547: POP
// for i = 1 to hardcoreCounter do
15548: LD_ADDR_VAR 0 5
15552: PUSH
15553: DOUBLE
15554: LD_INT 1
15556: DEC
15557: ST_TO_ADDR
15558: LD_EXP 45
15562: PUSH
15563: FOR_TO
15564: IFFALSE 15669
// begin tmp := 0 ;
15566: LD_ADDR_VAR 0 2
15570: PUSH
15571: LD_STRING 0
15573: ST_TO_ADDR
// if result [ 2 ] then
15574: LD_VAR 0 1
15578: PUSH
15579: LD_INT 2
15581: ARRAY
15582: IFFALSE 15651
// if result [ 2 ] [ 1 ] = 100 + i then
15584: LD_VAR 0 1
15588: PUSH
15589: LD_INT 2
15591: ARRAY
15592: PUSH
15593: LD_INT 1
15595: ARRAY
15596: PUSH
15597: LD_INT 100
15599: PUSH
15600: LD_VAR 0 5
15604: PLUS
15605: EQUAL
15606: IFFALSE 15651
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15608: LD_ADDR_VAR 0 1
15612: PUSH
15613: LD_VAR 0 1
15617: PPUSH
15618: LD_INT 2
15620: PPUSH
15621: LD_VAR 0 1
15625: PUSH
15626: LD_INT 2
15628: ARRAY
15629: PPUSH
15630: LD_INT 1
15632: PPUSH
15633: CALL_OW 3
15637: PPUSH
15638: CALL_OW 1
15642: ST_TO_ADDR
// tmp := 1 ;
15643: LD_ADDR_VAR 0 2
15647: PUSH
15648: LD_STRING 1
15650: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15651: LD_ADDR_VAR 0 4
15655: PUSH
15656: LD_VAR 0 4
15660: PUSH
15661: LD_VAR 0 2
15665: STR
15666: ST_TO_ADDR
// end ;
15667: GO 15563
15669: POP
15670: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
15671: LD_STRING getStreamItemsFromMission("
15673: PUSH
15674: LD_VAR 0 3
15678: STR
15679: PUSH
15680: LD_STRING ","
15682: STR
15683: PUSH
15684: LD_VAR 0 4
15688: STR
15689: PUSH
15690: LD_STRING ")
15692: STR
15693: PPUSH
15694: CALL_OW 559
// end else
15698: GO 15707
// ToLua ( getStreamItemsFromMission("","") ) ;
15700: LD_STRING getStreamItemsFromMission("","")
15702: PPUSH
15703: CALL_OW 559
// end ;
15707: LD_VAR 0 1
15711: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
15712: LD_VAR 0 2
15716: PUSH
15717: LD_INT 100
15719: EQUAL
15720: IFFALSE 16669
// begin if not StreamModeActive then
15722: LD_EXP 43
15726: NOT
15727: IFFALSE 15737
// StreamModeActive := true ;
15729: LD_ADDR_EXP 43
15733: PUSH
15734: LD_INT 1
15736: ST_TO_ADDR
// if p3 = 0 then
15737: LD_VAR 0 3
15741: PUSH
15742: LD_INT 0
15744: EQUAL
15745: IFFALSE 15751
// InitStreamMode ;
15747: CALL 11790 0 0
// if p3 = 1 then
15751: LD_VAR 0 3
15755: PUSH
15756: LD_INT 1
15758: EQUAL
15759: IFFALSE 15769
// sRocket := true ;
15761: LD_ADDR_EXP 48
15765: PUSH
15766: LD_INT 1
15768: ST_TO_ADDR
// if p3 = 2 then
15769: LD_VAR 0 3
15773: PUSH
15774: LD_INT 2
15776: EQUAL
15777: IFFALSE 15787
// sSpeed := true ;
15779: LD_ADDR_EXP 47
15783: PUSH
15784: LD_INT 1
15786: ST_TO_ADDR
// if p3 = 3 then
15787: LD_VAR 0 3
15791: PUSH
15792: LD_INT 3
15794: EQUAL
15795: IFFALSE 15805
// sEngine := true ;
15797: LD_ADDR_EXP 49
15801: PUSH
15802: LD_INT 1
15804: ST_TO_ADDR
// if p3 = 4 then
15805: LD_VAR 0 3
15809: PUSH
15810: LD_INT 4
15812: EQUAL
15813: IFFALSE 15823
// sSpec := true ;
15815: LD_ADDR_EXP 46
15819: PUSH
15820: LD_INT 1
15822: ST_TO_ADDR
// if p3 = 5 then
15823: LD_VAR 0 3
15827: PUSH
15828: LD_INT 5
15830: EQUAL
15831: IFFALSE 15841
// sLevel := true ;
15833: LD_ADDR_EXP 50
15837: PUSH
15838: LD_INT 1
15840: ST_TO_ADDR
// if p3 = 6 then
15841: LD_VAR 0 3
15845: PUSH
15846: LD_INT 6
15848: EQUAL
15849: IFFALSE 15859
// sArmoury := true ;
15851: LD_ADDR_EXP 51
15855: PUSH
15856: LD_INT 1
15858: ST_TO_ADDR
// if p3 = 7 then
15859: LD_VAR 0 3
15863: PUSH
15864: LD_INT 7
15866: EQUAL
15867: IFFALSE 15877
// sRadar := true ;
15869: LD_ADDR_EXP 52
15873: PUSH
15874: LD_INT 1
15876: ST_TO_ADDR
// if p3 = 8 then
15877: LD_VAR 0 3
15881: PUSH
15882: LD_INT 8
15884: EQUAL
15885: IFFALSE 15895
// sBunker := true ;
15887: LD_ADDR_EXP 53
15891: PUSH
15892: LD_INT 1
15894: ST_TO_ADDR
// if p3 = 9 then
15895: LD_VAR 0 3
15899: PUSH
15900: LD_INT 9
15902: EQUAL
15903: IFFALSE 15913
// sHack := true ;
15905: LD_ADDR_EXP 54
15909: PUSH
15910: LD_INT 1
15912: ST_TO_ADDR
// if p3 = 10 then
15913: LD_VAR 0 3
15917: PUSH
15918: LD_INT 10
15920: EQUAL
15921: IFFALSE 15931
// sFire := true ;
15923: LD_ADDR_EXP 55
15927: PUSH
15928: LD_INT 1
15930: ST_TO_ADDR
// if p3 = 11 then
15931: LD_VAR 0 3
15935: PUSH
15936: LD_INT 11
15938: EQUAL
15939: IFFALSE 15949
// sRefresh := true ;
15941: LD_ADDR_EXP 56
15945: PUSH
15946: LD_INT 1
15948: ST_TO_ADDR
// if p3 = 12 then
15949: LD_VAR 0 3
15953: PUSH
15954: LD_INT 12
15956: EQUAL
15957: IFFALSE 15967
// sExp := true ;
15959: LD_ADDR_EXP 57
15963: PUSH
15964: LD_INT 1
15966: ST_TO_ADDR
// if p3 = 13 then
15967: LD_VAR 0 3
15971: PUSH
15972: LD_INT 13
15974: EQUAL
15975: IFFALSE 15985
// sDepot := true ;
15977: LD_ADDR_EXP 58
15981: PUSH
15982: LD_INT 1
15984: ST_TO_ADDR
// if p3 = 14 then
15985: LD_VAR 0 3
15989: PUSH
15990: LD_INT 14
15992: EQUAL
15993: IFFALSE 16003
// sFlag := true ;
15995: LD_ADDR_EXP 59
15999: PUSH
16000: LD_INT 1
16002: ST_TO_ADDR
// if p3 = 15 then
16003: LD_VAR 0 3
16007: PUSH
16008: LD_INT 15
16010: EQUAL
16011: IFFALSE 16021
// sKamikadze := true ;
16013: LD_ADDR_EXP 67
16017: PUSH
16018: LD_INT 1
16020: ST_TO_ADDR
// if p3 = 16 then
16021: LD_VAR 0 3
16025: PUSH
16026: LD_INT 16
16028: EQUAL
16029: IFFALSE 16039
// sTroll := true ;
16031: LD_ADDR_EXP 68
16035: PUSH
16036: LD_INT 1
16038: ST_TO_ADDR
// if p3 = 17 then
16039: LD_VAR 0 3
16043: PUSH
16044: LD_INT 17
16046: EQUAL
16047: IFFALSE 16057
// sSlow := true ;
16049: LD_ADDR_EXP 69
16053: PUSH
16054: LD_INT 1
16056: ST_TO_ADDR
// if p3 = 18 then
16057: LD_VAR 0 3
16061: PUSH
16062: LD_INT 18
16064: EQUAL
16065: IFFALSE 16075
// sLack := true ;
16067: LD_ADDR_EXP 70
16071: PUSH
16072: LD_INT 1
16074: ST_TO_ADDR
// if p3 = 19 then
16075: LD_VAR 0 3
16079: PUSH
16080: LD_INT 19
16082: EQUAL
16083: IFFALSE 16093
// sTank := true ;
16085: LD_ADDR_EXP 72
16089: PUSH
16090: LD_INT 1
16092: ST_TO_ADDR
// if p3 = 20 then
16093: LD_VAR 0 3
16097: PUSH
16098: LD_INT 20
16100: EQUAL
16101: IFFALSE 16111
// sRemote := true ;
16103: LD_ADDR_EXP 73
16107: PUSH
16108: LD_INT 1
16110: ST_TO_ADDR
// if p3 = 21 then
16111: LD_VAR 0 3
16115: PUSH
16116: LD_INT 21
16118: EQUAL
16119: IFFALSE 16129
// sPowell := true ;
16121: LD_ADDR_EXP 74
16125: PUSH
16126: LD_INT 1
16128: ST_TO_ADDR
// if p3 = 22 then
16129: LD_VAR 0 3
16133: PUSH
16134: LD_INT 22
16136: EQUAL
16137: IFFALSE 16147
// sTeleport := true ;
16139: LD_ADDR_EXP 77
16143: PUSH
16144: LD_INT 1
16146: ST_TO_ADDR
// if p3 = 23 then
16147: LD_VAR 0 3
16151: PUSH
16152: LD_INT 23
16154: EQUAL
16155: IFFALSE 16165
// sOilTower := true ;
16157: LD_ADDR_EXP 79
16161: PUSH
16162: LD_INT 1
16164: ST_TO_ADDR
// if p3 = 24 then
16165: LD_VAR 0 3
16169: PUSH
16170: LD_INT 24
16172: EQUAL
16173: IFFALSE 16183
// sShovel := true ;
16175: LD_ADDR_EXP 80
16179: PUSH
16180: LD_INT 1
16182: ST_TO_ADDR
// if p3 = 25 then
16183: LD_VAR 0 3
16187: PUSH
16188: LD_INT 25
16190: EQUAL
16191: IFFALSE 16201
// sSheik := true ;
16193: LD_ADDR_EXP 81
16197: PUSH
16198: LD_INT 1
16200: ST_TO_ADDR
// if p3 = 26 then
16201: LD_VAR 0 3
16205: PUSH
16206: LD_INT 26
16208: EQUAL
16209: IFFALSE 16219
// sEarthquake := true ;
16211: LD_ADDR_EXP 83
16215: PUSH
16216: LD_INT 1
16218: ST_TO_ADDR
// if p3 = 27 then
16219: LD_VAR 0 3
16223: PUSH
16224: LD_INT 27
16226: EQUAL
16227: IFFALSE 16237
// sAI := true ;
16229: LD_ADDR_EXP 84
16233: PUSH
16234: LD_INT 1
16236: ST_TO_ADDR
// if p3 = 28 then
16237: LD_VAR 0 3
16241: PUSH
16242: LD_INT 28
16244: EQUAL
16245: IFFALSE 16255
// sCargo := true ;
16247: LD_ADDR_EXP 87
16251: PUSH
16252: LD_INT 1
16254: ST_TO_ADDR
// if p3 = 29 then
16255: LD_VAR 0 3
16259: PUSH
16260: LD_INT 29
16262: EQUAL
16263: IFFALSE 16273
// sDLaser := true ;
16265: LD_ADDR_EXP 88
16269: PUSH
16270: LD_INT 1
16272: ST_TO_ADDR
// if p3 = 30 then
16273: LD_VAR 0 3
16277: PUSH
16278: LD_INT 30
16280: EQUAL
16281: IFFALSE 16291
// sExchange := true ;
16283: LD_ADDR_EXP 89
16287: PUSH
16288: LD_INT 1
16290: ST_TO_ADDR
// if p3 = 31 then
16291: LD_VAR 0 3
16295: PUSH
16296: LD_INT 31
16298: EQUAL
16299: IFFALSE 16309
// sFac := true ;
16301: LD_ADDR_EXP 90
16305: PUSH
16306: LD_INT 1
16308: ST_TO_ADDR
// if p3 = 32 then
16309: LD_VAR 0 3
16313: PUSH
16314: LD_INT 32
16316: EQUAL
16317: IFFALSE 16327
// sPower := true ;
16319: LD_ADDR_EXP 91
16323: PUSH
16324: LD_INT 1
16326: ST_TO_ADDR
// if p3 = 33 then
16327: LD_VAR 0 3
16331: PUSH
16332: LD_INT 33
16334: EQUAL
16335: IFFALSE 16345
// sRandom := true ;
16337: LD_ADDR_EXP 92
16341: PUSH
16342: LD_INT 1
16344: ST_TO_ADDR
// if p3 = 34 then
16345: LD_VAR 0 3
16349: PUSH
16350: LD_INT 34
16352: EQUAL
16353: IFFALSE 16363
// sShield := true ;
16355: LD_ADDR_EXP 93
16359: PUSH
16360: LD_INT 1
16362: ST_TO_ADDR
// if p3 = 35 then
16363: LD_VAR 0 3
16367: PUSH
16368: LD_INT 35
16370: EQUAL
16371: IFFALSE 16381
// sTime := true ;
16373: LD_ADDR_EXP 94
16377: PUSH
16378: LD_INT 1
16380: ST_TO_ADDR
// if p3 = 36 then
16381: LD_VAR 0 3
16385: PUSH
16386: LD_INT 36
16388: EQUAL
16389: IFFALSE 16399
// sTools := true ;
16391: LD_ADDR_EXP 95
16395: PUSH
16396: LD_INT 1
16398: ST_TO_ADDR
// if p3 = 101 then
16399: LD_VAR 0 3
16403: PUSH
16404: LD_INT 101
16406: EQUAL
16407: IFFALSE 16417
// sSold := true ;
16409: LD_ADDR_EXP 60
16413: PUSH
16414: LD_INT 1
16416: ST_TO_ADDR
// if p3 = 102 then
16417: LD_VAR 0 3
16421: PUSH
16422: LD_INT 102
16424: EQUAL
16425: IFFALSE 16435
// sDiff := true ;
16427: LD_ADDR_EXP 61
16431: PUSH
16432: LD_INT 1
16434: ST_TO_ADDR
// if p3 = 103 then
16435: LD_VAR 0 3
16439: PUSH
16440: LD_INT 103
16442: EQUAL
16443: IFFALSE 16453
// sFog := true ;
16445: LD_ADDR_EXP 64
16449: PUSH
16450: LD_INT 1
16452: ST_TO_ADDR
// if p3 = 104 then
16453: LD_VAR 0 3
16457: PUSH
16458: LD_INT 104
16460: EQUAL
16461: IFFALSE 16471
// sReset := true ;
16463: LD_ADDR_EXP 65
16467: PUSH
16468: LD_INT 1
16470: ST_TO_ADDR
// if p3 = 105 then
16471: LD_VAR 0 3
16475: PUSH
16476: LD_INT 105
16478: EQUAL
16479: IFFALSE 16489
// sSun := true ;
16481: LD_ADDR_EXP 66
16485: PUSH
16486: LD_INT 1
16488: ST_TO_ADDR
// if p3 = 106 then
16489: LD_VAR 0 3
16493: PUSH
16494: LD_INT 106
16496: EQUAL
16497: IFFALSE 16507
// sTiger := true ;
16499: LD_ADDR_EXP 62
16503: PUSH
16504: LD_INT 1
16506: ST_TO_ADDR
// if p3 = 107 then
16507: LD_VAR 0 3
16511: PUSH
16512: LD_INT 107
16514: EQUAL
16515: IFFALSE 16525
// sBomb := true ;
16517: LD_ADDR_EXP 63
16521: PUSH
16522: LD_INT 1
16524: ST_TO_ADDR
// if p3 = 108 then
16525: LD_VAR 0 3
16529: PUSH
16530: LD_INT 108
16532: EQUAL
16533: IFFALSE 16543
// sWound := true ;
16535: LD_ADDR_EXP 71
16539: PUSH
16540: LD_INT 1
16542: ST_TO_ADDR
// if p3 = 109 then
16543: LD_VAR 0 3
16547: PUSH
16548: LD_INT 109
16550: EQUAL
16551: IFFALSE 16561
// sBetray := true ;
16553: LD_ADDR_EXP 75
16557: PUSH
16558: LD_INT 1
16560: ST_TO_ADDR
// if p3 = 110 then
16561: LD_VAR 0 3
16565: PUSH
16566: LD_INT 110
16568: EQUAL
16569: IFFALSE 16579
// sContamin := true ;
16571: LD_ADDR_EXP 76
16575: PUSH
16576: LD_INT 1
16578: ST_TO_ADDR
// if p3 = 111 then
16579: LD_VAR 0 3
16583: PUSH
16584: LD_INT 111
16586: EQUAL
16587: IFFALSE 16597
// sOil := true ;
16589: LD_ADDR_EXP 78
16593: PUSH
16594: LD_INT 1
16596: ST_TO_ADDR
// if p3 = 112 then
16597: LD_VAR 0 3
16601: PUSH
16602: LD_INT 112
16604: EQUAL
16605: IFFALSE 16615
// sStu := true ;
16607: LD_ADDR_EXP 82
16611: PUSH
16612: LD_INT 1
16614: ST_TO_ADDR
// if p3 = 113 then
16615: LD_VAR 0 3
16619: PUSH
16620: LD_INT 113
16622: EQUAL
16623: IFFALSE 16633
// sBazooka := true ;
16625: LD_ADDR_EXP 85
16629: PUSH
16630: LD_INT 1
16632: ST_TO_ADDR
// if p3 = 114 then
16633: LD_VAR 0 3
16637: PUSH
16638: LD_INT 114
16640: EQUAL
16641: IFFALSE 16651
// sMortar := true ;
16643: LD_ADDR_EXP 86
16647: PUSH
16648: LD_INT 1
16650: ST_TO_ADDR
// if p3 = 115 then
16651: LD_VAR 0 3
16655: PUSH
16656: LD_INT 115
16658: EQUAL
16659: IFFALSE 16669
// sRanger := true ;
16661: LD_ADDR_EXP 96
16665: PUSH
16666: LD_INT 1
16668: ST_TO_ADDR
// end ; end ;
16669: PPOPN 6
16671: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16672: LD_EXP 43
16676: PUSH
16677: LD_EXP 48
16681: AND
16682: IFFALSE 16806
16684: GO 16686
16686: DISABLE
16687: LD_INT 0
16689: PPUSH
16690: PPUSH
// begin enable ;
16691: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16692: LD_ADDR_VAR 0 2
16696: PUSH
16697: LD_INT 22
16699: PUSH
16700: LD_OWVAR 2
16704: PUSH
16705: EMPTY
16706: LIST
16707: LIST
16708: PUSH
16709: LD_INT 2
16711: PUSH
16712: LD_INT 34
16714: PUSH
16715: LD_INT 7
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: PUSH
16722: LD_INT 34
16724: PUSH
16725: LD_INT 45
16727: PUSH
16728: EMPTY
16729: LIST
16730: LIST
16731: PUSH
16732: LD_INT 34
16734: PUSH
16735: LD_INT 28
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: PUSH
16742: LD_INT 34
16744: PUSH
16745: LD_INT 47
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: LIST
16756: LIST
16757: LIST
16758: PUSH
16759: EMPTY
16760: LIST
16761: LIST
16762: PPUSH
16763: CALL_OW 69
16767: ST_TO_ADDR
// if not tmp then
16768: LD_VAR 0 2
16772: NOT
16773: IFFALSE 16777
// exit ;
16775: GO 16806
// for i in tmp do
16777: LD_ADDR_VAR 0 1
16781: PUSH
16782: LD_VAR 0 2
16786: PUSH
16787: FOR_IN
16788: IFFALSE 16804
// begin SetLives ( i , 0 ) ;
16790: LD_VAR 0 1
16794: PPUSH
16795: LD_INT 0
16797: PPUSH
16798: CALL_OW 234
// end ;
16802: GO 16787
16804: POP
16805: POP
// end ;
16806: PPOPN 2
16808: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16809: LD_EXP 43
16813: PUSH
16814: LD_EXP 49
16818: AND
16819: IFFALSE 16903
16821: GO 16823
16823: DISABLE
16824: LD_INT 0
16826: PPUSH
16827: PPUSH
// begin enable ;
16828: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16829: LD_ADDR_VAR 0 2
16833: PUSH
16834: LD_INT 22
16836: PUSH
16837: LD_OWVAR 2
16841: PUSH
16842: EMPTY
16843: LIST
16844: LIST
16845: PUSH
16846: LD_INT 32
16848: PUSH
16849: LD_INT 3
16851: PUSH
16852: EMPTY
16853: LIST
16854: LIST
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: PPUSH
16860: CALL_OW 69
16864: ST_TO_ADDR
// if not tmp then
16865: LD_VAR 0 2
16869: NOT
16870: IFFALSE 16874
// exit ;
16872: GO 16903
// for i in tmp do
16874: LD_ADDR_VAR 0 1
16878: PUSH
16879: LD_VAR 0 2
16883: PUSH
16884: FOR_IN
16885: IFFALSE 16901
// begin SetLives ( i , 0 ) ;
16887: LD_VAR 0 1
16891: PPUSH
16892: LD_INT 0
16894: PPUSH
16895: CALL_OW 234
// end ;
16899: GO 16884
16901: POP
16902: POP
// end ;
16903: PPOPN 2
16905: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16906: LD_EXP 43
16910: PUSH
16911: LD_EXP 46
16915: AND
16916: IFFALSE 17009
16918: GO 16920
16920: DISABLE
16921: LD_INT 0
16923: PPUSH
// begin enable ;
16924: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16925: LD_ADDR_VAR 0 1
16929: PUSH
16930: LD_INT 22
16932: PUSH
16933: LD_OWVAR 2
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: PUSH
16942: LD_INT 2
16944: PUSH
16945: LD_INT 25
16947: PUSH
16948: LD_INT 5
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: PUSH
16955: LD_INT 25
16957: PUSH
16958: LD_INT 9
16960: PUSH
16961: EMPTY
16962: LIST
16963: LIST
16964: PUSH
16965: LD_INT 25
16967: PUSH
16968: LD_INT 8
16970: PUSH
16971: EMPTY
16972: LIST
16973: LIST
16974: PUSH
16975: EMPTY
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: PUSH
16981: EMPTY
16982: LIST
16983: LIST
16984: PPUSH
16985: CALL_OW 69
16989: PUSH
16990: FOR_IN
16991: IFFALSE 17007
// begin SetClass ( i , 1 ) ;
16993: LD_VAR 0 1
16997: PPUSH
16998: LD_INT 1
17000: PPUSH
17001: CALL_OW 336
// end ;
17005: GO 16990
17007: POP
17008: POP
// end ;
17009: PPOPN 1
17011: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17012: LD_EXP 43
17016: PUSH
17017: LD_EXP 47
17021: AND
17022: PUSH
17023: LD_OWVAR 65
17027: PUSH
17028: LD_INT 7
17030: LESS
17031: AND
17032: IFFALSE 17046
17034: GO 17036
17036: DISABLE
// begin enable ;
17037: ENABLE
// game_speed := 7 ;
17038: LD_ADDR_OWVAR 65
17042: PUSH
17043: LD_INT 7
17045: ST_TO_ADDR
// end ;
17046: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17047: LD_EXP 43
17051: PUSH
17052: LD_EXP 50
17056: AND
17057: IFFALSE 17259
17059: GO 17061
17061: DISABLE
17062: LD_INT 0
17064: PPUSH
17065: PPUSH
17066: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17067: LD_ADDR_VAR 0 3
17071: PUSH
17072: LD_INT 81
17074: PUSH
17075: LD_OWVAR 2
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: PUSH
17084: LD_INT 21
17086: PUSH
17087: LD_INT 1
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: PUSH
17094: EMPTY
17095: LIST
17096: LIST
17097: PPUSH
17098: CALL_OW 69
17102: ST_TO_ADDR
// if not tmp then
17103: LD_VAR 0 3
17107: NOT
17108: IFFALSE 17112
// exit ;
17110: GO 17259
// if tmp > 5 then
17112: LD_VAR 0 3
17116: PUSH
17117: LD_INT 5
17119: GREATER
17120: IFFALSE 17132
// k := 5 else
17122: LD_ADDR_VAR 0 2
17126: PUSH
17127: LD_INT 5
17129: ST_TO_ADDR
17130: GO 17142
// k := tmp ;
17132: LD_ADDR_VAR 0 2
17136: PUSH
17137: LD_VAR 0 3
17141: ST_TO_ADDR
// for i := 1 to k do
17142: LD_ADDR_VAR 0 1
17146: PUSH
17147: DOUBLE
17148: LD_INT 1
17150: DEC
17151: ST_TO_ADDR
17152: LD_VAR 0 2
17156: PUSH
17157: FOR_TO
17158: IFFALSE 17257
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17160: LD_VAR 0 3
17164: PUSH
17165: LD_VAR 0 1
17169: ARRAY
17170: PPUSH
17171: LD_VAR 0 1
17175: PUSH
17176: LD_INT 4
17178: MOD
17179: PUSH
17180: LD_INT 1
17182: PLUS
17183: PPUSH
17184: CALL_OW 259
17188: PUSH
17189: LD_INT 10
17191: LESS
17192: IFFALSE 17255
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17194: LD_VAR 0 3
17198: PUSH
17199: LD_VAR 0 1
17203: ARRAY
17204: PPUSH
17205: LD_VAR 0 1
17209: PUSH
17210: LD_INT 4
17212: MOD
17213: PUSH
17214: LD_INT 1
17216: PLUS
17217: PPUSH
17218: LD_VAR 0 3
17222: PUSH
17223: LD_VAR 0 1
17227: ARRAY
17228: PPUSH
17229: LD_VAR 0 1
17233: PUSH
17234: LD_INT 4
17236: MOD
17237: PUSH
17238: LD_INT 1
17240: PLUS
17241: PPUSH
17242: CALL_OW 259
17246: PUSH
17247: LD_INT 1
17249: PLUS
17250: PPUSH
17251: CALL_OW 237
17255: GO 17157
17257: POP
17258: POP
// end ;
17259: PPOPN 3
17261: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17262: LD_EXP 43
17266: PUSH
17267: LD_EXP 51
17271: AND
17272: IFFALSE 17292
17274: GO 17276
17276: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17277: LD_INT 4
17279: PPUSH
17280: LD_OWVAR 2
17284: PPUSH
17285: LD_INT 0
17287: PPUSH
17288: CALL_OW 324
17292: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17293: LD_EXP 43
17297: PUSH
17298: LD_EXP 80
17302: AND
17303: IFFALSE 17323
17305: GO 17307
17307: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17308: LD_INT 19
17310: PPUSH
17311: LD_OWVAR 2
17315: PPUSH
17316: LD_INT 0
17318: PPUSH
17319: CALL_OW 324
17323: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17324: LD_EXP 43
17328: PUSH
17329: LD_EXP 52
17333: AND
17334: IFFALSE 17436
17336: GO 17338
17338: DISABLE
17339: LD_INT 0
17341: PPUSH
17342: PPUSH
// begin enable ;
17343: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17344: LD_ADDR_VAR 0 2
17348: PUSH
17349: LD_INT 22
17351: PUSH
17352: LD_OWVAR 2
17356: PUSH
17357: EMPTY
17358: LIST
17359: LIST
17360: PUSH
17361: LD_INT 2
17363: PUSH
17364: LD_INT 34
17366: PUSH
17367: LD_INT 11
17369: PUSH
17370: EMPTY
17371: LIST
17372: LIST
17373: PUSH
17374: LD_INT 34
17376: PUSH
17377: LD_INT 30
17379: PUSH
17380: EMPTY
17381: LIST
17382: LIST
17383: PUSH
17384: EMPTY
17385: LIST
17386: LIST
17387: LIST
17388: PUSH
17389: EMPTY
17390: LIST
17391: LIST
17392: PPUSH
17393: CALL_OW 69
17397: ST_TO_ADDR
// if not tmp then
17398: LD_VAR 0 2
17402: NOT
17403: IFFALSE 17407
// exit ;
17405: GO 17436
// for i in tmp do
17407: LD_ADDR_VAR 0 1
17411: PUSH
17412: LD_VAR 0 2
17416: PUSH
17417: FOR_IN
17418: IFFALSE 17434
// begin SetLives ( i , 0 ) ;
17420: LD_VAR 0 1
17424: PPUSH
17425: LD_INT 0
17427: PPUSH
17428: CALL_OW 234
// end ;
17432: GO 17417
17434: POP
17435: POP
// end ;
17436: PPOPN 2
17438: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17439: LD_EXP 43
17443: PUSH
17444: LD_EXP 53
17448: AND
17449: IFFALSE 17469
17451: GO 17453
17453: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17454: LD_INT 32
17456: PPUSH
17457: LD_OWVAR 2
17461: PPUSH
17462: LD_INT 0
17464: PPUSH
17465: CALL_OW 324
17469: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17470: LD_EXP 43
17474: PUSH
17475: LD_EXP 54
17479: AND
17480: IFFALSE 17661
17482: GO 17484
17484: DISABLE
17485: LD_INT 0
17487: PPUSH
17488: PPUSH
17489: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17490: LD_ADDR_VAR 0 2
17494: PUSH
17495: LD_INT 22
17497: PUSH
17498: LD_OWVAR 2
17502: PUSH
17503: EMPTY
17504: LIST
17505: LIST
17506: PUSH
17507: LD_INT 33
17509: PUSH
17510: LD_INT 3
17512: PUSH
17513: EMPTY
17514: LIST
17515: LIST
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: PPUSH
17521: CALL_OW 69
17525: ST_TO_ADDR
// if not tmp then
17526: LD_VAR 0 2
17530: NOT
17531: IFFALSE 17535
// exit ;
17533: GO 17661
// side := 0 ;
17535: LD_ADDR_VAR 0 3
17539: PUSH
17540: LD_INT 0
17542: ST_TO_ADDR
// for i := 1 to 8 do
17543: LD_ADDR_VAR 0 1
17547: PUSH
17548: DOUBLE
17549: LD_INT 1
17551: DEC
17552: ST_TO_ADDR
17553: LD_INT 8
17555: PUSH
17556: FOR_TO
17557: IFFALSE 17605
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17559: LD_OWVAR 2
17563: PUSH
17564: LD_VAR 0 1
17568: NONEQUAL
17569: PUSH
17570: LD_OWVAR 2
17574: PPUSH
17575: LD_VAR 0 1
17579: PPUSH
17580: CALL_OW 81
17584: PUSH
17585: LD_INT 2
17587: EQUAL
17588: AND
17589: IFFALSE 17603
// begin side := i ;
17591: LD_ADDR_VAR 0 3
17595: PUSH
17596: LD_VAR 0 1
17600: ST_TO_ADDR
// break ;
17601: GO 17605
// end ;
17603: GO 17556
17605: POP
17606: POP
// if not side then
17607: LD_VAR 0 3
17611: NOT
17612: IFFALSE 17616
// exit ;
17614: GO 17661
// for i := 1 to tmp do
17616: LD_ADDR_VAR 0 1
17620: PUSH
17621: DOUBLE
17622: LD_INT 1
17624: DEC
17625: ST_TO_ADDR
17626: LD_VAR 0 2
17630: PUSH
17631: FOR_TO
17632: IFFALSE 17659
// if Prob ( 60 ) then
17634: LD_INT 60
17636: PPUSH
17637: CALL_OW 13
17641: IFFALSE 17657
// SetSide ( i , side ) ;
17643: LD_VAR 0 1
17647: PPUSH
17648: LD_VAR 0 3
17652: PPUSH
17653: CALL_OW 235
17657: GO 17631
17659: POP
17660: POP
// end ;
17661: PPOPN 3
17663: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17664: LD_EXP 43
17668: PUSH
17669: LD_EXP 56
17673: AND
17674: IFFALSE 17793
17676: GO 17678
17678: DISABLE
17679: LD_INT 0
17681: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17682: LD_ADDR_VAR 0 1
17686: PUSH
17687: LD_INT 22
17689: PUSH
17690: LD_OWVAR 2
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: PUSH
17699: LD_INT 21
17701: PUSH
17702: LD_INT 1
17704: PUSH
17705: EMPTY
17706: LIST
17707: LIST
17708: PUSH
17709: LD_INT 3
17711: PUSH
17712: LD_INT 23
17714: PUSH
17715: LD_INT 0
17717: PUSH
17718: EMPTY
17719: LIST
17720: LIST
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: PUSH
17726: EMPTY
17727: LIST
17728: LIST
17729: LIST
17730: PPUSH
17731: CALL_OW 69
17735: PUSH
17736: FOR_IN
17737: IFFALSE 17791
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17739: LD_VAR 0 1
17743: PPUSH
17744: CALL_OW 257
17748: PUSH
17749: LD_INT 1
17751: PUSH
17752: LD_INT 2
17754: PUSH
17755: LD_INT 3
17757: PUSH
17758: LD_INT 4
17760: PUSH
17761: EMPTY
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: IN
17767: IFFALSE 17789
// SetClass ( un , rand ( 1 , 4 ) ) ;
17769: LD_VAR 0 1
17773: PPUSH
17774: LD_INT 1
17776: PPUSH
17777: LD_INT 4
17779: PPUSH
17780: CALL_OW 12
17784: PPUSH
17785: CALL_OW 336
17789: GO 17736
17791: POP
17792: POP
// end ;
17793: PPOPN 1
17795: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17796: LD_EXP 43
17800: PUSH
17801: LD_EXP 55
17805: AND
17806: IFFALSE 17885
17808: GO 17810
17810: DISABLE
17811: LD_INT 0
17813: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17814: LD_ADDR_VAR 0 1
17818: PUSH
17819: LD_INT 22
17821: PUSH
17822: LD_OWVAR 2
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: PUSH
17831: LD_INT 21
17833: PUSH
17834: LD_INT 3
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: PPUSH
17845: CALL_OW 69
17849: ST_TO_ADDR
// if not tmp then
17850: LD_VAR 0 1
17854: NOT
17855: IFFALSE 17859
// exit ;
17857: GO 17885
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17859: LD_VAR 0 1
17863: PUSH
17864: LD_INT 1
17866: PPUSH
17867: LD_VAR 0 1
17871: PPUSH
17872: CALL_OW 12
17876: ARRAY
17877: PPUSH
17878: LD_INT 100
17880: PPUSH
17881: CALL_OW 234
// end ;
17885: PPOPN 1
17887: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17888: LD_EXP 43
17892: PUSH
17893: LD_EXP 57
17897: AND
17898: IFFALSE 17996
17900: GO 17902
17902: DISABLE
17903: LD_INT 0
17905: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17906: LD_ADDR_VAR 0 1
17910: PUSH
17911: LD_INT 22
17913: PUSH
17914: LD_OWVAR 2
17918: PUSH
17919: EMPTY
17920: LIST
17921: LIST
17922: PUSH
17923: LD_INT 21
17925: PUSH
17926: LD_INT 1
17928: PUSH
17929: EMPTY
17930: LIST
17931: LIST
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: PPUSH
17937: CALL_OW 69
17941: ST_TO_ADDR
// if not tmp then
17942: LD_VAR 0 1
17946: NOT
17947: IFFALSE 17951
// exit ;
17949: GO 17996
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17951: LD_VAR 0 1
17955: PUSH
17956: LD_INT 1
17958: PPUSH
17959: LD_VAR 0 1
17963: PPUSH
17964: CALL_OW 12
17968: ARRAY
17969: PPUSH
17970: LD_INT 1
17972: PPUSH
17973: LD_INT 4
17975: PPUSH
17976: CALL_OW 12
17980: PPUSH
17981: LD_INT 3000
17983: PPUSH
17984: LD_INT 9000
17986: PPUSH
17987: CALL_OW 12
17991: PPUSH
17992: CALL_OW 492
// end ;
17996: PPOPN 1
17998: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17999: LD_EXP 43
18003: PUSH
18004: LD_EXP 58
18008: AND
18009: IFFALSE 18029
18011: GO 18013
18013: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18014: LD_INT 1
18016: PPUSH
18017: LD_OWVAR 2
18021: PPUSH
18022: LD_INT 0
18024: PPUSH
18025: CALL_OW 324
18029: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18030: LD_EXP 43
18034: PUSH
18035: LD_EXP 59
18039: AND
18040: IFFALSE 18123
18042: GO 18044
18044: DISABLE
18045: LD_INT 0
18047: PPUSH
18048: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18049: LD_ADDR_VAR 0 2
18053: PUSH
18054: LD_INT 22
18056: PUSH
18057: LD_OWVAR 2
18061: PUSH
18062: EMPTY
18063: LIST
18064: LIST
18065: PUSH
18066: LD_INT 21
18068: PUSH
18069: LD_INT 3
18071: PUSH
18072: EMPTY
18073: LIST
18074: LIST
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: PPUSH
18080: CALL_OW 69
18084: ST_TO_ADDR
// if not tmp then
18085: LD_VAR 0 2
18089: NOT
18090: IFFALSE 18094
// exit ;
18092: GO 18123
// for i in tmp do
18094: LD_ADDR_VAR 0 1
18098: PUSH
18099: LD_VAR 0 2
18103: PUSH
18104: FOR_IN
18105: IFFALSE 18121
// SetBLevel ( i , 10 ) ;
18107: LD_VAR 0 1
18111: PPUSH
18112: LD_INT 10
18114: PPUSH
18115: CALL_OW 241
18119: GO 18104
18121: POP
18122: POP
// end ;
18123: PPOPN 2
18125: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18126: LD_EXP 43
18130: PUSH
18131: LD_EXP 60
18135: AND
18136: IFFALSE 18247
18138: GO 18140
18140: DISABLE
18141: LD_INT 0
18143: PPUSH
18144: PPUSH
18145: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18146: LD_ADDR_VAR 0 3
18150: PUSH
18151: LD_INT 22
18153: PUSH
18154: LD_OWVAR 2
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PUSH
18163: LD_INT 25
18165: PUSH
18166: LD_INT 1
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PPUSH
18177: CALL_OW 69
18181: ST_TO_ADDR
// if not tmp then
18182: LD_VAR 0 3
18186: NOT
18187: IFFALSE 18191
// exit ;
18189: GO 18247
// un := tmp [ rand ( 1 , tmp ) ] ;
18191: LD_ADDR_VAR 0 2
18195: PUSH
18196: LD_VAR 0 3
18200: PUSH
18201: LD_INT 1
18203: PPUSH
18204: LD_VAR 0 3
18208: PPUSH
18209: CALL_OW 12
18213: ARRAY
18214: ST_TO_ADDR
// if Crawls ( un ) then
18215: LD_VAR 0 2
18219: PPUSH
18220: CALL_OW 318
18224: IFFALSE 18235
// ComWalk ( un ) ;
18226: LD_VAR 0 2
18230: PPUSH
18231: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18235: LD_VAR 0 2
18239: PPUSH
18240: LD_INT 5
18242: PPUSH
18243: CALL_OW 336
// end ;
18247: PPOPN 3
18249: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
18250: LD_EXP 43
18254: PUSH
18255: LD_EXP 61
18259: AND
18260: PUSH
18261: LD_OWVAR 67
18265: PUSH
18266: LD_INT 3
18268: LESS
18269: AND
18270: IFFALSE 18289
18272: GO 18274
18274: DISABLE
// Difficulty := Difficulty + 1 ;
18275: LD_ADDR_OWVAR 67
18279: PUSH
18280: LD_OWVAR 67
18284: PUSH
18285: LD_INT 1
18287: PLUS
18288: ST_TO_ADDR
18289: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18290: LD_EXP 43
18294: PUSH
18295: LD_EXP 62
18299: AND
18300: IFFALSE 18403
18302: GO 18304
18304: DISABLE
18305: LD_INT 0
18307: PPUSH
// begin for i := 1 to 5 do
18308: LD_ADDR_VAR 0 1
18312: PUSH
18313: DOUBLE
18314: LD_INT 1
18316: DEC
18317: ST_TO_ADDR
18318: LD_INT 5
18320: PUSH
18321: FOR_TO
18322: IFFALSE 18401
// begin uc_nation := nation_nature ;
18324: LD_ADDR_OWVAR 21
18328: PUSH
18329: LD_INT 0
18331: ST_TO_ADDR
// uc_side := 0 ;
18332: LD_ADDR_OWVAR 20
18336: PUSH
18337: LD_INT 0
18339: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18340: LD_ADDR_OWVAR 29
18344: PUSH
18345: LD_INT 12
18347: PUSH
18348: LD_INT 12
18350: PUSH
18351: EMPTY
18352: LIST
18353: LIST
18354: ST_TO_ADDR
// hc_agressivity := 20 ;
18355: LD_ADDR_OWVAR 35
18359: PUSH
18360: LD_INT 20
18362: ST_TO_ADDR
// hc_class := class_tiger ;
18363: LD_ADDR_OWVAR 28
18367: PUSH
18368: LD_INT 14
18370: ST_TO_ADDR
// hc_gallery :=  ;
18371: LD_ADDR_OWVAR 33
18375: PUSH
18376: LD_STRING 
18378: ST_TO_ADDR
// hc_name :=  ;
18379: LD_ADDR_OWVAR 26
18383: PUSH
18384: LD_STRING 
18386: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18387: CALL_OW 44
18391: PPUSH
18392: LD_INT 0
18394: PPUSH
18395: CALL_OW 51
// end ;
18399: GO 18321
18401: POP
18402: POP
// end ;
18403: PPOPN 1
18405: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18406: LD_EXP 43
18410: PUSH
18411: LD_EXP 63
18415: AND
18416: IFFALSE 18425
18418: GO 18420
18420: DISABLE
// StreamSibBomb ;
18421: CALL 18426 0 0
18425: END
// export function StreamSibBomb ; var i , x , y ; begin
18426: LD_INT 0
18428: PPUSH
18429: PPUSH
18430: PPUSH
18431: PPUSH
// result := false ;
18432: LD_ADDR_VAR 0 1
18436: PUSH
18437: LD_INT 0
18439: ST_TO_ADDR
// for i := 1 to 16 do
18440: LD_ADDR_VAR 0 2
18444: PUSH
18445: DOUBLE
18446: LD_INT 1
18448: DEC
18449: ST_TO_ADDR
18450: LD_INT 16
18452: PUSH
18453: FOR_TO
18454: IFFALSE 18653
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18456: LD_ADDR_VAR 0 3
18460: PUSH
18461: LD_INT 10
18463: PUSH
18464: LD_INT 20
18466: PUSH
18467: LD_INT 30
18469: PUSH
18470: LD_INT 40
18472: PUSH
18473: LD_INT 50
18475: PUSH
18476: LD_INT 60
18478: PUSH
18479: LD_INT 70
18481: PUSH
18482: LD_INT 80
18484: PUSH
18485: LD_INT 90
18487: PUSH
18488: LD_INT 100
18490: PUSH
18491: LD_INT 110
18493: PUSH
18494: LD_INT 120
18496: PUSH
18497: LD_INT 130
18499: PUSH
18500: LD_INT 140
18502: PUSH
18503: LD_INT 150
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: PUSH
18523: LD_INT 1
18525: PPUSH
18526: LD_INT 15
18528: PPUSH
18529: CALL_OW 12
18533: ARRAY
18534: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18535: LD_ADDR_VAR 0 4
18539: PUSH
18540: LD_INT 10
18542: PUSH
18543: LD_INT 20
18545: PUSH
18546: LD_INT 30
18548: PUSH
18549: LD_INT 40
18551: PUSH
18552: LD_INT 50
18554: PUSH
18555: LD_INT 60
18557: PUSH
18558: LD_INT 70
18560: PUSH
18561: LD_INT 80
18563: PUSH
18564: LD_INT 90
18566: PUSH
18567: LD_INT 100
18569: PUSH
18570: LD_INT 110
18572: PUSH
18573: LD_INT 120
18575: PUSH
18576: LD_INT 130
18578: PUSH
18579: LD_INT 140
18581: PUSH
18582: LD_INT 150
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: LIST
18594: LIST
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: LIST
18601: PUSH
18602: LD_INT 1
18604: PPUSH
18605: LD_INT 15
18607: PPUSH
18608: CALL_OW 12
18612: ARRAY
18613: ST_TO_ADDR
// if ValidHex ( x , y ) then
18614: LD_VAR 0 3
18618: PPUSH
18619: LD_VAR 0 4
18623: PPUSH
18624: CALL_OW 488
18628: IFFALSE 18651
// begin result := [ x , y ] ;
18630: LD_ADDR_VAR 0 1
18634: PUSH
18635: LD_VAR 0 3
18639: PUSH
18640: LD_VAR 0 4
18644: PUSH
18645: EMPTY
18646: LIST
18647: LIST
18648: ST_TO_ADDR
// break ;
18649: GO 18653
// end ; end ;
18651: GO 18453
18653: POP
18654: POP
// if result then
18655: LD_VAR 0 1
18659: IFFALSE 18719
// begin ToLua ( playSibBomb() ) ;
18661: LD_STRING playSibBomb()
18663: PPUSH
18664: CALL_OW 559
// wait ( 0 0$14 ) ;
18668: LD_INT 490
18670: PPUSH
18671: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18675: LD_VAR 0 1
18679: PUSH
18680: LD_INT 1
18682: ARRAY
18683: PPUSH
18684: LD_VAR 0 1
18688: PUSH
18689: LD_INT 2
18691: ARRAY
18692: PPUSH
18693: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18697: LD_VAR 0 1
18701: PUSH
18702: LD_INT 1
18704: ARRAY
18705: PPUSH
18706: LD_VAR 0 1
18710: PUSH
18711: LD_INT 2
18713: ARRAY
18714: PPUSH
18715: CALL_OW 429
// end ; end ;
18719: LD_VAR 0 1
18723: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18724: LD_EXP 43
18728: PUSH
18729: LD_EXP 65
18733: AND
18734: IFFALSE 18746
18736: GO 18738
18738: DISABLE
// YouLost (  ) ;
18739: LD_STRING 
18741: PPUSH
18742: CALL_OW 104
18746: END
// every 0 0$1 trigger StreamModeActive and sFog do
18747: LD_EXP 43
18751: PUSH
18752: LD_EXP 64
18756: AND
18757: IFFALSE 18771
18759: GO 18761
18761: DISABLE
// FogOff ( your_side ) ;
18762: LD_OWVAR 2
18766: PPUSH
18767: CALL_OW 344
18771: END
// every 0 0$1 trigger StreamModeActive and sSun do
18772: LD_EXP 43
18776: PUSH
18777: LD_EXP 66
18781: AND
18782: IFFALSE 18810
18784: GO 18786
18786: DISABLE
// begin solar_recharge_percent := 0 ;
18787: LD_ADDR_OWVAR 79
18791: PUSH
18792: LD_INT 0
18794: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18795: LD_INT 10500
18797: PPUSH
18798: CALL_OW 67
// solar_recharge_percent := 100 ;
18802: LD_ADDR_OWVAR 79
18806: PUSH
18807: LD_INT 100
18809: ST_TO_ADDR
// end ;
18810: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18811: LD_EXP 43
18815: PUSH
18816: LD_EXP 67
18820: AND
18821: IFFALSE 19060
18823: GO 18825
18825: DISABLE
18826: LD_INT 0
18828: PPUSH
18829: PPUSH
18830: PPUSH
// begin tmp := [ ] ;
18831: LD_ADDR_VAR 0 3
18835: PUSH
18836: EMPTY
18837: ST_TO_ADDR
// for i := 1 to 6 do
18838: LD_ADDR_VAR 0 1
18842: PUSH
18843: DOUBLE
18844: LD_INT 1
18846: DEC
18847: ST_TO_ADDR
18848: LD_INT 6
18850: PUSH
18851: FOR_TO
18852: IFFALSE 18957
// begin uc_nation := nation_nature ;
18854: LD_ADDR_OWVAR 21
18858: PUSH
18859: LD_INT 0
18861: ST_TO_ADDR
// uc_side := 0 ;
18862: LD_ADDR_OWVAR 20
18866: PUSH
18867: LD_INT 0
18869: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18870: LD_ADDR_OWVAR 29
18874: PUSH
18875: LD_INT 12
18877: PUSH
18878: LD_INT 12
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: ST_TO_ADDR
// hc_agressivity := 20 ;
18885: LD_ADDR_OWVAR 35
18889: PUSH
18890: LD_INT 20
18892: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18893: LD_ADDR_OWVAR 28
18897: PUSH
18898: LD_INT 17
18900: ST_TO_ADDR
// hc_gallery :=  ;
18901: LD_ADDR_OWVAR 33
18905: PUSH
18906: LD_STRING 
18908: ST_TO_ADDR
// hc_name :=  ;
18909: LD_ADDR_OWVAR 26
18913: PUSH
18914: LD_STRING 
18916: ST_TO_ADDR
// un := CreateHuman ;
18917: LD_ADDR_VAR 0 2
18921: PUSH
18922: CALL_OW 44
18926: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18927: LD_VAR 0 2
18931: PPUSH
18932: LD_INT 1
18934: PPUSH
18935: CALL_OW 51
// tmp := tmp ^ un ;
18939: LD_ADDR_VAR 0 3
18943: PUSH
18944: LD_VAR 0 3
18948: PUSH
18949: LD_VAR 0 2
18953: ADD
18954: ST_TO_ADDR
// end ;
18955: GO 18851
18957: POP
18958: POP
// repeat wait ( 0 0$1 ) ;
18959: LD_INT 35
18961: PPUSH
18962: CALL_OW 67
// for un in tmp do
18966: LD_ADDR_VAR 0 2
18970: PUSH
18971: LD_VAR 0 3
18975: PUSH
18976: FOR_IN
18977: IFFALSE 19051
// begin if IsDead ( un ) then
18979: LD_VAR 0 2
18983: PPUSH
18984: CALL_OW 301
18988: IFFALSE 19008
// begin tmp := tmp diff un ;
18990: LD_ADDR_VAR 0 3
18994: PUSH
18995: LD_VAR 0 3
18999: PUSH
19000: LD_VAR 0 2
19004: DIFF
19005: ST_TO_ADDR
// continue ;
19006: GO 18976
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19008: LD_VAR 0 2
19012: PPUSH
19013: LD_INT 3
19015: PUSH
19016: LD_INT 22
19018: PUSH
19019: LD_INT 0
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: PPUSH
19030: CALL_OW 69
19034: PPUSH
19035: LD_VAR 0 2
19039: PPUSH
19040: CALL_OW 74
19044: PPUSH
19045: CALL_OW 115
// end ;
19049: GO 18976
19051: POP
19052: POP
// until not tmp ;
19053: LD_VAR 0 3
19057: NOT
19058: IFFALSE 18959
// end ;
19060: PPOPN 3
19062: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19063: LD_EXP 43
19067: PUSH
19068: LD_EXP 68
19072: AND
19073: IFFALSE 19127
19075: GO 19077
19077: DISABLE
// begin ToLua ( displayTroll(); ) ;
19078: LD_STRING displayTroll();
19080: PPUSH
19081: CALL_OW 559
// wait ( 3 3$00 ) ;
19085: LD_INT 6300
19087: PPUSH
19088: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19092: LD_STRING hideTroll();
19094: PPUSH
19095: CALL_OW 559
// wait ( 1 1$00 ) ;
19099: LD_INT 2100
19101: PPUSH
19102: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19106: LD_STRING displayTroll();
19108: PPUSH
19109: CALL_OW 559
// wait ( 1 1$00 ) ;
19113: LD_INT 2100
19115: PPUSH
19116: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19120: LD_STRING hideTroll();
19122: PPUSH
19123: CALL_OW 559
// end ;
19127: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19128: LD_EXP 43
19132: PUSH
19133: LD_EXP 69
19137: AND
19138: IFFALSE 19201
19140: GO 19142
19142: DISABLE
19143: LD_INT 0
19145: PPUSH
// begin p := 0 ;
19146: LD_ADDR_VAR 0 1
19150: PUSH
19151: LD_INT 0
19153: ST_TO_ADDR
// repeat game_speed := 1 ;
19154: LD_ADDR_OWVAR 65
19158: PUSH
19159: LD_INT 1
19161: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19162: LD_INT 35
19164: PPUSH
19165: CALL_OW 67
// p := p + 1 ;
19169: LD_ADDR_VAR 0 1
19173: PUSH
19174: LD_VAR 0 1
19178: PUSH
19179: LD_INT 1
19181: PLUS
19182: ST_TO_ADDR
// until p >= 60 ;
19183: LD_VAR 0 1
19187: PUSH
19188: LD_INT 60
19190: GREATEREQUAL
19191: IFFALSE 19154
// game_speed := 4 ;
19193: LD_ADDR_OWVAR 65
19197: PUSH
19198: LD_INT 4
19200: ST_TO_ADDR
// end ;
19201: PPOPN 1
19203: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19204: LD_EXP 43
19208: PUSH
19209: LD_EXP 70
19213: AND
19214: IFFALSE 19360
19216: GO 19218
19218: DISABLE
19219: LD_INT 0
19221: PPUSH
19222: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19223: LD_ADDR_VAR 0 1
19227: PUSH
19228: LD_INT 22
19230: PUSH
19231: LD_OWVAR 2
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: PUSH
19240: LD_INT 2
19242: PUSH
19243: LD_INT 30
19245: PUSH
19246: LD_INT 0
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: PUSH
19253: LD_INT 30
19255: PUSH
19256: LD_INT 1
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: PUSH
19263: EMPTY
19264: LIST
19265: LIST
19266: LIST
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: PPUSH
19272: CALL_OW 69
19276: ST_TO_ADDR
// if not depot then
19277: LD_VAR 0 1
19281: NOT
19282: IFFALSE 19286
// exit ;
19284: GO 19360
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19286: LD_ADDR_VAR 0 2
19290: PUSH
19291: LD_VAR 0 1
19295: PUSH
19296: LD_INT 1
19298: PPUSH
19299: LD_VAR 0 1
19303: PPUSH
19304: CALL_OW 12
19308: ARRAY
19309: PPUSH
19310: CALL_OW 274
19314: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19315: LD_VAR 0 2
19319: PPUSH
19320: LD_INT 1
19322: PPUSH
19323: LD_INT 0
19325: PPUSH
19326: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19330: LD_VAR 0 2
19334: PPUSH
19335: LD_INT 2
19337: PPUSH
19338: LD_INT 0
19340: PPUSH
19341: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19345: LD_VAR 0 2
19349: PPUSH
19350: LD_INT 3
19352: PPUSH
19353: LD_INT 0
19355: PPUSH
19356: CALL_OW 277
// end ;
19360: PPOPN 2
19362: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19363: LD_EXP 43
19367: PUSH
19368: LD_EXP 71
19372: AND
19373: IFFALSE 19470
19375: GO 19377
19377: DISABLE
19378: LD_INT 0
19380: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19381: LD_ADDR_VAR 0 1
19385: PUSH
19386: LD_INT 22
19388: PUSH
19389: LD_OWVAR 2
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: PUSH
19398: LD_INT 21
19400: PUSH
19401: LD_INT 1
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: PUSH
19408: LD_INT 3
19410: PUSH
19411: LD_INT 23
19413: PUSH
19414: LD_INT 0
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: LIST
19429: PPUSH
19430: CALL_OW 69
19434: ST_TO_ADDR
// if not tmp then
19435: LD_VAR 0 1
19439: NOT
19440: IFFALSE 19444
// exit ;
19442: GO 19470
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19444: LD_VAR 0 1
19448: PUSH
19449: LD_INT 1
19451: PPUSH
19452: LD_VAR 0 1
19456: PPUSH
19457: CALL_OW 12
19461: ARRAY
19462: PPUSH
19463: LD_INT 200
19465: PPUSH
19466: CALL_OW 234
// end ;
19470: PPOPN 1
19472: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19473: LD_EXP 43
19477: PUSH
19478: LD_EXP 72
19482: AND
19483: IFFALSE 19562
19485: GO 19487
19487: DISABLE
19488: LD_INT 0
19490: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19491: LD_ADDR_VAR 0 1
19495: PUSH
19496: LD_INT 22
19498: PUSH
19499: LD_OWVAR 2
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PUSH
19508: LD_INT 21
19510: PUSH
19511: LD_INT 2
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PPUSH
19522: CALL_OW 69
19526: ST_TO_ADDR
// if not tmp then
19527: LD_VAR 0 1
19531: NOT
19532: IFFALSE 19536
// exit ;
19534: GO 19562
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19536: LD_VAR 0 1
19540: PUSH
19541: LD_INT 1
19543: PPUSH
19544: LD_VAR 0 1
19548: PPUSH
19549: CALL_OW 12
19553: ARRAY
19554: PPUSH
19555: LD_INT 60
19557: PPUSH
19558: CALL_OW 234
// end ;
19562: PPOPN 1
19564: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19565: LD_EXP 43
19569: PUSH
19570: LD_EXP 73
19574: AND
19575: IFFALSE 19674
19577: GO 19579
19579: DISABLE
19580: LD_INT 0
19582: PPUSH
19583: PPUSH
// begin enable ;
19584: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19585: LD_ADDR_VAR 0 1
19589: PUSH
19590: LD_INT 22
19592: PUSH
19593: LD_OWVAR 2
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: PUSH
19602: LD_INT 61
19604: PUSH
19605: EMPTY
19606: LIST
19607: PUSH
19608: LD_INT 33
19610: PUSH
19611: LD_INT 2
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: LIST
19622: PPUSH
19623: CALL_OW 69
19627: ST_TO_ADDR
// if not tmp then
19628: LD_VAR 0 1
19632: NOT
19633: IFFALSE 19637
// exit ;
19635: GO 19674
// for i in tmp do
19637: LD_ADDR_VAR 0 2
19641: PUSH
19642: LD_VAR 0 1
19646: PUSH
19647: FOR_IN
19648: IFFALSE 19672
// if IsControledBy ( i ) then
19650: LD_VAR 0 2
19654: PPUSH
19655: CALL_OW 312
19659: IFFALSE 19670
// ComUnlink ( i ) ;
19661: LD_VAR 0 2
19665: PPUSH
19666: CALL_OW 136
19670: GO 19647
19672: POP
19673: POP
// end ;
19674: PPOPN 2
19676: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19677: LD_EXP 43
19681: PUSH
19682: LD_EXP 74
19686: AND
19687: IFFALSE 19827
19689: GO 19691
19691: DISABLE
19692: LD_INT 0
19694: PPUSH
19695: PPUSH
// begin ToLua ( displayPowell(); ) ;
19696: LD_STRING displayPowell();
19698: PPUSH
19699: CALL_OW 559
// uc_side := 0 ;
19703: LD_ADDR_OWVAR 20
19707: PUSH
19708: LD_INT 0
19710: ST_TO_ADDR
// uc_nation := 2 ;
19711: LD_ADDR_OWVAR 21
19715: PUSH
19716: LD_INT 2
19718: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19719: LD_ADDR_OWVAR 37
19723: PUSH
19724: LD_INT 14
19726: ST_TO_ADDR
// vc_engine := engine_siberite ;
19727: LD_ADDR_OWVAR 39
19731: PUSH
19732: LD_INT 3
19734: ST_TO_ADDR
// vc_control := control_apeman ;
19735: LD_ADDR_OWVAR 38
19739: PUSH
19740: LD_INT 5
19742: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19743: LD_ADDR_OWVAR 40
19747: PUSH
19748: LD_INT 29
19750: ST_TO_ADDR
// un := CreateVehicle ;
19751: LD_ADDR_VAR 0 2
19755: PUSH
19756: CALL_OW 45
19760: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19761: LD_VAR 0 2
19765: PPUSH
19766: LD_INT 1
19768: PPUSH
19769: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19773: LD_INT 35
19775: PPUSH
19776: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19780: LD_VAR 0 2
19784: PPUSH
19785: LD_INT 22
19787: PUSH
19788: LD_OWVAR 2
19792: PUSH
19793: EMPTY
19794: LIST
19795: LIST
19796: PPUSH
19797: CALL_OW 69
19801: PPUSH
19802: LD_VAR 0 2
19806: PPUSH
19807: CALL_OW 74
19811: PPUSH
19812: CALL_OW 115
// until IsDead ( un ) ;
19816: LD_VAR 0 2
19820: PPUSH
19821: CALL_OW 301
19825: IFFALSE 19773
// end ;
19827: PPOPN 2
19829: END
// every 0 0$1 trigger StreamModeActive and sStu do
19830: LD_EXP 43
19834: PUSH
19835: LD_EXP 82
19839: AND
19840: IFFALSE 19856
19842: GO 19844
19844: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19845: LD_STRING displayStucuk();
19847: PPUSH
19848: CALL_OW 559
// ResetFog ;
19852: CALL_OW 335
// end ;
19856: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19857: LD_EXP 43
19861: PUSH
19862: LD_EXP 75
19866: AND
19867: IFFALSE 20008
19869: GO 19871
19871: DISABLE
19872: LD_INT 0
19874: PPUSH
19875: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19876: LD_ADDR_VAR 0 2
19880: PUSH
19881: LD_INT 22
19883: PUSH
19884: LD_OWVAR 2
19888: PUSH
19889: EMPTY
19890: LIST
19891: LIST
19892: PUSH
19893: LD_INT 21
19895: PUSH
19896: LD_INT 1
19898: PUSH
19899: EMPTY
19900: LIST
19901: LIST
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: PPUSH
19907: CALL_OW 69
19911: ST_TO_ADDR
// if not tmp then
19912: LD_VAR 0 2
19916: NOT
19917: IFFALSE 19921
// exit ;
19919: GO 20008
// un := tmp [ rand ( 1 , tmp ) ] ;
19921: LD_ADDR_VAR 0 1
19925: PUSH
19926: LD_VAR 0 2
19930: PUSH
19931: LD_INT 1
19933: PPUSH
19934: LD_VAR 0 2
19938: PPUSH
19939: CALL_OW 12
19943: ARRAY
19944: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19945: LD_VAR 0 1
19949: PPUSH
19950: LD_INT 0
19952: PPUSH
19953: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19957: LD_VAR 0 1
19961: PPUSH
19962: LD_OWVAR 3
19966: PUSH
19967: LD_VAR 0 1
19971: DIFF
19972: PPUSH
19973: LD_VAR 0 1
19977: PPUSH
19978: CALL_OW 74
19982: PPUSH
19983: CALL_OW 115
// wait ( 0 0$20 ) ;
19987: LD_INT 700
19989: PPUSH
19990: CALL_OW 67
// SetSide ( un , your_side ) ;
19994: LD_VAR 0 1
19998: PPUSH
19999: LD_OWVAR 2
20003: PPUSH
20004: CALL_OW 235
// end ;
20008: PPOPN 2
20010: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20011: LD_EXP 43
20015: PUSH
20016: LD_EXP 76
20020: AND
20021: IFFALSE 20127
20023: GO 20025
20025: DISABLE
20026: LD_INT 0
20028: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20029: LD_ADDR_VAR 0 1
20033: PUSH
20034: LD_INT 22
20036: PUSH
20037: LD_OWVAR 2
20041: PUSH
20042: EMPTY
20043: LIST
20044: LIST
20045: PUSH
20046: LD_INT 2
20048: PUSH
20049: LD_INT 30
20051: PUSH
20052: LD_INT 0
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: PUSH
20059: LD_INT 30
20061: PUSH
20062: LD_INT 1
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: PUSH
20069: EMPTY
20070: LIST
20071: LIST
20072: LIST
20073: PUSH
20074: EMPTY
20075: LIST
20076: LIST
20077: PPUSH
20078: CALL_OW 69
20082: ST_TO_ADDR
// if not depot then
20083: LD_VAR 0 1
20087: NOT
20088: IFFALSE 20092
// exit ;
20090: GO 20127
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20092: LD_VAR 0 1
20096: PUSH
20097: LD_INT 1
20099: ARRAY
20100: PPUSH
20101: CALL_OW 250
20105: PPUSH
20106: LD_VAR 0 1
20110: PUSH
20111: LD_INT 1
20113: ARRAY
20114: PPUSH
20115: CALL_OW 251
20119: PPUSH
20120: LD_INT 70
20122: PPUSH
20123: CALL_OW 495
// end ;
20127: PPOPN 1
20129: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20130: LD_EXP 43
20134: PUSH
20135: LD_EXP 77
20139: AND
20140: IFFALSE 20351
20142: GO 20144
20144: DISABLE
20145: LD_INT 0
20147: PPUSH
20148: PPUSH
20149: PPUSH
20150: PPUSH
20151: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20152: LD_ADDR_VAR 0 5
20156: PUSH
20157: LD_INT 22
20159: PUSH
20160: LD_OWVAR 2
20164: PUSH
20165: EMPTY
20166: LIST
20167: LIST
20168: PUSH
20169: LD_INT 21
20171: PUSH
20172: LD_INT 1
20174: PUSH
20175: EMPTY
20176: LIST
20177: LIST
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: PPUSH
20183: CALL_OW 69
20187: ST_TO_ADDR
// if not tmp then
20188: LD_VAR 0 5
20192: NOT
20193: IFFALSE 20197
// exit ;
20195: GO 20351
// for i in tmp do
20197: LD_ADDR_VAR 0 1
20201: PUSH
20202: LD_VAR 0 5
20206: PUSH
20207: FOR_IN
20208: IFFALSE 20349
// begin d := rand ( 0 , 5 ) ;
20210: LD_ADDR_VAR 0 4
20214: PUSH
20215: LD_INT 0
20217: PPUSH
20218: LD_INT 5
20220: PPUSH
20221: CALL_OW 12
20225: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20226: LD_ADDR_VAR 0 2
20230: PUSH
20231: LD_VAR 0 1
20235: PPUSH
20236: CALL_OW 250
20240: PPUSH
20241: LD_VAR 0 4
20245: PPUSH
20246: LD_INT 3
20248: PPUSH
20249: LD_INT 12
20251: PPUSH
20252: CALL_OW 12
20256: PPUSH
20257: CALL_OW 272
20261: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20262: LD_ADDR_VAR 0 3
20266: PUSH
20267: LD_VAR 0 1
20271: PPUSH
20272: CALL_OW 251
20276: PPUSH
20277: LD_VAR 0 4
20281: PPUSH
20282: LD_INT 3
20284: PPUSH
20285: LD_INT 12
20287: PPUSH
20288: CALL_OW 12
20292: PPUSH
20293: CALL_OW 273
20297: ST_TO_ADDR
// if ValidHex ( x , y ) then
20298: LD_VAR 0 2
20302: PPUSH
20303: LD_VAR 0 3
20307: PPUSH
20308: CALL_OW 488
20312: IFFALSE 20347
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20314: LD_VAR 0 1
20318: PPUSH
20319: LD_VAR 0 2
20323: PPUSH
20324: LD_VAR 0 3
20328: PPUSH
20329: LD_INT 3
20331: PPUSH
20332: LD_INT 6
20334: PPUSH
20335: CALL_OW 12
20339: PPUSH
20340: LD_INT 1
20342: PPUSH
20343: CALL_OW 483
// end ;
20347: GO 20207
20349: POP
20350: POP
// end ;
20351: PPOPN 5
20353: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20354: LD_EXP 43
20358: PUSH
20359: LD_EXP 78
20363: AND
20364: IFFALSE 20458
20366: GO 20368
20368: DISABLE
20369: LD_INT 0
20371: PPUSH
20372: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20373: LD_ADDR_VAR 0 2
20377: PUSH
20378: LD_INT 22
20380: PUSH
20381: LD_OWVAR 2
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: PUSH
20390: LD_INT 32
20392: PUSH
20393: LD_INT 1
20395: PUSH
20396: EMPTY
20397: LIST
20398: LIST
20399: PUSH
20400: LD_INT 21
20402: PUSH
20403: LD_INT 2
20405: PUSH
20406: EMPTY
20407: LIST
20408: LIST
20409: PUSH
20410: EMPTY
20411: LIST
20412: LIST
20413: LIST
20414: PPUSH
20415: CALL_OW 69
20419: ST_TO_ADDR
// if not tmp then
20420: LD_VAR 0 2
20424: NOT
20425: IFFALSE 20429
// exit ;
20427: GO 20458
// for i in tmp do
20429: LD_ADDR_VAR 0 1
20433: PUSH
20434: LD_VAR 0 2
20438: PUSH
20439: FOR_IN
20440: IFFALSE 20456
// SetFuel ( i , 0 ) ;
20442: LD_VAR 0 1
20446: PPUSH
20447: LD_INT 0
20449: PPUSH
20450: CALL_OW 240
20454: GO 20439
20456: POP
20457: POP
// end ;
20458: PPOPN 2
20460: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20461: LD_EXP 43
20465: PUSH
20466: LD_EXP 79
20470: AND
20471: IFFALSE 20537
20473: GO 20475
20475: DISABLE
20476: LD_INT 0
20478: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20479: LD_ADDR_VAR 0 1
20483: PUSH
20484: LD_INT 22
20486: PUSH
20487: LD_OWVAR 2
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: PUSH
20496: LD_INT 30
20498: PUSH
20499: LD_INT 29
20501: PUSH
20502: EMPTY
20503: LIST
20504: LIST
20505: PUSH
20506: EMPTY
20507: LIST
20508: LIST
20509: PPUSH
20510: CALL_OW 69
20514: ST_TO_ADDR
// if not tmp then
20515: LD_VAR 0 1
20519: NOT
20520: IFFALSE 20524
// exit ;
20522: GO 20537
// DestroyUnit ( tmp [ 1 ] ) ;
20524: LD_VAR 0 1
20528: PUSH
20529: LD_INT 1
20531: ARRAY
20532: PPUSH
20533: CALL_OW 65
// end ;
20537: PPOPN 1
20539: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20540: LD_EXP 43
20544: PUSH
20545: LD_EXP 81
20549: AND
20550: IFFALSE 20679
20552: GO 20554
20554: DISABLE
20555: LD_INT 0
20557: PPUSH
// begin uc_side := 0 ;
20558: LD_ADDR_OWVAR 20
20562: PUSH
20563: LD_INT 0
20565: ST_TO_ADDR
// uc_nation := nation_arabian ;
20566: LD_ADDR_OWVAR 21
20570: PUSH
20571: LD_INT 2
20573: ST_TO_ADDR
// hc_gallery :=  ;
20574: LD_ADDR_OWVAR 33
20578: PUSH
20579: LD_STRING 
20581: ST_TO_ADDR
// hc_name :=  ;
20582: LD_ADDR_OWVAR 26
20586: PUSH
20587: LD_STRING 
20589: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20590: LD_INT 1
20592: PPUSH
20593: LD_INT 11
20595: PPUSH
20596: LD_INT 10
20598: PPUSH
20599: CALL_OW 380
// un := CreateHuman ;
20603: LD_ADDR_VAR 0 1
20607: PUSH
20608: CALL_OW 44
20612: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20613: LD_VAR 0 1
20617: PPUSH
20618: LD_INT 1
20620: PPUSH
20621: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20625: LD_INT 35
20627: PPUSH
20628: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20632: LD_VAR 0 1
20636: PPUSH
20637: LD_INT 22
20639: PUSH
20640: LD_OWVAR 2
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: PPUSH
20649: CALL_OW 69
20653: PPUSH
20654: LD_VAR 0 1
20658: PPUSH
20659: CALL_OW 74
20663: PPUSH
20664: CALL_OW 115
// until IsDead ( un ) ;
20668: LD_VAR 0 1
20672: PPUSH
20673: CALL_OW 301
20677: IFFALSE 20625
// end ;
20679: PPOPN 1
20681: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20682: LD_EXP 43
20686: PUSH
20687: LD_EXP 83
20691: AND
20692: IFFALSE 20704
20694: GO 20696
20696: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20697: LD_STRING earthquake(getX(game), 0, 32)
20699: PPUSH
20700: CALL_OW 559
20704: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20705: LD_EXP 43
20709: PUSH
20710: LD_EXP 84
20714: AND
20715: IFFALSE 20806
20717: GO 20719
20719: DISABLE
20720: LD_INT 0
20722: PPUSH
// begin enable ;
20723: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20724: LD_ADDR_VAR 0 1
20728: PUSH
20729: LD_INT 22
20731: PUSH
20732: LD_OWVAR 2
20736: PUSH
20737: EMPTY
20738: LIST
20739: LIST
20740: PUSH
20741: LD_INT 21
20743: PUSH
20744: LD_INT 2
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: PUSH
20751: LD_INT 33
20753: PUSH
20754: LD_INT 3
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: PUSH
20761: EMPTY
20762: LIST
20763: LIST
20764: LIST
20765: PPUSH
20766: CALL_OW 69
20770: ST_TO_ADDR
// if not tmp then
20771: LD_VAR 0 1
20775: NOT
20776: IFFALSE 20780
// exit ;
20778: GO 20806
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20780: LD_VAR 0 1
20784: PUSH
20785: LD_INT 1
20787: PPUSH
20788: LD_VAR 0 1
20792: PPUSH
20793: CALL_OW 12
20797: ARRAY
20798: PPUSH
20799: LD_INT 1
20801: PPUSH
20802: CALL_OW 234
// end ;
20806: PPOPN 1
20808: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20809: LD_EXP 43
20813: PUSH
20814: LD_EXP 85
20818: AND
20819: IFFALSE 20960
20821: GO 20823
20823: DISABLE
20824: LD_INT 0
20826: PPUSH
20827: PPUSH
20828: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20829: LD_ADDR_VAR 0 3
20833: PUSH
20834: LD_INT 22
20836: PUSH
20837: LD_OWVAR 2
20841: PUSH
20842: EMPTY
20843: LIST
20844: LIST
20845: PUSH
20846: LD_INT 25
20848: PUSH
20849: LD_INT 1
20851: PUSH
20852: EMPTY
20853: LIST
20854: LIST
20855: PUSH
20856: EMPTY
20857: LIST
20858: LIST
20859: PPUSH
20860: CALL_OW 69
20864: ST_TO_ADDR
// if not tmp then
20865: LD_VAR 0 3
20869: NOT
20870: IFFALSE 20874
// exit ;
20872: GO 20960
// un := tmp [ rand ( 1 , tmp ) ] ;
20874: LD_ADDR_VAR 0 2
20878: PUSH
20879: LD_VAR 0 3
20883: PUSH
20884: LD_INT 1
20886: PPUSH
20887: LD_VAR 0 3
20891: PPUSH
20892: CALL_OW 12
20896: ARRAY
20897: ST_TO_ADDR
// if Crawls ( un ) then
20898: LD_VAR 0 2
20902: PPUSH
20903: CALL_OW 318
20907: IFFALSE 20918
// ComWalk ( un ) ;
20909: LD_VAR 0 2
20913: PPUSH
20914: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20918: LD_VAR 0 2
20922: PPUSH
20923: LD_INT 9
20925: PPUSH
20926: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20930: LD_INT 28
20932: PPUSH
20933: LD_OWVAR 2
20937: PPUSH
20938: LD_INT 2
20940: PPUSH
20941: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20945: LD_INT 29
20947: PPUSH
20948: LD_OWVAR 2
20952: PPUSH
20953: LD_INT 2
20955: PPUSH
20956: CALL_OW 322
// end ;
20960: PPOPN 3
20962: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20963: LD_EXP 43
20967: PUSH
20968: LD_EXP 86
20972: AND
20973: IFFALSE 21084
20975: GO 20977
20977: DISABLE
20978: LD_INT 0
20980: PPUSH
20981: PPUSH
20982: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20983: LD_ADDR_VAR 0 3
20987: PUSH
20988: LD_INT 22
20990: PUSH
20991: LD_OWVAR 2
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: PUSH
21000: LD_INT 25
21002: PUSH
21003: LD_INT 1
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: PUSH
21010: EMPTY
21011: LIST
21012: LIST
21013: PPUSH
21014: CALL_OW 69
21018: ST_TO_ADDR
// if not tmp then
21019: LD_VAR 0 3
21023: NOT
21024: IFFALSE 21028
// exit ;
21026: GO 21084
// un := tmp [ rand ( 1 , tmp ) ] ;
21028: LD_ADDR_VAR 0 2
21032: PUSH
21033: LD_VAR 0 3
21037: PUSH
21038: LD_INT 1
21040: PPUSH
21041: LD_VAR 0 3
21045: PPUSH
21046: CALL_OW 12
21050: ARRAY
21051: ST_TO_ADDR
// if Crawls ( un ) then
21052: LD_VAR 0 2
21056: PPUSH
21057: CALL_OW 318
21061: IFFALSE 21072
// ComWalk ( un ) ;
21063: LD_VAR 0 2
21067: PPUSH
21068: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21072: LD_VAR 0 2
21076: PPUSH
21077: LD_INT 8
21079: PPUSH
21080: CALL_OW 336
// end ;
21084: PPOPN 3
21086: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21087: LD_EXP 43
21091: PUSH
21092: LD_EXP 87
21096: AND
21097: IFFALSE 21241
21099: GO 21101
21101: DISABLE
21102: LD_INT 0
21104: PPUSH
21105: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21106: LD_ADDR_VAR 0 2
21110: PUSH
21111: LD_INT 22
21113: PUSH
21114: LD_OWVAR 2
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: PUSH
21123: LD_INT 21
21125: PUSH
21126: LD_INT 2
21128: PUSH
21129: EMPTY
21130: LIST
21131: LIST
21132: PUSH
21133: LD_INT 2
21135: PUSH
21136: LD_INT 34
21138: PUSH
21139: LD_INT 12
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: PUSH
21146: LD_INT 34
21148: PUSH
21149: LD_INT 51
21151: PUSH
21152: EMPTY
21153: LIST
21154: LIST
21155: PUSH
21156: LD_INT 34
21158: PUSH
21159: LD_INT 32
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: LIST
21176: PPUSH
21177: CALL_OW 69
21181: ST_TO_ADDR
// if not tmp then
21182: LD_VAR 0 2
21186: NOT
21187: IFFALSE 21191
// exit ;
21189: GO 21241
// for i in tmp do
21191: LD_ADDR_VAR 0 1
21195: PUSH
21196: LD_VAR 0 2
21200: PUSH
21201: FOR_IN
21202: IFFALSE 21239
// if GetCargo ( i , mat_artifact ) = 0 then
21204: LD_VAR 0 1
21208: PPUSH
21209: LD_INT 4
21211: PPUSH
21212: CALL_OW 289
21216: PUSH
21217: LD_INT 0
21219: EQUAL
21220: IFFALSE 21237
// SetCargo ( i , mat_siberit , 100 ) ;
21222: LD_VAR 0 1
21226: PPUSH
21227: LD_INT 3
21229: PPUSH
21230: LD_INT 100
21232: PPUSH
21233: CALL_OW 290
21237: GO 21201
21239: POP
21240: POP
// end ;
21241: PPOPN 2
21243: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21244: LD_EXP 43
21248: PUSH
21249: LD_EXP 88
21253: AND
21254: IFFALSE 21437
21256: GO 21258
21258: DISABLE
21259: LD_INT 0
21261: PPUSH
21262: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21263: LD_ADDR_VAR 0 2
21267: PUSH
21268: LD_INT 22
21270: PUSH
21271: LD_OWVAR 2
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: PPUSH
21280: CALL_OW 69
21284: ST_TO_ADDR
// if not tmp then
21285: LD_VAR 0 2
21289: NOT
21290: IFFALSE 21294
// exit ;
21292: GO 21437
// for i := 1 to 2 do
21294: LD_ADDR_VAR 0 1
21298: PUSH
21299: DOUBLE
21300: LD_INT 1
21302: DEC
21303: ST_TO_ADDR
21304: LD_INT 2
21306: PUSH
21307: FOR_TO
21308: IFFALSE 21435
// begin uc_side := your_side ;
21310: LD_ADDR_OWVAR 20
21314: PUSH
21315: LD_OWVAR 2
21319: ST_TO_ADDR
// uc_nation := nation_american ;
21320: LD_ADDR_OWVAR 21
21324: PUSH
21325: LD_INT 1
21327: ST_TO_ADDR
// vc_chassis := us_morphling ;
21328: LD_ADDR_OWVAR 37
21332: PUSH
21333: LD_INT 5
21335: ST_TO_ADDR
// vc_engine := engine_siberite ;
21336: LD_ADDR_OWVAR 39
21340: PUSH
21341: LD_INT 3
21343: ST_TO_ADDR
// vc_control := control_computer ;
21344: LD_ADDR_OWVAR 38
21348: PUSH
21349: LD_INT 3
21351: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21352: LD_ADDR_OWVAR 40
21356: PUSH
21357: LD_INT 10
21359: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21360: LD_VAR 0 2
21364: PUSH
21365: LD_INT 1
21367: ARRAY
21368: PPUSH
21369: CALL_OW 310
21373: NOT
21374: IFFALSE 21421
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21376: CALL_OW 45
21380: PPUSH
21381: LD_VAR 0 2
21385: PUSH
21386: LD_INT 1
21388: ARRAY
21389: PPUSH
21390: CALL_OW 250
21394: PPUSH
21395: LD_VAR 0 2
21399: PUSH
21400: LD_INT 1
21402: ARRAY
21403: PPUSH
21404: CALL_OW 251
21408: PPUSH
21409: LD_INT 12
21411: PPUSH
21412: LD_INT 1
21414: PPUSH
21415: CALL_OW 50
21419: GO 21433
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21421: CALL_OW 45
21425: PPUSH
21426: LD_INT 1
21428: PPUSH
21429: CALL_OW 51
// end ;
21433: GO 21307
21435: POP
21436: POP
// end ;
21437: PPOPN 2
21439: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21440: LD_EXP 43
21444: PUSH
21445: LD_EXP 89
21449: AND
21450: IFFALSE 21672
21452: GO 21454
21454: DISABLE
21455: LD_INT 0
21457: PPUSH
21458: PPUSH
21459: PPUSH
21460: PPUSH
21461: PPUSH
21462: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21463: LD_ADDR_VAR 0 6
21467: PUSH
21468: LD_INT 22
21470: PUSH
21471: LD_OWVAR 2
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: PUSH
21480: LD_INT 21
21482: PUSH
21483: LD_INT 1
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: PUSH
21490: LD_INT 3
21492: PUSH
21493: LD_INT 23
21495: PUSH
21496: LD_INT 0
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: LIST
21511: PPUSH
21512: CALL_OW 69
21516: ST_TO_ADDR
// if not tmp then
21517: LD_VAR 0 6
21521: NOT
21522: IFFALSE 21526
// exit ;
21524: GO 21672
// s1 := rand ( 1 , 4 ) ;
21526: LD_ADDR_VAR 0 2
21530: PUSH
21531: LD_INT 1
21533: PPUSH
21534: LD_INT 4
21536: PPUSH
21537: CALL_OW 12
21541: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21542: LD_ADDR_VAR 0 4
21546: PUSH
21547: LD_VAR 0 6
21551: PUSH
21552: LD_INT 1
21554: ARRAY
21555: PPUSH
21556: LD_VAR 0 2
21560: PPUSH
21561: CALL_OW 259
21565: ST_TO_ADDR
// if s1 = 1 then
21566: LD_VAR 0 2
21570: PUSH
21571: LD_INT 1
21573: EQUAL
21574: IFFALSE 21594
// s2 := rand ( 2 , 4 ) else
21576: LD_ADDR_VAR 0 3
21580: PUSH
21581: LD_INT 2
21583: PPUSH
21584: LD_INT 4
21586: PPUSH
21587: CALL_OW 12
21591: ST_TO_ADDR
21592: GO 21602
// s2 := 1 ;
21594: LD_ADDR_VAR 0 3
21598: PUSH
21599: LD_INT 1
21601: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21602: LD_ADDR_VAR 0 5
21606: PUSH
21607: LD_VAR 0 6
21611: PUSH
21612: LD_INT 1
21614: ARRAY
21615: PPUSH
21616: LD_VAR 0 3
21620: PPUSH
21621: CALL_OW 259
21625: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21626: LD_VAR 0 6
21630: PUSH
21631: LD_INT 1
21633: ARRAY
21634: PPUSH
21635: LD_VAR 0 2
21639: PPUSH
21640: LD_VAR 0 5
21644: PPUSH
21645: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21649: LD_VAR 0 6
21653: PUSH
21654: LD_INT 1
21656: ARRAY
21657: PPUSH
21658: LD_VAR 0 3
21662: PPUSH
21663: LD_VAR 0 4
21667: PPUSH
21668: CALL_OW 237
// end ;
21672: PPOPN 6
21674: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21675: LD_EXP 43
21679: PUSH
21680: LD_EXP 90
21684: AND
21685: IFFALSE 21764
21687: GO 21689
21689: DISABLE
21690: LD_INT 0
21692: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21693: LD_ADDR_VAR 0 1
21697: PUSH
21698: LD_INT 22
21700: PUSH
21701: LD_OWVAR 2
21705: PUSH
21706: EMPTY
21707: LIST
21708: LIST
21709: PUSH
21710: LD_INT 30
21712: PUSH
21713: LD_INT 3
21715: PUSH
21716: EMPTY
21717: LIST
21718: LIST
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: PPUSH
21724: CALL_OW 69
21728: ST_TO_ADDR
// if not tmp then
21729: LD_VAR 0 1
21733: NOT
21734: IFFALSE 21738
// exit ;
21736: GO 21764
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21738: LD_VAR 0 1
21742: PUSH
21743: LD_INT 1
21745: PPUSH
21746: LD_VAR 0 1
21750: PPUSH
21751: CALL_OW 12
21755: ARRAY
21756: PPUSH
21757: LD_INT 1
21759: PPUSH
21760: CALL_OW 234
// end ;
21764: PPOPN 1
21766: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21767: LD_EXP 43
21771: PUSH
21772: LD_EXP 91
21776: AND
21777: IFFALSE 21889
21779: GO 21781
21781: DISABLE
21782: LD_INT 0
21784: PPUSH
21785: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21786: LD_ADDR_VAR 0 2
21790: PUSH
21791: LD_INT 22
21793: PUSH
21794: LD_OWVAR 2
21798: PUSH
21799: EMPTY
21800: LIST
21801: LIST
21802: PUSH
21803: LD_INT 2
21805: PUSH
21806: LD_INT 30
21808: PUSH
21809: LD_INT 27
21811: PUSH
21812: EMPTY
21813: LIST
21814: LIST
21815: PUSH
21816: LD_INT 30
21818: PUSH
21819: LD_INT 26
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: PUSH
21826: LD_INT 30
21828: PUSH
21829: LD_INT 28
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: PUSH
21836: EMPTY
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: PPUSH
21846: CALL_OW 69
21850: ST_TO_ADDR
// if not tmp then
21851: LD_VAR 0 2
21855: NOT
21856: IFFALSE 21860
// exit ;
21858: GO 21889
// for i in tmp do
21860: LD_ADDR_VAR 0 1
21864: PUSH
21865: LD_VAR 0 2
21869: PUSH
21870: FOR_IN
21871: IFFALSE 21887
// SetLives ( i , 1 ) ;
21873: LD_VAR 0 1
21877: PPUSH
21878: LD_INT 1
21880: PPUSH
21881: CALL_OW 234
21885: GO 21870
21887: POP
21888: POP
// end ;
21889: PPOPN 2
21891: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21892: LD_EXP 43
21896: PUSH
21897: LD_EXP 92
21901: AND
21902: IFFALSE 22176
21904: GO 21906
21906: DISABLE
21907: LD_INT 0
21909: PPUSH
21910: PPUSH
21911: PPUSH
// begin i := rand ( 1 , 7 ) ;
21912: LD_ADDR_VAR 0 1
21916: PUSH
21917: LD_INT 1
21919: PPUSH
21920: LD_INT 7
21922: PPUSH
21923: CALL_OW 12
21927: ST_TO_ADDR
// case i of 1 :
21928: LD_VAR 0 1
21932: PUSH
21933: LD_INT 1
21935: DOUBLE
21936: EQUAL
21937: IFTRUE 21941
21939: GO 21951
21941: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21942: LD_STRING earthquake(getX(game), 0, 32)
21944: PPUSH
21945: CALL_OW 559
21949: GO 22176
21951: LD_INT 2
21953: DOUBLE
21954: EQUAL
21955: IFTRUE 21959
21957: GO 21973
21959: POP
// begin ToLua ( displayStucuk(); ) ;
21960: LD_STRING displayStucuk();
21962: PPUSH
21963: CALL_OW 559
// ResetFog ;
21967: CALL_OW 335
// end ; 3 :
21971: GO 22176
21973: LD_INT 3
21975: DOUBLE
21976: EQUAL
21977: IFTRUE 21981
21979: GO 22085
21981: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21982: LD_ADDR_VAR 0 2
21986: PUSH
21987: LD_INT 22
21989: PUSH
21990: LD_OWVAR 2
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: PUSH
21999: LD_INT 25
22001: PUSH
22002: LD_INT 1
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: PUSH
22009: EMPTY
22010: LIST
22011: LIST
22012: PPUSH
22013: CALL_OW 69
22017: ST_TO_ADDR
// if not tmp then
22018: LD_VAR 0 2
22022: NOT
22023: IFFALSE 22027
// exit ;
22025: GO 22176
// un := tmp [ rand ( 1 , tmp ) ] ;
22027: LD_ADDR_VAR 0 3
22031: PUSH
22032: LD_VAR 0 2
22036: PUSH
22037: LD_INT 1
22039: PPUSH
22040: LD_VAR 0 2
22044: PPUSH
22045: CALL_OW 12
22049: ARRAY
22050: ST_TO_ADDR
// if Crawls ( un ) then
22051: LD_VAR 0 3
22055: PPUSH
22056: CALL_OW 318
22060: IFFALSE 22071
// ComWalk ( un ) ;
22062: LD_VAR 0 3
22066: PPUSH
22067: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22071: LD_VAR 0 3
22075: PPUSH
22076: LD_INT 8
22078: PPUSH
22079: CALL_OW 336
// end ; 4 :
22083: GO 22176
22085: LD_INT 4
22087: DOUBLE
22088: EQUAL
22089: IFTRUE 22093
22091: GO 22154
22093: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22094: LD_ADDR_VAR 0 2
22098: PUSH
22099: LD_INT 22
22101: PUSH
22102: LD_OWVAR 2
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: PUSH
22111: LD_INT 30
22113: PUSH
22114: LD_INT 29
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: PPUSH
22125: CALL_OW 69
22129: ST_TO_ADDR
// if not tmp then
22130: LD_VAR 0 2
22134: NOT
22135: IFFALSE 22139
// exit ;
22137: GO 22176
// DestroyUnit ( tmp [ 1 ] ) ;
22139: LD_VAR 0 2
22143: PUSH
22144: LD_INT 1
22146: ARRAY
22147: PPUSH
22148: CALL_OW 65
// end ; 5 .. 7 :
22152: GO 22176
22154: LD_INT 5
22156: DOUBLE
22157: GREATEREQUAL
22158: IFFALSE 22166
22160: LD_INT 7
22162: DOUBLE
22163: LESSEQUAL
22164: IFTRUE 22168
22166: GO 22175
22168: POP
// StreamSibBomb ; end ;
22169: CALL 18426 0 0
22173: GO 22176
22175: POP
// end ;
22176: PPOPN 3
22178: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22179: LD_EXP 43
22183: PUSH
22184: LD_EXP 93
22188: AND
22189: IFFALSE 22345
22191: GO 22193
22193: DISABLE
22194: LD_INT 0
22196: PPUSH
22197: PPUSH
22198: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22199: LD_ADDR_VAR 0 2
22203: PUSH
22204: LD_INT 81
22206: PUSH
22207: LD_OWVAR 2
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: PUSH
22216: LD_INT 2
22218: PUSH
22219: LD_INT 21
22221: PUSH
22222: LD_INT 1
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: PUSH
22229: LD_INT 21
22231: PUSH
22232: LD_INT 2
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: PUSH
22239: EMPTY
22240: LIST
22241: LIST
22242: LIST
22243: PUSH
22244: EMPTY
22245: LIST
22246: LIST
22247: PPUSH
22248: CALL_OW 69
22252: ST_TO_ADDR
// if not tmp then
22253: LD_VAR 0 2
22257: NOT
22258: IFFALSE 22262
// exit ;
22260: GO 22345
// p := 0 ;
22262: LD_ADDR_VAR 0 3
22266: PUSH
22267: LD_INT 0
22269: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22270: LD_INT 35
22272: PPUSH
22273: CALL_OW 67
// p := p + 1 ;
22277: LD_ADDR_VAR 0 3
22281: PUSH
22282: LD_VAR 0 3
22286: PUSH
22287: LD_INT 1
22289: PLUS
22290: ST_TO_ADDR
// for i in tmp do
22291: LD_ADDR_VAR 0 1
22295: PUSH
22296: LD_VAR 0 2
22300: PUSH
22301: FOR_IN
22302: IFFALSE 22333
// if GetLives ( i ) < 1000 then
22304: LD_VAR 0 1
22308: PPUSH
22309: CALL_OW 256
22313: PUSH
22314: LD_INT 1000
22316: LESS
22317: IFFALSE 22331
// SetLives ( i , 1000 ) ;
22319: LD_VAR 0 1
22323: PPUSH
22324: LD_INT 1000
22326: PPUSH
22327: CALL_OW 234
22331: GO 22301
22333: POP
22334: POP
// until p > 20 ;
22335: LD_VAR 0 3
22339: PUSH
22340: LD_INT 20
22342: GREATER
22343: IFFALSE 22270
// end ;
22345: PPOPN 3
22347: END
// every 0 0$1 trigger StreamModeActive and sTime do
22348: LD_EXP 43
22352: PUSH
22353: LD_EXP 94
22357: AND
22358: IFFALSE 22393
22360: GO 22362
22362: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22363: LD_INT 28
22365: PPUSH
22366: LD_OWVAR 2
22370: PPUSH
22371: LD_INT 2
22373: PPUSH
22374: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22378: LD_INT 30
22380: PPUSH
22381: LD_OWVAR 2
22385: PPUSH
22386: LD_INT 2
22388: PPUSH
22389: CALL_OW 322
// end ;
22393: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22394: LD_EXP 43
22398: PUSH
22399: LD_EXP 95
22403: AND
22404: IFFALSE 22525
22406: GO 22408
22408: DISABLE
22409: LD_INT 0
22411: PPUSH
22412: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22413: LD_ADDR_VAR 0 2
22417: PUSH
22418: LD_INT 22
22420: PUSH
22421: LD_OWVAR 2
22425: PUSH
22426: EMPTY
22427: LIST
22428: LIST
22429: PUSH
22430: LD_INT 21
22432: PUSH
22433: LD_INT 1
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PUSH
22440: LD_INT 3
22442: PUSH
22443: LD_INT 23
22445: PUSH
22446: LD_INT 0
22448: PUSH
22449: EMPTY
22450: LIST
22451: LIST
22452: PUSH
22453: EMPTY
22454: LIST
22455: LIST
22456: PUSH
22457: EMPTY
22458: LIST
22459: LIST
22460: LIST
22461: PPUSH
22462: CALL_OW 69
22466: ST_TO_ADDR
// if not tmp then
22467: LD_VAR 0 2
22471: NOT
22472: IFFALSE 22476
// exit ;
22474: GO 22525
// for i in tmp do
22476: LD_ADDR_VAR 0 1
22480: PUSH
22481: LD_VAR 0 2
22485: PUSH
22486: FOR_IN
22487: IFFALSE 22523
// begin if Crawls ( i ) then
22489: LD_VAR 0 1
22493: PPUSH
22494: CALL_OW 318
22498: IFFALSE 22509
// ComWalk ( i ) ;
22500: LD_VAR 0 1
22504: PPUSH
22505: CALL_OW 138
// SetClass ( i , 2 ) ;
22509: LD_VAR 0 1
22513: PPUSH
22514: LD_INT 2
22516: PPUSH
22517: CALL_OW 336
// end ;
22521: GO 22486
22523: POP
22524: POP
// end ;
22525: PPOPN 2
22527: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22528: LD_EXP 43
22532: PUSH
22533: LD_EXP 96
22537: AND
22538: IFFALSE 22819
22540: GO 22542
22542: DISABLE
22543: LD_INT 0
22545: PPUSH
22546: PPUSH
22547: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22548: LD_OWVAR 2
22552: PPUSH
22553: LD_INT 9
22555: PPUSH
22556: LD_INT 1
22558: PPUSH
22559: LD_INT 1
22561: PPUSH
22562: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22566: LD_INT 9
22568: PPUSH
22569: LD_OWVAR 2
22573: PPUSH
22574: CALL_OW 343
// uc_side := 9 ;
22578: LD_ADDR_OWVAR 20
22582: PUSH
22583: LD_INT 9
22585: ST_TO_ADDR
// uc_nation := 2 ;
22586: LD_ADDR_OWVAR 21
22590: PUSH
22591: LD_INT 2
22593: ST_TO_ADDR
// hc_name := Dark Warrior ;
22594: LD_ADDR_OWVAR 26
22598: PUSH
22599: LD_STRING Dark Warrior
22601: ST_TO_ADDR
// hc_gallery :=  ;
22602: LD_ADDR_OWVAR 33
22606: PUSH
22607: LD_STRING 
22609: ST_TO_ADDR
// hc_noskilllimit := true ;
22610: LD_ADDR_OWVAR 76
22614: PUSH
22615: LD_INT 1
22617: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22618: LD_ADDR_OWVAR 31
22622: PUSH
22623: LD_INT 30
22625: PUSH
22626: LD_INT 30
22628: PUSH
22629: LD_INT 30
22631: PUSH
22632: LD_INT 30
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: ST_TO_ADDR
// un := CreateHuman ;
22641: LD_ADDR_VAR 0 3
22645: PUSH
22646: CALL_OW 44
22650: ST_TO_ADDR
// hc_noskilllimit := false ;
22651: LD_ADDR_OWVAR 76
22655: PUSH
22656: LD_INT 0
22658: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22659: LD_VAR 0 3
22663: PPUSH
22664: LD_INT 1
22666: PPUSH
22667: CALL_OW 51
// p := 0 ;
22671: LD_ADDR_VAR 0 2
22675: PUSH
22676: LD_INT 0
22678: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22679: LD_INT 35
22681: PPUSH
22682: CALL_OW 67
// p := p + 1 ;
22686: LD_ADDR_VAR 0 2
22690: PUSH
22691: LD_VAR 0 2
22695: PUSH
22696: LD_INT 1
22698: PLUS
22699: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22700: LD_VAR 0 3
22704: PPUSH
22705: CALL_OW 256
22709: PUSH
22710: LD_INT 1000
22712: LESS
22713: IFFALSE 22727
// SetLives ( un , 1000 ) ;
22715: LD_VAR 0 3
22719: PPUSH
22720: LD_INT 1000
22722: PPUSH
22723: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22727: LD_VAR 0 3
22731: PPUSH
22732: LD_INT 81
22734: PUSH
22735: LD_OWVAR 2
22739: PUSH
22740: EMPTY
22741: LIST
22742: LIST
22743: PUSH
22744: LD_INT 91
22746: PUSH
22747: LD_VAR 0 3
22751: PUSH
22752: LD_INT 30
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: LIST
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: PPUSH
22764: CALL_OW 69
22768: PPUSH
22769: LD_VAR 0 3
22773: PPUSH
22774: CALL_OW 74
22778: PPUSH
22779: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
22783: LD_VAR 0 2
22787: PUSH
22788: LD_INT 60
22790: GREATER
22791: PUSH
22792: LD_VAR 0 3
22796: PPUSH
22797: CALL_OW 301
22801: OR
22802: IFFALSE 22679
// if un then
22804: LD_VAR 0 3
22808: IFFALSE 22819
// RemoveUnit ( un ) ;
22810: LD_VAR 0 3
22814: PPUSH
22815: CALL_OW 64
// end ; end_of_file
22819: PPOPN 3
22821: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
22822: LD_INT 0
22824: PPUSH
22825: PPUSH
22826: PPUSH
22827: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22828: LD_VAR 0 1
22832: PPUSH
22833: CALL_OW 264
22837: PUSH
22838: LD_EXP 34
22842: EQUAL
22843: IFFALSE 22915
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22845: LD_INT 68
22847: PPUSH
22848: LD_VAR 0 1
22852: PPUSH
22853: CALL_OW 255
22857: PPUSH
22858: CALL_OW 321
22862: PUSH
22863: LD_INT 2
22865: EQUAL
22866: IFFALSE 22878
// eff := 70 else
22868: LD_ADDR_VAR 0 4
22872: PUSH
22873: LD_INT 70
22875: ST_TO_ADDR
22876: GO 22886
// eff := 30 ;
22878: LD_ADDR_VAR 0 4
22882: PUSH
22883: LD_INT 30
22885: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22886: LD_VAR 0 1
22890: PPUSH
22891: CALL_OW 250
22895: PPUSH
22896: LD_VAR 0 1
22900: PPUSH
22901: CALL_OW 251
22905: PPUSH
22906: LD_VAR 0 4
22910: PPUSH
22911: CALL_OW 495
// end ; end ;
22915: LD_VAR 0 2
22919: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22920: LD_INT 0
22922: PPUSH
// end ;
22923: LD_VAR 0 4
22927: RET
// export function SOS_Command ( cmd ) ; begin
22928: LD_INT 0
22930: PPUSH
// end ;
22931: LD_VAR 0 2
22935: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22936: LD_VAR 0 1
22940: PUSH
22941: LD_INT 255
22943: EQUAL
22944: PUSH
22945: LD_VAR 0 2
22949: PPUSH
22950: CALL_OW 264
22954: PUSH
22955: LD_INT 14
22957: PUSH
22958: LD_INT 53
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: IN
22965: AND
22966: PUSH
22967: LD_VAR 0 4
22971: PPUSH
22972: LD_VAR 0 5
22976: PPUSH
22977: CALL_OW 488
22981: AND
22982: IFFALSE 23006
// CutTreeXYR ( unit , x , y , 12 ) ;
22984: LD_VAR 0 2
22988: PPUSH
22989: LD_VAR 0 4
22993: PPUSH
22994: LD_VAR 0 5
22998: PPUSH
22999: LD_INT 12
23001: PPUSH
23002: CALL 23009 0 4
// end ;
23006: PPOPN 5
23008: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23009: LD_INT 0
23011: PPUSH
23012: PPUSH
23013: PPUSH
23014: PPUSH
23015: PPUSH
23016: PPUSH
23017: PPUSH
23018: PPUSH
23019: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
23020: LD_VAR 0 1
23024: NOT
23025: PUSH
23026: LD_VAR 0 2
23030: PPUSH
23031: LD_VAR 0 3
23035: PPUSH
23036: CALL_OW 488
23040: NOT
23041: OR
23042: PUSH
23043: LD_VAR 0 4
23047: NOT
23048: OR
23049: IFFALSE 23053
// exit ;
23051: GO 23393
// list := [ ] ;
23053: LD_ADDR_VAR 0 13
23057: PUSH
23058: EMPTY
23059: ST_TO_ADDR
// if x - r < 0 then
23060: LD_VAR 0 2
23064: PUSH
23065: LD_VAR 0 4
23069: MINUS
23070: PUSH
23071: LD_INT 0
23073: LESS
23074: IFFALSE 23086
// min_x := 0 else
23076: LD_ADDR_VAR 0 7
23080: PUSH
23081: LD_INT 0
23083: ST_TO_ADDR
23084: GO 23102
// min_x := x - r ;
23086: LD_ADDR_VAR 0 7
23090: PUSH
23091: LD_VAR 0 2
23095: PUSH
23096: LD_VAR 0 4
23100: MINUS
23101: ST_TO_ADDR
// if y - r < 0 then
23102: LD_VAR 0 3
23106: PUSH
23107: LD_VAR 0 4
23111: MINUS
23112: PUSH
23113: LD_INT 0
23115: LESS
23116: IFFALSE 23128
// min_y := 0 else
23118: LD_ADDR_VAR 0 8
23122: PUSH
23123: LD_INT 0
23125: ST_TO_ADDR
23126: GO 23144
// min_y := y - r ;
23128: LD_ADDR_VAR 0 8
23132: PUSH
23133: LD_VAR 0 3
23137: PUSH
23138: LD_VAR 0 4
23142: MINUS
23143: ST_TO_ADDR
// max_x := x + r ;
23144: LD_ADDR_VAR 0 9
23148: PUSH
23149: LD_VAR 0 2
23153: PUSH
23154: LD_VAR 0 4
23158: PLUS
23159: ST_TO_ADDR
// max_y := y + r ;
23160: LD_ADDR_VAR 0 10
23164: PUSH
23165: LD_VAR 0 3
23169: PUSH
23170: LD_VAR 0 4
23174: PLUS
23175: ST_TO_ADDR
// for _x = min_x to max_x do
23176: LD_ADDR_VAR 0 11
23180: PUSH
23181: DOUBLE
23182: LD_VAR 0 7
23186: DEC
23187: ST_TO_ADDR
23188: LD_VAR 0 9
23192: PUSH
23193: FOR_TO
23194: IFFALSE 23311
// for _y = min_y to max_y do
23196: LD_ADDR_VAR 0 12
23200: PUSH
23201: DOUBLE
23202: LD_VAR 0 8
23206: DEC
23207: ST_TO_ADDR
23208: LD_VAR 0 10
23212: PUSH
23213: FOR_TO
23214: IFFALSE 23307
// begin if not ValidHex ( _x , _y ) then
23216: LD_VAR 0 11
23220: PPUSH
23221: LD_VAR 0 12
23225: PPUSH
23226: CALL_OW 488
23230: NOT
23231: IFFALSE 23235
// continue ;
23233: GO 23213
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23235: LD_VAR 0 11
23239: PPUSH
23240: LD_VAR 0 12
23244: PPUSH
23245: CALL_OW 351
23249: PUSH
23250: LD_VAR 0 11
23254: PPUSH
23255: LD_VAR 0 12
23259: PPUSH
23260: CALL_OW 554
23264: AND
23265: IFFALSE 23305
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23267: LD_ADDR_VAR 0 13
23271: PUSH
23272: LD_VAR 0 13
23276: PPUSH
23277: LD_VAR 0 13
23281: PUSH
23282: LD_INT 1
23284: PLUS
23285: PPUSH
23286: LD_VAR 0 11
23290: PUSH
23291: LD_VAR 0 12
23295: PUSH
23296: EMPTY
23297: LIST
23298: LIST
23299: PPUSH
23300: CALL_OW 2
23304: ST_TO_ADDR
// end ;
23305: GO 23213
23307: POP
23308: POP
23309: GO 23193
23311: POP
23312: POP
// if not list then
23313: LD_VAR 0 13
23317: NOT
23318: IFFALSE 23322
// exit ;
23320: GO 23393
// for i in list do
23322: LD_ADDR_VAR 0 6
23326: PUSH
23327: LD_VAR 0 13
23331: PUSH
23332: FOR_IN
23333: IFFALSE 23391
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23335: LD_VAR 0 1
23339: PPUSH
23340: LD_STRING M
23342: PUSH
23343: LD_VAR 0 6
23347: PUSH
23348: LD_INT 1
23350: ARRAY
23351: PUSH
23352: LD_VAR 0 6
23356: PUSH
23357: LD_INT 2
23359: ARRAY
23360: PUSH
23361: LD_INT 0
23363: PUSH
23364: LD_INT 0
23366: PUSH
23367: LD_INT 0
23369: PUSH
23370: LD_INT 0
23372: PUSH
23373: EMPTY
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: PUSH
23382: EMPTY
23383: LIST
23384: PPUSH
23385: CALL_OW 447
23389: GO 23332
23391: POP
23392: POP
// end ;
23393: LD_VAR 0 5
23397: RET
