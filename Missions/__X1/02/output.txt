// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 46 0 0
// PrepareNature ;
  19: CALL 580 0 0
// PrepareAmericans ;
  23: CALL 826 0 0
// PrepareArabian ;
  27: CALL 10139 0 0
// if debug then
  31: LD_EXP 1
  35: IFFALSE 41
// DebugMode ;
  37: CALL 198 0 0
// Action ;
  41: CALL 4605 0 0
// end ;
  45: END
// export debug , prefix , missionStart , aviradzeSpotted , deltaSpotted , sciSpotted , aviradzeQuestDone , sciCounterKill , usAlert , usActiveDefend , timeUntilFarmer , attackDeltaAllowed , trickyMove , usPatrol , trap , lostCounter ; function Init ; begin
  46: LD_INT 0
  48: PPUSH
// debug := false ;
  49: LD_ADDR_EXP 1
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// missionStart := false ;
  57: LD_ADDR_EXP 3
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// aviradzeSpotted := false ;
  65: LD_ADDR_EXP 4
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// deltaSpotted := false ;
  73: LD_ADDR_EXP 5
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// sciSpotted := false ;
  81: LD_ADDR_EXP 6
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// sciCounterKill := 0 ;
  89: LD_ADDR_EXP 8
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// aviradzeQuestDone := false ;
  97: LD_ADDR_EXP 7
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// attackDeltaAllowed := false ;
 105: LD_ADDR_EXP 12
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usAlert := false ;
 113: LD_ADDR_EXP 9
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// usActiveDefend := false ;
 121: LD_ADDR_EXP 10
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// usPatrol := [ ] ;
 129: LD_ADDR_EXP 14
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// timeUntilFarmer := [ 40 40$00 , 30 30$00 , 20 20$00 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 11
 140: PUSH
 141: LD_INT 84000
 143: PUSH
 144: LD_INT 63000
 146: PUSH
 147: LD_INT 42000
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: PUSH
 155: LD_OWVAR 67
 159: ARRAY
 160: ST_TO_ADDR
// trickyMove := false ;
 161: LD_ADDR_EXP 13
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// prefix := 01_ ;
 169: LD_ADDR_EXP 2
 173: PUSH
 174: LD_STRING 01_
 176: ST_TO_ADDR
// trap := 0 ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// lostCounter := false ;
 185: LD_ADDR_EXP 16
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// end ;
 193: LD_VAR 0 1
 197: RET
// function DebugMode ; begin
 198: LD_INT 0
 200: PPUSH
// FogOff ( 1 ) ;
 201: LD_INT 1
 203: PPUSH
 204: CALL_OW 344
// Difficulty := 2 ;
 208: LD_ADDR_OWVAR 67
 212: PUSH
 213: LD_INT 2
 215: ST_TO_ADDR
// end ; end_of_file
 216: LD_VAR 0 1
 220: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 221: LD_INT 0
 223: PPUSH
 224: PPUSH
// if exist_mode then
 225: LD_VAR 0 2
 229: IFFALSE 254
// unit := CreateCharacter ( prefix & ident ) else
 231: LD_ADDR_VAR 0 5
 235: PUSH
 236: LD_VAR 0 3
 240: PUSH
 241: LD_VAR 0 1
 245: STR
 246: PPUSH
 247: CALL_OW 34
 251: ST_TO_ADDR
 252: GO 269
// unit := NewCharacter ( ident ) ;
 254: LD_ADDR_VAR 0 5
 258: PUSH
 259: LD_VAR 0 1
 263: PPUSH
 264: CALL_OW 25
 268: ST_TO_ADDR
// result := unit ;
 269: LD_ADDR_VAR 0 4
 273: PUSH
 274: LD_VAR 0 5
 278: ST_TO_ADDR
// end ;
 279: LD_VAR 0 4
 283: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 284: LD_INT 0
 286: PPUSH
// uc_side := side ;
 287: LD_ADDR_OWVAR 20
 291: PUSH
 292: LD_VAR 0 1
 296: ST_TO_ADDR
// uc_nation := nation ;
 297: LD_ADDR_OWVAR 21
 301: PUSH
 302: LD_VAR 0 2
 306: ST_TO_ADDR
// vc_chassis := chassis ;
 307: LD_ADDR_OWVAR 37
 311: PUSH
 312: LD_VAR 0 3
 316: ST_TO_ADDR
// vc_engine := engine ;
 317: LD_ADDR_OWVAR 39
 321: PUSH
 322: LD_VAR 0 4
 326: ST_TO_ADDR
// vc_control := control ;
 327: LD_ADDR_OWVAR 38
 331: PUSH
 332: LD_VAR 0 5
 336: ST_TO_ADDR
// vc_weapon := weapon ;
 337: LD_ADDR_OWVAR 40
 341: PUSH
 342: LD_VAR 0 6
 346: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 347: LD_ADDR_OWVAR 41
 351: PUSH
 352: LD_VAR 0 7
 356: ST_TO_ADDR
// result := CreateVehicle ;
 357: LD_ADDR_VAR 0 8
 361: PUSH
 362: CALL_OW 45
 366: ST_TO_ADDR
// end ;
 367: LD_VAR 0 8
 371: RET
// export function SayX ( units , ident ) ; var i ; begin
 372: LD_INT 0
 374: PPUSH
 375: PPUSH
// result := false ;
 376: LD_ADDR_VAR 0 3
 380: PUSH
 381: LD_INT 0
 383: ST_TO_ADDR
// if not units then
 384: LD_VAR 0 1
 388: NOT
 389: IFFALSE 393
// exit ;
 391: GO 447
// for i in units do
 393: LD_ADDR_VAR 0 4
 397: PUSH
 398: LD_VAR 0 1
 402: PUSH
 403: FOR_IN
 404: IFFALSE 445
// if IsOk ( i ) then
 406: LD_VAR 0 4
 410: PPUSH
 411: CALL_OW 302
 415: IFFALSE 443
// begin Say ( i , ident ) ;
 417: LD_VAR 0 4
 421: PPUSH
 422: LD_VAR 0 2
 426: PPUSH
 427: CALL_OW 88
// result := i ;
 431: LD_ADDR_VAR 0 3
 435: PUSH
 436: LD_VAR 0 4
 440: ST_TO_ADDR
// break ;
 441: GO 445
// end ;
 443: GO 403
 445: POP
 446: POP
// end ;
 447: LD_VAR 0 3
 451: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 452: LD_INT 0
 454: PPUSH
 455: PPUSH
// InitUc ;
 456: CALL_OW 18
// InitHc ;
 460: CALL_OW 19
// uc_side := 0 ;
 464: LD_ADDR_OWVAR 20
 468: PUSH
 469: LD_INT 0
 471: ST_TO_ADDR
// uc_nation := 0 ;
 472: LD_ADDR_OWVAR 21
 476: PUSH
 477: LD_INT 0
 479: ST_TO_ADDR
// for i = 1 to amount do
 480: LD_ADDR_VAR 0 4
 484: PUSH
 485: DOUBLE
 486: LD_INT 1
 488: DEC
 489: ST_TO_ADDR
 490: LD_VAR 0 2
 494: PUSH
 495: FOR_TO
 496: IFFALSE 569
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 498: LD_ADDR_OWVAR 29
 502: PUSH
 503: LD_INT 9
 505: PPUSH
 506: LD_INT 12
 508: PPUSH
 509: CALL_OW 12
 513: PUSH
 514: LD_INT 9
 516: PPUSH
 517: LD_INT 12
 519: PPUSH
 520: CALL_OW 12
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: ST_TO_ADDR
// hc_agressivity := 0 ;
 529: LD_ADDR_OWVAR 35
 533: PUSH
 534: LD_INT 0
 536: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 537: LD_INT 0
 539: PPUSH
 540: LD_INT 12
 542: PPUSH
 543: LD_INT 1
 545: PPUSH
 546: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 550: CALL_OW 44
 554: PPUSH
 555: LD_VAR 0 1
 559: PPUSH
 560: LD_INT 0
 562: PPUSH
 563: CALL_OW 49
// end ;
 567: GO 495
 569: POP
 570: POP
// InitHc ;
 571: CALL_OW 19
// end ;
 575: LD_VAR 0 3
 579: RET
// export function PrepareNature ; var i ; begin
 580: LD_INT 0
 582: PPUSH
 583: PPUSH
// SpawnApeman ( forest , 9 ) ;
 584: LD_INT 1
 586: PPUSH
 587: LD_INT 9
 589: PPUSH
 590: CALL 452 0 2
// for i := 1 to 4 do
 594: LD_ADDR_VAR 0 2
 598: PUSH
 599: DOUBLE
 600: LD_INT 1
 602: DEC
 603: ST_TO_ADDR
 604: LD_INT 4
 606: PUSH
 607: FOR_TO
 608: IFFALSE 643
// begin hc_class := 21 ;
 610: LD_ADDR_OWVAR 28
 614: PUSH
 615: LD_INT 21
 617: ST_TO_ADDR
// hc_gallery :=  ;
 618: LD_ADDR_OWVAR 33
 622: PUSH
 623: LD_STRING 
 625: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 626: CALL_OW 44
 630: PPUSH
 631: LD_INT 1
 633: PPUSH
 634: LD_INT 0
 636: PPUSH
 637: CALL_OW 49
// end ;
 641: GO 607
 643: POP
 644: POP
// for i := 1 to 2 do
 645: LD_ADDR_VAR 0 2
 649: PUSH
 650: DOUBLE
 651: LD_INT 1
 653: DEC
 654: ST_TO_ADDR
 655: LD_INT 2
 657: PUSH
 658: FOR_TO
 659: IFFALSE 694
// begin hc_class := 18 ;
 661: LD_ADDR_OWVAR 28
 665: PUSH
 666: LD_INT 18
 668: ST_TO_ADDR
// hc_gallery :=  ;
 669: LD_ADDR_OWVAR 33
 673: PUSH
 674: LD_STRING 
 676: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 677: CALL_OW 44
 681: PPUSH
 682: LD_INT 1
 684: PPUSH
 685: LD_INT 0
 687: PPUSH
 688: CALL_OW 49
// end ;
 692: GO 658
 694: POP
 695: POP
// for i := 1 to 3 do
 696: LD_ADDR_VAR 0 2
 700: PUSH
 701: DOUBLE
 702: LD_INT 1
 704: DEC
 705: ST_TO_ADDR
 706: LD_INT 3
 708: PUSH
 709: FOR_TO
 710: IFFALSE 745
// begin hc_class := 13 ;
 712: LD_ADDR_OWVAR 28
 716: PUSH
 717: LD_INT 13
 719: ST_TO_ADDR
// hc_gallery :=  ;
 720: LD_ADDR_OWVAR 33
 724: PUSH
 725: LD_STRING 
 727: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 728: CALL_OW 44
 732: PPUSH
 733: LD_INT 1
 735: PPUSH
 736: LD_INT 0
 738: PPUSH
 739: CALL_OW 49
// end ;
 743: GO 709
 745: POP
 746: POP
// end ;
 747: LD_VAR 0 1
 751: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 752: LD_INT 0
 754: PPUSH
 755: PPUSH
 756: PPUSH
// if not observer or not unit then
 757: LD_VAR 0 1
 761: NOT
 762: PUSH
 763: LD_VAR 0 2
 767: NOT
 768: OR
 769: IFFALSE 773
// exit ;
 771: GO 821
// if not See ( GetSide ( observer ) , unit ) then
 773: LD_VAR 0 1
 777: PPUSH
 778: CALL_OW 255
 782: PPUSH
 783: LD_VAR 0 2
 787: PPUSH
 788: CALL_OW 292
 792: NOT
 793: IFFALSE 797
// exit ;
 795: GO 821
// result := GetDistUnits ( observer , unit ) < 12 ;
 797: LD_ADDR_VAR 0 3
 801: PUSH
 802: LD_VAR 0 1
 806: PPUSH
 807: LD_VAR 0 2
 811: PPUSH
 812: CALL_OW 296
 816: PUSH
 817: LD_INT 12
 819: LESS
 820: ST_TO_ADDR
// end ; end_of_file
 821: LD_VAR 0 3
 825: RET
// export Gladstone , Lynch ; export usForces , usSci ; export function PrepareAmericans ; var i , un , veh , tmp , arm ; begin
 826: LD_INT 0
 828: PPUSH
 829: PPUSH
 830: PPUSH
 831: PPUSH
 832: PPUSH
 833: PPUSH
// usForces := [ ] ;
 834: LD_ADDR_EXP 19
 838: PUSH
 839: EMPTY
 840: ST_TO_ADDR
// usSci := [ ] ;
 841: LD_ADDR_EXP 20
 845: PUSH
 846: EMPTY
 847: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
 848: LD_INT 1
 850: PPUSH
 851: LD_STRING Delta
 853: PPUSH
 854: CALL_OW 500
// SetResourceType ( GetBase ( Delta ) , mat_cans , 400 ) ;
 858: LD_INT 1
 860: PPUSH
 861: CALL_OW 274
 865: PPUSH
 866: LD_INT 1
 868: PPUSH
 869: LD_INT 400
 871: PPUSH
 872: CALL_OW 277
// SetResourceType ( GetBase ( Delta ) , mat_oil , 80 ) ;
 876: LD_INT 1
 878: PPUSH
 879: CALL_OW 274
 883: PPUSH
 884: LD_INT 2
 886: PPUSH
 887: LD_INT 80
 889: PPUSH
 890: CALL_OW 277
// uc_side := 1 ;
 894: LD_ADDR_OWVAR 20
 898: PUSH
 899: LD_INT 1
 901: ST_TO_ADDR
// uc_nation := 1 ;
 902: LD_ADDR_OWVAR 21
 906: PUSH
 907: LD_INT 1
 909: ST_TO_ADDR
// InitHc ;
 910: CALL_OW 19
// hc_importance := 0 ;
 914: LD_ADDR_OWVAR 32
 918: PUSH
 919: LD_INT 0
 921: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
 922: LD_ADDR_EXP 18
 926: PUSH
 927: LD_STRING Lynch
 929: PPUSH
 930: LD_INT 0
 932: PPUSH
 933: LD_STRING 
 935: PPUSH
 936: CALL 221 0 3
 940: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false ,  ) ;
 941: LD_ADDR_EXP 17
 945: PUSH
 946: LD_STRING Gladstone
 948: PPUSH
 949: LD_INT 0
 951: PPUSH
 952: LD_STRING 
 954: PPUSH
 955: CALL 221 0 3
 959: ST_TO_ADDR
// PlaceHumanInUnit ( Lynch , Delta ) ;
 960: LD_EXP 18
 964: PPUSH
 965: LD_INT 1
 967: PPUSH
 968: CALL_OW 52
// PlaceHumanInUnit ( Gladstone , usLab ) ;
 972: LD_EXP 17
 976: PPUSH
 977: LD_INT 3
 979: PPUSH
 980: CALL_OW 52
// for i := 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
 984: LD_ADDR_VAR 0 2
 988: PUSH
 989: DOUBLE
 990: LD_INT 1
 992: DEC
 993: ST_TO_ADDR
 994: LD_INT 1
 996: PUSH
 997: LD_INT 2
 999: PUSH
1000: LD_INT 2
1002: PUSH
1003: EMPTY
1004: LIST
1005: LIST
1006: LIST
1007: PUSH
1008: LD_OWVAR 67
1012: ARRAY
1013: PUSH
1014: FOR_TO
1015: IFFALSE 1061
// begin PrepareHuman ( false , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
1017: LD_INT 0
1019: PPUSH
1020: LD_INT 2
1022: PPUSH
1023: LD_INT 1
1025: PUSH
1026: LD_INT 2
1028: PUSH
1029: LD_INT 2
1031: PUSH
1032: EMPTY
1033: LIST
1034: LIST
1035: LIST
1036: PUSH
1037: LD_OWVAR 67
1041: ARRAY
1042: PPUSH
1043: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , Delta ) ;
1047: CALL_OW 44
1051: PPUSH
1052: LD_INT 1
1054: PPUSH
1055: CALL_OW 52
// end ;
1059: GO 1014
1061: POP
1062: POP
// for i := 1 to 2 + Difficulty do
1063: LD_ADDR_VAR 0 2
1067: PUSH
1068: DOUBLE
1069: LD_INT 1
1071: DEC
1072: ST_TO_ADDR
1073: LD_INT 2
1075: PUSH
1076: LD_OWVAR 67
1080: PLUS
1081: PUSH
1082: FOR_TO
1083: IFFALSE 1168
// begin PrepareHuman ( false , 4 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
1085: LD_INT 0
1087: PPUSH
1088: LD_INT 4
1090: PPUSH
1091: LD_INT 1
1093: PUSH
1094: LD_INT 2
1096: PUSH
1097: LD_INT 2
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: LIST
1104: PUSH
1105: LD_OWVAR 67
1109: ARRAY
1110: PPUSH
1111: CALL_OW 380
// un := CreateHuman ;
1115: LD_ADDR_VAR 0 3
1119: PUSH
1120: CALL_OW 44
1124: ST_TO_ADDR
// PlaceHumanInUnit ( un , usLab ) ;
1125: LD_VAR 0 3
1129: PPUSH
1130: LD_INT 3
1132: PPUSH
1133: CALL_OW 52
// usSci := Replace ( usSci , usSci + 1 , un ) ;
1137: LD_ADDR_EXP 20
1141: PUSH
1142: LD_EXP 20
1146: PPUSH
1147: LD_EXP 20
1151: PUSH
1152: LD_INT 1
1154: PLUS
1155: PPUSH
1156: LD_VAR 0 3
1160: PPUSH
1161: CALL_OW 1
1165: ST_TO_ADDR
// end ;
1166: GO 1082
1168: POP
1169: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
1170: LD_ADDR_VAR 0 6
1174: PUSH
1175: LD_INT 22
1177: PUSH
1178: LD_INT 1
1180: PUSH
1181: EMPTY
1182: LIST
1183: LIST
1184: PUSH
1185: LD_INT 30
1187: PUSH
1188: LD_INT 4
1190: PUSH
1191: EMPTY
1192: LIST
1193: LIST
1194: PUSH
1195: EMPTY
1196: LIST
1197: LIST
1198: PPUSH
1199: CALL_OW 69
1203: ST_TO_ADDR
// for i := 1 to 3 + Difficulty do
1204: LD_ADDR_VAR 0 2
1208: PUSH
1209: DOUBLE
1210: LD_INT 1
1212: DEC
1213: ST_TO_ADDR
1214: LD_INT 3
1216: PUSH
1217: LD_OWVAR 67
1221: PLUS
1222: PUSH
1223: FOR_TO
1224: IFFALSE 1302
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
1226: LD_INT 0
1228: PPUSH
1229: LD_INT 1
1231: PPUSH
1232: LD_INT 1
1234: PUSH
1235: LD_INT 2
1237: PUSH
1238: LD_INT 3
1240: PUSH
1241: EMPTY
1242: LIST
1243: LIST
1244: LIST
1245: PUSH
1246: LD_OWVAR 67
1250: ARRAY
1251: PPUSH
1252: CALL_OW 380
// un := CreateHuman ;
1256: LD_ADDR_VAR 0 3
1260: PUSH
1261: CALL_OW 44
1265: ST_TO_ADDR
// usForces := usForces ^ un ;
1266: LD_ADDR_EXP 19
1270: PUSH
1271: LD_EXP 19
1275: PUSH
1276: LD_VAR 0 3
1280: ADD
1281: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm [ 1 ] ) ;
1282: LD_VAR 0 3
1286: PPUSH
1287: LD_VAR 0 6
1291: PUSH
1292: LD_INT 1
1294: ARRAY
1295: PPUSH
1296: CALL_OW 52
// end ;
1300: GO 1223
1302: POP
1303: POP
// PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 100 ) ;
1304: LD_INT 1
1306: PPUSH
1307: LD_INT 1
1309: PPUSH
1310: LD_INT 1
1312: PPUSH
1313: LD_INT 2
1315: PPUSH
1316: LD_INT 1
1318: PPUSH
1319: LD_INT 2
1321: PPUSH
1322: LD_INT 100
1324: PPUSH
1325: CALL 284 0 7
// veh := CreateVehicle ;
1329: LD_ADDR_VAR 0 4
1333: PUSH
1334: CALL_OW 45
1338: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1339: LD_VAR 0 4
1343: PPUSH
1344: LD_INT 2
1346: PPUSH
1347: CALL_OW 233
// PlaceUnitXY ( veh , 43 , 24 , false ) ;
1351: LD_VAR 0 4
1355: PPUSH
1356: LD_INT 43
1358: PPUSH
1359: LD_INT 24
1361: PPUSH
1362: LD_INT 0
1364: PPUSH
1365: CALL_OW 48
// end ;
1369: LD_VAR 0 1
1373: RET
// export function SendSciToForest ; var i , j , k , tmp , xy ; begin
1374: LD_INT 0
1376: PPUSH
1377: PPUSH
1378: PPUSH
1379: PPUSH
1380: PPUSH
1381: PPUSH
// if not usSci then
1382: LD_EXP 20
1386: NOT
1387: IFFALSE 1391
// exit ;
1389: GO 1565
// xy := AreaToList ( tameArea , 0 ) ;
1391: LD_ADDR_VAR 0 6
1395: PUSH
1396: LD_INT 5
1398: PPUSH
1399: LD_INT 0
1401: PPUSH
1402: CALL_OW 517
1406: ST_TO_ADDR
// for i in usSci do
1407: LD_ADDR_VAR 0 2
1411: PUSH
1412: LD_EXP 20
1416: PUSH
1417: FOR_IN
1418: IFFALSE 1563
// begin k := rand ( 1 , xy [ 1 ] ) ;
1420: LD_ADDR_VAR 0 4
1424: PUSH
1425: LD_INT 1
1427: PPUSH
1428: LD_VAR 0 6
1432: PUSH
1433: LD_INT 1
1435: ARRAY
1436: PPUSH
1437: CALL_OW 12
1441: ST_TO_ADDR
// ComExitBuilding ( i ) ;
1442: LD_VAR 0 2
1446: PPUSH
1447: CALL_OW 122
// AddComMoveXY ( i , xy [ 1 ] [ k ] , xy [ 2 ] [ k ] ) ;
1451: LD_VAR 0 2
1455: PPUSH
1456: LD_VAR 0 6
1460: PUSH
1461: LD_INT 1
1463: ARRAY
1464: PUSH
1465: LD_VAR 0 4
1469: ARRAY
1470: PPUSH
1471: LD_VAR 0 6
1475: PUSH
1476: LD_INT 2
1478: ARRAY
1479: PUSH
1480: LD_VAR 0 4
1484: ARRAY
1485: PPUSH
1486: CALL_OW 171
// for j := 1 to 2 do
1490: LD_ADDR_VAR 0 3
1494: PUSH
1495: DOUBLE
1496: LD_INT 1
1498: DEC
1499: ST_TO_ADDR
1500: LD_INT 2
1502: PUSH
1503: FOR_TO
1504: IFFALSE 1559
// begin tmp := Delete ( xy [ j ] , k ) ;
1506: LD_ADDR_VAR 0 5
1510: PUSH
1511: LD_VAR 0 6
1515: PUSH
1516: LD_VAR 0 3
1520: ARRAY
1521: PPUSH
1522: LD_VAR 0 4
1526: PPUSH
1527: CALL_OW 3
1531: ST_TO_ADDR
// xy := Replace ( xy , j , tmp ) ;
1532: LD_ADDR_VAR 0 6
1536: PUSH
1537: LD_VAR 0 6
1541: PPUSH
1542: LD_VAR 0 3
1546: PPUSH
1547: LD_VAR 0 5
1551: PPUSH
1552: CALL_OW 1
1556: ST_TO_ADDR
// end ;
1557: GO 1503
1559: POP
1560: POP
// end ;
1561: GO 1417
1563: POP
1564: POP
// end ;
1565: LD_VAR 0 1
1569: RET
// every 0 0$5 + 0 0$10 trigger aviradzeSpotted and usSci and not usAlert and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do var i , x , y , d , ape ;
1570: LD_EXP 4
1574: PUSH
1575: LD_EXP 20
1579: AND
1580: PUSH
1581: LD_EXP 9
1585: NOT
1586: AND
1587: PUSH
1588: LD_INT 22
1590: PUSH
1591: LD_INT 0
1593: PUSH
1594: EMPTY
1595: LIST
1596: LIST
1597: PUSH
1598: LD_INT 25
1600: PUSH
1601: LD_INT 12
1603: PUSH
1604: EMPTY
1605: LIST
1606: LIST
1607: PUSH
1608: EMPTY
1609: LIST
1610: LIST
1611: PPUSH
1612: CALL_OW 69
1616: AND
1617: IFFALSE 2109
1619: GO 1621
1621: DISABLE
1622: LD_INT 0
1624: PPUSH
1625: PPUSH
1626: PPUSH
1627: PPUSH
1628: PPUSH
// begin enable ;
1629: ENABLE
// if UnitFilter ( usSci , [ f_or , [ f_hastask ] , [ f_inside ] ] ) then
1630: LD_EXP 20
1634: PPUSH
1635: LD_INT 2
1637: PUSH
1638: LD_INT 60
1640: PUSH
1641: EMPTY
1642: LIST
1643: PUSH
1644: LD_INT 54
1646: PUSH
1647: EMPTY
1648: LIST
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: LIST
1654: PPUSH
1655: CALL_OW 72
1659: IFFALSE 1663
// exit ;
1661: GO 2109
// for i in usSci do
1663: LD_ADDR_VAR 0 1
1667: PUSH
1668: LD_EXP 20
1672: PUSH
1673: FOR_IN
1674: IFFALSE 2107
// begin if not HasTask ( i ) and GetLives ( i ) = 1000 then
1676: LD_VAR 0 1
1680: PPUSH
1681: CALL_OW 314
1685: NOT
1686: PUSH
1687: LD_VAR 0 1
1691: PPUSH
1692: CALL_OW 256
1696: PUSH
1697: LD_INT 1000
1699: EQUAL
1700: AND
1701: IFFALSE 1908
// begin ape := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) , i ) ;
1703: LD_ADDR_VAR 0 5
1707: PUSH
1708: LD_INT 22
1710: PUSH
1711: LD_INT 0
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: PUSH
1718: LD_INT 25
1720: PUSH
1721: LD_INT 12
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: PUSH
1728: EMPTY
1729: LIST
1730: LIST
1731: PPUSH
1732: CALL_OW 69
1736: PPUSH
1737: LD_VAR 0 1
1741: PPUSH
1742: CALL_OW 74
1746: ST_TO_ADDR
// if GetDistUnits ( i , ape ) < 10 then
1747: LD_VAR 0 1
1751: PPUSH
1752: LD_VAR 0 5
1756: PPUSH
1757: CALL_OW 296
1761: PUSH
1762: LD_INT 10
1764: LESS
1765: IFFALSE 1798
// ComTameXY ( i , GetX ( ape ) , GetY ( ape ) ) else
1767: LD_VAR 0 1
1771: PPUSH
1772: LD_VAR 0 5
1776: PPUSH
1777: CALL_OW 250
1781: PPUSH
1782: LD_VAR 0 5
1786: PPUSH
1787: CALL_OW 251
1791: PPUSH
1792: CALL_OW 131
1796: GO 1908
// begin d := rand ( 0 , 5 ) ;
1798: LD_ADDR_VAR 0 4
1802: PUSH
1803: LD_INT 0
1805: PPUSH
1806: LD_INT 5
1808: PPUSH
1809: CALL_OW 12
1813: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 3 ) ;
1814: LD_ADDR_VAR 0 2
1818: PUSH
1819: LD_VAR 0 1
1823: PPUSH
1824: CALL_OW 250
1828: PPUSH
1829: LD_VAR 0 4
1833: PPUSH
1834: LD_INT 3
1836: PPUSH
1837: CALL_OW 272
1841: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 3 ) ;
1842: LD_ADDR_VAR 0 3
1846: PUSH
1847: LD_VAR 0 1
1851: PPUSH
1852: CALL_OW 251
1856: PPUSH
1857: LD_VAR 0 4
1861: PPUSH
1862: LD_INT 3
1864: PPUSH
1865: CALL_OW 273
1869: ST_TO_ADDR
// if not ValidHex ( x , y ) then
1870: LD_VAR 0 2
1874: PPUSH
1875: LD_VAR 0 3
1879: PPUSH
1880: CALL_OW 488
1884: NOT
1885: IFFALSE 1889
// continue ;
1887: GO 1673
// ComMoveXY ( i , x , y ) ;
1889: LD_VAR 0 1
1893: PPUSH
1894: LD_VAR 0 2
1898: PPUSH
1899: LD_VAR 0 3
1903: PPUSH
1904: CALL_OW 111
// end ; end ; if GetLives ( i ) < 900 and GetDistUnitXY ( i , 37 , 23 ) > 10 then
1908: LD_VAR 0 1
1912: PPUSH
1913: CALL_OW 256
1917: PUSH
1918: LD_INT 900
1920: LESS
1921: PUSH
1922: LD_VAR 0 1
1926: PPUSH
1927: LD_INT 37
1929: PPUSH
1930: LD_INT 23
1932: PPUSH
1933: CALL_OW 297
1937: PUSH
1938: LD_INT 10
1940: GREATER
1941: AND
1942: IFFALSE 2018
// begin if IsOk ( Gladstone ) and IsInUnit ( Gladstone ) then
1944: LD_EXP 17
1948: PPUSH
1949: CALL_OW 302
1953: PUSH
1954: LD_EXP 17
1958: PPUSH
1959: CALL_OW 310
1963: AND
1964: IFFALSE 1975
// ComExitBuilding ( Gladstone ) ;
1966: LD_EXP 17
1970: PPUSH
1971: CALL_OW 122
// AddComHeal ( Gladstone , i ) ;
1975: LD_EXP 17
1979: PPUSH
1980: LD_VAR 0 1
1984: PPUSH
1985: CALL_OW 188
// AddComEnterUnit ( Gladstone , usLab ) ;
1989: LD_EXP 17
1993: PPUSH
1994: LD_INT 3
1996: PPUSH
1997: CALL_OW 180
// ComMoveXY ( i , 37 , 23 ) ;
2001: LD_VAR 0 1
2005: PPUSH
2006: LD_INT 37
2008: PPUSH
2009: LD_INT 23
2011: PPUSH
2012: CALL_OW 111
// end else
2016: GO 2105
// if GetLives ( i ) = 1000 then
2018: LD_VAR 0 1
2022: PPUSH
2023: CALL_OW 256
2027: PUSH
2028: LD_INT 1000
2030: EQUAL
2031: IFFALSE 2105
// begin if SideShoot ( i ) = 2 then
2033: LD_VAR 0 1
2037: PPUSH
2038: CALL_OW 503
2042: PUSH
2043: LD_INT 2
2045: EQUAL
2046: IFFALSE 2093
// begin if not usAlert then
2048: LD_EXP 9
2052: NOT
2053: IFFALSE 2063
// usAlert := true ;
2055: LD_ADDR_EXP 9
2059: PUSH
2060: LD_INT 1
2062: ST_TO_ADDR
// AddComEnterUnit ( i , usLab ) ;
2063: LD_VAR 0 1
2067: PPUSH
2068: LD_INT 3
2070: PPUSH
2071: CALL_OW 180
// usSci := usSci diff i ;
2075: LD_ADDR_EXP 20
2079: PUSH
2080: LD_EXP 20
2084: PUSH
2085: LD_VAR 0 1
2089: DIFF
2090: ST_TO_ADDR
// end else
2091: GO 2105
// ComMoveToArea ( i , tameArea ) ;
2093: LD_VAR 0 1
2097: PPUSH
2098: LD_INT 5
2100: PPUSH
2101: CALL_OW 113
// end ; end ;
2105: GO 1673
2107: POP
2108: POP
// end ;
2109: PPOPN 5
2111: END
// every 0 0$1 trigger not usAlert and ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 999 ] ] ] ) or FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) ) do
2112: LD_EXP 9
2116: NOT
2117: PUSH
2118: LD_INT 22
2120: PUSH
2121: LD_INT 1
2123: PUSH
2124: EMPTY
2125: LIST
2126: LIST
2127: PUSH
2128: LD_INT 21
2130: PUSH
2131: LD_INT 3
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: PUSH
2138: LD_INT 3
2140: PUSH
2141: LD_INT 57
2143: PUSH
2144: EMPTY
2145: LIST
2146: PUSH
2147: EMPTY
2148: LIST
2149: LIST
2150: PUSH
2151: LD_INT 3
2153: PUSH
2154: LD_INT 24
2156: PUSH
2157: LD_INT 999
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: PUSH
2164: EMPTY
2165: LIST
2166: LIST
2167: PUSH
2168: EMPTY
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: PPUSH
2174: CALL_OW 69
2178: PUSH
2179: LD_INT 7
2181: PPUSH
2182: LD_INT 22
2184: PUSH
2185: LD_INT 2
2187: PUSH
2188: EMPTY
2189: LIST
2190: LIST
2191: PPUSH
2192: CALL_OW 70
2196: OR
2197: AND
2198: IFFALSE 2211
2200: GO 2202
2202: DISABLE
// usAlert := true ;
2203: LD_ADDR_EXP 9
2207: PUSH
2208: LD_INT 1
2210: ST_TO_ADDR
2211: END
// every 0 0$1 trigger usAlert do var i , b , arm ;
2212: LD_EXP 9
2216: IFFALSE 2563
2218: GO 2220
2220: DISABLE
2221: LD_INT 0
2223: PPUSH
2224: PPUSH
2225: PPUSH
// begin usActiveDefend := true ;
2226: LD_ADDR_EXP 10
2230: PUSH
2231: LD_INT 1
2233: ST_TO_ADDR
// if not usForces then
2234: LD_EXP 19
2238: NOT
2239: IFFALSE 2243
// exit ;
2241: GO 2563
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
2243: LD_ADDR_VAR 0 3
2247: PUSH
2248: LD_INT 22
2250: PUSH
2251: LD_INT 1
2253: PUSH
2254: EMPTY
2255: LIST
2256: LIST
2257: PUSH
2258: LD_INT 30
2260: PUSH
2261: LD_INT 4
2263: PUSH
2264: EMPTY
2265: LIST
2266: LIST
2267: PUSH
2268: EMPTY
2269: LIST
2270: LIST
2271: PPUSH
2272: CALL_OW 69
2276: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
2277: LD_ADDR_VAR 0 2
2281: PUSH
2282: LD_INT 22
2284: PUSH
2285: LD_INT 1
2287: PUSH
2288: EMPTY
2289: LIST
2290: LIST
2291: PUSH
2292: LD_INT 30
2294: PUSH
2295: LD_INT 31
2297: PUSH
2298: EMPTY
2299: LIST
2300: LIST
2301: PUSH
2302: EMPTY
2303: LIST
2304: LIST
2305: PPUSH
2306: CALL_OW 69
2310: ST_TO_ADDR
// ComExitBuilding ( Lynch ) ;
2311: LD_EXP 18
2315: PPUSH
2316: CALL_OW 122
// AddComEnterUnit ( Lynch , arm [ 1 ] ) ;
2320: LD_EXP 18
2324: PPUSH
2325: LD_VAR 0 3
2329: PUSH
2330: LD_INT 1
2332: ARRAY
2333: PPUSH
2334: CALL_OW 180
// if IsOk ( Gladstone ) then
2338: LD_EXP 17
2342: PPUSH
2343: CALL_OW 302
2347: IFFALSE 2388
// begin ComExitBuilding ( Gladstone ) ;
2349: LD_EXP 17
2353: PPUSH
2354: CALL_OW 122
// AddComEnterUnit ( Gladstone , arm [ 1 ] ) ;
2358: LD_EXP 17
2362: PPUSH
2363: LD_VAR 0 3
2367: PUSH
2368: LD_INT 1
2370: ARRAY
2371: PPUSH
2372: CALL_OW 180
// AddComChangeProfession ( Gladstone , class_soldier ) ;
2376: LD_EXP 17
2380: PPUSH
2381: LD_INT 1
2383: PPUSH
2384: CALL_OW 183
// end ; ComExitBuilding ( usForces [ 1 ] ) ;
2388: LD_EXP 19
2392: PUSH
2393: LD_INT 1
2395: ARRAY
2396: PPUSH
2397: CALL_OW 122
// AddComEnterUnit ( usForces [ 1 ] , b [ 1 ] ) ;
2401: LD_EXP 19
2405: PUSH
2406: LD_INT 1
2408: ARRAY
2409: PPUSH
2410: LD_VAR 0 2
2414: PUSH
2415: LD_INT 1
2417: ARRAY
2418: PPUSH
2419: CALL_OW 180
// ComExitBuilding ( usForces [ 2 ] ) ;
2423: LD_EXP 19
2427: PUSH
2428: LD_INT 2
2430: ARRAY
2431: PPUSH
2432: CALL_OW 122
// AddComEnterUnit ( usForces [ 2 ] , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
2436: LD_EXP 19
2440: PUSH
2441: LD_INT 2
2443: ARRAY
2444: PPUSH
2445: LD_INT 22
2447: PUSH
2448: LD_INT 1
2450: PUSH
2451: EMPTY
2452: LIST
2453: LIST
2454: PUSH
2455: LD_INT 30
2457: PUSH
2458: LD_INT 32
2460: PUSH
2461: EMPTY
2462: LIST
2463: LIST
2464: PUSH
2465: EMPTY
2466: LIST
2467: LIST
2468: PPUSH
2469: CALL_OW 69
2473: PUSH
2474: LD_INT 1
2476: ARRAY
2477: PPUSH
2478: CALL_OW 180
// if b > 1 and usForces > 2 then
2482: LD_VAR 0 2
2486: PUSH
2487: LD_INT 1
2489: GREATER
2490: PUSH
2491: LD_EXP 19
2495: PUSH
2496: LD_INT 2
2498: GREATER
2499: AND
2500: IFFALSE 2563
// begin repeat wait ( 0 0$1 ) ;
2502: LD_INT 35
2504: PPUSH
2505: CALL_OW 67
// until BuildingStatus ( b [ 2 ] ) <> bs_build ;
2509: LD_VAR 0 2
2513: PUSH
2514: LD_INT 2
2516: ARRAY
2517: PPUSH
2518: CALL_OW 461
2522: PUSH
2523: LD_INT 1
2525: NONEQUAL
2526: IFFALSE 2502
// ComExitBuilding ( usForces [ 3 ] ) ;
2528: LD_EXP 19
2532: PUSH
2533: LD_INT 3
2535: ARRAY
2536: PPUSH
2537: CALL_OW 122
// AddComEnterUnit ( usForces [ 3 ] , b [ 2 ] ) ;
2541: LD_EXP 19
2545: PUSH
2546: LD_INT 3
2548: ARRAY
2549: PPUSH
2550: LD_VAR 0 2
2554: PUSH
2555: LD_INT 2
2557: ARRAY
2558: PPUSH
2559: CALL_OW 180
// end ; end ;
2563: PPOPN 3
2565: END
// every 0 0$1 trigger GetLives ( usLab ) < 999 and usAlert and usForces do var i ;
2566: LD_INT 3
2568: PPUSH
2569: CALL_OW 256
2573: PUSH
2574: LD_INT 999
2576: LESS
2577: PUSH
2578: LD_EXP 9
2582: AND
2583: PUSH
2584: LD_EXP 19
2588: AND
2589: IFFALSE 2760
2591: GO 2593
2593: DISABLE
2594: LD_INT 0
2596: PPUSH
// begin for i in usForces do
2597: LD_ADDR_VAR 0 1
2601: PUSH
2602: LD_EXP 19
2606: PUSH
2607: FOR_IN
2608: IFFALSE 2647
// begin if IsInUnit ( i ) then
2610: LD_VAR 0 1
2614: PPUSH
2615: CALL_OW 310
2619: IFFALSE 2630
// ComExitBuilding ( i ) ;
2621: LD_VAR 0 1
2625: PPUSH
2626: CALL_OW 122
// AddComAgressiveMove ( i , 31 , 8 ) ;
2630: LD_VAR 0 1
2634: PPUSH
2635: LD_INT 31
2637: PPUSH
2638: LD_INT 8
2640: PPUSH
2641: CALL_OW 174
// end ;
2645: GO 2607
2647: POP
2648: POP
// wait ( 0 0$8 ) ;
2649: LD_INT 280
2651: PPUSH
2652: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) then
2656: LD_INT 22
2658: PUSH
2659: LD_INT 2
2661: PUSH
2662: EMPTY
2663: LIST
2664: LIST
2665: PUSH
2666: LD_INT 91
2668: PUSH
2669: LD_INT 3
2671: PUSH
2672: LD_INT 14
2674: PUSH
2675: EMPTY
2676: LIST
2677: LIST
2678: LIST
2679: PUSH
2680: EMPTY
2681: LIST
2682: LIST
2683: PPUSH
2684: CALL_OW 69
2688: IFFALSE 2738
// ComAttackUnit ( usForces , FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) [ 1 ] ) else
2690: LD_EXP 19
2694: PPUSH
2695: LD_INT 22
2697: PUSH
2698: LD_INT 2
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: PUSH
2705: LD_INT 91
2707: PUSH
2708: LD_INT 3
2710: PUSH
2711: LD_INT 14
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: LIST
2718: PUSH
2719: EMPTY
2720: LIST
2721: LIST
2722: PPUSH
2723: CALL_OW 69
2727: PUSH
2728: LD_INT 1
2730: ARRAY
2731: PPUSH
2732: CALL_OW 115
2736: GO 2760
// begin wait ( 0 0$20 ) ;
2738: LD_INT 700
2740: PPUSH
2741: CALL_OW 67
// AddComMoveXY ( usForces , 39 , 19 ) ;
2745: LD_EXP 19
2749: PPUSH
2750: LD_INT 39
2752: PPUSH
2753: LD_INT 19
2755: PPUSH
2756: CALL_OW 171
// end ; end ;
2760: PPOPN 1
2762: END
// every 0 0$3 trigger ( GetDistUnits ( Heike , Delta ) < 10 or GetLives ( usLab ) < 999 ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do var tmp , veh ;
2763: LD_EXP 21
2767: PPUSH
2768: LD_INT 1
2770: PPUSH
2771: CALL_OW 296
2775: PUSH
2776: LD_INT 10
2778: LESS
2779: PUSH
2780: LD_INT 3
2782: PPUSH
2783: CALL_OW 256
2787: PUSH
2788: LD_INT 999
2790: LESS
2791: OR
2792: PUSH
2793: LD_INT 22
2795: PUSH
2796: LD_INT 1
2798: PUSH
2799: EMPTY
2800: LIST
2801: LIST
2802: PUSH
2803: LD_INT 25
2805: PUSH
2806: LD_INT 2
2808: PUSH
2809: EMPTY
2810: LIST
2811: LIST
2812: PUSH
2813: EMPTY
2814: LIST
2815: LIST
2816: PPUSH
2817: CALL_OW 69
2821: AND
2822: IFFALSE 3006
2824: GO 2826
2826: DISABLE
2827: LD_INT 0
2829: PPUSH
2830: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
2831: LD_ADDR_VAR 0 1
2835: PUSH
2836: LD_INT 22
2838: PUSH
2839: LD_INT 1
2841: PUSH
2842: EMPTY
2843: LIST
2844: LIST
2845: PUSH
2846: LD_INT 25
2848: PUSH
2849: LD_INT 2
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: PUSH
2856: EMPTY
2857: LIST
2858: LIST
2859: PPUSH
2860: CALL_OW 69
2864: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2865: LD_ADDR_VAR 0 2
2869: PUSH
2870: LD_INT 22
2872: PUSH
2873: LD_INT 1
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: PUSH
2880: LD_INT 21
2882: PUSH
2883: LD_INT 2
2885: PUSH
2886: EMPTY
2887: LIST
2888: LIST
2889: PUSH
2890: LD_INT 58
2892: PUSH
2893: EMPTY
2894: LIST
2895: PUSH
2896: EMPTY
2897: LIST
2898: LIST
2899: LIST
2900: PPUSH
2901: CALL_OW 69
2905: ST_TO_ADDR
// if not tmp then
2906: LD_VAR 0 1
2910: NOT
2911: IFFALSE 2915
// exit ;
2913: GO 3006
// ComExitBuilding ( tmp ) ;
2915: LD_VAR 0 1
2919: PPUSH
2920: CALL_OW 122
// AddComDismantle ( tmp , usLab ) ;
2924: LD_VAR 0 1
2928: PPUSH
2929: LD_INT 3
2931: PPUSH
2932: CALL_OW 227
// if veh and IsOk ( Gladstone ) then
2936: LD_VAR 0 2
2940: PUSH
2941: LD_EXP 17
2945: PPUSH
2946: CALL_OW 302
2950: AND
2951: IFFALSE 3006
// begin if IsInUnit ( Gladstone ) then
2953: LD_EXP 17
2957: PPUSH
2958: CALL_OW 310
2962: IFFALSE 2973
// ComExitBuilding ( Gladstone ) ;
2964: LD_EXP 17
2968: PPUSH
2969: CALL_OW 122
// AddComEnterUnit ( Gladstone , veh [ 1 ] ) ;
2973: LD_EXP 17
2977: PPUSH
2978: LD_VAR 0 2
2982: PUSH
2983: LD_INT 1
2985: ARRAY
2986: PPUSH
2987: CALL_OW 180
// AddComAgressiveMove ( Gladstone , 39 , 14 ) ;
2991: LD_EXP 17
2995: PPUSH
2996: LD_INT 39
2998: PPUSH
2999: LD_INT 14
3001: PPUSH
3002: CALL_OW 174
// end ; end ;
3006: PPOPN 2
3008: END
// every 0 0$1 trigger usAlert and FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) do var i , tmp ;
3009: LD_EXP 9
3013: PUSH
3014: LD_INT 7
3016: PPUSH
3017: LD_INT 22
3019: PUSH
3020: LD_INT 1
3022: PUSH
3023: EMPTY
3024: LIST
3025: LIST
3026: PUSH
3027: LD_INT 21
3029: PUSH
3030: LD_INT 1
3032: PUSH
3033: EMPTY
3034: LIST
3035: LIST
3036: PUSH
3037: LD_INT 3
3039: PUSH
3040: LD_INT 24
3042: PUSH
3043: LD_INT 600
3045: PUSH
3046: EMPTY
3047: LIST
3048: LIST
3049: PUSH
3050: EMPTY
3051: LIST
3052: LIST
3053: PUSH
3054: EMPTY
3055: LIST
3056: LIST
3057: LIST
3058: PPUSH
3059: CALL_OW 70
3063: AND
3064: IFFALSE 3192
3066: GO 3068
3068: DISABLE
3069: LD_INT 0
3071: PPUSH
3072: PPUSH
// begin enable ;
3073: ENABLE
// tmp := FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) ;
3074: LD_ADDR_VAR 0 2
3078: PUSH
3079: LD_INT 7
3081: PPUSH
3082: LD_INT 22
3084: PUSH
3085: LD_INT 1
3087: PUSH
3088: EMPTY
3089: LIST
3090: LIST
3091: PUSH
3092: LD_INT 21
3094: PUSH
3095: LD_INT 1
3097: PUSH
3098: EMPTY
3099: LIST
3100: LIST
3101: PUSH
3102: LD_INT 3
3104: PUSH
3105: LD_INT 24
3107: PUSH
3108: LD_INT 600
3110: PUSH
3111: EMPTY
3112: LIST
3113: LIST
3114: PUSH
3115: EMPTY
3116: LIST
3117: LIST
3118: PUSH
3119: EMPTY
3120: LIST
3121: LIST
3122: LIST
3123: PPUSH
3124: CALL_OW 70
3128: ST_TO_ADDR
// if not tmp then
3129: LD_VAR 0 2
3133: NOT
3134: IFFALSE 3138
// exit ;
3136: GO 3192
// for i in tmp do
3138: LD_ADDR_VAR 0 1
3142: PUSH
3143: LD_VAR 0 2
3147: PUSH
3148: FOR_IN
3149: IFFALSE 3190
// if IsInUnit ( i ) then
3151: LD_VAR 0 1
3155: PPUSH
3156: CALL_OW 310
3160: IFFALSE 3173
// ComExitBuilding ( i ) else
3162: LD_VAR 0 1
3166: PPUSH
3167: CALL_OW 122
3171: GO 3188
// ComMoveXY ( i , 48 , 74 ) ;
3173: LD_VAR 0 1
3177: PPUSH
3178: LD_INT 48
3180: PPUSH
3181: LD_INT 74
3183: PPUSH
3184: CALL_OW 111
3188: GO 3148
3190: POP
3191: POP
// end ;
3192: PPOPN 2
3194: END
// every 5 5$00 do var i , un , tmp ;
3195: GO 3197
3197: DISABLE
3198: LD_INT 0
3200: PPUSH
3201: PPUSH
3202: PPUSH
// begin tmp := [ ] ;
3203: LD_ADDR_VAR 0 3
3207: PUSH
3208: EMPTY
3209: ST_TO_ADDR
// uc_side := 1 ;
3210: LD_ADDR_OWVAR 20
3214: PUSH
3215: LD_INT 1
3217: ST_TO_ADDR
// uc_nation := 1 ;
3218: LD_ADDR_OWVAR 21
3222: PUSH
3223: LD_INT 1
3225: ST_TO_ADDR
// case Difficulty of 1 :
3226: LD_OWVAR 67
3230: PUSH
3231: LD_INT 1
3233: DOUBLE
3234: EQUAL
3235: IFTRUE 3239
3237: GO 3342
3239: POP
// begin wait ( 1 1$00 ) ;
3240: LD_INT 2100
3242: PPUSH
3243: CALL_OW 67
// for i := 1 to 2 do
3247: LD_ADDR_VAR 0 1
3251: PUSH
3252: DOUBLE
3253: LD_INT 1
3255: DEC
3256: ST_TO_ADDR
3257: LD_INT 2
3259: PUSH
3260: FOR_TO
3261: IFFALSE 3338
// begin PrepareHuman ( false , [ 1 , 4 ] [ i mod 2 + 1 ] , 1 ) ;
3263: LD_INT 0
3265: PPUSH
3266: LD_INT 1
3268: PUSH
3269: LD_INT 4
3271: PUSH
3272: EMPTY
3273: LIST
3274: LIST
3275: PUSH
3276: LD_VAR 0 1
3280: PUSH
3281: LD_INT 2
3283: MOD
3284: PUSH
3285: LD_INT 1
3287: PLUS
3288: ARRAY
3289: PPUSH
3290: LD_INT 1
3292: PPUSH
3293: CALL_OW 380
// un := CreateHuman ;
3297: LD_ADDR_VAR 0 2
3301: PUSH
3302: CALL_OW 44
3306: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3307: LD_ADDR_VAR 0 3
3311: PUSH
3312: LD_VAR 0 3
3316: PPUSH
3317: LD_VAR 0 3
3321: PUSH
3322: LD_INT 1
3324: PLUS
3325: PPUSH
3326: LD_VAR 0 2
3330: PPUSH
3331: CALL_OW 1
3335: ST_TO_ADDR
// end ;
3336: GO 3260
3338: POP
3339: POP
// end ; 2 :
3340: GO 3736
3342: LD_INT 2
3344: DOUBLE
3345: EQUAL
3346: IFTRUE 3350
3348: GO 3484
3350: POP
// begin wait ( 0 0$30 ) ;
3351: LD_INT 1050
3353: PPUSH
3354: CALL_OW 67
// for i := 1 to 2 do
3358: LD_ADDR_VAR 0 1
3362: PUSH
3363: DOUBLE
3364: LD_INT 1
3366: DEC
3367: ST_TO_ADDR
3368: LD_INT 2
3370: PUSH
3371: FOR_TO
3372: IFFALSE 3428
// begin PrepareHuman ( false , 1 , 2 ) ;
3374: LD_INT 0
3376: PPUSH
3377: LD_INT 1
3379: PPUSH
3380: LD_INT 2
3382: PPUSH
3383: CALL_OW 380
// un := CreateHuman ;
3387: LD_ADDR_VAR 0 2
3391: PUSH
3392: CALL_OW 44
3396: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3397: LD_ADDR_VAR 0 3
3401: PUSH
3402: LD_VAR 0 3
3406: PPUSH
3407: LD_VAR 0 3
3411: PUSH
3412: LD_INT 1
3414: PLUS
3415: PPUSH
3416: LD_VAR 0 2
3420: PPUSH
3421: CALL_OW 1
3425: ST_TO_ADDR
// end ;
3426: GO 3371
3428: POP
3429: POP
// PrepareHuman ( false , 4 , 2 ) ;
3430: LD_INT 0
3432: PPUSH
3433: LD_INT 4
3435: PPUSH
3436: LD_INT 2
3438: PPUSH
3439: CALL_OW 380
// un := CreateHuman ;
3443: LD_ADDR_VAR 0 2
3447: PUSH
3448: CALL_OW 44
3452: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3453: LD_ADDR_VAR 0 3
3457: PUSH
3458: LD_VAR 0 3
3462: PPUSH
3463: LD_VAR 0 3
3467: PUSH
3468: LD_INT 1
3470: PLUS
3471: PPUSH
3472: LD_VAR 0 2
3476: PPUSH
3477: CALL_OW 1
3481: ST_TO_ADDR
// end ; 3 :
3482: GO 3736
3484: LD_INT 3
3486: DOUBLE
3487: EQUAL
3488: IFTRUE 3492
3490: GO 3735
3492: POP
// begin for i := 1 to 2 do
3493: LD_ADDR_VAR 0 1
3497: PUSH
3498: DOUBLE
3499: LD_INT 1
3501: DEC
3502: ST_TO_ADDR
3503: LD_INT 2
3505: PUSH
3506: FOR_TO
3507: IFFALSE 3563
// begin PrepareHuman ( false , 1 , 2 ) ;
3509: LD_INT 0
3511: PPUSH
3512: LD_INT 1
3514: PPUSH
3515: LD_INT 2
3517: PPUSH
3518: CALL_OW 380
// un := CreateHuman ;
3522: LD_ADDR_VAR 0 2
3526: PUSH
3527: CALL_OW 44
3531: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3532: LD_ADDR_VAR 0 3
3536: PUSH
3537: LD_VAR 0 3
3541: PPUSH
3542: LD_VAR 0 3
3546: PUSH
3547: LD_INT 1
3549: PLUS
3550: PPUSH
3551: LD_VAR 0 2
3555: PPUSH
3556: CALL_OW 1
3560: ST_TO_ADDR
// end ;
3561: GO 3506
3563: POP
3564: POP
// PrepareHuman ( false , 4 , 2 ) ;
3565: LD_INT 0
3567: PPUSH
3568: LD_INT 4
3570: PPUSH
3571: LD_INT 2
3573: PPUSH
3574: CALL_OW 380
// un := CreateHuman ;
3578: LD_ADDR_VAR 0 2
3582: PUSH
3583: CALL_OW 44
3587: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3588: LD_ADDR_VAR 0 3
3592: PUSH
3593: LD_VAR 0 3
3597: PPUSH
3598: LD_VAR 0 3
3602: PUSH
3603: LD_INT 1
3605: PLUS
3606: PPUSH
3607: LD_VAR 0 2
3611: PPUSH
3612: CALL_OW 1
3616: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_machine_gun , 90 ) ;
3617: LD_INT 1
3619: PPUSH
3620: LD_INT 1
3622: PPUSH
3623: LD_INT 2
3625: PPUSH
3626: LD_INT 2
3628: PPUSH
3629: LD_INT 1
3631: PPUSH
3632: LD_INT 2
3634: PPUSH
3635: LD_INT 90
3637: PPUSH
3638: CALL 284 0 7
// un := CreateVehicle ;
3642: LD_ADDR_VAR 0 2
3646: PUSH
3647: CALL_OW 45
3651: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3652: LD_ADDR_VAR 0 3
3656: PUSH
3657: LD_VAR 0 3
3661: PPUSH
3662: LD_VAR 0 3
3666: PUSH
3667: LD_INT 1
3669: PLUS
3670: PPUSH
3671: LD_VAR 0 2
3675: PPUSH
3676: CALL_OW 1
3680: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
3681: LD_INT 0
3683: PPUSH
3684: LD_INT 1
3686: PPUSH
3687: LD_INT 2
3689: PPUSH
3690: CALL_OW 380
// un := CreateHuman ;
3694: LD_ADDR_VAR 0 2
3698: PUSH
3699: CALL_OW 44
3703: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3704: LD_ADDR_VAR 0 3
3708: PUSH
3709: LD_VAR 0 3
3713: PPUSH
3714: LD_VAR 0 3
3718: PUSH
3719: LD_INT 1
3721: PLUS
3722: PPUSH
3723: LD_VAR 0 2
3727: PPUSH
3728: CALL_OW 1
3732: ST_TO_ADDR
// end ; end ;
3733: GO 3736
3735: POP
// for i := 1 to tmp do
3736: LD_ADDR_VAR 0 1
3740: PUSH
3741: DOUBLE
3742: LD_INT 1
3744: DEC
3745: ST_TO_ADDR
3746: LD_VAR 0 3
3750: PUSH
3751: FOR_TO
3752: IFFALSE 3917
// begin SetDir ( tmp [ i ] , 1 ) ;
3754: LD_VAR 0 3
3758: PUSH
3759: LD_VAR 0 1
3763: ARRAY
3764: PPUSH
3765: LD_INT 1
3767: PPUSH
3768: CALL_OW 233
// if GetType ( tmp [ i ] ) = unit_human then
3772: LD_VAR 0 3
3776: PUSH
3777: LD_VAR 0 1
3781: ARRAY
3782: PPUSH
3783: CALL_OW 247
3787: PUSH
3788: LD_INT 1
3790: EQUAL
3791: IFFALSE 3819
// PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) else
3793: LD_VAR 0 3
3797: PUSH
3798: LD_VAR 0 1
3802: ARRAY
3803: PPUSH
3804: LD_INT 28
3806: PPUSH
3807: LD_INT 52
3809: PPUSH
3810: LD_INT 0
3812: PPUSH
3813: CALL_OW 48
3817: GO 3887
// begin PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) ;
3819: LD_VAR 0 3
3823: PUSH
3824: LD_VAR 0 1
3828: ARRAY
3829: PPUSH
3830: LD_INT 28
3832: PPUSH
3833: LD_INT 52
3835: PPUSH
3836: LD_INT 0
3838: PPUSH
3839: CALL_OW 48
// i := i + 1 ;
3843: LD_ADDR_VAR 0 1
3847: PUSH
3848: LD_VAR 0 1
3852: PUSH
3853: LD_INT 1
3855: PLUS
3856: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ i ] , tmp [ i - 1 ] ) ;
3857: LD_VAR 0 3
3861: PUSH
3862: LD_VAR 0 1
3866: ARRAY
3867: PPUSH
3868: LD_VAR 0 3
3872: PUSH
3873: LD_VAR 0 1
3877: PUSH
3878: LD_INT 1
3880: MINUS
3881: ARRAY
3882: PPUSH
3883: CALL_OW 52
// end ; ComMoveXY ( tmp [ i ] , 43 , 56 ) ;
3887: LD_VAR 0 3
3891: PUSH
3892: LD_VAR 0 1
3896: ARRAY
3897: PPUSH
3898: LD_INT 43
3900: PPUSH
3901: LD_INT 56
3903: PPUSH
3904: CALL_OW 111
// wait ( 0 0$2 ) ;
3908: LD_INT 70
3910: PPUSH
3911: CALL_OW 67
// end ;
3915: GO 3751
3917: POP
3918: POP
// wait ( 0 0$2 ) ;
3919: LD_INT 70
3921: PPUSH
3922: CALL_OW 67
// if not FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) then
3926: LD_INT 7
3928: PPUSH
3929: LD_INT 22
3931: PUSH
3932: LD_INT 2
3934: PUSH
3935: EMPTY
3936: LIST
3937: LIST
3938: PPUSH
3939: CALL_OW 70
3943: NOT
3944: IFFALSE 4142
// begin AddComAgressiveMove ( tmp , 35 , 24 ) ;
3946: LD_VAR 0 3
3950: PPUSH
3951: LD_INT 35
3953: PPUSH
3954: LD_INT 24
3956: PPUSH
3957: CALL_OW 174
// usForces := usForces union UnitFilter ( tmp , [ f_class , 1 ] ) ;
3961: LD_ADDR_EXP 19
3965: PUSH
3966: LD_EXP 19
3970: PUSH
3971: LD_VAR 0 3
3975: PPUSH
3976: LD_INT 25
3978: PUSH
3979: LD_INT 1
3981: PUSH
3982: EMPTY
3983: LIST
3984: LIST
3985: PPUSH
3986: CALL_OW 72
3990: UNION
3991: ST_TO_ADDR
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
3992: LD_INT 22
3994: PUSH
3995: LD_INT 1
3997: PUSH
3998: EMPTY
3999: LIST
4000: LIST
4001: PUSH
4002: LD_INT 30
4004: PUSH
4005: LD_INT 4
4007: PUSH
4008: EMPTY
4009: LIST
4010: LIST
4011: PUSH
4012: EMPTY
4013: LIST
4014: LIST
4015: PPUSH
4016: CALL_OW 69
4020: PUSH
4021: LD_INT 1
4023: ARRAY
4024: PPUSH
4025: CALL_OW 313
4029: PUSH
4030: LD_INT 6
4032: LESS
4033: IFFALSE 4092
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 1 ] ) , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
4035: LD_VAR 0 3
4039: PPUSH
4040: LD_INT 25
4042: PUSH
4043: LD_INT 1
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: PPUSH
4050: CALL_OW 72
4054: PPUSH
4055: LD_INT 22
4057: PUSH
4058: LD_INT 1
4060: PUSH
4061: EMPTY
4062: LIST
4063: LIST
4064: PUSH
4065: LD_INT 30
4067: PUSH
4068: LD_INT 4
4070: PUSH
4071: EMPTY
4072: LIST
4073: LIST
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: PPUSH
4079: CALL_OW 69
4083: PUSH
4084: LD_INT 1
4086: ARRAY
4087: PPUSH
4088: CALL_OW 180
// if UnitFilter ( tmp , [ f_class , 4 ] ) then
4092: LD_VAR 0 3
4096: PPUSH
4097: LD_INT 25
4099: PUSH
4100: LD_INT 4
4102: PUSH
4103: EMPTY
4104: LIST
4105: LIST
4106: PPUSH
4107: CALL_OW 72
4111: IFFALSE 4140
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 4 ] ) , usLab ) ;
4113: LD_VAR 0 3
4117: PPUSH
4118: LD_INT 25
4120: PUSH
4121: LD_INT 4
4123: PUSH
4124: EMPTY
4125: LIST
4126: LIST
4127: PPUSH
4128: CALL_OW 72
4132: PPUSH
4133: LD_INT 3
4135: PPUSH
4136: CALL_OW 180
// end else
4140: GO 4417
// begin tmp := tmp union FilterUnitsInArea ( retreatArea , [ f_side , 1 ] ) ;
4142: LD_ADDR_VAR 0 3
4146: PUSH
4147: LD_VAR 0 3
4151: PUSH
4152: LD_INT 6
4154: PPUSH
4155: LD_INT 22
4157: PUSH
4158: LD_INT 1
4160: PUSH
4161: EMPTY
4162: LIST
4163: LIST
4164: PPUSH
4165: CALL_OW 70
4169: UNION
4170: ST_TO_ADDR
// ComMoveXY ( tmp , 45 , 54 ) ;
4171: LD_VAR 0 3
4175: PPUSH
4176: LD_INT 45
4178: PPUSH
4179: LD_INT 54
4181: PPUSH
4182: CALL_OW 111
// wait ( 0 0$3 ) ;
4186: LD_INT 105
4188: PPUSH
4189: CALL_OW 67
// AddComAgressiveMove ( tmp diff UnitFilter ( tmp , [ f_class , 4 ] ) , 35 , 24 ) ;
4193: LD_VAR 0 3
4197: PUSH
4198: LD_VAR 0 3
4202: PPUSH
4203: LD_INT 25
4205: PUSH
4206: LD_INT 4
4208: PUSH
4209: EMPTY
4210: LIST
4211: LIST
4212: PPUSH
4213: CALL_OW 72
4217: DIFF
4218: PPUSH
4219: LD_INT 35
4221: PPUSH
4222: LD_INT 24
4224: PPUSH
4225: CALL_OW 174
// AddComMoveXY ( UnitFilter ( tmp , [ f_class , 4 ] ) , 42 , 49 ) ;
4229: LD_VAR 0 3
4233: PPUSH
4234: LD_INT 25
4236: PUSH
4237: LD_INT 4
4239: PUSH
4240: EMPTY
4241: LIST
4242: LIST
4243: PPUSH
4244: CALL_OW 72
4248: PPUSH
4249: LD_INT 42
4251: PPUSH
4252: LD_INT 49
4254: PPUSH
4255: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4259: LD_INT 35
4261: PPUSH
4262: CALL_OW 67
// for i in tmp do
4266: LD_ADDR_VAR 0 1
4270: PUSH
4271: LD_VAR 0 3
4275: PUSH
4276: FOR_IN
4277: IFFALSE 4408
// if IsDead ( i ) then
4279: LD_VAR 0 1
4283: PPUSH
4284: CALL_OW 301
4288: IFFALSE 4308
// tmp := tmp diff i else
4290: LD_ADDR_VAR 0 3
4294: PUSH
4295: LD_VAR 0 3
4299: PUSH
4300: LD_VAR 0 1
4304: DIFF
4305: ST_TO_ADDR
4306: GO 4406
// if GetClass ( i ) = 1 then
4308: LD_VAR 0 1
4312: PPUSH
4313: CALL_OW 257
4317: PUSH
4318: LD_INT 1
4320: EQUAL
4321: IFFALSE 4406
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 42 , 49 ) > 6 then
4323: LD_VAR 0 1
4327: PPUSH
4328: CALL_OW 256
4332: PUSH
4333: LD_INT 600
4335: LESS
4336: PUSH
4337: LD_VAR 0 1
4341: PPUSH
4342: LD_INT 42
4344: PPUSH
4345: LD_INT 49
4347: PPUSH
4348: CALL_OW 297
4352: PUSH
4353: LD_INT 6
4355: GREATER
4356: AND
4357: IFFALSE 4376
// ComMoveXY ( i , 42 , 49 ) else
4359: LD_VAR 0 1
4363: PPUSH
4364: LD_INT 42
4366: PPUSH
4367: LD_INT 49
4369: PPUSH
4370: CALL_OW 111
4374: GO 4406
// if GetLives ( i ) = 1000 then
4376: LD_VAR 0 1
4380: PPUSH
4381: CALL_OW 256
4385: PUSH
4386: LD_INT 1000
4388: EQUAL
4389: IFFALSE 4406
// ComAgressiveMove ( i , 36 , 25 ) ;
4391: LD_VAR 0 1
4395: PPUSH
4396: LD_INT 36
4398: PPUSH
4399: LD_INT 25
4401: PPUSH
4402: CALL_OW 114
// end ;
4406: GO 4276
4408: POP
4409: POP
// until not tmp ;
4410: LD_VAR 0 3
4414: NOT
4415: IFFALSE 4259
// end ; end ;
4417: PPOPN 3
4419: END
// every 0 0$1 trigger FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) and not attackDeltaAllowed do var i , un , veh ;
4420: LD_INT 7
4422: PPUSH
4423: LD_INT 22
4425: PUSH
4426: LD_INT 2
4428: PUSH
4429: EMPTY
4430: LIST
4431: LIST
4432: PPUSH
4433: CALL_OW 70
4437: PUSH
4438: LD_EXP 12
4442: NOT
4443: AND
4444: IFFALSE 4602
4446: GO 4448
4448: DISABLE
4449: LD_INT 0
4451: PPUSH
4452: PPUSH
4453: PPUSH
// begin for i := 1 to 2 do
4454: LD_ADDR_VAR 0 1
4458: PUSH
4459: DOUBLE
4460: LD_INT 1
4462: DEC
4463: ST_TO_ADDR
4464: LD_INT 2
4466: PUSH
4467: FOR_TO
4468: IFFALSE 4600
// begin wait ( 0 0$3 ) ;
4470: LD_INT 105
4472: PPUSH
4473: CALL_OW 67
// uc_side := 1 ;
4477: LD_ADDR_OWVAR 20
4481: PUSH
4482: LD_INT 1
4484: ST_TO_ADDR
// uc_nation := 1 ;
4485: LD_ADDR_OWVAR 21
4489: PUSH
4490: LD_INT 1
4492: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 90 ) ;
4493: LD_INT 1
4495: PPUSH
4496: LD_INT 1
4498: PPUSH
4499: LD_INT 2
4501: PPUSH
4502: LD_INT 1
4504: PPUSH
4505: LD_INT 1
4507: PPUSH
4508: LD_INT 4
4510: PPUSH
4511: LD_INT 90
4513: PPUSH
4514: CALL 284 0 7
// veh := CreateVehicle ;
4518: LD_ADDR_VAR 0 3
4522: PUSH
4523: CALL_OW 45
4527: ST_TO_ADDR
// PlaceUnitXY ( veh , 29 , 52 , false ) ;
4528: LD_VAR 0 3
4532: PPUSH
4533: LD_INT 29
4535: PPUSH
4536: LD_INT 52
4538: PPUSH
4539: LD_INT 0
4541: PPUSH
4542: CALL_OW 48
// PrepareHuman ( false , 3 , 3 ) ;
4546: LD_INT 0
4548: PPUSH
4549: LD_INT 3
4551: PPUSH
4552: LD_INT 3
4554: PPUSH
4555: CALL_OW 380
// un := CreateHuman ;
4559: LD_ADDR_VAR 0 2
4563: PUSH
4564: CALL_OW 44
4568: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4569: LD_VAR 0 2
4573: PPUSH
4574: LD_VAR 0 3
4578: PPUSH
4579: CALL_OW 52
// ComAgressiveMove ( veh , 36 , 25 ) ;
4583: LD_VAR 0 3
4587: PPUSH
4588: LD_INT 36
4590: PPUSH
4591: LD_INT 25
4593: PPUSH
4594: CALL_OW 114
// end ;
4598: GO 4467
4600: POP
4601: POP
// end ; end_of_file
4602: PPOPN 3
4604: END
// export function Action ; var i , tmp ; begin
4605: LD_INT 0
4607: PPUSH
4608: PPUSH
4609: PPUSH
// InGameOn ;
4610: CALL_OW 8
// DoNotAttack ( 2 , usLab ) ;
4614: LD_INT 2
4616: PPUSH
4617: LD_INT 3
4619: PPUSH
4620: CALL_OW 471
// ComMoveXY ( Heike , 78 , 61 ) ;
4624: LD_EXP 21
4628: PPUSH
4629: LD_INT 78
4631: PPUSH
4632: LD_INT 61
4634: PPUSH
4635: CALL_OW 111
// if Mike then
4639: LD_EXP 23
4643: IFFALSE 4660
// ComMoveXY ( Mike , 80 , 66 ) ;
4645: LD_EXP 23
4649: PPUSH
4650: LD_INT 80
4652: PPUSH
4653: LD_INT 66
4655: PPUSH
4656: CALL_OW 111
// if Givi then
4660: LD_EXP 22
4664: IFFALSE 4681
// ComMoveXY ( Givi , 82 , 66 ) ;
4666: LD_EXP 22
4670: PPUSH
4671: LD_INT 82
4673: PPUSH
4674: LD_INT 66
4676: PPUSH
4677: CALL_OW 111
// if Kamil then
4681: LD_EXP 24
4685: IFFALSE 4702
// ComMoveXY ( Kamil , 82 , 67 ) ;
4687: LD_EXP 24
4691: PPUSH
4692: LD_INT 82
4694: PPUSH
4695: LD_INT 67
4697: PPUSH
4698: CALL_OW 111
// CenterNowOnUnits ( Heike ) ;
4702: LD_EXP 21
4706: PPUSH
4707: CALL_OW 87
// wait ( 0 0$2 ) ;
4711: LD_INT 70
4713: PPUSH
4714: CALL_OW 67
// if Givi and Mike then
4718: LD_EXP 22
4722: PUSH
4723: LD_EXP 23
4727: AND
4728: IFFALSE 5174
// begin AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
4730: LD_EXP 22
4734: PUSH
4735: LD_EXP 23
4739: PUSH
4740: LD_EXP 24
4744: PUSH
4745: EMPTY
4746: LIST
4747: LIST
4748: LIST
4749: PPUSH
4750: LD_EXP 21
4754: PPUSH
4755: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
4759: LD_EXP 21
4763: PPUSH
4764: LD_EXP 22
4768: PPUSH
4769: CALL_OW 179
// Say ( Givi , DG-1-start ) ;
4773: LD_EXP 22
4777: PPUSH
4778: LD_STRING DG-1-start
4780: PPUSH
4781: CALL_OW 88
// Say ( Heike , DH-1-start ) ;
4785: LD_EXP 21
4789: PPUSH
4790: LD_STRING DH-1-start
4792: PPUSH
4793: CALL_OW 88
// AddComTurnUnit ( Mike , Heike ) ;
4797: LD_EXP 23
4801: PPUSH
4802: LD_EXP 21
4806: PPUSH
4807: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
4811: LD_EXP 21
4815: PPUSH
4816: LD_EXP 23
4820: PPUSH
4821: CALL_OW 179
// Say ( Mike , DM-1-start ) ;
4825: LD_EXP 23
4829: PPUSH
4830: LD_STRING DM-1-start
4832: PPUSH
4833: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
4837: LD_EXP 21
4841: PPUSH
4842: LD_STRING DH-2-start
4844: PPUSH
4845: CALL_OW 88
// Say ( Mike , DM-2-start ) ;
4849: LD_EXP 23
4853: PPUSH
4854: LD_STRING DM-2-start
4856: PPUSH
4857: CALL_OW 88
// Say ( Givi , DG-2-start ) ;
4861: LD_EXP 22
4865: PPUSH
4866: LD_STRING DG-2-start
4868: PPUSH
4869: CALL_OW 88
// ComTurnUnit ( Mike , Givi ) ;
4873: LD_EXP 23
4877: PPUSH
4878: LD_EXP 22
4882: PPUSH
4883: CALL_OW 119
// ComTurnUnit ( Heike , Mike ) ;
4887: LD_EXP 21
4891: PPUSH
4892: LD_EXP 23
4896: PPUSH
4897: CALL_OW 119
// Say ( Mike , DM-3-start ) ;
4901: LD_EXP 23
4905: PPUSH
4906: LD_STRING DM-3-start
4908: PPUSH
4909: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
4913: LD_EXP 21
4917: PPUSH
4918: LD_STRING DH-3-start
4920: PPUSH
4921: CALL_OW 88
// ComMoveXY ( [ Heike , Mike , Givi , Kamil ] , 84 , 51 ) ;
4925: LD_EXP 21
4929: PUSH
4930: LD_EXP 23
4934: PUSH
4935: LD_EXP 22
4939: PUSH
4940: LD_EXP 24
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: LIST
4949: LIST
4950: PPUSH
4951: LD_INT 84
4953: PPUSH
4954: LD_INT 51
4956: PPUSH
4957: CALL_OW 111
// wait ( 0 0$2 ) ;
4961: LD_INT 70
4963: PPUSH
4964: CALL_OW 67
// Say ( Givi , DG-3-start ) ;
4968: LD_EXP 22
4972: PPUSH
4973: LD_STRING DG-3-start
4975: PPUSH
4976: CALL_OW 88
// ComHold ( [ Heike , Mike , Givi , Kamil ] ) ;
4980: LD_EXP 21
4984: PUSH
4985: LD_EXP 23
4989: PUSH
4990: LD_EXP 22
4994: PUSH
4995: LD_EXP 24
4999: PUSH
5000: EMPTY
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: PPUSH
5006: CALL_OW 140
// AddComTurnUnit ( Heike , Givi ) ;
5010: LD_EXP 21
5014: PPUSH
5015: LD_EXP 22
5019: PPUSH
5020: CALL_OW 179
// AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
5024: LD_EXP 22
5028: PUSH
5029: LD_EXP 23
5033: PUSH
5034: LD_EXP 24
5038: PUSH
5039: EMPTY
5040: LIST
5041: LIST
5042: LIST
5043: PPUSH
5044: LD_EXP 21
5048: PPUSH
5049: CALL_OW 179
// Say ( Heike , DH-4-start ) ;
5053: LD_EXP 21
5057: PPUSH
5058: LD_STRING DH-4-start
5060: PPUSH
5061: CALL_OW 88
// Say ( Givi , DG-4-start ) ;
5065: LD_EXP 22
5069: PPUSH
5070: LD_STRING DG-4-start
5072: PPUSH
5073: CALL_OW 88
// Say ( Heike , DH-5-start ) ;
5077: LD_EXP 21
5081: PPUSH
5082: LD_STRING DH-5-start
5084: PPUSH
5085: CALL_OW 88
// Say ( Givi , DG-5-start ) ;
5089: LD_EXP 22
5093: PPUSH
5094: LD_STRING DG-5-start
5096: PPUSH
5097: CALL_OW 88
// Say ( Heike , DH-6-start ) ;
5101: LD_EXP 21
5105: PPUSH
5106: LD_STRING DH-6-start
5108: PPUSH
5109: CALL_OW 88
// Say ( Mike , DM-6-start ) ;
5113: LD_EXP 23
5117: PPUSH
5118: LD_STRING DM-6-start
5120: PPUSH
5121: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi ] , Mike ) ;
5125: LD_EXP 21
5129: PUSH
5130: LD_EXP 22
5134: PUSH
5135: EMPTY
5136: LIST
5137: LIST
5138: PPUSH
5139: LD_EXP 23
5143: PPUSH
5144: CALL_OW 119
// Say ( Givi , DG-6-start ) ;
5148: LD_EXP 22
5152: PPUSH
5153: LD_STRING DG-6-start
5155: PPUSH
5156: CALL_OW 88
// Say ( Heike , DH-7-start ) ;
5160: LD_EXP 21
5164: PPUSH
5165: LD_STRING DH-7-start
5167: PPUSH
5168: CALL_OW 88
// end else
5172: GO 5896
// if not Mike and Givi then
5174: LD_EXP 23
5178: NOT
5179: PUSH
5180: LD_EXP 22
5184: AND
5185: IFFALSE 5530
// begin AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5187: LD_EXP 22
5191: PUSH
5192: LD_EXP 24
5196: PUSH
5197: EMPTY
5198: LIST
5199: LIST
5200: PPUSH
5201: LD_EXP 21
5205: PPUSH
5206: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
5210: LD_EXP 21
5214: PPUSH
5215: LD_EXP 22
5219: PPUSH
5220: CALL_OW 179
// Say ( Givi , DG-1-start-c ) ;
5224: LD_EXP 22
5228: PPUSH
5229: LD_STRING DG-1-start-c
5231: PPUSH
5232: CALL_OW 88
// Say ( Heike , DH-1-start-c ) ;
5236: LD_EXP 21
5240: PPUSH
5241: LD_STRING DH-1-start-c
5243: PPUSH
5244: CALL_OW 88
// Say ( Givi , DG-2-start-c ) ;
5248: LD_EXP 22
5252: PPUSH
5253: LD_STRING DG-2-start-c
5255: PPUSH
5256: CALL_OW 88
// Say ( Heike , DH-2-start-c ) ;
5260: LD_EXP 21
5264: PPUSH
5265: LD_STRING DH-2-start-c
5267: PPUSH
5268: CALL_OW 88
// Say ( Givi , DG-3-start-c ) ;
5272: LD_EXP 22
5276: PPUSH
5277: LD_STRING DG-3-start-c
5279: PPUSH
5280: CALL_OW 88
// ComMoveXY ( Heike , 83 , 56 ) ;
5284: LD_EXP 21
5288: PPUSH
5289: LD_INT 83
5291: PPUSH
5292: LD_INT 56
5294: PPUSH
5295: CALL_OW 111
// ComMoveXY ( Givi , 83 , 59 ) ;
5299: LD_EXP 22
5303: PPUSH
5304: LD_INT 83
5306: PPUSH
5307: LD_INT 59
5309: PPUSH
5310: CALL_OW 111
// if Kamil then
5314: LD_EXP 24
5318: IFFALSE 5335
// ComMoveXY ( Kamil , 80 , 58 ) ;
5320: LD_EXP 24
5324: PPUSH
5325: LD_INT 80
5327: PPUSH
5328: LD_INT 58
5330: PPUSH
5331: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5335: LD_EXP 21
5339: PPUSH
5340: LD_EXP 22
5344: PPUSH
5345: CALL_OW 179
// AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5349: LD_EXP 22
5353: PUSH
5354: LD_EXP 24
5358: PUSH
5359: EMPTY
5360: LIST
5361: LIST
5362: PPUSH
5363: LD_EXP 21
5367: PPUSH
5368: CALL_OW 179
// Say ( Heike , DH-3-start-c ) ;
5372: LD_EXP 21
5376: PPUSH
5377: LD_STRING DH-3-start-c
5379: PPUSH
5380: CALL_OW 88
// Say ( Givi , DG-4-start-c ) ;
5384: LD_EXP 22
5388: PPUSH
5389: LD_STRING DG-4-start-c
5391: PPUSH
5392: CALL_OW 88
// Say ( Heike , DH-5-start-c ) ;
5396: LD_EXP 21
5400: PPUSH
5401: LD_STRING DH-5-start-c
5403: PPUSH
5404: CALL_OW 88
// Say ( Givi , DG-5-start-c ) ;
5408: LD_EXP 22
5412: PPUSH
5413: LD_STRING DG-5-start-c
5415: PPUSH
5416: CALL_OW 88
// Say ( Heike , DH-6-start-c ) ;
5420: LD_EXP 21
5424: PPUSH
5425: LD_STRING DH-6-start-c
5427: PPUSH
5428: CALL_OW 88
// Say ( Givi , DG-6-start-c ) ;
5432: LD_EXP 22
5436: PPUSH
5437: LD_STRING DG-6-start-c
5439: PPUSH
5440: CALL_OW 88
// if Kamil then
5444: LD_EXP 24
5448: IFFALSE 5504
// begin ComTurnUnit ( Kamil , Heike ) ;
5450: LD_EXP 24
5454: PPUSH
5455: LD_EXP 21
5459: PPUSH
5460: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5464: LD_EXP 24
5468: PPUSH
5469: LD_STRING DKam-1-start-c
5471: PPUSH
5472: CALL_OW 88
// ComTurnUnit ( Givi , Kamil ) ;
5476: LD_EXP 22
5480: PPUSH
5481: LD_EXP 24
5485: PPUSH
5486: CALL_OW 119
// Say ( Givi , DG-7-start-c ) ;
5490: LD_EXP 22
5494: PPUSH
5495: LD_STRING DG-7-start-c
5497: PPUSH
5498: CALL_OW 88
// end else
5502: GO 5528
// begin Say ( Givi , DG-8-start-c ) ;
5504: LD_EXP 22
5508: PPUSH
5509: LD_STRING DG-8-start-c
5511: PPUSH
5512: CALL_OW 88
// Say ( Heike , DH-7-start-c ) ;
5516: LD_EXP 21
5520: PPUSH
5521: LD_STRING DH-7-start-c
5523: PPUSH
5524: CALL_OW 88
// end ; end else
5528: GO 5896
// if not Givi and Mike then
5530: LD_EXP 22
5534: NOT
5535: PUSH
5536: LD_EXP 23
5540: AND
5541: IFFALSE 5800
// begin AddComTurnUnit ( [ Mike , Kamil ] , Heike ) ;
5543: LD_EXP 23
5547: PUSH
5548: LD_EXP 24
5552: PUSH
5553: EMPTY
5554: LIST
5555: LIST
5556: PPUSH
5557: LD_EXP 21
5561: PPUSH
5562: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
5566: LD_EXP 21
5570: PPUSH
5571: LD_EXP 23
5575: PPUSH
5576: CALL_OW 179
// Say ( Mike , DM-1-start-b ) ;
5580: LD_EXP 23
5584: PPUSH
5585: LD_STRING DM-1-start-b
5587: PPUSH
5588: CALL_OW 88
// Say ( Heike , DH-1-start-b ) ;
5592: LD_EXP 21
5596: PPUSH
5597: LD_STRING DH-1-start-b
5599: PPUSH
5600: CALL_OW 88
// Say ( Mike , DM-2-start-b ) ;
5604: LD_EXP 23
5608: PPUSH
5609: LD_STRING DM-2-start-b
5611: PPUSH
5612: CALL_OW 88
// Say ( Heike , DH-2-start-b ) ;
5616: LD_EXP 21
5620: PPUSH
5621: LD_STRING DH-2-start-b
5623: PPUSH
5624: CALL_OW 88
// Say ( Mike , DM-3-start-b ) ;
5628: LD_EXP 23
5632: PPUSH
5633: LD_STRING DM-3-start-b
5635: PPUSH
5636: CALL_OW 88
// if Kamil then
5640: LD_EXP 24
5644: IFFALSE 5661
// ComMoveXY ( Kamil , 80 , 58 ) ;
5646: LD_EXP 24
5650: PPUSH
5651: LD_INT 80
5653: PPUSH
5654: LD_INT 58
5656: PPUSH
5657: CALL_OW 111
// ComMoveXY ( Heike , 83 , 56 ) ;
5661: LD_EXP 21
5665: PPUSH
5666: LD_INT 83
5668: PPUSH
5669: LD_INT 56
5671: PPUSH
5672: CALL_OW 111
// ComMoveXY ( Mike , 83 , 59 ) ;
5676: LD_EXP 23
5680: PPUSH
5681: LD_INT 83
5683: PPUSH
5684: LD_INT 59
5686: PPUSH
5687: CALL_OW 111
// AddComTurnUnit ( Heike , Mike ) ;
5691: LD_EXP 21
5695: PPUSH
5696: LD_EXP 23
5700: PPUSH
5701: CALL_OW 179
// AddComTurnUnit ( [ Kamil , Mike ] , Heike ) ;
5705: LD_EXP 24
5709: PUSH
5710: LD_EXP 23
5714: PUSH
5715: EMPTY
5716: LIST
5717: LIST
5718: PPUSH
5719: LD_EXP 21
5723: PPUSH
5724: CALL_OW 179
// Say ( Heike , DH-3-start-b ) ;
5728: LD_EXP 21
5732: PPUSH
5733: LD_STRING DH-3-start-b
5735: PPUSH
5736: CALL_OW 88
// Say ( Mike , DM-4-start-b ) ;
5740: LD_EXP 23
5744: PPUSH
5745: LD_STRING DM-4-start-b
5747: PPUSH
5748: CALL_OW 88
// if Kamil then
5752: LD_EXP 24
5756: IFFALSE 5786
// begin ComTurnUnit ( Kamil , Heike ) ;
5758: LD_EXP 24
5762: PPUSH
5763: LD_EXP 21
5767: PPUSH
5768: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5772: LD_EXP 24
5776: PPUSH
5777: LD_STRING DKam-1-start-c
5779: PPUSH
5780: CALL_OW 88
// end else
5784: GO 5798
// begin Say ( Mike , DM-5-start-b ) ;
5786: LD_EXP 23
5790: PPUSH
5791: LD_STRING DM-5-start-b
5793: PPUSH
5794: CALL_OW 88
// end ; end else
5798: GO 5896
// if Kamil then
5800: LD_EXP 24
5804: IFFALSE 5884
// begin AddComTurnUnit ( Heike , Kamil ) ;
5806: LD_EXP 21
5810: PPUSH
5811: LD_EXP 24
5815: PPUSH
5816: CALL_OW 179
// AddComTurnUnit ( Kamil , Heike ) ;
5820: LD_EXP 24
5824: PPUSH
5825: LD_EXP 21
5829: PPUSH
5830: CALL_OW 179
// Say ( Heike , DH-1-start-f ) ;
5834: LD_EXP 21
5838: PPUSH
5839: LD_STRING DH-1-start-f
5841: PPUSH
5842: CALL_OW 88
// Say ( Kamil , DKam-1-start-f ) ;
5846: LD_EXP 24
5850: PPUSH
5851: LD_STRING DKam-1-start-f
5853: PPUSH
5854: CALL_OW 88
// Say ( Heike , DH-2-start-f ) ;
5858: LD_EXP 21
5862: PPUSH
5863: LD_STRING DH-2-start-f
5865: PPUSH
5866: CALL_OW 88
// Say ( Kamil , DKam-2-start-f ) ;
5870: LD_EXP 24
5874: PPUSH
5875: LD_STRING DKam-2-start-f
5877: PPUSH
5878: CALL_OW 88
// end else
5882: GO 5896
// begin Say ( Heike , DH-1-start-d ) ;
5884: LD_EXP 21
5888: PPUSH
5889: LD_STRING DH-1-start-d
5891: PPUSH
5892: CALL_OW 88
// end ; ComFree ( [ Heike , Givi , Mike , Kamil ] ) ;
5896: LD_EXP 21
5900: PUSH
5901: LD_EXP 22
5905: PUSH
5906: LD_EXP 23
5910: PUSH
5911: LD_EXP 24
5915: PUSH
5916: EMPTY
5917: LIST
5918: LIST
5919: LIST
5920: LIST
5921: PPUSH
5922: CALL_OW 139
// InGameOff ;
5926: CALL_OW 9
// ChangeMissionObjectives ( OEast ) ;
5930: LD_STRING OEast
5932: PPUSH
5933: CALL_OW 337
// SaveForQuickRestart ;
5937: CALL_OW 22
// wait ( 0 0$20 ) ;
5941: LD_INT 700
5943: PPUSH
5944: CALL_OW 67
// SendSciToForest ;
5948: CALL 1374 0 0
// if Difficulty = 1 then
5952: LD_OWVAR 67
5956: PUSH
5957: LD_INT 1
5959: EQUAL
5960: IFFALSE 5964
// exit ;
5962: GO 6081
// wait ( [ 5 5$00 , 2 2$30 ] [ Difficulty - 1 ] ) ;
5964: LD_INT 10500
5966: PUSH
5967: LD_INT 5250
5969: PUSH
5970: EMPTY
5971: LIST
5972: LIST
5973: PUSH
5974: LD_OWVAR 67
5978: PUSH
5979: LD_INT 1
5981: MINUS
5982: ARRAY
5983: PPUSH
5984: CALL_OW 67
// if usAlert then
5988: LD_EXP 9
5992: IFFALSE 5996
// exit ;
5994: GO 6081
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
5996: LD_ADDR_VAR 0 3
6000: PUSH
6001: LD_INT 22
6003: PUSH
6004: LD_INT 1
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PUSH
6011: LD_INT 25
6013: PUSH
6014: LD_INT 2
6016: PUSH
6017: EMPTY
6018: LIST
6019: LIST
6020: PUSH
6021: EMPTY
6022: LIST
6023: LIST
6024: PPUSH
6025: CALL_OW 69
6029: ST_TO_ADDR
// if not tmp then
6030: LD_VAR 0 3
6034: NOT
6035: IFFALSE 6039
// exit ;
6037: GO 6081
// ComExitBuilding ( tmp ) ;
6039: LD_VAR 0 3
6043: PPUSH
6044: CALL_OW 122
// AddComBuild ( tmp , b_breastwork , 40 , 13 , 3 ) ;
6048: LD_VAR 0 3
6052: PPUSH
6053: LD_INT 31
6055: PPUSH
6056: LD_INT 40
6058: PPUSH
6059: LD_INT 13
6061: PPUSH
6062: LD_INT 3
6064: PPUSH
6065: CALL_OW 205
// AddComEnterUnit ( tmp , Delta ) ;
6069: LD_VAR 0 3
6073: PPUSH
6074: LD_INT 1
6076: PPUSH
6077: CALL_OW 180
// end ;
6081: LD_VAR 0 1
6085: RET
// every 3 3$00 do
6086: GO 6088
6088: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
6089: LD_INT 1
6091: PPUSH
6092: LD_INT 570
6094: PPUSH
6095: LD_INT 350
6097: PPUSH
6098: CALL_OW 550
// wait ( 2 2$40 ) ;
6102: LD_INT 5600
6104: PPUSH
6105: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
6109: LD_INT 0
6111: PPUSH
6112: LD_INT 570
6114: PPUSH
6115: LD_INT 350
6117: PPUSH
6118: CALL_OW 550
// end ;
6122: END
// every 0 0$1 trigger not aviradzeSpotted and See ( 2 , Aviradze ) do var i , pepAmount ;
6123: LD_EXP 4
6127: NOT
6128: PUSH
6129: LD_INT 2
6131: PPUSH
6132: LD_EXP 25
6136: PPUSH
6137: CALL_OW 292
6141: AND
6142: IFFALSE 7077
6144: GO 6146
6146: DISABLE
6147: LD_INT 0
6149: PPUSH
6150: PPUSH
// begin aviradzeSpotted := true ;
6151: LD_ADDR_EXP 4
6155: PUSH
6156: LD_INT 1
6158: ST_TO_ADDR
// pepAmount := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ;
6159: LD_ADDR_VAR 0 2
6163: PUSH
6164: LD_INT 22
6166: PUSH
6167: LD_INT 2
6169: PUSH
6170: EMPTY
6171: LIST
6172: LIST
6173: PUSH
6174: LD_INT 21
6176: PUSH
6177: LD_INT 1
6179: PUSH
6180: EMPTY
6181: LIST
6182: LIST
6183: PUSH
6184: EMPTY
6185: LIST
6186: LIST
6187: PPUSH
6188: CALL_OW 69
6192: ST_TO_ADDR
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6193: LD_EXP 21
6197: PPUSH
6198: LD_EXP 25
6202: PPUSH
6203: CALL_OW 250
6207: PPUSH
6208: LD_EXP 25
6212: PPUSH
6213: CALL_OW 251
6217: PPUSH
6218: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6222: LD_INT 35
6224: PPUSH
6225: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 16 ;
6229: LD_EXP 21
6233: PPUSH
6234: LD_EXP 25
6238: PPUSH
6239: CALL_OW 296
6243: PUSH
6244: LD_INT 16
6246: LESS
6247: IFFALSE 6222
// InGameOn ;
6249: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
6253: LD_INT 5
6255: PPUSH
6256: LD_INT 2
6258: PPUSH
6259: CALL_OW 343
// if pepAmount > 2 then
6263: LD_VAR 0 2
6267: PUSH
6268: LD_INT 2
6270: GREATER
6271: IFFALSE 6287
// Say ( Heike , DH-1-spot ) else
6273: LD_EXP 21
6277: PPUSH
6278: LD_STRING DH-1-spot
6280: PPUSH
6281: CALL_OW 88
6285: GO 6299
// Say ( Heike , DH-1-spot-d ) ;
6287: LD_EXP 21
6291: PPUSH
6292: LD_STRING DH-1-spot-d
6294: PPUSH
6295: CALL_OW 88
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6299: LD_EXP 21
6303: PPUSH
6304: LD_EXP 25
6308: PPUSH
6309: CALL_OW 250
6313: PPUSH
6314: LD_EXP 25
6318: PPUSH
6319: CALL_OW 251
6323: PPUSH
6324: CALL_OW 111
// for i in [ Kamil , Mike , Givi ] do
6328: LD_ADDR_VAR 0 1
6332: PUSH
6333: LD_EXP 24
6337: PUSH
6338: LD_EXP 23
6342: PUSH
6343: LD_EXP 22
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: LIST
6352: PUSH
6353: FOR_IN
6354: IFFALSE 6393
// if GetDistUnits ( i , Aviradze ) > 7 then
6356: LD_VAR 0 1
6360: PPUSH
6361: LD_EXP 25
6365: PPUSH
6366: CALL_OW 296
6370: PUSH
6371: LD_INT 7
6373: GREATER
6374: IFFALSE 6391
// ComMoveXY ( i , 102 , 40 ) ;
6376: LD_VAR 0 1
6380: PPUSH
6381: LD_INT 102
6383: PPUSH
6384: LD_INT 40
6386: PPUSH
6387: CALL_OW 111
6391: GO 6353
6393: POP
6394: POP
// repeat wait ( 0 0$1 ) ;
6395: LD_INT 35
6397: PPUSH
6398: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 6 ;
6402: LD_EXP 21
6406: PPUSH
6407: LD_EXP 25
6411: PPUSH
6412: CALL_OW 296
6416: PUSH
6417: LD_INT 6
6419: LESS
6420: IFFALSE 6395
// ComTurnUnit ( Heike , Aviradze ) ;
6422: LD_EXP 21
6426: PPUSH
6427: LD_EXP 25
6431: PPUSH
6432: CALL_OW 119
// ComTurnUnit ( [ Aviradze , Sophia , Kaia ] , Heike ) ;
6436: LD_EXP 25
6440: PUSH
6441: LD_EXP 27
6445: PUSH
6446: LD_EXP 26
6450: PUSH
6451: EMPTY
6452: LIST
6453: LIST
6454: LIST
6455: PPUSH
6456: LD_EXP 21
6460: PPUSH
6461: CALL_OW 119
// if pepAmount > 1 then
6465: LD_VAR 0 2
6469: PUSH
6470: LD_INT 1
6472: GREATER
6473: IFFALSE 6525
// begin wait ( 0 0$2 ) ;
6475: LD_INT 70
6477: PPUSH
6478: CALL_OW 67
// ComTurnUnit ( [ Kamil , Mike , Givi ] , Aviradze ) ;
6482: LD_EXP 24
6486: PUSH
6487: LD_EXP 23
6491: PUSH
6492: LD_EXP 22
6496: PUSH
6497: EMPTY
6498: LIST
6499: LIST
6500: LIST
6501: PPUSH
6502: LD_EXP 25
6506: PPUSH
6507: CALL_OW 119
// Say ( Heike , DH-2-spot ) ;
6511: LD_EXP 21
6515: PPUSH
6516: LD_STRING DH-2-spot
6518: PPUSH
6519: CALL_OW 88
// end else
6523: GO 6537
// Say ( Heike , DH-2-spot-d ) ;
6525: LD_EXP 21
6529: PPUSH
6530: LD_STRING DH-2-spot-d
6532: PPUSH
6533: CALL_OW 88
// Say ( Aviradze , DA-2-spot ) ;
6537: LD_EXP 25
6541: PPUSH
6542: LD_STRING DA-2-spot
6544: PPUSH
6545: CALL_OW 88
// Say ( Heike , DH-3-spot ) ;
6549: LD_EXP 21
6553: PPUSH
6554: LD_STRING DH-3-spot
6556: PPUSH
6557: CALL_OW 88
// ComMoveUnit ( Kaia , Heike ) ;
6561: LD_EXP 26
6565: PPUSH
6566: LD_EXP 21
6570: PPUSH
6571: CALL_OW 112
// ComTurnUNit ( Heike , Kaia ) ;
6575: LD_EXP 21
6579: PPUSH
6580: LD_EXP 26
6584: PPUSH
6585: CALL_OW 119
// wait ( 0 0$0.3 ) ;
6589: LD_INT 10
6591: PPUSH
6592: CALL_OW 67
// async ;
6596: ASYNC
// Say ( Kaia , DK-3-spot ) ;
6597: LD_EXP 26
6601: PPUSH
6602: LD_STRING DK-3-spot
6604: PPUSH
6605: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
6609: LD_INT 35
6611: PPUSH
6612: CALL_OW 67
// until GetDistUnits ( Heike , Kaia ) < 4 ;
6616: LD_EXP 21
6620: PPUSH
6621: LD_EXP 26
6625: PPUSH
6626: CALL_OW 296
6630: PUSH
6631: LD_INT 4
6633: LESS
6634: IFFALSE 6609
// ComTurnUnit ( Kaia , Heike ) ;
6636: LD_EXP 26
6640: PPUSH
6641: LD_EXP 21
6645: PPUSH
6646: CALL_OW 119
// sync ;
6650: SYNC
// Say ( Heike , DH-4-spot ) ;
6651: LD_EXP 21
6655: PPUSH
6656: LD_STRING DH-4-spot
6658: PPUSH
6659: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6663: LD_INT 10
6665: PPUSH
6666: CALL_OW 67
// ComTurnUnit ( Heike , Aviradze ) ;
6670: LD_EXP 21
6674: PPUSH
6675: LD_EXP 25
6679: PPUSH
6680: CALL_OW 119
// Say ( Aviradze , DA-4-spot ) ;
6684: LD_EXP 25
6688: PPUSH
6689: LD_STRING DA-4-spot
6691: PPUSH
6692: CALL_OW 88
// ComTurnUnit ( Kaia , Aviradze ) ;
6696: LD_EXP 26
6700: PPUSH
6701: LD_EXP 25
6705: PPUSH
6706: CALL_OW 119
// Say ( Kaia , DK-4-spot ) ;
6710: LD_EXP 26
6714: PPUSH
6715: LD_STRING DK-4-spot
6717: PPUSH
6718: CALL_OW 88
// ComTurnUnit ( Aviradze , Kaia ) ;
6722: LD_EXP 25
6726: PPUSH
6727: LD_EXP 26
6731: PPUSH
6732: CALL_OW 119
// Say ( Aviradze , DA-5-spot ) ;
6736: LD_EXP 25
6740: PPUSH
6741: LD_STRING DA-5-spot
6743: PPUSH
6744: CALL_OW 88
// Say ( Kaia , DK-5-spot ) ;
6748: LD_EXP 26
6752: PPUSH
6753: LD_STRING DK-5-spot
6755: PPUSH
6756: CALL_OW 88
// if pepAmount = 1 then
6760: LD_VAR 0 2
6764: PUSH
6765: LD_INT 1
6767: EQUAL
6768: IFFALSE 6782
// Say ( Heike , DH-5-spot-f ) ;
6770: LD_EXP 21
6774: PPUSH
6775: LD_STRING DH-5-spot-f
6777: PPUSH
6778: CALL_OW 88
// if pepAmount < 3 then
6782: LD_VAR 0 2
6786: PUSH
6787: LD_INT 3
6789: LESS
6790: IFFALSE 6806
// Say ( Aviradze , DA-6-spot-f ) else
6792: LD_EXP 25
6796: PPUSH
6797: LD_STRING DA-6-spot-f
6799: PPUSH
6800: CALL_OW 88
6804: GO 6842
// if pepAmount < 4 then
6806: LD_VAR 0 2
6810: PUSH
6811: LD_INT 4
6813: LESS
6814: IFFALSE 6830
// Say ( Aviradze , DA-6-spot-c ) else
6816: LD_EXP 25
6820: PPUSH
6821: LD_STRING DA-6-spot-c
6823: PPUSH
6824: CALL_OW 88
6828: GO 6842
// Say ( Aviradze , DA-6-spot ) ;
6830: LD_EXP 25
6834: PPUSH
6835: LD_STRING DA-6-spot
6837: PPUSH
6838: CALL_OW 88
// if Kamil then
6842: LD_EXP 24
6846: IFFALSE 6860
// Say ( Kamil , DKam-6-spot ) ;
6848: LD_EXP 24
6852: PPUSH
6853: LD_STRING DKam-6-spot
6855: PPUSH
6856: CALL_OW 88
// Say ( Kaia , DK-6-spot ) ;
6860: LD_EXP 26
6864: PPUSH
6865: LD_STRING DK-6-spot
6867: PPUSH
6868: CALL_OW 88
// ComTurnUnit ( Aviradze , Heike ) ;
6872: LD_EXP 25
6876: PPUSH
6877: LD_EXP 21
6881: PPUSH
6882: CALL_OW 119
// Say ( Aviradze , DA-7-spot ) ;
6886: LD_EXP 25
6890: PPUSH
6891: LD_STRING DA-7-spot
6893: PPUSH
6894: CALL_OW 88
// Say ( Heike , DH-7-spot ) ;
6898: LD_EXP 21
6902: PPUSH
6903: LD_STRING DH-7-spot
6905: PPUSH
6906: CALL_OW 88
// if sciCounterKill >= 3 then
6910: LD_EXP 8
6914: PUSH
6915: LD_INT 3
6917: GREATEREQUAL
6918: IFFALSE 6944
// begin Say ( Heike , DH-7-spot-a ) ;
6920: LD_EXP 21
6924: PPUSH
6925: LD_STRING DH-7-spot-a
6927: PPUSH
6928: CALL_OW 88
// Say ( Aviradze , DA-8-spot-a ) ;
6932: LD_EXP 25
6936: PPUSH
6937: LD_STRING DA-8-spot-a
6939: PPUSH
6940: CALL_OW 88
// end ; InGameOff ;
6944: CALL_OW 9
// if sciCounterKill < 3 then
6948: LD_EXP 8
6952: PUSH
6953: LD_INT 3
6955: LESS
6956: IFFALSE 7015
// begin SetSide ( Kaia , 2 ) ;
6958: LD_EXP 26
6962: PPUSH
6963: LD_INT 2
6965: PPUSH
6966: CALL_OW 235
// ComFree ( Kaia ) ;
6970: LD_EXP 26
6974: PPUSH
6975: CALL_OW 139
// if Kamil then
6979: LD_EXP 24
6983: IFFALSE 7006
// begin ComHold ( Kamil ) ;
6985: LD_EXP 24
6989: PPUSH
6990: CALL_OW 140
// SetSide ( Kamil , 5 ) ;
6994: LD_EXP 24
6998: PPUSH
6999: LD_INT 5
7001: PPUSH
7002: CALL_OW 235
// end ; ChangeMissionObjectives ( OSci ) ;
7006: LD_STRING OSci
7008: PPUSH
7009: CALL_OW 337
// end else
7013: GO 7077
// begin aviradzeQuestDone := true ;
7015: LD_ADDR_EXP 7
7019: PUSH
7020: LD_INT 1
7022: ST_TO_ADDR
// attackDeltaAllowed := true ;
7023: LD_ADDR_EXP 12
7027: PUSH
7028: LD_INT 1
7030: ST_TO_ADDR
// ChangeMissionObjectives ( ODelta2 ) ;
7031: LD_STRING ODelta2
7033: PPUSH
7034: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
7038: LD_ADDR_VAR 0 1
7042: PUSH
7043: LD_INT 22
7045: PUSH
7046: LD_INT 5
7048: PUSH
7049: EMPTY
7050: LIST
7051: LIST
7052: PPUSH
7053: CALL_OW 69
7057: PUSH
7058: FOR_IN
7059: IFFALSE 7075
// SetSide ( i , 2 ) ;
7061: LD_VAR 0 1
7065: PPUSH
7066: LD_INT 2
7068: PPUSH
7069: CALL_OW 235
7073: GO 7058
7075: POP
7076: POP
// end ; end ;
7077: PPOPN 2
7079: END
// every 0 0$1 trigger not sciSpotted and GetDistUnits ( NearestUnitToUnit ( usSci , Heike ) , Heike ) < 8 and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and not aviradzeSpotted do
7080: LD_EXP 6
7084: NOT
7085: PUSH
7086: LD_EXP 20
7090: PPUSH
7091: LD_EXP 21
7095: PPUSH
7096: CALL_OW 74
7100: PPUSH
7101: LD_EXP 21
7105: PPUSH
7106: CALL_OW 296
7110: PUSH
7111: LD_INT 8
7113: LESS
7114: AND
7115: PUSH
7116: LD_INT 2
7118: PPUSH
7119: LD_EXP 20
7123: PPUSH
7124: LD_EXP 21
7128: PPUSH
7129: CALL_OW 74
7133: PPUSH
7134: CALL_OW 292
7138: AND
7139: PUSH
7140: LD_INT 22
7142: PUSH
7143: LD_INT 2
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: PUSH
7150: LD_INT 21
7152: PUSH
7153: LD_INT 1
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: PUSH
7160: EMPTY
7161: LIST
7162: LIST
7163: PPUSH
7164: CALL_OW 69
7168: PUSH
7169: LD_INT 1
7171: GREATER
7172: AND
7173: PUSH
7174: LD_EXP 4
7178: NOT
7179: AND
7180: IFFALSE 7224
7182: GO 7184
7184: DISABLE
// begin sciSpotted := true ;
7185: LD_ADDR_EXP 6
7189: PUSH
7190: LD_INT 1
7192: ST_TO_ADDR
// CenterNowOnUnits ( NearestUnitToUnit ( usSci , Heike ) ) ;
7193: LD_EXP 20
7197: PPUSH
7198: LD_EXP 21
7202: PPUSH
7203: CALL_OW 74
7207: PPUSH
7208: CALL_OW 87
// Say ( Heike , DH-1-sci ) ;
7212: LD_EXP 21
7216: PPUSH
7217: LD_STRING DH-1-sci
7219: PPUSH
7220: CALL_OW 88
// end ;
7224: END
// every 0 0$1 trigger aviradzeSpotted and not sciSpotted and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and aviradzeSpotted and not aviradzeQuestDone do
7225: LD_EXP 4
7229: PUSH
7230: LD_EXP 6
7234: NOT
7235: AND
7236: PUSH
7237: LD_INT 2
7239: PPUSH
7240: LD_EXP 20
7244: PPUSH
7245: LD_EXP 21
7249: PPUSH
7250: CALL_OW 74
7254: PPUSH
7255: CALL_OW 292
7259: AND
7260: PUSH
7261: LD_INT 22
7263: PUSH
7264: LD_INT 2
7266: PUSH
7267: EMPTY
7268: LIST
7269: LIST
7270: PUSH
7271: LD_INT 21
7273: PUSH
7274: LD_INT 1
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: PUSH
7281: EMPTY
7282: LIST
7283: LIST
7284: PPUSH
7285: CALL_OW 69
7289: PUSH
7290: LD_INT 1
7292: GREATER
7293: AND
7294: PUSH
7295: LD_EXP 4
7299: AND
7300: PUSH
7301: LD_EXP 7
7305: NOT
7306: AND
7307: IFFALSE 7369
7309: GO 7311
7311: DISABLE
// begin sciSpotted := true ;
7312: LD_ADDR_EXP 6
7316: PUSH
7317: LD_INT 1
7319: ST_TO_ADDR
// CenterNowOnUnits ( NearestUnitToUnit ( usSci , Heike ) ) ;
7320: LD_EXP 20
7324: PPUSH
7325: LD_EXP 21
7329: PPUSH
7330: CALL_OW 74
7334: PPUSH
7335: CALL_OW 87
// Say ( Heike , DH-1-sci-a ) ;
7339: LD_EXP 21
7343: PPUSH
7344: LD_STRING DH-1-sci-a
7346: PPUSH
7347: CALL_OW 88
// if Mike then
7351: LD_EXP 23
7355: IFFALSE 7369
// Say ( Mike , DM-1-sci-a ) ;
7357: LD_EXP 23
7361: PPUSH
7362: LD_STRING DM-1-sci-a
7364: PPUSH
7365: CALL_OW 88
// end ;
7369: END
// every 0 0$1 trigger aviradzeSpotted and ( sciCounterKill >= 3 or not usSci ) and not aviradzeQuestDone do
7370: LD_EXP 4
7374: PUSH
7375: LD_EXP 8
7379: PUSH
7380: LD_INT 3
7382: GREATEREQUAL
7383: PUSH
7384: LD_EXP 20
7388: NOT
7389: OR
7390: AND
7391: PUSH
7392: LD_EXP 7
7396: NOT
7397: AND
7398: IFFALSE 7441
7400: GO 7402
7402: DISABLE
// begin aviradzeQuestDone := true ;
7403: LD_ADDR_EXP 7
7407: PUSH
7408: LD_INT 1
7410: ST_TO_ADDR
// Say ( Heike , DH-1-quest-done ) ;
7411: LD_EXP 21
7415: PPUSH
7416: LD_STRING DH-1-quest-done
7418: PPUSH
7419: CALL_OW 88
// if Givi then
7423: LD_EXP 22
7427: IFFALSE 7441
// Say ( Givi , DG-1-quest-done ) ;
7429: LD_EXP 22
7433: PPUSH
7434: LD_STRING DG-1-quest-done
7436: PPUSH
7437: CALL_OW 88
// end ;
7441: END
// every 0 0$1 trigger See ( 5 , Heike ) and GetDistUnits ( Heike , Aviradze ) < 6 and aviradzeQuestDone and not attackDeltaAllowed do var i ;
7442: LD_INT 5
7444: PPUSH
7445: LD_EXP 21
7449: PPUSH
7450: CALL_OW 292
7454: PUSH
7455: LD_EXP 21
7459: PPUSH
7460: LD_EXP 25
7464: PPUSH
7465: CALL_OW 296
7469: PUSH
7470: LD_INT 6
7472: LESS
7473: AND
7474: PUSH
7475: LD_EXP 7
7479: AND
7480: PUSH
7481: LD_EXP 12
7485: NOT
7486: AND
7487: IFFALSE 7625
7489: GO 7491
7491: DISABLE
7492: LD_INT 0
7494: PPUSH
// begin attackDeltaAllowed := true ;
7495: LD_ADDR_EXP 12
7499: PUSH
7500: LD_INT 1
7502: ST_TO_ADDR
// InGameOn ;
7503: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
7507: LD_EXP 21
7511: PPUSH
7512: CALL_OW 87
// wait ( 0 0$0.3 ) ;
7516: LD_INT 10
7518: PPUSH
7519: CALL_OW 67
// ComTurnUnit ( Aviradze , Heike ) ;
7523: LD_EXP 25
7527: PPUSH
7528: LD_EXP 21
7532: PPUSH
7533: CALL_OW 119
// ComTurnUnit ( Heike , Aviradze ) ;
7537: LD_EXP 21
7541: PPUSH
7542: LD_EXP 25
7546: PPUSH
7547: CALL_OW 119
// Say ( Heike , DH-1-return ) ;
7551: LD_EXP 21
7555: PPUSH
7556: LD_STRING DH-1-return
7558: PPUSH
7559: CALL_OW 88
// Say ( Aviradze , DA-1-return ) ;
7563: LD_EXP 25
7567: PPUSH
7568: LD_STRING DA-1-return
7570: PPUSH
7571: CALL_OW 88
// InGameOff ;
7575: CALL_OW 9
// ChangeMissionObjectives ( ODelta ) ;
7579: LD_STRING ODelta
7581: PPUSH
7582: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
7586: LD_ADDR_VAR 0 1
7590: PUSH
7591: LD_INT 22
7593: PUSH
7594: LD_INT 5
7596: PUSH
7597: EMPTY
7598: LIST
7599: LIST
7600: PPUSH
7601: CALL_OW 69
7605: PUSH
7606: FOR_IN
7607: IFFALSE 7623
// SetSide ( i , 2 ) ;
7609: LD_VAR 0 1
7613: PPUSH
7614: LD_INT 2
7616: PPUSH
7617: CALL_OW 235
7621: GO 7606
7623: POP
7624: POP
// end ;
7625: PPOPN 1
7627: END
// every 0 0$1 trigger attackDeltaAllowed and IsOk ( Markov ) and GetSide ( Delta ) = 1 and IsOk ( Lynch ) and not usAlert do var i , k , tmp ;
7628: LD_EXP 12
7632: PUSH
7633: LD_EXP 28
7637: PPUSH
7638: CALL_OW 302
7642: AND
7643: PUSH
7644: LD_INT 1
7646: PPUSH
7647: CALL_OW 255
7651: PUSH
7652: LD_INT 1
7654: EQUAL
7655: AND
7656: PUSH
7657: LD_EXP 18
7661: PPUSH
7662: CALL_OW 302
7666: AND
7667: PUSH
7668: LD_EXP 9
7672: NOT
7673: AND
7674: IFFALSE 8844
7676: GO 7678
7678: DISABLE
7679: LD_INT 0
7681: PPUSH
7682: PPUSH
7683: PPUSH
// begin trap := 0 ;
7684: LD_ADDR_EXP 15
7688: PUSH
7689: LD_INT 0
7691: ST_TO_ADDR
// wait ( 0 0$15 ) ;
7692: LD_INT 525
7694: PPUSH
7695: CALL_OW 67
// DialogueOn ;
7699: CALL_OW 6
// Say ( Markov , DMar-1-radio ) ;
7703: LD_EXP 28
7707: PPUSH
7708: LD_STRING DMar-1-radio
7710: PPUSH
7711: CALL_OW 88
// Say ( Heike , DH-1-radio ) ;
7715: LD_EXP 21
7719: PPUSH
7720: LD_STRING DH-1-radio
7722: PPUSH
7723: CALL_OW 88
// Say ( Markov , DMar-2-radio ) ;
7727: LD_EXP 28
7731: PPUSH
7732: LD_STRING DMar-2-radio
7734: PPUSH
7735: CALL_OW 88
// Say ( Heike , DH-2-radio ) ;
7739: LD_EXP 21
7743: PPUSH
7744: LD_STRING DH-2-radio
7746: PPUSH
7747: CALL_OW 88
// if IsOk ( Kamil ) or IsOk ( Sophia ) then
7751: LD_EXP 24
7755: PPUSH
7756: CALL_OW 302
7760: PUSH
7761: LD_EXP 27
7765: PPUSH
7766: CALL_OW 302
7770: OR
7771: IFFALSE 8844
// begin case Query ( Q1Trap ) of 1 :
7773: LD_STRING Q1Trap
7775: PPUSH
7776: CALL_OW 97
7780: PUSH
7781: LD_INT 1
7783: DOUBLE
7784: EQUAL
7785: IFTRUE 7789
7787: GO 7983
7789: POP
// begin if IsOk ( Kamil ) then
7790: LD_EXP 24
7794: PPUSH
7795: CALL_OW 302
7799: IFFALSE 7878
// begin Say ( Kamil , DKam-2-radio ) ;
7801: LD_EXP 24
7805: PPUSH
7806: LD_STRING DKam-2-radio
7808: PPUSH
7809: CALL_OW 88
// Say ( Kamil , DKam-3-radio ) ;
7813: LD_EXP 24
7817: PPUSH
7818: LD_STRING DKam-3-radio
7820: PPUSH
7821: CALL_OW 88
// SayRadio ( Lynch , DDelta-3-radio ) ;
7825: LD_EXP 18
7829: PPUSH
7830: LD_STRING DDelta-3-radio
7832: PPUSH
7833: CALL_OW 94
// dwait ( 0 0$01 ) ;
7837: LD_INT 35
7839: PPUSH
7840: CALL_OW 68
// Say ( Heike , DH-3-radio ) ;
7844: LD_EXP 21
7848: PPUSH
7849: LD_STRING DH-3-radio
7851: PPUSH
7852: CALL_OW 88
// Say ( Kamil , DKam-4-radio ) ;
7856: LD_EXP 24
7860: PPUSH
7861: LD_STRING DKam-4-radio
7863: PPUSH
7864: CALL_OW 88
// trap := 1 ;
7868: LD_ADDR_EXP 15
7872: PUSH
7873: LD_INT 1
7875: ST_TO_ADDR
// end else
7876: GO 7977
// begin Say ( Sophia , DS-1-radio ) ;
7878: LD_EXP 27
7882: PPUSH
7883: LD_STRING DS-1-radio
7885: PPUSH
7886: CALL_OW 88
// Say ( Sophia , DS-2-radio ) ;
7890: LD_EXP 27
7894: PPUSH
7895: LD_STRING DS-2-radio
7897: PPUSH
7898: CALL_OW 88
// SayRadio ( Lynch , DDelta-2-radio-s ) ;
7902: LD_EXP 18
7906: PPUSH
7907: LD_STRING DDelta-2-radio-s
7909: PPUSH
7910: CALL_OW 94
// Say ( Sophia , DS-3-radio ) ;
7914: LD_EXP 27
7918: PPUSH
7919: LD_STRING DS-3-radio
7921: PPUSH
7922: CALL_OW 88
// SayRadio ( Lynch , DDelta-3-radio-s ) ;
7926: LD_EXP 18
7930: PPUSH
7931: LD_STRING DDelta-3-radio-s
7933: PPUSH
7934: CALL_OW 94
// Say ( Sophia , DS-4-radio-s ) ;
7938: LD_EXP 27
7942: PPUSH
7943: LD_STRING DS-4-radio-s
7945: PPUSH
7946: CALL_OW 88
// dwait ( 0 0$01 ) ;
7950: LD_INT 35
7952: PPUSH
7953: CALL_OW 68
// Say ( Heike , DH-1-trap ) ;
7957: LD_EXP 21
7961: PPUSH
7962: LD_STRING DH-1-trap
7964: PPUSH
7965: CALL_OW 88
// trap := 0 ;
7969: LD_ADDR_EXP 15
7973: PUSH
7974: LD_INT 0
7976: ST_TO_ADDR
// end ; DialogueOff ;
7977: CALL_OW 7
// end ; 2 :
7981: GO 8001
7983: LD_INT 2
7985: DOUBLE
7986: EQUAL
7987: IFTRUE 7991
7989: GO 8000
7991: POP
// begin DialogueOff ;
7992: CALL_OW 7
// exit ;
7996: GO 8844
// end ; end ;
7998: GO 8001
8000: POP
// if trap = 1 then
8001: LD_EXP 15
8005: PUSH
8006: LD_INT 1
8008: EQUAL
8009: IFFALSE 8415
// begin tmp := [ ] ;
8011: LD_ADDR_VAR 0 3
8015: PUSH
8016: EMPTY
8017: ST_TO_ADDR
// k := 3 ;
8018: LD_ADDR_VAR 0 2
8022: PUSH
8023: LD_INT 3
8025: ST_TO_ADDR
// if usForces < 3 then
8026: LD_EXP 19
8030: PUSH
8031: LD_INT 3
8033: LESS
8034: IFFALSE 8046
// k := usForces ;
8036: LD_ADDR_VAR 0 2
8040: PUSH
8041: LD_EXP 19
8045: ST_TO_ADDR
// for i := 1 to k do
8046: LD_ADDR_VAR 0 1
8050: PUSH
8051: DOUBLE
8052: LD_INT 1
8054: DEC
8055: ST_TO_ADDR
8056: LD_VAR 0 2
8060: PUSH
8061: FOR_TO
8062: IFFALSE 8117
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
8064: LD_ADDR_VAR 0 3
8068: PUSH
8069: LD_VAR 0 3
8073: PPUSH
8074: LD_VAR 0 3
8078: PUSH
8079: LD_INT 1
8081: PLUS
8082: PPUSH
8083: LD_EXP 19
8087: PUSH
8088: LD_INT 1
8090: ARRAY
8091: PPUSH
8092: CALL_OW 1
8096: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
8097: LD_ADDR_EXP 19
8101: PUSH
8102: LD_EXP 19
8106: PPUSH
8107: LD_INT 1
8109: PPUSH
8110: CALL_OW 3
8114: ST_TO_ADDR
// end ;
8115: GO 8061
8117: POP
8118: POP
// usPatrol := tmp ;
8119: LD_ADDR_EXP 14
8123: PUSH
8124: LD_VAR 0 3
8128: ST_TO_ADDR
// for i in tmp do
8129: LD_ADDR_VAR 0 1
8133: PUSH
8134: LD_VAR 0 3
8138: PUSH
8139: FOR_IN
8140: IFFALSE 8270
// begin if IsInUnit ( i ) then
8142: LD_VAR 0 1
8146: PPUSH
8147: CALL_OW 310
8151: IFFALSE 8162
// ComExitBuilding ( i ) ;
8153: LD_VAR 0 1
8157: PPUSH
8158: CALL_OW 122
// AddComAgressiveMove ( i , 63 , 31 ) ;
8162: LD_VAR 0 1
8166: PPUSH
8167: LD_INT 63
8169: PPUSH
8170: LD_INT 31
8172: PPUSH
8173: CALL_OW 174
// AddComWait ( i , 0 0$2 ) ;
8177: LD_VAR 0 1
8181: PPUSH
8182: LD_INT 70
8184: PPUSH
8185: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 43 ) ;
8189: LD_VAR 0 1
8193: PPUSH
8194: LD_INT 103
8196: PPUSH
8197: LD_INT 43
8199: PPUSH
8200: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
8204: LD_VAR 0 1
8208: PPUSH
8209: LD_INT 105
8211: PPUSH
8212: CALL_OW 202
// if Difficulty > 1 then
8216: LD_OWVAR 67
8220: PUSH
8221: LD_INT 1
8223: GREATER
8224: IFFALSE 8241
// AddComAgressiveMove ( i , 114 , 69 ) ;
8226: LD_VAR 0 1
8230: PPUSH
8231: LD_INT 114
8233: PPUSH
8234: LD_INT 69
8236: PPUSH
8237: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
8241: LD_VAR 0 1
8245: PPUSH
8246: LD_INT 105
8248: PPUSH
8249: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
8253: LD_VAR 0 1
8257: PPUSH
8258: LD_INT 42
8260: PPUSH
8261: LD_INT 20
8263: PPUSH
8264: CALL_OW 174
// end ;
8268: GO 8139
8270: POP
8271: POP
// repeat wait ( 0 0$1 ) ;
8272: LD_INT 35
8274: PPUSH
8275: CALL_OW 67
// for i in tmp do
8279: LD_ADDR_VAR 0 1
8283: PUSH
8284: LD_VAR 0 3
8288: PUSH
8289: FOR_IN
8290: IFFALSE 8321
// if IsDead ( i ) then
8292: LD_VAR 0 1
8296: PPUSH
8297: CALL_OW 301
8301: IFFALSE 8319
// tmp := tmp diff i ;
8303: LD_ADDR_VAR 0 3
8307: PUSH
8308: LD_VAR 0 3
8312: PUSH
8313: LD_VAR 0 1
8317: DIFF
8318: ST_TO_ADDR
8319: GO 8289
8321: POP
8322: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
8323: LD_VAR 0 3
8327: NOT
8328: PUSH
8329: LD_VAR 0 3
8333: PPUSH
8334: LD_INT 95
8336: PUSH
8337: LD_INT 7
8339: PUSH
8340: EMPTY
8341: LIST
8342: LIST
8343: PUSH
8344: LD_INT 3
8346: PUSH
8347: LD_INT 60
8349: PUSH
8350: EMPTY
8351: LIST
8352: PUSH
8353: EMPTY
8354: LIST
8355: LIST
8356: PUSH
8357: EMPTY
8358: LIST
8359: LIST
8360: PPUSH
8361: CALL_OW 72
8365: PUSH
8366: LD_VAR 0 3
8370: EQUAL
8371: OR
8372: IFFALSE 8272
// if tmp then
8374: LD_VAR 0 3
8378: IFFALSE 8405
// begin usPatrol := [ ] ;
8380: LD_ADDR_EXP 14
8384: PUSH
8385: EMPTY
8386: ST_TO_ADDR
// usForces := usForces union tmp ;
8387: LD_ADDR_EXP 19
8391: PUSH
8392: LD_EXP 19
8396: PUSH
8397: LD_VAR 0 3
8401: UNION
8402: ST_TO_ADDR
// end else
8403: GO 8413
// trickyMove := true ;
8405: LD_ADDR_EXP 13
8409: PUSH
8410: LD_INT 1
8412: ST_TO_ADDR
// end else
8413: GO 8844
// begin tmp := [ ] ;
8415: LD_ADDR_VAR 0 3
8419: PUSH
8420: EMPTY
8421: ST_TO_ADDR
// k := 4 ;
8422: LD_ADDR_VAR 0 2
8426: PUSH
8427: LD_INT 4
8429: ST_TO_ADDR
// if usForces < 4 then
8430: LD_EXP 19
8434: PUSH
8435: LD_INT 4
8437: LESS
8438: IFFALSE 8450
// k := usForces ;
8440: LD_ADDR_VAR 0 2
8444: PUSH
8445: LD_EXP 19
8449: ST_TO_ADDR
// for i := 1 to k do
8450: LD_ADDR_VAR 0 1
8454: PUSH
8455: DOUBLE
8456: LD_INT 1
8458: DEC
8459: ST_TO_ADDR
8460: LD_VAR 0 2
8464: PUSH
8465: FOR_TO
8466: IFFALSE 8521
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
8468: LD_ADDR_VAR 0 3
8472: PUSH
8473: LD_VAR 0 3
8477: PPUSH
8478: LD_VAR 0 3
8482: PUSH
8483: LD_INT 1
8485: PLUS
8486: PPUSH
8487: LD_EXP 19
8491: PUSH
8492: LD_INT 1
8494: ARRAY
8495: PPUSH
8496: CALL_OW 1
8500: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
8501: LD_ADDR_EXP 19
8505: PUSH
8506: LD_EXP 19
8510: PPUSH
8511: LD_INT 1
8513: PPUSH
8514: CALL_OW 3
8518: ST_TO_ADDR
// end ;
8519: GO 8465
8521: POP
8522: POP
// if Lynch then
8523: LD_EXP 18
8527: IFFALSE 8545
// tmp := tmp ^ Lynch ;
8529: LD_ADDR_VAR 0 3
8533: PUSH
8534: LD_VAR 0 3
8538: PUSH
8539: LD_EXP 18
8543: ADD
8544: ST_TO_ADDR
// usPatrol := tmp ;
8545: LD_ADDR_EXP 14
8549: PUSH
8550: LD_VAR 0 3
8554: ST_TO_ADDR
// for i in tmp do
8555: LD_ADDR_VAR 0 1
8559: PUSH
8560: LD_VAR 0 3
8564: PUSH
8565: FOR_IN
8566: IFFALSE 8659
// begin if IsInUnit ( i ) then
8568: LD_VAR 0 1
8572: PPUSH
8573: CALL_OW 310
8577: IFFALSE 8588
// ComExitBuilding ( i ) ;
8579: LD_VAR 0 1
8583: PPUSH
8584: CALL_OW 122
// AddComAgressiveMove ( i , 69 , 15 ) ;
8588: LD_VAR 0 1
8592: PPUSH
8593: LD_INT 69
8595: PPUSH
8596: LD_INT 15
8598: PPUSH
8599: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
8603: LD_VAR 0 1
8607: PPUSH
8608: LD_INT 700
8610: PPUSH
8611: CALL_OW 202
// AddComAgressiveMove ( i , 55 , 43 ) ;
8615: LD_VAR 0 1
8619: PPUSH
8620: LD_INT 55
8622: PPUSH
8623: LD_INT 43
8625: PPUSH
8626: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
8630: LD_VAR 0 1
8634: PPUSH
8635: LD_INT 700
8637: PPUSH
8638: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
8642: LD_VAR 0 1
8646: PPUSH
8647: LD_INT 42
8649: PPUSH
8650: LD_INT 20
8652: PPUSH
8653: CALL_OW 174
// end ;
8657: GO 8565
8659: POP
8660: POP
// repeat wait ( 0 0$1 ) ;
8661: LD_INT 35
8663: PPUSH
8664: CALL_OW 67
// for i in tmp do
8668: LD_ADDR_VAR 0 1
8672: PUSH
8673: LD_VAR 0 3
8677: PUSH
8678: FOR_IN
8679: IFFALSE 8710
// if IsDead ( i ) then
8681: LD_VAR 0 1
8685: PPUSH
8686: CALL_OW 301
8690: IFFALSE 8708
// tmp := tmp diff i ;
8692: LD_ADDR_VAR 0 3
8696: PUSH
8697: LD_VAR 0 3
8701: PUSH
8702: LD_VAR 0 1
8706: DIFF
8707: ST_TO_ADDR
8708: GO 8678
8710: POP
8711: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
8712: LD_VAR 0 3
8716: NOT
8717: PUSH
8718: LD_VAR 0 3
8722: PPUSH
8723: LD_INT 95
8725: PUSH
8726: LD_INT 7
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: PUSH
8733: LD_INT 3
8735: PUSH
8736: LD_INT 60
8738: PUSH
8739: EMPTY
8740: LIST
8741: PUSH
8742: EMPTY
8743: LIST
8744: LIST
8745: PUSH
8746: EMPTY
8747: LIST
8748: LIST
8749: PPUSH
8750: CALL_OW 72
8754: PUSH
8755: LD_VAR 0 3
8759: EQUAL
8760: OR
8761: IFFALSE 8661
// if not tmp then
8763: LD_VAR 0 3
8767: NOT
8768: IFFALSE 8780
// trickyMove := true else
8770: LD_ADDR_EXP 13
8774: PUSH
8775: LD_INT 1
8777: ST_TO_ADDR
8778: GO 8787
// usPatrol := [ ] ;
8780: LD_ADDR_EXP 14
8784: PUSH
8785: EMPTY
8786: ST_TO_ADDR
// if tmp diff Lynch then
8787: LD_VAR 0 3
8791: PUSH
8792: LD_EXP 18
8796: DIFF
8797: IFFALSE 8821
// usForces := usForces union ( tmp diff Lynch ) ;
8799: LD_ADDR_EXP 19
8803: PUSH
8804: LD_EXP 19
8808: PUSH
8809: LD_VAR 0 3
8813: PUSH
8814: LD_EXP 18
8818: DIFF
8819: UNION
8820: ST_TO_ADDR
// if IsOk ( Lynch ) then
8821: LD_EXP 18
8825: PPUSH
8826: CALL_OW 302
8830: IFFALSE 8844
// ComEnterUnit ( Lynch , Delta ) ;
8832: LD_EXP 18
8836: PPUSH
8837: LD_INT 1
8839: PPUSH
8840: CALL_OW 120
// end ; end ; end ;
8844: PPOPN 3
8846: END
// every 0 0$1 trigger UnitFilter ( usPatrol , [ f_see , 2 ] ) do
8847: LD_EXP 14
8851: PPUSH
8852: LD_INT 101
8854: PUSH
8855: LD_INT 2
8857: PUSH
8858: EMPTY
8859: LIST
8860: LIST
8861: PPUSH
8862: CALL_OW 72
8866: IFFALSE 8999
8868: GO 8870
8870: DISABLE
// begin if not trap then
8871: LD_EXP 15
8875: NOT
8876: IFFALSE 8904
// begin Say ( Heike , DH-2-trap ) ;
8878: LD_EXP 21
8882: PPUSH
8883: LD_STRING DH-2-trap
8885: PPUSH
8886: CALL_OW 88
// Say ( Mike , DM-2-trap ) ;
8890: LD_EXP 23
8894: PPUSH
8895: LD_STRING DM-2-trap
8897: PPUSH
8898: CALL_OW 88
// end else
8902: GO 8916
// begin Say ( Heike , DH-1-trap-a ) ;
8904: LD_EXP 21
8908: PPUSH
8909: LD_STRING DH-1-trap-a
8911: PPUSH
8912: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
8916: LD_INT 35
8918: PPUSH
8919: CALL_OW 67
// until trickyMove ;
8923: LD_EXP 13
8927: IFFALSE 8916
// Say ( Heike , DH-3-trap ) ;
8929: LD_EXP 21
8933: PPUSH
8934: LD_STRING DH-3-trap
8936: PPUSH
8937: CALL_OW 88
// if IsOk ( Givi ) and IsOk ( Kaia ) then
8941: LD_EXP 22
8945: PPUSH
8946: CALL_OW 302
8950: PUSH
8951: LD_EXP 26
8955: PPUSH
8956: CALL_OW 302
8960: AND
8961: IFFALSE 8999
// begin Say ( Givi , DG-3-trap ) ;
8963: LD_EXP 22
8967: PPUSH
8968: LD_STRING DG-3-trap
8970: PPUSH
8971: CALL_OW 88
// Say ( Kaia , DK-3-trap ) ;
8975: LD_EXP 26
8979: PPUSH
8980: LD_STRING DK-3-trap
8982: PPUSH
8983: CALL_OW 88
// Say ( Givi , DG-4-trap ) ;
8987: LD_EXP 22
8991: PPUSH
8992: LD_STRING DG-4-trap
8994: PPUSH
8995: CALL_OW 88
// end ; end ;
8999: END
// every 0 0$1 trigger GetSide ( Delta ) = 2 and attackDeltaAllowed do
9000: LD_INT 1
9002: PPUSH
9003: CALL_OW 255
9007: PUSH
9008: LD_INT 2
9010: EQUAL
9011: PUSH
9012: LD_EXP 12
9016: AND
9017: IFFALSE 9060
9019: GO 9021
9021: DISABLE
// begin if not IsOk ( Kaia ) then
9022: LD_EXP 26
9026: PPUSH
9027: CALL_OW 302
9031: NOT
9032: IFFALSE 9036
// exit ;
9034: GO 9060
// Say ( Kaia , DK-1-capture ) ;
9036: LD_EXP 26
9040: PPUSH
9041: LD_STRING DK-1-capture
9043: PPUSH
9044: CALL_OW 88
// Say ( Heike , DH-1-capture ) ;
9048: LD_EXP 21
9052: PPUSH
9053: LD_STRING DH-1-capture
9055: PPUSH
9056: CALL_OW 88
// end ;
9060: END
// every 0 0$1 trigger GetSide ( usLab ) = 2 and attackDeltaAllowed do
9061: LD_INT 3
9063: PPUSH
9064: CALL_OW 255
9068: PUSH
9069: LD_INT 2
9071: EQUAL
9072: PUSH
9073: LD_EXP 12
9077: AND
9078: IFFALSE 9110
9080: GO 9082
9082: DISABLE
// begin DialogueOn ;
9083: CALL_OW 6
// Say ( Aviradze , DA-1-capture ) ;
9087: LD_EXP 25
9091: PPUSH
9092: LD_STRING DA-1-capture
9094: PPUSH
9095: CALL_OW 88
// DialogueOff ;
9099: CALL_OW 7
// ChangeMissionObjectives ( OTame ) ;
9103: LD_STRING OTame
9105: PPUSH
9106: CALL_OW 337
// end ;
9110: END
// every 0 0$1 trigger GetTech ( tech_ApeLang , 2 ) = state_researched and attackDeltaAllowed do
9111: LD_INT 1
9113: PPUSH
9114: LD_INT 2
9116: PPUSH
9117: CALL_OW 321
9121: PUSH
9122: LD_INT 2
9124: EQUAL
9125: PUSH
9126: LD_EXP 12
9130: AND
9131: IFFALSE 9204
9133: GO 9135
9135: DISABLE
// begin DialogueOn ;
9136: CALL_OW 6
// Say ( Aviradze , DA-1-ape ) ;
9140: LD_EXP 25
9144: PPUSH
9145: LD_STRING DA-1-ape
9147: PPUSH
9148: CALL_OW 88
// Say ( Heike , DH-1-ape ) ;
9152: LD_EXP 21
9156: PPUSH
9157: LD_STRING DH-1-ape
9159: PPUSH
9160: CALL_OW 88
// Say ( Aviradze , DA-2-ape ) ;
9164: LD_EXP 25
9168: PPUSH
9169: LD_STRING DA-2-ape
9171: PPUSH
9172: CALL_OW 88
// Say ( Aviradze , DA-3-ape ) ;
9176: LD_EXP 25
9180: PPUSH
9181: LD_STRING DA-3-ape
9183: PPUSH
9184: CALL_OW 88
// Say ( Heike , DH-3-ape ) ;
9188: LD_EXP 21
9192: PPUSH
9193: LD_STRING DH-3-ape
9195: PPUSH
9196: CALL_OW 88
// DialogueOff ;
9200: CALL_OW 7
// end ;
9204: END
// every 0 0$5 trigger lostCounter >= [ 3 , 2 , 2 ] [ Difficulty ] do
9205: LD_EXP 16
9209: PUSH
9210: LD_INT 3
9212: PUSH
9213: LD_INT 2
9215: PUSH
9216: LD_INT 2
9218: PUSH
9219: EMPTY
9220: LIST
9221: LIST
9222: LIST
9223: PUSH
9224: LD_OWVAR 67
9228: ARRAY
9229: GREATEREQUAL
9230: IFFALSE 9274
9232: GO 9234
9234: DISABLE
// begin DialogueOn ;
9235: CALL_OW 6
// Say ( Aviradze , DA-1-failure ) ;
9239: LD_EXP 25
9243: PPUSH
9244: LD_STRING DA-1-failure
9246: PPUSH
9247: CALL_OW 88
// Say ( Aviradze , DA-2-failure ) ;
9251: LD_EXP 25
9255: PPUSH
9256: LD_STRING DA-2-failure
9258: PPUSH
9259: CALL_OW 88
// YouLost ( Failure ) ;
9263: LD_STRING Failure
9265: PPUSH
9266: CALL_OW 104
// DialogueOff ;
9270: CALL_OW 7
// end ;
9274: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) and IsOk ( Aviradze ) and GetSide ( Aviradze ) = 2 do var tmp ;
9275: LD_INT 22
9277: PUSH
9278: LD_INT 2
9280: PUSH
9281: EMPTY
9282: LIST
9283: LIST
9284: PUSH
9285: LD_INT 23
9287: PUSH
9288: LD_INT 0
9290: PUSH
9291: EMPTY
9292: LIST
9293: LIST
9294: PUSH
9295: EMPTY
9296: LIST
9297: LIST
9298: PPUSH
9299: CALL_OW 69
9303: PUSH
9304: LD_EXP 25
9308: PPUSH
9309: CALL_OW 302
9313: AND
9314: PUSH
9315: LD_EXP 25
9319: PPUSH
9320: CALL_OW 255
9324: PUSH
9325: LD_INT 2
9327: EQUAL
9328: AND
9329: IFFALSE 10079
9331: GO 9333
9333: DISABLE
9334: LD_INT 0
9336: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) [ 1 ] ;
9337: LD_ADDR_VAR 0 1
9341: PUSH
9342: LD_INT 22
9344: PUSH
9345: LD_INT 2
9347: PUSH
9348: EMPTY
9349: LIST
9350: LIST
9351: PUSH
9352: LD_INT 23
9354: PUSH
9355: LD_INT 0
9357: PUSH
9358: EMPTY
9359: LIST
9360: LIST
9361: PUSH
9362: EMPTY
9363: LIST
9364: LIST
9365: PPUSH
9366: CALL_OW 69
9370: PUSH
9371: LD_INT 1
9373: ARRAY
9374: ST_TO_ADDR
// InGameOn ;
9375: CALL_OW 8
// CenterNowOnUnits ( tmp ) ;
9379: LD_VAR 0 1
9383: PPUSH
9384: CALL_OW 87
// ComMoveUnit ( tmp , Aviradze ) ;
9388: LD_VAR 0 1
9392: PPUSH
9393: LD_EXP 25
9397: PPUSH
9398: CALL_OW 112
// ComTurnUnit ( Aviradze , tmp ) ;
9402: LD_EXP 25
9406: PPUSH
9407: LD_VAR 0 1
9411: PPUSH
9412: CALL_OW 119
// wait ( 0 0$1 ) ;
9416: LD_INT 35
9418: PPUSH
9419: CALL_OW 67
// Say ( Aviradze , DA-1-tame-a ) ;
9423: LD_EXP 25
9427: PPUSH
9428: LD_STRING DA-1-tame-a
9430: PPUSH
9431: CALL_OW 88
// if IsOk ( Mike ) then
9435: LD_EXP 23
9439: PPUSH
9440: CALL_OW 302
9444: IFFALSE 9482
// begin Say ( Mike , DM-1-tame-a ) ;
9446: LD_EXP 23
9450: PPUSH
9451: LD_STRING DM-1-tame-a
9453: PPUSH
9454: CALL_OW 88
// Say ( Sophia , DS-1-tame-a ) ;
9458: LD_EXP 27
9462: PPUSH
9463: LD_STRING DS-1-tame-a
9465: PPUSH
9466: CALL_OW 88
// Say ( Mike , DM-2-tame-a ) ;
9470: LD_EXP 23
9474: PPUSH
9475: LD_STRING DM-2-tame-a
9477: PPUSH
9478: CALL_OW 88
// end ; wait ( 0 0$3 ) ;
9482: LD_INT 105
9484: PPUSH
9485: CALL_OW 67
// PrepareFarmer ;
9489: CALL 10738 0 0
// CenterOnUnits ( Farmer ) ;
9493: LD_EXP 29
9497: PPUSH
9498: CALL_OW 85
// ComMoveXY ( Farmer , 105 , 59 ) ;
9502: LD_EXP 29
9506: PPUSH
9507: LD_INT 105
9509: PPUSH
9510: LD_INT 59
9512: PPUSH
9513: CALL_OW 111
// AddComHold ( Farmer ) ;
9517: LD_EXP 29
9521: PPUSH
9522: CALL_OW 200
// SayRadio ( Farmer , DF-1-end ) ;
9526: LD_EXP 29
9530: PPUSH
9531: LD_STRING DF-1-end
9533: PPUSH
9534: CALL_OW 94
// Say ( Aviradze , DA-1-end ) ;
9538: LD_EXP 25
9542: PPUSH
9543: LD_STRING DA-1-end
9545: PPUSH
9546: CALL_OW 88
// SayRadio ( Farmer , DF-2-end ) ;
9550: LD_EXP 29
9554: PPUSH
9555: LD_STRING DF-2-end
9557: PPUSH
9558: CALL_OW 94
// Say ( Aviradze , DA-2-end ) ;
9562: LD_EXP 25
9566: PPUSH
9567: LD_STRING DA-2-end
9569: PPUSH
9570: CALL_OW 88
// SayRadio ( Farmer , DF-3-end ) ;
9574: LD_EXP 29
9578: PPUSH
9579: LD_STRING DF-3-end
9581: PPUSH
9582: CALL_OW 94
// Say ( Heike , DH-3-end ) ;
9586: LD_EXP 21
9590: PPUSH
9591: LD_STRING DH-3-end
9593: PPUSH
9594: CALL_OW 88
// SayRadio ( Farmer , DF-4-end ) ;
9598: LD_EXP 29
9602: PPUSH
9603: LD_STRING DF-4-end
9605: PPUSH
9606: CALL_OW 94
// if tick <= [ 20 20$00 , 15 15$00 , 12 12$00 ] [ Difficulty ] then
9610: LD_OWVAR 1
9614: PUSH
9615: LD_INT 42000
9617: PUSH
9618: LD_INT 31500
9620: PUSH
9621: LD_INT 25200
9623: PUSH
9624: EMPTY
9625: LIST
9626: LIST
9627: LIST
9628: PUSH
9629: LD_OWVAR 67
9633: ARRAY
9634: LESSEQUAL
9635: IFFALSE 9649
// AddMedal ( med1 , 1 ) else
9637: LD_STRING med1
9639: PPUSH
9640: LD_INT 1
9642: PPUSH
9643: CALL_OW 101
9647: GO 9660
// AddMedal ( med1 , - 1 ) ;
9649: LD_STRING med1
9651: PPUSH
9652: LD_INT 1
9654: NEG
9655: PPUSH
9656: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) = 0 then
9660: LD_INT 22
9662: PUSH
9663: LD_INT 1
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: PUSH
9670: LD_INT 25
9672: PUSH
9673: LD_INT 4
9675: PUSH
9676: EMPTY
9677: LIST
9678: LIST
9679: PUSH
9680: EMPTY
9681: LIST
9682: LIST
9683: PPUSH
9684: CALL_OW 69
9688: PUSH
9689: LD_INT 0
9691: EQUAL
9692: IFFALSE 9706
// AddMedal ( med2 , 1 ) else
9694: LD_STRING med2
9696: PPUSH
9697: LD_INT 1
9699: PPUSH
9700: CALL_OW 101
9704: GO 9717
// AddMedal ( med2 , - 1 ) ;
9706: LD_STRING med2
9708: PPUSH
9709: LD_INT 1
9711: NEG
9712: PPUSH
9713: CALL_OW 101
// if trickyMove then
9717: LD_EXP 13
9721: IFFALSE 9735
// AddMedal ( med3 , 1 ) else
9723: LD_STRING med3
9725: PPUSH
9726: LD_INT 1
9728: PPUSH
9729: CALL_OW 101
9733: GO 9746
// AddMedal ( med3 , - 1 ) ;
9735: LD_STRING med3
9737: PPUSH
9738: LD_INT 1
9740: NEG
9741: PPUSH
9742: CALL_OW 101
// GiveMedals ( MAIN ) ;
9746: LD_STRING MAIN
9748: PPUSH
9749: CALL_OW 102
// SaveCharacters ( tmp , 02_ape ) ;
9753: LD_VAR 0 1
9757: PPUSH
9758: LD_STRING 02_ape
9760: PPUSH
9761: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
9765: LD_ADDR_VAR 0 1
9769: PUSH
9770: LD_INT 22
9772: PUSH
9773: LD_INT 2
9775: PUSH
9776: EMPTY
9777: LIST
9778: LIST
9779: PUSH
9780: LD_INT 23
9782: PUSH
9783: LD_INT 2
9785: PUSH
9786: EMPTY
9787: LIST
9788: LIST
9789: PUSH
9790: LD_INT 21
9792: PUSH
9793: LD_INT 1
9795: PUSH
9796: EMPTY
9797: LIST
9798: LIST
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: LIST
9804: PPUSH
9805: CALL_OW 69
9809: ST_TO_ADDR
// RewardPeople ( tmp ) ;
9810: LD_VAR 0 1
9814: PPUSH
9815: CALL_OW 43
// SaveCharacters ( Heike , 02_Heike ) ;
9819: LD_EXP 21
9823: PPUSH
9824: LD_STRING 02_Heike
9826: PPUSH
9827: CALL_OW 38
// SaveCharacters ( Aviradze , 02_Aviradze ) ;
9831: LD_EXP 25
9835: PPUSH
9836: LD_STRING 02_Aviradze
9838: PPUSH
9839: CALL_OW 38
// if Givi then
9843: LD_EXP 22
9847: IFFALSE 9861
// SaveCharacters ( Givi , 02_Givi ) ;
9849: LD_EXP 22
9853: PPUSH
9854: LD_STRING 02_Givi
9856: PPUSH
9857: CALL_OW 38
// if Mike then
9861: LD_EXP 23
9865: IFFALSE 9879
// SaveCharacters ( Mike , 02_Mike ) ;
9867: LD_EXP 23
9871: PPUSH
9872: LD_STRING 02_Mike
9874: PPUSH
9875: CALL_OW 38
// if Kamil then
9879: LD_EXP 24
9883: IFFALSE 9897
// SaveCharacters ( Kamil , 02_Kamil ) ;
9885: LD_EXP 24
9889: PPUSH
9890: LD_STRING 02_Kamil
9892: PPUSH
9893: CALL_OW 38
// if Kaia then
9897: LD_EXP 26
9901: IFFALSE 9915
// SaveCharacters ( Kaia , 02_Kaia ) ;
9903: LD_EXP 26
9907: PPUSH
9908: LD_STRING 02_Kaia
9910: PPUSH
9911: CALL_OW 38
// if Sophia then
9915: LD_EXP 27
9919: IFFALSE 9933
// SaveCharacters ( Sophia , 02_Sophia ) ;
9921: LD_EXP 27
9925: PPUSH
9926: LD_STRING 02_Sophia
9928: PPUSH
9929: CALL_OW 38
// if Markov then
9933: LD_EXP 28
9937: IFFALSE 9951
// SaveCharacters ( Markov , 02_Markov ) ;
9939: LD_EXP 28
9943: PPUSH
9944: LD_STRING 02_Markov
9946: PPUSH
9947: CALL_OW 38
// if tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] then
9951: LD_VAR 0 1
9955: PUSH
9956: LD_EXP 21
9960: PUSH
9961: LD_EXP 25
9965: PUSH
9966: LD_EXP 22
9970: PUSH
9971: LD_EXP 23
9975: PUSH
9976: LD_EXP 24
9980: PUSH
9981: LD_EXP 27
9985: PUSH
9986: LD_EXP 26
9990: PUSH
9991: LD_EXP 28
9995: PUSH
9996: EMPTY
9997: LIST
9998: LIST
9999: LIST
10000: LIST
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: DIFF
10006: IFFALSE 10071
// SaveCharacters ( tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] , 02_others ) ;
10008: LD_VAR 0 1
10012: PUSH
10013: LD_EXP 21
10017: PUSH
10018: LD_EXP 25
10022: PUSH
10023: LD_EXP 22
10027: PUSH
10028: LD_EXP 23
10032: PUSH
10033: LD_EXP 24
10037: PUSH
10038: LD_EXP 27
10042: PUSH
10043: LD_EXP 26
10047: PUSH
10048: LD_EXP 28
10052: PUSH
10053: EMPTY
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: DIFF
10063: PPUSH
10064: LD_STRING 02_others
10066: PPUSH
10067: CALL_OW 38
// YouWin ;
10071: CALL_OW 103
// InGameOff ;
10075: CALL_OW 9
// end ;
10079: PPOPN 1
10081: END
// every 0 0$1 trigger tick > timeUntilFarmer and aviradzeSpotted do
10082: LD_OWVAR 1
10086: PUSH
10087: LD_EXP 11
10091: GREATER
10092: PUSH
10093: LD_EXP 4
10097: AND
10098: IFFALSE 10138
10100: GO 10102
10102: DISABLE
// begin InGameOn ;
10103: CALL_OW 8
// PrepareFarmer ;
10107: CALL 10738 0 0
// CenterNowOnUnits ( Farmer ) ;
10111: LD_EXP 29
10115: PPUSH
10116: CALL_OW 87
// wait ( 0 0$2 ) ;
10120: LD_INT 70
10122: PPUSH
10123: CALL_OW 67
// YouLost ( Farmer ) ;
10127: LD_STRING Farmer
10129: PPUSH
10130: CALL_OW 104
// InGameOff ;
10134: CALL_OW 9
// end ; end_of_file
10138: END
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer ; export function PrepareArabian ; var un , veh ; begin
10139: LD_INT 0
10141: PPUSH
10142: PPUSH
10143: PPUSH
// uc_side := 2 ;
10144: LD_ADDR_OWVAR 20
10148: PUSH
10149: LD_INT 2
10151: ST_TO_ADDR
// uc_nation := 2 ;
10152: LD_ADDR_OWVAR 21
10156: PUSH
10157: LD_INT 2
10159: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
10160: LD_ADDR_EXP 21
10164: PUSH
10165: LD_STRING Heike
10167: PPUSH
10168: LD_EXP 1
10172: NOT
10173: PPUSH
10174: LD_EXP 2
10178: PPUSH
10179: CALL 221 0 3
10183: ST_TO_ADDR
// PlaceUnitXY ( Heike , 83 , 72 , false ) ;
10184: LD_EXP 21
10188: PPUSH
10189: LD_INT 83
10191: PPUSH
10192: LD_INT 72
10194: PPUSH
10195: LD_INT 0
10197: PPUSH
10198: CALL_OW 48
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
10202: LD_ADDR_EXP 22
10206: PUSH
10207: LD_STRING Givi
10209: PPUSH
10210: LD_EXP 1
10214: NOT
10215: PPUSH
10216: LD_EXP 2
10220: PPUSH
10221: CALL 221 0 3
10225: ST_TO_ADDR
// if Givi then
10226: LD_EXP 22
10230: IFFALSE 10250
// PlaceUnitXY ( Givi , 87 , 76 , false ) ;
10232: LD_EXP 22
10236: PPUSH
10237: LD_INT 87
10239: PPUSH
10240: LD_INT 76
10242: PPUSH
10243: LD_INT 0
10245: PPUSH
10246: CALL_OW 48
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
10250: LD_ADDR_EXP 23
10254: PUSH
10255: LD_STRING Mike
10257: PPUSH
10258: LD_EXP 1
10262: NOT
10263: PPUSH
10264: LD_EXP 2
10268: PPUSH
10269: CALL 221 0 3
10273: ST_TO_ADDR
// if Mike then
10274: LD_EXP 23
10278: IFFALSE 10298
// PlaceUnitXY ( Mike , 84 , 76 , false ) ;
10280: LD_EXP 23
10284: PPUSH
10285: LD_INT 84
10287: PPUSH
10288: LD_INT 76
10290: PPUSH
10291: LD_INT 0
10293: PPUSH
10294: CALL_OW 48
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
10298: LD_ADDR_EXP 24
10302: PUSH
10303: LD_STRING Kamil
10305: PPUSH
10306: LD_EXP 1
10310: NOT
10311: PPUSH
10312: LD_EXP 2
10316: PPUSH
10317: CALL 221 0 3
10321: ST_TO_ADDR
// if Kamil then
10322: LD_EXP 24
10326: IFFALSE 10346
// PlaceUnitXY ( Kamil , 85 , 78 , false ) ;
10328: LD_EXP 24
10332: PPUSH
10333: LD_INT 85
10335: PPUSH
10336: LD_INT 78
10338: PPUSH
10339: LD_INT 0
10341: PPUSH
10342: CALL_OW 48
// uc_side := 5 ;
10346: LD_ADDR_OWVAR 20
10350: PUSH
10351: LD_INT 5
10353: ST_TO_ADDR
// uc_nation := 2 ;
10354: LD_ADDR_OWVAR 21
10358: PUSH
10359: LD_INT 2
10361: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , false ,  ) ;
10362: LD_ADDR_EXP 25
10366: PUSH
10367: LD_STRING Aviradze
10369: PPUSH
10370: LD_INT 0
10372: PPUSH
10373: LD_STRING 
10375: PPUSH
10376: CALL 221 0 3
10380: ST_TO_ADDR
// PlaceUnitXY ( Aviradze , 106 , 38 , false ) ;
10381: LD_EXP 25
10385: PPUSH
10386: LD_INT 106
10388: PPUSH
10389: LD_INT 38
10391: PPUSH
10392: LD_INT 0
10394: PPUSH
10395: CALL_OW 48
// ComTurnXY ( Aviradze , 103 , 38 ) ;
10399: LD_EXP 25
10403: PPUSH
10404: LD_INT 103
10406: PPUSH
10407: LD_INT 38
10409: PPUSH
10410: CALL_OW 118
// Kaia := PrepareUnit ( Kaia , false ,  ) ;
10414: LD_ADDR_EXP 26
10418: PUSH
10419: LD_STRING Kaia
10421: PPUSH
10422: LD_INT 0
10424: PPUSH
10425: LD_STRING 
10427: PPUSH
10428: CALL 221 0 3
10432: ST_TO_ADDR
// PlaceUnitXY ( Kaia , 100 , 34 , false ) ;
10433: LD_EXP 26
10437: PPUSH
10438: LD_INT 100
10440: PPUSH
10441: LD_INT 34
10443: PPUSH
10444: LD_INT 0
10446: PPUSH
10447: CALL_OW 48
// ComTurnXY ( Kaia , 100 , 39 ) ;
10451: LD_EXP 26
10455: PPUSH
10456: LD_INT 100
10458: PPUSH
10459: LD_INT 39
10461: PPUSH
10462: CALL_OW 118
// Sophia := PrepareUnit ( Sophia , false ,  ) ;
10466: LD_ADDR_EXP 27
10470: PUSH
10471: LD_STRING Sophia
10473: PPUSH
10474: LD_INT 0
10476: PPUSH
10477: LD_STRING 
10479: PPUSH
10480: CALL 221 0 3
10484: ST_TO_ADDR
// PlaceUnitXY ( Sophia , 109 , 50 , false ) ;
10485: LD_EXP 27
10489: PPUSH
10490: LD_INT 109
10492: PPUSH
10493: LD_INT 50
10495: PPUSH
10496: LD_INT 0
10498: PPUSH
10499: CALL_OW 48
// ComTurnXY ( Sophia , 100 , 39 ) ;
10503: LD_EXP 27
10507: PPUSH
10508: LD_INT 100
10510: PPUSH
10511: LD_INT 39
10513: PPUSH
10514: CALL_OW 118
// Markov := PrepareUnit ( Markov , false ,  ) ;
10518: LD_ADDR_EXP 28
10522: PUSH
10523: LD_STRING Markov
10525: PPUSH
10526: LD_INT 0
10528: PPUSH
10529: LD_STRING 
10531: PPUSH
10532: CALL 221 0 3
10536: ST_TO_ADDR
// PrepareTank ( 5 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , [ 90 , 70 , 60 ] [ Difficulty ] ) ;
10537: LD_INT 5
10539: PPUSH
10540: LD_INT 3
10542: PPUSH
10543: LD_INT 21
10545: PPUSH
10546: LD_INT 1
10548: PPUSH
10549: LD_INT 1
10551: PPUSH
10552: LD_INT 42
10554: PPUSH
10555: LD_INT 90
10557: PUSH
10558: LD_INT 70
10560: PUSH
10561: LD_INT 60
10563: PUSH
10564: EMPTY
10565: LIST
10566: LIST
10567: LIST
10568: PUSH
10569: LD_OWVAR 67
10573: ARRAY
10574: PPUSH
10575: CALL 284 0 7
// veh := CreateVehicle ;
10579: LD_ADDR_VAR 0 3
10583: PUSH
10584: CALL_OW 45
10588: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
10589: LD_VAR 0 3
10593: PPUSH
10594: LD_INT 4
10596: PPUSH
10597: CALL_OW 233
// PlaceUnitXY ( veh , 109 , 38 , false ) ;
10601: LD_VAR 0 3
10605: PPUSH
10606: LD_INT 109
10608: PPUSH
10609: LD_INT 38
10611: PPUSH
10612: LD_INT 0
10614: PPUSH
10615: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
10619: LD_EXP 28
10623: PPUSH
10624: LD_VAR 0 3
10628: PPUSH
10629: CALL_OW 52
// ComTurnUnit ( Kaia , Aviradze ) ;
10633: LD_EXP 26
10637: PPUSH
10638: LD_EXP 25
10642: PPUSH
10643: CALL_OW 119
// ComTurnUnit ( Aviradze , Kaia ) ;
10647: LD_EXP 25
10651: PPUSH
10652: LD_EXP 26
10656: PPUSH
10657: CALL_OW 119
// if not Givi or not Mike then
10661: LD_EXP 22
10665: NOT
10666: PUSH
10667: LD_EXP 23
10671: NOT
10672: OR
10673: IFFALSE 10733
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
10675: LD_INT 1
10677: PPUSH
10678: LD_INT 1
10680: PPUSH
10681: LD_INT 1
10683: PPUSH
10684: CALL_OW 380
// un := CreateHuman ;
10688: LD_ADDR_VAR 0 2
10692: PUSH
10693: CALL_OW 44
10697: ST_TO_ADDR
// PlaceUnitXYR ( un , 112 , 40 , 3 , false ) ;
10698: LD_VAR 0 2
10702: PPUSH
10703: LD_INT 112
10705: PPUSH
10706: LD_INT 40
10708: PPUSH
10709: LD_INT 3
10711: PPUSH
10712: LD_INT 0
10714: PPUSH
10715: CALL_OW 50
// ComTurnUnit ( un , Aviradze ) ;
10719: LD_VAR 0 2
10723: PPUSH
10724: LD_EXP 25
10728: PPUSH
10729: CALL_OW 119
// end ; end ;
10733: LD_VAR 0 1
10737: RET
// export function PrepareFarmer ; var i ; begin
10738: LD_INT 0
10740: PPUSH
10741: PPUSH
// uc_side := 5 ;
10742: LD_ADDR_OWVAR 20
10746: PUSH
10747: LD_INT 5
10749: ST_TO_ADDR
// uc_nation := 2 ;
10750: LD_ADDR_OWVAR 21
10754: PUSH
10755: LD_INT 2
10757: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
10758: LD_ADDR_EXP 29
10762: PUSH
10763: LD_STRING Farmer
10765: PPUSH
10766: LD_INT 0
10768: PPUSH
10769: LD_STRING 
10771: PPUSH
10772: CALL 221 0 3
10776: ST_TO_ADDR
// PlaceUnitXY ( Farmer , 106 , 62 , false ) ;
10777: LD_EXP 29
10781: PPUSH
10782: LD_INT 106
10784: PPUSH
10785: LD_INT 62
10787: PPUSH
10788: LD_INT 0
10790: PPUSH
10791: CALL_OW 48
// for i := 1 to 5 do
10795: LD_ADDR_VAR 0 2
10799: PUSH
10800: DOUBLE
10801: LD_INT 1
10803: DEC
10804: ST_TO_ADDR
10805: LD_INT 5
10807: PUSH
10808: FOR_TO
10809: IFFALSE 10847
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
10811: LD_INT 1
10813: PPUSH
10814: LD_INT 1
10816: PPUSH
10817: LD_INT 1
10819: PPUSH
10820: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 105 , 64 , 3 , false ) ;
10824: CALL_OW 44
10828: PPUSH
10829: LD_INT 105
10831: PPUSH
10832: LD_INT 64
10834: PPUSH
10835: LD_INT 3
10837: PPUSH
10838: LD_INT 0
10840: PPUSH
10841: CALL_OW 50
// end ;
10845: GO 10808
10847: POP
10848: POP
// end ; end_of_file
10849: LD_VAR 0 1
10853: RET
// every 2 2$20 + 0 0$10 do
10854: GO 10856
10856: DISABLE
// begin enable ;
10857: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , forest , true ) ;
10858: LD_INT 1
10860: PPUSH
10861: LD_INT 5
10863: PPUSH
10864: CALL_OW 12
10868: PPUSH
10869: LD_INT 1
10871: PPUSH
10872: LD_INT 1
10874: PPUSH
10875: CALL_OW 55
// end ; end_of_file
10879: END
// on UnitDestroyed ( un ) do begin if un = Heike then
10880: LD_VAR 0 1
10884: PUSH
10885: LD_EXP 21
10889: EQUAL
10890: IFFALSE 10899
// YouLost ( Heike ) ;
10892: LD_STRING Heike
10894: PPUSH
10895: CALL_OW 104
// if un = Aviradze then
10899: LD_VAR 0 1
10903: PUSH
10904: LD_EXP 25
10908: EQUAL
10909: IFFALSE 10918
// YouLost ( Aviradze ) ;
10911: LD_STRING Aviradze
10913: PPUSH
10914: CALL_OW 104
// if un = usLab then
10918: LD_VAR 0 1
10922: PUSH
10923: LD_INT 3
10925: EQUAL
10926: IFFALSE 10935
// YouLost ( Lab ) ;
10928: LD_STRING Lab
10930: PPUSH
10931: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) diff [ Heike , Aviradze ] and aviradzeSpotted then
10935: LD_VAR 0 1
10939: PUSH
10940: LD_INT 22
10942: PUSH
10943: LD_INT 2
10945: PUSH
10946: EMPTY
10947: LIST
10948: LIST
10949: PUSH
10950: LD_INT 21
10952: PUSH
10953: LD_INT 1
10955: PUSH
10956: EMPTY
10957: LIST
10958: LIST
10959: PUSH
10960: LD_INT 23
10962: PUSH
10963: LD_INT 2
10965: PUSH
10966: EMPTY
10967: LIST
10968: LIST
10969: PUSH
10970: EMPTY
10971: LIST
10972: LIST
10973: LIST
10974: PPUSH
10975: CALL_OW 69
10979: PUSH
10980: LD_EXP 21
10984: PUSH
10985: LD_EXP 25
10989: PUSH
10990: EMPTY
10991: LIST
10992: LIST
10993: DIFF
10994: IN
10995: PUSH
10996: LD_EXP 4
11000: AND
11001: IFFALSE 11017
// lostCounter := lostCounter + 1 ;
11003: LD_ADDR_EXP 16
11007: PUSH
11008: LD_EXP 16
11012: PUSH
11013: LD_INT 1
11015: PLUS
11016: ST_TO_ADDR
// end ;
11017: PPOPN 1
11019: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in usSci and killerSide = 2 then
11020: LD_VAR 0 1
11024: PUSH
11025: LD_EXP 20
11029: IN
11030: PUSH
11031: LD_VAR 0 2
11035: PUSH
11036: LD_INT 2
11038: EQUAL
11039: AND
11040: IFFALSE 11072
// begin usSci := usSci diff un ;
11042: LD_ADDR_EXP 20
11046: PUSH
11047: LD_EXP 20
11051: PUSH
11052: LD_VAR 0 1
11056: DIFF
11057: ST_TO_ADDR
// sciCounterKill := sciCounterKill + 1 ;
11058: LD_ADDR_EXP 8
11062: PUSH
11063: LD_EXP 8
11067: PUSH
11068: LD_INT 1
11070: PLUS
11071: ST_TO_ADDR
// end ; end ;
11072: PPOPN 3
11074: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
11075: LD_VAR 0 1
11079: PUSH
11080: LD_INT 2
11082: EQUAL
11083: PUSH
11084: LD_VAR 0 2
11088: PUSH
11089: LD_INT 5
11091: EQUAL
11092: AND
11093: IFFALSE 11102
// YouLost ( FriendlyFire ) ;
11095: LD_STRING FriendlyFire
11097: PPUSH
11098: CALL_OW 104
// end ; end_of_file
11102: PPOPN 2
11104: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
11105: GO 11107
11107: DISABLE
// begin ru_radar := 98 ;
11108: LD_ADDR_EXP 30
11112: PUSH
11113: LD_INT 98
11115: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
11116: LD_ADDR_EXP 31
11120: PUSH
11121: LD_INT 89
11123: ST_TO_ADDR
// us_hack := 99 ;
11124: LD_ADDR_EXP 32
11128: PUSH
11129: LD_INT 99
11131: ST_TO_ADDR
// us_artillery := 97 ;
11132: LD_ADDR_EXP 33
11136: PUSH
11137: LD_INT 97
11139: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11140: LD_ADDR_EXP 34
11144: PUSH
11145: LD_INT 91
11147: ST_TO_ADDR
// tech_Artillery := 80 ;
11148: LD_ADDR_EXP 35
11152: PUSH
11153: LD_INT 80
11155: ST_TO_ADDR
// tech_RadMat := 81 ;
11156: LD_ADDR_EXP 36
11160: PUSH
11161: LD_INT 81
11163: ST_TO_ADDR
// tech_BasicTools := 82 ;
11164: LD_ADDR_EXP 37
11168: PUSH
11169: LD_INT 82
11171: ST_TO_ADDR
// tech_Cargo := 83 ;
11172: LD_ADDR_EXP 38
11176: PUSH
11177: LD_INT 83
11179: ST_TO_ADDR
// tech_Track := 84 ;
11180: LD_ADDR_EXP 39
11184: PUSH
11185: LD_INT 84
11187: ST_TO_ADDR
// tech_Crane := 85 ;
11188: LD_ADDR_EXP 40
11192: PUSH
11193: LD_INT 85
11195: ST_TO_ADDR
// tech_Bulldozer := 86 ;
11196: LD_ADDR_EXP 41
11200: PUSH
11201: LD_INT 86
11203: ST_TO_ADDR
// tech_Hovercraft := 87 ;
11204: LD_ADDR_EXP 42
11208: PUSH
11209: LD_INT 87
11211: ST_TO_ADDR
// end ; end_of_file end_of_file
11212: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
11213: GO 11215
11215: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
11216: LD_STRING initStreamRollete();
11218: PPUSH
11219: CALL_OW 559
// InitStreamMode ;
11223: CALL 11232 0 0
// DefineStreamItems ( ) ;
11227: CALL 11672 0 0
// end ;
11231: END
// function InitStreamMode ; begin
11232: LD_INT 0
11234: PPUSH
// streamModeActive := false ;
11235: LD_ADDR_EXP 43
11239: PUSH
11240: LD_INT 0
11242: ST_TO_ADDR
// normalCounter := 36 ;
11243: LD_ADDR_EXP 44
11247: PUSH
11248: LD_INT 36
11250: ST_TO_ADDR
// hardcoreCounter := 16 ;
11251: LD_ADDR_EXP 45
11255: PUSH
11256: LD_INT 16
11258: ST_TO_ADDR
// sRocket := false ;
11259: LD_ADDR_EXP 48
11263: PUSH
11264: LD_INT 0
11266: ST_TO_ADDR
// sSpeed := false ;
11267: LD_ADDR_EXP 47
11271: PUSH
11272: LD_INT 0
11274: ST_TO_ADDR
// sEngine := false ;
11275: LD_ADDR_EXP 49
11279: PUSH
11280: LD_INT 0
11282: ST_TO_ADDR
// sSpec := false ;
11283: LD_ADDR_EXP 46
11287: PUSH
11288: LD_INT 0
11290: ST_TO_ADDR
// sLevel := false ;
11291: LD_ADDR_EXP 50
11295: PUSH
11296: LD_INT 0
11298: ST_TO_ADDR
// sArmoury := false ;
11299: LD_ADDR_EXP 51
11303: PUSH
11304: LD_INT 0
11306: ST_TO_ADDR
// sRadar := false ;
11307: LD_ADDR_EXP 52
11311: PUSH
11312: LD_INT 0
11314: ST_TO_ADDR
// sBunker := false ;
11315: LD_ADDR_EXP 53
11319: PUSH
11320: LD_INT 0
11322: ST_TO_ADDR
// sHack := false ;
11323: LD_ADDR_EXP 54
11327: PUSH
11328: LD_INT 0
11330: ST_TO_ADDR
// sFire := false ;
11331: LD_ADDR_EXP 55
11335: PUSH
11336: LD_INT 0
11338: ST_TO_ADDR
// sRefresh := false ;
11339: LD_ADDR_EXP 56
11343: PUSH
11344: LD_INT 0
11346: ST_TO_ADDR
// sExp := false ;
11347: LD_ADDR_EXP 57
11351: PUSH
11352: LD_INT 0
11354: ST_TO_ADDR
// sDepot := false ;
11355: LD_ADDR_EXP 58
11359: PUSH
11360: LD_INT 0
11362: ST_TO_ADDR
// sFlag := false ;
11363: LD_ADDR_EXP 59
11367: PUSH
11368: LD_INT 0
11370: ST_TO_ADDR
// sKamikadze := false ;
11371: LD_ADDR_EXP 67
11375: PUSH
11376: LD_INT 0
11378: ST_TO_ADDR
// sTroll := false ;
11379: LD_ADDR_EXP 68
11383: PUSH
11384: LD_INT 0
11386: ST_TO_ADDR
// sSlow := false ;
11387: LD_ADDR_EXP 69
11391: PUSH
11392: LD_INT 0
11394: ST_TO_ADDR
// sLack := false ;
11395: LD_ADDR_EXP 70
11399: PUSH
11400: LD_INT 0
11402: ST_TO_ADDR
// sTank := false ;
11403: LD_ADDR_EXP 72
11407: PUSH
11408: LD_INT 0
11410: ST_TO_ADDR
// sRemote := false ;
11411: LD_ADDR_EXP 73
11415: PUSH
11416: LD_INT 0
11418: ST_TO_ADDR
// sPowell := false ;
11419: LD_ADDR_EXP 74
11423: PUSH
11424: LD_INT 0
11426: ST_TO_ADDR
// sTeleport := false ;
11427: LD_ADDR_EXP 77
11431: PUSH
11432: LD_INT 0
11434: ST_TO_ADDR
// sOilTower := false ;
11435: LD_ADDR_EXP 79
11439: PUSH
11440: LD_INT 0
11442: ST_TO_ADDR
// sShovel := false ;
11443: LD_ADDR_EXP 80
11447: PUSH
11448: LD_INT 0
11450: ST_TO_ADDR
// sSheik := false ;
11451: LD_ADDR_EXP 81
11455: PUSH
11456: LD_INT 0
11458: ST_TO_ADDR
// sEarthquake := false ;
11459: LD_ADDR_EXP 83
11463: PUSH
11464: LD_INT 0
11466: ST_TO_ADDR
// sAI := false ;
11467: LD_ADDR_EXP 84
11471: PUSH
11472: LD_INT 0
11474: ST_TO_ADDR
// sCargo := false ;
11475: LD_ADDR_EXP 87
11479: PUSH
11480: LD_INT 0
11482: ST_TO_ADDR
// sDLaser := false ;
11483: LD_ADDR_EXP 88
11487: PUSH
11488: LD_INT 0
11490: ST_TO_ADDR
// sExchange := false ;
11491: LD_ADDR_EXP 89
11495: PUSH
11496: LD_INT 0
11498: ST_TO_ADDR
// sFac := false ;
11499: LD_ADDR_EXP 90
11503: PUSH
11504: LD_INT 0
11506: ST_TO_ADDR
// sPower := false ;
11507: LD_ADDR_EXP 91
11511: PUSH
11512: LD_INT 0
11514: ST_TO_ADDR
// sRandom := false ;
11515: LD_ADDR_EXP 92
11519: PUSH
11520: LD_INT 0
11522: ST_TO_ADDR
// sShield := false ;
11523: LD_ADDR_EXP 93
11527: PUSH
11528: LD_INT 0
11530: ST_TO_ADDR
// sTime := false ;
11531: LD_ADDR_EXP 94
11535: PUSH
11536: LD_INT 0
11538: ST_TO_ADDR
// sTools := false ;
11539: LD_ADDR_EXP 95
11543: PUSH
11544: LD_INT 0
11546: ST_TO_ADDR
// sSold := false ;
11547: LD_ADDR_EXP 60
11551: PUSH
11552: LD_INT 0
11554: ST_TO_ADDR
// sDiff := false ;
11555: LD_ADDR_EXP 61
11559: PUSH
11560: LD_INT 0
11562: ST_TO_ADDR
// sFog := false ;
11563: LD_ADDR_EXP 64
11567: PUSH
11568: LD_INT 0
11570: ST_TO_ADDR
// sReset := false ;
11571: LD_ADDR_EXP 65
11575: PUSH
11576: LD_INT 0
11578: ST_TO_ADDR
// sSun := false ;
11579: LD_ADDR_EXP 66
11583: PUSH
11584: LD_INT 0
11586: ST_TO_ADDR
// sTiger := false ;
11587: LD_ADDR_EXP 62
11591: PUSH
11592: LD_INT 0
11594: ST_TO_ADDR
// sBomb := false ;
11595: LD_ADDR_EXP 63
11599: PUSH
11600: LD_INT 0
11602: ST_TO_ADDR
// sWound := false ;
11603: LD_ADDR_EXP 71
11607: PUSH
11608: LD_INT 0
11610: ST_TO_ADDR
// sBetray := false ;
11611: LD_ADDR_EXP 75
11615: PUSH
11616: LD_INT 0
11618: ST_TO_ADDR
// sContamin := false ;
11619: LD_ADDR_EXP 76
11623: PUSH
11624: LD_INT 0
11626: ST_TO_ADDR
// sOil := false ;
11627: LD_ADDR_EXP 78
11631: PUSH
11632: LD_INT 0
11634: ST_TO_ADDR
// sStu := false ;
11635: LD_ADDR_EXP 82
11639: PUSH
11640: LD_INT 0
11642: ST_TO_ADDR
// sBazooka := false ;
11643: LD_ADDR_EXP 85
11647: PUSH
11648: LD_INT 0
11650: ST_TO_ADDR
// sMortar := false ;
11651: LD_ADDR_EXP 86
11655: PUSH
11656: LD_INT 0
11658: ST_TO_ADDR
// sRanger := false ;
11659: LD_ADDR_EXP 96
11663: PUSH
11664: LD_INT 0
11666: ST_TO_ADDR
// end ;
11667: LD_VAR 0 1
11671: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
11672: LD_INT 0
11674: PPUSH
11675: PPUSH
11676: PPUSH
11677: PPUSH
11678: PPUSH
// result := [ ] ;
11679: LD_ADDR_VAR 0 1
11683: PUSH
11684: EMPTY
11685: ST_TO_ADDR
// if campaign_id = 1 then
11686: LD_OWVAR 69
11690: PUSH
11691: LD_INT 1
11693: EQUAL
11694: IFFALSE 14632
// begin case mission_number of 1 :
11696: LD_OWVAR 70
11700: PUSH
11701: LD_INT 1
11703: DOUBLE
11704: EQUAL
11705: IFTRUE 11709
11707: GO 11773
11709: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
11710: LD_ADDR_VAR 0 1
11714: PUSH
11715: LD_INT 2
11717: PUSH
11718: LD_INT 4
11720: PUSH
11721: LD_INT 11
11723: PUSH
11724: LD_INT 12
11726: PUSH
11727: LD_INT 15
11729: PUSH
11730: LD_INT 16
11732: PUSH
11733: LD_INT 22
11735: PUSH
11736: LD_INT 23
11738: PUSH
11739: LD_INT 26
11741: PUSH
11742: EMPTY
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: PUSH
11753: LD_INT 101
11755: PUSH
11756: LD_INT 102
11758: PUSH
11759: LD_INT 106
11761: PUSH
11762: EMPTY
11763: LIST
11764: LIST
11765: LIST
11766: PUSH
11767: EMPTY
11768: LIST
11769: LIST
11770: ST_TO_ADDR
11771: GO 14630
11773: LD_INT 2
11775: DOUBLE
11776: EQUAL
11777: IFTRUE 11781
11779: GO 11853
11781: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
11782: LD_ADDR_VAR 0 1
11786: PUSH
11787: LD_INT 2
11789: PUSH
11790: LD_INT 4
11792: PUSH
11793: LD_INT 11
11795: PUSH
11796: LD_INT 12
11798: PUSH
11799: LD_INT 15
11801: PUSH
11802: LD_INT 16
11804: PUSH
11805: LD_INT 22
11807: PUSH
11808: LD_INT 23
11810: PUSH
11811: LD_INT 26
11813: PUSH
11814: EMPTY
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: PUSH
11825: LD_INT 101
11827: PUSH
11828: LD_INT 102
11830: PUSH
11831: LD_INT 105
11833: PUSH
11834: LD_INT 106
11836: PUSH
11837: LD_INT 108
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: ST_TO_ADDR
11851: GO 14630
11853: LD_INT 3
11855: DOUBLE
11856: EQUAL
11857: IFTRUE 11861
11859: GO 11937
11861: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
11862: LD_ADDR_VAR 0 1
11866: PUSH
11867: LD_INT 2
11869: PUSH
11870: LD_INT 4
11872: PUSH
11873: LD_INT 5
11875: PUSH
11876: LD_INT 11
11878: PUSH
11879: LD_INT 12
11881: PUSH
11882: LD_INT 15
11884: PUSH
11885: LD_INT 16
11887: PUSH
11888: LD_INT 22
11890: PUSH
11891: LD_INT 26
11893: PUSH
11894: LD_INT 36
11896: PUSH
11897: EMPTY
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: PUSH
11909: LD_INT 101
11911: PUSH
11912: LD_INT 102
11914: PUSH
11915: LD_INT 105
11917: PUSH
11918: LD_INT 106
11920: PUSH
11921: LD_INT 108
11923: PUSH
11924: EMPTY
11925: LIST
11926: LIST
11927: LIST
11928: LIST
11929: LIST
11930: PUSH
11931: EMPTY
11932: LIST
11933: LIST
11934: ST_TO_ADDR
11935: GO 14630
11937: LD_INT 4
11939: DOUBLE
11940: EQUAL
11941: IFTRUE 11945
11943: GO 12029
11945: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
11946: LD_ADDR_VAR 0 1
11950: PUSH
11951: LD_INT 2
11953: PUSH
11954: LD_INT 4
11956: PUSH
11957: LD_INT 5
11959: PUSH
11960: LD_INT 8
11962: PUSH
11963: LD_INT 11
11965: PUSH
11966: LD_INT 12
11968: PUSH
11969: LD_INT 15
11971: PUSH
11972: LD_INT 16
11974: PUSH
11975: LD_INT 22
11977: PUSH
11978: LD_INT 23
11980: PUSH
11981: LD_INT 26
11983: PUSH
11984: LD_INT 36
11986: PUSH
11987: EMPTY
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: PUSH
12001: LD_INT 101
12003: PUSH
12004: LD_INT 102
12006: PUSH
12007: LD_INT 105
12009: PUSH
12010: LD_INT 106
12012: PUSH
12013: LD_INT 108
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: LIST
12020: LIST
12021: LIST
12022: PUSH
12023: EMPTY
12024: LIST
12025: LIST
12026: ST_TO_ADDR
12027: GO 14630
12029: LD_INT 5
12031: DOUBLE
12032: EQUAL
12033: IFTRUE 12037
12035: GO 12137
12037: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
12038: LD_ADDR_VAR 0 1
12042: PUSH
12043: LD_INT 2
12045: PUSH
12046: LD_INT 4
12048: PUSH
12049: LD_INT 5
12051: PUSH
12052: LD_INT 6
12054: PUSH
12055: LD_INT 8
12057: PUSH
12058: LD_INT 11
12060: PUSH
12061: LD_INT 12
12063: PUSH
12064: LD_INT 15
12066: PUSH
12067: LD_INT 16
12069: PUSH
12070: LD_INT 22
12072: PUSH
12073: LD_INT 23
12075: PUSH
12076: LD_INT 25
12078: PUSH
12079: LD_INT 26
12081: PUSH
12082: LD_INT 36
12084: PUSH
12085: EMPTY
12086: LIST
12087: LIST
12088: LIST
12089: LIST
12090: LIST
12091: LIST
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: PUSH
12101: LD_INT 101
12103: PUSH
12104: LD_INT 102
12106: PUSH
12107: LD_INT 105
12109: PUSH
12110: LD_INT 106
12112: PUSH
12113: LD_INT 108
12115: PUSH
12116: LD_INT 109
12118: PUSH
12119: LD_INT 112
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: PUSH
12131: EMPTY
12132: LIST
12133: LIST
12134: ST_TO_ADDR
12135: GO 14630
12137: LD_INT 6
12139: DOUBLE
12140: EQUAL
12141: IFTRUE 12145
12143: GO 12265
12145: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
12146: LD_ADDR_VAR 0 1
12150: PUSH
12151: LD_INT 2
12153: PUSH
12154: LD_INT 4
12156: PUSH
12157: LD_INT 5
12159: PUSH
12160: LD_INT 6
12162: PUSH
12163: LD_INT 8
12165: PUSH
12166: LD_INT 11
12168: PUSH
12169: LD_INT 12
12171: PUSH
12172: LD_INT 15
12174: PUSH
12175: LD_INT 16
12177: PUSH
12178: LD_INT 20
12180: PUSH
12181: LD_INT 21
12183: PUSH
12184: LD_INT 22
12186: PUSH
12187: LD_INT 23
12189: PUSH
12190: LD_INT 25
12192: PUSH
12193: LD_INT 26
12195: PUSH
12196: LD_INT 30
12198: PUSH
12199: LD_INT 31
12201: PUSH
12202: LD_INT 32
12204: PUSH
12205: LD_INT 36
12207: PUSH
12208: EMPTY
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: PUSH
12229: LD_INT 101
12231: PUSH
12232: LD_INT 102
12234: PUSH
12235: LD_INT 105
12237: PUSH
12238: LD_INT 106
12240: PUSH
12241: LD_INT 108
12243: PUSH
12244: LD_INT 109
12246: PUSH
12247: LD_INT 112
12249: PUSH
12250: EMPTY
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: ST_TO_ADDR
12263: GO 14630
12265: LD_INT 7
12267: DOUBLE
12268: EQUAL
12269: IFTRUE 12273
12271: GO 12373
12273: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
12274: LD_ADDR_VAR 0 1
12278: PUSH
12279: LD_INT 2
12281: PUSH
12282: LD_INT 4
12284: PUSH
12285: LD_INT 5
12287: PUSH
12288: LD_INT 7
12290: PUSH
12291: LD_INT 11
12293: PUSH
12294: LD_INT 12
12296: PUSH
12297: LD_INT 15
12299: PUSH
12300: LD_INT 16
12302: PUSH
12303: LD_INT 20
12305: PUSH
12306: LD_INT 21
12308: PUSH
12309: LD_INT 22
12311: PUSH
12312: LD_INT 23
12314: PUSH
12315: LD_INT 25
12317: PUSH
12318: LD_INT 26
12320: PUSH
12321: EMPTY
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: LIST
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: PUSH
12337: LD_INT 101
12339: PUSH
12340: LD_INT 102
12342: PUSH
12343: LD_INT 103
12345: PUSH
12346: LD_INT 105
12348: PUSH
12349: LD_INT 106
12351: PUSH
12352: LD_INT 108
12354: PUSH
12355: LD_INT 112
12357: PUSH
12358: EMPTY
12359: LIST
12360: LIST
12361: LIST
12362: LIST
12363: LIST
12364: LIST
12365: LIST
12366: PUSH
12367: EMPTY
12368: LIST
12369: LIST
12370: ST_TO_ADDR
12371: GO 14630
12373: LD_INT 8
12375: DOUBLE
12376: EQUAL
12377: IFTRUE 12381
12379: GO 12509
12381: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
12382: LD_ADDR_VAR 0 1
12386: PUSH
12387: LD_INT 2
12389: PUSH
12390: LD_INT 4
12392: PUSH
12393: LD_INT 5
12395: PUSH
12396: LD_INT 6
12398: PUSH
12399: LD_INT 7
12401: PUSH
12402: LD_INT 8
12404: PUSH
12405: LD_INT 11
12407: PUSH
12408: LD_INT 12
12410: PUSH
12411: LD_INT 15
12413: PUSH
12414: LD_INT 16
12416: PUSH
12417: LD_INT 20
12419: PUSH
12420: LD_INT 21
12422: PUSH
12423: LD_INT 22
12425: PUSH
12426: LD_INT 23
12428: PUSH
12429: LD_INT 25
12431: PUSH
12432: LD_INT 26
12434: PUSH
12435: LD_INT 30
12437: PUSH
12438: LD_INT 31
12440: PUSH
12441: LD_INT 32
12443: PUSH
12444: LD_INT 36
12446: PUSH
12447: EMPTY
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: PUSH
12469: LD_INT 101
12471: PUSH
12472: LD_INT 102
12474: PUSH
12475: LD_INT 103
12477: PUSH
12478: LD_INT 105
12480: PUSH
12481: LD_INT 106
12483: PUSH
12484: LD_INT 108
12486: PUSH
12487: LD_INT 109
12489: PUSH
12490: LD_INT 112
12492: PUSH
12493: EMPTY
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: PUSH
12503: EMPTY
12504: LIST
12505: LIST
12506: ST_TO_ADDR
12507: GO 14630
12509: LD_INT 9
12511: DOUBLE
12512: EQUAL
12513: IFTRUE 12517
12515: GO 12653
12517: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
12518: LD_ADDR_VAR 0 1
12522: PUSH
12523: LD_INT 2
12525: PUSH
12526: LD_INT 4
12528: PUSH
12529: LD_INT 5
12531: PUSH
12532: LD_INT 6
12534: PUSH
12535: LD_INT 7
12537: PUSH
12538: LD_INT 8
12540: PUSH
12541: LD_INT 11
12543: PUSH
12544: LD_INT 12
12546: PUSH
12547: LD_INT 15
12549: PUSH
12550: LD_INT 16
12552: PUSH
12553: LD_INT 20
12555: PUSH
12556: LD_INT 21
12558: PUSH
12559: LD_INT 22
12561: PUSH
12562: LD_INT 23
12564: PUSH
12565: LD_INT 25
12567: PUSH
12568: LD_INT 26
12570: PUSH
12571: LD_INT 28
12573: PUSH
12574: LD_INT 30
12576: PUSH
12577: LD_INT 31
12579: PUSH
12580: LD_INT 32
12582: PUSH
12583: LD_INT 36
12585: PUSH
12586: EMPTY
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: LIST
12597: LIST
12598: LIST
12599: LIST
12600: LIST
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: LIST
12606: LIST
12607: LIST
12608: PUSH
12609: LD_INT 101
12611: PUSH
12612: LD_INT 102
12614: PUSH
12615: LD_INT 103
12617: PUSH
12618: LD_INT 105
12620: PUSH
12621: LD_INT 106
12623: PUSH
12624: LD_INT 108
12626: PUSH
12627: LD_INT 109
12629: PUSH
12630: LD_INT 112
12632: PUSH
12633: LD_INT 114
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: PUSH
12647: EMPTY
12648: LIST
12649: LIST
12650: ST_TO_ADDR
12651: GO 14630
12653: LD_INT 10
12655: DOUBLE
12656: EQUAL
12657: IFTRUE 12661
12659: GO 12845
12661: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
12662: LD_ADDR_VAR 0 1
12666: PUSH
12667: LD_INT 2
12669: PUSH
12670: LD_INT 4
12672: PUSH
12673: LD_INT 5
12675: PUSH
12676: LD_INT 6
12678: PUSH
12679: LD_INT 7
12681: PUSH
12682: LD_INT 8
12684: PUSH
12685: LD_INT 9
12687: PUSH
12688: LD_INT 10
12690: PUSH
12691: LD_INT 11
12693: PUSH
12694: LD_INT 12
12696: PUSH
12697: LD_INT 13
12699: PUSH
12700: LD_INT 14
12702: PUSH
12703: LD_INT 15
12705: PUSH
12706: LD_INT 16
12708: PUSH
12709: LD_INT 17
12711: PUSH
12712: LD_INT 18
12714: PUSH
12715: LD_INT 19
12717: PUSH
12718: LD_INT 20
12720: PUSH
12721: LD_INT 21
12723: PUSH
12724: LD_INT 22
12726: PUSH
12727: LD_INT 23
12729: PUSH
12730: LD_INT 24
12732: PUSH
12733: LD_INT 25
12735: PUSH
12736: LD_INT 26
12738: PUSH
12739: LD_INT 28
12741: PUSH
12742: LD_INT 30
12744: PUSH
12745: LD_INT 31
12747: PUSH
12748: LD_INT 32
12750: PUSH
12751: LD_INT 36
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: LIST
12760: LIST
12761: LIST
12762: LIST
12763: LIST
12764: LIST
12765: LIST
12766: LIST
12767: LIST
12768: LIST
12769: LIST
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: LIST
12775: LIST
12776: LIST
12777: LIST
12778: LIST
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: LIST
12784: PUSH
12785: LD_INT 101
12787: PUSH
12788: LD_INT 102
12790: PUSH
12791: LD_INT 103
12793: PUSH
12794: LD_INT 104
12796: PUSH
12797: LD_INT 105
12799: PUSH
12800: LD_INT 106
12802: PUSH
12803: LD_INT 107
12805: PUSH
12806: LD_INT 108
12808: PUSH
12809: LD_INT 109
12811: PUSH
12812: LD_INT 110
12814: PUSH
12815: LD_INT 111
12817: PUSH
12818: LD_INT 112
12820: PUSH
12821: LD_INT 114
12823: PUSH
12824: EMPTY
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: LIST
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: LIST
12838: PUSH
12839: EMPTY
12840: LIST
12841: LIST
12842: ST_TO_ADDR
12843: GO 14630
12845: LD_INT 11
12847: DOUBLE
12848: EQUAL
12849: IFTRUE 12853
12851: GO 13045
12853: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
12854: LD_ADDR_VAR 0 1
12858: PUSH
12859: LD_INT 2
12861: PUSH
12862: LD_INT 3
12864: PUSH
12865: LD_INT 4
12867: PUSH
12868: LD_INT 5
12870: PUSH
12871: LD_INT 6
12873: PUSH
12874: LD_INT 7
12876: PUSH
12877: LD_INT 8
12879: PUSH
12880: LD_INT 9
12882: PUSH
12883: LD_INT 10
12885: PUSH
12886: LD_INT 11
12888: PUSH
12889: LD_INT 12
12891: PUSH
12892: LD_INT 13
12894: PUSH
12895: LD_INT 14
12897: PUSH
12898: LD_INT 15
12900: PUSH
12901: LD_INT 16
12903: PUSH
12904: LD_INT 17
12906: PUSH
12907: LD_INT 18
12909: PUSH
12910: LD_INT 19
12912: PUSH
12913: LD_INT 20
12915: PUSH
12916: LD_INT 21
12918: PUSH
12919: LD_INT 22
12921: PUSH
12922: LD_INT 23
12924: PUSH
12925: LD_INT 24
12927: PUSH
12928: LD_INT 25
12930: PUSH
12931: LD_INT 26
12933: PUSH
12934: LD_INT 28
12936: PUSH
12937: LD_INT 30
12939: PUSH
12940: LD_INT 31
12942: PUSH
12943: LD_INT 32
12945: PUSH
12946: LD_INT 34
12948: PUSH
12949: LD_INT 36
12951: PUSH
12952: EMPTY
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: PUSH
12985: LD_INT 101
12987: PUSH
12988: LD_INT 102
12990: PUSH
12991: LD_INT 103
12993: PUSH
12994: LD_INT 104
12996: PUSH
12997: LD_INT 105
12999: PUSH
13000: LD_INT 106
13002: PUSH
13003: LD_INT 107
13005: PUSH
13006: LD_INT 108
13008: PUSH
13009: LD_INT 109
13011: PUSH
13012: LD_INT 110
13014: PUSH
13015: LD_INT 111
13017: PUSH
13018: LD_INT 112
13020: PUSH
13021: LD_INT 114
13023: PUSH
13024: EMPTY
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: PUSH
13039: EMPTY
13040: LIST
13041: LIST
13042: ST_TO_ADDR
13043: GO 14630
13045: LD_INT 12
13047: DOUBLE
13048: EQUAL
13049: IFTRUE 13053
13051: GO 13261
13053: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
13054: LD_ADDR_VAR 0 1
13058: PUSH
13059: LD_INT 1
13061: PUSH
13062: LD_INT 2
13064: PUSH
13065: LD_INT 3
13067: PUSH
13068: LD_INT 4
13070: PUSH
13071: LD_INT 5
13073: PUSH
13074: LD_INT 6
13076: PUSH
13077: LD_INT 7
13079: PUSH
13080: LD_INT 8
13082: PUSH
13083: LD_INT 9
13085: PUSH
13086: LD_INT 10
13088: PUSH
13089: LD_INT 11
13091: PUSH
13092: LD_INT 12
13094: PUSH
13095: LD_INT 13
13097: PUSH
13098: LD_INT 14
13100: PUSH
13101: LD_INT 15
13103: PUSH
13104: LD_INT 16
13106: PUSH
13107: LD_INT 17
13109: PUSH
13110: LD_INT 18
13112: PUSH
13113: LD_INT 19
13115: PUSH
13116: LD_INT 20
13118: PUSH
13119: LD_INT 21
13121: PUSH
13122: LD_INT 22
13124: PUSH
13125: LD_INT 23
13127: PUSH
13128: LD_INT 24
13130: PUSH
13131: LD_INT 25
13133: PUSH
13134: LD_INT 26
13136: PUSH
13137: LD_INT 27
13139: PUSH
13140: LD_INT 28
13142: PUSH
13143: LD_INT 30
13145: PUSH
13146: LD_INT 31
13148: PUSH
13149: LD_INT 32
13151: PUSH
13152: LD_INT 33
13154: PUSH
13155: LD_INT 34
13157: PUSH
13158: LD_INT 36
13160: PUSH
13161: EMPTY
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: PUSH
13197: LD_INT 101
13199: PUSH
13200: LD_INT 102
13202: PUSH
13203: LD_INT 103
13205: PUSH
13206: LD_INT 104
13208: PUSH
13209: LD_INT 105
13211: PUSH
13212: LD_INT 106
13214: PUSH
13215: LD_INT 107
13217: PUSH
13218: LD_INT 108
13220: PUSH
13221: LD_INT 109
13223: PUSH
13224: LD_INT 110
13226: PUSH
13227: LD_INT 111
13229: PUSH
13230: LD_INT 112
13232: PUSH
13233: LD_INT 113
13235: PUSH
13236: LD_INT 114
13238: PUSH
13239: EMPTY
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: ST_TO_ADDR
13259: GO 14630
13261: LD_INT 13
13263: DOUBLE
13264: EQUAL
13265: IFTRUE 13269
13267: GO 13465
13269: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
13270: LD_ADDR_VAR 0 1
13274: PUSH
13275: LD_INT 1
13277: PUSH
13278: LD_INT 2
13280: PUSH
13281: LD_INT 3
13283: PUSH
13284: LD_INT 4
13286: PUSH
13287: LD_INT 5
13289: PUSH
13290: LD_INT 8
13292: PUSH
13293: LD_INT 9
13295: PUSH
13296: LD_INT 10
13298: PUSH
13299: LD_INT 11
13301: PUSH
13302: LD_INT 12
13304: PUSH
13305: LD_INT 14
13307: PUSH
13308: LD_INT 15
13310: PUSH
13311: LD_INT 16
13313: PUSH
13314: LD_INT 17
13316: PUSH
13317: LD_INT 18
13319: PUSH
13320: LD_INT 19
13322: PUSH
13323: LD_INT 20
13325: PUSH
13326: LD_INT 21
13328: PUSH
13329: LD_INT 22
13331: PUSH
13332: LD_INT 23
13334: PUSH
13335: LD_INT 24
13337: PUSH
13338: LD_INT 25
13340: PUSH
13341: LD_INT 26
13343: PUSH
13344: LD_INT 27
13346: PUSH
13347: LD_INT 28
13349: PUSH
13350: LD_INT 30
13352: PUSH
13353: LD_INT 31
13355: PUSH
13356: LD_INT 32
13358: PUSH
13359: LD_INT 33
13361: PUSH
13362: LD_INT 34
13364: PUSH
13365: LD_INT 36
13367: PUSH
13368: EMPTY
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: PUSH
13401: LD_INT 101
13403: PUSH
13404: LD_INT 102
13406: PUSH
13407: LD_INT 103
13409: PUSH
13410: LD_INT 104
13412: PUSH
13413: LD_INT 105
13415: PUSH
13416: LD_INT 106
13418: PUSH
13419: LD_INT 107
13421: PUSH
13422: LD_INT 108
13424: PUSH
13425: LD_INT 109
13427: PUSH
13428: LD_INT 110
13430: PUSH
13431: LD_INT 111
13433: PUSH
13434: LD_INT 112
13436: PUSH
13437: LD_INT 113
13439: PUSH
13440: LD_INT 114
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: ST_TO_ADDR
13463: GO 14630
13465: LD_INT 14
13467: DOUBLE
13468: EQUAL
13469: IFTRUE 13473
13471: GO 13685
13473: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
13474: LD_ADDR_VAR 0 1
13478: PUSH
13479: LD_INT 1
13481: PUSH
13482: LD_INT 2
13484: PUSH
13485: LD_INT 3
13487: PUSH
13488: LD_INT 4
13490: PUSH
13491: LD_INT 5
13493: PUSH
13494: LD_INT 6
13496: PUSH
13497: LD_INT 7
13499: PUSH
13500: LD_INT 8
13502: PUSH
13503: LD_INT 9
13505: PUSH
13506: LD_INT 10
13508: PUSH
13509: LD_INT 11
13511: PUSH
13512: LD_INT 12
13514: PUSH
13515: LD_INT 13
13517: PUSH
13518: LD_INT 14
13520: PUSH
13521: LD_INT 15
13523: PUSH
13524: LD_INT 16
13526: PUSH
13527: LD_INT 17
13529: PUSH
13530: LD_INT 18
13532: PUSH
13533: LD_INT 19
13535: PUSH
13536: LD_INT 20
13538: PUSH
13539: LD_INT 21
13541: PUSH
13542: LD_INT 22
13544: PUSH
13545: LD_INT 23
13547: PUSH
13548: LD_INT 24
13550: PUSH
13551: LD_INT 25
13553: PUSH
13554: LD_INT 26
13556: PUSH
13557: LD_INT 27
13559: PUSH
13560: LD_INT 28
13562: PUSH
13563: LD_INT 29
13565: PUSH
13566: LD_INT 30
13568: PUSH
13569: LD_INT 31
13571: PUSH
13572: LD_INT 32
13574: PUSH
13575: LD_INT 33
13577: PUSH
13578: LD_INT 34
13580: PUSH
13581: LD_INT 36
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: PUSH
13621: LD_INT 101
13623: PUSH
13624: LD_INT 102
13626: PUSH
13627: LD_INT 103
13629: PUSH
13630: LD_INT 104
13632: PUSH
13633: LD_INT 105
13635: PUSH
13636: LD_INT 106
13638: PUSH
13639: LD_INT 107
13641: PUSH
13642: LD_INT 108
13644: PUSH
13645: LD_INT 109
13647: PUSH
13648: LD_INT 110
13650: PUSH
13651: LD_INT 111
13653: PUSH
13654: LD_INT 112
13656: PUSH
13657: LD_INT 113
13659: PUSH
13660: LD_INT 114
13662: PUSH
13663: EMPTY
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: PUSH
13679: EMPTY
13680: LIST
13681: LIST
13682: ST_TO_ADDR
13683: GO 14630
13685: LD_INT 15
13687: DOUBLE
13688: EQUAL
13689: IFTRUE 13693
13691: GO 13905
13693: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
13694: LD_ADDR_VAR 0 1
13698: PUSH
13699: LD_INT 1
13701: PUSH
13702: LD_INT 2
13704: PUSH
13705: LD_INT 3
13707: PUSH
13708: LD_INT 4
13710: PUSH
13711: LD_INT 5
13713: PUSH
13714: LD_INT 6
13716: PUSH
13717: LD_INT 7
13719: PUSH
13720: LD_INT 8
13722: PUSH
13723: LD_INT 9
13725: PUSH
13726: LD_INT 10
13728: PUSH
13729: LD_INT 11
13731: PUSH
13732: LD_INT 12
13734: PUSH
13735: LD_INT 13
13737: PUSH
13738: LD_INT 14
13740: PUSH
13741: LD_INT 15
13743: PUSH
13744: LD_INT 16
13746: PUSH
13747: LD_INT 17
13749: PUSH
13750: LD_INT 18
13752: PUSH
13753: LD_INT 19
13755: PUSH
13756: LD_INT 20
13758: PUSH
13759: LD_INT 21
13761: PUSH
13762: LD_INT 22
13764: PUSH
13765: LD_INT 23
13767: PUSH
13768: LD_INT 24
13770: PUSH
13771: LD_INT 25
13773: PUSH
13774: LD_INT 26
13776: PUSH
13777: LD_INT 27
13779: PUSH
13780: LD_INT 28
13782: PUSH
13783: LD_INT 29
13785: PUSH
13786: LD_INT 30
13788: PUSH
13789: LD_INT 31
13791: PUSH
13792: LD_INT 32
13794: PUSH
13795: LD_INT 33
13797: PUSH
13798: LD_INT 34
13800: PUSH
13801: LD_INT 36
13803: PUSH
13804: EMPTY
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: PUSH
13841: LD_INT 101
13843: PUSH
13844: LD_INT 102
13846: PUSH
13847: LD_INT 103
13849: PUSH
13850: LD_INT 104
13852: PUSH
13853: LD_INT 105
13855: PUSH
13856: LD_INT 106
13858: PUSH
13859: LD_INT 107
13861: PUSH
13862: LD_INT 108
13864: PUSH
13865: LD_INT 109
13867: PUSH
13868: LD_INT 110
13870: PUSH
13871: LD_INT 111
13873: PUSH
13874: LD_INT 112
13876: PUSH
13877: LD_INT 113
13879: PUSH
13880: LD_INT 114
13882: PUSH
13883: EMPTY
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: PUSH
13899: EMPTY
13900: LIST
13901: LIST
13902: ST_TO_ADDR
13903: GO 14630
13905: LD_INT 16
13907: DOUBLE
13908: EQUAL
13909: IFTRUE 13913
13911: GO 14037
13913: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
13914: LD_ADDR_VAR 0 1
13918: PUSH
13919: LD_INT 2
13921: PUSH
13922: LD_INT 4
13924: PUSH
13925: LD_INT 5
13927: PUSH
13928: LD_INT 7
13930: PUSH
13931: LD_INT 11
13933: PUSH
13934: LD_INT 12
13936: PUSH
13937: LD_INT 15
13939: PUSH
13940: LD_INT 16
13942: PUSH
13943: LD_INT 20
13945: PUSH
13946: LD_INT 21
13948: PUSH
13949: LD_INT 22
13951: PUSH
13952: LD_INT 23
13954: PUSH
13955: LD_INT 25
13957: PUSH
13958: LD_INT 26
13960: PUSH
13961: LD_INT 30
13963: PUSH
13964: LD_INT 31
13966: PUSH
13967: LD_INT 32
13969: PUSH
13970: LD_INT 33
13972: PUSH
13973: LD_INT 34
13975: PUSH
13976: EMPTY
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: LIST
13982: LIST
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: PUSH
13997: LD_INT 101
13999: PUSH
14000: LD_INT 102
14002: PUSH
14003: LD_INT 103
14005: PUSH
14006: LD_INT 106
14008: PUSH
14009: LD_INT 108
14011: PUSH
14012: LD_INT 112
14014: PUSH
14015: LD_INT 113
14017: PUSH
14018: LD_INT 114
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: ST_TO_ADDR
14035: GO 14630
14037: LD_INT 17
14039: DOUBLE
14040: EQUAL
14041: IFTRUE 14045
14043: GO 14257
14045: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
14046: LD_ADDR_VAR 0 1
14050: PUSH
14051: LD_INT 1
14053: PUSH
14054: LD_INT 2
14056: PUSH
14057: LD_INT 3
14059: PUSH
14060: LD_INT 4
14062: PUSH
14063: LD_INT 5
14065: PUSH
14066: LD_INT 6
14068: PUSH
14069: LD_INT 7
14071: PUSH
14072: LD_INT 8
14074: PUSH
14075: LD_INT 9
14077: PUSH
14078: LD_INT 10
14080: PUSH
14081: LD_INT 11
14083: PUSH
14084: LD_INT 12
14086: PUSH
14087: LD_INT 13
14089: PUSH
14090: LD_INT 14
14092: PUSH
14093: LD_INT 15
14095: PUSH
14096: LD_INT 16
14098: PUSH
14099: LD_INT 17
14101: PUSH
14102: LD_INT 18
14104: PUSH
14105: LD_INT 19
14107: PUSH
14108: LD_INT 20
14110: PUSH
14111: LD_INT 21
14113: PUSH
14114: LD_INT 22
14116: PUSH
14117: LD_INT 23
14119: PUSH
14120: LD_INT 24
14122: PUSH
14123: LD_INT 25
14125: PUSH
14126: LD_INT 26
14128: PUSH
14129: LD_INT 27
14131: PUSH
14132: LD_INT 28
14134: PUSH
14135: LD_INT 29
14137: PUSH
14138: LD_INT 30
14140: PUSH
14141: LD_INT 31
14143: PUSH
14144: LD_INT 32
14146: PUSH
14147: LD_INT 33
14149: PUSH
14150: LD_INT 34
14152: PUSH
14153: LD_INT 36
14155: PUSH
14156: EMPTY
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: PUSH
14193: LD_INT 101
14195: PUSH
14196: LD_INT 102
14198: PUSH
14199: LD_INT 103
14201: PUSH
14202: LD_INT 104
14204: PUSH
14205: LD_INT 105
14207: PUSH
14208: LD_INT 106
14210: PUSH
14211: LD_INT 107
14213: PUSH
14214: LD_INT 108
14216: PUSH
14217: LD_INT 109
14219: PUSH
14220: LD_INT 110
14222: PUSH
14223: LD_INT 111
14225: PUSH
14226: LD_INT 112
14228: PUSH
14229: LD_INT 113
14231: PUSH
14232: LD_INT 114
14234: PUSH
14235: EMPTY
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: PUSH
14251: EMPTY
14252: LIST
14253: LIST
14254: ST_TO_ADDR
14255: GO 14630
14257: LD_INT 18
14259: DOUBLE
14260: EQUAL
14261: IFTRUE 14265
14263: GO 14401
14265: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
14266: LD_ADDR_VAR 0 1
14270: PUSH
14271: LD_INT 2
14273: PUSH
14274: LD_INT 4
14276: PUSH
14277: LD_INT 5
14279: PUSH
14280: LD_INT 7
14282: PUSH
14283: LD_INT 11
14285: PUSH
14286: LD_INT 12
14288: PUSH
14289: LD_INT 15
14291: PUSH
14292: LD_INT 16
14294: PUSH
14295: LD_INT 20
14297: PUSH
14298: LD_INT 21
14300: PUSH
14301: LD_INT 22
14303: PUSH
14304: LD_INT 23
14306: PUSH
14307: LD_INT 25
14309: PUSH
14310: LD_INT 26
14312: PUSH
14313: LD_INT 30
14315: PUSH
14316: LD_INT 31
14318: PUSH
14319: LD_INT 32
14321: PUSH
14322: LD_INT 33
14324: PUSH
14325: LD_INT 34
14327: PUSH
14328: LD_INT 35
14330: PUSH
14331: LD_INT 36
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: PUSH
14357: LD_INT 101
14359: PUSH
14360: LD_INT 102
14362: PUSH
14363: LD_INT 103
14365: PUSH
14366: LD_INT 106
14368: PUSH
14369: LD_INT 108
14371: PUSH
14372: LD_INT 112
14374: PUSH
14375: LD_INT 113
14377: PUSH
14378: LD_INT 114
14380: PUSH
14381: LD_INT 115
14383: PUSH
14384: EMPTY
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: ST_TO_ADDR
14399: GO 14630
14401: LD_INT 19
14403: DOUBLE
14404: EQUAL
14405: IFTRUE 14409
14407: GO 14629
14409: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
14410: LD_ADDR_VAR 0 1
14414: PUSH
14415: LD_INT 1
14417: PUSH
14418: LD_INT 2
14420: PUSH
14421: LD_INT 3
14423: PUSH
14424: LD_INT 4
14426: PUSH
14427: LD_INT 5
14429: PUSH
14430: LD_INT 6
14432: PUSH
14433: LD_INT 7
14435: PUSH
14436: LD_INT 8
14438: PUSH
14439: LD_INT 9
14441: PUSH
14442: LD_INT 10
14444: PUSH
14445: LD_INT 11
14447: PUSH
14448: LD_INT 12
14450: PUSH
14451: LD_INT 13
14453: PUSH
14454: LD_INT 14
14456: PUSH
14457: LD_INT 15
14459: PUSH
14460: LD_INT 16
14462: PUSH
14463: LD_INT 17
14465: PUSH
14466: LD_INT 18
14468: PUSH
14469: LD_INT 19
14471: PUSH
14472: LD_INT 20
14474: PUSH
14475: LD_INT 21
14477: PUSH
14478: LD_INT 22
14480: PUSH
14481: LD_INT 23
14483: PUSH
14484: LD_INT 24
14486: PUSH
14487: LD_INT 25
14489: PUSH
14490: LD_INT 26
14492: PUSH
14493: LD_INT 27
14495: PUSH
14496: LD_INT 28
14498: PUSH
14499: LD_INT 29
14501: PUSH
14502: LD_INT 30
14504: PUSH
14505: LD_INT 31
14507: PUSH
14508: LD_INT 32
14510: PUSH
14511: LD_INT 33
14513: PUSH
14514: LD_INT 34
14516: PUSH
14517: LD_INT 35
14519: PUSH
14520: LD_INT 36
14522: PUSH
14523: EMPTY
14524: LIST
14525: LIST
14526: LIST
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: PUSH
14561: LD_INT 101
14563: PUSH
14564: LD_INT 102
14566: PUSH
14567: LD_INT 103
14569: PUSH
14570: LD_INT 104
14572: PUSH
14573: LD_INT 105
14575: PUSH
14576: LD_INT 106
14578: PUSH
14579: LD_INT 107
14581: PUSH
14582: LD_INT 108
14584: PUSH
14585: LD_INT 109
14587: PUSH
14588: LD_INT 110
14590: PUSH
14591: LD_INT 111
14593: PUSH
14594: LD_INT 112
14596: PUSH
14597: LD_INT 113
14599: PUSH
14600: LD_INT 114
14602: PUSH
14603: LD_INT 115
14605: PUSH
14606: EMPTY
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: PUSH
14623: EMPTY
14624: LIST
14625: LIST
14626: ST_TO_ADDR
14627: GO 14630
14629: POP
// end else
14630: GO 14849
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
14632: LD_ADDR_VAR 0 1
14636: PUSH
14637: LD_INT 1
14639: PUSH
14640: LD_INT 2
14642: PUSH
14643: LD_INT 3
14645: PUSH
14646: LD_INT 4
14648: PUSH
14649: LD_INT 5
14651: PUSH
14652: LD_INT 6
14654: PUSH
14655: LD_INT 7
14657: PUSH
14658: LD_INT 8
14660: PUSH
14661: LD_INT 9
14663: PUSH
14664: LD_INT 10
14666: PUSH
14667: LD_INT 11
14669: PUSH
14670: LD_INT 12
14672: PUSH
14673: LD_INT 13
14675: PUSH
14676: LD_INT 14
14678: PUSH
14679: LD_INT 15
14681: PUSH
14682: LD_INT 16
14684: PUSH
14685: LD_INT 17
14687: PUSH
14688: LD_INT 18
14690: PUSH
14691: LD_INT 19
14693: PUSH
14694: LD_INT 20
14696: PUSH
14697: LD_INT 21
14699: PUSH
14700: LD_INT 22
14702: PUSH
14703: LD_INT 23
14705: PUSH
14706: LD_INT 24
14708: PUSH
14709: LD_INT 25
14711: PUSH
14712: LD_INT 26
14714: PUSH
14715: LD_INT 27
14717: PUSH
14718: LD_INT 28
14720: PUSH
14721: LD_INT 29
14723: PUSH
14724: LD_INT 30
14726: PUSH
14727: LD_INT 31
14729: PUSH
14730: LD_INT 32
14732: PUSH
14733: LD_INT 33
14735: PUSH
14736: LD_INT 34
14738: PUSH
14739: LD_INT 35
14741: PUSH
14742: LD_INT 36
14744: PUSH
14745: EMPTY
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: PUSH
14783: LD_INT 101
14785: PUSH
14786: LD_INT 102
14788: PUSH
14789: LD_INT 103
14791: PUSH
14792: LD_INT 104
14794: PUSH
14795: LD_INT 105
14797: PUSH
14798: LD_INT 106
14800: PUSH
14801: LD_INT 107
14803: PUSH
14804: LD_INT 108
14806: PUSH
14807: LD_INT 109
14809: PUSH
14810: LD_INT 110
14812: PUSH
14813: LD_INT 111
14815: PUSH
14816: LD_INT 112
14818: PUSH
14819: LD_INT 113
14821: PUSH
14822: LD_INT 114
14824: PUSH
14825: LD_INT 115
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: LIST
14839: LIST
14840: LIST
14841: LIST
14842: LIST
14843: LIST
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: ST_TO_ADDR
// if result then
14849: LD_VAR 0 1
14853: IFFALSE 15142
// begin normal :=  ;
14855: LD_ADDR_VAR 0 3
14859: PUSH
14860: LD_STRING 
14862: ST_TO_ADDR
// hardcore :=  ;
14863: LD_ADDR_VAR 0 4
14867: PUSH
14868: LD_STRING 
14870: ST_TO_ADDR
// for i = 1 to normalCounter do
14871: LD_ADDR_VAR 0 5
14875: PUSH
14876: DOUBLE
14877: LD_INT 1
14879: DEC
14880: ST_TO_ADDR
14881: LD_EXP 44
14885: PUSH
14886: FOR_TO
14887: IFFALSE 14988
// begin tmp := 0 ;
14889: LD_ADDR_VAR 0 2
14893: PUSH
14894: LD_STRING 0
14896: ST_TO_ADDR
// if result [ 1 ] then
14897: LD_VAR 0 1
14901: PUSH
14902: LD_INT 1
14904: ARRAY
14905: IFFALSE 14970
// if result [ 1 ] [ 1 ] = i then
14907: LD_VAR 0 1
14911: PUSH
14912: LD_INT 1
14914: ARRAY
14915: PUSH
14916: LD_INT 1
14918: ARRAY
14919: PUSH
14920: LD_VAR 0 5
14924: EQUAL
14925: IFFALSE 14970
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14927: LD_ADDR_VAR 0 1
14931: PUSH
14932: LD_VAR 0 1
14936: PPUSH
14937: LD_INT 1
14939: PPUSH
14940: LD_VAR 0 1
14944: PUSH
14945: LD_INT 1
14947: ARRAY
14948: PPUSH
14949: LD_INT 1
14951: PPUSH
14952: CALL_OW 3
14956: PPUSH
14957: CALL_OW 1
14961: ST_TO_ADDR
// tmp := 1 ;
14962: LD_ADDR_VAR 0 2
14966: PUSH
14967: LD_STRING 1
14969: ST_TO_ADDR
// end ; normal := normal & tmp ;
14970: LD_ADDR_VAR 0 3
14974: PUSH
14975: LD_VAR 0 3
14979: PUSH
14980: LD_VAR 0 2
14984: STR
14985: ST_TO_ADDR
// end ;
14986: GO 14886
14988: POP
14989: POP
// for i = 1 to hardcoreCounter do
14990: LD_ADDR_VAR 0 5
14994: PUSH
14995: DOUBLE
14996: LD_INT 1
14998: DEC
14999: ST_TO_ADDR
15000: LD_EXP 45
15004: PUSH
15005: FOR_TO
15006: IFFALSE 15111
// begin tmp := 0 ;
15008: LD_ADDR_VAR 0 2
15012: PUSH
15013: LD_STRING 0
15015: ST_TO_ADDR
// if result [ 2 ] then
15016: LD_VAR 0 1
15020: PUSH
15021: LD_INT 2
15023: ARRAY
15024: IFFALSE 15093
// if result [ 2 ] [ 1 ] = 100 + i then
15026: LD_VAR 0 1
15030: PUSH
15031: LD_INT 2
15033: ARRAY
15034: PUSH
15035: LD_INT 1
15037: ARRAY
15038: PUSH
15039: LD_INT 100
15041: PUSH
15042: LD_VAR 0 5
15046: PLUS
15047: EQUAL
15048: IFFALSE 15093
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15050: LD_ADDR_VAR 0 1
15054: PUSH
15055: LD_VAR 0 1
15059: PPUSH
15060: LD_INT 2
15062: PPUSH
15063: LD_VAR 0 1
15067: PUSH
15068: LD_INT 2
15070: ARRAY
15071: PPUSH
15072: LD_INT 1
15074: PPUSH
15075: CALL_OW 3
15079: PPUSH
15080: CALL_OW 1
15084: ST_TO_ADDR
// tmp := 1 ;
15085: LD_ADDR_VAR 0 2
15089: PUSH
15090: LD_STRING 1
15092: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15093: LD_ADDR_VAR 0 4
15097: PUSH
15098: LD_VAR 0 4
15102: PUSH
15103: LD_VAR 0 2
15107: STR
15108: ST_TO_ADDR
// end ;
15109: GO 15005
15111: POP
15112: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
15113: LD_STRING getStreamItemsFromMission("
15115: PUSH
15116: LD_VAR 0 3
15120: STR
15121: PUSH
15122: LD_STRING ","
15124: STR
15125: PUSH
15126: LD_VAR 0 4
15130: STR
15131: PUSH
15132: LD_STRING ")
15134: STR
15135: PPUSH
15136: CALL_OW 559
// end else
15140: GO 15149
// ToLua ( getStreamItemsFromMission("","") ) ;
15142: LD_STRING getStreamItemsFromMission("","")
15144: PPUSH
15145: CALL_OW 559
// end ;
15149: LD_VAR 0 1
15153: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
15154: LD_VAR 0 2
15158: PUSH
15159: LD_INT 100
15161: EQUAL
15162: IFFALSE 16111
// begin if not StreamModeActive then
15164: LD_EXP 43
15168: NOT
15169: IFFALSE 15179
// StreamModeActive := true ;
15171: LD_ADDR_EXP 43
15175: PUSH
15176: LD_INT 1
15178: ST_TO_ADDR
// if p3 = 0 then
15179: LD_VAR 0 3
15183: PUSH
15184: LD_INT 0
15186: EQUAL
15187: IFFALSE 15193
// InitStreamMode ;
15189: CALL 11232 0 0
// if p3 = 1 then
15193: LD_VAR 0 3
15197: PUSH
15198: LD_INT 1
15200: EQUAL
15201: IFFALSE 15211
// sRocket := true ;
15203: LD_ADDR_EXP 48
15207: PUSH
15208: LD_INT 1
15210: ST_TO_ADDR
// if p3 = 2 then
15211: LD_VAR 0 3
15215: PUSH
15216: LD_INT 2
15218: EQUAL
15219: IFFALSE 15229
// sSpeed := true ;
15221: LD_ADDR_EXP 47
15225: PUSH
15226: LD_INT 1
15228: ST_TO_ADDR
// if p3 = 3 then
15229: LD_VAR 0 3
15233: PUSH
15234: LD_INT 3
15236: EQUAL
15237: IFFALSE 15247
// sEngine := true ;
15239: LD_ADDR_EXP 49
15243: PUSH
15244: LD_INT 1
15246: ST_TO_ADDR
// if p3 = 4 then
15247: LD_VAR 0 3
15251: PUSH
15252: LD_INT 4
15254: EQUAL
15255: IFFALSE 15265
// sSpec := true ;
15257: LD_ADDR_EXP 46
15261: PUSH
15262: LD_INT 1
15264: ST_TO_ADDR
// if p3 = 5 then
15265: LD_VAR 0 3
15269: PUSH
15270: LD_INT 5
15272: EQUAL
15273: IFFALSE 15283
// sLevel := true ;
15275: LD_ADDR_EXP 50
15279: PUSH
15280: LD_INT 1
15282: ST_TO_ADDR
// if p3 = 6 then
15283: LD_VAR 0 3
15287: PUSH
15288: LD_INT 6
15290: EQUAL
15291: IFFALSE 15301
// sArmoury := true ;
15293: LD_ADDR_EXP 51
15297: PUSH
15298: LD_INT 1
15300: ST_TO_ADDR
// if p3 = 7 then
15301: LD_VAR 0 3
15305: PUSH
15306: LD_INT 7
15308: EQUAL
15309: IFFALSE 15319
// sRadar := true ;
15311: LD_ADDR_EXP 52
15315: PUSH
15316: LD_INT 1
15318: ST_TO_ADDR
// if p3 = 8 then
15319: LD_VAR 0 3
15323: PUSH
15324: LD_INT 8
15326: EQUAL
15327: IFFALSE 15337
// sBunker := true ;
15329: LD_ADDR_EXP 53
15333: PUSH
15334: LD_INT 1
15336: ST_TO_ADDR
// if p3 = 9 then
15337: LD_VAR 0 3
15341: PUSH
15342: LD_INT 9
15344: EQUAL
15345: IFFALSE 15355
// sHack := true ;
15347: LD_ADDR_EXP 54
15351: PUSH
15352: LD_INT 1
15354: ST_TO_ADDR
// if p3 = 10 then
15355: LD_VAR 0 3
15359: PUSH
15360: LD_INT 10
15362: EQUAL
15363: IFFALSE 15373
// sFire := true ;
15365: LD_ADDR_EXP 55
15369: PUSH
15370: LD_INT 1
15372: ST_TO_ADDR
// if p3 = 11 then
15373: LD_VAR 0 3
15377: PUSH
15378: LD_INT 11
15380: EQUAL
15381: IFFALSE 15391
// sRefresh := true ;
15383: LD_ADDR_EXP 56
15387: PUSH
15388: LD_INT 1
15390: ST_TO_ADDR
// if p3 = 12 then
15391: LD_VAR 0 3
15395: PUSH
15396: LD_INT 12
15398: EQUAL
15399: IFFALSE 15409
// sExp := true ;
15401: LD_ADDR_EXP 57
15405: PUSH
15406: LD_INT 1
15408: ST_TO_ADDR
// if p3 = 13 then
15409: LD_VAR 0 3
15413: PUSH
15414: LD_INT 13
15416: EQUAL
15417: IFFALSE 15427
// sDepot := true ;
15419: LD_ADDR_EXP 58
15423: PUSH
15424: LD_INT 1
15426: ST_TO_ADDR
// if p3 = 14 then
15427: LD_VAR 0 3
15431: PUSH
15432: LD_INT 14
15434: EQUAL
15435: IFFALSE 15445
// sFlag := true ;
15437: LD_ADDR_EXP 59
15441: PUSH
15442: LD_INT 1
15444: ST_TO_ADDR
// if p3 = 15 then
15445: LD_VAR 0 3
15449: PUSH
15450: LD_INT 15
15452: EQUAL
15453: IFFALSE 15463
// sKamikadze := true ;
15455: LD_ADDR_EXP 67
15459: PUSH
15460: LD_INT 1
15462: ST_TO_ADDR
// if p3 = 16 then
15463: LD_VAR 0 3
15467: PUSH
15468: LD_INT 16
15470: EQUAL
15471: IFFALSE 15481
// sTroll := true ;
15473: LD_ADDR_EXP 68
15477: PUSH
15478: LD_INT 1
15480: ST_TO_ADDR
// if p3 = 17 then
15481: LD_VAR 0 3
15485: PUSH
15486: LD_INT 17
15488: EQUAL
15489: IFFALSE 15499
// sSlow := true ;
15491: LD_ADDR_EXP 69
15495: PUSH
15496: LD_INT 1
15498: ST_TO_ADDR
// if p3 = 18 then
15499: LD_VAR 0 3
15503: PUSH
15504: LD_INT 18
15506: EQUAL
15507: IFFALSE 15517
// sLack := true ;
15509: LD_ADDR_EXP 70
15513: PUSH
15514: LD_INT 1
15516: ST_TO_ADDR
// if p3 = 19 then
15517: LD_VAR 0 3
15521: PUSH
15522: LD_INT 19
15524: EQUAL
15525: IFFALSE 15535
// sTank := true ;
15527: LD_ADDR_EXP 72
15531: PUSH
15532: LD_INT 1
15534: ST_TO_ADDR
// if p3 = 20 then
15535: LD_VAR 0 3
15539: PUSH
15540: LD_INT 20
15542: EQUAL
15543: IFFALSE 15553
// sRemote := true ;
15545: LD_ADDR_EXP 73
15549: PUSH
15550: LD_INT 1
15552: ST_TO_ADDR
// if p3 = 21 then
15553: LD_VAR 0 3
15557: PUSH
15558: LD_INT 21
15560: EQUAL
15561: IFFALSE 15571
// sPowell := true ;
15563: LD_ADDR_EXP 74
15567: PUSH
15568: LD_INT 1
15570: ST_TO_ADDR
// if p3 = 22 then
15571: LD_VAR 0 3
15575: PUSH
15576: LD_INT 22
15578: EQUAL
15579: IFFALSE 15589
// sTeleport := true ;
15581: LD_ADDR_EXP 77
15585: PUSH
15586: LD_INT 1
15588: ST_TO_ADDR
// if p3 = 23 then
15589: LD_VAR 0 3
15593: PUSH
15594: LD_INT 23
15596: EQUAL
15597: IFFALSE 15607
// sOilTower := true ;
15599: LD_ADDR_EXP 79
15603: PUSH
15604: LD_INT 1
15606: ST_TO_ADDR
// if p3 = 24 then
15607: LD_VAR 0 3
15611: PUSH
15612: LD_INT 24
15614: EQUAL
15615: IFFALSE 15625
// sShovel := true ;
15617: LD_ADDR_EXP 80
15621: PUSH
15622: LD_INT 1
15624: ST_TO_ADDR
// if p3 = 25 then
15625: LD_VAR 0 3
15629: PUSH
15630: LD_INT 25
15632: EQUAL
15633: IFFALSE 15643
// sSheik := true ;
15635: LD_ADDR_EXP 81
15639: PUSH
15640: LD_INT 1
15642: ST_TO_ADDR
// if p3 = 26 then
15643: LD_VAR 0 3
15647: PUSH
15648: LD_INT 26
15650: EQUAL
15651: IFFALSE 15661
// sEarthquake := true ;
15653: LD_ADDR_EXP 83
15657: PUSH
15658: LD_INT 1
15660: ST_TO_ADDR
// if p3 = 27 then
15661: LD_VAR 0 3
15665: PUSH
15666: LD_INT 27
15668: EQUAL
15669: IFFALSE 15679
// sAI := true ;
15671: LD_ADDR_EXP 84
15675: PUSH
15676: LD_INT 1
15678: ST_TO_ADDR
// if p3 = 28 then
15679: LD_VAR 0 3
15683: PUSH
15684: LD_INT 28
15686: EQUAL
15687: IFFALSE 15697
// sCargo := true ;
15689: LD_ADDR_EXP 87
15693: PUSH
15694: LD_INT 1
15696: ST_TO_ADDR
// if p3 = 29 then
15697: LD_VAR 0 3
15701: PUSH
15702: LD_INT 29
15704: EQUAL
15705: IFFALSE 15715
// sDLaser := true ;
15707: LD_ADDR_EXP 88
15711: PUSH
15712: LD_INT 1
15714: ST_TO_ADDR
// if p3 = 30 then
15715: LD_VAR 0 3
15719: PUSH
15720: LD_INT 30
15722: EQUAL
15723: IFFALSE 15733
// sExchange := true ;
15725: LD_ADDR_EXP 89
15729: PUSH
15730: LD_INT 1
15732: ST_TO_ADDR
// if p3 = 31 then
15733: LD_VAR 0 3
15737: PUSH
15738: LD_INT 31
15740: EQUAL
15741: IFFALSE 15751
// sFac := true ;
15743: LD_ADDR_EXP 90
15747: PUSH
15748: LD_INT 1
15750: ST_TO_ADDR
// if p3 = 32 then
15751: LD_VAR 0 3
15755: PUSH
15756: LD_INT 32
15758: EQUAL
15759: IFFALSE 15769
// sPower := true ;
15761: LD_ADDR_EXP 91
15765: PUSH
15766: LD_INT 1
15768: ST_TO_ADDR
// if p3 = 33 then
15769: LD_VAR 0 3
15773: PUSH
15774: LD_INT 33
15776: EQUAL
15777: IFFALSE 15787
// sRandom := true ;
15779: LD_ADDR_EXP 92
15783: PUSH
15784: LD_INT 1
15786: ST_TO_ADDR
// if p3 = 34 then
15787: LD_VAR 0 3
15791: PUSH
15792: LD_INT 34
15794: EQUAL
15795: IFFALSE 15805
// sShield := true ;
15797: LD_ADDR_EXP 93
15801: PUSH
15802: LD_INT 1
15804: ST_TO_ADDR
// if p3 = 35 then
15805: LD_VAR 0 3
15809: PUSH
15810: LD_INT 35
15812: EQUAL
15813: IFFALSE 15823
// sTime := true ;
15815: LD_ADDR_EXP 94
15819: PUSH
15820: LD_INT 1
15822: ST_TO_ADDR
// if p3 = 36 then
15823: LD_VAR 0 3
15827: PUSH
15828: LD_INT 36
15830: EQUAL
15831: IFFALSE 15841
// sTools := true ;
15833: LD_ADDR_EXP 95
15837: PUSH
15838: LD_INT 1
15840: ST_TO_ADDR
// if p3 = 101 then
15841: LD_VAR 0 3
15845: PUSH
15846: LD_INT 101
15848: EQUAL
15849: IFFALSE 15859
// sSold := true ;
15851: LD_ADDR_EXP 60
15855: PUSH
15856: LD_INT 1
15858: ST_TO_ADDR
// if p3 = 102 then
15859: LD_VAR 0 3
15863: PUSH
15864: LD_INT 102
15866: EQUAL
15867: IFFALSE 15877
// sDiff := true ;
15869: LD_ADDR_EXP 61
15873: PUSH
15874: LD_INT 1
15876: ST_TO_ADDR
// if p3 = 103 then
15877: LD_VAR 0 3
15881: PUSH
15882: LD_INT 103
15884: EQUAL
15885: IFFALSE 15895
// sFog := true ;
15887: LD_ADDR_EXP 64
15891: PUSH
15892: LD_INT 1
15894: ST_TO_ADDR
// if p3 = 104 then
15895: LD_VAR 0 3
15899: PUSH
15900: LD_INT 104
15902: EQUAL
15903: IFFALSE 15913
// sReset := true ;
15905: LD_ADDR_EXP 65
15909: PUSH
15910: LD_INT 1
15912: ST_TO_ADDR
// if p3 = 105 then
15913: LD_VAR 0 3
15917: PUSH
15918: LD_INT 105
15920: EQUAL
15921: IFFALSE 15931
// sSun := true ;
15923: LD_ADDR_EXP 66
15927: PUSH
15928: LD_INT 1
15930: ST_TO_ADDR
// if p3 = 106 then
15931: LD_VAR 0 3
15935: PUSH
15936: LD_INT 106
15938: EQUAL
15939: IFFALSE 15949
// sTiger := true ;
15941: LD_ADDR_EXP 62
15945: PUSH
15946: LD_INT 1
15948: ST_TO_ADDR
// if p3 = 107 then
15949: LD_VAR 0 3
15953: PUSH
15954: LD_INT 107
15956: EQUAL
15957: IFFALSE 15967
// sBomb := true ;
15959: LD_ADDR_EXP 63
15963: PUSH
15964: LD_INT 1
15966: ST_TO_ADDR
// if p3 = 108 then
15967: LD_VAR 0 3
15971: PUSH
15972: LD_INT 108
15974: EQUAL
15975: IFFALSE 15985
// sWound := true ;
15977: LD_ADDR_EXP 71
15981: PUSH
15982: LD_INT 1
15984: ST_TO_ADDR
// if p3 = 109 then
15985: LD_VAR 0 3
15989: PUSH
15990: LD_INT 109
15992: EQUAL
15993: IFFALSE 16003
// sBetray := true ;
15995: LD_ADDR_EXP 75
15999: PUSH
16000: LD_INT 1
16002: ST_TO_ADDR
// if p3 = 110 then
16003: LD_VAR 0 3
16007: PUSH
16008: LD_INT 110
16010: EQUAL
16011: IFFALSE 16021
// sContamin := true ;
16013: LD_ADDR_EXP 76
16017: PUSH
16018: LD_INT 1
16020: ST_TO_ADDR
// if p3 = 111 then
16021: LD_VAR 0 3
16025: PUSH
16026: LD_INT 111
16028: EQUAL
16029: IFFALSE 16039
// sOil := true ;
16031: LD_ADDR_EXP 78
16035: PUSH
16036: LD_INT 1
16038: ST_TO_ADDR
// if p3 = 112 then
16039: LD_VAR 0 3
16043: PUSH
16044: LD_INT 112
16046: EQUAL
16047: IFFALSE 16057
// sStu := true ;
16049: LD_ADDR_EXP 82
16053: PUSH
16054: LD_INT 1
16056: ST_TO_ADDR
// if p3 = 113 then
16057: LD_VAR 0 3
16061: PUSH
16062: LD_INT 113
16064: EQUAL
16065: IFFALSE 16075
// sBazooka := true ;
16067: LD_ADDR_EXP 85
16071: PUSH
16072: LD_INT 1
16074: ST_TO_ADDR
// if p3 = 114 then
16075: LD_VAR 0 3
16079: PUSH
16080: LD_INT 114
16082: EQUAL
16083: IFFALSE 16093
// sMortar := true ;
16085: LD_ADDR_EXP 86
16089: PUSH
16090: LD_INT 1
16092: ST_TO_ADDR
// if p3 = 115 then
16093: LD_VAR 0 3
16097: PUSH
16098: LD_INT 115
16100: EQUAL
16101: IFFALSE 16111
// sRanger := true ;
16103: LD_ADDR_EXP 96
16107: PUSH
16108: LD_INT 1
16110: ST_TO_ADDR
// end ; end ;
16111: PPOPN 6
16113: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16114: LD_EXP 43
16118: PUSH
16119: LD_EXP 48
16123: AND
16124: IFFALSE 16248
16126: GO 16128
16128: DISABLE
16129: LD_INT 0
16131: PPUSH
16132: PPUSH
// begin enable ;
16133: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16134: LD_ADDR_VAR 0 2
16138: PUSH
16139: LD_INT 22
16141: PUSH
16142: LD_OWVAR 2
16146: PUSH
16147: EMPTY
16148: LIST
16149: LIST
16150: PUSH
16151: LD_INT 2
16153: PUSH
16154: LD_INT 34
16156: PUSH
16157: LD_INT 7
16159: PUSH
16160: EMPTY
16161: LIST
16162: LIST
16163: PUSH
16164: LD_INT 34
16166: PUSH
16167: LD_INT 45
16169: PUSH
16170: EMPTY
16171: LIST
16172: LIST
16173: PUSH
16174: LD_INT 34
16176: PUSH
16177: LD_INT 28
16179: PUSH
16180: EMPTY
16181: LIST
16182: LIST
16183: PUSH
16184: LD_INT 34
16186: PUSH
16187: LD_INT 47
16189: PUSH
16190: EMPTY
16191: LIST
16192: LIST
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: PUSH
16201: EMPTY
16202: LIST
16203: LIST
16204: PPUSH
16205: CALL_OW 69
16209: ST_TO_ADDR
// if not tmp then
16210: LD_VAR 0 2
16214: NOT
16215: IFFALSE 16219
// exit ;
16217: GO 16248
// for i in tmp do
16219: LD_ADDR_VAR 0 1
16223: PUSH
16224: LD_VAR 0 2
16228: PUSH
16229: FOR_IN
16230: IFFALSE 16246
// begin SetLives ( i , 0 ) ;
16232: LD_VAR 0 1
16236: PPUSH
16237: LD_INT 0
16239: PPUSH
16240: CALL_OW 234
// end ;
16244: GO 16229
16246: POP
16247: POP
// end ;
16248: PPOPN 2
16250: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16251: LD_EXP 43
16255: PUSH
16256: LD_EXP 49
16260: AND
16261: IFFALSE 16345
16263: GO 16265
16265: DISABLE
16266: LD_INT 0
16268: PPUSH
16269: PPUSH
// begin enable ;
16270: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16271: LD_ADDR_VAR 0 2
16275: PUSH
16276: LD_INT 22
16278: PUSH
16279: LD_OWVAR 2
16283: PUSH
16284: EMPTY
16285: LIST
16286: LIST
16287: PUSH
16288: LD_INT 32
16290: PUSH
16291: LD_INT 3
16293: PUSH
16294: EMPTY
16295: LIST
16296: LIST
16297: PUSH
16298: EMPTY
16299: LIST
16300: LIST
16301: PPUSH
16302: CALL_OW 69
16306: ST_TO_ADDR
// if not tmp then
16307: LD_VAR 0 2
16311: NOT
16312: IFFALSE 16316
// exit ;
16314: GO 16345
// for i in tmp do
16316: LD_ADDR_VAR 0 1
16320: PUSH
16321: LD_VAR 0 2
16325: PUSH
16326: FOR_IN
16327: IFFALSE 16343
// begin SetLives ( i , 0 ) ;
16329: LD_VAR 0 1
16333: PPUSH
16334: LD_INT 0
16336: PPUSH
16337: CALL_OW 234
// end ;
16341: GO 16326
16343: POP
16344: POP
// end ;
16345: PPOPN 2
16347: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16348: LD_EXP 43
16352: PUSH
16353: LD_EXP 46
16357: AND
16358: IFFALSE 16451
16360: GO 16362
16362: DISABLE
16363: LD_INT 0
16365: PPUSH
// begin enable ;
16366: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16367: LD_ADDR_VAR 0 1
16371: PUSH
16372: LD_INT 22
16374: PUSH
16375: LD_OWVAR 2
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: PUSH
16384: LD_INT 2
16386: PUSH
16387: LD_INT 25
16389: PUSH
16390: LD_INT 5
16392: PUSH
16393: EMPTY
16394: LIST
16395: LIST
16396: PUSH
16397: LD_INT 25
16399: PUSH
16400: LD_INT 9
16402: PUSH
16403: EMPTY
16404: LIST
16405: LIST
16406: PUSH
16407: LD_INT 25
16409: PUSH
16410: LD_INT 8
16412: PUSH
16413: EMPTY
16414: LIST
16415: LIST
16416: PUSH
16417: EMPTY
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: PUSH
16423: EMPTY
16424: LIST
16425: LIST
16426: PPUSH
16427: CALL_OW 69
16431: PUSH
16432: FOR_IN
16433: IFFALSE 16449
// begin SetClass ( i , 1 ) ;
16435: LD_VAR 0 1
16439: PPUSH
16440: LD_INT 1
16442: PPUSH
16443: CALL_OW 336
// end ;
16447: GO 16432
16449: POP
16450: POP
// end ;
16451: PPOPN 1
16453: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16454: LD_EXP 43
16458: PUSH
16459: LD_EXP 47
16463: AND
16464: PUSH
16465: LD_OWVAR 65
16469: PUSH
16470: LD_INT 7
16472: LESS
16473: AND
16474: IFFALSE 16488
16476: GO 16478
16478: DISABLE
// begin enable ;
16479: ENABLE
// game_speed := 7 ;
16480: LD_ADDR_OWVAR 65
16484: PUSH
16485: LD_INT 7
16487: ST_TO_ADDR
// end ;
16488: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16489: LD_EXP 43
16493: PUSH
16494: LD_EXP 50
16498: AND
16499: IFFALSE 16701
16501: GO 16503
16503: DISABLE
16504: LD_INT 0
16506: PPUSH
16507: PPUSH
16508: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16509: LD_ADDR_VAR 0 3
16513: PUSH
16514: LD_INT 81
16516: PUSH
16517: LD_OWVAR 2
16521: PUSH
16522: EMPTY
16523: LIST
16524: LIST
16525: PUSH
16526: LD_INT 21
16528: PUSH
16529: LD_INT 1
16531: PUSH
16532: EMPTY
16533: LIST
16534: LIST
16535: PUSH
16536: EMPTY
16537: LIST
16538: LIST
16539: PPUSH
16540: CALL_OW 69
16544: ST_TO_ADDR
// if not tmp then
16545: LD_VAR 0 3
16549: NOT
16550: IFFALSE 16554
// exit ;
16552: GO 16701
// if tmp > 5 then
16554: LD_VAR 0 3
16558: PUSH
16559: LD_INT 5
16561: GREATER
16562: IFFALSE 16574
// k := 5 else
16564: LD_ADDR_VAR 0 2
16568: PUSH
16569: LD_INT 5
16571: ST_TO_ADDR
16572: GO 16584
// k := tmp ;
16574: LD_ADDR_VAR 0 2
16578: PUSH
16579: LD_VAR 0 3
16583: ST_TO_ADDR
// for i := 1 to k do
16584: LD_ADDR_VAR 0 1
16588: PUSH
16589: DOUBLE
16590: LD_INT 1
16592: DEC
16593: ST_TO_ADDR
16594: LD_VAR 0 2
16598: PUSH
16599: FOR_TO
16600: IFFALSE 16699
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16602: LD_VAR 0 3
16606: PUSH
16607: LD_VAR 0 1
16611: ARRAY
16612: PPUSH
16613: LD_VAR 0 1
16617: PUSH
16618: LD_INT 4
16620: MOD
16621: PUSH
16622: LD_INT 1
16624: PLUS
16625: PPUSH
16626: CALL_OW 259
16630: PUSH
16631: LD_INT 10
16633: LESS
16634: IFFALSE 16697
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16636: LD_VAR 0 3
16640: PUSH
16641: LD_VAR 0 1
16645: ARRAY
16646: PPUSH
16647: LD_VAR 0 1
16651: PUSH
16652: LD_INT 4
16654: MOD
16655: PUSH
16656: LD_INT 1
16658: PLUS
16659: PPUSH
16660: LD_VAR 0 3
16664: PUSH
16665: LD_VAR 0 1
16669: ARRAY
16670: PPUSH
16671: LD_VAR 0 1
16675: PUSH
16676: LD_INT 4
16678: MOD
16679: PUSH
16680: LD_INT 1
16682: PLUS
16683: PPUSH
16684: CALL_OW 259
16688: PUSH
16689: LD_INT 1
16691: PLUS
16692: PPUSH
16693: CALL_OW 237
16697: GO 16599
16699: POP
16700: POP
// end ;
16701: PPOPN 3
16703: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16704: LD_EXP 43
16708: PUSH
16709: LD_EXP 51
16713: AND
16714: IFFALSE 16734
16716: GO 16718
16718: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16719: LD_INT 4
16721: PPUSH
16722: LD_OWVAR 2
16726: PPUSH
16727: LD_INT 0
16729: PPUSH
16730: CALL_OW 324
16734: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16735: LD_EXP 43
16739: PUSH
16740: LD_EXP 80
16744: AND
16745: IFFALSE 16765
16747: GO 16749
16749: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16750: LD_INT 19
16752: PPUSH
16753: LD_OWVAR 2
16757: PPUSH
16758: LD_INT 0
16760: PPUSH
16761: CALL_OW 324
16765: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16766: LD_EXP 43
16770: PUSH
16771: LD_EXP 52
16775: AND
16776: IFFALSE 16878
16778: GO 16780
16780: DISABLE
16781: LD_INT 0
16783: PPUSH
16784: PPUSH
// begin enable ;
16785: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16786: LD_ADDR_VAR 0 2
16790: PUSH
16791: LD_INT 22
16793: PUSH
16794: LD_OWVAR 2
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: PUSH
16803: LD_INT 2
16805: PUSH
16806: LD_INT 34
16808: PUSH
16809: LD_INT 11
16811: PUSH
16812: EMPTY
16813: LIST
16814: LIST
16815: PUSH
16816: LD_INT 34
16818: PUSH
16819: LD_INT 30
16821: PUSH
16822: EMPTY
16823: LIST
16824: LIST
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: LIST
16830: PUSH
16831: EMPTY
16832: LIST
16833: LIST
16834: PPUSH
16835: CALL_OW 69
16839: ST_TO_ADDR
// if not tmp then
16840: LD_VAR 0 2
16844: NOT
16845: IFFALSE 16849
// exit ;
16847: GO 16878
// for i in tmp do
16849: LD_ADDR_VAR 0 1
16853: PUSH
16854: LD_VAR 0 2
16858: PUSH
16859: FOR_IN
16860: IFFALSE 16876
// begin SetLives ( i , 0 ) ;
16862: LD_VAR 0 1
16866: PPUSH
16867: LD_INT 0
16869: PPUSH
16870: CALL_OW 234
// end ;
16874: GO 16859
16876: POP
16877: POP
// end ;
16878: PPOPN 2
16880: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16881: LD_EXP 43
16885: PUSH
16886: LD_EXP 53
16890: AND
16891: IFFALSE 16911
16893: GO 16895
16895: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16896: LD_INT 32
16898: PPUSH
16899: LD_OWVAR 2
16903: PPUSH
16904: LD_INT 0
16906: PPUSH
16907: CALL_OW 324
16911: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16912: LD_EXP 43
16916: PUSH
16917: LD_EXP 54
16921: AND
16922: IFFALSE 17103
16924: GO 16926
16926: DISABLE
16927: LD_INT 0
16929: PPUSH
16930: PPUSH
16931: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16932: LD_ADDR_VAR 0 2
16936: PUSH
16937: LD_INT 22
16939: PUSH
16940: LD_OWVAR 2
16944: PUSH
16945: EMPTY
16946: LIST
16947: LIST
16948: PUSH
16949: LD_INT 33
16951: PUSH
16952: LD_INT 3
16954: PUSH
16955: EMPTY
16956: LIST
16957: LIST
16958: PUSH
16959: EMPTY
16960: LIST
16961: LIST
16962: PPUSH
16963: CALL_OW 69
16967: ST_TO_ADDR
// if not tmp then
16968: LD_VAR 0 2
16972: NOT
16973: IFFALSE 16977
// exit ;
16975: GO 17103
// side := 0 ;
16977: LD_ADDR_VAR 0 3
16981: PUSH
16982: LD_INT 0
16984: ST_TO_ADDR
// for i := 1 to 8 do
16985: LD_ADDR_VAR 0 1
16989: PUSH
16990: DOUBLE
16991: LD_INT 1
16993: DEC
16994: ST_TO_ADDR
16995: LD_INT 8
16997: PUSH
16998: FOR_TO
16999: IFFALSE 17047
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17001: LD_OWVAR 2
17005: PUSH
17006: LD_VAR 0 1
17010: NONEQUAL
17011: PUSH
17012: LD_OWVAR 2
17016: PPUSH
17017: LD_VAR 0 1
17021: PPUSH
17022: CALL_OW 81
17026: PUSH
17027: LD_INT 2
17029: EQUAL
17030: AND
17031: IFFALSE 17045
// begin side := i ;
17033: LD_ADDR_VAR 0 3
17037: PUSH
17038: LD_VAR 0 1
17042: ST_TO_ADDR
// break ;
17043: GO 17047
// end ;
17045: GO 16998
17047: POP
17048: POP
// if not side then
17049: LD_VAR 0 3
17053: NOT
17054: IFFALSE 17058
// exit ;
17056: GO 17103
// for i := 1 to tmp do
17058: LD_ADDR_VAR 0 1
17062: PUSH
17063: DOUBLE
17064: LD_INT 1
17066: DEC
17067: ST_TO_ADDR
17068: LD_VAR 0 2
17072: PUSH
17073: FOR_TO
17074: IFFALSE 17101
// if Prob ( 60 ) then
17076: LD_INT 60
17078: PPUSH
17079: CALL_OW 13
17083: IFFALSE 17099
// SetSide ( i , side ) ;
17085: LD_VAR 0 1
17089: PPUSH
17090: LD_VAR 0 3
17094: PPUSH
17095: CALL_OW 235
17099: GO 17073
17101: POP
17102: POP
// end ;
17103: PPOPN 3
17105: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17106: LD_EXP 43
17110: PUSH
17111: LD_EXP 56
17115: AND
17116: IFFALSE 17235
17118: GO 17120
17120: DISABLE
17121: LD_INT 0
17123: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17124: LD_ADDR_VAR 0 1
17128: PUSH
17129: LD_INT 22
17131: PUSH
17132: LD_OWVAR 2
17136: PUSH
17137: EMPTY
17138: LIST
17139: LIST
17140: PUSH
17141: LD_INT 21
17143: PUSH
17144: LD_INT 1
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: PUSH
17151: LD_INT 3
17153: PUSH
17154: LD_INT 23
17156: PUSH
17157: LD_INT 0
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: PUSH
17164: EMPTY
17165: LIST
17166: LIST
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: LIST
17172: PPUSH
17173: CALL_OW 69
17177: PUSH
17178: FOR_IN
17179: IFFALSE 17233
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17181: LD_VAR 0 1
17185: PPUSH
17186: CALL_OW 257
17190: PUSH
17191: LD_INT 1
17193: PUSH
17194: LD_INT 2
17196: PUSH
17197: LD_INT 3
17199: PUSH
17200: LD_INT 4
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: IN
17209: IFFALSE 17231
// SetClass ( un , rand ( 1 , 4 ) ) ;
17211: LD_VAR 0 1
17215: PPUSH
17216: LD_INT 1
17218: PPUSH
17219: LD_INT 4
17221: PPUSH
17222: CALL_OW 12
17226: PPUSH
17227: CALL_OW 336
17231: GO 17178
17233: POP
17234: POP
// end ;
17235: PPOPN 1
17237: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17238: LD_EXP 43
17242: PUSH
17243: LD_EXP 55
17247: AND
17248: IFFALSE 17327
17250: GO 17252
17252: DISABLE
17253: LD_INT 0
17255: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17256: LD_ADDR_VAR 0 1
17260: PUSH
17261: LD_INT 22
17263: PUSH
17264: LD_OWVAR 2
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: PUSH
17273: LD_INT 21
17275: PUSH
17276: LD_INT 3
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PPUSH
17287: CALL_OW 69
17291: ST_TO_ADDR
// if not tmp then
17292: LD_VAR 0 1
17296: NOT
17297: IFFALSE 17301
// exit ;
17299: GO 17327
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17301: LD_VAR 0 1
17305: PUSH
17306: LD_INT 1
17308: PPUSH
17309: LD_VAR 0 1
17313: PPUSH
17314: CALL_OW 12
17318: ARRAY
17319: PPUSH
17320: LD_INT 100
17322: PPUSH
17323: CALL_OW 234
// end ;
17327: PPOPN 1
17329: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17330: LD_EXP 43
17334: PUSH
17335: LD_EXP 57
17339: AND
17340: IFFALSE 17438
17342: GO 17344
17344: DISABLE
17345: LD_INT 0
17347: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17348: LD_ADDR_VAR 0 1
17352: PUSH
17353: LD_INT 22
17355: PUSH
17356: LD_OWVAR 2
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: PUSH
17365: LD_INT 21
17367: PUSH
17368: LD_INT 1
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: PUSH
17375: EMPTY
17376: LIST
17377: LIST
17378: PPUSH
17379: CALL_OW 69
17383: ST_TO_ADDR
// if not tmp then
17384: LD_VAR 0 1
17388: NOT
17389: IFFALSE 17393
// exit ;
17391: GO 17438
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17393: LD_VAR 0 1
17397: PUSH
17398: LD_INT 1
17400: PPUSH
17401: LD_VAR 0 1
17405: PPUSH
17406: CALL_OW 12
17410: ARRAY
17411: PPUSH
17412: LD_INT 1
17414: PPUSH
17415: LD_INT 4
17417: PPUSH
17418: CALL_OW 12
17422: PPUSH
17423: LD_INT 3000
17425: PPUSH
17426: LD_INT 9000
17428: PPUSH
17429: CALL_OW 12
17433: PPUSH
17434: CALL_OW 492
// end ;
17438: PPOPN 1
17440: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17441: LD_EXP 43
17445: PUSH
17446: LD_EXP 58
17450: AND
17451: IFFALSE 17471
17453: GO 17455
17455: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17456: LD_INT 1
17458: PPUSH
17459: LD_OWVAR 2
17463: PPUSH
17464: LD_INT 0
17466: PPUSH
17467: CALL_OW 324
17471: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17472: LD_EXP 43
17476: PUSH
17477: LD_EXP 59
17481: AND
17482: IFFALSE 17565
17484: GO 17486
17486: DISABLE
17487: LD_INT 0
17489: PPUSH
17490: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17491: LD_ADDR_VAR 0 2
17495: PUSH
17496: LD_INT 22
17498: PUSH
17499: LD_OWVAR 2
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: PUSH
17508: LD_INT 21
17510: PUSH
17511: LD_INT 3
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PUSH
17518: EMPTY
17519: LIST
17520: LIST
17521: PPUSH
17522: CALL_OW 69
17526: ST_TO_ADDR
// if not tmp then
17527: LD_VAR 0 2
17531: NOT
17532: IFFALSE 17536
// exit ;
17534: GO 17565
// for i in tmp do
17536: LD_ADDR_VAR 0 1
17540: PUSH
17541: LD_VAR 0 2
17545: PUSH
17546: FOR_IN
17547: IFFALSE 17563
// SetBLevel ( i , 10 ) ;
17549: LD_VAR 0 1
17553: PPUSH
17554: LD_INT 10
17556: PPUSH
17557: CALL_OW 241
17561: GO 17546
17563: POP
17564: POP
// end ;
17565: PPOPN 2
17567: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17568: LD_EXP 43
17572: PUSH
17573: LD_EXP 60
17577: AND
17578: IFFALSE 17689
17580: GO 17582
17582: DISABLE
17583: LD_INT 0
17585: PPUSH
17586: PPUSH
17587: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17588: LD_ADDR_VAR 0 3
17592: PUSH
17593: LD_INT 22
17595: PUSH
17596: LD_OWVAR 2
17600: PUSH
17601: EMPTY
17602: LIST
17603: LIST
17604: PUSH
17605: LD_INT 25
17607: PUSH
17608: LD_INT 1
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: PPUSH
17619: CALL_OW 69
17623: ST_TO_ADDR
// if not tmp then
17624: LD_VAR 0 3
17628: NOT
17629: IFFALSE 17633
// exit ;
17631: GO 17689
// un := tmp [ rand ( 1 , tmp ) ] ;
17633: LD_ADDR_VAR 0 2
17637: PUSH
17638: LD_VAR 0 3
17642: PUSH
17643: LD_INT 1
17645: PPUSH
17646: LD_VAR 0 3
17650: PPUSH
17651: CALL_OW 12
17655: ARRAY
17656: ST_TO_ADDR
// if Crawls ( un ) then
17657: LD_VAR 0 2
17661: PPUSH
17662: CALL_OW 318
17666: IFFALSE 17677
// ComWalk ( un ) ;
17668: LD_VAR 0 2
17672: PPUSH
17673: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17677: LD_VAR 0 2
17681: PPUSH
17682: LD_INT 5
17684: PPUSH
17685: CALL_OW 336
// end ;
17689: PPOPN 3
17691: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
17692: LD_EXP 43
17696: PUSH
17697: LD_EXP 61
17701: AND
17702: PUSH
17703: LD_OWVAR 67
17707: PUSH
17708: LD_INT 3
17710: LESS
17711: AND
17712: IFFALSE 17731
17714: GO 17716
17716: DISABLE
// Difficulty := Difficulty + 1 ;
17717: LD_ADDR_OWVAR 67
17721: PUSH
17722: LD_OWVAR 67
17726: PUSH
17727: LD_INT 1
17729: PLUS
17730: ST_TO_ADDR
17731: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17732: LD_EXP 43
17736: PUSH
17737: LD_EXP 62
17741: AND
17742: IFFALSE 17845
17744: GO 17746
17746: DISABLE
17747: LD_INT 0
17749: PPUSH
// begin for i := 1 to 5 do
17750: LD_ADDR_VAR 0 1
17754: PUSH
17755: DOUBLE
17756: LD_INT 1
17758: DEC
17759: ST_TO_ADDR
17760: LD_INT 5
17762: PUSH
17763: FOR_TO
17764: IFFALSE 17843
// begin uc_nation := nation_nature ;
17766: LD_ADDR_OWVAR 21
17770: PUSH
17771: LD_INT 0
17773: ST_TO_ADDR
// uc_side := 0 ;
17774: LD_ADDR_OWVAR 20
17778: PUSH
17779: LD_INT 0
17781: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17782: LD_ADDR_OWVAR 29
17786: PUSH
17787: LD_INT 12
17789: PUSH
17790: LD_INT 12
17792: PUSH
17793: EMPTY
17794: LIST
17795: LIST
17796: ST_TO_ADDR
// hc_agressivity := 20 ;
17797: LD_ADDR_OWVAR 35
17801: PUSH
17802: LD_INT 20
17804: ST_TO_ADDR
// hc_class := class_tiger ;
17805: LD_ADDR_OWVAR 28
17809: PUSH
17810: LD_INT 14
17812: ST_TO_ADDR
// hc_gallery :=  ;
17813: LD_ADDR_OWVAR 33
17817: PUSH
17818: LD_STRING 
17820: ST_TO_ADDR
// hc_name :=  ;
17821: LD_ADDR_OWVAR 26
17825: PUSH
17826: LD_STRING 
17828: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17829: CALL_OW 44
17833: PPUSH
17834: LD_INT 0
17836: PPUSH
17837: CALL_OW 51
// end ;
17841: GO 17763
17843: POP
17844: POP
// end ;
17845: PPOPN 1
17847: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17848: LD_EXP 43
17852: PUSH
17853: LD_EXP 63
17857: AND
17858: IFFALSE 17867
17860: GO 17862
17862: DISABLE
// StreamSibBomb ;
17863: CALL 17868 0 0
17867: END
// export function StreamSibBomb ; var i , x , y ; begin
17868: LD_INT 0
17870: PPUSH
17871: PPUSH
17872: PPUSH
17873: PPUSH
// result := false ;
17874: LD_ADDR_VAR 0 1
17878: PUSH
17879: LD_INT 0
17881: ST_TO_ADDR
// for i := 1 to 16 do
17882: LD_ADDR_VAR 0 2
17886: PUSH
17887: DOUBLE
17888: LD_INT 1
17890: DEC
17891: ST_TO_ADDR
17892: LD_INT 16
17894: PUSH
17895: FOR_TO
17896: IFFALSE 18095
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17898: LD_ADDR_VAR 0 3
17902: PUSH
17903: LD_INT 10
17905: PUSH
17906: LD_INT 20
17908: PUSH
17909: LD_INT 30
17911: PUSH
17912: LD_INT 40
17914: PUSH
17915: LD_INT 50
17917: PUSH
17918: LD_INT 60
17920: PUSH
17921: LD_INT 70
17923: PUSH
17924: LD_INT 80
17926: PUSH
17927: LD_INT 90
17929: PUSH
17930: LD_INT 100
17932: PUSH
17933: LD_INT 110
17935: PUSH
17936: LD_INT 120
17938: PUSH
17939: LD_INT 130
17941: PUSH
17942: LD_INT 140
17944: PUSH
17945: LD_INT 150
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: LIST
17952: LIST
17953: LIST
17954: LIST
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: LIST
17962: LIST
17963: LIST
17964: PUSH
17965: LD_INT 1
17967: PPUSH
17968: LD_INT 15
17970: PPUSH
17971: CALL_OW 12
17975: ARRAY
17976: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17977: LD_ADDR_VAR 0 4
17981: PUSH
17982: LD_INT 10
17984: PUSH
17985: LD_INT 20
17987: PUSH
17988: LD_INT 30
17990: PUSH
17991: LD_INT 40
17993: PUSH
17994: LD_INT 50
17996: PUSH
17997: LD_INT 60
17999: PUSH
18000: LD_INT 70
18002: PUSH
18003: LD_INT 80
18005: PUSH
18006: LD_INT 90
18008: PUSH
18009: LD_INT 100
18011: PUSH
18012: LD_INT 110
18014: PUSH
18015: LD_INT 120
18017: PUSH
18018: LD_INT 130
18020: PUSH
18021: LD_INT 140
18023: PUSH
18024: LD_INT 150
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: LIST
18043: PUSH
18044: LD_INT 1
18046: PPUSH
18047: LD_INT 15
18049: PPUSH
18050: CALL_OW 12
18054: ARRAY
18055: ST_TO_ADDR
// if ValidHex ( x , y ) then
18056: LD_VAR 0 3
18060: PPUSH
18061: LD_VAR 0 4
18065: PPUSH
18066: CALL_OW 488
18070: IFFALSE 18093
// begin result := [ x , y ] ;
18072: LD_ADDR_VAR 0 1
18076: PUSH
18077: LD_VAR 0 3
18081: PUSH
18082: LD_VAR 0 4
18086: PUSH
18087: EMPTY
18088: LIST
18089: LIST
18090: ST_TO_ADDR
// break ;
18091: GO 18095
// end ; end ;
18093: GO 17895
18095: POP
18096: POP
// if result then
18097: LD_VAR 0 1
18101: IFFALSE 18161
// begin ToLua ( playSibBomb() ) ;
18103: LD_STRING playSibBomb()
18105: PPUSH
18106: CALL_OW 559
// wait ( 0 0$14 ) ;
18110: LD_INT 490
18112: PPUSH
18113: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18117: LD_VAR 0 1
18121: PUSH
18122: LD_INT 1
18124: ARRAY
18125: PPUSH
18126: LD_VAR 0 1
18130: PUSH
18131: LD_INT 2
18133: ARRAY
18134: PPUSH
18135: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18139: LD_VAR 0 1
18143: PUSH
18144: LD_INT 1
18146: ARRAY
18147: PPUSH
18148: LD_VAR 0 1
18152: PUSH
18153: LD_INT 2
18155: ARRAY
18156: PPUSH
18157: CALL_OW 429
// end ; end ;
18161: LD_VAR 0 1
18165: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18166: LD_EXP 43
18170: PUSH
18171: LD_EXP 65
18175: AND
18176: IFFALSE 18188
18178: GO 18180
18180: DISABLE
// YouLost (  ) ;
18181: LD_STRING 
18183: PPUSH
18184: CALL_OW 104
18188: END
// every 0 0$1 trigger StreamModeActive and sFog do
18189: LD_EXP 43
18193: PUSH
18194: LD_EXP 64
18198: AND
18199: IFFALSE 18213
18201: GO 18203
18203: DISABLE
// FogOff ( your_side ) ;
18204: LD_OWVAR 2
18208: PPUSH
18209: CALL_OW 344
18213: END
// every 0 0$1 trigger StreamModeActive and sSun do
18214: LD_EXP 43
18218: PUSH
18219: LD_EXP 66
18223: AND
18224: IFFALSE 18252
18226: GO 18228
18228: DISABLE
// begin solar_recharge_percent := 0 ;
18229: LD_ADDR_OWVAR 79
18233: PUSH
18234: LD_INT 0
18236: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18237: LD_INT 10500
18239: PPUSH
18240: CALL_OW 67
// solar_recharge_percent := 100 ;
18244: LD_ADDR_OWVAR 79
18248: PUSH
18249: LD_INT 100
18251: ST_TO_ADDR
// end ;
18252: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18253: LD_EXP 43
18257: PUSH
18258: LD_EXP 67
18262: AND
18263: IFFALSE 18502
18265: GO 18267
18267: DISABLE
18268: LD_INT 0
18270: PPUSH
18271: PPUSH
18272: PPUSH
// begin tmp := [ ] ;
18273: LD_ADDR_VAR 0 3
18277: PUSH
18278: EMPTY
18279: ST_TO_ADDR
// for i := 1 to 6 do
18280: LD_ADDR_VAR 0 1
18284: PUSH
18285: DOUBLE
18286: LD_INT 1
18288: DEC
18289: ST_TO_ADDR
18290: LD_INT 6
18292: PUSH
18293: FOR_TO
18294: IFFALSE 18399
// begin uc_nation := nation_nature ;
18296: LD_ADDR_OWVAR 21
18300: PUSH
18301: LD_INT 0
18303: ST_TO_ADDR
// uc_side := 0 ;
18304: LD_ADDR_OWVAR 20
18308: PUSH
18309: LD_INT 0
18311: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18312: LD_ADDR_OWVAR 29
18316: PUSH
18317: LD_INT 12
18319: PUSH
18320: LD_INT 12
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: ST_TO_ADDR
// hc_agressivity := 20 ;
18327: LD_ADDR_OWVAR 35
18331: PUSH
18332: LD_INT 20
18334: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18335: LD_ADDR_OWVAR 28
18339: PUSH
18340: LD_INT 17
18342: ST_TO_ADDR
// hc_gallery :=  ;
18343: LD_ADDR_OWVAR 33
18347: PUSH
18348: LD_STRING 
18350: ST_TO_ADDR
// hc_name :=  ;
18351: LD_ADDR_OWVAR 26
18355: PUSH
18356: LD_STRING 
18358: ST_TO_ADDR
// un := CreateHuman ;
18359: LD_ADDR_VAR 0 2
18363: PUSH
18364: CALL_OW 44
18368: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18369: LD_VAR 0 2
18373: PPUSH
18374: LD_INT 1
18376: PPUSH
18377: CALL_OW 51
// tmp := tmp ^ un ;
18381: LD_ADDR_VAR 0 3
18385: PUSH
18386: LD_VAR 0 3
18390: PUSH
18391: LD_VAR 0 2
18395: ADD
18396: ST_TO_ADDR
// end ;
18397: GO 18293
18399: POP
18400: POP
// repeat wait ( 0 0$1 ) ;
18401: LD_INT 35
18403: PPUSH
18404: CALL_OW 67
// for un in tmp do
18408: LD_ADDR_VAR 0 2
18412: PUSH
18413: LD_VAR 0 3
18417: PUSH
18418: FOR_IN
18419: IFFALSE 18493
// begin if IsDead ( un ) then
18421: LD_VAR 0 2
18425: PPUSH
18426: CALL_OW 301
18430: IFFALSE 18450
// begin tmp := tmp diff un ;
18432: LD_ADDR_VAR 0 3
18436: PUSH
18437: LD_VAR 0 3
18441: PUSH
18442: LD_VAR 0 2
18446: DIFF
18447: ST_TO_ADDR
// continue ;
18448: GO 18418
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18450: LD_VAR 0 2
18454: PPUSH
18455: LD_INT 3
18457: PUSH
18458: LD_INT 22
18460: PUSH
18461: LD_INT 0
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: PPUSH
18472: CALL_OW 69
18476: PPUSH
18477: LD_VAR 0 2
18481: PPUSH
18482: CALL_OW 74
18486: PPUSH
18487: CALL_OW 115
// end ;
18491: GO 18418
18493: POP
18494: POP
// until not tmp ;
18495: LD_VAR 0 3
18499: NOT
18500: IFFALSE 18401
// end ;
18502: PPOPN 3
18504: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18505: LD_EXP 43
18509: PUSH
18510: LD_EXP 68
18514: AND
18515: IFFALSE 18569
18517: GO 18519
18519: DISABLE
// begin ToLua ( displayTroll(); ) ;
18520: LD_STRING displayTroll();
18522: PPUSH
18523: CALL_OW 559
// wait ( 3 3$00 ) ;
18527: LD_INT 6300
18529: PPUSH
18530: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18534: LD_STRING hideTroll();
18536: PPUSH
18537: CALL_OW 559
// wait ( 1 1$00 ) ;
18541: LD_INT 2100
18543: PPUSH
18544: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18548: LD_STRING displayTroll();
18550: PPUSH
18551: CALL_OW 559
// wait ( 1 1$00 ) ;
18555: LD_INT 2100
18557: PPUSH
18558: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18562: LD_STRING hideTroll();
18564: PPUSH
18565: CALL_OW 559
// end ;
18569: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18570: LD_EXP 43
18574: PUSH
18575: LD_EXP 69
18579: AND
18580: IFFALSE 18643
18582: GO 18584
18584: DISABLE
18585: LD_INT 0
18587: PPUSH
// begin p := 0 ;
18588: LD_ADDR_VAR 0 1
18592: PUSH
18593: LD_INT 0
18595: ST_TO_ADDR
// repeat game_speed := 1 ;
18596: LD_ADDR_OWVAR 65
18600: PUSH
18601: LD_INT 1
18603: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18604: LD_INT 35
18606: PPUSH
18607: CALL_OW 67
// p := p + 1 ;
18611: LD_ADDR_VAR 0 1
18615: PUSH
18616: LD_VAR 0 1
18620: PUSH
18621: LD_INT 1
18623: PLUS
18624: ST_TO_ADDR
// until p >= 60 ;
18625: LD_VAR 0 1
18629: PUSH
18630: LD_INT 60
18632: GREATEREQUAL
18633: IFFALSE 18596
// game_speed := 4 ;
18635: LD_ADDR_OWVAR 65
18639: PUSH
18640: LD_INT 4
18642: ST_TO_ADDR
// end ;
18643: PPOPN 1
18645: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18646: LD_EXP 43
18650: PUSH
18651: LD_EXP 70
18655: AND
18656: IFFALSE 18802
18658: GO 18660
18660: DISABLE
18661: LD_INT 0
18663: PPUSH
18664: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18665: LD_ADDR_VAR 0 1
18669: PUSH
18670: LD_INT 22
18672: PUSH
18673: LD_OWVAR 2
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: PUSH
18682: LD_INT 2
18684: PUSH
18685: LD_INT 30
18687: PUSH
18688: LD_INT 0
18690: PUSH
18691: EMPTY
18692: LIST
18693: LIST
18694: PUSH
18695: LD_INT 30
18697: PUSH
18698: LD_INT 1
18700: PUSH
18701: EMPTY
18702: LIST
18703: LIST
18704: PUSH
18705: EMPTY
18706: LIST
18707: LIST
18708: LIST
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: PPUSH
18714: CALL_OW 69
18718: ST_TO_ADDR
// if not depot then
18719: LD_VAR 0 1
18723: NOT
18724: IFFALSE 18728
// exit ;
18726: GO 18802
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18728: LD_ADDR_VAR 0 2
18732: PUSH
18733: LD_VAR 0 1
18737: PUSH
18738: LD_INT 1
18740: PPUSH
18741: LD_VAR 0 1
18745: PPUSH
18746: CALL_OW 12
18750: ARRAY
18751: PPUSH
18752: CALL_OW 274
18756: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18757: LD_VAR 0 2
18761: PPUSH
18762: LD_INT 1
18764: PPUSH
18765: LD_INT 0
18767: PPUSH
18768: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18772: LD_VAR 0 2
18776: PPUSH
18777: LD_INT 2
18779: PPUSH
18780: LD_INT 0
18782: PPUSH
18783: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18787: LD_VAR 0 2
18791: PPUSH
18792: LD_INT 3
18794: PPUSH
18795: LD_INT 0
18797: PPUSH
18798: CALL_OW 277
// end ;
18802: PPOPN 2
18804: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18805: LD_EXP 43
18809: PUSH
18810: LD_EXP 71
18814: AND
18815: IFFALSE 18912
18817: GO 18819
18819: DISABLE
18820: LD_INT 0
18822: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18823: LD_ADDR_VAR 0 1
18827: PUSH
18828: LD_INT 22
18830: PUSH
18831: LD_OWVAR 2
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: PUSH
18840: LD_INT 21
18842: PUSH
18843: LD_INT 1
18845: PUSH
18846: EMPTY
18847: LIST
18848: LIST
18849: PUSH
18850: LD_INT 3
18852: PUSH
18853: LD_INT 23
18855: PUSH
18856: LD_INT 0
18858: PUSH
18859: EMPTY
18860: LIST
18861: LIST
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: PUSH
18867: EMPTY
18868: LIST
18869: LIST
18870: LIST
18871: PPUSH
18872: CALL_OW 69
18876: ST_TO_ADDR
// if not tmp then
18877: LD_VAR 0 1
18881: NOT
18882: IFFALSE 18886
// exit ;
18884: GO 18912
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18886: LD_VAR 0 1
18890: PUSH
18891: LD_INT 1
18893: PPUSH
18894: LD_VAR 0 1
18898: PPUSH
18899: CALL_OW 12
18903: ARRAY
18904: PPUSH
18905: LD_INT 200
18907: PPUSH
18908: CALL_OW 234
// end ;
18912: PPOPN 1
18914: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18915: LD_EXP 43
18919: PUSH
18920: LD_EXP 72
18924: AND
18925: IFFALSE 19004
18927: GO 18929
18929: DISABLE
18930: LD_INT 0
18932: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18933: LD_ADDR_VAR 0 1
18937: PUSH
18938: LD_INT 22
18940: PUSH
18941: LD_OWVAR 2
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: LD_INT 21
18952: PUSH
18953: LD_INT 2
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: PPUSH
18964: CALL_OW 69
18968: ST_TO_ADDR
// if not tmp then
18969: LD_VAR 0 1
18973: NOT
18974: IFFALSE 18978
// exit ;
18976: GO 19004
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18978: LD_VAR 0 1
18982: PUSH
18983: LD_INT 1
18985: PPUSH
18986: LD_VAR 0 1
18990: PPUSH
18991: CALL_OW 12
18995: ARRAY
18996: PPUSH
18997: LD_INT 60
18999: PPUSH
19000: CALL_OW 234
// end ;
19004: PPOPN 1
19006: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19007: LD_EXP 43
19011: PUSH
19012: LD_EXP 73
19016: AND
19017: IFFALSE 19116
19019: GO 19021
19021: DISABLE
19022: LD_INT 0
19024: PPUSH
19025: PPUSH
// begin enable ;
19026: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19027: LD_ADDR_VAR 0 1
19031: PUSH
19032: LD_INT 22
19034: PUSH
19035: LD_OWVAR 2
19039: PUSH
19040: EMPTY
19041: LIST
19042: LIST
19043: PUSH
19044: LD_INT 61
19046: PUSH
19047: EMPTY
19048: LIST
19049: PUSH
19050: LD_INT 33
19052: PUSH
19053: LD_INT 2
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: PUSH
19060: EMPTY
19061: LIST
19062: LIST
19063: LIST
19064: PPUSH
19065: CALL_OW 69
19069: ST_TO_ADDR
// if not tmp then
19070: LD_VAR 0 1
19074: NOT
19075: IFFALSE 19079
// exit ;
19077: GO 19116
// for i in tmp do
19079: LD_ADDR_VAR 0 2
19083: PUSH
19084: LD_VAR 0 1
19088: PUSH
19089: FOR_IN
19090: IFFALSE 19114
// if IsControledBy ( i ) then
19092: LD_VAR 0 2
19096: PPUSH
19097: CALL_OW 312
19101: IFFALSE 19112
// ComUnlink ( i ) ;
19103: LD_VAR 0 2
19107: PPUSH
19108: CALL_OW 136
19112: GO 19089
19114: POP
19115: POP
// end ;
19116: PPOPN 2
19118: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19119: LD_EXP 43
19123: PUSH
19124: LD_EXP 74
19128: AND
19129: IFFALSE 19269
19131: GO 19133
19133: DISABLE
19134: LD_INT 0
19136: PPUSH
19137: PPUSH
// begin ToLua ( displayPowell(); ) ;
19138: LD_STRING displayPowell();
19140: PPUSH
19141: CALL_OW 559
// uc_side := 0 ;
19145: LD_ADDR_OWVAR 20
19149: PUSH
19150: LD_INT 0
19152: ST_TO_ADDR
// uc_nation := 2 ;
19153: LD_ADDR_OWVAR 21
19157: PUSH
19158: LD_INT 2
19160: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19161: LD_ADDR_OWVAR 37
19165: PUSH
19166: LD_INT 14
19168: ST_TO_ADDR
// vc_engine := engine_siberite ;
19169: LD_ADDR_OWVAR 39
19173: PUSH
19174: LD_INT 3
19176: ST_TO_ADDR
// vc_control := control_apeman ;
19177: LD_ADDR_OWVAR 38
19181: PUSH
19182: LD_INT 5
19184: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19185: LD_ADDR_OWVAR 40
19189: PUSH
19190: LD_INT 29
19192: ST_TO_ADDR
// un := CreateVehicle ;
19193: LD_ADDR_VAR 0 2
19197: PUSH
19198: CALL_OW 45
19202: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19203: LD_VAR 0 2
19207: PPUSH
19208: LD_INT 1
19210: PPUSH
19211: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19215: LD_INT 35
19217: PPUSH
19218: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19222: LD_VAR 0 2
19226: PPUSH
19227: LD_INT 22
19229: PUSH
19230: LD_OWVAR 2
19234: PUSH
19235: EMPTY
19236: LIST
19237: LIST
19238: PPUSH
19239: CALL_OW 69
19243: PPUSH
19244: LD_VAR 0 2
19248: PPUSH
19249: CALL_OW 74
19253: PPUSH
19254: CALL_OW 115
// until IsDead ( un ) ;
19258: LD_VAR 0 2
19262: PPUSH
19263: CALL_OW 301
19267: IFFALSE 19215
// end ;
19269: PPOPN 2
19271: END
// every 0 0$1 trigger StreamModeActive and sStu do
19272: LD_EXP 43
19276: PUSH
19277: LD_EXP 82
19281: AND
19282: IFFALSE 19298
19284: GO 19286
19286: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19287: LD_STRING displayStucuk();
19289: PPUSH
19290: CALL_OW 559
// ResetFog ;
19294: CALL_OW 335
// end ;
19298: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19299: LD_EXP 43
19303: PUSH
19304: LD_EXP 75
19308: AND
19309: IFFALSE 19450
19311: GO 19313
19313: DISABLE
19314: LD_INT 0
19316: PPUSH
19317: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19318: LD_ADDR_VAR 0 2
19322: PUSH
19323: LD_INT 22
19325: PUSH
19326: LD_OWVAR 2
19330: PUSH
19331: EMPTY
19332: LIST
19333: LIST
19334: PUSH
19335: LD_INT 21
19337: PUSH
19338: LD_INT 1
19340: PUSH
19341: EMPTY
19342: LIST
19343: LIST
19344: PUSH
19345: EMPTY
19346: LIST
19347: LIST
19348: PPUSH
19349: CALL_OW 69
19353: ST_TO_ADDR
// if not tmp then
19354: LD_VAR 0 2
19358: NOT
19359: IFFALSE 19363
// exit ;
19361: GO 19450
// un := tmp [ rand ( 1 , tmp ) ] ;
19363: LD_ADDR_VAR 0 1
19367: PUSH
19368: LD_VAR 0 2
19372: PUSH
19373: LD_INT 1
19375: PPUSH
19376: LD_VAR 0 2
19380: PPUSH
19381: CALL_OW 12
19385: ARRAY
19386: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19387: LD_VAR 0 1
19391: PPUSH
19392: LD_INT 0
19394: PPUSH
19395: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19399: LD_VAR 0 1
19403: PPUSH
19404: LD_OWVAR 3
19408: PUSH
19409: LD_VAR 0 1
19413: DIFF
19414: PPUSH
19415: LD_VAR 0 1
19419: PPUSH
19420: CALL_OW 74
19424: PPUSH
19425: CALL_OW 115
// wait ( 0 0$20 ) ;
19429: LD_INT 700
19431: PPUSH
19432: CALL_OW 67
// SetSide ( un , your_side ) ;
19436: LD_VAR 0 1
19440: PPUSH
19441: LD_OWVAR 2
19445: PPUSH
19446: CALL_OW 235
// end ;
19450: PPOPN 2
19452: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19453: LD_EXP 43
19457: PUSH
19458: LD_EXP 76
19462: AND
19463: IFFALSE 19569
19465: GO 19467
19467: DISABLE
19468: LD_INT 0
19470: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19471: LD_ADDR_VAR 0 1
19475: PUSH
19476: LD_INT 22
19478: PUSH
19479: LD_OWVAR 2
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: LD_INT 2
19490: PUSH
19491: LD_INT 30
19493: PUSH
19494: LD_INT 0
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: PUSH
19501: LD_INT 30
19503: PUSH
19504: LD_INT 1
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: LIST
19515: PUSH
19516: EMPTY
19517: LIST
19518: LIST
19519: PPUSH
19520: CALL_OW 69
19524: ST_TO_ADDR
// if not depot then
19525: LD_VAR 0 1
19529: NOT
19530: IFFALSE 19534
// exit ;
19532: GO 19569
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19534: LD_VAR 0 1
19538: PUSH
19539: LD_INT 1
19541: ARRAY
19542: PPUSH
19543: CALL_OW 250
19547: PPUSH
19548: LD_VAR 0 1
19552: PUSH
19553: LD_INT 1
19555: ARRAY
19556: PPUSH
19557: CALL_OW 251
19561: PPUSH
19562: LD_INT 70
19564: PPUSH
19565: CALL_OW 495
// end ;
19569: PPOPN 1
19571: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19572: LD_EXP 43
19576: PUSH
19577: LD_EXP 77
19581: AND
19582: IFFALSE 19793
19584: GO 19586
19586: DISABLE
19587: LD_INT 0
19589: PPUSH
19590: PPUSH
19591: PPUSH
19592: PPUSH
19593: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19594: LD_ADDR_VAR 0 5
19598: PUSH
19599: LD_INT 22
19601: PUSH
19602: LD_OWVAR 2
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: PUSH
19611: LD_INT 21
19613: PUSH
19614: LD_INT 1
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: PPUSH
19625: CALL_OW 69
19629: ST_TO_ADDR
// if not tmp then
19630: LD_VAR 0 5
19634: NOT
19635: IFFALSE 19639
// exit ;
19637: GO 19793
// for i in tmp do
19639: LD_ADDR_VAR 0 1
19643: PUSH
19644: LD_VAR 0 5
19648: PUSH
19649: FOR_IN
19650: IFFALSE 19791
// begin d := rand ( 0 , 5 ) ;
19652: LD_ADDR_VAR 0 4
19656: PUSH
19657: LD_INT 0
19659: PPUSH
19660: LD_INT 5
19662: PPUSH
19663: CALL_OW 12
19667: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19668: LD_ADDR_VAR 0 2
19672: PUSH
19673: LD_VAR 0 1
19677: PPUSH
19678: CALL_OW 250
19682: PPUSH
19683: LD_VAR 0 4
19687: PPUSH
19688: LD_INT 3
19690: PPUSH
19691: LD_INT 12
19693: PPUSH
19694: CALL_OW 12
19698: PPUSH
19699: CALL_OW 272
19703: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19704: LD_ADDR_VAR 0 3
19708: PUSH
19709: LD_VAR 0 1
19713: PPUSH
19714: CALL_OW 251
19718: PPUSH
19719: LD_VAR 0 4
19723: PPUSH
19724: LD_INT 3
19726: PPUSH
19727: LD_INT 12
19729: PPUSH
19730: CALL_OW 12
19734: PPUSH
19735: CALL_OW 273
19739: ST_TO_ADDR
// if ValidHex ( x , y ) then
19740: LD_VAR 0 2
19744: PPUSH
19745: LD_VAR 0 3
19749: PPUSH
19750: CALL_OW 488
19754: IFFALSE 19789
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19756: LD_VAR 0 1
19760: PPUSH
19761: LD_VAR 0 2
19765: PPUSH
19766: LD_VAR 0 3
19770: PPUSH
19771: LD_INT 3
19773: PPUSH
19774: LD_INT 6
19776: PPUSH
19777: CALL_OW 12
19781: PPUSH
19782: LD_INT 1
19784: PPUSH
19785: CALL_OW 483
// end ;
19789: GO 19649
19791: POP
19792: POP
// end ;
19793: PPOPN 5
19795: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19796: LD_EXP 43
19800: PUSH
19801: LD_EXP 78
19805: AND
19806: IFFALSE 19900
19808: GO 19810
19810: DISABLE
19811: LD_INT 0
19813: PPUSH
19814: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19815: LD_ADDR_VAR 0 2
19819: PUSH
19820: LD_INT 22
19822: PUSH
19823: LD_OWVAR 2
19827: PUSH
19828: EMPTY
19829: LIST
19830: LIST
19831: PUSH
19832: LD_INT 32
19834: PUSH
19835: LD_INT 1
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: PUSH
19842: LD_INT 21
19844: PUSH
19845: LD_INT 2
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: LIST
19856: PPUSH
19857: CALL_OW 69
19861: ST_TO_ADDR
// if not tmp then
19862: LD_VAR 0 2
19866: NOT
19867: IFFALSE 19871
// exit ;
19869: GO 19900
// for i in tmp do
19871: LD_ADDR_VAR 0 1
19875: PUSH
19876: LD_VAR 0 2
19880: PUSH
19881: FOR_IN
19882: IFFALSE 19898
// SetFuel ( i , 0 ) ;
19884: LD_VAR 0 1
19888: PPUSH
19889: LD_INT 0
19891: PPUSH
19892: CALL_OW 240
19896: GO 19881
19898: POP
19899: POP
// end ;
19900: PPOPN 2
19902: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19903: LD_EXP 43
19907: PUSH
19908: LD_EXP 79
19912: AND
19913: IFFALSE 19979
19915: GO 19917
19917: DISABLE
19918: LD_INT 0
19920: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19921: LD_ADDR_VAR 0 1
19925: PUSH
19926: LD_INT 22
19928: PUSH
19929: LD_OWVAR 2
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: PUSH
19938: LD_INT 30
19940: PUSH
19941: LD_INT 29
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: PUSH
19948: EMPTY
19949: LIST
19950: LIST
19951: PPUSH
19952: CALL_OW 69
19956: ST_TO_ADDR
// if not tmp then
19957: LD_VAR 0 1
19961: NOT
19962: IFFALSE 19966
// exit ;
19964: GO 19979
// DestroyUnit ( tmp [ 1 ] ) ;
19966: LD_VAR 0 1
19970: PUSH
19971: LD_INT 1
19973: ARRAY
19974: PPUSH
19975: CALL_OW 65
// end ;
19979: PPOPN 1
19981: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19982: LD_EXP 43
19986: PUSH
19987: LD_EXP 81
19991: AND
19992: IFFALSE 20121
19994: GO 19996
19996: DISABLE
19997: LD_INT 0
19999: PPUSH
// begin uc_side := 0 ;
20000: LD_ADDR_OWVAR 20
20004: PUSH
20005: LD_INT 0
20007: ST_TO_ADDR
// uc_nation := nation_arabian ;
20008: LD_ADDR_OWVAR 21
20012: PUSH
20013: LD_INT 2
20015: ST_TO_ADDR
// hc_gallery :=  ;
20016: LD_ADDR_OWVAR 33
20020: PUSH
20021: LD_STRING 
20023: ST_TO_ADDR
// hc_name :=  ;
20024: LD_ADDR_OWVAR 26
20028: PUSH
20029: LD_STRING 
20031: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20032: LD_INT 1
20034: PPUSH
20035: LD_INT 11
20037: PPUSH
20038: LD_INT 10
20040: PPUSH
20041: CALL_OW 380
// un := CreateHuman ;
20045: LD_ADDR_VAR 0 1
20049: PUSH
20050: CALL_OW 44
20054: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20055: LD_VAR 0 1
20059: PPUSH
20060: LD_INT 1
20062: PPUSH
20063: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20067: LD_INT 35
20069: PPUSH
20070: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20074: LD_VAR 0 1
20078: PPUSH
20079: LD_INT 22
20081: PUSH
20082: LD_OWVAR 2
20086: PUSH
20087: EMPTY
20088: LIST
20089: LIST
20090: PPUSH
20091: CALL_OW 69
20095: PPUSH
20096: LD_VAR 0 1
20100: PPUSH
20101: CALL_OW 74
20105: PPUSH
20106: CALL_OW 115
// until IsDead ( un ) ;
20110: LD_VAR 0 1
20114: PPUSH
20115: CALL_OW 301
20119: IFFALSE 20067
// end ;
20121: PPOPN 1
20123: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20124: LD_EXP 43
20128: PUSH
20129: LD_EXP 83
20133: AND
20134: IFFALSE 20146
20136: GO 20138
20138: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20139: LD_STRING earthquake(getX(game), 0, 32)
20141: PPUSH
20142: CALL_OW 559
20146: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20147: LD_EXP 43
20151: PUSH
20152: LD_EXP 84
20156: AND
20157: IFFALSE 20248
20159: GO 20161
20161: DISABLE
20162: LD_INT 0
20164: PPUSH
// begin enable ;
20165: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20166: LD_ADDR_VAR 0 1
20170: PUSH
20171: LD_INT 22
20173: PUSH
20174: LD_OWVAR 2
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: PUSH
20183: LD_INT 21
20185: PUSH
20186: LD_INT 2
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: PUSH
20193: LD_INT 33
20195: PUSH
20196: LD_INT 3
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: PUSH
20203: EMPTY
20204: LIST
20205: LIST
20206: LIST
20207: PPUSH
20208: CALL_OW 69
20212: ST_TO_ADDR
// if not tmp then
20213: LD_VAR 0 1
20217: NOT
20218: IFFALSE 20222
// exit ;
20220: GO 20248
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20222: LD_VAR 0 1
20226: PUSH
20227: LD_INT 1
20229: PPUSH
20230: LD_VAR 0 1
20234: PPUSH
20235: CALL_OW 12
20239: ARRAY
20240: PPUSH
20241: LD_INT 1
20243: PPUSH
20244: CALL_OW 234
// end ;
20248: PPOPN 1
20250: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20251: LD_EXP 43
20255: PUSH
20256: LD_EXP 85
20260: AND
20261: IFFALSE 20402
20263: GO 20265
20265: DISABLE
20266: LD_INT 0
20268: PPUSH
20269: PPUSH
20270: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20271: LD_ADDR_VAR 0 3
20275: PUSH
20276: LD_INT 22
20278: PUSH
20279: LD_OWVAR 2
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: PUSH
20288: LD_INT 25
20290: PUSH
20291: LD_INT 1
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: PPUSH
20302: CALL_OW 69
20306: ST_TO_ADDR
// if not tmp then
20307: LD_VAR 0 3
20311: NOT
20312: IFFALSE 20316
// exit ;
20314: GO 20402
// un := tmp [ rand ( 1 , tmp ) ] ;
20316: LD_ADDR_VAR 0 2
20320: PUSH
20321: LD_VAR 0 3
20325: PUSH
20326: LD_INT 1
20328: PPUSH
20329: LD_VAR 0 3
20333: PPUSH
20334: CALL_OW 12
20338: ARRAY
20339: ST_TO_ADDR
// if Crawls ( un ) then
20340: LD_VAR 0 2
20344: PPUSH
20345: CALL_OW 318
20349: IFFALSE 20360
// ComWalk ( un ) ;
20351: LD_VAR 0 2
20355: PPUSH
20356: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20360: LD_VAR 0 2
20364: PPUSH
20365: LD_INT 9
20367: PPUSH
20368: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20372: LD_INT 28
20374: PPUSH
20375: LD_OWVAR 2
20379: PPUSH
20380: LD_INT 2
20382: PPUSH
20383: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20387: LD_INT 29
20389: PPUSH
20390: LD_OWVAR 2
20394: PPUSH
20395: LD_INT 2
20397: PPUSH
20398: CALL_OW 322
// end ;
20402: PPOPN 3
20404: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20405: LD_EXP 43
20409: PUSH
20410: LD_EXP 86
20414: AND
20415: IFFALSE 20526
20417: GO 20419
20419: DISABLE
20420: LD_INT 0
20422: PPUSH
20423: PPUSH
20424: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20425: LD_ADDR_VAR 0 3
20429: PUSH
20430: LD_INT 22
20432: PUSH
20433: LD_OWVAR 2
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: PUSH
20442: LD_INT 25
20444: PUSH
20445: LD_INT 1
20447: PUSH
20448: EMPTY
20449: LIST
20450: LIST
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: PPUSH
20456: CALL_OW 69
20460: ST_TO_ADDR
// if not tmp then
20461: LD_VAR 0 3
20465: NOT
20466: IFFALSE 20470
// exit ;
20468: GO 20526
// un := tmp [ rand ( 1 , tmp ) ] ;
20470: LD_ADDR_VAR 0 2
20474: PUSH
20475: LD_VAR 0 3
20479: PUSH
20480: LD_INT 1
20482: PPUSH
20483: LD_VAR 0 3
20487: PPUSH
20488: CALL_OW 12
20492: ARRAY
20493: ST_TO_ADDR
// if Crawls ( un ) then
20494: LD_VAR 0 2
20498: PPUSH
20499: CALL_OW 318
20503: IFFALSE 20514
// ComWalk ( un ) ;
20505: LD_VAR 0 2
20509: PPUSH
20510: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20514: LD_VAR 0 2
20518: PPUSH
20519: LD_INT 8
20521: PPUSH
20522: CALL_OW 336
// end ;
20526: PPOPN 3
20528: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20529: LD_EXP 43
20533: PUSH
20534: LD_EXP 87
20538: AND
20539: IFFALSE 20683
20541: GO 20543
20543: DISABLE
20544: LD_INT 0
20546: PPUSH
20547: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20548: LD_ADDR_VAR 0 2
20552: PUSH
20553: LD_INT 22
20555: PUSH
20556: LD_OWVAR 2
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: PUSH
20565: LD_INT 21
20567: PUSH
20568: LD_INT 2
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: PUSH
20575: LD_INT 2
20577: PUSH
20578: LD_INT 34
20580: PUSH
20581: LD_INT 12
20583: PUSH
20584: EMPTY
20585: LIST
20586: LIST
20587: PUSH
20588: LD_INT 34
20590: PUSH
20591: LD_INT 51
20593: PUSH
20594: EMPTY
20595: LIST
20596: LIST
20597: PUSH
20598: LD_INT 34
20600: PUSH
20601: LD_INT 32
20603: PUSH
20604: EMPTY
20605: LIST
20606: LIST
20607: PUSH
20608: EMPTY
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: PUSH
20614: EMPTY
20615: LIST
20616: LIST
20617: LIST
20618: PPUSH
20619: CALL_OW 69
20623: ST_TO_ADDR
// if not tmp then
20624: LD_VAR 0 2
20628: NOT
20629: IFFALSE 20633
// exit ;
20631: GO 20683
// for i in tmp do
20633: LD_ADDR_VAR 0 1
20637: PUSH
20638: LD_VAR 0 2
20642: PUSH
20643: FOR_IN
20644: IFFALSE 20681
// if GetCargo ( i , mat_artifact ) = 0 then
20646: LD_VAR 0 1
20650: PPUSH
20651: LD_INT 4
20653: PPUSH
20654: CALL_OW 289
20658: PUSH
20659: LD_INT 0
20661: EQUAL
20662: IFFALSE 20679
// SetCargo ( i , mat_siberit , 100 ) ;
20664: LD_VAR 0 1
20668: PPUSH
20669: LD_INT 3
20671: PPUSH
20672: LD_INT 100
20674: PPUSH
20675: CALL_OW 290
20679: GO 20643
20681: POP
20682: POP
// end ;
20683: PPOPN 2
20685: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20686: LD_EXP 43
20690: PUSH
20691: LD_EXP 88
20695: AND
20696: IFFALSE 20849
20698: GO 20700
20700: DISABLE
20701: LD_INT 0
20703: PPUSH
20704: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20705: LD_ADDR_VAR 0 2
20709: PUSH
20710: LD_INT 22
20712: PUSH
20713: LD_OWVAR 2
20717: PUSH
20718: EMPTY
20719: LIST
20720: LIST
20721: PPUSH
20722: CALL_OW 69
20726: ST_TO_ADDR
// if not tmp then
20727: LD_VAR 0 2
20731: NOT
20732: IFFALSE 20736
// exit ;
20734: GO 20849
// for i := 1 to 2 do
20736: LD_ADDR_VAR 0 1
20740: PUSH
20741: DOUBLE
20742: LD_INT 1
20744: DEC
20745: ST_TO_ADDR
20746: LD_INT 2
20748: PUSH
20749: FOR_TO
20750: IFFALSE 20847
// begin uc_side := your_side ;
20752: LD_ADDR_OWVAR 20
20756: PUSH
20757: LD_OWVAR 2
20761: ST_TO_ADDR
// uc_nation := nation_american ;
20762: LD_ADDR_OWVAR 21
20766: PUSH
20767: LD_INT 1
20769: ST_TO_ADDR
// vc_chassis := us_morphling ;
20770: LD_ADDR_OWVAR 37
20774: PUSH
20775: LD_INT 5
20777: ST_TO_ADDR
// vc_engine := engine_siberite ;
20778: LD_ADDR_OWVAR 39
20782: PUSH
20783: LD_INT 3
20785: ST_TO_ADDR
// vc_control := control_computer ;
20786: LD_ADDR_OWVAR 38
20790: PUSH
20791: LD_INT 3
20793: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20794: LD_ADDR_OWVAR 40
20798: PUSH
20799: LD_INT 10
20801: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
20802: CALL_OW 45
20806: PPUSH
20807: LD_VAR 0 2
20811: PUSH
20812: LD_INT 1
20814: ARRAY
20815: PPUSH
20816: CALL_OW 250
20820: PPUSH
20821: LD_VAR 0 2
20825: PUSH
20826: LD_INT 1
20828: ARRAY
20829: PPUSH
20830: CALL_OW 251
20834: PPUSH
20835: LD_INT 12
20837: PPUSH
20838: LD_INT 1
20840: PPUSH
20841: CALL_OW 50
// end ;
20845: GO 20749
20847: POP
20848: POP
// end ;
20849: PPOPN 2
20851: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20852: LD_EXP 43
20856: PUSH
20857: LD_EXP 89
20861: AND
20862: IFFALSE 21084
20864: GO 20866
20866: DISABLE
20867: LD_INT 0
20869: PPUSH
20870: PPUSH
20871: PPUSH
20872: PPUSH
20873: PPUSH
20874: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20875: LD_ADDR_VAR 0 6
20879: PUSH
20880: LD_INT 22
20882: PUSH
20883: LD_OWVAR 2
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: PUSH
20892: LD_INT 21
20894: PUSH
20895: LD_INT 1
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: PUSH
20902: LD_INT 3
20904: PUSH
20905: LD_INT 23
20907: PUSH
20908: LD_INT 0
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: PUSH
20915: EMPTY
20916: LIST
20917: LIST
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: LIST
20923: PPUSH
20924: CALL_OW 69
20928: ST_TO_ADDR
// if not tmp then
20929: LD_VAR 0 6
20933: NOT
20934: IFFALSE 20938
// exit ;
20936: GO 21084
// s1 := rand ( 1 , 4 ) ;
20938: LD_ADDR_VAR 0 2
20942: PUSH
20943: LD_INT 1
20945: PPUSH
20946: LD_INT 4
20948: PPUSH
20949: CALL_OW 12
20953: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20954: LD_ADDR_VAR 0 4
20958: PUSH
20959: LD_VAR 0 6
20963: PUSH
20964: LD_INT 1
20966: ARRAY
20967: PPUSH
20968: LD_VAR 0 2
20972: PPUSH
20973: CALL_OW 259
20977: ST_TO_ADDR
// if s1 = 1 then
20978: LD_VAR 0 2
20982: PUSH
20983: LD_INT 1
20985: EQUAL
20986: IFFALSE 21006
// s2 := rand ( 2 , 4 ) else
20988: LD_ADDR_VAR 0 3
20992: PUSH
20993: LD_INT 2
20995: PPUSH
20996: LD_INT 4
20998: PPUSH
20999: CALL_OW 12
21003: ST_TO_ADDR
21004: GO 21014
// s2 := 1 ;
21006: LD_ADDR_VAR 0 3
21010: PUSH
21011: LD_INT 1
21013: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21014: LD_ADDR_VAR 0 5
21018: PUSH
21019: LD_VAR 0 6
21023: PUSH
21024: LD_INT 1
21026: ARRAY
21027: PPUSH
21028: LD_VAR 0 3
21032: PPUSH
21033: CALL_OW 259
21037: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21038: LD_VAR 0 6
21042: PUSH
21043: LD_INT 1
21045: ARRAY
21046: PPUSH
21047: LD_VAR 0 2
21051: PPUSH
21052: LD_VAR 0 5
21056: PPUSH
21057: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21061: LD_VAR 0 6
21065: PUSH
21066: LD_INT 1
21068: ARRAY
21069: PPUSH
21070: LD_VAR 0 3
21074: PPUSH
21075: LD_VAR 0 4
21079: PPUSH
21080: CALL_OW 237
// end ;
21084: PPOPN 6
21086: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21087: LD_EXP 43
21091: PUSH
21092: LD_EXP 90
21096: AND
21097: IFFALSE 21176
21099: GO 21101
21101: DISABLE
21102: LD_INT 0
21104: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21105: LD_ADDR_VAR 0 1
21109: PUSH
21110: LD_INT 22
21112: PUSH
21113: LD_OWVAR 2
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: PUSH
21122: LD_INT 30
21124: PUSH
21125: LD_INT 3
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: PUSH
21132: EMPTY
21133: LIST
21134: LIST
21135: PPUSH
21136: CALL_OW 69
21140: ST_TO_ADDR
// if not tmp then
21141: LD_VAR 0 1
21145: NOT
21146: IFFALSE 21150
// exit ;
21148: GO 21176
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21150: LD_VAR 0 1
21154: PUSH
21155: LD_INT 1
21157: PPUSH
21158: LD_VAR 0 1
21162: PPUSH
21163: CALL_OW 12
21167: ARRAY
21168: PPUSH
21169: LD_INT 1
21171: PPUSH
21172: CALL_OW 234
// end ;
21176: PPOPN 1
21178: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21179: LD_EXP 43
21183: PUSH
21184: LD_EXP 91
21188: AND
21189: IFFALSE 21301
21191: GO 21193
21193: DISABLE
21194: LD_INT 0
21196: PPUSH
21197: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21198: LD_ADDR_VAR 0 2
21202: PUSH
21203: LD_INT 22
21205: PUSH
21206: LD_OWVAR 2
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: PUSH
21215: LD_INT 2
21217: PUSH
21218: LD_INT 30
21220: PUSH
21221: LD_INT 27
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: PUSH
21228: LD_INT 30
21230: PUSH
21231: LD_INT 26
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: PUSH
21238: LD_INT 30
21240: PUSH
21241: LD_INT 28
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: PPUSH
21258: CALL_OW 69
21262: ST_TO_ADDR
// if not tmp then
21263: LD_VAR 0 2
21267: NOT
21268: IFFALSE 21272
// exit ;
21270: GO 21301
// for i in tmp do
21272: LD_ADDR_VAR 0 1
21276: PUSH
21277: LD_VAR 0 2
21281: PUSH
21282: FOR_IN
21283: IFFALSE 21299
// SetLives ( i , 1 ) ;
21285: LD_VAR 0 1
21289: PPUSH
21290: LD_INT 1
21292: PPUSH
21293: CALL_OW 234
21297: GO 21282
21299: POP
21300: POP
// end ;
21301: PPOPN 2
21303: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21304: LD_EXP 43
21308: PUSH
21309: LD_EXP 92
21313: AND
21314: IFFALSE 21588
21316: GO 21318
21318: DISABLE
21319: LD_INT 0
21321: PPUSH
21322: PPUSH
21323: PPUSH
// begin i := rand ( 1 , 7 ) ;
21324: LD_ADDR_VAR 0 1
21328: PUSH
21329: LD_INT 1
21331: PPUSH
21332: LD_INT 7
21334: PPUSH
21335: CALL_OW 12
21339: ST_TO_ADDR
// case i of 1 :
21340: LD_VAR 0 1
21344: PUSH
21345: LD_INT 1
21347: DOUBLE
21348: EQUAL
21349: IFTRUE 21353
21351: GO 21363
21353: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21354: LD_STRING earthquake(getX(game), 0, 32)
21356: PPUSH
21357: CALL_OW 559
21361: GO 21588
21363: LD_INT 2
21365: DOUBLE
21366: EQUAL
21367: IFTRUE 21371
21369: GO 21385
21371: POP
// begin ToLua ( displayStucuk(); ) ;
21372: LD_STRING displayStucuk();
21374: PPUSH
21375: CALL_OW 559
// ResetFog ;
21379: CALL_OW 335
// end ; 3 :
21383: GO 21588
21385: LD_INT 3
21387: DOUBLE
21388: EQUAL
21389: IFTRUE 21393
21391: GO 21497
21393: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21394: LD_ADDR_VAR 0 2
21398: PUSH
21399: LD_INT 22
21401: PUSH
21402: LD_OWVAR 2
21406: PUSH
21407: EMPTY
21408: LIST
21409: LIST
21410: PUSH
21411: LD_INT 25
21413: PUSH
21414: LD_INT 1
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: PUSH
21421: EMPTY
21422: LIST
21423: LIST
21424: PPUSH
21425: CALL_OW 69
21429: ST_TO_ADDR
// if not tmp then
21430: LD_VAR 0 2
21434: NOT
21435: IFFALSE 21439
// exit ;
21437: GO 21588
// un := tmp [ rand ( 1 , tmp ) ] ;
21439: LD_ADDR_VAR 0 3
21443: PUSH
21444: LD_VAR 0 2
21448: PUSH
21449: LD_INT 1
21451: PPUSH
21452: LD_VAR 0 2
21456: PPUSH
21457: CALL_OW 12
21461: ARRAY
21462: ST_TO_ADDR
// if Crawls ( un ) then
21463: LD_VAR 0 3
21467: PPUSH
21468: CALL_OW 318
21472: IFFALSE 21483
// ComWalk ( un ) ;
21474: LD_VAR 0 3
21478: PPUSH
21479: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21483: LD_VAR 0 3
21487: PPUSH
21488: LD_INT 8
21490: PPUSH
21491: CALL_OW 336
// end ; 4 :
21495: GO 21588
21497: LD_INT 4
21499: DOUBLE
21500: EQUAL
21501: IFTRUE 21505
21503: GO 21566
21505: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21506: LD_ADDR_VAR 0 2
21510: PUSH
21511: LD_INT 22
21513: PUSH
21514: LD_OWVAR 2
21518: PUSH
21519: EMPTY
21520: LIST
21521: LIST
21522: PUSH
21523: LD_INT 30
21525: PUSH
21526: LD_INT 29
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: PPUSH
21537: CALL_OW 69
21541: ST_TO_ADDR
// if not tmp then
21542: LD_VAR 0 2
21546: NOT
21547: IFFALSE 21551
// exit ;
21549: GO 21588
// DestroyUnit ( tmp [ 1 ] ) ;
21551: LD_VAR 0 2
21555: PUSH
21556: LD_INT 1
21558: ARRAY
21559: PPUSH
21560: CALL_OW 65
// end ; 5 .. 7 :
21564: GO 21588
21566: LD_INT 5
21568: DOUBLE
21569: GREATEREQUAL
21570: IFFALSE 21578
21572: LD_INT 7
21574: DOUBLE
21575: LESSEQUAL
21576: IFTRUE 21580
21578: GO 21587
21580: POP
// StreamSibBomb ; end ;
21581: CALL 17868 0 0
21585: GO 21588
21587: POP
// end ;
21588: PPOPN 3
21590: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21591: LD_EXP 43
21595: PUSH
21596: LD_EXP 93
21600: AND
21601: IFFALSE 21757
21603: GO 21605
21605: DISABLE
21606: LD_INT 0
21608: PPUSH
21609: PPUSH
21610: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21611: LD_ADDR_VAR 0 2
21615: PUSH
21616: LD_INT 81
21618: PUSH
21619: LD_OWVAR 2
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: PUSH
21628: LD_INT 2
21630: PUSH
21631: LD_INT 21
21633: PUSH
21634: LD_INT 1
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: PUSH
21641: LD_INT 21
21643: PUSH
21644: LD_INT 2
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: LIST
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: PPUSH
21660: CALL_OW 69
21664: ST_TO_ADDR
// if not tmp then
21665: LD_VAR 0 2
21669: NOT
21670: IFFALSE 21674
// exit ;
21672: GO 21757
// p := 0 ;
21674: LD_ADDR_VAR 0 3
21678: PUSH
21679: LD_INT 0
21681: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21682: LD_INT 35
21684: PPUSH
21685: CALL_OW 67
// p := p + 1 ;
21689: LD_ADDR_VAR 0 3
21693: PUSH
21694: LD_VAR 0 3
21698: PUSH
21699: LD_INT 1
21701: PLUS
21702: ST_TO_ADDR
// for i in tmp do
21703: LD_ADDR_VAR 0 1
21707: PUSH
21708: LD_VAR 0 2
21712: PUSH
21713: FOR_IN
21714: IFFALSE 21745
// if GetLives ( i ) < 1000 then
21716: LD_VAR 0 1
21720: PPUSH
21721: CALL_OW 256
21725: PUSH
21726: LD_INT 1000
21728: LESS
21729: IFFALSE 21743
// SetLives ( i , 1000 ) ;
21731: LD_VAR 0 1
21735: PPUSH
21736: LD_INT 1000
21738: PPUSH
21739: CALL_OW 234
21743: GO 21713
21745: POP
21746: POP
// until p > 20 ;
21747: LD_VAR 0 3
21751: PUSH
21752: LD_INT 20
21754: GREATER
21755: IFFALSE 21682
// end ;
21757: PPOPN 3
21759: END
// every 0 0$1 trigger StreamModeActive and sTime do
21760: LD_EXP 43
21764: PUSH
21765: LD_EXP 94
21769: AND
21770: IFFALSE 21805
21772: GO 21774
21774: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21775: LD_INT 28
21777: PPUSH
21778: LD_OWVAR 2
21782: PPUSH
21783: LD_INT 2
21785: PPUSH
21786: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21790: LD_INT 30
21792: PPUSH
21793: LD_OWVAR 2
21797: PPUSH
21798: LD_INT 2
21800: PPUSH
21801: CALL_OW 322
// end ;
21805: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21806: LD_EXP 43
21810: PUSH
21811: LD_EXP 95
21815: AND
21816: IFFALSE 21937
21818: GO 21820
21820: DISABLE
21821: LD_INT 0
21823: PPUSH
21824: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21825: LD_ADDR_VAR 0 2
21829: PUSH
21830: LD_INT 22
21832: PUSH
21833: LD_OWVAR 2
21837: PUSH
21838: EMPTY
21839: LIST
21840: LIST
21841: PUSH
21842: LD_INT 21
21844: PUSH
21845: LD_INT 1
21847: PUSH
21848: EMPTY
21849: LIST
21850: LIST
21851: PUSH
21852: LD_INT 3
21854: PUSH
21855: LD_INT 23
21857: PUSH
21858: LD_INT 0
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: PUSH
21869: EMPTY
21870: LIST
21871: LIST
21872: LIST
21873: PPUSH
21874: CALL_OW 69
21878: ST_TO_ADDR
// if not tmp then
21879: LD_VAR 0 2
21883: NOT
21884: IFFALSE 21888
// exit ;
21886: GO 21937
// for i in tmp do
21888: LD_ADDR_VAR 0 1
21892: PUSH
21893: LD_VAR 0 2
21897: PUSH
21898: FOR_IN
21899: IFFALSE 21935
// begin if Crawls ( i ) then
21901: LD_VAR 0 1
21905: PPUSH
21906: CALL_OW 318
21910: IFFALSE 21921
// ComWalk ( i ) ;
21912: LD_VAR 0 1
21916: PPUSH
21917: CALL_OW 138
// SetClass ( i , 2 ) ;
21921: LD_VAR 0 1
21925: PPUSH
21926: LD_INT 2
21928: PPUSH
21929: CALL_OW 336
// end ;
21933: GO 21898
21935: POP
21936: POP
// end ;
21937: PPOPN 2
21939: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21940: LD_EXP 43
21944: PUSH
21945: LD_EXP 96
21949: AND
21950: IFFALSE 22231
21952: GO 21954
21954: DISABLE
21955: LD_INT 0
21957: PPUSH
21958: PPUSH
21959: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21960: LD_OWVAR 2
21964: PPUSH
21965: LD_INT 9
21967: PPUSH
21968: LD_INT 1
21970: PPUSH
21971: LD_INT 1
21973: PPUSH
21974: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21978: LD_INT 9
21980: PPUSH
21981: LD_OWVAR 2
21985: PPUSH
21986: CALL_OW 343
// uc_side := 9 ;
21990: LD_ADDR_OWVAR 20
21994: PUSH
21995: LD_INT 9
21997: ST_TO_ADDR
// uc_nation := 2 ;
21998: LD_ADDR_OWVAR 21
22002: PUSH
22003: LD_INT 2
22005: ST_TO_ADDR
// hc_name := Dark Warrior ;
22006: LD_ADDR_OWVAR 26
22010: PUSH
22011: LD_STRING Dark Warrior
22013: ST_TO_ADDR
// hc_gallery :=  ;
22014: LD_ADDR_OWVAR 33
22018: PUSH
22019: LD_STRING 
22021: ST_TO_ADDR
// hc_noskilllimit := true ;
22022: LD_ADDR_OWVAR 76
22026: PUSH
22027: LD_INT 1
22029: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22030: LD_ADDR_OWVAR 31
22034: PUSH
22035: LD_INT 30
22037: PUSH
22038: LD_INT 30
22040: PUSH
22041: LD_INT 30
22043: PUSH
22044: LD_INT 30
22046: PUSH
22047: EMPTY
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: ST_TO_ADDR
// un := CreateHuman ;
22053: LD_ADDR_VAR 0 3
22057: PUSH
22058: CALL_OW 44
22062: ST_TO_ADDR
// hc_noskilllimit := false ;
22063: LD_ADDR_OWVAR 76
22067: PUSH
22068: LD_INT 0
22070: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22071: LD_VAR 0 3
22075: PPUSH
22076: LD_INT 1
22078: PPUSH
22079: CALL_OW 51
// p := 0 ;
22083: LD_ADDR_VAR 0 2
22087: PUSH
22088: LD_INT 0
22090: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22091: LD_INT 35
22093: PPUSH
22094: CALL_OW 67
// p := p + 1 ;
22098: LD_ADDR_VAR 0 2
22102: PUSH
22103: LD_VAR 0 2
22107: PUSH
22108: LD_INT 1
22110: PLUS
22111: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22112: LD_VAR 0 3
22116: PPUSH
22117: CALL_OW 256
22121: PUSH
22122: LD_INT 1000
22124: LESS
22125: IFFALSE 22139
// SetLives ( un , 1000 ) ;
22127: LD_VAR 0 3
22131: PPUSH
22132: LD_INT 1000
22134: PPUSH
22135: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22139: LD_VAR 0 3
22143: PPUSH
22144: LD_INT 81
22146: PUSH
22147: LD_OWVAR 2
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: PUSH
22156: LD_INT 91
22158: PUSH
22159: LD_VAR 0 3
22163: PUSH
22164: LD_INT 30
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: LIST
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: PPUSH
22176: CALL_OW 69
22180: PPUSH
22181: LD_VAR 0 3
22185: PPUSH
22186: CALL_OW 74
22190: PPUSH
22191: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
22195: LD_VAR 0 2
22199: PUSH
22200: LD_INT 60
22202: GREATER
22203: PUSH
22204: LD_VAR 0 3
22208: PPUSH
22209: CALL_OW 301
22213: OR
22214: IFFALSE 22091
// if un then
22216: LD_VAR 0 3
22220: IFFALSE 22231
// RemoveUnit ( un ) ;
22222: LD_VAR 0 3
22226: PPUSH
22227: CALL_OW 64
// end ; end_of_file
22231: PPOPN 3
22233: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
22234: LD_INT 0
22236: PPUSH
22237: PPUSH
22238: PPUSH
22239: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22240: LD_VAR 0 1
22244: PPUSH
22245: CALL_OW 264
22249: PUSH
22250: LD_EXP 34
22254: EQUAL
22255: IFFALSE 22327
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22257: LD_INT 68
22259: PPUSH
22260: LD_VAR 0 1
22264: PPUSH
22265: CALL_OW 255
22269: PPUSH
22270: CALL_OW 321
22274: PUSH
22275: LD_INT 2
22277: EQUAL
22278: IFFALSE 22290
// eff := 70 else
22280: LD_ADDR_VAR 0 4
22284: PUSH
22285: LD_INT 70
22287: ST_TO_ADDR
22288: GO 22298
// eff := 30 ;
22290: LD_ADDR_VAR 0 4
22294: PUSH
22295: LD_INT 30
22297: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22298: LD_VAR 0 1
22302: PPUSH
22303: CALL_OW 250
22307: PPUSH
22308: LD_VAR 0 1
22312: PPUSH
22313: CALL_OW 251
22317: PPUSH
22318: LD_VAR 0 4
22322: PPUSH
22323: CALL_OW 495
// end ; end ;
22327: LD_VAR 0 2
22331: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22332: LD_INT 0
22334: PPUSH
// end ;
22335: LD_VAR 0 4
22339: RET
// export function SOS_Command ( cmd ) ; begin
22340: LD_INT 0
22342: PPUSH
// end ;
22343: LD_VAR 0 2
22347: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22348: LD_VAR 0 1
22352: PUSH
22353: LD_INT 255
22355: EQUAL
22356: PUSH
22357: LD_VAR 0 2
22361: PPUSH
22362: CALL_OW 264
22366: PUSH
22367: LD_INT 14
22369: PUSH
22370: LD_INT 53
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: IN
22377: AND
22378: PUSH
22379: LD_VAR 0 4
22383: PPUSH
22384: LD_VAR 0 5
22388: PPUSH
22389: CALL_OW 488
22393: AND
22394: IFFALSE 22418
// CutTreeXYR ( unit , x , y , 12 ) ;
22396: LD_VAR 0 2
22400: PPUSH
22401: LD_VAR 0 4
22405: PPUSH
22406: LD_VAR 0 5
22410: PPUSH
22411: LD_INT 12
22413: PPUSH
22414: CALL 22421 0 4
// end ;
22418: PPOPN 5
22420: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22421: LD_INT 0
22423: PPUSH
22424: PPUSH
22425: PPUSH
22426: PPUSH
22427: PPUSH
22428: PPUSH
22429: PPUSH
22430: PPUSH
22431: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
22432: LD_VAR 0 1
22436: NOT
22437: PUSH
22438: LD_VAR 0 2
22442: PPUSH
22443: LD_VAR 0 3
22447: PPUSH
22448: CALL_OW 488
22452: NOT
22453: OR
22454: PUSH
22455: LD_VAR 0 4
22459: NOT
22460: OR
22461: IFFALSE 22465
// exit ;
22463: GO 22805
// list := [ ] ;
22465: LD_ADDR_VAR 0 13
22469: PUSH
22470: EMPTY
22471: ST_TO_ADDR
// if x - r < 0 then
22472: LD_VAR 0 2
22476: PUSH
22477: LD_VAR 0 4
22481: MINUS
22482: PUSH
22483: LD_INT 0
22485: LESS
22486: IFFALSE 22498
// min_x := 0 else
22488: LD_ADDR_VAR 0 7
22492: PUSH
22493: LD_INT 0
22495: ST_TO_ADDR
22496: GO 22514
// min_x := x - r ;
22498: LD_ADDR_VAR 0 7
22502: PUSH
22503: LD_VAR 0 2
22507: PUSH
22508: LD_VAR 0 4
22512: MINUS
22513: ST_TO_ADDR
// if y - r < 0 then
22514: LD_VAR 0 3
22518: PUSH
22519: LD_VAR 0 4
22523: MINUS
22524: PUSH
22525: LD_INT 0
22527: LESS
22528: IFFALSE 22540
// min_y := 0 else
22530: LD_ADDR_VAR 0 8
22534: PUSH
22535: LD_INT 0
22537: ST_TO_ADDR
22538: GO 22556
// min_y := y - r ;
22540: LD_ADDR_VAR 0 8
22544: PUSH
22545: LD_VAR 0 3
22549: PUSH
22550: LD_VAR 0 4
22554: MINUS
22555: ST_TO_ADDR
// max_x := x + r ;
22556: LD_ADDR_VAR 0 9
22560: PUSH
22561: LD_VAR 0 2
22565: PUSH
22566: LD_VAR 0 4
22570: PLUS
22571: ST_TO_ADDR
// max_y := y + r ;
22572: LD_ADDR_VAR 0 10
22576: PUSH
22577: LD_VAR 0 3
22581: PUSH
22582: LD_VAR 0 4
22586: PLUS
22587: ST_TO_ADDR
// for _x = min_x to max_x do
22588: LD_ADDR_VAR 0 11
22592: PUSH
22593: DOUBLE
22594: LD_VAR 0 7
22598: DEC
22599: ST_TO_ADDR
22600: LD_VAR 0 9
22604: PUSH
22605: FOR_TO
22606: IFFALSE 22723
// for _y = min_y to max_y do
22608: LD_ADDR_VAR 0 12
22612: PUSH
22613: DOUBLE
22614: LD_VAR 0 8
22618: DEC
22619: ST_TO_ADDR
22620: LD_VAR 0 10
22624: PUSH
22625: FOR_TO
22626: IFFALSE 22719
// begin if not ValidHex ( _x , _y ) then
22628: LD_VAR 0 11
22632: PPUSH
22633: LD_VAR 0 12
22637: PPUSH
22638: CALL_OW 488
22642: NOT
22643: IFFALSE 22647
// continue ;
22645: GO 22625
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22647: LD_VAR 0 11
22651: PPUSH
22652: LD_VAR 0 12
22656: PPUSH
22657: CALL_OW 351
22661: PUSH
22662: LD_VAR 0 11
22666: PPUSH
22667: LD_VAR 0 12
22671: PPUSH
22672: CALL_OW 554
22676: AND
22677: IFFALSE 22717
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22679: LD_ADDR_VAR 0 13
22683: PUSH
22684: LD_VAR 0 13
22688: PPUSH
22689: LD_VAR 0 13
22693: PUSH
22694: LD_INT 1
22696: PLUS
22697: PPUSH
22698: LD_VAR 0 11
22702: PUSH
22703: LD_VAR 0 12
22707: PUSH
22708: EMPTY
22709: LIST
22710: LIST
22711: PPUSH
22712: CALL_OW 2
22716: ST_TO_ADDR
// end ;
22717: GO 22625
22719: POP
22720: POP
22721: GO 22605
22723: POP
22724: POP
// if not list then
22725: LD_VAR 0 13
22729: NOT
22730: IFFALSE 22734
// exit ;
22732: GO 22805
// for i in list do
22734: LD_ADDR_VAR 0 6
22738: PUSH
22739: LD_VAR 0 13
22743: PUSH
22744: FOR_IN
22745: IFFALSE 22803
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22747: LD_VAR 0 1
22751: PPUSH
22752: LD_STRING M
22754: PUSH
22755: LD_VAR 0 6
22759: PUSH
22760: LD_INT 1
22762: ARRAY
22763: PUSH
22764: LD_VAR 0 6
22768: PUSH
22769: LD_INT 2
22771: ARRAY
22772: PUSH
22773: LD_INT 0
22775: PUSH
22776: LD_INT 0
22778: PUSH
22779: LD_INT 0
22781: PUSH
22782: LD_INT 0
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: PUSH
22794: EMPTY
22795: LIST
22796: PPUSH
22797: CALL_OW 447
22801: GO 22744
22803: POP
22804: POP
// end ;
22805: LD_VAR 0 5
22809: RET
