// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 46 0 0
// CreateNature ;
  19: CALL 533 0 0
// PrepareAmericans ;
  23: CALL 830 0 0
// PrepareArabian ;
  27: CALL 11106 0 0
// if debug then
  31: LD_EXP 1
  35: IFFALSE 41
// DebugMode ;
  37: CALL 214 0 0
// Action ;
  41: CALL 4640 0 0
// end ;
  45: END
// export debug , prefix , missionStart , aviradzeSpotted , deltaSpotted , spottedBeforeRadio , sciSpotted , aviradzeQuestDone , sciCounterKill , usAlert , usActiveDefend , gladstoneEscaped , timeUntilFarmer , attackDeltaAllowed , trickyMove , usPatrol , trap , lostCounter ; function Init ; begin
  46: LD_INT 0
  48: PPUSH
// debug := false ;
  49: LD_ADDR_EXP 1
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// missionStart := false ;
  57: LD_ADDR_EXP 3
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// aviradzeSpotted := false ;
  65: LD_ADDR_EXP 4
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// deltaSpotted := false ;
  73: LD_ADDR_EXP 5
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// sciSpotted := false ;
  81: LD_ADDR_EXP 7
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// sciCounterKill := 0 ;
  89: LD_ADDR_EXP 9
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// aviradzeQuestDone := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// attackDeltaAllowed := false ;
 105: LD_ADDR_EXP 14
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usAlert := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// usActiveDefend := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// usPatrol := [ ] ;
 129: LD_ADDR_EXP 16
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// timeUntilFarmer := [ 40 40$00 , 30 30$00 , 20 20$00 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 13
 140: PUSH
 141: LD_INT 84000
 143: PUSH
 144: LD_INT 63000
 146: PUSH
 147: LD_INT 42000
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: PUSH
 155: LD_OWVAR 67
 159: ARRAY
 160: ST_TO_ADDR
// trickyMove := false ;
 161: LD_ADDR_EXP 15
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// gladstoneEscaped := false ;
 169: LD_ADDR_EXP 12
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// prefix := 01_ ;
 177: LD_ADDR_EXP 2
 181: PUSH
 182: LD_STRING 01_
 184: ST_TO_ADDR
// trap := 0 ;
 185: LD_ADDR_EXP 17
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// lostCounter := false ;
 193: LD_ADDR_EXP 18
 197: PUSH
 198: LD_INT 0
 200: ST_TO_ADDR
// spottedBeforeRadio := false ;
 201: LD_ADDR_EXP 6
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// end ;
 209: LD_VAR 0 1
 213: RET
// function DebugMode ; begin
 214: LD_INT 0
 216: PPUSH
// FogOff ( 1 ) ;
 217: LD_INT 1
 219: PPUSH
 220: CALL_OW 344
// Difficulty := 2 ;
 224: LD_ADDR_OWVAR 67
 228: PUSH
 229: LD_INT 2
 231: ST_TO_ADDR
// end ; end_of_file
 232: LD_VAR 0 1
 236: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 237: LD_INT 0
 239: PPUSH
// uc_side := side ;
 240: LD_ADDR_OWVAR 20
 244: PUSH
 245: LD_VAR 0 1
 249: ST_TO_ADDR
// uc_nation := nation ;
 250: LD_ADDR_OWVAR 21
 254: PUSH
 255: LD_VAR 0 2
 259: ST_TO_ADDR
// vc_chassis := chassis ;
 260: LD_ADDR_OWVAR 37
 264: PUSH
 265: LD_VAR 0 3
 269: ST_TO_ADDR
// vc_engine := engine ;
 270: LD_ADDR_OWVAR 39
 274: PUSH
 275: LD_VAR 0 4
 279: ST_TO_ADDR
// vc_control := control ;
 280: LD_ADDR_OWVAR 38
 284: PUSH
 285: LD_VAR 0 5
 289: ST_TO_ADDR
// vc_weapon := weapon ;
 290: LD_ADDR_OWVAR 40
 294: PUSH
 295: LD_VAR 0 6
 299: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 300: LD_ADDR_OWVAR 41
 304: PUSH
 305: LD_VAR 0 7
 309: ST_TO_ADDR
// result := CreateVehicle ;
 310: LD_ADDR_VAR 0 8
 314: PUSH
 315: CALL_OW 45
 319: ST_TO_ADDR
// end ;
 320: LD_VAR 0 8
 324: RET
// export function SayX ( units , ident ) ; var i ; begin
 325: LD_INT 0
 327: PPUSH
 328: PPUSH
// result := false ;
 329: LD_ADDR_VAR 0 3
 333: PUSH
 334: LD_INT 0
 336: ST_TO_ADDR
// if not units then
 337: LD_VAR 0 1
 341: NOT
 342: IFFALSE 346
// exit ;
 344: GO 400
// for i in units do
 346: LD_ADDR_VAR 0 4
 350: PUSH
 351: LD_VAR 0 1
 355: PUSH
 356: FOR_IN
 357: IFFALSE 398
// if IsOk ( i ) then
 359: LD_VAR 0 4
 363: PPUSH
 364: CALL_OW 302
 368: IFFALSE 396
// begin Say ( i , ident ) ;
 370: LD_VAR 0 4
 374: PPUSH
 375: LD_VAR 0 2
 379: PPUSH
 380: CALL_OW 88
// result := i ;
 384: LD_ADDR_VAR 0 3
 388: PUSH
 389: LD_VAR 0 4
 393: ST_TO_ADDR
// break ;
 394: GO 398
// end ;
 396: GO 356
 398: POP
 399: POP
// end ;
 400: LD_VAR 0 3
 404: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 405: LD_INT 0
 407: PPUSH
 408: PPUSH
// InitUc ;
 409: CALL_OW 18
// InitHc ;
 413: CALL_OW 19
// uc_side := 0 ;
 417: LD_ADDR_OWVAR 20
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// uc_nation := 0 ;
 425: LD_ADDR_OWVAR 21
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// for i = 1 to amount do
 433: LD_ADDR_VAR 0 4
 437: PUSH
 438: DOUBLE
 439: LD_INT 1
 441: DEC
 442: ST_TO_ADDR
 443: LD_VAR 0 2
 447: PUSH
 448: FOR_TO
 449: IFFALSE 522
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 451: LD_ADDR_OWVAR 29
 455: PUSH
 456: LD_INT 9
 458: PPUSH
 459: LD_INT 12
 461: PPUSH
 462: CALL_OW 12
 466: PUSH
 467: LD_INT 9
 469: PPUSH
 470: LD_INT 12
 472: PPUSH
 473: CALL_OW 12
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: ST_TO_ADDR
// hc_agressivity := 0 ;
 482: LD_ADDR_OWVAR 35
 486: PUSH
 487: LD_INT 0
 489: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 490: LD_INT 0
 492: PPUSH
 493: LD_INT 12
 495: PPUSH
 496: LD_INT 1
 498: PPUSH
 499: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 503: CALL_OW 44
 507: PPUSH
 508: LD_VAR 0 1
 512: PPUSH
 513: LD_INT 0
 515: PPUSH
 516: CALL_OW 49
// end ;
 520: GO 448
 522: POP
 523: POP
// InitHc ;
 524: CALL_OW 19
// end ;
 528: LD_VAR 0 3
 532: RET
// export function CreateNature ; var i ; begin
 533: LD_INT 0
 535: PPUSH
 536: PPUSH
// SpawnApeman ( forest , 9 ) ;
 537: LD_INT 1
 539: PPUSH
 540: LD_INT 9
 542: PPUSH
 543: CALL 405 0 2
// for i := 1 to 4 do
 547: LD_ADDR_VAR 0 2
 551: PUSH
 552: DOUBLE
 553: LD_INT 1
 555: DEC
 556: ST_TO_ADDR
 557: LD_INT 4
 559: PUSH
 560: FOR_TO
 561: IFFALSE 596
// begin hc_class := 21 ;
 563: LD_ADDR_OWVAR 28
 567: PUSH
 568: LD_INT 21
 570: ST_TO_ADDR
// hc_gallery :=  ;
 571: LD_ADDR_OWVAR 33
 575: PUSH
 576: LD_STRING 
 578: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 579: CALL_OW 44
 583: PPUSH
 584: LD_INT 1
 586: PPUSH
 587: LD_INT 0
 589: PPUSH
 590: CALL_OW 49
// end ;
 594: GO 560
 596: POP
 597: POP
// for i := 1 to 2 do
 598: LD_ADDR_VAR 0 2
 602: PUSH
 603: DOUBLE
 604: LD_INT 1
 606: DEC
 607: ST_TO_ADDR
 608: LD_INT 2
 610: PUSH
 611: FOR_TO
 612: IFFALSE 647
// begin hc_class := 18 ;
 614: LD_ADDR_OWVAR 28
 618: PUSH
 619: LD_INT 18
 621: ST_TO_ADDR
// hc_gallery :=  ;
 622: LD_ADDR_OWVAR 33
 626: PUSH
 627: LD_STRING 
 629: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 630: CALL_OW 44
 634: PPUSH
 635: LD_INT 1
 637: PPUSH
 638: LD_INT 0
 640: PPUSH
 641: CALL_OW 49
// end ;
 645: GO 611
 647: POP
 648: POP
// for i := 1 to 3 do
 649: LD_ADDR_VAR 0 2
 653: PUSH
 654: DOUBLE
 655: LD_INT 1
 657: DEC
 658: ST_TO_ADDR
 659: LD_INT 3
 661: PUSH
 662: FOR_TO
 663: IFFALSE 698
// begin hc_class := 13 ;
 665: LD_ADDR_OWVAR 28
 669: PUSH
 670: LD_INT 13
 672: ST_TO_ADDR
// hc_gallery :=  ;
 673: LD_ADDR_OWVAR 33
 677: PUSH
 678: LD_STRING 
 680: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 681: CALL_OW 44
 685: PPUSH
 686: LD_INT 1
 688: PPUSH
 689: LD_INT 0
 691: PPUSH
 692: CALL_OW 49
// end ;
 696: GO 662
 698: POP
 699: POP
// for i := 1 to 4 do
 700: LD_ADDR_VAR 0 2
 704: PUSH
 705: DOUBLE
 706: LD_INT 1
 708: DEC
 709: ST_TO_ADDR
 710: LD_INT 4
 712: PUSH
 713: FOR_TO
 714: IFFALSE 749
// begin hc_class := class_frog ;
 716: LD_ADDR_OWVAR 28
 720: PUSH
 721: LD_INT 19
 723: ST_TO_ADDR
// hc_gallery :=  ;
 724: LD_ADDR_OWVAR 33
 728: PUSH
 729: LD_STRING 
 731: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 732: CALL_OW 44
 736: PPUSH
 737: LD_INT 8
 739: PPUSH
 740: LD_INT 0
 742: PPUSH
 743: CALL_OW 49
// end ;
 747: GO 713
 749: POP
 750: POP
// end ;
 751: LD_VAR 0 1
 755: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 756: LD_INT 0
 758: PPUSH
 759: PPUSH
 760: PPUSH
// if not observer or not unit then
 761: LD_VAR 0 1
 765: NOT
 766: PUSH
 767: LD_VAR 0 2
 771: NOT
 772: OR
 773: IFFALSE 777
// exit ;
 775: GO 825
// if not See ( GetSide ( observer ) , unit ) then
 777: LD_VAR 0 1
 781: PPUSH
 782: CALL_OW 255
 786: PPUSH
 787: LD_VAR 0 2
 791: PPUSH
 792: CALL_OW 292
 796: NOT
 797: IFFALSE 801
// exit ;
 799: GO 825
// result := GetDistUnits ( observer , unit ) < 12 ;
 801: LD_ADDR_VAR 0 3
 805: PUSH
 806: LD_VAR 0 1
 810: PPUSH
 811: LD_VAR 0 2
 815: PPUSH
 816: CALL_OW 296
 820: PUSH
 821: LD_INT 12
 823: LESS
 824: ST_TO_ADDR
// end ; end_of_file
 825: LD_VAR 0 3
 829: RET
// export Gladstone , Lynch ; export usForces , usSci ; export function PrepareAmericans ; var i , un , veh , tmp , arm ; begin
 830: LD_INT 0
 832: PPUSH
 833: PPUSH
 834: PPUSH
 835: PPUSH
 836: PPUSH
 837: PPUSH
// usForces := [ ] ;
 838: LD_ADDR_EXP 21
 842: PUSH
 843: EMPTY
 844: ST_TO_ADDR
// usSci := [ ] ;
 845: LD_ADDR_EXP 22
 849: PUSH
 850: EMPTY
 851: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
 852: LD_INT 1
 854: PPUSH
 855: LD_STRING Delta
 857: PPUSH
 858: CALL_OW 500
// SetResourceType ( GetBase ( Delta ) , mat_cans , 400 ) ;
 862: LD_INT 1
 864: PPUSH
 865: CALL_OW 274
 869: PPUSH
 870: LD_INT 1
 872: PPUSH
 873: LD_INT 400
 875: PPUSH
 876: CALL_OW 277
// SetResourceType ( GetBase ( Delta ) , mat_oil , 80 ) ;
 880: LD_INT 1
 882: PPUSH
 883: CALL_OW 274
 887: PPUSH
 888: LD_INT 2
 890: PPUSH
 891: LD_INT 80
 893: PPUSH
 894: CALL_OW 277
// uc_side := 1 ;
 898: LD_ADDR_OWVAR 20
 902: PUSH
 903: LD_INT 1
 905: ST_TO_ADDR
// uc_nation := 1 ;
 906: LD_ADDR_OWVAR 21
 910: PUSH
 911: LD_INT 1
 913: ST_TO_ADDR
// InitHc ;
 914: CALL_OW 19
// hc_importance := 0 ;
 918: LD_ADDR_OWVAR 32
 922: PUSH
 923: LD_INT 0
 925: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
 926: LD_ADDR_EXP 20
 930: PUSH
 931: LD_STRING Lynch
 933: PPUSH
 934: LD_INT 0
 936: PPUSH
 937: LD_STRING 
 939: PPUSH
 940: CALL 26760 0 3
 944: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false ,  ) ;
 945: LD_ADDR_EXP 19
 949: PUSH
 950: LD_STRING Gladstone
 952: PPUSH
 953: LD_INT 0
 955: PPUSH
 956: LD_STRING 
 958: PPUSH
 959: CALL 26760 0 3
 963: ST_TO_ADDR
// PlaceHumanInUnit ( Lynch , Delta ) ;
 964: LD_EXP 20
 968: PPUSH
 969: LD_INT 1
 971: PPUSH
 972: CALL_OW 52
// PlaceHumanInUnit ( Gladstone , usLab ) ;
 976: LD_EXP 19
 980: PPUSH
 981: LD_INT 3
 983: PPUSH
 984: CALL_OW 52
// for i := 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
 988: LD_ADDR_VAR 0 2
 992: PUSH
 993: DOUBLE
 994: LD_INT 1
 996: DEC
 997: ST_TO_ADDR
 998: LD_INT 1
1000: PUSH
1001: LD_INT 2
1003: PUSH
1004: LD_INT 2
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: LIST
1011: PUSH
1012: LD_OWVAR 67
1016: ARRAY
1017: PUSH
1018: FOR_TO
1019: IFFALSE 1065
// begin PrepareHuman ( false , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
1021: LD_INT 0
1023: PPUSH
1024: LD_INT 2
1026: PPUSH
1027: LD_INT 1
1029: PUSH
1030: LD_INT 2
1032: PUSH
1033: LD_INT 2
1035: PUSH
1036: EMPTY
1037: LIST
1038: LIST
1039: LIST
1040: PUSH
1041: LD_OWVAR 67
1045: ARRAY
1046: PPUSH
1047: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , Delta ) ;
1051: CALL_OW 44
1055: PPUSH
1056: LD_INT 1
1058: PPUSH
1059: CALL_OW 52
// end ;
1063: GO 1018
1065: POP
1066: POP
// for i := 1 to 7 - Difficulty do
1067: LD_ADDR_VAR 0 2
1071: PUSH
1072: DOUBLE
1073: LD_INT 1
1075: DEC
1076: ST_TO_ADDR
1077: LD_INT 7
1079: PUSH
1080: LD_OWVAR 67
1084: MINUS
1085: PUSH
1086: FOR_TO
1087: IFFALSE 1172
// begin PrepareHuman ( false , 4 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
1089: LD_INT 0
1091: PPUSH
1092: LD_INT 4
1094: PPUSH
1095: LD_INT 1
1097: PUSH
1098: LD_INT 2
1100: PUSH
1101: LD_INT 2
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: LIST
1108: PUSH
1109: LD_OWVAR 67
1113: ARRAY
1114: PPUSH
1115: CALL_OW 380
// un := CreateHuman ;
1119: LD_ADDR_VAR 0 3
1123: PUSH
1124: CALL_OW 44
1128: ST_TO_ADDR
// PlaceHumanInUnit ( un , usLab ) ;
1129: LD_VAR 0 3
1133: PPUSH
1134: LD_INT 3
1136: PPUSH
1137: CALL_OW 52
// usSci := Replace ( usSci , usSci + 1 , un ) ;
1141: LD_ADDR_EXP 22
1145: PUSH
1146: LD_EXP 22
1150: PPUSH
1151: LD_EXP 22
1155: PUSH
1156: LD_INT 1
1158: PLUS
1159: PPUSH
1160: LD_VAR 0 3
1164: PPUSH
1165: CALL_OW 1
1169: ST_TO_ADDR
// end ;
1170: GO 1086
1172: POP
1173: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
1174: LD_ADDR_VAR 0 6
1178: PUSH
1179: LD_INT 22
1181: PUSH
1182: LD_INT 1
1184: PUSH
1185: EMPTY
1186: LIST
1187: LIST
1188: PUSH
1189: LD_INT 30
1191: PUSH
1192: LD_INT 4
1194: PUSH
1195: EMPTY
1196: LIST
1197: LIST
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: PPUSH
1203: CALL_OW 69
1207: ST_TO_ADDR
// for i := 1 to 3 + Difficulty do
1208: LD_ADDR_VAR 0 2
1212: PUSH
1213: DOUBLE
1214: LD_INT 1
1216: DEC
1217: ST_TO_ADDR
1218: LD_INT 3
1220: PUSH
1221: LD_OWVAR 67
1225: PLUS
1226: PUSH
1227: FOR_TO
1228: IFFALSE 1306
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
1230: LD_INT 0
1232: PPUSH
1233: LD_INT 1
1235: PPUSH
1236: LD_INT 1
1238: PUSH
1239: LD_INT 2
1241: PUSH
1242: LD_INT 3
1244: PUSH
1245: EMPTY
1246: LIST
1247: LIST
1248: LIST
1249: PUSH
1250: LD_OWVAR 67
1254: ARRAY
1255: PPUSH
1256: CALL_OW 380
// un := CreateHuman ;
1260: LD_ADDR_VAR 0 3
1264: PUSH
1265: CALL_OW 44
1269: ST_TO_ADDR
// usForces := usForces ^ un ;
1270: LD_ADDR_EXP 21
1274: PUSH
1275: LD_EXP 21
1279: PUSH
1280: LD_VAR 0 3
1284: ADD
1285: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm [ 1 ] ) ;
1286: LD_VAR 0 3
1290: PPUSH
1291: LD_VAR 0 6
1295: PUSH
1296: LD_INT 1
1298: ARRAY
1299: PPUSH
1300: CALL_OW 52
// end ;
1304: GO 1227
1306: POP
1307: POP
// if Difficulty > 1 then
1308: LD_OWVAR 67
1312: PUSH
1313: LD_INT 1
1315: GREATER
1316: IFFALSE 1409
// begin for i := 1 to 3 do
1318: LD_ADDR_VAR 0 2
1322: PUSH
1323: DOUBLE
1324: LD_INT 1
1326: DEC
1327: ST_TO_ADDR
1328: LD_INT 3
1330: PUSH
1331: FOR_TO
1332: IFFALSE 1407
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
1334: LD_INT 0
1336: PPUSH
1337: LD_INT 1
1339: PPUSH
1340: LD_INT 1
1342: PUSH
1343: LD_INT 2
1345: PUSH
1346: LD_INT 3
1348: PUSH
1349: EMPTY
1350: LIST
1351: LIST
1352: LIST
1353: PUSH
1354: LD_OWVAR 67
1358: ARRAY
1359: PPUSH
1360: CALL_OW 380
// un := CreateHuman ;
1364: LD_ADDR_VAR 0 3
1368: PUSH
1369: CALL_OW 44
1373: ST_TO_ADDR
// usForces := usForces ^ un ;
1374: LD_ADDR_EXP 21
1378: PUSH
1379: LD_EXP 21
1383: PUSH
1384: LD_VAR 0 3
1388: ADD
1389: ST_TO_ADDR
// PlaceUnitArea ( un , usAdditionalDefenceArea , false ) ;
1390: LD_VAR 0 3
1394: PPUSH
1395: LD_INT 9
1397: PPUSH
1398: LD_INT 0
1400: PPUSH
1401: CALL_OW 49
// end ;
1405: GO 1331
1407: POP
1408: POP
// end ; PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 100 ) ;
1409: LD_INT 1
1411: PPUSH
1412: LD_INT 1
1414: PPUSH
1415: LD_INT 1
1417: PPUSH
1418: LD_INT 2
1420: PPUSH
1421: LD_INT 1
1423: PPUSH
1424: LD_INT 2
1426: PPUSH
1427: LD_INT 100
1429: PPUSH
1430: CALL 237 0 7
// veh := CreateVehicle ;
1434: LD_ADDR_VAR 0 4
1438: PUSH
1439: CALL_OW 45
1443: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1444: LD_VAR 0 4
1448: PPUSH
1449: LD_INT 2
1451: PPUSH
1452: CALL_OW 233
// PlaceUnitXY ( veh , 43 , 24 , false ) ;
1456: LD_VAR 0 4
1460: PPUSH
1461: LD_INT 43
1463: PPUSH
1464: LD_INT 24
1466: PPUSH
1467: LD_INT 0
1469: PPUSH
1470: CALL_OW 48
// end ;
1474: LD_VAR 0 1
1478: RET
// export function SendSciToForest ; var i , j , k , tmp , xy ; begin
1479: LD_INT 0
1481: PPUSH
1482: PPUSH
1483: PPUSH
1484: PPUSH
1485: PPUSH
1486: PPUSH
// if not usSci then
1487: LD_EXP 22
1491: NOT
1492: IFFALSE 1496
// exit ;
1494: GO 1670
// xy := AreaToList ( tameArea , 0 ) ;
1496: LD_ADDR_VAR 0 6
1500: PUSH
1501: LD_INT 5
1503: PPUSH
1504: LD_INT 0
1506: PPUSH
1507: CALL_OW 517
1511: ST_TO_ADDR
// for i in usSci do
1512: LD_ADDR_VAR 0 2
1516: PUSH
1517: LD_EXP 22
1521: PUSH
1522: FOR_IN
1523: IFFALSE 1668
// begin k := rand ( 1 , xy [ 1 ] ) ;
1525: LD_ADDR_VAR 0 4
1529: PUSH
1530: LD_INT 1
1532: PPUSH
1533: LD_VAR 0 6
1537: PUSH
1538: LD_INT 1
1540: ARRAY
1541: PPUSH
1542: CALL_OW 12
1546: ST_TO_ADDR
// ComExitBuilding ( i ) ;
1547: LD_VAR 0 2
1551: PPUSH
1552: CALL_OW 122
// AddComMoveXY ( i , xy [ 1 ] [ k ] , xy [ 2 ] [ k ] ) ;
1556: LD_VAR 0 2
1560: PPUSH
1561: LD_VAR 0 6
1565: PUSH
1566: LD_INT 1
1568: ARRAY
1569: PUSH
1570: LD_VAR 0 4
1574: ARRAY
1575: PPUSH
1576: LD_VAR 0 6
1580: PUSH
1581: LD_INT 2
1583: ARRAY
1584: PUSH
1585: LD_VAR 0 4
1589: ARRAY
1590: PPUSH
1591: CALL_OW 171
// for j := 1 to 2 do
1595: LD_ADDR_VAR 0 3
1599: PUSH
1600: DOUBLE
1601: LD_INT 1
1603: DEC
1604: ST_TO_ADDR
1605: LD_INT 2
1607: PUSH
1608: FOR_TO
1609: IFFALSE 1664
// begin tmp := Delete ( xy [ j ] , k ) ;
1611: LD_ADDR_VAR 0 5
1615: PUSH
1616: LD_VAR 0 6
1620: PUSH
1621: LD_VAR 0 3
1625: ARRAY
1626: PPUSH
1627: LD_VAR 0 4
1631: PPUSH
1632: CALL_OW 3
1636: ST_TO_ADDR
// xy := Replace ( xy , j , tmp ) ;
1637: LD_ADDR_VAR 0 6
1641: PUSH
1642: LD_VAR 0 6
1646: PPUSH
1647: LD_VAR 0 3
1651: PPUSH
1652: LD_VAR 0 5
1656: PPUSH
1657: CALL_OW 1
1661: ST_TO_ADDR
// end ;
1662: GO 1608
1664: POP
1665: POP
// end ;
1666: GO 1522
1668: POP
1669: POP
// end ;
1670: LD_VAR 0 1
1674: RET
// every 0 0$5 + 0 0$10 trigger aviradzeSpotted and usSci and not usAlert and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do var i , x , y , d , ape ;
1675: LD_EXP 4
1679: PUSH
1680: LD_EXP 22
1684: AND
1685: PUSH
1686: LD_EXP 10
1690: NOT
1691: AND
1692: PUSH
1693: LD_INT 22
1695: PUSH
1696: LD_INT 0
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: PUSH
1703: LD_INT 25
1705: PUSH
1706: LD_INT 12
1708: PUSH
1709: EMPTY
1710: LIST
1711: LIST
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: PPUSH
1717: CALL_OW 69
1721: AND
1722: IFFALSE 2214
1724: GO 1726
1726: DISABLE
1727: LD_INT 0
1729: PPUSH
1730: PPUSH
1731: PPUSH
1732: PPUSH
1733: PPUSH
// begin enable ;
1734: ENABLE
// if UnitFilter ( usSci , [ f_or , [ f_hastask ] , [ f_inside ] ] ) then
1735: LD_EXP 22
1739: PPUSH
1740: LD_INT 2
1742: PUSH
1743: LD_INT 60
1745: PUSH
1746: EMPTY
1747: LIST
1748: PUSH
1749: LD_INT 54
1751: PUSH
1752: EMPTY
1753: LIST
1754: PUSH
1755: EMPTY
1756: LIST
1757: LIST
1758: LIST
1759: PPUSH
1760: CALL_OW 72
1764: IFFALSE 1768
// exit ;
1766: GO 2214
// for i in usSci do
1768: LD_ADDR_VAR 0 1
1772: PUSH
1773: LD_EXP 22
1777: PUSH
1778: FOR_IN
1779: IFFALSE 2212
// begin if not HasTask ( i ) and GetLives ( i ) = 1000 then
1781: LD_VAR 0 1
1785: PPUSH
1786: CALL_OW 314
1790: NOT
1791: PUSH
1792: LD_VAR 0 1
1796: PPUSH
1797: CALL_OW 256
1801: PUSH
1802: LD_INT 1000
1804: EQUAL
1805: AND
1806: IFFALSE 2013
// begin ape := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) , i ) ;
1808: LD_ADDR_VAR 0 5
1812: PUSH
1813: LD_INT 22
1815: PUSH
1816: LD_INT 0
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: PUSH
1823: LD_INT 25
1825: PUSH
1826: LD_INT 12
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: PPUSH
1837: CALL_OW 69
1841: PPUSH
1842: LD_VAR 0 1
1846: PPUSH
1847: CALL_OW 74
1851: ST_TO_ADDR
// if GetDistUnits ( i , ape ) < 10 then
1852: LD_VAR 0 1
1856: PPUSH
1857: LD_VAR 0 5
1861: PPUSH
1862: CALL_OW 296
1866: PUSH
1867: LD_INT 10
1869: LESS
1870: IFFALSE 1903
// ComTameXY ( i , GetX ( ape ) , GetY ( ape ) ) else
1872: LD_VAR 0 1
1876: PPUSH
1877: LD_VAR 0 5
1881: PPUSH
1882: CALL_OW 250
1886: PPUSH
1887: LD_VAR 0 5
1891: PPUSH
1892: CALL_OW 251
1896: PPUSH
1897: CALL_OW 131
1901: GO 2013
// begin d := rand ( 0 , 5 ) ;
1903: LD_ADDR_VAR 0 4
1907: PUSH
1908: LD_INT 0
1910: PPUSH
1911: LD_INT 5
1913: PPUSH
1914: CALL_OW 12
1918: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 3 ) ;
1919: LD_ADDR_VAR 0 2
1923: PUSH
1924: LD_VAR 0 1
1928: PPUSH
1929: CALL_OW 250
1933: PPUSH
1934: LD_VAR 0 4
1938: PPUSH
1939: LD_INT 3
1941: PPUSH
1942: CALL_OW 272
1946: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 3 ) ;
1947: LD_ADDR_VAR 0 3
1951: PUSH
1952: LD_VAR 0 1
1956: PPUSH
1957: CALL_OW 251
1961: PPUSH
1962: LD_VAR 0 4
1966: PPUSH
1967: LD_INT 3
1969: PPUSH
1970: CALL_OW 273
1974: ST_TO_ADDR
// if not ValidHex ( x , y ) then
1975: LD_VAR 0 2
1979: PPUSH
1980: LD_VAR 0 3
1984: PPUSH
1985: CALL_OW 488
1989: NOT
1990: IFFALSE 1994
// continue ;
1992: GO 1778
// ComMoveXY ( i , x , y ) ;
1994: LD_VAR 0 1
1998: PPUSH
1999: LD_VAR 0 2
2003: PPUSH
2004: LD_VAR 0 3
2008: PPUSH
2009: CALL_OW 111
// end ; end ; if GetLives ( i ) < 900 and GetDistUnitXY ( i , 37 , 23 ) > 10 then
2013: LD_VAR 0 1
2017: PPUSH
2018: CALL_OW 256
2022: PUSH
2023: LD_INT 900
2025: LESS
2026: PUSH
2027: LD_VAR 0 1
2031: PPUSH
2032: LD_INT 37
2034: PPUSH
2035: LD_INT 23
2037: PPUSH
2038: CALL_OW 297
2042: PUSH
2043: LD_INT 10
2045: GREATER
2046: AND
2047: IFFALSE 2123
// begin if IsOk ( Gladstone ) and IsInUnit ( Gladstone ) then
2049: LD_EXP 19
2053: PPUSH
2054: CALL_OW 302
2058: PUSH
2059: LD_EXP 19
2063: PPUSH
2064: CALL_OW 310
2068: AND
2069: IFFALSE 2080
// ComExitBuilding ( Gladstone ) ;
2071: LD_EXP 19
2075: PPUSH
2076: CALL_OW 122
// AddComHeal ( Gladstone , i ) ;
2080: LD_EXP 19
2084: PPUSH
2085: LD_VAR 0 1
2089: PPUSH
2090: CALL_OW 188
// AddComEnterUnit ( Gladstone , usLab ) ;
2094: LD_EXP 19
2098: PPUSH
2099: LD_INT 3
2101: PPUSH
2102: CALL_OW 180
// ComMoveXY ( i , 37 , 23 ) ;
2106: LD_VAR 0 1
2110: PPUSH
2111: LD_INT 37
2113: PPUSH
2114: LD_INT 23
2116: PPUSH
2117: CALL_OW 111
// end else
2121: GO 2210
// if GetLives ( i ) = 1000 then
2123: LD_VAR 0 1
2127: PPUSH
2128: CALL_OW 256
2132: PUSH
2133: LD_INT 1000
2135: EQUAL
2136: IFFALSE 2210
// begin if SideShoot ( i ) = 2 then
2138: LD_VAR 0 1
2142: PPUSH
2143: CALL_OW 503
2147: PUSH
2148: LD_INT 2
2150: EQUAL
2151: IFFALSE 2198
// begin if not usAlert then
2153: LD_EXP 10
2157: NOT
2158: IFFALSE 2168
// usAlert := true ;
2160: LD_ADDR_EXP 10
2164: PUSH
2165: LD_INT 1
2167: ST_TO_ADDR
// AddComEnterUnit ( i , usLab ) ;
2168: LD_VAR 0 1
2172: PPUSH
2173: LD_INT 3
2175: PPUSH
2176: CALL_OW 180
// usSci := usSci diff i ;
2180: LD_ADDR_EXP 22
2184: PUSH
2185: LD_EXP 22
2189: PUSH
2190: LD_VAR 0 1
2194: DIFF
2195: ST_TO_ADDR
// end else
2196: GO 2210
// ComMoveToArea ( i , tameArea ) ;
2198: LD_VAR 0 1
2202: PPUSH
2203: LD_INT 5
2205: PPUSH
2206: CALL_OW 113
// end ; end ;
2210: GO 1778
2212: POP
2213: POP
// end ;
2214: PPOPN 5
2216: END
// every 0 0$1 trigger not usAlert and ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 999 ] ] ] ) or FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) ) do
2217: LD_EXP 10
2221: NOT
2222: PUSH
2223: LD_INT 22
2225: PUSH
2226: LD_INT 1
2228: PUSH
2229: EMPTY
2230: LIST
2231: LIST
2232: PUSH
2233: LD_INT 21
2235: PUSH
2236: LD_INT 3
2238: PUSH
2239: EMPTY
2240: LIST
2241: LIST
2242: PUSH
2243: LD_INT 3
2245: PUSH
2246: LD_INT 57
2248: PUSH
2249: EMPTY
2250: LIST
2251: PUSH
2252: EMPTY
2253: LIST
2254: LIST
2255: PUSH
2256: LD_INT 3
2258: PUSH
2259: LD_INT 24
2261: PUSH
2262: LD_INT 999
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: LIST
2277: LIST
2278: PPUSH
2279: CALL_OW 69
2283: PUSH
2284: LD_INT 7
2286: PPUSH
2287: LD_INT 22
2289: PUSH
2290: LD_INT 2
2292: PUSH
2293: EMPTY
2294: LIST
2295: LIST
2296: PPUSH
2297: CALL_OW 70
2301: OR
2302: AND
2303: IFFALSE 2316
2305: GO 2307
2307: DISABLE
// usAlert := true ;
2308: LD_ADDR_EXP 10
2312: PUSH
2313: LD_INT 1
2315: ST_TO_ADDR
2316: END
// every 0 0$1 trigger usAlert do var i , b , arm ;
2317: LD_EXP 10
2321: IFFALSE 2668
2323: GO 2325
2325: DISABLE
2326: LD_INT 0
2328: PPUSH
2329: PPUSH
2330: PPUSH
// begin usActiveDefend := true ;
2331: LD_ADDR_EXP 11
2335: PUSH
2336: LD_INT 1
2338: ST_TO_ADDR
// if not usForces then
2339: LD_EXP 21
2343: NOT
2344: IFFALSE 2348
// exit ;
2346: GO 2668
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
2348: LD_ADDR_VAR 0 3
2352: PUSH
2353: LD_INT 22
2355: PUSH
2356: LD_INT 1
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: PUSH
2363: LD_INT 30
2365: PUSH
2366: LD_INT 4
2368: PUSH
2369: EMPTY
2370: LIST
2371: LIST
2372: PUSH
2373: EMPTY
2374: LIST
2375: LIST
2376: PPUSH
2377: CALL_OW 69
2381: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
2382: LD_ADDR_VAR 0 2
2386: PUSH
2387: LD_INT 22
2389: PUSH
2390: LD_INT 1
2392: PUSH
2393: EMPTY
2394: LIST
2395: LIST
2396: PUSH
2397: LD_INT 30
2399: PUSH
2400: LD_INT 31
2402: PUSH
2403: EMPTY
2404: LIST
2405: LIST
2406: PUSH
2407: EMPTY
2408: LIST
2409: LIST
2410: PPUSH
2411: CALL_OW 69
2415: ST_TO_ADDR
// ComExitBuilding ( Lynch ) ;
2416: LD_EXP 20
2420: PPUSH
2421: CALL_OW 122
// AddComEnterUnit ( Lynch , arm [ 1 ] ) ;
2425: LD_EXP 20
2429: PPUSH
2430: LD_VAR 0 3
2434: PUSH
2435: LD_INT 1
2437: ARRAY
2438: PPUSH
2439: CALL_OW 180
// if IsOk ( Gladstone ) then
2443: LD_EXP 19
2447: PPUSH
2448: CALL_OW 302
2452: IFFALSE 2493
// begin ComExitBuilding ( Gladstone ) ;
2454: LD_EXP 19
2458: PPUSH
2459: CALL_OW 122
// AddComEnterUnit ( Gladstone , arm [ 1 ] ) ;
2463: LD_EXP 19
2467: PPUSH
2468: LD_VAR 0 3
2472: PUSH
2473: LD_INT 1
2475: ARRAY
2476: PPUSH
2477: CALL_OW 180
// AddComChangeProfession ( Gladstone , class_soldier ) ;
2481: LD_EXP 19
2485: PPUSH
2486: LD_INT 1
2488: PPUSH
2489: CALL_OW 183
// end ; ComExitBuilding ( usForces [ 1 ] ) ;
2493: LD_EXP 21
2497: PUSH
2498: LD_INT 1
2500: ARRAY
2501: PPUSH
2502: CALL_OW 122
// AddComEnterUnit ( usForces [ 1 ] , b [ 1 ] ) ;
2506: LD_EXP 21
2510: PUSH
2511: LD_INT 1
2513: ARRAY
2514: PPUSH
2515: LD_VAR 0 2
2519: PUSH
2520: LD_INT 1
2522: ARRAY
2523: PPUSH
2524: CALL_OW 180
// ComExitBuilding ( usForces [ 2 ] ) ;
2528: LD_EXP 21
2532: PUSH
2533: LD_INT 2
2535: ARRAY
2536: PPUSH
2537: CALL_OW 122
// AddComEnterUnit ( usForces [ 2 ] , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
2541: LD_EXP 21
2545: PUSH
2546: LD_INT 2
2548: ARRAY
2549: PPUSH
2550: LD_INT 22
2552: PUSH
2553: LD_INT 1
2555: PUSH
2556: EMPTY
2557: LIST
2558: LIST
2559: PUSH
2560: LD_INT 30
2562: PUSH
2563: LD_INT 32
2565: PUSH
2566: EMPTY
2567: LIST
2568: LIST
2569: PUSH
2570: EMPTY
2571: LIST
2572: LIST
2573: PPUSH
2574: CALL_OW 69
2578: PUSH
2579: LD_INT 1
2581: ARRAY
2582: PPUSH
2583: CALL_OW 180
// if b > 1 and usForces > 2 then
2587: LD_VAR 0 2
2591: PUSH
2592: LD_INT 1
2594: GREATER
2595: PUSH
2596: LD_EXP 21
2600: PUSH
2601: LD_INT 2
2603: GREATER
2604: AND
2605: IFFALSE 2668
// begin repeat wait ( 0 0$1 ) ;
2607: LD_INT 35
2609: PPUSH
2610: CALL_OW 67
// until BuildingStatus ( b [ 2 ] ) <> bs_build ;
2614: LD_VAR 0 2
2618: PUSH
2619: LD_INT 2
2621: ARRAY
2622: PPUSH
2623: CALL_OW 461
2627: PUSH
2628: LD_INT 1
2630: NONEQUAL
2631: IFFALSE 2607
// ComExitBuilding ( usForces [ 3 ] ) ;
2633: LD_EXP 21
2637: PUSH
2638: LD_INT 3
2640: ARRAY
2641: PPUSH
2642: CALL_OW 122
// AddComEnterUnit ( usForces [ 3 ] , b [ 2 ] ) ;
2646: LD_EXP 21
2650: PUSH
2651: LD_INT 3
2653: ARRAY
2654: PPUSH
2655: LD_VAR 0 2
2659: PUSH
2660: LD_INT 2
2662: ARRAY
2663: PPUSH
2664: CALL_OW 180
// end ; end ;
2668: PPOPN 3
2670: END
// every 0 0$1 trigger GetLives ( usLab ) < 999 and usAlert and usForces do var i ;
2671: LD_INT 3
2673: PPUSH
2674: CALL_OW 256
2678: PUSH
2679: LD_INT 999
2681: LESS
2682: PUSH
2683: LD_EXP 10
2687: AND
2688: PUSH
2689: LD_EXP 21
2693: AND
2694: IFFALSE 2865
2696: GO 2698
2698: DISABLE
2699: LD_INT 0
2701: PPUSH
// begin for i in usForces do
2702: LD_ADDR_VAR 0 1
2706: PUSH
2707: LD_EXP 21
2711: PUSH
2712: FOR_IN
2713: IFFALSE 2752
// begin if IsInUnit ( i ) then
2715: LD_VAR 0 1
2719: PPUSH
2720: CALL_OW 310
2724: IFFALSE 2735
// ComExitBuilding ( i ) ;
2726: LD_VAR 0 1
2730: PPUSH
2731: CALL_OW 122
// AddComAgressiveMove ( i , 31 , 8 ) ;
2735: LD_VAR 0 1
2739: PPUSH
2740: LD_INT 31
2742: PPUSH
2743: LD_INT 8
2745: PPUSH
2746: CALL_OW 174
// end ;
2750: GO 2712
2752: POP
2753: POP
// wait ( 0 0$8 ) ;
2754: LD_INT 280
2756: PPUSH
2757: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) then
2761: LD_INT 22
2763: PUSH
2764: LD_INT 2
2766: PUSH
2767: EMPTY
2768: LIST
2769: LIST
2770: PUSH
2771: LD_INT 91
2773: PUSH
2774: LD_INT 3
2776: PUSH
2777: LD_INT 14
2779: PUSH
2780: EMPTY
2781: LIST
2782: LIST
2783: LIST
2784: PUSH
2785: EMPTY
2786: LIST
2787: LIST
2788: PPUSH
2789: CALL_OW 69
2793: IFFALSE 2843
// ComAttackUnit ( usForces , FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) [ 1 ] ) else
2795: LD_EXP 21
2799: PPUSH
2800: LD_INT 22
2802: PUSH
2803: LD_INT 2
2805: PUSH
2806: EMPTY
2807: LIST
2808: LIST
2809: PUSH
2810: LD_INT 91
2812: PUSH
2813: LD_INT 3
2815: PUSH
2816: LD_INT 14
2818: PUSH
2819: EMPTY
2820: LIST
2821: LIST
2822: LIST
2823: PUSH
2824: EMPTY
2825: LIST
2826: LIST
2827: PPUSH
2828: CALL_OW 69
2832: PUSH
2833: LD_INT 1
2835: ARRAY
2836: PPUSH
2837: CALL_OW 115
2841: GO 2865
// begin wait ( 0 0$20 ) ;
2843: LD_INT 700
2845: PPUSH
2846: CALL_OW 67
// AddComMoveXY ( usForces , 39 , 19 ) ;
2850: LD_EXP 21
2854: PPUSH
2855: LD_INT 39
2857: PPUSH
2858: LD_INT 19
2860: PPUSH
2861: CALL_OW 171
// end ; end ;
2865: PPOPN 1
2867: END
// every 0 0$3 trigger ( GetDistUnits ( Heike , Delta ) < 10 or GetLives ( usLab ) < 999 ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do var tmp , veh ;
2868: LD_EXP 23
2872: PPUSH
2873: LD_INT 1
2875: PPUSH
2876: CALL_OW 296
2880: PUSH
2881: LD_INT 10
2883: LESS
2884: PUSH
2885: LD_INT 3
2887: PPUSH
2888: CALL_OW 256
2892: PUSH
2893: LD_INT 999
2895: LESS
2896: OR
2897: PUSH
2898: LD_INT 22
2900: PUSH
2901: LD_INT 1
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: PUSH
2908: LD_INT 25
2910: PUSH
2911: LD_INT 2
2913: PUSH
2914: EMPTY
2915: LIST
2916: LIST
2917: PUSH
2918: EMPTY
2919: LIST
2920: LIST
2921: PPUSH
2922: CALL_OW 69
2926: AND
2927: IFFALSE 3041
2929: GO 2931
2931: DISABLE
2932: LD_INT 0
2934: PPUSH
2935: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
2936: LD_ADDR_VAR 0 1
2940: PUSH
2941: LD_INT 22
2943: PUSH
2944: LD_INT 1
2946: PUSH
2947: EMPTY
2948: LIST
2949: LIST
2950: PUSH
2951: LD_INT 25
2953: PUSH
2954: LD_INT 2
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PUSH
2961: EMPTY
2962: LIST
2963: LIST
2964: PPUSH
2965: CALL_OW 69
2969: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2970: LD_ADDR_VAR 0 2
2974: PUSH
2975: LD_INT 22
2977: PUSH
2978: LD_INT 1
2980: PUSH
2981: EMPTY
2982: LIST
2983: LIST
2984: PUSH
2985: LD_INT 21
2987: PUSH
2988: LD_INT 2
2990: PUSH
2991: EMPTY
2992: LIST
2993: LIST
2994: PUSH
2995: LD_INT 58
2997: PUSH
2998: EMPTY
2999: LIST
3000: PUSH
3001: EMPTY
3002: LIST
3003: LIST
3004: LIST
3005: PPUSH
3006: CALL_OW 69
3010: ST_TO_ADDR
// if not tmp then
3011: LD_VAR 0 1
3015: NOT
3016: IFFALSE 3020
// exit ;
3018: GO 3041
// ComExitBuilding ( tmp ) ;
3020: LD_VAR 0 1
3024: PPUSH
3025: CALL_OW 122
// AddComDismantle ( tmp , usLab ) ;
3029: LD_VAR 0 1
3033: PPUSH
3034: LD_INT 3
3036: PPUSH
3037: CALL_OW 227
// end ;
3041: PPOPN 2
3043: END
// every 0 0$1 trigger usAlert and FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) do var i , tmp ;
3044: LD_EXP 10
3048: PUSH
3049: LD_INT 7
3051: PPUSH
3052: LD_INT 22
3054: PUSH
3055: LD_INT 1
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: PUSH
3062: LD_INT 21
3064: PUSH
3065: LD_INT 1
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: PUSH
3072: LD_INT 3
3074: PUSH
3075: LD_INT 24
3077: PUSH
3078: LD_INT 600
3080: PUSH
3081: EMPTY
3082: LIST
3083: LIST
3084: PUSH
3085: EMPTY
3086: LIST
3087: LIST
3088: PUSH
3089: EMPTY
3090: LIST
3091: LIST
3092: LIST
3093: PPUSH
3094: CALL_OW 70
3098: AND
3099: IFFALSE 3227
3101: GO 3103
3103: DISABLE
3104: LD_INT 0
3106: PPUSH
3107: PPUSH
// begin enable ;
3108: ENABLE
// tmp := FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) ;
3109: LD_ADDR_VAR 0 2
3113: PUSH
3114: LD_INT 7
3116: PPUSH
3117: LD_INT 22
3119: PUSH
3120: LD_INT 1
3122: PUSH
3123: EMPTY
3124: LIST
3125: LIST
3126: PUSH
3127: LD_INT 21
3129: PUSH
3130: LD_INT 1
3132: PUSH
3133: EMPTY
3134: LIST
3135: LIST
3136: PUSH
3137: LD_INT 3
3139: PUSH
3140: LD_INT 24
3142: PUSH
3143: LD_INT 600
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: PUSH
3150: EMPTY
3151: LIST
3152: LIST
3153: PUSH
3154: EMPTY
3155: LIST
3156: LIST
3157: LIST
3158: PPUSH
3159: CALL_OW 70
3163: ST_TO_ADDR
// if not tmp then
3164: LD_VAR 0 2
3168: NOT
3169: IFFALSE 3173
// exit ;
3171: GO 3227
// for i in tmp do
3173: LD_ADDR_VAR 0 1
3177: PUSH
3178: LD_VAR 0 2
3182: PUSH
3183: FOR_IN
3184: IFFALSE 3225
// if IsInUnit ( i ) then
3186: LD_VAR 0 1
3190: PPUSH
3191: CALL_OW 310
3195: IFFALSE 3208
// ComExitBuilding ( i ) else
3197: LD_VAR 0 1
3201: PPUSH
3202: CALL_OW 122
3206: GO 3223
// ComMoveXY ( i , 48 , 74 ) ;
3208: LD_VAR 0 1
3212: PPUSH
3213: LD_INT 48
3215: PPUSH
3216: LD_INT 74
3218: PPUSH
3219: CALL_OW 111
3223: GO 3183
3225: POP
3226: POP
// end ;
3227: PPOPN 2
3229: END
// every 6 6$00 do var i , un , tmp ;
3230: GO 3232
3232: DISABLE
3233: LD_INT 0
3235: PPUSH
3236: PPUSH
3237: PPUSH
// begin tmp := [ ] ;
3238: LD_ADDR_VAR 0 3
3242: PUSH
3243: EMPTY
3244: ST_TO_ADDR
// uc_side := 1 ;
3245: LD_ADDR_OWVAR 20
3249: PUSH
3250: LD_INT 1
3252: ST_TO_ADDR
// uc_nation := 1 ;
3253: LD_ADDR_OWVAR 21
3257: PUSH
3258: LD_INT 1
3260: ST_TO_ADDR
// case Difficulty of 1 :
3261: LD_OWVAR 67
3265: PUSH
3266: LD_INT 1
3268: DOUBLE
3269: EQUAL
3270: IFTRUE 3274
3272: GO 3377
3274: POP
// begin wait ( 1 1$00 ) ;
3275: LD_INT 2100
3277: PPUSH
3278: CALL_OW 67
// for i := 1 to 2 do
3282: LD_ADDR_VAR 0 1
3286: PUSH
3287: DOUBLE
3288: LD_INT 1
3290: DEC
3291: ST_TO_ADDR
3292: LD_INT 2
3294: PUSH
3295: FOR_TO
3296: IFFALSE 3373
// begin PrepareHuman ( false , [ 1 , 4 ] [ i mod 2 + 1 ] , 1 ) ;
3298: LD_INT 0
3300: PPUSH
3301: LD_INT 1
3303: PUSH
3304: LD_INT 4
3306: PUSH
3307: EMPTY
3308: LIST
3309: LIST
3310: PUSH
3311: LD_VAR 0 1
3315: PUSH
3316: LD_INT 2
3318: MOD
3319: PUSH
3320: LD_INT 1
3322: PLUS
3323: ARRAY
3324: PPUSH
3325: LD_INT 1
3327: PPUSH
3328: CALL_OW 380
// un := CreateHuman ;
3332: LD_ADDR_VAR 0 2
3336: PUSH
3337: CALL_OW 44
3341: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3342: LD_ADDR_VAR 0 3
3346: PUSH
3347: LD_VAR 0 3
3351: PPUSH
3352: LD_VAR 0 3
3356: PUSH
3357: LD_INT 1
3359: PLUS
3360: PPUSH
3361: LD_VAR 0 2
3365: PPUSH
3366: CALL_OW 1
3370: ST_TO_ADDR
// end ;
3371: GO 3295
3373: POP
3374: POP
// end ; 2 :
3375: GO 3771
3377: LD_INT 2
3379: DOUBLE
3380: EQUAL
3381: IFTRUE 3385
3383: GO 3519
3385: POP
// begin wait ( 0 0$30 ) ;
3386: LD_INT 1050
3388: PPUSH
3389: CALL_OW 67
// for i := 1 to 2 do
3393: LD_ADDR_VAR 0 1
3397: PUSH
3398: DOUBLE
3399: LD_INT 1
3401: DEC
3402: ST_TO_ADDR
3403: LD_INT 2
3405: PUSH
3406: FOR_TO
3407: IFFALSE 3463
// begin PrepareHuman ( false , 1 , 2 ) ;
3409: LD_INT 0
3411: PPUSH
3412: LD_INT 1
3414: PPUSH
3415: LD_INT 2
3417: PPUSH
3418: CALL_OW 380
// un := CreateHuman ;
3422: LD_ADDR_VAR 0 2
3426: PUSH
3427: CALL_OW 44
3431: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3432: LD_ADDR_VAR 0 3
3436: PUSH
3437: LD_VAR 0 3
3441: PPUSH
3442: LD_VAR 0 3
3446: PUSH
3447: LD_INT 1
3449: PLUS
3450: PPUSH
3451: LD_VAR 0 2
3455: PPUSH
3456: CALL_OW 1
3460: ST_TO_ADDR
// end ;
3461: GO 3406
3463: POP
3464: POP
// PrepareHuman ( false , 4 , 2 ) ;
3465: LD_INT 0
3467: PPUSH
3468: LD_INT 4
3470: PPUSH
3471: LD_INT 2
3473: PPUSH
3474: CALL_OW 380
// un := CreateHuman ;
3478: LD_ADDR_VAR 0 2
3482: PUSH
3483: CALL_OW 44
3487: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3488: LD_ADDR_VAR 0 3
3492: PUSH
3493: LD_VAR 0 3
3497: PPUSH
3498: LD_VAR 0 3
3502: PUSH
3503: LD_INT 1
3505: PLUS
3506: PPUSH
3507: LD_VAR 0 2
3511: PPUSH
3512: CALL_OW 1
3516: ST_TO_ADDR
// end ; 3 :
3517: GO 3771
3519: LD_INT 3
3521: DOUBLE
3522: EQUAL
3523: IFTRUE 3527
3525: GO 3770
3527: POP
// begin for i := 1 to 2 do
3528: LD_ADDR_VAR 0 1
3532: PUSH
3533: DOUBLE
3534: LD_INT 1
3536: DEC
3537: ST_TO_ADDR
3538: LD_INT 2
3540: PUSH
3541: FOR_TO
3542: IFFALSE 3598
// begin PrepareHuman ( false , 1 , 2 ) ;
3544: LD_INT 0
3546: PPUSH
3547: LD_INT 1
3549: PPUSH
3550: LD_INT 2
3552: PPUSH
3553: CALL_OW 380
// un := CreateHuman ;
3557: LD_ADDR_VAR 0 2
3561: PUSH
3562: CALL_OW 44
3566: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3567: LD_ADDR_VAR 0 3
3571: PUSH
3572: LD_VAR 0 3
3576: PPUSH
3577: LD_VAR 0 3
3581: PUSH
3582: LD_INT 1
3584: PLUS
3585: PPUSH
3586: LD_VAR 0 2
3590: PPUSH
3591: CALL_OW 1
3595: ST_TO_ADDR
// end ;
3596: GO 3541
3598: POP
3599: POP
// PrepareHuman ( false , 4 , 2 ) ;
3600: LD_INT 0
3602: PPUSH
3603: LD_INT 4
3605: PPUSH
3606: LD_INT 2
3608: PPUSH
3609: CALL_OW 380
// un := CreateHuman ;
3613: LD_ADDR_VAR 0 2
3617: PUSH
3618: CALL_OW 44
3622: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3623: LD_ADDR_VAR 0 3
3627: PUSH
3628: LD_VAR 0 3
3632: PPUSH
3633: LD_VAR 0 3
3637: PUSH
3638: LD_INT 1
3640: PLUS
3641: PPUSH
3642: LD_VAR 0 2
3646: PPUSH
3647: CALL_OW 1
3651: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_machine_gun , 90 ) ;
3652: LD_INT 1
3654: PPUSH
3655: LD_INT 1
3657: PPUSH
3658: LD_INT 2
3660: PPUSH
3661: LD_INT 2
3663: PPUSH
3664: LD_INT 1
3666: PPUSH
3667: LD_INT 2
3669: PPUSH
3670: LD_INT 90
3672: PPUSH
3673: CALL 237 0 7
// un := CreateVehicle ;
3677: LD_ADDR_VAR 0 2
3681: PUSH
3682: CALL_OW 45
3686: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3687: LD_ADDR_VAR 0 3
3691: PUSH
3692: LD_VAR 0 3
3696: PPUSH
3697: LD_VAR 0 3
3701: PUSH
3702: LD_INT 1
3704: PLUS
3705: PPUSH
3706: LD_VAR 0 2
3710: PPUSH
3711: CALL_OW 1
3715: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
3716: LD_INT 0
3718: PPUSH
3719: LD_INT 1
3721: PPUSH
3722: LD_INT 2
3724: PPUSH
3725: CALL_OW 380
// un := CreateHuman ;
3729: LD_ADDR_VAR 0 2
3733: PUSH
3734: CALL_OW 44
3738: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3739: LD_ADDR_VAR 0 3
3743: PUSH
3744: LD_VAR 0 3
3748: PPUSH
3749: LD_VAR 0 3
3753: PUSH
3754: LD_INT 1
3756: PLUS
3757: PPUSH
3758: LD_VAR 0 2
3762: PPUSH
3763: CALL_OW 1
3767: ST_TO_ADDR
// end ; end ;
3768: GO 3771
3770: POP
// for i := 1 to tmp do
3771: LD_ADDR_VAR 0 1
3775: PUSH
3776: DOUBLE
3777: LD_INT 1
3779: DEC
3780: ST_TO_ADDR
3781: LD_VAR 0 3
3785: PUSH
3786: FOR_TO
3787: IFFALSE 3952
// begin SetDir ( tmp [ i ] , 1 ) ;
3789: LD_VAR 0 3
3793: PUSH
3794: LD_VAR 0 1
3798: ARRAY
3799: PPUSH
3800: LD_INT 1
3802: PPUSH
3803: CALL_OW 233
// if GetType ( tmp [ i ] ) = unit_human then
3807: LD_VAR 0 3
3811: PUSH
3812: LD_VAR 0 1
3816: ARRAY
3817: PPUSH
3818: CALL_OW 247
3822: PUSH
3823: LD_INT 1
3825: EQUAL
3826: IFFALSE 3854
// PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) else
3828: LD_VAR 0 3
3832: PUSH
3833: LD_VAR 0 1
3837: ARRAY
3838: PPUSH
3839: LD_INT 28
3841: PPUSH
3842: LD_INT 52
3844: PPUSH
3845: LD_INT 0
3847: PPUSH
3848: CALL_OW 48
3852: GO 3922
// begin PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) ;
3854: LD_VAR 0 3
3858: PUSH
3859: LD_VAR 0 1
3863: ARRAY
3864: PPUSH
3865: LD_INT 28
3867: PPUSH
3868: LD_INT 52
3870: PPUSH
3871: LD_INT 0
3873: PPUSH
3874: CALL_OW 48
// i := i + 1 ;
3878: LD_ADDR_VAR 0 1
3882: PUSH
3883: LD_VAR 0 1
3887: PUSH
3888: LD_INT 1
3890: PLUS
3891: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ i ] , tmp [ i - 1 ] ) ;
3892: LD_VAR 0 3
3896: PUSH
3897: LD_VAR 0 1
3901: ARRAY
3902: PPUSH
3903: LD_VAR 0 3
3907: PUSH
3908: LD_VAR 0 1
3912: PUSH
3913: LD_INT 1
3915: MINUS
3916: ARRAY
3917: PPUSH
3918: CALL_OW 52
// end ; ComMoveXY ( tmp [ i ] , 43 , 56 ) ;
3922: LD_VAR 0 3
3926: PUSH
3927: LD_VAR 0 1
3931: ARRAY
3932: PPUSH
3933: LD_INT 43
3935: PPUSH
3936: LD_INT 56
3938: PPUSH
3939: CALL_OW 111
// wait ( 0 0$2 ) ;
3943: LD_INT 70
3945: PPUSH
3946: CALL_OW 67
// end ;
3950: GO 3786
3952: POP
3953: POP
// wait ( 0 0$2 ) ;
3954: LD_INT 70
3956: PPUSH
3957: CALL_OW 67
// if not FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) then
3961: LD_INT 7
3963: PPUSH
3964: LD_INT 22
3966: PUSH
3967: LD_INT 2
3969: PUSH
3970: EMPTY
3971: LIST
3972: LIST
3973: PPUSH
3974: CALL_OW 70
3978: NOT
3979: IFFALSE 4177
// begin AddComAgressiveMove ( tmp , 35 , 24 ) ;
3981: LD_VAR 0 3
3985: PPUSH
3986: LD_INT 35
3988: PPUSH
3989: LD_INT 24
3991: PPUSH
3992: CALL_OW 174
// usForces := usForces union UnitFilter ( tmp , [ f_class , 1 ] ) ;
3996: LD_ADDR_EXP 21
4000: PUSH
4001: LD_EXP 21
4005: PUSH
4006: LD_VAR 0 3
4010: PPUSH
4011: LD_INT 25
4013: PUSH
4014: LD_INT 1
4016: PUSH
4017: EMPTY
4018: LIST
4019: LIST
4020: PPUSH
4021: CALL_OW 72
4025: UNION
4026: ST_TO_ADDR
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
4027: LD_INT 22
4029: PUSH
4030: LD_INT 1
4032: PUSH
4033: EMPTY
4034: LIST
4035: LIST
4036: PUSH
4037: LD_INT 30
4039: PUSH
4040: LD_INT 4
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: PPUSH
4051: CALL_OW 69
4055: PUSH
4056: LD_INT 1
4058: ARRAY
4059: PPUSH
4060: CALL_OW 313
4064: PUSH
4065: LD_INT 6
4067: LESS
4068: IFFALSE 4127
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 1 ] ) , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
4070: LD_VAR 0 3
4074: PPUSH
4075: LD_INT 25
4077: PUSH
4078: LD_INT 1
4080: PUSH
4081: EMPTY
4082: LIST
4083: LIST
4084: PPUSH
4085: CALL_OW 72
4089: PPUSH
4090: LD_INT 22
4092: PUSH
4093: LD_INT 1
4095: PUSH
4096: EMPTY
4097: LIST
4098: LIST
4099: PUSH
4100: LD_INT 30
4102: PUSH
4103: LD_INT 4
4105: PUSH
4106: EMPTY
4107: LIST
4108: LIST
4109: PUSH
4110: EMPTY
4111: LIST
4112: LIST
4113: PPUSH
4114: CALL_OW 69
4118: PUSH
4119: LD_INT 1
4121: ARRAY
4122: PPUSH
4123: CALL_OW 180
// if UnitFilter ( tmp , [ f_class , 4 ] ) then
4127: LD_VAR 0 3
4131: PPUSH
4132: LD_INT 25
4134: PUSH
4135: LD_INT 4
4137: PUSH
4138: EMPTY
4139: LIST
4140: LIST
4141: PPUSH
4142: CALL_OW 72
4146: IFFALSE 4175
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 4 ] ) , usLab ) ;
4148: LD_VAR 0 3
4152: PPUSH
4153: LD_INT 25
4155: PUSH
4156: LD_INT 4
4158: PUSH
4159: EMPTY
4160: LIST
4161: LIST
4162: PPUSH
4163: CALL_OW 72
4167: PPUSH
4168: LD_INT 3
4170: PPUSH
4171: CALL_OW 180
// end else
4175: GO 4452
// begin tmp := tmp union FilterUnitsInArea ( retreatArea , [ f_side , 1 ] ) ;
4177: LD_ADDR_VAR 0 3
4181: PUSH
4182: LD_VAR 0 3
4186: PUSH
4187: LD_INT 6
4189: PPUSH
4190: LD_INT 22
4192: PUSH
4193: LD_INT 1
4195: PUSH
4196: EMPTY
4197: LIST
4198: LIST
4199: PPUSH
4200: CALL_OW 70
4204: UNION
4205: ST_TO_ADDR
// ComMoveXY ( tmp , 45 , 54 ) ;
4206: LD_VAR 0 3
4210: PPUSH
4211: LD_INT 45
4213: PPUSH
4214: LD_INT 54
4216: PPUSH
4217: CALL_OW 111
// wait ( 0 0$3 ) ;
4221: LD_INT 105
4223: PPUSH
4224: CALL_OW 67
// AddComAgressiveMove ( tmp diff UnitFilter ( tmp , [ f_class , 4 ] ) , 35 , 24 ) ;
4228: LD_VAR 0 3
4232: PUSH
4233: LD_VAR 0 3
4237: PPUSH
4238: LD_INT 25
4240: PUSH
4241: LD_INT 4
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: PPUSH
4248: CALL_OW 72
4252: DIFF
4253: PPUSH
4254: LD_INT 35
4256: PPUSH
4257: LD_INT 24
4259: PPUSH
4260: CALL_OW 174
// AddComMoveXY ( UnitFilter ( tmp , [ f_class , 4 ] ) , 42 , 49 ) ;
4264: LD_VAR 0 3
4268: PPUSH
4269: LD_INT 25
4271: PUSH
4272: LD_INT 4
4274: PUSH
4275: EMPTY
4276: LIST
4277: LIST
4278: PPUSH
4279: CALL_OW 72
4283: PPUSH
4284: LD_INT 42
4286: PPUSH
4287: LD_INT 49
4289: PPUSH
4290: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4294: LD_INT 35
4296: PPUSH
4297: CALL_OW 67
// for i in tmp do
4301: LD_ADDR_VAR 0 1
4305: PUSH
4306: LD_VAR 0 3
4310: PUSH
4311: FOR_IN
4312: IFFALSE 4443
// if IsDead ( i ) then
4314: LD_VAR 0 1
4318: PPUSH
4319: CALL_OW 301
4323: IFFALSE 4343
// tmp := tmp diff i else
4325: LD_ADDR_VAR 0 3
4329: PUSH
4330: LD_VAR 0 3
4334: PUSH
4335: LD_VAR 0 1
4339: DIFF
4340: ST_TO_ADDR
4341: GO 4441
// if GetClass ( i ) = 1 then
4343: LD_VAR 0 1
4347: PPUSH
4348: CALL_OW 257
4352: PUSH
4353: LD_INT 1
4355: EQUAL
4356: IFFALSE 4441
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 42 , 49 ) > 6 then
4358: LD_VAR 0 1
4362: PPUSH
4363: CALL_OW 256
4367: PUSH
4368: LD_INT 600
4370: LESS
4371: PUSH
4372: LD_VAR 0 1
4376: PPUSH
4377: LD_INT 42
4379: PPUSH
4380: LD_INT 49
4382: PPUSH
4383: CALL_OW 297
4387: PUSH
4388: LD_INT 6
4390: GREATER
4391: AND
4392: IFFALSE 4411
// ComMoveXY ( i , 42 , 49 ) else
4394: LD_VAR 0 1
4398: PPUSH
4399: LD_INT 42
4401: PPUSH
4402: LD_INT 49
4404: PPUSH
4405: CALL_OW 111
4409: GO 4441
// if GetLives ( i ) = 1000 then
4411: LD_VAR 0 1
4415: PPUSH
4416: CALL_OW 256
4420: PUSH
4421: LD_INT 1000
4423: EQUAL
4424: IFFALSE 4441
// ComAgressiveMove ( i , 36 , 25 ) ;
4426: LD_VAR 0 1
4430: PPUSH
4431: LD_INT 36
4433: PPUSH
4434: LD_INT 25
4436: PPUSH
4437: CALL_OW 114
// end ;
4441: GO 4311
4443: POP
4444: POP
// until not tmp ;
4445: LD_VAR 0 3
4449: NOT
4450: IFFALSE 4294
// end ; end ;
4452: PPOPN 3
4454: END
// every 0 0$1 trigger FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) and not attackDeltaAllowed do var i , un , veh ;
4455: LD_INT 7
4457: PPUSH
4458: LD_INT 22
4460: PUSH
4461: LD_INT 2
4463: PUSH
4464: EMPTY
4465: LIST
4466: LIST
4467: PPUSH
4468: CALL_OW 70
4472: PUSH
4473: LD_EXP 14
4477: NOT
4478: AND
4479: IFFALSE 4637
4481: GO 4483
4483: DISABLE
4484: LD_INT 0
4486: PPUSH
4487: PPUSH
4488: PPUSH
// begin for i := 1 to 2 do
4489: LD_ADDR_VAR 0 1
4493: PUSH
4494: DOUBLE
4495: LD_INT 1
4497: DEC
4498: ST_TO_ADDR
4499: LD_INT 2
4501: PUSH
4502: FOR_TO
4503: IFFALSE 4635
// begin wait ( 0 0$3 ) ;
4505: LD_INT 105
4507: PPUSH
4508: CALL_OW 67
// uc_side := 1 ;
4512: LD_ADDR_OWVAR 20
4516: PUSH
4517: LD_INT 1
4519: ST_TO_ADDR
// uc_nation := 1 ;
4520: LD_ADDR_OWVAR 21
4524: PUSH
4525: LD_INT 1
4527: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 90 ) ;
4528: LD_INT 1
4530: PPUSH
4531: LD_INT 1
4533: PPUSH
4534: LD_INT 2
4536: PPUSH
4537: LD_INT 1
4539: PPUSH
4540: LD_INT 1
4542: PPUSH
4543: LD_INT 4
4545: PPUSH
4546: LD_INT 90
4548: PPUSH
4549: CALL 237 0 7
// veh := CreateVehicle ;
4553: LD_ADDR_VAR 0 3
4557: PUSH
4558: CALL_OW 45
4562: ST_TO_ADDR
// PlaceUnitXY ( veh , 29 , 52 , false ) ;
4563: LD_VAR 0 3
4567: PPUSH
4568: LD_INT 29
4570: PPUSH
4571: LD_INT 52
4573: PPUSH
4574: LD_INT 0
4576: PPUSH
4577: CALL_OW 48
// PrepareHuman ( false , 3 , 3 ) ;
4581: LD_INT 0
4583: PPUSH
4584: LD_INT 3
4586: PPUSH
4587: LD_INT 3
4589: PPUSH
4590: CALL_OW 380
// un := CreateHuman ;
4594: LD_ADDR_VAR 0 2
4598: PUSH
4599: CALL_OW 44
4603: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4604: LD_VAR 0 2
4608: PPUSH
4609: LD_VAR 0 3
4613: PPUSH
4614: CALL_OW 52
// ComAgressiveMove ( veh , 36 , 25 ) ;
4618: LD_VAR 0 3
4622: PPUSH
4623: LD_INT 36
4625: PPUSH
4626: LD_INT 25
4628: PPUSH
4629: CALL_OW 114
// end ;
4633: GO 4502
4635: POP
4636: POP
// end ; end_of_file
4637: PPOPN 3
4639: END
// export function Action ; var i , tmp ; begin
4640: LD_INT 0
4642: PPUSH
4643: PPUSH
4644: PPUSH
// InGameOn ;
4645: CALL_OW 8
// DoNotAttack ( 2 , usLab ) ;
4649: LD_INT 2
4651: PPUSH
4652: LD_INT 3
4654: PPUSH
4655: CALL_OW 471
// ComMoveXY ( Heike , 78 , 61 ) ;
4659: LD_EXP 23
4663: PPUSH
4664: LD_INT 78
4666: PPUSH
4667: LD_INT 61
4669: PPUSH
4670: CALL_OW 111
// if Mike then
4674: LD_EXP 25
4678: IFFALSE 4695
// ComMoveXY ( Mike , 80 , 66 ) ;
4680: LD_EXP 25
4684: PPUSH
4685: LD_INT 80
4687: PPUSH
4688: LD_INT 66
4690: PPUSH
4691: CALL_OW 111
// if Givi then
4695: LD_EXP 24
4699: IFFALSE 4716
// ComMoveXY ( Givi , 82 , 66 ) ;
4701: LD_EXP 24
4705: PPUSH
4706: LD_INT 82
4708: PPUSH
4709: LD_INT 66
4711: PPUSH
4712: CALL_OW 111
// if Kamil then
4716: LD_EXP 26
4720: IFFALSE 4737
// ComMoveXY ( Kamil , 82 , 67 ) ;
4722: LD_EXP 26
4726: PPUSH
4727: LD_INT 82
4729: PPUSH
4730: LD_INT 67
4732: PPUSH
4733: CALL_OW 111
// CenterNowOnUnits ( Heike ) ;
4737: LD_EXP 23
4741: PPUSH
4742: CALL_OW 87
// wait ( 0 0$2 ) ;
4746: LD_INT 70
4748: PPUSH
4749: CALL_OW 67
// if Givi and Mike then
4753: LD_EXP 24
4757: PUSH
4758: LD_EXP 25
4762: AND
4763: IFFALSE 5297
// begin AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
4765: LD_EXP 24
4769: PUSH
4770: LD_EXP 25
4774: PUSH
4775: LD_EXP 26
4779: PUSH
4780: EMPTY
4781: LIST
4782: LIST
4783: LIST
4784: PPUSH
4785: LD_EXP 23
4789: PPUSH
4790: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
4794: LD_EXP 23
4798: PPUSH
4799: LD_EXP 24
4803: PPUSH
4804: CALL_OW 179
// Say ( Givi , DG-1-start ) ;
4808: LD_EXP 24
4812: PPUSH
4813: LD_STRING DG-1-start
4815: PPUSH
4816: CALL_OW 88
// Say ( Heike , DH-1-start ) ;
4820: LD_EXP 23
4824: PPUSH
4825: LD_STRING DH-1-start
4827: PPUSH
4828: CALL_OW 88
// AddComTurnUnit ( Mike , Heike ) ;
4832: LD_EXP 25
4836: PPUSH
4837: LD_EXP 23
4841: PPUSH
4842: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
4846: LD_EXP 23
4850: PPUSH
4851: LD_EXP 25
4855: PPUSH
4856: CALL_OW 179
// Say ( Mike , DM-1-start ) ;
4860: LD_EXP 25
4864: PPUSH
4865: LD_STRING DM-1-start
4867: PPUSH
4868: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
4872: LD_EXP 23
4876: PPUSH
4877: LD_STRING DH-2-start
4879: PPUSH
4880: CALL_OW 88
// Say ( Mike , DM-2-start ) ;
4884: LD_EXP 25
4888: PPUSH
4889: LD_STRING DM-2-start
4891: PPUSH
4892: CALL_OW 88
// Say ( Givi , DG-2-start ) ;
4896: LD_EXP 24
4900: PPUSH
4901: LD_STRING DG-2-start
4903: PPUSH
4904: CALL_OW 88
// ComTurnUnit ( Mike , Givi ) ;
4908: LD_EXP 25
4912: PPUSH
4913: LD_EXP 24
4917: PPUSH
4918: CALL_OW 119
// ComTurnUnit ( Heike , Mike ) ;
4922: LD_EXP 23
4926: PPUSH
4927: LD_EXP 25
4931: PPUSH
4932: CALL_OW 119
// Say ( Mike , DM-3-start ) ;
4936: LD_EXP 25
4940: PPUSH
4941: LD_STRING DM-3-start
4943: PPUSH
4944: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
4948: LD_EXP 23
4952: PPUSH
4953: LD_STRING DH-3-start
4955: PPUSH
4956: CALL_OW 88
// ComMoveXY ( [ Heike , Mike , Givi , Kamil ] , 84 , 51 ) ;
4960: LD_EXP 23
4964: PUSH
4965: LD_EXP 25
4969: PUSH
4970: LD_EXP 24
4974: PUSH
4975: LD_EXP 26
4979: PUSH
4980: EMPTY
4981: LIST
4982: LIST
4983: LIST
4984: LIST
4985: PPUSH
4986: LD_INT 84
4988: PPUSH
4989: LD_INT 51
4991: PPUSH
4992: CALL_OW 111
// wait ( 0 0$2 ) ;
4996: LD_INT 70
4998: PPUSH
4999: CALL_OW 67
// Say ( Givi , DG-3-start ) ;
5003: LD_EXP 24
5007: PPUSH
5008: LD_STRING DG-3-start
5010: PPUSH
5011: CALL_OW 88
// ComHold ( [ Heike , Mike , Givi , Kamil ] ) ;
5015: LD_EXP 23
5019: PUSH
5020: LD_EXP 25
5024: PUSH
5025: LD_EXP 24
5029: PUSH
5030: LD_EXP 26
5034: PUSH
5035: EMPTY
5036: LIST
5037: LIST
5038: LIST
5039: LIST
5040: PPUSH
5041: CALL_OW 140
// AddComTurnUnit ( Heike , Givi ) ;
5045: LD_EXP 23
5049: PPUSH
5050: LD_EXP 24
5054: PPUSH
5055: CALL_OW 179
// AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
5059: LD_EXP 24
5063: PUSH
5064: LD_EXP 25
5068: PUSH
5069: LD_EXP 26
5073: PUSH
5074: EMPTY
5075: LIST
5076: LIST
5077: LIST
5078: PPUSH
5079: LD_EXP 23
5083: PPUSH
5084: CALL_OW 179
// Say ( Heike , DH-4-start ) ;
5088: LD_EXP 23
5092: PPUSH
5093: LD_STRING DH-4-start
5095: PPUSH
5096: CALL_OW 88
// Say ( Givi , DG-4-start ) ;
5100: LD_EXP 24
5104: PPUSH
5105: LD_STRING DG-4-start
5107: PPUSH
5108: CALL_OW 88
// Say ( Heike , DH-5-start ) ;
5112: LD_EXP 23
5116: PPUSH
5117: LD_STRING DH-5-start
5119: PPUSH
5120: CALL_OW 88
// Say ( Givi , DG-5-start ) ;
5124: LD_EXP 24
5128: PPUSH
5129: LD_STRING DG-5-start
5131: PPUSH
5132: CALL_OW 88
// Say ( Heike , DH-6-start ) ;
5136: LD_EXP 23
5140: PPUSH
5141: LD_STRING DH-6-start
5143: PPUSH
5144: CALL_OW 88
// if not Kamil then
5148: LD_EXP 26
5152: NOT
5153: IFFALSE 5204
// begin Say ( Mike , DM-6-start ) ;
5155: LD_EXP 25
5159: PPUSH
5160: LD_STRING DM-6-start
5162: PPUSH
5163: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi ] , Mike ) ;
5167: LD_EXP 23
5171: PUSH
5172: LD_EXP 24
5176: PUSH
5177: EMPTY
5178: LIST
5179: LIST
5180: PPUSH
5181: LD_EXP 25
5185: PPUSH
5186: CALL_OW 119
// Say ( Givi , DG-6-start ) ;
5190: LD_EXP 24
5194: PPUSH
5195: LD_STRING DG-6-start
5197: PPUSH
5198: CALL_OW 88
// end else
5202: GO 5283
// begin Say ( Mike , DM-6-start-a ) ;
5204: LD_EXP 25
5208: PPUSH
5209: LD_STRING DM-6-start-a
5211: PPUSH
5212: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi , Mike ] , Kamil ) ;
5216: LD_EXP 23
5220: PUSH
5221: LD_EXP 24
5225: PUSH
5226: LD_EXP 25
5230: PUSH
5231: EMPTY
5232: LIST
5233: LIST
5234: LIST
5235: PPUSH
5236: LD_EXP 26
5240: PPUSH
5241: CALL_OW 119
// ComTurnUnit ( Kamil , Mike ) ;
5245: LD_EXP 26
5249: PPUSH
5250: LD_EXP 25
5254: PPUSH
5255: CALL_OW 119
// Say ( Kamil , DKam-7-start-a ) ;
5259: LD_EXP 26
5263: PPUSH
5264: LD_STRING DKam-7-start-a
5266: PPUSH
5267: CALL_OW 88
// Say ( Givi , DG-6-start-a ) ;
5271: LD_EXP 24
5275: PPUSH
5276: LD_STRING DG-6-start-a
5278: PPUSH
5279: CALL_OW 88
// end ; Say ( Heike , DH-7-start ) ;
5283: LD_EXP 23
5287: PPUSH
5288: LD_STRING DH-7-start
5290: PPUSH
5291: CALL_OW 88
// end else
5295: GO 6019
// if not Mike and Givi then
5297: LD_EXP 25
5301: NOT
5302: PUSH
5303: LD_EXP 24
5307: AND
5308: IFFALSE 5653
// begin AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5310: LD_EXP 24
5314: PUSH
5315: LD_EXP 26
5319: PUSH
5320: EMPTY
5321: LIST
5322: LIST
5323: PPUSH
5324: LD_EXP 23
5328: PPUSH
5329: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
5333: LD_EXP 23
5337: PPUSH
5338: LD_EXP 24
5342: PPUSH
5343: CALL_OW 179
// Say ( Givi , DG-1-start-c ) ;
5347: LD_EXP 24
5351: PPUSH
5352: LD_STRING DG-1-start-c
5354: PPUSH
5355: CALL_OW 88
// Say ( Heike , DH-1-start-c ) ;
5359: LD_EXP 23
5363: PPUSH
5364: LD_STRING DH-1-start-c
5366: PPUSH
5367: CALL_OW 88
// Say ( Givi , DG-2-start-c ) ;
5371: LD_EXP 24
5375: PPUSH
5376: LD_STRING DG-2-start-c
5378: PPUSH
5379: CALL_OW 88
// Say ( Heike , DH-2-start-c ) ;
5383: LD_EXP 23
5387: PPUSH
5388: LD_STRING DH-2-start-c
5390: PPUSH
5391: CALL_OW 88
// Say ( Givi , DG-3-start-c ) ;
5395: LD_EXP 24
5399: PPUSH
5400: LD_STRING DG-3-start-c
5402: PPUSH
5403: CALL_OW 88
// ComMoveXY ( Heike , 83 , 56 ) ;
5407: LD_EXP 23
5411: PPUSH
5412: LD_INT 83
5414: PPUSH
5415: LD_INT 56
5417: PPUSH
5418: CALL_OW 111
// ComMoveXY ( Givi , 83 , 59 ) ;
5422: LD_EXP 24
5426: PPUSH
5427: LD_INT 83
5429: PPUSH
5430: LD_INT 59
5432: PPUSH
5433: CALL_OW 111
// if Kamil then
5437: LD_EXP 26
5441: IFFALSE 5458
// ComMoveXY ( Kamil , 80 , 58 ) ;
5443: LD_EXP 26
5447: PPUSH
5448: LD_INT 80
5450: PPUSH
5451: LD_INT 58
5453: PPUSH
5454: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5458: LD_EXP 23
5462: PPUSH
5463: LD_EXP 24
5467: PPUSH
5468: CALL_OW 179
// AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5472: LD_EXP 24
5476: PUSH
5477: LD_EXP 26
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: PPUSH
5486: LD_EXP 23
5490: PPUSH
5491: CALL_OW 179
// Say ( Heike , DH-3-start-c ) ;
5495: LD_EXP 23
5499: PPUSH
5500: LD_STRING DH-3-start-c
5502: PPUSH
5503: CALL_OW 88
// Say ( Givi , DG-4-start-c ) ;
5507: LD_EXP 24
5511: PPUSH
5512: LD_STRING DG-4-start-c
5514: PPUSH
5515: CALL_OW 88
// Say ( Heike , DH-5-start-c ) ;
5519: LD_EXP 23
5523: PPUSH
5524: LD_STRING DH-5-start-c
5526: PPUSH
5527: CALL_OW 88
// Say ( Givi , DG-5-start-c ) ;
5531: LD_EXP 24
5535: PPUSH
5536: LD_STRING DG-5-start-c
5538: PPUSH
5539: CALL_OW 88
// Say ( Heike , DH-6-start-c ) ;
5543: LD_EXP 23
5547: PPUSH
5548: LD_STRING DH-6-start-c
5550: PPUSH
5551: CALL_OW 88
// Say ( Givi , DG-6-start-c ) ;
5555: LD_EXP 24
5559: PPUSH
5560: LD_STRING DG-6-start-c
5562: PPUSH
5563: CALL_OW 88
// if Kamil then
5567: LD_EXP 26
5571: IFFALSE 5627
// begin ComTurnUnit ( Kamil , Heike ) ;
5573: LD_EXP 26
5577: PPUSH
5578: LD_EXP 23
5582: PPUSH
5583: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5587: LD_EXP 26
5591: PPUSH
5592: LD_STRING DKam-1-start-c
5594: PPUSH
5595: CALL_OW 88
// ComTurnUnit ( Givi , Kamil ) ;
5599: LD_EXP 24
5603: PPUSH
5604: LD_EXP 26
5608: PPUSH
5609: CALL_OW 119
// Say ( Givi , DG-7-start-c ) ;
5613: LD_EXP 24
5617: PPUSH
5618: LD_STRING DG-7-start-c
5620: PPUSH
5621: CALL_OW 88
// end else
5625: GO 5651
// begin Say ( Givi , DG-8-start-c ) ;
5627: LD_EXP 24
5631: PPUSH
5632: LD_STRING DG-8-start-c
5634: PPUSH
5635: CALL_OW 88
// Say ( Heike , DH-7-start-c ) ;
5639: LD_EXP 23
5643: PPUSH
5644: LD_STRING DH-7-start-c
5646: PPUSH
5647: CALL_OW 88
// end ; end else
5651: GO 6019
// if not Givi and Mike then
5653: LD_EXP 24
5657: NOT
5658: PUSH
5659: LD_EXP 25
5663: AND
5664: IFFALSE 5923
// begin AddComTurnUnit ( [ Mike , Kamil ] , Heike ) ;
5666: LD_EXP 25
5670: PUSH
5671: LD_EXP 26
5675: PUSH
5676: EMPTY
5677: LIST
5678: LIST
5679: PPUSH
5680: LD_EXP 23
5684: PPUSH
5685: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
5689: LD_EXP 23
5693: PPUSH
5694: LD_EXP 25
5698: PPUSH
5699: CALL_OW 179
// Say ( Mike , DM-1-start-b ) ;
5703: LD_EXP 25
5707: PPUSH
5708: LD_STRING DM-1-start-b
5710: PPUSH
5711: CALL_OW 88
// Say ( Heike , DH-1-start-b ) ;
5715: LD_EXP 23
5719: PPUSH
5720: LD_STRING DH-1-start-b
5722: PPUSH
5723: CALL_OW 88
// Say ( Mike , DM-2-start-b ) ;
5727: LD_EXP 25
5731: PPUSH
5732: LD_STRING DM-2-start-b
5734: PPUSH
5735: CALL_OW 88
// Say ( Heike , DH-2-start-b ) ;
5739: LD_EXP 23
5743: PPUSH
5744: LD_STRING DH-2-start-b
5746: PPUSH
5747: CALL_OW 88
// Say ( Mike , DM-3-start-b ) ;
5751: LD_EXP 25
5755: PPUSH
5756: LD_STRING DM-3-start-b
5758: PPUSH
5759: CALL_OW 88
// if Kamil then
5763: LD_EXP 26
5767: IFFALSE 5784
// ComMoveXY ( Kamil , 80 , 58 ) ;
5769: LD_EXP 26
5773: PPUSH
5774: LD_INT 80
5776: PPUSH
5777: LD_INT 58
5779: PPUSH
5780: CALL_OW 111
// ComMoveXY ( Heike , 83 , 56 ) ;
5784: LD_EXP 23
5788: PPUSH
5789: LD_INT 83
5791: PPUSH
5792: LD_INT 56
5794: PPUSH
5795: CALL_OW 111
// ComMoveXY ( Mike , 83 , 59 ) ;
5799: LD_EXP 25
5803: PPUSH
5804: LD_INT 83
5806: PPUSH
5807: LD_INT 59
5809: PPUSH
5810: CALL_OW 111
// AddComTurnUnit ( Heike , Mike ) ;
5814: LD_EXP 23
5818: PPUSH
5819: LD_EXP 25
5823: PPUSH
5824: CALL_OW 179
// AddComTurnUnit ( [ Kamil , Mike ] , Heike ) ;
5828: LD_EXP 26
5832: PUSH
5833: LD_EXP 25
5837: PUSH
5838: EMPTY
5839: LIST
5840: LIST
5841: PPUSH
5842: LD_EXP 23
5846: PPUSH
5847: CALL_OW 179
// Say ( Heike , DH-3-start-b ) ;
5851: LD_EXP 23
5855: PPUSH
5856: LD_STRING DH-3-start-b
5858: PPUSH
5859: CALL_OW 88
// Say ( Mike , DM-4-start-b ) ;
5863: LD_EXP 25
5867: PPUSH
5868: LD_STRING DM-4-start-b
5870: PPUSH
5871: CALL_OW 88
// if Kamil then
5875: LD_EXP 26
5879: IFFALSE 5909
// begin ComTurnUnit ( Kamil , Heike ) ;
5881: LD_EXP 26
5885: PPUSH
5886: LD_EXP 23
5890: PPUSH
5891: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5895: LD_EXP 26
5899: PPUSH
5900: LD_STRING DKam-1-start-c
5902: PPUSH
5903: CALL_OW 88
// end else
5907: GO 5921
// begin Say ( Mike , DM-5-start-b ) ;
5909: LD_EXP 25
5913: PPUSH
5914: LD_STRING DM-5-start-b
5916: PPUSH
5917: CALL_OW 88
// end ; end else
5921: GO 6019
// if Kamil then
5923: LD_EXP 26
5927: IFFALSE 6007
// begin AddComTurnUnit ( Heike , Kamil ) ;
5929: LD_EXP 23
5933: PPUSH
5934: LD_EXP 26
5938: PPUSH
5939: CALL_OW 179
// AddComTurnUnit ( Kamil , Heike ) ;
5943: LD_EXP 26
5947: PPUSH
5948: LD_EXP 23
5952: PPUSH
5953: CALL_OW 179
// Say ( Heike , DH-1-start-f ) ;
5957: LD_EXP 23
5961: PPUSH
5962: LD_STRING DH-1-start-f
5964: PPUSH
5965: CALL_OW 88
// Say ( Kamil , DKam-1-start-f ) ;
5969: LD_EXP 26
5973: PPUSH
5974: LD_STRING DKam-1-start-f
5976: PPUSH
5977: CALL_OW 88
// Say ( Heike , DH-2-start-f ) ;
5981: LD_EXP 23
5985: PPUSH
5986: LD_STRING DH-2-start-f
5988: PPUSH
5989: CALL_OW 88
// Say ( Kamil , DKam-2-start-f ) ;
5993: LD_EXP 26
5997: PPUSH
5998: LD_STRING DKam-2-start-f
6000: PPUSH
6001: CALL_OW 88
// end else
6005: GO 6019
// begin Say ( Heike , DH-1-start-d ) ;
6007: LD_EXP 23
6011: PPUSH
6012: LD_STRING DH-1-start-d
6014: PPUSH
6015: CALL_OW 88
// end ; ComFree ( [ Heike , Givi , Mike , Kamil ] ) ;
6019: LD_EXP 23
6023: PUSH
6024: LD_EXP 24
6028: PUSH
6029: LD_EXP 25
6033: PUSH
6034: LD_EXP 26
6038: PUSH
6039: EMPTY
6040: LIST
6041: LIST
6042: LIST
6043: LIST
6044: PPUSH
6045: CALL_OW 139
// InGameOff ;
6049: CALL_OW 9
// ChangeMissionObjectives ( OEast ) ;
6053: LD_STRING OEast
6055: PPUSH
6056: CALL_OW 337
// SaveForQuickRestart ;
6060: CALL_OW 22
// wait ( 0 0$20 ) ;
6064: LD_INT 700
6066: PPUSH
6067: CALL_OW 67
// SendSciToForest ;
6071: CALL 1479 0 0
// if Difficulty = 1 then
6075: LD_OWVAR 67
6079: PUSH
6080: LD_INT 1
6082: EQUAL
6083: IFFALSE 6087
// exit ;
6085: GO 6204
// wait ( [ 5 5$00 , 2 2$30 ] [ Difficulty - 1 ] ) ;
6087: LD_INT 10500
6089: PUSH
6090: LD_INT 5250
6092: PUSH
6093: EMPTY
6094: LIST
6095: LIST
6096: PUSH
6097: LD_OWVAR 67
6101: PUSH
6102: LD_INT 1
6104: MINUS
6105: ARRAY
6106: PPUSH
6107: CALL_OW 67
// if usAlert then
6111: LD_EXP 10
6115: IFFALSE 6119
// exit ;
6117: GO 6204
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
6119: LD_ADDR_VAR 0 3
6123: PUSH
6124: LD_INT 22
6126: PUSH
6127: LD_INT 1
6129: PUSH
6130: EMPTY
6131: LIST
6132: LIST
6133: PUSH
6134: LD_INT 25
6136: PUSH
6137: LD_INT 2
6139: PUSH
6140: EMPTY
6141: LIST
6142: LIST
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: PPUSH
6148: CALL_OW 69
6152: ST_TO_ADDR
// if not tmp then
6153: LD_VAR 0 3
6157: NOT
6158: IFFALSE 6162
// exit ;
6160: GO 6204
// ComExitBuilding ( tmp ) ;
6162: LD_VAR 0 3
6166: PPUSH
6167: CALL_OW 122
// AddComBuild ( tmp , b_breastwork , 40 , 13 , 3 ) ;
6171: LD_VAR 0 3
6175: PPUSH
6176: LD_INT 31
6178: PPUSH
6179: LD_INT 40
6181: PPUSH
6182: LD_INT 13
6184: PPUSH
6185: LD_INT 3
6187: PPUSH
6188: CALL_OW 205
// AddComEnterUnit ( tmp , Delta ) ;
6192: LD_VAR 0 3
6196: PPUSH
6197: LD_INT 1
6199: PPUSH
6200: CALL_OW 180
// end ;
6204: LD_VAR 0 1
6208: RET
// every 3 3$00 do
6209: GO 6211
6211: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
6212: LD_INT 1
6214: PPUSH
6215: LD_INT 570
6217: PPUSH
6218: LD_INT 350
6220: PPUSH
6221: CALL_OW 550
// wait ( 2 2$40 ) ;
6225: LD_INT 5600
6227: PPUSH
6228: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
6232: LD_INT 0
6234: PPUSH
6235: LD_INT 570
6237: PPUSH
6238: LD_INT 350
6240: PPUSH
6241: CALL_OW 550
// end ;
6245: END
// every 0 0$1 trigger not aviradzeSpotted and See ( 2 , Aviradze ) do var i , pepAmount ;
6246: LD_EXP 4
6250: NOT
6251: PUSH
6252: LD_INT 2
6254: PPUSH
6255: LD_EXP 27
6259: PPUSH
6260: CALL_OW 292
6264: AND
6265: IFFALSE 7171
6267: GO 6269
6269: DISABLE
6270: LD_INT 0
6272: PPUSH
6273: PPUSH
// begin aviradzeSpotted := true ;
6274: LD_ADDR_EXP 4
6278: PUSH
6279: LD_INT 1
6281: ST_TO_ADDR
// pepAmount := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ;
6282: LD_ADDR_VAR 0 2
6286: PUSH
6287: LD_INT 22
6289: PUSH
6290: LD_INT 2
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PUSH
6297: LD_INT 21
6299: PUSH
6300: LD_INT 1
6302: PUSH
6303: EMPTY
6304: LIST
6305: LIST
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: PPUSH
6311: CALL_OW 69
6315: ST_TO_ADDR
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6316: LD_EXP 23
6320: PPUSH
6321: LD_EXP 27
6325: PPUSH
6326: CALL_OW 250
6330: PPUSH
6331: LD_EXP 27
6335: PPUSH
6336: CALL_OW 251
6340: PPUSH
6341: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6345: LD_INT 35
6347: PPUSH
6348: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 16 ;
6352: LD_EXP 23
6356: PPUSH
6357: LD_EXP 27
6361: PPUSH
6362: CALL_OW 296
6366: PUSH
6367: LD_INT 16
6369: LESS
6370: IFFALSE 6345
// InGameOn ;
6372: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
6376: LD_INT 5
6378: PPUSH
6379: LD_INT 2
6381: PPUSH
6382: CALL_OW 343
// if pepAmount > 2 then
6386: LD_VAR 0 2
6390: PUSH
6391: LD_INT 2
6393: GREATER
6394: IFFALSE 6410
// Say ( Heike , DH-1-spot ) else
6396: LD_EXP 23
6400: PPUSH
6401: LD_STRING DH-1-spot
6403: PPUSH
6404: CALL_OW 88
6408: GO 6422
// Say ( Heike , DH-1-spot-d ) ;
6410: LD_EXP 23
6414: PPUSH
6415: LD_STRING DH-1-spot-d
6417: PPUSH
6418: CALL_OW 88
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6422: LD_EXP 23
6426: PPUSH
6427: LD_EXP 27
6431: PPUSH
6432: CALL_OW 250
6436: PPUSH
6437: LD_EXP 27
6441: PPUSH
6442: CALL_OW 251
6446: PPUSH
6447: CALL_OW 111
// for i in [ Kamil , Mike , Givi ] do
6451: LD_ADDR_VAR 0 1
6455: PUSH
6456: LD_EXP 26
6460: PUSH
6461: LD_EXP 25
6465: PUSH
6466: LD_EXP 24
6470: PUSH
6471: EMPTY
6472: LIST
6473: LIST
6474: LIST
6475: PUSH
6476: FOR_IN
6477: IFFALSE 6516
// if GetDistUnits ( i , Aviradze ) > 7 then
6479: LD_VAR 0 1
6483: PPUSH
6484: LD_EXP 27
6488: PPUSH
6489: CALL_OW 296
6493: PUSH
6494: LD_INT 7
6496: GREATER
6497: IFFALSE 6514
// ComMoveXY ( i , 102 , 40 ) ;
6499: LD_VAR 0 1
6503: PPUSH
6504: LD_INT 102
6506: PPUSH
6507: LD_INT 40
6509: PPUSH
6510: CALL_OW 111
6514: GO 6476
6516: POP
6517: POP
// repeat wait ( 0 0$1 ) ;
6518: LD_INT 35
6520: PPUSH
6521: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 6 ;
6525: LD_EXP 23
6529: PPUSH
6530: LD_EXP 27
6534: PPUSH
6535: CALL_OW 296
6539: PUSH
6540: LD_INT 6
6542: LESS
6543: IFFALSE 6518
// ComTurnUnit ( Heike , Aviradze ) ;
6545: LD_EXP 23
6549: PPUSH
6550: LD_EXP 27
6554: PPUSH
6555: CALL_OW 119
// ComTurnUnit ( [ Aviradze , Sophia , Kaia ] , Heike ) ;
6559: LD_EXP 27
6563: PUSH
6564: LD_EXP 29
6568: PUSH
6569: LD_EXP 28
6573: PUSH
6574: EMPTY
6575: LIST
6576: LIST
6577: LIST
6578: PPUSH
6579: LD_EXP 23
6583: PPUSH
6584: CALL_OW 119
// if pepAmount > 1 then
6588: LD_VAR 0 2
6592: PUSH
6593: LD_INT 1
6595: GREATER
6596: IFFALSE 6648
// begin wait ( 0 0$2 ) ;
6598: LD_INT 70
6600: PPUSH
6601: CALL_OW 67
// ComTurnUnit ( [ Kamil , Mike , Givi ] , Aviradze ) ;
6605: LD_EXP 26
6609: PUSH
6610: LD_EXP 25
6614: PUSH
6615: LD_EXP 24
6619: PUSH
6620: EMPTY
6621: LIST
6622: LIST
6623: LIST
6624: PPUSH
6625: LD_EXP 27
6629: PPUSH
6630: CALL_OW 119
// Say ( Heike , DH-2-spot ) ;
6634: LD_EXP 23
6638: PPUSH
6639: LD_STRING DH-2-spot
6641: PPUSH
6642: CALL_OW 88
// end else
6646: GO 6660
// Say ( Heike , DH-2-spot-d ) ;
6648: LD_EXP 23
6652: PPUSH
6653: LD_STRING DH-2-spot-d
6655: PPUSH
6656: CALL_OW 88
// Say ( Aviradze , DA-2-spot ) ;
6660: LD_EXP 27
6664: PPUSH
6665: LD_STRING DA-2-spot
6667: PPUSH
6668: CALL_OW 88
// Say ( Heike , DH-3-spot ) ;
6672: LD_EXP 23
6676: PPUSH
6677: LD_STRING DH-3-spot
6679: PPUSH
6680: CALL_OW 88
// ComMoveUnit ( Kaia , Heike ) ;
6684: LD_EXP 28
6688: PPUSH
6689: LD_EXP 23
6693: PPUSH
6694: CALL_OW 112
// ComTurnUnit ( Heike , Kaia ) ;
6698: LD_EXP 23
6702: PPUSH
6703: LD_EXP 28
6707: PPUSH
6708: CALL_OW 119
// wait ( 0 0$0.3 ) ;
6712: LD_INT 10
6714: PPUSH
6715: CALL_OW 67
// Say ( Kaia , DK-3-spot ) ;
6719: LD_EXP 28
6723: PPUSH
6724: LD_STRING DK-3-spot
6726: PPUSH
6727: CALL_OW 88
// ComTurnUnit ( Kaia , Heike ) ;
6731: LD_EXP 28
6735: PPUSH
6736: LD_EXP 23
6740: PPUSH
6741: CALL_OW 119
// Say ( Heike , DH-4-spot ) ;
6745: LD_EXP 23
6749: PPUSH
6750: LD_STRING DH-4-spot
6752: PPUSH
6753: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6757: LD_INT 10
6759: PPUSH
6760: CALL_OW 67
// ComTurnUnit ( Heike , Aviradze ) ;
6764: LD_EXP 23
6768: PPUSH
6769: LD_EXP 27
6773: PPUSH
6774: CALL_OW 119
// Say ( Aviradze , DA-4-spot ) ;
6778: LD_EXP 27
6782: PPUSH
6783: LD_STRING DA-4-spot
6785: PPUSH
6786: CALL_OW 88
// ComTurnUnit ( Kaia , Aviradze ) ;
6790: LD_EXP 28
6794: PPUSH
6795: LD_EXP 27
6799: PPUSH
6800: CALL_OW 119
// Say ( Kaia , DK-4-spot ) ;
6804: LD_EXP 28
6808: PPUSH
6809: LD_STRING DK-4-spot
6811: PPUSH
6812: CALL_OW 88
// ComTurnUnit ( Aviradze , Kaia ) ;
6816: LD_EXP 27
6820: PPUSH
6821: LD_EXP 28
6825: PPUSH
6826: CALL_OW 119
// Say ( Aviradze , DA-5-spot ) ;
6830: LD_EXP 27
6834: PPUSH
6835: LD_STRING DA-5-spot
6837: PPUSH
6838: CALL_OW 88
// Say ( Kaia , DK-5-spot ) ;
6842: LD_EXP 28
6846: PPUSH
6847: LD_STRING DK-5-spot
6849: PPUSH
6850: CALL_OW 88
// if pepAmount = 1 then
6854: LD_VAR 0 2
6858: PUSH
6859: LD_INT 1
6861: EQUAL
6862: IFFALSE 6876
// Say ( Heike , DH-5-spot-f ) ;
6864: LD_EXP 23
6868: PPUSH
6869: LD_STRING DH-5-spot-f
6871: PPUSH
6872: CALL_OW 88
// if pepAmount < 3 then
6876: LD_VAR 0 2
6880: PUSH
6881: LD_INT 3
6883: LESS
6884: IFFALSE 6900
// Say ( Aviradze , DA-6-spot-f ) else
6886: LD_EXP 27
6890: PPUSH
6891: LD_STRING DA-6-spot-f
6893: PPUSH
6894: CALL_OW 88
6898: GO 6936
// if pepAmount < 4 then
6900: LD_VAR 0 2
6904: PUSH
6905: LD_INT 4
6907: LESS
6908: IFFALSE 6924
// Say ( Aviradze , DA-6-spot-c ) else
6910: LD_EXP 27
6914: PPUSH
6915: LD_STRING DA-6-spot-c
6917: PPUSH
6918: CALL_OW 88
6922: GO 6936
// Say ( Aviradze , DA-6-spot ) ;
6924: LD_EXP 27
6928: PPUSH
6929: LD_STRING DA-6-spot
6931: PPUSH
6932: CALL_OW 88
// if Kamil then
6936: LD_EXP 26
6940: IFFALSE 6954
// Say ( Kamil , DKam-6-spot ) ;
6942: LD_EXP 26
6946: PPUSH
6947: LD_STRING DKam-6-spot
6949: PPUSH
6950: CALL_OW 88
// Say ( Kaia , DK-6-spot ) ;
6954: LD_EXP 28
6958: PPUSH
6959: LD_STRING DK-6-spot
6961: PPUSH
6962: CALL_OW 88
// ComTurnUnit ( Aviradze , Heike ) ;
6966: LD_EXP 27
6970: PPUSH
6971: LD_EXP 23
6975: PPUSH
6976: CALL_OW 119
// Say ( Aviradze , DA-7-spot ) ;
6980: LD_EXP 27
6984: PPUSH
6985: LD_STRING DA-7-spot
6987: PPUSH
6988: CALL_OW 88
// Say ( Heike , DH-7-spot ) ;
6992: LD_EXP 23
6996: PPUSH
6997: LD_STRING DH-7-spot
6999: PPUSH
7000: CALL_OW 88
// if sciCounterKill >= 3 then
7004: LD_EXP 9
7008: PUSH
7009: LD_INT 3
7011: GREATEREQUAL
7012: IFFALSE 7038
// begin Say ( Heike , DH-7-spot-a ) ;
7014: LD_EXP 23
7018: PPUSH
7019: LD_STRING DH-7-spot-a
7021: PPUSH
7022: CALL_OW 88
// Say ( Aviradze , DA-8-spot-a ) ;
7026: LD_EXP 27
7030: PPUSH
7031: LD_STRING DA-8-spot-a
7033: PPUSH
7034: CALL_OW 88
// end ; InGameOff ;
7038: CALL_OW 9
// if sciCounterKill < 3 then
7042: LD_EXP 9
7046: PUSH
7047: LD_INT 3
7049: LESS
7050: IFFALSE 7109
// begin SetSide ( Kaia , 2 ) ;
7052: LD_EXP 28
7056: PPUSH
7057: LD_INT 2
7059: PPUSH
7060: CALL_OW 235
// ComFree ( Kaia ) ;
7064: LD_EXP 28
7068: PPUSH
7069: CALL_OW 139
// if Kamil then
7073: LD_EXP 26
7077: IFFALSE 7100
// begin ComHold ( Kamil ) ;
7079: LD_EXP 26
7083: PPUSH
7084: CALL_OW 140
// SetSide ( Kamil , 5 ) ;
7088: LD_EXP 26
7092: PPUSH
7093: LD_INT 5
7095: PPUSH
7096: CALL_OW 235
// end ; ChangeMissionObjectives ( OSci ) ;
7100: LD_STRING OSci
7102: PPUSH
7103: CALL_OW 337
// end else
7107: GO 7171
// begin aviradzeQuestDone := true ;
7109: LD_ADDR_EXP 8
7113: PUSH
7114: LD_INT 1
7116: ST_TO_ADDR
// attackDeltaAllowed := true ;
7117: LD_ADDR_EXP 14
7121: PUSH
7122: LD_INT 1
7124: ST_TO_ADDR
// ChangeMissionObjectives ( ODelta2 ) ;
7125: LD_STRING ODelta2
7127: PPUSH
7128: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
7132: LD_ADDR_VAR 0 1
7136: PUSH
7137: LD_INT 22
7139: PUSH
7140: LD_INT 5
7142: PUSH
7143: EMPTY
7144: LIST
7145: LIST
7146: PPUSH
7147: CALL_OW 69
7151: PUSH
7152: FOR_IN
7153: IFFALSE 7169
// SetSide ( i , 2 ) ;
7155: LD_VAR 0 1
7159: PPUSH
7160: LD_INT 2
7162: PPUSH
7163: CALL_OW 235
7167: GO 7152
7169: POP
7170: POP
// end ; end ;
7171: PPOPN 2
7173: END
// every 0 0$1 trigger not sciSpotted and GetDistUnits ( NearestUnitToUnit ( usSci , Heike ) , Heike ) < 8 and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and not aviradzeSpotted do
7174: LD_EXP 7
7178: NOT
7179: PUSH
7180: LD_EXP 22
7184: PPUSH
7185: LD_EXP 23
7189: PPUSH
7190: CALL_OW 74
7194: PPUSH
7195: LD_EXP 23
7199: PPUSH
7200: CALL_OW 296
7204: PUSH
7205: LD_INT 8
7207: LESS
7208: AND
7209: PUSH
7210: LD_INT 2
7212: PPUSH
7213: LD_EXP 22
7217: PPUSH
7218: LD_EXP 23
7222: PPUSH
7223: CALL_OW 74
7227: PPUSH
7228: CALL_OW 292
7232: AND
7233: PUSH
7234: LD_INT 22
7236: PUSH
7237: LD_INT 2
7239: PUSH
7240: EMPTY
7241: LIST
7242: LIST
7243: PUSH
7244: LD_INT 21
7246: PUSH
7247: LD_INT 1
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: PUSH
7254: EMPTY
7255: LIST
7256: LIST
7257: PPUSH
7258: CALL_OW 69
7262: PUSH
7263: LD_INT 1
7265: GREATER
7266: AND
7267: PUSH
7268: LD_EXP 4
7272: NOT
7273: AND
7274: IFFALSE 7318
7276: GO 7278
7278: DISABLE
// begin sciSpotted := true ;
7279: LD_ADDR_EXP 7
7283: PUSH
7284: LD_INT 1
7286: ST_TO_ADDR
// CenterNowOnUnits ( NearestUnitToUnit ( usSci , Heike ) ) ;
7287: LD_EXP 22
7291: PPUSH
7292: LD_EXP 23
7296: PPUSH
7297: CALL_OW 74
7301: PPUSH
7302: CALL_OW 87
// Say ( Heike , DH-1-sci ) ;
7306: LD_EXP 23
7310: PPUSH
7311: LD_STRING DH-1-sci
7313: PPUSH
7314: CALL_OW 88
// end ;
7318: END
// every 0 0$1 trigger aviradzeSpotted and not sciSpotted and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and aviradzeSpotted and not aviradzeQuestDone do var un ;
7319: LD_EXP 4
7323: PUSH
7324: LD_EXP 7
7328: NOT
7329: AND
7330: PUSH
7331: LD_INT 2
7333: PPUSH
7334: LD_EXP 22
7338: PPUSH
7339: LD_EXP 23
7343: PPUSH
7344: CALL_OW 74
7348: PPUSH
7349: CALL_OW 292
7353: AND
7354: PUSH
7355: LD_INT 22
7357: PUSH
7358: LD_INT 2
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: PUSH
7365: LD_INT 21
7367: PUSH
7368: LD_INT 1
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: PUSH
7375: EMPTY
7376: LIST
7377: LIST
7378: PPUSH
7379: CALL_OW 69
7383: PUSH
7384: LD_INT 1
7386: GREATER
7387: AND
7388: PUSH
7389: LD_EXP 4
7393: AND
7394: PUSH
7395: LD_EXP 8
7399: NOT
7400: AND
7401: IFFALSE 7542
7403: GO 7405
7405: DISABLE
7406: LD_INT 0
7408: PPUSH
// begin sciSpotted := true ;
7409: LD_ADDR_EXP 7
7413: PUSH
7414: LD_INT 1
7416: ST_TO_ADDR
// un := NearestUnitToUnit ( usSci , Heike ) ;
7417: LD_ADDR_VAR 0 1
7421: PUSH
7422: LD_EXP 22
7426: PPUSH
7427: LD_EXP 23
7431: PPUSH
7432: CALL_OW 74
7436: ST_TO_ADDR
// DialogueOn ;
7437: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 2 , - 3 ) ;
7441: LD_VAR 0 1
7445: PPUSH
7446: CALL_OW 250
7450: PPUSH
7451: LD_VAR 0 1
7455: PPUSH
7456: CALL_OW 251
7460: PPUSH
7461: LD_INT 2
7463: PPUSH
7464: LD_INT 3
7466: NEG
7467: PPUSH
7468: CALL_OW 330
// CenterNowOnUnits ( un ) ;
7472: LD_VAR 0 1
7476: PPUSH
7477: CALL_OW 87
// Say ( Heike , DH-1-sci-a ) ;
7481: LD_EXP 23
7485: PPUSH
7486: LD_STRING DH-1-sci-a
7488: PPUSH
7489: CALL_OW 88
// if Mike then
7493: LD_EXP 25
7497: IFFALSE 7511
// Say ( Mike , DM-1-sci-a ) ;
7499: LD_EXP 25
7503: PPUSH
7504: LD_STRING DM-1-sci-a
7506: PPUSH
7507: CALL_OW 88
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 2 ) ;
7511: LD_VAR 0 1
7515: PPUSH
7516: CALL_OW 250
7520: PPUSH
7521: LD_VAR 0 1
7525: PPUSH
7526: CALL_OW 251
7530: PPUSH
7531: LD_INT 2
7533: PPUSH
7534: CALL_OW 331
// DialogueOff ;
7538: CALL_OW 7
// end ;
7542: PPOPN 1
7544: END
// every 0 0$1 trigger usAlert and ( GetLives ( Gladstone ) < 1000 or GetLives ( usLab ) < 999 ) do var veh ;
7545: LD_EXP 10
7549: PUSH
7550: LD_EXP 19
7554: PPUSH
7555: CALL_OW 256
7559: PUSH
7560: LD_INT 1000
7562: LESS
7563: PUSH
7564: LD_INT 3
7566: PPUSH
7567: CALL_OW 256
7571: PUSH
7572: LD_INT 999
7574: LESS
7575: OR
7576: AND
7577: IFFALSE 7833
7579: GO 7581
7581: DISABLE
7582: LD_INT 0
7584: PPUSH
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
7585: LD_ADDR_VAR 0 1
7589: PUSH
7590: LD_INT 22
7592: PUSH
7593: LD_INT 1
7595: PUSH
7596: EMPTY
7597: LIST
7598: LIST
7599: PUSH
7600: LD_INT 21
7602: PUSH
7603: LD_INT 2
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: PUSH
7610: LD_INT 58
7612: PUSH
7613: EMPTY
7614: LIST
7615: PUSH
7616: EMPTY
7617: LIST
7618: LIST
7619: LIST
7620: PPUSH
7621: CALL_OW 69
7625: ST_TO_ADDR
// if veh and IsOk ( Gladstone ) then
7626: LD_VAR 0 1
7630: PUSH
7631: LD_EXP 19
7635: PPUSH
7636: CALL_OW 302
7640: AND
7641: IFFALSE 7683
// begin if IsInUnit ( Gladstone ) then
7643: LD_EXP 19
7647: PPUSH
7648: CALL_OW 310
7652: IFFALSE 7663
// ComExitBuilding ( Gladstone ) ;
7654: LD_EXP 19
7658: PPUSH
7659: CALL_OW 122
// AddComEnterUnit ( Gladstone , veh [ 1 ] ) ;
7663: LD_EXP 19
7667: PPUSH
7668: LD_VAR 0 1
7672: PUSH
7673: LD_INT 1
7675: ARRAY
7676: PPUSH
7677: CALL_OW 180
// end else
7681: GO 7703
// if IsInUnit ( Gladstone ) then
7683: LD_EXP 19
7687: PPUSH
7688: CALL_OW 310
7692: IFFALSE 7703
// ComExitBuilding ( Gladstone ) ;
7694: LD_EXP 19
7698: PPUSH
7699: CALL_OW 122
// AddComMoveXY ( Gladstone , 27 , 51 ) ;
7703: LD_EXP 19
7707: PPUSH
7708: LD_INT 27
7710: PPUSH
7711: LD_INT 51
7713: PPUSH
7714: CALL_OW 171
// Say ( Gladstone , D8-Glad-2 ) ;
7718: LD_EXP 19
7722: PPUSH
7723: LD_STRING D8-Glad-2
7725: PPUSH
7726: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7730: LD_INT 35
7732: PPUSH
7733: CALL_OW 67
// until IsAt ( Gladstone , 27 , 51 ) or IsAt ( IsInUnit ( Gladstone ) , 27 , 51 ) or IsDead ( Gladstone ) ;
7737: LD_EXP 19
7741: PPUSH
7742: LD_INT 27
7744: PPUSH
7745: LD_INT 51
7747: PPUSH
7748: CALL_OW 307
7752: PUSH
7753: LD_EXP 19
7757: PPUSH
7758: CALL_OW 310
7762: PPUSH
7763: LD_INT 27
7765: PPUSH
7766: LD_INT 51
7768: PPUSH
7769: CALL_OW 307
7773: OR
7774: PUSH
7775: LD_EXP 19
7779: PPUSH
7780: CALL_OW 301
7784: OR
7785: IFFALSE 7730
// if IsDead ( Gladstone ) then
7787: LD_EXP 19
7791: PPUSH
7792: CALL_OW 301
7796: IFFALSE 7800
// exit ;
7798: GO 7833
// RemoveUnit ( HexInfo ( 27 , 51 ) ) ;
7800: LD_INT 27
7802: PPUSH
7803: LD_INT 51
7805: PPUSH
7806: CALL_OW 428
7810: PPUSH
7811: CALL_OW 64
// gladstoneEscaped := true ;
7815: LD_ADDR_EXP 12
7819: PUSH
7820: LD_INT 1
7822: ST_TO_ADDR
// SaveVariable ( true , 02_GladstoneEscaped ) ;
7823: LD_INT 1
7825: PPUSH
7826: LD_STRING 02_GladstoneEscaped
7828: PPUSH
7829: CALL_OW 39
// end ;
7833: PPOPN 1
7835: END
// every 0 0$1 trigger aviradzeSpotted and ( sciCounterKill >= 3 or not usSci ) and not aviradzeQuestDone do
7836: LD_EXP 4
7840: PUSH
7841: LD_EXP 9
7845: PUSH
7846: LD_INT 3
7848: GREATEREQUAL
7849: PUSH
7850: LD_EXP 22
7854: NOT
7855: OR
7856: AND
7857: PUSH
7858: LD_EXP 8
7862: NOT
7863: AND
7864: IFFALSE 7907
7866: GO 7868
7868: DISABLE
// begin aviradzeQuestDone := true ;
7869: LD_ADDR_EXP 8
7873: PUSH
7874: LD_INT 1
7876: ST_TO_ADDR
// Say ( Heike , DH-1-quest-done ) ;
7877: LD_EXP 23
7881: PPUSH
7882: LD_STRING DH-1-quest-done
7884: PPUSH
7885: CALL_OW 88
// if Givi then
7889: LD_EXP 24
7893: IFFALSE 7907
// Say ( Givi , DG-1-quest-done ) ;
7895: LD_EXP 24
7899: PPUSH
7900: LD_STRING DG-1-quest-done
7902: PPUSH
7903: CALL_OW 88
// end ;
7907: END
// every 0 0$1 trigger See ( 5 , Heike ) and GetDistUnits ( Heike , Aviradze ) < 6 and aviradzeQuestDone and not attackDeltaAllowed do var i ;
7908: LD_INT 5
7910: PPUSH
7911: LD_EXP 23
7915: PPUSH
7916: CALL_OW 292
7920: PUSH
7921: LD_EXP 23
7925: PPUSH
7926: LD_EXP 27
7930: PPUSH
7931: CALL_OW 296
7935: PUSH
7936: LD_INT 6
7938: LESS
7939: AND
7940: PUSH
7941: LD_EXP 8
7945: AND
7946: PUSH
7947: LD_EXP 14
7951: NOT
7952: AND
7953: IFFALSE 8091
7955: GO 7957
7957: DISABLE
7958: LD_INT 0
7960: PPUSH
// begin attackDeltaAllowed := true ;
7961: LD_ADDR_EXP 14
7965: PUSH
7966: LD_INT 1
7968: ST_TO_ADDR
// InGameOn ;
7969: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
7973: LD_EXP 23
7977: PPUSH
7978: CALL_OW 87
// wait ( 0 0$0.3 ) ;
7982: LD_INT 10
7984: PPUSH
7985: CALL_OW 67
// ComTurnUnit ( Aviradze , Heike ) ;
7989: LD_EXP 27
7993: PPUSH
7994: LD_EXP 23
7998: PPUSH
7999: CALL_OW 119
// ComTurnUnit ( Heike , Aviradze ) ;
8003: LD_EXP 23
8007: PPUSH
8008: LD_EXP 27
8012: PPUSH
8013: CALL_OW 119
// Say ( Heike , DH-1-return ) ;
8017: LD_EXP 23
8021: PPUSH
8022: LD_STRING DH-1-return
8024: PPUSH
8025: CALL_OW 88
// Say ( Aviradze , DA-1-return ) ;
8029: LD_EXP 27
8033: PPUSH
8034: LD_STRING DA-1-return
8036: PPUSH
8037: CALL_OW 88
// InGameOff ;
8041: CALL_OW 9
// ChangeMissionObjectives ( ODelta ) ;
8045: LD_STRING ODelta
8047: PPUSH
8048: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
8052: LD_ADDR_VAR 0 1
8056: PUSH
8057: LD_INT 22
8059: PUSH
8060: LD_INT 5
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: PPUSH
8067: CALL_OW 69
8071: PUSH
8072: FOR_IN
8073: IFFALSE 8089
// SetSide ( i , 2 ) ;
8075: LD_VAR 0 1
8079: PPUSH
8080: LD_INT 2
8082: PPUSH
8083: CALL_OW 235
8087: GO 8072
8089: POP
8090: POP
// end ;
8091: PPOPN 1
8093: END
// every 0 0$1 trigger usAlert and not attackDeltaAllowed do
8094: LD_EXP 10
8098: PUSH
8099: LD_EXP 14
8103: NOT
8104: AND
8105: IFFALSE 8118
8107: GO 8109
8109: DISABLE
// spottedBeforeRadio := true ;
8110: LD_ADDR_EXP 6
8114: PUSH
8115: LD_INT 1
8117: ST_TO_ADDR
8118: END
// every 0 0$1 trigger attackDeltaAllowed and IsOk ( Markov ) and GetSide ( Delta ) = 1 and IsOk ( Lynch ) and not usAlert do var i , k , tmp ;
8119: LD_EXP 14
8123: PUSH
8124: LD_EXP 30
8128: PPUSH
8129: CALL_OW 302
8133: AND
8134: PUSH
8135: LD_INT 1
8137: PPUSH
8138: CALL_OW 255
8142: PUSH
8143: LD_INT 1
8145: EQUAL
8146: AND
8147: PUSH
8148: LD_EXP 20
8152: PPUSH
8153: CALL_OW 302
8157: AND
8158: PUSH
8159: LD_EXP 10
8163: NOT
8164: AND
8165: IFFALSE 9381
8167: GO 8169
8169: DISABLE
8170: LD_INT 0
8172: PPUSH
8173: PPUSH
8174: PPUSH
// begin trap := 0 ;
8175: LD_ADDR_EXP 17
8179: PUSH
8180: LD_INT 0
8182: ST_TO_ADDR
// wait ( 0 0$12 ) ;
8183: LD_INT 420
8185: PPUSH
8186: CALL_OW 67
// DialogueOn ;
8190: CALL_OW 6
// Say ( Markov , DMar-1-radio ) ;
8194: LD_EXP 30
8198: PPUSH
8199: LD_STRING DMar-1-radio
8201: PPUSH
8202: CALL_OW 88
// Say ( Heike , DH-1-radio ) ;
8206: LD_EXP 23
8210: PPUSH
8211: LD_STRING DH-1-radio
8213: PPUSH
8214: CALL_OW 88
// Say ( Markov , DMar-2-radio ) ;
8218: LD_EXP 30
8222: PPUSH
8223: LD_STRING DMar-2-radio
8225: PPUSH
8226: CALL_OW 88
// Say ( Heike , DH-2-radio ) ;
8230: LD_EXP 23
8234: PPUSH
8235: LD_STRING DH-2-radio
8237: PPUSH
8238: CALL_OW 88
// if IsOk ( Kamil ) or IsOk ( Sophia ) then
8242: LD_EXP 26
8246: PPUSH
8247: CALL_OW 302
8251: PUSH
8252: LD_EXP 29
8256: PPUSH
8257: CALL_OW 302
8261: OR
8262: IFFALSE 9381
// begin case Query ( Q1Trap ) of 1 :
8264: LD_STRING Q1Trap
8266: PPUSH
8267: CALL_OW 97
8271: PUSH
8272: LD_INT 1
8274: DOUBLE
8275: EQUAL
8276: IFTRUE 8280
8278: GO 8474
8280: POP
// begin if IsOk ( Kamil ) then
8281: LD_EXP 26
8285: PPUSH
8286: CALL_OW 302
8290: IFFALSE 8369
// begin Say ( Kamil , DKam-2-radio ) ;
8292: LD_EXP 26
8296: PPUSH
8297: LD_STRING DKam-2-radio
8299: PPUSH
8300: CALL_OW 88
// Say ( Kamil , DKam-3-radio ) ;
8304: LD_EXP 26
8308: PPUSH
8309: LD_STRING DKam-3-radio
8311: PPUSH
8312: CALL_OW 88
// SayRadio ( Lynch , DDelta-3-radio ) ;
8316: LD_EXP 20
8320: PPUSH
8321: LD_STRING DDelta-3-radio
8323: PPUSH
8324: CALL_OW 94
// dwait ( 0 0$01 ) ;
8328: LD_INT 35
8330: PPUSH
8331: CALL_OW 68
// Say ( Heike , DH-3-radio ) ;
8335: LD_EXP 23
8339: PPUSH
8340: LD_STRING DH-3-radio
8342: PPUSH
8343: CALL_OW 88
// Say ( Kamil , DKam-4-radio ) ;
8347: LD_EXP 26
8351: PPUSH
8352: LD_STRING DKam-4-radio
8354: PPUSH
8355: CALL_OW 88
// trap := 1 ;
8359: LD_ADDR_EXP 17
8363: PUSH
8364: LD_INT 1
8366: ST_TO_ADDR
// end else
8367: GO 8468
// begin Say ( Sophia , DS-1-radio ) ;
8369: LD_EXP 29
8373: PPUSH
8374: LD_STRING DS-1-radio
8376: PPUSH
8377: CALL_OW 88
// Say ( Sophia , DS-2-radio ) ;
8381: LD_EXP 29
8385: PPUSH
8386: LD_STRING DS-2-radio
8388: PPUSH
8389: CALL_OW 88
// SayRadio ( Lynch , DDelta-2-radio-s ) ;
8393: LD_EXP 20
8397: PPUSH
8398: LD_STRING DDelta-2-radio-s
8400: PPUSH
8401: CALL_OW 94
// Say ( Sophia , DS-3-radio ) ;
8405: LD_EXP 29
8409: PPUSH
8410: LD_STRING DS-3-radio
8412: PPUSH
8413: CALL_OW 88
// SayRadio ( Lynch , DDelta-3-radio-s ) ;
8417: LD_EXP 20
8421: PPUSH
8422: LD_STRING DDelta-3-radio-s
8424: PPUSH
8425: CALL_OW 94
// Say ( Sophia , DS-4-radio-s ) ;
8429: LD_EXP 29
8433: PPUSH
8434: LD_STRING DS-4-radio-s
8436: PPUSH
8437: CALL_OW 88
// dwait ( 0 0$01 ) ;
8441: LD_INT 35
8443: PPUSH
8444: CALL_OW 68
// Say ( Heike , DH-1-trap ) ;
8448: LD_EXP 23
8452: PPUSH
8453: LD_STRING DH-1-trap
8455: PPUSH
8456: CALL_OW 88
// trap := 0 ;
8460: LD_ADDR_EXP 17
8464: PUSH
8465: LD_INT 0
8467: ST_TO_ADDR
// end ; DialogueOff ;
8468: CALL_OW 7
// end ; 2 :
8472: GO 8492
8474: LD_INT 2
8476: DOUBLE
8477: EQUAL
8478: IFTRUE 8482
8480: GO 8491
8482: POP
// begin DialogueOff ;
8483: CALL_OW 7
// exit ;
8487: GO 9381
// end ; end ;
8489: GO 8492
8491: POP
// if trap = 1 then
8492: LD_EXP 17
8496: PUSH
8497: LD_INT 1
8499: EQUAL
8500: IFFALSE 8952
// begin PlaceSeeing ( 64 , 32 , 2 , 8 ) ;
8502: LD_INT 64
8504: PPUSH
8505: LD_INT 32
8507: PPUSH
8508: LD_INT 2
8510: PPUSH
8511: LD_INT 8
8513: PPUSH
8514: CALL_OW 330
// CenterOnXY ( 64 , 32 ) ;
8518: LD_INT 64
8520: PPUSH
8521: LD_INT 32
8523: PPUSH
8524: CALL_OW 84
// tmp := [ ] ;
8528: LD_ADDR_VAR 0 3
8532: PUSH
8533: EMPTY
8534: ST_TO_ADDR
// k := 3 ;
8535: LD_ADDR_VAR 0 2
8539: PUSH
8540: LD_INT 3
8542: ST_TO_ADDR
// if usForces < 3 then
8543: LD_EXP 21
8547: PUSH
8548: LD_INT 3
8550: LESS
8551: IFFALSE 8563
// k := usForces ;
8553: LD_ADDR_VAR 0 2
8557: PUSH
8558: LD_EXP 21
8562: ST_TO_ADDR
// for i := 1 to k do
8563: LD_ADDR_VAR 0 1
8567: PUSH
8568: DOUBLE
8569: LD_INT 1
8571: DEC
8572: ST_TO_ADDR
8573: LD_VAR 0 2
8577: PUSH
8578: FOR_TO
8579: IFFALSE 8634
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
8581: LD_ADDR_VAR 0 3
8585: PUSH
8586: LD_VAR 0 3
8590: PPUSH
8591: LD_VAR 0 3
8595: PUSH
8596: LD_INT 1
8598: PLUS
8599: PPUSH
8600: LD_EXP 21
8604: PUSH
8605: LD_INT 1
8607: ARRAY
8608: PPUSH
8609: CALL_OW 1
8613: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
8614: LD_ADDR_EXP 21
8618: PUSH
8619: LD_EXP 21
8623: PPUSH
8624: LD_INT 1
8626: PPUSH
8627: CALL_OW 3
8631: ST_TO_ADDR
// end ;
8632: GO 8578
8634: POP
8635: POP
// usPatrol := tmp ;
8636: LD_ADDR_EXP 16
8640: PUSH
8641: LD_VAR 0 3
8645: ST_TO_ADDR
// for i in tmp do
8646: LD_ADDR_VAR 0 1
8650: PUSH
8651: LD_VAR 0 3
8655: PUSH
8656: FOR_IN
8657: IFFALSE 8787
// begin if IsInUnit ( i ) then
8659: LD_VAR 0 1
8663: PPUSH
8664: CALL_OW 310
8668: IFFALSE 8679
// ComExitBuilding ( i ) ;
8670: LD_VAR 0 1
8674: PPUSH
8675: CALL_OW 122
// AddComAgressiveMove ( i , 63 , 31 ) ;
8679: LD_VAR 0 1
8683: PPUSH
8684: LD_INT 63
8686: PPUSH
8687: LD_INT 31
8689: PPUSH
8690: CALL_OW 174
// AddComWait ( i , 0 0$2 ) ;
8694: LD_VAR 0 1
8698: PPUSH
8699: LD_INT 70
8701: PPUSH
8702: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 43 ) ;
8706: LD_VAR 0 1
8710: PPUSH
8711: LD_INT 103
8713: PPUSH
8714: LD_INT 43
8716: PPUSH
8717: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
8721: LD_VAR 0 1
8725: PPUSH
8726: LD_INT 105
8728: PPUSH
8729: CALL_OW 202
// if Difficulty > 1 then
8733: LD_OWVAR 67
8737: PUSH
8738: LD_INT 1
8740: GREATER
8741: IFFALSE 8758
// AddComAgressiveMove ( i , 114 , 69 ) ;
8743: LD_VAR 0 1
8747: PPUSH
8748: LD_INT 114
8750: PPUSH
8751: LD_INT 69
8753: PPUSH
8754: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
8758: LD_VAR 0 1
8762: PPUSH
8763: LD_INT 105
8765: PPUSH
8766: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
8770: LD_VAR 0 1
8774: PPUSH
8775: LD_INT 42
8777: PPUSH
8778: LD_INT 20
8780: PPUSH
8781: CALL_OW 174
// end ;
8785: GO 8656
8787: POP
8788: POP
// wait ( 0 0$8 ) ;
8789: LD_INT 280
8791: PPUSH
8792: CALL_OW 67
// RemoveSeeing ( 64 , 32 , 2 ) ;
8796: LD_INT 64
8798: PPUSH
8799: LD_INT 32
8801: PPUSH
8802: LD_INT 2
8804: PPUSH
8805: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
8809: LD_INT 35
8811: PPUSH
8812: CALL_OW 67
// for i in tmp do
8816: LD_ADDR_VAR 0 1
8820: PUSH
8821: LD_VAR 0 3
8825: PUSH
8826: FOR_IN
8827: IFFALSE 8858
// if IsDead ( i ) then
8829: LD_VAR 0 1
8833: PPUSH
8834: CALL_OW 301
8838: IFFALSE 8856
// tmp := tmp diff i ;
8840: LD_ADDR_VAR 0 3
8844: PUSH
8845: LD_VAR 0 3
8849: PUSH
8850: LD_VAR 0 1
8854: DIFF
8855: ST_TO_ADDR
8856: GO 8826
8858: POP
8859: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
8860: LD_VAR 0 3
8864: NOT
8865: PUSH
8866: LD_VAR 0 3
8870: PPUSH
8871: LD_INT 95
8873: PUSH
8874: LD_INT 7
8876: PUSH
8877: EMPTY
8878: LIST
8879: LIST
8880: PUSH
8881: LD_INT 3
8883: PUSH
8884: LD_INT 60
8886: PUSH
8887: EMPTY
8888: LIST
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: PPUSH
8898: CALL_OW 72
8902: PUSH
8903: LD_VAR 0 3
8907: EQUAL
8908: OR
8909: IFFALSE 8809
// if tmp then
8911: LD_VAR 0 3
8915: IFFALSE 8942
// begin usPatrol := [ ] ;
8917: LD_ADDR_EXP 16
8921: PUSH
8922: EMPTY
8923: ST_TO_ADDR
// usForces := usForces union tmp ;
8924: LD_ADDR_EXP 21
8928: PUSH
8929: LD_EXP 21
8933: PUSH
8934: LD_VAR 0 3
8938: UNION
8939: ST_TO_ADDR
// end else
8940: GO 8950
// trickyMove := true ;
8942: LD_ADDR_EXP 15
8946: PUSH
8947: LD_INT 1
8949: ST_TO_ADDR
// end else
8950: GO 9381
// begin tmp := [ ] ;
8952: LD_ADDR_VAR 0 3
8956: PUSH
8957: EMPTY
8958: ST_TO_ADDR
// k := 4 ;
8959: LD_ADDR_VAR 0 2
8963: PUSH
8964: LD_INT 4
8966: ST_TO_ADDR
// if usForces < 4 then
8967: LD_EXP 21
8971: PUSH
8972: LD_INT 4
8974: LESS
8975: IFFALSE 8987
// k := usForces ;
8977: LD_ADDR_VAR 0 2
8981: PUSH
8982: LD_EXP 21
8986: ST_TO_ADDR
// for i := 1 to k do
8987: LD_ADDR_VAR 0 1
8991: PUSH
8992: DOUBLE
8993: LD_INT 1
8995: DEC
8996: ST_TO_ADDR
8997: LD_VAR 0 2
9001: PUSH
9002: FOR_TO
9003: IFFALSE 9058
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
9005: LD_ADDR_VAR 0 3
9009: PUSH
9010: LD_VAR 0 3
9014: PPUSH
9015: LD_VAR 0 3
9019: PUSH
9020: LD_INT 1
9022: PLUS
9023: PPUSH
9024: LD_EXP 21
9028: PUSH
9029: LD_INT 1
9031: ARRAY
9032: PPUSH
9033: CALL_OW 1
9037: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
9038: LD_ADDR_EXP 21
9042: PUSH
9043: LD_EXP 21
9047: PPUSH
9048: LD_INT 1
9050: PPUSH
9051: CALL_OW 3
9055: ST_TO_ADDR
// end ;
9056: GO 9002
9058: POP
9059: POP
// if Lynch then
9060: LD_EXP 20
9064: IFFALSE 9082
// tmp := tmp ^ Lynch ;
9066: LD_ADDR_VAR 0 3
9070: PUSH
9071: LD_VAR 0 3
9075: PUSH
9076: LD_EXP 20
9080: ADD
9081: ST_TO_ADDR
// usPatrol := tmp ;
9082: LD_ADDR_EXP 16
9086: PUSH
9087: LD_VAR 0 3
9091: ST_TO_ADDR
// for i in tmp do
9092: LD_ADDR_VAR 0 1
9096: PUSH
9097: LD_VAR 0 3
9101: PUSH
9102: FOR_IN
9103: IFFALSE 9196
// begin if IsInUnit ( i ) then
9105: LD_VAR 0 1
9109: PPUSH
9110: CALL_OW 310
9114: IFFALSE 9125
// ComExitBuilding ( i ) ;
9116: LD_VAR 0 1
9120: PPUSH
9121: CALL_OW 122
// AddComAgressiveMove ( i , 69 , 15 ) ;
9125: LD_VAR 0 1
9129: PPUSH
9130: LD_INT 69
9132: PPUSH
9133: LD_INT 15
9135: PPUSH
9136: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9140: LD_VAR 0 1
9144: PPUSH
9145: LD_INT 700
9147: PPUSH
9148: CALL_OW 202
// AddComAgressiveMove ( i , 55 , 43 ) ;
9152: LD_VAR 0 1
9156: PPUSH
9157: LD_INT 55
9159: PPUSH
9160: LD_INT 43
9162: PPUSH
9163: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9167: LD_VAR 0 1
9171: PPUSH
9172: LD_INT 700
9174: PPUSH
9175: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9179: LD_VAR 0 1
9183: PPUSH
9184: LD_INT 42
9186: PPUSH
9187: LD_INT 20
9189: PPUSH
9190: CALL_OW 174
// end ;
9194: GO 9102
9196: POP
9197: POP
// repeat wait ( 0 0$1 ) ;
9198: LD_INT 35
9200: PPUSH
9201: CALL_OW 67
// for i in tmp do
9205: LD_ADDR_VAR 0 1
9209: PUSH
9210: LD_VAR 0 3
9214: PUSH
9215: FOR_IN
9216: IFFALSE 9247
// if IsDead ( i ) then
9218: LD_VAR 0 1
9222: PPUSH
9223: CALL_OW 301
9227: IFFALSE 9245
// tmp := tmp diff i ;
9229: LD_ADDR_VAR 0 3
9233: PUSH
9234: LD_VAR 0 3
9238: PUSH
9239: LD_VAR 0 1
9243: DIFF
9244: ST_TO_ADDR
9245: GO 9215
9247: POP
9248: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9249: LD_VAR 0 3
9253: NOT
9254: PUSH
9255: LD_VAR 0 3
9259: PPUSH
9260: LD_INT 95
9262: PUSH
9263: LD_INT 7
9265: PUSH
9266: EMPTY
9267: LIST
9268: LIST
9269: PUSH
9270: LD_INT 3
9272: PUSH
9273: LD_INT 60
9275: PUSH
9276: EMPTY
9277: LIST
9278: PUSH
9279: EMPTY
9280: LIST
9281: LIST
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: PPUSH
9287: CALL_OW 72
9291: PUSH
9292: LD_VAR 0 3
9296: EQUAL
9297: OR
9298: IFFALSE 9198
// if not tmp then
9300: LD_VAR 0 3
9304: NOT
9305: IFFALSE 9317
// trickyMove := true else
9307: LD_ADDR_EXP 15
9311: PUSH
9312: LD_INT 1
9314: ST_TO_ADDR
9315: GO 9324
// usPatrol := [ ] ;
9317: LD_ADDR_EXP 16
9321: PUSH
9322: EMPTY
9323: ST_TO_ADDR
// if tmp diff Lynch then
9324: LD_VAR 0 3
9328: PUSH
9329: LD_EXP 20
9333: DIFF
9334: IFFALSE 9358
// usForces := usForces union ( tmp diff Lynch ) ;
9336: LD_ADDR_EXP 21
9340: PUSH
9341: LD_EXP 21
9345: PUSH
9346: LD_VAR 0 3
9350: PUSH
9351: LD_EXP 20
9355: DIFF
9356: UNION
9357: ST_TO_ADDR
// if IsOk ( Lynch ) then
9358: LD_EXP 20
9362: PPUSH
9363: CALL_OW 302
9367: IFFALSE 9381
// ComEnterUnit ( Lynch , Delta ) ;
9369: LD_EXP 20
9373: PPUSH
9374: LD_INT 1
9376: PPUSH
9377: CALL_OW 120
// end ; end ; end ;
9381: PPOPN 3
9383: END
// every 0 0$1 trigger trickyMove do
9384: LD_EXP 15
9388: IFFALSE 9400
9390: GO 9392
9392: DISABLE
// SetAchievement ( ACH_TRAP ) ;
9393: LD_STRING ACH_TRAP
9395: PPUSH
9396: CALL_OW 543
9400: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ) do
9401: LD_INT 22
9403: PUSH
9404: LD_INT 2
9406: PUSH
9407: EMPTY
9408: LIST
9409: LIST
9410: PUSH
9411: LD_INT 23
9413: PUSH
9414: LD_INT 1
9416: PUSH
9417: EMPTY
9418: LIST
9419: LIST
9420: PUSH
9421: LD_INT 21
9423: PUSH
9424: LD_INT 2
9426: PUSH
9427: EMPTY
9428: LIST
9429: LIST
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: LIST
9435: PPUSH
9436: CALL_OW 69
9440: IFFALSE 9452
9442: GO 9444
9444: DISABLE
// SetAchievement ( ACH_SCRAP ) ;
9445: LD_STRING ACH_SCRAP
9447: PPUSH
9448: CALL_OW 543
9452: END
// every 0 0$1 trigger UnitFilter ( usPatrol , [ f_see , 2 ] ) do
9453: LD_EXP 16
9457: PPUSH
9458: LD_INT 101
9460: PUSH
9461: LD_INT 2
9463: PUSH
9464: EMPTY
9465: LIST
9466: LIST
9467: PPUSH
9468: CALL_OW 72
9472: IFFALSE 9605
9474: GO 9476
9476: DISABLE
// begin if not trap then
9477: LD_EXP 17
9481: NOT
9482: IFFALSE 9510
// begin Say ( Heike , DH-2-trap ) ;
9484: LD_EXP 23
9488: PPUSH
9489: LD_STRING DH-2-trap
9491: PPUSH
9492: CALL_OW 88
// Say ( Mike , DM-2-trap ) ;
9496: LD_EXP 25
9500: PPUSH
9501: LD_STRING DM-2-trap
9503: PPUSH
9504: CALL_OW 88
// end else
9508: GO 9522
// begin Say ( Heike , DH-1-trap-a ) ;
9510: LD_EXP 23
9514: PPUSH
9515: LD_STRING DH-1-trap-a
9517: PPUSH
9518: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
9522: LD_INT 35
9524: PPUSH
9525: CALL_OW 67
// until trickyMove ;
9529: LD_EXP 15
9533: IFFALSE 9522
// Say ( Heike , DH-3-trap ) ;
9535: LD_EXP 23
9539: PPUSH
9540: LD_STRING DH-3-trap
9542: PPUSH
9543: CALL_OW 88
// if IsOk ( Givi ) and IsOk ( Kaia ) then
9547: LD_EXP 24
9551: PPUSH
9552: CALL_OW 302
9556: PUSH
9557: LD_EXP 28
9561: PPUSH
9562: CALL_OW 302
9566: AND
9567: IFFALSE 9605
// begin Say ( Givi , DG-3-trap ) ;
9569: LD_EXP 24
9573: PPUSH
9574: LD_STRING DG-3-trap
9576: PPUSH
9577: CALL_OW 88
// Say ( Kaia , DK-3-trap ) ;
9581: LD_EXP 28
9585: PPUSH
9586: LD_STRING DK-3-trap
9588: PPUSH
9589: CALL_OW 88
// Say ( Givi , DG-4-trap ) ;
9593: LD_EXP 24
9597: PPUSH
9598: LD_STRING DG-4-trap
9600: PPUSH
9601: CALL_OW 88
// end ; end ;
9605: END
// every 0 0$1 trigger GetSide ( Delta ) = 2 and attackDeltaAllowed do var i , tmp ;
9606: LD_INT 1
9608: PPUSH
9609: CALL_OW 255
9613: PUSH
9614: LD_INT 2
9616: EQUAL
9617: PUSH
9618: LD_EXP 14
9622: AND
9623: IFFALSE 9782
9625: GO 9627
9627: DISABLE
9628: LD_INT 0
9630: PPUSH
9631: PPUSH
// begin if not IsOk ( Kaia ) then
9632: LD_EXP 28
9636: PPUSH
9637: CALL_OW 302
9641: NOT
9642: IFFALSE 9646
// exit ;
9644: GO 9782
// if tick < 5 5$00 then
9646: LD_OWVAR 1
9650: PUSH
9651: LD_INT 10500
9653: LESS
9654: IFFALSE 9663
// SetAchievement ( ACH_DELTA ) ;
9656: LD_STRING ACH_DELTA
9658: PPUSH
9659: CALL_OW 543
// Say ( Kaia , DK-1-capture ) ;
9663: LD_EXP 28
9667: PPUSH
9668: LD_STRING DK-1-capture
9670: PPUSH
9671: CALL_OW 88
// Say ( Heike , DH-1-capture ) ;
9675: LD_EXP 23
9679: PPUSH
9680: LD_STRING DH-1-capture
9682: PPUSH
9683: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
9687: LD_ADDR_VAR 0 2
9691: PUSH
9692: LD_INT 22
9694: PUSH
9695: LD_INT 1
9697: PUSH
9698: EMPTY
9699: LIST
9700: LIST
9701: PUSH
9702: LD_INT 25
9704: PUSH
9705: LD_INT 1
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: PPUSH
9716: CALL_OW 69
9720: ST_TO_ADDR
// if not tmp then
9721: LD_VAR 0 2
9725: NOT
9726: IFFALSE 9730
// exit ;
9728: GO 9782
// for i in tmp do
9730: LD_ADDR_VAR 0 1
9734: PUSH
9735: LD_VAR 0 2
9739: PUSH
9740: FOR_IN
9741: IFFALSE 9780
// begin if IsInUnit ( i ) then
9743: LD_VAR 0 1
9747: PPUSH
9748: CALL_OW 310
9752: IFFALSE 9763
// ComExitBuilding ( i ) ;
9754: LD_VAR 0 1
9758: PPUSH
9759: CALL_OW 122
// AddComAgressiveMove ( i , 38 , 23 ) ;
9763: LD_VAR 0 1
9767: PPUSH
9768: LD_INT 38
9770: PPUSH
9771: LD_INT 23
9773: PPUSH
9774: CALL_OW 174
// end ;
9778: GO 9740
9780: POP
9781: POP
// end ;
9782: PPOPN 2
9784: END
// every 0 0$1 trigger GetSide ( usLab ) = 2 and attackDeltaAllowed do
9785: LD_INT 3
9787: PPUSH
9788: CALL_OW 255
9792: PUSH
9793: LD_INT 2
9795: EQUAL
9796: PUSH
9797: LD_EXP 14
9801: AND
9802: IFFALSE 9834
9804: GO 9806
9806: DISABLE
// begin DialogueOn ;
9807: CALL_OW 6
// Say ( Aviradze , DA-1-capture ) ;
9811: LD_EXP 27
9815: PPUSH
9816: LD_STRING DA-1-capture
9818: PPUSH
9819: CALL_OW 88
// DialogueOff ;
9823: CALL_OW 7
// ChangeMissionObjectives ( OTame ) ;
9827: LD_STRING OTame
9829: PPUSH
9830: CALL_OW 337
// end ;
9834: END
// every 0 0$1 trigger GetTech ( tech_ApeLang , 2 ) = state_researched and attackDeltaAllowed do
9835: LD_INT 1
9837: PPUSH
9838: LD_INT 2
9840: PPUSH
9841: CALL_OW 321
9845: PUSH
9846: LD_INT 2
9848: EQUAL
9849: PUSH
9850: LD_EXP 14
9854: AND
9855: IFFALSE 10002
9857: GO 9859
9859: DISABLE
// begin DialogueOn ;
9860: CALL_OW 6
// Say ( Aviradze , DA-1-ape ) ;
9864: LD_EXP 27
9868: PPUSH
9869: LD_STRING DA-1-ape
9871: PPUSH
9872: CALL_OW 88
// Say ( Heike , DH-1-ape ) ;
9876: LD_EXP 23
9880: PPUSH
9881: LD_STRING DH-1-ape
9883: PPUSH
9884: CALL_OW 88
// Say ( Aviradze , DA-2-ape ) ;
9888: LD_EXP 27
9892: PPUSH
9893: LD_STRING DA-2-ape
9895: PPUSH
9896: CALL_OW 88
// Say ( Aviradze , DA-3-ape ) ;
9900: LD_EXP 27
9904: PPUSH
9905: LD_STRING DA-3-ape
9907: PPUSH
9908: CALL_OW 88
// Say ( Heike , DH-3-ape ) ;
9912: LD_EXP 23
9916: PPUSH
9917: LD_STRING DH-3-ape
9919: PPUSH
9920: CALL_OW 88
// DialogueOff ;
9924: CALL_OW 7
// if FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) then
9928: LD_INT 22
9930: PUSH
9931: LD_INT 0
9933: PUSH
9934: EMPTY
9935: LIST
9936: LIST
9937: PUSH
9938: LD_INT 25
9940: PUSH
9941: LD_INT 12
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: PUSH
9948: EMPTY
9949: LIST
9950: LIST
9951: PPUSH
9952: CALL_OW 69
9956: IFFALSE 9968
// SpawnApeman ( forest , 2 ) ;
9958: LD_INT 1
9960: PPUSH
9961: LD_INT 2
9963: PPUSH
9964: CALL 405 0 2
// repeat wait ( 0 0$1 ) ;
9968: LD_INT 35
9970: PPUSH
9971: CALL_OW 67
// until FilterAllUnits ( [ f_class , class_apeman ] ) = 0 ;
9975: LD_INT 25
9977: PUSH
9978: LD_INT 12
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: PPUSH
9985: CALL_OW 69
9989: PUSH
9990: LD_INT 0
9992: EQUAL
9993: IFFALSE 9968
// YouLost ( Ape ) ;
9995: LD_STRING Ape
9997: PPUSH
9998: CALL_OW 104
// end ;
10002: END
// every 0 0$5 trigger lostCounter >= [ 3 , 2 , 2 ] [ Difficulty ] do
10003: LD_EXP 18
10007: PUSH
10008: LD_INT 3
10010: PUSH
10011: LD_INT 2
10013: PUSH
10014: LD_INT 2
10016: PUSH
10017: EMPTY
10018: LIST
10019: LIST
10020: LIST
10021: PUSH
10022: LD_OWVAR 67
10026: ARRAY
10027: GREATEREQUAL
10028: IFFALSE 10072
10030: GO 10032
10032: DISABLE
// begin DialogueOn ;
10033: CALL_OW 6
// Say ( Aviradze , DA-1-failure ) ;
10037: LD_EXP 27
10041: PPUSH
10042: LD_STRING DA-1-failure
10044: PPUSH
10045: CALL_OW 88
// Say ( Aviradze , DA-2-failure ) ;
10049: LD_EXP 27
10053: PPUSH
10054: LD_STRING DA-2-failure
10056: PPUSH
10057: CALL_OW 88
// YouLost ( Failure ) ;
10061: LD_STRING Failure
10063: PPUSH
10064: CALL_OW 104
// DialogueOff ;
10068: CALL_OW 7
// end ;
10072: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
10073: LD_EXP 28
10077: PPUSH
10078: CALL_OW 256
10082: PUSH
10083: LD_INT 3
10085: LESS
10086: IFFALSE 10219
10088: GO 10090
10090: DISABLE
// begin DialogueOn ;
10091: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
10095: LD_EXP 28
10099: PPUSH
10100: CALL_OW 87
// ForceSay ( Kaia , DK-Kaiaout-1 ) ;
10104: LD_EXP 28
10108: PPUSH
10109: LD_STRING DK-Kaiaout-1
10111: PPUSH
10112: CALL_OW 91
// Say ( Heike , DH-Kaiaout-2 ) ;
10116: LD_EXP 23
10120: PPUSH
10121: LD_STRING DH-Kaiaout-2
10123: PPUSH
10124: CALL_OW 88
// Say ( Givi , DG-Kaiaout-3 ) ;
10128: LD_EXP 24
10132: PPUSH
10133: LD_STRING DG-Kaiaout-3
10135: PPUSH
10136: CALL_OW 88
// Say ( Heike , DH-Kaiaout-4 ) ;
10140: LD_EXP 23
10144: PPUSH
10145: LD_STRING DH-Kaiaout-4
10147: PPUSH
10148: CALL_OW 88
// if Givi then
10152: LD_EXP 24
10156: IFFALSE 10206
// begin Say ( Givi , DG-Kaiaout-5 ) ;
10158: LD_EXP 24
10162: PPUSH
10163: LD_STRING DG-Kaiaout-5
10165: PPUSH
10166: CALL_OW 88
// Say ( Heike , DH-Kaiaout-6 ) ;
10170: LD_EXP 23
10174: PPUSH
10175: LD_STRING DH-Kaiaout-6
10177: PPUSH
10178: CALL_OW 88
// Say ( Givi , DG-Kaiaout-7 ) ;
10182: LD_EXP 24
10186: PPUSH
10187: LD_STRING DG-Kaiaout-7
10189: PPUSH
10190: CALL_OW 88
// Say ( Heike , DH-Kaiaout-8 ) ;
10194: LD_EXP 23
10198: PPUSH
10199: LD_STRING DH-Kaiaout-8
10201: PPUSH
10202: CALL_OW 88
// end ; DialogueOff ;
10206: CALL_OW 7
// KillUnit ( Kaia ) ;
10210: LD_EXP 28
10214: PPUSH
10215: CALL_OW 66
// end ;
10219: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) and IsOk ( Aviradze ) and GetSide ( Aviradze ) = 2 do var tmp ;
10220: LD_INT 22
10222: PUSH
10223: LD_INT 2
10225: PUSH
10226: EMPTY
10227: LIST
10228: LIST
10229: PUSH
10230: LD_INT 23
10232: PUSH
10233: LD_INT 0
10235: PUSH
10236: EMPTY
10237: LIST
10238: LIST
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: PPUSH
10244: CALL_OW 69
10248: PUSH
10249: LD_EXP 27
10253: PPUSH
10254: CALL_OW 302
10258: AND
10259: PUSH
10260: LD_EXP 27
10264: PPUSH
10265: CALL_OW 255
10269: PUSH
10270: LD_INT 2
10272: EQUAL
10273: AND
10274: IFFALSE 11046
10276: GO 10278
10278: DISABLE
10279: LD_INT 0
10281: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10282: LD_ADDR_VAR 0 1
10286: PUSH
10287: LD_INT 22
10289: PUSH
10290: LD_INT 2
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: PUSH
10297: LD_INT 23
10299: PUSH
10300: LD_INT 0
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: PUSH
10307: EMPTY
10308: LIST
10309: LIST
10310: PPUSH
10311: CALL_OW 69
10315: ST_TO_ADDR
// InGameOn ;
10316: CALL_OW 8
// CenterNowOnUnits ( tmp ) ;
10320: LD_VAR 0 1
10324: PPUSH
10325: CALL_OW 87
// ComMoveUnit ( tmp , Aviradze ) ;
10329: LD_VAR 0 1
10333: PPUSH
10334: LD_EXP 27
10338: PPUSH
10339: CALL_OW 112
// ComTurnUnit ( Aviradze , tmp ) ;
10343: LD_EXP 27
10347: PPUSH
10348: LD_VAR 0 1
10352: PPUSH
10353: CALL_OW 119
// wait ( 0 0$1 ) ;
10357: LD_INT 35
10359: PPUSH
10360: CALL_OW 67
// Say ( Aviradze , DA-1-tame-a ) ;
10364: LD_EXP 27
10368: PPUSH
10369: LD_STRING DA-1-tame-a
10371: PPUSH
10372: CALL_OW 88
// if IsOk ( Mike ) then
10376: LD_EXP 25
10380: PPUSH
10381: CALL_OW 302
10385: IFFALSE 10423
// begin Say ( Mike , DM-1-tame-a ) ;
10387: LD_EXP 25
10391: PPUSH
10392: LD_STRING DM-1-tame-a
10394: PPUSH
10395: CALL_OW 88
// Say ( Sophia , DS-1-tame-a ) ;
10399: LD_EXP 29
10403: PPUSH
10404: LD_STRING DS-1-tame-a
10406: PPUSH
10407: CALL_OW 88
// Say ( Mike , DM-2-tame-a ) ;
10411: LD_EXP 25
10415: PPUSH
10416: LD_STRING DM-2-tame-a
10418: PPUSH
10419: CALL_OW 88
// end ; wait ( 0 0$3 ) ;
10423: LD_INT 105
10425: PPUSH
10426: CALL_OW 67
// PrepareFarmer ;
10430: CALL 11721 0 0
// CenterOnUnits ( Farmer ) ;
10434: LD_EXP 31
10438: PPUSH
10439: CALL_OW 85
// ComMoveXY ( Farmer , 105 , 59 ) ;
10443: LD_EXP 31
10447: PPUSH
10448: LD_INT 105
10450: PPUSH
10451: LD_INT 59
10453: PPUSH
10454: CALL_OW 111
// AddComHold ( Farmer ) ;
10458: LD_EXP 31
10462: PPUSH
10463: CALL_OW 200
// SayRadio ( Farmer , DF-1-end ) ;
10467: LD_EXP 31
10471: PPUSH
10472: LD_STRING DF-1-end
10474: PPUSH
10475: CALL_OW 94
// Say ( Aviradze , DA-1-end ) ;
10479: LD_EXP 27
10483: PPUSH
10484: LD_STRING DA-1-end
10486: PPUSH
10487: CALL_OW 88
// SayRadio ( Farmer , DF-2-end ) ;
10491: LD_EXP 31
10495: PPUSH
10496: LD_STRING DF-2-end
10498: PPUSH
10499: CALL_OW 94
// Say ( Aviradze , DA-2-end ) ;
10503: LD_EXP 27
10507: PPUSH
10508: LD_STRING DA-2-end
10510: PPUSH
10511: CALL_OW 88
// SayRadio ( Farmer , DF-3-end ) ;
10515: LD_EXP 31
10519: PPUSH
10520: LD_STRING DF-3-end
10522: PPUSH
10523: CALL_OW 94
// Say ( Heike , DH-3-end ) ;
10527: LD_EXP 23
10531: PPUSH
10532: LD_STRING DH-3-end
10534: PPUSH
10535: CALL_OW 88
// SayRadio ( Farmer , DF-4-end ) ;
10539: LD_EXP 31
10543: PPUSH
10544: LD_STRING DF-4-end
10546: PPUSH
10547: CALL_OW 94
// if tick <= [ 25 25$00 , 24 24$00 , 23 23$00 ] [ Difficulty ] then
10551: LD_OWVAR 1
10555: PUSH
10556: LD_INT 52500
10558: PUSH
10559: LD_INT 50400
10561: PUSH
10562: LD_INT 48300
10564: PUSH
10565: EMPTY
10566: LIST
10567: LIST
10568: LIST
10569: PUSH
10570: LD_OWVAR 67
10574: ARRAY
10575: LESSEQUAL
10576: IFFALSE 10590
// AddMedal ( med1 , 1 ) else
10578: LD_STRING med1
10580: PPUSH
10581: LD_INT 1
10583: PPUSH
10584: CALL_OW 101
10588: GO 10601
// AddMedal ( med1 , - 1 ) ;
10590: LD_STRING med1
10592: PPUSH
10593: LD_INT 1
10595: NEG
10596: PPUSH
10597: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) = 0 and not gladstoneEscaped then
10601: LD_INT 22
10603: PUSH
10604: LD_INT 1
10606: PUSH
10607: EMPTY
10608: LIST
10609: LIST
10610: PUSH
10611: LD_INT 25
10613: PUSH
10614: LD_INT 4
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: PPUSH
10625: CALL_OW 69
10629: PUSH
10630: LD_INT 0
10632: EQUAL
10633: PUSH
10634: LD_EXP 12
10638: NOT
10639: AND
10640: IFFALSE 10654
// AddMedal ( med2 , 1 ) else
10642: LD_STRING med2
10644: PPUSH
10645: LD_INT 1
10647: PPUSH
10648: CALL_OW 101
10652: GO 10665
// AddMedal ( med2 , - 1 ) ;
10654: LD_STRING med2
10656: PPUSH
10657: LD_INT 1
10659: NEG
10660: PPUSH
10661: CALL_OW 101
// if trickyMove then
10665: LD_EXP 15
10669: IFFALSE 10683
// AddMedal ( med3 , 1 ) else
10671: LD_STRING med3
10673: PPUSH
10674: LD_INT 1
10676: PPUSH
10677: CALL_OW 101
10681: GO 10713
// if spottedBeforeRadio then
10683: LD_EXP 6
10687: IFFALSE 10702
// AddMedal ( med3 , - 2 ) else
10689: LD_STRING med3
10691: PPUSH
10692: LD_INT 2
10694: NEG
10695: PPUSH
10696: CALL_OW 101
10700: GO 10713
// AddMedal ( med3 , - 1 ) ;
10702: LD_STRING med3
10704: PPUSH
10705: LD_INT 1
10707: NEG
10708: PPUSH
10709: CALL_OW 101
// GiveMedals ( MAIN ) ;
10713: LD_STRING MAIN
10715: PPUSH
10716: CALL_OW 102
// SaveCharacters ( tmp , 02_ape ) ;
10720: LD_VAR 0 1
10724: PPUSH
10725: LD_STRING 02_ape
10727: PPUSH
10728: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
10732: LD_ADDR_VAR 0 1
10736: PUSH
10737: LD_INT 22
10739: PUSH
10740: LD_INT 2
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: PUSH
10747: LD_INT 23
10749: PUSH
10750: LD_INT 2
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: PUSH
10757: LD_INT 21
10759: PUSH
10760: LD_INT 1
10762: PUSH
10763: EMPTY
10764: LIST
10765: LIST
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: LIST
10771: PPUSH
10772: CALL_OW 69
10776: ST_TO_ADDR
// RewardPeople ( tmp ) ;
10777: LD_VAR 0 1
10781: PPUSH
10782: CALL_OW 43
// SaveCharacters ( Heike , 02_Heike ) ;
10786: LD_EXP 23
10790: PPUSH
10791: LD_STRING 02_Heike
10793: PPUSH
10794: CALL_OW 38
// SaveCharacters ( Aviradze , 02_Aviradze ) ;
10798: LD_EXP 27
10802: PPUSH
10803: LD_STRING 02_Aviradze
10805: PPUSH
10806: CALL_OW 38
// if Givi then
10810: LD_EXP 24
10814: IFFALSE 10828
// SaveCharacters ( Givi , 02_Givi ) ;
10816: LD_EXP 24
10820: PPUSH
10821: LD_STRING 02_Givi
10823: PPUSH
10824: CALL_OW 38
// if Mike then
10828: LD_EXP 25
10832: IFFALSE 10846
// SaveCharacters ( Mike , 02_Mike ) ;
10834: LD_EXP 25
10838: PPUSH
10839: LD_STRING 02_Mike
10841: PPUSH
10842: CALL_OW 38
// if Kamil then
10846: LD_EXP 26
10850: IFFALSE 10864
// SaveCharacters ( Kamil , 02_Kamil ) ;
10852: LD_EXP 26
10856: PPUSH
10857: LD_STRING 02_Kamil
10859: PPUSH
10860: CALL_OW 38
// if Kaia then
10864: LD_EXP 28
10868: IFFALSE 10882
// SaveCharacters ( Kaia , 02_Kaia ) ;
10870: LD_EXP 28
10874: PPUSH
10875: LD_STRING 02_Kaia
10877: PPUSH
10878: CALL_OW 38
// if Sophia then
10882: LD_EXP 29
10886: IFFALSE 10900
// SaveCharacters ( Sophia , 02_Sophia ) ;
10888: LD_EXP 29
10892: PPUSH
10893: LD_STRING 02_Sophia
10895: PPUSH
10896: CALL_OW 38
// if Markov then
10900: LD_EXP 30
10904: IFFALSE 10918
// SaveCharacters ( Markov , 02_Markov ) ;
10906: LD_EXP 30
10910: PPUSH
10911: LD_STRING 02_Markov
10913: PPUSH
10914: CALL_OW 38
// if tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] then
10918: LD_VAR 0 1
10922: PUSH
10923: LD_EXP 23
10927: PUSH
10928: LD_EXP 27
10932: PUSH
10933: LD_EXP 24
10937: PUSH
10938: LD_EXP 25
10942: PUSH
10943: LD_EXP 26
10947: PUSH
10948: LD_EXP 29
10952: PUSH
10953: LD_EXP 28
10957: PUSH
10958: LD_EXP 30
10962: PUSH
10963: EMPTY
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: DIFF
10973: IFFALSE 11038
// SaveCharacters ( tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] , 02_others ) ;
10975: LD_VAR 0 1
10979: PUSH
10980: LD_EXP 23
10984: PUSH
10985: LD_EXP 27
10989: PUSH
10990: LD_EXP 24
10994: PUSH
10995: LD_EXP 25
10999: PUSH
11000: LD_EXP 26
11004: PUSH
11005: LD_EXP 29
11009: PUSH
11010: LD_EXP 28
11014: PUSH
11015: LD_EXP 30
11019: PUSH
11020: EMPTY
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: DIFF
11030: PPUSH
11031: LD_STRING 02_others
11033: PPUSH
11034: CALL_OW 38
// YouWin ;
11038: CALL_OW 103
// InGameOff ;
11042: CALL_OW 9
// end ;
11046: PPOPN 1
11048: END
// every 0 0$1 trigger tick > timeUntilFarmer and aviradzeSpotted do
11049: LD_OWVAR 1
11053: PUSH
11054: LD_EXP 13
11058: GREATER
11059: PUSH
11060: LD_EXP 4
11064: AND
11065: IFFALSE 11105
11067: GO 11069
11069: DISABLE
// begin InGameOn ;
11070: CALL_OW 8
// PrepareFarmer ;
11074: CALL 11721 0 0
// CenterNowOnUnits ( Farmer ) ;
11078: LD_EXP 31
11082: PPUSH
11083: CALL_OW 87
// wait ( 0 0$2 ) ;
11087: LD_INT 70
11089: PPUSH
11090: CALL_OW 67
// YouLost ( Farmer ) ;
11094: LD_STRING Farmer
11096: PPUSH
11097: CALL_OW 104
// InGameOff ;
11101: CALL_OW 9
// end ; end_of_file
11105: END
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer ; export function PrepareArabian ; var un , veh ; begin
11106: LD_INT 0
11108: PPUSH
11109: PPUSH
11110: PPUSH
// uc_side := 2 ;
11111: LD_ADDR_OWVAR 20
11115: PUSH
11116: LD_INT 2
11118: ST_TO_ADDR
// uc_nation := 2 ;
11119: LD_ADDR_OWVAR 21
11123: PUSH
11124: LD_INT 2
11126: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
11127: LD_ADDR_EXP 23
11131: PUSH
11132: LD_STRING Heike
11134: PPUSH
11135: LD_EXP 1
11139: NOT
11140: PPUSH
11141: LD_EXP 2
11145: PPUSH
11146: CALL 26760 0 3
11150: ST_TO_ADDR
// PlaceUnitXY ( Heike , 83 , 72 , false ) ;
11151: LD_EXP 23
11155: PPUSH
11156: LD_INT 83
11158: PPUSH
11159: LD_INT 72
11161: PPUSH
11162: LD_INT 0
11164: PPUSH
11165: CALL_OW 48
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
11169: LD_ADDR_EXP 24
11173: PUSH
11174: LD_STRING Givi
11176: PPUSH
11177: LD_EXP 1
11181: NOT
11182: PPUSH
11183: LD_EXP 2
11187: PPUSH
11188: CALL 26760 0 3
11192: ST_TO_ADDR
// if Givi then
11193: LD_EXP 24
11197: IFFALSE 11217
// PlaceUnitXY ( Givi , 87 , 76 , false ) ;
11199: LD_EXP 24
11203: PPUSH
11204: LD_INT 87
11206: PPUSH
11207: LD_INT 76
11209: PPUSH
11210: LD_INT 0
11212: PPUSH
11213: CALL_OW 48
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
11217: LD_ADDR_EXP 25
11221: PUSH
11222: LD_STRING Mike
11224: PPUSH
11225: LD_EXP 1
11229: NOT
11230: PPUSH
11231: LD_EXP 2
11235: PPUSH
11236: CALL 26760 0 3
11240: ST_TO_ADDR
// if Mike then
11241: LD_EXP 25
11245: IFFALSE 11265
// PlaceUnitXY ( Mike , 84 , 76 , false ) ;
11247: LD_EXP 25
11251: PPUSH
11252: LD_INT 84
11254: PPUSH
11255: LD_INT 76
11257: PPUSH
11258: LD_INT 0
11260: PPUSH
11261: CALL_OW 48
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
11265: LD_ADDR_EXP 26
11269: PUSH
11270: LD_STRING Kamil
11272: PPUSH
11273: LD_EXP 1
11277: NOT
11278: PPUSH
11279: LD_EXP 2
11283: PPUSH
11284: CALL 26760 0 3
11288: ST_TO_ADDR
// if Kamil then
11289: LD_EXP 26
11293: IFFALSE 11313
// PlaceUnitXY ( Kamil , 85 , 78 , false ) ;
11295: LD_EXP 26
11299: PPUSH
11300: LD_INT 85
11302: PPUSH
11303: LD_INT 78
11305: PPUSH
11306: LD_INT 0
11308: PPUSH
11309: CALL_OW 48
// uc_side := 5 ;
11313: LD_ADDR_OWVAR 20
11317: PUSH
11318: LD_INT 5
11320: ST_TO_ADDR
// uc_nation := 2 ;
11321: LD_ADDR_OWVAR 21
11325: PUSH
11326: LD_INT 2
11328: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , false ,  ) ;
11329: LD_ADDR_EXP 27
11333: PUSH
11334: LD_STRING Aviradze
11336: PPUSH
11337: LD_INT 0
11339: PPUSH
11340: LD_STRING 
11342: PPUSH
11343: CALL 26760 0 3
11347: ST_TO_ADDR
// PlaceUnitXY ( Aviradze , 106 , 38 , false ) ;
11348: LD_EXP 27
11352: PPUSH
11353: LD_INT 106
11355: PPUSH
11356: LD_INT 38
11358: PPUSH
11359: LD_INT 0
11361: PPUSH
11362: CALL_OW 48
// ComTurnXY ( Aviradze , 103 , 38 ) ;
11366: LD_EXP 27
11370: PPUSH
11371: LD_INT 103
11373: PPUSH
11374: LD_INT 38
11376: PPUSH
11377: CALL_OW 118
// Kaia := PrepareUnit ( Kaia , false ,  ) ;
11381: LD_ADDR_EXP 28
11385: PUSH
11386: LD_STRING Kaia
11388: PPUSH
11389: LD_INT 0
11391: PPUSH
11392: LD_STRING 
11394: PPUSH
11395: CALL 26760 0 3
11399: ST_TO_ADDR
// PlaceUnitXY ( Kaia , 100 , 34 , false ) ;
11400: LD_EXP 28
11404: PPUSH
11405: LD_INT 100
11407: PPUSH
11408: LD_INT 34
11410: PPUSH
11411: LD_INT 0
11413: PPUSH
11414: CALL_OW 48
// ComTurnXY ( Kaia , 100 , 39 ) ;
11418: LD_EXP 28
11422: PPUSH
11423: LD_INT 100
11425: PPUSH
11426: LD_INT 39
11428: PPUSH
11429: CALL_OW 118
// Sophia := PrepareUnit ( Sophia , false ,  ) ;
11433: LD_ADDR_EXP 29
11437: PUSH
11438: LD_STRING Sophia
11440: PPUSH
11441: LD_INT 0
11443: PPUSH
11444: LD_STRING 
11446: PPUSH
11447: CALL 26760 0 3
11451: ST_TO_ADDR
// PlaceUnitXY ( Sophia , 109 , 50 , false ) ;
11452: LD_EXP 29
11456: PPUSH
11457: LD_INT 109
11459: PPUSH
11460: LD_INT 50
11462: PPUSH
11463: LD_INT 0
11465: PPUSH
11466: CALL_OW 48
// ComTurnXY ( Sophia , 100 , 39 ) ;
11470: LD_EXP 29
11474: PPUSH
11475: LD_INT 100
11477: PPUSH
11478: LD_INT 39
11480: PPUSH
11481: CALL_OW 118
// Markov := PrepareUnit ( Markov , false ,  ) ;
11485: LD_ADDR_EXP 30
11489: PUSH
11490: LD_STRING Markov
11492: PPUSH
11493: LD_INT 0
11495: PPUSH
11496: LD_STRING 
11498: PPUSH
11499: CALL 26760 0 3
11503: ST_TO_ADDR
// PrepareTank ( 5 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , [ 90 , 70 , 60 ] [ Difficulty ] ) ;
11504: LD_INT 5
11506: PPUSH
11507: LD_INT 3
11509: PPUSH
11510: LD_INT 21
11512: PPUSH
11513: LD_INT 1
11515: PPUSH
11516: LD_INT 1
11518: PPUSH
11519: LD_INT 42
11521: PPUSH
11522: LD_INT 90
11524: PUSH
11525: LD_INT 70
11527: PUSH
11528: LD_INT 60
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: LIST
11535: PUSH
11536: LD_OWVAR 67
11540: ARRAY
11541: PPUSH
11542: CALL 237 0 7
// veh := CreateVehicle ;
11546: LD_ADDR_VAR 0 3
11550: PUSH
11551: CALL_OW 45
11555: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
11556: LD_VAR 0 3
11560: PPUSH
11561: LD_INT 4
11563: PPUSH
11564: CALL_OW 233
// PlaceUnitXY ( veh , 109 , 38 , false ) ;
11568: LD_VAR 0 3
11572: PPUSH
11573: LD_INT 109
11575: PPUSH
11576: LD_INT 38
11578: PPUSH
11579: LD_INT 0
11581: PPUSH
11582: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
11586: LD_EXP 30
11590: PPUSH
11591: LD_VAR 0 3
11595: PPUSH
11596: CALL_OW 52
// ComTurnUnit ( Kaia , Aviradze ) ;
11600: LD_EXP 28
11604: PPUSH
11605: LD_EXP 27
11609: PPUSH
11610: CALL_OW 119
// ComTurnUnit ( Aviradze , Kaia ) ;
11614: LD_EXP 27
11618: PPUSH
11619: LD_EXP 28
11623: PPUSH
11624: CALL_OW 119
// if not Givi or not Mike then
11628: LD_EXP 24
11632: NOT
11633: PUSH
11634: LD_EXP 25
11638: NOT
11639: OR
11640: IFFALSE 11716
// begin uc_nation := 2 ;
11642: LD_ADDR_OWVAR 21
11646: PUSH
11647: LD_INT 2
11649: ST_TO_ADDR
// uc_side := 5 ;
11650: LD_ADDR_OWVAR 20
11654: PUSH
11655: LD_INT 5
11657: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 1 ) ;
11658: LD_INT 1
11660: PPUSH
11661: LD_INT 1
11663: PPUSH
11664: LD_INT 1
11666: PPUSH
11667: CALL_OW 380
// un := CreateHuman ;
11671: LD_ADDR_VAR 0 2
11675: PUSH
11676: CALL_OW 44
11680: ST_TO_ADDR
// PlaceUnitXYR ( un , 112 , 40 , 3 , false ) ;
11681: LD_VAR 0 2
11685: PPUSH
11686: LD_INT 112
11688: PPUSH
11689: LD_INT 40
11691: PPUSH
11692: LD_INT 3
11694: PPUSH
11695: LD_INT 0
11697: PPUSH
11698: CALL_OW 50
// ComTurnUnit ( un , Aviradze ) ;
11702: LD_VAR 0 2
11706: PPUSH
11707: LD_EXP 27
11711: PPUSH
11712: CALL_OW 119
// end ; end ;
11716: LD_VAR 0 1
11720: RET
// export function PrepareFarmer ; var i ; begin
11721: LD_INT 0
11723: PPUSH
11724: PPUSH
// uc_side := 5 ;
11725: LD_ADDR_OWVAR 20
11729: PUSH
11730: LD_INT 5
11732: ST_TO_ADDR
// uc_nation := 2 ;
11733: LD_ADDR_OWVAR 21
11737: PUSH
11738: LD_INT 2
11740: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
11741: LD_ADDR_EXP 31
11745: PUSH
11746: LD_STRING Farmer
11748: PPUSH
11749: LD_INT 0
11751: PPUSH
11752: LD_STRING 
11754: PPUSH
11755: CALL 26760 0 3
11759: ST_TO_ADDR
// PlaceUnitXY ( Farmer , 106 , 62 , false ) ;
11760: LD_EXP 31
11764: PPUSH
11765: LD_INT 106
11767: PPUSH
11768: LD_INT 62
11770: PPUSH
11771: LD_INT 0
11773: PPUSH
11774: CALL_OW 48
// for i := 1 to 5 do
11778: LD_ADDR_VAR 0 2
11782: PUSH
11783: DOUBLE
11784: LD_INT 1
11786: DEC
11787: ST_TO_ADDR
11788: LD_INT 5
11790: PUSH
11791: FOR_TO
11792: IFFALSE 11830
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
11794: LD_INT 1
11796: PPUSH
11797: LD_INT 1
11799: PPUSH
11800: LD_INT 1
11802: PPUSH
11803: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 105 , 64 , 3 , false ) ;
11807: CALL_OW 44
11811: PPUSH
11812: LD_INT 105
11814: PPUSH
11815: LD_INT 64
11817: PPUSH
11818: LD_INT 3
11820: PPUSH
11821: LD_INT 0
11823: PPUSH
11824: CALL_OW 50
// end ;
11828: GO 11791
11830: POP
11831: POP
// end ; end_of_file
11832: LD_VAR 0 1
11836: RET
// every 2 2$20 + 0 0$10 do
11837: GO 11839
11839: DISABLE
// begin enable ;
11840: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , forest , true ) ;
11841: LD_INT 1
11843: PPUSH
11844: LD_INT 5
11846: PPUSH
11847: CALL_OW 12
11851: PPUSH
11852: LD_INT 1
11854: PPUSH
11855: LD_INT 1
11857: PPUSH
11858: CALL_OW 55
// if tick > 6 6$00 then
11862: LD_OWVAR 1
11866: PUSH
11867: LD_INT 12600
11869: GREATER
11870: IFFALSE 11873
// disable ;
11872: DISABLE
// end ; end_of_file
11873: END
// on UnitDestroyed ( un ) do begin if un = Heike then
11874: LD_VAR 0 1
11878: PUSH
11879: LD_EXP 23
11883: EQUAL
11884: IFFALSE 11893
// YouLost ( Heike ) ;
11886: LD_STRING Heike
11888: PPUSH
11889: CALL_OW 104
// if un = Aviradze then
11893: LD_VAR 0 1
11897: PUSH
11898: LD_EXP 27
11902: EQUAL
11903: IFFALSE 11912
// YouLost ( Aviradze ) ;
11905: LD_STRING Aviradze
11907: PPUSH
11908: CALL_OW 104
// if un = usLab then
11912: LD_VAR 0 1
11916: PUSH
11917: LD_INT 3
11919: EQUAL
11920: IFFALSE 11929
// YouLost ( Lab ) ;
11922: LD_STRING Lab
11924: PPUSH
11925: CALL_OW 104
// if ( un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) diff [ Heike , Aviradze ] ) and aviradzeSpotted then
11929: LD_VAR 0 1
11933: PUSH
11934: LD_INT 22
11936: PUSH
11937: LD_INT 2
11939: PUSH
11940: EMPTY
11941: LIST
11942: LIST
11943: PUSH
11944: LD_INT 21
11946: PUSH
11947: LD_INT 1
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: PUSH
11954: LD_INT 23
11956: PUSH
11957: LD_INT 2
11959: PUSH
11960: EMPTY
11961: LIST
11962: LIST
11963: PUSH
11964: EMPTY
11965: LIST
11966: LIST
11967: LIST
11968: PPUSH
11969: CALL_OW 69
11973: PUSH
11974: LD_EXP 23
11978: PUSH
11979: LD_EXP 27
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: DIFF
11988: IN
11989: PUSH
11990: LD_EXP 4
11994: AND
11995: IFFALSE 12011
// lostCounter := lostCounter + 1 ;
11997: LD_ADDR_EXP 18
12001: PUSH
12002: LD_EXP 18
12006: PUSH
12007: LD_INT 1
12009: PLUS
12010: ST_TO_ADDR
// end ;
12011: PPOPN 1
12013: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 2 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) = 0 do
12014: LD_INT 23
12016: PUSH
12017: LD_INT 2
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: PUSH
12024: LD_INT 25
12026: PUSH
12027: LD_INT 2
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: PUSH
12034: EMPTY
12035: LIST
12036: LIST
12037: PPUSH
12038: CALL_OW 69
12042: PUSH
12043: LD_INT 0
12045: EQUAL
12046: PUSH
12047: LD_INT 22
12049: PUSH
12050: LD_INT 2
12052: PUSH
12053: EMPTY
12054: LIST
12055: LIST
12056: PUSH
12057: LD_INT 21
12059: PUSH
12060: LD_INT 3
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: PUSH
12067: EMPTY
12068: LIST
12069: LIST
12070: PPUSH
12071: CALL_OW 69
12075: PUSH
12076: LD_INT 0
12078: EQUAL
12079: AND
12080: IFFALSE 12092
12082: GO 12084
12084: DISABLE
// YouLost ( Eng ) ;
12085: LD_STRING Eng
12087: PPUSH
12088: CALL_OW 104
12092: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in usSci and killerSide = 2 then
12093: LD_VAR 0 1
12097: PUSH
12098: LD_EXP 22
12102: IN
12103: PUSH
12104: LD_VAR 0 2
12108: PUSH
12109: LD_INT 2
12111: EQUAL
12112: AND
12113: IFFALSE 12145
// begin usSci := usSci diff un ;
12115: LD_ADDR_EXP 22
12119: PUSH
12120: LD_EXP 22
12124: PUSH
12125: LD_VAR 0 1
12129: DIFF
12130: ST_TO_ADDR
// sciCounterKill := sciCounterKill + 1 ;
12131: LD_ADDR_EXP 9
12135: PUSH
12136: LD_EXP 9
12140: PUSH
12141: LD_INT 1
12143: PLUS
12144: ST_TO_ADDR
// end ; end ;
12145: PPOPN 3
12147: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
12148: LD_VAR 0 1
12152: PUSH
12153: LD_INT 2
12155: EQUAL
12156: PUSH
12157: LD_VAR 0 2
12161: PUSH
12162: LD_INT 5
12164: EQUAL
12165: AND
12166: IFFALSE 12175
// YouLost ( FriendlyFire ) ;
12168: LD_STRING FriendlyFire
12170: PPUSH
12171: CALL_OW 104
// end ; end_of_file
12175: PPOPN 2
12177: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
12178: LD_INT 0
12180: PPUSH
// ar_crane := 88 ;
12181: LD_ADDR_EXP 38
12185: PUSH
12186: LD_INT 88
12188: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
12189: LD_ADDR_EXP 33
12193: PUSH
12194: LD_INT 89
12196: ST_TO_ADDR
// us_hack := 99 ;
12197: LD_ADDR_EXP 34
12201: PUSH
12202: LD_INT 99
12204: ST_TO_ADDR
// us_artillery := 97 ;
12205: LD_ADDR_EXP 35
12209: PUSH
12210: LD_INT 97
12212: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12213: LD_ADDR_EXP 36
12217: PUSH
12218: LD_INT 91
12220: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
12221: LD_ADDR_EXP 37
12225: PUSH
12226: LD_INT 92
12228: ST_TO_ADDR
// ru_radar := 98 ;
12229: LD_ADDR_EXP 32
12233: PUSH
12234: LD_INT 98
12236: ST_TO_ADDR
// tech_Artillery := 80 ;
12237: LD_ADDR_EXP 39
12241: PUSH
12242: LD_INT 80
12244: ST_TO_ADDR
// tech_RadMat := 81 ;
12245: LD_ADDR_EXP 40
12249: PUSH
12250: LD_INT 81
12252: ST_TO_ADDR
// tech_BasicTools := 82 ;
12253: LD_ADDR_EXP 41
12257: PUSH
12258: LD_INT 82
12260: ST_TO_ADDR
// tech_Cargo := 83 ;
12261: LD_ADDR_EXP 42
12265: PUSH
12266: LD_INT 83
12268: ST_TO_ADDR
// tech_Track := 84 ;
12269: LD_ADDR_EXP 43
12273: PUSH
12274: LD_INT 84
12276: ST_TO_ADDR
// tech_Crane := 85 ;
12277: LD_ADDR_EXP 44
12281: PUSH
12282: LD_INT 85
12284: ST_TO_ADDR
// tech_Bulldozer := 86 ;
12285: LD_ADDR_EXP 45
12289: PUSH
12290: LD_INT 86
12292: ST_TO_ADDR
// tech_Hovercraft := 87 ;
12293: LD_ADDR_EXP 46
12297: PUSH
12298: LD_INT 87
12300: ST_TO_ADDR
// end ;
12301: LD_VAR 0 1
12305: RET
// every 1 do
12306: GO 12308
12308: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
12309: CALL 12178 0 0
12313: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
12314: LD_VAR 0 2
12318: PUSH
12319: LD_INT 100
12321: EQUAL
12322: IFFALSE 13271
// begin if not StreamModeActive then
12324: LD_EXP 47
12328: NOT
12329: IFFALSE 12339
// StreamModeActive := true ;
12331: LD_ADDR_EXP 47
12335: PUSH
12336: LD_INT 1
12338: ST_TO_ADDR
// if p3 = 0 then
12339: LD_VAR 0 3
12343: PUSH
12344: LD_INT 0
12346: EQUAL
12347: IFFALSE 12353
// InitStreamMode ;
12349: CALL 13504 0 0
// if p3 = 1 then
12353: LD_VAR 0 3
12357: PUSH
12358: LD_INT 1
12360: EQUAL
12361: IFFALSE 12371
// sRocket := true ;
12363: LD_ADDR_EXP 52
12367: PUSH
12368: LD_INT 1
12370: ST_TO_ADDR
// if p3 = 2 then
12371: LD_VAR 0 3
12375: PUSH
12376: LD_INT 2
12378: EQUAL
12379: IFFALSE 12389
// sSpeed := true ;
12381: LD_ADDR_EXP 51
12385: PUSH
12386: LD_INT 1
12388: ST_TO_ADDR
// if p3 = 3 then
12389: LD_VAR 0 3
12393: PUSH
12394: LD_INT 3
12396: EQUAL
12397: IFFALSE 12407
// sEngine := true ;
12399: LD_ADDR_EXP 53
12403: PUSH
12404: LD_INT 1
12406: ST_TO_ADDR
// if p3 = 4 then
12407: LD_VAR 0 3
12411: PUSH
12412: LD_INT 4
12414: EQUAL
12415: IFFALSE 12425
// sSpec := true ;
12417: LD_ADDR_EXP 50
12421: PUSH
12422: LD_INT 1
12424: ST_TO_ADDR
// if p3 = 5 then
12425: LD_VAR 0 3
12429: PUSH
12430: LD_INT 5
12432: EQUAL
12433: IFFALSE 12443
// sLevel := true ;
12435: LD_ADDR_EXP 54
12439: PUSH
12440: LD_INT 1
12442: ST_TO_ADDR
// if p3 = 6 then
12443: LD_VAR 0 3
12447: PUSH
12448: LD_INT 6
12450: EQUAL
12451: IFFALSE 12461
// sArmoury := true ;
12453: LD_ADDR_EXP 55
12457: PUSH
12458: LD_INT 1
12460: ST_TO_ADDR
// if p3 = 7 then
12461: LD_VAR 0 3
12465: PUSH
12466: LD_INT 7
12468: EQUAL
12469: IFFALSE 12479
// sRadar := true ;
12471: LD_ADDR_EXP 56
12475: PUSH
12476: LD_INT 1
12478: ST_TO_ADDR
// if p3 = 8 then
12479: LD_VAR 0 3
12483: PUSH
12484: LD_INT 8
12486: EQUAL
12487: IFFALSE 12497
// sBunker := true ;
12489: LD_ADDR_EXP 57
12493: PUSH
12494: LD_INT 1
12496: ST_TO_ADDR
// if p3 = 9 then
12497: LD_VAR 0 3
12501: PUSH
12502: LD_INT 9
12504: EQUAL
12505: IFFALSE 12515
// sHack := true ;
12507: LD_ADDR_EXP 58
12511: PUSH
12512: LD_INT 1
12514: ST_TO_ADDR
// if p3 = 10 then
12515: LD_VAR 0 3
12519: PUSH
12520: LD_INT 10
12522: EQUAL
12523: IFFALSE 12533
// sFire := true ;
12525: LD_ADDR_EXP 59
12529: PUSH
12530: LD_INT 1
12532: ST_TO_ADDR
// if p3 = 11 then
12533: LD_VAR 0 3
12537: PUSH
12538: LD_INT 11
12540: EQUAL
12541: IFFALSE 12551
// sRefresh := true ;
12543: LD_ADDR_EXP 60
12547: PUSH
12548: LD_INT 1
12550: ST_TO_ADDR
// if p3 = 12 then
12551: LD_VAR 0 3
12555: PUSH
12556: LD_INT 12
12558: EQUAL
12559: IFFALSE 12569
// sExp := true ;
12561: LD_ADDR_EXP 61
12565: PUSH
12566: LD_INT 1
12568: ST_TO_ADDR
// if p3 = 13 then
12569: LD_VAR 0 3
12573: PUSH
12574: LD_INT 13
12576: EQUAL
12577: IFFALSE 12587
// sDepot := true ;
12579: LD_ADDR_EXP 62
12583: PUSH
12584: LD_INT 1
12586: ST_TO_ADDR
// if p3 = 14 then
12587: LD_VAR 0 3
12591: PUSH
12592: LD_INT 14
12594: EQUAL
12595: IFFALSE 12605
// sFlag := true ;
12597: LD_ADDR_EXP 63
12601: PUSH
12602: LD_INT 1
12604: ST_TO_ADDR
// if p3 = 15 then
12605: LD_VAR 0 3
12609: PUSH
12610: LD_INT 15
12612: EQUAL
12613: IFFALSE 12623
// sKamikadze := true ;
12615: LD_ADDR_EXP 71
12619: PUSH
12620: LD_INT 1
12622: ST_TO_ADDR
// if p3 = 16 then
12623: LD_VAR 0 3
12627: PUSH
12628: LD_INT 16
12630: EQUAL
12631: IFFALSE 12641
// sTroll := true ;
12633: LD_ADDR_EXP 72
12637: PUSH
12638: LD_INT 1
12640: ST_TO_ADDR
// if p3 = 17 then
12641: LD_VAR 0 3
12645: PUSH
12646: LD_INT 17
12648: EQUAL
12649: IFFALSE 12659
// sSlow := true ;
12651: LD_ADDR_EXP 73
12655: PUSH
12656: LD_INT 1
12658: ST_TO_ADDR
// if p3 = 18 then
12659: LD_VAR 0 3
12663: PUSH
12664: LD_INT 18
12666: EQUAL
12667: IFFALSE 12677
// sLack := true ;
12669: LD_ADDR_EXP 74
12673: PUSH
12674: LD_INT 1
12676: ST_TO_ADDR
// if p3 = 19 then
12677: LD_VAR 0 3
12681: PUSH
12682: LD_INT 19
12684: EQUAL
12685: IFFALSE 12695
// sTank := true ;
12687: LD_ADDR_EXP 76
12691: PUSH
12692: LD_INT 1
12694: ST_TO_ADDR
// if p3 = 20 then
12695: LD_VAR 0 3
12699: PUSH
12700: LD_INT 20
12702: EQUAL
12703: IFFALSE 12713
// sRemote := true ;
12705: LD_ADDR_EXP 77
12709: PUSH
12710: LD_INT 1
12712: ST_TO_ADDR
// if p3 = 21 then
12713: LD_VAR 0 3
12717: PUSH
12718: LD_INT 21
12720: EQUAL
12721: IFFALSE 12731
// sPowell := true ;
12723: LD_ADDR_EXP 78
12727: PUSH
12728: LD_INT 1
12730: ST_TO_ADDR
// if p3 = 22 then
12731: LD_VAR 0 3
12735: PUSH
12736: LD_INT 22
12738: EQUAL
12739: IFFALSE 12749
// sTeleport := true ;
12741: LD_ADDR_EXP 81
12745: PUSH
12746: LD_INT 1
12748: ST_TO_ADDR
// if p3 = 23 then
12749: LD_VAR 0 3
12753: PUSH
12754: LD_INT 23
12756: EQUAL
12757: IFFALSE 12767
// sOilTower := true ;
12759: LD_ADDR_EXP 83
12763: PUSH
12764: LD_INT 1
12766: ST_TO_ADDR
// if p3 = 24 then
12767: LD_VAR 0 3
12771: PUSH
12772: LD_INT 24
12774: EQUAL
12775: IFFALSE 12785
// sShovel := true ;
12777: LD_ADDR_EXP 84
12781: PUSH
12782: LD_INT 1
12784: ST_TO_ADDR
// if p3 = 25 then
12785: LD_VAR 0 3
12789: PUSH
12790: LD_INT 25
12792: EQUAL
12793: IFFALSE 12803
// sSheik := true ;
12795: LD_ADDR_EXP 85
12799: PUSH
12800: LD_INT 1
12802: ST_TO_ADDR
// if p3 = 26 then
12803: LD_VAR 0 3
12807: PUSH
12808: LD_INT 26
12810: EQUAL
12811: IFFALSE 12821
// sEarthquake := true ;
12813: LD_ADDR_EXP 87
12817: PUSH
12818: LD_INT 1
12820: ST_TO_ADDR
// if p3 = 27 then
12821: LD_VAR 0 3
12825: PUSH
12826: LD_INT 27
12828: EQUAL
12829: IFFALSE 12839
// sAI := true ;
12831: LD_ADDR_EXP 88
12835: PUSH
12836: LD_INT 1
12838: ST_TO_ADDR
// if p3 = 28 then
12839: LD_VAR 0 3
12843: PUSH
12844: LD_INT 28
12846: EQUAL
12847: IFFALSE 12857
// sCargo := true ;
12849: LD_ADDR_EXP 91
12853: PUSH
12854: LD_INT 1
12856: ST_TO_ADDR
// if p3 = 29 then
12857: LD_VAR 0 3
12861: PUSH
12862: LD_INT 29
12864: EQUAL
12865: IFFALSE 12875
// sDLaser := true ;
12867: LD_ADDR_EXP 92
12871: PUSH
12872: LD_INT 1
12874: ST_TO_ADDR
// if p3 = 30 then
12875: LD_VAR 0 3
12879: PUSH
12880: LD_INT 30
12882: EQUAL
12883: IFFALSE 12893
// sExchange := true ;
12885: LD_ADDR_EXP 93
12889: PUSH
12890: LD_INT 1
12892: ST_TO_ADDR
// if p3 = 31 then
12893: LD_VAR 0 3
12897: PUSH
12898: LD_INT 31
12900: EQUAL
12901: IFFALSE 12911
// sFac := true ;
12903: LD_ADDR_EXP 94
12907: PUSH
12908: LD_INT 1
12910: ST_TO_ADDR
// if p3 = 32 then
12911: LD_VAR 0 3
12915: PUSH
12916: LD_INT 32
12918: EQUAL
12919: IFFALSE 12929
// sPower := true ;
12921: LD_ADDR_EXP 95
12925: PUSH
12926: LD_INT 1
12928: ST_TO_ADDR
// if p3 = 33 then
12929: LD_VAR 0 3
12933: PUSH
12934: LD_INT 33
12936: EQUAL
12937: IFFALSE 12947
// sRandom := true ;
12939: LD_ADDR_EXP 96
12943: PUSH
12944: LD_INT 1
12946: ST_TO_ADDR
// if p3 = 34 then
12947: LD_VAR 0 3
12951: PUSH
12952: LD_INT 34
12954: EQUAL
12955: IFFALSE 12965
// sShield := true ;
12957: LD_ADDR_EXP 97
12961: PUSH
12962: LD_INT 1
12964: ST_TO_ADDR
// if p3 = 35 then
12965: LD_VAR 0 3
12969: PUSH
12970: LD_INT 35
12972: EQUAL
12973: IFFALSE 12983
// sTime := true ;
12975: LD_ADDR_EXP 98
12979: PUSH
12980: LD_INT 1
12982: ST_TO_ADDR
// if p3 = 36 then
12983: LD_VAR 0 3
12987: PUSH
12988: LD_INT 36
12990: EQUAL
12991: IFFALSE 13001
// sTools := true ;
12993: LD_ADDR_EXP 99
12997: PUSH
12998: LD_INT 1
13000: ST_TO_ADDR
// if p3 = 101 then
13001: LD_VAR 0 3
13005: PUSH
13006: LD_INT 101
13008: EQUAL
13009: IFFALSE 13019
// sSold := true ;
13011: LD_ADDR_EXP 64
13015: PUSH
13016: LD_INT 1
13018: ST_TO_ADDR
// if p3 = 102 then
13019: LD_VAR 0 3
13023: PUSH
13024: LD_INT 102
13026: EQUAL
13027: IFFALSE 13037
// sDiff := true ;
13029: LD_ADDR_EXP 65
13033: PUSH
13034: LD_INT 1
13036: ST_TO_ADDR
// if p3 = 103 then
13037: LD_VAR 0 3
13041: PUSH
13042: LD_INT 103
13044: EQUAL
13045: IFFALSE 13055
// sFog := true ;
13047: LD_ADDR_EXP 68
13051: PUSH
13052: LD_INT 1
13054: ST_TO_ADDR
// if p3 = 104 then
13055: LD_VAR 0 3
13059: PUSH
13060: LD_INT 104
13062: EQUAL
13063: IFFALSE 13073
// sReset := true ;
13065: LD_ADDR_EXP 69
13069: PUSH
13070: LD_INT 1
13072: ST_TO_ADDR
// if p3 = 105 then
13073: LD_VAR 0 3
13077: PUSH
13078: LD_INT 105
13080: EQUAL
13081: IFFALSE 13091
// sSun := true ;
13083: LD_ADDR_EXP 70
13087: PUSH
13088: LD_INT 1
13090: ST_TO_ADDR
// if p3 = 106 then
13091: LD_VAR 0 3
13095: PUSH
13096: LD_INT 106
13098: EQUAL
13099: IFFALSE 13109
// sTiger := true ;
13101: LD_ADDR_EXP 66
13105: PUSH
13106: LD_INT 1
13108: ST_TO_ADDR
// if p3 = 107 then
13109: LD_VAR 0 3
13113: PUSH
13114: LD_INT 107
13116: EQUAL
13117: IFFALSE 13127
// sBomb := true ;
13119: LD_ADDR_EXP 67
13123: PUSH
13124: LD_INT 1
13126: ST_TO_ADDR
// if p3 = 108 then
13127: LD_VAR 0 3
13131: PUSH
13132: LD_INT 108
13134: EQUAL
13135: IFFALSE 13145
// sWound := true ;
13137: LD_ADDR_EXP 75
13141: PUSH
13142: LD_INT 1
13144: ST_TO_ADDR
// if p3 = 109 then
13145: LD_VAR 0 3
13149: PUSH
13150: LD_INT 109
13152: EQUAL
13153: IFFALSE 13163
// sBetray := true ;
13155: LD_ADDR_EXP 79
13159: PUSH
13160: LD_INT 1
13162: ST_TO_ADDR
// if p3 = 110 then
13163: LD_VAR 0 3
13167: PUSH
13168: LD_INT 110
13170: EQUAL
13171: IFFALSE 13181
// sContamin := true ;
13173: LD_ADDR_EXP 80
13177: PUSH
13178: LD_INT 1
13180: ST_TO_ADDR
// if p3 = 111 then
13181: LD_VAR 0 3
13185: PUSH
13186: LD_INT 111
13188: EQUAL
13189: IFFALSE 13199
// sOil := true ;
13191: LD_ADDR_EXP 82
13195: PUSH
13196: LD_INT 1
13198: ST_TO_ADDR
// if p3 = 112 then
13199: LD_VAR 0 3
13203: PUSH
13204: LD_INT 112
13206: EQUAL
13207: IFFALSE 13217
// sStu := true ;
13209: LD_ADDR_EXP 86
13213: PUSH
13214: LD_INT 1
13216: ST_TO_ADDR
// if p3 = 113 then
13217: LD_VAR 0 3
13221: PUSH
13222: LD_INT 113
13224: EQUAL
13225: IFFALSE 13235
// sBazooka := true ;
13227: LD_ADDR_EXP 89
13231: PUSH
13232: LD_INT 1
13234: ST_TO_ADDR
// if p3 = 114 then
13235: LD_VAR 0 3
13239: PUSH
13240: LD_INT 114
13242: EQUAL
13243: IFFALSE 13253
// sMortar := true ;
13245: LD_ADDR_EXP 90
13249: PUSH
13250: LD_INT 1
13252: ST_TO_ADDR
// if p3 = 115 then
13253: LD_VAR 0 3
13257: PUSH
13258: LD_INT 115
13260: EQUAL
13261: IFFALSE 13271
// sRanger := true ;
13263: LD_ADDR_EXP 100
13267: PUSH
13268: LD_INT 1
13270: ST_TO_ADDR
// end ; if p2 = 101 then
13271: LD_VAR 0 2
13275: PUSH
13276: LD_INT 101
13278: EQUAL
13279: IFFALSE 13482
// begin case p3 of 1 :
13281: LD_VAR 0 3
13285: PUSH
13286: LD_INT 1
13288: DOUBLE
13289: EQUAL
13290: IFTRUE 13294
13292: GO 13301
13294: POP
// hHackUnlimitedResources ; 2 :
13295: CALL 23576 0 0
13299: GO 13482
13301: LD_INT 2
13303: DOUBLE
13304: EQUAL
13305: IFTRUE 13309
13307: GO 13316
13309: POP
// hHackSetLevel10 ; 3 :
13310: CALL 23709 0 0
13314: GO 13482
13316: LD_INT 3
13318: DOUBLE
13319: EQUAL
13320: IFTRUE 13324
13322: GO 13331
13324: POP
// hHackSetLevel10YourUnits ; 4 :
13325: CALL 23794 0 0
13329: GO 13482
13331: LD_INT 4
13333: DOUBLE
13334: EQUAL
13335: IFTRUE 13339
13337: GO 13361
13339: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
13340: LD_VAR 0 4
13344: PPUSH
13345: LD_VAR 0 5
13349: PPUSH
13350: LD_VAR 0 6
13354: PPUSH
13355: CALL 23884 0 3
13359: GO 13482
13361: LD_INT 5
13363: DOUBLE
13364: EQUAL
13365: IFTRUE 13369
13367: GO 13376
13369: POP
// hHackSpawnVehicle ; 6 :
13370: CALL 23945 0 0
13374: GO 13482
13376: LD_INT 6
13378: DOUBLE
13379: EQUAL
13380: IFTRUE 13384
13382: GO 13391
13384: POP
// hHackInvincible ; 7 :
13385: CALL 24491 0 0
13389: GO 13482
13391: LD_INT 7
13393: DOUBLE
13394: EQUAL
13395: IFTRUE 13399
13397: GO 13406
13399: POP
// hHackInvisible ; 8 :
13400: CALL 24602 0 0
13404: GO 13482
13406: LD_INT 8
13408: DOUBLE
13409: EQUAL
13410: IFTRUE 13414
13412: GO 13421
13414: POP
// hHackChangeYourSide ; 9 :
13415: CALL 24659 0 0
13419: GO 13482
13421: LD_INT 9
13423: DOUBLE
13424: EQUAL
13425: IFTRUE 13429
13427: GO 13436
13429: POP
// hHackChangeUnitSide ; 10 :
13430: CALL 24701 0 0
13434: GO 13482
13436: LD_INT 10
13438: DOUBLE
13439: EQUAL
13440: IFTRUE 13444
13442: GO 13451
13444: POP
// hHackFog ; 11 :
13445: CALL 24802 0 0
13449: GO 13482
13451: LD_INT 11
13453: DOUBLE
13454: EQUAL
13455: IFTRUE 13459
13457: GO 13466
13459: POP
// hHackApeman ; 12 :
13460: CALL 24817 0 0
13464: GO 13482
13466: LD_INT 12
13468: DOUBLE
13469: EQUAL
13470: IFTRUE 13474
13472: GO 13481
13474: POP
// hHackBoom ; end ;
13475: CALL 24902 0 0
13479: GO 13482
13481: POP
// end ; end ;
13482: PPOPN 6
13484: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
13485: GO 13487
13487: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
13488: LD_STRING initStreamRollete();
13490: PPUSH
13491: CALL_OW 559
// InitStreamMode ;
13495: CALL 13504 0 0
// DefineStreamItems ( ) ;
13499: CALL 13944 0 0
// end ;
13503: END
// function InitStreamMode ; begin
13504: LD_INT 0
13506: PPUSH
// streamModeActive := false ;
13507: LD_ADDR_EXP 47
13511: PUSH
13512: LD_INT 0
13514: ST_TO_ADDR
// normalCounter := 36 ;
13515: LD_ADDR_EXP 48
13519: PUSH
13520: LD_INT 36
13522: ST_TO_ADDR
// hardcoreCounter := 16 ;
13523: LD_ADDR_EXP 49
13527: PUSH
13528: LD_INT 16
13530: ST_TO_ADDR
// sRocket := false ;
13531: LD_ADDR_EXP 52
13535: PUSH
13536: LD_INT 0
13538: ST_TO_ADDR
// sSpeed := false ;
13539: LD_ADDR_EXP 51
13543: PUSH
13544: LD_INT 0
13546: ST_TO_ADDR
// sEngine := false ;
13547: LD_ADDR_EXP 53
13551: PUSH
13552: LD_INT 0
13554: ST_TO_ADDR
// sSpec := false ;
13555: LD_ADDR_EXP 50
13559: PUSH
13560: LD_INT 0
13562: ST_TO_ADDR
// sLevel := false ;
13563: LD_ADDR_EXP 54
13567: PUSH
13568: LD_INT 0
13570: ST_TO_ADDR
// sArmoury := false ;
13571: LD_ADDR_EXP 55
13575: PUSH
13576: LD_INT 0
13578: ST_TO_ADDR
// sRadar := false ;
13579: LD_ADDR_EXP 56
13583: PUSH
13584: LD_INT 0
13586: ST_TO_ADDR
// sBunker := false ;
13587: LD_ADDR_EXP 57
13591: PUSH
13592: LD_INT 0
13594: ST_TO_ADDR
// sHack := false ;
13595: LD_ADDR_EXP 58
13599: PUSH
13600: LD_INT 0
13602: ST_TO_ADDR
// sFire := false ;
13603: LD_ADDR_EXP 59
13607: PUSH
13608: LD_INT 0
13610: ST_TO_ADDR
// sRefresh := false ;
13611: LD_ADDR_EXP 60
13615: PUSH
13616: LD_INT 0
13618: ST_TO_ADDR
// sExp := false ;
13619: LD_ADDR_EXP 61
13623: PUSH
13624: LD_INT 0
13626: ST_TO_ADDR
// sDepot := false ;
13627: LD_ADDR_EXP 62
13631: PUSH
13632: LD_INT 0
13634: ST_TO_ADDR
// sFlag := false ;
13635: LD_ADDR_EXP 63
13639: PUSH
13640: LD_INT 0
13642: ST_TO_ADDR
// sKamikadze := false ;
13643: LD_ADDR_EXP 71
13647: PUSH
13648: LD_INT 0
13650: ST_TO_ADDR
// sTroll := false ;
13651: LD_ADDR_EXP 72
13655: PUSH
13656: LD_INT 0
13658: ST_TO_ADDR
// sSlow := false ;
13659: LD_ADDR_EXP 73
13663: PUSH
13664: LD_INT 0
13666: ST_TO_ADDR
// sLack := false ;
13667: LD_ADDR_EXP 74
13671: PUSH
13672: LD_INT 0
13674: ST_TO_ADDR
// sTank := false ;
13675: LD_ADDR_EXP 76
13679: PUSH
13680: LD_INT 0
13682: ST_TO_ADDR
// sRemote := false ;
13683: LD_ADDR_EXP 77
13687: PUSH
13688: LD_INT 0
13690: ST_TO_ADDR
// sPowell := false ;
13691: LD_ADDR_EXP 78
13695: PUSH
13696: LD_INT 0
13698: ST_TO_ADDR
// sTeleport := false ;
13699: LD_ADDR_EXP 81
13703: PUSH
13704: LD_INT 0
13706: ST_TO_ADDR
// sOilTower := false ;
13707: LD_ADDR_EXP 83
13711: PUSH
13712: LD_INT 0
13714: ST_TO_ADDR
// sShovel := false ;
13715: LD_ADDR_EXP 84
13719: PUSH
13720: LD_INT 0
13722: ST_TO_ADDR
// sSheik := false ;
13723: LD_ADDR_EXP 85
13727: PUSH
13728: LD_INT 0
13730: ST_TO_ADDR
// sEarthquake := false ;
13731: LD_ADDR_EXP 87
13735: PUSH
13736: LD_INT 0
13738: ST_TO_ADDR
// sAI := false ;
13739: LD_ADDR_EXP 88
13743: PUSH
13744: LD_INT 0
13746: ST_TO_ADDR
// sCargo := false ;
13747: LD_ADDR_EXP 91
13751: PUSH
13752: LD_INT 0
13754: ST_TO_ADDR
// sDLaser := false ;
13755: LD_ADDR_EXP 92
13759: PUSH
13760: LD_INT 0
13762: ST_TO_ADDR
// sExchange := false ;
13763: LD_ADDR_EXP 93
13767: PUSH
13768: LD_INT 0
13770: ST_TO_ADDR
// sFac := false ;
13771: LD_ADDR_EXP 94
13775: PUSH
13776: LD_INT 0
13778: ST_TO_ADDR
// sPower := false ;
13779: LD_ADDR_EXP 95
13783: PUSH
13784: LD_INT 0
13786: ST_TO_ADDR
// sRandom := false ;
13787: LD_ADDR_EXP 96
13791: PUSH
13792: LD_INT 0
13794: ST_TO_ADDR
// sShield := false ;
13795: LD_ADDR_EXP 97
13799: PUSH
13800: LD_INT 0
13802: ST_TO_ADDR
// sTime := false ;
13803: LD_ADDR_EXP 98
13807: PUSH
13808: LD_INT 0
13810: ST_TO_ADDR
// sTools := false ;
13811: LD_ADDR_EXP 99
13815: PUSH
13816: LD_INT 0
13818: ST_TO_ADDR
// sSold := false ;
13819: LD_ADDR_EXP 64
13823: PUSH
13824: LD_INT 0
13826: ST_TO_ADDR
// sDiff := false ;
13827: LD_ADDR_EXP 65
13831: PUSH
13832: LD_INT 0
13834: ST_TO_ADDR
// sFog := false ;
13835: LD_ADDR_EXP 68
13839: PUSH
13840: LD_INT 0
13842: ST_TO_ADDR
// sReset := false ;
13843: LD_ADDR_EXP 69
13847: PUSH
13848: LD_INT 0
13850: ST_TO_ADDR
// sSun := false ;
13851: LD_ADDR_EXP 70
13855: PUSH
13856: LD_INT 0
13858: ST_TO_ADDR
// sTiger := false ;
13859: LD_ADDR_EXP 66
13863: PUSH
13864: LD_INT 0
13866: ST_TO_ADDR
// sBomb := false ;
13867: LD_ADDR_EXP 67
13871: PUSH
13872: LD_INT 0
13874: ST_TO_ADDR
// sWound := false ;
13875: LD_ADDR_EXP 75
13879: PUSH
13880: LD_INT 0
13882: ST_TO_ADDR
// sBetray := false ;
13883: LD_ADDR_EXP 79
13887: PUSH
13888: LD_INT 0
13890: ST_TO_ADDR
// sContamin := false ;
13891: LD_ADDR_EXP 80
13895: PUSH
13896: LD_INT 0
13898: ST_TO_ADDR
// sOil := false ;
13899: LD_ADDR_EXP 82
13903: PUSH
13904: LD_INT 0
13906: ST_TO_ADDR
// sStu := false ;
13907: LD_ADDR_EXP 86
13911: PUSH
13912: LD_INT 0
13914: ST_TO_ADDR
// sBazooka := false ;
13915: LD_ADDR_EXP 89
13919: PUSH
13920: LD_INT 0
13922: ST_TO_ADDR
// sMortar := false ;
13923: LD_ADDR_EXP 90
13927: PUSH
13928: LD_INT 0
13930: ST_TO_ADDR
// sRanger := false ;
13931: LD_ADDR_EXP 100
13935: PUSH
13936: LD_INT 0
13938: ST_TO_ADDR
// end ;
13939: LD_VAR 0 1
13943: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
13944: LD_INT 0
13946: PPUSH
13947: PPUSH
13948: PPUSH
13949: PPUSH
13950: PPUSH
// result := [ ] ;
13951: LD_ADDR_VAR 0 1
13955: PUSH
13956: EMPTY
13957: ST_TO_ADDR
// if campaign_id = 1 then
13958: LD_OWVAR 69
13962: PUSH
13963: LD_INT 1
13965: EQUAL
13966: IFFALSE 16904
// begin case mission_number of 1 :
13968: LD_OWVAR 70
13972: PUSH
13973: LD_INT 1
13975: DOUBLE
13976: EQUAL
13977: IFTRUE 13981
13979: GO 14045
13981: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
13982: LD_ADDR_VAR 0 1
13986: PUSH
13987: LD_INT 2
13989: PUSH
13990: LD_INT 4
13992: PUSH
13993: LD_INT 11
13995: PUSH
13996: LD_INT 12
13998: PUSH
13999: LD_INT 15
14001: PUSH
14002: LD_INT 16
14004: PUSH
14005: LD_INT 22
14007: PUSH
14008: LD_INT 23
14010: PUSH
14011: LD_INT 26
14013: PUSH
14014: EMPTY
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: PUSH
14025: LD_INT 101
14027: PUSH
14028: LD_INT 102
14030: PUSH
14031: LD_INT 106
14033: PUSH
14034: EMPTY
14035: LIST
14036: LIST
14037: LIST
14038: PUSH
14039: EMPTY
14040: LIST
14041: LIST
14042: ST_TO_ADDR
14043: GO 16902
14045: LD_INT 2
14047: DOUBLE
14048: EQUAL
14049: IFTRUE 14053
14051: GO 14125
14053: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
14054: LD_ADDR_VAR 0 1
14058: PUSH
14059: LD_INT 2
14061: PUSH
14062: LD_INT 4
14064: PUSH
14065: LD_INT 11
14067: PUSH
14068: LD_INT 12
14070: PUSH
14071: LD_INT 15
14073: PUSH
14074: LD_INT 16
14076: PUSH
14077: LD_INT 22
14079: PUSH
14080: LD_INT 23
14082: PUSH
14083: LD_INT 26
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: PUSH
14097: LD_INT 101
14099: PUSH
14100: LD_INT 102
14102: PUSH
14103: LD_INT 105
14105: PUSH
14106: LD_INT 106
14108: PUSH
14109: LD_INT 108
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: ST_TO_ADDR
14123: GO 16902
14125: LD_INT 3
14127: DOUBLE
14128: EQUAL
14129: IFTRUE 14133
14131: GO 14209
14133: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
14134: LD_ADDR_VAR 0 1
14138: PUSH
14139: LD_INT 2
14141: PUSH
14142: LD_INT 4
14144: PUSH
14145: LD_INT 5
14147: PUSH
14148: LD_INT 11
14150: PUSH
14151: LD_INT 12
14153: PUSH
14154: LD_INT 15
14156: PUSH
14157: LD_INT 16
14159: PUSH
14160: LD_INT 22
14162: PUSH
14163: LD_INT 26
14165: PUSH
14166: LD_INT 36
14168: PUSH
14169: EMPTY
14170: LIST
14171: LIST
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: PUSH
14181: LD_INT 101
14183: PUSH
14184: LD_INT 102
14186: PUSH
14187: LD_INT 105
14189: PUSH
14190: LD_INT 106
14192: PUSH
14193: LD_INT 108
14195: PUSH
14196: EMPTY
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: ST_TO_ADDR
14207: GO 16902
14209: LD_INT 4
14211: DOUBLE
14212: EQUAL
14213: IFTRUE 14217
14215: GO 14301
14217: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
14218: LD_ADDR_VAR 0 1
14222: PUSH
14223: LD_INT 2
14225: PUSH
14226: LD_INT 4
14228: PUSH
14229: LD_INT 5
14231: PUSH
14232: LD_INT 8
14234: PUSH
14235: LD_INT 11
14237: PUSH
14238: LD_INT 12
14240: PUSH
14241: LD_INT 15
14243: PUSH
14244: LD_INT 16
14246: PUSH
14247: LD_INT 22
14249: PUSH
14250: LD_INT 23
14252: PUSH
14253: LD_INT 26
14255: PUSH
14256: LD_INT 36
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: PUSH
14273: LD_INT 101
14275: PUSH
14276: LD_INT 102
14278: PUSH
14279: LD_INT 105
14281: PUSH
14282: LD_INT 106
14284: PUSH
14285: LD_INT 108
14287: PUSH
14288: EMPTY
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: PUSH
14295: EMPTY
14296: LIST
14297: LIST
14298: ST_TO_ADDR
14299: GO 16902
14301: LD_INT 5
14303: DOUBLE
14304: EQUAL
14305: IFTRUE 14309
14307: GO 14409
14309: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
14310: LD_ADDR_VAR 0 1
14314: PUSH
14315: LD_INT 2
14317: PUSH
14318: LD_INT 4
14320: PUSH
14321: LD_INT 5
14323: PUSH
14324: LD_INT 6
14326: PUSH
14327: LD_INT 8
14329: PUSH
14330: LD_INT 11
14332: PUSH
14333: LD_INT 12
14335: PUSH
14336: LD_INT 15
14338: PUSH
14339: LD_INT 16
14341: PUSH
14342: LD_INT 22
14344: PUSH
14345: LD_INT 23
14347: PUSH
14348: LD_INT 25
14350: PUSH
14351: LD_INT 26
14353: PUSH
14354: LD_INT 36
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: PUSH
14373: LD_INT 101
14375: PUSH
14376: LD_INT 102
14378: PUSH
14379: LD_INT 105
14381: PUSH
14382: LD_INT 106
14384: PUSH
14385: LD_INT 108
14387: PUSH
14388: LD_INT 109
14390: PUSH
14391: LD_INT 112
14393: PUSH
14394: EMPTY
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: PUSH
14403: EMPTY
14404: LIST
14405: LIST
14406: ST_TO_ADDR
14407: GO 16902
14409: LD_INT 6
14411: DOUBLE
14412: EQUAL
14413: IFTRUE 14417
14415: GO 14537
14417: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
14418: LD_ADDR_VAR 0 1
14422: PUSH
14423: LD_INT 2
14425: PUSH
14426: LD_INT 4
14428: PUSH
14429: LD_INT 5
14431: PUSH
14432: LD_INT 6
14434: PUSH
14435: LD_INT 8
14437: PUSH
14438: LD_INT 11
14440: PUSH
14441: LD_INT 12
14443: PUSH
14444: LD_INT 15
14446: PUSH
14447: LD_INT 16
14449: PUSH
14450: LD_INT 20
14452: PUSH
14453: LD_INT 21
14455: PUSH
14456: LD_INT 22
14458: PUSH
14459: LD_INT 23
14461: PUSH
14462: LD_INT 25
14464: PUSH
14465: LD_INT 26
14467: PUSH
14468: LD_INT 30
14470: PUSH
14471: LD_INT 31
14473: PUSH
14474: LD_INT 32
14476: PUSH
14477: LD_INT 36
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: PUSH
14501: LD_INT 101
14503: PUSH
14504: LD_INT 102
14506: PUSH
14507: LD_INT 105
14509: PUSH
14510: LD_INT 106
14512: PUSH
14513: LD_INT 108
14515: PUSH
14516: LD_INT 109
14518: PUSH
14519: LD_INT 112
14521: PUSH
14522: EMPTY
14523: LIST
14524: LIST
14525: LIST
14526: LIST
14527: LIST
14528: LIST
14529: LIST
14530: PUSH
14531: EMPTY
14532: LIST
14533: LIST
14534: ST_TO_ADDR
14535: GO 16902
14537: LD_INT 7
14539: DOUBLE
14540: EQUAL
14541: IFTRUE 14545
14543: GO 14645
14545: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
14546: LD_ADDR_VAR 0 1
14550: PUSH
14551: LD_INT 2
14553: PUSH
14554: LD_INT 4
14556: PUSH
14557: LD_INT 5
14559: PUSH
14560: LD_INT 7
14562: PUSH
14563: LD_INT 11
14565: PUSH
14566: LD_INT 12
14568: PUSH
14569: LD_INT 15
14571: PUSH
14572: LD_INT 16
14574: PUSH
14575: LD_INT 20
14577: PUSH
14578: LD_INT 21
14580: PUSH
14581: LD_INT 22
14583: PUSH
14584: LD_INT 23
14586: PUSH
14587: LD_INT 25
14589: PUSH
14590: LD_INT 26
14592: PUSH
14593: EMPTY
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: PUSH
14609: LD_INT 101
14611: PUSH
14612: LD_INT 102
14614: PUSH
14615: LD_INT 103
14617: PUSH
14618: LD_INT 105
14620: PUSH
14621: LD_INT 106
14623: PUSH
14624: LD_INT 108
14626: PUSH
14627: LD_INT 112
14629: PUSH
14630: EMPTY
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: ST_TO_ADDR
14643: GO 16902
14645: LD_INT 8
14647: DOUBLE
14648: EQUAL
14649: IFTRUE 14653
14651: GO 14781
14653: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
14654: LD_ADDR_VAR 0 1
14658: PUSH
14659: LD_INT 2
14661: PUSH
14662: LD_INT 4
14664: PUSH
14665: LD_INT 5
14667: PUSH
14668: LD_INT 6
14670: PUSH
14671: LD_INT 7
14673: PUSH
14674: LD_INT 8
14676: PUSH
14677: LD_INT 11
14679: PUSH
14680: LD_INT 12
14682: PUSH
14683: LD_INT 15
14685: PUSH
14686: LD_INT 16
14688: PUSH
14689: LD_INT 20
14691: PUSH
14692: LD_INT 21
14694: PUSH
14695: LD_INT 22
14697: PUSH
14698: LD_INT 23
14700: PUSH
14701: LD_INT 25
14703: PUSH
14704: LD_INT 26
14706: PUSH
14707: LD_INT 30
14709: PUSH
14710: LD_INT 31
14712: PUSH
14713: LD_INT 32
14715: PUSH
14716: LD_INT 36
14718: PUSH
14719: EMPTY
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: PUSH
14741: LD_INT 101
14743: PUSH
14744: LD_INT 102
14746: PUSH
14747: LD_INT 103
14749: PUSH
14750: LD_INT 105
14752: PUSH
14753: LD_INT 106
14755: PUSH
14756: LD_INT 108
14758: PUSH
14759: LD_INT 109
14761: PUSH
14762: LD_INT 112
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: PUSH
14775: EMPTY
14776: LIST
14777: LIST
14778: ST_TO_ADDR
14779: GO 16902
14781: LD_INT 9
14783: DOUBLE
14784: EQUAL
14785: IFTRUE 14789
14787: GO 14925
14789: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
14790: LD_ADDR_VAR 0 1
14794: PUSH
14795: LD_INT 2
14797: PUSH
14798: LD_INT 4
14800: PUSH
14801: LD_INT 5
14803: PUSH
14804: LD_INT 6
14806: PUSH
14807: LD_INT 7
14809: PUSH
14810: LD_INT 8
14812: PUSH
14813: LD_INT 11
14815: PUSH
14816: LD_INT 12
14818: PUSH
14819: LD_INT 15
14821: PUSH
14822: LD_INT 16
14824: PUSH
14825: LD_INT 20
14827: PUSH
14828: LD_INT 21
14830: PUSH
14831: LD_INT 22
14833: PUSH
14834: LD_INT 23
14836: PUSH
14837: LD_INT 25
14839: PUSH
14840: LD_INT 26
14842: PUSH
14843: LD_INT 28
14845: PUSH
14846: LD_INT 30
14848: PUSH
14849: LD_INT 31
14851: PUSH
14852: LD_INT 32
14854: PUSH
14855: LD_INT 36
14857: PUSH
14858: EMPTY
14859: LIST
14860: LIST
14861: LIST
14862: LIST
14863: LIST
14864: LIST
14865: LIST
14866: LIST
14867: LIST
14868: LIST
14869: LIST
14870: LIST
14871: LIST
14872: LIST
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: PUSH
14881: LD_INT 101
14883: PUSH
14884: LD_INT 102
14886: PUSH
14887: LD_INT 103
14889: PUSH
14890: LD_INT 105
14892: PUSH
14893: LD_INT 106
14895: PUSH
14896: LD_INT 108
14898: PUSH
14899: LD_INT 109
14901: PUSH
14902: LD_INT 112
14904: PUSH
14905: LD_INT 114
14907: PUSH
14908: EMPTY
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: PUSH
14919: EMPTY
14920: LIST
14921: LIST
14922: ST_TO_ADDR
14923: GO 16902
14925: LD_INT 10
14927: DOUBLE
14928: EQUAL
14929: IFTRUE 14933
14931: GO 15117
14933: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
14934: LD_ADDR_VAR 0 1
14938: PUSH
14939: LD_INT 2
14941: PUSH
14942: LD_INT 4
14944: PUSH
14945: LD_INT 5
14947: PUSH
14948: LD_INT 6
14950: PUSH
14951: LD_INT 7
14953: PUSH
14954: LD_INT 8
14956: PUSH
14957: LD_INT 9
14959: PUSH
14960: LD_INT 10
14962: PUSH
14963: LD_INT 11
14965: PUSH
14966: LD_INT 12
14968: PUSH
14969: LD_INT 13
14971: PUSH
14972: LD_INT 14
14974: PUSH
14975: LD_INT 15
14977: PUSH
14978: LD_INT 16
14980: PUSH
14981: LD_INT 17
14983: PUSH
14984: LD_INT 18
14986: PUSH
14987: LD_INT 19
14989: PUSH
14990: LD_INT 20
14992: PUSH
14993: LD_INT 21
14995: PUSH
14996: LD_INT 22
14998: PUSH
14999: LD_INT 23
15001: PUSH
15002: LD_INT 24
15004: PUSH
15005: LD_INT 25
15007: PUSH
15008: LD_INT 26
15010: PUSH
15011: LD_INT 28
15013: PUSH
15014: LD_INT 30
15016: PUSH
15017: LD_INT 31
15019: PUSH
15020: LD_INT 32
15022: PUSH
15023: LD_INT 36
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: LIST
15054: LIST
15055: LIST
15056: PUSH
15057: LD_INT 101
15059: PUSH
15060: LD_INT 102
15062: PUSH
15063: LD_INT 103
15065: PUSH
15066: LD_INT 104
15068: PUSH
15069: LD_INT 105
15071: PUSH
15072: LD_INT 106
15074: PUSH
15075: LD_INT 107
15077: PUSH
15078: LD_INT 108
15080: PUSH
15081: LD_INT 109
15083: PUSH
15084: LD_INT 110
15086: PUSH
15087: LD_INT 111
15089: PUSH
15090: LD_INT 112
15092: PUSH
15093: LD_INT 114
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: LIST
15110: PUSH
15111: EMPTY
15112: LIST
15113: LIST
15114: ST_TO_ADDR
15115: GO 16902
15117: LD_INT 11
15119: DOUBLE
15120: EQUAL
15121: IFTRUE 15125
15123: GO 15317
15125: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
15126: LD_ADDR_VAR 0 1
15130: PUSH
15131: LD_INT 2
15133: PUSH
15134: LD_INT 3
15136: PUSH
15137: LD_INT 4
15139: PUSH
15140: LD_INT 5
15142: PUSH
15143: LD_INT 6
15145: PUSH
15146: LD_INT 7
15148: PUSH
15149: LD_INT 8
15151: PUSH
15152: LD_INT 9
15154: PUSH
15155: LD_INT 10
15157: PUSH
15158: LD_INT 11
15160: PUSH
15161: LD_INT 12
15163: PUSH
15164: LD_INT 13
15166: PUSH
15167: LD_INT 14
15169: PUSH
15170: LD_INT 15
15172: PUSH
15173: LD_INT 16
15175: PUSH
15176: LD_INT 17
15178: PUSH
15179: LD_INT 18
15181: PUSH
15182: LD_INT 19
15184: PUSH
15185: LD_INT 20
15187: PUSH
15188: LD_INT 21
15190: PUSH
15191: LD_INT 22
15193: PUSH
15194: LD_INT 23
15196: PUSH
15197: LD_INT 24
15199: PUSH
15200: LD_INT 25
15202: PUSH
15203: LD_INT 26
15205: PUSH
15206: LD_INT 28
15208: PUSH
15209: LD_INT 30
15211: PUSH
15212: LD_INT 31
15214: PUSH
15215: LD_INT 32
15217: PUSH
15218: LD_INT 34
15220: PUSH
15221: LD_INT 36
15223: PUSH
15224: EMPTY
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: PUSH
15257: LD_INT 101
15259: PUSH
15260: LD_INT 102
15262: PUSH
15263: LD_INT 103
15265: PUSH
15266: LD_INT 104
15268: PUSH
15269: LD_INT 105
15271: PUSH
15272: LD_INT 106
15274: PUSH
15275: LD_INT 107
15277: PUSH
15278: LD_INT 108
15280: PUSH
15281: LD_INT 109
15283: PUSH
15284: LD_INT 110
15286: PUSH
15287: LD_INT 111
15289: PUSH
15290: LD_INT 112
15292: PUSH
15293: LD_INT 114
15295: PUSH
15296: EMPTY
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: PUSH
15311: EMPTY
15312: LIST
15313: LIST
15314: ST_TO_ADDR
15315: GO 16902
15317: LD_INT 12
15319: DOUBLE
15320: EQUAL
15321: IFTRUE 15325
15323: GO 15533
15325: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
15326: LD_ADDR_VAR 0 1
15330: PUSH
15331: LD_INT 1
15333: PUSH
15334: LD_INT 2
15336: PUSH
15337: LD_INT 3
15339: PUSH
15340: LD_INT 4
15342: PUSH
15343: LD_INT 5
15345: PUSH
15346: LD_INT 6
15348: PUSH
15349: LD_INT 7
15351: PUSH
15352: LD_INT 8
15354: PUSH
15355: LD_INT 9
15357: PUSH
15358: LD_INT 10
15360: PUSH
15361: LD_INT 11
15363: PUSH
15364: LD_INT 12
15366: PUSH
15367: LD_INT 13
15369: PUSH
15370: LD_INT 14
15372: PUSH
15373: LD_INT 15
15375: PUSH
15376: LD_INT 16
15378: PUSH
15379: LD_INT 17
15381: PUSH
15382: LD_INT 18
15384: PUSH
15385: LD_INT 19
15387: PUSH
15388: LD_INT 20
15390: PUSH
15391: LD_INT 21
15393: PUSH
15394: LD_INT 22
15396: PUSH
15397: LD_INT 23
15399: PUSH
15400: LD_INT 24
15402: PUSH
15403: LD_INT 25
15405: PUSH
15406: LD_INT 26
15408: PUSH
15409: LD_INT 27
15411: PUSH
15412: LD_INT 28
15414: PUSH
15415: LD_INT 30
15417: PUSH
15418: LD_INT 31
15420: PUSH
15421: LD_INT 32
15423: PUSH
15424: LD_INT 33
15426: PUSH
15427: LD_INT 34
15429: PUSH
15430: LD_INT 36
15432: PUSH
15433: EMPTY
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: PUSH
15469: LD_INT 101
15471: PUSH
15472: LD_INT 102
15474: PUSH
15475: LD_INT 103
15477: PUSH
15478: LD_INT 104
15480: PUSH
15481: LD_INT 105
15483: PUSH
15484: LD_INT 106
15486: PUSH
15487: LD_INT 107
15489: PUSH
15490: LD_INT 108
15492: PUSH
15493: LD_INT 109
15495: PUSH
15496: LD_INT 110
15498: PUSH
15499: LD_INT 111
15501: PUSH
15502: LD_INT 112
15504: PUSH
15505: LD_INT 113
15507: PUSH
15508: LD_INT 114
15510: PUSH
15511: EMPTY
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: ST_TO_ADDR
15531: GO 16902
15533: LD_INT 13
15535: DOUBLE
15536: EQUAL
15537: IFTRUE 15541
15539: GO 15737
15541: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
15542: LD_ADDR_VAR 0 1
15546: PUSH
15547: LD_INT 1
15549: PUSH
15550: LD_INT 2
15552: PUSH
15553: LD_INT 3
15555: PUSH
15556: LD_INT 4
15558: PUSH
15559: LD_INT 5
15561: PUSH
15562: LD_INT 8
15564: PUSH
15565: LD_INT 9
15567: PUSH
15568: LD_INT 10
15570: PUSH
15571: LD_INT 11
15573: PUSH
15574: LD_INT 12
15576: PUSH
15577: LD_INT 14
15579: PUSH
15580: LD_INT 15
15582: PUSH
15583: LD_INT 16
15585: PUSH
15586: LD_INT 17
15588: PUSH
15589: LD_INT 18
15591: PUSH
15592: LD_INT 19
15594: PUSH
15595: LD_INT 20
15597: PUSH
15598: LD_INT 21
15600: PUSH
15601: LD_INT 22
15603: PUSH
15604: LD_INT 23
15606: PUSH
15607: LD_INT 24
15609: PUSH
15610: LD_INT 25
15612: PUSH
15613: LD_INT 26
15615: PUSH
15616: LD_INT 27
15618: PUSH
15619: LD_INT 28
15621: PUSH
15622: LD_INT 30
15624: PUSH
15625: LD_INT 31
15627: PUSH
15628: LD_INT 32
15630: PUSH
15631: LD_INT 33
15633: PUSH
15634: LD_INT 34
15636: PUSH
15637: LD_INT 36
15639: PUSH
15640: EMPTY
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: PUSH
15673: LD_INT 101
15675: PUSH
15676: LD_INT 102
15678: PUSH
15679: LD_INT 103
15681: PUSH
15682: LD_INT 104
15684: PUSH
15685: LD_INT 105
15687: PUSH
15688: LD_INT 106
15690: PUSH
15691: LD_INT 107
15693: PUSH
15694: LD_INT 108
15696: PUSH
15697: LD_INT 109
15699: PUSH
15700: LD_INT 110
15702: PUSH
15703: LD_INT 111
15705: PUSH
15706: LD_INT 112
15708: PUSH
15709: LD_INT 113
15711: PUSH
15712: LD_INT 114
15714: PUSH
15715: EMPTY
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: PUSH
15731: EMPTY
15732: LIST
15733: LIST
15734: ST_TO_ADDR
15735: GO 16902
15737: LD_INT 14
15739: DOUBLE
15740: EQUAL
15741: IFTRUE 15745
15743: GO 15957
15745: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
15746: LD_ADDR_VAR 0 1
15750: PUSH
15751: LD_INT 1
15753: PUSH
15754: LD_INT 2
15756: PUSH
15757: LD_INT 3
15759: PUSH
15760: LD_INT 4
15762: PUSH
15763: LD_INT 5
15765: PUSH
15766: LD_INT 6
15768: PUSH
15769: LD_INT 7
15771: PUSH
15772: LD_INT 8
15774: PUSH
15775: LD_INT 9
15777: PUSH
15778: LD_INT 10
15780: PUSH
15781: LD_INT 11
15783: PUSH
15784: LD_INT 12
15786: PUSH
15787: LD_INT 13
15789: PUSH
15790: LD_INT 14
15792: PUSH
15793: LD_INT 15
15795: PUSH
15796: LD_INT 16
15798: PUSH
15799: LD_INT 17
15801: PUSH
15802: LD_INT 18
15804: PUSH
15805: LD_INT 19
15807: PUSH
15808: LD_INT 20
15810: PUSH
15811: LD_INT 21
15813: PUSH
15814: LD_INT 22
15816: PUSH
15817: LD_INT 23
15819: PUSH
15820: LD_INT 24
15822: PUSH
15823: LD_INT 25
15825: PUSH
15826: LD_INT 26
15828: PUSH
15829: LD_INT 27
15831: PUSH
15832: LD_INT 28
15834: PUSH
15835: LD_INT 29
15837: PUSH
15838: LD_INT 30
15840: PUSH
15841: LD_INT 31
15843: PUSH
15844: LD_INT 32
15846: PUSH
15847: LD_INT 33
15849: PUSH
15850: LD_INT 34
15852: PUSH
15853: LD_INT 36
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: LIST
15888: LIST
15889: LIST
15890: LIST
15891: LIST
15892: PUSH
15893: LD_INT 101
15895: PUSH
15896: LD_INT 102
15898: PUSH
15899: LD_INT 103
15901: PUSH
15902: LD_INT 104
15904: PUSH
15905: LD_INT 105
15907: PUSH
15908: LD_INT 106
15910: PUSH
15911: LD_INT 107
15913: PUSH
15914: LD_INT 108
15916: PUSH
15917: LD_INT 109
15919: PUSH
15920: LD_INT 110
15922: PUSH
15923: LD_INT 111
15925: PUSH
15926: LD_INT 112
15928: PUSH
15929: LD_INT 113
15931: PUSH
15932: LD_INT 114
15934: PUSH
15935: EMPTY
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: ST_TO_ADDR
15955: GO 16902
15957: LD_INT 15
15959: DOUBLE
15960: EQUAL
15961: IFTRUE 15965
15963: GO 16177
15965: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
15966: LD_ADDR_VAR 0 1
15970: PUSH
15971: LD_INT 1
15973: PUSH
15974: LD_INT 2
15976: PUSH
15977: LD_INT 3
15979: PUSH
15980: LD_INT 4
15982: PUSH
15983: LD_INT 5
15985: PUSH
15986: LD_INT 6
15988: PUSH
15989: LD_INT 7
15991: PUSH
15992: LD_INT 8
15994: PUSH
15995: LD_INT 9
15997: PUSH
15998: LD_INT 10
16000: PUSH
16001: LD_INT 11
16003: PUSH
16004: LD_INT 12
16006: PUSH
16007: LD_INT 13
16009: PUSH
16010: LD_INT 14
16012: PUSH
16013: LD_INT 15
16015: PUSH
16016: LD_INT 16
16018: PUSH
16019: LD_INT 17
16021: PUSH
16022: LD_INT 18
16024: PUSH
16025: LD_INT 19
16027: PUSH
16028: LD_INT 20
16030: PUSH
16031: LD_INT 21
16033: PUSH
16034: LD_INT 22
16036: PUSH
16037: LD_INT 23
16039: PUSH
16040: LD_INT 24
16042: PUSH
16043: LD_INT 25
16045: PUSH
16046: LD_INT 26
16048: PUSH
16049: LD_INT 27
16051: PUSH
16052: LD_INT 28
16054: PUSH
16055: LD_INT 29
16057: PUSH
16058: LD_INT 30
16060: PUSH
16061: LD_INT 31
16063: PUSH
16064: LD_INT 32
16066: PUSH
16067: LD_INT 33
16069: PUSH
16070: LD_INT 34
16072: PUSH
16073: LD_INT 36
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: PUSH
16113: LD_INT 101
16115: PUSH
16116: LD_INT 102
16118: PUSH
16119: LD_INT 103
16121: PUSH
16122: LD_INT 104
16124: PUSH
16125: LD_INT 105
16127: PUSH
16128: LD_INT 106
16130: PUSH
16131: LD_INT 107
16133: PUSH
16134: LD_INT 108
16136: PUSH
16137: LD_INT 109
16139: PUSH
16140: LD_INT 110
16142: PUSH
16143: LD_INT 111
16145: PUSH
16146: LD_INT 112
16148: PUSH
16149: LD_INT 113
16151: PUSH
16152: LD_INT 114
16154: PUSH
16155: EMPTY
16156: LIST
16157: LIST
16158: LIST
16159: LIST
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: PUSH
16171: EMPTY
16172: LIST
16173: LIST
16174: ST_TO_ADDR
16175: GO 16902
16177: LD_INT 16
16179: DOUBLE
16180: EQUAL
16181: IFTRUE 16185
16183: GO 16309
16185: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
16186: LD_ADDR_VAR 0 1
16190: PUSH
16191: LD_INT 2
16193: PUSH
16194: LD_INT 4
16196: PUSH
16197: LD_INT 5
16199: PUSH
16200: LD_INT 7
16202: PUSH
16203: LD_INT 11
16205: PUSH
16206: LD_INT 12
16208: PUSH
16209: LD_INT 15
16211: PUSH
16212: LD_INT 16
16214: PUSH
16215: LD_INT 20
16217: PUSH
16218: LD_INT 21
16220: PUSH
16221: LD_INT 22
16223: PUSH
16224: LD_INT 23
16226: PUSH
16227: LD_INT 25
16229: PUSH
16230: LD_INT 26
16232: PUSH
16233: LD_INT 30
16235: PUSH
16236: LD_INT 31
16238: PUSH
16239: LD_INT 32
16241: PUSH
16242: LD_INT 33
16244: PUSH
16245: LD_INT 34
16247: PUSH
16248: EMPTY
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: LIST
16268: PUSH
16269: LD_INT 101
16271: PUSH
16272: LD_INT 102
16274: PUSH
16275: LD_INT 103
16277: PUSH
16278: LD_INT 106
16280: PUSH
16281: LD_INT 108
16283: PUSH
16284: LD_INT 112
16286: PUSH
16287: LD_INT 113
16289: PUSH
16290: LD_INT 114
16292: PUSH
16293: EMPTY
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: PUSH
16303: EMPTY
16304: LIST
16305: LIST
16306: ST_TO_ADDR
16307: GO 16902
16309: LD_INT 17
16311: DOUBLE
16312: EQUAL
16313: IFTRUE 16317
16315: GO 16529
16317: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
16318: LD_ADDR_VAR 0 1
16322: PUSH
16323: LD_INT 1
16325: PUSH
16326: LD_INT 2
16328: PUSH
16329: LD_INT 3
16331: PUSH
16332: LD_INT 4
16334: PUSH
16335: LD_INT 5
16337: PUSH
16338: LD_INT 6
16340: PUSH
16341: LD_INT 7
16343: PUSH
16344: LD_INT 8
16346: PUSH
16347: LD_INT 9
16349: PUSH
16350: LD_INT 10
16352: PUSH
16353: LD_INT 11
16355: PUSH
16356: LD_INT 12
16358: PUSH
16359: LD_INT 13
16361: PUSH
16362: LD_INT 14
16364: PUSH
16365: LD_INT 15
16367: PUSH
16368: LD_INT 16
16370: PUSH
16371: LD_INT 17
16373: PUSH
16374: LD_INT 18
16376: PUSH
16377: LD_INT 19
16379: PUSH
16380: LD_INT 20
16382: PUSH
16383: LD_INT 21
16385: PUSH
16386: LD_INT 22
16388: PUSH
16389: LD_INT 23
16391: PUSH
16392: LD_INT 24
16394: PUSH
16395: LD_INT 25
16397: PUSH
16398: LD_INT 26
16400: PUSH
16401: LD_INT 27
16403: PUSH
16404: LD_INT 28
16406: PUSH
16407: LD_INT 29
16409: PUSH
16410: LD_INT 30
16412: PUSH
16413: LD_INT 31
16415: PUSH
16416: LD_INT 32
16418: PUSH
16419: LD_INT 33
16421: PUSH
16422: LD_INT 34
16424: PUSH
16425: LD_INT 36
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: LIST
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: PUSH
16465: LD_INT 101
16467: PUSH
16468: LD_INT 102
16470: PUSH
16471: LD_INT 103
16473: PUSH
16474: LD_INT 104
16476: PUSH
16477: LD_INT 105
16479: PUSH
16480: LD_INT 106
16482: PUSH
16483: LD_INT 107
16485: PUSH
16486: LD_INT 108
16488: PUSH
16489: LD_INT 109
16491: PUSH
16492: LD_INT 110
16494: PUSH
16495: LD_INT 111
16497: PUSH
16498: LD_INT 112
16500: PUSH
16501: LD_INT 113
16503: PUSH
16504: LD_INT 114
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: ST_TO_ADDR
16527: GO 16902
16529: LD_INT 18
16531: DOUBLE
16532: EQUAL
16533: IFTRUE 16537
16535: GO 16673
16537: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
16538: LD_ADDR_VAR 0 1
16542: PUSH
16543: LD_INT 2
16545: PUSH
16546: LD_INT 4
16548: PUSH
16549: LD_INT 5
16551: PUSH
16552: LD_INT 7
16554: PUSH
16555: LD_INT 11
16557: PUSH
16558: LD_INT 12
16560: PUSH
16561: LD_INT 15
16563: PUSH
16564: LD_INT 16
16566: PUSH
16567: LD_INT 20
16569: PUSH
16570: LD_INT 21
16572: PUSH
16573: LD_INT 22
16575: PUSH
16576: LD_INT 23
16578: PUSH
16579: LD_INT 25
16581: PUSH
16582: LD_INT 26
16584: PUSH
16585: LD_INT 30
16587: PUSH
16588: LD_INT 31
16590: PUSH
16591: LD_INT 32
16593: PUSH
16594: LD_INT 33
16596: PUSH
16597: LD_INT 34
16599: PUSH
16600: LD_INT 35
16602: PUSH
16603: LD_INT 36
16605: PUSH
16606: EMPTY
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: LIST
16614: LIST
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: LIST
16623: LIST
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: PUSH
16629: LD_INT 101
16631: PUSH
16632: LD_INT 102
16634: PUSH
16635: LD_INT 103
16637: PUSH
16638: LD_INT 106
16640: PUSH
16641: LD_INT 108
16643: PUSH
16644: LD_INT 112
16646: PUSH
16647: LD_INT 113
16649: PUSH
16650: LD_INT 114
16652: PUSH
16653: LD_INT 115
16655: PUSH
16656: EMPTY
16657: LIST
16658: LIST
16659: LIST
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: PUSH
16667: EMPTY
16668: LIST
16669: LIST
16670: ST_TO_ADDR
16671: GO 16902
16673: LD_INT 19
16675: DOUBLE
16676: EQUAL
16677: IFTRUE 16681
16679: GO 16901
16681: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
16682: LD_ADDR_VAR 0 1
16686: PUSH
16687: LD_INT 1
16689: PUSH
16690: LD_INT 2
16692: PUSH
16693: LD_INT 3
16695: PUSH
16696: LD_INT 4
16698: PUSH
16699: LD_INT 5
16701: PUSH
16702: LD_INT 6
16704: PUSH
16705: LD_INT 7
16707: PUSH
16708: LD_INT 8
16710: PUSH
16711: LD_INT 9
16713: PUSH
16714: LD_INT 10
16716: PUSH
16717: LD_INT 11
16719: PUSH
16720: LD_INT 12
16722: PUSH
16723: LD_INT 13
16725: PUSH
16726: LD_INT 14
16728: PUSH
16729: LD_INT 15
16731: PUSH
16732: LD_INT 16
16734: PUSH
16735: LD_INT 17
16737: PUSH
16738: LD_INT 18
16740: PUSH
16741: LD_INT 19
16743: PUSH
16744: LD_INT 20
16746: PUSH
16747: LD_INT 21
16749: PUSH
16750: LD_INT 22
16752: PUSH
16753: LD_INT 23
16755: PUSH
16756: LD_INT 24
16758: PUSH
16759: LD_INT 25
16761: PUSH
16762: LD_INT 26
16764: PUSH
16765: LD_INT 27
16767: PUSH
16768: LD_INT 28
16770: PUSH
16771: LD_INT 29
16773: PUSH
16774: LD_INT 30
16776: PUSH
16777: LD_INT 31
16779: PUSH
16780: LD_INT 32
16782: PUSH
16783: LD_INT 33
16785: PUSH
16786: LD_INT 34
16788: PUSH
16789: LD_INT 35
16791: PUSH
16792: LD_INT 36
16794: PUSH
16795: EMPTY
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: PUSH
16833: LD_INT 101
16835: PUSH
16836: LD_INT 102
16838: PUSH
16839: LD_INT 103
16841: PUSH
16842: LD_INT 104
16844: PUSH
16845: LD_INT 105
16847: PUSH
16848: LD_INT 106
16850: PUSH
16851: LD_INT 107
16853: PUSH
16854: LD_INT 108
16856: PUSH
16857: LD_INT 109
16859: PUSH
16860: LD_INT 110
16862: PUSH
16863: LD_INT 111
16865: PUSH
16866: LD_INT 112
16868: PUSH
16869: LD_INT 113
16871: PUSH
16872: LD_INT 114
16874: PUSH
16875: LD_INT 115
16877: PUSH
16878: EMPTY
16879: LIST
16880: LIST
16881: LIST
16882: LIST
16883: LIST
16884: LIST
16885: LIST
16886: LIST
16887: LIST
16888: LIST
16889: LIST
16890: LIST
16891: LIST
16892: LIST
16893: LIST
16894: PUSH
16895: EMPTY
16896: LIST
16897: LIST
16898: ST_TO_ADDR
16899: GO 16902
16901: POP
// end else
16902: GO 17121
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
16904: LD_ADDR_VAR 0 1
16908: PUSH
16909: LD_INT 1
16911: PUSH
16912: LD_INT 2
16914: PUSH
16915: LD_INT 3
16917: PUSH
16918: LD_INT 4
16920: PUSH
16921: LD_INT 5
16923: PUSH
16924: LD_INT 6
16926: PUSH
16927: LD_INT 7
16929: PUSH
16930: LD_INT 8
16932: PUSH
16933: LD_INT 9
16935: PUSH
16936: LD_INT 10
16938: PUSH
16939: LD_INT 11
16941: PUSH
16942: LD_INT 12
16944: PUSH
16945: LD_INT 13
16947: PUSH
16948: LD_INT 14
16950: PUSH
16951: LD_INT 15
16953: PUSH
16954: LD_INT 16
16956: PUSH
16957: LD_INT 17
16959: PUSH
16960: LD_INT 18
16962: PUSH
16963: LD_INT 19
16965: PUSH
16966: LD_INT 20
16968: PUSH
16969: LD_INT 21
16971: PUSH
16972: LD_INT 22
16974: PUSH
16975: LD_INT 23
16977: PUSH
16978: LD_INT 24
16980: PUSH
16981: LD_INT 25
16983: PUSH
16984: LD_INT 26
16986: PUSH
16987: LD_INT 27
16989: PUSH
16990: LD_INT 28
16992: PUSH
16993: LD_INT 29
16995: PUSH
16996: LD_INT 30
16998: PUSH
16999: LD_INT 31
17001: PUSH
17002: LD_INT 32
17004: PUSH
17005: LD_INT 33
17007: PUSH
17008: LD_INT 34
17010: PUSH
17011: LD_INT 35
17013: PUSH
17014: LD_INT 36
17016: PUSH
17017: EMPTY
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: PUSH
17055: LD_INT 101
17057: PUSH
17058: LD_INT 102
17060: PUSH
17061: LD_INT 103
17063: PUSH
17064: LD_INT 104
17066: PUSH
17067: LD_INT 105
17069: PUSH
17070: LD_INT 106
17072: PUSH
17073: LD_INT 107
17075: PUSH
17076: LD_INT 108
17078: PUSH
17079: LD_INT 109
17081: PUSH
17082: LD_INT 110
17084: PUSH
17085: LD_INT 111
17087: PUSH
17088: LD_INT 112
17090: PUSH
17091: LD_INT 113
17093: PUSH
17094: LD_INT 114
17096: PUSH
17097: LD_INT 115
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: LIST
17104: LIST
17105: LIST
17106: LIST
17107: LIST
17108: LIST
17109: LIST
17110: LIST
17111: LIST
17112: LIST
17113: LIST
17114: LIST
17115: LIST
17116: PUSH
17117: EMPTY
17118: LIST
17119: LIST
17120: ST_TO_ADDR
// if result then
17121: LD_VAR 0 1
17125: IFFALSE 17414
// begin normal :=  ;
17127: LD_ADDR_VAR 0 3
17131: PUSH
17132: LD_STRING 
17134: ST_TO_ADDR
// hardcore :=  ;
17135: LD_ADDR_VAR 0 4
17139: PUSH
17140: LD_STRING 
17142: ST_TO_ADDR
// for i = 1 to normalCounter do
17143: LD_ADDR_VAR 0 5
17147: PUSH
17148: DOUBLE
17149: LD_INT 1
17151: DEC
17152: ST_TO_ADDR
17153: LD_EXP 48
17157: PUSH
17158: FOR_TO
17159: IFFALSE 17260
// begin tmp := 0 ;
17161: LD_ADDR_VAR 0 2
17165: PUSH
17166: LD_STRING 0
17168: ST_TO_ADDR
// if result [ 1 ] then
17169: LD_VAR 0 1
17173: PUSH
17174: LD_INT 1
17176: ARRAY
17177: IFFALSE 17242
// if result [ 1 ] [ 1 ] = i then
17179: LD_VAR 0 1
17183: PUSH
17184: LD_INT 1
17186: ARRAY
17187: PUSH
17188: LD_INT 1
17190: ARRAY
17191: PUSH
17192: LD_VAR 0 5
17196: EQUAL
17197: IFFALSE 17242
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
17199: LD_ADDR_VAR 0 1
17203: PUSH
17204: LD_VAR 0 1
17208: PPUSH
17209: LD_INT 1
17211: PPUSH
17212: LD_VAR 0 1
17216: PUSH
17217: LD_INT 1
17219: ARRAY
17220: PPUSH
17221: LD_INT 1
17223: PPUSH
17224: CALL_OW 3
17228: PPUSH
17229: CALL_OW 1
17233: ST_TO_ADDR
// tmp := 1 ;
17234: LD_ADDR_VAR 0 2
17238: PUSH
17239: LD_STRING 1
17241: ST_TO_ADDR
// end ; normal := normal & tmp ;
17242: LD_ADDR_VAR 0 3
17246: PUSH
17247: LD_VAR 0 3
17251: PUSH
17252: LD_VAR 0 2
17256: STR
17257: ST_TO_ADDR
// end ;
17258: GO 17158
17260: POP
17261: POP
// for i = 1 to hardcoreCounter do
17262: LD_ADDR_VAR 0 5
17266: PUSH
17267: DOUBLE
17268: LD_INT 1
17270: DEC
17271: ST_TO_ADDR
17272: LD_EXP 49
17276: PUSH
17277: FOR_TO
17278: IFFALSE 17383
// begin tmp := 0 ;
17280: LD_ADDR_VAR 0 2
17284: PUSH
17285: LD_STRING 0
17287: ST_TO_ADDR
// if result [ 2 ] then
17288: LD_VAR 0 1
17292: PUSH
17293: LD_INT 2
17295: ARRAY
17296: IFFALSE 17365
// if result [ 2 ] [ 1 ] = 100 + i then
17298: LD_VAR 0 1
17302: PUSH
17303: LD_INT 2
17305: ARRAY
17306: PUSH
17307: LD_INT 1
17309: ARRAY
17310: PUSH
17311: LD_INT 100
17313: PUSH
17314: LD_VAR 0 5
17318: PLUS
17319: EQUAL
17320: IFFALSE 17365
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17322: LD_ADDR_VAR 0 1
17326: PUSH
17327: LD_VAR 0 1
17331: PPUSH
17332: LD_INT 2
17334: PPUSH
17335: LD_VAR 0 1
17339: PUSH
17340: LD_INT 2
17342: ARRAY
17343: PPUSH
17344: LD_INT 1
17346: PPUSH
17347: CALL_OW 3
17351: PPUSH
17352: CALL_OW 1
17356: ST_TO_ADDR
// tmp := 1 ;
17357: LD_ADDR_VAR 0 2
17361: PUSH
17362: LD_STRING 1
17364: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17365: LD_ADDR_VAR 0 4
17369: PUSH
17370: LD_VAR 0 4
17374: PUSH
17375: LD_VAR 0 2
17379: STR
17380: ST_TO_ADDR
// end ;
17381: GO 17277
17383: POP
17384: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
17385: LD_STRING getStreamItemsFromMission("
17387: PUSH
17388: LD_VAR 0 3
17392: STR
17393: PUSH
17394: LD_STRING ","
17396: STR
17397: PUSH
17398: LD_VAR 0 4
17402: STR
17403: PUSH
17404: LD_STRING ")
17406: STR
17407: PPUSH
17408: CALL_OW 559
// end else
17412: GO 17421
// ToLua ( getStreamItemsFromMission("","") ) ;
17414: LD_STRING getStreamItemsFromMission("","")
17416: PPUSH
17417: CALL_OW 559
// end ;
17421: LD_VAR 0 1
17425: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17426: LD_EXP 47
17430: PUSH
17431: LD_EXP 52
17435: AND
17436: IFFALSE 17560
17438: GO 17440
17440: DISABLE
17441: LD_INT 0
17443: PPUSH
17444: PPUSH
// begin enable ;
17445: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17446: LD_ADDR_VAR 0 2
17450: PUSH
17451: LD_INT 22
17453: PUSH
17454: LD_OWVAR 2
17458: PUSH
17459: EMPTY
17460: LIST
17461: LIST
17462: PUSH
17463: LD_INT 2
17465: PUSH
17466: LD_INT 34
17468: PUSH
17469: LD_INT 7
17471: PUSH
17472: EMPTY
17473: LIST
17474: LIST
17475: PUSH
17476: LD_INT 34
17478: PUSH
17479: LD_INT 45
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: PUSH
17486: LD_INT 34
17488: PUSH
17489: LD_INT 28
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: PUSH
17496: LD_INT 34
17498: PUSH
17499: LD_INT 47
17501: PUSH
17502: EMPTY
17503: LIST
17504: LIST
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: LIST
17510: LIST
17511: LIST
17512: PUSH
17513: EMPTY
17514: LIST
17515: LIST
17516: PPUSH
17517: CALL_OW 69
17521: ST_TO_ADDR
// if not tmp then
17522: LD_VAR 0 2
17526: NOT
17527: IFFALSE 17531
// exit ;
17529: GO 17560
// for i in tmp do
17531: LD_ADDR_VAR 0 1
17535: PUSH
17536: LD_VAR 0 2
17540: PUSH
17541: FOR_IN
17542: IFFALSE 17558
// begin SetLives ( i , 0 ) ;
17544: LD_VAR 0 1
17548: PPUSH
17549: LD_INT 0
17551: PPUSH
17552: CALL_OW 234
// end ;
17556: GO 17541
17558: POP
17559: POP
// end ;
17560: PPOPN 2
17562: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17563: LD_EXP 47
17567: PUSH
17568: LD_EXP 53
17572: AND
17573: IFFALSE 17657
17575: GO 17577
17577: DISABLE
17578: LD_INT 0
17580: PPUSH
17581: PPUSH
// begin enable ;
17582: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17583: LD_ADDR_VAR 0 2
17587: PUSH
17588: LD_INT 22
17590: PUSH
17591: LD_OWVAR 2
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: PUSH
17600: LD_INT 32
17602: PUSH
17603: LD_INT 3
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: PPUSH
17614: CALL_OW 69
17618: ST_TO_ADDR
// if not tmp then
17619: LD_VAR 0 2
17623: NOT
17624: IFFALSE 17628
// exit ;
17626: GO 17657
// for i in tmp do
17628: LD_ADDR_VAR 0 1
17632: PUSH
17633: LD_VAR 0 2
17637: PUSH
17638: FOR_IN
17639: IFFALSE 17655
// begin SetLives ( i , 0 ) ;
17641: LD_VAR 0 1
17645: PPUSH
17646: LD_INT 0
17648: PPUSH
17649: CALL_OW 234
// end ;
17653: GO 17638
17655: POP
17656: POP
// end ;
17657: PPOPN 2
17659: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17660: LD_EXP 47
17664: PUSH
17665: LD_EXP 50
17669: AND
17670: IFFALSE 17763
17672: GO 17674
17674: DISABLE
17675: LD_INT 0
17677: PPUSH
// begin enable ;
17678: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17679: LD_ADDR_VAR 0 1
17683: PUSH
17684: LD_INT 22
17686: PUSH
17687: LD_OWVAR 2
17691: PUSH
17692: EMPTY
17693: LIST
17694: LIST
17695: PUSH
17696: LD_INT 2
17698: PUSH
17699: LD_INT 25
17701: PUSH
17702: LD_INT 5
17704: PUSH
17705: EMPTY
17706: LIST
17707: LIST
17708: PUSH
17709: LD_INT 25
17711: PUSH
17712: LD_INT 9
17714: PUSH
17715: EMPTY
17716: LIST
17717: LIST
17718: PUSH
17719: LD_INT 25
17721: PUSH
17722: LD_INT 8
17724: PUSH
17725: EMPTY
17726: LIST
17727: LIST
17728: PUSH
17729: EMPTY
17730: LIST
17731: LIST
17732: LIST
17733: LIST
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: PPUSH
17739: CALL_OW 69
17743: PUSH
17744: FOR_IN
17745: IFFALSE 17761
// begin SetClass ( i , 1 ) ;
17747: LD_VAR 0 1
17751: PPUSH
17752: LD_INT 1
17754: PPUSH
17755: CALL_OW 336
// end ;
17759: GO 17744
17761: POP
17762: POP
// end ;
17763: PPOPN 1
17765: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17766: LD_EXP 47
17770: PUSH
17771: LD_EXP 51
17775: AND
17776: PUSH
17777: LD_OWVAR 65
17781: PUSH
17782: LD_INT 7
17784: LESS
17785: AND
17786: IFFALSE 17800
17788: GO 17790
17790: DISABLE
// begin enable ;
17791: ENABLE
// game_speed := 7 ;
17792: LD_ADDR_OWVAR 65
17796: PUSH
17797: LD_INT 7
17799: ST_TO_ADDR
// end ;
17800: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17801: LD_EXP 47
17805: PUSH
17806: LD_EXP 54
17810: AND
17811: IFFALSE 18013
17813: GO 17815
17815: DISABLE
17816: LD_INT 0
17818: PPUSH
17819: PPUSH
17820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17821: LD_ADDR_VAR 0 3
17825: PUSH
17826: LD_INT 81
17828: PUSH
17829: LD_OWVAR 2
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: PUSH
17838: LD_INT 21
17840: PUSH
17841: LD_INT 1
17843: PUSH
17844: EMPTY
17845: LIST
17846: LIST
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: PPUSH
17852: CALL_OW 69
17856: ST_TO_ADDR
// if not tmp then
17857: LD_VAR 0 3
17861: NOT
17862: IFFALSE 17866
// exit ;
17864: GO 18013
// if tmp > 5 then
17866: LD_VAR 0 3
17870: PUSH
17871: LD_INT 5
17873: GREATER
17874: IFFALSE 17886
// k := 5 else
17876: LD_ADDR_VAR 0 2
17880: PUSH
17881: LD_INT 5
17883: ST_TO_ADDR
17884: GO 17896
// k := tmp ;
17886: LD_ADDR_VAR 0 2
17890: PUSH
17891: LD_VAR 0 3
17895: ST_TO_ADDR
// for i := 1 to k do
17896: LD_ADDR_VAR 0 1
17900: PUSH
17901: DOUBLE
17902: LD_INT 1
17904: DEC
17905: ST_TO_ADDR
17906: LD_VAR 0 2
17910: PUSH
17911: FOR_TO
17912: IFFALSE 18011
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17914: LD_VAR 0 3
17918: PUSH
17919: LD_VAR 0 1
17923: ARRAY
17924: PPUSH
17925: LD_VAR 0 1
17929: PUSH
17930: LD_INT 4
17932: MOD
17933: PUSH
17934: LD_INT 1
17936: PLUS
17937: PPUSH
17938: CALL_OW 259
17942: PUSH
17943: LD_INT 10
17945: LESS
17946: IFFALSE 18009
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17948: LD_VAR 0 3
17952: PUSH
17953: LD_VAR 0 1
17957: ARRAY
17958: PPUSH
17959: LD_VAR 0 1
17963: PUSH
17964: LD_INT 4
17966: MOD
17967: PUSH
17968: LD_INT 1
17970: PLUS
17971: PPUSH
17972: LD_VAR 0 3
17976: PUSH
17977: LD_VAR 0 1
17981: ARRAY
17982: PPUSH
17983: LD_VAR 0 1
17987: PUSH
17988: LD_INT 4
17990: MOD
17991: PUSH
17992: LD_INT 1
17994: PLUS
17995: PPUSH
17996: CALL_OW 259
18000: PUSH
18001: LD_INT 1
18003: PLUS
18004: PPUSH
18005: CALL_OW 237
18009: GO 17911
18011: POP
18012: POP
// end ;
18013: PPOPN 3
18015: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18016: LD_EXP 47
18020: PUSH
18021: LD_EXP 55
18025: AND
18026: IFFALSE 18046
18028: GO 18030
18030: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18031: LD_INT 4
18033: PPUSH
18034: LD_OWVAR 2
18038: PPUSH
18039: LD_INT 0
18041: PPUSH
18042: CALL_OW 324
18046: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18047: LD_EXP 47
18051: PUSH
18052: LD_EXP 84
18056: AND
18057: IFFALSE 18077
18059: GO 18061
18061: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18062: LD_INT 19
18064: PPUSH
18065: LD_OWVAR 2
18069: PPUSH
18070: LD_INT 0
18072: PPUSH
18073: CALL_OW 324
18077: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18078: LD_EXP 47
18082: PUSH
18083: LD_EXP 56
18087: AND
18088: IFFALSE 18190
18090: GO 18092
18092: DISABLE
18093: LD_INT 0
18095: PPUSH
18096: PPUSH
// begin enable ;
18097: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18098: LD_ADDR_VAR 0 2
18102: PUSH
18103: LD_INT 22
18105: PUSH
18106: LD_OWVAR 2
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: PUSH
18115: LD_INT 2
18117: PUSH
18118: LD_INT 34
18120: PUSH
18121: LD_INT 11
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: PUSH
18128: LD_INT 34
18130: PUSH
18131: LD_INT 30
18133: PUSH
18134: EMPTY
18135: LIST
18136: LIST
18137: PUSH
18138: EMPTY
18139: LIST
18140: LIST
18141: LIST
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: PPUSH
18147: CALL_OW 69
18151: ST_TO_ADDR
// if not tmp then
18152: LD_VAR 0 2
18156: NOT
18157: IFFALSE 18161
// exit ;
18159: GO 18190
// for i in tmp do
18161: LD_ADDR_VAR 0 1
18165: PUSH
18166: LD_VAR 0 2
18170: PUSH
18171: FOR_IN
18172: IFFALSE 18188
// begin SetLives ( i , 0 ) ;
18174: LD_VAR 0 1
18178: PPUSH
18179: LD_INT 0
18181: PPUSH
18182: CALL_OW 234
// end ;
18186: GO 18171
18188: POP
18189: POP
// end ;
18190: PPOPN 2
18192: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18193: LD_EXP 47
18197: PUSH
18198: LD_EXP 57
18202: AND
18203: IFFALSE 18223
18205: GO 18207
18207: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18208: LD_INT 32
18210: PPUSH
18211: LD_OWVAR 2
18215: PPUSH
18216: LD_INT 0
18218: PPUSH
18219: CALL_OW 324
18223: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18224: LD_EXP 47
18228: PUSH
18229: LD_EXP 58
18233: AND
18234: IFFALSE 18415
18236: GO 18238
18238: DISABLE
18239: LD_INT 0
18241: PPUSH
18242: PPUSH
18243: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18244: LD_ADDR_VAR 0 2
18248: PUSH
18249: LD_INT 22
18251: PUSH
18252: LD_OWVAR 2
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: PUSH
18261: LD_INT 33
18263: PUSH
18264: LD_INT 3
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: PUSH
18271: EMPTY
18272: LIST
18273: LIST
18274: PPUSH
18275: CALL_OW 69
18279: ST_TO_ADDR
// if not tmp then
18280: LD_VAR 0 2
18284: NOT
18285: IFFALSE 18289
// exit ;
18287: GO 18415
// side := 0 ;
18289: LD_ADDR_VAR 0 3
18293: PUSH
18294: LD_INT 0
18296: ST_TO_ADDR
// for i := 1 to 8 do
18297: LD_ADDR_VAR 0 1
18301: PUSH
18302: DOUBLE
18303: LD_INT 1
18305: DEC
18306: ST_TO_ADDR
18307: LD_INT 8
18309: PUSH
18310: FOR_TO
18311: IFFALSE 18359
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18313: LD_OWVAR 2
18317: PUSH
18318: LD_VAR 0 1
18322: NONEQUAL
18323: PUSH
18324: LD_OWVAR 2
18328: PPUSH
18329: LD_VAR 0 1
18333: PPUSH
18334: CALL_OW 81
18338: PUSH
18339: LD_INT 2
18341: EQUAL
18342: AND
18343: IFFALSE 18357
// begin side := i ;
18345: LD_ADDR_VAR 0 3
18349: PUSH
18350: LD_VAR 0 1
18354: ST_TO_ADDR
// break ;
18355: GO 18359
// end ;
18357: GO 18310
18359: POP
18360: POP
// if not side then
18361: LD_VAR 0 3
18365: NOT
18366: IFFALSE 18370
// exit ;
18368: GO 18415
// for i := 1 to tmp do
18370: LD_ADDR_VAR 0 1
18374: PUSH
18375: DOUBLE
18376: LD_INT 1
18378: DEC
18379: ST_TO_ADDR
18380: LD_VAR 0 2
18384: PUSH
18385: FOR_TO
18386: IFFALSE 18413
// if Prob ( 60 ) then
18388: LD_INT 60
18390: PPUSH
18391: CALL_OW 13
18395: IFFALSE 18411
// SetSide ( i , side ) ;
18397: LD_VAR 0 1
18401: PPUSH
18402: LD_VAR 0 3
18406: PPUSH
18407: CALL_OW 235
18411: GO 18385
18413: POP
18414: POP
// end ;
18415: PPOPN 3
18417: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18418: LD_EXP 47
18422: PUSH
18423: LD_EXP 60
18427: AND
18428: IFFALSE 18547
18430: GO 18432
18432: DISABLE
18433: LD_INT 0
18435: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18436: LD_ADDR_VAR 0 1
18440: PUSH
18441: LD_INT 22
18443: PUSH
18444: LD_OWVAR 2
18448: PUSH
18449: EMPTY
18450: LIST
18451: LIST
18452: PUSH
18453: LD_INT 21
18455: PUSH
18456: LD_INT 1
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: PUSH
18463: LD_INT 3
18465: PUSH
18466: LD_INT 23
18468: PUSH
18469: LD_INT 0
18471: PUSH
18472: EMPTY
18473: LIST
18474: LIST
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: PUSH
18480: EMPTY
18481: LIST
18482: LIST
18483: LIST
18484: PPUSH
18485: CALL_OW 69
18489: PUSH
18490: FOR_IN
18491: IFFALSE 18545
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18493: LD_VAR 0 1
18497: PPUSH
18498: CALL_OW 257
18502: PUSH
18503: LD_INT 1
18505: PUSH
18506: LD_INT 2
18508: PUSH
18509: LD_INT 3
18511: PUSH
18512: LD_INT 4
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: LIST
18519: LIST
18520: IN
18521: IFFALSE 18543
// SetClass ( un , rand ( 1 , 4 ) ) ;
18523: LD_VAR 0 1
18527: PPUSH
18528: LD_INT 1
18530: PPUSH
18531: LD_INT 4
18533: PPUSH
18534: CALL_OW 12
18538: PPUSH
18539: CALL_OW 336
18543: GO 18490
18545: POP
18546: POP
// end ;
18547: PPOPN 1
18549: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18550: LD_EXP 47
18554: PUSH
18555: LD_EXP 59
18559: AND
18560: IFFALSE 18639
18562: GO 18564
18564: DISABLE
18565: LD_INT 0
18567: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18568: LD_ADDR_VAR 0 1
18572: PUSH
18573: LD_INT 22
18575: PUSH
18576: LD_OWVAR 2
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: PUSH
18585: LD_INT 21
18587: PUSH
18588: LD_INT 3
18590: PUSH
18591: EMPTY
18592: LIST
18593: LIST
18594: PUSH
18595: EMPTY
18596: LIST
18597: LIST
18598: PPUSH
18599: CALL_OW 69
18603: ST_TO_ADDR
// if not tmp then
18604: LD_VAR 0 1
18608: NOT
18609: IFFALSE 18613
// exit ;
18611: GO 18639
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18613: LD_VAR 0 1
18617: PUSH
18618: LD_INT 1
18620: PPUSH
18621: LD_VAR 0 1
18625: PPUSH
18626: CALL_OW 12
18630: ARRAY
18631: PPUSH
18632: LD_INT 100
18634: PPUSH
18635: CALL_OW 234
// end ;
18639: PPOPN 1
18641: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18642: LD_EXP 47
18646: PUSH
18647: LD_EXP 61
18651: AND
18652: IFFALSE 18750
18654: GO 18656
18656: DISABLE
18657: LD_INT 0
18659: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18660: LD_ADDR_VAR 0 1
18664: PUSH
18665: LD_INT 22
18667: PUSH
18668: LD_OWVAR 2
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: PUSH
18677: LD_INT 21
18679: PUSH
18680: LD_INT 1
18682: PUSH
18683: EMPTY
18684: LIST
18685: LIST
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: PPUSH
18691: CALL_OW 69
18695: ST_TO_ADDR
// if not tmp then
18696: LD_VAR 0 1
18700: NOT
18701: IFFALSE 18705
// exit ;
18703: GO 18750
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18705: LD_VAR 0 1
18709: PUSH
18710: LD_INT 1
18712: PPUSH
18713: LD_VAR 0 1
18717: PPUSH
18718: CALL_OW 12
18722: ARRAY
18723: PPUSH
18724: LD_INT 1
18726: PPUSH
18727: LD_INT 4
18729: PPUSH
18730: CALL_OW 12
18734: PPUSH
18735: LD_INT 3000
18737: PPUSH
18738: LD_INT 9000
18740: PPUSH
18741: CALL_OW 12
18745: PPUSH
18746: CALL_OW 492
// end ;
18750: PPOPN 1
18752: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18753: LD_EXP 47
18757: PUSH
18758: LD_EXP 62
18762: AND
18763: IFFALSE 18783
18765: GO 18767
18767: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18768: LD_INT 1
18770: PPUSH
18771: LD_OWVAR 2
18775: PPUSH
18776: LD_INT 0
18778: PPUSH
18779: CALL_OW 324
18783: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18784: LD_EXP 47
18788: PUSH
18789: LD_EXP 63
18793: AND
18794: IFFALSE 18877
18796: GO 18798
18798: DISABLE
18799: LD_INT 0
18801: PPUSH
18802: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18803: LD_ADDR_VAR 0 2
18807: PUSH
18808: LD_INT 22
18810: PUSH
18811: LD_OWVAR 2
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: PUSH
18820: LD_INT 21
18822: PUSH
18823: LD_INT 3
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: PUSH
18830: EMPTY
18831: LIST
18832: LIST
18833: PPUSH
18834: CALL_OW 69
18838: ST_TO_ADDR
// if not tmp then
18839: LD_VAR 0 2
18843: NOT
18844: IFFALSE 18848
// exit ;
18846: GO 18877
// for i in tmp do
18848: LD_ADDR_VAR 0 1
18852: PUSH
18853: LD_VAR 0 2
18857: PUSH
18858: FOR_IN
18859: IFFALSE 18875
// SetBLevel ( i , 10 ) ;
18861: LD_VAR 0 1
18865: PPUSH
18866: LD_INT 10
18868: PPUSH
18869: CALL_OW 241
18873: GO 18858
18875: POP
18876: POP
// end ;
18877: PPOPN 2
18879: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18880: LD_EXP 47
18884: PUSH
18885: LD_EXP 64
18889: AND
18890: IFFALSE 19001
18892: GO 18894
18894: DISABLE
18895: LD_INT 0
18897: PPUSH
18898: PPUSH
18899: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18900: LD_ADDR_VAR 0 3
18904: PUSH
18905: LD_INT 22
18907: PUSH
18908: LD_OWVAR 2
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: PUSH
18917: LD_INT 25
18919: PUSH
18920: LD_INT 1
18922: PUSH
18923: EMPTY
18924: LIST
18925: LIST
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: PPUSH
18931: CALL_OW 69
18935: ST_TO_ADDR
// if not tmp then
18936: LD_VAR 0 3
18940: NOT
18941: IFFALSE 18945
// exit ;
18943: GO 19001
// un := tmp [ rand ( 1 , tmp ) ] ;
18945: LD_ADDR_VAR 0 2
18949: PUSH
18950: LD_VAR 0 3
18954: PUSH
18955: LD_INT 1
18957: PPUSH
18958: LD_VAR 0 3
18962: PPUSH
18963: CALL_OW 12
18967: ARRAY
18968: ST_TO_ADDR
// if Crawls ( un ) then
18969: LD_VAR 0 2
18973: PPUSH
18974: CALL_OW 318
18978: IFFALSE 18989
// ComWalk ( un ) ;
18980: LD_VAR 0 2
18984: PPUSH
18985: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18989: LD_VAR 0 2
18993: PPUSH
18994: LD_INT 5
18996: PPUSH
18997: CALL_OW 336
// end ;
19001: PPOPN 3
19003: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
19004: LD_EXP 47
19008: PUSH
19009: LD_EXP 65
19013: AND
19014: PUSH
19015: LD_OWVAR 67
19019: PUSH
19020: LD_INT 3
19022: LESS
19023: AND
19024: IFFALSE 19043
19026: GO 19028
19028: DISABLE
// Difficulty := Difficulty + 1 ;
19029: LD_ADDR_OWVAR 67
19033: PUSH
19034: LD_OWVAR 67
19038: PUSH
19039: LD_INT 1
19041: PLUS
19042: ST_TO_ADDR
19043: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19044: LD_EXP 47
19048: PUSH
19049: LD_EXP 66
19053: AND
19054: IFFALSE 19157
19056: GO 19058
19058: DISABLE
19059: LD_INT 0
19061: PPUSH
// begin for i := 1 to 5 do
19062: LD_ADDR_VAR 0 1
19066: PUSH
19067: DOUBLE
19068: LD_INT 1
19070: DEC
19071: ST_TO_ADDR
19072: LD_INT 5
19074: PUSH
19075: FOR_TO
19076: IFFALSE 19155
// begin uc_nation := nation_nature ;
19078: LD_ADDR_OWVAR 21
19082: PUSH
19083: LD_INT 0
19085: ST_TO_ADDR
// uc_side := 0 ;
19086: LD_ADDR_OWVAR 20
19090: PUSH
19091: LD_INT 0
19093: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19094: LD_ADDR_OWVAR 29
19098: PUSH
19099: LD_INT 12
19101: PUSH
19102: LD_INT 12
19104: PUSH
19105: EMPTY
19106: LIST
19107: LIST
19108: ST_TO_ADDR
// hc_agressivity := 20 ;
19109: LD_ADDR_OWVAR 35
19113: PUSH
19114: LD_INT 20
19116: ST_TO_ADDR
// hc_class := class_tiger ;
19117: LD_ADDR_OWVAR 28
19121: PUSH
19122: LD_INT 14
19124: ST_TO_ADDR
// hc_gallery :=  ;
19125: LD_ADDR_OWVAR 33
19129: PUSH
19130: LD_STRING 
19132: ST_TO_ADDR
// hc_name :=  ;
19133: LD_ADDR_OWVAR 26
19137: PUSH
19138: LD_STRING 
19140: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19141: CALL_OW 44
19145: PPUSH
19146: LD_INT 0
19148: PPUSH
19149: CALL_OW 51
// end ;
19153: GO 19075
19155: POP
19156: POP
// end ;
19157: PPOPN 1
19159: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19160: LD_EXP 47
19164: PUSH
19165: LD_EXP 67
19169: AND
19170: IFFALSE 19179
19172: GO 19174
19174: DISABLE
// StreamSibBomb ;
19175: CALL 19180 0 0
19179: END
// export function StreamSibBomb ; var i , x , y ; begin
19180: LD_INT 0
19182: PPUSH
19183: PPUSH
19184: PPUSH
19185: PPUSH
// result := false ;
19186: LD_ADDR_VAR 0 1
19190: PUSH
19191: LD_INT 0
19193: ST_TO_ADDR
// for i := 1 to 16 do
19194: LD_ADDR_VAR 0 2
19198: PUSH
19199: DOUBLE
19200: LD_INT 1
19202: DEC
19203: ST_TO_ADDR
19204: LD_INT 16
19206: PUSH
19207: FOR_TO
19208: IFFALSE 19407
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19210: LD_ADDR_VAR 0 3
19214: PUSH
19215: LD_INT 10
19217: PUSH
19218: LD_INT 20
19220: PUSH
19221: LD_INT 30
19223: PUSH
19224: LD_INT 40
19226: PUSH
19227: LD_INT 50
19229: PUSH
19230: LD_INT 60
19232: PUSH
19233: LD_INT 70
19235: PUSH
19236: LD_INT 80
19238: PUSH
19239: LD_INT 90
19241: PUSH
19242: LD_INT 100
19244: PUSH
19245: LD_INT 110
19247: PUSH
19248: LD_INT 120
19250: PUSH
19251: LD_INT 130
19253: PUSH
19254: LD_INT 140
19256: PUSH
19257: LD_INT 150
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: PUSH
19277: LD_INT 1
19279: PPUSH
19280: LD_INT 15
19282: PPUSH
19283: CALL_OW 12
19287: ARRAY
19288: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19289: LD_ADDR_VAR 0 4
19293: PUSH
19294: LD_INT 10
19296: PUSH
19297: LD_INT 20
19299: PUSH
19300: LD_INT 30
19302: PUSH
19303: LD_INT 40
19305: PUSH
19306: LD_INT 50
19308: PUSH
19309: LD_INT 60
19311: PUSH
19312: LD_INT 70
19314: PUSH
19315: LD_INT 80
19317: PUSH
19318: LD_INT 90
19320: PUSH
19321: LD_INT 100
19323: PUSH
19324: LD_INT 110
19326: PUSH
19327: LD_INT 120
19329: PUSH
19330: LD_INT 130
19332: PUSH
19333: LD_INT 140
19335: PUSH
19336: LD_INT 150
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: PUSH
19356: LD_INT 1
19358: PPUSH
19359: LD_INT 15
19361: PPUSH
19362: CALL_OW 12
19366: ARRAY
19367: ST_TO_ADDR
// if ValidHex ( x , y ) then
19368: LD_VAR 0 3
19372: PPUSH
19373: LD_VAR 0 4
19377: PPUSH
19378: CALL_OW 488
19382: IFFALSE 19405
// begin result := [ x , y ] ;
19384: LD_ADDR_VAR 0 1
19388: PUSH
19389: LD_VAR 0 3
19393: PUSH
19394: LD_VAR 0 4
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: ST_TO_ADDR
// break ;
19403: GO 19407
// end ; end ;
19405: GO 19207
19407: POP
19408: POP
// if result then
19409: LD_VAR 0 1
19413: IFFALSE 19473
// begin ToLua ( playSibBomb() ) ;
19415: LD_STRING playSibBomb()
19417: PPUSH
19418: CALL_OW 559
// wait ( 0 0$14 ) ;
19422: LD_INT 490
19424: PPUSH
19425: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19429: LD_VAR 0 1
19433: PUSH
19434: LD_INT 1
19436: ARRAY
19437: PPUSH
19438: LD_VAR 0 1
19442: PUSH
19443: LD_INT 2
19445: ARRAY
19446: PPUSH
19447: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19451: LD_VAR 0 1
19455: PUSH
19456: LD_INT 1
19458: ARRAY
19459: PPUSH
19460: LD_VAR 0 1
19464: PUSH
19465: LD_INT 2
19467: ARRAY
19468: PPUSH
19469: CALL_OW 429
// end ; end ;
19473: LD_VAR 0 1
19477: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19478: LD_EXP 47
19482: PUSH
19483: LD_EXP 69
19487: AND
19488: IFFALSE 19500
19490: GO 19492
19492: DISABLE
// YouLost (  ) ;
19493: LD_STRING 
19495: PPUSH
19496: CALL_OW 104
19500: END
// every 0 0$1 trigger StreamModeActive and sFog do
19501: LD_EXP 47
19505: PUSH
19506: LD_EXP 68
19510: AND
19511: IFFALSE 19525
19513: GO 19515
19515: DISABLE
// FogOff ( your_side ) ;
19516: LD_OWVAR 2
19520: PPUSH
19521: CALL_OW 344
19525: END
// every 0 0$1 trigger StreamModeActive and sSun do
19526: LD_EXP 47
19530: PUSH
19531: LD_EXP 70
19535: AND
19536: IFFALSE 19564
19538: GO 19540
19540: DISABLE
// begin solar_recharge_percent := 0 ;
19541: LD_ADDR_OWVAR 79
19545: PUSH
19546: LD_INT 0
19548: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19549: LD_INT 10500
19551: PPUSH
19552: CALL_OW 67
// solar_recharge_percent := 100 ;
19556: LD_ADDR_OWVAR 79
19560: PUSH
19561: LD_INT 100
19563: ST_TO_ADDR
// end ;
19564: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19565: LD_EXP 47
19569: PUSH
19570: LD_EXP 71
19574: AND
19575: IFFALSE 19814
19577: GO 19579
19579: DISABLE
19580: LD_INT 0
19582: PPUSH
19583: PPUSH
19584: PPUSH
// begin tmp := [ ] ;
19585: LD_ADDR_VAR 0 3
19589: PUSH
19590: EMPTY
19591: ST_TO_ADDR
// for i := 1 to 6 do
19592: LD_ADDR_VAR 0 1
19596: PUSH
19597: DOUBLE
19598: LD_INT 1
19600: DEC
19601: ST_TO_ADDR
19602: LD_INT 6
19604: PUSH
19605: FOR_TO
19606: IFFALSE 19711
// begin uc_nation := nation_nature ;
19608: LD_ADDR_OWVAR 21
19612: PUSH
19613: LD_INT 0
19615: ST_TO_ADDR
// uc_side := 0 ;
19616: LD_ADDR_OWVAR 20
19620: PUSH
19621: LD_INT 0
19623: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19624: LD_ADDR_OWVAR 29
19628: PUSH
19629: LD_INT 12
19631: PUSH
19632: LD_INT 12
19634: PUSH
19635: EMPTY
19636: LIST
19637: LIST
19638: ST_TO_ADDR
// hc_agressivity := 20 ;
19639: LD_ADDR_OWVAR 35
19643: PUSH
19644: LD_INT 20
19646: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19647: LD_ADDR_OWVAR 28
19651: PUSH
19652: LD_INT 17
19654: ST_TO_ADDR
// hc_gallery :=  ;
19655: LD_ADDR_OWVAR 33
19659: PUSH
19660: LD_STRING 
19662: ST_TO_ADDR
// hc_name :=  ;
19663: LD_ADDR_OWVAR 26
19667: PUSH
19668: LD_STRING 
19670: ST_TO_ADDR
// un := CreateHuman ;
19671: LD_ADDR_VAR 0 2
19675: PUSH
19676: CALL_OW 44
19680: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19681: LD_VAR 0 2
19685: PPUSH
19686: LD_INT 1
19688: PPUSH
19689: CALL_OW 51
// tmp := tmp ^ un ;
19693: LD_ADDR_VAR 0 3
19697: PUSH
19698: LD_VAR 0 3
19702: PUSH
19703: LD_VAR 0 2
19707: ADD
19708: ST_TO_ADDR
// end ;
19709: GO 19605
19711: POP
19712: POP
// repeat wait ( 0 0$1 ) ;
19713: LD_INT 35
19715: PPUSH
19716: CALL_OW 67
// for un in tmp do
19720: LD_ADDR_VAR 0 2
19724: PUSH
19725: LD_VAR 0 3
19729: PUSH
19730: FOR_IN
19731: IFFALSE 19805
// begin if IsDead ( un ) then
19733: LD_VAR 0 2
19737: PPUSH
19738: CALL_OW 301
19742: IFFALSE 19762
// begin tmp := tmp diff un ;
19744: LD_ADDR_VAR 0 3
19748: PUSH
19749: LD_VAR 0 3
19753: PUSH
19754: LD_VAR 0 2
19758: DIFF
19759: ST_TO_ADDR
// continue ;
19760: GO 19730
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19762: LD_VAR 0 2
19766: PPUSH
19767: LD_INT 3
19769: PUSH
19770: LD_INT 22
19772: PUSH
19773: LD_INT 0
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: PPUSH
19784: CALL_OW 69
19788: PPUSH
19789: LD_VAR 0 2
19793: PPUSH
19794: CALL_OW 74
19798: PPUSH
19799: CALL_OW 115
// end ;
19803: GO 19730
19805: POP
19806: POP
// until not tmp ;
19807: LD_VAR 0 3
19811: NOT
19812: IFFALSE 19713
// end ;
19814: PPOPN 3
19816: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19817: LD_EXP 47
19821: PUSH
19822: LD_EXP 72
19826: AND
19827: IFFALSE 19881
19829: GO 19831
19831: DISABLE
// begin ToLua ( displayTroll(); ) ;
19832: LD_STRING displayTroll();
19834: PPUSH
19835: CALL_OW 559
// wait ( 3 3$00 ) ;
19839: LD_INT 6300
19841: PPUSH
19842: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19846: LD_STRING hideTroll();
19848: PPUSH
19849: CALL_OW 559
// wait ( 1 1$00 ) ;
19853: LD_INT 2100
19855: PPUSH
19856: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19860: LD_STRING displayTroll();
19862: PPUSH
19863: CALL_OW 559
// wait ( 1 1$00 ) ;
19867: LD_INT 2100
19869: PPUSH
19870: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19874: LD_STRING hideTroll();
19876: PPUSH
19877: CALL_OW 559
// end ;
19881: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19882: LD_EXP 47
19886: PUSH
19887: LD_EXP 73
19891: AND
19892: IFFALSE 19955
19894: GO 19896
19896: DISABLE
19897: LD_INT 0
19899: PPUSH
// begin p := 0 ;
19900: LD_ADDR_VAR 0 1
19904: PUSH
19905: LD_INT 0
19907: ST_TO_ADDR
// repeat game_speed := 1 ;
19908: LD_ADDR_OWVAR 65
19912: PUSH
19913: LD_INT 1
19915: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19916: LD_INT 35
19918: PPUSH
19919: CALL_OW 67
// p := p + 1 ;
19923: LD_ADDR_VAR 0 1
19927: PUSH
19928: LD_VAR 0 1
19932: PUSH
19933: LD_INT 1
19935: PLUS
19936: ST_TO_ADDR
// until p >= 60 ;
19937: LD_VAR 0 1
19941: PUSH
19942: LD_INT 60
19944: GREATEREQUAL
19945: IFFALSE 19908
// game_speed := 4 ;
19947: LD_ADDR_OWVAR 65
19951: PUSH
19952: LD_INT 4
19954: ST_TO_ADDR
// end ;
19955: PPOPN 1
19957: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19958: LD_EXP 47
19962: PUSH
19963: LD_EXP 74
19967: AND
19968: IFFALSE 20114
19970: GO 19972
19972: DISABLE
19973: LD_INT 0
19975: PPUSH
19976: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19977: LD_ADDR_VAR 0 1
19981: PUSH
19982: LD_INT 22
19984: PUSH
19985: LD_OWVAR 2
19989: PUSH
19990: EMPTY
19991: LIST
19992: LIST
19993: PUSH
19994: LD_INT 2
19996: PUSH
19997: LD_INT 30
19999: PUSH
20000: LD_INT 0
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: PUSH
20007: LD_INT 30
20009: PUSH
20010: LD_INT 1
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: LIST
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PPUSH
20026: CALL_OW 69
20030: ST_TO_ADDR
// if not depot then
20031: LD_VAR 0 1
20035: NOT
20036: IFFALSE 20040
// exit ;
20038: GO 20114
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20040: LD_ADDR_VAR 0 2
20044: PUSH
20045: LD_VAR 0 1
20049: PUSH
20050: LD_INT 1
20052: PPUSH
20053: LD_VAR 0 1
20057: PPUSH
20058: CALL_OW 12
20062: ARRAY
20063: PPUSH
20064: CALL_OW 274
20068: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20069: LD_VAR 0 2
20073: PPUSH
20074: LD_INT 1
20076: PPUSH
20077: LD_INT 0
20079: PPUSH
20080: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20084: LD_VAR 0 2
20088: PPUSH
20089: LD_INT 2
20091: PPUSH
20092: LD_INT 0
20094: PPUSH
20095: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20099: LD_VAR 0 2
20103: PPUSH
20104: LD_INT 3
20106: PPUSH
20107: LD_INT 0
20109: PPUSH
20110: CALL_OW 277
// end ;
20114: PPOPN 2
20116: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20117: LD_EXP 47
20121: PUSH
20122: LD_EXP 75
20126: AND
20127: IFFALSE 20224
20129: GO 20131
20131: DISABLE
20132: LD_INT 0
20134: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20135: LD_ADDR_VAR 0 1
20139: PUSH
20140: LD_INT 22
20142: PUSH
20143: LD_OWVAR 2
20147: PUSH
20148: EMPTY
20149: LIST
20150: LIST
20151: PUSH
20152: LD_INT 21
20154: PUSH
20155: LD_INT 1
20157: PUSH
20158: EMPTY
20159: LIST
20160: LIST
20161: PUSH
20162: LD_INT 3
20164: PUSH
20165: LD_INT 23
20167: PUSH
20168: LD_INT 0
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: PUSH
20175: EMPTY
20176: LIST
20177: LIST
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: LIST
20183: PPUSH
20184: CALL_OW 69
20188: ST_TO_ADDR
// if not tmp then
20189: LD_VAR 0 1
20193: NOT
20194: IFFALSE 20198
// exit ;
20196: GO 20224
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20198: LD_VAR 0 1
20202: PUSH
20203: LD_INT 1
20205: PPUSH
20206: LD_VAR 0 1
20210: PPUSH
20211: CALL_OW 12
20215: ARRAY
20216: PPUSH
20217: LD_INT 200
20219: PPUSH
20220: CALL_OW 234
// end ;
20224: PPOPN 1
20226: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20227: LD_EXP 47
20231: PUSH
20232: LD_EXP 76
20236: AND
20237: IFFALSE 20316
20239: GO 20241
20241: DISABLE
20242: LD_INT 0
20244: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20245: LD_ADDR_VAR 0 1
20249: PUSH
20250: LD_INT 22
20252: PUSH
20253: LD_OWVAR 2
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: PUSH
20262: LD_INT 21
20264: PUSH
20265: LD_INT 2
20267: PUSH
20268: EMPTY
20269: LIST
20270: LIST
20271: PUSH
20272: EMPTY
20273: LIST
20274: LIST
20275: PPUSH
20276: CALL_OW 69
20280: ST_TO_ADDR
// if not tmp then
20281: LD_VAR 0 1
20285: NOT
20286: IFFALSE 20290
// exit ;
20288: GO 20316
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20290: LD_VAR 0 1
20294: PUSH
20295: LD_INT 1
20297: PPUSH
20298: LD_VAR 0 1
20302: PPUSH
20303: CALL_OW 12
20307: ARRAY
20308: PPUSH
20309: LD_INT 60
20311: PPUSH
20312: CALL_OW 234
// end ;
20316: PPOPN 1
20318: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20319: LD_EXP 47
20323: PUSH
20324: LD_EXP 77
20328: AND
20329: IFFALSE 20428
20331: GO 20333
20333: DISABLE
20334: LD_INT 0
20336: PPUSH
20337: PPUSH
// begin enable ;
20338: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20339: LD_ADDR_VAR 0 1
20343: PUSH
20344: LD_INT 22
20346: PUSH
20347: LD_OWVAR 2
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: PUSH
20356: LD_INT 61
20358: PUSH
20359: EMPTY
20360: LIST
20361: PUSH
20362: LD_INT 33
20364: PUSH
20365: LD_INT 2
20367: PUSH
20368: EMPTY
20369: LIST
20370: LIST
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: LIST
20376: PPUSH
20377: CALL_OW 69
20381: ST_TO_ADDR
// if not tmp then
20382: LD_VAR 0 1
20386: NOT
20387: IFFALSE 20391
// exit ;
20389: GO 20428
// for i in tmp do
20391: LD_ADDR_VAR 0 2
20395: PUSH
20396: LD_VAR 0 1
20400: PUSH
20401: FOR_IN
20402: IFFALSE 20426
// if IsControledBy ( i ) then
20404: LD_VAR 0 2
20408: PPUSH
20409: CALL_OW 312
20413: IFFALSE 20424
// ComUnlink ( i ) ;
20415: LD_VAR 0 2
20419: PPUSH
20420: CALL_OW 136
20424: GO 20401
20426: POP
20427: POP
// end ;
20428: PPOPN 2
20430: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20431: LD_EXP 47
20435: PUSH
20436: LD_EXP 78
20440: AND
20441: IFFALSE 20581
20443: GO 20445
20445: DISABLE
20446: LD_INT 0
20448: PPUSH
20449: PPUSH
// begin ToLua ( displayPowell(); ) ;
20450: LD_STRING displayPowell();
20452: PPUSH
20453: CALL_OW 559
// uc_side := 0 ;
20457: LD_ADDR_OWVAR 20
20461: PUSH
20462: LD_INT 0
20464: ST_TO_ADDR
// uc_nation := 2 ;
20465: LD_ADDR_OWVAR 21
20469: PUSH
20470: LD_INT 2
20472: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20473: LD_ADDR_OWVAR 37
20477: PUSH
20478: LD_INT 14
20480: ST_TO_ADDR
// vc_engine := engine_siberite ;
20481: LD_ADDR_OWVAR 39
20485: PUSH
20486: LD_INT 3
20488: ST_TO_ADDR
// vc_control := control_apeman ;
20489: LD_ADDR_OWVAR 38
20493: PUSH
20494: LD_INT 5
20496: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20497: LD_ADDR_OWVAR 40
20501: PUSH
20502: LD_INT 29
20504: ST_TO_ADDR
// un := CreateVehicle ;
20505: LD_ADDR_VAR 0 2
20509: PUSH
20510: CALL_OW 45
20514: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20515: LD_VAR 0 2
20519: PPUSH
20520: LD_INT 1
20522: PPUSH
20523: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20527: LD_INT 35
20529: PPUSH
20530: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20534: LD_VAR 0 2
20538: PPUSH
20539: LD_INT 22
20541: PUSH
20542: LD_OWVAR 2
20546: PUSH
20547: EMPTY
20548: LIST
20549: LIST
20550: PPUSH
20551: CALL_OW 69
20555: PPUSH
20556: LD_VAR 0 2
20560: PPUSH
20561: CALL_OW 74
20565: PPUSH
20566: CALL_OW 115
// until IsDead ( un ) ;
20570: LD_VAR 0 2
20574: PPUSH
20575: CALL_OW 301
20579: IFFALSE 20527
// end ;
20581: PPOPN 2
20583: END
// every 0 0$1 trigger StreamModeActive and sStu do
20584: LD_EXP 47
20588: PUSH
20589: LD_EXP 86
20593: AND
20594: IFFALSE 20610
20596: GO 20598
20598: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20599: LD_STRING displayStucuk();
20601: PPUSH
20602: CALL_OW 559
// ResetFog ;
20606: CALL_OW 335
// end ;
20610: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20611: LD_EXP 47
20615: PUSH
20616: LD_EXP 79
20620: AND
20621: IFFALSE 20762
20623: GO 20625
20625: DISABLE
20626: LD_INT 0
20628: PPUSH
20629: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20630: LD_ADDR_VAR 0 2
20634: PUSH
20635: LD_INT 22
20637: PUSH
20638: LD_OWVAR 2
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PUSH
20647: LD_INT 21
20649: PUSH
20650: LD_INT 1
20652: PUSH
20653: EMPTY
20654: LIST
20655: LIST
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: PPUSH
20661: CALL_OW 69
20665: ST_TO_ADDR
// if not tmp then
20666: LD_VAR 0 2
20670: NOT
20671: IFFALSE 20675
// exit ;
20673: GO 20762
// un := tmp [ rand ( 1 , tmp ) ] ;
20675: LD_ADDR_VAR 0 1
20679: PUSH
20680: LD_VAR 0 2
20684: PUSH
20685: LD_INT 1
20687: PPUSH
20688: LD_VAR 0 2
20692: PPUSH
20693: CALL_OW 12
20697: ARRAY
20698: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20699: LD_VAR 0 1
20703: PPUSH
20704: LD_INT 0
20706: PPUSH
20707: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20711: LD_VAR 0 1
20715: PPUSH
20716: LD_OWVAR 3
20720: PUSH
20721: LD_VAR 0 1
20725: DIFF
20726: PPUSH
20727: LD_VAR 0 1
20731: PPUSH
20732: CALL_OW 74
20736: PPUSH
20737: CALL_OW 115
// wait ( 0 0$20 ) ;
20741: LD_INT 700
20743: PPUSH
20744: CALL_OW 67
// SetSide ( un , your_side ) ;
20748: LD_VAR 0 1
20752: PPUSH
20753: LD_OWVAR 2
20757: PPUSH
20758: CALL_OW 235
// end ;
20762: PPOPN 2
20764: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20765: LD_EXP 47
20769: PUSH
20770: LD_EXP 80
20774: AND
20775: IFFALSE 20881
20777: GO 20779
20779: DISABLE
20780: LD_INT 0
20782: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20783: LD_ADDR_VAR 0 1
20787: PUSH
20788: LD_INT 22
20790: PUSH
20791: LD_OWVAR 2
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: PUSH
20800: LD_INT 2
20802: PUSH
20803: LD_INT 30
20805: PUSH
20806: LD_INT 0
20808: PUSH
20809: EMPTY
20810: LIST
20811: LIST
20812: PUSH
20813: LD_INT 30
20815: PUSH
20816: LD_INT 1
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: LIST
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: PPUSH
20832: CALL_OW 69
20836: ST_TO_ADDR
// if not depot then
20837: LD_VAR 0 1
20841: NOT
20842: IFFALSE 20846
// exit ;
20844: GO 20881
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20846: LD_VAR 0 1
20850: PUSH
20851: LD_INT 1
20853: ARRAY
20854: PPUSH
20855: CALL_OW 250
20859: PPUSH
20860: LD_VAR 0 1
20864: PUSH
20865: LD_INT 1
20867: ARRAY
20868: PPUSH
20869: CALL_OW 251
20873: PPUSH
20874: LD_INT 70
20876: PPUSH
20877: CALL_OW 495
// end ;
20881: PPOPN 1
20883: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20884: LD_EXP 47
20888: PUSH
20889: LD_EXP 81
20893: AND
20894: IFFALSE 21105
20896: GO 20898
20898: DISABLE
20899: LD_INT 0
20901: PPUSH
20902: PPUSH
20903: PPUSH
20904: PPUSH
20905: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20906: LD_ADDR_VAR 0 5
20910: PUSH
20911: LD_INT 22
20913: PUSH
20914: LD_OWVAR 2
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: PUSH
20923: LD_INT 21
20925: PUSH
20926: LD_INT 1
20928: PUSH
20929: EMPTY
20930: LIST
20931: LIST
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: PPUSH
20937: CALL_OW 69
20941: ST_TO_ADDR
// if not tmp then
20942: LD_VAR 0 5
20946: NOT
20947: IFFALSE 20951
// exit ;
20949: GO 21105
// for i in tmp do
20951: LD_ADDR_VAR 0 1
20955: PUSH
20956: LD_VAR 0 5
20960: PUSH
20961: FOR_IN
20962: IFFALSE 21103
// begin d := rand ( 0 , 5 ) ;
20964: LD_ADDR_VAR 0 4
20968: PUSH
20969: LD_INT 0
20971: PPUSH
20972: LD_INT 5
20974: PPUSH
20975: CALL_OW 12
20979: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20980: LD_ADDR_VAR 0 2
20984: PUSH
20985: LD_VAR 0 1
20989: PPUSH
20990: CALL_OW 250
20994: PPUSH
20995: LD_VAR 0 4
20999: PPUSH
21000: LD_INT 3
21002: PPUSH
21003: LD_INT 12
21005: PPUSH
21006: CALL_OW 12
21010: PPUSH
21011: CALL_OW 272
21015: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21016: LD_ADDR_VAR 0 3
21020: PUSH
21021: LD_VAR 0 1
21025: PPUSH
21026: CALL_OW 251
21030: PPUSH
21031: LD_VAR 0 4
21035: PPUSH
21036: LD_INT 3
21038: PPUSH
21039: LD_INT 12
21041: PPUSH
21042: CALL_OW 12
21046: PPUSH
21047: CALL_OW 273
21051: ST_TO_ADDR
// if ValidHex ( x , y ) then
21052: LD_VAR 0 2
21056: PPUSH
21057: LD_VAR 0 3
21061: PPUSH
21062: CALL_OW 488
21066: IFFALSE 21101
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21068: LD_VAR 0 1
21072: PPUSH
21073: LD_VAR 0 2
21077: PPUSH
21078: LD_VAR 0 3
21082: PPUSH
21083: LD_INT 3
21085: PPUSH
21086: LD_INT 6
21088: PPUSH
21089: CALL_OW 12
21093: PPUSH
21094: LD_INT 1
21096: PPUSH
21097: CALL_OW 483
// end ;
21101: GO 20961
21103: POP
21104: POP
// end ;
21105: PPOPN 5
21107: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21108: LD_EXP 47
21112: PUSH
21113: LD_EXP 82
21117: AND
21118: IFFALSE 21212
21120: GO 21122
21122: DISABLE
21123: LD_INT 0
21125: PPUSH
21126: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21127: LD_ADDR_VAR 0 2
21131: PUSH
21132: LD_INT 22
21134: PUSH
21135: LD_OWVAR 2
21139: PUSH
21140: EMPTY
21141: LIST
21142: LIST
21143: PUSH
21144: LD_INT 32
21146: PUSH
21147: LD_INT 1
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: PUSH
21154: LD_INT 21
21156: PUSH
21157: LD_INT 2
21159: PUSH
21160: EMPTY
21161: LIST
21162: LIST
21163: PUSH
21164: EMPTY
21165: LIST
21166: LIST
21167: LIST
21168: PPUSH
21169: CALL_OW 69
21173: ST_TO_ADDR
// if not tmp then
21174: LD_VAR 0 2
21178: NOT
21179: IFFALSE 21183
// exit ;
21181: GO 21212
// for i in tmp do
21183: LD_ADDR_VAR 0 1
21187: PUSH
21188: LD_VAR 0 2
21192: PUSH
21193: FOR_IN
21194: IFFALSE 21210
// SetFuel ( i , 0 ) ;
21196: LD_VAR 0 1
21200: PPUSH
21201: LD_INT 0
21203: PPUSH
21204: CALL_OW 240
21208: GO 21193
21210: POP
21211: POP
// end ;
21212: PPOPN 2
21214: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21215: LD_EXP 47
21219: PUSH
21220: LD_EXP 83
21224: AND
21225: IFFALSE 21291
21227: GO 21229
21229: DISABLE
21230: LD_INT 0
21232: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21233: LD_ADDR_VAR 0 1
21237: PUSH
21238: LD_INT 22
21240: PUSH
21241: LD_OWVAR 2
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: PUSH
21250: LD_INT 30
21252: PUSH
21253: LD_INT 29
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: PPUSH
21264: CALL_OW 69
21268: ST_TO_ADDR
// if not tmp then
21269: LD_VAR 0 1
21273: NOT
21274: IFFALSE 21278
// exit ;
21276: GO 21291
// DestroyUnit ( tmp [ 1 ] ) ;
21278: LD_VAR 0 1
21282: PUSH
21283: LD_INT 1
21285: ARRAY
21286: PPUSH
21287: CALL_OW 65
// end ;
21291: PPOPN 1
21293: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21294: LD_EXP 47
21298: PUSH
21299: LD_EXP 85
21303: AND
21304: IFFALSE 21433
21306: GO 21308
21308: DISABLE
21309: LD_INT 0
21311: PPUSH
// begin uc_side := 0 ;
21312: LD_ADDR_OWVAR 20
21316: PUSH
21317: LD_INT 0
21319: ST_TO_ADDR
// uc_nation := nation_arabian ;
21320: LD_ADDR_OWVAR 21
21324: PUSH
21325: LD_INT 2
21327: ST_TO_ADDR
// hc_gallery :=  ;
21328: LD_ADDR_OWVAR 33
21332: PUSH
21333: LD_STRING 
21335: ST_TO_ADDR
// hc_name :=  ;
21336: LD_ADDR_OWVAR 26
21340: PUSH
21341: LD_STRING 
21343: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21344: LD_INT 1
21346: PPUSH
21347: LD_INT 11
21349: PPUSH
21350: LD_INT 10
21352: PPUSH
21353: CALL_OW 380
// un := CreateHuman ;
21357: LD_ADDR_VAR 0 1
21361: PUSH
21362: CALL_OW 44
21366: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21367: LD_VAR 0 1
21371: PPUSH
21372: LD_INT 1
21374: PPUSH
21375: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21379: LD_INT 35
21381: PPUSH
21382: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21386: LD_VAR 0 1
21390: PPUSH
21391: LD_INT 22
21393: PUSH
21394: LD_OWVAR 2
21398: PUSH
21399: EMPTY
21400: LIST
21401: LIST
21402: PPUSH
21403: CALL_OW 69
21407: PPUSH
21408: LD_VAR 0 1
21412: PPUSH
21413: CALL_OW 74
21417: PPUSH
21418: CALL_OW 115
// until IsDead ( un ) ;
21422: LD_VAR 0 1
21426: PPUSH
21427: CALL_OW 301
21431: IFFALSE 21379
// end ;
21433: PPOPN 1
21435: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21436: LD_EXP 47
21440: PUSH
21441: LD_EXP 87
21445: AND
21446: IFFALSE 21458
21448: GO 21450
21450: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21451: LD_STRING earthquake(getX(game), 0, 32)
21453: PPUSH
21454: CALL_OW 559
21458: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21459: LD_EXP 47
21463: PUSH
21464: LD_EXP 88
21468: AND
21469: IFFALSE 21560
21471: GO 21473
21473: DISABLE
21474: LD_INT 0
21476: PPUSH
// begin enable ;
21477: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21478: LD_ADDR_VAR 0 1
21482: PUSH
21483: LD_INT 22
21485: PUSH
21486: LD_OWVAR 2
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: PUSH
21495: LD_INT 21
21497: PUSH
21498: LD_INT 2
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: PUSH
21505: LD_INT 33
21507: PUSH
21508: LD_INT 3
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: LIST
21519: PPUSH
21520: CALL_OW 69
21524: ST_TO_ADDR
// if not tmp then
21525: LD_VAR 0 1
21529: NOT
21530: IFFALSE 21534
// exit ;
21532: GO 21560
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21534: LD_VAR 0 1
21538: PUSH
21539: LD_INT 1
21541: PPUSH
21542: LD_VAR 0 1
21546: PPUSH
21547: CALL_OW 12
21551: ARRAY
21552: PPUSH
21553: LD_INT 1
21555: PPUSH
21556: CALL_OW 234
// end ;
21560: PPOPN 1
21562: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21563: LD_EXP 47
21567: PUSH
21568: LD_EXP 89
21572: AND
21573: IFFALSE 21714
21575: GO 21577
21577: DISABLE
21578: LD_INT 0
21580: PPUSH
21581: PPUSH
21582: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21583: LD_ADDR_VAR 0 3
21587: PUSH
21588: LD_INT 22
21590: PUSH
21591: LD_OWVAR 2
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: PUSH
21600: LD_INT 25
21602: PUSH
21603: LD_INT 1
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: PPUSH
21614: CALL_OW 69
21618: ST_TO_ADDR
// if not tmp then
21619: LD_VAR 0 3
21623: NOT
21624: IFFALSE 21628
// exit ;
21626: GO 21714
// un := tmp [ rand ( 1 , tmp ) ] ;
21628: LD_ADDR_VAR 0 2
21632: PUSH
21633: LD_VAR 0 3
21637: PUSH
21638: LD_INT 1
21640: PPUSH
21641: LD_VAR 0 3
21645: PPUSH
21646: CALL_OW 12
21650: ARRAY
21651: ST_TO_ADDR
// if Crawls ( un ) then
21652: LD_VAR 0 2
21656: PPUSH
21657: CALL_OW 318
21661: IFFALSE 21672
// ComWalk ( un ) ;
21663: LD_VAR 0 2
21667: PPUSH
21668: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21672: LD_VAR 0 2
21676: PPUSH
21677: LD_INT 9
21679: PPUSH
21680: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21684: LD_INT 28
21686: PPUSH
21687: LD_OWVAR 2
21691: PPUSH
21692: LD_INT 2
21694: PPUSH
21695: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21699: LD_INT 29
21701: PPUSH
21702: LD_OWVAR 2
21706: PPUSH
21707: LD_INT 2
21709: PPUSH
21710: CALL_OW 322
// end ;
21714: PPOPN 3
21716: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21717: LD_EXP 47
21721: PUSH
21722: LD_EXP 90
21726: AND
21727: IFFALSE 21838
21729: GO 21731
21731: DISABLE
21732: LD_INT 0
21734: PPUSH
21735: PPUSH
21736: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21737: LD_ADDR_VAR 0 3
21741: PUSH
21742: LD_INT 22
21744: PUSH
21745: LD_OWVAR 2
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: PUSH
21754: LD_INT 25
21756: PUSH
21757: LD_INT 1
21759: PUSH
21760: EMPTY
21761: LIST
21762: LIST
21763: PUSH
21764: EMPTY
21765: LIST
21766: LIST
21767: PPUSH
21768: CALL_OW 69
21772: ST_TO_ADDR
// if not tmp then
21773: LD_VAR 0 3
21777: NOT
21778: IFFALSE 21782
// exit ;
21780: GO 21838
// un := tmp [ rand ( 1 , tmp ) ] ;
21782: LD_ADDR_VAR 0 2
21786: PUSH
21787: LD_VAR 0 3
21791: PUSH
21792: LD_INT 1
21794: PPUSH
21795: LD_VAR 0 3
21799: PPUSH
21800: CALL_OW 12
21804: ARRAY
21805: ST_TO_ADDR
// if Crawls ( un ) then
21806: LD_VAR 0 2
21810: PPUSH
21811: CALL_OW 318
21815: IFFALSE 21826
// ComWalk ( un ) ;
21817: LD_VAR 0 2
21821: PPUSH
21822: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21826: LD_VAR 0 2
21830: PPUSH
21831: LD_INT 8
21833: PPUSH
21834: CALL_OW 336
// end ;
21838: PPOPN 3
21840: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21841: LD_EXP 47
21845: PUSH
21846: LD_EXP 91
21850: AND
21851: IFFALSE 21995
21853: GO 21855
21855: DISABLE
21856: LD_INT 0
21858: PPUSH
21859: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21860: LD_ADDR_VAR 0 2
21864: PUSH
21865: LD_INT 22
21867: PUSH
21868: LD_OWVAR 2
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: PUSH
21877: LD_INT 21
21879: PUSH
21880: LD_INT 2
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: PUSH
21887: LD_INT 2
21889: PUSH
21890: LD_INT 34
21892: PUSH
21893: LD_INT 12
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: PUSH
21900: LD_INT 34
21902: PUSH
21903: LD_INT 51
21905: PUSH
21906: EMPTY
21907: LIST
21908: LIST
21909: PUSH
21910: LD_INT 34
21912: PUSH
21913: LD_INT 32
21915: PUSH
21916: EMPTY
21917: LIST
21918: LIST
21919: PUSH
21920: EMPTY
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: PUSH
21926: EMPTY
21927: LIST
21928: LIST
21929: LIST
21930: PPUSH
21931: CALL_OW 69
21935: ST_TO_ADDR
// if not tmp then
21936: LD_VAR 0 2
21940: NOT
21941: IFFALSE 21945
// exit ;
21943: GO 21995
// for i in tmp do
21945: LD_ADDR_VAR 0 1
21949: PUSH
21950: LD_VAR 0 2
21954: PUSH
21955: FOR_IN
21956: IFFALSE 21993
// if GetCargo ( i , mat_artifact ) = 0 then
21958: LD_VAR 0 1
21962: PPUSH
21963: LD_INT 4
21965: PPUSH
21966: CALL_OW 289
21970: PUSH
21971: LD_INT 0
21973: EQUAL
21974: IFFALSE 21991
// SetCargo ( i , mat_siberit , 100 ) ;
21976: LD_VAR 0 1
21980: PPUSH
21981: LD_INT 3
21983: PPUSH
21984: LD_INT 100
21986: PPUSH
21987: CALL_OW 290
21991: GO 21955
21993: POP
21994: POP
// end ;
21995: PPOPN 2
21997: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21998: LD_EXP 47
22002: PUSH
22003: LD_EXP 92
22007: AND
22008: IFFALSE 22191
22010: GO 22012
22012: DISABLE
22013: LD_INT 0
22015: PPUSH
22016: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22017: LD_ADDR_VAR 0 2
22021: PUSH
22022: LD_INT 22
22024: PUSH
22025: LD_OWVAR 2
22029: PUSH
22030: EMPTY
22031: LIST
22032: LIST
22033: PPUSH
22034: CALL_OW 69
22038: ST_TO_ADDR
// if not tmp then
22039: LD_VAR 0 2
22043: NOT
22044: IFFALSE 22048
// exit ;
22046: GO 22191
// for i := 1 to 2 do
22048: LD_ADDR_VAR 0 1
22052: PUSH
22053: DOUBLE
22054: LD_INT 1
22056: DEC
22057: ST_TO_ADDR
22058: LD_INT 2
22060: PUSH
22061: FOR_TO
22062: IFFALSE 22189
// begin uc_side := your_side ;
22064: LD_ADDR_OWVAR 20
22068: PUSH
22069: LD_OWVAR 2
22073: ST_TO_ADDR
// uc_nation := nation_american ;
22074: LD_ADDR_OWVAR 21
22078: PUSH
22079: LD_INT 1
22081: ST_TO_ADDR
// vc_chassis := us_morphling ;
22082: LD_ADDR_OWVAR 37
22086: PUSH
22087: LD_INT 5
22089: ST_TO_ADDR
// vc_engine := engine_siberite ;
22090: LD_ADDR_OWVAR 39
22094: PUSH
22095: LD_INT 3
22097: ST_TO_ADDR
// vc_control := control_computer ;
22098: LD_ADDR_OWVAR 38
22102: PUSH
22103: LD_INT 3
22105: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22106: LD_ADDR_OWVAR 40
22110: PUSH
22111: LD_INT 10
22113: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22114: LD_VAR 0 2
22118: PUSH
22119: LD_INT 1
22121: ARRAY
22122: PPUSH
22123: CALL_OW 310
22127: NOT
22128: IFFALSE 22175
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22130: CALL_OW 45
22134: PPUSH
22135: LD_VAR 0 2
22139: PUSH
22140: LD_INT 1
22142: ARRAY
22143: PPUSH
22144: CALL_OW 250
22148: PPUSH
22149: LD_VAR 0 2
22153: PUSH
22154: LD_INT 1
22156: ARRAY
22157: PPUSH
22158: CALL_OW 251
22162: PPUSH
22163: LD_INT 12
22165: PPUSH
22166: LD_INT 1
22168: PPUSH
22169: CALL_OW 50
22173: GO 22187
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22175: CALL_OW 45
22179: PPUSH
22180: LD_INT 1
22182: PPUSH
22183: CALL_OW 51
// end ;
22187: GO 22061
22189: POP
22190: POP
// end ;
22191: PPOPN 2
22193: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22194: LD_EXP 47
22198: PUSH
22199: LD_EXP 93
22203: AND
22204: IFFALSE 22426
22206: GO 22208
22208: DISABLE
22209: LD_INT 0
22211: PPUSH
22212: PPUSH
22213: PPUSH
22214: PPUSH
22215: PPUSH
22216: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22217: LD_ADDR_VAR 0 6
22221: PUSH
22222: LD_INT 22
22224: PUSH
22225: LD_OWVAR 2
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: PUSH
22234: LD_INT 21
22236: PUSH
22237: LD_INT 1
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PUSH
22244: LD_INT 3
22246: PUSH
22247: LD_INT 23
22249: PUSH
22250: LD_INT 0
22252: PUSH
22253: EMPTY
22254: LIST
22255: LIST
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: PUSH
22261: EMPTY
22262: LIST
22263: LIST
22264: LIST
22265: PPUSH
22266: CALL_OW 69
22270: ST_TO_ADDR
// if not tmp then
22271: LD_VAR 0 6
22275: NOT
22276: IFFALSE 22280
// exit ;
22278: GO 22426
// s1 := rand ( 1 , 4 ) ;
22280: LD_ADDR_VAR 0 2
22284: PUSH
22285: LD_INT 1
22287: PPUSH
22288: LD_INT 4
22290: PPUSH
22291: CALL_OW 12
22295: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22296: LD_ADDR_VAR 0 4
22300: PUSH
22301: LD_VAR 0 6
22305: PUSH
22306: LD_INT 1
22308: ARRAY
22309: PPUSH
22310: LD_VAR 0 2
22314: PPUSH
22315: CALL_OW 259
22319: ST_TO_ADDR
// if s1 = 1 then
22320: LD_VAR 0 2
22324: PUSH
22325: LD_INT 1
22327: EQUAL
22328: IFFALSE 22348
// s2 := rand ( 2 , 4 ) else
22330: LD_ADDR_VAR 0 3
22334: PUSH
22335: LD_INT 2
22337: PPUSH
22338: LD_INT 4
22340: PPUSH
22341: CALL_OW 12
22345: ST_TO_ADDR
22346: GO 22356
// s2 := 1 ;
22348: LD_ADDR_VAR 0 3
22352: PUSH
22353: LD_INT 1
22355: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22356: LD_ADDR_VAR 0 5
22360: PUSH
22361: LD_VAR 0 6
22365: PUSH
22366: LD_INT 1
22368: ARRAY
22369: PPUSH
22370: LD_VAR 0 3
22374: PPUSH
22375: CALL_OW 259
22379: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22380: LD_VAR 0 6
22384: PUSH
22385: LD_INT 1
22387: ARRAY
22388: PPUSH
22389: LD_VAR 0 2
22393: PPUSH
22394: LD_VAR 0 5
22398: PPUSH
22399: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22403: LD_VAR 0 6
22407: PUSH
22408: LD_INT 1
22410: ARRAY
22411: PPUSH
22412: LD_VAR 0 3
22416: PPUSH
22417: LD_VAR 0 4
22421: PPUSH
22422: CALL_OW 237
// end ;
22426: PPOPN 6
22428: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22429: LD_EXP 47
22433: PUSH
22434: LD_EXP 94
22438: AND
22439: IFFALSE 22518
22441: GO 22443
22443: DISABLE
22444: LD_INT 0
22446: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22447: LD_ADDR_VAR 0 1
22451: PUSH
22452: LD_INT 22
22454: PUSH
22455: LD_OWVAR 2
22459: PUSH
22460: EMPTY
22461: LIST
22462: LIST
22463: PUSH
22464: LD_INT 30
22466: PUSH
22467: LD_INT 3
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: PUSH
22474: EMPTY
22475: LIST
22476: LIST
22477: PPUSH
22478: CALL_OW 69
22482: ST_TO_ADDR
// if not tmp then
22483: LD_VAR 0 1
22487: NOT
22488: IFFALSE 22492
// exit ;
22490: GO 22518
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22492: LD_VAR 0 1
22496: PUSH
22497: LD_INT 1
22499: PPUSH
22500: LD_VAR 0 1
22504: PPUSH
22505: CALL_OW 12
22509: ARRAY
22510: PPUSH
22511: LD_INT 1
22513: PPUSH
22514: CALL_OW 234
// end ;
22518: PPOPN 1
22520: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22521: LD_EXP 47
22525: PUSH
22526: LD_EXP 95
22530: AND
22531: IFFALSE 22643
22533: GO 22535
22535: DISABLE
22536: LD_INT 0
22538: PPUSH
22539: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22540: LD_ADDR_VAR 0 2
22544: PUSH
22545: LD_INT 22
22547: PUSH
22548: LD_OWVAR 2
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: PUSH
22557: LD_INT 2
22559: PUSH
22560: LD_INT 30
22562: PUSH
22563: LD_INT 27
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: PUSH
22570: LD_INT 30
22572: PUSH
22573: LD_INT 26
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: PUSH
22580: LD_INT 30
22582: PUSH
22583: LD_INT 28
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: PPUSH
22600: CALL_OW 69
22604: ST_TO_ADDR
// if not tmp then
22605: LD_VAR 0 2
22609: NOT
22610: IFFALSE 22614
// exit ;
22612: GO 22643
// for i in tmp do
22614: LD_ADDR_VAR 0 1
22618: PUSH
22619: LD_VAR 0 2
22623: PUSH
22624: FOR_IN
22625: IFFALSE 22641
// SetLives ( i , 1 ) ;
22627: LD_VAR 0 1
22631: PPUSH
22632: LD_INT 1
22634: PPUSH
22635: CALL_OW 234
22639: GO 22624
22641: POP
22642: POP
// end ;
22643: PPOPN 2
22645: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22646: LD_EXP 47
22650: PUSH
22651: LD_EXP 96
22655: AND
22656: IFFALSE 22930
22658: GO 22660
22660: DISABLE
22661: LD_INT 0
22663: PPUSH
22664: PPUSH
22665: PPUSH
// begin i := rand ( 1 , 7 ) ;
22666: LD_ADDR_VAR 0 1
22670: PUSH
22671: LD_INT 1
22673: PPUSH
22674: LD_INT 7
22676: PPUSH
22677: CALL_OW 12
22681: ST_TO_ADDR
// case i of 1 :
22682: LD_VAR 0 1
22686: PUSH
22687: LD_INT 1
22689: DOUBLE
22690: EQUAL
22691: IFTRUE 22695
22693: GO 22705
22695: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22696: LD_STRING earthquake(getX(game), 0, 32)
22698: PPUSH
22699: CALL_OW 559
22703: GO 22930
22705: LD_INT 2
22707: DOUBLE
22708: EQUAL
22709: IFTRUE 22713
22711: GO 22727
22713: POP
// begin ToLua ( displayStucuk(); ) ;
22714: LD_STRING displayStucuk();
22716: PPUSH
22717: CALL_OW 559
// ResetFog ;
22721: CALL_OW 335
// end ; 3 :
22725: GO 22930
22727: LD_INT 3
22729: DOUBLE
22730: EQUAL
22731: IFTRUE 22735
22733: GO 22839
22735: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22736: LD_ADDR_VAR 0 2
22740: PUSH
22741: LD_INT 22
22743: PUSH
22744: LD_OWVAR 2
22748: PUSH
22749: EMPTY
22750: LIST
22751: LIST
22752: PUSH
22753: LD_INT 25
22755: PUSH
22756: LD_INT 1
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: PPUSH
22767: CALL_OW 69
22771: ST_TO_ADDR
// if not tmp then
22772: LD_VAR 0 2
22776: NOT
22777: IFFALSE 22781
// exit ;
22779: GO 22930
// un := tmp [ rand ( 1 , tmp ) ] ;
22781: LD_ADDR_VAR 0 3
22785: PUSH
22786: LD_VAR 0 2
22790: PUSH
22791: LD_INT 1
22793: PPUSH
22794: LD_VAR 0 2
22798: PPUSH
22799: CALL_OW 12
22803: ARRAY
22804: ST_TO_ADDR
// if Crawls ( un ) then
22805: LD_VAR 0 3
22809: PPUSH
22810: CALL_OW 318
22814: IFFALSE 22825
// ComWalk ( un ) ;
22816: LD_VAR 0 3
22820: PPUSH
22821: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22825: LD_VAR 0 3
22829: PPUSH
22830: LD_INT 8
22832: PPUSH
22833: CALL_OW 336
// end ; 4 :
22837: GO 22930
22839: LD_INT 4
22841: DOUBLE
22842: EQUAL
22843: IFTRUE 22847
22845: GO 22908
22847: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22848: LD_ADDR_VAR 0 2
22852: PUSH
22853: LD_INT 22
22855: PUSH
22856: LD_OWVAR 2
22860: PUSH
22861: EMPTY
22862: LIST
22863: LIST
22864: PUSH
22865: LD_INT 30
22867: PUSH
22868: LD_INT 29
22870: PUSH
22871: EMPTY
22872: LIST
22873: LIST
22874: PUSH
22875: EMPTY
22876: LIST
22877: LIST
22878: PPUSH
22879: CALL_OW 69
22883: ST_TO_ADDR
// if not tmp then
22884: LD_VAR 0 2
22888: NOT
22889: IFFALSE 22893
// exit ;
22891: GO 22930
// DestroyUnit ( tmp [ 1 ] ) ;
22893: LD_VAR 0 2
22897: PUSH
22898: LD_INT 1
22900: ARRAY
22901: PPUSH
22902: CALL_OW 65
// end ; 5 .. 7 :
22906: GO 22930
22908: LD_INT 5
22910: DOUBLE
22911: GREATEREQUAL
22912: IFFALSE 22920
22914: LD_INT 7
22916: DOUBLE
22917: LESSEQUAL
22918: IFTRUE 22922
22920: GO 22929
22922: POP
// StreamSibBomb ; end ;
22923: CALL 19180 0 0
22927: GO 22930
22929: POP
// end ;
22930: PPOPN 3
22932: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22933: LD_EXP 47
22937: PUSH
22938: LD_EXP 97
22942: AND
22943: IFFALSE 23099
22945: GO 22947
22947: DISABLE
22948: LD_INT 0
22950: PPUSH
22951: PPUSH
22952: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22953: LD_ADDR_VAR 0 2
22957: PUSH
22958: LD_INT 81
22960: PUSH
22961: LD_OWVAR 2
22965: PUSH
22966: EMPTY
22967: LIST
22968: LIST
22969: PUSH
22970: LD_INT 2
22972: PUSH
22973: LD_INT 21
22975: PUSH
22976: LD_INT 1
22978: PUSH
22979: EMPTY
22980: LIST
22981: LIST
22982: PUSH
22983: LD_INT 21
22985: PUSH
22986: LD_INT 2
22988: PUSH
22989: EMPTY
22990: LIST
22991: LIST
22992: PUSH
22993: EMPTY
22994: LIST
22995: LIST
22996: LIST
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: PPUSH
23002: CALL_OW 69
23006: ST_TO_ADDR
// if not tmp then
23007: LD_VAR 0 2
23011: NOT
23012: IFFALSE 23016
// exit ;
23014: GO 23099
// p := 0 ;
23016: LD_ADDR_VAR 0 3
23020: PUSH
23021: LD_INT 0
23023: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23024: LD_INT 35
23026: PPUSH
23027: CALL_OW 67
// p := p + 1 ;
23031: LD_ADDR_VAR 0 3
23035: PUSH
23036: LD_VAR 0 3
23040: PUSH
23041: LD_INT 1
23043: PLUS
23044: ST_TO_ADDR
// for i in tmp do
23045: LD_ADDR_VAR 0 1
23049: PUSH
23050: LD_VAR 0 2
23054: PUSH
23055: FOR_IN
23056: IFFALSE 23087
// if GetLives ( i ) < 1000 then
23058: LD_VAR 0 1
23062: PPUSH
23063: CALL_OW 256
23067: PUSH
23068: LD_INT 1000
23070: LESS
23071: IFFALSE 23085
// SetLives ( i , 1000 ) ;
23073: LD_VAR 0 1
23077: PPUSH
23078: LD_INT 1000
23080: PPUSH
23081: CALL_OW 234
23085: GO 23055
23087: POP
23088: POP
// until p > 20 ;
23089: LD_VAR 0 3
23093: PUSH
23094: LD_INT 20
23096: GREATER
23097: IFFALSE 23024
// end ;
23099: PPOPN 3
23101: END
// every 0 0$1 trigger StreamModeActive and sTime do
23102: LD_EXP 47
23106: PUSH
23107: LD_EXP 98
23111: AND
23112: IFFALSE 23147
23114: GO 23116
23116: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23117: LD_INT 28
23119: PPUSH
23120: LD_OWVAR 2
23124: PPUSH
23125: LD_INT 2
23127: PPUSH
23128: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23132: LD_INT 30
23134: PPUSH
23135: LD_OWVAR 2
23139: PPUSH
23140: LD_INT 2
23142: PPUSH
23143: CALL_OW 322
// end ;
23147: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23148: LD_EXP 47
23152: PUSH
23153: LD_EXP 99
23157: AND
23158: IFFALSE 23279
23160: GO 23162
23162: DISABLE
23163: LD_INT 0
23165: PPUSH
23166: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23167: LD_ADDR_VAR 0 2
23171: PUSH
23172: LD_INT 22
23174: PUSH
23175: LD_OWVAR 2
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: PUSH
23184: LD_INT 21
23186: PUSH
23187: LD_INT 1
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PUSH
23194: LD_INT 3
23196: PUSH
23197: LD_INT 23
23199: PUSH
23200: LD_INT 0
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: PUSH
23207: EMPTY
23208: LIST
23209: LIST
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: LIST
23215: PPUSH
23216: CALL_OW 69
23220: ST_TO_ADDR
// if not tmp then
23221: LD_VAR 0 2
23225: NOT
23226: IFFALSE 23230
// exit ;
23228: GO 23279
// for i in tmp do
23230: LD_ADDR_VAR 0 1
23234: PUSH
23235: LD_VAR 0 2
23239: PUSH
23240: FOR_IN
23241: IFFALSE 23277
// begin if Crawls ( i ) then
23243: LD_VAR 0 1
23247: PPUSH
23248: CALL_OW 318
23252: IFFALSE 23263
// ComWalk ( i ) ;
23254: LD_VAR 0 1
23258: PPUSH
23259: CALL_OW 138
// SetClass ( i , 2 ) ;
23263: LD_VAR 0 1
23267: PPUSH
23268: LD_INT 2
23270: PPUSH
23271: CALL_OW 336
// end ;
23275: GO 23240
23277: POP
23278: POP
// end ;
23279: PPOPN 2
23281: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23282: LD_EXP 47
23286: PUSH
23287: LD_EXP 100
23291: AND
23292: IFFALSE 23573
23294: GO 23296
23296: DISABLE
23297: LD_INT 0
23299: PPUSH
23300: PPUSH
23301: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23302: LD_OWVAR 2
23306: PPUSH
23307: LD_INT 9
23309: PPUSH
23310: LD_INT 1
23312: PPUSH
23313: LD_INT 1
23315: PPUSH
23316: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23320: LD_INT 9
23322: PPUSH
23323: LD_OWVAR 2
23327: PPUSH
23328: CALL_OW 343
// uc_side := 9 ;
23332: LD_ADDR_OWVAR 20
23336: PUSH
23337: LD_INT 9
23339: ST_TO_ADDR
// uc_nation := 2 ;
23340: LD_ADDR_OWVAR 21
23344: PUSH
23345: LD_INT 2
23347: ST_TO_ADDR
// hc_name := Dark Warrior ;
23348: LD_ADDR_OWVAR 26
23352: PUSH
23353: LD_STRING Dark Warrior
23355: ST_TO_ADDR
// hc_gallery :=  ;
23356: LD_ADDR_OWVAR 33
23360: PUSH
23361: LD_STRING 
23363: ST_TO_ADDR
// hc_noskilllimit := true ;
23364: LD_ADDR_OWVAR 76
23368: PUSH
23369: LD_INT 1
23371: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23372: LD_ADDR_OWVAR 31
23376: PUSH
23377: LD_INT 30
23379: PUSH
23380: LD_INT 30
23382: PUSH
23383: LD_INT 30
23385: PUSH
23386: LD_INT 30
23388: PUSH
23389: EMPTY
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: ST_TO_ADDR
// un := CreateHuman ;
23395: LD_ADDR_VAR 0 3
23399: PUSH
23400: CALL_OW 44
23404: ST_TO_ADDR
// hc_noskilllimit := false ;
23405: LD_ADDR_OWVAR 76
23409: PUSH
23410: LD_INT 0
23412: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23413: LD_VAR 0 3
23417: PPUSH
23418: LD_INT 1
23420: PPUSH
23421: CALL_OW 51
// p := 0 ;
23425: LD_ADDR_VAR 0 2
23429: PUSH
23430: LD_INT 0
23432: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23433: LD_INT 35
23435: PPUSH
23436: CALL_OW 67
// p := p + 1 ;
23440: LD_ADDR_VAR 0 2
23444: PUSH
23445: LD_VAR 0 2
23449: PUSH
23450: LD_INT 1
23452: PLUS
23453: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23454: LD_VAR 0 3
23458: PPUSH
23459: CALL_OW 256
23463: PUSH
23464: LD_INT 1000
23466: LESS
23467: IFFALSE 23481
// SetLives ( un , 1000 ) ;
23469: LD_VAR 0 3
23473: PPUSH
23474: LD_INT 1000
23476: PPUSH
23477: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23481: LD_VAR 0 3
23485: PPUSH
23486: LD_INT 81
23488: PUSH
23489: LD_OWVAR 2
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: PUSH
23498: LD_INT 91
23500: PUSH
23501: LD_VAR 0 3
23505: PUSH
23506: LD_INT 30
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: LIST
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: PPUSH
23518: CALL_OW 69
23522: PPUSH
23523: LD_VAR 0 3
23527: PPUSH
23528: CALL_OW 74
23532: PPUSH
23533: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
23537: LD_VAR 0 2
23541: PUSH
23542: LD_INT 60
23544: GREATER
23545: PUSH
23546: LD_VAR 0 3
23550: PPUSH
23551: CALL_OW 301
23555: OR
23556: IFFALSE 23433
// if un then
23558: LD_VAR 0 3
23562: IFFALSE 23573
// RemoveUnit ( un ) ;
23564: LD_VAR 0 3
23568: PPUSH
23569: CALL_OW 64
// end ;
23573: PPOPN 3
23575: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23576: LD_INT 0
23578: PPUSH
23579: PPUSH
23580: PPUSH
23581: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23582: LD_ADDR_VAR 0 4
23586: PUSH
23587: LD_INT 22
23589: PUSH
23590: LD_OWVAR 2
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: PUSH
23599: LD_INT 2
23601: PUSH
23602: LD_INT 30
23604: PUSH
23605: LD_INT 0
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: PUSH
23612: LD_INT 30
23614: PUSH
23615: LD_INT 1
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: LIST
23626: PUSH
23627: EMPTY
23628: LIST
23629: LIST
23630: PPUSH
23631: CALL_OW 69
23635: ST_TO_ADDR
// if not tmp then
23636: LD_VAR 0 4
23640: NOT
23641: IFFALSE 23645
// exit ;
23643: GO 23704
// for i in tmp do
23645: LD_ADDR_VAR 0 2
23649: PUSH
23650: LD_VAR 0 4
23654: PUSH
23655: FOR_IN
23656: IFFALSE 23702
// for j = 1 to 3 do
23658: LD_ADDR_VAR 0 3
23662: PUSH
23663: DOUBLE
23664: LD_INT 1
23666: DEC
23667: ST_TO_ADDR
23668: LD_INT 3
23670: PUSH
23671: FOR_TO
23672: IFFALSE 23698
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23674: LD_VAR 0 2
23678: PPUSH
23679: CALL_OW 274
23683: PPUSH
23684: LD_VAR 0 3
23688: PPUSH
23689: LD_INT 99999
23691: PPUSH
23692: CALL_OW 277
23696: GO 23671
23698: POP
23699: POP
23700: GO 23655
23702: POP
23703: POP
// end ;
23704: LD_VAR 0 1
23708: RET
// export function hHackSetLevel10 ; var i , j ; begin
23709: LD_INT 0
23711: PPUSH
23712: PPUSH
23713: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23714: LD_ADDR_VAR 0 2
23718: PUSH
23719: LD_INT 21
23721: PUSH
23722: LD_INT 1
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PPUSH
23729: CALL_OW 69
23733: PUSH
23734: FOR_IN
23735: IFFALSE 23787
// if IsSelected ( i ) then
23737: LD_VAR 0 2
23741: PPUSH
23742: CALL_OW 306
23746: IFFALSE 23785
// begin for j := 1 to 4 do
23748: LD_ADDR_VAR 0 3
23752: PUSH
23753: DOUBLE
23754: LD_INT 1
23756: DEC
23757: ST_TO_ADDR
23758: LD_INT 4
23760: PUSH
23761: FOR_TO
23762: IFFALSE 23783
// SetSkill ( i , j , 10 ) ;
23764: LD_VAR 0 2
23768: PPUSH
23769: LD_VAR 0 3
23773: PPUSH
23774: LD_INT 10
23776: PPUSH
23777: CALL_OW 237
23781: GO 23761
23783: POP
23784: POP
// end ;
23785: GO 23734
23787: POP
23788: POP
// end ;
23789: LD_VAR 0 1
23793: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23794: LD_INT 0
23796: PPUSH
23797: PPUSH
23798: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23799: LD_ADDR_VAR 0 2
23803: PUSH
23804: LD_INT 22
23806: PUSH
23807: LD_OWVAR 2
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: PUSH
23816: LD_INT 21
23818: PUSH
23819: LD_INT 1
23821: PUSH
23822: EMPTY
23823: LIST
23824: LIST
23825: PUSH
23826: EMPTY
23827: LIST
23828: LIST
23829: PPUSH
23830: CALL_OW 69
23834: PUSH
23835: FOR_IN
23836: IFFALSE 23877
// begin for j := 1 to 4 do
23838: LD_ADDR_VAR 0 3
23842: PUSH
23843: DOUBLE
23844: LD_INT 1
23846: DEC
23847: ST_TO_ADDR
23848: LD_INT 4
23850: PUSH
23851: FOR_TO
23852: IFFALSE 23873
// SetSkill ( i , j , 10 ) ;
23854: LD_VAR 0 2
23858: PPUSH
23859: LD_VAR 0 3
23863: PPUSH
23864: LD_INT 10
23866: PPUSH
23867: CALL_OW 237
23871: GO 23851
23873: POP
23874: POP
// end ;
23875: GO 23835
23877: POP
23878: POP
// end ;
23879: LD_VAR 0 1
23883: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
23884: LD_INT 0
23886: PPUSH
// uc_side := your_side ;
23887: LD_ADDR_OWVAR 20
23891: PUSH
23892: LD_OWVAR 2
23896: ST_TO_ADDR
// uc_nation := nation ;
23897: LD_ADDR_OWVAR 21
23901: PUSH
23902: LD_VAR 0 1
23906: ST_TO_ADDR
// InitHc ;
23907: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23911: LD_INT 0
23913: PPUSH
23914: LD_VAR 0 2
23918: PPUSH
23919: LD_VAR 0 3
23923: PPUSH
23924: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
23928: CALL_OW 44
23932: PPUSH
23933: LD_INT 1
23935: PPUSH
23936: CALL_OW 51
// end ;
23940: LD_VAR 0 4
23944: RET
// export function hHackSpawnVehicle ; begin
23945: LD_INT 0
23947: PPUSH
// uc_side := your_side ;
23948: LD_ADDR_OWVAR 20
23952: PUSH
23953: LD_OWVAR 2
23957: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
23958: LD_ADDR_OWVAR 21
23962: PUSH
23963: LD_INT 1
23965: PPUSH
23966: LD_INT 3
23968: PPUSH
23969: CALL_OW 12
23973: ST_TO_ADDR
// InitVc ;
23974: CALL_OW 20
// case uc_nation of 1 :
23978: LD_OWVAR 21
23982: PUSH
23983: LD_INT 1
23985: DOUBLE
23986: EQUAL
23987: IFTRUE 23991
23989: GO 24135
23991: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
23992: LD_ADDR_OWVAR 37
23996: PUSH
23997: LD_INT 1
23999: PUSH
24000: LD_INT 2
24002: PUSH
24003: LD_INT 3
24005: PUSH
24006: LD_INT 4
24008: PUSH
24009: LD_INT 5
24011: PUSH
24012: EMPTY
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: PUSH
24019: LD_INT 1
24021: PPUSH
24022: LD_INT 5
24024: PPUSH
24025: CALL_OW 12
24029: ARRAY
24030: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
24031: LD_ADDR_OWVAR 39
24035: PUSH
24036: LD_INT 1
24038: PPUSH
24039: LD_INT 3
24041: PPUSH
24042: CALL_OW 12
24046: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
24047: LD_ADDR_OWVAR 38
24051: PUSH
24052: LD_INT 1
24054: PUSH
24055: LD_INT 2
24057: PUSH
24058: LD_INT 3
24060: PUSH
24061: EMPTY
24062: LIST
24063: LIST
24064: LIST
24065: PUSH
24066: LD_INT 1
24068: PPUSH
24069: LD_INT 3
24071: PPUSH
24072: CALL_OW 12
24076: ARRAY
24077: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
24078: LD_ADDR_OWVAR 40
24082: PUSH
24083: LD_INT 2
24085: PUSH
24086: LD_INT 4
24088: PUSH
24089: LD_INT 5
24091: PUSH
24092: LD_INT 3
24094: PUSH
24095: LD_INT 7
24097: PUSH
24098: LD_INT 8
24100: PUSH
24101: LD_INT 9
24103: PUSH
24104: LD_INT 10
24106: PUSH
24107: LD_INT 6
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: PUSH
24121: LD_INT 1
24123: PPUSH
24124: LD_INT 9
24126: PPUSH
24127: CALL_OW 12
24131: ARRAY
24132: ST_TO_ADDR
// end ; 2 :
24133: GO 24400
24135: LD_INT 2
24137: DOUBLE
24138: EQUAL
24139: IFTRUE 24143
24141: GO 24267
24143: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
24144: LD_ADDR_OWVAR 37
24148: PUSH
24149: LD_INT 11
24151: PUSH
24152: LD_INT 12
24154: PUSH
24155: LD_INT 13
24157: PUSH
24158: LD_INT 14
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: PUSH
24167: LD_INT 1
24169: PPUSH
24170: LD_INT 4
24172: PPUSH
24173: CALL_OW 12
24177: ARRAY
24178: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
24179: LD_ADDR_OWVAR 39
24183: PUSH
24184: LD_INT 1
24186: PPUSH
24187: LD_INT 3
24189: PPUSH
24190: CALL_OW 12
24194: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
24195: LD_ADDR_OWVAR 38
24199: PUSH
24200: LD_INT 1
24202: PUSH
24203: LD_INT 2
24205: PUSH
24206: LD_INT 5
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: LIST
24213: PUSH
24214: LD_INT 1
24216: PPUSH
24217: LD_INT 3
24219: PPUSH
24220: CALL_OW 12
24224: ARRAY
24225: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
24226: LD_ADDR_OWVAR 40
24230: PUSH
24231: LD_INT 24
24233: PUSH
24234: LD_INT 26
24236: PUSH
24237: LD_INT 27
24239: PUSH
24240: LD_INT 28
24242: PUSH
24243: LD_INT 29
24245: PUSH
24246: EMPTY
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: PUSH
24253: LD_INT 1
24255: PPUSH
24256: LD_INT 5
24258: PPUSH
24259: CALL_OW 12
24263: ARRAY
24264: ST_TO_ADDR
// end ; 3 :
24265: GO 24400
24267: LD_INT 3
24269: DOUBLE
24270: EQUAL
24271: IFTRUE 24275
24273: GO 24399
24275: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
24276: LD_ADDR_OWVAR 37
24280: PUSH
24281: LD_INT 21
24283: PUSH
24284: LD_INT 23
24286: PUSH
24287: LD_INT 22
24289: PUSH
24290: LD_INT 24
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: PUSH
24299: LD_INT 1
24301: PPUSH
24302: LD_INT 4
24304: PPUSH
24305: CALL_OW 12
24309: ARRAY
24310: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
24311: LD_ADDR_OWVAR 39
24315: PUSH
24316: LD_INT 1
24318: PPUSH
24319: LD_INT 3
24321: PPUSH
24322: CALL_OW 12
24326: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
24327: LD_ADDR_OWVAR 38
24331: PUSH
24332: LD_INT 1
24334: PUSH
24335: LD_INT 3
24337: PUSH
24338: EMPTY
24339: LIST
24340: LIST
24341: PUSH
24342: LD_INT 1
24344: PPUSH
24345: LD_INT 2
24347: PPUSH
24348: CALL_OW 12
24352: ARRAY
24353: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
24354: LD_ADDR_OWVAR 40
24358: PUSH
24359: LD_INT 42
24361: PUSH
24362: LD_INT 43
24364: PUSH
24365: LD_INT 44
24367: PUSH
24368: LD_INT 46
24370: PUSH
24371: LD_INT 48
24373: PUSH
24374: LD_INT 47
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: PUSH
24385: LD_INT 1
24387: PPUSH
24388: LD_INT 6
24390: PPUSH
24391: CALL_OW 12
24395: ARRAY
24396: ST_TO_ADDR
// end ; end ;
24397: GO 24400
24399: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
24400: CALL_OW 45
24404: PPUSH
24405: LD_INT 1
24407: PPUSH
24408: CALL_OW 51
// end ;
24412: LD_VAR 0 1
24416: RET
// export hInvincible ; every 1 do
24417: GO 24419
24419: DISABLE
// hInvincible := [ ] ;
24420: LD_ADDR_EXP 101
24424: PUSH
24425: EMPTY
24426: ST_TO_ADDR
24427: END
// every 10 do var i ;
24428: GO 24430
24430: DISABLE
24431: LD_INT 0
24433: PPUSH
// begin enable ;
24434: ENABLE
// if not hInvincible then
24435: LD_EXP 101
24439: NOT
24440: IFFALSE 24444
// exit ;
24442: GO 24488
// for i in hInvincible do
24444: LD_ADDR_VAR 0 1
24448: PUSH
24449: LD_EXP 101
24453: PUSH
24454: FOR_IN
24455: IFFALSE 24486
// if GetLives ( i ) < 1000 then
24457: LD_VAR 0 1
24461: PPUSH
24462: CALL_OW 256
24466: PUSH
24467: LD_INT 1000
24469: LESS
24470: IFFALSE 24484
// SetLives ( i , 1000 ) ;
24472: LD_VAR 0 1
24476: PPUSH
24477: LD_INT 1000
24479: PPUSH
24480: CALL_OW 234
24484: GO 24454
24486: POP
24487: POP
// end ;
24488: PPOPN 1
24490: END
// export function hHackInvincible ; var i ; begin
24491: LD_INT 0
24493: PPUSH
24494: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24495: LD_ADDR_VAR 0 2
24499: PUSH
24500: LD_INT 2
24502: PUSH
24503: LD_INT 21
24505: PUSH
24506: LD_INT 1
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: PUSH
24513: LD_INT 21
24515: PUSH
24516: LD_INT 2
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: LIST
24527: PPUSH
24528: CALL_OW 69
24532: PUSH
24533: FOR_IN
24534: IFFALSE 24595
// if IsSelected ( i ) then
24536: LD_VAR 0 2
24540: PPUSH
24541: CALL_OW 306
24545: IFFALSE 24593
// begin if i in hInvincible then
24547: LD_VAR 0 2
24551: PUSH
24552: LD_EXP 101
24556: IN
24557: IFFALSE 24577
// hInvincible := hInvincible diff i else
24559: LD_ADDR_EXP 101
24563: PUSH
24564: LD_EXP 101
24568: PUSH
24569: LD_VAR 0 2
24573: DIFF
24574: ST_TO_ADDR
24575: GO 24593
// hInvincible := hInvincible union i ;
24577: LD_ADDR_EXP 101
24581: PUSH
24582: LD_EXP 101
24586: PUSH
24587: LD_VAR 0 2
24591: UNION
24592: ST_TO_ADDR
// end ;
24593: GO 24533
24595: POP
24596: POP
// end ;
24597: LD_VAR 0 1
24601: RET
// export function hHackInvisible ; var i , j ; begin
24602: LD_INT 0
24604: PPUSH
24605: PPUSH
24606: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24607: LD_ADDR_VAR 0 2
24611: PUSH
24612: LD_INT 21
24614: PUSH
24615: LD_INT 1
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: PPUSH
24622: CALL_OW 69
24626: PUSH
24627: FOR_IN
24628: IFFALSE 24652
// if IsSelected ( i ) then
24630: LD_VAR 0 2
24634: PPUSH
24635: CALL_OW 306
24639: IFFALSE 24650
// ComForceInvisible ( i ) ;
24641: LD_VAR 0 2
24645: PPUSH
24646: CALL_OW 496
24650: GO 24627
24652: POP
24653: POP
// end ;
24654: LD_VAR 0 1
24658: RET
// export function hHackChangeYourSide ; begin
24659: LD_INT 0
24661: PPUSH
// if your_side = 8 then
24662: LD_OWVAR 2
24666: PUSH
24667: LD_INT 8
24669: EQUAL
24670: IFFALSE 24682
// your_side := 0 else
24672: LD_ADDR_OWVAR 2
24676: PUSH
24677: LD_INT 0
24679: ST_TO_ADDR
24680: GO 24696
// your_side := your_side + 1 ;
24682: LD_ADDR_OWVAR 2
24686: PUSH
24687: LD_OWVAR 2
24691: PUSH
24692: LD_INT 1
24694: PLUS
24695: ST_TO_ADDR
// end ;
24696: LD_VAR 0 1
24700: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24701: LD_INT 0
24703: PPUSH
24704: PPUSH
24705: PPUSH
// for i in all_units do
24706: LD_ADDR_VAR 0 2
24710: PUSH
24711: LD_OWVAR 3
24715: PUSH
24716: FOR_IN
24717: IFFALSE 24795
// if IsSelected ( i ) then
24719: LD_VAR 0 2
24723: PPUSH
24724: CALL_OW 306
24728: IFFALSE 24793
// begin j := GetSide ( i ) ;
24730: LD_ADDR_VAR 0 3
24734: PUSH
24735: LD_VAR 0 2
24739: PPUSH
24740: CALL_OW 255
24744: ST_TO_ADDR
// if j = 8 then
24745: LD_VAR 0 3
24749: PUSH
24750: LD_INT 8
24752: EQUAL
24753: IFFALSE 24765
// j := 0 else
24755: LD_ADDR_VAR 0 3
24759: PUSH
24760: LD_INT 0
24762: ST_TO_ADDR
24763: GO 24779
// j := j + 1 ;
24765: LD_ADDR_VAR 0 3
24769: PUSH
24770: LD_VAR 0 3
24774: PUSH
24775: LD_INT 1
24777: PLUS
24778: ST_TO_ADDR
// SetSide ( i , j ) ;
24779: LD_VAR 0 2
24783: PPUSH
24784: LD_VAR 0 3
24788: PPUSH
24789: CALL_OW 235
// end ;
24793: GO 24716
24795: POP
24796: POP
// end ;
24797: LD_VAR 0 1
24801: RET
// export function hHackFog ; begin
24802: LD_INT 0
24804: PPUSH
// FogOff ( true ) ;
24805: LD_INT 1
24807: PPUSH
24808: CALL_OW 344
// end ;
24812: LD_VAR 0 1
24816: RET
// export function hHackApeman ; begin
24817: LD_INT 0
24819: PPUSH
// uc_side := your_side ;
24820: LD_ADDR_OWVAR 20
24824: PUSH
24825: LD_OWVAR 2
24829: ST_TO_ADDR
// uc_nation := 0 ;
24830: LD_ADDR_OWVAR 21
24834: PUSH
24835: LD_INT 0
24837: ST_TO_ADDR
// hc_name :=  ;
24838: LD_ADDR_OWVAR 26
24842: PUSH
24843: LD_STRING 
24845: ST_TO_ADDR
// hc_gallery :=  ;
24846: LD_ADDR_OWVAR 33
24850: PUSH
24851: LD_STRING 
24853: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
24854: LD_ADDR_OWVAR 31
24858: PUSH
24859: LD_INT 0
24861: PUSH
24862: LD_INT 0
24864: PUSH
24865: LD_INT 0
24867: PUSH
24868: LD_INT 0
24870: PUSH
24871: EMPTY
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: ST_TO_ADDR
// hc_class := class_apeman ;
24877: LD_ADDR_OWVAR 28
24881: PUSH
24882: LD_INT 12
24884: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
24885: CALL_OW 44
24889: PPUSH
24890: LD_INT 1
24892: PPUSH
24893: CALL_OW 51
// end ;
24897: LD_VAR 0 1
24901: RET
// export function hHackBoom ; begin
24902: LD_INT 0
24904: PPUSH
// uc_side := your_side ;
24905: LD_ADDR_OWVAR 20
24909: PUSH
24910: LD_OWVAR 2
24914: ST_TO_ADDR
// uc_nation := 1 ;
24915: LD_ADDR_OWVAR 21
24919: PUSH
24920: LD_INT 1
24922: ST_TO_ADDR
// vc_chassis := us_morphling ;
24923: LD_ADDR_OWVAR 37
24927: PUSH
24928: LD_INT 5
24930: ST_TO_ADDR
// vc_engine := engine_siberite ;
24931: LD_ADDR_OWVAR 39
24935: PUSH
24936: LD_INT 3
24938: ST_TO_ADDR
// vc_control := control_computer ;
24939: LD_ADDR_OWVAR 38
24943: PUSH
24944: LD_INT 3
24946: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
24947: LD_ADDR_OWVAR 40
24951: PUSH
24952: LD_INT 8
24954: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
24955: CALL_OW 45
24959: PPUSH
24960: LD_INT 1
24962: PPUSH
24963: CALL_OW 51
// end ; end_of_file
24967: LD_VAR 0 1
24971: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
24972: LD_INT 0
24974: PPUSH
24975: PPUSH
24976: PPUSH
24977: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24978: LD_VAR 0 1
24982: PPUSH
24983: CALL_OW 264
24987: PUSH
24988: LD_EXP 36
24992: EQUAL
24993: IFFALSE 25065
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24995: LD_INT 68
24997: PPUSH
24998: LD_VAR 0 1
25002: PPUSH
25003: CALL_OW 255
25007: PPUSH
25008: CALL_OW 321
25012: PUSH
25013: LD_INT 2
25015: EQUAL
25016: IFFALSE 25028
// eff := 70 else
25018: LD_ADDR_VAR 0 4
25022: PUSH
25023: LD_INT 70
25025: ST_TO_ADDR
25026: GO 25036
// eff := 30 ;
25028: LD_ADDR_VAR 0 4
25032: PUSH
25033: LD_INT 30
25035: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25036: LD_VAR 0 1
25040: PPUSH
25041: CALL_OW 250
25045: PPUSH
25046: LD_VAR 0 1
25050: PPUSH
25051: CALL_OW 251
25055: PPUSH
25056: LD_VAR 0 4
25060: PPUSH
25061: CALL_OW 495
// end ; end ;
25065: LD_VAR 0 2
25069: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25070: LD_INT 0
25072: PPUSH
// end ;
25073: LD_VAR 0 4
25077: RET
// export function SOS_Command ( cmd ) ; begin
25078: LD_INT 0
25080: PPUSH
// end ;
25081: LD_VAR 0 2
25085: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25086: LD_VAR 0 1
25090: PUSH
25091: LD_INT 254
25093: EQUAL
25094: PUSH
25095: LD_VAR 0 2
25099: PPUSH
25100: CALL_OW 264
25104: PUSH
25105: LD_EXP 34
25109: EQUAL
25110: AND
25111: PUSH
25112: LD_VAR 0 3
25116: PPUSH
25117: CALL_OW 263
25121: PUSH
25122: LD_INT 3
25124: EQUAL
25125: AND
25126: IFFALSE 25142
// HackDestroyVehicle ( unit , selectedUnit ) ;
25128: LD_VAR 0 2
25132: PPUSH
25133: LD_VAR 0 3
25137: PPUSH
25138: CALL 26649 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25142: LD_VAR 0 1
25146: PUSH
25147: LD_INT 255
25149: EQUAL
25150: PUSH
25151: LD_VAR 0 2
25155: PPUSH
25156: CALL_OW 264
25160: PUSH
25161: LD_INT 14
25163: PUSH
25164: LD_INT 53
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: IN
25171: AND
25172: PUSH
25173: LD_VAR 0 4
25177: PPUSH
25178: LD_VAR 0 5
25182: PPUSH
25183: CALL_OW 488
25187: AND
25188: IFFALSE 25212
// CutTreeXYR ( unit , x , y , 12 ) ;
25190: LD_VAR 0 2
25194: PPUSH
25195: LD_VAR 0 4
25199: PPUSH
25200: LD_VAR 0 5
25204: PPUSH
25205: LD_INT 12
25207: PPUSH
25208: CALL 25215 0 4
// end ;
25212: PPOPN 5
25214: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25215: LD_INT 0
25217: PPUSH
25218: PPUSH
25219: PPUSH
25220: PPUSH
25221: PPUSH
25222: PPUSH
25223: PPUSH
25224: PPUSH
25225: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
25226: LD_VAR 0 1
25230: NOT
25231: PUSH
25232: LD_VAR 0 2
25236: PPUSH
25237: LD_VAR 0 3
25241: PPUSH
25242: CALL_OW 488
25246: NOT
25247: OR
25248: PUSH
25249: LD_VAR 0 4
25253: NOT
25254: OR
25255: IFFALSE 25259
// exit ;
25257: GO 25599
// list := [ ] ;
25259: LD_ADDR_VAR 0 13
25263: PUSH
25264: EMPTY
25265: ST_TO_ADDR
// if x - r < 0 then
25266: LD_VAR 0 2
25270: PUSH
25271: LD_VAR 0 4
25275: MINUS
25276: PUSH
25277: LD_INT 0
25279: LESS
25280: IFFALSE 25292
// min_x := 0 else
25282: LD_ADDR_VAR 0 7
25286: PUSH
25287: LD_INT 0
25289: ST_TO_ADDR
25290: GO 25308
// min_x := x - r ;
25292: LD_ADDR_VAR 0 7
25296: PUSH
25297: LD_VAR 0 2
25301: PUSH
25302: LD_VAR 0 4
25306: MINUS
25307: ST_TO_ADDR
// if y - r < 0 then
25308: LD_VAR 0 3
25312: PUSH
25313: LD_VAR 0 4
25317: MINUS
25318: PUSH
25319: LD_INT 0
25321: LESS
25322: IFFALSE 25334
// min_y := 0 else
25324: LD_ADDR_VAR 0 8
25328: PUSH
25329: LD_INT 0
25331: ST_TO_ADDR
25332: GO 25350
// min_y := y - r ;
25334: LD_ADDR_VAR 0 8
25338: PUSH
25339: LD_VAR 0 3
25343: PUSH
25344: LD_VAR 0 4
25348: MINUS
25349: ST_TO_ADDR
// max_x := x + r ;
25350: LD_ADDR_VAR 0 9
25354: PUSH
25355: LD_VAR 0 2
25359: PUSH
25360: LD_VAR 0 4
25364: PLUS
25365: ST_TO_ADDR
// max_y := y + r ;
25366: LD_ADDR_VAR 0 10
25370: PUSH
25371: LD_VAR 0 3
25375: PUSH
25376: LD_VAR 0 4
25380: PLUS
25381: ST_TO_ADDR
// for _x = min_x to max_x do
25382: LD_ADDR_VAR 0 11
25386: PUSH
25387: DOUBLE
25388: LD_VAR 0 7
25392: DEC
25393: ST_TO_ADDR
25394: LD_VAR 0 9
25398: PUSH
25399: FOR_TO
25400: IFFALSE 25517
// for _y = min_y to max_y do
25402: LD_ADDR_VAR 0 12
25406: PUSH
25407: DOUBLE
25408: LD_VAR 0 8
25412: DEC
25413: ST_TO_ADDR
25414: LD_VAR 0 10
25418: PUSH
25419: FOR_TO
25420: IFFALSE 25513
// begin if not ValidHex ( _x , _y ) then
25422: LD_VAR 0 11
25426: PPUSH
25427: LD_VAR 0 12
25431: PPUSH
25432: CALL_OW 488
25436: NOT
25437: IFFALSE 25441
// continue ;
25439: GO 25419
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25441: LD_VAR 0 11
25445: PPUSH
25446: LD_VAR 0 12
25450: PPUSH
25451: CALL_OW 351
25455: PUSH
25456: LD_VAR 0 11
25460: PPUSH
25461: LD_VAR 0 12
25465: PPUSH
25466: CALL_OW 554
25470: AND
25471: IFFALSE 25511
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25473: LD_ADDR_VAR 0 13
25477: PUSH
25478: LD_VAR 0 13
25482: PPUSH
25483: LD_VAR 0 13
25487: PUSH
25488: LD_INT 1
25490: PLUS
25491: PPUSH
25492: LD_VAR 0 11
25496: PUSH
25497: LD_VAR 0 12
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: PPUSH
25506: CALL_OW 2
25510: ST_TO_ADDR
// end ;
25511: GO 25419
25513: POP
25514: POP
25515: GO 25399
25517: POP
25518: POP
// if not list then
25519: LD_VAR 0 13
25523: NOT
25524: IFFALSE 25528
// exit ;
25526: GO 25599
// for i in list do
25528: LD_ADDR_VAR 0 6
25532: PUSH
25533: LD_VAR 0 13
25537: PUSH
25538: FOR_IN
25539: IFFALSE 25597
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25541: LD_VAR 0 1
25545: PPUSH
25546: LD_STRING M
25548: PUSH
25549: LD_VAR 0 6
25553: PUSH
25554: LD_INT 1
25556: ARRAY
25557: PUSH
25558: LD_VAR 0 6
25562: PUSH
25563: LD_INT 2
25565: ARRAY
25566: PUSH
25567: LD_INT 0
25569: PUSH
25570: LD_INT 0
25572: PUSH
25573: LD_INT 0
25575: PUSH
25576: LD_INT 0
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: PUSH
25588: EMPTY
25589: LIST
25590: PPUSH
25591: CALL_OW 447
25595: GO 25538
25597: POP
25598: POP
// end ;
25599: LD_VAR 0 5
25603: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25604: LD_EXP 102
25608: NOT
25609: IFFALSE 25659
25611: GO 25613
25613: DISABLE
// begin initHack := true ;
25614: LD_ADDR_EXP 102
25618: PUSH
25619: LD_INT 1
25621: ST_TO_ADDR
// hackTanks := [ ] ;
25622: LD_ADDR_EXP 103
25626: PUSH
25627: EMPTY
25628: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25629: LD_ADDR_EXP 104
25633: PUSH
25634: EMPTY
25635: ST_TO_ADDR
// hackLimit := 3 ;
25636: LD_ADDR_EXP 105
25640: PUSH
25641: LD_INT 3
25643: ST_TO_ADDR
// hackDist := 12 ;
25644: LD_ADDR_EXP 106
25648: PUSH
25649: LD_INT 12
25651: ST_TO_ADDR
// hackCounter := [ ] ;
25652: LD_ADDR_EXP 107
25656: PUSH
25657: EMPTY
25658: ST_TO_ADDR
// end ;
25659: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25660: LD_EXP 102
25664: PUSH
25665: LD_INT 34
25667: PUSH
25668: LD_EXP 34
25672: PUSH
25673: EMPTY
25674: LIST
25675: LIST
25676: PPUSH
25677: CALL_OW 69
25681: AND
25682: IFFALSE 25937
25684: GO 25686
25686: DISABLE
25687: LD_INT 0
25689: PPUSH
25690: PPUSH
// begin enable ;
25691: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25692: LD_ADDR_VAR 0 1
25696: PUSH
25697: LD_INT 34
25699: PUSH
25700: LD_EXP 34
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PPUSH
25709: CALL_OW 69
25713: PUSH
25714: FOR_IN
25715: IFFALSE 25935
// begin if not i in hackTanks then
25717: LD_VAR 0 1
25721: PUSH
25722: LD_EXP 103
25726: IN
25727: NOT
25728: IFFALSE 25811
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
25730: LD_ADDR_EXP 103
25734: PUSH
25735: LD_EXP 103
25739: PPUSH
25740: LD_EXP 103
25744: PUSH
25745: LD_INT 1
25747: PLUS
25748: PPUSH
25749: LD_VAR 0 1
25753: PPUSH
25754: CALL_OW 1
25758: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
25759: LD_ADDR_EXP 104
25763: PUSH
25764: LD_EXP 104
25768: PPUSH
25769: LD_EXP 104
25773: PUSH
25774: LD_INT 1
25776: PLUS
25777: PPUSH
25778: EMPTY
25779: PPUSH
25780: CALL_OW 1
25784: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
25785: LD_ADDR_EXP 107
25789: PUSH
25790: LD_EXP 107
25794: PPUSH
25795: LD_EXP 107
25799: PUSH
25800: LD_INT 1
25802: PLUS
25803: PPUSH
25804: EMPTY
25805: PPUSH
25806: CALL_OW 1
25810: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25811: LD_VAR 0 1
25815: PPUSH
25816: CALL_OW 302
25820: NOT
25821: IFFALSE 25834
// begin HackUnlinkAll ( i ) ;
25823: LD_VAR 0 1
25827: PPUSH
25828: CALL 25940 0 1
// continue ;
25832: GO 25714
// end ; HackCheckCapturedStatus ( i ) ;
25834: LD_VAR 0 1
25838: PPUSH
25839: CALL 26383 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25843: LD_ADDR_VAR 0 2
25847: PUSH
25848: LD_INT 81
25850: PUSH
25851: LD_VAR 0 1
25855: PPUSH
25856: CALL_OW 255
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: PUSH
25865: LD_INT 33
25867: PUSH
25868: LD_INT 3
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: PUSH
25875: LD_INT 91
25877: PUSH
25878: LD_VAR 0 1
25882: PUSH
25883: LD_EXP 106
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: LIST
25892: PUSH
25893: LD_INT 50
25895: PUSH
25896: EMPTY
25897: LIST
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: LIST
25903: LIST
25904: PPUSH
25905: CALL_OW 69
25909: ST_TO_ADDR
// if not tmp then
25910: LD_VAR 0 2
25914: NOT
25915: IFFALSE 25919
// continue ;
25917: GO 25714
// HackLink ( i , tmp ) ;
25919: LD_VAR 0 1
25923: PPUSH
25924: LD_VAR 0 2
25928: PPUSH
25929: CALL 26076 0 2
// end ;
25933: GO 25714
25935: POP
25936: POP
// end ;
25937: PPOPN 2
25939: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
25940: LD_INT 0
25942: PPUSH
25943: PPUSH
25944: PPUSH
// if not hack in hackTanks then
25945: LD_VAR 0 1
25949: PUSH
25950: LD_EXP 103
25954: IN
25955: NOT
25956: IFFALSE 25960
// exit ;
25958: GO 26071
// index := GetElementIndex ( hackTanks , hack ) ;
25960: LD_ADDR_VAR 0 4
25964: PUSH
25965: LD_EXP 103
25969: PPUSH
25970: LD_VAR 0 1
25974: PPUSH
25975: CALL 31491 0 2
25979: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
25980: LD_EXP 104
25984: PUSH
25985: LD_VAR 0 4
25989: ARRAY
25990: IFFALSE 26071
// begin for i in hackTanksCaptured [ index ] do
25992: LD_ADDR_VAR 0 3
25996: PUSH
25997: LD_EXP 104
26001: PUSH
26002: LD_VAR 0 4
26006: ARRAY
26007: PUSH
26008: FOR_IN
26009: IFFALSE 26035
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26011: LD_VAR 0 3
26015: PUSH
26016: LD_INT 1
26018: ARRAY
26019: PPUSH
26020: LD_VAR 0 3
26024: PUSH
26025: LD_INT 2
26027: ARRAY
26028: PPUSH
26029: CALL_OW 235
26033: GO 26008
26035: POP
26036: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26037: LD_ADDR_EXP 104
26041: PUSH
26042: LD_EXP 104
26046: PPUSH
26047: LD_VAR 0 4
26051: PPUSH
26052: EMPTY
26053: PPUSH
26054: CALL_OW 1
26058: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26059: LD_VAR 0 1
26063: PPUSH
26064: LD_INT 0
26066: PPUSH
26067: CALL_OW 505
// end ; end ;
26071: LD_VAR 0 2
26075: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26076: LD_INT 0
26078: PPUSH
26079: PPUSH
26080: PPUSH
// if not hack in hackTanks or not vehicles then
26081: LD_VAR 0 1
26085: PUSH
26086: LD_EXP 103
26090: IN
26091: NOT
26092: PUSH
26093: LD_VAR 0 2
26097: NOT
26098: OR
26099: IFFALSE 26103
// exit ;
26101: GO 26378
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26103: LD_ADDR_VAR 0 2
26107: PUSH
26108: LD_VAR 0 1
26112: PPUSH
26113: LD_VAR 0 2
26117: PPUSH
26118: LD_INT 1
26120: PPUSH
26121: LD_INT 1
26123: PPUSH
26124: CALL 32141 0 4
26128: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26129: LD_ADDR_VAR 0 5
26133: PUSH
26134: LD_EXP 103
26138: PPUSH
26139: LD_VAR 0 1
26143: PPUSH
26144: CALL 31491 0 2
26148: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26149: LD_EXP 104
26153: PUSH
26154: LD_VAR 0 5
26158: ARRAY
26159: PUSH
26160: LD_EXP 105
26164: LESS
26165: IFFALSE 26354
// begin for i := 1 to vehicles do
26167: LD_ADDR_VAR 0 4
26171: PUSH
26172: DOUBLE
26173: LD_INT 1
26175: DEC
26176: ST_TO_ADDR
26177: LD_VAR 0 2
26181: PUSH
26182: FOR_TO
26183: IFFALSE 26352
// begin if hackTanksCaptured [ index ] = hackLimit then
26185: LD_EXP 104
26189: PUSH
26190: LD_VAR 0 5
26194: ARRAY
26195: PUSH
26196: LD_EXP 105
26200: EQUAL
26201: IFFALSE 26205
// break ;
26203: GO 26352
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26205: LD_ADDR_EXP 107
26209: PUSH
26210: LD_EXP 107
26214: PPUSH
26215: LD_VAR 0 5
26219: PPUSH
26220: LD_EXP 107
26224: PUSH
26225: LD_VAR 0 5
26229: ARRAY
26230: PUSH
26231: LD_INT 1
26233: PLUS
26234: PPUSH
26235: CALL_OW 1
26239: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26240: LD_ADDR_EXP 104
26244: PUSH
26245: LD_EXP 104
26249: PPUSH
26250: LD_VAR 0 5
26254: PUSH
26255: LD_EXP 104
26259: PUSH
26260: LD_VAR 0 5
26264: ARRAY
26265: PUSH
26266: LD_INT 1
26268: PLUS
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: PPUSH
26274: LD_VAR 0 2
26278: PUSH
26279: LD_VAR 0 4
26283: ARRAY
26284: PUSH
26285: LD_VAR 0 2
26289: PUSH
26290: LD_VAR 0 4
26294: ARRAY
26295: PPUSH
26296: CALL_OW 255
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: PPUSH
26305: CALL 31706 0 3
26309: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26310: LD_VAR 0 2
26314: PUSH
26315: LD_VAR 0 4
26319: ARRAY
26320: PPUSH
26321: LD_VAR 0 1
26325: PPUSH
26326: CALL_OW 255
26330: PPUSH
26331: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26335: LD_VAR 0 2
26339: PUSH
26340: LD_VAR 0 4
26344: ARRAY
26345: PPUSH
26346: CALL_OW 141
// end ;
26350: GO 26182
26352: POP
26353: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26354: LD_VAR 0 1
26358: PPUSH
26359: LD_EXP 104
26363: PUSH
26364: LD_VAR 0 5
26368: ARRAY
26369: PUSH
26370: LD_INT 0
26372: PLUS
26373: PPUSH
26374: CALL_OW 505
// end ;
26378: LD_VAR 0 3
26382: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26383: LD_INT 0
26385: PPUSH
26386: PPUSH
26387: PPUSH
26388: PPUSH
// if not hack in hackTanks then
26389: LD_VAR 0 1
26393: PUSH
26394: LD_EXP 103
26398: IN
26399: NOT
26400: IFFALSE 26404
// exit ;
26402: GO 26644
// index := GetElementIndex ( hackTanks , hack ) ;
26404: LD_ADDR_VAR 0 4
26408: PUSH
26409: LD_EXP 103
26413: PPUSH
26414: LD_VAR 0 1
26418: PPUSH
26419: CALL 31491 0 2
26423: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26424: LD_ADDR_VAR 0 3
26428: PUSH
26429: DOUBLE
26430: LD_EXP 104
26434: PUSH
26435: LD_VAR 0 4
26439: ARRAY
26440: INC
26441: ST_TO_ADDR
26442: LD_INT 1
26444: PUSH
26445: FOR_DOWNTO
26446: IFFALSE 26618
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26448: LD_ADDR_VAR 0 5
26452: PUSH
26453: LD_EXP 104
26457: PUSH
26458: LD_VAR 0 4
26462: ARRAY
26463: PUSH
26464: LD_VAR 0 3
26468: ARRAY
26469: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26470: LD_VAR 0 5
26474: PUSH
26475: LD_INT 1
26477: ARRAY
26478: PPUSH
26479: CALL_OW 302
26483: NOT
26484: PUSH
26485: LD_VAR 0 5
26489: PUSH
26490: LD_INT 1
26492: ARRAY
26493: PPUSH
26494: CALL_OW 255
26498: PUSH
26499: LD_VAR 0 1
26503: PPUSH
26504: CALL_OW 255
26508: NONEQUAL
26509: OR
26510: IFFALSE 26616
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26512: LD_VAR 0 5
26516: PUSH
26517: LD_INT 1
26519: ARRAY
26520: PPUSH
26521: CALL_OW 305
26525: PUSH
26526: LD_VAR 0 5
26530: PUSH
26531: LD_INT 1
26533: ARRAY
26534: PPUSH
26535: CALL_OW 255
26539: PUSH
26540: LD_VAR 0 1
26544: PPUSH
26545: CALL_OW 255
26549: EQUAL
26550: AND
26551: IFFALSE 26575
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26553: LD_VAR 0 5
26557: PUSH
26558: LD_INT 1
26560: ARRAY
26561: PPUSH
26562: LD_VAR 0 5
26566: PUSH
26567: LD_INT 2
26569: ARRAY
26570: PPUSH
26571: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26575: LD_ADDR_EXP 104
26579: PUSH
26580: LD_EXP 104
26584: PPUSH
26585: LD_VAR 0 4
26589: PPUSH
26590: LD_EXP 104
26594: PUSH
26595: LD_VAR 0 4
26599: ARRAY
26600: PPUSH
26601: LD_VAR 0 3
26605: PPUSH
26606: CALL_OW 3
26610: PPUSH
26611: CALL_OW 1
26615: ST_TO_ADDR
// end ; end ;
26616: GO 26445
26618: POP
26619: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26620: LD_VAR 0 1
26624: PPUSH
26625: LD_EXP 104
26629: PUSH
26630: LD_VAR 0 4
26634: ARRAY
26635: PUSH
26636: LD_INT 0
26638: PLUS
26639: PPUSH
26640: CALL_OW 505
// end ;
26644: LD_VAR 0 2
26648: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26649: LD_INT 0
26651: PPUSH
26652: PPUSH
26653: PPUSH
26654: PPUSH
// if not hack in hackTanks then
26655: LD_VAR 0 1
26659: PUSH
26660: LD_EXP 103
26664: IN
26665: NOT
26666: IFFALSE 26670
// exit ;
26668: GO 26755
// index := GetElementIndex ( hackTanks , hack ) ;
26670: LD_ADDR_VAR 0 5
26674: PUSH
26675: LD_EXP 103
26679: PPUSH
26680: LD_VAR 0 1
26684: PPUSH
26685: CALL 31491 0 2
26689: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26690: LD_ADDR_VAR 0 4
26694: PUSH
26695: DOUBLE
26696: LD_INT 1
26698: DEC
26699: ST_TO_ADDR
26700: LD_EXP 104
26704: PUSH
26705: LD_VAR 0 5
26709: ARRAY
26710: PUSH
26711: FOR_TO
26712: IFFALSE 26753
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26714: LD_EXP 104
26718: PUSH
26719: LD_VAR 0 5
26723: ARRAY
26724: PUSH
26725: LD_VAR 0 4
26729: ARRAY
26730: PUSH
26731: LD_INT 1
26733: ARRAY
26734: PUSH
26735: LD_VAR 0 2
26739: EQUAL
26740: IFFALSE 26751
// KillUnit ( vehicle ) ;
26742: LD_VAR 0 2
26746: PPUSH
26747: CALL_OW 66
26751: GO 26711
26753: POP
26754: POP
// end ; end_of_file
26755: LD_VAR 0 3
26759: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26760: LD_INT 0
26762: PPUSH
26763: PPUSH
// if exist_mode then
26764: LD_VAR 0 2
26768: IFFALSE 26793
// unit := CreateCharacter ( prefix & ident ) else
26770: LD_ADDR_VAR 0 5
26774: PUSH
26775: LD_VAR 0 3
26779: PUSH
26780: LD_VAR 0 1
26784: STR
26785: PPUSH
26786: CALL_OW 34
26790: ST_TO_ADDR
26791: GO 26808
// unit := NewCharacter ( ident ) ;
26793: LD_ADDR_VAR 0 5
26797: PUSH
26798: LD_VAR 0 1
26802: PPUSH
26803: CALL_OW 25
26807: ST_TO_ADDR
// result := unit ;
26808: LD_ADDR_VAR 0 4
26812: PUSH
26813: LD_VAR 0 5
26817: ST_TO_ADDR
// end ;
26818: LD_VAR 0 4
26822: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26823: LD_INT 0
26825: PPUSH
26826: PPUSH
// if not side or not nation then
26827: LD_VAR 0 1
26831: NOT
26832: PUSH
26833: LD_VAR 0 2
26837: NOT
26838: OR
26839: IFFALSE 26843
// exit ;
26841: GO 27607
// case nation of nation_american :
26843: LD_VAR 0 2
26847: PUSH
26848: LD_INT 1
26850: DOUBLE
26851: EQUAL
26852: IFTRUE 26856
26854: GO 27070
26856: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
26857: LD_ADDR_VAR 0 4
26861: PUSH
26862: LD_INT 35
26864: PUSH
26865: LD_INT 45
26867: PUSH
26868: LD_INT 46
26870: PUSH
26871: LD_INT 47
26873: PUSH
26874: LD_INT 82
26876: PUSH
26877: LD_INT 83
26879: PUSH
26880: LD_INT 84
26882: PUSH
26883: LD_INT 85
26885: PUSH
26886: LD_INT 86
26888: PUSH
26889: LD_INT 1
26891: PUSH
26892: LD_INT 2
26894: PUSH
26895: LD_INT 6
26897: PUSH
26898: LD_INT 15
26900: PUSH
26901: LD_INT 16
26903: PUSH
26904: LD_INT 7
26906: PUSH
26907: LD_INT 12
26909: PUSH
26910: LD_INT 13
26912: PUSH
26913: LD_INT 10
26915: PUSH
26916: LD_INT 14
26918: PUSH
26919: LD_INT 20
26921: PUSH
26922: LD_INT 21
26924: PUSH
26925: LD_INT 22
26927: PUSH
26928: LD_INT 25
26930: PUSH
26931: LD_INT 32
26933: PUSH
26934: LD_INT 27
26936: PUSH
26937: LD_INT 36
26939: PUSH
26940: LD_INT 69
26942: PUSH
26943: LD_INT 39
26945: PUSH
26946: LD_INT 34
26948: PUSH
26949: LD_INT 40
26951: PUSH
26952: LD_INT 48
26954: PUSH
26955: LD_INT 49
26957: PUSH
26958: LD_INT 50
26960: PUSH
26961: LD_INT 51
26963: PUSH
26964: LD_INT 52
26966: PUSH
26967: LD_INT 53
26969: PUSH
26970: LD_INT 54
26972: PUSH
26973: LD_INT 55
26975: PUSH
26976: LD_INT 56
26978: PUSH
26979: LD_INT 57
26981: PUSH
26982: LD_INT 58
26984: PUSH
26985: LD_INT 59
26987: PUSH
26988: LD_INT 60
26990: PUSH
26991: LD_INT 61
26993: PUSH
26994: LD_INT 62
26996: PUSH
26997: LD_INT 80
26999: PUSH
27000: LD_INT 82
27002: PUSH
27003: LD_INT 83
27005: PUSH
27006: LD_INT 84
27008: PUSH
27009: LD_INT 85
27011: PUSH
27012: LD_INT 86
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: LIST
27019: LIST
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: LIST
27037: LIST
27038: LIST
27039: LIST
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: LIST
27048: LIST
27049: LIST
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: LIST
27058: LIST
27059: LIST
27060: LIST
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: ST_TO_ADDR
27068: GO 27531
27070: LD_INT 2
27072: DOUBLE
27073: EQUAL
27074: IFTRUE 27078
27076: GO 27300
27078: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
27079: LD_ADDR_VAR 0 4
27083: PUSH
27084: LD_INT 35
27086: PUSH
27087: LD_INT 45
27089: PUSH
27090: LD_INT 46
27092: PUSH
27093: LD_INT 47
27095: PUSH
27096: LD_INT 82
27098: PUSH
27099: LD_INT 83
27101: PUSH
27102: LD_INT 84
27104: PUSH
27105: LD_INT 85
27107: PUSH
27108: LD_INT 87
27110: PUSH
27111: LD_INT 70
27113: PUSH
27114: LD_INT 1
27116: PUSH
27117: LD_INT 11
27119: PUSH
27120: LD_INT 3
27122: PUSH
27123: LD_INT 4
27125: PUSH
27126: LD_INT 5
27128: PUSH
27129: LD_INT 6
27131: PUSH
27132: LD_INT 15
27134: PUSH
27135: LD_INT 18
27137: PUSH
27138: LD_INT 7
27140: PUSH
27141: LD_INT 17
27143: PUSH
27144: LD_INT 8
27146: PUSH
27147: LD_INT 20
27149: PUSH
27150: LD_INT 21
27152: PUSH
27153: LD_INT 22
27155: PUSH
27156: LD_INT 72
27158: PUSH
27159: LD_INT 26
27161: PUSH
27162: LD_INT 69
27164: PUSH
27165: LD_INT 39
27167: PUSH
27168: LD_INT 40
27170: PUSH
27171: LD_INT 41
27173: PUSH
27174: LD_INT 42
27176: PUSH
27177: LD_INT 43
27179: PUSH
27180: LD_INT 48
27182: PUSH
27183: LD_INT 49
27185: PUSH
27186: LD_INT 50
27188: PUSH
27189: LD_INT 51
27191: PUSH
27192: LD_INT 52
27194: PUSH
27195: LD_INT 53
27197: PUSH
27198: LD_INT 54
27200: PUSH
27201: LD_INT 55
27203: PUSH
27204: LD_INT 56
27206: PUSH
27207: LD_INT 60
27209: PUSH
27210: LD_INT 61
27212: PUSH
27213: LD_INT 62
27215: PUSH
27216: LD_INT 66
27218: PUSH
27219: LD_INT 67
27221: PUSH
27222: LD_INT 68
27224: PUSH
27225: LD_INT 81
27227: PUSH
27228: LD_INT 82
27230: PUSH
27231: LD_INT 83
27233: PUSH
27234: LD_INT 84
27236: PUSH
27237: LD_INT 85
27239: PUSH
27240: LD_INT 87
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: LIST
27277: LIST
27278: LIST
27279: LIST
27280: LIST
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: ST_TO_ADDR
27298: GO 27531
27300: LD_INT 3
27302: DOUBLE
27303: EQUAL
27304: IFTRUE 27308
27306: GO 27530
27308: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27309: LD_ADDR_VAR 0 4
27313: PUSH
27314: LD_INT 46
27316: PUSH
27317: LD_INT 47
27319: PUSH
27320: LD_INT 1
27322: PUSH
27323: LD_INT 2
27325: PUSH
27326: LD_INT 82
27328: PUSH
27329: LD_INT 83
27331: PUSH
27332: LD_INT 84
27334: PUSH
27335: LD_INT 85
27337: PUSH
27338: LD_INT 86
27340: PUSH
27341: LD_INT 11
27343: PUSH
27344: LD_INT 9
27346: PUSH
27347: LD_INT 20
27349: PUSH
27350: LD_INT 19
27352: PUSH
27353: LD_INT 21
27355: PUSH
27356: LD_INT 24
27358: PUSH
27359: LD_INT 22
27361: PUSH
27362: LD_INT 25
27364: PUSH
27365: LD_INT 28
27367: PUSH
27368: LD_INT 29
27370: PUSH
27371: LD_INT 30
27373: PUSH
27374: LD_INT 31
27376: PUSH
27377: LD_INT 37
27379: PUSH
27380: LD_INT 38
27382: PUSH
27383: LD_INT 32
27385: PUSH
27386: LD_INT 27
27388: PUSH
27389: LD_INT 33
27391: PUSH
27392: LD_INT 69
27394: PUSH
27395: LD_INT 39
27397: PUSH
27398: LD_INT 34
27400: PUSH
27401: LD_INT 40
27403: PUSH
27404: LD_INT 71
27406: PUSH
27407: LD_INT 23
27409: PUSH
27410: LD_INT 44
27412: PUSH
27413: LD_INT 48
27415: PUSH
27416: LD_INT 49
27418: PUSH
27419: LD_INT 50
27421: PUSH
27422: LD_INT 51
27424: PUSH
27425: LD_INT 52
27427: PUSH
27428: LD_INT 53
27430: PUSH
27431: LD_INT 54
27433: PUSH
27434: LD_INT 55
27436: PUSH
27437: LD_INT 56
27439: PUSH
27440: LD_INT 57
27442: PUSH
27443: LD_INT 58
27445: PUSH
27446: LD_INT 59
27448: PUSH
27449: LD_INT 63
27451: PUSH
27452: LD_INT 64
27454: PUSH
27455: LD_INT 65
27457: PUSH
27458: LD_INT 82
27460: PUSH
27461: LD_INT 83
27463: PUSH
27464: LD_INT 84
27466: PUSH
27467: LD_INT 85
27469: PUSH
27470: LD_INT 86
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: LIST
27501: LIST
27502: LIST
27503: LIST
27504: LIST
27505: LIST
27506: LIST
27507: LIST
27508: LIST
27509: LIST
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: ST_TO_ADDR
27528: GO 27531
27530: POP
// if state > - 1 and state < 3 then
27531: LD_VAR 0 3
27535: PUSH
27536: LD_INT 1
27538: NEG
27539: GREATER
27540: PUSH
27541: LD_VAR 0 3
27545: PUSH
27546: LD_INT 3
27548: LESS
27549: AND
27550: IFFALSE 27607
// for i in result do
27552: LD_ADDR_VAR 0 5
27556: PUSH
27557: LD_VAR 0 4
27561: PUSH
27562: FOR_IN
27563: IFFALSE 27605
// if GetTech ( i , side ) <> state then
27565: LD_VAR 0 5
27569: PPUSH
27570: LD_VAR 0 1
27574: PPUSH
27575: CALL_OW 321
27579: PUSH
27580: LD_VAR 0 3
27584: NONEQUAL
27585: IFFALSE 27603
// result := result diff i ;
27587: LD_ADDR_VAR 0 4
27591: PUSH
27592: LD_VAR 0 4
27596: PUSH
27597: LD_VAR 0 5
27601: DIFF
27602: ST_TO_ADDR
27603: GO 27562
27605: POP
27606: POP
// end ;
27607: LD_VAR 0 4
27611: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27612: LD_INT 0
27614: PPUSH
27615: PPUSH
27616: PPUSH
// result := true ;
27617: LD_ADDR_VAR 0 3
27621: PUSH
27622: LD_INT 1
27624: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27625: LD_ADDR_VAR 0 5
27629: PUSH
27630: LD_VAR 0 2
27634: PPUSH
27635: CALL_OW 480
27639: ST_TO_ADDR
// if not tmp then
27640: LD_VAR 0 5
27644: NOT
27645: IFFALSE 27649
// exit ;
27647: GO 27698
// for i in tmp do
27649: LD_ADDR_VAR 0 4
27653: PUSH
27654: LD_VAR 0 5
27658: PUSH
27659: FOR_IN
27660: IFFALSE 27696
// if GetTech ( i , side ) <> state_researched then
27662: LD_VAR 0 4
27666: PPUSH
27667: LD_VAR 0 1
27671: PPUSH
27672: CALL_OW 321
27676: PUSH
27677: LD_INT 2
27679: NONEQUAL
27680: IFFALSE 27694
// begin result := false ;
27682: LD_ADDR_VAR 0 3
27686: PUSH
27687: LD_INT 0
27689: ST_TO_ADDR
// exit ;
27690: POP
27691: POP
27692: GO 27698
// end ;
27694: GO 27659
27696: POP
27697: POP
// end ;
27698: LD_VAR 0 3
27702: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27703: LD_INT 0
27705: PPUSH
27706: PPUSH
27707: PPUSH
27708: PPUSH
27709: PPUSH
27710: PPUSH
27711: PPUSH
27712: PPUSH
27713: PPUSH
27714: PPUSH
27715: PPUSH
27716: PPUSH
27717: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27718: LD_VAR 0 1
27722: NOT
27723: PUSH
27724: LD_VAR 0 1
27728: PPUSH
27729: CALL_OW 257
27733: PUSH
27734: LD_INT 9
27736: NONEQUAL
27737: OR
27738: IFFALSE 27742
// exit ;
27740: GO 28315
// side := GetSide ( unit ) ;
27742: LD_ADDR_VAR 0 9
27746: PUSH
27747: LD_VAR 0 1
27751: PPUSH
27752: CALL_OW 255
27756: ST_TO_ADDR
// tech_space := tech_spacanom ;
27757: LD_ADDR_VAR 0 12
27761: PUSH
27762: LD_INT 29
27764: ST_TO_ADDR
// tech_time := tech_taurad ;
27765: LD_ADDR_VAR 0 13
27769: PUSH
27770: LD_INT 28
27772: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27773: LD_ADDR_VAR 0 11
27777: PUSH
27778: LD_VAR 0 1
27782: PPUSH
27783: CALL_OW 310
27787: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27788: LD_VAR 0 11
27792: PPUSH
27793: CALL_OW 247
27797: PUSH
27798: LD_INT 2
27800: EQUAL
27801: IFFALSE 27805
// exit ;
27803: GO 28315
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27805: LD_ADDR_VAR 0 8
27809: PUSH
27810: LD_INT 81
27812: PUSH
27813: LD_VAR 0 9
27817: PUSH
27818: EMPTY
27819: LIST
27820: LIST
27821: PUSH
27822: LD_INT 3
27824: PUSH
27825: LD_INT 21
27827: PUSH
27828: LD_INT 3
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: PPUSH
27843: CALL_OW 69
27847: ST_TO_ADDR
// if not tmp then
27848: LD_VAR 0 8
27852: NOT
27853: IFFALSE 27857
// exit ;
27855: GO 28315
// if in_unit then
27857: LD_VAR 0 11
27861: IFFALSE 27885
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27863: LD_ADDR_VAR 0 10
27867: PUSH
27868: LD_VAR 0 8
27872: PPUSH
27873: LD_VAR 0 11
27877: PPUSH
27878: CALL_OW 74
27882: ST_TO_ADDR
27883: GO 27905
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27885: LD_ADDR_VAR 0 10
27889: PUSH
27890: LD_VAR 0 8
27894: PPUSH
27895: LD_VAR 0 1
27899: PPUSH
27900: CALL_OW 74
27904: ST_TO_ADDR
// if not enemy then
27905: LD_VAR 0 10
27909: NOT
27910: IFFALSE 27914
// exit ;
27912: GO 28315
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27914: LD_VAR 0 11
27918: PUSH
27919: LD_VAR 0 11
27923: PPUSH
27924: LD_VAR 0 10
27928: PPUSH
27929: CALL_OW 296
27933: PUSH
27934: LD_INT 13
27936: GREATER
27937: AND
27938: PUSH
27939: LD_VAR 0 1
27943: PPUSH
27944: LD_VAR 0 10
27948: PPUSH
27949: CALL_OW 296
27953: PUSH
27954: LD_INT 12
27956: GREATER
27957: OR
27958: IFFALSE 27962
// exit ;
27960: GO 28315
// missile := [ 1 ] ;
27962: LD_ADDR_VAR 0 14
27966: PUSH
27967: LD_INT 1
27969: PUSH
27970: EMPTY
27971: LIST
27972: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27973: LD_VAR 0 9
27977: PPUSH
27978: LD_VAR 0 12
27982: PPUSH
27983: CALL_OW 325
27987: IFFALSE 28016
// missile := Insert ( missile , missile + 1 , 2 ) ;
27989: LD_ADDR_VAR 0 14
27993: PUSH
27994: LD_VAR 0 14
27998: PPUSH
27999: LD_VAR 0 14
28003: PUSH
28004: LD_INT 1
28006: PLUS
28007: PPUSH
28008: LD_INT 2
28010: PPUSH
28011: CALL_OW 2
28015: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28016: LD_VAR 0 9
28020: PPUSH
28021: LD_VAR 0 13
28025: PPUSH
28026: CALL_OW 325
28030: PUSH
28031: LD_VAR 0 10
28035: PPUSH
28036: CALL_OW 255
28040: PPUSH
28041: LD_VAR 0 13
28045: PPUSH
28046: CALL_OW 325
28050: NOT
28051: AND
28052: IFFALSE 28081
// missile := Insert ( missile , missile + 1 , 3 ) ;
28054: LD_ADDR_VAR 0 14
28058: PUSH
28059: LD_VAR 0 14
28063: PPUSH
28064: LD_VAR 0 14
28068: PUSH
28069: LD_INT 1
28071: PLUS
28072: PPUSH
28073: LD_INT 3
28075: PPUSH
28076: CALL_OW 2
28080: ST_TO_ADDR
// if missile < 2 then
28081: LD_VAR 0 14
28085: PUSH
28086: LD_INT 2
28088: LESS
28089: IFFALSE 28093
// exit ;
28091: GO 28315
// x := GetX ( enemy ) ;
28093: LD_ADDR_VAR 0 4
28097: PUSH
28098: LD_VAR 0 10
28102: PPUSH
28103: CALL_OW 250
28107: ST_TO_ADDR
// y := GetY ( enemy ) ;
28108: LD_ADDR_VAR 0 5
28112: PUSH
28113: LD_VAR 0 10
28117: PPUSH
28118: CALL_OW 251
28122: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28123: LD_ADDR_VAR 0 6
28127: PUSH
28128: LD_VAR 0 4
28132: PUSH
28133: LD_INT 1
28135: NEG
28136: PPUSH
28137: LD_INT 1
28139: PPUSH
28140: CALL_OW 12
28144: PLUS
28145: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28146: LD_ADDR_VAR 0 7
28150: PUSH
28151: LD_VAR 0 5
28155: PUSH
28156: LD_INT 1
28158: NEG
28159: PPUSH
28160: LD_INT 1
28162: PPUSH
28163: CALL_OW 12
28167: PLUS
28168: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28169: LD_VAR 0 6
28173: PPUSH
28174: LD_VAR 0 7
28178: PPUSH
28179: CALL_OW 488
28183: NOT
28184: IFFALSE 28206
// begin _x := x ;
28186: LD_ADDR_VAR 0 6
28190: PUSH
28191: LD_VAR 0 4
28195: ST_TO_ADDR
// _y := y ;
28196: LD_ADDR_VAR 0 7
28200: PUSH
28201: LD_VAR 0 5
28205: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28206: LD_ADDR_VAR 0 3
28210: PUSH
28211: LD_INT 1
28213: PPUSH
28214: LD_VAR 0 14
28218: PPUSH
28219: CALL_OW 12
28223: ST_TO_ADDR
// case i of 1 :
28224: LD_VAR 0 3
28228: PUSH
28229: LD_INT 1
28231: DOUBLE
28232: EQUAL
28233: IFTRUE 28237
28235: GO 28254
28237: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28238: LD_VAR 0 1
28242: PPUSH
28243: LD_VAR 0 10
28247: PPUSH
28248: CALL_OW 115
28252: GO 28315
28254: LD_INT 2
28256: DOUBLE
28257: EQUAL
28258: IFTRUE 28262
28260: GO 28284
28262: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28263: LD_VAR 0 1
28267: PPUSH
28268: LD_VAR 0 6
28272: PPUSH
28273: LD_VAR 0 7
28277: PPUSH
28278: CALL_OW 153
28282: GO 28315
28284: LD_INT 3
28286: DOUBLE
28287: EQUAL
28288: IFTRUE 28292
28290: GO 28314
28292: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28293: LD_VAR 0 1
28297: PPUSH
28298: LD_VAR 0 6
28302: PPUSH
28303: LD_VAR 0 7
28307: PPUSH
28308: CALL_OW 154
28312: GO 28315
28314: POP
// end ;
28315: LD_VAR 0 2
28319: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28320: LD_INT 0
28322: PPUSH
28323: PPUSH
28324: PPUSH
28325: PPUSH
28326: PPUSH
28327: PPUSH
// if not unit or not building then
28328: LD_VAR 0 1
28332: NOT
28333: PUSH
28334: LD_VAR 0 2
28338: NOT
28339: OR
28340: IFFALSE 28344
// exit ;
28342: GO 28502
// x := GetX ( building ) ;
28344: LD_ADDR_VAR 0 5
28348: PUSH
28349: LD_VAR 0 2
28353: PPUSH
28354: CALL_OW 250
28358: ST_TO_ADDR
// y := GetY ( building ) ;
28359: LD_ADDR_VAR 0 6
28363: PUSH
28364: LD_VAR 0 2
28368: PPUSH
28369: CALL_OW 251
28373: ST_TO_ADDR
// for i = 0 to 5 do
28374: LD_ADDR_VAR 0 4
28378: PUSH
28379: DOUBLE
28380: LD_INT 0
28382: DEC
28383: ST_TO_ADDR
28384: LD_INT 5
28386: PUSH
28387: FOR_TO
28388: IFFALSE 28500
// begin _x := ShiftX ( x , i , 3 ) ;
28390: LD_ADDR_VAR 0 7
28394: PUSH
28395: LD_VAR 0 5
28399: PPUSH
28400: LD_VAR 0 4
28404: PPUSH
28405: LD_INT 3
28407: PPUSH
28408: CALL_OW 272
28412: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28413: LD_ADDR_VAR 0 8
28417: PUSH
28418: LD_VAR 0 6
28422: PPUSH
28423: LD_VAR 0 4
28427: PPUSH
28428: LD_INT 3
28430: PPUSH
28431: CALL_OW 273
28435: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28436: LD_VAR 0 7
28440: PPUSH
28441: LD_VAR 0 8
28445: PPUSH
28446: CALL_OW 488
28450: NOT
28451: IFFALSE 28455
// continue ;
28453: GO 28387
// if HexInfo ( _x , _y ) = 0 then
28455: LD_VAR 0 7
28459: PPUSH
28460: LD_VAR 0 8
28464: PPUSH
28465: CALL_OW 428
28469: PUSH
28470: LD_INT 0
28472: EQUAL
28473: IFFALSE 28498
// begin ComMoveXY ( unit , _x , _y ) ;
28475: LD_VAR 0 1
28479: PPUSH
28480: LD_VAR 0 7
28484: PPUSH
28485: LD_VAR 0 8
28489: PPUSH
28490: CALL_OW 111
// exit ;
28494: POP
28495: POP
28496: GO 28502
// end ; end ;
28498: GO 28387
28500: POP
28501: POP
// end ;
28502: LD_VAR 0 3
28506: RET
// export function ScanBase ( side , base_area ) ; begin
28507: LD_INT 0
28509: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28510: LD_ADDR_VAR 0 3
28514: PUSH
28515: LD_VAR 0 2
28519: PPUSH
28520: LD_INT 81
28522: PUSH
28523: LD_VAR 0 1
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: PPUSH
28532: CALL_OW 70
28536: ST_TO_ADDR
// end ;
28537: LD_VAR 0 3
28541: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28542: LD_INT 0
28544: PPUSH
28545: PPUSH
28546: PPUSH
28547: PPUSH
// result := false ;
28548: LD_ADDR_VAR 0 2
28552: PUSH
28553: LD_INT 0
28555: ST_TO_ADDR
// side := GetSide ( unit ) ;
28556: LD_ADDR_VAR 0 3
28560: PUSH
28561: LD_VAR 0 1
28565: PPUSH
28566: CALL_OW 255
28570: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28571: LD_ADDR_VAR 0 4
28575: PUSH
28576: LD_VAR 0 1
28580: PPUSH
28581: CALL_OW 248
28585: ST_TO_ADDR
// case nat of 1 :
28586: LD_VAR 0 4
28590: PUSH
28591: LD_INT 1
28593: DOUBLE
28594: EQUAL
28595: IFTRUE 28599
28597: GO 28610
28599: POP
// tech := tech_lassight ; 2 :
28600: LD_ADDR_VAR 0 5
28604: PUSH
28605: LD_INT 12
28607: ST_TO_ADDR
28608: GO 28649
28610: LD_INT 2
28612: DOUBLE
28613: EQUAL
28614: IFTRUE 28618
28616: GO 28629
28618: POP
// tech := tech_mortar ; 3 :
28619: LD_ADDR_VAR 0 5
28623: PUSH
28624: LD_INT 41
28626: ST_TO_ADDR
28627: GO 28649
28629: LD_INT 3
28631: DOUBLE
28632: EQUAL
28633: IFTRUE 28637
28635: GO 28648
28637: POP
// tech := tech_bazooka ; end ;
28638: LD_ADDR_VAR 0 5
28642: PUSH
28643: LD_INT 44
28645: ST_TO_ADDR
28646: GO 28649
28648: POP
// if Researched ( side , tech ) then
28649: LD_VAR 0 3
28653: PPUSH
28654: LD_VAR 0 5
28658: PPUSH
28659: CALL_OW 325
28663: IFFALSE 28690
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28665: LD_ADDR_VAR 0 2
28669: PUSH
28670: LD_INT 5
28672: PUSH
28673: LD_INT 8
28675: PUSH
28676: LD_INT 9
28678: PUSH
28679: EMPTY
28680: LIST
28681: LIST
28682: LIST
28683: PUSH
28684: LD_VAR 0 4
28688: ARRAY
28689: ST_TO_ADDR
// end ;
28690: LD_VAR 0 2
28694: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28695: LD_INT 0
28697: PPUSH
28698: PPUSH
28699: PPUSH
// if not mines then
28700: LD_VAR 0 2
28704: NOT
28705: IFFALSE 28709
// exit ;
28707: GO 28853
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28709: LD_ADDR_VAR 0 5
28713: PUSH
28714: LD_INT 81
28716: PUSH
28717: LD_VAR 0 1
28721: PUSH
28722: EMPTY
28723: LIST
28724: LIST
28725: PUSH
28726: LD_INT 3
28728: PUSH
28729: LD_INT 21
28731: PUSH
28732: LD_INT 3
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: PPUSH
28747: CALL_OW 69
28751: ST_TO_ADDR
// for i in mines do
28752: LD_ADDR_VAR 0 4
28756: PUSH
28757: LD_VAR 0 2
28761: PUSH
28762: FOR_IN
28763: IFFALSE 28851
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28765: LD_VAR 0 4
28769: PUSH
28770: LD_INT 1
28772: ARRAY
28773: PPUSH
28774: LD_VAR 0 4
28778: PUSH
28779: LD_INT 2
28781: ARRAY
28782: PPUSH
28783: CALL_OW 458
28787: NOT
28788: IFFALSE 28792
// continue ;
28790: GO 28762
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28792: LD_VAR 0 4
28796: PUSH
28797: LD_INT 1
28799: ARRAY
28800: PPUSH
28801: LD_VAR 0 4
28805: PUSH
28806: LD_INT 2
28808: ARRAY
28809: PPUSH
28810: CALL_OW 428
28814: PUSH
28815: LD_VAR 0 5
28819: IN
28820: IFFALSE 28849
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28822: LD_VAR 0 4
28826: PUSH
28827: LD_INT 1
28829: ARRAY
28830: PPUSH
28831: LD_VAR 0 4
28835: PUSH
28836: LD_INT 2
28838: ARRAY
28839: PPUSH
28840: LD_VAR 0 1
28844: PPUSH
28845: CALL_OW 456
// end ;
28849: GO 28762
28851: POP
28852: POP
// end ;
28853: LD_VAR 0 3
28857: RET
// export function Count ( array ) ; var i ; begin
28858: LD_INT 0
28860: PPUSH
28861: PPUSH
// result := 0 ;
28862: LD_ADDR_VAR 0 2
28866: PUSH
28867: LD_INT 0
28869: ST_TO_ADDR
// for i in array do
28870: LD_ADDR_VAR 0 3
28874: PUSH
28875: LD_VAR 0 1
28879: PUSH
28880: FOR_IN
28881: IFFALSE 28905
// if i then
28883: LD_VAR 0 3
28887: IFFALSE 28903
// result := result + 1 ;
28889: LD_ADDR_VAR 0 2
28893: PUSH
28894: LD_VAR 0 2
28898: PUSH
28899: LD_INT 1
28901: PLUS
28902: ST_TO_ADDR
28903: GO 28880
28905: POP
28906: POP
// end ;
28907: LD_VAR 0 2
28911: RET
// export function IsEmpty ( building ) ; begin
28912: LD_INT 0
28914: PPUSH
// if not building then
28915: LD_VAR 0 1
28919: NOT
28920: IFFALSE 28924
// exit ;
28922: GO 28967
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28924: LD_ADDR_VAR 0 2
28928: PUSH
28929: LD_VAR 0 1
28933: PUSH
28934: LD_INT 22
28936: PUSH
28937: LD_VAR 0 1
28941: PPUSH
28942: CALL_OW 255
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: PUSH
28951: LD_INT 58
28953: PUSH
28954: EMPTY
28955: LIST
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: PPUSH
28961: CALL_OW 69
28965: IN
28966: ST_TO_ADDR
// end ;
28967: LD_VAR 0 2
28971: RET
// export function IsNotFull ( building ) ; begin
28972: LD_INT 0
28974: PPUSH
// if not building then
28975: LD_VAR 0 1
28979: NOT
28980: IFFALSE 28984
// exit ;
28982: GO 29003
// result := UnitsInside ( building ) < 6 ;
28984: LD_ADDR_VAR 0 2
28988: PUSH
28989: LD_VAR 0 1
28993: PPUSH
28994: CALL_OW 313
28998: PUSH
28999: LD_INT 6
29001: LESS
29002: ST_TO_ADDR
// end ;
29003: LD_VAR 0 2
29007: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29008: LD_INT 0
29010: PPUSH
29011: PPUSH
29012: PPUSH
29013: PPUSH
// tmp := [ ] ;
29014: LD_ADDR_VAR 0 3
29018: PUSH
29019: EMPTY
29020: ST_TO_ADDR
// list := [ ] ;
29021: LD_ADDR_VAR 0 5
29025: PUSH
29026: EMPTY
29027: ST_TO_ADDR
// for i = 16 to 25 do
29028: LD_ADDR_VAR 0 4
29032: PUSH
29033: DOUBLE
29034: LD_INT 16
29036: DEC
29037: ST_TO_ADDR
29038: LD_INT 25
29040: PUSH
29041: FOR_TO
29042: IFFALSE 29115
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29044: LD_ADDR_VAR 0 3
29048: PUSH
29049: LD_VAR 0 3
29053: PUSH
29054: LD_INT 22
29056: PUSH
29057: LD_VAR 0 1
29061: PPUSH
29062: CALL_OW 255
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: PUSH
29071: LD_INT 91
29073: PUSH
29074: LD_VAR 0 1
29078: PUSH
29079: LD_INT 6
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: LIST
29086: PUSH
29087: LD_INT 30
29089: PUSH
29090: LD_VAR 0 4
29094: PUSH
29095: EMPTY
29096: LIST
29097: LIST
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: LIST
29103: PUSH
29104: EMPTY
29105: LIST
29106: PPUSH
29107: CALL_OW 69
29111: ADD
29112: ST_TO_ADDR
29113: GO 29041
29115: POP
29116: POP
// for i = 1 to tmp do
29117: LD_ADDR_VAR 0 4
29121: PUSH
29122: DOUBLE
29123: LD_INT 1
29125: DEC
29126: ST_TO_ADDR
29127: LD_VAR 0 3
29131: PUSH
29132: FOR_TO
29133: IFFALSE 29221
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29135: LD_ADDR_VAR 0 5
29139: PUSH
29140: LD_VAR 0 5
29144: PUSH
29145: LD_VAR 0 3
29149: PUSH
29150: LD_VAR 0 4
29154: ARRAY
29155: PPUSH
29156: CALL_OW 266
29160: PUSH
29161: LD_VAR 0 3
29165: PUSH
29166: LD_VAR 0 4
29170: ARRAY
29171: PPUSH
29172: CALL_OW 250
29176: PUSH
29177: LD_VAR 0 3
29181: PUSH
29182: LD_VAR 0 4
29186: ARRAY
29187: PPUSH
29188: CALL_OW 251
29192: PUSH
29193: LD_VAR 0 3
29197: PUSH
29198: LD_VAR 0 4
29202: ARRAY
29203: PPUSH
29204: CALL_OW 254
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: PUSH
29215: EMPTY
29216: LIST
29217: ADD
29218: ST_TO_ADDR
29219: GO 29132
29221: POP
29222: POP
// result := list ;
29223: LD_ADDR_VAR 0 2
29227: PUSH
29228: LD_VAR 0 5
29232: ST_TO_ADDR
// end ;
29233: LD_VAR 0 2
29237: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29238: LD_INT 0
29240: PPUSH
29241: PPUSH
29242: PPUSH
29243: PPUSH
29244: PPUSH
29245: PPUSH
29246: PPUSH
// if not factory then
29247: LD_VAR 0 1
29251: NOT
29252: IFFALSE 29256
// exit ;
29254: GO 29849
// if control = control_apeman then
29256: LD_VAR 0 4
29260: PUSH
29261: LD_INT 5
29263: EQUAL
29264: IFFALSE 29373
// begin tmp := UnitsInside ( factory ) ;
29266: LD_ADDR_VAR 0 8
29270: PUSH
29271: LD_VAR 0 1
29275: PPUSH
29276: CALL_OW 313
29280: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29281: LD_VAR 0 8
29285: PPUSH
29286: LD_INT 25
29288: PUSH
29289: LD_INT 12
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PPUSH
29296: CALL_OW 72
29300: NOT
29301: IFFALSE 29311
// control := control_manual ;
29303: LD_ADDR_VAR 0 4
29307: PUSH
29308: LD_INT 1
29310: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29311: LD_ADDR_VAR 0 8
29315: PUSH
29316: LD_VAR 0 1
29320: PPUSH
29321: CALL 29008 0 1
29325: ST_TO_ADDR
// if tmp then
29326: LD_VAR 0 8
29330: IFFALSE 29373
// begin for i in tmp do
29332: LD_ADDR_VAR 0 7
29336: PUSH
29337: LD_VAR 0 8
29341: PUSH
29342: FOR_IN
29343: IFFALSE 29371
// if i [ 1 ] = b_ext_radio then
29345: LD_VAR 0 7
29349: PUSH
29350: LD_INT 1
29352: ARRAY
29353: PUSH
29354: LD_INT 22
29356: EQUAL
29357: IFFALSE 29369
// begin control := control_remote ;
29359: LD_ADDR_VAR 0 4
29363: PUSH
29364: LD_INT 2
29366: ST_TO_ADDR
// break ;
29367: GO 29371
// end ;
29369: GO 29342
29371: POP
29372: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29373: LD_VAR 0 1
29377: PPUSH
29378: LD_VAR 0 2
29382: PPUSH
29383: LD_VAR 0 3
29387: PPUSH
29388: LD_VAR 0 4
29392: PPUSH
29393: LD_VAR 0 5
29397: PPUSH
29398: CALL_OW 448
29402: IFFALSE 29437
// begin result := [ chassis , engine , control , weapon ] ;
29404: LD_ADDR_VAR 0 6
29408: PUSH
29409: LD_VAR 0 2
29413: PUSH
29414: LD_VAR 0 3
29418: PUSH
29419: LD_VAR 0 4
29423: PUSH
29424: LD_VAR 0 5
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: ST_TO_ADDR
// exit ;
29435: GO 29849
// end ; _chassis := AvailableChassisList ( factory ) ;
29437: LD_ADDR_VAR 0 9
29441: PUSH
29442: LD_VAR 0 1
29446: PPUSH
29447: CALL_OW 475
29451: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29452: LD_ADDR_VAR 0 11
29456: PUSH
29457: LD_VAR 0 1
29461: PPUSH
29462: CALL_OW 476
29466: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29467: LD_ADDR_VAR 0 12
29471: PUSH
29472: LD_VAR 0 1
29476: PPUSH
29477: CALL_OW 477
29481: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29482: LD_ADDR_VAR 0 10
29486: PUSH
29487: LD_VAR 0 1
29491: PPUSH
29492: CALL_OW 478
29496: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29497: LD_VAR 0 9
29501: NOT
29502: PUSH
29503: LD_VAR 0 11
29507: NOT
29508: OR
29509: PUSH
29510: LD_VAR 0 12
29514: NOT
29515: OR
29516: PUSH
29517: LD_VAR 0 10
29521: NOT
29522: OR
29523: IFFALSE 29558
// begin result := [ chassis , engine , control , weapon ] ;
29525: LD_ADDR_VAR 0 6
29529: PUSH
29530: LD_VAR 0 2
29534: PUSH
29535: LD_VAR 0 3
29539: PUSH
29540: LD_VAR 0 4
29544: PUSH
29545: LD_VAR 0 5
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: LIST
29554: LIST
29555: ST_TO_ADDR
// exit ;
29556: GO 29849
// end ; if not chassis in _chassis then
29558: LD_VAR 0 2
29562: PUSH
29563: LD_VAR 0 9
29567: IN
29568: NOT
29569: IFFALSE 29595
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29571: LD_ADDR_VAR 0 2
29575: PUSH
29576: LD_VAR 0 9
29580: PUSH
29581: LD_INT 1
29583: PPUSH
29584: LD_VAR 0 9
29588: PPUSH
29589: CALL_OW 12
29593: ARRAY
29594: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29595: LD_VAR 0 2
29599: PPUSH
29600: LD_VAR 0 3
29604: PPUSH
29605: CALL 29854 0 2
29609: NOT
29610: IFFALSE 29669
// repeat engine := _engine [ 1 ] ;
29612: LD_ADDR_VAR 0 3
29616: PUSH
29617: LD_VAR 0 11
29621: PUSH
29622: LD_INT 1
29624: ARRAY
29625: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29626: LD_ADDR_VAR 0 11
29630: PUSH
29631: LD_VAR 0 11
29635: PPUSH
29636: LD_INT 1
29638: PPUSH
29639: CALL_OW 3
29643: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29644: LD_VAR 0 2
29648: PPUSH
29649: LD_VAR 0 3
29653: PPUSH
29654: CALL 29854 0 2
29658: PUSH
29659: LD_VAR 0 11
29663: PUSH
29664: EMPTY
29665: EQUAL
29666: OR
29667: IFFALSE 29612
// if not control in _control then
29669: LD_VAR 0 4
29673: PUSH
29674: LD_VAR 0 12
29678: IN
29679: NOT
29680: IFFALSE 29706
// control := _control [ rand ( 1 , _control ) ] ;
29682: LD_ADDR_VAR 0 4
29686: PUSH
29687: LD_VAR 0 12
29691: PUSH
29692: LD_INT 1
29694: PPUSH
29695: LD_VAR 0 12
29699: PPUSH
29700: CALL_OW 12
29704: ARRAY
29705: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29706: LD_VAR 0 2
29710: PPUSH
29711: LD_VAR 0 5
29715: PPUSH
29716: CALL 30074 0 2
29720: NOT
29721: IFFALSE 29780
// repeat weapon := _weapon [ 1 ] ;
29723: LD_ADDR_VAR 0 5
29727: PUSH
29728: LD_VAR 0 10
29732: PUSH
29733: LD_INT 1
29735: ARRAY
29736: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29737: LD_ADDR_VAR 0 10
29741: PUSH
29742: LD_VAR 0 10
29746: PPUSH
29747: LD_INT 1
29749: PPUSH
29750: CALL_OW 3
29754: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29755: LD_VAR 0 2
29759: PPUSH
29760: LD_VAR 0 5
29764: PPUSH
29765: CALL 30074 0 2
29769: PUSH
29770: LD_VAR 0 10
29774: PUSH
29775: EMPTY
29776: EQUAL
29777: OR
29778: IFFALSE 29723
// result := [ ] ;
29780: LD_ADDR_VAR 0 6
29784: PUSH
29785: EMPTY
29786: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29787: LD_VAR 0 1
29791: PPUSH
29792: LD_VAR 0 2
29796: PPUSH
29797: LD_VAR 0 3
29801: PPUSH
29802: LD_VAR 0 4
29806: PPUSH
29807: LD_VAR 0 5
29811: PPUSH
29812: CALL_OW 448
29816: IFFALSE 29849
// result := [ chassis , engine , control , weapon ] ;
29818: LD_ADDR_VAR 0 6
29822: PUSH
29823: LD_VAR 0 2
29827: PUSH
29828: LD_VAR 0 3
29832: PUSH
29833: LD_VAR 0 4
29837: PUSH
29838: LD_VAR 0 5
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: LIST
29847: LIST
29848: ST_TO_ADDR
// end ;
29849: LD_VAR 0 6
29853: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29854: LD_INT 0
29856: PPUSH
// if not chassis or not engine then
29857: LD_VAR 0 1
29861: NOT
29862: PUSH
29863: LD_VAR 0 2
29867: NOT
29868: OR
29869: IFFALSE 29873
// exit ;
29871: GO 30069
// case engine of engine_solar :
29873: LD_VAR 0 2
29877: PUSH
29878: LD_INT 2
29880: DOUBLE
29881: EQUAL
29882: IFTRUE 29886
29884: GO 29924
29886: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29887: LD_ADDR_VAR 0 3
29891: PUSH
29892: LD_INT 11
29894: PUSH
29895: LD_INT 12
29897: PUSH
29898: LD_INT 13
29900: PUSH
29901: LD_INT 14
29903: PUSH
29904: LD_INT 1
29906: PUSH
29907: LD_INT 2
29909: PUSH
29910: LD_INT 3
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: LIST
29917: LIST
29918: LIST
29919: LIST
29920: LIST
29921: ST_TO_ADDR
29922: GO 30053
29924: LD_INT 1
29926: DOUBLE
29927: EQUAL
29928: IFTRUE 29932
29930: GO 29994
29932: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29933: LD_ADDR_VAR 0 3
29937: PUSH
29938: LD_INT 11
29940: PUSH
29941: LD_INT 12
29943: PUSH
29944: LD_INT 13
29946: PUSH
29947: LD_INT 14
29949: PUSH
29950: LD_INT 1
29952: PUSH
29953: LD_INT 2
29955: PUSH
29956: LD_INT 3
29958: PUSH
29959: LD_INT 4
29961: PUSH
29962: LD_INT 5
29964: PUSH
29965: LD_INT 21
29967: PUSH
29968: LD_INT 23
29970: PUSH
29971: LD_INT 22
29973: PUSH
29974: LD_INT 24
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: ST_TO_ADDR
29992: GO 30053
29994: LD_INT 3
29996: DOUBLE
29997: EQUAL
29998: IFTRUE 30002
30000: GO 30052
30002: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30003: LD_ADDR_VAR 0 3
30007: PUSH
30008: LD_INT 13
30010: PUSH
30011: LD_INT 14
30013: PUSH
30014: LD_INT 2
30016: PUSH
30017: LD_INT 3
30019: PUSH
30020: LD_INT 4
30022: PUSH
30023: LD_INT 5
30025: PUSH
30026: LD_INT 21
30028: PUSH
30029: LD_INT 22
30031: PUSH
30032: LD_INT 23
30034: PUSH
30035: LD_INT 24
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: LIST
30046: LIST
30047: LIST
30048: LIST
30049: ST_TO_ADDR
30050: GO 30053
30052: POP
// result := ( chassis in result ) ;
30053: LD_ADDR_VAR 0 3
30057: PUSH
30058: LD_VAR 0 1
30062: PUSH
30063: LD_VAR 0 3
30067: IN
30068: ST_TO_ADDR
// end ;
30069: LD_VAR 0 3
30073: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30074: LD_INT 0
30076: PPUSH
// if not chassis or not weapon then
30077: LD_VAR 0 1
30081: NOT
30082: PUSH
30083: LD_VAR 0 2
30087: NOT
30088: OR
30089: IFFALSE 30093
// exit ;
30091: GO 31119
// case weapon of us_machine_gun :
30093: LD_VAR 0 2
30097: PUSH
30098: LD_INT 2
30100: DOUBLE
30101: EQUAL
30102: IFTRUE 30106
30104: GO 30136
30106: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30107: LD_ADDR_VAR 0 3
30111: PUSH
30112: LD_INT 1
30114: PUSH
30115: LD_INT 2
30117: PUSH
30118: LD_INT 3
30120: PUSH
30121: LD_INT 4
30123: PUSH
30124: LD_INT 5
30126: PUSH
30127: EMPTY
30128: LIST
30129: LIST
30130: LIST
30131: LIST
30132: LIST
30133: ST_TO_ADDR
30134: GO 31103
30136: LD_INT 3
30138: DOUBLE
30139: EQUAL
30140: IFTRUE 30144
30142: GO 30174
30144: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30145: LD_ADDR_VAR 0 3
30149: PUSH
30150: LD_INT 1
30152: PUSH
30153: LD_INT 2
30155: PUSH
30156: LD_INT 3
30158: PUSH
30159: LD_INT 4
30161: PUSH
30162: LD_INT 5
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: ST_TO_ADDR
30172: GO 31103
30174: LD_INT 11
30176: DOUBLE
30177: EQUAL
30178: IFTRUE 30182
30180: GO 30212
30182: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30183: LD_ADDR_VAR 0 3
30187: PUSH
30188: LD_INT 1
30190: PUSH
30191: LD_INT 2
30193: PUSH
30194: LD_INT 3
30196: PUSH
30197: LD_INT 4
30199: PUSH
30200: LD_INT 5
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: ST_TO_ADDR
30210: GO 31103
30212: LD_INT 4
30214: DOUBLE
30215: EQUAL
30216: IFTRUE 30220
30218: GO 30246
30220: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30221: LD_ADDR_VAR 0 3
30225: PUSH
30226: LD_INT 2
30228: PUSH
30229: LD_INT 3
30231: PUSH
30232: LD_INT 4
30234: PUSH
30235: LD_INT 5
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: ST_TO_ADDR
30244: GO 31103
30246: LD_INT 5
30248: DOUBLE
30249: EQUAL
30250: IFTRUE 30254
30252: GO 30280
30254: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30255: LD_ADDR_VAR 0 3
30259: PUSH
30260: LD_INT 2
30262: PUSH
30263: LD_INT 3
30265: PUSH
30266: LD_INT 4
30268: PUSH
30269: LD_INT 5
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: LIST
30276: LIST
30277: ST_TO_ADDR
30278: GO 31103
30280: LD_INT 9
30282: DOUBLE
30283: EQUAL
30284: IFTRUE 30288
30286: GO 30314
30288: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30289: LD_ADDR_VAR 0 3
30293: PUSH
30294: LD_INT 2
30296: PUSH
30297: LD_INT 3
30299: PUSH
30300: LD_INT 4
30302: PUSH
30303: LD_INT 5
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: ST_TO_ADDR
30312: GO 31103
30314: LD_INT 7
30316: DOUBLE
30317: EQUAL
30318: IFTRUE 30322
30320: GO 30348
30322: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30323: LD_ADDR_VAR 0 3
30327: PUSH
30328: LD_INT 2
30330: PUSH
30331: LD_INT 3
30333: PUSH
30334: LD_INT 4
30336: PUSH
30337: LD_INT 5
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: ST_TO_ADDR
30346: GO 31103
30348: LD_INT 12
30350: DOUBLE
30351: EQUAL
30352: IFTRUE 30356
30354: GO 30382
30356: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30357: LD_ADDR_VAR 0 3
30361: PUSH
30362: LD_INT 2
30364: PUSH
30365: LD_INT 3
30367: PUSH
30368: LD_INT 4
30370: PUSH
30371: LD_INT 5
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: ST_TO_ADDR
30380: GO 31103
30382: LD_INT 13
30384: DOUBLE
30385: EQUAL
30386: IFTRUE 30390
30388: GO 30416
30390: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30391: LD_ADDR_VAR 0 3
30395: PUSH
30396: LD_INT 2
30398: PUSH
30399: LD_INT 3
30401: PUSH
30402: LD_INT 4
30404: PUSH
30405: LD_INT 5
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: ST_TO_ADDR
30414: GO 31103
30416: LD_INT 14
30418: DOUBLE
30419: EQUAL
30420: IFTRUE 30424
30422: GO 30442
30424: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30425: LD_ADDR_VAR 0 3
30429: PUSH
30430: LD_INT 4
30432: PUSH
30433: LD_INT 5
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: ST_TO_ADDR
30440: GO 31103
30442: LD_INT 6
30444: DOUBLE
30445: EQUAL
30446: IFTRUE 30450
30448: GO 30468
30450: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30451: LD_ADDR_VAR 0 3
30455: PUSH
30456: LD_INT 4
30458: PUSH
30459: LD_INT 5
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: ST_TO_ADDR
30466: GO 31103
30468: LD_INT 10
30470: DOUBLE
30471: EQUAL
30472: IFTRUE 30476
30474: GO 30494
30476: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30477: LD_ADDR_VAR 0 3
30481: PUSH
30482: LD_INT 4
30484: PUSH
30485: LD_INT 5
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: ST_TO_ADDR
30492: GO 31103
30494: LD_INT 22
30496: DOUBLE
30497: EQUAL
30498: IFTRUE 30502
30500: GO 30528
30502: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30503: LD_ADDR_VAR 0 3
30507: PUSH
30508: LD_INT 11
30510: PUSH
30511: LD_INT 12
30513: PUSH
30514: LD_INT 13
30516: PUSH
30517: LD_INT 14
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: ST_TO_ADDR
30526: GO 31103
30528: LD_INT 23
30530: DOUBLE
30531: EQUAL
30532: IFTRUE 30536
30534: GO 30562
30536: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30537: LD_ADDR_VAR 0 3
30541: PUSH
30542: LD_INT 11
30544: PUSH
30545: LD_INT 12
30547: PUSH
30548: LD_INT 13
30550: PUSH
30551: LD_INT 14
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: ST_TO_ADDR
30560: GO 31103
30562: LD_INT 24
30564: DOUBLE
30565: EQUAL
30566: IFTRUE 30570
30568: GO 30596
30570: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30571: LD_ADDR_VAR 0 3
30575: PUSH
30576: LD_INT 11
30578: PUSH
30579: LD_INT 12
30581: PUSH
30582: LD_INT 13
30584: PUSH
30585: LD_INT 14
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: ST_TO_ADDR
30594: GO 31103
30596: LD_INT 30
30598: DOUBLE
30599: EQUAL
30600: IFTRUE 30604
30602: GO 30630
30604: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30605: LD_ADDR_VAR 0 3
30609: PUSH
30610: LD_INT 11
30612: PUSH
30613: LD_INT 12
30615: PUSH
30616: LD_INT 13
30618: PUSH
30619: LD_INT 14
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: LIST
30626: LIST
30627: ST_TO_ADDR
30628: GO 31103
30630: LD_INT 25
30632: DOUBLE
30633: EQUAL
30634: IFTRUE 30638
30636: GO 30656
30638: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30639: LD_ADDR_VAR 0 3
30643: PUSH
30644: LD_INT 13
30646: PUSH
30647: LD_INT 14
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: ST_TO_ADDR
30654: GO 31103
30656: LD_INT 27
30658: DOUBLE
30659: EQUAL
30660: IFTRUE 30664
30662: GO 30682
30664: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30665: LD_ADDR_VAR 0 3
30669: PUSH
30670: LD_INT 13
30672: PUSH
30673: LD_INT 14
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: ST_TO_ADDR
30680: GO 31103
30682: LD_INT 28
30684: DOUBLE
30685: EQUAL
30686: IFTRUE 30690
30688: GO 30708
30690: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30691: LD_ADDR_VAR 0 3
30695: PUSH
30696: LD_INT 13
30698: PUSH
30699: LD_INT 14
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: ST_TO_ADDR
30706: GO 31103
30708: LD_INT 29
30710: DOUBLE
30711: EQUAL
30712: IFTRUE 30716
30714: GO 30734
30716: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30717: LD_ADDR_VAR 0 3
30721: PUSH
30722: LD_INT 13
30724: PUSH
30725: LD_INT 14
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: ST_TO_ADDR
30732: GO 31103
30734: LD_INT 31
30736: DOUBLE
30737: EQUAL
30738: IFTRUE 30742
30740: GO 30760
30742: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30743: LD_ADDR_VAR 0 3
30747: PUSH
30748: LD_INT 13
30750: PUSH
30751: LD_INT 14
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: ST_TO_ADDR
30758: GO 31103
30760: LD_INT 26
30762: DOUBLE
30763: EQUAL
30764: IFTRUE 30768
30766: GO 30786
30768: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30769: LD_ADDR_VAR 0 3
30773: PUSH
30774: LD_INT 13
30776: PUSH
30777: LD_INT 14
30779: PUSH
30780: EMPTY
30781: LIST
30782: LIST
30783: ST_TO_ADDR
30784: GO 31103
30786: LD_INT 42
30788: DOUBLE
30789: EQUAL
30790: IFTRUE 30794
30792: GO 30820
30794: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30795: LD_ADDR_VAR 0 3
30799: PUSH
30800: LD_INT 21
30802: PUSH
30803: LD_INT 22
30805: PUSH
30806: LD_INT 23
30808: PUSH
30809: LD_INT 24
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: ST_TO_ADDR
30818: GO 31103
30820: LD_INT 43
30822: DOUBLE
30823: EQUAL
30824: IFTRUE 30828
30826: GO 30854
30828: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30829: LD_ADDR_VAR 0 3
30833: PUSH
30834: LD_INT 21
30836: PUSH
30837: LD_INT 22
30839: PUSH
30840: LD_INT 23
30842: PUSH
30843: LD_INT 24
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: ST_TO_ADDR
30852: GO 31103
30854: LD_INT 44
30856: DOUBLE
30857: EQUAL
30858: IFTRUE 30862
30860: GO 30888
30862: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30863: LD_ADDR_VAR 0 3
30867: PUSH
30868: LD_INT 21
30870: PUSH
30871: LD_INT 22
30873: PUSH
30874: LD_INT 23
30876: PUSH
30877: LD_INT 24
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: ST_TO_ADDR
30886: GO 31103
30888: LD_INT 45
30890: DOUBLE
30891: EQUAL
30892: IFTRUE 30896
30894: GO 30922
30896: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30897: LD_ADDR_VAR 0 3
30901: PUSH
30902: LD_INT 21
30904: PUSH
30905: LD_INT 22
30907: PUSH
30908: LD_INT 23
30910: PUSH
30911: LD_INT 24
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: LIST
30918: LIST
30919: ST_TO_ADDR
30920: GO 31103
30922: LD_INT 49
30924: DOUBLE
30925: EQUAL
30926: IFTRUE 30930
30928: GO 30956
30930: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30931: LD_ADDR_VAR 0 3
30935: PUSH
30936: LD_INT 21
30938: PUSH
30939: LD_INT 22
30941: PUSH
30942: LD_INT 23
30944: PUSH
30945: LD_INT 24
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: ST_TO_ADDR
30954: GO 31103
30956: LD_INT 51
30958: DOUBLE
30959: EQUAL
30960: IFTRUE 30964
30962: GO 30990
30964: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30965: LD_ADDR_VAR 0 3
30969: PUSH
30970: LD_INT 21
30972: PUSH
30973: LD_INT 22
30975: PUSH
30976: LD_INT 23
30978: PUSH
30979: LD_INT 24
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: LIST
30986: LIST
30987: ST_TO_ADDR
30988: GO 31103
30990: LD_INT 52
30992: DOUBLE
30993: EQUAL
30994: IFTRUE 30998
30996: GO 31024
30998: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30999: LD_ADDR_VAR 0 3
31003: PUSH
31004: LD_INT 21
31006: PUSH
31007: LD_INT 22
31009: PUSH
31010: LD_INT 23
31012: PUSH
31013: LD_INT 24
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: ST_TO_ADDR
31022: GO 31103
31024: LD_INT 53
31026: DOUBLE
31027: EQUAL
31028: IFTRUE 31032
31030: GO 31050
31032: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31033: LD_ADDR_VAR 0 3
31037: PUSH
31038: LD_INT 23
31040: PUSH
31041: LD_INT 24
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: ST_TO_ADDR
31048: GO 31103
31050: LD_INT 46
31052: DOUBLE
31053: EQUAL
31054: IFTRUE 31058
31056: GO 31076
31058: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31059: LD_ADDR_VAR 0 3
31063: PUSH
31064: LD_INT 23
31066: PUSH
31067: LD_INT 24
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: ST_TO_ADDR
31074: GO 31103
31076: LD_INT 47
31078: DOUBLE
31079: EQUAL
31080: IFTRUE 31084
31082: GO 31102
31084: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31085: LD_ADDR_VAR 0 3
31089: PUSH
31090: LD_INT 23
31092: PUSH
31093: LD_INT 24
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: ST_TO_ADDR
31100: GO 31103
31102: POP
// result := ( chassis in result ) ;
31103: LD_ADDR_VAR 0 3
31107: PUSH
31108: LD_VAR 0 1
31112: PUSH
31113: LD_VAR 0 3
31117: IN
31118: ST_TO_ADDR
// end ;
31119: LD_VAR 0 3
31123: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31124: LD_INT 0
31126: PPUSH
31127: PPUSH
31128: PPUSH
31129: PPUSH
31130: PPUSH
31131: PPUSH
31132: PPUSH
// result := array ;
31133: LD_ADDR_VAR 0 5
31137: PUSH
31138: LD_VAR 0 1
31142: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31143: LD_VAR 0 1
31147: NOT
31148: PUSH
31149: LD_VAR 0 2
31153: NOT
31154: OR
31155: PUSH
31156: LD_VAR 0 3
31160: NOT
31161: OR
31162: PUSH
31163: LD_VAR 0 2
31167: PUSH
31168: LD_VAR 0 1
31172: GREATER
31173: OR
31174: PUSH
31175: LD_VAR 0 3
31179: PUSH
31180: LD_VAR 0 1
31184: GREATER
31185: OR
31186: IFFALSE 31190
// exit ;
31188: GO 31486
// if direction then
31190: LD_VAR 0 4
31194: IFFALSE 31258
// begin d := 1 ;
31196: LD_ADDR_VAR 0 9
31200: PUSH
31201: LD_INT 1
31203: ST_TO_ADDR
// if i_from > i_to then
31204: LD_VAR 0 2
31208: PUSH
31209: LD_VAR 0 3
31213: GREATER
31214: IFFALSE 31240
// length := ( array - i_from ) + i_to else
31216: LD_ADDR_VAR 0 11
31220: PUSH
31221: LD_VAR 0 1
31225: PUSH
31226: LD_VAR 0 2
31230: MINUS
31231: PUSH
31232: LD_VAR 0 3
31236: PLUS
31237: ST_TO_ADDR
31238: GO 31256
// length := i_to - i_from ;
31240: LD_ADDR_VAR 0 11
31244: PUSH
31245: LD_VAR 0 3
31249: PUSH
31250: LD_VAR 0 2
31254: MINUS
31255: ST_TO_ADDR
// end else
31256: GO 31319
// begin d := - 1 ;
31258: LD_ADDR_VAR 0 9
31262: PUSH
31263: LD_INT 1
31265: NEG
31266: ST_TO_ADDR
// if i_from > i_to then
31267: LD_VAR 0 2
31271: PUSH
31272: LD_VAR 0 3
31276: GREATER
31277: IFFALSE 31297
// length := i_from - i_to else
31279: LD_ADDR_VAR 0 11
31283: PUSH
31284: LD_VAR 0 2
31288: PUSH
31289: LD_VAR 0 3
31293: MINUS
31294: ST_TO_ADDR
31295: GO 31319
// length := ( array - i_to ) + i_from ;
31297: LD_ADDR_VAR 0 11
31301: PUSH
31302: LD_VAR 0 1
31306: PUSH
31307: LD_VAR 0 3
31311: MINUS
31312: PUSH
31313: LD_VAR 0 2
31317: PLUS
31318: ST_TO_ADDR
// end ; if not length then
31319: LD_VAR 0 11
31323: NOT
31324: IFFALSE 31328
// exit ;
31326: GO 31486
// tmp := array ;
31328: LD_ADDR_VAR 0 10
31332: PUSH
31333: LD_VAR 0 1
31337: ST_TO_ADDR
// for i = 1 to length do
31338: LD_ADDR_VAR 0 6
31342: PUSH
31343: DOUBLE
31344: LD_INT 1
31346: DEC
31347: ST_TO_ADDR
31348: LD_VAR 0 11
31352: PUSH
31353: FOR_TO
31354: IFFALSE 31474
// begin for j = 1 to array do
31356: LD_ADDR_VAR 0 7
31360: PUSH
31361: DOUBLE
31362: LD_INT 1
31364: DEC
31365: ST_TO_ADDR
31366: LD_VAR 0 1
31370: PUSH
31371: FOR_TO
31372: IFFALSE 31460
// begin k := j + d ;
31374: LD_ADDR_VAR 0 8
31378: PUSH
31379: LD_VAR 0 7
31383: PUSH
31384: LD_VAR 0 9
31388: PLUS
31389: ST_TO_ADDR
// if k > array then
31390: LD_VAR 0 8
31394: PUSH
31395: LD_VAR 0 1
31399: GREATER
31400: IFFALSE 31410
// k := 1 ;
31402: LD_ADDR_VAR 0 8
31406: PUSH
31407: LD_INT 1
31409: ST_TO_ADDR
// if not k then
31410: LD_VAR 0 8
31414: NOT
31415: IFFALSE 31427
// k := array ;
31417: LD_ADDR_VAR 0 8
31421: PUSH
31422: LD_VAR 0 1
31426: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31427: LD_ADDR_VAR 0 10
31431: PUSH
31432: LD_VAR 0 10
31436: PPUSH
31437: LD_VAR 0 8
31441: PPUSH
31442: LD_VAR 0 1
31446: PUSH
31447: LD_VAR 0 7
31451: ARRAY
31452: PPUSH
31453: CALL_OW 1
31457: ST_TO_ADDR
// end ;
31458: GO 31371
31460: POP
31461: POP
// array := tmp ;
31462: LD_ADDR_VAR 0 1
31466: PUSH
31467: LD_VAR 0 10
31471: ST_TO_ADDR
// end ;
31472: GO 31353
31474: POP
31475: POP
// result := array ;
31476: LD_ADDR_VAR 0 5
31480: PUSH
31481: LD_VAR 0 1
31485: ST_TO_ADDR
// end ;
31486: LD_VAR 0 5
31490: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31491: LD_INT 0
31493: PPUSH
31494: PPUSH
// result := 0 ;
31495: LD_ADDR_VAR 0 3
31499: PUSH
31500: LD_INT 0
31502: ST_TO_ADDR
// if not array or not value in array then
31503: LD_VAR 0 1
31507: NOT
31508: PUSH
31509: LD_VAR 0 2
31513: PUSH
31514: LD_VAR 0 1
31518: IN
31519: NOT
31520: OR
31521: IFFALSE 31525
// exit ;
31523: GO 31579
// for i = 1 to array do
31525: LD_ADDR_VAR 0 4
31529: PUSH
31530: DOUBLE
31531: LD_INT 1
31533: DEC
31534: ST_TO_ADDR
31535: LD_VAR 0 1
31539: PUSH
31540: FOR_TO
31541: IFFALSE 31577
// if value = array [ i ] then
31543: LD_VAR 0 2
31547: PUSH
31548: LD_VAR 0 1
31552: PUSH
31553: LD_VAR 0 4
31557: ARRAY
31558: EQUAL
31559: IFFALSE 31575
// begin result := i ;
31561: LD_ADDR_VAR 0 3
31565: PUSH
31566: LD_VAR 0 4
31570: ST_TO_ADDR
// exit ;
31571: POP
31572: POP
31573: GO 31579
// end ;
31575: GO 31540
31577: POP
31578: POP
// end ;
31579: LD_VAR 0 3
31583: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31584: LD_INT 0
31586: PPUSH
// vc_chassis := chassis ;
31587: LD_ADDR_OWVAR 37
31591: PUSH
31592: LD_VAR 0 1
31596: ST_TO_ADDR
// vc_engine := engine ;
31597: LD_ADDR_OWVAR 39
31601: PUSH
31602: LD_VAR 0 2
31606: ST_TO_ADDR
// vc_control := control ;
31607: LD_ADDR_OWVAR 38
31611: PUSH
31612: LD_VAR 0 3
31616: ST_TO_ADDR
// vc_weapon := weapon ;
31617: LD_ADDR_OWVAR 40
31621: PUSH
31622: LD_VAR 0 4
31626: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31627: LD_ADDR_OWVAR 41
31631: PUSH
31632: LD_VAR 0 5
31636: ST_TO_ADDR
// end ;
31637: LD_VAR 0 6
31641: RET
// export function WantPlant ( unit ) ; var task ; begin
31642: LD_INT 0
31644: PPUSH
31645: PPUSH
// result := false ;
31646: LD_ADDR_VAR 0 2
31650: PUSH
31651: LD_INT 0
31653: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31654: LD_ADDR_VAR 0 3
31658: PUSH
31659: LD_VAR 0 1
31663: PPUSH
31664: CALL_OW 437
31668: ST_TO_ADDR
// if task then
31669: LD_VAR 0 3
31673: IFFALSE 31701
// if task [ 1 ] [ 1 ] = p then
31675: LD_VAR 0 3
31679: PUSH
31680: LD_INT 1
31682: ARRAY
31683: PUSH
31684: LD_INT 1
31686: ARRAY
31687: PUSH
31688: LD_STRING p
31690: EQUAL
31691: IFFALSE 31701
// result := true ;
31693: LD_ADDR_VAR 0 2
31697: PUSH
31698: LD_INT 1
31700: ST_TO_ADDR
// end ;
31701: LD_VAR 0 2
31705: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31706: LD_INT 0
31708: PPUSH
31709: PPUSH
31710: PPUSH
31711: PPUSH
// if pos < 1 then
31712: LD_VAR 0 2
31716: PUSH
31717: LD_INT 1
31719: LESS
31720: IFFALSE 31724
// exit ;
31722: GO 32027
// if pos = 1 then
31724: LD_VAR 0 2
31728: PUSH
31729: LD_INT 1
31731: EQUAL
31732: IFFALSE 31765
// result := Replace ( arr , pos [ 1 ] , value ) else
31734: LD_ADDR_VAR 0 4
31738: PUSH
31739: LD_VAR 0 1
31743: PPUSH
31744: LD_VAR 0 2
31748: PUSH
31749: LD_INT 1
31751: ARRAY
31752: PPUSH
31753: LD_VAR 0 3
31757: PPUSH
31758: CALL_OW 1
31762: ST_TO_ADDR
31763: GO 32027
// begin tmp := arr ;
31765: LD_ADDR_VAR 0 6
31769: PUSH
31770: LD_VAR 0 1
31774: ST_TO_ADDR
// s_arr := [ tmp ] ;
31775: LD_ADDR_VAR 0 7
31779: PUSH
31780: LD_VAR 0 6
31784: PUSH
31785: EMPTY
31786: LIST
31787: ST_TO_ADDR
// for i = 1 to pos - 1 do
31788: LD_ADDR_VAR 0 5
31792: PUSH
31793: DOUBLE
31794: LD_INT 1
31796: DEC
31797: ST_TO_ADDR
31798: LD_VAR 0 2
31802: PUSH
31803: LD_INT 1
31805: MINUS
31806: PUSH
31807: FOR_TO
31808: IFFALSE 31853
// begin tmp := tmp [ pos [ i ] ] ;
31810: LD_ADDR_VAR 0 6
31814: PUSH
31815: LD_VAR 0 6
31819: PUSH
31820: LD_VAR 0 2
31824: PUSH
31825: LD_VAR 0 5
31829: ARRAY
31830: ARRAY
31831: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31832: LD_ADDR_VAR 0 7
31836: PUSH
31837: LD_VAR 0 7
31841: PUSH
31842: LD_VAR 0 6
31846: PUSH
31847: EMPTY
31848: LIST
31849: ADD
31850: ST_TO_ADDR
// end ;
31851: GO 31807
31853: POP
31854: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31855: LD_ADDR_VAR 0 6
31859: PUSH
31860: LD_VAR 0 6
31864: PPUSH
31865: LD_VAR 0 2
31869: PUSH
31870: LD_VAR 0 2
31874: ARRAY
31875: PPUSH
31876: LD_VAR 0 3
31880: PPUSH
31881: CALL_OW 1
31885: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31886: LD_ADDR_VAR 0 7
31890: PUSH
31891: LD_VAR 0 7
31895: PPUSH
31896: LD_VAR 0 7
31900: PPUSH
31901: LD_VAR 0 6
31905: PPUSH
31906: CALL_OW 1
31910: ST_TO_ADDR
// for i = s_arr downto 2 do
31911: LD_ADDR_VAR 0 5
31915: PUSH
31916: DOUBLE
31917: LD_VAR 0 7
31921: INC
31922: ST_TO_ADDR
31923: LD_INT 2
31925: PUSH
31926: FOR_DOWNTO
31927: IFFALSE 32011
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31929: LD_ADDR_VAR 0 6
31933: PUSH
31934: LD_VAR 0 7
31938: PUSH
31939: LD_VAR 0 5
31943: PUSH
31944: LD_INT 1
31946: MINUS
31947: ARRAY
31948: PPUSH
31949: LD_VAR 0 2
31953: PUSH
31954: LD_VAR 0 5
31958: PUSH
31959: LD_INT 1
31961: MINUS
31962: ARRAY
31963: PPUSH
31964: LD_VAR 0 7
31968: PUSH
31969: LD_VAR 0 5
31973: ARRAY
31974: PPUSH
31975: CALL_OW 1
31979: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31980: LD_ADDR_VAR 0 7
31984: PUSH
31985: LD_VAR 0 7
31989: PPUSH
31990: LD_VAR 0 5
31994: PUSH
31995: LD_INT 1
31997: MINUS
31998: PPUSH
31999: LD_VAR 0 6
32003: PPUSH
32004: CALL_OW 1
32008: ST_TO_ADDR
// end ;
32009: GO 31926
32011: POP
32012: POP
// result := s_arr [ 1 ] ;
32013: LD_ADDR_VAR 0 4
32017: PUSH
32018: LD_VAR 0 7
32022: PUSH
32023: LD_INT 1
32025: ARRAY
32026: ST_TO_ADDR
// end ; end ;
32027: LD_VAR 0 4
32031: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32032: LD_INT 0
32034: PPUSH
32035: PPUSH
// if not list then
32036: LD_VAR 0 1
32040: NOT
32041: IFFALSE 32045
// exit ;
32043: GO 32136
// i := list [ pos1 ] ;
32045: LD_ADDR_VAR 0 5
32049: PUSH
32050: LD_VAR 0 1
32054: PUSH
32055: LD_VAR 0 2
32059: ARRAY
32060: ST_TO_ADDR
// if not i then
32061: LD_VAR 0 5
32065: NOT
32066: IFFALSE 32070
// exit ;
32068: GO 32136
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32070: LD_ADDR_VAR 0 1
32074: PUSH
32075: LD_VAR 0 1
32079: PPUSH
32080: LD_VAR 0 2
32084: PPUSH
32085: LD_VAR 0 1
32089: PUSH
32090: LD_VAR 0 3
32094: ARRAY
32095: PPUSH
32096: CALL_OW 1
32100: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32101: LD_ADDR_VAR 0 1
32105: PUSH
32106: LD_VAR 0 1
32110: PPUSH
32111: LD_VAR 0 3
32115: PPUSH
32116: LD_VAR 0 5
32120: PPUSH
32121: CALL_OW 1
32125: ST_TO_ADDR
// result := list ;
32126: LD_ADDR_VAR 0 4
32130: PUSH
32131: LD_VAR 0 1
32135: ST_TO_ADDR
// end ;
32136: LD_VAR 0 4
32140: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32141: LD_INT 0
32143: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32144: LD_ADDR_VAR 0 5
32148: PUSH
32149: LD_VAR 0 1
32153: PPUSH
32154: CALL_OW 250
32158: PPUSH
32159: LD_VAR 0 1
32163: PPUSH
32164: CALL_OW 251
32168: PPUSH
32169: LD_VAR 0 2
32173: PPUSH
32174: LD_VAR 0 3
32178: PPUSH
32179: LD_VAR 0 4
32183: PPUSH
32184: CALL 32194 0 5
32188: ST_TO_ADDR
// end ;
32189: LD_VAR 0 5
32193: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32194: LD_INT 0
32196: PPUSH
32197: PPUSH
32198: PPUSH
32199: PPUSH
// if not list then
32200: LD_VAR 0 3
32204: NOT
32205: IFFALSE 32209
// exit ;
32207: GO 32597
// result := [ ] ;
32209: LD_ADDR_VAR 0 6
32213: PUSH
32214: EMPTY
32215: ST_TO_ADDR
// for i in list do
32216: LD_ADDR_VAR 0 7
32220: PUSH
32221: LD_VAR 0 3
32225: PUSH
32226: FOR_IN
32227: IFFALSE 32429
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32229: LD_ADDR_VAR 0 9
32233: PUSH
32234: LD_VAR 0 7
32238: PPUSH
32239: LD_VAR 0 1
32243: PPUSH
32244: LD_VAR 0 2
32248: PPUSH
32249: CALL_OW 297
32253: ST_TO_ADDR
// if not result then
32254: LD_VAR 0 6
32258: NOT
32259: IFFALSE 32285
// result := [ [ i , tmp ] ] else
32261: LD_ADDR_VAR 0 6
32265: PUSH
32266: LD_VAR 0 7
32270: PUSH
32271: LD_VAR 0 9
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: PUSH
32280: EMPTY
32281: LIST
32282: ST_TO_ADDR
32283: GO 32427
// begin if result [ result ] [ 2 ] < tmp then
32285: LD_VAR 0 6
32289: PUSH
32290: LD_VAR 0 6
32294: ARRAY
32295: PUSH
32296: LD_INT 2
32298: ARRAY
32299: PUSH
32300: LD_VAR 0 9
32304: LESS
32305: IFFALSE 32347
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32307: LD_ADDR_VAR 0 6
32311: PUSH
32312: LD_VAR 0 6
32316: PPUSH
32317: LD_VAR 0 6
32321: PUSH
32322: LD_INT 1
32324: PLUS
32325: PPUSH
32326: LD_VAR 0 7
32330: PUSH
32331: LD_VAR 0 9
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: PPUSH
32340: CALL_OW 2
32344: ST_TO_ADDR
32345: GO 32427
// for j = 1 to result do
32347: LD_ADDR_VAR 0 8
32351: PUSH
32352: DOUBLE
32353: LD_INT 1
32355: DEC
32356: ST_TO_ADDR
32357: LD_VAR 0 6
32361: PUSH
32362: FOR_TO
32363: IFFALSE 32425
// begin if tmp < result [ j ] [ 2 ] then
32365: LD_VAR 0 9
32369: PUSH
32370: LD_VAR 0 6
32374: PUSH
32375: LD_VAR 0 8
32379: ARRAY
32380: PUSH
32381: LD_INT 2
32383: ARRAY
32384: LESS
32385: IFFALSE 32423
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32387: LD_ADDR_VAR 0 6
32391: PUSH
32392: LD_VAR 0 6
32396: PPUSH
32397: LD_VAR 0 8
32401: PPUSH
32402: LD_VAR 0 7
32406: PUSH
32407: LD_VAR 0 9
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: PPUSH
32416: CALL_OW 2
32420: ST_TO_ADDR
// break ;
32421: GO 32425
// end ; end ;
32423: GO 32362
32425: POP
32426: POP
// end ; end ;
32427: GO 32226
32429: POP
32430: POP
// if result and not asc then
32431: LD_VAR 0 6
32435: PUSH
32436: LD_VAR 0 4
32440: NOT
32441: AND
32442: IFFALSE 32517
// begin tmp := result ;
32444: LD_ADDR_VAR 0 9
32448: PUSH
32449: LD_VAR 0 6
32453: ST_TO_ADDR
// for i = tmp downto 1 do
32454: LD_ADDR_VAR 0 7
32458: PUSH
32459: DOUBLE
32460: LD_VAR 0 9
32464: INC
32465: ST_TO_ADDR
32466: LD_INT 1
32468: PUSH
32469: FOR_DOWNTO
32470: IFFALSE 32515
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32472: LD_ADDR_VAR 0 6
32476: PUSH
32477: LD_VAR 0 6
32481: PPUSH
32482: LD_VAR 0 9
32486: PUSH
32487: LD_VAR 0 7
32491: MINUS
32492: PUSH
32493: LD_INT 1
32495: PLUS
32496: PPUSH
32497: LD_VAR 0 9
32501: PUSH
32502: LD_VAR 0 7
32506: ARRAY
32507: PPUSH
32508: CALL_OW 1
32512: ST_TO_ADDR
32513: GO 32469
32515: POP
32516: POP
// end ; tmp := [ ] ;
32517: LD_ADDR_VAR 0 9
32521: PUSH
32522: EMPTY
32523: ST_TO_ADDR
// if mode then
32524: LD_VAR 0 5
32528: IFFALSE 32597
// begin for i = 1 to result do
32530: LD_ADDR_VAR 0 7
32534: PUSH
32535: DOUBLE
32536: LD_INT 1
32538: DEC
32539: ST_TO_ADDR
32540: LD_VAR 0 6
32544: PUSH
32545: FOR_TO
32546: IFFALSE 32585
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32548: LD_ADDR_VAR 0 9
32552: PUSH
32553: LD_VAR 0 9
32557: PPUSH
32558: LD_VAR 0 7
32562: PPUSH
32563: LD_VAR 0 6
32567: PUSH
32568: LD_VAR 0 7
32572: ARRAY
32573: PUSH
32574: LD_INT 1
32576: ARRAY
32577: PPUSH
32578: CALL_OW 1
32582: ST_TO_ADDR
32583: GO 32545
32585: POP
32586: POP
// result := tmp ;
32587: LD_ADDR_VAR 0 6
32591: PUSH
32592: LD_VAR 0 9
32596: ST_TO_ADDR
// end ; end ;
32597: LD_VAR 0 6
32601: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32602: LD_INT 0
32604: PPUSH
32605: PPUSH
32606: PPUSH
32607: PPUSH
32608: PPUSH
32609: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32610: LD_ADDR_VAR 0 5
32614: PUSH
32615: LD_INT 0
32617: PUSH
32618: LD_INT 0
32620: PUSH
32621: LD_INT 0
32623: PUSH
32624: EMPTY
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: ST_TO_ADDR
// if not x or not y then
32632: LD_VAR 0 2
32636: NOT
32637: PUSH
32638: LD_VAR 0 3
32642: NOT
32643: OR
32644: IFFALSE 32648
// exit ;
32646: GO 34294
// if not range then
32648: LD_VAR 0 4
32652: NOT
32653: IFFALSE 32663
// range := 10 ;
32655: LD_ADDR_VAR 0 4
32659: PUSH
32660: LD_INT 10
32662: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32663: LD_ADDR_VAR 0 8
32667: PUSH
32668: LD_INT 81
32670: PUSH
32671: LD_VAR 0 1
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 92
32682: PUSH
32683: LD_VAR 0 2
32687: PUSH
32688: LD_VAR 0 3
32692: PUSH
32693: LD_VAR 0 4
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: PUSH
32704: LD_INT 3
32706: PUSH
32707: LD_INT 21
32709: PUSH
32710: LD_INT 3
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: PUSH
32717: EMPTY
32718: LIST
32719: LIST
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: LIST
32725: PPUSH
32726: CALL_OW 69
32730: ST_TO_ADDR
// if not tmp then
32731: LD_VAR 0 8
32735: NOT
32736: IFFALSE 32740
// exit ;
32738: GO 34294
// for i in tmp do
32740: LD_ADDR_VAR 0 6
32744: PUSH
32745: LD_VAR 0 8
32749: PUSH
32750: FOR_IN
32751: IFFALSE 34269
// begin points := [ 0 , 0 , 0 ] ;
32753: LD_ADDR_VAR 0 9
32757: PUSH
32758: LD_INT 0
32760: PUSH
32761: LD_INT 0
32763: PUSH
32764: LD_INT 0
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: LIST
32771: ST_TO_ADDR
// bpoints := 1 ;
32772: LD_ADDR_VAR 0 10
32776: PUSH
32777: LD_INT 1
32779: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32780: LD_VAR 0 6
32784: PPUSH
32785: CALL_OW 247
32789: PUSH
32790: LD_INT 1
32792: DOUBLE
32793: EQUAL
32794: IFTRUE 32798
32796: GO 33376
32798: POP
// begin if GetClass ( i ) = 1 then
32799: LD_VAR 0 6
32803: PPUSH
32804: CALL_OW 257
32808: PUSH
32809: LD_INT 1
32811: EQUAL
32812: IFFALSE 32833
// points := [ 10 , 5 , 3 ] ;
32814: LD_ADDR_VAR 0 9
32818: PUSH
32819: LD_INT 10
32821: PUSH
32822: LD_INT 5
32824: PUSH
32825: LD_INT 3
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: LIST
32832: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32833: LD_VAR 0 6
32837: PPUSH
32838: CALL_OW 257
32842: PUSH
32843: LD_INT 2
32845: PUSH
32846: LD_INT 3
32848: PUSH
32849: LD_INT 4
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: LIST
32856: IN
32857: IFFALSE 32878
// points := [ 3 , 2 , 1 ] ;
32859: LD_ADDR_VAR 0 9
32863: PUSH
32864: LD_INT 3
32866: PUSH
32867: LD_INT 2
32869: PUSH
32870: LD_INT 1
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: LIST
32877: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32878: LD_VAR 0 6
32882: PPUSH
32883: CALL_OW 257
32887: PUSH
32888: LD_INT 5
32890: EQUAL
32891: IFFALSE 32912
// points := [ 130 , 5 , 2 ] ;
32893: LD_ADDR_VAR 0 9
32897: PUSH
32898: LD_INT 130
32900: PUSH
32901: LD_INT 5
32903: PUSH
32904: LD_INT 2
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: LIST
32911: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32912: LD_VAR 0 6
32916: PPUSH
32917: CALL_OW 257
32921: PUSH
32922: LD_INT 8
32924: EQUAL
32925: IFFALSE 32946
// points := [ 35 , 35 , 30 ] ;
32927: LD_ADDR_VAR 0 9
32931: PUSH
32932: LD_INT 35
32934: PUSH
32935: LD_INT 35
32937: PUSH
32938: LD_INT 30
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: LIST
32945: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32946: LD_VAR 0 6
32950: PPUSH
32951: CALL_OW 257
32955: PUSH
32956: LD_INT 9
32958: EQUAL
32959: IFFALSE 32980
// points := [ 20 , 55 , 40 ] ;
32961: LD_ADDR_VAR 0 9
32965: PUSH
32966: LD_INT 20
32968: PUSH
32969: LD_INT 55
32971: PUSH
32972: LD_INT 40
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: LIST
32979: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32980: LD_VAR 0 6
32984: PPUSH
32985: CALL_OW 257
32989: PUSH
32990: LD_INT 12
32992: PUSH
32993: LD_INT 16
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: IN
33000: IFFALSE 33021
// points := [ 5 , 3 , 2 ] ;
33002: LD_ADDR_VAR 0 9
33006: PUSH
33007: LD_INT 5
33009: PUSH
33010: LD_INT 3
33012: PUSH
33013: LD_INT 2
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: LIST
33020: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33021: LD_VAR 0 6
33025: PPUSH
33026: CALL_OW 257
33030: PUSH
33031: LD_INT 17
33033: EQUAL
33034: IFFALSE 33055
// points := [ 100 , 50 , 75 ] ;
33036: LD_ADDR_VAR 0 9
33040: PUSH
33041: LD_INT 100
33043: PUSH
33044: LD_INT 50
33046: PUSH
33047: LD_INT 75
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: LIST
33054: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33055: LD_VAR 0 6
33059: PPUSH
33060: CALL_OW 257
33064: PUSH
33065: LD_INT 15
33067: EQUAL
33068: IFFALSE 33089
// points := [ 10 , 5 , 3 ] ;
33070: LD_ADDR_VAR 0 9
33074: PUSH
33075: LD_INT 10
33077: PUSH
33078: LD_INT 5
33080: PUSH
33081: LD_INT 3
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: LIST
33088: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33089: LD_VAR 0 6
33093: PPUSH
33094: CALL_OW 257
33098: PUSH
33099: LD_INT 14
33101: EQUAL
33102: IFFALSE 33123
// points := [ 10 , 0 , 0 ] ;
33104: LD_ADDR_VAR 0 9
33108: PUSH
33109: LD_INT 10
33111: PUSH
33112: LD_INT 0
33114: PUSH
33115: LD_INT 0
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: LIST
33122: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33123: LD_VAR 0 6
33127: PPUSH
33128: CALL_OW 257
33132: PUSH
33133: LD_INT 11
33135: EQUAL
33136: IFFALSE 33157
// points := [ 30 , 10 , 5 ] ;
33138: LD_ADDR_VAR 0 9
33142: PUSH
33143: LD_INT 30
33145: PUSH
33146: LD_INT 10
33148: PUSH
33149: LD_INT 5
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: LIST
33156: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33157: LD_VAR 0 1
33161: PPUSH
33162: LD_INT 5
33164: PPUSH
33165: CALL_OW 321
33169: PUSH
33170: LD_INT 2
33172: EQUAL
33173: IFFALSE 33190
// bpoints := bpoints * 1.8 ;
33175: LD_ADDR_VAR 0 10
33179: PUSH
33180: LD_VAR 0 10
33184: PUSH
33185: LD_REAL  1.80000000000000E+0000
33188: MUL
33189: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33190: LD_VAR 0 6
33194: PPUSH
33195: CALL_OW 257
33199: PUSH
33200: LD_INT 1
33202: PUSH
33203: LD_INT 2
33205: PUSH
33206: LD_INT 3
33208: PUSH
33209: LD_INT 4
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: IN
33218: PUSH
33219: LD_VAR 0 1
33223: PPUSH
33224: LD_INT 51
33226: PPUSH
33227: CALL_OW 321
33231: PUSH
33232: LD_INT 2
33234: EQUAL
33235: AND
33236: IFFALSE 33253
// bpoints := bpoints * 1.2 ;
33238: LD_ADDR_VAR 0 10
33242: PUSH
33243: LD_VAR 0 10
33247: PUSH
33248: LD_REAL  1.20000000000000E+0000
33251: MUL
33252: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33253: LD_VAR 0 6
33257: PPUSH
33258: CALL_OW 257
33262: PUSH
33263: LD_INT 5
33265: PUSH
33266: LD_INT 7
33268: PUSH
33269: LD_INT 9
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: LIST
33276: IN
33277: PUSH
33278: LD_VAR 0 1
33282: PPUSH
33283: LD_INT 52
33285: PPUSH
33286: CALL_OW 321
33290: PUSH
33291: LD_INT 2
33293: EQUAL
33294: AND
33295: IFFALSE 33312
// bpoints := bpoints * 1.5 ;
33297: LD_ADDR_VAR 0 10
33301: PUSH
33302: LD_VAR 0 10
33306: PUSH
33307: LD_REAL  1.50000000000000E+0000
33310: MUL
33311: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33312: LD_VAR 0 1
33316: PPUSH
33317: LD_INT 66
33319: PPUSH
33320: CALL_OW 321
33324: PUSH
33325: LD_INT 2
33327: EQUAL
33328: IFFALSE 33345
// bpoints := bpoints * 1.1 ;
33330: LD_ADDR_VAR 0 10
33334: PUSH
33335: LD_VAR 0 10
33339: PUSH
33340: LD_REAL  1.10000000000000E+0000
33343: MUL
33344: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33345: LD_ADDR_VAR 0 10
33349: PUSH
33350: LD_VAR 0 10
33354: PUSH
33355: LD_VAR 0 6
33359: PPUSH
33360: LD_INT 1
33362: PPUSH
33363: CALL_OW 259
33367: PUSH
33368: LD_REAL  1.15000000000000E+0000
33371: MUL
33372: MUL
33373: ST_TO_ADDR
// end ; unit_vehicle :
33374: GO 34198
33376: LD_INT 2
33378: DOUBLE
33379: EQUAL
33380: IFTRUE 33384
33382: GO 34186
33384: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33385: LD_VAR 0 6
33389: PPUSH
33390: CALL_OW 264
33394: PUSH
33395: LD_INT 2
33397: PUSH
33398: LD_INT 42
33400: PUSH
33401: LD_INT 24
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: LIST
33408: IN
33409: IFFALSE 33430
// points := [ 25 , 5 , 3 ] ;
33411: LD_ADDR_VAR 0 9
33415: PUSH
33416: LD_INT 25
33418: PUSH
33419: LD_INT 5
33421: PUSH
33422: LD_INT 3
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: LIST
33429: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33430: LD_VAR 0 6
33434: PPUSH
33435: CALL_OW 264
33439: PUSH
33440: LD_INT 4
33442: PUSH
33443: LD_INT 43
33445: PUSH
33446: LD_INT 25
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: LIST
33453: IN
33454: IFFALSE 33475
// points := [ 40 , 15 , 5 ] ;
33456: LD_ADDR_VAR 0 9
33460: PUSH
33461: LD_INT 40
33463: PUSH
33464: LD_INT 15
33466: PUSH
33467: LD_INT 5
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: LIST
33474: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33475: LD_VAR 0 6
33479: PPUSH
33480: CALL_OW 264
33484: PUSH
33485: LD_INT 3
33487: PUSH
33488: LD_INT 23
33490: PUSH
33491: EMPTY
33492: LIST
33493: LIST
33494: IN
33495: IFFALSE 33516
// points := [ 7 , 25 , 8 ] ;
33497: LD_ADDR_VAR 0 9
33501: PUSH
33502: LD_INT 7
33504: PUSH
33505: LD_INT 25
33507: PUSH
33508: LD_INT 8
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: LIST
33515: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33516: LD_VAR 0 6
33520: PPUSH
33521: CALL_OW 264
33525: PUSH
33526: LD_INT 5
33528: PUSH
33529: LD_INT 27
33531: PUSH
33532: LD_INT 44
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: LIST
33539: IN
33540: IFFALSE 33561
// points := [ 14 , 50 , 16 ] ;
33542: LD_ADDR_VAR 0 9
33546: PUSH
33547: LD_INT 14
33549: PUSH
33550: LD_INT 50
33552: PUSH
33553: LD_INT 16
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: LIST
33560: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33561: LD_VAR 0 6
33565: PPUSH
33566: CALL_OW 264
33570: PUSH
33571: LD_INT 6
33573: PUSH
33574: LD_INT 46
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: IN
33581: IFFALSE 33602
// points := [ 32 , 120 , 70 ] ;
33583: LD_ADDR_VAR 0 9
33587: PUSH
33588: LD_INT 32
33590: PUSH
33591: LD_INT 120
33593: PUSH
33594: LD_INT 70
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: LIST
33601: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
33602: LD_VAR 0 6
33606: PPUSH
33607: CALL_OW 264
33611: PUSH
33612: LD_INT 7
33614: PUSH
33615: LD_INT 28
33617: PUSH
33618: LD_INT 45
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: LIST
33625: IN
33626: IFFALSE 33647
// points := [ 35 , 20 , 45 ] ;
33628: LD_ADDR_VAR 0 9
33632: PUSH
33633: LD_INT 35
33635: PUSH
33636: LD_INT 20
33638: PUSH
33639: LD_INT 45
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: LIST
33646: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33647: LD_VAR 0 6
33651: PPUSH
33652: CALL_OW 264
33656: PUSH
33657: LD_INT 47
33659: PUSH
33660: EMPTY
33661: LIST
33662: IN
33663: IFFALSE 33684
// points := [ 67 , 45 , 75 ] ;
33665: LD_ADDR_VAR 0 9
33669: PUSH
33670: LD_INT 67
33672: PUSH
33673: LD_INT 45
33675: PUSH
33676: LD_INT 75
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: LIST
33683: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33684: LD_VAR 0 6
33688: PPUSH
33689: CALL_OW 264
33693: PUSH
33694: LD_INT 26
33696: PUSH
33697: EMPTY
33698: LIST
33699: IN
33700: IFFALSE 33721
// points := [ 120 , 30 , 80 ] ;
33702: LD_ADDR_VAR 0 9
33706: PUSH
33707: LD_INT 120
33709: PUSH
33710: LD_INT 30
33712: PUSH
33713: LD_INT 80
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: LIST
33720: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33721: LD_VAR 0 6
33725: PPUSH
33726: CALL_OW 264
33730: PUSH
33731: LD_INT 22
33733: PUSH
33734: EMPTY
33735: LIST
33736: IN
33737: IFFALSE 33758
// points := [ 40 , 1 , 1 ] ;
33739: LD_ADDR_VAR 0 9
33743: PUSH
33744: LD_INT 40
33746: PUSH
33747: LD_INT 1
33749: PUSH
33750: LD_INT 1
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: LIST
33757: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33758: LD_VAR 0 6
33762: PPUSH
33763: CALL_OW 264
33767: PUSH
33768: LD_INT 29
33770: PUSH
33771: EMPTY
33772: LIST
33773: IN
33774: IFFALSE 33795
// points := [ 70 , 200 , 400 ] ;
33776: LD_ADDR_VAR 0 9
33780: PUSH
33781: LD_INT 70
33783: PUSH
33784: LD_INT 200
33786: PUSH
33787: LD_INT 400
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: LIST
33794: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33795: LD_VAR 0 6
33799: PPUSH
33800: CALL_OW 264
33804: PUSH
33805: LD_INT 14
33807: PUSH
33808: LD_INT 53
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: IN
33815: IFFALSE 33836
// points := [ 40 , 10 , 20 ] ;
33817: LD_ADDR_VAR 0 9
33821: PUSH
33822: LD_INT 40
33824: PUSH
33825: LD_INT 10
33827: PUSH
33828: LD_INT 20
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: LIST
33835: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33836: LD_VAR 0 6
33840: PPUSH
33841: CALL_OW 264
33845: PUSH
33846: LD_INT 9
33848: PUSH
33849: EMPTY
33850: LIST
33851: IN
33852: IFFALSE 33873
// points := [ 5 , 70 , 20 ] ;
33854: LD_ADDR_VAR 0 9
33858: PUSH
33859: LD_INT 5
33861: PUSH
33862: LD_INT 70
33864: PUSH
33865: LD_INT 20
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: LIST
33872: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33873: LD_VAR 0 6
33877: PPUSH
33878: CALL_OW 264
33882: PUSH
33883: LD_INT 10
33885: PUSH
33886: EMPTY
33887: LIST
33888: IN
33889: IFFALSE 33910
// points := [ 35 , 110 , 70 ] ;
33891: LD_ADDR_VAR 0 9
33895: PUSH
33896: LD_INT 35
33898: PUSH
33899: LD_INT 110
33901: PUSH
33902: LD_INT 70
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: LIST
33909: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33910: LD_VAR 0 6
33914: PPUSH
33915: CALL_OW 265
33919: PUSH
33920: LD_INT 25
33922: EQUAL
33923: IFFALSE 33944
// points := [ 80 , 65 , 100 ] ;
33925: LD_ADDR_VAR 0 9
33929: PUSH
33930: LD_INT 80
33932: PUSH
33933: LD_INT 65
33935: PUSH
33936: LD_INT 100
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: LIST
33943: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33944: LD_VAR 0 6
33948: PPUSH
33949: CALL_OW 263
33953: PUSH
33954: LD_INT 1
33956: EQUAL
33957: IFFALSE 33992
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33959: LD_ADDR_VAR 0 10
33963: PUSH
33964: LD_VAR 0 10
33968: PUSH
33969: LD_VAR 0 6
33973: PPUSH
33974: CALL_OW 311
33978: PPUSH
33979: LD_INT 3
33981: PPUSH
33982: CALL_OW 259
33986: PUSH
33987: LD_INT 4
33989: MUL
33990: MUL
33991: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33992: LD_VAR 0 6
33996: PPUSH
33997: CALL_OW 263
34001: PUSH
34002: LD_INT 2
34004: EQUAL
34005: IFFALSE 34056
// begin j := IsControledBy ( i ) ;
34007: LD_ADDR_VAR 0 7
34011: PUSH
34012: LD_VAR 0 6
34016: PPUSH
34017: CALL_OW 312
34021: ST_TO_ADDR
// if j then
34022: LD_VAR 0 7
34026: IFFALSE 34056
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34028: LD_ADDR_VAR 0 10
34032: PUSH
34033: LD_VAR 0 10
34037: PUSH
34038: LD_VAR 0 7
34042: PPUSH
34043: LD_INT 3
34045: PPUSH
34046: CALL_OW 259
34050: PUSH
34051: LD_INT 3
34053: MUL
34054: MUL
34055: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34056: LD_VAR 0 6
34060: PPUSH
34061: CALL_OW 264
34065: PUSH
34066: LD_INT 5
34068: PUSH
34069: LD_INT 6
34071: PUSH
34072: LD_INT 46
34074: PUSH
34075: LD_INT 44
34077: PUSH
34078: LD_INT 47
34080: PUSH
34081: LD_INT 45
34083: PUSH
34084: LD_INT 28
34086: PUSH
34087: LD_INT 7
34089: PUSH
34090: LD_INT 27
34092: PUSH
34093: LD_INT 29
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: LIST
34100: LIST
34101: LIST
34102: LIST
34103: LIST
34104: LIST
34105: LIST
34106: LIST
34107: IN
34108: PUSH
34109: LD_VAR 0 1
34113: PPUSH
34114: LD_INT 52
34116: PPUSH
34117: CALL_OW 321
34121: PUSH
34122: LD_INT 2
34124: EQUAL
34125: AND
34126: IFFALSE 34143
// bpoints := bpoints * 1.2 ;
34128: LD_ADDR_VAR 0 10
34132: PUSH
34133: LD_VAR 0 10
34137: PUSH
34138: LD_REAL  1.20000000000000E+0000
34141: MUL
34142: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34143: LD_VAR 0 6
34147: PPUSH
34148: CALL_OW 264
34152: PUSH
34153: LD_INT 6
34155: PUSH
34156: LD_INT 46
34158: PUSH
34159: LD_INT 47
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: LIST
34166: IN
34167: IFFALSE 34184
// bpoints := bpoints * 1.2 ;
34169: LD_ADDR_VAR 0 10
34173: PUSH
34174: LD_VAR 0 10
34178: PUSH
34179: LD_REAL  1.20000000000000E+0000
34182: MUL
34183: ST_TO_ADDR
// end ; unit_building :
34184: GO 34198
34186: LD_INT 3
34188: DOUBLE
34189: EQUAL
34190: IFTRUE 34194
34192: GO 34197
34194: POP
// ; end ;
34195: GO 34198
34197: POP
// for j = 1 to 3 do
34198: LD_ADDR_VAR 0 7
34202: PUSH
34203: DOUBLE
34204: LD_INT 1
34206: DEC
34207: ST_TO_ADDR
34208: LD_INT 3
34210: PUSH
34211: FOR_TO
34212: IFFALSE 34265
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34214: LD_ADDR_VAR 0 5
34218: PUSH
34219: LD_VAR 0 5
34223: PPUSH
34224: LD_VAR 0 7
34228: PPUSH
34229: LD_VAR 0 5
34233: PUSH
34234: LD_VAR 0 7
34238: ARRAY
34239: PUSH
34240: LD_VAR 0 9
34244: PUSH
34245: LD_VAR 0 7
34249: ARRAY
34250: PUSH
34251: LD_VAR 0 10
34255: MUL
34256: PLUS
34257: PPUSH
34258: CALL_OW 1
34262: ST_TO_ADDR
34263: GO 34211
34265: POP
34266: POP
// end ;
34267: GO 32750
34269: POP
34270: POP
// result := Replace ( result , 4 , tmp ) ;
34271: LD_ADDR_VAR 0 5
34275: PUSH
34276: LD_VAR 0 5
34280: PPUSH
34281: LD_INT 4
34283: PPUSH
34284: LD_VAR 0 8
34288: PPUSH
34289: CALL_OW 1
34293: ST_TO_ADDR
// end ;
34294: LD_VAR 0 5
34298: RET
// export function DangerAtRange ( unit , range ) ; begin
34299: LD_INT 0
34301: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34302: LD_ADDR_VAR 0 3
34306: PUSH
34307: LD_VAR 0 1
34311: PPUSH
34312: CALL_OW 255
34316: PPUSH
34317: LD_VAR 0 1
34321: PPUSH
34322: CALL_OW 250
34326: PPUSH
34327: LD_VAR 0 1
34331: PPUSH
34332: CALL_OW 251
34336: PPUSH
34337: LD_VAR 0 2
34341: PPUSH
34342: CALL 32602 0 4
34346: ST_TO_ADDR
// end ;
34347: LD_VAR 0 3
34351: RET
// export function DangerInArea ( side , area ) ; begin
34352: LD_INT 0
34354: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34355: LD_ADDR_VAR 0 3
34359: PUSH
34360: LD_VAR 0 2
34364: PPUSH
34365: LD_INT 81
34367: PUSH
34368: LD_VAR 0 1
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: PPUSH
34377: CALL_OW 70
34381: ST_TO_ADDR
// end ;
34382: LD_VAR 0 3
34386: RET
// export function IsExtension ( b ) ; begin
34387: LD_INT 0
34389: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34390: LD_ADDR_VAR 0 2
34394: PUSH
34395: LD_VAR 0 1
34399: PUSH
34400: LD_INT 23
34402: PUSH
34403: LD_INT 20
34405: PUSH
34406: LD_INT 22
34408: PUSH
34409: LD_INT 17
34411: PUSH
34412: LD_INT 24
34414: PUSH
34415: LD_INT 21
34417: PUSH
34418: LD_INT 19
34420: PUSH
34421: LD_INT 16
34423: PUSH
34424: LD_INT 25
34426: PUSH
34427: LD_INT 18
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: LIST
34437: LIST
34438: LIST
34439: LIST
34440: LIST
34441: IN
34442: ST_TO_ADDR
// end ;
34443: LD_VAR 0 2
34447: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
34448: LD_INT 0
34450: PPUSH
34451: PPUSH
34452: PPUSH
// result := [ ] ;
34453: LD_ADDR_VAR 0 3
34457: PUSH
34458: EMPTY
34459: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34460: LD_ADDR_VAR 0 4
34464: PUSH
34465: LD_VAR 0 2
34469: PPUSH
34470: LD_INT 21
34472: PUSH
34473: LD_INT 3
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PPUSH
34480: CALL_OW 70
34484: ST_TO_ADDR
// if not tmp then
34485: LD_VAR 0 4
34489: NOT
34490: IFFALSE 34494
// exit ;
34492: GO 34552
// for i in tmp do
34494: LD_ADDR_VAR 0 5
34498: PUSH
34499: LD_VAR 0 4
34503: PUSH
34504: FOR_IN
34505: IFFALSE 34540
// if GetBase ( i ) <> base then
34507: LD_VAR 0 5
34511: PPUSH
34512: CALL_OW 274
34516: PUSH
34517: LD_VAR 0 1
34521: NONEQUAL
34522: IFFALSE 34538
// ComLinkToBase ( base , i ) ;
34524: LD_VAR 0 1
34528: PPUSH
34529: LD_VAR 0 5
34533: PPUSH
34534: CALL_OW 169
34538: GO 34504
34540: POP
34541: POP
// result := tmp ;
34542: LD_ADDR_VAR 0 3
34546: PUSH
34547: LD_VAR 0 4
34551: ST_TO_ADDR
// end ;
34552: LD_VAR 0 3
34556: RET
// export function ComComplete ( unit , b ) ; var i ; begin
34557: LD_INT 0
34559: PPUSH
34560: PPUSH
// if BuildingStatus ( b ) = bs_build then
34561: LD_VAR 0 2
34565: PPUSH
34566: CALL_OW 461
34570: PUSH
34571: LD_INT 1
34573: EQUAL
34574: IFFALSE 34634
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34576: LD_VAR 0 1
34580: PPUSH
34581: LD_STRING h
34583: PUSH
34584: LD_VAR 0 2
34588: PPUSH
34589: CALL_OW 250
34593: PUSH
34594: LD_VAR 0 2
34598: PPUSH
34599: CALL_OW 251
34603: PUSH
34604: LD_VAR 0 2
34608: PUSH
34609: LD_INT 0
34611: PUSH
34612: LD_INT 0
34614: PUSH
34615: LD_INT 0
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: PUSH
34627: EMPTY
34628: LIST
34629: PPUSH
34630: CALL_OW 446
// end ;
34634: LD_VAR 0 3
34638: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34639: LD_INT 0
34641: PPUSH
34642: PPUSH
34643: PPUSH
34644: PPUSH
34645: PPUSH
34646: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
34647: LD_VAR 0 1
34651: NOT
34652: PUSH
34653: LD_VAR 0 1
34657: PPUSH
34658: CALL_OW 263
34662: PUSH
34663: LD_INT 2
34665: EQUAL
34666: NOT
34667: OR
34668: IFFALSE 34672
// exit ;
34670: GO 34988
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34672: LD_ADDR_VAR 0 6
34676: PUSH
34677: LD_INT 22
34679: PUSH
34680: LD_VAR 0 1
34684: PPUSH
34685: CALL_OW 255
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 2
34696: PUSH
34697: LD_INT 30
34699: PUSH
34700: LD_INT 36
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: PUSH
34707: LD_INT 34
34709: PUSH
34710: LD_INT 31
34712: PUSH
34713: EMPTY
34714: LIST
34715: LIST
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: LIST
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: PPUSH
34726: CALL_OW 69
34730: ST_TO_ADDR
// if not tmp then
34731: LD_VAR 0 6
34735: NOT
34736: IFFALSE 34740
// exit ;
34738: GO 34988
// result := [ ] ;
34740: LD_ADDR_VAR 0 2
34744: PUSH
34745: EMPTY
34746: ST_TO_ADDR
// for i in tmp do
34747: LD_ADDR_VAR 0 3
34751: PUSH
34752: LD_VAR 0 6
34756: PUSH
34757: FOR_IN
34758: IFFALSE 34829
// begin t := UnitsInside ( i ) ;
34760: LD_ADDR_VAR 0 4
34764: PUSH
34765: LD_VAR 0 3
34769: PPUSH
34770: CALL_OW 313
34774: ST_TO_ADDR
// if t then
34775: LD_VAR 0 4
34779: IFFALSE 34827
// for j in t do
34781: LD_ADDR_VAR 0 7
34785: PUSH
34786: LD_VAR 0 4
34790: PUSH
34791: FOR_IN
34792: IFFALSE 34825
// result := Insert ( result , result + 1 , j ) ;
34794: LD_ADDR_VAR 0 2
34798: PUSH
34799: LD_VAR 0 2
34803: PPUSH
34804: LD_VAR 0 2
34808: PUSH
34809: LD_INT 1
34811: PLUS
34812: PPUSH
34813: LD_VAR 0 7
34817: PPUSH
34818: CALL_OW 2
34822: ST_TO_ADDR
34823: GO 34791
34825: POP
34826: POP
// end ;
34827: GO 34757
34829: POP
34830: POP
// if not result then
34831: LD_VAR 0 2
34835: NOT
34836: IFFALSE 34840
// exit ;
34838: GO 34988
// mech := result [ 1 ] ;
34840: LD_ADDR_VAR 0 5
34844: PUSH
34845: LD_VAR 0 2
34849: PUSH
34850: LD_INT 1
34852: ARRAY
34853: ST_TO_ADDR
// if result > 1 then
34854: LD_VAR 0 2
34858: PUSH
34859: LD_INT 1
34861: GREATER
34862: IFFALSE 34974
// for i = 2 to result do
34864: LD_ADDR_VAR 0 3
34868: PUSH
34869: DOUBLE
34870: LD_INT 2
34872: DEC
34873: ST_TO_ADDR
34874: LD_VAR 0 2
34878: PUSH
34879: FOR_TO
34880: IFFALSE 34972
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34882: LD_ADDR_VAR 0 4
34886: PUSH
34887: LD_VAR 0 2
34891: PUSH
34892: LD_VAR 0 3
34896: ARRAY
34897: PPUSH
34898: LD_INT 3
34900: PPUSH
34901: CALL_OW 259
34905: PUSH
34906: LD_VAR 0 2
34910: PUSH
34911: LD_VAR 0 3
34915: ARRAY
34916: PPUSH
34917: CALL_OW 432
34921: MINUS
34922: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34923: LD_VAR 0 4
34927: PUSH
34928: LD_VAR 0 5
34932: PPUSH
34933: LD_INT 3
34935: PPUSH
34936: CALL_OW 259
34940: PUSH
34941: LD_VAR 0 5
34945: PPUSH
34946: CALL_OW 432
34950: MINUS
34951: GREATEREQUAL
34952: IFFALSE 34970
// mech := result [ i ] ;
34954: LD_ADDR_VAR 0 5
34958: PUSH
34959: LD_VAR 0 2
34963: PUSH
34964: LD_VAR 0 3
34968: ARRAY
34969: ST_TO_ADDR
// end ;
34970: GO 34879
34972: POP
34973: POP
// ComLinkTo ( vehicle , mech ) ;
34974: LD_VAR 0 1
34978: PPUSH
34979: LD_VAR 0 5
34983: PPUSH
34984: CALL_OW 135
// end ;
34988: LD_VAR 0 2
34992: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
34993: LD_INT 0
34995: PPUSH
34996: PPUSH
34997: PPUSH
34998: PPUSH
34999: PPUSH
35000: PPUSH
35001: PPUSH
35002: PPUSH
35003: PPUSH
35004: PPUSH
35005: PPUSH
35006: PPUSH
35007: PPUSH
// result := [ ] ;
35008: LD_ADDR_VAR 0 7
35012: PUSH
35013: EMPTY
35014: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35015: LD_VAR 0 1
35019: PPUSH
35020: CALL_OW 266
35024: PUSH
35025: LD_INT 0
35027: PUSH
35028: LD_INT 1
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: IN
35035: NOT
35036: IFFALSE 35040
// exit ;
35038: GO 36671
// if name then
35040: LD_VAR 0 3
35044: IFFALSE 35060
// SetBName ( base_dep , name ) ;
35046: LD_VAR 0 1
35050: PPUSH
35051: LD_VAR 0 3
35055: PPUSH
35056: CALL_OW 500
// base := GetBase ( base_dep ) ;
35060: LD_ADDR_VAR 0 15
35064: PUSH
35065: LD_VAR 0 1
35069: PPUSH
35070: CALL_OW 274
35074: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35075: LD_ADDR_VAR 0 16
35079: PUSH
35080: LD_VAR 0 1
35084: PPUSH
35085: CALL_OW 255
35089: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35090: LD_ADDR_VAR 0 17
35094: PUSH
35095: LD_VAR 0 1
35099: PPUSH
35100: CALL_OW 248
35104: ST_TO_ADDR
// if sources then
35105: LD_VAR 0 5
35109: IFFALSE 35156
// for i = 1 to 3 do
35111: LD_ADDR_VAR 0 8
35115: PUSH
35116: DOUBLE
35117: LD_INT 1
35119: DEC
35120: ST_TO_ADDR
35121: LD_INT 3
35123: PUSH
35124: FOR_TO
35125: IFFALSE 35154
// AddResourceType ( base , i , sources [ i ] ) ;
35127: LD_VAR 0 15
35131: PPUSH
35132: LD_VAR 0 8
35136: PPUSH
35137: LD_VAR 0 5
35141: PUSH
35142: LD_VAR 0 8
35146: ARRAY
35147: PPUSH
35148: CALL_OW 276
35152: GO 35124
35154: POP
35155: POP
// buildings := GetBaseBuildings ( base , area ) ;
35156: LD_ADDR_VAR 0 18
35160: PUSH
35161: LD_VAR 0 15
35165: PPUSH
35166: LD_VAR 0 2
35170: PPUSH
35171: CALL 34448 0 2
35175: ST_TO_ADDR
// InitHc ;
35176: CALL_OW 19
// InitUc ;
35180: CALL_OW 18
// uc_side := side ;
35184: LD_ADDR_OWVAR 20
35188: PUSH
35189: LD_VAR 0 16
35193: ST_TO_ADDR
// uc_nation := nation ;
35194: LD_ADDR_OWVAR 21
35198: PUSH
35199: LD_VAR 0 17
35203: ST_TO_ADDR
// if buildings then
35204: LD_VAR 0 18
35208: IFFALSE 36530
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35210: LD_ADDR_VAR 0 19
35214: PUSH
35215: LD_VAR 0 18
35219: PPUSH
35220: LD_INT 2
35222: PUSH
35223: LD_INT 30
35225: PUSH
35226: LD_INT 29
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: PUSH
35233: LD_INT 30
35235: PUSH
35236: LD_INT 30
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: LIST
35247: PPUSH
35248: CALL_OW 72
35252: ST_TO_ADDR
// if tmp then
35253: LD_VAR 0 19
35257: IFFALSE 35305
// for i in tmp do
35259: LD_ADDR_VAR 0 8
35263: PUSH
35264: LD_VAR 0 19
35268: PUSH
35269: FOR_IN
35270: IFFALSE 35303
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35272: LD_VAR 0 8
35276: PPUSH
35277: CALL_OW 250
35281: PPUSH
35282: LD_VAR 0 8
35286: PPUSH
35287: CALL_OW 251
35291: PPUSH
35292: LD_VAR 0 16
35296: PPUSH
35297: CALL_OW 441
35301: GO 35269
35303: POP
35304: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35305: LD_VAR 0 18
35309: PPUSH
35310: LD_INT 2
35312: PUSH
35313: LD_INT 30
35315: PUSH
35316: LD_INT 32
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: LD_INT 30
35325: PUSH
35326: LD_INT 33
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: LIST
35337: PPUSH
35338: CALL_OW 72
35342: IFFALSE 35430
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35344: LD_ADDR_VAR 0 8
35348: PUSH
35349: LD_VAR 0 18
35353: PPUSH
35354: LD_INT 2
35356: PUSH
35357: LD_INT 30
35359: PUSH
35360: LD_INT 32
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: PUSH
35367: LD_INT 30
35369: PUSH
35370: LD_INT 33
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: LIST
35381: PPUSH
35382: CALL_OW 72
35386: PUSH
35387: FOR_IN
35388: IFFALSE 35428
// begin if not GetBWeapon ( i ) then
35390: LD_VAR 0 8
35394: PPUSH
35395: CALL_OW 269
35399: NOT
35400: IFFALSE 35426
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35402: LD_VAR 0 8
35406: PPUSH
35407: LD_VAR 0 8
35411: PPUSH
35412: LD_VAR 0 2
35416: PPUSH
35417: CALL 36676 0 2
35421: PPUSH
35422: CALL_OW 431
// end ;
35426: GO 35387
35428: POP
35429: POP
// end ; for i = 1 to personel do
35430: LD_ADDR_VAR 0 8
35434: PUSH
35435: DOUBLE
35436: LD_INT 1
35438: DEC
35439: ST_TO_ADDR
35440: LD_VAR 0 6
35444: PUSH
35445: FOR_TO
35446: IFFALSE 36510
// begin if i > 4 then
35448: LD_VAR 0 8
35452: PUSH
35453: LD_INT 4
35455: GREATER
35456: IFFALSE 35460
// break ;
35458: GO 36510
// case i of 1 :
35460: LD_VAR 0 8
35464: PUSH
35465: LD_INT 1
35467: DOUBLE
35468: EQUAL
35469: IFTRUE 35473
35471: GO 35553
35473: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35474: LD_ADDR_VAR 0 12
35478: PUSH
35479: LD_VAR 0 18
35483: PPUSH
35484: LD_INT 22
35486: PUSH
35487: LD_VAR 0 16
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: PUSH
35496: LD_INT 58
35498: PUSH
35499: EMPTY
35500: LIST
35501: PUSH
35502: LD_INT 2
35504: PUSH
35505: LD_INT 30
35507: PUSH
35508: LD_INT 32
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: PUSH
35515: LD_INT 30
35517: PUSH
35518: LD_INT 4
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: LD_INT 30
35527: PUSH
35528: LD_INT 5
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: LIST
35539: LIST
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: LIST
35545: PPUSH
35546: CALL_OW 72
35550: ST_TO_ADDR
35551: GO 35775
35553: LD_INT 2
35555: DOUBLE
35556: EQUAL
35557: IFTRUE 35561
35559: GO 35623
35561: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35562: LD_ADDR_VAR 0 12
35566: PUSH
35567: LD_VAR 0 18
35571: PPUSH
35572: LD_INT 22
35574: PUSH
35575: LD_VAR 0 16
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 2
35586: PUSH
35587: LD_INT 30
35589: PUSH
35590: LD_INT 0
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: PUSH
35597: LD_INT 30
35599: PUSH
35600: LD_INT 1
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: LIST
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PPUSH
35616: CALL_OW 72
35620: ST_TO_ADDR
35621: GO 35775
35623: LD_INT 3
35625: DOUBLE
35626: EQUAL
35627: IFTRUE 35631
35629: GO 35693
35631: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35632: LD_ADDR_VAR 0 12
35636: PUSH
35637: LD_VAR 0 18
35641: PPUSH
35642: LD_INT 22
35644: PUSH
35645: LD_VAR 0 16
35649: PUSH
35650: EMPTY
35651: LIST
35652: LIST
35653: PUSH
35654: LD_INT 2
35656: PUSH
35657: LD_INT 30
35659: PUSH
35660: LD_INT 2
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: PUSH
35667: LD_INT 30
35669: PUSH
35670: LD_INT 3
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: LIST
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PPUSH
35686: CALL_OW 72
35690: ST_TO_ADDR
35691: GO 35775
35693: LD_INT 4
35695: DOUBLE
35696: EQUAL
35697: IFTRUE 35701
35699: GO 35774
35701: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35702: LD_ADDR_VAR 0 12
35706: PUSH
35707: LD_VAR 0 18
35711: PPUSH
35712: LD_INT 22
35714: PUSH
35715: LD_VAR 0 16
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: LD_INT 2
35726: PUSH
35727: LD_INT 30
35729: PUSH
35730: LD_INT 6
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: PUSH
35737: LD_INT 30
35739: PUSH
35740: LD_INT 7
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: PUSH
35747: LD_INT 30
35749: PUSH
35750: LD_INT 8
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: LIST
35761: LIST
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: PPUSH
35767: CALL_OW 72
35771: ST_TO_ADDR
35772: GO 35775
35774: POP
// if i = 1 then
35775: LD_VAR 0 8
35779: PUSH
35780: LD_INT 1
35782: EQUAL
35783: IFFALSE 35894
// begin tmp := [ ] ;
35785: LD_ADDR_VAR 0 19
35789: PUSH
35790: EMPTY
35791: ST_TO_ADDR
// for j in f do
35792: LD_ADDR_VAR 0 9
35796: PUSH
35797: LD_VAR 0 12
35801: PUSH
35802: FOR_IN
35803: IFFALSE 35876
// if GetBType ( j ) = b_bunker then
35805: LD_VAR 0 9
35809: PPUSH
35810: CALL_OW 266
35814: PUSH
35815: LD_INT 32
35817: EQUAL
35818: IFFALSE 35845
// tmp := Insert ( tmp , 1 , j ) else
35820: LD_ADDR_VAR 0 19
35824: PUSH
35825: LD_VAR 0 19
35829: PPUSH
35830: LD_INT 1
35832: PPUSH
35833: LD_VAR 0 9
35837: PPUSH
35838: CALL_OW 2
35842: ST_TO_ADDR
35843: GO 35874
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35845: LD_ADDR_VAR 0 19
35849: PUSH
35850: LD_VAR 0 19
35854: PPUSH
35855: LD_VAR 0 19
35859: PUSH
35860: LD_INT 1
35862: PLUS
35863: PPUSH
35864: LD_VAR 0 9
35868: PPUSH
35869: CALL_OW 2
35873: ST_TO_ADDR
35874: GO 35802
35876: POP
35877: POP
// if tmp then
35878: LD_VAR 0 19
35882: IFFALSE 35894
// f := tmp ;
35884: LD_ADDR_VAR 0 12
35888: PUSH
35889: LD_VAR 0 19
35893: ST_TO_ADDR
// end ; x := personel [ i ] ;
35894: LD_ADDR_VAR 0 13
35898: PUSH
35899: LD_VAR 0 6
35903: PUSH
35904: LD_VAR 0 8
35908: ARRAY
35909: ST_TO_ADDR
// if x = - 1 then
35910: LD_VAR 0 13
35914: PUSH
35915: LD_INT 1
35917: NEG
35918: EQUAL
35919: IFFALSE 36128
// begin for j in f do
35921: LD_ADDR_VAR 0 9
35925: PUSH
35926: LD_VAR 0 12
35930: PUSH
35931: FOR_IN
35932: IFFALSE 36124
// repeat InitHc ;
35934: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35938: LD_VAR 0 9
35942: PPUSH
35943: CALL_OW 266
35947: PUSH
35948: LD_INT 5
35950: EQUAL
35951: IFFALSE 36021
// begin if UnitsInside ( j ) < 3 then
35953: LD_VAR 0 9
35957: PPUSH
35958: CALL_OW 313
35962: PUSH
35963: LD_INT 3
35965: LESS
35966: IFFALSE 36002
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35968: LD_INT 0
35970: PPUSH
35971: LD_INT 5
35973: PUSH
35974: LD_INT 8
35976: PUSH
35977: LD_INT 9
35979: PUSH
35980: EMPTY
35981: LIST
35982: LIST
35983: LIST
35984: PUSH
35985: LD_VAR 0 17
35989: ARRAY
35990: PPUSH
35991: LD_VAR 0 4
35995: PPUSH
35996: CALL_OW 380
36000: GO 36019
// PrepareHuman ( false , i , skill ) ;
36002: LD_INT 0
36004: PPUSH
36005: LD_VAR 0 8
36009: PPUSH
36010: LD_VAR 0 4
36014: PPUSH
36015: CALL_OW 380
// end else
36019: GO 36038
// PrepareHuman ( false , i , skill ) ;
36021: LD_INT 0
36023: PPUSH
36024: LD_VAR 0 8
36028: PPUSH
36029: LD_VAR 0 4
36033: PPUSH
36034: CALL_OW 380
// un := CreateHuman ;
36038: LD_ADDR_VAR 0 14
36042: PUSH
36043: CALL_OW 44
36047: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36048: LD_ADDR_VAR 0 7
36052: PUSH
36053: LD_VAR 0 7
36057: PPUSH
36058: LD_INT 1
36060: PPUSH
36061: LD_VAR 0 14
36065: PPUSH
36066: CALL_OW 2
36070: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36071: LD_VAR 0 14
36075: PPUSH
36076: LD_VAR 0 9
36080: PPUSH
36081: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36085: LD_VAR 0 9
36089: PPUSH
36090: CALL_OW 313
36094: PUSH
36095: LD_INT 6
36097: EQUAL
36098: PUSH
36099: LD_VAR 0 9
36103: PPUSH
36104: CALL_OW 266
36108: PUSH
36109: LD_INT 32
36111: PUSH
36112: LD_INT 31
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: IN
36119: OR
36120: IFFALSE 35934
36122: GO 35931
36124: POP
36125: POP
// end else
36126: GO 36508
// for j = 1 to x do
36128: LD_ADDR_VAR 0 9
36132: PUSH
36133: DOUBLE
36134: LD_INT 1
36136: DEC
36137: ST_TO_ADDR
36138: LD_VAR 0 13
36142: PUSH
36143: FOR_TO
36144: IFFALSE 36506
// begin InitHc ;
36146: CALL_OW 19
// if not f then
36150: LD_VAR 0 12
36154: NOT
36155: IFFALSE 36244
// begin PrepareHuman ( false , i , skill ) ;
36157: LD_INT 0
36159: PPUSH
36160: LD_VAR 0 8
36164: PPUSH
36165: LD_VAR 0 4
36169: PPUSH
36170: CALL_OW 380
// un := CreateHuman ;
36174: LD_ADDR_VAR 0 14
36178: PUSH
36179: CALL_OW 44
36183: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36184: LD_ADDR_VAR 0 7
36188: PUSH
36189: LD_VAR 0 7
36193: PPUSH
36194: LD_INT 1
36196: PPUSH
36197: LD_VAR 0 14
36201: PPUSH
36202: CALL_OW 2
36206: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36207: LD_VAR 0 14
36211: PPUSH
36212: LD_VAR 0 1
36216: PPUSH
36217: CALL_OW 250
36221: PPUSH
36222: LD_VAR 0 1
36226: PPUSH
36227: CALL_OW 251
36231: PPUSH
36232: LD_INT 10
36234: PPUSH
36235: LD_INT 0
36237: PPUSH
36238: CALL_OW 50
// continue ;
36242: GO 36143
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36244: LD_VAR 0 12
36248: PUSH
36249: LD_INT 1
36251: ARRAY
36252: PPUSH
36253: CALL_OW 313
36257: PUSH
36258: LD_VAR 0 12
36262: PUSH
36263: LD_INT 1
36265: ARRAY
36266: PPUSH
36267: CALL_OW 266
36271: PUSH
36272: LD_INT 32
36274: PUSH
36275: LD_INT 31
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: IN
36282: AND
36283: PUSH
36284: LD_VAR 0 12
36288: PUSH
36289: LD_INT 1
36291: ARRAY
36292: PPUSH
36293: CALL_OW 313
36297: PUSH
36298: LD_INT 6
36300: EQUAL
36301: OR
36302: IFFALSE 36322
// f := Delete ( f , 1 ) ;
36304: LD_ADDR_VAR 0 12
36308: PUSH
36309: LD_VAR 0 12
36313: PPUSH
36314: LD_INT 1
36316: PPUSH
36317: CALL_OW 3
36321: ST_TO_ADDR
// if not f then
36322: LD_VAR 0 12
36326: NOT
36327: IFFALSE 36345
// begin x := x + 2 ;
36329: LD_ADDR_VAR 0 13
36333: PUSH
36334: LD_VAR 0 13
36338: PUSH
36339: LD_INT 2
36341: PLUS
36342: ST_TO_ADDR
// continue ;
36343: GO 36143
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36345: LD_VAR 0 12
36349: PUSH
36350: LD_INT 1
36352: ARRAY
36353: PPUSH
36354: CALL_OW 266
36358: PUSH
36359: LD_INT 5
36361: EQUAL
36362: IFFALSE 36436
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36364: LD_VAR 0 12
36368: PUSH
36369: LD_INT 1
36371: ARRAY
36372: PPUSH
36373: CALL_OW 313
36377: PUSH
36378: LD_INT 3
36380: LESS
36381: IFFALSE 36417
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36383: LD_INT 0
36385: PPUSH
36386: LD_INT 5
36388: PUSH
36389: LD_INT 8
36391: PUSH
36392: LD_INT 9
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: LIST
36399: PUSH
36400: LD_VAR 0 17
36404: ARRAY
36405: PPUSH
36406: LD_VAR 0 4
36410: PPUSH
36411: CALL_OW 380
36415: GO 36434
// PrepareHuman ( false , i , skill ) ;
36417: LD_INT 0
36419: PPUSH
36420: LD_VAR 0 8
36424: PPUSH
36425: LD_VAR 0 4
36429: PPUSH
36430: CALL_OW 380
// end else
36434: GO 36453
// PrepareHuman ( false , i , skill ) ;
36436: LD_INT 0
36438: PPUSH
36439: LD_VAR 0 8
36443: PPUSH
36444: LD_VAR 0 4
36448: PPUSH
36449: CALL_OW 380
// un := CreateHuman ;
36453: LD_ADDR_VAR 0 14
36457: PUSH
36458: CALL_OW 44
36462: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36463: LD_ADDR_VAR 0 7
36467: PUSH
36468: LD_VAR 0 7
36472: PPUSH
36473: LD_INT 1
36475: PPUSH
36476: LD_VAR 0 14
36480: PPUSH
36481: CALL_OW 2
36485: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36486: LD_VAR 0 14
36490: PPUSH
36491: LD_VAR 0 12
36495: PUSH
36496: LD_INT 1
36498: ARRAY
36499: PPUSH
36500: CALL_OW 52
// end ;
36504: GO 36143
36506: POP
36507: POP
// end ;
36508: GO 35445
36510: POP
36511: POP
// result := result ^ buildings ;
36512: LD_ADDR_VAR 0 7
36516: PUSH
36517: LD_VAR 0 7
36521: PUSH
36522: LD_VAR 0 18
36526: ADD
36527: ST_TO_ADDR
// end else
36528: GO 36671
// begin for i = 1 to personel do
36530: LD_ADDR_VAR 0 8
36534: PUSH
36535: DOUBLE
36536: LD_INT 1
36538: DEC
36539: ST_TO_ADDR
36540: LD_VAR 0 6
36544: PUSH
36545: FOR_TO
36546: IFFALSE 36669
// begin if i > 4 then
36548: LD_VAR 0 8
36552: PUSH
36553: LD_INT 4
36555: GREATER
36556: IFFALSE 36560
// break ;
36558: GO 36669
// x := personel [ i ] ;
36560: LD_ADDR_VAR 0 13
36564: PUSH
36565: LD_VAR 0 6
36569: PUSH
36570: LD_VAR 0 8
36574: ARRAY
36575: ST_TO_ADDR
// if x = - 1 then
36576: LD_VAR 0 13
36580: PUSH
36581: LD_INT 1
36583: NEG
36584: EQUAL
36585: IFFALSE 36589
// continue ;
36587: GO 36545
// PrepareHuman ( false , i , skill ) ;
36589: LD_INT 0
36591: PPUSH
36592: LD_VAR 0 8
36596: PPUSH
36597: LD_VAR 0 4
36601: PPUSH
36602: CALL_OW 380
// un := CreateHuman ;
36606: LD_ADDR_VAR 0 14
36610: PUSH
36611: CALL_OW 44
36615: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36616: LD_VAR 0 14
36620: PPUSH
36621: LD_VAR 0 1
36625: PPUSH
36626: CALL_OW 250
36630: PPUSH
36631: LD_VAR 0 1
36635: PPUSH
36636: CALL_OW 251
36640: PPUSH
36641: LD_INT 10
36643: PPUSH
36644: LD_INT 0
36646: PPUSH
36647: CALL_OW 50
// result := result ^ un ;
36651: LD_ADDR_VAR 0 7
36655: PUSH
36656: LD_VAR 0 7
36660: PUSH
36661: LD_VAR 0 14
36665: ADD
36666: ST_TO_ADDR
// end ;
36667: GO 36545
36669: POP
36670: POP
// end ; end ;
36671: LD_VAR 0 7
36675: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36676: LD_INT 0
36678: PPUSH
36679: PPUSH
36680: PPUSH
36681: PPUSH
36682: PPUSH
36683: PPUSH
36684: PPUSH
36685: PPUSH
36686: PPUSH
36687: PPUSH
36688: PPUSH
36689: PPUSH
36690: PPUSH
36691: PPUSH
36692: PPUSH
36693: PPUSH
// result := false ;
36694: LD_ADDR_VAR 0 3
36698: PUSH
36699: LD_INT 0
36701: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36702: LD_VAR 0 1
36706: NOT
36707: PUSH
36708: LD_VAR 0 1
36712: PPUSH
36713: CALL_OW 266
36717: PUSH
36718: LD_INT 32
36720: PUSH
36721: LD_INT 33
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: IN
36728: NOT
36729: OR
36730: IFFALSE 36734
// exit ;
36732: GO 37870
// nat := GetNation ( tower ) ;
36734: LD_ADDR_VAR 0 12
36738: PUSH
36739: LD_VAR 0 1
36743: PPUSH
36744: CALL_OW 248
36748: ST_TO_ADDR
// side := GetSide ( tower ) ;
36749: LD_ADDR_VAR 0 16
36753: PUSH
36754: LD_VAR 0 1
36758: PPUSH
36759: CALL_OW 255
36763: ST_TO_ADDR
// x := GetX ( tower ) ;
36764: LD_ADDR_VAR 0 10
36768: PUSH
36769: LD_VAR 0 1
36773: PPUSH
36774: CALL_OW 250
36778: ST_TO_ADDR
// y := GetY ( tower ) ;
36779: LD_ADDR_VAR 0 11
36783: PUSH
36784: LD_VAR 0 1
36788: PPUSH
36789: CALL_OW 251
36793: ST_TO_ADDR
// if not x or not y then
36794: LD_VAR 0 10
36798: NOT
36799: PUSH
36800: LD_VAR 0 11
36804: NOT
36805: OR
36806: IFFALSE 36810
// exit ;
36808: GO 37870
// weapon := 0 ;
36810: LD_ADDR_VAR 0 18
36814: PUSH
36815: LD_INT 0
36817: ST_TO_ADDR
// fac_list := [ ] ;
36818: LD_ADDR_VAR 0 17
36822: PUSH
36823: EMPTY
36824: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
36825: LD_ADDR_VAR 0 6
36829: PUSH
36830: LD_VAR 0 1
36834: PPUSH
36835: CALL_OW 274
36839: PPUSH
36840: LD_VAR 0 2
36844: PPUSH
36845: CALL 34448 0 2
36849: PPUSH
36850: LD_INT 30
36852: PUSH
36853: LD_INT 3
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PPUSH
36860: CALL_OW 72
36864: ST_TO_ADDR
// if not factories then
36865: LD_VAR 0 6
36869: NOT
36870: IFFALSE 36874
// exit ;
36872: GO 37870
// for i in factories do
36874: LD_ADDR_VAR 0 8
36878: PUSH
36879: LD_VAR 0 6
36883: PUSH
36884: FOR_IN
36885: IFFALSE 36910
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36887: LD_ADDR_VAR 0 17
36891: PUSH
36892: LD_VAR 0 17
36896: PUSH
36897: LD_VAR 0 8
36901: PPUSH
36902: CALL_OW 478
36906: UNION
36907: ST_TO_ADDR
36908: GO 36884
36910: POP
36911: POP
// if not fac_list then
36912: LD_VAR 0 17
36916: NOT
36917: IFFALSE 36921
// exit ;
36919: GO 37870
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36921: LD_ADDR_VAR 0 5
36925: PUSH
36926: LD_INT 4
36928: PUSH
36929: LD_INT 5
36931: PUSH
36932: LD_INT 9
36934: PUSH
36935: LD_INT 10
36937: PUSH
36938: LD_INT 6
36940: PUSH
36941: LD_INT 7
36943: PUSH
36944: LD_INT 11
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: PUSH
36956: LD_INT 27
36958: PUSH
36959: LD_INT 28
36961: PUSH
36962: LD_INT 26
36964: PUSH
36965: LD_INT 30
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: PUSH
36974: LD_INT 43
36976: PUSH
36977: LD_INT 44
36979: PUSH
36980: LD_INT 46
36982: PUSH
36983: LD_INT 45
36985: PUSH
36986: LD_INT 47
36988: PUSH
36989: LD_INT 49
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: LIST
37004: PUSH
37005: LD_VAR 0 12
37009: ARRAY
37010: ST_TO_ADDR
// for i in list do
37011: LD_ADDR_VAR 0 8
37015: PUSH
37016: LD_VAR 0 5
37020: PUSH
37021: FOR_IN
37022: IFFALSE 37055
// if not i in fac_list then
37024: LD_VAR 0 8
37028: PUSH
37029: LD_VAR 0 17
37033: IN
37034: NOT
37035: IFFALSE 37053
// list := list diff i ;
37037: LD_ADDR_VAR 0 5
37041: PUSH
37042: LD_VAR 0 5
37046: PUSH
37047: LD_VAR 0 8
37051: DIFF
37052: ST_TO_ADDR
37053: GO 37021
37055: POP
37056: POP
// if not list then
37057: LD_VAR 0 5
37061: NOT
37062: IFFALSE 37066
// exit ;
37064: GO 37870
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37066: LD_VAR 0 12
37070: PUSH
37071: LD_INT 3
37073: EQUAL
37074: PUSH
37075: LD_INT 49
37077: PUSH
37078: LD_VAR 0 5
37082: IN
37083: AND
37084: PUSH
37085: LD_INT 31
37087: PPUSH
37088: LD_VAR 0 16
37092: PPUSH
37093: CALL_OW 321
37097: PUSH
37098: LD_INT 2
37100: EQUAL
37101: AND
37102: IFFALSE 37162
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37104: LD_INT 22
37106: PUSH
37107: LD_VAR 0 16
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: PUSH
37116: LD_INT 35
37118: PUSH
37119: LD_INT 49
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PUSH
37126: LD_INT 91
37128: PUSH
37129: LD_VAR 0 1
37133: PUSH
37134: LD_INT 10
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: LIST
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: LIST
37146: PPUSH
37147: CALL_OW 69
37151: NOT
37152: IFFALSE 37162
// weapon := ru_time_lapser ;
37154: LD_ADDR_VAR 0 18
37158: PUSH
37159: LD_INT 49
37161: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37162: LD_VAR 0 12
37166: PUSH
37167: LD_INT 1
37169: PUSH
37170: LD_INT 2
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: IN
37177: PUSH
37178: LD_INT 11
37180: PUSH
37181: LD_VAR 0 5
37185: IN
37186: PUSH
37187: LD_INT 30
37189: PUSH
37190: LD_VAR 0 5
37194: IN
37195: OR
37196: AND
37197: PUSH
37198: LD_INT 6
37200: PPUSH
37201: LD_VAR 0 16
37205: PPUSH
37206: CALL_OW 321
37210: PUSH
37211: LD_INT 2
37213: EQUAL
37214: AND
37215: IFFALSE 37380
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37217: LD_INT 22
37219: PUSH
37220: LD_VAR 0 16
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: PUSH
37229: LD_INT 2
37231: PUSH
37232: LD_INT 35
37234: PUSH
37235: LD_INT 11
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: PUSH
37242: LD_INT 35
37244: PUSH
37245: LD_INT 30
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: LIST
37256: PUSH
37257: LD_INT 91
37259: PUSH
37260: LD_VAR 0 1
37264: PUSH
37265: LD_INT 18
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: LIST
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: LIST
37277: PPUSH
37278: CALL_OW 69
37282: NOT
37283: PUSH
37284: LD_INT 22
37286: PUSH
37287: LD_VAR 0 16
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: PUSH
37296: LD_INT 2
37298: PUSH
37299: LD_INT 30
37301: PUSH
37302: LD_INT 32
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 30
37311: PUSH
37312: LD_INT 33
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: LIST
37323: PUSH
37324: LD_INT 91
37326: PUSH
37327: LD_VAR 0 1
37331: PUSH
37332: LD_INT 12
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: LIST
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: LIST
37344: PUSH
37345: EMPTY
37346: LIST
37347: PPUSH
37348: CALL_OW 69
37352: PUSH
37353: LD_INT 2
37355: GREATER
37356: AND
37357: IFFALSE 37380
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37359: LD_ADDR_VAR 0 18
37363: PUSH
37364: LD_INT 11
37366: PUSH
37367: LD_INT 30
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: LD_VAR 0 12
37378: ARRAY
37379: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37380: LD_VAR 0 18
37384: NOT
37385: PUSH
37386: LD_INT 40
37388: PPUSH
37389: LD_VAR 0 16
37393: PPUSH
37394: CALL_OW 321
37398: PUSH
37399: LD_INT 2
37401: EQUAL
37402: AND
37403: PUSH
37404: LD_INT 7
37406: PUSH
37407: LD_VAR 0 5
37411: IN
37412: PUSH
37413: LD_INT 28
37415: PUSH
37416: LD_VAR 0 5
37420: IN
37421: OR
37422: PUSH
37423: LD_INT 45
37425: PUSH
37426: LD_VAR 0 5
37430: IN
37431: OR
37432: AND
37433: IFFALSE 37687
// begin hex := GetHexInfo ( x , y ) ;
37435: LD_ADDR_VAR 0 4
37439: PUSH
37440: LD_VAR 0 10
37444: PPUSH
37445: LD_VAR 0 11
37449: PPUSH
37450: CALL_OW 546
37454: ST_TO_ADDR
// if hex [ 1 ] then
37455: LD_VAR 0 4
37459: PUSH
37460: LD_INT 1
37462: ARRAY
37463: IFFALSE 37467
// exit ;
37465: GO 37870
// height := hex [ 2 ] ;
37467: LD_ADDR_VAR 0 15
37471: PUSH
37472: LD_VAR 0 4
37476: PUSH
37477: LD_INT 2
37479: ARRAY
37480: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37481: LD_ADDR_VAR 0 14
37485: PUSH
37486: LD_INT 0
37488: PUSH
37489: LD_INT 2
37491: PUSH
37492: LD_INT 3
37494: PUSH
37495: LD_INT 5
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: LIST
37502: LIST
37503: ST_TO_ADDR
// for i in tmp do
37504: LD_ADDR_VAR 0 8
37508: PUSH
37509: LD_VAR 0 14
37513: PUSH
37514: FOR_IN
37515: IFFALSE 37685
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37517: LD_ADDR_VAR 0 9
37521: PUSH
37522: LD_VAR 0 10
37526: PPUSH
37527: LD_VAR 0 8
37531: PPUSH
37532: LD_INT 5
37534: PPUSH
37535: CALL_OW 272
37539: PUSH
37540: LD_VAR 0 11
37544: PPUSH
37545: LD_VAR 0 8
37549: PPUSH
37550: LD_INT 5
37552: PPUSH
37553: CALL_OW 273
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37562: LD_VAR 0 9
37566: PUSH
37567: LD_INT 1
37569: ARRAY
37570: PPUSH
37571: LD_VAR 0 9
37575: PUSH
37576: LD_INT 2
37578: ARRAY
37579: PPUSH
37580: CALL_OW 488
37584: IFFALSE 37683
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37586: LD_ADDR_VAR 0 4
37590: PUSH
37591: LD_VAR 0 9
37595: PUSH
37596: LD_INT 1
37598: ARRAY
37599: PPUSH
37600: LD_VAR 0 9
37604: PUSH
37605: LD_INT 2
37607: ARRAY
37608: PPUSH
37609: CALL_OW 546
37613: ST_TO_ADDR
// if hex [ 1 ] then
37614: LD_VAR 0 4
37618: PUSH
37619: LD_INT 1
37621: ARRAY
37622: IFFALSE 37626
// continue ;
37624: GO 37514
// h := hex [ 2 ] ;
37626: LD_ADDR_VAR 0 13
37630: PUSH
37631: LD_VAR 0 4
37635: PUSH
37636: LD_INT 2
37638: ARRAY
37639: ST_TO_ADDR
// if h + 7 < height then
37640: LD_VAR 0 13
37644: PUSH
37645: LD_INT 7
37647: PLUS
37648: PUSH
37649: LD_VAR 0 15
37653: LESS
37654: IFFALSE 37683
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37656: LD_ADDR_VAR 0 18
37660: PUSH
37661: LD_INT 7
37663: PUSH
37664: LD_INT 28
37666: PUSH
37667: LD_INT 45
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: LIST
37674: PUSH
37675: LD_VAR 0 12
37679: ARRAY
37680: ST_TO_ADDR
// break ;
37681: GO 37685
// end ; end ; end ;
37683: GO 37514
37685: POP
37686: POP
// end ; if not weapon then
37687: LD_VAR 0 18
37691: NOT
37692: IFFALSE 37752
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37694: LD_ADDR_VAR 0 5
37698: PUSH
37699: LD_VAR 0 5
37703: PUSH
37704: LD_INT 11
37706: PUSH
37707: LD_INT 30
37709: PUSH
37710: LD_INT 49
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: LIST
37717: DIFF
37718: ST_TO_ADDR
// if not list then
37719: LD_VAR 0 5
37723: NOT
37724: IFFALSE 37728
// exit ;
37726: GO 37870
// weapon := list [ rand ( 1 , list ) ] ;
37728: LD_ADDR_VAR 0 18
37732: PUSH
37733: LD_VAR 0 5
37737: PUSH
37738: LD_INT 1
37740: PPUSH
37741: LD_VAR 0 5
37745: PPUSH
37746: CALL_OW 12
37750: ARRAY
37751: ST_TO_ADDR
// end ; if weapon then
37752: LD_VAR 0 18
37756: IFFALSE 37870
// begin tmp := CostOfWeapon ( weapon ) ;
37758: LD_ADDR_VAR 0 14
37762: PUSH
37763: LD_VAR 0 18
37767: PPUSH
37768: CALL_OW 451
37772: ST_TO_ADDR
// j := GetBase ( tower ) ;
37773: LD_ADDR_VAR 0 9
37777: PUSH
37778: LD_VAR 0 1
37782: PPUSH
37783: CALL_OW 274
37787: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37788: LD_VAR 0 9
37792: PPUSH
37793: LD_INT 1
37795: PPUSH
37796: CALL_OW 275
37800: PUSH
37801: LD_VAR 0 14
37805: PUSH
37806: LD_INT 1
37808: ARRAY
37809: GREATEREQUAL
37810: PUSH
37811: LD_VAR 0 9
37815: PPUSH
37816: LD_INT 2
37818: PPUSH
37819: CALL_OW 275
37823: PUSH
37824: LD_VAR 0 14
37828: PUSH
37829: LD_INT 2
37831: ARRAY
37832: GREATEREQUAL
37833: AND
37834: PUSH
37835: LD_VAR 0 9
37839: PPUSH
37840: LD_INT 3
37842: PPUSH
37843: CALL_OW 275
37847: PUSH
37848: LD_VAR 0 14
37852: PUSH
37853: LD_INT 3
37855: ARRAY
37856: GREATEREQUAL
37857: AND
37858: IFFALSE 37870
// result := weapon ;
37860: LD_ADDR_VAR 0 3
37864: PUSH
37865: LD_VAR 0 18
37869: ST_TO_ADDR
// end ; end ;
37870: LD_VAR 0 3
37874: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37875: LD_INT 0
37877: PPUSH
37878: PPUSH
// result := true ;
37879: LD_ADDR_VAR 0 3
37883: PUSH
37884: LD_INT 1
37886: ST_TO_ADDR
// if array1 = array2 then
37887: LD_VAR 0 1
37891: PUSH
37892: LD_VAR 0 2
37896: EQUAL
37897: IFFALSE 37957
// begin for i = 1 to array1 do
37899: LD_ADDR_VAR 0 4
37903: PUSH
37904: DOUBLE
37905: LD_INT 1
37907: DEC
37908: ST_TO_ADDR
37909: LD_VAR 0 1
37913: PUSH
37914: FOR_TO
37915: IFFALSE 37953
// if array1 [ i ] <> array2 [ i ] then
37917: LD_VAR 0 1
37921: PUSH
37922: LD_VAR 0 4
37926: ARRAY
37927: PUSH
37928: LD_VAR 0 2
37932: PUSH
37933: LD_VAR 0 4
37937: ARRAY
37938: NONEQUAL
37939: IFFALSE 37951
// begin result := false ;
37941: LD_ADDR_VAR 0 3
37945: PUSH
37946: LD_INT 0
37948: ST_TO_ADDR
// break ;
37949: GO 37953
// end ;
37951: GO 37914
37953: POP
37954: POP
// end else
37955: GO 37965
// result := false ;
37957: LD_ADDR_VAR 0 3
37961: PUSH
37962: LD_INT 0
37964: ST_TO_ADDR
// end ;
37965: LD_VAR 0 3
37969: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
37970: LD_INT 0
37972: PPUSH
37973: PPUSH
37974: PPUSH
// pom := GetBase ( fac ) ;
37975: LD_ADDR_VAR 0 5
37979: PUSH
37980: LD_VAR 0 1
37984: PPUSH
37985: CALL_OW 274
37989: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
37990: LD_ADDR_VAR 0 4
37994: PUSH
37995: LD_VAR 0 2
37999: PUSH
38000: LD_INT 1
38002: ARRAY
38003: PPUSH
38004: LD_VAR 0 2
38008: PUSH
38009: LD_INT 2
38011: ARRAY
38012: PPUSH
38013: LD_VAR 0 2
38017: PUSH
38018: LD_INT 3
38020: ARRAY
38021: PPUSH
38022: LD_VAR 0 2
38026: PUSH
38027: LD_INT 4
38029: ARRAY
38030: PPUSH
38031: CALL_OW 449
38035: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38036: LD_ADDR_VAR 0 3
38040: PUSH
38041: LD_VAR 0 5
38045: PPUSH
38046: LD_INT 1
38048: PPUSH
38049: CALL_OW 275
38053: PUSH
38054: LD_VAR 0 4
38058: PUSH
38059: LD_INT 1
38061: ARRAY
38062: GREATEREQUAL
38063: PUSH
38064: LD_VAR 0 5
38068: PPUSH
38069: LD_INT 2
38071: PPUSH
38072: CALL_OW 275
38076: PUSH
38077: LD_VAR 0 4
38081: PUSH
38082: LD_INT 2
38084: ARRAY
38085: GREATEREQUAL
38086: AND
38087: PUSH
38088: LD_VAR 0 5
38092: PPUSH
38093: LD_INT 3
38095: PPUSH
38096: CALL_OW 275
38100: PUSH
38101: LD_VAR 0 4
38105: PUSH
38106: LD_INT 3
38108: ARRAY
38109: GREATEREQUAL
38110: AND
38111: ST_TO_ADDR
// end ;
38112: LD_VAR 0 3
38116: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38117: LD_INT 0
38119: PPUSH
38120: PPUSH
38121: PPUSH
38122: PPUSH
// pom := GetBase ( building ) ;
38123: LD_ADDR_VAR 0 3
38127: PUSH
38128: LD_VAR 0 1
38132: PPUSH
38133: CALL_OW 274
38137: ST_TO_ADDR
// if not pom then
38138: LD_VAR 0 3
38142: NOT
38143: IFFALSE 38147
// exit ;
38145: GO 38317
// btype := GetBType ( building ) ;
38147: LD_ADDR_VAR 0 5
38151: PUSH
38152: LD_VAR 0 1
38156: PPUSH
38157: CALL_OW 266
38161: ST_TO_ADDR
// if btype = b_armoury then
38162: LD_VAR 0 5
38166: PUSH
38167: LD_INT 4
38169: EQUAL
38170: IFFALSE 38180
// btype := b_barracks ;
38172: LD_ADDR_VAR 0 5
38176: PUSH
38177: LD_INT 5
38179: ST_TO_ADDR
// if btype = b_depot then
38180: LD_VAR 0 5
38184: PUSH
38185: LD_INT 0
38187: EQUAL
38188: IFFALSE 38198
// btype := b_warehouse ;
38190: LD_ADDR_VAR 0 5
38194: PUSH
38195: LD_INT 1
38197: ST_TO_ADDR
// if btype = b_workshop then
38198: LD_VAR 0 5
38202: PUSH
38203: LD_INT 2
38205: EQUAL
38206: IFFALSE 38216
// btype := b_factory ;
38208: LD_ADDR_VAR 0 5
38212: PUSH
38213: LD_INT 3
38215: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38216: LD_ADDR_VAR 0 4
38220: PUSH
38221: LD_VAR 0 5
38225: PPUSH
38226: LD_VAR 0 1
38230: PPUSH
38231: CALL_OW 248
38235: PPUSH
38236: CALL_OW 450
38240: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38241: LD_ADDR_VAR 0 2
38245: PUSH
38246: LD_VAR 0 3
38250: PPUSH
38251: LD_INT 1
38253: PPUSH
38254: CALL_OW 275
38258: PUSH
38259: LD_VAR 0 4
38263: PUSH
38264: LD_INT 1
38266: ARRAY
38267: GREATEREQUAL
38268: PUSH
38269: LD_VAR 0 3
38273: PPUSH
38274: LD_INT 2
38276: PPUSH
38277: CALL_OW 275
38281: PUSH
38282: LD_VAR 0 4
38286: PUSH
38287: LD_INT 2
38289: ARRAY
38290: GREATEREQUAL
38291: AND
38292: PUSH
38293: LD_VAR 0 3
38297: PPUSH
38298: LD_INT 3
38300: PPUSH
38301: CALL_OW 275
38305: PUSH
38306: LD_VAR 0 4
38310: PUSH
38311: LD_INT 3
38313: ARRAY
38314: GREATEREQUAL
38315: AND
38316: ST_TO_ADDR
// end ;
38317: LD_VAR 0 2
38321: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38322: LD_INT 0
38324: PPUSH
38325: PPUSH
38326: PPUSH
// pom := GetBase ( building ) ;
38327: LD_ADDR_VAR 0 4
38331: PUSH
38332: LD_VAR 0 1
38336: PPUSH
38337: CALL_OW 274
38341: ST_TO_ADDR
// if not pom then
38342: LD_VAR 0 4
38346: NOT
38347: IFFALSE 38351
// exit ;
38349: GO 38452
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38351: LD_ADDR_VAR 0 5
38355: PUSH
38356: LD_VAR 0 2
38360: PPUSH
38361: LD_VAR 0 1
38365: PPUSH
38366: CALL_OW 248
38370: PPUSH
38371: CALL_OW 450
38375: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38376: LD_ADDR_VAR 0 3
38380: PUSH
38381: LD_VAR 0 4
38385: PPUSH
38386: LD_INT 1
38388: PPUSH
38389: CALL_OW 275
38393: PUSH
38394: LD_VAR 0 5
38398: PUSH
38399: LD_INT 1
38401: ARRAY
38402: GREATEREQUAL
38403: PUSH
38404: LD_VAR 0 4
38408: PPUSH
38409: LD_INT 2
38411: PPUSH
38412: CALL_OW 275
38416: PUSH
38417: LD_VAR 0 5
38421: PUSH
38422: LD_INT 2
38424: ARRAY
38425: GREATEREQUAL
38426: AND
38427: PUSH
38428: LD_VAR 0 4
38432: PPUSH
38433: LD_INT 3
38435: PPUSH
38436: CALL_OW 275
38440: PUSH
38441: LD_VAR 0 5
38445: PUSH
38446: LD_INT 3
38448: ARRAY
38449: GREATEREQUAL
38450: AND
38451: ST_TO_ADDR
// end ;
38452: LD_VAR 0 3
38456: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
38457: LD_INT 0
38459: PPUSH
38460: PPUSH
38461: PPUSH
38462: PPUSH
38463: PPUSH
38464: PPUSH
38465: PPUSH
38466: PPUSH
38467: PPUSH
38468: PPUSH
// result := false ;
38469: LD_ADDR_VAR 0 6
38473: PUSH
38474: LD_INT 0
38476: ST_TO_ADDR
// if not base or not btype or not x or not y then
38477: LD_VAR 0 1
38481: NOT
38482: PUSH
38483: LD_VAR 0 2
38487: NOT
38488: OR
38489: PUSH
38490: LD_VAR 0 3
38494: NOT
38495: OR
38496: PUSH
38497: LD_VAR 0 4
38501: NOT
38502: OR
38503: IFFALSE 38507
// exit ;
38505: GO 39116
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
38507: LD_ADDR_VAR 0 12
38511: PUSH
38512: LD_VAR 0 2
38516: PPUSH
38517: LD_VAR 0 3
38521: PPUSH
38522: LD_VAR 0 4
38526: PPUSH
38527: LD_VAR 0 5
38531: PPUSH
38532: LD_VAR 0 1
38536: PUSH
38537: LD_INT 1
38539: ARRAY
38540: PPUSH
38541: CALL_OW 248
38545: PPUSH
38546: LD_INT 0
38548: PPUSH
38549: CALL 39953 0 6
38553: ST_TO_ADDR
// if not hexes then
38554: LD_VAR 0 12
38558: NOT
38559: IFFALSE 38563
// exit ;
38561: GO 39116
// for i = 1 to hexes do
38563: LD_ADDR_VAR 0 7
38567: PUSH
38568: DOUBLE
38569: LD_INT 1
38571: DEC
38572: ST_TO_ADDR
38573: LD_VAR 0 12
38577: PUSH
38578: FOR_TO
38579: IFFALSE 39114
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38581: LD_ADDR_VAR 0 11
38585: PUSH
38586: LD_VAR 0 12
38590: PUSH
38591: LD_VAR 0 7
38595: ARRAY
38596: PUSH
38597: LD_INT 1
38599: ARRAY
38600: PPUSH
38601: LD_VAR 0 12
38605: PUSH
38606: LD_VAR 0 7
38610: ARRAY
38611: PUSH
38612: LD_INT 2
38614: ARRAY
38615: PPUSH
38616: CALL_OW 428
38620: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38621: LD_VAR 0 12
38625: PUSH
38626: LD_VAR 0 7
38630: ARRAY
38631: PUSH
38632: LD_INT 1
38634: ARRAY
38635: PPUSH
38636: LD_VAR 0 12
38640: PUSH
38641: LD_VAR 0 7
38645: ARRAY
38646: PUSH
38647: LD_INT 2
38649: ARRAY
38650: PPUSH
38651: CALL_OW 351
38655: PUSH
38656: LD_VAR 0 12
38660: PUSH
38661: LD_VAR 0 7
38665: ARRAY
38666: PUSH
38667: LD_INT 1
38669: ARRAY
38670: PPUSH
38671: LD_VAR 0 12
38675: PUSH
38676: LD_VAR 0 7
38680: ARRAY
38681: PUSH
38682: LD_INT 2
38684: ARRAY
38685: PPUSH
38686: CALL_OW 488
38690: NOT
38691: OR
38692: PUSH
38693: LD_VAR 0 11
38697: PPUSH
38698: CALL_OW 247
38702: PUSH
38703: LD_INT 3
38705: EQUAL
38706: OR
38707: IFFALSE 38713
// exit ;
38709: POP
38710: POP
38711: GO 39116
// if not tmp or not tmp in base then
38713: LD_VAR 0 11
38717: NOT
38718: PUSH
38719: LD_VAR 0 11
38723: PUSH
38724: LD_VAR 0 1
38728: IN
38729: NOT
38730: OR
38731: IFFALSE 38735
// continue ;
38733: GO 38578
// result := true ;
38735: LD_ADDR_VAR 0 6
38739: PUSH
38740: LD_INT 1
38742: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38743: LD_ADDR_VAR 0 15
38747: PUSH
38748: LD_VAR 0 1
38752: PPUSH
38753: LD_INT 22
38755: PUSH
38756: LD_VAR 0 11
38760: PPUSH
38761: CALL_OW 255
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: LD_INT 2
38772: PUSH
38773: LD_INT 30
38775: PUSH
38776: LD_INT 0
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: PUSH
38783: LD_INT 30
38785: PUSH
38786: LD_INT 1
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: LIST
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PPUSH
38802: CALL_OW 72
38806: ST_TO_ADDR
// if dep then
38807: LD_VAR 0 15
38811: IFFALSE 38947
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38813: LD_ADDR_VAR 0 14
38817: PUSH
38818: LD_VAR 0 15
38822: PUSH
38823: LD_INT 1
38825: ARRAY
38826: PPUSH
38827: CALL_OW 250
38831: PPUSH
38832: LD_VAR 0 15
38836: PUSH
38837: LD_INT 1
38839: ARRAY
38840: PPUSH
38841: CALL_OW 254
38845: PPUSH
38846: LD_INT 5
38848: PPUSH
38849: CALL_OW 272
38853: PUSH
38854: LD_VAR 0 15
38858: PUSH
38859: LD_INT 1
38861: ARRAY
38862: PPUSH
38863: CALL_OW 251
38867: PPUSH
38868: LD_VAR 0 15
38872: PUSH
38873: LD_INT 1
38875: ARRAY
38876: PPUSH
38877: CALL_OW 254
38881: PPUSH
38882: LD_INT 5
38884: PPUSH
38885: CALL_OW 273
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38894: LD_VAR 0 14
38898: PUSH
38899: LD_INT 1
38901: ARRAY
38902: PPUSH
38903: LD_VAR 0 14
38907: PUSH
38908: LD_INT 2
38910: ARRAY
38911: PPUSH
38912: CALL_OW 488
38916: IFFALSE 38947
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38918: LD_VAR 0 11
38922: PPUSH
38923: LD_VAR 0 14
38927: PUSH
38928: LD_INT 1
38930: ARRAY
38931: PPUSH
38932: LD_VAR 0 14
38936: PUSH
38937: LD_INT 2
38939: ARRAY
38940: PPUSH
38941: CALL_OW 111
// continue ;
38945: GO 38578
// end ; end ; r := GetDir ( tmp ) ;
38947: LD_ADDR_VAR 0 13
38951: PUSH
38952: LD_VAR 0 11
38956: PPUSH
38957: CALL_OW 254
38961: ST_TO_ADDR
// if r = 5 then
38962: LD_VAR 0 13
38966: PUSH
38967: LD_INT 5
38969: EQUAL
38970: IFFALSE 38980
// r := 0 ;
38972: LD_ADDR_VAR 0 13
38976: PUSH
38977: LD_INT 0
38979: ST_TO_ADDR
// for j = r to 5 do
38980: LD_ADDR_VAR 0 8
38984: PUSH
38985: DOUBLE
38986: LD_VAR 0 13
38990: DEC
38991: ST_TO_ADDR
38992: LD_INT 5
38994: PUSH
38995: FOR_TO
38996: IFFALSE 39110
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38998: LD_ADDR_VAR 0 9
39002: PUSH
39003: LD_VAR 0 11
39007: PPUSH
39008: CALL_OW 250
39012: PPUSH
39013: LD_VAR 0 8
39017: PPUSH
39018: LD_INT 2
39020: PPUSH
39021: CALL_OW 272
39025: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39026: LD_ADDR_VAR 0 10
39030: PUSH
39031: LD_VAR 0 11
39035: PPUSH
39036: CALL_OW 251
39040: PPUSH
39041: LD_VAR 0 8
39045: PPUSH
39046: LD_INT 2
39048: PPUSH
39049: CALL_OW 273
39053: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39054: LD_VAR 0 9
39058: PPUSH
39059: LD_VAR 0 10
39063: PPUSH
39064: CALL_OW 488
39068: PUSH
39069: LD_VAR 0 9
39073: PPUSH
39074: LD_VAR 0 10
39078: PPUSH
39079: CALL_OW 428
39083: NOT
39084: AND
39085: IFFALSE 39108
// begin ComMoveXY ( tmp , _x , _y ) ;
39087: LD_VAR 0 11
39091: PPUSH
39092: LD_VAR 0 9
39096: PPUSH
39097: LD_VAR 0 10
39101: PPUSH
39102: CALL_OW 111
// break ;
39106: GO 39110
// end ; end ;
39108: GO 38995
39110: POP
39111: POP
// end ;
39112: GO 38578
39114: POP
39115: POP
// end ;
39116: LD_VAR 0 6
39120: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
39121: LD_INT 0
39123: PPUSH
39124: PPUSH
39125: PPUSH
39126: PPUSH
39127: PPUSH
39128: PPUSH
39129: PPUSH
39130: PPUSH
39131: PPUSH
39132: PPUSH
// result := false ;
39133: LD_ADDR_VAR 0 6
39137: PUSH
39138: LD_INT 0
39140: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39141: LD_VAR 0 1
39145: NOT
39146: PUSH
39147: LD_VAR 0 1
39151: PPUSH
39152: CALL_OW 266
39156: PUSH
39157: LD_INT 0
39159: PUSH
39160: LD_INT 1
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: IN
39167: NOT
39168: OR
39169: PUSH
39170: LD_VAR 0 2
39174: NOT
39175: OR
39176: PUSH
39177: LD_VAR 0 5
39181: PUSH
39182: LD_INT 0
39184: PUSH
39185: LD_INT 1
39187: PUSH
39188: LD_INT 2
39190: PUSH
39191: LD_INT 3
39193: PUSH
39194: LD_INT 4
39196: PUSH
39197: LD_INT 5
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: IN
39208: NOT
39209: OR
39210: PUSH
39211: LD_VAR 0 3
39215: PPUSH
39216: LD_VAR 0 4
39220: PPUSH
39221: CALL_OW 488
39225: NOT
39226: OR
39227: IFFALSE 39231
// exit ;
39229: GO 39948
// pom := GetBase ( depot ) ;
39231: LD_ADDR_VAR 0 10
39235: PUSH
39236: LD_VAR 0 1
39240: PPUSH
39241: CALL_OW 274
39245: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39246: LD_ADDR_VAR 0 11
39250: PUSH
39251: LD_VAR 0 2
39255: PPUSH
39256: LD_VAR 0 1
39260: PPUSH
39261: CALL_OW 248
39265: PPUSH
39266: CALL_OW 450
39270: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39271: LD_VAR 0 10
39275: PPUSH
39276: LD_INT 1
39278: PPUSH
39279: CALL_OW 275
39283: PUSH
39284: LD_VAR 0 11
39288: PUSH
39289: LD_INT 1
39291: ARRAY
39292: GREATEREQUAL
39293: PUSH
39294: LD_VAR 0 10
39298: PPUSH
39299: LD_INT 2
39301: PPUSH
39302: CALL_OW 275
39306: PUSH
39307: LD_VAR 0 11
39311: PUSH
39312: LD_INT 2
39314: ARRAY
39315: GREATEREQUAL
39316: AND
39317: PUSH
39318: LD_VAR 0 10
39322: PPUSH
39323: LD_INT 3
39325: PPUSH
39326: CALL_OW 275
39330: PUSH
39331: LD_VAR 0 11
39335: PUSH
39336: LD_INT 3
39338: ARRAY
39339: GREATEREQUAL
39340: AND
39341: NOT
39342: IFFALSE 39346
// exit ;
39344: GO 39948
// if GetBType ( depot ) = b_depot then
39346: LD_VAR 0 1
39350: PPUSH
39351: CALL_OW 266
39355: PUSH
39356: LD_INT 0
39358: EQUAL
39359: IFFALSE 39371
// dist := 28 else
39361: LD_ADDR_VAR 0 14
39365: PUSH
39366: LD_INT 28
39368: ST_TO_ADDR
39369: GO 39379
// dist := 36 ;
39371: LD_ADDR_VAR 0 14
39375: PUSH
39376: LD_INT 36
39378: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39379: LD_VAR 0 1
39383: PPUSH
39384: LD_VAR 0 3
39388: PPUSH
39389: LD_VAR 0 4
39393: PPUSH
39394: CALL_OW 297
39398: PUSH
39399: LD_VAR 0 14
39403: GREATER
39404: IFFALSE 39408
// exit ;
39406: GO 39948
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39408: LD_ADDR_VAR 0 12
39412: PUSH
39413: LD_VAR 0 2
39417: PPUSH
39418: LD_VAR 0 3
39422: PPUSH
39423: LD_VAR 0 4
39427: PPUSH
39428: LD_VAR 0 5
39432: PPUSH
39433: LD_VAR 0 1
39437: PPUSH
39438: CALL_OW 248
39442: PPUSH
39443: LD_INT 0
39445: PPUSH
39446: CALL 39953 0 6
39450: ST_TO_ADDR
// if not hexes then
39451: LD_VAR 0 12
39455: NOT
39456: IFFALSE 39460
// exit ;
39458: GO 39948
// hex := GetHexInfo ( x , y ) ;
39460: LD_ADDR_VAR 0 15
39464: PUSH
39465: LD_VAR 0 3
39469: PPUSH
39470: LD_VAR 0 4
39474: PPUSH
39475: CALL_OW 546
39479: ST_TO_ADDR
// if hex [ 1 ] then
39480: LD_VAR 0 15
39484: PUSH
39485: LD_INT 1
39487: ARRAY
39488: IFFALSE 39492
// exit ;
39490: GO 39948
// height := hex [ 2 ] ;
39492: LD_ADDR_VAR 0 13
39496: PUSH
39497: LD_VAR 0 15
39501: PUSH
39502: LD_INT 2
39504: ARRAY
39505: ST_TO_ADDR
// for i = 1 to hexes do
39506: LD_ADDR_VAR 0 7
39510: PUSH
39511: DOUBLE
39512: LD_INT 1
39514: DEC
39515: ST_TO_ADDR
39516: LD_VAR 0 12
39520: PUSH
39521: FOR_TO
39522: IFFALSE 39852
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39524: LD_VAR 0 12
39528: PUSH
39529: LD_VAR 0 7
39533: ARRAY
39534: PUSH
39535: LD_INT 1
39537: ARRAY
39538: PPUSH
39539: LD_VAR 0 12
39543: PUSH
39544: LD_VAR 0 7
39548: ARRAY
39549: PUSH
39550: LD_INT 2
39552: ARRAY
39553: PPUSH
39554: CALL_OW 488
39558: NOT
39559: PUSH
39560: LD_VAR 0 12
39564: PUSH
39565: LD_VAR 0 7
39569: ARRAY
39570: PUSH
39571: LD_INT 1
39573: ARRAY
39574: PPUSH
39575: LD_VAR 0 12
39579: PUSH
39580: LD_VAR 0 7
39584: ARRAY
39585: PUSH
39586: LD_INT 2
39588: ARRAY
39589: PPUSH
39590: CALL_OW 428
39594: PUSH
39595: LD_INT 0
39597: GREATER
39598: OR
39599: PUSH
39600: LD_VAR 0 12
39604: PUSH
39605: LD_VAR 0 7
39609: ARRAY
39610: PUSH
39611: LD_INT 1
39613: ARRAY
39614: PPUSH
39615: LD_VAR 0 12
39619: PUSH
39620: LD_VAR 0 7
39624: ARRAY
39625: PUSH
39626: LD_INT 2
39628: ARRAY
39629: PPUSH
39630: CALL_OW 351
39634: OR
39635: IFFALSE 39641
// exit ;
39637: POP
39638: POP
39639: GO 39948
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39641: LD_ADDR_VAR 0 8
39645: PUSH
39646: LD_VAR 0 12
39650: PUSH
39651: LD_VAR 0 7
39655: ARRAY
39656: PUSH
39657: LD_INT 1
39659: ARRAY
39660: PPUSH
39661: LD_VAR 0 12
39665: PUSH
39666: LD_VAR 0 7
39670: ARRAY
39671: PUSH
39672: LD_INT 2
39674: ARRAY
39675: PPUSH
39676: CALL_OW 546
39680: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39681: LD_VAR 0 8
39685: PUSH
39686: LD_INT 1
39688: ARRAY
39689: PUSH
39690: LD_VAR 0 8
39694: PUSH
39695: LD_INT 2
39697: ARRAY
39698: PUSH
39699: LD_VAR 0 13
39703: PUSH
39704: LD_INT 2
39706: PLUS
39707: GREATER
39708: OR
39709: PUSH
39710: LD_VAR 0 8
39714: PUSH
39715: LD_INT 2
39717: ARRAY
39718: PUSH
39719: LD_VAR 0 13
39723: PUSH
39724: LD_INT 2
39726: MINUS
39727: LESS
39728: OR
39729: PUSH
39730: LD_VAR 0 8
39734: PUSH
39735: LD_INT 3
39737: ARRAY
39738: PUSH
39739: LD_INT 0
39741: PUSH
39742: LD_INT 8
39744: PUSH
39745: LD_INT 9
39747: PUSH
39748: LD_INT 10
39750: PUSH
39751: LD_INT 11
39753: PUSH
39754: LD_INT 12
39756: PUSH
39757: LD_INT 13
39759: PUSH
39760: LD_INT 16
39762: PUSH
39763: LD_INT 17
39765: PUSH
39766: LD_INT 18
39768: PUSH
39769: LD_INT 19
39771: PUSH
39772: LD_INT 20
39774: PUSH
39775: LD_INT 21
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: IN
39793: NOT
39794: OR
39795: PUSH
39796: LD_VAR 0 8
39800: PUSH
39801: LD_INT 5
39803: ARRAY
39804: NOT
39805: OR
39806: PUSH
39807: LD_VAR 0 8
39811: PUSH
39812: LD_INT 6
39814: ARRAY
39815: PUSH
39816: LD_INT 1
39818: PUSH
39819: LD_INT 2
39821: PUSH
39822: LD_INT 7
39824: PUSH
39825: LD_INT 9
39827: PUSH
39828: LD_INT 10
39830: PUSH
39831: LD_INT 11
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: IN
39842: NOT
39843: OR
39844: IFFALSE 39850
// exit ;
39846: POP
39847: POP
39848: GO 39948
// end ;
39850: GO 39521
39852: POP
39853: POP
// side := GetSide ( depot ) ;
39854: LD_ADDR_VAR 0 9
39858: PUSH
39859: LD_VAR 0 1
39863: PPUSH
39864: CALL_OW 255
39868: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39869: LD_VAR 0 9
39873: PPUSH
39874: LD_VAR 0 3
39878: PPUSH
39879: LD_VAR 0 4
39883: PPUSH
39884: LD_INT 20
39886: PPUSH
39887: CALL 32602 0 4
39891: PUSH
39892: LD_INT 4
39894: ARRAY
39895: IFFALSE 39899
// exit ;
39897: GO 39948
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39899: LD_VAR 0 2
39903: PUSH
39904: LD_INT 29
39906: PUSH
39907: LD_INT 30
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: IN
39914: PUSH
39915: LD_VAR 0 3
39919: PPUSH
39920: LD_VAR 0 4
39924: PPUSH
39925: LD_VAR 0 9
39929: PPUSH
39930: CALL_OW 440
39934: NOT
39935: AND
39936: IFFALSE 39940
// exit ;
39938: GO 39948
// result := true ;
39940: LD_ADDR_VAR 0 6
39944: PUSH
39945: LD_INT 1
39947: ST_TO_ADDR
// end ;
39948: LD_VAR 0 6
39952: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
39953: LD_INT 0
39955: PPUSH
39956: PPUSH
39957: PPUSH
39958: PPUSH
39959: PPUSH
39960: PPUSH
39961: PPUSH
39962: PPUSH
39963: PPUSH
39964: PPUSH
39965: PPUSH
39966: PPUSH
39967: PPUSH
39968: PPUSH
39969: PPUSH
39970: PPUSH
39971: PPUSH
39972: PPUSH
39973: PPUSH
39974: PPUSH
39975: PPUSH
39976: PPUSH
39977: PPUSH
39978: PPUSH
39979: PPUSH
39980: PPUSH
39981: PPUSH
39982: PPUSH
39983: PPUSH
39984: PPUSH
39985: PPUSH
39986: PPUSH
39987: PPUSH
39988: PPUSH
39989: PPUSH
39990: PPUSH
39991: PPUSH
39992: PPUSH
39993: PPUSH
39994: PPUSH
39995: PPUSH
39996: PPUSH
39997: PPUSH
39998: PPUSH
39999: PPUSH
40000: PPUSH
40001: PPUSH
40002: PPUSH
40003: PPUSH
40004: PPUSH
40005: PPUSH
40006: PPUSH
40007: PPUSH
40008: PPUSH
40009: PPUSH
40010: PPUSH
40011: PPUSH
40012: PPUSH
// result = [ ] ;
40013: LD_ADDR_VAR 0 7
40017: PUSH
40018: EMPTY
40019: ST_TO_ADDR
// temp_list = [ ] ;
40020: LD_ADDR_VAR 0 9
40024: PUSH
40025: EMPTY
40026: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40027: LD_VAR 0 4
40031: PUSH
40032: LD_INT 0
40034: PUSH
40035: LD_INT 1
40037: PUSH
40038: LD_INT 2
40040: PUSH
40041: LD_INT 3
40043: PUSH
40044: LD_INT 4
40046: PUSH
40047: LD_INT 5
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: IN
40058: NOT
40059: PUSH
40060: LD_VAR 0 1
40064: PUSH
40065: LD_INT 0
40067: PUSH
40068: LD_INT 1
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: IN
40075: PUSH
40076: LD_VAR 0 5
40080: PUSH
40081: LD_INT 1
40083: PUSH
40084: LD_INT 2
40086: PUSH
40087: LD_INT 3
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: LIST
40094: IN
40095: NOT
40096: AND
40097: OR
40098: IFFALSE 40102
// exit ;
40100: GO 58493
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40102: LD_VAR 0 1
40106: PUSH
40107: LD_INT 6
40109: PUSH
40110: LD_INT 7
40112: PUSH
40113: LD_INT 8
40115: PUSH
40116: LD_INT 13
40118: PUSH
40119: LD_INT 12
40121: PUSH
40122: LD_INT 15
40124: PUSH
40125: LD_INT 11
40127: PUSH
40128: LD_INT 14
40130: PUSH
40131: LD_INT 10
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: LIST
40143: LIST
40144: IN
40145: IFFALSE 40155
// btype = b_lab ;
40147: LD_ADDR_VAR 0 1
40151: PUSH
40152: LD_INT 6
40154: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40155: LD_VAR 0 6
40159: PUSH
40160: LD_INT 0
40162: PUSH
40163: LD_INT 1
40165: PUSH
40166: LD_INT 2
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: LIST
40173: IN
40174: NOT
40175: PUSH
40176: LD_VAR 0 1
40180: PUSH
40181: LD_INT 0
40183: PUSH
40184: LD_INT 1
40186: PUSH
40187: LD_INT 2
40189: PUSH
40190: LD_INT 3
40192: PUSH
40193: LD_INT 6
40195: PUSH
40196: LD_INT 36
40198: PUSH
40199: LD_INT 4
40201: PUSH
40202: LD_INT 5
40204: PUSH
40205: LD_INT 31
40207: PUSH
40208: LD_INT 32
40210: PUSH
40211: LD_INT 33
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: IN
40227: NOT
40228: PUSH
40229: LD_VAR 0 6
40233: PUSH
40234: LD_INT 1
40236: EQUAL
40237: AND
40238: OR
40239: PUSH
40240: LD_VAR 0 1
40244: PUSH
40245: LD_INT 2
40247: PUSH
40248: LD_INT 3
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: IN
40255: NOT
40256: PUSH
40257: LD_VAR 0 6
40261: PUSH
40262: LD_INT 2
40264: EQUAL
40265: AND
40266: OR
40267: IFFALSE 40277
// mode = 0 ;
40269: LD_ADDR_VAR 0 6
40273: PUSH
40274: LD_INT 0
40276: ST_TO_ADDR
// case mode of 0 :
40277: LD_VAR 0 6
40281: PUSH
40282: LD_INT 0
40284: DOUBLE
40285: EQUAL
40286: IFTRUE 40290
40288: GO 51743
40290: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40291: LD_ADDR_VAR 0 11
40295: PUSH
40296: LD_INT 0
40298: PUSH
40299: LD_INT 0
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PUSH
40306: LD_INT 0
40308: PUSH
40309: LD_INT 1
40311: NEG
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 1
40319: PUSH
40320: LD_INT 0
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: LD_INT 1
40329: PUSH
40330: LD_INT 1
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PUSH
40337: LD_INT 0
40339: PUSH
40340: LD_INT 1
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 1
40349: NEG
40350: PUSH
40351: LD_INT 0
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 1
40360: NEG
40361: PUSH
40362: LD_INT 1
40364: NEG
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 1
40372: NEG
40373: PUSH
40374: LD_INT 2
40376: NEG
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: PUSH
40382: LD_INT 0
40384: PUSH
40385: LD_INT 2
40387: NEG
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 1
40395: PUSH
40396: LD_INT 1
40398: NEG
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 1
40406: PUSH
40407: LD_INT 2
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 0
40416: PUSH
40417: LD_INT 2
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 1
40426: NEG
40427: PUSH
40428: LD_INT 1
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 1
40437: PUSH
40438: LD_INT 3
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PUSH
40445: LD_INT 0
40447: PUSH
40448: LD_INT 3
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PUSH
40455: LD_INT 1
40457: NEG
40458: PUSH
40459: LD_INT 2
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40484: LD_ADDR_VAR 0 12
40488: PUSH
40489: LD_INT 0
40491: PUSH
40492: LD_INT 0
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PUSH
40499: LD_INT 0
40501: PUSH
40502: LD_INT 1
40504: NEG
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 1
40512: PUSH
40513: LD_INT 0
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: LD_INT 1
40522: PUSH
40523: LD_INT 1
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 0
40532: PUSH
40533: LD_INT 1
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 1
40542: NEG
40543: PUSH
40544: LD_INT 0
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: PUSH
40551: LD_INT 1
40553: NEG
40554: PUSH
40555: LD_INT 1
40557: NEG
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 1
40565: PUSH
40566: LD_INT 1
40568: NEG
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 2
40576: PUSH
40577: LD_INT 0
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 2
40586: PUSH
40587: LD_INT 1
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 1
40596: NEG
40597: PUSH
40598: LD_INT 1
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 2
40607: NEG
40608: PUSH
40609: LD_INT 0
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 2
40618: NEG
40619: PUSH
40620: LD_INT 1
40622: NEG
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 2
40630: NEG
40631: PUSH
40632: LD_INT 1
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: LD_INT 3
40641: NEG
40642: PUSH
40643: LD_INT 0
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 3
40652: NEG
40653: PUSH
40654: LD_INT 1
40656: NEG
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40680: LD_ADDR_VAR 0 13
40684: PUSH
40685: LD_INT 0
40687: PUSH
40688: LD_INT 0
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: PUSH
40695: LD_INT 0
40697: PUSH
40698: LD_INT 1
40700: NEG
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: LD_INT 1
40708: PUSH
40709: LD_INT 0
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 1
40718: PUSH
40719: LD_INT 1
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 0
40728: PUSH
40729: LD_INT 1
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 1
40738: NEG
40739: PUSH
40740: LD_INT 0
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: PUSH
40747: LD_INT 1
40749: NEG
40750: PUSH
40751: LD_INT 1
40753: NEG
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: LD_INT 1
40761: NEG
40762: PUSH
40763: LD_INT 2
40765: NEG
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 2
40773: PUSH
40774: LD_INT 1
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: LD_INT 2
40783: PUSH
40784: LD_INT 2
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: PUSH
40791: LD_INT 1
40793: PUSH
40794: LD_INT 2
40796: PUSH
40797: EMPTY
40798: LIST
40799: LIST
40800: PUSH
40801: LD_INT 2
40803: NEG
40804: PUSH
40805: LD_INT 1
40807: NEG
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 2
40815: NEG
40816: PUSH
40817: LD_INT 2
40819: NEG
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 2
40827: NEG
40828: PUSH
40829: LD_INT 3
40831: NEG
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: LD_INT 3
40839: NEG
40840: PUSH
40841: LD_INT 2
40843: NEG
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 3
40851: NEG
40852: PUSH
40853: LD_INT 3
40855: NEG
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40879: LD_ADDR_VAR 0 14
40883: PUSH
40884: LD_INT 0
40886: PUSH
40887: LD_INT 0
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 0
40896: PUSH
40897: LD_INT 1
40899: NEG
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: PUSH
40905: LD_INT 1
40907: PUSH
40908: LD_INT 0
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: LD_INT 1
40917: PUSH
40918: LD_INT 1
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: LD_INT 0
40927: PUSH
40928: LD_INT 1
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: PUSH
40935: LD_INT 1
40937: NEG
40938: PUSH
40939: LD_INT 0
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 1
40948: NEG
40949: PUSH
40950: LD_INT 1
40952: NEG
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 1
40960: NEG
40961: PUSH
40962: LD_INT 2
40964: NEG
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 0
40972: PUSH
40973: LD_INT 2
40975: NEG
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 1
40983: PUSH
40984: LD_INT 1
40986: NEG
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: LD_INT 1
40994: PUSH
40995: LD_INT 2
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: LD_INT 0
41004: PUSH
41005: LD_INT 2
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: PUSH
41012: LD_INT 1
41014: NEG
41015: PUSH
41016: LD_INT 1
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 1
41025: NEG
41026: PUSH
41027: LD_INT 3
41029: NEG
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 0
41037: PUSH
41038: LD_INT 3
41040: NEG
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 1
41048: PUSH
41049: LD_INT 2
41051: NEG
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41075: LD_ADDR_VAR 0 15
41079: PUSH
41080: LD_INT 0
41082: PUSH
41083: LD_INT 0
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 0
41092: PUSH
41093: LD_INT 1
41095: NEG
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 1
41103: PUSH
41104: LD_INT 0
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 1
41113: PUSH
41114: LD_INT 1
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 0
41123: PUSH
41124: LD_INT 1
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 1
41133: NEG
41134: PUSH
41135: LD_INT 0
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 1
41144: NEG
41145: PUSH
41146: LD_INT 1
41148: NEG
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: LD_INT 1
41156: PUSH
41157: LD_INT 1
41159: NEG
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: LD_INT 2
41167: PUSH
41168: LD_INT 0
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 2
41177: PUSH
41178: LD_INT 1
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 1
41187: NEG
41188: PUSH
41189: LD_INT 1
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 2
41198: NEG
41199: PUSH
41200: LD_INT 0
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 2
41209: NEG
41210: PUSH
41211: LD_INT 1
41213: NEG
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 2
41221: PUSH
41222: LD_INT 1
41224: NEG
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: LD_INT 3
41232: PUSH
41233: LD_INT 0
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: PUSH
41240: LD_INT 3
41242: PUSH
41243: LD_INT 1
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41268: LD_ADDR_VAR 0 16
41272: PUSH
41273: LD_INT 0
41275: PUSH
41276: LD_INT 0
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 0
41285: PUSH
41286: LD_INT 1
41288: NEG
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: PUSH
41294: LD_INT 1
41296: PUSH
41297: LD_INT 0
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: PUSH
41304: LD_INT 1
41306: PUSH
41307: LD_INT 1
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 0
41316: PUSH
41317: LD_INT 1
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: LD_INT 1
41326: NEG
41327: PUSH
41328: LD_INT 0
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 1
41337: NEG
41338: PUSH
41339: LD_INT 1
41341: NEG
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 1
41349: NEG
41350: PUSH
41351: LD_INT 2
41353: NEG
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PUSH
41359: LD_INT 2
41361: PUSH
41362: LD_INT 1
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: PUSH
41369: LD_INT 2
41371: PUSH
41372: LD_INT 2
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: LD_INT 1
41381: PUSH
41382: LD_INT 2
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: PUSH
41389: LD_INT 2
41391: NEG
41392: PUSH
41393: LD_INT 1
41395: NEG
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: LD_INT 2
41403: NEG
41404: PUSH
41405: LD_INT 2
41407: NEG
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: PUSH
41413: LD_INT 3
41415: PUSH
41416: LD_INT 2
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: PUSH
41423: LD_INT 3
41425: PUSH
41426: LD_INT 3
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PUSH
41433: LD_INT 2
41435: PUSH
41436: LD_INT 3
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41461: LD_ADDR_VAR 0 17
41465: PUSH
41466: LD_INT 0
41468: PUSH
41469: LD_INT 0
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 0
41478: PUSH
41479: LD_INT 1
41481: NEG
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: PUSH
41487: LD_INT 1
41489: PUSH
41490: LD_INT 0
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: LD_INT 1
41499: PUSH
41500: LD_INT 1
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: LD_INT 0
41509: PUSH
41510: LD_INT 1
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: LD_INT 1
41519: NEG
41520: PUSH
41521: LD_INT 0
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 1
41530: NEG
41531: PUSH
41532: LD_INT 1
41534: NEG
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 1
41542: NEG
41543: PUSH
41544: LD_INT 2
41546: NEG
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 0
41554: PUSH
41555: LD_INT 2
41557: NEG
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: LD_INT 1
41565: PUSH
41566: LD_INT 1
41568: NEG
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 2
41576: PUSH
41577: LD_INT 0
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 2
41586: PUSH
41587: LD_INT 1
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: LD_INT 2
41596: PUSH
41597: LD_INT 2
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 1
41606: PUSH
41607: LD_INT 2
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 0
41616: PUSH
41617: LD_INT 2
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: LD_INT 1
41626: NEG
41627: PUSH
41628: LD_INT 1
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: LD_INT 2
41637: NEG
41638: PUSH
41639: LD_INT 0
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 2
41648: NEG
41649: PUSH
41650: LD_INT 1
41652: NEG
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 2
41660: NEG
41661: PUSH
41662: LD_INT 2
41664: NEG
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41691: LD_ADDR_VAR 0 18
41695: PUSH
41696: LD_INT 0
41698: PUSH
41699: LD_INT 0
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PUSH
41706: LD_INT 0
41708: PUSH
41709: LD_INT 1
41711: NEG
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PUSH
41717: LD_INT 1
41719: PUSH
41720: LD_INT 0
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 1
41729: PUSH
41730: LD_INT 1
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PUSH
41737: LD_INT 0
41739: PUSH
41740: LD_INT 1
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 1
41749: NEG
41750: PUSH
41751: LD_INT 0
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 1
41760: NEG
41761: PUSH
41762: LD_INT 1
41764: NEG
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 1
41772: NEG
41773: PUSH
41774: LD_INT 2
41776: NEG
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 0
41784: PUSH
41785: LD_INT 2
41787: NEG
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 1
41795: PUSH
41796: LD_INT 1
41798: NEG
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 2
41806: PUSH
41807: LD_INT 0
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: LD_INT 2
41816: PUSH
41817: LD_INT 1
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 2
41826: PUSH
41827: LD_INT 2
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 1
41836: PUSH
41837: LD_INT 2
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: LD_INT 0
41846: PUSH
41847: LD_INT 2
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 1
41856: NEG
41857: PUSH
41858: LD_INT 1
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 2
41867: NEG
41868: PUSH
41869: LD_INT 0
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 2
41878: NEG
41879: PUSH
41880: LD_INT 1
41882: NEG
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 2
41890: NEG
41891: PUSH
41892: LD_INT 2
41894: NEG
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: LIST
41913: LIST
41914: LIST
41915: LIST
41916: LIST
41917: LIST
41918: LIST
41919: LIST
41920: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41921: LD_ADDR_VAR 0 19
41925: PUSH
41926: LD_INT 0
41928: PUSH
41929: LD_INT 0
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: PUSH
41936: LD_INT 0
41938: PUSH
41939: LD_INT 1
41941: NEG
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: PUSH
41947: LD_INT 1
41949: PUSH
41950: LD_INT 0
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: PUSH
41957: LD_INT 1
41959: PUSH
41960: LD_INT 1
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: LD_INT 0
41969: PUSH
41970: LD_INT 1
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 1
41979: NEG
41980: PUSH
41981: LD_INT 0
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: LD_INT 1
41990: NEG
41991: PUSH
41992: LD_INT 1
41994: NEG
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 1
42002: NEG
42003: PUSH
42004: LD_INT 2
42006: NEG
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 0
42014: PUSH
42015: LD_INT 2
42017: NEG
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 1
42025: PUSH
42026: LD_INT 1
42028: NEG
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 2
42036: PUSH
42037: LD_INT 0
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 2
42046: PUSH
42047: LD_INT 1
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 2
42056: PUSH
42057: LD_INT 2
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: LD_INT 1
42066: PUSH
42067: LD_INT 2
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 0
42076: PUSH
42077: LD_INT 2
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 1
42086: NEG
42087: PUSH
42088: LD_INT 1
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 2
42097: NEG
42098: PUSH
42099: LD_INT 0
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 2
42108: NEG
42109: PUSH
42110: LD_INT 1
42112: NEG
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 2
42120: NEG
42121: PUSH
42122: LD_INT 2
42124: NEG
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42151: LD_ADDR_VAR 0 20
42155: PUSH
42156: LD_INT 0
42158: PUSH
42159: LD_INT 0
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 0
42168: PUSH
42169: LD_INT 1
42171: NEG
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: LD_INT 1
42179: PUSH
42180: LD_INT 0
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: LD_INT 1
42189: PUSH
42190: LD_INT 1
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: LD_INT 0
42199: PUSH
42200: LD_INT 1
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: LD_INT 1
42209: NEG
42210: PUSH
42211: LD_INT 0
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: LD_INT 1
42220: NEG
42221: PUSH
42222: LD_INT 1
42224: NEG
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 1
42232: NEG
42233: PUSH
42234: LD_INT 2
42236: NEG
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 0
42244: PUSH
42245: LD_INT 2
42247: NEG
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: LD_INT 1
42255: PUSH
42256: LD_INT 1
42258: NEG
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 2
42266: PUSH
42267: LD_INT 0
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 2
42276: PUSH
42277: LD_INT 1
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 2
42286: PUSH
42287: LD_INT 2
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: LD_INT 1
42296: PUSH
42297: LD_INT 2
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 0
42306: PUSH
42307: LD_INT 2
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PUSH
42314: LD_INT 1
42316: NEG
42317: PUSH
42318: LD_INT 1
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 2
42327: NEG
42328: PUSH
42329: LD_INT 0
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 2
42338: NEG
42339: PUSH
42340: LD_INT 1
42342: NEG
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 2
42350: NEG
42351: PUSH
42352: LD_INT 2
42354: NEG
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42381: LD_ADDR_VAR 0 21
42385: PUSH
42386: LD_INT 0
42388: PUSH
42389: LD_INT 0
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: LD_INT 0
42398: PUSH
42399: LD_INT 1
42401: NEG
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 1
42409: PUSH
42410: LD_INT 0
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 1
42419: PUSH
42420: LD_INT 1
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 0
42429: PUSH
42430: LD_INT 1
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 1
42439: NEG
42440: PUSH
42441: LD_INT 0
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 1
42450: NEG
42451: PUSH
42452: LD_INT 1
42454: NEG
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: LD_INT 1
42462: NEG
42463: PUSH
42464: LD_INT 2
42466: NEG
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 0
42474: PUSH
42475: LD_INT 2
42477: NEG
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 1
42485: PUSH
42486: LD_INT 1
42488: NEG
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 2
42496: PUSH
42497: LD_INT 0
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 2
42506: PUSH
42507: LD_INT 1
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 2
42516: PUSH
42517: LD_INT 2
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 1
42526: PUSH
42527: LD_INT 2
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 0
42536: PUSH
42537: LD_INT 2
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 1
42546: NEG
42547: PUSH
42548: LD_INT 1
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 2
42557: NEG
42558: PUSH
42559: LD_INT 0
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 2
42568: NEG
42569: PUSH
42570: LD_INT 1
42572: NEG
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: LD_INT 2
42580: NEG
42581: PUSH
42582: LD_INT 2
42584: NEG
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42611: LD_ADDR_VAR 0 22
42615: PUSH
42616: LD_INT 0
42618: PUSH
42619: LD_INT 0
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: LD_INT 0
42628: PUSH
42629: LD_INT 1
42631: NEG
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 1
42639: PUSH
42640: LD_INT 0
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 1
42649: PUSH
42650: LD_INT 1
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 0
42659: PUSH
42660: LD_INT 1
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 1
42669: NEG
42670: PUSH
42671: LD_INT 0
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 1
42680: NEG
42681: PUSH
42682: LD_INT 1
42684: NEG
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 1
42692: NEG
42693: PUSH
42694: LD_INT 2
42696: NEG
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 0
42704: PUSH
42705: LD_INT 2
42707: NEG
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 1
42715: PUSH
42716: LD_INT 1
42718: NEG
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 2
42726: PUSH
42727: LD_INT 0
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 2
42736: PUSH
42737: LD_INT 1
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: LD_INT 2
42746: PUSH
42747: LD_INT 2
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 1
42756: PUSH
42757: LD_INT 2
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 0
42766: PUSH
42767: LD_INT 2
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: LD_INT 1
42776: NEG
42777: PUSH
42778: LD_INT 1
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 2
42787: NEG
42788: PUSH
42789: LD_INT 0
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 2
42798: NEG
42799: PUSH
42800: LD_INT 1
42802: NEG
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 2
42810: NEG
42811: PUSH
42812: LD_INT 2
42814: NEG
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42841: LD_ADDR_VAR 0 23
42845: PUSH
42846: LD_INT 0
42848: PUSH
42849: LD_INT 0
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 0
42858: PUSH
42859: LD_INT 1
42861: NEG
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 1
42869: PUSH
42870: LD_INT 0
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 1
42879: PUSH
42880: LD_INT 1
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 0
42889: PUSH
42890: LD_INT 1
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 1
42899: NEG
42900: PUSH
42901: LD_INT 0
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 1
42910: NEG
42911: PUSH
42912: LD_INT 1
42914: NEG
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 1
42922: NEG
42923: PUSH
42924: LD_INT 2
42926: NEG
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 0
42934: PUSH
42935: LD_INT 2
42937: NEG
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: PUSH
42943: LD_INT 1
42945: PUSH
42946: LD_INT 1
42948: NEG
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: LD_INT 2
42956: PUSH
42957: LD_INT 0
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 2
42966: PUSH
42967: LD_INT 1
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: LD_INT 2
42976: PUSH
42977: LD_INT 2
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: LD_INT 1
42986: PUSH
42987: LD_INT 2
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 0
42996: PUSH
42997: LD_INT 2
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 1
43006: NEG
43007: PUSH
43008: LD_INT 1
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 2
43017: NEG
43018: PUSH
43019: LD_INT 0
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: LD_INT 2
43028: NEG
43029: PUSH
43030: LD_INT 1
43032: NEG
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: PUSH
43038: LD_INT 2
43040: NEG
43041: PUSH
43042: LD_INT 2
43044: NEG
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 2
43052: NEG
43053: PUSH
43054: LD_INT 3
43056: NEG
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 1
43064: NEG
43065: PUSH
43066: LD_INT 3
43068: NEG
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 1
43076: PUSH
43077: LD_INT 2
43079: NEG
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 2
43087: PUSH
43088: LD_INT 1
43090: NEG
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43121: LD_ADDR_VAR 0 24
43125: PUSH
43126: LD_INT 0
43128: PUSH
43129: LD_INT 0
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: LD_INT 0
43138: PUSH
43139: LD_INT 1
43141: NEG
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 1
43149: PUSH
43150: LD_INT 0
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 1
43159: PUSH
43160: LD_INT 1
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: LD_INT 0
43169: PUSH
43170: LD_INT 1
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 1
43179: NEG
43180: PUSH
43181: LD_INT 0
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 1
43190: NEG
43191: PUSH
43192: LD_INT 1
43194: NEG
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 1
43202: NEG
43203: PUSH
43204: LD_INT 2
43206: NEG
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: LD_INT 0
43214: PUSH
43215: LD_INT 2
43217: NEG
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 1
43225: PUSH
43226: LD_INT 1
43228: NEG
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 2
43236: PUSH
43237: LD_INT 0
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 2
43246: PUSH
43247: LD_INT 1
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 2
43256: PUSH
43257: LD_INT 2
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 1
43266: PUSH
43267: LD_INT 2
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 0
43276: PUSH
43277: LD_INT 2
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: LD_INT 1
43286: NEG
43287: PUSH
43288: LD_INT 1
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 2
43297: NEG
43298: PUSH
43299: LD_INT 0
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 2
43308: NEG
43309: PUSH
43310: LD_INT 1
43312: NEG
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 2
43320: NEG
43321: PUSH
43322: LD_INT 2
43324: NEG
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 1
43332: PUSH
43333: LD_INT 2
43335: NEG
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 2
43343: PUSH
43344: LD_INT 1
43346: NEG
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: LD_INT 3
43354: PUSH
43355: LD_INT 1
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 3
43364: PUSH
43365: LD_INT 2
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43397: LD_ADDR_VAR 0 25
43401: PUSH
43402: LD_INT 0
43404: PUSH
43405: LD_INT 0
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 0
43414: PUSH
43415: LD_INT 1
43417: NEG
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 1
43425: PUSH
43426: LD_INT 0
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: LD_INT 1
43435: PUSH
43436: LD_INT 1
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 0
43445: PUSH
43446: LD_INT 1
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 1
43455: NEG
43456: PUSH
43457: LD_INT 0
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 1
43466: NEG
43467: PUSH
43468: LD_INT 1
43470: NEG
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: LD_INT 1
43478: NEG
43479: PUSH
43480: LD_INT 2
43482: NEG
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 0
43490: PUSH
43491: LD_INT 2
43493: NEG
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 1
43501: PUSH
43502: LD_INT 1
43504: NEG
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 2
43512: PUSH
43513: LD_INT 0
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 2
43522: PUSH
43523: LD_INT 1
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 2
43532: PUSH
43533: LD_INT 2
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: LD_INT 1
43542: PUSH
43543: LD_INT 2
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 0
43552: PUSH
43553: LD_INT 2
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 1
43562: NEG
43563: PUSH
43564: LD_INT 1
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 2
43573: NEG
43574: PUSH
43575: LD_INT 0
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 2
43584: NEG
43585: PUSH
43586: LD_INT 1
43588: NEG
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 2
43596: NEG
43597: PUSH
43598: LD_INT 2
43600: NEG
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 3
43608: PUSH
43609: LD_INT 1
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 3
43618: PUSH
43619: LD_INT 2
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: LD_INT 2
43628: PUSH
43629: LD_INT 3
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 1
43638: PUSH
43639: LD_INT 3
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43671: LD_ADDR_VAR 0 26
43675: PUSH
43676: LD_INT 0
43678: PUSH
43679: LD_INT 0
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 0
43688: PUSH
43689: LD_INT 1
43691: NEG
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 1
43699: PUSH
43700: LD_INT 0
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 1
43709: PUSH
43710: LD_INT 1
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 0
43719: PUSH
43720: LD_INT 1
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 1
43729: NEG
43730: PUSH
43731: LD_INT 0
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 1
43740: NEG
43741: PUSH
43742: LD_INT 1
43744: NEG
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_INT 1
43752: NEG
43753: PUSH
43754: LD_INT 2
43756: NEG
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 0
43764: PUSH
43765: LD_INT 2
43767: NEG
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 1
43775: PUSH
43776: LD_INT 1
43778: NEG
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 2
43786: PUSH
43787: LD_INT 0
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 2
43796: PUSH
43797: LD_INT 1
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 2
43806: PUSH
43807: LD_INT 2
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 1
43816: PUSH
43817: LD_INT 2
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 0
43826: PUSH
43827: LD_INT 2
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 1
43836: NEG
43837: PUSH
43838: LD_INT 1
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 2
43847: NEG
43848: PUSH
43849: LD_INT 0
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: LD_INT 2
43858: NEG
43859: PUSH
43860: LD_INT 1
43862: NEG
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 2
43870: NEG
43871: PUSH
43872: LD_INT 2
43874: NEG
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 2
43882: PUSH
43883: LD_INT 3
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 1
43892: PUSH
43893: LD_INT 3
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 1
43902: NEG
43903: PUSH
43904: LD_INT 2
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 2
43913: NEG
43914: PUSH
43915: LD_INT 1
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43947: LD_ADDR_VAR 0 27
43951: PUSH
43952: LD_INT 0
43954: PUSH
43955: LD_INT 0
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 0
43964: PUSH
43965: LD_INT 1
43967: NEG
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 1
43975: PUSH
43976: LD_INT 0
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 1
43985: PUSH
43986: LD_INT 1
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 0
43995: PUSH
43996: LD_INT 1
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 1
44005: NEG
44006: PUSH
44007: LD_INT 0
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 1
44016: NEG
44017: PUSH
44018: LD_INT 1
44020: NEG
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 1
44028: NEG
44029: PUSH
44030: LD_INT 2
44032: NEG
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 0
44040: PUSH
44041: LD_INT 2
44043: NEG
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 1
44051: PUSH
44052: LD_INT 1
44054: NEG
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: LD_INT 2
44062: PUSH
44063: LD_INT 0
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 2
44072: PUSH
44073: LD_INT 1
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 2
44082: PUSH
44083: LD_INT 2
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 1
44092: PUSH
44093: LD_INT 2
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 0
44102: PUSH
44103: LD_INT 2
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 1
44112: NEG
44113: PUSH
44114: LD_INT 1
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 2
44123: NEG
44124: PUSH
44125: LD_INT 0
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 2
44134: NEG
44135: PUSH
44136: LD_INT 1
44138: NEG
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: LD_INT 2
44146: NEG
44147: PUSH
44148: LD_INT 2
44150: NEG
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 1
44158: NEG
44159: PUSH
44160: LD_INT 2
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 2
44169: NEG
44170: PUSH
44171: LD_INT 1
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 3
44180: NEG
44181: PUSH
44182: LD_INT 1
44184: NEG
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 3
44192: NEG
44193: PUSH
44194: LD_INT 2
44196: NEG
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44227: LD_ADDR_VAR 0 28
44231: PUSH
44232: LD_INT 0
44234: PUSH
44235: LD_INT 0
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 0
44244: PUSH
44245: LD_INT 1
44247: NEG
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 1
44255: PUSH
44256: LD_INT 0
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 1
44265: PUSH
44266: LD_INT 1
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 0
44275: PUSH
44276: LD_INT 1
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 1
44285: NEG
44286: PUSH
44287: LD_INT 0
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 1
44296: NEG
44297: PUSH
44298: LD_INT 1
44300: NEG
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 1
44308: NEG
44309: PUSH
44310: LD_INT 2
44312: NEG
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 0
44320: PUSH
44321: LD_INT 2
44323: NEG
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 1
44331: PUSH
44332: LD_INT 1
44334: NEG
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 2
44342: PUSH
44343: LD_INT 0
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 2
44352: PUSH
44353: LD_INT 1
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 2
44362: PUSH
44363: LD_INT 2
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 1
44372: PUSH
44373: LD_INT 2
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 0
44382: PUSH
44383: LD_INT 2
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 1
44392: NEG
44393: PUSH
44394: LD_INT 1
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 2
44403: NEG
44404: PUSH
44405: LD_INT 0
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 2
44414: NEG
44415: PUSH
44416: LD_INT 1
44418: NEG
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 2
44426: NEG
44427: PUSH
44428: LD_INT 2
44430: NEG
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 2
44438: NEG
44439: PUSH
44440: LD_INT 3
44442: NEG
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 1
44450: NEG
44451: PUSH
44452: LD_INT 3
44454: NEG
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 3
44462: NEG
44463: PUSH
44464: LD_INT 1
44466: NEG
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 3
44474: NEG
44475: PUSH
44476: LD_INT 2
44478: NEG
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44509: LD_ADDR_VAR 0 29
44513: PUSH
44514: LD_INT 0
44516: PUSH
44517: LD_INT 0
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 0
44526: PUSH
44527: LD_INT 1
44529: NEG
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 1
44537: PUSH
44538: LD_INT 0
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 1
44547: PUSH
44548: LD_INT 1
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 0
44557: PUSH
44558: LD_INT 1
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 1
44567: NEG
44568: PUSH
44569: LD_INT 0
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 1
44578: NEG
44579: PUSH
44580: LD_INT 1
44582: NEG
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 1
44590: NEG
44591: PUSH
44592: LD_INT 2
44594: NEG
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 0
44602: PUSH
44603: LD_INT 2
44605: NEG
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 1
44613: PUSH
44614: LD_INT 1
44616: NEG
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 2
44624: PUSH
44625: LD_INT 0
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 2
44634: PUSH
44635: LD_INT 1
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 1
44644: PUSH
44645: LD_INT 2
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 0
44654: PUSH
44655: LD_INT 2
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 1
44664: NEG
44665: PUSH
44666: LD_INT 1
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 2
44675: NEG
44676: PUSH
44677: LD_INT 1
44679: NEG
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 2
44687: NEG
44688: PUSH
44689: LD_INT 2
44691: NEG
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 2
44699: NEG
44700: PUSH
44701: LD_INT 3
44703: NEG
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 2
44711: PUSH
44712: LD_INT 1
44714: NEG
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 3
44722: PUSH
44723: LD_INT 1
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 1
44732: PUSH
44733: LD_INT 3
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 1
44742: NEG
44743: PUSH
44744: LD_INT 2
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 3
44753: NEG
44754: PUSH
44755: LD_INT 2
44757: NEG
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44788: LD_ADDR_VAR 0 30
44792: PUSH
44793: LD_INT 0
44795: PUSH
44796: LD_INT 0
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 0
44805: PUSH
44806: LD_INT 1
44808: NEG
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 1
44816: PUSH
44817: LD_INT 0
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 1
44826: PUSH
44827: LD_INT 1
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 0
44836: PUSH
44837: LD_INT 1
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 1
44846: NEG
44847: PUSH
44848: LD_INT 0
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 1
44857: NEG
44858: PUSH
44859: LD_INT 1
44861: NEG
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 1
44869: NEG
44870: PUSH
44871: LD_INT 2
44873: NEG
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 0
44881: PUSH
44882: LD_INT 2
44884: NEG
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 1
44892: PUSH
44893: LD_INT 1
44895: NEG
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 2
44903: PUSH
44904: LD_INT 0
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 2
44913: PUSH
44914: LD_INT 1
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 2
44923: PUSH
44924: LD_INT 2
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 1
44933: PUSH
44934: LD_INT 2
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 1
44943: NEG
44944: PUSH
44945: LD_INT 1
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 2
44954: NEG
44955: PUSH
44956: LD_INT 0
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 2
44965: NEG
44966: PUSH
44967: LD_INT 1
44969: NEG
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: PUSH
44975: LD_INT 1
44977: NEG
44978: PUSH
44979: LD_INT 3
44981: NEG
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 1
44989: PUSH
44990: LD_INT 2
44992: NEG
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 3
45000: PUSH
45001: LD_INT 2
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 2
45010: PUSH
45011: LD_INT 3
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 2
45020: NEG
45021: PUSH
45022: LD_INT 1
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 3
45031: NEG
45032: PUSH
45033: LD_INT 1
45035: NEG
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45066: LD_ADDR_VAR 0 31
45070: PUSH
45071: LD_INT 0
45073: PUSH
45074: LD_INT 0
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 0
45083: PUSH
45084: LD_INT 1
45086: NEG
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 1
45094: PUSH
45095: LD_INT 0
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 1
45104: PUSH
45105: LD_INT 1
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 0
45114: PUSH
45115: LD_INT 1
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 1
45124: NEG
45125: PUSH
45126: LD_INT 0
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 1
45135: NEG
45136: PUSH
45137: LD_INT 1
45139: NEG
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 1
45147: NEG
45148: PUSH
45149: LD_INT 2
45151: NEG
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 1
45159: PUSH
45160: LD_INT 1
45162: NEG
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 2
45170: PUSH
45171: LD_INT 0
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 2
45180: PUSH
45181: LD_INT 1
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 2
45190: PUSH
45191: LD_INT 2
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 1
45200: PUSH
45201: LD_INT 2
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 0
45210: PUSH
45211: LD_INT 2
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 1
45220: NEG
45221: PUSH
45222: LD_INT 1
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 2
45231: NEG
45232: PUSH
45233: LD_INT 1
45235: NEG
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 2
45243: NEG
45244: PUSH
45245: LD_INT 2
45247: NEG
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 2
45255: NEG
45256: PUSH
45257: LD_INT 3
45259: NEG
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: LD_INT 2
45267: PUSH
45268: LD_INT 1
45270: NEG
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 3
45278: PUSH
45279: LD_INT 1
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 1
45288: PUSH
45289: LD_INT 3
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 1
45298: NEG
45299: PUSH
45300: LD_INT 2
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 3
45309: NEG
45310: PUSH
45311: LD_INT 2
45313: NEG
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45344: LD_ADDR_VAR 0 32
45348: PUSH
45349: LD_INT 0
45351: PUSH
45352: LD_INT 0
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 0
45361: PUSH
45362: LD_INT 1
45364: NEG
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 1
45372: PUSH
45373: LD_INT 0
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 1
45382: PUSH
45383: LD_INT 1
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 0
45392: PUSH
45393: LD_INT 1
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 1
45402: NEG
45403: PUSH
45404: LD_INT 0
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 1
45413: NEG
45414: PUSH
45415: LD_INT 1
45417: NEG
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 1
45425: NEG
45426: PUSH
45427: LD_INT 2
45429: NEG
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 0
45437: PUSH
45438: LD_INT 2
45440: NEG
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 1
45448: PUSH
45449: LD_INT 1
45451: NEG
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 2
45459: PUSH
45460: LD_INT 1
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 2
45469: PUSH
45470: LD_INT 2
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 1
45479: PUSH
45480: LD_INT 2
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 0
45489: PUSH
45490: LD_INT 2
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 1
45499: NEG
45500: PUSH
45501: LD_INT 1
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 2
45510: NEG
45511: PUSH
45512: LD_INT 0
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 2
45521: NEG
45522: PUSH
45523: LD_INT 1
45525: NEG
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 1
45533: NEG
45534: PUSH
45535: LD_INT 3
45537: NEG
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 1
45545: PUSH
45546: LD_INT 2
45548: NEG
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 3
45556: PUSH
45557: LD_INT 2
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 2
45566: PUSH
45567: LD_INT 3
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 2
45576: NEG
45577: PUSH
45578: LD_INT 1
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 3
45587: NEG
45588: PUSH
45589: LD_INT 1
45591: NEG
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45622: LD_ADDR_VAR 0 33
45626: PUSH
45627: LD_INT 0
45629: PUSH
45630: LD_INT 0
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 0
45639: PUSH
45640: LD_INT 1
45642: NEG
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 1
45650: PUSH
45651: LD_INT 0
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 1
45660: PUSH
45661: LD_INT 1
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 0
45670: PUSH
45671: LD_INT 1
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 1
45680: NEG
45681: PUSH
45682: LD_INT 0
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 1
45691: NEG
45692: PUSH
45693: LD_INT 1
45695: NEG
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 1
45703: NEG
45704: PUSH
45705: LD_INT 2
45707: NEG
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 1
45715: PUSH
45716: LD_INT 1
45718: NEG
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 2
45726: PUSH
45727: LD_INT 0
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 2
45736: PUSH
45737: LD_INT 1
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 1
45746: PUSH
45747: LD_INT 2
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 0
45756: PUSH
45757: LD_INT 2
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 1
45766: NEG
45767: PUSH
45768: LD_INT 1
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 2
45777: NEG
45778: PUSH
45779: LD_INT 0
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 2
45788: NEG
45789: PUSH
45790: LD_INT 1
45792: NEG
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 2
45800: NEG
45801: PUSH
45802: LD_INT 2
45804: NEG
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 2
45812: NEG
45813: PUSH
45814: LD_INT 3
45816: NEG
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 2
45824: PUSH
45825: LD_INT 1
45827: NEG
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 3
45835: PUSH
45836: LD_INT 1
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 1
45845: PUSH
45846: LD_INT 3
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 1
45855: NEG
45856: PUSH
45857: LD_INT 2
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 3
45866: NEG
45867: PUSH
45868: LD_INT 2
45870: NEG
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45901: LD_ADDR_VAR 0 34
45905: PUSH
45906: LD_INT 0
45908: PUSH
45909: LD_INT 0
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 0
45918: PUSH
45919: LD_INT 1
45921: NEG
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 1
45929: PUSH
45930: LD_INT 0
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 1
45939: PUSH
45940: LD_INT 1
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 0
45949: PUSH
45950: LD_INT 1
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 1
45959: NEG
45960: PUSH
45961: LD_INT 0
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 1
45970: NEG
45971: PUSH
45972: LD_INT 1
45974: NEG
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 1
45982: NEG
45983: PUSH
45984: LD_INT 2
45986: NEG
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 0
45994: PUSH
45995: LD_INT 2
45997: NEG
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 1
46005: PUSH
46006: LD_INT 1
46008: NEG
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 2
46016: PUSH
46017: LD_INT 1
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 2
46026: PUSH
46027: LD_INT 2
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 1
46036: PUSH
46037: LD_INT 2
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 1
46046: NEG
46047: PUSH
46048: LD_INT 1
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 2
46057: NEG
46058: PUSH
46059: LD_INT 0
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 2
46068: NEG
46069: PUSH
46070: LD_INT 1
46072: NEG
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 2
46080: NEG
46081: PUSH
46082: LD_INT 2
46084: NEG
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 1
46092: NEG
46093: PUSH
46094: LD_INT 3
46096: NEG
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 1
46104: PUSH
46105: LD_INT 2
46107: NEG
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 3
46115: PUSH
46116: LD_INT 2
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 2
46125: PUSH
46126: LD_INT 3
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 2
46135: NEG
46136: PUSH
46137: LD_INT 1
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 3
46146: NEG
46147: PUSH
46148: LD_INT 1
46150: NEG
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46181: LD_ADDR_VAR 0 35
46185: PUSH
46186: LD_INT 0
46188: PUSH
46189: LD_INT 0
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 0
46198: PUSH
46199: LD_INT 1
46201: NEG
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 1
46209: PUSH
46210: LD_INT 0
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 1
46219: PUSH
46220: LD_INT 1
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 0
46229: PUSH
46230: LD_INT 1
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 1
46239: NEG
46240: PUSH
46241: LD_INT 0
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 1
46250: NEG
46251: PUSH
46252: LD_INT 1
46254: NEG
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 2
46262: PUSH
46263: LD_INT 1
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 2
46272: NEG
46273: PUSH
46274: LD_INT 1
46276: NEG
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46293: LD_ADDR_VAR 0 36
46297: PUSH
46298: LD_INT 0
46300: PUSH
46301: LD_INT 0
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 0
46310: PUSH
46311: LD_INT 1
46313: NEG
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 1
46321: PUSH
46322: LD_INT 0
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 1
46331: PUSH
46332: LD_INT 1
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 0
46341: PUSH
46342: LD_INT 1
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 1
46351: NEG
46352: PUSH
46353: LD_INT 0
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 1
46362: NEG
46363: PUSH
46364: LD_INT 1
46366: NEG
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 1
46374: NEG
46375: PUSH
46376: LD_INT 2
46378: NEG
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 1
46386: PUSH
46387: LD_INT 2
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46405: LD_ADDR_VAR 0 37
46409: PUSH
46410: LD_INT 0
46412: PUSH
46413: LD_INT 0
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 0
46422: PUSH
46423: LD_INT 1
46425: NEG
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 1
46433: PUSH
46434: LD_INT 0
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 1
46443: PUSH
46444: LD_INT 1
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 0
46453: PUSH
46454: LD_INT 1
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 1
46463: NEG
46464: PUSH
46465: LD_INT 0
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 1
46474: NEG
46475: PUSH
46476: LD_INT 1
46478: NEG
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 1
46486: PUSH
46487: LD_INT 1
46489: NEG
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 1
46497: NEG
46498: PUSH
46499: LD_INT 1
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46517: LD_ADDR_VAR 0 38
46521: PUSH
46522: LD_INT 0
46524: PUSH
46525: LD_INT 0
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 0
46534: PUSH
46535: LD_INT 1
46537: NEG
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 1
46545: PUSH
46546: LD_INT 0
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 1
46555: PUSH
46556: LD_INT 1
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 0
46565: PUSH
46566: LD_INT 1
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 1
46575: NEG
46576: PUSH
46577: LD_INT 0
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 1
46586: NEG
46587: PUSH
46588: LD_INT 1
46590: NEG
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 2
46598: PUSH
46599: LD_INT 1
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 2
46608: NEG
46609: PUSH
46610: LD_INT 1
46612: NEG
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46629: LD_ADDR_VAR 0 39
46633: PUSH
46634: LD_INT 0
46636: PUSH
46637: LD_INT 0
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 0
46646: PUSH
46647: LD_INT 1
46649: NEG
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 1
46657: PUSH
46658: LD_INT 0
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 1
46667: PUSH
46668: LD_INT 1
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 0
46677: PUSH
46678: LD_INT 1
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 1
46687: NEG
46688: PUSH
46689: LD_INT 0
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 1
46698: NEG
46699: PUSH
46700: LD_INT 1
46702: NEG
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 1
46710: NEG
46711: PUSH
46712: LD_INT 2
46714: NEG
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 1
46722: PUSH
46723: LD_INT 2
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46741: LD_ADDR_VAR 0 40
46745: PUSH
46746: LD_INT 0
46748: PUSH
46749: LD_INT 0
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 0
46758: PUSH
46759: LD_INT 1
46761: NEG
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 1
46769: PUSH
46770: LD_INT 0
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 1
46779: PUSH
46780: LD_INT 1
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 0
46789: PUSH
46790: LD_INT 1
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 1
46799: NEG
46800: PUSH
46801: LD_INT 0
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 1
46810: NEG
46811: PUSH
46812: LD_INT 1
46814: NEG
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 1
46822: PUSH
46823: LD_INT 1
46825: NEG
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 1
46833: NEG
46834: PUSH
46835: LD_INT 1
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46853: LD_ADDR_VAR 0 41
46857: PUSH
46858: LD_INT 0
46860: PUSH
46861: LD_INT 0
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 0
46870: PUSH
46871: LD_INT 1
46873: NEG
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 1
46881: PUSH
46882: LD_INT 0
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 1
46891: PUSH
46892: LD_INT 1
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 0
46901: PUSH
46902: LD_INT 1
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 1
46911: NEG
46912: PUSH
46913: LD_INT 0
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 1
46922: NEG
46923: PUSH
46924: LD_INT 1
46926: NEG
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 1
46934: NEG
46935: PUSH
46936: LD_INT 2
46938: NEG
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 1
46946: PUSH
46947: LD_INT 1
46949: NEG
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 2
46957: PUSH
46958: LD_INT 0
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 2
46967: PUSH
46968: LD_INT 1
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 2
46977: PUSH
46978: LD_INT 2
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 1
46987: PUSH
46988: LD_INT 2
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 1
46997: NEG
46998: PUSH
46999: LD_INT 1
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 2
47008: NEG
47009: PUSH
47010: LD_INT 0
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 2
47019: NEG
47020: PUSH
47021: LD_INT 1
47023: NEG
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 2
47031: NEG
47032: PUSH
47033: LD_INT 2
47035: NEG
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 2
47043: NEG
47044: PUSH
47045: LD_INT 3
47047: NEG
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 2
47055: PUSH
47056: LD_INT 1
47058: NEG
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 3
47066: PUSH
47067: LD_INT 0
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 3
47076: PUSH
47077: LD_INT 1
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 3
47086: PUSH
47087: LD_INT 2
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 3
47096: PUSH
47097: LD_INT 3
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 2
47106: PUSH
47107: LD_INT 3
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 2
47116: NEG
47117: PUSH
47118: LD_INT 1
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 3
47127: NEG
47128: PUSH
47129: LD_INT 0
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 3
47138: NEG
47139: PUSH
47140: LD_INT 1
47142: NEG
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 3
47150: NEG
47151: PUSH
47152: LD_INT 2
47154: NEG
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 3
47162: NEG
47163: PUSH
47164: LD_INT 3
47166: NEG
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47203: LD_ADDR_VAR 0 42
47207: PUSH
47208: LD_INT 0
47210: PUSH
47211: LD_INT 0
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 0
47220: PUSH
47221: LD_INT 1
47223: NEG
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 1
47231: PUSH
47232: LD_INT 0
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 1
47241: PUSH
47242: LD_INT 1
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 0
47251: PUSH
47252: LD_INT 1
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 1
47261: NEG
47262: PUSH
47263: LD_INT 0
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 1
47272: NEG
47273: PUSH
47274: LD_INT 1
47276: NEG
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 1
47284: NEG
47285: PUSH
47286: LD_INT 2
47288: NEG
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 0
47296: PUSH
47297: LD_INT 2
47299: NEG
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 1
47307: PUSH
47308: LD_INT 1
47310: NEG
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 2
47318: PUSH
47319: LD_INT 1
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 2
47328: PUSH
47329: LD_INT 2
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 1
47338: PUSH
47339: LD_INT 2
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 0
47348: PUSH
47349: LD_INT 2
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 1
47358: NEG
47359: PUSH
47360: LD_INT 1
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 2
47369: NEG
47370: PUSH
47371: LD_INT 1
47373: NEG
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 2
47381: NEG
47382: PUSH
47383: LD_INT 2
47385: NEG
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 2
47393: NEG
47394: PUSH
47395: LD_INT 3
47397: NEG
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 1
47405: NEG
47406: PUSH
47407: LD_INT 3
47409: NEG
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 0
47417: PUSH
47418: LD_INT 3
47420: NEG
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 1
47428: PUSH
47429: LD_INT 2
47431: NEG
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 3
47439: PUSH
47440: LD_INT 2
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 3
47449: PUSH
47450: LD_INT 3
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 2
47459: PUSH
47460: LD_INT 3
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 1
47469: PUSH
47470: LD_INT 3
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 0
47479: PUSH
47480: LD_INT 3
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 1
47489: NEG
47490: PUSH
47491: LD_INT 2
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 3
47500: NEG
47501: PUSH
47502: LD_INT 2
47504: NEG
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 3
47512: NEG
47513: PUSH
47514: LD_INT 3
47516: NEG
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47553: LD_ADDR_VAR 0 43
47557: PUSH
47558: LD_INT 0
47560: PUSH
47561: LD_INT 0
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 0
47570: PUSH
47571: LD_INT 1
47573: NEG
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 1
47581: PUSH
47582: LD_INT 0
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 1
47591: PUSH
47592: LD_INT 1
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 0
47601: PUSH
47602: LD_INT 1
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 1
47611: NEG
47612: PUSH
47613: LD_INT 0
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 1
47622: NEG
47623: PUSH
47624: LD_INT 1
47626: NEG
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 1
47634: NEG
47635: PUSH
47636: LD_INT 2
47638: NEG
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 0
47646: PUSH
47647: LD_INT 2
47649: NEG
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 1
47657: PUSH
47658: LD_INT 1
47660: NEG
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 2
47668: PUSH
47669: LD_INT 0
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 2
47678: PUSH
47679: LD_INT 1
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 1
47688: PUSH
47689: LD_INT 2
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 0
47698: PUSH
47699: LD_INT 2
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 1
47708: NEG
47709: PUSH
47710: LD_INT 1
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 2
47719: NEG
47720: PUSH
47721: LD_INT 0
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 2
47730: NEG
47731: PUSH
47732: LD_INT 1
47734: NEG
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 1
47742: NEG
47743: PUSH
47744: LD_INT 3
47746: NEG
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 0
47754: PUSH
47755: LD_INT 3
47757: NEG
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 1
47765: PUSH
47766: LD_INT 2
47768: NEG
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 2
47776: PUSH
47777: LD_INT 1
47779: NEG
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 3
47787: PUSH
47788: LD_INT 0
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 3
47797: PUSH
47798: LD_INT 1
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 1
47807: PUSH
47808: LD_INT 3
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 0
47817: PUSH
47818: LD_INT 3
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 1
47827: NEG
47828: PUSH
47829: LD_INT 2
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 2
47838: NEG
47839: PUSH
47840: LD_INT 1
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 3
47849: NEG
47850: PUSH
47851: LD_INT 0
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 3
47860: NEG
47861: PUSH
47862: LD_INT 1
47864: NEG
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47901: LD_ADDR_VAR 0 44
47905: PUSH
47906: LD_INT 0
47908: PUSH
47909: LD_INT 0
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 0
47918: PUSH
47919: LD_INT 1
47921: NEG
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 1
47929: PUSH
47930: LD_INT 0
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 1
47939: PUSH
47940: LD_INT 1
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 0
47949: PUSH
47950: LD_INT 1
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 1
47959: NEG
47960: PUSH
47961: LD_INT 0
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 1
47970: NEG
47971: PUSH
47972: LD_INT 1
47974: NEG
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 1
47982: NEG
47983: PUSH
47984: LD_INT 2
47986: NEG
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 1
47994: PUSH
47995: LD_INT 1
47997: NEG
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 2
48005: PUSH
48006: LD_INT 0
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 2
48015: PUSH
48016: LD_INT 1
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 2
48025: PUSH
48026: LD_INT 2
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 1
48035: PUSH
48036: LD_INT 2
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 1
48045: NEG
48046: PUSH
48047: LD_INT 1
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 2
48056: NEG
48057: PUSH
48058: LD_INT 0
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 2
48067: NEG
48068: PUSH
48069: LD_INT 1
48071: NEG
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 2
48079: NEG
48080: PUSH
48081: LD_INT 2
48083: NEG
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 2
48091: NEG
48092: PUSH
48093: LD_INT 3
48095: NEG
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 2
48103: PUSH
48104: LD_INT 1
48106: NEG
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 3
48114: PUSH
48115: LD_INT 0
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 3
48124: PUSH
48125: LD_INT 1
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 3
48134: PUSH
48135: LD_INT 2
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 3
48144: PUSH
48145: LD_INT 3
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 2
48154: PUSH
48155: LD_INT 3
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 2
48164: NEG
48165: PUSH
48166: LD_INT 1
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 3
48175: NEG
48176: PUSH
48177: LD_INT 0
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 3
48186: NEG
48187: PUSH
48188: LD_INT 1
48190: NEG
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 3
48198: NEG
48199: PUSH
48200: LD_INT 2
48202: NEG
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 3
48210: NEG
48211: PUSH
48212: LD_INT 3
48214: NEG
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48251: LD_ADDR_VAR 0 45
48255: PUSH
48256: LD_INT 0
48258: PUSH
48259: LD_INT 0
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 0
48268: PUSH
48269: LD_INT 1
48271: NEG
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 1
48279: PUSH
48280: LD_INT 0
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 1
48289: PUSH
48290: LD_INT 1
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 0
48299: PUSH
48300: LD_INT 1
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 1
48309: NEG
48310: PUSH
48311: LD_INT 0
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 1
48320: NEG
48321: PUSH
48322: LD_INT 1
48324: NEG
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 1
48332: NEG
48333: PUSH
48334: LD_INT 2
48336: NEG
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 0
48344: PUSH
48345: LD_INT 2
48347: NEG
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 1
48355: PUSH
48356: LD_INT 1
48358: NEG
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 2
48366: PUSH
48367: LD_INT 1
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 2
48376: PUSH
48377: LD_INT 2
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 1
48386: PUSH
48387: LD_INT 2
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 0
48396: PUSH
48397: LD_INT 2
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 1
48406: NEG
48407: PUSH
48408: LD_INT 1
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 2
48417: NEG
48418: PUSH
48419: LD_INT 1
48421: NEG
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 2
48429: NEG
48430: PUSH
48431: LD_INT 2
48433: NEG
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 2
48441: NEG
48442: PUSH
48443: LD_INT 3
48445: NEG
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 1
48453: NEG
48454: PUSH
48455: LD_INT 3
48457: NEG
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 0
48465: PUSH
48466: LD_INT 3
48468: NEG
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 1
48476: PUSH
48477: LD_INT 2
48479: NEG
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 3
48487: PUSH
48488: LD_INT 2
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 3
48497: PUSH
48498: LD_INT 3
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 2
48507: PUSH
48508: LD_INT 3
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 1
48517: PUSH
48518: LD_INT 3
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 0
48527: PUSH
48528: LD_INT 3
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 1
48537: NEG
48538: PUSH
48539: LD_INT 2
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 3
48548: NEG
48549: PUSH
48550: LD_INT 2
48552: NEG
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 3
48560: NEG
48561: PUSH
48562: LD_INT 3
48564: NEG
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48601: LD_ADDR_VAR 0 46
48605: PUSH
48606: LD_INT 0
48608: PUSH
48609: LD_INT 0
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 0
48618: PUSH
48619: LD_INT 1
48621: NEG
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 1
48629: PUSH
48630: LD_INT 0
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 1
48639: PUSH
48640: LD_INT 1
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 0
48649: PUSH
48650: LD_INT 1
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 1
48659: NEG
48660: PUSH
48661: LD_INT 0
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 1
48670: NEG
48671: PUSH
48672: LD_INT 1
48674: NEG
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 1
48682: NEG
48683: PUSH
48684: LD_INT 2
48686: NEG
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 0
48694: PUSH
48695: LD_INT 2
48697: NEG
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 1
48705: PUSH
48706: LD_INT 1
48708: NEG
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 2
48716: PUSH
48717: LD_INT 0
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 2
48726: PUSH
48727: LD_INT 1
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 1
48736: PUSH
48737: LD_INT 2
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 0
48746: PUSH
48747: LD_INT 2
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 1
48756: NEG
48757: PUSH
48758: LD_INT 1
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 2
48767: NEG
48768: PUSH
48769: LD_INT 0
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 2
48778: NEG
48779: PUSH
48780: LD_INT 1
48782: NEG
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 1
48790: NEG
48791: PUSH
48792: LD_INT 3
48794: NEG
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 0
48802: PUSH
48803: LD_INT 3
48805: NEG
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 1
48813: PUSH
48814: LD_INT 2
48816: NEG
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 2
48824: PUSH
48825: LD_INT 1
48827: NEG
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 3
48835: PUSH
48836: LD_INT 0
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 3
48845: PUSH
48846: LD_INT 1
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 1
48855: PUSH
48856: LD_INT 3
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 0
48865: PUSH
48866: LD_INT 3
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 1
48875: NEG
48876: PUSH
48877: LD_INT 2
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 2
48886: NEG
48887: PUSH
48888: LD_INT 1
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 3
48897: NEG
48898: PUSH
48899: LD_INT 0
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 3
48908: NEG
48909: PUSH
48910: LD_INT 1
48912: NEG
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48949: LD_ADDR_VAR 0 47
48953: PUSH
48954: LD_INT 0
48956: PUSH
48957: LD_INT 0
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 0
48966: PUSH
48967: LD_INT 1
48969: NEG
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 1
48977: PUSH
48978: LD_INT 0
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 1
48987: PUSH
48988: LD_INT 1
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 0
48997: PUSH
48998: LD_INT 1
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 1
49007: NEG
49008: PUSH
49009: LD_INT 0
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 1
49018: NEG
49019: PUSH
49020: LD_INT 1
49022: NEG
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 1
49030: NEG
49031: PUSH
49032: LD_INT 2
49034: NEG
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 0
49042: PUSH
49043: LD_INT 2
49045: NEG
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 1
49053: PUSH
49054: LD_INT 1
49056: NEG
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 2
49064: NEG
49065: PUSH
49066: LD_INT 1
49068: NEG
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 2
49076: NEG
49077: PUSH
49078: LD_INT 2
49080: NEG
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49100: LD_ADDR_VAR 0 48
49104: PUSH
49105: LD_INT 0
49107: PUSH
49108: LD_INT 0
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 0
49117: PUSH
49118: LD_INT 1
49120: NEG
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 1
49128: PUSH
49129: LD_INT 0
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 1
49138: PUSH
49139: LD_INT 1
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 0
49148: PUSH
49149: LD_INT 1
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 1
49158: NEG
49159: PUSH
49160: LD_INT 0
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 1
49169: NEG
49170: PUSH
49171: LD_INT 1
49173: NEG
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 1
49181: NEG
49182: PUSH
49183: LD_INT 2
49185: NEG
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 0
49193: PUSH
49194: LD_INT 2
49196: NEG
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 1
49204: PUSH
49205: LD_INT 1
49207: NEG
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 2
49215: PUSH
49216: LD_INT 0
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 2
49225: PUSH
49226: LD_INT 1
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49247: LD_ADDR_VAR 0 49
49251: PUSH
49252: LD_INT 0
49254: PUSH
49255: LD_INT 0
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 0
49264: PUSH
49265: LD_INT 1
49267: NEG
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 1
49275: PUSH
49276: LD_INT 0
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 1
49285: PUSH
49286: LD_INT 1
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 0
49295: PUSH
49296: LD_INT 1
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 1
49305: NEG
49306: PUSH
49307: LD_INT 0
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 1
49316: NEG
49317: PUSH
49318: LD_INT 1
49320: NEG
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 1
49328: PUSH
49329: LD_INT 1
49331: NEG
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 2
49339: PUSH
49340: LD_INT 0
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 2
49349: PUSH
49350: LD_INT 1
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 2
49359: PUSH
49360: LD_INT 2
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 1
49369: PUSH
49370: LD_INT 2
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49391: LD_ADDR_VAR 0 50
49395: PUSH
49396: LD_INT 0
49398: PUSH
49399: LD_INT 0
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 0
49408: PUSH
49409: LD_INT 1
49411: NEG
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 1
49419: PUSH
49420: LD_INT 0
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 1
49429: PUSH
49430: LD_INT 1
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 0
49439: PUSH
49440: LD_INT 1
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 1
49449: NEG
49450: PUSH
49451: LD_INT 0
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 1
49460: NEG
49461: PUSH
49462: LD_INT 1
49464: NEG
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 2
49472: PUSH
49473: LD_INT 1
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 2
49482: PUSH
49483: LD_INT 2
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 1
49492: PUSH
49493: LD_INT 2
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 0
49502: PUSH
49503: LD_INT 2
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 1
49512: NEG
49513: PUSH
49514: LD_INT 1
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49535: LD_ADDR_VAR 0 51
49539: PUSH
49540: LD_INT 0
49542: PUSH
49543: LD_INT 0
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 0
49552: PUSH
49553: LD_INT 1
49555: NEG
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 1
49563: PUSH
49564: LD_INT 0
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 1
49573: PUSH
49574: LD_INT 1
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 0
49583: PUSH
49584: LD_INT 1
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 1
49593: NEG
49594: PUSH
49595: LD_INT 0
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 1
49604: NEG
49605: PUSH
49606: LD_INT 1
49608: NEG
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 1
49616: PUSH
49617: LD_INT 2
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 0
49626: PUSH
49627: LD_INT 2
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 1
49636: NEG
49637: PUSH
49638: LD_INT 1
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 2
49647: NEG
49648: PUSH
49649: LD_INT 0
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 2
49658: NEG
49659: PUSH
49660: LD_INT 1
49662: NEG
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49682: LD_ADDR_VAR 0 52
49686: PUSH
49687: LD_INT 0
49689: PUSH
49690: LD_INT 0
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 0
49699: PUSH
49700: LD_INT 1
49702: NEG
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 1
49710: PUSH
49711: LD_INT 0
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 1
49720: PUSH
49721: LD_INT 1
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 0
49730: PUSH
49731: LD_INT 1
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 1
49740: NEG
49741: PUSH
49742: LD_INT 0
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 1
49751: NEG
49752: PUSH
49753: LD_INT 1
49755: NEG
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 1
49763: NEG
49764: PUSH
49765: LD_INT 2
49767: NEG
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 1
49775: NEG
49776: PUSH
49777: LD_INT 1
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 2
49786: NEG
49787: PUSH
49788: LD_INT 0
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 2
49797: NEG
49798: PUSH
49799: LD_INT 1
49801: NEG
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 2
49809: NEG
49810: PUSH
49811: LD_INT 2
49813: NEG
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49833: LD_ADDR_VAR 0 53
49837: PUSH
49838: LD_INT 0
49840: PUSH
49841: LD_INT 0
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 0
49850: PUSH
49851: LD_INT 1
49853: NEG
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 1
49861: PUSH
49862: LD_INT 0
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 1
49871: PUSH
49872: LD_INT 1
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 0
49881: PUSH
49882: LD_INT 1
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 1
49891: NEG
49892: PUSH
49893: LD_INT 0
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 1
49902: NEG
49903: PUSH
49904: LD_INT 1
49906: NEG
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 1
49914: NEG
49915: PUSH
49916: LD_INT 2
49918: NEG
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 0
49926: PUSH
49927: LD_INT 2
49929: NEG
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 1
49937: PUSH
49938: LD_INT 1
49940: NEG
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 2
49948: PUSH
49949: LD_INT 0
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 2
49958: PUSH
49959: LD_INT 1
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 2
49968: PUSH
49969: LD_INT 2
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 1
49978: PUSH
49979: LD_INT 2
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 0
49988: PUSH
49989: LD_INT 2
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 1
49998: NEG
49999: PUSH
50000: LD_INT 1
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 2
50009: NEG
50010: PUSH
50011: LD_INT 0
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 2
50020: NEG
50021: PUSH
50022: LD_INT 1
50024: NEG
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 2
50032: NEG
50033: PUSH
50034: LD_INT 2
50036: NEG
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50063: LD_ADDR_VAR 0 54
50067: PUSH
50068: LD_INT 0
50070: PUSH
50071: LD_INT 0
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 0
50080: PUSH
50081: LD_INT 1
50083: NEG
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 1
50091: PUSH
50092: LD_INT 0
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 1
50101: PUSH
50102: LD_INT 1
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 0
50111: PUSH
50112: LD_INT 1
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 1
50121: NEG
50122: PUSH
50123: LD_INT 0
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 1
50132: NEG
50133: PUSH
50134: LD_INT 1
50136: NEG
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 1
50144: NEG
50145: PUSH
50146: LD_INT 2
50148: NEG
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 0
50156: PUSH
50157: LD_INT 2
50159: NEG
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 1
50167: PUSH
50168: LD_INT 1
50170: NEG
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 2
50178: PUSH
50179: LD_INT 0
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 2
50188: PUSH
50189: LD_INT 1
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 2
50198: PUSH
50199: LD_INT 2
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 1
50208: PUSH
50209: LD_INT 2
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 0
50218: PUSH
50219: LD_INT 2
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 1
50228: NEG
50229: PUSH
50230: LD_INT 1
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 2
50239: NEG
50240: PUSH
50241: LD_INT 0
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 2
50250: NEG
50251: PUSH
50252: LD_INT 1
50254: NEG
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 2
50262: NEG
50263: PUSH
50264: LD_INT 2
50266: NEG
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50293: LD_ADDR_VAR 0 55
50297: PUSH
50298: LD_INT 0
50300: PUSH
50301: LD_INT 0
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 0
50310: PUSH
50311: LD_INT 1
50313: NEG
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 1
50321: PUSH
50322: LD_INT 0
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 1
50331: PUSH
50332: LD_INT 1
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 0
50341: PUSH
50342: LD_INT 1
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 1
50351: NEG
50352: PUSH
50353: LD_INT 0
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 1
50362: NEG
50363: PUSH
50364: LD_INT 1
50366: NEG
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 1
50374: NEG
50375: PUSH
50376: LD_INT 2
50378: NEG
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 0
50386: PUSH
50387: LD_INT 2
50389: NEG
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 1
50397: PUSH
50398: LD_INT 1
50400: NEG
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 2
50408: PUSH
50409: LD_INT 0
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 2
50418: PUSH
50419: LD_INT 1
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 2
50428: PUSH
50429: LD_INT 2
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 1
50438: PUSH
50439: LD_INT 2
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 0
50448: PUSH
50449: LD_INT 2
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 1
50458: NEG
50459: PUSH
50460: LD_INT 1
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 2
50469: NEG
50470: PUSH
50471: LD_INT 0
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 2
50480: NEG
50481: PUSH
50482: LD_INT 1
50484: NEG
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 2
50492: NEG
50493: PUSH
50494: LD_INT 2
50496: NEG
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50523: LD_ADDR_VAR 0 56
50527: PUSH
50528: LD_INT 0
50530: PUSH
50531: LD_INT 0
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 0
50540: PUSH
50541: LD_INT 1
50543: NEG
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 1
50551: PUSH
50552: LD_INT 0
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 1
50561: PUSH
50562: LD_INT 1
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 0
50571: PUSH
50572: LD_INT 1
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 1
50581: NEG
50582: PUSH
50583: LD_INT 0
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 1
50592: NEG
50593: PUSH
50594: LD_INT 1
50596: NEG
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 1
50604: NEG
50605: PUSH
50606: LD_INT 2
50608: NEG
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 0
50616: PUSH
50617: LD_INT 2
50619: NEG
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 1
50627: PUSH
50628: LD_INT 1
50630: NEG
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 2
50638: PUSH
50639: LD_INT 0
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 2
50648: PUSH
50649: LD_INT 1
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 2
50658: PUSH
50659: LD_INT 2
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 1
50668: PUSH
50669: LD_INT 2
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 0
50678: PUSH
50679: LD_INT 2
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 1
50688: NEG
50689: PUSH
50690: LD_INT 1
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 2
50699: NEG
50700: PUSH
50701: LD_INT 0
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 2
50710: NEG
50711: PUSH
50712: LD_INT 1
50714: NEG
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 2
50722: NEG
50723: PUSH
50724: LD_INT 2
50726: NEG
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50753: LD_ADDR_VAR 0 57
50757: PUSH
50758: LD_INT 0
50760: PUSH
50761: LD_INT 0
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 0
50770: PUSH
50771: LD_INT 1
50773: NEG
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 1
50781: PUSH
50782: LD_INT 0
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 1
50791: PUSH
50792: LD_INT 1
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 0
50801: PUSH
50802: LD_INT 1
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 1
50811: NEG
50812: PUSH
50813: LD_INT 0
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 1
50822: NEG
50823: PUSH
50824: LD_INT 1
50826: NEG
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 1
50834: NEG
50835: PUSH
50836: LD_INT 2
50838: NEG
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 0
50846: PUSH
50847: LD_INT 2
50849: NEG
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 1
50857: PUSH
50858: LD_INT 1
50860: NEG
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 2
50868: PUSH
50869: LD_INT 0
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 2
50878: PUSH
50879: LD_INT 1
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 2
50888: PUSH
50889: LD_INT 2
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 1
50898: PUSH
50899: LD_INT 2
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 0
50908: PUSH
50909: LD_INT 2
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 1
50918: NEG
50919: PUSH
50920: LD_INT 1
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 2
50929: NEG
50930: PUSH
50931: LD_INT 0
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 2
50940: NEG
50941: PUSH
50942: LD_INT 1
50944: NEG
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 2
50952: NEG
50953: PUSH
50954: LD_INT 2
50956: NEG
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50983: LD_ADDR_VAR 0 58
50987: PUSH
50988: LD_INT 0
50990: PUSH
50991: LD_INT 0
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 0
51000: PUSH
51001: LD_INT 1
51003: NEG
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 1
51011: PUSH
51012: LD_INT 0
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 1
51021: PUSH
51022: LD_INT 1
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 0
51031: PUSH
51032: LD_INT 1
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 1
51041: NEG
51042: PUSH
51043: LD_INT 0
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 1
51052: NEG
51053: PUSH
51054: LD_INT 1
51056: NEG
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 1
51064: NEG
51065: PUSH
51066: LD_INT 2
51068: NEG
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 0
51076: PUSH
51077: LD_INT 2
51079: NEG
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 1
51087: PUSH
51088: LD_INT 1
51090: NEG
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 2
51098: PUSH
51099: LD_INT 0
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 2
51108: PUSH
51109: LD_INT 1
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 2
51118: PUSH
51119: LD_INT 2
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 1
51128: PUSH
51129: LD_INT 2
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 0
51138: PUSH
51139: LD_INT 2
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 1
51148: NEG
51149: PUSH
51150: LD_INT 1
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 2
51159: NEG
51160: PUSH
51161: LD_INT 0
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 2
51170: NEG
51171: PUSH
51172: LD_INT 1
51174: NEG
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 2
51182: NEG
51183: PUSH
51184: LD_INT 2
51186: NEG
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51213: LD_ADDR_VAR 0 59
51217: PUSH
51218: LD_INT 0
51220: PUSH
51221: LD_INT 0
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 0
51230: PUSH
51231: LD_INT 1
51233: NEG
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 1
51241: PUSH
51242: LD_INT 0
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 1
51251: PUSH
51252: LD_INT 1
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 0
51261: PUSH
51262: LD_INT 1
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 1
51271: NEG
51272: PUSH
51273: LD_INT 0
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 1
51282: NEG
51283: PUSH
51284: LD_INT 1
51286: NEG
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51301: LD_ADDR_VAR 0 60
51305: PUSH
51306: LD_INT 0
51308: PUSH
51309: LD_INT 0
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 0
51318: PUSH
51319: LD_INT 1
51321: NEG
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 1
51329: PUSH
51330: LD_INT 0
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 1
51339: PUSH
51340: LD_INT 1
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 0
51349: PUSH
51350: LD_INT 1
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 1
51359: NEG
51360: PUSH
51361: LD_INT 0
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 1
51370: NEG
51371: PUSH
51372: LD_INT 1
51374: NEG
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51389: LD_ADDR_VAR 0 61
51393: PUSH
51394: LD_INT 0
51396: PUSH
51397: LD_INT 0
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 0
51406: PUSH
51407: LD_INT 1
51409: NEG
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 1
51417: PUSH
51418: LD_INT 0
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 1
51427: PUSH
51428: LD_INT 1
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 0
51437: PUSH
51438: LD_INT 1
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 1
51447: NEG
51448: PUSH
51449: LD_INT 0
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 1
51458: NEG
51459: PUSH
51460: LD_INT 1
51462: NEG
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51477: LD_ADDR_VAR 0 62
51481: PUSH
51482: LD_INT 0
51484: PUSH
51485: LD_INT 0
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 0
51494: PUSH
51495: LD_INT 1
51497: NEG
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 1
51505: PUSH
51506: LD_INT 0
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 1
51515: PUSH
51516: LD_INT 1
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 0
51525: PUSH
51526: LD_INT 1
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 1
51535: NEG
51536: PUSH
51537: LD_INT 0
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 1
51546: NEG
51547: PUSH
51548: LD_INT 1
51550: NEG
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51565: LD_ADDR_VAR 0 63
51569: PUSH
51570: LD_INT 0
51572: PUSH
51573: LD_INT 0
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 0
51582: PUSH
51583: LD_INT 1
51585: NEG
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 1
51593: PUSH
51594: LD_INT 0
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 1
51603: PUSH
51604: LD_INT 1
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 0
51613: PUSH
51614: LD_INT 1
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 1
51623: NEG
51624: PUSH
51625: LD_INT 0
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 1
51634: NEG
51635: PUSH
51636: LD_INT 1
51638: NEG
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51653: LD_ADDR_VAR 0 64
51657: PUSH
51658: LD_INT 0
51660: PUSH
51661: LD_INT 0
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 0
51670: PUSH
51671: LD_INT 1
51673: NEG
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 1
51681: PUSH
51682: LD_INT 0
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 1
51691: PUSH
51692: LD_INT 1
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 0
51701: PUSH
51702: LD_INT 1
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 1
51711: NEG
51712: PUSH
51713: LD_INT 0
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 1
51722: NEG
51723: PUSH
51724: LD_INT 1
51726: NEG
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: ST_TO_ADDR
// end ; 1 :
51741: GO 57638
51743: LD_INT 1
51745: DOUBLE
51746: EQUAL
51747: IFTRUE 51751
51749: GO 54374
51751: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51752: LD_ADDR_VAR 0 11
51756: PUSH
51757: LD_INT 1
51759: NEG
51760: PUSH
51761: LD_INT 3
51763: NEG
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 0
51771: PUSH
51772: LD_INT 3
51774: NEG
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 1
51782: PUSH
51783: LD_INT 2
51785: NEG
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: LIST
51795: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51796: LD_ADDR_VAR 0 12
51800: PUSH
51801: LD_INT 2
51803: PUSH
51804: LD_INT 1
51806: NEG
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 3
51814: PUSH
51815: LD_INT 0
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 3
51824: PUSH
51825: LD_INT 1
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: LIST
51836: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51837: LD_ADDR_VAR 0 13
51841: PUSH
51842: LD_INT 3
51844: PUSH
51845: LD_INT 2
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 3
51854: PUSH
51855: LD_INT 3
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 2
51864: PUSH
51865: LD_INT 3
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: LIST
51876: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51877: LD_ADDR_VAR 0 14
51881: PUSH
51882: LD_INT 1
51884: PUSH
51885: LD_INT 3
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 0
51894: PUSH
51895: LD_INT 3
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 1
51904: NEG
51905: PUSH
51906: LD_INT 2
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: LIST
51917: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51918: LD_ADDR_VAR 0 15
51922: PUSH
51923: LD_INT 2
51925: NEG
51926: PUSH
51927: LD_INT 1
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 3
51936: NEG
51937: PUSH
51938: LD_INT 0
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 3
51947: NEG
51948: PUSH
51949: LD_INT 1
51951: NEG
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: LIST
51961: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51962: LD_ADDR_VAR 0 16
51966: PUSH
51967: LD_INT 2
51969: NEG
51970: PUSH
51971: LD_INT 3
51973: NEG
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 3
51981: NEG
51982: PUSH
51983: LD_INT 2
51985: NEG
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 3
51993: NEG
51994: PUSH
51995: LD_INT 3
51997: NEG
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: LIST
52007: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52008: LD_ADDR_VAR 0 17
52012: PUSH
52013: LD_INT 1
52015: NEG
52016: PUSH
52017: LD_INT 3
52019: NEG
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 0
52027: PUSH
52028: LD_INT 3
52030: NEG
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 1
52038: PUSH
52039: LD_INT 2
52041: NEG
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: LIST
52051: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52052: LD_ADDR_VAR 0 18
52056: PUSH
52057: LD_INT 2
52059: PUSH
52060: LD_INT 1
52062: NEG
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 3
52070: PUSH
52071: LD_INT 0
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 3
52080: PUSH
52081: LD_INT 1
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: LIST
52092: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52093: LD_ADDR_VAR 0 19
52097: PUSH
52098: LD_INT 3
52100: PUSH
52101: LD_INT 2
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 3
52110: PUSH
52111: LD_INT 3
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 2
52120: PUSH
52121: LD_INT 3
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: LIST
52132: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52133: LD_ADDR_VAR 0 20
52137: PUSH
52138: LD_INT 1
52140: PUSH
52141: LD_INT 3
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 0
52150: PUSH
52151: LD_INT 3
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 1
52160: NEG
52161: PUSH
52162: LD_INT 2
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: LIST
52173: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52174: LD_ADDR_VAR 0 21
52178: PUSH
52179: LD_INT 2
52181: NEG
52182: PUSH
52183: LD_INT 1
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 3
52192: NEG
52193: PUSH
52194: LD_INT 0
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 3
52203: NEG
52204: PUSH
52205: LD_INT 1
52207: NEG
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: LIST
52217: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52218: LD_ADDR_VAR 0 22
52222: PUSH
52223: LD_INT 2
52225: NEG
52226: PUSH
52227: LD_INT 3
52229: NEG
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 3
52237: NEG
52238: PUSH
52239: LD_INT 2
52241: NEG
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 3
52249: NEG
52250: PUSH
52251: LD_INT 3
52253: NEG
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: LIST
52263: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52264: LD_ADDR_VAR 0 23
52268: PUSH
52269: LD_INT 0
52271: PUSH
52272: LD_INT 3
52274: NEG
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 1
52282: NEG
52283: PUSH
52284: LD_INT 4
52286: NEG
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 1
52294: PUSH
52295: LD_INT 3
52297: NEG
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: LIST
52307: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52308: LD_ADDR_VAR 0 24
52312: PUSH
52313: LD_INT 3
52315: PUSH
52316: LD_INT 0
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 3
52325: PUSH
52326: LD_INT 1
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 4
52336: PUSH
52337: LD_INT 1
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: LIST
52348: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52349: LD_ADDR_VAR 0 25
52353: PUSH
52354: LD_INT 3
52356: PUSH
52357: LD_INT 3
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 4
52366: PUSH
52367: LD_INT 3
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 3
52376: PUSH
52377: LD_INT 4
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: LIST
52388: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52389: LD_ADDR_VAR 0 26
52393: PUSH
52394: LD_INT 0
52396: PUSH
52397: LD_INT 3
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 1
52406: PUSH
52407: LD_INT 4
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 1
52416: NEG
52417: PUSH
52418: LD_INT 3
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: LIST
52429: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52430: LD_ADDR_VAR 0 27
52434: PUSH
52435: LD_INT 3
52437: NEG
52438: PUSH
52439: LD_INT 0
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 3
52448: NEG
52449: PUSH
52450: LD_INT 1
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 4
52459: NEG
52460: PUSH
52461: LD_INT 1
52463: NEG
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: LIST
52473: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52474: LD_ADDR_VAR 0 28
52478: PUSH
52479: LD_INT 3
52481: NEG
52482: PUSH
52483: LD_INT 3
52485: NEG
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 3
52493: NEG
52494: PUSH
52495: LD_INT 4
52497: NEG
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 4
52505: NEG
52506: PUSH
52507: LD_INT 3
52509: NEG
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: LIST
52519: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52520: LD_ADDR_VAR 0 29
52524: PUSH
52525: LD_INT 1
52527: NEG
52528: PUSH
52529: LD_INT 3
52531: NEG
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 0
52539: PUSH
52540: LD_INT 3
52542: NEG
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 1
52550: PUSH
52551: LD_INT 2
52553: NEG
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 1
52561: NEG
52562: PUSH
52563: LD_INT 4
52565: NEG
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 0
52573: PUSH
52574: LD_INT 4
52576: NEG
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 1
52584: PUSH
52585: LD_INT 3
52587: NEG
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 1
52595: NEG
52596: PUSH
52597: LD_INT 5
52599: NEG
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 0
52607: PUSH
52608: LD_INT 5
52610: NEG
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 1
52618: PUSH
52619: LD_INT 4
52621: NEG
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 1
52629: NEG
52630: PUSH
52631: LD_INT 6
52633: NEG
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 0
52641: PUSH
52642: LD_INT 6
52644: NEG
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 1
52652: PUSH
52653: LD_INT 5
52655: NEG
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52675: LD_ADDR_VAR 0 30
52679: PUSH
52680: LD_INT 2
52682: PUSH
52683: LD_INT 1
52685: NEG
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 3
52693: PUSH
52694: LD_INT 0
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 3
52703: PUSH
52704: LD_INT 1
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 3
52713: PUSH
52714: LD_INT 1
52716: NEG
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 4
52724: PUSH
52725: LD_INT 0
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 4
52734: PUSH
52735: LD_INT 1
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 4
52744: PUSH
52745: LD_INT 1
52747: NEG
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 5
52755: PUSH
52756: LD_INT 0
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 5
52765: PUSH
52766: LD_INT 1
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 5
52775: PUSH
52776: LD_INT 1
52778: NEG
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 6
52786: PUSH
52787: LD_INT 0
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 6
52796: PUSH
52797: LD_INT 1
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52818: LD_ADDR_VAR 0 31
52822: PUSH
52823: LD_INT 3
52825: PUSH
52826: LD_INT 2
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 3
52835: PUSH
52836: LD_INT 3
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 2
52845: PUSH
52846: LD_INT 3
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 4
52855: PUSH
52856: LD_INT 3
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 4
52865: PUSH
52866: LD_INT 4
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 3
52875: PUSH
52876: LD_INT 4
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 5
52885: PUSH
52886: LD_INT 4
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 5
52895: PUSH
52896: LD_INT 5
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 4
52905: PUSH
52906: LD_INT 5
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 6
52915: PUSH
52916: LD_INT 5
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 6
52925: PUSH
52926: LD_INT 6
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 5
52935: PUSH
52936: LD_INT 6
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52957: LD_ADDR_VAR 0 32
52961: PUSH
52962: LD_INT 1
52964: PUSH
52965: LD_INT 3
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 0
52974: PUSH
52975: LD_INT 3
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 1
52984: NEG
52985: PUSH
52986: LD_INT 2
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 1
52995: PUSH
52996: LD_INT 4
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 0
53005: PUSH
53006: LD_INT 4
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 1
53015: NEG
53016: PUSH
53017: LD_INT 3
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 1
53026: PUSH
53027: LD_INT 5
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 0
53036: PUSH
53037: LD_INT 5
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 1
53046: NEG
53047: PUSH
53048: LD_INT 4
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 1
53057: PUSH
53058: LD_INT 6
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 0
53067: PUSH
53068: LD_INT 6
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 1
53077: NEG
53078: PUSH
53079: LD_INT 5
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53100: LD_ADDR_VAR 0 33
53104: PUSH
53105: LD_INT 2
53107: NEG
53108: PUSH
53109: LD_INT 1
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 3
53118: NEG
53119: PUSH
53120: LD_INT 0
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 3
53129: NEG
53130: PUSH
53131: LD_INT 1
53133: NEG
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 3
53141: NEG
53142: PUSH
53143: LD_INT 1
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 4
53152: NEG
53153: PUSH
53154: LD_INT 0
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 4
53163: NEG
53164: PUSH
53165: LD_INT 1
53167: NEG
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 4
53175: NEG
53176: PUSH
53177: LD_INT 1
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 5
53186: NEG
53187: PUSH
53188: LD_INT 0
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 5
53197: NEG
53198: PUSH
53199: LD_INT 1
53201: NEG
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 5
53209: NEG
53210: PUSH
53211: LD_INT 1
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 6
53220: NEG
53221: PUSH
53222: LD_INT 0
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 6
53231: NEG
53232: PUSH
53233: LD_INT 1
53235: NEG
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53255: LD_ADDR_VAR 0 34
53259: PUSH
53260: LD_INT 2
53262: NEG
53263: PUSH
53264: LD_INT 3
53266: NEG
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 3
53274: NEG
53275: PUSH
53276: LD_INT 2
53278: NEG
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 3
53286: NEG
53287: PUSH
53288: LD_INT 3
53290: NEG
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 3
53298: NEG
53299: PUSH
53300: LD_INT 4
53302: NEG
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 4
53310: NEG
53311: PUSH
53312: LD_INT 3
53314: NEG
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 4
53322: NEG
53323: PUSH
53324: LD_INT 4
53326: NEG
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 4
53334: NEG
53335: PUSH
53336: LD_INT 5
53338: NEG
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 5
53346: NEG
53347: PUSH
53348: LD_INT 4
53350: NEG
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 5
53358: NEG
53359: PUSH
53360: LD_INT 5
53362: NEG
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 5
53370: NEG
53371: PUSH
53372: LD_INT 6
53374: NEG
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 6
53382: NEG
53383: PUSH
53384: LD_INT 5
53386: NEG
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 6
53394: NEG
53395: PUSH
53396: LD_INT 6
53398: NEG
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53418: LD_ADDR_VAR 0 41
53422: PUSH
53423: LD_INT 0
53425: PUSH
53426: LD_INT 2
53428: NEG
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 1
53436: NEG
53437: PUSH
53438: LD_INT 3
53440: NEG
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 1
53448: PUSH
53449: LD_INT 2
53451: NEG
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: LIST
53461: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53462: LD_ADDR_VAR 0 42
53466: PUSH
53467: LD_INT 2
53469: PUSH
53470: LD_INT 0
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 2
53479: PUSH
53480: LD_INT 1
53482: NEG
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 3
53490: PUSH
53491: LD_INT 1
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: LIST
53502: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53503: LD_ADDR_VAR 0 43
53507: PUSH
53508: LD_INT 2
53510: PUSH
53511: LD_INT 2
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 3
53520: PUSH
53521: LD_INT 2
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 2
53530: PUSH
53531: LD_INT 3
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: LIST
53542: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53543: LD_ADDR_VAR 0 44
53547: PUSH
53548: LD_INT 0
53550: PUSH
53551: LD_INT 2
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 1
53560: PUSH
53561: LD_INT 3
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 1
53570: NEG
53571: PUSH
53572: LD_INT 2
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: LIST
53583: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53584: LD_ADDR_VAR 0 45
53588: PUSH
53589: LD_INT 2
53591: NEG
53592: PUSH
53593: LD_INT 0
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 2
53602: NEG
53603: PUSH
53604: LD_INT 1
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 3
53613: NEG
53614: PUSH
53615: LD_INT 1
53617: NEG
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: LIST
53627: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53628: LD_ADDR_VAR 0 46
53632: PUSH
53633: LD_INT 2
53635: NEG
53636: PUSH
53637: LD_INT 2
53639: NEG
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 2
53647: NEG
53648: PUSH
53649: LD_INT 3
53651: NEG
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 3
53659: NEG
53660: PUSH
53661: LD_INT 2
53663: NEG
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: LIST
53673: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53674: LD_ADDR_VAR 0 47
53678: PUSH
53679: LD_INT 2
53681: NEG
53682: PUSH
53683: LD_INT 3
53685: NEG
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 1
53693: NEG
53694: PUSH
53695: LD_INT 3
53697: NEG
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53707: LD_ADDR_VAR 0 48
53711: PUSH
53712: LD_INT 1
53714: PUSH
53715: LD_INT 2
53717: NEG
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 2
53725: PUSH
53726: LD_INT 1
53728: NEG
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53738: LD_ADDR_VAR 0 49
53742: PUSH
53743: LD_INT 3
53745: PUSH
53746: LD_INT 1
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 3
53755: PUSH
53756: LD_INT 2
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53767: LD_ADDR_VAR 0 50
53771: PUSH
53772: LD_INT 2
53774: PUSH
53775: LD_INT 3
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 1
53784: PUSH
53785: LD_INT 3
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53796: LD_ADDR_VAR 0 51
53800: PUSH
53801: LD_INT 1
53803: NEG
53804: PUSH
53805: LD_INT 2
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 2
53814: NEG
53815: PUSH
53816: LD_INT 1
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53827: LD_ADDR_VAR 0 52
53831: PUSH
53832: LD_INT 3
53834: NEG
53835: PUSH
53836: LD_INT 1
53838: NEG
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 3
53846: NEG
53847: PUSH
53848: LD_INT 2
53850: NEG
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53860: LD_ADDR_VAR 0 53
53864: PUSH
53865: LD_INT 1
53867: NEG
53868: PUSH
53869: LD_INT 3
53871: NEG
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 0
53879: PUSH
53880: LD_INT 3
53882: NEG
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 1
53890: PUSH
53891: LD_INT 2
53893: NEG
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: LIST
53903: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53904: LD_ADDR_VAR 0 54
53908: PUSH
53909: LD_INT 2
53911: PUSH
53912: LD_INT 1
53914: NEG
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 3
53922: PUSH
53923: LD_INT 0
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 3
53932: PUSH
53933: LD_INT 1
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: LIST
53944: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53945: LD_ADDR_VAR 0 55
53949: PUSH
53950: LD_INT 3
53952: PUSH
53953: LD_INT 2
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 3
53962: PUSH
53963: LD_INT 3
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 2
53972: PUSH
53973: LD_INT 3
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: LIST
53984: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53985: LD_ADDR_VAR 0 56
53989: PUSH
53990: LD_INT 1
53992: PUSH
53993: LD_INT 3
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 0
54002: PUSH
54003: LD_INT 3
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 1
54012: NEG
54013: PUSH
54014: LD_INT 2
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: LIST
54025: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54026: LD_ADDR_VAR 0 57
54030: PUSH
54031: LD_INT 2
54033: NEG
54034: PUSH
54035: LD_INT 1
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 3
54044: NEG
54045: PUSH
54046: LD_INT 0
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 3
54055: NEG
54056: PUSH
54057: LD_INT 1
54059: NEG
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: LIST
54069: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54070: LD_ADDR_VAR 0 58
54074: PUSH
54075: LD_INT 2
54077: NEG
54078: PUSH
54079: LD_INT 3
54081: NEG
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 3
54089: NEG
54090: PUSH
54091: LD_INT 2
54093: NEG
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 3
54101: NEG
54102: PUSH
54103: LD_INT 3
54105: NEG
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: LIST
54115: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54116: LD_ADDR_VAR 0 59
54120: PUSH
54121: LD_INT 1
54123: NEG
54124: PUSH
54125: LD_INT 2
54127: NEG
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 0
54135: PUSH
54136: LD_INT 2
54138: NEG
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 1
54146: PUSH
54147: LD_INT 1
54149: NEG
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: LIST
54159: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54160: LD_ADDR_VAR 0 60
54164: PUSH
54165: LD_INT 1
54167: PUSH
54168: LD_INT 1
54170: NEG
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 2
54178: PUSH
54179: LD_INT 0
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 2
54188: PUSH
54189: LD_INT 1
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: LIST
54200: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54201: LD_ADDR_VAR 0 61
54205: PUSH
54206: LD_INT 2
54208: PUSH
54209: LD_INT 1
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 2
54218: PUSH
54219: LD_INT 2
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 1
54228: PUSH
54229: LD_INT 2
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: LIST
54240: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54241: LD_ADDR_VAR 0 62
54245: PUSH
54246: LD_INT 1
54248: PUSH
54249: LD_INT 2
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 0
54258: PUSH
54259: LD_INT 2
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 1
54268: NEG
54269: PUSH
54270: LD_INT 1
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: LIST
54281: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54282: LD_ADDR_VAR 0 63
54286: PUSH
54287: LD_INT 1
54289: NEG
54290: PUSH
54291: LD_INT 1
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 2
54300: NEG
54301: PUSH
54302: LD_INT 0
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 2
54311: NEG
54312: PUSH
54313: LD_INT 1
54315: NEG
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: LIST
54325: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54326: LD_ADDR_VAR 0 64
54330: PUSH
54331: LD_INT 1
54333: NEG
54334: PUSH
54335: LD_INT 2
54337: NEG
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 2
54345: NEG
54346: PUSH
54347: LD_INT 1
54349: NEG
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 2
54357: NEG
54358: PUSH
54359: LD_INT 2
54361: NEG
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: LIST
54371: ST_TO_ADDR
// end ; 2 :
54372: GO 57638
54374: LD_INT 2
54376: DOUBLE
54377: EQUAL
54378: IFTRUE 54382
54380: GO 57637
54382: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54383: LD_ADDR_VAR 0 29
54387: PUSH
54388: LD_INT 4
54390: PUSH
54391: LD_INT 0
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 4
54400: PUSH
54401: LD_INT 1
54403: NEG
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 5
54411: PUSH
54412: LD_INT 0
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 5
54421: PUSH
54422: LD_INT 1
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 4
54431: PUSH
54432: LD_INT 1
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 3
54441: PUSH
54442: LD_INT 0
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 3
54451: PUSH
54452: LD_INT 1
54454: NEG
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 3
54462: PUSH
54463: LD_INT 2
54465: NEG
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 5
54473: PUSH
54474: LD_INT 2
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 3
54483: PUSH
54484: LD_INT 3
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 3
54493: PUSH
54494: LD_INT 2
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 4
54503: PUSH
54504: LD_INT 3
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 4
54513: PUSH
54514: LD_INT 4
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 3
54523: PUSH
54524: LD_INT 4
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 2
54533: PUSH
54534: LD_INT 3
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 2
54543: PUSH
54544: LD_INT 2
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 4
54553: PUSH
54554: LD_INT 2
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 2
54563: PUSH
54564: LD_INT 4
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 0
54573: PUSH
54574: LD_INT 4
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 0
54583: PUSH
54584: LD_INT 3
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 1
54593: PUSH
54594: LD_INT 4
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 1
54603: PUSH
54604: LD_INT 5
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 0
54613: PUSH
54614: LD_INT 5
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 1
54623: NEG
54624: PUSH
54625: LD_INT 4
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 1
54634: NEG
54635: PUSH
54636: LD_INT 3
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 2
54645: PUSH
54646: LD_INT 5
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 2
54655: NEG
54656: PUSH
54657: LD_INT 3
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 3
54666: NEG
54667: PUSH
54668: LD_INT 0
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 3
54677: NEG
54678: PUSH
54679: LD_INT 1
54681: NEG
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 2
54689: NEG
54690: PUSH
54691: LD_INT 0
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 2
54700: NEG
54701: PUSH
54702: LD_INT 1
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 3
54711: NEG
54712: PUSH
54713: LD_INT 1
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 4
54722: NEG
54723: PUSH
54724: LD_INT 0
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 4
54733: NEG
54734: PUSH
54735: LD_INT 1
54737: NEG
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 4
54745: NEG
54746: PUSH
54747: LD_INT 2
54749: NEG
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 2
54757: NEG
54758: PUSH
54759: LD_INT 2
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 4
54768: NEG
54769: PUSH
54770: LD_INT 4
54772: NEG
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 4
54780: NEG
54781: PUSH
54782: LD_INT 5
54784: NEG
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 3
54792: NEG
54793: PUSH
54794: LD_INT 4
54796: NEG
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 3
54804: NEG
54805: PUSH
54806: LD_INT 3
54808: NEG
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 4
54816: NEG
54817: PUSH
54818: LD_INT 3
54820: NEG
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 5
54828: NEG
54829: PUSH
54830: LD_INT 4
54832: NEG
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 5
54840: NEG
54841: PUSH
54842: LD_INT 5
54844: NEG
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 3
54852: NEG
54853: PUSH
54854: LD_INT 5
54856: NEG
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 5
54864: NEG
54865: PUSH
54866: LD_INT 3
54868: NEG
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54921: LD_ADDR_VAR 0 30
54925: PUSH
54926: LD_INT 4
54928: PUSH
54929: LD_INT 4
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 4
54938: PUSH
54939: LD_INT 3
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 5
54948: PUSH
54949: LD_INT 4
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 5
54958: PUSH
54959: LD_INT 5
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 4
54968: PUSH
54969: LD_INT 5
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 3
54978: PUSH
54979: LD_INT 4
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 3
54988: PUSH
54989: LD_INT 3
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 5
54998: PUSH
54999: LD_INT 3
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 3
55008: PUSH
55009: LD_INT 5
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 0
55018: PUSH
55019: LD_INT 3
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 0
55028: PUSH
55029: LD_INT 2
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 1
55038: PUSH
55039: LD_INT 3
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 1
55048: PUSH
55049: LD_INT 4
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 0
55058: PUSH
55059: LD_INT 4
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 1
55068: NEG
55069: PUSH
55070: LD_INT 3
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 1
55079: NEG
55080: PUSH
55081: LD_INT 2
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 2
55090: PUSH
55091: LD_INT 4
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 2
55100: NEG
55101: PUSH
55102: LD_INT 2
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 4
55111: NEG
55112: PUSH
55113: LD_INT 0
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 4
55122: NEG
55123: PUSH
55124: LD_INT 1
55126: NEG
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 3
55134: NEG
55135: PUSH
55136: LD_INT 0
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 3
55145: NEG
55146: PUSH
55147: LD_INT 1
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 4
55156: NEG
55157: PUSH
55158: LD_INT 1
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 5
55167: NEG
55168: PUSH
55169: LD_INT 0
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 5
55178: NEG
55179: PUSH
55180: LD_INT 1
55182: NEG
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 5
55190: NEG
55191: PUSH
55192: LD_INT 2
55194: NEG
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 3
55202: NEG
55203: PUSH
55204: LD_INT 2
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 3
55213: NEG
55214: PUSH
55215: LD_INT 3
55217: NEG
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 3
55225: NEG
55226: PUSH
55227: LD_INT 4
55229: NEG
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 2
55237: NEG
55238: PUSH
55239: LD_INT 3
55241: NEG
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 2
55249: NEG
55250: PUSH
55251: LD_INT 2
55253: NEG
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 3
55261: NEG
55262: PUSH
55263: LD_INT 2
55265: NEG
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 4
55273: NEG
55274: PUSH
55275: LD_INT 3
55277: NEG
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 4
55285: NEG
55286: PUSH
55287: LD_INT 4
55289: NEG
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 2
55297: NEG
55298: PUSH
55299: LD_INT 4
55301: NEG
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 4
55309: NEG
55310: PUSH
55311: LD_INT 2
55313: NEG
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 0
55321: PUSH
55322: LD_INT 4
55324: NEG
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 0
55332: PUSH
55333: LD_INT 5
55335: NEG
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 1
55343: PUSH
55344: LD_INT 4
55346: NEG
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 1
55354: PUSH
55355: LD_INT 3
55357: NEG
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 0
55365: PUSH
55366: LD_INT 3
55368: NEG
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 1
55376: NEG
55377: PUSH
55378: LD_INT 4
55380: NEG
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 1
55388: NEG
55389: PUSH
55390: LD_INT 5
55392: NEG
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 2
55400: PUSH
55401: LD_INT 3
55403: NEG
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 2
55411: NEG
55412: PUSH
55413: LD_INT 5
55415: NEG
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55468: LD_ADDR_VAR 0 31
55472: PUSH
55473: LD_INT 0
55475: PUSH
55476: LD_INT 4
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 0
55485: PUSH
55486: LD_INT 3
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 1
55495: PUSH
55496: LD_INT 4
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 1
55505: PUSH
55506: LD_INT 5
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 0
55515: PUSH
55516: LD_INT 5
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 1
55525: NEG
55526: PUSH
55527: LD_INT 4
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 1
55536: NEG
55537: PUSH
55538: LD_INT 3
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 2
55547: PUSH
55548: LD_INT 5
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 2
55557: NEG
55558: PUSH
55559: LD_INT 3
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 3
55568: NEG
55569: PUSH
55570: LD_INT 0
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 3
55579: NEG
55580: PUSH
55581: LD_INT 1
55583: NEG
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 2
55591: NEG
55592: PUSH
55593: LD_INT 0
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 2
55602: NEG
55603: PUSH
55604: LD_INT 1
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 3
55613: NEG
55614: PUSH
55615: LD_INT 1
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 4
55624: NEG
55625: PUSH
55626: LD_INT 0
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 4
55635: NEG
55636: PUSH
55637: LD_INT 1
55639: NEG
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 4
55647: NEG
55648: PUSH
55649: LD_INT 2
55651: NEG
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 2
55659: NEG
55660: PUSH
55661: LD_INT 2
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 4
55670: NEG
55671: PUSH
55672: LD_INT 4
55674: NEG
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 4
55682: NEG
55683: PUSH
55684: LD_INT 5
55686: NEG
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 3
55694: NEG
55695: PUSH
55696: LD_INT 4
55698: NEG
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 3
55706: NEG
55707: PUSH
55708: LD_INT 3
55710: NEG
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 4
55718: NEG
55719: PUSH
55720: LD_INT 3
55722: NEG
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 5
55730: NEG
55731: PUSH
55732: LD_INT 4
55734: NEG
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 5
55742: NEG
55743: PUSH
55744: LD_INT 5
55746: NEG
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 3
55754: NEG
55755: PUSH
55756: LD_INT 5
55758: NEG
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 5
55766: NEG
55767: PUSH
55768: LD_INT 3
55770: NEG
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 0
55778: PUSH
55779: LD_INT 3
55781: NEG
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 0
55789: PUSH
55790: LD_INT 4
55792: NEG
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 1
55800: PUSH
55801: LD_INT 3
55803: NEG
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 1
55811: PUSH
55812: LD_INT 2
55814: NEG
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 0
55822: PUSH
55823: LD_INT 2
55825: NEG
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 1
55833: NEG
55834: PUSH
55835: LD_INT 3
55837: NEG
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 1
55845: NEG
55846: PUSH
55847: LD_INT 4
55849: NEG
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 2
55857: PUSH
55858: LD_INT 2
55860: NEG
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 2
55868: NEG
55869: PUSH
55870: LD_INT 4
55872: NEG
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 4
55880: PUSH
55881: LD_INT 0
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 4
55890: PUSH
55891: LD_INT 1
55893: NEG
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 5
55901: PUSH
55902: LD_INT 0
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 5
55911: PUSH
55912: LD_INT 1
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 4
55921: PUSH
55922: LD_INT 1
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 3
55931: PUSH
55932: LD_INT 0
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 3
55941: PUSH
55942: LD_INT 1
55944: NEG
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 3
55952: PUSH
55953: LD_INT 2
55955: NEG
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 5
55963: PUSH
55964: LD_INT 2
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56018: LD_ADDR_VAR 0 32
56022: PUSH
56023: LD_INT 4
56025: NEG
56026: PUSH
56027: LD_INT 0
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 4
56036: NEG
56037: PUSH
56038: LD_INT 1
56040: NEG
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 3
56048: NEG
56049: PUSH
56050: LD_INT 0
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 3
56059: NEG
56060: PUSH
56061: LD_INT 1
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 4
56070: NEG
56071: PUSH
56072: LD_INT 1
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 5
56081: NEG
56082: PUSH
56083: LD_INT 0
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 5
56092: NEG
56093: PUSH
56094: LD_INT 1
56096: NEG
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 5
56104: NEG
56105: PUSH
56106: LD_INT 2
56108: NEG
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 3
56116: NEG
56117: PUSH
56118: LD_INT 2
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 3
56127: NEG
56128: PUSH
56129: LD_INT 3
56131: NEG
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 3
56139: NEG
56140: PUSH
56141: LD_INT 4
56143: NEG
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 2
56151: NEG
56152: PUSH
56153: LD_INT 3
56155: NEG
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 2
56163: NEG
56164: PUSH
56165: LD_INT 2
56167: NEG
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 3
56175: NEG
56176: PUSH
56177: LD_INT 2
56179: NEG
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 4
56187: NEG
56188: PUSH
56189: LD_INT 3
56191: NEG
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 4
56199: NEG
56200: PUSH
56201: LD_INT 4
56203: NEG
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 2
56211: NEG
56212: PUSH
56213: LD_INT 4
56215: NEG
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 4
56223: NEG
56224: PUSH
56225: LD_INT 2
56227: NEG
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 0
56235: PUSH
56236: LD_INT 4
56238: NEG
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 0
56246: PUSH
56247: LD_INT 5
56249: NEG
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 1
56257: PUSH
56258: LD_INT 4
56260: NEG
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 1
56268: PUSH
56269: LD_INT 3
56271: NEG
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 0
56279: PUSH
56280: LD_INT 3
56282: NEG
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 1
56290: NEG
56291: PUSH
56292: LD_INT 4
56294: NEG
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 1
56302: NEG
56303: PUSH
56304: LD_INT 5
56306: NEG
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 2
56314: PUSH
56315: LD_INT 3
56317: NEG
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 2
56325: NEG
56326: PUSH
56327: LD_INT 5
56329: NEG
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 3
56337: PUSH
56338: LD_INT 0
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 3
56347: PUSH
56348: LD_INT 1
56350: NEG
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 4
56358: PUSH
56359: LD_INT 0
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 4
56368: PUSH
56369: LD_INT 1
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 3
56378: PUSH
56379: LD_INT 1
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 2
56388: PUSH
56389: LD_INT 0
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 2
56398: PUSH
56399: LD_INT 1
56401: NEG
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 2
56409: PUSH
56410: LD_INT 2
56412: NEG
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 4
56420: PUSH
56421: LD_INT 2
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 4
56430: PUSH
56431: LD_INT 4
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 4
56440: PUSH
56441: LD_INT 3
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 5
56450: PUSH
56451: LD_INT 4
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 5
56460: PUSH
56461: LD_INT 5
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 4
56470: PUSH
56471: LD_INT 5
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 3
56480: PUSH
56481: LD_INT 4
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 3
56490: PUSH
56491: LD_INT 3
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 5
56500: PUSH
56501: LD_INT 3
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 3
56510: PUSH
56511: LD_INT 5
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56565: LD_ADDR_VAR 0 33
56569: PUSH
56570: LD_INT 4
56572: NEG
56573: PUSH
56574: LD_INT 4
56576: NEG
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 4
56584: NEG
56585: PUSH
56586: LD_INT 5
56588: NEG
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 3
56596: NEG
56597: PUSH
56598: LD_INT 4
56600: NEG
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 3
56608: NEG
56609: PUSH
56610: LD_INT 3
56612: NEG
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 4
56620: NEG
56621: PUSH
56622: LD_INT 3
56624: NEG
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 5
56632: NEG
56633: PUSH
56634: LD_INT 4
56636: NEG
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 5
56644: NEG
56645: PUSH
56646: LD_INT 5
56648: NEG
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 3
56656: NEG
56657: PUSH
56658: LD_INT 5
56660: NEG
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 5
56668: NEG
56669: PUSH
56670: LD_INT 3
56672: NEG
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 0
56680: PUSH
56681: LD_INT 3
56683: NEG
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 0
56691: PUSH
56692: LD_INT 4
56694: NEG
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 1
56702: PUSH
56703: LD_INT 3
56705: NEG
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 1
56713: PUSH
56714: LD_INT 2
56716: NEG
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 0
56724: PUSH
56725: LD_INT 2
56727: NEG
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 1
56735: NEG
56736: PUSH
56737: LD_INT 3
56739: NEG
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 1
56747: NEG
56748: PUSH
56749: LD_INT 4
56751: NEG
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 2
56759: PUSH
56760: LD_INT 2
56762: NEG
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 2
56770: NEG
56771: PUSH
56772: LD_INT 4
56774: NEG
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 4
56782: PUSH
56783: LD_INT 0
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 4
56792: PUSH
56793: LD_INT 1
56795: NEG
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 5
56803: PUSH
56804: LD_INT 0
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 5
56813: PUSH
56814: LD_INT 1
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 4
56823: PUSH
56824: LD_INT 1
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 3
56833: PUSH
56834: LD_INT 0
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 3
56843: PUSH
56844: LD_INT 1
56846: NEG
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 3
56854: PUSH
56855: LD_INT 2
56857: NEG
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 5
56865: PUSH
56866: LD_INT 2
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 3
56875: PUSH
56876: LD_INT 3
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 3
56885: PUSH
56886: LD_INT 2
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 4
56895: PUSH
56896: LD_INT 3
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 4
56905: PUSH
56906: LD_INT 4
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 3
56915: PUSH
56916: LD_INT 4
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 2
56925: PUSH
56926: LD_INT 3
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 2
56935: PUSH
56936: LD_INT 2
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 4
56945: PUSH
56946: LD_INT 2
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 2
56955: PUSH
56956: LD_INT 4
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 0
56965: PUSH
56966: LD_INT 4
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 0
56975: PUSH
56976: LD_INT 3
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 1
56985: PUSH
56986: LD_INT 4
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 1
56995: PUSH
56996: LD_INT 5
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 0
57005: PUSH
57006: LD_INT 5
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 1
57015: NEG
57016: PUSH
57017: LD_INT 4
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 1
57026: NEG
57027: PUSH
57028: LD_INT 3
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 2
57037: PUSH
57038: LD_INT 5
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 2
57047: NEG
57048: PUSH
57049: LD_INT 3
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57103: LD_ADDR_VAR 0 34
57107: PUSH
57108: LD_INT 0
57110: PUSH
57111: LD_INT 4
57113: NEG
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 0
57121: PUSH
57122: LD_INT 5
57124: NEG
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 1
57132: PUSH
57133: LD_INT 4
57135: NEG
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 1
57143: PUSH
57144: LD_INT 3
57146: NEG
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 0
57154: PUSH
57155: LD_INT 3
57157: NEG
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 1
57165: NEG
57166: PUSH
57167: LD_INT 4
57169: NEG
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 1
57177: NEG
57178: PUSH
57179: LD_INT 5
57181: NEG
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 2
57189: PUSH
57190: LD_INT 3
57192: NEG
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 2
57200: NEG
57201: PUSH
57202: LD_INT 5
57204: NEG
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 3
57212: PUSH
57213: LD_INT 0
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 3
57222: PUSH
57223: LD_INT 1
57225: NEG
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 4
57233: PUSH
57234: LD_INT 0
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 4
57243: PUSH
57244: LD_INT 1
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 3
57253: PUSH
57254: LD_INT 1
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 2
57263: PUSH
57264: LD_INT 0
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 2
57273: PUSH
57274: LD_INT 1
57276: NEG
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 2
57284: PUSH
57285: LD_INT 2
57287: NEG
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 4
57295: PUSH
57296: LD_INT 2
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 4
57305: PUSH
57306: LD_INT 4
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 4
57315: PUSH
57316: LD_INT 3
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 5
57325: PUSH
57326: LD_INT 4
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 5
57335: PUSH
57336: LD_INT 5
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 4
57345: PUSH
57346: LD_INT 5
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 3
57355: PUSH
57356: LD_INT 4
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 3
57365: PUSH
57366: LD_INT 3
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 5
57375: PUSH
57376: LD_INT 3
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 3
57385: PUSH
57386: LD_INT 5
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 0
57395: PUSH
57396: LD_INT 3
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 0
57405: PUSH
57406: LD_INT 2
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 1
57415: PUSH
57416: LD_INT 3
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 1
57425: PUSH
57426: LD_INT 4
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 0
57435: PUSH
57436: LD_INT 4
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 1
57445: NEG
57446: PUSH
57447: LD_INT 3
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 1
57456: NEG
57457: PUSH
57458: LD_INT 2
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 2
57467: PUSH
57468: LD_INT 4
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 2
57477: NEG
57478: PUSH
57479: LD_INT 2
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 4
57488: NEG
57489: PUSH
57490: LD_INT 0
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 4
57499: NEG
57500: PUSH
57501: LD_INT 1
57503: NEG
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 3
57511: NEG
57512: PUSH
57513: LD_INT 0
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 3
57522: NEG
57523: PUSH
57524: LD_INT 1
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 4
57533: NEG
57534: PUSH
57535: LD_INT 1
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 5
57544: NEG
57545: PUSH
57546: LD_INT 0
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 5
57555: NEG
57556: PUSH
57557: LD_INT 1
57559: NEG
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 5
57567: NEG
57568: PUSH
57569: LD_INT 2
57571: NEG
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 3
57579: NEG
57580: PUSH
57581: LD_INT 2
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: ST_TO_ADDR
// end ; end ;
57635: GO 57638
57637: POP
// case btype of b_depot , b_warehouse :
57638: LD_VAR 0 1
57642: PUSH
57643: LD_INT 0
57645: DOUBLE
57646: EQUAL
57647: IFTRUE 57657
57649: LD_INT 1
57651: DOUBLE
57652: EQUAL
57653: IFTRUE 57657
57655: GO 57858
57657: POP
// case nation of nation_american :
57658: LD_VAR 0 5
57662: PUSH
57663: LD_INT 1
57665: DOUBLE
57666: EQUAL
57667: IFTRUE 57671
57669: GO 57727
57671: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
57672: LD_ADDR_VAR 0 9
57676: PUSH
57677: LD_VAR 0 11
57681: PUSH
57682: LD_VAR 0 12
57686: PUSH
57687: LD_VAR 0 13
57691: PUSH
57692: LD_VAR 0 14
57696: PUSH
57697: LD_VAR 0 15
57701: PUSH
57702: LD_VAR 0 16
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: PUSH
57715: LD_VAR 0 4
57719: PUSH
57720: LD_INT 1
57722: PLUS
57723: ARRAY
57724: ST_TO_ADDR
57725: GO 57856
57727: LD_INT 2
57729: DOUBLE
57730: EQUAL
57731: IFTRUE 57735
57733: GO 57791
57735: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
57736: LD_ADDR_VAR 0 9
57740: PUSH
57741: LD_VAR 0 17
57745: PUSH
57746: LD_VAR 0 18
57750: PUSH
57751: LD_VAR 0 19
57755: PUSH
57756: LD_VAR 0 20
57760: PUSH
57761: LD_VAR 0 21
57765: PUSH
57766: LD_VAR 0 22
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: PUSH
57779: LD_VAR 0 4
57783: PUSH
57784: LD_INT 1
57786: PLUS
57787: ARRAY
57788: ST_TO_ADDR
57789: GO 57856
57791: LD_INT 3
57793: DOUBLE
57794: EQUAL
57795: IFTRUE 57799
57797: GO 57855
57799: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57800: LD_ADDR_VAR 0 9
57804: PUSH
57805: LD_VAR 0 23
57809: PUSH
57810: LD_VAR 0 24
57814: PUSH
57815: LD_VAR 0 25
57819: PUSH
57820: LD_VAR 0 26
57824: PUSH
57825: LD_VAR 0 27
57829: PUSH
57830: LD_VAR 0 28
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: PUSH
57843: LD_VAR 0 4
57847: PUSH
57848: LD_INT 1
57850: PLUS
57851: ARRAY
57852: ST_TO_ADDR
57853: GO 57856
57855: POP
57856: GO 58411
57858: LD_INT 2
57860: DOUBLE
57861: EQUAL
57862: IFTRUE 57872
57864: LD_INT 3
57866: DOUBLE
57867: EQUAL
57868: IFTRUE 57872
57870: GO 57928
57872: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57873: LD_ADDR_VAR 0 9
57877: PUSH
57878: LD_VAR 0 29
57882: PUSH
57883: LD_VAR 0 30
57887: PUSH
57888: LD_VAR 0 31
57892: PUSH
57893: LD_VAR 0 32
57897: PUSH
57898: LD_VAR 0 33
57902: PUSH
57903: LD_VAR 0 34
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: PUSH
57916: LD_VAR 0 4
57920: PUSH
57921: LD_INT 1
57923: PLUS
57924: ARRAY
57925: ST_TO_ADDR
57926: GO 58411
57928: LD_INT 16
57930: DOUBLE
57931: EQUAL
57932: IFTRUE 57990
57934: LD_INT 17
57936: DOUBLE
57937: EQUAL
57938: IFTRUE 57990
57940: LD_INT 18
57942: DOUBLE
57943: EQUAL
57944: IFTRUE 57990
57946: LD_INT 19
57948: DOUBLE
57949: EQUAL
57950: IFTRUE 57990
57952: LD_INT 22
57954: DOUBLE
57955: EQUAL
57956: IFTRUE 57990
57958: LD_INT 20
57960: DOUBLE
57961: EQUAL
57962: IFTRUE 57990
57964: LD_INT 21
57966: DOUBLE
57967: EQUAL
57968: IFTRUE 57990
57970: LD_INT 23
57972: DOUBLE
57973: EQUAL
57974: IFTRUE 57990
57976: LD_INT 24
57978: DOUBLE
57979: EQUAL
57980: IFTRUE 57990
57982: LD_INT 25
57984: DOUBLE
57985: EQUAL
57986: IFTRUE 57990
57988: GO 58046
57990: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57991: LD_ADDR_VAR 0 9
57995: PUSH
57996: LD_VAR 0 35
58000: PUSH
58001: LD_VAR 0 36
58005: PUSH
58006: LD_VAR 0 37
58010: PUSH
58011: LD_VAR 0 38
58015: PUSH
58016: LD_VAR 0 39
58020: PUSH
58021: LD_VAR 0 40
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: PUSH
58034: LD_VAR 0 4
58038: PUSH
58039: LD_INT 1
58041: PLUS
58042: ARRAY
58043: ST_TO_ADDR
58044: GO 58411
58046: LD_INT 6
58048: DOUBLE
58049: EQUAL
58050: IFTRUE 58102
58052: LD_INT 7
58054: DOUBLE
58055: EQUAL
58056: IFTRUE 58102
58058: LD_INT 8
58060: DOUBLE
58061: EQUAL
58062: IFTRUE 58102
58064: LD_INT 13
58066: DOUBLE
58067: EQUAL
58068: IFTRUE 58102
58070: LD_INT 12
58072: DOUBLE
58073: EQUAL
58074: IFTRUE 58102
58076: LD_INT 15
58078: DOUBLE
58079: EQUAL
58080: IFTRUE 58102
58082: LD_INT 11
58084: DOUBLE
58085: EQUAL
58086: IFTRUE 58102
58088: LD_INT 14
58090: DOUBLE
58091: EQUAL
58092: IFTRUE 58102
58094: LD_INT 10
58096: DOUBLE
58097: EQUAL
58098: IFTRUE 58102
58100: GO 58158
58102: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
58103: LD_ADDR_VAR 0 9
58107: PUSH
58108: LD_VAR 0 41
58112: PUSH
58113: LD_VAR 0 42
58117: PUSH
58118: LD_VAR 0 43
58122: PUSH
58123: LD_VAR 0 44
58127: PUSH
58128: LD_VAR 0 45
58132: PUSH
58133: LD_VAR 0 46
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: PUSH
58146: LD_VAR 0 4
58150: PUSH
58151: LD_INT 1
58153: PLUS
58154: ARRAY
58155: ST_TO_ADDR
58156: GO 58411
58158: LD_INT 36
58160: DOUBLE
58161: EQUAL
58162: IFTRUE 58166
58164: GO 58222
58166: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58167: LD_ADDR_VAR 0 9
58171: PUSH
58172: LD_VAR 0 47
58176: PUSH
58177: LD_VAR 0 48
58181: PUSH
58182: LD_VAR 0 49
58186: PUSH
58187: LD_VAR 0 50
58191: PUSH
58192: LD_VAR 0 51
58196: PUSH
58197: LD_VAR 0 52
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: PUSH
58210: LD_VAR 0 4
58214: PUSH
58215: LD_INT 1
58217: PLUS
58218: ARRAY
58219: ST_TO_ADDR
58220: GO 58411
58222: LD_INT 4
58224: DOUBLE
58225: EQUAL
58226: IFTRUE 58248
58228: LD_INT 5
58230: DOUBLE
58231: EQUAL
58232: IFTRUE 58248
58234: LD_INT 34
58236: DOUBLE
58237: EQUAL
58238: IFTRUE 58248
58240: LD_INT 37
58242: DOUBLE
58243: EQUAL
58244: IFTRUE 58248
58246: GO 58304
58248: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58249: LD_ADDR_VAR 0 9
58253: PUSH
58254: LD_VAR 0 53
58258: PUSH
58259: LD_VAR 0 54
58263: PUSH
58264: LD_VAR 0 55
58268: PUSH
58269: LD_VAR 0 56
58273: PUSH
58274: LD_VAR 0 57
58278: PUSH
58279: LD_VAR 0 58
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: PUSH
58292: LD_VAR 0 4
58296: PUSH
58297: LD_INT 1
58299: PLUS
58300: ARRAY
58301: ST_TO_ADDR
58302: GO 58411
58304: LD_INT 31
58306: DOUBLE
58307: EQUAL
58308: IFTRUE 58354
58310: LD_INT 32
58312: DOUBLE
58313: EQUAL
58314: IFTRUE 58354
58316: LD_INT 33
58318: DOUBLE
58319: EQUAL
58320: IFTRUE 58354
58322: LD_INT 27
58324: DOUBLE
58325: EQUAL
58326: IFTRUE 58354
58328: LD_INT 26
58330: DOUBLE
58331: EQUAL
58332: IFTRUE 58354
58334: LD_INT 28
58336: DOUBLE
58337: EQUAL
58338: IFTRUE 58354
58340: LD_INT 29
58342: DOUBLE
58343: EQUAL
58344: IFTRUE 58354
58346: LD_INT 30
58348: DOUBLE
58349: EQUAL
58350: IFTRUE 58354
58352: GO 58410
58354: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
58355: LD_ADDR_VAR 0 9
58359: PUSH
58360: LD_VAR 0 59
58364: PUSH
58365: LD_VAR 0 60
58369: PUSH
58370: LD_VAR 0 61
58374: PUSH
58375: LD_VAR 0 62
58379: PUSH
58380: LD_VAR 0 63
58384: PUSH
58385: LD_VAR 0 64
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: PUSH
58398: LD_VAR 0 4
58402: PUSH
58403: LD_INT 1
58405: PLUS
58406: ARRAY
58407: ST_TO_ADDR
58408: GO 58411
58410: POP
// temp_list2 = [ ] ;
58411: LD_ADDR_VAR 0 10
58415: PUSH
58416: EMPTY
58417: ST_TO_ADDR
// for i in temp_list do
58418: LD_ADDR_VAR 0 8
58422: PUSH
58423: LD_VAR 0 9
58427: PUSH
58428: FOR_IN
58429: IFFALSE 58481
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58431: LD_ADDR_VAR 0 10
58435: PUSH
58436: LD_VAR 0 10
58440: PUSH
58441: LD_VAR 0 8
58445: PUSH
58446: LD_INT 1
58448: ARRAY
58449: PUSH
58450: LD_VAR 0 2
58454: PLUS
58455: PUSH
58456: LD_VAR 0 8
58460: PUSH
58461: LD_INT 2
58463: ARRAY
58464: PUSH
58465: LD_VAR 0 3
58469: PLUS
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: EMPTY
58476: LIST
58477: ADD
58478: ST_TO_ADDR
58479: GO 58428
58481: POP
58482: POP
// result = temp_list2 ;
58483: LD_ADDR_VAR 0 7
58487: PUSH
58488: LD_VAR 0 10
58492: ST_TO_ADDR
// end ;
58493: LD_VAR 0 7
58497: RET
// export function EnemyInRange ( unit , dist ) ; begin
58498: LD_INT 0
58500: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58501: LD_ADDR_VAR 0 3
58505: PUSH
58506: LD_VAR 0 1
58510: PPUSH
58511: CALL_OW 255
58515: PPUSH
58516: LD_VAR 0 1
58520: PPUSH
58521: CALL_OW 250
58525: PPUSH
58526: LD_VAR 0 1
58530: PPUSH
58531: CALL_OW 251
58535: PPUSH
58536: LD_VAR 0 2
58540: PPUSH
58541: CALL 32602 0 4
58545: PUSH
58546: LD_INT 4
58548: ARRAY
58549: ST_TO_ADDR
// end ;
58550: LD_VAR 0 3
58554: RET
// export function PlayerSeeMe ( unit ) ; begin
58555: LD_INT 0
58557: PPUSH
// result := See ( your_side , unit ) ;
58558: LD_ADDR_VAR 0 2
58562: PUSH
58563: LD_OWVAR 2
58567: PPUSH
58568: LD_VAR 0 1
58572: PPUSH
58573: CALL_OW 292
58577: ST_TO_ADDR
// end ;
58578: LD_VAR 0 2
58582: RET
// export function ReverseDir ( unit ) ; begin
58583: LD_INT 0
58585: PPUSH
// if not unit then
58586: LD_VAR 0 1
58590: NOT
58591: IFFALSE 58595
// exit ;
58593: GO 58618
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58595: LD_ADDR_VAR 0 2
58599: PUSH
58600: LD_VAR 0 1
58604: PPUSH
58605: CALL_OW 254
58609: PUSH
58610: LD_INT 3
58612: PLUS
58613: PUSH
58614: LD_INT 6
58616: MOD
58617: ST_TO_ADDR
// end ;
58618: LD_VAR 0 2
58622: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
58623: LD_INT 0
58625: PPUSH
58626: PPUSH
58627: PPUSH
58628: PPUSH
58629: PPUSH
// if not hexes then
58630: LD_VAR 0 2
58634: NOT
58635: IFFALSE 58639
// exit ;
58637: GO 58787
// dist := 9999 ;
58639: LD_ADDR_VAR 0 5
58643: PUSH
58644: LD_INT 9999
58646: ST_TO_ADDR
// for i = 1 to hexes do
58647: LD_ADDR_VAR 0 4
58651: PUSH
58652: DOUBLE
58653: LD_INT 1
58655: DEC
58656: ST_TO_ADDR
58657: LD_VAR 0 2
58661: PUSH
58662: FOR_TO
58663: IFFALSE 58775
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
58665: LD_VAR 0 1
58669: PPUSH
58670: LD_VAR 0 2
58674: PUSH
58675: LD_VAR 0 4
58679: ARRAY
58680: PUSH
58681: LD_INT 1
58683: ARRAY
58684: PPUSH
58685: LD_VAR 0 2
58689: PUSH
58690: LD_VAR 0 4
58694: ARRAY
58695: PUSH
58696: LD_INT 2
58698: ARRAY
58699: PPUSH
58700: CALL_OW 297
58704: PUSH
58705: LD_VAR 0 5
58709: LESS
58710: IFFALSE 58773
// begin hex := hexes [ i ] ;
58712: LD_ADDR_VAR 0 7
58716: PUSH
58717: LD_VAR 0 2
58721: PUSH
58722: LD_VAR 0 4
58726: ARRAY
58727: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58728: LD_ADDR_VAR 0 5
58732: PUSH
58733: LD_VAR 0 1
58737: PPUSH
58738: LD_VAR 0 2
58742: PUSH
58743: LD_VAR 0 4
58747: ARRAY
58748: PUSH
58749: LD_INT 1
58751: ARRAY
58752: PPUSH
58753: LD_VAR 0 2
58757: PUSH
58758: LD_VAR 0 4
58762: ARRAY
58763: PUSH
58764: LD_INT 2
58766: ARRAY
58767: PPUSH
58768: CALL_OW 297
58772: ST_TO_ADDR
// end ; end ;
58773: GO 58662
58775: POP
58776: POP
// result := hex ;
58777: LD_ADDR_VAR 0 3
58781: PUSH
58782: LD_VAR 0 7
58786: ST_TO_ADDR
// end ;
58787: LD_VAR 0 3
58791: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58792: LD_INT 0
58794: PPUSH
58795: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58796: LD_VAR 0 1
58800: NOT
58801: PUSH
58802: LD_VAR 0 1
58806: PUSH
58807: LD_INT 21
58809: PUSH
58810: LD_INT 2
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 23
58819: PUSH
58820: LD_INT 2
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PPUSH
58831: CALL_OW 69
58835: IN
58836: NOT
58837: OR
58838: IFFALSE 58842
// exit ;
58840: GO 58889
// for i = 1 to 3 do
58842: LD_ADDR_VAR 0 3
58846: PUSH
58847: DOUBLE
58848: LD_INT 1
58850: DEC
58851: ST_TO_ADDR
58852: LD_INT 3
58854: PUSH
58855: FOR_TO
58856: IFFALSE 58887
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58858: LD_VAR 0 1
58862: PPUSH
58863: CALL_OW 250
58867: PPUSH
58868: LD_VAR 0 1
58872: PPUSH
58873: CALL_OW 251
58877: PPUSH
58878: LD_INT 1
58880: PPUSH
58881: CALL_OW 453
58885: GO 58855
58887: POP
58888: POP
// end ;
58889: LD_VAR 0 2
58893: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58894: LD_INT 0
58896: PPUSH
58897: PPUSH
58898: PPUSH
58899: PPUSH
58900: PPUSH
58901: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58902: LD_VAR 0 1
58906: NOT
58907: PUSH
58908: LD_VAR 0 2
58912: NOT
58913: OR
58914: PUSH
58915: LD_VAR 0 1
58919: PPUSH
58920: CALL_OW 314
58924: OR
58925: IFFALSE 58929
// exit ;
58927: GO 59370
// x := GetX ( enemy_unit ) ;
58929: LD_ADDR_VAR 0 7
58933: PUSH
58934: LD_VAR 0 2
58938: PPUSH
58939: CALL_OW 250
58943: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58944: LD_ADDR_VAR 0 8
58948: PUSH
58949: LD_VAR 0 2
58953: PPUSH
58954: CALL_OW 251
58958: ST_TO_ADDR
// if not x or not y then
58959: LD_VAR 0 7
58963: NOT
58964: PUSH
58965: LD_VAR 0 8
58969: NOT
58970: OR
58971: IFFALSE 58975
// exit ;
58973: GO 59370
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58975: LD_ADDR_VAR 0 6
58979: PUSH
58980: LD_VAR 0 7
58984: PPUSH
58985: LD_INT 0
58987: PPUSH
58988: LD_INT 4
58990: PPUSH
58991: CALL_OW 272
58995: PUSH
58996: LD_VAR 0 8
59000: PPUSH
59001: LD_INT 0
59003: PPUSH
59004: LD_INT 4
59006: PPUSH
59007: CALL_OW 273
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_VAR 0 7
59020: PPUSH
59021: LD_INT 1
59023: PPUSH
59024: LD_INT 4
59026: PPUSH
59027: CALL_OW 272
59031: PUSH
59032: LD_VAR 0 8
59036: PPUSH
59037: LD_INT 1
59039: PPUSH
59040: LD_INT 4
59042: PPUSH
59043: CALL_OW 273
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_VAR 0 7
59056: PPUSH
59057: LD_INT 2
59059: PPUSH
59060: LD_INT 4
59062: PPUSH
59063: CALL_OW 272
59067: PUSH
59068: LD_VAR 0 8
59072: PPUSH
59073: LD_INT 2
59075: PPUSH
59076: LD_INT 4
59078: PPUSH
59079: CALL_OW 273
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_VAR 0 7
59092: PPUSH
59093: LD_INT 3
59095: PPUSH
59096: LD_INT 4
59098: PPUSH
59099: CALL_OW 272
59103: PUSH
59104: LD_VAR 0 8
59108: PPUSH
59109: LD_INT 3
59111: PPUSH
59112: LD_INT 4
59114: PPUSH
59115: CALL_OW 273
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_VAR 0 7
59128: PPUSH
59129: LD_INT 4
59131: PPUSH
59132: LD_INT 4
59134: PPUSH
59135: CALL_OW 272
59139: PUSH
59140: LD_VAR 0 8
59144: PPUSH
59145: LD_INT 4
59147: PPUSH
59148: LD_INT 4
59150: PPUSH
59151: CALL_OW 273
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_VAR 0 7
59164: PPUSH
59165: LD_INT 5
59167: PPUSH
59168: LD_INT 4
59170: PPUSH
59171: CALL_OW 272
59175: PUSH
59176: LD_VAR 0 8
59180: PPUSH
59181: LD_INT 5
59183: PPUSH
59184: LD_INT 4
59186: PPUSH
59187: CALL_OW 273
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: ST_TO_ADDR
// for i = tmp downto 1 do
59204: LD_ADDR_VAR 0 4
59208: PUSH
59209: DOUBLE
59210: LD_VAR 0 6
59214: INC
59215: ST_TO_ADDR
59216: LD_INT 1
59218: PUSH
59219: FOR_DOWNTO
59220: IFFALSE 59321
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59222: LD_VAR 0 6
59226: PUSH
59227: LD_VAR 0 4
59231: ARRAY
59232: PUSH
59233: LD_INT 1
59235: ARRAY
59236: PPUSH
59237: LD_VAR 0 6
59241: PUSH
59242: LD_VAR 0 4
59246: ARRAY
59247: PUSH
59248: LD_INT 2
59250: ARRAY
59251: PPUSH
59252: CALL_OW 488
59256: NOT
59257: PUSH
59258: LD_VAR 0 6
59262: PUSH
59263: LD_VAR 0 4
59267: ARRAY
59268: PUSH
59269: LD_INT 1
59271: ARRAY
59272: PPUSH
59273: LD_VAR 0 6
59277: PUSH
59278: LD_VAR 0 4
59282: ARRAY
59283: PUSH
59284: LD_INT 2
59286: ARRAY
59287: PPUSH
59288: CALL_OW 428
59292: PUSH
59293: LD_INT 0
59295: NONEQUAL
59296: OR
59297: IFFALSE 59319
// tmp := Delete ( tmp , i ) ;
59299: LD_ADDR_VAR 0 6
59303: PUSH
59304: LD_VAR 0 6
59308: PPUSH
59309: LD_VAR 0 4
59313: PPUSH
59314: CALL_OW 3
59318: ST_TO_ADDR
59319: GO 59219
59321: POP
59322: POP
// j := GetClosestHex ( unit , tmp ) ;
59323: LD_ADDR_VAR 0 5
59327: PUSH
59328: LD_VAR 0 1
59332: PPUSH
59333: LD_VAR 0 6
59337: PPUSH
59338: CALL 58623 0 2
59342: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59343: LD_VAR 0 1
59347: PPUSH
59348: LD_VAR 0 5
59352: PUSH
59353: LD_INT 1
59355: ARRAY
59356: PPUSH
59357: LD_VAR 0 5
59361: PUSH
59362: LD_INT 2
59364: ARRAY
59365: PPUSH
59366: CALL_OW 111
// end ;
59370: LD_VAR 0 3
59374: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59375: LD_INT 0
59377: PPUSH
59378: PPUSH
59379: PPUSH
// uc_side = 0 ;
59380: LD_ADDR_OWVAR 20
59384: PUSH
59385: LD_INT 0
59387: ST_TO_ADDR
// uc_nation = 0 ;
59388: LD_ADDR_OWVAR 21
59392: PUSH
59393: LD_INT 0
59395: ST_TO_ADDR
// InitHc ;
59396: CALL_OW 19
// InitVc ;
59400: CALL_OW 20
// if mastodonts then
59404: LD_VAR 0 6
59408: IFFALSE 59475
// for i = 1 to mastodonts do
59410: LD_ADDR_VAR 0 11
59414: PUSH
59415: DOUBLE
59416: LD_INT 1
59418: DEC
59419: ST_TO_ADDR
59420: LD_VAR 0 6
59424: PUSH
59425: FOR_TO
59426: IFFALSE 59473
// begin vc_chassis := 31 ;
59428: LD_ADDR_OWVAR 37
59432: PUSH
59433: LD_INT 31
59435: ST_TO_ADDR
// vc_control := control_rider ;
59436: LD_ADDR_OWVAR 38
59440: PUSH
59441: LD_INT 4
59443: ST_TO_ADDR
// animal := CreateVehicle ;
59444: LD_ADDR_VAR 0 12
59448: PUSH
59449: CALL_OW 45
59453: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59454: LD_VAR 0 12
59458: PPUSH
59459: LD_VAR 0 8
59463: PPUSH
59464: LD_INT 0
59466: PPUSH
59467: CALL 61544 0 3
// end ;
59471: GO 59425
59473: POP
59474: POP
// if horses then
59475: LD_VAR 0 5
59479: IFFALSE 59546
// for i = 1 to horses do
59481: LD_ADDR_VAR 0 11
59485: PUSH
59486: DOUBLE
59487: LD_INT 1
59489: DEC
59490: ST_TO_ADDR
59491: LD_VAR 0 5
59495: PUSH
59496: FOR_TO
59497: IFFALSE 59544
// begin hc_class := 21 ;
59499: LD_ADDR_OWVAR 28
59503: PUSH
59504: LD_INT 21
59506: ST_TO_ADDR
// hc_gallery :=  ;
59507: LD_ADDR_OWVAR 33
59511: PUSH
59512: LD_STRING 
59514: ST_TO_ADDR
// animal := CreateHuman ;
59515: LD_ADDR_VAR 0 12
59519: PUSH
59520: CALL_OW 44
59524: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59525: LD_VAR 0 12
59529: PPUSH
59530: LD_VAR 0 8
59534: PPUSH
59535: LD_INT 0
59537: PPUSH
59538: CALL 61544 0 3
// end ;
59542: GO 59496
59544: POP
59545: POP
// if birds then
59546: LD_VAR 0 1
59550: IFFALSE 59617
// for i = 1 to birds do
59552: LD_ADDR_VAR 0 11
59556: PUSH
59557: DOUBLE
59558: LD_INT 1
59560: DEC
59561: ST_TO_ADDR
59562: LD_VAR 0 1
59566: PUSH
59567: FOR_TO
59568: IFFALSE 59615
// begin hc_class = 18 ;
59570: LD_ADDR_OWVAR 28
59574: PUSH
59575: LD_INT 18
59577: ST_TO_ADDR
// hc_gallery =  ;
59578: LD_ADDR_OWVAR 33
59582: PUSH
59583: LD_STRING 
59585: ST_TO_ADDR
// animal := CreateHuman ;
59586: LD_ADDR_VAR 0 12
59590: PUSH
59591: CALL_OW 44
59595: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59596: LD_VAR 0 12
59600: PPUSH
59601: LD_VAR 0 8
59605: PPUSH
59606: LD_INT 0
59608: PPUSH
59609: CALL 61544 0 3
// end ;
59613: GO 59567
59615: POP
59616: POP
// if tigers then
59617: LD_VAR 0 2
59621: IFFALSE 59705
// for i = 1 to tigers do
59623: LD_ADDR_VAR 0 11
59627: PUSH
59628: DOUBLE
59629: LD_INT 1
59631: DEC
59632: ST_TO_ADDR
59633: LD_VAR 0 2
59637: PUSH
59638: FOR_TO
59639: IFFALSE 59703
// begin hc_class = class_tiger ;
59641: LD_ADDR_OWVAR 28
59645: PUSH
59646: LD_INT 14
59648: ST_TO_ADDR
// hc_gallery =  ;
59649: LD_ADDR_OWVAR 33
59653: PUSH
59654: LD_STRING 
59656: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
59657: LD_ADDR_OWVAR 35
59661: PUSH
59662: LD_INT 7
59664: NEG
59665: PPUSH
59666: LD_INT 7
59668: PPUSH
59669: CALL_OW 12
59673: ST_TO_ADDR
// animal := CreateHuman ;
59674: LD_ADDR_VAR 0 12
59678: PUSH
59679: CALL_OW 44
59683: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59684: LD_VAR 0 12
59688: PPUSH
59689: LD_VAR 0 8
59693: PPUSH
59694: LD_INT 0
59696: PPUSH
59697: CALL 61544 0 3
// end ;
59701: GO 59638
59703: POP
59704: POP
// if apemans then
59705: LD_VAR 0 3
59709: IFFALSE 59832
// for i = 1 to apemans do
59711: LD_ADDR_VAR 0 11
59715: PUSH
59716: DOUBLE
59717: LD_INT 1
59719: DEC
59720: ST_TO_ADDR
59721: LD_VAR 0 3
59725: PUSH
59726: FOR_TO
59727: IFFALSE 59830
// begin hc_class = class_apeman ;
59729: LD_ADDR_OWVAR 28
59733: PUSH
59734: LD_INT 12
59736: ST_TO_ADDR
// hc_gallery =  ;
59737: LD_ADDR_OWVAR 33
59741: PUSH
59742: LD_STRING 
59744: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
59745: LD_ADDR_OWVAR 35
59749: PUSH
59750: LD_INT 5
59752: NEG
59753: PPUSH
59754: LD_INT 5
59756: PPUSH
59757: CALL_OW 12
59761: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59762: LD_ADDR_OWVAR 31
59766: PUSH
59767: LD_INT 1
59769: PPUSH
59770: LD_INT 3
59772: PPUSH
59773: CALL_OW 12
59777: PUSH
59778: LD_INT 1
59780: PPUSH
59781: LD_INT 3
59783: PPUSH
59784: CALL_OW 12
59788: PUSH
59789: LD_INT 0
59791: PUSH
59792: LD_INT 0
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: ST_TO_ADDR
// animal := CreateHuman ;
59801: LD_ADDR_VAR 0 12
59805: PUSH
59806: CALL_OW 44
59810: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59811: LD_VAR 0 12
59815: PPUSH
59816: LD_VAR 0 8
59820: PPUSH
59821: LD_INT 0
59823: PPUSH
59824: CALL 61544 0 3
// end ;
59828: GO 59726
59830: POP
59831: POP
// if enchidnas then
59832: LD_VAR 0 4
59836: IFFALSE 59903
// for i = 1 to enchidnas do
59838: LD_ADDR_VAR 0 11
59842: PUSH
59843: DOUBLE
59844: LD_INT 1
59846: DEC
59847: ST_TO_ADDR
59848: LD_VAR 0 4
59852: PUSH
59853: FOR_TO
59854: IFFALSE 59901
// begin hc_class = 13 ;
59856: LD_ADDR_OWVAR 28
59860: PUSH
59861: LD_INT 13
59863: ST_TO_ADDR
// hc_gallery =  ;
59864: LD_ADDR_OWVAR 33
59868: PUSH
59869: LD_STRING 
59871: ST_TO_ADDR
// animal := CreateHuman ;
59872: LD_ADDR_VAR 0 12
59876: PUSH
59877: CALL_OW 44
59881: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59882: LD_VAR 0 12
59886: PPUSH
59887: LD_VAR 0 8
59891: PPUSH
59892: LD_INT 0
59894: PPUSH
59895: CALL 61544 0 3
// end ;
59899: GO 59853
59901: POP
59902: POP
// if fishes then
59903: LD_VAR 0 7
59907: IFFALSE 59974
// for i = 1 to fishes do
59909: LD_ADDR_VAR 0 11
59913: PUSH
59914: DOUBLE
59915: LD_INT 1
59917: DEC
59918: ST_TO_ADDR
59919: LD_VAR 0 7
59923: PUSH
59924: FOR_TO
59925: IFFALSE 59972
// begin hc_class = 20 ;
59927: LD_ADDR_OWVAR 28
59931: PUSH
59932: LD_INT 20
59934: ST_TO_ADDR
// hc_gallery =  ;
59935: LD_ADDR_OWVAR 33
59939: PUSH
59940: LD_STRING 
59942: ST_TO_ADDR
// animal := CreateHuman ;
59943: LD_ADDR_VAR 0 12
59947: PUSH
59948: CALL_OW 44
59952: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59953: LD_VAR 0 12
59957: PPUSH
59958: LD_VAR 0 9
59962: PPUSH
59963: LD_INT 0
59965: PPUSH
59966: CALL 61544 0 3
// end ;
59970: GO 59924
59972: POP
59973: POP
// end ;
59974: LD_VAR 0 10
59978: RET
// export function WantHeal ( sci , unit ) ; begin
59979: LD_INT 0
59981: PPUSH
// if GetTaskList ( sci ) > 0 then
59982: LD_VAR 0 1
59986: PPUSH
59987: CALL_OW 437
59991: PUSH
59992: LD_INT 0
59994: GREATER
59995: IFFALSE 60065
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59997: LD_VAR 0 1
60001: PPUSH
60002: CALL_OW 437
60006: PUSH
60007: LD_INT 1
60009: ARRAY
60010: PUSH
60011: LD_INT 1
60013: ARRAY
60014: PUSH
60015: LD_STRING l
60017: EQUAL
60018: PUSH
60019: LD_VAR 0 1
60023: PPUSH
60024: CALL_OW 437
60028: PUSH
60029: LD_INT 1
60031: ARRAY
60032: PUSH
60033: LD_INT 4
60035: ARRAY
60036: PUSH
60037: LD_VAR 0 2
60041: EQUAL
60042: AND
60043: IFFALSE 60055
// result := true else
60045: LD_ADDR_VAR 0 3
60049: PUSH
60050: LD_INT 1
60052: ST_TO_ADDR
60053: GO 60063
// result := false ;
60055: LD_ADDR_VAR 0 3
60059: PUSH
60060: LD_INT 0
60062: ST_TO_ADDR
// end else
60063: GO 60073
// result := false ;
60065: LD_ADDR_VAR 0 3
60069: PUSH
60070: LD_INT 0
60072: ST_TO_ADDR
// end ;
60073: LD_VAR 0 3
60077: RET
// export function HealTarget ( sci ) ; begin
60078: LD_INT 0
60080: PPUSH
// if not sci then
60081: LD_VAR 0 1
60085: NOT
60086: IFFALSE 60090
// exit ;
60088: GO 60155
// result := 0 ;
60090: LD_ADDR_VAR 0 2
60094: PUSH
60095: LD_INT 0
60097: ST_TO_ADDR
// if GetTaskList ( sci ) then
60098: LD_VAR 0 1
60102: PPUSH
60103: CALL_OW 437
60107: IFFALSE 60155
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60109: LD_VAR 0 1
60113: PPUSH
60114: CALL_OW 437
60118: PUSH
60119: LD_INT 1
60121: ARRAY
60122: PUSH
60123: LD_INT 1
60125: ARRAY
60126: PUSH
60127: LD_STRING l
60129: EQUAL
60130: IFFALSE 60155
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60132: LD_ADDR_VAR 0 2
60136: PUSH
60137: LD_VAR 0 1
60141: PPUSH
60142: CALL_OW 437
60146: PUSH
60147: LD_INT 1
60149: ARRAY
60150: PUSH
60151: LD_INT 4
60153: ARRAY
60154: ST_TO_ADDR
// end ;
60155: LD_VAR 0 2
60159: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60160: LD_INT 0
60162: PPUSH
60163: PPUSH
60164: PPUSH
60165: PPUSH
// if not base_units then
60166: LD_VAR 0 1
60170: NOT
60171: IFFALSE 60175
// exit ;
60173: GO 60262
// result := false ;
60175: LD_ADDR_VAR 0 2
60179: PUSH
60180: LD_INT 0
60182: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60183: LD_ADDR_VAR 0 5
60187: PUSH
60188: LD_VAR 0 1
60192: PPUSH
60193: LD_INT 21
60195: PUSH
60196: LD_INT 3
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PPUSH
60203: CALL_OW 72
60207: ST_TO_ADDR
// if not tmp then
60208: LD_VAR 0 5
60212: NOT
60213: IFFALSE 60217
// exit ;
60215: GO 60262
// for i in tmp do
60217: LD_ADDR_VAR 0 3
60221: PUSH
60222: LD_VAR 0 5
60226: PUSH
60227: FOR_IN
60228: IFFALSE 60260
// begin result := EnemyInRange ( i , 22 ) ;
60230: LD_ADDR_VAR 0 2
60234: PUSH
60235: LD_VAR 0 3
60239: PPUSH
60240: LD_INT 22
60242: PPUSH
60243: CALL 58498 0 2
60247: ST_TO_ADDR
// if result then
60248: LD_VAR 0 2
60252: IFFALSE 60258
// exit ;
60254: POP
60255: POP
60256: GO 60262
// end ;
60258: GO 60227
60260: POP
60261: POP
// end ;
60262: LD_VAR 0 2
60266: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
60267: LD_INT 0
60269: PPUSH
60270: PPUSH
// if not units then
60271: LD_VAR 0 1
60275: NOT
60276: IFFALSE 60280
// exit ;
60278: GO 60350
// result := [ ] ;
60280: LD_ADDR_VAR 0 3
60284: PUSH
60285: EMPTY
60286: ST_TO_ADDR
// for i in units do
60287: LD_ADDR_VAR 0 4
60291: PUSH
60292: LD_VAR 0 1
60296: PUSH
60297: FOR_IN
60298: IFFALSE 60348
// if GetTag ( i ) = tag then
60300: LD_VAR 0 4
60304: PPUSH
60305: CALL_OW 110
60309: PUSH
60310: LD_VAR 0 2
60314: EQUAL
60315: IFFALSE 60346
// result := Insert ( result , result + 1 , i ) ;
60317: LD_ADDR_VAR 0 3
60321: PUSH
60322: LD_VAR 0 3
60326: PPUSH
60327: LD_VAR 0 3
60331: PUSH
60332: LD_INT 1
60334: PLUS
60335: PPUSH
60336: LD_VAR 0 4
60340: PPUSH
60341: CALL_OW 2
60345: ST_TO_ADDR
60346: GO 60297
60348: POP
60349: POP
// end ;
60350: LD_VAR 0 3
60354: RET
// export function IsDriver ( un ) ; begin
60355: LD_INT 0
60357: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60358: LD_ADDR_VAR 0 2
60362: PUSH
60363: LD_VAR 0 1
60367: PUSH
60368: LD_INT 55
60370: PUSH
60371: EMPTY
60372: LIST
60373: PPUSH
60374: CALL_OW 69
60378: IN
60379: ST_TO_ADDR
// end ;
60380: LD_VAR 0 2
60384: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60385: LD_INT 0
60387: PPUSH
60388: PPUSH
// list := [ ] ;
60389: LD_ADDR_VAR 0 5
60393: PUSH
60394: EMPTY
60395: ST_TO_ADDR
// case d of 0 :
60396: LD_VAR 0 3
60400: PUSH
60401: LD_INT 0
60403: DOUBLE
60404: EQUAL
60405: IFTRUE 60409
60407: GO 60542
60409: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60410: LD_ADDR_VAR 0 5
60414: PUSH
60415: LD_VAR 0 1
60419: PUSH
60420: LD_INT 4
60422: MINUS
60423: PUSH
60424: LD_VAR 0 2
60428: PUSH
60429: LD_INT 4
60431: MINUS
60432: PUSH
60433: LD_INT 2
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: LIST
60440: PUSH
60441: LD_VAR 0 1
60445: PUSH
60446: LD_INT 3
60448: MINUS
60449: PUSH
60450: LD_VAR 0 2
60454: PUSH
60455: LD_INT 1
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: LIST
60462: PUSH
60463: LD_VAR 0 1
60467: PUSH
60468: LD_INT 4
60470: PLUS
60471: PUSH
60472: LD_VAR 0 2
60476: PUSH
60477: LD_INT 4
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: LIST
60484: PUSH
60485: LD_VAR 0 1
60489: PUSH
60490: LD_INT 3
60492: PLUS
60493: PUSH
60494: LD_VAR 0 2
60498: PUSH
60499: LD_INT 3
60501: PLUS
60502: PUSH
60503: LD_INT 5
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: LIST
60510: PUSH
60511: LD_VAR 0 1
60515: PUSH
60516: LD_VAR 0 2
60520: PUSH
60521: LD_INT 4
60523: PLUS
60524: PUSH
60525: LD_INT 0
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: LIST
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: ST_TO_ADDR
// end ; 1 :
60540: GO 61240
60542: LD_INT 1
60544: DOUBLE
60545: EQUAL
60546: IFTRUE 60550
60548: GO 60683
60550: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60551: LD_ADDR_VAR 0 5
60555: PUSH
60556: LD_VAR 0 1
60560: PUSH
60561: LD_VAR 0 2
60565: PUSH
60566: LD_INT 4
60568: MINUS
60569: PUSH
60570: LD_INT 3
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: LIST
60577: PUSH
60578: LD_VAR 0 1
60582: PUSH
60583: LD_INT 3
60585: MINUS
60586: PUSH
60587: LD_VAR 0 2
60591: PUSH
60592: LD_INT 3
60594: MINUS
60595: PUSH
60596: LD_INT 2
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: LIST
60603: PUSH
60604: LD_VAR 0 1
60608: PUSH
60609: LD_INT 4
60611: MINUS
60612: PUSH
60613: LD_VAR 0 2
60617: PUSH
60618: LD_INT 1
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: LIST
60625: PUSH
60626: LD_VAR 0 1
60630: PUSH
60631: LD_VAR 0 2
60635: PUSH
60636: LD_INT 3
60638: PLUS
60639: PUSH
60640: LD_INT 0
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: LIST
60647: PUSH
60648: LD_VAR 0 1
60652: PUSH
60653: LD_INT 4
60655: PLUS
60656: PUSH
60657: LD_VAR 0 2
60661: PUSH
60662: LD_INT 4
60664: PLUS
60665: PUSH
60666: LD_INT 5
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: LIST
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: ST_TO_ADDR
// end ; 2 :
60681: GO 61240
60683: LD_INT 2
60685: DOUBLE
60686: EQUAL
60687: IFTRUE 60691
60689: GO 60820
60691: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60692: LD_ADDR_VAR 0 5
60696: PUSH
60697: LD_VAR 0 1
60701: PUSH
60702: LD_VAR 0 2
60706: PUSH
60707: LD_INT 3
60709: MINUS
60710: PUSH
60711: LD_INT 3
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: LIST
60718: PUSH
60719: LD_VAR 0 1
60723: PUSH
60724: LD_INT 4
60726: PLUS
60727: PUSH
60728: LD_VAR 0 2
60732: PUSH
60733: LD_INT 4
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: LIST
60740: PUSH
60741: LD_VAR 0 1
60745: PUSH
60746: LD_VAR 0 2
60750: PUSH
60751: LD_INT 4
60753: PLUS
60754: PUSH
60755: LD_INT 0
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: LIST
60762: PUSH
60763: LD_VAR 0 1
60767: PUSH
60768: LD_INT 3
60770: MINUS
60771: PUSH
60772: LD_VAR 0 2
60776: PUSH
60777: LD_INT 1
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: LIST
60784: PUSH
60785: LD_VAR 0 1
60789: PUSH
60790: LD_INT 4
60792: MINUS
60793: PUSH
60794: LD_VAR 0 2
60798: PUSH
60799: LD_INT 4
60801: MINUS
60802: PUSH
60803: LD_INT 2
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: LIST
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: ST_TO_ADDR
// end ; 3 :
60818: GO 61240
60820: LD_INT 3
60822: DOUBLE
60823: EQUAL
60824: IFTRUE 60828
60826: GO 60961
60828: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60829: LD_ADDR_VAR 0 5
60833: PUSH
60834: LD_VAR 0 1
60838: PUSH
60839: LD_INT 3
60841: PLUS
60842: PUSH
60843: LD_VAR 0 2
60847: PUSH
60848: LD_INT 4
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: LIST
60855: PUSH
60856: LD_VAR 0 1
60860: PUSH
60861: LD_INT 4
60863: PLUS
60864: PUSH
60865: LD_VAR 0 2
60869: PUSH
60870: LD_INT 4
60872: PLUS
60873: PUSH
60874: LD_INT 5
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: LIST
60881: PUSH
60882: LD_VAR 0 1
60886: PUSH
60887: LD_INT 4
60889: MINUS
60890: PUSH
60891: LD_VAR 0 2
60895: PUSH
60896: LD_INT 1
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: LIST
60903: PUSH
60904: LD_VAR 0 1
60908: PUSH
60909: LD_VAR 0 2
60913: PUSH
60914: LD_INT 4
60916: MINUS
60917: PUSH
60918: LD_INT 3
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: LIST
60925: PUSH
60926: LD_VAR 0 1
60930: PUSH
60931: LD_INT 3
60933: MINUS
60934: PUSH
60935: LD_VAR 0 2
60939: PUSH
60940: LD_INT 3
60942: MINUS
60943: PUSH
60944: LD_INT 2
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: LIST
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: ST_TO_ADDR
// end ; 4 :
60959: GO 61240
60961: LD_INT 4
60963: DOUBLE
60964: EQUAL
60965: IFTRUE 60969
60967: GO 61102
60969: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60970: LD_ADDR_VAR 0 5
60974: PUSH
60975: LD_VAR 0 1
60979: PUSH
60980: LD_VAR 0 2
60984: PUSH
60985: LD_INT 4
60987: PLUS
60988: PUSH
60989: LD_INT 0
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: LIST
60996: PUSH
60997: LD_VAR 0 1
61001: PUSH
61002: LD_INT 3
61004: PLUS
61005: PUSH
61006: LD_VAR 0 2
61010: PUSH
61011: LD_INT 3
61013: PLUS
61014: PUSH
61015: LD_INT 5
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: LIST
61022: PUSH
61023: LD_VAR 0 1
61027: PUSH
61028: LD_INT 4
61030: PLUS
61031: PUSH
61032: LD_VAR 0 2
61036: PUSH
61037: LD_INT 4
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: LIST
61044: PUSH
61045: LD_VAR 0 1
61049: PUSH
61050: LD_VAR 0 2
61054: PUSH
61055: LD_INT 3
61057: MINUS
61058: PUSH
61059: LD_INT 3
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: LIST
61066: PUSH
61067: LD_VAR 0 1
61071: PUSH
61072: LD_INT 4
61074: MINUS
61075: PUSH
61076: LD_VAR 0 2
61080: PUSH
61081: LD_INT 4
61083: MINUS
61084: PUSH
61085: LD_INT 2
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: LIST
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: ST_TO_ADDR
// end ; 5 :
61100: GO 61240
61102: LD_INT 5
61104: DOUBLE
61105: EQUAL
61106: IFTRUE 61110
61108: GO 61239
61110: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61111: LD_ADDR_VAR 0 5
61115: PUSH
61116: LD_VAR 0 1
61120: PUSH
61121: LD_INT 4
61123: MINUS
61124: PUSH
61125: LD_VAR 0 2
61129: PUSH
61130: LD_INT 1
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: LIST
61137: PUSH
61138: LD_VAR 0 1
61142: PUSH
61143: LD_VAR 0 2
61147: PUSH
61148: LD_INT 4
61150: MINUS
61151: PUSH
61152: LD_INT 3
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: LIST
61159: PUSH
61160: LD_VAR 0 1
61164: PUSH
61165: LD_INT 4
61167: PLUS
61168: PUSH
61169: LD_VAR 0 2
61173: PUSH
61174: LD_INT 4
61176: PLUS
61177: PUSH
61178: LD_INT 5
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: LIST
61185: PUSH
61186: LD_VAR 0 1
61190: PUSH
61191: LD_INT 3
61193: PLUS
61194: PUSH
61195: LD_VAR 0 2
61199: PUSH
61200: LD_INT 4
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: LIST
61207: PUSH
61208: LD_VAR 0 1
61212: PUSH
61213: LD_VAR 0 2
61217: PUSH
61218: LD_INT 3
61220: PLUS
61221: PUSH
61222: LD_INT 0
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: LIST
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: ST_TO_ADDR
// end ; end ;
61237: GO 61240
61239: POP
// result := list ;
61240: LD_ADDR_VAR 0 4
61244: PUSH
61245: LD_VAR 0 5
61249: ST_TO_ADDR
// end ;
61250: LD_VAR 0 4
61254: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61255: LD_INT 0
61257: PPUSH
61258: PPUSH
61259: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61260: LD_VAR 0 1
61264: NOT
61265: PUSH
61266: LD_VAR 0 2
61270: PUSH
61271: LD_INT 1
61273: PUSH
61274: LD_INT 2
61276: PUSH
61277: LD_INT 3
61279: PUSH
61280: LD_INT 4
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: IN
61289: NOT
61290: OR
61291: IFFALSE 61295
// exit ;
61293: GO 61387
// tmp := [ ] ;
61295: LD_ADDR_VAR 0 5
61299: PUSH
61300: EMPTY
61301: ST_TO_ADDR
// for i in units do
61302: LD_ADDR_VAR 0 4
61306: PUSH
61307: LD_VAR 0 1
61311: PUSH
61312: FOR_IN
61313: IFFALSE 61356
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
61315: LD_ADDR_VAR 0 5
61319: PUSH
61320: LD_VAR 0 5
61324: PPUSH
61325: LD_VAR 0 5
61329: PUSH
61330: LD_INT 1
61332: PLUS
61333: PPUSH
61334: LD_VAR 0 4
61338: PPUSH
61339: LD_VAR 0 2
61343: PPUSH
61344: CALL_OW 259
61348: PPUSH
61349: CALL_OW 2
61353: ST_TO_ADDR
61354: GO 61312
61356: POP
61357: POP
// if not tmp then
61358: LD_VAR 0 5
61362: NOT
61363: IFFALSE 61367
// exit ;
61365: GO 61387
// result := SortListByListDesc ( units , tmp ) ;
61367: LD_ADDR_VAR 0 3
61371: PUSH
61372: LD_VAR 0 1
61376: PPUSH
61377: LD_VAR 0 5
61381: PPUSH
61382: CALL_OW 77
61386: ST_TO_ADDR
// end ;
61387: LD_VAR 0 3
61391: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61392: LD_INT 0
61394: PPUSH
61395: PPUSH
61396: PPUSH
// x := GetX ( building ) ;
61397: LD_ADDR_VAR 0 4
61401: PUSH
61402: LD_VAR 0 2
61406: PPUSH
61407: CALL_OW 250
61411: ST_TO_ADDR
// y := GetY ( building ) ;
61412: LD_ADDR_VAR 0 5
61416: PUSH
61417: LD_VAR 0 2
61421: PPUSH
61422: CALL_OW 251
61426: ST_TO_ADDR
// if GetTaskList ( unit ) then
61427: LD_VAR 0 1
61431: PPUSH
61432: CALL_OW 437
61436: IFFALSE 61531
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61438: LD_STRING e
61440: PUSH
61441: LD_VAR 0 1
61445: PPUSH
61446: CALL_OW 437
61450: PUSH
61451: LD_INT 1
61453: ARRAY
61454: PUSH
61455: LD_INT 1
61457: ARRAY
61458: EQUAL
61459: PUSH
61460: LD_VAR 0 4
61464: PUSH
61465: LD_VAR 0 1
61469: PPUSH
61470: CALL_OW 437
61474: PUSH
61475: LD_INT 1
61477: ARRAY
61478: PUSH
61479: LD_INT 2
61481: ARRAY
61482: EQUAL
61483: AND
61484: PUSH
61485: LD_VAR 0 5
61489: PUSH
61490: LD_VAR 0 1
61494: PPUSH
61495: CALL_OW 437
61499: PUSH
61500: LD_INT 1
61502: ARRAY
61503: PUSH
61504: LD_INT 3
61506: ARRAY
61507: EQUAL
61508: AND
61509: IFFALSE 61521
// result := true else
61511: LD_ADDR_VAR 0 3
61515: PUSH
61516: LD_INT 1
61518: ST_TO_ADDR
61519: GO 61529
// result := false ;
61521: LD_ADDR_VAR 0 3
61525: PUSH
61526: LD_INT 0
61528: ST_TO_ADDR
// end else
61529: GO 61539
// result := false ;
61531: LD_ADDR_VAR 0 3
61535: PUSH
61536: LD_INT 0
61538: ST_TO_ADDR
// end ;
61539: LD_VAR 0 3
61543: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61544: LD_INT 0
61546: PPUSH
61547: PPUSH
61548: PPUSH
61549: PPUSH
// if not unit or not area then
61550: LD_VAR 0 1
61554: NOT
61555: PUSH
61556: LD_VAR 0 2
61560: NOT
61561: OR
61562: IFFALSE 61566
// exit ;
61564: GO 61730
// tmp := AreaToList ( area , i ) ;
61566: LD_ADDR_VAR 0 6
61570: PUSH
61571: LD_VAR 0 2
61575: PPUSH
61576: LD_VAR 0 5
61580: PPUSH
61581: CALL_OW 517
61585: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61586: LD_ADDR_VAR 0 5
61590: PUSH
61591: DOUBLE
61592: LD_INT 1
61594: DEC
61595: ST_TO_ADDR
61596: LD_VAR 0 6
61600: PUSH
61601: LD_INT 1
61603: ARRAY
61604: PUSH
61605: FOR_TO
61606: IFFALSE 61728
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61608: LD_ADDR_VAR 0 7
61612: PUSH
61613: LD_VAR 0 6
61617: PUSH
61618: LD_INT 1
61620: ARRAY
61621: PUSH
61622: LD_VAR 0 5
61626: ARRAY
61627: PUSH
61628: LD_VAR 0 6
61632: PUSH
61633: LD_INT 2
61635: ARRAY
61636: PUSH
61637: LD_VAR 0 5
61641: ARRAY
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
61647: LD_VAR 0 7
61651: PUSH
61652: LD_INT 1
61654: ARRAY
61655: PPUSH
61656: LD_VAR 0 7
61660: PUSH
61661: LD_INT 2
61663: ARRAY
61664: PPUSH
61665: CALL_OW 428
61669: PUSH
61670: LD_INT 0
61672: EQUAL
61673: IFFALSE 61726
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61675: LD_VAR 0 1
61679: PPUSH
61680: LD_VAR 0 7
61684: PUSH
61685: LD_INT 1
61687: ARRAY
61688: PPUSH
61689: LD_VAR 0 7
61693: PUSH
61694: LD_INT 2
61696: ARRAY
61697: PPUSH
61698: LD_VAR 0 3
61702: PPUSH
61703: CALL_OW 48
// result := IsPlaced ( unit ) ;
61707: LD_ADDR_VAR 0 4
61711: PUSH
61712: LD_VAR 0 1
61716: PPUSH
61717: CALL_OW 305
61721: ST_TO_ADDR
// exit ;
61722: POP
61723: POP
61724: GO 61730
// end ; end ;
61726: GO 61605
61728: POP
61729: POP
// end ;
61730: LD_VAR 0 4
61734: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61735: LD_INT 0
61737: PPUSH
61738: PPUSH
61739: PPUSH
// if not side or side > 8 then
61740: LD_VAR 0 1
61744: NOT
61745: PUSH
61746: LD_VAR 0 1
61750: PUSH
61751: LD_INT 8
61753: GREATER
61754: OR
61755: IFFALSE 61759
// exit ;
61757: GO 61946
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61759: LD_ADDR_VAR 0 4
61763: PUSH
61764: LD_INT 22
61766: PUSH
61767: LD_VAR 0 1
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: PUSH
61776: LD_INT 21
61778: PUSH
61779: LD_INT 3
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PPUSH
61790: CALL_OW 69
61794: ST_TO_ADDR
// if not tmp then
61795: LD_VAR 0 4
61799: NOT
61800: IFFALSE 61804
// exit ;
61802: GO 61946
// enable_addtolog := true ;
61804: LD_ADDR_OWVAR 81
61808: PUSH
61809: LD_INT 1
61811: ST_TO_ADDR
// AddToLog ( [ ) ;
61812: LD_STRING [
61814: PPUSH
61815: CALL_OW 561
// for i in tmp do
61819: LD_ADDR_VAR 0 3
61823: PUSH
61824: LD_VAR 0 4
61828: PUSH
61829: FOR_IN
61830: IFFALSE 61937
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61832: LD_STRING [
61834: PUSH
61835: LD_VAR 0 3
61839: PPUSH
61840: CALL_OW 266
61844: STR
61845: PUSH
61846: LD_STRING , 
61848: STR
61849: PUSH
61850: LD_VAR 0 3
61854: PPUSH
61855: CALL_OW 250
61859: STR
61860: PUSH
61861: LD_STRING , 
61863: STR
61864: PUSH
61865: LD_VAR 0 3
61869: PPUSH
61870: CALL_OW 251
61874: STR
61875: PUSH
61876: LD_STRING , 
61878: STR
61879: PUSH
61880: LD_VAR 0 3
61884: PPUSH
61885: CALL_OW 254
61889: STR
61890: PUSH
61891: LD_STRING , 
61893: STR
61894: PUSH
61895: LD_VAR 0 3
61899: PPUSH
61900: LD_INT 1
61902: PPUSH
61903: CALL_OW 268
61907: STR
61908: PUSH
61909: LD_STRING , 
61911: STR
61912: PUSH
61913: LD_VAR 0 3
61917: PPUSH
61918: LD_INT 2
61920: PPUSH
61921: CALL_OW 268
61925: STR
61926: PUSH
61927: LD_STRING ],
61929: STR
61930: PPUSH
61931: CALL_OW 561
// end ;
61935: GO 61829
61937: POP
61938: POP
// AddToLog ( ]; ) ;
61939: LD_STRING ];
61941: PPUSH
61942: CALL_OW 561
// end ;
61946: LD_VAR 0 2
61950: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61951: LD_INT 0
61953: PPUSH
61954: PPUSH
61955: PPUSH
61956: PPUSH
61957: PPUSH
// if not area or not rate or not max then
61958: LD_VAR 0 1
61962: NOT
61963: PUSH
61964: LD_VAR 0 2
61968: NOT
61969: OR
61970: PUSH
61971: LD_VAR 0 4
61975: NOT
61976: OR
61977: IFFALSE 61981
// exit ;
61979: GO 62173
// while 1 do
61981: LD_INT 1
61983: IFFALSE 62173
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61985: LD_ADDR_VAR 0 9
61989: PUSH
61990: LD_VAR 0 1
61994: PPUSH
61995: LD_INT 1
61997: PPUSH
61998: CALL_OW 287
62002: PUSH
62003: LD_INT 10
62005: MUL
62006: ST_TO_ADDR
// r := rate / 10 ;
62007: LD_ADDR_VAR 0 7
62011: PUSH
62012: LD_VAR 0 2
62016: PUSH
62017: LD_INT 10
62019: DIVREAL
62020: ST_TO_ADDR
// time := 1 1$00 ;
62021: LD_ADDR_VAR 0 8
62025: PUSH
62026: LD_INT 2100
62028: ST_TO_ADDR
// if amount < min then
62029: LD_VAR 0 9
62033: PUSH
62034: LD_VAR 0 3
62038: LESS
62039: IFFALSE 62057
// r := r * 2 else
62041: LD_ADDR_VAR 0 7
62045: PUSH
62046: LD_VAR 0 7
62050: PUSH
62051: LD_INT 2
62053: MUL
62054: ST_TO_ADDR
62055: GO 62083
// if amount > max then
62057: LD_VAR 0 9
62061: PUSH
62062: LD_VAR 0 4
62066: GREATER
62067: IFFALSE 62083
// r := r / 2 ;
62069: LD_ADDR_VAR 0 7
62073: PUSH
62074: LD_VAR 0 7
62078: PUSH
62079: LD_INT 2
62081: DIVREAL
62082: ST_TO_ADDR
// time := time / r ;
62083: LD_ADDR_VAR 0 8
62087: PUSH
62088: LD_VAR 0 8
62092: PUSH
62093: LD_VAR 0 7
62097: DIVREAL
62098: ST_TO_ADDR
// if time < 0 then
62099: LD_VAR 0 8
62103: PUSH
62104: LD_INT 0
62106: LESS
62107: IFFALSE 62124
// time := time * - 1 ;
62109: LD_ADDR_VAR 0 8
62113: PUSH
62114: LD_VAR 0 8
62118: PUSH
62119: LD_INT 1
62121: NEG
62122: MUL
62123: ST_TO_ADDR
// wait ( time ) ;
62124: LD_VAR 0 8
62128: PPUSH
62129: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
62133: LD_INT 35
62135: PPUSH
62136: LD_INT 875
62138: PPUSH
62139: CALL_OW 12
62143: PPUSH
62144: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62148: LD_INT 1
62150: PPUSH
62151: LD_INT 5
62153: PPUSH
62154: CALL_OW 12
62158: PPUSH
62159: LD_VAR 0 1
62163: PPUSH
62164: LD_INT 1
62166: PPUSH
62167: CALL_OW 55
// end ;
62171: GO 61981
// end ;
62173: LD_VAR 0 5
62177: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62178: LD_INT 0
62180: PPUSH
62181: PPUSH
62182: PPUSH
62183: PPUSH
62184: PPUSH
62185: PPUSH
62186: PPUSH
62187: PPUSH
// if not turrets or not factories then
62188: LD_VAR 0 1
62192: NOT
62193: PUSH
62194: LD_VAR 0 2
62198: NOT
62199: OR
62200: IFFALSE 62204
// exit ;
62202: GO 62511
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62204: LD_ADDR_VAR 0 10
62208: PUSH
62209: LD_INT 5
62211: PUSH
62212: LD_INT 6
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 2
62221: PUSH
62222: LD_INT 4
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: LD_INT 3
62231: PUSH
62232: LD_INT 5
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: LIST
62243: PUSH
62244: LD_INT 24
62246: PUSH
62247: LD_INT 25
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 23
62256: PUSH
62257: LD_INT 27
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_INT 42
62270: PUSH
62271: LD_INT 43
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 44
62280: PUSH
62281: LD_INT 46
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 45
62290: PUSH
62291: LD_INT 47
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: LIST
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: LIST
62307: ST_TO_ADDR
// result := [ ] ;
62308: LD_ADDR_VAR 0 3
62312: PUSH
62313: EMPTY
62314: ST_TO_ADDR
// for i in turrets do
62315: LD_ADDR_VAR 0 4
62319: PUSH
62320: LD_VAR 0 1
62324: PUSH
62325: FOR_IN
62326: IFFALSE 62509
// begin nat := GetNation ( i ) ;
62328: LD_ADDR_VAR 0 7
62332: PUSH
62333: LD_VAR 0 4
62337: PPUSH
62338: CALL_OW 248
62342: ST_TO_ADDR
// weapon := 0 ;
62343: LD_ADDR_VAR 0 8
62347: PUSH
62348: LD_INT 0
62350: ST_TO_ADDR
// if not nat then
62351: LD_VAR 0 7
62355: NOT
62356: IFFALSE 62360
// continue ;
62358: GO 62325
// for j in list [ nat ] do
62360: LD_ADDR_VAR 0 5
62364: PUSH
62365: LD_VAR 0 10
62369: PUSH
62370: LD_VAR 0 7
62374: ARRAY
62375: PUSH
62376: FOR_IN
62377: IFFALSE 62418
// if GetBWeapon ( i ) = j [ 1 ] then
62379: LD_VAR 0 4
62383: PPUSH
62384: CALL_OW 269
62388: PUSH
62389: LD_VAR 0 5
62393: PUSH
62394: LD_INT 1
62396: ARRAY
62397: EQUAL
62398: IFFALSE 62416
// begin weapon := j [ 2 ] ;
62400: LD_ADDR_VAR 0 8
62404: PUSH
62405: LD_VAR 0 5
62409: PUSH
62410: LD_INT 2
62412: ARRAY
62413: ST_TO_ADDR
// break ;
62414: GO 62418
// end ;
62416: GO 62376
62418: POP
62419: POP
// if not weapon then
62420: LD_VAR 0 8
62424: NOT
62425: IFFALSE 62429
// continue ;
62427: GO 62325
// for k in factories do
62429: LD_ADDR_VAR 0 6
62433: PUSH
62434: LD_VAR 0 2
62438: PUSH
62439: FOR_IN
62440: IFFALSE 62505
// begin weapons := AvailableWeaponList ( k ) ;
62442: LD_ADDR_VAR 0 9
62446: PUSH
62447: LD_VAR 0 6
62451: PPUSH
62452: CALL_OW 478
62456: ST_TO_ADDR
// if not weapons then
62457: LD_VAR 0 9
62461: NOT
62462: IFFALSE 62466
// continue ;
62464: GO 62439
// if weapon in weapons then
62466: LD_VAR 0 8
62470: PUSH
62471: LD_VAR 0 9
62475: IN
62476: IFFALSE 62503
// begin result := [ i , weapon ] ;
62478: LD_ADDR_VAR 0 3
62482: PUSH
62483: LD_VAR 0 4
62487: PUSH
62488: LD_VAR 0 8
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: ST_TO_ADDR
// exit ;
62497: POP
62498: POP
62499: POP
62500: POP
62501: GO 62511
// end ; end ;
62503: GO 62439
62505: POP
62506: POP
// end ;
62507: GO 62325
62509: POP
62510: POP
// end ;
62511: LD_VAR 0 3
62515: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62516: LD_INT 0
62518: PPUSH
// if not side or side > 8 then
62519: LD_VAR 0 3
62523: NOT
62524: PUSH
62525: LD_VAR 0 3
62529: PUSH
62530: LD_INT 8
62532: GREATER
62533: OR
62534: IFFALSE 62538
// exit ;
62536: GO 62597
// if not range then
62538: LD_VAR 0 4
62542: NOT
62543: IFFALSE 62554
// range := - 12 ;
62545: LD_ADDR_VAR 0 4
62549: PUSH
62550: LD_INT 12
62552: NEG
62553: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62554: LD_VAR 0 1
62558: PPUSH
62559: LD_VAR 0 2
62563: PPUSH
62564: LD_VAR 0 3
62568: PPUSH
62569: LD_VAR 0 4
62573: PPUSH
62574: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62578: LD_VAR 0 1
62582: PPUSH
62583: LD_VAR 0 2
62587: PPUSH
62588: LD_VAR 0 3
62592: PPUSH
62593: CALL_OW 331
// end ;
62597: LD_VAR 0 5
62601: RET
// export function Video ( mode ) ; begin
62602: LD_INT 0
62604: PPUSH
// ingame_video = mode ;
62605: LD_ADDR_OWVAR 52
62609: PUSH
62610: LD_VAR 0 1
62614: ST_TO_ADDR
// interface_hidden = mode ;
62615: LD_ADDR_OWVAR 54
62619: PUSH
62620: LD_VAR 0 1
62624: ST_TO_ADDR
// end ;
62625: LD_VAR 0 2
62629: RET
// export function Join ( array , element ) ; begin
62630: LD_INT 0
62632: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62633: LD_ADDR_VAR 0 3
62637: PUSH
62638: LD_VAR 0 1
62642: PPUSH
62643: LD_VAR 0 1
62647: PUSH
62648: LD_INT 1
62650: PLUS
62651: PPUSH
62652: LD_VAR 0 2
62656: PPUSH
62657: CALL_OW 1
62661: ST_TO_ADDR
// end ;
62662: LD_VAR 0 3
62666: RET
// export function JoinUnion ( array , element ) ; begin
62667: LD_INT 0
62669: PPUSH
// result := array union element ;
62670: LD_ADDR_VAR 0 3
62674: PUSH
62675: LD_VAR 0 1
62679: PUSH
62680: LD_VAR 0 2
62684: UNION
62685: ST_TO_ADDR
// end ;
62686: LD_VAR 0 3
62690: RET
// export function GetBehemoths ( side ) ; begin
62691: LD_INT 0
62693: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
62694: LD_ADDR_VAR 0 2
62698: PUSH
62699: LD_INT 22
62701: PUSH
62702: LD_VAR 0 1
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 31
62713: PUSH
62714: LD_INT 25
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: PPUSH
62725: CALL_OW 69
62729: ST_TO_ADDR
// end ;
62730: LD_VAR 0 2
62734: RET
// export function Shuffle ( array ) ; var i , index ; begin
62735: LD_INT 0
62737: PPUSH
62738: PPUSH
62739: PPUSH
// result := [ ] ;
62740: LD_ADDR_VAR 0 2
62744: PUSH
62745: EMPTY
62746: ST_TO_ADDR
// if not array then
62747: LD_VAR 0 1
62751: NOT
62752: IFFALSE 62756
// exit ;
62754: GO 62855
// Randomize ;
62756: CALL_OW 10
// for i = array downto 1 do
62760: LD_ADDR_VAR 0 3
62764: PUSH
62765: DOUBLE
62766: LD_VAR 0 1
62770: INC
62771: ST_TO_ADDR
62772: LD_INT 1
62774: PUSH
62775: FOR_DOWNTO
62776: IFFALSE 62853
// begin index := rand ( 1 , array ) ;
62778: LD_ADDR_VAR 0 4
62782: PUSH
62783: LD_INT 1
62785: PPUSH
62786: LD_VAR 0 1
62790: PPUSH
62791: CALL_OW 12
62795: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62796: LD_ADDR_VAR 0 2
62800: PUSH
62801: LD_VAR 0 2
62805: PPUSH
62806: LD_VAR 0 2
62810: PUSH
62811: LD_INT 1
62813: PLUS
62814: PPUSH
62815: LD_VAR 0 1
62819: PUSH
62820: LD_VAR 0 4
62824: ARRAY
62825: PPUSH
62826: CALL_OW 2
62830: ST_TO_ADDR
// array := Delete ( array , index ) ;
62831: LD_ADDR_VAR 0 1
62835: PUSH
62836: LD_VAR 0 1
62840: PPUSH
62841: LD_VAR 0 4
62845: PPUSH
62846: CALL_OW 3
62850: ST_TO_ADDR
// end ;
62851: GO 62775
62853: POP
62854: POP
// end ;
62855: LD_VAR 0 2
62859: RET
// export function GetBaseMaterials ( base ) ; begin
62860: LD_INT 0
62862: PPUSH
// result := [ 0 , 0 , 0 ] ;
62863: LD_ADDR_VAR 0 2
62867: PUSH
62868: LD_INT 0
62870: PUSH
62871: LD_INT 0
62873: PUSH
62874: LD_INT 0
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: LIST
62881: ST_TO_ADDR
// if not base then
62882: LD_VAR 0 1
62886: NOT
62887: IFFALSE 62891
// exit ;
62889: GO 62940
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62891: LD_ADDR_VAR 0 2
62895: PUSH
62896: LD_VAR 0 1
62900: PPUSH
62901: LD_INT 1
62903: PPUSH
62904: CALL_OW 275
62908: PUSH
62909: LD_VAR 0 1
62913: PPUSH
62914: LD_INT 2
62916: PPUSH
62917: CALL_OW 275
62921: PUSH
62922: LD_VAR 0 1
62926: PPUSH
62927: LD_INT 3
62929: PPUSH
62930: CALL_OW 275
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: LIST
62939: ST_TO_ADDR
// end ;
62940: LD_VAR 0 2
62944: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62945: LD_INT 0
62947: PPUSH
62948: PPUSH
// result := array ;
62949: LD_ADDR_VAR 0 3
62953: PUSH
62954: LD_VAR 0 1
62958: ST_TO_ADDR
// if size > 0 then
62959: LD_VAR 0 2
62963: PUSH
62964: LD_INT 0
62966: GREATER
62967: IFFALSE 63013
// for i := array downto size do
62969: LD_ADDR_VAR 0 4
62973: PUSH
62974: DOUBLE
62975: LD_VAR 0 1
62979: INC
62980: ST_TO_ADDR
62981: LD_VAR 0 2
62985: PUSH
62986: FOR_DOWNTO
62987: IFFALSE 63011
// result := Delete ( result , result ) ;
62989: LD_ADDR_VAR 0 3
62993: PUSH
62994: LD_VAR 0 3
62998: PPUSH
62999: LD_VAR 0 3
63003: PPUSH
63004: CALL_OW 3
63008: ST_TO_ADDR
63009: GO 62986
63011: POP
63012: POP
// end ;
63013: LD_VAR 0 3
63017: RET
// export function ComExit ( unit ) ; var tmp ; begin
63018: LD_INT 0
63020: PPUSH
63021: PPUSH
// if not IsInUnit ( unit ) then
63022: LD_VAR 0 1
63026: PPUSH
63027: CALL_OW 310
63031: NOT
63032: IFFALSE 63036
// exit ;
63034: GO 63096
// tmp := IsInUnit ( unit ) ;
63036: LD_ADDR_VAR 0 3
63040: PUSH
63041: LD_VAR 0 1
63045: PPUSH
63046: CALL_OW 310
63050: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63051: LD_VAR 0 3
63055: PPUSH
63056: CALL_OW 247
63060: PUSH
63061: LD_INT 2
63063: EQUAL
63064: IFFALSE 63077
// ComExitVehicle ( unit ) else
63066: LD_VAR 0 1
63070: PPUSH
63071: CALL_OW 121
63075: GO 63086
// ComExitBuilding ( unit ) ;
63077: LD_VAR 0 1
63081: PPUSH
63082: CALL_OW 122
// result := tmp ;
63086: LD_ADDR_VAR 0 2
63090: PUSH
63091: LD_VAR 0 3
63095: ST_TO_ADDR
// end ;
63096: LD_VAR 0 2
63100: RET
// export function ResetHc ; begin
63101: LD_INT 0
63103: PPUSH
// InitHc ;
63104: CALL_OW 19
// hc_importance := 0 ;
63108: LD_ADDR_OWVAR 32
63112: PUSH
63113: LD_INT 0
63115: ST_TO_ADDR
// end ;
63116: LD_VAR 0 1
63120: RET
