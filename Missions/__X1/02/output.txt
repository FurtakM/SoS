// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 46 0 0
// PrepareNature ;
  19: CALL 558 0 0
// PrepareAmericans ;
  23: CALL 804 0 0
// PrepareArabian ;
  27: CALL 5563 0 0
// if debug then
  31: LD_EXP 1
  35: IFFALSE 41
// DebugMode ;
  37: CALL 167 0 0
// Action ;
  41: CALL 2520 0 0
// end ;
  45: END
// export debug , prefix , missionStart , aviradzeSpotted , deltaSpotted , sciSpotted , aviradzeQuestDone , sciCounterKill , usAlert , usActiveDefend , timeUntilFarmer , attackDeltaAllowed ; function Init ; begin
  46: LD_INT 0
  48: PPUSH
// debug := true ;
  49: LD_ADDR_EXP 1
  53: PUSH
  54: LD_INT 1
  56: ST_TO_ADDR
// missionStart := false ;
  57: LD_ADDR_EXP 3
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// aviradzeSpotted := false ;
  65: LD_ADDR_EXP 4
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// deltaSpotted := false ;
  73: LD_ADDR_EXP 5
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// sciSpotted := false ;
  81: LD_ADDR_EXP 6
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// sciCounterKill := 0 ;
  89: LD_ADDR_EXP 8
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// aviradzeQuestDone := false ;
  97: LD_ADDR_EXP 7
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// attackDeltaAllowed := false ;
 105: LD_ADDR_EXP 12
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usAlert := false ;
 113: LD_ADDR_EXP 9
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// usActiveDefend := false ;
 121: LD_ADDR_EXP 10
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// timeUntilFarmer := [ 40 40$00 , 30 30$00 , 20 20$00 ] [ Difficulty ] ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 84000
 136: PUSH
 137: LD_INT 63000
 139: PUSH
 140: LD_INT 42000
 142: PUSH
 143: EMPTY
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_OWVAR 67
 152: ARRAY
 153: ST_TO_ADDR
// prefix := 01 ;
 154: LD_ADDR_EXP 2
 158: PUSH
 159: LD_STRING 01
 161: ST_TO_ADDR
// end ;
 162: LD_VAR 0 1
 166: RET
// function DebugMode ; begin
 167: LD_INT 0
 169: PPUSH
// FogOff ( 1 ) ;
 170: LD_INT 1
 172: PPUSH
 173: CALL_OW 344
// Difficulty := 2 ;
 177: LD_ADDR_OWVAR 67
 181: PUSH
 182: LD_INT 2
 184: ST_TO_ADDR
// end ; end_of_file
 185: LD_VAR 0 1
 189: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 190: LD_INT 0
 192: PPUSH
 193: PPUSH
// if exist_mode then
 194: LD_VAR 0 2
 198: IFFALSE 223
// unit := CreateCharacter ( prefix & ident ) else
 200: LD_ADDR_VAR 0 5
 204: PUSH
 205: LD_VAR 0 3
 209: PUSH
 210: LD_VAR 0 1
 214: STR
 215: PPUSH
 216: CALL_OW 34
 220: ST_TO_ADDR
 221: GO 238
// unit := NewCharacter ( ident ) ;
 223: LD_ADDR_VAR 0 5
 227: PUSH
 228: LD_VAR 0 1
 232: PPUSH
 233: CALL_OW 25
 237: ST_TO_ADDR
// result := unit ;
 238: LD_ADDR_VAR 0 4
 242: PUSH
 243: LD_VAR 0 5
 247: ST_TO_ADDR
// end ;
 248: LD_VAR 0 4
 252: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 253: LD_INT 0
 255: PPUSH
// uc_side := side ;
 256: LD_ADDR_OWVAR 20
 260: PUSH
 261: LD_VAR 0 1
 265: ST_TO_ADDR
// uc_nation := nation ;
 266: LD_ADDR_OWVAR 21
 270: PUSH
 271: LD_VAR 0 2
 275: ST_TO_ADDR
// vc_chassis := chassis ;
 276: LD_ADDR_OWVAR 37
 280: PUSH
 281: LD_VAR 0 3
 285: ST_TO_ADDR
// vc_engine := engine ;
 286: LD_ADDR_OWVAR 39
 290: PUSH
 291: LD_VAR 0 4
 295: ST_TO_ADDR
// vc_control := control ;
 296: LD_ADDR_OWVAR 38
 300: PUSH
 301: LD_VAR 0 5
 305: ST_TO_ADDR
// vc_weapon := weapon ;
 306: LD_ADDR_OWVAR 40
 310: PUSH
 311: LD_VAR 0 6
 315: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 316: LD_ADDR_OWVAR 41
 320: PUSH
 321: LD_VAR 0 7
 325: ST_TO_ADDR
// result := CreateVehicle ;
 326: LD_ADDR_VAR 0 8
 330: PUSH
 331: CALL_OW 45
 335: ST_TO_ADDR
// end ;
 336: LD_VAR 0 8
 340: RET
// export function SayX ( units , ident ) ; var i ; begin
 341: LD_INT 0
 343: PPUSH
 344: PPUSH
// result := false ;
 345: LD_ADDR_VAR 0 3
 349: PUSH
 350: LD_INT 0
 352: ST_TO_ADDR
// if not units then
 353: LD_VAR 0 1
 357: NOT
 358: IFFALSE 362
// exit ;
 360: GO 416
// for i in units do
 362: LD_ADDR_VAR 0 4
 366: PUSH
 367: LD_VAR 0 1
 371: PUSH
 372: FOR_IN
 373: IFFALSE 414
// if IsOk ( i ) then
 375: LD_VAR 0 4
 379: PPUSH
 380: CALL_OW 302
 384: IFFALSE 412
// begin Say ( i , ident ) ;
 386: LD_VAR 0 4
 390: PPUSH
 391: LD_VAR 0 2
 395: PPUSH
 396: CALL_OW 88
// result := i ;
 400: LD_ADDR_VAR 0 3
 404: PUSH
 405: LD_VAR 0 4
 409: ST_TO_ADDR
// break ;
 410: GO 414
// end ;
 412: GO 372
 414: POP
 415: POP
// end ;
 416: LD_VAR 0 3
 420: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 421: LD_INT 0
 423: PPUSH
 424: PPUSH
// InitUc ;
 425: CALL_OW 18
// InitHc ;
 429: CALL_OW 19
// uc_side := 0 ;
 433: LD_ADDR_OWVAR 20
 437: PUSH
 438: LD_INT 0
 440: ST_TO_ADDR
// uc_nation := 0 ;
 441: LD_ADDR_OWVAR 21
 445: PUSH
 446: LD_INT 0
 448: ST_TO_ADDR
// for i = 1 to amount do
 449: LD_ADDR_VAR 0 4
 453: PUSH
 454: DOUBLE
 455: LD_INT 1
 457: DEC
 458: ST_TO_ADDR
 459: LD_VAR 0 2
 463: PUSH
 464: FOR_TO
 465: IFFALSE 547
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 467: LD_ADDR_OWVAR 29
 471: PUSH
 472: LD_INT 9
 474: PPUSH
 475: LD_INT 12
 477: PPUSH
 478: CALL_OW 12
 482: PUSH
 483: LD_INT 9
 485: PPUSH
 486: LD_INT 12
 488: PPUSH
 489: CALL_OW 12
 493: PUSH
 494: EMPTY
 495: LIST
 496: LIST
 497: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) ;
 498: LD_ADDR_OWVAR 35
 502: PUSH
 503: LD_INT 5
 505: NEG
 506: PPUSH
 507: LD_INT 5
 509: PPUSH
 510: CALL_OW 12
 514: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 515: LD_INT 0
 517: PPUSH
 518: LD_INT 12
 520: PPUSH
 521: LD_INT 1
 523: PPUSH
 524: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 528: CALL_OW 44
 532: PPUSH
 533: LD_VAR 0 1
 537: PPUSH
 538: LD_INT 0
 540: PPUSH
 541: CALL_OW 49
// end ;
 545: GO 464
 547: POP
 548: POP
// InitHc ;
 549: CALL_OW 19
// end ;
 553: LD_VAR 0 3
 557: RET
// export function PrepareNature ; var i ; begin
 558: LD_INT 0
 560: PPUSH
 561: PPUSH
// SpawnApeman ( forest , 9 ) ;
 562: LD_INT 1
 564: PPUSH
 565: LD_INT 9
 567: PPUSH
 568: CALL 421 0 2
// for i := 1 to 4 do
 572: LD_ADDR_VAR 0 2
 576: PUSH
 577: DOUBLE
 578: LD_INT 1
 580: DEC
 581: ST_TO_ADDR
 582: LD_INT 4
 584: PUSH
 585: FOR_TO
 586: IFFALSE 621
// begin hc_class := 21 ;
 588: LD_ADDR_OWVAR 28
 592: PUSH
 593: LD_INT 21
 595: ST_TO_ADDR
// hc_gallery :=  ;
 596: LD_ADDR_OWVAR 33
 600: PUSH
 601: LD_STRING 
 603: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 604: CALL_OW 44
 608: PPUSH
 609: LD_INT 1
 611: PPUSH
 612: LD_INT 0
 614: PPUSH
 615: CALL_OW 49
// end ;
 619: GO 585
 621: POP
 622: POP
// for i := 1 to 2 do
 623: LD_ADDR_VAR 0 2
 627: PUSH
 628: DOUBLE
 629: LD_INT 1
 631: DEC
 632: ST_TO_ADDR
 633: LD_INT 2
 635: PUSH
 636: FOR_TO
 637: IFFALSE 672
// begin hc_class := 18 ;
 639: LD_ADDR_OWVAR 28
 643: PUSH
 644: LD_INT 18
 646: ST_TO_ADDR
// hc_gallery :=  ;
 647: LD_ADDR_OWVAR 33
 651: PUSH
 652: LD_STRING 
 654: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 655: CALL_OW 44
 659: PPUSH
 660: LD_INT 1
 662: PPUSH
 663: LD_INT 0
 665: PPUSH
 666: CALL_OW 49
// end ;
 670: GO 636
 672: POP
 673: POP
// for i := 1 to 3 do
 674: LD_ADDR_VAR 0 2
 678: PUSH
 679: DOUBLE
 680: LD_INT 1
 682: DEC
 683: ST_TO_ADDR
 684: LD_INT 3
 686: PUSH
 687: FOR_TO
 688: IFFALSE 723
// begin hc_class := 13 ;
 690: LD_ADDR_OWVAR 28
 694: PUSH
 695: LD_INT 13
 697: ST_TO_ADDR
// hc_gallery :=  ;
 698: LD_ADDR_OWVAR 33
 702: PUSH
 703: LD_STRING 
 705: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 706: CALL_OW 44
 710: PPUSH
 711: LD_INT 1
 713: PPUSH
 714: LD_INT 0
 716: PPUSH
 717: CALL_OW 49
// end ;
 721: GO 687
 723: POP
 724: POP
// end ;
 725: LD_VAR 0 1
 729: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 730: LD_INT 0
 732: PPUSH
 733: PPUSH
 734: PPUSH
// if not observer or not unit then
 735: LD_VAR 0 1
 739: NOT
 740: PUSH
 741: LD_VAR 0 2
 745: NOT
 746: OR
 747: IFFALSE 751
// exit ;
 749: GO 799
// if not See ( GetSide ( observer ) , unit ) then
 751: LD_VAR 0 1
 755: PPUSH
 756: CALL_OW 255
 760: PPUSH
 761: LD_VAR 0 2
 765: PPUSH
 766: CALL_OW 292
 770: NOT
 771: IFFALSE 775
// exit ;
 773: GO 799
// result := GetDistUnits ( observer , unit ) < 12 ;
 775: LD_ADDR_VAR 0 3
 779: PUSH
 780: LD_VAR 0 1
 784: PPUSH
 785: LD_VAR 0 2
 789: PPUSH
 790: CALL_OW 296
 794: PUSH
 795: LD_INT 12
 797: LESS
 798: ST_TO_ADDR
// end ; end_of_file
 799: LD_VAR 0 3
 803: RET
// export Gladstone , Lynch ; export usForces , usSci ; export function PrepareAmericans ; var i , un , veh , tmp , arm ; begin
 804: LD_INT 0
 806: PPUSH
 807: PPUSH
 808: PPUSH
 809: PPUSH
 810: PPUSH
 811: PPUSH
// usForces := [ ] ;
 812: LD_ADDR_EXP 15
 816: PUSH
 817: EMPTY
 818: ST_TO_ADDR
// usSci := [ ] ;
 819: LD_ADDR_EXP 16
 823: PUSH
 824: EMPTY
 825: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
 826: LD_INT 1
 828: PPUSH
 829: LD_STRING Delta
 831: PPUSH
 832: CALL_OW 500
// SetResourceType ( GetBase ( Delta ) , mat_cans , 400 ) ;
 836: LD_INT 1
 838: PPUSH
 839: CALL_OW 274
 843: PPUSH
 844: LD_INT 1
 846: PPUSH
 847: LD_INT 400
 849: PPUSH
 850: CALL_OW 277
// SetResourceType ( GetBase ( Delta ) , mat_oil , 80 ) ;
 854: LD_INT 1
 856: PPUSH
 857: CALL_OW 274
 861: PPUSH
 862: LD_INT 2
 864: PPUSH
 865: LD_INT 80
 867: PPUSH
 868: CALL_OW 277
// uc_side := 1 ;
 872: LD_ADDR_OWVAR 20
 876: PUSH
 877: LD_INT 1
 879: ST_TO_ADDR
// uc_nation := 1 ;
 880: LD_ADDR_OWVAR 21
 884: PUSH
 885: LD_INT 1
 887: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
 888: LD_ADDR_EXP 14
 892: PUSH
 893: LD_STRING Lynch
 895: PPUSH
 896: LD_INT 0
 898: PPUSH
 899: LD_STRING 
 901: PPUSH
 902: CALL 190 0 3
 906: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false ,  ) ;
 907: LD_ADDR_EXP 13
 911: PUSH
 912: LD_STRING Gladstone
 914: PPUSH
 915: LD_INT 0
 917: PPUSH
 918: LD_STRING 
 920: PPUSH
 921: CALL 190 0 3
 925: ST_TO_ADDR
// PlaceHumanInUnit ( Lynch , Delta ) ;
 926: LD_EXP 14
 930: PPUSH
 931: LD_INT 1
 933: PPUSH
 934: CALL_OW 52
// PlaceHumanInUnit ( Gladstone , usLab ) ;
 938: LD_EXP 13
 942: PPUSH
 943: LD_INT 3
 945: PPUSH
 946: CALL_OW 52
// for i := 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
 950: LD_ADDR_VAR 0 2
 954: PUSH
 955: DOUBLE
 956: LD_INT 1
 958: DEC
 959: ST_TO_ADDR
 960: LD_INT 1
 962: PUSH
 963: LD_INT 2
 965: PUSH
 966: LD_INT 2
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: LIST
 973: PUSH
 974: LD_OWVAR 67
 978: ARRAY
 979: PUSH
 980: FOR_TO
 981: IFFALSE 1027
// begin PrepareHuman ( false , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
 983: LD_INT 0
 985: PPUSH
 986: LD_INT 2
 988: PPUSH
 989: LD_INT 1
 991: PUSH
 992: LD_INT 2
 994: PUSH
 995: LD_INT 2
 997: PUSH
 998: EMPTY
 999: LIST
1000: LIST
1001: LIST
1002: PUSH
1003: LD_OWVAR 67
1007: ARRAY
1008: PPUSH
1009: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , Delta ) ;
1013: CALL_OW 44
1017: PPUSH
1018: LD_INT 1
1020: PPUSH
1021: CALL_OW 52
// end ;
1025: GO 980
1027: POP
1028: POP
// for i := 1 to 2 + Difficulty do
1029: LD_ADDR_VAR 0 2
1033: PUSH
1034: DOUBLE
1035: LD_INT 1
1037: DEC
1038: ST_TO_ADDR
1039: LD_INT 2
1041: PUSH
1042: LD_OWVAR 67
1046: PLUS
1047: PUSH
1048: FOR_TO
1049: IFFALSE 1134
// begin PrepareHuman ( false , 4 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
1051: LD_INT 0
1053: PPUSH
1054: LD_INT 4
1056: PPUSH
1057: LD_INT 1
1059: PUSH
1060: LD_INT 2
1062: PUSH
1063: LD_INT 2
1065: PUSH
1066: EMPTY
1067: LIST
1068: LIST
1069: LIST
1070: PUSH
1071: LD_OWVAR 67
1075: ARRAY
1076: PPUSH
1077: CALL_OW 380
// un := CreateHuman ;
1081: LD_ADDR_VAR 0 3
1085: PUSH
1086: CALL_OW 44
1090: ST_TO_ADDR
// PlaceHumanInUnit ( un , usLab ) ;
1091: LD_VAR 0 3
1095: PPUSH
1096: LD_INT 3
1098: PPUSH
1099: CALL_OW 52
// usSci := Replace ( usSci , usSci + 1 , un ) ;
1103: LD_ADDR_EXP 16
1107: PUSH
1108: LD_EXP 16
1112: PPUSH
1113: LD_EXP 16
1117: PUSH
1118: LD_INT 1
1120: PLUS
1121: PPUSH
1122: LD_VAR 0 3
1126: PPUSH
1127: CALL_OW 1
1131: ST_TO_ADDR
// end ;
1132: GO 1048
1134: POP
1135: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
1136: LD_ADDR_VAR 0 6
1140: PUSH
1141: LD_INT 22
1143: PUSH
1144: LD_INT 1
1146: PUSH
1147: EMPTY
1148: LIST
1149: LIST
1150: PUSH
1151: LD_INT 30
1153: PUSH
1154: LD_INT 4
1156: PUSH
1157: EMPTY
1158: LIST
1159: LIST
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: PPUSH
1165: CALL_OW 69
1169: ST_TO_ADDR
// for i := 1 to 3 + Difficulty do
1170: LD_ADDR_VAR 0 2
1174: PUSH
1175: DOUBLE
1176: LD_INT 1
1178: DEC
1179: ST_TO_ADDR
1180: LD_INT 3
1182: PUSH
1183: LD_OWVAR 67
1187: PLUS
1188: PUSH
1189: FOR_TO
1190: IFFALSE 1268
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
1192: LD_INT 0
1194: PPUSH
1195: LD_INT 1
1197: PPUSH
1198: LD_INT 1
1200: PUSH
1201: LD_INT 2
1203: PUSH
1204: LD_INT 3
1206: PUSH
1207: EMPTY
1208: LIST
1209: LIST
1210: LIST
1211: PUSH
1212: LD_OWVAR 67
1216: ARRAY
1217: PPUSH
1218: CALL_OW 380
// un := CreateHuman ;
1222: LD_ADDR_VAR 0 3
1226: PUSH
1227: CALL_OW 44
1231: ST_TO_ADDR
// usForces := usForces ^ un ;
1232: LD_ADDR_EXP 15
1236: PUSH
1237: LD_EXP 15
1241: PUSH
1242: LD_VAR 0 3
1246: ADD
1247: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm [ 1 ] ) ;
1248: LD_VAR 0 3
1252: PPUSH
1253: LD_VAR 0 6
1257: PUSH
1258: LD_INT 1
1260: ARRAY
1261: PPUSH
1262: CALL_OW 52
// end ;
1266: GO 1189
1268: POP
1269: POP
// PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 100 ) ;
1270: LD_INT 1
1272: PPUSH
1273: LD_INT 1
1275: PPUSH
1276: LD_INT 1
1278: PPUSH
1279: LD_INT 2
1281: PPUSH
1282: LD_INT 1
1284: PPUSH
1285: LD_INT 2
1287: PPUSH
1288: LD_INT 100
1290: PPUSH
1291: CALL 253 0 7
// veh := CreateVehicle ;
1295: LD_ADDR_VAR 0 4
1299: PUSH
1300: CALL_OW 45
1304: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1305: LD_VAR 0 4
1309: PPUSH
1310: LD_INT 2
1312: PPUSH
1313: CALL_OW 233
// PlaceUnitXY ( veh , 43 , 24 , false ) ;
1317: LD_VAR 0 4
1321: PPUSH
1322: LD_INT 43
1324: PPUSH
1325: LD_INT 24
1327: PPUSH
1328: LD_INT 0
1330: PPUSH
1331: CALL_OW 48
// end ;
1335: LD_VAR 0 1
1339: RET
// export function SendSciToForest ; var i , j , k , tmp , xy ; begin
1340: LD_INT 0
1342: PPUSH
1343: PPUSH
1344: PPUSH
1345: PPUSH
1346: PPUSH
1347: PPUSH
// if not usSci then
1348: LD_EXP 16
1352: NOT
1353: IFFALSE 1357
// exit ;
1355: GO 1531
// xy := AreaToList ( tameArea , 0 ) ;
1357: LD_ADDR_VAR 0 6
1361: PUSH
1362: LD_INT 5
1364: PPUSH
1365: LD_INT 0
1367: PPUSH
1368: CALL_OW 517
1372: ST_TO_ADDR
// for i in usSci do
1373: LD_ADDR_VAR 0 2
1377: PUSH
1378: LD_EXP 16
1382: PUSH
1383: FOR_IN
1384: IFFALSE 1529
// begin k := rand ( 1 , xy [ 1 ] ) ;
1386: LD_ADDR_VAR 0 4
1390: PUSH
1391: LD_INT 1
1393: PPUSH
1394: LD_VAR 0 6
1398: PUSH
1399: LD_INT 1
1401: ARRAY
1402: PPUSH
1403: CALL_OW 12
1407: ST_TO_ADDR
// ComExitBuilding ( i ) ;
1408: LD_VAR 0 2
1412: PPUSH
1413: CALL_OW 122
// AddComMoveXY ( i , xy [ 1 ] [ k ] , xy [ 2 ] [ k ] ) ;
1417: LD_VAR 0 2
1421: PPUSH
1422: LD_VAR 0 6
1426: PUSH
1427: LD_INT 1
1429: ARRAY
1430: PUSH
1431: LD_VAR 0 4
1435: ARRAY
1436: PPUSH
1437: LD_VAR 0 6
1441: PUSH
1442: LD_INT 2
1444: ARRAY
1445: PUSH
1446: LD_VAR 0 4
1450: ARRAY
1451: PPUSH
1452: CALL_OW 171
// for j := 1 to 2 do
1456: LD_ADDR_VAR 0 3
1460: PUSH
1461: DOUBLE
1462: LD_INT 1
1464: DEC
1465: ST_TO_ADDR
1466: LD_INT 2
1468: PUSH
1469: FOR_TO
1470: IFFALSE 1525
// begin tmp := Delete ( xy [ j ] , k ) ;
1472: LD_ADDR_VAR 0 5
1476: PUSH
1477: LD_VAR 0 6
1481: PUSH
1482: LD_VAR 0 3
1486: ARRAY
1487: PPUSH
1488: LD_VAR 0 4
1492: PPUSH
1493: CALL_OW 3
1497: ST_TO_ADDR
// xy := Replace ( xy , j , tmp ) ;
1498: LD_ADDR_VAR 0 6
1502: PUSH
1503: LD_VAR 0 6
1507: PPUSH
1508: LD_VAR 0 3
1512: PPUSH
1513: LD_VAR 0 5
1517: PPUSH
1518: CALL_OW 1
1522: ST_TO_ADDR
// end ;
1523: GO 1469
1525: POP
1526: POP
// end ;
1527: GO 1383
1529: POP
1530: POP
// end ;
1531: LD_VAR 0 1
1535: RET
// every 0 0$5 + 0 0$10 trigger usSci and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do var i , x , y , d , ape ;
1536: LD_EXP 16
1540: PUSH
1541: LD_INT 22
1543: PUSH
1544: LD_INT 0
1546: PUSH
1547: EMPTY
1548: LIST
1549: LIST
1550: PUSH
1551: LD_INT 25
1553: PUSH
1554: LD_INT 12
1556: PUSH
1557: EMPTY
1558: LIST
1559: LIST
1560: PUSH
1561: EMPTY
1562: LIST
1563: LIST
1564: PPUSH
1565: CALL_OW 69
1569: AND
1570: IFFALSE 1961
1572: GO 1574
1574: DISABLE
1575: LD_INT 0
1577: PPUSH
1578: PPUSH
1579: PPUSH
1580: PPUSH
1581: PPUSH
// begin enable ;
1582: ENABLE
// if UnitFilter ( usSci , [ f_or , [ f_hastask ] , [ f_inside ] ] ) then
1583: LD_EXP 16
1587: PPUSH
1588: LD_INT 2
1590: PUSH
1591: LD_INT 60
1593: PUSH
1594: EMPTY
1595: LIST
1596: PUSH
1597: LD_INT 54
1599: PUSH
1600: EMPTY
1601: LIST
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: LIST
1607: PPUSH
1608: CALL_OW 72
1612: IFFALSE 1616
// exit ;
1614: GO 1961
// for i in usSci do
1616: LD_ADDR_VAR 0 1
1620: PUSH
1621: LD_EXP 16
1625: PUSH
1626: FOR_IN
1627: IFFALSE 1959
// begin if not HasTask ( i ) and GetLives ( i ) = 1000 then
1629: LD_VAR 0 1
1633: PPUSH
1634: CALL_OW 314
1638: NOT
1639: PUSH
1640: LD_VAR 0 1
1644: PPUSH
1645: CALL_OW 256
1649: PUSH
1650: LD_INT 1000
1652: EQUAL
1653: AND
1654: IFFALSE 1861
// begin ape := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) , i ) ;
1656: LD_ADDR_VAR 0 5
1660: PUSH
1661: LD_INT 22
1663: PUSH
1664: LD_INT 0
1666: PUSH
1667: EMPTY
1668: LIST
1669: LIST
1670: PUSH
1671: LD_INT 25
1673: PUSH
1674: LD_INT 12
1676: PUSH
1677: EMPTY
1678: LIST
1679: LIST
1680: PUSH
1681: EMPTY
1682: LIST
1683: LIST
1684: PPUSH
1685: CALL_OW 69
1689: PPUSH
1690: LD_VAR 0 1
1694: PPUSH
1695: CALL_OW 74
1699: ST_TO_ADDR
// if GetDistUnits ( i , ape ) < 10 then
1700: LD_VAR 0 1
1704: PPUSH
1705: LD_VAR 0 5
1709: PPUSH
1710: CALL_OW 296
1714: PUSH
1715: LD_INT 10
1717: LESS
1718: IFFALSE 1751
// ComTameXY ( i , GetX ( ape ) , GetY ( ape ) ) else
1720: LD_VAR 0 1
1724: PPUSH
1725: LD_VAR 0 5
1729: PPUSH
1730: CALL_OW 250
1734: PPUSH
1735: LD_VAR 0 5
1739: PPUSH
1740: CALL_OW 251
1744: PPUSH
1745: CALL_OW 131
1749: GO 1861
// begin d := rand ( 0 , 5 ) ;
1751: LD_ADDR_VAR 0 4
1755: PUSH
1756: LD_INT 0
1758: PPUSH
1759: LD_INT 5
1761: PPUSH
1762: CALL_OW 12
1766: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 3 ) ;
1767: LD_ADDR_VAR 0 2
1771: PUSH
1772: LD_VAR 0 1
1776: PPUSH
1777: CALL_OW 250
1781: PPUSH
1782: LD_VAR 0 4
1786: PPUSH
1787: LD_INT 3
1789: PPUSH
1790: CALL_OW 272
1794: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 3 ) ;
1795: LD_ADDR_VAR 0 3
1799: PUSH
1800: LD_VAR 0 1
1804: PPUSH
1805: CALL_OW 251
1809: PPUSH
1810: LD_VAR 0 4
1814: PPUSH
1815: LD_INT 3
1817: PPUSH
1818: CALL_OW 273
1822: ST_TO_ADDR
// if not ValidHex ( x , y ) then
1823: LD_VAR 0 2
1827: PPUSH
1828: LD_VAR 0 3
1832: PPUSH
1833: CALL_OW 488
1837: NOT
1838: IFFALSE 1842
// continue ;
1840: GO 1626
// ComMoveXY ( i , x , y ) ;
1842: LD_VAR 0 1
1846: PPUSH
1847: LD_VAR 0 2
1851: PPUSH
1852: LD_VAR 0 3
1856: PPUSH
1857: CALL_OW 111
// end ; end ; if GetLives ( i ) < 900 and GetDistUnitXY ( i , 37 , 23 ) > 10 then
1861: LD_VAR 0 1
1865: PPUSH
1866: CALL_OW 256
1870: PUSH
1871: LD_INT 900
1873: LESS
1874: PUSH
1875: LD_VAR 0 1
1879: PPUSH
1880: LD_INT 37
1882: PPUSH
1883: LD_INT 23
1885: PPUSH
1886: CALL_OW 297
1890: PUSH
1891: LD_INT 10
1893: GREATER
1894: AND
1895: IFFALSE 1914
// begin ComMoveXY ( i , 37 , 23 ) ;
1897: LD_VAR 0 1
1901: PPUSH
1902: LD_INT 37
1904: PPUSH
1905: LD_INT 23
1907: PPUSH
1908: CALL_OW 111
// end else
1912: GO 1957
// if GetLives ( i ) < 1000 then
1914: LD_VAR 0 1
1918: PPUSH
1919: CALL_OW 256
1923: PUSH
1924: LD_INT 1000
1926: LESS
1927: IFFALSE 1957
// begin AddComEnterUnit ( i , usLab ) ;
1929: LD_VAR 0 1
1933: PPUSH
1934: LD_INT 3
1936: PPUSH
1937: CALL_OW 180
// usSci := usSci diff i ;
1941: LD_ADDR_EXP 16
1945: PUSH
1946: LD_EXP 16
1950: PUSH
1951: LD_VAR 0 1
1955: DIFF
1956: ST_TO_ADDR
// end ; end ;
1957: GO 1626
1959: POP
1960: POP
// end ;
1961: PPOPN 5
1963: END
// every 0 0$1 trigger not usAlert and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 999 ] ] ] ) do
1964: LD_EXP 9
1968: NOT
1969: PUSH
1970: LD_INT 22
1972: PUSH
1973: LD_INT 1
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: PUSH
1980: LD_INT 21
1982: PUSH
1983: LD_INT 3
1985: PUSH
1986: EMPTY
1987: LIST
1988: LIST
1989: PUSH
1990: LD_INT 3
1992: PUSH
1993: LD_INT 57
1995: PUSH
1996: EMPTY
1997: LIST
1998: PUSH
1999: EMPTY
2000: LIST
2001: LIST
2002: PUSH
2003: LD_INT 3
2005: PUSH
2006: LD_INT 24
2008: PUSH
2009: LD_INT 999
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: LIST
2024: LIST
2025: PPUSH
2026: CALL_OW 69
2030: AND
2031: IFFALSE 2044
2033: GO 2035
2035: DISABLE
// usAlert := true ;
2036: LD_ADDR_EXP 9
2040: PUSH
2041: LD_INT 1
2043: ST_TO_ADDR
2044: END
// every 0 0$1 trigger usAlert do var i , b , arm ;
2045: LD_EXP 9
2049: IFFALSE 2396
2051: GO 2053
2053: DISABLE
2054: LD_INT 0
2056: PPUSH
2057: PPUSH
2058: PPUSH
// begin usActiveDefend := true ;
2059: LD_ADDR_EXP 10
2063: PUSH
2064: LD_INT 1
2066: ST_TO_ADDR
// if not usForces then
2067: LD_EXP 15
2071: NOT
2072: IFFALSE 2076
// exit ;
2074: GO 2396
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
2076: LD_ADDR_VAR 0 3
2080: PUSH
2081: LD_INT 22
2083: PUSH
2084: LD_INT 1
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: PUSH
2091: LD_INT 30
2093: PUSH
2094: LD_INT 4
2096: PUSH
2097: EMPTY
2098: LIST
2099: LIST
2100: PUSH
2101: EMPTY
2102: LIST
2103: LIST
2104: PPUSH
2105: CALL_OW 69
2109: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
2110: LD_ADDR_VAR 0 2
2114: PUSH
2115: LD_INT 22
2117: PUSH
2118: LD_INT 1
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: PUSH
2125: LD_INT 30
2127: PUSH
2128: LD_INT 31
2130: PUSH
2131: EMPTY
2132: LIST
2133: LIST
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: PPUSH
2139: CALL_OW 69
2143: ST_TO_ADDR
// ComExitBuilding ( Lynch ) ;
2144: LD_EXP 14
2148: PPUSH
2149: CALL_OW 122
// AddComEnterUnit ( Lynch , arm [ 1 ] ) ;
2153: LD_EXP 14
2157: PPUSH
2158: LD_VAR 0 3
2162: PUSH
2163: LD_INT 1
2165: ARRAY
2166: PPUSH
2167: CALL_OW 180
// if IsOk ( Gladstone ) then
2171: LD_EXP 13
2175: PPUSH
2176: CALL_OW 302
2180: IFFALSE 2221
// begin ComExitBuilding ( Gladstone ) ;
2182: LD_EXP 13
2186: PPUSH
2187: CALL_OW 122
// AddComEnterUnit ( Gladstone , arm [ 1 ] ) ;
2191: LD_EXP 13
2195: PPUSH
2196: LD_VAR 0 3
2200: PUSH
2201: LD_INT 1
2203: ARRAY
2204: PPUSH
2205: CALL_OW 180
// AddComChangeProfession ( Gladstone , class_soldier ) ;
2209: LD_EXP 13
2213: PPUSH
2214: LD_INT 1
2216: PPUSH
2217: CALL_OW 183
// end ; ComExitBuilding ( usForces [ 1 ] ) ;
2221: LD_EXP 15
2225: PUSH
2226: LD_INT 1
2228: ARRAY
2229: PPUSH
2230: CALL_OW 122
// AddComEnterUnit ( usForces [ 1 ] , b [ 1 ] ) ;
2234: LD_EXP 15
2238: PUSH
2239: LD_INT 1
2241: ARRAY
2242: PPUSH
2243: LD_VAR 0 2
2247: PUSH
2248: LD_INT 1
2250: ARRAY
2251: PPUSH
2252: CALL_OW 180
// ComExitBuilding ( usForces [ 2 ] ) ;
2256: LD_EXP 15
2260: PUSH
2261: LD_INT 2
2263: ARRAY
2264: PPUSH
2265: CALL_OW 122
// AddComEnterUnit ( usForces [ 2 ] , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
2269: LD_EXP 15
2273: PUSH
2274: LD_INT 2
2276: ARRAY
2277: PPUSH
2278: LD_INT 22
2280: PUSH
2281: LD_INT 1
2283: PUSH
2284: EMPTY
2285: LIST
2286: LIST
2287: PUSH
2288: LD_INT 30
2290: PUSH
2291: LD_INT 32
2293: PUSH
2294: EMPTY
2295: LIST
2296: LIST
2297: PUSH
2298: EMPTY
2299: LIST
2300: LIST
2301: PPUSH
2302: CALL_OW 69
2306: PUSH
2307: LD_INT 1
2309: ARRAY
2310: PPUSH
2311: CALL_OW 180
// if b > 1 and usForces > 2 then
2315: LD_VAR 0 2
2319: PUSH
2320: LD_INT 1
2322: GREATER
2323: PUSH
2324: LD_EXP 15
2328: PUSH
2329: LD_INT 2
2331: GREATER
2332: AND
2333: IFFALSE 2396
// begin repeat wait ( 0 0$1 ) ;
2335: LD_INT 35
2337: PPUSH
2338: CALL_OW 67
// until BuildingStatus ( b [ 2 ] ) <> bs_build ;
2342: LD_VAR 0 2
2346: PUSH
2347: LD_INT 2
2349: ARRAY
2350: PPUSH
2351: CALL_OW 461
2355: PUSH
2356: LD_INT 1
2358: NONEQUAL
2359: IFFALSE 2335
// ComExitBuilding ( usForces [ 3 ] ) ;
2361: LD_EXP 15
2365: PUSH
2366: LD_INT 3
2368: ARRAY
2369: PPUSH
2370: CALL_OW 122
// AddComEnterUnit ( usForces [ 3 ] , b [ 2 ] ) ;
2374: LD_EXP 15
2378: PUSH
2379: LD_INT 3
2381: ARRAY
2382: PPUSH
2383: LD_VAR 0 2
2387: PUSH
2388: LD_INT 2
2390: ARRAY
2391: PPUSH
2392: CALL_OW 180
// end ; end ;
2396: PPOPN 3
2398: END
// every 0 0$3 trigger GetDistUnits ( Heike , Delta ) < 9 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do var tmp ;
2399: LD_EXP 17
2403: PPUSH
2404: LD_INT 1
2406: PPUSH
2407: CALL_OW 296
2411: PUSH
2412: LD_INT 9
2414: LESS
2415: PUSH
2416: LD_INT 22
2418: PUSH
2419: LD_INT 1
2421: PUSH
2422: EMPTY
2423: LIST
2424: LIST
2425: PUSH
2426: LD_INT 25
2428: PUSH
2429: LD_INT 2
2431: PUSH
2432: EMPTY
2433: LIST
2434: LIST
2435: PUSH
2436: EMPTY
2437: LIST
2438: LIST
2439: PPUSH
2440: CALL_OW 69
2444: AND
2445: IFFALSE 2517
2447: GO 2449
2449: DISABLE
2450: LD_INT 0
2452: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
2453: LD_ADDR_VAR 0 1
2457: PUSH
2458: LD_INT 22
2460: PUSH
2461: LD_INT 1
2463: PUSH
2464: EMPTY
2465: LIST
2466: LIST
2467: PUSH
2468: LD_INT 25
2470: PUSH
2471: LD_INT 2
2473: PUSH
2474: EMPTY
2475: LIST
2476: LIST
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: PPUSH
2482: CALL_OW 69
2486: ST_TO_ADDR
// if not tmp then
2487: LD_VAR 0 1
2491: NOT
2492: IFFALSE 2496
// exit ;
2494: GO 2517
// ComExitBuilding ( tmp ) ;
2496: LD_VAR 0 1
2500: PPUSH
2501: CALL_OW 122
// AddComDismantle ( tmp , usLab ) ;
2505: LD_VAR 0 1
2509: PPUSH
2510: LD_INT 3
2512: PPUSH
2513: CALL_OW 227
// end ; end_of_file
2517: PPOPN 1
2519: END
// export function Action ; var i , tmp ; begin
2520: LD_INT 0
2522: PPUSH
2523: PPUSH
2524: PPUSH
// InGameOn ;
2525: CALL_OW 8
// ComMoveXY ( Heike , 78 , 61 ) ;
2529: LD_EXP 17
2533: PPUSH
2534: LD_INT 78
2536: PPUSH
2537: LD_INT 61
2539: PPUSH
2540: CALL_OW 111
// if Mike then
2544: LD_EXP 19
2548: IFFALSE 2565
// ComMoveXY ( Mike , 80 , 66 ) ;
2550: LD_EXP 19
2554: PPUSH
2555: LD_INT 80
2557: PPUSH
2558: LD_INT 66
2560: PPUSH
2561: CALL_OW 111
// if Givi then
2565: LD_EXP 18
2569: IFFALSE 2586
// ComMoveXY ( Givi , 82 , 66 ) ;
2571: LD_EXP 18
2575: PPUSH
2576: LD_INT 82
2578: PPUSH
2579: LD_INT 66
2581: PPUSH
2582: CALL_OW 111
// if Kamil then
2586: LD_EXP 20
2590: IFFALSE 2607
// ComMoveXY ( Kamil , 82 , 69 ) ;
2592: LD_EXP 20
2596: PPUSH
2597: LD_INT 82
2599: PPUSH
2600: LD_INT 69
2602: PPUSH
2603: CALL_OW 111
// CenterNowOnUnits ( Heike ) ;
2607: LD_EXP 17
2611: PPUSH
2612: CALL_OW 87
// wait ( 0 0$2 ) ;
2616: LD_INT 70
2618: PPUSH
2619: CALL_OW 67
// if Givi and Mike then
2623: LD_EXP 18
2627: PUSH
2628: LD_EXP 19
2632: AND
2633: IFFALSE 3079
// begin AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
2635: LD_EXP 18
2639: PUSH
2640: LD_EXP 19
2644: PUSH
2645: LD_EXP 20
2649: PUSH
2650: EMPTY
2651: LIST
2652: LIST
2653: LIST
2654: PPUSH
2655: LD_EXP 17
2659: PPUSH
2660: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
2664: LD_EXP 17
2668: PPUSH
2669: LD_EXP 18
2673: PPUSH
2674: CALL_OW 179
// Say ( Givi , DG-1-start ) ;
2678: LD_EXP 18
2682: PPUSH
2683: LD_STRING DG-1-start
2685: PPUSH
2686: CALL_OW 88
// Say ( Heike , DH-1-start ) ;
2690: LD_EXP 17
2694: PPUSH
2695: LD_STRING DH-1-start
2697: PPUSH
2698: CALL_OW 88
// AddComTurnUnit ( Mike , Heike ) ;
2702: LD_EXP 19
2706: PPUSH
2707: LD_EXP 17
2711: PPUSH
2712: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
2716: LD_EXP 17
2720: PPUSH
2721: LD_EXP 19
2725: PPUSH
2726: CALL_OW 179
// Say ( Mike , DM-1-start ) ;
2730: LD_EXP 19
2734: PPUSH
2735: LD_STRING DM-1-start
2737: PPUSH
2738: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
2742: LD_EXP 17
2746: PPUSH
2747: LD_STRING DH-2-start
2749: PPUSH
2750: CALL_OW 88
// Say ( Mike , DM-2-start ) ;
2754: LD_EXP 19
2758: PPUSH
2759: LD_STRING DM-2-start
2761: PPUSH
2762: CALL_OW 88
// Say ( Givi , DG-2-start ) ;
2766: LD_EXP 18
2770: PPUSH
2771: LD_STRING DG-2-start
2773: PPUSH
2774: CALL_OW 88
// ComTurnUnit ( Mike , Givi ) ;
2778: LD_EXP 19
2782: PPUSH
2783: LD_EXP 18
2787: PPUSH
2788: CALL_OW 119
// ComTurnUnit ( Heike , Mike ) ;
2792: LD_EXP 17
2796: PPUSH
2797: LD_EXP 19
2801: PPUSH
2802: CALL_OW 119
// Say ( Mike , DM-3-start ) ;
2806: LD_EXP 19
2810: PPUSH
2811: LD_STRING DM-3-start
2813: PPUSH
2814: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
2818: LD_EXP 17
2822: PPUSH
2823: LD_STRING DH-3-start
2825: PPUSH
2826: CALL_OW 88
// ComMoveXY ( [ Heike , Mike , Givi , Kamil ] , 84 , 51 ) ;
2830: LD_EXP 17
2834: PUSH
2835: LD_EXP 19
2839: PUSH
2840: LD_EXP 18
2844: PUSH
2845: LD_EXP 20
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: LIST
2854: LIST
2855: PPUSH
2856: LD_INT 84
2858: PPUSH
2859: LD_INT 51
2861: PPUSH
2862: CALL_OW 111
// wait ( 0 0$2 ) ;
2866: LD_INT 70
2868: PPUSH
2869: CALL_OW 67
// Say ( Givi , DG-3-start ) ;
2873: LD_EXP 18
2877: PPUSH
2878: LD_STRING DG-3-start
2880: PPUSH
2881: CALL_OW 88
// ComHold ( [ Heike , Mike , Givi , Kamil ] ) ;
2885: LD_EXP 17
2889: PUSH
2890: LD_EXP 19
2894: PUSH
2895: LD_EXP 18
2899: PUSH
2900: LD_EXP 20
2904: PUSH
2905: EMPTY
2906: LIST
2907: LIST
2908: LIST
2909: LIST
2910: PPUSH
2911: CALL_OW 140
// AddComTurnUnit ( Heike , Givi ) ;
2915: LD_EXP 17
2919: PPUSH
2920: LD_EXP 18
2924: PPUSH
2925: CALL_OW 179
// AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
2929: LD_EXP 18
2933: PUSH
2934: LD_EXP 19
2938: PUSH
2939: LD_EXP 20
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: LIST
2948: PPUSH
2949: LD_EXP 17
2953: PPUSH
2954: CALL_OW 179
// Say ( Heike , DH-4-start ) ;
2958: LD_EXP 17
2962: PPUSH
2963: LD_STRING DH-4-start
2965: PPUSH
2966: CALL_OW 88
// Say ( Givi , DG-4-start ) ;
2970: LD_EXP 18
2974: PPUSH
2975: LD_STRING DG-4-start
2977: PPUSH
2978: CALL_OW 88
// Say ( Heike , DH-5-start ) ;
2982: LD_EXP 17
2986: PPUSH
2987: LD_STRING DH-5-start
2989: PPUSH
2990: CALL_OW 88
// Say ( Givi , DG-5-start ) ;
2994: LD_EXP 18
2998: PPUSH
2999: LD_STRING DG-5-start
3001: PPUSH
3002: CALL_OW 88
// Say ( Heike , DH-6-start ) ;
3006: LD_EXP 17
3010: PPUSH
3011: LD_STRING DH-6-start
3013: PPUSH
3014: CALL_OW 88
// Say ( Mike , DM-6-start ) ;
3018: LD_EXP 19
3022: PPUSH
3023: LD_STRING DM-6-start
3025: PPUSH
3026: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi ] , Mike ) ;
3030: LD_EXP 17
3034: PUSH
3035: LD_EXP 18
3039: PUSH
3040: EMPTY
3041: LIST
3042: LIST
3043: PPUSH
3044: LD_EXP 19
3048: PPUSH
3049: CALL_OW 119
// Say ( Givi , DG-6-start ) ;
3053: LD_EXP 18
3057: PPUSH
3058: LD_STRING DG-6-start
3060: PPUSH
3061: CALL_OW 88
// Say ( Heike , DH-7-start ) ;
3065: LD_EXP 17
3069: PPUSH
3070: LD_STRING DH-7-start
3072: PPUSH
3073: CALL_OW 88
// end else
3077: GO 3801
// if not Mike and Givi then
3079: LD_EXP 19
3083: NOT
3084: PUSH
3085: LD_EXP 18
3089: AND
3090: IFFALSE 3435
// begin AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
3092: LD_EXP 18
3096: PUSH
3097: LD_EXP 20
3101: PUSH
3102: EMPTY
3103: LIST
3104: LIST
3105: PPUSH
3106: LD_EXP 17
3110: PPUSH
3111: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
3115: LD_EXP 17
3119: PPUSH
3120: LD_EXP 18
3124: PPUSH
3125: CALL_OW 179
// Say ( Givi , DG-1-start-c ) ;
3129: LD_EXP 18
3133: PPUSH
3134: LD_STRING DG-1-start-c
3136: PPUSH
3137: CALL_OW 88
// Say ( Heike , DH-1-start-c ) ;
3141: LD_EXP 17
3145: PPUSH
3146: LD_STRING DH-1-start-c
3148: PPUSH
3149: CALL_OW 88
// Say ( Givi , DG-2-start-c ) ;
3153: LD_EXP 18
3157: PPUSH
3158: LD_STRING DG-2-start-c
3160: PPUSH
3161: CALL_OW 88
// Say ( Heike , DH-2-start-c ) ;
3165: LD_EXP 17
3169: PPUSH
3170: LD_STRING DH-2-start-c
3172: PPUSH
3173: CALL_OW 88
// Say ( Givi , DG-3-start-c ) ;
3177: LD_EXP 18
3181: PPUSH
3182: LD_STRING DG-3-start-c
3184: PPUSH
3185: CALL_OW 88
// ComMoveXY ( Heike , 83 , 56 ) ;
3189: LD_EXP 17
3193: PPUSH
3194: LD_INT 83
3196: PPUSH
3197: LD_INT 56
3199: PPUSH
3200: CALL_OW 111
// ComMoveXY ( Givi , 83 , 59 ) ;
3204: LD_EXP 18
3208: PPUSH
3209: LD_INT 83
3211: PPUSH
3212: LD_INT 59
3214: PPUSH
3215: CALL_OW 111
// if Kamil then
3219: LD_EXP 20
3223: IFFALSE 3240
// ComMoveXY ( Kamil , 80 , 58 ) ;
3225: LD_EXP 20
3229: PPUSH
3230: LD_INT 80
3232: PPUSH
3233: LD_INT 58
3235: PPUSH
3236: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
3240: LD_EXP 17
3244: PPUSH
3245: LD_EXP 18
3249: PPUSH
3250: CALL_OW 179
// AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
3254: LD_EXP 18
3258: PUSH
3259: LD_EXP 20
3263: PUSH
3264: EMPTY
3265: LIST
3266: LIST
3267: PPUSH
3268: LD_EXP 17
3272: PPUSH
3273: CALL_OW 179
// Say ( Heike , DH-3-start-c ) ;
3277: LD_EXP 17
3281: PPUSH
3282: LD_STRING DH-3-start-c
3284: PPUSH
3285: CALL_OW 88
// Say ( Givi , DG-4-start-c ) ;
3289: LD_EXP 18
3293: PPUSH
3294: LD_STRING DG-4-start-c
3296: PPUSH
3297: CALL_OW 88
// Say ( Heike , DH-5-start-c ) ;
3301: LD_EXP 17
3305: PPUSH
3306: LD_STRING DH-5-start-c
3308: PPUSH
3309: CALL_OW 88
// Say ( Givi , DG-5-start-c ) ;
3313: LD_EXP 18
3317: PPUSH
3318: LD_STRING DG-5-start-c
3320: PPUSH
3321: CALL_OW 88
// Say ( Heike , DH-6-start-c ) ;
3325: LD_EXP 17
3329: PPUSH
3330: LD_STRING DH-6-start-c
3332: PPUSH
3333: CALL_OW 88
// Say ( Givi , DG-6-start-c ) ;
3337: LD_EXP 18
3341: PPUSH
3342: LD_STRING DG-6-start-c
3344: PPUSH
3345: CALL_OW 88
// if Kamil then
3349: LD_EXP 20
3353: IFFALSE 3409
// begin ComTurnUnit ( Kamil , Heike ) ;
3355: LD_EXP 20
3359: PPUSH
3360: LD_EXP 17
3364: PPUSH
3365: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
3369: LD_EXP 20
3373: PPUSH
3374: LD_STRING DKam-1-start-c
3376: PPUSH
3377: CALL_OW 88
// ComTurnUnit ( Givi , Kamil ) ;
3381: LD_EXP 18
3385: PPUSH
3386: LD_EXP 20
3390: PPUSH
3391: CALL_OW 119
// Say ( Givi , DG-7-start-c ) ;
3395: LD_EXP 18
3399: PPUSH
3400: LD_STRING DG-7-start-c
3402: PPUSH
3403: CALL_OW 88
// end else
3407: GO 3433
// begin Say ( Givi , DG-8-start-c ) ;
3409: LD_EXP 18
3413: PPUSH
3414: LD_STRING DG-8-start-c
3416: PPUSH
3417: CALL_OW 88
// Say ( Heike , DH-7-start-c ) ;
3421: LD_EXP 17
3425: PPUSH
3426: LD_STRING DH-7-start-c
3428: PPUSH
3429: CALL_OW 88
// end ; end else
3433: GO 3801
// if not Givi and Mike then
3435: LD_EXP 18
3439: NOT
3440: PUSH
3441: LD_EXP 19
3445: AND
3446: IFFALSE 3705
// begin AddComTurnUnit ( [ Mike , Kamil ] , Heike ) ;
3448: LD_EXP 19
3452: PUSH
3453: LD_EXP 20
3457: PUSH
3458: EMPTY
3459: LIST
3460: LIST
3461: PPUSH
3462: LD_EXP 17
3466: PPUSH
3467: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
3471: LD_EXP 17
3475: PPUSH
3476: LD_EXP 19
3480: PPUSH
3481: CALL_OW 179
// Say ( Mike , DM-1-start-b ) ;
3485: LD_EXP 19
3489: PPUSH
3490: LD_STRING DM-1-start-b
3492: PPUSH
3493: CALL_OW 88
// Say ( Heike , DH-1-start-b ) ;
3497: LD_EXP 17
3501: PPUSH
3502: LD_STRING DH-1-start-b
3504: PPUSH
3505: CALL_OW 88
// Say ( Mike , DM-2-start-b ) ;
3509: LD_EXP 19
3513: PPUSH
3514: LD_STRING DM-2-start-b
3516: PPUSH
3517: CALL_OW 88
// Say ( Heike , DH-2-start-b ) ;
3521: LD_EXP 17
3525: PPUSH
3526: LD_STRING DH-2-start-b
3528: PPUSH
3529: CALL_OW 88
// Say ( Mike , DM-3-start-b ) ;
3533: LD_EXP 19
3537: PPUSH
3538: LD_STRING DM-3-start-b
3540: PPUSH
3541: CALL_OW 88
// if Kamil then
3545: LD_EXP 20
3549: IFFALSE 3566
// ComMoveXY ( Kamil , 80 , 58 ) ;
3551: LD_EXP 20
3555: PPUSH
3556: LD_INT 80
3558: PPUSH
3559: LD_INT 58
3561: PPUSH
3562: CALL_OW 111
// ComMoveXY ( Heike , 83 , 56 ) ;
3566: LD_EXP 17
3570: PPUSH
3571: LD_INT 83
3573: PPUSH
3574: LD_INT 56
3576: PPUSH
3577: CALL_OW 111
// ComMoveXY ( Mike , 83 , 59 ) ;
3581: LD_EXP 19
3585: PPUSH
3586: LD_INT 83
3588: PPUSH
3589: LD_INT 59
3591: PPUSH
3592: CALL_OW 111
// AddComTurnUnit ( Heike , Mike ) ;
3596: LD_EXP 17
3600: PPUSH
3601: LD_EXP 19
3605: PPUSH
3606: CALL_OW 179
// AddComTurnUnit ( [ Kamil , Mike ] , Heike ) ;
3610: LD_EXP 20
3614: PUSH
3615: LD_EXP 19
3619: PUSH
3620: EMPTY
3621: LIST
3622: LIST
3623: PPUSH
3624: LD_EXP 17
3628: PPUSH
3629: CALL_OW 179
// Say ( Heike , DH-3-start-b ) ;
3633: LD_EXP 17
3637: PPUSH
3638: LD_STRING DH-3-start-b
3640: PPUSH
3641: CALL_OW 88
// Say ( Mike , DM-4-start-b ) ;
3645: LD_EXP 19
3649: PPUSH
3650: LD_STRING DM-4-start-b
3652: PPUSH
3653: CALL_OW 88
// if Kamil then
3657: LD_EXP 20
3661: IFFALSE 3691
// begin ComTurnUnit ( Kamil , Heike ) ;
3663: LD_EXP 20
3667: PPUSH
3668: LD_EXP 17
3672: PPUSH
3673: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
3677: LD_EXP 20
3681: PPUSH
3682: LD_STRING DKam-1-start-c
3684: PPUSH
3685: CALL_OW 88
// end else
3689: GO 3703
// begin Say ( Mike , DM-5-start-b ) ;
3691: LD_EXP 19
3695: PPUSH
3696: LD_STRING DM-5-start-b
3698: PPUSH
3699: CALL_OW 88
// end ; end else
3703: GO 3801
// if Kamil then
3705: LD_EXP 20
3709: IFFALSE 3789
// begin AddComTurnUnit ( Heike , Kamil ) ;
3711: LD_EXP 17
3715: PPUSH
3716: LD_EXP 20
3720: PPUSH
3721: CALL_OW 179
// AddComTurnUnit ( Kamil , Heike ) ;
3725: LD_EXP 20
3729: PPUSH
3730: LD_EXP 17
3734: PPUSH
3735: CALL_OW 179
// Say ( Heike , DH-1-start-f ) ;
3739: LD_EXP 17
3743: PPUSH
3744: LD_STRING DH-1-start-f
3746: PPUSH
3747: CALL_OW 88
// Say ( Kamil , DKam-1-start-f ) ;
3751: LD_EXP 20
3755: PPUSH
3756: LD_STRING DKam-1-start-f
3758: PPUSH
3759: CALL_OW 88
// Say ( Heike , DH-2-start-f ) ;
3763: LD_EXP 17
3767: PPUSH
3768: LD_STRING DH-2-start-f
3770: PPUSH
3771: CALL_OW 88
// Say ( Kamil , DKam-2-start-f ) ;
3775: LD_EXP 20
3779: PPUSH
3780: LD_STRING DKam-2-start-f
3782: PPUSH
3783: CALL_OW 88
// end else
3787: GO 3801
// begin Say ( Heike , DH-1-start-d ) ;
3789: LD_EXP 17
3793: PPUSH
3794: LD_STRING DH-1-start-d
3796: PPUSH
3797: CALL_OW 88
// end ; ComFree ( [ Heike , Givi , Mike , Kamil ] ) ;
3801: LD_EXP 17
3805: PUSH
3806: LD_EXP 18
3810: PUSH
3811: LD_EXP 19
3815: PUSH
3816: LD_EXP 20
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: LIST
3825: LIST
3826: PPUSH
3827: CALL_OW 139
// InGameOff ;
3831: CALL_OW 9
// ChangeMissionObjectives ( OEast ) ;
3835: LD_STRING OEast
3837: PPUSH
3838: CALL_OW 337
// wait ( 0 0$20 ) ;
3842: LD_INT 700
3844: PPUSH
3845: CALL_OW 67
// SendSciToForest ;
3849: CALL 1340 0 0
// if Difficulty = 1 then
3853: LD_OWVAR 67
3857: PUSH
3858: LD_INT 1
3860: EQUAL
3861: IFFALSE 3865
// exit ;
3863: GO 3982
// wait ( [ 5 5$00 , 2 2$30 ] [ Difficulty - 1 ] ) ;
3865: LD_INT 10500
3867: PUSH
3868: LD_INT 5250
3870: PUSH
3871: EMPTY
3872: LIST
3873: LIST
3874: PUSH
3875: LD_OWVAR 67
3879: PUSH
3880: LD_INT 1
3882: MINUS
3883: ARRAY
3884: PPUSH
3885: CALL_OW 67
// if usAlert then
3889: LD_EXP 9
3893: IFFALSE 3897
// exit ;
3895: GO 3982
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
3897: LD_ADDR_VAR 0 3
3901: PUSH
3902: LD_INT 22
3904: PUSH
3905: LD_INT 1
3907: PUSH
3908: EMPTY
3909: LIST
3910: LIST
3911: PUSH
3912: LD_INT 25
3914: PUSH
3915: LD_INT 2
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: PUSH
3922: EMPTY
3923: LIST
3924: LIST
3925: PPUSH
3926: CALL_OW 69
3930: ST_TO_ADDR
// if not tmp then
3931: LD_VAR 0 3
3935: NOT
3936: IFFALSE 3940
// exit ;
3938: GO 3982
// ComExitBuilding ( tmp ) ;
3940: LD_VAR 0 3
3944: PPUSH
3945: CALL_OW 122
// AddComBuild ( tmp , b_breastwork , 40 , 13 , 3 ) ;
3949: LD_VAR 0 3
3953: PPUSH
3954: LD_INT 31
3956: PPUSH
3957: LD_INT 40
3959: PPUSH
3960: LD_INT 13
3962: PPUSH
3963: LD_INT 3
3965: PPUSH
3966: CALL_OW 205
// AddComEnterUnit ( tmp , Delta ) ;
3970: LD_VAR 0 3
3974: PPUSH
3975: LD_INT 1
3977: PPUSH
3978: CALL_OW 180
// end ;
3982: LD_VAR 0 1
3986: RET
// every 0 0$1 trigger not aviradzeSpotted and See ( 2 , Aviradze ) do var i ;
3987: LD_EXP 4
3991: NOT
3992: PUSH
3993: LD_INT 2
3995: PPUSH
3996: LD_EXP 21
4000: PPUSH
4001: CALL_OW 292
4005: AND
4006: IFFALSE 4790
4008: GO 4010
4010: DISABLE
4011: LD_INT 0
4013: PPUSH
// begin aviradzeSpotted := true ;
4014: LD_ADDR_EXP 4
4018: PUSH
4019: LD_INT 1
4021: ST_TO_ADDR
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
4022: LD_EXP 17
4026: PPUSH
4027: LD_EXP 21
4031: PPUSH
4032: CALL_OW 250
4036: PPUSH
4037: LD_EXP 21
4041: PPUSH
4042: CALL_OW 251
4046: PPUSH
4047: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4051: LD_INT 35
4053: PPUSH
4054: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 16 ;
4058: LD_EXP 17
4062: PPUSH
4063: LD_EXP 21
4067: PPUSH
4068: CALL_OW 296
4072: PUSH
4073: LD_INT 16
4075: LESS
4076: IFFALSE 4051
// InGameOn ;
4078: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
4082: LD_INT 5
4084: PPUSH
4085: LD_INT 2
4087: PPUSH
4088: CALL_OW 343
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 2 then
4092: LD_INT 22
4094: PUSH
4095: LD_INT 2
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PUSH
4102: LD_INT 21
4104: PUSH
4105: LD_INT 1
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: PPUSH
4116: CALL_OW 69
4120: PUSH
4121: LD_INT 2
4123: GREATER
4124: IFFALSE 4140
// Say ( Heike , DH-1-spot ) else
4126: LD_EXP 17
4130: PPUSH
4131: LD_STRING DH-1-spot
4133: PPUSH
4134: CALL_OW 88
4138: GO 4152
// Say ( Heike , DH-1-spot-b ) ;
4140: LD_EXP 17
4144: PPUSH
4145: LD_STRING DH-1-spot-b
4147: PPUSH
4148: CALL_OW 88
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
4152: LD_EXP 17
4156: PPUSH
4157: LD_EXP 21
4161: PPUSH
4162: CALL_OW 250
4166: PPUSH
4167: LD_EXP 21
4171: PPUSH
4172: CALL_OW 251
4176: PPUSH
4177: CALL_OW 111
// ComMoveXY ( [ Kamil , Mike , Givi ] , 102 , 40 ) ;
4181: LD_EXP 20
4185: PUSH
4186: LD_EXP 19
4190: PUSH
4191: LD_EXP 18
4195: PUSH
4196: EMPTY
4197: LIST
4198: LIST
4199: LIST
4200: PPUSH
4201: LD_INT 102
4203: PPUSH
4204: LD_INT 40
4206: PPUSH
4207: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4211: LD_INT 35
4213: PPUSH
4214: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 6 ;
4218: LD_EXP 17
4222: PPUSH
4223: LD_EXP 21
4227: PPUSH
4228: CALL_OW 296
4232: PUSH
4233: LD_INT 6
4235: LESS
4236: IFFALSE 4211
// ComTurnUnit ( Heike , Aviradze ) ;
4238: LD_EXP 17
4242: PPUSH
4243: LD_EXP 21
4247: PPUSH
4248: CALL_OW 119
// ComTurnUnit ( [ Aviradze , Sophia , Kaia ] , Heike ) ;
4252: LD_EXP 21
4256: PUSH
4257: LD_EXP 23
4261: PUSH
4262: LD_EXP 22
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: LIST
4271: PPUSH
4272: LD_EXP 17
4276: PPUSH
4277: CALL_OW 119
// if Givi or Mike or Kamil then
4281: LD_EXP 18
4285: PUSH
4286: LD_EXP 19
4290: OR
4291: PUSH
4292: LD_EXP 20
4296: OR
4297: IFFALSE 4335
// begin wait ( 0 0$2 ) ;
4299: LD_INT 70
4301: PPUSH
4302: CALL_OW 67
// ComTurnUnit ( [ Kamil , Mike , Givi ] , Aviradze ) ;
4306: LD_EXP 20
4310: PUSH
4311: LD_EXP 19
4315: PUSH
4316: LD_EXP 18
4320: PUSH
4321: EMPTY
4322: LIST
4323: LIST
4324: LIST
4325: PPUSH
4326: LD_EXP 21
4330: PPUSH
4331: CALL_OW 119
// end ; Say ( Heike , DH-2-spot ) ;
4335: LD_EXP 17
4339: PPUSH
4340: LD_STRING DH-2-spot
4342: PPUSH
4343: CALL_OW 88
// Say ( Aviradze , DA-2-spot ) ;
4347: LD_EXP 21
4351: PPUSH
4352: LD_STRING DA-2-spot
4354: PPUSH
4355: CALL_OW 88
// Say ( Heike , DH-3-spot ) ;
4359: LD_EXP 17
4363: PPUSH
4364: LD_STRING DH-3-spot
4366: PPUSH
4367: CALL_OW 88
// ComMoveUnit ( Kaia , Heike ) ;
4371: LD_EXP 22
4375: PPUSH
4376: LD_EXP 17
4380: PPUSH
4381: CALL_OW 112
// ComTurnUNit ( Heike , Kaia ) ;
4385: LD_EXP 17
4389: PPUSH
4390: LD_EXP 22
4394: PPUSH
4395: CALL_OW 119
// wait ( 0 0$0.3 ) ;
4399: LD_INT 10
4401: PPUSH
4402: CALL_OW 67
// async ;
4406: ASYNC
// Say ( Kaia , DK-3-spot ) ;
4407: LD_EXP 22
4411: PPUSH
4412: LD_STRING DK-3-spot
4414: PPUSH
4415: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
4419: LD_INT 35
4421: PPUSH
4422: CALL_OW 67
// until GetDistUnits ( Heike , Kaia ) < 4 ;
4426: LD_EXP 17
4430: PPUSH
4431: LD_EXP 22
4435: PPUSH
4436: CALL_OW 296
4440: PUSH
4441: LD_INT 4
4443: LESS
4444: IFFALSE 4419
// ComTurnUnit ( Kaia , Heike ) ;
4446: LD_EXP 22
4450: PPUSH
4451: LD_EXP 17
4455: PPUSH
4456: CALL_OW 119
// sync ;
4460: SYNC
// Say ( Heike , DH-4-spot ) ;
4461: LD_EXP 17
4465: PPUSH
4466: LD_STRING DH-4-spot
4468: PPUSH
4469: CALL_OW 88
// wait ( 0 0$0.3 ) ;
4473: LD_INT 10
4475: PPUSH
4476: CALL_OW 67
// ComTurnUnit ( Heike , Aviradze ) ;
4480: LD_EXP 17
4484: PPUSH
4485: LD_EXP 21
4489: PPUSH
4490: CALL_OW 119
// Say ( Aviradze , DA-4-spot ) ;
4494: LD_EXP 21
4498: PPUSH
4499: LD_STRING DA-4-spot
4501: PPUSH
4502: CALL_OW 88
// ComTurnUnit ( Kaia , Aviradze ) ;
4506: LD_EXP 22
4510: PPUSH
4511: LD_EXP 21
4515: PPUSH
4516: CALL_OW 119
// Say ( Kaia , DK-4-spot ) ;
4520: LD_EXP 22
4524: PPUSH
4525: LD_STRING DK-4-spot
4527: PPUSH
4528: CALL_OW 88
// ComTurnUnit ( Aviradze , Kaia ) ;
4532: LD_EXP 21
4536: PPUSH
4537: LD_EXP 22
4541: PPUSH
4542: CALL_OW 119
// Say ( Aviradze , DA-5-spot ) ;
4546: LD_EXP 21
4550: PPUSH
4551: LD_STRING DA-5-spot
4553: PPUSH
4554: CALL_OW 88
// Say ( Kaia , DK-5-spot ) ;
4558: LD_EXP 22
4562: PPUSH
4563: LD_STRING DK-5-spot
4565: PPUSH
4566: CALL_OW 88
// Say ( Aviradze , DA-6-spot ) ;
4570: LD_EXP 21
4574: PPUSH
4575: LD_STRING DA-6-spot
4577: PPUSH
4578: CALL_OW 88
// if Kamil then
4582: LD_EXP 20
4586: IFFALSE 4600
// Say ( Kamil , DKam-6-spot ) ;
4588: LD_EXP 20
4592: PPUSH
4593: LD_STRING DKam-6-spot
4595: PPUSH
4596: CALL_OW 88
// Say ( Kaia , DK-6-spot ) ;
4600: LD_EXP 22
4604: PPUSH
4605: LD_STRING DK-6-spot
4607: PPUSH
4608: CALL_OW 88
// ComTurnUnit ( Aviradze , Heike ) ;
4612: LD_EXP 21
4616: PPUSH
4617: LD_EXP 17
4621: PPUSH
4622: CALL_OW 119
// Say ( Aviradze , DA-7-spot ) ;
4626: LD_EXP 21
4630: PPUSH
4631: LD_STRING DA-7-spot
4633: PPUSH
4634: CALL_OW 88
// Say ( Heike , DH-7-spot ) ;
4638: LD_EXP 17
4642: PPUSH
4643: LD_STRING DH-7-spot
4645: PPUSH
4646: CALL_OW 88
// if sciCounterKill >= 3 then
4650: LD_EXP 8
4654: PUSH
4655: LD_INT 3
4657: GREATEREQUAL
4658: IFFALSE 4684
// begin Say ( Heike , DH-7-spot-a ) ;
4660: LD_EXP 17
4664: PPUSH
4665: LD_STRING DH-7-spot-a
4667: PPUSH
4668: CALL_OW 88
// Say ( Aviradze , DA-8-spot-a ) ;
4672: LD_EXP 21
4676: PPUSH
4677: LD_STRING DA-8-spot-a
4679: PPUSH
4680: CALL_OW 88
// end ; InGameOff ;
4684: CALL_OW 9
// if sciCounterKill < 3 then
4688: LD_EXP 8
4692: PUSH
4693: LD_INT 3
4695: LESS
4696: IFFALSE 4728
// begin SetSide ( Kaia , 2 ) ;
4698: LD_EXP 22
4702: PPUSH
4703: LD_INT 2
4705: PPUSH
4706: CALL_OW 235
// ComFree ( Kaia ) ;
4710: LD_EXP 22
4714: PPUSH
4715: CALL_OW 139
// ChangeMissionObjectives ( OSci ) ;
4719: LD_STRING OSci
4721: PPUSH
4722: CALL_OW 337
// end else
4726: GO 4790
// begin aviradzeQuestDone := true ;
4728: LD_ADDR_EXP 7
4732: PUSH
4733: LD_INT 1
4735: ST_TO_ADDR
// attackDeltaAllowed := true ;
4736: LD_ADDR_EXP 12
4740: PUSH
4741: LD_INT 1
4743: ST_TO_ADDR
// ChangeMissionObjectives ( ODelta2 ) ;
4744: LD_STRING ODelta2
4746: PPUSH
4747: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
4751: LD_ADDR_VAR 0 1
4755: PUSH
4756: LD_INT 22
4758: PUSH
4759: LD_INT 5
4761: PUSH
4762: EMPTY
4763: LIST
4764: LIST
4765: PPUSH
4766: CALL_OW 69
4770: PUSH
4771: FOR_IN
4772: IFFALSE 4788
// SetSide ( i , 2 ) ;
4774: LD_VAR 0 1
4778: PPUSH
4779: LD_INT 2
4781: PPUSH
4782: CALL_OW 235
4786: GO 4771
4788: POP
4789: POP
// end ; end ;
4790: PPOPN 1
4792: END
// every 0 0$1 trigger not sciSpotted and GetDistUnits ( NearestUnitToUnit ( usSci , Heike ) , Heike ) < 8 and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and not aviradzeSpotted do
4793: LD_EXP 6
4797: NOT
4798: PUSH
4799: LD_EXP 16
4803: PPUSH
4804: LD_EXP 17
4808: PPUSH
4809: CALL_OW 74
4813: PPUSH
4814: LD_EXP 17
4818: PPUSH
4819: CALL_OW 296
4823: PUSH
4824: LD_INT 8
4826: LESS
4827: AND
4828: PUSH
4829: LD_INT 2
4831: PPUSH
4832: LD_EXP 16
4836: PPUSH
4837: LD_EXP 17
4841: PPUSH
4842: CALL_OW 74
4846: PPUSH
4847: CALL_OW 292
4851: AND
4852: PUSH
4853: LD_INT 22
4855: PUSH
4856: LD_INT 2
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PUSH
4863: LD_INT 21
4865: PUSH
4866: LD_INT 1
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: PPUSH
4877: CALL_OW 69
4881: PUSH
4882: LD_INT 1
4884: GREATER
4885: AND
4886: PUSH
4887: LD_EXP 4
4891: NOT
4892: AND
4893: IFFALSE 4937
4895: GO 4897
4897: DISABLE
// begin sciSpotted := true ;
4898: LD_ADDR_EXP 6
4902: PUSH
4903: LD_INT 1
4905: ST_TO_ADDR
// CenterNowOnUnits ( NearestUnitToUnit ( usSci , Heike ) ) ;
4906: LD_EXP 16
4910: PPUSH
4911: LD_EXP 17
4915: PPUSH
4916: CALL_OW 74
4920: PPUSH
4921: CALL_OW 87
// Say ( Heike , DH-1-sci ) ;
4925: LD_EXP 17
4929: PPUSH
4930: LD_STRING DH-1-sci
4932: PPUSH
4933: CALL_OW 88
// end ;
4937: END
// every 0 0$1 trigger not sciSpotted and GetDistUnits ( NearestUnitToUnit ( usSci , Heike ) , Heike ) < 8 and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and aviradzeSpotted and not aviradzeQuestDone do
4938: LD_EXP 6
4942: NOT
4943: PUSH
4944: LD_EXP 16
4948: PPUSH
4949: LD_EXP 17
4953: PPUSH
4954: CALL_OW 74
4958: PPUSH
4959: LD_EXP 17
4963: PPUSH
4964: CALL_OW 296
4968: PUSH
4969: LD_INT 8
4971: LESS
4972: AND
4973: PUSH
4974: LD_INT 2
4976: PPUSH
4977: LD_EXP 16
4981: PPUSH
4982: LD_EXP 17
4986: PPUSH
4987: CALL_OW 74
4991: PPUSH
4992: CALL_OW 292
4996: AND
4997: PUSH
4998: LD_INT 22
5000: PUSH
5001: LD_INT 2
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: PUSH
5008: LD_INT 21
5010: PUSH
5011: LD_INT 1
5013: PUSH
5014: EMPTY
5015: LIST
5016: LIST
5017: PUSH
5018: EMPTY
5019: LIST
5020: LIST
5021: PPUSH
5022: CALL_OW 69
5026: PUSH
5027: LD_INT 1
5029: GREATER
5030: AND
5031: PUSH
5032: LD_EXP 4
5036: AND
5037: PUSH
5038: LD_EXP 7
5042: NOT
5043: AND
5044: IFFALSE 5106
5046: GO 5048
5048: DISABLE
// begin sciSpotted := true ;
5049: LD_ADDR_EXP 6
5053: PUSH
5054: LD_INT 1
5056: ST_TO_ADDR
// CenterNowOnUnits ( NearestUnitToUnit ( usSci , Heike ) ) ;
5057: LD_EXP 16
5061: PPUSH
5062: LD_EXP 17
5066: PPUSH
5067: CALL_OW 74
5071: PPUSH
5072: CALL_OW 87
// Say ( Heike , DH-1-sci-a ) ;
5076: LD_EXP 17
5080: PPUSH
5081: LD_STRING DH-1-sci-a
5083: PPUSH
5084: CALL_OW 88
// if Mike then
5088: LD_EXP 19
5092: IFFALSE 5106
// Say ( Mike , DM-1-sci-a ) ;
5094: LD_EXP 19
5098: PPUSH
5099: LD_STRING DM-1-sci-a
5101: PPUSH
5102: CALL_OW 88
// end ;
5106: END
// every 0 0$1 trigger aviradzeSpotted and sciCounterKill >= 3 and not aviradzeQuestDone do
5107: LD_EXP 4
5111: PUSH
5112: LD_EXP 8
5116: PUSH
5117: LD_INT 3
5119: GREATEREQUAL
5120: AND
5121: PUSH
5122: LD_EXP 7
5126: NOT
5127: AND
5128: IFFALSE 5171
5130: GO 5132
5132: DISABLE
// begin aviradzeQuestDone := true ;
5133: LD_ADDR_EXP 7
5137: PUSH
5138: LD_INT 1
5140: ST_TO_ADDR
// Say ( Heike , DH-1-quest-done ) ;
5141: LD_EXP 17
5145: PPUSH
5146: LD_STRING DH-1-quest-done
5148: PPUSH
5149: CALL_OW 88
// if Givi then
5153: LD_EXP 18
5157: IFFALSE 5171
// Say ( Givi , DG-1-quest-done ) ;
5159: LD_EXP 18
5163: PPUSH
5164: LD_STRING DG-1-quest-done
5166: PPUSH
5167: CALL_OW 88
// end ;
5171: END
// every 0 0$1 trigger See ( 5 , Heike ) and GetDistUnits ( Heike , Aviradze ) < 6 and aviradzeQuestDone and not attackDeltaAllowed do var i ;
5172: LD_INT 5
5174: PPUSH
5175: LD_EXP 17
5179: PPUSH
5180: CALL_OW 292
5184: PUSH
5185: LD_EXP 17
5189: PPUSH
5190: LD_EXP 21
5194: PPUSH
5195: CALL_OW 296
5199: PUSH
5200: LD_INT 6
5202: LESS
5203: AND
5204: PUSH
5205: LD_EXP 7
5209: AND
5210: PUSH
5211: LD_EXP 12
5215: NOT
5216: AND
5217: IFFALSE 5355
5219: GO 5221
5221: DISABLE
5222: LD_INT 0
5224: PPUSH
// begin attackDeltaAllowed := true ;
5225: LD_ADDR_EXP 12
5229: PUSH
5230: LD_INT 1
5232: ST_TO_ADDR
// InGameOn ;
5233: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
5237: LD_EXP 17
5241: PPUSH
5242: CALL_OW 87
// wait ( 0 0$0.3 ) ;
5246: LD_INT 10
5248: PPUSH
5249: CALL_OW 67
// ComTurnUnit ( Aviradze , Heike ) ;
5253: LD_EXP 21
5257: PPUSH
5258: LD_EXP 17
5262: PPUSH
5263: CALL_OW 119
// ComTurnUnit ( Heike , Aviradze ) ;
5267: LD_EXP 17
5271: PPUSH
5272: LD_EXP 21
5276: PPUSH
5277: CALL_OW 119
// Say ( Heike , DH-1-return ) ;
5281: LD_EXP 17
5285: PPUSH
5286: LD_STRING DH-1-return
5288: PPUSH
5289: CALL_OW 88
// Say ( Aviradze , DA-1-return ) ;
5293: LD_EXP 21
5297: PPUSH
5298: LD_STRING DA-1-return
5300: PPUSH
5301: CALL_OW 88
// InGameOff ;
5305: CALL_OW 9
// ChangeMissionObjectives ( ODelta ) ;
5309: LD_STRING ODelta
5311: PPUSH
5312: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
5316: LD_ADDR_VAR 0 1
5320: PUSH
5321: LD_INT 22
5323: PUSH
5324: LD_INT 5
5326: PUSH
5327: EMPTY
5328: LIST
5329: LIST
5330: PPUSH
5331: CALL_OW 69
5335: PUSH
5336: FOR_IN
5337: IFFALSE 5353
// SetSide ( i , 2 ) ;
5339: LD_VAR 0 1
5343: PPUSH
5344: LD_INT 2
5346: PPUSH
5347: CALL_OW 235
5351: GO 5336
5353: POP
5354: POP
// end ;
5355: PPOPN 1
5357: END
// every 0 0$30 + 0 0$20 trigger attackDeltaAllowed and IsOk ( Markov ) and GetSide ( Delta ) = 1 and IsOk ( Lynch ) and not usAlert do
5358: LD_EXP 12
5362: PUSH
5363: LD_EXP 24
5367: PPUSH
5368: CALL_OW 302
5372: AND
5373: PUSH
5374: LD_INT 1
5376: PPUSH
5377: CALL_OW 255
5381: PUSH
5382: LD_INT 1
5384: EQUAL
5385: AND
5386: PUSH
5387: LD_EXP 14
5391: PPUSH
5392: CALL_OW 302
5396: AND
5397: PUSH
5398: LD_EXP 9
5402: NOT
5403: AND
5404: IFFALSE 5562
5406: GO 5408
5408: DISABLE
// begin DialogueOn ;
5409: CALL_OW 6
// Say ( Markov , DMar-1-radio ) ;
5413: LD_EXP 24
5417: PPUSH
5418: LD_STRING DMar-1-radio
5420: PPUSH
5421: CALL_OW 88
// Say ( Heike , DH-1-radio ) ;
5425: LD_EXP 17
5429: PPUSH
5430: LD_STRING DH-1-radio
5432: PPUSH
5433: CALL_OW 88
// Say ( Markov , DMar-2-radio ) ;
5437: LD_EXP 24
5441: PPUSH
5442: LD_STRING DMar-2-radio
5444: PPUSH
5445: CALL_OW 88
// Say ( Heike , DH-2-radio ) ;
5449: LD_EXP 17
5453: PPUSH
5454: LD_STRING DH-2-radio
5456: PPUSH
5457: CALL_OW 88
// if IsOk ( Kamil ) or IsOk ( Sophia ) then
5461: LD_EXP 20
5465: PPUSH
5466: CALL_OW 302
5470: PUSH
5471: LD_EXP 23
5475: PPUSH
5476: CALL_OW 302
5480: OR
5481: IFFALSE 5558
// begin case Query ( Q1Trap ) of 1 :
5483: LD_STRING Q1Trap
5485: PPUSH
5486: CALL_OW 97
5490: PUSH
5491: LD_INT 1
5493: DOUBLE
5494: EQUAL
5495: IFTRUE 5499
5497: GO 5546
5499: POP
// begin if Kamil then
5500: LD_EXP 20
5504: IFFALSE 5544
// begin Say ( Kamil , DKam-2-radio ) ;
5506: LD_EXP 20
5510: PPUSH
5511: LD_STRING DKam-2-radio
5513: PPUSH
5514: CALL_OW 88
// Say ( Kamil , DKam-3-radio ) ;
5518: LD_EXP 20
5522: PPUSH
5523: LD_STRING DKam-3-radio
5525: PPUSH
5526: CALL_OW 88
// SayRadio ( Lynch , DDelta-3-radio ) ;
5530: LD_EXP 14
5534: PPUSH
5535: LD_STRING DDelta-3-radio
5537: PPUSH
5538: CALL_OW 94
// end else
5542: GO 5544
// begin end ; end ; 2 :
5544: GO 5558
5546: LD_INT 2
5548: DOUBLE
5549: EQUAL
5550: IFTRUE 5554
5552: GO 5557
5554: POP
// ; end ;
5555: GO 5558
5557: POP
// end ; DialogueOff ;
5558: CALL_OW 7
// end ; end_of_file
5562: END
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov ; export function PrepareArabian ; var veh ; begin
5563: LD_INT 0
5565: PPUSH
5566: PPUSH
// uc_side := 2 ;
5567: LD_ADDR_OWVAR 20
5571: PUSH
5572: LD_INT 2
5574: ST_TO_ADDR
// uc_nation := 2 ;
5575: LD_ADDR_OWVAR 21
5579: PUSH
5580: LD_INT 2
5582: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
5583: LD_ADDR_EXP 17
5587: PUSH
5588: LD_STRING Heike
5590: PPUSH
5591: LD_EXP 1
5595: NOT
5596: PPUSH
5597: LD_EXP 2
5601: PPUSH
5602: CALL 190 0 3
5606: ST_TO_ADDR
// PlaceUnitXY ( Heike , 83 , 72 , false ) ;
5607: LD_EXP 17
5611: PPUSH
5612: LD_INT 83
5614: PPUSH
5615: LD_INT 72
5617: PPUSH
5618: LD_INT 0
5620: PPUSH
5621: CALL_OW 48
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
5625: LD_ADDR_EXP 18
5629: PUSH
5630: LD_STRING Givi
5632: PPUSH
5633: LD_EXP 1
5637: NOT
5638: PPUSH
5639: LD_EXP 2
5643: PPUSH
5644: CALL 190 0 3
5648: ST_TO_ADDR
// if Givi then
5649: LD_EXP 18
5653: IFFALSE 5673
// PlaceUnitXY ( Givi , 87 , 76 , false ) ;
5655: LD_EXP 18
5659: PPUSH
5660: LD_INT 87
5662: PPUSH
5663: LD_INT 76
5665: PPUSH
5666: LD_INT 0
5668: PPUSH
5669: CALL_OW 48
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
5673: LD_ADDR_EXP 19
5677: PUSH
5678: LD_STRING Mike
5680: PPUSH
5681: LD_EXP 1
5685: NOT
5686: PPUSH
5687: LD_EXP 2
5691: PPUSH
5692: CALL 190 0 3
5696: ST_TO_ADDR
// if Mike then
5697: LD_EXP 19
5701: IFFALSE 5721
// PlaceUnitXY ( Mike , 84 , 76 , false ) ;
5703: LD_EXP 19
5707: PPUSH
5708: LD_INT 84
5710: PPUSH
5711: LD_INT 76
5713: PPUSH
5714: LD_INT 0
5716: PPUSH
5717: CALL_OW 48
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
5721: LD_ADDR_EXP 20
5725: PUSH
5726: LD_STRING Kamil
5728: PPUSH
5729: LD_EXP 1
5733: NOT
5734: PPUSH
5735: LD_EXP 2
5739: PPUSH
5740: CALL 190 0 3
5744: ST_TO_ADDR
// if Kamil then
5745: LD_EXP 20
5749: IFFALSE 5769
// PlaceUnitXY ( Kamil , 85 , 78 , false ) ;
5751: LD_EXP 20
5755: PPUSH
5756: LD_INT 85
5758: PPUSH
5759: LD_INT 78
5761: PPUSH
5762: LD_INT 0
5764: PPUSH
5765: CALL_OW 48
// uc_side := 5 ;
5769: LD_ADDR_OWVAR 20
5773: PUSH
5774: LD_INT 5
5776: ST_TO_ADDR
// uc_nation := 2 ;
5777: LD_ADDR_OWVAR 21
5781: PUSH
5782: LD_INT 2
5784: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , false ,  ) ;
5785: LD_ADDR_EXP 21
5789: PUSH
5790: LD_STRING Aviradze
5792: PPUSH
5793: LD_INT 0
5795: PPUSH
5796: LD_STRING 
5798: PPUSH
5799: CALL 190 0 3
5803: ST_TO_ADDR
// PlaceUnitXY ( Aviradze , 106 , 38 , false ) ;
5804: LD_EXP 21
5808: PPUSH
5809: LD_INT 106
5811: PPUSH
5812: LD_INT 38
5814: PPUSH
5815: LD_INT 0
5817: PPUSH
5818: CALL_OW 48
// ComTurnXY ( Aviradze , 103 , 38 ) ;
5822: LD_EXP 21
5826: PPUSH
5827: LD_INT 103
5829: PPUSH
5830: LD_INT 38
5832: PPUSH
5833: CALL_OW 118
// Kaia := PrepareUnit ( Kaia , false ,  ) ;
5837: LD_ADDR_EXP 22
5841: PUSH
5842: LD_STRING Kaia
5844: PPUSH
5845: LD_INT 0
5847: PPUSH
5848: LD_STRING 
5850: PPUSH
5851: CALL 190 0 3
5855: ST_TO_ADDR
// PlaceUnitXY ( Kaia , 100 , 34 , false ) ;
5856: LD_EXP 22
5860: PPUSH
5861: LD_INT 100
5863: PPUSH
5864: LD_INT 34
5866: PPUSH
5867: LD_INT 0
5869: PPUSH
5870: CALL_OW 48
// ComTurnXY ( Kaia , 100 , 39 ) ;
5874: LD_EXP 22
5878: PPUSH
5879: LD_INT 100
5881: PPUSH
5882: LD_INT 39
5884: PPUSH
5885: CALL_OW 118
// Sophia := PrepareUnit ( Sophia , false ,  ) ;
5889: LD_ADDR_EXP 23
5893: PUSH
5894: LD_STRING Sophia
5896: PPUSH
5897: LD_INT 0
5899: PPUSH
5900: LD_STRING 
5902: PPUSH
5903: CALL 190 0 3
5907: ST_TO_ADDR
// PlaceUnitXY ( Sophia , 109 , 50 , false ) ;
5908: LD_EXP 23
5912: PPUSH
5913: LD_INT 109
5915: PPUSH
5916: LD_INT 50
5918: PPUSH
5919: LD_INT 0
5921: PPUSH
5922: CALL_OW 48
// ComTurnXY ( Sophia , 100 , 39 ) ;
5926: LD_EXP 23
5930: PPUSH
5931: LD_INT 100
5933: PPUSH
5934: LD_INT 39
5936: PPUSH
5937: CALL_OW 118
// Markov := PrepareUnit ( Markov , false ,  ) ;
5941: LD_ADDR_EXP 24
5945: PUSH
5946: LD_STRING Markov
5948: PPUSH
5949: LD_INT 0
5951: PPUSH
5952: LD_STRING 
5954: PPUSH
5955: CALL 190 0 3
5959: ST_TO_ADDR
// PrepareTank ( 5 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , [ 90 , 70 , 60 ] [ Difficulty ] ) ;
5960: LD_INT 5
5962: PPUSH
5963: LD_INT 3
5965: PPUSH
5966: LD_INT 21
5968: PPUSH
5969: LD_INT 1
5971: PPUSH
5972: LD_INT 1
5974: PPUSH
5975: LD_INT 42
5977: PPUSH
5978: LD_INT 90
5980: PUSH
5981: LD_INT 70
5983: PUSH
5984: LD_INT 60
5986: PUSH
5987: EMPTY
5988: LIST
5989: LIST
5990: LIST
5991: PUSH
5992: LD_OWVAR 67
5996: ARRAY
5997: PPUSH
5998: CALL 253 0 7
// veh := CreateVehicle ;
6002: LD_ADDR_VAR 0 2
6006: PUSH
6007: CALL_OW 45
6011: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6012: LD_VAR 0 2
6016: PPUSH
6017: LD_INT 4
6019: PPUSH
6020: CALL_OW 233
// PlaceUnitXY ( veh , 109 , 38 , false ) ;
6024: LD_VAR 0 2
6028: PPUSH
6029: LD_INT 109
6031: PPUSH
6032: LD_INT 38
6034: PPUSH
6035: LD_INT 0
6037: PPUSH
6038: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
6042: LD_EXP 24
6046: PPUSH
6047: LD_VAR 0 2
6051: PPUSH
6052: CALL_OW 52
// ComTurnUnit ( Kaia , Aviradze ) ;
6056: LD_EXP 22
6060: PPUSH
6061: LD_EXP 21
6065: PPUSH
6066: CALL_OW 119
// ComTurnUnit ( Aviradze , Kaia ) ;
6070: LD_EXP 21
6074: PPUSH
6075: LD_EXP 22
6079: PPUSH
6080: CALL_OW 119
// end ; end_of_file end_of_file
6084: LD_VAR 0 1
6088: RET
// on UnitDestroyed ( un ) do begin if un = Heike then
6089: LD_VAR 0 1
6093: PUSH
6094: LD_EXP 17
6098: EQUAL
6099: IFFALSE 6108
// YouLost ( Heike ) ;
6101: LD_STRING Heike
6103: PPUSH
6104: CALL_OW 104
// if un = Aviradze then
6108: LD_VAR 0 1
6112: PUSH
6113: LD_EXP 21
6117: EQUAL
6118: IFFALSE 6127
// YouLost ( Aviradze ) ;
6120: LD_STRING Aviradze
6122: PPUSH
6123: CALL_OW 104
// if un in usSci then
6127: LD_VAR 0 1
6131: PUSH
6132: LD_EXP 16
6136: IN
6137: IFFALSE 6153
// sciCounterKill := sciCounterKill + 1 ;
6139: LD_ADDR_EXP 8
6143: PUSH
6144: LD_EXP 8
6148: PUSH
6149: LD_INT 1
6151: PLUS
6152: ST_TO_ADDR
// if un = usLab then
6153: LD_VAR 0 1
6157: PUSH
6158: LD_INT 3
6160: EQUAL
6161: IFFALSE 6170
// YouLost ( Lab ) ;
6163: LD_STRING Lab
6165: PPUSH
6166: CALL_OW 104
// end ;
6170: PPOPN 1
6172: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
6173: LD_VAR 0 1
6177: PUSH
6178: LD_INT 2
6180: EQUAL
6181: PUSH
6182: LD_VAR 0 2
6186: PUSH
6187: LD_INT 5
6189: EQUAL
6190: AND
6191: IFFALSE 6200
// YouLost ( FriendlyFire ) ;
6193: LD_STRING FriendlyFire
6195: PPUSH
6196: CALL_OW 104
// end ; end_of_file
6200: PPOPN 2
6202: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
6203: GO 6205
6205: DISABLE
// begin ru_radar := 98 ;
6206: LD_ADDR_EXP 25
6210: PUSH
6211: LD_INT 98
6213: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
6214: LD_ADDR_EXP 26
6218: PUSH
6219: LD_INT 89
6221: ST_TO_ADDR
// us_hack := 99 ;
6222: LD_ADDR_EXP 27
6226: PUSH
6227: LD_INT 99
6229: ST_TO_ADDR
// us_artillery := 97 ;
6230: LD_ADDR_EXP 28
6234: PUSH
6235: LD_INT 97
6237: ST_TO_ADDR
// ar_bio_bomb := 91 ;
6238: LD_ADDR_EXP 29
6242: PUSH
6243: LD_INT 91
6245: ST_TO_ADDR
// end ; end_of_file end_of_file
6246: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
6247: GO 6249
6249: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
6250: LD_STRING initStreamRollete();
6252: PPUSH
6253: CALL_OW 559
// InitStreamMode ;
6257: CALL 6266 0 0
// DefineStreamItems ( ) ;
6261: CALL 6706 0 0
// end ;
6265: END
// function InitStreamMode ; begin
6266: LD_INT 0
6268: PPUSH
// streamModeActive := false ;
6269: LD_ADDR_EXP 30
6273: PUSH
6274: LD_INT 0
6276: ST_TO_ADDR
// normalCounter := 36 ;
6277: LD_ADDR_EXP 31
6281: PUSH
6282: LD_INT 36
6284: ST_TO_ADDR
// hardcoreCounter := 16 ;
6285: LD_ADDR_EXP 32
6289: PUSH
6290: LD_INT 16
6292: ST_TO_ADDR
// sRocket := false ;
6293: LD_ADDR_EXP 35
6297: PUSH
6298: LD_INT 0
6300: ST_TO_ADDR
// sSpeed := false ;
6301: LD_ADDR_EXP 34
6305: PUSH
6306: LD_INT 0
6308: ST_TO_ADDR
// sEngine := false ;
6309: LD_ADDR_EXP 36
6313: PUSH
6314: LD_INT 0
6316: ST_TO_ADDR
// sSpec := false ;
6317: LD_ADDR_EXP 33
6321: PUSH
6322: LD_INT 0
6324: ST_TO_ADDR
// sLevel := false ;
6325: LD_ADDR_EXP 37
6329: PUSH
6330: LD_INT 0
6332: ST_TO_ADDR
// sArmoury := false ;
6333: LD_ADDR_EXP 38
6337: PUSH
6338: LD_INT 0
6340: ST_TO_ADDR
// sRadar := false ;
6341: LD_ADDR_EXP 39
6345: PUSH
6346: LD_INT 0
6348: ST_TO_ADDR
// sBunker := false ;
6349: LD_ADDR_EXP 40
6353: PUSH
6354: LD_INT 0
6356: ST_TO_ADDR
// sHack := false ;
6357: LD_ADDR_EXP 41
6361: PUSH
6362: LD_INT 0
6364: ST_TO_ADDR
// sFire := false ;
6365: LD_ADDR_EXP 42
6369: PUSH
6370: LD_INT 0
6372: ST_TO_ADDR
// sRefresh := false ;
6373: LD_ADDR_EXP 43
6377: PUSH
6378: LD_INT 0
6380: ST_TO_ADDR
// sExp := false ;
6381: LD_ADDR_EXP 44
6385: PUSH
6386: LD_INT 0
6388: ST_TO_ADDR
// sDepot := false ;
6389: LD_ADDR_EXP 45
6393: PUSH
6394: LD_INT 0
6396: ST_TO_ADDR
// sFlag := false ;
6397: LD_ADDR_EXP 46
6401: PUSH
6402: LD_INT 0
6404: ST_TO_ADDR
// sKamikadze := false ;
6405: LD_ADDR_EXP 54
6409: PUSH
6410: LD_INT 0
6412: ST_TO_ADDR
// sTroll := false ;
6413: LD_ADDR_EXP 55
6417: PUSH
6418: LD_INT 0
6420: ST_TO_ADDR
// sSlow := false ;
6421: LD_ADDR_EXP 56
6425: PUSH
6426: LD_INT 0
6428: ST_TO_ADDR
// sLack := false ;
6429: LD_ADDR_EXP 57
6433: PUSH
6434: LD_INT 0
6436: ST_TO_ADDR
// sTank := false ;
6437: LD_ADDR_EXP 59
6441: PUSH
6442: LD_INT 0
6444: ST_TO_ADDR
// sRemote := false ;
6445: LD_ADDR_EXP 60
6449: PUSH
6450: LD_INT 0
6452: ST_TO_ADDR
// sPowell := false ;
6453: LD_ADDR_EXP 61
6457: PUSH
6458: LD_INT 0
6460: ST_TO_ADDR
// sTeleport := false ;
6461: LD_ADDR_EXP 64
6465: PUSH
6466: LD_INT 0
6468: ST_TO_ADDR
// sOilTower := false ;
6469: LD_ADDR_EXP 66
6473: PUSH
6474: LD_INT 0
6476: ST_TO_ADDR
// sShovel := false ;
6477: LD_ADDR_EXP 67
6481: PUSH
6482: LD_INT 0
6484: ST_TO_ADDR
// sSheik := false ;
6485: LD_ADDR_EXP 68
6489: PUSH
6490: LD_INT 0
6492: ST_TO_ADDR
// sEarthquake := false ;
6493: LD_ADDR_EXP 70
6497: PUSH
6498: LD_INT 0
6500: ST_TO_ADDR
// sAI := false ;
6501: LD_ADDR_EXP 71
6505: PUSH
6506: LD_INT 0
6508: ST_TO_ADDR
// sCargo := false ;
6509: LD_ADDR_EXP 74
6513: PUSH
6514: LD_INT 0
6516: ST_TO_ADDR
// sDLaser := false ;
6517: LD_ADDR_EXP 75
6521: PUSH
6522: LD_INT 0
6524: ST_TO_ADDR
// sExchange := false ;
6525: LD_ADDR_EXP 76
6529: PUSH
6530: LD_INT 0
6532: ST_TO_ADDR
// sFac := false ;
6533: LD_ADDR_EXP 77
6537: PUSH
6538: LD_INT 0
6540: ST_TO_ADDR
// sPower := false ;
6541: LD_ADDR_EXP 78
6545: PUSH
6546: LD_INT 0
6548: ST_TO_ADDR
// sRandom := false ;
6549: LD_ADDR_EXP 79
6553: PUSH
6554: LD_INT 0
6556: ST_TO_ADDR
// sShield := false ;
6557: LD_ADDR_EXP 80
6561: PUSH
6562: LD_INT 0
6564: ST_TO_ADDR
// sTime := false ;
6565: LD_ADDR_EXP 81
6569: PUSH
6570: LD_INT 0
6572: ST_TO_ADDR
// sTools := false ;
6573: LD_ADDR_EXP 82
6577: PUSH
6578: LD_INT 0
6580: ST_TO_ADDR
// sSold := false ;
6581: LD_ADDR_EXP 47
6585: PUSH
6586: LD_INT 0
6588: ST_TO_ADDR
// sDiff := false ;
6589: LD_ADDR_EXP 48
6593: PUSH
6594: LD_INT 0
6596: ST_TO_ADDR
// sFog := false ;
6597: LD_ADDR_EXP 51
6601: PUSH
6602: LD_INT 0
6604: ST_TO_ADDR
// sReset := false ;
6605: LD_ADDR_EXP 52
6609: PUSH
6610: LD_INT 0
6612: ST_TO_ADDR
// sSun := false ;
6613: LD_ADDR_EXP 53
6617: PUSH
6618: LD_INT 0
6620: ST_TO_ADDR
// sTiger := false ;
6621: LD_ADDR_EXP 49
6625: PUSH
6626: LD_INT 0
6628: ST_TO_ADDR
// sBomb := false ;
6629: LD_ADDR_EXP 50
6633: PUSH
6634: LD_INT 0
6636: ST_TO_ADDR
// sWound := false ;
6637: LD_ADDR_EXP 58
6641: PUSH
6642: LD_INT 0
6644: ST_TO_ADDR
// sBetray := false ;
6645: LD_ADDR_EXP 62
6649: PUSH
6650: LD_INT 0
6652: ST_TO_ADDR
// sContamin := false ;
6653: LD_ADDR_EXP 63
6657: PUSH
6658: LD_INT 0
6660: ST_TO_ADDR
// sOil := false ;
6661: LD_ADDR_EXP 65
6665: PUSH
6666: LD_INT 0
6668: ST_TO_ADDR
// sStu := false ;
6669: LD_ADDR_EXP 69
6673: PUSH
6674: LD_INT 0
6676: ST_TO_ADDR
// sBazooka := false ;
6677: LD_ADDR_EXP 72
6681: PUSH
6682: LD_INT 0
6684: ST_TO_ADDR
// sMortar := false ;
6685: LD_ADDR_EXP 73
6689: PUSH
6690: LD_INT 0
6692: ST_TO_ADDR
// sRanger := false ;
6693: LD_ADDR_EXP 83
6697: PUSH
6698: LD_INT 0
6700: ST_TO_ADDR
// end ;
6701: LD_VAR 0 1
6705: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
6706: LD_INT 0
6708: PPUSH
6709: PPUSH
6710: PPUSH
6711: PPUSH
6712: PPUSH
// result := [ ] ;
6713: LD_ADDR_VAR 0 1
6717: PUSH
6718: EMPTY
6719: ST_TO_ADDR
// if campaign_id = 1 then
6720: LD_OWVAR 69
6724: PUSH
6725: LD_INT 1
6727: EQUAL
6728: IFFALSE 9666
// begin case mission_number of 1 :
6730: LD_OWVAR 70
6734: PUSH
6735: LD_INT 1
6737: DOUBLE
6738: EQUAL
6739: IFTRUE 6743
6741: GO 6807
6743: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
6744: LD_ADDR_VAR 0 1
6748: PUSH
6749: LD_INT 2
6751: PUSH
6752: LD_INT 4
6754: PUSH
6755: LD_INT 11
6757: PUSH
6758: LD_INT 12
6760: PUSH
6761: LD_INT 15
6763: PUSH
6764: LD_INT 16
6766: PUSH
6767: LD_INT 22
6769: PUSH
6770: LD_INT 23
6772: PUSH
6773: LD_INT 26
6775: PUSH
6776: EMPTY
6777: LIST
6778: LIST
6779: LIST
6780: LIST
6781: LIST
6782: LIST
6783: LIST
6784: LIST
6785: LIST
6786: PUSH
6787: LD_INT 101
6789: PUSH
6790: LD_INT 102
6792: PUSH
6793: LD_INT 106
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: LIST
6800: PUSH
6801: EMPTY
6802: LIST
6803: LIST
6804: ST_TO_ADDR
6805: GO 9664
6807: LD_INT 2
6809: DOUBLE
6810: EQUAL
6811: IFTRUE 6815
6813: GO 6887
6815: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
6816: LD_ADDR_VAR 0 1
6820: PUSH
6821: LD_INT 2
6823: PUSH
6824: LD_INT 4
6826: PUSH
6827: LD_INT 11
6829: PUSH
6830: LD_INT 12
6832: PUSH
6833: LD_INT 15
6835: PUSH
6836: LD_INT 16
6838: PUSH
6839: LD_INT 22
6841: PUSH
6842: LD_INT 23
6844: PUSH
6845: LD_INT 26
6847: PUSH
6848: EMPTY
6849: LIST
6850: LIST
6851: LIST
6852: LIST
6853: LIST
6854: LIST
6855: LIST
6856: LIST
6857: LIST
6858: PUSH
6859: LD_INT 101
6861: PUSH
6862: LD_INT 102
6864: PUSH
6865: LD_INT 105
6867: PUSH
6868: LD_INT 106
6870: PUSH
6871: LD_INT 108
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: LIST
6878: LIST
6879: LIST
6880: PUSH
6881: EMPTY
6882: LIST
6883: LIST
6884: ST_TO_ADDR
6885: GO 9664
6887: LD_INT 3
6889: DOUBLE
6890: EQUAL
6891: IFTRUE 6895
6893: GO 6971
6895: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
6896: LD_ADDR_VAR 0 1
6900: PUSH
6901: LD_INT 2
6903: PUSH
6904: LD_INT 4
6906: PUSH
6907: LD_INT 5
6909: PUSH
6910: LD_INT 11
6912: PUSH
6913: LD_INT 12
6915: PUSH
6916: LD_INT 15
6918: PUSH
6919: LD_INT 16
6921: PUSH
6922: LD_INT 22
6924: PUSH
6925: LD_INT 26
6927: PUSH
6928: LD_INT 36
6930: PUSH
6931: EMPTY
6932: LIST
6933: LIST
6934: LIST
6935: LIST
6936: LIST
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: PUSH
6943: LD_INT 101
6945: PUSH
6946: LD_INT 102
6948: PUSH
6949: LD_INT 105
6951: PUSH
6952: LD_INT 106
6954: PUSH
6955: LD_INT 108
6957: PUSH
6958: EMPTY
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: ST_TO_ADDR
6969: GO 9664
6971: LD_INT 4
6973: DOUBLE
6974: EQUAL
6975: IFTRUE 6979
6977: GO 7063
6979: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
6980: LD_ADDR_VAR 0 1
6984: PUSH
6985: LD_INT 2
6987: PUSH
6988: LD_INT 4
6990: PUSH
6991: LD_INT 5
6993: PUSH
6994: LD_INT 8
6996: PUSH
6997: LD_INT 11
6999: PUSH
7000: LD_INT 12
7002: PUSH
7003: LD_INT 15
7005: PUSH
7006: LD_INT 16
7008: PUSH
7009: LD_INT 22
7011: PUSH
7012: LD_INT 23
7014: PUSH
7015: LD_INT 26
7017: PUSH
7018: LD_INT 36
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: LIST
7032: LIST
7033: LIST
7034: PUSH
7035: LD_INT 101
7037: PUSH
7038: LD_INT 102
7040: PUSH
7041: LD_INT 105
7043: PUSH
7044: LD_INT 106
7046: PUSH
7047: LD_INT 108
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: LIST
7054: LIST
7055: LIST
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: ST_TO_ADDR
7061: GO 9664
7063: LD_INT 5
7065: DOUBLE
7066: EQUAL
7067: IFTRUE 7071
7069: GO 7171
7071: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
7072: LD_ADDR_VAR 0 1
7076: PUSH
7077: LD_INT 2
7079: PUSH
7080: LD_INT 4
7082: PUSH
7083: LD_INT 5
7085: PUSH
7086: LD_INT 6
7088: PUSH
7089: LD_INT 8
7091: PUSH
7092: LD_INT 11
7094: PUSH
7095: LD_INT 12
7097: PUSH
7098: LD_INT 15
7100: PUSH
7101: LD_INT 16
7103: PUSH
7104: LD_INT 22
7106: PUSH
7107: LD_INT 23
7109: PUSH
7110: LD_INT 25
7112: PUSH
7113: LD_INT 26
7115: PUSH
7116: LD_INT 36
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: LIST
7123: LIST
7124: LIST
7125: LIST
7126: LIST
7127: LIST
7128: LIST
7129: LIST
7130: LIST
7131: LIST
7132: LIST
7133: LIST
7134: PUSH
7135: LD_INT 101
7137: PUSH
7138: LD_INT 102
7140: PUSH
7141: LD_INT 105
7143: PUSH
7144: LD_INT 106
7146: PUSH
7147: LD_INT 108
7149: PUSH
7150: LD_INT 109
7152: PUSH
7153: LD_INT 112
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: LIST
7160: LIST
7161: LIST
7162: LIST
7163: LIST
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: ST_TO_ADDR
7169: GO 9664
7171: LD_INT 6
7173: DOUBLE
7174: EQUAL
7175: IFTRUE 7179
7177: GO 7299
7179: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
7180: LD_ADDR_VAR 0 1
7184: PUSH
7185: LD_INT 2
7187: PUSH
7188: LD_INT 4
7190: PUSH
7191: LD_INT 5
7193: PUSH
7194: LD_INT 6
7196: PUSH
7197: LD_INT 8
7199: PUSH
7200: LD_INT 11
7202: PUSH
7203: LD_INT 12
7205: PUSH
7206: LD_INT 15
7208: PUSH
7209: LD_INT 16
7211: PUSH
7212: LD_INT 20
7214: PUSH
7215: LD_INT 21
7217: PUSH
7218: LD_INT 22
7220: PUSH
7221: LD_INT 23
7223: PUSH
7224: LD_INT 25
7226: PUSH
7227: LD_INT 26
7229: PUSH
7230: LD_INT 30
7232: PUSH
7233: LD_INT 31
7235: PUSH
7236: LD_INT 32
7238: PUSH
7239: LD_INT 36
7241: PUSH
7242: EMPTY
7243: LIST
7244: LIST
7245: LIST
7246: LIST
7247: LIST
7248: LIST
7249: LIST
7250: LIST
7251: LIST
7252: LIST
7253: LIST
7254: LIST
7255: LIST
7256: LIST
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: LIST
7262: PUSH
7263: LD_INT 101
7265: PUSH
7266: LD_INT 102
7268: PUSH
7269: LD_INT 105
7271: PUSH
7272: LD_INT 106
7274: PUSH
7275: LD_INT 108
7277: PUSH
7278: LD_INT 109
7280: PUSH
7281: LD_INT 112
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: LIST
7288: LIST
7289: LIST
7290: LIST
7291: LIST
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: ST_TO_ADDR
7297: GO 9664
7299: LD_INT 7
7301: DOUBLE
7302: EQUAL
7303: IFTRUE 7307
7305: GO 7407
7307: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
7308: LD_ADDR_VAR 0 1
7312: PUSH
7313: LD_INT 2
7315: PUSH
7316: LD_INT 4
7318: PUSH
7319: LD_INT 5
7321: PUSH
7322: LD_INT 7
7324: PUSH
7325: LD_INT 11
7327: PUSH
7328: LD_INT 12
7330: PUSH
7331: LD_INT 15
7333: PUSH
7334: LD_INT 16
7336: PUSH
7337: LD_INT 20
7339: PUSH
7340: LD_INT 21
7342: PUSH
7343: LD_INT 22
7345: PUSH
7346: LD_INT 23
7348: PUSH
7349: LD_INT 25
7351: PUSH
7352: LD_INT 26
7354: PUSH
7355: EMPTY
7356: LIST
7357: LIST
7358: LIST
7359: LIST
7360: LIST
7361: LIST
7362: LIST
7363: LIST
7364: LIST
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: PUSH
7371: LD_INT 101
7373: PUSH
7374: LD_INT 102
7376: PUSH
7377: LD_INT 103
7379: PUSH
7380: LD_INT 105
7382: PUSH
7383: LD_INT 106
7385: PUSH
7386: LD_INT 108
7388: PUSH
7389: LD_INT 112
7391: PUSH
7392: EMPTY
7393: LIST
7394: LIST
7395: LIST
7396: LIST
7397: LIST
7398: LIST
7399: LIST
7400: PUSH
7401: EMPTY
7402: LIST
7403: LIST
7404: ST_TO_ADDR
7405: GO 9664
7407: LD_INT 8
7409: DOUBLE
7410: EQUAL
7411: IFTRUE 7415
7413: GO 7543
7415: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
7416: LD_ADDR_VAR 0 1
7420: PUSH
7421: LD_INT 2
7423: PUSH
7424: LD_INT 4
7426: PUSH
7427: LD_INT 5
7429: PUSH
7430: LD_INT 6
7432: PUSH
7433: LD_INT 7
7435: PUSH
7436: LD_INT 8
7438: PUSH
7439: LD_INT 11
7441: PUSH
7442: LD_INT 12
7444: PUSH
7445: LD_INT 15
7447: PUSH
7448: LD_INT 16
7450: PUSH
7451: LD_INT 20
7453: PUSH
7454: LD_INT 21
7456: PUSH
7457: LD_INT 22
7459: PUSH
7460: LD_INT 23
7462: PUSH
7463: LD_INT 25
7465: PUSH
7466: LD_INT 26
7468: PUSH
7469: LD_INT 30
7471: PUSH
7472: LD_INT 31
7474: PUSH
7475: LD_INT 32
7477: PUSH
7478: LD_INT 36
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: LIST
7485: LIST
7486: LIST
7487: LIST
7488: LIST
7489: LIST
7490: LIST
7491: LIST
7492: LIST
7493: LIST
7494: LIST
7495: LIST
7496: LIST
7497: LIST
7498: LIST
7499: LIST
7500: LIST
7501: LIST
7502: PUSH
7503: LD_INT 101
7505: PUSH
7506: LD_INT 102
7508: PUSH
7509: LD_INT 103
7511: PUSH
7512: LD_INT 105
7514: PUSH
7515: LD_INT 106
7517: PUSH
7518: LD_INT 108
7520: PUSH
7521: LD_INT 109
7523: PUSH
7524: LD_INT 112
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: PUSH
7537: EMPTY
7538: LIST
7539: LIST
7540: ST_TO_ADDR
7541: GO 9664
7543: LD_INT 9
7545: DOUBLE
7546: EQUAL
7547: IFTRUE 7551
7549: GO 7687
7551: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
7552: LD_ADDR_VAR 0 1
7556: PUSH
7557: LD_INT 2
7559: PUSH
7560: LD_INT 4
7562: PUSH
7563: LD_INT 5
7565: PUSH
7566: LD_INT 6
7568: PUSH
7569: LD_INT 7
7571: PUSH
7572: LD_INT 8
7574: PUSH
7575: LD_INT 11
7577: PUSH
7578: LD_INT 12
7580: PUSH
7581: LD_INT 15
7583: PUSH
7584: LD_INT 16
7586: PUSH
7587: LD_INT 20
7589: PUSH
7590: LD_INT 21
7592: PUSH
7593: LD_INT 22
7595: PUSH
7596: LD_INT 23
7598: PUSH
7599: LD_INT 25
7601: PUSH
7602: LD_INT 26
7604: PUSH
7605: LD_INT 28
7607: PUSH
7608: LD_INT 30
7610: PUSH
7611: LD_INT 31
7613: PUSH
7614: LD_INT 32
7616: PUSH
7617: LD_INT 36
7619: PUSH
7620: EMPTY
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: PUSH
7643: LD_INT 101
7645: PUSH
7646: LD_INT 102
7648: PUSH
7649: LD_INT 103
7651: PUSH
7652: LD_INT 105
7654: PUSH
7655: LD_INT 106
7657: PUSH
7658: LD_INT 108
7660: PUSH
7661: LD_INT 109
7663: PUSH
7664: LD_INT 112
7666: PUSH
7667: LD_INT 114
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: PUSH
7681: EMPTY
7682: LIST
7683: LIST
7684: ST_TO_ADDR
7685: GO 9664
7687: LD_INT 10
7689: DOUBLE
7690: EQUAL
7691: IFTRUE 7695
7693: GO 7879
7695: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
7696: LD_ADDR_VAR 0 1
7700: PUSH
7701: LD_INT 2
7703: PUSH
7704: LD_INT 4
7706: PUSH
7707: LD_INT 5
7709: PUSH
7710: LD_INT 6
7712: PUSH
7713: LD_INT 7
7715: PUSH
7716: LD_INT 8
7718: PUSH
7719: LD_INT 9
7721: PUSH
7722: LD_INT 10
7724: PUSH
7725: LD_INT 11
7727: PUSH
7728: LD_INT 12
7730: PUSH
7731: LD_INT 13
7733: PUSH
7734: LD_INT 14
7736: PUSH
7737: LD_INT 15
7739: PUSH
7740: LD_INT 16
7742: PUSH
7743: LD_INT 17
7745: PUSH
7746: LD_INT 18
7748: PUSH
7749: LD_INT 19
7751: PUSH
7752: LD_INT 20
7754: PUSH
7755: LD_INT 21
7757: PUSH
7758: LD_INT 22
7760: PUSH
7761: LD_INT 23
7763: PUSH
7764: LD_INT 24
7766: PUSH
7767: LD_INT 25
7769: PUSH
7770: LD_INT 26
7772: PUSH
7773: LD_INT 28
7775: PUSH
7776: LD_INT 30
7778: PUSH
7779: LD_INT 31
7781: PUSH
7782: LD_INT 32
7784: PUSH
7785: LD_INT 36
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: PUSH
7819: LD_INT 101
7821: PUSH
7822: LD_INT 102
7824: PUSH
7825: LD_INT 103
7827: PUSH
7828: LD_INT 104
7830: PUSH
7831: LD_INT 105
7833: PUSH
7834: LD_INT 106
7836: PUSH
7837: LD_INT 107
7839: PUSH
7840: LD_INT 108
7842: PUSH
7843: LD_INT 109
7845: PUSH
7846: LD_INT 110
7848: PUSH
7849: LD_INT 111
7851: PUSH
7852: LD_INT 112
7854: PUSH
7855: LD_INT 114
7857: PUSH
7858: EMPTY
7859: LIST
7860: LIST
7861: LIST
7862: LIST
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: LIST
7871: LIST
7872: PUSH
7873: EMPTY
7874: LIST
7875: LIST
7876: ST_TO_ADDR
7877: GO 9664
7879: LD_INT 11
7881: DOUBLE
7882: EQUAL
7883: IFTRUE 7887
7885: GO 8079
7887: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
7888: LD_ADDR_VAR 0 1
7892: PUSH
7893: LD_INT 2
7895: PUSH
7896: LD_INT 3
7898: PUSH
7899: LD_INT 4
7901: PUSH
7902: LD_INT 5
7904: PUSH
7905: LD_INT 6
7907: PUSH
7908: LD_INT 7
7910: PUSH
7911: LD_INT 8
7913: PUSH
7914: LD_INT 9
7916: PUSH
7917: LD_INT 10
7919: PUSH
7920: LD_INT 11
7922: PUSH
7923: LD_INT 12
7925: PUSH
7926: LD_INT 13
7928: PUSH
7929: LD_INT 14
7931: PUSH
7932: LD_INT 15
7934: PUSH
7935: LD_INT 16
7937: PUSH
7938: LD_INT 17
7940: PUSH
7941: LD_INT 18
7943: PUSH
7944: LD_INT 19
7946: PUSH
7947: LD_INT 20
7949: PUSH
7950: LD_INT 21
7952: PUSH
7953: LD_INT 22
7955: PUSH
7956: LD_INT 23
7958: PUSH
7959: LD_INT 24
7961: PUSH
7962: LD_INT 25
7964: PUSH
7965: LD_INT 26
7967: PUSH
7968: LD_INT 28
7970: PUSH
7971: LD_INT 30
7973: PUSH
7974: LD_INT 31
7976: PUSH
7977: LD_INT 32
7979: PUSH
7980: LD_INT 34
7982: PUSH
7983: LD_INT 36
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: LIST
7990: LIST
7991: LIST
7992: LIST
7993: LIST
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: LIST
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: LIST
8005: LIST
8006: LIST
8007: LIST
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: PUSH
8019: LD_INT 101
8021: PUSH
8022: LD_INT 102
8024: PUSH
8025: LD_INT 103
8027: PUSH
8028: LD_INT 104
8030: PUSH
8031: LD_INT 105
8033: PUSH
8034: LD_INT 106
8036: PUSH
8037: LD_INT 107
8039: PUSH
8040: LD_INT 108
8042: PUSH
8043: LD_INT 109
8045: PUSH
8046: LD_INT 110
8048: PUSH
8049: LD_INT 111
8051: PUSH
8052: LD_INT 112
8054: PUSH
8055: LD_INT 114
8057: PUSH
8058: EMPTY
8059: LIST
8060: LIST
8061: LIST
8062: LIST
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: LIST
8072: PUSH
8073: EMPTY
8074: LIST
8075: LIST
8076: ST_TO_ADDR
8077: GO 9664
8079: LD_INT 12
8081: DOUBLE
8082: EQUAL
8083: IFTRUE 8087
8085: GO 8295
8087: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
8088: LD_ADDR_VAR 0 1
8092: PUSH
8093: LD_INT 1
8095: PUSH
8096: LD_INT 2
8098: PUSH
8099: LD_INT 3
8101: PUSH
8102: LD_INT 4
8104: PUSH
8105: LD_INT 5
8107: PUSH
8108: LD_INT 6
8110: PUSH
8111: LD_INT 7
8113: PUSH
8114: LD_INT 8
8116: PUSH
8117: LD_INT 9
8119: PUSH
8120: LD_INT 10
8122: PUSH
8123: LD_INT 11
8125: PUSH
8126: LD_INT 12
8128: PUSH
8129: LD_INT 13
8131: PUSH
8132: LD_INT 14
8134: PUSH
8135: LD_INT 15
8137: PUSH
8138: LD_INT 16
8140: PUSH
8141: LD_INT 17
8143: PUSH
8144: LD_INT 18
8146: PUSH
8147: LD_INT 19
8149: PUSH
8150: LD_INT 20
8152: PUSH
8153: LD_INT 21
8155: PUSH
8156: LD_INT 22
8158: PUSH
8159: LD_INT 23
8161: PUSH
8162: LD_INT 24
8164: PUSH
8165: LD_INT 25
8167: PUSH
8168: LD_INT 26
8170: PUSH
8171: LD_INT 27
8173: PUSH
8174: LD_INT 28
8176: PUSH
8177: LD_INT 30
8179: PUSH
8180: LD_INT 31
8182: PUSH
8183: LD_INT 32
8185: PUSH
8186: LD_INT 33
8188: PUSH
8189: LD_INT 34
8191: PUSH
8192: LD_INT 36
8194: PUSH
8195: EMPTY
8196: LIST
8197: LIST
8198: LIST
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: PUSH
8231: LD_INT 101
8233: PUSH
8234: LD_INT 102
8236: PUSH
8237: LD_INT 103
8239: PUSH
8240: LD_INT 104
8242: PUSH
8243: LD_INT 105
8245: PUSH
8246: LD_INT 106
8248: PUSH
8249: LD_INT 107
8251: PUSH
8252: LD_INT 108
8254: PUSH
8255: LD_INT 109
8257: PUSH
8258: LD_INT 110
8260: PUSH
8261: LD_INT 111
8263: PUSH
8264: LD_INT 112
8266: PUSH
8267: LD_INT 113
8269: PUSH
8270: LD_INT 114
8272: PUSH
8273: EMPTY
8274: LIST
8275: LIST
8276: LIST
8277: LIST
8278: LIST
8279: LIST
8280: LIST
8281: LIST
8282: LIST
8283: LIST
8284: LIST
8285: LIST
8286: LIST
8287: LIST
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: ST_TO_ADDR
8293: GO 9664
8295: LD_INT 13
8297: DOUBLE
8298: EQUAL
8299: IFTRUE 8303
8301: GO 8499
8303: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
8304: LD_ADDR_VAR 0 1
8308: PUSH
8309: LD_INT 1
8311: PUSH
8312: LD_INT 2
8314: PUSH
8315: LD_INT 3
8317: PUSH
8318: LD_INT 4
8320: PUSH
8321: LD_INT 5
8323: PUSH
8324: LD_INT 8
8326: PUSH
8327: LD_INT 9
8329: PUSH
8330: LD_INT 10
8332: PUSH
8333: LD_INT 11
8335: PUSH
8336: LD_INT 12
8338: PUSH
8339: LD_INT 14
8341: PUSH
8342: LD_INT 15
8344: PUSH
8345: LD_INT 16
8347: PUSH
8348: LD_INT 17
8350: PUSH
8351: LD_INT 18
8353: PUSH
8354: LD_INT 19
8356: PUSH
8357: LD_INT 20
8359: PUSH
8360: LD_INT 21
8362: PUSH
8363: LD_INT 22
8365: PUSH
8366: LD_INT 23
8368: PUSH
8369: LD_INT 24
8371: PUSH
8372: LD_INT 25
8374: PUSH
8375: LD_INT 26
8377: PUSH
8378: LD_INT 27
8380: PUSH
8381: LD_INT 28
8383: PUSH
8384: LD_INT 30
8386: PUSH
8387: LD_INT 31
8389: PUSH
8390: LD_INT 32
8392: PUSH
8393: LD_INT 33
8395: PUSH
8396: LD_INT 34
8398: PUSH
8399: LD_INT 36
8401: PUSH
8402: EMPTY
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: LIST
8408: LIST
8409: LIST
8410: LIST
8411: LIST
8412: LIST
8413: LIST
8414: LIST
8415: LIST
8416: LIST
8417: LIST
8418: LIST
8419: LIST
8420: LIST
8421: LIST
8422: LIST
8423: LIST
8424: LIST
8425: LIST
8426: LIST
8427: LIST
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: PUSH
8435: LD_INT 101
8437: PUSH
8438: LD_INT 102
8440: PUSH
8441: LD_INT 103
8443: PUSH
8444: LD_INT 104
8446: PUSH
8447: LD_INT 105
8449: PUSH
8450: LD_INT 106
8452: PUSH
8453: LD_INT 107
8455: PUSH
8456: LD_INT 108
8458: PUSH
8459: LD_INT 109
8461: PUSH
8462: LD_INT 110
8464: PUSH
8465: LD_INT 111
8467: PUSH
8468: LD_INT 112
8470: PUSH
8471: LD_INT 113
8473: PUSH
8474: LD_INT 114
8476: PUSH
8477: EMPTY
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: PUSH
8493: EMPTY
8494: LIST
8495: LIST
8496: ST_TO_ADDR
8497: GO 9664
8499: LD_INT 14
8501: DOUBLE
8502: EQUAL
8503: IFTRUE 8507
8505: GO 8719
8507: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
8508: LD_ADDR_VAR 0 1
8512: PUSH
8513: LD_INT 1
8515: PUSH
8516: LD_INT 2
8518: PUSH
8519: LD_INT 3
8521: PUSH
8522: LD_INT 4
8524: PUSH
8525: LD_INT 5
8527: PUSH
8528: LD_INT 6
8530: PUSH
8531: LD_INT 7
8533: PUSH
8534: LD_INT 8
8536: PUSH
8537: LD_INT 9
8539: PUSH
8540: LD_INT 10
8542: PUSH
8543: LD_INT 11
8545: PUSH
8546: LD_INT 12
8548: PUSH
8549: LD_INT 13
8551: PUSH
8552: LD_INT 14
8554: PUSH
8555: LD_INT 15
8557: PUSH
8558: LD_INT 16
8560: PUSH
8561: LD_INT 17
8563: PUSH
8564: LD_INT 18
8566: PUSH
8567: LD_INT 19
8569: PUSH
8570: LD_INT 20
8572: PUSH
8573: LD_INT 21
8575: PUSH
8576: LD_INT 22
8578: PUSH
8579: LD_INT 23
8581: PUSH
8582: LD_INT 24
8584: PUSH
8585: LD_INT 25
8587: PUSH
8588: LD_INT 26
8590: PUSH
8591: LD_INT 27
8593: PUSH
8594: LD_INT 28
8596: PUSH
8597: LD_INT 29
8599: PUSH
8600: LD_INT 30
8602: PUSH
8603: LD_INT 31
8605: PUSH
8606: LD_INT 32
8608: PUSH
8609: LD_INT 33
8611: PUSH
8612: LD_INT 34
8614: PUSH
8615: LD_INT 36
8617: PUSH
8618: EMPTY
8619: LIST
8620: LIST
8621: LIST
8622: LIST
8623: LIST
8624: LIST
8625: LIST
8626: LIST
8627: LIST
8628: LIST
8629: LIST
8630: LIST
8631: LIST
8632: LIST
8633: LIST
8634: LIST
8635: LIST
8636: LIST
8637: LIST
8638: LIST
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: PUSH
8655: LD_INT 101
8657: PUSH
8658: LD_INT 102
8660: PUSH
8661: LD_INT 103
8663: PUSH
8664: LD_INT 104
8666: PUSH
8667: LD_INT 105
8669: PUSH
8670: LD_INT 106
8672: PUSH
8673: LD_INT 107
8675: PUSH
8676: LD_INT 108
8678: PUSH
8679: LD_INT 109
8681: PUSH
8682: LD_INT 110
8684: PUSH
8685: LD_INT 111
8687: PUSH
8688: LD_INT 112
8690: PUSH
8691: LD_INT 113
8693: PUSH
8694: LD_INT 114
8696: PUSH
8697: EMPTY
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: PUSH
8713: EMPTY
8714: LIST
8715: LIST
8716: ST_TO_ADDR
8717: GO 9664
8719: LD_INT 15
8721: DOUBLE
8722: EQUAL
8723: IFTRUE 8727
8725: GO 8939
8727: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
8728: LD_ADDR_VAR 0 1
8732: PUSH
8733: LD_INT 1
8735: PUSH
8736: LD_INT 2
8738: PUSH
8739: LD_INT 3
8741: PUSH
8742: LD_INT 4
8744: PUSH
8745: LD_INT 5
8747: PUSH
8748: LD_INT 6
8750: PUSH
8751: LD_INT 7
8753: PUSH
8754: LD_INT 8
8756: PUSH
8757: LD_INT 9
8759: PUSH
8760: LD_INT 10
8762: PUSH
8763: LD_INT 11
8765: PUSH
8766: LD_INT 12
8768: PUSH
8769: LD_INT 13
8771: PUSH
8772: LD_INT 14
8774: PUSH
8775: LD_INT 15
8777: PUSH
8778: LD_INT 16
8780: PUSH
8781: LD_INT 17
8783: PUSH
8784: LD_INT 18
8786: PUSH
8787: LD_INT 19
8789: PUSH
8790: LD_INT 20
8792: PUSH
8793: LD_INT 21
8795: PUSH
8796: LD_INT 22
8798: PUSH
8799: LD_INT 23
8801: PUSH
8802: LD_INT 24
8804: PUSH
8805: LD_INT 25
8807: PUSH
8808: LD_INT 26
8810: PUSH
8811: LD_INT 27
8813: PUSH
8814: LD_INT 28
8816: PUSH
8817: LD_INT 29
8819: PUSH
8820: LD_INT 30
8822: PUSH
8823: LD_INT 31
8825: PUSH
8826: LD_INT 32
8828: PUSH
8829: LD_INT 33
8831: PUSH
8832: LD_INT 34
8834: PUSH
8835: LD_INT 36
8837: PUSH
8838: EMPTY
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: LIST
8855: LIST
8856: LIST
8857: LIST
8858: LIST
8859: LIST
8860: LIST
8861: LIST
8862: LIST
8863: LIST
8864: LIST
8865: LIST
8866: LIST
8867: LIST
8868: LIST
8869: LIST
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: PUSH
8875: LD_INT 101
8877: PUSH
8878: LD_INT 102
8880: PUSH
8881: LD_INT 103
8883: PUSH
8884: LD_INT 104
8886: PUSH
8887: LD_INT 105
8889: PUSH
8890: LD_INT 106
8892: PUSH
8893: LD_INT 107
8895: PUSH
8896: LD_INT 108
8898: PUSH
8899: LD_INT 109
8901: PUSH
8902: LD_INT 110
8904: PUSH
8905: LD_INT 111
8907: PUSH
8908: LD_INT 112
8910: PUSH
8911: LD_INT 113
8913: PUSH
8914: LD_INT 114
8916: PUSH
8917: EMPTY
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: PUSH
8933: EMPTY
8934: LIST
8935: LIST
8936: ST_TO_ADDR
8937: GO 9664
8939: LD_INT 16
8941: DOUBLE
8942: EQUAL
8943: IFTRUE 8947
8945: GO 9071
8947: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
8948: LD_ADDR_VAR 0 1
8952: PUSH
8953: LD_INT 2
8955: PUSH
8956: LD_INT 4
8958: PUSH
8959: LD_INT 5
8961: PUSH
8962: LD_INT 7
8964: PUSH
8965: LD_INT 11
8967: PUSH
8968: LD_INT 12
8970: PUSH
8971: LD_INT 15
8973: PUSH
8974: LD_INT 16
8976: PUSH
8977: LD_INT 20
8979: PUSH
8980: LD_INT 21
8982: PUSH
8983: LD_INT 22
8985: PUSH
8986: LD_INT 23
8988: PUSH
8989: LD_INT 25
8991: PUSH
8992: LD_INT 26
8994: PUSH
8995: LD_INT 30
8997: PUSH
8998: LD_INT 31
9000: PUSH
9001: LD_INT 32
9003: PUSH
9004: LD_INT 33
9006: PUSH
9007: LD_INT 34
9009: PUSH
9010: EMPTY
9011: LIST
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: LIST
9022: LIST
9023: LIST
9024: LIST
9025: LIST
9026: LIST
9027: LIST
9028: LIST
9029: LIST
9030: PUSH
9031: LD_INT 101
9033: PUSH
9034: LD_INT 102
9036: PUSH
9037: LD_INT 103
9039: PUSH
9040: LD_INT 106
9042: PUSH
9043: LD_INT 108
9045: PUSH
9046: LD_INT 112
9048: PUSH
9049: LD_INT 113
9051: PUSH
9052: LD_INT 114
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: PUSH
9065: EMPTY
9066: LIST
9067: LIST
9068: ST_TO_ADDR
9069: GO 9664
9071: LD_INT 17
9073: DOUBLE
9074: EQUAL
9075: IFTRUE 9079
9077: GO 9291
9079: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
9080: LD_ADDR_VAR 0 1
9084: PUSH
9085: LD_INT 1
9087: PUSH
9088: LD_INT 2
9090: PUSH
9091: LD_INT 3
9093: PUSH
9094: LD_INT 4
9096: PUSH
9097: LD_INT 5
9099: PUSH
9100: LD_INT 6
9102: PUSH
9103: LD_INT 7
9105: PUSH
9106: LD_INT 8
9108: PUSH
9109: LD_INT 9
9111: PUSH
9112: LD_INT 10
9114: PUSH
9115: LD_INT 11
9117: PUSH
9118: LD_INT 12
9120: PUSH
9121: LD_INT 13
9123: PUSH
9124: LD_INT 14
9126: PUSH
9127: LD_INT 15
9129: PUSH
9130: LD_INT 16
9132: PUSH
9133: LD_INT 17
9135: PUSH
9136: LD_INT 18
9138: PUSH
9139: LD_INT 19
9141: PUSH
9142: LD_INT 20
9144: PUSH
9145: LD_INT 21
9147: PUSH
9148: LD_INT 22
9150: PUSH
9151: LD_INT 23
9153: PUSH
9154: LD_INT 24
9156: PUSH
9157: LD_INT 25
9159: PUSH
9160: LD_INT 26
9162: PUSH
9163: LD_INT 27
9165: PUSH
9166: LD_INT 28
9168: PUSH
9169: LD_INT 29
9171: PUSH
9172: LD_INT 30
9174: PUSH
9175: LD_INT 31
9177: PUSH
9178: LD_INT 32
9180: PUSH
9181: LD_INT 33
9183: PUSH
9184: LD_INT 34
9186: PUSH
9187: LD_INT 36
9189: PUSH
9190: EMPTY
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: LIST
9222: LIST
9223: LIST
9224: LIST
9225: LIST
9226: PUSH
9227: LD_INT 101
9229: PUSH
9230: LD_INT 102
9232: PUSH
9233: LD_INT 103
9235: PUSH
9236: LD_INT 104
9238: PUSH
9239: LD_INT 105
9241: PUSH
9242: LD_INT 106
9244: PUSH
9245: LD_INT 107
9247: PUSH
9248: LD_INT 108
9250: PUSH
9251: LD_INT 109
9253: PUSH
9254: LD_INT 110
9256: PUSH
9257: LD_INT 111
9259: PUSH
9260: LD_INT 112
9262: PUSH
9263: LD_INT 113
9265: PUSH
9266: LD_INT 114
9268: PUSH
9269: EMPTY
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: LIST
9284: PUSH
9285: EMPTY
9286: LIST
9287: LIST
9288: ST_TO_ADDR
9289: GO 9664
9291: LD_INT 18
9293: DOUBLE
9294: EQUAL
9295: IFTRUE 9299
9297: GO 9435
9299: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
9300: LD_ADDR_VAR 0 1
9304: PUSH
9305: LD_INT 2
9307: PUSH
9308: LD_INT 4
9310: PUSH
9311: LD_INT 5
9313: PUSH
9314: LD_INT 7
9316: PUSH
9317: LD_INT 11
9319: PUSH
9320: LD_INT 12
9322: PUSH
9323: LD_INT 15
9325: PUSH
9326: LD_INT 16
9328: PUSH
9329: LD_INT 20
9331: PUSH
9332: LD_INT 21
9334: PUSH
9335: LD_INT 22
9337: PUSH
9338: LD_INT 23
9340: PUSH
9341: LD_INT 25
9343: PUSH
9344: LD_INT 26
9346: PUSH
9347: LD_INT 30
9349: PUSH
9350: LD_INT 31
9352: PUSH
9353: LD_INT 32
9355: PUSH
9356: LD_INT 33
9358: PUSH
9359: LD_INT 34
9361: PUSH
9362: LD_INT 35
9364: PUSH
9365: LD_INT 36
9367: PUSH
9368: EMPTY
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: PUSH
9391: LD_INT 101
9393: PUSH
9394: LD_INT 102
9396: PUSH
9397: LD_INT 103
9399: PUSH
9400: LD_INT 106
9402: PUSH
9403: LD_INT 108
9405: PUSH
9406: LD_INT 112
9408: PUSH
9409: LD_INT 113
9411: PUSH
9412: LD_INT 114
9414: PUSH
9415: LD_INT 115
9417: PUSH
9418: EMPTY
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: PUSH
9429: EMPTY
9430: LIST
9431: LIST
9432: ST_TO_ADDR
9433: GO 9664
9435: LD_INT 19
9437: DOUBLE
9438: EQUAL
9439: IFTRUE 9443
9441: GO 9663
9443: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
9444: LD_ADDR_VAR 0 1
9448: PUSH
9449: LD_INT 1
9451: PUSH
9452: LD_INT 2
9454: PUSH
9455: LD_INT 3
9457: PUSH
9458: LD_INT 4
9460: PUSH
9461: LD_INT 5
9463: PUSH
9464: LD_INT 6
9466: PUSH
9467: LD_INT 7
9469: PUSH
9470: LD_INT 8
9472: PUSH
9473: LD_INT 9
9475: PUSH
9476: LD_INT 10
9478: PUSH
9479: LD_INT 11
9481: PUSH
9482: LD_INT 12
9484: PUSH
9485: LD_INT 13
9487: PUSH
9488: LD_INT 14
9490: PUSH
9491: LD_INT 15
9493: PUSH
9494: LD_INT 16
9496: PUSH
9497: LD_INT 17
9499: PUSH
9500: LD_INT 18
9502: PUSH
9503: LD_INT 19
9505: PUSH
9506: LD_INT 20
9508: PUSH
9509: LD_INT 21
9511: PUSH
9512: LD_INT 22
9514: PUSH
9515: LD_INT 23
9517: PUSH
9518: LD_INT 24
9520: PUSH
9521: LD_INT 25
9523: PUSH
9524: LD_INT 26
9526: PUSH
9527: LD_INT 27
9529: PUSH
9530: LD_INT 28
9532: PUSH
9533: LD_INT 29
9535: PUSH
9536: LD_INT 30
9538: PUSH
9539: LD_INT 31
9541: PUSH
9542: LD_INT 32
9544: PUSH
9545: LD_INT 33
9547: PUSH
9548: LD_INT 34
9550: PUSH
9551: LD_INT 35
9553: PUSH
9554: LD_INT 36
9556: PUSH
9557: EMPTY
9558: LIST
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: PUSH
9595: LD_INT 101
9597: PUSH
9598: LD_INT 102
9600: PUSH
9601: LD_INT 103
9603: PUSH
9604: LD_INT 104
9606: PUSH
9607: LD_INT 105
9609: PUSH
9610: LD_INT 106
9612: PUSH
9613: LD_INT 107
9615: PUSH
9616: LD_INT 108
9618: PUSH
9619: LD_INT 109
9621: PUSH
9622: LD_INT 110
9624: PUSH
9625: LD_INT 111
9627: PUSH
9628: LD_INT 112
9630: PUSH
9631: LD_INT 113
9633: PUSH
9634: LD_INT 114
9636: PUSH
9637: LD_INT 115
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: PUSH
9657: EMPTY
9658: LIST
9659: LIST
9660: ST_TO_ADDR
9661: GO 9664
9663: POP
// end else
9664: GO 9701
// if campaign_id = 5 then
9666: LD_OWVAR 69
9670: PUSH
9671: LD_INT 5
9673: EQUAL
9674: IFFALSE 9701
// begin result := [ [ 1 , 2 ] , [ 100 ] ] ;
9676: LD_ADDR_VAR 0 1
9680: PUSH
9681: LD_INT 1
9683: PUSH
9684: LD_INT 2
9686: PUSH
9687: EMPTY
9688: LIST
9689: LIST
9690: PUSH
9691: LD_INT 100
9693: PUSH
9694: EMPTY
9695: LIST
9696: PUSH
9697: EMPTY
9698: LIST
9699: LIST
9700: ST_TO_ADDR
// end ; if result then
9701: LD_VAR 0 1
9705: IFFALSE 9994
// begin normal :=  ;
9707: LD_ADDR_VAR 0 3
9711: PUSH
9712: LD_STRING 
9714: ST_TO_ADDR
// hardcore :=  ;
9715: LD_ADDR_VAR 0 4
9719: PUSH
9720: LD_STRING 
9722: ST_TO_ADDR
// for i = 1 to normalCounter do
9723: LD_ADDR_VAR 0 5
9727: PUSH
9728: DOUBLE
9729: LD_INT 1
9731: DEC
9732: ST_TO_ADDR
9733: LD_EXP 31
9737: PUSH
9738: FOR_TO
9739: IFFALSE 9840
// begin tmp := 0 ;
9741: LD_ADDR_VAR 0 2
9745: PUSH
9746: LD_STRING 0
9748: ST_TO_ADDR
// if result [ 1 ] then
9749: LD_VAR 0 1
9753: PUSH
9754: LD_INT 1
9756: ARRAY
9757: IFFALSE 9822
// if result [ 1 ] [ 1 ] = i then
9759: LD_VAR 0 1
9763: PUSH
9764: LD_INT 1
9766: ARRAY
9767: PUSH
9768: LD_INT 1
9770: ARRAY
9771: PUSH
9772: LD_VAR 0 5
9776: EQUAL
9777: IFFALSE 9822
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9779: LD_ADDR_VAR 0 1
9783: PUSH
9784: LD_VAR 0 1
9788: PPUSH
9789: LD_INT 1
9791: PPUSH
9792: LD_VAR 0 1
9796: PUSH
9797: LD_INT 1
9799: ARRAY
9800: PPUSH
9801: LD_INT 1
9803: PPUSH
9804: CALL_OW 3
9808: PPUSH
9809: CALL_OW 1
9813: ST_TO_ADDR
// tmp := 1 ;
9814: LD_ADDR_VAR 0 2
9818: PUSH
9819: LD_STRING 1
9821: ST_TO_ADDR
// end ; normal := normal & tmp ;
9822: LD_ADDR_VAR 0 3
9826: PUSH
9827: LD_VAR 0 3
9831: PUSH
9832: LD_VAR 0 2
9836: STR
9837: ST_TO_ADDR
// end ;
9838: GO 9738
9840: POP
9841: POP
// for i = 1 to hardcoreCounter do
9842: LD_ADDR_VAR 0 5
9846: PUSH
9847: DOUBLE
9848: LD_INT 1
9850: DEC
9851: ST_TO_ADDR
9852: LD_EXP 32
9856: PUSH
9857: FOR_TO
9858: IFFALSE 9963
// begin tmp := 0 ;
9860: LD_ADDR_VAR 0 2
9864: PUSH
9865: LD_STRING 0
9867: ST_TO_ADDR
// if result [ 2 ] then
9868: LD_VAR 0 1
9872: PUSH
9873: LD_INT 2
9875: ARRAY
9876: IFFALSE 9945
// if result [ 2 ] [ 1 ] = 100 + i then
9878: LD_VAR 0 1
9882: PUSH
9883: LD_INT 2
9885: ARRAY
9886: PUSH
9887: LD_INT 1
9889: ARRAY
9890: PUSH
9891: LD_INT 100
9893: PUSH
9894: LD_VAR 0 5
9898: PLUS
9899: EQUAL
9900: IFFALSE 9945
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9902: LD_ADDR_VAR 0 1
9906: PUSH
9907: LD_VAR 0 1
9911: PPUSH
9912: LD_INT 2
9914: PPUSH
9915: LD_VAR 0 1
9919: PUSH
9920: LD_INT 2
9922: ARRAY
9923: PPUSH
9924: LD_INT 1
9926: PPUSH
9927: CALL_OW 3
9931: PPUSH
9932: CALL_OW 1
9936: ST_TO_ADDR
// tmp := 1 ;
9937: LD_ADDR_VAR 0 2
9941: PUSH
9942: LD_STRING 1
9944: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9945: LD_ADDR_VAR 0 4
9949: PUSH
9950: LD_VAR 0 4
9954: PUSH
9955: LD_VAR 0 2
9959: STR
9960: ST_TO_ADDR
// end ;
9961: GO 9857
9963: POP
9964: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
9965: LD_STRING getStreamItemsFromMission("
9967: PUSH
9968: LD_VAR 0 3
9972: STR
9973: PUSH
9974: LD_STRING ","
9976: STR
9977: PUSH
9978: LD_VAR 0 4
9982: STR
9983: PUSH
9984: LD_STRING ")
9986: STR
9987: PPUSH
9988: CALL_OW 559
// end else
9992: GO 10001
// ToLua ( getStreamItemsFromMission("","") ) ;
9994: LD_STRING getStreamItemsFromMission("","")
9996: PPUSH
9997: CALL_OW 559
// end ;
10001: LD_VAR 0 1
10005: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
10006: LD_VAR 0 2
10010: PUSH
10011: LD_INT 100
10013: EQUAL
10014: IFFALSE 10963
// begin if not StreamModeActive then
10016: LD_EXP 30
10020: NOT
10021: IFFALSE 10031
// StreamModeActive := true ;
10023: LD_ADDR_EXP 30
10027: PUSH
10028: LD_INT 1
10030: ST_TO_ADDR
// if p3 = 0 then
10031: LD_VAR 0 3
10035: PUSH
10036: LD_INT 0
10038: EQUAL
10039: IFFALSE 10045
// InitStreamMode ;
10041: CALL 6266 0 0
// if p3 = 1 then
10045: LD_VAR 0 3
10049: PUSH
10050: LD_INT 1
10052: EQUAL
10053: IFFALSE 10063
// sRocket := true ;
10055: LD_ADDR_EXP 35
10059: PUSH
10060: LD_INT 1
10062: ST_TO_ADDR
// if p3 = 2 then
10063: LD_VAR 0 3
10067: PUSH
10068: LD_INT 2
10070: EQUAL
10071: IFFALSE 10081
// sSpeed := true ;
10073: LD_ADDR_EXP 34
10077: PUSH
10078: LD_INT 1
10080: ST_TO_ADDR
// if p3 = 3 then
10081: LD_VAR 0 3
10085: PUSH
10086: LD_INT 3
10088: EQUAL
10089: IFFALSE 10099
// sEngine := true ;
10091: LD_ADDR_EXP 36
10095: PUSH
10096: LD_INT 1
10098: ST_TO_ADDR
// if p3 = 4 then
10099: LD_VAR 0 3
10103: PUSH
10104: LD_INT 4
10106: EQUAL
10107: IFFALSE 10117
// sSpec := true ;
10109: LD_ADDR_EXP 33
10113: PUSH
10114: LD_INT 1
10116: ST_TO_ADDR
// if p3 = 5 then
10117: LD_VAR 0 3
10121: PUSH
10122: LD_INT 5
10124: EQUAL
10125: IFFALSE 10135
// sLevel := true ;
10127: LD_ADDR_EXP 37
10131: PUSH
10132: LD_INT 1
10134: ST_TO_ADDR
// if p3 = 6 then
10135: LD_VAR 0 3
10139: PUSH
10140: LD_INT 6
10142: EQUAL
10143: IFFALSE 10153
// sArmoury := true ;
10145: LD_ADDR_EXP 38
10149: PUSH
10150: LD_INT 1
10152: ST_TO_ADDR
// if p3 = 7 then
10153: LD_VAR 0 3
10157: PUSH
10158: LD_INT 7
10160: EQUAL
10161: IFFALSE 10171
// sRadar := true ;
10163: LD_ADDR_EXP 39
10167: PUSH
10168: LD_INT 1
10170: ST_TO_ADDR
// if p3 = 8 then
10171: LD_VAR 0 3
10175: PUSH
10176: LD_INT 8
10178: EQUAL
10179: IFFALSE 10189
// sBunker := true ;
10181: LD_ADDR_EXP 40
10185: PUSH
10186: LD_INT 1
10188: ST_TO_ADDR
// if p3 = 9 then
10189: LD_VAR 0 3
10193: PUSH
10194: LD_INT 9
10196: EQUAL
10197: IFFALSE 10207
// sHack := true ;
10199: LD_ADDR_EXP 41
10203: PUSH
10204: LD_INT 1
10206: ST_TO_ADDR
// if p3 = 10 then
10207: LD_VAR 0 3
10211: PUSH
10212: LD_INT 10
10214: EQUAL
10215: IFFALSE 10225
// sFire := true ;
10217: LD_ADDR_EXP 42
10221: PUSH
10222: LD_INT 1
10224: ST_TO_ADDR
// if p3 = 11 then
10225: LD_VAR 0 3
10229: PUSH
10230: LD_INT 11
10232: EQUAL
10233: IFFALSE 10243
// sRefresh := true ;
10235: LD_ADDR_EXP 43
10239: PUSH
10240: LD_INT 1
10242: ST_TO_ADDR
// if p3 = 12 then
10243: LD_VAR 0 3
10247: PUSH
10248: LD_INT 12
10250: EQUAL
10251: IFFALSE 10261
// sExp := true ;
10253: LD_ADDR_EXP 44
10257: PUSH
10258: LD_INT 1
10260: ST_TO_ADDR
// if p3 = 13 then
10261: LD_VAR 0 3
10265: PUSH
10266: LD_INT 13
10268: EQUAL
10269: IFFALSE 10279
// sDepot := true ;
10271: LD_ADDR_EXP 45
10275: PUSH
10276: LD_INT 1
10278: ST_TO_ADDR
// if p3 = 14 then
10279: LD_VAR 0 3
10283: PUSH
10284: LD_INT 14
10286: EQUAL
10287: IFFALSE 10297
// sFlag := true ;
10289: LD_ADDR_EXP 46
10293: PUSH
10294: LD_INT 1
10296: ST_TO_ADDR
// if p3 = 15 then
10297: LD_VAR 0 3
10301: PUSH
10302: LD_INT 15
10304: EQUAL
10305: IFFALSE 10315
// sKamikadze := true ;
10307: LD_ADDR_EXP 54
10311: PUSH
10312: LD_INT 1
10314: ST_TO_ADDR
// if p3 = 16 then
10315: LD_VAR 0 3
10319: PUSH
10320: LD_INT 16
10322: EQUAL
10323: IFFALSE 10333
// sTroll := true ;
10325: LD_ADDR_EXP 55
10329: PUSH
10330: LD_INT 1
10332: ST_TO_ADDR
// if p3 = 17 then
10333: LD_VAR 0 3
10337: PUSH
10338: LD_INT 17
10340: EQUAL
10341: IFFALSE 10351
// sSlow := true ;
10343: LD_ADDR_EXP 56
10347: PUSH
10348: LD_INT 1
10350: ST_TO_ADDR
// if p3 = 18 then
10351: LD_VAR 0 3
10355: PUSH
10356: LD_INT 18
10358: EQUAL
10359: IFFALSE 10369
// sLack := true ;
10361: LD_ADDR_EXP 57
10365: PUSH
10366: LD_INT 1
10368: ST_TO_ADDR
// if p3 = 19 then
10369: LD_VAR 0 3
10373: PUSH
10374: LD_INT 19
10376: EQUAL
10377: IFFALSE 10387
// sTank := true ;
10379: LD_ADDR_EXP 59
10383: PUSH
10384: LD_INT 1
10386: ST_TO_ADDR
// if p3 = 20 then
10387: LD_VAR 0 3
10391: PUSH
10392: LD_INT 20
10394: EQUAL
10395: IFFALSE 10405
// sRemote := true ;
10397: LD_ADDR_EXP 60
10401: PUSH
10402: LD_INT 1
10404: ST_TO_ADDR
// if p3 = 21 then
10405: LD_VAR 0 3
10409: PUSH
10410: LD_INT 21
10412: EQUAL
10413: IFFALSE 10423
// sPowell := true ;
10415: LD_ADDR_EXP 61
10419: PUSH
10420: LD_INT 1
10422: ST_TO_ADDR
// if p3 = 22 then
10423: LD_VAR 0 3
10427: PUSH
10428: LD_INT 22
10430: EQUAL
10431: IFFALSE 10441
// sTeleport := true ;
10433: LD_ADDR_EXP 64
10437: PUSH
10438: LD_INT 1
10440: ST_TO_ADDR
// if p3 = 23 then
10441: LD_VAR 0 3
10445: PUSH
10446: LD_INT 23
10448: EQUAL
10449: IFFALSE 10459
// sOilTower := true ;
10451: LD_ADDR_EXP 66
10455: PUSH
10456: LD_INT 1
10458: ST_TO_ADDR
// if p3 = 24 then
10459: LD_VAR 0 3
10463: PUSH
10464: LD_INT 24
10466: EQUAL
10467: IFFALSE 10477
// sShovel := true ;
10469: LD_ADDR_EXP 67
10473: PUSH
10474: LD_INT 1
10476: ST_TO_ADDR
// if p3 = 25 then
10477: LD_VAR 0 3
10481: PUSH
10482: LD_INT 25
10484: EQUAL
10485: IFFALSE 10495
// sSheik := true ;
10487: LD_ADDR_EXP 68
10491: PUSH
10492: LD_INT 1
10494: ST_TO_ADDR
// if p3 = 26 then
10495: LD_VAR 0 3
10499: PUSH
10500: LD_INT 26
10502: EQUAL
10503: IFFALSE 10513
// sEarthquake := true ;
10505: LD_ADDR_EXP 70
10509: PUSH
10510: LD_INT 1
10512: ST_TO_ADDR
// if p3 = 27 then
10513: LD_VAR 0 3
10517: PUSH
10518: LD_INT 27
10520: EQUAL
10521: IFFALSE 10531
// sAI := true ;
10523: LD_ADDR_EXP 71
10527: PUSH
10528: LD_INT 1
10530: ST_TO_ADDR
// if p3 = 28 then
10531: LD_VAR 0 3
10535: PUSH
10536: LD_INT 28
10538: EQUAL
10539: IFFALSE 10549
// sCargo := true ;
10541: LD_ADDR_EXP 74
10545: PUSH
10546: LD_INT 1
10548: ST_TO_ADDR
// if p3 = 29 then
10549: LD_VAR 0 3
10553: PUSH
10554: LD_INT 29
10556: EQUAL
10557: IFFALSE 10567
// sDLaser := true ;
10559: LD_ADDR_EXP 75
10563: PUSH
10564: LD_INT 1
10566: ST_TO_ADDR
// if p3 = 30 then
10567: LD_VAR 0 3
10571: PUSH
10572: LD_INT 30
10574: EQUAL
10575: IFFALSE 10585
// sExchange := true ;
10577: LD_ADDR_EXP 76
10581: PUSH
10582: LD_INT 1
10584: ST_TO_ADDR
// if p3 = 31 then
10585: LD_VAR 0 3
10589: PUSH
10590: LD_INT 31
10592: EQUAL
10593: IFFALSE 10603
// sFac := true ;
10595: LD_ADDR_EXP 77
10599: PUSH
10600: LD_INT 1
10602: ST_TO_ADDR
// if p3 = 32 then
10603: LD_VAR 0 3
10607: PUSH
10608: LD_INT 32
10610: EQUAL
10611: IFFALSE 10621
// sPower := true ;
10613: LD_ADDR_EXP 78
10617: PUSH
10618: LD_INT 1
10620: ST_TO_ADDR
// if p3 = 33 then
10621: LD_VAR 0 3
10625: PUSH
10626: LD_INT 33
10628: EQUAL
10629: IFFALSE 10639
// sRandom := true ;
10631: LD_ADDR_EXP 79
10635: PUSH
10636: LD_INT 1
10638: ST_TO_ADDR
// if p3 = 34 then
10639: LD_VAR 0 3
10643: PUSH
10644: LD_INT 34
10646: EQUAL
10647: IFFALSE 10657
// sShield := true ;
10649: LD_ADDR_EXP 80
10653: PUSH
10654: LD_INT 1
10656: ST_TO_ADDR
// if p3 = 35 then
10657: LD_VAR 0 3
10661: PUSH
10662: LD_INT 35
10664: EQUAL
10665: IFFALSE 10675
// sTime := true ;
10667: LD_ADDR_EXP 81
10671: PUSH
10672: LD_INT 1
10674: ST_TO_ADDR
// if p3 = 36 then
10675: LD_VAR 0 3
10679: PUSH
10680: LD_INT 36
10682: EQUAL
10683: IFFALSE 10693
// sTools := true ;
10685: LD_ADDR_EXP 82
10689: PUSH
10690: LD_INT 1
10692: ST_TO_ADDR
// if p3 = 101 then
10693: LD_VAR 0 3
10697: PUSH
10698: LD_INT 101
10700: EQUAL
10701: IFFALSE 10711
// sSold := true ;
10703: LD_ADDR_EXP 47
10707: PUSH
10708: LD_INT 1
10710: ST_TO_ADDR
// if p3 = 102 then
10711: LD_VAR 0 3
10715: PUSH
10716: LD_INT 102
10718: EQUAL
10719: IFFALSE 10729
// sDiff := true ;
10721: LD_ADDR_EXP 48
10725: PUSH
10726: LD_INT 1
10728: ST_TO_ADDR
// if p3 = 103 then
10729: LD_VAR 0 3
10733: PUSH
10734: LD_INT 103
10736: EQUAL
10737: IFFALSE 10747
// sFog := true ;
10739: LD_ADDR_EXP 51
10743: PUSH
10744: LD_INT 1
10746: ST_TO_ADDR
// if p3 = 104 then
10747: LD_VAR 0 3
10751: PUSH
10752: LD_INT 104
10754: EQUAL
10755: IFFALSE 10765
// sReset := true ;
10757: LD_ADDR_EXP 52
10761: PUSH
10762: LD_INT 1
10764: ST_TO_ADDR
// if p3 = 105 then
10765: LD_VAR 0 3
10769: PUSH
10770: LD_INT 105
10772: EQUAL
10773: IFFALSE 10783
// sSun := true ;
10775: LD_ADDR_EXP 53
10779: PUSH
10780: LD_INT 1
10782: ST_TO_ADDR
// if p3 = 106 then
10783: LD_VAR 0 3
10787: PUSH
10788: LD_INT 106
10790: EQUAL
10791: IFFALSE 10801
// sTiger := true ;
10793: LD_ADDR_EXP 49
10797: PUSH
10798: LD_INT 1
10800: ST_TO_ADDR
// if p3 = 107 then
10801: LD_VAR 0 3
10805: PUSH
10806: LD_INT 107
10808: EQUAL
10809: IFFALSE 10819
// sBomb := true ;
10811: LD_ADDR_EXP 50
10815: PUSH
10816: LD_INT 1
10818: ST_TO_ADDR
// if p3 = 108 then
10819: LD_VAR 0 3
10823: PUSH
10824: LD_INT 108
10826: EQUAL
10827: IFFALSE 10837
// sWound := true ;
10829: LD_ADDR_EXP 58
10833: PUSH
10834: LD_INT 1
10836: ST_TO_ADDR
// if p3 = 109 then
10837: LD_VAR 0 3
10841: PUSH
10842: LD_INT 109
10844: EQUAL
10845: IFFALSE 10855
// sBetray := true ;
10847: LD_ADDR_EXP 62
10851: PUSH
10852: LD_INT 1
10854: ST_TO_ADDR
// if p3 = 110 then
10855: LD_VAR 0 3
10859: PUSH
10860: LD_INT 110
10862: EQUAL
10863: IFFALSE 10873
// sContamin := true ;
10865: LD_ADDR_EXP 63
10869: PUSH
10870: LD_INT 1
10872: ST_TO_ADDR
// if p3 = 111 then
10873: LD_VAR 0 3
10877: PUSH
10878: LD_INT 111
10880: EQUAL
10881: IFFALSE 10891
// sOil := true ;
10883: LD_ADDR_EXP 65
10887: PUSH
10888: LD_INT 1
10890: ST_TO_ADDR
// if p3 = 112 then
10891: LD_VAR 0 3
10895: PUSH
10896: LD_INT 112
10898: EQUAL
10899: IFFALSE 10909
// sStu := true ;
10901: LD_ADDR_EXP 69
10905: PUSH
10906: LD_INT 1
10908: ST_TO_ADDR
// if p3 = 113 then
10909: LD_VAR 0 3
10913: PUSH
10914: LD_INT 113
10916: EQUAL
10917: IFFALSE 10927
// sBazooka := true ;
10919: LD_ADDR_EXP 72
10923: PUSH
10924: LD_INT 1
10926: ST_TO_ADDR
// if p3 = 114 then
10927: LD_VAR 0 3
10931: PUSH
10932: LD_INT 114
10934: EQUAL
10935: IFFALSE 10945
// sMortar := true ;
10937: LD_ADDR_EXP 73
10941: PUSH
10942: LD_INT 1
10944: ST_TO_ADDR
// if p3 = 115 then
10945: LD_VAR 0 3
10949: PUSH
10950: LD_INT 115
10952: EQUAL
10953: IFFALSE 10963
// sRanger := true ;
10955: LD_ADDR_EXP 83
10959: PUSH
10960: LD_INT 1
10962: ST_TO_ADDR
// end ; end ;
10963: PPOPN 6
10965: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10966: LD_EXP 30
10970: PUSH
10971: LD_EXP 35
10975: AND
10976: IFFALSE 11100
10978: GO 10980
10980: DISABLE
10981: LD_INT 0
10983: PPUSH
10984: PPUSH
// begin enable ;
10985: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10986: LD_ADDR_VAR 0 2
10990: PUSH
10991: LD_INT 22
10993: PUSH
10994: LD_OWVAR 2
10998: PUSH
10999: EMPTY
11000: LIST
11001: LIST
11002: PUSH
11003: LD_INT 2
11005: PUSH
11006: LD_INT 34
11008: PUSH
11009: LD_INT 7
11011: PUSH
11012: EMPTY
11013: LIST
11014: LIST
11015: PUSH
11016: LD_INT 34
11018: PUSH
11019: LD_INT 45
11021: PUSH
11022: EMPTY
11023: LIST
11024: LIST
11025: PUSH
11026: LD_INT 34
11028: PUSH
11029: LD_INT 28
11031: PUSH
11032: EMPTY
11033: LIST
11034: LIST
11035: PUSH
11036: LD_INT 34
11038: PUSH
11039: LD_INT 47
11041: PUSH
11042: EMPTY
11043: LIST
11044: LIST
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: PPUSH
11057: CALL_OW 69
11061: ST_TO_ADDR
// if not tmp then
11062: LD_VAR 0 2
11066: NOT
11067: IFFALSE 11071
// exit ;
11069: GO 11100
// for i in tmp do
11071: LD_ADDR_VAR 0 1
11075: PUSH
11076: LD_VAR 0 2
11080: PUSH
11081: FOR_IN
11082: IFFALSE 11098
// begin SetLives ( i , 0 ) ;
11084: LD_VAR 0 1
11088: PPUSH
11089: LD_INT 0
11091: PPUSH
11092: CALL_OW 234
// end ;
11096: GO 11081
11098: POP
11099: POP
// end ;
11100: PPOPN 2
11102: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11103: LD_EXP 30
11107: PUSH
11108: LD_EXP 36
11112: AND
11113: IFFALSE 11197
11115: GO 11117
11117: DISABLE
11118: LD_INT 0
11120: PPUSH
11121: PPUSH
// begin enable ;
11122: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11123: LD_ADDR_VAR 0 2
11127: PUSH
11128: LD_INT 22
11130: PUSH
11131: LD_OWVAR 2
11135: PUSH
11136: EMPTY
11137: LIST
11138: LIST
11139: PUSH
11140: LD_INT 32
11142: PUSH
11143: LD_INT 3
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: PUSH
11150: EMPTY
11151: LIST
11152: LIST
11153: PPUSH
11154: CALL_OW 69
11158: ST_TO_ADDR
// if not tmp then
11159: LD_VAR 0 2
11163: NOT
11164: IFFALSE 11168
// exit ;
11166: GO 11197
// for i in tmp do
11168: LD_ADDR_VAR 0 1
11172: PUSH
11173: LD_VAR 0 2
11177: PUSH
11178: FOR_IN
11179: IFFALSE 11195
// begin SetLives ( i , 0 ) ;
11181: LD_VAR 0 1
11185: PPUSH
11186: LD_INT 0
11188: PPUSH
11189: CALL_OW 234
// end ;
11193: GO 11178
11195: POP
11196: POP
// end ;
11197: PPOPN 2
11199: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11200: LD_EXP 30
11204: PUSH
11205: LD_EXP 33
11209: AND
11210: IFFALSE 11303
11212: GO 11214
11214: DISABLE
11215: LD_INT 0
11217: PPUSH
// begin enable ;
11218: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11219: LD_ADDR_VAR 0 1
11223: PUSH
11224: LD_INT 22
11226: PUSH
11227: LD_OWVAR 2
11231: PUSH
11232: EMPTY
11233: LIST
11234: LIST
11235: PUSH
11236: LD_INT 2
11238: PUSH
11239: LD_INT 25
11241: PUSH
11242: LD_INT 5
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: PUSH
11249: LD_INT 25
11251: PUSH
11252: LD_INT 9
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: PUSH
11259: LD_INT 25
11261: PUSH
11262: LD_INT 8
11264: PUSH
11265: EMPTY
11266: LIST
11267: LIST
11268: PUSH
11269: EMPTY
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: PUSH
11275: EMPTY
11276: LIST
11277: LIST
11278: PPUSH
11279: CALL_OW 69
11283: PUSH
11284: FOR_IN
11285: IFFALSE 11301
// begin SetClass ( i , 1 ) ;
11287: LD_VAR 0 1
11291: PPUSH
11292: LD_INT 1
11294: PPUSH
11295: CALL_OW 336
// end ;
11299: GO 11284
11301: POP
11302: POP
// end ;
11303: PPOPN 1
11305: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11306: LD_EXP 30
11310: PUSH
11311: LD_EXP 34
11315: AND
11316: PUSH
11317: LD_OWVAR 65
11321: PUSH
11322: LD_INT 7
11324: LESS
11325: AND
11326: IFFALSE 11340
11328: GO 11330
11330: DISABLE
// begin enable ;
11331: ENABLE
// game_speed := 7 ;
11332: LD_ADDR_OWVAR 65
11336: PUSH
11337: LD_INT 7
11339: ST_TO_ADDR
// end ;
11340: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11341: LD_EXP 30
11345: PUSH
11346: LD_EXP 37
11350: AND
11351: IFFALSE 11553
11353: GO 11355
11355: DISABLE
11356: LD_INT 0
11358: PPUSH
11359: PPUSH
11360: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11361: LD_ADDR_VAR 0 3
11365: PUSH
11366: LD_INT 81
11368: PUSH
11369: LD_OWVAR 2
11373: PUSH
11374: EMPTY
11375: LIST
11376: LIST
11377: PUSH
11378: LD_INT 21
11380: PUSH
11381: LD_INT 1
11383: PUSH
11384: EMPTY
11385: LIST
11386: LIST
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: PPUSH
11392: CALL_OW 69
11396: ST_TO_ADDR
// if not tmp then
11397: LD_VAR 0 3
11401: NOT
11402: IFFALSE 11406
// exit ;
11404: GO 11553
// if tmp > 5 then
11406: LD_VAR 0 3
11410: PUSH
11411: LD_INT 5
11413: GREATER
11414: IFFALSE 11426
// k := 5 else
11416: LD_ADDR_VAR 0 2
11420: PUSH
11421: LD_INT 5
11423: ST_TO_ADDR
11424: GO 11436
// k := tmp ;
11426: LD_ADDR_VAR 0 2
11430: PUSH
11431: LD_VAR 0 3
11435: ST_TO_ADDR
// for i := 1 to k do
11436: LD_ADDR_VAR 0 1
11440: PUSH
11441: DOUBLE
11442: LD_INT 1
11444: DEC
11445: ST_TO_ADDR
11446: LD_VAR 0 2
11450: PUSH
11451: FOR_TO
11452: IFFALSE 11551
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11454: LD_VAR 0 3
11458: PUSH
11459: LD_VAR 0 1
11463: ARRAY
11464: PPUSH
11465: LD_VAR 0 1
11469: PUSH
11470: LD_INT 4
11472: MOD
11473: PUSH
11474: LD_INT 1
11476: PLUS
11477: PPUSH
11478: CALL_OW 259
11482: PUSH
11483: LD_INT 10
11485: LESS
11486: IFFALSE 11549
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11488: LD_VAR 0 3
11492: PUSH
11493: LD_VAR 0 1
11497: ARRAY
11498: PPUSH
11499: LD_VAR 0 1
11503: PUSH
11504: LD_INT 4
11506: MOD
11507: PUSH
11508: LD_INT 1
11510: PLUS
11511: PPUSH
11512: LD_VAR 0 3
11516: PUSH
11517: LD_VAR 0 1
11521: ARRAY
11522: PPUSH
11523: LD_VAR 0 1
11527: PUSH
11528: LD_INT 4
11530: MOD
11531: PUSH
11532: LD_INT 1
11534: PLUS
11535: PPUSH
11536: CALL_OW 259
11540: PUSH
11541: LD_INT 1
11543: PLUS
11544: PPUSH
11545: CALL_OW 237
11549: GO 11451
11551: POP
11552: POP
// end ;
11553: PPOPN 3
11555: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11556: LD_EXP 30
11560: PUSH
11561: LD_EXP 38
11565: AND
11566: IFFALSE 11586
11568: GO 11570
11570: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11571: LD_INT 4
11573: PPUSH
11574: LD_OWVAR 2
11578: PPUSH
11579: LD_INT 0
11581: PPUSH
11582: CALL_OW 324
11586: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11587: LD_EXP 30
11591: PUSH
11592: LD_EXP 67
11596: AND
11597: IFFALSE 11617
11599: GO 11601
11601: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11602: LD_INT 19
11604: PPUSH
11605: LD_OWVAR 2
11609: PPUSH
11610: LD_INT 0
11612: PPUSH
11613: CALL_OW 324
11617: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11618: LD_EXP 30
11622: PUSH
11623: LD_EXP 39
11627: AND
11628: IFFALSE 11730
11630: GO 11632
11632: DISABLE
11633: LD_INT 0
11635: PPUSH
11636: PPUSH
// begin enable ;
11637: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11638: LD_ADDR_VAR 0 2
11642: PUSH
11643: LD_INT 22
11645: PUSH
11646: LD_OWVAR 2
11650: PUSH
11651: EMPTY
11652: LIST
11653: LIST
11654: PUSH
11655: LD_INT 2
11657: PUSH
11658: LD_INT 34
11660: PUSH
11661: LD_INT 11
11663: PUSH
11664: EMPTY
11665: LIST
11666: LIST
11667: PUSH
11668: LD_INT 34
11670: PUSH
11671: LD_INT 30
11673: PUSH
11674: EMPTY
11675: LIST
11676: LIST
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: LIST
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: PPUSH
11687: CALL_OW 69
11691: ST_TO_ADDR
// if not tmp then
11692: LD_VAR 0 2
11696: NOT
11697: IFFALSE 11701
// exit ;
11699: GO 11730
// for i in tmp do
11701: LD_ADDR_VAR 0 1
11705: PUSH
11706: LD_VAR 0 2
11710: PUSH
11711: FOR_IN
11712: IFFALSE 11728
// begin SetLives ( i , 0 ) ;
11714: LD_VAR 0 1
11718: PPUSH
11719: LD_INT 0
11721: PPUSH
11722: CALL_OW 234
// end ;
11726: GO 11711
11728: POP
11729: POP
// end ;
11730: PPOPN 2
11732: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11733: LD_EXP 30
11737: PUSH
11738: LD_EXP 40
11742: AND
11743: IFFALSE 11763
11745: GO 11747
11747: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11748: LD_INT 32
11750: PPUSH
11751: LD_OWVAR 2
11755: PPUSH
11756: LD_INT 0
11758: PPUSH
11759: CALL_OW 324
11763: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11764: LD_EXP 30
11768: PUSH
11769: LD_EXP 41
11773: AND
11774: IFFALSE 11955
11776: GO 11778
11778: DISABLE
11779: LD_INT 0
11781: PPUSH
11782: PPUSH
11783: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11784: LD_ADDR_VAR 0 2
11788: PUSH
11789: LD_INT 22
11791: PUSH
11792: LD_OWVAR 2
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: PUSH
11801: LD_INT 33
11803: PUSH
11804: LD_INT 3
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: PUSH
11811: EMPTY
11812: LIST
11813: LIST
11814: PPUSH
11815: CALL_OW 69
11819: ST_TO_ADDR
// if not tmp then
11820: LD_VAR 0 2
11824: NOT
11825: IFFALSE 11829
// exit ;
11827: GO 11955
// side := 0 ;
11829: LD_ADDR_VAR 0 3
11833: PUSH
11834: LD_INT 0
11836: ST_TO_ADDR
// for i := 1 to 8 do
11837: LD_ADDR_VAR 0 1
11841: PUSH
11842: DOUBLE
11843: LD_INT 1
11845: DEC
11846: ST_TO_ADDR
11847: LD_INT 8
11849: PUSH
11850: FOR_TO
11851: IFFALSE 11899
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11853: LD_OWVAR 2
11857: PUSH
11858: LD_VAR 0 1
11862: NONEQUAL
11863: PUSH
11864: LD_OWVAR 2
11868: PPUSH
11869: LD_VAR 0 1
11873: PPUSH
11874: CALL_OW 81
11878: PUSH
11879: LD_INT 2
11881: EQUAL
11882: AND
11883: IFFALSE 11897
// begin side := i ;
11885: LD_ADDR_VAR 0 3
11889: PUSH
11890: LD_VAR 0 1
11894: ST_TO_ADDR
// break ;
11895: GO 11899
// end ;
11897: GO 11850
11899: POP
11900: POP
// if not side then
11901: LD_VAR 0 3
11905: NOT
11906: IFFALSE 11910
// exit ;
11908: GO 11955
// for i := 1 to tmp do
11910: LD_ADDR_VAR 0 1
11914: PUSH
11915: DOUBLE
11916: LD_INT 1
11918: DEC
11919: ST_TO_ADDR
11920: LD_VAR 0 2
11924: PUSH
11925: FOR_TO
11926: IFFALSE 11953
// if Prob ( 60 ) then
11928: LD_INT 60
11930: PPUSH
11931: CALL_OW 13
11935: IFFALSE 11951
// SetSide ( i , side ) ;
11937: LD_VAR 0 1
11941: PPUSH
11942: LD_VAR 0 3
11946: PPUSH
11947: CALL_OW 235
11951: GO 11925
11953: POP
11954: POP
// end ;
11955: PPOPN 3
11957: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11958: LD_EXP 30
11962: PUSH
11963: LD_EXP 43
11967: AND
11968: IFFALSE 12087
11970: GO 11972
11972: DISABLE
11973: LD_INT 0
11975: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11976: LD_ADDR_VAR 0 1
11980: PUSH
11981: LD_INT 22
11983: PUSH
11984: LD_OWVAR 2
11988: PUSH
11989: EMPTY
11990: LIST
11991: LIST
11992: PUSH
11993: LD_INT 21
11995: PUSH
11996: LD_INT 1
11998: PUSH
11999: EMPTY
12000: LIST
12001: LIST
12002: PUSH
12003: LD_INT 3
12005: PUSH
12006: LD_INT 23
12008: PUSH
12009: LD_INT 0
12011: PUSH
12012: EMPTY
12013: LIST
12014: LIST
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: LIST
12024: PPUSH
12025: CALL_OW 69
12029: PUSH
12030: FOR_IN
12031: IFFALSE 12085
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12033: LD_VAR 0 1
12037: PPUSH
12038: CALL_OW 257
12042: PUSH
12043: LD_INT 1
12045: PUSH
12046: LD_INT 2
12048: PUSH
12049: LD_INT 3
12051: PUSH
12052: LD_INT 4
12054: PUSH
12055: EMPTY
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: IN
12061: IFFALSE 12083
// SetClass ( un , rand ( 1 , 4 ) ) ;
12063: LD_VAR 0 1
12067: PPUSH
12068: LD_INT 1
12070: PPUSH
12071: LD_INT 4
12073: PPUSH
12074: CALL_OW 12
12078: PPUSH
12079: CALL_OW 336
12083: GO 12030
12085: POP
12086: POP
// end ;
12087: PPOPN 1
12089: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12090: LD_EXP 30
12094: PUSH
12095: LD_EXP 42
12099: AND
12100: IFFALSE 12179
12102: GO 12104
12104: DISABLE
12105: LD_INT 0
12107: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12108: LD_ADDR_VAR 0 1
12112: PUSH
12113: LD_INT 22
12115: PUSH
12116: LD_OWVAR 2
12120: PUSH
12121: EMPTY
12122: LIST
12123: LIST
12124: PUSH
12125: LD_INT 21
12127: PUSH
12128: LD_INT 3
12130: PUSH
12131: EMPTY
12132: LIST
12133: LIST
12134: PUSH
12135: EMPTY
12136: LIST
12137: LIST
12138: PPUSH
12139: CALL_OW 69
12143: ST_TO_ADDR
// if not tmp then
12144: LD_VAR 0 1
12148: NOT
12149: IFFALSE 12153
// exit ;
12151: GO 12179
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12153: LD_VAR 0 1
12157: PUSH
12158: LD_INT 1
12160: PPUSH
12161: LD_VAR 0 1
12165: PPUSH
12166: CALL_OW 12
12170: ARRAY
12171: PPUSH
12172: LD_INT 100
12174: PPUSH
12175: CALL_OW 234
// end ;
12179: PPOPN 1
12181: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12182: LD_EXP 30
12186: PUSH
12187: LD_EXP 44
12191: AND
12192: IFFALSE 12290
12194: GO 12196
12196: DISABLE
12197: LD_INT 0
12199: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12200: LD_ADDR_VAR 0 1
12204: PUSH
12205: LD_INT 22
12207: PUSH
12208: LD_OWVAR 2
12212: PUSH
12213: EMPTY
12214: LIST
12215: LIST
12216: PUSH
12217: LD_INT 21
12219: PUSH
12220: LD_INT 1
12222: PUSH
12223: EMPTY
12224: LIST
12225: LIST
12226: PUSH
12227: EMPTY
12228: LIST
12229: LIST
12230: PPUSH
12231: CALL_OW 69
12235: ST_TO_ADDR
// if not tmp then
12236: LD_VAR 0 1
12240: NOT
12241: IFFALSE 12245
// exit ;
12243: GO 12290
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12245: LD_VAR 0 1
12249: PUSH
12250: LD_INT 1
12252: PPUSH
12253: LD_VAR 0 1
12257: PPUSH
12258: CALL_OW 12
12262: ARRAY
12263: PPUSH
12264: LD_INT 1
12266: PPUSH
12267: LD_INT 4
12269: PPUSH
12270: CALL_OW 12
12274: PPUSH
12275: LD_INT 3000
12277: PPUSH
12278: LD_INT 9000
12280: PPUSH
12281: CALL_OW 12
12285: PPUSH
12286: CALL_OW 492
// end ;
12290: PPOPN 1
12292: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12293: LD_EXP 30
12297: PUSH
12298: LD_EXP 45
12302: AND
12303: IFFALSE 12323
12305: GO 12307
12307: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12308: LD_INT 1
12310: PPUSH
12311: LD_OWVAR 2
12315: PPUSH
12316: LD_INT 0
12318: PPUSH
12319: CALL_OW 324
12323: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12324: LD_EXP 30
12328: PUSH
12329: LD_EXP 46
12333: AND
12334: IFFALSE 12417
12336: GO 12338
12338: DISABLE
12339: LD_INT 0
12341: PPUSH
12342: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12343: LD_ADDR_VAR 0 2
12347: PUSH
12348: LD_INT 22
12350: PUSH
12351: LD_OWVAR 2
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: PUSH
12360: LD_INT 21
12362: PUSH
12363: LD_INT 3
12365: PUSH
12366: EMPTY
12367: LIST
12368: LIST
12369: PUSH
12370: EMPTY
12371: LIST
12372: LIST
12373: PPUSH
12374: CALL_OW 69
12378: ST_TO_ADDR
// if not tmp then
12379: LD_VAR 0 2
12383: NOT
12384: IFFALSE 12388
// exit ;
12386: GO 12417
// for i in tmp do
12388: LD_ADDR_VAR 0 1
12392: PUSH
12393: LD_VAR 0 2
12397: PUSH
12398: FOR_IN
12399: IFFALSE 12415
// SetBLevel ( i , 10 ) ;
12401: LD_VAR 0 1
12405: PPUSH
12406: LD_INT 10
12408: PPUSH
12409: CALL_OW 241
12413: GO 12398
12415: POP
12416: POP
// end ;
12417: PPOPN 2
12419: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12420: LD_EXP 30
12424: PUSH
12425: LD_EXP 47
12429: AND
12430: IFFALSE 12541
12432: GO 12434
12434: DISABLE
12435: LD_INT 0
12437: PPUSH
12438: PPUSH
12439: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12440: LD_ADDR_VAR 0 3
12444: PUSH
12445: LD_INT 22
12447: PUSH
12448: LD_OWVAR 2
12452: PUSH
12453: EMPTY
12454: LIST
12455: LIST
12456: PUSH
12457: LD_INT 25
12459: PUSH
12460: LD_INT 1
12462: PUSH
12463: EMPTY
12464: LIST
12465: LIST
12466: PUSH
12467: EMPTY
12468: LIST
12469: LIST
12470: PPUSH
12471: CALL_OW 69
12475: ST_TO_ADDR
// if not tmp then
12476: LD_VAR 0 3
12480: NOT
12481: IFFALSE 12485
// exit ;
12483: GO 12541
// un := tmp [ rand ( 1 , tmp ) ] ;
12485: LD_ADDR_VAR 0 2
12489: PUSH
12490: LD_VAR 0 3
12494: PUSH
12495: LD_INT 1
12497: PPUSH
12498: LD_VAR 0 3
12502: PPUSH
12503: CALL_OW 12
12507: ARRAY
12508: ST_TO_ADDR
// if Crawls ( un ) then
12509: LD_VAR 0 2
12513: PPUSH
12514: CALL_OW 318
12518: IFFALSE 12529
// ComWalk ( un ) ;
12520: LD_VAR 0 2
12524: PPUSH
12525: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12529: LD_VAR 0 2
12533: PPUSH
12534: LD_INT 5
12536: PPUSH
12537: CALL_OW 336
// end ;
12541: PPOPN 3
12543: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
12544: LD_EXP 30
12548: PUSH
12549: LD_EXP 48
12553: AND
12554: PUSH
12555: LD_OWVAR 67
12559: PUSH
12560: LD_INT 3
12562: LESS
12563: AND
12564: IFFALSE 12583
12566: GO 12568
12568: DISABLE
// Difficulty := Difficulty + 1 ;
12569: LD_ADDR_OWVAR 67
12573: PUSH
12574: LD_OWVAR 67
12578: PUSH
12579: LD_INT 1
12581: PLUS
12582: ST_TO_ADDR
12583: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12584: LD_EXP 30
12588: PUSH
12589: LD_EXP 49
12593: AND
12594: IFFALSE 12697
12596: GO 12598
12598: DISABLE
12599: LD_INT 0
12601: PPUSH
// begin for i := 1 to 5 do
12602: LD_ADDR_VAR 0 1
12606: PUSH
12607: DOUBLE
12608: LD_INT 1
12610: DEC
12611: ST_TO_ADDR
12612: LD_INT 5
12614: PUSH
12615: FOR_TO
12616: IFFALSE 12695
// begin uc_nation := nation_nature ;
12618: LD_ADDR_OWVAR 21
12622: PUSH
12623: LD_INT 0
12625: ST_TO_ADDR
// uc_side := 0 ;
12626: LD_ADDR_OWVAR 20
12630: PUSH
12631: LD_INT 0
12633: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12634: LD_ADDR_OWVAR 29
12638: PUSH
12639: LD_INT 12
12641: PUSH
12642: LD_INT 12
12644: PUSH
12645: EMPTY
12646: LIST
12647: LIST
12648: ST_TO_ADDR
// hc_agressivity := 20 ;
12649: LD_ADDR_OWVAR 35
12653: PUSH
12654: LD_INT 20
12656: ST_TO_ADDR
// hc_class := class_tiger ;
12657: LD_ADDR_OWVAR 28
12661: PUSH
12662: LD_INT 14
12664: ST_TO_ADDR
// hc_gallery :=  ;
12665: LD_ADDR_OWVAR 33
12669: PUSH
12670: LD_STRING 
12672: ST_TO_ADDR
// hc_name :=  ;
12673: LD_ADDR_OWVAR 26
12677: PUSH
12678: LD_STRING 
12680: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12681: CALL_OW 44
12685: PPUSH
12686: LD_INT 0
12688: PPUSH
12689: CALL_OW 51
// end ;
12693: GO 12615
12695: POP
12696: POP
// end ;
12697: PPOPN 1
12699: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12700: LD_EXP 30
12704: PUSH
12705: LD_EXP 50
12709: AND
12710: IFFALSE 12719
12712: GO 12714
12714: DISABLE
// StreamSibBomb ;
12715: CALL 12720 0 0
12719: END
// export function StreamSibBomb ; var i , x , y ; begin
12720: LD_INT 0
12722: PPUSH
12723: PPUSH
12724: PPUSH
12725: PPUSH
// result := false ;
12726: LD_ADDR_VAR 0 1
12730: PUSH
12731: LD_INT 0
12733: ST_TO_ADDR
// for i := 1 to 16 do
12734: LD_ADDR_VAR 0 2
12738: PUSH
12739: DOUBLE
12740: LD_INT 1
12742: DEC
12743: ST_TO_ADDR
12744: LD_INT 16
12746: PUSH
12747: FOR_TO
12748: IFFALSE 12947
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12750: LD_ADDR_VAR 0 3
12754: PUSH
12755: LD_INT 10
12757: PUSH
12758: LD_INT 20
12760: PUSH
12761: LD_INT 30
12763: PUSH
12764: LD_INT 40
12766: PUSH
12767: LD_INT 50
12769: PUSH
12770: LD_INT 60
12772: PUSH
12773: LD_INT 70
12775: PUSH
12776: LD_INT 80
12778: PUSH
12779: LD_INT 90
12781: PUSH
12782: LD_INT 100
12784: PUSH
12785: LD_INT 110
12787: PUSH
12788: LD_INT 120
12790: PUSH
12791: LD_INT 130
12793: PUSH
12794: LD_INT 140
12796: PUSH
12797: LD_INT 150
12799: PUSH
12800: EMPTY
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: PUSH
12817: LD_INT 1
12819: PPUSH
12820: LD_INT 15
12822: PPUSH
12823: CALL_OW 12
12827: ARRAY
12828: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12829: LD_ADDR_VAR 0 4
12833: PUSH
12834: LD_INT 10
12836: PUSH
12837: LD_INT 20
12839: PUSH
12840: LD_INT 30
12842: PUSH
12843: LD_INT 40
12845: PUSH
12846: LD_INT 50
12848: PUSH
12849: LD_INT 60
12851: PUSH
12852: LD_INT 70
12854: PUSH
12855: LD_INT 80
12857: PUSH
12858: LD_INT 90
12860: PUSH
12861: LD_INT 100
12863: PUSH
12864: LD_INT 110
12866: PUSH
12867: LD_INT 120
12869: PUSH
12870: LD_INT 130
12872: PUSH
12873: LD_INT 140
12875: PUSH
12876: LD_INT 150
12878: PUSH
12879: EMPTY
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: PUSH
12896: LD_INT 1
12898: PPUSH
12899: LD_INT 15
12901: PPUSH
12902: CALL_OW 12
12906: ARRAY
12907: ST_TO_ADDR
// if ValidHex ( x , y ) then
12908: LD_VAR 0 3
12912: PPUSH
12913: LD_VAR 0 4
12917: PPUSH
12918: CALL_OW 488
12922: IFFALSE 12945
// begin result := [ x , y ] ;
12924: LD_ADDR_VAR 0 1
12928: PUSH
12929: LD_VAR 0 3
12933: PUSH
12934: LD_VAR 0 4
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: ST_TO_ADDR
// break ;
12943: GO 12947
// end ; end ;
12945: GO 12747
12947: POP
12948: POP
// if result then
12949: LD_VAR 0 1
12953: IFFALSE 13013
// begin ToLua ( playSibBomb() ) ;
12955: LD_STRING playSibBomb()
12957: PPUSH
12958: CALL_OW 559
// wait ( 0 0$14 ) ;
12962: LD_INT 490
12964: PPUSH
12965: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12969: LD_VAR 0 1
12973: PUSH
12974: LD_INT 1
12976: ARRAY
12977: PPUSH
12978: LD_VAR 0 1
12982: PUSH
12983: LD_INT 2
12985: ARRAY
12986: PPUSH
12987: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12991: LD_VAR 0 1
12995: PUSH
12996: LD_INT 1
12998: ARRAY
12999: PPUSH
13000: LD_VAR 0 1
13004: PUSH
13005: LD_INT 2
13007: ARRAY
13008: PPUSH
13009: CALL_OW 429
// end ; end ;
13013: LD_VAR 0 1
13017: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13018: LD_EXP 30
13022: PUSH
13023: LD_EXP 52
13027: AND
13028: IFFALSE 13040
13030: GO 13032
13032: DISABLE
// YouLost (  ) ;
13033: LD_STRING 
13035: PPUSH
13036: CALL_OW 104
13040: END
// every 0 0$1 trigger StreamModeActive and sFog do
13041: LD_EXP 30
13045: PUSH
13046: LD_EXP 51
13050: AND
13051: IFFALSE 13065
13053: GO 13055
13055: DISABLE
// FogOff ( your_side ) ;
13056: LD_OWVAR 2
13060: PPUSH
13061: CALL_OW 344
13065: END
// every 0 0$1 trigger StreamModeActive and sSun do
13066: LD_EXP 30
13070: PUSH
13071: LD_EXP 53
13075: AND
13076: IFFALSE 13104
13078: GO 13080
13080: DISABLE
// begin solar_recharge_percent := 0 ;
13081: LD_ADDR_OWVAR 79
13085: PUSH
13086: LD_INT 0
13088: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13089: LD_INT 10500
13091: PPUSH
13092: CALL_OW 67
// solar_recharge_percent := 100 ;
13096: LD_ADDR_OWVAR 79
13100: PUSH
13101: LD_INT 100
13103: ST_TO_ADDR
// end ;
13104: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13105: LD_EXP 30
13109: PUSH
13110: LD_EXP 54
13114: AND
13115: IFFALSE 13354
13117: GO 13119
13119: DISABLE
13120: LD_INT 0
13122: PPUSH
13123: PPUSH
13124: PPUSH
// begin tmp := [ ] ;
13125: LD_ADDR_VAR 0 3
13129: PUSH
13130: EMPTY
13131: ST_TO_ADDR
// for i := 1 to 6 do
13132: LD_ADDR_VAR 0 1
13136: PUSH
13137: DOUBLE
13138: LD_INT 1
13140: DEC
13141: ST_TO_ADDR
13142: LD_INT 6
13144: PUSH
13145: FOR_TO
13146: IFFALSE 13251
// begin uc_nation := nation_nature ;
13148: LD_ADDR_OWVAR 21
13152: PUSH
13153: LD_INT 0
13155: ST_TO_ADDR
// uc_side := 0 ;
13156: LD_ADDR_OWVAR 20
13160: PUSH
13161: LD_INT 0
13163: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13164: LD_ADDR_OWVAR 29
13168: PUSH
13169: LD_INT 12
13171: PUSH
13172: LD_INT 12
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: ST_TO_ADDR
// hc_agressivity := 20 ;
13179: LD_ADDR_OWVAR 35
13183: PUSH
13184: LD_INT 20
13186: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13187: LD_ADDR_OWVAR 28
13191: PUSH
13192: LD_INT 17
13194: ST_TO_ADDR
// hc_gallery :=  ;
13195: LD_ADDR_OWVAR 33
13199: PUSH
13200: LD_STRING 
13202: ST_TO_ADDR
// hc_name :=  ;
13203: LD_ADDR_OWVAR 26
13207: PUSH
13208: LD_STRING 
13210: ST_TO_ADDR
// un := CreateHuman ;
13211: LD_ADDR_VAR 0 2
13215: PUSH
13216: CALL_OW 44
13220: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13221: LD_VAR 0 2
13225: PPUSH
13226: LD_INT 1
13228: PPUSH
13229: CALL_OW 51
// tmp := tmp ^ un ;
13233: LD_ADDR_VAR 0 3
13237: PUSH
13238: LD_VAR 0 3
13242: PUSH
13243: LD_VAR 0 2
13247: ADD
13248: ST_TO_ADDR
// end ;
13249: GO 13145
13251: POP
13252: POP
// repeat wait ( 0 0$1 ) ;
13253: LD_INT 35
13255: PPUSH
13256: CALL_OW 67
// for un in tmp do
13260: LD_ADDR_VAR 0 2
13264: PUSH
13265: LD_VAR 0 3
13269: PUSH
13270: FOR_IN
13271: IFFALSE 13345
// begin if IsDead ( un ) then
13273: LD_VAR 0 2
13277: PPUSH
13278: CALL_OW 301
13282: IFFALSE 13302
// begin tmp := tmp diff un ;
13284: LD_ADDR_VAR 0 3
13288: PUSH
13289: LD_VAR 0 3
13293: PUSH
13294: LD_VAR 0 2
13298: DIFF
13299: ST_TO_ADDR
// continue ;
13300: GO 13270
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13302: LD_VAR 0 2
13306: PPUSH
13307: LD_INT 3
13309: PUSH
13310: LD_INT 22
13312: PUSH
13313: LD_INT 0
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: PUSH
13320: EMPTY
13321: LIST
13322: LIST
13323: PPUSH
13324: CALL_OW 69
13328: PPUSH
13329: LD_VAR 0 2
13333: PPUSH
13334: CALL_OW 74
13338: PPUSH
13339: CALL_OW 115
// end ;
13343: GO 13270
13345: POP
13346: POP
// until not tmp ;
13347: LD_VAR 0 3
13351: NOT
13352: IFFALSE 13253
// end ;
13354: PPOPN 3
13356: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13357: LD_EXP 30
13361: PUSH
13362: LD_EXP 55
13366: AND
13367: IFFALSE 13421
13369: GO 13371
13371: DISABLE
// begin ToLua ( displayTroll(); ) ;
13372: LD_STRING displayTroll();
13374: PPUSH
13375: CALL_OW 559
// wait ( 3 3$00 ) ;
13379: LD_INT 6300
13381: PPUSH
13382: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13386: LD_STRING hideTroll();
13388: PPUSH
13389: CALL_OW 559
// wait ( 1 1$00 ) ;
13393: LD_INT 2100
13395: PPUSH
13396: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13400: LD_STRING displayTroll();
13402: PPUSH
13403: CALL_OW 559
// wait ( 1 1$00 ) ;
13407: LD_INT 2100
13409: PPUSH
13410: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13414: LD_STRING hideTroll();
13416: PPUSH
13417: CALL_OW 559
// end ;
13421: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13422: LD_EXP 30
13426: PUSH
13427: LD_EXP 56
13431: AND
13432: IFFALSE 13495
13434: GO 13436
13436: DISABLE
13437: LD_INT 0
13439: PPUSH
// begin p := 0 ;
13440: LD_ADDR_VAR 0 1
13444: PUSH
13445: LD_INT 0
13447: ST_TO_ADDR
// repeat game_speed := 1 ;
13448: LD_ADDR_OWVAR 65
13452: PUSH
13453: LD_INT 1
13455: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13456: LD_INT 35
13458: PPUSH
13459: CALL_OW 67
// p := p + 1 ;
13463: LD_ADDR_VAR 0 1
13467: PUSH
13468: LD_VAR 0 1
13472: PUSH
13473: LD_INT 1
13475: PLUS
13476: ST_TO_ADDR
// until p >= 60 ;
13477: LD_VAR 0 1
13481: PUSH
13482: LD_INT 60
13484: GREATEREQUAL
13485: IFFALSE 13448
// game_speed := 4 ;
13487: LD_ADDR_OWVAR 65
13491: PUSH
13492: LD_INT 4
13494: ST_TO_ADDR
// end ;
13495: PPOPN 1
13497: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13498: LD_EXP 30
13502: PUSH
13503: LD_EXP 57
13507: AND
13508: IFFALSE 13654
13510: GO 13512
13512: DISABLE
13513: LD_INT 0
13515: PPUSH
13516: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13517: LD_ADDR_VAR 0 1
13521: PUSH
13522: LD_INT 22
13524: PUSH
13525: LD_OWVAR 2
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: PUSH
13534: LD_INT 2
13536: PUSH
13537: LD_INT 30
13539: PUSH
13540: LD_INT 0
13542: PUSH
13543: EMPTY
13544: LIST
13545: LIST
13546: PUSH
13547: LD_INT 30
13549: PUSH
13550: LD_INT 1
13552: PUSH
13553: EMPTY
13554: LIST
13555: LIST
13556: PUSH
13557: EMPTY
13558: LIST
13559: LIST
13560: LIST
13561: PUSH
13562: EMPTY
13563: LIST
13564: LIST
13565: PPUSH
13566: CALL_OW 69
13570: ST_TO_ADDR
// if not depot then
13571: LD_VAR 0 1
13575: NOT
13576: IFFALSE 13580
// exit ;
13578: GO 13654
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13580: LD_ADDR_VAR 0 2
13584: PUSH
13585: LD_VAR 0 1
13589: PUSH
13590: LD_INT 1
13592: PPUSH
13593: LD_VAR 0 1
13597: PPUSH
13598: CALL_OW 12
13602: ARRAY
13603: PPUSH
13604: CALL_OW 274
13608: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13609: LD_VAR 0 2
13613: PPUSH
13614: LD_INT 1
13616: PPUSH
13617: LD_INT 0
13619: PPUSH
13620: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13624: LD_VAR 0 2
13628: PPUSH
13629: LD_INT 2
13631: PPUSH
13632: LD_INT 0
13634: PPUSH
13635: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13639: LD_VAR 0 2
13643: PPUSH
13644: LD_INT 3
13646: PPUSH
13647: LD_INT 0
13649: PPUSH
13650: CALL_OW 277
// end ;
13654: PPOPN 2
13656: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13657: LD_EXP 30
13661: PUSH
13662: LD_EXP 58
13666: AND
13667: IFFALSE 13764
13669: GO 13671
13671: DISABLE
13672: LD_INT 0
13674: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13675: LD_ADDR_VAR 0 1
13679: PUSH
13680: LD_INT 22
13682: PUSH
13683: LD_OWVAR 2
13687: PUSH
13688: EMPTY
13689: LIST
13690: LIST
13691: PUSH
13692: LD_INT 21
13694: PUSH
13695: LD_INT 1
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PUSH
13702: LD_INT 3
13704: PUSH
13705: LD_INT 23
13707: PUSH
13708: LD_INT 0
13710: PUSH
13711: EMPTY
13712: LIST
13713: LIST
13714: PUSH
13715: EMPTY
13716: LIST
13717: LIST
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: LIST
13723: PPUSH
13724: CALL_OW 69
13728: ST_TO_ADDR
// if not tmp then
13729: LD_VAR 0 1
13733: NOT
13734: IFFALSE 13738
// exit ;
13736: GO 13764
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13738: LD_VAR 0 1
13742: PUSH
13743: LD_INT 1
13745: PPUSH
13746: LD_VAR 0 1
13750: PPUSH
13751: CALL_OW 12
13755: ARRAY
13756: PPUSH
13757: LD_INT 200
13759: PPUSH
13760: CALL_OW 234
// end ;
13764: PPOPN 1
13766: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13767: LD_EXP 30
13771: PUSH
13772: LD_EXP 59
13776: AND
13777: IFFALSE 13856
13779: GO 13781
13781: DISABLE
13782: LD_INT 0
13784: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13785: LD_ADDR_VAR 0 1
13789: PUSH
13790: LD_INT 22
13792: PUSH
13793: LD_OWVAR 2
13797: PUSH
13798: EMPTY
13799: LIST
13800: LIST
13801: PUSH
13802: LD_INT 21
13804: PUSH
13805: LD_INT 2
13807: PUSH
13808: EMPTY
13809: LIST
13810: LIST
13811: PUSH
13812: EMPTY
13813: LIST
13814: LIST
13815: PPUSH
13816: CALL_OW 69
13820: ST_TO_ADDR
// if not tmp then
13821: LD_VAR 0 1
13825: NOT
13826: IFFALSE 13830
// exit ;
13828: GO 13856
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13830: LD_VAR 0 1
13834: PUSH
13835: LD_INT 1
13837: PPUSH
13838: LD_VAR 0 1
13842: PPUSH
13843: CALL_OW 12
13847: ARRAY
13848: PPUSH
13849: LD_INT 60
13851: PPUSH
13852: CALL_OW 234
// end ;
13856: PPOPN 1
13858: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13859: LD_EXP 30
13863: PUSH
13864: LD_EXP 60
13868: AND
13869: IFFALSE 13968
13871: GO 13873
13873: DISABLE
13874: LD_INT 0
13876: PPUSH
13877: PPUSH
// begin enable ;
13878: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13879: LD_ADDR_VAR 0 1
13883: PUSH
13884: LD_INT 22
13886: PUSH
13887: LD_OWVAR 2
13891: PUSH
13892: EMPTY
13893: LIST
13894: LIST
13895: PUSH
13896: LD_INT 61
13898: PUSH
13899: EMPTY
13900: LIST
13901: PUSH
13902: LD_INT 33
13904: PUSH
13905: LD_INT 2
13907: PUSH
13908: EMPTY
13909: LIST
13910: LIST
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: LIST
13916: PPUSH
13917: CALL_OW 69
13921: ST_TO_ADDR
// if not tmp then
13922: LD_VAR 0 1
13926: NOT
13927: IFFALSE 13931
// exit ;
13929: GO 13968
// for i in tmp do
13931: LD_ADDR_VAR 0 2
13935: PUSH
13936: LD_VAR 0 1
13940: PUSH
13941: FOR_IN
13942: IFFALSE 13966
// if IsControledBy ( i ) then
13944: LD_VAR 0 2
13948: PPUSH
13949: CALL_OW 312
13953: IFFALSE 13964
// ComUnlink ( i ) ;
13955: LD_VAR 0 2
13959: PPUSH
13960: CALL_OW 136
13964: GO 13941
13966: POP
13967: POP
// end ;
13968: PPOPN 2
13970: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13971: LD_EXP 30
13975: PUSH
13976: LD_EXP 61
13980: AND
13981: IFFALSE 14121
13983: GO 13985
13985: DISABLE
13986: LD_INT 0
13988: PPUSH
13989: PPUSH
// begin ToLua ( displayPowell(); ) ;
13990: LD_STRING displayPowell();
13992: PPUSH
13993: CALL_OW 559
// uc_side := 0 ;
13997: LD_ADDR_OWVAR 20
14001: PUSH
14002: LD_INT 0
14004: ST_TO_ADDR
// uc_nation := 2 ;
14005: LD_ADDR_OWVAR 21
14009: PUSH
14010: LD_INT 2
14012: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14013: LD_ADDR_OWVAR 37
14017: PUSH
14018: LD_INT 14
14020: ST_TO_ADDR
// vc_engine := engine_siberite ;
14021: LD_ADDR_OWVAR 39
14025: PUSH
14026: LD_INT 3
14028: ST_TO_ADDR
// vc_control := control_apeman ;
14029: LD_ADDR_OWVAR 38
14033: PUSH
14034: LD_INT 5
14036: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14037: LD_ADDR_OWVAR 40
14041: PUSH
14042: LD_INT 29
14044: ST_TO_ADDR
// un := CreateVehicle ;
14045: LD_ADDR_VAR 0 2
14049: PUSH
14050: CALL_OW 45
14054: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14055: LD_VAR 0 2
14059: PPUSH
14060: LD_INT 1
14062: PPUSH
14063: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14067: LD_INT 35
14069: PPUSH
14070: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14074: LD_VAR 0 2
14078: PPUSH
14079: LD_INT 22
14081: PUSH
14082: LD_OWVAR 2
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: PPUSH
14091: CALL_OW 69
14095: PPUSH
14096: LD_VAR 0 2
14100: PPUSH
14101: CALL_OW 74
14105: PPUSH
14106: CALL_OW 115
// until IsDead ( un ) ;
14110: LD_VAR 0 2
14114: PPUSH
14115: CALL_OW 301
14119: IFFALSE 14067
// end ;
14121: PPOPN 2
14123: END
// every 0 0$1 trigger StreamModeActive and sStu do
14124: LD_EXP 30
14128: PUSH
14129: LD_EXP 69
14133: AND
14134: IFFALSE 14150
14136: GO 14138
14138: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14139: LD_STRING displayStucuk();
14141: PPUSH
14142: CALL_OW 559
// ResetFog ;
14146: CALL_OW 335
// end ;
14150: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14151: LD_EXP 30
14155: PUSH
14156: LD_EXP 62
14160: AND
14161: IFFALSE 14302
14163: GO 14165
14165: DISABLE
14166: LD_INT 0
14168: PPUSH
14169: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14170: LD_ADDR_VAR 0 2
14174: PUSH
14175: LD_INT 22
14177: PUSH
14178: LD_OWVAR 2
14182: PUSH
14183: EMPTY
14184: LIST
14185: LIST
14186: PUSH
14187: LD_INT 21
14189: PUSH
14190: LD_INT 1
14192: PUSH
14193: EMPTY
14194: LIST
14195: LIST
14196: PUSH
14197: EMPTY
14198: LIST
14199: LIST
14200: PPUSH
14201: CALL_OW 69
14205: ST_TO_ADDR
// if not tmp then
14206: LD_VAR 0 2
14210: NOT
14211: IFFALSE 14215
// exit ;
14213: GO 14302
// un := tmp [ rand ( 1 , tmp ) ] ;
14215: LD_ADDR_VAR 0 1
14219: PUSH
14220: LD_VAR 0 2
14224: PUSH
14225: LD_INT 1
14227: PPUSH
14228: LD_VAR 0 2
14232: PPUSH
14233: CALL_OW 12
14237: ARRAY
14238: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14239: LD_VAR 0 1
14243: PPUSH
14244: LD_INT 0
14246: PPUSH
14247: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14251: LD_VAR 0 1
14255: PPUSH
14256: LD_OWVAR 3
14260: PUSH
14261: LD_VAR 0 1
14265: DIFF
14266: PPUSH
14267: LD_VAR 0 1
14271: PPUSH
14272: CALL_OW 74
14276: PPUSH
14277: CALL_OW 115
// wait ( 0 0$20 ) ;
14281: LD_INT 700
14283: PPUSH
14284: CALL_OW 67
// SetSide ( un , your_side ) ;
14288: LD_VAR 0 1
14292: PPUSH
14293: LD_OWVAR 2
14297: PPUSH
14298: CALL_OW 235
// end ;
14302: PPOPN 2
14304: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14305: LD_EXP 30
14309: PUSH
14310: LD_EXP 63
14314: AND
14315: IFFALSE 14421
14317: GO 14319
14319: DISABLE
14320: LD_INT 0
14322: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14323: LD_ADDR_VAR 0 1
14327: PUSH
14328: LD_INT 22
14330: PUSH
14331: LD_OWVAR 2
14335: PUSH
14336: EMPTY
14337: LIST
14338: LIST
14339: PUSH
14340: LD_INT 2
14342: PUSH
14343: LD_INT 30
14345: PUSH
14346: LD_INT 0
14348: PUSH
14349: EMPTY
14350: LIST
14351: LIST
14352: PUSH
14353: LD_INT 30
14355: PUSH
14356: LD_INT 1
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: PUSH
14363: EMPTY
14364: LIST
14365: LIST
14366: LIST
14367: PUSH
14368: EMPTY
14369: LIST
14370: LIST
14371: PPUSH
14372: CALL_OW 69
14376: ST_TO_ADDR
// if not depot then
14377: LD_VAR 0 1
14381: NOT
14382: IFFALSE 14386
// exit ;
14384: GO 14421
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14386: LD_VAR 0 1
14390: PUSH
14391: LD_INT 1
14393: ARRAY
14394: PPUSH
14395: CALL_OW 250
14399: PPUSH
14400: LD_VAR 0 1
14404: PUSH
14405: LD_INT 1
14407: ARRAY
14408: PPUSH
14409: CALL_OW 251
14413: PPUSH
14414: LD_INT 70
14416: PPUSH
14417: CALL_OW 495
// end ;
14421: PPOPN 1
14423: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14424: LD_EXP 30
14428: PUSH
14429: LD_EXP 64
14433: AND
14434: IFFALSE 14645
14436: GO 14438
14438: DISABLE
14439: LD_INT 0
14441: PPUSH
14442: PPUSH
14443: PPUSH
14444: PPUSH
14445: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14446: LD_ADDR_VAR 0 5
14450: PUSH
14451: LD_INT 22
14453: PUSH
14454: LD_OWVAR 2
14458: PUSH
14459: EMPTY
14460: LIST
14461: LIST
14462: PUSH
14463: LD_INT 21
14465: PUSH
14466: LD_INT 1
14468: PUSH
14469: EMPTY
14470: LIST
14471: LIST
14472: PUSH
14473: EMPTY
14474: LIST
14475: LIST
14476: PPUSH
14477: CALL_OW 69
14481: ST_TO_ADDR
// if not tmp then
14482: LD_VAR 0 5
14486: NOT
14487: IFFALSE 14491
// exit ;
14489: GO 14645
// for i in tmp do
14491: LD_ADDR_VAR 0 1
14495: PUSH
14496: LD_VAR 0 5
14500: PUSH
14501: FOR_IN
14502: IFFALSE 14643
// begin d := rand ( 0 , 5 ) ;
14504: LD_ADDR_VAR 0 4
14508: PUSH
14509: LD_INT 0
14511: PPUSH
14512: LD_INT 5
14514: PPUSH
14515: CALL_OW 12
14519: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14520: LD_ADDR_VAR 0 2
14524: PUSH
14525: LD_VAR 0 1
14529: PPUSH
14530: CALL_OW 250
14534: PPUSH
14535: LD_VAR 0 4
14539: PPUSH
14540: LD_INT 3
14542: PPUSH
14543: LD_INT 12
14545: PPUSH
14546: CALL_OW 12
14550: PPUSH
14551: CALL_OW 272
14555: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14556: LD_ADDR_VAR 0 3
14560: PUSH
14561: LD_VAR 0 1
14565: PPUSH
14566: CALL_OW 251
14570: PPUSH
14571: LD_VAR 0 4
14575: PPUSH
14576: LD_INT 3
14578: PPUSH
14579: LD_INT 12
14581: PPUSH
14582: CALL_OW 12
14586: PPUSH
14587: CALL_OW 273
14591: ST_TO_ADDR
// if ValidHex ( x , y ) then
14592: LD_VAR 0 2
14596: PPUSH
14597: LD_VAR 0 3
14601: PPUSH
14602: CALL_OW 488
14606: IFFALSE 14641
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14608: LD_VAR 0 1
14612: PPUSH
14613: LD_VAR 0 2
14617: PPUSH
14618: LD_VAR 0 3
14622: PPUSH
14623: LD_INT 3
14625: PPUSH
14626: LD_INT 6
14628: PPUSH
14629: CALL_OW 12
14633: PPUSH
14634: LD_INT 1
14636: PPUSH
14637: CALL_OW 483
// end ;
14641: GO 14501
14643: POP
14644: POP
// end ;
14645: PPOPN 5
14647: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14648: LD_EXP 30
14652: PUSH
14653: LD_EXP 65
14657: AND
14658: IFFALSE 14752
14660: GO 14662
14662: DISABLE
14663: LD_INT 0
14665: PPUSH
14666: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14667: LD_ADDR_VAR 0 2
14671: PUSH
14672: LD_INT 22
14674: PUSH
14675: LD_OWVAR 2
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: PUSH
14684: LD_INT 32
14686: PUSH
14687: LD_INT 1
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: PUSH
14694: LD_INT 21
14696: PUSH
14697: LD_INT 2
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: PUSH
14704: EMPTY
14705: LIST
14706: LIST
14707: LIST
14708: PPUSH
14709: CALL_OW 69
14713: ST_TO_ADDR
// if not tmp then
14714: LD_VAR 0 2
14718: NOT
14719: IFFALSE 14723
// exit ;
14721: GO 14752
// for i in tmp do
14723: LD_ADDR_VAR 0 1
14727: PUSH
14728: LD_VAR 0 2
14732: PUSH
14733: FOR_IN
14734: IFFALSE 14750
// SetFuel ( i , 0 ) ;
14736: LD_VAR 0 1
14740: PPUSH
14741: LD_INT 0
14743: PPUSH
14744: CALL_OW 240
14748: GO 14733
14750: POP
14751: POP
// end ;
14752: PPOPN 2
14754: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14755: LD_EXP 30
14759: PUSH
14760: LD_EXP 66
14764: AND
14765: IFFALSE 14831
14767: GO 14769
14769: DISABLE
14770: LD_INT 0
14772: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14773: LD_ADDR_VAR 0 1
14777: PUSH
14778: LD_INT 22
14780: PUSH
14781: LD_OWVAR 2
14785: PUSH
14786: EMPTY
14787: LIST
14788: LIST
14789: PUSH
14790: LD_INT 30
14792: PUSH
14793: LD_INT 29
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PUSH
14800: EMPTY
14801: LIST
14802: LIST
14803: PPUSH
14804: CALL_OW 69
14808: ST_TO_ADDR
// if not tmp then
14809: LD_VAR 0 1
14813: NOT
14814: IFFALSE 14818
// exit ;
14816: GO 14831
// DestroyUnit ( tmp [ 1 ] ) ;
14818: LD_VAR 0 1
14822: PUSH
14823: LD_INT 1
14825: ARRAY
14826: PPUSH
14827: CALL_OW 65
// end ;
14831: PPOPN 1
14833: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14834: LD_EXP 30
14838: PUSH
14839: LD_EXP 68
14843: AND
14844: IFFALSE 14973
14846: GO 14848
14848: DISABLE
14849: LD_INT 0
14851: PPUSH
// begin uc_side := 0 ;
14852: LD_ADDR_OWVAR 20
14856: PUSH
14857: LD_INT 0
14859: ST_TO_ADDR
// uc_nation := nation_arabian ;
14860: LD_ADDR_OWVAR 21
14864: PUSH
14865: LD_INT 2
14867: ST_TO_ADDR
// hc_gallery :=  ;
14868: LD_ADDR_OWVAR 33
14872: PUSH
14873: LD_STRING 
14875: ST_TO_ADDR
// hc_name :=  ;
14876: LD_ADDR_OWVAR 26
14880: PUSH
14881: LD_STRING 
14883: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14884: LD_INT 1
14886: PPUSH
14887: LD_INT 11
14889: PPUSH
14890: LD_INT 10
14892: PPUSH
14893: CALL_OW 380
// un := CreateHuman ;
14897: LD_ADDR_VAR 0 1
14901: PUSH
14902: CALL_OW 44
14906: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14907: LD_VAR 0 1
14911: PPUSH
14912: LD_INT 1
14914: PPUSH
14915: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14919: LD_INT 35
14921: PPUSH
14922: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14926: LD_VAR 0 1
14930: PPUSH
14931: LD_INT 22
14933: PUSH
14934: LD_OWVAR 2
14938: PUSH
14939: EMPTY
14940: LIST
14941: LIST
14942: PPUSH
14943: CALL_OW 69
14947: PPUSH
14948: LD_VAR 0 1
14952: PPUSH
14953: CALL_OW 74
14957: PPUSH
14958: CALL_OW 115
// until IsDead ( un ) ;
14962: LD_VAR 0 1
14966: PPUSH
14967: CALL_OW 301
14971: IFFALSE 14919
// end ;
14973: PPOPN 1
14975: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14976: LD_EXP 30
14980: PUSH
14981: LD_EXP 70
14985: AND
14986: IFFALSE 14998
14988: GO 14990
14990: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14991: LD_STRING earthquake(getX(game), 0, 32)
14993: PPUSH
14994: CALL_OW 559
14998: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14999: LD_EXP 30
15003: PUSH
15004: LD_EXP 71
15008: AND
15009: IFFALSE 15100
15011: GO 15013
15013: DISABLE
15014: LD_INT 0
15016: PPUSH
// begin enable ;
15017: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15018: LD_ADDR_VAR 0 1
15022: PUSH
15023: LD_INT 22
15025: PUSH
15026: LD_OWVAR 2
15030: PUSH
15031: EMPTY
15032: LIST
15033: LIST
15034: PUSH
15035: LD_INT 21
15037: PUSH
15038: LD_INT 2
15040: PUSH
15041: EMPTY
15042: LIST
15043: LIST
15044: PUSH
15045: LD_INT 33
15047: PUSH
15048: LD_INT 3
15050: PUSH
15051: EMPTY
15052: LIST
15053: LIST
15054: PUSH
15055: EMPTY
15056: LIST
15057: LIST
15058: LIST
15059: PPUSH
15060: CALL_OW 69
15064: ST_TO_ADDR
// if not tmp then
15065: LD_VAR 0 1
15069: NOT
15070: IFFALSE 15074
// exit ;
15072: GO 15100
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15074: LD_VAR 0 1
15078: PUSH
15079: LD_INT 1
15081: PPUSH
15082: LD_VAR 0 1
15086: PPUSH
15087: CALL_OW 12
15091: ARRAY
15092: PPUSH
15093: LD_INT 1
15095: PPUSH
15096: CALL_OW 234
// end ;
15100: PPOPN 1
15102: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15103: LD_EXP 30
15107: PUSH
15108: LD_EXP 72
15112: AND
15113: IFFALSE 15254
15115: GO 15117
15117: DISABLE
15118: LD_INT 0
15120: PPUSH
15121: PPUSH
15122: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15123: LD_ADDR_VAR 0 3
15127: PUSH
15128: LD_INT 22
15130: PUSH
15131: LD_OWVAR 2
15135: PUSH
15136: EMPTY
15137: LIST
15138: LIST
15139: PUSH
15140: LD_INT 25
15142: PUSH
15143: LD_INT 1
15145: PUSH
15146: EMPTY
15147: LIST
15148: LIST
15149: PUSH
15150: EMPTY
15151: LIST
15152: LIST
15153: PPUSH
15154: CALL_OW 69
15158: ST_TO_ADDR
// if not tmp then
15159: LD_VAR 0 3
15163: NOT
15164: IFFALSE 15168
// exit ;
15166: GO 15254
// un := tmp [ rand ( 1 , tmp ) ] ;
15168: LD_ADDR_VAR 0 2
15172: PUSH
15173: LD_VAR 0 3
15177: PUSH
15178: LD_INT 1
15180: PPUSH
15181: LD_VAR 0 3
15185: PPUSH
15186: CALL_OW 12
15190: ARRAY
15191: ST_TO_ADDR
// if Crawls ( un ) then
15192: LD_VAR 0 2
15196: PPUSH
15197: CALL_OW 318
15201: IFFALSE 15212
// ComWalk ( un ) ;
15203: LD_VAR 0 2
15207: PPUSH
15208: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15212: LD_VAR 0 2
15216: PPUSH
15217: LD_INT 9
15219: PPUSH
15220: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15224: LD_INT 28
15226: PPUSH
15227: LD_OWVAR 2
15231: PPUSH
15232: LD_INT 2
15234: PPUSH
15235: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15239: LD_INT 29
15241: PPUSH
15242: LD_OWVAR 2
15246: PPUSH
15247: LD_INT 2
15249: PPUSH
15250: CALL_OW 322
// end ;
15254: PPOPN 3
15256: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15257: LD_EXP 30
15261: PUSH
15262: LD_EXP 73
15266: AND
15267: IFFALSE 15378
15269: GO 15271
15271: DISABLE
15272: LD_INT 0
15274: PPUSH
15275: PPUSH
15276: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15277: LD_ADDR_VAR 0 3
15281: PUSH
15282: LD_INT 22
15284: PUSH
15285: LD_OWVAR 2
15289: PUSH
15290: EMPTY
15291: LIST
15292: LIST
15293: PUSH
15294: LD_INT 25
15296: PUSH
15297: LD_INT 1
15299: PUSH
15300: EMPTY
15301: LIST
15302: LIST
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: PPUSH
15308: CALL_OW 69
15312: ST_TO_ADDR
// if not tmp then
15313: LD_VAR 0 3
15317: NOT
15318: IFFALSE 15322
// exit ;
15320: GO 15378
// un := tmp [ rand ( 1 , tmp ) ] ;
15322: LD_ADDR_VAR 0 2
15326: PUSH
15327: LD_VAR 0 3
15331: PUSH
15332: LD_INT 1
15334: PPUSH
15335: LD_VAR 0 3
15339: PPUSH
15340: CALL_OW 12
15344: ARRAY
15345: ST_TO_ADDR
// if Crawls ( un ) then
15346: LD_VAR 0 2
15350: PPUSH
15351: CALL_OW 318
15355: IFFALSE 15366
// ComWalk ( un ) ;
15357: LD_VAR 0 2
15361: PPUSH
15362: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15366: LD_VAR 0 2
15370: PPUSH
15371: LD_INT 8
15373: PPUSH
15374: CALL_OW 336
// end ;
15378: PPOPN 3
15380: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15381: LD_EXP 30
15385: PUSH
15386: LD_EXP 74
15390: AND
15391: IFFALSE 15535
15393: GO 15395
15395: DISABLE
15396: LD_INT 0
15398: PPUSH
15399: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15400: LD_ADDR_VAR 0 2
15404: PUSH
15405: LD_INT 22
15407: PUSH
15408: LD_OWVAR 2
15412: PUSH
15413: EMPTY
15414: LIST
15415: LIST
15416: PUSH
15417: LD_INT 21
15419: PUSH
15420: LD_INT 2
15422: PUSH
15423: EMPTY
15424: LIST
15425: LIST
15426: PUSH
15427: LD_INT 2
15429: PUSH
15430: LD_INT 34
15432: PUSH
15433: LD_INT 12
15435: PUSH
15436: EMPTY
15437: LIST
15438: LIST
15439: PUSH
15440: LD_INT 34
15442: PUSH
15443: LD_INT 51
15445: PUSH
15446: EMPTY
15447: LIST
15448: LIST
15449: PUSH
15450: LD_INT 34
15452: PUSH
15453: LD_INT 32
15455: PUSH
15456: EMPTY
15457: LIST
15458: LIST
15459: PUSH
15460: EMPTY
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: PUSH
15466: EMPTY
15467: LIST
15468: LIST
15469: LIST
15470: PPUSH
15471: CALL_OW 69
15475: ST_TO_ADDR
// if not tmp then
15476: LD_VAR 0 2
15480: NOT
15481: IFFALSE 15485
// exit ;
15483: GO 15535
// for i in tmp do
15485: LD_ADDR_VAR 0 1
15489: PUSH
15490: LD_VAR 0 2
15494: PUSH
15495: FOR_IN
15496: IFFALSE 15533
// if GetCargo ( i , mat_artifact ) = 0 then
15498: LD_VAR 0 1
15502: PPUSH
15503: LD_INT 4
15505: PPUSH
15506: CALL_OW 289
15510: PUSH
15511: LD_INT 0
15513: EQUAL
15514: IFFALSE 15531
// SetCargo ( i , mat_siberit , 100 ) ;
15516: LD_VAR 0 1
15520: PPUSH
15521: LD_INT 3
15523: PPUSH
15524: LD_INT 100
15526: PPUSH
15527: CALL_OW 290
15531: GO 15495
15533: POP
15534: POP
// end ;
15535: PPOPN 2
15537: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15538: LD_EXP 30
15542: PUSH
15543: LD_EXP 75
15547: AND
15548: IFFALSE 15701
15550: GO 15552
15552: DISABLE
15553: LD_INT 0
15555: PPUSH
15556: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15557: LD_ADDR_VAR 0 2
15561: PUSH
15562: LD_INT 22
15564: PUSH
15565: LD_OWVAR 2
15569: PUSH
15570: EMPTY
15571: LIST
15572: LIST
15573: PPUSH
15574: CALL_OW 69
15578: ST_TO_ADDR
// if not tmp then
15579: LD_VAR 0 2
15583: NOT
15584: IFFALSE 15588
// exit ;
15586: GO 15701
// for i := 1 to 2 do
15588: LD_ADDR_VAR 0 1
15592: PUSH
15593: DOUBLE
15594: LD_INT 1
15596: DEC
15597: ST_TO_ADDR
15598: LD_INT 2
15600: PUSH
15601: FOR_TO
15602: IFFALSE 15699
// begin uc_side := your_side ;
15604: LD_ADDR_OWVAR 20
15608: PUSH
15609: LD_OWVAR 2
15613: ST_TO_ADDR
// uc_nation := nation_american ;
15614: LD_ADDR_OWVAR 21
15618: PUSH
15619: LD_INT 1
15621: ST_TO_ADDR
// vc_chassis := us_morphling ;
15622: LD_ADDR_OWVAR 37
15626: PUSH
15627: LD_INT 5
15629: ST_TO_ADDR
// vc_engine := engine_siberite ;
15630: LD_ADDR_OWVAR 39
15634: PUSH
15635: LD_INT 3
15637: ST_TO_ADDR
// vc_control := control_computer ;
15638: LD_ADDR_OWVAR 38
15642: PUSH
15643: LD_INT 3
15645: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15646: LD_ADDR_OWVAR 40
15650: PUSH
15651: LD_INT 10
15653: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
15654: CALL_OW 45
15658: PPUSH
15659: LD_VAR 0 2
15663: PUSH
15664: LD_INT 1
15666: ARRAY
15667: PPUSH
15668: CALL_OW 250
15672: PPUSH
15673: LD_VAR 0 2
15677: PUSH
15678: LD_INT 1
15680: ARRAY
15681: PPUSH
15682: CALL_OW 251
15686: PPUSH
15687: LD_INT 12
15689: PPUSH
15690: LD_INT 1
15692: PPUSH
15693: CALL_OW 50
// end ;
15697: GO 15601
15699: POP
15700: POP
// end ;
15701: PPOPN 2
15703: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15704: LD_EXP 30
15708: PUSH
15709: LD_EXP 76
15713: AND
15714: IFFALSE 15936
15716: GO 15718
15718: DISABLE
15719: LD_INT 0
15721: PPUSH
15722: PPUSH
15723: PPUSH
15724: PPUSH
15725: PPUSH
15726: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15727: LD_ADDR_VAR 0 6
15731: PUSH
15732: LD_INT 22
15734: PUSH
15735: LD_OWVAR 2
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: PUSH
15744: LD_INT 21
15746: PUSH
15747: LD_INT 1
15749: PUSH
15750: EMPTY
15751: LIST
15752: LIST
15753: PUSH
15754: LD_INT 3
15756: PUSH
15757: LD_INT 23
15759: PUSH
15760: LD_INT 0
15762: PUSH
15763: EMPTY
15764: LIST
15765: LIST
15766: PUSH
15767: EMPTY
15768: LIST
15769: LIST
15770: PUSH
15771: EMPTY
15772: LIST
15773: LIST
15774: LIST
15775: PPUSH
15776: CALL_OW 69
15780: ST_TO_ADDR
// if not tmp then
15781: LD_VAR 0 6
15785: NOT
15786: IFFALSE 15790
// exit ;
15788: GO 15936
// s1 := rand ( 1 , 4 ) ;
15790: LD_ADDR_VAR 0 2
15794: PUSH
15795: LD_INT 1
15797: PPUSH
15798: LD_INT 4
15800: PPUSH
15801: CALL_OW 12
15805: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15806: LD_ADDR_VAR 0 4
15810: PUSH
15811: LD_VAR 0 6
15815: PUSH
15816: LD_INT 1
15818: ARRAY
15819: PPUSH
15820: LD_VAR 0 2
15824: PPUSH
15825: CALL_OW 259
15829: ST_TO_ADDR
// if s1 = 1 then
15830: LD_VAR 0 2
15834: PUSH
15835: LD_INT 1
15837: EQUAL
15838: IFFALSE 15858
// s2 := rand ( 2 , 4 ) else
15840: LD_ADDR_VAR 0 3
15844: PUSH
15845: LD_INT 2
15847: PPUSH
15848: LD_INT 4
15850: PPUSH
15851: CALL_OW 12
15855: ST_TO_ADDR
15856: GO 15866
// s2 := 1 ;
15858: LD_ADDR_VAR 0 3
15862: PUSH
15863: LD_INT 1
15865: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15866: LD_ADDR_VAR 0 5
15870: PUSH
15871: LD_VAR 0 6
15875: PUSH
15876: LD_INT 1
15878: ARRAY
15879: PPUSH
15880: LD_VAR 0 3
15884: PPUSH
15885: CALL_OW 259
15889: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15890: LD_VAR 0 6
15894: PUSH
15895: LD_INT 1
15897: ARRAY
15898: PPUSH
15899: LD_VAR 0 2
15903: PPUSH
15904: LD_VAR 0 5
15908: PPUSH
15909: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15913: LD_VAR 0 6
15917: PUSH
15918: LD_INT 1
15920: ARRAY
15921: PPUSH
15922: LD_VAR 0 3
15926: PPUSH
15927: LD_VAR 0 4
15931: PPUSH
15932: CALL_OW 237
// end ;
15936: PPOPN 6
15938: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15939: LD_EXP 30
15943: PUSH
15944: LD_EXP 77
15948: AND
15949: IFFALSE 16028
15951: GO 15953
15953: DISABLE
15954: LD_INT 0
15956: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15957: LD_ADDR_VAR 0 1
15961: PUSH
15962: LD_INT 22
15964: PUSH
15965: LD_OWVAR 2
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: PUSH
15974: LD_INT 30
15976: PUSH
15977: LD_INT 3
15979: PUSH
15980: EMPTY
15981: LIST
15982: LIST
15983: PUSH
15984: EMPTY
15985: LIST
15986: LIST
15987: PPUSH
15988: CALL_OW 69
15992: ST_TO_ADDR
// if not tmp then
15993: LD_VAR 0 1
15997: NOT
15998: IFFALSE 16002
// exit ;
16000: GO 16028
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16002: LD_VAR 0 1
16006: PUSH
16007: LD_INT 1
16009: PPUSH
16010: LD_VAR 0 1
16014: PPUSH
16015: CALL_OW 12
16019: ARRAY
16020: PPUSH
16021: LD_INT 1
16023: PPUSH
16024: CALL_OW 234
// end ;
16028: PPOPN 1
16030: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16031: LD_EXP 30
16035: PUSH
16036: LD_EXP 78
16040: AND
16041: IFFALSE 16153
16043: GO 16045
16045: DISABLE
16046: LD_INT 0
16048: PPUSH
16049: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16050: LD_ADDR_VAR 0 2
16054: PUSH
16055: LD_INT 22
16057: PUSH
16058: LD_OWVAR 2
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: PUSH
16067: LD_INT 2
16069: PUSH
16070: LD_INT 30
16072: PUSH
16073: LD_INT 27
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: PUSH
16080: LD_INT 30
16082: PUSH
16083: LD_INT 26
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: PUSH
16090: LD_INT 30
16092: PUSH
16093: LD_INT 28
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: PUSH
16100: EMPTY
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: PPUSH
16110: CALL_OW 69
16114: ST_TO_ADDR
// if not tmp then
16115: LD_VAR 0 2
16119: NOT
16120: IFFALSE 16124
// exit ;
16122: GO 16153
// for i in tmp do
16124: LD_ADDR_VAR 0 1
16128: PUSH
16129: LD_VAR 0 2
16133: PUSH
16134: FOR_IN
16135: IFFALSE 16151
// SetLives ( i , 1 ) ;
16137: LD_VAR 0 1
16141: PPUSH
16142: LD_INT 1
16144: PPUSH
16145: CALL_OW 234
16149: GO 16134
16151: POP
16152: POP
// end ;
16153: PPOPN 2
16155: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16156: LD_EXP 30
16160: PUSH
16161: LD_EXP 79
16165: AND
16166: IFFALSE 16440
16168: GO 16170
16170: DISABLE
16171: LD_INT 0
16173: PPUSH
16174: PPUSH
16175: PPUSH
// begin i := rand ( 1 , 7 ) ;
16176: LD_ADDR_VAR 0 1
16180: PUSH
16181: LD_INT 1
16183: PPUSH
16184: LD_INT 7
16186: PPUSH
16187: CALL_OW 12
16191: ST_TO_ADDR
// case i of 1 :
16192: LD_VAR 0 1
16196: PUSH
16197: LD_INT 1
16199: DOUBLE
16200: EQUAL
16201: IFTRUE 16205
16203: GO 16215
16205: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16206: LD_STRING earthquake(getX(game), 0, 32)
16208: PPUSH
16209: CALL_OW 559
16213: GO 16440
16215: LD_INT 2
16217: DOUBLE
16218: EQUAL
16219: IFTRUE 16223
16221: GO 16237
16223: POP
// begin ToLua ( displayStucuk(); ) ;
16224: LD_STRING displayStucuk();
16226: PPUSH
16227: CALL_OW 559
// ResetFog ;
16231: CALL_OW 335
// end ; 3 :
16235: GO 16440
16237: LD_INT 3
16239: DOUBLE
16240: EQUAL
16241: IFTRUE 16245
16243: GO 16349
16245: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16246: LD_ADDR_VAR 0 2
16250: PUSH
16251: LD_INT 22
16253: PUSH
16254: LD_OWVAR 2
16258: PUSH
16259: EMPTY
16260: LIST
16261: LIST
16262: PUSH
16263: LD_INT 25
16265: PUSH
16266: LD_INT 1
16268: PUSH
16269: EMPTY
16270: LIST
16271: LIST
16272: PUSH
16273: EMPTY
16274: LIST
16275: LIST
16276: PPUSH
16277: CALL_OW 69
16281: ST_TO_ADDR
// if not tmp then
16282: LD_VAR 0 2
16286: NOT
16287: IFFALSE 16291
// exit ;
16289: GO 16440
// un := tmp [ rand ( 1 , tmp ) ] ;
16291: LD_ADDR_VAR 0 3
16295: PUSH
16296: LD_VAR 0 2
16300: PUSH
16301: LD_INT 1
16303: PPUSH
16304: LD_VAR 0 2
16308: PPUSH
16309: CALL_OW 12
16313: ARRAY
16314: ST_TO_ADDR
// if Crawls ( un ) then
16315: LD_VAR 0 3
16319: PPUSH
16320: CALL_OW 318
16324: IFFALSE 16335
// ComWalk ( un ) ;
16326: LD_VAR 0 3
16330: PPUSH
16331: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16335: LD_VAR 0 3
16339: PPUSH
16340: LD_INT 8
16342: PPUSH
16343: CALL_OW 336
// end ; 4 :
16347: GO 16440
16349: LD_INT 4
16351: DOUBLE
16352: EQUAL
16353: IFTRUE 16357
16355: GO 16418
16357: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16358: LD_ADDR_VAR 0 2
16362: PUSH
16363: LD_INT 22
16365: PUSH
16366: LD_OWVAR 2
16370: PUSH
16371: EMPTY
16372: LIST
16373: LIST
16374: PUSH
16375: LD_INT 30
16377: PUSH
16378: LD_INT 29
16380: PUSH
16381: EMPTY
16382: LIST
16383: LIST
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: PPUSH
16389: CALL_OW 69
16393: ST_TO_ADDR
// if not tmp then
16394: LD_VAR 0 2
16398: NOT
16399: IFFALSE 16403
// exit ;
16401: GO 16440
// DestroyUnit ( tmp [ 1 ] ) ;
16403: LD_VAR 0 2
16407: PUSH
16408: LD_INT 1
16410: ARRAY
16411: PPUSH
16412: CALL_OW 65
// end ; 5 .. 7 :
16416: GO 16440
16418: LD_INT 5
16420: DOUBLE
16421: GREATEREQUAL
16422: IFFALSE 16430
16424: LD_INT 7
16426: DOUBLE
16427: LESSEQUAL
16428: IFTRUE 16432
16430: GO 16439
16432: POP
// StreamSibBomb ; end ;
16433: CALL 12720 0 0
16437: GO 16440
16439: POP
// end ;
16440: PPOPN 3
16442: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16443: LD_EXP 30
16447: PUSH
16448: LD_EXP 80
16452: AND
16453: IFFALSE 16609
16455: GO 16457
16457: DISABLE
16458: LD_INT 0
16460: PPUSH
16461: PPUSH
16462: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16463: LD_ADDR_VAR 0 2
16467: PUSH
16468: LD_INT 81
16470: PUSH
16471: LD_OWVAR 2
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: PUSH
16480: LD_INT 2
16482: PUSH
16483: LD_INT 21
16485: PUSH
16486: LD_INT 1
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: PUSH
16493: LD_INT 21
16495: PUSH
16496: LD_INT 2
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: LIST
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: PPUSH
16512: CALL_OW 69
16516: ST_TO_ADDR
// if not tmp then
16517: LD_VAR 0 2
16521: NOT
16522: IFFALSE 16526
// exit ;
16524: GO 16609
// p := 0 ;
16526: LD_ADDR_VAR 0 3
16530: PUSH
16531: LD_INT 0
16533: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16534: LD_INT 35
16536: PPUSH
16537: CALL_OW 67
// p := p + 1 ;
16541: LD_ADDR_VAR 0 3
16545: PUSH
16546: LD_VAR 0 3
16550: PUSH
16551: LD_INT 1
16553: PLUS
16554: ST_TO_ADDR
// for i in tmp do
16555: LD_ADDR_VAR 0 1
16559: PUSH
16560: LD_VAR 0 2
16564: PUSH
16565: FOR_IN
16566: IFFALSE 16597
// if GetLives ( i ) < 1000 then
16568: LD_VAR 0 1
16572: PPUSH
16573: CALL_OW 256
16577: PUSH
16578: LD_INT 1000
16580: LESS
16581: IFFALSE 16595
// SetLives ( i , 1000 ) ;
16583: LD_VAR 0 1
16587: PPUSH
16588: LD_INT 1000
16590: PPUSH
16591: CALL_OW 234
16595: GO 16565
16597: POP
16598: POP
// until p > 20 ;
16599: LD_VAR 0 3
16603: PUSH
16604: LD_INT 20
16606: GREATER
16607: IFFALSE 16534
// end ;
16609: PPOPN 3
16611: END
// every 0 0$1 trigger StreamModeActive and sTime do
16612: LD_EXP 30
16616: PUSH
16617: LD_EXP 81
16621: AND
16622: IFFALSE 16657
16624: GO 16626
16626: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16627: LD_INT 28
16629: PPUSH
16630: LD_OWVAR 2
16634: PPUSH
16635: LD_INT 2
16637: PPUSH
16638: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16642: LD_INT 30
16644: PPUSH
16645: LD_OWVAR 2
16649: PPUSH
16650: LD_INT 2
16652: PPUSH
16653: CALL_OW 322
// end ;
16657: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16658: LD_EXP 30
16662: PUSH
16663: LD_EXP 82
16667: AND
16668: IFFALSE 16789
16670: GO 16672
16672: DISABLE
16673: LD_INT 0
16675: PPUSH
16676: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16677: LD_ADDR_VAR 0 2
16681: PUSH
16682: LD_INT 22
16684: PUSH
16685: LD_OWVAR 2
16689: PUSH
16690: EMPTY
16691: LIST
16692: LIST
16693: PUSH
16694: LD_INT 21
16696: PUSH
16697: LD_INT 1
16699: PUSH
16700: EMPTY
16701: LIST
16702: LIST
16703: PUSH
16704: LD_INT 3
16706: PUSH
16707: LD_INT 23
16709: PUSH
16710: LD_INT 0
16712: PUSH
16713: EMPTY
16714: LIST
16715: LIST
16716: PUSH
16717: EMPTY
16718: LIST
16719: LIST
16720: PUSH
16721: EMPTY
16722: LIST
16723: LIST
16724: LIST
16725: PPUSH
16726: CALL_OW 69
16730: ST_TO_ADDR
// if not tmp then
16731: LD_VAR 0 2
16735: NOT
16736: IFFALSE 16740
// exit ;
16738: GO 16789
// for i in tmp do
16740: LD_ADDR_VAR 0 1
16744: PUSH
16745: LD_VAR 0 2
16749: PUSH
16750: FOR_IN
16751: IFFALSE 16787
// begin if Crawls ( i ) then
16753: LD_VAR 0 1
16757: PPUSH
16758: CALL_OW 318
16762: IFFALSE 16773
// ComWalk ( i ) ;
16764: LD_VAR 0 1
16768: PPUSH
16769: CALL_OW 138
// SetClass ( i , 2 ) ;
16773: LD_VAR 0 1
16777: PPUSH
16778: LD_INT 2
16780: PPUSH
16781: CALL_OW 336
// end ;
16785: GO 16750
16787: POP
16788: POP
// end ;
16789: PPOPN 2
16791: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16792: LD_EXP 30
16796: PUSH
16797: LD_EXP 83
16801: AND
16802: IFFALSE 17083
16804: GO 16806
16806: DISABLE
16807: LD_INT 0
16809: PPUSH
16810: PPUSH
16811: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16812: LD_OWVAR 2
16816: PPUSH
16817: LD_INT 9
16819: PPUSH
16820: LD_INT 1
16822: PPUSH
16823: LD_INT 1
16825: PPUSH
16826: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16830: LD_INT 9
16832: PPUSH
16833: LD_OWVAR 2
16837: PPUSH
16838: CALL_OW 343
// uc_side := 9 ;
16842: LD_ADDR_OWVAR 20
16846: PUSH
16847: LD_INT 9
16849: ST_TO_ADDR
// uc_nation := 2 ;
16850: LD_ADDR_OWVAR 21
16854: PUSH
16855: LD_INT 2
16857: ST_TO_ADDR
// hc_name := Dark Warrior ;
16858: LD_ADDR_OWVAR 26
16862: PUSH
16863: LD_STRING Dark Warrior
16865: ST_TO_ADDR
// hc_gallery :=  ;
16866: LD_ADDR_OWVAR 33
16870: PUSH
16871: LD_STRING 
16873: ST_TO_ADDR
// hc_noskilllimit := true ;
16874: LD_ADDR_OWVAR 76
16878: PUSH
16879: LD_INT 1
16881: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16882: LD_ADDR_OWVAR 31
16886: PUSH
16887: LD_INT 30
16889: PUSH
16890: LD_INT 30
16892: PUSH
16893: LD_INT 30
16895: PUSH
16896: LD_INT 30
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: ST_TO_ADDR
// un := CreateHuman ;
16905: LD_ADDR_VAR 0 3
16909: PUSH
16910: CALL_OW 44
16914: ST_TO_ADDR
// hc_noskilllimit := false ;
16915: LD_ADDR_OWVAR 76
16919: PUSH
16920: LD_INT 0
16922: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16923: LD_VAR 0 3
16927: PPUSH
16928: LD_INT 1
16930: PPUSH
16931: CALL_OW 51
// p := 0 ;
16935: LD_ADDR_VAR 0 2
16939: PUSH
16940: LD_INT 0
16942: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16943: LD_INT 35
16945: PPUSH
16946: CALL_OW 67
// p := p + 1 ;
16950: LD_ADDR_VAR 0 2
16954: PUSH
16955: LD_VAR 0 2
16959: PUSH
16960: LD_INT 1
16962: PLUS
16963: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16964: LD_VAR 0 3
16968: PPUSH
16969: CALL_OW 256
16973: PUSH
16974: LD_INT 1000
16976: LESS
16977: IFFALSE 16991
// SetLives ( un , 1000 ) ;
16979: LD_VAR 0 3
16983: PPUSH
16984: LD_INT 1000
16986: PPUSH
16987: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16991: LD_VAR 0 3
16995: PPUSH
16996: LD_INT 81
16998: PUSH
16999: LD_OWVAR 2
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: PUSH
17008: LD_INT 91
17010: PUSH
17011: LD_VAR 0 3
17015: PUSH
17016: LD_INT 30
17018: PUSH
17019: EMPTY
17020: LIST
17021: LIST
17022: LIST
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: PPUSH
17028: CALL_OW 69
17032: PPUSH
17033: LD_VAR 0 3
17037: PPUSH
17038: CALL_OW 74
17042: PPUSH
17043: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
17047: LD_VAR 0 2
17051: PUSH
17052: LD_INT 60
17054: GREATER
17055: PUSH
17056: LD_VAR 0 3
17060: PPUSH
17061: CALL_OW 301
17065: OR
17066: IFFALSE 16943
// if un then
17068: LD_VAR 0 3
17072: IFFALSE 17083
// RemoveUnit ( un ) ;
17074: LD_VAR 0 3
17078: PPUSH
17079: CALL_OW 64
// end ; end_of_file
17083: PPOPN 3
17085: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
17086: LD_INT 0
17088: PPUSH
17089: PPUSH
17090: PPUSH
17091: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
17092: LD_VAR 0 1
17096: PPUSH
17097: CALL_OW 264
17101: PUSH
17102: LD_EXP 29
17106: EQUAL
17107: IFFALSE 17179
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
17109: LD_INT 68
17111: PPUSH
17112: LD_VAR 0 1
17116: PPUSH
17117: CALL_OW 255
17121: PPUSH
17122: CALL_OW 321
17126: PUSH
17127: LD_INT 2
17129: EQUAL
17130: IFFALSE 17142
// eff := 70 else
17132: LD_ADDR_VAR 0 4
17136: PUSH
17137: LD_INT 70
17139: ST_TO_ADDR
17140: GO 17150
// eff := 30 ;
17142: LD_ADDR_VAR 0 4
17146: PUSH
17147: LD_INT 30
17149: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
17150: LD_VAR 0 1
17154: PPUSH
17155: CALL_OW 250
17159: PPUSH
17160: LD_VAR 0 1
17164: PPUSH
17165: CALL_OW 251
17169: PPUSH
17170: LD_VAR 0 4
17174: PPUSH
17175: CALL_OW 495
// end ; end ;
17179: LD_VAR 0 2
17183: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
17184: LD_INT 0
17186: PPUSH
// end ;
17187: LD_VAR 0 4
17191: RET
// export function SOS_Command ( cmd ) ; begin
17192: LD_INT 0
17194: PPUSH
// end ;
17195: LD_VAR 0 2
17199: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedunit , x , y ) ; begin
17200: LD_INT 0
17202: PPUSH
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
17203: LD_VAR 0 1
17207: PUSH
17208: LD_INT 255
17210: EQUAL
17211: PUSH
17212: LD_VAR 0 2
17216: PPUSH
17217: CALL_OW 264
17221: PUSH
17222: LD_INT 14
17224: PUSH
17225: LD_INT 53
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: IN
17232: AND
17233: PUSH
17234: LD_VAR 0 4
17238: PPUSH
17239: LD_VAR 0 5
17243: PPUSH
17244: CALL_OW 488
17248: AND
17249: IFFALSE 17273
// CutTreeXYR ( unit , x , y , 12 ) ;
17251: LD_VAR 0 2
17255: PPUSH
17256: LD_VAR 0 4
17260: PPUSH
17261: LD_VAR 0 5
17265: PPUSH
17266: LD_INT 12
17268: PPUSH
17269: CALL 17278 0 4
// end ;
17273: LD_VAR 0 6
17277: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
17278: LD_INT 0
17280: PPUSH
17281: PPUSH
17282: PPUSH
17283: PPUSH
17284: PPUSH
17285: PPUSH
17286: PPUSH
17287: PPUSH
17288: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
17289: LD_VAR 0 1
17293: NOT
17294: PUSH
17295: LD_VAR 0 2
17299: PPUSH
17300: LD_VAR 0 3
17304: PPUSH
17305: CALL_OW 488
17309: NOT
17310: OR
17311: PUSH
17312: LD_VAR 0 4
17316: NOT
17317: OR
17318: IFFALSE 17322
// exit ;
17320: GO 17662
// list := [ ] ;
17322: LD_ADDR_VAR 0 13
17326: PUSH
17327: EMPTY
17328: ST_TO_ADDR
// if x - r < 0 then
17329: LD_VAR 0 2
17333: PUSH
17334: LD_VAR 0 4
17338: MINUS
17339: PUSH
17340: LD_INT 0
17342: LESS
17343: IFFALSE 17355
// min_x := 0 else
17345: LD_ADDR_VAR 0 7
17349: PUSH
17350: LD_INT 0
17352: ST_TO_ADDR
17353: GO 17371
// min_x := x - r ;
17355: LD_ADDR_VAR 0 7
17359: PUSH
17360: LD_VAR 0 2
17364: PUSH
17365: LD_VAR 0 4
17369: MINUS
17370: ST_TO_ADDR
// if y - r < 0 then
17371: LD_VAR 0 3
17375: PUSH
17376: LD_VAR 0 4
17380: MINUS
17381: PUSH
17382: LD_INT 0
17384: LESS
17385: IFFALSE 17397
// min_y := 0 else
17387: LD_ADDR_VAR 0 8
17391: PUSH
17392: LD_INT 0
17394: ST_TO_ADDR
17395: GO 17413
// min_y := y - r ;
17397: LD_ADDR_VAR 0 8
17401: PUSH
17402: LD_VAR 0 3
17406: PUSH
17407: LD_VAR 0 4
17411: MINUS
17412: ST_TO_ADDR
// max_x := x + r ;
17413: LD_ADDR_VAR 0 9
17417: PUSH
17418: LD_VAR 0 2
17422: PUSH
17423: LD_VAR 0 4
17427: PLUS
17428: ST_TO_ADDR
// max_y := y + r ;
17429: LD_ADDR_VAR 0 10
17433: PUSH
17434: LD_VAR 0 3
17438: PUSH
17439: LD_VAR 0 4
17443: PLUS
17444: ST_TO_ADDR
// for _x = min_x to max_x do
17445: LD_ADDR_VAR 0 11
17449: PUSH
17450: DOUBLE
17451: LD_VAR 0 7
17455: DEC
17456: ST_TO_ADDR
17457: LD_VAR 0 9
17461: PUSH
17462: FOR_TO
17463: IFFALSE 17580
// for _y = min_y to max_y do
17465: LD_ADDR_VAR 0 12
17469: PUSH
17470: DOUBLE
17471: LD_VAR 0 8
17475: DEC
17476: ST_TO_ADDR
17477: LD_VAR 0 10
17481: PUSH
17482: FOR_TO
17483: IFFALSE 17576
// begin if not ValidHex ( _x , _y ) then
17485: LD_VAR 0 11
17489: PPUSH
17490: LD_VAR 0 12
17494: PPUSH
17495: CALL_OW 488
17499: NOT
17500: IFFALSE 17504
// continue ;
17502: GO 17482
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
17504: LD_VAR 0 11
17508: PPUSH
17509: LD_VAR 0 12
17513: PPUSH
17514: CALL_OW 351
17518: PUSH
17519: LD_VAR 0 11
17523: PPUSH
17524: LD_VAR 0 12
17528: PPUSH
17529: CALL_OW 554
17533: AND
17534: IFFALSE 17574
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
17536: LD_ADDR_VAR 0 13
17540: PUSH
17541: LD_VAR 0 13
17545: PPUSH
17546: LD_VAR 0 13
17550: PUSH
17551: LD_INT 1
17553: PLUS
17554: PPUSH
17555: LD_VAR 0 11
17559: PUSH
17560: LD_VAR 0 12
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: PPUSH
17569: CALL_OW 2
17573: ST_TO_ADDR
// end ;
17574: GO 17482
17576: POP
17577: POP
17578: GO 17462
17580: POP
17581: POP
// if not list then
17582: LD_VAR 0 13
17586: NOT
17587: IFFALSE 17591
// exit ;
17589: GO 17662
// for i in list do
17591: LD_ADDR_VAR 0 6
17595: PUSH
17596: LD_VAR 0 13
17600: PUSH
17601: FOR_IN
17602: IFFALSE 17660
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
17604: LD_VAR 0 1
17608: PPUSH
17609: LD_STRING M
17611: PUSH
17612: LD_VAR 0 6
17616: PUSH
17617: LD_INT 1
17619: ARRAY
17620: PUSH
17621: LD_VAR 0 6
17625: PUSH
17626: LD_INT 2
17628: ARRAY
17629: PUSH
17630: LD_INT 0
17632: PUSH
17633: LD_INT 0
17635: PUSH
17636: LD_INT 0
17638: PUSH
17639: LD_INT 0
17641: PUSH
17642: EMPTY
17643: LIST
17644: LIST
17645: LIST
17646: LIST
17647: LIST
17648: LIST
17649: LIST
17650: PUSH
17651: EMPTY
17652: LIST
17653: PPUSH
17654: CALL_OW 447
17658: GO 17601
17660: POP
17661: POP
// end ;
17662: LD_VAR 0 5
17666: RET
