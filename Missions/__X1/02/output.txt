// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 46 0 0
// CreateNature ;
  19: CALL 537 0 0
// PrepareAmericans ;
  23: CALL 834 0 0
// PrepareArabian ;
  27: CALL 11684 0 0
// if debug then
  31: LD_EXP 1
  35: IFFALSE 41
// DebugMode ;
  37: CALL 218 0 0
// Action ;
  41: CALL 4691 0 0
// end ;
  45: END
// export debug , prefix , missionStart , aviradzeSpotted , deltaSpotted , spottedBeforeRadio , sciSpotted , aviradzeQuestDone , sciCounterKill , usAlert , usActiveDefend , gladstoneEscaped , timeUntilFarmer , attackDeltaAllowed , trickyMove , usPatrol , trap , lostCounter ; function Init ; begin
  46: LD_INT 0
  48: PPUSH
// debug := false ;
  49: LD_ADDR_EXP 1
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// missionStart := false ;
  57: LD_ADDR_EXP 3
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// aviradzeSpotted := false ;
  65: LD_ADDR_EXP 4
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// deltaSpotted := false ;
  73: LD_ADDR_EXP 5
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// sciSpotted := false ;
  81: LD_ADDR_EXP 7
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// sciCounterKill := 0 ;
  89: LD_ADDR_EXP 9
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// aviradzeQuestDone := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// attackDeltaAllowed := false ;
 105: LD_ADDR_EXP 14
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usAlert := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// usActiveDefend := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// usPatrol := [ ] ;
 129: LD_ADDR_EXP 16
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// timeUntilFarmer := [ 40 40$00 , 30 30$00 , 20 20$00 , 15 15$00 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 13
 140: PUSH
 141: LD_INT 84000
 143: PUSH
 144: LD_INT 63000
 146: PUSH
 147: LD_INT 42000
 149: PUSH
 150: LD_INT 31500
 152: PUSH
 153: EMPTY
 154: LIST
 155: LIST
 156: LIST
 157: LIST
 158: PUSH
 159: LD_OWVAR 67
 163: ARRAY
 164: ST_TO_ADDR
// trickyMove := false ;
 165: LD_ADDR_EXP 15
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// gladstoneEscaped := false ;
 173: LD_ADDR_EXP 12
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// prefix := 01_ ;
 181: LD_ADDR_EXP 2
 185: PUSH
 186: LD_STRING 01_
 188: ST_TO_ADDR
// trap := 0 ;
 189: LD_ADDR_EXP 17
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// lostCounter := false ;
 197: LD_ADDR_EXP 18
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// spottedBeforeRadio := false ;
 205: LD_ADDR_EXP 6
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// end ;
 213: LD_VAR 0 1
 217: RET
// function DebugMode ; begin
 218: LD_INT 0
 220: PPUSH
// FogOff ( 1 ) ;
 221: LD_INT 1
 223: PPUSH
 224: CALL_OW 344
// Difficulty := 2 ;
 228: LD_ADDR_OWVAR 67
 232: PUSH
 233: LD_INT 2
 235: ST_TO_ADDR
// end ; end_of_file
 236: LD_VAR 0 1
 240: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 241: LD_INT 0
 243: PPUSH
// uc_side := side ;
 244: LD_ADDR_OWVAR 20
 248: PUSH
 249: LD_VAR 0 1
 253: ST_TO_ADDR
// uc_nation := nation ;
 254: LD_ADDR_OWVAR 21
 258: PUSH
 259: LD_VAR 0 2
 263: ST_TO_ADDR
// vc_chassis := chassis ;
 264: LD_ADDR_OWVAR 37
 268: PUSH
 269: LD_VAR 0 3
 273: ST_TO_ADDR
// vc_engine := engine ;
 274: LD_ADDR_OWVAR 39
 278: PUSH
 279: LD_VAR 0 4
 283: ST_TO_ADDR
// vc_control := control ;
 284: LD_ADDR_OWVAR 38
 288: PUSH
 289: LD_VAR 0 5
 293: ST_TO_ADDR
// vc_weapon := weapon ;
 294: LD_ADDR_OWVAR 40
 298: PUSH
 299: LD_VAR 0 6
 303: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 304: LD_ADDR_OWVAR 41
 308: PUSH
 309: LD_VAR 0 7
 313: ST_TO_ADDR
// result := CreateVehicle ;
 314: LD_ADDR_VAR 0 8
 318: PUSH
 319: CALL_OW 45
 323: ST_TO_ADDR
// end ;
 324: LD_VAR 0 8
 328: RET
// export function SayX ( units , ident ) ; var i ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
// result := false ;
 333: LD_ADDR_VAR 0 3
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// if not units then
 341: LD_VAR 0 1
 345: NOT
 346: IFFALSE 350
// exit ;
 348: GO 404
// for i in units do
 350: LD_ADDR_VAR 0 4
 354: PUSH
 355: LD_VAR 0 1
 359: PUSH
 360: FOR_IN
 361: IFFALSE 402
// if IsOk ( i ) then
 363: LD_VAR 0 4
 367: PPUSH
 368: CALL_OW 302
 372: IFFALSE 400
// begin Say ( i , ident ) ;
 374: LD_VAR 0 4
 378: PPUSH
 379: LD_VAR 0 2
 383: PPUSH
 384: CALL_OW 88
// result := i ;
 388: LD_ADDR_VAR 0 3
 392: PUSH
 393: LD_VAR 0 4
 397: ST_TO_ADDR
// break ;
 398: GO 402
// end ;
 400: GO 360
 402: POP
 403: POP
// end ;
 404: LD_VAR 0 3
 408: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 409: LD_INT 0
 411: PPUSH
 412: PPUSH
// InitUc ;
 413: CALL_OW 18
// InitHc ;
 417: CALL_OW 19
// uc_side := 0 ;
 421: LD_ADDR_OWVAR 20
 425: PUSH
 426: LD_INT 0
 428: ST_TO_ADDR
// uc_nation := 0 ;
 429: LD_ADDR_OWVAR 21
 433: PUSH
 434: LD_INT 0
 436: ST_TO_ADDR
// for i = 1 to amount do
 437: LD_ADDR_VAR 0 4
 441: PUSH
 442: DOUBLE
 443: LD_INT 1
 445: DEC
 446: ST_TO_ADDR
 447: LD_VAR 0 2
 451: PUSH
 452: FOR_TO
 453: IFFALSE 526
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 455: LD_ADDR_OWVAR 29
 459: PUSH
 460: LD_INT 9
 462: PPUSH
 463: LD_INT 12
 465: PPUSH
 466: CALL_OW 12
 470: PUSH
 471: LD_INT 9
 473: PPUSH
 474: LD_INT 12
 476: PPUSH
 477: CALL_OW 12
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: ST_TO_ADDR
// hc_agressivity := 0 ;
 486: LD_ADDR_OWVAR 35
 490: PUSH
 491: LD_INT 0
 493: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 494: LD_INT 0
 496: PPUSH
 497: LD_INT 12
 499: PPUSH
 500: LD_INT 1
 502: PPUSH
 503: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 507: CALL_OW 44
 511: PPUSH
 512: LD_VAR 0 1
 516: PPUSH
 517: LD_INT 0
 519: PPUSH
 520: CALL_OW 49
// end ;
 524: GO 452
 526: POP
 527: POP
// InitHc ;
 528: CALL_OW 19
// end ;
 532: LD_VAR 0 3
 536: RET
// export function CreateNature ; var i ; begin
 537: LD_INT 0
 539: PPUSH
 540: PPUSH
// SpawnApeman ( forest , 9 ) ;
 541: LD_INT 1
 543: PPUSH
 544: LD_INT 9
 546: PPUSH
 547: CALL 409 0 2
// for i := 1 to 4 do
 551: LD_ADDR_VAR 0 2
 555: PUSH
 556: DOUBLE
 557: LD_INT 1
 559: DEC
 560: ST_TO_ADDR
 561: LD_INT 4
 563: PUSH
 564: FOR_TO
 565: IFFALSE 600
// begin hc_class := 21 ;
 567: LD_ADDR_OWVAR 28
 571: PUSH
 572: LD_INT 21
 574: ST_TO_ADDR
// hc_gallery :=  ;
 575: LD_ADDR_OWVAR 33
 579: PUSH
 580: LD_STRING 
 582: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 583: CALL_OW 44
 587: PPUSH
 588: LD_INT 1
 590: PPUSH
 591: LD_INT 0
 593: PPUSH
 594: CALL_OW 49
// end ;
 598: GO 564
 600: POP
 601: POP
// for i := 1 to 2 do
 602: LD_ADDR_VAR 0 2
 606: PUSH
 607: DOUBLE
 608: LD_INT 1
 610: DEC
 611: ST_TO_ADDR
 612: LD_INT 2
 614: PUSH
 615: FOR_TO
 616: IFFALSE 651
// begin hc_class := 18 ;
 618: LD_ADDR_OWVAR 28
 622: PUSH
 623: LD_INT 18
 625: ST_TO_ADDR
// hc_gallery :=  ;
 626: LD_ADDR_OWVAR 33
 630: PUSH
 631: LD_STRING 
 633: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 634: CALL_OW 44
 638: PPUSH
 639: LD_INT 1
 641: PPUSH
 642: LD_INT 0
 644: PPUSH
 645: CALL_OW 49
// end ;
 649: GO 615
 651: POP
 652: POP
// for i := 1 to 3 do
 653: LD_ADDR_VAR 0 2
 657: PUSH
 658: DOUBLE
 659: LD_INT 1
 661: DEC
 662: ST_TO_ADDR
 663: LD_INT 3
 665: PUSH
 666: FOR_TO
 667: IFFALSE 702
// begin hc_class := 13 ;
 669: LD_ADDR_OWVAR 28
 673: PUSH
 674: LD_INT 13
 676: ST_TO_ADDR
// hc_gallery :=  ;
 677: LD_ADDR_OWVAR 33
 681: PUSH
 682: LD_STRING 
 684: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 685: CALL_OW 44
 689: PPUSH
 690: LD_INT 1
 692: PPUSH
 693: LD_INT 0
 695: PPUSH
 696: CALL_OW 49
// end ;
 700: GO 666
 702: POP
 703: POP
// for i := 1 to 4 do
 704: LD_ADDR_VAR 0 2
 708: PUSH
 709: DOUBLE
 710: LD_INT 1
 712: DEC
 713: ST_TO_ADDR
 714: LD_INT 4
 716: PUSH
 717: FOR_TO
 718: IFFALSE 753
// begin hc_class := class_frog ;
 720: LD_ADDR_OWVAR 28
 724: PUSH
 725: LD_INT 19
 727: ST_TO_ADDR
// hc_gallery :=  ;
 728: LD_ADDR_OWVAR 33
 732: PUSH
 733: LD_STRING 
 735: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 736: CALL_OW 44
 740: PPUSH
 741: LD_INT 8
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: CALL_OW 49
// end ;
 751: GO 717
 753: POP
 754: POP
// end ;
 755: LD_VAR 0 1
 759: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 760: LD_INT 0
 762: PPUSH
 763: PPUSH
 764: PPUSH
// if not observer or not unit then
 765: LD_VAR 0 1
 769: NOT
 770: PUSH
 771: LD_VAR 0 2
 775: NOT
 776: OR
 777: IFFALSE 781
// exit ;
 779: GO 829
// if not See ( GetSide ( observer ) , unit ) then
 781: LD_VAR 0 1
 785: PPUSH
 786: CALL_OW 255
 790: PPUSH
 791: LD_VAR 0 2
 795: PPUSH
 796: CALL_OW 292
 800: NOT
 801: IFFALSE 805
// exit ;
 803: GO 829
// result := GetDistUnits ( observer , unit ) < 12 ;
 805: LD_ADDR_VAR 0 3
 809: PUSH
 810: LD_VAR 0 1
 814: PPUSH
 815: LD_VAR 0 2
 819: PPUSH
 820: CALL_OW 296
 824: PUSH
 825: LD_INT 12
 827: LESS
 828: ST_TO_ADDR
// end ; end_of_file
 829: LD_VAR 0 3
 833: RET
// export Gladstone , Lynch ; export usForces , usSci ; export function PrepareAmericans ; var i , un , veh , tmp , arm ; begin
 834: LD_INT 0
 836: PPUSH
 837: PPUSH
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
// usForces := [ ] ;
 842: LD_ADDR_EXP 21
 846: PUSH
 847: EMPTY
 848: ST_TO_ADDR
// usSci := [ ] ;
 849: LD_ADDR_EXP 22
 853: PUSH
 854: EMPTY
 855: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
 856: LD_INT 1
 858: PPUSH
 859: LD_STRING Delta
 861: PPUSH
 862: CALL_OW 500
// SetResourceType ( GetBase ( Delta ) , mat_cans , 400 ) ;
 866: LD_INT 1
 868: PPUSH
 869: CALL_OW 274
 873: PPUSH
 874: LD_INT 1
 876: PPUSH
 877: LD_INT 400
 879: PPUSH
 880: CALL_OW 277
// SetResourceType ( GetBase ( Delta ) , mat_oil , 80 ) ;
 884: LD_INT 1
 886: PPUSH
 887: CALL_OW 274
 891: PPUSH
 892: LD_INT 2
 894: PPUSH
 895: LD_INT 80
 897: PPUSH
 898: CALL_OW 277
// uc_side := 1 ;
 902: LD_ADDR_OWVAR 20
 906: PUSH
 907: LD_INT 1
 909: ST_TO_ADDR
// uc_nation := 1 ;
 910: LD_ADDR_OWVAR 21
 914: PUSH
 915: LD_INT 1
 917: ST_TO_ADDR
// InitHc ;
 918: CALL_OW 19
// hc_importance := 0 ;
 922: LD_ADDR_OWVAR 32
 926: PUSH
 927: LD_INT 0
 929: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
 930: LD_ADDR_EXP 20
 934: PUSH
 935: LD_STRING Lynch
 937: PPUSH
 938: LD_INT 0
 940: PPUSH
 941: LD_STRING 
 943: PPUSH
 944: CALL 32698 0 3
 948: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false ,  ) ;
 949: LD_ADDR_EXP 19
 953: PUSH
 954: LD_STRING Gladstone
 956: PPUSH
 957: LD_INT 0
 959: PPUSH
 960: LD_STRING 
 962: PPUSH
 963: CALL 32698 0 3
 967: ST_TO_ADDR
// PlaceHumanInUnit ( Lynch , Delta ) ;
 968: LD_EXP 20
 972: PPUSH
 973: LD_INT 1
 975: PPUSH
 976: CALL_OW 52
// PlaceHumanInUnit ( Gladstone , usLab ) ;
 980: LD_EXP 19
 984: PPUSH
 985: LD_INT 3
 987: PPUSH
 988: CALL_OW 52
// for i := 1 to [ 1 , 2 , 2 , 2 ] [ Difficulty ] do
 992: LD_ADDR_VAR 0 2
 996: PUSH
 997: DOUBLE
 998: LD_INT 1
1000: DEC
1001: ST_TO_ADDR
1002: LD_INT 1
1004: PUSH
1005: LD_INT 2
1007: PUSH
1008: LD_INT 2
1010: PUSH
1011: LD_INT 2
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: LIST
1018: LIST
1019: PUSH
1020: LD_OWVAR 67
1024: ARRAY
1025: PUSH
1026: FOR_TO
1027: IFFALSE 1077
// begin PrepareHuman ( false , 2 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
1029: LD_INT 0
1031: PPUSH
1032: LD_INT 2
1034: PPUSH
1035: LD_INT 1
1037: PUSH
1038: LD_INT 2
1040: PUSH
1041: LD_INT 2
1043: PUSH
1044: LD_INT 3
1046: PUSH
1047: EMPTY
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: LD_OWVAR 67
1057: ARRAY
1058: PPUSH
1059: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , Delta ) ;
1063: CALL_OW 44
1067: PPUSH
1068: LD_INT 1
1070: PPUSH
1071: CALL_OW 52
// end ;
1075: GO 1026
1077: POP
1078: POP
// for i := 1 to 7 - Difficulty do
1079: LD_ADDR_VAR 0 2
1083: PUSH
1084: DOUBLE
1085: LD_INT 1
1087: DEC
1088: ST_TO_ADDR
1089: LD_INT 7
1091: PUSH
1092: LD_OWVAR 67
1096: MINUS
1097: PUSH
1098: FOR_TO
1099: IFFALSE 1188
// begin PrepareHuman ( false , 4 , [ 1 , 2 , 2 , 2 ] [ Difficulty ] ) ;
1101: LD_INT 0
1103: PPUSH
1104: LD_INT 4
1106: PPUSH
1107: LD_INT 1
1109: PUSH
1110: LD_INT 2
1112: PUSH
1113: LD_INT 2
1115: PUSH
1116: LD_INT 2
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: LIST
1123: LIST
1124: PUSH
1125: LD_OWVAR 67
1129: ARRAY
1130: PPUSH
1131: CALL_OW 380
// un := CreateHuman ;
1135: LD_ADDR_VAR 0 3
1139: PUSH
1140: CALL_OW 44
1144: ST_TO_ADDR
// PlaceHumanInUnit ( un , usLab ) ;
1145: LD_VAR 0 3
1149: PPUSH
1150: LD_INT 3
1152: PPUSH
1153: CALL_OW 52
// usSci := Replace ( usSci , usSci + 1 , un ) ;
1157: LD_ADDR_EXP 22
1161: PUSH
1162: LD_EXP 22
1166: PPUSH
1167: LD_EXP 22
1171: PUSH
1172: LD_INT 1
1174: PLUS
1175: PPUSH
1176: LD_VAR 0 3
1180: PPUSH
1181: CALL_OW 1
1185: ST_TO_ADDR
// end ;
1186: GO 1098
1188: POP
1189: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
1190: LD_ADDR_VAR 0 6
1194: PUSH
1195: LD_INT 22
1197: PUSH
1198: LD_INT 1
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: PUSH
1205: LD_INT 30
1207: PUSH
1208: LD_INT 4
1210: PUSH
1211: EMPTY
1212: LIST
1213: LIST
1214: PUSH
1215: EMPTY
1216: LIST
1217: LIST
1218: PPUSH
1219: CALL_OW 69
1223: ST_TO_ADDR
// for i := 1 to 3 + [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
1224: LD_ADDR_VAR 0 2
1228: PUSH
1229: DOUBLE
1230: LD_INT 1
1232: DEC
1233: ST_TO_ADDR
1234: LD_INT 3
1236: PUSH
1237: LD_INT 1
1239: PUSH
1240: LD_INT 2
1242: PUSH
1243: LD_INT 2
1245: PUSH
1246: LD_INT 3
1248: PUSH
1249: EMPTY
1250: LIST
1251: LIST
1252: LIST
1253: LIST
1254: PUSH
1255: LD_OWVAR 67
1259: ARRAY
1260: PLUS
1261: PUSH
1262: FOR_TO
1263: IFFALSE 1345
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
1265: LD_INT 0
1267: PPUSH
1268: LD_INT 1
1270: PPUSH
1271: LD_INT 1
1273: PUSH
1274: LD_INT 2
1276: PUSH
1277: LD_INT 3
1279: PUSH
1280: LD_INT 3
1282: PUSH
1283: EMPTY
1284: LIST
1285: LIST
1286: LIST
1287: LIST
1288: PUSH
1289: LD_OWVAR 67
1293: ARRAY
1294: PPUSH
1295: CALL_OW 380
// un := CreateHuman ;
1299: LD_ADDR_VAR 0 3
1303: PUSH
1304: CALL_OW 44
1308: ST_TO_ADDR
// usForces := usForces ^ un ;
1309: LD_ADDR_EXP 21
1313: PUSH
1314: LD_EXP 21
1318: PUSH
1319: LD_VAR 0 3
1323: ADD
1324: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm [ 1 ] ) ;
1325: LD_VAR 0 3
1329: PPUSH
1330: LD_VAR 0 6
1334: PUSH
1335: LD_INT 1
1337: ARRAY
1338: PPUSH
1339: CALL_OW 52
// end ;
1343: GO 1262
1345: POP
1346: POP
// if Difficulty > 1 then
1347: LD_OWVAR 67
1351: PUSH
1352: LD_INT 1
1354: GREATER
1355: IFFALSE 1454
// begin for i := 1 to Difficulty do
1357: LD_ADDR_VAR 0 2
1361: PUSH
1362: DOUBLE
1363: LD_INT 1
1365: DEC
1366: ST_TO_ADDR
1367: LD_OWVAR 67
1371: PUSH
1372: FOR_TO
1373: IFFALSE 1452
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
1375: LD_INT 0
1377: PPUSH
1378: LD_INT 1
1380: PPUSH
1381: LD_INT 1
1383: PUSH
1384: LD_INT 2
1386: PUSH
1387: LD_INT 2
1389: PUSH
1390: LD_INT 3
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: PUSH
1399: LD_OWVAR 67
1403: ARRAY
1404: PPUSH
1405: CALL_OW 380
// un := CreateHuman ;
1409: LD_ADDR_VAR 0 3
1413: PUSH
1414: CALL_OW 44
1418: ST_TO_ADDR
// usForces := usForces ^ un ;
1419: LD_ADDR_EXP 21
1423: PUSH
1424: LD_EXP 21
1428: PUSH
1429: LD_VAR 0 3
1433: ADD
1434: ST_TO_ADDR
// PlaceUnitArea ( un , usAdditionalDefenceArea , false ) ;
1435: LD_VAR 0 3
1439: PPUSH
1440: LD_INT 9
1442: PPUSH
1443: LD_INT 0
1445: PPUSH
1446: CALL_OW 49
// end ;
1450: GO 1372
1452: POP
1453: POP
// end ; PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 100 ) ;
1454: LD_INT 1
1456: PPUSH
1457: LD_INT 1
1459: PPUSH
1460: LD_INT 1
1462: PPUSH
1463: LD_INT 2
1465: PPUSH
1466: LD_INT 1
1468: PPUSH
1469: LD_INT 2
1471: PPUSH
1472: LD_INT 100
1474: PPUSH
1475: CALL 241 0 7
// veh := CreateVehicle ;
1479: LD_ADDR_VAR 0 4
1483: PUSH
1484: CALL_OW 45
1488: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1489: LD_VAR 0 4
1493: PPUSH
1494: LD_INT 2
1496: PPUSH
1497: CALL_OW 233
// PlaceUnitXY ( veh , 43 , 24 , false ) ;
1501: LD_VAR 0 4
1505: PPUSH
1506: LD_INT 43
1508: PPUSH
1509: LD_INT 24
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: CALL_OW 48
// end ;
1519: LD_VAR 0 1
1523: RET
// export function SendSciToForest ; var i , j , k , tmp , xy ; begin
1524: LD_INT 0
1526: PPUSH
1527: PPUSH
1528: PPUSH
1529: PPUSH
1530: PPUSH
1531: PPUSH
// if not usSci then
1532: LD_EXP 22
1536: NOT
1537: IFFALSE 1541
// exit ;
1539: GO 1715
// xy := AreaToList ( tameArea , 0 ) ;
1541: LD_ADDR_VAR 0 6
1545: PUSH
1546: LD_INT 5
1548: PPUSH
1549: LD_INT 0
1551: PPUSH
1552: CALL_OW 517
1556: ST_TO_ADDR
// for i in usSci do
1557: LD_ADDR_VAR 0 2
1561: PUSH
1562: LD_EXP 22
1566: PUSH
1567: FOR_IN
1568: IFFALSE 1713
// begin k := rand ( 1 , xy [ 1 ] ) ;
1570: LD_ADDR_VAR 0 4
1574: PUSH
1575: LD_INT 1
1577: PPUSH
1578: LD_VAR 0 6
1582: PUSH
1583: LD_INT 1
1585: ARRAY
1586: PPUSH
1587: CALL_OW 12
1591: ST_TO_ADDR
// ComExitBuilding ( i ) ;
1592: LD_VAR 0 2
1596: PPUSH
1597: CALL_OW 122
// AddComMoveXY ( i , xy [ 1 ] [ k ] , xy [ 2 ] [ k ] ) ;
1601: LD_VAR 0 2
1605: PPUSH
1606: LD_VAR 0 6
1610: PUSH
1611: LD_INT 1
1613: ARRAY
1614: PUSH
1615: LD_VAR 0 4
1619: ARRAY
1620: PPUSH
1621: LD_VAR 0 6
1625: PUSH
1626: LD_INT 2
1628: ARRAY
1629: PUSH
1630: LD_VAR 0 4
1634: ARRAY
1635: PPUSH
1636: CALL_OW 171
// for j := 1 to 2 do
1640: LD_ADDR_VAR 0 3
1644: PUSH
1645: DOUBLE
1646: LD_INT 1
1648: DEC
1649: ST_TO_ADDR
1650: LD_INT 2
1652: PUSH
1653: FOR_TO
1654: IFFALSE 1709
// begin tmp := Delete ( xy [ j ] , k ) ;
1656: LD_ADDR_VAR 0 5
1660: PUSH
1661: LD_VAR 0 6
1665: PUSH
1666: LD_VAR 0 3
1670: ARRAY
1671: PPUSH
1672: LD_VAR 0 4
1676: PPUSH
1677: CALL_OW 3
1681: ST_TO_ADDR
// xy := Replace ( xy , j , tmp ) ;
1682: LD_ADDR_VAR 0 6
1686: PUSH
1687: LD_VAR 0 6
1691: PPUSH
1692: LD_VAR 0 3
1696: PPUSH
1697: LD_VAR 0 5
1701: PPUSH
1702: CALL_OW 1
1706: ST_TO_ADDR
// end ;
1707: GO 1653
1709: POP
1710: POP
// end ;
1711: GO 1567
1713: POP
1714: POP
// end ;
1715: LD_VAR 0 1
1719: RET
// every 0 0$5 + 0 0$10 trigger aviradzeSpotted and usSci and not usAlert and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do var i , x , y , d , ape ;
1720: LD_EXP 4
1724: PUSH
1725: LD_EXP 22
1729: AND
1730: PUSH
1731: LD_EXP 10
1735: NOT
1736: AND
1737: PUSH
1738: LD_INT 22
1740: PUSH
1741: LD_INT 0
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: LD_INT 25
1750: PUSH
1751: LD_INT 12
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: PPUSH
1762: CALL_OW 69
1766: AND
1767: IFFALSE 2259
1769: GO 1771
1771: DISABLE
1772: LD_INT 0
1774: PPUSH
1775: PPUSH
1776: PPUSH
1777: PPUSH
1778: PPUSH
// begin enable ;
1779: ENABLE
// if UnitFilter ( usSci , [ f_or , [ f_hastask ] , [ f_inside ] ] ) then
1780: LD_EXP 22
1784: PPUSH
1785: LD_INT 2
1787: PUSH
1788: LD_INT 60
1790: PUSH
1791: EMPTY
1792: LIST
1793: PUSH
1794: LD_INT 54
1796: PUSH
1797: EMPTY
1798: LIST
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: LIST
1804: PPUSH
1805: CALL_OW 72
1809: IFFALSE 1813
// exit ;
1811: GO 2259
// for i in usSci do
1813: LD_ADDR_VAR 0 1
1817: PUSH
1818: LD_EXP 22
1822: PUSH
1823: FOR_IN
1824: IFFALSE 2257
// begin if not HasTask ( i ) and GetLives ( i ) = 1000 then
1826: LD_VAR 0 1
1830: PPUSH
1831: CALL_OW 314
1835: NOT
1836: PUSH
1837: LD_VAR 0 1
1841: PPUSH
1842: CALL_OW 256
1846: PUSH
1847: LD_INT 1000
1849: EQUAL
1850: AND
1851: IFFALSE 2058
// begin ape := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) , i ) ;
1853: LD_ADDR_VAR 0 5
1857: PUSH
1858: LD_INT 22
1860: PUSH
1861: LD_INT 0
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: LD_INT 25
1870: PUSH
1871: LD_INT 12
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: PPUSH
1882: CALL_OW 69
1886: PPUSH
1887: LD_VAR 0 1
1891: PPUSH
1892: CALL_OW 74
1896: ST_TO_ADDR
// if GetDistUnits ( i , ape ) < 10 then
1897: LD_VAR 0 1
1901: PPUSH
1902: LD_VAR 0 5
1906: PPUSH
1907: CALL_OW 296
1911: PUSH
1912: LD_INT 10
1914: LESS
1915: IFFALSE 1948
// ComTameXY ( i , GetX ( ape ) , GetY ( ape ) ) else
1917: LD_VAR 0 1
1921: PPUSH
1922: LD_VAR 0 5
1926: PPUSH
1927: CALL_OW 250
1931: PPUSH
1932: LD_VAR 0 5
1936: PPUSH
1937: CALL_OW 251
1941: PPUSH
1942: CALL_OW 131
1946: GO 2058
// begin d := rand ( 0 , 5 ) ;
1948: LD_ADDR_VAR 0 4
1952: PUSH
1953: LD_INT 0
1955: PPUSH
1956: LD_INT 5
1958: PPUSH
1959: CALL_OW 12
1963: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 3 ) ;
1964: LD_ADDR_VAR 0 2
1968: PUSH
1969: LD_VAR 0 1
1973: PPUSH
1974: CALL_OW 250
1978: PPUSH
1979: LD_VAR 0 4
1983: PPUSH
1984: LD_INT 3
1986: PPUSH
1987: CALL_OW 272
1991: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 3 ) ;
1992: LD_ADDR_VAR 0 3
1996: PUSH
1997: LD_VAR 0 1
2001: PPUSH
2002: CALL_OW 251
2006: PPUSH
2007: LD_VAR 0 4
2011: PPUSH
2012: LD_INT 3
2014: PPUSH
2015: CALL_OW 273
2019: ST_TO_ADDR
// if not ValidHex ( x , y ) then
2020: LD_VAR 0 2
2024: PPUSH
2025: LD_VAR 0 3
2029: PPUSH
2030: CALL_OW 488
2034: NOT
2035: IFFALSE 2039
// continue ;
2037: GO 1823
// ComMoveXY ( i , x , y ) ;
2039: LD_VAR 0 1
2043: PPUSH
2044: LD_VAR 0 2
2048: PPUSH
2049: LD_VAR 0 3
2053: PPUSH
2054: CALL_OW 111
// end ; end ; if GetLives ( i ) < 900 and GetDistUnitXY ( i , 37 , 23 ) > 10 then
2058: LD_VAR 0 1
2062: PPUSH
2063: CALL_OW 256
2067: PUSH
2068: LD_INT 900
2070: LESS
2071: PUSH
2072: LD_VAR 0 1
2076: PPUSH
2077: LD_INT 37
2079: PPUSH
2080: LD_INT 23
2082: PPUSH
2083: CALL_OW 297
2087: PUSH
2088: LD_INT 10
2090: GREATER
2091: AND
2092: IFFALSE 2168
// begin if IsOk ( Gladstone ) and IsInUnit ( Gladstone ) then
2094: LD_EXP 19
2098: PPUSH
2099: CALL_OW 302
2103: PUSH
2104: LD_EXP 19
2108: PPUSH
2109: CALL_OW 310
2113: AND
2114: IFFALSE 2125
// ComExitBuilding ( Gladstone ) ;
2116: LD_EXP 19
2120: PPUSH
2121: CALL_OW 122
// AddComHeal ( Gladstone , i ) ;
2125: LD_EXP 19
2129: PPUSH
2130: LD_VAR 0 1
2134: PPUSH
2135: CALL_OW 188
// AddComEnterUnit ( Gladstone , usLab ) ;
2139: LD_EXP 19
2143: PPUSH
2144: LD_INT 3
2146: PPUSH
2147: CALL_OW 180
// ComMoveXY ( i , 37 , 23 ) ;
2151: LD_VAR 0 1
2155: PPUSH
2156: LD_INT 37
2158: PPUSH
2159: LD_INT 23
2161: PPUSH
2162: CALL_OW 111
// end else
2166: GO 2255
// if GetLives ( i ) = 1000 then
2168: LD_VAR 0 1
2172: PPUSH
2173: CALL_OW 256
2177: PUSH
2178: LD_INT 1000
2180: EQUAL
2181: IFFALSE 2255
// begin if SideShoot ( i ) = 2 then
2183: LD_VAR 0 1
2187: PPUSH
2188: CALL_OW 503
2192: PUSH
2193: LD_INT 2
2195: EQUAL
2196: IFFALSE 2243
// begin if not usAlert then
2198: LD_EXP 10
2202: NOT
2203: IFFALSE 2213
// usAlert := true ;
2205: LD_ADDR_EXP 10
2209: PUSH
2210: LD_INT 1
2212: ST_TO_ADDR
// AddComEnterUnit ( i , usLab ) ;
2213: LD_VAR 0 1
2217: PPUSH
2218: LD_INT 3
2220: PPUSH
2221: CALL_OW 180
// usSci := usSci diff i ;
2225: LD_ADDR_EXP 22
2229: PUSH
2230: LD_EXP 22
2234: PUSH
2235: LD_VAR 0 1
2239: DIFF
2240: ST_TO_ADDR
// end else
2241: GO 2255
// ComMoveToArea ( i , tameArea ) ;
2243: LD_VAR 0 1
2247: PPUSH
2248: LD_INT 5
2250: PPUSH
2251: CALL_OW 113
// end ; end ;
2255: GO 1823
2257: POP
2258: POP
// end ;
2259: PPOPN 5
2261: END
// every 0 0$1 trigger not usAlert and ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 999 ] ] ] ) or FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) ) do
2262: LD_EXP 10
2266: NOT
2267: PUSH
2268: LD_INT 22
2270: PUSH
2271: LD_INT 1
2273: PUSH
2274: EMPTY
2275: LIST
2276: LIST
2277: PUSH
2278: LD_INT 21
2280: PUSH
2281: LD_INT 3
2283: PUSH
2284: EMPTY
2285: LIST
2286: LIST
2287: PUSH
2288: LD_INT 3
2290: PUSH
2291: LD_INT 57
2293: PUSH
2294: EMPTY
2295: LIST
2296: PUSH
2297: EMPTY
2298: LIST
2299: LIST
2300: PUSH
2301: LD_INT 3
2303: PUSH
2304: LD_INT 24
2306: PUSH
2307: LD_INT 999
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: PUSH
2314: EMPTY
2315: LIST
2316: LIST
2317: PUSH
2318: EMPTY
2319: LIST
2320: LIST
2321: LIST
2322: LIST
2323: PPUSH
2324: CALL_OW 69
2328: PUSH
2329: LD_INT 7
2331: PPUSH
2332: LD_INT 22
2334: PUSH
2335: LD_INT 2
2337: PUSH
2338: EMPTY
2339: LIST
2340: LIST
2341: PPUSH
2342: CALL_OW 70
2346: OR
2347: AND
2348: IFFALSE 2361
2350: GO 2352
2352: DISABLE
// usAlert := true ;
2353: LD_ADDR_EXP 10
2357: PUSH
2358: LD_INT 1
2360: ST_TO_ADDR
2361: END
// every 0 0$1 trigger usAlert do var i , b , arm ;
2362: LD_EXP 10
2366: IFFALSE 2713
2368: GO 2370
2370: DISABLE
2371: LD_INT 0
2373: PPUSH
2374: PPUSH
2375: PPUSH
// begin usActiveDefend := true ;
2376: LD_ADDR_EXP 11
2380: PUSH
2381: LD_INT 1
2383: ST_TO_ADDR
// if not usForces then
2384: LD_EXP 21
2388: NOT
2389: IFFALSE 2393
// exit ;
2391: GO 2713
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
2393: LD_ADDR_VAR 0 3
2397: PUSH
2398: LD_INT 22
2400: PUSH
2401: LD_INT 1
2403: PUSH
2404: EMPTY
2405: LIST
2406: LIST
2407: PUSH
2408: LD_INT 30
2410: PUSH
2411: LD_INT 4
2413: PUSH
2414: EMPTY
2415: LIST
2416: LIST
2417: PUSH
2418: EMPTY
2419: LIST
2420: LIST
2421: PPUSH
2422: CALL_OW 69
2426: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
2427: LD_ADDR_VAR 0 2
2431: PUSH
2432: LD_INT 22
2434: PUSH
2435: LD_INT 1
2437: PUSH
2438: EMPTY
2439: LIST
2440: LIST
2441: PUSH
2442: LD_INT 30
2444: PUSH
2445: LD_INT 31
2447: PUSH
2448: EMPTY
2449: LIST
2450: LIST
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: PPUSH
2456: CALL_OW 69
2460: ST_TO_ADDR
// ComExitBuilding ( Lynch ) ;
2461: LD_EXP 20
2465: PPUSH
2466: CALL_OW 122
// AddComEnterUnit ( Lynch , arm [ 1 ] ) ;
2470: LD_EXP 20
2474: PPUSH
2475: LD_VAR 0 3
2479: PUSH
2480: LD_INT 1
2482: ARRAY
2483: PPUSH
2484: CALL_OW 180
// if IsOk ( Gladstone ) then
2488: LD_EXP 19
2492: PPUSH
2493: CALL_OW 302
2497: IFFALSE 2538
// begin ComExitBuilding ( Gladstone ) ;
2499: LD_EXP 19
2503: PPUSH
2504: CALL_OW 122
// AddComEnterUnit ( Gladstone , arm [ 1 ] ) ;
2508: LD_EXP 19
2512: PPUSH
2513: LD_VAR 0 3
2517: PUSH
2518: LD_INT 1
2520: ARRAY
2521: PPUSH
2522: CALL_OW 180
// AddComChangeProfession ( Gladstone , class_soldier ) ;
2526: LD_EXP 19
2530: PPUSH
2531: LD_INT 1
2533: PPUSH
2534: CALL_OW 183
// end ; ComExitBuilding ( usForces [ 1 ] ) ;
2538: LD_EXP 21
2542: PUSH
2543: LD_INT 1
2545: ARRAY
2546: PPUSH
2547: CALL_OW 122
// AddComEnterUnit ( usForces [ 1 ] , b [ 1 ] ) ;
2551: LD_EXP 21
2555: PUSH
2556: LD_INT 1
2558: ARRAY
2559: PPUSH
2560: LD_VAR 0 2
2564: PUSH
2565: LD_INT 1
2567: ARRAY
2568: PPUSH
2569: CALL_OW 180
// ComExitBuilding ( usForces [ 2 ] ) ;
2573: LD_EXP 21
2577: PUSH
2578: LD_INT 2
2580: ARRAY
2581: PPUSH
2582: CALL_OW 122
// AddComEnterUnit ( usForces [ 2 ] , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
2586: LD_EXP 21
2590: PUSH
2591: LD_INT 2
2593: ARRAY
2594: PPUSH
2595: LD_INT 22
2597: PUSH
2598: LD_INT 1
2600: PUSH
2601: EMPTY
2602: LIST
2603: LIST
2604: PUSH
2605: LD_INT 30
2607: PUSH
2608: LD_INT 32
2610: PUSH
2611: EMPTY
2612: LIST
2613: LIST
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: PPUSH
2619: CALL_OW 69
2623: PUSH
2624: LD_INT 1
2626: ARRAY
2627: PPUSH
2628: CALL_OW 180
// if b > 1 and usForces > 2 then
2632: LD_VAR 0 2
2636: PUSH
2637: LD_INT 1
2639: GREATER
2640: PUSH
2641: LD_EXP 21
2645: PUSH
2646: LD_INT 2
2648: GREATER
2649: AND
2650: IFFALSE 2713
// begin repeat wait ( 0 0$1 ) ;
2652: LD_INT 35
2654: PPUSH
2655: CALL_OW 67
// until BuildingStatus ( b [ 2 ] ) <> bs_build ;
2659: LD_VAR 0 2
2663: PUSH
2664: LD_INT 2
2666: ARRAY
2667: PPUSH
2668: CALL_OW 461
2672: PUSH
2673: LD_INT 1
2675: NONEQUAL
2676: IFFALSE 2652
// ComExitBuilding ( usForces [ 3 ] ) ;
2678: LD_EXP 21
2682: PUSH
2683: LD_INT 3
2685: ARRAY
2686: PPUSH
2687: CALL_OW 122
// AddComEnterUnit ( usForces [ 3 ] , b [ 2 ] ) ;
2691: LD_EXP 21
2695: PUSH
2696: LD_INT 3
2698: ARRAY
2699: PPUSH
2700: LD_VAR 0 2
2704: PUSH
2705: LD_INT 2
2707: ARRAY
2708: PPUSH
2709: CALL_OW 180
// end ; end ;
2713: PPOPN 3
2715: END
// every 0 0$1 trigger GetLives ( usLab ) < 999 and usAlert and usForces do var i ;
2716: LD_INT 3
2718: PPUSH
2719: CALL_OW 256
2723: PUSH
2724: LD_INT 999
2726: LESS
2727: PUSH
2728: LD_EXP 10
2732: AND
2733: PUSH
2734: LD_EXP 21
2738: AND
2739: IFFALSE 2910
2741: GO 2743
2743: DISABLE
2744: LD_INT 0
2746: PPUSH
// begin for i in usForces do
2747: LD_ADDR_VAR 0 1
2751: PUSH
2752: LD_EXP 21
2756: PUSH
2757: FOR_IN
2758: IFFALSE 2797
// begin if IsInUnit ( i ) then
2760: LD_VAR 0 1
2764: PPUSH
2765: CALL_OW 310
2769: IFFALSE 2780
// ComExitBuilding ( i ) ;
2771: LD_VAR 0 1
2775: PPUSH
2776: CALL_OW 122
// AddComAgressiveMove ( i , 31 , 8 ) ;
2780: LD_VAR 0 1
2784: PPUSH
2785: LD_INT 31
2787: PPUSH
2788: LD_INT 8
2790: PPUSH
2791: CALL_OW 174
// end ;
2795: GO 2757
2797: POP
2798: POP
// wait ( 0 0$8 ) ;
2799: LD_INT 280
2801: PPUSH
2802: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) then
2806: LD_INT 22
2808: PUSH
2809: LD_INT 2
2811: PUSH
2812: EMPTY
2813: LIST
2814: LIST
2815: PUSH
2816: LD_INT 91
2818: PUSH
2819: LD_INT 3
2821: PUSH
2822: LD_INT 14
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: LIST
2829: PUSH
2830: EMPTY
2831: LIST
2832: LIST
2833: PPUSH
2834: CALL_OW 69
2838: IFFALSE 2888
// ComAttackUnit ( usForces , FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) [ 1 ] ) else
2840: LD_EXP 21
2844: PPUSH
2845: LD_INT 22
2847: PUSH
2848: LD_INT 2
2850: PUSH
2851: EMPTY
2852: LIST
2853: LIST
2854: PUSH
2855: LD_INT 91
2857: PUSH
2858: LD_INT 3
2860: PUSH
2861: LD_INT 14
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: LIST
2868: PUSH
2869: EMPTY
2870: LIST
2871: LIST
2872: PPUSH
2873: CALL_OW 69
2877: PUSH
2878: LD_INT 1
2880: ARRAY
2881: PPUSH
2882: CALL_OW 115
2886: GO 2910
// begin wait ( 0 0$20 ) ;
2888: LD_INT 700
2890: PPUSH
2891: CALL_OW 67
// AddComMoveXY ( usForces , 39 , 19 ) ;
2895: LD_EXP 21
2899: PPUSH
2900: LD_INT 39
2902: PPUSH
2903: LD_INT 19
2905: PPUSH
2906: CALL_OW 171
// end ; end ;
2910: PPOPN 1
2912: END
// every 0 0$3 trigger ( GetDistUnits ( Heike , Delta ) < 10 or GetLives ( usLab ) < 999 ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do var tmp , veh ;
2913: LD_EXP 23
2917: PPUSH
2918: LD_INT 1
2920: PPUSH
2921: CALL_OW 296
2925: PUSH
2926: LD_INT 10
2928: LESS
2929: PUSH
2930: LD_INT 3
2932: PPUSH
2933: CALL_OW 256
2937: PUSH
2938: LD_INT 999
2940: LESS
2941: OR
2942: PUSH
2943: LD_INT 22
2945: PUSH
2946: LD_INT 1
2948: PUSH
2949: EMPTY
2950: LIST
2951: LIST
2952: PUSH
2953: LD_INT 25
2955: PUSH
2956: LD_INT 2
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: PPUSH
2967: CALL_OW 69
2971: AND
2972: IFFALSE 3086
2974: GO 2976
2976: DISABLE
2977: LD_INT 0
2979: PPUSH
2980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
2981: LD_ADDR_VAR 0 1
2985: PUSH
2986: LD_INT 22
2988: PUSH
2989: LD_INT 1
2991: PUSH
2992: EMPTY
2993: LIST
2994: LIST
2995: PUSH
2996: LD_INT 25
2998: PUSH
2999: LD_INT 2
3001: PUSH
3002: EMPTY
3003: LIST
3004: LIST
3005: PUSH
3006: EMPTY
3007: LIST
3008: LIST
3009: PPUSH
3010: CALL_OW 69
3014: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3015: LD_ADDR_VAR 0 2
3019: PUSH
3020: LD_INT 22
3022: PUSH
3023: LD_INT 1
3025: PUSH
3026: EMPTY
3027: LIST
3028: LIST
3029: PUSH
3030: LD_INT 21
3032: PUSH
3033: LD_INT 2
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: PUSH
3040: LD_INT 58
3042: PUSH
3043: EMPTY
3044: LIST
3045: PUSH
3046: EMPTY
3047: LIST
3048: LIST
3049: LIST
3050: PPUSH
3051: CALL_OW 69
3055: ST_TO_ADDR
// if not tmp then
3056: LD_VAR 0 1
3060: NOT
3061: IFFALSE 3065
// exit ;
3063: GO 3086
// ComExitBuilding ( tmp ) ;
3065: LD_VAR 0 1
3069: PPUSH
3070: CALL_OW 122
// AddComDismantle ( tmp , usLab ) ;
3074: LD_VAR 0 1
3078: PPUSH
3079: LD_INT 3
3081: PPUSH
3082: CALL_OW 227
// end ;
3086: PPOPN 2
3088: END
// every 0 0$1 trigger usAlert and FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) do var i , tmp ;
3089: LD_EXP 10
3093: PUSH
3094: LD_INT 7
3096: PPUSH
3097: LD_INT 22
3099: PUSH
3100: LD_INT 1
3102: PUSH
3103: EMPTY
3104: LIST
3105: LIST
3106: PUSH
3107: LD_INT 21
3109: PUSH
3110: LD_INT 1
3112: PUSH
3113: EMPTY
3114: LIST
3115: LIST
3116: PUSH
3117: LD_INT 3
3119: PUSH
3120: LD_INT 24
3122: PUSH
3123: LD_INT 600
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: PUSH
3130: EMPTY
3131: LIST
3132: LIST
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: LIST
3138: PPUSH
3139: CALL_OW 70
3143: AND
3144: IFFALSE 3272
3146: GO 3148
3148: DISABLE
3149: LD_INT 0
3151: PPUSH
3152: PPUSH
// begin enable ;
3153: ENABLE
// tmp := FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) ;
3154: LD_ADDR_VAR 0 2
3158: PUSH
3159: LD_INT 7
3161: PPUSH
3162: LD_INT 22
3164: PUSH
3165: LD_INT 1
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: PUSH
3172: LD_INT 21
3174: PUSH
3175: LD_INT 1
3177: PUSH
3178: EMPTY
3179: LIST
3180: LIST
3181: PUSH
3182: LD_INT 3
3184: PUSH
3185: LD_INT 24
3187: PUSH
3188: LD_INT 600
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: LIST
3203: PPUSH
3204: CALL_OW 70
3208: ST_TO_ADDR
// if not tmp then
3209: LD_VAR 0 2
3213: NOT
3214: IFFALSE 3218
// exit ;
3216: GO 3272
// for i in tmp do
3218: LD_ADDR_VAR 0 1
3222: PUSH
3223: LD_VAR 0 2
3227: PUSH
3228: FOR_IN
3229: IFFALSE 3270
// if IsInUnit ( i ) then
3231: LD_VAR 0 1
3235: PPUSH
3236: CALL_OW 310
3240: IFFALSE 3253
// ComExitBuilding ( i ) else
3242: LD_VAR 0 1
3246: PPUSH
3247: CALL_OW 122
3251: GO 3268
// ComMoveXY ( i , 48 , 74 ) ;
3253: LD_VAR 0 1
3257: PPUSH
3258: LD_INT 48
3260: PPUSH
3261: LD_INT 74
3263: PPUSH
3264: CALL_OW 111
3268: GO 3228
3270: POP
3271: POP
// end ;
3272: PPOPN 2
3274: END
// every 12 12$00 do var i , un , tmp ;
3275: GO 3277
3277: DISABLE
3278: LD_INT 0
3280: PPUSH
3281: PPUSH
3282: PPUSH
// begin tmp := [ ] ;
3283: LD_ADDR_VAR 0 3
3287: PUSH
3288: EMPTY
3289: ST_TO_ADDR
// uc_side := 1 ;
3290: LD_ADDR_OWVAR 20
3294: PUSH
3295: LD_INT 1
3297: ST_TO_ADDR
// uc_nation := 1 ;
3298: LD_ADDR_OWVAR 21
3302: PUSH
3303: LD_INT 1
3305: ST_TO_ADDR
// case Difficulty of 1 :
3306: LD_OWVAR 67
3310: PUSH
3311: LD_INT 1
3313: DOUBLE
3314: EQUAL
3315: IFTRUE 3319
3317: GO 3422
3319: POP
// begin wait ( 1 1$00 ) ;
3320: LD_INT 2100
3322: PPUSH
3323: CALL_OW 67
// for i := 1 to 2 do
3327: LD_ADDR_VAR 0 1
3331: PUSH
3332: DOUBLE
3333: LD_INT 1
3335: DEC
3336: ST_TO_ADDR
3337: LD_INT 2
3339: PUSH
3340: FOR_TO
3341: IFFALSE 3418
// begin PrepareHuman ( false , [ 1 , 4 ] [ i mod 2 + 1 ] , 1 ) ;
3343: LD_INT 0
3345: PPUSH
3346: LD_INT 1
3348: PUSH
3349: LD_INT 4
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PUSH
3356: LD_VAR 0 1
3360: PUSH
3361: LD_INT 2
3363: MOD
3364: PUSH
3365: LD_INT 1
3367: PLUS
3368: ARRAY
3369: PPUSH
3370: LD_INT 1
3372: PPUSH
3373: CALL_OW 380
// un := CreateHuman ;
3377: LD_ADDR_VAR 0 2
3381: PUSH
3382: CALL_OW 44
3386: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3387: LD_ADDR_VAR 0 3
3391: PUSH
3392: LD_VAR 0 3
3396: PPUSH
3397: LD_VAR 0 3
3401: PUSH
3402: LD_INT 1
3404: PLUS
3405: PPUSH
3406: LD_VAR 0 2
3410: PPUSH
3411: CALL_OW 1
3415: ST_TO_ADDR
// end ;
3416: GO 3340
3418: POP
3419: POP
// end ; 2 :
3420: GO 3822
3422: LD_INT 2
3424: DOUBLE
3425: EQUAL
3426: IFTRUE 3430
3428: GO 3564
3430: POP
// begin wait ( 0 0$30 ) ;
3431: LD_INT 1050
3433: PPUSH
3434: CALL_OW 67
// for i := 1 to 2 do
3438: LD_ADDR_VAR 0 1
3442: PUSH
3443: DOUBLE
3444: LD_INT 1
3446: DEC
3447: ST_TO_ADDR
3448: LD_INT 2
3450: PUSH
3451: FOR_TO
3452: IFFALSE 3508
// begin PrepareHuman ( false , 1 , 2 ) ;
3454: LD_INT 0
3456: PPUSH
3457: LD_INT 1
3459: PPUSH
3460: LD_INT 2
3462: PPUSH
3463: CALL_OW 380
// un := CreateHuman ;
3467: LD_ADDR_VAR 0 2
3471: PUSH
3472: CALL_OW 44
3476: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3477: LD_ADDR_VAR 0 3
3481: PUSH
3482: LD_VAR 0 3
3486: PPUSH
3487: LD_VAR 0 3
3491: PUSH
3492: LD_INT 1
3494: PLUS
3495: PPUSH
3496: LD_VAR 0 2
3500: PPUSH
3501: CALL_OW 1
3505: ST_TO_ADDR
// end ;
3506: GO 3451
3508: POP
3509: POP
// PrepareHuman ( false , 4 , 2 ) ;
3510: LD_INT 0
3512: PPUSH
3513: LD_INT 4
3515: PPUSH
3516: LD_INT 2
3518: PPUSH
3519: CALL_OW 380
// un := CreateHuman ;
3523: LD_ADDR_VAR 0 2
3527: PUSH
3528: CALL_OW 44
3532: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3533: LD_ADDR_VAR 0 3
3537: PUSH
3538: LD_VAR 0 3
3542: PPUSH
3543: LD_VAR 0 3
3547: PUSH
3548: LD_INT 1
3550: PLUS
3551: PPUSH
3552: LD_VAR 0 2
3556: PPUSH
3557: CALL_OW 1
3561: ST_TO_ADDR
// end ; 3 .. 4 :
3562: GO 3822
3564: LD_INT 3
3566: DOUBLE
3567: GREATEREQUAL
3568: IFFALSE 3576
3570: LD_INT 4
3572: DOUBLE
3573: LESSEQUAL
3574: IFTRUE 3578
3576: GO 3821
3578: POP
// begin for i := 1 to 2 do
3579: LD_ADDR_VAR 0 1
3583: PUSH
3584: DOUBLE
3585: LD_INT 1
3587: DEC
3588: ST_TO_ADDR
3589: LD_INT 2
3591: PUSH
3592: FOR_TO
3593: IFFALSE 3649
// begin PrepareHuman ( false , 1 , 2 ) ;
3595: LD_INT 0
3597: PPUSH
3598: LD_INT 1
3600: PPUSH
3601: LD_INT 2
3603: PPUSH
3604: CALL_OW 380
// un := CreateHuman ;
3608: LD_ADDR_VAR 0 2
3612: PUSH
3613: CALL_OW 44
3617: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3618: LD_ADDR_VAR 0 3
3622: PUSH
3623: LD_VAR 0 3
3627: PPUSH
3628: LD_VAR 0 3
3632: PUSH
3633: LD_INT 1
3635: PLUS
3636: PPUSH
3637: LD_VAR 0 2
3641: PPUSH
3642: CALL_OW 1
3646: ST_TO_ADDR
// end ;
3647: GO 3592
3649: POP
3650: POP
// PrepareHuman ( false , 4 , 2 ) ;
3651: LD_INT 0
3653: PPUSH
3654: LD_INT 4
3656: PPUSH
3657: LD_INT 2
3659: PPUSH
3660: CALL_OW 380
// un := CreateHuman ;
3664: LD_ADDR_VAR 0 2
3668: PUSH
3669: CALL_OW 44
3673: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3674: LD_ADDR_VAR 0 3
3678: PUSH
3679: LD_VAR 0 3
3683: PPUSH
3684: LD_VAR 0 3
3688: PUSH
3689: LD_INT 1
3691: PLUS
3692: PPUSH
3693: LD_VAR 0 2
3697: PPUSH
3698: CALL_OW 1
3702: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_machine_gun , 90 ) ;
3703: LD_INT 1
3705: PPUSH
3706: LD_INT 1
3708: PPUSH
3709: LD_INT 2
3711: PPUSH
3712: LD_INT 2
3714: PPUSH
3715: LD_INT 1
3717: PPUSH
3718: LD_INT 2
3720: PPUSH
3721: LD_INT 90
3723: PPUSH
3724: CALL 241 0 7
// un := CreateVehicle ;
3728: LD_ADDR_VAR 0 2
3732: PUSH
3733: CALL_OW 45
3737: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3738: LD_ADDR_VAR 0 3
3742: PUSH
3743: LD_VAR 0 3
3747: PPUSH
3748: LD_VAR 0 3
3752: PUSH
3753: LD_INT 1
3755: PLUS
3756: PPUSH
3757: LD_VAR 0 2
3761: PPUSH
3762: CALL_OW 1
3766: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
3767: LD_INT 0
3769: PPUSH
3770: LD_INT 1
3772: PPUSH
3773: LD_INT 2
3775: PPUSH
3776: CALL_OW 380
// un := CreateHuman ;
3780: LD_ADDR_VAR 0 2
3784: PUSH
3785: CALL_OW 44
3789: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3790: LD_ADDR_VAR 0 3
3794: PUSH
3795: LD_VAR 0 3
3799: PPUSH
3800: LD_VAR 0 3
3804: PUSH
3805: LD_INT 1
3807: PLUS
3808: PPUSH
3809: LD_VAR 0 2
3813: PPUSH
3814: CALL_OW 1
3818: ST_TO_ADDR
// end ; end ;
3819: GO 3822
3821: POP
// for i := 1 to tmp do
3822: LD_ADDR_VAR 0 1
3826: PUSH
3827: DOUBLE
3828: LD_INT 1
3830: DEC
3831: ST_TO_ADDR
3832: LD_VAR 0 3
3836: PUSH
3837: FOR_TO
3838: IFFALSE 4003
// begin SetDir ( tmp [ i ] , 1 ) ;
3840: LD_VAR 0 3
3844: PUSH
3845: LD_VAR 0 1
3849: ARRAY
3850: PPUSH
3851: LD_INT 1
3853: PPUSH
3854: CALL_OW 233
// if GetType ( tmp [ i ] ) = unit_human then
3858: LD_VAR 0 3
3862: PUSH
3863: LD_VAR 0 1
3867: ARRAY
3868: PPUSH
3869: CALL_OW 247
3873: PUSH
3874: LD_INT 1
3876: EQUAL
3877: IFFALSE 3905
// PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) else
3879: LD_VAR 0 3
3883: PUSH
3884: LD_VAR 0 1
3888: ARRAY
3889: PPUSH
3890: LD_INT 28
3892: PPUSH
3893: LD_INT 52
3895: PPUSH
3896: LD_INT 0
3898: PPUSH
3899: CALL_OW 48
3903: GO 3973
// begin PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) ;
3905: LD_VAR 0 3
3909: PUSH
3910: LD_VAR 0 1
3914: ARRAY
3915: PPUSH
3916: LD_INT 28
3918: PPUSH
3919: LD_INT 52
3921: PPUSH
3922: LD_INT 0
3924: PPUSH
3925: CALL_OW 48
// i := i + 1 ;
3929: LD_ADDR_VAR 0 1
3933: PUSH
3934: LD_VAR 0 1
3938: PUSH
3939: LD_INT 1
3941: PLUS
3942: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ i ] , tmp [ i - 1 ] ) ;
3943: LD_VAR 0 3
3947: PUSH
3948: LD_VAR 0 1
3952: ARRAY
3953: PPUSH
3954: LD_VAR 0 3
3958: PUSH
3959: LD_VAR 0 1
3963: PUSH
3964: LD_INT 1
3966: MINUS
3967: ARRAY
3968: PPUSH
3969: CALL_OW 52
// end ; ComMoveXY ( tmp [ i ] , 43 , 56 ) ;
3973: LD_VAR 0 3
3977: PUSH
3978: LD_VAR 0 1
3982: ARRAY
3983: PPUSH
3984: LD_INT 43
3986: PPUSH
3987: LD_INT 56
3989: PPUSH
3990: CALL_OW 111
// wait ( 0 0$2 ) ;
3994: LD_INT 70
3996: PPUSH
3997: CALL_OW 67
// end ;
4001: GO 3837
4003: POP
4004: POP
// wait ( 0 0$2 ) ;
4005: LD_INT 70
4007: PPUSH
4008: CALL_OW 67
// if not FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) then
4012: LD_INT 7
4014: PPUSH
4015: LD_INT 22
4017: PUSH
4018: LD_INT 2
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: PPUSH
4025: CALL_OW 70
4029: NOT
4030: IFFALSE 4228
// begin AddComAgressiveMove ( tmp , 35 , 24 ) ;
4032: LD_VAR 0 3
4036: PPUSH
4037: LD_INT 35
4039: PPUSH
4040: LD_INT 24
4042: PPUSH
4043: CALL_OW 174
// usForces := usForces union UnitFilter ( tmp , [ f_class , 1 ] ) ;
4047: LD_ADDR_EXP 21
4051: PUSH
4052: LD_EXP 21
4056: PUSH
4057: LD_VAR 0 3
4061: PPUSH
4062: LD_INT 25
4064: PUSH
4065: LD_INT 1
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PPUSH
4072: CALL_OW 72
4076: UNION
4077: ST_TO_ADDR
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
4078: LD_INT 22
4080: PUSH
4081: LD_INT 1
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: PUSH
4088: LD_INT 30
4090: PUSH
4091: LD_INT 4
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PPUSH
4102: CALL_OW 69
4106: PUSH
4107: LD_INT 1
4109: ARRAY
4110: PPUSH
4111: CALL_OW 313
4115: PUSH
4116: LD_INT 6
4118: LESS
4119: IFFALSE 4178
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 1 ] ) , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
4121: LD_VAR 0 3
4125: PPUSH
4126: LD_INT 25
4128: PUSH
4129: LD_INT 1
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: PPUSH
4136: CALL_OW 72
4140: PPUSH
4141: LD_INT 22
4143: PUSH
4144: LD_INT 1
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: PUSH
4151: LD_INT 30
4153: PUSH
4154: LD_INT 4
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: PUSH
4161: EMPTY
4162: LIST
4163: LIST
4164: PPUSH
4165: CALL_OW 69
4169: PUSH
4170: LD_INT 1
4172: ARRAY
4173: PPUSH
4174: CALL_OW 180
// if UnitFilter ( tmp , [ f_class , 4 ] ) then
4178: LD_VAR 0 3
4182: PPUSH
4183: LD_INT 25
4185: PUSH
4186: LD_INT 4
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PPUSH
4193: CALL_OW 72
4197: IFFALSE 4226
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 4 ] ) , usLab ) ;
4199: LD_VAR 0 3
4203: PPUSH
4204: LD_INT 25
4206: PUSH
4207: LD_INT 4
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: PPUSH
4214: CALL_OW 72
4218: PPUSH
4219: LD_INT 3
4221: PPUSH
4222: CALL_OW 180
// end else
4226: GO 4503
// begin tmp := tmp union FilterUnitsInArea ( retreatArea , [ f_side , 1 ] ) ;
4228: LD_ADDR_VAR 0 3
4232: PUSH
4233: LD_VAR 0 3
4237: PUSH
4238: LD_INT 6
4240: PPUSH
4241: LD_INT 22
4243: PUSH
4244: LD_INT 1
4246: PUSH
4247: EMPTY
4248: LIST
4249: LIST
4250: PPUSH
4251: CALL_OW 70
4255: UNION
4256: ST_TO_ADDR
// ComMoveXY ( tmp , 45 , 54 ) ;
4257: LD_VAR 0 3
4261: PPUSH
4262: LD_INT 45
4264: PPUSH
4265: LD_INT 54
4267: PPUSH
4268: CALL_OW 111
// wait ( 0 0$3 ) ;
4272: LD_INT 105
4274: PPUSH
4275: CALL_OW 67
// AddComAgressiveMove ( tmp diff UnitFilter ( tmp , [ f_class , 4 ] ) , 35 , 24 ) ;
4279: LD_VAR 0 3
4283: PUSH
4284: LD_VAR 0 3
4288: PPUSH
4289: LD_INT 25
4291: PUSH
4292: LD_INT 4
4294: PUSH
4295: EMPTY
4296: LIST
4297: LIST
4298: PPUSH
4299: CALL_OW 72
4303: DIFF
4304: PPUSH
4305: LD_INT 35
4307: PPUSH
4308: LD_INT 24
4310: PPUSH
4311: CALL_OW 174
// AddComMoveXY ( UnitFilter ( tmp , [ f_class , 4 ] ) , 42 , 49 ) ;
4315: LD_VAR 0 3
4319: PPUSH
4320: LD_INT 25
4322: PUSH
4323: LD_INT 4
4325: PUSH
4326: EMPTY
4327: LIST
4328: LIST
4329: PPUSH
4330: CALL_OW 72
4334: PPUSH
4335: LD_INT 42
4337: PPUSH
4338: LD_INT 49
4340: PPUSH
4341: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4345: LD_INT 35
4347: PPUSH
4348: CALL_OW 67
// for i in tmp do
4352: LD_ADDR_VAR 0 1
4356: PUSH
4357: LD_VAR 0 3
4361: PUSH
4362: FOR_IN
4363: IFFALSE 4494
// if IsDead ( i ) then
4365: LD_VAR 0 1
4369: PPUSH
4370: CALL_OW 301
4374: IFFALSE 4394
// tmp := tmp diff i else
4376: LD_ADDR_VAR 0 3
4380: PUSH
4381: LD_VAR 0 3
4385: PUSH
4386: LD_VAR 0 1
4390: DIFF
4391: ST_TO_ADDR
4392: GO 4492
// if GetClass ( i ) = 1 then
4394: LD_VAR 0 1
4398: PPUSH
4399: CALL_OW 257
4403: PUSH
4404: LD_INT 1
4406: EQUAL
4407: IFFALSE 4492
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 42 , 49 ) > 6 then
4409: LD_VAR 0 1
4413: PPUSH
4414: CALL_OW 256
4418: PUSH
4419: LD_INT 600
4421: LESS
4422: PUSH
4423: LD_VAR 0 1
4427: PPUSH
4428: LD_INT 42
4430: PPUSH
4431: LD_INT 49
4433: PPUSH
4434: CALL_OW 297
4438: PUSH
4439: LD_INT 6
4441: GREATER
4442: AND
4443: IFFALSE 4462
// ComMoveXY ( i , 42 , 49 ) else
4445: LD_VAR 0 1
4449: PPUSH
4450: LD_INT 42
4452: PPUSH
4453: LD_INT 49
4455: PPUSH
4456: CALL_OW 111
4460: GO 4492
// if GetLives ( i ) = 1000 then
4462: LD_VAR 0 1
4466: PPUSH
4467: CALL_OW 256
4471: PUSH
4472: LD_INT 1000
4474: EQUAL
4475: IFFALSE 4492
// ComAgressiveMove ( i , 36 , 25 ) ;
4477: LD_VAR 0 1
4481: PPUSH
4482: LD_INT 36
4484: PPUSH
4485: LD_INT 25
4487: PPUSH
4488: CALL_OW 114
// end ;
4492: GO 4362
4494: POP
4495: POP
// until not tmp ;
4496: LD_VAR 0 3
4500: NOT
4501: IFFALSE 4345
// end ; end ;
4503: PPOPN 3
4505: END
// every 1 1$30 trigger FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) and not attackDeltaAllowed do var i , un , veh ;
4506: LD_INT 7
4508: PPUSH
4509: LD_INT 22
4511: PUSH
4512: LD_INT 2
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: PPUSH
4519: CALL_OW 70
4523: PUSH
4524: LD_EXP 14
4528: NOT
4529: AND
4530: IFFALSE 4688
4532: GO 4534
4534: DISABLE
4535: LD_INT 0
4537: PPUSH
4538: PPUSH
4539: PPUSH
// begin for i := 1 to 2 do
4540: LD_ADDR_VAR 0 1
4544: PUSH
4545: DOUBLE
4546: LD_INT 1
4548: DEC
4549: ST_TO_ADDR
4550: LD_INT 2
4552: PUSH
4553: FOR_TO
4554: IFFALSE 4686
// begin wait ( 0 0$3 ) ;
4556: LD_INT 105
4558: PPUSH
4559: CALL_OW 67
// uc_side := 1 ;
4563: LD_ADDR_OWVAR 20
4567: PUSH
4568: LD_INT 1
4570: ST_TO_ADDR
// uc_nation := 1 ;
4571: LD_ADDR_OWVAR 21
4575: PUSH
4576: LD_INT 1
4578: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 90 ) ;
4579: LD_INT 1
4581: PPUSH
4582: LD_INT 1
4584: PPUSH
4585: LD_INT 2
4587: PPUSH
4588: LD_INT 1
4590: PPUSH
4591: LD_INT 1
4593: PPUSH
4594: LD_INT 4
4596: PPUSH
4597: LD_INT 90
4599: PPUSH
4600: CALL 241 0 7
// veh := CreateVehicle ;
4604: LD_ADDR_VAR 0 3
4608: PUSH
4609: CALL_OW 45
4613: ST_TO_ADDR
// PlaceUnitXY ( veh , 29 , 52 , false ) ;
4614: LD_VAR 0 3
4618: PPUSH
4619: LD_INT 29
4621: PPUSH
4622: LD_INT 52
4624: PPUSH
4625: LD_INT 0
4627: PPUSH
4628: CALL_OW 48
// PrepareHuman ( false , 3 , 3 ) ;
4632: LD_INT 0
4634: PPUSH
4635: LD_INT 3
4637: PPUSH
4638: LD_INT 3
4640: PPUSH
4641: CALL_OW 380
// un := CreateHuman ;
4645: LD_ADDR_VAR 0 2
4649: PUSH
4650: CALL_OW 44
4654: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4655: LD_VAR 0 2
4659: PPUSH
4660: LD_VAR 0 3
4664: PPUSH
4665: CALL_OW 52
// ComAgressiveMove ( veh , 36 , 25 ) ;
4669: LD_VAR 0 3
4673: PPUSH
4674: LD_INT 36
4676: PPUSH
4677: LD_INT 25
4679: PPUSH
4680: CALL_OW 114
// end ;
4684: GO 4553
4686: POP
4687: POP
// end ; end_of_file
4688: PPOPN 3
4690: END
// export function Action ; var i , tmp ; begin
4691: LD_INT 0
4693: PPUSH
4694: PPUSH
4695: PPUSH
// InGameOn ;
4696: CALL_OW 8
// DoNotAttack ( 2 , usLab ) ;
4700: LD_INT 2
4702: PPUSH
4703: LD_INT 3
4705: PPUSH
4706: CALL_OW 471
// ComMoveXY ( Heike , 78 , 61 ) ;
4710: LD_EXP 23
4714: PPUSH
4715: LD_INT 78
4717: PPUSH
4718: LD_INT 61
4720: PPUSH
4721: CALL_OW 111
// if Mike then
4725: LD_EXP 25
4729: IFFALSE 4746
// ComMoveXY ( Mike , 80 , 66 ) ;
4731: LD_EXP 25
4735: PPUSH
4736: LD_INT 80
4738: PPUSH
4739: LD_INT 66
4741: PPUSH
4742: CALL_OW 111
// if Givi then
4746: LD_EXP 24
4750: IFFALSE 4767
// ComMoveXY ( Givi , 82 , 66 ) ;
4752: LD_EXP 24
4756: PPUSH
4757: LD_INT 82
4759: PPUSH
4760: LD_INT 66
4762: PPUSH
4763: CALL_OW 111
// if Kamil then
4767: LD_EXP 26
4771: IFFALSE 4788
// ComMoveXY ( Kamil , 82 , 67 ) ;
4773: LD_EXP 26
4777: PPUSH
4778: LD_INT 82
4780: PPUSH
4781: LD_INT 67
4783: PPUSH
4784: CALL_OW 111
// CenterNowOnUnits ( Heike ) ;
4788: LD_EXP 23
4792: PPUSH
4793: CALL_OW 87
// wait ( 0 0$2 ) ;
4797: LD_INT 70
4799: PPUSH
4800: CALL_OW 67
// if Givi and Mike then
4804: LD_EXP 24
4808: PUSH
4809: LD_EXP 25
4813: AND
4814: IFFALSE 5348
// begin AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
4816: LD_EXP 24
4820: PUSH
4821: LD_EXP 25
4825: PUSH
4826: LD_EXP 26
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: LIST
4835: PPUSH
4836: LD_EXP 23
4840: PPUSH
4841: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
4845: LD_EXP 23
4849: PPUSH
4850: LD_EXP 24
4854: PPUSH
4855: CALL_OW 179
// Say ( Givi , DG-1-start ) ;
4859: LD_EXP 24
4863: PPUSH
4864: LD_STRING DG-1-start
4866: PPUSH
4867: CALL_OW 88
// Say ( Heike , DH-1-start ) ;
4871: LD_EXP 23
4875: PPUSH
4876: LD_STRING DH-1-start
4878: PPUSH
4879: CALL_OW 88
// AddComTurnUnit ( Mike , Heike ) ;
4883: LD_EXP 25
4887: PPUSH
4888: LD_EXP 23
4892: PPUSH
4893: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
4897: LD_EXP 23
4901: PPUSH
4902: LD_EXP 25
4906: PPUSH
4907: CALL_OW 179
// Say ( Mike , DM-1-start ) ;
4911: LD_EXP 25
4915: PPUSH
4916: LD_STRING DM-1-start
4918: PPUSH
4919: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
4923: LD_EXP 23
4927: PPUSH
4928: LD_STRING DH-2-start
4930: PPUSH
4931: CALL_OW 88
// Say ( Mike , DM-2-start ) ;
4935: LD_EXP 25
4939: PPUSH
4940: LD_STRING DM-2-start
4942: PPUSH
4943: CALL_OW 88
// Say ( Givi , DG-2-start ) ;
4947: LD_EXP 24
4951: PPUSH
4952: LD_STRING DG-2-start
4954: PPUSH
4955: CALL_OW 88
// ComTurnUnit ( Mike , Givi ) ;
4959: LD_EXP 25
4963: PPUSH
4964: LD_EXP 24
4968: PPUSH
4969: CALL_OW 119
// ComTurnUnit ( Heike , Mike ) ;
4973: LD_EXP 23
4977: PPUSH
4978: LD_EXP 25
4982: PPUSH
4983: CALL_OW 119
// Say ( Mike , DM-3-start ) ;
4987: LD_EXP 25
4991: PPUSH
4992: LD_STRING DM-3-start
4994: PPUSH
4995: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
4999: LD_EXP 23
5003: PPUSH
5004: LD_STRING DH-3-start
5006: PPUSH
5007: CALL_OW 88
// ComMoveXY ( [ Heike , Mike , Givi , Kamil ] , 84 , 51 ) ;
5011: LD_EXP 23
5015: PUSH
5016: LD_EXP 25
5020: PUSH
5021: LD_EXP 24
5025: PUSH
5026: LD_EXP 26
5030: PUSH
5031: EMPTY
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: PPUSH
5037: LD_INT 84
5039: PPUSH
5040: LD_INT 51
5042: PPUSH
5043: CALL_OW 111
// wait ( 0 0$2 ) ;
5047: LD_INT 70
5049: PPUSH
5050: CALL_OW 67
// Say ( Givi , DG-3-start ) ;
5054: LD_EXP 24
5058: PPUSH
5059: LD_STRING DG-3-start
5061: PPUSH
5062: CALL_OW 88
// ComHold ( [ Heike , Mike , Givi , Kamil ] ) ;
5066: LD_EXP 23
5070: PUSH
5071: LD_EXP 25
5075: PUSH
5076: LD_EXP 24
5080: PUSH
5081: LD_EXP 26
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: PPUSH
5092: CALL_OW 140
// AddComTurnUnit ( Heike , Givi ) ;
5096: LD_EXP 23
5100: PPUSH
5101: LD_EXP 24
5105: PPUSH
5106: CALL_OW 179
// AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
5110: LD_EXP 24
5114: PUSH
5115: LD_EXP 25
5119: PUSH
5120: LD_EXP 26
5124: PUSH
5125: EMPTY
5126: LIST
5127: LIST
5128: LIST
5129: PPUSH
5130: LD_EXP 23
5134: PPUSH
5135: CALL_OW 179
// Say ( Heike , DH-4-start ) ;
5139: LD_EXP 23
5143: PPUSH
5144: LD_STRING DH-4-start
5146: PPUSH
5147: CALL_OW 88
// Say ( Givi , DG-4-start ) ;
5151: LD_EXP 24
5155: PPUSH
5156: LD_STRING DG-4-start
5158: PPUSH
5159: CALL_OW 88
// Say ( Heike , DH-5-start ) ;
5163: LD_EXP 23
5167: PPUSH
5168: LD_STRING DH-5-start
5170: PPUSH
5171: CALL_OW 88
// Say ( Givi , DG-5-start ) ;
5175: LD_EXP 24
5179: PPUSH
5180: LD_STRING DG-5-start
5182: PPUSH
5183: CALL_OW 88
// Say ( Heike , DH-6-start ) ;
5187: LD_EXP 23
5191: PPUSH
5192: LD_STRING DH-6-start
5194: PPUSH
5195: CALL_OW 88
// if not Kamil then
5199: LD_EXP 26
5203: NOT
5204: IFFALSE 5255
// begin Say ( Mike , DM-6-start ) ;
5206: LD_EXP 25
5210: PPUSH
5211: LD_STRING DM-6-start
5213: PPUSH
5214: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi ] , Mike ) ;
5218: LD_EXP 23
5222: PUSH
5223: LD_EXP 24
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PPUSH
5232: LD_EXP 25
5236: PPUSH
5237: CALL_OW 119
// Say ( Givi , DG-6-start ) ;
5241: LD_EXP 24
5245: PPUSH
5246: LD_STRING DG-6-start
5248: PPUSH
5249: CALL_OW 88
// end else
5253: GO 5334
// begin Say ( Mike , DM-6-start-a ) ;
5255: LD_EXP 25
5259: PPUSH
5260: LD_STRING DM-6-start-a
5262: PPUSH
5263: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi , Mike ] , Kamil ) ;
5267: LD_EXP 23
5271: PUSH
5272: LD_EXP 24
5276: PUSH
5277: LD_EXP 25
5281: PUSH
5282: EMPTY
5283: LIST
5284: LIST
5285: LIST
5286: PPUSH
5287: LD_EXP 26
5291: PPUSH
5292: CALL_OW 119
// ComTurnUnit ( Kamil , Mike ) ;
5296: LD_EXP 26
5300: PPUSH
5301: LD_EXP 25
5305: PPUSH
5306: CALL_OW 119
// Say ( Kamil , DKam-7-start-a ) ;
5310: LD_EXP 26
5314: PPUSH
5315: LD_STRING DKam-7-start-a
5317: PPUSH
5318: CALL_OW 88
// Say ( Givi , DG-6-start-a ) ;
5322: LD_EXP 24
5326: PPUSH
5327: LD_STRING DG-6-start-a
5329: PPUSH
5330: CALL_OW 88
// end ; Say ( Heike , DH-7-start ) ;
5334: LD_EXP 23
5338: PPUSH
5339: LD_STRING DH-7-start
5341: PPUSH
5342: CALL_OW 88
// end else
5346: GO 6070
// if not Mike and Givi then
5348: LD_EXP 25
5352: NOT
5353: PUSH
5354: LD_EXP 24
5358: AND
5359: IFFALSE 5704
// begin AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5361: LD_EXP 24
5365: PUSH
5366: LD_EXP 26
5370: PUSH
5371: EMPTY
5372: LIST
5373: LIST
5374: PPUSH
5375: LD_EXP 23
5379: PPUSH
5380: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
5384: LD_EXP 23
5388: PPUSH
5389: LD_EXP 24
5393: PPUSH
5394: CALL_OW 179
// Say ( Givi , DG-1-start-c ) ;
5398: LD_EXP 24
5402: PPUSH
5403: LD_STRING DG-1-start-c
5405: PPUSH
5406: CALL_OW 88
// Say ( Heike , DH-1-start-c ) ;
5410: LD_EXP 23
5414: PPUSH
5415: LD_STRING DH-1-start-c
5417: PPUSH
5418: CALL_OW 88
// Say ( Givi , DG-2-start-c ) ;
5422: LD_EXP 24
5426: PPUSH
5427: LD_STRING DG-2-start-c
5429: PPUSH
5430: CALL_OW 88
// Say ( Heike , DH-2-start-c ) ;
5434: LD_EXP 23
5438: PPUSH
5439: LD_STRING DH-2-start-c
5441: PPUSH
5442: CALL_OW 88
// Say ( Givi , DG-3-start-c ) ;
5446: LD_EXP 24
5450: PPUSH
5451: LD_STRING DG-3-start-c
5453: PPUSH
5454: CALL_OW 88
// ComMoveXY ( Heike , 83 , 56 ) ;
5458: LD_EXP 23
5462: PPUSH
5463: LD_INT 83
5465: PPUSH
5466: LD_INT 56
5468: PPUSH
5469: CALL_OW 111
// ComMoveXY ( Givi , 83 , 59 ) ;
5473: LD_EXP 24
5477: PPUSH
5478: LD_INT 83
5480: PPUSH
5481: LD_INT 59
5483: PPUSH
5484: CALL_OW 111
// if Kamil then
5488: LD_EXP 26
5492: IFFALSE 5509
// ComMoveXY ( Kamil , 80 , 58 ) ;
5494: LD_EXP 26
5498: PPUSH
5499: LD_INT 80
5501: PPUSH
5502: LD_INT 58
5504: PPUSH
5505: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5509: LD_EXP 23
5513: PPUSH
5514: LD_EXP 24
5518: PPUSH
5519: CALL_OW 179
// AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5523: LD_EXP 24
5527: PUSH
5528: LD_EXP 26
5532: PUSH
5533: EMPTY
5534: LIST
5535: LIST
5536: PPUSH
5537: LD_EXP 23
5541: PPUSH
5542: CALL_OW 179
// Say ( Heike , DH-3-start-c ) ;
5546: LD_EXP 23
5550: PPUSH
5551: LD_STRING DH-3-start-c
5553: PPUSH
5554: CALL_OW 88
// Say ( Givi , DG-4-start-c ) ;
5558: LD_EXP 24
5562: PPUSH
5563: LD_STRING DG-4-start-c
5565: PPUSH
5566: CALL_OW 88
// Say ( Heike , DH-5-start-c ) ;
5570: LD_EXP 23
5574: PPUSH
5575: LD_STRING DH-5-start-c
5577: PPUSH
5578: CALL_OW 88
// Say ( Givi , DG-5-start-c ) ;
5582: LD_EXP 24
5586: PPUSH
5587: LD_STRING DG-5-start-c
5589: PPUSH
5590: CALL_OW 88
// Say ( Heike , DH-6-start-c ) ;
5594: LD_EXP 23
5598: PPUSH
5599: LD_STRING DH-6-start-c
5601: PPUSH
5602: CALL_OW 88
// Say ( Givi , DG-6-start-c ) ;
5606: LD_EXP 24
5610: PPUSH
5611: LD_STRING DG-6-start-c
5613: PPUSH
5614: CALL_OW 88
// if Kamil then
5618: LD_EXP 26
5622: IFFALSE 5678
// begin ComTurnUnit ( Kamil , Heike ) ;
5624: LD_EXP 26
5628: PPUSH
5629: LD_EXP 23
5633: PPUSH
5634: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5638: LD_EXP 26
5642: PPUSH
5643: LD_STRING DKam-1-start-c
5645: PPUSH
5646: CALL_OW 88
// ComTurnUnit ( Givi , Kamil ) ;
5650: LD_EXP 24
5654: PPUSH
5655: LD_EXP 26
5659: PPUSH
5660: CALL_OW 119
// Say ( Givi , DG-7-start-c ) ;
5664: LD_EXP 24
5668: PPUSH
5669: LD_STRING DG-7-start-c
5671: PPUSH
5672: CALL_OW 88
// end else
5676: GO 5702
// begin Say ( Givi , DG-8-start-c ) ;
5678: LD_EXP 24
5682: PPUSH
5683: LD_STRING DG-8-start-c
5685: PPUSH
5686: CALL_OW 88
// Say ( Heike , DH-7-start-c ) ;
5690: LD_EXP 23
5694: PPUSH
5695: LD_STRING DH-7-start-c
5697: PPUSH
5698: CALL_OW 88
// end ; end else
5702: GO 6070
// if not Givi and Mike then
5704: LD_EXP 24
5708: NOT
5709: PUSH
5710: LD_EXP 25
5714: AND
5715: IFFALSE 5974
// begin AddComTurnUnit ( [ Mike , Kamil ] , Heike ) ;
5717: LD_EXP 25
5721: PUSH
5722: LD_EXP 26
5726: PUSH
5727: EMPTY
5728: LIST
5729: LIST
5730: PPUSH
5731: LD_EXP 23
5735: PPUSH
5736: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
5740: LD_EXP 23
5744: PPUSH
5745: LD_EXP 25
5749: PPUSH
5750: CALL_OW 179
// Say ( Mike , DM-1-start-b ) ;
5754: LD_EXP 25
5758: PPUSH
5759: LD_STRING DM-1-start-b
5761: PPUSH
5762: CALL_OW 88
// Say ( Heike , DH-1-start-b ) ;
5766: LD_EXP 23
5770: PPUSH
5771: LD_STRING DH-1-start-b
5773: PPUSH
5774: CALL_OW 88
// Say ( Mike , DM-2-start-b ) ;
5778: LD_EXP 25
5782: PPUSH
5783: LD_STRING DM-2-start-b
5785: PPUSH
5786: CALL_OW 88
// Say ( Heike , DH-2-start-b ) ;
5790: LD_EXP 23
5794: PPUSH
5795: LD_STRING DH-2-start-b
5797: PPUSH
5798: CALL_OW 88
// Say ( Mike , DM-3-start-b ) ;
5802: LD_EXP 25
5806: PPUSH
5807: LD_STRING DM-3-start-b
5809: PPUSH
5810: CALL_OW 88
// if Kamil then
5814: LD_EXP 26
5818: IFFALSE 5835
// ComMoveXY ( Kamil , 80 , 58 ) ;
5820: LD_EXP 26
5824: PPUSH
5825: LD_INT 80
5827: PPUSH
5828: LD_INT 58
5830: PPUSH
5831: CALL_OW 111
// ComMoveXY ( Heike , 83 , 56 ) ;
5835: LD_EXP 23
5839: PPUSH
5840: LD_INT 83
5842: PPUSH
5843: LD_INT 56
5845: PPUSH
5846: CALL_OW 111
// ComMoveXY ( Mike , 83 , 59 ) ;
5850: LD_EXP 25
5854: PPUSH
5855: LD_INT 83
5857: PPUSH
5858: LD_INT 59
5860: PPUSH
5861: CALL_OW 111
// AddComTurnUnit ( Heike , Mike ) ;
5865: LD_EXP 23
5869: PPUSH
5870: LD_EXP 25
5874: PPUSH
5875: CALL_OW 179
// AddComTurnUnit ( [ Kamil , Mike ] , Heike ) ;
5879: LD_EXP 26
5883: PUSH
5884: LD_EXP 25
5888: PUSH
5889: EMPTY
5890: LIST
5891: LIST
5892: PPUSH
5893: LD_EXP 23
5897: PPUSH
5898: CALL_OW 179
// Say ( Heike , DH-3-start-b ) ;
5902: LD_EXP 23
5906: PPUSH
5907: LD_STRING DH-3-start-b
5909: PPUSH
5910: CALL_OW 88
// Say ( Mike , DM-4-start-b ) ;
5914: LD_EXP 25
5918: PPUSH
5919: LD_STRING DM-4-start-b
5921: PPUSH
5922: CALL_OW 88
// if Kamil then
5926: LD_EXP 26
5930: IFFALSE 5960
// begin ComTurnUnit ( Kamil , Heike ) ;
5932: LD_EXP 26
5936: PPUSH
5937: LD_EXP 23
5941: PPUSH
5942: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5946: LD_EXP 26
5950: PPUSH
5951: LD_STRING DKam-1-start-c
5953: PPUSH
5954: CALL_OW 88
// end else
5958: GO 5972
// begin Say ( Mike , DM-5-start-b ) ;
5960: LD_EXP 25
5964: PPUSH
5965: LD_STRING DM-5-start-b
5967: PPUSH
5968: CALL_OW 88
// end ; end else
5972: GO 6070
// if Kamil then
5974: LD_EXP 26
5978: IFFALSE 6058
// begin AddComTurnUnit ( Heike , Kamil ) ;
5980: LD_EXP 23
5984: PPUSH
5985: LD_EXP 26
5989: PPUSH
5990: CALL_OW 179
// AddComTurnUnit ( Kamil , Heike ) ;
5994: LD_EXP 26
5998: PPUSH
5999: LD_EXP 23
6003: PPUSH
6004: CALL_OW 179
// Say ( Heike , DH-1-start-f ) ;
6008: LD_EXP 23
6012: PPUSH
6013: LD_STRING DH-1-start-f
6015: PPUSH
6016: CALL_OW 88
// Say ( Kamil , DKam-1-start-f ) ;
6020: LD_EXP 26
6024: PPUSH
6025: LD_STRING DKam-1-start-f
6027: PPUSH
6028: CALL_OW 88
// Say ( Heike , DH-2-start-f ) ;
6032: LD_EXP 23
6036: PPUSH
6037: LD_STRING DH-2-start-f
6039: PPUSH
6040: CALL_OW 88
// Say ( Kamil , DKam-2-start-f ) ;
6044: LD_EXP 26
6048: PPUSH
6049: LD_STRING DKam-2-start-f
6051: PPUSH
6052: CALL_OW 88
// end else
6056: GO 6070
// begin Say ( Heike , DH-1-start-d ) ;
6058: LD_EXP 23
6062: PPUSH
6063: LD_STRING DH-1-start-d
6065: PPUSH
6066: CALL_OW 88
// end ; ComFree ( [ Heike , Givi , Mike , Kamil ] ) ;
6070: LD_EXP 23
6074: PUSH
6075: LD_EXP 24
6079: PUSH
6080: LD_EXP 25
6084: PUSH
6085: LD_EXP 26
6089: PUSH
6090: EMPTY
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: PPUSH
6096: CALL_OW 139
// InGameOff ;
6100: CALL_OW 9
// ChangeMissionObjectives ( OEast ) ;
6104: LD_STRING OEast
6106: PPUSH
6107: CALL_OW 337
// SetAreaMapShow ( eastExitArea , 1 ) ;
6111: LD_INT 10
6113: PPUSH
6114: LD_INT 1
6116: PPUSH
6117: CALL_OW 424
// SaveForQuickRestart ;
6121: CALL_OW 22
// wait ( 0 0$20 ) ;
6125: LD_INT 700
6127: PPUSH
6128: CALL_OW 67
// SendSciToForest ;
6132: CALL 1524 0 0
// if Difficulty = 1 then
6136: LD_OWVAR 67
6140: PUSH
6141: LD_INT 1
6143: EQUAL
6144: IFFALSE 6148
// exit ;
6146: GO 6269
// wait ( [ 5 5$00 , 2 2$30 , 2 2$00 ] [ Difficulty - 1 ] ) ;
6148: LD_INT 10500
6150: PUSH
6151: LD_INT 5250
6153: PUSH
6154: LD_INT 4200
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: LIST
6161: PUSH
6162: LD_OWVAR 67
6166: PUSH
6167: LD_INT 1
6169: MINUS
6170: ARRAY
6171: PPUSH
6172: CALL_OW 67
// if usAlert then
6176: LD_EXP 10
6180: IFFALSE 6184
// exit ;
6182: GO 6269
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
6184: LD_ADDR_VAR 0 3
6188: PUSH
6189: LD_INT 22
6191: PUSH
6192: LD_INT 1
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: PUSH
6199: LD_INT 25
6201: PUSH
6202: LD_INT 2
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: PPUSH
6213: CALL_OW 69
6217: ST_TO_ADDR
// if not tmp then
6218: LD_VAR 0 3
6222: NOT
6223: IFFALSE 6227
// exit ;
6225: GO 6269
// ComExitBuilding ( tmp ) ;
6227: LD_VAR 0 3
6231: PPUSH
6232: CALL_OW 122
// AddComBuild ( tmp , b_breastwork , 40 , 13 , 3 ) ;
6236: LD_VAR 0 3
6240: PPUSH
6241: LD_INT 31
6243: PPUSH
6244: LD_INT 40
6246: PPUSH
6247: LD_INT 13
6249: PPUSH
6250: LD_INT 3
6252: PPUSH
6253: CALL_OW 205
// AddComEnterUnit ( tmp , Delta ) ;
6257: LD_VAR 0 3
6261: PPUSH
6262: LD_INT 1
6264: PPUSH
6265: CALL_OW 180
// end ;
6269: LD_VAR 0 1
6273: RET
// every 3 3$00 do
6274: GO 6276
6276: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
6277: LD_INT 1
6279: PPUSH
6280: LD_INT 570
6282: PPUSH
6283: LD_INT 350
6285: PPUSH
6286: CALL_OW 550
// wait ( 2 2$40 ) ;
6290: LD_INT 5600
6292: PPUSH
6293: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
6297: LD_INT 0
6299: PPUSH
6300: LD_INT 570
6302: PPUSH
6303: LD_INT 350
6305: PPUSH
6306: CALL_OW 550
// end ;
6310: END
// every 0 0$1 trigger not aviradzeSpotted and See ( 2 , Aviradze ) do var i , pepAmount ;
6311: LD_EXP 4
6315: NOT
6316: PUSH
6317: LD_INT 2
6319: PPUSH
6320: LD_EXP 27
6324: PPUSH
6325: CALL_OW 292
6329: AND
6330: IFFALSE 7255
6332: GO 6334
6334: DISABLE
6335: LD_INT 0
6337: PPUSH
6338: PPUSH
// begin SetAreaMapShow ( eastExitArea , 0 ) ;
6339: LD_INT 10
6341: PPUSH
6342: LD_INT 0
6344: PPUSH
6345: CALL_OW 424
// aviradzeSpotted := true ;
6349: LD_ADDR_EXP 4
6353: PUSH
6354: LD_INT 1
6356: ST_TO_ADDR
// pepAmount := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ;
6357: LD_ADDR_VAR 0 2
6361: PUSH
6362: LD_INT 22
6364: PUSH
6365: LD_INT 2
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: PUSH
6372: LD_INT 21
6374: PUSH
6375: LD_INT 1
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: PPUSH
6386: CALL_OW 69
6390: ST_TO_ADDR
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6391: LD_EXP 23
6395: PPUSH
6396: LD_EXP 27
6400: PPUSH
6401: CALL_OW 250
6405: PPUSH
6406: LD_EXP 27
6410: PPUSH
6411: CALL_OW 251
6415: PPUSH
6416: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6420: LD_INT 35
6422: PPUSH
6423: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 16 ;
6427: LD_EXP 23
6431: PPUSH
6432: LD_EXP 27
6436: PPUSH
6437: CALL_OW 296
6441: PUSH
6442: LD_INT 16
6444: LESS
6445: IFFALSE 6420
// InGameOn ;
6447: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
6451: LD_INT 5
6453: PPUSH
6454: LD_INT 2
6456: PPUSH
6457: CALL_OW 343
// if pepAmount > 2 then
6461: LD_VAR 0 2
6465: PUSH
6466: LD_INT 2
6468: GREATER
6469: IFFALSE 6485
// Say ( Heike , DH-1-spot ) else
6471: LD_EXP 23
6475: PPUSH
6476: LD_STRING DH-1-spot
6478: PPUSH
6479: CALL_OW 88
6483: GO 6497
// Say ( Heike , DH-1-spot-d ) ;
6485: LD_EXP 23
6489: PPUSH
6490: LD_STRING DH-1-spot-d
6492: PPUSH
6493: CALL_OW 88
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6497: LD_EXP 23
6501: PPUSH
6502: LD_EXP 27
6506: PPUSH
6507: CALL_OW 250
6511: PPUSH
6512: LD_EXP 27
6516: PPUSH
6517: CALL_OW 251
6521: PPUSH
6522: CALL_OW 111
// for i in [ Kamil , Mike , Givi ] do
6526: LD_ADDR_VAR 0 1
6530: PUSH
6531: LD_EXP 26
6535: PUSH
6536: LD_EXP 25
6540: PUSH
6541: LD_EXP 24
6545: PUSH
6546: EMPTY
6547: LIST
6548: LIST
6549: LIST
6550: PUSH
6551: FOR_IN
6552: IFFALSE 6591
// if GetDistUnits ( i , Aviradze ) > 7 then
6554: LD_VAR 0 1
6558: PPUSH
6559: LD_EXP 27
6563: PPUSH
6564: CALL_OW 296
6568: PUSH
6569: LD_INT 7
6571: GREATER
6572: IFFALSE 6589
// ComMoveXY ( i , 102 , 40 ) ;
6574: LD_VAR 0 1
6578: PPUSH
6579: LD_INT 102
6581: PPUSH
6582: LD_INT 40
6584: PPUSH
6585: CALL_OW 111
6589: GO 6551
6591: POP
6592: POP
// repeat wait ( 0 0$1 ) ;
6593: LD_INT 35
6595: PPUSH
6596: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 6 ;
6600: LD_EXP 23
6604: PPUSH
6605: LD_EXP 27
6609: PPUSH
6610: CALL_OW 296
6614: PUSH
6615: LD_INT 6
6617: LESS
6618: IFFALSE 6593
// ComTurnUnit ( Heike , Aviradze ) ;
6620: LD_EXP 23
6624: PPUSH
6625: LD_EXP 27
6629: PPUSH
6630: CALL_OW 119
// ComTurnUnit ( [ Aviradze , Sophia , Kaia ] , Heike ) ;
6634: LD_EXP 27
6638: PUSH
6639: LD_EXP 29
6643: PUSH
6644: LD_EXP 28
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: LIST
6653: PPUSH
6654: LD_EXP 23
6658: PPUSH
6659: CALL_OW 119
// if pepAmount > 1 then
6663: LD_VAR 0 2
6667: PUSH
6668: LD_INT 1
6670: GREATER
6671: IFFALSE 6723
// begin wait ( 0 0$2 ) ;
6673: LD_INT 70
6675: PPUSH
6676: CALL_OW 67
// ComTurnUnit ( [ Kamil , Mike , Givi ] , Aviradze ) ;
6680: LD_EXP 26
6684: PUSH
6685: LD_EXP 25
6689: PUSH
6690: LD_EXP 24
6694: PUSH
6695: EMPTY
6696: LIST
6697: LIST
6698: LIST
6699: PPUSH
6700: LD_EXP 27
6704: PPUSH
6705: CALL_OW 119
// Say ( Heike , DH-2-spot ) ;
6709: LD_EXP 23
6713: PPUSH
6714: LD_STRING DH-2-spot
6716: PPUSH
6717: CALL_OW 88
// end else
6721: GO 6735
// Say ( Heike , DH-2-spot-d ) ;
6723: LD_EXP 23
6727: PPUSH
6728: LD_STRING DH-2-spot-d
6730: PPUSH
6731: CALL_OW 88
// Say ( Aviradze , DA-2-spot ) ;
6735: LD_EXP 27
6739: PPUSH
6740: LD_STRING DA-2-spot
6742: PPUSH
6743: CALL_OW 88
// Say ( Heike , DH-3-spot ) ;
6747: LD_EXP 23
6751: PPUSH
6752: LD_STRING DH-3-spot
6754: PPUSH
6755: CALL_OW 88
// ComMoveUnit ( Kaia , Heike ) ;
6759: LD_EXP 28
6763: PPUSH
6764: LD_EXP 23
6768: PPUSH
6769: CALL_OW 112
// ComTurnUnit ( Heike , Kaia ) ;
6773: LD_EXP 23
6777: PPUSH
6778: LD_EXP 28
6782: PPUSH
6783: CALL_OW 119
// wait ( 0 0$0.3 ) ;
6787: LD_INT 10
6789: PPUSH
6790: CALL_OW 67
// Say ( Kaia , DK-3-spot ) ;
6794: LD_EXP 28
6798: PPUSH
6799: LD_STRING DK-3-spot
6801: PPUSH
6802: CALL_OW 88
// ComTurnUnit ( Kaia , Heike ) ;
6806: LD_EXP 28
6810: PPUSH
6811: LD_EXP 23
6815: PPUSH
6816: CALL_OW 119
// Say ( Heike , DH-4-spot ) ;
6820: LD_EXP 23
6824: PPUSH
6825: LD_STRING DH-4-spot
6827: PPUSH
6828: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6832: LD_INT 10
6834: PPUSH
6835: CALL_OW 67
// ComTurnUnit ( Heike , Aviradze ) ;
6839: LD_EXP 23
6843: PPUSH
6844: LD_EXP 27
6848: PPUSH
6849: CALL_OW 119
// Say ( Aviradze , DA-4-spot ) ;
6853: LD_EXP 27
6857: PPUSH
6858: LD_STRING DA-4-spot
6860: PPUSH
6861: CALL_OW 88
// ComTurnUnit ( Kaia , Aviradze ) ;
6865: LD_EXP 28
6869: PPUSH
6870: LD_EXP 27
6874: PPUSH
6875: CALL_OW 119
// Say ( Kaia , DK-4-spot ) ;
6879: LD_EXP 28
6883: PPUSH
6884: LD_STRING DK-4-spot
6886: PPUSH
6887: CALL_OW 88
// ComTurnUnit ( Aviradze , Kaia ) ;
6891: LD_EXP 27
6895: PPUSH
6896: LD_EXP 28
6900: PPUSH
6901: CALL_OW 119
// Say ( Aviradze , DA-5-spot ) ;
6905: LD_EXP 27
6909: PPUSH
6910: LD_STRING DA-5-spot
6912: PPUSH
6913: CALL_OW 88
// Say ( Kaia , DK-5-spot ) ;
6917: LD_EXP 28
6921: PPUSH
6922: LD_STRING DK-5-spot
6924: PPUSH
6925: CALL_OW 88
// if pepAmount = 1 then
6929: LD_VAR 0 2
6933: PUSH
6934: LD_INT 1
6936: EQUAL
6937: IFFALSE 6951
// Say ( Heike , DH-5-spot-f ) ;
6939: LD_EXP 23
6943: PPUSH
6944: LD_STRING DH-5-spot-f
6946: PPUSH
6947: CALL_OW 88
// if pepAmount < 3 then
6951: LD_VAR 0 2
6955: PUSH
6956: LD_INT 3
6958: LESS
6959: IFFALSE 6975
// Say ( Aviradze , DA-6-spot-f ) else
6961: LD_EXP 27
6965: PPUSH
6966: LD_STRING DA-6-spot-f
6968: PPUSH
6969: CALL_OW 88
6973: GO 7011
// if pepAmount < 4 then
6975: LD_VAR 0 2
6979: PUSH
6980: LD_INT 4
6982: LESS
6983: IFFALSE 6999
// Say ( Aviradze , DA-6-spot-c ) else
6985: LD_EXP 27
6989: PPUSH
6990: LD_STRING DA-6-spot-c
6992: PPUSH
6993: CALL_OW 88
6997: GO 7011
// Say ( Aviradze , DA-6-spot ) ;
6999: LD_EXP 27
7003: PPUSH
7004: LD_STRING DA-6-spot
7006: PPUSH
7007: CALL_OW 88
// if Kamil then
7011: LD_EXP 26
7015: IFFALSE 7029
// Say ( Kamil , DKam-6-spot ) ;
7017: LD_EXP 26
7021: PPUSH
7022: LD_STRING DKam-6-spot
7024: PPUSH
7025: CALL_OW 88
// Say ( Kaia , DK-6-spot ) ;
7029: LD_EXP 28
7033: PPUSH
7034: LD_STRING DK-6-spot
7036: PPUSH
7037: CALL_OW 88
// ComTurnUnit ( Aviradze , Heike ) ;
7041: LD_EXP 27
7045: PPUSH
7046: LD_EXP 23
7050: PPUSH
7051: CALL_OW 119
// Say ( Aviradze , DA-7-spot ) ;
7055: LD_EXP 27
7059: PPUSH
7060: LD_STRING DA-7-spot
7062: PPUSH
7063: CALL_OW 88
// Say ( Heike , DH-7-spot ) ;
7067: LD_EXP 23
7071: PPUSH
7072: LD_STRING DH-7-spot
7074: PPUSH
7075: CALL_OW 88
// if sciCounterKill >= 3 then
7079: LD_EXP 9
7083: PUSH
7084: LD_INT 3
7086: GREATEREQUAL
7087: IFFALSE 7113
// begin Say ( Heike , DH-7-spot-a ) ;
7089: LD_EXP 23
7093: PPUSH
7094: LD_STRING DH-7-spot-a
7096: PPUSH
7097: CALL_OW 88
// Say ( Aviradze , DA-8-spot-a ) ;
7101: LD_EXP 27
7105: PPUSH
7106: LD_STRING DA-8-spot-a
7108: PPUSH
7109: CALL_OW 88
// end ; InGameOff ;
7113: CALL_OW 9
// if sciCounterKill < 3 then
7117: LD_EXP 9
7121: PUSH
7122: LD_INT 3
7124: LESS
7125: IFFALSE 7193
// begin SetSide ( Kaia , 2 ) ;
7127: LD_EXP 28
7131: PPUSH
7132: LD_INT 2
7134: PPUSH
7135: CALL_OW 235
// ComFree ( Kaia ) ;
7139: LD_EXP 28
7143: PPUSH
7144: CALL_OW 139
// if Kamil then
7148: LD_EXP 26
7152: IFFALSE 7175
// begin ComHold ( Kamil ) ;
7154: LD_EXP 26
7158: PPUSH
7159: CALL_OW 140
// SetSide ( Kamil , 5 ) ;
7163: LD_EXP 26
7167: PPUSH
7168: LD_INT 5
7170: PPUSH
7171: CALL_OW 235
// end ; ChangeMissionObjectives ( OSci ) ;
7175: LD_STRING OSci
7177: PPUSH
7178: CALL_OW 337
// ComFree ( Aviradze ) ;
7182: LD_EXP 27
7186: PPUSH
7187: CALL_OW 139
// end else
7191: GO 7255
// begin aviradzeQuestDone := true ;
7193: LD_ADDR_EXP 8
7197: PUSH
7198: LD_INT 1
7200: ST_TO_ADDR
// attackDeltaAllowed := true ;
7201: LD_ADDR_EXP 14
7205: PUSH
7206: LD_INT 1
7208: ST_TO_ADDR
// ChangeMissionObjectives ( ODelta2 ) ;
7209: LD_STRING ODelta2
7211: PPUSH
7212: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
7216: LD_ADDR_VAR 0 1
7220: PUSH
7221: LD_INT 22
7223: PUSH
7224: LD_INT 5
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: PPUSH
7231: CALL_OW 69
7235: PUSH
7236: FOR_IN
7237: IFFALSE 7253
// SetSide ( i , 2 ) ;
7239: LD_VAR 0 1
7243: PPUSH
7244: LD_INT 2
7246: PPUSH
7247: CALL_OW 235
7251: GO 7236
7253: POP
7254: POP
// end ; end ;
7255: PPOPN 2
7257: END
// every 0 0$2 trigger GetDistUnitXY ( Aviradze , 106 , 38 ) > 8 and GetSide ( Aviradze ) = 5 do
7258: LD_EXP 27
7262: PPUSH
7263: LD_INT 106
7265: PPUSH
7266: LD_INT 38
7268: PPUSH
7269: CALL_OW 297
7273: PUSH
7274: LD_INT 8
7276: GREATER
7277: PUSH
7278: LD_EXP 27
7282: PPUSH
7283: CALL_OW 255
7287: PUSH
7288: LD_INT 5
7290: EQUAL
7291: AND
7292: IFFALSE 7313
7294: GO 7296
7296: DISABLE
// begin enable ;
7297: ENABLE
// ComMoveXY ( Aviradze , 106 , 38 ) ;
7298: LD_EXP 27
7302: PPUSH
7303: LD_INT 106
7305: PPUSH
7306: LD_INT 38
7308: PPUSH
7309: CALL_OW 111
// end ;
7313: END
// every 0 0$2 trigger usAlert and not aviradzeQuestDone do
7314: LD_EXP 10
7318: PUSH
7319: LD_EXP 8
7323: NOT
7324: AND
7325: IFFALSE 7342
7327: GO 7329
7329: DISABLE
// SayRadioNoFaceNoName ( Lynch , DDelta-Alarm-1 ) ;
7330: LD_EXP 20
7334: PPUSH
7335: LD_STRING DDelta-Alarm-1
7337: PPUSH
7338: CALL 74066 0 2
7342: END
// every 0 0$1 trigger not sciSpotted and GetDistUnits ( NearestUnitToUnit ( usSci , Heike ) , Heike ) < 8 and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and not aviradzeSpotted do
7343: LD_EXP 7
7347: NOT
7348: PUSH
7349: LD_EXP 22
7353: PPUSH
7354: LD_EXP 23
7358: PPUSH
7359: CALL_OW 74
7363: PPUSH
7364: LD_EXP 23
7368: PPUSH
7369: CALL_OW 296
7373: PUSH
7374: LD_INT 8
7376: LESS
7377: AND
7378: PUSH
7379: LD_INT 2
7381: PPUSH
7382: LD_EXP 22
7386: PPUSH
7387: LD_EXP 23
7391: PPUSH
7392: CALL_OW 74
7396: PPUSH
7397: CALL_OW 292
7401: AND
7402: PUSH
7403: LD_INT 22
7405: PUSH
7406: LD_INT 2
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 21
7415: PUSH
7416: LD_INT 1
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: PPUSH
7427: CALL_OW 69
7431: PUSH
7432: LD_INT 1
7434: GREATER
7435: AND
7436: PUSH
7437: LD_EXP 4
7441: NOT
7442: AND
7443: IFFALSE 7487
7445: GO 7447
7447: DISABLE
// begin sciSpotted := true ;
7448: LD_ADDR_EXP 7
7452: PUSH
7453: LD_INT 1
7455: ST_TO_ADDR
// CenterNowOnUnits ( NearestUnitToUnit ( usSci , Heike ) ) ;
7456: LD_EXP 22
7460: PPUSH
7461: LD_EXP 23
7465: PPUSH
7466: CALL_OW 74
7470: PPUSH
7471: CALL_OW 87
// Say ( Heike , DH-1-sci ) ;
7475: LD_EXP 23
7479: PPUSH
7480: LD_STRING DH-1-sci
7482: PPUSH
7483: CALL_OW 88
// end ;
7487: END
// every 0 0$1 trigger aviradzeSpotted and not sciSpotted and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and aviradzeSpotted and not aviradzeQuestDone do var un ;
7488: LD_EXP 4
7492: PUSH
7493: LD_EXP 7
7497: NOT
7498: AND
7499: PUSH
7500: LD_INT 2
7502: PPUSH
7503: LD_EXP 22
7507: PPUSH
7508: LD_EXP 23
7512: PPUSH
7513: CALL_OW 74
7517: PPUSH
7518: CALL_OW 292
7522: AND
7523: PUSH
7524: LD_INT 22
7526: PUSH
7527: LD_INT 2
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: PUSH
7534: LD_INT 21
7536: PUSH
7537: LD_INT 1
7539: PUSH
7540: EMPTY
7541: LIST
7542: LIST
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: PPUSH
7548: CALL_OW 69
7552: PUSH
7553: LD_INT 1
7555: GREATER
7556: AND
7557: PUSH
7558: LD_EXP 4
7562: AND
7563: PUSH
7564: LD_EXP 8
7568: NOT
7569: AND
7570: IFFALSE 7711
7572: GO 7574
7574: DISABLE
7575: LD_INT 0
7577: PPUSH
// begin sciSpotted := true ;
7578: LD_ADDR_EXP 7
7582: PUSH
7583: LD_INT 1
7585: ST_TO_ADDR
// un := NearestUnitToUnit ( usSci , Heike ) ;
7586: LD_ADDR_VAR 0 1
7590: PUSH
7591: LD_EXP 22
7595: PPUSH
7596: LD_EXP 23
7600: PPUSH
7601: CALL_OW 74
7605: ST_TO_ADDR
// DialogueOn ;
7606: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 2 , - 3 ) ;
7610: LD_VAR 0 1
7614: PPUSH
7615: CALL_OW 250
7619: PPUSH
7620: LD_VAR 0 1
7624: PPUSH
7625: CALL_OW 251
7629: PPUSH
7630: LD_INT 2
7632: PPUSH
7633: LD_INT 3
7635: NEG
7636: PPUSH
7637: CALL_OW 330
// CenterNowOnUnits ( un ) ;
7641: LD_VAR 0 1
7645: PPUSH
7646: CALL_OW 87
// Say ( Heike , DH-1-sci-a ) ;
7650: LD_EXP 23
7654: PPUSH
7655: LD_STRING DH-1-sci-a
7657: PPUSH
7658: CALL_OW 88
// if Mike then
7662: LD_EXP 25
7666: IFFALSE 7680
// Say ( Mike , DM-1-sci-a ) ;
7668: LD_EXP 25
7672: PPUSH
7673: LD_STRING DM-1-sci-a
7675: PPUSH
7676: CALL_OW 88
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 2 ) ;
7680: LD_VAR 0 1
7684: PPUSH
7685: CALL_OW 250
7689: PPUSH
7690: LD_VAR 0 1
7694: PPUSH
7695: CALL_OW 251
7699: PPUSH
7700: LD_INT 2
7702: PPUSH
7703: CALL_OW 331
// DialogueOff ;
7707: CALL_OW 7
// end ;
7711: PPOPN 1
7713: END
// every 0 0$1 trigger usAlert and ( GetLives ( Gladstone ) < 1000 or GetLives ( usLab ) < 999 ) do var veh ;
7714: LD_EXP 10
7718: PUSH
7719: LD_EXP 19
7723: PPUSH
7724: CALL_OW 256
7728: PUSH
7729: LD_INT 1000
7731: LESS
7732: PUSH
7733: LD_INT 3
7735: PPUSH
7736: CALL_OW 256
7740: PUSH
7741: LD_INT 999
7743: LESS
7744: OR
7745: AND
7746: IFFALSE 8002
7748: GO 7750
7750: DISABLE
7751: LD_INT 0
7753: PPUSH
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
7754: LD_ADDR_VAR 0 1
7758: PUSH
7759: LD_INT 22
7761: PUSH
7762: LD_INT 1
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: PUSH
7769: LD_INT 21
7771: PUSH
7772: LD_INT 2
7774: PUSH
7775: EMPTY
7776: LIST
7777: LIST
7778: PUSH
7779: LD_INT 58
7781: PUSH
7782: EMPTY
7783: LIST
7784: PUSH
7785: EMPTY
7786: LIST
7787: LIST
7788: LIST
7789: PPUSH
7790: CALL_OW 69
7794: ST_TO_ADDR
// if veh and IsOk ( Gladstone ) then
7795: LD_VAR 0 1
7799: PUSH
7800: LD_EXP 19
7804: PPUSH
7805: CALL_OW 302
7809: AND
7810: IFFALSE 7852
// begin if IsInUnit ( Gladstone ) then
7812: LD_EXP 19
7816: PPUSH
7817: CALL_OW 310
7821: IFFALSE 7832
// ComExitBuilding ( Gladstone ) ;
7823: LD_EXP 19
7827: PPUSH
7828: CALL_OW 122
// AddComEnterUnit ( Gladstone , veh [ 1 ] ) ;
7832: LD_EXP 19
7836: PPUSH
7837: LD_VAR 0 1
7841: PUSH
7842: LD_INT 1
7844: ARRAY
7845: PPUSH
7846: CALL_OW 180
// end else
7850: GO 7872
// if IsInUnit ( Gladstone ) then
7852: LD_EXP 19
7856: PPUSH
7857: CALL_OW 310
7861: IFFALSE 7872
// ComExitBuilding ( Gladstone ) ;
7863: LD_EXP 19
7867: PPUSH
7868: CALL_OW 122
// AddComMoveXY ( Gladstone , 27 , 51 ) ;
7872: LD_EXP 19
7876: PPUSH
7877: LD_INT 27
7879: PPUSH
7880: LD_INT 51
7882: PPUSH
7883: CALL_OW 171
// Say ( Gladstone , D8-Glad-2 ) ;
7887: LD_EXP 19
7891: PPUSH
7892: LD_STRING D8-Glad-2
7894: PPUSH
7895: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7899: LD_INT 35
7901: PPUSH
7902: CALL_OW 67
// until IsAt ( Gladstone , 27 , 51 ) or IsAt ( IsInUnit ( Gladstone ) , 27 , 51 ) or IsDead ( Gladstone ) ;
7906: LD_EXP 19
7910: PPUSH
7911: LD_INT 27
7913: PPUSH
7914: LD_INT 51
7916: PPUSH
7917: CALL_OW 307
7921: PUSH
7922: LD_EXP 19
7926: PPUSH
7927: CALL_OW 310
7931: PPUSH
7932: LD_INT 27
7934: PPUSH
7935: LD_INT 51
7937: PPUSH
7938: CALL_OW 307
7942: OR
7943: PUSH
7944: LD_EXP 19
7948: PPUSH
7949: CALL_OW 301
7953: OR
7954: IFFALSE 7899
// if IsDead ( Gladstone ) then
7956: LD_EXP 19
7960: PPUSH
7961: CALL_OW 301
7965: IFFALSE 7969
// exit ;
7967: GO 8002
// RemoveUnit ( HexInfo ( 27 , 51 ) ) ;
7969: LD_INT 27
7971: PPUSH
7972: LD_INT 51
7974: PPUSH
7975: CALL_OW 428
7979: PPUSH
7980: CALL_OW 64
// gladstoneEscaped := true ;
7984: LD_ADDR_EXP 12
7988: PUSH
7989: LD_INT 1
7991: ST_TO_ADDR
// SaveVariable ( true , 02_GladstoneEscaped ) ;
7992: LD_INT 1
7994: PPUSH
7995: LD_STRING 02_GladstoneEscaped
7997: PPUSH
7998: CALL_OW 39
// end ;
8002: PPOPN 1
8004: END
// every 0 0$1 trigger aviradzeSpotted and ( sciCounterKill >= 3 or not usSci ) and not aviradzeQuestDone do
8005: LD_EXP 4
8009: PUSH
8010: LD_EXP 9
8014: PUSH
8015: LD_INT 3
8017: GREATEREQUAL
8018: PUSH
8019: LD_EXP 22
8023: NOT
8024: OR
8025: AND
8026: PUSH
8027: LD_EXP 8
8031: NOT
8032: AND
8033: IFFALSE 8076
8035: GO 8037
8037: DISABLE
// begin aviradzeQuestDone := true ;
8038: LD_ADDR_EXP 8
8042: PUSH
8043: LD_INT 1
8045: ST_TO_ADDR
// Say ( Heike , DH-1-quest-done ) ;
8046: LD_EXP 23
8050: PPUSH
8051: LD_STRING DH-1-quest-done
8053: PPUSH
8054: CALL_OW 88
// if Givi then
8058: LD_EXP 24
8062: IFFALSE 8076
// Say ( Givi , DG-1-quest-done ) ;
8064: LD_EXP 24
8068: PPUSH
8069: LD_STRING DG-1-quest-done
8071: PPUSH
8072: CALL_OW 88
// end ;
8076: END
// every 0 0$1 trigger FilterUnitsInArea ( frontlineAttack , [ f_side , 2 ] ) > 1 and GetSide ( Delta ) = 2 and IsOk ( Mike ) and IsOk ( Heike ) do
8077: LD_INT 11
8079: PPUSH
8080: LD_INT 22
8082: PUSH
8083: LD_INT 2
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: PPUSH
8090: CALL_OW 70
8094: PUSH
8095: LD_INT 1
8097: GREATER
8098: PUSH
8099: LD_INT 1
8101: PPUSH
8102: CALL_OW 255
8106: PUSH
8107: LD_INT 2
8109: EQUAL
8110: AND
8111: PUSH
8112: LD_EXP 25
8116: PPUSH
8117: CALL_OW 302
8121: AND
8122: PUSH
8123: LD_EXP 23
8127: PPUSH
8128: CALL_OW 302
8132: AND
8133: IFFALSE 8278
8135: GO 8137
8137: DISABLE
// begin DialogueOn ;
8138: CALL_OW 6
// PlaceSeeing ( 47 , 19 , 2 , - 6 ) ;
8142: LD_INT 47
8144: PPUSH
8145: LD_INT 19
8147: PPUSH
8148: LD_INT 2
8150: PPUSH
8151: LD_INT 6
8153: NEG
8154: PPUSH
8155: CALL_OW 330
// RemoveSeeing ( 47 , 19 , 2 ) ;
8159: LD_INT 47
8161: PPUSH
8162: LD_INT 19
8164: PPUSH
8165: LD_INT 2
8167: PPUSH
8168: CALL_OW 331
// PlaceSeeing ( 34 , 32 , 2 , - 6 ) ;
8172: LD_INT 34
8174: PPUSH
8175: LD_INT 32
8177: PPUSH
8178: LD_INT 2
8180: PPUSH
8181: LD_INT 6
8183: NEG
8184: PPUSH
8185: CALL_OW 330
// RemoveSeeing ( 34 , 32 , 2 ) ;
8189: LD_INT 34
8191: PPUSH
8192: LD_INT 32
8194: PPUSH
8195: LD_INT 2
8197: PPUSH
8198: CALL_OW 331
// Say ( Mike , DM-Prem-1 ) ;
8202: LD_EXP 25
8206: PPUSH
8207: LD_STRING DM-Prem-1
8209: PPUSH
8210: CALL_OW 88
// Say ( Heike , DH-Prem-2 ) ;
8214: LD_EXP 23
8218: PPUSH
8219: LD_STRING DH-Prem-2
8221: PPUSH
8222: CALL_OW 88
// Say ( Heike , DH-Prem-3 ) ;
8226: LD_EXP 23
8230: PPUSH
8231: LD_STRING DH-Prem-3
8233: PPUSH
8234: CALL_OW 88
// Say ( Mike , DM-Prem-4 ) ;
8238: LD_EXP 25
8242: PPUSH
8243: LD_STRING DM-Prem-4
8245: PPUSH
8246: CALL_OW 88
// Say ( Mike , DM-Prem-5 ) ;
8250: LD_EXP 25
8254: PPUSH
8255: LD_STRING DM-Prem-5
8257: PPUSH
8258: CALL_OW 88
// Say ( Givi , DG-Prem-6 ) ;
8262: LD_EXP 24
8266: PPUSH
8267: LD_STRING DG-Prem-6
8269: PPUSH
8270: CALL_OW 88
// DialogueOff ;
8274: CALL_OW 7
// end ;
8278: END
// every 0 0$1 trigger See ( 5 , Heike ) and GetDistUnits ( Heike , Aviradze ) < 6 and aviradzeQuestDone and not attackDeltaAllowed do var i ;
8279: LD_INT 5
8281: PPUSH
8282: LD_EXP 23
8286: PPUSH
8287: CALL_OW 292
8291: PUSH
8292: LD_EXP 23
8296: PPUSH
8297: LD_EXP 27
8301: PPUSH
8302: CALL_OW 296
8306: PUSH
8307: LD_INT 6
8309: LESS
8310: AND
8311: PUSH
8312: LD_EXP 8
8316: AND
8317: PUSH
8318: LD_EXP 14
8322: NOT
8323: AND
8324: IFFALSE 8462
8326: GO 8328
8328: DISABLE
8329: LD_INT 0
8331: PPUSH
// begin attackDeltaAllowed := true ;
8332: LD_ADDR_EXP 14
8336: PUSH
8337: LD_INT 1
8339: ST_TO_ADDR
// InGameOn ;
8340: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
8344: LD_EXP 23
8348: PPUSH
8349: CALL_OW 87
// wait ( 0 0$0.3 ) ;
8353: LD_INT 10
8355: PPUSH
8356: CALL_OW 67
// ComTurnUnit ( Aviradze , Heike ) ;
8360: LD_EXP 27
8364: PPUSH
8365: LD_EXP 23
8369: PPUSH
8370: CALL_OW 119
// ComTurnUnit ( Heike , Aviradze ) ;
8374: LD_EXP 23
8378: PPUSH
8379: LD_EXP 27
8383: PPUSH
8384: CALL_OW 119
// Say ( Heike , DH-1-return ) ;
8388: LD_EXP 23
8392: PPUSH
8393: LD_STRING DH-1-return
8395: PPUSH
8396: CALL_OW 88
// Say ( Aviradze , DA-1-return ) ;
8400: LD_EXP 27
8404: PPUSH
8405: LD_STRING DA-1-return
8407: PPUSH
8408: CALL_OW 88
// InGameOff ;
8412: CALL_OW 9
// ChangeMissionObjectives ( ODelta ) ;
8416: LD_STRING ODelta
8418: PPUSH
8419: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
8423: LD_ADDR_VAR 0 1
8427: PUSH
8428: LD_INT 22
8430: PUSH
8431: LD_INT 5
8433: PUSH
8434: EMPTY
8435: LIST
8436: LIST
8437: PPUSH
8438: CALL_OW 69
8442: PUSH
8443: FOR_IN
8444: IFFALSE 8460
// SetSide ( i , 2 ) ;
8446: LD_VAR 0 1
8450: PPUSH
8451: LD_INT 2
8453: PPUSH
8454: CALL_OW 235
8458: GO 8443
8460: POP
8461: POP
// end ;
8462: PPOPN 1
8464: END
// every 0 0$1 trigger usAlert and not attackDeltaAllowed do
8465: LD_EXP 10
8469: PUSH
8470: LD_EXP 14
8474: NOT
8475: AND
8476: IFFALSE 8489
8478: GO 8480
8480: DISABLE
// spottedBeforeRadio := true ;
8481: LD_ADDR_EXP 6
8485: PUSH
8486: LD_INT 1
8488: ST_TO_ADDR
8489: END
// every 0 0$1 trigger attackDeltaAllowed and IsOk ( Markov ) and GetSide ( Delta ) = 1 and IsOk ( Lynch ) and not usAlert do var i , k , tmp ;
8490: LD_EXP 14
8494: PUSH
8495: LD_EXP 30
8499: PPUSH
8500: CALL_OW 302
8504: AND
8505: PUSH
8506: LD_INT 1
8508: PPUSH
8509: CALL_OW 255
8513: PUSH
8514: LD_INT 1
8516: EQUAL
8517: AND
8518: PUSH
8519: LD_EXP 20
8523: PPUSH
8524: CALL_OW 302
8528: AND
8529: PUSH
8530: LD_EXP 10
8534: NOT
8535: AND
8536: IFFALSE 9764
8538: GO 8540
8540: DISABLE
8541: LD_INT 0
8543: PPUSH
8544: PPUSH
8545: PPUSH
// begin trap := 0 ;
8546: LD_ADDR_EXP 17
8550: PUSH
8551: LD_INT 0
8553: ST_TO_ADDR
// wait ( 0 0$12 ) ;
8554: LD_INT 420
8556: PPUSH
8557: CALL_OW 67
// DialogueOn ;
8561: CALL_OW 6
// Say ( Markov , DMar-1-radio ) ;
8565: LD_EXP 30
8569: PPUSH
8570: LD_STRING DMar-1-radio
8572: PPUSH
8573: CALL_OW 88
// Say ( Heike , DH-1-radio ) ;
8577: LD_EXP 23
8581: PPUSH
8582: LD_STRING DH-1-radio
8584: PPUSH
8585: CALL_OW 88
// Say ( Markov , DMar-2-radio ) ;
8589: LD_EXP 30
8593: PPUSH
8594: LD_STRING DMar-2-radio
8596: PPUSH
8597: CALL_OW 88
// Say ( Heike , DH-2-radio ) ;
8601: LD_EXP 23
8605: PPUSH
8606: LD_STRING DH-2-radio
8608: PPUSH
8609: CALL_OW 88
// if IsOk ( Kamil ) or IsOk ( Sophia ) then
8613: LD_EXP 26
8617: PPUSH
8618: CALL_OW 302
8622: PUSH
8623: LD_EXP 29
8627: PPUSH
8628: CALL_OW 302
8632: OR
8633: IFFALSE 9764
// begin case Query ( Q1Trap ) of 1 :
8635: LD_STRING Q1Trap
8637: PPUSH
8638: CALL_OW 97
8642: PUSH
8643: LD_INT 1
8645: DOUBLE
8646: EQUAL
8647: IFTRUE 8651
8649: GO 8857
8651: POP
// begin if IsOk ( Kamil ) then
8652: LD_EXP 26
8656: PPUSH
8657: CALL_OW 302
8661: IFFALSE 8740
// begin Say ( Kamil , DKam-2-radio ) ;
8663: LD_EXP 26
8667: PPUSH
8668: LD_STRING DKam-2-radio
8670: PPUSH
8671: CALL_OW 88
// Say ( Kamil , DKam-3-radio ) ;
8675: LD_EXP 26
8679: PPUSH
8680: LD_STRING DKam-3-radio
8682: PPUSH
8683: CALL_OW 88
// SayRadioNoFaceNoName ( Lynch , DDelta-3-radio ) ;
8687: LD_EXP 20
8691: PPUSH
8692: LD_STRING DDelta-3-radio
8694: PPUSH
8695: CALL 74066 0 2
// dwait ( 0 0$01 ) ;
8699: LD_INT 35
8701: PPUSH
8702: CALL_OW 68
// Say ( Heike , DH-3-radio ) ;
8706: LD_EXP 23
8710: PPUSH
8711: LD_STRING DH-3-radio
8713: PPUSH
8714: CALL_OW 88
// Say ( Kamil , DKam-4-radio ) ;
8718: LD_EXP 26
8722: PPUSH
8723: LD_STRING DKam-4-radio
8725: PPUSH
8726: CALL_OW 88
// trap := 1 ;
8730: LD_ADDR_EXP 17
8734: PUSH
8735: LD_INT 1
8737: ST_TO_ADDR
// end else
8738: GO 8851
// begin Say ( Sophia , DS-1-radio ) ;
8740: LD_EXP 29
8744: PPUSH
8745: LD_STRING DS-1-radio
8747: PPUSH
8748: CALL_OW 88
// Say ( Sophia , DS-2-radio ) ;
8752: LD_EXP 29
8756: PPUSH
8757: LD_STRING DS-2-radio
8759: PPUSH
8760: CALL_OW 88
// SayRadioNoFaceNoName ( Lynch , DDelta-2-radio-s ) ;
8764: LD_EXP 20
8768: PPUSH
8769: LD_STRING DDelta-2-radio-s
8771: PPUSH
8772: CALL 74066 0 2
// Say ( Sophia , DS-3-radio ) ;
8776: LD_EXP 29
8780: PPUSH
8781: LD_STRING DS-3-radio
8783: PPUSH
8784: CALL_OW 88
// SayRadioNoFaceNoName ( Lynch , DDelta-3-radio-s ) ;
8788: LD_EXP 20
8792: PPUSH
8793: LD_STRING DDelta-3-radio-s
8795: PPUSH
8796: CALL 74066 0 2
// Say ( Sophia , DS-4-radio-s ) ;
8800: LD_EXP 29
8804: PPUSH
8805: LD_STRING DS-4-radio-s
8807: PPUSH
8808: CALL_OW 88
// SayRadioNoFaceNoName ( Lynch , DDelta-4-radio-s ) ;
8812: LD_EXP 20
8816: PPUSH
8817: LD_STRING DDelta-4-radio-s
8819: PPUSH
8820: CALL 74066 0 2
// dwait ( 0 0$01 ) ;
8824: LD_INT 35
8826: PPUSH
8827: CALL_OW 68
// Say ( Heike , DH-1-trap ) ;
8831: LD_EXP 23
8835: PPUSH
8836: LD_STRING DH-1-trap
8838: PPUSH
8839: CALL_OW 88
// trap := 0 ;
8843: LD_ADDR_EXP 17
8847: PUSH
8848: LD_INT 0
8850: ST_TO_ADDR
// end ; DialogueOff ;
8851: CALL_OW 7
// end ; 2 :
8855: GO 8875
8857: LD_INT 2
8859: DOUBLE
8860: EQUAL
8861: IFTRUE 8865
8863: GO 8874
8865: POP
// begin DialogueOff ;
8866: CALL_OW 7
// exit ;
8870: GO 9764
// end ; end ;
8872: GO 8875
8874: POP
// if trap = 1 then
8875: LD_EXP 17
8879: PUSH
8880: LD_INT 1
8882: EQUAL
8883: IFFALSE 9335
// begin PlaceSeeing ( 64 , 32 , 2 , 8 ) ;
8885: LD_INT 64
8887: PPUSH
8888: LD_INT 32
8890: PPUSH
8891: LD_INT 2
8893: PPUSH
8894: LD_INT 8
8896: PPUSH
8897: CALL_OW 330
// CenterOnXY ( 64 , 32 ) ;
8901: LD_INT 64
8903: PPUSH
8904: LD_INT 32
8906: PPUSH
8907: CALL_OW 84
// tmp := [ ] ;
8911: LD_ADDR_VAR 0 3
8915: PUSH
8916: EMPTY
8917: ST_TO_ADDR
// k := 3 ;
8918: LD_ADDR_VAR 0 2
8922: PUSH
8923: LD_INT 3
8925: ST_TO_ADDR
// if usForces < 3 then
8926: LD_EXP 21
8930: PUSH
8931: LD_INT 3
8933: LESS
8934: IFFALSE 8946
// k := usForces ;
8936: LD_ADDR_VAR 0 2
8940: PUSH
8941: LD_EXP 21
8945: ST_TO_ADDR
// for i := 1 to k do
8946: LD_ADDR_VAR 0 1
8950: PUSH
8951: DOUBLE
8952: LD_INT 1
8954: DEC
8955: ST_TO_ADDR
8956: LD_VAR 0 2
8960: PUSH
8961: FOR_TO
8962: IFFALSE 9017
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
8964: LD_ADDR_VAR 0 3
8968: PUSH
8969: LD_VAR 0 3
8973: PPUSH
8974: LD_VAR 0 3
8978: PUSH
8979: LD_INT 1
8981: PLUS
8982: PPUSH
8983: LD_EXP 21
8987: PUSH
8988: LD_INT 1
8990: ARRAY
8991: PPUSH
8992: CALL_OW 1
8996: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
8997: LD_ADDR_EXP 21
9001: PUSH
9002: LD_EXP 21
9006: PPUSH
9007: LD_INT 1
9009: PPUSH
9010: CALL_OW 3
9014: ST_TO_ADDR
// end ;
9015: GO 8961
9017: POP
9018: POP
// usPatrol := tmp ;
9019: LD_ADDR_EXP 16
9023: PUSH
9024: LD_VAR 0 3
9028: ST_TO_ADDR
// for i in tmp do
9029: LD_ADDR_VAR 0 1
9033: PUSH
9034: LD_VAR 0 3
9038: PUSH
9039: FOR_IN
9040: IFFALSE 9170
// begin if IsInUnit ( i ) then
9042: LD_VAR 0 1
9046: PPUSH
9047: CALL_OW 310
9051: IFFALSE 9062
// ComExitBuilding ( i ) ;
9053: LD_VAR 0 1
9057: PPUSH
9058: CALL_OW 122
// AddComAgressiveMove ( i , 63 , 31 ) ;
9062: LD_VAR 0 1
9066: PPUSH
9067: LD_INT 63
9069: PPUSH
9070: LD_INT 31
9072: PPUSH
9073: CALL_OW 174
// AddComWait ( i , 0 0$2 ) ;
9077: LD_VAR 0 1
9081: PPUSH
9082: LD_INT 70
9084: PPUSH
9085: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 43 ) ;
9089: LD_VAR 0 1
9093: PPUSH
9094: LD_INT 103
9096: PPUSH
9097: LD_INT 43
9099: PPUSH
9100: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
9104: LD_VAR 0 1
9108: PPUSH
9109: LD_INT 105
9111: PPUSH
9112: CALL_OW 202
// if Difficulty > 1 then
9116: LD_OWVAR 67
9120: PUSH
9121: LD_INT 1
9123: GREATER
9124: IFFALSE 9141
// AddComAgressiveMove ( i , 114 , 69 ) ;
9126: LD_VAR 0 1
9130: PPUSH
9131: LD_INT 114
9133: PPUSH
9134: LD_INT 69
9136: PPUSH
9137: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
9141: LD_VAR 0 1
9145: PPUSH
9146: LD_INT 105
9148: PPUSH
9149: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9153: LD_VAR 0 1
9157: PPUSH
9158: LD_INT 42
9160: PPUSH
9161: LD_INT 20
9163: PPUSH
9164: CALL_OW 174
// end ;
9168: GO 9039
9170: POP
9171: POP
// wait ( 0 0$8 ) ;
9172: LD_INT 280
9174: PPUSH
9175: CALL_OW 67
// RemoveSeeing ( 64 , 32 , 2 ) ;
9179: LD_INT 64
9181: PPUSH
9182: LD_INT 32
9184: PPUSH
9185: LD_INT 2
9187: PPUSH
9188: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
9192: LD_INT 35
9194: PPUSH
9195: CALL_OW 67
// for i in tmp do
9199: LD_ADDR_VAR 0 1
9203: PUSH
9204: LD_VAR 0 3
9208: PUSH
9209: FOR_IN
9210: IFFALSE 9241
// if IsDead ( i ) then
9212: LD_VAR 0 1
9216: PPUSH
9217: CALL_OW 301
9221: IFFALSE 9239
// tmp := tmp diff i ;
9223: LD_ADDR_VAR 0 3
9227: PUSH
9228: LD_VAR 0 3
9232: PUSH
9233: LD_VAR 0 1
9237: DIFF
9238: ST_TO_ADDR
9239: GO 9209
9241: POP
9242: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9243: LD_VAR 0 3
9247: NOT
9248: PUSH
9249: LD_VAR 0 3
9253: PPUSH
9254: LD_INT 95
9256: PUSH
9257: LD_INT 7
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: PUSH
9264: LD_INT 3
9266: PUSH
9267: LD_INT 60
9269: PUSH
9270: EMPTY
9271: LIST
9272: PUSH
9273: EMPTY
9274: LIST
9275: LIST
9276: PUSH
9277: EMPTY
9278: LIST
9279: LIST
9280: PPUSH
9281: CALL_OW 72
9285: PUSH
9286: LD_VAR 0 3
9290: EQUAL
9291: OR
9292: IFFALSE 9192
// if tmp then
9294: LD_VAR 0 3
9298: IFFALSE 9325
// begin usPatrol := [ ] ;
9300: LD_ADDR_EXP 16
9304: PUSH
9305: EMPTY
9306: ST_TO_ADDR
// usForces := usForces union tmp ;
9307: LD_ADDR_EXP 21
9311: PUSH
9312: LD_EXP 21
9316: PUSH
9317: LD_VAR 0 3
9321: UNION
9322: ST_TO_ADDR
// end else
9323: GO 9333
// trickyMove := true ;
9325: LD_ADDR_EXP 15
9329: PUSH
9330: LD_INT 1
9332: ST_TO_ADDR
// end else
9333: GO 9764
// begin tmp := [ ] ;
9335: LD_ADDR_VAR 0 3
9339: PUSH
9340: EMPTY
9341: ST_TO_ADDR
// k := 4 ;
9342: LD_ADDR_VAR 0 2
9346: PUSH
9347: LD_INT 4
9349: ST_TO_ADDR
// if usForces < 4 then
9350: LD_EXP 21
9354: PUSH
9355: LD_INT 4
9357: LESS
9358: IFFALSE 9370
// k := usForces ;
9360: LD_ADDR_VAR 0 2
9364: PUSH
9365: LD_EXP 21
9369: ST_TO_ADDR
// for i := 1 to k do
9370: LD_ADDR_VAR 0 1
9374: PUSH
9375: DOUBLE
9376: LD_INT 1
9378: DEC
9379: ST_TO_ADDR
9380: LD_VAR 0 2
9384: PUSH
9385: FOR_TO
9386: IFFALSE 9441
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
9388: LD_ADDR_VAR 0 3
9392: PUSH
9393: LD_VAR 0 3
9397: PPUSH
9398: LD_VAR 0 3
9402: PUSH
9403: LD_INT 1
9405: PLUS
9406: PPUSH
9407: LD_EXP 21
9411: PUSH
9412: LD_INT 1
9414: ARRAY
9415: PPUSH
9416: CALL_OW 1
9420: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
9421: LD_ADDR_EXP 21
9425: PUSH
9426: LD_EXP 21
9430: PPUSH
9431: LD_INT 1
9433: PPUSH
9434: CALL_OW 3
9438: ST_TO_ADDR
// end ;
9439: GO 9385
9441: POP
9442: POP
// if Lynch then
9443: LD_EXP 20
9447: IFFALSE 9465
// tmp := tmp ^ Lynch ;
9449: LD_ADDR_VAR 0 3
9453: PUSH
9454: LD_VAR 0 3
9458: PUSH
9459: LD_EXP 20
9463: ADD
9464: ST_TO_ADDR
// usPatrol := tmp ;
9465: LD_ADDR_EXP 16
9469: PUSH
9470: LD_VAR 0 3
9474: ST_TO_ADDR
// for i in tmp do
9475: LD_ADDR_VAR 0 1
9479: PUSH
9480: LD_VAR 0 3
9484: PUSH
9485: FOR_IN
9486: IFFALSE 9579
// begin if IsInUnit ( i ) then
9488: LD_VAR 0 1
9492: PPUSH
9493: CALL_OW 310
9497: IFFALSE 9508
// ComExitBuilding ( i ) ;
9499: LD_VAR 0 1
9503: PPUSH
9504: CALL_OW 122
// AddComAgressiveMove ( i , 69 , 15 ) ;
9508: LD_VAR 0 1
9512: PPUSH
9513: LD_INT 69
9515: PPUSH
9516: LD_INT 15
9518: PPUSH
9519: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9523: LD_VAR 0 1
9527: PPUSH
9528: LD_INT 700
9530: PPUSH
9531: CALL_OW 202
// AddComAgressiveMove ( i , 55 , 43 ) ;
9535: LD_VAR 0 1
9539: PPUSH
9540: LD_INT 55
9542: PPUSH
9543: LD_INT 43
9545: PPUSH
9546: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9550: LD_VAR 0 1
9554: PPUSH
9555: LD_INT 700
9557: PPUSH
9558: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9562: LD_VAR 0 1
9566: PPUSH
9567: LD_INT 42
9569: PPUSH
9570: LD_INT 20
9572: PPUSH
9573: CALL_OW 174
// end ;
9577: GO 9485
9579: POP
9580: POP
// repeat wait ( 0 0$1 ) ;
9581: LD_INT 35
9583: PPUSH
9584: CALL_OW 67
// for i in tmp do
9588: LD_ADDR_VAR 0 1
9592: PUSH
9593: LD_VAR 0 3
9597: PUSH
9598: FOR_IN
9599: IFFALSE 9630
// if IsDead ( i ) then
9601: LD_VAR 0 1
9605: PPUSH
9606: CALL_OW 301
9610: IFFALSE 9628
// tmp := tmp diff i ;
9612: LD_ADDR_VAR 0 3
9616: PUSH
9617: LD_VAR 0 3
9621: PUSH
9622: LD_VAR 0 1
9626: DIFF
9627: ST_TO_ADDR
9628: GO 9598
9630: POP
9631: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9632: LD_VAR 0 3
9636: NOT
9637: PUSH
9638: LD_VAR 0 3
9642: PPUSH
9643: LD_INT 95
9645: PUSH
9646: LD_INT 7
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: PUSH
9653: LD_INT 3
9655: PUSH
9656: LD_INT 60
9658: PUSH
9659: EMPTY
9660: LIST
9661: PUSH
9662: EMPTY
9663: LIST
9664: LIST
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: PPUSH
9670: CALL_OW 72
9674: PUSH
9675: LD_VAR 0 3
9679: EQUAL
9680: OR
9681: IFFALSE 9581
// if not tmp then
9683: LD_VAR 0 3
9687: NOT
9688: IFFALSE 9700
// trickyMove := true else
9690: LD_ADDR_EXP 15
9694: PUSH
9695: LD_INT 1
9697: ST_TO_ADDR
9698: GO 9707
// usPatrol := [ ] ;
9700: LD_ADDR_EXP 16
9704: PUSH
9705: EMPTY
9706: ST_TO_ADDR
// if tmp diff Lynch then
9707: LD_VAR 0 3
9711: PUSH
9712: LD_EXP 20
9716: DIFF
9717: IFFALSE 9741
// usForces := usForces union ( tmp diff Lynch ) ;
9719: LD_ADDR_EXP 21
9723: PUSH
9724: LD_EXP 21
9728: PUSH
9729: LD_VAR 0 3
9733: PUSH
9734: LD_EXP 20
9738: DIFF
9739: UNION
9740: ST_TO_ADDR
// if IsOk ( Lynch ) then
9741: LD_EXP 20
9745: PPUSH
9746: CALL_OW 302
9750: IFFALSE 9764
// ComEnterUnit ( Lynch , Delta ) ;
9752: LD_EXP 20
9756: PPUSH
9757: LD_INT 1
9759: PPUSH
9760: CALL_OW 120
// end ; end ; end ;
9764: PPOPN 3
9766: END
// every 0 0$1 trigger trickyMove do
9767: LD_EXP 15
9771: IFFALSE 9783
9773: GO 9775
9775: DISABLE
// SetAchievement ( ACH_TRAP ) ;
9776: LD_STRING ACH_TRAP
9778: PPUSH
9779: CALL_OW 543
9783: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ) do
9784: LD_INT 22
9786: PUSH
9787: LD_INT 2
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PUSH
9794: LD_INT 23
9796: PUSH
9797: LD_INT 1
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: PUSH
9804: LD_INT 21
9806: PUSH
9807: LD_INT 2
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: PUSH
9814: EMPTY
9815: LIST
9816: LIST
9817: LIST
9818: PPUSH
9819: CALL_OW 69
9823: IFFALSE 9835
9825: GO 9827
9827: DISABLE
// SetAchievement ( ACH_SCRAP ) ;
9828: LD_STRING ACH_SCRAP
9830: PPUSH
9831: CALL_OW 543
9835: END
// every 0 0$1 trigger UnitFilter ( usPatrol , [ f_see , 2 ] ) and See ( 1 , Heike ) do
9836: LD_EXP 16
9840: PPUSH
9841: LD_INT 101
9843: PUSH
9844: LD_INT 2
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: PPUSH
9851: CALL_OW 72
9855: PUSH
9856: LD_INT 1
9858: PPUSH
9859: LD_EXP 23
9863: PPUSH
9864: CALL_OW 292
9868: AND
9869: IFFALSE 10002
9871: GO 9873
9873: DISABLE
// begin if not trap then
9874: LD_EXP 17
9878: NOT
9879: IFFALSE 9907
// begin Say ( Heike , DH-2-trap ) ;
9881: LD_EXP 23
9885: PPUSH
9886: LD_STRING DH-2-trap
9888: PPUSH
9889: CALL_OW 88
// Say ( Mike , DM-2-trap ) ;
9893: LD_EXP 25
9897: PPUSH
9898: LD_STRING DM-2-trap
9900: PPUSH
9901: CALL_OW 88
// end else
9905: GO 9919
// begin Say ( Heike , DH-1-trap-a ) ;
9907: LD_EXP 23
9911: PPUSH
9912: LD_STRING DH-1-trap-a
9914: PPUSH
9915: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
9919: LD_INT 35
9921: PPUSH
9922: CALL_OW 67
// until trickyMove ;
9926: LD_EXP 15
9930: IFFALSE 9919
// Say ( Heike , DH-3-trap ) ;
9932: LD_EXP 23
9936: PPUSH
9937: LD_STRING DH-3-trap
9939: PPUSH
9940: CALL_OW 88
// if IsOk ( Givi ) and IsOk ( Kaia ) then
9944: LD_EXP 24
9948: PPUSH
9949: CALL_OW 302
9953: PUSH
9954: LD_EXP 28
9958: PPUSH
9959: CALL_OW 302
9963: AND
9964: IFFALSE 10002
// begin Say ( Givi , DG-3-trap ) ;
9966: LD_EXP 24
9970: PPUSH
9971: LD_STRING DG-3-trap
9973: PPUSH
9974: CALL_OW 88
// Say ( Kaia , DK-3-trap ) ;
9978: LD_EXP 28
9982: PPUSH
9983: LD_STRING DK-3-trap
9985: PPUSH
9986: CALL_OW 88
// Say ( Givi , DG-4-trap ) ;
9990: LD_EXP 24
9994: PPUSH
9995: LD_STRING DG-4-trap
9997: PPUSH
9998: CALL_OW 88
// end ; end ;
10002: END
// every 0 0$1 trigger GetSide ( Delta ) = 2 and attackDeltaAllowed do var i , tmp ;
10003: LD_INT 1
10005: PPUSH
10006: CALL_OW 255
10010: PUSH
10011: LD_INT 2
10013: EQUAL
10014: PUSH
10015: LD_EXP 14
10019: AND
10020: IFFALSE 10179
10022: GO 10024
10024: DISABLE
10025: LD_INT 0
10027: PPUSH
10028: PPUSH
// begin if not IsOk ( Kaia ) then
10029: LD_EXP 28
10033: PPUSH
10034: CALL_OW 302
10038: NOT
10039: IFFALSE 10043
// exit ;
10041: GO 10179
// if tick < 5 5$00 then
10043: LD_OWVAR 1
10047: PUSH
10048: LD_INT 10500
10050: LESS
10051: IFFALSE 10060
// SetAchievement ( ACH_DELTA ) ;
10053: LD_STRING ACH_DELTA
10055: PPUSH
10056: CALL_OW 543
// Say ( Kaia , DK-1-capture ) ;
10060: LD_EXP 28
10064: PPUSH
10065: LD_STRING DK-1-capture
10067: PPUSH
10068: CALL_OW 88
// Say ( Heike , DH-1-capture ) ;
10072: LD_EXP 23
10076: PPUSH
10077: LD_STRING DH-1-capture
10079: PPUSH
10080: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
10084: LD_ADDR_VAR 0 2
10088: PUSH
10089: LD_INT 22
10091: PUSH
10092: LD_INT 1
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: PUSH
10099: LD_INT 25
10101: PUSH
10102: LD_INT 1
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: PUSH
10109: EMPTY
10110: LIST
10111: LIST
10112: PPUSH
10113: CALL_OW 69
10117: ST_TO_ADDR
// if not tmp then
10118: LD_VAR 0 2
10122: NOT
10123: IFFALSE 10127
// exit ;
10125: GO 10179
// for i in tmp do
10127: LD_ADDR_VAR 0 1
10131: PUSH
10132: LD_VAR 0 2
10136: PUSH
10137: FOR_IN
10138: IFFALSE 10177
// begin if IsInUnit ( i ) then
10140: LD_VAR 0 1
10144: PPUSH
10145: CALL_OW 310
10149: IFFALSE 10160
// ComExitBuilding ( i ) ;
10151: LD_VAR 0 1
10155: PPUSH
10156: CALL_OW 122
// AddComAgressiveMove ( i , 38 , 23 ) ;
10160: LD_VAR 0 1
10164: PPUSH
10165: LD_INT 38
10167: PPUSH
10168: LD_INT 23
10170: PPUSH
10171: CALL_OW 174
// end ;
10175: GO 10137
10177: POP
10178: POP
// end ;
10179: PPOPN 2
10181: END
// every 0 0$1 trigger GetSide ( usLab ) = 2 and attackDeltaAllowed do
10182: LD_INT 3
10184: PPUSH
10185: CALL_OW 255
10189: PUSH
10190: LD_INT 2
10192: EQUAL
10193: PUSH
10194: LD_EXP 14
10198: AND
10199: IFFALSE 10231
10201: GO 10203
10203: DISABLE
// begin DialogueOn ;
10204: CALL_OW 6
// Say ( Aviradze , DA-1-capture ) ;
10208: LD_EXP 27
10212: PPUSH
10213: LD_STRING DA-1-capture
10215: PPUSH
10216: CALL_OW 88
// DialogueOff ;
10220: CALL_OW 7
// ChangeMissionObjectives ( OTame ) ;
10224: LD_STRING OTame
10226: PPUSH
10227: CALL_OW 337
// end ;
10231: END
// every 0 0$1 trigger GetTech ( tech_ApeLang , 2 ) = state_researched and attackDeltaAllowed do
10232: LD_INT 1
10234: PPUSH
10235: LD_INT 2
10237: PPUSH
10238: CALL_OW 321
10242: PUSH
10243: LD_INT 2
10245: EQUAL
10246: PUSH
10247: LD_EXP 14
10251: AND
10252: IFFALSE 10403
10254: GO 10256
10256: DISABLE
// begin DialogueOn ;
10257: CALL_OW 6
// Say ( Aviradze , DA-1-ape ) ;
10261: LD_EXP 27
10265: PPUSH
10266: LD_STRING DA-1-ape
10268: PPUSH
10269: CALL_OW 88
// Say ( Heike , DH-1-ape ) ;
10273: LD_EXP 23
10277: PPUSH
10278: LD_STRING DH-1-ape
10280: PPUSH
10281: CALL_OW 88
// Say ( Aviradze , DA-2-ape ) ;
10285: LD_EXP 27
10289: PPUSH
10290: LD_STRING DA-2-ape
10292: PPUSH
10293: CALL_OW 88
// Say ( Aviradze , DA-3-ape ) ;
10297: LD_EXP 27
10301: PPUSH
10302: LD_STRING DA-3-ape
10304: PPUSH
10305: CALL_OW 88
// Say ( Heike , DH-3-ape ) ;
10309: LD_EXP 23
10313: PPUSH
10314: LD_STRING DH-3-ape
10316: PPUSH
10317: CALL_OW 88
// DialogueOff ;
10321: CALL_OW 7
// if FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 then
10325: LD_INT 22
10327: PUSH
10328: LD_INT 0
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: PUSH
10335: LD_INT 25
10337: PUSH
10338: LD_INT 12
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: PUSH
10345: EMPTY
10346: LIST
10347: LIST
10348: PPUSH
10349: CALL_OW 69
10353: PUSH
10354: LD_INT 0
10356: EQUAL
10357: IFFALSE 10369
// SpawnApeman ( forest , 2 ) ;
10359: LD_INT 1
10361: PPUSH
10362: LD_INT 2
10364: PPUSH
10365: CALL 409 0 2
// repeat wait ( 0 0$1 ) ;
10369: LD_INT 35
10371: PPUSH
10372: CALL_OW 67
// until FilterAllUnits ( [ f_class , class_apeman ] ) = 0 ;
10376: LD_INT 25
10378: PUSH
10379: LD_INT 12
10381: PUSH
10382: EMPTY
10383: LIST
10384: LIST
10385: PPUSH
10386: CALL_OW 69
10390: PUSH
10391: LD_INT 0
10393: EQUAL
10394: IFFALSE 10369
// YouLost ( Ape ) ;
10396: LD_STRING Ape
10398: PPUSH
10399: CALL_OW 104
// end ;
10403: END
// every 0 0$5 trigger lostCounter >= [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
10404: LD_EXP 18
10408: PUSH
10409: LD_INT 3
10411: PUSH
10412: LD_INT 2
10414: PUSH
10415: LD_INT 2
10417: PUSH
10418: LD_INT 2
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: PUSH
10427: LD_OWVAR 67
10431: ARRAY
10432: GREATEREQUAL
10433: IFFALSE 10477
10435: GO 10437
10437: DISABLE
// begin DialogueOn ;
10438: CALL_OW 6
// Say ( Aviradze , DA-1-failure ) ;
10442: LD_EXP 27
10446: PPUSH
10447: LD_STRING DA-1-failure
10449: PPUSH
10450: CALL_OW 88
// Say ( Aviradze , DA-2-failure ) ;
10454: LD_EXP 27
10458: PPUSH
10459: LD_STRING DA-2-failure
10461: PPUSH
10462: CALL_OW 88
// YouLost ( Failure ) ;
10466: LD_STRING Failure
10468: PPUSH
10469: CALL_OW 104
// DialogueOff ;
10473: CALL_OW 7
// end ;
10477: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
10478: LD_EXP 28
10482: PPUSH
10483: CALL_OW 256
10487: PUSH
10488: LD_INT 3
10490: LESS
10491: IFFALSE 10624
10493: GO 10495
10495: DISABLE
// begin DialogueOn ;
10496: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
10500: LD_EXP 28
10504: PPUSH
10505: CALL_OW 87
// ForceSay ( Kaia , DK-Kaiaout-1 ) ;
10509: LD_EXP 28
10513: PPUSH
10514: LD_STRING DK-Kaiaout-1
10516: PPUSH
10517: CALL_OW 91
// Say ( Heike , DH-Kaiaout-2 ) ;
10521: LD_EXP 23
10525: PPUSH
10526: LD_STRING DH-Kaiaout-2
10528: PPUSH
10529: CALL_OW 88
// Say ( Givi , DG-Kaiaout-3 ) ;
10533: LD_EXP 24
10537: PPUSH
10538: LD_STRING DG-Kaiaout-3
10540: PPUSH
10541: CALL_OW 88
// Say ( Heike , DH-Kaiaout-4 ) ;
10545: LD_EXP 23
10549: PPUSH
10550: LD_STRING DH-Kaiaout-4
10552: PPUSH
10553: CALL_OW 88
// if Givi then
10557: LD_EXP 24
10561: IFFALSE 10611
// begin Say ( Givi , DG-Kaiaout-5 ) ;
10563: LD_EXP 24
10567: PPUSH
10568: LD_STRING DG-Kaiaout-5
10570: PPUSH
10571: CALL_OW 88
// Say ( Heike , DH-Kaiaout-6 ) ;
10575: LD_EXP 23
10579: PPUSH
10580: LD_STRING DH-Kaiaout-6
10582: PPUSH
10583: CALL_OW 88
// Say ( Givi , DG-Kaiaout-7 ) ;
10587: LD_EXP 24
10591: PPUSH
10592: LD_STRING DG-Kaiaout-7
10594: PPUSH
10595: CALL_OW 88
// Say ( Heike , DH-Kaiaout-8 ) ;
10599: LD_EXP 23
10603: PPUSH
10604: LD_STRING DH-Kaiaout-8
10606: PPUSH
10607: CALL_OW 88
// end ; DialogueOff ;
10611: CALL_OW 7
// KillUnit ( Kaia ) ;
10615: LD_EXP 28
10619: PPUSH
10620: CALL_OW 66
// end ;
10624: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) and IsOk ( Aviradze ) and GetSide ( Aviradze ) = 2 do var tmp ;
10625: LD_INT 22
10627: PUSH
10628: LD_INT 2
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: PUSH
10635: LD_INT 23
10637: PUSH
10638: LD_INT 0
10640: PUSH
10641: EMPTY
10642: LIST
10643: LIST
10644: PUSH
10645: EMPTY
10646: LIST
10647: LIST
10648: PPUSH
10649: CALL_OW 69
10653: PUSH
10654: LD_EXP 27
10658: PPUSH
10659: CALL_OW 302
10663: AND
10664: PUSH
10665: LD_EXP 27
10669: PPUSH
10670: CALL_OW 255
10674: PUSH
10675: LD_INT 2
10677: EQUAL
10678: AND
10679: IFFALSE 11624
10681: GO 10683
10683: DISABLE
10684: LD_INT 0
10686: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) then
10687: LD_INT 22
10689: PUSH
10690: LD_INT 1
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: PUSH
10697: LD_INT 2
10699: PUSH
10700: LD_INT 25
10702: PUSH
10703: LD_INT 1
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: PUSH
10710: LD_INT 34
10712: PUSH
10713: LD_INT 4
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: PUSH
10720: EMPTY
10721: LIST
10722: LIST
10723: LIST
10724: PUSH
10725: EMPTY
10726: LIST
10727: LIST
10728: PPUSH
10729: CALL_OW 69
10733: IFFALSE 10828
// begin Query ( QEnemyInSight ) ;
10735: LD_STRING QEnemyInSight
10737: PPUSH
10738: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
10742: LD_INT 35
10744: PPUSH
10745: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10749: LD_INT 22
10751: PUSH
10752: LD_INT 1
10754: PUSH
10755: EMPTY
10756: LIST
10757: LIST
10758: PUSH
10759: LD_INT 2
10761: PUSH
10762: LD_INT 25
10764: PUSH
10765: LD_INT 1
10767: PUSH
10768: EMPTY
10769: LIST
10770: LIST
10771: PUSH
10772: LD_INT 34
10774: PUSH
10775: LD_INT 4
10777: PUSH
10778: EMPTY
10779: LIST
10780: LIST
10781: PUSH
10782: EMPTY
10783: LIST
10784: LIST
10785: LIST
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PPUSH
10791: CALL_OW 69
10795: NOT
10796: PUSH
10797: LD_INT 22
10799: PUSH
10800: LD_INT 2
10802: PUSH
10803: EMPTY
10804: LIST
10805: LIST
10806: PUSH
10807: LD_INT 23
10809: PUSH
10810: LD_INT 0
10812: PUSH
10813: EMPTY
10814: LIST
10815: LIST
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: PPUSH
10821: CALL_OW 69
10825: AND
10826: IFFALSE 10742
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10828: LD_ADDR_VAR 0 1
10832: PUSH
10833: LD_INT 22
10835: PUSH
10836: LD_INT 2
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: PUSH
10843: LD_INT 23
10845: PUSH
10846: LD_INT 0
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: PPUSH
10857: CALL_OW 69
10861: ST_TO_ADDR
// InGameOn ;
10862: CALL_OW 8
// CenterNowOnUnits ( tmp ) ;
10866: LD_VAR 0 1
10870: PPUSH
10871: CALL_OW 87
// ComMoveUnit ( tmp , Aviradze ) ;
10875: LD_VAR 0 1
10879: PPUSH
10880: LD_EXP 27
10884: PPUSH
10885: CALL_OW 112
// ComTurnUnit ( Aviradze , tmp ) ;
10889: LD_EXP 27
10893: PPUSH
10894: LD_VAR 0 1
10898: PPUSH
10899: CALL_OW 119
// wait ( 0 0$1 ) ;
10903: LD_INT 35
10905: PPUSH
10906: CALL_OW 67
// Say ( Aviradze , DA-1-tame-a ) ;
10910: LD_EXP 27
10914: PPUSH
10915: LD_STRING DA-1-tame-a
10917: PPUSH
10918: CALL_OW 88
// if IsOk ( Mike ) then
10922: LD_EXP 25
10926: PPUSH
10927: CALL_OW 302
10931: IFFALSE 10969
// begin Say ( Mike , DM-1-tame-a ) ;
10933: LD_EXP 25
10937: PPUSH
10938: LD_STRING DM-1-tame-a
10940: PPUSH
10941: CALL_OW 88
// Say ( Sophia , DS-1-tame-a ) ;
10945: LD_EXP 29
10949: PPUSH
10950: LD_STRING DS-1-tame-a
10952: PPUSH
10953: CALL_OW 88
// Say ( Mike , DM-2-tame-a ) ;
10957: LD_EXP 25
10961: PPUSH
10962: LD_STRING DM-2-tame-a
10964: PPUSH
10965: CALL_OW 88
// end ; wait ( 0 0$3 ) ;
10969: LD_INT 105
10971: PPUSH
10972: CALL_OW 67
// PrepareFarmer ;
10976: CALL 12303 0 0
// CenterOnUnits ( Farmer ) ;
10980: LD_EXP 31
10984: PPUSH
10985: CALL_OW 85
// ComMoveXY ( Farmer , 105 , 59 ) ;
10989: LD_EXP 31
10993: PPUSH
10994: LD_INT 105
10996: PPUSH
10997: LD_INT 59
10999: PPUSH
11000: CALL_OW 111
// AddComHold ( Farmer ) ;
11004: LD_EXP 31
11008: PPUSH
11009: CALL_OW 200
// SayRadio ( Farmer , DF-1-end ) ;
11013: LD_EXP 31
11017: PPUSH
11018: LD_STRING DF-1-end
11020: PPUSH
11021: CALL_OW 94
// Say ( Aviradze , DA-1-end ) ;
11025: LD_EXP 27
11029: PPUSH
11030: LD_STRING DA-1-end
11032: PPUSH
11033: CALL_OW 88
// SayRadio ( Farmer , DF-2-end ) ;
11037: LD_EXP 31
11041: PPUSH
11042: LD_STRING DF-2-end
11044: PPUSH
11045: CALL_OW 94
// Say ( Aviradze , DA-2-end ) ;
11049: LD_EXP 27
11053: PPUSH
11054: LD_STRING DA-2-end
11056: PPUSH
11057: CALL_OW 88
// SayRadio ( Farmer , DF-3-end ) ;
11061: LD_EXP 31
11065: PPUSH
11066: LD_STRING DF-3-end
11068: PPUSH
11069: CALL_OW 94
// Say ( Heike , DH-3-end ) ;
11073: LD_EXP 23
11077: PPUSH
11078: LD_STRING DH-3-end
11080: PPUSH
11081: CALL_OW 88
// SayRadio ( Farmer , DF-4-end ) ;
11085: LD_EXP 31
11089: PPUSH
11090: LD_STRING DF-4-end
11092: PPUSH
11093: CALL_OW 94
// if tick <= [ 25 25$00 , 22 22$30 , 20 20$00 , 15 15$00 ] [ Difficulty ] then
11097: LD_OWVAR 1
11101: PUSH
11102: LD_INT 52500
11104: PUSH
11105: LD_INT 47250
11107: PUSH
11108: LD_INT 42000
11110: PUSH
11111: LD_INT 31500
11113: PUSH
11114: EMPTY
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: PUSH
11120: LD_OWVAR 67
11124: ARRAY
11125: LESSEQUAL
11126: IFFALSE 11140
// AddMedal ( med1 , 1 ) else
11128: LD_STRING med1
11130: PPUSH
11131: LD_INT 1
11133: PPUSH
11134: CALL_OW 101
11138: GO 11151
// AddMedal ( med1 , - 1 ) ;
11140: LD_STRING med1
11142: PPUSH
11143: LD_INT 1
11145: NEG
11146: PPUSH
11147: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) = 0 and not gladstoneEscaped then
11151: LD_INT 22
11153: PUSH
11154: LD_INT 1
11156: PUSH
11157: EMPTY
11158: LIST
11159: LIST
11160: PUSH
11161: LD_INT 25
11163: PUSH
11164: LD_INT 4
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: PPUSH
11175: CALL_OW 69
11179: PUSH
11180: LD_INT 0
11182: EQUAL
11183: PUSH
11184: LD_EXP 12
11188: NOT
11189: AND
11190: IFFALSE 11204
// AddMedal ( med2 , 1 ) else
11192: LD_STRING med2
11194: PPUSH
11195: LD_INT 1
11197: PPUSH
11198: CALL_OW 101
11202: GO 11215
// AddMedal ( med2 , - 1 ) ;
11204: LD_STRING med2
11206: PPUSH
11207: LD_INT 1
11209: NEG
11210: PPUSH
11211: CALL_OW 101
// if trickyMove then
11215: LD_EXP 15
11219: IFFALSE 11233
// AddMedal ( med3 , 1 ) else
11221: LD_STRING med3
11223: PPUSH
11224: LD_INT 1
11226: PPUSH
11227: CALL_OW 101
11231: GO 11263
// if spottedBeforeRadio then
11233: LD_EXP 6
11237: IFFALSE 11252
// AddMedal ( med3 , - 2 ) else
11239: LD_STRING med3
11241: PPUSH
11242: LD_INT 2
11244: NEG
11245: PPUSH
11246: CALL_OW 101
11250: GO 11263
// AddMedal ( med3 , - 1 ) ;
11252: LD_STRING med3
11254: PPUSH
11255: LD_INT 1
11257: NEG
11258: PPUSH
11259: CALL_OW 101
// GiveMedals ( MAIN ) ;
11263: LD_STRING MAIN
11265: PPUSH
11266: CALL_OW 102
// SaveCharacters ( tmp , 02_ape ) ;
11270: LD_VAR 0 1
11274: PPUSH
11275: LD_STRING 02_ape
11277: PPUSH
11278: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
11282: LD_ADDR_VAR 0 1
11286: PUSH
11287: LD_INT 22
11289: PUSH
11290: LD_INT 2
11292: PUSH
11293: EMPTY
11294: LIST
11295: LIST
11296: PUSH
11297: LD_INT 23
11299: PUSH
11300: LD_INT 2
11302: PUSH
11303: EMPTY
11304: LIST
11305: LIST
11306: PUSH
11307: LD_INT 21
11309: PUSH
11310: LD_INT 1
11312: PUSH
11313: EMPTY
11314: LIST
11315: LIST
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: LIST
11321: PPUSH
11322: CALL_OW 69
11326: ST_TO_ADDR
// RewardPeople ( tmp ) ;
11327: LD_VAR 0 1
11331: PPUSH
11332: CALL_OW 43
// SaveCharacters ( Heike , 02_Heike ) ;
11336: LD_EXP 23
11340: PPUSH
11341: LD_STRING 02_Heike
11343: PPUSH
11344: CALL_OW 38
// SaveCharacters ( Aviradze , 02_Aviradze ) ;
11348: LD_EXP 27
11352: PPUSH
11353: LD_STRING 02_Aviradze
11355: PPUSH
11356: CALL_OW 38
// if Givi then
11360: LD_EXP 24
11364: IFFALSE 11378
// SaveCharacters ( Givi , 02_Givi ) ;
11366: LD_EXP 24
11370: PPUSH
11371: LD_STRING 02_Givi
11373: PPUSH
11374: CALL_OW 38
// if Mike then
11378: LD_EXP 25
11382: IFFALSE 11396
// SaveCharacters ( Mike , 02_Mike ) ;
11384: LD_EXP 25
11388: PPUSH
11389: LD_STRING 02_Mike
11391: PPUSH
11392: CALL_OW 38
// if Kamil then
11396: LD_EXP 26
11400: IFFALSE 11414
// SaveCharacters ( Kamil , 02_Kamil ) ;
11402: LD_EXP 26
11406: PPUSH
11407: LD_STRING 02_Kamil
11409: PPUSH
11410: CALL_OW 38
// if Kaia then
11414: LD_EXP 28
11418: IFFALSE 11432
// SaveCharacters ( Kaia , 02_Kaia ) ;
11420: LD_EXP 28
11424: PPUSH
11425: LD_STRING 02_Kaia
11427: PPUSH
11428: CALL_OW 38
// if Sophia then
11432: LD_EXP 29
11436: IFFALSE 11450
// SaveCharacters ( Sophia , 02_Sophia ) ;
11438: LD_EXP 29
11442: PPUSH
11443: LD_STRING 02_Sophia
11445: PPUSH
11446: CALL_OW 38
// if Markov then
11450: LD_EXP 30
11454: IFFALSE 11468
// SaveCharacters ( Markov , 02_Markov ) ;
11456: LD_EXP 30
11460: PPUSH
11461: LD_STRING 02_Markov
11463: PPUSH
11464: CALL_OW 38
// if tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] then
11468: LD_VAR 0 1
11472: PUSH
11473: LD_EXP 23
11477: PUSH
11478: LD_EXP 27
11482: PUSH
11483: LD_EXP 24
11487: PUSH
11488: LD_EXP 25
11492: PUSH
11493: LD_EXP 26
11497: PUSH
11498: LD_EXP 29
11502: PUSH
11503: LD_EXP 28
11507: PUSH
11508: LD_EXP 30
11512: PUSH
11513: EMPTY
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: DIFF
11523: IFFALSE 11588
// SaveCharacters ( tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] , 02_others ) ;
11525: LD_VAR 0 1
11529: PUSH
11530: LD_EXP 23
11534: PUSH
11535: LD_EXP 27
11539: PUSH
11540: LD_EXP 24
11544: PUSH
11545: LD_EXP 25
11549: PUSH
11550: LD_EXP 26
11554: PUSH
11555: LD_EXP 29
11559: PUSH
11560: LD_EXP 28
11564: PUSH
11565: LD_EXP 30
11569: PUSH
11570: EMPTY
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: DIFF
11580: PPUSH
11581: LD_STRING 02_others
11583: PPUSH
11584: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_KRAY) ) ;
11588: LD_STRING enableBioCharacter(BIO_KRAY)
11590: PPUSH
11591: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_AVIR) ) ;
11595: LD_STRING enableBioCharacter(BIO_AVIR)
11597: PPUSH
11598: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_SOPH) ) ;
11602: LD_STRING enableBioCharacter(BIO_SOPH)
11604: PPUSH
11605: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_KAMI) ) ;
11609: LD_STRING enableBioCharacter(BIO_KAMI)
11611: PPUSH
11612: CALL_OW 559
// YouWin ;
11616: CALL_OW 103
// InGameOff ;
11620: CALL_OW 9
// end ;
11624: PPOPN 1
11626: END
// every 0 0$1 trigger tick > timeUntilFarmer and aviradzeSpotted do
11627: LD_OWVAR 1
11631: PUSH
11632: LD_EXP 13
11636: GREATER
11637: PUSH
11638: LD_EXP 4
11642: AND
11643: IFFALSE 11683
11645: GO 11647
11647: DISABLE
// begin InGameOn ;
11648: CALL_OW 8
// PrepareFarmer ;
11652: CALL 12303 0 0
// CenterNowOnUnits ( Farmer ) ;
11656: LD_EXP 31
11660: PPUSH
11661: CALL_OW 87
// wait ( 0 0$2 ) ;
11665: LD_INT 70
11667: PPUSH
11668: CALL_OW 67
// YouLost ( Farmer ) ;
11672: LD_STRING Farmer
11674: PPUSH
11675: CALL_OW 104
// InGameOff ;
11679: CALL_OW 9
// end ; end_of_file
11683: END
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer ; export function PrepareArabian ; var un , veh ; begin
11684: LD_INT 0
11686: PPUSH
11687: PPUSH
11688: PPUSH
// uc_side := 2 ;
11689: LD_ADDR_OWVAR 20
11693: PUSH
11694: LD_INT 2
11696: ST_TO_ADDR
// uc_nation := 2 ;
11697: LD_ADDR_OWVAR 21
11701: PUSH
11702: LD_INT 2
11704: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
11705: LD_ADDR_EXP 23
11709: PUSH
11710: LD_STRING Heike
11712: PPUSH
11713: LD_EXP 1
11717: NOT
11718: PPUSH
11719: LD_EXP 2
11723: PPUSH
11724: CALL 32698 0 3
11728: ST_TO_ADDR
// PlaceUnitXY ( Heike , 83 , 72 , false ) ;
11729: LD_EXP 23
11733: PPUSH
11734: LD_INT 83
11736: PPUSH
11737: LD_INT 72
11739: PPUSH
11740: LD_INT 0
11742: PPUSH
11743: CALL_OW 48
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
11747: LD_ADDR_EXP 24
11751: PUSH
11752: LD_STRING Givi
11754: PPUSH
11755: LD_EXP 1
11759: NOT
11760: PPUSH
11761: LD_EXP 2
11765: PPUSH
11766: CALL 32698 0 3
11770: ST_TO_ADDR
// if Givi then
11771: LD_EXP 24
11775: IFFALSE 11795
// PlaceUnitXY ( Givi , 87 , 76 , false ) ;
11777: LD_EXP 24
11781: PPUSH
11782: LD_INT 87
11784: PPUSH
11785: LD_INT 76
11787: PPUSH
11788: LD_INT 0
11790: PPUSH
11791: CALL_OW 48
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
11795: LD_ADDR_EXP 25
11799: PUSH
11800: LD_STRING Mike
11802: PPUSH
11803: LD_EXP 1
11807: NOT
11808: PPUSH
11809: LD_EXP 2
11813: PPUSH
11814: CALL 32698 0 3
11818: ST_TO_ADDR
// if Mike then
11819: LD_EXP 25
11823: IFFALSE 11843
// PlaceUnitXY ( Mike , 84 , 76 , false ) ;
11825: LD_EXP 25
11829: PPUSH
11830: LD_INT 84
11832: PPUSH
11833: LD_INT 76
11835: PPUSH
11836: LD_INT 0
11838: PPUSH
11839: CALL_OW 48
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
11843: LD_ADDR_EXP 26
11847: PUSH
11848: LD_STRING Kamil
11850: PPUSH
11851: LD_EXP 1
11855: NOT
11856: PPUSH
11857: LD_EXP 2
11861: PPUSH
11862: CALL 32698 0 3
11866: ST_TO_ADDR
// if Kamil then
11867: LD_EXP 26
11871: IFFALSE 11891
// PlaceUnitXY ( Kamil , 85 , 78 , false ) ;
11873: LD_EXP 26
11877: PPUSH
11878: LD_INT 85
11880: PPUSH
11881: LD_INT 78
11883: PPUSH
11884: LD_INT 0
11886: PPUSH
11887: CALL_OW 48
// uc_side := 5 ;
11891: LD_ADDR_OWVAR 20
11895: PUSH
11896: LD_INT 5
11898: ST_TO_ADDR
// uc_nation := 2 ;
11899: LD_ADDR_OWVAR 21
11903: PUSH
11904: LD_INT 2
11906: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , false ,  ) ;
11907: LD_ADDR_EXP 27
11911: PUSH
11912: LD_STRING Aviradze
11914: PPUSH
11915: LD_INT 0
11917: PPUSH
11918: LD_STRING 
11920: PPUSH
11921: CALL 32698 0 3
11925: ST_TO_ADDR
// PlaceUnitXY ( Aviradze , 106 , 38 , false ) ;
11926: LD_EXP 27
11930: PPUSH
11931: LD_INT 106
11933: PPUSH
11934: LD_INT 38
11936: PPUSH
11937: LD_INT 0
11939: PPUSH
11940: CALL_OW 48
// ComTurnXY ( Aviradze , 103 , 38 ) ;
11944: LD_EXP 27
11948: PPUSH
11949: LD_INT 103
11951: PPUSH
11952: LD_INT 38
11954: PPUSH
11955: CALL_OW 118
// Kaia := PrepareUnit ( Kaia , false ,  ) ;
11959: LD_ADDR_EXP 28
11963: PUSH
11964: LD_STRING Kaia
11966: PPUSH
11967: LD_INT 0
11969: PPUSH
11970: LD_STRING 
11972: PPUSH
11973: CALL 32698 0 3
11977: ST_TO_ADDR
// PlaceUnitXY ( Kaia , 100 , 34 , false ) ;
11978: LD_EXP 28
11982: PPUSH
11983: LD_INT 100
11985: PPUSH
11986: LD_INT 34
11988: PPUSH
11989: LD_INT 0
11991: PPUSH
11992: CALL_OW 48
// ComTurnXY ( Kaia , 100 , 39 ) ;
11996: LD_EXP 28
12000: PPUSH
12001: LD_INT 100
12003: PPUSH
12004: LD_INT 39
12006: PPUSH
12007: CALL_OW 118
// Sophia := PrepareUnit ( Sophia , false ,  ) ;
12011: LD_ADDR_EXP 29
12015: PUSH
12016: LD_STRING Sophia
12018: PPUSH
12019: LD_INT 0
12021: PPUSH
12022: LD_STRING 
12024: PPUSH
12025: CALL 32698 0 3
12029: ST_TO_ADDR
// PlaceUnitXY ( Sophia , 109 , 50 , false ) ;
12030: LD_EXP 29
12034: PPUSH
12035: LD_INT 109
12037: PPUSH
12038: LD_INT 50
12040: PPUSH
12041: LD_INT 0
12043: PPUSH
12044: CALL_OW 48
// ComTurnXY ( Sophia , 100 , 39 ) ;
12048: LD_EXP 29
12052: PPUSH
12053: LD_INT 100
12055: PPUSH
12056: LD_INT 39
12058: PPUSH
12059: CALL_OW 118
// Markov := PrepareUnit ( Markov , false ,  ) ;
12063: LD_ADDR_EXP 30
12067: PUSH
12068: LD_STRING Markov
12070: PPUSH
12071: LD_INT 0
12073: PPUSH
12074: LD_STRING 
12076: PPUSH
12077: CALL 32698 0 3
12081: ST_TO_ADDR
// PrepareTank ( 5 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , [ 90 , 70 , 60 , 50 ] [ Difficulty ] ) ;
12082: LD_INT 5
12084: PPUSH
12085: LD_INT 3
12087: PPUSH
12088: LD_INT 21
12090: PPUSH
12091: LD_INT 1
12093: PPUSH
12094: LD_INT 1
12096: PPUSH
12097: LD_INT 42
12099: PPUSH
12100: LD_INT 90
12102: PUSH
12103: LD_INT 70
12105: PUSH
12106: LD_INT 60
12108: PUSH
12109: LD_INT 50
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: PUSH
12118: LD_OWVAR 67
12122: ARRAY
12123: PPUSH
12124: CALL 241 0 7
// veh := CreateVehicle ;
12128: LD_ADDR_VAR 0 3
12132: PUSH
12133: CALL_OW 45
12137: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
12138: LD_VAR 0 3
12142: PPUSH
12143: LD_INT 4
12145: PPUSH
12146: CALL_OW 233
// PlaceUnitXY ( veh , 109 , 38 , false ) ;
12150: LD_VAR 0 3
12154: PPUSH
12155: LD_INT 109
12157: PPUSH
12158: LD_INT 38
12160: PPUSH
12161: LD_INT 0
12163: PPUSH
12164: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
12168: LD_EXP 30
12172: PPUSH
12173: LD_VAR 0 3
12177: PPUSH
12178: CALL_OW 52
// ComTurnUnit ( Kaia , Aviradze ) ;
12182: LD_EXP 28
12186: PPUSH
12187: LD_EXP 27
12191: PPUSH
12192: CALL_OW 119
// ComTurnUnit ( Aviradze , Kaia ) ;
12196: LD_EXP 27
12200: PPUSH
12201: LD_EXP 28
12205: PPUSH
12206: CALL_OW 119
// if not Givi or not Mike then
12210: LD_EXP 24
12214: NOT
12215: PUSH
12216: LD_EXP 25
12220: NOT
12221: OR
12222: IFFALSE 12298
// begin uc_nation := 2 ;
12224: LD_ADDR_OWVAR 21
12228: PUSH
12229: LD_INT 2
12231: ST_TO_ADDR
// uc_side := 5 ;
12232: LD_ADDR_OWVAR 20
12236: PUSH
12237: LD_INT 5
12239: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 1 ) ;
12240: LD_INT 1
12242: PPUSH
12243: LD_INT 1
12245: PPUSH
12246: LD_INT 1
12248: PPUSH
12249: CALL_OW 380
// un := CreateHuman ;
12253: LD_ADDR_VAR 0 2
12257: PUSH
12258: CALL_OW 44
12262: ST_TO_ADDR
// PlaceUnitXYR ( un , 112 , 40 , 3 , false ) ;
12263: LD_VAR 0 2
12267: PPUSH
12268: LD_INT 112
12270: PPUSH
12271: LD_INT 40
12273: PPUSH
12274: LD_INT 3
12276: PPUSH
12277: LD_INT 0
12279: PPUSH
12280: CALL_OW 50
// ComTurnUnit ( un , Aviradze ) ;
12284: LD_VAR 0 2
12288: PPUSH
12289: LD_EXP 27
12293: PPUSH
12294: CALL_OW 119
// end ; end ;
12298: LD_VAR 0 1
12302: RET
// export function PrepareFarmer ; var i ; begin
12303: LD_INT 0
12305: PPUSH
12306: PPUSH
// uc_side := 5 ;
12307: LD_ADDR_OWVAR 20
12311: PUSH
12312: LD_INT 5
12314: ST_TO_ADDR
// uc_nation := 2 ;
12315: LD_ADDR_OWVAR 21
12319: PUSH
12320: LD_INT 2
12322: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
12323: LD_ADDR_EXP 31
12327: PUSH
12328: LD_STRING Farmer
12330: PPUSH
12331: LD_INT 0
12333: PPUSH
12334: LD_STRING 
12336: PPUSH
12337: CALL 32698 0 3
12341: ST_TO_ADDR
// PlaceUnitXY ( Farmer , 106 , 62 , false ) ;
12342: LD_EXP 31
12346: PPUSH
12347: LD_INT 106
12349: PPUSH
12350: LD_INT 62
12352: PPUSH
12353: LD_INT 0
12355: PPUSH
12356: CALL_OW 48
// for i := 1 to 5 do
12360: LD_ADDR_VAR 0 2
12364: PUSH
12365: DOUBLE
12366: LD_INT 1
12368: DEC
12369: ST_TO_ADDR
12370: LD_INT 5
12372: PUSH
12373: FOR_TO
12374: IFFALSE 12412
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
12376: LD_INT 1
12378: PPUSH
12379: LD_INT 1
12381: PPUSH
12382: LD_INT 1
12384: PPUSH
12385: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 105 , 64 , 3 , false ) ;
12389: CALL_OW 44
12393: PPUSH
12394: LD_INT 105
12396: PPUSH
12397: LD_INT 64
12399: PPUSH
12400: LD_INT 3
12402: PPUSH
12403: LD_INT 0
12405: PPUSH
12406: CALL_OW 50
// end ;
12410: GO 12373
12412: POP
12413: POP
// end ; end_of_file
12414: LD_VAR 0 1
12418: RET
// every 2 2$20 + 0 0$10 do
12419: GO 12421
12421: DISABLE
// begin enable ;
12422: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , forest , true ) ;
12423: LD_INT 1
12425: PPUSH
12426: LD_INT 5
12428: PPUSH
12429: CALL_OW 12
12433: PPUSH
12434: LD_INT 1
12436: PPUSH
12437: LD_INT 1
12439: PPUSH
12440: CALL_OW 55
// if tick > 6 6$00 then
12444: LD_OWVAR 1
12448: PUSH
12449: LD_INT 12600
12451: GREATER
12452: IFFALSE 12455
// disable ;
12454: DISABLE
// end ; end_of_file
12455: END
// on UnitDestroyed ( un ) do begin if un = Heike then
12456: LD_VAR 0 1
12460: PUSH
12461: LD_EXP 23
12465: EQUAL
12466: IFFALSE 12475
// YouLost ( Heike ) ;
12468: LD_STRING Heike
12470: PPUSH
12471: CALL_OW 104
// if un = Aviradze then
12475: LD_VAR 0 1
12479: PUSH
12480: LD_EXP 27
12484: EQUAL
12485: IFFALSE 12494
// YouLost ( Aviradze ) ;
12487: LD_STRING Aviradze
12489: PPUSH
12490: CALL_OW 104
// if un = usLab then
12494: LD_VAR 0 1
12498: PUSH
12499: LD_INT 3
12501: EQUAL
12502: IFFALSE 12511
// YouLost ( Lab ) ;
12504: LD_STRING Lab
12506: PPUSH
12507: CALL_OW 104
// if ( un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) diff [ Heike , Aviradze ] ) and aviradzeSpotted then
12511: LD_VAR 0 1
12515: PUSH
12516: LD_INT 22
12518: PUSH
12519: LD_INT 2
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: PUSH
12526: LD_INT 21
12528: PUSH
12529: LD_INT 1
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PUSH
12536: LD_INT 23
12538: PUSH
12539: LD_INT 2
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: LIST
12550: PPUSH
12551: CALL_OW 69
12555: PUSH
12556: LD_EXP 23
12560: PUSH
12561: LD_EXP 27
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: DIFF
12570: IN
12571: PUSH
12572: LD_EXP 4
12576: AND
12577: IFFALSE 12593
// lostCounter := lostCounter + 1 ;
12579: LD_ADDR_EXP 18
12583: PUSH
12584: LD_EXP 18
12588: PUSH
12589: LD_INT 1
12591: PLUS
12592: ST_TO_ADDR
// end ;
12593: PPOPN 1
12595: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 2 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) = 0 do
12596: LD_INT 23
12598: PUSH
12599: LD_INT 2
12601: PUSH
12602: EMPTY
12603: LIST
12604: LIST
12605: PUSH
12606: LD_INT 25
12608: PUSH
12609: LD_INT 2
12611: PUSH
12612: EMPTY
12613: LIST
12614: LIST
12615: PUSH
12616: EMPTY
12617: LIST
12618: LIST
12619: PPUSH
12620: CALL_OW 69
12624: PUSH
12625: LD_INT 0
12627: EQUAL
12628: PUSH
12629: LD_INT 22
12631: PUSH
12632: LD_INT 2
12634: PUSH
12635: EMPTY
12636: LIST
12637: LIST
12638: PUSH
12639: LD_INT 21
12641: PUSH
12642: LD_INT 3
12644: PUSH
12645: EMPTY
12646: LIST
12647: LIST
12648: PUSH
12649: EMPTY
12650: LIST
12651: LIST
12652: PPUSH
12653: CALL_OW 69
12657: PUSH
12658: LD_INT 0
12660: EQUAL
12661: AND
12662: IFFALSE 12674
12664: GO 12666
12666: DISABLE
// YouLost ( Eng ) ;
12667: LD_STRING Eng
12669: PPUSH
12670: CALL_OW 104
12674: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in usSci and killerSide = 2 then
12675: LD_VAR 0 1
12679: PUSH
12680: LD_EXP 22
12684: IN
12685: PUSH
12686: LD_VAR 0 2
12690: PUSH
12691: LD_INT 2
12693: EQUAL
12694: AND
12695: IFFALSE 12727
// begin usSci := usSci diff un ;
12697: LD_ADDR_EXP 22
12701: PUSH
12702: LD_EXP 22
12706: PUSH
12707: LD_VAR 0 1
12711: DIFF
12712: ST_TO_ADDR
// sciCounterKill := sciCounterKill + 1 ;
12713: LD_ADDR_EXP 9
12717: PUSH
12718: LD_EXP 9
12722: PUSH
12723: LD_INT 1
12725: PLUS
12726: ST_TO_ADDR
// end ; end ;
12727: PPOPN 3
12729: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
12730: LD_VAR 0 1
12734: PUSH
12735: LD_INT 2
12737: EQUAL
12738: PUSH
12739: LD_VAR 0 2
12743: PUSH
12744: LD_INT 5
12746: EQUAL
12747: AND
12748: IFFALSE 12757
// YouLost ( FriendlyFire ) ;
12750: LD_STRING FriendlyFire
12752: PPUSH
12753: CALL_OW 104
// end ; end_of_file end_of_file
12757: PPOPN 2
12759: END
// every 0 0$1 do
12760: GO 12762
12762: DISABLE
// begin enable ;
12763: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
12764: LD_STRING updateTimer(
12766: PUSH
12767: LD_OWVAR 1
12771: STR
12772: PUSH
12773: LD_STRING );
12775: STR
12776: PPUSH
12777: CALL_OW 559
// end ;
12781: END
// export function SOS_MapStart ( ) ; begin
12782: LD_INT 0
12784: PPUSH
// if streamModeActive then
12785: LD_EXP 32
12789: IFFALSE 12798
// DefineStreamItems ( true ) ;
12791: LD_INT 1
12793: PPUSH
12794: CALL 14452 0 1
// UpdateFactoryWaypoints ( ) ;
12798: CALL 27313 0 0
// UpdateWarehouseGatheringPoints ( ) ;
12802: CALL 27570 0 0
// end ;
12806: LD_VAR 0 1
12810: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12811: LD_INT 0
12813: PPUSH
// if p2 = hack_mode then
12814: LD_VAR 0 2
12818: PUSH
12819: LD_INT 100
12821: EQUAL
12822: IFFALSE 13825
// begin if not StreamModeActive then
12824: LD_EXP 32
12828: NOT
12829: IFFALSE 12839
// StreamModeActive := true ;
12831: LD_ADDR_EXP 32
12835: PUSH
12836: LD_INT 1
12838: ST_TO_ADDR
// if p3 = 0 then
12839: LD_VAR 0 3
12843: PUSH
12844: LD_INT 0
12846: EQUAL
12847: IFFALSE 12853
// InitStreamMode ;
12849: CALL 13988 0 0
// if p3 = 1 then
12853: LD_VAR 0 3
12857: PUSH
12858: LD_INT 1
12860: EQUAL
12861: IFFALSE 12871
// sRocket := true ;
12863: LD_ADDR_EXP 37
12867: PUSH
12868: LD_INT 1
12870: ST_TO_ADDR
// if p3 = 2 then
12871: LD_VAR 0 3
12875: PUSH
12876: LD_INT 2
12878: EQUAL
12879: IFFALSE 12889
// sSpeed := true ;
12881: LD_ADDR_EXP 36
12885: PUSH
12886: LD_INT 1
12888: ST_TO_ADDR
// if p3 = 3 then
12889: LD_VAR 0 3
12893: PUSH
12894: LD_INT 3
12896: EQUAL
12897: IFFALSE 12907
// sEngine := true ;
12899: LD_ADDR_EXP 38
12903: PUSH
12904: LD_INT 1
12906: ST_TO_ADDR
// if p3 = 4 then
12907: LD_VAR 0 3
12911: PUSH
12912: LD_INT 4
12914: EQUAL
12915: IFFALSE 12925
// sSpec := true ;
12917: LD_ADDR_EXP 35
12921: PUSH
12922: LD_INT 1
12924: ST_TO_ADDR
// if p3 = 5 then
12925: LD_VAR 0 3
12929: PUSH
12930: LD_INT 5
12932: EQUAL
12933: IFFALSE 12943
// sLevel := true ;
12935: LD_ADDR_EXP 39
12939: PUSH
12940: LD_INT 1
12942: ST_TO_ADDR
// if p3 = 6 then
12943: LD_VAR 0 3
12947: PUSH
12948: LD_INT 6
12950: EQUAL
12951: IFFALSE 12961
// sArmoury := true ;
12953: LD_ADDR_EXP 40
12957: PUSH
12958: LD_INT 1
12960: ST_TO_ADDR
// if p3 = 7 then
12961: LD_VAR 0 3
12965: PUSH
12966: LD_INT 7
12968: EQUAL
12969: IFFALSE 12979
// sRadar := true ;
12971: LD_ADDR_EXP 41
12975: PUSH
12976: LD_INT 1
12978: ST_TO_ADDR
// if p3 = 8 then
12979: LD_VAR 0 3
12983: PUSH
12984: LD_INT 8
12986: EQUAL
12987: IFFALSE 12997
// sBunker := true ;
12989: LD_ADDR_EXP 42
12993: PUSH
12994: LD_INT 1
12996: ST_TO_ADDR
// if p3 = 9 then
12997: LD_VAR 0 3
13001: PUSH
13002: LD_INT 9
13004: EQUAL
13005: IFFALSE 13015
// sHack := true ;
13007: LD_ADDR_EXP 43
13011: PUSH
13012: LD_INT 1
13014: ST_TO_ADDR
// if p3 = 10 then
13015: LD_VAR 0 3
13019: PUSH
13020: LD_INT 10
13022: EQUAL
13023: IFFALSE 13033
// sFire := true ;
13025: LD_ADDR_EXP 44
13029: PUSH
13030: LD_INT 1
13032: ST_TO_ADDR
// if p3 = 11 then
13033: LD_VAR 0 3
13037: PUSH
13038: LD_INT 11
13040: EQUAL
13041: IFFALSE 13051
// sRefresh := true ;
13043: LD_ADDR_EXP 45
13047: PUSH
13048: LD_INT 1
13050: ST_TO_ADDR
// if p3 = 12 then
13051: LD_VAR 0 3
13055: PUSH
13056: LD_INT 12
13058: EQUAL
13059: IFFALSE 13069
// sExp := true ;
13061: LD_ADDR_EXP 46
13065: PUSH
13066: LD_INT 1
13068: ST_TO_ADDR
// if p3 = 13 then
13069: LD_VAR 0 3
13073: PUSH
13074: LD_INT 13
13076: EQUAL
13077: IFFALSE 13087
// sDepot := true ;
13079: LD_ADDR_EXP 47
13083: PUSH
13084: LD_INT 1
13086: ST_TO_ADDR
// if p3 = 14 then
13087: LD_VAR 0 3
13091: PUSH
13092: LD_INT 14
13094: EQUAL
13095: IFFALSE 13105
// sFlag := true ;
13097: LD_ADDR_EXP 48
13101: PUSH
13102: LD_INT 1
13104: ST_TO_ADDR
// if p3 = 15 then
13105: LD_VAR 0 3
13109: PUSH
13110: LD_INT 15
13112: EQUAL
13113: IFFALSE 13123
// sKamikadze := true ;
13115: LD_ADDR_EXP 56
13119: PUSH
13120: LD_INT 1
13122: ST_TO_ADDR
// if p3 = 16 then
13123: LD_VAR 0 3
13127: PUSH
13128: LD_INT 16
13130: EQUAL
13131: IFFALSE 13141
// sTroll := true ;
13133: LD_ADDR_EXP 57
13137: PUSH
13138: LD_INT 1
13140: ST_TO_ADDR
// if p3 = 17 then
13141: LD_VAR 0 3
13145: PUSH
13146: LD_INT 17
13148: EQUAL
13149: IFFALSE 13159
// sSlow := true ;
13151: LD_ADDR_EXP 58
13155: PUSH
13156: LD_INT 1
13158: ST_TO_ADDR
// if p3 = 18 then
13159: LD_VAR 0 3
13163: PUSH
13164: LD_INT 18
13166: EQUAL
13167: IFFALSE 13177
// sLack := true ;
13169: LD_ADDR_EXP 59
13173: PUSH
13174: LD_INT 1
13176: ST_TO_ADDR
// if p3 = 19 then
13177: LD_VAR 0 3
13181: PUSH
13182: LD_INT 19
13184: EQUAL
13185: IFFALSE 13195
// sTank := true ;
13187: LD_ADDR_EXP 61
13191: PUSH
13192: LD_INT 1
13194: ST_TO_ADDR
// if p3 = 20 then
13195: LD_VAR 0 3
13199: PUSH
13200: LD_INT 20
13202: EQUAL
13203: IFFALSE 13213
// sRemote := true ;
13205: LD_ADDR_EXP 62
13209: PUSH
13210: LD_INT 1
13212: ST_TO_ADDR
// if p3 = 21 then
13213: LD_VAR 0 3
13217: PUSH
13218: LD_INT 21
13220: EQUAL
13221: IFFALSE 13231
// sPowell := true ;
13223: LD_ADDR_EXP 63
13227: PUSH
13228: LD_INT 1
13230: ST_TO_ADDR
// if p3 = 22 then
13231: LD_VAR 0 3
13235: PUSH
13236: LD_INT 22
13238: EQUAL
13239: IFFALSE 13249
// sTeleport := true ;
13241: LD_ADDR_EXP 66
13245: PUSH
13246: LD_INT 1
13248: ST_TO_ADDR
// if p3 = 23 then
13249: LD_VAR 0 3
13253: PUSH
13254: LD_INT 23
13256: EQUAL
13257: IFFALSE 13267
// sOilTower := true ;
13259: LD_ADDR_EXP 68
13263: PUSH
13264: LD_INT 1
13266: ST_TO_ADDR
// if p3 = 24 then
13267: LD_VAR 0 3
13271: PUSH
13272: LD_INT 24
13274: EQUAL
13275: IFFALSE 13285
// sShovel := true ;
13277: LD_ADDR_EXP 69
13281: PUSH
13282: LD_INT 1
13284: ST_TO_ADDR
// if p3 = 25 then
13285: LD_VAR 0 3
13289: PUSH
13290: LD_INT 25
13292: EQUAL
13293: IFFALSE 13303
// sSheik := true ;
13295: LD_ADDR_EXP 70
13299: PUSH
13300: LD_INT 1
13302: ST_TO_ADDR
// if p3 = 26 then
13303: LD_VAR 0 3
13307: PUSH
13308: LD_INT 26
13310: EQUAL
13311: IFFALSE 13321
// sEarthquake := true ;
13313: LD_ADDR_EXP 72
13317: PUSH
13318: LD_INT 1
13320: ST_TO_ADDR
// if p3 = 27 then
13321: LD_VAR 0 3
13325: PUSH
13326: LD_INT 27
13328: EQUAL
13329: IFFALSE 13339
// sAI := true ;
13331: LD_ADDR_EXP 73
13335: PUSH
13336: LD_INT 1
13338: ST_TO_ADDR
// if p3 = 28 then
13339: LD_VAR 0 3
13343: PUSH
13344: LD_INT 28
13346: EQUAL
13347: IFFALSE 13357
// sCargo := true ;
13349: LD_ADDR_EXP 76
13353: PUSH
13354: LD_INT 1
13356: ST_TO_ADDR
// if p3 = 29 then
13357: LD_VAR 0 3
13361: PUSH
13362: LD_INT 29
13364: EQUAL
13365: IFFALSE 13375
// sDLaser := true ;
13367: LD_ADDR_EXP 77
13371: PUSH
13372: LD_INT 1
13374: ST_TO_ADDR
// if p3 = 30 then
13375: LD_VAR 0 3
13379: PUSH
13380: LD_INT 30
13382: EQUAL
13383: IFFALSE 13393
// sExchange := true ;
13385: LD_ADDR_EXP 78
13389: PUSH
13390: LD_INT 1
13392: ST_TO_ADDR
// if p3 = 31 then
13393: LD_VAR 0 3
13397: PUSH
13398: LD_INT 31
13400: EQUAL
13401: IFFALSE 13411
// sFac := true ;
13403: LD_ADDR_EXP 79
13407: PUSH
13408: LD_INT 1
13410: ST_TO_ADDR
// if p3 = 32 then
13411: LD_VAR 0 3
13415: PUSH
13416: LD_INT 32
13418: EQUAL
13419: IFFALSE 13429
// sPower := true ;
13421: LD_ADDR_EXP 80
13425: PUSH
13426: LD_INT 1
13428: ST_TO_ADDR
// if p3 = 33 then
13429: LD_VAR 0 3
13433: PUSH
13434: LD_INT 33
13436: EQUAL
13437: IFFALSE 13447
// sRandom := true ;
13439: LD_ADDR_EXP 81
13443: PUSH
13444: LD_INT 1
13446: ST_TO_ADDR
// if p3 = 34 then
13447: LD_VAR 0 3
13451: PUSH
13452: LD_INT 34
13454: EQUAL
13455: IFFALSE 13465
// sShield := true ;
13457: LD_ADDR_EXP 82
13461: PUSH
13462: LD_INT 1
13464: ST_TO_ADDR
// if p3 = 35 then
13465: LD_VAR 0 3
13469: PUSH
13470: LD_INT 35
13472: EQUAL
13473: IFFALSE 13483
// sTime := true ;
13475: LD_ADDR_EXP 83
13479: PUSH
13480: LD_INT 1
13482: ST_TO_ADDR
// if p3 = 36 then
13483: LD_VAR 0 3
13487: PUSH
13488: LD_INT 36
13490: EQUAL
13491: IFFALSE 13501
// sTools := true ;
13493: LD_ADDR_EXP 84
13497: PUSH
13498: LD_INT 1
13500: ST_TO_ADDR
// if p3 = 101 then
13501: LD_VAR 0 3
13505: PUSH
13506: LD_INT 101
13508: EQUAL
13509: IFFALSE 13519
// sSold := true ;
13511: LD_ADDR_EXP 49
13515: PUSH
13516: LD_INT 1
13518: ST_TO_ADDR
// if p3 = 102 then
13519: LD_VAR 0 3
13523: PUSH
13524: LD_INT 102
13526: EQUAL
13527: IFFALSE 13537
// sDiff := true ;
13529: LD_ADDR_EXP 50
13533: PUSH
13534: LD_INT 1
13536: ST_TO_ADDR
// if p3 = 103 then
13537: LD_VAR 0 3
13541: PUSH
13542: LD_INT 103
13544: EQUAL
13545: IFFALSE 13555
// sFog := true ;
13547: LD_ADDR_EXP 53
13551: PUSH
13552: LD_INT 1
13554: ST_TO_ADDR
// if p3 = 104 then
13555: LD_VAR 0 3
13559: PUSH
13560: LD_INT 104
13562: EQUAL
13563: IFFALSE 13573
// sReset := true ;
13565: LD_ADDR_EXP 54
13569: PUSH
13570: LD_INT 1
13572: ST_TO_ADDR
// if p3 = 105 then
13573: LD_VAR 0 3
13577: PUSH
13578: LD_INT 105
13580: EQUAL
13581: IFFALSE 13591
// sSun := true ;
13583: LD_ADDR_EXP 55
13587: PUSH
13588: LD_INT 1
13590: ST_TO_ADDR
// if p3 = 106 then
13591: LD_VAR 0 3
13595: PUSH
13596: LD_INT 106
13598: EQUAL
13599: IFFALSE 13609
// sTiger := true ;
13601: LD_ADDR_EXP 51
13605: PUSH
13606: LD_INT 1
13608: ST_TO_ADDR
// if p3 = 107 then
13609: LD_VAR 0 3
13613: PUSH
13614: LD_INT 107
13616: EQUAL
13617: IFFALSE 13627
// sBomb := true ;
13619: LD_ADDR_EXP 52
13623: PUSH
13624: LD_INT 1
13626: ST_TO_ADDR
// if p3 = 108 then
13627: LD_VAR 0 3
13631: PUSH
13632: LD_INT 108
13634: EQUAL
13635: IFFALSE 13645
// sWound := true ;
13637: LD_ADDR_EXP 60
13641: PUSH
13642: LD_INT 1
13644: ST_TO_ADDR
// if p3 = 109 then
13645: LD_VAR 0 3
13649: PUSH
13650: LD_INT 109
13652: EQUAL
13653: IFFALSE 13663
// sBetray := true ;
13655: LD_ADDR_EXP 64
13659: PUSH
13660: LD_INT 1
13662: ST_TO_ADDR
// if p3 = 110 then
13663: LD_VAR 0 3
13667: PUSH
13668: LD_INT 110
13670: EQUAL
13671: IFFALSE 13681
// sContamin := true ;
13673: LD_ADDR_EXP 65
13677: PUSH
13678: LD_INT 1
13680: ST_TO_ADDR
// if p3 = 111 then
13681: LD_VAR 0 3
13685: PUSH
13686: LD_INT 111
13688: EQUAL
13689: IFFALSE 13699
// sOil := true ;
13691: LD_ADDR_EXP 67
13695: PUSH
13696: LD_INT 1
13698: ST_TO_ADDR
// if p3 = 112 then
13699: LD_VAR 0 3
13703: PUSH
13704: LD_INT 112
13706: EQUAL
13707: IFFALSE 13717
// sStu := true ;
13709: LD_ADDR_EXP 71
13713: PUSH
13714: LD_INT 1
13716: ST_TO_ADDR
// if p3 = 113 then
13717: LD_VAR 0 3
13721: PUSH
13722: LD_INT 113
13724: EQUAL
13725: IFFALSE 13735
// sBazooka := true ;
13727: LD_ADDR_EXP 74
13731: PUSH
13732: LD_INT 1
13734: ST_TO_ADDR
// if p3 = 114 then
13735: LD_VAR 0 3
13739: PUSH
13740: LD_INT 114
13742: EQUAL
13743: IFFALSE 13753
// sMortar := true ;
13745: LD_ADDR_EXP 75
13749: PUSH
13750: LD_INT 1
13752: ST_TO_ADDR
// if p3 = 115 then
13753: LD_VAR 0 3
13757: PUSH
13758: LD_INT 115
13760: EQUAL
13761: IFFALSE 13771
// sRanger := true ;
13763: LD_ADDR_EXP 85
13767: PUSH
13768: LD_INT 1
13770: ST_TO_ADDR
// if p3 = 116 then
13771: LD_VAR 0 3
13775: PUSH
13776: LD_INT 116
13778: EQUAL
13779: IFFALSE 13789
// sComputer := true ;
13781: LD_ADDR_EXP 86
13785: PUSH
13786: LD_INT 1
13788: ST_TO_ADDR
// if p3 = 117 then
13789: LD_VAR 0 3
13793: PUSH
13794: LD_INT 117
13796: EQUAL
13797: IFFALSE 13807
// s30 := true ;
13799: LD_ADDR_EXP 87
13803: PUSH
13804: LD_INT 1
13806: ST_TO_ADDR
// if p3 = 118 then
13807: LD_VAR 0 3
13811: PUSH
13812: LD_INT 118
13814: EQUAL
13815: IFFALSE 13825
// s60 := true ;
13817: LD_ADDR_EXP 88
13821: PUSH
13822: LD_INT 1
13824: ST_TO_ADDR
// end ; if p2 = stream_mode then
13825: LD_VAR 0 2
13829: PUSH
13830: LD_INT 101
13832: EQUAL
13833: IFFALSE 13961
// begin case p3 of 1 :
13835: LD_VAR 0 3
13839: PUSH
13840: LD_INT 1
13842: DOUBLE
13843: EQUAL
13844: IFTRUE 13848
13846: GO 13855
13848: POP
// hHackUnlimitedResources ; 2 :
13849: CALL 26059 0 0
13853: GO 13961
13855: LD_INT 2
13857: DOUBLE
13858: EQUAL
13859: IFTRUE 13863
13861: GO 13870
13863: POP
// hHackSetLevel10 ; 3 :
13864: CALL 26192 0 0
13868: GO 13961
13870: LD_INT 3
13872: DOUBLE
13873: EQUAL
13874: IFTRUE 13878
13876: GO 13885
13878: POP
// hHackSetLevel10YourUnits ; 4 :
13879: CALL 26277 0 0
13883: GO 13961
13885: LD_INT 4
13887: DOUBLE
13888: EQUAL
13889: IFTRUE 13893
13891: GO 13900
13893: POP
// hHackInvincible ; 5 :
13894: CALL 26725 0 0
13898: GO 13961
13900: LD_INT 5
13902: DOUBLE
13903: EQUAL
13904: IFTRUE 13908
13906: GO 13915
13908: POP
// hHackInvisible ; 6 :
13909: CALL 26836 0 0
13913: GO 13961
13915: LD_INT 6
13917: DOUBLE
13918: EQUAL
13919: IFTRUE 13923
13921: GO 13930
13923: POP
// hHackChangeYourSide ; 7 :
13924: CALL 26893 0 0
13928: GO 13961
13930: LD_INT 7
13932: DOUBLE
13933: EQUAL
13934: IFTRUE 13938
13936: GO 13945
13938: POP
// hHackChangeUnitSide ; 8 :
13939: CALL 26935 0 0
13943: GO 13961
13945: LD_INT 8
13947: DOUBLE
13948: EQUAL
13949: IFTRUE 13953
13951: GO 13960
13953: POP
// hHackFog ; end ;
13954: CALL 27036 0 0
13958: GO 13961
13960: POP
// end ; end ;
13961: LD_VAR 0 7
13965: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
13966: GO 13968
13968: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
13969: LD_STRING initStreamRollete();
13971: PPUSH
13972: CALL_OW 559
// InitStreamMode ;
13976: CALL 13988 0 0
// DefineStreamItems ( false ) ;
13980: LD_INT 0
13982: PPUSH
13983: CALL 14452 0 1
// end ;
13987: END
// function InitStreamMode ; begin
13988: LD_INT 0
13990: PPUSH
// streamModeActive := false ;
13991: LD_ADDR_EXP 32
13995: PUSH
13996: LD_INT 0
13998: ST_TO_ADDR
// normalCounter := 36 ;
13999: LD_ADDR_EXP 33
14003: PUSH
14004: LD_INT 36
14006: ST_TO_ADDR
// hardcoreCounter := 18 ;
14007: LD_ADDR_EXP 34
14011: PUSH
14012: LD_INT 18
14014: ST_TO_ADDR
// sRocket := false ;
14015: LD_ADDR_EXP 37
14019: PUSH
14020: LD_INT 0
14022: ST_TO_ADDR
// sSpeed := false ;
14023: LD_ADDR_EXP 36
14027: PUSH
14028: LD_INT 0
14030: ST_TO_ADDR
// sEngine := false ;
14031: LD_ADDR_EXP 38
14035: PUSH
14036: LD_INT 0
14038: ST_TO_ADDR
// sSpec := false ;
14039: LD_ADDR_EXP 35
14043: PUSH
14044: LD_INT 0
14046: ST_TO_ADDR
// sLevel := false ;
14047: LD_ADDR_EXP 39
14051: PUSH
14052: LD_INT 0
14054: ST_TO_ADDR
// sArmoury := false ;
14055: LD_ADDR_EXP 40
14059: PUSH
14060: LD_INT 0
14062: ST_TO_ADDR
// sRadar := false ;
14063: LD_ADDR_EXP 41
14067: PUSH
14068: LD_INT 0
14070: ST_TO_ADDR
// sBunker := false ;
14071: LD_ADDR_EXP 42
14075: PUSH
14076: LD_INT 0
14078: ST_TO_ADDR
// sHack := false ;
14079: LD_ADDR_EXP 43
14083: PUSH
14084: LD_INT 0
14086: ST_TO_ADDR
// sFire := false ;
14087: LD_ADDR_EXP 44
14091: PUSH
14092: LD_INT 0
14094: ST_TO_ADDR
// sRefresh := false ;
14095: LD_ADDR_EXP 45
14099: PUSH
14100: LD_INT 0
14102: ST_TO_ADDR
// sExp := false ;
14103: LD_ADDR_EXP 46
14107: PUSH
14108: LD_INT 0
14110: ST_TO_ADDR
// sDepot := false ;
14111: LD_ADDR_EXP 47
14115: PUSH
14116: LD_INT 0
14118: ST_TO_ADDR
// sFlag := false ;
14119: LD_ADDR_EXP 48
14123: PUSH
14124: LD_INT 0
14126: ST_TO_ADDR
// sKamikadze := false ;
14127: LD_ADDR_EXP 56
14131: PUSH
14132: LD_INT 0
14134: ST_TO_ADDR
// sTroll := false ;
14135: LD_ADDR_EXP 57
14139: PUSH
14140: LD_INT 0
14142: ST_TO_ADDR
// sSlow := false ;
14143: LD_ADDR_EXP 58
14147: PUSH
14148: LD_INT 0
14150: ST_TO_ADDR
// sLack := false ;
14151: LD_ADDR_EXP 59
14155: PUSH
14156: LD_INT 0
14158: ST_TO_ADDR
// sTank := false ;
14159: LD_ADDR_EXP 61
14163: PUSH
14164: LD_INT 0
14166: ST_TO_ADDR
// sRemote := false ;
14167: LD_ADDR_EXP 62
14171: PUSH
14172: LD_INT 0
14174: ST_TO_ADDR
// sPowell := false ;
14175: LD_ADDR_EXP 63
14179: PUSH
14180: LD_INT 0
14182: ST_TO_ADDR
// sTeleport := false ;
14183: LD_ADDR_EXP 66
14187: PUSH
14188: LD_INT 0
14190: ST_TO_ADDR
// sOilTower := false ;
14191: LD_ADDR_EXP 68
14195: PUSH
14196: LD_INT 0
14198: ST_TO_ADDR
// sShovel := false ;
14199: LD_ADDR_EXP 69
14203: PUSH
14204: LD_INT 0
14206: ST_TO_ADDR
// sSheik := false ;
14207: LD_ADDR_EXP 70
14211: PUSH
14212: LD_INT 0
14214: ST_TO_ADDR
// sEarthquake := false ;
14215: LD_ADDR_EXP 72
14219: PUSH
14220: LD_INT 0
14222: ST_TO_ADDR
// sAI := false ;
14223: LD_ADDR_EXP 73
14227: PUSH
14228: LD_INT 0
14230: ST_TO_ADDR
// sCargo := false ;
14231: LD_ADDR_EXP 76
14235: PUSH
14236: LD_INT 0
14238: ST_TO_ADDR
// sDLaser := false ;
14239: LD_ADDR_EXP 77
14243: PUSH
14244: LD_INT 0
14246: ST_TO_ADDR
// sExchange := false ;
14247: LD_ADDR_EXP 78
14251: PUSH
14252: LD_INT 0
14254: ST_TO_ADDR
// sFac := false ;
14255: LD_ADDR_EXP 79
14259: PUSH
14260: LD_INT 0
14262: ST_TO_ADDR
// sPower := false ;
14263: LD_ADDR_EXP 80
14267: PUSH
14268: LD_INT 0
14270: ST_TO_ADDR
// sRandom := false ;
14271: LD_ADDR_EXP 81
14275: PUSH
14276: LD_INT 0
14278: ST_TO_ADDR
// sShield := false ;
14279: LD_ADDR_EXP 82
14283: PUSH
14284: LD_INT 0
14286: ST_TO_ADDR
// sTime := false ;
14287: LD_ADDR_EXP 83
14291: PUSH
14292: LD_INT 0
14294: ST_TO_ADDR
// sTools := false ;
14295: LD_ADDR_EXP 84
14299: PUSH
14300: LD_INT 0
14302: ST_TO_ADDR
// sSold := false ;
14303: LD_ADDR_EXP 49
14307: PUSH
14308: LD_INT 0
14310: ST_TO_ADDR
// sDiff := false ;
14311: LD_ADDR_EXP 50
14315: PUSH
14316: LD_INT 0
14318: ST_TO_ADDR
// sFog := false ;
14319: LD_ADDR_EXP 53
14323: PUSH
14324: LD_INT 0
14326: ST_TO_ADDR
// sReset := false ;
14327: LD_ADDR_EXP 54
14331: PUSH
14332: LD_INT 0
14334: ST_TO_ADDR
// sSun := false ;
14335: LD_ADDR_EXP 55
14339: PUSH
14340: LD_INT 0
14342: ST_TO_ADDR
// sTiger := false ;
14343: LD_ADDR_EXP 51
14347: PUSH
14348: LD_INT 0
14350: ST_TO_ADDR
// sBomb := false ;
14351: LD_ADDR_EXP 52
14355: PUSH
14356: LD_INT 0
14358: ST_TO_ADDR
// sWound := false ;
14359: LD_ADDR_EXP 60
14363: PUSH
14364: LD_INT 0
14366: ST_TO_ADDR
// sBetray := false ;
14367: LD_ADDR_EXP 64
14371: PUSH
14372: LD_INT 0
14374: ST_TO_ADDR
// sContamin := false ;
14375: LD_ADDR_EXP 65
14379: PUSH
14380: LD_INT 0
14382: ST_TO_ADDR
// sOil := false ;
14383: LD_ADDR_EXP 67
14387: PUSH
14388: LD_INT 0
14390: ST_TO_ADDR
// sStu := false ;
14391: LD_ADDR_EXP 71
14395: PUSH
14396: LD_INT 0
14398: ST_TO_ADDR
// sBazooka := false ;
14399: LD_ADDR_EXP 74
14403: PUSH
14404: LD_INT 0
14406: ST_TO_ADDR
// sMortar := false ;
14407: LD_ADDR_EXP 75
14411: PUSH
14412: LD_INT 0
14414: ST_TO_ADDR
// sRanger := false ;
14415: LD_ADDR_EXP 85
14419: PUSH
14420: LD_INT 0
14422: ST_TO_ADDR
// sComputer := false ;
14423: LD_ADDR_EXP 86
14427: PUSH
14428: LD_INT 0
14430: ST_TO_ADDR
// s30 := false ;
14431: LD_ADDR_EXP 87
14435: PUSH
14436: LD_INT 0
14438: ST_TO_ADDR
// s60 := false ;
14439: LD_ADDR_EXP 88
14443: PUSH
14444: LD_INT 0
14446: ST_TO_ADDR
// end ;
14447: LD_VAR 0 1
14451: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
14452: LD_INT 0
14454: PPUSH
14455: PPUSH
14456: PPUSH
14457: PPUSH
14458: PPUSH
14459: PPUSH
14460: PPUSH
// result := [ ] ;
14461: LD_ADDR_VAR 0 2
14465: PUSH
14466: EMPTY
14467: ST_TO_ADDR
// if campaign_id = 1 then
14468: LD_OWVAR 69
14472: PUSH
14473: LD_INT 1
14475: EQUAL
14476: IFFALSE 17642
// begin case mission_number of 1 :
14478: LD_OWVAR 70
14482: PUSH
14483: LD_INT 1
14485: DOUBLE
14486: EQUAL
14487: IFTRUE 14491
14489: GO 14567
14491: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
14492: LD_ADDR_VAR 0 2
14496: PUSH
14497: LD_INT 2
14499: PUSH
14500: LD_INT 4
14502: PUSH
14503: LD_INT 11
14505: PUSH
14506: LD_INT 12
14508: PUSH
14509: LD_INT 15
14511: PUSH
14512: LD_INT 16
14514: PUSH
14515: LD_INT 22
14517: PUSH
14518: LD_INT 23
14520: PUSH
14521: LD_INT 26
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: PUSH
14535: LD_INT 101
14537: PUSH
14538: LD_INT 102
14540: PUSH
14541: LD_INT 106
14543: PUSH
14544: LD_INT 116
14546: PUSH
14547: LD_INT 117
14549: PUSH
14550: LD_INT 118
14552: PUSH
14553: EMPTY
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: PUSH
14561: EMPTY
14562: LIST
14563: LIST
14564: ST_TO_ADDR
14565: GO 17640
14567: LD_INT 2
14569: DOUBLE
14570: EQUAL
14571: IFTRUE 14575
14573: GO 14659
14575: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
14576: LD_ADDR_VAR 0 2
14580: PUSH
14581: LD_INT 2
14583: PUSH
14584: LD_INT 4
14586: PUSH
14587: LD_INT 11
14589: PUSH
14590: LD_INT 12
14592: PUSH
14593: LD_INT 15
14595: PUSH
14596: LD_INT 16
14598: PUSH
14599: LD_INT 22
14601: PUSH
14602: LD_INT 23
14604: PUSH
14605: LD_INT 26
14607: PUSH
14608: EMPTY
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: PUSH
14619: LD_INT 101
14621: PUSH
14622: LD_INT 102
14624: PUSH
14625: LD_INT 105
14627: PUSH
14628: LD_INT 106
14630: PUSH
14631: LD_INT 108
14633: PUSH
14634: LD_INT 116
14636: PUSH
14637: LD_INT 117
14639: PUSH
14640: LD_INT 118
14642: PUSH
14643: EMPTY
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: PUSH
14653: EMPTY
14654: LIST
14655: LIST
14656: ST_TO_ADDR
14657: GO 17640
14659: LD_INT 3
14661: DOUBLE
14662: EQUAL
14663: IFTRUE 14667
14665: GO 14755
14667: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
14668: LD_ADDR_VAR 0 2
14672: PUSH
14673: LD_INT 2
14675: PUSH
14676: LD_INT 4
14678: PUSH
14679: LD_INT 5
14681: PUSH
14682: LD_INT 11
14684: PUSH
14685: LD_INT 12
14687: PUSH
14688: LD_INT 15
14690: PUSH
14691: LD_INT 16
14693: PUSH
14694: LD_INT 22
14696: PUSH
14697: LD_INT 26
14699: PUSH
14700: LD_INT 36
14702: PUSH
14703: EMPTY
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: PUSH
14715: LD_INT 101
14717: PUSH
14718: LD_INT 102
14720: PUSH
14721: LD_INT 105
14723: PUSH
14724: LD_INT 106
14726: PUSH
14727: LD_INT 108
14729: PUSH
14730: LD_INT 116
14732: PUSH
14733: LD_INT 117
14735: PUSH
14736: LD_INT 118
14738: PUSH
14739: EMPTY
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: PUSH
14749: EMPTY
14750: LIST
14751: LIST
14752: ST_TO_ADDR
14753: GO 17640
14755: LD_INT 4
14757: DOUBLE
14758: EQUAL
14759: IFTRUE 14763
14761: GO 14859
14763: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
14764: LD_ADDR_VAR 0 2
14768: PUSH
14769: LD_INT 2
14771: PUSH
14772: LD_INT 4
14774: PUSH
14775: LD_INT 5
14777: PUSH
14778: LD_INT 8
14780: PUSH
14781: LD_INT 11
14783: PUSH
14784: LD_INT 12
14786: PUSH
14787: LD_INT 15
14789: PUSH
14790: LD_INT 16
14792: PUSH
14793: LD_INT 22
14795: PUSH
14796: LD_INT 23
14798: PUSH
14799: LD_INT 26
14801: PUSH
14802: LD_INT 36
14804: PUSH
14805: EMPTY
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: PUSH
14819: LD_INT 101
14821: PUSH
14822: LD_INT 102
14824: PUSH
14825: LD_INT 105
14827: PUSH
14828: LD_INT 106
14830: PUSH
14831: LD_INT 108
14833: PUSH
14834: LD_INT 116
14836: PUSH
14837: LD_INT 117
14839: PUSH
14840: LD_INT 118
14842: PUSH
14843: EMPTY
14844: LIST
14845: LIST
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: LIST
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: ST_TO_ADDR
14857: GO 17640
14859: LD_INT 5
14861: DOUBLE
14862: EQUAL
14863: IFTRUE 14867
14865: GO 14979
14867: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
14868: LD_ADDR_VAR 0 2
14872: PUSH
14873: LD_INT 2
14875: PUSH
14876: LD_INT 4
14878: PUSH
14879: LD_INT 5
14881: PUSH
14882: LD_INT 6
14884: PUSH
14885: LD_INT 8
14887: PUSH
14888: LD_INT 11
14890: PUSH
14891: LD_INT 12
14893: PUSH
14894: LD_INT 15
14896: PUSH
14897: LD_INT 16
14899: PUSH
14900: LD_INT 22
14902: PUSH
14903: LD_INT 23
14905: PUSH
14906: LD_INT 25
14908: PUSH
14909: LD_INT 26
14911: PUSH
14912: LD_INT 36
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: PUSH
14931: LD_INT 101
14933: PUSH
14934: LD_INT 102
14936: PUSH
14937: LD_INT 105
14939: PUSH
14940: LD_INT 106
14942: PUSH
14943: LD_INT 108
14945: PUSH
14946: LD_INT 109
14948: PUSH
14949: LD_INT 112
14951: PUSH
14952: LD_INT 116
14954: PUSH
14955: LD_INT 117
14957: PUSH
14958: LD_INT 118
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: ST_TO_ADDR
14977: GO 17640
14979: LD_INT 6
14981: DOUBLE
14982: EQUAL
14983: IFTRUE 14987
14985: GO 15119
14987: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
14988: LD_ADDR_VAR 0 2
14992: PUSH
14993: LD_INT 2
14995: PUSH
14996: LD_INT 4
14998: PUSH
14999: LD_INT 5
15001: PUSH
15002: LD_INT 6
15004: PUSH
15005: LD_INT 8
15007: PUSH
15008: LD_INT 11
15010: PUSH
15011: LD_INT 12
15013: PUSH
15014: LD_INT 15
15016: PUSH
15017: LD_INT 16
15019: PUSH
15020: LD_INT 20
15022: PUSH
15023: LD_INT 21
15025: PUSH
15026: LD_INT 22
15028: PUSH
15029: LD_INT 23
15031: PUSH
15032: LD_INT 25
15034: PUSH
15035: LD_INT 26
15037: PUSH
15038: LD_INT 30
15040: PUSH
15041: LD_INT 31
15043: PUSH
15044: LD_INT 32
15046: PUSH
15047: LD_INT 36
15049: PUSH
15050: EMPTY
15051: LIST
15052: LIST
15053: LIST
15054: LIST
15055: LIST
15056: LIST
15057: LIST
15058: LIST
15059: LIST
15060: LIST
15061: LIST
15062: LIST
15063: LIST
15064: LIST
15065: LIST
15066: LIST
15067: LIST
15068: LIST
15069: LIST
15070: PUSH
15071: LD_INT 101
15073: PUSH
15074: LD_INT 102
15076: PUSH
15077: LD_INT 105
15079: PUSH
15080: LD_INT 106
15082: PUSH
15083: LD_INT 108
15085: PUSH
15086: LD_INT 109
15088: PUSH
15089: LD_INT 112
15091: PUSH
15092: LD_INT 116
15094: PUSH
15095: LD_INT 117
15097: PUSH
15098: LD_INT 118
15100: PUSH
15101: EMPTY
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: PUSH
15113: EMPTY
15114: LIST
15115: LIST
15116: ST_TO_ADDR
15117: GO 17640
15119: LD_INT 7
15121: DOUBLE
15122: EQUAL
15123: IFTRUE 15127
15125: GO 15239
15127: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
15128: LD_ADDR_VAR 0 2
15132: PUSH
15133: LD_INT 2
15135: PUSH
15136: LD_INT 4
15138: PUSH
15139: LD_INT 5
15141: PUSH
15142: LD_INT 7
15144: PUSH
15145: LD_INT 11
15147: PUSH
15148: LD_INT 12
15150: PUSH
15151: LD_INT 15
15153: PUSH
15154: LD_INT 16
15156: PUSH
15157: LD_INT 20
15159: PUSH
15160: LD_INT 21
15162: PUSH
15163: LD_INT 22
15165: PUSH
15166: LD_INT 23
15168: PUSH
15169: LD_INT 25
15171: PUSH
15172: LD_INT 26
15174: PUSH
15175: EMPTY
15176: LIST
15177: LIST
15178: LIST
15179: LIST
15180: LIST
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: LIST
15186: LIST
15187: LIST
15188: LIST
15189: LIST
15190: PUSH
15191: LD_INT 101
15193: PUSH
15194: LD_INT 102
15196: PUSH
15197: LD_INT 103
15199: PUSH
15200: LD_INT 105
15202: PUSH
15203: LD_INT 106
15205: PUSH
15206: LD_INT 108
15208: PUSH
15209: LD_INT 112
15211: PUSH
15212: LD_INT 116
15214: PUSH
15215: LD_INT 117
15217: PUSH
15218: LD_INT 118
15220: PUSH
15221: EMPTY
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: PUSH
15233: EMPTY
15234: LIST
15235: LIST
15236: ST_TO_ADDR
15237: GO 17640
15239: LD_INT 8
15241: DOUBLE
15242: EQUAL
15243: IFTRUE 15247
15245: GO 15387
15247: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
15248: LD_ADDR_VAR 0 2
15252: PUSH
15253: LD_INT 2
15255: PUSH
15256: LD_INT 4
15258: PUSH
15259: LD_INT 5
15261: PUSH
15262: LD_INT 6
15264: PUSH
15265: LD_INT 7
15267: PUSH
15268: LD_INT 8
15270: PUSH
15271: LD_INT 11
15273: PUSH
15274: LD_INT 12
15276: PUSH
15277: LD_INT 15
15279: PUSH
15280: LD_INT 16
15282: PUSH
15283: LD_INT 20
15285: PUSH
15286: LD_INT 21
15288: PUSH
15289: LD_INT 22
15291: PUSH
15292: LD_INT 23
15294: PUSH
15295: LD_INT 25
15297: PUSH
15298: LD_INT 26
15300: PUSH
15301: LD_INT 30
15303: PUSH
15304: LD_INT 31
15306: PUSH
15307: LD_INT 32
15309: PUSH
15310: LD_INT 36
15312: PUSH
15313: EMPTY
15314: LIST
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: PUSH
15335: LD_INT 101
15337: PUSH
15338: LD_INT 102
15340: PUSH
15341: LD_INT 103
15343: PUSH
15344: LD_INT 105
15346: PUSH
15347: LD_INT 106
15349: PUSH
15350: LD_INT 108
15352: PUSH
15353: LD_INT 109
15355: PUSH
15356: LD_INT 112
15358: PUSH
15359: LD_INT 116
15361: PUSH
15362: LD_INT 117
15364: PUSH
15365: LD_INT 118
15367: PUSH
15368: EMPTY
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: LIST
15380: PUSH
15381: EMPTY
15382: LIST
15383: LIST
15384: ST_TO_ADDR
15385: GO 17640
15387: LD_INT 9
15389: DOUBLE
15390: EQUAL
15391: IFTRUE 15395
15393: GO 15543
15395: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
15396: LD_ADDR_VAR 0 2
15400: PUSH
15401: LD_INT 2
15403: PUSH
15404: LD_INT 4
15406: PUSH
15407: LD_INT 5
15409: PUSH
15410: LD_INT 6
15412: PUSH
15413: LD_INT 7
15415: PUSH
15416: LD_INT 8
15418: PUSH
15419: LD_INT 11
15421: PUSH
15422: LD_INT 12
15424: PUSH
15425: LD_INT 15
15427: PUSH
15428: LD_INT 16
15430: PUSH
15431: LD_INT 20
15433: PUSH
15434: LD_INT 21
15436: PUSH
15437: LD_INT 22
15439: PUSH
15440: LD_INT 23
15442: PUSH
15443: LD_INT 25
15445: PUSH
15446: LD_INT 26
15448: PUSH
15449: LD_INT 28
15451: PUSH
15452: LD_INT 30
15454: PUSH
15455: LD_INT 31
15457: PUSH
15458: LD_INT 32
15460: PUSH
15461: LD_INT 36
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: LIST
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: PUSH
15487: LD_INT 101
15489: PUSH
15490: LD_INT 102
15492: PUSH
15493: LD_INT 103
15495: PUSH
15496: LD_INT 105
15498: PUSH
15499: LD_INT 106
15501: PUSH
15502: LD_INT 108
15504: PUSH
15505: LD_INT 109
15507: PUSH
15508: LD_INT 112
15510: PUSH
15511: LD_INT 114
15513: PUSH
15514: LD_INT 116
15516: PUSH
15517: LD_INT 117
15519: PUSH
15520: LD_INT 118
15522: PUSH
15523: EMPTY
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: PUSH
15537: EMPTY
15538: LIST
15539: LIST
15540: ST_TO_ADDR
15541: GO 17640
15543: LD_INT 10
15545: DOUBLE
15546: EQUAL
15547: IFTRUE 15551
15549: GO 15747
15551: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
15552: LD_ADDR_VAR 0 2
15556: PUSH
15557: LD_INT 2
15559: PUSH
15560: LD_INT 4
15562: PUSH
15563: LD_INT 5
15565: PUSH
15566: LD_INT 6
15568: PUSH
15569: LD_INT 7
15571: PUSH
15572: LD_INT 8
15574: PUSH
15575: LD_INT 9
15577: PUSH
15578: LD_INT 10
15580: PUSH
15581: LD_INT 11
15583: PUSH
15584: LD_INT 12
15586: PUSH
15587: LD_INT 13
15589: PUSH
15590: LD_INT 14
15592: PUSH
15593: LD_INT 15
15595: PUSH
15596: LD_INT 16
15598: PUSH
15599: LD_INT 17
15601: PUSH
15602: LD_INT 18
15604: PUSH
15605: LD_INT 19
15607: PUSH
15608: LD_INT 20
15610: PUSH
15611: LD_INT 21
15613: PUSH
15614: LD_INT 22
15616: PUSH
15617: LD_INT 23
15619: PUSH
15620: LD_INT 24
15622: PUSH
15623: LD_INT 25
15625: PUSH
15626: LD_INT 26
15628: PUSH
15629: LD_INT 28
15631: PUSH
15632: LD_INT 30
15634: PUSH
15635: LD_INT 31
15637: PUSH
15638: LD_INT 32
15640: PUSH
15641: LD_INT 36
15643: PUSH
15644: EMPTY
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: PUSH
15675: LD_INT 101
15677: PUSH
15678: LD_INT 102
15680: PUSH
15681: LD_INT 103
15683: PUSH
15684: LD_INT 104
15686: PUSH
15687: LD_INT 105
15689: PUSH
15690: LD_INT 106
15692: PUSH
15693: LD_INT 107
15695: PUSH
15696: LD_INT 108
15698: PUSH
15699: LD_INT 109
15701: PUSH
15702: LD_INT 110
15704: PUSH
15705: LD_INT 111
15707: PUSH
15708: LD_INT 112
15710: PUSH
15711: LD_INT 114
15713: PUSH
15714: LD_INT 116
15716: PUSH
15717: LD_INT 117
15719: PUSH
15720: LD_INT 118
15722: PUSH
15723: EMPTY
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: ST_TO_ADDR
15745: GO 17640
15747: LD_INT 11
15749: DOUBLE
15750: EQUAL
15751: IFTRUE 15755
15753: GO 15959
15755: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
15756: LD_ADDR_VAR 0 2
15760: PUSH
15761: LD_INT 2
15763: PUSH
15764: LD_INT 3
15766: PUSH
15767: LD_INT 4
15769: PUSH
15770: LD_INT 5
15772: PUSH
15773: LD_INT 6
15775: PUSH
15776: LD_INT 7
15778: PUSH
15779: LD_INT 8
15781: PUSH
15782: LD_INT 9
15784: PUSH
15785: LD_INT 10
15787: PUSH
15788: LD_INT 11
15790: PUSH
15791: LD_INT 12
15793: PUSH
15794: LD_INT 13
15796: PUSH
15797: LD_INT 14
15799: PUSH
15800: LD_INT 15
15802: PUSH
15803: LD_INT 16
15805: PUSH
15806: LD_INT 17
15808: PUSH
15809: LD_INT 18
15811: PUSH
15812: LD_INT 19
15814: PUSH
15815: LD_INT 20
15817: PUSH
15818: LD_INT 21
15820: PUSH
15821: LD_INT 22
15823: PUSH
15824: LD_INT 23
15826: PUSH
15827: LD_INT 24
15829: PUSH
15830: LD_INT 25
15832: PUSH
15833: LD_INT 26
15835: PUSH
15836: LD_INT 28
15838: PUSH
15839: LD_INT 30
15841: PUSH
15842: LD_INT 31
15844: PUSH
15845: LD_INT 32
15847: PUSH
15848: LD_INT 34
15850: PUSH
15851: LD_INT 36
15853: PUSH
15854: EMPTY
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: PUSH
15887: LD_INT 101
15889: PUSH
15890: LD_INT 102
15892: PUSH
15893: LD_INT 103
15895: PUSH
15896: LD_INT 104
15898: PUSH
15899: LD_INT 105
15901: PUSH
15902: LD_INT 106
15904: PUSH
15905: LD_INT 107
15907: PUSH
15908: LD_INT 108
15910: PUSH
15911: LD_INT 109
15913: PUSH
15914: LD_INT 110
15916: PUSH
15917: LD_INT 111
15919: PUSH
15920: LD_INT 112
15922: PUSH
15923: LD_INT 114
15925: PUSH
15926: LD_INT 116
15928: PUSH
15929: LD_INT 117
15931: PUSH
15932: LD_INT 118
15934: PUSH
15935: EMPTY
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: PUSH
15953: EMPTY
15954: LIST
15955: LIST
15956: ST_TO_ADDR
15957: GO 17640
15959: LD_INT 12
15961: DOUBLE
15962: EQUAL
15963: IFTRUE 15967
15965: GO 16187
15967: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
15968: LD_ADDR_VAR 0 2
15972: PUSH
15973: LD_INT 1
15975: PUSH
15976: LD_INT 2
15978: PUSH
15979: LD_INT 3
15981: PUSH
15982: LD_INT 4
15984: PUSH
15985: LD_INT 5
15987: PUSH
15988: LD_INT 6
15990: PUSH
15991: LD_INT 7
15993: PUSH
15994: LD_INT 8
15996: PUSH
15997: LD_INT 9
15999: PUSH
16000: LD_INT 10
16002: PUSH
16003: LD_INT 11
16005: PUSH
16006: LD_INT 12
16008: PUSH
16009: LD_INT 13
16011: PUSH
16012: LD_INT 14
16014: PUSH
16015: LD_INT 15
16017: PUSH
16018: LD_INT 16
16020: PUSH
16021: LD_INT 17
16023: PUSH
16024: LD_INT 18
16026: PUSH
16027: LD_INT 19
16029: PUSH
16030: LD_INT 20
16032: PUSH
16033: LD_INT 21
16035: PUSH
16036: LD_INT 22
16038: PUSH
16039: LD_INT 23
16041: PUSH
16042: LD_INT 24
16044: PUSH
16045: LD_INT 25
16047: PUSH
16048: LD_INT 26
16050: PUSH
16051: LD_INT 27
16053: PUSH
16054: LD_INT 28
16056: PUSH
16057: LD_INT 30
16059: PUSH
16060: LD_INT 31
16062: PUSH
16063: LD_INT 32
16065: PUSH
16066: LD_INT 33
16068: PUSH
16069: LD_INT 34
16071: PUSH
16072: LD_INT 36
16074: PUSH
16075: EMPTY
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: PUSH
16111: LD_INT 101
16113: PUSH
16114: LD_INT 102
16116: PUSH
16117: LD_INT 103
16119: PUSH
16120: LD_INT 104
16122: PUSH
16123: LD_INT 105
16125: PUSH
16126: LD_INT 106
16128: PUSH
16129: LD_INT 107
16131: PUSH
16132: LD_INT 108
16134: PUSH
16135: LD_INT 109
16137: PUSH
16138: LD_INT 110
16140: PUSH
16141: LD_INT 111
16143: PUSH
16144: LD_INT 112
16146: PUSH
16147: LD_INT 113
16149: PUSH
16150: LD_INT 114
16152: PUSH
16153: LD_INT 116
16155: PUSH
16156: LD_INT 117
16158: PUSH
16159: LD_INT 118
16161: PUSH
16162: EMPTY
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: ST_TO_ADDR
16185: GO 17640
16187: LD_INT 13
16189: DOUBLE
16190: EQUAL
16191: IFTRUE 16195
16193: GO 16403
16195: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
16196: LD_ADDR_VAR 0 2
16200: PUSH
16201: LD_INT 1
16203: PUSH
16204: LD_INT 2
16206: PUSH
16207: LD_INT 3
16209: PUSH
16210: LD_INT 4
16212: PUSH
16213: LD_INT 5
16215: PUSH
16216: LD_INT 8
16218: PUSH
16219: LD_INT 9
16221: PUSH
16222: LD_INT 10
16224: PUSH
16225: LD_INT 11
16227: PUSH
16228: LD_INT 12
16230: PUSH
16231: LD_INT 14
16233: PUSH
16234: LD_INT 15
16236: PUSH
16237: LD_INT 16
16239: PUSH
16240: LD_INT 17
16242: PUSH
16243: LD_INT 18
16245: PUSH
16246: LD_INT 19
16248: PUSH
16249: LD_INT 20
16251: PUSH
16252: LD_INT 21
16254: PUSH
16255: LD_INT 22
16257: PUSH
16258: LD_INT 23
16260: PUSH
16261: LD_INT 24
16263: PUSH
16264: LD_INT 25
16266: PUSH
16267: LD_INT 26
16269: PUSH
16270: LD_INT 27
16272: PUSH
16273: LD_INT 28
16275: PUSH
16276: LD_INT 30
16278: PUSH
16279: LD_INT 31
16281: PUSH
16282: LD_INT 32
16284: PUSH
16285: LD_INT 33
16287: PUSH
16288: LD_INT 34
16290: PUSH
16291: LD_INT 36
16293: PUSH
16294: EMPTY
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: PUSH
16327: LD_INT 101
16329: PUSH
16330: LD_INT 102
16332: PUSH
16333: LD_INT 103
16335: PUSH
16336: LD_INT 104
16338: PUSH
16339: LD_INT 105
16341: PUSH
16342: LD_INT 106
16344: PUSH
16345: LD_INT 107
16347: PUSH
16348: LD_INT 108
16350: PUSH
16351: LD_INT 109
16353: PUSH
16354: LD_INT 110
16356: PUSH
16357: LD_INT 111
16359: PUSH
16360: LD_INT 112
16362: PUSH
16363: LD_INT 113
16365: PUSH
16366: LD_INT 114
16368: PUSH
16369: LD_INT 116
16371: PUSH
16372: LD_INT 117
16374: PUSH
16375: LD_INT 118
16377: PUSH
16378: EMPTY
16379: LIST
16380: LIST
16381: LIST
16382: LIST
16383: LIST
16384: LIST
16385: LIST
16386: LIST
16387: LIST
16388: LIST
16389: LIST
16390: LIST
16391: LIST
16392: LIST
16393: LIST
16394: LIST
16395: LIST
16396: PUSH
16397: EMPTY
16398: LIST
16399: LIST
16400: ST_TO_ADDR
16401: GO 17640
16403: LD_INT 14
16405: DOUBLE
16406: EQUAL
16407: IFTRUE 16411
16409: GO 16635
16411: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
16412: LD_ADDR_VAR 0 2
16416: PUSH
16417: LD_INT 1
16419: PUSH
16420: LD_INT 2
16422: PUSH
16423: LD_INT 3
16425: PUSH
16426: LD_INT 4
16428: PUSH
16429: LD_INT 5
16431: PUSH
16432: LD_INT 6
16434: PUSH
16435: LD_INT 7
16437: PUSH
16438: LD_INT 8
16440: PUSH
16441: LD_INT 9
16443: PUSH
16444: LD_INT 10
16446: PUSH
16447: LD_INT 11
16449: PUSH
16450: LD_INT 12
16452: PUSH
16453: LD_INT 13
16455: PUSH
16456: LD_INT 14
16458: PUSH
16459: LD_INT 15
16461: PUSH
16462: LD_INT 16
16464: PUSH
16465: LD_INT 17
16467: PUSH
16468: LD_INT 18
16470: PUSH
16471: LD_INT 19
16473: PUSH
16474: LD_INT 20
16476: PUSH
16477: LD_INT 21
16479: PUSH
16480: LD_INT 22
16482: PUSH
16483: LD_INT 23
16485: PUSH
16486: LD_INT 24
16488: PUSH
16489: LD_INT 25
16491: PUSH
16492: LD_INT 26
16494: PUSH
16495: LD_INT 27
16497: PUSH
16498: LD_INT 28
16500: PUSH
16501: LD_INT 29
16503: PUSH
16504: LD_INT 30
16506: PUSH
16507: LD_INT 31
16509: PUSH
16510: LD_INT 32
16512: PUSH
16513: LD_INT 33
16515: PUSH
16516: LD_INT 34
16518: PUSH
16519: LD_INT 36
16521: PUSH
16522: EMPTY
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: LIST
16541: LIST
16542: LIST
16543: LIST
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: PUSH
16559: LD_INT 101
16561: PUSH
16562: LD_INT 102
16564: PUSH
16565: LD_INT 103
16567: PUSH
16568: LD_INT 104
16570: PUSH
16571: LD_INT 105
16573: PUSH
16574: LD_INT 106
16576: PUSH
16577: LD_INT 107
16579: PUSH
16580: LD_INT 108
16582: PUSH
16583: LD_INT 109
16585: PUSH
16586: LD_INT 110
16588: PUSH
16589: LD_INT 111
16591: PUSH
16592: LD_INT 112
16594: PUSH
16595: LD_INT 113
16597: PUSH
16598: LD_INT 114
16600: PUSH
16601: LD_INT 116
16603: PUSH
16604: LD_INT 117
16606: PUSH
16607: LD_INT 118
16609: PUSH
16610: EMPTY
16611: LIST
16612: LIST
16613: LIST
16614: LIST
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: LIST
16623: LIST
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: PUSH
16629: EMPTY
16630: LIST
16631: LIST
16632: ST_TO_ADDR
16633: GO 17640
16635: LD_INT 15
16637: DOUBLE
16638: EQUAL
16639: IFTRUE 16643
16641: GO 16867
16643: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
16644: LD_ADDR_VAR 0 2
16648: PUSH
16649: LD_INT 1
16651: PUSH
16652: LD_INT 2
16654: PUSH
16655: LD_INT 3
16657: PUSH
16658: LD_INT 4
16660: PUSH
16661: LD_INT 5
16663: PUSH
16664: LD_INT 6
16666: PUSH
16667: LD_INT 7
16669: PUSH
16670: LD_INT 8
16672: PUSH
16673: LD_INT 9
16675: PUSH
16676: LD_INT 10
16678: PUSH
16679: LD_INT 11
16681: PUSH
16682: LD_INT 12
16684: PUSH
16685: LD_INT 13
16687: PUSH
16688: LD_INT 14
16690: PUSH
16691: LD_INT 15
16693: PUSH
16694: LD_INT 16
16696: PUSH
16697: LD_INT 17
16699: PUSH
16700: LD_INT 18
16702: PUSH
16703: LD_INT 19
16705: PUSH
16706: LD_INT 20
16708: PUSH
16709: LD_INT 21
16711: PUSH
16712: LD_INT 22
16714: PUSH
16715: LD_INT 23
16717: PUSH
16718: LD_INT 24
16720: PUSH
16721: LD_INT 25
16723: PUSH
16724: LD_INT 26
16726: PUSH
16727: LD_INT 27
16729: PUSH
16730: LD_INT 28
16732: PUSH
16733: LD_INT 29
16735: PUSH
16736: LD_INT 30
16738: PUSH
16739: LD_INT 31
16741: PUSH
16742: LD_INT 32
16744: PUSH
16745: LD_INT 33
16747: PUSH
16748: LD_INT 34
16750: PUSH
16751: LD_INT 36
16753: PUSH
16754: EMPTY
16755: LIST
16756: LIST
16757: LIST
16758: LIST
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: LIST
16765: LIST
16766: LIST
16767: LIST
16768: LIST
16769: LIST
16770: LIST
16771: LIST
16772: LIST
16773: LIST
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: PUSH
16791: LD_INT 101
16793: PUSH
16794: LD_INT 102
16796: PUSH
16797: LD_INT 103
16799: PUSH
16800: LD_INT 104
16802: PUSH
16803: LD_INT 105
16805: PUSH
16806: LD_INT 106
16808: PUSH
16809: LD_INT 107
16811: PUSH
16812: LD_INT 108
16814: PUSH
16815: LD_INT 109
16817: PUSH
16818: LD_INT 110
16820: PUSH
16821: LD_INT 111
16823: PUSH
16824: LD_INT 112
16826: PUSH
16827: LD_INT 113
16829: PUSH
16830: LD_INT 114
16832: PUSH
16833: LD_INT 116
16835: PUSH
16836: LD_INT 117
16838: PUSH
16839: LD_INT 118
16841: PUSH
16842: EMPTY
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: LIST
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: PUSH
16861: EMPTY
16862: LIST
16863: LIST
16864: ST_TO_ADDR
16865: GO 17640
16867: LD_INT 16
16869: DOUBLE
16870: EQUAL
16871: IFTRUE 16875
16873: GO 17011
16875: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
16876: LD_ADDR_VAR 0 2
16880: PUSH
16881: LD_INT 2
16883: PUSH
16884: LD_INT 4
16886: PUSH
16887: LD_INT 5
16889: PUSH
16890: LD_INT 7
16892: PUSH
16893: LD_INT 11
16895: PUSH
16896: LD_INT 12
16898: PUSH
16899: LD_INT 15
16901: PUSH
16902: LD_INT 16
16904: PUSH
16905: LD_INT 20
16907: PUSH
16908: LD_INT 21
16910: PUSH
16911: LD_INT 22
16913: PUSH
16914: LD_INT 23
16916: PUSH
16917: LD_INT 25
16919: PUSH
16920: LD_INT 26
16922: PUSH
16923: LD_INT 30
16925: PUSH
16926: LD_INT 31
16928: PUSH
16929: LD_INT 32
16931: PUSH
16932: LD_INT 33
16934: PUSH
16935: LD_INT 34
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: PUSH
16959: LD_INT 101
16961: PUSH
16962: LD_INT 102
16964: PUSH
16965: LD_INT 103
16967: PUSH
16968: LD_INT 106
16970: PUSH
16971: LD_INT 108
16973: PUSH
16974: LD_INT 112
16976: PUSH
16977: LD_INT 113
16979: PUSH
16980: LD_INT 114
16982: PUSH
16983: LD_INT 116
16985: PUSH
16986: LD_INT 117
16988: PUSH
16989: LD_INT 118
16991: PUSH
16992: EMPTY
16993: LIST
16994: LIST
16995: LIST
16996: LIST
16997: LIST
16998: LIST
16999: LIST
17000: LIST
17001: LIST
17002: LIST
17003: LIST
17004: PUSH
17005: EMPTY
17006: LIST
17007: LIST
17008: ST_TO_ADDR
17009: GO 17640
17011: LD_INT 17
17013: DOUBLE
17014: EQUAL
17015: IFTRUE 17019
17017: GO 17243
17019: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
17020: LD_ADDR_VAR 0 2
17024: PUSH
17025: LD_INT 1
17027: PUSH
17028: LD_INT 2
17030: PUSH
17031: LD_INT 3
17033: PUSH
17034: LD_INT 4
17036: PUSH
17037: LD_INT 5
17039: PUSH
17040: LD_INT 6
17042: PUSH
17043: LD_INT 7
17045: PUSH
17046: LD_INT 8
17048: PUSH
17049: LD_INT 9
17051: PUSH
17052: LD_INT 10
17054: PUSH
17055: LD_INT 11
17057: PUSH
17058: LD_INT 12
17060: PUSH
17061: LD_INT 13
17063: PUSH
17064: LD_INT 14
17066: PUSH
17067: LD_INT 15
17069: PUSH
17070: LD_INT 16
17072: PUSH
17073: LD_INT 17
17075: PUSH
17076: LD_INT 18
17078: PUSH
17079: LD_INT 19
17081: PUSH
17082: LD_INT 20
17084: PUSH
17085: LD_INT 21
17087: PUSH
17088: LD_INT 22
17090: PUSH
17091: LD_INT 23
17093: PUSH
17094: LD_INT 24
17096: PUSH
17097: LD_INT 25
17099: PUSH
17100: LD_INT 26
17102: PUSH
17103: LD_INT 27
17105: PUSH
17106: LD_INT 28
17108: PUSH
17109: LD_INT 29
17111: PUSH
17112: LD_INT 30
17114: PUSH
17115: LD_INT 31
17117: PUSH
17118: LD_INT 32
17120: PUSH
17121: LD_INT 33
17123: PUSH
17124: LD_INT 34
17126: PUSH
17127: LD_INT 36
17129: PUSH
17130: EMPTY
17131: LIST
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: LIST
17137: LIST
17138: LIST
17139: LIST
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: LIST
17146: LIST
17147: LIST
17148: LIST
17149: LIST
17150: LIST
17151: LIST
17152: LIST
17153: LIST
17154: LIST
17155: LIST
17156: LIST
17157: LIST
17158: LIST
17159: LIST
17160: LIST
17161: LIST
17162: LIST
17163: LIST
17164: LIST
17165: LIST
17166: PUSH
17167: LD_INT 101
17169: PUSH
17170: LD_INT 102
17172: PUSH
17173: LD_INT 103
17175: PUSH
17176: LD_INT 104
17178: PUSH
17179: LD_INT 105
17181: PUSH
17182: LD_INT 106
17184: PUSH
17185: LD_INT 107
17187: PUSH
17188: LD_INT 108
17190: PUSH
17191: LD_INT 109
17193: PUSH
17194: LD_INT 110
17196: PUSH
17197: LD_INT 111
17199: PUSH
17200: LD_INT 112
17202: PUSH
17203: LD_INT 113
17205: PUSH
17206: LD_INT 114
17208: PUSH
17209: LD_INT 116
17211: PUSH
17212: LD_INT 117
17214: PUSH
17215: LD_INT 118
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: PUSH
17237: EMPTY
17238: LIST
17239: LIST
17240: ST_TO_ADDR
17241: GO 17640
17243: LD_INT 18
17245: DOUBLE
17246: EQUAL
17247: IFTRUE 17251
17249: GO 17399
17251: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
17252: LD_ADDR_VAR 0 2
17256: PUSH
17257: LD_INT 2
17259: PUSH
17260: LD_INT 4
17262: PUSH
17263: LD_INT 5
17265: PUSH
17266: LD_INT 7
17268: PUSH
17269: LD_INT 11
17271: PUSH
17272: LD_INT 12
17274: PUSH
17275: LD_INT 15
17277: PUSH
17278: LD_INT 16
17280: PUSH
17281: LD_INT 20
17283: PUSH
17284: LD_INT 21
17286: PUSH
17287: LD_INT 22
17289: PUSH
17290: LD_INT 23
17292: PUSH
17293: LD_INT 25
17295: PUSH
17296: LD_INT 26
17298: PUSH
17299: LD_INT 30
17301: PUSH
17302: LD_INT 31
17304: PUSH
17305: LD_INT 32
17307: PUSH
17308: LD_INT 33
17310: PUSH
17311: LD_INT 34
17313: PUSH
17314: LD_INT 35
17316: PUSH
17317: LD_INT 36
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: PUSH
17343: LD_INT 101
17345: PUSH
17346: LD_INT 102
17348: PUSH
17349: LD_INT 103
17351: PUSH
17352: LD_INT 106
17354: PUSH
17355: LD_INT 108
17357: PUSH
17358: LD_INT 112
17360: PUSH
17361: LD_INT 113
17363: PUSH
17364: LD_INT 114
17366: PUSH
17367: LD_INT 115
17369: PUSH
17370: LD_INT 116
17372: PUSH
17373: LD_INT 117
17375: PUSH
17376: LD_INT 118
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: LIST
17383: LIST
17384: LIST
17385: LIST
17386: LIST
17387: LIST
17388: LIST
17389: LIST
17390: LIST
17391: LIST
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: ST_TO_ADDR
17397: GO 17640
17399: LD_INT 19
17401: DOUBLE
17402: EQUAL
17403: IFTRUE 17407
17405: GO 17639
17407: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
17408: LD_ADDR_VAR 0 2
17412: PUSH
17413: LD_INT 1
17415: PUSH
17416: LD_INT 2
17418: PUSH
17419: LD_INT 3
17421: PUSH
17422: LD_INT 4
17424: PUSH
17425: LD_INT 5
17427: PUSH
17428: LD_INT 6
17430: PUSH
17431: LD_INT 7
17433: PUSH
17434: LD_INT 8
17436: PUSH
17437: LD_INT 9
17439: PUSH
17440: LD_INT 10
17442: PUSH
17443: LD_INT 11
17445: PUSH
17446: LD_INT 12
17448: PUSH
17449: LD_INT 13
17451: PUSH
17452: LD_INT 14
17454: PUSH
17455: LD_INT 15
17457: PUSH
17458: LD_INT 16
17460: PUSH
17461: LD_INT 17
17463: PUSH
17464: LD_INT 18
17466: PUSH
17467: LD_INT 19
17469: PUSH
17470: LD_INT 20
17472: PUSH
17473: LD_INT 21
17475: PUSH
17476: LD_INT 22
17478: PUSH
17479: LD_INT 23
17481: PUSH
17482: LD_INT 24
17484: PUSH
17485: LD_INT 25
17487: PUSH
17488: LD_INT 26
17490: PUSH
17491: LD_INT 27
17493: PUSH
17494: LD_INT 28
17496: PUSH
17497: LD_INT 29
17499: PUSH
17500: LD_INT 30
17502: PUSH
17503: LD_INT 31
17505: PUSH
17506: LD_INT 32
17508: PUSH
17509: LD_INT 33
17511: PUSH
17512: LD_INT 34
17514: PUSH
17515: LD_INT 35
17517: PUSH
17518: LD_INT 36
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: LIST
17541: LIST
17542: LIST
17543: LIST
17544: LIST
17545: LIST
17546: LIST
17547: LIST
17548: LIST
17549: LIST
17550: LIST
17551: LIST
17552: LIST
17553: LIST
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: PUSH
17559: LD_INT 101
17561: PUSH
17562: LD_INT 102
17564: PUSH
17565: LD_INT 103
17567: PUSH
17568: LD_INT 104
17570: PUSH
17571: LD_INT 105
17573: PUSH
17574: LD_INT 106
17576: PUSH
17577: LD_INT 107
17579: PUSH
17580: LD_INT 108
17582: PUSH
17583: LD_INT 109
17585: PUSH
17586: LD_INT 110
17588: PUSH
17589: LD_INT 111
17591: PUSH
17592: LD_INT 112
17594: PUSH
17595: LD_INT 113
17597: PUSH
17598: LD_INT 114
17600: PUSH
17601: LD_INT 115
17603: PUSH
17604: LD_INT 116
17606: PUSH
17607: LD_INT 117
17609: PUSH
17610: LD_INT 118
17612: PUSH
17613: EMPTY
17614: LIST
17615: LIST
17616: LIST
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: LIST
17625: LIST
17626: LIST
17627: LIST
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: ST_TO_ADDR
17637: GO 17640
17639: POP
// end else
17640: GO 17871
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
17642: LD_ADDR_VAR 0 2
17646: PUSH
17647: LD_INT 1
17649: PUSH
17650: LD_INT 2
17652: PUSH
17653: LD_INT 3
17655: PUSH
17656: LD_INT 4
17658: PUSH
17659: LD_INT 5
17661: PUSH
17662: LD_INT 6
17664: PUSH
17665: LD_INT 7
17667: PUSH
17668: LD_INT 8
17670: PUSH
17671: LD_INT 9
17673: PUSH
17674: LD_INT 10
17676: PUSH
17677: LD_INT 11
17679: PUSH
17680: LD_INT 12
17682: PUSH
17683: LD_INT 13
17685: PUSH
17686: LD_INT 14
17688: PUSH
17689: LD_INT 15
17691: PUSH
17692: LD_INT 16
17694: PUSH
17695: LD_INT 17
17697: PUSH
17698: LD_INT 18
17700: PUSH
17701: LD_INT 19
17703: PUSH
17704: LD_INT 20
17706: PUSH
17707: LD_INT 21
17709: PUSH
17710: LD_INT 22
17712: PUSH
17713: LD_INT 23
17715: PUSH
17716: LD_INT 24
17718: PUSH
17719: LD_INT 25
17721: PUSH
17722: LD_INT 26
17724: PUSH
17725: LD_INT 27
17727: PUSH
17728: LD_INT 28
17730: PUSH
17731: LD_INT 29
17733: PUSH
17734: LD_INT 30
17736: PUSH
17737: LD_INT 31
17739: PUSH
17740: LD_INT 32
17742: PUSH
17743: LD_INT 33
17745: PUSH
17746: LD_INT 34
17748: PUSH
17749: LD_INT 35
17751: PUSH
17752: LD_INT 36
17754: PUSH
17755: EMPTY
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: LIST
17768: LIST
17769: LIST
17770: LIST
17771: LIST
17772: LIST
17773: LIST
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: PUSH
17793: LD_INT 101
17795: PUSH
17796: LD_INT 102
17798: PUSH
17799: LD_INT 103
17801: PUSH
17802: LD_INT 104
17804: PUSH
17805: LD_INT 105
17807: PUSH
17808: LD_INT 106
17810: PUSH
17811: LD_INT 107
17813: PUSH
17814: LD_INT 108
17816: PUSH
17817: LD_INT 109
17819: PUSH
17820: LD_INT 110
17822: PUSH
17823: LD_INT 111
17825: PUSH
17826: LD_INT 112
17828: PUSH
17829: LD_INT 113
17831: PUSH
17832: LD_INT 114
17834: PUSH
17835: LD_INT 115
17837: PUSH
17838: LD_INT 116
17840: PUSH
17841: LD_INT 117
17843: PUSH
17844: LD_INT 118
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: LIST
17851: LIST
17852: LIST
17853: LIST
17854: LIST
17855: LIST
17856: LIST
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: LIST
17866: PUSH
17867: EMPTY
17868: LIST
17869: LIST
17870: ST_TO_ADDR
// if result then
17871: LD_VAR 0 2
17875: IFFALSE 18661
// begin normal :=  ;
17877: LD_ADDR_VAR 0 5
17881: PUSH
17882: LD_STRING 
17884: ST_TO_ADDR
// hardcore :=  ;
17885: LD_ADDR_VAR 0 6
17889: PUSH
17890: LD_STRING 
17892: ST_TO_ADDR
// active :=  ;
17893: LD_ADDR_VAR 0 7
17897: PUSH
17898: LD_STRING 
17900: ST_TO_ADDR
// for i = 1 to normalCounter do
17901: LD_ADDR_VAR 0 8
17905: PUSH
17906: DOUBLE
17907: LD_INT 1
17909: DEC
17910: ST_TO_ADDR
17911: LD_EXP 33
17915: PUSH
17916: FOR_TO
17917: IFFALSE 18018
// begin tmp := 0 ;
17919: LD_ADDR_VAR 0 3
17923: PUSH
17924: LD_STRING 0
17926: ST_TO_ADDR
// if result [ 1 ] then
17927: LD_VAR 0 2
17931: PUSH
17932: LD_INT 1
17934: ARRAY
17935: IFFALSE 18000
// if result [ 1 ] [ 1 ] = i then
17937: LD_VAR 0 2
17941: PUSH
17942: LD_INT 1
17944: ARRAY
17945: PUSH
17946: LD_INT 1
17948: ARRAY
17949: PUSH
17950: LD_VAR 0 8
17954: EQUAL
17955: IFFALSE 18000
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
17957: LD_ADDR_VAR 0 2
17961: PUSH
17962: LD_VAR 0 2
17966: PPUSH
17967: LD_INT 1
17969: PPUSH
17970: LD_VAR 0 2
17974: PUSH
17975: LD_INT 1
17977: ARRAY
17978: PPUSH
17979: LD_INT 1
17981: PPUSH
17982: CALL_OW 3
17986: PPUSH
17987: CALL_OW 1
17991: ST_TO_ADDR
// tmp := 1 ;
17992: LD_ADDR_VAR 0 3
17996: PUSH
17997: LD_STRING 1
17999: ST_TO_ADDR
// end ; normal := normal & tmp ;
18000: LD_ADDR_VAR 0 5
18004: PUSH
18005: LD_VAR 0 5
18009: PUSH
18010: LD_VAR 0 3
18014: STR
18015: ST_TO_ADDR
// end ;
18016: GO 17916
18018: POP
18019: POP
// for i = 1 to hardcoreCounter do
18020: LD_ADDR_VAR 0 8
18024: PUSH
18025: DOUBLE
18026: LD_INT 1
18028: DEC
18029: ST_TO_ADDR
18030: LD_EXP 34
18034: PUSH
18035: FOR_TO
18036: IFFALSE 18141
// begin tmp := 0 ;
18038: LD_ADDR_VAR 0 3
18042: PUSH
18043: LD_STRING 0
18045: ST_TO_ADDR
// if result [ 2 ] then
18046: LD_VAR 0 2
18050: PUSH
18051: LD_INT 2
18053: ARRAY
18054: IFFALSE 18123
// if result [ 2 ] [ 1 ] = 100 + i then
18056: LD_VAR 0 2
18060: PUSH
18061: LD_INT 2
18063: ARRAY
18064: PUSH
18065: LD_INT 1
18067: ARRAY
18068: PUSH
18069: LD_INT 100
18071: PUSH
18072: LD_VAR 0 8
18076: PLUS
18077: EQUAL
18078: IFFALSE 18123
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
18080: LD_ADDR_VAR 0 2
18084: PUSH
18085: LD_VAR 0 2
18089: PPUSH
18090: LD_INT 2
18092: PPUSH
18093: LD_VAR 0 2
18097: PUSH
18098: LD_INT 2
18100: ARRAY
18101: PPUSH
18102: LD_INT 1
18104: PPUSH
18105: CALL_OW 3
18109: PPUSH
18110: CALL_OW 1
18114: ST_TO_ADDR
// tmp := 1 ;
18115: LD_ADDR_VAR 0 3
18119: PUSH
18120: LD_STRING 1
18122: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
18123: LD_ADDR_VAR 0 6
18127: PUSH
18128: LD_VAR 0 6
18132: PUSH
18133: LD_VAR 0 3
18137: STR
18138: ST_TO_ADDR
// end ;
18139: GO 18035
18141: POP
18142: POP
// if isGameLoad then
18143: LD_VAR 0 1
18147: IFFALSE 18622
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
18149: LD_ADDR_VAR 0 4
18153: PUSH
18154: LD_EXP 37
18158: PUSH
18159: LD_EXP 36
18163: PUSH
18164: LD_EXP 38
18168: PUSH
18169: LD_EXP 35
18173: PUSH
18174: LD_EXP 39
18178: PUSH
18179: LD_EXP 40
18183: PUSH
18184: LD_EXP 41
18188: PUSH
18189: LD_EXP 42
18193: PUSH
18194: LD_EXP 43
18198: PUSH
18199: LD_EXP 44
18203: PUSH
18204: LD_EXP 45
18208: PUSH
18209: LD_EXP 46
18213: PUSH
18214: LD_EXP 47
18218: PUSH
18219: LD_EXP 48
18223: PUSH
18224: LD_EXP 56
18228: PUSH
18229: LD_EXP 57
18233: PUSH
18234: LD_EXP 58
18238: PUSH
18239: LD_EXP 59
18243: PUSH
18244: LD_EXP 61
18248: PUSH
18249: LD_EXP 62
18253: PUSH
18254: LD_EXP 63
18258: PUSH
18259: LD_EXP 66
18263: PUSH
18264: LD_EXP 68
18268: PUSH
18269: LD_EXP 69
18273: PUSH
18274: LD_EXP 70
18278: PUSH
18279: LD_EXP 72
18283: PUSH
18284: LD_EXP 73
18288: PUSH
18289: LD_EXP 76
18293: PUSH
18294: LD_EXP 77
18298: PUSH
18299: LD_EXP 78
18303: PUSH
18304: LD_EXP 79
18308: PUSH
18309: LD_EXP 80
18313: PUSH
18314: LD_EXP 81
18318: PUSH
18319: LD_EXP 82
18323: PUSH
18324: LD_EXP 83
18328: PUSH
18329: LD_EXP 84
18333: PUSH
18334: LD_EXP 49
18338: PUSH
18339: LD_EXP 50
18343: PUSH
18344: LD_EXP 53
18348: PUSH
18349: LD_EXP 54
18353: PUSH
18354: LD_EXP 55
18358: PUSH
18359: LD_EXP 51
18363: PUSH
18364: LD_EXP 52
18368: PUSH
18369: LD_EXP 60
18373: PUSH
18374: LD_EXP 64
18378: PUSH
18379: LD_EXP 65
18383: PUSH
18384: LD_EXP 67
18388: PUSH
18389: LD_EXP 71
18393: PUSH
18394: LD_EXP 74
18398: PUSH
18399: LD_EXP 75
18403: PUSH
18404: LD_EXP 85
18408: PUSH
18409: LD_EXP 86
18413: PUSH
18414: LD_EXP 87
18418: PUSH
18419: LD_EXP 88
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: LIST
18440: LIST
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: LIST
18450: LIST
18451: LIST
18452: LIST
18453: LIST
18454: LIST
18455: LIST
18456: LIST
18457: LIST
18458: LIST
18459: LIST
18460: LIST
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: LIST
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: LIST
18477: LIST
18478: LIST
18479: ST_TO_ADDR
// tmp :=  ;
18480: LD_ADDR_VAR 0 3
18484: PUSH
18485: LD_STRING 
18487: ST_TO_ADDR
// for i = 1 to normalCounter do
18488: LD_ADDR_VAR 0 8
18492: PUSH
18493: DOUBLE
18494: LD_INT 1
18496: DEC
18497: ST_TO_ADDR
18498: LD_EXP 33
18502: PUSH
18503: FOR_TO
18504: IFFALSE 18540
// begin if flags [ i ] then
18506: LD_VAR 0 4
18510: PUSH
18511: LD_VAR 0 8
18515: ARRAY
18516: IFFALSE 18538
// tmp := tmp & i & ; ;
18518: LD_ADDR_VAR 0 3
18522: PUSH
18523: LD_VAR 0 3
18527: PUSH
18528: LD_VAR 0 8
18532: STR
18533: PUSH
18534: LD_STRING ;
18536: STR
18537: ST_TO_ADDR
// end ;
18538: GO 18503
18540: POP
18541: POP
// for i = 1 to hardcoreCounter do
18542: LD_ADDR_VAR 0 8
18546: PUSH
18547: DOUBLE
18548: LD_INT 1
18550: DEC
18551: ST_TO_ADDR
18552: LD_EXP 34
18556: PUSH
18557: FOR_TO
18558: IFFALSE 18604
// begin if flags [ normalCounter + i ] then
18560: LD_VAR 0 4
18564: PUSH
18565: LD_EXP 33
18569: PUSH
18570: LD_VAR 0 8
18574: PLUS
18575: ARRAY
18576: IFFALSE 18602
// tmp := tmp & ( 100 + i ) & ; ;
18578: LD_ADDR_VAR 0 3
18582: PUSH
18583: LD_VAR 0 3
18587: PUSH
18588: LD_INT 100
18590: PUSH
18591: LD_VAR 0 8
18595: PLUS
18596: STR
18597: PUSH
18598: LD_STRING ;
18600: STR
18601: ST_TO_ADDR
// end ;
18602: GO 18557
18604: POP
18605: POP
// if tmp then
18606: LD_VAR 0 3
18610: IFFALSE 18622
// active := tmp ;
18612: LD_ADDR_VAR 0 7
18616: PUSH
18617: LD_VAR 0 3
18621: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
18622: LD_STRING getStreamItemsFromMission("
18624: PUSH
18625: LD_VAR 0 5
18629: STR
18630: PUSH
18631: LD_STRING ","
18633: STR
18634: PUSH
18635: LD_VAR 0 6
18639: STR
18640: PUSH
18641: LD_STRING ","
18643: STR
18644: PUSH
18645: LD_VAR 0 7
18649: STR
18650: PUSH
18651: LD_STRING ")
18653: STR
18654: PPUSH
18655: CALL_OW 559
// end else
18659: GO 18668
// ToLua ( getStreamItemsFromMission("","","") ) ;
18661: LD_STRING getStreamItemsFromMission("","","")
18663: PPUSH
18664: CALL_OW 559
// end ;
18668: LD_VAR 0 2
18672: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
18673: LD_EXP 32
18677: PUSH
18678: LD_EXP 37
18682: AND
18683: IFFALSE 18807
18685: GO 18687
18687: DISABLE
18688: LD_INT 0
18690: PPUSH
18691: PPUSH
// begin enable ;
18692: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
18693: LD_ADDR_VAR 0 2
18697: PUSH
18698: LD_INT 22
18700: PUSH
18701: LD_OWVAR 2
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: LD_INT 2
18712: PUSH
18713: LD_INT 34
18715: PUSH
18716: LD_INT 7
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: PUSH
18723: LD_INT 34
18725: PUSH
18726: LD_INT 45
18728: PUSH
18729: EMPTY
18730: LIST
18731: LIST
18732: PUSH
18733: LD_INT 34
18735: PUSH
18736: LD_INT 28
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: PUSH
18743: LD_INT 34
18745: PUSH
18746: LD_INT 47
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: PUSH
18753: EMPTY
18754: LIST
18755: LIST
18756: LIST
18757: LIST
18758: LIST
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: PPUSH
18764: CALL_OW 69
18768: ST_TO_ADDR
// if not tmp then
18769: LD_VAR 0 2
18773: NOT
18774: IFFALSE 18778
// exit ;
18776: GO 18807
// for i in tmp do
18778: LD_ADDR_VAR 0 1
18782: PUSH
18783: LD_VAR 0 2
18787: PUSH
18788: FOR_IN
18789: IFFALSE 18805
// begin SetLives ( i , 0 ) ;
18791: LD_VAR 0 1
18795: PPUSH
18796: LD_INT 0
18798: PPUSH
18799: CALL_OW 234
// end ;
18803: GO 18788
18805: POP
18806: POP
// end ;
18807: PPOPN 2
18809: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
18810: LD_EXP 32
18814: PUSH
18815: LD_EXP 38
18819: AND
18820: IFFALSE 18904
18822: GO 18824
18824: DISABLE
18825: LD_INT 0
18827: PPUSH
18828: PPUSH
// begin enable ;
18829: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
18830: LD_ADDR_VAR 0 2
18834: PUSH
18835: LD_INT 22
18837: PUSH
18838: LD_OWVAR 2
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: PUSH
18847: LD_INT 32
18849: PUSH
18850: LD_INT 3
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: PUSH
18857: EMPTY
18858: LIST
18859: LIST
18860: PPUSH
18861: CALL_OW 69
18865: ST_TO_ADDR
// if not tmp then
18866: LD_VAR 0 2
18870: NOT
18871: IFFALSE 18875
// exit ;
18873: GO 18904
// for i in tmp do
18875: LD_ADDR_VAR 0 1
18879: PUSH
18880: LD_VAR 0 2
18884: PUSH
18885: FOR_IN
18886: IFFALSE 18902
// begin SetLives ( i , 0 ) ;
18888: LD_VAR 0 1
18892: PPUSH
18893: LD_INT 0
18895: PPUSH
18896: CALL_OW 234
// end ;
18900: GO 18885
18902: POP
18903: POP
// end ;
18904: PPOPN 2
18906: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
18907: LD_EXP 32
18911: PUSH
18912: LD_EXP 35
18916: AND
18917: IFFALSE 19010
18919: GO 18921
18921: DISABLE
18922: LD_INT 0
18924: PPUSH
// begin enable ;
18925: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
18926: LD_ADDR_VAR 0 1
18930: PUSH
18931: LD_INT 22
18933: PUSH
18934: LD_OWVAR 2
18938: PUSH
18939: EMPTY
18940: LIST
18941: LIST
18942: PUSH
18943: LD_INT 2
18945: PUSH
18946: LD_INT 25
18948: PUSH
18949: LD_INT 5
18951: PUSH
18952: EMPTY
18953: LIST
18954: LIST
18955: PUSH
18956: LD_INT 25
18958: PUSH
18959: LD_INT 9
18961: PUSH
18962: EMPTY
18963: LIST
18964: LIST
18965: PUSH
18966: LD_INT 25
18968: PUSH
18969: LD_INT 8
18971: PUSH
18972: EMPTY
18973: LIST
18974: LIST
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: LIST
18980: LIST
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: PPUSH
18986: CALL_OW 69
18990: PUSH
18991: FOR_IN
18992: IFFALSE 19008
// begin SetClass ( i , 1 ) ;
18994: LD_VAR 0 1
18998: PPUSH
18999: LD_INT 1
19001: PPUSH
19002: CALL_OW 336
// end ;
19006: GO 18991
19008: POP
19009: POP
// end ;
19010: PPOPN 1
19012: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
19013: LD_EXP 32
19017: PUSH
19018: LD_EXP 36
19022: AND
19023: PUSH
19024: LD_OWVAR 65
19028: PUSH
19029: LD_INT 7
19031: LESS
19032: AND
19033: IFFALSE 19047
19035: GO 19037
19037: DISABLE
// begin enable ;
19038: ENABLE
// game_speed := 7 ;
19039: LD_ADDR_OWVAR 65
19043: PUSH
19044: LD_INT 7
19046: ST_TO_ADDR
// end ;
19047: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
19048: LD_EXP 32
19052: PUSH
19053: LD_EXP 39
19057: AND
19058: IFFALSE 19260
19060: GO 19062
19062: DISABLE
19063: LD_INT 0
19065: PPUSH
19066: PPUSH
19067: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19068: LD_ADDR_VAR 0 3
19072: PUSH
19073: LD_INT 81
19075: PUSH
19076: LD_OWVAR 2
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PUSH
19085: LD_INT 21
19087: PUSH
19088: LD_INT 1
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: PPUSH
19099: CALL_OW 69
19103: ST_TO_ADDR
// if not tmp then
19104: LD_VAR 0 3
19108: NOT
19109: IFFALSE 19113
// exit ;
19111: GO 19260
// if tmp > 5 then
19113: LD_VAR 0 3
19117: PUSH
19118: LD_INT 5
19120: GREATER
19121: IFFALSE 19133
// k := 5 else
19123: LD_ADDR_VAR 0 2
19127: PUSH
19128: LD_INT 5
19130: ST_TO_ADDR
19131: GO 19143
// k := tmp ;
19133: LD_ADDR_VAR 0 2
19137: PUSH
19138: LD_VAR 0 3
19142: ST_TO_ADDR
// for i := 1 to k do
19143: LD_ADDR_VAR 0 1
19147: PUSH
19148: DOUBLE
19149: LD_INT 1
19151: DEC
19152: ST_TO_ADDR
19153: LD_VAR 0 2
19157: PUSH
19158: FOR_TO
19159: IFFALSE 19258
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
19161: LD_VAR 0 3
19165: PUSH
19166: LD_VAR 0 1
19170: ARRAY
19171: PPUSH
19172: LD_VAR 0 1
19176: PUSH
19177: LD_INT 4
19179: MOD
19180: PUSH
19181: LD_INT 1
19183: PLUS
19184: PPUSH
19185: CALL_OW 259
19189: PUSH
19190: LD_INT 10
19192: LESS
19193: IFFALSE 19256
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
19195: LD_VAR 0 3
19199: PUSH
19200: LD_VAR 0 1
19204: ARRAY
19205: PPUSH
19206: LD_VAR 0 1
19210: PUSH
19211: LD_INT 4
19213: MOD
19214: PUSH
19215: LD_INT 1
19217: PLUS
19218: PPUSH
19219: LD_VAR 0 3
19223: PUSH
19224: LD_VAR 0 1
19228: ARRAY
19229: PPUSH
19230: LD_VAR 0 1
19234: PUSH
19235: LD_INT 4
19237: MOD
19238: PUSH
19239: LD_INT 1
19241: PLUS
19242: PPUSH
19243: CALL_OW 259
19247: PUSH
19248: LD_INT 1
19250: PLUS
19251: PPUSH
19252: CALL_OW 237
19256: GO 19158
19258: POP
19259: POP
// end ;
19260: PPOPN 3
19262: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
19263: LD_EXP 32
19267: PUSH
19268: LD_EXP 40
19272: AND
19273: IFFALSE 19293
19275: GO 19277
19277: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
19278: LD_INT 4
19280: PPUSH
19281: LD_OWVAR 2
19285: PPUSH
19286: LD_INT 0
19288: PPUSH
19289: CALL_OW 324
19293: END
// every 0 0$1 trigger StreamModeActive and sShovel do
19294: LD_EXP 32
19298: PUSH
19299: LD_EXP 69
19303: AND
19304: IFFALSE 19324
19306: GO 19308
19308: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
19309: LD_INT 19
19311: PPUSH
19312: LD_OWVAR 2
19316: PPUSH
19317: LD_INT 0
19319: PPUSH
19320: CALL_OW 324
19324: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
19325: LD_EXP 32
19329: PUSH
19330: LD_EXP 41
19334: AND
19335: IFFALSE 19437
19337: GO 19339
19339: DISABLE
19340: LD_INT 0
19342: PPUSH
19343: PPUSH
// begin enable ;
19344: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
19345: LD_ADDR_VAR 0 2
19349: PUSH
19350: LD_INT 22
19352: PUSH
19353: LD_OWVAR 2
19357: PUSH
19358: EMPTY
19359: LIST
19360: LIST
19361: PUSH
19362: LD_INT 2
19364: PUSH
19365: LD_INT 34
19367: PUSH
19368: LD_INT 11
19370: PUSH
19371: EMPTY
19372: LIST
19373: LIST
19374: PUSH
19375: LD_INT 34
19377: PUSH
19378: LD_INT 30
19380: PUSH
19381: EMPTY
19382: LIST
19383: LIST
19384: PUSH
19385: EMPTY
19386: LIST
19387: LIST
19388: LIST
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: PPUSH
19394: CALL_OW 69
19398: ST_TO_ADDR
// if not tmp then
19399: LD_VAR 0 2
19403: NOT
19404: IFFALSE 19408
// exit ;
19406: GO 19437
// for i in tmp do
19408: LD_ADDR_VAR 0 1
19412: PUSH
19413: LD_VAR 0 2
19417: PUSH
19418: FOR_IN
19419: IFFALSE 19435
// begin SetLives ( i , 0 ) ;
19421: LD_VAR 0 1
19425: PPUSH
19426: LD_INT 0
19428: PPUSH
19429: CALL_OW 234
// end ;
19433: GO 19418
19435: POP
19436: POP
// end ;
19437: PPOPN 2
19439: END
// every 0 0$1 trigger StreamModeActive and sBunker do
19440: LD_EXP 32
19444: PUSH
19445: LD_EXP 42
19449: AND
19450: IFFALSE 19470
19452: GO 19454
19454: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
19455: LD_INT 32
19457: PPUSH
19458: LD_OWVAR 2
19462: PPUSH
19463: LD_INT 0
19465: PPUSH
19466: CALL_OW 324
19470: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
19471: LD_EXP 32
19475: PUSH
19476: LD_EXP 43
19480: AND
19481: IFFALSE 19662
19483: GO 19485
19485: DISABLE
19486: LD_INT 0
19488: PPUSH
19489: PPUSH
19490: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
19491: LD_ADDR_VAR 0 2
19495: PUSH
19496: LD_INT 22
19498: PUSH
19499: LD_OWVAR 2
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PUSH
19508: LD_INT 33
19510: PUSH
19511: LD_INT 3
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PPUSH
19522: CALL_OW 69
19526: ST_TO_ADDR
// if not tmp then
19527: LD_VAR 0 2
19531: NOT
19532: IFFALSE 19536
// exit ;
19534: GO 19662
// side := 0 ;
19536: LD_ADDR_VAR 0 3
19540: PUSH
19541: LD_INT 0
19543: ST_TO_ADDR
// for i := 1 to 8 do
19544: LD_ADDR_VAR 0 1
19548: PUSH
19549: DOUBLE
19550: LD_INT 1
19552: DEC
19553: ST_TO_ADDR
19554: LD_INT 8
19556: PUSH
19557: FOR_TO
19558: IFFALSE 19606
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
19560: LD_OWVAR 2
19564: PUSH
19565: LD_VAR 0 1
19569: NONEQUAL
19570: PUSH
19571: LD_OWVAR 2
19575: PPUSH
19576: LD_VAR 0 1
19580: PPUSH
19581: CALL_OW 81
19585: PUSH
19586: LD_INT 2
19588: EQUAL
19589: AND
19590: IFFALSE 19604
// begin side := i ;
19592: LD_ADDR_VAR 0 3
19596: PUSH
19597: LD_VAR 0 1
19601: ST_TO_ADDR
// break ;
19602: GO 19606
// end ;
19604: GO 19557
19606: POP
19607: POP
// if not side then
19608: LD_VAR 0 3
19612: NOT
19613: IFFALSE 19617
// exit ;
19615: GO 19662
// for i := 1 to tmp do
19617: LD_ADDR_VAR 0 1
19621: PUSH
19622: DOUBLE
19623: LD_INT 1
19625: DEC
19626: ST_TO_ADDR
19627: LD_VAR 0 2
19631: PUSH
19632: FOR_TO
19633: IFFALSE 19660
// if Prob ( 60 ) then
19635: LD_INT 60
19637: PPUSH
19638: CALL_OW 13
19642: IFFALSE 19658
// SetSide ( i , side ) ;
19644: LD_VAR 0 1
19648: PPUSH
19649: LD_VAR 0 3
19653: PPUSH
19654: CALL_OW 235
19658: GO 19632
19660: POP
19661: POP
// end ;
19662: PPOPN 3
19664: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
19665: LD_EXP 32
19669: PUSH
19670: LD_EXP 45
19674: AND
19675: IFFALSE 19794
19677: GO 19679
19679: DISABLE
19680: LD_INT 0
19682: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
19683: LD_ADDR_VAR 0 1
19687: PUSH
19688: LD_INT 22
19690: PUSH
19691: LD_OWVAR 2
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: PUSH
19700: LD_INT 21
19702: PUSH
19703: LD_INT 1
19705: PUSH
19706: EMPTY
19707: LIST
19708: LIST
19709: PUSH
19710: LD_INT 3
19712: PUSH
19713: LD_INT 23
19715: PUSH
19716: LD_INT 0
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: LIST
19731: PPUSH
19732: CALL_OW 69
19736: PUSH
19737: FOR_IN
19738: IFFALSE 19792
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
19740: LD_VAR 0 1
19744: PPUSH
19745: CALL_OW 257
19749: PUSH
19750: LD_INT 1
19752: PUSH
19753: LD_INT 2
19755: PUSH
19756: LD_INT 3
19758: PUSH
19759: LD_INT 4
19761: PUSH
19762: EMPTY
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: IN
19768: IFFALSE 19790
// SetClass ( un , rand ( 1 , 4 ) ) ;
19770: LD_VAR 0 1
19774: PPUSH
19775: LD_INT 1
19777: PPUSH
19778: LD_INT 4
19780: PPUSH
19781: CALL_OW 12
19785: PPUSH
19786: CALL_OW 336
19790: GO 19737
19792: POP
19793: POP
// end ;
19794: PPOPN 1
19796: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
19797: LD_EXP 32
19801: PUSH
19802: LD_EXP 44
19806: AND
19807: IFFALSE 19886
19809: GO 19811
19811: DISABLE
19812: LD_INT 0
19814: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19815: LD_ADDR_VAR 0 1
19819: PUSH
19820: LD_INT 22
19822: PUSH
19823: LD_OWVAR 2
19827: PUSH
19828: EMPTY
19829: LIST
19830: LIST
19831: PUSH
19832: LD_INT 21
19834: PUSH
19835: LD_INT 3
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PPUSH
19846: CALL_OW 69
19850: ST_TO_ADDR
// if not tmp then
19851: LD_VAR 0 1
19855: NOT
19856: IFFALSE 19860
// exit ;
19858: GO 19886
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
19860: LD_VAR 0 1
19864: PUSH
19865: LD_INT 1
19867: PPUSH
19868: LD_VAR 0 1
19872: PPUSH
19873: CALL_OW 12
19877: ARRAY
19878: PPUSH
19879: LD_INT 100
19881: PPUSH
19882: CALL_OW 234
// end ;
19886: PPOPN 1
19888: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
19889: LD_EXP 32
19893: PUSH
19894: LD_EXP 46
19898: AND
19899: IFFALSE 19997
19901: GO 19903
19903: DISABLE
19904: LD_INT 0
19906: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19907: LD_ADDR_VAR 0 1
19911: PUSH
19912: LD_INT 22
19914: PUSH
19915: LD_OWVAR 2
19919: PUSH
19920: EMPTY
19921: LIST
19922: LIST
19923: PUSH
19924: LD_INT 21
19926: PUSH
19927: LD_INT 1
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: PPUSH
19938: CALL_OW 69
19942: ST_TO_ADDR
// if not tmp then
19943: LD_VAR 0 1
19947: NOT
19948: IFFALSE 19952
// exit ;
19950: GO 19997
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
19952: LD_VAR 0 1
19956: PUSH
19957: LD_INT 1
19959: PPUSH
19960: LD_VAR 0 1
19964: PPUSH
19965: CALL_OW 12
19969: ARRAY
19970: PPUSH
19971: LD_INT 1
19973: PPUSH
19974: LD_INT 4
19976: PPUSH
19977: CALL_OW 12
19981: PPUSH
19982: LD_INT 3000
19984: PPUSH
19985: LD_INT 9000
19987: PPUSH
19988: CALL_OW 12
19992: PPUSH
19993: CALL_OW 492
// end ;
19997: PPOPN 1
19999: END
// every 0 0$1 trigger StreamModeActive and sDepot do
20000: LD_EXP 32
20004: PUSH
20005: LD_EXP 47
20009: AND
20010: IFFALSE 20030
20012: GO 20014
20014: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
20015: LD_INT 1
20017: PPUSH
20018: LD_OWVAR 2
20022: PPUSH
20023: LD_INT 0
20025: PPUSH
20026: CALL_OW 324
20030: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
20031: LD_EXP 32
20035: PUSH
20036: LD_EXP 48
20040: AND
20041: IFFALSE 20124
20043: GO 20045
20045: DISABLE
20046: LD_INT 0
20048: PPUSH
20049: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20050: LD_ADDR_VAR 0 2
20054: PUSH
20055: LD_INT 22
20057: PUSH
20058: LD_OWVAR 2
20062: PUSH
20063: EMPTY
20064: LIST
20065: LIST
20066: PUSH
20067: LD_INT 21
20069: PUSH
20070: LD_INT 3
20072: PUSH
20073: EMPTY
20074: LIST
20075: LIST
20076: PUSH
20077: EMPTY
20078: LIST
20079: LIST
20080: PPUSH
20081: CALL_OW 69
20085: ST_TO_ADDR
// if not tmp then
20086: LD_VAR 0 2
20090: NOT
20091: IFFALSE 20095
// exit ;
20093: GO 20124
// for i in tmp do
20095: LD_ADDR_VAR 0 1
20099: PUSH
20100: LD_VAR 0 2
20104: PUSH
20105: FOR_IN
20106: IFFALSE 20122
// SetBLevel ( i , 10 ) ;
20108: LD_VAR 0 1
20112: PPUSH
20113: LD_INT 10
20115: PPUSH
20116: CALL_OW 241
20120: GO 20105
20122: POP
20123: POP
// end ;
20124: PPOPN 2
20126: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
20127: LD_EXP 32
20131: PUSH
20132: LD_EXP 49
20136: AND
20137: IFFALSE 20248
20139: GO 20141
20141: DISABLE
20142: LD_INT 0
20144: PPUSH
20145: PPUSH
20146: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20147: LD_ADDR_VAR 0 3
20151: PUSH
20152: LD_INT 22
20154: PUSH
20155: LD_OWVAR 2
20159: PUSH
20160: EMPTY
20161: LIST
20162: LIST
20163: PUSH
20164: LD_INT 25
20166: PUSH
20167: LD_INT 1
20169: PUSH
20170: EMPTY
20171: LIST
20172: LIST
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: PPUSH
20178: CALL_OW 69
20182: ST_TO_ADDR
// if not tmp then
20183: LD_VAR 0 3
20187: NOT
20188: IFFALSE 20192
// exit ;
20190: GO 20248
// un := tmp [ rand ( 1 , tmp ) ] ;
20192: LD_ADDR_VAR 0 2
20196: PUSH
20197: LD_VAR 0 3
20201: PUSH
20202: LD_INT 1
20204: PPUSH
20205: LD_VAR 0 3
20209: PPUSH
20210: CALL_OW 12
20214: ARRAY
20215: ST_TO_ADDR
// if Crawls ( un ) then
20216: LD_VAR 0 2
20220: PPUSH
20221: CALL_OW 318
20225: IFFALSE 20236
// ComWalk ( un ) ;
20227: LD_VAR 0 2
20231: PPUSH
20232: CALL_OW 138
// SetClass ( un , class_sniper ) ;
20236: LD_VAR 0 2
20240: PPUSH
20241: LD_INT 5
20243: PPUSH
20244: CALL_OW 336
// end ;
20248: PPOPN 3
20250: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
20251: LD_EXP 32
20255: PUSH
20256: LD_EXP 50
20260: AND
20261: PUSH
20262: LD_OWVAR 67
20266: PUSH
20267: LD_INT 4
20269: LESS
20270: AND
20271: IFFALSE 20290
20273: GO 20275
20275: DISABLE
// begin Difficulty := Difficulty + 1 ;
20276: LD_ADDR_OWVAR 67
20280: PUSH
20281: LD_OWVAR 67
20285: PUSH
20286: LD_INT 1
20288: PLUS
20289: ST_TO_ADDR
// end ;
20290: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
20291: LD_EXP 32
20295: PUSH
20296: LD_EXP 51
20300: AND
20301: IFFALSE 20404
20303: GO 20305
20305: DISABLE
20306: LD_INT 0
20308: PPUSH
// begin for i := 1 to 5 do
20309: LD_ADDR_VAR 0 1
20313: PUSH
20314: DOUBLE
20315: LD_INT 1
20317: DEC
20318: ST_TO_ADDR
20319: LD_INT 5
20321: PUSH
20322: FOR_TO
20323: IFFALSE 20402
// begin uc_nation := nation_nature ;
20325: LD_ADDR_OWVAR 21
20329: PUSH
20330: LD_INT 0
20332: ST_TO_ADDR
// uc_side := 0 ;
20333: LD_ADDR_OWVAR 20
20337: PUSH
20338: LD_INT 0
20340: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20341: LD_ADDR_OWVAR 29
20345: PUSH
20346: LD_INT 12
20348: PUSH
20349: LD_INT 12
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: ST_TO_ADDR
// hc_agressivity := 20 ;
20356: LD_ADDR_OWVAR 35
20360: PUSH
20361: LD_INT 20
20363: ST_TO_ADDR
// hc_class := class_tiger ;
20364: LD_ADDR_OWVAR 28
20368: PUSH
20369: LD_INT 14
20371: ST_TO_ADDR
// hc_gallery :=  ;
20372: LD_ADDR_OWVAR 33
20376: PUSH
20377: LD_STRING 
20379: ST_TO_ADDR
// hc_name :=  ;
20380: LD_ADDR_OWVAR 26
20384: PUSH
20385: LD_STRING 
20387: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
20388: CALL_OW 44
20392: PPUSH
20393: LD_INT 0
20395: PPUSH
20396: CALL_OW 51
// end ;
20400: GO 20322
20402: POP
20403: POP
// end ;
20404: PPOPN 1
20406: END
// every 0 0$1 trigger StreamModeActive and sBomb do
20407: LD_EXP 32
20411: PUSH
20412: LD_EXP 52
20416: AND
20417: IFFALSE 20426
20419: GO 20421
20421: DISABLE
// StreamSibBomb ;
20422: CALL 20427 0 0
20426: END
// export function StreamSibBomb ; var i , x , y ; begin
20427: LD_INT 0
20429: PPUSH
20430: PPUSH
20431: PPUSH
20432: PPUSH
// result := false ;
20433: LD_ADDR_VAR 0 1
20437: PUSH
20438: LD_INT 0
20440: ST_TO_ADDR
// for i := 1 to 16 do
20441: LD_ADDR_VAR 0 2
20445: PUSH
20446: DOUBLE
20447: LD_INT 1
20449: DEC
20450: ST_TO_ADDR
20451: LD_INT 16
20453: PUSH
20454: FOR_TO
20455: IFFALSE 20654
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20457: LD_ADDR_VAR 0 3
20461: PUSH
20462: LD_INT 10
20464: PUSH
20465: LD_INT 20
20467: PUSH
20468: LD_INT 30
20470: PUSH
20471: LD_INT 40
20473: PUSH
20474: LD_INT 50
20476: PUSH
20477: LD_INT 60
20479: PUSH
20480: LD_INT 70
20482: PUSH
20483: LD_INT 80
20485: PUSH
20486: LD_INT 90
20488: PUSH
20489: LD_INT 100
20491: PUSH
20492: LD_INT 110
20494: PUSH
20495: LD_INT 120
20497: PUSH
20498: LD_INT 130
20500: PUSH
20501: LD_INT 140
20503: PUSH
20504: LD_INT 150
20506: PUSH
20507: EMPTY
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: PUSH
20524: LD_INT 1
20526: PPUSH
20527: LD_INT 15
20529: PPUSH
20530: CALL_OW 12
20534: ARRAY
20535: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20536: LD_ADDR_VAR 0 4
20540: PUSH
20541: LD_INT 10
20543: PUSH
20544: LD_INT 20
20546: PUSH
20547: LD_INT 30
20549: PUSH
20550: LD_INT 40
20552: PUSH
20553: LD_INT 50
20555: PUSH
20556: LD_INT 60
20558: PUSH
20559: LD_INT 70
20561: PUSH
20562: LD_INT 80
20564: PUSH
20565: LD_INT 90
20567: PUSH
20568: LD_INT 100
20570: PUSH
20571: LD_INT 110
20573: PUSH
20574: LD_INT 120
20576: PUSH
20577: LD_INT 130
20579: PUSH
20580: LD_INT 140
20582: PUSH
20583: LD_INT 150
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: PUSH
20603: LD_INT 1
20605: PPUSH
20606: LD_INT 15
20608: PPUSH
20609: CALL_OW 12
20613: ARRAY
20614: ST_TO_ADDR
// if ValidHex ( x , y ) then
20615: LD_VAR 0 3
20619: PPUSH
20620: LD_VAR 0 4
20624: PPUSH
20625: CALL_OW 488
20629: IFFALSE 20652
// begin result := [ x , y ] ;
20631: LD_ADDR_VAR 0 1
20635: PUSH
20636: LD_VAR 0 3
20640: PUSH
20641: LD_VAR 0 4
20645: PUSH
20646: EMPTY
20647: LIST
20648: LIST
20649: ST_TO_ADDR
// break ;
20650: GO 20654
// end ; end ;
20652: GO 20454
20654: POP
20655: POP
// if result then
20656: LD_VAR 0 1
20660: IFFALSE 20720
// begin ToLua ( playSibBomb() ) ;
20662: LD_STRING playSibBomb()
20664: PPUSH
20665: CALL_OW 559
// wait ( 0 0$14 ) ;
20669: LD_INT 490
20671: PPUSH
20672: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
20676: LD_VAR 0 1
20680: PUSH
20681: LD_INT 1
20683: ARRAY
20684: PPUSH
20685: LD_VAR 0 1
20689: PUSH
20690: LD_INT 2
20692: ARRAY
20693: PPUSH
20694: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
20698: LD_VAR 0 1
20702: PUSH
20703: LD_INT 1
20705: ARRAY
20706: PPUSH
20707: LD_VAR 0 1
20711: PUSH
20712: LD_INT 2
20714: ARRAY
20715: PPUSH
20716: CALL_OW 429
// end ; end ;
20720: LD_VAR 0 1
20724: RET
// every 0 0$1 trigger StreamModeActive and sReset do
20725: LD_EXP 32
20729: PUSH
20730: LD_EXP 54
20734: AND
20735: IFFALSE 20747
20737: GO 20739
20739: DISABLE
// YouLost (  ) ;
20740: LD_STRING 
20742: PPUSH
20743: CALL_OW 104
20747: END
// every 0 0$1 trigger StreamModeActive and sFog do
20748: LD_EXP 32
20752: PUSH
20753: LD_EXP 53
20757: AND
20758: IFFALSE 20772
20760: GO 20762
20762: DISABLE
// FogOff ( your_side ) ;
20763: LD_OWVAR 2
20767: PPUSH
20768: CALL_OW 344
20772: END
// every 0 0$1 trigger StreamModeActive and sSun do
20773: LD_EXP 32
20777: PUSH
20778: LD_EXP 55
20782: AND
20783: IFFALSE 20811
20785: GO 20787
20787: DISABLE
// begin solar_recharge_percent := 0 ;
20788: LD_ADDR_OWVAR 79
20792: PUSH
20793: LD_INT 0
20795: ST_TO_ADDR
// wait ( 5 5$00 ) ;
20796: LD_INT 10500
20798: PPUSH
20799: CALL_OW 67
// solar_recharge_percent := 100 ;
20803: LD_ADDR_OWVAR 79
20807: PUSH
20808: LD_INT 100
20810: ST_TO_ADDR
// end ;
20811: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
20812: LD_EXP 32
20816: PUSH
20817: LD_EXP 56
20821: AND
20822: IFFALSE 21061
20824: GO 20826
20826: DISABLE
20827: LD_INT 0
20829: PPUSH
20830: PPUSH
20831: PPUSH
// begin tmp := [ ] ;
20832: LD_ADDR_VAR 0 3
20836: PUSH
20837: EMPTY
20838: ST_TO_ADDR
// for i := 1 to 6 do
20839: LD_ADDR_VAR 0 1
20843: PUSH
20844: DOUBLE
20845: LD_INT 1
20847: DEC
20848: ST_TO_ADDR
20849: LD_INT 6
20851: PUSH
20852: FOR_TO
20853: IFFALSE 20958
// begin uc_nation := nation_nature ;
20855: LD_ADDR_OWVAR 21
20859: PUSH
20860: LD_INT 0
20862: ST_TO_ADDR
// uc_side := 0 ;
20863: LD_ADDR_OWVAR 20
20867: PUSH
20868: LD_INT 0
20870: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20871: LD_ADDR_OWVAR 29
20875: PUSH
20876: LD_INT 12
20878: PUSH
20879: LD_INT 12
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: ST_TO_ADDR
// hc_agressivity := 20 ;
20886: LD_ADDR_OWVAR 35
20890: PUSH
20891: LD_INT 20
20893: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
20894: LD_ADDR_OWVAR 28
20898: PUSH
20899: LD_INT 17
20901: ST_TO_ADDR
// hc_gallery :=  ;
20902: LD_ADDR_OWVAR 33
20906: PUSH
20907: LD_STRING 
20909: ST_TO_ADDR
// hc_name :=  ;
20910: LD_ADDR_OWVAR 26
20914: PUSH
20915: LD_STRING 
20917: ST_TO_ADDR
// un := CreateHuman ;
20918: LD_ADDR_VAR 0 2
20922: PUSH
20923: CALL_OW 44
20927: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
20928: LD_VAR 0 2
20932: PPUSH
20933: LD_INT 1
20935: PPUSH
20936: CALL_OW 51
// tmp := tmp ^ un ;
20940: LD_ADDR_VAR 0 3
20944: PUSH
20945: LD_VAR 0 3
20949: PUSH
20950: LD_VAR 0 2
20954: ADD
20955: ST_TO_ADDR
// end ;
20956: GO 20852
20958: POP
20959: POP
// repeat wait ( 0 0$1 ) ;
20960: LD_INT 35
20962: PPUSH
20963: CALL_OW 67
// for un in tmp do
20967: LD_ADDR_VAR 0 2
20971: PUSH
20972: LD_VAR 0 3
20976: PUSH
20977: FOR_IN
20978: IFFALSE 21052
// begin if IsDead ( un ) then
20980: LD_VAR 0 2
20984: PPUSH
20985: CALL_OW 301
20989: IFFALSE 21009
// begin tmp := tmp diff un ;
20991: LD_ADDR_VAR 0 3
20995: PUSH
20996: LD_VAR 0 3
21000: PUSH
21001: LD_VAR 0 2
21005: DIFF
21006: ST_TO_ADDR
// continue ;
21007: GO 20977
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
21009: LD_VAR 0 2
21013: PPUSH
21014: LD_INT 3
21016: PUSH
21017: LD_INT 22
21019: PUSH
21020: LD_INT 0
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: PPUSH
21031: CALL_OW 69
21035: PPUSH
21036: LD_VAR 0 2
21040: PPUSH
21041: CALL_OW 74
21045: PPUSH
21046: CALL_OW 115
// end ;
21050: GO 20977
21052: POP
21053: POP
// until not tmp ;
21054: LD_VAR 0 3
21058: NOT
21059: IFFALSE 20960
// end ;
21061: PPOPN 3
21063: END
// every 0 0$1 trigger StreamModeActive and sTroll do
21064: LD_EXP 32
21068: PUSH
21069: LD_EXP 57
21073: AND
21074: IFFALSE 21128
21076: GO 21078
21078: DISABLE
// begin ToLua ( displayTroll(); ) ;
21079: LD_STRING displayTroll();
21081: PPUSH
21082: CALL_OW 559
// wait ( 3 3$00 ) ;
21086: LD_INT 6300
21088: PPUSH
21089: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21093: LD_STRING hideTroll();
21095: PPUSH
21096: CALL_OW 559
// wait ( 1 1$00 ) ;
21100: LD_INT 2100
21102: PPUSH
21103: CALL_OW 67
// ToLua ( displayTroll(); ) ;
21107: LD_STRING displayTroll();
21109: PPUSH
21110: CALL_OW 559
// wait ( 1 1$00 ) ;
21114: LD_INT 2100
21116: PPUSH
21117: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21121: LD_STRING hideTroll();
21123: PPUSH
21124: CALL_OW 559
// end ;
21128: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
21129: LD_EXP 32
21133: PUSH
21134: LD_EXP 58
21138: AND
21139: IFFALSE 21202
21141: GO 21143
21143: DISABLE
21144: LD_INT 0
21146: PPUSH
// begin p := 0 ;
21147: LD_ADDR_VAR 0 1
21151: PUSH
21152: LD_INT 0
21154: ST_TO_ADDR
// repeat game_speed := 1 ;
21155: LD_ADDR_OWVAR 65
21159: PUSH
21160: LD_INT 1
21162: ST_TO_ADDR
// wait ( 0 0$1 ) ;
21163: LD_INT 35
21165: PPUSH
21166: CALL_OW 67
// p := p + 1 ;
21170: LD_ADDR_VAR 0 1
21174: PUSH
21175: LD_VAR 0 1
21179: PUSH
21180: LD_INT 1
21182: PLUS
21183: ST_TO_ADDR
// until p >= 60 ;
21184: LD_VAR 0 1
21188: PUSH
21189: LD_INT 60
21191: GREATEREQUAL
21192: IFFALSE 21155
// game_speed := 4 ;
21194: LD_ADDR_OWVAR 65
21198: PUSH
21199: LD_INT 4
21201: ST_TO_ADDR
// end ;
21202: PPOPN 1
21204: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
21205: LD_EXP 32
21209: PUSH
21210: LD_EXP 59
21214: AND
21215: IFFALSE 21361
21217: GO 21219
21219: DISABLE
21220: LD_INT 0
21222: PPUSH
21223: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21224: LD_ADDR_VAR 0 1
21228: PUSH
21229: LD_INT 22
21231: PUSH
21232: LD_OWVAR 2
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: PUSH
21241: LD_INT 2
21243: PUSH
21244: LD_INT 30
21246: PUSH
21247: LD_INT 0
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: PUSH
21254: LD_INT 30
21256: PUSH
21257: LD_INT 1
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: PUSH
21264: EMPTY
21265: LIST
21266: LIST
21267: LIST
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: PPUSH
21273: CALL_OW 69
21277: ST_TO_ADDR
// if not depot then
21278: LD_VAR 0 1
21282: NOT
21283: IFFALSE 21287
// exit ;
21285: GO 21361
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
21287: LD_ADDR_VAR 0 2
21291: PUSH
21292: LD_VAR 0 1
21296: PUSH
21297: LD_INT 1
21299: PPUSH
21300: LD_VAR 0 1
21304: PPUSH
21305: CALL_OW 12
21309: ARRAY
21310: PPUSH
21311: CALL_OW 274
21315: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
21316: LD_VAR 0 2
21320: PPUSH
21321: LD_INT 1
21323: PPUSH
21324: LD_INT 0
21326: PPUSH
21327: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
21331: LD_VAR 0 2
21335: PPUSH
21336: LD_INT 2
21338: PPUSH
21339: LD_INT 0
21341: PPUSH
21342: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
21346: LD_VAR 0 2
21350: PPUSH
21351: LD_INT 3
21353: PPUSH
21354: LD_INT 0
21356: PPUSH
21357: CALL_OW 277
// end ;
21361: PPOPN 2
21363: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
21364: LD_EXP 32
21368: PUSH
21369: LD_EXP 60
21373: AND
21374: IFFALSE 21471
21376: GO 21378
21378: DISABLE
21379: LD_INT 0
21381: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21382: LD_ADDR_VAR 0 1
21386: PUSH
21387: LD_INT 22
21389: PUSH
21390: LD_OWVAR 2
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PUSH
21399: LD_INT 21
21401: PUSH
21402: LD_INT 1
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: PUSH
21409: LD_INT 3
21411: PUSH
21412: LD_INT 23
21414: PUSH
21415: LD_INT 0
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: PUSH
21426: EMPTY
21427: LIST
21428: LIST
21429: LIST
21430: PPUSH
21431: CALL_OW 69
21435: ST_TO_ADDR
// if not tmp then
21436: LD_VAR 0 1
21440: NOT
21441: IFFALSE 21445
// exit ;
21443: GO 21471
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
21445: LD_VAR 0 1
21449: PUSH
21450: LD_INT 1
21452: PPUSH
21453: LD_VAR 0 1
21457: PPUSH
21458: CALL_OW 12
21462: ARRAY
21463: PPUSH
21464: LD_INT 200
21466: PPUSH
21467: CALL_OW 234
// end ;
21471: PPOPN 1
21473: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
21474: LD_EXP 32
21478: PUSH
21479: LD_EXP 61
21483: AND
21484: IFFALSE 21563
21486: GO 21488
21488: DISABLE
21489: LD_INT 0
21491: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
21492: LD_ADDR_VAR 0 1
21496: PUSH
21497: LD_INT 22
21499: PUSH
21500: LD_OWVAR 2
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: PUSH
21509: LD_INT 21
21511: PUSH
21512: LD_INT 2
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: PUSH
21519: EMPTY
21520: LIST
21521: LIST
21522: PPUSH
21523: CALL_OW 69
21527: ST_TO_ADDR
// if not tmp then
21528: LD_VAR 0 1
21532: NOT
21533: IFFALSE 21537
// exit ;
21535: GO 21563
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
21537: LD_VAR 0 1
21541: PUSH
21542: LD_INT 1
21544: PPUSH
21545: LD_VAR 0 1
21549: PPUSH
21550: CALL_OW 12
21554: ARRAY
21555: PPUSH
21556: LD_INT 60
21558: PPUSH
21559: CALL_OW 234
// end ;
21563: PPOPN 1
21565: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
21566: LD_EXP 32
21570: PUSH
21571: LD_EXP 62
21575: AND
21576: IFFALSE 21675
21578: GO 21580
21580: DISABLE
21581: LD_INT 0
21583: PPUSH
21584: PPUSH
// begin enable ;
21585: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
21586: LD_ADDR_VAR 0 1
21590: PUSH
21591: LD_INT 22
21593: PUSH
21594: LD_OWVAR 2
21598: PUSH
21599: EMPTY
21600: LIST
21601: LIST
21602: PUSH
21603: LD_INT 61
21605: PUSH
21606: EMPTY
21607: LIST
21608: PUSH
21609: LD_INT 33
21611: PUSH
21612: LD_INT 2
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: LIST
21623: PPUSH
21624: CALL_OW 69
21628: ST_TO_ADDR
// if not tmp then
21629: LD_VAR 0 1
21633: NOT
21634: IFFALSE 21638
// exit ;
21636: GO 21675
// for i in tmp do
21638: LD_ADDR_VAR 0 2
21642: PUSH
21643: LD_VAR 0 1
21647: PUSH
21648: FOR_IN
21649: IFFALSE 21673
// if IsControledBy ( i ) then
21651: LD_VAR 0 2
21655: PPUSH
21656: CALL_OW 312
21660: IFFALSE 21671
// ComUnlink ( i ) ;
21662: LD_VAR 0 2
21666: PPUSH
21667: CALL_OW 136
21671: GO 21648
21673: POP
21674: POP
// end ;
21675: PPOPN 2
21677: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
21678: LD_EXP 32
21682: PUSH
21683: LD_EXP 63
21687: AND
21688: IFFALSE 21828
21690: GO 21692
21692: DISABLE
21693: LD_INT 0
21695: PPUSH
21696: PPUSH
// begin ToLua ( displayPowell(); ) ;
21697: LD_STRING displayPowell();
21699: PPUSH
21700: CALL_OW 559
// uc_side := 0 ;
21704: LD_ADDR_OWVAR 20
21708: PUSH
21709: LD_INT 0
21711: ST_TO_ADDR
// uc_nation := 2 ;
21712: LD_ADDR_OWVAR 21
21716: PUSH
21717: LD_INT 2
21719: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
21720: LD_ADDR_OWVAR 37
21724: PUSH
21725: LD_INT 14
21727: ST_TO_ADDR
// vc_engine := engine_siberite ;
21728: LD_ADDR_OWVAR 39
21732: PUSH
21733: LD_INT 3
21735: ST_TO_ADDR
// vc_control := control_apeman ;
21736: LD_ADDR_OWVAR 38
21740: PUSH
21741: LD_INT 5
21743: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
21744: LD_ADDR_OWVAR 40
21748: PUSH
21749: LD_INT 29
21751: ST_TO_ADDR
// un := CreateVehicle ;
21752: LD_ADDR_VAR 0 2
21756: PUSH
21757: CALL_OW 45
21761: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21762: LD_VAR 0 2
21766: PPUSH
21767: LD_INT 1
21769: PPUSH
21770: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21774: LD_INT 35
21776: PPUSH
21777: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21781: LD_VAR 0 2
21785: PPUSH
21786: LD_INT 22
21788: PUSH
21789: LD_OWVAR 2
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: PPUSH
21798: CALL_OW 69
21802: PPUSH
21803: LD_VAR 0 2
21807: PPUSH
21808: CALL_OW 74
21812: PPUSH
21813: CALL_OW 115
// until IsDead ( un ) ;
21817: LD_VAR 0 2
21821: PPUSH
21822: CALL_OW 301
21826: IFFALSE 21774
// end ;
21828: PPOPN 2
21830: END
// every 0 0$1 trigger StreamModeActive and sStu do
21831: LD_EXP 32
21835: PUSH
21836: LD_EXP 71
21840: AND
21841: IFFALSE 21857
21843: GO 21845
21845: DISABLE
// begin ToLua ( displayStucuk(); ) ;
21846: LD_STRING displayStucuk();
21848: PPUSH
21849: CALL_OW 559
// ResetFog ;
21853: CALL_OW 335
// end ;
21857: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
21858: LD_EXP 32
21862: PUSH
21863: LD_EXP 64
21867: AND
21868: IFFALSE 22009
21870: GO 21872
21872: DISABLE
21873: LD_INT 0
21875: PPUSH
21876: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21877: LD_ADDR_VAR 0 2
21881: PUSH
21882: LD_INT 22
21884: PUSH
21885: LD_OWVAR 2
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: PUSH
21894: LD_INT 21
21896: PUSH
21897: LD_INT 1
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: PUSH
21904: EMPTY
21905: LIST
21906: LIST
21907: PPUSH
21908: CALL_OW 69
21912: ST_TO_ADDR
// if not tmp then
21913: LD_VAR 0 2
21917: NOT
21918: IFFALSE 21922
// exit ;
21920: GO 22009
// un := tmp [ rand ( 1 , tmp ) ] ;
21922: LD_ADDR_VAR 0 1
21926: PUSH
21927: LD_VAR 0 2
21931: PUSH
21932: LD_INT 1
21934: PPUSH
21935: LD_VAR 0 2
21939: PPUSH
21940: CALL_OW 12
21944: ARRAY
21945: ST_TO_ADDR
// SetSide ( un , 0 ) ;
21946: LD_VAR 0 1
21950: PPUSH
21951: LD_INT 0
21953: PPUSH
21954: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
21958: LD_VAR 0 1
21962: PPUSH
21963: LD_OWVAR 3
21967: PUSH
21968: LD_VAR 0 1
21972: DIFF
21973: PPUSH
21974: LD_VAR 0 1
21978: PPUSH
21979: CALL_OW 74
21983: PPUSH
21984: CALL_OW 115
// wait ( 0 0$20 ) ;
21988: LD_INT 700
21990: PPUSH
21991: CALL_OW 67
// SetSide ( un , your_side ) ;
21995: LD_VAR 0 1
21999: PPUSH
22000: LD_OWVAR 2
22004: PPUSH
22005: CALL_OW 235
// end ;
22009: PPOPN 2
22011: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
22012: LD_EXP 32
22016: PUSH
22017: LD_EXP 65
22021: AND
22022: IFFALSE 22128
22024: GO 22026
22026: DISABLE
22027: LD_INT 0
22029: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22030: LD_ADDR_VAR 0 1
22034: PUSH
22035: LD_INT 22
22037: PUSH
22038: LD_OWVAR 2
22042: PUSH
22043: EMPTY
22044: LIST
22045: LIST
22046: PUSH
22047: LD_INT 2
22049: PUSH
22050: LD_INT 30
22052: PUSH
22053: LD_INT 0
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: PUSH
22060: LD_INT 30
22062: PUSH
22063: LD_INT 1
22065: PUSH
22066: EMPTY
22067: LIST
22068: LIST
22069: PUSH
22070: EMPTY
22071: LIST
22072: LIST
22073: LIST
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: PPUSH
22079: CALL_OW 69
22083: ST_TO_ADDR
// if not depot then
22084: LD_VAR 0 1
22088: NOT
22089: IFFALSE 22093
// exit ;
22091: GO 22128
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
22093: LD_VAR 0 1
22097: PUSH
22098: LD_INT 1
22100: ARRAY
22101: PPUSH
22102: CALL_OW 250
22106: PPUSH
22107: LD_VAR 0 1
22111: PUSH
22112: LD_INT 1
22114: ARRAY
22115: PPUSH
22116: CALL_OW 251
22120: PPUSH
22121: LD_INT 70
22123: PPUSH
22124: CALL_OW 495
// end ;
22128: PPOPN 1
22130: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
22131: LD_EXP 32
22135: PUSH
22136: LD_EXP 66
22140: AND
22141: IFFALSE 22352
22143: GO 22145
22145: DISABLE
22146: LD_INT 0
22148: PPUSH
22149: PPUSH
22150: PPUSH
22151: PPUSH
22152: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22153: LD_ADDR_VAR 0 5
22157: PUSH
22158: LD_INT 22
22160: PUSH
22161: LD_OWVAR 2
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: PUSH
22170: LD_INT 21
22172: PUSH
22173: LD_INT 1
22175: PUSH
22176: EMPTY
22177: LIST
22178: LIST
22179: PUSH
22180: EMPTY
22181: LIST
22182: LIST
22183: PPUSH
22184: CALL_OW 69
22188: ST_TO_ADDR
// if not tmp then
22189: LD_VAR 0 5
22193: NOT
22194: IFFALSE 22198
// exit ;
22196: GO 22352
// for i in tmp do
22198: LD_ADDR_VAR 0 1
22202: PUSH
22203: LD_VAR 0 5
22207: PUSH
22208: FOR_IN
22209: IFFALSE 22350
// begin d := rand ( 0 , 5 ) ;
22211: LD_ADDR_VAR 0 4
22215: PUSH
22216: LD_INT 0
22218: PPUSH
22219: LD_INT 5
22221: PPUSH
22222: CALL_OW 12
22226: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
22227: LD_ADDR_VAR 0 2
22231: PUSH
22232: LD_VAR 0 1
22236: PPUSH
22237: CALL_OW 250
22241: PPUSH
22242: LD_VAR 0 4
22246: PPUSH
22247: LD_INT 3
22249: PPUSH
22250: LD_INT 12
22252: PPUSH
22253: CALL_OW 12
22257: PPUSH
22258: CALL_OW 272
22262: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
22263: LD_ADDR_VAR 0 3
22267: PUSH
22268: LD_VAR 0 1
22272: PPUSH
22273: CALL_OW 251
22277: PPUSH
22278: LD_VAR 0 4
22282: PPUSH
22283: LD_INT 3
22285: PPUSH
22286: LD_INT 12
22288: PPUSH
22289: CALL_OW 12
22293: PPUSH
22294: CALL_OW 273
22298: ST_TO_ADDR
// if ValidHex ( x , y ) then
22299: LD_VAR 0 2
22303: PPUSH
22304: LD_VAR 0 3
22308: PPUSH
22309: CALL_OW 488
22313: IFFALSE 22348
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
22315: LD_VAR 0 1
22319: PPUSH
22320: LD_VAR 0 2
22324: PPUSH
22325: LD_VAR 0 3
22329: PPUSH
22330: LD_INT 3
22332: PPUSH
22333: LD_INT 6
22335: PPUSH
22336: CALL_OW 12
22340: PPUSH
22341: LD_INT 1
22343: PPUSH
22344: CALL_OW 483
// end ;
22348: GO 22208
22350: POP
22351: POP
// end ;
22352: PPOPN 5
22354: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
22355: LD_EXP 32
22359: PUSH
22360: LD_EXP 67
22364: AND
22365: IFFALSE 22459
22367: GO 22369
22369: DISABLE
22370: LD_INT 0
22372: PPUSH
22373: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
22374: LD_ADDR_VAR 0 2
22378: PUSH
22379: LD_INT 22
22381: PUSH
22382: LD_OWVAR 2
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: PUSH
22391: LD_INT 32
22393: PUSH
22394: LD_INT 1
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: PUSH
22401: LD_INT 21
22403: PUSH
22404: LD_INT 2
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: LIST
22415: PPUSH
22416: CALL_OW 69
22420: ST_TO_ADDR
// if not tmp then
22421: LD_VAR 0 2
22425: NOT
22426: IFFALSE 22430
// exit ;
22428: GO 22459
// for i in tmp do
22430: LD_ADDR_VAR 0 1
22434: PUSH
22435: LD_VAR 0 2
22439: PUSH
22440: FOR_IN
22441: IFFALSE 22457
// SetFuel ( i , 0 ) ;
22443: LD_VAR 0 1
22447: PPUSH
22448: LD_INT 0
22450: PPUSH
22451: CALL_OW 240
22455: GO 22440
22457: POP
22458: POP
// end ;
22459: PPOPN 2
22461: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
22462: LD_EXP 32
22466: PUSH
22467: LD_EXP 68
22471: AND
22472: IFFALSE 22538
22474: GO 22476
22476: DISABLE
22477: LD_INT 0
22479: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22480: LD_ADDR_VAR 0 1
22484: PUSH
22485: LD_INT 22
22487: PUSH
22488: LD_OWVAR 2
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: PUSH
22497: LD_INT 30
22499: PUSH
22500: LD_INT 29
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: PPUSH
22511: CALL_OW 69
22515: ST_TO_ADDR
// if not tmp then
22516: LD_VAR 0 1
22520: NOT
22521: IFFALSE 22525
// exit ;
22523: GO 22538
// DestroyUnit ( tmp [ 1 ] ) ;
22525: LD_VAR 0 1
22529: PUSH
22530: LD_INT 1
22532: ARRAY
22533: PPUSH
22534: CALL_OW 65
// end ;
22538: PPOPN 1
22540: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
22541: LD_EXP 32
22545: PUSH
22546: LD_EXP 70
22550: AND
22551: IFFALSE 22680
22553: GO 22555
22555: DISABLE
22556: LD_INT 0
22558: PPUSH
// begin uc_side := 0 ;
22559: LD_ADDR_OWVAR 20
22563: PUSH
22564: LD_INT 0
22566: ST_TO_ADDR
// uc_nation := nation_arabian ;
22567: LD_ADDR_OWVAR 21
22571: PUSH
22572: LD_INT 2
22574: ST_TO_ADDR
// hc_gallery :=  ;
22575: LD_ADDR_OWVAR 33
22579: PUSH
22580: LD_STRING 
22582: ST_TO_ADDR
// hc_name :=  ;
22583: LD_ADDR_OWVAR 26
22587: PUSH
22588: LD_STRING 
22590: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
22591: LD_INT 1
22593: PPUSH
22594: LD_INT 11
22596: PPUSH
22597: LD_INT 10
22599: PPUSH
22600: CALL_OW 380
// un := CreateHuman ;
22604: LD_ADDR_VAR 0 1
22608: PUSH
22609: CALL_OW 44
22613: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22614: LD_VAR 0 1
22618: PPUSH
22619: LD_INT 1
22621: PPUSH
22622: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22626: LD_INT 35
22628: PPUSH
22629: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22633: LD_VAR 0 1
22637: PPUSH
22638: LD_INT 22
22640: PUSH
22641: LD_OWVAR 2
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: PPUSH
22650: CALL_OW 69
22654: PPUSH
22655: LD_VAR 0 1
22659: PPUSH
22660: CALL_OW 74
22664: PPUSH
22665: CALL_OW 115
// until IsDead ( un ) ;
22669: LD_VAR 0 1
22673: PPUSH
22674: CALL_OW 301
22678: IFFALSE 22626
// end ;
22680: PPOPN 1
22682: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
22683: LD_EXP 32
22687: PUSH
22688: LD_EXP 72
22692: AND
22693: IFFALSE 22705
22695: GO 22697
22697: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
22698: LD_STRING earthquake(getX(game), 0, 32)
22700: PPUSH
22701: CALL_OW 559
22705: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
22706: LD_EXP 32
22710: PUSH
22711: LD_EXP 73
22715: AND
22716: IFFALSE 22807
22718: GO 22720
22720: DISABLE
22721: LD_INT 0
22723: PPUSH
// begin enable ;
22724: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
22725: LD_ADDR_VAR 0 1
22729: PUSH
22730: LD_INT 22
22732: PUSH
22733: LD_OWVAR 2
22737: PUSH
22738: EMPTY
22739: LIST
22740: LIST
22741: PUSH
22742: LD_INT 21
22744: PUSH
22745: LD_INT 2
22747: PUSH
22748: EMPTY
22749: LIST
22750: LIST
22751: PUSH
22752: LD_INT 33
22754: PUSH
22755: LD_INT 3
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: LIST
22766: PPUSH
22767: CALL_OW 69
22771: ST_TO_ADDR
// if not tmp then
22772: LD_VAR 0 1
22776: NOT
22777: IFFALSE 22781
// exit ;
22779: GO 22807
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22781: LD_VAR 0 1
22785: PUSH
22786: LD_INT 1
22788: PPUSH
22789: LD_VAR 0 1
22793: PPUSH
22794: CALL_OW 12
22798: ARRAY
22799: PPUSH
22800: LD_INT 1
22802: PPUSH
22803: CALL_OW 234
// end ;
22807: PPOPN 1
22809: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
22810: LD_EXP 32
22814: PUSH
22815: LD_EXP 74
22819: AND
22820: IFFALSE 22961
22822: GO 22824
22824: DISABLE
22825: LD_INT 0
22827: PPUSH
22828: PPUSH
22829: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22830: LD_ADDR_VAR 0 3
22834: PUSH
22835: LD_INT 22
22837: PUSH
22838: LD_OWVAR 2
22842: PUSH
22843: EMPTY
22844: LIST
22845: LIST
22846: PUSH
22847: LD_INT 25
22849: PUSH
22850: LD_INT 1
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: PPUSH
22861: CALL_OW 69
22865: ST_TO_ADDR
// if not tmp then
22866: LD_VAR 0 3
22870: NOT
22871: IFFALSE 22875
// exit ;
22873: GO 22961
// un := tmp [ rand ( 1 , tmp ) ] ;
22875: LD_ADDR_VAR 0 2
22879: PUSH
22880: LD_VAR 0 3
22884: PUSH
22885: LD_INT 1
22887: PPUSH
22888: LD_VAR 0 3
22892: PPUSH
22893: CALL_OW 12
22897: ARRAY
22898: ST_TO_ADDR
// if Crawls ( un ) then
22899: LD_VAR 0 2
22903: PPUSH
22904: CALL_OW 318
22908: IFFALSE 22919
// ComWalk ( un ) ;
22910: LD_VAR 0 2
22914: PPUSH
22915: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
22919: LD_VAR 0 2
22923: PPUSH
22924: LD_INT 9
22926: PPUSH
22927: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
22931: LD_INT 28
22933: PPUSH
22934: LD_OWVAR 2
22938: PPUSH
22939: LD_INT 2
22941: PPUSH
22942: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
22946: LD_INT 29
22948: PPUSH
22949: LD_OWVAR 2
22953: PPUSH
22954: LD_INT 2
22956: PPUSH
22957: CALL_OW 322
// end ;
22961: PPOPN 3
22963: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
22964: LD_EXP 32
22968: PUSH
22969: LD_EXP 75
22973: AND
22974: IFFALSE 23085
22976: GO 22978
22978: DISABLE
22979: LD_INT 0
22981: PPUSH
22982: PPUSH
22983: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22984: LD_ADDR_VAR 0 3
22988: PUSH
22989: LD_INT 22
22991: PUSH
22992: LD_OWVAR 2
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: PUSH
23001: LD_INT 25
23003: PUSH
23004: LD_INT 1
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: PUSH
23011: EMPTY
23012: LIST
23013: LIST
23014: PPUSH
23015: CALL_OW 69
23019: ST_TO_ADDR
// if not tmp then
23020: LD_VAR 0 3
23024: NOT
23025: IFFALSE 23029
// exit ;
23027: GO 23085
// un := tmp [ rand ( 1 , tmp ) ] ;
23029: LD_ADDR_VAR 0 2
23033: PUSH
23034: LD_VAR 0 3
23038: PUSH
23039: LD_INT 1
23041: PPUSH
23042: LD_VAR 0 3
23046: PPUSH
23047: CALL_OW 12
23051: ARRAY
23052: ST_TO_ADDR
// if Crawls ( un ) then
23053: LD_VAR 0 2
23057: PPUSH
23058: CALL_OW 318
23062: IFFALSE 23073
// ComWalk ( un ) ;
23064: LD_VAR 0 2
23068: PPUSH
23069: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23073: LD_VAR 0 2
23077: PPUSH
23078: LD_INT 8
23080: PPUSH
23081: CALL_OW 336
// end ;
23085: PPOPN 3
23087: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
23088: LD_EXP 32
23092: PUSH
23093: LD_EXP 76
23097: AND
23098: IFFALSE 23242
23100: GO 23102
23102: DISABLE
23103: LD_INT 0
23105: PPUSH
23106: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
23107: LD_ADDR_VAR 0 2
23111: PUSH
23112: LD_INT 22
23114: PUSH
23115: LD_OWVAR 2
23119: PUSH
23120: EMPTY
23121: LIST
23122: LIST
23123: PUSH
23124: LD_INT 21
23126: PUSH
23127: LD_INT 2
23129: PUSH
23130: EMPTY
23131: LIST
23132: LIST
23133: PUSH
23134: LD_INT 2
23136: PUSH
23137: LD_INT 34
23139: PUSH
23140: LD_INT 12
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: PUSH
23147: LD_INT 34
23149: PUSH
23150: LD_INT 51
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: PUSH
23157: LD_INT 34
23159: PUSH
23160: LD_INT 32
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: LIST
23177: PPUSH
23178: CALL_OW 69
23182: ST_TO_ADDR
// if not tmp then
23183: LD_VAR 0 2
23187: NOT
23188: IFFALSE 23192
// exit ;
23190: GO 23242
// for i in tmp do
23192: LD_ADDR_VAR 0 1
23196: PUSH
23197: LD_VAR 0 2
23201: PUSH
23202: FOR_IN
23203: IFFALSE 23240
// if GetCargo ( i , mat_artifact ) = 0 then
23205: LD_VAR 0 1
23209: PPUSH
23210: LD_INT 4
23212: PPUSH
23213: CALL_OW 289
23217: PUSH
23218: LD_INT 0
23220: EQUAL
23221: IFFALSE 23238
// SetCargo ( i , mat_siberit , 100 ) ;
23223: LD_VAR 0 1
23227: PPUSH
23228: LD_INT 3
23230: PPUSH
23231: LD_INT 100
23233: PPUSH
23234: CALL_OW 290
23238: GO 23202
23240: POP
23241: POP
// end ;
23242: PPOPN 2
23244: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
23245: LD_EXP 32
23249: PUSH
23250: LD_EXP 77
23254: AND
23255: IFFALSE 23438
23257: GO 23259
23259: DISABLE
23260: LD_INT 0
23262: PPUSH
23263: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23264: LD_ADDR_VAR 0 2
23268: PUSH
23269: LD_INT 22
23271: PUSH
23272: LD_OWVAR 2
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: PPUSH
23281: CALL_OW 69
23285: ST_TO_ADDR
// if not tmp then
23286: LD_VAR 0 2
23290: NOT
23291: IFFALSE 23295
// exit ;
23293: GO 23438
// for i := 1 to 2 do
23295: LD_ADDR_VAR 0 1
23299: PUSH
23300: DOUBLE
23301: LD_INT 1
23303: DEC
23304: ST_TO_ADDR
23305: LD_INT 2
23307: PUSH
23308: FOR_TO
23309: IFFALSE 23436
// begin uc_side := your_side ;
23311: LD_ADDR_OWVAR 20
23315: PUSH
23316: LD_OWVAR 2
23320: ST_TO_ADDR
// uc_nation := nation_american ;
23321: LD_ADDR_OWVAR 21
23325: PUSH
23326: LD_INT 1
23328: ST_TO_ADDR
// vc_chassis := us_morphling ;
23329: LD_ADDR_OWVAR 37
23333: PUSH
23334: LD_INT 5
23336: ST_TO_ADDR
// vc_engine := engine_siberite ;
23337: LD_ADDR_OWVAR 39
23341: PUSH
23342: LD_INT 3
23344: ST_TO_ADDR
// vc_control := control_computer ;
23345: LD_ADDR_OWVAR 38
23349: PUSH
23350: LD_INT 3
23352: ST_TO_ADDR
// vc_weapon := us_double_laser ;
23353: LD_ADDR_OWVAR 40
23357: PUSH
23358: LD_INT 10
23360: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
23361: LD_VAR 0 2
23365: PUSH
23366: LD_INT 1
23368: ARRAY
23369: PPUSH
23370: CALL_OW 310
23374: NOT
23375: IFFALSE 23422
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
23377: CALL_OW 45
23381: PPUSH
23382: LD_VAR 0 2
23386: PUSH
23387: LD_INT 1
23389: ARRAY
23390: PPUSH
23391: CALL_OW 250
23395: PPUSH
23396: LD_VAR 0 2
23400: PUSH
23401: LD_INT 1
23403: ARRAY
23404: PPUSH
23405: CALL_OW 251
23409: PPUSH
23410: LD_INT 12
23412: PPUSH
23413: LD_INT 1
23415: PPUSH
23416: CALL_OW 50
23420: GO 23434
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
23422: CALL_OW 45
23426: PPUSH
23427: LD_INT 1
23429: PPUSH
23430: CALL_OW 51
// end ;
23434: GO 23308
23436: POP
23437: POP
// end ;
23438: PPOPN 2
23440: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
23441: LD_EXP 32
23445: PUSH
23446: LD_EXP 78
23450: AND
23451: IFFALSE 23673
23453: GO 23455
23455: DISABLE
23456: LD_INT 0
23458: PPUSH
23459: PPUSH
23460: PPUSH
23461: PPUSH
23462: PPUSH
23463: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23464: LD_ADDR_VAR 0 6
23468: PUSH
23469: LD_INT 22
23471: PUSH
23472: LD_OWVAR 2
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: PUSH
23481: LD_INT 21
23483: PUSH
23484: LD_INT 1
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: PUSH
23491: LD_INT 3
23493: PUSH
23494: LD_INT 23
23496: PUSH
23497: LD_INT 0
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: LIST
23512: PPUSH
23513: CALL_OW 69
23517: ST_TO_ADDR
// if not tmp then
23518: LD_VAR 0 6
23522: NOT
23523: IFFALSE 23527
// exit ;
23525: GO 23673
// s1 := rand ( 1 , 4 ) ;
23527: LD_ADDR_VAR 0 2
23531: PUSH
23532: LD_INT 1
23534: PPUSH
23535: LD_INT 4
23537: PPUSH
23538: CALL_OW 12
23542: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
23543: LD_ADDR_VAR 0 4
23547: PUSH
23548: LD_VAR 0 6
23552: PUSH
23553: LD_INT 1
23555: ARRAY
23556: PPUSH
23557: LD_VAR 0 2
23561: PPUSH
23562: CALL_OW 259
23566: ST_TO_ADDR
// if s1 = 1 then
23567: LD_VAR 0 2
23571: PUSH
23572: LD_INT 1
23574: EQUAL
23575: IFFALSE 23595
// s2 := rand ( 2 , 4 ) else
23577: LD_ADDR_VAR 0 3
23581: PUSH
23582: LD_INT 2
23584: PPUSH
23585: LD_INT 4
23587: PPUSH
23588: CALL_OW 12
23592: ST_TO_ADDR
23593: GO 23603
// s2 := 1 ;
23595: LD_ADDR_VAR 0 3
23599: PUSH
23600: LD_INT 1
23602: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
23603: LD_ADDR_VAR 0 5
23607: PUSH
23608: LD_VAR 0 6
23612: PUSH
23613: LD_INT 1
23615: ARRAY
23616: PPUSH
23617: LD_VAR 0 3
23621: PPUSH
23622: CALL_OW 259
23626: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
23627: LD_VAR 0 6
23631: PUSH
23632: LD_INT 1
23634: ARRAY
23635: PPUSH
23636: LD_VAR 0 2
23640: PPUSH
23641: LD_VAR 0 5
23645: PPUSH
23646: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
23650: LD_VAR 0 6
23654: PUSH
23655: LD_INT 1
23657: ARRAY
23658: PPUSH
23659: LD_VAR 0 3
23663: PPUSH
23664: LD_VAR 0 4
23668: PPUSH
23669: CALL_OW 237
// end ;
23673: PPOPN 6
23675: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
23676: LD_EXP 32
23680: PUSH
23681: LD_EXP 79
23685: AND
23686: IFFALSE 23765
23688: GO 23690
23690: DISABLE
23691: LD_INT 0
23693: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
23694: LD_ADDR_VAR 0 1
23698: PUSH
23699: LD_INT 22
23701: PUSH
23702: LD_OWVAR 2
23706: PUSH
23707: EMPTY
23708: LIST
23709: LIST
23710: PUSH
23711: LD_INT 30
23713: PUSH
23714: LD_INT 3
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: PPUSH
23725: CALL_OW 69
23729: ST_TO_ADDR
// if not tmp then
23730: LD_VAR 0 1
23734: NOT
23735: IFFALSE 23739
// exit ;
23737: GO 23765
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23739: LD_VAR 0 1
23743: PUSH
23744: LD_INT 1
23746: PPUSH
23747: LD_VAR 0 1
23751: PPUSH
23752: CALL_OW 12
23756: ARRAY
23757: PPUSH
23758: LD_INT 1
23760: PPUSH
23761: CALL_OW 234
// end ;
23765: PPOPN 1
23767: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
23768: LD_EXP 32
23772: PUSH
23773: LD_EXP 80
23777: AND
23778: IFFALSE 23890
23780: GO 23782
23782: DISABLE
23783: LD_INT 0
23785: PPUSH
23786: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
23787: LD_ADDR_VAR 0 2
23791: PUSH
23792: LD_INT 22
23794: PUSH
23795: LD_OWVAR 2
23799: PUSH
23800: EMPTY
23801: LIST
23802: LIST
23803: PUSH
23804: LD_INT 2
23806: PUSH
23807: LD_INT 30
23809: PUSH
23810: LD_INT 27
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: PUSH
23817: LD_INT 30
23819: PUSH
23820: LD_INT 26
23822: PUSH
23823: EMPTY
23824: LIST
23825: LIST
23826: PUSH
23827: LD_INT 30
23829: PUSH
23830: LD_INT 28
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: PUSH
23837: EMPTY
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: PPUSH
23847: CALL_OW 69
23851: ST_TO_ADDR
// if not tmp then
23852: LD_VAR 0 2
23856: NOT
23857: IFFALSE 23861
// exit ;
23859: GO 23890
// for i in tmp do
23861: LD_ADDR_VAR 0 1
23865: PUSH
23866: LD_VAR 0 2
23870: PUSH
23871: FOR_IN
23872: IFFALSE 23888
// SetLives ( i , 1 ) ;
23874: LD_VAR 0 1
23878: PPUSH
23879: LD_INT 1
23881: PPUSH
23882: CALL_OW 234
23886: GO 23871
23888: POP
23889: POP
// end ;
23890: PPOPN 2
23892: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
23893: LD_EXP 32
23897: PUSH
23898: LD_EXP 81
23902: AND
23903: IFFALSE 24190
23905: GO 23907
23907: DISABLE
23908: LD_INT 0
23910: PPUSH
23911: PPUSH
23912: PPUSH
// begin i := rand ( 1 , 7 ) ;
23913: LD_ADDR_VAR 0 1
23917: PUSH
23918: LD_INT 1
23920: PPUSH
23921: LD_INT 7
23923: PPUSH
23924: CALL_OW 12
23928: ST_TO_ADDR
// case i of 1 :
23929: LD_VAR 0 1
23933: PUSH
23934: LD_INT 1
23936: DOUBLE
23937: EQUAL
23938: IFTRUE 23942
23940: GO 23952
23942: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
23943: LD_STRING earthquake(getX(game), 0, 32)
23945: PPUSH
23946: CALL_OW 559
23950: GO 24190
23952: LD_INT 2
23954: DOUBLE
23955: EQUAL
23956: IFTRUE 23960
23958: GO 23974
23960: POP
// begin ToLua ( displayStucuk(); ) ;
23961: LD_STRING displayStucuk();
23963: PPUSH
23964: CALL_OW 559
// ResetFog ;
23968: CALL_OW 335
// end ; 3 :
23972: GO 24190
23974: LD_INT 3
23976: DOUBLE
23977: EQUAL
23978: IFTRUE 23982
23980: GO 24086
23982: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23983: LD_ADDR_VAR 0 2
23987: PUSH
23988: LD_INT 22
23990: PUSH
23991: LD_OWVAR 2
23995: PUSH
23996: EMPTY
23997: LIST
23998: LIST
23999: PUSH
24000: LD_INT 25
24002: PUSH
24003: LD_INT 1
24005: PUSH
24006: EMPTY
24007: LIST
24008: LIST
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: PPUSH
24014: CALL_OW 69
24018: ST_TO_ADDR
// if not tmp then
24019: LD_VAR 0 2
24023: NOT
24024: IFFALSE 24028
// exit ;
24026: GO 24190
// un := tmp [ rand ( 1 , tmp ) ] ;
24028: LD_ADDR_VAR 0 3
24032: PUSH
24033: LD_VAR 0 2
24037: PUSH
24038: LD_INT 1
24040: PPUSH
24041: LD_VAR 0 2
24045: PPUSH
24046: CALL_OW 12
24050: ARRAY
24051: ST_TO_ADDR
// if Crawls ( un ) then
24052: LD_VAR 0 3
24056: PPUSH
24057: CALL_OW 318
24061: IFFALSE 24072
// ComWalk ( un ) ;
24063: LD_VAR 0 3
24067: PPUSH
24068: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24072: LD_VAR 0 3
24076: PPUSH
24077: LD_INT 8
24079: PPUSH
24080: CALL_OW 336
// end ; 4 :
24084: GO 24190
24086: LD_INT 4
24088: DOUBLE
24089: EQUAL
24090: IFTRUE 24094
24092: GO 24168
24094: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24095: LD_ADDR_VAR 0 2
24099: PUSH
24100: LD_INT 22
24102: PUSH
24103: LD_OWVAR 2
24107: PUSH
24108: EMPTY
24109: LIST
24110: LIST
24111: PUSH
24112: LD_INT 30
24114: PUSH
24115: LD_INT 29
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: PPUSH
24126: CALL_OW 69
24130: ST_TO_ADDR
// if not tmp then
24131: LD_VAR 0 2
24135: NOT
24136: IFFALSE 24140
// exit ;
24138: GO 24190
// CenterNowOnUnits ( tmp [ 1 ] ) ;
24140: LD_VAR 0 2
24144: PUSH
24145: LD_INT 1
24147: ARRAY
24148: PPUSH
24149: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
24153: LD_VAR 0 2
24157: PUSH
24158: LD_INT 1
24160: ARRAY
24161: PPUSH
24162: CALL_OW 65
// end ; 5 .. 7 :
24166: GO 24190
24168: LD_INT 5
24170: DOUBLE
24171: GREATEREQUAL
24172: IFFALSE 24180
24174: LD_INT 7
24176: DOUBLE
24177: LESSEQUAL
24178: IFTRUE 24182
24180: GO 24189
24182: POP
// StreamSibBomb ; end ;
24183: CALL 20427 0 0
24187: GO 24190
24189: POP
// end ;
24190: PPOPN 3
24192: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
24193: LD_EXP 32
24197: PUSH
24198: LD_EXP 82
24202: AND
24203: IFFALSE 24359
24205: GO 24207
24207: DISABLE
24208: LD_INT 0
24210: PPUSH
24211: PPUSH
24212: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
24213: LD_ADDR_VAR 0 2
24217: PUSH
24218: LD_INT 81
24220: PUSH
24221: LD_OWVAR 2
24225: PUSH
24226: EMPTY
24227: LIST
24228: LIST
24229: PUSH
24230: LD_INT 2
24232: PUSH
24233: LD_INT 21
24235: PUSH
24236: LD_INT 1
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: PUSH
24243: LD_INT 21
24245: PUSH
24246: LD_INT 2
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: PUSH
24253: EMPTY
24254: LIST
24255: LIST
24256: LIST
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: PPUSH
24262: CALL_OW 69
24266: ST_TO_ADDR
// if not tmp then
24267: LD_VAR 0 2
24271: NOT
24272: IFFALSE 24276
// exit ;
24274: GO 24359
// p := 0 ;
24276: LD_ADDR_VAR 0 3
24280: PUSH
24281: LD_INT 0
24283: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24284: LD_INT 35
24286: PPUSH
24287: CALL_OW 67
// p := p + 1 ;
24291: LD_ADDR_VAR 0 3
24295: PUSH
24296: LD_VAR 0 3
24300: PUSH
24301: LD_INT 1
24303: PLUS
24304: ST_TO_ADDR
// for i in tmp do
24305: LD_ADDR_VAR 0 1
24309: PUSH
24310: LD_VAR 0 2
24314: PUSH
24315: FOR_IN
24316: IFFALSE 24347
// if GetLives ( i ) < 1000 then
24318: LD_VAR 0 1
24322: PPUSH
24323: CALL_OW 256
24327: PUSH
24328: LD_INT 1000
24330: LESS
24331: IFFALSE 24345
// SetLives ( i , 1000 ) ;
24333: LD_VAR 0 1
24337: PPUSH
24338: LD_INT 1000
24340: PPUSH
24341: CALL_OW 234
24345: GO 24315
24347: POP
24348: POP
// until p > 20 ;
24349: LD_VAR 0 3
24353: PUSH
24354: LD_INT 20
24356: GREATER
24357: IFFALSE 24284
// end ;
24359: PPOPN 3
24361: END
// every 0 0$1 trigger StreamModeActive and sTime do
24362: LD_EXP 32
24366: PUSH
24367: LD_EXP 83
24371: AND
24372: IFFALSE 24407
24374: GO 24376
24376: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
24377: LD_INT 28
24379: PPUSH
24380: LD_OWVAR 2
24384: PPUSH
24385: LD_INT 2
24387: PPUSH
24388: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
24392: LD_INT 30
24394: PPUSH
24395: LD_OWVAR 2
24399: PPUSH
24400: LD_INT 2
24402: PPUSH
24403: CALL_OW 322
// end ;
24407: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
24408: LD_EXP 32
24412: PUSH
24413: LD_EXP 84
24417: AND
24418: IFFALSE 24539
24420: GO 24422
24422: DISABLE
24423: LD_INT 0
24425: PPUSH
24426: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24427: LD_ADDR_VAR 0 2
24431: PUSH
24432: LD_INT 22
24434: PUSH
24435: LD_OWVAR 2
24439: PUSH
24440: EMPTY
24441: LIST
24442: LIST
24443: PUSH
24444: LD_INT 21
24446: PUSH
24447: LD_INT 1
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: PUSH
24454: LD_INT 3
24456: PUSH
24457: LD_INT 23
24459: PUSH
24460: LD_INT 0
24462: PUSH
24463: EMPTY
24464: LIST
24465: LIST
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: LIST
24475: PPUSH
24476: CALL_OW 69
24480: ST_TO_ADDR
// if not tmp then
24481: LD_VAR 0 2
24485: NOT
24486: IFFALSE 24490
// exit ;
24488: GO 24539
// for i in tmp do
24490: LD_ADDR_VAR 0 1
24494: PUSH
24495: LD_VAR 0 2
24499: PUSH
24500: FOR_IN
24501: IFFALSE 24537
// begin if Crawls ( i ) then
24503: LD_VAR 0 1
24507: PPUSH
24508: CALL_OW 318
24512: IFFALSE 24523
// ComWalk ( i ) ;
24514: LD_VAR 0 1
24518: PPUSH
24519: CALL_OW 138
// SetClass ( i , 2 ) ;
24523: LD_VAR 0 1
24527: PPUSH
24528: LD_INT 2
24530: PPUSH
24531: CALL_OW 336
// end ;
24535: GO 24500
24537: POP
24538: POP
// end ;
24539: PPOPN 2
24541: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
24542: LD_EXP 32
24546: PUSH
24547: LD_EXP 85
24551: AND
24552: IFFALSE 24840
24554: GO 24556
24556: DISABLE
24557: LD_INT 0
24559: PPUSH
24560: PPUSH
24561: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
24562: LD_OWVAR 2
24566: PPUSH
24567: LD_INT 9
24569: PPUSH
24570: LD_INT 1
24572: PPUSH
24573: LD_INT 1
24575: PPUSH
24576: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
24580: LD_INT 9
24582: PPUSH
24583: LD_OWVAR 2
24587: PPUSH
24588: CALL_OW 343
// uc_side := 9 ;
24592: LD_ADDR_OWVAR 20
24596: PUSH
24597: LD_INT 9
24599: ST_TO_ADDR
// uc_nation := 2 ;
24600: LD_ADDR_OWVAR 21
24604: PUSH
24605: LD_INT 2
24607: ST_TO_ADDR
// hc_name := Dark Warrior ;
24608: LD_ADDR_OWVAR 26
24612: PUSH
24613: LD_STRING Dark Warrior
24615: ST_TO_ADDR
// hc_gallery :=  ;
24616: LD_ADDR_OWVAR 33
24620: PUSH
24621: LD_STRING 
24623: ST_TO_ADDR
// hc_noskilllimit := true ;
24624: LD_ADDR_OWVAR 76
24628: PUSH
24629: LD_INT 1
24631: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
24632: LD_ADDR_OWVAR 31
24636: PUSH
24637: LD_INT 30
24639: PUSH
24640: LD_INT 30
24642: PUSH
24643: LD_INT 30
24645: PUSH
24646: LD_INT 30
24648: PUSH
24649: EMPTY
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: ST_TO_ADDR
// un := CreateHuman ;
24655: LD_ADDR_VAR 0 3
24659: PUSH
24660: CALL_OW 44
24664: ST_TO_ADDR
// hc_noskilllimit := false ;
24665: LD_ADDR_OWVAR 76
24669: PUSH
24670: LD_INT 0
24672: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24673: LD_VAR 0 3
24677: PPUSH
24678: LD_INT 1
24680: PPUSH
24681: CALL_OW 51
// ToLua ( playRanger() ) ;
24685: LD_STRING playRanger()
24687: PPUSH
24688: CALL_OW 559
// p := 0 ;
24692: LD_ADDR_VAR 0 2
24696: PUSH
24697: LD_INT 0
24699: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24700: LD_INT 35
24702: PPUSH
24703: CALL_OW 67
// p := p + 1 ;
24707: LD_ADDR_VAR 0 2
24711: PUSH
24712: LD_VAR 0 2
24716: PUSH
24717: LD_INT 1
24719: PLUS
24720: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
24721: LD_VAR 0 3
24725: PPUSH
24726: CALL_OW 256
24730: PUSH
24731: LD_INT 1000
24733: LESS
24734: IFFALSE 24748
// SetLives ( un , 1000 ) ;
24736: LD_VAR 0 3
24740: PPUSH
24741: LD_INT 1000
24743: PPUSH
24744: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
24748: LD_VAR 0 3
24752: PPUSH
24753: LD_INT 81
24755: PUSH
24756: LD_OWVAR 2
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: PUSH
24765: LD_INT 91
24767: PUSH
24768: LD_VAR 0 3
24772: PUSH
24773: LD_INT 30
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: LIST
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: PPUSH
24785: CALL_OW 69
24789: PPUSH
24790: LD_VAR 0 3
24794: PPUSH
24795: CALL_OW 74
24799: PPUSH
24800: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
24804: LD_VAR 0 2
24808: PUSH
24809: LD_INT 80
24811: GREATER
24812: PUSH
24813: LD_VAR 0 3
24817: PPUSH
24818: CALL_OW 301
24822: OR
24823: IFFALSE 24700
// if un then
24825: LD_VAR 0 3
24829: IFFALSE 24840
// RemoveUnit ( un ) ;
24831: LD_VAR 0 3
24835: PPUSH
24836: CALL_OW 64
// end ;
24840: PPOPN 3
24842: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
24843: LD_EXP 86
24847: IFFALSE 24963
24849: GO 24851
24851: DISABLE
24852: LD_INT 0
24854: PPUSH
24855: PPUSH
24856: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24857: LD_ADDR_VAR 0 2
24861: PUSH
24862: LD_INT 81
24864: PUSH
24865: LD_OWVAR 2
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: PUSH
24874: LD_INT 21
24876: PUSH
24877: LD_INT 1
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PPUSH
24888: CALL_OW 69
24892: ST_TO_ADDR
// ToLua ( playComputer() ) ;
24893: LD_STRING playComputer()
24895: PPUSH
24896: CALL_OW 559
// if not tmp then
24900: LD_VAR 0 2
24904: NOT
24905: IFFALSE 24909
// exit ;
24907: GO 24963
// for i in tmp do
24909: LD_ADDR_VAR 0 1
24913: PUSH
24914: LD_VAR 0 2
24918: PUSH
24919: FOR_IN
24920: IFFALSE 24961
// for j := 1 to 4 do
24922: LD_ADDR_VAR 0 3
24926: PUSH
24927: DOUBLE
24928: LD_INT 1
24930: DEC
24931: ST_TO_ADDR
24932: LD_INT 4
24934: PUSH
24935: FOR_TO
24936: IFFALSE 24957
// SetSkill ( i , j , 10 ) ;
24938: LD_VAR 0 1
24942: PPUSH
24943: LD_VAR 0 3
24947: PPUSH
24948: LD_INT 10
24950: PPUSH
24951: CALL_OW 237
24955: GO 24935
24957: POP
24958: POP
24959: GO 24919
24961: POP
24962: POP
// end ;
24963: PPOPN 3
24965: END
// every 0 0$1 trigger s30 do var i , tmp ;
24966: LD_EXP 87
24970: IFFALSE 25039
24972: GO 24974
24974: DISABLE
24975: LD_INT 0
24977: PPUSH
24978: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24979: LD_ADDR_VAR 0 2
24983: PUSH
24984: LD_INT 22
24986: PUSH
24987: LD_OWVAR 2
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: PPUSH
24996: CALL_OW 69
25000: ST_TO_ADDR
// if not tmp then
25001: LD_VAR 0 2
25005: NOT
25006: IFFALSE 25010
// exit ;
25008: GO 25039
// for i in tmp do
25010: LD_ADDR_VAR 0 1
25014: PUSH
25015: LD_VAR 0 2
25019: PUSH
25020: FOR_IN
25021: IFFALSE 25037
// SetLives ( i , 300 ) ;
25023: LD_VAR 0 1
25027: PPUSH
25028: LD_INT 300
25030: PPUSH
25031: CALL_OW 234
25035: GO 25020
25037: POP
25038: POP
// end ;
25039: PPOPN 2
25041: END
// every 0 0$1 trigger s60 do var i , tmp ;
25042: LD_EXP 88
25046: IFFALSE 25115
25048: GO 25050
25050: DISABLE
25051: LD_INT 0
25053: PPUSH
25054: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25055: LD_ADDR_VAR 0 2
25059: PUSH
25060: LD_INT 22
25062: PUSH
25063: LD_OWVAR 2
25067: PUSH
25068: EMPTY
25069: LIST
25070: LIST
25071: PPUSH
25072: CALL_OW 69
25076: ST_TO_ADDR
// if not tmp then
25077: LD_VAR 0 2
25081: NOT
25082: IFFALSE 25086
// exit ;
25084: GO 25115
// for i in tmp do
25086: LD_ADDR_VAR 0 1
25090: PUSH
25091: LD_VAR 0 2
25095: PUSH
25096: FOR_IN
25097: IFFALSE 25113
// SetLives ( i , 600 ) ;
25099: LD_VAR 0 1
25103: PPUSH
25104: LD_INT 600
25106: PPUSH
25107: CALL_OW 234
25111: GO 25096
25113: POP
25114: POP
// end ;
25115: PPOPN 2
25117: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
25118: LD_INT 0
25120: PPUSH
// case cmd of 301 :
25121: LD_VAR 0 1
25125: PUSH
25126: LD_INT 301
25128: DOUBLE
25129: EQUAL
25130: IFTRUE 25134
25132: GO 25166
25134: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
25135: LD_VAR 0 6
25139: PPUSH
25140: LD_VAR 0 7
25144: PPUSH
25145: LD_VAR 0 8
25149: PPUSH
25150: LD_VAR 0 4
25154: PPUSH
25155: LD_VAR 0 5
25159: PPUSH
25160: CALL 26367 0 5
25164: GO 25287
25166: LD_INT 302
25168: DOUBLE
25169: EQUAL
25170: IFTRUE 25174
25172: GO 25211
25174: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
25175: LD_VAR 0 6
25179: PPUSH
25180: LD_VAR 0 7
25184: PPUSH
25185: LD_VAR 0 8
25189: PPUSH
25190: LD_VAR 0 9
25194: PPUSH
25195: LD_VAR 0 4
25199: PPUSH
25200: LD_VAR 0 5
25204: PPUSH
25205: CALL 26458 0 6
25209: GO 25287
25211: LD_INT 303
25213: DOUBLE
25214: EQUAL
25215: IFTRUE 25219
25217: GO 25256
25219: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
25220: LD_VAR 0 6
25224: PPUSH
25225: LD_VAR 0 7
25229: PPUSH
25230: LD_VAR 0 8
25234: PPUSH
25235: LD_VAR 0 9
25239: PPUSH
25240: LD_VAR 0 4
25244: PPUSH
25245: LD_VAR 0 5
25249: PPUSH
25250: CALL 25292 0 6
25254: GO 25287
25256: LD_INT 304
25258: DOUBLE
25259: EQUAL
25260: IFTRUE 25264
25262: GO 25286
25264: POP
// hHackTeleport ( unit , x , y ) ; end ;
25265: LD_VAR 0 2
25269: PPUSH
25270: LD_VAR 0 4
25274: PPUSH
25275: LD_VAR 0 5
25279: PPUSH
25280: CALL 27051 0 3
25284: GO 25287
25286: POP
// end ;
25287: LD_VAR 0 12
25291: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
25292: LD_INT 0
25294: PPUSH
25295: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
25296: LD_VAR 0 1
25300: PUSH
25301: LD_INT 1
25303: LESS
25304: PUSH
25305: LD_VAR 0 1
25309: PUSH
25310: LD_INT 3
25312: GREATER
25313: OR
25314: PUSH
25315: LD_VAR 0 5
25319: PPUSH
25320: LD_VAR 0 6
25324: PPUSH
25325: CALL_OW 428
25329: OR
25330: IFFALSE 25334
// exit ;
25332: GO 26054
// uc_side := your_side ;
25334: LD_ADDR_OWVAR 20
25338: PUSH
25339: LD_OWVAR 2
25343: ST_TO_ADDR
// uc_nation := nation ;
25344: LD_ADDR_OWVAR 21
25348: PUSH
25349: LD_VAR 0 1
25353: ST_TO_ADDR
// bc_level = 1 ;
25354: LD_ADDR_OWVAR 43
25358: PUSH
25359: LD_INT 1
25361: ST_TO_ADDR
// case btype of 1 :
25362: LD_VAR 0 2
25366: PUSH
25367: LD_INT 1
25369: DOUBLE
25370: EQUAL
25371: IFTRUE 25375
25373: GO 25386
25375: POP
// bc_type := b_depot ; 2 :
25376: LD_ADDR_OWVAR 42
25380: PUSH
25381: LD_INT 0
25383: ST_TO_ADDR
25384: GO 25998
25386: LD_INT 2
25388: DOUBLE
25389: EQUAL
25390: IFTRUE 25394
25392: GO 25405
25394: POP
// bc_type := b_warehouse ; 3 :
25395: LD_ADDR_OWVAR 42
25399: PUSH
25400: LD_INT 1
25402: ST_TO_ADDR
25403: GO 25998
25405: LD_INT 3
25407: DOUBLE
25408: EQUAL
25409: IFTRUE 25413
25411: GO 25424
25413: POP
// bc_type := b_lab ; 4 .. 9 :
25414: LD_ADDR_OWVAR 42
25418: PUSH
25419: LD_INT 6
25421: ST_TO_ADDR
25422: GO 25998
25424: LD_INT 4
25426: DOUBLE
25427: GREATEREQUAL
25428: IFFALSE 25436
25430: LD_INT 9
25432: DOUBLE
25433: LESSEQUAL
25434: IFTRUE 25438
25436: GO 25490
25438: POP
// begin bc_type := b_lab_half ;
25439: LD_ADDR_OWVAR 42
25443: PUSH
25444: LD_INT 7
25446: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
25447: LD_ADDR_OWVAR 44
25451: PUSH
25452: LD_INT 10
25454: PUSH
25455: LD_INT 11
25457: PUSH
25458: LD_INT 12
25460: PUSH
25461: LD_INT 15
25463: PUSH
25464: LD_INT 14
25466: PUSH
25467: LD_INT 13
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: PUSH
25478: LD_VAR 0 2
25482: PUSH
25483: LD_INT 3
25485: MINUS
25486: ARRAY
25487: ST_TO_ADDR
// end ; 10 .. 13 :
25488: GO 25998
25490: LD_INT 10
25492: DOUBLE
25493: GREATEREQUAL
25494: IFFALSE 25502
25496: LD_INT 13
25498: DOUBLE
25499: LESSEQUAL
25500: IFTRUE 25504
25502: GO 25581
25504: POP
// begin bc_type := b_lab_full ;
25505: LD_ADDR_OWVAR 42
25509: PUSH
25510: LD_INT 8
25512: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
25513: LD_ADDR_OWVAR 44
25517: PUSH
25518: LD_INT 10
25520: PUSH
25521: LD_INT 12
25523: PUSH
25524: LD_INT 14
25526: PUSH
25527: LD_INT 13
25529: PUSH
25530: EMPTY
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: PUSH
25536: LD_VAR 0 2
25540: PUSH
25541: LD_INT 9
25543: MINUS
25544: ARRAY
25545: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
25546: LD_ADDR_OWVAR 45
25550: PUSH
25551: LD_INT 11
25553: PUSH
25554: LD_INT 15
25556: PUSH
25557: LD_INT 12
25559: PUSH
25560: LD_INT 15
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: PUSH
25569: LD_VAR 0 2
25573: PUSH
25574: LD_INT 9
25576: MINUS
25577: ARRAY
25578: ST_TO_ADDR
// end ; 14 :
25579: GO 25998
25581: LD_INT 14
25583: DOUBLE
25584: EQUAL
25585: IFTRUE 25589
25587: GO 25600
25589: POP
// bc_type := b_workshop ; 15 :
25590: LD_ADDR_OWVAR 42
25594: PUSH
25595: LD_INT 2
25597: ST_TO_ADDR
25598: GO 25998
25600: LD_INT 15
25602: DOUBLE
25603: EQUAL
25604: IFTRUE 25608
25606: GO 25619
25608: POP
// bc_type := b_factory ; 16 :
25609: LD_ADDR_OWVAR 42
25613: PUSH
25614: LD_INT 3
25616: ST_TO_ADDR
25617: GO 25998
25619: LD_INT 16
25621: DOUBLE
25622: EQUAL
25623: IFTRUE 25627
25625: GO 25638
25627: POP
// bc_type := b_ext_gun ; 17 :
25628: LD_ADDR_OWVAR 42
25632: PUSH
25633: LD_INT 17
25635: ST_TO_ADDR
25636: GO 25998
25638: LD_INT 17
25640: DOUBLE
25641: EQUAL
25642: IFTRUE 25646
25644: GO 25674
25646: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
25647: LD_ADDR_OWVAR 42
25651: PUSH
25652: LD_INT 19
25654: PUSH
25655: LD_INT 23
25657: PUSH
25658: LD_INT 19
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: LIST
25665: PUSH
25666: LD_VAR 0 1
25670: ARRAY
25671: ST_TO_ADDR
25672: GO 25998
25674: LD_INT 18
25676: DOUBLE
25677: EQUAL
25678: IFTRUE 25682
25680: GO 25693
25682: POP
// bc_type := b_ext_radar ; 19 :
25683: LD_ADDR_OWVAR 42
25687: PUSH
25688: LD_INT 20
25690: ST_TO_ADDR
25691: GO 25998
25693: LD_INT 19
25695: DOUBLE
25696: EQUAL
25697: IFTRUE 25701
25699: GO 25712
25701: POP
// bc_type := b_ext_radio ; 20 :
25702: LD_ADDR_OWVAR 42
25706: PUSH
25707: LD_INT 22
25709: ST_TO_ADDR
25710: GO 25998
25712: LD_INT 20
25714: DOUBLE
25715: EQUAL
25716: IFTRUE 25720
25718: GO 25731
25720: POP
// bc_type := b_ext_siberium ; 21 :
25721: LD_ADDR_OWVAR 42
25725: PUSH
25726: LD_INT 21
25728: ST_TO_ADDR
25729: GO 25998
25731: LD_INT 21
25733: DOUBLE
25734: EQUAL
25735: IFTRUE 25739
25737: GO 25750
25739: POP
// bc_type := b_ext_computer ; 22 :
25740: LD_ADDR_OWVAR 42
25744: PUSH
25745: LD_INT 24
25747: ST_TO_ADDR
25748: GO 25998
25750: LD_INT 22
25752: DOUBLE
25753: EQUAL
25754: IFTRUE 25758
25756: GO 25769
25758: POP
// bc_type := b_ext_track ; 23 :
25759: LD_ADDR_OWVAR 42
25763: PUSH
25764: LD_INT 16
25766: ST_TO_ADDR
25767: GO 25998
25769: LD_INT 23
25771: DOUBLE
25772: EQUAL
25773: IFTRUE 25777
25775: GO 25788
25777: POP
// bc_type := b_ext_laser ; 24 :
25778: LD_ADDR_OWVAR 42
25782: PUSH
25783: LD_INT 25
25785: ST_TO_ADDR
25786: GO 25998
25788: LD_INT 24
25790: DOUBLE
25791: EQUAL
25792: IFTRUE 25796
25794: GO 25807
25796: POP
// bc_type := b_control_tower ; 25 :
25797: LD_ADDR_OWVAR 42
25801: PUSH
25802: LD_INT 36
25804: ST_TO_ADDR
25805: GO 25998
25807: LD_INT 25
25809: DOUBLE
25810: EQUAL
25811: IFTRUE 25815
25813: GO 25826
25815: POP
// bc_type := b_breastwork ; 26 :
25816: LD_ADDR_OWVAR 42
25820: PUSH
25821: LD_INT 31
25823: ST_TO_ADDR
25824: GO 25998
25826: LD_INT 26
25828: DOUBLE
25829: EQUAL
25830: IFTRUE 25834
25832: GO 25845
25834: POP
// bc_type := b_bunker ; 27 :
25835: LD_ADDR_OWVAR 42
25839: PUSH
25840: LD_INT 32
25842: ST_TO_ADDR
25843: GO 25998
25845: LD_INT 27
25847: DOUBLE
25848: EQUAL
25849: IFTRUE 25853
25851: GO 25864
25853: POP
// bc_type := b_turret ; 28 :
25854: LD_ADDR_OWVAR 42
25858: PUSH
25859: LD_INT 33
25861: ST_TO_ADDR
25862: GO 25998
25864: LD_INT 28
25866: DOUBLE
25867: EQUAL
25868: IFTRUE 25872
25870: GO 25883
25872: POP
// bc_type := b_armoury ; 29 :
25873: LD_ADDR_OWVAR 42
25877: PUSH
25878: LD_INT 4
25880: ST_TO_ADDR
25881: GO 25998
25883: LD_INT 29
25885: DOUBLE
25886: EQUAL
25887: IFTRUE 25891
25889: GO 25902
25891: POP
// bc_type := b_barracks ; 30 :
25892: LD_ADDR_OWVAR 42
25896: PUSH
25897: LD_INT 5
25899: ST_TO_ADDR
25900: GO 25998
25902: LD_INT 30
25904: DOUBLE
25905: EQUAL
25906: IFTRUE 25910
25908: GO 25921
25910: POP
// bc_type := b_solar_power ; 31 :
25911: LD_ADDR_OWVAR 42
25915: PUSH
25916: LD_INT 27
25918: ST_TO_ADDR
25919: GO 25998
25921: LD_INT 31
25923: DOUBLE
25924: EQUAL
25925: IFTRUE 25929
25927: GO 25940
25929: POP
// bc_type := b_oil_power ; 32 :
25930: LD_ADDR_OWVAR 42
25934: PUSH
25935: LD_INT 26
25937: ST_TO_ADDR
25938: GO 25998
25940: LD_INT 32
25942: DOUBLE
25943: EQUAL
25944: IFTRUE 25948
25946: GO 25959
25948: POP
// bc_type := b_siberite_power ; 33 :
25949: LD_ADDR_OWVAR 42
25953: PUSH
25954: LD_INT 28
25956: ST_TO_ADDR
25957: GO 25998
25959: LD_INT 33
25961: DOUBLE
25962: EQUAL
25963: IFTRUE 25967
25965: GO 25978
25967: POP
// bc_type := b_oil_mine ; 34 :
25968: LD_ADDR_OWVAR 42
25972: PUSH
25973: LD_INT 29
25975: ST_TO_ADDR
25976: GO 25998
25978: LD_INT 34
25980: DOUBLE
25981: EQUAL
25982: IFTRUE 25986
25984: GO 25997
25986: POP
// bc_type := b_siberite_mine ; end ;
25987: LD_ADDR_OWVAR 42
25991: PUSH
25992: LD_INT 30
25994: ST_TO_ADDR
25995: GO 25998
25997: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
25998: LD_ADDR_VAR 0 8
26002: PUSH
26003: LD_VAR 0 5
26007: PPUSH
26008: LD_VAR 0 6
26012: PPUSH
26013: LD_VAR 0 3
26017: PPUSH
26018: CALL_OW 47
26022: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
26023: LD_OWVAR 42
26027: PUSH
26028: LD_INT 32
26030: PUSH
26031: LD_INT 33
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: IN
26038: IFFALSE 26054
// PlaceWeaponTurret ( b , weapon ) ;
26040: LD_VAR 0 8
26044: PPUSH
26045: LD_VAR 0 4
26049: PPUSH
26050: CALL_OW 431
// end ;
26054: LD_VAR 0 7
26058: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
26059: LD_INT 0
26061: PPUSH
26062: PPUSH
26063: PPUSH
26064: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26065: LD_ADDR_VAR 0 4
26069: PUSH
26070: LD_INT 22
26072: PUSH
26073: LD_OWVAR 2
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: LD_INT 2
26084: PUSH
26085: LD_INT 30
26087: PUSH
26088: LD_INT 0
26090: PUSH
26091: EMPTY
26092: LIST
26093: LIST
26094: PUSH
26095: LD_INT 30
26097: PUSH
26098: LD_INT 1
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: LIST
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: PPUSH
26114: CALL_OW 69
26118: ST_TO_ADDR
// if not tmp then
26119: LD_VAR 0 4
26123: NOT
26124: IFFALSE 26128
// exit ;
26126: GO 26187
// for i in tmp do
26128: LD_ADDR_VAR 0 2
26132: PUSH
26133: LD_VAR 0 4
26137: PUSH
26138: FOR_IN
26139: IFFALSE 26185
// for j = 1 to 3 do
26141: LD_ADDR_VAR 0 3
26145: PUSH
26146: DOUBLE
26147: LD_INT 1
26149: DEC
26150: ST_TO_ADDR
26151: LD_INT 3
26153: PUSH
26154: FOR_TO
26155: IFFALSE 26181
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
26157: LD_VAR 0 2
26161: PPUSH
26162: CALL_OW 274
26166: PPUSH
26167: LD_VAR 0 3
26171: PPUSH
26172: LD_INT 99999
26174: PPUSH
26175: CALL_OW 277
26179: GO 26154
26181: POP
26182: POP
26183: GO 26138
26185: POP
26186: POP
// end ;
26187: LD_VAR 0 1
26191: RET
// export function hHackSetLevel10 ; var i , j ; begin
26192: LD_INT 0
26194: PPUSH
26195: PPUSH
26196: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26197: LD_ADDR_VAR 0 2
26201: PUSH
26202: LD_INT 21
26204: PUSH
26205: LD_INT 1
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PPUSH
26212: CALL_OW 69
26216: PUSH
26217: FOR_IN
26218: IFFALSE 26270
// if IsSelected ( i ) then
26220: LD_VAR 0 2
26224: PPUSH
26225: CALL_OW 306
26229: IFFALSE 26268
// begin for j := 1 to 4 do
26231: LD_ADDR_VAR 0 3
26235: PUSH
26236: DOUBLE
26237: LD_INT 1
26239: DEC
26240: ST_TO_ADDR
26241: LD_INT 4
26243: PUSH
26244: FOR_TO
26245: IFFALSE 26266
// SetSkill ( i , j , 10 ) ;
26247: LD_VAR 0 2
26251: PPUSH
26252: LD_VAR 0 3
26256: PPUSH
26257: LD_INT 10
26259: PPUSH
26260: CALL_OW 237
26264: GO 26244
26266: POP
26267: POP
// end ;
26268: GO 26217
26270: POP
26271: POP
// end ;
26272: LD_VAR 0 1
26276: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
26277: LD_INT 0
26279: PPUSH
26280: PPUSH
26281: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
26282: LD_ADDR_VAR 0 2
26286: PUSH
26287: LD_INT 22
26289: PUSH
26290: LD_OWVAR 2
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: PUSH
26299: LD_INT 21
26301: PUSH
26302: LD_INT 1
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PPUSH
26313: CALL_OW 69
26317: PUSH
26318: FOR_IN
26319: IFFALSE 26360
// begin for j := 1 to 4 do
26321: LD_ADDR_VAR 0 3
26325: PUSH
26326: DOUBLE
26327: LD_INT 1
26329: DEC
26330: ST_TO_ADDR
26331: LD_INT 4
26333: PUSH
26334: FOR_TO
26335: IFFALSE 26356
// SetSkill ( i , j , 10 ) ;
26337: LD_VAR 0 2
26341: PPUSH
26342: LD_VAR 0 3
26346: PPUSH
26347: LD_INT 10
26349: PPUSH
26350: CALL_OW 237
26354: GO 26334
26356: POP
26357: POP
// end ;
26358: GO 26318
26360: POP
26361: POP
// end ;
26362: LD_VAR 0 1
26366: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
26367: LD_INT 0
26369: PPUSH
// uc_side := your_side ;
26370: LD_ADDR_OWVAR 20
26374: PUSH
26375: LD_OWVAR 2
26379: ST_TO_ADDR
// uc_nation := nation ;
26380: LD_ADDR_OWVAR 21
26384: PUSH
26385: LD_VAR 0 1
26389: ST_TO_ADDR
// InitHc ;
26390: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
26394: LD_INT 0
26396: PPUSH
26397: LD_VAR 0 2
26401: PPUSH
26402: LD_VAR 0 3
26406: PPUSH
26407: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
26411: LD_VAR 0 4
26415: PPUSH
26416: LD_VAR 0 5
26420: PPUSH
26421: CALL_OW 428
26425: PUSH
26426: LD_INT 0
26428: EQUAL
26429: IFFALSE 26453
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
26431: CALL_OW 44
26435: PPUSH
26436: LD_VAR 0 4
26440: PPUSH
26441: LD_VAR 0 5
26445: PPUSH
26446: LD_INT 1
26448: PPUSH
26449: CALL_OW 48
// end ;
26453: LD_VAR 0 6
26457: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
26458: LD_INT 0
26460: PPUSH
26461: PPUSH
// uc_side := your_side ;
26462: LD_ADDR_OWVAR 20
26466: PUSH
26467: LD_OWVAR 2
26471: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
26472: LD_VAR 0 1
26476: PUSH
26477: LD_INT 1
26479: PUSH
26480: LD_INT 2
26482: PUSH
26483: LD_INT 3
26485: PUSH
26486: LD_INT 4
26488: PUSH
26489: LD_INT 5
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: IN
26499: IFFALSE 26511
// uc_nation := nation_american else
26501: LD_ADDR_OWVAR 21
26505: PUSH
26506: LD_INT 1
26508: ST_TO_ADDR
26509: GO 26554
// if chassis in [ 11 , 12 , 13 , 14 ] then
26511: LD_VAR 0 1
26515: PUSH
26516: LD_INT 11
26518: PUSH
26519: LD_INT 12
26521: PUSH
26522: LD_INT 13
26524: PUSH
26525: LD_INT 14
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: LIST
26532: LIST
26533: IN
26534: IFFALSE 26546
// uc_nation := nation_arabian else
26536: LD_ADDR_OWVAR 21
26540: PUSH
26541: LD_INT 2
26543: ST_TO_ADDR
26544: GO 26554
// uc_nation := nation_russian ;
26546: LD_ADDR_OWVAR 21
26550: PUSH
26551: LD_INT 3
26553: ST_TO_ADDR
// vc_chassis := chassis ;
26554: LD_ADDR_OWVAR 37
26558: PUSH
26559: LD_VAR 0 1
26563: ST_TO_ADDR
// vc_engine := engine ;
26564: LD_ADDR_OWVAR 39
26568: PUSH
26569: LD_VAR 0 2
26573: ST_TO_ADDR
// vc_control := control ;
26574: LD_ADDR_OWVAR 38
26578: PUSH
26579: LD_VAR 0 3
26583: ST_TO_ADDR
// vc_weapon := weapon ;
26584: LD_ADDR_OWVAR 40
26588: PUSH
26589: LD_VAR 0 4
26593: ST_TO_ADDR
// un := CreateVehicle ;
26594: LD_ADDR_VAR 0 8
26598: PUSH
26599: CALL_OW 45
26603: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
26604: LD_VAR 0 8
26608: PPUSH
26609: LD_INT 0
26611: PPUSH
26612: LD_INT 5
26614: PPUSH
26615: CALL_OW 12
26619: PPUSH
26620: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
26624: LD_VAR 0 8
26628: PPUSH
26629: LD_VAR 0 5
26633: PPUSH
26634: LD_VAR 0 6
26638: PPUSH
26639: LD_INT 1
26641: PPUSH
26642: CALL_OW 48
// end ;
26646: LD_VAR 0 7
26650: RET
// export hInvincible ; every 1 do
26651: GO 26653
26653: DISABLE
// hInvincible := [ ] ;
26654: LD_ADDR_EXP 89
26658: PUSH
26659: EMPTY
26660: ST_TO_ADDR
26661: END
// every 10 do var i ;
26662: GO 26664
26664: DISABLE
26665: LD_INT 0
26667: PPUSH
// begin enable ;
26668: ENABLE
// if not hInvincible then
26669: LD_EXP 89
26673: NOT
26674: IFFALSE 26678
// exit ;
26676: GO 26722
// for i in hInvincible do
26678: LD_ADDR_VAR 0 1
26682: PUSH
26683: LD_EXP 89
26687: PUSH
26688: FOR_IN
26689: IFFALSE 26720
// if GetLives ( i ) < 1000 then
26691: LD_VAR 0 1
26695: PPUSH
26696: CALL_OW 256
26700: PUSH
26701: LD_INT 1000
26703: LESS
26704: IFFALSE 26718
// SetLives ( i , 1000 ) ;
26706: LD_VAR 0 1
26710: PPUSH
26711: LD_INT 1000
26713: PPUSH
26714: CALL_OW 234
26718: GO 26688
26720: POP
26721: POP
// end ;
26722: PPOPN 1
26724: END
// export function hHackInvincible ; var i ; begin
26725: LD_INT 0
26727: PPUSH
26728: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
26729: LD_ADDR_VAR 0 2
26733: PUSH
26734: LD_INT 2
26736: PUSH
26737: LD_INT 21
26739: PUSH
26740: LD_INT 1
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: PUSH
26747: LD_INT 21
26749: PUSH
26750: LD_INT 2
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: LIST
26761: PPUSH
26762: CALL_OW 69
26766: PUSH
26767: FOR_IN
26768: IFFALSE 26829
// if IsSelected ( i ) then
26770: LD_VAR 0 2
26774: PPUSH
26775: CALL_OW 306
26779: IFFALSE 26827
// begin if i in hInvincible then
26781: LD_VAR 0 2
26785: PUSH
26786: LD_EXP 89
26790: IN
26791: IFFALSE 26811
// hInvincible := hInvincible diff i else
26793: LD_ADDR_EXP 89
26797: PUSH
26798: LD_EXP 89
26802: PUSH
26803: LD_VAR 0 2
26807: DIFF
26808: ST_TO_ADDR
26809: GO 26827
// hInvincible := hInvincible union i ;
26811: LD_ADDR_EXP 89
26815: PUSH
26816: LD_EXP 89
26820: PUSH
26821: LD_VAR 0 2
26825: UNION
26826: ST_TO_ADDR
// end ;
26827: GO 26767
26829: POP
26830: POP
// end ;
26831: LD_VAR 0 1
26835: RET
// export function hHackInvisible ; var i , j ; begin
26836: LD_INT 0
26838: PPUSH
26839: PPUSH
26840: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26841: LD_ADDR_VAR 0 2
26845: PUSH
26846: LD_INT 21
26848: PUSH
26849: LD_INT 1
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PPUSH
26856: CALL_OW 69
26860: PUSH
26861: FOR_IN
26862: IFFALSE 26886
// if IsSelected ( i ) then
26864: LD_VAR 0 2
26868: PPUSH
26869: CALL_OW 306
26873: IFFALSE 26884
// ComForceInvisible ( i ) ;
26875: LD_VAR 0 2
26879: PPUSH
26880: CALL_OW 496
26884: GO 26861
26886: POP
26887: POP
// end ;
26888: LD_VAR 0 1
26892: RET
// export function hHackChangeYourSide ; begin
26893: LD_INT 0
26895: PPUSH
// if your_side = 8 then
26896: LD_OWVAR 2
26900: PUSH
26901: LD_INT 8
26903: EQUAL
26904: IFFALSE 26916
// your_side := 0 else
26906: LD_ADDR_OWVAR 2
26910: PUSH
26911: LD_INT 0
26913: ST_TO_ADDR
26914: GO 26930
// your_side := your_side + 1 ;
26916: LD_ADDR_OWVAR 2
26920: PUSH
26921: LD_OWVAR 2
26925: PUSH
26926: LD_INT 1
26928: PLUS
26929: ST_TO_ADDR
// end ;
26930: LD_VAR 0 1
26934: RET
// export function hHackChangeUnitSide ; var i , j ; begin
26935: LD_INT 0
26937: PPUSH
26938: PPUSH
26939: PPUSH
// for i in all_units do
26940: LD_ADDR_VAR 0 2
26944: PUSH
26945: LD_OWVAR 3
26949: PUSH
26950: FOR_IN
26951: IFFALSE 27029
// if IsSelected ( i ) then
26953: LD_VAR 0 2
26957: PPUSH
26958: CALL_OW 306
26962: IFFALSE 27027
// begin j := GetSide ( i ) ;
26964: LD_ADDR_VAR 0 3
26968: PUSH
26969: LD_VAR 0 2
26973: PPUSH
26974: CALL_OW 255
26978: ST_TO_ADDR
// if j = 8 then
26979: LD_VAR 0 3
26983: PUSH
26984: LD_INT 8
26986: EQUAL
26987: IFFALSE 26999
// j := 0 else
26989: LD_ADDR_VAR 0 3
26993: PUSH
26994: LD_INT 0
26996: ST_TO_ADDR
26997: GO 27013
// j := j + 1 ;
26999: LD_ADDR_VAR 0 3
27003: PUSH
27004: LD_VAR 0 3
27008: PUSH
27009: LD_INT 1
27011: PLUS
27012: ST_TO_ADDR
// SetSide ( i , j ) ;
27013: LD_VAR 0 2
27017: PPUSH
27018: LD_VAR 0 3
27022: PPUSH
27023: CALL_OW 235
// end ;
27027: GO 26950
27029: POP
27030: POP
// end ;
27031: LD_VAR 0 1
27035: RET
// export function hHackFog ; begin
27036: LD_INT 0
27038: PPUSH
// FogOff ( true ) ;
27039: LD_INT 1
27041: PPUSH
27042: CALL_OW 344
// end ;
27046: LD_VAR 0 1
27050: RET
// export function hHackTeleport ( unit , x , y ) ; begin
27051: LD_INT 0
27053: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
27054: LD_VAR 0 1
27058: PPUSH
27059: LD_VAR 0 2
27063: PPUSH
27064: LD_VAR 0 3
27068: PPUSH
27069: LD_INT 1
27071: PPUSH
27072: LD_INT 1
27074: PPUSH
27075: CALL_OW 483
// CenterOnXY ( x , y ) ;
27079: LD_VAR 0 2
27083: PPUSH
27084: LD_VAR 0 3
27088: PPUSH
27089: CALL_OW 84
// end ;
27093: LD_VAR 0 4
27097: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
27098: LD_INT 0
27100: PPUSH
27101: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
27102: LD_VAR 0 1
27106: NOT
27107: PUSH
27108: LD_VAR 0 2
27112: PPUSH
27113: LD_VAR 0 3
27117: PPUSH
27118: CALL_OW 488
27122: NOT
27123: OR
27124: PUSH
27125: LD_VAR 0 1
27129: PPUSH
27130: CALL_OW 266
27134: PUSH
27135: LD_INT 3
27137: NONEQUAL
27138: PUSH
27139: LD_VAR 0 1
27143: PPUSH
27144: CALL_OW 247
27148: PUSH
27149: LD_INT 1
27151: EQUAL
27152: NOT
27153: AND
27154: OR
27155: IFFALSE 27159
// exit ;
27157: GO 27308
// if GetType ( factory ) = unit_human then
27159: LD_VAR 0 1
27163: PPUSH
27164: CALL_OW 247
27168: PUSH
27169: LD_INT 1
27171: EQUAL
27172: IFFALSE 27189
// factory := IsInUnit ( factory ) ;
27174: LD_ADDR_VAR 0 1
27178: PUSH
27179: LD_VAR 0 1
27183: PPUSH
27184: CALL_OW 310
27188: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
27189: LD_VAR 0 1
27193: PPUSH
27194: CALL_OW 266
27198: PUSH
27199: LD_INT 3
27201: NONEQUAL
27202: IFFALSE 27206
// exit ;
27204: GO 27308
// if HexInfo ( x , y ) = factory then
27206: LD_VAR 0 2
27210: PPUSH
27211: LD_VAR 0 3
27215: PPUSH
27216: CALL_OW 428
27220: PUSH
27221: LD_VAR 0 1
27225: EQUAL
27226: IFFALSE 27253
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
27228: LD_ADDR_EXP 90
27232: PUSH
27233: LD_EXP 90
27237: PPUSH
27238: LD_VAR 0 1
27242: PPUSH
27243: LD_INT 0
27245: PPUSH
27246: CALL_OW 1
27250: ST_TO_ADDR
27251: GO 27304
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
27253: LD_ADDR_EXP 90
27257: PUSH
27258: LD_EXP 90
27262: PPUSH
27263: LD_VAR 0 1
27267: PPUSH
27268: LD_VAR 0 1
27272: PPUSH
27273: CALL_OW 255
27277: PUSH
27278: LD_VAR 0 1
27282: PUSH
27283: LD_VAR 0 2
27287: PUSH
27288: LD_VAR 0 3
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: PPUSH
27299: CALL_OW 1
27303: ST_TO_ADDR
// UpdateFactoryWaypoints ;
27304: CALL 27313 0 0
// end ;
27308: LD_VAR 0 4
27312: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
27313: LD_INT 0
27315: PPUSH
27316: PPUSH
27317: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
27318: LD_STRING resetFactoryWaypoint();
27320: PPUSH
27321: CALL_OW 559
// if factoryWaypoints then
27325: LD_EXP 90
27329: IFFALSE 27455
// begin list := PrepareArray ( factoryWaypoints ) ;
27331: LD_ADDR_VAR 0 3
27335: PUSH
27336: LD_EXP 90
27340: PPUSH
27341: CALL 73905 0 1
27345: ST_TO_ADDR
// for i := 1 to list do
27346: LD_ADDR_VAR 0 2
27350: PUSH
27351: DOUBLE
27352: LD_INT 1
27354: DEC
27355: ST_TO_ADDR
27356: LD_VAR 0 3
27360: PUSH
27361: FOR_TO
27362: IFFALSE 27453
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27364: LD_STRING setFactoryWaypointXY(
27366: PUSH
27367: LD_VAR 0 3
27371: PUSH
27372: LD_VAR 0 2
27376: ARRAY
27377: PUSH
27378: LD_INT 1
27380: ARRAY
27381: STR
27382: PUSH
27383: LD_STRING ,
27385: STR
27386: PUSH
27387: LD_VAR 0 3
27391: PUSH
27392: LD_VAR 0 2
27396: ARRAY
27397: PUSH
27398: LD_INT 2
27400: ARRAY
27401: STR
27402: PUSH
27403: LD_STRING ,
27405: STR
27406: PUSH
27407: LD_VAR 0 3
27411: PUSH
27412: LD_VAR 0 2
27416: ARRAY
27417: PUSH
27418: LD_INT 3
27420: ARRAY
27421: STR
27422: PUSH
27423: LD_STRING ,
27425: STR
27426: PUSH
27427: LD_VAR 0 3
27431: PUSH
27432: LD_VAR 0 2
27436: ARRAY
27437: PUSH
27438: LD_INT 4
27440: ARRAY
27441: STR
27442: PUSH
27443: LD_STRING )
27445: STR
27446: PPUSH
27447: CALL_OW 559
27451: GO 27361
27453: POP
27454: POP
// end ; end ;
27455: LD_VAR 0 1
27459: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
27460: LD_INT 0
27462: PPUSH
// if HexInfo ( x , y ) = warehouse then
27463: LD_VAR 0 2
27467: PPUSH
27468: LD_VAR 0 3
27472: PPUSH
27473: CALL_OW 428
27477: PUSH
27478: LD_VAR 0 1
27482: EQUAL
27483: IFFALSE 27510
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
27485: LD_ADDR_EXP 91
27489: PUSH
27490: LD_EXP 91
27494: PPUSH
27495: LD_VAR 0 1
27499: PPUSH
27500: LD_INT 0
27502: PPUSH
27503: CALL_OW 1
27507: ST_TO_ADDR
27508: GO 27561
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
27510: LD_ADDR_EXP 91
27514: PUSH
27515: LD_EXP 91
27519: PPUSH
27520: LD_VAR 0 1
27524: PPUSH
27525: LD_VAR 0 1
27529: PPUSH
27530: CALL_OW 255
27534: PUSH
27535: LD_VAR 0 1
27539: PUSH
27540: LD_VAR 0 2
27544: PUSH
27545: LD_VAR 0 3
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: PPUSH
27556: CALL_OW 1
27560: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
27561: CALL 27570 0 0
// end ;
27565: LD_VAR 0 4
27569: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
27570: LD_INT 0
27572: PPUSH
27573: PPUSH
27574: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
27575: LD_STRING resetWarehouseGatheringPoints();
27577: PPUSH
27578: CALL_OW 559
// if warehouseGatheringPoints then
27582: LD_EXP 91
27586: IFFALSE 27712
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
27588: LD_ADDR_VAR 0 3
27592: PUSH
27593: LD_EXP 91
27597: PPUSH
27598: CALL 73905 0 1
27602: ST_TO_ADDR
// for i := 1 to list do
27603: LD_ADDR_VAR 0 2
27607: PUSH
27608: DOUBLE
27609: LD_INT 1
27611: DEC
27612: ST_TO_ADDR
27613: LD_VAR 0 3
27617: PUSH
27618: FOR_TO
27619: IFFALSE 27710
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27621: LD_STRING setWarehouseGatheringPointXY(
27623: PUSH
27624: LD_VAR 0 3
27628: PUSH
27629: LD_VAR 0 2
27633: ARRAY
27634: PUSH
27635: LD_INT 1
27637: ARRAY
27638: STR
27639: PUSH
27640: LD_STRING ,
27642: STR
27643: PUSH
27644: LD_VAR 0 3
27648: PUSH
27649: LD_VAR 0 2
27653: ARRAY
27654: PUSH
27655: LD_INT 2
27657: ARRAY
27658: STR
27659: PUSH
27660: LD_STRING ,
27662: STR
27663: PUSH
27664: LD_VAR 0 3
27668: PUSH
27669: LD_VAR 0 2
27673: ARRAY
27674: PUSH
27675: LD_INT 3
27677: ARRAY
27678: STR
27679: PUSH
27680: LD_STRING ,
27682: STR
27683: PUSH
27684: LD_VAR 0 3
27688: PUSH
27689: LD_VAR 0 2
27693: ARRAY
27694: PUSH
27695: LD_INT 4
27697: ARRAY
27698: STR
27699: PUSH
27700: LD_STRING )
27702: STR
27703: PPUSH
27704: CALL_OW 559
27708: GO 27618
27710: POP
27711: POP
// end ; end ;
27712: LD_VAR 0 1
27716: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
27717: LD_EXP 91
27721: IFFALSE 28406
27723: GO 27725
27725: DISABLE
27726: LD_INT 0
27728: PPUSH
27729: PPUSH
27730: PPUSH
27731: PPUSH
27732: PPUSH
27733: PPUSH
27734: PPUSH
27735: PPUSH
27736: PPUSH
// begin enable ;
27737: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
27738: LD_ADDR_VAR 0 3
27742: PUSH
27743: LD_EXP 91
27747: PPUSH
27748: CALL 73905 0 1
27752: ST_TO_ADDR
// if not list then
27753: LD_VAR 0 3
27757: NOT
27758: IFFALSE 27762
// exit ;
27760: GO 28406
// for i := 1 to list do
27762: LD_ADDR_VAR 0 1
27766: PUSH
27767: DOUBLE
27768: LD_INT 1
27770: DEC
27771: ST_TO_ADDR
27772: LD_VAR 0 3
27776: PUSH
27777: FOR_TO
27778: IFFALSE 28404
// begin depot := list [ i ] [ 2 ] ;
27780: LD_ADDR_VAR 0 8
27784: PUSH
27785: LD_VAR 0 3
27789: PUSH
27790: LD_VAR 0 1
27794: ARRAY
27795: PUSH
27796: LD_INT 2
27798: ARRAY
27799: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
27800: LD_ADDR_VAR 0 5
27804: PUSH
27805: LD_VAR 0 3
27809: PUSH
27810: LD_VAR 0 1
27814: ARRAY
27815: PUSH
27816: LD_INT 1
27818: ARRAY
27819: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
27820: LD_VAR 0 8
27824: PPUSH
27825: CALL_OW 301
27829: PUSH
27830: LD_VAR 0 5
27834: PUSH
27835: LD_VAR 0 8
27839: PPUSH
27840: CALL_OW 255
27844: NONEQUAL
27845: OR
27846: IFFALSE 27875
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
27848: LD_ADDR_EXP 91
27852: PUSH
27853: LD_EXP 91
27857: PPUSH
27858: LD_VAR 0 8
27862: PPUSH
27863: LD_INT 0
27865: PPUSH
27866: CALL_OW 1
27870: ST_TO_ADDR
// exit ;
27871: POP
27872: POP
27873: GO 28406
// end ; x := list [ i ] [ 3 ] ;
27875: LD_ADDR_VAR 0 6
27879: PUSH
27880: LD_VAR 0 3
27884: PUSH
27885: LD_VAR 0 1
27889: ARRAY
27890: PUSH
27891: LD_INT 3
27893: ARRAY
27894: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
27895: LD_ADDR_VAR 0 7
27899: PUSH
27900: LD_VAR 0 3
27904: PUSH
27905: LD_VAR 0 1
27909: ARRAY
27910: PUSH
27911: LD_INT 4
27913: ARRAY
27914: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
27915: LD_ADDR_VAR 0 9
27919: PUSH
27920: LD_VAR 0 6
27924: PPUSH
27925: LD_VAR 0 7
27929: PPUSH
27930: LD_INT 16
27932: PPUSH
27933: CALL 72493 0 3
27937: ST_TO_ADDR
// if not cratesNearbyPoint then
27938: LD_VAR 0 9
27942: NOT
27943: IFFALSE 27949
// exit ;
27945: POP
27946: POP
27947: GO 28406
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
27949: LD_ADDR_VAR 0 4
27953: PUSH
27954: LD_INT 22
27956: PUSH
27957: LD_VAR 0 5
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: PUSH
27966: LD_INT 3
27968: PUSH
27969: LD_INT 60
27971: PUSH
27972: EMPTY
27973: LIST
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PUSH
27979: LD_INT 91
27981: PUSH
27982: LD_VAR 0 8
27986: PUSH
27987: LD_INT 6
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: LIST
27994: PUSH
27995: LD_INT 2
27997: PUSH
27998: LD_INT 25
28000: PUSH
28001: LD_INT 2
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: PUSH
28008: LD_INT 25
28010: PUSH
28011: LD_INT 16
28013: PUSH
28014: EMPTY
28015: LIST
28016: LIST
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: LIST
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: PPUSH
28029: CALL_OW 69
28033: PUSH
28034: LD_VAR 0 8
28038: PPUSH
28039: CALL_OW 313
28043: PPUSH
28044: LD_INT 3
28046: PUSH
28047: LD_INT 60
28049: PUSH
28050: EMPTY
28051: LIST
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: PUSH
28057: LD_INT 2
28059: PUSH
28060: LD_INT 25
28062: PUSH
28063: LD_INT 2
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: LD_INT 25
28072: PUSH
28073: LD_INT 16
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: LIST
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: PPUSH
28089: CALL_OW 72
28093: UNION
28094: ST_TO_ADDR
// if tmp then
28095: LD_VAR 0 4
28099: IFFALSE 28179
// begin tmp := ShrinkArray ( tmp , 3 ) ;
28101: LD_ADDR_VAR 0 4
28105: PUSH
28106: LD_VAR 0 4
28110: PPUSH
28111: LD_INT 3
28113: PPUSH
28114: CALL 70462 0 2
28118: ST_TO_ADDR
// for j in tmp do
28119: LD_ADDR_VAR 0 2
28123: PUSH
28124: LD_VAR 0 4
28128: PUSH
28129: FOR_IN
28130: IFFALSE 28173
// begin if IsInUnit ( j ) then
28132: LD_VAR 0 2
28136: PPUSH
28137: CALL_OW 310
28141: IFFALSE 28152
// ComExit ( j ) ;
28143: LD_VAR 0 2
28147: PPUSH
28148: CALL 70545 0 1
// AddComCollect ( j , x , y ) ;
28152: LD_VAR 0 2
28156: PPUSH
28157: LD_VAR 0 6
28161: PPUSH
28162: LD_VAR 0 7
28166: PPUSH
28167: CALL_OW 177
// end ;
28171: GO 28129
28173: POP
28174: POP
// exit ;
28175: POP
28176: POP
28177: GO 28406
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
28179: LD_ADDR_VAR 0 4
28183: PUSH
28184: LD_INT 22
28186: PUSH
28187: LD_VAR 0 5
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PUSH
28196: LD_INT 91
28198: PUSH
28199: LD_VAR 0 8
28203: PUSH
28204: LD_INT 8
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: LIST
28211: PUSH
28212: LD_INT 2
28214: PUSH
28215: LD_INT 34
28217: PUSH
28218: LD_INT 12
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: LD_INT 34
28227: PUSH
28228: LD_INT 51
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PUSH
28235: LD_INT 34
28237: PUSH
28238: LD_INT 32
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 34
28247: PUSH
28248: LD_INT 89
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: LIST
28259: LIST
28260: LIST
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: LIST
28266: PPUSH
28267: CALL_OW 69
28271: ST_TO_ADDR
// if tmp then
28272: LD_VAR 0 4
28276: IFFALSE 28402
// begin for j in tmp do
28278: LD_ADDR_VAR 0 2
28282: PUSH
28283: LD_VAR 0 4
28287: PUSH
28288: FOR_IN
28289: IFFALSE 28400
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
28291: LD_VAR 0 2
28295: PPUSH
28296: CALL_OW 262
28300: PUSH
28301: LD_INT 3
28303: EQUAL
28304: PUSH
28305: LD_VAR 0 2
28309: PPUSH
28310: CALL_OW 261
28314: PUSH
28315: LD_INT 20
28317: GREATER
28318: OR
28319: PUSH
28320: LD_VAR 0 2
28324: PPUSH
28325: CALL_OW 314
28329: NOT
28330: AND
28331: PUSH
28332: LD_VAR 0 2
28336: PPUSH
28337: CALL_OW 263
28341: PUSH
28342: LD_INT 1
28344: NONEQUAL
28345: PUSH
28346: LD_VAR 0 2
28350: PPUSH
28351: CALL_OW 311
28355: OR
28356: AND
28357: IFFALSE 28398
// begin ComCollect ( j , x , y ) ;
28359: LD_VAR 0 2
28363: PPUSH
28364: LD_VAR 0 6
28368: PPUSH
28369: LD_VAR 0 7
28373: PPUSH
28374: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
28378: LD_VAR 0 2
28382: PPUSH
28383: LD_VAR 0 8
28387: PPUSH
28388: CALL_OW 172
// exit ;
28392: POP
28393: POP
28394: POP
28395: POP
28396: GO 28406
// end ;
28398: GO 28288
28400: POP
28401: POP
// end ; end ;
28402: GO 27777
28404: POP
28405: POP
// end ; end_of_file
28406: PPOPN 9
28408: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
28409: LD_INT 0
28411: PPUSH
28412: PPUSH
28413: PPUSH
28414: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
28415: LD_VAR 0 1
28419: PPUSH
28420: CALL_OW 264
28424: PUSH
28425: LD_INT 91
28427: EQUAL
28428: IFFALSE 28500
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28430: LD_INT 68
28432: PPUSH
28433: LD_VAR 0 1
28437: PPUSH
28438: CALL_OW 255
28442: PPUSH
28443: CALL_OW 321
28447: PUSH
28448: LD_INT 2
28450: EQUAL
28451: IFFALSE 28463
// eff := 70 else
28453: LD_ADDR_VAR 0 4
28457: PUSH
28458: LD_INT 70
28460: ST_TO_ADDR
28461: GO 28471
// eff := 30 ;
28463: LD_ADDR_VAR 0 4
28467: PUSH
28468: LD_INT 30
28470: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28471: LD_VAR 0 1
28475: PPUSH
28476: CALL_OW 250
28480: PPUSH
28481: LD_VAR 0 1
28485: PPUSH
28486: CALL_OW 251
28490: PPUSH
28491: LD_VAR 0 4
28495: PPUSH
28496: CALL_OW 495
// end ; end ;
28500: LD_VAR 0 2
28504: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
28505: LD_INT 0
28507: PPUSH
// end ;
28508: LD_VAR 0 4
28512: RET
// export function SOS_Command ( cmd ) ; begin
28513: LD_INT 0
28515: PPUSH
// end ;
28516: LD_VAR 0 2
28520: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
28521: LD_INT 0
28523: PPUSH
// end ;
28524: LD_VAR 0 6
28528: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
28529: LD_INT 0
28531: PPUSH
28532: PPUSH
// if not vehicle or not factory then
28533: LD_VAR 0 1
28537: NOT
28538: PUSH
28539: LD_VAR 0 2
28543: NOT
28544: OR
28545: IFFALSE 28549
// exit ;
28547: GO 28780
// if factoryWaypoints >= factory then
28549: LD_EXP 90
28553: PUSH
28554: LD_VAR 0 2
28558: GREATEREQUAL
28559: IFFALSE 28780
// if factoryWaypoints [ factory ] then
28561: LD_EXP 90
28565: PUSH
28566: LD_VAR 0 2
28570: ARRAY
28571: IFFALSE 28780
// begin if GetControl ( vehicle ) = control_manual then
28573: LD_VAR 0 1
28577: PPUSH
28578: CALL_OW 263
28582: PUSH
28583: LD_INT 1
28585: EQUAL
28586: IFFALSE 28667
// begin driver := IsDrivenBy ( vehicle ) ;
28588: LD_ADDR_VAR 0 4
28592: PUSH
28593: LD_VAR 0 1
28597: PPUSH
28598: CALL_OW 311
28602: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28603: LD_VAR 0 4
28607: PPUSH
28608: LD_EXP 90
28612: PUSH
28613: LD_VAR 0 2
28617: ARRAY
28618: PUSH
28619: LD_INT 3
28621: ARRAY
28622: PPUSH
28623: LD_EXP 90
28627: PUSH
28628: LD_VAR 0 2
28632: ARRAY
28633: PUSH
28634: LD_INT 4
28636: ARRAY
28637: PPUSH
28638: CALL_OW 171
// AddComExitVehicle ( driver ) ;
28642: LD_VAR 0 4
28646: PPUSH
28647: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
28651: LD_VAR 0 4
28655: PPUSH
28656: LD_VAR 0 2
28660: PPUSH
28661: CALL_OW 180
// end else
28665: GO 28780
// if GetControl ( vehicle ) = control_remote then
28667: LD_VAR 0 1
28671: PPUSH
28672: CALL_OW 263
28676: PUSH
28677: LD_INT 2
28679: EQUAL
28680: IFFALSE 28741
// begin wait ( 0 0$2 ) ;
28682: LD_INT 70
28684: PPUSH
28685: CALL_OW 67
// if Connect ( vehicle ) then
28689: LD_VAR 0 1
28693: PPUSH
28694: CALL 40804 0 1
28698: IFFALSE 28739
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28700: LD_VAR 0 1
28704: PPUSH
28705: LD_EXP 90
28709: PUSH
28710: LD_VAR 0 2
28714: ARRAY
28715: PUSH
28716: LD_INT 3
28718: ARRAY
28719: PPUSH
28720: LD_EXP 90
28724: PUSH
28725: LD_VAR 0 2
28729: ARRAY
28730: PUSH
28731: LD_INT 4
28733: ARRAY
28734: PPUSH
28735: CALL_OW 171
// end else
28739: GO 28780
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28741: LD_VAR 0 1
28745: PPUSH
28746: LD_EXP 90
28750: PUSH
28751: LD_VAR 0 2
28755: ARRAY
28756: PUSH
28757: LD_INT 3
28759: ARRAY
28760: PPUSH
28761: LD_EXP 90
28765: PUSH
28766: LD_VAR 0 2
28770: ARRAY
28771: PUSH
28772: LD_INT 4
28774: ARRAY
28775: PPUSH
28776: CALL_OW 171
// end ; end ;
28780: LD_VAR 0 3
28784: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
28785: LD_INT 0
28787: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
28788: LD_VAR 0 1
28792: PUSH
28793: LD_INT 250
28795: EQUAL
28796: PUSH
28797: LD_VAR 0 2
28801: PPUSH
28802: CALL_OW 264
28806: PUSH
28807: LD_INT 81
28809: EQUAL
28810: AND
28811: IFFALSE 28832
// MinerPlaceMine ( unit , x , y ) ;
28813: LD_VAR 0 2
28817: PPUSH
28818: LD_VAR 0 4
28822: PPUSH
28823: LD_VAR 0 5
28827: PPUSH
28828: CALL 31217 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
28832: LD_VAR 0 1
28836: PUSH
28837: LD_INT 251
28839: EQUAL
28840: PUSH
28841: LD_VAR 0 2
28845: PPUSH
28846: CALL_OW 264
28850: PUSH
28851: LD_INT 81
28853: EQUAL
28854: AND
28855: IFFALSE 28876
// MinerDetonateMine ( unit , x , y ) ;
28857: LD_VAR 0 2
28861: PPUSH
28862: LD_VAR 0 4
28866: PPUSH
28867: LD_VAR 0 5
28871: PPUSH
28872: CALL 31492 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
28876: LD_VAR 0 1
28880: PUSH
28881: LD_INT 252
28883: EQUAL
28884: PUSH
28885: LD_VAR 0 2
28889: PPUSH
28890: CALL_OW 264
28894: PUSH
28895: LD_INT 81
28897: EQUAL
28898: AND
28899: IFFALSE 28920
// MinerCreateMinefield ( unit , x , y ) ;
28901: LD_VAR 0 2
28905: PPUSH
28906: LD_VAR 0 4
28910: PPUSH
28911: LD_VAR 0 5
28915: PPUSH
28916: CALL 31909 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
28920: LD_VAR 0 1
28924: PUSH
28925: LD_INT 253
28927: EQUAL
28928: PUSH
28929: LD_VAR 0 2
28933: PPUSH
28934: CALL_OW 257
28938: PUSH
28939: LD_INT 5
28941: EQUAL
28942: AND
28943: IFFALSE 28964
// ComBinocular ( unit , x , y ) ;
28945: LD_VAR 0 2
28949: PPUSH
28950: LD_VAR 0 4
28954: PPUSH
28955: LD_VAR 0 5
28959: PPUSH
28960: CALL 32278 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
28964: LD_VAR 0 1
28968: PUSH
28969: LD_INT 254
28971: EQUAL
28972: PUSH
28973: LD_VAR 0 2
28977: PPUSH
28978: CALL_OW 264
28982: PUSH
28983: LD_INT 99
28985: EQUAL
28986: AND
28987: PUSH
28988: LD_VAR 0 3
28992: PPUSH
28993: CALL_OW 263
28997: PUSH
28998: LD_INT 3
29000: EQUAL
29001: AND
29002: IFFALSE 29018
// HackDestroyVehicle ( unit , selectedUnit ) ;
29004: LD_VAR 0 2
29008: PPUSH
29009: LD_VAR 0 3
29013: PPUSH
29014: CALL 30581 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
29018: LD_VAR 0 1
29022: PUSH
29023: LD_INT 255
29025: EQUAL
29026: PUSH
29027: LD_VAR 0 2
29031: PPUSH
29032: CALL_OW 264
29036: PUSH
29037: LD_INT 14
29039: PUSH
29040: LD_INT 53
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: IN
29047: AND
29048: PUSH
29049: LD_VAR 0 4
29053: PPUSH
29054: LD_VAR 0 5
29058: PPUSH
29059: CALL_OW 488
29063: AND
29064: IFFALSE 29088
// CutTreeXYR ( unit , x , y , 12 ) ;
29066: LD_VAR 0 2
29070: PPUSH
29071: LD_VAR 0 4
29075: PPUSH
29076: LD_VAR 0 5
29080: PPUSH
29081: LD_INT 12
29083: PPUSH
29084: CALL 29151 0 4
// if cmd = 256 then
29088: LD_VAR 0 1
29092: PUSH
29093: LD_INT 256
29095: EQUAL
29096: IFFALSE 29117
// SetFactoryWaypoint ( unit , x , y ) ;
29098: LD_VAR 0 2
29102: PPUSH
29103: LD_VAR 0 4
29107: PPUSH
29108: LD_VAR 0 5
29112: PPUSH
29113: CALL 27098 0 3
// if cmd = 257 then
29117: LD_VAR 0 1
29121: PUSH
29122: LD_INT 257
29124: EQUAL
29125: IFFALSE 29146
// SetWarehouseGatheringPoint ( unit , x , y ) ;
29127: LD_VAR 0 2
29131: PPUSH
29132: LD_VAR 0 4
29136: PPUSH
29137: LD_VAR 0 5
29141: PPUSH
29142: CALL 27460 0 3
// end ;
29146: LD_VAR 0 6
29150: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
29151: LD_INT 0
29153: PPUSH
29154: PPUSH
29155: PPUSH
29156: PPUSH
29157: PPUSH
29158: PPUSH
29159: PPUSH
29160: PPUSH
29161: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
29162: LD_VAR 0 1
29166: NOT
29167: PUSH
29168: LD_VAR 0 2
29172: PPUSH
29173: LD_VAR 0 3
29177: PPUSH
29178: CALL_OW 488
29182: NOT
29183: OR
29184: PUSH
29185: LD_VAR 0 4
29189: NOT
29190: OR
29191: IFFALSE 29195
// exit ;
29193: GO 29535
// list := [ ] ;
29195: LD_ADDR_VAR 0 13
29199: PUSH
29200: EMPTY
29201: ST_TO_ADDR
// if x - r < 0 then
29202: LD_VAR 0 2
29206: PUSH
29207: LD_VAR 0 4
29211: MINUS
29212: PUSH
29213: LD_INT 0
29215: LESS
29216: IFFALSE 29228
// min_x := 0 else
29218: LD_ADDR_VAR 0 7
29222: PUSH
29223: LD_INT 0
29225: ST_TO_ADDR
29226: GO 29244
// min_x := x - r ;
29228: LD_ADDR_VAR 0 7
29232: PUSH
29233: LD_VAR 0 2
29237: PUSH
29238: LD_VAR 0 4
29242: MINUS
29243: ST_TO_ADDR
// if y - r < 0 then
29244: LD_VAR 0 3
29248: PUSH
29249: LD_VAR 0 4
29253: MINUS
29254: PUSH
29255: LD_INT 0
29257: LESS
29258: IFFALSE 29270
// min_y := 0 else
29260: LD_ADDR_VAR 0 8
29264: PUSH
29265: LD_INT 0
29267: ST_TO_ADDR
29268: GO 29286
// min_y := y - r ;
29270: LD_ADDR_VAR 0 8
29274: PUSH
29275: LD_VAR 0 3
29279: PUSH
29280: LD_VAR 0 4
29284: MINUS
29285: ST_TO_ADDR
// max_x := x + r ;
29286: LD_ADDR_VAR 0 9
29290: PUSH
29291: LD_VAR 0 2
29295: PUSH
29296: LD_VAR 0 4
29300: PLUS
29301: ST_TO_ADDR
// max_y := y + r ;
29302: LD_ADDR_VAR 0 10
29306: PUSH
29307: LD_VAR 0 3
29311: PUSH
29312: LD_VAR 0 4
29316: PLUS
29317: ST_TO_ADDR
// for _x = min_x to max_x do
29318: LD_ADDR_VAR 0 11
29322: PUSH
29323: DOUBLE
29324: LD_VAR 0 7
29328: DEC
29329: ST_TO_ADDR
29330: LD_VAR 0 9
29334: PUSH
29335: FOR_TO
29336: IFFALSE 29453
// for _y = min_y to max_y do
29338: LD_ADDR_VAR 0 12
29342: PUSH
29343: DOUBLE
29344: LD_VAR 0 8
29348: DEC
29349: ST_TO_ADDR
29350: LD_VAR 0 10
29354: PUSH
29355: FOR_TO
29356: IFFALSE 29449
// begin if not ValidHex ( _x , _y ) then
29358: LD_VAR 0 11
29362: PPUSH
29363: LD_VAR 0 12
29367: PPUSH
29368: CALL_OW 488
29372: NOT
29373: IFFALSE 29377
// continue ;
29375: GO 29355
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29377: LD_VAR 0 11
29381: PPUSH
29382: LD_VAR 0 12
29386: PPUSH
29387: CALL_OW 351
29391: PUSH
29392: LD_VAR 0 11
29396: PPUSH
29397: LD_VAR 0 12
29401: PPUSH
29402: CALL_OW 554
29406: AND
29407: IFFALSE 29447
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29409: LD_ADDR_VAR 0 13
29413: PUSH
29414: LD_VAR 0 13
29418: PPUSH
29419: LD_VAR 0 13
29423: PUSH
29424: LD_INT 1
29426: PLUS
29427: PPUSH
29428: LD_VAR 0 11
29432: PUSH
29433: LD_VAR 0 12
29437: PUSH
29438: EMPTY
29439: LIST
29440: LIST
29441: PPUSH
29442: CALL_OW 2
29446: ST_TO_ADDR
// end ;
29447: GO 29355
29449: POP
29450: POP
29451: GO 29335
29453: POP
29454: POP
// if not list then
29455: LD_VAR 0 13
29459: NOT
29460: IFFALSE 29464
// exit ;
29462: GO 29535
// for i in list do
29464: LD_ADDR_VAR 0 6
29468: PUSH
29469: LD_VAR 0 13
29473: PUSH
29474: FOR_IN
29475: IFFALSE 29533
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
29477: LD_VAR 0 1
29481: PPUSH
29482: LD_STRING M
29484: PUSH
29485: LD_VAR 0 6
29489: PUSH
29490: LD_INT 1
29492: ARRAY
29493: PUSH
29494: LD_VAR 0 6
29498: PUSH
29499: LD_INT 2
29501: ARRAY
29502: PUSH
29503: LD_INT 0
29505: PUSH
29506: LD_INT 0
29508: PUSH
29509: LD_INT 0
29511: PUSH
29512: LD_INT 0
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: LIST
29519: LIST
29520: LIST
29521: LIST
29522: LIST
29523: PUSH
29524: EMPTY
29525: LIST
29526: PPUSH
29527: CALL_OW 447
29531: GO 29474
29533: POP
29534: POP
// end ;
29535: LD_VAR 0 5
29539: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29540: LD_EXP 93
29544: NOT
29545: IFFALSE 29595
29547: GO 29549
29549: DISABLE
// begin initHack := true ;
29550: LD_ADDR_EXP 93
29554: PUSH
29555: LD_INT 1
29557: ST_TO_ADDR
// hackTanks := [ ] ;
29558: LD_ADDR_EXP 94
29562: PUSH
29563: EMPTY
29564: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29565: LD_ADDR_EXP 95
29569: PUSH
29570: EMPTY
29571: ST_TO_ADDR
// hackLimit := 3 ;
29572: LD_ADDR_EXP 96
29576: PUSH
29577: LD_INT 3
29579: ST_TO_ADDR
// hackDist := 12 ;
29580: LD_ADDR_EXP 97
29584: PUSH
29585: LD_INT 12
29587: ST_TO_ADDR
// hackCounter := [ ] ;
29588: LD_ADDR_EXP 98
29592: PUSH
29593: EMPTY
29594: ST_TO_ADDR
// end ;
29595: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29596: LD_EXP 93
29600: PUSH
29601: LD_INT 34
29603: PUSH
29604: LD_INT 99
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PPUSH
29611: CALL_OW 69
29615: AND
29616: IFFALSE 29869
29618: GO 29620
29620: DISABLE
29621: LD_INT 0
29623: PPUSH
29624: PPUSH
// begin enable ;
29625: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29626: LD_ADDR_VAR 0 1
29630: PUSH
29631: LD_INT 34
29633: PUSH
29634: LD_INT 99
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PPUSH
29641: CALL_OW 69
29645: PUSH
29646: FOR_IN
29647: IFFALSE 29867
// begin if not i in hackTanks then
29649: LD_VAR 0 1
29653: PUSH
29654: LD_EXP 94
29658: IN
29659: NOT
29660: IFFALSE 29743
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29662: LD_ADDR_EXP 94
29666: PUSH
29667: LD_EXP 94
29671: PPUSH
29672: LD_EXP 94
29676: PUSH
29677: LD_INT 1
29679: PLUS
29680: PPUSH
29681: LD_VAR 0 1
29685: PPUSH
29686: CALL_OW 1
29690: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29691: LD_ADDR_EXP 95
29695: PUSH
29696: LD_EXP 95
29700: PPUSH
29701: LD_EXP 95
29705: PUSH
29706: LD_INT 1
29708: PLUS
29709: PPUSH
29710: EMPTY
29711: PPUSH
29712: CALL_OW 1
29716: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29717: LD_ADDR_EXP 98
29721: PUSH
29722: LD_EXP 98
29726: PPUSH
29727: LD_EXP 98
29731: PUSH
29732: LD_INT 1
29734: PLUS
29735: PPUSH
29736: EMPTY
29737: PPUSH
29738: CALL_OW 1
29742: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29743: LD_VAR 0 1
29747: PPUSH
29748: CALL_OW 302
29752: NOT
29753: IFFALSE 29766
// begin HackUnlinkAll ( i ) ;
29755: LD_VAR 0 1
29759: PPUSH
29760: CALL 29872 0 1
// continue ;
29764: GO 29646
// end ; HackCheckCapturedStatus ( i ) ;
29766: LD_VAR 0 1
29770: PPUSH
29771: CALL 30315 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29775: LD_ADDR_VAR 0 2
29779: PUSH
29780: LD_INT 81
29782: PUSH
29783: LD_VAR 0 1
29787: PPUSH
29788: CALL_OW 255
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: PUSH
29797: LD_INT 33
29799: PUSH
29800: LD_INT 3
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PUSH
29807: LD_INT 91
29809: PUSH
29810: LD_VAR 0 1
29814: PUSH
29815: LD_EXP 97
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: LIST
29824: PUSH
29825: LD_INT 50
29827: PUSH
29828: EMPTY
29829: LIST
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: PPUSH
29837: CALL_OW 69
29841: ST_TO_ADDR
// if not tmp then
29842: LD_VAR 0 2
29846: NOT
29847: IFFALSE 29851
// continue ;
29849: GO 29646
// HackLink ( i , tmp ) ;
29851: LD_VAR 0 1
29855: PPUSH
29856: LD_VAR 0 2
29860: PPUSH
29861: CALL 30008 0 2
// end ;
29865: GO 29646
29867: POP
29868: POP
// end ;
29869: PPOPN 2
29871: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
29872: LD_INT 0
29874: PPUSH
29875: PPUSH
29876: PPUSH
// if not hack in hackTanks then
29877: LD_VAR 0 1
29881: PUSH
29882: LD_EXP 94
29886: IN
29887: NOT
29888: IFFALSE 29892
// exit ;
29890: GO 30003
// index := GetElementIndex ( hackTanks , hack ) ;
29892: LD_ADDR_VAR 0 4
29896: PUSH
29897: LD_EXP 94
29901: PPUSH
29902: LD_VAR 0 1
29906: PPUSH
29907: CALL 37620 0 2
29911: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
29912: LD_EXP 95
29916: PUSH
29917: LD_VAR 0 4
29921: ARRAY
29922: IFFALSE 30003
// begin for i in hackTanksCaptured [ index ] do
29924: LD_ADDR_VAR 0 3
29928: PUSH
29929: LD_EXP 95
29933: PUSH
29934: LD_VAR 0 4
29938: ARRAY
29939: PUSH
29940: FOR_IN
29941: IFFALSE 29967
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
29943: LD_VAR 0 3
29947: PUSH
29948: LD_INT 1
29950: ARRAY
29951: PPUSH
29952: LD_VAR 0 3
29956: PUSH
29957: LD_INT 2
29959: ARRAY
29960: PPUSH
29961: CALL_OW 235
29965: GO 29940
29967: POP
29968: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
29969: LD_ADDR_EXP 95
29973: PUSH
29974: LD_EXP 95
29978: PPUSH
29979: LD_VAR 0 4
29983: PPUSH
29984: EMPTY
29985: PPUSH
29986: CALL_OW 1
29990: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
29991: LD_VAR 0 1
29995: PPUSH
29996: LD_INT 0
29998: PPUSH
29999: CALL_OW 505
// end ; end ;
30003: LD_VAR 0 2
30007: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
30008: LD_INT 0
30010: PPUSH
30011: PPUSH
30012: PPUSH
// if not hack in hackTanks or not vehicles then
30013: LD_VAR 0 1
30017: PUSH
30018: LD_EXP 94
30022: IN
30023: NOT
30024: PUSH
30025: LD_VAR 0 2
30029: NOT
30030: OR
30031: IFFALSE 30035
// exit ;
30033: GO 30310
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
30035: LD_ADDR_VAR 0 2
30039: PUSH
30040: LD_VAR 0 1
30044: PPUSH
30045: LD_VAR 0 2
30049: PPUSH
30050: LD_INT 1
30052: PPUSH
30053: LD_INT 1
30055: PPUSH
30056: CALL 38270 0 4
30060: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
30061: LD_ADDR_VAR 0 5
30065: PUSH
30066: LD_EXP 94
30070: PPUSH
30071: LD_VAR 0 1
30075: PPUSH
30076: CALL 37620 0 2
30080: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
30081: LD_EXP 95
30085: PUSH
30086: LD_VAR 0 5
30090: ARRAY
30091: PUSH
30092: LD_EXP 96
30096: LESS
30097: IFFALSE 30286
// begin for i := 1 to vehicles do
30099: LD_ADDR_VAR 0 4
30103: PUSH
30104: DOUBLE
30105: LD_INT 1
30107: DEC
30108: ST_TO_ADDR
30109: LD_VAR 0 2
30113: PUSH
30114: FOR_TO
30115: IFFALSE 30284
// begin if hackTanksCaptured [ index ] = hackLimit then
30117: LD_EXP 95
30121: PUSH
30122: LD_VAR 0 5
30126: ARRAY
30127: PUSH
30128: LD_EXP 96
30132: EQUAL
30133: IFFALSE 30137
// break ;
30135: GO 30284
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
30137: LD_ADDR_EXP 98
30141: PUSH
30142: LD_EXP 98
30146: PPUSH
30147: LD_VAR 0 5
30151: PPUSH
30152: LD_EXP 98
30156: PUSH
30157: LD_VAR 0 5
30161: ARRAY
30162: PUSH
30163: LD_INT 1
30165: PLUS
30166: PPUSH
30167: CALL_OW 1
30171: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
30172: LD_ADDR_EXP 95
30176: PUSH
30177: LD_EXP 95
30181: PPUSH
30182: LD_VAR 0 5
30186: PUSH
30187: LD_EXP 95
30191: PUSH
30192: LD_VAR 0 5
30196: ARRAY
30197: PUSH
30198: LD_INT 1
30200: PLUS
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: PPUSH
30206: LD_VAR 0 2
30210: PUSH
30211: LD_VAR 0 4
30215: ARRAY
30216: PUSH
30217: LD_VAR 0 2
30221: PUSH
30222: LD_VAR 0 4
30226: ARRAY
30227: PPUSH
30228: CALL_OW 255
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: PPUSH
30237: CALL 37835 0 3
30241: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
30242: LD_VAR 0 2
30246: PUSH
30247: LD_VAR 0 4
30251: ARRAY
30252: PPUSH
30253: LD_VAR 0 1
30257: PPUSH
30258: CALL_OW 255
30262: PPUSH
30263: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
30267: LD_VAR 0 2
30271: PUSH
30272: LD_VAR 0 4
30276: ARRAY
30277: PPUSH
30278: CALL_OW 141
// end ;
30282: GO 30114
30284: POP
30285: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30286: LD_VAR 0 1
30290: PPUSH
30291: LD_EXP 95
30295: PUSH
30296: LD_VAR 0 5
30300: ARRAY
30301: PUSH
30302: LD_INT 0
30304: PLUS
30305: PPUSH
30306: CALL_OW 505
// end ;
30310: LD_VAR 0 3
30314: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
30315: LD_INT 0
30317: PPUSH
30318: PPUSH
30319: PPUSH
30320: PPUSH
// if not hack in hackTanks then
30321: LD_VAR 0 1
30325: PUSH
30326: LD_EXP 94
30330: IN
30331: NOT
30332: IFFALSE 30336
// exit ;
30334: GO 30576
// index := GetElementIndex ( hackTanks , hack ) ;
30336: LD_ADDR_VAR 0 4
30340: PUSH
30341: LD_EXP 94
30345: PPUSH
30346: LD_VAR 0 1
30350: PPUSH
30351: CALL 37620 0 2
30355: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
30356: LD_ADDR_VAR 0 3
30360: PUSH
30361: DOUBLE
30362: LD_EXP 95
30366: PUSH
30367: LD_VAR 0 4
30371: ARRAY
30372: INC
30373: ST_TO_ADDR
30374: LD_INT 1
30376: PUSH
30377: FOR_DOWNTO
30378: IFFALSE 30550
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
30380: LD_ADDR_VAR 0 5
30384: PUSH
30385: LD_EXP 95
30389: PUSH
30390: LD_VAR 0 4
30394: ARRAY
30395: PUSH
30396: LD_VAR 0 3
30400: ARRAY
30401: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
30402: LD_VAR 0 5
30406: PUSH
30407: LD_INT 1
30409: ARRAY
30410: PPUSH
30411: CALL_OW 302
30415: NOT
30416: PUSH
30417: LD_VAR 0 5
30421: PUSH
30422: LD_INT 1
30424: ARRAY
30425: PPUSH
30426: CALL_OW 255
30430: PUSH
30431: LD_VAR 0 1
30435: PPUSH
30436: CALL_OW 255
30440: NONEQUAL
30441: OR
30442: IFFALSE 30548
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30444: LD_VAR 0 5
30448: PUSH
30449: LD_INT 1
30451: ARRAY
30452: PPUSH
30453: CALL_OW 305
30457: PUSH
30458: LD_VAR 0 5
30462: PUSH
30463: LD_INT 1
30465: ARRAY
30466: PPUSH
30467: CALL_OW 255
30471: PUSH
30472: LD_VAR 0 1
30476: PPUSH
30477: CALL_OW 255
30481: EQUAL
30482: AND
30483: IFFALSE 30507
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30485: LD_VAR 0 5
30489: PUSH
30490: LD_INT 1
30492: ARRAY
30493: PPUSH
30494: LD_VAR 0 5
30498: PUSH
30499: LD_INT 2
30501: ARRAY
30502: PPUSH
30503: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30507: LD_ADDR_EXP 95
30511: PUSH
30512: LD_EXP 95
30516: PPUSH
30517: LD_VAR 0 4
30521: PPUSH
30522: LD_EXP 95
30526: PUSH
30527: LD_VAR 0 4
30531: ARRAY
30532: PPUSH
30533: LD_VAR 0 3
30537: PPUSH
30538: CALL_OW 3
30542: PPUSH
30543: CALL_OW 1
30547: ST_TO_ADDR
// end ; end ;
30548: GO 30377
30550: POP
30551: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30552: LD_VAR 0 1
30556: PPUSH
30557: LD_EXP 95
30561: PUSH
30562: LD_VAR 0 4
30566: ARRAY
30567: PUSH
30568: LD_INT 0
30570: PLUS
30571: PPUSH
30572: CALL_OW 505
// end ;
30576: LD_VAR 0 2
30580: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30581: LD_INT 0
30583: PPUSH
30584: PPUSH
30585: PPUSH
30586: PPUSH
// if not hack in hackTanks then
30587: LD_VAR 0 1
30591: PUSH
30592: LD_EXP 94
30596: IN
30597: NOT
30598: IFFALSE 30602
// exit ;
30600: GO 30687
// index := GetElementIndex ( hackTanks , hack ) ;
30602: LD_ADDR_VAR 0 5
30606: PUSH
30607: LD_EXP 94
30611: PPUSH
30612: LD_VAR 0 1
30616: PPUSH
30617: CALL 37620 0 2
30621: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30622: LD_ADDR_VAR 0 4
30626: PUSH
30627: DOUBLE
30628: LD_INT 1
30630: DEC
30631: ST_TO_ADDR
30632: LD_EXP 95
30636: PUSH
30637: LD_VAR 0 5
30641: ARRAY
30642: PUSH
30643: FOR_TO
30644: IFFALSE 30685
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30646: LD_EXP 95
30650: PUSH
30651: LD_VAR 0 5
30655: ARRAY
30656: PUSH
30657: LD_VAR 0 4
30661: ARRAY
30662: PUSH
30663: LD_INT 1
30665: ARRAY
30666: PUSH
30667: LD_VAR 0 2
30671: EQUAL
30672: IFFALSE 30683
// KillUnit ( vehicle ) ;
30674: LD_VAR 0 2
30678: PPUSH
30679: CALL_OW 66
30683: GO 30643
30685: POP
30686: POP
// end ;
30687: LD_VAR 0 3
30691: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
30692: LD_EXP 99
30696: NOT
30697: IFFALSE 30732
30699: GO 30701
30701: DISABLE
// begin initMiner := true ;
30702: LD_ADDR_EXP 99
30706: PUSH
30707: LD_INT 1
30709: ST_TO_ADDR
// minersList := [ ] ;
30710: LD_ADDR_EXP 100
30714: PUSH
30715: EMPTY
30716: ST_TO_ADDR
// minerMinesList := [ ] ;
30717: LD_ADDR_EXP 101
30721: PUSH
30722: EMPTY
30723: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
30724: LD_ADDR_EXP 102
30728: PUSH
30729: LD_INT 5
30731: ST_TO_ADDR
// end ;
30732: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
30733: LD_EXP 99
30737: PUSH
30738: LD_INT 34
30740: PUSH
30741: LD_INT 81
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PPUSH
30748: CALL_OW 69
30752: AND
30753: IFFALSE 31214
30755: GO 30757
30757: DISABLE
30758: LD_INT 0
30760: PPUSH
30761: PPUSH
30762: PPUSH
30763: PPUSH
// begin enable ;
30764: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
30765: LD_ADDR_VAR 0 1
30769: PUSH
30770: LD_INT 34
30772: PUSH
30773: LD_INT 81
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PPUSH
30780: CALL_OW 69
30784: PUSH
30785: FOR_IN
30786: IFFALSE 30858
// begin if not i in minersList then
30788: LD_VAR 0 1
30792: PUSH
30793: LD_EXP 100
30797: IN
30798: NOT
30799: IFFALSE 30856
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
30801: LD_ADDR_EXP 100
30805: PUSH
30806: LD_EXP 100
30810: PPUSH
30811: LD_EXP 100
30815: PUSH
30816: LD_INT 1
30818: PLUS
30819: PPUSH
30820: LD_VAR 0 1
30824: PPUSH
30825: CALL_OW 1
30829: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
30830: LD_ADDR_EXP 101
30834: PUSH
30835: LD_EXP 101
30839: PPUSH
30840: LD_EXP 101
30844: PUSH
30845: LD_INT 1
30847: PLUS
30848: PPUSH
30849: EMPTY
30850: PPUSH
30851: CALL_OW 1
30855: ST_TO_ADDR
// end end ;
30856: GO 30785
30858: POP
30859: POP
// for i := minerMinesList downto 1 do
30860: LD_ADDR_VAR 0 1
30864: PUSH
30865: DOUBLE
30866: LD_EXP 101
30870: INC
30871: ST_TO_ADDR
30872: LD_INT 1
30874: PUSH
30875: FOR_DOWNTO
30876: IFFALSE 31212
// begin if IsLive ( minersList [ i ] ) then
30878: LD_EXP 100
30882: PUSH
30883: LD_VAR 0 1
30887: ARRAY
30888: PPUSH
30889: CALL_OW 300
30893: IFFALSE 30921
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
30895: LD_EXP 100
30899: PUSH
30900: LD_VAR 0 1
30904: ARRAY
30905: PPUSH
30906: LD_EXP 101
30910: PUSH
30911: LD_VAR 0 1
30915: ARRAY
30916: PPUSH
30917: CALL_OW 505
// if not minerMinesList [ i ] then
30921: LD_EXP 101
30925: PUSH
30926: LD_VAR 0 1
30930: ARRAY
30931: NOT
30932: IFFALSE 30936
// continue ;
30934: GO 30875
// for j := minerMinesList [ i ] downto 1 do
30936: LD_ADDR_VAR 0 2
30940: PUSH
30941: DOUBLE
30942: LD_EXP 101
30946: PUSH
30947: LD_VAR 0 1
30951: ARRAY
30952: INC
30953: ST_TO_ADDR
30954: LD_INT 1
30956: PUSH
30957: FOR_DOWNTO
30958: IFFALSE 31208
// begin side := GetSide ( minersList [ i ] ) ;
30960: LD_ADDR_VAR 0 3
30964: PUSH
30965: LD_EXP 100
30969: PUSH
30970: LD_VAR 0 1
30974: ARRAY
30975: PPUSH
30976: CALL_OW 255
30980: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30981: LD_ADDR_VAR 0 4
30985: PUSH
30986: LD_EXP 101
30990: PUSH
30991: LD_VAR 0 1
30995: ARRAY
30996: PUSH
30997: LD_VAR 0 2
31001: ARRAY
31002: PUSH
31003: LD_INT 1
31005: ARRAY
31006: PPUSH
31007: LD_EXP 101
31011: PUSH
31012: LD_VAR 0 1
31016: ARRAY
31017: PUSH
31018: LD_VAR 0 2
31022: ARRAY
31023: PUSH
31024: LD_INT 2
31026: ARRAY
31027: PPUSH
31028: CALL_OW 428
31032: ST_TO_ADDR
// if not tmp then
31033: LD_VAR 0 4
31037: NOT
31038: IFFALSE 31042
// continue ;
31040: GO 30957
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
31042: LD_VAR 0 4
31046: PUSH
31047: LD_INT 81
31049: PUSH
31050: LD_VAR 0 3
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: PPUSH
31059: CALL_OW 69
31063: IN
31064: PUSH
31065: LD_EXP 101
31069: PUSH
31070: LD_VAR 0 1
31074: ARRAY
31075: PUSH
31076: LD_VAR 0 2
31080: ARRAY
31081: PUSH
31082: LD_INT 1
31084: ARRAY
31085: PPUSH
31086: LD_EXP 101
31090: PUSH
31091: LD_VAR 0 1
31095: ARRAY
31096: PUSH
31097: LD_VAR 0 2
31101: ARRAY
31102: PUSH
31103: LD_INT 2
31105: ARRAY
31106: PPUSH
31107: CALL_OW 458
31111: AND
31112: IFFALSE 31206
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
31114: LD_EXP 101
31118: PUSH
31119: LD_VAR 0 1
31123: ARRAY
31124: PUSH
31125: LD_VAR 0 2
31129: ARRAY
31130: PUSH
31131: LD_INT 1
31133: ARRAY
31134: PPUSH
31135: LD_EXP 101
31139: PUSH
31140: LD_VAR 0 1
31144: ARRAY
31145: PUSH
31146: LD_VAR 0 2
31150: ARRAY
31151: PUSH
31152: LD_INT 2
31154: ARRAY
31155: PPUSH
31156: LD_VAR 0 3
31160: PPUSH
31161: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
31165: LD_ADDR_EXP 101
31169: PUSH
31170: LD_EXP 101
31174: PPUSH
31175: LD_VAR 0 1
31179: PPUSH
31180: LD_EXP 101
31184: PUSH
31185: LD_VAR 0 1
31189: ARRAY
31190: PPUSH
31191: LD_VAR 0 2
31195: PPUSH
31196: CALL_OW 3
31200: PPUSH
31201: CALL_OW 1
31205: ST_TO_ADDR
// end ; end ;
31206: GO 30957
31208: POP
31209: POP
// end ;
31210: GO 30875
31212: POP
31213: POP
// end ;
31214: PPOPN 4
31216: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
31217: LD_INT 0
31219: PPUSH
31220: PPUSH
// result := false ;
31221: LD_ADDR_VAR 0 4
31225: PUSH
31226: LD_INT 0
31228: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
31229: LD_VAR 0 1
31233: PPUSH
31234: CALL_OW 264
31238: PUSH
31239: LD_INT 81
31241: EQUAL
31242: NOT
31243: IFFALSE 31247
// exit ;
31245: GO 31487
// index := GetElementIndex ( minersList , unit ) ;
31247: LD_ADDR_VAR 0 5
31251: PUSH
31252: LD_EXP 100
31256: PPUSH
31257: LD_VAR 0 1
31261: PPUSH
31262: CALL 37620 0 2
31266: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
31267: LD_EXP 101
31271: PUSH
31272: LD_VAR 0 5
31276: ARRAY
31277: PUSH
31278: LD_EXP 102
31282: GREATEREQUAL
31283: IFFALSE 31287
// exit ;
31285: GO 31487
// ComMoveXY ( unit , x , y ) ;
31287: LD_VAR 0 1
31291: PPUSH
31292: LD_VAR 0 2
31296: PPUSH
31297: LD_VAR 0 3
31301: PPUSH
31302: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31306: LD_INT 35
31308: PPUSH
31309: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
31313: LD_VAR 0 1
31317: PPUSH
31318: LD_VAR 0 2
31322: PPUSH
31323: LD_VAR 0 3
31327: PPUSH
31328: CALL 68956 0 3
31332: NOT
31333: PUSH
31334: LD_VAR 0 1
31338: PPUSH
31339: CALL_OW 314
31343: AND
31344: IFFALSE 31348
// exit ;
31346: GO 31487
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
31348: LD_VAR 0 2
31352: PPUSH
31353: LD_VAR 0 3
31357: PPUSH
31358: CALL_OW 428
31362: PUSH
31363: LD_VAR 0 1
31367: EQUAL
31368: PUSH
31369: LD_VAR 0 1
31373: PPUSH
31374: CALL_OW 314
31378: NOT
31379: AND
31380: IFFALSE 31306
// PlaySoundXY ( x , y , PlantMine ) ;
31382: LD_VAR 0 2
31386: PPUSH
31387: LD_VAR 0 3
31391: PPUSH
31392: LD_STRING PlantMine
31394: PPUSH
31395: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
31399: LD_VAR 0 2
31403: PPUSH
31404: LD_VAR 0 3
31408: PPUSH
31409: LD_VAR 0 1
31413: PPUSH
31414: CALL_OW 255
31418: PPUSH
31419: LD_INT 0
31421: PPUSH
31422: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31426: LD_ADDR_EXP 101
31430: PUSH
31431: LD_EXP 101
31435: PPUSH
31436: LD_VAR 0 5
31440: PUSH
31441: LD_EXP 101
31445: PUSH
31446: LD_VAR 0 5
31450: ARRAY
31451: PUSH
31452: LD_INT 1
31454: PLUS
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PPUSH
31460: LD_VAR 0 2
31464: PUSH
31465: LD_VAR 0 3
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: PPUSH
31474: CALL 37835 0 3
31478: ST_TO_ADDR
// result := true ;
31479: LD_ADDR_VAR 0 4
31483: PUSH
31484: LD_INT 1
31486: ST_TO_ADDR
// end ;
31487: LD_VAR 0 4
31491: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31492: LD_INT 0
31494: PPUSH
31495: PPUSH
31496: PPUSH
// if not unit in minersList then
31497: LD_VAR 0 1
31501: PUSH
31502: LD_EXP 100
31506: IN
31507: NOT
31508: IFFALSE 31512
// exit ;
31510: GO 31904
// index := GetElementIndex ( minersList , unit ) ;
31512: LD_ADDR_VAR 0 6
31516: PUSH
31517: LD_EXP 100
31521: PPUSH
31522: LD_VAR 0 1
31526: PPUSH
31527: CALL 37620 0 2
31531: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31532: LD_ADDR_VAR 0 5
31536: PUSH
31537: DOUBLE
31538: LD_EXP 101
31542: PUSH
31543: LD_VAR 0 6
31547: ARRAY
31548: INC
31549: ST_TO_ADDR
31550: LD_INT 1
31552: PUSH
31553: FOR_DOWNTO
31554: IFFALSE 31715
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
31556: LD_EXP 101
31560: PUSH
31561: LD_VAR 0 6
31565: ARRAY
31566: PUSH
31567: LD_VAR 0 5
31571: ARRAY
31572: PUSH
31573: LD_INT 1
31575: ARRAY
31576: PUSH
31577: LD_VAR 0 2
31581: EQUAL
31582: PUSH
31583: LD_EXP 101
31587: PUSH
31588: LD_VAR 0 6
31592: ARRAY
31593: PUSH
31594: LD_VAR 0 5
31598: ARRAY
31599: PUSH
31600: LD_INT 2
31602: ARRAY
31603: PUSH
31604: LD_VAR 0 3
31608: EQUAL
31609: AND
31610: IFFALSE 31713
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31612: LD_EXP 101
31616: PUSH
31617: LD_VAR 0 6
31621: ARRAY
31622: PUSH
31623: LD_VAR 0 5
31627: ARRAY
31628: PUSH
31629: LD_INT 1
31631: ARRAY
31632: PPUSH
31633: LD_EXP 101
31637: PUSH
31638: LD_VAR 0 6
31642: ARRAY
31643: PUSH
31644: LD_VAR 0 5
31648: ARRAY
31649: PUSH
31650: LD_INT 2
31652: ARRAY
31653: PPUSH
31654: LD_VAR 0 1
31658: PPUSH
31659: CALL_OW 255
31663: PPUSH
31664: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31668: LD_ADDR_EXP 101
31672: PUSH
31673: LD_EXP 101
31677: PPUSH
31678: LD_VAR 0 6
31682: PPUSH
31683: LD_EXP 101
31687: PUSH
31688: LD_VAR 0 6
31692: ARRAY
31693: PPUSH
31694: LD_VAR 0 5
31698: PPUSH
31699: CALL_OW 3
31703: PPUSH
31704: CALL_OW 1
31708: ST_TO_ADDR
// exit ;
31709: POP
31710: POP
31711: GO 31904
// end ; end ;
31713: GO 31553
31715: POP
31716: POP
// for i := minerMinesList [ index ] downto 1 do
31717: LD_ADDR_VAR 0 5
31721: PUSH
31722: DOUBLE
31723: LD_EXP 101
31727: PUSH
31728: LD_VAR 0 6
31732: ARRAY
31733: INC
31734: ST_TO_ADDR
31735: LD_INT 1
31737: PUSH
31738: FOR_DOWNTO
31739: IFFALSE 31902
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
31741: LD_EXP 101
31745: PUSH
31746: LD_VAR 0 6
31750: ARRAY
31751: PUSH
31752: LD_VAR 0 5
31756: ARRAY
31757: PUSH
31758: LD_INT 1
31760: ARRAY
31761: PPUSH
31762: LD_EXP 101
31766: PUSH
31767: LD_VAR 0 6
31771: ARRAY
31772: PUSH
31773: LD_VAR 0 5
31777: ARRAY
31778: PUSH
31779: LD_INT 2
31781: ARRAY
31782: PPUSH
31783: LD_VAR 0 2
31787: PPUSH
31788: LD_VAR 0 3
31792: PPUSH
31793: CALL_OW 298
31797: PUSH
31798: LD_INT 6
31800: LESS
31801: IFFALSE 31900
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31803: LD_EXP 101
31807: PUSH
31808: LD_VAR 0 6
31812: ARRAY
31813: PUSH
31814: LD_VAR 0 5
31818: ARRAY
31819: PUSH
31820: LD_INT 1
31822: ARRAY
31823: PPUSH
31824: LD_EXP 101
31828: PUSH
31829: LD_VAR 0 6
31833: ARRAY
31834: PUSH
31835: LD_VAR 0 5
31839: ARRAY
31840: PUSH
31841: LD_INT 2
31843: ARRAY
31844: PPUSH
31845: LD_VAR 0 1
31849: PPUSH
31850: CALL_OW 255
31854: PPUSH
31855: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31859: LD_ADDR_EXP 101
31863: PUSH
31864: LD_EXP 101
31868: PPUSH
31869: LD_VAR 0 6
31873: PPUSH
31874: LD_EXP 101
31878: PUSH
31879: LD_VAR 0 6
31883: ARRAY
31884: PPUSH
31885: LD_VAR 0 5
31889: PPUSH
31890: CALL_OW 3
31894: PPUSH
31895: CALL_OW 1
31899: ST_TO_ADDR
// end ; end ;
31900: GO 31738
31902: POP
31903: POP
// end ;
31904: LD_VAR 0 4
31908: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
31909: LD_INT 0
31911: PPUSH
31912: PPUSH
31913: PPUSH
31914: PPUSH
31915: PPUSH
31916: PPUSH
31917: PPUSH
31918: PPUSH
31919: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
31920: LD_VAR 0 1
31924: PPUSH
31925: CALL_OW 264
31929: PUSH
31930: LD_INT 81
31932: EQUAL
31933: NOT
31934: PUSH
31935: LD_VAR 0 1
31939: PUSH
31940: LD_EXP 100
31944: IN
31945: NOT
31946: OR
31947: IFFALSE 31951
// exit ;
31949: GO 32273
// index := GetElementIndex ( minersList , unit ) ;
31951: LD_ADDR_VAR 0 6
31955: PUSH
31956: LD_EXP 100
31960: PPUSH
31961: LD_VAR 0 1
31965: PPUSH
31966: CALL 37620 0 2
31970: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
31971: LD_ADDR_VAR 0 8
31975: PUSH
31976: LD_EXP 102
31980: PUSH
31981: LD_EXP 101
31985: PUSH
31986: LD_VAR 0 6
31990: ARRAY
31991: MINUS
31992: ST_TO_ADDR
// if not minesFreeAmount then
31993: LD_VAR 0 8
31997: NOT
31998: IFFALSE 32002
// exit ;
32000: GO 32273
// tmp := [ ] ;
32002: LD_ADDR_VAR 0 7
32006: PUSH
32007: EMPTY
32008: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
32009: LD_ADDR_VAR 0 5
32013: PUSH
32014: DOUBLE
32015: LD_INT 1
32017: DEC
32018: ST_TO_ADDR
32019: LD_VAR 0 8
32023: PUSH
32024: FOR_TO
32025: IFFALSE 32220
// begin _d := rand ( 0 , 5 ) ;
32027: LD_ADDR_VAR 0 11
32031: PUSH
32032: LD_INT 0
32034: PPUSH
32035: LD_INT 5
32037: PPUSH
32038: CALL_OW 12
32042: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
32043: LD_ADDR_VAR 0 12
32047: PUSH
32048: LD_INT 2
32050: PPUSH
32051: LD_INT 6
32053: PPUSH
32054: CALL_OW 12
32058: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
32059: LD_ADDR_VAR 0 9
32063: PUSH
32064: LD_VAR 0 2
32068: PPUSH
32069: LD_VAR 0 11
32073: PPUSH
32074: LD_VAR 0 12
32078: PPUSH
32079: CALL_OW 272
32083: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
32084: LD_ADDR_VAR 0 10
32088: PUSH
32089: LD_VAR 0 3
32093: PPUSH
32094: LD_VAR 0 11
32098: PPUSH
32099: LD_VAR 0 12
32103: PPUSH
32104: CALL_OW 273
32108: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
32109: LD_VAR 0 9
32113: PPUSH
32114: LD_VAR 0 10
32118: PPUSH
32119: CALL_OW 488
32123: PUSH
32124: LD_VAR 0 9
32128: PUSH
32129: LD_VAR 0 10
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: PUSH
32138: LD_VAR 0 7
32142: IN
32143: NOT
32144: AND
32145: PUSH
32146: LD_VAR 0 9
32150: PPUSH
32151: LD_VAR 0 10
32155: PPUSH
32156: CALL_OW 458
32160: NOT
32161: AND
32162: IFFALSE 32204
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
32164: LD_ADDR_VAR 0 7
32168: PUSH
32169: LD_VAR 0 7
32173: PPUSH
32174: LD_VAR 0 7
32178: PUSH
32179: LD_INT 1
32181: PLUS
32182: PPUSH
32183: LD_VAR 0 9
32187: PUSH
32188: LD_VAR 0 10
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PPUSH
32197: CALL_OW 1
32201: ST_TO_ADDR
32202: GO 32218
// i := i - 1 ;
32204: LD_ADDR_VAR 0 5
32208: PUSH
32209: LD_VAR 0 5
32213: PUSH
32214: LD_INT 1
32216: MINUS
32217: ST_TO_ADDR
// end ;
32218: GO 32024
32220: POP
32221: POP
// for i in tmp do
32222: LD_ADDR_VAR 0 5
32226: PUSH
32227: LD_VAR 0 7
32231: PUSH
32232: FOR_IN
32233: IFFALSE 32271
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
32235: LD_VAR 0 1
32239: PPUSH
32240: LD_VAR 0 5
32244: PUSH
32245: LD_INT 1
32247: ARRAY
32248: PPUSH
32249: LD_VAR 0 5
32253: PUSH
32254: LD_INT 2
32256: ARRAY
32257: PPUSH
32258: CALL 31217 0 3
32262: NOT
32263: IFFALSE 32269
// exit ;
32265: POP
32266: POP
32267: GO 32273
32269: GO 32232
32271: POP
32272: POP
// end ;
32273: LD_VAR 0 4
32277: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
32278: LD_INT 0
32280: PPUSH
32281: PPUSH
32282: PPUSH
32283: PPUSH
32284: PPUSH
32285: PPUSH
32286: PPUSH
// if not GetClass ( unit ) = class_sniper then
32287: LD_VAR 0 1
32291: PPUSH
32292: CALL_OW 257
32296: PUSH
32297: LD_INT 5
32299: EQUAL
32300: NOT
32301: IFFALSE 32305
// exit ;
32303: GO 32693
// dist := 8 ;
32305: LD_ADDR_VAR 0 5
32309: PUSH
32310: LD_INT 8
32312: ST_TO_ADDR
// viewRange := 12 ;
32313: LD_ADDR_VAR 0 7
32317: PUSH
32318: LD_INT 12
32320: ST_TO_ADDR
// side := GetSide ( unit ) ;
32321: LD_ADDR_VAR 0 6
32325: PUSH
32326: LD_VAR 0 1
32330: PPUSH
32331: CALL_OW 255
32335: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
32336: LD_INT 61
32338: PPUSH
32339: LD_VAR 0 6
32343: PPUSH
32344: CALL_OW 321
32348: PUSH
32349: LD_INT 2
32351: EQUAL
32352: IFFALSE 32362
// viewRange := 16 ;
32354: LD_ADDR_VAR 0 7
32358: PUSH
32359: LD_INT 16
32361: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
32362: LD_VAR 0 1
32366: PPUSH
32367: LD_VAR 0 2
32371: PPUSH
32372: LD_VAR 0 3
32376: PPUSH
32377: CALL_OW 297
32381: PUSH
32382: LD_VAR 0 5
32386: GREATER
32387: IFFALSE 32466
// begin ComMoveXY ( unit , x , y ) ;
32389: LD_VAR 0 1
32393: PPUSH
32394: LD_VAR 0 2
32398: PPUSH
32399: LD_VAR 0 3
32403: PPUSH
32404: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32408: LD_INT 35
32410: PPUSH
32411: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32415: LD_VAR 0 1
32419: PPUSH
32420: LD_VAR 0 2
32424: PPUSH
32425: LD_VAR 0 3
32429: PPUSH
32430: CALL 68956 0 3
32434: NOT
32435: IFFALSE 32439
// exit ;
32437: GO 32693
// until GetDistUnitXY ( unit , x , y ) < dist ;
32439: LD_VAR 0 1
32443: PPUSH
32444: LD_VAR 0 2
32448: PPUSH
32449: LD_VAR 0 3
32453: PPUSH
32454: CALL_OW 297
32458: PUSH
32459: LD_VAR 0 5
32463: LESS
32464: IFFALSE 32408
// end ; ComTurnXY ( unit , x , y ) ;
32466: LD_VAR 0 1
32470: PPUSH
32471: LD_VAR 0 2
32475: PPUSH
32476: LD_VAR 0 3
32480: PPUSH
32481: CALL_OW 118
// wait ( 5 ) ;
32485: LD_INT 5
32487: PPUSH
32488: CALL_OW 67
// _d := GetDir ( unit ) ;
32492: LD_ADDR_VAR 0 10
32496: PUSH
32497: LD_VAR 0 1
32501: PPUSH
32502: CALL_OW 254
32506: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
32507: LD_ADDR_VAR 0 8
32511: PUSH
32512: LD_VAR 0 1
32516: PPUSH
32517: CALL_OW 250
32521: PPUSH
32522: LD_VAR 0 10
32526: PPUSH
32527: LD_VAR 0 5
32531: PPUSH
32532: CALL_OW 272
32536: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
32537: LD_ADDR_VAR 0 9
32541: PUSH
32542: LD_VAR 0 1
32546: PPUSH
32547: CALL_OW 251
32551: PPUSH
32552: LD_VAR 0 10
32556: PPUSH
32557: LD_VAR 0 5
32561: PPUSH
32562: CALL_OW 273
32566: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32567: LD_VAR 0 8
32571: PPUSH
32572: LD_VAR 0 9
32576: PPUSH
32577: CALL_OW 488
32581: NOT
32582: IFFALSE 32586
// exit ;
32584: GO 32693
// ComAnimCustom ( unit , 1 ) ;
32586: LD_VAR 0 1
32590: PPUSH
32591: LD_INT 1
32593: PPUSH
32594: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32598: LD_VAR 0 8
32602: PPUSH
32603: LD_VAR 0 9
32607: PPUSH
32608: LD_VAR 0 6
32612: PPUSH
32613: LD_VAR 0 7
32617: PPUSH
32618: CALL_OW 330
// repeat wait ( 1 ) ;
32622: LD_INT 1
32624: PPUSH
32625: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
32629: LD_VAR 0 1
32633: PPUSH
32634: CALL_OW 316
32638: PUSH
32639: LD_VAR 0 1
32643: PPUSH
32644: CALL_OW 314
32648: OR
32649: PUSH
32650: LD_VAR 0 1
32654: PPUSH
32655: CALL_OW 302
32659: NOT
32660: OR
32661: PUSH
32662: LD_VAR 0 1
32666: PPUSH
32667: CALL_OW 301
32671: OR
32672: IFFALSE 32622
// RemoveSeeing ( _x , _y , side ) ;
32674: LD_VAR 0 8
32678: PPUSH
32679: LD_VAR 0 9
32683: PPUSH
32684: LD_VAR 0 6
32688: PPUSH
32689: CALL_OW 331
// end ; end_of_file
32693: LD_VAR 0 4
32697: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32698: LD_INT 0
32700: PPUSH
32701: PPUSH
// if exist_mode then
32702: LD_VAR 0 2
32706: IFFALSE 32731
// unit := CreateCharacter ( prefix & ident ) else
32708: LD_ADDR_VAR 0 5
32712: PUSH
32713: LD_VAR 0 3
32717: PUSH
32718: LD_VAR 0 1
32722: STR
32723: PPUSH
32724: CALL_OW 34
32728: ST_TO_ADDR
32729: GO 32746
// unit := NewCharacter ( ident ) ;
32731: LD_ADDR_VAR 0 5
32735: PUSH
32736: LD_VAR 0 1
32740: PPUSH
32741: CALL_OW 25
32745: ST_TO_ADDR
// result := unit ;
32746: LD_ADDR_VAR 0 4
32750: PUSH
32751: LD_VAR 0 5
32755: ST_TO_ADDR
// end ;
32756: LD_VAR 0 4
32760: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
32761: LD_INT 0
32763: PPUSH
32764: PPUSH
// if not side or not nation then
32765: LD_VAR 0 1
32769: NOT
32770: PUSH
32771: LD_VAR 0 2
32775: NOT
32776: OR
32777: IFFALSE 32781
// exit ;
32779: GO 33549
// case nation of nation_american :
32781: LD_VAR 0 2
32785: PUSH
32786: LD_INT 1
32788: DOUBLE
32789: EQUAL
32790: IFTRUE 32794
32792: GO 33008
32794: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
32795: LD_ADDR_VAR 0 4
32799: PUSH
32800: LD_INT 35
32802: PUSH
32803: LD_INT 45
32805: PUSH
32806: LD_INT 46
32808: PUSH
32809: LD_INT 47
32811: PUSH
32812: LD_INT 82
32814: PUSH
32815: LD_INT 83
32817: PUSH
32818: LD_INT 84
32820: PUSH
32821: LD_INT 85
32823: PUSH
32824: LD_INT 86
32826: PUSH
32827: LD_INT 1
32829: PUSH
32830: LD_INT 2
32832: PUSH
32833: LD_INT 6
32835: PUSH
32836: LD_INT 15
32838: PUSH
32839: LD_INT 16
32841: PUSH
32842: LD_INT 7
32844: PUSH
32845: LD_INT 12
32847: PUSH
32848: LD_INT 13
32850: PUSH
32851: LD_INT 10
32853: PUSH
32854: LD_INT 14
32856: PUSH
32857: LD_INT 20
32859: PUSH
32860: LD_INT 21
32862: PUSH
32863: LD_INT 22
32865: PUSH
32866: LD_INT 25
32868: PUSH
32869: LD_INT 32
32871: PUSH
32872: LD_INT 27
32874: PUSH
32875: LD_INT 36
32877: PUSH
32878: LD_INT 69
32880: PUSH
32881: LD_INT 39
32883: PUSH
32884: LD_INT 34
32886: PUSH
32887: LD_INT 40
32889: PUSH
32890: LD_INT 48
32892: PUSH
32893: LD_INT 49
32895: PUSH
32896: LD_INT 50
32898: PUSH
32899: LD_INT 51
32901: PUSH
32902: LD_INT 52
32904: PUSH
32905: LD_INT 53
32907: PUSH
32908: LD_INT 54
32910: PUSH
32911: LD_INT 55
32913: PUSH
32914: LD_INT 56
32916: PUSH
32917: LD_INT 57
32919: PUSH
32920: LD_INT 58
32922: PUSH
32923: LD_INT 59
32925: PUSH
32926: LD_INT 60
32928: PUSH
32929: LD_INT 61
32931: PUSH
32932: LD_INT 62
32934: PUSH
32935: LD_INT 80
32937: PUSH
32938: LD_INT 82
32940: PUSH
32941: LD_INT 83
32943: PUSH
32944: LD_INT 84
32946: PUSH
32947: LD_INT 85
32949: PUSH
32950: LD_INT 86
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: LIST
32988: LIST
32989: LIST
32990: LIST
32991: LIST
32992: LIST
32993: LIST
32994: LIST
32995: LIST
32996: LIST
32997: LIST
32998: LIST
32999: LIST
33000: LIST
33001: LIST
33002: LIST
33003: LIST
33004: LIST
33005: ST_TO_ADDR
33006: GO 33473
33008: LD_INT 2
33010: DOUBLE
33011: EQUAL
33012: IFTRUE 33016
33014: GO 33242
33016: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
33017: LD_ADDR_VAR 0 4
33021: PUSH
33022: LD_INT 35
33024: PUSH
33025: LD_INT 45
33027: PUSH
33028: LD_INT 46
33030: PUSH
33031: LD_INT 47
33033: PUSH
33034: LD_INT 82
33036: PUSH
33037: LD_INT 83
33039: PUSH
33040: LD_INT 84
33042: PUSH
33043: LD_INT 85
33045: PUSH
33046: LD_INT 87
33048: PUSH
33049: LD_INT 70
33051: PUSH
33052: LD_INT 1
33054: PUSH
33055: LD_INT 11
33057: PUSH
33058: LD_INT 3
33060: PUSH
33061: LD_INT 4
33063: PUSH
33064: LD_INT 5
33066: PUSH
33067: LD_INT 6
33069: PUSH
33070: LD_INT 15
33072: PUSH
33073: LD_INT 18
33075: PUSH
33076: LD_INT 7
33078: PUSH
33079: LD_INT 17
33081: PUSH
33082: LD_INT 8
33084: PUSH
33085: LD_INT 20
33087: PUSH
33088: LD_INT 21
33090: PUSH
33091: LD_INT 22
33093: PUSH
33094: LD_INT 72
33096: PUSH
33097: LD_INT 26
33099: PUSH
33100: LD_INT 69
33102: PUSH
33103: LD_INT 39
33105: PUSH
33106: LD_INT 40
33108: PUSH
33109: LD_INT 41
33111: PUSH
33112: LD_INT 42
33114: PUSH
33115: LD_INT 43
33117: PUSH
33118: LD_INT 48
33120: PUSH
33121: LD_INT 49
33123: PUSH
33124: LD_INT 50
33126: PUSH
33127: LD_INT 51
33129: PUSH
33130: LD_INT 52
33132: PUSH
33133: LD_INT 53
33135: PUSH
33136: LD_INT 54
33138: PUSH
33139: LD_INT 55
33141: PUSH
33142: LD_INT 56
33144: PUSH
33145: LD_INT 60
33147: PUSH
33148: LD_INT 61
33150: PUSH
33151: LD_INT 62
33153: PUSH
33154: LD_INT 66
33156: PUSH
33157: LD_INT 67
33159: PUSH
33160: LD_INT 68
33162: PUSH
33163: LD_INT 81
33165: PUSH
33166: LD_INT 82
33168: PUSH
33169: LD_INT 83
33171: PUSH
33172: LD_INT 84
33174: PUSH
33175: LD_INT 85
33177: PUSH
33178: LD_INT 87
33180: PUSH
33181: LD_INT 88
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: ST_TO_ADDR
33240: GO 33473
33242: LD_INT 3
33244: DOUBLE
33245: EQUAL
33246: IFTRUE 33250
33248: GO 33472
33250: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
33251: LD_ADDR_VAR 0 4
33255: PUSH
33256: LD_INT 46
33258: PUSH
33259: LD_INT 47
33261: PUSH
33262: LD_INT 1
33264: PUSH
33265: LD_INT 2
33267: PUSH
33268: LD_INT 82
33270: PUSH
33271: LD_INT 83
33273: PUSH
33274: LD_INT 84
33276: PUSH
33277: LD_INT 85
33279: PUSH
33280: LD_INT 86
33282: PUSH
33283: LD_INT 11
33285: PUSH
33286: LD_INT 9
33288: PUSH
33289: LD_INT 20
33291: PUSH
33292: LD_INT 19
33294: PUSH
33295: LD_INT 21
33297: PUSH
33298: LD_INT 24
33300: PUSH
33301: LD_INT 22
33303: PUSH
33304: LD_INT 25
33306: PUSH
33307: LD_INT 28
33309: PUSH
33310: LD_INT 29
33312: PUSH
33313: LD_INT 30
33315: PUSH
33316: LD_INT 31
33318: PUSH
33319: LD_INT 37
33321: PUSH
33322: LD_INT 38
33324: PUSH
33325: LD_INT 32
33327: PUSH
33328: LD_INT 27
33330: PUSH
33331: LD_INT 33
33333: PUSH
33334: LD_INT 69
33336: PUSH
33337: LD_INT 39
33339: PUSH
33340: LD_INT 34
33342: PUSH
33343: LD_INT 40
33345: PUSH
33346: LD_INT 71
33348: PUSH
33349: LD_INT 23
33351: PUSH
33352: LD_INT 44
33354: PUSH
33355: LD_INT 48
33357: PUSH
33358: LD_INT 49
33360: PUSH
33361: LD_INT 50
33363: PUSH
33364: LD_INT 51
33366: PUSH
33367: LD_INT 52
33369: PUSH
33370: LD_INT 53
33372: PUSH
33373: LD_INT 54
33375: PUSH
33376: LD_INT 55
33378: PUSH
33379: LD_INT 56
33381: PUSH
33382: LD_INT 57
33384: PUSH
33385: LD_INT 58
33387: PUSH
33388: LD_INT 59
33390: PUSH
33391: LD_INT 63
33393: PUSH
33394: LD_INT 64
33396: PUSH
33397: LD_INT 65
33399: PUSH
33400: LD_INT 82
33402: PUSH
33403: LD_INT 83
33405: PUSH
33406: LD_INT 84
33408: PUSH
33409: LD_INT 85
33411: PUSH
33412: LD_INT 86
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: LIST
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: ST_TO_ADDR
33470: GO 33473
33472: POP
// if state > - 1 and state < 3 then
33473: LD_VAR 0 3
33477: PUSH
33478: LD_INT 1
33480: NEG
33481: GREATER
33482: PUSH
33483: LD_VAR 0 3
33487: PUSH
33488: LD_INT 3
33490: LESS
33491: AND
33492: IFFALSE 33549
// for i in result do
33494: LD_ADDR_VAR 0 5
33498: PUSH
33499: LD_VAR 0 4
33503: PUSH
33504: FOR_IN
33505: IFFALSE 33547
// if GetTech ( i , side ) <> state then
33507: LD_VAR 0 5
33511: PPUSH
33512: LD_VAR 0 1
33516: PPUSH
33517: CALL_OW 321
33521: PUSH
33522: LD_VAR 0 3
33526: NONEQUAL
33527: IFFALSE 33545
// result := result diff i ;
33529: LD_ADDR_VAR 0 4
33533: PUSH
33534: LD_VAR 0 4
33538: PUSH
33539: LD_VAR 0 5
33543: DIFF
33544: ST_TO_ADDR
33545: GO 33504
33547: POP
33548: POP
// end ;
33549: LD_VAR 0 4
33553: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33554: LD_INT 0
33556: PPUSH
33557: PPUSH
33558: PPUSH
// result := true ;
33559: LD_ADDR_VAR 0 3
33563: PUSH
33564: LD_INT 1
33566: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33567: LD_ADDR_VAR 0 5
33571: PUSH
33572: LD_VAR 0 2
33576: PPUSH
33577: CALL_OW 480
33581: ST_TO_ADDR
// if not tmp then
33582: LD_VAR 0 5
33586: NOT
33587: IFFALSE 33591
// exit ;
33589: GO 33640
// for i in tmp do
33591: LD_ADDR_VAR 0 4
33595: PUSH
33596: LD_VAR 0 5
33600: PUSH
33601: FOR_IN
33602: IFFALSE 33638
// if GetTech ( i , side ) <> state_researched then
33604: LD_VAR 0 4
33608: PPUSH
33609: LD_VAR 0 1
33613: PPUSH
33614: CALL_OW 321
33618: PUSH
33619: LD_INT 2
33621: NONEQUAL
33622: IFFALSE 33636
// begin result := false ;
33624: LD_ADDR_VAR 0 3
33628: PUSH
33629: LD_INT 0
33631: ST_TO_ADDR
// exit ;
33632: POP
33633: POP
33634: GO 33640
// end ;
33636: GO 33601
33638: POP
33639: POP
// end ;
33640: LD_VAR 0 3
33644: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33645: LD_INT 0
33647: PPUSH
33648: PPUSH
33649: PPUSH
33650: PPUSH
33651: PPUSH
33652: PPUSH
33653: PPUSH
33654: PPUSH
33655: PPUSH
33656: PPUSH
33657: PPUSH
33658: PPUSH
33659: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33660: LD_VAR 0 1
33664: NOT
33665: PUSH
33666: LD_VAR 0 1
33670: PPUSH
33671: CALL_OW 257
33675: PUSH
33676: LD_INT 9
33678: NONEQUAL
33679: OR
33680: IFFALSE 33684
// exit ;
33682: GO 34257
// side := GetSide ( unit ) ;
33684: LD_ADDR_VAR 0 9
33688: PUSH
33689: LD_VAR 0 1
33693: PPUSH
33694: CALL_OW 255
33698: ST_TO_ADDR
// tech_space := tech_spacanom ;
33699: LD_ADDR_VAR 0 12
33703: PUSH
33704: LD_INT 29
33706: ST_TO_ADDR
// tech_time := tech_taurad ;
33707: LD_ADDR_VAR 0 13
33711: PUSH
33712: LD_INT 28
33714: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33715: LD_ADDR_VAR 0 11
33719: PUSH
33720: LD_VAR 0 1
33724: PPUSH
33725: CALL_OW 310
33729: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
33730: LD_VAR 0 11
33734: PPUSH
33735: CALL_OW 247
33739: PUSH
33740: LD_INT 2
33742: EQUAL
33743: IFFALSE 33747
// exit ;
33745: GO 34257
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33747: LD_ADDR_VAR 0 8
33751: PUSH
33752: LD_INT 81
33754: PUSH
33755: LD_VAR 0 9
33759: PUSH
33760: EMPTY
33761: LIST
33762: LIST
33763: PUSH
33764: LD_INT 3
33766: PUSH
33767: LD_INT 21
33769: PUSH
33770: LD_INT 3
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PPUSH
33785: CALL_OW 69
33789: ST_TO_ADDR
// if not tmp then
33790: LD_VAR 0 8
33794: NOT
33795: IFFALSE 33799
// exit ;
33797: GO 34257
// if in_unit then
33799: LD_VAR 0 11
33803: IFFALSE 33827
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33805: LD_ADDR_VAR 0 10
33809: PUSH
33810: LD_VAR 0 8
33814: PPUSH
33815: LD_VAR 0 11
33819: PPUSH
33820: CALL_OW 74
33824: ST_TO_ADDR
33825: GO 33847
// enemy := NearestUnitToUnit ( tmp , unit ) ;
33827: LD_ADDR_VAR 0 10
33831: PUSH
33832: LD_VAR 0 8
33836: PPUSH
33837: LD_VAR 0 1
33841: PPUSH
33842: CALL_OW 74
33846: ST_TO_ADDR
// if not enemy then
33847: LD_VAR 0 10
33851: NOT
33852: IFFALSE 33856
// exit ;
33854: GO 34257
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
33856: LD_VAR 0 11
33860: PUSH
33861: LD_VAR 0 11
33865: PPUSH
33866: LD_VAR 0 10
33870: PPUSH
33871: CALL_OW 296
33875: PUSH
33876: LD_INT 13
33878: GREATER
33879: AND
33880: PUSH
33881: LD_VAR 0 1
33885: PPUSH
33886: LD_VAR 0 10
33890: PPUSH
33891: CALL_OW 296
33895: PUSH
33896: LD_INT 12
33898: GREATER
33899: OR
33900: IFFALSE 33904
// exit ;
33902: GO 34257
// missile := [ 1 ] ;
33904: LD_ADDR_VAR 0 14
33908: PUSH
33909: LD_INT 1
33911: PUSH
33912: EMPTY
33913: LIST
33914: ST_TO_ADDR
// if Researched ( side , tech_space ) then
33915: LD_VAR 0 9
33919: PPUSH
33920: LD_VAR 0 12
33924: PPUSH
33925: CALL_OW 325
33929: IFFALSE 33958
// missile := Replace ( missile , missile + 1 , 2 ) ;
33931: LD_ADDR_VAR 0 14
33935: PUSH
33936: LD_VAR 0 14
33940: PPUSH
33941: LD_VAR 0 14
33945: PUSH
33946: LD_INT 1
33948: PLUS
33949: PPUSH
33950: LD_INT 2
33952: PPUSH
33953: CALL_OW 1
33957: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
33958: LD_VAR 0 9
33962: PPUSH
33963: LD_VAR 0 13
33967: PPUSH
33968: CALL_OW 325
33972: PUSH
33973: LD_VAR 0 10
33977: PPUSH
33978: CALL_OW 255
33982: PPUSH
33983: LD_VAR 0 13
33987: PPUSH
33988: CALL_OW 325
33992: NOT
33993: AND
33994: IFFALSE 34023
// missile := Replace ( missile , missile + 1 , 3 ) ;
33996: LD_ADDR_VAR 0 14
34000: PUSH
34001: LD_VAR 0 14
34005: PPUSH
34006: LD_VAR 0 14
34010: PUSH
34011: LD_INT 1
34013: PLUS
34014: PPUSH
34015: LD_INT 3
34017: PPUSH
34018: CALL_OW 1
34022: ST_TO_ADDR
// if missile < 2 then
34023: LD_VAR 0 14
34027: PUSH
34028: LD_INT 2
34030: LESS
34031: IFFALSE 34035
// exit ;
34033: GO 34257
// x := GetX ( enemy ) ;
34035: LD_ADDR_VAR 0 4
34039: PUSH
34040: LD_VAR 0 10
34044: PPUSH
34045: CALL_OW 250
34049: ST_TO_ADDR
// y := GetY ( enemy ) ;
34050: LD_ADDR_VAR 0 5
34054: PUSH
34055: LD_VAR 0 10
34059: PPUSH
34060: CALL_OW 251
34064: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34065: LD_ADDR_VAR 0 6
34069: PUSH
34070: LD_VAR 0 4
34074: PUSH
34075: LD_INT 1
34077: NEG
34078: PPUSH
34079: LD_INT 1
34081: PPUSH
34082: CALL_OW 12
34086: PLUS
34087: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
34088: LD_ADDR_VAR 0 7
34092: PUSH
34093: LD_VAR 0 5
34097: PUSH
34098: LD_INT 1
34100: NEG
34101: PPUSH
34102: LD_INT 1
34104: PPUSH
34105: CALL_OW 12
34109: PLUS
34110: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34111: LD_VAR 0 6
34115: PPUSH
34116: LD_VAR 0 7
34120: PPUSH
34121: CALL_OW 488
34125: NOT
34126: IFFALSE 34148
// begin _x := x ;
34128: LD_ADDR_VAR 0 6
34132: PUSH
34133: LD_VAR 0 4
34137: ST_TO_ADDR
// _y := y ;
34138: LD_ADDR_VAR 0 7
34142: PUSH
34143: LD_VAR 0 5
34147: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
34148: LD_ADDR_VAR 0 3
34152: PUSH
34153: LD_INT 1
34155: PPUSH
34156: LD_VAR 0 14
34160: PPUSH
34161: CALL_OW 12
34165: ST_TO_ADDR
// case i of 1 :
34166: LD_VAR 0 3
34170: PUSH
34171: LD_INT 1
34173: DOUBLE
34174: EQUAL
34175: IFTRUE 34179
34177: GO 34196
34179: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
34180: LD_VAR 0 1
34184: PPUSH
34185: LD_VAR 0 10
34189: PPUSH
34190: CALL_OW 115
34194: GO 34257
34196: LD_INT 2
34198: DOUBLE
34199: EQUAL
34200: IFTRUE 34204
34202: GO 34226
34204: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
34205: LD_VAR 0 1
34209: PPUSH
34210: LD_VAR 0 6
34214: PPUSH
34215: LD_VAR 0 7
34219: PPUSH
34220: CALL_OW 153
34224: GO 34257
34226: LD_INT 3
34228: DOUBLE
34229: EQUAL
34230: IFTRUE 34234
34232: GO 34256
34234: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
34235: LD_VAR 0 1
34239: PPUSH
34240: LD_VAR 0 6
34244: PPUSH
34245: LD_VAR 0 7
34249: PPUSH
34250: CALL_OW 154
34254: GO 34257
34256: POP
// end ;
34257: LD_VAR 0 2
34261: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
34262: LD_INT 0
34264: PPUSH
34265: PPUSH
34266: PPUSH
34267: PPUSH
34268: PPUSH
34269: PPUSH
// if not unit or not building then
34270: LD_VAR 0 1
34274: NOT
34275: PUSH
34276: LD_VAR 0 2
34280: NOT
34281: OR
34282: IFFALSE 34286
// exit ;
34284: GO 34444
// x := GetX ( building ) ;
34286: LD_ADDR_VAR 0 5
34290: PUSH
34291: LD_VAR 0 2
34295: PPUSH
34296: CALL_OW 250
34300: ST_TO_ADDR
// y := GetY ( building ) ;
34301: LD_ADDR_VAR 0 6
34305: PUSH
34306: LD_VAR 0 2
34310: PPUSH
34311: CALL_OW 251
34315: ST_TO_ADDR
// for i = 0 to 5 do
34316: LD_ADDR_VAR 0 4
34320: PUSH
34321: DOUBLE
34322: LD_INT 0
34324: DEC
34325: ST_TO_ADDR
34326: LD_INT 5
34328: PUSH
34329: FOR_TO
34330: IFFALSE 34442
// begin _x := ShiftX ( x , i , 3 ) ;
34332: LD_ADDR_VAR 0 7
34336: PUSH
34337: LD_VAR 0 5
34341: PPUSH
34342: LD_VAR 0 4
34346: PPUSH
34347: LD_INT 3
34349: PPUSH
34350: CALL_OW 272
34354: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
34355: LD_ADDR_VAR 0 8
34359: PUSH
34360: LD_VAR 0 6
34364: PPUSH
34365: LD_VAR 0 4
34369: PPUSH
34370: LD_INT 3
34372: PPUSH
34373: CALL_OW 273
34377: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34378: LD_VAR 0 7
34382: PPUSH
34383: LD_VAR 0 8
34387: PPUSH
34388: CALL_OW 488
34392: NOT
34393: IFFALSE 34397
// continue ;
34395: GO 34329
// if HexInfo ( _x , _y ) = 0 then
34397: LD_VAR 0 7
34401: PPUSH
34402: LD_VAR 0 8
34406: PPUSH
34407: CALL_OW 428
34411: PUSH
34412: LD_INT 0
34414: EQUAL
34415: IFFALSE 34440
// begin ComMoveXY ( unit , _x , _y ) ;
34417: LD_VAR 0 1
34421: PPUSH
34422: LD_VAR 0 7
34426: PPUSH
34427: LD_VAR 0 8
34431: PPUSH
34432: CALL_OW 111
// exit ;
34436: POP
34437: POP
34438: GO 34444
// end ; end ;
34440: GO 34329
34442: POP
34443: POP
// end ;
34444: LD_VAR 0 3
34448: RET
// export function ScanBase ( side , base_area ) ; begin
34449: LD_INT 0
34451: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34452: LD_ADDR_VAR 0 3
34456: PUSH
34457: LD_VAR 0 2
34461: PPUSH
34462: LD_INT 81
34464: PUSH
34465: LD_VAR 0 1
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: PPUSH
34474: CALL_OW 70
34478: ST_TO_ADDR
// end ;
34479: LD_VAR 0 3
34483: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34484: LD_INT 0
34486: PPUSH
34487: PPUSH
34488: PPUSH
34489: PPUSH
// result := false ;
34490: LD_ADDR_VAR 0 2
34494: PUSH
34495: LD_INT 0
34497: ST_TO_ADDR
// side := GetSide ( unit ) ;
34498: LD_ADDR_VAR 0 3
34502: PUSH
34503: LD_VAR 0 1
34507: PPUSH
34508: CALL_OW 255
34512: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34513: LD_ADDR_VAR 0 4
34517: PUSH
34518: LD_VAR 0 1
34522: PPUSH
34523: CALL_OW 248
34527: ST_TO_ADDR
// case nat of 1 :
34528: LD_VAR 0 4
34532: PUSH
34533: LD_INT 1
34535: DOUBLE
34536: EQUAL
34537: IFTRUE 34541
34539: GO 34552
34541: POP
// tech := tech_lassight ; 2 :
34542: LD_ADDR_VAR 0 5
34546: PUSH
34547: LD_INT 12
34549: ST_TO_ADDR
34550: GO 34591
34552: LD_INT 2
34554: DOUBLE
34555: EQUAL
34556: IFTRUE 34560
34558: GO 34571
34560: POP
// tech := tech_mortar ; 3 :
34561: LD_ADDR_VAR 0 5
34565: PUSH
34566: LD_INT 41
34568: ST_TO_ADDR
34569: GO 34591
34571: LD_INT 3
34573: DOUBLE
34574: EQUAL
34575: IFTRUE 34579
34577: GO 34590
34579: POP
// tech := tech_bazooka ; end ;
34580: LD_ADDR_VAR 0 5
34584: PUSH
34585: LD_INT 44
34587: ST_TO_ADDR
34588: GO 34591
34590: POP
// if Researched ( side , tech ) then
34591: LD_VAR 0 3
34595: PPUSH
34596: LD_VAR 0 5
34600: PPUSH
34601: CALL_OW 325
34605: IFFALSE 34632
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34607: LD_ADDR_VAR 0 2
34611: PUSH
34612: LD_INT 5
34614: PUSH
34615: LD_INT 8
34617: PUSH
34618: LD_INT 9
34620: PUSH
34621: EMPTY
34622: LIST
34623: LIST
34624: LIST
34625: PUSH
34626: LD_VAR 0 4
34630: ARRAY
34631: ST_TO_ADDR
// end ;
34632: LD_VAR 0 2
34636: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34637: LD_INT 0
34639: PPUSH
34640: PPUSH
34641: PPUSH
// if not mines then
34642: LD_VAR 0 2
34646: NOT
34647: IFFALSE 34651
// exit ;
34649: GO 34795
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34651: LD_ADDR_VAR 0 5
34655: PUSH
34656: LD_INT 81
34658: PUSH
34659: LD_VAR 0 1
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: PUSH
34668: LD_INT 3
34670: PUSH
34671: LD_INT 21
34673: PUSH
34674: LD_INT 3
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PPUSH
34689: CALL_OW 69
34693: ST_TO_ADDR
// for i in mines do
34694: LD_ADDR_VAR 0 4
34698: PUSH
34699: LD_VAR 0 2
34703: PUSH
34704: FOR_IN
34705: IFFALSE 34793
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34707: LD_VAR 0 4
34711: PUSH
34712: LD_INT 1
34714: ARRAY
34715: PPUSH
34716: LD_VAR 0 4
34720: PUSH
34721: LD_INT 2
34723: ARRAY
34724: PPUSH
34725: CALL_OW 458
34729: NOT
34730: IFFALSE 34734
// continue ;
34732: GO 34704
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
34734: LD_VAR 0 4
34738: PUSH
34739: LD_INT 1
34741: ARRAY
34742: PPUSH
34743: LD_VAR 0 4
34747: PUSH
34748: LD_INT 2
34750: ARRAY
34751: PPUSH
34752: CALL_OW 428
34756: PUSH
34757: LD_VAR 0 5
34761: IN
34762: IFFALSE 34791
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
34764: LD_VAR 0 4
34768: PUSH
34769: LD_INT 1
34771: ARRAY
34772: PPUSH
34773: LD_VAR 0 4
34777: PUSH
34778: LD_INT 2
34780: ARRAY
34781: PPUSH
34782: LD_VAR 0 1
34786: PPUSH
34787: CALL_OW 456
// end ;
34791: GO 34704
34793: POP
34794: POP
// end ;
34795: LD_VAR 0 3
34799: RET
// export function Count ( array ) ; var i ; begin
34800: LD_INT 0
34802: PPUSH
34803: PPUSH
// result := 0 ;
34804: LD_ADDR_VAR 0 2
34808: PUSH
34809: LD_INT 0
34811: ST_TO_ADDR
// for i in array do
34812: LD_ADDR_VAR 0 3
34816: PUSH
34817: LD_VAR 0 1
34821: PUSH
34822: FOR_IN
34823: IFFALSE 34847
// if i then
34825: LD_VAR 0 3
34829: IFFALSE 34845
// result := result + 1 ;
34831: LD_ADDR_VAR 0 2
34835: PUSH
34836: LD_VAR 0 2
34840: PUSH
34841: LD_INT 1
34843: PLUS
34844: ST_TO_ADDR
34845: GO 34822
34847: POP
34848: POP
// end ;
34849: LD_VAR 0 2
34853: RET
// export function IsEmpty ( building ) ; begin
34854: LD_INT 0
34856: PPUSH
// if not building then
34857: LD_VAR 0 1
34861: NOT
34862: IFFALSE 34866
// exit ;
34864: GO 34909
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
34866: LD_ADDR_VAR 0 2
34870: PUSH
34871: LD_VAR 0 1
34875: PUSH
34876: LD_INT 22
34878: PUSH
34879: LD_VAR 0 1
34883: PPUSH
34884: CALL_OW 255
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: LD_INT 58
34895: PUSH
34896: EMPTY
34897: LIST
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PPUSH
34903: CALL_OW 69
34907: IN
34908: ST_TO_ADDR
// end ;
34909: LD_VAR 0 2
34913: RET
// export function IsNotFull ( building ) ; var places ; begin
34914: LD_INT 0
34916: PPUSH
34917: PPUSH
// if not building then
34918: LD_VAR 0 1
34922: NOT
34923: IFFALSE 34927
// exit ;
34925: GO 35098
// result := false ;
34927: LD_ADDR_VAR 0 2
34931: PUSH
34932: LD_INT 0
34934: ST_TO_ADDR
// places := 0 ;
34935: LD_ADDR_VAR 0 3
34939: PUSH
34940: LD_INT 0
34942: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
34943: LD_VAR 0 1
34947: PPUSH
34948: CALL_OW 266
34952: PUSH
34953: LD_INT 0
34955: DOUBLE
34956: EQUAL
34957: IFTRUE 35015
34959: LD_INT 1
34961: DOUBLE
34962: EQUAL
34963: IFTRUE 35015
34965: LD_INT 6
34967: DOUBLE
34968: EQUAL
34969: IFTRUE 35015
34971: LD_INT 7
34973: DOUBLE
34974: EQUAL
34975: IFTRUE 35015
34977: LD_INT 8
34979: DOUBLE
34980: EQUAL
34981: IFTRUE 35015
34983: LD_INT 4
34985: DOUBLE
34986: EQUAL
34987: IFTRUE 35015
34989: LD_INT 5
34991: DOUBLE
34992: EQUAL
34993: IFTRUE 35015
34995: LD_INT 2
34997: DOUBLE
34998: EQUAL
34999: IFTRUE 35015
35001: LD_INT 3
35003: DOUBLE
35004: EQUAL
35005: IFTRUE 35015
35007: LD_INT 35
35009: DOUBLE
35010: EQUAL
35011: IFTRUE 35015
35013: GO 35026
35015: POP
// places := 6 ; b_bunker , b_breastwork :
35016: LD_ADDR_VAR 0 3
35020: PUSH
35021: LD_INT 6
35023: ST_TO_ADDR
35024: GO 35071
35026: LD_INT 32
35028: DOUBLE
35029: EQUAL
35030: IFTRUE 35040
35032: LD_INT 31
35034: DOUBLE
35035: EQUAL
35036: IFTRUE 35040
35038: GO 35051
35040: POP
// places := 1 ; b_control_tower :
35041: LD_ADDR_VAR 0 3
35045: PUSH
35046: LD_INT 1
35048: ST_TO_ADDR
35049: GO 35071
35051: LD_INT 36
35053: DOUBLE
35054: EQUAL
35055: IFTRUE 35059
35057: GO 35070
35059: POP
// places := 3 ; end ;
35060: LD_ADDR_VAR 0 3
35064: PUSH
35065: LD_INT 3
35067: ST_TO_ADDR
35068: GO 35071
35070: POP
// if places then
35071: LD_VAR 0 3
35075: IFFALSE 35098
// result := UnitsInside ( building ) < places ;
35077: LD_ADDR_VAR 0 2
35081: PUSH
35082: LD_VAR 0 1
35086: PPUSH
35087: CALL_OW 313
35091: PUSH
35092: LD_VAR 0 3
35096: LESS
35097: ST_TO_ADDR
// end ;
35098: LD_VAR 0 2
35102: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35103: LD_INT 0
35105: PPUSH
35106: PPUSH
35107: PPUSH
35108: PPUSH
// tmp := [ ] ;
35109: LD_ADDR_VAR 0 3
35113: PUSH
35114: EMPTY
35115: ST_TO_ADDR
// list := [ ] ;
35116: LD_ADDR_VAR 0 5
35120: PUSH
35121: EMPTY
35122: ST_TO_ADDR
// for i = 16 to 25 do
35123: LD_ADDR_VAR 0 4
35127: PUSH
35128: DOUBLE
35129: LD_INT 16
35131: DEC
35132: ST_TO_ADDR
35133: LD_INT 25
35135: PUSH
35136: FOR_TO
35137: IFFALSE 35210
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35139: LD_ADDR_VAR 0 3
35143: PUSH
35144: LD_VAR 0 3
35148: PUSH
35149: LD_INT 22
35151: PUSH
35152: LD_VAR 0 1
35156: PPUSH
35157: CALL_OW 255
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: LD_INT 91
35168: PUSH
35169: LD_VAR 0 1
35173: PUSH
35174: LD_INT 6
35176: PUSH
35177: EMPTY
35178: LIST
35179: LIST
35180: LIST
35181: PUSH
35182: LD_INT 30
35184: PUSH
35185: LD_VAR 0 4
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: LIST
35198: PUSH
35199: EMPTY
35200: LIST
35201: PPUSH
35202: CALL_OW 69
35206: ADD
35207: ST_TO_ADDR
35208: GO 35136
35210: POP
35211: POP
// for i = 1 to tmp do
35212: LD_ADDR_VAR 0 4
35216: PUSH
35217: DOUBLE
35218: LD_INT 1
35220: DEC
35221: ST_TO_ADDR
35222: LD_VAR 0 3
35226: PUSH
35227: FOR_TO
35228: IFFALSE 35316
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
35230: LD_ADDR_VAR 0 5
35234: PUSH
35235: LD_VAR 0 5
35239: PUSH
35240: LD_VAR 0 3
35244: PUSH
35245: LD_VAR 0 4
35249: ARRAY
35250: PPUSH
35251: CALL_OW 266
35255: PUSH
35256: LD_VAR 0 3
35260: PUSH
35261: LD_VAR 0 4
35265: ARRAY
35266: PPUSH
35267: CALL_OW 250
35271: PUSH
35272: LD_VAR 0 3
35276: PUSH
35277: LD_VAR 0 4
35281: ARRAY
35282: PPUSH
35283: CALL_OW 251
35287: PUSH
35288: LD_VAR 0 3
35292: PUSH
35293: LD_VAR 0 4
35297: ARRAY
35298: PPUSH
35299: CALL_OW 254
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: LIST
35308: LIST
35309: PUSH
35310: EMPTY
35311: LIST
35312: ADD
35313: ST_TO_ADDR
35314: GO 35227
35316: POP
35317: POP
// result := list ;
35318: LD_ADDR_VAR 0 2
35322: PUSH
35323: LD_VAR 0 5
35327: ST_TO_ADDR
// end ;
35328: LD_VAR 0 2
35332: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
35333: LD_INT 0
35335: PPUSH
35336: PPUSH
35337: PPUSH
35338: PPUSH
35339: PPUSH
35340: PPUSH
35341: PPUSH
// if not factory then
35342: LD_VAR 0 1
35346: NOT
35347: IFFALSE 35351
// exit ;
35349: GO 35944
// if control = control_apeman then
35351: LD_VAR 0 4
35355: PUSH
35356: LD_INT 5
35358: EQUAL
35359: IFFALSE 35468
// begin tmp := UnitsInside ( factory ) ;
35361: LD_ADDR_VAR 0 8
35365: PUSH
35366: LD_VAR 0 1
35370: PPUSH
35371: CALL_OW 313
35375: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
35376: LD_VAR 0 8
35380: PPUSH
35381: LD_INT 25
35383: PUSH
35384: LD_INT 12
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PPUSH
35391: CALL_OW 72
35395: NOT
35396: IFFALSE 35406
// control := control_manual ;
35398: LD_ADDR_VAR 0 4
35402: PUSH
35403: LD_INT 1
35405: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
35406: LD_ADDR_VAR 0 8
35410: PUSH
35411: LD_VAR 0 1
35415: PPUSH
35416: CALL 35103 0 1
35420: ST_TO_ADDR
// if tmp then
35421: LD_VAR 0 8
35425: IFFALSE 35468
// begin for i in tmp do
35427: LD_ADDR_VAR 0 7
35431: PUSH
35432: LD_VAR 0 8
35436: PUSH
35437: FOR_IN
35438: IFFALSE 35466
// if i [ 1 ] = b_ext_radio then
35440: LD_VAR 0 7
35444: PUSH
35445: LD_INT 1
35447: ARRAY
35448: PUSH
35449: LD_INT 22
35451: EQUAL
35452: IFFALSE 35464
// begin control := control_remote ;
35454: LD_ADDR_VAR 0 4
35458: PUSH
35459: LD_INT 2
35461: ST_TO_ADDR
// break ;
35462: GO 35466
// end ;
35464: GO 35437
35466: POP
35467: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35468: LD_VAR 0 1
35472: PPUSH
35473: LD_VAR 0 2
35477: PPUSH
35478: LD_VAR 0 3
35482: PPUSH
35483: LD_VAR 0 4
35487: PPUSH
35488: LD_VAR 0 5
35492: PPUSH
35493: CALL_OW 448
35497: IFFALSE 35532
// begin result := [ chassis , engine , control , weapon ] ;
35499: LD_ADDR_VAR 0 6
35503: PUSH
35504: LD_VAR 0 2
35508: PUSH
35509: LD_VAR 0 3
35513: PUSH
35514: LD_VAR 0 4
35518: PUSH
35519: LD_VAR 0 5
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: LIST
35528: LIST
35529: ST_TO_ADDR
// exit ;
35530: GO 35944
// end ; _chassis := AvailableChassisList ( factory ) ;
35532: LD_ADDR_VAR 0 9
35536: PUSH
35537: LD_VAR 0 1
35541: PPUSH
35542: CALL_OW 475
35546: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35547: LD_ADDR_VAR 0 11
35551: PUSH
35552: LD_VAR 0 1
35556: PPUSH
35557: CALL_OW 476
35561: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35562: LD_ADDR_VAR 0 12
35566: PUSH
35567: LD_VAR 0 1
35571: PPUSH
35572: CALL_OW 477
35576: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35577: LD_ADDR_VAR 0 10
35581: PUSH
35582: LD_VAR 0 1
35586: PPUSH
35587: CALL_OW 478
35591: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35592: LD_VAR 0 9
35596: NOT
35597: PUSH
35598: LD_VAR 0 11
35602: NOT
35603: OR
35604: PUSH
35605: LD_VAR 0 12
35609: NOT
35610: OR
35611: PUSH
35612: LD_VAR 0 10
35616: NOT
35617: OR
35618: IFFALSE 35653
// begin result := [ chassis , engine , control , weapon ] ;
35620: LD_ADDR_VAR 0 6
35624: PUSH
35625: LD_VAR 0 2
35629: PUSH
35630: LD_VAR 0 3
35634: PUSH
35635: LD_VAR 0 4
35639: PUSH
35640: LD_VAR 0 5
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: ST_TO_ADDR
// exit ;
35651: GO 35944
// end ; if not chassis in _chassis then
35653: LD_VAR 0 2
35657: PUSH
35658: LD_VAR 0 9
35662: IN
35663: NOT
35664: IFFALSE 35690
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35666: LD_ADDR_VAR 0 2
35670: PUSH
35671: LD_VAR 0 9
35675: PUSH
35676: LD_INT 1
35678: PPUSH
35679: LD_VAR 0 9
35683: PPUSH
35684: CALL_OW 12
35688: ARRAY
35689: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35690: LD_VAR 0 2
35694: PPUSH
35695: LD_VAR 0 3
35699: PPUSH
35700: CALL 35949 0 2
35704: NOT
35705: IFFALSE 35764
// repeat engine := _engine [ 1 ] ;
35707: LD_ADDR_VAR 0 3
35711: PUSH
35712: LD_VAR 0 11
35716: PUSH
35717: LD_INT 1
35719: ARRAY
35720: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35721: LD_ADDR_VAR 0 11
35725: PUSH
35726: LD_VAR 0 11
35730: PPUSH
35731: LD_INT 1
35733: PPUSH
35734: CALL_OW 3
35738: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35739: LD_VAR 0 2
35743: PPUSH
35744: LD_VAR 0 3
35748: PPUSH
35749: CALL 35949 0 2
35753: PUSH
35754: LD_VAR 0 11
35758: PUSH
35759: EMPTY
35760: EQUAL
35761: OR
35762: IFFALSE 35707
// if not control in _control then
35764: LD_VAR 0 4
35768: PUSH
35769: LD_VAR 0 12
35773: IN
35774: NOT
35775: IFFALSE 35801
// control := _control [ rand ( 1 , _control ) ] ;
35777: LD_ADDR_VAR 0 4
35781: PUSH
35782: LD_VAR 0 12
35786: PUSH
35787: LD_INT 1
35789: PPUSH
35790: LD_VAR 0 12
35794: PPUSH
35795: CALL_OW 12
35799: ARRAY
35800: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35801: LD_VAR 0 2
35805: PPUSH
35806: LD_VAR 0 5
35810: PPUSH
35811: CALL 36169 0 2
35815: NOT
35816: IFFALSE 35875
// repeat weapon := _weapon [ 1 ] ;
35818: LD_ADDR_VAR 0 5
35822: PUSH
35823: LD_VAR 0 10
35827: PUSH
35828: LD_INT 1
35830: ARRAY
35831: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
35832: LD_ADDR_VAR 0 10
35836: PUSH
35837: LD_VAR 0 10
35841: PPUSH
35842: LD_INT 1
35844: PPUSH
35845: CALL_OW 3
35849: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
35850: LD_VAR 0 2
35854: PPUSH
35855: LD_VAR 0 5
35859: PPUSH
35860: CALL 36169 0 2
35864: PUSH
35865: LD_VAR 0 10
35869: PUSH
35870: EMPTY
35871: EQUAL
35872: OR
35873: IFFALSE 35818
// result := [ ] ;
35875: LD_ADDR_VAR 0 6
35879: PUSH
35880: EMPTY
35881: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35882: LD_VAR 0 1
35886: PPUSH
35887: LD_VAR 0 2
35891: PPUSH
35892: LD_VAR 0 3
35896: PPUSH
35897: LD_VAR 0 4
35901: PPUSH
35902: LD_VAR 0 5
35906: PPUSH
35907: CALL_OW 448
35911: IFFALSE 35944
// result := [ chassis , engine , control , weapon ] ;
35913: LD_ADDR_VAR 0 6
35917: PUSH
35918: LD_VAR 0 2
35922: PUSH
35923: LD_VAR 0 3
35927: PUSH
35928: LD_VAR 0 4
35932: PUSH
35933: LD_VAR 0 5
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: LIST
35942: LIST
35943: ST_TO_ADDR
// end ;
35944: LD_VAR 0 6
35948: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
35949: LD_INT 0
35951: PPUSH
// if not chassis or not engine then
35952: LD_VAR 0 1
35956: NOT
35957: PUSH
35958: LD_VAR 0 2
35962: NOT
35963: OR
35964: IFFALSE 35968
// exit ;
35966: GO 36164
// case engine of engine_solar :
35968: LD_VAR 0 2
35972: PUSH
35973: LD_INT 2
35975: DOUBLE
35976: EQUAL
35977: IFTRUE 35981
35979: GO 36019
35981: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
35982: LD_ADDR_VAR 0 3
35986: PUSH
35987: LD_INT 11
35989: PUSH
35990: LD_INT 12
35992: PUSH
35993: LD_INT 13
35995: PUSH
35996: LD_INT 14
35998: PUSH
35999: LD_INT 1
36001: PUSH
36002: LD_INT 2
36004: PUSH
36005: LD_INT 3
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: LIST
36012: LIST
36013: LIST
36014: LIST
36015: LIST
36016: ST_TO_ADDR
36017: GO 36148
36019: LD_INT 1
36021: DOUBLE
36022: EQUAL
36023: IFTRUE 36027
36025: GO 36089
36027: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36028: LD_ADDR_VAR 0 3
36032: PUSH
36033: LD_INT 11
36035: PUSH
36036: LD_INT 12
36038: PUSH
36039: LD_INT 13
36041: PUSH
36042: LD_INT 14
36044: PUSH
36045: LD_INT 1
36047: PUSH
36048: LD_INT 2
36050: PUSH
36051: LD_INT 3
36053: PUSH
36054: LD_INT 4
36056: PUSH
36057: LD_INT 5
36059: PUSH
36060: LD_INT 21
36062: PUSH
36063: LD_INT 23
36065: PUSH
36066: LD_INT 22
36068: PUSH
36069: LD_INT 24
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: LIST
36076: LIST
36077: LIST
36078: LIST
36079: LIST
36080: LIST
36081: LIST
36082: LIST
36083: LIST
36084: LIST
36085: LIST
36086: ST_TO_ADDR
36087: GO 36148
36089: LD_INT 3
36091: DOUBLE
36092: EQUAL
36093: IFTRUE 36097
36095: GO 36147
36097: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36098: LD_ADDR_VAR 0 3
36102: PUSH
36103: LD_INT 13
36105: PUSH
36106: LD_INT 14
36108: PUSH
36109: LD_INT 2
36111: PUSH
36112: LD_INT 3
36114: PUSH
36115: LD_INT 4
36117: PUSH
36118: LD_INT 5
36120: PUSH
36121: LD_INT 21
36123: PUSH
36124: LD_INT 22
36126: PUSH
36127: LD_INT 23
36129: PUSH
36130: LD_INT 24
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: ST_TO_ADDR
36145: GO 36148
36147: POP
// result := ( chassis in result ) ;
36148: LD_ADDR_VAR 0 3
36152: PUSH
36153: LD_VAR 0 1
36157: PUSH
36158: LD_VAR 0 3
36162: IN
36163: ST_TO_ADDR
// end ;
36164: LD_VAR 0 3
36168: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36169: LD_INT 0
36171: PPUSH
// if not chassis or not weapon then
36172: LD_VAR 0 1
36176: NOT
36177: PUSH
36178: LD_VAR 0 2
36182: NOT
36183: OR
36184: IFFALSE 36188
// exit ;
36186: GO 37248
// case weapon of us_machine_gun :
36188: LD_VAR 0 2
36192: PUSH
36193: LD_INT 2
36195: DOUBLE
36196: EQUAL
36197: IFTRUE 36201
36199: GO 36231
36201: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36202: LD_ADDR_VAR 0 3
36206: PUSH
36207: LD_INT 1
36209: PUSH
36210: LD_INT 2
36212: PUSH
36213: LD_INT 3
36215: PUSH
36216: LD_INT 4
36218: PUSH
36219: LD_INT 5
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: ST_TO_ADDR
36229: GO 37232
36231: LD_INT 3
36233: DOUBLE
36234: EQUAL
36235: IFTRUE 36239
36237: GO 36269
36239: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
36240: LD_ADDR_VAR 0 3
36244: PUSH
36245: LD_INT 1
36247: PUSH
36248: LD_INT 2
36250: PUSH
36251: LD_INT 3
36253: PUSH
36254: LD_INT 4
36256: PUSH
36257: LD_INT 5
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: LIST
36266: ST_TO_ADDR
36267: GO 37232
36269: LD_INT 11
36271: DOUBLE
36272: EQUAL
36273: IFTRUE 36277
36275: GO 36307
36277: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
36278: LD_ADDR_VAR 0 3
36282: PUSH
36283: LD_INT 1
36285: PUSH
36286: LD_INT 2
36288: PUSH
36289: LD_INT 3
36291: PUSH
36292: LD_INT 4
36294: PUSH
36295: LD_INT 5
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: ST_TO_ADDR
36305: GO 37232
36307: LD_INT 4
36309: DOUBLE
36310: EQUAL
36311: IFTRUE 36315
36313: GO 36341
36315: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
36316: LD_ADDR_VAR 0 3
36320: PUSH
36321: LD_INT 2
36323: PUSH
36324: LD_INT 3
36326: PUSH
36327: LD_INT 4
36329: PUSH
36330: LD_INT 5
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: LIST
36337: LIST
36338: ST_TO_ADDR
36339: GO 37232
36341: LD_INT 5
36343: DOUBLE
36344: EQUAL
36345: IFTRUE 36349
36347: GO 36375
36349: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
36350: LD_ADDR_VAR 0 3
36354: PUSH
36355: LD_INT 2
36357: PUSH
36358: LD_INT 3
36360: PUSH
36361: LD_INT 4
36363: PUSH
36364: LD_INT 5
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: LIST
36371: LIST
36372: ST_TO_ADDR
36373: GO 37232
36375: LD_INT 9
36377: DOUBLE
36378: EQUAL
36379: IFTRUE 36383
36381: GO 36409
36383: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
36384: LD_ADDR_VAR 0 3
36388: PUSH
36389: LD_INT 2
36391: PUSH
36392: LD_INT 3
36394: PUSH
36395: LD_INT 4
36397: PUSH
36398: LD_INT 5
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: ST_TO_ADDR
36407: GO 37232
36409: LD_INT 7
36411: DOUBLE
36412: EQUAL
36413: IFTRUE 36417
36415: GO 36443
36417: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
36418: LD_ADDR_VAR 0 3
36422: PUSH
36423: LD_INT 2
36425: PUSH
36426: LD_INT 3
36428: PUSH
36429: LD_INT 4
36431: PUSH
36432: LD_INT 5
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: ST_TO_ADDR
36441: GO 37232
36443: LD_INT 12
36445: DOUBLE
36446: EQUAL
36447: IFTRUE 36451
36449: GO 36477
36451: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
36452: LD_ADDR_VAR 0 3
36456: PUSH
36457: LD_INT 2
36459: PUSH
36460: LD_INT 3
36462: PUSH
36463: LD_INT 4
36465: PUSH
36466: LD_INT 5
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: LIST
36473: LIST
36474: ST_TO_ADDR
36475: GO 37232
36477: LD_INT 13
36479: DOUBLE
36480: EQUAL
36481: IFTRUE 36485
36483: GO 36511
36485: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
36486: LD_ADDR_VAR 0 3
36490: PUSH
36491: LD_INT 2
36493: PUSH
36494: LD_INT 3
36496: PUSH
36497: LD_INT 4
36499: PUSH
36500: LD_INT 5
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: LIST
36507: LIST
36508: ST_TO_ADDR
36509: GO 37232
36511: LD_INT 14
36513: DOUBLE
36514: EQUAL
36515: IFTRUE 36519
36517: GO 36537
36519: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
36520: LD_ADDR_VAR 0 3
36524: PUSH
36525: LD_INT 4
36527: PUSH
36528: LD_INT 5
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: ST_TO_ADDR
36535: GO 37232
36537: LD_INT 6
36539: DOUBLE
36540: EQUAL
36541: IFTRUE 36545
36543: GO 36563
36545: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36546: LD_ADDR_VAR 0 3
36550: PUSH
36551: LD_INT 4
36553: PUSH
36554: LD_INT 5
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: ST_TO_ADDR
36561: GO 37232
36563: LD_INT 10
36565: DOUBLE
36566: EQUAL
36567: IFTRUE 36571
36569: GO 36589
36571: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36572: LD_ADDR_VAR 0 3
36576: PUSH
36577: LD_INT 4
36579: PUSH
36580: LD_INT 5
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: ST_TO_ADDR
36587: GO 37232
36589: LD_INT 22
36591: DOUBLE
36592: EQUAL
36593: IFTRUE 36597
36595: GO 36623
36597: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36598: LD_ADDR_VAR 0 3
36602: PUSH
36603: LD_INT 11
36605: PUSH
36606: LD_INT 12
36608: PUSH
36609: LD_INT 13
36611: PUSH
36612: LD_INT 14
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: LIST
36619: LIST
36620: ST_TO_ADDR
36621: GO 37232
36623: LD_INT 23
36625: DOUBLE
36626: EQUAL
36627: IFTRUE 36631
36629: GO 36657
36631: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36632: LD_ADDR_VAR 0 3
36636: PUSH
36637: LD_INT 11
36639: PUSH
36640: LD_INT 12
36642: PUSH
36643: LD_INT 13
36645: PUSH
36646: LD_INT 14
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: LIST
36653: LIST
36654: ST_TO_ADDR
36655: GO 37232
36657: LD_INT 24
36659: DOUBLE
36660: EQUAL
36661: IFTRUE 36665
36663: GO 36691
36665: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36666: LD_ADDR_VAR 0 3
36670: PUSH
36671: LD_INT 11
36673: PUSH
36674: LD_INT 12
36676: PUSH
36677: LD_INT 13
36679: PUSH
36680: LD_INT 14
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: ST_TO_ADDR
36689: GO 37232
36691: LD_INT 30
36693: DOUBLE
36694: EQUAL
36695: IFTRUE 36699
36697: GO 36725
36699: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36700: LD_ADDR_VAR 0 3
36704: PUSH
36705: LD_INT 11
36707: PUSH
36708: LD_INT 12
36710: PUSH
36711: LD_INT 13
36713: PUSH
36714: LD_INT 14
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: LIST
36721: LIST
36722: ST_TO_ADDR
36723: GO 37232
36725: LD_INT 25
36727: DOUBLE
36728: EQUAL
36729: IFTRUE 36733
36731: GO 36751
36733: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36734: LD_ADDR_VAR 0 3
36738: PUSH
36739: LD_INT 13
36741: PUSH
36742: LD_INT 14
36744: PUSH
36745: EMPTY
36746: LIST
36747: LIST
36748: ST_TO_ADDR
36749: GO 37232
36751: LD_INT 27
36753: DOUBLE
36754: EQUAL
36755: IFTRUE 36759
36757: GO 36777
36759: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
36760: LD_ADDR_VAR 0 3
36764: PUSH
36765: LD_INT 13
36767: PUSH
36768: LD_INT 14
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: ST_TO_ADDR
36775: GO 37232
36777: LD_INT 92
36779: DOUBLE
36780: EQUAL
36781: IFTRUE 36785
36783: GO 36811
36785: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36786: LD_ADDR_VAR 0 3
36790: PUSH
36791: LD_INT 11
36793: PUSH
36794: LD_INT 12
36796: PUSH
36797: LD_INT 13
36799: PUSH
36800: LD_INT 14
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: ST_TO_ADDR
36809: GO 37232
36811: LD_INT 28
36813: DOUBLE
36814: EQUAL
36815: IFTRUE 36819
36817: GO 36837
36819: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36820: LD_ADDR_VAR 0 3
36824: PUSH
36825: LD_INT 13
36827: PUSH
36828: LD_INT 14
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: ST_TO_ADDR
36835: GO 37232
36837: LD_INT 29
36839: DOUBLE
36840: EQUAL
36841: IFTRUE 36845
36843: GO 36863
36845: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
36846: LD_ADDR_VAR 0 3
36850: PUSH
36851: LD_INT 13
36853: PUSH
36854: LD_INT 14
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: ST_TO_ADDR
36861: GO 37232
36863: LD_INT 31
36865: DOUBLE
36866: EQUAL
36867: IFTRUE 36871
36869: GO 36889
36871: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
36872: LD_ADDR_VAR 0 3
36876: PUSH
36877: LD_INT 13
36879: PUSH
36880: LD_INT 14
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: ST_TO_ADDR
36887: GO 37232
36889: LD_INT 26
36891: DOUBLE
36892: EQUAL
36893: IFTRUE 36897
36895: GO 36915
36897: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
36898: LD_ADDR_VAR 0 3
36902: PUSH
36903: LD_INT 13
36905: PUSH
36906: LD_INT 14
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: ST_TO_ADDR
36913: GO 37232
36915: LD_INT 42
36917: DOUBLE
36918: EQUAL
36919: IFTRUE 36923
36921: GO 36949
36923: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
36924: LD_ADDR_VAR 0 3
36928: PUSH
36929: LD_INT 21
36931: PUSH
36932: LD_INT 22
36934: PUSH
36935: LD_INT 23
36937: PUSH
36938: LD_INT 24
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: ST_TO_ADDR
36947: GO 37232
36949: LD_INT 43
36951: DOUBLE
36952: EQUAL
36953: IFTRUE 36957
36955: GO 36983
36957: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
36958: LD_ADDR_VAR 0 3
36962: PUSH
36963: LD_INT 21
36965: PUSH
36966: LD_INT 22
36968: PUSH
36969: LD_INT 23
36971: PUSH
36972: LD_INT 24
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: ST_TO_ADDR
36981: GO 37232
36983: LD_INT 44
36985: DOUBLE
36986: EQUAL
36987: IFTRUE 36991
36989: GO 37017
36991: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
36992: LD_ADDR_VAR 0 3
36996: PUSH
36997: LD_INT 21
36999: PUSH
37000: LD_INT 22
37002: PUSH
37003: LD_INT 23
37005: PUSH
37006: LD_INT 24
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: ST_TO_ADDR
37015: GO 37232
37017: LD_INT 45
37019: DOUBLE
37020: EQUAL
37021: IFTRUE 37025
37023: GO 37051
37025: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37026: LD_ADDR_VAR 0 3
37030: PUSH
37031: LD_INT 21
37033: PUSH
37034: LD_INT 22
37036: PUSH
37037: LD_INT 23
37039: PUSH
37040: LD_INT 24
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: ST_TO_ADDR
37049: GO 37232
37051: LD_INT 49
37053: DOUBLE
37054: EQUAL
37055: IFTRUE 37059
37057: GO 37085
37059: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37060: LD_ADDR_VAR 0 3
37064: PUSH
37065: LD_INT 21
37067: PUSH
37068: LD_INT 22
37070: PUSH
37071: LD_INT 23
37073: PUSH
37074: LD_INT 24
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: ST_TO_ADDR
37083: GO 37232
37085: LD_INT 51
37087: DOUBLE
37088: EQUAL
37089: IFTRUE 37093
37091: GO 37119
37093: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37094: LD_ADDR_VAR 0 3
37098: PUSH
37099: LD_INT 21
37101: PUSH
37102: LD_INT 22
37104: PUSH
37105: LD_INT 23
37107: PUSH
37108: LD_INT 24
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: LIST
37115: LIST
37116: ST_TO_ADDR
37117: GO 37232
37119: LD_INT 52
37121: DOUBLE
37122: EQUAL
37123: IFTRUE 37127
37125: GO 37153
37127: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37128: LD_ADDR_VAR 0 3
37132: PUSH
37133: LD_INT 21
37135: PUSH
37136: LD_INT 22
37138: PUSH
37139: LD_INT 23
37141: PUSH
37142: LD_INT 24
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: LIST
37149: LIST
37150: ST_TO_ADDR
37151: GO 37232
37153: LD_INT 53
37155: DOUBLE
37156: EQUAL
37157: IFTRUE 37161
37159: GO 37179
37161: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37162: LD_ADDR_VAR 0 3
37166: PUSH
37167: LD_INT 23
37169: PUSH
37170: LD_INT 24
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: ST_TO_ADDR
37177: GO 37232
37179: LD_INT 46
37181: DOUBLE
37182: EQUAL
37183: IFTRUE 37187
37185: GO 37205
37187: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37188: LD_ADDR_VAR 0 3
37192: PUSH
37193: LD_INT 23
37195: PUSH
37196: LD_INT 24
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: ST_TO_ADDR
37203: GO 37232
37205: LD_INT 47
37207: DOUBLE
37208: EQUAL
37209: IFTRUE 37213
37211: GO 37231
37213: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37214: LD_ADDR_VAR 0 3
37218: PUSH
37219: LD_INT 23
37221: PUSH
37222: LD_INT 24
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: ST_TO_ADDR
37229: GO 37232
37231: POP
// result := ( chassis in result ) ;
37232: LD_ADDR_VAR 0 3
37236: PUSH
37237: LD_VAR 0 1
37241: PUSH
37242: LD_VAR 0 3
37246: IN
37247: ST_TO_ADDR
// end ;
37248: LD_VAR 0 3
37252: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
37253: LD_INT 0
37255: PPUSH
37256: PPUSH
37257: PPUSH
37258: PPUSH
37259: PPUSH
37260: PPUSH
37261: PPUSH
// result := array ;
37262: LD_ADDR_VAR 0 5
37266: PUSH
37267: LD_VAR 0 1
37271: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
37272: LD_VAR 0 1
37276: NOT
37277: PUSH
37278: LD_VAR 0 2
37282: NOT
37283: OR
37284: PUSH
37285: LD_VAR 0 3
37289: NOT
37290: OR
37291: PUSH
37292: LD_VAR 0 2
37296: PUSH
37297: LD_VAR 0 1
37301: GREATER
37302: OR
37303: PUSH
37304: LD_VAR 0 3
37308: PUSH
37309: LD_VAR 0 1
37313: GREATER
37314: OR
37315: IFFALSE 37319
// exit ;
37317: GO 37615
// if direction then
37319: LD_VAR 0 4
37323: IFFALSE 37387
// begin d := 1 ;
37325: LD_ADDR_VAR 0 9
37329: PUSH
37330: LD_INT 1
37332: ST_TO_ADDR
// if i_from > i_to then
37333: LD_VAR 0 2
37337: PUSH
37338: LD_VAR 0 3
37342: GREATER
37343: IFFALSE 37369
// length := ( array - i_from ) + i_to else
37345: LD_ADDR_VAR 0 11
37349: PUSH
37350: LD_VAR 0 1
37354: PUSH
37355: LD_VAR 0 2
37359: MINUS
37360: PUSH
37361: LD_VAR 0 3
37365: PLUS
37366: ST_TO_ADDR
37367: GO 37385
// length := i_to - i_from ;
37369: LD_ADDR_VAR 0 11
37373: PUSH
37374: LD_VAR 0 3
37378: PUSH
37379: LD_VAR 0 2
37383: MINUS
37384: ST_TO_ADDR
// end else
37385: GO 37448
// begin d := - 1 ;
37387: LD_ADDR_VAR 0 9
37391: PUSH
37392: LD_INT 1
37394: NEG
37395: ST_TO_ADDR
// if i_from > i_to then
37396: LD_VAR 0 2
37400: PUSH
37401: LD_VAR 0 3
37405: GREATER
37406: IFFALSE 37426
// length := i_from - i_to else
37408: LD_ADDR_VAR 0 11
37412: PUSH
37413: LD_VAR 0 2
37417: PUSH
37418: LD_VAR 0 3
37422: MINUS
37423: ST_TO_ADDR
37424: GO 37448
// length := ( array - i_to ) + i_from ;
37426: LD_ADDR_VAR 0 11
37430: PUSH
37431: LD_VAR 0 1
37435: PUSH
37436: LD_VAR 0 3
37440: MINUS
37441: PUSH
37442: LD_VAR 0 2
37446: PLUS
37447: ST_TO_ADDR
// end ; if not length then
37448: LD_VAR 0 11
37452: NOT
37453: IFFALSE 37457
// exit ;
37455: GO 37615
// tmp := array ;
37457: LD_ADDR_VAR 0 10
37461: PUSH
37462: LD_VAR 0 1
37466: ST_TO_ADDR
// for i = 1 to length do
37467: LD_ADDR_VAR 0 6
37471: PUSH
37472: DOUBLE
37473: LD_INT 1
37475: DEC
37476: ST_TO_ADDR
37477: LD_VAR 0 11
37481: PUSH
37482: FOR_TO
37483: IFFALSE 37603
// begin for j = 1 to array do
37485: LD_ADDR_VAR 0 7
37489: PUSH
37490: DOUBLE
37491: LD_INT 1
37493: DEC
37494: ST_TO_ADDR
37495: LD_VAR 0 1
37499: PUSH
37500: FOR_TO
37501: IFFALSE 37589
// begin k := j + d ;
37503: LD_ADDR_VAR 0 8
37507: PUSH
37508: LD_VAR 0 7
37512: PUSH
37513: LD_VAR 0 9
37517: PLUS
37518: ST_TO_ADDR
// if k > array then
37519: LD_VAR 0 8
37523: PUSH
37524: LD_VAR 0 1
37528: GREATER
37529: IFFALSE 37539
// k := 1 ;
37531: LD_ADDR_VAR 0 8
37535: PUSH
37536: LD_INT 1
37538: ST_TO_ADDR
// if not k then
37539: LD_VAR 0 8
37543: NOT
37544: IFFALSE 37556
// k := array ;
37546: LD_ADDR_VAR 0 8
37550: PUSH
37551: LD_VAR 0 1
37555: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
37556: LD_ADDR_VAR 0 10
37560: PUSH
37561: LD_VAR 0 10
37565: PPUSH
37566: LD_VAR 0 8
37570: PPUSH
37571: LD_VAR 0 1
37575: PUSH
37576: LD_VAR 0 7
37580: ARRAY
37581: PPUSH
37582: CALL_OW 1
37586: ST_TO_ADDR
// end ;
37587: GO 37500
37589: POP
37590: POP
// array := tmp ;
37591: LD_ADDR_VAR 0 1
37595: PUSH
37596: LD_VAR 0 10
37600: ST_TO_ADDR
// end ;
37601: GO 37482
37603: POP
37604: POP
// result := array ;
37605: LD_ADDR_VAR 0 5
37609: PUSH
37610: LD_VAR 0 1
37614: ST_TO_ADDR
// end ;
37615: LD_VAR 0 5
37619: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37620: LD_INT 0
37622: PPUSH
37623: PPUSH
// result := 0 ;
37624: LD_ADDR_VAR 0 3
37628: PUSH
37629: LD_INT 0
37631: ST_TO_ADDR
// if not array or not value in array then
37632: LD_VAR 0 1
37636: NOT
37637: PUSH
37638: LD_VAR 0 2
37642: PUSH
37643: LD_VAR 0 1
37647: IN
37648: NOT
37649: OR
37650: IFFALSE 37654
// exit ;
37652: GO 37708
// for i = 1 to array do
37654: LD_ADDR_VAR 0 4
37658: PUSH
37659: DOUBLE
37660: LD_INT 1
37662: DEC
37663: ST_TO_ADDR
37664: LD_VAR 0 1
37668: PUSH
37669: FOR_TO
37670: IFFALSE 37706
// if value = array [ i ] then
37672: LD_VAR 0 2
37676: PUSH
37677: LD_VAR 0 1
37681: PUSH
37682: LD_VAR 0 4
37686: ARRAY
37687: EQUAL
37688: IFFALSE 37704
// begin result := i ;
37690: LD_ADDR_VAR 0 3
37694: PUSH
37695: LD_VAR 0 4
37699: ST_TO_ADDR
// exit ;
37700: POP
37701: POP
37702: GO 37708
// end ;
37704: GO 37669
37706: POP
37707: POP
// end ;
37708: LD_VAR 0 3
37712: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37713: LD_INT 0
37715: PPUSH
// vc_chassis := chassis ;
37716: LD_ADDR_OWVAR 37
37720: PUSH
37721: LD_VAR 0 1
37725: ST_TO_ADDR
// vc_engine := engine ;
37726: LD_ADDR_OWVAR 39
37730: PUSH
37731: LD_VAR 0 2
37735: ST_TO_ADDR
// vc_control := control ;
37736: LD_ADDR_OWVAR 38
37740: PUSH
37741: LD_VAR 0 3
37745: ST_TO_ADDR
// vc_weapon := weapon ;
37746: LD_ADDR_OWVAR 40
37750: PUSH
37751: LD_VAR 0 4
37755: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37756: LD_ADDR_OWVAR 41
37760: PUSH
37761: LD_VAR 0 5
37765: ST_TO_ADDR
// end ;
37766: LD_VAR 0 6
37770: RET
// export function WantPlant ( unit ) ; var task ; begin
37771: LD_INT 0
37773: PPUSH
37774: PPUSH
// result := false ;
37775: LD_ADDR_VAR 0 2
37779: PUSH
37780: LD_INT 0
37782: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37783: LD_ADDR_VAR 0 3
37787: PUSH
37788: LD_VAR 0 1
37792: PPUSH
37793: CALL_OW 437
37797: ST_TO_ADDR
// if task then
37798: LD_VAR 0 3
37802: IFFALSE 37830
// if task [ 1 ] [ 1 ] = p then
37804: LD_VAR 0 3
37808: PUSH
37809: LD_INT 1
37811: ARRAY
37812: PUSH
37813: LD_INT 1
37815: ARRAY
37816: PUSH
37817: LD_STRING p
37819: EQUAL
37820: IFFALSE 37830
// result := true ;
37822: LD_ADDR_VAR 0 2
37826: PUSH
37827: LD_INT 1
37829: ST_TO_ADDR
// end ;
37830: LD_VAR 0 2
37834: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
37835: LD_INT 0
37837: PPUSH
37838: PPUSH
37839: PPUSH
37840: PPUSH
// if pos < 1 then
37841: LD_VAR 0 2
37845: PUSH
37846: LD_INT 1
37848: LESS
37849: IFFALSE 37853
// exit ;
37851: GO 38156
// if pos = 1 then
37853: LD_VAR 0 2
37857: PUSH
37858: LD_INT 1
37860: EQUAL
37861: IFFALSE 37894
// result := Replace ( arr , pos [ 1 ] , value ) else
37863: LD_ADDR_VAR 0 4
37867: PUSH
37868: LD_VAR 0 1
37872: PPUSH
37873: LD_VAR 0 2
37877: PUSH
37878: LD_INT 1
37880: ARRAY
37881: PPUSH
37882: LD_VAR 0 3
37886: PPUSH
37887: CALL_OW 1
37891: ST_TO_ADDR
37892: GO 38156
// begin tmp := arr ;
37894: LD_ADDR_VAR 0 6
37898: PUSH
37899: LD_VAR 0 1
37903: ST_TO_ADDR
// s_arr := [ tmp ] ;
37904: LD_ADDR_VAR 0 7
37908: PUSH
37909: LD_VAR 0 6
37913: PUSH
37914: EMPTY
37915: LIST
37916: ST_TO_ADDR
// for i = 1 to pos - 1 do
37917: LD_ADDR_VAR 0 5
37921: PUSH
37922: DOUBLE
37923: LD_INT 1
37925: DEC
37926: ST_TO_ADDR
37927: LD_VAR 0 2
37931: PUSH
37932: LD_INT 1
37934: MINUS
37935: PUSH
37936: FOR_TO
37937: IFFALSE 37982
// begin tmp := tmp [ pos [ i ] ] ;
37939: LD_ADDR_VAR 0 6
37943: PUSH
37944: LD_VAR 0 6
37948: PUSH
37949: LD_VAR 0 2
37953: PUSH
37954: LD_VAR 0 5
37958: ARRAY
37959: ARRAY
37960: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
37961: LD_ADDR_VAR 0 7
37965: PUSH
37966: LD_VAR 0 7
37970: PUSH
37971: LD_VAR 0 6
37975: PUSH
37976: EMPTY
37977: LIST
37978: ADD
37979: ST_TO_ADDR
// end ;
37980: GO 37936
37982: POP
37983: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
37984: LD_ADDR_VAR 0 6
37988: PUSH
37989: LD_VAR 0 6
37993: PPUSH
37994: LD_VAR 0 2
37998: PUSH
37999: LD_VAR 0 2
38003: ARRAY
38004: PPUSH
38005: LD_VAR 0 3
38009: PPUSH
38010: CALL_OW 1
38014: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38015: LD_ADDR_VAR 0 7
38019: PUSH
38020: LD_VAR 0 7
38024: PPUSH
38025: LD_VAR 0 7
38029: PPUSH
38030: LD_VAR 0 6
38034: PPUSH
38035: CALL_OW 1
38039: ST_TO_ADDR
// for i = s_arr downto 2 do
38040: LD_ADDR_VAR 0 5
38044: PUSH
38045: DOUBLE
38046: LD_VAR 0 7
38050: INC
38051: ST_TO_ADDR
38052: LD_INT 2
38054: PUSH
38055: FOR_DOWNTO
38056: IFFALSE 38140
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38058: LD_ADDR_VAR 0 6
38062: PUSH
38063: LD_VAR 0 7
38067: PUSH
38068: LD_VAR 0 5
38072: PUSH
38073: LD_INT 1
38075: MINUS
38076: ARRAY
38077: PPUSH
38078: LD_VAR 0 2
38082: PUSH
38083: LD_VAR 0 5
38087: PUSH
38088: LD_INT 1
38090: MINUS
38091: ARRAY
38092: PPUSH
38093: LD_VAR 0 7
38097: PUSH
38098: LD_VAR 0 5
38102: ARRAY
38103: PPUSH
38104: CALL_OW 1
38108: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38109: LD_ADDR_VAR 0 7
38113: PUSH
38114: LD_VAR 0 7
38118: PPUSH
38119: LD_VAR 0 5
38123: PUSH
38124: LD_INT 1
38126: MINUS
38127: PPUSH
38128: LD_VAR 0 6
38132: PPUSH
38133: CALL_OW 1
38137: ST_TO_ADDR
// end ;
38138: GO 38055
38140: POP
38141: POP
// result := s_arr [ 1 ] ;
38142: LD_ADDR_VAR 0 4
38146: PUSH
38147: LD_VAR 0 7
38151: PUSH
38152: LD_INT 1
38154: ARRAY
38155: ST_TO_ADDR
// end ; end ;
38156: LD_VAR 0 4
38160: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38161: LD_INT 0
38163: PPUSH
38164: PPUSH
// if not list then
38165: LD_VAR 0 1
38169: NOT
38170: IFFALSE 38174
// exit ;
38172: GO 38265
// i := list [ pos1 ] ;
38174: LD_ADDR_VAR 0 5
38178: PUSH
38179: LD_VAR 0 1
38183: PUSH
38184: LD_VAR 0 2
38188: ARRAY
38189: ST_TO_ADDR
// if not i then
38190: LD_VAR 0 5
38194: NOT
38195: IFFALSE 38199
// exit ;
38197: GO 38265
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
38199: LD_ADDR_VAR 0 1
38203: PUSH
38204: LD_VAR 0 1
38208: PPUSH
38209: LD_VAR 0 2
38213: PPUSH
38214: LD_VAR 0 1
38218: PUSH
38219: LD_VAR 0 3
38223: ARRAY
38224: PPUSH
38225: CALL_OW 1
38229: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38230: LD_ADDR_VAR 0 1
38234: PUSH
38235: LD_VAR 0 1
38239: PPUSH
38240: LD_VAR 0 3
38244: PPUSH
38245: LD_VAR 0 5
38249: PPUSH
38250: CALL_OW 1
38254: ST_TO_ADDR
// result := list ;
38255: LD_ADDR_VAR 0 4
38259: PUSH
38260: LD_VAR 0 1
38264: ST_TO_ADDR
// end ;
38265: LD_VAR 0 4
38269: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
38270: LD_INT 0
38272: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
38273: LD_ADDR_VAR 0 5
38277: PUSH
38278: LD_VAR 0 1
38282: PPUSH
38283: CALL_OW 250
38287: PPUSH
38288: LD_VAR 0 1
38292: PPUSH
38293: CALL_OW 251
38297: PPUSH
38298: LD_VAR 0 2
38302: PPUSH
38303: LD_VAR 0 3
38307: PPUSH
38308: LD_VAR 0 4
38312: PPUSH
38313: CALL 38323 0 5
38317: ST_TO_ADDR
// end ;
38318: LD_VAR 0 5
38322: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
38323: LD_INT 0
38325: PPUSH
38326: PPUSH
38327: PPUSH
38328: PPUSH
// if not list then
38329: LD_VAR 0 3
38333: NOT
38334: IFFALSE 38338
// exit ;
38336: GO 38726
// result := [ ] ;
38338: LD_ADDR_VAR 0 6
38342: PUSH
38343: EMPTY
38344: ST_TO_ADDR
// for i in list do
38345: LD_ADDR_VAR 0 7
38349: PUSH
38350: LD_VAR 0 3
38354: PUSH
38355: FOR_IN
38356: IFFALSE 38558
// begin tmp := GetDistUnitXY ( i , x , y ) ;
38358: LD_ADDR_VAR 0 9
38362: PUSH
38363: LD_VAR 0 7
38367: PPUSH
38368: LD_VAR 0 1
38372: PPUSH
38373: LD_VAR 0 2
38377: PPUSH
38378: CALL_OW 297
38382: ST_TO_ADDR
// if not result then
38383: LD_VAR 0 6
38387: NOT
38388: IFFALSE 38414
// result := [ [ i , tmp ] ] else
38390: LD_ADDR_VAR 0 6
38394: PUSH
38395: LD_VAR 0 7
38399: PUSH
38400: LD_VAR 0 9
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: PUSH
38409: EMPTY
38410: LIST
38411: ST_TO_ADDR
38412: GO 38556
// begin if result [ result ] [ 2 ] < tmp then
38414: LD_VAR 0 6
38418: PUSH
38419: LD_VAR 0 6
38423: ARRAY
38424: PUSH
38425: LD_INT 2
38427: ARRAY
38428: PUSH
38429: LD_VAR 0 9
38433: LESS
38434: IFFALSE 38476
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
38436: LD_ADDR_VAR 0 6
38440: PUSH
38441: LD_VAR 0 6
38445: PPUSH
38446: LD_VAR 0 6
38450: PUSH
38451: LD_INT 1
38453: PLUS
38454: PPUSH
38455: LD_VAR 0 7
38459: PUSH
38460: LD_VAR 0 9
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: PPUSH
38469: CALL_OW 2
38473: ST_TO_ADDR
38474: GO 38556
// for j = 1 to result do
38476: LD_ADDR_VAR 0 8
38480: PUSH
38481: DOUBLE
38482: LD_INT 1
38484: DEC
38485: ST_TO_ADDR
38486: LD_VAR 0 6
38490: PUSH
38491: FOR_TO
38492: IFFALSE 38554
// begin if tmp < result [ j ] [ 2 ] then
38494: LD_VAR 0 9
38498: PUSH
38499: LD_VAR 0 6
38503: PUSH
38504: LD_VAR 0 8
38508: ARRAY
38509: PUSH
38510: LD_INT 2
38512: ARRAY
38513: LESS
38514: IFFALSE 38552
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38516: LD_ADDR_VAR 0 6
38520: PUSH
38521: LD_VAR 0 6
38525: PPUSH
38526: LD_VAR 0 8
38530: PPUSH
38531: LD_VAR 0 7
38535: PUSH
38536: LD_VAR 0 9
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: PPUSH
38545: CALL_OW 2
38549: ST_TO_ADDR
// break ;
38550: GO 38554
// end ; end ;
38552: GO 38491
38554: POP
38555: POP
// end ; end ;
38556: GO 38355
38558: POP
38559: POP
// if result and not asc then
38560: LD_VAR 0 6
38564: PUSH
38565: LD_VAR 0 4
38569: NOT
38570: AND
38571: IFFALSE 38646
// begin tmp := result ;
38573: LD_ADDR_VAR 0 9
38577: PUSH
38578: LD_VAR 0 6
38582: ST_TO_ADDR
// for i = tmp downto 1 do
38583: LD_ADDR_VAR 0 7
38587: PUSH
38588: DOUBLE
38589: LD_VAR 0 9
38593: INC
38594: ST_TO_ADDR
38595: LD_INT 1
38597: PUSH
38598: FOR_DOWNTO
38599: IFFALSE 38644
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38601: LD_ADDR_VAR 0 6
38605: PUSH
38606: LD_VAR 0 6
38610: PPUSH
38611: LD_VAR 0 9
38615: PUSH
38616: LD_VAR 0 7
38620: MINUS
38621: PUSH
38622: LD_INT 1
38624: PLUS
38625: PPUSH
38626: LD_VAR 0 9
38630: PUSH
38631: LD_VAR 0 7
38635: ARRAY
38636: PPUSH
38637: CALL_OW 1
38641: ST_TO_ADDR
38642: GO 38598
38644: POP
38645: POP
// end ; tmp := [ ] ;
38646: LD_ADDR_VAR 0 9
38650: PUSH
38651: EMPTY
38652: ST_TO_ADDR
// if mode then
38653: LD_VAR 0 5
38657: IFFALSE 38726
// begin for i = 1 to result do
38659: LD_ADDR_VAR 0 7
38663: PUSH
38664: DOUBLE
38665: LD_INT 1
38667: DEC
38668: ST_TO_ADDR
38669: LD_VAR 0 6
38673: PUSH
38674: FOR_TO
38675: IFFALSE 38714
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38677: LD_ADDR_VAR 0 9
38681: PUSH
38682: LD_VAR 0 9
38686: PPUSH
38687: LD_VAR 0 7
38691: PPUSH
38692: LD_VAR 0 6
38696: PUSH
38697: LD_VAR 0 7
38701: ARRAY
38702: PUSH
38703: LD_INT 1
38705: ARRAY
38706: PPUSH
38707: CALL_OW 1
38711: ST_TO_ADDR
38712: GO 38674
38714: POP
38715: POP
// result := tmp ;
38716: LD_ADDR_VAR 0 6
38720: PUSH
38721: LD_VAR 0 9
38725: ST_TO_ADDR
// end ; end ;
38726: LD_VAR 0 6
38730: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38731: LD_INT 0
38733: PPUSH
38734: PPUSH
38735: PPUSH
38736: PPUSH
38737: PPUSH
38738: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38739: LD_ADDR_VAR 0 5
38743: PUSH
38744: LD_INT 0
38746: PUSH
38747: LD_INT 0
38749: PUSH
38750: LD_INT 0
38752: PUSH
38753: EMPTY
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: ST_TO_ADDR
// if not x or not y then
38761: LD_VAR 0 2
38765: NOT
38766: PUSH
38767: LD_VAR 0 3
38771: NOT
38772: OR
38773: IFFALSE 38777
// exit ;
38775: GO 40427
// if not range then
38777: LD_VAR 0 4
38781: NOT
38782: IFFALSE 38792
// range := 10 ;
38784: LD_ADDR_VAR 0 4
38788: PUSH
38789: LD_INT 10
38791: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38792: LD_ADDR_VAR 0 8
38796: PUSH
38797: LD_INT 81
38799: PUSH
38800: LD_VAR 0 1
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: LD_INT 92
38811: PUSH
38812: LD_VAR 0 2
38816: PUSH
38817: LD_VAR 0 3
38821: PUSH
38822: LD_VAR 0 4
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: PUSH
38833: LD_INT 3
38835: PUSH
38836: LD_INT 21
38838: PUSH
38839: LD_INT 3
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: LIST
38854: PPUSH
38855: CALL_OW 69
38859: ST_TO_ADDR
// if not tmp then
38860: LD_VAR 0 8
38864: NOT
38865: IFFALSE 38869
// exit ;
38867: GO 40427
// for i in tmp do
38869: LD_ADDR_VAR 0 6
38873: PUSH
38874: LD_VAR 0 8
38878: PUSH
38879: FOR_IN
38880: IFFALSE 40402
// begin points := [ 0 , 0 , 0 ] ;
38882: LD_ADDR_VAR 0 9
38886: PUSH
38887: LD_INT 0
38889: PUSH
38890: LD_INT 0
38892: PUSH
38893: LD_INT 0
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: LIST
38900: ST_TO_ADDR
// bpoints := 1 ;
38901: LD_ADDR_VAR 0 10
38905: PUSH
38906: LD_INT 1
38908: ST_TO_ADDR
// case GetType ( i ) of unit_human :
38909: LD_VAR 0 6
38913: PPUSH
38914: CALL_OW 247
38918: PUSH
38919: LD_INT 1
38921: DOUBLE
38922: EQUAL
38923: IFTRUE 38927
38925: GO 39505
38927: POP
// begin if GetClass ( i ) = 1 then
38928: LD_VAR 0 6
38932: PPUSH
38933: CALL_OW 257
38937: PUSH
38938: LD_INT 1
38940: EQUAL
38941: IFFALSE 38962
// points := [ 10 , 5 , 3 ] ;
38943: LD_ADDR_VAR 0 9
38947: PUSH
38948: LD_INT 10
38950: PUSH
38951: LD_INT 5
38953: PUSH
38954: LD_INT 3
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: LIST
38961: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
38962: LD_VAR 0 6
38966: PPUSH
38967: CALL_OW 257
38971: PUSH
38972: LD_INT 2
38974: PUSH
38975: LD_INT 3
38977: PUSH
38978: LD_INT 4
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: LIST
38985: IN
38986: IFFALSE 39007
// points := [ 3 , 2 , 1 ] ;
38988: LD_ADDR_VAR 0 9
38992: PUSH
38993: LD_INT 3
38995: PUSH
38996: LD_INT 2
38998: PUSH
38999: LD_INT 1
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: LIST
39006: ST_TO_ADDR
// if GetClass ( i ) = 5 then
39007: LD_VAR 0 6
39011: PPUSH
39012: CALL_OW 257
39016: PUSH
39017: LD_INT 5
39019: EQUAL
39020: IFFALSE 39041
// points := [ 130 , 5 , 2 ] ;
39022: LD_ADDR_VAR 0 9
39026: PUSH
39027: LD_INT 130
39029: PUSH
39030: LD_INT 5
39032: PUSH
39033: LD_INT 2
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: LIST
39040: ST_TO_ADDR
// if GetClass ( i ) = 8 then
39041: LD_VAR 0 6
39045: PPUSH
39046: CALL_OW 257
39050: PUSH
39051: LD_INT 8
39053: EQUAL
39054: IFFALSE 39075
// points := [ 35 , 35 , 30 ] ;
39056: LD_ADDR_VAR 0 9
39060: PUSH
39061: LD_INT 35
39063: PUSH
39064: LD_INT 35
39066: PUSH
39067: LD_INT 30
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: LIST
39074: ST_TO_ADDR
// if GetClass ( i ) = 9 then
39075: LD_VAR 0 6
39079: PPUSH
39080: CALL_OW 257
39084: PUSH
39085: LD_INT 9
39087: EQUAL
39088: IFFALSE 39109
// points := [ 20 , 55 , 40 ] ;
39090: LD_ADDR_VAR 0 9
39094: PUSH
39095: LD_INT 20
39097: PUSH
39098: LD_INT 55
39100: PUSH
39101: LD_INT 40
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: LIST
39108: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
39109: LD_VAR 0 6
39113: PPUSH
39114: CALL_OW 257
39118: PUSH
39119: LD_INT 12
39121: PUSH
39122: LD_INT 16
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: IN
39129: IFFALSE 39150
// points := [ 5 , 3 , 2 ] ;
39131: LD_ADDR_VAR 0 9
39135: PUSH
39136: LD_INT 5
39138: PUSH
39139: LD_INT 3
39141: PUSH
39142: LD_INT 2
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: LIST
39149: ST_TO_ADDR
// if GetClass ( i ) = 17 then
39150: LD_VAR 0 6
39154: PPUSH
39155: CALL_OW 257
39159: PUSH
39160: LD_INT 17
39162: EQUAL
39163: IFFALSE 39184
// points := [ 100 , 50 , 75 ] ;
39165: LD_ADDR_VAR 0 9
39169: PUSH
39170: LD_INT 100
39172: PUSH
39173: LD_INT 50
39175: PUSH
39176: LD_INT 75
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: LIST
39183: ST_TO_ADDR
// if GetClass ( i ) = 15 then
39184: LD_VAR 0 6
39188: PPUSH
39189: CALL_OW 257
39193: PUSH
39194: LD_INT 15
39196: EQUAL
39197: IFFALSE 39218
// points := [ 10 , 5 , 3 ] ;
39199: LD_ADDR_VAR 0 9
39203: PUSH
39204: LD_INT 10
39206: PUSH
39207: LD_INT 5
39209: PUSH
39210: LD_INT 3
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: LIST
39217: ST_TO_ADDR
// if GetClass ( i ) = 14 then
39218: LD_VAR 0 6
39222: PPUSH
39223: CALL_OW 257
39227: PUSH
39228: LD_INT 14
39230: EQUAL
39231: IFFALSE 39252
// points := [ 10 , 0 , 0 ] ;
39233: LD_ADDR_VAR 0 9
39237: PUSH
39238: LD_INT 10
39240: PUSH
39241: LD_INT 0
39243: PUSH
39244: LD_INT 0
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: LIST
39251: ST_TO_ADDR
// if GetClass ( i ) = 11 then
39252: LD_VAR 0 6
39256: PPUSH
39257: CALL_OW 257
39261: PUSH
39262: LD_INT 11
39264: EQUAL
39265: IFFALSE 39286
// points := [ 30 , 10 , 5 ] ;
39267: LD_ADDR_VAR 0 9
39271: PUSH
39272: LD_INT 30
39274: PUSH
39275: LD_INT 10
39277: PUSH
39278: LD_INT 5
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: LIST
39285: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
39286: LD_VAR 0 1
39290: PPUSH
39291: LD_INT 5
39293: PPUSH
39294: CALL_OW 321
39298: PUSH
39299: LD_INT 2
39301: EQUAL
39302: IFFALSE 39319
// bpoints := bpoints * 1.8 ;
39304: LD_ADDR_VAR 0 10
39308: PUSH
39309: LD_VAR 0 10
39313: PUSH
39314: LD_REAL  1.80000000000000E+0000
39317: MUL
39318: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
39319: LD_VAR 0 6
39323: PPUSH
39324: CALL_OW 257
39328: PUSH
39329: LD_INT 1
39331: PUSH
39332: LD_INT 2
39334: PUSH
39335: LD_INT 3
39337: PUSH
39338: LD_INT 4
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: IN
39347: PUSH
39348: LD_VAR 0 1
39352: PPUSH
39353: LD_INT 51
39355: PPUSH
39356: CALL_OW 321
39360: PUSH
39361: LD_INT 2
39363: EQUAL
39364: AND
39365: IFFALSE 39382
// bpoints := bpoints * 1.2 ;
39367: LD_ADDR_VAR 0 10
39371: PUSH
39372: LD_VAR 0 10
39376: PUSH
39377: LD_REAL  1.20000000000000E+0000
39380: MUL
39381: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
39382: LD_VAR 0 6
39386: PPUSH
39387: CALL_OW 257
39391: PUSH
39392: LD_INT 5
39394: PUSH
39395: LD_INT 7
39397: PUSH
39398: LD_INT 9
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: LIST
39405: IN
39406: PUSH
39407: LD_VAR 0 1
39411: PPUSH
39412: LD_INT 52
39414: PPUSH
39415: CALL_OW 321
39419: PUSH
39420: LD_INT 2
39422: EQUAL
39423: AND
39424: IFFALSE 39441
// bpoints := bpoints * 1.5 ;
39426: LD_ADDR_VAR 0 10
39430: PUSH
39431: LD_VAR 0 10
39435: PUSH
39436: LD_REAL  1.50000000000000E+0000
39439: MUL
39440: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
39441: LD_VAR 0 1
39445: PPUSH
39446: LD_INT 66
39448: PPUSH
39449: CALL_OW 321
39453: PUSH
39454: LD_INT 2
39456: EQUAL
39457: IFFALSE 39474
// bpoints := bpoints * 1.1 ;
39459: LD_ADDR_VAR 0 10
39463: PUSH
39464: LD_VAR 0 10
39468: PUSH
39469: LD_REAL  1.10000000000000E+0000
39472: MUL
39473: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
39474: LD_ADDR_VAR 0 10
39478: PUSH
39479: LD_VAR 0 10
39483: PUSH
39484: LD_VAR 0 6
39488: PPUSH
39489: LD_INT 1
39491: PPUSH
39492: CALL_OW 259
39496: PUSH
39497: LD_REAL  1.15000000000000E+0000
39500: MUL
39501: MUL
39502: ST_TO_ADDR
// end ; unit_vehicle :
39503: GO 40331
39505: LD_INT 2
39507: DOUBLE
39508: EQUAL
39509: IFTRUE 39513
39511: GO 40319
39513: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
39514: LD_VAR 0 6
39518: PPUSH
39519: CALL_OW 264
39523: PUSH
39524: LD_INT 2
39526: PUSH
39527: LD_INT 42
39529: PUSH
39530: LD_INT 24
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: LIST
39537: IN
39538: IFFALSE 39559
// points := [ 25 , 5 , 3 ] ;
39540: LD_ADDR_VAR 0 9
39544: PUSH
39545: LD_INT 25
39547: PUSH
39548: LD_INT 5
39550: PUSH
39551: LD_INT 3
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: LIST
39558: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
39559: LD_VAR 0 6
39563: PPUSH
39564: CALL_OW 264
39568: PUSH
39569: LD_INT 4
39571: PUSH
39572: LD_INT 43
39574: PUSH
39575: LD_INT 25
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: LIST
39582: IN
39583: IFFALSE 39604
// points := [ 40 , 15 , 5 ] ;
39585: LD_ADDR_VAR 0 9
39589: PUSH
39590: LD_INT 40
39592: PUSH
39593: LD_INT 15
39595: PUSH
39596: LD_INT 5
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: LIST
39603: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39604: LD_VAR 0 6
39608: PPUSH
39609: CALL_OW 264
39613: PUSH
39614: LD_INT 3
39616: PUSH
39617: LD_INT 23
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: IN
39624: IFFALSE 39645
// points := [ 7 , 25 , 8 ] ;
39626: LD_ADDR_VAR 0 9
39630: PUSH
39631: LD_INT 7
39633: PUSH
39634: LD_INT 25
39636: PUSH
39637: LD_INT 8
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: LIST
39644: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39645: LD_VAR 0 6
39649: PPUSH
39650: CALL_OW 264
39654: PUSH
39655: LD_INT 5
39657: PUSH
39658: LD_INT 27
39660: PUSH
39661: LD_INT 44
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: LIST
39668: IN
39669: IFFALSE 39690
// points := [ 14 , 50 , 16 ] ;
39671: LD_ADDR_VAR 0 9
39675: PUSH
39676: LD_INT 14
39678: PUSH
39679: LD_INT 50
39681: PUSH
39682: LD_INT 16
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: LIST
39689: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39690: LD_VAR 0 6
39694: PPUSH
39695: CALL_OW 264
39699: PUSH
39700: LD_INT 6
39702: PUSH
39703: LD_INT 46
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: IN
39710: IFFALSE 39731
// points := [ 32 , 120 , 70 ] ;
39712: LD_ADDR_VAR 0 9
39716: PUSH
39717: LD_INT 32
39719: PUSH
39720: LD_INT 120
39722: PUSH
39723: LD_INT 70
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: LIST
39730: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
39731: LD_VAR 0 6
39735: PPUSH
39736: CALL_OW 264
39740: PUSH
39741: LD_INT 7
39743: PUSH
39744: LD_INT 28
39746: PUSH
39747: LD_INT 45
39749: PUSH
39750: LD_INT 92
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: IN
39759: IFFALSE 39780
// points := [ 35 , 20 , 45 ] ;
39761: LD_ADDR_VAR 0 9
39765: PUSH
39766: LD_INT 35
39768: PUSH
39769: LD_INT 20
39771: PUSH
39772: LD_INT 45
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: LIST
39779: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39780: LD_VAR 0 6
39784: PPUSH
39785: CALL_OW 264
39789: PUSH
39790: LD_INT 47
39792: PUSH
39793: EMPTY
39794: LIST
39795: IN
39796: IFFALSE 39817
// points := [ 67 , 45 , 75 ] ;
39798: LD_ADDR_VAR 0 9
39802: PUSH
39803: LD_INT 67
39805: PUSH
39806: LD_INT 45
39808: PUSH
39809: LD_INT 75
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: LIST
39816: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39817: LD_VAR 0 6
39821: PPUSH
39822: CALL_OW 264
39826: PUSH
39827: LD_INT 26
39829: PUSH
39830: EMPTY
39831: LIST
39832: IN
39833: IFFALSE 39854
// points := [ 120 , 30 , 80 ] ;
39835: LD_ADDR_VAR 0 9
39839: PUSH
39840: LD_INT 120
39842: PUSH
39843: LD_INT 30
39845: PUSH
39846: LD_INT 80
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: LIST
39853: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39854: LD_VAR 0 6
39858: PPUSH
39859: CALL_OW 264
39863: PUSH
39864: LD_INT 22
39866: PUSH
39867: EMPTY
39868: LIST
39869: IN
39870: IFFALSE 39891
// points := [ 40 , 1 , 1 ] ;
39872: LD_ADDR_VAR 0 9
39876: PUSH
39877: LD_INT 40
39879: PUSH
39880: LD_INT 1
39882: PUSH
39883: LD_INT 1
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: LIST
39890: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39891: LD_VAR 0 6
39895: PPUSH
39896: CALL_OW 264
39900: PUSH
39901: LD_INT 29
39903: PUSH
39904: EMPTY
39905: LIST
39906: IN
39907: IFFALSE 39928
// points := [ 70 , 200 , 400 ] ;
39909: LD_ADDR_VAR 0 9
39913: PUSH
39914: LD_INT 70
39916: PUSH
39917: LD_INT 200
39919: PUSH
39920: LD_INT 400
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: LIST
39927: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
39928: LD_VAR 0 6
39932: PPUSH
39933: CALL_OW 264
39937: PUSH
39938: LD_INT 14
39940: PUSH
39941: LD_INT 53
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: IN
39948: IFFALSE 39969
// points := [ 40 , 10 , 20 ] ;
39950: LD_ADDR_VAR 0 9
39954: PUSH
39955: LD_INT 40
39957: PUSH
39958: LD_INT 10
39960: PUSH
39961: LD_INT 20
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: LIST
39968: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
39969: LD_VAR 0 6
39973: PPUSH
39974: CALL_OW 264
39978: PUSH
39979: LD_INT 9
39981: PUSH
39982: EMPTY
39983: LIST
39984: IN
39985: IFFALSE 40006
// points := [ 5 , 70 , 20 ] ;
39987: LD_ADDR_VAR 0 9
39991: PUSH
39992: LD_INT 5
39994: PUSH
39995: LD_INT 70
39997: PUSH
39998: LD_INT 20
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: LIST
40005: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
40006: LD_VAR 0 6
40010: PPUSH
40011: CALL_OW 264
40015: PUSH
40016: LD_INT 10
40018: PUSH
40019: EMPTY
40020: LIST
40021: IN
40022: IFFALSE 40043
// points := [ 35 , 110 , 70 ] ;
40024: LD_ADDR_VAR 0 9
40028: PUSH
40029: LD_INT 35
40031: PUSH
40032: LD_INT 110
40034: PUSH
40035: LD_INT 70
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: LIST
40042: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
40043: LD_VAR 0 6
40047: PPUSH
40048: CALL_OW 265
40052: PUSH
40053: LD_INT 25
40055: EQUAL
40056: IFFALSE 40077
// points := [ 80 , 65 , 100 ] ;
40058: LD_ADDR_VAR 0 9
40062: PUSH
40063: LD_INT 80
40065: PUSH
40066: LD_INT 65
40068: PUSH
40069: LD_INT 100
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: LIST
40076: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
40077: LD_VAR 0 6
40081: PPUSH
40082: CALL_OW 263
40086: PUSH
40087: LD_INT 1
40089: EQUAL
40090: IFFALSE 40125
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
40092: LD_ADDR_VAR 0 10
40096: PUSH
40097: LD_VAR 0 10
40101: PUSH
40102: LD_VAR 0 6
40106: PPUSH
40107: CALL_OW 311
40111: PPUSH
40112: LD_INT 3
40114: PPUSH
40115: CALL_OW 259
40119: PUSH
40120: LD_INT 4
40122: MUL
40123: MUL
40124: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
40125: LD_VAR 0 6
40129: PPUSH
40130: CALL_OW 263
40134: PUSH
40135: LD_INT 2
40137: EQUAL
40138: IFFALSE 40189
// begin j := IsControledBy ( i ) ;
40140: LD_ADDR_VAR 0 7
40144: PUSH
40145: LD_VAR 0 6
40149: PPUSH
40150: CALL_OW 312
40154: ST_TO_ADDR
// if j then
40155: LD_VAR 0 7
40159: IFFALSE 40189
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
40161: LD_ADDR_VAR 0 10
40165: PUSH
40166: LD_VAR 0 10
40170: PUSH
40171: LD_VAR 0 7
40175: PPUSH
40176: LD_INT 3
40178: PPUSH
40179: CALL_OW 259
40183: PUSH
40184: LD_INT 3
40186: MUL
40187: MUL
40188: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
40189: LD_VAR 0 6
40193: PPUSH
40194: CALL_OW 264
40198: PUSH
40199: LD_INT 5
40201: PUSH
40202: LD_INT 6
40204: PUSH
40205: LD_INT 46
40207: PUSH
40208: LD_INT 44
40210: PUSH
40211: LD_INT 47
40213: PUSH
40214: LD_INT 45
40216: PUSH
40217: LD_INT 28
40219: PUSH
40220: LD_INT 7
40222: PUSH
40223: LD_INT 27
40225: PUSH
40226: LD_INT 29
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: IN
40241: PUSH
40242: LD_VAR 0 1
40246: PPUSH
40247: LD_INT 52
40249: PPUSH
40250: CALL_OW 321
40254: PUSH
40255: LD_INT 2
40257: EQUAL
40258: AND
40259: IFFALSE 40276
// bpoints := bpoints * 1.2 ;
40261: LD_ADDR_VAR 0 10
40265: PUSH
40266: LD_VAR 0 10
40270: PUSH
40271: LD_REAL  1.20000000000000E+0000
40274: MUL
40275: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
40276: LD_VAR 0 6
40280: PPUSH
40281: CALL_OW 264
40285: PUSH
40286: LD_INT 6
40288: PUSH
40289: LD_INT 46
40291: PUSH
40292: LD_INT 47
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: LIST
40299: IN
40300: IFFALSE 40317
// bpoints := bpoints * 1.2 ;
40302: LD_ADDR_VAR 0 10
40306: PUSH
40307: LD_VAR 0 10
40311: PUSH
40312: LD_REAL  1.20000000000000E+0000
40315: MUL
40316: ST_TO_ADDR
// end ; unit_building :
40317: GO 40331
40319: LD_INT 3
40321: DOUBLE
40322: EQUAL
40323: IFTRUE 40327
40325: GO 40330
40327: POP
// ; end ;
40328: GO 40331
40330: POP
// for j = 1 to 3 do
40331: LD_ADDR_VAR 0 7
40335: PUSH
40336: DOUBLE
40337: LD_INT 1
40339: DEC
40340: ST_TO_ADDR
40341: LD_INT 3
40343: PUSH
40344: FOR_TO
40345: IFFALSE 40398
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
40347: LD_ADDR_VAR 0 5
40351: PUSH
40352: LD_VAR 0 5
40356: PPUSH
40357: LD_VAR 0 7
40361: PPUSH
40362: LD_VAR 0 5
40366: PUSH
40367: LD_VAR 0 7
40371: ARRAY
40372: PUSH
40373: LD_VAR 0 9
40377: PUSH
40378: LD_VAR 0 7
40382: ARRAY
40383: PUSH
40384: LD_VAR 0 10
40388: MUL
40389: PLUS
40390: PPUSH
40391: CALL_OW 1
40395: ST_TO_ADDR
40396: GO 40344
40398: POP
40399: POP
// end ;
40400: GO 38879
40402: POP
40403: POP
// result := Replace ( result , 4 , tmp ) ;
40404: LD_ADDR_VAR 0 5
40408: PUSH
40409: LD_VAR 0 5
40413: PPUSH
40414: LD_INT 4
40416: PPUSH
40417: LD_VAR 0 8
40421: PPUSH
40422: CALL_OW 1
40426: ST_TO_ADDR
// end ;
40427: LD_VAR 0 5
40431: RET
// export function DangerAtRange ( unit , range ) ; begin
40432: LD_INT 0
40434: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
40435: LD_ADDR_VAR 0 3
40439: PUSH
40440: LD_VAR 0 1
40444: PPUSH
40445: CALL_OW 255
40449: PPUSH
40450: LD_VAR 0 1
40454: PPUSH
40455: CALL_OW 250
40459: PPUSH
40460: LD_VAR 0 1
40464: PPUSH
40465: CALL_OW 251
40469: PPUSH
40470: LD_VAR 0 2
40474: PPUSH
40475: CALL 38731 0 4
40479: ST_TO_ADDR
// end ;
40480: LD_VAR 0 3
40484: RET
// export function DangerInArea ( side , area ) ; begin
40485: LD_INT 0
40487: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
40488: LD_ADDR_VAR 0 3
40492: PUSH
40493: LD_VAR 0 2
40497: PPUSH
40498: LD_INT 81
40500: PUSH
40501: LD_VAR 0 1
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PPUSH
40510: CALL_OW 70
40514: ST_TO_ADDR
// end ;
40515: LD_VAR 0 3
40519: RET
// export function IsExtension ( b ) ; begin
40520: LD_INT 0
40522: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
40523: LD_ADDR_VAR 0 2
40527: PUSH
40528: LD_VAR 0 1
40532: PUSH
40533: LD_INT 23
40535: PUSH
40536: LD_INT 20
40538: PUSH
40539: LD_INT 22
40541: PUSH
40542: LD_INT 17
40544: PUSH
40545: LD_INT 24
40547: PUSH
40548: LD_INT 21
40550: PUSH
40551: LD_INT 19
40553: PUSH
40554: LD_INT 16
40556: PUSH
40557: LD_INT 25
40559: PUSH
40560: LD_INT 18
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: IN
40575: ST_TO_ADDR
// end ;
40576: LD_VAR 0 2
40580: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
40581: LD_INT 0
40583: PPUSH
40584: PPUSH
40585: PPUSH
// result := [ ] ;
40586: LD_ADDR_VAR 0 4
40590: PUSH
40591: EMPTY
40592: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40593: LD_ADDR_VAR 0 5
40597: PUSH
40598: LD_VAR 0 2
40602: PPUSH
40603: LD_INT 21
40605: PUSH
40606: LD_INT 3
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PPUSH
40613: CALL_OW 70
40617: ST_TO_ADDR
// if not tmp then
40618: LD_VAR 0 5
40622: NOT
40623: IFFALSE 40627
// exit ;
40625: GO 40691
// if checkLink then
40627: LD_VAR 0 3
40631: IFFALSE 40681
// begin for i in tmp do
40633: LD_ADDR_VAR 0 6
40637: PUSH
40638: LD_VAR 0 5
40642: PUSH
40643: FOR_IN
40644: IFFALSE 40679
// if GetBase ( i ) <> base then
40646: LD_VAR 0 6
40650: PPUSH
40651: CALL_OW 274
40655: PUSH
40656: LD_VAR 0 1
40660: NONEQUAL
40661: IFFALSE 40677
// ComLinkToBase ( base , i ) ;
40663: LD_VAR 0 1
40667: PPUSH
40668: LD_VAR 0 6
40672: PPUSH
40673: CALL_OW 169
40677: GO 40643
40679: POP
40680: POP
// end ; result := tmp ;
40681: LD_ADDR_VAR 0 4
40685: PUSH
40686: LD_VAR 0 5
40690: ST_TO_ADDR
// end ;
40691: LD_VAR 0 4
40695: RET
// export function ComComplete ( units , b ) ; var i ; begin
40696: LD_INT 0
40698: PPUSH
40699: PPUSH
// if not units then
40700: LD_VAR 0 1
40704: NOT
40705: IFFALSE 40709
// exit ;
40707: GO 40799
// for i in units do
40709: LD_ADDR_VAR 0 4
40713: PUSH
40714: LD_VAR 0 1
40718: PUSH
40719: FOR_IN
40720: IFFALSE 40797
// if BuildingStatus ( b ) = bs_build then
40722: LD_VAR 0 2
40726: PPUSH
40727: CALL_OW 461
40731: PUSH
40732: LD_INT 1
40734: EQUAL
40735: IFFALSE 40795
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40737: LD_VAR 0 4
40741: PPUSH
40742: LD_STRING h
40744: PUSH
40745: LD_VAR 0 2
40749: PPUSH
40750: CALL_OW 250
40754: PUSH
40755: LD_VAR 0 2
40759: PPUSH
40760: CALL_OW 251
40764: PUSH
40765: LD_VAR 0 2
40769: PUSH
40770: LD_INT 0
40772: PUSH
40773: LD_INT 0
40775: PUSH
40776: LD_INT 0
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: PUSH
40788: EMPTY
40789: LIST
40790: PPUSH
40791: CALL_OW 446
40795: GO 40719
40797: POP
40798: POP
// end ;
40799: LD_VAR 0 3
40803: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40804: LD_INT 0
40806: PPUSH
40807: PPUSH
40808: PPUSH
40809: PPUSH
40810: PPUSH
40811: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
40812: LD_VAR 0 1
40816: NOT
40817: PUSH
40818: LD_VAR 0 1
40822: PPUSH
40823: CALL_OW 263
40827: PUSH
40828: LD_INT 2
40830: NONEQUAL
40831: OR
40832: IFFALSE 40836
// exit ;
40834: GO 41152
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40836: LD_ADDR_VAR 0 6
40840: PUSH
40841: LD_INT 22
40843: PUSH
40844: LD_VAR 0 1
40848: PPUSH
40849: CALL_OW 255
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 2
40860: PUSH
40861: LD_INT 30
40863: PUSH
40864: LD_INT 36
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 34
40873: PUSH
40874: LD_INT 31
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: LIST
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: PPUSH
40890: CALL_OW 69
40894: ST_TO_ADDR
// if not tmp then
40895: LD_VAR 0 6
40899: NOT
40900: IFFALSE 40904
// exit ;
40902: GO 41152
// result := [ ] ;
40904: LD_ADDR_VAR 0 2
40908: PUSH
40909: EMPTY
40910: ST_TO_ADDR
// for i in tmp do
40911: LD_ADDR_VAR 0 3
40915: PUSH
40916: LD_VAR 0 6
40920: PUSH
40921: FOR_IN
40922: IFFALSE 40993
// begin t := UnitsInside ( i ) ;
40924: LD_ADDR_VAR 0 4
40928: PUSH
40929: LD_VAR 0 3
40933: PPUSH
40934: CALL_OW 313
40938: ST_TO_ADDR
// if t then
40939: LD_VAR 0 4
40943: IFFALSE 40991
// for j in t do
40945: LD_ADDR_VAR 0 7
40949: PUSH
40950: LD_VAR 0 4
40954: PUSH
40955: FOR_IN
40956: IFFALSE 40989
// result := Replace ( result , result + 1 , j ) ;
40958: LD_ADDR_VAR 0 2
40962: PUSH
40963: LD_VAR 0 2
40967: PPUSH
40968: LD_VAR 0 2
40972: PUSH
40973: LD_INT 1
40975: PLUS
40976: PPUSH
40977: LD_VAR 0 7
40981: PPUSH
40982: CALL_OW 1
40986: ST_TO_ADDR
40987: GO 40955
40989: POP
40990: POP
// end ;
40991: GO 40921
40993: POP
40994: POP
// if not result then
40995: LD_VAR 0 2
40999: NOT
41000: IFFALSE 41004
// exit ;
41002: GO 41152
// mech := result [ 1 ] ;
41004: LD_ADDR_VAR 0 5
41008: PUSH
41009: LD_VAR 0 2
41013: PUSH
41014: LD_INT 1
41016: ARRAY
41017: ST_TO_ADDR
// if result > 1 then
41018: LD_VAR 0 2
41022: PUSH
41023: LD_INT 1
41025: GREATER
41026: IFFALSE 41138
// begin for i = 2 to result do
41028: LD_ADDR_VAR 0 3
41032: PUSH
41033: DOUBLE
41034: LD_INT 2
41036: DEC
41037: ST_TO_ADDR
41038: LD_VAR 0 2
41042: PUSH
41043: FOR_TO
41044: IFFALSE 41136
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
41046: LD_ADDR_VAR 0 4
41050: PUSH
41051: LD_VAR 0 2
41055: PUSH
41056: LD_VAR 0 3
41060: ARRAY
41061: PPUSH
41062: LD_INT 3
41064: PPUSH
41065: CALL_OW 259
41069: PUSH
41070: LD_VAR 0 2
41074: PUSH
41075: LD_VAR 0 3
41079: ARRAY
41080: PPUSH
41081: CALL_OW 432
41085: MINUS
41086: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
41087: LD_VAR 0 4
41091: PUSH
41092: LD_VAR 0 5
41096: PPUSH
41097: LD_INT 3
41099: PPUSH
41100: CALL_OW 259
41104: PUSH
41105: LD_VAR 0 5
41109: PPUSH
41110: CALL_OW 432
41114: MINUS
41115: GREATEREQUAL
41116: IFFALSE 41134
// mech := result [ i ] ;
41118: LD_ADDR_VAR 0 5
41122: PUSH
41123: LD_VAR 0 2
41127: PUSH
41128: LD_VAR 0 3
41132: ARRAY
41133: ST_TO_ADDR
// end ;
41134: GO 41043
41136: POP
41137: POP
// end ; ComLinkTo ( vehicle , mech ) ;
41138: LD_VAR 0 1
41142: PPUSH
41143: LD_VAR 0 5
41147: PPUSH
41148: CALL_OW 135
// end ;
41152: LD_VAR 0 2
41156: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
41157: LD_INT 0
41159: PPUSH
41160: PPUSH
41161: PPUSH
41162: PPUSH
41163: PPUSH
41164: PPUSH
41165: PPUSH
41166: PPUSH
41167: PPUSH
41168: PPUSH
41169: PPUSH
41170: PPUSH
41171: PPUSH
// result := [ ] ;
41172: LD_ADDR_VAR 0 7
41176: PUSH
41177: EMPTY
41178: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
41179: LD_VAR 0 1
41183: PPUSH
41184: CALL_OW 266
41188: PUSH
41189: LD_INT 0
41191: PUSH
41192: LD_INT 1
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: IN
41199: NOT
41200: IFFALSE 41204
// exit ;
41202: GO 42838
// if name then
41204: LD_VAR 0 3
41208: IFFALSE 41224
// SetBName ( base_dep , name ) ;
41210: LD_VAR 0 1
41214: PPUSH
41215: LD_VAR 0 3
41219: PPUSH
41220: CALL_OW 500
// base := GetBase ( base_dep ) ;
41224: LD_ADDR_VAR 0 15
41228: PUSH
41229: LD_VAR 0 1
41233: PPUSH
41234: CALL_OW 274
41238: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
41239: LD_ADDR_VAR 0 16
41243: PUSH
41244: LD_VAR 0 1
41248: PPUSH
41249: CALL_OW 255
41253: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
41254: LD_ADDR_VAR 0 17
41258: PUSH
41259: LD_VAR 0 1
41263: PPUSH
41264: CALL_OW 248
41268: ST_TO_ADDR
// if sources then
41269: LD_VAR 0 5
41273: IFFALSE 41320
// for i = 1 to 3 do
41275: LD_ADDR_VAR 0 8
41279: PUSH
41280: DOUBLE
41281: LD_INT 1
41283: DEC
41284: ST_TO_ADDR
41285: LD_INT 3
41287: PUSH
41288: FOR_TO
41289: IFFALSE 41318
// AddResourceType ( base , i , sources [ i ] ) ;
41291: LD_VAR 0 15
41295: PPUSH
41296: LD_VAR 0 8
41300: PPUSH
41301: LD_VAR 0 5
41305: PUSH
41306: LD_VAR 0 8
41310: ARRAY
41311: PPUSH
41312: CALL_OW 276
41316: GO 41288
41318: POP
41319: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
41320: LD_ADDR_VAR 0 18
41324: PUSH
41325: LD_VAR 0 15
41329: PPUSH
41330: LD_VAR 0 2
41334: PPUSH
41335: LD_INT 1
41337: PPUSH
41338: CALL 40581 0 3
41342: ST_TO_ADDR
// InitHc ;
41343: CALL_OW 19
// InitUc ;
41347: CALL_OW 18
// uc_side := side ;
41351: LD_ADDR_OWVAR 20
41355: PUSH
41356: LD_VAR 0 16
41360: ST_TO_ADDR
// uc_nation := nation ;
41361: LD_ADDR_OWVAR 21
41365: PUSH
41366: LD_VAR 0 17
41370: ST_TO_ADDR
// if buildings then
41371: LD_VAR 0 18
41375: IFFALSE 42697
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
41377: LD_ADDR_VAR 0 19
41381: PUSH
41382: LD_VAR 0 18
41386: PPUSH
41387: LD_INT 2
41389: PUSH
41390: LD_INT 30
41392: PUSH
41393: LD_INT 29
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: PUSH
41400: LD_INT 30
41402: PUSH
41403: LD_INT 30
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: LIST
41414: PPUSH
41415: CALL_OW 72
41419: ST_TO_ADDR
// if tmp then
41420: LD_VAR 0 19
41424: IFFALSE 41472
// for i in tmp do
41426: LD_ADDR_VAR 0 8
41430: PUSH
41431: LD_VAR 0 19
41435: PUSH
41436: FOR_IN
41437: IFFALSE 41470
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
41439: LD_VAR 0 8
41443: PPUSH
41444: CALL_OW 250
41448: PPUSH
41449: LD_VAR 0 8
41453: PPUSH
41454: CALL_OW 251
41458: PPUSH
41459: LD_VAR 0 16
41463: PPUSH
41464: CALL_OW 441
41468: GO 41436
41470: POP
41471: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
41472: LD_VAR 0 18
41476: PPUSH
41477: LD_INT 2
41479: PUSH
41480: LD_INT 30
41482: PUSH
41483: LD_INT 32
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 30
41492: PUSH
41493: LD_INT 33
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: LIST
41504: PPUSH
41505: CALL_OW 72
41509: IFFALSE 41597
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
41511: LD_ADDR_VAR 0 8
41515: PUSH
41516: LD_VAR 0 18
41520: PPUSH
41521: LD_INT 2
41523: PUSH
41524: LD_INT 30
41526: PUSH
41527: LD_INT 32
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: LD_INT 30
41536: PUSH
41537: LD_INT 33
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: LIST
41548: PPUSH
41549: CALL_OW 72
41553: PUSH
41554: FOR_IN
41555: IFFALSE 41595
// begin if not GetBWeapon ( i ) then
41557: LD_VAR 0 8
41561: PPUSH
41562: CALL_OW 269
41566: NOT
41567: IFFALSE 41593
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
41569: LD_VAR 0 8
41573: PPUSH
41574: LD_VAR 0 8
41578: PPUSH
41579: LD_VAR 0 2
41583: PPUSH
41584: CALL 42843 0 2
41588: PPUSH
41589: CALL_OW 431
// end ;
41593: GO 41554
41595: POP
41596: POP
// end ; for i = 1 to personel do
41597: LD_ADDR_VAR 0 8
41601: PUSH
41602: DOUBLE
41603: LD_INT 1
41605: DEC
41606: ST_TO_ADDR
41607: LD_VAR 0 6
41611: PUSH
41612: FOR_TO
41613: IFFALSE 42677
// begin if i > 4 then
41615: LD_VAR 0 8
41619: PUSH
41620: LD_INT 4
41622: GREATER
41623: IFFALSE 41627
// break ;
41625: GO 42677
// case i of 1 :
41627: LD_VAR 0 8
41631: PUSH
41632: LD_INT 1
41634: DOUBLE
41635: EQUAL
41636: IFTRUE 41640
41638: GO 41720
41640: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41641: LD_ADDR_VAR 0 12
41645: PUSH
41646: LD_VAR 0 18
41650: PPUSH
41651: LD_INT 22
41653: PUSH
41654: LD_VAR 0 16
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: PUSH
41663: LD_INT 58
41665: PUSH
41666: EMPTY
41667: LIST
41668: PUSH
41669: LD_INT 2
41671: PUSH
41672: LD_INT 30
41674: PUSH
41675: LD_INT 32
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 30
41684: PUSH
41685: LD_INT 4
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: PUSH
41692: LD_INT 30
41694: PUSH
41695: LD_INT 5
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: LIST
41712: PPUSH
41713: CALL_OW 72
41717: ST_TO_ADDR
41718: GO 41942
41720: LD_INT 2
41722: DOUBLE
41723: EQUAL
41724: IFTRUE 41728
41726: GO 41790
41728: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41729: LD_ADDR_VAR 0 12
41733: PUSH
41734: LD_VAR 0 18
41738: PPUSH
41739: LD_INT 22
41741: PUSH
41742: LD_VAR 0 16
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: LD_INT 2
41753: PUSH
41754: LD_INT 30
41756: PUSH
41757: LD_INT 0
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 30
41766: PUSH
41767: LD_INT 1
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: LIST
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PPUSH
41783: CALL_OW 72
41787: ST_TO_ADDR
41788: GO 41942
41790: LD_INT 3
41792: DOUBLE
41793: EQUAL
41794: IFTRUE 41798
41796: GO 41860
41798: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41799: LD_ADDR_VAR 0 12
41803: PUSH
41804: LD_VAR 0 18
41808: PPUSH
41809: LD_INT 22
41811: PUSH
41812: LD_VAR 0 16
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 2
41823: PUSH
41824: LD_INT 30
41826: PUSH
41827: LD_INT 2
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 30
41836: PUSH
41837: LD_INT 3
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: LIST
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PPUSH
41853: CALL_OW 72
41857: ST_TO_ADDR
41858: GO 41942
41860: LD_INT 4
41862: DOUBLE
41863: EQUAL
41864: IFTRUE 41868
41866: GO 41941
41868: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41869: LD_ADDR_VAR 0 12
41873: PUSH
41874: LD_VAR 0 18
41878: PPUSH
41879: LD_INT 22
41881: PUSH
41882: LD_VAR 0 16
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 2
41893: PUSH
41894: LD_INT 30
41896: PUSH
41897: LD_INT 6
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 30
41906: PUSH
41907: LD_INT 7
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 30
41916: PUSH
41917: LD_INT 8
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PPUSH
41934: CALL_OW 72
41938: ST_TO_ADDR
41939: GO 41942
41941: POP
// if i = 1 then
41942: LD_VAR 0 8
41946: PUSH
41947: LD_INT 1
41949: EQUAL
41950: IFFALSE 42061
// begin tmp := [ ] ;
41952: LD_ADDR_VAR 0 19
41956: PUSH
41957: EMPTY
41958: ST_TO_ADDR
// for j in f do
41959: LD_ADDR_VAR 0 9
41963: PUSH
41964: LD_VAR 0 12
41968: PUSH
41969: FOR_IN
41970: IFFALSE 42043
// if GetBType ( j ) = b_bunker then
41972: LD_VAR 0 9
41976: PPUSH
41977: CALL_OW 266
41981: PUSH
41982: LD_INT 32
41984: EQUAL
41985: IFFALSE 42012
// tmp := Insert ( tmp , 1 , j ) else
41987: LD_ADDR_VAR 0 19
41991: PUSH
41992: LD_VAR 0 19
41996: PPUSH
41997: LD_INT 1
41999: PPUSH
42000: LD_VAR 0 9
42004: PPUSH
42005: CALL_OW 2
42009: ST_TO_ADDR
42010: GO 42041
// tmp := Insert ( tmp , tmp + 1 , j ) ;
42012: LD_ADDR_VAR 0 19
42016: PUSH
42017: LD_VAR 0 19
42021: PPUSH
42022: LD_VAR 0 19
42026: PUSH
42027: LD_INT 1
42029: PLUS
42030: PPUSH
42031: LD_VAR 0 9
42035: PPUSH
42036: CALL_OW 2
42040: ST_TO_ADDR
42041: GO 41969
42043: POP
42044: POP
// if tmp then
42045: LD_VAR 0 19
42049: IFFALSE 42061
// f := tmp ;
42051: LD_ADDR_VAR 0 12
42055: PUSH
42056: LD_VAR 0 19
42060: ST_TO_ADDR
// end ; x := personel [ i ] ;
42061: LD_ADDR_VAR 0 13
42065: PUSH
42066: LD_VAR 0 6
42070: PUSH
42071: LD_VAR 0 8
42075: ARRAY
42076: ST_TO_ADDR
// if x = - 1 then
42077: LD_VAR 0 13
42081: PUSH
42082: LD_INT 1
42084: NEG
42085: EQUAL
42086: IFFALSE 42295
// begin for j in f do
42088: LD_ADDR_VAR 0 9
42092: PUSH
42093: LD_VAR 0 12
42097: PUSH
42098: FOR_IN
42099: IFFALSE 42291
// repeat InitHc ;
42101: CALL_OW 19
// if GetBType ( j ) = b_barracks then
42105: LD_VAR 0 9
42109: PPUSH
42110: CALL_OW 266
42114: PUSH
42115: LD_INT 5
42117: EQUAL
42118: IFFALSE 42188
// begin if UnitsInside ( j ) < 3 then
42120: LD_VAR 0 9
42124: PPUSH
42125: CALL_OW 313
42129: PUSH
42130: LD_INT 3
42132: LESS
42133: IFFALSE 42169
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42135: LD_INT 0
42137: PPUSH
42138: LD_INT 5
42140: PUSH
42141: LD_INT 8
42143: PUSH
42144: LD_INT 9
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: LIST
42151: PUSH
42152: LD_VAR 0 17
42156: ARRAY
42157: PPUSH
42158: LD_VAR 0 4
42162: PPUSH
42163: CALL_OW 380
42167: GO 42186
// PrepareHuman ( false , i , skill ) ;
42169: LD_INT 0
42171: PPUSH
42172: LD_VAR 0 8
42176: PPUSH
42177: LD_VAR 0 4
42181: PPUSH
42182: CALL_OW 380
// end else
42186: GO 42205
// PrepareHuman ( false , i , skill ) ;
42188: LD_INT 0
42190: PPUSH
42191: LD_VAR 0 8
42195: PPUSH
42196: LD_VAR 0 4
42200: PPUSH
42201: CALL_OW 380
// un := CreateHuman ;
42205: LD_ADDR_VAR 0 14
42209: PUSH
42210: CALL_OW 44
42214: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42215: LD_ADDR_VAR 0 7
42219: PUSH
42220: LD_VAR 0 7
42224: PPUSH
42225: LD_INT 1
42227: PPUSH
42228: LD_VAR 0 14
42232: PPUSH
42233: CALL_OW 2
42237: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
42238: LD_VAR 0 14
42242: PPUSH
42243: LD_VAR 0 9
42247: PPUSH
42248: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
42252: LD_VAR 0 9
42256: PPUSH
42257: CALL_OW 313
42261: PUSH
42262: LD_INT 6
42264: EQUAL
42265: PUSH
42266: LD_VAR 0 9
42270: PPUSH
42271: CALL_OW 266
42275: PUSH
42276: LD_INT 32
42278: PUSH
42279: LD_INT 31
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: IN
42286: OR
42287: IFFALSE 42101
42289: GO 42098
42291: POP
42292: POP
// end else
42293: GO 42675
// for j = 1 to x do
42295: LD_ADDR_VAR 0 9
42299: PUSH
42300: DOUBLE
42301: LD_INT 1
42303: DEC
42304: ST_TO_ADDR
42305: LD_VAR 0 13
42309: PUSH
42310: FOR_TO
42311: IFFALSE 42673
// begin InitHc ;
42313: CALL_OW 19
// if not f then
42317: LD_VAR 0 12
42321: NOT
42322: IFFALSE 42411
// begin PrepareHuman ( false , i , skill ) ;
42324: LD_INT 0
42326: PPUSH
42327: LD_VAR 0 8
42331: PPUSH
42332: LD_VAR 0 4
42336: PPUSH
42337: CALL_OW 380
// un := CreateHuman ;
42341: LD_ADDR_VAR 0 14
42345: PUSH
42346: CALL_OW 44
42350: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42351: LD_ADDR_VAR 0 7
42355: PUSH
42356: LD_VAR 0 7
42360: PPUSH
42361: LD_INT 1
42363: PPUSH
42364: LD_VAR 0 14
42368: PPUSH
42369: CALL_OW 2
42373: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42374: LD_VAR 0 14
42378: PPUSH
42379: LD_VAR 0 1
42383: PPUSH
42384: CALL_OW 250
42388: PPUSH
42389: LD_VAR 0 1
42393: PPUSH
42394: CALL_OW 251
42398: PPUSH
42399: LD_INT 10
42401: PPUSH
42402: LD_INT 0
42404: PPUSH
42405: CALL_OW 50
// continue ;
42409: GO 42310
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
42411: LD_VAR 0 12
42415: PUSH
42416: LD_INT 1
42418: ARRAY
42419: PPUSH
42420: CALL_OW 313
42424: PUSH
42425: LD_VAR 0 12
42429: PUSH
42430: LD_INT 1
42432: ARRAY
42433: PPUSH
42434: CALL_OW 266
42438: PUSH
42439: LD_INT 32
42441: PUSH
42442: LD_INT 31
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: IN
42449: AND
42450: PUSH
42451: LD_VAR 0 12
42455: PUSH
42456: LD_INT 1
42458: ARRAY
42459: PPUSH
42460: CALL_OW 313
42464: PUSH
42465: LD_INT 6
42467: EQUAL
42468: OR
42469: IFFALSE 42489
// f := Delete ( f , 1 ) ;
42471: LD_ADDR_VAR 0 12
42475: PUSH
42476: LD_VAR 0 12
42480: PPUSH
42481: LD_INT 1
42483: PPUSH
42484: CALL_OW 3
42488: ST_TO_ADDR
// if not f then
42489: LD_VAR 0 12
42493: NOT
42494: IFFALSE 42512
// begin x := x + 2 ;
42496: LD_ADDR_VAR 0 13
42500: PUSH
42501: LD_VAR 0 13
42505: PUSH
42506: LD_INT 2
42508: PLUS
42509: ST_TO_ADDR
// continue ;
42510: GO 42310
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
42512: LD_VAR 0 12
42516: PUSH
42517: LD_INT 1
42519: ARRAY
42520: PPUSH
42521: CALL_OW 266
42525: PUSH
42526: LD_INT 5
42528: EQUAL
42529: IFFALSE 42603
// begin if UnitsInside ( f [ 1 ] ) < 3 then
42531: LD_VAR 0 12
42535: PUSH
42536: LD_INT 1
42538: ARRAY
42539: PPUSH
42540: CALL_OW 313
42544: PUSH
42545: LD_INT 3
42547: LESS
42548: IFFALSE 42584
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42550: LD_INT 0
42552: PPUSH
42553: LD_INT 5
42555: PUSH
42556: LD_INT 8
42558: PUSH
42559: LD_INT 9
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: LIST
42566: PUSH
42567: LD_VAR 0 17
42571: ARRAY
42572: PPUSH
42573: LD_VAR 0 4
42577: PPUSH
42578: CALL_OW 380
42582: GO 42601
// PrepareHuman ( false , i , skill ) ;
42584: LD_INT 0
42586: PPUSH
42587: LD_VAR 0 8
42591: PPUSH
42592: LD_VAR 0 4
42596: PPUSH
42597: CALL_OW 380
// end else
42601: GO 42620
// PrepareHuman ( false , i , skill ) ;
42603: LD_INT 0
42605: PPUSH
42606: LD_VAR 0 8
42610: PPUSH
42611: LD_VAR 0 4
42615: PPUSH
42616: CALL_OW 380
// un := CreateHuman ;
42620: LD_ADDR_VAR 0 14
42624: PUSH
42625: CALL_OW 44
42629: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42630: LD_ADDR_VAR 0 7
42634: PUSH
42635: LD_VAR 0 7
42639: PPUSH
42640: LD_INT 1
42642: PPUSH
42643: LD_VAR 0 14
42647: PPUSH
42648: CALL_OW 2
42652: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42653: LD_VAR 0 14
42657: PPUSH
42658: LD_VAR 0 12
42662: PUSH
42663: LD_INT 1
42665: ARRAY
42666: PPUSH
42667: CALL_OW 52
// end ;
42671: GO 42310
42673: POP
42674: POP
// end ;
42675: GO 41612
42677: POP
42678: POP
// result := result ^ buildings ;
42679: LD_ADDR_VAR 0 7
42683: PUSH
42684: LD_VAR 0 7
42688: PUSH
42689: LD_VAR 0 18
42693: ADD
42694: ST_TO_ADDR
// end else
42695: GO 42838
// begin for i = 1 to personel do
42697: LD_ADDR_VAR 0 8
42701: PUSH
42702: DOUBLE
42703: LD_INT 1
42705: DEC
42706: ST_TO_ADDR
42707: LD_VAR 0 6
42711: PUSH
42712: FOR_TO
42713: IFFALSE 42836
// begin if i > 4 then
42715: LD_VAR 0 8
42719: PUSH
42720: LD_INT 4
42722: GREATER
42723: IFFALSE 42727
// break ;
42725: GO 42836
// x := personel [ i ] ;
42727: LD_ADDR_VAR 0 13
42731: PUSH
42732: LD_VAR 0 6
42736: PUSH
42737: LD_VAR 0 8
42741: ARRAY
42742: ST_TO_ADDR
// if x = - 1 then
42743: LD_VAR 0 13
42747: PUSH
42748: LD_INT 1
42750: NEG
42751: EQUAL
42752: IFFALSE 42756
// continue ;
42754: GO 42712
// PrepareHuman ( false , i , skill ) ;
42756: LD_INT 0
42758: PPUSH
42759: LD_VAR 0 8
42763: PPUSH
42764: LD_VAR 0 4
42768: PPUSH
42769: CALL_OW 380
// un := CreateHuman ;
42773: LD_ADDR_VAR 0 14
42777: PUSH
42778: CALL_OW 44
42782: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42783: LD_VAR 0 14
42787: PPUSH
42788: LD_VAR 0 1
42792: PPUSH
42793: CALL_OW 250
42797: PPUSH
42798: LD_VAR 0 1
42802: PPUSH
42803: CALL_OW 251
42807: PPUSH
42808: LD_INT 10
42810: PPUSH
42811: LD_INT 0
42813: PPUSH
42814: CALL_OW 50
// result := result ^ un ;
42818: LD_ADDR_VAR 0 7
42822: PUSH
42823: LD_VAR 0 7
42827: PUSH
42828: LD_VAR 0 14
42832: ADD
42833: ST_TO_ADDR
// end ;
42834: GO 42712
42836: POP
42837: POP
// end ; end ;
42838: LD_VAR 0 7
42842: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42843: LD_INT 0
42845: PPUSH
42846: PPUSH
42847: PPUSH
42848: PPUSH
42849: PPUSH
42850: PPUSH
42851: PPUSH
42852: PPUSH
42853: PPUSH
42854: PPUSH
42855: PPUSH
42856: PPUSH
42857: PPUSH
42858: PPUSH
42859: PPUSH
42860: PPUSH
// result := false ;
42861: LD_ADDR_VAR 0 3
42865: PUSH
42866: LD_INT 0
42868: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42869: LD_VAR 0 1
42873: NOT
42874: PUSH
42875: LD_VAR 0 1
42879: PPUSH
42880: CALL_OW 266
42884: PUSH
42885: LD_INT 32
42887: PUSH
42888: LD_INT 33
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: IN
42895: NOT
42896: OR
42897: IFFALSE 42901
// exit ;
42899: GO 44010
// nat := GetNation ( tower ) ;
42901: LD_ADDR_VAR 0 12
42905: PUSH
42906: LD_VAR 0 1
42910: PPUSH
42911: CALL_OW 248
42915: ST_TO_ADDR
// side := GetSide ( tower ) ;
42916: LD_ADDR_VAR 0 16
42920: PUSH
42921: LD_VAR 0 1
42925: PPUSH
42926: CALL_OW 255
42930: ST_TO_ADDR
// x := GetX ( tower ) ;
42931: LD_ADDR_VAR 0 10
42935: PUSH
42936: LD_VAR 0 1
42940: PPUSH
42941: CALL_OW 250
42945: ST_TO_ADDR
// y := GetY ( tower ) ;
42946: LD_ADDR_VAR 0 11
42950: PUSH
42951: LD_VAR 0 1
42955: PPUSH
42956: CALL_OW 251
42960: ST_TO_ADDR
// if not x or not y then
42961: LD_VAR 0 10
42965: NOT
42966: PUSH
42967: LD_VAR 0 11
42971: NOT
42972: OR
42973: IFFALSE 42977
// exit ;
42975: GO 44010
// weapon := 0 ;
42977: LD_ADDR_VAR 0 18
42981: PUSH
42982: LD_INT 0
42984: ST_TO_ADDR
// fac_list := [ ] ;
42985: LD_ADDR_VAR 0 17
42989: PUSH
42990: EMPTY
42991: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
42992: LD_ADDR_VAR 0 6
42996: PUSH
42997: LD_VAR 0 1
43001: PPUSH
43002: CALL_OW 274
43006: PPUSH
43007: LD_VAR 0 2
43011: PPUSH
43012: LD_INT 0
43014: PPUSH
43015: CALL 40581 0 3
43019: PPUSH
43020: LD_INT 30
43022: PUSH
43023: LD_INT 3
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PPUSH
43030: CALL_OW 72
43034: ST_TO_ADDR
// if not factories then
43035: LD_VAR 0 6
43039: NOT
43040: IFFALSE 43044
// exit ;
43042: GO 44010
// for i in factories do
43044: LD_ADDR_VAR 0 8
43048: PUSH
43049: LD_VAR 0 6
43053: PUSH
43054: FOR_IN
43055: IFFALSE 43080
// fac_list := fac_list union AvailableWeaponList ( i ) ;
43057: LD_ADDR_VAR 0 17
43061: PUSH
43062: LD_VAR 0 17
43066: PUSH
43067: LD_VAR 0 8
43071: PPUSH
43072: CALL_OW 478
43076: UNION
43077: ST_TO_ADDR
43078: GO 43054
43080: POP
43081: POP
// if not fac_list then
43082: LD_VAR 0 17
43086: NOT
43087: IFFALSE 43091
// exit ;
43089: GO 44010
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
43091: LD_ADDR_VAR 0 5
43095: PUSH
43096: LD_INT 4
43098: PUSH
43099: LD_INT 5
43101: PUSH
43102: LD_INT 9
43104: PUSH
43105: LD_INT 10
43107: PUSH
43108: LD_INT 6
43110: PUSH
43111: LD_INT 7
43113: PUSH
43114: LD_INT 11
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 27
43128: PUSH
43129: LD_INT 28
43131: PUSH
43132: LD_INT 26
43134: PUSH
43135: LD_INT 30
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 43
43146: PUSH
43147: LD_INT 44
43149: PUSH
43150: LD_INT 46
43152: PUSH
43153: LD_INT 45
43155: PUSH
43156: LD_INT 47
43158: PUSH
43159: LD_INT 49
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: LIST
43174: PUSH
43175: LD_VAR 0 12
43179: ARRAY
43180: ST_TO_ADDR
// list := list isect fac_list ;
43181: LD_ADDR_VAR 0 5
43185: PUSH
43186: LD_VAR 0 5
43190: PUSH
43191: LD_VAR 0 17
43195: ISECT
43196: ST_TO_ADDR
// if not list then
43197: LD_VAR 0 5
43201: NOT
43202: IFFALSE 43206
// exit ;
43204: GO 44010
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
43206: LD_VAR 0 12
43210: PUSH
43211: LD_INT 3
43213: EQUAL
43214: PUSH
43215: LD_INT 49
43217: PUSH
43218: LD_VAR 0 5
43222: IN
43223: AND
43224: PUSH
43225: LD_INT 31
43227: PPUSH
43228: LD_VAR 0 16
43232: PPUSH
43233: CALL_OW 321
43237: PUSH
43238: LD_INT 2
43240: EQUAL
43241: AND
43242: IFFALSE 43302
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
43244: LD_INT 22
43246: PUSH
43247: LD_VAR 0 16
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 35
43258: PUSH
43259: LD_INT 49
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 91
43268: PUSH
43269: LD_VAR 0 1
43273: PUSH
43274: LD_INT 10
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: LIST
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: LIST
43286: PPUSH
43287: CALL_OW 69
43291: NOT
43292: IFFALSE 43302
// weapon := ru_time_lapser ;
43294: LD_ADDR_VAR 0 18
43298: PUSH
43299: LD_INT 49
43301: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
43302: LD_VAR 0 12
43306: PUSH
43307: LD_INT 1
43309: PUSH
43310: LD_INT 2
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: IN
43317: PUSH
43318: LD_INT 11
43320: PUSH
43321: LD_VAR 0 5
43325: IN
43326: PUSH
43327: LD_INT 30
43329: PUSH
43330: LD_VAR 0 5
43334: IN
43335: OR
43336: AND
43337: PUSH
43338: LD_INT 6
43340: PPUSH
43341: LD_VAR 0 16
43345: PPUSH
43346: CALL_OW 321
43350: PUSH
43351: LD_INT 2
43353: EQUAL
43354: AND
43355: IFFALSE 43520
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
43357: LD_INT 22
43359: PUSH
43360: LD_VAR 0 16
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: LD_INT 2
43371: PUSH
43372: LD_INT 35
43374: PUSH
43375: LD_INT 11
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 35
43384: PUSH
43385: LD_INT 30
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: LIST
43396: PUSH
43397: LD_INT 91
43399: PUSH
43400: LD_VAR 0 1
43404: PUSH
43405: LD_INT 18
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: LIST
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: LIST
43417: PPUSH
43418: CALL_OW 69
43422: NOT
43423: PUSH
43424: LD_INT 22
43426: PUSH
43427: LD_VAR 0 16
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 2
43438: PUSH
43439: LD_INT 30
43441: PUSH
43442: LD_INT 32
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: LD_INT 30
43451: PUSH
43452: LD_INT 33
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 91
43466: PUSH
43467: LD_VAR 0 1
43471: PUSH
43472: LD_INT 12
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: LIST
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: LIST
43484: PUSH
43485: EMPTY
43486: LIST
43487: PPUSH
43488: CALL_OW 69
43492: PUSH
43493: LD_INT 2
43495: GREATER
43496: AND
43497: IFFALSE 43520
// weapon := [ us_radar , ar_radar ] [ nat ] ;
43499: LD_ADDR_VAR 0 18
43503: PUSH
43504: LD_INT 11
43506: PUSH
43507: LD_INT 30
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_VAR 0 12
43518: ARRAY
43519: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
43520: LD_VAR 0 18
43524: NOT
43525: PUSH
43526: LD_INT 40
43528: PPUSH
43529: LD_VAR 0 16
43533: PPUSH
43534: CALL_OW 321
43538: PUSH
43539: LD_INT 2
43541: EQUAL
43542: AND
43543: PUSH
43544: LD_INT 7
43546: PUSH
43547: LD_VAR 0 5
43551: IN
43552: PUSH
43553: LD_INT 28
43555: PUSH
43556: LD_VAR 0 5
43560: IN
43561: OR
43562: PUSH
43563: LD_INT 45
43565: PUSH
43566: LD_VAR 0 5
43570: IN
43571: OR
43572: AND
43573: IFFALSE 43827
// begin hex := GetHexInfo ( x , y ) ;
43575: LD_ADDR_VAR 0 4
43579: PUSH
43580: LD_VAR 0 10
43584: PPUSH
43585: LD_VAR 0 11
43589: PPUSH
43590: CALL_OW 546
43594: ST_TO_ADDR
// if hex [ 1 ] then
43595: LD_VAR 0 4
43599: PUSH
43600: LD_INT 1
43602: ARRAY
43603: IFFALSE 43607
// exit ;
43605: GO 44010
// height := hex [ 2 ] ;
43607: LD_ADDR_VAR 0 15
43611: PUSH
43612: LD_VAR 0 4
43616: PUSH
43617: LD_INT 2
43619: ARRAY
43620: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43621: LD_ADDR_VAR 0 14
43625: PUSH
43626: LD_INT 0
43628: PUSH
43629: LD_INT 2
43631: PUSH
43632: LD_INT 3
43634: PUSH
43635: LD_INT 5
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: ST_TO_ADDR
// for i in tmp do
43644: LD_ADDR_VAR 0 8
43648: PUSH
43649: LD_VAR 0 14
43653: PUSH
43654: FOR_IN
43655: IFFALSE 43825
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43657: LD_ADDR_VAR 0 9
43661: PUSH
43662: LD_VAR 0 10
43666: PPUSH
43667: LD_VAR 0 8
43671: PPUSH
43672: LD_INT 5
43674: PPUSH
43675: CALL_OW 272
43679: PUSH
43680: LD_VAR 0 11
43684: PPUSH
43685: LD_VAR 0 8
43689: PPUSH
43690: LD_INT 5
43692: PPUSH
43693: CALL_OW 273
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43702: LD_VAR 0 9
43706: PUSH
43707: LD_INT 1
43709: ARRAY
43710: PPUSH
43711: LD_VAR 0 9
43715: PUSH
43716: LD_INT 2
43718: ARRAY
43719: PPUSH
43720: CALL_OW 488
43724: IFFALSE 43823
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43726: LD_ADDR_VAR 0 4
43730: PUSH
43731: LD_VAR 0 9
43735: PUSH
43736: LD_INT 1
43738: ARRAY
43739: PPUSH
43740: LD_VAR 0 9
43744: PUSH
43745: LD_INT 2
43747: ARRAY
43748: PPUSH
43749: CALL_OW 546
43753: ST_TO_ADDR
// if hex [ 1 ] then
43754: LD_VAR 0 4
43758: PUSH
43759: LD_INT 1
43761: ARRAY
43762: IFFALSE 43766
// continue ;
43764: GO 43654
// h := hex [ 2 ] ;
43766: LD_ADDR_VAR 0 13
43770: PUSH
43771: LD_VAR 0 4
43775: PUSH
43776: LD_INT 2
43778: ARRAY
43779: ST_TO_ADDR
// if h + 7 < height then
43780: LD_VAR 0 13
43784: PUSH
43785: LD_INT 7
43787: PLUS
43788: PUSH
43789: LD_VAR 0 15
43793: LESS
43794: IFFALSE 43823
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43796: LD_ADDR_VAR 0 18
43800: PUSH
43801: LD_INT 7
43803: PUSH
43804: LD_INT 28
43806: PUSH
43807: LD_INT 45
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: LIST
43814: PUSH
43815: LD_VAR 0 12
43819: ARRAY
43820: ST_TO_ADDR
// break ;
43821: GO 43825
// end ; end ; end ;
43823: GO 43654
43825: POP
43826: POP
// end ; if not weapon then
43827: LD_VAR 0 18
43831: NOT
43832: IFFALSE 43892
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43834: LD_ADDR_VAR 0 5
43838: PUSH
43839: LD_VAR 0 5
43843: PUSH
43844: LD_INT 11
43846: PUSH
43847: LD_INT 30
43849: PUSH
43850: LD_INT 49
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: LIST
43857: DIFF
43858: ST_TO_ADDR
// if not list then
43859: LD_VAR 0 5
43863: NOT
43864: IFFALSE 43868
// exit ;
43866: GO 44010
// weapon := list [ rand ( 1 , list ) ] ;
43868: LD_ADDR_VAR 0 18
43872: PUSH
43873: LD_VAR 0 5
43877: PUSH
43878: LD_INT 1
43880: PPUSH
43881: LD_VAR 0 5
43885: PPUSH
43886: CALL_OW 12
43890: ARRAY
43891: ST_TO_ADDR
// end ; if weapon then
43892: LD_VAR 0 18
43896: IFFALSE 44010
// begin tmp := CostOfWeapon ( weapon ) ;
43898: LD_ADDR_VAR 0 14
43902: PUSH
43903: LD_VAR 0 18
43907: PPUSH
43908: CALL_OW 451
43912: ST_TO_ADDR
// j := GetBase ( tower ) ;
43913: LD_ADDR_VAR 0 9
43917: PUSH
43918: LD_VAR 0 1
43922: PPUSH
43923: CALL_OW 274
43927: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
43928: LD_VAR 0 9
43932: PPUSH
43933: LD_INT 1
43935: PPUSH
43936: CALL_OW 275
43940: PUSH
43941: LD_VAR 0 14
43945: PUSH
43946: LD_INT 1
43948: ARRAY
43949: GREATEREQUAL
43950: PUSH
43951: LD_VAR 0 9
43955: PPUSH
43956: LD_INT 2
43958: PPUSH
43959: CALL_OW 275
43963: PUSH
43964: LD_VAR 0 14
43968: PUSH
43969: LD_INT 2
43971: ARRAY
43972: GREATEREQUAL
43973: AND
43974: PUSH
43975: LD_VAR 0 9
43979: PPUSH
43980: LD_INT 3
43982: PPUSH
43983: CALL_OW 275
43987: PUSH
43988: LD_VAR 0 14
43992: PUSH
43993: LD_INT 3
43995: ARRAY
43996: GREATEREQUAL
43997: AND
43998: IFFALSE 44010
// result := weapon ;
44000: LD_ADDR_VAR 0 3
44004: PUSH
44005: LD_VAR 0 18
44009: ST_TO_ADDR
// end ; end ;
44010: LD_VAR 0 3
44014: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
44015: LD_INT 0
44017: PPUSH
44018: PPUSH
// result := true ;
44019: LD_ADDR_VAR 0 3
44023: PUSH
44024: LD_INT 1
44026: ST_TO_ADDR
// if array1 = array2 then
44027: LD_VAR 0 1
44031: PUSH
44032: LD_VAR 0 2
44036: EQUAL
44037: IFFALSE 44097
// begin for i = 1 to array1 do
44039: LD_ADDR_VAR 0 4
44043: PUSH
44044: DOUBLE
44045: LD_INT 1
44047: DEC
44048: ST_TO_ADDR
44049: LD_VAR 0 1
44053: PUSH
44054: FOR_TO
44055: IFFALSE 44093
// if array1 [ i ] <> array2 [ i ] then
44057: LD_VAR 0 1
44061: PUSH
44062: LD_VAR 0 4
44066: ARRAY
44067: PUSH
44068: LD_VAR 0 2
44072: PUSH
44073: LD_VAR 0 4
44077: ARRAY
44078: NONEQUAL
44079: IFFALSE 44091
// begin result := false ;
44081: LD_ADDR_VAR 0 3
44085: PUSH
44086: LD_INT 0
44088: ST_TO_ADDR
// break ;
44089: GO 44093
// end ;
44091: GO 44054
44093: POP
44094: POP
// end else
44095: GO 44105
// result := false ;
44097: LD_ADDR_VAR 0 3
44101: PUSH
44102: LD_INT 0
44104: ST_TO_ADDR
// end ;
44105: LD_VAR 0 3
44109: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
44110: LD_INT 0
44112: PPUSH
44113: PPUSH
// if not array1 or not array2 then
44114: LD_VAR 0 1
44118: NOT
44119: PUSH
44120: LD_VAR 0 2
44124: NOT
44125: OR
44126: IFFALSE 44130
// exit ;
44128: GO 44194
// result := true ;
44130: LD_ADDR_VAR 0 3
44134: PUSH
44135: LD_INT 1
44137: ST_TO_ADDR
// for i = 1 to array1 do
44138: LD_ADDR_VAR 0 4
44142: PUSH
44143: DOUBLE
44144: LD_INT 1
44146: DEC
44147: ST_TO_ADDR
44148: LD_VAR 0 1
44152: PUSH
44153: FOR_TO
44154: IFFALSE 44192
// if array1 [ i ] <> array2 [ i ] then
44156: LD_VAR 0 1
44160: PUSH
44161: LD_VAR 0 4
44165: ARRAY
44166: PUSH
44167: LD_VAR 0 2
44171: PUSH
44172: LD_VAR 0 4
44176: ARRAY
44177: NONEQUAL
44178: IFFALSE 44190
// begin result := false ;
44180: LD_ADDR_VAR 0 3
44184: PUSH
44185: LD_INT 0
44187: ST_TO_ADDR
// break ;
44188: GO 44192
// end ;
44190: GO 44153
44192: POP
44193: POP
// end ;
44194: LD_VAR 0 3
44198: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
44199: LD_INT 0
44201: PPUSH
44202: PPUSH
44203: PPUSH
// pom := GetBase ( fac ) ;
44204: LD_ADDR_VAR 0 5
44208: PUSH
44209: LD_VAR 0 1
44213: PPUSH
44214: CALL_OW 274
44218: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
44219: LD_ADDR_VAR 0 4
44223: PUSH
44224: LD_VAR 0 2
44228: PUSH
44229: LD_INT 1
44231: ARRAY
44232: PPUSH
44233: LD_VAR 0 2
44237: PUSH
44238: LD_INT 2
44240: ARRAY
44241: PPUSH
44242: LD_VAR 0 2
44246: PUSH
44247: LD_INT 3
44249: ARRAY
44250: PPUSH
44251: LD_VAR 0 2
44255: PUSH
44256: LD_INT 4
44258: ARRAY
44259: PPUSH
44260: CALL_OW 449
44264: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44265: LD_ADDR_VAR 0 3
44269: PUSH
44270: LD_VAR 0 5
44274: PPUSH
44275: LD_INT 1
44277: PPUSH
44278: CALL_OW 275
44282: PUSH
44283: LD_VAR 0 4
44287: PUSH
44288: LD_INT 1
44290: ARRAY
44291: GREATEREQUAL
44292: PUSH
44293: LD_VAR 0 5
44297: PPUSH
44298: LD_INT 2
44300: PPUSH
44301: CALL_OW 275
44305: PUSH
44306: LD_VAR 0 4
44310: PUSH
44311: LD_INT 2
44313: ARRAY
44314: GREATEREQUAL
44315: AND
44316: PUSH
44317: LD_VAR 0 5
44321: PPUSH
44322: LD_INT 3
44324: PPUSH
44325: CALL_OW 275
44329: PUSH
44330: LD_VAR 0 4
44334: PUSH
44335: LD_INT 3
44337: ARRAY
44338: GREATEREQUAL
44339: AND
44340: ST_TO_ADDR
// end ;
44341: LD_VAR 0 3
44345: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
44346: LD_INT 0
44348: PPUSH
44349: PPUSH
44350: PPUSH
44351: PPUSH
// pom := GetBase ( building ) ;
44352: LD_ADDR_VAR 0 3
44356: PUSH
44357: LD_VAR 0 1
44361: PPUSH
44362: CALL_OW 274
44366: ST_TO_ADDR
// if not pom then
44367: LD_VAR 0 3
44371: NOT
44372: IFFALSE 44376
// exit ;
44374: GO 44546
// btype := GetBType ( building ) ;
44376: LD_ADDR_VAR 0 5
44380: PUSH
44381: LD_VAR 0 1
44385: PPUSH
44386: CALL_OW 266
44390: ST_TO_ADDR
// if btype = b_armoury then
44391: LD_VAR 0 5
44395: PUSH
44396: LD_INT 4
44398: EQUAL
44399: IFFALSE 44409
// btype := b_barracks ;
44401: LD_ADDR_VAR 0 5
44405: PUSH
44406: LD_INT 5
44408: ST_TO_ADDR
// if btype = b_depot then
44409: LD_VAR 0 5
44413: PUSH
44414: LD_INT 0
44416: EQUAL
44417: IFFALSE 44427
// btype := b_warehouse ;
44419: LD_ADDR_VAR 0 5
44423: PUSH
44424: LD_INT 1
44426: ST_TO_ADDR
// if btype = b_workshop then
44427: LD_VAR 0 5
44431: PUSH
44432: LD_INT 2
44434: EQUAL
44435: IFFALSE 44445
// btype := b_factory ;
44437: LD_ADDR_VAR 0 5
44441: PUSH
44442: LD_INT 3
44444: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44445: LD_ADDR_VAR 0 4
44449: PUSH
44450: LD_VAR 0 5
44454: PPUSH
44455: LD_VAR 0 1
44459: PPUSH
44460: CALL_OW 248
44464: PPUSH
44465: CALL_OW 450
44469: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44470: LD_ADDR_VAR 0 2
44474: PUSH
44475: LD_VAR 0 3
44479: PPUSH
44480: LD_INT 1
44482: PPUSH
44483: CALL_OW 275
44487: PUSH
44488: LD_VAR 0 4
44492: PUSH
44493: LD_INT 1
44495: ARRAY
44496: GREATEREQUAL
44497: PUSH
44498: LD_VAR 0 3
44502: PPUSH
44503: LD_INT 2
44505: PPUSH
44506: CALL_OW 275
44510: PUSH
44511: LD_VAR 0 4
44515: PUSH
44516: LD_INT 2
44518: ARRAY
44519: GREATEREQUAL
44520: AND
44521: PUSH
44522: LD_VAR 0 3
44526: PPUSH
44527: LD_INT 3
44529: PPUSH
44530: CALL_OW 275
44534: PUSH
44535: LD_VAR 0 4
44539: PUSH
44540: LD_INT 3
44542: ARRAY
44543: GREATEREQUAL
44544: AND
44545: ST_TO_ADDR
// end ;
44546: LD_VAR 0 2
44550: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
44551: LD_INT 0
44553: PPUSH
44554: PPUSH
44555: PPUSH
// pom := GetBase ( building ) ;
44556: LD_ADDR_VAR 0 4
44560: PUSH
44561: LD_VAR 0 1
44565: PPUSH
44566: CALL_OW 274
44570: ST_TO_ADDR
// if not pom then
44571: LD_VAR 0 4
44575: NOT
44576: IFFALSE 44580
// exit ;
44578: GO 44681
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44580: LD_ADDR_VAR 0 5
44584: PUSH
44585: LD_VAR 0 2
44589: PPUSH
44590: LD_VAR 0 1
44594: PPUSH
44595: CALL_OW 248
44599: PPUSH
44600: CALL_OW 450
44604: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44605: LD_ADDR_VAR 0 3
44609: PUSH
44610: LD_VAR 0 4
44614: PPUSH
44615: LD_INT 1
44617: PPUSH
44618: CALL_OW 275
44622: PUSH
44623: LD_VAR 0 5
44627: PUSH
44628: LD_INT 1
44630: ARRAY
44631: GREATEREQUAL
44632: PUSH
44633: LD_VAR 0 4
44637: PPUSH
44638: LD_INT 2
44640: PPUSH
44641: CALL_OW 275
44645: PUSH
44646: LD_VAR 0 5
44650: PUSH
44651: LD_INT 2
44653: ARRAY
44654: GREATEREQUAL
44655: AND
44656: PUSH
44657: LD_VAR 0 4
44661: PPUSH
44662: LD_INT 3
44664: PPUSH
44665: CALL_OW 275
44669: PUSH
44670: LD_VAR 0 5
44674: PUSH
44675: LD_INT 3
44677: ARRAY
44678: GREATEREQUAL
44679: AND
44680: ST_TO_ADDR
// end ;
44681: LD_VAR 0 3
44685: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
44686: LD_INT 0
44688: PPUSH
44689: PPUSH
44690: PPUSH
44691: PPUSH
44692: PPUSH
44693: PPUSH
44694: PPUSH
44695: PPUSH
44696: PPUSH
44697: PPUSH
44698: PPUSH
// result := false ;
44699: LD_ADDR_VAR 0 8
44703: PUSH
44704: LD_INT 0
44706: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
44707: LD_VAR 0 5
44711: NOT
44712: PUSH
44713: LD_VAR 0 1
44717: NOT
44718: OR
44719: PUSH
44720: LD_VAR 0 2
44724: NOT
44725: OR
44726: PUSH
44727: LD_VAR 0 3
44731: NOT
44732: OR
44733: IFFALSE 44737
// exit ;
44735: GO 45551
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
44737: LD_ADDR_VAR 0 14
44741: PUSH
44742: LD_VAR 0 1
44746: PPUSH
44747: LD_VAR 0 2
44751: PPUSH
44752: LD_VAR 0 3
44756: PPUSH
44757: LD_VAR 0 4
44761: PPUSH
44762: LD_VAR 0 5
44766: PUSH
44767: LD_INT 1
44769: ARRAY
44770: PPUSH
44771: CALL_OW 248
44775: PPUSH
44776: LD_INT 0
44778: PPUSH
44779: CALL 46784 0 6
44783: ST_TO_ADDR
// if not hexes then
44784: LD_VAR 0 14
44788: NOT
44789: IFFALSE 44793
// exit ;
44791: GO 45551
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44793: LD_ADDR_VAR 0 17
44797: PUSH
44798: LD_VAR 0 5
44802: PPUSH
44803: LD_INT 22
44805: PUSH
44806: LD_VAR 0 13
44810: PPUSH
44811: CALL_OW 255
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 2
44822: PUSH
44823: LD_INT 30
44825: PUSH
44826: LD_INT 0
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 30
44835: PUSH
44836: LD_INT 1
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: LIST
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PPUSH
44852: CALL_OW 72
44856: ST_TO_ADDR
// for i = 1 to hexes do
44857: LD_ADDR_VAR 0 9
44861: PUSH
44862: DOUBLE
44863: LD_INT 1
44865: DEC
44866: ST_TO_ADDR
44867: LD_VAR 0 14
44871: PUSH
44872: FOR_TO
44873: IFFALSE 45549
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44875: LD_ADDR_VAR 0 13
44879: PUSH
44880: LD_VAR 0 14
44884: PUSH
44885: LD_VAR 0 9
44889: ARRAY
44890: PUSH
44891: LD_INT 1
44893: ARRAY
44894: PPUSH
44895: LD_VAR 0 14
44899: PUSH
44900: LD_VAR 0 9
44904: ARRAY
44905: PUSH
44906: LD_INT 2
44908: ARRAY
44909: PPUSH
44910: CALL_OW 428
44914: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44915: LD_VAR 0 14
44919: PUSH
44920: LD_VAR 0 9
44924: ARRAY
44925: PUSH
44926: LD_INT 1
44928: ARRAY
44929: PPUSH
44930: LD_VAR 0 14
44934: PUSH
44935: LD_VAR 0 9
44939: ARRAY
44940: PUSH
44941: LD_INT 2
44943: ARRAY
44944: PPUSH
44945: CALL_OW 351
44949: PUSH
44950: LD_VAR 0 14
44954: PUSH
44955: LD_VAR 0 9
44959: ARRAY
44960: PUSH
44961: LD_INT 1
44963: ARRAY
44964: PPUSH
44965: LD_VAR 0 14
44969: PUSH
44970: LD_VAR 0 9
44974: ARRAY
44975: PUSH
44976: LD_INT 2
44978: ARRAY
44979: PPUSH
44980: CALL_OW 488
44984: NOT
44985: OR
44986: PUSH
44987: LD_VAR 0 13
44991: PPUSH
44992: CALL_OW 247
44996: PUSH
44997: LD_INT 3
44999: EQUAL
45000: OR
45001: IFFALSE 45007
// exit ;
45003: POP
45004: POP
45005: GO 45551
// if not tmp then
45007: LD_VAR 0 13
45011: NOT
45012: IFFALSE 45016
// continue ;
45014: GO 44872
// result := true ;
45016: LD_ADDR_VAR 0 8
45020: PUSH
45021: LD_INT 1
45023: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
45024: LD_VAR 0 6
45028: PUSH
45029: LD_VAR 0 13
45033: PPUSH
45034: CALL_OW 247
45038: PUSH
45039: LD_INT 2
45041: EQUAL
45042: AND
45043: PUSH
45044: LD_VAR 0 13
45048: PPUSH
45049: CALL_OW 263
45053: PUSH
45054: LD_INT 1
45056: EQUAL
45057: AND
45058: IFFALSE 45222
// begin if IsDrivenBy ( tmp ) then
45060: LD_VAR 0 13
45064: PPUSH
45065: CALL_OW 311
45069: IFFALSE 45073
// continue ;
45071: GO 44872
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
45073: LD_VAR 0 6
45077: PPUSH
45078: LD_INT 3
45080: PUSH
45081: LD_INT 60
45083: PUSH
45084: EMPTY
45085: LIST
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 3
45093: PUSH
45094: LD_INT 55
45096: PUSH
45097: EMPTY
45098: LIST
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PPUSH
45108: CALL_OW 72
45112: IFFALSE 45220
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
45114: LD_ADDR_VAR 0 18
45118: PUSH
45119: LD_VAR 0 6
45123: PPUSH
45124: LD_INT 3
45126: PUSH
45127: LD_INT 60
45129: PUSH
45130: EMPTY
45131: LIST
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 3
45139: PUSH
45140: LD_INT 55
45142: PUSH
45143: EMPTY
45144: LIST
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PPUSH
45154: CALL_OW 72
45158: PUSH
45159: LD_INT 1
45161: ARRAY
45162: ST_TO_ADDR
// if IsInUnit ( driver ) then
45163: LD_VAR 0 18
45167: PPUSH
45168: CALL_OW 310
45172: IFFALSE 45183
// ComExit ( driver ) ;
45174: LD_VAR 0 18
45178: PPUSH
45179: CALL 70545 0 1
// AddComEnterUnit ( driver , tmp ) ;
45183: LD_VAR 0 18
45187: PPUSH
45188: LD_VAR 0 13
45192: PPUSH
45193: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
45197: LD_VAR 0 18
45201: PPUSH
45202: LD_VAR 0 7
45206: PPUSH
45207: CALL_OW 173
// AddComExitVehicle ( driver ) ;
45211: LD_VAR 0 18
45215: PPUSH
45216: CALL_OW 181
// end ; continue ;
45220: GO 44872
// end ; if not cleaners or not tmp in cleaners then
45222: LD_VAR 0 6
45226: NOT
45227: PUSH
45228: LD_VAR 0 13
45232: PUSH
45233: LD_VAR 0 6
45237: IN
45238: NOT
45239: OR
45240: IFFALSE 45547
// begin if dep then
45242: LD_VAR 0 17
45246: IFFALSE 45382
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
45248: LD_ADDR_VAR 0 16
45252: PUSH
45253: LD_VAR 0 17
45257: PUSH
45258: LD_INT 1
45260: ARRAY
45261: PPUSH
45262: CALL_OW 250
45266: PPUSH
45267: LD_VAR 0 17
45271: PUSH
45272: LD_INT 1
45274: ARRAY
45275: PPUSH
45276: CALL_OW 254
45280: PPUSH
45281: LD_INT 5
45283: PPUSH
45284: CALL_OW 272
45288: PUSH
45289: LD_VAR 0 17
45293: PUSH
45294: LD_INT 1
45296: ARRAY
45297: PPUSH
45298: CALL_OW 251
45302: PPUSH
45303: LD_VAR 0 17
45307: PUSH
45308: LD_INT 1
45310: ARRAY
45311: PPUSH
45312: CALL_OW 254
45316: PPUSH
45317: LD_INT 5
45319: PPUSH
45320: CALL_OW 273
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
45329: LD_VAR 0 16
45333: PUSH
45334: LD_INT 1
45336: ARRAY
45337: PPUSH
45338: LD_VAR 0 16
45342: PUSH
45343: LD_INT 2
45345: ARRAY
45346: PPUSH
45347: CALL_OW 488
45351: IFFALSE 45382
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
45353: LD_VAR 0 13
45357: PPUSH
45358: LD_VAR 0 16
45362: PUSH
45363: LD_INT 1
45365: ARRAY
45366: PPUSH
45367: LD_VAR 0 16
45371: PUSH
45372: LD_INT 2
45374: ARRAY
45375: PPUSH
45376: CALL_OW 111
// continue ;
45380: GO 44872
// end ; end ; r := GetDir ( tmp ) ;
45382: LD_ADDR_VAR 0 15
45386: PUSH
45387: LD_VAR 0 13
45391: PPUSH
45392: CALL_OW 254
45396: ST_TO_ADDR
// if r = 5 then
45397: LD_VAR 0 15
45401: PUSH
45402: LD_INT 5
45404: EQUAL
45405: IFFALSE 45415
// r := 0 ;
45407: LD_ADDR_VAR 0 15
45411: PUSH
45412: LD_INT 0
45414: ST_TO_ADDR
// for j = r to 5 do
45415: LD_ADDR_VAR 0 10
45419: PUSH
45420: DOUBLE
45421: LD_VAR 0 15
45425: DEC
45426: ST_TO_ADDR
45427: LD_INT 5
45429: PUSH
45430: FOR_TO
45431: IFFALSE 45545
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
45433: LD_ADDR_VAR 0 11
45437: PUSH
45438: LD_VAR 0 13
45442: PPUSH
45443: CALL_OW 250
45447: PPUSH
45448: LD_VAR 0 10
45452: PPUSH
45453: LD_INT 2
45455: PPUSH
45456: CALL_OW 272
45460: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
45461: LD_ADDR_VAR 0 12
45465: PUSH
45466: LD_VAR 0 13
45470: PPUSH
45471: CALL_OW 251
45475: PPUSH
45476: LD_VAR 0 10
45480: PPUSH
45481: LD_INT 2
45483: PPUSH
45484: CALL_OW 273
45488: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
45489: LD_VAR 0 11
45493: PPUSH
45494: LD_VAR 0 12
45498: PPUSH
45499: CALL_OW 488
45503: PUSH
45504: LD_VAR 0 11
45508: PPUSH
45509: LD_VAR 0 12
45513: PPUSH
45514: CALL_OW 428
45518: NOT
45519: AND
45520: IFFALSE 45543
// begin ComMoveXY ( tmp , _x , _y ) ;
45522: LD_VAR 0 13
45526: PPUSH
45527: LD_VAR 0 11
45531: PPUSH
45532: LD_VAR 0 12
45536: PPUSH
45537: CALL_OW 111
// break ;
45541: GO 45545
// end ; end ;
45543: GO 45430
45545: POP
45546: POP
// end ; end ;
45547: GO 44872
45549: POP
45550: POP
// end ;
45551: LD_VAR 0 8
45555: RET
// export function BuildingTechInvented ( side , btype ) ; begin
45556: LD_INT 0
45558: PPUSH
// result := true ;
45559: LD_ADDR_VAR 0 3
45563: PUSH
45564: LD_INT 1
45566: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
45567: LD_VAR 0 2
45571: PUSH
45572: LD_INT 24
45574: DOUBLE
45575: EQUAL
45576: IFTRUE 45586
45578: LD_INT 33
45580: DOUBLE
45581: EQUAL
45582: IFTRUE 45586
45584: GO 45611
45586: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
45587: LD_ADDR_VAR 0 3
45591: PUSH
45592: LD_INT 32
45594: PPUSH
45595: LD_VAR 0 1
45599: PPUSH
45600: CALL_OW 321
45604: PUSH
45605: LD_INT 2
45607: EQUAL
45608: ST_TO_ADDR
45609: GO 45927
45611: LD_INT 20
45613: DOUBLE
45614: EQUAL
45615: IFTRUE 45619
45617: GO 45644
45619: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
45620: LD_ADDR_VAR 0 3
45624: PUSH
45625: LD_INT 6
45627: PPUSH
45628: LD_VAR 0 1
45632: PPUSH
45633: CALL_OW 321
45637: PUSH
45638: LD_INT 2
45640: EQUAL
45641: ST_TO_ADDR
45642: GO 45927
45644: LD_INT 22
45646: DOUBLE
45647: EQUAL
45648: IFTRUE 45658
45650: LD_INT 36
45652: DOUBLE
45653: EQUAL
45654: IFTRUE 45658
45656: GO 45683
45658: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
45659: LD_ADDR_VAR 0 3
45663: PUSH
45664: LD_INT 15
45666: PPUSH
45667: LD_VAR 0 1
45671: PPUSH
45672: CALL_OW 321
45676: PUSH
45677: LD_INT 2
45679: EQUAL
45680: ST_TO_ADDR
45681: GO 45927
45683: LD_INT 30
45685: DOUBLE
45686: EQUAL
45687: IFTRUE 45691
45689: GO 45716
45691: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
45692: LD_ADDR_VAR 0 3
45696: PUSH
45697: LD_INT 20
45699: PPUSH
45700: LD_VAR 0 1
45704: PPUSH
45705: CALL_OW 321
45709: PUSH
45710: LD_INT 2
45712: EQUAL
45713: ST_TO_ADDR
45714: GO 45927
45716: LD_INT 28
45718: DOUBLE
45719: EQUAL
45720: IFTRUE 45730
45722: LD_INT 21
45724: DOUBLE
45725: EQUAL
45726: IFTRUE 45730
45728: GO 45755
45730: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
45731: LD_ADDR_VAR 0 3
45735: PUSH
45736: LD_INT 21
45738: PPUSH
45739: LD_VAR 0 1
45743: PPUSH
45744: CALL_OW 321
45748: PUSH
45749: LD_INT 2
45751: EQUAL
45752: ST_TO_ADDR
45753: GO 45927
45755: LD_INT 16
45757: DOUBLE
45758: EQUAL
45759: IFTRUE 45763
45761: GO 45788
45763: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
45764: LD_ADDR_VAR 0 3
45768: PUSH
45769: LD_INT 84
45771: PPUSH
45772: LD_VAR 0 1
45776: PPUSH
45777: CALL_OW 321
45781: PUSH
45782: LD_INT 2
45784: EQUAL
45785: ST_TO_ADDR
45786: GO 45927
45788: LD_INT 19
45790: DOUBLE
45791: EQUAL
45792: IFTRUE 45802
45794: LD_INT 23
45796: DOUBLE
45797: EQUAL
45798: IFTRUE 45802
45800: GO 45827
45802: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
45803: LD_ADDR_VAR 0 3
45807: PUSH
45808: LD_INT 83
45810: PPUSH
45811: LD_VAR 0 1
45815: PPUSH
45816: CALL_OW 321
45820: PUSH
45821: LD_INT 2
45823: EQUAL
45824: ST_TO_ADDR
45825: GO 45927
45827: LD_INT 17
45829: DOUBLE
45830: EQUAL
45831: IFTRUE 45835
45833: GO 45860
45835: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
45836: LD_ADDR_VAR 0 3
45840: PUSH
45841: LD_INT 39
45843: PPUSH
45844: LD_VAR 0 1
45848: PPUSH
45849: CALL_OW 321
45853: PUSH
45854: LD_INT 2
45856: EQUAL
45857: ST_TO_ADDR
45858: GO 45927
45860: LD_INT 18
45862: DOUBLE
45863: EQUAL
45864: IFTRUE 45868
45866: GO 45893
45868: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
45869: LD_ADDR_VAR 0 3
45873: PUSH
45874: LD_INT 40
45876: PPUSH
45877: LD_VAR 0 1
45881: PPUSH
45882: CALL_OW 321
45886: PUSH
45887: LD_INT 2
45889: EQUAL
45890: ST_TO_ADDR
45891: GO 45927
45893: LD_INT 27
45895: DOUBLE
45896: EQUAL
45897: IFTRUE 45901
45899: GO 45926
45901: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
45902: LD_ADDR_VAR 0 3
45906: PUSH
45907: LD_INT 35
45909: PPUSH
45910: LD_VAR 0 1
45914: PPUSH
45915: CALL_OW 321
45919: PUSH
45920: LD_INT 2
45922: EQUAL
45923: ST_TO_ADDR
45924: GO 45927
45926: POP
// end ;
45927: LD_VAR 0 3
45931: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
45932: LD_INT 0
45934: PPUSH
45935: PPUSH
45936: PPUSH
45937: PPUSH
45938: PPUSH
45939: PPUSH
45940: PPUSH
45941: PPUSH
45942: PPUSH
45943: PPUSH
45944: PPUSH
// result := false ;
45945: LD_ADDR_VAR 0 6
45949: PUSH
45950: LD_INT 0
45952: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45953: LD_VAR 0 1
45957: NOT
45958: PUSH
45959: LD_VAR 0 1
45963: PPUSH
45964: CALL_OW 266
45968: PUSH
45969: LD_INT 0
45971: PUSH
45972: LD_INT 1
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: IN
45979: NOT
45980: OR
45981: PUSH
45982: LD_VAR 0 2
45986: NOT
45987: OR
45988: PUSH
45989: LD_VAR 0 5
45993: PUSH
45994: LD_INT 0
45996: PUSH
45997: LD_INT 1
45999: PUSH
46000: LD_INT 2
46002: PUSH
46003: LD_INT 3
46005: PUSH
46006: LD_INT 4
46008: PUSH
46009: LD_INT 5
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: IN
46020: NOT
46021: OR
46022: PUSH
46023: LD_VAR 0 3
46027: PPUSH
46028: LD_VAR 0 4
46032: PPUSH
46033: CALL_OW 488
46037: NOT
46038: OR
46039: IFFALSE 46043
// exit ;
46041: GO 46779
// side := GetSide ( depot ) ;
46043: LD_ADDR_VAR 0 9
46047: PUSH
46048: LD_VAR 0 1
46052: PPUSH
46053: CALL_OW 255
46057: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
46058: LD_VAR 0 9
46062: PPUSH
46063: LD_VAR 0 2
46067: PPUSH
46068: CALL 45556 0 2
46072: NOT
46073: IFFALSE 46077
// exit ;
46075: GO 46779
// pom := GetBase ( depot ) ;
46077: LD_ADDR_VAR 0 10
46081: PUSH
46082: LD_VAR 0 1
46086: PPUSH
46087: CALL_OW 274
46091: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
46092: LD_ADDR_VAR 0 11
46096: PUSH
46097: LD_VAR 0 2
46101: PPUSH
46102: LD_VAR 0 1
46106: PPUSH
46107: CALL_OW 248
46111: PPUSH
46112: CALL_OW 450
46116: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
46117: LD_VAR 0 10
46121: PPUSH
46122: LD_INT 1
46124: PPUSH
46125: CALL_OW 275
46129: PUSH
46130: LD_VAR 0 11
46134: PUSH
46135: LD_INT 1
46137: ARRAY
46138: GREATEREQUAL
46139: PUSH
46140: LD_VAR 0 10
46144: PPUSH
46145: LD_INT 2
46147: PPUSH
46148: CALL_OW 275
46152: PUSH
46153: LD_VAR 0 11
46157: PUSH
46158: LD_INT 2
46160: ARRAY
46161: GREATEREQUAL
46162: AND
46163: PUSH
46164: LD_VAR 0 10
46168: PPUSH
46169: LD_INT 3
46171: PPUSH
46172: CALL_OW 275
46176: PUSH
46177: LD_VAR 0 11
46181: PUSH
46182: LD_INT 3
46184: ARRAY
46185: GREATEREQUAL
46186: AND
46187: NOT
46188: IFFALSE 46192
// exit ;
46190: GO 46779
// if GetBType ( depot ) = b_depot then
46192: LD_VAR 0 1
46196: PPUSH
46197: CALL_OW 266
46201: PUSH
46202: LD_INT 0
46204: EQUAL
46205: IFFALSE 46217
// dist := 28 else
46207: LD_ADDR_VAR 0 14
46211: PUSH
46212: LD_INT 28
46214: ST_TO_ADDR
46215: GO 46225
// dist := 36 ;
46217: LD_ADDR_VAR 0 14
46221: PUSH
46222: LD_INT 36
46224: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
46225: LD_VAR 0 1
46229: PPUSH
46230: LD_VAR 0 3
46234: PPUSH
46235: LD_VAR 0 4
46239: PPUSH
46240: CALL_OW 297
46244: PUSH
46245: LD_VAR 0 14
46249: GREATER
46250: IFFALSE 46254
// exit ;
46252: GO 46779
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
46254: LD_ADDR_VAR 0 12
46258: PUSH
46259: LD_VAR 0 2
46263: PPUSH
46264: LD_VAR 0 3
46268: PPUSH
46269: LD_VAR 0 4
46273: PPUSH
46274: LD_VAR 0 5
46278: PPUSH
46279: LD_VAR 0 1
46283: PPUSH
46284: CALL_OW 248
46288: PPUSH
46289: LD_INT 0
46291: PPUSH
46292: CALL 46784 0 6
46296: ST_TO_ADDR
// if not hexes then
46297: LD_VAR 0 12
46301: NOT
46302: IFFALSE 46306
// exit ;
46304: GO 46779
// hex := GetHexInfo ( x , y ) ;
46306: LD_ADDR_VAR 0 15
46310: PUSH
46311: LD_VAR 0 3
46315: PPUSH
46316: LD_VAR 0 4
46320: PPUSH
46321: CALL_OW 546
46325: ST_TO_ADDR
// if hex [ 1 ] then
46326: LD_VAR 0 15
46330: PUSH
46331: LD_INT 1
46333: ARRAY
46334: IFFALSE 46338
// exit ;
46336: GO 46779
// height := hex [ 2 ] ;
46338: LD_ADDR_VAR 0 13
46342: PUSH
46343: LD_VAR 0 15
46347: PUSH
46348: LD_INT 2
46350: ARRAY
46351: ST_TO_ADDR
// for i = 1 to hexes do
46352: LD_ADDR_VAR 0 7
46356: PUSH
46357: DOUBLE
46358: LD_INT 1
46360: DEC
46361: ST_TO_ADDR
46362: LD_VAR 0 12
46366: PUSH
46367: FOR_TO
46368: IFFALSE 46698
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
46370: LD_VAR 0 12
46374: PUSH
46375: LD_VAR 0 7
46379: ARRAY
46380: PUSH
46381: LD_INT 1
46383: ARRAY
46384: PPUSH
46385: LD_VAR 0 12
46389: PUSH
46390: LD_VAR 0 7
46394: ARRAY
46395: PUSH
46396: LD_INT 2
46398: ARRAY
46399: PPUSH
46400: CALL_OW 488
46404: NOT
46405: PUSH
46406: LD_VAR 0 12
46410: PUSH
46411: LD_VAR 0 7
46415: ARRAY
46416: PUSH
46417: LD_INT 1
46419: ARRAY
46420: PPUSH
46421: LD_VAR 0 12
46425: PUSH
46426: LD_VAR 0 7
46430: ARRAY
46431: PUSH
46432: LD_INT 2
46434: ARRAY
46435: PPUSH
46436: CALL_OW 428
46440: PUSH
46441: LD_INT 0
46443: GREATER
46444: OR
46445: PUSH
46446: LD_VAR 0 12
46450: PUSH
46451: LD_VAR 0 7
46455: ARRAY
46456: PUSH
46457: LD_INT 1
46459: ARRAY
46460: PPUSH
46461: LD_VAR 0 12
46465: PUSH
46466: LD_VAR 0 7
46470: ARRAY
46471: PUSH
46472: LD_INT 2
46474: ARRAY
46475: PPUSH
46476: CALL_OW 351
46480: OR
46481: IFFALSE 46487
// exit ;
46483: POP
46484: POP
46485: GO 46779
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46487: LD_ADDR_VAR 0 8
46491: PUSH
46492: LD_VAR 0 12
46496: PUSH
46497: LD_VAR 0 7
46501: ARRAY
46502: PUSH
46503: LD_INT 1
46505: ARRAY
46506: PPUSH
46507: LD_VAR 0 12
46511: PUSH
46512: LD_VAR 0 7
46516: ARRAY
46517: PUSH
46518: LD_INT 2
46520: ARRAY
46521: PPUSH
46522: CALL_OW 546
46526: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
46527: LD_VAR 0 8
46531: PUSH
46532: LD_INT 1
46534: ARRAY
46535: PUSH
46536: LD_VAR 0 8
46540: PUSH
46541: LD_INT 2
46543: ARRAY
46544: PUSH
46545: LD_VAR 0 13
46549: PUSH
46550: LD_INT 2
46552: PLUS
46553: GREATER
46554: OR
46555: PUSH
46556: LD_VAR 0 8
46560: PUSH
46561: LD_INT 2
46563: ARRAY
46564: PUSH
46565: LD_VAR 0 13
46569: PUSH
46570: LD_INT 2
46572: MINUS
46573: LESS
46574: OR
46575: PUSH
46576: LD_VAR 0 8
46580: PUSH
46581: LD_INT 3
46583: ARRAY
46584: PUSH
46585: LD_INT 0
46587: PUSH
46588: LD_INT 8
46590: PUSH
46591: LD_INT 9
46593: PUSH
46594: LD_INT 10
46596: PUSH
46597: LD_INT 11
46599: PUSH
46600: LD_INT 12
46602: PUSH
46603: LD_INT 13
46605: PUSH
46606: LD_INT 16
46608: PUSH
46609: LD_INT 17
46611: PUSH
46612: LD_INT 18
46614: PUSH
46615: LD_INT 19
46617: PUSH
46618: LD_INT 20
46620: PUSH
46621: LD_INT 21
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: IN
46639: NOT
46640: OR
46641: PUSH
46642: LD_VAR 0 8
46646: PUSH
46647: LD_INT 5
46649: ARRAY
46650: NOT
46651: OR
46652: PUSH
46653: LD_VAR 0 8
46657: PUSH
46658: LD_INT 6
46660: ARRAY
46661: PUSH
46662: LD_INT 1
46664: PUSH
46665: LD_INT 2
46667: PUSH
46668: LD_INT 7
46670: PUSH
46671: LD_INT 9
46673: PUSH
46674: LD_INT 10
46676: PUSH
46677: LD_INT 11
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: IN
46688: NOT
46689: OR
46690: IFFALSE 46696
// exit ;
46692: POP
46693: POP
46694: GO 46779
// end ;
46696: GO 46367
46698: POP
46699: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46700: LD_VAR 0 9
46704: PPUSH
46705: LD_VAR 0 3
46709: PPUSH
46710: LD_VAR 0 4
46714: PPUSH
46715: LD_INT 20
46717: PPUSH
46718: CALL 38731 0 4
46722: PUSH
46723: LD_INT 4
46725: ARRAY
46726: IFFALSE 46730
// exit ;
46728: GO 46779
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46730: LD_VAR 0 2
46734: PUSH
46735: LD_INT 29
46737: PUSH
46738: LD_INT 30
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: IN
46745: PUSH
46746: LD_VAR 0 3
46750: PPUSH
46751: LD_VAR 0 4
46755: PPUSH
46756: LD_VAR 0 9
46760: PPUSH
46761: CALL_OW 440
46765: NOT
46766: AND
46767: IFFALSE 46771
// exit ;
46769: GO 46779
// result := true ;
46771: LD_ADDR_VAR 0 6
46775: PUSH
46776: LD_INT 1
46778: ST_TO_ADDR
// end ;
46779: LD_VAR 0 6
46783: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46784: LD_INT 0
46786: PPUSH
46787: PPUSH
46788: PPUSH
46789: PPUSH
46790: PPUSH
46791: PPUSH
46792: PPUSH
46793: PPUSH
46794: PPUSH
46795: PPUSH
46796: PPUSH
46797: PPUSH
46798: PPUSH
46799: PPUSH
46800: PPUSH
46801: PPUSH
46802: PPUSH
46803: PPUSH
46804: PPUSH
46805: PPUSH
46806: PPUSH
46807: PPUSH
46808: PPUSH
46809: PPUSH
46810: PPUSH
46811: PPUSH
46812: PPUSH
46813: PPUSH
46814: PPUSH
46815: PPUSH
46816: PPUSH
46817: PPUSH
46818: PPUSH
46819: PPUSH
46820: PPUSH
46821: PPUSH
46822: PPUSH
46823: PPUSH
46824: PPUSH
46825: PPUSH
46826: PPUSH
46827: PPUSH
46828: PPUSH
46829: PPUSH
46830: PPUSH
46831: PPUSH
46832: PPUSH
46833: PPUSH
46834: PPUSH
46835: PPUSH
46836: PPUSH
46837: PPUSH
46838: PPUSH
46839: PPUSH
46840: PPUSH
46841: PPUSH
46842: PPUSH
46843: PPUSH
// result = [ ] ;
46844: LD_ADDR_VAR 0 7
46848: PUSH
46849: EMPTY
46850: ST_TO_ADDR
// temp_list = [ ] ;
46851: LD_ADDR_VAR 0 9
46855: PUSH
46856: EMPTY
46857: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46858: LD_VAR 0 4
46862: PUSH
46863: LD_INT 0
46865: PUSH
46866: LD_INT 1
46868: PUSH
46869: LD_INT 2
46871: PUSH
46872: LD_INT 3
46874: PUSH
46875: LD_INT 4
46877: PUSH
46878: LD_INT 5
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: IN
46889: NOT
46890: PUSH
46891: LD_VAR 0 1
46895: PUSH
46896: LD_INT 0
46898: PUSH
46899: LD_INT 1
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: IN
46906: PUSH
46907: LD_VAR 0 5
46911: PUSH
46912: LD_INT 1
46914: PUSH
46915: LD_INT 2
46917: PUSH
46918: LD_INT 3
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: LIST
46925: IN
46926: NOT
46927: AND
46928: OR
46929: IFFALSE 46933
// exit ;
46931: GO 65324
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46933: LD_VAR 0 1
46937: PUSH
46938: LD_INT 6
46940: PUSH
46941: LD_INT 7
46943: PUSH
46944: LD_INT 8
46946: PUSH
46947: LD_INT 13
46949: PUSH
46950: LD_INT 12
46952: PUSH
46953: LD_INT 15
46955: PUSH
46956: LD_INT 11
46958: PUSH
46959: LD_INT 14
46961: PUSH
46962: LD_INT 10
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: IN
46976: IFFALSE 46986
// btype = b_lab ;
46978: LD_ADDR_VAR 0 1
46982: PUSH
46983: LD_INT 6
46985: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46986: LD_VAR 0 6
46990: PUSH
46991: LD_INT 0
46993: PUSH
46994: LD_INT 1
46996: PUSH
46997: LD_INT 2
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: LIST
47004: IN
47005: NOT
47006: PUSH
47007: LD_VAR 0 1
47011: PUSH
47012: LD_INT 0
47014: PUSH
47015: LD_INT 1
47017: PUSH
47018: LD_INT 2
47020: PUSH
47021: LD_INT 3
47023: PUSH
47024: LD_INT 6
47026: PUSH
47027: LD_INT 36
47029: PUSH
47030: LD_INT 4
47032: PUSH
47033: LD_INT 5
47035: PUSH
47036: LD_INT 31
47038: PUSH
47039: LD_INT 32
47041: PUSH
47042: LD_INT 33
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: IN
47058: NOT
47059: PUSH
47060: LD_VAR 0 6
47064: PUSH
47065: LD_INT 1
47067: EQUAL
47068: AND
47069: OR
47070: PUSH
47071: LD_VAR 0 1
47075: PUSH
47076: LD_INT 2
47078: PUSH
47079: LD_INT 3
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: IN
47086: NOT
47087: PUSH
47088: LD_VAR 0 6
47092: PUSH
47093: LD_INT 2
47095: EQUAL
47096: AND
47097: OR
47098: IFFALSE 47108
// mode = 0 ;
47100: LD_ADDR_VAR 0 6
47104: PUSH
47105: LD_INT 0
47107: ST_TO_ADDR
// case mode of 0 :
47108: LD_VAR 0 6
47112: PUSH
47113: LD_INT 0
47115: DOUBLE
47116: EQUAL
47117: IFTRUE 47121
47119: GO 58574
47121: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47122: LD_ADDR_VAR 0 11
47126: PUSH
47127: LD_INT 0
47129: PUSH
47130: LD_INT 0
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 0
47139: PUSH
47140: LD_INT 1
47142: NEG
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 1
47150: PUSH
47151: LD_INT 0
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 1
47160: PUSH
47161: LD_INT 1
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 0
47170: PUSH
47171: LD_INT 1
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 1
47180: NEG
47181: PUSH
47182: LD_INT 0
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 1
47191: NEG
47192: PUSH
47193: LD_INT 1
47195: NEG
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 1
47203: NEG
47204: PUSH
47205: LD_INT 2
47207: NEG
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 0
47215: PUSH
47216: LD_INT 2
47218: NEG
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 1
47226: PUSH
47227: LD_INT 1
47229: NEG
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 1
47237: PUSH
47238: LD_INT 2
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 0
47247: PUSH
47248: LD_INT 2
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 1
47257: NEG
47258: PUSH
47259: LD_INT 1
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 1
47268: PUSH
47269: LD_INT 3
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 0
47278: PUSH
47279: LD_INT 3
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 1
47288: NEG
47289: PUSH
47290: LD_INT 2
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47315: LD_ADDR_VAR 0 12
47319: PUSH
47320: LD_INT 0
47322: PUSH
47323: LD_INT 0
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 0
47332: PUSH
47333: LD_INT 1
47335: NEG
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 1
47343: PUSH
47344: LD_INT 0
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 1
47353: PUSH
47354: LD_INT 1
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 0
47363: PUSH
47364: LD_INT 1
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 1
47373: NEG
47374: PUSH
47375: LD_INT 0
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 1
47384: NEG
47385: PUSH
47386: LD_INT 1
47388: NEG
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 1
47396: PUSH
47397: LD_INT 1
47399: NEG
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 2
47407: PUSH
47408: LD_INT 0
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 2
47417: PUSH
47418: LD_INT 1
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 1
47427: NEG
47428: PUSH
47429: LD_INT 1
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 2
47438: NEG
47439: PUSH
47440: LD_INT 0
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 2
47449: NEG
47450: PUSH
47451: LD_INT 1
47453: NEG
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 2
47461: NEG
47462: PUSH
47463: LD_INT 1
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 3
47472: NEG
47473: PUSH
47474: LD_INT 0
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 3
47483: NEG
47484: PUSH
47485: LD_INT 1
47487: NEG
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47511: LD_ADDR_VAR 0 13
47515: PUSH
47516: LD_INT 0
47518: PUSH
47519: LD_INT 0
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 0
47528: PUSH
47529: LD_INT 1
47531: NEG
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 1
47539: PUSH
47540: LD_INT 0
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 1
47549: PUSH
47550: LD_INT 1
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 0
47559: PUSH
47560: LD_INT 1
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 1
47569: NEG
47570: PUSH
47571: LD_INT 0
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 1
47580: NEG
47581: PUSH
47582: LD_INT 1
47584: NEG
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 1
47592: NEG
47593: PUSH
47594: LD_INT 2
47596: NEG
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 2
47604: PUSH
47605: LD_INT 1
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 2
47614: PUSH
47615: LD_INT 2
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 1
47624: PUSH
47625: LD_INT 2
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 2
47634: NEG
47635: PUSH
47636: LD_INT 1
47638: NEG
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 2
47646: NEG
47647: PUSH
47648: LD_INT 2
47650: NEG
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 2
47658: NEG
47659: PUSH
47660: LD_INT 3
47662: NEG
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 3
47670: NEG
47671: PUSH
47672: LD_INT 2
47674: NEG
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 3
47682: NEG
47683: PUSH
47684: LD_INT 3
47686: NEG
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47710: LD_ADDR_VAR 0 14
47714: PUSH
47715: LD_INT 0
47717: PUSH
47718: LD_INT 0
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 0
47727: PUSH
47728: LD_INT 1
47730: NEG
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 1
47738: PUSH
47739: LD_INT 0
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 1
47748: PUSH
47749: LD_INT 1
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 0
47758: PUSH
47759: LD_INT 1
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 1
47768: NEG
47769: PUSH
47770: LD_INT 0
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 1
47779: NEG
47780: PUSH
47781: LD_INT 1
47783: NEG
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 1
47791: NEG
47792: PUSH
47793: LD_INT 2
47795: NEG
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 0
47803: PUSH
47804: LD_INT 2
47806: NEG
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 1
47814: PUSH
47815: LD_INT 1
47817: NEG
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 1
47825: PUSH
47826: LD_INT 2
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 0
47835: PUSH
47836: LD_INT 2
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 1
47845: NEG
47846: PUSH
47847: LD_INT 1
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 1
47856: NEG
47857: PUSH
47858: LD_INT 3
47860: NEG
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 0
47868: PUSH
47869: LD_INT 3
47871: NEG
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 1
47879: PUSH
47880: LD_INT 2
47882: NEG
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47906: LD_ADDR_VAR 0 15
47910: PUSH
47911: LD_INT 0
47913: PUSH
47914: LD_INT 0
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 0
47923: PUSH
47924: LD_INT 1
47926: NEG
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 1
47934: PUSH
47935: LD_INT 0
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 1
47944: PUSH
47945: LD_INT 1
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 0
47954: PUSH
47955: LD_INT 1
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 1
47964: NEG
47965: PUSH
47966: LD_INT 0
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 1
47975: NEG
47976: PUSH
47977: LD_INT 1
47979: NEG
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 1
47987: PUSH
47988: LD_INT 1
47990: NEG
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 2
47998: PUSH
47999: LD_INT 0
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 2
48008: PUSH
48009: LD_INT 1
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 1
48018: NEG
48019: PUSH
48020: LD_INT 1
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 2
48029: NEG
48030: PUSH
48031: LD_INT 0
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 2
48040: NEG
48041: PUSH
48042: LD_INT 1
48044: NEG
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 2
48052: PUSH
48053: LD_INT 1
48055: NEG
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 3
48063: PUSH
48064: LD_INT 0
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 3
48073: PUSH
48074: LD_INT 1
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48099: LD_ADDR_VAR 0 16
48103: PUSH
48104: LD_INT 0
48106: PUSH
48107: LD_INT 0
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 0
48116: PUSH
48117: LD_INT 1
48119: NEG
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 1
48127: PUSH
48128: LD_INT 0
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 1
48137: PUSH
48138: LD_INT 1
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 0
48147: PUSH
48148: LD_INT 1
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 1
48157: NEG
48158: PUSH
48159: LD_INT 0
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 1
48168: NEG
48169: PUSH
48170: LD_INT 1
48172: NEG
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 1
48180: NEG
48181: PUSH
48182: LD_INT 2
48184: NEG
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 2
48192: PUSH
48193: LD_INT 1
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 2
48202: PUSH
48203: LD_INT 2
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 1
48212: PUSH
48213: LD_INT 2
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 2
48222: NEG
48223: PUSH
48224: LD_INT 1
48226: NEG
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 2
48234: NEG
48235: PUSH
48236: LD_INT 2
48238: NEG
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 3
48246: PUSH
48247: LD_INT 2
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 3
48256: PUSH
48257: LD_INT 3
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 2
48266: PUSH
48267: LD_INT 3
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48292: LD_ADDR_VAR 0 17
48296: PUSH
48297: LD_INT 0
48299: PUSH
48300: LD_INT 0
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 0
48309: PUSH
48310: LD_INT 1
48312: NEG
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 1
48320: PUSH
48321: LD_INT 0
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 1
48330: PUSH
48331: LD_INT 1
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 0
48340: PUSH
48341: LD_INT 1
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 1
48350: NEG
48351: PUSH
48352: LD_INT 0
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 1
48361: NEG
48362: PUSH
48363: LD_INT 1
48365: NEG
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 1
48373: NEG
48374: PUSH
48375: LD_INT 2
48377: NEG
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 0
48385: PUSH
48386: LD_INT 2
48388: NEG
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 1
48396: PUSH
48397: LD_INT 1
48399: NEG
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 2
48407: PUSH
48408: LD_INT 0
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 2
48417: PUSH
48418: LD_INT 1
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 2
48427: PUSH
48428: LD_INT 2
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 1
48437: PUSH
48438: LD_INT 2
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 0
48447: PUSH
48448: LD_INT 2
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 1
48457: NEG
48458: PUSH
48459: LD_INT 1
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 2
48468: NEG
48469: PUSH
48470: LD_INT 0
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 2
48479: NEG
48480: PUSH
48481: LD_INT 1
48483: NEG
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 2
48491: NEG
48492: PUSH
48493: LD_INT 2
48495: NEG
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48522: LD_ADDR_VAR 0 18
48526: PUSH
48527: LD_INT 0
48529: PUSH
48530: LD_INT 0
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 0
48539: PUSH
48540: LD_INT 1
48542: NEG
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 1
48550: PUSH
48551: LD_INT 0
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 1
48560: PUSH
48561: LD_INT 1
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 0
48570: PUSH
48571: LD_INT 1
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 1
48580: NEG
48581: PUSH
48582: LD_INT 0
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 1
48591: NEG
48592: PUSH
48593: LD_INT 1
48595: NEG
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 1
48603: NEG
48604: PUSH
48605: LD_INT 2
48607: NEG
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 0
48615: PUSH
48616: LD_INT 2
48618: NEG
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 1
48626: PUSH
48627: LD_INT 1
48629: NEG
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 2
48637: PUSH
48638: LD_INT 0
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 2
48647: PUSH
48648: LD_INT 1
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 2
48657: PUSH
48658: LD_INT 2
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 1
48667: PUSH
48668: LD_INT 2
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 0
48677: PUSH
48678: LD_INT 2
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 1
48687: NEG
48688: PUSH
48689: LD_INT 1
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 2
48698: NEG
48699: PUSH
48700: LD_INT 0
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 2
48709: NEG
48710: PUSH
48711: LD_INT 1
48713: NEG
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 2
48721: NEG
48722: PUSH
48723: LD_INT 2
48725: NEG
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48752: LD_ADDR_VAR 0 19
48756: PUSH
48757: LD_INT 0
48759: PUSH
48760: LD_INT 0
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 0
48769: PUSH
48770: LD_INT 1
48772: NEG
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 1
48780: PUSH
48781: LD_INT 0
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 1
48790: PUSH
48791: LD_INT 1
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 0
48800: PUSH
48801: LD_INT 1
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 1
48810: NEG
48811: PUSH
48812: LD_INT 0
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 1
48821: NEG
48822: PUSH
48823: LD_INT 1
48825: NEG
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 1
48833: NEG
48834: PUSH
48835: LD_INT 2
48837: NEG
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 0
48845: PUSH
48846: LD_INT 2
48848: NEG
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 1
48856: PUSH
48857: LD_INT 1
48859: NEG
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 2
48867: PUSH
48868: LD_INT 0
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 2
48877: PUSH
48878: LD_INT 1
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 2
48887: PUSH
48888: LD_INT 2
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 1
48897: PUSH
48898: LD_INT 2
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 0
48907: PUSH
48908: LD_INT 2
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 1
48917: NEG
48918: PUSH
48919: LD_INT 1
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 2
48928: NEG
48929: PUSH
48930: LD_INT 0
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 2
48939: NEG
48940: PUSH
48941: LD_INT 1
48943: NEG
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 2
48951: NEG
48952: PUSH
48953: LD_INT 2
48955: NEG
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48982: LD_ADDR_VAR 0 20
48986: PUSH
48987: LD_INT 0
48989: PUSH
48990: LD_INT 0
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 0
48999: PUSH
49000: LD_INT 1
49002: NEG
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 1
49010: PUSH
49011: LD_INT 0
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 1
49020: PUSH
49021: LD_INT 1
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 0
49030: PUSH
49031: LD_INT 1
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 1
49040: NEG
49041: PUSH
49042: LD_INT 0
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 1
49051: NEG
49052: PUSH
49053: LD_INT 1
49055: NEG
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 1
49063: NEG
49064: PUSH
49065: LD_INT 2
49067: NEG
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 0
49075: PUSH
49076: LD_INT 2
49078: NEG
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 1
49086: PUSH
49087: LD_INT 1
49089: NEG
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 2
49097: PUSH
49098: LD_INT 0
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 2
49107: PUSH
49108: LD_INT 1
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 2
49117: PUSH
49118: LD_INT 2
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 1
49127: PUSH
49128: LD_INT 2
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 0
49137: PUSH
49138: LD_INT 2
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 1
49147: NEG
49148: PUSH
49149: LD_INT 1
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 2
49158: NEG
49159: PUSH
49160: LD_INT 0
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 2
49169: NEG
49170: PUSH
49171: LD_INT 1
49173: NEG
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 2
49181: NEG
49182: PUSH
49183: LD_INT 2
49185: NEG
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49212: LD_ADDR_VAR 0 21
49216: PUSH
49217: LD_INT 0
49219: PUSH
49220: LD_INT 0
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 0
49229: PUSH
49230: LD_INT 1
49232: NEG
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 1
49240: PUSH
49241: LD_INT 0
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 1
49250: PUSH
49251: LD_INT 1
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 0
49260: PUSH
49261: LD_INT 1
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 1
49270: NEG
49271: PUSH
49272: LD_INT 0
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 1
49281: NEG
49282: PUSH
49283: LD_INT 1
49285: NEG
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 1
49293: NEG
49294: PUSH
49295: LD_INT 2
49297: NEG
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 0
49305: PUSH
49306: LD_INT 2
49308: NEG
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 1
49316: PUSH
49317: LD_INT 1
49319: NEG
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 2
49327: PUSH
49328: LD_INT 0
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 2
49337: PUSH
49338: LD_INT 1
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 2
49347: PUSH
49348: LD_INT 2
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 1
49357: PUSH
49358: LD_INT 2
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 0
49367: PUSH
49368: LD_INT 2
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 1
49377: NEG
49378: PUSH
49379: LD_INT 1
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 2
49388: NEG
49389: PUSH
49390: LD_INT 0
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 2
49399: NEG
49400: PUSH
49401: LD_INT 1
49403: NEG
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 2
49411: NEG
49412: PUSH
49413: LD_INT 2
49415: NEG
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49442: LD_ADDR_VAR 0 22
49446: PUSH
49447: LD_INT 0
49449: PUSH
49450: LD_INT 0
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 0
49459: PUSH
49460: LD_INT 1
49462: NEG
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 1
49470: PUSH
49471: LD_INT 0
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 1
49480: PUSH
49481: LD_INT 1
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 0
49490: PUSH
49491: LD_INT 1
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 1
49500: NEG
49501: PUSH
49502: LD_INT 0
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 1
49511: NEG
49512: PUSH
49513: LD_INT 1
49515: NEG
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 1
49523: NEG
49524: PUSH
49525: LD_INT 2
49527: NEG
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 0
49535: PUSH
49536: LD_INT 2
49538: NEG
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 1
49546: PUSH
49547: LD_INT 1
49549: NEG
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 2
49557: PUSH
49558: LD_INT 0
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 2
49567: PUSH
49568: LD_INT 1
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 2
49577: PUSH
49578: LD_INT 2
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 1
49587: PUSH
49588: LD_INT 2
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 0
49597: PUSH
49598: LD_INT 2
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 1
49607: NEG
49608: PUSH
49609: LD_INT 1
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 2
49618: NEG
49619: PUSH
49620: LD_INT 0
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 2
49629: NEG
49630: PUSH
49631: LD_INT 1
49633: NEG
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 2
49641: NEG
49642: PUSH
49643: LD_INT 2
49645: NEG
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49672: LD_ADDR_VAR 0 23
49676: PUSH
49677: LD_INT 0
49679: PUSH
49680: LD_INT 0
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 0
49689: PUSH
49690: LD_INT 1
49692: NEG
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 1
49700: PUSH
49701: LD_INT 0
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 1
49710: PUSH
49711: LD_INT 1
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 0
49720: PUSH
49721: LD_INT 1
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 1
49730: NEG
49731: PUSH
49732: LD_INT 0
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 1
49741: NEG
49742: PUSH
49743: LD_INT 1
49745: NEG
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 1
49753: NEG
49754: PUSH
49755: LD_INT 2
49757: NEG
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 0
49765: PUSH
49766: LD_INT 2
49768: NEG
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 1
49776: PUSH
49777: LD_INT 1
49779: NEG
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 2
49787: PUSH
49788: LD_INT 0
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 2
49797: PUSH
49798: LD_INT 1
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 2
49807: PUSH
49808: LD_INT 2
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 1
49817: PUSH
49818: LD_INT 2
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 0
49827: PUSH
49828: LD_INT 2
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 1
49837: NEG
49838: PUSH
49839: LD_INT 1
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 2
49848: NEG
49849: PUSH
49850: LD_INT 0
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 2
49859: NEG
49860: PUSH
49861: LD_INT 1
49863: NEG
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 2
49871: NEG
49872: PUSH
49873: LD_INT 2
49875: NEG
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 2
49883: NEG
49884: PUSH
49885: LD_INT 3
49887: NEG
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 1
49895: NEG
49896: PUSH
49897: LD_INT 3
49899: NEG
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 1
49907: PUSH
49908: LD_INT 2
49910: NEG
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 2
49918: PUSH
49919: LD_INT 1
49921: NEG
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49952: LD_ADDR_VAR 0 24
49956: PUSH
49957: LD_INT 0
49959: PUSH
49960: LD_INT 0
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 0
49969: PUSH
49970: LD_INT 1
49972: NEG
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 1
49980: PUSH
49981: LD_INT 0
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 1
49990: PUSH
49991: LD_INT 1
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 0
50000: PUSH
50001: LD_INT 1
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 1
50010: NEG
50011: PUSH
50012: LD_INT 0
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 1
50021: NEG
50022: PUSH
50023: LD_INT 1
50025: NEG
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 1
50033: NEG
50034: PUSH
50035: LD_INT 2
50037: NEG
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 0
50045: PUSH
50046: LD_INT 2
50048: NEG
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 1
50056: PUSH
50057: LD_INT 1
50059: NEG
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 2
50067: PUSH
50068: LD_INT 0
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 2
50077: PUSH
50078: LD_INT 1
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 2
50087: PUSH
50088: LD_INT 2
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 1
50097: PUSH
50098: LD_INT 2
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 0
50107: PUSH
50108: LD_INT 2
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 1
50117: NEG
50118: PUSH
50119: LD_INT 1
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 2
50128: NEG
50129: PUSH
50130: LD_INT 0
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 2
50139: NEG
50140: PUSH
50141: LD_INT 1
50143: NEG
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 2
50151: NEG
50152: PUSH
50153: LD_INT 2
50155: NEG
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 1
50163: PUSH
50164: LD_INT 2
50166: NEG
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 2
50174: PUSH
50175: LD_INT 1
50177: NEG
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 3
50185: PUSH
50186: LD_INT 1
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 3
50195: PUSH
50196: LD_INT 2
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
50228: LD_ADDR_VAR 0 25
50232: PUSH
50233: LD_INT 0
50235: PUSH
50236: LD_INT 0
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 0
50245: PUSH
50246: LD_INT 1
50248: NEG
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 1
50256: PUSH
50257: LD_INT 0
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 1
50266: PUSH
50267: LD_INT 1
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 0
50276: PUSH
50277: LD_INT 1
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 1
50286: NEG
50287: PUSH
50288: LD_INT 0
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 1
50297: NEG
50298: PUSH
50299: LD_INT 1
50301: NEG
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 1
50309: NEG
50310: PUSH
50311: LD_INT 2
50313: NEG
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 0
50321: PUSH
50322: LD_INT 2
50324: NEG
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 1
50332: PUSH
50333: LD_INT 1
50335: NEG
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 2
50343: PUSH
50344: LD_INT 0
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 2
50353: PUSH
50354: LD_INT 1
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 2
50363: PUSH
50364: LD_INT 2
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 1
50373: PUSH
50374: LD_INT 2
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 0
50383: PUSH
50384: LD_INT 2
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 1
50393: NEG
50394: PUSH
50395: LD_INT 1
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 2
50404: NEG
50405: PUSH
50406: LD_INT 0
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 2
50415: NEG
50416: PUSH
50417: LD_INT 1
50419: NEG
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 2
50427: NEG
50428: PUSH
50429: LD_INT 2
50431: NEG
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 3
50439: PUSH
50440: LD_INT 1
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 3
50449: PUSH
50450: LD_INT 2
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 2
50459: PUSH
50460: LD_INT 3
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 1
50469: PUSH
50470: LD_INT 3
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50502: LD_ADDR_VAR 0 26
50506: PUSH
50507: LD_INT 0
50509: PUSH
50510: LD_INT 0
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 0
50519: PUSH
50520: LD_INT 1
50522: NEG
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 1
50530: PUSH
50531: LD_INT 0
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 1
50540: PUSH
50541: LD_INT 1
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 0
50550: PUSH
50551: LD_INT 1
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 1
50560: NEG
50561: PUSH
50562: LD_INT 0
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 1
50571: NEG
50572: PUSH
50573: LD_INT 1
50575: NEG
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 1
50583: NEG
50584: PUSH
50585: LD_INT 2
50587: NEG
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 0
50595: PUSH
50596: LD_INT 2
50598: NEG
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 1
50606: PUSH
50607: LD_INT 1
50609: NEG
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 2
50617: PUSH
50618: LD_INT 0
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 2
50627: PUSH
50628: LD_INT 1
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 2
50637: PUSH
50638: LD_INT 2
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 1
50647: PUSH
50648: LD_INT 2
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 0
50657: PUSH
50658: LD_INT 2
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 1
50667: NEG
50668: PUSH
50669: LD_INT 1
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 2
50678: NEG
50679: PUSH
50680: LD_INT 0
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 2
50689: NEG
50690: PUSH
50691: LD_INT 1
50693: NEG
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 2
50701: NEG
50702: PUSH
50703: LD_INT 2
50705: NEG
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 2
50713: PUSH
50714: LD_INT 3
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 1
50723: PUSH
50724: LD_INT 3
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 1
50733: NEG
50734: PUSH
50735: LD_INT 2
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 2
50744: NEG
50745: PUSH
50746: LD_INT 1
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50778: LD_ADDR_VAR 0 27
50782: PUSH
50783: LD_INT 0
50785: PUSH
50786: LD_INT 0
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 0
50795: PUSH
50796: LD_INT 1
50798: NEG
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 1
50806: PUSH
50807: LD_INT 0
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 1
50816: PUSH
50817: LD_INT 1
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 0
50826: PUSH
50827: LD_INT 1
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 1
50836: NEG
50837: PUSH
50838: LD_INT 0
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 1
50847: NEG
50848: PUSH
50849: LD_INT 1
50851: NEG
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 1
50859: NEG
50860: PUSH
50861: LD_INT 2
50863: NEG
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 0
50871: PUSH
50872: LD_INT 2
50874: NEG
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 1
50882: PUSH
50883: LD_INT 1
50885: NEG
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 2
50893: PUSH
50894: LD_INT 0
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 2
50903: PUSH
50904: LD_INT 1
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 2
50913: PUSH
50914: LD_INT 2
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 1
50923: PUSH
50924: LD_INT 2
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 0
50933: PUSH
50934: LD_INT 2
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 1
50943: NEG
50944: PUSH
50945: LD_INT 1
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 2
50954: NEG
50955: PUSH
50956: LD_INT 0
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 2
50965: NEG
50966: PUSH
50967: LD_INT 1
50969: NEG
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 2
50977: NEG
50978: PUSH
50979: LD_INT 2
50981: NEG
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 1
50989: NEG
50990: PUSH
50991: LD_INT 2
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 2
51000: NEG
51001: PUSH
51002: LD_INT 1
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 3
51011: NEG
51012: PUSH
51013: LD_INT 1
51015: NEG
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 3
51023: NEG
51024: PUSH
51025: LD_INT 2
51027: NEG
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51058: LD_ADDR_VAR 0 28
51062: PUSH
51063: LD_INT 0
51065: PUSH
51066: LD_INT 0
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 0
51075: PUSH
51076: LD_INT 1
51078: NEG
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 1
51086: PUSH
51087: LD_INT 0
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 1
51096: PUSH
51097: LD_INT 1
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 0
51106: PUSH
51107: LD_INT 1
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 1
51116: NEG
51117: PUSH
51118: LD_INT 0
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 1
51127: NEG
51128: PUSH
51129: LD_INT 1
51131: NEG
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 1
51139: NEG
51140: PUSH
51141: LD_INT 2
51143: NEG
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 0
51151: PUSH
51152: LD_INT 2
51154: NEG
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 1
51162: PUSH
51163: LD_INT 1
51165: NEG
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 2
51173: PUSH
51174: LD_INT 0
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 2
51183: PUSH
51184: LD_INT 1
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 2
51193: PUSH
51194: LD_INT 2
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 1
51203: PUSH
51204: LD_INT 2
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 0
51213: PUSH
51214: LD_INT 2
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 1
51223: NEG
51224: PUSH
51225: LD_INT 1
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 2
51234: NEG
51235: PUSH
51236: LD_INT 0
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 2
51245: NEG
51246: PUSH
51247: LD_INT 1
51249: NEG
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 2
51257: NEG
51258: PUSH
51259: LD_INT 2
51261: NEG
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 2
51269: NEG
51270: PUSH
51271: LD_INT 3
51273: NEG
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 1
51281: NEG
51282: PUSH
51283: LD_INT 3
51285: NEG
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 3
51293: NEG
51294: PUSH
51295: LD_INT 1
51297: NEG
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 3
51305: NEG
51306: PUSH
51307: LD_INT 2
51309: NEG
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51340: LD_ADDR_VAR 0 29
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: LD_INT 0
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 0
51357: PUSH
51358: LD_INT 1
51360: NEG
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 1
51368: PUSH
51369: LD_INT 0
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 1
51378: PUSH
51379: LD_INT 1
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 0
51388: PUSH
51389: LD_INT 1
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 1
51398: NEG
51399: PUSH
51400: LD_INT 0
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 1
51409: NEG
51410: PUSH
51411: LD_INT 1
51413: NEG
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 1
51421: NEG
51422: PUSH
51423: LD_INT 2
51425: NEG
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 0
51433: PUSH
51434: LD_INT 2
51436: NEG
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 1
51444: PUSH
51445: LD_INT 1
51447: NEG
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 2
51455: PUSH
51456: LD_INT 0
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 2
51465: PUSH
51466: LD_INT 1
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 1
51475: PUSH
51476: LD_INT 2
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 0
51485: PUSH
51486: LD_INT 2
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 1
51495: NEG
51496: PUSH
51497: LD_INT 1
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 2
51506: NEG
51507: PUSH
51508: LD_INT 1
51510: NEG
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 2
51518: NEG
51519: PUSH
51520: LD_INT 2
51522: NEG
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 2
51530: NEG
51531: PUSH
51532: LD_INT 3
51534: NEG
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 2
51542: PUSH
51543: LD_INT 1
51545: NEG
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 3
51553: PUSH
51554: LD_INT 1
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 1
51563: PUSH
51564: LD_INT 3
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 1
51573: NEG
51574: PUSH
51575: LD_INT 2
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 3
51584: NEG
51585: PUSH
51586: LD_INT 2
51588: NEG
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51619: LD_ADDR_VAR 0 30
51623: PUSH
51624: LD_INT 0
51626: PUSH
51627: LD_INT 0
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 0
51636: PUSH
51637: LD_INT 1
51639: NEG
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 1
51647: PUSH
51648: LD_INT 0
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 1
51657: PUSH
51658: LD_INT 1
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 0
51667: PUSH
51668: LD_INT 1
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 1
51677: NEG
51678: PUSH
51679: LD_INT 0
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 1
51688: NEG
51689: PUSH
51690: LD_INT 1
51692: NEG
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 1
51700: NEG
51701: PUSH
51702: LD_INT 2
51704: NEG
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 0
51712: PUSH
51713: LD_INT 2
51715: NEG
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 1
51723: PUSH
51724: LD_INT 1
51726: NEG
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 2
51734: PUSH
51735: LD_INT 0
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 2
51744: PUSH
51745: LD_INT 1
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 2
51754: PUSH
51755: LD_INT 2
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 1
51764: PUSH
51765: LD_INT 2
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 1
51774: NEG
51775: PUSH
51776: LD_INT 1
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 2
51785: NEG
51786: PUSH
51787: LD_INT 0
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 2
51796: NEG
51797: PUSH
51798: LD_INT 1
51800: NEG
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 1
51808: NEG
51809: PUSH
51810: LD_INT 3
51812: NEG
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 1
51820: PUSH
51821: LD_INT 2
51823: NEG
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 3
51831: PUSH
51832: LD_INT 2
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 2
51841: PUSH
51842: LD_INT 3
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 2
51851: NEG
51852: PUSH
51853: LD_INT 1
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 3
51862: NEG
51863: PUSH
51864: LD_INT 1
51866: NEG
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51897: LD_ADDR_VAR 0 31
51901: PUSH
51902: LD_INT 0
51904: PUSH
51905: LD_INT 0
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 0
51914: PUSH
51915: LD_INT 1
51917: NEG
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 1
51925: PUSH
51926: LD_INT 0
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 1
51935: PUSH
51936: LD_INT 1
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 0
51945: PUSH
51946: LD_INT 1
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 1
51955: NEG
51956: PUSH
51957: LD_INT 0
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 1
51966: NEG
51967: PUSH
51968: LD_INT 1
51970: NEG
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 1
51978: NEG
51979: PUSH
51980: LD_INT 2
51982: NEG
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 1
51990: PUSH
51991: LD_INT 1
51993: NEG
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 2
52001: PUSH
52002: LD_INT 0
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 2
52011: PUSH
52012: LD_INT 1
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 2
52021: PUSH
52022: LD_INT 2
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 1
52031: PUSH
52032: LD_INT 2
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 0
52041: PUSH
52042: LD_INT 2
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 1
52051: NEG
52052: PUSH
52053: LD_INT 1
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 2
52062: NEG
52063: PUSH
52064: LD_INT 1
52066: NEG
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 2
52074: NEG
52075: PUSH
52076: LD_INT 2
52078: NEG
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 2
52086: NEG
52087: PUSH
52088: LD_INT 3
52090: NEG
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 2
52098: PUSH
52099: LD_INT 1
52101: NEG
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 3
52109: PUSH
52110: LD_INT 1
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 1
52119: PUSH
52120: LD_INT 3
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 1
52129: NEG
52130: PUSH
52131: LD_INT 2
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 3
52140: NEG
52141: PUSH
52142: LD_INT 2
52144: NEG
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52175: LD_ADDR_VAR 0 32
52179: PUSH
52180: LD_INT 0
52182: PUSH
52183: LD_INT 0
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 0
52192: PUSH
52193: LD_INT 1
52195: NEG
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 1
52203: PUSH
52204: LD_INT 0
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 1
52213: PUSH
52214: LD_INT 1
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 0
52223: PUSH
52224: LD_INT 1
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 1
52233: NEG
52234: PUSH
52235: LD_INT 0
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 1
52244: NEG
52245: PUSH
52246: LD_INT 1
52248: NEG
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 1
52256: NEG
52257: PUSH
52258: LD_INT 2
52260: NEG
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 0
52268: PUSH
52269: LD_INT 2
52271: NEG
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 1
52279: PUSH
52280: LD_INT 1
52282: NEG
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 2
52290: PUSH
52291: LD_INT 1
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 2
52300: PUSH
52301: LD_INT 2
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 1
52310: PUSH
52311: LD_INT 2
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 0
52320: PUSH
52321: LD_INT 2
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 1
52330: NEG
52331: PUSH
52332: LD_INT 1
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 2
52341: NEG
52342: PUSH
52343: LD_INT 0
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 2
52352: NEG
52353: PUSH
52354: LD_INT 1
52356: NEG
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 1
52364: NEG
52365: PUSH
52366: LD_INT 3
52368: NEG
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 1
52376: PUSH
52377: LD_INT 2
52379: NEG
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 3
52387: PUSH
52388: LD_INT 2
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 2
52397: PUSH
52398: LD_INT 3
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 2
52407: NEG
52408: PUSH
52409: LD_INT 1
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 3
52418: NEG
52419: PUSH
52420: LD_INT 1
52422: NEG
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52453: LD_ADDR_VAR 0 33
52457: PUSH
52458: LD_INT 0
52460: PUSH
52461: LD_INT 0
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 0
52470: PUSH
52471: LD_INT 1
52473: NEG
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 1
52481: PUSH
52482: LD_INT 0
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 1
52491: PUSH
52492: LD_INT 1
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 0
52501: PUSH
52502: LD_INT 1
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 1
52511: NEG
52512: PUSH
52513: LD_INT 0
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 1
52522: NEG
52523: PUSH
52524: LD_INT 1
52526: NEG
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 1
52534: NEG
52535: PUSH
52536: LD_INT 2
52538: NEG
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 1
52546: PUSH
52547: LD_INT 1
52549: NEG
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 2
52557: PUSH
52558: LD_INT 0
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 2
52567: PUSH
52568: LD_INT 1
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 1
52577: PUSH
52578: LD_INT 2
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 0
52587: PUSH
52588: LD_INT 2
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 1
52597: NEG
52598: PUSH
52599: LD_INT 1
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 2
52608: NEG
52609: PUSH
52610: LD_INT 0
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 2
52619: NEG
52620: PUSH
52621: LD_INT 1
52623: NEG
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 2
52631: NEG
52632: PUSH
52633: LD_INT 2
52635: NEG
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 2
52643: NEG
52644: PUSH
52645: LD_INT 3
52647: NEG
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 2
52655: PUSH
52656: LD_INT 1
52658: NEG
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 3
52666: PUSH
52667: LD_INT 1
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 1
52676: PUSH
52677: LD_INT 3
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 1
52686: NEG
52687: PUSH
52688: LD_INT 2
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 3
52697: NEG
52698: PUSH
52699: LD_INT 2
52701: NEG
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52732: LD_ADDR_VAR 0 34
52736: PUSH
52737: LD_INT 0
52739: PUSH
52740: LD_INT 0
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 0
52749: PUSH
52750: LD_INT 1
52752: NEG
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 1
52760: PUSH
52761: LD_INT 0
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 1
52770: PUSH
52771: LD_INT 1
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 0
52780: PUSH
52781: LD_INT 1
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 1
52790: NEG
52791: PUSH
52792: LD_INT 0
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 1
52801: NEG
52802: PUSH
52803: LD_INT 1
52805: NEG
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 1
52813: NEG
52814: PUSH
52815: LD_INT 2
52817: NEG
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 0
52825: PUSH
52826: LD_INT 2
52828: NEG
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 1
52836: PUSH
52837: LD_INT 1
52839: NEG
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 2
52847: PUSH
52848: LD_INT 1
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 2
52857: PUSH
52858: LD_INT 2
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 1
52867: PUSH
52868: LD_INT 2
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 1
52877: NEG
52878: PUSH
52879: LD_INT 1
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 2
52888: NEG
52889: PUSH
52890: LD_INT 0
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 2
52899: NEG
52900: PUSH
52901: LD_INT 1
52903: NEG
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 2
52911: NEG
52912: PUSH
52913: LD_INT 2
52915: NEG
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 1
52923: NEG
52924: PUSH
52925: LD_INT 3
52927: NEG
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 1
52935: PUSH
52936: LD_INT 2
52938: NEG
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 3
52946: PUSH
52947: LD_INT 2
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 2
52956: PUSH
52957: LD_INT 3
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 2
52966: NEG
52967: PUSH
52968: LD_INT 1
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 3
52977: NEG
52978: PUSH
52979: LD_INT 1
52981: NEG
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53012: LD_ADDR_VAR 0 35
53016: PUSH
53017: LD_INT 0
53019: PUSH
53020: LD_INT 0
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 0
53029: PUSH
53030: LD_INT 1
53032: NEG
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 1
53040: PUSH
53041: LD_INT 0
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 1
53050: PUSH
53051: LD_INT 1
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 0
53060: PUSH
53061: LD_INT 1
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 1
53070: NEG
53071: PUSH
53072: LD_INT 0
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 1
53081: NEG
53082: PUSH
53083: LD_INT 1
53085: NEG
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 2
53093: PUSH
53094: LD_INT 1
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 2
53103: NEG
53104: PUSH
53105: LD_INT 1
53107: NEG
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53124: LD_ADDR_VAR 0 36
53128: PUSH
53129: LD_INT 0
53131: PUSH
53132: LD_INT 0
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 0
53141: PUSH
53142: LD_INT 1
53144: NEG
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 1
53152: PUSH
53153: LD_INT 0
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 1
53162: PUSH
53163: LD_INT 1
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 0
53172: PUSH
53173: LD_INT 1
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 1
53182: NEG
53183: PUSH
53184: LD_INT 0
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 1
53193: NEG
53194: PUSH
53195: LD_INT 1
53197: NEG
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 1
53205: NEG
53206: PUSH
53207: LD_INT 2
53209: NEG
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 1
53217: PUSH
53218: LD_INT 2
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53236: LD_ADDR_VAR 0 37
53240: PUSH
53241: LD_INT 0
53243: PUSH
53244: LD_INT 0
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 0
53253: PUSH
53254: LD_INT 1
53256: NEG
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 1
53264: PUSH
53265: LD_INT 0
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 1
53274: PUSH
53275: LD_INT 1
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 0
53284: PUSH
53285: LD_INT 1
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 1
53294: NEG
53295: PUSH
53296: LD_INT 0
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 1
53305: NEG
53306: PUSH
53307: LD_INT 1
53309: NEG
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 1
53317: PUSH
53318: LD_INT 1
53320: NEG
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 1
53328: NEG
53329: PUSH
53330: LD_INT 1
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53348: LD_ADDR_VAR 0 38
53352: PUSH
53353: LD_INT 0
53355: PUSH
53356: LD_INT 0
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 0
53365: PUSH
53366: LD_INT 1
53368: NEG
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 1
53376: PUSH
53377: LD_INT 0
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 1
53386: PUSH
53387: LD_INT 1
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 0
53396: PUSH
53397: LD_INT 1
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 1
53406: NEG
53407: PUSH
53408: LD_INT 0
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 1
53417: NEG
53418: PUSH
53419: LD_INT 1
53421: NEG
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 2
53429: PUSH
53430: LD_INT 1
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 2
53439: NEG
53440: PUSH
53441: LD_INT 1
53443: NEG
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53460: LD_ADDR_VAR 0 39
53464: PUSH
53465: LD_INT 0
53467: PUSH
53468: LD_INT 0
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 0
53477: PUSH
53478: LD_INT 1
53480: NEG
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 1
53488: PUSH
53489: LD_INT 0
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 1
53498: PUSH
53499: LD_INT 1
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 0
53508: PUSH
53509: LD_INT 1
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 1
53518: NEG
53519: PUSH
53520: LD_INT 0
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 1
53529: NEG
53530: PUSH
53531: LD_INT 1
53533: NEG
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 1
53541: NEG
53542: PUSH
53543: LD_INT 2
53545: NEG
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 1
53553: PUSH
53554: LD_INT 2
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53572: LD_ADDR_VAR 0 40
53576: PUSH
53577: LD_INT 0
53579: PUSH
53580: LD_INT 0
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 0
53589: PUSH
53590: LD_INT 1
53592: NEG
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 1
53600: PUSH
53601: LD_INT 0
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 1
53610: PUSH
53611: LD_INT 1
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 0
53620: PUSH
53621: LD_INT 1
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 1
53630: NEG
53631: PUSH
53632: LD_INT 0
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 1
53641: NEG
53642: PUSH
53643: LD_INT 1
53645: NEG
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 1
53653: PUSH
53654: LD_INT 1
53656: NEG
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 1
53664: NEG
53665: PUSH
53666: LD_INT 1
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53684: LD_ADDR_VAR 0 41
53688: PUSH
53689: LD_INT 0
53691: PUSH
53692: LD_INT 0
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 0
53701: PUSH
53702: LD_INT 1
53704: NEG
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 1
53712: PUSH
53713: LD_INT 0
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 1
53722: PUSH
53723: LD_INT 1
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 0
53732: PUSH
53733: LD_INT 1
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 1
53742: NEG
53743: PUSH
53744: LD_INT 0
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 1
53753: NEG
53754: PUSH
53755: LD_INT 1
53757: NEG
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 1
53765: NEG
53766: PUSH
53767: LD_INT 2
53769: NEG
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 1
53777: PUSH
53778: LD_INT 1
53780: NEG
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 2
53788: PUSH
53789: LD_INT 0
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 2
53798: PUSH
53799: LD_INT 1
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 2
53808: PUSH
53809: LD_INT 2
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 1
53818: PUSH
53819: LD_INT 2
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 1
53828: NEG
53829: PUSH
53830: LD_INT 1
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 2
53839: NEG
53840: PUSH
53841: LD_INT 0
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 2
53850: NEG
53851: PUSH
53852: LD_INT 1
53854: NEG
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 2
53862: NEG
53863: PUSH
53864: LD_INT 2
53866: NEG
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 2
53874: NEG
53875: PUSH
53876: LD_INT 3
53878: NEG
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 2
53886: PUSH
53887: LD_INT 1
53889: NEG
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 3
53897: PUSH
53898: LD_INT 0
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 3
53907: PUSH
53908: LD_INT 1
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 3
53917: PUSH
53918: LD_INT 2
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 3
53927: PUSH
53928: LD_INT 3
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 2
53937: PUSH
53938: LD_INT 3
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 2
53947: NEG
53948: PUSH
53949: LD_INT 1
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 3
53958: NEG
53959: PUSH
53960: LD_INT 0
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 3
53969: NEG
53970: PUSH
53971: LD_INT 1
53973: NEG
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 3
53981: NEG
53982: PUSH
53983: LD_INT 2
53985: NEG
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 3
53993: NEG
53994: PUSH
53995: LD_INT 3
53997: NEG
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54034: LD_ADDR_VAR 0 42
54038: PUSH
54039: LD_INT 0
54041: PUSH
54042: LD_INT 0
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 0
54051: PUSH
54052: LD_INT 1
54054: NEG
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 1
54062: PUSH
54063: LD_INT 0
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 1
54072: PUSH
54073: LD_INT 1
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 0
54082: PUSH
54083: LD_INT 1
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 1
54092: NEG
54093: PUSH
54094: LD_INT 0
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 1
54103: NEG
54104: PUSH
54105: LD_INT 1
54107: NEG
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 1
54115: NEG
54116: PUSH
54117: LD_INT 2
54119: NEG
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 0
54127: PUSH
54128: LD_INT 2
54130: NEG
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 1
54138: PUSH
54139: LD_INT 1
54141: NEG
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 2
54149: PUSH
54150: LD_INT 1
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 2
54159: PUSH
54160: LD_INT 2
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 1
54169: PUSH
54170: LD_INT 2
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 0
54179: PUSH
54180: LD_INT 2
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 1
54189: NEG
54190: PUSH
54191: LD_INT 1
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 2
54200: NEG
54201: PUSH
54202: LD_INT 1
54204: NEG
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 2
54212: NEG
54213: PUSH
54214: LD_INT 2
54216: NEG
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 2
54224: NEG
54225: PUSH
54226: LD_INT 3
54228: NEG
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 1
54236: NEG
54237: PUSH
54238: LD_INT 3
54240: NEG
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 0
54248: PUSH
54249: LD_INT 3
54251: NEG
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 1
54259: PUSH
54260: LD_INT 2
54262: NEG
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 3
54270: PUSH
54271: LD_INT 2
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 3
54280: PUSH
54281: LD_INT 3
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 2
54290: PUSH
54291: LD_INT 3
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 1
54300: PUSH
54301: LD_INT 3
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 0
54310: PUSH
54311: LD_INT 3
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 1
54320: NEG
54321: PUSH
54322: LD_INT 2
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 3
54331: NEG
54332: PUSH
54333: LD_INT 2
54335: NEG
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 3
54343: NEG
54344: PUSH
54345: LD_INT 3
54347: NEG
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54384: LD_ADDR_VAR 0 43
54388: PUSH
54389: LD_INT 0
54391: PUSH
54392: LD_INT 0
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 0
54401: PUSH
54402: LD_INT 1
54404: NEG
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 1
54412: PUSH
54413: LD_INT 0
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 1
54422: PUSH
54423: LD_INT 1
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 0
54432: PUSH
54433: LD_INT 1
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 1
54442: NEG
54443: PUSH
54444: LD_INT 0
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 1
54453: NEG
54454: PUSH
54455: LD_INT 1
54457: NEG
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 1
54465: NEG
54466: PUSH
54467: LD_INT 2
54469: NEG
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 0
54477: PUSH
54478: LD_INT 2
54480: NEG
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 1
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 2
54499: PUSH
54500: LD_INT 0
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 2
54509: PUSH
54510: LD_INT 1
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 1
54519: PUSH
54520: LD_INT 2
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 0
54529: PUSH
54530: LD_INT 2
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 1
54539: NEG
54540: PUSH
54541: LD_INT 1
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 2
54550: NEG
54551: PUSH
54552: LD_INT 0
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 2
54561: NEG
54562: PUSH
54563: LD_INT 1
54565: NEG
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 1
54573: NEG
54574: PUSH
54575: LD_INT 3
54577: NEG
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 0
54585: PUSH
54586: LD_INT 3
54588: NEG
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 1
54596: PUSH
54597: LD_INT 2
54599: NEG
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 2
54607: PUSH
54608: LD_INT 1
54610: NEG
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 3
54618: PUSH
54619: LD_INT 0
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 3
54628: PUSH
54629: LD_INT 1
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 1
54638: PUSH
54639: LD_INT 3
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 0
54648: PUSH
54649: LD_INT 3
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 1
54658: NEG
54659: PUSH
54660: LD_INT 2
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 2
54669: NEG
54670: PUSH
54671: LD_INT 1
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 3
54680: NEG
54681: PUSH
54682: LD_INT 0
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 3
54691: NEG
54692: PUSH
54693: LD_INT 1
54695: NEG
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54732: LD_ADDR_VAR 0 44
54736: PUSH
54737: LD_INT 0
54739: PUSH
54740: LD_INT 0
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 0
54749: PUSH
54750: LD_INT 1
54752: NEG
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 1
54760: PUSH
54761: LD_INT 0
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 1
54770: PUSH
54771: LD_INT 1
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 0
54780: PUSH
54781: LD_INT 1
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 1
54790: NEG
54791: PUSH
54792: LD_INT 0
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 1
54801: NEG
54802: PUSH
54803: LD_INT 1
54805: NEG
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 1
54813: NEG
54814: PUSH
54815: LD_INT 2
54817: NEG
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 1
54825: PUSH
54826: LD_INT 1
54828: NEG
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 2
54836: PUSH
54837: LD_INT 0
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 2
54846: PUSH
54847: LD_INT 1
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 2
54856: PUSH
54857: LD_INT 2
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 1
54866: PUSH
54867: LD_INT 2
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 1
54876: NEG
54877: PUSH
54878: LD_INT 1
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 2
54887: NEG
54888: PUSH
54889: LD_INT 0
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 2
54898: NEG
54899: PUSH
54900: LD_INT 1
54902: NEG
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 2
54910: NEG
54911: PUSH
54912: LD_INT 2
54914: NEG
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 2
54922: NEG
54923: PUSH
54924: LD_INT 3
54926: NEG
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 2
54934: PUSH
54935: LD_INT 1
54937: NEG
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 3
54945: PUSH
54946: LD_INT 0
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 3
54955: PUSH
54956: LD_INT 1
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 3
54965: PUSH
54966: LD_INT 2
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 3
54975: PUSH
54976: LD_INT 3
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 2
54985: PUSH
54986: LD_INT 3
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 2
54995: NEG
54996: PUSH
54997: LD_INT 1
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 3
55006: NEG
55007: PUSH
55008: LD_INT 0
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 3
55017: NEG
55018: PUSH
55019: LD_INT 1
55021: NEG
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 3
55029: NEG
55030: PUSH
55031: LD_INT 2
55033: NEG
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 3
55041: NEG
55042: PUSH
55043: LD_INT 3
55045: NEG
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55082: LD_ADDR_VAR 0 45
55086: PUSH
55087: LD_INT 0
55089: PUSH
55090: LD_INT 0
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 0
55099: PUSH
55100: LD_INT 1
55102: NEG
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 1
55110: PUSH
55111: LD_INT 0
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 1
55120: PUSH
55121: LD_INT 1
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 0
55130: PUSH
55131: LD_INT 1
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 1
55140: NEG
55141: PUSH
55142: LD_INT 0
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 1
55151: NEG
55152: PUSH
55153: LD_INT 1
55155: NEG
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 1
55163: NEG
55164: PUSH
55165: LD_INT 2
55167: NEG
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 0
55175: PUSH
55176: LD_INT 2
55178: NEG
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 1
55186: PUSH
55187: LD_INT 1
55189: NEG
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 2
55197: PUSH
55198: LD_INT 1
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 2
55207: PUSH
55208: LD_INT 2
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 1
55217: PUSH
55218: LD_INT 2
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 0
55227: PUSH
55228: LD_INT 2
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 1
55237: NEG
55238: PUSH
55239: LD_INT 1
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 2
55248: NEG
55249: PUSH
55250: LD_INT 1
55252: NEG
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 2
55260: NEG
55261: PUSH
55262: LD_INT 2
55264: NEG
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 2
55272: NEG
55273: PUSH
55274: LD_INT 3
55276: NEG
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 1
55284: NEG
55285: PUSH
55286: LD_INT 3
55288: NEG
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 0
55296: PUSH
55297: LD_INT 3
55299: NEG
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 1
55307: PUSH
55308: LD_INT 2
55310: NEG
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 3
55318: PUSH
55319: LD_INT 2
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 3
55328: PUSH
55329: LD_INT 3
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 2
55338: PUSH
55339: LD_INT 3
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 1
55348: PUSH
55349: LD_INT 3
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 0
55358: PUSH
55359: LD_INT 3
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 1
55368: NEG
55369: PUSH
55370: LD_INT 2
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 3
55379: NEG
55380: PUSH
55381: LD_INT 2
55383: NEG
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 3
55391: NEG
55392: PUSH
55393: LD_INT 3
55395: NEG
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55432: LD_ADDR_VAR 0 46
55436: PUSH
55437: LD_INT 0
55439: PUSH
55440: LD_INT 0
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 0
55449: PUSH
55450: LD_INT 1
55452: NEG
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 1
55460: PUSH
55461: LD_INT 0
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 1
55470: PUSH
55471: LD_INT 1
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 0
55480: PUSH
55481: LD_INT 1
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 1
55490: NEG
55491: PUSH
55492: LD_INT 0
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 1
55501: NEG
55502: PUSH
55503: LD_INT 1
55505: NEG
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 1
55513: NEG
55514: PUSH
55515: LD_INT 2
55517: NEG
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 0
55525: PUSH
55526: LD_INT 2
55528: NEG
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 1
55536: PUSH
55537: LD_INT 1
55539: NEG
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 2
55547: PUSH
55548: LD_INT 0
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 2
55557: PUSH
55558: LD_INT 1
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 1
55567: PUSH
55568: LD_INT 2
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 0
55577: PUSH
55578: LD_INT 2
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 1
55587: NEG
55588: PUSH
55589: LD_INT 1
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 2
55598: NEG
55599: PUSH
55600: LD_INT 0
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 2
55609: NEG
55610: PUSH
55611: LD_INT 1
55613: NEG
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 1
55621: NEG
55622: PUSH
55623: LD_INT 3
55625: NEG
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 0
55633: PUSH
55634: LD_INT 3
55636: NEG
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 1
55644: PUSH
55645: LD_INT 2
55647: NEG
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 2
55655: PUSH
55656: LD_INT 1
55658: NEG
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 3
55666: PUSH
55667: LD_INT 0
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 3
55676: PUSH
55677: LD_INT 1
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 1
55686: PUSH
55687: LD_INT 3
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 0
55696: PUSH
55697: LD_INT 3
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 1
55706: NEG
55707: PUSH
55708: LD_INT 2
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 2
55717: NEG
55718: PUSH
55719: LD_INT 1
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 3
55728: NEG
55729: PUSH
55730: LD_INT 0
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 3
55739: NEG
55740: PUSH
55741: LD_INT 1
55743: NEG
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55780: LD_ADDR_VAR 0 47
55784: PUSH
55785: LD_INT 0
55787: PUSH
55788: LD_INT 0
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 0
55797: PUSH
55798: LD_INT 1
55800: NEG
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 1
55808: PUSH
55809: LD_INT 0
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 1
55818: PUSH
55819: LD_INT 1
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 0
55828: PUSH
55829: LD_INT 1
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 1
55838: NEG
55839: PUSH
55840: LD_INT 0
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 1
55849: NEG
55850: PUSH
55851: LD_INT 1
55853: NEG
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 1
55861: NEG
55862: PUSH
55863: LD_INT 2
55865: NEG
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 0
55873: PUSH
55874: LD_INT 2
55876: NEG
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 1
55884: PUSH
55885: LD_INT 1
55887: NEG
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 2
55895: NEG
55896: PUSH
55897: LD_INT 1
55899: NEG
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 2
55907: NEG
55908: PUSH
55909: LD_INT 2
55911: NEG
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55931: LD_ADDR_VAR 0 48
55935: PUSH
55936: LD_INT 0
55938: PUSH
55939: LD_INT 0
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 0
55948: PUSH
55949: LD_INT 1
55951: NEG
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 1
55959: PUSH
55960: LD_INT 0
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 1
55969: PUSH
55970: LD_INT 1
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 0
55979: PUSH
55980: LD_INT 1
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 1
55989: NEG
55990: PUSH
55991: LD_INT 0
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 1
56000: NEG
56001: PUSH
56002: LD_INT 1
56004: NEG
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 1
56012: NEG
56013: PUSH
56014: LD_INT 2
56016: NEG
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 0
56024: PUSH
56025: LD_INT 2
56027: NEG
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 1
56035: PUSH
56036: LD_INT 1
56038: NEG
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 2
56046: PUSH
56047: LD_INT 0
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 2
56056: PUSH
56057: LD_INT 1
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56078: LD_ADDR_VAR 0 49
56082: PUSH
56083: LD_INT 0
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 0
56095: PUSH
56096: LD_INT 1
56098: NEG
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 1
56106: PUSH
56107: LD_INT 0
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 1
56116: PUSH
56117: LD_INT 1
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 0
56126: PUSH
56127: LD_INT 1
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 1
56136: NEG
56137: PUSH
56138: LD_INT 0
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 1
56147: NEG
56148: PUSH
56149: LD_INT 1
56151: NEG
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 1
56159: PUSH
56160: LD_INT 1
56162: NEG
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 2
56170: PUSH
56171: LD_INT 0
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 2
56180: PUSH
56181: LD_INT 1
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 2
56190: PUSH
56191: LD_INT 2
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 1
56200: PUSH
56201: LD_INT 2
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56222: LD_ADDR_VAR 0 50
56226: PUSH
56227: LD_INT 0
56229: PUSH
56230: LD_INT 0
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 0
56239: PUSH
56240: LD_INT 1
56242: NEG
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 1
56250: PUSH
56251: LD_INT 0
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 1
56260: PUSH
56261: LD_INT 1
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 0
56270: PUSH
56271: LD_INT 1
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 1
56280: NEG
56281: PUSH
56282: LD_INT 0
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 1
56291: NEG
56292: PUSH
56293: LD_INT 1
56295: NEG
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 2
56303: PUSH
56304: LD_INT 1
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 2
56313: PUSH
56314: LD_INT 2
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 1
56323: PUSH
56324: LD_INT 2
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 0
56333: PUSH
56334: LD_INT 2
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 1
56343: NEG
56344: PUSH
56345: LD_INT 1
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56366: LD_ADDR_VAR 0 51
56370: PUSH
56371: LD_INT 0
56373: PUSH
56374: LD_INT 0
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 0
56383: PUSH
56384: LD_INT 1
56386: NEG
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 1
56394: PUSH
56395: LD_INT 0
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 1
56404: PUSH
56405: LD_INT 1
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 0
56414: PUSH
56415: LD_INT 1
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 1
56424: NEG
56425: PUSH
56426: LD_INT 0
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 1
56435: NEG
56436: PUSH
56437: LD_INT 1
56439: NEG
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 1
56447: PUSH
56448: LD_INT 2
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 0
56457: PUSH
56458: LD_INT 2
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 1
56467: NEG
56468: PUSH
56469: LD_INT 1
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 2
56478: NEG
56479: PUSH
56480: LD_INT 0
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 2
56489: NEG
56490: PUSH
56491: LD_INT 1
56493: NEG
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56513: LD_ADDR_VAR 0 52
56517: PUSH
56518: LD_INT 0
56520: PUSH
56521: LD_INT 0
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 0
56530: PUSH
56531: LD_INT 1
56533: NEG
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 1
56541: PUSH
56542: LD_INT 0
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 1
56551: PUSH
56552: LD_INT 1
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 0
56561: PUSH
56562: LD_INT 1
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 1
56571: NEG
56572: PUSH
56573: LD_INT 0
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 1
56582: NEG
56583: PUSH
56584: LD_INT 1
56586: NEG
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 1
56594: NEG
56595: PUSH
56596: LD_INT 2
56598: NEG
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 1
56606: NEG
56607: PUSH
56608: LD_INT 1
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 2
56617: NEG
56618: PUSH
56619: LD_INT 0
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 2
56628: NEG
56629: PUSH
56630: LD_INT 1
56632: NEG
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 2
56640: NEG
56641: PUSH
56642: LD_INT 2
56644: NEG
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56664: LD_ADDR_VAR 0 53
56668: PUSH
56669: LD_INT 0
56671: PUSH
56672: LD_INT 0
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 0
56681: PUSH
56682: LD_INT 1
56684: NEG
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 1
56692: PUSH
56693: LD_INT 0
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 1
56702: PUSH
56703: LD_INT 1
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 0
56712: PUSH
56713: LD_INT 1
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 1
56722: NEG
56723: PUSH
56724: LD_INT 0
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 1
56733: NEG
56734: PUSH
56735: LD_INT 1
56737: NEG
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 1
56745: NEG
56746: PUSH
56747: LD_INT 2
56749: NEG
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 0
56757: PUSH
56758: LD_INT 2
56760: NEG
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 1
56768: PUSH
56769: LD_INT 1
56771: NEG
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 2
56779: PUSH
56780: LD_INT 0
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 2
56789: PUSH
56790: LD_INT 1
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 2
56799: PUSH
56800: LD_INT 2
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 1
56809: PUSH
56810: LD_INT 2
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 0
56819: PUSH
56820: LD_INT 2
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 1
56829: NEG
56830: PUSH
56831: LD_INT 1
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 2
56840: NEG
56841: PUSH
56842: LD_INT 0
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 2
56851: NEG
56852: PUSH
56853: LD_INT 1
56855: NEG
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 2
56863: NEG
56864: PUSH
56865: LD_INT 2
56867: NEG
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56894: LD_ADDR_VAR 0 54
56898: PUSH
56899: LD_INT 0
56901: PUSH
56902: LD_INT 0
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 0
56911: PUSH
56912: LD_INT 1
56914: NEG
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 1
56922: PUSH
56923: LD_INT 0
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 1
56932: PUSH
56933: LD_INT 1
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 0
56942: PUSH
56943: LD_INT 1
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 1
56952: NEG
56953: PUSH
56954: LD_INT 0
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 1
56963: NEG
56964: PUSH
56965: LD_INT 1
56967: NEG
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 1
56975: NEG
56976: PUSH
56977: LD_INT 2
56979: NEG
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 0
56987: PUSH
56988: LD_INT 2
56990: NEG
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 1
56998: PUSH
56999: LD_INT 1
57001: NEG
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 2
57009: PUSH
57010: LD_INT 0
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 2
57019: PUSH
57020: LD_INT 1
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 2
57029: PUSH
57030: LD_INT 2
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 1
57039: PUSH
57040: LD_INT 2
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 0
57049: PUSH
57050: LD_INT 2
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 1
57059: NEG
57060: PUSH
57061: LD_INT 1
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 2
57070: NEG
57071: PUSH
57072: LD_INT 0
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 2
57081: NEG
57082: PUSH
57083: LD_INT 1
57085: NEG
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 2
57093: NEG
57094: PUSH
57095: LD_INT 2
57097: NEG
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57124: LD_ADDR_VAR 0 55
57128: PUSH
57129: LD_INT 0
57131: PUSH
57132: LD_INT 0
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 0
57141: PUSH
57142: LD_INT 1
57144: NEG
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 1
57152: PUSH
57153: LD_INT 0
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 1
57162: PUSH
57163: LD_INT 1
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 0
57172: PUSH
57173: LD_INT 1
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 1
57182: NEG
57183: PUSH
57184: LD_INT 0
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 1
57193: NEG
57194: PUSH
57195: LD_INT 1
57197: NEG
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 1
57205: NEG
57206: PUSH
57207: LD_INT 2
57209: NEG
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 0
57217: PUSH
57218: LD_INT 2
57220: NEG
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 1
57228: PUSH
57229: LD_INT 1
57231: NEG
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 2
57239: PUSH
57240: LD_INT 0
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 2
57249: PUSH
57250: LD_INT 1
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 2
57259: PUSH
57260: LD_INT 2
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 1
57269: PUSH
57270: LD_INT 2
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 0
57279: PUSH
57280: LD_INT 2
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 1
57289: NEG
57290: PUSH
57291: LD_INT 1
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 2
57300: NEG
57301: PUSH
57302: LD_INT 0
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 2
57311: NEG
57312: PUSH
57313: LD_INT 1
57315: NEG
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 2
57323: NEG
57324: PUSH
57325: LD_INT 2
57327: NEG
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57354: LD_ADDR_VAR 0 56
57358: PUSH
57359: LD_INT 0
57361: PUSH
57362: LD_INT 0
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 0
57371: PUSH
57372: LD_INT 1
57374: NEG
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 1
57382: PUSH
57383: LD_INT 0
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 1
57392: PUSH
57393: LD_INT 1
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 0
57402: PUSH
57403: LD_INT 1
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 1
57412: NEG
57413: PUSH
57414: LD_INT 0
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 1
57423: NEG
57424: PUSH
57425: LD_INT 1
57427: NEG
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 1
57435: NEG
57436: PUSH
57437: LD_INT 2
57439: NEG
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 0
57447: PUSH
57448: LD_INT 2
57450: NEG
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 1
57458: PUSH
57459: LD_INT 1
57461: NEG
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 2
57469: PUSH
57470: LD_INT 0
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 2
57479: PUSH
57480: LD_INT 1
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 2
57489: PUSH
57490: LD_INT 2
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 1
57499: PUSH
57500: LD_INT 2
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 0
57509: PUSH
57510: LD_INT 2
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 1
57519: NEG
57520: PUSH
57521: LD_INT 1
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 2
57530: NEG
57531: PUSH
57532: LD_INT 0
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 2
57541: NEG
57542: PUSH
57543: LD_INT 1
57545: NEG
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 2
57553: NEG
57554: PUSH
57555: LD_INT 2
57557: NEG
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: LIST
57577: LIST
57578: LIST
57579: LIST
57580: LIST
57581: LIST
57582: LIST
57583: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57584: LD_ADDR_VAR 0 57
57588: PUSH
57589: LD_INT 0
57591: PUSH
57592: LD_INT 0
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 0
57601: PUSH
57602: LD_INT 1
57604: NEG
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 1
57612: PUSH
57613: LD_INT 0
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 1
57622: PUSH
57623: LD_INT 1
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 0
57632: PUSH
57633: LD_INT 1
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 1
57642: NEG
57643: PUSH
57644: LD_INT 0
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 1
57653: NEG
57654: PUSH
57655: LD_INT 1
57657: NEG
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 1
57665: NEG
57666: PUSH
57667: LD_INT 2
57669: NEG
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 0
57677: PUSH
57678: LD_INT 2
57680: NEG
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 1
57688: PUSH
57689: LD_INT 1
57691: NEG
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 2
57699: PUSH
57700: LD_INT 0
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 2
57709: PUSH
57710: LD_INT 1
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 2
57719: PUSH
57720: LD_INT 2
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 1
57729: PUSH
57730: LD_INT 2
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 0
57739: PUSH
57740: LD_INT 2
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 1
57749: NEG
57750: PUSH
57751: LD_INT 1
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 2
57760: NEG
57761: PUSH
57762: LD_INT 0
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 2
57771: NEG
57772: PUSH
57773: LD_INT 1
57775: NEG
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 2
57783: NEG
57784: PUSH
57785: LD_INT 2
57787: NEG
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57814: LD_ADDR_VAR 0 58
57818: PUSH
57819: LD_INT 0
57821: PUSH
57822: LD_INT 0
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 0
57831: PUSH
57832: LD_INT 1
57834: NEG
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 1
57842: PUSH
57843: LD_INT 0
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 1
57852: PUSH
57853: LD_INT 1
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 0
57862: PUSH
57863: LD_INT 1
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 1
57872: NEG
57873: PUSH
57874: LD_INT 0
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 1
57883: NEG
57884: PUSH
57885: LD_INT 1
57887: NEG
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 1
57895: NEG
57896: PUSH
57897: LD_INT 2
57899: NEG
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 0
57907: PUSH
57908: LD_INT 2
57910: NEG
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 1
57918: PUSH
57919: LD_INT 1
57921: NEG
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 2
57929: PUSH
57930: LD_INT 0
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 2
57939: PUSH
57940: LD_INT 1
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 2
57949: PUSH
57950: LD_INT 2
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 1
57959: PUSH
57960: LD_INT 2
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: LD_INT 0
57969: PUSH
57970: LD_INT 2
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 1
57979: NEG
57980: PUSH
57981: LD_INT 1
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 2
57990: NEG
57991: PUSH
57992: LD_INT 0
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 2
58001: NEG
58002: PUSH
58003: LD_INT 1
58005: NEG
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 2
58013: NEG
58014: PUSH
58015: LD_INT 2
58017: NEG
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58044: LD_ADDR_VAR 0 59
58048: PUSH
58049: LD_INT 0
58051: PUSH
58052: LD_INT 0
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 0
58061: PUSH
58062: LD_INT 1
58064: NEG
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: LD_INT 1
58072: PUSH
58073: LD_INT 0
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: LD_INT 1
58082: PUSH
58083: LD_INT 1
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 0
58092: PUSH
58093: LD_INT 1
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 1
58102: NEG
58103: PUSH
58104: LD_INT 0
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 1
58113: NEG
58114: PUSH
58115: LD_INT 1
58117: NEG
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58132: LD_ADDR_VAR 0 60
58136: PUSH
58137: LD_INT 0
58139: PUSH
58140: LD_INT 0
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 0
58149: PUSH
58150: LD_INT 1
58152: NEG
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 1
58160: PUSH
58161: LD_INT 0
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 1
58170: PUSH
58171: LD_INT 1
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 0
58180: PUSH
58181: LD_INT 1
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 1
58190: NEG
58191: PUSH
58192: LD_INT 0
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 1
58201: NEG
58202: PUSH
58203: LD_INT 1
58205: NEG
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58220: LD_ADDR_VAR 0 61
58224: PUSH
58225: LD_INT 0
58227: PUSH
58228: LD_INT 0
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 0
58237: PUSH
58238: LD_INT 1
58240: NEG
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 1
58248: PUSH
58249: LD_INT 0
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 1
58258: PUSH
58259: LD_INT 1
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 0
58268: PUSH
58269: LD_INT 1
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 1
58278: NEG
58279: PUSH
58280: LD_INT 0
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 1
58289: NEG
58290: PUSH
58291: LD_INT 1
58293: NEG
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58308: LD_ADDR_VAR 0 62
58312: PUSH
58313: LD_INT 0
58315: PUSH
58316: LD_INT 0
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 0
58325: PUSH
58326: LD_INT 1
58328: NEG
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 1
58336: PUSH
58337: LD_INT 0
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 1
58346: PUSH
58347: LD_INT 1
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 0
58356: PUSH
58357: LD_INT 1
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 1
58366: NEG
58367: PUSH
58368: LD_INT 0
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 1
58377: NEG
58378: PUSH
58379: LD_INT 1
58381: NEG
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58396: LD_ADDR_VAR 0 63
58400: PUSH
58401: LD_INT 0
58403: PUSH
58404: LD_INT 0
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 0
58413: PUSH
58414: LD_INT 1
58416: NEG
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 1
58424: PUSH
58425: LD_INT 0
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 1
58434: PUSH
58435: LD_INT 1
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 0
58444: PUSH
58445: LD_INT 1
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 1
58454: NEG
58455: PUSH
58456: LD_INT 0
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 1
58465: NEG
58466: PUSH
58467: LD_INT 1
58469: NEG
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58484: LD_ADDR_VAR 0 64
58488: PUSH
58489: LD_INT 0
58491: PUSH
58492: LD_INT 0
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 0
58501: PUSH
58502: LD_INT 1
58504: NEG
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 1
58512: PUSH
58513: LD_INT 0
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 1
58522: PUSH
58523: LD_INT 1
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 0
58532: PUSH
58533: LD_INT 1
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 1
58542: NEG
58543: PUSH
58544: LD_INT 0
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 1
58553: NEG
58554: PUSH
58555: LD_INT 1
58557: NEG
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: ST_TO_ADDR
// end ; 1 :
58572: GO 64469
58574: LD_INT 1
58576: DOUBLE
58577: EQUAL
58578: IFTRUE 58582
58580: GO 61205
58582: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58583: LD_ADDR_VAR 0 11
58587: PUSH
58588: LD_INT 1
58590: NEG
58591: PUSH
58592: LD_INT 3
58594: NEG
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 0
58602: PUSH
58603: LD_INT 3
58605: NEG
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 1
58613: PUSH
58614: LD_INT 2
58616: NEG
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: LIST
58626: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58627: LD_ADDR_VAR 0 12
58631: PUSH
58632: LD_INT 2
58634: PUSH
58635: LD_INT 1
58637: NEG
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 3
58645: PUSH
58646: LD_INT 0
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 3
58655: PUSH
58656: LD_INT 1
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: LIST
58667: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58668: LD_ADDR_VAR 0 13
58672: PUSH
58673: LD_INT 3
58675: PUSH
58676: LD_INT 2
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 3
58685: PUSH
58686: LD_INT 3
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 2
58695: PUSH
58696: LD_INT 3
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: LIST
58707: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58708: LD_ADDR_VAR 0 14
58712: PUSH
58713: LD_INT 1
58715: PUSH
58716: LD_INT 3
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 0
58725: PUSH
58726: LD_INT 3
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 1
58735: NEG
58736: PUSH
58737: LD_INT 2
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: LIST
58748: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58749: LD_ADDR_VAR 0 15
58753: PUSH
58754: LD_INT 2
58756: NEG
58757: PUSH
58758: LD_INT 1
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 3
58767: NEG
58768: PUSH
58769: LD_INT 0
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 3
58778: NEG
58779: PUSH
58780: LD_INT 1
58782: NEG
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: LIST
58792: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58793: LD_ADDR_VAR 0 16
58797: PUSH
58798: LD_INT 2
58800: NEG
58801: PUSH
58802: LD_INT 3
58804: NEG
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 3
58812: NEG
58813: PUSH
58814: LD_INT 2
58816: NEG
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 3
58824: NEG
58825: PUSH
58826: LD_INT 3
58828: NEG
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: LIST
58838: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58839: LD_ADDR_VAR 0 17
58843: PUSH
58844: LD_INT 1
58846: NEG
58847: PUSH
58848: LD_INT 3
58850: NEG
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 0
58858: PUSH
58859: LD_INT 3
58861: NEG
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 1
58869: PUSH
58870: LD_INT 2
58872: NEG
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: LIST
58882: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58883: LD_ADDR_VAR 0 18
58887: PUSH
58888: LD_INT 2
58890: PUSH
58891: LD_INT 1
58893: NEG
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 3
58901: PUSH
58902: LD_INT 0
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 3
58911: PUSH
58912: LD_INT 1
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: LIST
58923: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58924: LD_ADDR_VAR 0 19
58928: PUSH
58929: LD_INT 3
58931: PUSH
58932: LD_INT 2
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 3
58941: PUSH
58942: LD_INT 3
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 2
58951: PUSH
58952: LD_INT 3
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: LIST
58963: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58964: LD_ADDR_VAR 0 20
58968: PUSH
58969: LD_INT 1
58971: PUSH
58972: LD_INT 3
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 0
58981: PUSH
58982: LD_INT 3
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 1
58991: NEG
58992: PUSH
58993: LD_INT 2
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: LIST
59004: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59005: LD_ADDR_VAR 0 21
59009: PUSH
59010: LD_INT 2
59012: NEG
59013: PUSH
59014: LD_INT 1
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 3
59023: NEG
59024: PUSH
59025: LD_INT 0
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 3
59034: NEG
59035: PUSH
59036: LD_INT 1
59038: NEG
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: LIST
59048: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59049: LD_ADDR_VAR 0 22
59053: PUSH
59054: LD_INT 2
59056: NEG
59057: PUSH
59058: LD_INT 3
59060: NEG
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 3
59068: NEG
59069: PUSH
59070: LD_INT 2
59072: NEG
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 3
59080: NEG
59081: PUSH
59082: LD_INT 3
59084: NEG
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: LIST
59094: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
59095: LD_ADDR_VAR 0 23
59099: PUSH
59100: LD_INT 0
59102: PUSH
59103: LD_INT 3
59105: NEG
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 1
59113: NEG
59114: PUSH
59115: LD_INT 4
59117: NEG
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 1
59125: PUSH
59126: LD_INT 3
59128: NEG
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: LIST
59138: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
59139: LD_ADDR_VAR 0 24
59143: PUSH
59144: LD_INT 3
59146: PUSH
59147: LD_INT 0
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 3
59156: PUSH
59157: LD_INT 1
59159: NEG
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 4
59167: PUSH
59168: LD_INT 1
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: LIST
59179: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
59180: LD_ADDR_VAR 0 25
59184: PUSH
59185: LD_INT 3
59187: PUSH
59188: LD_INT 3
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 4
59197: PUSH
59198: LD_INT 3
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 3
59207: PUSH
59208: LD_INT 4
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: LIST
59219: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
59220: LD_ADDR_VAR 0 26
59224: PUSH
59225: LD_INT 0
59227: PUSH
59228: LD_INT 3
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 1
59237: PUSH
59238: LD_INT 4
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 1
59247: NEG
59248: PUSH
59249: LD_INT 3
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: LIST
59260: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
59261: LD_ADDR_VAR 0 27
59265: PUSH
59266: LD_INT 3
59268: NEG
59269: PUSH
59270: LD_INT 0
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 3
59279: NEG
59280: PUSH
59281: LD_INT 1
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 4
59290: NEG
59291: PUSH
59292: LD_INT 1
59294: NEG
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: LIST
59304: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
59305: LD_ADDR_VAR 0 28
59309: PUSH
59310: LD_INT 3
59312: NEG
59313: PUSH
59314: LD_INT 3
59316: NEG
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 3
59324: NEG
59325: PUSH
59326: LD_INT 4
59328: NEG
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 4
59336: NEG
59337: PUSH
59338: LD_INT 3
59340: NEG
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: LIST
59350: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
59351: LD_ADDR_VAR 0 29
59355: PUSH
59356: LD_INT 1
59358: NEG
59359: PUSH
59360: LD_INT 3
59362: NEG
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: LD_INT 0
59370: PUSH
59371: LD_INT 3
59373: NEG
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 1
59381: PUSH
59382: LD_INT 2
59384: NEG
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 1
59392: NEG
59393: PUSH
59394: LD_INT 4
59396: NEG
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 0
59404: PUSH
59405: LD_INT 4
59407: NEG
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 1
59415: PUSH
59416: LD_INT 3
59418: NEG
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 1
59426: NEG
59427: PUSH
59428: LD_INT 5
59430: NEG
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 0
59438: PUSH
59439: LD_INT 5
59441: NEG
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 1
59449: PUSH
59450: LD_INT 4
59452: NEG
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 1
59460: NEG
59461: PUSH
59462: LD_INT 6
59464: NEG
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 0
59472: PUSH
59473: LD_INT 6
59475: NEG
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 1
59483: PUSH
59484: LD_INT 5
59486: NEG
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
59506: LD_ADDR_VAR 0 30
59510: PUSH
59511: LD_INT 2
59513: PUSH
59514: LD_INT 1
59516: NEG
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 3
59524: PUSH
59525: LD_INT 0
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 3
59534: PUSH
59535: LD_INT 1
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 3
59544: PUSH
59545: LD_INT 1
59547: NEG
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 4
59555: PUSH
59556: LD_INT 0
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 4
59565: PUSH
59566: LD_INT 1
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 4
59575: PUSH
59576: LD_INT 1
59578: NEG
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 5
59586: PUSH
59587: LD_INT 0
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 5
59596: PUSH
59597: LD_INT 1
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 5
59606: PUSH
59607: LD_INT 1
59609: NEG
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 6
59617: PUSH
59618: LD_INT 0
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 6
59627: PUSH
59628: LD_INT 1
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59649: LD_ADDR_VAR 0 31
59653: PUSH
59654: LD_INT 3
59656: PUSH
59657: LD_INT 2
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 3
59666: PUSH
59667: LD_INT 3
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 2
59676: PUSH
59677: LD_INT 3
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 4
59686: PUSH
59687: LD_INT 3
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 4
59696: PUSH
59697: LD_INT 4
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 3
59706: PUSH
59707: LD_INT 4
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 5
59716: PUSH
59717: LD_INT 4
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 5
59726: PUSH
59727: LD_INT 5
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 4
59736: PUSH
59737: LD_INT 5
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 6
59746: PUSH
59747: LD_INT 5
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 6
59756: PUSH
59757: LD_INT 6
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 5
59766: PUSH
59767: LD_INT 6
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59788: LD_ADDR_VAR 0 32
59792: PUSH
59793: LD_INT 1
59795: PUSH
59796: LD_INT 3
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 0
59805: PUSH
59806: LD_INT 3
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 1
59815: NEG
59816: PUSH
59817: LD_INT 2
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 1
59826: PUSH
59827: LD_INT 4
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: LD_INT 0
59836: PUSH
59837: LD_INT 4
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 1
59846: NEG
59847: PUSH
59848: LD_INT 3
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 1
59857: PUSH
59858: LD_INT 5
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 0
59867: PUSH
59868: LD_INT 5
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 1
59877: NEG
59878: PUSH
59879: LD_INT 4
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 1
59888: PUSH
59889: LD_INT 6
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 0
59898: PUSH
59899: LD_INT 6
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 1
59908: NEG
59909: PUSH
59910: LD_INT 5
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59931: LD_ADDR_VAR 0 33
59935: PUSH
59936: LD_INT 2
59938: NEG
59939: PUSH
59940: LD_INT 1
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 3
59949: NEG
59950: PUSH
59951: LD_INT 0
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 3
59960: NEG
59961: PUSH
59962: LD_INT 1
59964: NEG
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: LD_INT 3
59972: NEG
59973: PUSH
59974: LD_INT 1
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 4
59983: NEG
59984: PUSH
59985: LD_INT 0
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 4
59994: NEG
59995: PUSH
59996: LD_INT 1
59998: NEG
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 4
60006: NEG
60007: PUSH
60008: LD_INT 1
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 5
60017: NEG
60018: PUSH
60019: LD_INT 0
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 5
60028: NEG
60029: PUSH
60030: LD_INT 1
60032: NEG
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 5
60040: NEG
60041: PUSH
60042: LD_INT 1
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 6
60051: NEG
60052: PUSH
60053: LD_INT 0
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 6
60062: NEG
60063: PUSH
60064: LD_INT 1
60066: NEG
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
60086: LD_ADDR_VAR 0 34
60090: PUSH
60091: LD_INT 2
60093: NEG
60094: PUSH
60095: LD_INT 3
60097: NEG
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 3
60105: NEG
60106: PUSH
60107: LD_INT 2
60109: NEG
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 3
60117: NEG
60118: PUSH
60119: LD_INT 3
60121: NEG
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 3
60129: NEG
60130: PUSH
60131: LD_INT 4
60133: NEG
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 4
60141: NEG
60142: PUSH
60143: LD_INT 3
60145: NEG
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 4
60153: NEG
60154: PUSH
60155: LD_INT 4
60157: NEG
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 4
60165: NEG
60166: PUSH
60167: LD_INT 5
60169: NEG
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 5
60177: NEG
60178: PUSH
60179: LD_INT 4
60181: NEG
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 5
60189: NEG
60190: PUSH
60191: LD_INT 5
60193: NEG
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 5
60201: NEG
60202: PUSH
60203: LD_INT 6
60205: NEG
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 6
60213: NEG
60214: PUSH
60215: LD_INT 5
60217: NEG
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 6
60225: NEG
60226: PUSH
60227: LD_INT 6
60229: NEG
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
60249: LD_ADDR_VAR 0 41
60253: PUSH
60254: LD_INT 0
60256: PUSH
60257: LD_INT 2
60259: NEG
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 1
60267: NEG
60268: PUSH
60269: LD_INT 3
60271: NEG
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 1
60279: PUSH
60280: LD_INT 2
60282: NEG
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: LIST
60292: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
60293: LD_ADDR_VAR 0 42
60297: PUSH
60298: LD_INT 2
60300: PUSH
60301: LD_INT 0
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 2
60310: PUSH
60311: LD_INT 1
60313: NEG
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: LD_INT 3
60321: PUSH
60322: LD_INT 1
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: LIST
60333: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
60334: LD_ADDR_VAR 0 43
60338: PUSH
60339: LD_INT 2
60341: PUSH
60342: LD_INT 2
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 3
60351: PUSH
60352: LD_INT 2
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 2
60361: PUSH
60362: LD_INT 3
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: LIST
60373: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
60374: LD_ADDR_VAR 0 44
60378: PUSH
60379: LD_INT 0
60381: PUSH
60382: LD_INT 2
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 1
60391: PUSH
60392: LD_INT 3
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 1
60401: NEG
60402: PUSH
60403: LD_INT 2
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: LIST
60414: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60415: LD_ADDR_VAR 0 45
60419: PUSH
60420: LD_INT 2
60422: NEG
60423: PUSH
60424: LD_INT 0
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 2
60433: NEG
60434: PUSH
60435: LD_INT 1
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 3
60444: NEG
60445: PUSH
60446: LD_INT 1
60448: NEG
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: LIST
60458: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
60459: LD_ADDR_VAR 0 46
60463: PUSH
60464: LD_INT 2
60466: NEG
60467: PUSH
60468: LD_INT 2
60470: NEG
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 2
60478: NEG
60479: PUSH
60480: LD_INT 3
60482: NEG
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 3
60490: NEG
60491: PUSH
60492: LD_INT 2
60494: NEG
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: LIST
60504: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
60505: LD_ADDR_VAR 0 47
60509: PUSH
60510: LD_INT 2
60512: NEG
60513: PUSH
60514: LD_INT 3
60516: NEG
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 1
60524: NEG
60525: PUSH
60526: LD_INT 3
60528: NEG
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60538: LD_ADDR_VAR 0 48
60542: PUSH
60543: LD_INT 1
60545: PUSH
60546: LD_INT 2
60548: NEG
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 2
60556: PUSH
60557: LD_INT 1
60559: NEG
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60569: LD_ADDR_VAR 0 49
60573: PUSH
60574: LD_INT 3
60576: PUSH
60577: LD_INT 1
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PUSH
60584: LD_INT 3
60586: PUSH
60587: LD_INT 2
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60598: LD_ADDR_VAR 0 50
60602: PUSH
60603: LD_INT 2
60605: PUSH
60606: LD_INT 3
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 1
60615: PUSH
60616: LD_INT 3
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60627: LD_ADDR_VAR 0 51
60631: PUSH
60632: LD_INT 1
60634: NEG
60635: PUSH
60636: LD_INT 2
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 2
60645: NEG
60646: PUSH
60647: LD_INT 1
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60658: LD_ADDR_VAR 0 52
60662: PUSH
60663: LD_INT 3
60665: NEG
60666: PUSH
60667: LD_INT 1
60669: NEG
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 3
60677: NEG
60678: PUSH
60679: LD_INT 2
60681: NEG
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60691: LD_ADDR_VAR 0 53
60695: PUSH
60696: LD_INT 1
60698: NEG
60699: PUSH
60700: LD_INT 3
60702: NEG
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 0
60710: PUSH
60711: LD_INT 3
60713: NEG
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 1
60721: PUSH
60722: LD_INT 2
60724: NEG
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: LIST
60734: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60735: LD_ADDR_VAR 0 54
60739: PUSH
60740: LD_INT 2
60742: PUSH
60743: LD_INT 1
60745: NEG
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 3
60753: PUSH
60754: LD_INT 0
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 3
60763: PUSH
60764: LD_INT 1
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: LIST
60775: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60776: LD_ADDR_VAR 0 55
60780: PUSH
60781: LD_INT 3
60783: PUSH
60784: LD_INT 2
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 3
60793: PUSH
60794: LD_INT 3
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 2
60803: PUSH
60804: LD_INT 3
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: LIST
60815: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60816: LD_ADDR_VAR 0 56
60820: PUSH
60821: LD_INT 1
60823: PUSH
60824: LD_INT 3
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 0
60833: PUSH
60834: LD_INT 3
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 1
60843: NEG
60844: PUSH
60845: LD_INT 2
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: LIST
60856: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60857: LD_ADDR_VAR 0 57
60861: PUSH
60862: LD_INT 2
60864: NEG
60865: PUSH
60866: LD_INT 1
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 3
60875: NEG
60876: PUSH
60877: LD_INT 0
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 3
60886: NEG
60887: PUSH
60888: LD_INT 1
60890: NEG
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: LIST
60900: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60901: LD_ADDR_VAR 0 58
60905: PUSH
60906: LD_INT 2
60908: NEG
60909: PUSH
60910: LD_INT 3
60912: NEG
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 3
60920: NEG
60921: PUSH
60922: LD_INT 2
60924: NEG
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 3
60932: NEG
60933: PUSH
60934: LD_INT 3
60936: NEG
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: LIST
60946: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60947: LD_ADDR_VAR 0 59
60951: PUSH
60952: LD_INT 1
60954: NEG
60955: PUSH
60956: LD_INT 2
60958: NEG
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 0
60966: PUSH
60967: LD_INT 2
60969: NEG
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 1
60977: PUSH
60978: LD_INT 1
60980: NEG
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: LIST
60990: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60991: LD_ADDR_VAR 0 60
60995: PUSH
60996: LD_INT 1
60998: PUSH
60999: LD_INT 1
61001: NEG
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 2
61009: PUSH
61010: LD_INT 0
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 2
61019: PUSH
61020: LD_INT 1
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: LIST
61031: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61032: LD_ADDR_VAR 0 61
61036: PUSH
61037: LD_INT 2
61039: PUSH
61040: LD_INT 1
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 2
61049: PUSH
61050: LD_INT 2
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 1
61059: PUSH
61060: LD_INT 2
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: LIST
61071: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61072: LD_ADDR_VAR 0 62
61076: PUSH
61077: LD_INT 1
61079: PUSH
61080: LD_INT 2
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 0
61089: PUSH
61090: LD_INT 2
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 1
61099: NEG
61100: PUSH
61101: LD_INT 1
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: LIST
61112: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61113: LD_ADDR_VAR 0 63
61117: PUSH
61118: LD_INT 1
61120: NEG
61121: PUSH
61122: LD_INT 1
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 2
61131: NEG
61132: PUSH
61133: LD_INT 0
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: LD_INT 2
61142: NEG
61143: PUSH
61144: LD_INT 1
61146: NEG
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: LIST
61156: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61157: LD_ADDR_VAR 0 64
61161: PUSH
61162: LD_INT 1
61164: NEG
61165: PUSH
61166: LD_INT 2
61168: NEG
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 2
61176: NEG
61177: PUSH
61178: LD_INT 1
61180: NEG
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 2
61188: NEG
61189: PUSH
61190: LD_INT 2
61192: NEG
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: LIST
61202: ST_TO_ADDR
// end ; 2 :
61203: GO 64469
61205: LD_INT 2
61207: DOUBLE
61208: EQUAL
61209: IFTRUE 61213
61211: GO 64468
61213: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
61214: LD_ADDR_VAR 0 29
61218: PUSH
61219: LD_INT 4
61221: PUSH
61222: LD_INT 0
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: LD_INT 4
61231: PUSH
61232: LD_INT 1
61234: NEG
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 5
61242: PUSH
61243: LD_INT 0
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 5
61252: PUSH
61253: LD_INT 1
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 4
61262: PUSH
61263: LD_INT 1
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 3
61272: PUSH
61273: LD_INT 0
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 3
61282: PUSH
61283: LD_INT 1
61285: NEG
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: LD_INT 3
61293: PUSH
61294: LD_INT 2
61296: NEG
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: LD_INT 5
61304: PUSH
61305: LD_INT 2
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 3
61314: PUSH
61315: LD_INT 3
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 3
61324: PUSH
61325: LD_INT 2
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 4
61334: PUSH
61335: LD_INT 3
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 4
61344: PUSH
61345: LD_INT 4
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 3
61354: PUSH
61355: LD_INT 4
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 2
61364: PUSH
61365: LD_INT 3
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 2
61374: PUSH
61375: LD_INT 2
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: LD_INT 4
61384: PUSH
61385: LD_INT 2
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 2
61394: PUSH
61395: LD_INT 4
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: LD_INT 0
61404: PUSH
61405: LD_INT 4
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 0
61414: PUSH
61415: LD_INT 3
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 1
61424: PUSH
61425: LD_INT 4
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 1
61434: PUSH
61435: LD_INT 5
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: LD_INT 0
61444: PUSH
61445: LD_INT 5
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 1
61454: NEG
61455: PUSH
61456: LD_INT 4
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 1
61465: NEG
61466: PUSH
61467: LD_INT 3
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 2
61476: PUSH
61477: LD_INT 5
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 2
61486: NEG
61487: PUSH
61488: LD_INT 3
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 3
61497: NEG
61498: PUSH
61499: LD_INT 0
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 3
61508: NEG
61509: PUSH
61510: LD_INT 1
61512: NEG
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 2
61520: NEG
61521: PUSH
61522: LD_INT 0
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 2
61531: NEG
61532: PUSH
61533: LD_INT 1
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 3
61542: NEG
61543: PUSH
61544: LD_INT 1
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: LD_INT 4
61553: NEG
61554: PUSH
61555: LD_INT 0
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 4
61564: NEG
61565: PUSH
61566: LD_INT 1
61568: NEG
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 4
61576: NEG
61577: PUSH
61578: LD_INT 2
61580: NEG
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 2
61588: NEG
61589: PUSH
61590: LD_INT 2
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 4
61599: NEG
61600: PUSH
61601: LD_INT 4
61603: NEG
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 4
61611: NEG
61612: PUSH
61613: LD_INT 5
61615: NEG
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 3
61623: NEG
61624: PUSH
61625: LD_INT 4
61627: NEG
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: LD_INT 3
61635: NEG
61636: PUSH
61637: LD_INT 3
61639: NEG
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 4
61647: NEG
61648: PUSH
61649: LD_INT 3
61651: NEG
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 5
61659: NEG
61660: PUSH
61661: LD_INT 4
61663: NEG
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 5
61671: NEG
61672: PUSH
61673: LD_INT 5
61675: NEG
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 3
61683: NEG
61684: PUSH
61685: LD_INT 5
61687: NEG
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: PUSH
61693: LD_INT 5
61695: NEG
61696: PUSH
61697: LD_INT 3
61699: NEG
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61752: LD_ADDR_VAR 0 30
61756: PUSH
61757: LD_INT 4
61759: PUSH
61760: LD_INT 4
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 4
61769: PUSH
61770: LD_INT 3
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: LD_INT 5
61779: PUSH
61780: LD_INT 4
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 5
61789: PUSH
61790: LD_INT 5
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 4
61799: PUSH
61800: LD_INT 5
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 3
61809: PUSH
61810: LD_INT 4
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PUSH
61817: LD_INT 3
61819: PUSH
61820: LD_INT 3
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: LD_INT 5
61829: PUSH
61830: LD_INT 3
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: LD_INT 3
61839: PUSH
61840: LD_INT 5
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: LD_INT 0
61849: PUSH
61850: LD_INT 3
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: LD_INT 0
61859: PUSH
61860: LD_INT 2
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PUSH
61867: LD_INT 1
61869: PUSH
61870: LD_INT 3
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: LD_INT 1
61879: PUSH
61880: LD_INT 4
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PUSH
61887: LD_INT 0
61889: PUSH
61890: LD_INT 4
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: LD_INT 1
61899: NEG
61900: PUSH
61901: LD_INT 3
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: LD_INT 1
61910: NEG
61911: PUSH
61912: LD_INT 2
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: LD_INT 2
61921: PUSH
61922: LD_INT 4
61924: PUSH
61925: EMPTY
61926: LIST
61927: LIST
61928: PUSH
61929: LD_INT 2
61931: NEG
61932: PUSH
61933: LD_INT 2
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 4
61942: NEG
61943: PUSH
61944: LD_INT 0
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: PUSH
61951: LD_INT 4
61953: NEG
61954: PUSH
61955: LD_INT 1
61957: NEG
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 3
61965: NEG
61966: PUSH
61967: LD_INT 0
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: LD_INT 3
61976: NEG
61977: PUSH
61978: LD_INT 1
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 4
61987: NEG
61988: PUSH
61989: LD_INT 1
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: LD_INT 5
61998: NEG
61999: PUSH
62000: LD_INT 0
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 5
62009: NEG
62010: PUSH
62011: LD_INT 1
62013: NEG
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 5
62021: NEG
62022: PUSH
62023: LD_INT 2
62025: NEG
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 3
62033: NEG
62034: PUSH
62035: LD_INT 2
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 3
62044: NEG
62045: PUSH
62046: LD_INT 3
62048: NEG
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: PUSH
62054: LD_INT 3
62056: NEG
62057: PUSH
62058: LD_INT 4
62060: NEG
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 2
62068: NEG
62069: PUSH
62070: LD_INT 3
62072: NEG
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 2
62080: NEG
62081: PUSH
62082: LD_INT 2
62084: NEG
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 3
62092: NEG
62093: PUSH
62094: LD_INT 2
62096: NEG
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 4
62104: NEG
62105: PUSH
62106: LD_INT 3
62108: NEG
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: LD_INT 4
62116: NEG
62117: PUSH
62118: LD_INT 4
62120: NEG
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: PUSH
62126: LD_INT 2
62128: NEG
62129: PUSH
62130: LD_INT 4
62132: NEG
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 4
62140: NEG
62141: PUSH
62142: LD_INT 2
62144: NEG
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 0
62152: PUSH
62153: LD_INT 4
62155: NEG
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 0
62163: PUSH
62164: LD_INT 5
62166: NEG
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: LD_INT 1
62174: PUSH
62175: LD_INT 4
62177: NEG
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 1
62185: PUSH
62186: LD_INT 3
62188: NEG
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 0
62196: PUSH
62197: LD_INT 3
62199: NEG
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 1
62207: NEG
62208: PUSH
62209: LD_INT 4
62211: NEG
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 1
62219: NEG
62220: PUSH
62221: LD_INT 5
62223: NEG
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: LD_INT 2
62231: PUSH
62232: LD_INT 3
62234: NEG
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: LD_INT 2
62242: NEG
62243: PUSH
62244: LD_INT 5
62246: NEG
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: LIST
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: LIST
62294: LIST
62295: LIST
62296: LIST
62297: LIST
62298: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
62299: LD_ADDR_VAR 0 31
62303: PUSH
62304: LD_INT 0
62306: PUSH
62307: LD_INT 4
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 0
62316: PUSH
62317: LD_INT 3
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 1
62326: PUSH
62327: LD_INT 4
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 1
62336: PUSH
62337: LD_INT 5
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 0
62346: PUSH
62347: LD_INT 5
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PUSH
62354: LD_INT 1
62356: NEG
62357: PUSH
62358: LD_INT 4
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: LD_INT 1
62367: NEG
62368: PUSH
62369: LD_INT 3
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 2
62378: PUSH
62379: LD_INT 5
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 2
62388: NEG
62389: PUSH
62390: LD_INT 3
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 3
62399: NEG
62400: PUSH
62401: LD_INT 0
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: LD_INT 3
62410: NEG
62411: PUSH
62412: LD_INT 1
62414: NEG
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 2
62422: NEG
62423: PUSH
62424: LD_INT 0
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: LD_INT 2
62433: NEG
62434: PUSH
62435: LD_INT 1
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: LD_INT 3
62444: NEG
62445: PUSH
62446: LD_INT 1
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PUSH
62453: LD_INT 4
62455: NEG
62456: PUSH
62457: LD_INT 0
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 4
62466: NEG
62467: PUSH
62468: LD_INT 1
62470: NEG
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 4
62478: NEG
62479: PUSH
62480: LD_INT 2
62482: NEG
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 2
62490: NEG
62491: PUSH
62492: LD_INT 2
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 4
62501: NEG
62502: PUSH
62503: LD_INT 4
62505: NEG
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: LD_INT 4
62513: NEG
62514: PUSH
62515: LD_INT 5
62517: NEG
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: PUSH
62523: LD_INT 3
62525: NEG
62526: PUSH
62527: LD_INT 4
62529: NEG
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: LD_INT 3
62537: NEG
62538: PUSH
62539: LD_INT 3
62541: NEG
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: LD_INT 4
62549: NEG
62550: PUSH
62551: LD_INT 3
62553: NEG
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: LD_INT 5
62561: NEG
62562: PUSH
62563: LD_INT 4
62565: NEG
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 5
62573: NEG
62574: PUSH
62575: LD_INT 5
62577: NEG
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: LD_INT 3
62585: NEG
62586: PUSH
62587: LD_INT 5
62589: NEG
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: PUSH
62595: LD_INT 5
62597: NEG
62598: PUSH
62599: LD_INT 3
62601: NEG
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: PUSH
62607: LD_INT 0
62609: PUSH
62610: LD_INT 3
62612: NEG
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: LD_INT 0
62620: PUSH
62621: LD_INT 4
62623: NEG
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: LD_INT 1
62631: PUSH
62632: LD_INT 3
62634: NEG
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: LD_INT 1
62642: PUSH
62643: LD_INT 2
62645: NEG
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: LD_INT 0
62653: PUSH
62654: LD_INT 2
62656: NEG
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: LD_INT 1
62664: NEG
62665: PUSH
62666: LD_INT 3
62668: NEG
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 1
62676: NEG
62677: PUSH
62678: LD_INT 4
62680: NEG
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: LD_INT 2
62688: PUSH
62689: LD_INT 2
62691: NEG
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PUSH
62697: LD_INT 2
62699: NEG
62700: PUSH
62701: LD_INT 4
62703: NEG
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 4
62711: PUSH
62712: LD_INT 0
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 4
62721: PUSH
62722: LD_INT 1
62724: NEG
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 5
62732: PUSH
62733: LD_INT 0
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 5
62742: PUSH
62743: LD_INT 1
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 4
62752: PUSH
62753: LD_INT 1
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 3
62762: PUSH
62763: LD_INT 0
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 3
62772: PUSH
62773: LD_INT 1
62775: NEG
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: LD_INT 3
62783: PUSH
62784: LD_INT 2
62786: NEG
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PUSH
62792: LD_INT 5
62794: PUSH
62795: LD_INT 2
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: LIST
62839: LIST
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62849: LD_ADDR_VAR 0 32
62853: PUSH
62854: LD_INT 4
62856: NEG
62857: PUSH
62858: LD_INT 0
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: PUSH
62865: LD_INT 4
62867: NEG
62868: PUSH
62869: LD_INT 1
62871: NEG
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: PUSH
62877: LD_INT 3
62879: NEG
62880: PUSH
62881: LD_INT 0
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: PUSH
62888: LD_INT 3
62890: NEG
62891: PUSH
62892: LD_INT 1
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 4
62901: NEG
62902: PUSH
62903: LD_INT 1
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: LD_INT 5
62912: NEG
62913: PUSH
62914: LD_INT 0
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 5
62923: NEG
62924: PUSH
62925: LD_INT 1
62927: NEG
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 5
62935: NEG
62936: PUSH
62937: LD_INT 2
62939: NEG
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PUSH
62945: LD_INT 3
62947: NEG
62948: PUSH
62949: LD_INT 2
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PUSH
62956: LD_INT 3
62958: NEG
62959: PUSH
62960: LD_INT 3
62962: NEG
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 3
62970: NEG
62971: PUSH
62972: LD_INT 4
62974: NEG
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: LD_INT 2
62982: NEG
62983: PUSH
62984: LD_INT 3
62986: NEG
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: LD_INT 2
62994: NEG
62995: PUSH
62996: LD_INT 2
62998: NEG
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 3
63006: NEG
63007: PUSH
63008: LD_INT 2
63010: NEG
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 4
63018: NEG
63019: PUSH
63020: LD_INT 3
63022: NEG
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 4
63030: NEG
63031: PUSH
63032: LD_INT 4
63034: NEG
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: LD_INT 2
63042: NEG
63043: PUSH
63044: LD_INT 4
63046: NEG
63047: PUSH
63048: EMPTY
63049: LIST
63050: LIST
63051: PUSH
63052: LD_INT 4
63054: NEG
63055: PUSH
63056: LD_INT 2
63058: NEG
63059: PUSH
63060: EMPTY
63061: LIST
63062: LIST
63063: PUSH
63064: LD_INT 0
63066: PUSH
63067: LD_INT 4
63069: NEG
63070: PUSH
63071: EMPTY
63072: LIST
63073: LIST
63074: PUSH
63075: LD_INT 0
63077: PUSH
63078: LD_INT 5
63080: NEG
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: PUSH
63086: LD_INT 1
63088: PUSH
63089: LD_INT 4
63091: NEG
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: PUSH
63097: LD_INT 1
63099: PUSH
63100: LD_INT 3
63102: NEG
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: PUSH
63108: LD_INT 0
63110: PUSH
63111: LD_INT 3
63113: NEG
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: LD_INT 1
63121: NEG
63122: PUSH
63123: LD_INT 4
63125: NEG
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: LD_INT 1
63133: NEG
63134: PUSH
63135: LD_INT 5
63137: NEG
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: PUSH
63143: LD_INT 2
63145: PUSH
63146: LD_INT 3
63148: NEG
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: PUSH
63154: LD_INT 2
63156: NEG
63157: PUSH
63158: LD_INT 5
63160: NEG
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: PUSH
63166: LD_INT 3
63168: PUSH
63169: LD_INT 0
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: PUSH
63176: LD_INT 3
63178: PUSH
63179: LD_INT 1
63181: NEG
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: PUSH
63187: LD_INT 4
63189: PUSH
63190: LD_INT 0
63192: PUSH
63193: EMPTY
63194: LIST
63195: LIST
63196: PUSH
63197: LD_INT 4
63199: PUSH
63200: LD_INT 1
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: PUSH
63207: LD_INT 3
63209: PUSH
63210: LD_INT 1
63212: PUSH
63213: EMPTY
63214: LIST
63215: LIST
63216: PUSH
63217: LD_INT 2
63219: PUSH
63220: LD_INT 0
63222: PUSH
63223: EMPTY
63224: LIST
63225: LIST
63226: PUSH
63227: LD_INT 2
63229: PUSH
63230: LD_INT 1
63232: NEG
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 2
63240: PUSH
63241: LD_INT 2
63243: NEG
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: LD_INT 4
63251: PUSH
63252: LD_INT 2
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: LD_INT 4
63261: PUSH
63262: LD_INT 4
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 4
63271: PUSH
63272: LD_INT 3
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: LD_INT 5
63281: PUSH
63282: LD_INT 4
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: LD_INT 5
63291: PUSH
63292: LD_INT 5
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: PUSH
63299: LD_INT 4
63301: PUSH
63302: LD_INT 5
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: PUSH
63309: LD_INT 3
63311: PUSH
63312: LD_INT 4
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 3
63321: PUSH
63322: LD_INT 3
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 5
63331: PUSH
63332: LD_INT 3
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PUSH
63339: LD_INT 3
63341: PUSH
63342: LD_INT 5
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: LIST
63371: LIST
63372: LIST
63373: LIST
63374: LIST
63375: LIST
63376: LIST
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: LIST
63386: LIST
63387: LIST
63388: LIST
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: LIST
63394: LIST
63395: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
63396: LD_ADDR_VAR 0 33
63400: PUSH
63401: LD_INT 4
63403: NEG
63404: PUSH
63405: LD_INT 4
63407: NEG
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: PUSH
63413: LD_INT 4
63415: NEG
63416: PUSH
63417: LD_INT 5
63419: NEG
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 3
63427: NEG
63428: PUSH
63429: LD_INT 4
63431: NEG
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: LD_INT 3
63439: NEG
63440: PUSH
63441: LD_INT 3
63443: NEG
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: LD_INT 4
63451: NEG
63452: PUSH
63453: LD_INT 3
63455: NEG
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: LD_INT 5
63463: NEG
63464: PUSH
63465: LD_INT 4
63467: NEG
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: LD_INT 5
63475: NEG
63476: PUSH
63477: LD_INT 5
63479: NEG
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PUSH
63485: LD_INT 3
63487: NEG
63488: PUSH
63489: LD_INT 5
63491: NEG
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PUSH
63497: LD_INT 5
63499: NEG
63500: PUSH
63501: LD_INT 3
63503: NEG
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: LD_INT 0
63511: PUSH
63512: LD_INT 3
63514: NEG
63515: PUSH
63516: EMPTY
63517: LIST
63518: LIST
63519: PUSH
63520: LD_INT 0
63522: PUSH
63523: LD_INT 4
63525: NEG
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: PUSH
63531: LD_INT 1
63533: PUSH
63534: LD_INT 3
63536: NEG
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PUSH
63542: LD_INT 1
63544: PUSH
63545: LD_INT 2
63547: NEG
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: LD_INT 0
63555: PUSH
63556: LD_INT 2
63558: NEG
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 1
63566: NEG
63567: PUSH
63568: LD_INT 3
63570: NEG
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: LD_INT 1
63578: NEG
63579: PUSH
63580: LD_INT 4
63582: NEG
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 2
63590: PUSH
63591: LD_INT 2
63593: NEG
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: LD_INT 2
63601: NEG
63602: PUSH
63603: LD_INT 4
63605: NEG
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: LD_INT 4
63613: PUSH
63614: LD_INT 0
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: LD_INT 4
63623: PUSH
63624: LD_INT 1
63626: NEG
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: LD_INT 5
63634: PUSH
63635: LD_INT 0
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: LD_INT 5
63644: PUSH
63645: LD_INT 1
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: PUSH
63652: LD_INT 4
63654: PUSH
63655: LD_INT 1
63657: PUSH
63658: EMPTY
63659: LIST
63660: LIST
63661: PUSH
63662: LD_INT 3
63664: PUSH
63665: LD_INT 0
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: LD_INT 3
63674: PUSH
63675: LD_INT 1
63677: NEG
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: LD_INT 3
63685: PUSH
63686: LD_INT 2
63688: NEG
63689: PUSH
63690: EMPTY
63691: LIST
63692: LIST
63693: PUSH
63694: LD_INT 5
63696: PUSH
63697: LD_INT 2
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: LD_INT 3
63706: PUSH
63707: LD_INT 3
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PUSH
63714: LD_INT 3
63716: PUSH
63717: LD_INT 2
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 4
63726: PUSH
63727: LD_INT 3
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: LD_INT 4
63736: PUSH
63737: LD_INT 4
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: LD_INT 3
63746: PUSH
63747: LD_INT 4
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: PUSH
63754: LD_INT 2
63756: PUSH
63757: LD_INT 3
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: PUSH
63764: LD_INT 2
63766: PUSH
63767: LD_INT 2
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 4
63776: PUSH
63777: LD_INT 2
63779: PUSH
63780: EMPTY
63781: LIST
63782: LIST
63783: PUSH
63784: LD_INT 2
63786: PUSH
63787: LD_INT 4
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: PUSH
63794: LD_INT 0
63796: PUSH
63797: LD_INT 4
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PUSH
63804: LD_INT 0
63806: PUSH
63807: LD_INT 3
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: PUSH
63814: LD_INT 1
63816: PUSH
63817: LD_INT 4
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: PUSH
63824: LD_INT 1
63826: PUSH
63827: LD_INT 5
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: LD_INT 0
63836: PUSH
63837: LD_INT 5
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: PUSH
63844: LD_INT 1
63846: NEG
63847: PUSH
63848: LD_INT 4
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: LD_INT 1
63857: NEG
63858: PUSH
63859: LD_INT 3
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: PUSH
63866: LD_INT 2
63868: PUSH
63869: LD_INT 5
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PUSH
63876: LD_INT 2
63878: NEG
63879: PUSH
63880: LD_INT 3
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: LIST
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: LIST
63913: LIST
63914: LIST
63915: LIST
63916: LIST
63917: LIST
63918: LIST
63919: LIST
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63934: LD_ADDR_VAR 0 34
63938: PUSH
63939: LD_INT 0
63941: PUSH
63942: LD_INT 4
63944: NEG
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: LD_INT 0
63952: PUSH
63953: LD_INT 5
63955: NEG
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: PUSH
63961: LD_INT 1
63963: PUSH
63964: LD_INT 4
63966: NEG
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: PUSH
63972: LD_INT 1
63974: PUSH
63975: LD_INT 3
63977: NEG
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: PUSH
63983: LD_INT 0
63985: PUSH
63986: LD_INT 3
63988: NEG
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: PUSH
63994: LD_INT 1
63996: NEG
63997: PUSH
63998: LD_INT 4
64000: NEG
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: PUSH
64006: LD_INT 1
64008: NEG
64009: PUSH
64010: LD_INT 5
64012: NEG
64013: PUSH
64014: EMPTY
64015: LIST
64016: LIST
64017: PUSH
64018: LD_INT 2
64020: PUSH
64021: LD_INT 3
64023: NEG
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 2
64031: NEG
64032: PUSH
64033: LD_INT 5
64035: NEG
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: PUSH
64041: LD_INT 3
64043: PUSH
64044: LD_INT 0
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: PUSH
64051: LD_INT 3
64053: PUSH
64054: LD_INT 1
64056: NEG
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: PUSH
64062: LD_INT 4
64064: PUSH
64065: LD_INT 0
64067: PUSH
64068: EMPTY
64069: LIST
64070: LIST
64071: PUSH
64072: LD_INT 4
64074: PUSH
64075: LD_INT 1
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: LD_INT 3
64084: PUSH
64085: LD_INT 1
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: PUSH
64092: LD_INT 2
64094: PUSH
64095: LD_INT 0
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: LD_INT 2
64104: PUSH
64105: LD_INT 1
64107: NEG
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: PUSH
64113: LD_INT 2
64115: PUSH
64116: LD_INT 2
64118: NEG
64119: PUSH
64120: EMPTY
64121: LIST
64122: LIST
64123: PUSH
64124: LD_INT 4
64126: PUSH
64127: LD_INT 2
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: PUSH
64134: LD_INT 4
64136: PUSH
64137: LD_INT 4
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: PUSH
64144: LD_INT 4
64146: PUSH
64147: LD_INT 3
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: PUSH
64154: LD_INT 5
64156: PUSH
64157: LD_INT 4
64159: PUSH
64160: EMPTY
64161: LIST
64162: LIST
64163: PUSH
64164: LD_INT 5
64166: PUSH
64167: LD_INT 5
64169: PUSH
64170: EMPTY
64171: LIST
64172: LIST
64173: PUSH
64174: LD_INT 4
64176: PUSH
64177: LD_INT 5
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: PUSH
64184: LD_INT 3
64186: PUSH
64187: LD_INT 4
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PUSH
64194: LD_INT 3
64196: PUSH
64197: LD_INT 3
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: PUSH
64204: LD_INT 5
64206: PUSH
64207: LD_INT 3
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: PUSH
64214: LD_INT 3
64216: PUSH
64217: LD_INT 5
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: PUSH
64224: LD_INT 0
64226: PUSH
64227: LD_INT 3
64229: PUSH
64230: EMPTY
64231: LIST
64232: LIST
64233: PUSH
64234: LD_INT 0
64236: PUSH
64237: LD_INT 2
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: PUSH
64244: LD_INT 1
64246: PUSH
64247: LD_INT 3
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: PUSH
64254: LD_INT 1
64256: PUSH
64257: LD_INT 4
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: PUSH
64264: LD_INT 0
64266: PUSH
64267: LD_INT 4
64269: PUSH
64270: EMPTY
64271: LIST
64272: LIST
64273: PUSH
64274: LD_INT 1
64276: NEG
64277: PUSH
64278: LD_INT 3
64280: PUSH
64281: EMPTY
64282: LIST
64283: LIST
64284: PUSH
64285: LD_INT 1
64287: NEG
64288: PUSH
64289: LD_INT 2
64291: PUSH
64292: EMPTY
64293: LIST
64294: LIST
64295: PUSH
64296: LD_INT 2
64298: PUSH
64299: LD_INT 4
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: PUSH
64306: LD_INT 2
64308: NEG
64309: PUSH
64310: LD_INT 2
64312: PUSH
64313: EMPTY
64314: LIST
64315: LIST
64316: PUSH
64317: LD_INT 4
64319: NEG
64320: PUSH
64321: LD_INT 0
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PUSH
64328: LD_INT 4
64330: NEG
64331: PUSH
64332: LD_INT 1
64334: NEG
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: PUSH
64340: LD_INT 3
64342: NEG
64343: PUSH
64344: LD_INT 0
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: PUSH
64351: LD_INT 3
64353: NEG
64354: PUSH
64355: LD_INT 1
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: PUSH
64362: LD_INT 4
64364: NEG
64365: PUSH
64366: LD_INT 1
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: PUSH
64373: LD_INT 5
64375: NEG
64376: PUSH
64377: LD_INT 0
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: LD_INT 5
64386: NEG
64387: PUSH
64388: LD_INT 1
64390: NEG
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: LD_INT 5
64398: NEG
64399: PUSH
64400: LD_INT 2
64402: NEG
64403: PUSH
64404: EMPTY
64405: LIST
64406: LIST
64407: PUSH
64408: LD_INT 3
64410: NEG
64411: PUSH
64412: LD_INT 2
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: LIST
64423: LIST
64424: LIST
64425: LIST
64426: LIST
64427: LIST
64428: LIST
64429: LIST
64430: LIST
64431: LIST
64432: LIST
64433: LIST
64434: LIST
64435: LIST
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: ST_TO_ADDR
// end ; end ;
64466: GO 64469
64468: POP
// case btype of b_depot , b_warehouse :
64469: LD_VAR 0 1
64473: PUSH
64474: LD_INT 0
64476: DOUBLE
64477: EQUAL
64478: IFTRUE 64488
64480: LD_INT 1
64482: DOUBLE
64483: EQUAL
64484: IFTRUE 64488
64486: GO 64689
64488: POP
// case nation of nation_american :
64489: LD_VAR 0 5
64493: PUSH
64494: LD_INT 1
64496: DOUBLE
64497: EQUAL
64498: IFTRUE 64502
64500: GO 64558
64502: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
64503: LD_ADDR_VAR 0 9
64507: PUSH
64508: LD_VAR 0 11
64512: PUSH
64513: LD_VAR 0 12
64517: PUSH
64518: LD_VAR 0 13
64522: PUSH
64523: LD_VAR 0 14
64527: PUSH
64528: LD_VAR 0 15
64532: PUSH
64533: LD_VAR 0 16
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: PUSH
64546: LD_VAR 0 4
64550: PUSH
64551: LD_INT 1
64553: PLUS
64554: ARRAY
64555: ST_TO_ADDR
64556: GO 64687
64558: LD_INT 2
64560: DOUBLE
64561: EQUAL
64562: IFTRUE 64566
64564: GO 64622
64566: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
64567: LD_ADDR_VAR 0 9
64571: PUSH
64572: LD_VAR 0 17
64576: PUSH
64577: LD_VAR 0 18
64581: PUSH
64582: LD_VAR 0 19
64586: PUSH
64587: LD_VAR 0 20
64591: PUSH
64592: LD_VAR 0 21
64596: PUSH
64597: LD_VAR 0 22
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: LIST
64606: LIST
64607: LIST
64608: LIST
64609: PUSH
64610: LD_VAR 0 4
64614: PUSH
64615: LD_INT 1
64617: PLUS
64618: ARRAY
64619: ST_TO_ADDR
64620: GO 64687
64622: LD_INT 3
64624: DOUBLE
64625: EQUAL
64626: IFTRUE 64630
64628: GO 64686
64630: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64631: LD_ADDR_VAR 0 9
64635: PUSH
64636: LD_VAR 0 23
64640: PUSH
64641: LD_VAR 0 24
64645: PUSH
64646: LD_VAR 0 25
64650: PUSH
64651: LD_VAR 0 26
64655: PUSH
64656: LD_VAR 0 27
64660: PUSH
64661: LD_VAR 0 28
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: LIST
64670: LIST
64671: LIST
64672: LIST
64673: PUSH
64674: LD_VAR 0 4
64678: PUSH
64679: LD_INT 1
64681: PLUS
64682: ARRAY
64683: ST_TO_ADDR
64684: GO 64687
64686: POP
64687: GO 65242
64689: LD_INT 2
64691: DOUBLE
64692: EQUAL
64693: IFTRUE 64703
64695: LD_INT 3
64697: DOUBLE
64698: EQUAL
64699: IFTRUE 64703
64701: GO 64759
64703: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64704: LD_ADDR_VAR 0 9
64708: PUSH
64709: LD_VAR 0 29
64713: PUSH
64714: LD_VAR 0 30
64718: PUSH
64719: LD_VAR 0 31
64723: PUSH
64724: LD_VAR 0 32
64728: PUSH
64729: LD_VAR 0 33
64733: PUSH
64734: LD_VAR 0 34
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: LIST
64743: LIST
64744: LIST
64745: LIST
64746: PUSH
64747: LD_VAR 0 4
64751: PUSH
64752: LD_INT 1
64754: PLUS
64755: ARRAY
64756: ST_TO_ADDR
64757: GO 65242
64759: LD_INT 16
64761: DOUBLE
64762: EQUAL
64763: IFTRUE 64821
64765: LD_INT 17
64767: DOUBLE
64768: EQUAL
64769: IFTRUE 64821
64771: LD_INT 18
64773: DOUBLE
64774: EQUAL
64775: IFTRUE 64821
64777: LD_INT 19
64779: DOUBLE
64780: EQUAL
64781: IFTRUE 64821
64783: LD_INT 22
64785: DOUBLE
64786: EQUAL
64787: IFTRUE 64821
64789: LD_INT 20
64791: DOUBLE
64792: EQUAL
64793: IFTRUE 64821
64795: LD_INT 21
64797: DOUBLE
64798: EQUAL
64799: IFTRUE 64821
64801: LD_INT 23
64803: DOUBLE
64804: EQUAL
64805: IFTRUE 64821
64807: LD_INT 24
64809: DOUBLE
64810: EQUAL
64811: IFTRUE 64821
64813: LD_INT 25
64815: DOUBLE
64816: EQUAL
64817: IFTRUE 64821
64819: GO 64877
64821: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64822: LD_ADDR_VAR 0 9
64826: PUSH
64827: LD_VAR 0 35
64831: PUSH
64832: LD_VAR 0 36
64836: PUSH
64837: LD_VAR 0 37
64841: PUSH
64842: LD_VAR 0 38
64846: PUSH
64847: LD_VAR 0 39
64851: PUSH
64852: LD_VAR 0 40
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: LIST
64861: LIST
64862: LIST
64863: LIST
64864: PUSH
64865: LD_VAR 0 4
64869: PUSH
64870: LD_INT 1
64872: PLUS
64873: ARRAY
64874: ST_TO_ADDR
64875: GO 65242
64877: LD_INT 6
64879: DOUBLE
64880: EQUAL
64881: IFTRUE 64933
64883: LD_INT 7
64885: DOUBLE
64886: EQUAL
64887: IFTRUE 64933
64889: LD_INT 8
64891: DOUBLE
64892: EQUAL
64893: IFTRUE 64933
64895: LD_INT 13
64897: DOUBLE
64898: EQUAL
64899: IFTRUE 64933
64901: LD_INT 12
64903: DOUBLE
64904: EQUAL
64905: IFTRUE 64933
64907: LD_INT 15
64909: DOUBLE
64910: EQUAL
64911: IFTRUE 64933
64913: LD_INT 11
64915: DOUBLE
64916: EQUAL
64917: IFTRUE 64933
64919: LD_INT 14
64921: DOUBLE
64922: EQUAL
64923: IFTRUE 64933
64925: LD_INT 10
64927: DOUBLE
64928: EQUAL
64929: IFTRUE 64933
64931: GO 64989
64933: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
64934: LD_ADDR_VAR 0 9
64938: PUSH
64939: LD_VAR 0 41
64943: PUSH
64944: LD_VAR 0 42
64948: PUSH
64949: LD_VAR 0 43
64953: PUSH
64954: LD_VAR 0 44
64958: PUSH
64959: LD_VAR 0 45
64963: PUSH
64964: LD_VAR 0 46
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: LIST
64973: LIST
64974: LIST
64975: LIST
64976: PUSH
64977: LD_VAR 0 4
64981: PUSH
64982: LD_INT 1
64984: PLUS
64985: ARRAY
64986: ST_TO_ADDR
64987: GO 65242
64989: LD_INT 36
64991: DOUBLE
64992: EQUAL
64993: IFTRUE 64997
64995: GO 65053
64997: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64998: LD_ADDR_VAR 0 9
65002: PUSH
65003: LD_VAR 0 47
65007: PUSH
65008: LD_VAR 0 48
65012: PUSH
65013: LD_VAR 0 49
65017: PUSH
65018: LD_VAR 0 50
65022: PUSH
65023: LD_VAR 0 51
65027: PUSH
65028: LD_VAR 0 52
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: LIST
65037: LIST
65038: LIST
65039: LIST
65040: PUSH
65041: LD_VAR 0 4
65045: PUSH
65046: LD_INT 1
65048: PLUS
65049: ARRAY
65050: ST_TO_ADDR
65051: GO 65242
65053: LD_INT 4
65055: DOUBLE
65056: EQUAL
65057: IFTRUE 65079
65059: LD_INT 5
65061: DOUBLE
65062: EQUAL
65063: IFTRUE 65079
65065: LD_INT 34
65067: DOUBLE
65068: EQUAL
65069: IFTRUE 65079
65071: LD_INT 37
65073: DOUBLE
65074: EQUAL
65075: IFTRUE 65079
65077: GO 65135
65079: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
65080: LD_ADDR_VAR 0 9
65084: PUSH
65085: LD_VAR 0 53
65089: PUSH
65090: LD_VAR 0 54
65094: PUSH
65095: LD_VAR 0 55
65099: PUSH
65100: LD_VAR 0 56
65104: PUSH
65105: LD_VAR 0 57
65109: PUSH
65110: LD_VAR 0 58
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: LIST
65119: LIST
65120: LIST
65121: LIST
65122: PUSH
65123: LD_VAR 0 4
65127: PUSH
65128: LD_INT 1
65130: PLUS
65131: ARRAY
65132: ST_TO_ADDR
65133: GO 65242
65135: LD_INT 31
65137: DOUBLE
65138: EQUAL
65139: IFTRUE 65185
65141: LD_INT 32
65143: DOUBLE
65144: EQUAL
65145: IFTRUE 65185
65147: LD_INT 33
65149: DOUBLE
65150: EQUAL
65151: IFTRUE 65185
65153: LD_INT 27
65155: DOUBLE
65156: EQUAL
65157: IFTRUE 65185
65159: LD_INT 26
65161: DOUBLE
65162: EQUAL
65163: IFTRUE 65185
65165: LD_INT 28
65167: DOUBLE
65168: EQUAL
65169: IFTRUE 65185
65171: LD_INT 29
65173: DOUBLE
65174: EQUAL
65175: IFTRUE 65185
65177: LD_INT 30
65179: DOUBLE
65180: EQUAL
65181: IFTRUE 65185
65183: GO 65241
65185: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
65186: LD_ADDR_VAR 0 9
65190: PUSH
65191: LD_VAR 0 59
65195: PUSH
65196: LD_VAR 0 60
65200: PUSH
65201: LD_VAR 0 61
65205: PUSH
65206: LD_VAR 0 62
65210: PUSH
65211: LD_VAR 0 63
65215: PUSH
65216: LD_VAR 0 64
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: LIST
65225: LIST
65226: LIST
65227: LIST
65228: PUSH
65229: LD_VAR 0 4
65233: PUSH
65234: LD_INT 1
65236: PLUS
65237: ARRAY
65238: ST_TO_ADDR
65239: GO 65242
65241: POP
// temp_list2 = [ ] ;
65242: LD_ADDR_VAR 0 10
65246: PUSH
65247: EMPTY
65248: ST_TO_ADDR
// for i in temp_list do
65249: LD_ADDR_VAR 0 8
65253: PUSH
65254: LD_VAR 0 9
65258: PUSH
65259: FOR_IN
65260: IFFALSE 65312
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
65262: LD_ADDR_VAR 0 10
65266: PUSH
65267: LD_VAR 0 10
65271: PUSH
65272: LD_VAR 0 8
65276: PUSH
65277: LD_INT 1
65279: ARRAY
65280: PUSH
65281: LD_VAR 0 2
65285: PLUS
65286: PUSH
65287: LD_VAR 0 8
65291: PUSH
65292: LD_INT 2
65294: ARRAY
65295: PUSH
65296: LD_VAR 0 3
65300: PLUS
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: EMPTY
65307: LIST
65308: ADD
65309: ST_TO_ADDR
65310: GO 65259
65312: POP
65313: POP
// result = temp_list2 ;
65314: LD_ADDR_VAR 0 7
65318: PUSH
65319: LD_VAR 0 10
65323: ST_TO_ADDR
// end ;
65324: LD_VAR 0 7
65328: RET
// export function EnemyInRange ( unit , dist ) ; begin
65329: LD_INT 0
65331: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
65332: LD_ADDR_VAR 0 3
65336: PUSH
65337: LD_VAR 0 1
65341: PPUSH
65342: CALL_OW 255
65346: PPUSH
65347: LD_VAR 0 1
65351: PPUSH
65352: CALL_OW 250
65356: PPUSH
65357: LD_VAR 0 1
65361: PPUSH
65362: CALL_OW 251
65366: PPUSH
65367: LD_VAR 0 2
65371: PPUSH
65372: CALL 38731 0 4
65376: PUSH
65377: LD_INT 4
65379: ARRAY
65380: ST_TO_ADDR
// end ;
65381: LD_VAR 0 3
65385: RET
// export function PlayerSeeMe ( unit ) ; begin
65386: LD_INT 0
65388: PPUSH
// result := See ( your_side , unit ) ;
65389: LD_ADDR_VAR 0 2
65393: PUSH
65394: LD_OWVAR 2
65398: PPUSH
65399: LD_VAR 0 1
65403: PPUSH
65404: CALL_OW 292
65408: ST_TO_ADDR
// end ;
65409: LD_VAR 0 2
65413: RET
// export function ReverseDir ( unit ) ; begin
65414: LD_INT 0
65416: PPUSH
// if not unit then
65417: LD_VAR 0 1
65421: NOT
65422: IFFALSE 65426
// exit ;
65424: GO 65449
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
65426: LD_ADDR_VAR 0 2
65430: PUSH
65431: LD_VAR 0 1
65435: PPUSH
65436: CALL_OW 254
65440: PUSH
65441: LD_INT 3
65443: PLUS
65444: PUSH
65445: LD_INT 6
65447: MOD
65448: ST_TO_ADDR
// end ;
65449: LD_VAR 0 2
65453: RET
// export function ReverseArray ( array ) ; var i ; begin
65454: LD_INT 0
65456: PPUSH
65457: PPUSH
// if not array then
65458: LD_VAR 0 1
65462: NOT
65463: IFFALSE 65467
// exit ;
65465: GO 65522
// result := [ ] ;
65467: LD_ADDR_VAR 0 2
65471: PUSH
65472: EMPTY
65473: ST_TO_ADDR
// for i := array downto 1 do
65474: LD_ADDR_VAR 0 3
65478: PUSH
65479: DOUBLE
65480: LD_VAR 0 1
65484: INC
65485: ST_TO_ADDR
65486: LD_INT 1
65488: PUSH
65489: FOR_DOWNTO
65490: IFFALSE 65520
// result := Join ( result , array [ i ] ) ;
65492: LD_ADDR_VAR 0 2
65496: PUSH
65497: LD_VAR 0 2
65501: PPUSH
65502: LD_VAR 0 1
65506: PUSH
65507: LD_VAR 0 3
65511: ARRAY
65512: PPUSH
65513: CALL 70147 0 2
65517: ST_TO_ADDR
65518: GO 65489
65520: POP
65521: POP
// end ;
65522: LD_VAR 0 2
65526: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
65527: LD_INT 0
65529: PPUSH
65530: PPUSH
65531: PPUSH
65532: PPUSH
65533: PPUSH
65534: PPUSH
// if not unit or not hexes then
65535: LD_VAR 0 1
65539: NOT
65540: PUSH
65541: LD_VAR 0 2
65545: NOT
65546: OR
65547: IFFALSE 65551
// exit ;
65549: GO 65674
// dist := 9999 ;
65551: LD_ADDR_VAR 0 5
65555: PUSH
65556: LD_INT 9999
65558: ST_TO_ADDR
// for i = 1 to hexes do
65559: LD_ADDR_VAR 0 4
65563: PUSH
65564: DOUBLE
65565: LD_INT 1
65567: DEC
65568: ST_TO_ADDR
65569: LD_VAR 0 2
65573: PUSH
65574: FOR_TO
65575: IFFALSE 65662
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65577: LD_ADDR_VAR 0 6
65581: PUSH
65582: LD_VAR 0 1
65586: PPUSH
65587: LD_VAR 0 2
65591: PUSH
65592: LD_VAR 0 4
65596: ARRAY
65597: PUSH
65598: LD_INT 1
65600: ARRAY
65601: PPUSH
65602: LD_VAR 0 2
65606: PUSH
65607: LD_VAR 0 4
65611: ARRAY
65612: PUSH
65613: LD_INT 2
65615: ARRAY
65616: PPUSH
65617: CALL_OW 297
65621: ST_TO_ADDR
// if tdist < dist then
65622: LD_VAR 0 6
65626: PUSH
65627: LD_VAR 0 5
65631: LESS
65632: IFFALSE 65660
// begin hex := hexes [ i ] ;
65634: LD_ADDR_VAR 0 8
65638: PUSH
65639: LD_VAR 0 2
65643: PUSH
65644: LD_VAR 0 4
65648: ARRAY
65649: ST_TO_ADDR
// dist := tdist ;
65650: LD_ADDR_VAR 0 5
65654: PUSH
65655: LD_VAR 0 6
65659: ST_TO_ADDR
// end ; end ;
65660: GO 65574
65662: POP
65663: POP
// result := hex ;
65664: LD_ADDR_VAR 0 3
65668: PUSH
65669: LD_VAR 0 8
65673: ST_TO_ADDR
// end ;
65674: LD_VAR 0 3
65678: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65679: LD_INT 0
65681: PPUSH
65682: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65683: LD_VAR 0 1
65687: NOT
65688: PUSH
65689: LD_VAR 0 1
65693: PUSH
65694: LD_INT 21
65696: PUSH
65697: LD_INT 2
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: PUSH
65704: LD_INT 23
65706: PUSH
65707: LD_INT 2
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PUSH
65714: EMPTY
65715: LIST
65716: LIST
65717: PPUSH
65718: CALL_OW 69
65722: IN
65723: NOT
65724: OR
65725: IFFALSE 65729
// exit ;
65727: GO 65776
// for i = 1 to 3 do
65729: LD_ADDR_VAR 0 3
65733: PUSH
65734: DOUBLE
65735: LD_INT 1
65737: DEC
65738: ST_TO_ADDR
65739: LD_INT 3
65741: PUSH
65742: FOR_TO
65743: IFFALSE 65774
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65745: LD_VAR 0 1
65749: PPUSH
65750: CALL_OW 250
65754: PPUSH
65755: LD_VAR 0 1
65759: PPUSH
65760: CALL_OW 251
65764: PPUSH
65765: LD_INT 1
65767: PPUSH
65768: CALL_OW 453
65772: GO 65742
65774: POP
65775: POP
// end ;
65776: LD_VAR 0 2
65780: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65781: LD_INT 0
65783: PPUSH
65784: PPUSH
65785: PPUSH
65786: PPUSH
65787: PPUSH
65788: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
65789: LD_VAR 0 1
65793: NOT
65794: PUSH
65795: LD_VAR 0 2
65799: NOT
65800: OR
65801: PUSH
65802: LD_VAR 0 1
65806: PPUSH
65807: CALL_OW 314
65811: OR
65812: IFFALSE 65816
// exit ;
65814: GO 66257
// x := GetX ( enemy_unit ) ;
65816: LD_ADDR_VAR 0 7
65820: PUSH
65821: LD_VAR 0 2
65825: PPUSH
65826: CALL_OW 250
65830: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65831: LD_ADDR_VAR 0 8
65835: PUSH
65836: LD_VAR 0 2
65840: PPUSH
65841: CALL_OW 251
65845: ST_TO_ADDR
// if not x or not y then
65846: LD_VAR 0 7
65850: NOT
65851: PUSH
65852: LD_VAR 0 8
65856: NOT
65857: OR
65858: IFFALSE 65862
// exit ;
65860: GO 66257
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65862: LD_ADDR_VAR 0 6
65866: PUSH
65867: LD_VAR 0 7
65871: PPUSH
65872: LD_INT 0
65874: PPUSH
65875: LD_INT 4
65877: PPUSH
65878: CALL_OW 272
65882: PUSH
65883: LD_VAR 0 8
65887: PPUSH
65888: LD_INT 0
65890: PPUSH
65891: LD_INT 4
65893: PPUSH
65894: CALL_OW 273
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: PUSH
65903: LD_VAR 0 7
65907: PPUSH
65908: LD_INT 1
65910: PPUSH
65911: LD_INT 4
65913: PPUSH
65914: CALL_OW 272
65918: PUSH
65919: LD_VAR 0 8
65923: PPUSH
65924: LD_INT 1
65926: PPUSH
65927: LD_INT 4
65929: PPUSH
65930: CALL_OW 273
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: PUSH
65939: LD_VAR 0 7
65943: PPUSH
65944: LD_INT 2
65946: PPUSH
65947: LD_INT 4
65949: PPUSH
65950: CALL_OW 272
65954: PUSH
65955: LD_VAR 0 8
65959: PPUSH
65960: LD_INT 2
65962: PPUSH
65963: LD_INT 4
65965: PPUSH
65966: CALL_OW 273
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: PUSH
65975: LD_VAR 0 7
65979: PPUSH
65980: LD_INT 3
65982: PPUSH
65983: LD_INT 4
65985: PPUSH
65986: CALL_OW 272
65990: PUSH
65991: LD_VAR 0 8
65995: PPUSH
65996: LD_INT 3
65998: PPUSH
65999: LD_INT 4
66001: PPUSH
66002: CALL_OW 273
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: PUSH
66011: LD_VAR 0 7
66015: PPUSH
66016: LD_INT 4
66018: PPUSH
66019: LD_INT 4
66021: PPUSH
66022: CALL_OW 272
66026: PUSH
66027: LD_VAR 0 8
66031: PPUSH
66032: LD_INT 4
66034: PPUSH
66035: LD_INT 4
66037: PPUSH
66038: CALL_OW 273
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: PUSH
66047: LD_VAR 0 7
66051: PPUSH
66052: LD_INT 5
66054: PPUSH
66055: LD_INT 4
66057: PPUSH
66058: CALL_OW 272
66062: PUSH
66063: LD_VAR 0 8
66067: PPUSH
66068: LD_INT 5
66070: PPUSH
66071: LD_INT 4
66073: PPUSH
66074: CALL_OW 273
66078: PUSH
66079: EMPTY
66080: LIST
66081: LIST
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: ST_TO_ADDR
// for i = tmp downto 1 do
66091: LD_ADDR_VAR 0 4
66095: PUSH
66096: DOUBLE
66097: LD_VAR 0 6
66101: INC
66102: ST_TO_ADDR
66103: LD_INT 1
66105: PUSH
66106: FOR_DOWNTO
66107: IFFALSE 66208
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
66109: LD_VAR 0 6
66113: PUSH
66114: LD_VAR 0 4
66118: ARRAY
66119: PUSH
66120: LD_INT 1
66122: ARRAY
66123: PPUSH
66124: LD_VAR 0 6
66128: PUSH
66129: LD_VAR 0 4
66133: ARRAY
66134: PUSH
66135: LD_INT 2
66137: ARRAY
66138: PPUSH
66139: CALL_OW 488
66143: NOT
66144: PUSH
66145: LD_VAR 0 6
66149: PUSH
66150: LD_VAR 0 4
66154: ARRAY
66155: PUSH
66156: LD_INT 1
66158: ARRAY
66159: PPUSH
66160: LD_VAR 0 6
66164: PUSH
66165: LD_VAR 0 4
66169: ARRAY
66170: PUSH
66171: LD_INT 2
66173: ARRAY
66174: PPUSH
66175: CALL_OW 428
66179: PUSH
66180: LD_INT 0
66182: NONEQUAL
66183: OR
66184: IFFALSE 66206
// tmp := Delete ( tmp , i ) ;
66186: LD_ADDR_VAR 0 6
66190: PUSH
66191: LD_VAR 0 6
66195: PPUSH
66196: LD_VAR 0 4
66200: PPUSH
66201: CALL_OW 3
66205: ST_TO_ADDR
66206: GO 66106
66208: POP
66209: POP
// j := GetClosestHex ( unit , tmp ) ;
66210: LD_ADDR_VAR 0 5
66214: PUSH
66215: LD_VAR 0 1
66219: PPUSH
66220: LD_VAR 0 6
66224: PPUSH
66225: CALL 65527 0 2
66229: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
66230: LD_VAR 0 1
66234: PPUSH
66235: LD_VAR 0 5
66239: PUSH
66240: LD_INT 1
66242: ARRAY
66243: PPUSH
66244: LD_VAR 0 5
66248: PUSH
66249: LD_INT 2
66251: ARRAY
66252: PPUSH
66253: CALL_OW 111
// end ;
66257: LD_VAR 0 3
66261: RET
// export function PrepareApemanSoldier ( ) ; begin
66262: LD_INT 0
66264: PPUSH
// uc_nation := 0 ;
66265: LD_ADDR_OWVAR 21
66269: PUSH
66270: LD_INT 0
66272: ST_TO_ADDR
// hc_sex := sex_male ;
66273: LD_ADDR_OWVAR 27
66277: PUSH
66278: LD_INT 1
66280: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
66281: LD_ADDR_OWVAR 28
66285: PUSH
66286: LD_INT 15
66288: ST_TO_ADDR
// hc_gallery :=  ;
66289: LD_ADDR_OWVAR 33
66293: PUSH
66294: LD_STRING 
66296: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66297: LD_ADDR_OWVAR 31
66301: PUSH
66302: LD_INT 0
66304: PPUSH
66305: LD_INT 3
66307: PPUSH
66308: CALL_OW 12
66312: PUSH
66313: LD_INT 0
66315: PPUSH
66316: LD_INT 3
66318: PPUSH
66319: CALL_OW 12
66323: PUSH
66324: LD_INT 0
66326: PUSH
66327: LD_INT 0
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: LIST
66334: LIST
66335: ST_TO_ADDR
// end ;
66336: LD_VAR 0 1
66340: RET
// export function PrepareApemanEngineer ( ) ; begin
66341: LD_INT 0
66343: PPUSH
// uc_nation := 0 ;
66344: LD_ADDR_OWVAR 21
66348: PUSH
66349: LD_INT 0
66351: ST_TO_ADDR
// hc_sex := sex_male ;
66352: LD_ADDR_OWVAR 27
66356: PUSH
66357: LD_INT 1
66359: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
66360: LD_ADDR_OWVAR 28
66364: PUSH
66365: LD_INT 16
66367: ST_TO_ADDR
// hc_gallery :=  ;
66368: LD_ADDR_OWVAR 33
66372: PUSH
66373: LD_STRING 
66375: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66376: LD_ADDR_OWVAR 31
66380: PUSH
66381: LD_INT 0
66383: PPUSH
66384: LD_INT 3
66386: PPUSH
66387: CALL_OW 12
66391: PUSH
66392: LD_INT 0
66394: PPUSH
66395: LD_INT 3
66397: PPUSH
66398: CALL_OW 12
66402: PUSH
66403: LD_INT 0
66405: PUSH
66406: LD_INT 0
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: LIST
66413: LIST
66414: ST_TO_ADDR
// end ;
66415: LD_VAR 0 1
66419: RET
// export function PrepareApeman ( agressivity ) ; begin
66420: LD_INT 0
66422: PPUSH
// uc_side := 0 ;
66423: LD_ADDR_OWVAR 20
66427: PUSH
66428: LD_INT 0
66430: ST_TO_ADDR
// uc_nation := 0 ;
66431: LD_ADDR_OWVAR 21
66435: PUSH
66436: LD_INT 0
66438: ST_TO_ADDR
// hc_sex := sex_male ;
66439: LD_ADDR_OWVAR 27
66443: PUSH
66444: LD_INT 1
66446: ST_TO_ADDR
// hc_class := class_apeman ;
66447: LD_ADDR_OWVAR 28
66451: PUSH
66452: LD_INT 12
66454: ST_TO_ADDR
// hc_gallery :=  ;
66455: LD_ADDR_OWVAR 33
66459: PUSH
66460: LD_STRING 
66462: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66463: LD_ADDR_OWVAR 35
66467: PUSH
66468: LD_VAR 0 1
66472: NEG
66473: PPUSH
66474: LD_VAR 0 1
66478: PPUSH
66479: CALL_OW 12
66483: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66484: LD_ADDR_OWVAR 31
66488: PUSH
66489: LD_INT 0
66491: PPUSH
66492: LD_INT 3
66494: PPUSH
66495: CALL_OW 12
66499: PUSH
66500: LD_INT 0
66502: PPUSH
66503: LD_INT 3
66505: PPUSH
66506: CALL_OW 12
66510: PUSH
66511: LD_INT 0
66513: PUSH
66514: LD_INT 0
66516: PUSH
66517: EMPTY
66518: LIST
66519: LIST
66520: LIST
66521: LIST
66522: ST_TO_ADDR
// end ;
66523: LD_VAR 0 2
66527: RET
// export function PrepareTiger ( agressivity ) ; begin
66528: LD_INT 0
66530: PPUSH
// uc_side := 0 ;
66531: LD_ADDR_OWVAR 20
66535: PUSH
66536: LD_INT 0
66538: ST_TO_ADDR
// uc_nation := 0 ;
66539: LD_ADDR_OWVAR 21
66543: PUSH
66544: LD_INT 0
66546: ST_TO_ADDR
// hc_class := class_tiger ;
66547: LD_ADDR_OWVAR 28
66551: PUSH
66552: LD_INT 14
66554: ST_TO_ADDR
// hc_gallery :=  ;
66555: LD_ADDR_OWVAR 33
66559: PUSH
66560: LD_STRING 
66562: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66563: LD_ADDR_OWVAR 35
66567: PUSH
66568: LD_VAR 0 1
66572: NEG
66573: PPUSH
66574: LD_VAR 0 1
66578: PPUSH
66579: CALL_OW 12
66583: ST_TO_ADDR
// end ;
66584: LD_VAR 0 2
66588: RET
// export function PrepareEnchidna ( ) ; begin
66589: LD_INT 0
66591: PPUSH
// uc_side := 0 ;
66592: LD_ADDR_OWVAR 20
66596: PUSH
66597: LD_INT 0
66599: ST_TO_ADDR
// uc_nation := 0 ;
66600: LD_ADDR_OWVAR 21
66604: PUSH
66605: LD_INT 0
66607: ST_TO_ADDR
// hc_class := class_baggie ;
66608: LD_ADDR_OWVAR 28
66612: PUSH
66613: LD_INT 13
66615: ST_TO_ADDR
// hc_gallery :=  ;
66616: LD_ADDR_OWVAR 33
66620: PUSH
66621: LD_STRING 
66623: ST_TO_ADDR
// end ;
66624: LD_VAR 0 1
66628: RET
// export function PrepareFrog ( ) ; begin
66629: LD_INT 0
66631: PPUSH
// uc_side := 0 ;
66632: LD_ADDR_OWVAR 20
66636: PUSH
66637: LD_INT 0
66639: ST_TO_ADDR
// uc_nation := 0 ;
66640: LD_ADDR_OWVAR 21
66644: PUSH
66645: LD_INT 0
66647: ST_TO_ADDR
// hc_class := class_frog ;
66648: LD_ADDR_OWVAR 28
66652: PUSH
66653: LD_INT 19
66655: ST_TO_ADDR
// hc_gallery :=  ;
66656: LD_ADDR_OWVAR 33
66660: PUSH
66661: LD_STRING 
66663: ST_TO_ADDR
// end ;
66664: LD_VAR 0 1
66668: RET
// export function PrepareFish ( ) ; begin
66669: LD_INT 0
66671: PPUSH
// uc_side := 0 ;
66672: LD_ADDR_OWVAR 20
66676: PUSH
66677: LD_INT 0
66679: ST_TO_ADDR
// uc_nation := 0 ;
66680: LD_ADDR_OWVAR 21
66684: PUSH
66685: LD_INT 0
66687: ST_TO_ADDR
// hc_class := class_fish ;
66688: LD_ADDR_OWVAR 28
66692: PUSH
66693: LD_INT 20
66695: ST_TO_ADDR
// hc_gallery :=  ;
66696: LD_ADDR_OWVAR 33
66700: PUSH
66701: LD_STRING 
66703: ST_TO_ADDR
// end ;
66704: LD_VAR 0 1
66708: RET
// export function PrepareBird ( ) ; begin
66709: LD_INT 0
66711: PPUSH
// uc_side := 0 ;
66712: LD_ADDR_OWVAR 20
66716: PUSH
66717: LD_INT 0
66719: ST_TO_ADDR
// uc_nation := 0 ;
66720: LD_ADDR_OWVAR 21
66724: PUSH
66725: LD_INT 0
66727: ST_TO_ADDR
// hc_class := class_phororhacos ;
66728: LD_ADDR_OWVAR 28
66732: PUSH
66733: LD_INT 18
66735: ST_TO_ADDR
// hc_gallery :=  ;
66736: LD_ADDR_OWVAR 33
66740: PUSH
66741: LD_STRING 
66743: ST_TO_ADDR
// end ;
66744: LD_VAR 0 1
66748: RET
// export function PrepareHorse ( ) ; begin
66749: LD_INT 0
66751: PPUSH
// uc_side := 0 ;
66752: LD_ADDR_OWVAR 20
66756: PUSH
66757: LD_INT 0
66759: ST_TO_ADDR
// uc_nation := 0 ;
66760: LD_ADDR_OWVAR 21
66764: PUSH
66765: LD_INT 0
66767: ST_TO_ADDR
// hc_class := class_horse ;
66768: LD_ADDR_OWVAR 28
66772: PUSH
66773: LD_INT 21
66775: ST_TO_ADDR
// hc_gallery :=  ;
66776: LD_ADDR_OWVAR 33
66780: PUSH
66781: LD_STRING 
66783: ST_TO_ADDR
// end ;
66784: LD_VAR 0 1
66788: RET
// export function PrepareMastodont ( ) ; begin
66789: LD_INT 0
66791: PPUSH
// uc_side := 0 ;
66792: LD_ADDR_OWVAR 20
66796: PUSH
66797: LD_INT 0
66799: ST_TO_ADDR
// uc_nation := 0 ;
66800: LD_ADDR_OWVAR 21
66804: PUSH
66805: LD_INT 0
66807: ST_TO_ADDR
// vc_chassis := class_mastodont ;
66808: LD_ADDR_OWVAR 37
66812: PUSH
66813: LD_INT 31
66815: ST_TO_ADDR
// vc_control := control_rider ;
66816: LD_ADDR_OWVAR 38
66820: PUSH
66821: LD_INT 4
66823: ST_TO_ADDR
// end ;
66824: LD_VAR 0 1
66828: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66829: LD_INT 0
66831: PPUSH
66832: PPUSH
66833: PPUSH
// uc_side = 0 ;
66834: LD_ADDR_OWVAR 20
66838: PUSH
66839: LD_INT 0
66841: ST_TO_ADDR
// uc_nation = 0 ;
66842: LD_ADDR_OWVAR 21
66846: PUSH
66847: LD_INT 0
66849: ST_TO_ADDR
// InitHc_All ( ) ;
66850: CALL_OW 584
// InitVc ;
66854: CALL_OW 20
// if mastodonts then
66858: LD_VAR 0 6
66862: IFFALSE 66929
// for i = 1 to mastodonts do
66864: LD_ADDR_VAR 0 11
66868: PUSH
66869: DOUBLE
66870: LD_INT 1
66872: DEC
66873: ST_TO_ADDR
66874: LD_VAR 0 6
66878: PUSH
66879: FOR_TO
66880: IFFALSE 66927
// begin vc_chassis := 31 ;
66882: LD_ADDR_OWVAR 37
66886: PUSH
66887: LD_INT 31
66889: ST_TO_ADDR
// vc_control := control_rider ;
66890: LD_ADDR_OWVAR 38
66894: PUSH
66895: LD_INT 4
66897: ST_TO_ADDR
// animal := CreateVehicle ;
66898: LD_ADDR_VAR 0 12
66902: PUSH
66903: CALL_OW 45
66907: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66908: LD_VAR 0 12
66912: PPUSH
66913: LD_VAR 0 8
66917: PPUSH
66918: LD_INT 0
66920: PPUSH
66921: CALL 69064 0 3
// end ;
66925: GO 66879
66927: POP
66928: POP
// if horses then
66929: LD_VAR 0 5
66933: IFFALSE 67000
// for i = 1 to horses do
66935: LD_ADDR_VAR 0 11
66939: PUSH
66940: DOUBLE
66941: LD_INT 1
66943: DEC
66944: ST_TO_ADDR
66945: LD_VAR 0 5
66949: PUSH
66950: FOR_TO
66951: IFFALSE 66998
// begin hc_class := 21 ;
66953: LD_ADDR_OWVAR 28
66957: PUSH
66958: LD_INT 21
66960: ST_TO_ADDR
// hc_gallery :=  ;
66961: LD_ADDR_OWVAR 33
66965: PUSH
66966: LD_STRING 
66968: ST_TO_ADDR
// animal := CreateHuman ;
66969: LD_ADDR_VAR 0 12
66973: PUSH
66974: CALL_OW 44
66978: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66979: LD_VAR 0 12
66983: PPUSH
66984: LD_VAR 0 8
66988: PPUSH
66989: LD_INT 0
66991: PPUSH
66992: CALL 69064 0 3
// end ;
66996: GO 66950
66998: POP
66999: POP
// if birds then
67000: LD_VAR 0 1
67004: IFFALSE 67071
// for i = 1 to birds do
67006: LD_ADDR_VAR 0 11
67010: PUSH
67011: DOUBLE
67012: LD_INT 1
67014: DEC
67015: ST_TO_ADDR
67016: LD_VAR 0 1
67020: PUSH
67021: FOR_TO
67022: IFFALSE 67069
// begin hc_class = 18 ;
67024: LD_ADDR_OWVAR 28
67028: PUSH
67029: LD_INT 18
67031: ST_TO_ADDR
// hc_gallery =  ;
67032: LD_ADDR_OWVAR 33
67036: PUSH
67037: LD_STRING 
67039: ST_TO_ADDR
// animal := CreateHuman ;
67040: LD_ADDR_VAR 0 12
67044: PUSH
67045: CALL_OW 44
67049: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67050: LD_VAR 0 12
67054: PPUSH
67055: LD_VAR 0 8
67059: PPUSH
67060: LD_INT 0
67062: PPUSH
67063: CALL 69064 0 3
// end ;
67067: GO 67021
67069: POP
67070: POP
// if tigers then
67071: LD_VAR 0 2
67075: IFFALSE 67159
// for i = 1 to tigers do
67077: LD_ADDR_VAR 0 11
67081: PUSH
67082: DOUBLE
67083: LD_INT 1
67085: DEC
67086: ST_TO_ADDR
67087: LD_VAR 0 2
67091: PUSH
67092: FOR_TO
67093: IFFALSE 67157
// begin hc_class = class_tiger ;
67095: LD_ADDR_OWVAR 28
67099: PUSH
67100: LD_INT 14
67102: ST_TO_ADDR
// hc_gallery =  ;
67103: LD_ADDR_OWVAR 33
67107: PUSH
67108: LD_STRING 
67110: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
67111: LD_ADDR_OWVAR 35
67115: PUSH
67116: LD_INT 7
67118: NEG
67119: PPUSH
67120: LD_INT 7
67122: PPUSH
67123: CALL_OW 12
67127: ST_TO_ADDR
// animal := CreateHuman ;
67128: LD_ADDR_VAR 0 12
67132: PUSH
67133: CALL_OW 44
67137: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67138: LD_VAR 0 12
67142: PPUSH
67143: LD_VAR 0 8
67147: PPUSH
67148: LD_INT 0
67150: PPUSH
67151: CALL 69064 0 3
// end ;
67155: GO 67092
67157: POP
67158: POP
// if apemans then
67159: LD_VAR 0 3
67163: IFFALSE 67286
// for i = 1 to apemans do
67165: LD_ADDR_VAR 0 11
67169: PUSH
67170: DOUBLE
67171: LD_INT 1
67173: DEC
67174: ST_TO_ADDR
67175: LD_VAR 0 3
67179: PUSH
67180: FOR_TO
67181: IFFALSE 67284
// begin hc_class = class_apeman ;
67183: LD_ADDR_OWVAR 28
67187: PUSH
67188: LD_INT 12
67190: ST_TO_ADDR
// hc_gallery =  ;
67191: LD_ADDR_OWVAR 33
67195: PUSH
67196: LD_STRING 
67198: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
67199: LD_ADDR_OWVAR 35
67203: PUSH
67204: LD_INT 2
67206: NEG
67207: PPUSH
67208: LD_INT 2
67210: PPUSH
67211: CALL_OW 12
67215: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
67216: LD_ADDR_OWVAR 31
67220: PUSH
67221: LD_INT 1
67223: PPUSH
67224: LD_INT 3
67226: PPUSH
67227: CALL_OW 12
67231: PUSH
67232: LD_INT 1
67234: PPUSH
67235: LD_INT 3
67237: PPUSH
67238: CALL_OW 12
67242: PUSH
67243: LD_INT 0
67245: PUSH
67246: LD_INT 0
67248: PUSH
67249: EMPTY
67250: LIST
67251: LIST
67252: LIST
67253: LIST
67254: ST_TO_ADDR
// animal := CreateHuman ;
67255: LD_ADDR_VAR 0 12
67259: PUSH
67260: CALL_OW 44
67264: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67265: LD_VAR 0 12
67269: PPUSH
67270: LD_VAR 0 8
67274: PPUSH
67275: LD_INT 0
67277: PPUSH
67278: CALL 69064 0 3
// end ;
67282: GO 67180
67284: POP
67285: POP
// if enchidnas then
67286: LD_VAR 0 4
67290: IFFALSE 67357
// for i = 1 to enchidnas do
67292: LD_ADDR_VAR 0 11
67296: PUSH
67297: DOUBLE
67298: LD_INT 1
67300: DEC
67301: ST_TO_ADDR
67302: LD_VAR 0 4
67306: PUSH
67307: FOR_TO
67308: IFFALSE 67355
// begin hc_class = 13 ;
67310: LD_ADDR_OWVAR 28
67314: PUSH
67315: LD_INT 13
67317: ST_TO_ADDR
// hc_gallery =  ;
67318: LD_ADDR_OWVAR 33
67322: PUSH
67323: LD_STRING 
67325: ST_TO_ADDR
// animal := CreateHuman ;
67326: LD_ADDR_VAR 0 12
67330: PUSH
67331: CALL_OW 44
67335: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67336: LD_VAR 0 12
67340: PPUSH
67341: LD_VAR 0 8
67345: PPUSH
67346: LD_INT 0
67348: PPUSH
67349: CALL 69064 0 3
// end ;
67353: GO 67307
67355: POP
67356: POP
// if fishes then
67357: LD_VAR 0 7
67361: IFFALSE 67428
// for i = 1 to fishes do
67363: LD_ADDR_VAR 0 11
67367: PUSH
67368: DOUBLE
67369: LD_INT 1
67371: DEC
67372: ST_TO_ADDR
67373: LD_VAR 0 7
67377: PUSH
67378: FOR_TO
67379: IFFALSE 67426
// begin hc_class = 20 ;
67381: LD_ADDR_OWVAR 28
67385: PUSH
67386: LD_INT 20
67388: ST_TO_ADDR
// hc_gallery =  ;
67389: LD_ADDR_OWVAR 33
67393: PUSH
67394: LD_STRING 
67396: ST_TO_ADDR
// animal := CreateHuman ;
67397: LD_ADDR_VAR 0 12
67401: PUSH
67402: CALL_OW 44
67406: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
67407: LD_VAR 0 12
67411: PPUSH
67412: LD_VAR 0 9
67416: PPUSH
67417: LD_INT 0
67419: PPUSH
67420: CALL 69064 0 3
// end ;
67424: GO 67378
67426: POP
67427: POP
// end ;
67428: LD_VAR 0 10
67432: RET
// export function WantHeal ( sci , unit ) ; begin
67433: LD_INT 0
67435: PPUSH
// if GetTaskList ( sci ) > 0 then
67436: LD_VAR 0 1
67440: PPUSH
67441: CALL_OW 437
67445: PUSH
67446: LD_INT 0
67448: GREATER
67449: IFFALSE 67519
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
67451: LD_VAR 0 1
67455: PPUSH
67456: CALL_OW 437
67460: PUSH
67461: LD_INT 1
67463: ARRAY
67464: PUSH
67465: LD_INT 1
67467: ARRAY
67468: PUSH
67469: LD_STRING l
67471: EQUAL
67472: PUSH
67473: LD_VAR 0 1
67477: PPUSH
67478: CALL_OW 437
67482: PUSH
67483: LD_INT 1
67485: ARRAY
67486: PUSH
67487: LD_INT 4
67489: ARRAY
67490: PUSH
67491: LD_VAR 0 2
67495: EQUAL
67496: AND
67497: IFFALSE 67509
// result := true else
67499: LD_ADDR_VAR 0 3
67503: PUSH
67504: LD_INT 1
67506: ST_TO_ADDR
67507: GO 67517
// result := false ;
67509: LD_ADDR_VAR 0 3
67513: PUSH
67514: LD_INT 0
67516: ST_TO_ADDR
// end else
67517: GO 67527
// result := false ;
67519: LD_ADDR_VAR 0 3
67523: PUSH
67524: LD_INT 0
67526: ST_TO_ADDR
// end ;
67527: LD_VAR 0 3
67531: RET
// export function HealTarget ( sci ) ; begin
67532: LD_INT 0
67534: PPUSH
// if not sci then
67535: LD_VAR 0 1
67539: NOT
67540: IFFALSE 67544
// exit ;
67542: GO 67609
// result := 0 ;
67544: LD_ADDR_VAR 0 2
67548: PUSH
67549: LD_INT 0
67551: ST_TO_ADDR
// if GetTaskList ( sci ) then
67552: LD_VAR 0 1
67556: PPUSH
67557: CALL_OW 437
67561: IFFALSE 67609
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
67563: LD_VAR 0 1
67567: PPUSH
67568: CALL_OW 437
67572: PUSH
67573: LD_INT 1
67575: ARRAY
67576: PUSH
67577: LD_INT 1
67579: ARRAY
67580: PUSH
67581: LD_STRING l
67583: EQUAL
67584: IFFALSE 67609
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
67586: LD_ADDR_VAR 0 2
67590: PUSH
67591: LD_VAR 0 1
67595: PPUSH
67596: CALL_OW 437
67600: PUSH
67601: LD_INT 1
67603: ARRAY
67604: PUSH
67605: LD_INT 4
67607: ARRAY
67608: ST_TO_ADDR
// end ;
67609: LD_VAR 0 2
67613: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
67614: LD_INT 0
67616: PPUSH
67617: PPUSH
67618: PPUSH
67619: PPUSH
// if not base_units then
67620: LD_VAR 0 1
67624: NOT
67625: IFFALSE 67629
// exit ;
67627: GO 67716
// result := false ;
67629: LD_ADDR_VAR 0 2
67633: PUSH
67634: LD_INT 0
67636: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
67637: LD_ADDR_VAR 0 5
67641: PUSH
67642: LD_VAR 0 1
67646: PPUSH
67647: LD_INT 21
67649: PUSH
67650: LD_INT 3
67652: PUSH
67653: EMPTY
67654: LIST
67655: LIST
67656: PPUSH
67657: CALL_OW 72
67661: ST_TO_ADDR
// if not tmp then
67662: LD_VAR 0 5
67666: NOT
67667: IFFALSE 67671
// exit ;
67669: GO 67716
// for i in tmp do
67671: LD_ADDR_VAR 0 3
67675: PUSH
67676: LD_VAR 0 5
67680: PUSH
67681: FOR_IN
67682: IFFALSE 67714
// begin result := EnemyInRange ( i , 22 ) ;
67684: LD_ADDR_VAR 0 2
67688: PUSH
67689: LD_VAR 0 3
67693: PPUSH
67694: LD_INT 22
67696: PPUSH
67697: CALL 65329 0 2
67701: ST_TO_ADDR
// if result then
67702: LD_VAR 0 2
67706: IFFALSE 67712
// exit ;
67708: POP
67709: POP
67710: GO 67716
// end ;
67712: GO 67681
67714: POP
67715: POP
// end ;
67716: LD_VAR 0 2
67720: RET
// export function FilterByTag ( units , tag ) ; begin
67721: LD_INT 0
67723: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
67724: LD_ADDR_VAR 0 3
67728: PUSH
67729: LD_VAR 0 1
67733: PPUSH
67734: LD_INT 120
67736: PUSH
67737: LD_VAR 0 2
67741: PUSH
67742: EMPTY
67743: LIST
67744: LIST
67745: PPUSH
67746: CALL_OW 72
67750: ST_TO_ADDR
// end ;
67751: LD_VAR 0 3
67755: RET
// export function IsDriver ( un ) ; begin
67756: LD_INT 0
67758: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67759: LD_ADDR_VAR 0 2
67763: PUSH
67764: LD_VAR 0 1
67768: PUSH
67769: LD_INT 55
67771: PUSH
67772: EMPTY
67773: LIST
67774: PPUSH
67775: CALL_OW 69
67779: IN
67780: ST_TO_ADDR
// end ;
67781: LD_VAR 0 2
67785: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67786: LD_INT 0
67788: PPUSH
67789: PPUSH
// list := [ ] ;
67790: LD_ADDR_VAR 0 5
67794: PUSH
67795: EMPTY
67796: ST_TO_ADDR
// case d of 0 :
67797: LD_VAR 0 3
67801: PUSH
67802: LD_INT 0
67804: DOUBLE
67805: EQUAL
67806: IFTRUE 67810
67808: GO 67943
67810: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67811: LD_ADDR_VAR 0 5
67815: PUSH
67816: LD_VAR 0 1
67820: PUSH
67821: LD_INT 4
67823: MINUS
67824: PUSH
67825: LD_VAR 0 2
67829: PUSH
67830: LD_INT 4
67832: MINUS
67833: PUSH
67834: LD_INT 2
67836: PUSH
67837: EMPTY
67838: LIST
67839: LIST
67840: LIST
67841: PUSH
67842: LD_VAR 0 1
67846: PUSH
67847: LD_INT 3
67849: MINUS
67850: PUSH
67851: LD_VAR 0 2
67855: PUSH
67856: LD_INT 1
67858: PUSH
67859: EMPTY
67860: LIST
67861: LIST
67862: LIST
67863: PUSH
67864: LD_VAR 0 1
67868: PUSH
67869: LD_INT 4
67871: PLUS
67872: PUSH
67873: LD_VAR 0 2
67877: PUSH
67878: LD_INT 4
67880: PUSH
67881: EMPTY
67882: LIST
67883: LIST
67884: LIST
67885: PUSH
67886: LD_VAR 0 1
67890: PUSH
67891: LD_INT 3
67893: PLUS
67894: PUSH
67895: LD_VAR 0 2
67899: PUSH
67900: LD_INT 3
67902: PLUS
67903: PUSH
67904: LD_INT 5
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: LIST
67911: PUSH
67912: LD_VAR 0 1
67916: PUSH
67917: LD_VAR 0 2
67921: PUSH
67922: LD_INT 4
67924: PLUS
67925: PUSH
67926: LD_INT 0
67928: PUSH
67929: EMPTY
67930: LIST
67931: LIST
67932: LIST
67933: PUSH
67934: EMPTY
67935: LIST
67936: LIST
67937: LIST
67938: LIST
67939: LIST
67940: ST_TO_ADDR
// end ; 1 :
67941: GO 68641
67943: LD_INT 1
67945: DOUBLE
67946: EQUAL
67947: IFTRUE 67951
67949: GO 68084
67951: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
67952: LD_ADDR_VAR 0 5
67956: PUSH
67957: LD_VAR 0 1
67961: PUSH
67962: LD_VAR 0 2
67966: PUSH
67967: LD_INT 4
67969: MINUS
67970: PUSH
67971: LD_INT 3
67973: PUSH
67974: EMPTY
67975: LIST
67976: LIST
67977: LIST
67978: PUSH
67979: LD_VAR 0 1
67983: PUSH
67984: LD_INT 3
67986: MINUS
67987: PUSH
67988: LD_VAR 0 2
67992: PUSH
67993: LD_INT 3
67995: MINUS
67996: PUSH
67997: LD_INT 2
67999: PUSH
68000: EMPTY
68001: LIST
68002: LIST
68003: LIST
68004: PUSH
68005: LD_VAR 0 1
68009: PUSH
68010: LD_INT 4
68012: MINUS
68013: PUSH
68014: LD_VAR 0 2
68018: PUSH
68019: LD_INT 1
68021: PUSH
68022: EMPTY
68023: LIST
68024: LIST
68025: LIST
68026: PUSH
68027: LD_VAR 0 1
68031: PUSH
68032: LD_VAR 0 2
68036: PUSH
68037: LD_INT 3
68039: PLUS
68040: PUSH
68041: LD_INT 0
68043: PUSH
68044: EMPTY
68045: LIST
68046: LIST
68047: LIST
68048: PUSH
68049: LD_VAR 0 1
68053: PUSH
68054: LD_INT 4
68056: PLUS
68057: PUSH
68058: LD_VAR 0 2
68062: PUSH
68063: LD_INT 4
68065: PLUS
68066: PUSH
68067: LD_INT 5
68069: PUSH
68070: EMPTY
68071: LIST
68072: LIST
68073: LIST
68074: PUSH
68075: EMPTY
68076: LIST
68077: LIST
68078: LIST
68079: LIST
68080: LIST
68081: ST_TO_ADDR
// end ; 2 :
68082: GO 68641
68084: LD_INT 2
68086: DOUBLE
68087: EQUAL
68088: IFTRUE 68092
68090: GO 68221
68092: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
68093: LD_ADDR_VAR 0 5
68097: PUSH
68098: LD_VAR 0 1
68102: PUSH
68103: LD_VAR 0 2
68107: PUSH
68108: LD_INT 3
68110: MINUS
68111: PUSH
68112: LD_INT 3
68114: PUSH
68115: EMPTY
68116: LIST
68117: LIST
68118: LIST
68119: PUSH
68120: LD_VAR 0 1
68124: PUSH
68125: LD_INT 4
68127: PLUS
68128: PUSH
68129: LD_VAR 0 2
68133: PUSH
68134: LD_INT 4
68136: PUSH
68137: EMPTY
68138: LIST
68139: LIST
68140: LIST
68141: PUSH
68142: LD_VAR 0 1
68146: PUSH
68147: LD_VAR 0 2
68151: PUSH
68152: LD_INT 4
68154: PLUS
68155: PUSH
68156: LD_INT 0
68158: PUSH
68159: EMPTY
68160: LIST
68161: LIST
68162: LIST
68163: PUSH
68164: LD_VAR 0 1
68168: PUSH
68169: LD_INT 3
68171: MINUS
68172: PUSH
68173: LD_VAR 0 2
68177: PUSH
68178: LD_INT 1
68180: PUSH
68181: EMPTY
68182: LIST
68183: LIST
68184: LIST
68185: PUSH
68186: LD_VAR 0 1
68190: PUSH
68191: LD_INT 4
68193: MINUS
68194: PUSH
68195: LD_VAR 0 2
68199: PUSH
68200: LD_INT 4
68202: MINUS
68203: PUSH
68204: LD_INT 2
68206: PUSH
68207: EMPTY
68208: LIST
68209: LIST
68210: LIST
68211: PUSH
68212: EMPTY
68213: LIST
68214: LIST
68215: LIST
68216: LIST
68217: LIST
68218: ST_TO_ADDR
// end ; 3 :
68219: GO 68641
68221: LD_INT 3
68223: DOUBLE
68224: EQUAL
68225: IFTRUE 68229
68227: GO 68362
68229: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
68230: LD_ADDR_VAR 0 5
68234: PUSH
68235: LD_VAR 0 1
68239: PUSH
68240: LD_INT 3
68242: PLUS
68243: PUSH
68244: LD_VAR 0 2
68248: PUSH
68249: LD_INT 4
68251: PUSH
68252: EMPTY
68253: LIST
68254: LIST
68255: LIST
68256: PUSH
68257: LD_VAR 0 1
68261: PUSH
68262: LD_INT 4
68264: PLUS
68265: PUSH
68266: LD_VAR 0 2
68270: PUSH
68271: LD_INT 4
68273: PLUS
68274: PUSH
68275: LD_INT 5
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: LIST
68282: PUSH
68283: LD_VAR 0 1
68287: PUSH
68288: LD_INT 4
68290: MINUS
68291: PUSH
68292: LD_VAR 0 2
68296: PUSH
68297: LD_INT 1
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: LIST
68304: PUSH
68305: LD_VAR 0 1
68309: PUSH
68310: LD_VAR 0 2
68314: PUSH
68315: LD_INT 4
68317: MINUS
68318: PUSH
68319: LD_INT 3
68321: PUSH
68322: EMPTY
68323: LIST
68324: LIST
68325: LIST
68326: PUSH
68327: LD_VAR 0 1
68331: PUSH
68332: LD_INT 3
68334: MINUS
68335: PUSH
68336: LD_VAR 0 2
68340: PUSH
68341: LD_INT 3
68343: MINUS
68344: PUSH
68345: LD_INT 2
68347: PUSH
68348: EMPTY
68349: LIST
68350: LIST
68351: LIST
68352: PUSH
68353: EMPTY
68354: LIST
68355: LIST
68356: LIST
68357: LIST
68358: LIST
68359: ST_TO_ADDR
// end ; 4 :
68360: GO 68641
68362: LD_INT 4
68364: DOUBLE
68365: EQUAL
68366: IFTRUE 68370
68368: GO 68503
68370: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
68371: LD_ADDR_VAR 0 5
68375: PUSH
68376: LD_VAR 0 1
68380: PUSH
68381: LD_VAR 0 2
68385: PUSH
68386: LD_INT 4
68388: PLUS
68389: PUSH
68390: LD_INT 0
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: LIST
68397: PUSH
68398: LD_VAR 0 1
68402: PUSH
68403: LD_INT 3
68405: PLUS
68406: PUSH
68407: LD_VAR 0 2
68411: PUSH
68412: LD_INT 3
68414: PLUS
68415: PUSH
68416: LD_INT 5
68418: PUSH
68419: EMPTY
68420: LIST
68421: LIST
68422: LIST
68423: PUSH
68424: LD_VAR 0 1
68428: PUSH
68429: LD_INT 4
68431: PLUS
68432: PUSH
68433: LD_VAR 0 2
68437: PUSH
68438: LD_INT 4
68440: PUSH
68441: EMPTY
68442: LIST
68443: LIST
68444: LIST
68445: PUSH
68446: LD_VAR 0 1
68450: PUSH
68451: LD_VAR 0 2
68455: PUSH
68456: LD_INT 3
68458: MINUS
68459: PUSH
68460: LD_INT 3
68462: PUSH
68463: EMPTY
68464: LIST
68465: LIST
68466: LIST
68467: PUSH
68468: LD_VAR 0 1
68472: PUSH
68473: LD_INT 4
68475: MINUS
68476: PUSH
68477: LD_VAR 0 2
68481: PUSH
68482: LD_INT 4
68484: MINUS
68485: PUSH
68486: LD_INT 2
68488: PUSH
68489: EMPTY
68490: LIST
68491: LIST
68492: LIST
68493: PUSH
68494: EMPTY
68495: LIST
68496: LIST
68497: LIST
68498: LIST
68499: LIST
68500: ST_TO_ADDR
// end ; 5 :
68501: GO 68641
68503: LD_INT 5
68505: DOUBLE
68506: EQUAL
68507: IFTRUE 68511
68509: GO 68640
68511: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
68512: LD_ADDR_VAR 0 5
68516: PUSH
68517: LD_VAR 0 1
68521: PUSH
68522: LD_INT 4
68524: MINUS
68525: PUSH
68526: LD_VAR 0 2
68530: PUSH
68531: LD_INT 1
68533: PUSH
68534: EMPTY
68535: LIST
68536: LIST
68537: LIST
68538: PUSH
68539: LD_VAR 0 1
68543: PUSH
68544: LD_VAR 0 2
68548: PUSH
68549: LD_INT 4
68551: MINUS
68552: PUSH
68553: LD_INT 3
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: LIST
68560: PUSH
68561: LD_VAR 0 1
68565: PUSH
68566: LD_INT 4
68568: PLUS
68569: PUSH
68570: LD_VAR 0 2
68574: PUSH
68575: LD_INT 4
68577: PLUS
68578: PUSH
68579: LD_INT 5
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: LIST
68586: PUSH
68587: LD_VAR 0 1
68591: PUSH
68592: LD_INT 3
68594: PLUS
68595: PUSH
68596: LD_VAR 0 2
68600: PUSH
68601: LD_INT 4
68603: PUSH
68604: EMPTY
68605: LIST
68606: LIST
68607: LIST
68608: PUSH
68609: LD_VAR 0 1
68613: PUSH
68614: LD_VAR 0 2
68618: PUSH
68619: LD_INT 3
68621: PLUS
68622: PUSH
68623: LD_INT 0
68625: PUSH
68626: EMPTY
68627: LIST
68628: LIST
68629: LIST
68630: PUSH
68631: EMPTY
68632: LIST
68633: LIST
68634: LIST
68635: LIST
68636: LIST
68637: ST_TO_ADDR
// end ; end ;
68638: GO 68641
68640: POP
// result := list ;
68641: LD_ADDR_VAR 0 4
68645: PUSH
68646: LD_VAR 0 5
68650: ST_TO_ADDR
// end ;
68651: LD_VAR 0 4
68655: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68656: LD_INT 0
68658: PPUSH
68659: PPUSH
68660: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68661: LD_VAR 0 1
68665: NOT
68666: PUSH
68667: LD_VAR 0 2
68671: PUSH
68672: LD_INT 1
68674: PUSH
68675: LD_INT 2
68677: PUSH
68678: LD_INT 3
68680: PUSH
68681: LD_INT 4
68683: PUSH
68684: EMPTY
68685: LIST
68686: LIST
68687: LIST
68688: LIST
68689: IN
68690: NOT
68691: OR
68692: IFFALSE 68696
// exit ;
68694: GO 68788
// tmp := [ ] ;
68696: LD_ADDR_VAR 0 5
68700: PUSH
68701: EMPTY
68702: ST_TO_ADDR
// for i in units do
68703: LD_ADDR_VAR 0 4
68707: PUSH
68708: LD_VAR 0 1
68712: PUSH
68713: FOR_IN
68714: IFFALSE 68757
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
68716: LD_ADDR_VAR 0 5
68720: PUSH
68721: LD_VAR 0 5
68725: PPUSH
68726: LD_VAR 0 5
68730: PUSH
68731: LD_INT 1
68733: PLUS
68734: PPUSH
68735: LD_VAR 0 4
68739: PPUSH
68740: LD_VAR 0 2
68744: PPUSH
68745: CALL_OW 259
68749: PPUSH
68750: CALL_OW 2
68754: ST_TO_ADDR
68755: GO 68713
68757: POP
68758: POP
// if not tmp then
68759: LD_VAR 0 5
68763: NOT
68764: IFFALSE 68768
// exit ;
68766: GO 68788
// result := SortListByListDesc ( units , tmp ) ;
68768: LD_ADDR_VAR 0 3
68772: PUSH
68773: LD_VAR 0 1
68777: PPUSH
68778: LD_VAR 0 5
68782: PPUSH
68783: CALL_OW 77
68787: ST_TO_ADDR
// end ;
68788: LD_VAR 0 3
68792: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68793: LD_INT 0
68795: PPUSH
68796: PPUSH
68797: PPUSH
// result := false ;
68798: LD_ADDR_VAR 0 3
68802: PUSH
68803: LD_INT 0
68805: ST_TO_ADDR
// x := GetX ( building ) ;
68806: LD_ADDR_VAR 0 4
68810: PUSH
68811: LD_VAR 0 2
68815: PPUSH
68816: CALL_OW 250
68820: ST_TO_ADDR
// y := GetY ( building ) ;
68821: LD_ADDR_VAR 0 5
68825: PUSH
68826: LD_VAR 0 2
68830: PPUSH
68831: CALL_OW 251
68835: ST_TO_ADDR
// if not building or not x or not y then
68836: LD_VAR 0 2
68840: NOT
68841: PUSH
68842: LD_VAR 0 4
68846: NOT
68847: OR
68848: PUSH
68849: LD_VAR 0 5
68853: NOT
68854: OR
68855: IFFALSE 68859
// exit ;
68857: GO 68951
// if GetTaskList ( unit ) then
68859: LD_VAR 0 1
68863: PPUSH
68864: CALL_OW 437
68868: IFFALSE 68951
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68870: LD_STRING e
68872: PUSH
68873: LD_VAR 0 1
68877: PPUSH
68878: CALL_OW 437
68882: PUSH
68883: LD_INT 1
68885: ARRAY
68886: PUSH
68887: LD_INT 1
68889: ARRAY
68890: EQUAL
68891: PUSH
68892: LD_VAR 0 4
68896: PUSH
68897: LD_VAR 0 1
68901: PPUSH
68902: CALL_OW 437
68906: PUSH
68907: LD_INT 1
68909: ARRAY
68910: PUSH
68911: LD_INT 2
68913: ARRAY
68914: EQUAL
68915: AND
68916: PUSH
68917: LD_VAR 0 5
68921: PUSH
68922: LD_VAR 0 1
68926: PPUSH
68927: CALL_OW 437
68931: PUSH
68932: LD_INT 1
68934: ARRAY
68935: PUSH
68936: LD_INT 3
68938: ARRAY
68939: EQUAL
68940: AND
68941: IFFALSE 68951
// result := true end ;
68943: LD_ADDR_VAR 0 3
68947: PUSH
68948: LD_INT 1
68950: ST_TO_ADDR
// end ;
68951: LD_VAR 0 3
68955: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
68956: LD_INT 0
68958: PPUSH
// result := false ;
68959: LD_ADDR_VAR 0 4
68963: PUSH
68964: LD_INT 0
68966: ST_TO_ADDR
// if GetTaskList ( unit ) then
68967: LD_VAR 0 1
68971: PPUSH
68972: CALL_OW 437
68976: IFFALSE 69059
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68978: LD_STRING M
68980: PUSH
68981: LD_VAR 0 1
68985: PPUSH
68986: CALL_OW 437
68990: PUSH
68991: LD_INT 1
68993: ARRAY
68994: PUSH
68995: LD_INT 1
68997: ARRAY
68998: EQUAL
68999: PUSH
69000: LD_VAR 0 2
69004: PUSH
69005: LD_VAR 0 1
69009: PPUSH
69010: CALL_OW 437
69014: PUSH
69015: LD_INT 1
69017: ARRAY
69018: PUSH
69019: LD_INT 2
69021: ARRAY
69022: EQUAL
69023: AND
69024: PUSH
69025: LD_VAR 0 3
69029: PUSH
69030: LD_VAR 0 1
69034: PPUSH
69035: CALL_OW 437
69039: PUSH
69040: LD_INT 1
69042: ARRAY
69043: PUSH
69044: LD_INT 3
69046: ARRAY
69047: EQUAL
69048: AND
69049: IFFALSE 69059
// result := true ;
69051: LD_ADDR_VAR 0 4
69055: PUSH
69056: LD_INT 1
69058: ST_TO_ADDR
// end ; end ;
69059: LD_VAR 0 4
69063: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
69064: LD_INT 0
69066: PPUSH
69067: PPUSH
69068: PPUSH
69069: PPUSH
// if not unit or not area then
69070: LD_VAR 0 1
69074: NOT
69075: PUSH
69076: LD_VAR 0 2
69080: NOT
69081: OR
69082: IFFALSE 69086
// exit ;
69084: GO 69250
// tmp := AreaToList ( area , i ) ;
69086: LD_ADDR_VAR 0 6
69090: PUSH
69091: LD_VAR 0 2
69095: PPUSH
69096: LD_VAR 0 5
69100: PPUSH
69101: CALL_OW 517
69105: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
69106: LD_ADDR_VAR 0 5
69110: PUSH
69111: DOUBLE
69112: LD_INT 1
69114: DEC
69115: ST_TO_ADDR
69116: LD_VAR 0 6
69120: PUSH
69121: LD_INT 1
69123: ARRAY
69124: PUSH
69125: FOR_TO
69126: IFFALSE 69248
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
69128: LD_ADDR_VAR 0 7
69132: PUSH
69133: LD_VAR 0 6
69137: PUSH
69138: LD_INT 1
69140: ARRAY
69141: PUSH
69142: LD_VAR 0 5
69146: ARRAY
69147: PUSH
69148: LD_VAR 0 6
69152: PUSH
69153: LD_INT 2
69155: ARRAY
69156: PUSH
69157: LD_VAR 0 5
69161: ARRAY
69162: PUSH
69163: EMPTY
69164: LIST
69165: LIST
69166: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
69167: LD_VAR 0 7
69171: PUSH
69172: LD_INT 1
69174: ARRAY
69175: PPUSH
69176: LD_VAR 0 7
69180: PUSH
69181: LD_INT 2
69183: ARRAY
69184: PPUSH
69185: CALL_OW 428
69189: PUSH
69190: LD_INT 0
69192: EQUAL
69193: IFFALSE 69246
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
69195: LD_VAR 0 1
69199: PPUSH
69200: LD_VAR 0 7
69204: PUSH
69205: LD_INT 1
69207: ARRAY
69208: PPUSH
69209: LD_VAR 0 7
69213: PUSH
69214: LD_INT 2
69216: ARRAY
69217: PPUSH
69218: LD_VAR 0 3
69222: PPUSH
69223: CALL_OW 48
// result := IsPlaced ( unit ) ;
69227: LD_ADDR_VAR 0 4
69231: PUSH
69232: LD_VAR 0 1
69236: PPUSH
69237: CALL_OW 305
69241: ST_TO_ADDR
// exit ;
69242: POP
69243: POP
69244: GO 69250
// end ; end ;
69246: GO 69125
69248: POP
69249: POP
// end ;
69250: LD_VAR 0 4
69254: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
69255: LD_INT 0
69257: PPUSH
69258: PPUSH
69259: PPUSH
// if not side or side > 8 then
69260: LD_VAR 0 1
69264: NOT
69265: PUSH
69266: LD_VAR 0 1
69270: PUSH
69271: LD_INT 8
69273: GREATER
69274: OR
69275: IFFALSE 69279
// exit ;
69277: GO 69466
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
69279: LD_ADDR_VAR 0 4
69283: PUSH
69284: LD_INT 22
69286: PUSH
69287: LD_VAR 0 1
69291: PUSH
69292: EMPTY
69293: LIST
69294: LIST
69295: PUSH
69296: LD_INT 21
69298: PUSH
69299: LD_INT 3
69301: PUSH
69302: EMPTY
69303: LIST
69304: LIST
69305: PUSH
69306: EMPTY
69307: LIST
69308: LIST
69309: PPUSH
69310: CALL_OW 69
69314: ST_TO_ADDR
// if not tmp then
69315: LD_VAR 0 4
69319: NOT
69320: IFFALSE 69324
// exit ;
69322: GO 69466
// enable_addtolog := true ;
69324: LD_ADDR_OWVAR 81
69328: PUSH
69329: LD_INT 1
69331: ST_TO_ADDR
// AddToLog ( [ ) ;
69332: LD_STRING [
69334: PPUSH
69335: CALL_OW 561
// for i in tmp do
69339: LD_ADDR_VAR 0 3
69343: PUSH
69344: LD_VAR 0 4
69348: PUSH
69349: FOR_IN
69350: IFFALSE 69457
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
69352: LD_STRING [
69354: PUSH
69355: LD_VAR 0 3
69359: PPUSH
69360: CALL_OW 266
69364: STR
69365: PUSH
69366: LD_STRING , 
69368: STR
69369: PUSH
69370: LD_VAR 0 3
69374: PPUSH
69375: CALL_OW 250
69379: STR
69380: PUSH
69381: LD_STRING , 
69383: STR
69384: PUSH
69385: LD_VAR 0 3
69389: PPUSH
69390: CALL_OW 251
69394: STR
69395: PUSH
69396: LD_STRING , 
69398: STR
69399: PUSH
69400: LD_VAR 0 3
69404: PPUSH
69405: CALL_OW 254
69409: STR
69410: PUSH
69411: LD_STRING , 
69413: STR
69414: PUSH
69415: LD_VAR 0 3
69419: PPUSH
69420: LD_INT 1
69422: PPUSH
69423: CALL_OW 268
69427: STR
69428: PUSH
69429: LD_STRING , 
69431: STR
69432: PUSH
69433: LD_VAR 0 3
69437: PPUSH
69438: LD_INT 2
69440: PPUSH
69441: CALL_OW 268
69445: STR
69446: PUSH
69447: LD_STRING ],
69449: STR
69450: PPUSH
69451: CALL_OW 561
// end ;
69455: GO 69349
69457: POP
69458: POP
// AddToLog ( ]; ) ;
69459: LD_STRING ];
69461: PPUSH
69462: CALL_OW 561
// end ;
69466: LD_VAR 0 2
69470: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
69471: LD_INT 0
69473: PPUSH
69474: PPUSH
69475: PPUSH
69476: PPUSH
69477: PPUSH
// if not area or not rate or not max then
69478: LD_VAR 0 1
69482: NOT
69483: PUSH
69484: LD_VAR 0 2
69488: NOT
69489: OR
69490: PUSH
69491: LD_VAR 0 4
69495: NOT
69496: OR
69497: IFFALSE 69501
// exit ;
69499: GO 69690
// while 1 do
69501: LD_INT 1
69503: IFFALSE 69690
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
69505: LD_ADDR_VAR 0 9
69509: PUSH
69510: LD_VAR 0 1
69514: PPUSH
69515: LD_INT 1
69517: PPUSH
69518: CALL_OW 287
69522: PUSH
69523: LD_INT 10
69525: MUL
69526: ST_TO_ADDR
// r := rate / 10 ;
69527: LD_ADDR_VAR 0 7
69531: PUSH
69532: LD_VAR 0 2
69536: PUSH
69537: LD_INT 10
69539: DIVREAL
69540: ST_TO_ADDR
// time := 1 1$00 ;
69541: LD_ADDR_VAR 0 8
69545: PUSH
69546: LD_INT 2100
69548: ST_TO_ADDR
// if amount < min then
69549: LD_VAR 0 9
69553: PUSH
69554: LD_VAR 0 3
69558: LESS
69559: IFFALSE 69577
// r := r * 2 else
69561: LD_ADDR_VAR 0 7
69565: PUSH
69566: LD_VAR 0 7
69570: PUSH
69571: LD_INT 2
69573: MUL
69574: ST_TO_ADDR
69575: GO 69603
// if amount > max then
69577: LD_VAR 0 9
69581: PUSH
69582: LD_VAR 0 4
69586: GREATER
69587: IFFALSE 69603
// r := r / 2 ;
69589: LD_ADDR_VAR 0 7
69593: PUSH
69594: LD_VAR 0 7
69598: PUSH
69599: LD_INT 2
69601: DIVREAL
69602: ST_TO_ADDR
// time := time / r ;
69603: LD_ADDR_VAR 0 8
69607: PUSH
69608: LD_VAR 0 8
69612: PUSH
69613: LD_VAR 0 7
69617: DIVREAL
69618: ST_TO_ADDR
// if time < 0 then
69619: LD_VAR 0 8
69623: PUSH
69624: LD_INT 0
69626: LESS
69627: IFFALSE 69644
// time := time * - 1 ;
69629: LD_ADDR_VAR 0 8
69633: PUSH
69634: LD_VAR 0 8
69638: PUSH
69639: LD_INT 1
69641: NEG
69642: MUL
69643: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
69644: LD_VAR 0 8
69648: PUSH
69649: LD_INT 35
69651: PPUSH
69652: LD_INT 875
69654: PPUSH
69655: CALL_OW 12
69659: PLUS
69660: PPUSH
69661: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69665: LD_INT 1
69667: PPUSH
69668: LD_INT 5
69670: PPUSH
69671: CALL_OW 12
69675: PPUSH
69676: LD_VAR 0 1
69680: PPUSH
69681: LD_INT 1
69683: PPUSH
69684: CALL_OW 55
// end ;
69688: GO 69501
// end ;
69690: LD_VAR 0 5
69694: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69695: LD_INT 0
69697: PPUSH
69698: PPUSH
69699: PPUSH
69700: PPUSH
69701: PPUSH
69702: PPUSH
69703: PPUSH
69704: PPUSH
// if not turrets or not factories then
69705: LD_VAR 0 1
69709: NOT
69710: PUSH
69711: LD_VAR 0 2
69715: NOT
69716: OR
69717: IFFALSE 69721
// exit ;
69719: GO 70028
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69721: LD_ADDR_VAR 0 10
69725: PUSH
69726: LD_INT 5
69728: PUSH
69729: LD_INT 6
69731: PUSH
69732: EMPTY
69733: LIST
69734: LIST
69735: PUSH
69736: LD_INT 2
69738: PUSH
69739: LD_INT 4
69741: PUSH
69742: EMPTY
69743: LIST
69744: LIST
69745: PUSH
69746: LD_INT 3
69748: PUSH
69749: LD_INT 5
69751: PUSH
69752: EMPTY
69753: LIST
69754: LIST
69755: PUSH
69756: EMPTY
69757: LIST
69758: LIST
69759: LIST
69760: PUSH
69761: LD_INT 24
69763: PUSH
69764: LD_INT 25
69766: PUSH
69767: EMPTY
69768: LIST
69769: LIST
69770: PUSH
69771: LD_INT 23
69773: PUSH
69774: LD_INT 27
69776: PUSH
69777: EMPTY
69778: LIST
69779: LIST
69780: PUSH
69781: EMPTY
69782: LIST
69783: LIST
69784: PUSH
69785: LD_INT 42
69787: PUSH
69788: LD_INT 43
69790: PUSH
69791: EMPTY
69792: LIST
69793: LIST
69794: PUSH
69795: LD_INT 44
69797: PUSH
69798: LD_INT 46
69800: PUSH
69801: EMPTY
69802: LIST
69803: LIST
69804: PUSH
69805: LD_INT 45
69807: PUSH
69808: LD_INT 47
69810: PUSH
69811: EMPTY
69812: LIST
69813: LIST
69814: PUSH
69815: EMPTY
69816: LIST
69817: LIST
69818: LIST
69819: PUSH
69820: EMPTY
69821: LIST
69822: LIST
69823: LIST
69824: ST_TO_ADDR
// result := [ ] ;
69825: LD_ADDR_VAR 0 3
69829: PUSH
69830: EMPTY
69831: ST_TO_ADDR
// for i in turrets do
69832: LD_ADDR_VAR 0 4
69836: PUSH
69837: LD_VAR 0 1
69841: PUSH
69842: FOR_IN
69843: IFFALSE 70026
// begin nat := GetNation ( i ) ;
69845: LD_ADDR_VAR 0 7
69849: PUSH
69850: LD_VAR 0 4
69854: PPUSH
69855: CALL_OW 248
69859: ST_TO_ADDR
// weapon := 0 ;
69860: LD_ADDR_VAR 0 8
69864: PUSH
69865: LD_INT 0
69867: ST_TO_ADDR
// if not nat then
69868: LD_VAR 0 7
69872: NOT
69873: IFFALSE 69877
// continue ;
69875: GO 69842
// for j in list [ nat ] do
69877: LD_ADDR_VAR 0 5
69881: PUSH
69882: LD_VAR 0 10
69886: PUSH
69887: LD_VAR 0 7
69891: ARRAY
69892: PUSH
69893: FOR_IN
69894: IFFALSE 69935
// if GetBWeapon ( i ) = j [ 1 ] then
69896: LD_VAR 0 4
69900: PPUSH
69901: CALL_OW 269
69905: PUSH
69906: LD_VAR 0 5
69910: PUSH
69911: LD_INT 1
69913: ARRAY
69914: EQUAL
69915: IFFALSE 69933
// begin weapon := j [ 2 ] ;
69917: LD_ADDR_VAR 0 8
69921: PUSH
69922: LD_VAR 0 5
69926: PUSH
69927: LD_INT 2
69929: ARRAY
69930: ST_TO_ADDR
// break ;
69931: GO 69935
// end ;
69933: GO 69893
69935: POP
69936: POP
// if not weapon then
69937: LD_VAR 0 8
69941: NOT
69942: IFFALSE 69946
// continue ;
69944: GO 69842
// for k in factories do
69946: LD_ADDR_VAR 0 6
69950: PUSH
69951: LD_VAR 0 2
69955: PUSH
69956: FOR_IN
69957: IFFALSE 70022
// begin weapons := AvailableWeaponList ( k ) ;
69959: LD_ADDR_VAR 0 9
69963: PUSH
69964: LD_VAR 0 6
69968: PPUSH
69969: CALL_OW 478
69973: ST_TO_ADDR
// if not weapons then
69974: LD_VAR 0 9
69978: NOT
69979: IFFALSE 69983
// continue ;
69981: GO 69956
// if weapon in weapons then
69983: LD_VAR 0 8
69987: PUSH
69988: LD_VAR 0 9
69992: IN
69993: IFFALSE 70020
// begin result := [ i , weapon ] ;
69995: LD_ADDR_VAR 0 3
69999: PUSH
70000: LD_VAR 0 4
70004: PUSH
70005: LD_VAR 0 8
70009: PUSH
70010: EMPTY
70011: LIST
70012: LIST
70013: ST_TO_ADDR
// exit ;
70014: POP
70015: POP
70016: POP
70017: POP
70018: GO 70028
// end ; end ;
70020: GO 69956
70022: POP
70023: POP
// end ;
70024: GO 69842
70026: POP
70027: POP
// end ;
70028: LD_VAR 0 3
70032: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
70033: LD_INT 0
70035: PPUSH
// if not side or side > 8 then
70036: LD_VAR 0 3
70040: NOT
70041: PUSH
70042: LD_VAR 0 3
70046: PUSH
70047: LD_INT 8
70049: GREATER
70050: OR
70051: IFFALSE 70055
// exit ;
70053: GO 70114
// if not range then
70055: LD_VAR 0 4
70059: NOT
70060: IFFALSE 70071
// range := - 12 ;
70062: LD_ADDR_VAR 0 4
70066: PUSH
70067: LD_INT 12
70069: NEG
70070: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
70071: LD_VAR 0 1
70075: PPUSH
70076: LD_VAR 0 2
70080: PPUSH
70081: LD_VAR 0 3
70085: PPUSH
70086: LD_VAR 0 4
70090: PPUSH
70091: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
70095: LD_VAR 0 1
70099: PPUSH
70100: LD_VAR 0 2
70104: PPUSH
70105: LD_VAR 0 3
70109: PPUSH
70110: CALL_OW 331
// end ;
70114: LD_VAR 0 5
70118: RET
// export function Video ( mode ) ; begin
70119: LD_INT 0
70121: PPUSH
// ingame_video = mode ;
70122: LD_ADDR_OWVAR 52
70126: PUSH
70127: LD_VAR 0 1
70131: ST_TO_ADDR
// interface_hidden = mode ;
70132: LD_ADDR_OWVAR 54
70136: PUSH
70137: LD_VAR 0 1
70141: ST_TO_ADDR
// end ;
70142: LD_VAR 0 2
70146: RET
// export function Join ( array , element ) ; begin
70147: LD_INT 0
70149: PPUSH
// result := Replace ( array , array + 1 , element ) ;
70150: LD_ADDR_VAR 0 3
70154: PUSH
70155: LD_VAR 0 1
70159: PPUSH
70160: LD_VAR 0 1
70164: PUSH
70165: LD_INT 1
70167: PLUS
70168: PPUSH
70169: LD_VAR 0 2
70173: PPUSH
70174: CALL_OW 1
70178: ST_TO_ADDR
// end ;
70179: LD_VAR 0 3
70183: RET
// export function JoinUnion ( array , element ) ; begin
70184: LD_INT 0
70186: PPUSH
// result := array union element ;
70187: LD_ADDR_VAR 0 3
70191: PUSH
70192: LD_VAR 0 1
70196: PUSH
70197: LD_VAR 0 2
70201: UNION
70202: ST_TO_ADDR
// end ;
70203: LD_VAR 0 3
70207: RET
// export function GetBehemoths ( side ) ; begin
70208: LD_INT 0
70210: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
70211: LD_ADDR_VAR 0 2
70215: PUSH
70216: LD_INT 22
70218: PUSH
70219: LD_VAR 0 1
70223: PUSH
70224: EMPTY
70225: LIST
70226: LIST
70227: PUSH
70228: LD_INT 31
70230: PUSH
70231: LD_INT 25
70233: PUSH
70234: EMPTY
70235: LIST
70236: LIST
70237: PUSH
70238: EMPTY
70239: LIST
70240: LIST
70241: PPUSH
70242: CALL_OW 69
70246: ST_TO_ADDR
// end ;
70247: LD_VAR 0 2
70251: RET
// export function Shuffle ( array ) ; var i , index ; begin
70252: LD_INT 0
70254: PPUSH
70255: PPUSH
70256: PPUSH
// result := [ ] ;
70257: LD_ADDR_VAR 0 2
70261: PUSH
70262: EMPTY
70263: ST_TO_ADDR
// if not array then
70264: LD_VAR 0 1
70268: NOT
70269: IFFALSE 70273
// exit ;
70271: GO 70372
// Randomize ;
70273: CALL_OW 10
// for i = array downto 1 do
70277: LD_ADDR_VAR 0 3
70281: PUSH
70282: DOUBLE
70283: LD_VAR 0 1
70287: INC
70288: ST_TO_ADDR
70289: LD_INT 1
70291: PUSH
70292: FOR_DOWNTO
70293: IFFALSE 70370
// begin index := rand ( 1 , array ) ;
70295: LD_ADDR_VAR 0 4
70299: PUSH
70300: LD_INT 1
70302: PPUSH
70303: LD_VAR 0 1
70307: PPUSH
70308: CALL_OW 12
70312: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
70313: LD_ADDR_VAR 0 2
70317: PUSH
70318: LD_VAR 0 2
70322: PPUSH
70323: LD_VAR 0 2
70327: PUSH
70328: LD_INT 1
70330: PLUS
70331: PPUSH
70332: LD_VAR 0 1
70336: PUSH
70337: LD_VAR 0 4
70341: ARRAY
70342: PPUSH
70343: CALL_OW 2
70347: ST_TO_ADDR
// array := Delete ( array , index ) ;
70348: LD_ADDR_VAR 0 1
70352: PUSH
70353: LD_VAR 0 1
70357: PPUSH
70358: LD_VAR 0 4
70362: PPUSH
70363: CALL_OW 3
70367: ST_TO_ADDR
// end ;
70368: GO 70292
70370: POP
70371: POP
// end ;
70372: LD_VAR 0 2
70376: RET
// export function GetBaseMaterials ( base ) ; begin
70377: LD_INT 0
70379: PPUSH
// result := [ 0 , 0 , 0 ] ;
70380: LD_ADDR_VAR 0 2
70384: PUSH
70385: LD_INT 0
70387: PUSH
70388: LD_INT 0
70390: PUSH
70391: LD_INT 0
70393: PUSH
70394: EMPTY
70395: LIST
70396: LIST
70397: LIST
70398: ST_TO_ADDR
// if not base then
70399: LD_VAR 0 1
70403: NOT
70404: IFFALSE 70408
// exit ;
70406: GO 70457
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
70408: LD_ADDR_VAR 0 2
70412: PUSH
70413: LD_VAR 0 1
70417: PPUSH
70418: LD_INT 1
70420: PPUSH
70421: CALL_OW 275
70425: PUSH
70426: LD_VAR 0 1
70430: PPUSH
70431: LD_INT 2
70433: PPUSH
70434: CALL_OW 275
70438: PUSH
70439: LD_VAR 0 1
70443: PPUSH
70444: LD_INT 3
70446: PPUSH
70447: CALL_OW 275
70451: PUSH
70452: EMPTY
70453: LIST
70454: LIST
70455: LIST
70456: ST_TO_ADDR
// end ;
70457: LD_VAR 0 2
70461: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
70462: LD_INT 0
70464: PPUSH
70465: PPUSH
// result := array ;
70466: LD_ADDR_VAR 0 3
70470: PUSH
70471: LD_VAR 0 1
70475: ST_TO_ADDR
// if size >= result then
70476: LD_VAR 0 2
70480: PUSH
70481: LD_VAR 0 3
70485: GREATEREQUAL
70486: IFFALSE 70490
// exit ;
70488: GO 70540
// if size then
70490: LD_VAR 0 2
70494: IFFALSE 70540
// for i := array downto size do
70496: LD_ADDR_VAR 0 4
70500: PUSH
70501: DOUBLE
70502: LD_VAR 0 1
70506: INC
70507: ST_TO_ADDR
70508: LD_VAR 0 2
70512: PUSH
70513: FOR_DOWNTO
70514: IFFALSE 70538
// result := Delete ( result , result ) ;
70516: LD_ADDR_VAR 0 3
70520: PUSH
70521: LD_VAR 0 3
70525: PPUSH
70526: LD_VAR 0 3
70530: PPUSH
70531: CALL_OW 3
70535: ST_TO_ADDR
70536: GO 70513
70538: POP
70539: POP
// end ;
70540: LD_VAR 0 3
70544: RET
// export function ComExit ( unit ) ; var tmp ; begin
70545: LD_INT 0
70547: PPUSH
70548: PPUSH
// if not IsInUnit ( unit ) then
70549: LD_VAR 0 1
70553: PPUSH
70554: CALL_OW 310
70558: NOT
70559: IFFALSE 70563
// exit ;
70561: GO 70623
// tmp := IsInUnit ( unit ) ;
70563: LD_ADDR_VAR 0 3
70567: PUSH
70568: LD_VAR 0 1
70572: PPUSH
70573: CALL_OW 310
70577: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
70578: LD_VAR 0 3
70582: PPUSH
70583: CALL_OW 247
70587: PUSH
70588: LD_INT 2
70590: EQUAL
70591: IFFALSE 70604
// ComExitVehicle ( unit ) else
70593: LD_VAR 0 1
70597: PPUSH
70598: CALL_OW 121
70602: GO 70613
// ComExitBuilding ( unit ) ;
70604: LD_VAR 0 1
70608: PPUSH
70609: CALL_OW 122
// result := tmp ;
70613: LD_ADDR_VAR 0 2
70617: PUSH
70618: LD_VAR 0 3
70622: ST_TO_ADDR
// end ;
70623: LD_VAR 0 2
70627: RET
// export function ComExitAll ( units ) ; var i ; begin
70628: LD_INT 0
70630: PPUSH
70631: PPUSH
// if not units then
70632: LD_VAR 0 1
70636: NOT
70637: IFFALSE 70641
// exit ;
70639: GO 70667
// for i in units do
70641: LD_ADDR_VAR 0 3
70645: PUSH
70646: LD_VAR 0 1
70650: PUSH
70651: FOR_IN
70652: IFFALSE 70665
// ComExit ( i ) ;
70654: LD_VAR 0 3
70658: PPUSH
70659: CALL 70545 0 1
70663: GO 70651
70665: POP
70666: POP
// end ;
70667: LD_VAR 0 2
70671: RET
// export function ResetHc ; begin
70672: LD_INT 0
70674: PPUSH
// InitHc ;
70675: CALL_OW 19
// hc_importance := 0 ;
70679: LD_ADDR_OWVAR 32
70683: PUSH
70684: LD_INT 0
70686: ST_TO_ADDR
// end ;
70687: LD_VAR 0 1
70691: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
70692: LD_INT 0
70694: PPUSH
70695: PPUSH
70696: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70697: LD_ADDR_VAR 0 6
70701: PUSH
70702: LD_VAR 0 1
70706: PUSH
70707: LD_VAR 0 3
70711: PLUS
70712: PUSH
70713: LD_INT 2
70715: DIV
70716: ST_TO_ADDR
// if _x < 0 then
70717: LD_VAR 0 6
70721: PUSH
70722: LD_INT 0
70724: LESS
70725: IFFALSE 70742
// _x := _x * - 1 ;
70727: LD_ADDR_VAR 0 6
70731: PUSH
70732: LD_VAR 0 6
70736: PUSH
70737: LD_INT 1
70739: NEG
70740: MUL
70741: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70742: LD_ADDR_VAR 0 7
70746: PUSH
70747: LD_VAR 0 2
70751: PUSH
70752: LD_VAR 0 4
70756: PLUS
70757: PUSH
70758: LD_INT 2
70760: DIV
70761: ST_TO_ADDR
// if _y < 0 then
70762: LD_VAR 0 7
70766: PUSH
70767: LD_INT 0
70769: LESS
70770: IFFALSE 70787
// _y := _y * - 1 ;
70772: LD_ADDR_VAR 0 7
70776: PUSH
70777: LD_VAR 0 7
70781: PUSH
70782: LD_INT 1
70784: NEG
70785: MUL
70786: ST_TO_ADDR
// result := [ _x , _y ] ;
70787: LD_ADDR_VAR 0 5
70791: PUSH
70792: LD_VAR 0 6
70796: PUSH
70797: LD_VAR 0 7
70801: PUSH
70802: EMPTY
70803: LIST
70804: LIST
70805: ST_TO_ADDR
// end ;
70806: LD_VAR 0 5
70810: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70811: LD_INT 0
70813: PPUSH
70814: PPUSH
70815: PPUSH
70816: PPUSH
// task := GetTaskList ( unit ) ;
70817: LD_ADDR_VAR 0 7
70821: PUSH
70822: LD_VAR 0 1
70826: PPUSH
70827: CALL_OW 437
70831: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
70832: LD_VAR 0 7
70836: NOT
70837: PUSH
70838: LD_VAR 0 1
70842: PPUSH
70843: LD_VAR 0 2
70847: PPUSH
70848: CALL_OW 308
70852: NOT
70853: AND
70854: IFFALSE 70858
// exit ;
70856: GO 70976
// if IsInArea ( unit , area ) then
70858: LD_VAR 0 1
70862: PPUSH
70863: LD_VAR 0 2
70867: PPUSH
70868: CALL_OW 308
70872: IFFALSE 70890
// begin ComMoveToArea ( unit , goAway ) ;
70874: LD_VAR 0 1
70878: PPUSH
70879: LD_VAR 0 3
70883: PPUSH
70884: CALL_OW 113
// exit ;
70888: GO 70976
// end ; if task [ 1 ] [ 1 ] <> M then
70890: LD_VAR 0 7
70894: PUSH
70895: LD_INT 1
70897: ARRAY
70898: PUSH
70899: LD_INT 1
70901: ARRAY
70902: PUSH
70903: LD_STRING M
70905: NONEQUAL
70906: IFFALSE 70910
// exit ;
70908: GO 70976
// x := task [ 1 ] [ 2 ] ;
70910: LD_ADDR_VAR 0 5
70914: PUSH
70915: LD_VAR 0 7
70919: PUSH
70920: LD_INT 1
70922: ARRAY
70923: PUSH
70924: LD_INT 2
70926: ARRAY
70927: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
70928: LD_ADDR_VAR 0 6
70932: PUSH
70933: LD_VAR 0 7
70937: PUSH
70938: LD_INT 1
70940: ARRAY
70941: PUSH
70942: LD_INT 3
70944: ARRAY
70945: ST_TO_ADDR
// if InArea ( x , y , area ) then
70946: LD_VAR 0 5
70950: PPUSH
70951: LD_VAR 0 6
70955: PPUSH
70956: LD_VAR 0 2
70960: PPUSH
70961: CALL_OW 309
70965: IFFALSE 70976
// ComStop ( unit ) ;
70967: LD_VAR 0 1
70971: PPUSH
70972: CALL_OW 141
// end ;
70976: LD_VAR 0 4
70980: RET
// export function Abs ( value ) ; begin
70981: LD_INT 0
70983: PPUSH
// result := value ;
70984: LD_ADDR_VAR 0 2
70988: PUSH
70989: LD_VAR 0 1
70993: ST_TO_ADDR
// if value < 0 then
70994: LD_VAR 0 1
70998: PUSH
70999: LD_INT 0
71001: LESS
71002: IFFALSE 71019
// result := value * - 1 ;
71004: LD_ADDR_VAR 0 2
71008: PUSH
71009: LD_VAR 0 1
71013: PUSH
71014: LD_INT 1
71016: NEG
71017: MUL
71018: ST_TO_ADDR
// end ;
71019: LD_VAR 0 2
71023: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
71024: LD_INT 0
71026: PPUSH
71027: PPUSH
71028: PPUSH
71029: PPUSH
71030: PPUSH
71031: PPUSH
71032: PPUSH
71033: PPUSH
// if not unit or not building then
71034: LD_VAR 0 1
71038: NOT
71039: PUSH
71040: LD_VAR 0 2
71044: NOT
71045: OR
71046: IFFALSE 71050
// exit ;
71048: GO 71276
// x := GetX ( building ) ;
71050: LD_ADDR_VAR 0 4
71054: PUSH
71055: LD_VAR 0 2
71059: PPUSH
71060: CALL_OW 250
71064: ST_TO_ADDR
// y := GetY ( building ) ;
71065: LD_ADDR_VAR 0 6
71069: PUSH
71070: LD_VAR 0 2
71074: PPUSH
71075: CALL_OW 251
71079: ST_TO_ADDR
// d := GetDir ( building ) ;
71080: LD_ADDR_VAR 0 8
71084: PUSH
71085: LD_VAR 0 2
71089: PPUSH
71090: CALL_OW 254
71094: ST_TO_ADDR
// r := 4 ;
71095: LD_ADDR_VAR 0 9
71099: PUSH
71100: LD_INT 4
71102: ST_TO_ADDR
// for i := 1 to 5 do
71103: LD_ADDR_VAR 0 10
71107: PUSH
71108: DOUBLE
71109: LD_INT 1
71111: DEC
71112: ST_TO_ADDR
71113: LD_INT 5
71115: PUSH
71116: FOR_TO
71117: IFFALSE 71274
// begin _x := ShiftX ( x , d , r + i ) ;
71119: LD_ADDR_VAR 0 5
71123: PUSH
71124: LD_VAR 0 4
71128: PPUSH
71129: LD_VAR 0 8
71133: PPUSH
71134: LD_VAR 0 9
71138: PUSH
71139: LD_VAR 0 10
71143: PLUS
71144: PPUSH
71145: CALL_OW 272
71149: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
71150: LD_ADDR_VAR 0 7
71154: PUSH
71155: LD_VAR 0 6
71159: PPUSH
71160: LD_VAR 0 8
71164: PPUSH
71165: LD_VAR 0 9
71169: PUSH
71170: LD_VAR 0 10
71174: PLUS
71175: PPUSH
71176: CALL_OW 273
71180: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
71181: LD_VAR 0 5
71185: PPUSH
71186: LD_VAR 0 7
71190: PPUSH
71191: CALL_OW 488
71195: PUSH
71196: LD_VAR 0 5
71200: PPUSH
71201: LD_VAR 0 7
71205: PPUSH
71206: CALL_OW 428
71210: PPUSH
71211: CALL_OW 247
71215: PUSH
71216: LD_INT 3
71218: PUSH
71219: LD_INT 2
71221: PUSH
71222: EMPTY
71223: LIST
71224: LIST
71225: IN
71226: NOT
71227: AND
71228: IFFALSE 71272
// begin ComMoveXY ( unit , _x , _y ) ;
71230: LD_VAR 0 1
71234: PPUSH
71235: LD_VAR 0 5
71239: PPUSH
71240: LD_VAR 0 7
71244: PPUSH
71245: CALL_OW 111
// result := [ _x , _y ] ;
71249: LD_ADDR_VAR 0 3
71253: PUSH
71254: LD_VAR 0 5
71258: PUSH
71259: LD_VAR 0 7
71263: PUSH
71264: EMPTY
71265: LIST
71266: LIST
71267: ST_TO_ADDR
// exit ;
71268: POP
71269: POP
71270: GO 71276
// end ; end ;
71272: GO 71116
71274: POP
71275: POP
// end ;
71276: LD_VAR 0 3
71280: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
71281: LD_INT 0
71283: PPUSH
71284: PPUSH
71285: PPUSH
// result := 0 ;
71286: LD_ADDR_VAR 0 3
71290: PUSH
71291: LD_INT 0
71293: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
71294: LD_VAR 0 1
71298: PUSH
71299: LD_INT 0
71301: LESS
71302: PUSH
71303: LD_VAR 0 1
71307: PUSH
71308: LD_INT 8
71310: GREATER
71311: OR
71312: PUSH
71313: LD_VAR 0 2
71317: PUSH
71318: LD_INT 0
71320: LESS
71321: OR
71322: PUSH
71323: LD_VAR 0 2
71327: PUSH
71328: LD_INT 8
71330: GREATER
71331: OR
71332: IFFALSE 71336
// exit ;
71334: GO 71411
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
71336: LD_ADDR_VAR 0 4
71340: PUSH
71341: LD_INT 22
71343: PUSH
71344: LD_VAR 0 2
71348: PUSH
71349: EMPTY
71350: LIST
71351: LIST
71352: PPUSH
71353: CALL_OW 69
71357: PUSH
71358: FOR_IN
71359: IFFALSE 71409
// begin un := UnitShoot ( i ) ;
71361: LD_ADDR_VAR 0 5
71365: PUSH
71366: LD_VAR 0 4
71370: PPUSH
71371: CALL_OW 504
71375: ST_TO_ADDR
// if GetSide ( un ) = side1 then
71376: LD_VAR 0 5
71380: PPUSH
71381: CALL_OW 255
71385: PUSH
71386: LD_VAR 0 1
71390: EQUAL
71391: IFFALSE 71407
// begin result := un ;
71393: LD_ADDR_VAR 0 3
71397: PUSH
71398: LD_VAR 0 5
71402: ST_TO_ADDR
// exit ;
71403: POP
71404: POP
71405: GO 71411
// end ; end ;
71407: GO 71358
71409: POP
71410: POP
// end ;
71411: LD_VAR 0 3
71415: RET
// export function GetCargoBay ( units ) ; begin
71416: LD_INT 0
71418: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
71419: LD_ADDR_VAR 0 2
71423: PUSH
71424: LD_VAR 0 1
71428: PPUSH
71429: LD_INT 2
71431: PUSH
71432: LD_INT 34
71434: PUSH
71435: LD_INT 12
71437: PUSH
71438: EMPTY
71439: LIST
71440: LIST
71441: PUSH
71442: LD_INT 34
71444: PUSH
71445: LD_INT 51
71447: PUSH
71448: EMPTY
71449: LIST
71450: LIST
71451: PUSH
71452: LD_INT 34
71454: PUSH
71455: LD_INT 32
71457: PUSH
71458: EMPTY
71459: LIST
71460: LIST
71461: PUSH
71462: LD_INT 34
71464: PUSH
71465: LD_INT 89
71467: PUSH
71468: EMPTY
71469: LIST
71470: LIST
71471: PUSH
71472: EMPTY
71473: LIST
71474: LIST
71475: LIST
71476: LIST
71477: LIST
71478: PPUSH
71479: CALL_OW 72
71483: ST_TO_ADDR
// end ;
71484: LD_VAR 0 2
71488: RET
// export function Negate ( value ) ; begin
71489: LD_INT 0
71491: PPUSH
// result := not value ;
71492: LD_ADDR_VAR 0 2
71496: PUSH
71497: LD_VAR 0 1
71501: NOT
71502: ST_TO_ADDR
// end ;
71503: LD_VAR 0 2
71507: RET
// export function Inc ( value ) ; begin
71508: LD_INT 0
71510: PPUSH
// result := value + 1 ;
71511: LD_ADDR_VAR 0 2
71515: PUSH
71516: LD_VAR 0 1
71520: PUSH
71521: LD_INT 1
71523: PLUS
71524: ST_TO_ADDR
// end ;
71525: LD_VAR 0 2
71529: RET
// export function Dec ( value ) ; begin
71530: LD_INT 0
71532: PPUSH
// result := value - 1 ;
71533: LD_ADDR_VAR 0 2
71537: PUSH
71538: LD_VAR 0 1
71542: PUSH
71543: LD_INT 1
71545: MINUS
71546: ST_TO_ADDR
// end ;
71547: LD_VAR 0 2
71551: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
71552: LD_INT 0
71554: PPUSH
71555: PPUSH
71556: PPUSH
71557: PPUSH
71558: PPUSH
71559: PPUSH
71560: PPUSH
71561: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
71562: LD_VAR 0 1
71566: PPUSH
71567: LD_VAR 0 2
71571: PPUSH
71572: CALL_OW 488
71576: NOT
71577: PUSH
71578: LD_VAR 0 3
71582: PPUSH
71583: LD_VAR 0 4
71587: PPUSH
71588: CALL_OW 488
71592: NOT
71593: OR
71594: IFFALSE 71607
// begin result := - 1 ;
71596: LD_ADDR_VAR 0 5
71600: PUSH
71601: LD_INT 1
71603: NEG
71604: ST_TO_ADDR
// exit ;
71605: GO 71842
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
71607: LD_ADDR_VAR 0 12
71611: PUSH
71612: LD_VAR 0 1
71616: PPUSH
71617: LD_VAR 0 2
71621: PPUSH
71622: LD_VAR 0 3
71626: PPUSH
71627: LD_VAR 0 4
71631: PPUSH
71632: CALL 70692 0 4
71636: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
71637: LD_ADDR_VAR 0 11
71641: PUSH
71642: LD_VAR 0 1
71646: PPUSH
71647: LD_VAR 0 2
71651: PPUSH
71652: LD_VAR 0 12
71656: PUSH
71657: LD_INT 1
71659: ARRAY
71660: PPUSH
71661: LD_VAR 0 12
71665: PUSH
71666: LD_INT 2
71668: ARRAY
71669: PPUSH
71670: CALL_OW 298
71674: ST_TO_ADDR
// distance := 9999 ;
71675: LD_ADDR_VAR 0 10
71679: PUSH
71680: LD_INT 9999
71682: ST_TO_ADDR
// for i := 0 to 5 do
71683: LD_ADDR_VAR 0 6
71687: PUSH
71688: DOUBLE
71689: LD_INT 0
71691: DEC
71692: ST_TO_ADDR
71693: LD_INT 5
71695: PUSH
71696: FOR_TO
71697: IFFALSE 71840
// begin _x := ShiftX ( x1 , i , centerDist ) ;
71699: LD_ADDR_VAR 0 7
71703: PUSH
71704: LD_VAR 0 1
71708: PPUSH
71709: LD_VAR 0 6
71713: PPUSH
71714: LD_VAR 0 11
71718: PPUSH
71719: CALL_OW 272
71723: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
71724: LD_ADDR_VAR 0 8
71728: PUSH
71729: LD_VAR 0 2
71733: PPUSH
71734: LD_VAR 0 6
71738: PPUSH
71739: LD_VAR 0 11
71743: PPUSH
71744: CALL_OW 273
71748: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71749: LD_VAR 0 7
71753: PPUSH
71754: LD_VAR 0 8
71758: PPUSH
71759: CALL_OW 488
71763: NOT
71764: IFFALSE 71768
// continue ;
71766: GO 71696
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
71768: LD_ADDR_VAR 0 9
71772: PUSH
71773: LD_VAR 0 12
71777: PUSH
71778: LD_INT 1
71780: ARRAY
71781: PPUSH
71782: LD_VAR 0 12
71786: PUSH
71787: LD_INT 2
71789: ARRAY
71790: PPUSH
71791: LD_VAR 0 7
71795: PPUSH
71796: LD_VAR 0 8
71800: PPUSH
71801: CALL_OW 298
71805: ST_TO_ADDR
// if tmp < distance then
71806: LD_VAR 0 9
71810: PUSH
71811: LD_VAR 0 10
71815: LESS
71816: IFFALSE 71838
// begin result := i ;
71818: LD_ADDR_VAR 0 5
71822: PUSH
71823: LD_VAR 0 6
71827: ST_TO_ADDR
// distance := tmp ;
71828: LD_ADDR_VAR 0 10
71832: PUSH
71833: LD_VAR 0 9
71837: ST_TO_ADDR
// end ; end ;
71838: GO 71696
71840: POP
71841: POP
// end ;
71842: LD_VAR 0 5
71846: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71847: LD_INT 0
71849: PPUSH
71850: PPUSH
// if not driver or not IsInUnit ( driver ) then
71851: LD_VAR 0 1
71855: NOT
71856: PUSH
71857: LD_VAR 0 1
71861: PPUSH
71862: CALL_OW 310
71866: NOT
71867: OR
71868: IFFALSE 71872
// exit ;
71870: GO 71962
// vehicle := IsInUnit ( driver ) ;
71872: LD_ADDR_VAR 0 3
71876: PUSH
71877: LD_VAR 0 1
71881: PPUSH
71882: CALL_OW 310
71886: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71887: LD_VAR 0 1
71891: PPUSH
71892: LD_STRING \
71894: PUSH
71895: LD_INT 0
71897: PUSH
71898: LD_INT 0
71900: PUSH
71901: LD_INT 0
71903: PUSH
71904: LD_INT 0
71906: PUSH
71907: LD_INT 0
71909: PUSH
71910: LD_INT 0
71912: PUSH
71913: EMPTY
71914: LIST
71915: LIST
71916: LIST
71917: LIST
71918: LIST
71919: LIST
71920: LIST
71921: PUSH
71922: LD_STRING E
71924: PUSH
71925: LD_INT 0
71927: PUSH
71928: LD_INT 0
71930: PUSH
71931: LD_VAR 0 3
71935: PUSH
71936: LD_INT 0
71938: PUSH
71939: LD_INT 0
71941: PUSH
71942: LD_INT 0
71944: PUSH
71945: EMPTY
71946: LIST
71947: LIST
71948: LIST
71949: LIST
71950: LIST
71951: LIST
71952: LIST
71953: PUSH
71954: EMPTY
71955: LIST
71956: LIST
71957: PPUSH
71958: CALL_OW 446
// end ;
71962: LD_VAR 0 2
71966: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71967: LD_INT 0
71969: PPUSH
71970: PPUSH
// if not driver or not IsInUnit ( driver ) then
71971: LD_VAR 0 1
71975: NOT
71976: PUSH
71977: LD_VAR 0 1
71981: PPUSH
71982: CALL_OW 310
71986: NOT
71987: OR
71988: IFFALSE 71992
// exit ;
71990: GO 72082
// vehicle := IsInUnit ( driver ) ;
71992: LD_ADDR_VAR 0 3
71996: PUSH
71997: LD_VAR 0 1
72001: PPUSH
72002: CALL_OW 310
72006: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72007: LD_VAR 0 1
72011: PPUSH
72012: LD_STRING \
72014: PUSH
72015: LD_INT 0
72017: PUSH
72018: LD_INT 0
72020: PUSH
72021: LD_INT 0
72023: PUSH
72024: LD_INT 0
72026: PUSH
72027: LD_INT 0
72029: PUSH
72030: LD_INT 0
72032: PUSH
72033: EMPTY
72034: LIST
72035: LIST
72036: LIST
72037: LIST
72038: LIST
72039: LIST
72040: LIST
72041: PUSH
72042: LD_STRING E
72044: PUSH
72045: LD_INT 0
72047: PUSH
72048: LD_INT 0
72050: PUSH
72051: LD_VAR 0 3
72055: PUSH
72056: LD_INT 0
72058: PUSH
72059: LD_INT 0
72061: PUSH
72062: LD_INT 0
72064: PUSH
72065: EMPTY
72066: LIST
72067: LIST
72068: LIST
72069: LIST
72070: LIST
72071: LIST
72072: LIST
72073: PUSH
72074: EMPTY
72075: LIST
72076: LIST
72077: PPUSH
72078: CALL_OW 447
// end ;
72082: LD_VAR 0 2
72086: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
72087: LD_INT 0
72089: PPUSH
72090: PPUSH
72091: PPUSH
// tmp := [ ] ;
72092: LD_ADDR_VAR 0 5
72096: PUSH
72097: EMPTY
72098: ST_TO_ADDR
// for i in units do
72099: LD_ADDR_VAR 0 4
72103: PUSH
72104: LD_VAR 0 1
72108: PUSH
72109: FOR_IN
72110: IFFALSE 72148
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
72112: LD_ADDR_VAR 0 5
72116: PUSH
72117: LD_VAR 0 5
72121: PPUSH
72122: LD_VAR 0 5
72126: PUSH
72127: LD_INT 1
72129: PLUS
72130: PPUSH
72131: LD_VAR 0 4
72135: PPUSH
72136: CALL_OW 256
72140: PPUSH
72141: CALL_OW 2
72145: ST_TO_ADDR
72146: GO 72109
72148: POP
72149: POP
// if not tmp then
72150: LD_VAR 0 5
72154: NOT
72155: IFFALSE 72159
// exit ;
72157: GO 72207
// if asc then
72159: LD_VAR 0 2
72163: IFFALSE 72187
// result := SortListByListAsc ( units , tmp ) else
72165: LD_ADDR_VAR 0 3
72169: PUSH
72170: LD_VAR 0 1
72174: PPUSH
72175: LD_VAR 0 5
72179: PPUSH
72180: CALL_OW 76
72184: ST_TO_ADDR
72185: GO 72207
// result := SortListByListDesc ( units , tmp ) ;
72187: LD_ADDR_VAR 0 3
72191: PUSH
72192: LD_VAR 0 1
72196: PPUSH
72197: LD_VAR 0 5
72201: PPUSH
72202: CALL_OW 77
72206: ST_TO_ADDR
// end ;
72207: LD_VAR 0 3
72211: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
72212: LD_INT 0
72214: PPUSH
72215: PPUSH
// task := GetTaskList ( mech ) ;
72216: LD_ADDR_VAR 0 4
72220: PUSH
72221: LD_VAR 0 1
72225: PPUSH
72226: CALL_OW 437
72230: ST_TO_ADDR
// if not task then
72231: LD_VAR 0 4
72235: NOT
72236: IFFALSE 72240
// exit ;
72238: GO 72282
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
72240: LD_ADDR_VAR 0 3
72244: PUSH
72245: LD_VAR 0 4
72249: PUSH
72250: LD_INT 1
72252: ARRAY
72253: PUSH
72254: LD_INT 1
72256: ARRAY
72257: PUSH
72258: LD_STRING r
72260: EQUAL
72261: PUSH
72262: LD_VAR 0 4
72266: PUSH
72267: LD_INT 1
72269: ARRAY
72270: PUSH
72271: LD_INT 4
72273: ARRAY
72274: PUSH
72275: LD_VAR 0 2
72279: EQUAL
72280: AND
72281: ST_TO_ADDR
// end ;
72282: LD_VAR 0 3
72286: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
72287: LD_INT 0
72289: PPUSH
// SetDir ( unit , d ) ;
72290: LD_VAR 0 1
72294: PPUSH
72295: LD_VAR 0 4
72299: PPUSH
72300: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
72304: LD_VAR 0 1
72308: PPUSH
72309: LD_VAR 0 2
72313: PPUSH
72314: LD_VAR 0 3
72318: PPUSH
72319: LD_VAR 0 5
72323: PPUSH
72324: CALL_OW 48
// end ;
72328: LD_VAR 0 6
72332: RET
// export function ToNaturalNumber ( number ) ; begin
72333: LD_INT 0
72335: PPUSH
// result := number div 1 ;
72336: LD_ADDR_VAR 0 2
72340: PUSH
72341: LD_VAR 0 1
72345: PUSH
72346: LD_INT 1
72348: DIV
72349: ST_TO_ADDR
// if number < 0 then
72350: LD_VAR 0 1
72354: PUSH
72355: LD_INT 0
72357: LESS
72358: IFFALSE 72368
// result := 0 ;
72360: LD_ADDR_VAR 0 2
72364: PUSH
72365: LD_INT 0
72367: ST_TO_ADDR
// end ;
72368: LD_VAR 0 2
72372: RET
// export function SortByClass ( units , class ) ; var un ; begin
72373: LD_INT 0
72375: PPUSH
72376: PPUSH
// if not units or not class then
72377: LD_VAR 0 1
72381: NOT
72382: PUSH
72383: LD_VAR 0 2
72387: NOT
72388: OR
72389: IFFALSE 72393
// exit ;
72391: GO 72488
// result := [ ] ;
72393: LD_ADDR_VAR 0 3
72397: PUSH
72398: EMPTY
72399: ST_TO_ADDR
// for un in units do
72400: LD_ADDR_VAR 0 4
72404: PUSH
72405: LD_VAR 0 1
72409: PUSH
72410: FOR_IN
72411: IFFALSE 72486
// if GetClass ( un ) = class then
72413: LD_VAR 0 4
72417: PPUSH
72418: CALL_OW 257
72422: PUSH
72423: LD_VAR 0 2
72427: EQUAL
72428: IFFALSE 72455
// result := Insert ( result , 1 , un ) else
72430: LD_ADDR_VAR 0 3
72434: PUSH
72435: LD_VAR 0 3
72439: PPUSH
72440: LD_INT 1
72442: PPUSH
72443: LD_VAR 0 4
72447: PPUSH
72448: CALL_OW 2
72452: ST_TO_ADDR
72453: GO 72484
// result := Replace ( result , result + 1 , un ) ;
72455: LD_ADDR_VAR 0 3
72459: PUSH
72460: LD_VAR 0 3
72464: PPUSH
72465: LD_VAR 0 3
72469: PUSH
72470: LD_INT 1
72472: PLUS
72473: PPUSH
72474: LD_VAR 0 4
72478: PPUSH
72479: CALL_OW 1
72483: ST_TO_ADDR
72484: GO 72410
72486: POP
72487: POP
// end ;
72488: LD_VAR 0 3
72492: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
72493: LD_INT 0
72495: PPUSH
72496: PPUSH
72497: PPUSH
72498: PPUSH
72499: PPUSH
72500: PPUSH
72501: PPUSH
// result := [ ] ;
72502: LD_ADDR_VAR 0 4
72506: PUSH
72507: EMPTY
72508: ST_TO_ADDR
// if x - r < 0 then
72509: LD_VAR 0 1
72513: PUSH
72514: LD_VAR 0 3
72518: MINUS
72519: PUSH
72520: LD_INT 0
72522: LESS
72523: IFFALSE 72535
// min_x := 0 else
72525: LD_ADDR_VAR 0 8
72529: PUSH
72530: LD_INT 0
72532: ST_TO_ADDR
72533: GO 72551
// min_x := x - r ;
72535: LD_ADDR_VAR 0 8
72539: PUSH
72540: LD_VAR 0 1
72544: PUSH
72545: LD_VAR 0 3
72549: MINUS
72550: ST_TO_ADDR
// if y - r < 0 then
72551: LD_VAR 0 2
72555: PUSH
72556: LD_VAR 0 3
72560: MINUS
72561: PUSH
72562: LD_INT 0
72564: LESS
72565: IFFALSE 72577
// min_y := 0 else
72567: LD_ADDR_VAR 0 7
72571: PUSH
72572: LD_INT 0
72574: ST_TO_ADDR
72575: GO 72593
// min_y := y - r ;
72577: LD_ADDR_VAR 0 7
72581: PUSH
72582: LD_VAR 0 2
72586: PUSH
72587: LD_VAR 0 3
72591: MINUS
72592: ST_TO_ADDR
// max_x := x + r ;
72593: LD_ADDR_VAR 0 9
72597: PUSH
72598: LD_VAR 0 1
72602: PUSH
72603: LD_VAR 0 3
72607: PLUS
72608: ST_TO_ADDR
// max_y := y + r ;
72609: LD_ADDR_VAR 0 10
72613: PUSH
72614: LD_VAR 0 2
72618: PUSH
72619: LD_VAR 0 3
72623: PLUS
72624: ST_TO_ADDR
// for _x = min_x to max_x do
72625: LD_ADDR_VAR 0 5
72629: PUSH
72630: DOUBLE
72631: LD_VAR 0 8
72635: DEC
72636: ST_TO_ADDR
72637: LD_VAR 0 9
72641: PUSH
72642: FOR_TO
72643: IFFALSE 72744
// for _y = min_y to max_y do
72645: LD_ADDR_VAR 0 6
72649: PUSH
72650: DOUBLE
72651: LD_VAR 0 7
72655: DEC
72656: ST_TO_ADDR
72657: LD_VAR 0 10
72661: PUSH
72662: FOR_TO
72663: IFFALSE 72740
// begin if not ValidHex ( _x , _y ) then
72665: LD_VAR 0 5
72669: PPUSH
72670: LD_VAR 0 6
72674: PPUSH
72675: CALL_OW 488
72679: NOT
72680: IFFALSE 72684
// continue ;
72682: GO 72662
// if GetResourceTypeXY ( _x , _y ) then
72684: LD_VAR 0 5
72688: PPUSH
72689: LD_VAR 0 6
72693: PPUSH
72694: CALL_OW 283
72698: IFFALSE 72738
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
72700: LD_ADDR_VAR 0 4
72704: PUSH
72705: LD_VAR 0 4
72709: PPUSH
72710: LD_VAR 0 4
72714: PUSH
72715: LD_INT 1
72717: PLUS
72718: PPUSH
72719: LD_VAR 0 5
72723: PUSH
72724: LD_VAR 0 6
72728: PUSH
72729: EMPTY
72730: LIST
72731: LIST
72732: PPUSH
72733: CALL_OW 1
72737: ST_TO_ADDR
// end ;
72738: GO 72662
72740: POP
72741: POP
72742: GO 72642
72744: POP
72745: POP
// end ;
72746: LD_VAR 0 4
72750: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
72751: LD_INT 0
72753: PPUSH
72754: PPUSH
72755: PPUSH
72756: PPUSH
72757: PPUSH
72758: PPUSH
72759: PPUSH
72760: PPUSH
// if not units then
72761: LD_VAR 0 1
72765: NOT
72766: IFFALSE 72770
// exit ;
72768: GO 73294
// result := UnitFilter ( units , [ f_ok ] ) ;
72770: LD_ADDR_VAR 0 3
72774: PUSH
72775: LD_VAR 0 1
72779: PPUSH
72780: LD_INT 50
72782: PUSH
72783: EMPTY
72784: LIST
72785: PPUSH
72786: CALL_OW 72
72790: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
72791: LD_ADDR_VAR 0 8
72795: PUSH
72796: LD_VAR 0 1
72800: PUSH
72801: LD_INT 1
72803: ARRAY
72804: PPUSH
72805: CALL_OW 255
72809: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
72810: LD_ADDR_VAR 0 10
72814: PUSH
72815: LD_INT 29
72817: PUSH
72818: LD_INT 91
72820: PUSH
72821: LD_INT 49
72823: PUSH
72824: EMPTY
72825: LIST
72826: LIST
72827: LIST
72828: ST_TO_ADDR
// if not result then
72829: LD_VAR 0 3
72833: NOT
72834: IFFALSE 72838
// exit ;
72836: GO 73294
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
72838: LD_ADDR_VAR 0 5
72842: PUSH
72843: LD_INT 81
72845: PUSH
72846: LD_VAR 0 8
72850: PUSH
72851: EMPTY
72852: LIST
72853: LIST
72854: PPUSH
72855: CALL_OW 69
72859: ST_TO_ADDR
// for i in result do
72860: LD_ADDR_VAR 0 4
72864: PUSH
72865: LD_VAR 0 3
72869: PUSH
72870: FOR_IN
72871: IFFALSE 73292
// begin tag := GetTag ( i ) + 1 ;
72873: LD_ADDR_VAR 0 9
72877: PUSH
72878: LD_VAR 0 4
72882: PPUSH
72883: CALL_OW 110
72887: PUSH
72888: LD_INT 1
72890: PLUS
72891: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
72892: LD_ADDR_VAR 0 7
72896: PUSH
72897: LD_VAR 0 4
72901: PPUSH
72902: CALL_OW 250
72906: PPUSH
72907: LD_VAR 0 4
72911: PPUSH
72912: CALL_OW 251
72916: PPUSH
72917: LD_INT 6
72919: PPUSH
72920: CALL 72493 0 3
72924: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
72925: LD_VAR 0 4
72929: PPUSH
72930: CALL_OW 247
72934: PUSH
72935: LD_INT 2
72937: EQUAL
72938: PUSH
72939: LD_VAR 0 7
72943: AND
72944: PUSH
72945: LD_VAR 0 4
72949: PPUSH
72950: CALL_OW 264
72954: PUSH
72955: LD_VAR 0 10
72959: IN
72960: NOT
72961: AND
72962: IFFALSE 73001
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
72964: LD_VAR 0 4
72968: PPUSH
72969: LD_VAR 0 7
72973: PUSH
72974: LD_INT 1
72976: ARRAY
72977: PUSH
72978: LD_INT 1
72980: ARRAY
72981: PPUSH
72982: LD_VAR 0 7
72986: PUSH
72987: LD_INT 1
72989: ARRAY
72990: PUSH
72991: LD_INT 2
72993: ARRAY
72994: PPUSH
72995: CALL_OW 116
72999: GO 73290
// if path > tag then
73001: LD_VAR 0 2
73005: PUSH
73006: LD_VAR 0 9
73010: GREATER
73011: IFFALSE 73219
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
73013: LD_ADDR_VAR 0 6
73017: PUSH
73018: LD_VAR 0 5
73022: PPUSH
73023: LD_INT 91
73025: PUSH
73026: LD_VAR 0 4
73030: PUSH
73031: LD_INT 8
73033: PUSH
73034: EMPTY
73035: LIST
73036: LIST
73037: LIST
73038: PPUSH
73039: CALL_OW 72
73043: ST_TO_ADDR
// if nearEnemy then
73044: LD_VAR 0 6
73048: IFFALSE 73117
// begin if GetWeapon ( i ) = ru_time_lapser then
73050: LD_VAR 0 4
73054: PPUSH
73055: CALL_OW 264
73059: PUSH
73060: LD_INT 49
73062: EQUAL
73063: IFFALSE 73091
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
73065: LD_VAR 0 4
73069: PPUSH
73070: LD_VAR 0 6
73074: PPUSH
73075: LD_VAR 0 4
73079: PPUSH
73080: CALL_OW 74
73084: PPUSH
73085: CALL_OW 112
73089: GO 73115
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
73091: LD_VAR 0 4
73095: PPUSH
73096: LD_VAR 0 6
73100: PPUSH
73101: LD_VAR 0 4
73105: PPUSH
73106: CALL_OW 74
73110: PPUSH
73111: CALL_OW 115
// end else
73115: GO 73217
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
73117: LD_VAR 0 4
73121: PPUSH
73122: LD_VAR 0 2
73126: PUSH
73127: LD_VAR 0 9
73131: ARRAY
73132: PUSH
73133: LD_INT 1
73135: ARRAY
73136: PPUSH
73137: LD_VAR 0 2
73141: PUSH
73142: LD_VAR 0 9
73146: ARRAY
73147: PUSH
73148: LD_INT 2
73150: ARRAY
73151: PPUSH
73152: CALL_OW 297
73156: PUSH
73157: LD_INT 6
73159: GREATER
73160: IFFALSE 73203
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
73162: LD_VAR 0 4
73166: PPUSH
73167: LD_VAR 0 2
73171: PUSH
73172: LD_VAR 0 9
73176: ARRAY
73177: PUSH
73178: LD_INT 1
73180: ARRAY
73181: PPUSH
73182: LD_VAR 0 2
73186: PUSH
73187: LD_VAR 0 9
73191: ARRAY
73192: PUSH
73193: LD_INT 2
73195: ARRAY
73196: PPUSH
73197: CALL_OW 114
73201: GO 73217
// SetTag ( i , tag ) ;
73203: LD_VAR 0 4
73207: PPUSH
73208: LD_VAR 0 9
73212: PPUSH
73213: CALL_OW 109
// end else
73217: GO 73290
// if enemy then
73219: LD_VAR 0 5
73223: IFFALSE 73290
// begin if GetWeapon ( i ) = ru_time_lapser then
73225: LD_VAR 0 4
73229: PPUSH
73230: CALL_OW 264
73234: PUSH
73235: LD_INT 49
73237: EQUAL
73238: IFFALSE 73266
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
73240: LD_VAR 0 4
73244: PPUSH
73245: LD_VAR 0 5
73249: PPUSH
73250: LD_VAR 0 4
73254: PPUSH
73255: CALL_OW 74
73259: PPUSH
73260: CALL_OW 112
73264: GO 73290
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
73266: LD_VAR 0 4
73270: PPUSH
73271: LD_VAR 0 5
73275: PPUSH
73276: LD_VAR 0 4
73280: PPUSH
73281: CALL_OW 74
73285: PPUSH
73286: CALL_OW 115
// end ; end ;
73290: GO 72870
73292: POP
73293: POP
// end ;
73294: LD_VAR 0 3
73298: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
73299: LD_INT 0
73301: PPUSH
73302: PPUSH
73303: PPUSH
// if not unit or IsInUnit ( unit ) then
73304: LD_VAR 0 1
73308: NOT
73309: PUSH
73310: LD_VAR 0 1
73314: PPUSH
73315: CALL_OW 310
73319: OR
73320: IFFALSE 73324
// exit ;
73322: GO 73415
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
73324: LD_ADDR_VAR 0 4
73328: PUSH
73329: LD_VAR 0 1
73333: PPUSH
73334: CALL_OW 250
73338: PPUSH
73339: LD_VAR 0 2
73343: PPUSH
73344: LD_INT 1
73346: PPUSH
73347: CALL_OW 272
73351: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
73352: LD_ADDR_VAR 0 5
73356: PUSH
73357: LD_VAR 0 1
73361: PPUSH
73362: CALL_OW 251
73366: PPUSH
73367: LD_VAR 0 2
73371: PPUSH
73372: LD_INT 1
73374: PPUSH
73375: CALL_OW 273
73379: ST_TO_ADDR
// if ValidHex ( x , y ) then
73380: LD_VAR 0 4
73384: PPUSH
73385: LD_VAR 0 5
73389: PPUSH
73390: CALL_OW 488
73394: IFFALSE 73415
// ComTurnXY ( unit , x , y ) ;
73396: LD_VAR 0 1
73400: PPUSH
73401: LD_VAR 0 4
73405: PPUSH
73406: LD_VAR 0 5
73410: PPUSH
73411: CALL_OW 118
// end ;
73415: LD_VAR 0 3
73419: RET
// export function SeeUnits ( side , units ) ; var i ; begin
73420: LD_INT 0
73422: PPUSH
73423: PPUSH
// result := false ;
73424: LD_ADDR_VAR 0 3
73428: PUSH
73429: LD_INT 0
73431: ST_TO_ADDR
// if not units then
73432: LD_VAR 0 2
73436: NOT
73437: IFFALSE 73441
// exit ;
73439: GO 73486
// for i in units do
73441: LD_ADDR_VAR 0 4
73445: PUSH
73446: LD_VAR 0 2
73450: PUSH
73451: FOR_IN
73452: IFFALSE 73484
// if See ( side , i ) then
73454: LD_VAR 0 1
73458: PPUSH
73459: LD_VAR 0 4
73463: PPUSH
73464: CALL_OW 292
73468: IFFALSE 73482
// begin result := true ;
73470: LD_ADDR_VAR 0 3
73474: PUSH
73475: LD_INT 1
73477: ST_TO_ADDR
// exit ;
73478: POP
73479: POP
73480: GO 73486
// end ;
73482: GO 73451
73484: POP
73485: POP
// end ;
73486: LD_VAR 0 3
73490: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
73491: LD_INT 0
73493: PPUSH
73494: PPUSH
73495: PPUSH
73496: PPUSH
// if not unit or not points then
73497: LD_VAR 0 1
73501: NOT
73502: PUSH
73503: LD_VAR 0 2
73507: NOT
73508: OR
73509: IFFALSE 73513
// exit ;
73511: GO 73603
// dist := 99999 ;
73513: LD_ADDR_VAR 0 5
73517: PUSH
73518: LD_INT 99999
73520: ST_TO_ADDR
// for i in points do
73521: LD_ADDR_VAR 0 4
73525: PUSH
73526: LD_VAR 0 2
73530: PUSH
73531: FOR_IN
73532: IFFALSE 73601
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
73534: LD_ADDR_VAR 0 6
73538: PUSH
73539: LD_VAR 0 1
73543: PPUSH
73544: LD_VAR 0 4
73548: PUSH
73549: LD_INT 1
73551: ARRAY
73552: PPUSH
73553: LD_VAR 0 4
73557: PUSH
73558: LD_INT 2
73560: ARRAY
73561: PPUSH
73562: CALL_OW 297
73566: ST_TO_ADDR
// if tmpDist < dist then
73567: LD_VAR 0 6
73571: PUSH
73572: LD_VAR 0 5
73576: LESS
73577: IFFALSE 73599
// begin result := i ;
73579: LD_ADDR_VAR 0 3
73583: PUSH
73584: LD_VAR 0 4
73588: ST_TO_ADDR
// dist := tmpDist ;
73589: LD_ADDR_VAR 0 5
73593: PUSH
73594: LD_VAR 0 6
73598: ST_TO_ADDR
// end ; end ;
73599: GO 73531
73601: POP
73602: POP
// end ;
73603: LD_VAR 0 3
73607: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
73608: LD_INT 0
73610: PPUSH
// uc_side := side ;
73611: LD_ADDR_OWVAR 20
73615: PUSH
73616: LD_VAR 0 1
73620: ST_TO_ADDR
// uc_nation := 3 ;
73621: LD_ADDR_OWVAR 21
73625: PUSH
73626: LD_INT 3
73628: ST_TO_ADDR
// vc_chassis := 25 ;
73629: LD_ADDR_OWVAR 37
73633: PUSH
73634: LD_INT 25
73636: ST_TO_ADDR
// vc_engine := engine_siberite ;
73637: LD_ADDR_OWVAR 39
73641: PUSH
73642: LD_INT 3
73644: ST_TO_ADDR
// vc_control := control_computer ;
73645: LD_ADDR_OWVAR 38
73649: PUSH
73650: LD_INT 3
73652: ST_TO_ADDR
// vc_weapon := 59 ;
73653: LD_ADDR_OWVAR 40
73657: PUSH
73658: LD_INT 59
73660: ST_TO_ADDR
// result := CreateVehicle ;
73661: LD_ADDR_VAR 0 5
73665: PUSH
73666: CALL_OW 45
73670: ST_TO_ADDR
// SetDir ( result , d ) ;
73671: LD_VAR 0 5
73675: PPUSH
73676: LD_VAR 0 4
73680: PPUSH
73681: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
73685: LD_VAR 0 5
73689: PPUSH
73690: LD_VAR 0 2
73694: PPUSH
73695: LD_VAR 0 3
73699: PPUSH
73700: LD_INT 0
73702: PPUSH
73703: CALL_OW 48
// end ;
73707: LD_VAR 0 5
73711: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
73712: LD_INT 0
73714: PPUSH
73715: PPUSH
73716: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
73717: LD_ADDR_VAR 0 2
73721: PUSH
73722: LD_INT 0
73724: PUSH
73725: LD_INT 0
73727: PUSH
73728: LD_INT 0
73730: PUSH
73731: LD_INT 0
73733: PUSH
73734: EMPTY
73735: LIST
73736: LIST
73737: LIST
73738: LIST
73739: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
73740: LD_VAR 0 1
73744: NOT
73745: PUSH
73746: LD_VAR 0 1
73750: PPUSH
73751: CALL_OW 264
73755: PUSH
73756: LD_INT 12
73758: PUSH
73759: LD_INT 51
73761: PUSH
73762: LD_INT 32
73764: PUSH
73765: LD_INT 89
73767: PUSH
73768: EMPTY
73769: LIST
73770: LIST
73771: LIST
73772: LIST
73773: IN
73774: NOT
73775: OR
73776: IFFALSE 73780
// exit ;
73778: GO 73878
// for i := 1 to 3 do
73780: LD_ADDR_VAR 0 3
73784: PUSH
73785: DOUBLE
73786: LD_INT 1
73788: DEC
73789: ST_TO_ADDR
73790: LD_INT 3
73792: PUSH
73793: FOR_TO
73794: IFFALSE 73876
// begin tmp := GetCargo ( cargo , i ) ;
73796: LD_ADDR_VAR 0 4
73800: PUSH
73801: LD_VAR 0 1
73805: PPUSH
73806: LD_VAR 0 3
73810: PPUSH
73811: CALL_OW 289
73815: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
73816: LD_ADDR_VAR 0 2
73820: PUSH
73821: LD_VAR 0 2
73825: PPUSH
73826: LD_VAR 0 3
73830: PPUSH
73831: LD_VAR 0 4
73835: PPUSH
73836: CALL_OW 1
73840: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
73841: LD_ADDR_VAR 0 2
73845: PUSH
73846: LD_VAR 0 2
73850: PPUSH
73851: LD_INT 4
73853: PPUSH
73854: LD_VAR 0 2
73858: PUSH
73859: LD_INT 4
73861: ARRAY
73862: PUSH
73863: LD_VAR 0 4
73867: PLUS
73868: PPUSH
73869: CALL_OW 1
73873: ST_TO_ADDR
// end ;
73874: GO 73793
73876: POP
73877: POP
// end ;
73878: LD_VAR 0 2
73882: RET
// export function Length ( array ) ; begin
73883: LD_INT 0
73885: PPUSH
// result := array + 0 ;
73886: LD_ADDR_VAR 0 2
73890: PUSH
73891: LD_VAR 0 1
73895: PUSH
73896: LD_INT 0
73898: PLUS
73899: ST_TO_ADDR
// end ;
73900: LD_VAR 0 2
73904: RET
// export function PrepareArray ( array ) ; begin
73905: LD_INT 0
73907: PPUSH
// result := array diff 0 ;
73908: LD_ADDR_VAR 0 2
73912: PUSH
73913: LD_VAR 0 1
73917: PUSH
73918: LD_INT 0
73920: DIFF
73921: ST_TO_ADDR
// if not result [ 1 ] then
73922: LD_VAR 0 2
73926: PUSH
73927: LD_INT 1
73929: ARRAY
73930: NOT
73931: IFFALSE 73951
// result := Delete ( result , 1 ) ;
73933: LD_ADDR_VAR 0 2
73937: PUSH
73938: LD_VAR 0 2
73942: PPUSH
73943: LD_INT 1
73945: PPUSH
73946: CALL_OW 3
73950: ST_TO_ADDR
// end ;
73951: LD_VAR 0 2
73955: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
73956: LD_INT 0
73958: PPUSH
73959: PPUSH
73960: PPUSH
73961: PPUSH
// sibRocketRange := 25 ;
73962: LD_ADDR_VAR 0 6
73966: PUSH
73967: LD_INT 25
73969: ST_TO_ADDR
// result := false ;
73970: LD_ADDR_VAR 0 4
73974: PUSH
73975: LD_INT 0
73977: ST_TO_ADDR
// for i := 0 to 5 do
73978: LD_ADDR_VAR 0 5
73982: PUSH
73983: DOUBLE
73984: LD_INT 0
73986: DEC
73987: ST_TO_ADDR
73988: LD_INT 5
73990: PUSH
73991: FOR_TO
73992: IFFALSE 74059
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
73994: LD_VAR 0 1
73998: PPUSH
73999: LD_VAR 0 5
74003: PPUSH
74004: LD_VAR 0 6
74008: PPUSH
74009: CALL_OW 272
74013: PPUSH
74014: LD_VAR 0 2
74018: PPUSH
74019: LD_VAR 0 5
74023: PPUSH
74024: LD_VAR 0 6
74028: PPUSH
74029: CALL_OW 273
74033: PPUSH
74034: LD_VAR 0 3
74038: PPUSH
74039: CALL_OW 309
74043: IFFALSE 74057
// begin result := true ;
74045: LD_ADDR_VAR 0 4
74049: PUSH
74050: LD_INT 1
74052: ST_TO_ADDR
// exit ;
74053: POP
74054: POP
74055: GO 74061
// end ;
74057: GO 73991
74059: POP
74060: POP
// end ;
74061: LD_VAR 0 4
74065: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
74066: LD_INT 0
74068: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
74069: LD_VAR 0 1
74073: PPUSH
74074: LD_VAR 0 2
74078: PPUSH
74079: LD_INT 0
74081: PPUSH
74082: LD_INT 0
74084: PPUSH
74085: LD_INT 1
74087: PPUSH
74088: LD_INT 0
74090: PPUSH
74091: CALL_OW 587
// end ; end_of_file
74095: LD_VAR 0 3
74099: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
74100: LD_VAR 0 1
74104: PUSH
74105: LD_INT 200
74107: DOUBLE
74108: GREATEREQUAL
74109: IFFALSE 74117
74111: LD_INT 299
74113: DOUBLE
74114: LESSEQUAL
74115: IFTRUE 74119
74117: GO 74151
74119: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
74120: LD_VAR 0 1
74124: PPUSH
74125: LD_VAR 0 2
74129: PPUSH
74130: LD_VAR 0 3
74134: PPUSH
74135: LD_VAR 0 4
74139: PPUSH
74140: LD_VAR 0 5
74144: PPUSH
74145: CALL 28785 0 5
74149: GO 74228
74151: LD_INT 300
74153: DOUBLE
74154: GREATEREQUAL
74155: IFFALSE 74163
74157: LD_INT 399
74159: DOUBLE
74160: LESSEQUAL
74161: IFTRUE 74165
74163: GO 74227
74165: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
74166: LD_VAR 0 1
74170: PPUSH
74171: LD_VAR 0 2
74175: PPUSH
74176: LD_VAR 0 3
74180: PPUSH
74181: LD_VAR 0 4
74185: PPUSH
74186: LD_VAR 0 5
74190: PPUSH
74191: LD_VAR 0 6
74195: PPUSH
74196: LD_VAR 0 7
74200: PPUSH
74201: LD_VAR 0 8
74205: PPUSH
74206: LD_VAR 0 9
74210: PPUSH
74211: LD_VAR 0 10
74215: PPUSH
74216: LD_VAR 0 11
74220: PPUSH
74221: CALL 25118 0 11
74225: GO 74228
74227: POP
// end ;
74228: PPOPN 11
74230: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
74231: LD_VAR 0 1
74235: PPUSH
74236: LD_VAR 0 2
74240: PPUSH
74241: LD_VAR 0 3
74245: PPUSH
74246: LD_VAR 0 4
74250: PPUSH
74251: LD_VAR 0 5
74255: PPUSH
74256: CALL 28521 0 5
// end ; end_of_file
74260: PPOPN 5
74262: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
74263: LD_VAR 0 1
74267: PPUSH
74268: LD_VAR 0 2
74272: PPUSH
74273: LD_VAR 0 3
74277: PPUSH
74278: LD_VAR 0 4
74282: PPUSH
74283: LD_VAR 0 5
74287: PPUSH
74288: LD_VAR 0 6
74292: PPUSH
74293: CALL 12811 0 6
// end ;
74297: PPOPN 6
74299: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
74300: LD_INT 0
74302: PPUSH
// begin if not units then
74303: LD_VAR 0 1
74307: NOT
74308: IFFALSE 74312
// exit ;
74310: GO 74312
// end ;
74312: PPOPN 7
74314: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
74315: CALL 12782 0 0
// end ;
74319: PPOPN 1
74321: END
