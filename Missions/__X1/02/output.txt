// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 46 0 0
// CreateNature ;
  19: CALL 533 0 0
// PrepareAmericans ;
  23: CALL 830 0 0
// PrepareArabian ;
  27: CALL 11161 0 0
// if debug then
  31: LD_EXP 1
  35: IFFALSE 41
// DebugMode ;
  37: CALL 214 0 0
// Action ;
  41: CALL 4657 0 0
// end ;
  45: END
// export debug , prefix , missionStart , aviradzeSpotted , deltaSpotted , spottedBeforeRadio , sciSpotted , aviradzeQuestDone , sciCounterKill , usAlert , usActiveDefend , gladstoneEscaped , timeUntilFarmer , attackDeltaAllowed , trickyMove , usPatrol , trap , lostCounter ; function Init ; begin
  46: LD_INT 0
  48: PPUSH
// debug := false ;
  49: LD_ADDR_EXP 1
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// missionStart := false ;
  57: LD_ADDR_EXP 3
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// aviradzeSpotted := false ;
  65: LD_ADDR_EXP 4
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// deltaSpotted := false ;
  73: LD_ADDR_EXP 5
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// sciSpotted := false ;
  81: LD_ADDR_EXP 7
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// sciCounterKill := 0 ;
  89: LD_ADDR_EXP 9
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// aviradzeQuestDone := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// attackDeltaAllowed := false ;
 105: LD_ADDR_EXP 14
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usAlert := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// usActiveDefend := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// usPatrol := [ ] ;
 129: LD_ADDR_EXP 16
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// timeUntilFarmer := [ 40 40$00 , 30 30$00 , 20 20$00 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 13
 140: PUSH
 141: LD_INT 84000
 143: PUSH
 144: LD_INT 63000
 146: PUSH
 147: LD_INT 42000
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: PUSH
 155: LD_OWVAR 67
 159: ARRAY
 160: ST_TO_ADDR
// trickyMove := false ;
 161: LD_ADDR_EXP 15
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// gladstoneEscaped := false ;
 169: LD_ADDR_EXP 12
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// prefix := 01_ ;
 177: LD_ADDR_EXP 2
 181: PUSH
 182: LD_STRING 01_
 184: ST_TO_ADDR
// trap := 0 ;
 185: LD_ADDR_EXP 17
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// lostCounter := false ;
 193: LD_ADDR_EXP 18
 197: PUSH
 198: LD_INT 0
 200: ST_TO_ADDR
// spottedBeforeRadio := false ;
 201: LD_ADDR_EXP 6
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// end ;
 209: LD_VAR 0 1
 213: RET
// function DebugMode ; begin
 214: LD_INT 0
 216: PPUSH
// FogOff ( 1 ) ;
 217: LD_INT 1
 219: PPUSH
 220: CALL_OW 344
// Difficulty := 2 ;
 224: LD_ADDR_OWVAR 67
 228: PUSH
 229: LD_INT 2
 231: ST_TO_ADDR
// end ; end_of_file
 232: LD_VAR 0 1
 236: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 237: LD_INT 0
 239: PPUSH
// uc_side := side ;
 240: LD_ADDR_OWVAR 20
 244: PUSH
 245: LD_VAR 0 1
 249: ST_TO_ADDR
// uc_nation := nation ;
 250: LD_ADDR_OWVAR 21
 254: PUSH
 255: LD_VAR 0 2
 259: ST_TO_ADDR
// vc_chassis := chassis ;
 260: LD_ADDR_OWVAR 37
 264: PUSH
 265: LD_VAR 0 3
 269: ST_TO_ADDR
// vc_engine := engine ;
 270: LD_ADDR_OWVAR 39
 274: PUSH
 275: LD_VAR 0 4
 279: ST_TO_ADDR
// vc_control := control ;
 280: LD_ADDR_OWVAR 38
 284: PUSH
 285: LD_VAR 0 5
 289: ST_TO_ADDR
// vc_weapon := weapon ;
 290: LD_ADDR_OWVAR 40
 294: PUSH
 295: LD_VAR 0 6
 299: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 300: LD_ADDR_OWVAR 41
 304: PUSH
 305: LD_VAR 0 7
 309: ST_TO_ADDR
// result := CreateVehicle ;
 310: LD_ADDR_VAR 0 8
 314: PUSH
 315: CALL_OW 45
 319: ST_TO_ADDR
// end ;
 320: LD_VAR 0 8
 324: RET
// export function SayX ( units , ident ) ; var i ; begin
 325: LD_INT 0
 327: PPUSH
 328: PPUSH
// result := false ;
 329: LD_ADDR_VAR 0 3
 333: PUSH
 334: LD_INT 0
 336: ST_TO_ADDR
// if not units then
 337: LD_VAR 0 1
 341: NOT
 342: IFFALSE 346
// exit ;
 344: GO 400
// for i in units do
 346: LD_ADDR_VAR 0 4
 350: PUSH
 351: LD_VAR 0 1
 355: PUSH
 356: FOR_IN
 357: IFFALSE 398
// if IsOk ( i ) then
 359: LD_VAR 0 4
 363: PPUSH
 364: CALL_OW 302
 368: IFFALSE 396
// begin Say ( i , ident ) ;
 370: LD_VAR 0 4
 374: PPUSH
 375: LD_VAR 0 2
 379: PPUSH
 380: CALL_OW 88
// result := i ;
 384: LD_ADDR_VAR 0 3
 388: PUSH
 389: LD_VAR 0 4
 393: ST_TO_ADDR
// break ;
 394: GO 398
// end ;
 396: GO 356
 398: POP
 399: POP
// end ;
 400: LD_VAR 0 3
 404: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 405: LD_INT 0
 407: PPUSH
 408: PPUSH
// InitUc ;
 409: CALL_OW 18
// InitHc ;
 413: CALL_OW 19
// uc_side := 0 ;
 417: LD_ADDR_OWVAR 20
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// uc_nation := 0 ;
 425: LD_ADDR_OWVAR 21
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// for i = 1 to amount do
 433: LD_ADDR_VAR 0 4
 437: PUSH
 438: DOUBLE
 439: LD_INT 1
 441: DEC
 442: ST_TO_ADDR
 443: LD_VAR 0 2
 447: PUSH
 448: FOR_TO
 449: IFFALSE 522
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 451: LD_ADDR_OWVAR 29
 455: PUSH
 456: LD_INT 9
 458: PPUSH
 459: LD_INT 12
 461: PPUSH
 462: CALL_OW 12
 466: PUSH
 467: LD_INT 9
 469: PPUSH
 470: LD_INT 12
 472: PPUSH
 473: CALL_OW 12
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: ST_TO_ADDR
// hc_agressivity := 0 ;
 482: LD_ADDR_OWVAR 35
 486: PUSH
 487: LD_INT 0
 489: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 490: LD_INT 0
 492: PPUSH
 493: LD_INT 12
 495: PPUSH
 496: LD_INT 1
 498: PPUSH
 499: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 503: CALL_OW 44
 507: PPUSH
 508: LD_VAR 0 1
 512: PPUSH
 513: LD_INT 0
 515: PPUSH
 516: CALL_OW 49
// end ;
 520: GO 448
 522: POP
 523: POP
// InitHc ;
 524: CALL_OW 19
// end ;
 528: LD_VAR 0 3
 532: RET
// export function CreateNature ; var i ; begin
 533: LD_INT 0
 535: PPUSH
 536: PPUSH
// SpawnApeman ( forest , 9 ) ;
 537: LD_INT 1
 539: PPUSH
 540: LD_INT 9
 542: PPUSH
 543: CALL 405 0 2
// for i := 1 to 4 do
 547: LD_ADDR_VAR 0 2
 551: PUSH
 552: DOUBLE
 553: LD_INT 1
 555: DEC
 556: ST_TO_ADDR
 557: LD_INT 4
 559: PUSH
 560: FOR_TO
 561: IFFALSE 596
// begin hc_class := 21 ;
 563: LD_ADDR_OWVAR 28
 567: PUSH
 568: LD_INT 21
 570: ST_TO_ADDR
// hc_gallery :=  ;
 571: LD_ADDR_OWVAR 33
 575: PUSH
 576: LD_STRING 
 578: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 579: CALL_OW 44
 583: PPUSH
 584: LD_INT 1
 586: PPUSH
 587: LD_INT 0
 589: PPUSH
 590: CALL_OW 49
// end ;
 594: GO 560
 596: POP
 597: POP
// for i := 1 to 2 do
 598: LD_ADDR_VAR 0 2
 602: PUSH
 603: DOUBLE
 604: LD_INT 1
 606: DEC
 607: ST_TO_ADDR
 608: LD_INT 2
 610: PUSH
 611: FOR_TO
 612: IFFALSE 647
// begin hc_class := 18 ;
 614: LD_ADDR_OWVAR 28
 618: PUSH
 619: LD_INT 18
 621: ST_TO_ADDR
// hc_gallery :=  ;
 622: LD_ADDR_OWVAR 33
 626: PUSH
 627: LD_STRING 
 629: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 630: CALL_OW 44
 634: PPUSH
 635: LD_INT 1
 637: PPUSH
 638: LD_INT 0
 640: PPUSH
 641: CALL_OW 49
// end ;
 645: GO 611
 647: POP
 648: POP
// for i := 1 to 3 do
 649: LD_ADDR_VAR 0 2
 653: PUSH
 654: DOUBLE
 655: LD_INT 1
 657: DEC
 658: ST_TO_ADDR
 659: LD_INT 3
 661: PUSH
 662: FOR_TO
 663: IFFALSE 698
// begin hc_class := 13 ;
 665: LD_ADDR_OWVAR 28
 669: PUSH
 670: LD_INT 13
 672: ST_TO_ADDR
// hc_gallery :=  ;
 673: LD_ADDR_OWVAR 33
 677: PUSH
 678: LD_STRING 
 680: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 681: CALL_OW 44
 685: PPUSH
 686: LD_INT 1
 688: PPUSH
 689: LD_INT 0
 691: PPUSH
 692: CALL_OW 49
// end ;
 696: GO 662
 698: POP
 699: POP
// for i := 1 to 4 do
 700: LD_ADDR_VAR 0 2
 704: PUSH
 705: DOUBLE
 706: LD_INT 1
 708: DEC
 709: ST_TO_ADDR
 710: LD_INT 4
 712: PUSH
 713: FOR_TO
 714: IFFALSE 749
// begin hc_class := class_frog ;
 716: LD_ADDR_OWVAR 28
 720: PUSH
 721: LD_INT 19
 723: ST_TO_ADDR
// hc_gallery :=  ;
 724: LD_ADDR_OWVAR 33
 728: PUSH
 729: LD_STRING 
 731: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 732: CALL_OW 44
 736: PPUSH
 737: LD_INT 8
 739: PPUSH
 740: LD_INT 0
 742: PPUSH
 743: CALL_OW 49
// end ;
 747: GO 713
 749: POP
 750: POP
// end ;
 751: LD_VAR 0 1
 755: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 756: LD_INT 0
 758: PPUSH
 759: PPUSH
 760: PPUSH
// if not observer or not unit then
 761: LD_VAR 0 1
 765: NOT
 766: PUSH
 767: LD_VAR 0 2
 771: NOT
 772: OR
 773: IFFALSE 777
// exit ;
 775: GO 825
// if not See ( GetSide ( observer ) , unit ) then
 777: LD_VAR 0 1
 781: PPUSH
 782: CALL_OW 255
 786: PPUSH
 787: LD_VAR 0 2
 791: PPUSH
 792: CALL_OW 292
 796: NOT
 797: IFFALSE 801
// exit ;
 799: GO 825
// result := GetDistUnits ( observer , unit ) < 12 ;
 801: LD_ADDR_VAR 0 3
 805: PUSH
 806: LD_VAR 0 1
 810: PPUSH
 811: LD_VAR 0 2
 815: PPUSH
 816: CALL_OW 296
 820: PUSH
 821: LD_INT 12
 823: LESS
 824: ST_TO_ADDR
// end ; end_of_file
 825: LD_VAR 0 3
 829: RET
// export Gladstone , Lynch ; export usForces , usSci ; export function PrepareAmericans ; var i , un , veh , tmp , arm ; begin
 830: LD_INT 0
 832: PPUSH
 833: PPUSH
 834: PPUSH
 835: PPUSH
 836: PPUSH
 837: PPUSH
// usForces := [ ] ;
 838: LD_ADDR_EXP 21
 842: PUSH
 843: EMPTY
 844: ST_TO_ADDR
// usSci := [ ] ;
 845: LD_ADDR_EXP 22
 849: PUSH
 850: EMPTY
 851: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
 852: LD_INT 1
 854: PPUSH
 855: LD_STRING Delta
 857: PPUSH
 858: CALL_OW 500
// SetResourceType ( GetBase ( Delta ) , mat_cans , 400 ) ;
 862: LD_INT 1
 864: PPUSH
 865: CALL_OW 274
 869: PPUSH
 870: LD_INT 1
 872: PPUSH
 873: LD_INT 400
 875: PPUSH
 876: CALL_OW 277
// SetResourceType ( GetBase ( Delta ) , mat_oil , 80 ) ;
 880: LD_INT 1
 882: PPUSH
 883: CALL_OW 274
 887: PPUSH
 888: LD_INT 2
 890: PPUSH
 891: LD_INT 80
 893: PPUSH
 894: CALL_OW 277
// uc_side := 1 ;
 898: LD_ADDR_OWVAR 20
 902: PUSH
 903: LD_INT 1
 905: ST_TO_ADDR
// uc_nation := 1 ;
 906: LD_ADDR_OWVAR 21
 910: PUSH
 911: LD_INT 1
 913: ST_TO_ADDR
// InitHc ;
 914: CALL_OW 19
// hc_importance := 0 ;
 918: LD_ADDR_OWVAR 32
 922: PUSH
 923: LD_INT 0
 925: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
 926: LD_ADDR_EXP 20
 930: PUSH
 931: LD_STRING Lynch
 933: PPUSH
 934: LD_INT 0
 936: PPUSH
 937: LD_STRING 
 939: PPUSH
 940: CALL 29580 0 3
 944: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false ,  ) ;
 945: LD_ADDR_EXP 19
 949: PUSH
 950: LD_STRING Gladstone
 952: PPUSH
 953: LD_INT 0
 955: PPUSH
 956: LD_STRING 
 958: PPUSH
 959: CALL 29580 0 3
 963: ST_TO_ADDR
// PlaceHumanInUnit ( Lynch , Delta ) ;
 964: LD_EXP 20
 968: PPUSH
 969: LD_INT 1
 971: PPUSH
 972: CALL_OW 52
// PlaceHumanInUnit ( Gladstone , usLab ) ;
 976: LD_EXP 19
 980: PPUSH
 981: LD_INT 3
 983: PPUSH
 984: CALL_OW 52
// for i := 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
 988: LD_ADDR_VAR 0 2
 992: PUSH
 993: DOUBLE
 994: LD_INT 1
 996: DEC
 997: ST_TO_ADDR
 998: LD_INT 1
1000: PUSH
1001: LD_INT 2
1003: PUSH
1004: LD_INT 2
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: LIST
1011: PUSH
1012: LD_OWVAR 67
1016: ARRAY
1017: PUSH
1018: FOR_TO
1019: IFFALSE 1065
// begin PrepareHuman ( false , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
1021: LD_INT 0
1023: PPUSH
1024: LD_INT 2
1026: PPUSH
1027: LD_INT 1
1029: PUSH
1030: LD_INT 2
1032: PUSH
1033: LD_INT 2
1035: PUSH
1036: EMPTY
1037: LIST
1038: LIST
1039: LIST
1040: PUSH
1041: LD_OWVAR 67
1045: ARRAY
1046: PPUSH
1047: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , Delta ) ;
1051: CALL_OW 44
1055: PPUSH
1056: LD_INT 1
1058: PPUSH
1059: CALL_OW 52
// end ;
1063: GO 1018
1065: POP
1066: POP
// for i := 1 to 7 - Difficulty do
1067: LD_ADDR_VAR 0 2
1071: PUSH
1072: DOUBLE
1073: LD_INT 1
1075: DEC
1076: ST_TO_ADDR
1077: LD_INT 7
1079: PUSH
1080: LD_OWVAR 67
1084: MINUS
1085: PUSH
1086: FOR_TO
1087: IFFALSE 1172
// begin PrepareHuman ( false , 4 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
1089: LD_INT 0
1091: PPUSH
1092: LD_INT 4
1094: PPUSH
1095: LD_INT 1
1097: PUSH
1098: LD_INT 2
1100: PUSH
1101: LD_INT 2
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: LIST
1108: PUSH
1109: LD_OWVAR 67
1113: ARRAY
1114: PPUSH
1115: CALL_OW 380
// un := CreateHuman ;
1119: LD_ADDR_VAR 0 3
1123: PUSH
1124: CALL_OW 44
1128: ST_TO_ADDR
// PlaceHumanInUnit ( un , usLab ) ;
1129: LD_VAR 0 3
1133: PPUSH
1134: LD_INT 3
1136: PPUSH
1137: CALL_OW 52
// usSci := Replace ( usSci , usSci + 1 , un ) ;
1141: LD_ADDR_EXP 22
1145: PUSH
1146: LD_EXP 22
1150: PPUSH
1151: LD_EXP 22
1155: PUSH
1156: LD_INT 1
1158: PLUS
1159: PPUSH
1160: LD_VAR 0 3
1164: PPUSH
1165: CALL_OW 1
1169: ST_TO_ADDR
// end ;
1170: GO 1086
1172: POP
1173: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
1174: LD_ADDR_VAR 0 6
1178: PUSH
1179: LD_INT 22
1181: PUSH
1182: LD_INT 1
1184: PUSH
1185: EMPTY
1186: LIST
1187: LIST
1188: PUSH
1189: LD_INT 30
1191: PUSH
1192: LD_INT 4
1194: PUSH
1195: EMPTY
1196: LIST
1197: LIST
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: PPUSH
1203: CALL_OW 69
1207: ST_TO_ADDR
// for i := 1 to 3 + [ 1 , 2 , 2 ] [ Difficulty ] do
1208: LD_ADDR_VAR 0 2
1212: PUSH
1213: DOUBLE
1214: LD_INT 1
1216: DEC
1217: ST_TO_ADDR
1218: LD_INT 3
1220: PUSH
1221: LD_INT 1
1223: PUSH
1224: LD_INT 2
1226: PUSH
1227: LD_INT 2
1229: PUSH
1230: EMPTY
1231: LIST
1232: LIST
1233: LIST
1234: PUSH
1235: LD_OWVAR 67
1239: ARRAY
1240: PLUS
1241: PUSH
1242: FOR_TO
1243: IFFALSE 1321
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
1245: LD_INT 0
1247: PPUSH
1248: LD_INT 1
1250: PPUSH
1251: LD_INT 1
1253: PUSH
1254: LD_INT 2
1256: PUSH
1257: LD_INT 3
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: LIST
1264: PUSH
1265: LD_OWVAR 67
1269: ARRAY
1270: PPUSH
1271: CALL_OW 380
// un := CreateHuman ;
1275: LD_ADDR_VAR 0 3
1279: PUSH
1280: CALL_OW 44
1284: ST_TO_ADDR
// usForces := usForces ^ un ;
1285: LD_ADDR_EXP 21
1289: PUSH
1290: LD_EXP 21
1294: PUSH
1295: LD_VAR 0 3
1299: ADD
1300: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm [ 1 ] ) ;
1301: LD_VAR 0 3
1305: PPUSH
1306: LD_VAR 0 6
1310: PUSH
1311: LD_INT 1
1313: ARRAY
1314: PPUSH
1315: CALL_OW 52
// end ;
1319: GO 1242
1321: POP
1322: POP
// if Difficulty > 1 then
1323: LD_OWVAR 67
1327: PUSH
1328: LD_INT 1
1330: GREATER
1331: IFFALSE 1426
// begin for i := 1 to Difficulty do
1333: LD_ADDR_VAR 0 2
1337: PUSH
1338: DOUBLE
1339: LD_INT 1
1341: DEC
1342: ST_TO_ADDR
1343: LD_OWVAR 67
1347: PUSH
1348: FOR_TO
1349: IFFALSE 1424
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
1351: LD_INT 0
1353: PPUSH
1354: LD_INT 1
1356: PPUSH
1357: LD_INT 1
1359: PUSH
1360: LD_INT 2
1362: PUSH
1363: LD_INT 2
1365: PUSH
1366: EMPTY
1367: LIST
1368: LIST
1369: LIST
1370: PUSH
1371: LD_OWVAR 67
1375: ARRAY
1376: PPUSH
1377: CALL_OW 380
// un := CreateHuman ;
1381: LD_ADDR_VAR 0 3
1385: PUSH
1386: CALL_OW 44
1390: ST_TO_ADDR
// usForces := usForces ^ un ;
1391: LD_ADDR_EXP 21
1395: PUSH
1396: LD_EXP 21
1400: PUSH
1401: LD_VAR 0 3
1405: ADD
1406: ST_TO_ADDR
// PlaceUnitArea ( un , usAdditionalDefenceArea , false ) ;
1407: LD_VAR 0 3
1411: PPUSH
1412: LD_INT 9
1414: PPUSH
1415: LD_INT 0
1417: PPUSH
1418: CALL_OW 49
// end ;
1422: GO 1348
1424: POP
1425: POP
// end ; PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 100 ) ;
1426: LD_INT 1
1428: PPUSH
1429: LD_INT 1
1431: PPUSH
1432: LD_INT 1
1434: PPUSH
1435: LD_INT 2
1437: PPUSH
1438: LD_INT 1
1440: PPUSH
1441: LD_INT 2
1443: PPUSH
1444: LD_INT 100
1446: PPUSH
1447: CALL 237 0 7
// veh := CreateVehicle ;
1451: LD_ADDR_VAR 0 4
1455: PUSH
1456: CALL_OW 45
1460: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1461: LD_VAR 0 4
1465: PPUSH
1466: LD_INT 2
1468: PPUSH
1469: CALL_OW 233
// PlaceUnitXY ( veh , 43 , 24 , false ) ;
1473: LD_VAR 0 4
1477: PPUSH
1478: LD_INT 43
1480: PPUSH
1481: LD_INT 24
1483: PPUSH
1484: LD_INT 0
1486: PPUSH
1487: CALL_OW 48
// end ;
1491: LD_VAR 0 1
1495: RET
// export function SendSciToForest ; var i , j , k , tmp , xy ; begin
1496: LD_INT 0
1498: PPUSH
1499: PPUSH
1500: PPUSH
1501: PPUSH
1502: PPUSH
1503: PPUSH
// if not usSci then
1504: LD_EXP 22
1508: NOT
1509: IFFALSE 1513
// exit ;
1511: GO 1687
// xy := AreaToList ( tameArea , 0 ) ;
1513: LD_ADDR_VAR 0 6
1517: PUSH
1518: LD_INT 5
1520: PPUSH
1521: LD_INT 0
1523: PPUSH
1524: CALL_OW 517
1528: ST_TO_ADDR
// for i in usSci do
1529: LD_ADDR_VAR 0 2
1533: PUSH
1534: LD_EXP 22
1538: PUSH
1539: FOR_IN
1540: IFFALSE 1685
// begin k := rand ( 1 , xy [ 1 ] ) ;
1542: LD_ADDR_VAR 0 4
1546: PUSH
1547: LD_INT 1
1549: PPUSH
1550: LD_VAR 0 6
1554: PUSH
1555: LD_INT 1
1557: ARRAY
1558: PPUSH
1559: CALL_OW 12
1563: ST_TO_ADDR
// ComExitBuilding ( i ) ;
1564: LD_VAR 0 2
1568: PPUSH
1569: CALL_OW 122
// AddComMoveXY ( i , xy [ 1 ] [ k ] , xy [ 2 ] [ k ] ) ;
1573: LD_VAR 0 2
1577: PPUSH
1578: LD_VAR 0 6
1582: PUSH
1583: LD_INT 1
1585: ARRAY
1586: PUSH
1587: LD_VAR 0 4
1591: ARRAY
1592: PPUSH
1593: LD_VAR 0 6
1597: PUSH
1598: LD_INT 2
1600: ARRAY
1601: PUSH
1602: LD_VAR 0 4
1606: ARRAY
1607: PPUSH
1608: CALL_OW 171
// for j := 1 to 2 do
1612: LD_ADDR_VAR 0 3
1616: PUSH
1617: DOUBLE
1618: LD_INT 1
1620: DEC
1621: ST_TO_ADDR
1622: LD_INT 2
1624: PUSH
1625: FOR_TO
1626: IFFALSE 1681
// begin tmp := Delete ( xy [ j ] , k ) ;
1628: LD_ADDR_VAR 0 5
1632: PUSH
1633: LD_VAR 0 6
1637: PUSH
1638: LD_VAR 0 3
1642: ARRAY
1643: PPUSH
1644: LD_VAR 0 4
1648: PPUSH
1649: CALL_OW 3
1653: ST_TO_ADDR
// xy := Replace ( xy , j , tmp ) ;
1654: LD_ADDR_VAR 0 6
1658: PUSH
1659: LD_VAR 0 6
1663: PPUSH
1664: LD_VAR 0 3
1668: PPUSH
1669: LD_VAR 0 5
1673: PPUSH
1674: CALL_OW 1
1678: ST_TO_ADDR
// end ;
1679: GO 1625
1681: POP
1682: POP
// end ;
1683: GO 1539
1685: POP
1686: POP
// end ;
1687: LD_VAR 0 1
1691: RET
// every 0 0$5 + 0 0$10 trigger aviradzeSpotted and usSci and not usAlert and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do var i , x , y , d , ape ;
1692: LD_EXP 4
1696: PUSH
1697: LD_EXP 22
1701: AND
1702: PUSH
1703: LD_EXP 10
1707: NOT
1708: AND
1709: PUSH
1710: LD_INT 22
1712: PUSH
1713: LD_INT 0
1715: PUSH
1716: EMPTY
1717: LIST
1718: LIST
1719: PUSH
1720: LD_INT 25
1722: PUSH
1723: LD_INT 12
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: PPUSH
1734: CALL_OW 69
1738: AND
1739: IFFALSE 2231
1741: GO 1743
1743: DISABLE
1744: LD_INT 0
1746: PPUSH
1747: PPUSH
1748: PPUSH
1749: PPUSH
1750: PPUSH
// begin enable ;
1751: ENABLE
// if UnitFilter ( usSci , [ f_or , [ f_hastask ] , [ f_inside ] ] ) then
1752: LD_EXP 22
1756: PPUSH
1757: LD_INT 2
1759: PUSH
1760: LD_INT 60
1762: PUSH
1763: EMPTY
1764: LIST
1765: PUSH
1766: LD_INT 54
1768: PUSH
1769: EMPTY
1770: LIST
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: LIST
1776: PPUSH
1777: CALL_OW 72
1781: IFFALSE 1785
// exit ;
1783: GO 2231
// for i in usSci do
1785: LD_ADDR_VAR 0 1
1789: PUSH
1790: LD_EXP 22
1794: PUSH
1795: FOR_IN
1796: IFFALSE 2229
// begin if not HasTask ( i ) and GetLives ( i ) = 1000 then
1798: LD_VAR 0 1
1802: PPUSH
1803: CALL_OW 314
1807: NOT
1808: PUSH
1809: LD_VAR 0 1
1813: PPUSH
1814: CALL_OW 256
1818: PUSH
1819: LD_INT 1000
1821: EQUAL
1822: AND
1823: IFFALSE 2030
// begin ape := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) , i ) ;
1825: LD_ADDR_VAR 0 5
1829: PUSH
1830: LD_INT 22
1832: PUSH
1833: LD_INT 0
1835: PUSH
1836: EMPTY
1837: LIST
1838: LIST
1839: PUSH
1840: LD_INT 25
1842: PUSH
1843: LD_INT 12
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: PPUSH
1854: CALL_OW 69
1858: PPUSH
1859: LD_VAR 0 1
1863: PPUSH
1864: CALL_OW 74
1868: ST_TO_ADDR
// if GetDistUnits ( i , ape ) < 10 then
1869: LD_VAR 0 1
1873: PPUSH
1874: LD_VAR 0 5
1878: PPUSH
1879: CALL_OW 296
1883: PUSH
1884: LD_INT 10
1886: LESS
1887: IFFALSE 1920
// ComTameXY ( i , GetX ( ape ) , GetY ( ape ) ) else
1889: LD_VAR 0 1
1893: PPUSH
1894: LD_VAR 0 5
1898: PPUSH
1899: CALL_OW 250
1903: PPUSH
1904: LD_VAR 0 5
1908: PPUSH
1909: CALL_OW 251
1913: PPUSH
1914: CALL_OW 131
1918: GO 2030
// begin d := rand ( 0 , 5 ) ;
1920: LD_ADDR_VAR 0 4
1924: PUSH
1925: LD_INT 0
1927: PPUSH
1928: LD_INT 5
1930: PPUSH
1931: CALL_OW 12
1935: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 3 ) ;
1936: LD_ADDR_VAR 0 2
1940: PUSH
1941: LD_VAR 0 1
1945: PPUSH
1946: CALL_OW 250
1950: PPUSH
1951: LD_VAR 0 4
1955: PPUSH
1956: LD_INT 3
1958: PPUSH
1959: CALL_OW 272
1963: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 3 ) ;
1964: LD_ADDR_VAR 0 3
1968: PUSH
1969: LD_VAR 0 1
1973: PPUSH
1974: CALL_OW 251
1978: PPUSH
1979: LD_VAR 0 4
1983: PPUSH
1984: LD_INT 3
1986: PPUSH
1987: CALL_OW 273
1991: ST_TO_ADDR
// if not ValidHex ( x , y ) then
1992: LD_VAR 0 2
1996: PPUSH
1997: LD_VAR 0 3
2001: PPUSH
2002: CALL_OW 488
2006: NOT
2007: IFFALSE 2011
// continue ;
2009: GO 1795
// ComMoveXY ( i , x , y ) ;
2011: LD_VAR 0 1
2015: PPUSH
2016: LD_VAR 0 2
2020: PPUSH
2021: LD_VAR 0 3
2025: PPUSH
2026: CALL_OW 111
// end ; end ; if GetLives ( i ) < 900 and GetDistUnitXY ( i , 37 , 23 ) > 10 then
2030: LD_VAR 0 1
2034: PPUSH
2035: CALL_OW 256
2039: PUSH
2040: LD_INT 900
2042: LESS
2043: PUSH
2044: LD_VAR 0 1
2048: PPUSH
2049: LD_INT 37
2051: PPUSH
2052: LD_INT 23
2054: PPUSH
2055: CALL_OW 297
2059: PUSH
2060: LD_INT 10
2062: GREATER
2063: AND
2064: IFFALSE 2140
// begin if IsOk ( Gladstone ) and IsInUnit ( Gladstone ) then
2066: LD_EXP 19
2070: PPUSH
2071: CALL_OW 302
2075: PUSH
2076: LD_EXP 19
2080: PPUSH
2081: CALL_OW 310
2085: AND
2086: IFFALSE 2097
// ComExitBuilding ( Gladstone ) ;
2088: LD_EXP 19
2092: PPUSH
2093: CALL_OW 122
// AddComHeal ( Gladstone , i ) ;
2097: LD_EXP 19
2101: PPUSH
2102: LD_VAR 0 1
2106: PPUSH
2107: CALL_OW 188
// AddComEnterUnit ( Gladstone , usLab ) ;
2111: LD_EXP 19
2115: PPUSH
2116: LD_INT 3
2118: PPUSH
2119: CALL_OW 180
// ComMoveXY ( i , 37 , 23 ) ;
2123: LD_VAR 0 1
2127: PPUSH
2128: LD_INT 37
2130: PPUSH
2131: LD_INT 23
2133: PPUSH
2134: CALL_OW 111
// end else
2138: GO 2227
// if GetLives ( i ) = 1000 then
2140: LD_VAR 0 1
2144: PPUSH
2145: CALL_OW 256
2149: PUSH
2150: LD_INT 1000
2152: EQUAL
2153: IFFALSE 2227
// begin if SideShoot ( i ) = 2 then
2155: LD_VAR 0 1
2159: PPUSH
2160: CALL_OW 503
2164: PUSH
2165: LD_INT 2
2167: EQUAL
2168: IFFALSE 2215
// begin if not usAlert then
2170: LD_EXP 10
2174: NOT
2175: IFFALSE 2185
// usAlert := true ;
2177: LD_ADDR_EXP 10
2181: PUSH
2182: LD_INT 1
2184: ST_TO_ADDR
// AddComEnterUnit ( i , usLab ) ;
2185: LD_VAR 0 1
2189: PPUSH
2190: LD_INT 3
2192: PPUSH
2193: CALL_OW 180
// usSci := usSci diff i ;
2197: LD_ADDR_EXP 22
2201: PUSH
2202: LD_EXP 22
2206: PUSH
2207: LD_VAR 0 1
2211: DIFF
2212: ST_TO_ADDR
// end else
2213: GO 2227
// ComMoveToArea ( i , tameArea ) ;
2215: LD_VAR 0 1
2219: PPUSH
2220: LD_INT 5
2222: PPUSH
2223: CALL_OW 113
// end ; end ;
2227: GO 1795
2229: POP
2230: POP
// end ;
2231: PPOPN 5
2233: END
// every 0 0$1 trigger not usAlert and ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 999 ] ] ] ) or FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) ) do
2234: LD_EXP 10
2238: NOT
2239: PUSH
2240: LD_INT 22
2242: PUSH
2243: LD_INT 1
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: PUSH
2250: LD_INT 21
2252: PUSH
2253: LD_INT 3
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: PUSH
2260: LD_INT 3
2262: PUSH
2263: LD_INT 57
2265: PUSH
2266: EMPTY
2267: LIST
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PUSH
2273: LD_INT 3
2275: PUSH
2276: LD_INT 24
2278: PUSH
2279: LD_INT 999
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: PUSH
2290: EMPTY
2291: LIST
2292: LIST
2293: LIST
2294: LIST
2295: PPUSH
2296: CALL_OW 69
2300: PUSH
2301: LD_INT 7
2303: PPUSH
2304: LD_INT 22
2306: PUSH
2307: LD_INT 2
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: PPUSH
2314: CALL_OW 70
2318: OR
2319: AND
2320: IFFALSE 2333
2322: GO 2324
2324: DISABLE
// usAlert := true ;
2325: LD_ADDR_EXP 10
2329: PUSH
2330: LD_INT 1
2332: ST_TO_ADDR
2333: END
// every 0 0$1 trigger usAlert do var i , b , arm ;
2334: LD_EXP 10
2338: IFFALSE 2685
2340: GO 2342
2342: DISABLE
2343: LD_INT 0
2345: PPUSH
2346: PPUSH
2347: PPUSH
// begin usActiveDefend := true ;
2348: LD_ADDR_EXP 11
2352: PUSH
2353: LD_INT 1
2355: ST_TO_ADDR
// if not usForces then
2356: LD_EXP 21
2360: NOT
2361: IFFALSE 2365
// exit ;
2363: GO 2685
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
2365: LD_ADDR_VAR 0 3
2369: PUSH
2370: LD_INT 22
2372: PUSH
2373: LD_INT 1
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: PUSH
2380: LD_INT 30
2382: PUSH
2383: LD_INT 4
2385: PUSH
2386: EMPTY
2387: LIST
2388: LIST
2389: PUSH
2390: EMPTY
2391: LIST
2392: LIST
2393: PPUSH
2394: CALL_OW 69
2398: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
2399: LD_ADDR_VAR 0 2
2403: PUSH
2404: LD_INT 22
2406: PUSH
2407: LD_INT 1
2409: PUSH
2410: EMPTY
2411: LIST
2412: LIST
2413: PUSH
2414: LD_INT 30
2416: PUSH
2417: LD_INT 31
2419: PUSH
2420: EMPTY
2421: LIST
2422: LIST
2423: PUSH
2424: EMPTY
2425: LIST
2426: LIST
2427: PPUSH
2428: CALL_OW 69
2432: ST_TO_ADDR
// ComExitBuilding ( Lynch ) ;
2433: LD_EXP 20
2437: PPUSH
2438: CALL_OW 122
// AddComEnterUnit ( Lynch , arm [ 1 ] ) ;
2442: LD_EXP 20
2446: PPUSH
2447: LD_VAR 0 3
2451: PUSH
2452: LD_INT 1
2454: ARRAY
2455: PPUSH
2456: CALL_OW 180
// if IsOk ( Gladstone ) then
2460: LD_EXP 19
2464: PPUSH
2465: CALL_OW 302
2469: IFFALSE 2510
// begin ComExitBuilding ( Gladstone ) ;
2471: LD_EXP 19
2475: PPUSH
2476: CALL_OW 122
// AddComEnterUnit ( Gladstone , arm [ 1 ] ) ;
2480: LD_EXP 19
2484: PPUSH
2485: LD_VAR 0 3
2489: PUSH
2490: LD_INT 1
2492: ARRAY
2493: PPUSH
2494: CALL_OW 180
// AddComChangeProfession ( Gladstone , class_soldier ) ;
2498: LD_EXP 19
2502: PPUSH
2503: LD_INT 1
2505: PPUSH
2506: CALL_OW 183
// end ; ComExitBuilding ( usForces [ 1 ] ) ;
2510: LD_EXP 21
2514: PUSH
2515: LD_INT 1
2517: ARRAY
2518: PPUSH
2519: CALL_OW 122
// AddComEnterUnit ( usForces [ 1 ] , b [ 1 ] ) ;
2523: LD_EXP 21
2527: PUSH
2528: LD_INT 1
2530: ARRAY
2531: PPUSH
2532: LD_VAR 0 2
2536: PUSH
2537: LD_INT 1
2539: ARRAY
2540: PPUSH
2541: CALL_OW 180
// ComExitBuilding ( usForces [ 2 ] ) ;
2545: LD_EXP 21
2549: PUSH
2550: LD_INT 2
2552: ARRAY
2553: PPUSH
2554: CALL_OW 122
// AddComEnterUnit ( usForces [ 2 ] , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
2558: LD_EXP 21
2562: PUSH
2563: LD_INT 2
2565: ARRAY
2566: PPUSH
2567: LD_INT 22
2569: PUSH
2570: LD_INT 1
2572: PUSH
2573: EMPTY
2574: LIST
2575: LIST
2576: PUSH
2577: LD_INT 30
2579: PUSH
2580: LD_INT 32
2582: PUSH
2583: EMPTY
2584: LIST
2585: LIST
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: PPUSH
2591: CALL_OW 69
2595: PUSH
2596: LD_INT 1
2598: ARRAY
2599: PPUSH
2600: CALL_OW 180
// if b > 1 and usForces > 2 then
2604: LD_VAR 0 2
2608: PUSH
2609: LD_INT 1
2611: GREATER
2612: PUSH
2613: LD_EXP 21
2617: PUSH
2618: LD_INT 2
2620: GREATER
2621: AND
2622: IFFALSE 2685
// begin repeat wait ( 0 0$1 ) ;
2624: LD_INT 35
2626: PPUSH
2627: CALL_OW 67
// until BuildingStatus ( b [ 2 ] ) <> bs_build ;
2631: LD_VAR 0 2
2635: PUSH
2636: LD_INT 2
2638: ARRAY
2639: PPUSH
2640: CALL_OW 461
2644: PUSH
2645: LD_INT 1
2647: NONEQUAL
2648: IFFALSE 2624
// ComExitBuilding ( usForces [ 3 ] ) ;
2650: LD_EXP 21
2654: PUSH
2655: LD_INT 3
2657: ARRAY
2658: PPUSH
2659: CALL_OW 122
// AddComEnterUnit ( usForces [ 3 ] , b [ 2 ] ) ;
2663: LD_EXP 21
2667: PUSH
2668: LD_INT 3
2670: ARRAY
2671: PPUSH
2672: LD_VAR 0 2
2676: PUSH
2677: LD_INT 2
2679: ARRAY
2680: PPUSH
2681: CALL_OW 180
// end ; end ;
2685: PPOPN 3
2687: END
// every 0 0$1 trigger GetLives ( usLab ) < 999 and usAlert and usForces do var i ;
2688: LD_INT 3
2690: PPUSH
2691: CALL_OW 256
2695: PUSH
2696: LD_INT 999
2698: LESS
2699: PUSH
2700: LD_EXP 10
2704: AND
2705: PUSH
2706: LD_EXP 21
2710: AND
2711: IFFALSE 2882
2713: GO 2715
2715: DISABLE
2716: LD_INT 0
2718: PPUSH
// begin for i in usForces do
2719: LD_ADDR_VAR 0 1
2723: PUSH
2724: LD_EXP 21
2728: PUSH
2729: FOR_IN
2730: IFFALSE 2769
// begin if IsInUnit ( i ) then
2732: LD_VAR 0 1
2736: PPUSH
2737: CALL_OW 310
2741: IFFALSE 2752
// ComExitBuilding ( i ) ;
2743: LD_VAR 0 1
2747: PPUSH
2748: CALL_OW 122
// AddComAgressiveMove ( i , 31 , 8 ) ;
2752: LD_VAR 0 1
2756: PPUSH
2757: LD_INT 31
2759: PPUSH
2760: LD_INT 8
2762: PPUSH
2763: CALL_OW 174
// end ;
2767: GO 2729
2769: POP
2770: POP
// wait ( 0 0$8 ) ;
2771: LD_INT 280
2773: PPUSH
2774: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) then
2778: LD_INT 22
2780: PUSH
2781: LD_INT 2
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: PUSH
2788: LD_INT 91
2790: PUSH
2791: LD_INT 3
2793: PUSH
2794: LD_INT 14
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: LIST
2801: PUSH
2802: EMPTY
2803: LIST
2804: LIST
2805: PPUSH
2806: CALL_OW 69
2810: IFFALSE 2860
// ComAttackUnit ( usForces , FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) [ 1 ] ) else
2812: LD_EXP 21
2816: PPUSH
2817: LD_INT 22
2819: PUSH
2820: LD_INT 2
2822: PUSH
2823: EMPTY
2824: LIST
2825: LIST
2826: PUSH
2827: LD_INT 91
2829: PUSH
2830: LD_INT 3
2832: PUSH
2833: LD_INT 14
2835: PUSH
2836: EMPTY
2837: LIST
2838: LIST
2839: LIST
2840: PUSH
2841: EMPTY
2842: LIST
2843: LIST
2844: PPUSH
2845: CALL_OW 69
2849: PUSH
2850: LD_INT 1
2852: ARRAY
2853: PPUSH
2854: CALL_OW 115
2858: GO 2882
// begin wait ( 0 0$20 ) ;
2860: LD_INT 700
2862: PPUSH
2863: CALL_OW 67
// AddComMoveXY ( usForces , 39 , 19 ) ;
2867: LD_EXP 21
2871: PPUSH
2872: LD_INT 39
2874: PPUSH
2875: LD_INT 19
2877: PPUSH
2878: CALL_OW 171
// end ; end ;
2882: PPOPN 1
2884: END
// every 0 0$3 trigger ( GetDistUnits ( Heike , Delta ) < 10 or GetLives ( usLab ) < 999 ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do var tmp , veh ;
2885: LD_EXP 23
2889: PPUSH
2890: LD_INT 1
2892: PPUSH
2893: CALL_OW 296
2897: PUSH
2898: LD_INT 10
2900: LESS
2901: PUSH
2902: LD_INT 3
2904: PPUSH
2905: CALL_OW 256
2909: PUSH
2910: LD_INT 999
2912: LESS
2913: OR
2914: PUSH
2915: LD_INT 22
2917: PUSH
2918: LD_INT 1
2920: PUSH
2921: EMPTY
2922: LIST
2923: LIST
2924: PUSH
2925: LD_INT 25
2927: PUSH
2928: LD_INT 2
2930: PUSH
2931: EMPTY
2932: LIST
2933: LIST
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: PPUSH
2939: CALL_OW 69
2943: AND
2944: IFFALSE 3058
2946: GO 2948
2948: DISABLE
2949: LD_INT 0
2951: PPUSH
2952: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
2953: LD_ADDR_VAR 0 1
2957: PUSH
2958: LD_INT 22
2960: PUSH
2961: LD_INT 1
2963: PUSH
2964: EMPTY
2965: LIST
2966: LIST
2967: PUSH
2968: LD_INT 25
2970: PUSH
2971: LD_INT 2
2973: PUSH
2974: EMPTY
2975: LIST
2976: LIST
2977: PUSH
2978: EMPTY
2979: LIST
2980: LIST
2981: PPUSH
2982: CALL_OW 69
2986: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2987: LD_ADDR_VAR 0 2
2991: PUSH
2992: LD_INT 22
2994: PUSH
2995: LD_INT 1
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: PUSH
3002: LD_INT 21
3004: PUSH
3005: LD_INT 2
3007: PUSH
3008: EMPTY
3009: LIST
3010: LIST
3011: PUSH
3012: LD_INT 58
3014: PUSH
3015: EMPTY
3016: LIST
3017: PUSH
3018: EMPTY
3019: LIST
3020: LIST
3021: LIST
3022: PPUSH
3023: CALL_OW 69
3027: ST_TO_ADDR
// if not tmp then
3028: LD_VAR 0 1
3032: NOT
3033: IFFALSE 3037
// exit ;
3035: GO 3058
// ComExitBuilding ( tmp ) ;
3037: LD_VAR 0 1
3041: PPUSH
3042: CALL_OW 122
// AddComDismantle ( tmp , usLab ) ;
3046: LD_VAR 0 1
3050: PPUSH
3051: LD_INT 3
3053: PPUSH
3054: CALL_OW 227
// end ;
3058: PPOPN 2
3060: END
// every 0 0$1 trigger usAlert and FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) do var i , tmp ;
3061: LD_EXP 10
3065: PUSH
3066: LD_INT 7
3068: PPUSH
3069: LD_INT 22
3071: PUSH
3072: LD_INT 1
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: PUSH
3079: LD_INT 21
3081: PUSH
3082: LD_INT 1
3084: PUSH
3085: EMPTY
3086: LIST
3087: LIST
3088: PUSH
3089: LD_INT 3
3091: PUSH
3092: LD_INT 24
3094: PUSH
3095: LD_INT 600
3097: PUSH
3098: EMPTY
3099: LIST
3100: LIST
3101: PUSH
3102: EMPTY
3103: LIST
3104: LIST
3105: PUSH
3106: EMPTY
3107: LIST
3108: LIST
3109: LIST
3110: PPUSH
3111: CALL_OW 70
3115: AND
3116: IFFALSE 3244
3118: GO 3120
3120: DISABLE
3121: LD_INT 0
3123: PPUSH
3124: PPUSH
// begin enable ;
3125: ENABLE
// tmp := FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) ;
3126: LD_ADDR_VAR 0 2
3130: PUSH
3131: LD_INT 7
3133: PPUSH
3134: LD_INT 22
3136: PUSH
3137: LD_INT 1
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: PUSH
3144: LD_INT 21
3146: PUSH
3147: LD_INT 1
3149: PUSH
3150: EMPTY
3151: LIST
3152: LIST
3153: PUSH
3154: LD_INT 3
3156: PUSH
3157: LD_INT 24
3159: PUSH
3160: LD_INT 600
3162: PUSH
3163: EMPTY
3164: LIST
3165: LIST
3166: PUSH
3167: EMPTY
3168: LIST
3169: LIST
3170: PUSH
3171: EMPTY
3172: LIST
3173: LIST
3174: LIST
3175: PPUSH
3176: CALL_OW 70
3180: ST_TO_ADDR
// if not tmp then
3181: LD_VAR 0 2
3185: NOT
3186: IFFALSE 3190
// exit ;
3188: GO 3244
// for i in tmp do
3190: LD_ADDR_VAR 0 1
3194: PUSH
3195: LD_VAR 0 2
3199: PUSH
3200: FOR_IN
3201: IFFALSE 3242
// if IsInUnit ( i ) then
3203: LD_VAR 0 1
3207: PPUSH
3208: CALL_OW 310
3212: IFFALSE 3225
// ComExitBuilding ( i ) else
3214: LD_VAR 0 1
3218: PPUSH
3219: CALL_OW 122
3223: GO 3240
// ComMoveXY ( i , 48 , 74 ) ;
3225: LD_VAR 0 1
3229: PPUSH
3230: LD_INT 48
3232: PPUSH
3233: LD_INT 74
3235: PPUSH
3236: CALL_OW 111
3240: GO 3200
3242: POP
3243: POP
// end ;
3244: PPOPN 2
3246: END
// every 12 12$00 do var i , un , tmp ;
3247: GO 3249
3249: DISABLE
3250: LD_INT 0
3252: PPUSH
3253: PPUSH
3254: PPUSH
// begin tmp := [ ] ;
3255: LD_ADDR_VAR 0 3
3259: PUSH
3260: EMPTY
3261: ST_TO_ADDR
// uc_side := 1 ;
3262: LD_ADDR_OWVAR 20
3266: PUSH
3267: LD_INT 1
3269: ST_TO_ADDR
// uc_nation := 1 ;
3270: LD_ADDR_OWVAR 21
3274: PUSH
3275: LD_INT 1
3277: ST_TO_ADDR
// case Difficulty of 1 :
3278: LD_OWVAR 67
3282: PUSH
3283: LD_INT 1
3285: DOUBLE
3286: EQUAL
3287: IFTRUE 3291
3289: GO 3394
3291: POP
// begin wait ( 1 1$00 ) ;
3292: LD_INT 2100
3294: PPUSH
3295: CALL_OW 67
// for i := 1 to 2 do
3299: LD_ADDR_VAR 0 1
3303: PUSH
3304: DOUBLE
3305: LD_INT 1
3307: DEC
3308: ST_TO_ADDR
3309: LD_INT 2
3311: PUSH
3312: FOR_TO
3313: IFFALSE 3390
// begin PrepareHuman ( false , [ 1 , 4 ] [ i mod 2 + 1 ] , 1 ) ;
3315: LD_INT 0
3317: PPUSH
3318: LD_INT 1
3320: PUSH
3321: LD_INT 4
3323: PUSH
3324: EMPTY
3325: LIST
3326: LIST
3327: PUSH
3328: LD_VAR 0 1
3332: PUSH
3333: LD_INT 2
3335: MOD
3336: PUSH
3337: LD_INT 1
3339: PLUS
3340: ARRAY
3341: PPUSH
3342: LD_INT 1
3344: PPUSH
3345: CALL_OW 380
// un := CreateHuman ;
3349: LD_ADDR_VAR 0 2
3353: PUSH
3354: CALL_OW 44
3358: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3359: LD_ADDR_VAR 0 3
3363: PUSH
3364: LD_VAR 0 3
3368: PPUSH
3369: LD_VAR 0 3
3373: PUSH
3374: LD_INT 1
3376: PLUS
3377: PPUSH
3378: LD_VAR 0 2
3382: PPUSH
3383: CALL_OW 1
3387: ST_TO_ADDR
// end ;
3388: GO 3312
3390: POP
3391: POP
// end ; 2 :
3392: GO 3788
3394: LD_INT 2
3396: DOUBLE
3397: EQUAL
3398: IFTRUE 3402
3400: GO 3536
3402: POP
// begin wait ( 0 0$30 ) ;
3403: LD_INT 1050
3405: PPUSH
3406: CALL_OW 67
// for i := 1 to 2 do
3410: LD_ADDR_VAR 0 1
3414: PUSH
3415: DOUBLE
3416: LD_INT 1
3418: DEC
3419: ST_TO_ADDR
3420: LD_INT 2
3422: PUSH
3423: FOR_TO
3424: IFFALSE 3480
// begin PrepareHuman ( false , 1 , 2 ) ;
3426: LD_INT 0
3428: PPUSH
3429: LD_INT 1
3431: PPUSH
3432: LD_INT 2
3434: PPUSH
3435: CALL_OW 380
// un := CreateHuman ;
3439: LD_ADDR_VAR 0 2
3443: PUSH
3444: CALL_OW 44
3448: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3449: LD_ADDR_VAR 0 3
3453: PUSH
3454: LD_VAR 0 3
3458: PPUSH
3459: LD_VAR 0 3
3463: PUSH
3464: LD_INT 1
3466: PLUS
3467: PPUSH
3468: LD_VAR 0 2
3472: PPUSH
3473: CALL_OW 1
3477: ST_TO_ADDR
// end ;
3478: GO 3423
3480: POP
3481: POP
// PrepareHuman ( false , 4 , 2 ) ;
3482: LD_INT 0
3484: PPUSH
3485: LD_INT 4
3487: PPUSH
3488: LD_INT 2
3490: PPUSH
3491: CALL_OW 380
// un := CreateHuman ;
3495: LD_ADDR_VAR 0 2
3499: PUSH
3500: CALL_OW 44
3504: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3505: LD_ADDR_VAR 0 3
3509: PUSH
3510: LD_VAR 0 3
3514: PPUSH
3515: LD_VAR 0 3
3519: PUSH
3520: LD_INT 1
3522: PLUS
3523: PPUSH
3524: LD_VAR 0 2
3528: PPUSH
3529: CALL_OW 1
3533: ST_TO_ADDR
// end ; 3 :
3534: GO 3788
3536: LD_INT 3
3538: DOUBLE
3539: EQUAL
3540: IFTRUE 3544
3542: GO 3787
3544: POP
// begin for i := 1 to 2 do
3545: LD_ADDR_VAR 0 1
3549: PUSH
3550: DOUBLE
3551: LD_INT 1
3553: DEC
3554: ST_TO_ADDR
3555: LD_INT 2
3557: PUSH
3558: FOR_TO
3559: IFFALSE 3615
// begin PrepareHuman ( false , 1 , 2 ) ;
3561: LD_INT 0
3563: PPUSH
3564: LD_INT 1
3566: PPUSH
3567: LD_INT 2
3569: PPUSH
3570: CALL_OW 380
// un := CreateHuman ;
3574: LD_ADDR_VAR 0 2
3578: PUSH
3579: CALL_OW 44
3583: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3584: LD_ADDR_VAR 0 3
3588: PUSH
3589: LD_VAR 0 3
3593: PPUSH
3594: LD_VAR 0 3
3598: PUSH
3599: LD_INT 1
3601: PLUS
3602: PPUSH
3603: LD_VAR 0 2
3607: PPUSH
3608: CALL_OW 1
3612: ST_TO_ADDR
// end ;
3613: GO 3558
3615: POP
3616: POP
// PrepareHuman ( false , 4 , 2 ) ;
3617: LD_INT 0
3619: PPUSH
3620: LD_INT 4
3622: PPUSH
3623: LD_INT 2
3625: PPUSH
3626: CALL_OW 380
// un := CreateHuman ;
3630: LD_ADDR_VAR 0 2
3634: PUSH
3635: CALL_OW 44
3639: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3640: LD_ADDR_VAR 0 3
3644: PUSH
3645: LD_VAR 0 3
3649: PPUSH
3650: LD_VAR 0 3
3654: PUSH
3655: LD_INT 1
3657: PLUS
3658: PPUSH
3659: LD_VAR 0 2
3663: PPUSH
3664: CALL_OW 1
3668: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_machine_gun , 90 ) ;
3669: LD_INT 1
3671: PPUSH
3672: LD_INT 1
3674: PPUSH
3675: LD_INT 2
3677: PPUSH
3678: LD_INT 2
3680: PPUSH
3681: LD_INT 1
3683: PPUSH
3684: LD_INT 2
3686: PPUSH
3687: LD_INT 90
3689: PPUSH
3690: CALL 237 0 7
// un := CreateVehicle ;
3694: LD_ADDR_VAR 0 2
3698: PUSH
3699: CALL_OW 45
3703: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3704: LD_ADDR_VAR 0 3
3708: PUSH
3709: LD_VAR 0 3
3713: PPUSH
3714: LD_VAR 0 3
3718: PUSH
3719: LD_INT 1
3721: PLUS
3722: PPUSH
3723: LD_VAR 0 2
3727: PPUSH
3728: CALL_OW 1
3732: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
3733: LD_INT 0
3735: PPUSH
3736: LD_INT 1
3738: PPUSH
3739: LD_INT 2
3741: PPUSH
3742: CALL_OW 380
// un := CreateHuman ;
3746: LD_ADDR_VAR 0 2
3750: PUSH
3751: CALL_OW 44
3755: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3756: LD_ADDR_VAR 0 3
3760: PUSH
3761: LD_VAR 0 3
3765: PPUSH
3766: LD_VAR 0 3
3770: PUSH
3771: LD_INT 1
3773: PLUS
3774: PPUSH
3775: LD_VAR 0 2
3779: PPUSH
3780: CALL_OW 1
3784: ST_TO_ADDR
// end ; end ;
3785: GO 3788
3787: POP
// for i := 1 to tmp do
3788: LD_ADDR_VAR 0 1
3792: PUSH
3793: DOUBLE
3794: LD_INT 1
3796: DEC
3797: ST_TO_ADDR
3798: LD_VAR 0 3
3802: PUSH
3803: FOR_TO
3804: IFFALSE 3969
// begin SetDir ( tmp [ i ] , 1 ) ;
3806: LD_VAR 0 3
3810: PUSH
3811: LD_VAR 0 1
3815: ARRAY
3816: PPUSH
3817: LD_INT 1
3819: PPUSH
3820: CALL_OW 233
// if GetType ( tmp [ i ] ) = unit_human then
3824: LD_VAR 0 3
3828: PUSH
3829: LD_VAR 0 1
3833: ARRAY
3834: PPUSH
3835: CALL_OW 247
3839: PUSH
3840: LD_INT 1
3842: EQUAL
3843: IFFALSE 3871
// PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) else
3845: LD_VAR 0 3
3849: PUSH
3850: LD_VAR 0 1
3854: ARRAY
3855: PPUSH
3856: LD_INT 28
3858: PPUSH
3859: LD_INT 52
3861: PPUSH
3862: LD_INT 0
3864: PPUSH
3865: CALL_OW 48
3869: GO 3939
// begin PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) ;
3871: LD_VAR 0 3
3875: PUSH
3876: LD_VAR 0 1
3880: ARRAY
3881: PPUSH
3882: LD_INT 28
3884: PPUSH
3885: LD_INT 52
3887: PPUSH
3888: LD_INT 0
3890: PPUSH
3891: CALL_OW 48
// i := i + 1 ;
3895: LD_ADDR_VAR 0 1
3899: PUSH
3900: LD_VAR 0 1
3904: PUSH
3905: LD_INT 1
3907: PLUS
3908: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ i ] , tmp [ i - 1 ] ) ;
3909: LD_VAR 0 3
3913: PUSH
3914: LD_VAR 0 1
3918: ARRAY
3919: PPUSH
3920: LD_VAR 0 3
3924: PUSH
3925: LD_VAR 0 1
3929: PUSH
3930: LD_INT 1
3932: MINUS
3933: ARRAY
3934: PPUSH
3935: CALL_OW 52
// end ; ComMoveXY ( tmp [ i ] , 43 , 56 ) ;
3939: LD_VAR 0 3
3943: PUSH
3944: LD_VAR 0 1
3948: ARRAY
3949: PPUSH
3950: LD_INT 43
3952: PPUSH
3953: LD_INT 56
3955: PPUSH
3956: CALL_OW 111
// wait ( 0 0$2 ) ;
3960: LD_INT 70
3962: PPUSH
3963: CALL_OW 67
// end ;
3967: GO 3803
3969: POP
3970: POP
// wait ( 0 0$2 ) ;
3971: LD_INT 70
3973: PPUSH
3974: CALL_OW 67
// if not FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) then
3978: LD_INT 7
3980: PPUSH
3981: LD_INT 22
3983: PUSH
3984: LD_INT 2
3986: PUSH
3987: EMPTY
3988: LIST
3989: LIST
3990: PPUSH
3991: CALL_OW 70
3995: NOT
3996: IFFALSE 4194
// begin AddComAgressiveMove ( tmp , 35 , 24 ) ;
3998: LD_VAR 0 3
4002: PPUSH
4003: LD_INT 35
4005: PPUSH
4006: LD_INT 24
4008: PPUSH
4009: CALL_OW 174
// usForces := usForces union UnitFilter ( tmp , [ f_class , 1 ] ) ;
4013: LD_ADDR_EXP 21
4017: PUSH
4018: LD_EXP 21
4022: PUSH
4023: LD_VAR 0 3
4027: PPUSH
4028: LD_INT 25
4030: PUSH
4031: LD_INT 1
4033: PUSH
4034: EMPTY
4035: LIST
4036: LIST
4037: PPUSH
4038: CALL_OW 72
4042: UNION
4043: ST_TO_ADDR
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
4044: LD_INT 22
4046: PUSH
4047: LD_INT 1
4049: PUSH
4050: EMPTY
4051: LIST
4052: LIST
4053: PUSH
4054: LD_INT 30
4056: PUSH
4057: LD_INT 4
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: PUSH
4064: EMPTY
4065: LIST
4066: LIST
4067: PPUSH
4068: CALL_OW 69
4072: PUSH
4073: LD_INT 1
4075: ARRAY
4076: PPUSH
4077: CALL_OW 313
4081: PUSH
4082: LD_INT 6
4084: LESS
4085: IFFALSE 4144
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 1 ] ) , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
4087: LD_VAR 0 3
4091: PPUSH
4092: LD_INT 25
4094: PUSH
4095: LD_INT 1
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PPUSH
4102: CALL_OW 72
4106: PPUSH
4107: LD_INT 22
4109: PUSH
4110: LD_INT 1
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: PUSH
4117: LD_INT 30
4119: PUSH
4120: LD_INT 4
4122: PUSH
4123: EMPTY
4124: LIST
4125: LIST
4126: PUSH
4127: EMPTY
4128: LIST
4129: LIST
4130: PPUSH
4131: CALL_OW 69
4135: PUSH
4136: LD_INT 1
4138: ARRAY
4139: PPUSH
4140: CALL_OW 180
// if UnitFilter ( tmp , [ f_class , 4 ] ) then
4144: LD_VAR 0 3
4148: PPUSH
4149: LD_INT 25
4151: PUSH
4152: LD_INT 4
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: PPUSH
4159: CALL_OW 72
4163: IFFALSE 4192
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 4 ] ) , usLab ) ;
4165: LD_VAR 0 3
4169: PPUSH
4170: LD_INT 25
4172: PUSH
4173: LD_INT 4
4175: PUSH
4176: EMPTY
4177: LIST
4178: LIST
4179: PPUSH
4180: CALL_OW 72
4184: PPUSH
4185: LD_INT 3
4187: PPUSH
4188: CALL_OW 180
// end else
4192: GO 4469
// begin tmp := tmp union FilterUnitsInArea ( retreatArea , [ f_side , 1 ] ) ;
4194: LD_ADDR_VAR 0 3
4198: PUSH
4199: LD_VAR 0 3
4203: PUSH
4204: LD_INT 6
4206: PPUSH
4207: LD_INT 22
4209: PUSH
4210: LD_INT 1
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: PPUSH
4217: CALL_OW 70
4221: UNION
4222: ST_TO_ADDR
// ComMoveXY ( tmp , 45 , 54 ) ;
4223: LD_VAR 0 3
4227: PPUSH
4228: LD_INT 45
4230: PPUSH
4231: LD_INT 54
4233: PPUSH
4234: CALL_OW 111
// wait ( 0 0$3 ) ;
4238: LD_INT 105
4240: PPUSH
4241: CALL_OW 67
// AddComAgressiveMove ( tmp diff UnitFilter ( tmp , [ f_class , 4 ] ) , 35 , 24 ) ;
4245: LD_VAR 0 3
4249: PUSH
4250: LD_VAR 0 3
4254: PPUSH
4255: LD_INT 25
4257: PUSH
4258: LD_INT 4
4260: PUSH
4261: EMPTY
4262: LIST
4263: LIST
4264: PPUSH
4265: CALL_OW 72
4269: DIFF
4270: PPUSH
4271: LD_INT 35
4273: PPUSH
4274: LD_INT 24
4276: PPUSH
4277: CALL_OW 174
// AddComMoveXY ( UnitFilter ( tmp , [ f_class , 4 ] ) , 42 , 49 ) ;
4281: LD_VAR 0 3
4285: PPUSH
4286: LD_INT 25
4288: PUSH
4289: LD_INT 4
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: PPUSH
4296: CALL_OW 72
4300: PPUSH
4301: LD_INT 42
4303: PPUSH
4304: LD_INT 49
4306: PPUSH
4307: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4311: LD_INT 35
4313: PPUSH
4314: CALL_OW 67
// for i in tmp do
4318: LD_ADDR_VAR 0 1
4322: PUSH
4323: LD_VAR 0 3
4327: PUSH
4328: FOR_IN
4329: IFFALSE 4460
// if IsDead ( i ) then
4331: LD_VAR 0 1
4335: PPUSH
4336: CALL_OW 301
4340: IFFALSE 4360
// tmp := tmp diff i else
4342: LD_ADDR_VAR 0 3
4346: PUSH
4347: LD_VAR 0 3
4351: PUSH
4352: LD_VAR 0 1
4356: DIFF
4357: ST_TO_ADDR
4358: GO 4458
// if GetClass ( i ) = 1 then
4360: LD_VAR 0 1
4364: PPUSH
4365: CALL_OW 257
4369: PUSH
4370: LD_INT 1
4372: EQUAL
4373: IFFALSE 4458
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 42 , 49 ) > 6 then
4375: LD_VAR 0 1
4379: PPUSH
4380: CALL_OW 256
4384: PUSH
4385: LD_INT 600
4387: LESS
4388: PUSH
4389: LD_VAR 0 1
4393: PPUSH
4394: LD_INT 42
4396: PPUSH
4397: LD_INT 49
4399: PPUSH
4400: CALL_OW 297
4404: PUSH
4405: LD_INT 6
4407: GREATER
4408: AND
4409: IFFALSE 4428
// ComMoveXY ( i , 42 , 49 ) else
4411: LD_VAR 0 1
4415: PPUSH
4416: LD_INT 42
4418: PPUSH
4419: LD_INT 49
4421: PPUSH
4422: CALL_OW 111
4426: GO 4458
// if GetLives ( i ) = 1000 then
4428: LD_VAR 0 1
4432: PPUSH
4433: CALL_OW 256
4437: PUSH
4438: LD_INT 1000
4440: EQUAL
4441: IFFALSE 4458
// ComAgressiveMove ( i , 36 , 25 ) ;
4443: LD_VAR 0 1
4447: PPUSH
4448: LD_INT 36
4450: PPUSH
4451: LD_INT 25
4453: PPUSH
4454: CALL_OW 114
// end ;
4458: GO 4328
4460: POP
4461: POP
// until not tmp ;
4462: LD_VAR 0 3
4466: NOT
4467: IFFALSE 4311
// end ; end ;
4469: PPOPN 3
4471: END
// every 1 1$30 trigger FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) and not attackDeltaAllowed do var i , un , veh ;
4472: LD_INT 7
4474: PPUSH
4475: LD_INT 22
4477: PUSH
4478: LD_INT 2
4480: PUSH
4481: EMPTY
4482: LIST
4483: LIST
4484: PPUSH
4485: CALL_OW 70
4489: PUSH
4490: LD_EXP 14
4494: NOT
4495: AND
4496: IFFALSE 4654
4498: GO 4500
4500: DISABLE
4501: LD_INT 0
4503: PPUSH
4504: PPUSH
4505: PPUSH
// begin for i := 1 to 2 do
4506: LD_ADDR_VAR 0 1
4510: PUSH
4511: DOUBLE
4512: LD_INT 1
4514: DEC
4515: ST_TO_ADDR
4516: LD_INT 2
4518: PUSH
4519: FOR_TO
4520: IFFALSE 4652
// begin wait ( 0 0$3 ) ;
4522: LD_INT 105
4524: PPUSH
4525: CALL_OW 67
// uc_side := 1 ;
4529: LD_ADDR_OWVAR 20
4533: PUSH
4534: LD_INT 1
4536: ST_TO_ADDR
// uc_nation := 1 ;
4537: LD_ADDR_OWVAR 21
4541: PUSH
4542: LD_INT 1
4544: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 90 ) ;
4545: LD_INT 1
4547: PPUSH
4548: LD_INT 1
4550: PPUSH
4551: LD_INT 2
4553: PPUSH
4554: LD_INT 1
4556: PPUSH
4557: LD_INT 1
4559: PPUSH
4560: LD_INT 4
4562: PPUSH
4563: LD_INT 90
4565: PPUSH
4566: CALL 237 0 7
// veh := CreateVehicle ;
4570: LD_ADDR_VAR 0 3
4574: PUSH
4575: CALL_OW 45
4579: ST_TO_ADDR
// PlaceUnitXY ( veh , 29 , 52 , false ) ;
4580: LD_VAR 0 3
4584: PPUSH
4585: LD_INT 29
4587: PPUSH
4588: LD_INT 52
4590: PPUSH
4591: LD_INT 0
4593: PPUSH
4594: CALL_OW 48
// PrepareHuman ( false , 3 , 3 ) ;
4598: LD_INT 0
4600: PPUSH
4601: LD_INT 3
4603: PPUSH
4604: LD_INT 3
4606: PPUSH
4607: CALL_OW 380
// un := CreateHuman ;
4611: LD_ADDR_VAR 0 2
4615: PUSH
4616: CALL_OW 44
4620: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4621: LD_VAR 0 2
4625: PPUSH
4626: LD_VAR 0 3
4630: PPUSH
4631: CALL_OW 52
// ComAgressiveMove ( veh , 36 , 25 ) ;
4635: LD_VAR 0 3
4639: PPUSH
4640: LD_INT 36
4642: PPUSH
4643: LD_INT 25
4645: PPUSH
4646: CALL_OW 114
// end ;
4650: GO 4519
4652: POP
4653: POP
// end ; end_of_file
4654: PPOPN 3
4656: END
// export function Action ; var i , tmp ; begin
4657: LD_INT 0
4659: PPUSH
4660: PPUSH
4661: PPUSH
// InGameOn ;
4662: CALL_OW 8
// DoNotAttack ( 2 , usLab ) ;
4666: LD_INT 2
4668: PPUSH
4669: LD_INT 3
4671: PPUSH
4672: CALL_OW 471
// ComMoveXY ( Heike , 78 , 61 ) ;
4676: LD_EXP 23
4680: PPUSH
4681: LD_INT 78
4683: PPUSH
4684: LD_INT 61
4686: PPUSH
4687: CALL_OW 111
// if Mike then
4691: LD_EXP 25
4695: IFFALSE 4712
// ComMoveXY ( Mike , 80 , 66 ) ;
4697: LD_EXP 25
4701: PPUSH
4702: LD_INT 80
4704: PPUSH
4705: LD_INT 66
4707: PPUSH
4708: CALL_OW 111
// if Givi then
4712: LD_EXP 24
4716: IFFALSE 4733
// ComMoveXY ( Givi , 82 , 66 ) ;
4718: LD_EXP 24
4722: PPUSH
4723: LD_INT 82
4725: PPUSH
4726: LD_INT 66
4728: PPUSH
4729: CALL_OW 111
// if Kamil then
4733: LD_EXP 26
4737: IFFALSE 4754
// ComMoveXY ( Kamil , 82 , 67 ) ;
4739: LD_EXP 26
4743: PPUSH
4744: LD_INT 82
4746: PPUSH
4747: LD_INT 67
4749: PPUSH
4750: CALL_OW 111
// CenterNowOnUnits ( Heike ) ;
4754: LD_EXP 23
4758: PPUSH
4759: CALL_OW 87
// wait ( 0 0$2 ) ;
4763: LD_INT 70
4765: PPUSH
4766: CALL_OW 67
// if Givi and Mike then
4770: LD_EXP 24
4774: PUSH
4775: LD_EXP 25
4779: AND
4780: IFFALSE 5314
// begin AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
4782: LD_EXP 24
4786: PUSH
4787: LD_EXP 25
4791: PUSH
4792: LD_EXP 26
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: LIST
4801: PPUSH
4802: LD_EXP 23
4806: PPUSH
4807: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
4811: LD_EXP 23
4815: PPUSH
4816: LD_EXP 24
4820: PPUSH
4821: CALL_OW 179
// Say ( Givi , DG-1-start ) ;
4825: LD_EXP 24
4829: PPUSH
4830: LD_STRING DG-1-start
4832: PPUSH
4833: CALL_OW 88
// Say ( Heike , DH-1-start ) ;
4837: LD_EXP 23
4841: PPUSH
4842: LD_STRING DH-1-start
4844: PPUSH
4845: CALL_OW 88
// AddComTurnUnit ( Mike , Heike ) ;
4849: LD_EXP 25
4853: PPUSH
4854: LD_EXP 23
4858: PPUSH
4859: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
4863: LD_EXP 23
4867: PPUSH
4868: LD_EXP 25
4872: PPUSH
4873: CALL_OW 179
// Say ( Mike , DM-1-start ) ;
4877: LD_EXP 25
4881: PPUSH
4882: LD_STRING DM-1-start
4884: PPUSH
4885: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
4889: LD_EXP 23
4893: PPUSH
4894: LD_STRING DH-2-start
4896: PPUSH
4897: CALL_OW 88
// Say ( Mike , DM-2-start ) ;
4901: LD_EXP 25
4905: PPUSH
4906: LD_STRING DM-2-start
4908: PPUSH
4909: CALL_OW 88
// Say ( Givi , DG-2-start ) ;
4913: LD_EXP 24
4917: PPUSH
4918: LD_STRING DG-2-start
4920: PPUSH
4921: CALL_OW 88
// ComTurnUnit ( Mike , Givi ) ;
4925: LD_EXP 25
4929: PPUSH
4930: LD_EXP 24
4934: PPUSH
4935: CALL_OW 119
// ComTurnUnit ( Heike , Mike ) ;
4939: LD_EXP 23
4943: PPUSH
4944: LD_EXP 25
4948: PPUSH
4949: CALL_OW 119
// Say ( Mike , DM-3-start ) ;
4953: LD_EXP 25
4957: PPUSH
4958: LD_STRING DM-3-start
4960: PPUSH
4961: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
4965: LD_EXP 23
4969: PPUSH
4970: LD_STRING DH-3-start
4972: PPUSH
4973: CALL_OW 88
// ComMoveXY ( [ Heike , Mike , Givi , Kamil ] , 84 , 51 ) ;
4977: LD_EXP 23
4981: PUSH
4982: LD_EXP 25
4986: PUSH
4987: LD_EXP 24
4991: PUSH
4992: LD_EXP 26
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: PPUSH
5003: LD_INT 84
5005: PPUSH
5006: LD_INT 51
5008: PPUSH
5009: CALL_OW 111
// wait ( 0 0$2 ) ;
5013: LD_INT 70
5015: PPUSH
5016: CALL_OW 67
// Say ( Givi , DG-3-start ) ;
5020: LD_EXP 24
5024: PPUSH
5025: LD_STRING DG-3-start
5027: PPUSH
5028: CALL_OW 88
// ComHold ( [ Heike , Mike , Givi , Kamil ] ) ;
5032: LD_EXP 23
5036: PUSH
5037: LD_EXP 25
5041: PUSH
5042: LD_EXP 24
5046: PUSH
5047: LD_EXP 26
5051: PUSH
5052: EMPTY
5053: LIST
5054: LIST
5055: LIST
5056: LIST
5057: PPUSH
5058: CALL_OW 140
// AddComTurnUnit ( Heike , Givi ) ;
5062: LD_EXP 23
5066: PPUSH
5067: LD_EXP 24
5071: PPUSH
5072: CALL_OW 179
// AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
5076: LD_EXP 24
5080: PUSH
5081: LD_EXP 25
5085: PUSH
5086: LD_EXP 26
5090: PUSH
5091: EMPTY
5092: LIST
5093: LIST
5094: LIST
5095: PPUSH
5096: LD_EXP 23
5100: PPUSH
5101: CALL_OW 179
// Say ( Heike , DH-4-start ) ;
5105: LD_EXP 23
5109: PPUSH
5110: LD_STRING DH-4-start
5112: PPUSH
5113: CALL_OW 88
// Say ( Givi , DG-4-start ) ;
5117: LD_EXP 24
5121: PPUSH
5122: LD_STRING DG-4-start
5124: PPUSH
5125: CALL_OW 88
// Say ( Heike , DH-5-start ) ;
5129: LD_EXP 23
5133: PPUSH
5134: LD_STRING DH-5-start
5136: PPUSH
5137: CALL_OW 88
// Say ( Givi , DG-5-start ) ;
5141: LD_EXP 24
5145: PPUSH
5146: LD_STRING DG-5-start
5148: PPUSH
5149: CALL_OW 88
// Say ( Heike , DH-6-start ) ;
5153: LD_EXP 23
5157: PPUSH
5158: LD_STRING DH-6-start
5160: PPUSH
5161: CALL_OW 88
// if not Kamil then
5165: LD_EXP 26
5169: NOT
5170: IFFALSE 5221
// begin Say ( Mike , DM-6-start ) ;
5172: LD_EXP 25
5176: PPUSH
5177: LD_STRING DM-6-start
5179: PPUSH
5180: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi ] , Mike ) ;
5184: LD_EXP 23
5188: PUSH
5189: LD_EXP 24
5193: PUSH
5194: EMPTY
5195: LIST
5196: LIST
5197: PPUSH
5198: LD_EXP 25
5202: PPUSH
5203: CALL_OW 119
// Say ( Givi , DG-6-start ) ;
5207: LD_EXP 24
5211: PPUSH
5212: LD_STRING DG-6-start
5214: PPUSH
5215: CALL_OW 88
// end else
5219: GO 5300
// begin Say ( Mike , DM-6-start-a ) ;
5221: LD_EXP 25
5225: PPUSH
5226: LD_STRING DM-6-start-a
5228: PPUSH
5229: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi , Mike ] , Kamil ) ;
5233: LD_EXP 23
5237: PUSH
5238: LD_EXP 24
5242: PUSH
5243: LD_EXP 25
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: LIST
5252: PPUSH
5253: LD_EXP 26
5257: PPUSH
5258: CALL_OW 119
// ComTurnUnit ( Kamil , Mike ) ;
5262: LD_EXP 26
5266: PPUSH
5267: LD_EXP 25
5271: PPUSH
5272: CALL_OW 119
// Say ( Kamil , DKam-7-start-a ) ;
5276: LD_EXP 26
5280: PPUSH
5281: LD_STRING DKam-7-start-a
5283: PPUSH
5284: CALL_OW 88
// Say ( Givi , DG-6-start-a ) ;
5288: LD_EXP 24
5292: PPUSH
5293: LD_STRING DG-6-start-a
5295: PPUSH
5296: CALL_OW 88
// end ; Say ( Heike , DH-7-start ) ;
5300: LD_EXP 23
5304: PPUSH
5305: LD_STRING DH-7-start
5307: PPUSH
5308: CALL_OW 88
// end else
5312: GO 6036
// if not Mike and Givi then
5314: LD_EXP 25
5318: NOT
5319: PUSH
5320: LD_EXP 24
5324: AND
5325: IFFALSE 5670
// begin AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5327: LD_EXP 24
5331: PUSH
5332: LD_EXP 26
5336: PUSH
5337: EMPTY
5338: LIST
5339: LIST
5340: PPUSH
5341: LD_EXP 23
5345: PPUSH
5346: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
5350: LD_EXP 23
5354: PPUSH
5355: LD_EXP 24
5359: PPUSH
5360: CALL_OW 179
// Say ( Givi , DG-1-start-c ) ;
5364: LD_EXP 24
5368: PPUSH
5369: LD_STRING DG-1-start-c
5371: PPUSH
5372: CALL_OW 88
// Say ( Heike , DH-1-start-c ) ;
5376: LD_EXP 23
5380: PPUSH
5381: LD_STRING DH-1-start-c
5383: PPUSH
5384: CALL_OW 88
// Say ( Givi , DG-2-start-c ) ;
5388: LD_EXP 24
5392: PPUSH
5393: LD_STRING DG-2-start-c
5395: PPUSH
5396: CALL_OW 88
// Say ( Heike , DH-2-start-c ) ;
5400: LD_EXP 23
5404: PPUSH
5405: LD_STRING DH-2-start-c
5407: PPUSH
5408: CALL_OW 88
// Say ( Givi , DG-3-start-c ) ;
5412: LD_EXP 24
5416: PPUSH
5417: LD_STRING DG-3-start-c
5419: PPUSH
5420: CALL_OW 88
// ComMoveXY ( Heike , 83 , 56 ) ;
5424: LD_EXP 23
5428: PPUSH
5429: LD_INT 83
5431: PPUSH
5432: LD_INT 56
5434: PPUSH
5435: CALL_OW 111
// ComMoveXY ( Givi , 83 , 59 ) ;
5439: LD_EXP 24
5443: PPUSH
5444: LD_INT 83
5446: PPUSH
5447: LD_INT 59
5449: PPUSH
5450: CALL_OW 111
// if Kamil then
5454: LD_EXP 26
5458: IFFALSE 5475
// ComMoveXY ( Kamil , 80 , 58 ) ;
5460: LD_EXP 26
5464: PPUSH
5465: LD_INT 80
5467: PPUSH
5468: LD_INT 58
5470: PPUSH
5471: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5475: LD_EXP 23
5479: PPUSH
5480: LD_EXP 24
5484: PPUSH
5485: CALL_OW 179
// AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5489: LD_EXP 24
5493: PUSH
5494: LD_EXP 26
5498: PUSH
5499: EMPTY
5500: LIST
5501: LIST
5502: PPUSH
5503: LD_EXP 23
5507: PPUSH
5508: CALL_OW 179
// Say ( Heike , DH-3-start-c ) ;
5512: LD_EXP 23
5516: PPUSH
5517: LD_STRING DH-3-start-c
5519: PPUSH
5520: CALL_OW 88
// Say ( Givi , DG-4-start-c ) ;
5524: LD_EXP 24
5528: PPUSH
5529: LD_STRING DG-4-start-c
5531: PPUSH
5532: CALL_OW 88
// Say ( Heike , DH-5-start-c ) ;
5536: LD_EXP 23
5540: PPUSH
5541: LD_STRING DH-5-start-c
5543: PPUSH
5544: CALL_OW 88
// Say ( Givi , DG-5-start-c ) ;
5548: LD_EXP 24
5552: PPUSH
5553: LD_STRING DG-5-start-c
5555: PPUSH
5556: CALL_OW 88
// Say ( Heike , DH-6-start-c ) ;
5560: LD_EXP 23
5564: PPUSH
5565: LD_STRING DH-6-start-c
5567: PPUSH
5568: CALL_OW 88
// Say ( Givi , DG-6-start-c ) ;
5572: LD_EXP 24
5576: PPUSH
5577: LD_STRING DG-6-start-c
5579: PPUSH
5580: CALL_OW 88
// if Kamil then
5584: LD_EXP 26
5588: IFFALSE 5644
// begin ComTurnUnit ( Kamil , Heike ) ;
5590: LD_EXP 26
5594: PPUSH
5595: LD_EXP 23
5599: PPUSH
5600: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5604: LD_EXP 26
5608: PPUSH
5609: LD_STRING DKam-1-start-c
5611: PPUSH
5612: CALL_OW 88
// ComTurnUnit ( Givi , Kamil ) ;
5616: LD_EXP 24
5620: PPUSH
5621: LD_EXP 26
5625: PPUSH
5626: CALL_OW 119
// Say ( Givi , DG-7-start-c ) ;
5630: LD_EXP 24
5634: PPUSH
5635: LD_STRING DG-7-start-c
5637: PPUSH
5638: CALL_OW 88
// end else
5642: GO 5668
// begin Say ( Givi , DG-8-start-c ) ;
5644: LD_EXP 24
5648: PPUSH
5649: LD_STRING DG-8-start-c
5651: PPUSH
5652: CALL_OW 88
// Say ( Heike , DH-7-start-c ) ;
5656: LD_EXP 23
5660: PPUSH
5661: LD_STRING DH-7-start-c
5663: PPUSH
5664: CALL_OW 88
// end ; end else
5668: GO 6036
// if not Givi and Mike then
5670: LD_EXP 24
5674: NOT
5675: PUSH
5676: LD_EXP 25
5680: AND
5681: IFFALSE 5940
// begin AddComTurnUnit ( [ Mike , Kamil ] , Heike ) ;
5683: LD_EXP 25
5687: PUSH
5688: LD_EXP 26
5692: PUSH
5693: EMPTY
5694: LIST
5695: LIST
5696: PPUSH
5697: LD_EXP 23
5701: PPUSH
5702: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
5706: LD_EXP 23
5710: PPUSH
5711: LD_EXP 25
5715: PPUSH
5716: CALL_OW 179
// Say ( Mike , DM-1-start-b ) ;
5720: LD_EXP 25
5724: PPUSH
5725: LD_STRING DM-1-start-b
5727: PPUSH
5728: CALL_OW 88
// Say ( Heike , DH-1-start-b ) ;
5732: LD_EXP 23
5736: PPUSH
5737: LD_STRING DH-1-start-b
5739: PPUSH
5740: CALL_OW 88
// Say ( Mike , DM-2-start-b ) ;
5744: LD_EXP 25
5748: PPUSH
5749: LD_STRING DM-2-start-b
5751: PPUSH
5752: CALL_OW 88
// Say ( Heike , DH-2-start-b ) ;
5756: LD_EXP 23
5760: PPUSH
5761: LD_STRING DH-2-start-b
5763: PPUSH
5764: CALL_OW 88
// Say ( Mike , DM-3-start-b ) ;
5768: LD_EXP 25
5772: PPUSH
5773: LD_STRING DM-3-start-b
5775: PPUSH
5776: CALL_OW 88
// if Kamil then
5780: LD_EXP 26
5784: IFFALSE 5801
// ComMoveXY ( Kamil , 80 , 58 ) ;
5786: LD_EXP 26
5790: PPUSH
5791: LD_INT 80
5793: PPUSH
5794: LD_INT 58
5796: PPUSH
5797: CALL_OW 111
// ComMoveXY ( Heike , 83 , 56 ) ;
5801: LD_EXP 23
5805: PPUSH
5806: LD_INT 83
5808: PPUSH
5809: LD_INT 56
5811: PPUSH
5812: CALL_OW 111
// ComMoveXY ( Mike , 83 , 59 ) ;
5816: LD_EXP 25
5820: PPUSH
5821: LD_INT 83
5823: PPUSH
5824: LD_INT 59
5826: PPUSH
5827: CALL_OW 111
// AddComTurnUnit ( Heike , Mike ) ;
5831: LD_EXP 23
5835: PPUSH
5836: LD_EXP 25
5840: PPUSH
5841: CALL_OW 179
// AddComTurnUnit ( [ Kamil , Mike ] , Heike ) ;
5845: LD_EXP 26
5849: PUSH
5850: LD_EXP 25
5854: PUSH
5855: EMPTY
5856: LIST
5857: LIST
5858: PPUSH
5859: LD_EXP 23
5863: PPUSH
5864: CALL_OW 179
// Say ( Heike , DH-3-start-b ) ;
5868: LD_EXP 23
5872: PPUSH
5873: LD_STRING DH-3-start-b
5875: PPUSH
5876: CALL_OW 88
// Say ( Mike , DM-4-start-b ) ;
5880: LD_EXP 25
5884: PPUSH
5885: LD_STRING DM-4-start-b
5887: PPUSH
5888: CALL_OW 88
// if Kamil then
5892: LD_EXP 26
5896: IFFALSE 5926
// begin ComTurnUnit ( Kamil , Heike ) ;
5898: LD_EXP 26
5902: PPUSH
5903: LD_EXP 23
5907: PPUSH
5908: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5912: LD_EXP 26
5916: PPUSH
5917: LD_STRING DKam-1-start-c
5919: PPUSH
5920: CALL_OW 88
// end else
5924: GO 5938
// begin Say ( Mike , DM-5-start-b ) ;
5926: LD_EXP 25
5930: PPUSH
5931: LD_STRING DM-5-start-b
5933: PPUSH
5934: CALL_OW 88
// end ; end else
5938: GO 6036
// if Kamil then
5940: LD_EXP 26
5944: IFFALSE 6024
// begin AddComTurnUnit ( Heike , Kamil ) ;
5946: LD_EXP 23
5950: PPUSH
5951: LD_EXP 26
5955: PPUSH
5956: CALL_OW 179
// AddComTurnUnit ( Kamil , Heike ) ;
5960: LD_EXP 26
5964: PPUSH
5965: LD_EXP 23
5969: PPUSH
5970: CALL_OW 179
// Say ( Heike , DH-1-start-f ) ;
5974: LD_EXP 23
5978: PPUSH
5979: LD_STRING DH-1-start-f
5981: PPUSH
5982: CALL_OW 88
// Say ( Kamil , DKam-1-start-f ) ;
5986: LD_EXP 26
5990: PPUSH
5991: LD_STRING DKam-1-start-f
5993: PPUSH
5994: CALL_OW 88
// Say ( Heike , DH-2-start-f ) ;
5998: LD_EXP 23
6002: PPUSH
6003: LD_STRING DH-2-start-f
6005: PPUSH
6006: CALL_OW 88
// Say ( Kamil , DKam-2-start-f ) ;
6010: LD_EXP 26
6014: PPUSH
6015: LD_STRING DKam-2-start-f
6017: PPUSH
6018: CALL_OW 88
// end else
6022: GO 6036
// begin Say ( Heike , DH-1-start-d ) ;
6024: LD_EXP 23
6028: PPUSH
6029: LD_STRING DH-1-start-d
6031: PPUSH
6032: CALL_OW 88
// end ; ComFree ( [ Heike , Givi , Mike , Kamil ] ) ;
6036: LD_EXP 23
6040: PUSH
6041: LD_EXP 24
6045: PUSH
6046: LD_EXP 25
6050: PUSH
6051: LD_EXP 26
6055: PUSH
6056: EMPTY
6057: LIST
6058: LIST
6059: LIST
6060: LIST
6061: PPUSH
6062: CALL_OW 139
// InGameOff ;
6066: CALL_OW 9
// ChangeMissionObjectives ( OEast ) ;
6070: LD_STRING OEast
6072: PPUSH
6073: CALL_OW 337
// SetAreaMapShow ( eastExitArea , 1 ) ;
6077: LD_INT 10
6079: PPUSH
6080: LD_INT 1
6082: PPUSH
6083: CALL_OW 424
// SaveForQuickRestart ;
6087: CALL_OW 22
// wait ( 0 0$20 ) ;
6091: LD_INT 700
6093: PPUSH
6094: CALL_OW 67
// SendSciToForest ;
6098: CALL 1496 0 0
// if Difficulty = 1 then
6102: LD_OWVAR 67
6106: PUSH
6107: LD_INT 1
6109: EQUAL
6110: IFFALSE 6114
// exit ;
6112: GO 6231
// wait ( [ 5 5$00 , 2 2$30 ] [ Difficulty - 1 ] ) ;
6114: LD_INT 10500
6116: PUSH
6117: LD_INT 5250
6119: PUSH
6120: EMPTY
6121: LIST
6122: LIST
6123: PUSH
6124: LD_OWVAR 67
6128: PUSH
6129: LD_INT 1
6131: MINUS
6132: ARRAY
6133: PPUSH
6134: CALL_OW 67
// if usAlert then
6138: LD_EXP 10
6142: IFFALSE 6146
// exit ;
6144: GO 6231
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
6146: LD_ADDR_VAR 0 3
6150: PUSH
6151: LD_INT 22
6153: PUSH
6154: LD_INT 1
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: PUSH
6161: LD_INT 25
6163: PUSH
6164: LD_INT 2
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: PPUSH
6175: CALL_OW 69
6179: ST_TO_ADDR
// if not tmp then
6180: LD_VAR 0 3
6184: NOT
6185: IFFALSE 6189
// exit ;
6187: GO 6231
// ComExitBuilding ( tmp ) ;
6189: LD_VAR 0 3
6193: PPUSH
6194: CALL_OW 122
// AddComBuild ( tmp , b_breastwork , 40 , 13 , 3 ) ;
6198: LD_VAR 0 3
6202: PPUSH
6203: LD_INT 31
6205: PPUSH
6206: LD_INT 40
6208: PPUSH
6209: LD_INT 13
6211: PPUSH
6212: LD_INT 3
6214: PPUSH
6215: CALL_OW 205
// AddComEnterUnit ( tmp , Delta ) ;
6219: LD_VAR 0 3
6223: PPUSH
6224: LD_INT 1
6226: PPUSH
6227: CALL_OW 180
// end ;
6231: LD_VAR 0 1
6235: RET
// every 3 3$00 do
6236: GO 6238
6238: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
6239: LD_INT 1
6241: PPUSH
6242: LD_INT 570
6244: PPUSH
6245: LD_INT 350
6247: PPUSH
6248: CALL_OW 550
// wait ( 2 2$40 ) ;
6252: LD_INT 5600
6254: PPUSH
6255: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
6259: LD_INT 0
6261: PPUSH
6262: LD_INT 570
6264: PPUSH
6265: LD_INT 350
6267: PPUSH
6268: CALL_OW 550
// end ;
6272: END
// every 0 0$1 trigger not aviradzeSpotted and See ( 2 , Aviradze ) do var i , pepAmount ;
6273: LD_EXP 4
6277: NOT
6278: PUSH
6279: LD_INT 2
6281: PPUSH
6282: LD_EXP 27
6286: PPUSH
6287: CALL_OW 292
6291: AND
6292: IFFALSE 7208
6294: GO 6296
6296: DISABLE
6297: LD_INT 0
6299: PPUSH
6300: PPUSH
// begin SetAreaMapShow ( eastExitArea , 0 ) ;
6301: LD_INT 10
6303: PPUSH
6304: LD_INT 0
6306: PPUSH
6307: CALL_OW 424
// aviradzeSpotted := true ;
6311: LD_ADDR_EXP 4
6315: PUSH
6316: LD_INT 1
6318: ST_TO_ADDR
// pepAmount := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ;
6319: LD_ADDR_VAR 0 2
6323: PUSH
6324: LD_INT 22
6326: PUSH
6327: LD_INT 2
6329: PUSH
6330: EMPTY
6331: LIST
6332: LIST
6333: PUSH
6334: LD_INT 21
6336: PUSH
6337: LD_INT 1
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: PPUSH
6348: CALL_OW 69
6352: ST_TO_ADDR
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6353: LD_EXP 23
6357: PPUSH
6358: LD_EXP 27
6362: PPUSH
6363: CALL_OW 250
6367: PPUSH
6368: LD_EXP 27
6372: PPUSH
6373: CALL_OW 251
6377: PPUSH
6378: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6382: LD_INT 35
6384: PPUSH
6385: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 16 ;
6389: LD_EXP 23
6393: PPUSH
6394: LD_EXP 27
6398: PPUSH
6399: CALL_OW 296
6403: PUSH
6404: LD_INT 16
6406: LESS
6407: IFFALSE 6382
// InGameOn ;
6409: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
6413: LD_INT 5
6415: PPUSH
6416: LD_INT 2
6418: PPUSH
6419: CALL_OW 343
// if pepAmount > 2 then
6423: LD_VAR 0 2
6427: PUSH
6428: LD_INT 2
6430: GREATER
6431: IFFALSE 6447
// Say ( Heike , DH-1-spot ) else
6433: LD_EXP 23
6437: PPUSH
6438: LD_STRING DH-1-spot
6440: PPUSH
6441: CALL_OW 88
6445: GO 6459
// Say ( Heike , DH-1-spot-d ) ;
6447: LD_EXP 23
6451: PPUSH
6452: LD_STRING DH-1-spot-d
6454: PPUSH
6455: CALL_OW 88
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6459: LD_EXP 23
6463: PPUSH
6464: LD_EXP 27
6468: PPUSH
6469: CALL_OW 250
6473: PPUSH
6474: LD_EXP 27
6478: PPUSH
6479: CALL_OW 251
6483: PPUSH
6484: CALL_OW 111
// for i in [ Kamil , Mike , Givi ] do
6488: LD_ADDR_VAR 0 1
6492: PUSH
6493: LD_EXP 26
6497: PUSH
6498: LD_EXP 25
6502: PUSH
6503: LD_EXP 24
6507: PUSH
6508: EMPTY
6509: LIST
6510: LIST
6511: LIST
6512: PUSH
6513: FOR_IN
6514: IFFALSE 6553
// if GetDistUnits ( i , Aviradze ) > 7 then
6516: LD_VAR 0 1
6520: PPUSH
6521: LD_EXP 27
6525: PPUSH
6526: CALL_OW 296
6530: PUSH
6531: LD_INT 7
6533: GREATER
6534: IFFALSE 6551
// ComMoveXY ( i , 102 , 40 ) ;
6536: LD_VAR 0 1
6540: PPUSH
6541: LD_INT 102
6543: PPUSH
6544: LD_INT 40
6546: PPUSH
6547: CALL_OW 111
6551: GO 6513
6553: POP
6554: POP
// repeat wait ( 0 0$1 ) ;
6555: LD_INT 35
6557: PPUSH
6558: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 6 ;
6562: LD_EXP 23
6566: PPUSH
6567: LD_EXP 27
6571: PPUSH
6572: CALL_OW 296
6576: PUSH
6577: LD_INT 6
6579: LESS
6580: IFFALSE 6555
// ComTurnUnit ( Heike , Aviradze ) ;
6582: LD_EXP 23
6586: PPUSH
6587: LD_EXP 27
6591: PPUSH
6592: CALL_OW 119
// ComTurnUnit ( [ Aviradze , Sophia , Kaia ] , Heike ) ;
6596: LD_EXP 27
6600: PUSH
6601: LD_EXP 29
6605: PUSH
6606: LD_EXP 28
6610: PUSH
6611: EMPTY
6612: LIST
6613: LIST
6614: LIST
6615: PPUSH
6616: LD_EXP 23
6620: PPUSH
6621: CALL_OW 119
// if pepAmount > 1 then
6625: LD_VAR 0 2
6629: PUSH
6630: LD_INT 1
6632: GREATER
6633: IFFALSE 6685
// begin wait ( 0 0$2 ) ;
6635: LD_INT 70
6637: PPUSH
6638: CALL_OW 67
// ComTurnUnit ( [ Kamil , Mike , Givi ] , Aviradze ) ;
6642: LD_EXP 26
6646: PUSH
6647: LD_EXP 25
6651: PUSH
6652: LD_EXP 24
6656: PUSH
6657: EMPTY
6658: LIST
6659: LIST
6660: LIST
6661: PPUSH
6662: LD_EXP 27
6666: PPUSH
6667: CALL_OW 119
// Say ( Heike , DH-2-spot ) ;
6671: LD_EXP 23
6675: PPUSH
6676: LD_STRING DH-2-spot
6678: PPUSH
6679: CALL_OW 88
// end else
6683: GO 6697
// Say ( Heike , DH-2-spot-d ) ;
6685: LD_EXP 23
6689: PPUSH
6690: LD_STRING DH-2-spot-d
6692: PPUSH
6693: CALL_OW 88
// Say ( Aviradze , DA-2-spot ) ;
6697: LD_EXP 27
6701: PPUSH
6702: LD_STRING DA-2-spot
6704: PPUSH
6705: CALL_OW 88
// Say ( Heike , DH-3-spot ) ;
6709: LD_EXP 23
6713: PPUSH
6714: LD_STRING DH-3-spot
6716: PPUSH
6717: CALL_OW 88
// ComMoveUnit ( Kaia , Heike ) ;
6721: LD_EXP 28
6725: PPUSH
6726: LD_EXP 23
6730: PPUSH
6731: CALL_OW 112
// ComTurnUnit ( Heike , Kaia ) ;
6735: LD_EXP 23
6739: PPUSH
6740: LD_EXP 28
6744: PPUSH
6745: CALL_OW 119
// wait ( 0 0$0.3 ) ;
6749: LD_INT 10
6751: PPUSH
6752: CALL_OW 67
// Say ( Kaia , DK-3-spot ) ;
6756: LD_EXP 28
6760: PPUSH
6761: LD_STRING DK-3-spot
6763: PPUSH
6764: CALL_OW 88
// ComTurnUnit ( Kaia , Heike ) ;
6768: LD_EXP 28
6772: PPUSH
6773: LD_EXP 23
6777: PPUSH
6778: CALL_OW 119
// Say ( Heike , DH-4-spot ) ;
6782: LD_EXP 23
6786: PPUSH
6787: LD_STRING DH-4-spot
6789: PPUSH
6790: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6794: LD_INT 10
6796: PPUSH
6797: CALL_OW 67
// ComTurnUnit ( Heike , Aviradze ) ;
6801: LD_EXP 23
6805: PPUSH
6806: LD_EXP 27
6810: PPUSH
6811: CALL_OW 119
// Say ( Aviradze , DA-4-spot ) ;
6815: LD_EXP 27
6819: PPUSH
6820: LD_STRING DA-4-spot
6822: PPUSH
6823: CALL_OW 88
// ComTurnUnit ( Kaia , Aviradze ) ;
6827: LD_EXP 28
6831: PPUSH
6832: LD_EXP 27
6836: PPUSH
6837: CALL_OW 119
// Say ( Kaia , DK-4-spot ) ;
6841: LD_EXP 28
6845: PPUSH
6846: LD_STRING DK-4-spot
6848: PPUSH
6849: CALL_OW 88
// ComTurnUnit ( Aviradze , Kaia ) ;
6853: LD_EXP 27
6857: PPUSH
6858: LD_EXP 28
6862: PPUSH
6863: CALL_OW 119
// Say ( Aviradze , DA-5-spot ) ;
6867: LD_EXP 27
6871: PPUSH
6872: LD_STRING DA-5-spot
6874: PPUSH
6875: CALL_OW 88
// Say ( Kaia , DK-5-spot ) ;
6879: LD_EXP 28
6883: PPUSH
6884: LD_STRING DK-5-spot
6886: PPUSH
6887: CALL_OW 88
// if pepAmount = 1 then
6891: LD_VAR 0 2
6895: PUSH
6896: LD_INT 1
6898: EQUAL
6899: IFFALSE 6913
// Say ( Heike , DH-5-spot-f ) ;
6901: LD_EXP 23
6905: PPUSH
6906: LD_STRING DH-5-spot-f
6908: PPUSH
6909: CALL_OW 88
// if pepAmount < 3 then
6913: LD_VAR 0 2
6917: PUSH
6918: LD_INT 3
6920: LESS
6921: IFFALSE 6937
// Say ( Aviradze , DA-6-spot-f ) else
6923: LD_EXP 27
6927: PPUSH
6928: LD_STRING DA-6-spot-f
6930: PPUSH
6931: CALL_OW 88
6935: GO 6973
// if pepAmount < 4 then
6937: LD_VAR 0 2
6941: PUSH
6942: LD_INT 4
6944: LESS
6945: IFFALSE 6961
// Say ( Aviradze , DA-6-spot-c ) else
6947: LD_EXP 27
6951: PPUSH
6952: LD_STRING DA-6-spot-c
6954: PPUSH
6955: CALL_OW 88
6959: GO 6973
// Say ( Aviradze , DA-6-spot ) ;
6961: LD_EXP 27
6965: PPUSH
6966: LD_STRING DA-6-spot
6968: PPUSH
6969: CALL_OW 88
// if Kamil then
6973: LD_EXP 26
6977: IFFALSE 6991
// Say ( Kamil , DKam-6-spot ) ;
6979: LD_EXP 26
6983: PPUSH
6984: LD_STRING DKam-6-spot
6986: PPUSH
6987: CALL_OW 88
// Say ( Kaia , DK-6-spot ) ;
6991: LD_EXP 28
6995: PPUSH
6996: LD_STRING DK-6-spot
6998: PPUSH
6999: CALL_OW 88
// ComTurnUnit ( Aviradze , Heike ) ;
7003: LD_EXP 27
7007: PPUSH
7008: LD_EXP 23
7012: PPUSH
7013: CALL_OW 119
// Say ( Aviradze , DA-7-spot ) ;
7017: LD_EXP 27
7021: PPUSH
7022: LD_STRING DA-7-spot
7024: PPUSH
7025: CALL_OW 88
// Say ( Heike , DH-7-spot ) ;
7029: LD_EXP 23
7033: PPUSH
7034: LD_STRING DH-7-spot
7036: PPUSH
7037: CALL_OW 88
// if sciCounterKill >= 3 then
7041: LD_EXP 9
7045: PUSH
7046: LD_INT 3
7048: GREATEREQUAL
7049: IFFALSE 7075
// begin Say ( Heike , DH-7-spot-a ) ;
7051: LD_EXP 23
7055: PPUSH
7056: LD_STRING DH-7-spot-a
7058: PPUSH
7059: CALL_OW 88
// Say ( Aviradze , DA-8-spot-a ) ;
7063: LD_EXP 27
7067: PPUSH
7068: LD_STRING DA-8-spot-a
7070: PPUSH
7071: CALL_OW 88
// end ; InGameOff ;
7075: CALL_OW 9
// if sciCounterKill < 3 then
7079: LD_EXP 9
7083: PUSH
7084: LD_INT 3
7086: LESS
7087: IFFALSE 7146
// begin SetSide ( Kaia , 2 ) ;
7089: LD_EXP 28
7093: PPUSH
7094: LD_INT 2
7096: PPUSH
7097: CALL_OW 235
// ComFree ( Kaia ) ;
7101: LD_EXP 28
7105: PPUSH
7106: CALL_OW 139
// if Kamil then
7110: LD_EXP 26
7114: IFFALSE 7137
// begin ComHold ( Kamil ) ;
7116: LD_EXP 26
7120: PPUSH
7121: CALL_OW 140
// SetSide ( Kamil , 5 ) ;
7125: LD_EXP 26
7129: PPUSH
7130: LD_INT 5
7132: PPUSH
7133: CALL_OW 235
// end ; ChangeMissionObjectives ( OSci ) ;
7137: LD_STRING OSci
7139: PPUSH
7140: CALL_OW 337
// end else
7144: GO 7208
// begin aviradzeQuestDone := true ;
7146: LD_ADDR_EXP 8
7150: PUSH
7151: LD_INT 1
7153: ST_TO_ADDR
// attackDeltaAllowed := true ;
7154: LD_ADDR_EXP 14
7158: PUSH
7159: LD_INT 1
7161: ST_TO_ADDR
// ChangeMissionObjectives ( ODelta2 ) ;
7162: LD_STRING ODelta2
7164: PPUSH
7165: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
7169: LD_ADDR_VAR 0 1
7173: PUSH
7174: LD_INT 22
7176: PUSH
7177: LD_INT 5
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PPUSH
7184: CALL_OW 69
7188: PUSH
7189: FOR_IN
7190: IFFALSE 7206
// SetSide ( i , 2 ) ;
7192: LD_VAR 0 1
7196: PPUSH
7197: LD_INT 2
7199: PPUSH
7200: CALL_OW 235
7204: GO 7189
7206: POP
7207: POP
// end ; end ;
7208: PPOPN 2
7210: END
// every 0 0$1 trigger not sciSpotted and GetDistUnits ( NearestUnitToUnit ( usSci , Heike ) , Heike ) < 8 and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and not aviradzeSpotted do
7211: LD_EXP 7
7215: NOT
7216: PUSH
7217: LD_EXP 22
7221: PPUSH
7222: LD_EXP 23
7226: PPUSH
7227: CALL_OW 74
7231: PPUSH
7232: LD_EXP 23
7236: PPUSH
7237: CALL_OW 296
7241: PUSH
7242: LD_INT 8
7244: LESS
7245: AND
7246: PUSH
7247: LD_INT 2
7249: PPUSH
7250: LD_EXP 22
7254: PPUSH
7255: LD_EXP 23
7259: PPUSH
7260: CALL_OW 74
7264: PPUSH
7265: CALL_OW 292
7269: AND
7270: PUSH
7271: LD_INT 22
7273: PUSH
7274: LD_INT 2
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: PUSH
7281: LD_INT 21
7283: PUSH
7284: LD_INT 1
7286: PUSH
7287: EMPTY
7288: LIST
7289: LIST
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: PPUSH
7295: CALL_OW 69
7299: PUSH
7300: LD_INT 1
7302: GREATER
7303: AND
7304: PUSH
7305: LD_EXP 4
7309: NOT
7310: AND
7311: IFFALSE 7355
7313: GO 7315
7315: DISABLE
// begin sciSpotted := true ;
7316: LD_ADDR_EXP 7
7320: PUSH
7321: LD_INT 1
7323: ST_TO_ADDR
// CenterNowOnUnits ( NearestUnitToUnit ( usSci , Heike ) ) ;
7324: LD_EXP 22
7328: PPUSH
7329: LD_EXP 23
7333: PPUSH
7334: CALL_OW 74
7338: PPUSH
7339: CALL_OW 87
// Say ( Heike , DH-1-sci ) ;
7343: LD_EXP 23
7347: PPUSH
7348: LD_STRING DH-1-sci
7350: PPUSH
7351: CALL_OW 88
// end ;
7355: END
// every 0 0$1 trigger aviradzeSpotted and not sciSpotted and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and aviradzeSpotted and not aviradzeQuestDone do var un ;
7356: LD_EXP 4
7360: PUSH
7361: LD_EXP 7
7365: NOT
7366: AND
7367: PUSH
7368: LD_INT 2
7370: PPUSH
7371: LD_EXP 22
7375: PPUSH
7376: LD_EXP 23
7380: PPUSH
7381: CALL_OW 74
7385: PPUSH
7386: CALL_OW 292
7390: AND
7391: PUSH
7392: LD_INT 22
7394: PUSH
7395: LD_INT 2
7397: PUSH
7398: EMPTY
7399: LIST
7400: LIST
7401: PUSH
7402: LD_INT 21
7404: PUSH
7405: LD_INT 1
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: PPUSH
7416: CALL_OW 69
7420: PUSH
7421: LD_INT 1
7423: GREATER
7424: AND
7425: PUSH
7426: LD_EXP 4
7430: AND
7431: PUSH
7432: LD_EXP 8
7436: NOT
7437: AND
7438: IFFALSE 7579
7440: GO 7442
7442: DISABLE
7443: LD_INT 0
7445: PPUSH
// begin sciSpotted := true ;
7446: LD_ADDR_EXP 7
7450: PUSH
7451: LD_INT 1
7453: ST_TO_ADDR
// un := NearestUnitToUnit ( usSci , Heike ) ;
7454: LD_ADDR_VAR 0 1
7458: PUSH
7459: LD_EXP 22
7463: PPUSH
7464: LD_EXP 23
7468: PPUSH
7469: CALL_OW 74
7473: ST_TO_ADDR
// DialogueOn ;
7474: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 2 , - 3 ) ;
7478: LD_VAR 0 1
7482: PPUSH
7483: CALL_OW 250
7487: PPUSH
7488: LD_VAR 0 1
7492: PPUSH
7493: CALL_OW 251
7497: PPUSH
7498: LD_INT 2
7500: PPUSH
7501: LD_INT 3
7503: NEG
7504: PPUSH
7505: CALL_OW 330
// CenterNowOnUnits ( un ) ;
7509: LD_VAR 0 1
7513: PPUSH
7514: CALL_OW 87
// Say ( Heike , DH-1-sci-a ) ;
7518: LD_EXP 23
7522: PPUSH
7523: LD_STRING DH-1-sci-a
7525: PPUSH
7526: CALL_OW 88
// if Mike then
7530: LD_EXP 25
7534: IFFALSE 7548
// Say ( Mike , DM-1-sci-a ) ;
7536: LD_EXP 25
7540: PPUSH
7541: LD_STRING DM-1-sci-a
7543: PPUSH
7544: CALL_OW 88
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 2 ) ;
7548: LD_VAR 0 1
7552: PPUSH
7553: CALL_OW 250
7557: PPUSH
7558: LD_VAR 0 1
7562: PPUSH
7563: CALL_OW 251
7567: PPUSH
7568: LD_INT 2
7570: PPUSH
7571: CALL_OW 331
// DialogueOff ;
7575: CALL_OW 7
// end ;
7579: PPOPN 1
7581: END
// every 0 0$1 trigger usAlert and ( GetLives ( Gladstone ) < 1000 or GetLives ( usLab ) < 999 ) do var veh ;
7582: LD_EXP 10
7586: PUSH
7587: LD_EXP 19
7591: PPUSH
7592: CALL_OW 256
7596: PUSH
7597: LD_INT 1000
7599: LESS
7600: PUSH
7601: LD_INT 3
7603: PPUSH
7604: CALL_OW 256
7608: PUSH
7609: LD_INT 999
7611: LESS
7612: OR
7613: AND
7614: IFFALSE 7870
7616: GO 7618
7618: DISABLE
7619: LD_INT 0
7621: PPUSH
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
7622: LD_ADDR_VAR 0 1
7626: PUSH
7627: LD_INT 22
7629: PUSH
7630: LD_INT 1
7632: PUSH
7633: EMPTY
7634: LIST
7635: LIST
7636: PUSH
7637: LD_INT 21
7639: PUSH
7640: LD_INT 2
7642: PUSH
7643: EMPTY
7644: LIST
7645: LIST
7646: PUSH
7647: LD_INT 58
7649: PUSH
7650: EMPTY
7651: LIST
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: LIST
7657: PPUSH
7658: CALL_OW 69
7662: ST_TO_ADDR
// if veh and IsOk ( Gladstone ) then
7663: LD_VAR 0 1
7667: PUSH
7668: LD_EXP 19
7672: PPUSH
7673: CALL_OW 302
7677: AND
7678: IFFALSE 7720
// begin if IsInUnit ( Gladstone ) then
7680: LD_EXP 19
7684: PPUSH
7685: CALL_OW 310
7689: IFFALSE 7700
// ComExitBuilding ( Gladstone ) ;
7691: LD_EXP 19
7695: PPUSH
7696: CALL_OW 122
// AddComEnterUnit ( Gladstone , veh [ 1 ] ) ;
7700: LD_EXP 19
7704: PPUSH
7705: LD_VAR 0 1
7709: PUSH
7710: LD_INT 1
7712: ARRAY
7713: PPUSH
7714: CALL_OW 180
// end else
7718: GO 7740
// if IsInUnit ( Gladstone ) then
7720: LD_EXP 19
7724: PPUSH
7725: CALL_OW 310
7729: IFFALSE 7740
// ComExitBuilding ( Gladstone ) ;
7731: LD_EXP 19
7735: PPUSH
7736: CALL_OW 122
// AddComMoveXY ( Gladstone , 27 , 51 ) ;
7740: LD_EXP 19
7744: PPUSH
7745: LD_INT 27
7747: PPUSH
7748: LD_INT 51
7750: PPUSH
7751: CALL_OW 171
// Say ( Gladstone , D8-Glad-2 ) ;
7755: LD_EXP 19
7759: PPUSH
7760: LD_STRING D8-Glad-2
7762: PPUSH
7763: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7767: LD_INT 35
7769: PPUSH
7770: CALL_OW 67
// until IsAt ( Gladstone , 27 , 51 ) or IsAt ( IsInUnit ( Gladstone ) , 27 , 51 ) or IsDead ( Gladstone ) ;
7774: LD_EXP 19
7778: PPUSH
7779: LD_INT 27
7781: PPUSH
7782: LD_INT 51
7784: PPUSH
7785: CALL_OW 307
7789: PUSH
7790: LD_EXP 19
7794: PPUSH
7795: CALL_OW 310
7799: PPUSH
7800: LD_INT 27
7802: PPUSH
7803: LD_INT 51
7805: PPUSH
7806: CALL_OW 307
7810: OR
7811: PUSH
7812: LD_EXP 19
7816: PPUSH
7817: CALL_OW 301
7821: OR
7822: IFFALSE 7767
// if IsDead ( Gladstone ) then
7824: LD_EXP 19
7828: PPUSH
7829: CALL_OW 301
7833: IFFALSE 7837
// exit ;
7835: GO 7870
// RemoveUnit ( HexInfo ( 27 , 51 ) ) ;
7837: LD_INT 27
7839: PPUSH
7840: LD_INT 51
7842: PPUSH
7843: CALL_OW 428
7847: PPUSH
7848: CALL_OW 64
// gladstoneEscaped := true ;
7852: LD_ADDR_EXP 12
7856: PUSH
7857: LD_INT 1
7859: ST_TO_ADDR
// SaveVariable ( true , 02_GladstoneEscaped ) ;
7860: LD_INT 1
7862: PPUSH
7863: LD_STRING 02_GladstoneEscaped
7865: PPUSH
7866: CALL_OW 39
// end ;
7870: PPOPN 1
7872: END
// every 0 0$1 trigger aviradzeSpotted and ( sciCounterKill >= 3 or not usSci ) and not aviradzeQuestDone do
7873: LD_EXP 4
7877: PUSH
7878: LD_EXP 9
7882: PUSH
7883: LD_INT 3
7885: GREATEREQUAL
7886: PUSH
7887: LD_EXP 22
7891: NOT
7892: OR
7893: AND
7894: PUSH
7895: LD_EXP 8
7899: NOT
7900: AND
7901: IFFALSE 7944
7903: GO 7905
7905: DISABLE
// begin aviradzeQuestDone := true ;
7906: LD_ADDR_EXP 8
7910: PUSH
7911: LD_INT 1
7913: ST_TO_ADDR
// Say ( Heike , DH-1-quest-done ) ;
7914: LD_EXP 23
7918: PPUSH
7919: LD_STRING DH-1-quest-done
7921: PPUSH
7922: CALL_OW 88
// if Givi then
7926: LD_EXP 24
7930: IFFALSE 7944
// Say ( Givi , DG-1-quest-done ) ;
7932: LD_EXP 24
7936: PPUSH
7937: LD_STRING DG-1-quest-done
7939: PPUSH
7940: CALL_OW 88
// end ;
7944: END
// every 0 0$1 trigger See ( 5 , Heike ) and GetDistUnits ( Heike , Aviradze ) < 6 and aviradzeQuestDone and not attackDeltaAllowed do var i ;
7945: LD_INT 5
7947: PPUSH
7948: LD_EXP 23
7952: PPUSH
7953: CALL_OW 292
7957: PUSH
7958: LD_EXP 23
7962: PPUSH
7963: LD_EXP 27
7967: PPUSH
7968: CALL_OW 296
7972: PUSH
7973: LD_INT 6
7975: LESS
7976: AND
7977: PUSH
7978: LD_EXP 8
7982: AND
7983: PUSH
7984: LD_EXP 14
7988: NOT
7989: AND
7990: IFFALSE 8128
7992: GO 7994
7994: DISABLE
7995: LD_INT 0
7997: PPUSH
// begin attackDeltaAllowed := true ;
7998: LD_ADDR_EXP 14
8002: PUSH
8003: LD_INT 1
8005: ST_TO_ADDR
// InGameOn ;
8006: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
8010: LD_EXP 23
8014: PPUSH
8015: CALL_OW 87
// wait ( 0 0$0.3 ) ;
8019: LD_INT 10
8021: PPUSH
8022: CALL_OW 67
// ComTurnUnit ( Aviradze , Heike ) ;
8026: LD_EXP 27
8030: PPUSH
8031: LD_EXP 23
8035: PPUSH
8036: CALL_OW 119
// ComTurnUnit ( Heike , Aviradze ) ;
8040: LD_EXP 23
8044: PPUSH
8045: LD_EXP 27
8049: PPUSH
8050: CALL_OW 119
// Say ( Heike , DH-1-return ) ;
8054: LD_EXP 23
8058: PPUSH
8059: LD_STRING DH-1-return
8061: PPUSH
8062: CALL_OW 88
// Say ( Aviradze , DA-1-return ) ;
8066: LD_EXP 27
8070: PPUSH
8071: LD_STRING DA-1-return
8073: PPUSH
8074: CALL_OW 88
// InGameOff ;
8078: CALL_OW 9
// ChangeMissionObjectives ( ODelta ) ;
8082: LD_STRING ODelta
8084: PPUSH
8085: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
8089: LD_ADDR_VAR 0 1
8093: PUSH
8094: LD_INT 22
8096: PUSH
8097: LD_INT 5
8099: PUSH
8100: EMPTY
8101: LIST
8102: LIST
8103: PPUSH
8104: CALL_OW 69
8108: PUSH
8109: FOR_IN
8110: IFFALSE 8126
// SetSide ( i , 2 ) ;
8112: LD_VAR 0 1
8116: PPUSH
8117: LD_INT 2
8119: PPUSH
8120: CALL_OW 235
8124: GO 8109
8126: POP
8127: POP
// end ;
8128: PPOPN 1
8130: END
// every 0 0$1 trigger usAlert and not attackDeltaAllowed do
8131: LD_EXP 10
8135: PUSH
8136: LD_EXP 14
8140: NOT
8141: AND
8142: IFFALSE 8155
8144: GO 8146
8146: DISABLE
// spottedBeforeRadio := true ;
8147: LD_ADDR_EXP 6
8151: PUSH
8152: LD_INT 1
8154: ST_TO_ADDR
8155: END
// every 0 0$1 trigger attackDeltaAllowed and IsOk ( Markov ) and GetSide ( Delta ) = 1 and IsOk ( Lynch ) and not usAlert do var i , k , tmp ;
8156: LD_EXP 14
8160: PUSH
8161: LD_EXP 30
8165: PPUSH
8166: CALL_OW 302
8170: AND
8171: PUSH
8172: LD_INT 1
8174: PPUSH
8175: CALL_OW 255
8179: PUSH
8180: LD_INT 1
8182: EQUAL
8183: AND
8184: PUSH
8185: LD_EXP 20
8189: PPUSH
8190: CALL_OW 302
8194: AND
8195: PUSH
8196: LD_EXP 10
8200: NOT
8201: AND
8202: IFFALSE 9418
8204: GO 8206
8206: DISABLE
8207: LD_INT 0
8209: PPUSH
8210: PPUSH
8211: PPUSH
// begin trap := 0 ;
8212: LD_ADDR_EXP 17
8216: PUSH
8217: LD_INT 0
8219: ST_TO_ADDR
// wait ( 0 0$12 ) ;
8220: LD_INT 420
8222: PPUSH
8223: CALL_OW 67
// DialogueOn ;
8227: CALL_OW 6
// Say ( Markov , DMar-1-radio ) ;
8231: LD_EXP 30
8235: PPUSH
8236: LD_STRING DMar-1-radio
8238: PPUSH
8239: CALL_OW 88
// Say ( Heike , DH-1-radio ) ;
8243: LD_EXP 23
8247: PPUSH
8248: LD_STRING DH-1-radio
8250: PPUSH
8251: CALL_OW 88
// Say ( Markov , DMar-2-radio ) ;
8255: LD_EXP 30
8259: PPUSH
8260: LD_STRING DMar-2-radio
8262: PPUSH
8263: CALL_OW 88
// Say ( Heike , DH-2-radio ) ;
8267: LD_EXP 23
8271: PPUSH
8272: LD_STRING DH-2-radio
8274: PPUSH
8275: CALL_OW 88
// if IsOk ( Kamil ) or IsOk ( Sophia ) then
8279: LD_EXP 26
8283: PPUSH
8284: CALL_OW 302
8288: PUSH
8289: LD_EXP 29
8293: PPUSH
8294: CALL_OW 302
8298: OR
8299: IFFALSE 9418
// begin case Query ( Q1Trap ) of 1 :
8301: LD_STRING Q1Trap
8303: PPUSH
8304: CALL_OW 97
8308: PUSH
8309: LD_INT 1
8311: DOUBLE
8312: EQUAL
8313: IFTRUE 8317
8315: GO 8511
8317: POP
// begin if IsOk ( Kamil ) then
8318: LD_EXP 26
8322: PPUSH
8323: CALL_OW 302
8327: IFFALSE 8406
// begin Say ( Kamil , DKam-2-radio ) ;
8329: LD_EXP 26
8333: PPUSH
8334: LD_STRING DKam-2-radio
8336: PPUSH
8337: CALL_OW 88
// Say ( Kamil , DKam-3-radio ) ;
8341: LD_EXP 26
8345: PPUSH
8346: LD_STRING DKam-3-radio
8348: PPUSH
8349: CALL_OW 88
// SayRadio ( Lynch , DDelta-3-radio ) ;
8353: LD_EXP 20
8357: PPUSH
8358: LD_STRING DDelta-3-radio
8360: PPUSH
8361: CALL_OW 94
// dwait ( 0 0$01 ) ;
8365: LD_INT 35
8367: PPUSH
8368: CALL_OW 68
// Say ( Heike , DH-3-radio ) ;
8372: LD_EXP 23
8376: PPUSH
8377: LD_STRING DH-3-radio
8379: PPUSH
8380: CALL_OW 88
// Say ( Kamil , DKam-4-radio ) ;
8384: LD_EXP 26
8388: PPUSH
8389: LD_STRING DKam-4-radio
8391: PPUSH
8392: CALL_OW 88
// trap := 1 ;
8396: LD_ADDR_EXP 17
8400: PUSH
8401: LD_INT 1
8403: ST_TO_ADDR
// end else
8404: GO 8505
// begin Say ( Sophia , DS-1-radio ) ;
8406: LD_EXP 29
8410: PPUSH
8411: LD_STRING DS-1-radio
8413: PPUSH
8414: CALL_OW 88
// Say ( Sophia , DS-2-radio ) ;
8418: LD_EXP 29
8422: PPUSH
8423: LD_STRING DS-2-radio
8425: PPUSH
8426: CALL_OW 88
// SayRadio ( Lynch , DDelta-2-radio-s ) ;
8430: LD_EXP 20
8434: PPUSH
8435: LD_STRING DDelta-2-radio-s
8437: PPUSH
8438: CALL_OW 94
// Say ( Sophia , DS-3-radio ) ;
8442: LD_EXP 29
8446: PPUSH
8447: LD_STRING DS-3-radio
8449: PPUSH
8450: CALL_OW 88
// SayRadio ( Lynch , DDelta-3-radio-s ) ;
8454: LD_EXP 20
8458: PPUSH
8459: LD_STRING DDelta-3-radio-s
8461: PPUSH
8462: CALL_OW 94
// Say ( Sophia , DS-4-radio-s ) ;
8466: LD_EXP 29
8470: PPUSH
8471: LD_STRING DS-4-radio-s
8473: PPUSH
8474: CALL_OW 88
// dwait ( 0 0$01 ) ;
8478: LD_INT 35
8480: PPUSH
8481: CALL_OW 68
// Say ( Heike , DH-1-trap ) ;
8485: LD_EXP 23
8489: PPUSH
8490: LD_STRING DH-1-trap
8492: PPUSH
8493: CALL_OW 88
// trap := 0 ;
8497: LD_ADDR_EXP 17
8501: PUSH
8502: LD_INT 0
8504: ST_TO_ADDR
// end ; DialogueOff ;
8505: CALL_OW 7
// end ; 2 :
8509: GO 8529
8511: LD_INT 2
8513: DOUBLE
8514: EQUAL
8515: IFTRUE 8519
8517: GO 8528
8519: POP
// begin DialogueOff ;
8520: CALL_OW 7
// exit ;
8524: GO 9418
// end ; end ;
8526: GO 8529
8528: POP
// if trap = 1 then
8529: LD_EXP 17
8533: PUSH
8534: LD_INT 1
8536: EQUAL
8537: IFFALSE 8989
// begin PlaceSeeing ( 64 , 32 , 2 , 8 ) ;
8539: LD_INT 64
8541: PPUSH
8542: LD_INT 32
8544: PPUSH
8545: LD_INT 2
8547: PPUSH
8548: LD_INT 8
8550: PPUSH
8551: CALL_OW 330
// CenterOnXY ( 64 , 32 ) ;
8555: LD_INT 64
8557: PPUSH
8558: LD_INT 32
8560: PPUSH
8561: CALL_OW 84
// tmp := [ ] ;
8565: LD_ADDR_VAR 0 3
8569: PUSH
8570: EMPTY
8571: ST_TO_ADDR
// k := 3 ;
8572: LD_ADDR_VAR 0 2
8576: PUSH
8577: LD_INT 3
8579: ST_TO_ADDR
// if usForces < 3 then
8580: LD_EXP 21
8584: PUSH
8585: LD_INT 3
8587: LESS
8588: IFFALSE 8600
// k := usForces ;
8590: LD_ADDR_VAR 0 2
8594: PUSH
8595: LD_EXP 21
8599: ST_TO_ADDR
// for i := 1 to k do
8600: LD_ADDR_VAR 0 1
8604: PUSH
8605: DOUBLE
8606: LD_INT 1
8608: DEC
8609: ST_TO_ADDR
8610: LD_VAR 0 2
8614: PUSH
8615: FOR_TO
8616: IFFALSE 8671
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
8618: LD_ADDR_VAR 0 3
8622: PUSH
8623: LD_VAR 0 3
8627: PPUSH
8628: LD_VAR 0 3
8632: PUSH
8633: LD_INT 1
8635: PLUS
8636: PPUSH
8637: LD_EXP 21
8641: PUSH
8642: LD_INT 1
8644: ARRAY
8645: PPUSH
8646: CALL_OW 1
8650: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
8651: LD_ADDR_EXP 21
8655: PUSH
8656: LD_EXP 21
8660: PPUSH
8661: LD_INT 1
8663: PPUSH
8664: CALL_OW 3
8668: ST_TO_ADDR
// end ;
8669: GO 8615
8671: POP
8672: POP
// usPatrol := tmp ;
8673: LD_ADDR_EXP 16
8677: PUSH
8678: LD_VAR 0 3
8682: ST_TO_ADDR
// for i in tmp do
8683: LD_ADDR_VAR 0 1
8687: PUSH
8688: LD_VAR 0 3
8692: PUSH
8693: FOR_IN
8694: IFFALSE 8824
// begin if IsInUnit ( i ) then
8696: LD_VAR 0 1
8700: PPUSH
8701: CALL_OW 310
8705: IFFALSE 8716
// ComExitBuilding ( i ) ;
8707: LD_VAR 0 1
8711: PPUSH
8712: CALL_OW 122
// AddComAgressiveMove ( i , 63 , 31 ) ;
8716: LD_VAR 0 1
8720: PPUSH
8721: LD_INT 63
8723: PPUSH
8724: LD_INT 31
8726: PPUSH
8727: CALL_OW 174
// AddComWait ( i , 0 0$2 ) ;
8731: LD_VAR 0 1
8735: PPUSH
8736: LD_INT 70
8738: PPUSH
8739: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 43 ) ;
8743: LD_VAR 0 1
8747: PPUSH
8748: LD_INT 103
8750: PPUSH
8751: LD_INT 43
8753: PPUSH
8754: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
8758: LD_VAR 0 1
8762: PPUSH
8763: LD_INT 105
8765: PPUSH
8766: CALL_OW 202
// if Difficulty > 1 then
8770: LD_OWVAR 67
8774: PUSH
8775: LD_INT 1
8777: GREATER
8778: IFFALSE 8795
// AddComAgressiveMove ( i , 114 , 69 ) ;
8780: LD_VAR 0 1
8784: PPUSH
8785: LD_INT 114
8787: PPUSH
8788: LD_INT 69
8790: PPUSH
8791: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
8795: LD_VAR 0 1
8799: PPUSH
8800: LD_INT 105
8802: PPUSH
8803: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
8807: LD_VAR 0 1
8811: PPUSH
8812: LD_INT 42
8814: PPUSH
8815: LD_INT 20
8817: PPUSH
8818: CALL_OW 174
// end ;
8822: GO 8693
8824: POP
8825: POP
// wait ( 0 0$8 ) ;
8826: LD_INT 280
8828: PPUSH
8829: CALL_OW 67
// RemoveSeeing ( 64 , 32 , 2 ) ;
8833: LD_INT 64
8835: PPUSH
8836: LD_INT 32
8838: PPUSH
8839: LD_INT 2
8841: PPUSH
8842: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
8846: LD_INT 35
8848: PPUSH
8849: CALL_OW 67
// for i in tmp do
8853: LD_ADDR_VAR 0 1
8857: PUSH
8858: LD_VAR 0 3
8862: PUSH
8863: FOR_IN
8864: IFFALSE 8895
// if IsDead ( i ) then
8866: LD_VAR 0 1
8870: PPUSH
8871: CALL_OW 301
8875: IFFALSE 8893
// tmp := tmp diff i ;
8877: LD_ADDR_VAR 0 3
8881: PUSH
8882: LD_VAR 0 3
8886: PUSH
8887: LD_VAR 0 1
8891: DIFF
8892: ST_TO_ADDR
8893: GO 8863
8895: POP
8896: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
8897: LD_VAR 0 3
8901: NOT
8902: PUSH
8903: LD_VAR 0 3
8907: PPUSH
8908: LD_INT 95
8910: PUSH
8911: LD_INT 7
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: PUSH
8918: LD_INT 3
8920: PUSH
8921: LD_INT 60
8923: PUSH
8924: EMPTY
8925: LIST
8926: PUSH
8927: EMPTY
8928: LIST
8929: LIST
8930: PUSH
8931: EMPTY
8932: LIST
8933: LIST
8934: PPUSH
8935: CALL_OW 72
8939: PUSH
8940: LD_VAR 0 3
8944: EQUAL
8945: OR
8946: IFFALSE 8846
// if tmp then
8948: LD_VAR 0 3
8952: IFFALSE 8979
// begin usPatrol := [ ] ;
8954: LD_ADDR_EXP 16
8958: PUSH
8959: EMPTY
8960: ST_TO_ADDR
// usForces := usForces union tmp ;
8961: LD_ADDR_EXP 21
8965: PUSH
8966: LD_EXP 21
8970: PUSH
8971: LD_VAR 0 3
8975: UNION
8976: ST_TO_ADDR
// end else
8977: GO 8987
// trickyMove := true ;
8979: LD_ADDR_EXP 15
8983: PUSH
8984: LD_INT 1
8986: ST_TO_ADDR
// end else
8987: GO 9418
// begin tmp := [ ] ;
8989: LD_ADDR_VAR 0 3
8993: PUSH
8994: EMPTY
8995: ST_TO_ADDR
// k := 4 ;
8996: LD_ADDR_VAR 0 2
9000: PUSH
9001: LD_INT 4
9003: ST_TO_ADDR
// if usForces < 4 then
9004: LD_EXP 21
9008: PUSH
9009: LD_INT 4
9011: LESS
9012: IFFALSE 9024
// k := usForces ;
9014: LD_ADDR_VAR 0 2
9018: PUSH
9019: LD_EXP 21
9023: ST_TO_ADDR
// for i := 1 to k do
9024: LD_ADDR_VAR 0 1
9028: PUSH
9029: DOUBLE
9030: LD_INT 1
9032: DEC
9033: ST_TO_ADDR
9034: LD_VAR 0 2
9038: PUSH
9039: FOR_TO
9040: IFFALSE 9095
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
9042: LD_ADDR_VAR 0 3
9046: PUSH
9047: LD_VAR 0 3
9051: PPUSH
9052: LD_VAR 0 3
9056: PUSH
9057: LD_INT 1
9059: PLUS
9060: PPUSH
9061: LD_EXP 21
9065: PUSH
9066: LD_INT 1
9068: ARRAY
9069: PPUSH
9070: CALL_OW 1
9074: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
9075: LD_ADDR_EXP 21
9079: PUSH
9080: LD_EXP 21
9084: PPUSH
9085: LD_INT 1
9087: PPUSH
9088: CALL_OW 3
9092: ST_TO_ADDR
// end ;
9093: GO 9039
9095: POP
9096: POP
// if Lynch then
9097: LD_EXP 20
9101: IFFALSE 9119
// tmp := tmp ^ Lynch ;
9103: LD_ADDR_VAR 0 3
9107: PUSH
9108: LD_VAR 0 3
9112: PUSH
9113: LD_EXP 20
9117: ADD
9118: ST_TO_ADDR
// usPatrol := tmp ;
9119: LD_ADDR_EXP 16
9123: PUSH
9124: LD_VAR 0 3
9128: ST_TO_ADDR
// for i in tmp do
9129: LD_ADDR_VAR 0 1
9133: PUSH
9134: LD_VAR 0 3
9138: PUSH
9139: FOR_IN
9140: IFFALSE 9233
// begin if IsInUnit ( i ) then
9142: LD_VAR 0 1
9146: PPUSH
9147: CALL_OW 310
9151: IFFALSE 9162
// ComExitBuilding ( i ) ;
9153: LD_VAR 0 1
9157: PPUSH
9158: CALL_OW 122
// AddComAgressiveMove ( i , 69 , 15 ) ;
9162: LD_VAR 0 1
9166: PPUSH
9167: LD_INT 69
9169: PPUSH
9170: LD_INT 15
9172: PPUSH
9173: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9177: LD_VAR 0 1
9181: PPUSH
9182: LD_INT 700
9184: PPUSH
9185: CALL_OW 202
// AddComAgressiveMove ( i , 55 , 43 ) ;
9189: LD_VAR 0 1
9193: PPUSH
9194: LD_INT 55
9196: PPUSH
9197: LD_INT 43
9199: PPUSH
9200: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9204: LD_VAR 0 1
9208: PPUSH
9209: LD_INT 700
9211: PPUSH
9212: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9216: LD_VAR 0 1
9220: PPUSH
9221: LD_INT 42
9223: PPUSH
9224: LD_INT 20
9226: PPUSH
9227: CALL_OW 174
// end ;
9231: GO 9139
9233: POP
9234: POP
// repeat wait ( 0 0$1 ) ;
9235: LD_INT 35
9237: PPUSH
9238: CALL_OW 67
// for i in tmp do
9242: LD_ADDR_VAR 0 1
9246: PUSH
9247: LD_VAR 0 3
9251: PUSH
9252: FOR_IN
9253: IFFALSE 9284
// if IsDead ( i ) then
9255: LD_VAR 0 1
9259: PPUSH
9260: CALL_OW 301
9264: IFFALSE 9282
// tmp := tmp diff i ;
9266: LD_ADDR_VAR 0 3
9270: PUSH
9271: LD_VAR 0 3
9275: PUSH
9276: LD_VAR 0 1
9280: DIFF
9281: ST_TO_ADDR
9282: GO 9252
9284: POP
9285: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9286: LD_VAR 0 3
9290: NOT
9291: PUSH
9292: LD_VAR 0 3
9296: PPUSH
9297: LD_INT 95
9299: PUSH
9300: LD_INT 7
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: PUSH
9307: LD_INT 3
9309: PUSH
9310: LD_INT 60
9312: PUSH
9313: EMPTY
9314: LIST
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: PUSH
9320: EMPTY
9321: LIST
9322: LIST
9323: PPUSH
9324: CALL_OW 72
9328: PUSH
9329: LD_VAR 0 3
9333: EQUAL
9334: OR
9335: IFFALSE 9235
// if not tmp then
9337: LD_VAR 0 3
9341: NOT
9342: IFFALSE 9354
// trickyMove := true else
9344: LD_ADDR_EXP 15
9348: PUSH
9349: LD_INT 1
9351: ST_TO_ADDR
9352: GO 9361
// usPatrol := [ ] ;
9354: LD_ADDR_EXP 16
9358: PUSH
9359: EMPTY
9360: ST_TO_ADDR
// if tmp diff Lynch then
9361: LD_VAR 0 3
9365: PUSH
9366: LD_EXP 20
9370: DIFF
9371: IFFALSE 9395
// usForces := usForces union ( tmp diff Lynch ) ;
9373: LD_ADDR_EXP 21
9377: PUSH
9378: LD_EXP 21
9382: PUSH
9383: LD_VAR 0 3
9387: PUSH
9388: LD_EXP 20
9392: DIFF
9393: UNION
9394: ST_TO_ADDR
// if IsOk ( Lynch ) then
9395: LD_EXP 20
9399: PPUSH
9400: CALL_OW 302
9404: IFFALSE 9418
// ComEnterUnit ( Lynch , Delta ) ;
9406: LD_EXP 20
9410: PPUSH
9411: LD_INT 1
9413: PPUSH
9414: CALL_OW 120
// end ; end ; end ;
9418: PPOPN 3
9420: END
// every 0 0$1 trigger trickyMove do
9421: LD_EXP 15
9425: IFFALSE 9437
9427: GO 9429
9429: DISABLE
// SetAchievement ( ACH_TRAP ) ;
9430: LD_STRING ACH_TRAP
9432: PPUSH
9433: CALL_OW 543
9437: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ) do
9438: LD_INT 22
9440: PUSH
9441: LD_INT 2
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: PUSH
9448: LD_INT 23
9450: PUSH
9451: LD_INT 1
9453: PUSH
9454: EMPTY
9455: LIST
9456: LIST
9457: PUSH
9458: LD_INT 21
9460: PUSH
9461: LD_INT 2
9463: PUSH
9464: EMPTY
9465: LIST
9466: LIST
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: LIST
9472: PPUSH
9473: CALL_OW 69
9477: IFFALSE 9489
9479: GO 9481
9481: DISABLE
// SetAchievement ( ACH_SCRAP ) ;
9482: LD_STRING ACH_SCRAP
9484: PPUSH
9485: CALL_OW 543
9489: END
// every 0 0$1 trigger UnitFilter ( usPatrol , [ f_see , 2 ] ) and See ( 1 , Heike ) do
9490: LD_EXP 16
9494: PPUSH
9495: LD_INT 101
9497: PUSH
9498: LD_INT 2
9500: PUSH
9501: EMPTY
9502: LIST
9503: LIST
9504: PPUSH
9505: CALL_OW 72
9509: PUSH
9510: LD_INT 1
9512: PPUSH
9513: LD_EXP 23
9517: PPUSH
9518: CALL_OW 292
9522: AND
9523: IFFALSE 9656
9525: GO 9527
9527: DISABLE
// begin if not trap then
9528: LD_EXP 17
9532: NOT
9533: IFFALSE 9561
// begin Say ( Heike , DH-2-trap ) ;
9535: LD_EXP 23
9539: PPUSH
9540: LD_STRING DH-2-trap
9542: PPUSH
9543: CALL_OW 88
// Say ( Mike , DM-2-trap ) ;
9547: LD_EXP 25
9551: PPUSH
9552: LD_STRING DM-2-trap
9554: PPUSH
9555: CALL_OW 88
// end else
9559: GO 9573
// begin Say ( Heike , DH-1-trap-a ) ;
9561: LD_EXP 23
9565: PPUSH
9566: LD_STRING DH-1-trap-a
9568: PPUSH
9569: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
9573: LD_INT 35
9575: PPUSH
9576: CALL_OW 67
// until trickyMove ;
9580: LD_EXP 15
9584: IFFALSE 9573
// Say ( Heike , DH-3-trap ) ;
9586: LD_EXP 23
9590: PPUSH
9591: LD_STRING DH-3-trap
9593: PPUSH
9594: CALL_OW 88
// if IsOk ( Givi ) and IsOk ( Kaia ) then
9598: LD_EXP 24
9602: PPUSH
9603: CALL_OW 302
9607: PUSH
9608: LD_EXP 28
9612: PPUSH
9613: CALL_OW 302
9617: AND
9618: IFFALSE 9656
// begin Say ( Givi , DG-3-trap ) ;
9620: LD_EXP 24
9624: PPUSH
9625: LD_STRING DG-3-trap
9627: PPUSH
9628: CALL_OW 88
// Say ( Kaia , DK-3-trap ) ;
9632: LD_EXP 28
9636: PPUSH
9637: LD_STRING DK-3-trap
9639: PPUSH
9640: CALL_OW 88
// Say ( Givi , DG-4-trap ) ;
9644: LD_EXP 24
9648: PPUSH
9649: LD_STRING DG-4-trap
9651: PPUSH
9652: CALL_OW 88
// end ; end ;
9656: END
// every 0 0$1 trigger GetSide ( Delta ) = 2 and attackDeltaAllowed do var i , tmp ;
9657: LD_INT 1
9659: PPUSH
9660: CALL_OW 255
9664: PUSH
9665: LD_INT 2
9667: EQUAL
9668: PUSH
9669: LD_EXP 14
9673: AND
9674: IFFALSE 9833
9676: GO 9678
9678: DISABLE
9679: LD_INT 0
9681: PPUSH
9682: PPUSH
// begin if not IsOk ( Kaia ) then
9683: LD_EXP 28
9687: PPUSH
9688: CALL_OW 302
9692: NOT
9693: IFFALSE 9697
// exit ;
9695: GO 9833
// if tick < 5 5$00 then
9697: LD_OWVAR 1
9701: PUSH
9702: LD_INT 10500
9704: LESS
9705: IFFALSE 9714
// SetAchievement ( ACH_DELTA ) ;
9707: LD_STRING ACH_DELTA
9709: PPUSH
9710: CALL_OW 543
// Say ( Kaia , DK-1-capture ) ;
9714: LD_EXP 28
9718: PPUSH
9719: LD_STRING DK-1-capture
9721: PPUSH
9722: CALL_OW 88
// Say ( Heike , DH-1-capture ) ;
9726: LD_EXP 23
9730: PPUSH
9731: LD_STRING DH-1-capture
9733: PPUSH
9734: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
9738: LD_ADDR_VAR 0 2
9742: PUSH
9743: LD_INT 22
9745: PUSH
9746: LD_INT 1
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: PUSH
9753: LD_INT 25
9755: PUSH
9756: LD_INT 1
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: PPUSH
9767: CALL_OW 69
9771: ST_TO_ADDR
// if not tmp then
9772: LD_VAR 0 2
9776: NOT
9777: IFFALSE 9781
// exit ;
9779: GO 9833
// for i in tmp do
9781: LD_ADDR_VAR 0 1
9785: PUSH
9786: LD_VAR 0 2
9790: PUSH
9791: FOR_IN
9792: IFFALSE 9831
// begin if IsInUnit ( i ) then
9794: LD_VAR 0 1
9798: PPUSH
9799: CALL_OW 310
9803: IFFALSE 9814
// ComExitBuilding ( i ) ;
9805: LD_VAR 0 1
9809: PPUSH
9810: CALL_OW 122
// AddComAgressiveMove ( i , 38 , 23 ) ;
9814: LD_VAR 0 1
9818: PPUSH
9819: LD_INT 38
9821: PPUSH
9822: LD_INT 23
9824: PPUSH
9825: CALL_OW 174
// end ;
9829: GO 9791
9831: POP
9832: POP
// end ;
9833: PPOPN 2
9835: END
// every 0 0$1 trigger GetSide ( usLab ) = 2 and attackDeltaAllowed do
9836: LD_INT 3
9838: PPUSH
9839: CALL_OW 255
9843: PUSH
9844: LD_INT 2
9846: EQUAL
9847: PUSH
9848: LD_EXP 14
9852: AND
9853: IFFALSE 9885
9855: GO 9857
9857: DISABLE
// begin DialogueOn ;
9858: CALL_OW 6
// Say ( Aviradze , DA-1-capture ) ;
9862: LD_EXP 27
9866: PPUSH
9867: LD_STRING DA-1-capture
9869: PPUSH
9870: CALL_OW 88
// DialogueOff ;
9874: CALL_OW 7
// ChangeMissionObjectives ( OTame ) ;
9878: LD_STRING OTame
9880: PPUSH
9881: CALL_OW 337
// end ;
9885: END
// every 0 0$1 trigger GetTech ( tech_ApeLang , 2 ) = state_researched and attackDeltaAllowed do
9886: LD_INT 1
9888: PPUSH
9889: LD_INT 2
9891: PPUSH
9892: CALL_OW 321
9896: PUSH
9897: LD_INT 2
9899: EQUAL
9900: PUSH
9901: LD_EXP 14
9905: AND
9906: IFFALSE 10057
9908: GO 9910
9910: DISABLE
// begin DialogueOn ;
9911: CALL_OW 6
// Say ( Aviradze , DA-1-ape ) ;
9915: LD_EXP 27
9919: PPUSH
9920: LD_STRING DA-1-ape
9922: PPUSH
9923: CALL_OW 88
// Say ( Heike , DH-1-ape ) ;
9927: LD_EXP 23
9931: PPUSH
9932: LD_STRING DH-1-ape
9934: PPUSH
9935: CALL_OW 88
// Say ( Aviradze , DA-2-ape ) ;
9939: LD_EXP 27
9943: PPUSH
9944: LD_STRING DA-2-ape
9946: PPUSH
9947: CALL_OW 88
// Say ( Aviradze , DA-3-ape ) ;
9951: LD_EXP 27
9955: PPUSH
9956: LD_STRING DA-3-ape
9958: PPUSH
9959: CALL_OW 88
// Say ( Heike , DH-3-ape ) ;
9963: LD_EXP 23
9967: PPUSH
9968: LD_STRING DH-3-ape
9970: PPUSH
9971: CALL_OW 88
// DialogueOff ;
9975: CALL_OW 7
// if FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 then
9979: LD_INT 22
9981: PUSH
9982: LD_INT 0
9984: PUSH
9985: EMPTY
9986: LIST
9987: LIST
9988: PUSH
9989: LD_INT 25
9991: PUSH
9992: LD_INT 12
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: PPUSH
10003: CALL_OW 69
10007: PUSH
10008: LD_INT 0
10010: EQUAL
10011: IFFALSE 10023
// SpawnApeman ( forest , 2 ) ;
10013: LD_INT 1
10015: PPUSH
10016: LD_INT 2
10018: PPUSH
10019: CALL 405 0 2
// repeat wait ( 0 0$1 ) ;
10023: LD_INT 35
10025: PPUSH
10026: CALL_OW 67
// until FilterAllUnits ( [ f_class , class_apeman ] ) = 0 ;
10030: LD_INT 25
10032: PUSH
10033: LD_INT 12
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: PPUSH
10040: CALL_OW 69
10044: PUSH
10045: LD_INT 0
10047: EQUAL
10048: IFFALSE 10023
// YouLost ( Ape ) ;
10050: LD_STRING Ape
10052: PPUSH
10053: CALL_OW 104
// end ;
10057: END
// every 0 0$5 trigger lostCounter >= [ 3 , 2 , 2 ] [ Difficulty ] do
10058: LD_EXP 18
10062: PUSH
10063: LD_INT 3
10065: PUSH
10066: LD_INT 2
10068: PUSH
10069: LD_INT 2
10071: PUSH
10072: EMPTY
10073: LIST
10074: LIST
10075: LIST
10076: PUSH
10077: LD_OWVAR 67
10081: ARRAY
10082: GREATEREQUAL
10083: IFFALSE 10127
10085: GO 10087
10087: DISABLE
// begin DialogueOn ;
10088: CALL_OW 6
// Say ( Aviradze , DA-1-failure ) ;
10092: LD_EXP 27
10096: PPUSH
10097: LD_STRING DA-1-failure
10099: PPUSH
10100: CALL_OW 88
// Say ( Aviradze , DA-2-failure ) ;
10104: LD_EXP 27
10108: PPUSH
10109: LD_STRING DA-2-failure
10111: PPUSH
10112: CALL_OW 88
// YouLost ( Failure ) ;
10116: LD_STRING Failure
10118: PPUSH
10119: CALL_OW 104
// DialogueOff ;
10123: CALL_OW 7
// end ;
10127: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
10128: LD_EXP 28
10132: PPUSH
10133: CALL_OW 256
10137: PUSH
10138: LD_INT 3
10140: LESS
10141: IFFALSE 10274
10143: GO 10145
10145: DISABLE
// begin DialogueOn ;
10146: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
10150: LD_EXP 28
10154: PPUSH
10155: CALL_OW 87
// ForceSay ( Kaia , DK-Kaiaout-1 ) ;
10159: LD_EXP 28
10163: PPUSH
10164: LD_STRING DK-Kaiaout-1
10166: PPUSH
10167: CALL_OW 91
// Say ( Heike , DH-Kaiaout-2 ) ;
10171: LD_EXP 23
10175: PPUSH
10176: LD_STRING DH-Kaiaout-2
10178: PPUSH
10179: CALL_OW 88
// Say ( Givi , DG-Kaiaout-3 ) ;
10183: LD_EXP 24
10187: PPUSH
10188: LD_STRING DG-Kaiaout-3
10190: PPUSH
10191: CALL_OW 88
// Say ( Heike , DH-Kaiaout-4 ) ;
10195: LD_EXP 23
10199: PPUSH
10200: LD_STRING DH-Kaiaout-4
10202: PPUSH
10203: CALL_OW 88
// if Givi then
10207: LD_EXP 24
10211: IFFALSE 10261
// begin Say ( Givi , DG-Kaiaout-5 ) ;
10213: LD_EXP 24
10217: PPUSH
10218: LD_STRING DG-Kaiaout-5
10220: PPUSH
10221: CALL_OW 88
// Say ( Heike , DH-Kaiaout-6 ) ;
10225: LD_EXP 23
10229: PPUSH
10230: LD_STRING DH-Kaiaout-6
10232: PPUSH
10233: CALL_OW 88
// Say ( Givi , DG-Kaiaout-7 ) ;
10237: LD_EXP 24
10241: PPUSH
10242: LD_STRING DG-Kaiaout-7
10244: PPUSH
10245: CALL_OW 88
// Say ( Heike , DH-Kaiaout-8 ) ;
10249: LD_EXP 23
10253: PPUSH
10254: LD_STRING DH-Kaiaout-8
10256: PPUSH
10257: CALL_OW 88
// end ; DialogueOff ;
10261: CALL_OW 7
// KillUnit ( Kaia ) ;
10265: LD_EXP 28
10269: PPUSH
10270: CALL_OW 66
// end ;
10274: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) and IsOk ( Aviradze ) and GetSide ( Aviradze ) = 2 do var tmp ;
10275: LD_INT 22
10277: PUSH
10278: LD_INT 2
10280: PUSH
10281: EMPTY
10282: LIST
10283: LIST
10284: PUSH
10285: LD_INT 23
10287: PUSH
10288: LD_INT 0
10290: PUSH
10291: EMPTY
10292: LIST
10293: LIST
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: PPUSH
10299: CALL_OW 69
10303: PUSH
10304: LD_EXP 27
10308: PPUSH
10309: CALL_OW 302
10313: AND
10314: PUSH
10315: LD_EXP 27
10319: PPUSH
10320: CALL_OW 255
10324: PUSH
10325: LD_INT 2
10327: EQUAL
10328: AND
10329: IFFALSE 11101
10331: GO 10333
10333: DISABLE
10334: LD_INT 0
10336: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10337: LD_ADDR_VAR 0 1
10341: PUSH
10342: LD_INT 22
10344: PUSH
10345: LD_INT 2
10347: PUSH
10348: EMPTY
10349: LIST
10350: LIST
10351: PUSH
10352: LD_INT 23
10354: PUSH
10355: LD_INT 0
10357: PUSH
10358: EMPTY
10359: LIST
10360: LIST
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: PPUSH
10366: CALL_OW 69
10370: ST_TO_ADDR
// InGameOn ;
10371: CALL_OW 8
// CenterNowOnUnits ( tmp ) ;
10375: LD_VAR 0 1
10379: PPUSH
10380: CALL_OW 87
// ComMoveUnit ( tmp , Aviradze ) ;
10384: LD_VAR 0 1
10388: PPUSH
10389: LD_EXP 27
10393: PPUSH
10394: CALL_OW 112
// ComTurnUnit ( Aviradze , tmp ) ;
10398: LD_EXP 27
10402: PPUSH
10403: LD_VAR 0 1
10407: PPUSH
10408: CALL_OW 119
// wait ( 0 0$1 ) ;
10412: LD_INT 35
10414: PPUSH
10415: CALL_OW 67
// Say ( Aviradze , DA-1-tame-a ) ;
10419: LD_EXP 27
10423: PPUSH
10424: LD_STRING DA-1-tame-a
10426: PPUSH
10427: CALL_OW 88
// if IsOk ( Mike ) then
10431: LD_EXP 25
10435: PPUSH
10436: CALL_OW 302
10440: IFFALSE 10478
// begin Say ( Mike , DM-1-tame-a ) ;
10442: LD_EXP 25
10446: PPUSH
10447: LD_STRING DM-1-tame-a
10449: PPUSH
10450: CALL_OW 88
// Say ( Sophia , DS-1-tame-a ) ;
10454: LD_EXP 29
10458: PPUSH
10459: LD_STRING DS-1-tame-a
10461: PPUSH
10462: CALL_OW 88
// Say ( Mike , DM-2-tame-a ) ;
10466: LD_EXP 25
10470: PPUSH
10471: LD_STRING DM-2-tame-a
10473: PPUSH
10474: CALL_OW 88
// end ; wait ( 0 0$3 ) ;
10478: LD_INT 105
10480: PPUSH
10481: CALL_OW 67
// PrepareFarmer ;
10485: CALL 11776 0 0
// CenterOnUnits ( Farmer ) ;
10489: LD_EXP 31
10493: PPUSH
10494: CALL_OW 85
// ComMoveXY ( Farmer , 105 , 59 ) ;
10498: LD_EXP 31
10502: PPUSH
10503: LD_INT 105
10505: PPUSH
10506: LD_INT 59
10508: PPUSH
10509: CALL_OW 111
// AddComHold ( Farmer ) ;
10513: LD_EXP 31
10517: PPUSH
10518: CALL_OW 200
// SayRadio ( Farmer , DF-1-end ) ;
10522: LD_EXP 31
10526: PPUSH
10527: LD_STRING DF-1-end
10529: PPUSH
10530: CALL_OW 94
// Say ( Aviradze , DA-1-end ) ;
10534: LD_EXP 27
10538: PPUSH
10539: LD_STRING DA-1-end
10541: PPUSH
10542: CALL_OW 88
// SayRadio ( Farmer , DF-2-end ) ;
10546: LD_EXP 31
10550: PPUSH
10551: LD_STRING DF-2-end
10553: PPUSH
10554: CALL_OW 94
// Say ( Aviradze , DA-2-end ) ;
10558: LD_EXP 27
10562: PPUSH
10563: LD_STRING DA-2-end
10565: PPUSH
10566: CALL_OW 88
// SayRadio ( Farmer , DF-3-end ) ;
10570: LD_EXP 31
10574: PPUSH
10575: LD_STRING DF-3-end
10577: PPUSH
10578: CALL_OW 94
// Say ( Heike , DH-3-end ) ;
10582: LD_EXP 23
10586: PPUSH
10587: LD_STRING DH-3-end
10589: PPUSH
10590: CALL_OW 88
// SayRadio ( Farmer , DF-4-end ) ;
10594: LD_EXP 31
10598: PPUSH
10599: LD_STRING DF-4-end
10601: PPUSH
10602: CALL_OW 94
// if tick <= [ 25 25$00 , 22 22$30 , 20 20$00 ] [ Difficulty ] then
10606: LD_OWVAR 1
10610: PUSH
10611: LD_INT 52500
10613: PUSH
10614: LD_INT 47250
10616: PUSH
10617: LD_INT 42000
10619: PUSH
10620: EMPTY
10621: LIST
10622: LIST
10623: LIST
10624: PUSH
10625: LD_OWVAR 67
10629: ARRAY
10630: LESSEQUAL
10631: IFFALSE 10645
// AddMedal ( med1 , 1 ) else
10633: LD_STRING med1
10635: PPUSH
10636: LD_INT 1
10638: PPUSH
10639: CALL_OW 101
10643: GO 10656
// AddMedal ( med1 , - 1 ) ;
10645: LD_STRING med1
10647: PPUSH
10648: LD_INT 1
10650: NEG
10651: PPUSH
10652: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) = 0 and not gladstoneEscaped then
10656: LD_INT 22
10658: PUSH
10659: LD_INT 1
10661: PUSH
10662: EMPTY
10663: LIST
10664: LIST
10665: PUSH
10666: LD_INT 25
10668: PUSH
10669: LD_INT 4
10671: PUSH
10672: EMPTY
10673: LIST
10674: LIST
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: PPUSH
10680: CALL_OW 69
10684: PUSH
10685: LD_INT 0
10687: EQUAL
10688: PUSH
10689: LD_EXP 12
10693: NOT
10694: AND
10695: IFFALSE 10709
// AddMedal ( med2 , 1 ) else
10697: LD_STRING med2
10699: PPUSH
10700: LD_INT 1
10702: PPUSH
10703: CALL_OW 101
10707: GO 10720
// AddMedal ( med2 , - 1 ) ;
10709: LD_STRING med2
10711: PPUSH
10712: LD_INT 1
10714: NEG
10715: PPUSH
10716: CALL_OW 101
// if trickyMove then
10720: LD_EXP 15
10724: IFFALSE 10738
// AddMedal ( med3 , 1 ) else
10726: LD_STRING med3
10728: PPUSH
10729: LD_INT 1
10731: PPUSH
10732: CALL_OW 101
10736: GO 10768
// if spottedBeforeRadio then
10738: LD_EXP 6
10742: IFFALSE 10757
// AddMedal ( med3 , - 2 ) else
10744: LD_STRING med3
10746: PPUSH
10747: LD_INT 2
10749: NEG
10750: PPUSH
10751: CALL_OW 101
10755: GO 10768
// AddMedal ( med3 , - 1 ) ;
10757: LD_STRING med3
10759: PPUSH
10760: LD_INT 1
10762: NEG
10763: PPUSH
10764: CALL_OW 101
// GiveMedals ( MAIN ) ;
10768: LD_STRING MAIN
10770: PPUSH
10771: CALL_OW 102
// SaveCharacters ( tmp , 02_ape ) ;
10775: LD_VAR 0 1
10779: PPUSH
10780: LD_STRING 02_ape
10782: PPUSH
10783: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
10787: LD_ADDR_VAR 0 1
10791: PUSH
10792: LD_INT 22
10794: PUSH
10795: LD_INT 2
10797: PUSH
10798: EMPTY
10799: LIST
10800: LIST
10801: PUSH
10802: LD_INT 23
10804: PUSH
10805: LD_INT 2
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: PUSH
10812: LD_INT 21
10814: PUSH
10815: LD_INT 1
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: LIST
10826: PPUSH
10827: CALL_OW 69
10831: ST_TO_ADDR
// RewardPeople ( tmp ) ;
10832: LD_VAR 0 1
10836: PPUSH
10837: CALL_OW 43
// SaveCharacters ( Heike , 02_Heike ) ;
10841: LD_EXP 23
10845: PPUSH
10846: LD_STRING 02_Heike
10848: PPUSH
10849: CALL_OW 38
// SaveCharacters ( Aviradze , 02_Aviradze ) ;
10853: LD_EXP 27
10857: PPUSH
10858: LD_STRING 02_Aviradze
10860: PPUSH
10861: CALL_OW 38
// if Givi then
10865: LD_EXP 24
10869: IFFALSE 10883
// SaveCharacters ( Givi , 02_Givi ) ;
10871: LD_EXP 24
10875: PPUSH
10876: LD_STRING 02_Givi
10878: PPUSH
10879: CALL_OW 38
// if Mike then
10883: LD_EXP 25
10887: IFFALSE 10901
// SaveCharacters ( Mike , 02_Mike ) ;
10889: LD_EXP 25
10893: PPUSH
10894: LD_STRING 02_Mike
10896: PPUSH
10897: CALL_OW 38
// if Kamil then
10901: LD_EXP 26
10905: IFFALSE 10919
// SaveCharacters ( Kamil , 02_Kamil ) ;
10907: LD_EXP 26
10911: PPUSH
10912: LD_STRING 02_Kamil
10914: PPUSH
10915: CALL_OW 38
// if Kaia then
10919: LD_EXP 28
10923: IFFALSE 10937
// SaveCharacters ( Kaia , 02_Kaia ) ;
10925: LD_EXP 28
10929: PPUSH
10930: LD_STRING 02_Kaia
10932: PPUSH
10933: CALL_OW 38
// if Sophia then
10937: LD_EXP 29
10941: IFFALSE 10955
// SaveCharacters ( Sophia , 02_Sophia ) ;
10943: LD_EXP 29
10947: PPUSH
10948: LD_STRING 02_Sophia
10950: PPUSH
10951: CALL_OW 38
// if Markov then
10955: LD_EXP 30
10959: IFFALSE 10973
// SaveCharacters ( Markov , 02_Markov ) ;
10961: LD_EXP 30
10965: PPUSH
10966: LD_STRING 02_Markov
10968: PPUSH
10969: CALL_OW 38
// if tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] then
10973: LD_VAR 0 1
10977: PUSH
10978: LD_EXP 23
10982: PUSH
10983: LD_EXP 27
10987: PUSH
10988: LD_EXP 24
10992: PUSH
10993: LD_EXP 25
10997: PUSH
10998: LD_EXP 26
11002: PUSH
11003: LD_EXP 29
11007: PUSH
11008: LD_EXP 28
11012: PUSH
11013: LD_EXP 30
11017: PUSH
11018: EMPTY
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: DIFF
11028: IFFALSE 11093
// SaveCharacters ( tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] , 02_others ) ;
11030: LD_VAR 0 1
11034: PUSH
11035: LD_EXP 23
11039: PUSH
11040: LD_EXP 27
11044: PUSH
11045: LD_EXP 24
11049: PUSH
11050: LD_EXP 25
11054: PUSH
11055: LD_EXP 26
11059: PUSH
11060: LD_EXP 29
11064: PUSH
11065: LD_EXP 28
11069: PUSH
11070: LD_EXP 30
11074: PUSH
11075: EMPTY
11076: LIST
11077: LIST
11078: LIST
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: DIFF
11085: PPUSH
11086: LD_STRING 02_others
11088: PPUSH
11089: CALL_OW 38
// YouWin ;
11093: CALL_OW 103
// InGameOff ;
11097: CALL_OW 9
// end ;
11101: PPOPN 1
11103: END
// every 0 0$1 trigger tick > timeUntilFarmer and aviradzeSpotted do
11104: LD_OWVAR 1
11108: PUSH
11109: LD_EXP 13
11113: GREATER
11114: PUSH
11115: LD_EXP 4
11119: AND
11120: IFFALSE 11160
11122: GO 11124
11124: DISABLE
// begin InGameOn ;
11125: CALL_OW 8
// PrepareFarmer ;
11129: CALL 11776 0 0
// CenterNowOnUnits ( Farmer ) ;
11133: LD_EXP 31
11137: PPUSH
11138: CALL_OW 87
// wait ( 0 0$2 ) ;
11142: LD_INT 70
11144: PPUSH
11145: CALL_OW 67
// YouLost ( Farmer ) ;
11149: LD_STRING Farmer
11151: PPUSH
11152: CALL_OW 104
// InGameOff ;
11156: CALL_OW 9
// end ; end_of_file
11160: END
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer ; export function PrepareArabian ; var un , veh ; begin
11161: LD_INT 0
11163: PPUSH
11164: PPUSH
11165: PPUSH
// uc_side := 2 ;
11166: LD_ADDR_OWVAR 20
11170: PUSH
11171: LD_INT 2
11173: ST_TO_ADDR
// uc_nation := 2 ;
11174: LD_ADDR_OWVAR 21
11178: PUSH
11179: LD_INT 2
11181: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
11182: LD_ADDR_EXP 23
11186: PUSH
11187: LD_STRING Heike
11189: PPUSH
11190: LD_EXP 1
11194: NOT
11195: PPUSH
11196: LD_EXP 2
11200: PPUSH
11201: CALL 29580 0 3
11205: ST_TO_ADDR
// PlaceUnitXY ( Heike , 83 , 72 , false ) ;
11206: LD_EXP 23
11210: PPUSH
11211: LD_INT 83
11213: PPUSH
11214: LD_INT 72
11216: PPUSH
11217: LD_INT 0
11219: PPUSH
11220: CALL_OW 48
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
11224: LD_ADDR_EXP 24
11228: PUSH
11229: LD_STRING Givi
11231: PPUSH
11232: LD_EXP 1
11236: NOT
11237: PPUSH
11238: LD_EXP 2
11242: PPUSH
11243: CALL 29580 0 3
11247: ST_TO_ADDR
// if Givi then
11248: LD_EXP 24
11252: IFFALSE 11272
// PlaceUnitXY ( Givi , 87 , 76 , false ) ;
11254: LD_EXP 24
11258: PPUSH
11259: LD_INT 87
11261: PPUSH
11262: LD_INT 76
11264: PPUSH
11265: LD_INT 0
11267: PPUSH
11268: CALL_OW 48
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
11272: LD_ADDR_EXP 25
11276: PUSH
11277: LD_STRING Mike
11279: PPUSH
11280: LD_EXP 1
11284: NOT
11285: PPUSH
11286: LD_EXP 2
11290: PPUSH
11291: CALL 29580 0 3
11295: ST_TO_ADDR
// if Mike then
11296: LD_EXP 25
11300: IFFALSE 11320
// PlaceUnitXY ( Mike , 84 , 76 , false ) ;
11302: LD_EXP 25
11306: PPUSH
11307: LD_INT 84
11309: PPUSH
11310: LD_INT 76
11312: PPUSH
11313: LD_INT 0
11315: PPUSH
11316: CALL_OW 48
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
11320: LD_ADDR_EXP 26
11324: PUSH
11325: LD_STRING Kamil
11327: PPUSH
11328: LD_EXP 1
11332: NOT
11333: PPUSH
11334: LD_EXP 2
11338: PPUSH
11339: CALL 29580 0 3
11343: ST_TO_ADDR
// if Kamil then
11344: LD_EXP 26
11348: IFFALSE 11368
// PlaceUnitXY ( Kamil , 85 , 78 , false ) ;
11350: LD_EXP 26
11354: PPUSH
11355: LD_INT 85
11357: PPUSH
11358: LD_INT 78
11360: PPUSH
11361: LD_INT 0
11363: PPUSH
11364: CALL_OW 48
// uc_side := 5 ;
11368: LD_ADDR_OWVAR 20
11372: PUSH
11373: LD_INT 5
11375: ST_TO_ADDR
// uc_nation := 2 ;
11376: LD_ADDR_OWVAR 21
11380: PUSH
11381: LD_INT 2
11383: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , false ,  ) ;
11384: LD_ADDR_EXP 27
11388: PUSH
11389: LD_STRING Aviradze
11391: PPUSH
11392: LD_INT 0
11394: PPUSH
11395: LD_STRING 
11397: PPUSH
11398: CALL 29580 0 3
11402: ST_TO_ADDR
// PlaceUnitXY ( Aviradze , 106 , 38 , false ) ;
11403: LD_EXP 27
11407: PPUSH
11408: LD_INT 106
11410: PPUSH
11411: LD_INT 38
11413: PPUSH
11414: LD_INT 0
11416: PPUSH
11417: CALL_OW 48
// ComTurnXY ( Aviradze , 103 , 38 ) ;
11421: LD_EXP 27
11425: PPUSH
11426: LD_INT 103
11428: PPUSH
11429: LD_INT 38
11431: PPUSH
11432: CALL_OW 118
// Kaia := PrepareUnit ( Kaia , false ,  ) ;
11436: LD_ADDR_EXP 28
11440: PUSH
11441: LD_STRING Kaia
11443: PPUSH
11444: LD_INT 0
11446: PPUSH
11447: LD_STRING 
11449: PPUSH
11450: CALL 29580 0 3
11454: ST_TO_ADDR
// PlaceUnitXY ( Kaia , 100 , 34 , false ) ;
11455: LD_EXP 28
11459: PPUSH
11460: LD_INT 100
11462: PPUSH
11463: LD_INT 34
11465: PPUSH
11466: LD_INT 0
11468: PPUSH
11469: CALL_OW 48
// ComTurnXY ( Kaia , 100 , 39 ) ;
11473: LD_EXP 28
11477: PPUSH
11478: LD_INT 100
11480: PPUSH
11481: LD_INT 39
11483: PPUSH
11484: CALL_OW 118
// Sophia := PrepareUnit ( Sophia , false ,  ) ;
11488: LD_ADDR_EXP 29
11492: PUSH
11493: LD_STRING Sophia
11495: PPUSH
11496: LD_INT 0
11498: PPUSH
11499: LD_STRING 
11501: PPUSH
11502: CALL 29580 0 3
11506: ST_TO_ADDR
// PlaceUnitXY ( Sophia , 109 , 50 , false ) ;
11507: LD_EXP 29
11511: PPUSH
11512: LD_INT 109
11514: PPUSH
11515: LD_INT 50
11517: PPUSH
11518: LD_INT 0
11520: PPUSH
11521: CALL_OW 48
// ComTurnXY ( Sophia , 100 , 39 ) ;
11525: LD_EXP 29
11529: PPUSH
11530: LD_INT 100
11532: PPUSH
11533: LD_INT 39
11535: PPUSH
11536: CALL_OW 118
// Markov := PrepareUnit ( Markov , false ,  ) ;
11540: LD_ADDR_EXP 30
11544: PUSH
11545: LD_STRING Markov
11547: PPUSH
11548: LD_INT 0
11550: PPUSH
11551: LD_STRING 
11553: PPUSH
11554: CALL 29580 0 3
11558: ST_TO_ADDR
// PrepareTank ( 5 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , [ 90 , 70 , 60 ] [ Difficulty ] ) ;
11559: LD_INT 5
11561: PPUSH
11562: LD_INT 3
11564: PPUSH
11565: LD_INT 21
11567: PPUSH
11568: LD_INT 1
11570: PPUSH
11571: LD_INT 1
11573: PPUSH
11574: LD_INT 42
11576: PPUSH
11577: LD_INT 90
11579: PUSH
11580: LD_INT 70
11582: PUSH
11583: LD_INT 60
11585: PUSH
11586: EMPTY
11587: LIST
11588: LIST
11589: LIST
11590: PUSH
11591: LD_OWVAR 67
11595: ARRAY
11596: PPUSH
11597: CALL 237 0 7
// veh := CreateVehicle ;
11601: LD_ADDR_VAR 0 3
11605: PUSH
11606: CALL_OW 45
11610: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
11611: LD_VAR 0 3
11615: PPUSH
11616: LD_INT 4
11618: PPUSH
11619: CALL_OW 233
// PlaceUnitXY ( veh , 109 , 38 , false ) ;
11623: LD_VAR 0 3
11627: PPUSH
11628: LD_INT 109
11630: PPUSH
11631: LD_INT 38
11633: PPUSH
11634: LD_INT 0
11636: PPUSH
11637: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
11641: LD_EXP 30
11645: PPUSH
11646: LD_VAR 0 3
11650: PPUSH
11651: CALL_OW 52
// ComTurnUnit ( Kaia , Aviradze ) ;
11655: LD_EXP 28
11659: PPUSH
11660: LD_EXP 27
11664: PPUSH
11665: CALL_OW 119
// ComTurnUnit ( Aviradze , Kaia ) ;
11669: LD_EXP 27
11673: PPUSH
11674: LD_EXP 28
11678: PPUSH
11679: CALL_OW 119
// if not Givi or not Mike then
11683: LD_EXP 24
11687: NOT
11688: PUSH
11689: LD_EXP 25
11693: NOT
11694: OR
11695: IFFALSE 11771
// begin uc_nation := 2 ;
11697: LD_ADDR_OWVAR 21
11701: PUSH
11702: LD_INT 2
11704: ST_TO_ADDR
// uc_side := 5 ;
11705: LD_ADDR_OWVAR 20
11709: PUSH
11710: LD_INT 5
11712: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 1 ) ;
11713: LD_INT 1
11715: PPUSH
11716: LD_INT 1
11718: PPUSH
11719: LD_INT 1
11721: PPUSH
11722: CALL_OW 380
// un := CreateHuman ;
11726: LD_ADDR_VAR 0 2
11730: PUSH
11731: CALL_OW 44
11735: ST_TO_ADDR
// PlaceUnitXYR ( un , 112 , 40 , 3 , false ) ;
11736: LD_VAR 0 2
11740: PPUSH
11741: LD_INT 112
11743: PPUSH
11744: LD_INT 40
11746: PPUSH
11747: LD_INT 3
11749: PPUSH
11750: LD_INT 0
11752: PPUSH
11753: CALL_OW 50
// ComTurnUnit ( un , Aviradze ) ;
11757: LD_VAR 0 2
11761: PPUSH
11762: LD_EXP 27
11766: PPUSH
11767: CALL_OW 119
// end ; end ;
11771: LD_VAR 0 1
11775: RET
// export function PrepareFarmer ; var i ; begin
11776: LD_INT 0
11778: PPUSH
11779: PPUSH
// uc_side := 5 ;
11780: LD_ADDR_OWVAR 20
11784: PUSH
11785: LD_INT 5
11787: ST_TO_ADDR
// uc_nation := 2 ;
11788: LD_ADDR_OWVAR 21
11792: PUSH
11793: LD_INT 2
11795: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
11796: LD_ADDR_EXP 31
11800: PUSH
11801: LD_STRING Farmer
11803: PPUSH
11804: LD_INT 0
11806: PPUSH
11807: LD_STRING 
11809: PPUSH
11810: CALL 29580 0 3
11814: ST_TO_ADDR
// PlaceUnitXY ( Farmer , 106 , 62 , false ) ;
11815: LD_EXP 31
11819: PPUSH
11820: LD_INT 106
11822: PPUSH
11823: LD_INT 62
11825: PPUSH
11826: LD_INT 0
11828: PPUSH
11829: CALL_OW 48
// for i := 1 to 5 do
11833: LD_ADDR_VAR 0 2
11837: PUSH
11838: DOUBLE
11839: LD_INT 1
11841: DEC
11842: ST_TO_ADDR
11843: LD_INT 5
11845: PUSH
11846: FOR_TO
11847: IFFALSE 11885
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
11849: LD_INT 1
11851: PPUSH
11852: LD_INT 1
11854: PPUSH
11855: LD_INT 1
11857: PPUSH
11858: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 105 , 64 , 3 , false ) ;
11862: CALL_OW 44
11866: PPUSH
11867: LD_INT 105
11869: PPUSH
11870: LD_INT 64
11872: PPUSH
11873: LD_INT 3
11875: PPUSH
11876: LD_INT 0
11878: PPUSH
11879: CALL_OW 50
// end ;
11883: GO 11846
11885: POP
11886: POP
// end ; end_of_file
11887: LD_VAR 0 1
11891: RET
// every 2 2$20 + 0 0$10 do
11892: GO 11894
11894: DISABLE
// begin enable ;
11895: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , forest , true ) ;
11896: LD_INT 1
11898: PPUSH
11899: LD_INT 5
11901: PPUSH
11902: CALL_OW 12
11906: PPUSH
11907: LD_INT 1
11909: PPUSH
11910: LD_INT 1
11912: PPUSH
11913: CALL_OW 55
// if tick > 6 6$00 then
11917: LD_OWVAR 1
11921: PUSH
11922: LD_INT 12600
11924: GREATER
11925: IFFALSE 11928
// disable ;
11927: DISABLE
// end ; end_of_file
11928: END
// on UnitDestroyed ( un ) do begin if un = Heike then
11929: LD_VAR 0 1
11933: PUSH
11934: LD_EXP 23
11938: EQUAL
11939: IFFALSE 11948
// YouLost ( Heike ) ;
11941: LD_STRING Heike
11943: PPUSH
11944: CALL_OW 104
// if un = Aviradze then
11948: LD_VAR 0 1
11952: PUSH
11953: LD_EXP 27
11957: EQUAL
11958: IFFALSE 11967
// YouLost ( Aviradze ) ;
11960: LD_STRING Aviradze
11962: PPUSH
11963: CALL_OW 104
// if un = usLab then
11967: LD_VAR 0 1
11971: PUSH
11972: LD_INT 3
11974: EQUAL
11975: IFFALSE 11984
// YouLost ( Lab ) ;
11977: LD_STRING Lab
11979: PPUSH
11980: CALL_OW 104
// if ( un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) diff [ Heike , Aviradze ] ) and aviradzeSpotted then
11984: LD_VAR 0 1
11988: PUSH
11989: LD_INT 22
11991: PUSH
11992: LD_INT 2
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: PUSH
11999: LD_INT 21
12001: PUSH
12002: LD_INT 1
12004: PUSH
12005: EMPTY
12006: LIST
12007: LIST
12008: PUSH
12009: LD_INT 23
12011: PUSH
12012: LD_INT 2
12014: PUSH
12015: EMPTY
12016: LIST
12017: LIST
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: LIST
12023: PPUSH
12024: CALL_OW 69
12028: PUSH
12029: LD_EXP 23
12033: PUSH
12034: LD_EXP 27
12038: PUSH
12039: EMPTY
12040: LIST
12041: LIST
12042: DIFF
12043: IN
12044: PUSH
12045: LD_EXP 4
12049: AND
12050: IFFALSE 12066
// lostCounter := lostCounter + 1 ;
12052: LD_ADDR_EXP 18
12056: PUSH
12057: LD_EXP 18
12061: PUSH
12062: LD_INT 1
12064: PLUS
12065: ST_TO_ADDR
// end ;
12066: PPOPN 1
12068: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 2 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) = 0 do
12069: LD_INT 23
12071: PUSH
12072: LD_INT 2
12074: PUSH
12075: EMPTY
12076: LIST
12077: LIST
12078: PUSH
12079: LD_INT 25
12081: PUSH
12082: LD_INT 2
12084: PUSH
12085: EMPTY
12086: LIST
12087: LIST
12088: PUSH
12089: EMPTY
12090: LIST
12091: LIST
12092: PPUSH
12093: CALL_OW 69
12097: PUSH
12098: LD_INT 0
12100: EQUAL
12101: PUSH
12102: LD_INT 22
12104: PUSH
12105: LD_INT 2
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: PUSH
12112: LD_INT 21
12114: PUSH
12115: LD_INT 3
12117: PUSH
12118: EMPTY
12119: LIST
12120: LIST
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: PPUSH
12126: CALL_OW 69
12130: PUSH
12131: LD_INT 0
12133: EQUAL
12134: AND
12135: IFFALSE 12147
12137: GO 12139
12139: DISABLE
// YouLost ( Eng ) ;
12140: LD_STRING Eng
12142: PPUSH
12143: CALL_OW 104
12147: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in usSci and killerSide = 2 then
12148: LD_VAR 0 1
12152: PUSH
12153: LD_EXP 22
12157: IN
12158: PUSH
12159: LD_VAR 0 2
12163: PUSH
12164: LD_INT 2
12166: EQUAL
12167: AND
12168: IFFALSE 12200
// begin usSci := usSci diff un ;
12170: LD_ADDR_EXP 22
12174: PUSH
12175: LD_EXP 22
12179: PUSH
12180: LD_VAR 0 1
12184: DIFF
12185: ST_TO_ADDR
// sciCounterKill := sciCounterKill + 1 ;
12186: LD_ADDR_EXP 9
12190: PUSH
12191: LD_EXP 9
12195: PUSH
12196: LD_INT 1
12198: PLUS
12199: ST_TO_ADDR
// end ; end ;
12200: PPOPN 3
12202: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
12203: LD_VAR 0 1
12207: PUSH
12208: LD_INT 2
12210: EQUAL
12211: PUSH
12212: LD_VAR 0 2
12216: PUSH
12217: LD_INT 5
12219: EQUAL
12220: AND
12221: IFFALSE 12230
// YouLost ( FriendlyFire ) ;
12223: LD_STRING FriendlyFire
12225: PPUSH
12226: CALL_OW 104
// end ; end_of_file
12230: PPOPN 2
12232: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
12233: LD_INT 0
12235: PPUSH
// ar_miner := 81 ;
12236: LD_ADDR_EXP 39
12240: PUSH
12241: LD_INT 81
12243: ST_TO_ADDR
// ar_crane := 88 ;
12244: LD_ADDR_EXP 38
12248: PUSH
12249: LD_INT 88
12251: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
12252: LD_ADDR_EXP 33
12256: PUSH
12257: LD_INT 89
12259: ST_TO_ADDR
// us_hack := 99 ;
12260: LD_ADDR_EXP 34
12264: PUSH
12265: LD_INT 99
12267: ST_TO_ADDR
// us_artillery := 97 ;
12268: LD_ADDR_EXP 35
12272: PUSH
12273: LD_INT 97
12275: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12276: LD_ADDR_EXP 36
12280: PUSH
12281: LD_INT 91
12283: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
12284: LD_ADDR_EXP 37
12288: PUSH
12289: LD_INT 92
12291: ST_TO_ADDR
// ru_radar := 98 ;
12292: LD_ADDR_EXP 32
12296: PUSH
12297: LD_INT 98
12299: ST_TO_ADDR
// tech_Artillery := 80 ;
12300: LD_ADDR_EXP 40
12304: PUSH
12305: LD_INT 80
12307: ST_TO_ADDR
// tech_RadMat := 81 ;
12308: LD_ADDR_EXP 41
12312: PUSH
12313: LD_INT 81
12315: ST_TO_ADDR
// tech_BasicTools := 82 ;
12316: LD_ADDR_EXP 42
12320: PUSH
12321: LD_INT 82
12323: ST_TO_ADDR
// tech_Cargo := 83 ;
12324: LD_ADDR_EXP 43
12328: PUSH
12329: LD_INT 83
12331: ST_TO_ADDR
// tech_Track := 84 ;
12332: LD_ADDR_EXP 44
12336: PUSH
12337: LD_INT 84
12339: ST_TO_ADDR
// tech_Crane := 85 ;
12340: LD_ADDR_EXP 45
12344: PUSH
12345: LD_INT 85
12347: ST_TO_ADDR
// tech_Bulldozer := 86 ;
12348: LD_ADDR_EXP 46
12352: PUSH
12353: LD_INT 86
12355: ST_TO_ADDR
// tech_Hovercraft := 87 ;
12356: LD_ADDR_EXP 47
12360: PUSH
12361: LD_INT 87
12363: ST_TO_ADDR
// class_mastodont := 31 ;
12364: LD_ADDR_EXP 48
12368: PUSH
12369: LD_INT 31
12371: ST_TO_ADDR
// class_horse := 21 ;
12372: LD_ADDR_EXP 49
12376: PUSH
12377: LD_INT 21
12379: ST_TO_ADDR
// end ;
12380: LD_VAR 0 1
12384: RET
// every 1 do
12385: GO 12387
12387: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
12388: CALL 12233 0 0
12392: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12393: LD_INT 0
12395: PPUSH
// if p2 = 100 then
12396: LD_VAR 0 2
12400: PUSH
12401: LD_INT 100
12403: EQUAL
12404: IFFALSE 13353
// begin if not StreamModeActive then
12406: LD_EXP 50
12410: NOT
12411: IFFALSE 12421
// StreamModeActive := true ;
12413: LD_ADDR_EXP 50
12417: PUSH
12418: LD_INT 1
12420: ST_TO_ADDR
// if p3 = 0 then
12421: LD_VAR 0 3
12425: PUSH
12426: LD_INT 0
12428: EQUAL
12429: IFFALSE 12435
// InitStreamMode ;
12431: CALL 13513 0 0
// if p3 = 1 then
12435: LD_VAR 0 3
12439: PUSH
12440: LD_INT 1
12442: EQUAL
12443: IFFALSE 12453
// sRocket := true ;
12445: LD_ADDR_EXP 55
12449: PUSH
12450: LD_INT 1
12452: ST_TO_ADDR
// if p3 = 2 then
12453: LD_VAR 0 3
12457: PUSH
12458: LD_INT 2
12460: EQUAL
12461: IFFALSE 12471
// sSpeed := true ;
12463: LD_ADDR_EXP 54
12467: PUSH
12468: LD_INT 1
12470: ST_TO_ADDR
// if p3 = 3 then
12471: LD_VAR 0 3
12475: PUSH
12476: LD_INT 3
12478: EQUAL
12479: IFFALSE 12489
// sEngine := true ;
12481: LD_ADDR_EXP 56
12485: PUSH
12486: LD_INT 1
12488: ST_TO_ADDR
// if p3 = 4 then
12489: LD_VAR 0 3
12493: PUSH
12494: LD_INT 4
12496: EQUAL
12497: IFFALSE 12507
// sSpec := true ;
12499: LD_ADDR_EXP 53
12503: PUSH
12504: LD_INT 1
12506: ST_TO_ADDR
// if p3 = 5 then
12507: LD_VAR 0 3
12511: PUSH
12512: LD_INT 5
12514: EQUAL
12515: IFFALSE 12525
// sLevel := true ;
12517: LD_ADDR_EXP 57
12521: PUSH
12522: LD_INT 1
12524: ST_TO_ADDR
// if p3 = 6 then
12525: LD_VAR 0 3
12529: PUSH
12530: LD_INT 6
12532: EQUAL
12533: IFFALSE 12543
// sArmoury := true ;
12535: LD_ADDR_EXP 58
12539: PUSH
12540: LD_INT 1
12542: ST_TO_ADDR
// if p3 = 7 then
12543: LD_VAR 0 3
12547: PUSH
12548: LD_INT 7
12550: EQUAL
12551: IFFALSE 12561
// sRadar := true ;
12553: LD_ADDR_EXP 59
12557: PUSH
12558: LD_INT 1
12560: ST_TO_ADDR
// if p3 = 8 then
12561: LD_VAR 0 3
12565: PUSH
12566: LD_INT 8
12568: EQUAL
12569: IFFALSE 12579
// sBunker := true ;
12571: LD_ADDR_EXP 60
12575: PUSH
12576: LD_INT 1
12578: ST_TO_ADDR
// if p3 = 9 then
12579: LD_VAR 0 3
12583: PUSH
12584: LD_INT 9
12586: EQUAL
12587: IFFALSE 12597
// sHack := true ;
12589: LD_ADDR_EXP 61
12593: PUSH
12594: LD_INT 1
12596: ST_TO_ADDR
// if p3 = 10 then
12597: LD_VAR 0 3
12601: PUSH
12602: LD_INT 10
12604: EQUAL
12605: IFFALSE 12615
// sFire := true ;
12607: LD_ADDR_EXP 62
12611: PUSH
12612: LD_INT 1
12614: ST_TO_ADDR
// if p3 = 11 then
12615: LD_VAR 0 3
12619: PUSH
12620: LD_INT 11
12622: EQUAL
12623: IFFALSE 12633
// sRefresh := true ;
12625: LD_ADDR_EXP 63
12629: PUSH
12630: LD_INT 1
12632: ST_TO_ADDR
// if p3 = 12 then
12633: LD_VAR 0 3
12637: PUSH
12638: LD_INT 12
12640: EQUAL
12641: IFFALSE 12651
// sExp := true ;
12643: LD_ADDR_EXP 64
12647: PUSH
12648: LD_INT 1
12650: ST_TO_ADDR
// if p3 = 13 then
12651: LD_VAR 0 3
12655: PUSH
12656: LD_INT 13
12658: EQUAL
12659: IFFALSE 12669
// sDepot := true ;
12661: LD_ADDR_EXP 65
12665: PUSH
12666: LD_INT 1
12668: ST_TO_ADDR
// if p3 = 14 then
12669: LD_VAR 0 3
12673: PUSH
12674: LD_INT 14
12676: EQUAL
12677: IFFALSE 12687
// sFlag := true ;
12679: LD_ADDR_EXP 66
12683: PUSH
12684: LD_INT 1
12686: ST_TO_ADDR
// if p3 = 15 then
12687: LD_VAR 0 3
12691: PUSH
12692: LD_INT 15
12694: EQUAL
12695: IFFALSE 12705
// sKamikadze := true ;
12697: LD_ADDR_EXP 74
12701: PUSH
12702: LD_INT 1
12704: ST_TO_ADDR
// if p3 = 16 then
12705: LD_VAR 0 3
12709: PUSH
12710: LD_INT 16
12712: EQUAL
12713: IFFALSE 12723
// sTroll := true ;
12715: LD_ADDR_EXP 75
12719: PUSH
12720: LD_INT 1
12722: ST_TO_ADDR
// if p3 = 17 then
12723: LD_VAR 0 3
12727: PUSH
12728: LD_INT 17
12730: EQUAL
12731: IFFALSE 12741
// sSlow := true ;
12733: LD_ADDR_EXP 76
12737: PUSH
12738: LD_INT 1
12740: ST_TO_ADDR
// if p3 = 18 then
12741: LD_VAR 0 3
12745: PUSH
12746: LD_INT 18
12748: EQUAL
12749: IFFALSE 12759
// sLack := true ;
12751: LD_ADDR_EXP 77
12755: PUSH
12756: LD_INT 1
12758: ST_TO_ADDR
// if p3 = 19 then
12759: LD_VAR 0 3
12763: PUSH
12764: LD_INT 19
12766: EQUAL
12767: IFFALSE 12777
// sTank := true ;
12769: LD_ADDR_EXP 79
12773: PUSH
12774: LD_INT 1
12776: ST_TO_ADDR
// if p3 = 20 then
12777: LD_VAR 0 3
12781: PUSH
12782: LD_INT 20
12784: EQUAL
12785: IFFALSE 12795
// sRemote := true ;
12787: LD_ADDR_EXP 80
12791: PUSH
12792: LD_INT 1
12794: ST_TO_ADDR
// if p3 = 21 then
12795: LD_VAR 0 3
12799: PUSH
12800: LD_INT 21
12802: EQUAL
12803: IFFALSE 12813
// sPowell := true ;
12805: LD_ADDR_EXP 81
12809: PUSH
12810: LD_INT 1
12812: ST_TO_ADDR
// if p3 = 22 then
12813: LD_VAR 0 3
12817: PUSH
12818: LD_INT 22
12820: EQUAL
12821: IFFALSE 12831
// sTeleport := true ;
12823: LD_ADDR_EXP 84
12827: PUSH
12828: LD_INT 1
12830: ST_TO_ADDR
// if p3 = 23 then
12831: LD_VAR 0 3
12835: PUSH
12836: LD_INT 23
12838: EQUAL
12839: IFFALSE 12849
// sOilTower := true ;
12841: LD_ADDR_EXP 86
12845: PUSH
12846: LD_INT 1
12848: ST_TO_ADDR
// if p3 = 24 then
12849: LD_VAR 0 3
12853: PUSH
12854: LD_INT 24
12856: EQUAL
12857: IFFALSE 12867
// sShovel := true ;
12859: LD_ADDR_EXP 87
12863: PUSH
12864: LD_INT 1
12866: ST_TO_ADDR
// if p3 = 25 then
12867: LD_VAR 0 3
12871: PUSH
12872: LD_INT 25
12874: EQUAL
12875: IFFALSE 12885
// sSheik := true ;
12877: LD_ADDR_EXP 88
12881: PUSH
12882: LD_INT 1
12884: ST_TO_ADDR
// if p3 = 26 then
12885: LD_VAR 0 3
12889: PUSH
12890: LD_INT 26
12892: EQUAL
12893: IFFALSE 12903
// sEarthquake := true ;
12895: LD_ADDR_EXP 90
12899: PUSH
12900: LD_INT 1
12902: ST_TO_ADDR
// if p3 = 27 then
12903: LD_VAR 0 3
12907: PUSH
12908: LD_INT 27
12910: EQUAL
12911: IFFALSE 12921
// sAI := true ;
12913: LD_ADDR_EXP 91
12917: PUSH
12918: LD_INT 1
12920: ST_TO_ADDR
// if p3 = 28 then
12921: LD_VAR 0 3
12925: PUSH
12926: LD_INT 28
12928: EQUAL
12929: IFFALSE 12939
// sCargo := true ;
12931: LD_ADDR_EXP 94
12935: PUSH
12936: LD_INT 1
12938: ST_TO_ADDR
// if p3 = 29 then
12939: LD_VAR 0 3
12943: PUSH
12944: LD_INT 29
12946: EQUAL
12947: IFFALSE 12957
// sDLaser := true ;
12949: LD_ADDR_EXP 95
12953: PUSH
12954: LD_INT 1
12956: ST_TO_ADDR
// if p3 = 30 then
12957: LD_VAR 0 3
12961: PUSH
12962: LD_INT 30
12964: EQUAL
12965: IFFALSE 12975
// sExchange := true ;
12967: LD_ADDR_EXP 96
12971: PUSH
12972: LD_INT 1
12974: ST_TO_ADDR
// if p3 = 31 then
12975: LD_VAR 0 3
12979: PUSH
12980: LD_INT 31
12982: EQUAL
12983: IFFALSE 12993
// sFac := true ;
12985: LD_ADDR_EXP 97
12989: PUSH
12990: LD_INT 1
12992: ST_TO_ADDR
// if p3 = 32 then
12993: LD_VAR 0 3
12997: PUSH
12998: LD_INT 32
13000: EQUAL
13001: IFFALSE 13011
// sPower := true ;
13003: LD_ADDR_EXP 98
13007: PUSH
13008: LD_INT 1
13010: ST_TO_ADDR
// if p3 = 33 then
13011: LD_VAR 0 3
13015: PUSH
13016: LD_INT 33
13018: EQUAL
13019: IFFALSE 13029
// sRandom := true ;
13021: LD_ADDR_EXP 99
13025: PUSH
13026: LD_INT 1
13028: ST_TO_ADDR
// if p3 = 34 then
13029: LD_VAR 0 3
13033: PUSH
13034: LD_INT 34
13036: EQUAL
13037: IFFALSE 13047
// sShield := true ;
13039: LD_ADDR_EXP 100
13043: PUSH
13044: LD_INT 1
13046: ST_TO_ADDR
// if p3 = 35 then
13047: LD_VAR 0 3
13051: PUSH
13052: LD_INT 35
13054: EQUAL
13055: IFFALSE 13065
// sTime := true ;
13057: LD_ADDR_EXP 101
13061: PUSH
13062: LD_INT 1
13064: ST_TO_ADDR
// if p3 = 36 then
13065: LD_VAR 0 3
13069: PUSH
13070: LD_INT 36
13072: EQUAL
13073: IFFALSE 13083
// sTools := true ;
13075: LD_ADDR_EXP 102
13079: PUSH
13080: LD_INT 1
13082: ST_TO_ADDR
// if p3 = 101 then
13083: LD_VAR 0 3
13087: PUSH
13088: LD_INT 101
13090: EQUAL
13091: IFFALSE 13101
// sSold := true ;
13093: LD_ADDR_EXP 67
13097: PUSH
13098: LD_INT 1
13100: ST_TO_ADDR
// if p3 = 102 then
13101: LD_VAR 0 3
13105: PUSH
13106: LD_INT 102
13108: EQUAL
13109: IFFALSE 13119
// sDiff := true ;
13111: LD_ADDR_EXP 68
13115: PUSH
13116: LD_INT 1
13118: ST_TO_ADDR
// if p3 = 103 then
13119: LD_VAR 0 3
13123: PUSH
13124: LD_INT 103
13126: EQUAL
13127: IFFALSE 13137
// sFog := true ;
13129: LD_ADDR_EXP 71
13133: PUSH
13134: LD_INT 1
13136: ST_TO_ADDR
// if p3 = 104 then
13137: LD_VAR 0 3
13141: PUSH
13142: LD_INT 104
13144: EQUAL
13145: IFFALSE 13155
// sReset := true ;
13147: LD_ADDR_EXP 72
13151: PUSH
13152: LD_INT 1
13154: ST_TO_ADDR
// if p3 = 105 then
13155: LD_VAR 0 3
13159: PUSH
13160: LD_INT 105
13162: EQUAL
13163: IFFALSE 13173
// sSun := true ;
13165: LD_ADDR_EXP 73
13169: PUSH
13170: LD_INT 1
13172: ST_TO_ADDR
// if p3 = 106 then
13173: LD_VAR 0 3
13177: PUSH
13178: LD_INT 106
13180: EQUAL
13181: IFFALSE 13191
// sTiger := true ;
13183: LD_ADDR_EXP 69
13187: PUSH
13188: LD_INT 1
13190: ST_TO_ADDR
// if p3 = 107 then
13191: LD_VAR 0 3
13195: PUSH
13196: LD_INT 107
13198: EQUAL
13199: IFFALSE 13209
// sBomb := true ;
13201: LD_ADDR_EXP 70
13205: PUSH
13206: LD_INT 1
13208: ST_TO_ADDR
// if p3 = 108 then
13209: LD_VAR 0 3
13213: PUSH
13214: LD_INT 108
13216: EQUAL
13217: IFFALSE 13227
// sWound := true ;
13219: LD_ADDR_EXP 78
13223: PUSH
13224: LD_INT 1
13226: ST_TO_ADDR
// if p3 = 109 then
13227: LD_VAR 0 3
13231: PUSH
13232: LD_INT 109
13234: EQUAL
13235: IFFALSE 13245
// sBetray := true ;
13237: LD_ADDR_EXP 82
13241: PUSH
13242: LD_INT 1
13244: ST_TO_ADDR
// if p3 = 110 then
13245: LD_VAR 0 3
13249: PUSH
13250: LD_INT 110
13252: EQUAL
13253: IFFALSE 13263
// sContamin := true ;
13255: LD_ADDR_EXP 83
13259: PUSH
13260: LD_INT 1
13262: ST_TO_ADDR
// if p3 = 111 then
13263: LD_VAR 0 3
13267: PUSH
13268: LD_INT 111
13270: EQUAL
13271: IFFALSE 13281
// sOil := true ;
13273: LD_ADDR_EXP 85
13277: PUSH
13278: LD_INT 1
13280: ST_TO_ADDR
// if p3 = 112 then
13281: LD_VAR 0 3
13285: PUSH
13286: LD_INT 112
13288: EQUAL
13289: IFFALSE 13299
// sStu := true ;
13291: LD_ADDR_EXP 89
13295: PUSH
13296: LD_INT 1
13298: ST_TO_ADDR
// if p3 = 113 then
13299: LD_VAR 0 3
13303: PUSH
13304: LD_INT 113
13306: EQUAL
13307: IFFALSE 13317
// sBazooka := true ;
13309: LD_ADDR_EXP 92
13313: PUSH
13314: LD_INT 1
13316: ST_TO_ADDR
// if p3 = 114 then
13317: LD_VAR 0 3
13321: PUSH
13322: LD_INT 114
13324: EQUAL
13325: IFFALSE 13335
// sMortar := true ;
13327: LD_ADDR_EXP 93
13331: PUSH
13332: LD_INT 1
13334: ST_TO_ADDR
// if p3 = 115 then
13335: LD_VAR 0 3
13339: PUSH
13340: LD_INT 115
13342: EQUAL
13343: IFFALSE 13353
// sRanger := true ;
13345: LD_ADDR_EXP 103
13349: PUSH
13350: LD_INT 1
13352: ST_TO_ADDR
// end ; if p2 = 101 then
13353: LD_VAR 0 2
13357: PUSH
13358: LD_INT 101
13360: EQUAL
13361: IFFALSE 13489
// begin case p3 of 1 :
13363: LD_VAR 0 3
13367: PUSH
13368: LD_INT 1
13370: DOUBLE
13371: EQUAL
13372: IFTRUE 13376
13374: GO 13383
13376: POP
// hHackUnlimitedResources ; 2 :
13377: CALL 24526 0 0
13381: GO 13489
13383: LD_INT 2
13385: DOUBLE
13386: EQUAL
13387: IFTRUE 13391
13389: GO 13398
13391: POP
// hHackSetLevel10 ; 3 :
13392: CALL 24659 0 0
13396: GO 13489
13398: LD_INT 3
13400: DOUBLE
13401: EQUAL
13402: IFTRUE 13406
13404: GO 13413
13406: POP
// hHackSetLevel10YourUnits ; 4 :
13407: CALL 24744 0 0
13411: GO 13489
13413: LD_INT 4
13415: DOUBLE
13416: EQUAL
13417: IFTRUE 13421
13419: GO 13428
13421: POP
// hHackInvincible ; 5 :
13422: CALL 25192 0 0
13426: GO 13489
13428: LD_INT 5
13430: DOUBLE
13431: EQUAL
13432: IFTRUE 13436
13434: GO 13443
13436: POP
// hHackInvisible ; 6 :
13437: CALL 25303 0 0
13441: GO 13489
13443: LD_INT 6
13445: DOUBLE
13446: EQUAL
13447: IFTRUE 13451
13449: GO 13458
13451: POP
// hHackChangeYourSide ; 7 :
13452: CALL 25360 0 0
13456: GO 13489
13458: LD_INT 7
13460: DOUBLE
13461: EQUAL
13462: IFTRUE 13466
13464: GO 13473
13466: POP
// hHackChangeUnitSide ; 8 :
13467: CALL 25402 0 0
13471: GO 13489
13473: LD_INT 8
13475: DOUBLE
13476: EQUAL
13477: IFTRUE 13481
13479: GO 13488
13481: POP
// hHackFog ; end ;
13482: CALL 25503 0 0
13486: GO 13489
13488: POP
// end ; end ;
13489: LD_VAR 0 7
13493: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
13494: GO 13496
13496: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
13497: LD_STRING initStreamRollete();
13499: PPUSH
13500: CALL_OW 559
// InitStreamMode ;
13504: CALL 13513 0 0
// DefineStreamItems ( ) ;
13508: CALL 13953 0 0
// end ;
13512: END
// function InitStreamMode ; begin
13513: LD_INT 0
13515: PPUSH
// streamModeActive := false ;
13516: LD_ADDR_EXP 50
13520: PUSH
13521: LD_INT 0
13523: ST_TO_ADDR
// normalCounter := 36 ;
13524: LD_ADDR_EXP 51
13528: PUSH
13529: LD_INT 36
13531: ST_TO_ADDR
// hardcoreCounter := 16 ;
13532: LD_ADDR_EXP 52
13536: PUSH
13537: LD_INT 16
13539: ST_TO_ADDR
// sRocket := false ;
13540: LD_ADDR_EXP 55
13544: PUSH
13545: LD_INT 0
13547: ST_TO_ADDR
// sSpeed := false ;
13548: LD_ADDR_EXP 54
13552: PUSH
13553: LD_INT 0
13555: ST_TO_ADDR
// sEngine := false ;
13556: LD_ADDR_EXP 56
13560: PUSH
13561: LD_INT 0
13563: ST_TO_ADDR
// sSpec := false ;
13564: LD_ADDR_EXP 53
13568: PUSH
13569: LD_INT 0
13571: ST_TO_ADDR
// sLevel := false ;
13572: LD_ADDR_EXP 57
13576: PUSH
13577: LD_INT 0
13579: ST_TO_ADDR
// sArmoury := false ;
13580: LD_ADDR_EXP 58
13584: PUSH
13585: LD_INT 0
13587: ST_TO_ADDR
// sRadar := false ;
13588: LD_ADDR_EXP 59
13592: PUSH
13593: LD_INT 0
13595: ST_TO_ADDR
// sBunker := false ;
13596: LD_ADDR_EXP 60
13600: PUSH
13601: LD_INT 0
13603: ST_TO_ADDR
// sHack := false ;
13604: LD_ADDR_EXP 61
13608: PUSH
13609: LD_INT 0
13611: ST_TO_ADDR
// sFire := false ;
13612: LD_ADDR_EXP 62
13616: PUSH
13617: LD_INT 0
13619: ST_TO_ADDR
// sRefresh := false ;
13620: LD_ADDR_EXP 63
13624: PUSH
13625: LD_INT 0
13627: ST_TO_ADDR
// sExp := false ;
13628: LD_ADDR_EXP 64
13632: PUSH
13633: LD_INT 0
13635: ST_TO_ADDR
// sDepot := false ;
13636: LD_ADDR_EXP 65
13640: PUSH
13641: LD_INT 0
13643: ST_TO_ADDR
// sFlag := false ;
13644: LD_ADDR_EXP 66
13648: PUSH
13649: LD_INT 0
13651: ST_TO_ADDR
// sKamikadze := false ;
13652: LD_ADDR_EXP 74
13656: PUSH
13657: LD_INT 0
13659: ST_TO_ADDR
// sTroll := false ;
13660: LD_ADDR_EXP 75
13664: PUSH
13665: LD_INT 0
13667: ST_TO_ADDR
// sSlow := false ;
13668: LD_ADDR_EXP 76
13672: PUSH
13673: LD_INT 0
13675: ST_TO_ADDR
// sLack := false ;
13676: LD_ADDR_EXP 77
13680: PUSH
13681: LD_INT 0
13683: ST_TO_ADDR
// sTank := false ;
13684: LD_ADDR_EXP 79
13688: PUSH
13689: LD_INT 0
13691: ST_TO_ADDR
// sRemote := false ;
13692: LD_ADDR_EXP 80
13696: PUSH
13697: LD_INT 0
13699: ST_TO_ADDR
// sPowell := false ;
13700: LD_ADDR_EXP 81
13704: PUSH
13705: LD_INT 0
13707: ST_TO_ADDR
// sTeleport := false ;
13708: LD_ADDR_EXP 84
13712: PUSH
13713: LD_INT 0
13715: ST_TO_ADDR
// sOilTower := false ;
13716: LD_ADDR_EXP 86
13720: PUSH
13721: LD_INT 0
13723: ST_TO_ADDR
// sShovel := false ;
13724: LD_ADDR_EXP 87
13728: PUSH
13729: LD_INT 0
13731: ST_TO_ADDR
// sSheik := false ;
13732: LD_ADDR_EXP 88
13736: PUSH
13737: LD_INT 0
13739: ST_TO_ADDR
// sEarthquake := false ;
13740: LD_ADDR_EXP 90
13744: PUSH
13745: LD_INT 0
13747: ST_TO_ADDR
// sAI := false ;
13748: LD_ADDR_EXP 91
13752: PUSH
13753: LD_INT 0
13755: ST_TO_ADDR
// sCargo := false ;
13756: LD_ADDR_EXP 94
13760: PUSH
13761: LD_INT 0
13763: ST_TO_ADDR
// sDLaser := false ;
13764: LD_ADDR_EXP 95
13768: PUSH
13769: LD_INT 0
13771: ST_TO_ADDR
// sExchange := false ;
13772: LD_ADDR_EXP 96
13776: PUSH
13777: LD_INT 0
13779: ST_TO_ADDR
// sFac := false ;
13780: LD_ADDR_EXP 97
13784: PUSH
13785: LD_INT 0
13787: ST_TO_ADDR
// sPower := false ;
13788: LD_ADDR_EXP 98
13792: PUSH
13793: LD_INT 0
13795: ST_TO_ADDR
// sRandom := false ;
13796: LD_ADDR_EXP 99
13800: PUSH
13801: LD_INT 0
13803: ST_TO_ADDR
// sShield := false ;
13804: LD_ADDR_EXP 100
13808: PUSH
13809: LD_INT 0
13811: ST_TO_ADDR
// sTime := false ;
13812: LD_ADDR_EXP 101
13816: PUSH
13817: LD_INT 0
13819: ST_TO_ADDR
// sTools := false ;
13820: LD_ADDR_EXP 102
13824: PUSH
13825: LD_INT 0
13827: ST_TO_ADDR
// sSold := false ;
13828: LD_ADDR_EXP 67
13832: PUSH
13833: LD_INT 0
13835: ST_TO_ADDR
// sDiff := false ;
13836: LD_ADDR_EXP 68
13840: PUSH
13841: LD_INT 0
13843: ST_TO_ADDR
// sFog := false ;
13844: LD_ADDR_EXP 71
13848: PUSH
13849: LD_INT 0
13851: ST_TO_ADDR
// sReset := false ;
13852: LD_ADDR_EXP 72
13856: PUSH
13857: LD_INT 0
13859: ST_TO_ADDR
// sSun := false ;
13860: LD_ADDR_EXP 73
13864: PUSH
13865: LD_INT 0
13867: ST_TO_ADDR
// sTiger := false ;
13868: LD_ADDR_EXP 69
13872: PUSH
13873: LD_INT 0
13875: ST_TO_ADDR
// sBomb := false ;
13876: LD_ADDR_EXP 70
13880: PUSH
13881: LD_INT 0
13883: ST_TO_ADDR
// sWound := false ;
13884: LD_ADDR_EXP 78
13888: PUSH
13889: LD_INT 0
13891: ST_TO_ADDR
// sBetray := false ;
13892: LD_ADDR_EXP 82
13896: PUSH
13897: LD_INT 0
13899: ST_TO_ADDR
// sContamin := false ;
13900: LD_ADDR_EXP 83
13904: PUSH
13905: LD_INT 0
13907: ST_TO_ADDR
// sOil := false ;
13908: LD_ADDR_EXP 85
13912: PUSH
13913: LD_INT 0
13915: ST_TO_ADDR
// sStu := false ;
13916: LD_ADDR_EXP 89
13920: PUSH
13921: LD_INT 0
13923: ST_TO_ADDR
// sBazooka := false ;
13924: LD_ADDR_EXP 92
13928: PUSH
13929: LD_INT 0
13931: ST_TO_ADDR
// sMortar := false ;
13932: LD_ADDR_EXP 93
13936: PUSH
13937: LD_INT 0
13939: ST_TO_ADDR
// sRanger := false ;
13940: LD_ADDR_EXP 103
13944: PUSH
13945: LD_INT 0
13947: ST_TO_ADDR
// end ;
13948: LD_VAR 0 1
13952: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
13953: LD_INT 0
13955: PPUSH
13956: PPUSH
13957: PPUSH
13958: PPUSH
13959: PPUSH
// result := [ ] ;
13960: LD_ADDR_VAR 0 1
13964: PUSH
13965: EMPTY
13966: ST_TO_ADDR
// if campaign_id = 1 then
13967: LD_OWVAR 69
13971: PUSH
13972: LD_INT 1
13974: EQUAL
13975: IFFALSE 16913
// begin case mission_number of 1 :
13977: LD_OWVAR 70
13981: PUSH
13982: LD_INT 1
13984: DOUBLE
13985: EQUAL
13986: IFTRUE 13990
13988: GO 14054
13990: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
13991: LD_ADDR_VAR 0 1
13995: PUSH
13996: LD_INT 2
13998: PUSH
13999: LD_INT 4
14001: PUSH
14002: LD_INT 11
14004: PUSH
14005: LD_INT 12
14007: PUSH
14008: LD_INT 15
14010: PUSH
14011: LD_INT 16
14013: PUSH
14014: LD_INT 22
14016: PUSH
14017: LD_INT 23
14019: PUSH
14020: LD_INT 26
14022: PUSH
14023: EMPTY
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: PUSH
14034: LD_INT 101
14036: PUSH
14037: LD_INT 102
14039: PUSH
14040: LD_INT 106
14042: PUSH
14043: EMPTY
14044: LIST
14045: LIST
14046: LIST
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: ST_TO_ADDR
14052: GO 16911
14054: LD_INT 2
14056: DOUBLE
14057: EQUAL
14058: IFTRUE 14062
14060: GO 14134
14062: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
14063: LD_ADDR_VAR 0 1
14067: PUSH
14068: LD_INT 2
14070: PUSH
14071: LD_INT 4
14073: PUSH
14074: LD_INT 11
14076: PUSH
14077: LD_INT 12
14079: PUSH
14080: LD_INT 15
14082: PUSH
14083: LD_INT 16
14085: PUSH
14086: LD_INT 22
14088: PUSH
14089: LD_INT 23
14091: PUSH
14092: LD_INT 26
14094: PUSH
14095: EMPTY
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: LIST
14103: LIST
14104: LIST
14105: PUSH
14106: LD_INT 101
14108: PUSH
14109: LD_INT 102
14111: PUSH
14112: LD_INT 105
14114: PUSH
14115: LD_INT 106
14117: PUSH
14118: LD_INT 108
14120: PUSH
14121: EMPTY
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: ST_TO_ADDR
14132: GO 16911
14134: LD_INT 3
14136: DOUBLE
14137: EQUAL
14138: IFTRUE 14142
14140: GO 14218
14142: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
14143: LD_ADDR_VAR 0 1
14147: PUSH
14148: LD_INT 2
14150: PUSH
14151: LD_INT 4
14153: PUSH
14154: LD_INT 5
14156: PUSH
14157: LD_INT 11
14159: PUSH
14160: LD_INT 12
14162: PUSH
14163: LD_INT 15
14165: PUSH
14166: LD_INT 16
14168: PUSH
14169: LD_INT 22
14171: PUSH
14172: LD_INT 26
14174: PUSH
14175: LD_INT 36
14177: PUSH
14178: EMPTY
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: PUSH
14190: LD_INT 101
14192: PUSH
14193: LD_INT 102
14195: PUSH
14196: LD_INT 105
14198: PUSH
14199: LD_INT 106
14201: PUSH
14202: LD_INT 108
14204: PUSH
14205: EMPTY
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: PUSH
14212: EMPTY
14213: LIST
14214: LIST
14215: ST_TO_ADDR
14216: GO 16911
14218: LD_INT 4
14220: DOUBLE
14221: EQUAL
14222: IFTRUE 14226
14224: GO 14310
14226: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
14227: LD_ADDR_VAR 0 1
14231: PUSH
14232: LD_INT 2
14234: PUSH
14235: LD_INT 4
14237: PUSH
14238: LD_INT 5
14240: PUSH
14241: LD_INT 8
14243: PUSH
14244: LD_INT 11
14246: PUSH
14247: LD_INT 12
14249: PUSH
14250: LD_INT 15
14252: PUSH
14253: LD_INT 16
14255: PUSH
14256: LD_INT 22
14258: PUSH
14259: LD_INT 23
14261: PUSH
14262: LD_INT 26
14264: PUSH
14265: LD_INT 36
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: PUSH
14282: LD_INT 101
14284: PUSH
14285: LD_INT 102
14287: PUSH
14288: LD_INT 105
14290: PUSH
14291: LD_INT 106
14293: PUSH
14294: LD_INT 108
14296: PUSH
14297: EMPTY
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: PUSH
14304: EMPTY
14305: LIST
14306: LIST
14307: ST_TO_ADDR
14308: GO 16911
14310: LD_INT 5
14312: DOUBLE
14313: EQUAL
14314: IFTRUE 14318
14316: GO 14418
14318: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
14319: LD_ADDR_VAR 0 1
14323: PUSH
14324: LD_INT 2
14326: PUSH
14327: LD_INT 4
14329: PUSH
14330: LD_INT 5
14332: PUSH
14333: LD_INT 6
14335: PUSH
14336: LD_INT 8
14338: PUSH
14339: LD_INT 11
14341: PUSH
14342: LD_INT 12
14344: PUSH
14345: LD_INT 15
14347: PUSH
14348: LD_INT 16
14350: PUSH
14351: LD_INT 22
14353: PUSH
14354: LD_INT 23
14356: PUSH
14357: LD_INT 25
14359: PUSH
14360: LD_INT 26
14362: PUSH
14363: LD_INT 36
14365: PUSH
14366: EMPTY
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: PUSH
14382: LD_INT 101
14384: PUSH
14385: LD_INT 102
14387: PUSH
14388: LD_INT 105
14390: PUSH
14391: LD_INT 106
14393: PUSH
14394: LD_INT 108
14396: PUSH
14397: LD_INT 109
14399: PUSH
14400: LD_INT 112
14402: PUSH
14403: EMPTY
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: ST_TO_ADDR
14416: GO 16911
14418: LD_INT 6
14420: DOUBLE
14421: EQUAL
14422: IFTRUE 14426
14424: GO 14546
14426: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
14427: LD_ADDR_VAR 0 1
14431: PUSH
14432: LD_INT 2
14434: PUSH
14435: LD_INT 4
14437: PUSH
14438: LD_INT 5
14440: PUSH
14441: LD_INT 6
14443: PUSH
14444: LD_INT 8
14446: PUSH
14447: LD_INT 11
14449: PUSH
14450: LD_INT 12
14452: PUSH
14453: LD_INT 15
14455: PUSH
14456: LD_INT 16
14458: PUSH
14459: LD_INT 20
14461: PUSH
14462: LD_INT 21
14464: PUSH
14465: LD_INT 22
14467: PUSH
14468: LD_INT 23
14470: PUSH
14471: LD_INT 25
14473: PUSH
14474: LD_INT 26
14476: PUSH
14477: LD_INT 30
14479: PUSH
14480: LD_INT 31
14482: PUSH
14483: LD_INT 32
14485: PUSH
14486: LD_INT 36
14488: PUSH
14489: EMPTY
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: LIST
14502: LIST
14503: LIST
14504: LIST
14505: LIST
14506: LIST
14507: LIST
14508: LIST
14509: PUSH
14510: LD_INT 101
14512: PUSH
14513: LD_INT 102
14515: PUSH
14516: LD_INT 105
14518: PUSH
14519: LD_INT 106
14521: PUSH
14522: LD_INT 108
14524: PUSH
14525: LD_INT 109
14527: PUSH
14528: LD_INT 112
14530: PUSH
14531: EMPTY
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: LIST
14538: LIST
14539: PUSH
14540: EMPTY
14541: LIST
14542: LIST
14543: ST_TO_ADDR
14544: GO 16911
14546: LD_INT 7
14548: DOUBLE
14549: EQUAL
14550: IFTRUE 14554
14552: GO 14654
14554: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
14555: LD_ADDR_VAR 0 1
14559: PUSH
14560: LD_INT 2
14562: PUSH
14563: LD_INT 4
14565: PUSH
14566: LD_INT 5
14568: PUSH
14569: LD_INT 7
14571: PUSH
14572: LD_INT 11
14574: PUSH
14575: LD_INT 12
14577: PUSH
14578: LD_INT 15
14580: PUSH
14581: LD_INT 16
14583: PUSH
14584: LD_INT 20
14586: PUSH
14587: LD_INT 21
14589: PUSH
14590: LD_INT 22
14592: PUSH
14593: LD_INT 23
14595: PUSH
14596: LD_INT 25
14598: PUSH
14599: LD_INT 26
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: PUSH
14618: LD_INT 101
14620: PUSH
14621: LD_INT 102
14623: PUSH
14624: LD_INT 103
14626: PUSH
14627: LD_INT 105
14629: PUSH
14630: LD_INT 106
14632: PUSH
14633: LD_INT 108
14635: PUSH
14636: LD_INT 112
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: PUSH
14648: EMPTY
14649: LIST
14650: LIST
14651: ST_TO_ADDR
14652: GO 16911
14654: LD_INT 8
14656: DOUBLE
14657: EQUAL
14658: IFTRUE 14662
14660: GO 14790
14662: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
14663: LD_ADDR_VAR 0 1
14667: PUSH
14668: LD_INT 2
14670: PUSH
14671: LD_INT 4
14673: PUSH
14674: LD_INT 5
14676: PUSH
14677: LD_INT 6
14679: PUSH
14680: LD_INT 7
14682: PUSH
14683: LD_INT 8
14685: PUSH
14686: LD_INT 11
14688: PUSH
14689: LD_INT 12
14691: PUSH
14692: LD_INT 15
14694: PUSH
14695: LD_INT 16
14697: PUSH
14698: LD_INT 20
14700: PUSH
14701: LD_INT 21
14703: PUSH
14704: LD_INT 22
14706: PUSH
14707: LD_INT 23
14709: PUSH
14710: LD_INT 25
14712: PUSH
14713: LD_INT 26
14715: PUSH
14716: LD_INT 30
14718: PUSH
14719: LD_INT 31
14721: PUSH
14722: LD_INT 32
14724: PUSH
14725: LD_INT 36
14727: PUSH
14728: EMPTY
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: PUSH
14750: LD_INT 101
14752: PUSH
14753: LD_INT 102
14755: PUSH
14756: LD_INT 103
14758: PUSH
14759: LD_INT 105
14761: PUSH
14762: LD_INT 106
14764: PUSH
14765: LD_INT 108
14767: PUSH
14768: LD_INT 109
14770: PUSH
14771: LD_INT 112
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: ST_TO_ADDR
14788: GO 16911
14790: LD_INT 9
14792: DOUBLE
14793: EQUAL
14794: IFTRUE 14798
14796: GO 14934
14798: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
14799: LD_ADDR_VAR 0 1
14803: PUSH
14804: LD_INT 2
14806: PUSH
14807: LD_INT 4
14809: PUSH
14810: LD_INT 5
14812: PUSH
14813: LD_INT 6
14815: PUSH
14816: LD_INT 7
14818: PUSH
14819: LD_INT 8
14821: PUSH
14822: LD_INT 11
14824: PUSH
14825: LD_INT 12
14827: PUSH
14828: LD_INT 15
14830: PUSH
14831: LD_INT 16
14833: PUSH
14834: LD_INT 20
14836: PUSH
14837: LD_INT 21
14839: PUSH
14840: LD_INT 22
14842: PUSH
14843: LD_INT 23
14845: PUSH
14846: LD_INT 25
14848: PUSH
14849: LD_INT 26
14851: PUSH
14852: LD_INT 28
14854: PUSH
14855: LD_INT 30
14857: PUSH
14858: LD_INT 31
14860: PUSH
14861: LD_INT 32
14863: PUSH
14864: LD_INT 36
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: LIST
14871: LIST
14872: LIST
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: PUSH
14890: LD_INT 101
14892: PUSH
14893: LD_INT 102
14895: PUSH
14896: LD_INT 103
14898: PUSH
14899: LD_INT 105
14901: PUSH
14902: LD_INT 106
14904: PUSH
14905: LD_INT 108
14907: PUSH
14908: LD_INT 109
14910: PUSH
14911: LD_INT 112
14913: PUSH
14914: LD_INT 114
14916: PUSH
14917: EMPTY
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: PUSH
14928: EMPTY
14929: LIST
14930: LIST
14931: ST_TO_ADDR
14932: GO 16911
14934: LD_INT 10
14936: DOUBLE
14937: EQUAL
14938: IFTRUE 14942
14940: GO 15126
14942: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
14943: LD_ADDR_VAR 0 1
14947: PUSH
14948: LD_INT 2
14950: PUSH
14951: LD_INT 4
14953: PUSH
14954: LD_INT 5
14956: PUSH
14957: LD_INT 6
14959: PUSH
14960: LD_INT 7
14962: PUSH
14963: LD_INT 8
14965: PUSH
14966: LD_INT 9
14968: PUSH
14969: LD_INT 10
14971: PUSH
14972: LD_INT 11
14974: PUSH
14975: LD_INT 12
14977: PUSH
14978: LD_INT 13
14980: PUSH
14981: LD_INT 14
14983: PUSH
14984: LD_INT 15
14986: PUSH
14987: LD_INT 16
14989: PUSH
14990: LD_INT 17
14992: PUSH
14993: LD_INT 18
14995: PUSH
14996: LD_INT 19
14998: PUSH
14999: LD_INT 20
15001: PUSH
15002: LD_INT 21
15004: PUSH
15005: LD_INT 22
15007: PUSH
15008: LD_INT 23
15010: PUSH
15011: LD_INT 24
15013: PUSH
15014: LD_INT 25
15016: PUSH
15017: LD_INT 26
15019: PUSH
15020: LD_INT 28
15022: PUSH
15023: LD_INT 30
15025: PUSH
15026: LD_INT 31
15028: PUSH
15029: LD_INT 32
15031: PUSH
15032: LD_INT 36
15034: PUSH
15035: EMPTY
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: LIST
15054: LIST
15055: LIST
15056: LIST
15057: LIST
15058: LIST
15059: LIST
15060: LIST
15061: LIST
15062: LIST
15063: LIST
15064: LIST
15065: PUSH
15066: LD_INT 101
15068: PUSH
15069: LD_INT 102
15071: PUSH
15072: LD_INT 103
15074: PUSH
15075: LD_INT 104
15077: PUSH
15078: LD_INT 105
15080: PUSH
15081: LD_INT 106
15083: PUSH
15084: LD_INT 107
15086: PUSH
15087: LD_INT 108
15089: PUSH
15090: LD_INT 109
15092: PUSH
15093: LD_INT 110
15095: PUSH
15096: LD_INT 111
15098: PUSH
15099: LD_INT 112
15101: PUSH
15102: LD_INT 114
15104: PUSH
15105: EMPTY
15106: LIST
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: PUSH
15120: EMPTY
15121: LIST
15122: LIST
15123: ST_TO_ADDR
15124: GO 16911
15126: LD_INT 11
15128: DOUBLE
15129: EQUAL
15130: IFTRUE 15134
15132: GO 15326
15134: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
15135: LD_ADDR_VAR 0 1
15139: PUSH
15140: LD_INT 2
15142: PUSH
15143: LD_INT 3
15145: PUSH
15146: LD_INT 4
15148: PUSH
15149: LD_INT 5
15151: PUSH
15152: LD_INT 6
15154: PUSH
15155: LD_INT 7
15157: PUSH
15158: LD_INT 8
15160: PUSH
15161: LD_INT 9
15163: PUSH
15164: LD_INT 10
15166: PUSH
15167: LD_INT 11
15169: PUSH
15170: LD_INT 12
15172: PUSH
15173: LD_INT 13
15175: PUSH
15176: LD_INT 14
15178: PUSH
15179: LD_INT 15
15181: PUSH
15182: LD_INT 16
15184: PUSH
15185: LD_INT 17
15187: PUSH
15188: LD_INT 18
15190: PUSH
15191: LD_INT 19
15193: PUSH
15194: LD_INT 20
15196: PUSH
15197: LD_INT 21
15199: PUSH
15200: LD_INT 22
15202: PUSH
15203: LD_INT 23
15205: PUSH
15206: LD_INT 24
15208: PUSH
15209: LD_INT 25
15211: PUSH
15212: LD_INT 26
15214: PUSH
15215: LD_INT 28
15217: PUSH
15218: LD_INT 30
15220: PUSH
15221: LD_INT 31
15223: PUSH
15224: LD_INT 32
15226: PUSH
15227: LD_INT 34
15229: PUSH
15230: LD_INT 36
15232: PUSH
15233: EMPTY
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: LIST
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: LIST
15263: LIST
15264: LIST
15265: PUSH
15266: LD_INT 101
15268: PUSH
15269: LD_INT 102
15271: PUSH
15272: LD_INT 103
15274: PUSH
15275: LD_INT 104
15277: PUSH
15278: LD_INT 105
15280: PUSH
15281: LD_INT 106
15283: PUSH
15284: LD_INT 107
15286: PUSH
15287: LD_INT 108
15289: PUSH
15290: LD_INT 109
15292: PUSH
15293: LD_INT 110
15295: PUSH
15296: LD_INT 111
15298: PUSH
15299: LD_INT 112
15301: PUSH
15302: LD_INT 114
15304: PUSH
15305: EMPTY
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: LIST
15311: LIST
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: PUSH
15320: EMPTY
15321: LIST
15322: LIST
15323: ST_TO_ADDR
15324: GO 16911
15326: LD_INT 12
15328: DOUBLE
15329: EQUAL
15330: IFTRUE 15334
15332: GO 15542
15334: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
15335: LD_ADDR_VAR 0 1
15339: PUSH
15340: LD_INT 1
15342: PUSH
15343: LD_INT 2
15345: PUSH
15346: LD_INT 3
15348: PUSH
15349: LD_INT 4
15351: PUSH
15352: LD_INT 5
15354: PUSH
15355: LD_INT 6
15357: PUSH
15358: LD_INT 7
15360: PUSH
15361: LD_INT 8
15363: PUSH
15364: LD_INT 9
15366: PUSH
15367: LD_INT 10
15369: PUSH
15370: LD_INT 11
15372: PUSH
15373: LD_INT 12
15375: PUSH
15376: LD_INT 13
15378: PUSH
15379: LD_INT 14
15381: PUSH
15382: LD_INT 15
15384: PUSH
15385: LD_INT 16
15387: PUSH
15388: LD_INT 17
15390: PUSH
15391: LD_INT 18
15393: PUSH
15394: LD_INT 19
15396: PUSH
15397: LD_INT 20
15399: PUSH
15400: LD_INT 21
15402: PUSH
15403: LD_INT 22
15405: PUSH
15406: LD_INT 23
15408: PUSH
15409: LD_INT 24
15411: PUSH
15412: LD_INT 25
15414: PUSH
15415: LD_INT 26
15417: PUSH
15418: LD_INT 27
15420: PUSH
15421: LD_INT 28
15423: PUSH
15424: LD_INT 30
15426: PUSH
15427: LD_INT 31
15429: PUSH
15430: LD_INT 32
15432: PUSH
15433: LD_INT 33
15435: PUSH
15436: LD_INT 34
15438: PUSH
15439: LD_INT 36
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: LIST
15476: LIST
15477: PUSH
15478: LD_INT 101
15480: PUSH
15481: LD_INT 102
15483: PUSH
15484: LD_INT 103
15486: PUSH
15487: LD_INT 104
15489: PUSH
15490: LD_INT 105
15492: PUSH
15493: LD_INT 106
15495: PUSH
15496: LD_INT 107
15498: PUSH
15499: LD_INT 108
15501: PUSH
15502: LD_INT 109
15504: PUSH
15505: LD_INT 110
15507: PUSH
15508: LD_INT 111
15510: PUSH
15511: LD_INT 112
15513: PUSH
15514: LD_INT 113
15516: PUSH
15517: LD_INT 114
15519: PUSH
15520: EMPTY
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: PUSH
15536: EMPTY
15537: LIST
15538: LIST
15539: ST_TO_ADDR
15540: GO 16911
15542: LD_INT 13
15544: DOUBLE
15545: EQUAL
15546: IFTRUE 15550
15548: GO 15746
15550: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
15551: LD_ADDR_VAR 0 1
15555: PUSH
15556: LD_INT 1
15558: PUSH
15559: LD_INT 2
15561: PUSH
15562: LD_INT 3
15564: PUSH
15565: LD_INT 4
15567: PUSH
15568: LD_INT 5
15570: PUSH
15571: LD_INT 8
15573: PUSH
15574: LD_INT 9
15576: PUSH
15577: LD_INT 10
15579: PUSH
15580: LD_INT 11
15582: PUSH
15583: LD_INT 12
15585: PUSH
15586: LD_INT 14
15588: PUSH
15589: LD_INT 15
15591: PUSH
15592: LD_INT 16
15594: PUSH
15595: LD_INT 17
15597: PUSH
15598: LD_INT 18
15600: PUSH
15601: LD_INT 19
15603: PUSH
15604: LD_INT 20
15606: PUSH
15607: LD_INT 21
15609: PUSH
15610: LD_INT 22
15612: PUSH
15613: LD_INT 23
15615: PUSH
15616: LD_INT 24
15618: PUSH
15619: LD_INT 25
15621: PUSH
15622: LD_INT 26
15624: PUSH
15625: LD_INT 27
15627: PUSH
15628: LD_INT 28
15630: PUSH
15631: LD_INT 30
15633: PUSH
15634: LD_INT 31
15636: PUSH
15637: LD_INT 32
15639: PUSH
15640: LD_INT 33
15642: PUSH
15643: LD_INT 34
15645: PUSH
15646: LD_INT 36
15648: PUSH
15649: EMPTY
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: PUSH
15682: LD_INT 101
15684: PUSH
15685: LD_INT 102
15687: PUSH
15688: LD_INT 103
15690: PUSH
15691: LD_INT 104
15693: PUSH
15694: LD_INT 105
15696: PUSH
15697: LD_INT 106
15699: PUSH
15700: LD_INT 107
15702: PUSH
15703: LD_INT 108
15705: PUSH
15706: LD_INT 109
15708: PUSH
15709: LD_INT 110
15711: PUSH
15712: LD_INT 111
15714: PUSH
15715: LD_INT 112
15717: PUSH
15718: LD_INT 113
15720: PUSH
15721: LD_INT 114
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: ST_TO_ADDR
15744: GO 16911
15746: LD_INT 14
15748: DOUBLE
15749: EQUAL
15750: IFTRUE 15754
15752: GO 15966
15754: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
15755: LD_ADDR_VAR 0 1
15759: PUSH
15760: LD_INT 1
15762: PUSH
15763: LD_INT 2
15765: PUSH
15766: LD_INT 3
15768: PUSH
15769: LD_INT 4
15771: PUSH
15772: LD_INT 5
15774: PUSH
15775: LD_INT 6
15777: PUSH
15778: LD_INT 7
15780: PUSH
15781: LD_INT 8
15783: PUSH
15784: LD_INT 9
15786: PUSH
15787: LD_INT 10
15789: PUSH
15790: LD_INT 11
15792: PUSH
15793: LD_INT 12
15795: PUSH
15796: LD_INT 13
15798: PUSH
15799: LD_INT 14
15801: PUSH
15802: LD_INT 15
15804: PUSH
15805: LD_INT 16
15807: PUSH
15808: LD_INT 17
15810: PUSH
15811: LD_INT 18
15813: PUSH
15814: LD_INT 19
15816: PUSH
15817: LD_INT 20
15819: PUSH
15820: LD_INT 21
15822: PUSH
15823: LD_INT 22
15825: PUSH
15826: LD_INT 23
15828: PUSH
15829: LD_INT 24
15831: PUSH
15832: LD_INT 25
15834: PUSH
15835: LD_INT 26
15837: PUSH
15838: LD_INT 27
15840: PUSH
15841: LD_INT 28
15843: PUSH
15844: LD_INT 29
15846: PUSH
15847: LD_INT 30
15849: PUSH
15850: LD_INT 31
15852: PUSH
15853: LD_INT 32
15855: PUSH
15856: LD_INT 33
15858: PUSH
15859: LD_INT 34
15861: PUSH
15862: LD_INT 36
15864: PUSH
15865: EMPTY
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: LIST
15888: LIST
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: LIST
15896: LIST
15897: LIST
15898: LIST
15899: LIST
15900: LIST
15901: PUSH
15902: LD_INT 101
15904: PUSH
15905: LD_INT 102
15907: PUSH
15908: LD_INT 103
15910: PUSH
15911: LD_INT 104
15913: PUSH
15914: LD_INT 105
15916: PUSH
15917: LD_INT 106
15919: PUSH
15920: LD_INT 107
15922: PUSH
15923: LD_INT 108
15925: PUSH
15926: LD_INT 109
15928: PUSH
15929: LD_INT 110
15931: PUSH
15932: LD_INT 111
15934: PUSH
15935: LD_INT 112
15937: PUSH
15938: LD_INT 113
15940: PUSH
15941: LD_INT 114
15943: PUSH
15944: EMPTY
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: ST_TO_ADDR
15964: GO 16911
15966: LD_INT 15
15968: DOUBLE
15969: EQUAL
15970: IFTRUE 15974
15972: GO 16186
15974: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
15975: LD_ADDR_VAR 0 1
15979: PUSH
15980: LD_INT 1
15982: PUSH
15983: LD_INT 2
15985: PUSH
15986: LD_INT 3
15988: PUSH
15989: LD_INT 4
15991: PUSH
15992: LD_INT 5
15994: PUSH
15995: LD_INT 6
15997: PUSH
15998: LD_INT 7
16000: PUSH
16001: LD_INT 8
16003: PUSH
16004: LD_INT 9
16006: PUSH
16007: LD_INT 10
16009: PUSH
16010: LD_INT 11
16012: PUSH
16013: LD_INT 12
16015: PUSH
16016: LD_INT 13
16018: PUSH
16019: LD_INT 14
16021: PUSH
16022: LD_INT 15
16024: PUSH
16025: LD_INT 16
16027: PUSH
16028: LD_INT 17
16030: PUSH
16031: LD_INT 18
16033: PUSH
16034: LD_INT 19
16036: PUSH
16037: LD_INT 20
16039: PUSH
16040: LD_INT 21
16042: PUSH
16043: LD_INT 22
16045: PUSH
16046: LD_INT 23
16048: PUSH
16049: LD_INT 24
16051: PUSH
16052: LD_INT 25
16054: PUSH
16055: LD_INT 26
16057: PUSH
16058: LD_INT 27
16060: PUSH
16061: LD_INT 28
16063: PUSH
16064: LD_INT 29
16066: PUSH
16067: LD_INT 30
16069: PUSH
16070: LD_INT 31
16072: PUSH
16073: LD_INT 32
16075: PUSH
16076: LD_INT 33
16078: PUSH
16079: LD_INT 34
16081: PUSH
16082: LD_INT 36
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: PUSH
16122: LD_INT 101
16124: PUSH
16125: LD_INT 102
16127: PUSH
16128: LD_INT 103
16130: PUSH
16131: LD_INT 104
16133: PUSH
16134: LD_INT 105
16136: PUSH
16137: LD_INT 106
16139: PUSH
16140: LD_INT 107
16142: PUSH
16143: LD_INT 108
16145: PUSH
16146: LD_INT 109
16148: PUSH
16149: LD_INT 110
16151: PUSH
16152: LD_INT 111
16154: PUSH
16155: LD_INT 112
16157: PUSH
16158: LD_INT 113
16160: PUSH
16161: LD_INT 114
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: PUSH
16180: EMPTY
16181: LIST
16182: LIST
16183: ST_TO_ADDR
16184: GO 16911
16186: LD_INT 16
16188: DOUBLE
16189: EQUAL
16190: IFTRUE 16194
16192: GO 16318
16194: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
16195: LD_ADDR_VAR 0 1
16199: PUSH
16200: LD_INT 2
16202: PUSH
16203: LD_INT 4
16205: PUSH
16206: LD_INT 5
16208: PUSH
16209: LD_INT 7
16211: PUSH
16212: LD_INT 11
16214: PUSH
16215: LD_INT 12
16217: PUSH
16218: LD_INT 15
16220: PUSH
16221: LD_INT 16
16223: PUSH
16224: LD_INT 20
16226: PUSH
16227: LD_INT 21
16229: PUSH
16230: LD_INT 22
16232: PUSH
16233: LD_INT 23
16235: PUSH
16236: LD_INT 25
16238: PUSH
16239: LD_INT 26
16241: PUSH
16242: LD_INT 30
16244: PUSH
16245: LD_INT 31
16247: PUSH
16248: LD_INT 32
16250: PUSH
16251: LD_INT 33
16253: PUSH
16254: LD_INT 34
16256: PUSH
16257: EMPTY
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: LIST
16268: LIST
16269: LIST
16270: LIST
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: LIST
16276: LIST
16277: PUSH
16278: LD_INT 101
16280: PUSH
16281: LD_INT 102
16283: PUSH
16284: LD_INT 103
16286: PUSH
16287: LD_INT 106
16289: PUSH
16290: LD_INT 108
16292: PUSH
16293: LD_INT 112
16295: PUSH
16296: LD_INT 113
16298: PUSH
16299: LD_INT 114
16301: PUSH
16302: EMPTY
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: PUSH
16312: EMPTY
16313: LIST
16314: LIST
16315: ST_TO_ADDR
16316: GO 16911
16318: LD_INT 17
16320: DOUBLE
16321: EQUAL
16322: IFTRUE 16326
16324: GO 16538
16326: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
16327: LD_ADDR_VAR 0 1
16331: PUSH
16332: LD_INT 1
16334: PUSH
16335: LD_INT 2
16337: PUSH
16338: LD_INT 3
16340: PUSH
16341: LD_INT 4
16343: PUSH
16344: LD_INT 5
16346: PUSH
16347: LD_INT 6
16349: PUSH
16350: LD_INT 7
16352: PUSH
16353: LD_INT 8
16355: PUSH
16356: LD_INT 9
16358: PUSH
16359: LD_INT 10
16361: PUSH
16362: LD_INT 11
16364: PUSH
16365: LD_INT 12
16367: PUSH
16368: LD_INT 13
16370: PUSH
16371: LD_INT 14
16373: PUSH
16374: LD_INT 15
16376: PUSH
16377: LD_INT 16
16379: PUSH
16380: LD_INT 17
16382: PUSH
16383: LD_INT 18
16385: PUSH
16386: LD_INT 19
16388: PUSH
16389: LD_INT 20
16391: PUSH
16392: LD_INT 21
16394: PUSH
16395: LD_INT 22
16397: PUSH
16398: LD_INT 23
16400: PUSH
16401: LD_INT 24
16403: PUSH
16404: LD_INT 25
16406: PUSH
16407: LD_INT 26
16409: PUSH
16410: LD_INT 27
16412: PUSH
16413: LD_INT 28
16415: PUSH
16416: LD_INT 29
16418: PUSH
16419: LD_INT 30
16421: PUSH
16422: LD_INT 31
16424: PUSH
16425: LD_INT 32
16427: PUSH
16428: LD_INT 33
16430: PUSH
16431: LD_INT 34
16433: PUSH
16434: LD_INT 36
16436: PUSH
16437: EMPTY
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: LIST
16465: LIST
16466: LIST
16467: LIST
16468: LIST
16469: LIST
16470: LIST
16471: LIST
16472: LIST
16473: PUSH
16474: LD_INT 101
16476: PUSH
16477: LD_INT 102
16479: PUSH
16480: LD_INT 103
16482: PUSH
16483: LD_INT 104
16485: PUSH
16486: LD_INT 105
16488: PUSH
16489: LD_INT 106
16491: PUSH
16492: LD_INT 107
16494: PUSH
16495: LD_INT 108
16497: PUSH
16498: LD_INT 109
16500: PUSH
16501: LD_INT 110
16503: PUSH
16504: LD_INT 111
16506: PUSH
16507: LD_INT 112
16509: PUSH
16510: LD_INT 113
16512: PUSH
16513: LD_INT 114
16515: PUSH
16516: EMPTY
16517: LIST
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: LIST
16531: PUSH
16532: EMPTY
16533: LIST
16534: LIST
16535: ST_TO_ADDR
16536: GO 16911
16538: LD_INT 18
16540: DOUBLE
16541: EQUAL
16542: IFTRUE 16546
16544: GO 16682
16546: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
16547: LD_ADDR_VAR 0 1
16551: PUSH
16552: LD_INT 2
16554: PUSH
16555: LD_INT 4
16557: PUSH
16558: LD_INT 5
16560: PUSH
16561: LD_INT 7
16563: PUSH
16564: LD_INT 11
16566: PUSH
16567: LD_INT 12
16569: PUSH
16570: LD_INT 15
16572: PUSH
16573: LD_INT 16
16575: PUSH
16576: LD_INT 20
16578: PUSH
16579: LD_INT 21
16581: PUSH
16582: LD_INT 22
16584: PUSH
16585: LD_INT 23
16587: PUSH
16588: LD_INT 25
16590: PUSH
16591: LD_INT 26
16593: PUSH
16594: LD_INT 30
16596: PUSH
16597: LD_INT 31
16599: PUSH
16600: LD_INT 32
16602: PUSH
16603: LD_INT 33
16605: PUSH
16606: LD_INT 34
16608: PUSH
16609: LD_INT 35
16611: PUSH
16612: LD_INT 36
16614: PUSH
16615: EMPTY
16616: LIST
16617: LIST
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: LIST
16623: LIST
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: LIST
16632: LIST
16633: LIST
16634: LIST
16635: LIST
16636: LIST
16637: PUSH
16638: LD_INT 101
16640: PUSH
16641: LD_INT 102
16643: PUSH
16644: LD_INT 103
16646: PUSH
16647: LD_INT 106
16649: PUSH
16650: LD_INT 108
16652: PUSH
16653: LD_INT 112
16655: PUSH
16656: LD_INT 113
16658: PUSH
16659: LD_INT 114
16661: PUSH
16662: LD_INT 115
16664: PUSH
16665: EMPTY
16666: LIST
16667: LIST
16668: LIST
16669: LIST
16670: LIST
16671: LIST
16672: LIST
16673: LIST
16674: LIST
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: ST_TO_ADDR
16680: GO 16911
16682: LD_INT 19
16684: DOUBLE
16685: EQUAL
16686: IFTRUE 16690
16688: GO 16910
16690: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
16691: LD_ADDR_VAR 0 1
16695: PUSH
16696: LD_INT 1
16698: PUSH
16699: LD_INT 2
16701: PUSH
16702: LD_INT 3
16704: PUSH
16705: LD_INT 4
16707: PUSH
16708: LD_INT 5
16710: PUSH
16711: LD_INT 6
16713: PUSH
16714: LD_INT 7
16716: PUSH
16717: LD_INT 8
16719: PUSH
16720: LD_INT 9
16722: PUSH
16723: LD_INT 10
16725: PUSH
16726: LD_INT 11
16728: PUSH
16729: LD_INT 12
16731: PUSH
16732: LD_INT 13
16734: PUSH
16735: LD_INT 14
16737: PUSH
16738: LD_INT 15
16740: PUSH
16741: LD_INT 16
16743: PUSH
16744: LD_INT 17
16746: PUSH
16747: LD_INT 18
16749: PUSH
16750: LD_INT 19
16752: PUSH
16753: LD_INT 20
16755: PUSH
16756: LD_INT 21
16758: PUSH
16759: LD_INT 22
16761: PUSH
16762: LD_INT 23
16764: PUSH
16765: LD_INT 24
16767: PUSH
16768: LD_INT 25
16770: PUSH
16771: LD_INT 26
16773: PUSH
16774: LD_INT 27
16776: PUSH
16777: LD_INT 28
16779: PUSH
16780: LD_INT 29
16782: PUSH
16783: LD_INT 30
16785: PUSH
16786: LD_INT 31
16788: PUSH
16789: LD_INT 32
16791: PUSH
16792: LD_INT 33
16794: PUSH
16795: LD_INT 34
16797: PUSH
16798: LD_INT 35
16800: PUSH
16801: LD_INT 36
16803: PUSH
16804: EMPTY
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: LIST
16836: LIST
16837: LIST
16838: LIST
16839: LIST
16840: LIST
16841: PUSH
16842: LD_INT 101
16844: PUSH
16845: LD_INT 102
16847: PUSH
16848: LD_INT 103
16850: PUSH
16851: LD_INT 104
16853: PUSH
16854: LD_INT 105
16856: PUSH
16857: LD_INT 106
16859: PUSH
16860: LD_INT 107
16862: PUSH
16863: LD_INT 108
16865: PUSH
16866: LD_INT 109
16868: PUSH
16869: LD_INT 110
16871: PUSH
16872: LD_INT 111
16874: PUSH
16875: LD_INT 112
16877: PUSH
16878: LD_INT 113
16880: PUSH
16881: LD_INT 114
16883: PUSH
16884: LD_INT 115
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: LIST
16891: LIST
16892: LIST
16893: LIST
16894: LIST
16895: LIST
16896: LIST
16897: LIST
16898: LIST
16899: LIST
16900: LIST
16901: LIST
16902: LIST
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: ST_TO_ADDR
16908: GO 16911
16910: POP
// end else
16911: GO 17130
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
16913: LD_ADDR_VAR 0 1
16917: PUSH
16918: LD_INT 1
16920: PUSH
16921: LD_INT 2
16923: PUSH
16924: LD_INT 3
16926: PUSH
16927: LD_INT 4
16929: PUSH
16930: LD_INT 5
16932: PUSH
16933: LD_INT 6
16935: PUSH
16936: LD_INT 7
16938: PUSH
16939: LD_INT 8
16941: PUSH
16942: LD_INT 9
16944: PUSH
16945: LD_INT 10
16947: PUSH
16948: LD_INT 11
16950: PUSH
16951: LD_INT 12
16953: PUSH
16954: LD_INT 13
16956: PUSH
16957: LD_INT 14
16959: PUSH
16960: LD_INT 15
16962: PUSH
16963: LD_INT 16
16965: PUSH
16966: LD_INT 17
16968: PUSH
16969: LD_INT 18
16971: PUSH
16972: LD_INT 19
16974: PUSH
16975: LD_INT 20
16977: PUSH
16978: LD_INT 21
16980: PUSH
16981: LD_INT 22
16983: PUSH
16984: LD_INT 23
16986: PUSH
16987: LD_INT 24
16989: PUSH
16990: LD_INT 25
16992: PUSH
16993: LD_INT 26
16995: PUSH
16996: LD_INT 27
16998: PUSH
16999: LD_INT 28
17001: PUSH
17002: LD_INT 29
17004: PUSH
17005: LD_INT 30
17007: PUSH
17008: LD_INT 31
17010: PUSH
17011: LD_INT 32
17013: PUSH
17014: LD_INT 33
17016: PUSH
17017: LD_INT 34
17019: PUSH
17020: LD_INT 35
17022: PUSH
17023: LD_INT 36
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: PUSH
17064: LD_INT 101
17066: PUSH
17067: LD_INT 102
17069: PUSH
17070: LD_INT 103
17072: PUSH
17073: LD_INT 104
17075: PUSH
17076: LD_INT 105
17078: PUSH
17079: LD_INT 106
17081: PUSH
17082: LD_INT 107
17084: PUSH
17085: LD_INT 108
17087: PUSH
17088: LD_INT 109
17090: PUSH
17091: LD_INT 110
17093: PUSH
17094: LD_INT 111
17096: PUSH
17097: LD_INT 112
17099: PUSH
17100: LD_INT 113
17102: PUSH
17103: LD_INT 114
17105: PUSH
17106: LD_INT 115
17108: PUSH
17109: EMPTY
17110: LIST
17111: LIST
17112: LIST
17113: LIST
17114: LIST
17115: LIST
17116: LIST
17117: LIST
17118: LIST
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: ST_TO_ADDR
// if result then
17130: LD_VAR 0 1
17134: IFFALSE 17423
// begin normal :=  ;
17136: LD_ADDR_VAR 0 3
17140: PUSH
17141: LD_STRING 
17143: ST_TO_ADDR
// hardcore :=  ;
17144: LD_ADDR_VAR 0 4
17148: PUSH
17149: LD_STRING 
17151: ST_TO_ADDR
// for i = 1 to normalCounter do
17152: LD_ADDR_VAR 0 5
17156: PUSH
17157: DOUBLE
17158: LD_INT 1
17160: DEC
17161: ST_TO_ADDR
17162: LD_EXP 51
17166: PUSH
17167: FOR_TO
17168: IFFALSE 17269
// begin tmp := 0 ;
17170: LD_ADDR_VAR 0 2
17174: PUSH
17175: LD_STRING 0
17177: ST_TO_ADDR
// if result [ 1 ] then
17178: LD_VAR 0 1
17182: PUSH
17183: LD_INT 1
17185: ARRAY
17186: IFFALSE 17251
// if result [ 1 ] [ 1 ] = i then
17188: LD_VAR 0 1
17192: PUSH
17193: LD_INT 1
17195: ARRAY
17196: PUSH
17197: LD_INT 1
17199: ARRAY
17200: PUSH
17201: LD_VAR 0 5
17205: EQUAL
17206: IFFALSE 17251
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
17208: LD_ADDR_VAR 0 1
17212: PUSH
17213: LD_VAR 0 1
17217: PPUSH
17218: LD_INT 1
17220: PPUSH
17221: LD_VAR 0 1
17225: PUSH
17226: LD_INT 1
17228: ARRAY
17229: PPUSH
17230: LD_INT 1
17232: PPUSH
17233: CALL_OW 3
17237: PPUSH
17238: CALL_OW 1
17242: ST_TO_ADDR
// tmp := 1 ;
17243: LD_ADDR_VAR 0 2
17247: PUSH
17248: LD_STRING 1
17250: ST_TO_ADDR
// end ; normal := normal & tmp ;
17251: LD_ADDR_VAR 0 3
17255: PUSH
17256: LD_VAR 0 3
17260: PUSH
17261: LD_VAR 0 2
17265: STR
17266: ST_TO_ADDR
// end ;
17267: GO 17167
17269: POP
17270: POP
// for i = 1 to hardcoreCounter do
17271: LD_ADDR_VAR 0 5
17275: PUSH
17276: DOUBLE
17277: LD_INT 1
17279: DEC
17280: ST_TO_ADDR
17281: LD_EXP 52
17285: PUSH
17286: FOR_TO
17287: IFFALSE 17392
// begin tmp := 0 ;
17289: LD_ADDR_VAR 0 2
17293: PUSH
17294: LD_STRING 0
17296: ST_TO_ADDR
// if result [ 2 ] then
17297: LD_VAR 0 1
17301: PUSH
17302: LD_INT 2
17304: ARRAY
17305: IFFALSE 17374
// if result [ 2 ] [ 1 ] = 100 + i then
17307: LD_VAR 0 1
17311: PUSH
17312: LD_INT 2
17314: ARRAY
17315: PUSH
17316: LD_INT 1
17318: ARRAY
17319: PUSH
17320: LD_INT 100
17322: PUSH
17323: LD_VAR 0 5
17327: PLUS
17328: EQUAL
17329: IFFALSE 17374
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17331: LD_ADDR_VAR 0 1
17335: PUSH
17336: LD_VAR 0 1
17340: PPUSH
17341: LD_INT 2
17343: PPUSH
17344: LD_VAR 0 1
17348: PUSH
17349: LD_INT 2
17351: ARRAY
17352: PPUSH
17353: LD_INT 1
17355: PPUSH
17356: CALL_OW 3
17360: PPUSH
17361: CALL_OW 1
17365: ST_TO_ADDR
// tmp := 1 ;
17366: LD_ADDR_VAR 0 2
17370: PUSH
17371: LD_STRING 1
17373: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17374: LD_ADDR_VAR 0 4
17378: PUSH
17379: LD_VAR 0 4
17383: PUSH
17384: LD_VAR 0 2
17388: STR
17389: ST_TO_ADDR
// end ;
17390: GO 17286
17392: POP
17393: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
17394: LD_STRING getStreamItemsFromMission("
17396: PUSH
17397: LD_VAR 0 3
17401: STR
17402: PUSH
17403: LD_STRING ","
17405: STR
17406: PUSH
17407: LD_VAR 0 4
17411: STR
17412: PUSH
17413: LD_STRING ")
17415: STR
17416: PPUSH
17417: CALL_OW 559
// end else
17421: GO 17430
// ToLua ( getStreamItemsFromMission("","") ) ;
17423: LD_STRING getStreamItemsFromMission("","")
17425: PPUSH
17426: CALL_OW 559
// end ;
17430: LD_VAR 0 1
17434: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17435: LD_EXP 50
17439: PUSH
17440: LD_EXP 55
17444: AND
17445: IFFALSE 17569
17447: GO 17449
17449: DISABLE
17450: LD_INT 0
17452: PPUSH
17453: PPUSH
// begin enable ;
17454: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17455: LD_ADDR_VAR 0 2
17459: PUSH
17460: LD_INT 22
17462: PUSH
17463: LD_OWVAR 2
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: PUSH
17472: LD_INT 2
17474: PUSH
17475: LD_INT 34
17477: PUSH
17478: LD_INT 7
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: PUSH
17485: LD_INT 34
17487: PUSH
17488: LD_INT 45
17490: PUSH
17491: EMPTY
17492: LIST
17493: LIST
17494: PUSH
17495: LD_INT 34
17497: PUSH
17498: LD_INT 28
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: PUSH
17505: LD_INT 34
17507: PUSH
17508: LD_INT 47
17510: PUSH
17511: EMPTY
17512: LIST
17513: LIST
17514: PUSH
17515: EMPTY
17516: LIST
17517: LIST
17518: LIST
17519: LIST
17520: LIST
17521: PUSH
17522: EMPTY
17523: LIST
17524: LIST
17525: PPUSH
17526: CALL_OW 69
17530: ST_TO_ADDR
// if not tmp then
17531: LD_VAR 0 2
17535: NOT
17536: IFFALSE 17540
// exit ;
17538: GO 17569
// for i in tmp do
17540: LD_ADDR_VAR 0 1
17544: PUSH
17545: LD_VAR 0 2
17549: PUSH
17550: FOR_IN
17551: IFFALSE 17567
// begin SetLives ( i , 0 ) ;
17553: LD_VAR 0 1
17557: PPUSH
17558: LD_INT 0
17560: PPUSH
17561: CALL_OW 234
// end ;
17565: GO 17550
17567: POP
17568: POP
// end ;
17569: PPOPN 2
17571: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17572: LD_EXP 50
17576: PUSH
17577: LD_EXP 56
17581: AND
17582: IFFALSE 17666
17584: GO 17586
17586: DISABLE
17587: LD_INT 0
17589: PPUSH
17590: PPUSH
// begin enable ;
17591: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17592: LD_ADDR_VAR 0 2
17596: PUSH
17597: LD_INT 22
17599: PUSH
17600: LD_OWVAR 2
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: PUSH
17609: LD_INT 32
17611: PUSH
17612: LD_INT 3
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: PUSH
17619: EMPTY
17620: LIST
17621: LIST
17622: PPUSH
17623: CALL_OW 69
17627: ST_TO_ADDR
// if not tmp then
17628: LD_VAR 0 2
17632: NOT
17633: IFFALSE 17637
// exit ;
17635: GO 17666
// for i in tmp do
17637: LD_ADDR_VAR 0 1
17641: PUSH
17642: LD_VAR 0 2
17646: PUSH
17647: FOR_IN
17648: IFFALSE 17664
// begin SetLives ( i , 0 ) ;
17650: LD_VAR 0 1
17654: PPUSH
17655: LD_INT 0
17657: PPUSH
17658: CALL_OW 234
// end ;
17662: GO 17647
17664: POP
17665: POP
// end ;
17666: PPOPN 2
17668: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17669: LD_EXP 50
17673: PUSH
17674: LD_EXP 53
17678: AND
17679: IFFALSE 17772
17681: GO 17683
17683: DISABLE
17684: LD_INT 0
17686: PPUSH
// begin enable ;
17687: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17688: LD_ADDR_VAR 0 1
17692: PUSH
17693: LD_INT 22
17695: PUSH
17696: LD_OWVAR 2
17700: PUSH
17701: EMPTY
17702: LIST
17703: LIST
17704: PUSH
17705: LD_INT 2
17707: PUSH
17708: LD_INT 25
17710: PUSH
17711: LD_INT 5
17713: PUSH
17714: EMPTY
17715: LIST
17716: LIST
17717: PUSH
17718: LD_INT 25
17720: PUSH
17721: LD_INT 9
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PUSH
17728: LD_INT 25
17730: PUSH
17731: LD_INT 8
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: PUSH
17744: EMPTY
17745: LIST
17746: LIST
17747: PPUSH
17748: CALL_OW 69
17752: PUSH
17753: FOR_IN
17754: IFFALSE 17770
// begin SetClass ( i , 1 ) ;
17756: LD_VAR 0 1
17760: PPUSH
17761: LD_INT 1
17763: PPUSH
17764: CALL_OW 336
// end ;
17768: GO 17753
17770: POP
17771: POP
// end ;
17772: PPOPN 1
17774: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17775: LD_EXP 50
17779: PUSH
17780: LD_EXP 54
17784: AND
17785: PUSH
17786: LD_OWVAR 65
17790: PUSH
17791: LD_INT 7
17793: LESS
17794: AND
17795: IFFALSE 17809
17797: GO 17799
17799: DISABLE
// begin enable ;
17800: ENABLE
// game_speed := 7 ;
17801: LD_ADDR_OWVAR 65
17805: PUSH
17806: LD_INT 7
17808: ST_TO_ADDR
// end ;
17809: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17810: LD_EXP 50
17814: PUSH
17815: LD_EXP 57
17819: AND
17820: IFFALSE 18022
17822: GO 17824
17824: DISABLE
17825: LD_INT 0
17827: PPUSH
17828: PPUSH
17829: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17830: LD_ADDR_VAR 0 3
17834: PUSH
17835: LD_INT 81
17837: PUSH
17838: LD_OWVAR 2
17842: PUSH
17843: EMPTY
17844: LIST
17845: LIST
17846: PUSH
17847: LD_INT 21
17849: PUSH
17850: LD_INT 1
17852: PUSH
17853: EMPTY
17854: LIST
17855: LIST
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PPUSH
17861: CALL_OW 69
17865: ST_TO_ADDR
// if not tmp then
17866: LD_VAR 0 3
17870: NOT
17871: IFFALSE 17875
// exit ;
17873: GO 18022
// if tmp > 5 then
17875: LD_VAR 0 3
17879: PUSH
17880: LD_INT 5
17882: GREATER
17883: IFFALSE 17895
// k := 5 else
17885: LD_ADDR_VAR 0 2
17889: PUSH
17890: LD_INT 5
17892: ST_TO_ADDR
17893: GO 17905
// k := tmp ;
17895: LD_ADDR_VAR 0 2
17899: PUSH
17900: LD_VAR 0 3
17904: ST_TO_ADDR
// for i := 1 to k do
17905: LD_ADDR_VAR 0 1
17909: PUSH
17910: DOUBLE
17911: LD_INT 1
17913: DEC
17914: ST_TO_ADDR
17915: LD_VAR 0 2
17919: PUSH
17920: FOR_TO
17921: IFFALSE 18020
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17923: LD_VAR 0 3
17927: PUSH
17928: LD_VAR 0 1
17932: ARRAY
17933: PPUSH
17934: LD_VAR 0 1
17938: PUSH
17939: LD_INT 4
17941: MOD
17942: PUSH
17943: LD_INT 1
17945: PLUS
17946: PPUSH
17947: CALL_OW 259
17951: PUSH
17952: LD_INT 10
17954: LESS
17955: IFFALSE 18018
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17957: LD_VAR 0 3
17961: PUSH
17962: LD_VAR 0 1
17966: ARRAY
17967: PPUSH
17968: LD_VAR 0 1
17972: PUSH
17973: LD_INT 4
17975: MOD
17976: PUSH
17977: LD_INT 1
17979: PLUS
17980: PPUSH
17981: LD_VAR 0 3
17985: PUSH
17986: LD_VAR 0 1
17990: ARRAY
17991: PPUSH
17992: LD_VAR 0 1
17996: PUSH
17997: LD_INT 4
17999: MOD
18000: PUSH
18001: LD_INT 1
18003: PLUS
18004: PPUSH
18005: CALL_OW 259
18009: PUSH
18010: LD_INT 1
18012: PLUS
18013: PPUSH
18014: CALL_OW 237
18018: GO 17920
18020: POP
18021: POP
// end ;
18022: PPOPN 3
18024: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18025: LD_EXP 50
18029: PUSH
18030: LD_EXP 58
18034: AND
18035: IFFALSE 18055
18037: GO 18039
18039: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18040: LD_INT 4
18042: PPUSH
18043: LD_OWVAR 2
18047: PPUSH
18048: LD_INT 0
18050: PPUSH
18051: CALL_OW 324
18055: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18056: LD_EXP 50
18060: PUSH
18061: LD_EXP 87
18065: AND
18066: IFFALSE 18086
18068: GO 18070
18070: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18071: LD_INT 19
18073: PPUSH
18074: LD_OWVAR 2
18078: PPUSH
18079: LD_INT 0
18081: PPUSH
18082: CALL_OW 324
18086: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18087: LD_EXP 50
18091: PUSH
18092: LD_EXP 59
18096: AND
18097: IFFALSE 18199
18099: GO 18101
18101: DISABLE
18102: LD_INT 0
18104: PPUSH
18105: PPUSH
// begin enable ;
18106: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18107: LD_ADDR_VAR 0 2
18111: PUSH
18112: LD_INT 22
18114: PUSH
18115: LD_OWVAR 2
18119: PUSH
18120: EMPTY
18121: LIST
18122: LIST
18123: PUSH
18124: LD_INT 2
18126: PUSH
18127: LD_INT 34
18129: PUSH
18130: LD_INT 11
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PUSH
18137: LD_INT 34
18139: PUSH
18140: LD_INT 30
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: PUSH
18147: EMPTY
18148: LIST
18149: LIST
18150: LIST
18151: PUSH
18152: EMPTY
18153: LIST
18154: LIST
18155: PPUSH
18156: CALL_OW 69
18160: ST_TO_ADDR
// if not tmp then
18161: LD_VAR 0 2
18165: NOT
18166: IFFALSE 18170
// exit ;
18168: GO 18199
// for i in tmp do
18170: LD_ADDR_VAR 0 1
18174: PUSH
18175: LD_VAR 0 2
18179: PUSH
18180: FOR_IN
18181: IFFALSE 18197
// begin SetLives ( i , 0 ) ;
18183: LD_VAR 0 1
18187: PPUSH
18188: LD_INT 0
18190: PPUSH
18191: CALL_OW 234
// end ;
18195: GO 18180
18197: POP
18198: POP
// end ;
18199: PPOPN 2
18201: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18202: LD_EXP 50
18206: PUSH
18207: LD_EXP 60
18211: AND
18212: IFFALSE 18232
18214: GO 18216
18216: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18217: LD_INT 32
18219: PPUSH
18220: LD_OWVAR 2
18224: PPUSH
18225: LD_INT 0
18227: PPUSH
18228: CALL_OW 324
18232: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18233: LD_EXP 50
18237: PUSH
18238: LD_EXP 61
18242: AND
18243: IFFALSE 18424
18245: GO 18247
18247: DISABLE
18248: LD_INT 0
18250: PPUSH
18251: PPUSH
18252: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18253: LD_ADDR_VAR 0 2
18257: PUSH
18258: LD_INT 22
18260: PUSH
18261: LD_OWVAR 2
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: PUSH
18270: LD_INT 33
18272: PUSH
18273: LD_INT 3
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: PPUSH
18284: CALL_OW 69
18288: ST_TO_ADDR
// if not tmp then
18289: LD_VAR 0 2
18293: NOT
18294: IFFALSE 18298
// exit ;
18296: GO 18424
// side := 0 ;
18298: LD_ADDR_VAR 0 3
18302: PUSH
18303: LD_INT 0
18305: ST_TO_ADDR
// for i := 1 to 8 do
18306: LD_ADDR_VAR 0 1
18310: PUSH
18311: DOUBLE
18312: LD_INT 1
18314: DEC
18315: ST_TO_ADDR
18316: LD_INT 8
18318: PUSH
18319: FOR_TO
18320: IFFALSE 18368
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18322: LD_OWVAR 2
18326: PUSH
18327: LD_VAR 0 1
18331: NONEQUAL
18332: PUSH
18333: LD_OWVAR 2
18337: PPUSH
18338: LD_VAR 0 1
18342: PPUSH
18343: CALL_OW 81
18347: PUSH
18348: LD_INT 2
18350: EQUAL
18351: AND
18352: IFFALSE 18366
// begin side := i ;
18354: LD_ADDR_VAR 0 3
18358: PUSH
18359: LD_VAR 0 1
18363: ST_TO_ADDR
// break ;
18364: GO 18368
// end ;
18366: GO 18319
18368: POP
18369: POP
// if not side then
18370: LD_VAR 0 3
18374: NOT
18375: IFFALSE 18379
// exit ;
18377: GO 18424
// for i := 1 to tmp do
18379: LD_ADDR_VAR 0 1
18383: PUSH
18384: DOUBLE
18385: LD_INT 1
18387: DEC
18388: ST_TO_ADDR
18389: LD_VAR 0 2
18393: PUSH
18394: FOR_TO
18395: IFFALSE 18422
// if Prob ( 60 ) then
18397: LD_INT 60
18399: PPUSH
18400: CALL_OW 13
18404: IFFALSE 18420
// SetSide ( i , side ) ;
18406: LD_VAR 0 1
18410: PPUSH
18411: LD_VAR 0 3
18415: PPUSH
18416: CALL_OW 235
18420: GO 18394
18422: POP
18423: POP
// end ;
18424: PPOPN 3
18426: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18427: LD_EXP 50
18431: PUSH
18432: LD_EXP 63
18436: AND
18437: IFFALSE 18556
18439: GO 18441
18441: DISABLE
18442: LD_INT 0
18444: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18445: LD_ADDR_VAR 0 1
18449: PUSH
18450: LD_INT 22
18452: PUSH
18453: LD_OWVAR 2
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: PUSH
18462: LD_INT 21
18464: PUSH
18465: LD_INT 1
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: PUSH
18472: LD_INT 3
18474: PUSH
18475: LD_INT 23
18477: PUSH
18478: LD_INT 0
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: PUSH
18485: EMPTY
18486: LIST
18487: LIST
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: LIST
18493: PPUSH
18494: CALL_OW 69
18498: PUSH
18499: FOR_IN
18500: IFFALSE 18554
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18502: LD_VAR 0 1
18506: PPUSH
18507: CALL_OW 257
18511: PUSH
18512: LD_INT 1
18514: PUSH
18515: LD_INT 2
18517: PUSH
18518: LD_INT 3
18520: PUSH
18521: LD_INT 4
18523: PUSH
18524: EMPTY
18525: LIST
18526: LIST
18527: LIST
18528: LIST
18529: IN
18530: IFFALSE 18552
// SetClass ( un , rand ( 1 , 4 ) ) ;
18532: LD_VAR 0 1
18536: PPUSH
18537: LD_INT 1
18539: PPUSH
18540: LD_INT 4
18542: PPUSH
18543: CALL_OW 12
18547: PPUSH
18548: CALL_OW 336
18552: GO 18499
18554: POP
18555: POP
// end ;
18556: PPOPN 1
18558: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18559: LD_EXP 50
18563: PUSH
18564: LD_EXP 62
18568: AND
18569: IFFALSE 18648
18571: GO 18573
18573: DISABLE
18574: LD_INT 0
18576: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18577: LD_ADDR_VAR 0 1
18581: PUSH
18582: LD_INT 22
18584: PUSH
18585: LD_OWVAR 2
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: PUSH
18594: LD_INT 21
18596: PUSH
18597: LD_INT 3
18599: PUSH
18600: EMPTY
18601: LIST
18602: LIST
18603: PUSH
18604: EMPTY
18605: LIST
18606: LIST
18607: PPUSH
18608: CALL_OW 69
18612: ST_TO_ADDR
// if not tmp then
18613: LD_VAR 0 1
18617: NOT
18618: IFFALSE 18622
// exit ;
18620: GO 18648
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18622: LD_VAR 0 1
18626: PUSH
18627: LD_INT 1
18629: PPUSH
18630: LD_VAR 0 1
18634: PPUSH
18635: CALL_OW 12
18639: ARRAY
18640: PPUSH
18641: LD_INT 100
18643: PPUSH
18644: CALL_OW 234
// end ;
18648: PPOPN 1
18650: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18651: LD_EXP 50
18655: PUSH
18656: LD_EXP 64
18660: AND
18661: IFFALSE 18759
18663: GO 18665
18665: DISABLE
18666: LD_INT 0
18668: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18669: LD_ADDR_VAR 0 1
18673: PUSH
18674: LD_INT 22
18676: PUSH
18677: LD_OWVAR 2
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: PUSH
18686: LD_INT 21
18688: PUSH
18689: LD_INT 1
18691: PUSH
18692: EMPTY
18693: LIST
18694: LIST
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PPUSH
18700: CALL_OW 69
18704: ST_TO_ADDR
// if not tmp then
18705: LD_VAR 0 1
18709: NOT
18710: IFFALSE 18714
// exit ;
18712: GO 18759
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18714: LD_VAR 0 1
18718: PUSH
18719: LD_INT 1
18721: PPUSH
18722: LD_VAR 0 1
18726: PPUSH
18727: CALL_OW 12
18731: ARRAY
18732: PPUSH
18733: LD_INT 1
18735: PPUSH
18736: LD_INT 4
18738: PPUSH
18739: CALL_OW 12
18743: PPUSH
18744: LD_INT 3000
18746: PPUSH
18747: LD_INT 9000
18749: PPUSH
18750: CALL_OW 12
18754: PPUSH
18755: CALL_OW 492
// end ;
18759: PPOPN 1
18761: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18762: LD_EXP 50
18766: PUSH
18767: LD_EXP 65
18771: AND
18772: IFFALSE 18792
18774: GO 18776
18776: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18777: LD_INT 1
18779: PPUSH
18780: LD_OWVAR 2
18784: PPUSH
18785: LD_INT 0
18787: PPUSH
18788: CALL_OW 324
18792: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18793: LD_EXP 50
18797: PUSH
18798: LD_EXP 66
18802: AND
18803: IFFALSE 18886
18805: GO 18807
18807: DISABLE
18808: LD_INT 0
18810: PPUSH
18811: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18812: LD_ADDR_VAR 0 2
18816: PUSH
18817: LD_INT 22
18819: PUSH
18820: LD_OWVAR 2
18824: PUSH
18825: EMPTY
18826: LIST
18827: LIST
18828: PUSH
18829: LD_INT 21
18831: PUSH
18832: LD_INT 3
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: PUSH
18839: EMPTY
18840: LIST
18841: LIST
18842: PPUSH
18843: CALL_OW 69
18847: ST_TO_ADDR
// if not tmp then
18848: LD_VAR 0 2
18852: NOT
18853: IFFALSE 18857
// exit ;
18855: GO 18886
// for i in tmp do
18857: LD_ADDR_VAR 0 1
18861: PUSH
18862: LD_VAR 0 2
18866: PUSH
18867: FOR_IN
18868: IFFALSE 18884
// SetBLevel ( i , 10 ) ;
18870: LD_VAR 0 1
18874: PPUSH
18875: LD_INT 10
18877: PPUSH
18878: CALL_OW 241
18882: GO 18867
18884: POP
18885: POP
// end ;
18886: PPOPN 2
18888: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18889: LD_EXP 50
18893: PUSH
18894: LD_EXP 67
18898: AND
18899: IFFALSE 19010
18901: GO 18903
18903: DISABLE
18904: LD_INT 0
18906: PPUSH
18907: PPUSH
18908: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18909: LD_ADDR_VAR 0 3
18913: PUSH
18914: LD_INT 22
18916: PUSH
18917: LD_OWVAR 2
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: PUSH
18926: LD_INT 25
18928: PUSH
18929: LD_INT 1
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: PUSH
18936: EMPTY
18937: LIST
18938: LIST
18939: PPUSH
18940: CALL_OW 69
18944: ST_TO_ADDR
// if not tmp then
18945: LD_VAR 0 3
18949: NOT
18950: IFFALSE 18954
// exit ;
18952: GO 19010
// un := tmp [ rand ( 1 , tmp ) ] ;
18954: LD_ADDR_VAR 0 2
18958: PUSH
18959: LD_VAR 0 3
18963: PUSH
18964: LD_INT 1
18966: PPUSH
18967: LD_VAR 0 3
18971: PPUSH
18972: CALL_OW 12
18976: ARRAY
18977: ST_TO_ADDR
// if Crawls ( un ) then
18978: LD_VAR 0 2
18982: PPUSH
18983: CALL_OW 318
18987: IFFALSE 18998
// ComWalk ( un ) ;
18989: LD_VAR 0 2
18993: PPUSH
18994: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18998: LD_VAR 0 2
19002: PPUSH
19003: LD_INT 5
19005: PPUSH
19006: CALL_OW 336
// end ;
19010: PPOPN 3
19012: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
19013: LD_EXP 50
19017: PUSH
19018: LD_EXP 68
19022: AND
19023: PUSH
19024: LD_OWVAR 67
19028: PUSH
19029: LD_INT 3
19031: LESS
19032: AND
19033: IFFALSE 19052
19035: GO 19037
19037: DISABLE
// Difficulty := Difficulty + 1 ;
19038: LD_ADDR_OWVAR 67
19042: PUSH
19043: LD_OWVAR 67
19047: PUSH
19048: LD_INT 1
19050: PLUS
19051: ST_TO_ADDR
19052: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19053: LD_EXP 50
19057: PUSH
19058: LD_EXP 69
19062: AND
19063: IFFALSE 19166
19065: GO 19067
19067: DISABLE
19068: LD_INT 0
19070: PPUSH
// begin for i := 1 to 5 do
19071: LD_ADDR_VAR 0 1
19075: PUSH
19076: DOUBLE
19077: LD_INT 1
19079: DEC
19080: ST_TO_ADDR
19081: LD_INT 5
19083: PUSH
19084: FOR_TO
19085: IFFALSE 19164
// begin uc_nation := nation_nature ;
19087: LD_ADDR_OWVAR 21
19091: PUSH
19092: LD_INT 0
19094: ST_TO_ADDR
// uc_side := 0 ;
19095: LD_ADDR_OWVAR 20
19099: PUSH
19100: LD_INT 0
19102: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19103: LD_ADDR_OWVAR 29
19107: PUSH
19108: LD_INT 12
19110: PUSH
19111: LD_INT 12
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: ST_TO_ADDR
// hc_agressivity := 20 ;
19118: LD_ADDR_OWVAR 35
19122: PUSH
19123: LD_INT 20
19125: ST_TO_ADDR
// hc_class := class_tiger ;
19126: LD_ADDR_OWVAR 28
19130: PUSH
19131: LD_INT 14
19133: ST_TO_ADDR
// hc_gallery :=  ;
19134: LD_ADDR_OWVAR 33
19138: PUSH
19139: LD_STRING 
19141: ST_TO_ADDR
// hc_name :=  ;
19142: LD_ADDR_OWVAR 26
19146: PUSH
19147: LD_STRING 
19149: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19150: CALL_OW 44
19154: PPUSH
19155: LD_INT 0
19157: PPUSH
19158: CALL_OW 51
// end ;
19162: GO 19084
19164: POP
19165: POP
// end ;
19166: PPOPN 1
19168: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19169: LD_EXP 50
19173: PUSH
19174: LD_EXP 70
19178: AND
19179: IFFALSE 19188
19181: GO 19183
19183: DISABLE
// StreamSibBomb ;
19184: CALL 19189 0 0
19188: END
// export function StreamSibBomb ; var i , x , y ; begin
19189: LD_INT 0
19191: PPUSH
19192: PPUSH
19193: PPUSH
19194: PPUSH
// result := false ;
19195: LD_ADDR_VAR 0 1
19199: PUSH
19200: LD_INT 0
19202: ST_TO_ADDR
// for i := 1 to 16 do
19203: LD_ADDR_VAR 0 2
19207: PUSH
19208: DOUBLE
19209: LD_INT 1
19211: DEC
19212: ST_TO_ADDR
19213: LD_INT 16
19215: PUSH
19216: FOR_TO
19217: IFFALSE 19416
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19219: LD_ADDR_VAR 0 3
19223: PUSH
19224: LD_INT 10
19226: PUSH
19227: LD_INT 20
19229: PUSH
19230: LD_INT 30
19232: PUSH
19233: LD_INT 40
19235: PUSH
19236: LD_INT 50
19238: PUSH
19239: LD_INT 60
19241: PUSH
19242: LD_INT 70
19244: PUSH
19245: LD_INT 80
19247: PUSH
19248: LD_INT 90
19250: PUSH
19251: LD_INT 100
19253: PUSH
19254: LD_INT 110
19256: PUSH
19257: LD_INT 120
19259: PUSH
19260: LD_INT 130
19262: PUSH
19263: LD_INT 140
19265: PUSH
19266: LD_INT 150
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: PUSH
19286: LD_INT 1
19288: PPUSH
19289: LD_INT 15
19291: PPUSH
19292: CALL_OW 12
19296: ARRAY
19297: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19298: LD_ADDR_VAR 0 4
19302: PUSH
19303: LD_INT 10
19305: PUSH
19306: LD_INT 20
19308: PUSH
19309: LD_INT 30
19311: PUSH
19312: LD_INT 40
19314: PUSH
19315: LD_INT 50
19317: PUSH
19318: LD_INT 60
19320: PUSH
19321: LD_INT 70
19323: PUSH
19324: LD_INT 80
19326: PUSH
19327: LD_INT 90
19329: PUSH
19330: LD_INT 100
19332: PUSH
19333: LD_INT 110
19335: PUSH
19336: LD_INT 120
19338: PUSH
19339: LD_INT 130
19341: PUSH
19342: LD_INT 140
19344: PUSH
19345: LD_INT 150
19347: PUSH
19348: EMPTY
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: LIST
19362: LIST
19363: LIST
19364: PUSH
19365: LD_INT 1
19367: PPUSH
19368: LD_INT 15
19370: PPUSH
19371: CALL_OW 12
19375: ARRAY
19376: ST_TO_ADDR
// if ValidHex ( x , y ) then
19377: LD_VAR 0 3
19381: PPUSH
19382: LD_VAR 0 4
19386: PPUSH
19387: CALL_OW 488
19391: IFFALSE 19414
// begin result := [ x , y ] ;
19393: LD_ADDR_VAR 0 1
19397: PUSH
19398: LD_VAR 0 3
19402: PUSH
19403: LD_VAR 0 4
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: ST_TO_ADDR
// break ;
19412: GO 19416
// end ; end ;
19414: GO 19216
19416: POP
19417: POP
// if result then
19418: LD_VAR 0 1
19422: IFFALSE 19482
// begin ToLua ( playSibBomb() ) ;
19424: LD_STRING playSibBomb()
19426: PPUSH
19427: CALL_OW 559
// wait ( 0 0$14 ) ;
19431: LD_INT 490
19433: PPUSH
19434: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19438: LD_VAR 0 1
19442: PUSH
19443: LD_INT 1
19445: ARRAY
19446: PPUSH
19447: LD_VAR 0 1
19451: PUSH
19452: LD_INT 2
19454: ARRAY
19455: PPUSH
19456: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19460: LD_VAR 0 1
19464: PUSH
19465: LD_INT 1
19467: ARRAY
19468: PPUSH
19469: LD_VAR 0 1
19473: PUSH
19474: LD_INT 2
19476: ARRAY
19477: PPUSH
19478: CALL_OW 429
// end ; end ;
19482: LD_VAR 0 1
19486: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19487: LD_EXP 50
19491: PUSH
19492: LD_EXP 72
19496: AND
19497: IFFALSE 19509
19499: GO 19501
19501: DISABLE
// YouLost (  ) ;
19502: LD_STRING 
19504: PPUSH
19505: CALL_OW 104
19509: END
// every 0 0$1 trigger StreamModeActive and sFog do
19510: LD_EXP 50
19514: PUSH
19515: LD_EXP 71
19519: AND
19520: IFFALSE 19534
19522: GO 19524
19524: DISABLE
// FogOff ( your_side ) ;
19525: LD_OWVAR 2
19529: PPUSH
19530: CALL_OW 344
19534: END
// every 0 0$1 trigger StreamModeActive and sSun do
19535: LD_EXP 50
19539: PUSH
19540: LD_EXP 73
19544: AND
19545: IFFALSE 19573
19547: GO 19549
19549: DISABLE
// begin solar_recharge_percent := 0 ;
19550: LD_ADDR_OWVAR 79
19554: PUSH
19555: LD_INT 0
19557: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19558: LD_INT 10500
19560: PPUSH
19561: CALL_OW 67
// solar_recharge_percent := 100 ;
19565: LD_ADDR_OWVAR 79
19569: PUSH
19570: LD_INT 100
19572: ST_TO_ADDR
// end ;
19573: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19574: LD_EXP 50
19578: PUSH
19579: LD_EXP 74
19583: AND
19584: IFFALSE 19823
19586: GO 19588
19588: DISABLE
19589: LD_INT 0
19591: PPUSH
19592: PPUSH
19593: PPUSH
// begin tmp := [ ] ;
19594: LD_ADDR_VAR 0 3
19598: PUSH
19599: EMPTY
19600: ST_TO_ADDR
// for i := 1 to 6 do
19601: LD_ADDR_VAR 0 1
19605: PUSH
19606: DOUBLE
19607: LD_INT 1
19609: DEC
19610: ST_TO_ADDR
19611: LD_INT 6
19613: PUSH
19614: FOR_TO
19615: IFFALSE 19720
// begin uc_nation := nation_nature ;
19617: LD_ADDR_OWVAR 21
19621: PUSH
19622: LD_INT 0
19624: ST_TO_ADDR
// uc_side := 0 ;
19625: LD_ADDR_OWVAR 20
19629: PUSH
19630: LD_INT 0
19632: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19633: LD_ADDR_OWVAR 29
19637: PUSH
19638: LD_INT 12
19640: PUSH
19641: LD_INT 12
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: ST_TO_ADDR
// hc_agressivity := 20 ;
19648: LD_ADDR_OWVAR 35
19652: PUSH
19653: LD_INT 20
19655: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19656: LD_ADDR_OWVAR 28
19660: PUSH
19661: LD_INT 17
19663: ST_TO_ADDR
// hc_gallery :=  ;
19664: LD_ADDR_OWVAR 33
19668: PUSH
19669: LD_STRING 
19671: ST_TO_ADDR
// hc_name :=  ;
19672: LD_ADDR_OWVAR 26
19676: PUSH
19677: LD_STRING 
19679: ST_TO_ADDR
// un := CreateHuman ;
19680: LD_ADDR_VAR 0 2
19684: PUSH
19685: CALL_OW 44
19689: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19690: LD_VAR 0 2
19694: PPUSH
19695: LD_INT 1
19697: PPUSH
19698: CALL_OW 51
// tmp := tmp ^ un ;
19702: LD_ADDR_VAR 0 3
19706: PUSH
19707: LD_VAR 0 3
19711: PUSH
19712: LD_VAR 0 2
19716: ADD
19717: ST_TO_ADDR
// end ;
19718: GO 19614
19720: POP
19721: POP
// repeat wait ( 0 0$1 ) ;
19722: LD_INT 35
19724: PPUSH
19725: CALL_OW 67
// for un in tmp do
19729: LD_ADDR_VAR 0 2
19733: PUSH
19734: LD_VAR 0 3
19738: PUSH
19739: FOR_IN
19740: IFFALSE 19814
// begin if IsDead ( un ) then
19742: LD_VAR 0 2
19746: PPUSH
19747: CALL_OW 301
19751: IFFALSE 19771
// begin tmp := tmp diff un ;
19753: LD_ADDR_VAR 0 3
19757: PUSH
19758: LD_VAR 0 3
19762: PUSH
19763: LD_VAR 0 2
19767: DIFF
19768: ST_TO_ADDR
// continue ;
19769: GO 19739
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19771: LD_VAR 0 2
19775: PPUSH
19776: LD_INT 3
19778: PUSH
19779: LD_INT 22
19781: PUSH
19782: LD_INT 0
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: PUSH
19789: EMPTY
19790: LIST
19791: LIST
19792: PPUSH
19793: CALL_OW 69
19797: PPUSH
19798: LD_VAR 0 2
19802: PPUSH
19803: CALL_OW 74
19807: PPUSH
19808: CALL_OW 115
// end ;
19812: GO 19739
19814: POP
19815: POP
// until not tmp ;
19816: LD_VAR 0 3
19820: NOT
19821: IFFALSE 19722
// end ;
19823: PPOPN 3
19825: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19826: LD_EXP 50
19830: PUSH
19831: LD_EXP 75
19835: AND
19836: IFFALSE 19890
19838: GO 19840
19840: DISABLE
// begin ToLua ( displayTroll(); ) ;
19841: LD_STRING displayTroll();
19843: PPUSH
19844: CALL_OW 559
// wait ( 3 3$00 ) ;
19848: LD_INT 6300
19850: PPUSH
19851: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19855: LD_STRING hideTroll();
19857: PPUSH
19858: CALL_OW 559
// wait ( 1 1$00 ) ;
19862: LD_INT 2100
19864: PPUSH
19865: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19869: LD_STRING displayTroll();
19871: PPUSH
19872: CALL_OW 559
// wait ( 1 1$00 ) ;
19876: LD_INT 2100
19878: PPUSH
19879: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19883: LD_STRING hideTroll();
19885: PPUSH
19886: CALL_OW 559
// end ;
19890: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19891: LD_EXP 50
19895: PUSH
19896: LD_EXP 76
19900: AND
19901: IFFALSE 19964
19903: GO 19905
19905: DISABLE
19906: LD_INT 0
19908: PPUSH
// begin p := 0 ;
19909: LD_ADDR_VAR 0 1
19913: PUSH
19914: LD_INT 0
19916: ST_TO_ADDR
// repeat game_speed := 1 ;
19917: LD_ADDR_OWVAR 65
19921: PUSH
19922: LD_INT 1
19924: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19925: LD_INT 35
19927: PPUSH
19928: CALL_OW 67
// p := p + 1 ;
19932: LD_ADDR_VAR 0 1
19936: PUSH
19937: LD_VAR 0 1
19941: PUSH
19942: LD_INT 1
19944: PLUS
19945: ST_TO_ADDR
// until p >= 60 ;
19946: LD_VAR 0 1
19950: PUSH
19951: LD_INT 60
19953: GREATEREQUAL
19954: IFFALSE 19917
// game_speed := 4 ;
19956: LD_ADDR_OWVAR 65
19960: PUSH
19961: LD_INT 4
19963: ST_TO_ADDR
// end ;
19964: PPOPN 1
19966: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19967: LD_EXP 50
19971: PUSH
19972: LD_EXP 77
19976: AND
19977: IFFALSE 20123
19979: GO 19981
19981: DISABLE
19982: LD_INT 0
19984: PPUSH
19985: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19986: LD_ADDR_VAR 0 1
19990: PUSH
19991: LD_INT 22
19993: PUSH
19994: LD_OWVAR 2
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: PUSH
20003: LD_INT 2
20005: PUSH
20006: LD_INT 30
20008: PUSH
20009: LD_INT 0
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: PUSH
20016: LD_INT 30
20018: PUSH
20019: LD_INT 1
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: LIST
20030: PUSH
20031: EMPTY
20032: LIST
20033: LIST
20034: PPUSH
20035: CALL_OW 69
20039: ST_TO_ADDR
// if not depot then
20040: LD_VAR 0 1
20044: NOT
20045: IFFALSE 20049
// exit ;
20047: GO 20123
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20049: LD_ADDR_VAR 0 2
20053: PUSH
20054: LD_VAR 0 1
20058: PUSH
20059: LD_INT 1
20061: PPUSH
20062: LD_VAR 0 1
20066: PPUSH
20067: CALL_OW 12
20071: ARRAY
20072: PPUSH
20073: CALL_OW 274
20077: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20078: LD_VAR 0 2
20082: PPUSH
20083: LD_INT 1
20085: PPUSH
20086: LD_INT 0
20088: PPUSH
20089: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20093: LD_VAR 0 2
20097: PPUSH
20098: LD_INT 2
20100: PPUSH
20101: LD_INT 0
20103: PPUSH
20104: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20108: LD_VAR 0 2
20112: PPUSH
20113: LD_INT 3
20115: PPUSH
20116: LD_INT 0
20118: PPUSH
20119: CALL_OW 277
// end ;
20123: PPOPN 2
20125: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20126: LD_EXP 50
20130: PUSH
20131: LD_EXP 78
20135: AND
20136: IFFALSE 20233
20138: GO 20140
20140: DISABLE
20141: LD_INT 0
20143: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20144: LD_ADDR_VAR 0 1
20148: PUSH
20149: LD_INT 22
20151: PUSH
20152: LD_OWVAR 2
20156: PUSH
20157: EMPTY
20158: LIST
20159: LIST
20160: PUSH
20161: LD_INT 21
20163: PUSH
20164: LD_INT 1
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: PUSH
20171: LD_INT 3
20173: PUSH
20174: LD_INT 23
20176: PUSH
20177: LD_INT 0
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: PUSH
20184: EMPTY
20185: LIST
20186: LIST
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: LIST
20192: PPUSH
20193: CALL_OW 69
20197: ST_TO_ADDR
// if not tmp then
20198: LD_VAR 0 1
20202: NOT
20203: IFFALSE 20207
// exit ;
20205: GO 20233
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20207: LD_VAR 0 1
20211: PUSH
20212: LD_INT 1
20214: PPUSH
20215: LD_VAR 0 1
20219: PPUSH
20220: CALL_OW 12
20224: ARRAY
20225: PPUSH
20226: LD_INT 200
20228: PPUSH
20229: CALL_OW 234
// end ;
20233: PPOPN 1
20235: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20236: LD_EXP 50
20240: PUSH
20241: LD_EXP 79
20245: AND
20246: IFFALSE 20325
20248: GO 20250
20250: DISABLE
20251: LD_INT 0
20253: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20254: LD_ADDR_VAR 0 1
20258: PUSH
20259: LD_INT 22
20261: PUSH
20262: LD_OWVAR 2
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: PUSH
20271: LD_INT 21
20273: PUSH
20274: LD_INT 2
20276: PUSH
20277: EMPTY
20278: LIST
20279: LIST
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: PPUSH
20285: CALL_OW 69
20289: ST_TO_ADDR
// if not tmp then
20290: LD_VAR 0 1
20294: NOT
20295: IFFALSE 20299
// exit ;
20297: GO 20325
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20299: LD_VAR 0 1
20303: PUSH
20304: LD_INT 1
20306: PPUSH
20307: LD_VAR 0 1
20311: PPUSH
20312: CALL_OW 12
20316: ARRAY
20317: PPUSH
20318: LD_INT 60
20320: PPUSH
20321: CALL_OW 234
// end ;
20325: PPOPN 1
20327: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20328: LD_EXP 50
20332: PUSH
20333: LD_EXP 80
20337: AND
20338: IFFALSE 20437
20340: GO 20342
20342: DISABLE
20343: LD_INT 0
20345: PPUSH
20346: PPUSH
// begin enable ;
20347: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20348: LD_ADDR_VAR 0 1
20352: PUSH
20353: LD_INT 22
20355: PUSH
20356: LD_OWVAR 2
20360: PUSH
20361: EMPTY
20362: LIST
20363: LIST
20364: PUSH
20365: LD_INT 61
20367: PUSH
20368: EMPTY
20369: LIST
20370: PUSH
20371: LD_INT 33
20373: PUSH
20374: LD_INT 2
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: PUSH
20381: EMPTY
20382: LIST
20383: LIST
20384: LIST
20385: PPUSH
20386: CALL_OW 69
20390: ST_TO_ADDR
// if not tmp then
20391: LD_VAR 0 1
20395: NOT
20396: IFFALSE 20400
// exit ;
20398: GO 20437
// for i in tmp do
20400: LD_ADDR_VAR 0 2
20404: PUSH
20405: LD_VAR 0 1
20409: PUSH
20410: FOR_IN
20411: IFFALSE 20435
// if IsControledBy ( i ) then
20413: LD_VAR 0 2
20417: PPUSH
20418: CALL_OW 312
20422: IFFALSE 20433
// ComUnlink ( i ) ;
20424: LD_VAR 0 2
20428: PPUSH
20429: CALL_OW 136
20433: GO 20410
20435: POP
20436: POP
// end ;
20437: PPOPN 2
20439: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20440: LD_EXP 50
20444: PUSH
20445: LD_EXP 81
20449: AND
20450: IFFALSE 20590
20452: GO 20454
20454: DISABLE
20455: LD_INT 0
20457: PPUSH
20458: PPUSH
// begin ToLua ( displayPowell(); ) ;
20459: LD_STRING displayPowell();
20461: PPUSH
20462: CALL_OW 559
// uc_side := 0 ;
20466: LD_ADDR_OWVAR 20
20470: PUSH
20471: LD_INT 0
20473: ST_TO_ADDR
// uc_nation := 2 ;
20474: LD_ADDR_OWVAR 21
20478: PUSH
20479: LD_INT 2
20481: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20482: LD_ADDR_OWVAR 37
20486: PUSH
20487: LD_INT 14
20489: ST_TO_ADDR
// vc_engine := engine_siberite ;
20490: LD_ADDR_OWVAR 39
20494: PUSH
20495: LD_INT 3
20497: ST_TO_ADDR
// vc_control := control_apeman ;
20498: LD_ADDR_OWVAR 38
20502: PUSH
20503: LD_INT 5
20505: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20506: LD_ADDR_OWVAR 40
20510: PUSH
20511: LD_INT 29
20513: ST_TO_ADDR
// un := CreateVehicle ;
20514: LD_ADDR_VAR 0 2
20518: PUSH
20519: CALL_OW 45
20523: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20524: LD_VAR 0 2
20528: PPUSH
20529: LD_INT 1
20531: PPUSH
20532: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20536: LD_INT 35
20538: PPUSH
20539: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20543: LD_VAR 0 2
20547: PPUSH
20548: LD_INT 22
20550: PUSH
20551: LD_OWVAR 2
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: PPUSH
20560: CALL_OW 69
20564: PPUSH
20565: LD_VAR 0 2
20569: PPUSH
20570: CALL_OW 74
20574: PPUSH
20575: CALL_OW 115
// until IsDead ( un ) ;
20579: LD_VAR 0 2
20583: PPUSH
20584: CALL_OW 301
20588: IFFALSE 20536
// end ;
20590: PPOPN 2
20592: END
// every 0 0$1 trigger StreamModeActive and sStu do
20593: LD_EXP 50
20597: PUSH
20598: LD_EXP 89
20602: AND
20603: IFFALSE 20619
20605: GO 20607
20607: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20608: LD_STRING displayStucuk();
20610: PPUSH
20611: CALL_OW 559
// ResetFog ;
20615: CALL_OW 335
// end ;
20619: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20620: LD_EXP 50
20624: PUSH
20625: LD_EXP 82
20629: AND
20630: IFFALSE 20771
20632: GO 20634
20634: DISABLE
20635: LD_INT 0
20637: PPUSH
20638: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20639: LD_ADDR_VAR 0 2
20643: PUSH
20644: LD_INT 22
20646: PUSH
20647: LD_OWVAR 2
20651: PUSH
20652: EMPTY
20653: LIST
20654: LIST
20655: PUSH
20656: LD_INT 21
20658: PUSH
20659: LD_INT 1
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: PPUSH
20670: CALL_OW 69
20674: ST_TO_ADDR
// if not tmp then
20675: LD_VAR 0 2
20679: NOT
20680: IFFALSE 20684
// exit ;
20682: GO 20771
// un := tmp [ rand ( 1 , tmp ) ] ;
20684: LD_ADDR_VAR 0 1
20688: PUSH
20689: LD_VAR 0 2
20693: PUSH
20694: LD_INT 1
20696: PPUSH
20697: LD_VAR 0 2
20701: PPUSH
20702: CALL_OW 12
20706: ARRAY
20707: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20708: LD_VAR 0 1
20712: PPUSH
20713: LD_INT 0
20715: PPUSH
20716: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20720: LD_VAR 0 1
20724: PPUSH
20725: LD_OWVAR 3
20729: PUSH
20730: LD_VAR 0 1
20734: DIFF
20735: PPUSH
20736: LD_VAR 0 1
20740: PPUSH
20741: CALL_OW 74
20745: PPUSH
20746: CALL_OW 115
// wait ( 0 0$20 ) ;
20750: LD_INT 700
20752: PPUSH
20753: CALL_OW 67
// SetSide ( un , your_side ) ;
20757: LD_VAR 0 1
20761: PPUSH
20762: LD_OWVAR 2
20766: PPUSH
20767: CALL_OW 235
// end ;
20771: PPOPN 2
20773: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20774: LD_EXP 50
20778: PUSH
20779: LD_EXP 83
20783: AND
20784: IFFALSE 20890
20786: GO 20788
20788: DISABLE
20789: LD_INT 0
20791: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20792: LD_ADDR_VAR 0 1
20796: PUSH
20797: LD_INT 22
20799: PUSH
20800: LD_OWVAR 2
20804: PUSH
20805: EMPTY
20806: LIST
20807: LIST
20808: PUSH
20809: LD_INT 2
20811: PUSH
20812: LD_INT 30
20814: PUSH
20815: LD_INT 0
20817: PUSH
20818: EMPTY
20819: LIST
20820: LIST
20821: PUSH
20822: LD_INT 30
20824: PUSH
20825: LD_INT 1
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: LIST
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: PPUSH
20841: CALL_OW 69
20845: ST_TO_ADDR
// if not depot then
20846: LD_VAR 0 1
20850: NOT
20851: IFFALSE 20855
// exit ;
20853: GO 20890
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20855: LD_VAR 0 1
20859: PUSH
20860: LD_INT 1
20862: ARRAY
20863: PPUSH
20864: CALL_OW 250
20868: PPUSH
20869: LD_VAR 0 1
20873: PUSH
20874: LD_INT 1
20876: ARRAY
20877: PPUSH
20878: CALL_OW 251
20882: PPUSH
20883: LD_INT 70
20885: PPUSH
20886: CALL_OW 495
// end ;
20890: PPOPN 1
20892: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20893: LD_EXP 50
20897: PUSH
20898: LD_EXP 84
20902: AND
20903: IFFALSE 21114
20905: GO 20907
20907: DISABLE
20908: LD_INT 0
20910: PPUSH
20911: PPUSH
20912: PPUSH
20913: PPUSH
20914: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20915: LD_ADDR_VAR 0 5
20919: PUSH
20920: LD_INT 22
20922: PUSH
20923: LD_OWVAR 2
20927: PUSH
20928: EMPTY
20929: LIST
20930: LIST
20931: PUSH
20932: LD_INT 21
20934: PUSH
20935: LD_INT 1
20937: PUSH
20938: EMPTY
20939: LIST
20940: LIST
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: PPUSH
20946: CALL_OW 69
20950: ST_TO_ADDR
// if not tmp then
20951: LD_VAR 0 5
20955: NOT
20956: IFFALSE 20960
// exit ;
20958: GO 21114
// for i in tmp do
20960: LD_ADDR_VAR 0 1
20964: PUSH
20965: LD_VAR 0 5
20969: PUSH
20970: FOR_IN
20971: IFFALSE 21112
// begin d := rand ( 0 , 5 ) ;
20973: LD_ADDR_VAR 0 4
20977: PUSH
20978: LD_INT 0
20980: PPUSH
20981: LD_INT 5
20983: PPUSH
20984: CALL_OW 12
20988: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20989: LD_ADDR_VAR 0 2
20993: PUSH
20994: LD_VAR 0 1
20998: PPUSH
20999: CALL_OW 250
21003: PPUSH
21004: LD_VAR 0 4
21008: PPUSH
21009: LD_INT 3
21011: PPUSH
21012: LD_INT 12
21014: PPUSH
21015: CALL_OW 12
21019: PPUSH
21020: CALL_OW 272
21024: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21025: LD_ADDR_VAR 0 3
21029: PUSH
21030: LD_VAR 0 1
21034: PPUSH
21035: CALL_OW 251
21039: PPUSH
21040: LD_VAR 0 4
21044: PPUSH
21045: LD_INT 3
21047: PPUSH
21048: LD_INT 12
21050: PPUSH
21051: CALL_OW 12
21055: PPUSH
21056: CALL_OW 273
21060: ST_TO_ADDR
// if ValidHex ( x , y ) then
21061: LD_VAR 0 2
21065: PPUSH
21066: LD_VAR 0 3
21070: PPUSH
21071: CALL_OW 488
21075: IFFALSE 21110
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21077: LD_VAR 0 1
21081: PPUSH
21082: LD_VAR 0 2
21086: PPUSH
21087: LD_VAR 0 3
21091: PPUSH
21092: LD_INT 3
21094: PPUSH
21095: LD_INT 6
21097: PPUSH
21098: CALL_OW 12
21102: PPUSH
21103: LD_INT 1
21105: PPUSH
21106: CALL_OW 483
// end ;
21110: GO 20970
21112: POP
21113: POP
// end ;
21114: PPOPN 5
21116: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21117: LD_EXP 50
21121: PUSH
21122: LD_EXP 85
21126: AND
21127: IFFALSE 21221
21129: GO 21131
21131: DISABLE
21132: LD_INT 0
21134: PPUSH
21135: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21136: LD_ADDR_VAR 0 2
21140: PUSH
21141: LD_INT 22
21143: PUSH
21144: LD_OWVAR 2
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: PUSH
21153: LD_INT 32
21155: PUSH
21156: LD_INT 1
21158: PUSH
21159: EMPTY
21160: LIST
21161: LIST
21162: PUSH
21163: LD_INT 21
21165: PUSH
21166: LD_INT 2
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: LIST
21177: PPUSH
21178: CALL_OW 69
21182: ST_TO_ADDR
// if not tmp then
21183: LD_VAR 0 2
21187: NOT
21188: IFFALSE 21192
// exit ;
21190: GO 21221
// for i in tmp do
21192: LD_ADDR_VAR 0 1
21196: PUSH
21197: LD_VAR 0 2
21201: PUSH
21202: FOR_IN
21203: IFFALSE 21219
// SetFuel ( i , 0 ) ;
21205: LD_VAR 0 1
21209: PPUSH
21210: LD_INT 0
21212: PPUSH
21213: CALL_OW 240
21217: GO 21202
21219: POP
21220: POP
// end ;
21221: PPOPN 2
21223: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21224: LD_EXP 50
21228: PUSH
21229: LD_EXP 86
21233: AND
21234: IFFALSE 21300
21236: GO 21238
21238: DISABLE
21239: LD_INT 0
21241: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21242: LD_ADDR_VAR 0 1
21246: PUSH
21247: LD_INT 22
21249: PUSH
21250: LD_OWVAR 2
21254: PUSH
21255: EMPTY
21256: LIST
21257: LIST
21258: PUSH
21259: LD_INT 30
21261: PUSH
21262: LD_INT 29
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: PPUSH
21273: CALL_OW 69
21277: ST_TO_ADDR
// if not tmp then
21278: LD_VAR 0 1
21282: NOT
21283: IFFALSE 21287
// exit ;
21285: GO 21300
// DestroyUnit ( tmp [ 1 ] ) ;
21287: LD_VAR 0 1
21291: PUSH
21292: LD_INT 1
21294: ARRAY
21295: PPUSH
21296: CALL_OW 65
// end ;
21300: PPOPN 1
21302: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21303: LD_EXP 50
21307: PUSH
21308: LD_EXP 88
21312: AND
21313: IFFALSE 21442
21315: GO 21317
21317: DISABLE
21318: LD_INT 0
21320: PPUSH
// begin uc_side := 0 ;
21321: LD_ADDR_OWVAR 20
21325: PUSH
21326: LD_INT 0
21328: ST_TO_ADDR
// uc_nation := nation_arabian ;
21329: LD_ADDR_OWVAR 21
21333: PUSH
21334: LD_INT 2
21336: ST_TO_ADDR
// hc_gallery :=  ;
21337: LD_ADDR_OWVAR 33
21341: PUSH
21342: LD_STRING 
21344: ST_TO_ADDR
// hc_name :=  ;
21345: LD_ADDR_OWVAR 26
21349: PUSH
21350: LD_STRING 
21352: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21353: LD_INT 1
21355: PPUSH
21356: LD_INT 11
21358: PPUSH
21359: LD_INT 10
21361: PPUSH
21362: CALL_OW 380
// un := CreateHuman ;
21366: LD_ADDR_VAR 0 1
21370: PUSH
21371: CALL_OW 44
21375: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21376: LD_VAR 0 1
21380: PPUSH
21381: LD_INT 1
21383: PPUSH
21384: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21388: LD_INT 35
21390: PPUSH
21391: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21395: LD_VAR 0 1
21399: PPUSH
21400: LD_INT 22
21402: PUSH
21403: LD_OWVAR 2
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: PPUSH
21412: CALL_OW 69
21416: PPUSH
21417: LD_VAR 0 1
21421: PPUSH
21422: CALL_OW 74
21426: PPUSH
21427: CALL_OW 115
// until IsDead ( un ) ;
21431: LD_VAR 0 1
21435: PPUSH
21436: CALL_OW 301
21440: IFFALSE 21388
// end ;
21442: PPOPN 1
21444: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21445: LD_EXP 50
21449: PUSH
21450: LD_EXP 90
21454: AND
21455: IFFALSE 21467
21457: GO 21459
21459: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21460: LD_STRING earthquake(getX(game), 0, 32)
21462: PPUSH
21463: CALL_OW 559
21467: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21468: LD_EXP 50
21472: PUSH
21473: LD_EXP 91
21477: AND
21478: IFFALSE 21569
21480: GO 21482
21482: DISABLE
21483: LD_INT 0
21485: PPUSH
// begin enable ;
21486: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21487: LD_ADDR_VAR 0 1
21491: PUSH
21492: LD_INT 22
21494: PUSH
21495: LD_OWVAR 2
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: PUSH
21504: LD_INT 21
21506: PUSH
21507: LD_INT 2
21509: PUSH
21510: EMPTY
21511: LIST
21512: LIST
21513: PUSH
21514: LD_INT 33
21516: PUSH
21517: LD_INT 3
21519: PUSH
21520: EMPTY
21521: LIST
21522: LIST
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: LIST
21528: PPUSH
21529: CALL_OW 69
21533: ST_TO_ADDR
// if not tmp then
21534: LD_VAR 0 1
21538: NOT
21539: IFFALSE 21543
// exit ;
21541: GO 21569
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21543: LD_VAR 0 1
21547: PUSH
21548: LD_INT 1
21550: PPUSH
21551: LD_VAR 0 1
21555: PPUSH
21556: CALL_OW 12
21560: ARRAY
21561: PPUSH
21562: LD_INT 1
21564: PPUSH
21565: CALL_OW 234
// end ;
21569: PPOPN 1
21571: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21572: LD_EXP 50
21576: PUSH
21577: LD_EXP 92
21581: AND
21582: IFFALSE 21723
21584: GO 21586
21586: DISABLE
21587: LD_INT 0
21589: PPUSH
21590: PPUSH
21591: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21592: LD_ADDR_VAR 0 3
21596: PUSH
21597: LD_INT 22
21599: PUSH
21600: LD_OWVAR 2
21604: PUSH
21605: EMPTY
21606: LIST
21607: LIST
21608: PUSH
21609: LD_INT 25
21611: PUSH
21612: LD_INT 1
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: PPUSH
21623: CALL_OW 69
21627: ST_TO_ADDR
// if not tmp then
21628: LD_VAR 0 3
21632: NOT
21633: IFFALSE 21637
// exit ;
21635: GO 21723
// un := tmp [ rand ( 1 , tmp ) ] ;
21637: LD_ADDR_VAR 0 2
21641: PUSH
21642: LD_VAR 0 3
21646: PUSH
21647: LD_INT 1
21649: PPUSH
21650: LD_VAR 0 3
21654: PPUSH
21655: CALL_OW 12
21659: ARRAY
21660: ST_TO_ADDR
// if Crawls ( un ) then
21661: LD_VAR 0 2
21665: PPUSH
21666: CALL_OW 318
21670: IFFALSE 21681
// ComWalk ( un ) ;
21672: LD_VAR 0 2
21676: PPUSH
21677: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21681: LD_VAR 0 2
21685: PPUSH
21686: LD_INT 9
21688: PPUSH
21689: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21693: LD_INT 28
21695: PPUSH
21696: LD_OWVAR 2
21700: PPUSH
21701: LD_INT 2
21703: PPUSH
21704: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21708: LD_INT 29
21710: PPUSH
21711: LD_OWVAR 2
21715: PPUSH
21716: LD_INT 2
21718: PPUSH
21719: CALL_OW 322
// end ;
21723: PPOPN 3
21725: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21726: LD_EXP 50
21730: PUSH
21731: LD_EXP 93
21735: AND
21736: IFFALSE 21847
21738: GO 21740
21740: DISABLE
21741: LD_INT 0
21743: PPUSH
21744: PPUSH
21745: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21746: LD_ADDR_VAR 0 3
21750: PUSH
21751: LD_INT 22
21753: PUSH
21754: LD_OWVAR 2
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: PUSH
21763: LD_INT 25
21765: PUSH
21766: LD_INT 1
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: PPUSH
21777: CALL_OW 69
21781: ST_TO_ADDR
// if not tmp then
21782: LD_VAR 0 3
21786: NOT
21787: IFFALSE 21791
// exit ;
21789: GO 21847
// un := tmp [ rand ( 1 , tmp ) ] ;
21791: LD_ADDR_VAR 0 2
21795: PUSH
21796: LD_VAR 0 3
21800: PUSH
21801: LD_INT 1
21803: PPUSH
21804: LD_VAR 0 3
21808: PPUSH
21809: CALL_OW 12
21813: ARRAY
21814: ST_TO_ADDR
// if Crawls ( un ) then
21815: LD_VAR 0 2
21819: PPUSH
21820: CALL_OW 318
21824: IFFALSE 21835
// ComWalk ( un ) ;
21826: LD_VAR 0 2
21830: PPUSH
21831: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21835: LD_VAR 0 2
21839: PPUSH
21840: LD_INT 8
21842: PPUSH
21843: CALL_OW 336
// end ;
21847: PPOPN 3
21849: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21850: LD_EXP 50
21854: PUSH
21855: LD_EXP 94
21859: AND
21860: IFFALSE 22004
21862: GO 21864
21864: DISABLE
21865: LD_INT 0
21867: PPUSH
21868: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21869: LD_ADDR_VAR 0 2
21873: PUSH
21874: LD_INT 22
21876: PUSH
21877: LD_OWVAR 2
21881: PUSH
21882: EMPTY
21883: LIST
21884: LIST
21885: PUSH
21886: LD_INT 21
21888: PUSH
21889: LD_INT 2
21891: PUSH
21892: EMPTY
21893: LIST
21894: LIST
21895: PUSH
21896: LD_INT 2
21898: PUSH
21899: LD_INT 34
21901: PUSH
21902: LD_INT 12
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: PUSH
21909: LD_INT 34
21911: PUSH
21912: LD_INT 51
21914: PUSH
21915: EMPTY
21916: LIST
21917: LIST
21918: PUSH
21919: LD_INT 34
21921: PUSH
21922: LD_INT 32
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: PUSH
21929: EMPTY
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: PUSH
21935: EMPTY
21936: LIST
21937: LIST
21938: LIST
21939: PPUSH
21940: CALL_OW 69
21944: ST_TO_ADDR
// if not tmp then
21945: LD_VAR 0 2
21949: NOT
21950: IFFALSE 21954
// exit ;
21952: GO 22004
// for i in tmp do
21954: LD_ADDR_VAR 0 1
21958: PUSH
21959: LD_VAR 0 2
21963: PUSH
21964: FOR_IN
21965: IFFALSE 22002
// if GetCargo ( i , mat_artifact ) = 0 then
21967: LD_VAR 0 1
21971: PPUSH
21972: LD_INT 4
21974: PPUSH
21975: CALL_OW 289
21979: PUSH
21980: LD_INT 0
21982: EQUAL
21983: IFFALSE 22000
// SetCargo ( i , mat_siberit , 100 ) ;
21985: LD_VAR 0 1
21989: PPUSH
21990: LD_INT 3
21992: PPUSH
21993: LD_INT 100
21995: PPUSH
21996: CALL_OW 290
22000: GO 21964
22002: POP
22003: POP
// end ;
22004: PPOPN 2
22006: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22007: LD_EXP 50
22011: PUSH
22012: LD_EXP 95
22016: AND
22017: IFFALSE 22200
22019: GO 22021
22021: DISABLE
22022: LD_INT 0
22024: PPUSH
22025: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22026: LD_ADDR_VAR 0 2
22030: PUSH
22031: LD_INT 22
22033: PUSH
22034: LD_OWVAR 2
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: PPUSH
22043: CALL_OW 69
22047: ST_TO_ADDR
// if not tmp then
22048: LD_VAR 0 2
22052: NOT
22053: IFFALSE 22057
// exit ;
22055: GO 22200
// for i := 1 to 2 do
22057: LD_ADDR_VAR 0 1
22061: PUSH
22062: DOUBLE
22063: LD_INT 1
22065: DEC
22066: ST_TO_ADDR
22067: LD_INT 2
22069: PUSH
22070: FOR_TO
22071: IFFALSE 22198
// begin uc_side := your_side ;
22073: LD_ADDR_OWVAR 20
22077: PUSH
22078: LD_OWVAR 2
22082: ST_TO_ADDR
// uc_nation := nation_american ;
22083: LD_ADDR_OWVAR 21
22087: PUSH
22088: LD_INT 1
22090: ST_TO_ADDR
// vc_chassis := us_morphling ;
22091: LD_ADDR_OWVAR 37
22095: PUSH
22096: LD_INT 5
22098: ST_TO_ADDR
// vc_engine := engine_siberite ;
22099: LD_ADDR_OWVAR 39
22103: PUSH
22104: LD_INT 3
22106: ST_TO_ADDR
// vc_control := control_computer ;
22107: LD_ADDR_OWVAR 38
22111: PUSH
22112: LD_INT 3
22114: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22115: LD_ADDR_OWVAR 40
22119: PUSH
22120: LD_INT 10
22122: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22123: LD_VAR 0 2
22127: PUSH
22128: LD_INT 1
22130: ARRAY
22131: PPUSH
22132: CALL_OW 310
22136: NOT
22137: IFFALSE 22184
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22139: CALL_OW 45
22143: PPUSH
22144: LD_VAR 0 2
22148: PUSH
22149: LD_INT 1
22151: ARRAY
22152: PPUSH
22153: CALL_OW 250
22157: PPUSH
22158: LD_VAR 0 2
22162: PUSH
22163: LD_INT 1
22165: ARRAY
22166: PPUSH
22167: CALL_OW 251
22171: PPUSH
22172: LD_INT 12
22174: PPUSH
22175: LD_INT 1
22177: PPUSH
22178: CALL_OW 50
22182: GO 22196
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22184: CALL_OW 45
22188: PPUSH
22189: LD_INT 1
22191: PPUSH
22192: CALL_OW 51
// end ;
22196: GO 22070
22198: POP
22199: POP
// end ;
22200: PPOPN 2
22202: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22203: LD_EXP 50
22207: PUSH
22208: LD_EXP 96
22212: AND
22213: IFFALSE 22435
22215: GO 22217
22217: DISABLE
22218: LD_INT 0
22220: PPUSH
22221: PPUSH
22222: PPUSH
22223: PPUSH
22224: PPUSH
22225: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22226: LD_ADDR_VAR 0 6
22230: PUSH
22231: LD_INT 22
22233: PUSH
22234: LD_OWVAR 2
22238: PUSH
22239: EMPTY
22240: LIST
22241: LIST
22242: PUSH
22243: LD_INT 21
22245: PUSH
22246: LD_INT 1
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: PUSH
22253: LD_INT 3
22255: PUSH
22256: LD_INT 23
22258: PUSH
22259: LD_INT 0
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: PUSH
22266: EMPTY
22267: LIST
22268: LIST
22269: PUSH
22270: EMPTY
22271: LIST
22272: LIST
22273: LIST
22274: PPUSH
22275: CALL_OW 69
22279: ST_TO_ADDR
// if not tmp then
22280: LD_VAR 0 6
22284: NOT
22285: IFFALSE 22289
// exit ;
22287: GO 22435
// s1 := rand ( 1 , 4 ) ;
22289: LD_ADDR_VAR 0 2
22293: PUSH
22294: LD_INT 1
22296: PPUSH
22297: LD_INT 4
22299: PPUSH
22300: CALL_OW 12
22304: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22305: LD_ADDR_VAR 0 4
22309: PUSH
22310: LD_VAR 0 6
22314: PUSH
22315: LD_INT 1
22317: ARRAY
22318: PPUSH
22319: LD_VAR 0 2
22323: PPUSH
22324: CALL_OW 259
22328: ST_TO_ADDR
// if s1 = 1 then
22329: LD_VAR 0 2
22333: PUSH
22334: LD_INT 1
22336: EQUAL
22337: IFFALSE 22357
// s2 := rand ( 2 , 4 ) else
22339: LD_ADDR_VAR 0 3
22343: PUSH
22344: LD_INT 2
22346: PPUSH
22347: LD_INT 4
22349: PPUSH
22350: CALL_OW 12
22354: ST_TO_ADDR
22355: GO 22365
// s2 := 1 ;
22357: LD_ADDR_VAR 0 3
22361: PUSH
22362: LD_INT 1
22364: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22365: LD_ADDR_VAR 0 5
22369: PUSH
22370: LD_VAR 0 6
22374: PUSH
22375: LD_INT 1
22377: ARRAY
22378: PPUSH
22379: LD_VAR 0 3
22383: PPUSH
22384: CALL_OW 259
22388: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22389: LD_VAR 0 6
22393: PUSH
22394: LD_INT 1
22396: ARRAY
22397: PPUSH
22398: LD_VAR 0 2
22402: PPUSH
22403: LD_VAR 0 5
22407: PPUSH
22408: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22412: LD_VAR 0 6
22416: PUSH
22417: LD_INT 1
22419: ARRAY
22420: PPUSH
22421: LD_VAR 0 3
22425: PPUSH
22426: LD_VAR 0 4
22430: PPUSH
22431: CALL_OW 237
// end ;
22435: PPOPN 6
22437: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22438: LD_EXP 50
22442: PUSH
22443: LD_EXP 97
22447: AND
22448: IFFALSE 22527
22450: GO 22452
22452: DISABLE
22453: LD_INT 0
22455: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22456: LD_ADDR_VAR 0 1
22460: PUSH
22461: LD_INT 22
22463: PUSH
22464: LD_OWVAR 2
22468: PUSH
22469: EMPTY
22470: LIST
22471: LIST
22472: PUSH
22473: LD_INT 30
22475: PUSH
22476: LD_INT 3
22478: PUSH
22479: EMPTY
22480: LIST
22481: LIST
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: PPUSH
22487: CALL_OW 69
22491: ST_TO_ADDR
// if not tmp then
22492: LD_VAR 0 1
22496: NOT
22497: IFFALSE 22501
// exit ;
22499: GO 22527
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22501: LD_VAR 0 1
22505: PUSH
22506: LD_INT 1
22508: PPUSH
22509: LD_VAR 0 1
22513: PPUSH
22514: CALL_OW 12
22518: ARRAY
22519: PPUSH
22520: LD_INT 1
22522: PPUSH
22523: CALL_OW 234
// end ;
22527: PPOPN 1
22529: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22530: LD_EXP 50
22534: PUSH
22535: LD_EXP 98
22539: AND
22540: IFFALSE 22652
22542: GO 22544
22544: DISABLE
22545: LD_INT 0
22547: PPUSH
22548: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22549: LD_ADDR_VAR 0 2
22553: PUSH
22554: LD_INT 22
22556: PUSH
22557: LD_OWVAR 2
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: PUSH
22566: LD_INT 2
22568: PUSH
22569: LD_INT 30
22571: PUSH
22572: LD_INT 27
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PUSH
22579: LD_INT 30
22581: PUSH
22582: LD_INT 26
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: PUSH
22589: LD_INT 30
22591: PUSH
22592: LD_INT 28
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: PPUSH
22609: CALL_OW 69
22613: ST_TO_ADDR
// if not tmp then
22614: LD_VAR 0 2
22618: NOT
22619: IFFALSE 22623
// exit ;
22621: GO 22652
// for i in tmp do
22623: LD_ADDR_VAR 0 1
22627: PUSH
22628: LD_VAR 0 2
22632: PUSH
22633: FOR_IN
22634: IFFALSE 22650
// SetLives ( i , 1 ) ;
22636: LD_VAR 0 1
22640: PPUSH
22641: LD_INT 1
22643: PPUSH
22644: CALL_OW 234
22648: GO 22633
22650: POP
22651: POP
// end ;
22652: PPOPN 2
22654: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22655: LD_EXP 50
22659: PUSH
22660: LD_EXP 99
22664: AND
22665: IFFALSE 22939
22667: GO 22669
22669: DISABLE
22670: LD_INT 0
22672: PPUSH
22673: PPUSH
22674: PPUSH
// begin i := rand ( 1 , 7 ) ;
22675: LD_ADDR_VAR 0 1
22679: PUSH
22680: LD_INT 1
22682: PPUSH
22683: LD_INT 7
22685: PPUSH
22686: CALL_OW 12
22690: ST_TO_ADDR
// case i of 1 :
22691: LD_VAR 0 1
22695: PUSH
22696: LD_INT 1
22698: DOUBLE
22699: EQUAL
22700: IFTRUE 22704
22702: GO 22714
22704: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22705: LD_STRING earthquake(getX(game), 0, 32)
22707: PPUSH
22708: CALL_OW 559
22712: GO 22939
22714: LD_INT 2
22716: DOUBLE
22717: EQUAL
22718: IFTRUE 22722
22720: GO 22736
22722: POP
// begin ToLua ( displayStucuk(); ) ;
22723: LD_STRING displayStucuk();
22725: PPUSH
22726: CALL_OW 559
// ResetFog ;
22730: CALL_OW 335
// end ; 3 :
22734: GO 22939
22736: LD_INT 3
22738: DOUBLE
22739: EQUAL
22740: IFTRUE 22744
22742: GO 22848
22744: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22745: LD_ADDR_VAR 0 2
22749: PUSH
22750: LD_INT 22
22752: PUSH
22753: LD_OWVAR 2
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: PUSH
22762: LD_INT 25
22764: PUSH
22765: LD_INT 1
22767: PUSH
22768: EMPTY
22769: LIST
22770: LIST
22771: PUSH
22772: EMPTY
22773: LIST
22774: LIST
22775: PPUSH
22776: CALL_OW 69
22780: ST_TO_ADDR
// if not tmp then
22781: LD_VAR 0 2
22785: NOT
22786: IFFALSE 22790
// exit ;
22788: GO 22939
// un := tmp [ rand ( 1 , tmp ) ] ;
22790: LD_ADDR_VAR 0 3
22794: PUSH
22795: LD_VAR 0 2
22799: PUSH
22800: LD_INT 1
22802: PPUSH
22803: LD_VAR 0 2
22807: PPUSH
22808: CALL_OW 12
22812: ARRAY
22813: ST_TO_ADDR
// if Crawls ( un ) then
22814: LD_VAR 0 3
22818: PPUSH
22819: CALL_OW 318
22823: IFFALSE 22834
// ComWalk ( un ) ;
22825: LD_VAR 0 3
22829: PPUSH
22830: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22834: LD_VAR 0 3
22838: PPUSH
22839: LD_INT 8
22841: PPUSH
22842: CALL_OW 336
// end ; 4 :
22846: GO 22939
22848: LD_INT 4
22850: DOUBLE
22851: EQUAL
22852: IFTRUE 22856
22854: GO 22917
22856: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22857: LD_ADDR_VAR 0 2
22861: PUSH
22862: LD_INT 22
22864: PUSH
22865: LD_OWVAR 2
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: PUSH
22874: LD_INT 30
22876: PUSH
22877: LD_INT 29
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: PPUSH
22888: CALL_OW 69
22892: ST_TO_ADDR
// if not tmp then
22893: LD_VAR 0 2
22897: NOT
22898: IFFALSE 22902
// exit ;
22900: GO 22939
// DestroyUnit ( tmp [ 1 ] ) ;
22902: LD_VAR 0 2
22906: PUSH
22907: LD_INT 1
22909: ARRAY
22910: PPUSH
22911: CALL_OW 65
// end ; 5 .. 7 :
22915: GO 22939
22917: LD_INT 5
22919: DOUBLE
22920: GREATEREQUAL
22921: IFFALSE 22929
22923: LD_INT 7
22925: DOUBLE
22926: LESSEQUAL
22927: IFTRUE 22931
22929: GO 22938
22931: POP
// StreamSibBomb ; end ;
22932: CALL 19189 0 0
22936: GO 22939
22938: POP
// end ;
22939: PPOPN 3
22941: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22942: LD_EXP 50
22946: PUSH
22947: LD_EXP 100
22951: AND
22952: IFFALSE 23108
22954: GO 22956
22956: DISABLE
22957: LD_INT 0
22959: PPUSH
22960: PPUSH
22961: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22962: LD_ADDR_VAR 0 2
22966: PUSH
22967: LD_INT 81
22969: PUSH
22970: LD_OWVAR 2
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PUSH
22979: LD_INT 2
22981: PUSH
22982: LD_INT 21
22984: PUSH
22985: LD_INT 1
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: PUSH
22992: LD_INT 21
22994: PUSH
22995: LD_INT 2
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: LIST
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: PPUSH
23011: CALL_OW 69
23015: ST_TO_ADDR
// if not tmp then
23016: LD_VAR 0 2
23020: NOT
23021: IFFALSE 23025
// exit ;
23023: GO 23108
// p := 0 ;
23025: LD_ADDR_VAR 0 3
23029: PUSH
23030: LD_INT 0
23032: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23033: LD_INT 35
23035: PPUSH
23036: CALL_OW 67
// p := p + 1 ;
23040: LD_ADDR_VAR 0 3
23044: PUSH
23045: LD_VAR 0 3
23049: PUSH
23050: LD_INT 1
23052: PLUS
23053: ST_TO_ADDR
// for i in tmp do
23054: LD_ADDR_VAR 0 1
23058: PUSH
23059: LD_VAR 0 2
23063: PUSH
23064: FOR_IN
23065: IFFALSE 23096
// if GetLives ( i ) < 1000 then
23067: LD_VAR 0 1
23071: PPUSH
23072: CALL_OW 256
23076: PUSH
23077: LD_INT 1000
23079: LESS
23080: IFFALSE 23094
// SetLives ( i , 1000 ) ;
23082: LD_VAR 0 1
23086: PPUSH
23087: LD_INT 1000
23089: PPUSH
23090: CALL_OW 234
23094: GO 23064
23096: POP
23097: POP
// until p > 20 ;
23098: LD_VAR 0 3
23102: PUSH
23103: LD_INT 20
23105: GREATER
23106: IFFALSE 23033
// end ;
23108: PPOPN 3
23110: END
// every 0 0$1 trigger StreamModeActive and sTime do
23111: LD_EXP 50
23115: PUSH
23116: LD_EXP 101
23120: AND
23121: IFFALSE 23156
23123: GO 23125
23125: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23126: LD_INT 28
23128: PPUSH
23129: LD_OWVAR 2
23133: PPUSH
23134: LD_INT 2
23136: PPUSH
23137: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23141: LD_INT 30
23143: PPUSH
23144: LD_OWVAR 2
23148: PPUSH
23149: LD_INT 2
23151: PPUSH
23152: CALL_OW 322
// end ;
23156: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23157: LD_EXP 50
23161: PUSH
23162: LD_EXP 102
23166: AND
23167: IFFALSE 23288
23169: GO 23171
23171: DISABLE
23172: LD_INT 0
23174: PPUSH
23175: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23176: LD_ADDR_VAR 0 2
23180: PUSH
23181: LD_INT 22
23183: PUSH
23184: LD_OWVAR 2
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: PUSH
23193: LD_INT 21
23195: PUSH
23196: LD_INT 1
23198: PUSH
23199: EMPTY
23200: LIST
23201: LIST
23202: PUSH
23203: LD_INT 3
23205: PUSH
23206: LD_INT 23
23208: PUSH
23209: LD_INT 0
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PUSH
23220: EMPTY
23221: LIST
23222: LIST
23223: LIST
23224: PPUSH
23225: CALL_OW 69
23229: ST_TO_ADDR
// if not tmp then
23230: LD_VAR 0 2
23234: NOT
23235: IFFALSE 23239
// exit ;
23237: GO 23288
// for i in tmp do
23239: LD_ADDR_VAR 0 1
23243: PUSH
23244: LD_VAR 0 2
23248: PUSH
23249: FOR_IN
23250: IFFALSE 23286
// begin if Crawls ( i ) then
23252: LD_VAR 0 1
23256: PPUSH
23257: CALL_OW 318
23261: IFFALSE 23272
// ComWalk ( i ) ;
23263: LD_VAR 0 1
23267: PPUSH
23268: CALL_OW 138
// SetClass ( i , 2 ) ;
23272: LD_VAR 0 1
23276: PPUSH
23277: LD_INT 2
23279: PPUSH
23280: CALL_OW 336
// end ;
23284: GO 23249
23286: POP
23287: POP
// end ;
23288: PPOPN 2
23290: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23291: LD_EXP 50
23295: PUSH
23296: LD_EXP 103
23300: AND
23301: IFFALSE 23582
23303: GO 23305
23305: DISABLE
23306: LD_INT 0
23308: PPUSH
23309: PPUSH
23310: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23311: LD_OWVAR 2
23315: PPUSH
23316: LD_INT 9
23318: PPUSH
23319: LD_INT 1
23321: PPUSH
23322: LD_INT 1
23324: PPUSH
23325: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23329: LD_INT 9
23331: PPUSH
23332: LD_OWVAR 2
23336: PPUSH
23337: CALL_OW 343
// uc_side := 9 ;
23341: LD_ADDR_OWVAR 20
23345: PUSH
23346: LD_INT 9
23348: ST_TO_ADDR
// uc_nation := 2 ;
23349: LD_ADDR_OWVAR 21
23353: PUSH
23354: LD_INT 2
23356: ST_TO_ADDR
// hc_name := Dark Warrior ;
23357: LD_ADDR_OWVAR 26
23361: PUSH
23362: LD_STRING Dark Warrior
23364: ST_TO_ADDR
// hc_gallery :=  ;
23365: LD_ADDR_OWVAR 33
23369: PUSH
23370: LD_STRING 
23372: ST_TO_ADDR
// hc_noskilllimit := true ;
23373: LD_ADDR_OWVAR 76
23377: PUSH
23378: LD_INT 1
23380: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23381: LD_ADDR_OWVAR 31
23385: PUSH
23386: LD_INT 30
23388: PUSH
23389: LD_INT 30
23391: PUSH
23392: LD_INT 30
23394: PUSH
23395: LD_INT 30
23397: PUSH
23398: EMPTY
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: ST_TO_ADDR
// un := CreateHuman ;
23404: LD_ADDR_VAR 0 3
23408: PUSH
23409: CALL_OW 44
23413: ST_TO_ADDR
// hc_noskilllimit := false ;
23414: LD_ADDR_OWVAR 76
23418: PUSH
23419: LD_INT 0
23421: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23422: LD_VAR 0 3
23426: PPUSH
23427: LD_INT 1
23429: PPUSH
23430: CALL_OW 51
// p := 0 ;
23434: LD_ADDR_VAR 0 2
23438: PUSH
23439: LD_INT 0
23441: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23442: LD_INT 35
23444: PPUSH
23445: CALL_OW 67
// p := p + 1 ;
23449: LD_ADDR_VAR 0 2
23453: PUSH
23454: LD_VAR 0 2
23458: PUSH
23459: LD_INT 1
23461: PLUS
23462: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23463: LD_VAR 0 3
23467: PPUSH
23468: CALL_OW 256
23472: PUSH
23473: LD_INT 1000
23475: LESS
23476: IFFALSE 23490
// SetLives ( un , 1000 ) ;
23478: LD_VAR 0 3
23482: PPUSH
23483: LD_INT 1000
23485: PPUSH
23486: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23490: LD_VAR 0 3
23494: PPUSH
23495: LD_INT 81
23497: PUSH
23498: LD_OWVAR 2
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: PUSH
23507: LD_INT 91
23509: PUSH
23510: LD_VAR 0 3
23514: PUSH
23515: LD_INT 30
23517: PUSH
23518: EMPTY
23519: LIST
23520: LIST
23521: LIST
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: PPUSH
23527: CALL_OW 69
23531: PPUSH
23532: LD_VAR 0 3
23536: PPUSH
23537: CALL_OW 74
23541: PPUSH
23542: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
23546: LD_VAR 0 2
23550: PUSH
23551: LD_INT 60
23553: GREATER
23554: PUSH
23555: LD_VAR 0 3
23559: PPUSH
23560: CALL_OW 301
23564: OR
23565: IFFALSE 23442
// if un then
23567: LD_VAR 0 3
23571: IFFALSE 23582
// RemoveUnit ( un ) ;
23573: LD_VAR 0 3
23577: PPUSH
23578: CALL_OW 64
// end ;
23582: PPOPN 3
23584: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23585: LD_INT 0
23587: PPUSH
// case cmd of 301 :
23588: LD_VAR 0 1
23592: PUSH
23593: LD_INT 301
23595: DOUBLE
23596: EQUAL
23597: IFTRUE 23601
23599: GO 23633
23601: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23602: LD_VAR 0 6
23606: PPUSH
23607: LD_VAR 0 7
23611: PPUSH
23612: LD_VAR 0 8
23616: PPUSH
23617: LD_VAR 0 4
23621: PPUSH
23622: LD_VAR 0 5
23626: PPUSH
23627: CALL 24834 0 5
23631: GO 23754
23633: LD_INT 302
23635: DOUBLE
23636: EQUAL
23637: IFTRUE 23641
23639: GO 23678
23641: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23642: LD_VAR 0 6
23646: PPUSH
23647: LD_VAR 0 7
23651: PPUSH
23652: LD_VAR 0 8
23656: PPUSH
23657: LD_VAR 0 9
23661: PPUSH
23662: LD_VAR 0 4
23666: PPUSH
23667: LD_VAR 0 5
23671: PPUSH
23672: CALL 24925 0 6
23676: GO 23754
23678: LD_INT 303
23680: DOUBLE
23681: EQUAL
23682: IFTRUE 23686
23684: GO 23723
23686: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23687: LD_VAR 0 6
23691: PPUSH
23692: LD_VAR 0 7
23696: PPUSH
23697: LD_VAR 0 8
23701: PPUSH
23702: LD_VAR 0 9
23706: PPUSH
23707: LD_VAR 0 4
23711: PPUSH
23712: LD_VAR 0 5
23716: PPUSH
23717: CALL 23759 0 6
23721: GO 23754
23723: LD_INT 304
23725: DOUBLE
23726: EQUAL
23727: IFTRUE 23731
23729: GO 23753
23731: POP
// hHackTeleport ( unit , x , y ) ; end ;
23732: LD_VAR 0 2
23736: PPUSH
23737: LD_VAR 0 4
23741: PPUSH
23742: LD_VAR 0 5
23746: PPUSH
23747: CALL 25518 0 3
23751: GO 23754
23753: POP
// end ;
23754: LD_VAR 0 12
23758: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23759: LD_INT 0
23761: PPUSH
23762: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23763: LD_VAR 0 1
23767: PUSH
23768: LD_INT 1
23770: LESS
23771: PUSH
23772: LD_VAR 0 1
23776: PUSH
23777: LD_INT 3
23779: GREATER
23780: OR
23781: PUSH
23782: LD_VAR 0 5
23786: PPUSH
23787: LD_VAR 0 6
23791: PPUSH
23792: CALL_OW 428
23796: OR
23797: IFFALSE 23801
// exit ;
23799: GO 24521
// uc_side := your_side ;
23801: LD_ADDR_OWVAR 20
23805: PUSH
23806: LD_OWVAR 2
23810: ST_TO_ADDR
// uc_nation := nation ;
23811: LD_ADDR_OWVAR 21
23815: PUSH
23816: LD_VAR 0 1
23820: ST_TO_ADDR
// bc_level = 1 ;
23821: LD_ADDR_OWVAR 43
23825: PUSH
23826: LD_INT 1
23828: ST_TO_ADDR
// case btype of 1 :
23829: LD_VAR 0 2
23833: PUSH
23834: LD_INT 1
23836: DOUBLE
23837: EQUAL
23838: IFTRUE 23842
23840: GO 23853
23842: POP
// bc_type := b_depot ; 2 :
23843: LD_ADDR_OWVAR 42
23847: PUSH
23848: LD_INT 0
23850: ST_TO_ADDR
23851: GO 24465
23853: LD_INT 2
23855: DOUBLE
23856: EQUAL
23857: IFTRUE 23861
23859: GO 23872
23861: POP
// bc_type := b_warehouse ; 3 :
23862: LD_ADDR_OWVAR 42
23866: PUSH
23867: LD_INT 1
23869: ST_TO_ADDR
23870: GO 24465
23872: LD_INT 3
23874: DOUBLE
23875: EQUAL
23876: IFTRUE 23880
23878: GO 23891
23880: POP
// bc_type := b_lab ; 4 .. 9 :
23881: LD_ADDR_OWVAR 42
23885: PUSH
23886: LD_INT 6
23888: ST_TO_ADDR
23889: GO 24465
23891: LD_INT 4
23893: DOUBLE
23894: GREATEREQUAL
23895: IFFALSE 23903
23897: LD_INT 9
23899: DOUBLE
23900: LESSEQUAL
23901: IFTRUE 23905
23903: GO 23957
23905: POP
// begin bc_type := b_lab_half ;
23906: LD_ADDR_OWVAR 42
23910: PUSH
23911: LD_INT 7
23913: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23914: LD_ADDR_OWVAR 44
23918: PUSH
23919: LD_INT 10
23921: PUSH
23922: LD_INT 11
23924: PUSH
23925: LD_INT 12
23927: PUSH
23928: LD_INT 15
23930: PUSH
23931: LD_INT 14
23933: PUSH
23934: LD_INT 13
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: PUSH
23945: LD_VAR 0 2
23949: PUSH
23950: LD_INT 3
23952: MINUS
23953: ARRAY
23954: ST_TO_ADDR
// end ; 10 .. 13 :
23955: GO 24465
23957: LD_INT 10
23959: DOUBLE
23960: GREATEREQUAL
23961: IFFALSE 23969
23963: LD_INT 13
23965: DOUBLE
23966: LESSEQUAL
23967: IFTRUE 23971
23969: GO 24048
23971: POP
// begin bc_type := b_lab_full ;
23972: LD_ADDR_OWVAR 42
23976: PUSH
23977: LD_INT 8
23979: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23980: LD_ADDR_OWVAR 44
23984: PUSH
23985: LD_INT 10
23987: PUSH
23988: LD_INT 12
23990: PUSH
23991: LD_INT 14
23993: PUSH
23994: LD_INT 13
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: PUSH
24003: LD_VAR 0 2
24007: PUSH
24008: LD_INT 9
24010: MINUS
24011: ARRAY
24012: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24013: LD_ADDR_OWVAR 45
24017: PUSH
24018: LD_INT 11
24020: PUSH
24021: LD_INT 15
24023: PUSH
24024: LD_INT 12
24026: PUSH
24027: LD_INT 15
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: PUSH
24036: LD_VAR 0 2
24040: PUSH
24041: LD_INT 9
24043: MINUS
24044: ARRAY
24045: ST_TO_ADDR
// end ; 14 :
24046: GO 24465
24048: LD_INT 14
24050: DOUBLE
24051: EQUAL
24052: IFTRUE 24056
24054: GO 24067
24056: POP
// bc_type := b_workshop ; 15 :
24057: LD_ADDR_OWVAR 42
24061: PUSH
24062: LD_INT 2
24064: ST_TO_ADDR
24065: GO 24465
24067: LD_INT 15
24069: DOUBLE
24070: EQUAL
24071: IFTRUE 24075
24073: GO 24086
24075: POP
// bc_type := b_factory ; 16 :
24076: LD_ADDR_OWVAR 42
24080: PUSH
24081: LD_INT 3
24083: ST_TO_ADDR
24084: GO 24465
24086: LD_INT 16
24088: DOUBLE
24089: EQUAL
24090: IFTRUE 24094
24092: GO 24105
24094: POP
// bc_type := b_ext_gun ; 17 :
24095: LD_ADDR_OWVAR 42
24099: PUSH
24100: LD_INT 17
24102: ST_TO_ADDR
24103: GO 24465
24105: LD_INT 17
24107: DOUBLE
24108: EQUAL
24109: IFTRUE 24113
24111: GO 24141
24113: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24114: LD_ADDR_OWVAR 42
24118: PUSH
24119: LD_INT 19
24121: PUSH
24122: LD_INT 23
24124: PUSH
24125: LD_INT 19
24127: PUSH
24128: EMPTY
24129: LIST
24130: LIST
24131: LIST
24132: PUSH
24133: LD_VAR 0 1
24137: ARRAY
24138: ST_TO_ADDR
24139: GO 24465
24141: LD_INT 18
24143: DOUBLE
24144: EQUAL
24145: IFTRUE 24149
24147: GO 24160
24149: POP
// bc_type := b_ext_radar ; 19 :
24150: LD_ADDR_OWVAR 42
24154: PUSH
24155: LD_INT 20
24157: ST_TO_ADDR
24158: GO 24465
24160: LD_INT 19
24162: DOUBLE
24163: EQUAL
24164: IFTRUE 24168
24166: GO 24179
24168: POP
// bc_type := b_ext_radio ; 20 :
24169: LD_ADDR_OWVAR 42
24173: PUSH
24174: LD_INT 22
24176: ST_TO_ADDR
24177: GO 24465
24179: LD_INT 20
24181: DOUBLE
24182: EQUAL
24183: IFTRUE 24187
24185: GO 24198
24187: POP
// bc_type := b_ext_siberium ; 21 :
24188: LD_ADDR_OWVAR 42
24192: PUSH
24193: LD_INT 21
24195: ST_TO_ADDR
24196: GO 24465
24198: LD_INT 21
24200: DOUBLE
24201: EQUAL
24202: IFTRUE 24206
24204: GO 24217
24206: POP
// bc_type := b_ext_computer ; 22 :
24207: LD_ADDR_OWVAR 42
24211: PUSH
24212: LD_INT 24
24214: ST_TO_ADDR
24215: GO 24465
24217: LD_INT 22
24219: DOUBLE
24220: EQUAL
24221: IFTRUE 24225
24223: GO 24236
24225: POP
// bc_type := b_ext_track ; 23 :
24226: LD_ADDR_OWVAR 42
24230: PUSH
24231: LD_INT 16
24233: ST_TO_ADDR
24234: GO 24465
24236: LD_INT 23
24238: DOUBLE
24239: EQUAL
24240: IFTRUE 24244
24242: GO 24255
24244: POP
// bc_type := b_ext_laser ; 24 :
24245: LD_ADDR_OWVAR 42
24249: PUSH
24250: LD_INT 25
24252: ST_TO_ADDR
24253: GO 24465
24255: LD_INT 24
24257: DOUBLE
24258: EQUAL
24259: IFTRUE 24263
24261: GO 24274
24263: POP
// bc_type := b_control_tower ; 25 :
24264: LD_ADDR_OWVAR 42
24268: PUSH
24269: LD_INT 36
24271: ST_TO_ADDR
24272: GO 24465
24274: LD_INT 25
24276: DOUBLE
24277: EQUAL
24278: IFTRUE 24282
24280: GO 24293
24282: POP
// bc_type := b_breastwork ; 26 :
24283: LD_ADDR_OWVAR 42
24287: PUSH
24288: LD_INT 31
24290: ST_TO_ADDR
24291: GO 24465
24293: LD_INT 26
24295: DOUBLE
24296: EQUAL
24297: IFTRUE 24301
24299: GO 24312
24301: POP
// bc_type := b_bunker ; 27 :
24302: LD_ADDR_OWVAR 42
24306: PUSH
24307: LD_INT 32
24309: ST_TO_ADDR
24310: GO 24465
24312: LD_INT 27
24314: DOUBLE
24315: EQUAL
24316: IFTRUE 24320
24318: GO 24331
24320: POP
// bc_type := b_turret ; 28 :
24321: LD_ADDR_OWVAR 42
24325: PUSH
24326: LD_INT 33
24328: ST_TO_ADDR
24329: GO 24465
24331: LD_INT 28
24333: DOUBLE
24334: EQUAL
24335: IFTRUE 24339
24337: GO 24350
24339: POP
// bc_type := b_armoury ; 29 :
24340: LD_ADDR_OWVAR 42
24344: PUSH
24345: LD_INT 4
24347: ST_TO_ADDR
24348: GO 24465
24350: LD_INT 29
24352: DOUBLE
24353: EQUAL
24354: IFTRUE 24358
24356: GO 24369
24358: POP
// bc_type := b_barracks ; 30 :
24359: LD_ADDR_OWVAR 42
24363: PUSH
24364: LD_INT 5
24366: ST_TO_ADDR
24367: GO 24465
24369: LD_INT 30
24371: DOUBLE
24372: EQUAL
24373: IFTRUE 24377
24375: GO 24388
24377: POP
// bc_type := b_solar_power ; 31 :
24378: LD_ADDR_OWVAR 42
24382: PUSH
24383: LD_INT 27
24385: ST_TO_ADDR
24386: GO 24465
24388: LD_INT 31
24390: DOUBLE
24391: EQUAL
24392: IFTRUE 24396
24394: GO 24407
24396: POP
// bc_type := b_oil_power ; 32 :
24397: LD_ADDR_OWVAR 42
24401: PUSH
24402: LD_INT 26
24404: ST_TO_ADDR
24405: GO 24465
24407: LD_INT 32
24409: DOUBLE
24410: EQUAL
24411: IFTRUE 24415
24413: GO 24426
24415: POP
// bc_type := b_siberite_power ; 33 :
24416: LD_ADDR_OWVAR 42
24420: PUSH
24421: LD_INT 28
24423: ST_TO_ADDR
24424: GO 24465
24426: LD_INT 33
24428: DOUBLE
24429: EQUAL
24430: IFTRUE 24434
24432: GO 24445
24434: POP
// bc_type := b_oil_mine ; 34 :
24435: LD_ADDR_OWVAR 42
24439: PUSH
24440: LD_INT 29
24442: ST_TO_ADDR
24443: GO 24465
24445: LD_INT 34
24447: DOUBLE
24448: EQUAL
24449: IFTRUE 24453
24451: GO 24464
24453: POP
// bc_type := b_siberite_mine ; end ;
24454: LD_ADDR_OWVAR 42
24458: PUSH
24459: LD_INT 30
24461: ST_TO_ADDR
24462: GO 24465
24464: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24465: LD_ADDR_VAR 0 8
24469: PUSH
24470: LD_VAR 0 5
24474: PPUSH
24475: LD_VAR 0 6
24479: PPUSH
24480: LD_VAR 0 3
24484: PPUSH
24485: CALL_OW 47
24489: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24490: LD_OWVAR 42
24494: PUSH
24495: LD_INT 32
24497: PUSH
24498: LD_INT 33
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: IN
24505: IFFALSE 24521
// PlaceWeaponTurret ( b , weapon ) ;
24507: LD_VAR 0 8
24511: PPUSH
24512: LD_VAR 0 4
24516: PPUSH
24517: CALL_OW 431
// end ;
24521: LD_VAR 0 7
24525: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24526: LD_INT 0
24528: PPUSH
24529: PPUSH
24530: PPUSH
24531: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24532: LD_ADDR_VAR 0 4
24536: PUSH
24537: LD_INT 22
24539: PUSH
24540: LD_OWVAR 2
24544: PUSH
24545: EMPTY
24546: LIST
24547: LIST
24548: PUSH
24549: LD_INT 2
24551: PUSH
24552: LD_INT 30
24554: PUSH
24555: LD_INT 0
24557: PUSH
24558: EMPTY
24559: LIST
24560: LIST
24561: PUSH
24562: LD_INT 30
24564: PUSH
24565: LD_INT 1
24567: PUSH
24568: EMPTY
24569: LIST
24570: LIST
24571: PUSH
24572: EMPTY
24573: LIST
24574: LIST
24575: LIST
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: PPUSH
24581: CALL_OW 69
24585: ST_TO_ADDR
// if not tmp then
24586: LD_VAR 0 4
24590: NOT
24591: IFFALSE 24595
// exit ;
24593: GO 24654
// for i in tmp do
24595: LD_ADDR_VAR 0 2
24599: PUSH
24600: LD_VAR 0 4
24604: PUSH
24605: FOR_IN
24606: IFFALSE 24652
// for j = 1 to 3 do
24608: LD_ADDR_VAR 0 3
24612: PUSH
24613: DOUBLE
24614: LD_INT 1
24616: DEC
24617: ST_TO_ADDR
24618: LD_INT 3
24620: PUSH
24621: FOR_TO
24622: IFFALSE 24648
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24624: LD_VAR 0 2
24628: PPUSH
24629: CALL_OW 274
24633: PPUSH
24634: LD_VAR 0 3
24638: PPUSH
24639: LD_INT 99999
24641: PPUSH
24642: CALL_OW 277
24646: GO 24621
24648: POP
24649: POP
24650: GO 24605
24652: POP
24653: POP
// end ;
24654: LD_VAR 0 1
24658: RET
// export function hHackSetLevel10 ; var i , j ; begin
24659: LD_INT 0
24661: PPUSH
24662: PPUSH
24663: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24664: LD_ADDR_VAR 0 2
24668: PUSH
24669: LD_INT 21
24671: PUSH
24672: LD_INT 1
24674: PUSH
24675: EMPTY
24676: LIST
24677: LIST
24678: PPUSH
24679: CALL_OW 69
24683: PUSH
24684: FOR_IN
24685: IFFALSE 24737
// if IsSelected ( i ) then
24687: LD_VAR 0 2
24691: PPUSH
24692: CALL_OW 306
24696: IFFALSE 24735
// begin for j := 1 to 4 do
24698: LD_ADDR_VAR 0 3
24702: PUSH
24703: DOUBLE
24704: LD_INT 1
24706: DEC
24707: ST_TO_ADDR
24708: LD_INT 4
24710: PUSH
24711: FOR_TO
24712: IFFALSE 24733
// SetSkill ( i , j , 10 ) ;
24714: LD_VAR 0 2
24718: PPUSH
24719: LD_VAR 0 3
24723: PPUSH
24724: LD_INT 10
24726: PPUSH
24727: CALL_OW 237
24731: GO 24711
24733: POP
24734: POP
// end ;
24735: GO 24684
24737: POP
24738: POP
// end ;
24739: LD_VAR 0 1
24743: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24744: LD_INT 0
24746: PPUSH
24747: PPUSH
24748: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24749: LD_ADDR_VAR 0 2
24753: PUSH
24754: LD_INT 22
24756: PUSH
24757: LD_OWVAR 2
24761: PUSH
24762: EMPTY
24763: LIST
24764: LIST
24765: PUSH
24766: LD_INT 21
24768: PUSH
24769: LD_INT 1
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: PPUSH
24780: CALL_OW 69
24784: PUSH
24785: FOR_IN
24786: IFFALSE 24827
// begin for j := 1 to 4 do
24788: LD_ADDR_VAR 0 3
24792: PUSH
24793: DOUBLE
24794: LD_INT 1
24796: DEC
24797: ST_TO_ADDR
24798: LD_INT 4
24800: PUSH
24801: FOR_TO
24802: IFFALSE 24823
// SetSkill ( i , j , 10 ) ;
24804: LD_VAR 0 2
24808: PPUSH
24809: LD_VAR 0 3
24813: PPUSH
24814: LD_INT 10
24816: PPUSH
24817: CALL_OW 237
24821: GO 24801
24823: POP
24824: POP
// end ;
24825: GO 24785
24827: POP
24828: POP
// end ;
24829: LD_VAR 0 1
24833: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24834: LD_INT 0
24836: PPUSH
// uc_side := your_side ;
24837: LD_ADDR_OWVAR 20
24841: PUSH
24842: LD_OWVAR 2
24846: ST_TO_ADDR
// uc_nation := nation ;
24847: LD_ADDR_OWVAR 21
24851: PUSH
24852: LD_VAR 0 1
24856: ST_TO_ADDR
// InitHc ;
24857: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24861: LD_INT 0
24863: PPUSH
24864: LD_VAR 0 2
24868: PPUSH
24869: LD_VAR 0 3
24873: PPUSH
24874: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24878: LD_VAR 0 4
24882: PPUSH
24883: LD_VAR 0 5
24887: PPUSH
24888: CALL_OW 428
24892: PUSH
24893: LD_INT 0
24895: EQUAL
24896: IFFALSE 24920
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24898: CALL_OW 44
24902: PPUSH
24903: LD_VAR 0 4
24907: PPUSH
24908: LD_VAR 0 5
24912: PPUSH
24913: LD_INT 1
24915: PPUSH
24916: CALL_OW 48
// end ;
24920: LD_VAR 0 6
24924: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24925: LD_INT 0
24927: PPUSH
24928: PPUSH
// uc_side := your_side ;
24929: LD_ADDR_OWVAR 20
24933: PUSH
24934: LD_OWVAR 2
24938: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24939: LD_VAR 0 1
24943: PUSH
24944: LD_INT 1
24946: PUSH
24947: LD_INT 2
24949: PUSH
24950: LD_INT 3
24952: PUSH
24953: LD_INT 4
24955: PUSH
24956: LD_INT 5
24958: PUSH
24959: EMPTY
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: IN
24966: IFFALSE 24978
// uc_nation := nation_american else
24968: LD_ADDR_OWVAR 21
24972: PUSH
24973: LD_INT 1
24975: ST_TO_ADDR
24976: GO 25021
// if chassis in [ 11 , 12 , 13 , 14 ] then
24978: LD_VAR 0 1
24982: PUSH
24983: LD_INT 11
24985: PUSH
24986: LD_INT 12
24988: PUSH
24989: LD_INT 13
24991: PUSH
24992: LD_INT 14
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: IN
25001: IFFALSE 25013
// uc_nation := nation_arabian else
25003: LD_ADDR_OWVAR 21
25007: PUSH
25008: LD_INT 2
25010: ST_TO_ADDR
25011: GO 25021
// uc_nation := nation_russian ;
25013: LD_ADDR_OWVAR 21
25017: PUSH
25018: LD_INT 3
25020: ST_TO_ADDR
// vc_chassis := chassis ;
25021: LD_ADDR_OWVAR 37
25025: PUSH
25026: LD_VAR 0 1
25030: ST_TO_ADDR
// vc_engine := engine ;
25031: LD_ADDR_OWVAR 39
25035: PUSH
25036: LD_VAR 0 2
25040: ST_TO_ADDR
// vc_control := control ;
25041: LD_ADDR_OWVAR 38
25045: PUSH
25046: LD_VAR 0 3
25050: ST_TO_ADDR
// vc_weapon := weapon ;
25051: LD_ADDR_OWVAR 40
25055: PUSH
25056: LD_VAR 0 4
25060: ST_TO_ADDR
// un := CreateVehicle ;
25061: LD_ADDR_VAR 0 8
25065: PUSH
25066: CALL_OW 45
25070: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25071: LD_VAR 0 8
25075: PPUSH
25076: LD_INT 0
25078: PPUSH
25079: LD_INT 5
25081: PPUSH
25082: CALL_OW 12
25086: PPUSH
25087: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25091: LD_VAR 0 8
25095: PPUSH
25096: LD_VAR 0 5
25100: PPUSH
25101: LD_VAR 0 6
25105: PPUSH
25106: LD_INT 1
25108: PPUSH
25109: CALL_OW 48
// end ;
25113: LD_VAR 0 7
25117: RET
// export hInvincible ; every 1 do
25118: GO 25120
25120: DISABLE
// hInvincible := [ ] ;
25121: LD_ADDR_EXP 104
25125: PUSH
25126: EMPTY
25127: ST_TO_ADDR
25128: END
// every 10 do var i ;
25129: GO 25131
25131: DISABLE
25132: LD_INT 0
25134: PPUSH
// begin enable ;
25135: ENABLE
// if not hInvincible then
25136: LD_EXP 104
25140: NOT
25141: IFFALSE 25145
// exit ;
25143: GO 25189
// for i in hInvincible do
25145: LD_ADDR_VAR 0 1
25149: PUSH
25150: LD_EXP 104
25154: PUSH
25155: FOR_IN
25156: IFFALSE 25187
// if GetLives ( i ) < 1000 then
25158: LD_VAR 0 1
25162: PPUSH
25163: CALL_OW 256
25167: PUSH
25168: LD_INT 1000
25170: LESS
25171: IFFALSE 25185
// SetLives ( i , 1000 ) ;
25173: LD_VAR 0 1
25177: PPUSH
25178: LD_INT 1000
25180: PPUSH
25181: CALL_OW 234
25185: GO 25155
25187: POP
25188: POP
// end ;
25189: PPOPN 1
25191: END
// export function hHackInvincible ; var i ; begin
25192: LD_INT 0
25194: PPUSH
25195: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25196: LD_ADDR_VAR 0 2
25200: PUSH
25201: LD_INT 2
25203: PUSH
25204: LD_INT 21
25206: PUSH
25207: LD_INT 1
25209: PUSH
25210: EMPTY
25211: LIST
25212: LIST
25213: PUSH
25214: LD_INT 21
25216: PUSH
25217: LD_INT 2
25219: PUSH
25220: EMPTY
25221: LIST
25222: LIST
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: LIST
25228: PPUSH
25229: CALL_OW 69
25233: PUSH
25234: FOR_IN
25235: IFFALSE 25296
// if IsSelected ( i ) then
25237: LD_VAR 0 2
25241: PPUSH
25242: CALL_OW 306
25246: IFFALSE 25294
// begin if i in hInvincible then
25248: LD_VAR 0 2
25252: PUSH
25253: LD_EXP 104
25257: IN
25258: IFFALSE 25278
// hInvincible := hInvincible diff i else
25260: LD_ADDR_EXP 104
25264: PUSH
25265: LD_EXP 104
25269: PUSH
25270: LD_VAR 0 2
25274: DIFF
25275: ST_TO_ADDR
25276: GO 25294
// hInvincible := hInvincible union i ;
25278: LD_ADDR_EXP 104
25282: PUSH
25283: LD_EXP 104
25287: PUSH
25288: LD_VAR 0 2
25292: UNION
25293: ST_TO_ADDR
// end ;
25294: GO 25234
25296: POP
25297: POP
// end ;
25298: LD_VAR 0 1
25302: RET
// export function hHackInvisible ; var i , j ; begin
25303: LD_INT 0
25305: PPUSH
25306: PPUSH
25307: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25308: LD_ADDR_VAR 0 2
25312: PUSH
25313: LD_INT 21
25315: PUSH
25316: LD_INT 1
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: PPUSH
25323: CALL_OW 69
25327: PUSH
25328: FOR_IN
25329: IFFALSE 25353
// if IsSelected ( i ) then
25331: LD_VAR 0 2
25335: PPUSH
25336: CALL_OW 306
25340: IFFALSE 25351
// ComForceInvisible ( i ) ;
25342: LD_VAR 0 2
25346: PPUSH
25347: CALL_OW 496
25351: GO 25328
25353: POP
25354: POP
// end ;
25355: LD_VAR 0 1
25359: RET
// export function hHackChangeYourSide ; begin
25360: LD_INT 0
25362: PPUSH
// if your_side = 8 then
25363: LD_OWVAR 2
25367: PUSH
25368: LD_INT 8
25370: EQUAL
25371: IFFALSE 25383
// your_side := 0 else
25373: LD_ADDR_OWVAR 2
25377: PUSH
25378: LD_INT 0
25380: ST_TO_ADDR
25381: GO 25397
// your_side := your_side + 1 ;
25383: LD_ADDR_OWVAR 2
25387: PUSH
25388: LD_OWVAR 2
25392: PUSH
25393: LD_INT 1
25395: PLUS
25396: ST_TO_ADDR
// end ;
25397: LD_VAR 0 1
25401: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25402: LD_INT 0
25404: PPUSH
25405: PPUSH
25406: PPUSH
// for i in all_units do
25407: LD_ADDR_VAR 0 2
25411: PUSH
25412: LD_OWVAR 3
25416: PUSH
25417: FOR_IN
25418: IFFALSE 25496
// if IsSelected ( i ) then
25420: LD_VAR 0 2
25424: PPUSH
25425: CALL_OW 306
25429: IFFALSE 25494
// begin j := GetSide ( i ) ;
25431: LD_ADDR_VAR 0 3
25435: PUSH
25436: LD_VAR 0 2
25440: PPUSH
25441: CALL_OW 255
25445: ST_TO_ADDR
// if j = 8 then
25446: LD_VAR 0 3
25450: PUSH
25451: LD_INT 8
25453: EQUAL
25454: IFFALSE 25466
// j := 0 else
25456: LD_ADDR_VAR 0 3
25460: PUSH
25461: LD_INT 0
25463: ST_TO_ADDR
25464: GO 25480
// j := j + 1 ;
25466: LD_ADDR_VAR 0 3
25470: PUSH
25471: LD_VAR 0 3
25475: PUSH
25476: LD_INT 1
25478: PLUS
25479: ST_TO_ADDR
// SetSide ( i , j ) ;
25480: LD_VAR 0 2
25484: PPUSH
25485: LD_VAR 0 3
25489: PPUSH
25490: CALL_OW 235
// end ;
25494: GO 25417
25496: POP
25497: POP
// end ;
25498: LD_VAR 0 1
25502: RET
// export function hHackFog ; begin
25503: LD_INT 0
25505: PPUSH
// FogOff ( true ) ;
25506: LD_INT 1
25508: PPUSH
25509: CALL_OW 344
// end ;
25513: LD_VAR 0 1
25517: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25518: LD_INT 0
25520: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25521: LD_VAR 0 1
25525: PPUSH
25526: LD_VAR 0 2
25530: PPUSH
25531: LD_VAR 0 3
25535: PPUSH
25536: LD_INT 1
25538: PPUSH
25539: LD_INT 1
25541: PPUSH
25542: CALL_OW 483
// CenterOnXY ( x , y ) ;
25546: LD_VAR 0 2
25550: PPUSH
25551: LD_VAR 0 3
25555: PPUSH
25556: CALL_OW 84
// end ; end_of_file
25560: LD_VAR 0 4
25564: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25565: LD_INT 0
25567: PPUSH
25568: PPUSH
25569: PPUSH
25570: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25571: LD_VAR 0 1
25575: PPUSH
25576: CALL_OW 264
25580: PUSH
25581: LD_EXP 36
25585: EQUAL
25586: IFFALSE 25658
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25588: LD_INT 68
25590: PPUSH
25591: LD_VAR 0 1
25595: PPUSH
25596: CALL_OW 255
25600: PPUSH
25601: CALL_OW 321
25605: PUSH
25606: LD_INT 2
25608: EQUAL
25609: IFFALSE 25621
// eff := 70 else
25611: LD_ADDR_VAR 0 4
25615: PUSH
25616: LD_INT 70
25618: ST_TO_ADDR
25619: GO 25629
// eff := 30 ;
25621: LD_ADDR_VAR 0 4
25625: PUSH
25626: LD_INT 30
25628: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25629: LD_VAR 0 1
25633: PPUSH
25634: CALL_OW 250
25638: PPUSH
25639: LD_VAR 0 1
25643: PPUSH
25644: CALL_OW 251
25648: PPUSH
25649: LD_VAR 0 4
25653: PPUSH
25654: CALL_OW 495
// end ; end ;
25658: LD_VAR 0 2
25662: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25663: LD_INT 0
25665: PPUSH
// end ;
25666: LD_VAR 0 4
25670: RET
// export function SOS_Command ( cmd ) ; begin
25671: LD_INT 0
25673: PPUSH
// end ;
25674: LD_VAR 0 2
25678: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25679: LD_INT 0
25681: PPUSH
// if cmd = 121 then
25682: LD_VAR 0 1
25686: PUSH
25687: LD_INT 121
25689: EQUAL
25690: IFFALSE 25692
// end ;
25692: LD_VAR 0 6
25696: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25697: LD_INT 0
25699: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25700: LD_VAR 0 1
25704: PUSH
25705: LD_INT 250
25707: EQUAL
25708: PUSH
25709: LD_VAR 0 2
25713: PPUSH
25714: CALL_OW 264
25718: PUSH
25719: LD_EXP 39
25723: EQUAL
25724: AND
25725: IFFALSE 25746
// MinerPlaceMine ( unit , x , y ) ;
25727: LD_VAR 0 2
25731: PPUSH
25732: LD_VAR 0 4
25736: PPUSH
25737: LD_VAR 0 5
25741: PPUSH
25742: CALL 28095 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
25746: LD_VAR 0 1
25750: PUSH
25751: LD_INT 251
25753: EQUAL
25754: PUSH
25755: LD_VAR 0 2
25759: PPUSH
25760: CALL_OW 264
25764: PUSH
25765: LD_EXP 39
25769: EQUAL
25770: AND
25771: IFFALSE 25792
// MinerDetonateMine ( unit , x , y ) ;
25773: LD_VAR 0 2
25777: PPUSH
25778: LD_VAR 0 4
25782: PPUSH
25783: LD_VAR 0 5
25787: PPUSH
25788: CALL 28372 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
25792: LD_VAR 0 1
25796: PUSH
25797: LD_INT 252
25799: EQUAL
25800: PUSH
25801: LD_VAR 0 2
25805: PPUSH
25806: CALL_OW 264
25810: PUSH
25811: LD_EXP 39
25815: EQUAL
25816: AND
25817: IFFALSE 25838
// MinerCreateMinefield ( unit , x , y ) ;
25819: LD_VAR 0 2
25823: PPUSH
25824: LD_VAR 0 4
25828: PPUSH
25829: LD_VAR 0 5
25833: PPUSH
25834: CALL 28789 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
25838: LD_VAR 0 1
25842: PUSH
25843: LD_INT 253
25845: EQUAL
25846: PUSH
25847: LD_VAR 0 2
25851: PPUSH
25852: CALL_OW 257
25856: PUSH
25857: LD_INT 5
25859: EQUAL
25860: AND
25861: IFFALSE 25882
// ComBinocular ( unit , x , y ) ;
25863: LD_VAR 0 2
25867: PPUSH
25868: LD_VAR 0 4
25872: PPUSH
25873: LD_VAR 0 5
25877: PPUSH
25878: CALL 29160 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25882: LD_VAR 0 1
25886: PUSH
25887: LD_INT 254
25889: EQUAL
25890: PUSH
25891: LD_VAR 0 2
25895: PPUSH
25896: CALL_OW 264
25900: PUSH
25901: LD_EXP 34
25905: EQUAL
25906: AND
25907: PUSH
25908: LD_VAR 0 3
25912: PPUSH
25913: CALL_OW 263
25917: PUSH
25918: LD_INT 3
25920: EQUAL
25921: AND
25922: IFFALSE 25938
// HackDestroyVehicle ( unit , selectedUnit ) ;
25924: LD_VAR 0 2
25928: PPUSH
25929: LD_VAR 0 3
25933: PPUSH
25934: CALL 27455 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25938: LD_VAR 0 1
25942: PUSH
25943: LD_INT 255
25945: EQUAL
25946: PUSH
25947: LD_VAR 0 2
25951: PPUSH
25952: CALL_OW 264
25956: PUSH
25957: LD_INT 14
25959: PUSH
25960: LD_INT 53
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: IN
25967: AND
25968: PUSH
25969: LD_VAR 0 4
25973: PPUSH
25974: LD_VAR 0 5
25978: PPUSH
25979: CALL_OW 488
25983: AND
25984: IFFALSE 26008
// CutTreeXYR ( unit , x , y , 12 ) ;
25986: LD_VAR 0 2
25990: PPUSH
25991: LD_VAR 0 4
25995: PPUSH
25996: LD_VAR 0 5
26000: PPUSH
26001: LD_INT 12
26003: PPUSH
26004: CALL 26021 0 4
// end ;
26008: LD_VAR 0 6
26012: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
26013: LD_INT 0
26015: PPUSH
// end ;
26016: LD_VAR 0 4
26020: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26021: LD_INT 0
26023: PPUSH
26024: PPUSH
26025: PPUSH
26026: PPUSH
26027: PPUSH
26028: PPUSH
26029: PPUSH
26030: PPUSH
26031: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26032: LD_VAR 0 1
26036: NOT
26037: PUSH
26038: LD_VAR 0 2
26042: PPUSH
26043: LD_VAR 0 3
26047: PPUSH
26048: CALL_OW 488
26052: NOT
26053: OR
26054: PUSH
26055: LD_VAR 0 4
26059: NOT
26060: OR
26061: IFFALSE 26065
// exit ;
26063: GO 26405
// list := [ ] ;
26065: LD_ADDR_VAR 0 13
26069: PUSH
26070: EMPTY
26071: ST_TO_ADDR
// if x - r < 0 then
26072: LD_VAR 0 2
26076: PUSH
26077: LD_VAR 0 4
26081: MINUS
26082: PUSH
26083: LD_INT 0
26085: LESS
26086: IFFALSE 26098
// min_x := 0 else
26088: LD_ADDR_VAR 0 7
26092: PUSH
26093: LD_INT 0
26095: ST_TO_ADDR
26096: GO 26114
// min_x := x - r ;
26098: LD_ADDR_VAR 0 7
26102: PUSH
26103: LD_VAR 0 2
26107: PUSH
26108: LD_VAR 0 4
26112: MINUS
26113: ST_TO_ADDR
// if y - r < 0 then
26114: LD_VAR 0 3
26118: PUSH
26119: LD_VAR 0 4
26123: MINUS
26124: PUSH
26125: LD_INT 0
26127: LESS
26128: IFFALSE 26140
// min_y := 0 else
26130: LD_ADDR_VAR 0 8
26134: PUSH
26135: LD_INT 0
26137: ST_TO_ADDR
26138: GO 26156
// min_y := y - r ;
26140: LD_ADDR_VAR 0 8
26144: PUSH
26145: LD_VAR 0 3
26149: PUSH
26150: LD_VAR 0 4
26154: MINUS
26155: ST_TO_ADDR
// max_x := x + r ;
26156: LD_ADDR_VAR 0 9
26160: PUSH
26161: LD_VAR 0 2
26165: PUSH
26166: LD_VAR 0 4
26170: PLUS
26171: ST_TO_ADDR
// max_y := y + r ;
26172: LD_ADDR_VAR 0 10
26176: PUSH
26177: LD_VAR 0 3
26181: PUSH
26182: LD_VAR 0 4
26186: PLUS
26187: ST_TO_ADDR
// for _x = min_x to max_x do
26188: LD_ADDR_VAR 0 11
26192: PUSH
26193: DOUBLE
26194: LD_VAR 0 7
26198: DEC
26199: ST_TO_ADDR
26200: LD_VAR 0 9
26204: PUSH
26205: FOR_TO
26206: IFFALSE 26323
// for _y = min_y to max_y do
26208: LD_ADDR_VAR 0 12
26212: PUSH
26213: DOUBLE
26214: LD_VAR 0 8
26218: DEC
26219: ST_TO_ADDR
26220: LD_VAR 0 10
26224: PUSH
26225: FOR_TO
26226: IFFALSE 26319
// begin if not ValidHex ( _x , _y ) then
26228: LD_VAR 0 11
26232: PPUSH
26233: LD_VAR 0 12
26237: PPUSH
26238: CALL_OW 488
26242: NOT
26243: IFFALSE 26247
// continue ;
26245: GO 26225
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26247: LD_VAR 0 11
26251: PPUSH
26252: LD_VAR 0 12
26256: PPUSH
26257: CALL_OW 351
26261: PUSH
26262: LD_VAR 0 11
26266: PPUSH
26267: LD_VAR 0 12
26271: PPUSH
26272: CALL_OW 554
26276: AND
26277: IFFALSE 26317
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26279: LD_ADDR_VAR 0 13
26283: PUSH
26284: LD_VAR 0 13
26288: PPUSH
26289: LD_VAR 0 13
26293: PUSH
26294: LD_INT 1
26296: PLUS
26297: PPUSH
26298: LD_VAR 0 11
26302: PUSH
26303: LD_VAR 0 12
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: PPUSH
26312: CALL_OW 2
26316: ST_TO_ADDR
// end ;
26317: GO 26225
26319: POP
26320: POP
26321: GO 26205
26323: POP
26324: POP
// if not list then
26325: LD_VAR 0 13
26329: NOT
26330: IFFALSE 26334
// exit ;
26332: GO 26405
// for i in list do
26334: LD_ADDR_VAR 0 6
26338: PUSH
26339: LD_VAR 0 13
26343: PUSH
26344: FOR_IN
26345: IFFALSE 26403
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26347: LD_VAR 0 1
26351: PPUSH
26352: LD_STRING M
26354: PUSH
26355: LD_VAR 0 6
26359: PUSH
26360: LD_INT 1
26362: ARRAY
26363: PUSH
26364: LD_VAR 0 6
26368: PUSH
26369: LD_INT 2
26371: ARRAY
26372: PUSH
26373: LD_INT 0
26375: PUSH
26376: LD_INT 0
26378: PUSH
26379: LD_INT 0
26381: PUSH
26382: LD_INT 0
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: PUSH
26394: EMPTY
26395: LIST
26396: PPUSH
26397: CALL_OW 447
26401: GO 26344
26403: POP
26404: POP
// end ;
26405: LD_VAR 0 5
26409: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26410: LD_EXP 107
26414: NOT
26415: IFFALSE 26465
26417: GO 26419
26419: DISABLE
// begin initHack := true ;
26420: LD_ADDR_EXP 107
26424: PUSH
26425: LD_INT 1
26427: ST_TO_ADDR
// hackTanks := [ ] ;
26428: LD_ADDR_EXP 108
26432: PUSH
26433: EMPTY
26434: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26435: LD_ADDR_EXP 109
26439: PUSH
26440: EMPTY
26441: ST_TO_ADDR
// hackLimit := 3 ;
26442: LD_ADDR_EXP 110
26446: PUSH
26447: LD_INT 3
26449: ST_TO_ADDR
// hackDist := 12 ;
26450: LD_ADDR_EXP 111
26454: PUSH
26455: LD_INT 12
26457: ST_TO_ADDR
// hackCounter := [ ] ;
26458: LD_ADDR_EXP 112
26462: PUSH
26463: EMPTY
26464: ST_TO_ADDR
// end ;
26465: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26466: LD_EXP 107
26470: PUSH
26471: LD_INT 34
26473: PUSH
26474: LD_EXP 34
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PPUSH
26483: CALL_OW 69
26487: AND
26488: IFFALSE 26743
26490: GO 26492
26492: DISABLE
26493: LD_INT 0
26495: PPUSH
26496: PPUSH
// begin enable ;
26497: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26498: LD_ADDR_VAR 0 1
26502: PUSH
26503: LD_INT 34
26505: PUSH
26506: LD_EXP 34
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: PPUSH
26515: CALL_OW 69
26519: PUSH
26520: FOR_IN
26521: IFFALSE 26741
// begin if not i in hackTanks then
26523: LD_VAR 0 1
26527: PUSH
26528: LD_EXP 108
26532: IN
26533: NOT
26534: IFFALSE 26617
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26536: LD_ADDR_EXP 108
26540: PUSH
26541: LD_EXP 108
26545: PPUSH
26546: LD_EXP 108
26550: PUSH
26551: LD_INT 1
26553: PLUS
26554: PPUSH
26555: LD_VAR 0 1
26559: PPUSH
26560: CALL_OW 1
26564: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26565: LD_ADDR_EXP 109
26569: PUSH
26570: LD_EXP 109
26574: PPUSH
26575: LD_EXP 109
26579: PUSH
26580: LD_INT 1
26582: PLUS
26583: PPUSH
26584: EMPTY
26585: PPUSH
26586: CALL_OW 1
26590: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26591: LD_ADDR_EXP 112
26595: PUSH
26596: LD_EXP 112
26600: PPUSH
26601: LD_EXP 112
26605: PUSH
26606: LD_INT 1
26608: PLUS
26609: PPUSH
26610: EMPTY
26611: PPUSH
26612: CALL_OW 1
26616: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26617: LD_VAR 0 1
26621: PPUSH
26622: CALL_OW 302
26626: NOT
26627: IFFALSE 26640
// begin HackUnlinkAll ( i ) ;
26629: LD_VAR 0 1
26633: PPUSH
26634: CALL 26746 0 1
// continue ;
26638: GO 26520
// end ; HackCheckCapturedStatus ( i ) ;
26640: LD_VAR 0 1
26644: PPUSH
26645: CALL 27189 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26649: LD_ADDR_VAR 0 2
26653: PUSH
26654: LD_INT 81
26656: PUSH
26657: LD_VAR 0 1
26661: PPUSH
26662: CALL_OW 255
26666: PUSH
26667: EMPTY
26668: LIST
26669: LIST
26670: PUSH
26671: LD_INT 33
26673: PUSH
26674: LD_INT 3
26676: PUSH
26677: EMPTY
26678: LIST
26679: LIST
26680: PUSH
26681: LD_INT 91
26683: PUSH
26684: LD_VAR 0 1
26688: PUSH
26689: LD_EXP 111
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: LIST
26698: PUSH
26699: LD_INT 50
26701: PUSH
26702: EMPTY
26703: LIST
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: PPUSH
26711: CALL_OW 69
26715: ST_TO_ADDR
// if not tmp then
26716: LD_VAR 0 2
26720: NOT
26721: IFFALSE 26725
// continue ;
26723: GO 26520
// HackLink ( i , tmp ) ;
26725: LD_VAR 0 1
26729: PPUSH
26730: LD_VAR 0 2
26734: PPUSH
26735: CALL 26882 0 2
// end ;
26739: GO 26520
26741: POP
26742: POP
// end ;
26743: PPOPN 2
26745: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
26746: LD_INT 0
26748: PPUSH
26749: PPUSH
26750: PPUSH
// if not hack in hackTanks then
26751: LD_VAR 0 1
26755: PUSH
26756: LD_EXP 108
26760: IN
26761: NOT
26762: IFFALSE 26766
// exit ;
26764: GO 26877
// index := GetElementIndex ( hackTanks , hack ) ;
26766: LD_ADDR_VAR 0 4
26770: PUSH
26771: LD_EXP 108
26775: PPUSH
26776: LD_VAR 0 1
26780: PPUSH
26781: CALL 34311 0 2
26785: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
26786: LD_EXP 109
26790: PUSH
26791: LD_VAR 0 4
26795: ARRAY
26796: IFFALSE 26877
// begin for i in hackTanksCaptured [ index ] do
26798: LD_ADDR_VAR 0 3
26802: PUSH
26803: LD_EXP 109
26807: PUSH
26808: LD_VAR 0 4
26812: ARRAY
26813: PUSH
26814: FOR_IN
26815: IFFALSE 26841
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26817: LD_VAR 0 3
26821: PUSH
26822: LD_INT 1
26824: ARRAY
26825: PPUSH
26826: LD_VAR 0 3
26830: PUSH
26831: LD_INT 2
26833: ARRAY
26834: PPUSH
26835: CALL_OW 235
26839: GO 26814
26841: POP
26842: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26843: LD_ADDR_EXP 109
26847: PUSH
26848: LD_EXP 109
26852: PPUSH
26853: LD_VAR 0 4
26857: PPUSH
26858: EMPTY
26859: PPUSH
26860: CALL_OW 1
26864: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26865: LD_VAR 0 1
26869: PPUSH
26870: LD_INT 0
26872: PPUSH
26873: CALL_OW 505
// end ; end ;
26877: LD_VAR 0 2
26881: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26882: LD_INT 0
26884: PPUSH
26885: PPUSH
26886: PPUSH
// if not hack in hackTanks or not vehicles then
26887: LD_VAR 0 1
26891: PUSH
26892: LD_EXP 108
26896: IN
26897: NOT
26898: PUSH
26899: LD_VAR 0 2
26903: NOT
26904: OR
26905: IFFALSE 26909
// exit ;
26907: GO 27184
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26909: LD_ADDR_VAR 0 2
26913: PUSH
26914: LD_VAR 0 1
26918: PPUSH
26919: LD_VAR 0 2
26923: PPUSH
26924: LD_INT 1
26926: PPUSH
26927: LD_INT 1
26929: PPUSH
26930: CALL 34961 0 4
26934: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26935: LD_ADDR_VAR 0 5
26939: PUSH
26940: LD_EXP 108
26944: PPUSH
26945: LD_VAR 0 1
26949: PPUSH
26950: CALL 34311 0 2
26954: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26955: LD_EXP 109
26959: PUSH
26960: LD_VAR 0 5
26964: ARRAY
26965: PUSH
26966: LD_EXP 110
26970: LESS
26971: IFFALSE 27160
// begin for i := 1 to vehicles do
26973: LD_ADDR_VAR 0 4
26977: PUSH
26978: DOUBLE
26979: LD_INT 1
26981: DEC
26982: ST_TO_ADDR
26983: LD_VAR 0 2
26987: PUSH
26988: FOR_TO
26989: IFFALSE 27158
// begin if hackTanksCaptured [ index ] = hackLimit then
26991: LD_EXP 109
26995: PUSH
26996: LD_VAR 0 5
27000: ARRAY
27001: PUSH
27002: LD_EXP 110
27006: EQUAL
27007: IFFALSE 27011
// break ;
27009: GO 27158
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27011: LD_ADDR_EXP 112
27015: PUSH
27016: LD_EXP 112
27020: PPUSH
27021: LD_VAR 0 5
27025: PPUSH
27026: LD_EXP 112
27030: PUSH
27031: LD_VAR 0 5
27035: ARRAY
27036: PUSH
27037: LD_INT 1
27039: PLUS
27040: PPUSH
27041: CALL_OW 1
27045: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27046: LD_ADDR_EXP 109
27050: PUSH
27051: LD_EXP 109
27055: PPUSH
27056: LD_VAR 0 5
27060: PUSH
27061: LD_EXP 109
27065: PUSH
27066: LD_VAR 0 5
27070: ARRAY
27071: PUSH
27072: LD_INT 1
27074: PLUS
27075: PUSH
27076: EMPTY
27077: LIST
27078: LIST
27079: PPUSH
27080: LD_VAR 0 2
27084: PUSH
27085: LD_VAR 0 4
27089: ARRAY
27090: PUSH
27091: LD_VAR 0 2
27095: PUSH
27096: LD_VAR 0 4
27100: ARRAY
27101: PPUSH
27102: CALL_OW 255
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: PPUSH
27111: CALL 34526 0 3
27115: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27116: LD_VAR 0 2
27120: PUSH
27121: LD_VAR 0 4
27125: ARRAY
27126: PPUSH
27127: LD_VAR 0 1
27131: PPUSH
27132: CALL_OW 255
27136: PPUSH
27137: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27141: LD_VAR 0 2
27145: PUSH
27146: LD_VAR 0 4
27150: ARRAY
27151: PPUSH
27152: CALL_OW 141
// end ;
27156: GO 26988
27158: POP
27159: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27160: LD_VAR 0 1
27164: PPUSH
27165: LD_EXP 109
27169: PUSH
27170: LD_VAR 0 5
27174: ARRAY
27175: PUSH
27176: LD_INT 0
27178: PLUS
27179: PPUSH
27180: CALL_OW 505
// end ;
27184: LD_VAR 0 3
27188: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27189: LD_INT 0
27191: PPUSH
27192: PPUSH
27193: PPUSH
27194: PPUSH
// if not hack in hackTanks then
27195: LD_VAR 0 1
27199: PUSH
27200: LD_EXP 108
27204: IN
27205: NOT
27206: IFFALSE 27210
// exit ;
27208: GO 27450
// index := GetElementIndex ( hackTanks , hack ) ;
27210: LD_ADDR_VAR 0 4
27214: PUSH
27215: LD_EXP 108
27219: PPUSH
27220: LD_VAR 0 1
27224: PPUSH
27225: CALL 34311 0 2
27229: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27230: LD_ADDR_VAR 0 3
27234: PUSH
27235: DOUBLE
27236: LD_EXP 109
27240: PUSH
27241: LD_VAR 0 4
27245: ARRAY
27246: INC
27247: ST_TO_ADDR
27248: LD_INT 1
27250: PUSH
27251: FOR_DOWNTO
27252: IFFALSE 27424
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27254: LD_ADDR_VAR 0 5
27258: PUSH
27259: LD_EXP 109
27263: PUSH
27264: LD_VAR 0 4
27268: ARRAY
27269: PUSH
27270: LD_VAR 0 3
27274: ARRAY
27275: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27276: LD_VAR 0 5
27280: PUSH
27281: LD_INT 1
27283: ARRAY
27284: PPUSH
27285: CALL_OW 302
27289: NOT
27290: PUSH
27291: LD_VAR 0 5
27295: PUSH
27296: LD_INT 1
27298: ARRAY
27299: PPUSH
27300: CALL_OW 255
27304: PUSH
27305: LD_VAR 0 1
27309: PPUSH
27310: CALL_OW 255
27314: NONEQUAL
27315: OR
27316: IFFALSE 27422
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27318: LD_VAR 0 5
27322: PUSH
27323: LD_INT 1
27325: ARRAY
27326: PPUSH
27327: CALL_OW 305
27331: PUSH
27332: LD_VAR 0 5
27336: PUSH
27337: LD_INT 1
27339: ARRAY
27340: PPUSH
27341: CALL_OW 255
27345: PUSH
27346: LD_VAR 0 1
27350: PPUSH
27351: CALL_OW 255
27355: EQUAL
27356: AND
27357: IFFALSE 27381
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27359: LD_VAR 0 5
27363: PUSH
27364: LD_INT 1
27366: ARRAY
27367: PPUSH
27368: LD_VAR 0 5
27372: PUSH
27373: LD_INT 2
27375: ARRAY
27376: PPUSH
27377: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27381: LD_ADDR_EXP 109
27385: PUSH
27386: LD_EXP 109
27390: PPUSH
27391: LD_VAR 0 4
27395: PPUSH
27396: LD_EXP 109
27400: PUSH
27401: LD_VAR 0 4
27405: ARRAY
27406: PPUSH
27407: LD_VAR 0 3
27411: PPUSH
27412: CALL_OW 3
27416: PPUSH
27417: CALL_OW 1
27421: ST_TO_ADDR
// end ; end ;
27422: GO 27251
27424: POP
27425: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27426: LD_VAR 0 1
27430: PPUSH
27431: LD_EXP 109
27435: PUSH
27436: LD_VAR 0 4
27440: ARRAY
27441: PUSH
27442: LD_INT 0
27444: PLUS
27445: PPUSH
27446: CALL_OW 505
// end ;
27450: LD_VAR 0 2
27454: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27455: LD_INT 0
27457: PPUSH
27458: PPUSH
27459: PPUSH
27460: PPUSH
// if not hack in hackTanks then
27461: LD_VAR 0 1
27465: PUSH
27466: LD_EXP 108
27470: IN
27471: NOT
27472: IFFALSE 27476
// exit ;
27474: GO 27561
// index := GetElementIndex ( hackTanks , hack ) ;
27476: LD_ADDR_VAR 0 5
27480: PUSH
27481: LD_EXP 108
27485: PPUSH
27486: LD_VAR 0 1
27490: PPUSH
27491: CALL 34311 0 2
27495: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27496: LD_ADDR_VAR 0 4
27500: PUSH
27501: DOUBLE
27502: LD_INT 1
27504: DEC
27505: ST_TO_ADDR
27506: LD_EXP 109
27510: PUSH
27511: LD_VAR 0 5
27515: ARRAY
27516: PUSH
27517: FOR_TO
27518: IFFALSE 27559
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27520: LD_EXP 109
27524: PUSH
27525: LD_VAR 0 5
27529: ARRAY
27530: PUSH
27531: LD_VAR 0 4
27535: ARRAY
27536: PUSH
27537: LD_INT 1
27539: ARRAY
27540: PUSH
27541: LD_VAR 0 2
27545: EQUAL
27546: IFFALSE 27557
// KillUnit ( vehicle ) ;
27548: LD_VAR 0 2
27552: PPUSH
27553: CALL_OW 66
27557: GO 27517
27559: POP
27560: POP
// end ;
27561: LD_VAR 0 3
27565: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
27566: LD_EXP 113
27570: NOT
27571: IFFALSE 27606
27573: GO 27575
27575: DISABLE
// begin initMiner := true ;
27576: LD_ADDR_EXP 113
27580: PUSH
27581: LD_INT 1
27583: ST_TO_ADDR
// minersList := [ ] ;
27584: LD_ADDR_EXP 114
27588: PUSH
27589: EMPTY
27590: ST_TO_ADDR
// minerMinesList := [ ] ;
27591: LD_ADDR_EXP 115
27595: PUSH
27596: EMPTY
27597: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
27598: LD_ADDR_EXP 116
27602: PUSH
27603: LD_INT 5
27605: ST_TO_ADDR
// end ;
27606: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
27607: LD_EXP 113
27611: PUSH
27612: LD_INT 34
27614: PUSH
27615: LD_EXP 39
27619: PUSH
27620: EMPTY
27621: LIST
27622: LIST
27623: PPUSH
27624: CALL_OW 69
27628: AND
27629: IFFALSE 28092
27631: GO 27633
27633: DISABLE
27634: LD_INT 0
27636: PPUSH
27637: PPUSH
27638: PPUSH
27639: PPUSH
// begin enable ;
27640: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
27641: LD_ADDR_VAR 0 1
27645: PUSH
27646: LD_INT 34
27648: PUSH
27649: LD_EXP 39
27653: PUSH
27654: EMPTY
27655: LIST
27656: LIST
27657: PPUSH
27658: CALL_OW 69
27662: PUSH
27663: FOR_IN
27664: IFFALSE 27736
// begin if not i in minersList then
27666: LD_VAR 0 1
27670: PUSH
27671: LD_EXP 114
27675: IN
27676: NOT
27677: IFFALSE 27734
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
27679: LD_ADDR_EXP 114
27683: PUSH
27684: LD_EXP 114
27688: PPUSH
27689: LD_EXP 114
27693: PUSH
27694: LD_INT 1
27696: PLUS
27697: PPUSH
27698: LD_VAR 0 1
27702: PPUSH
27703: CALL_OW 1
27707: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27708: LD_ADDR_EXP 115
27712: PUSH
27713: LD_EXP 115
27717: PPUSH
27718: LD_EXP 115
27722: PUSH
27723: LD_INT 1
27725: PLUS
27726: PPUSH
27727: EMPTY
27728: PPUSH
27729: CALL_OW 1
27733: ST_TO_ADDR
// end end ;
27734: GO 27663
27736: POP
27737: POP
// for i := minerMinesList downto 1 do
27738: LD_ADDR_VAR 0 1
27742: PUSH
27743: DOUBLE
27744: LD_EXP 115
27748: INC
27749: ST_TO_ADDR
27750: LD_INT 1
27752: PUSH
27753: FOR_DOWNTO
27754: IFFALSE 28090
// begin if IsLive ( minersList [ i ] ) then
27756: LD_EXP 114
27760: PUSH
27761: LD_VAR 0 1
27765: ARRAY
27766: PPUSH
27767: CALL_OW 300
27771: IFFALSE 27799
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
27773: LD_EXP 114
27777: PUSH
27778: LD_VAR 0 1
27782: ARRAY
27783: PPUSH
27784: LD_EXP 115
27788: PUSH
27789: LD_VAR 0 1
27793: ARRAY
27794: PPUSH
27795: CALL_OW 505
// if not minerMinesList [ i ] then
27799: LD_EXP 115
27803: PUSH
27804: LD_VAR 0 1
27808: ARRAY
27809: NOT
27810: IFFALSE 27814
// continue ;
27812: GO 27753
// for j := minerMinesList [ i ] downto 1 do
27814: LD_ADDR_VAR 0 2
27818: PUSH
27819: DOUBLE
27820: LD_EXP 115
27824: PUSH
27825: LD_VAR 0 1
27829: ARRAY
27830: INC
27831: ST_TO_ADDR
27832: LD_INT 1
27834: PUSH
27835: FOR_DOWNTO
27836: IFFALSE 28086
// begin side := GetSide ( minersList [ i ] ) ;
27838: LD_ADDR_VAR 0 3
27842: PUSH
27843: LD_EXP 114
27847: PUSH
27848: LD_VAR 0 1
27852: ARRAY
27853: PPUSH
27854: CALL_OW 255
27858: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27859: LD_ADDR_VAR 0 4
27863: PUSH
27864: LD_EXP 115
27868: PUSH
27869: LD_VAR 0 1
27873: ARRAY
27874: PUSH
27875: LD_VAR 0 2
27879: ARRAY
27880: PUSH
27881: LD_INT 1
27883: ARRAY
27884: PPUSH
27885: LD_EXP 115
27889: PUSH
27890: LD_VAR 0 1
27894: ARRAY
27895: PUSH
27896: LD_VAR 0 2
27900: ARRAY
27901: PUSH
27902: LD_INT 2
27904: ARRAY
27905: PPUSH
27906: CALL_OW 428
27910: ST_TO_ADDR
// if not tmp then
27911: LD_VAR 0 4
27915: NOT
27916: IFFALSE 27920
// continue ;
27918: GO 27835
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27920: LD_VAR 0 4
27924: PUSH
27925: LD_INT 81
27927: PUSH
27928: LD_VAR 0 3
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PPUSH
27937: CALL_OW 69
27941: IN
27942: PUSH
27943: LD_EXP 115
27947: PUSH
27948: LD_VAR 0 1
27952: ARRAY
27953: PUSH
27954: LD_VAR 0 2
27958: ARRAY
27959: PUSH
27960: LD_INT 1
27962: ARRAY
27963: PPUSH
27964: LD_EXP 115
27968: PUSH
27969: LD_VAR 0 1
27973: ARRAY
27974: PUSH
27975: LD_VAR 0 2
27979: ARRAY
27980: PUSH
27981: LD_INT 2
27983: ARRAY
27984: PPUSH
27985: CALL_OW 458
27989: AND
27990: IFFALSE 28084
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27992: LD_EXP 115
27996: PUSH
27997: LD_VAR 0 1
28001: ARRAY
28002: PUSH
28003: LD_VAR 0 2
28007: ARRAY
28008: PUSH
28009: LD_INT 1
28011: ARRAY
28012: PPUSH
28013: LD_EXP 115
28017: PUSH
28018: LD_VAR 0 1
28022: ARRAY
28023: PUSH
28024: LD_VAR 0 2
28028: ARRAY
28029: PUSH
28030: LD_INT 2
28032: ARRAY
28033: PPUSH
28034: LD_VAR 0 3
28038: PPUSH
28039: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28043: LD_ADDR_EXP 115
28047: PUSH
28048: LD_EXP 115
28052: PPUSH
28053: LD_VAR 0 1
28057: PPUSH
28058: LD_EXP 115
28062: PUSH
28063: LD_VAR 0 1
28067: ARRAY
28068: PPUSH
28069: LD_VAR 0 2
28073: PPUSH
28074: CALL_OW 3
28078: PPUSH
28079: CALL_OW 1
28083: ST_TO_ADDR
// end ; end ;
28084: GO 27835
28086: POP
28087: POP
// end ;
28088: GO 27753
28090: POP
28091: POP
// end ;
28092: PPOPN 4
28094: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28095: LD_INT 0
28097: PPUSH
28098: PPUSH
// result := false ;
28099: LD_ADDR_VAR 0 4
28103: PUSH
28104: LD_INT 0
28106: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28107: LD_VAR 0 1
28111: PPUSH
28112: CALL_OW 264
28116: PUSH
28117: LD_EXP 39
28121: EQUAL
28122: NOT
28123: IFFALSE 28127
// exit ;
28125: GO 28367
// index := GetElementIndex ( minersList , unit ) ;
28127: LD_ADDR_VAR 0 5
28131: PUSH
28132: LD_EXP 114
28136: PPUSH
28137: LD_VAR 0 1
28141: PPUSH
28142: CALL 34311 0 2
28146: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28147: LD_EXP 115
28151: PUSH
28152: LD_VAR 0 5
28156: ARRAY
28157: PUSH
28158: LD_EXP 116
28162: GREATEREQUAL
28163: IFFALSE 28167
// exit ;
28165: GO 28367
// ComMoveXY ( unit , x , y ) ;
28167: LD_VAR 0 1
28171: PPUSH
28172: LD_VAR 0 2
28176: PPUSH
28177: LD_VAR 0 3
28181: PPUSH
28182: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28186: LD_INT 35
28188: PPUSH
28189: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28193: LD_VAR 0 1
28197: PPUSH
28198: LD_VAR 0 2
28202: PPUSH
28203: LD_VAR 0 3
28207: PPUSH
28208: CALL 64708 0 3
28212: NOT
28213: PUSH
28214: LD_VAR 0 1
28218: PPUSH
28219: CALL_OW 314
28223: AND
28224: IFFALSE 28228
// exit ;
28226: GO 28367
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28228: LD_VAR 0 2
28232: PPUSH
28233: LD_VAR 0 3
28237: PPUSH
28238: CALL_OW 428
28242: PUSH
28243: LD_VAR 0 1
28247: EQUAL
28248: PUSH
28249: LD_VAR 0 1
28253: PPUSH
28254: CALL_OW 314
28258: NOT
28259: AND
28260: IFFALSE 28186
// PlaySoundXY ( x , y , PlantMine ) ;
28262: LD_VAR 0 2
28266: PPUSH
28267: LD_VAR 0 3
28271: PPUSH
28272: LD_STRING PlantMine
28274: PPUSH
28275: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28279: LD_VAR 0 2
28283: PPUSH
28284: LD_VAR 0 3
28288: PPUSH
28289: LD_VAR 0 1
28293: PPUSH
28294: CALL_OW 255
28298: PPUSH
28299: LD_INT 0
28301: PPUSH
28302: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28306: LD_ADDR_EXP 115
28310: PUSH
28311: LD_EXP 115
28315: PPUSH
28316: LD_VAR 0 5
28320: PUSH
28321: LD_EXP 115
28325: PUSH
28326: LD_VAR 0 5
28330: ARRAY
28331: PUSH
28332: LD_INT 1
28334: PLUS
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: PPUSH
28340: LD_VAR 0 2
28344: PUSH
28345: LD_VAR 0 3
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: PPUSH
28354: CALL 34526 0 3
28358: ST_TO_ADDR
// result := true ;
28359: LD_ADDR_VAR 0 4
28363: PUSH
28364: LD_INT 1
28366: ST_TO_ADDR
// end ;
28367: LD_VAR 0 4
28371: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28372: LD_INT 0
28374: PPUSH
28375: PPUSH
28376: PPUSH
// if not unit in minersList then
28377: LD_VAR 0 1
28381: PUSH
28382: LD_EXP 114
28386: IN
28387: NOT
28388: IFFALSE 28392
// exit ;
28390: GO 28784
// index := GetElementIndex ( minersList , unit ) ;
28392: LD_ADDR_VAR 0 6
28396: PUSH
28397: LD_EXP 114
28401: PPUSH
28402: LD_VAR 0 1
28406: PPUSH
28407: CALL 34311 0 2
28411: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28412: LD_ADDR_VAR 0 5
28416: PUSH
28417: DOUBLE
28418: LD_EXP 115
28422: PUSH
28423: LD_VAR 0 6
28427: ARRAY
28428: INC
28429: ST_TO_ADDR
28430: LD_INT 1
28432: PUSH
28433: FOR_DOWNTO
28434: IFFALSE 28595
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28436: LD_EXP 115
28440: PUSH
28441: LD_VAR 0 6
28445: ARRAY
28446: PUSH
28447: LD_VAR 0 5
28451: ARRAY
28452: PUSH
28453: LD_INT 1
28455: ARRAY
28456: PUSH
28457: LD_VAR 0 2
28461: EQUAL
28462: PUSH
28463: LD_EXP 115
28467: PUSH
28468: LD_VAR 0 6
28472: ARRAY
28473: PUSH
28474: LD_VAR 0 5
28478: ARRAY
28479: PUSH
28480: LD_INT 2
28482: ARRAY
28483: PUSH
28484: LD_VAR 0 3
28488: EQUAL
28489: AND
28490: IFFALSE 28593
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28492: LD_EXP 115
28496: PUSH
28497: LD_VAR 0 6
28501: ARRAY
28502: PUSH
28503: LD_VAR 0 5
28507: ARRAY
28508: PUSH
28509: LD_INT 1
28511: ARRAY
28512: PPUSH
28513: LD_EXP 115
28517: PUSH
28518: LD_VAR 0 6
28522: ARRAY
28523: PUSH
28524: LD_VAR 0 5
28528: ARRAY
28529: PUSH
28530: LD_INT 2
28532: ARRAY
28533: PPUSH
28534: LD_VAR 0 1
28538: PPUSH
28539: CALL_OW 255
28543: PPUSH
28544: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28548: LD_ADDR_EXP 115
28552: PUSH
28553: LD_EXP 115
28557: PPUSH
28558: LD_VAR 0 6
28562: PPUSH
28563: LD_EXP 115
28567: PUSH
28568: LD_VAR 0 6
28572: ARRAY
28573: PPUSH
28574: LD_VAR 0 5
28578: PPUSH
28579: CALL_OW 3
28583: PPUSH
28584: CALL_OW 1
28588: ST_TO_ADDR
// exit ;
28589: POP
28590: POP
28591: GO 28784
// end ; end ;
28593: GO 28433
28595: POP
28596: POP
// for i := minerMinesList [ index ] downto 1 do
28597: LD_ADDR_VAR 0 5
28601: PUSH
28602: DOUBLE
28603: LD_EXP 115
28607: PUSH
28608: LD_VAR 0 6
28612: ARRAY
28613: INC
28614: ST_TO_ADDR
28615: LD_INT 1
28617: PUSH
28618: FOR_DOWNTO
28619: IFFALSE 28782
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
28621: LD_EXP 115
28625: PUSH
28626: LD_VAR 0 6
28630: ARRAY
28631: PUSH
28632: LD_VAR 0 5
28636: ARRAY
28637: PUSH
28638: LD_INT 1
28640: ARRAY
28641: PPUSH
28642: LD_EXP 115
28646: PUSH
28647: LD_VAR 0 6
28651: ARRAY
28652: PUSH
28653: LD_VAR 0 5
28657: ARRAY
28658: PUSH
28659: LD_INT 2
28661: ARRAY
28662: PPUSH
28663: LD_VAR 0 2
28667: PPUSH
28668: LD_VAR 0 3
28672: PPUSH
28673: CALL_OW 298
28677: PUSH
28678: LD_INT 6
28680: LESS
28681: IFFALSE 28780
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28683: LD_EXP 115
28687: PUSH
28688: LD_VAR 0 6
28692: ARRAY
28693: PUSH
28694: LD_VAR 0 5
28698: ARRAY
28699: PUSH
28700: LD_INT 1
28702: ARRAY
28703: PPUSH
28704: LD_EXP 115
28708: PUSH
28709: LD_VAR 0 6
28713: ARRAY
28714: PUSH
28715: LD_VAR 0 5
28719: ARRAY
28720: PUSH
28721: LD_INT 2
28723: ARRAY
28724: PPUSH
28725: LD_VAR 0 1
28729: PPUSH
28730: CALL_OW 255
28734: PPUSH
28735: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28739: LD_ADDR_EXP 115
28743: PUSH
28744: LD_EXP 115
28748: PPUSH
28749: LD_VAR 0 6
28753: PPUSH
28754: LD_EXP 115
28758: PUSH
28759: LD_VAR 0 6
28763: ARRAY
28764: PPUSH
28765: LD_VAR 0 5
28769: PPUSH
28770: CALL_OW 3
28774: PPUSH
28775: CALL_OW 1
28779: ST_TO_ADDR
// end ; end ;
28780: GO 28618
28782: POP
28783: POP
// end ;
28784: LD_VAR 0 4
28788: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
28789: LD_INT 0
28791: PPUSH
28792: PPUSH
28793: PPUSH
28794: PPUSH
28795: PPUSH
28796: PPUSH
28797: PPUSH
28798: PPUSH
28799: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
28800: LD_VAR 0 1
28804: PPUSH
28805: CALL_OW 264
28809: PUSH
28810: LD_EXP 39
28814: EQUAL
28815: NOT
28816: PUSH
28817: LD_VAR 0 1
28821: PUSH
28822: LD_EXP 114
28826: IN
28827: NOT
28828: OR
28829: IFFALSE 28833
// exit ;
28831: GO 29155
// index := GetElementIndex ( minersList , unit ) ;
28833: LD_ADDR_VAR 0 6
28837: PUSH
28838: LD_EXP 114
28842: PPUSH
28843: LD_VAR 0 1
28847: PPUSH
28848: CALL 34311 0 2
28852: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
28853: LD_ADDR_VAR 0 8
28857: PUSH
28858: LD_EXP 116
28862: PUSH
28863: LD_EXP 115
28867: PUSH
28868: LD_VAR 0 6
28872: ARRAY
28873: MINUS
28874: ST_TO_ADDR
// if not minesFreeAmount then
28875: LD_VAR 0 8
28879: NOT
28880: IFFALSE 28884
// exit ;
28882: GO 29155
// tmp := [ ] ;
28884: LD_ADDR_VAR 0 7
28888: PUSH
28889: EMPTY
28890: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28891: LD_ADDR_VAR 0 5
28895: PUSH
28896: DOUBLE
28897: LD_INT 1
28899: DEC
28900: ST_TO_ADDR
28901: LD_VAR 0 8
28905: PUSH
28906: FOR_TO
28907: IFFALSE 29102
// begin _d := rand ( 0 , 5 ) ;
28909: LD_ADDR_VAR 0 11
28913: PUSH
28914: LD_INT 0
28916: PPUSH
28917: LD_INT 5
28919: PPUSH
28920: CALL_OW 12
28924: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28925: LD_ADDR_VAR 0 12
28929: PUSH
28930: LD_INT 2
28932: PPUSH
28933: LD_INT 6
28935: PPUSH
28936: CALL_OW 12
28940: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28941: LD_ADDR_VAR 0 9
28945: PUSH
28946: LD_VAR 0 2
28950: PPUSH
28951: LD_VAR 0 11
28955: PPUSH
28956: LD_VAR 0 12
28960: PPUSH
28961: CALL_OW 272
28965: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28966: LD_ADDR_VAR 0 10
28970: PUSH
28971: LD_VAR 0 3
28975: PPUSH
28976: LD_VAR 0 11
28980: PPUSH
28981: LD_VAR 0 12
28985: PPUSH
28986: CALL_OW 273
28990: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28991: LD_VAR 0 9
28995: PPUSH
28996: LD_VAR 0 10
29000: PPUSH
29001: CALL_OW 488
29005: PUSH
29006: LD_VAR 0 9
29010: PUSH
29011: LD_VAR 0 10
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: LD_VAR 0 7
29024: IN
29025: NOT
29026: AND
29027: PUSH
29028: LD_VAR 0 9
29032: PPUSH
29033: LD_VAR 0 10
29037: PPUSH
29038: CALL_OW 458
29042: NOT
29043: AND
29044: IFFALSE 29086
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29046: LD_ADDR_VAR 0 7
29050: PUSH
29051: LD_VAR 0 7
29055: PPUSH
29056: LD_VAR 0 7
29060: PUSH
29061: LD_INT 1
29063: PLUS
29064: PPUSH
29065: LD_VAR 0 9
29069: PUSH
29070: LD_VAR 0 10
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: PPUSH
29079: CALL_OW 1
29083: ST_TO_ADDR
29084: GO 29100
// i := i - 1 ;
29086: LD_ADDR_VAR 0 5
29090: PUSH
29091: LD_VAR 0 5
29095: PUSH
29096: LD_INT 1
29098: MINUS
29099: ST_TO_ADDR
// end ;
29100: GO 28906
29102: POP
29103: POP
// for i in tmp do
29104: LD_ADDR_VAR 0 5
29108: PUSH
29109: LD_VAR 0 7
29113: PUSH
29114: FOR_IN
29115: IFFALSE 29153
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29117: LD_VAR 0 1
29121: PPUSH
29122: LD_VAR 0 5
29126: PUSH
29127: LD_INT 1
29129: ARRAY
29130: PPUSH
29131: LD_VAR 0 5
29135: PUSH
29136: LD_INT 2
29138: ARRAY
29139: PPUSH
29140: CALL 28095 0 3
29144: NOT
29145: IFFALSE 29151
// exit ;
29147: POP
29148: POP
29149: GO 29155
29151: GO 29114
29153: POP
29154: POP
// end ;
29155: LD_VAR 0 4
29159: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29160: LD_INT 0
29162: PPUSH
29163: PPUSH
29164: PPUSH
29165: PPUSH
29166: PPUSH
29167: PPUSH
29168: PPUSH
// if not GetClass ( unit ) = class_sniper then
29169: LD_VAR 0 1
29173: PPUSH
29174: CALL_OW 257
29178: PUSH
29179: LD_INT 5
29181: EQUAL
29182: NOT
29183: IFFALSE 29187
// exit ;
29185: GO 29575
// dist := 8 ;
29187: LD_ADDR_VAR 0 5
29191: PUSH
29192: LD_INT 8
29194: ST_TO_ADDR
// viewRange := 12 ;
29195: LD_ADDR_VAR 0 7
29199: PUSH
29200: LD_INT 12
29202: ST_TO_ADDR
// side := GetSide ( unit ) ;
29203: LD_ADDR_VAR 0 6
29207: PUSH
29208: LD_VAR 0 1
29212: PPUSH
29213: CALL_OW 255
29217: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29218: LD_INT 61
29220: PPUSH
29221: LD_VAR 0 6
29225: PPUSH
29226: CALL_OW 321
29230: PUSH
29231: LD_INT 2
29233: EQUAL
29234: IFFALSE 29244
// viewRange := 16 ;
29236: LD_ADDR_VAR 0 7
29240: PUSH
29241: LD_INT 16
29243: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29244: LD_VAR 0 1
29248: PPUSH
29249: LD_VAR 0 2
29253: PPUSH
29254: LD_VAR 0 3
29258: PPUSH
29259: CALL_OW 297
29263: PUSH
29264: LD_VAR 0 5
29268: GREATER
29269: IFFALSE 29348
// begin ComMoveXY ( unit , x , y ) ;
29271: LD_VAR 0 1
29275: PPUSH
29276: LD_VAR 0 2
29280: PPUSH
29281: LD_VAR 0 3
29285: PPUSH
29286: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29290: LD_INT 35
29292: PPUSH
29293: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29297: LD_VAR 0 1
29301: PPUSH
29302: LD_VAR 0 2
29306: PPUSH
29307: LD_VAR 0 3
29311: PPUSH
29312: CALL 64708 0 3
29316: NOT
29317: IFFALSE 29321
// exit ;
29319: GO 29575
// until GetDistUnitXY ( unit , x , y ) < dist ;
29321: LD_VAR 0 1
29325: PPUSH
29326: LD_VAR 0 2
29330: PPUSH
29331: LD_VAR 0 3
29335: PPUSH
29336: CALL_OW 297
29340: PUSH
29341: LD_VAR 0 5
29345: LESS
29346: IFFALSE 29290
// end ; ComTurnXY ( unit , x , y ) ;
29348: LD_VAR 0 1
29352: PPUSH
29353: LD_VAR 0 2
29357: PPUSH
29358: LD_VAR 0 3
29362: PPUSH
29363: CALL_OW 118
// wait ( 5 ) ;
29367: LD_INT 5
29369: PPUSH
29370: CALL_OW 67
// _d := GetDir ( unit ) ;
29374: LD_ADDR_VAR 0 10
29378: PUSH
29379: LD_VAR 0 1
29383: PPUSH
29384: CALL_OW 254
29388: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29389: LD_ADDR_VAR 0 8
29393: PUSH
29394: LD_VAR 0 1
29398: PPUSH
29399: CALL_OW 250
29403: PPUSH
29404: LD_VAR 0 10
29408: PPUSH
29409: LD_VAR 0 5
29413: PPUSH
29414: CALL_OW 272
29418: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29419: LD_ADDR_VAR 0 9
29423: PUSH
29424: LD_VAR 0 1
29428: PPUSH
29429: CALL_OW 251
29433: PPUSH
29434: LD_VAR 0 10
29438: PPUSH
29439: LD_VAR 0 5
29443: PPUSH
29444: CALL_OW 273
29448: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29449: LD_VAR 0 8
29453: PPUSH
29454: LD_VAR 0 9
29458: PPUSH
29459: CALL_OW 488
29463: NOT
29464: IFFALSE 29468
// exit ;
29466: GO 29575
// ComAnimCustom ( unit , 1 ) ;
29468: LD_VAR 0 1
29472: PPUSH
29473: LD_INT 1
29475: PPUSH
29476: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29480: LD_VAR 0 8
29484: PPUSH
29485: LD_VAR 0 9
29489: PPUSH
29490: LD_VAR 0 6
29494: PPUSH
29495: LD_VAR 0 7
29499: PPUSH
29500: CALL_OW 330
// repeat wait ( 1 ) ;
29504: LD_INT 1
29506: PPUSH
29507: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29511: LD_VAR 0 1
29515: PPUSH
29516: CALL_OW 316
29520: PUSH
29521: LD_VAR 0 1
29525: PPUSH
29526: CALL_OW 314
29530: OR
29531: PUSH
29532: LD_VAR 0 1
29536: PPUSH
29537: CALL_OW 302
29541: NOT
29542: OR
29543: PUSH
29544: LD_VAR 0 1
29548: PPUSH
29549: CALL_OW 301
29553: OR
29554: IFFALSE 29504
// RemoveSeeing ( _x , _y , side ) ;
29556: LD_VAR 0 8
29560: PPUSH
29561: LD_VAR 0 9
29565: PPUSH
29566: LD_VAR 0 6
29570: PPUSH
29571: CALL_OW 331
// end ; end_of_file
29575: LD_VAR 0 4
29579: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29580: LD_INT 0
29582: PPUSH
29583: PPUSH
// if exist_mode then
29584: LD_VAR 0 2
29588: IFFALSE 29613
// unit := CreateCharacter ( prefix & ident ) else
29590: LD_ADDR_VAR 0 5
29594: PUSH
29595: LD_VAR 0 3
29599: PUSH
29600: LD_VAR 0 1
29604: STR
29605: PPUSH
29606: CALL_OW 34
29610: ST_TO_ADDR
29611: GO 29628
// unit := NewCharacter ( ident ) ;
29613: LD_ADDR_VAR 0 5
29617: PUSH
29618: LD_VAR 0 1
29622: PPUSH
29623: CALL_OW 25
29627: ST_TO_ADDR
// result := unit ;
29628: LD_ADDR_VAR 0 4
29632: PUSH
29633: LD_VAR 0 5
29637: ST_TO_ADDR
// end ;
29638: LD_VAR 0 4
29642: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29643: LD_INT 0
29645: PPUSH
29646: PPUSH
// if not side or not nation then
29647: LD_VAR 0 1
29651: NOT
29652: PUSH
29653: LD_VAR 0 2
29657: NOT
29658: OR
29659: IFFALSE 29663
// exit ;
29661: GO 30427
// case nation of nation_american :
29663: LD_VAR 0 2
29667: PUSH
29668: LD_INT 1
29670: DOUBLE
29671: EQUAL
29672: IFTRUE 29676
29674: GO 29890
29676: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29677: LD_ADDR_VAR 0 4
29681: PUSH
29682: LD_INT 35
29684: PUSH
29685: LD_INT 45
29687: PUSH
29688: LD_INT 46
29690: PUSH
29691: LD_INT 47
29693: PUSH
29694: LD_INT 82
29696: PUSH
29697: LD_INT 83
29699: PUSH
29700: LD_INT 84
29702: PUSH
29703: LD_INT 85
29705: PUSH
29706: LD_INT 86
29708: PUSH
29709: LD_INT 1
29711: PUSH
29712: LD_INT 2
29714: PUSH
29715: LD_INT 6
29717: PUSH
29718: LD_INT 15
29720: PUSH
29721: LD_INT 16
29723: PUSH
29724: LD_INT 7
29726: PUSH
29727: LD_INT 12
29729: PUSH
29730: LD_INT 13
29732: PUSH
29733: LD_INT 10
29735: PUSH
29736: LD_INT 14
29738: PUSH
29739: LD_INT 20
29741: PUSH
29742: LD_INT 21
29744: PUSH
29745: LD_INT 22
29747: PUSH
29748: LD_INT 25
29750: PUSH
29751: LD_INT 32
29753: PUSH
29754: LD_INT 27
29756: PUSH
29757: LD_INT 36
29759: PUSH
29760: LD_INT 69
29762: PUSH
29763: LD_INT 39
29765: PUSH
29766: LD_INT 34
29768: PUSH
29769: LD_INT 40
29771: PUSH
29772: LD_INT 48
29774: PUSH
29775: LD_INT 49
29777: PUSH
29778: LD_INT 50
29780: PUSH
29781: LD_INT 51
29783: PUSH
29784: LD_INT 52
29786: PUSH
29787: LD_INT 53
29789: PUSH
29790: LD_INT 54
29792: PUSH
29793: LD_INT 55
29795: PUSH
29796: LD_INT 56
29798: PUSH
29799: LD_INT 57
29801: PUSH
29802: LD_INT 58
29804: PUSH
29805: LD_INT 59
29807: PUSH
29808: LD_INT 60
29810: PUSH
29811: LD_INT 61
29813: PUSH
29814: LD_INT 62
29816: PUSH
29817: LD_INT 80
29819: PUSH
29820: LD_INT 82
29822: PUSH
29823: LD_INT 83
29825: PUSH
29826: LD_INT 84
29828: PUSH
29829: LD_INT 85
29831: PUSH
29832: LD_INT 86
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: LIST
29842: LIST
29843: LIST
29844: LIST
29845: LIST
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: LIST
29867: LIST
29868: LIST
29869: LIST
29870: LIST
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: LIST
29878: LIST
29879: LIST
29880: LIST
29881: LIST
29882: LIST
29883: LIST
29884: LIST
29885: LIST
29886: LIST
29887: ST_TO_ADDR
29888: GO 30351
29890: LD_INT 2
29892: DOUBLE
29893: EQUAL
29894: IFTRUE 29898
29896: GO 30120
29898: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
29899: LD_ADDR_VAR 0 4
29903: PUSH
29904: LD_INT 35
29906: PUSH
29907: LD_INT 45
29909: PUSH
29910: LD_INT 46
29912: PUSH
29913: LD_INT 47
29915: PUSH
29916: LD_INT 82
29918: PUSH
29919: LD_INT 83
29921: PUSH
29922: LD_INT 84
29924: PUSH
29925: LD_INT 85
29927: PUSH
29928: LD_INT 87
29930: PUSH
29931: LD_INT 70
29933: PUSH
29934: LD_INT 1
29936: PUSH
29937: LD_INT 11
29939: PUSH
29940: LD_INT 3
29942: PUSH
29943: LD_INT 4
29945: PUSH
29946: LD_INT 5
29948: PUSH
29949: LD_INT 6
29951: PUSH
29952: LD_INT 15
29954: PUSH
29955: LD_INT 18
29957: PUSH
29958: LD_INT 7
29960: PUSH
29961: LD_INT 17
29963: PUSH
29964: LD_INT 8
29966: PUSH
29967: LD_INT 20
29969: PUSH
29970: LD_INT 21
29972: PUSH
29973: LD_INT 22
29975: PUSH
29976: LD_INT 72
29978: PUSH
29979: LD_INT 26
29981: PUSH
29982: LD_INT 69
29984: PUSH
29985: LD_INT 39
29987: PUSH
29988: LD_INT 40
29990: PUSH
29991: LD_INT 41
29993: PUSH
29994: LD_INT 42
29996: PUSH
29997: LD_INT 43
29999: PUSH
30000: LD_INT 48
30002: PUSH
30003: LD_INT 49
30005: PUSH
30006: LD_INT 50
30008: PUSH
30009: LD_INT 51
30011: PUSH
30012: LD_INT 52
30014: PUSH
30015: LD_INT 53
30017: PUSH
30018: LD_INT 54
30020: PUSH
30021: LD_INT 55
30023: PUSH
30024: LD_INT 56
30026: PUSH
30027: LD_INT 60
30029: PUSH
30030: LD_INT 61
30032: PUSH
30033: LD_INT 62
30035: PUSH
30036: LD_INT 66
30038: PUSH
30039: LD_INT 67
30041: PUSH
30042: LD_INT 68
30044: PUSH
30045: LD_INT 81
30047: PUSH
30048: LD_INT 82
30050: PUSH
30051: LD_INT 83
30053: PUSH
30054: LD_INT 84
30056: PUSH
30057: LD_INT 85
30059: PUSH
30060: LD_INT 87
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: LIST
30067: LIST
30068: LIST
30069: LIST
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: LIST
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: LIST
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: ST_TO_ADDR
30118: GO 30351
30120: LD_INT 3
30122: DOUBLE
30123: EQUAL
30124: IFTRUE 30128
30126: GO 30350
30128: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30129: LD_ADDR_VAR 0 4
30133: PUSH
30134: LD_INT 46
30136: PUSH
30137: LD_INT 47
30139: PUSH
30140: LD_INT 1
30142: PUSH
30143: LD_INT 2
30145: PUSH
30146: LD_INT 82
30148: PUSH
30149: LD_INT 83
30151: PUSH
30152: LD_INT 84
30154: PUSH
30155: LD_INT 85
30157: PUSH
30158: LD_INT 86
30160: PUSH
30161: LD_INT 11
30163: PUSH
30164: LD_INT 9
30166: PUSH
30167: LD_INT 20
30169: PUSH
30170: LD_INT 19
30172: PUSH
30173: LD_INT 21
30175: PUSH
30176: LD_INT 24
30178: PUSH
30179: LD_INT 22
30181: PUSH
30182: LD_INT 25
30184: PUSH
30185: LD_INT 28
30187: PUSH
30188: LD_INT 29
30190: PUSH
30191: LD_INT 30
30193: PUSH
30194: LD_INT 31
30196: PUSH
30197: LD_INT 37
30199: PUSH
30200: LD_INT 38
30202: PUSH
30203: LD_INT 32
30205: PUSH
30206: LD_INT 27
30208: PUSH
30209: LD_INT 33
30211: PUSH
30212: LD_INT 69
30214: PUSH
30215: LD_INT 39
30217: PUSH
30218: LD_INT 34
30220: PUSH
30221: LD_INT 40
30223: PUSH
30224: LD_INT 71
30226: PUSH
30227: LD_INT 23
30229: PUSH
30230: LD_INT 44
30232: PUSH
30233: LD_INT 48
30235: PUSH
30236: LD_INT 49
30238: PUSH
30239: LD_INT 50
30241: PUSH
30242: LD_INT 51
30244: PUSH
30245: LD_INT 52
30247: PUSH
30248: LD_INT 53
30250: PUSH
30251: LD_INT 54
30253: PUSH
30254: LD_INT 55
30256: PUSH
30257: LD_INT 56
30259: PUSH
30260: LD_INT 57
30262: PUSH
30263: LD_INT 58
30265: PUSH
30266: LD_INT 59
30268: PUSH
30269: LD_INT 63
30271: PUSH
30272: LD_INT 64
30274: PUSH
30275: LD_INT 65
30277: PUSH
30278: LD_INT 82
30280: PUSH
30281: LD_INT 83
30283: PUSH
30284: LD_INT 84
30286: PUSH
30287: LD_INT 85
30289: PUSH
30290: LD_INT 86
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: ST_TO_ADDR
30348: GO 30351
30350: POP
// if state > - 1 and state < 3 then
30351: LD_VAR 0 3
30355: PUSH
30356: LD_INT 1
30358: NEG
30359: GREATER
30360: PUSH
30361: LD_VAR 0 3
30365: PUSH
30366: LD_INT 3
30368: LESS
30369: AND
30370: IFFALSE 30427
// for i in result do
30372: LD_ADDR_VAR 0 5
30376: PUSH
30377: LD_VAR 0 4
30381: PUSH
30382: FOR_IN
30383: IFFALSE 30425
// if GetTech ( i , side ) <> state then
30385: LD_VAR 0 5
30389: PPUSH
30390: LD_VAR 0 1
30394: PPUSH
30395: CALL_OW 321
30399: PUSH
30400: LD_VAR 0 3
30404: NONEQUAL
30405: IFFALSE 30423
// result := result diff i ;
30407: LD_ADDR_VAR 0 4
30411: PUSH
30412: LD_VAR 0 4
30416: PUSH
30417: LD_VAR 0 5
30421: DIFF
30422: ST_TO_ADDR
30423: GO 30382
30425: POP
30426: POP
// end ;
30427: LD_VAR 0 4
30431: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30432: LD_INT 0
30434: PPUSH
30435: PPUSH
30436: PPUSH
// result := true ;
30437: LD_ADDR_VAR 0 3
30441: PUSH
30442: LD_INT 1
30444: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30445: LD_ADDR_VAR 0 5
30449: PUSH
30450: LD_VAR 0 2
30454: PPUSH
30455: CALL_OW 480
30459: ST_TO_ADDR
// if not tmp then
30460: LD_VAR 0 5
30464: NOT
30465: IFFALSE 30469
// exit ;
30467: GO 30518
// for i in tmp do
30469: LD_ADDR_VAR 0 4
30473: PUSH
30474: LD_VAR 0 5
30478: PUSH
30479: FOR_IN
30480: IFFALSE 30516
// if GetTech ( i , side ) <> state_researched then
30482: LD_VAR 0 4
30486: PPUSH
30487: LD_VAR 0 1
30491: PPUSH
30492: CALL_OW 321
30496: PUSH
30497: LD_INT 2
30499: NONEQUAL
30500: IFFALSE 30514
// begin result := false ;
30502: LD_ADDR_VAR 0 3
30506: PUSH
30507: LD_INT 0
30509: ST_TO_ADDR
// exit ;
30510: POP
30511: POP
30512: GO 30518
// end ;
30514: GO 30479
30516: POP
30517: POP
// end ;
30518: LD_VAR 0 3
30522: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30523: LD_INT 0
30525: PPUSH
30526: PPUSH
30527: PPUSH
30528: PPUSH
30529: PPUSH
30530: PPUSH
30531: PPUSH
30532: PPUSH
30533: PPUSH
30534: PPUSH
30535: PPUSH
30536: PPUSH
30537: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30538: LD_VAR 0 1
30542: NOT
30543: PUSH
30544: LD_VAR 0 1
30548: PPUSH
30549: CALL_OW 257
30553: PUSH
30554: LD_INT 9
30556: NONEQUAL
30557: OR
30558: IFFALSE 30562
// exit ;
30560: GO 31135
// side := GetSide ( unit ) ;
30562: LD_ADDR_VAR 0 9
30566: PUSH
30567: LD_VAR 0 1
30571: PPUSH
30572: CALL_OW 255
30576: ST_TO_ADDR
// tech_space := tech_spacanom ;
30577: LD_ADDR_VAR 0 12
30581: PUSH
30582: LD_INT 29
30584: ST_TO_ADDR
// tech_time := tech_taurad ;
30585: LD_ADDR_VAR 0 13
30589: PUSH
30590: LD_INT 28
30592: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30593: LD_ADDR_VAR 0 11
30597: PUSH
30598: LD_VAR 0 1
30602: PPUSH
30603: CALL_OW 310
30607: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30608: LD_VAR 0 11
30612: PPUSH
30613: CALL_OW 247
30617: PUSH
30618: LD_INT 2
30620: EQUAL
30621: IFFALSE 30625
// exit ;
30623: GO 31135
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30625: LD_ADDR_VAR 0 8
30629: PUSH
30630: LD_INT 81
30632: PUSH
30633: LD_VAR 0 9
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: PUSH
30642: LD_INT 3
30644: PUSH
30645: LD_INT 21
30647: PUSH
30648: LD_INT 3
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PPUSH
30663: CALL_OW 69
30667: ST_TO_ADDR
// if not tmp then
30668: LD_VAR 0 8
30672: NOT
30673: IFFALSE 30677
// exit ;
30675: GO 31135
// if in_unit then
30677: LD_VAR 0 11
30681: IFFALSE 30705
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30683: LD_ADDR_VAR 0 10
30687: PUSH
30688: LD_VAR 0 8
30692: PPUSH
30693: LD_VAR 0 11
30697: PPUSH
30698: CALL_OW 74
30702: ST_TO_ADDR
30703: GO 30725
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30705: LD_ADDR_VAR 0 10
30709: PUSH
30710: LD_VAR 0 8
30714: PPUSH
30715: LD_VAR 0 1
30719: PPUSH
30720: CALL_OW 74
30724: ST_TO_ADDR
// if not enemy then
30725: LD_VAR 0 10
30729: NOT
30730: IFFALSE 30734
// exit ;
30732: GO 31135
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30734: LD_VAR 0 11
30738: PUSH
30739: LD_VAR 0 11
30743: PPUSH
30744: LD_VAR 0 10
30748: PPUSH
30749: CALL_OW 296
30753: PUSH
30754: LD_INT 13
30756: GREATER
30757: AND
30758: PUSH
30759: LD_VAR 0 1
30763: PPUSH
30764: LD_VAR 0 10
30768: PPUSH
30769: CALL_OW 296
30773: PUSH
30774: LD_INT 12
30776: GREATER
30777: OR
30778: IFFALSE 30782
// exit ;
30780: GO 31135
// missile := [ 1 ] ;
30782: LD_ADDR_VAR 0 14
30786: PUSH
30787: LD_INT 1
30789: PUSH
30790: EMPTY
30791: LIST
30792: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30793: LD_VAR 0 9
30797: PPUSH
30798: LD_VAR 0 12
30802: PPUSH
30803: CALL_OW 325
30807: IFFALSE 30836
// missile := Insert ( missile , missile + 1 , 2 ) ;
30809: LD_ADDR_VAR 0 14
30813: PUSH
30814: LD_VAR 0 14
30818: PPUSH
30819: LD_VAR 0 14
30823: PUSH
30824: LD_INT 1
30826: PLUS
30827: PPUSH
30828: LD_INT 2
30830: PPUSH
30831: CALL_OW 2
30835: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30836: LD_VAR 0 9
30840: PPUSH
30841: LD_VAR 0 13
30845: PPUSH
30846: CALL_OW 325
30850: PUSH
30851: LD_VAR 0 10
30855: PPUSH
30856: CALL_OW 255
30860: PPUSH
30861: LD_VAR 0 13
30865: PPUSH
30866: CALL_OW 325
30870: NOT
30871: AND
30872: IFFALSE 30901
// missile := Insert ( missile , missile + 1 , 3 ) ;
30874: LD_ADDR_VAR 0 14
30878: PUSH
30879: LD_VAR 0 14
30883: PPUSH
30884: LD_VAR 0 14
30888: PUSH
30889: LD_INT 1
30891: PLUS
30892: PPUSH
30893: LD_INT 3
30895: PPUSH
30896: CALL_OW 2
30900: ST_TO_ADDR
// if missile < 2 then
30901: LD_VAR 0 14
30905: PUSH
30906: LD_INT 2
30908: LESS
30909: IFFALSE 30913
// exit ;
30911: GO 31135
// x := GetX ( enemy ) ;
30913: LD_ADDR_VAR 0 4
30917: PUSH
30918: LD_VAR 0 10
30922: PPUSH
30923: CALL_OW 250
30927: ST_TO_ADDR
// y := GetY ( enemy ) ;
30928: LD_ADDR_VAR 0 5
30932: PUSH
30933: LD_VAR 0 10
30937: PPUSH
30938: CALL_OW 251
30942: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30943: LD_ADDR_VAR 0 6
30947: PUSH
30948: LD_VAR 0 4
30952: PUSH
30953: LD_INT 1
30955: NEG
30956: PPUSH
30957: LD_INT 1
30959: PPUSH
30960: CALL_OW 12
30964: PLUS
30965: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30966: LD_ADDR_VAR 0 7
30970: PUSH
30971: LD_VAR 0 5
30975: PUSH
30976: LD_INT 1
30978: NEG
30979: PPUSH
30980: LD_INT 1
30982: PPUSH
30983: CALL_OW 12
30987: PLUS
30988: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30989: LD_VAR 0 6
30993: PPUSH
30994: LD_VAR 0 7
30998: PPUSH
30999: CALL_OW 488
31003: NOT
31004: IFFALSE 31026
// begin _x := x ;
31006: LD_ADDR_VAR 0 6
31010: PUSH
31011: LD_VAR 0 4
31015: ST_TO_ADDR
// _y := y ;
31016: LD_ADDR_VAR 0 7
31020: PUSH
31021: LD_VAR 0 5
31025: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31026: LD_ADDR_VAR 0 3
31030: PUSH
31031: LD_INT 1
31033: PPUSH
31034: LD_VAR 0 14
31038: PPUSH
31039: CALL_OW 12
31043: ST_TO_ADDR
// case i of 1 :
31044: LD_VAR 0 3
31048: PUSH
31049: LD_INT 1
31051: DOUBLE
31052: EQUAL
31053: IFTRUE 31057
31055: GO 31074
31057: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31058: LD_VAR 0 1
31062: PPUSH
31063: LD_VAR 0 10
31067: PPUSH
31068: CALL_OW 115
31072: GO 31135
31074: LD_INT 2
31076: DOUBLE
31077: EQUAL
31078: IFTRUE 31082
31080: GO 31104
31082: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31083: LD_VAR 0 1
31087: PPUSH
31088: LD_VAR 0 6
31092: PPUSH
31093: LD_VAR 0 7
31097: PPUSH
31098: CALL_OW 153
31102: GO 31135
31104: LD_INT 3
31106: DOUBLE
31107: EQUAL
31108: IFTRUE 31112
31110: GO 31134
31112: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31113: LD_VAR 0 1
31117: PPUSH
31118: LD_VAR 0 6
31122: PPUSH
31123: LD_VAR 0 7
31127: PPUSH
31128: CALL_OW 154
31132: GO 31135
31134: POP
// end ;
31135: LD_VAR 0 2
31139: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31140: LD_INT 0
31142: PPUSH
31143: PPUSH
31144: PPUSH
31145: PPUSH
31146: PPUSH
31147: PPUSH
// if not unit or not building then
31148: LD_VAR 0 1
31152: NOT
31153: PUSH
31154: LD_VAR 0 2
31158: NOT
31159: OR
31160: IFFALSE 31164
// exit ;
31162: GO 31322
// x := GetX ( building ) ;
31164: LD_ADDR_VAR 0 5
31168: PUSH
31169: LD_VAR 0 2
31173: PPUSH
31174: CALL_OW 250
31178: ST_TO_ADDR
// y := GetY ( building ) ;
31179: LD_ADDR_VAR 0 6
31183: PUSH
31184: LD_VAR 0 2
31188: PPUSH
31189: CALL_OW 251
31193: ST_TO_ADDR
// for i = 0 to 5 do
31194: LD_ADDR_VAR 0 4
31198: PUSH
31199: DOUBLE
31200: LD_INT 0
31202: DEC
31203: ST_TO_ADDR
31204: LD_INT 5
31206: PUSH
31207: FOR_TO
31208: IFFALSE 31320
// begin _x := ShiftX ( x , i , 3 ) ;
31210: LD_ADDR_VAR 0 7
31214: PUSH
31215: LD_VAR 0 5
31219: PPUSH
31220: LD_VAR 0 4
31224: PPUSH
31225: LD_INT 3
31227: PPUSH
31228: CALL_OW 272
31232: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31233: LD_ADDR_VAR 0 8
31237: PUSH
31238: LD_VAR 0 6
31242: PPUSH
31243: LD_VAR 0 4
31247: PPUSH
31248: LD_INT 3
31250: PPUSH
31251: CALL_OW 273
31255: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31256: LD_VAR 0 7
31260: PPUSH
31261: LD_VAR 0 8
31265: PPUSH
31266: CALL_OW 488
31270: NOT
31271: IFFALSE 31275
// continue ;
31273: GO 31207
// if HexInfo ( _x , _y ) = 0 then
31275: LD_VAR 0 7
31279: PPUSH
31280: LD_VAR 0 8
31284: PPUSH
31285: CALL_OW 428
31289: PUSH
31290: LD_INT 0
31292: EQUAL
31293: IFFALSE 31318
// begin ComMoveXY ( unit , _x , _y ) ;
31295: LD_VAR 0 1
31299: PPUSH
31300: LD_VAR 0 7
31304: PPUSH
31305: LD_VAR 0 8
31309: PPUSH
31310: CALL_OW 111
// exit ;
31314: POP
31315: POP
31316: GO 31322
// end ; end ;
31318: GO 31207
31320: POP
31321: POP
// end ;
31322: LD_VAR 0 3
31326: RET
// export function ScanBase ( side , base_area ) ; begin
31327: LD_INT 0
31329: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31330: LD_ADDR_VAR 0 3
31334: PUSH
31335: LD_VAR 0 2
31339: PPUSH
31340: LD_INT 81
31342: PUSH
31343: LD_VAR 0 1
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: PPUSH
31352: CALL_OW 70
31356: ST_TO_ADDR
// end ;
31357: LD_VAR 0 3
31361: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31362: LD_INT 0
31364: PPUSH
31365: PPUSH
31366: PPUSH
31367: PPUSH
// result := false ;
31368: LD_ADDR_VAR 0 2
31372: PUSH
31373: LD_INT 0
31375: ST_TO_ADDR
// side := GetSide ( unit ) ;
31376: LD_ADDR_VAR 0 3
31380: PUSH
31381: LD_VAR 0 1
31385: PPUSH
31386: CALL_OW 255
31390: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31391: LD_ADDR_VAR 0 4
31395: PUSH
31396: LD_VAR 0 1
31400: PPUSH
31401: CALL_OW 248
31405: ST_TO_ADDR
// case nat of 1 :
31406: LD_VAR 0 4
31410: PUSH
31411: LD_INT 1
31413: DOUBLE
31414: EQUAL
31415: IFTRUE 31419
31417: GO 31430
31419: POP
// tech := tech_lassight ; 2 :
31420: LD_ADDR_VAR 0 5
31424: PUSH
31425: LD_INT 12
31427: ST_TO_ADDR
31428: GO 31469
31430: LD_INT 2
31432: DOUBLE
31433: EQUAL
31434: IFTRUE 31438
31436: GO 31449
31438: POP
// tech := tech_mortar ; 3 :
31439: LD_ADDR_VAR 0 5
31443: PUSH
31444: LD_INT 41
31446: ST_TO_ADDR
31447: GO 31469
31449: LD_INT 3
31451: DOUBLE
31452: EQUAL
31453: IFTRUE 31457
31455: GO 31468
31457: POP
// tech := tech_bazooka ; end ;
31458: LD_ADDR_VAR 0 5
31462: PUSH
31463: LD_INT 44
31465: ST_TO_ADDR
31466: GO 31469
31468: POP
// if Researched ( side , tech ) then
31469: LD_VAR 0 3
31473: PPUSH
31474: LD_VAR 0 5
31478: PPUSH
31479: CALL_OW 325
31483: IFFALSE 31510
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31485: LD_ADDR_VAR 0 2
31489: PUSH
31490: LD_INT 5
31492: PUSH
31493: LD_INT 8
31495: PUSH
31496: LD_INT 9
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: LIST
31503: PUSH
31504: LD_VAR 0 4
31508: ARRAY
31509: ST_TO_ADDR
// end ;
31510: LD_VAR 0 2
31514: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31515: LD_INT 0
31517: PPUSH
31518: PPUSH
31519: PPUSH
// if not mines then
31520: LD_VAR 0 2
31524: NOT
31525: IFFALSE 31529
// exit ;
31527: GO 31673
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31529: LD_ADDR_VAR 0 5
31533: PUSH
31534: LD_INT 81
31536: PUSH
31537: LD_VAR 0 1
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 3
31548: PUSH
31549: LD_INT 21
31551: PUSH
31552: LD_INT 3
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PPUSH
31567: CALL_OW 69
31571: ST_TO_ADDR
// for i in mines do
31572: LD_ADDR_VAR 0 4
31576: PUSH
31577: LD_VAR 0 2
31581: PUSH
31582: FOR_IN
31583: IFFALSE 31671
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31585: LD_VAR 0 4
31589: PUSH
31590: LD_INT 1
31592: ARRAY
31593: PPUSH
31594: LD_VAR 0 4
31598: PUSH
31599: LD_INT 2
31601: ARRAY
31602: PPUSH
31603: CALL_OW 458
31607: NOT
31608: IFFALSE 31612
// continue ;
31610: GO 31582
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31612: LD_VAR 0 4
31616: PUSH
31617: LD_INT 1
31619: ARRAY
31620: PPUSH
31621: LD_VAR 0 4
31625: PUSH
31626: LD_INT 2
31628: ARRAY
31629: PPUSH
31630: CALL_OW 428
31634: PUSH
31635: LD_VAR 0 5
31639: IN
31640: IFFALSE 31669
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31642: LD_VAR 0 4
31646: PUSH
31647: LD_INT 1
31649: ARRAY
31650: PPUSH
31651: LD_VAR 0 4
31655: PUSH
31656: LD_INT 2
31658: ARRAY
31659: PPUSH
31660: LD_VAR 0 1
31664: PPUSH
31665: CALL_OW 456
// end ;
31669: GO 31582
31671: POP
31672: POP
// end ;
31673: LD_VAR 0 3
31677: RET
// export function Count ( array ) ; var i ; begin
31678: LD_INT 0
31680: PPUSH
31681: PPUSH
// result := 0 ;
31682: LD_ADDR_VAR 0 2
31686: PUSH
31687: LD_INT 0
31689: ST_TO_ADDR
// for i in array do
31690: LD_ADDR_VAR 0 3
31694: PUSH
31695: LD_VAR 0 1
31699: PUSH
31700: FOR_IN
31701: IFFALSE 31725
// if i then
31703: LD_VAR 0 3
31707: IFFALSE 31723
// result := result + 1 ;
31709: LD_ADDR_VAR 0 2
31713: PUSH
31714: LD_VAR 0 2
31718: PUSH
31719: LD_INT 1
31721: PLUS
31722: ST_TO_ADDR
31723: GO 31700
31725: POP
31726: POP
// end ;
31727: LD_VAR 0 2
31731: RET
// export function IsEmpty ( building ) ; begin
31732: LD_INT 0
31734: PPUSH
// if not building then
31735: LD_VAR 0 1
31739: NOT
31740: IFFALSE 31744
// exit ;
31742: GO 31787
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31744: LD_ADDR_VAR 0 2
31748: PUSH
31749: LD_VAR 0 1
31753: PUSH
31754: LD_INT 22
31756: PUSH
31757: LD_VAR 0 1
31761: PPUSH
31762: CALL_OW 255
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: PUSH
31771: LD_INT 58
31773: PUSH
31774: EMPTY
31775: LIST
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PPUSH
31781: CALL_OW 69
31785: IN
31786: ST_TO_ADDR
// end ;
31787: LD_VAR 0 2
31791: RET
// export function IsNotFull ( building ) ; begin
31792: LD_INT 0
31794: PPUSH
// if not building then
31795: LD_VAR 0 1
31799: NOT
31800: IFFALSE 31804
// exit ;
31802: GO 31823
// result := UnitsInside ( building ) < 6 ;
31804: LD_ADDR_VAR 0 2
31808: PUSH
31809: LD_VAR 0 1
31813: PPUSH
31814: CALL_OW 313
31818: PUSH
31819: LD_INT 6
31821: LESS
31822: ST_TO_ADDR
// end ;
31823: LD_VAR 0 2
31827: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31828: LD_INT 0
31830: PPUSH
31831: PPUSH
31832: PPUSH
31833: PPUSH
// tmp := [ ] ;
31834: LD_ADDR_VAR 0 3
31838: PUSH
31839: EMPTY
31840: ST_TO_ADDR
// list := [ ] ;
31841: LD_ADDR_VAR 0 5
31845: PUSH
31846: EMPTY
31847: ST_TO_ADDR
// for i = 16 to 25 do
31848: LD_ADDR_VAR 0 4
31852: PUSH
31853: DOUBLE
31854: LD_INT 16
31856: DEC
31857: ST_TO_ADDR
31858: LD_INT 25
31860: PUSH
31861: FOR_TO
31862: IFFALSE 31935
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31864: LD_ADDR_VAR 0 3
31868: PUSH
31869: LD_VAR 0 3
31873: PUSH
31874: LD_INT 22
31876: PUSH
31877: LD_VAR 0 1
31881: PPUSH
31882: CALL_OW 255
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: LD_INT 91
31893: PUSH
31894: LD_VAR 0 1
31898: PUSH
31899: LD_INT 6
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: LIST
31906: PUSH
31907: LD_INT 30
31909: PUSH
31910: LD_VAR 0 4
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: LIST
31923: PUSH
31924: EMPTY
31925: LIST
31926: PPUSH
31927: CALL_OW 69
31931: ADD
31932: ST_TO_ADDR
31933: GO 31861
31935: POP
31936: POP
// for i = 1 to tmp do
31937: LD_ADDR_VAR 0 4
31941: PUSH
31942: DOUBLE
31943: LD_INT 1
31945: DEC
31946: ST_TO_ADDR
31947: LD_VAR 0 3
31951: PUSH
31952: FOR_TO
31953: IFFALSE 32041
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31955: LD_ADDR_VAR 0 5
31959: PUSH
31960: LD_VAR 0 5
31964: PUSH
31965: LD_VAR 0 3
31969: PUSH
31970: LD_VAR 0 4
31974: ARRAY
31975: PPUSH
31976: CALL_OW 266
31980: PUSH
31981: LD_VAR 0 3
31985: PUSH
31986: LD_VAR 0 4
31990: ARRAY
31991: PPUSH
31992: CALL_OW 250
31996: PUSH
31997: LD_VAR 0 3
32001: PUSH
32002: LD_VAR 0 4
32006: ARRAY
32007: PPUSH
32008: CALL_OW 251
32012: PUSH
32013: LD_VAR 0 3
32017: PUSH
32018: LD_VAR 0 4
32022: ARRAY
32023: PPUSH
32024: CALL_OW 254
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: PUSH
32035: EMPTY
32036: LIST
32037: ADD
32038: ST_TO_ADDR
32039: GO 31952
32041: POP
32042: POP
// result := list ;
32043: LD_ADDR_VAR 0 2
32047: PUSH
32048: LD_VAR 0 5
32052: ST_TO_ADDR
// end ;
32053: LD_VAR 0 2
32057: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32058: LD_INT 0
32060: PPUSH
32061: PPUSH
32062: PPUSH
32063: PPUSH
32064: PPUSH
32065: PPUSH
32066: PPUSH
// if not factory then
32067: LD_VAR 0 1
32071: NOT
32072: IFFALSE 32076
// exit ;
32074: GO 32669
// if control = control_apeman then
32076: LD_VAR 0 4
32080: PUSH
32081: LD_INT 5
32083: EQUAL
32084: IFFALSE 32193
// begin tmp := UnitsInside ( factory ) ;
32086: LD_ADDR_VAR 0 8
32090: PUSH
32091: LD_VAR 0 1
32095: PPUSH
32096: CALL_OW 313
32100: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32101: LD_VAR 0 8
32105: PPUSH
32106: LD_INT 25
32108: PUSH
32109: LD_INT 12
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: PPUSH
32116: CALL_OW 72
32120: NOT
32121: IFFALSE 32131
// control := control_manual ;
32123: LD_ADDR_VAR 0 4
32127: PUSH
32128: LD_INT 1
32130: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32131: LD_ADDR_VAR 0 8
32135: PUSH
32136: LD_VAR 0 1
32140: PPUSH
32141: CALL 31828 0 1
32145: ST_TO_ADDR
// if tmp then
32146: LD_VAR 0 8
32150: IFFALSE 32193
// begin for i in tmp do
32152: LD_ADDR_VAR 0 7
32156: PUSH
32157: LD_VAR 0 8
32161: PUSH
32162: FOR_IN
32163: IFFALSE 32191
// if i [ 1 ] = b_ext_radio then
32165: LD_VAR 0 7
32169: PUSH
32170: LD_INT 1
32172: ARRAY
32173: PUSH
32174: LD_INT 22
32176: EQUAL
32177: IFFALSE 32189
// begin control := control_remote ;
32179: LD_ADDR_VAR 0 4
32183: PUSH
32184: LD_INT 2
32186: ST_TO_ADDR
// break ;
32187: GO 32191
// end ;
32189: GO 32162
32191: POP
32192: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32193: LD_VAR 0 1
32197: PPUSH
32198: LD_VAR 0 2
32202: PPUSH
32203: LD_VAR 0 3
32207: PPUSH
32208: LD_VAR 0 4
32212: PPUSH
32213: LD_VAR 0 5
32217: PPUSH
32218: CALL_OW 448
32222: IFFALSE 32257
// begin result := [ chassis , engine , control , weapon ] ;
32224: LD_ADDR_VAR 0 6
32228: PUSH
32229: LD_VAR 0 2
32233: PUSH
32234: LD_VAR 0 3
32238: PUSH
32239: LD_VAR 0 4
32243: PUSH
32244: LD_VAR 0 5
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: LIST
32253: LIST
32254: ST_TO_ADDR
// exit ;
32255: GO 32669
// end ; _chassis := AvailableChassisList ( factory ) ;
32257: LD_ADDR_VAR 0 9
32261: PUSH
32262: LD_VAR 0 1
32266: PPUSH
32267: CALL_OW 475
32271: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32272: LD_ADDR_VAR 0 11
32276: PUSH
32277: LD_VAR 0 1
32281: PPUSH
32282: CALL_OW 476
32286: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32287: LD_ADDR_VAR 0 12
32291: PUSH
32292: LD_VAR 0 1
32296: PPUSH
32297: CALL_OW 477
32301: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32302: LD_ADDR_VAR 0 10
32306: PUSH
32307: LD_VAR 0 1
32311: PPUSH
32312: CALL_OW 478
32316: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32317: LD_VAR 0 9
32321: NOT
32322: PUSH
32323: LD_VAR 0 11
32327: NOT
32328: OR
32329: PUSH
32330: LD_VAR 0 12
32334: NOT
32335: OR
32336: PUSH
32337: LD_VAR 0 10
32341: NOT
32342: OR
32343: IFFALSE 32378
// begin result := [ chassis , engine , control , weapon ] ;
32345: LD_ADDR_VAR 0 6
32349: PUSH
32350: LD_VAR 0 2
32354: PUSH
32355: LD_VAR 0 3
32359: PUSH
32360: LD_VAR 0 4
32364: PUSH
32365: LD_VAR 0 5
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: ST_TO_ADDR
// exit ;
32376: GO 32669
// end ; if not chassis in _chassis then
32378: LD_VAR 0 2
32382: PUSH
32383: LD_VAR 0 9
32387: IN
32388: NOT
32389: IFFALSE 32415
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32391: LD_ADDR_VAR 0 2
32395: PUSH
32396: LD_VAR 0 9
32400: PUSH
32401: LD_INT 1
32403: PPUSH
32404: LD_VAR 0 9
32408: PPUSH
32409: CALL_OW 12
32413: ARRAY
32414: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32415: LD_VAR 0 2
32419: PPUSH
32420: LD_VAR 0 3
32424: PPUSH
32425: CALL 32674 0 2
32429: NOT
32430: IFFALSE 32489
// repeat engine := _engine [ 1 ] ;
32432: LD_ADDR_VAR 0 3
32436: PUSH
32437: LD_VAR 0 11
32441: PUSH
32442: LD_INT 1
32444: ARRAY
32445: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32446: LD_ADDR_VAR 0 11
32450: PUSH
32451: LD_VAR 0 11
32455: PPUSH
32456: LD_INT 1
32458: PPUSH
32459: CALL_OW 3
32463: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32464: LD_VAR 0 2
32468: PPUSH
32469: LD_VAR 0 3
32473: PPUSH
32474: CALL 32674 0 2
32478: PUSH
32479: LD_VAR 0 11
32483: PUSH
32484: EMPTY
32485: EQUAL
32486: OR
32487: IFFALSE 32432
// if not control in _control then
32489: LD_VAR 0 4
32493: PUSH
32494: LD_VAR 0 12
32498: IN
32499: NOT
32500: IFFALSE 32526
// control := _control [ rand ( 1 , _control ) ] ;
32502: LD_ADDR_VAR 0 4
32506: PUSH
32507: LD_VAR 0 12
32511: PUSH
32512: LD_INT 1
32514: PPUSH
32515: LD_VAR 0 12
32519: PPUSH
32520: CALL_OW 12
32524: ARRAY
32525: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32526: LD_VAR 0 2
32530: PPUSH
32531: LD_VAR 0 5
32535: PPUSH
32536: CALL 32894 0 2
32540: NOT
32541: IFFALSE 32600
// repeat weapon := _weapon [ 1 ] ;
32543: LD_ADDR_VAR 0 5
32547: PUSH
32548: LD_VAR 0 10
32552: PUSH
32553: LD_INT 1
32555: ARRAY
32556: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32557: LD_ADDR_VAR 0 10
32561: PUSH
32562: LD_VAR 0 10
32566: PPUSH
32567: LD_INT 1
32569: PPUSH
32570: CALL_OW 3
32574: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32575: LD_VAR 0 2
32579: PPUSH
32580: LD_VAR 0 5
32584: PPUSH
32585: CALL 32894 0 2
32589: PUSH
32590: LD_VAR 0 10
32594: PUSH
32595: EMPTY
32596: EQUAL
32597: OR
32598: IFFALSE 32543
// result := [ ] ;
32600: LD_ADDR_VAR 0 6
32604: PUSH
32605: EMPTY
32606: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32607: LD_VAR 0 1
32611: PPUSH
32612: LD_VAR 0 2
32616: PPUSH
32617: LD_VAR 0 3
32621: PPUSH
32622: LD_VAR 0 4
32626: PPUSH
32627: LD_VAR 0 5
32631: PPUSH
32632: CALL_OW 448
32636: IFFALSE 32669
// result := [ chassis , engine , control , weapon ] ;
32638: LD_ADDR_VAR 0 6
32642: PUSH
32643: LD_VAR 0 2
32647: PUSH
32648: LD_VAR 0 3
32652: PUSH
32653: LD_VAR 0 4
32657: PUSH
32658: LD_VAR 0 5
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: ST_TO_ADDR
// end ;
32669: LD_VAR 0 6
32673: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32674: LD_INT 0
32676: PPUSH
// if not chassis or not engine then
32677: LD_VAR 0 1
32681: NOT
32682: PUSH
32683: LD_VAR 0 2
32687: NOT
32688: OR
32689: IFFALSE 32693
// exit ;
32691: GO 32889
// case engine of engine_solar :
32693: LD_VAR 0 2
32697: PUSH
32698: LD_INT 2
32700: DOUBLE
32701: EQUAL
32702: IFTRUE 32706
32704: GO 32744
32706: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32707: LD_ADDR_VAR 0 3
32711: PUSH
32712: LD_INT 11
32714: PUSH
32715: LD_INT 12
32717: PUSH
32718: LD_INT 13
32720: PUSH
32721: LD_INT 14
32723: PUSH
32724: LD_INT 1
32726: PUSH
32727: LD_INT 2
32729: PUSH
32730: LD_INT 3
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: LIST
32740: LIST
32741: ST_TO_ADDR
32742: GO 32873
32744: LD_INT 1
32746: DOUBLE
32747: EQUAL
32748: IFTRUE 32752
32750: GO 32814
32752: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32753: LD_ADDR_VAR 0 3
32757: PUSH
32758: LD_INT 11
32760: PUSH
32761: LD_INT 12
32763: PUSH
32764: LD_INT 13
32766: PUSH
32767: LD_INT 14
32769: PUSH
32770: LD_INT 1
32772: PUSH
32773: LD_INT 2
32775: PUSH
32776: LD_INT 3
32778: PUSH
32779: LD_INT 4
32781: PUSH
32782: LD_INT 5
32784: PUSH
32785: LD_INT 21
32787: PUSH
32788: LD_INT 23
32790: PUSH
32791: LD_INT 22
32793: PUSH
32794: LD_INT 24
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: LIST
32801: LIST
32802: LIST
32803: LIST
32804: LIST
32805: LIST
32806: LIST
32807: LIST
32808: LIST
32809: LIST
32810: LIST
32811: ST_TO_ADDR
32812: GO 32873
32814: LD_INT 3
32816: DOUBLE
32817: EQUAL
32818: IFTRUE 32822
32820: GO 32872
32822: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32823: LD_ADDR_VAR 0 3
32827: PUSH
32828: LD_INT 13
32830: PUSH
32831: LD_INT 14
32833: PUSH
32834: LD_INT 2
32836: PUSH
32837: LD_INT 3
32839: PUSH
32840: LD_INT 4
32842: PUSH
32843: LD_INT 5
32845: PUSH
32846: LD_INT 21
32848: PUSH
32849: LD_INT 22
32851: PUSH
32852: LD_INT 23
32854: PUSH
32855: LD_INT 24
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: ST_TO_ADDR
32870: GO 32873
32872: POP
// result := ( chassis in result ) ;
32873: LD_ADDR_VAR 0 3
32877: PUSH
32878: LD_VAR 0 1
32882: PUSH
32883: LD_VAR 0 3
32887: IN
32888: ST_TO_ADDR
// end ;
32889: LD_VAR 0 3
32893: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32894: LD_INT 0
32896: PPUSH
// if not chassis or not weapon then
32897: LD_VAR 0 1
32901: NOT
32902: PUSH
32903: LD_VAR 0 2
32907: NOT
32908: OR
32909: IFFALSE 32913
// exit ;
32911: GO 33939
// case weapon of us_machine_gun :
32913: LD_VAR 0 2
32917: PUSH
32918: LD_INT 2
32920: DOUBLE
32921: EQUAL
32922: IFTRUE 32926
32924: GO 32956
32926: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32927: LD_ADDR_VAR 0 3
32931: PUSH
32932: LD_INT 1
32934: PUSH
32935: LD_INT 2
32937: PUSH
32938: LD_INT 3
32940: PUSH
32941: LD_INT 4
32943: PUSH
32944: LD_INT 5
32946: PUSH
32947: EMPTY
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: ST_TO_ADDR
32954: GO 33923
32956: LD_INT 3
32958: DOUBLE
32959: EQUAL
32960: IFTRUE 32964
32962: GO 32994
32964: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32965: LD_ADDR_VAR 0 3
32969: PUSH
32970: LD_INT 1
32972: PUSH
32973: LD_INT 2
32975: PUSH
32976: LD_INT 3
32978: PUSH
32979: LD_INT 4
32981: PUSH
32982: LD_INT 5
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: LIST
32989: LIST
32990: LIST
32991: ST_TO_ADDR
32992: GO 33923
32994: LD_INT 11
32996: DOUBLE
32997: EQUAL
32998: IFTRUE 33002
33000: GO 33032
33002: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33003: LD_ADDR_VAR 0 3
33007: PUSH
33008: LD_INT 1
33010: PUSH
33011: LD_INT 2
33013: PUSH
33014: LD_INT 3
33016: PUSH
33017: LD_INT 4
33019: PUSH
33020: LD_INT 5
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: LIST
33027: LIST
33028: LIST
33029: ST_TO_ADDR
33030: GO 33923
33032: LD_INT 4
33034: DOUBLE
33035: EQUAL
33036: IFTRUE 33040
33038: GO 33066
33040: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33041: LD_ADDR_VAR 0 3
33045: PUSH
33046: LD_INT 2
33048: PUSH
33049: LD_INT 3
33051: PUSH
33052: LD_INT 4
33054: PUSH
33055: LD_INT 5
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: ST_TO_ADDR
33064: GO 33923
33066: LD_INT 5
33068: DOUBLE
33069: EQUAL
33070: IFTRUE 33074
33072: GO 33100
33074: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33075: LD_ADDR_VAR 0 3
33079: PUSH
33080: LD_INT 2
33082: PUSH
33083: LD_INT 3
33085: PUSH
33086: LD_INT 4
33088: PUSH
33089: LD_INT 5
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: ST_TO_ADDR
33098: GO 33923
33100: LD_INT 9
33102: DOUBLE
33103: EQUAL
33104: IFTRUE 33108
33106: GO 33134
33108: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33109: LD_ADDR_VAR 0 3
33113: PUSH
33114: LD_INT 2
33116: PUSH
33117: LD_INT 3
33119: PUSH
33120: LD_INT 4
33122: PUSH
33123: LD_INT 5
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: ST_TO_ADDR
33132: GO 33923
33134: LD_INT 7
33136: DOUBLE
33137: EQUAL
33138: IFTRUE 33142
33140: GO 33168
33142: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33143: LD_ADDR_VAR 0 3
33147: PUSH
33148: LD_INT 2
33150: PUSH
33151: LD_INT 3
33153: PUSH
33154: LD_INT 4
33156: PUSH
33157: LD_INT 5
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: ST_TO_ADDR
33166: GO 33923
33168: LD_INT 12
33170: DOUBLE
33171: EQUAL
33172: IFTRUE 33176
33174: GO 33202
33176: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33177: LD_ADDR_VAR 0 3
33181: PUSH
33182: LD_INT 2
33184: PUSH
33185: LD_INT 3
33187: PUSH
33188: LD_INT 4
33190: PUSH
33191: LD_INT 5
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: ST_TO_ADDR
33200: GO 33923
33202: LD_INT 13
33204: DOUBLE
33205: EQUAL
33206: IFTRUE 33210
33208: GO 33236
33210: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33211: LD_ADDR_VAR 0 3
33215: PUSH
33216: LD_INT 2
33218: PUSH
33219: LD_INT 3
33221: PUSH
33222: LD_INT 4
33224: PUSH
33225: LD_INT 5
33227: PUSH
33228: EMPTY
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: ST_TO_ADDR
33234: GO 33923
33236: LD_INT 14
33238: DOUBLE
33239: EQUAL
33240: IFTRUE 33244
33242: GO 33262
33244: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33245: LD_ADDR_VAR 0 3
33249: PUSH
33250: LD_INT 4
33252: PUSH
33253: LD_INT 5
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: ST_TO_ADDR
33260: GO 33923
33262: LD_INT 6
33264: DOUBLE
33265: EQUAL
33266: IFTRUE 33270
33268: GO 33288
33270: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33271: LD_ADDR_VAR 0 3
33275: PUSH
33276: LD_INT 4
33278: PUSH
33279: LD_INT 5
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: ST_TO_ADDR
33286: GO 33923
33288: LD_INT 10
33290: DOUBLE
33291: EQUAL
33292: IFTRUE 33296
33294: GO 33314
33296: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33297: LD_ADDR_VAR 0 3
33301: PUSH
33302: LD_INT 4
33304: PUSH
33305: LD_INT 5
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: ST_TO_ADDR
33312: GO 33923
33314: LD_INT 22
33316: DOUBLE
33317: EQUAL
33318: IFTRUE 33322
33320: GO 33348
33322: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33323: LD_ADDR_VAR 0 3
33327: PUSH
33328: LD_INT 11
33330: PUSH
33331: LD_INT 12
33333: PUSH
33334: LD_INT 13
33336: PUSH
33337: LD_INT 14
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: LIST
33344: LIST
33345: ST_TO_ADDR
33346: GO 33923
33348: LD_INT 23
33350: DOUBLE
33351: EQUAL
33352: IFTRUE 33356
33354: GO 33382
33356: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33357: LD_ADDR_VAR 0 3
33361: PUSH
33362: LD_INT 11
33364: PUSH
33365: LD_INT 12
33367: PUSH
33368: LD_INT 13
33370: PUSH
33371: LD_INT 14
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: LIST
33378: LIST
33379: ST_TO_ADDR
33380: GO 33923
33382: LD_INT 24
33384: DOUBLE
33385: EQUAL
33386: IFTRUE 33390
33388: GO 33416
33390: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33391: LD_ADDR_VAR 0 3
33395: PUSH
33396: LD_INT 11
33398: PUSH
33399: LD_INT 12
33401: PUSH
33402: LD_INT 13
33404: PUSH
33405: LD_INT 14
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: ST_TO_ADDR
33414: GO 33923
33416: LD_INT 30
33418: DOUBLE
33419: EQUAL
33420: IFTRUE 33424
33422: GO 33450
33424: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33425: LD_ADDR_VAR 0 3
33429: PUSH
33430: LD_INT 11
33432: PUSH
33433: LD_INT 12
33435: PUSH
33436: LD_INT 13
33438: PUSH
33439: LD_INT 14
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: ST_TO_ADDR
33448: GO 33923
33450: LD_INT 25
33452: DOUBLE
33453: EQUAL
33454: IFTRUE 33458
33456: GO 33476
33458: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33459: LD_ADDR_VAR 0 3
33463: PUSH
33464: LD_INT 13
33466: PUSH
33467: LD_INT 14
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: ST_TO_ADDR
33474: GO 33923
33476: LD_INT 27
33478: DOUBLE
33479: EQUAL
33480: IFTRUE 33484
33482: GO 33502
33484: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33485: LD_ADDR_VAR 0 3
33489: PUSH
33490: LD_INT 13
33492: PUSH
33493: LD_INT 14
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: ST_TO_ADDR
33500: GO 33923
33502: LD_INT 28
33504: DOUBLE
33505: EQUAL
33506: IFTRUE 33510
33508: GO 33528
33510: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33511: LD_ADDR_VAR 0 3
33515: PUSH
33516: LD_INT 13
33518: PUSH
33519: LD_INT 14
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: ST_TO_ADDR
33526: GO 33923
33528: LD_INT 29
33530: DOUBLE
33531: EQUAL
33532: IFTRUE 33536
33534: GO 33554
33536: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33537: LD_ADDR_VAR 0 3
33541: PUSH
33542: LD_INT 13
33544: PUSH
33545: LD_INT 14
33547: PUSH
33548: EMPTY
33549: LIST
33550: LIST
33551: ST_TO_ADDR
33552: GO 33923
33554: LD_INT 31
33556: DOUBLE
33557: EQUAL
33558: IFTRUE 33562
33560: GO 33580
33562: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33563: LD_ADDR_VAR 0 3
33567: PUSH
33568: LD_INT 13
33570: PUSH
33571: LD_INT 14
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: ST_TO_ADDR
33578: GO 33923
33580: LD_INT 26
33582: DOUBLE
33583: EQUAL
33584: IFTRUE 33588
33586: GO 33606
33588: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33589: LD_ADDR_VAR 0 3
33593: PUSH
33594: LD_INT 13
33596: PUSH
33597: LD_INT 14
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: ST_TO_ADDR
33604: GO 33923
33606: LD_INT 42
33608: DOUBLE
33609: EQUAL
33610: IFTRUE 33614
33612: GO 33640
33614: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33615: LD_ADDR_VAR 0 3
33619: PUSH
33620: LD_INT 21
33622: PUSH
33623: LD_INT 22
33625: PUSH
33626: LD_INT 23
33628: PUSH
33629: LD_INT 24
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: LIST
33636: LIST
33637: ST_TO_ADDR
33638: GO 33923
33640: LD_INT 43
33642: DOUBLE
33643: EQUAL
33644: IFTRUE 33648
33646: GO 33674
33648: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33649: LD_ADDR_VAR 0 3
33653: PUSH
33654: LD_INT 21
33656: PUSH
33657: LD_INT 22
33659: PUSH
33660: LD_INT 23
33662: PUSH
33663: LD_INT 24
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: ST_TO_ADDR
33672: GO 33923
33674: LD_INT 44
33676: DOUBLE
33677: EQUAL
33678: IFTRUE 33682
33680: GO 33708
33682: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33683: LD_ADDR_VAR 0 3
33687: PUSH
33688: LD_INT 21
33690: PUSH
33691: LD_INT 22
33693: PUSH
33694: LD_INT 23
33696: PUSH
33697: LD_INT 24
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: ST_TO_ADDR
33706: GO 33923
33708: LD_INT 45
33710: DOUBLE
33711: EQUAL
33712: IFTRUE 33716
33714: GO 33742
33716: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33717: LD_ADDR_VAR 0 3
33721: PUSH
33722: LD_INT 21
33724: PUSH
33725: LD_INT 22
33727: PUSH
33728: LD_INT 23
33730: PUSH
33731: LD_INT 24
33733: PUSH
33734: EMPTY
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: ST_TO_ADDR
33740: GO 33923
33742: LD_INT 49
33744: DOUBLE
33745: EQUAL
33746: IFTRUE 33750
33748: GO 33776
33750: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33751: LD_ADDR_VAR 0 3
33755: PUSH
33756: LD_INT 21
33758: PUSH
33759: LD_INT 22
33761: PUSH
33762: LD_INT 23
33764: PUSH
33765: LD_INT 24
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: ST_TO_ADDR
33774: GO 33923
33776: LD_INT 51
33778: DOUBLE
33779: EQUAL
33780: IFTRUE 33784
33782: GO 33810
33784: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33785: LD_ADDR_VAR 0 3
33789: PUSH
33790: LD_INT 21
33792: PUSH
33793: LD_INT 22
33795: PUSH
33796: LD_INT 23
33798: PUSH
33799: LD_INT 24
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: LIST
33806: LIST
33807: ST_TO_ADDR
33808: GO 33923
33810: LD_INT 52
33812: DOUBLE
33813: EQUAL
33814: IFTRUE 33818
33816: GO 33844
33818: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33819: LD_ADDR_VAR 0 3
33823: PUSH
33824: LD_INT 21
33826: PUSH
33827: LD_INT 22
33829: PUSH
33830: LD_INT 23
33832: PUSH
33833: LD_INT 24
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: ST_TO_ADDR
33842: GO 33923
33844: LD_INT 53
33846: DOUBLE
33847: EQUAL
33848: IFTRUE 33852
33850: GO 33870
33852: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33853: LD_ADDR_VAR 0 3
33857: PUSH
33858: LD_INT 23
33860: PUSH
33861: LD_INT 24
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: ST_TO_ADDR
33868: GO 33923
33870: LD_INT 46
33872: DOUBLE
33873: EQUAL
33874: IFTRUE 33878
33876: GO 33896
33878: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33879: LD_ADDR_VAR 0 3
33883: PUSH
33884: LD_INT 23
33886: PUSH
33887: LD_INT 24
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: ST_TO_ADDR
33894: GO 33923
33896: LD_INT 47
33898: DOUBLE
33899: EQUAL
33900: IFTRUE 33904
33902: GO 33922
33904: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33905: LD_ADDR_VAR 0 3
33909: PUSH
33910: LD_INT 23
33912: PUSH
33913: LD_INT 24
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: ST_TO_ADDR
33920: GO 33923
33922: POP
// result := ( chassis in result ) ;
33923: LD_ADDR_VAR 0 3
33927: PUSH
33928: LD_VAR 0 1
33932: PUSH
33933: LD_VAR 0 3
33937: IN
33938: ST_TO_ADDR
// end ;
33939: LD_VAR 0 3
33943: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33944: LD_INT 0
33946: PPUSH
33947: PPUSH
33948: PPUSH
33949: PPUSH
33950: PPUSH
33951: PPUSH
33952: PPUSH
// result := array ;
33953: LD_ADDR_VAR 0 5
33957: PUSH
33958: LD_VAR 0 1
33962: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33963: LD_VAR 0 1
33967: NOT
33968: PUSH
33969: LD_VAR 0 2
33973: NOT
33974: OR
33975: PUSH
33976: LD_VAR 0 3
33980: NOT
33981: OR
33982: PUSH
33983: LD_VAR 0 2
33987: PUSH
33988: LD_VAR 0 1
33992: GREATER
33993: OR
33994: PUSH
33995: LD_VAR 0 3
33999: PUSH
34000: LD_VAR 0 1
34004: GREATER
34005: OR
34006: IFFALSE 34010
// exit ;
34008: GO 34306
// if direction then
34010: LD_VAR 0 4
34014: IFFALSE 34078
// begin d := 1 ;
34016: LD_ADDR_VAR 0 9
34020: PUSH
34021: LD_INT 1
34023: ST_TO_ADDR
// if i_from > i_to then
34024: LD_VAR 0 2
34028: PUSH
34029: LD_VAR 0 3
34033: GREATER
34034: IFFALSE 34060
// length := ( array - i_from ) + i_to else
34036: LD_ADDR_VAR 0 11
34040: PUSH
34041: LD_VAR 0 1
34045: PUSH
34046: LD_VAR 0 2
34050: MINUS
34051: PUSH
34052: LD_VAR 0 3
34056: PLUS
34057: ST_TO_ADDR
34058: GO 34076
// length := i_to - i_from ;
34060: LD_ADDR_VAR 0 11
34064: PUSH
34065: LD_VAR 0 3
34069: PUSH
34070: LD_VAR 0 2
34074: MINUS
34075: ST_TO_ADDR
// end else
34076: GO 34139
// begin d := - 1 ;
34078: LD_ADDR_VAR 0 9
34082: PUSH
34083: LD_INT 1
34085: NEG
34086: ST_TO_ADDR
// if i_from > i_to then
34087: LD_VAR 0 2
34091: PUSH
34092: LD_VAR 0 3
34096: GREATER
34097: IFFALSE 34117
// length := i_from - i_to else
34099: LD_ADDR_VAR 0 11
34103: PUSH
34104: LD_VAR 0 2
34108: PUSH
34109: LD_VAR 0 3
34113: MINUS
34114: ST_TO_ADDR
34115: GO 34139
// length := ( array - i_to ) + i_from ;
34117: LD_ADDR_VAR 0 11
34121: PUSH
34122: LD_VAR 0 1
34126: PUSH
34127: LD_VAR 0 3
34131: MINUS
34132: PUSH
34133: LD_VAR 0 2
34137: PLUS
34138: ST_TO_ADDR
// end ; if not length then
34139: LD_VAR 0 11
34143: NOT
34144: IFFALSE 34148
// exit ;
34146: GO 34306
// tmp := array ;
34148: LD_ADDR_VAR 0 10
34152: PUSH
34153: LD_VAR 0 1
34157: ST_TO_ADDR
// for i = 1 to length do
34158: LD_ADDR_VAR 0 6
34162: PUSH
34163: DOUBLE
34164: LD_INT 1
34166: DEC
34167: ST_TO_ADDR
34168: LD_VAR 0 11
34172: PUSH
34173: FOR_TO
34174: IFFALSE 34294
// begin for j = 1 to array do
34176: LD_ADDR_VAR 0 7
34180: PUSH
34181: DOUBLE
34182: LD_INT 1
34184: DEC
34185: ST_TO_ADDR
34186: LD_VAR 0 1
34190: PUSH
34191: FOR_TO
34192: IFFALSE 34280
// begin k := j + d ;
34194: LD_ADDR_VAR 0 8
34198: PUSH
34199: LD_VAR 0 7
34203: PUSH
34204: LD_VAR 0 9
34208: PLUS
34209: ST_TO_ADDR
// if k > array then
34210: LD_VAR 0 8
34214: PUSH
34215: LD_VAR 0 1
34219: GREATER
34220: IFFALSE 34230
// k := 1 ;
34222: LD_ADDR_VAR 0 8
34226: PUSH
34227: LD_INT 1
34229: ST_TO_ADDR
// if not k then
34230: LD_VAR 0 8
34234: NOT
34235: IFFALSE 34247
// k := array ;
34237: LD_ADDR_VAR 0 8
34241: PUSH
34242: LD_VAR 0 1
34246: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34247: LD_ADDR_VAR 0 10
34251: PUSH
34252: LD_VAR 0 10
34256: PPUSH
34257: LD_VAR 0 8
34261: PPUSH
34262: LD_VAR 0 1
34266: PUSH
34267: LD_VAR 0 7
34271: ARRAY
34272: PPUSH
34273: CALL_OW 1
34277: ST_TO_ADDR
// end ;
34278: GO 34191
34280: POP
34281: POP
// array := tmp ;
34282: LD_ADDR_VAR 0 1
34286: PUSH
34287: LD_VAR 0 10
34291: ST_TO_ADDR
// end ;
34292: GO 34173
34294: POP
34295: POP
// result := array ;
34296: LD_ADDR_VAR 0 5
34300: PUSH
34301: LD_VAR 0 1
34305: ST_TO_ADDR
// end ;
34306: LD_VAR 0 5
34310: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34311: LD_INT 0
34313: PPUSH
34314: PPUSH
// result := 0 ;
34315: LD_ADDR_VAR 0 3
34319: PUSH
34320: LD_INT 0
34322: ST_TO_ADDR
// if not array or not value in array then
34323: LD_VAR 0 1
34327: NOT
34328: PUSH
34329: LD_VAR 0 2
34333: PUSH
34334: LD_VAR 0 1
34338: IN
34339: NOT
34340: OR
34341: IFFALSE 34345
// exit ;
34343: GO 34399
// for i = 1 to array do
34345: LD_ADDR_VAR 0 4
34349: PUSH
34350: DOUBLE
34351: LD_INT 1
34353: DEC
34354: ST_TO_ADDR
34355: LD_VAR 0 1
34359: PUSH
34360: FOR_TO
34361: IFFALSE 34397
// if value = array [ i ] then
34363: LD_VAR 0 2
34367: PUSH
34368: LD_VAR 0 1
34372: PUSH
34373: LD_VAR 0 4
34377: ARRAY
34378: EQUAL
34379: IFFALSE 34395
// begin result := i ;
34381: LD_ADDR_VAR 0 3
34385: PUSH
34386: LD_VAR 0 4
34390: ST_TO_ADDR
// exit ;
34391: POP
34392: POP
34393: GO 34399
// end ;
34395: GO 34360
34397: POP
34398: POP
// end ;
34399: LD_VAR 0 3
34403: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34404: LD_INT 0
34406: PPUSH
// vc_chassis := chassis ;
34407: LD_ADDR_OWVAR 37
34411: PUSH
34412: LD_VAR 0 1
34416: ST_TO_ADDR
// vc_engine := engine ;
34417: LD_ADDR_OWVAR 39
34421: PUSH
34422: LD_VAR 0 2
34426: ST_TO_ADDR
// vc_control := control ;
34427: LD_ADDR_OWVAR 38
34431: PUSH
34432: LD_VAR 0 3
34436: ST_TO_ADDR
// vc_weapon := weapon ;
34437: LD_ADDR_OWVAR 40
34441: PUSH
34442: LD_VAR 0 4
34446: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34447: LD_ADDR_OWVAR 41
34451: PUSH
34452: LD_VAR 0 5
34456: ST_TO_ADDR
// end ;
34457: LD_VAR 0 6
34461: RET
// export function WantPlant ( unit ) ; var task ; begin
34462: LD_INT 0
34464: PPUSH
34465: PPUSH
// result := false ;
34466: LD_ADDR_VAR 0 2
34470: PUSH
34471: LD_INT 0
34473: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34474: LD_ADDR_VAR 0 3
34478: PUSH
34479: LD_VAR 0 1
34483: PPUSH
34484: CALL_OW 437
34488: ST_TO_ADDR
// if task then
34489: LD_VAR 0 3
34493: IFFALSE 34521
// if task [ 1 ] [ 1 ] = p then
34495: LD_VAR 0 3
34499: PUSH
34500: LD_INT 1
34502: ARRAY
34503: PUSH
34504: LD_INT 1
34506: ARRAY
34507: PUSH
34508: LD_STRING p
34510: EQUAL
34511: IFFALSE 34521
// result := true ;
34513: LD_ADDR_VAR 0 2
34517: PUSH
34518: LD_INT 1
34520: ST_TO_ADDR
// end ;
34521: LD_VAR 0 2
34525: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34526: LD_INT 0
34528: PPUSH
34529: PPUSH
34530: PPUSH
34531: PPUSH
// if pos < 1 then
34532: LD_VAR 0 2
34536: PUSH
34537: LD_INT 1
34539: LESS
34540: IFFALSE 34544
// exit ;
34542: GO 34847
// if pos = 1 then
34544: LD_VAR 0 2
34548: PUSH
34549: LD_INT 1
34551: EQUAL
34552: IFFALSE 34585
// result := Replace ( arr , pos [ 1 ] , value ) else
34554: LD_ADDR_VAR 0 4
34558: PUSH
34559: LD_VAR 0 1
34563: PPUSH
34564: LD_VAR 0 2
34568: PUSH
34569: LD_INT 1
34571: ARRAY
34572: PPUSH
34573: LD_VAR 0 3
34577: PPUSH
34578: CALL_OW 1
34582: ST_TO_ADDR
34583: GO 34847
// begin tmp := arr ;
34585: LD_ADDR_VAR 0 6
34589: PUSH
34590: LD_VAR 0 1
34594: ST_TO_ADDR
// s_arr := [ tmp ] ;
34595: LD_ADDR_VAR 0 7
34599: PUSH
34600: LD_VAR 0 6
34604: PUSH
34605: EMPTY
34606: LIST
34607: ST_TO_ADDR
// for i = 1 to pos - 1 do
34608: LD_ADDR_VAR 0 5
34612: PUSH
34613: DOUBLE
34614: LD_INT 1
34616: DEC
34617: ST_TO_ADDR
34618: LD_VAR 0 2
34622: PUSH
34623: LD_INT 1
34625: MINUS
34626: PUSH
34627: FOR_TO
34628: IFFALSE 34673
// begin tmp := tmp [ pos [ i ] ] ;
34630: LD_ADDR_VAR 0 6
34634: PUSH
34635: LD_VAR 0 6
34639: PUSH
34640: LD_VAR 0 2
34644: PUSH
34645: LD_VAR 0 5
34649: ARRAY
34650: ARRAY
34651: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34652: LD_ADDR_VAR 0 7
34656: PUSH
34657: LD_VAR 0 7
34661: PUSH
34662: LD_VAR 0 6
34666: PUSH
34667: EMPTY
34668: LIST
34669: ADD
34670: ST_TO_ADDR
// end ;
34671: GO 34627
34673: POP
34674: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34675: LD_ADDR_VAR 0 6
34679: PUSH
34680: LD_VAR 0 6
34684: PPUSH
34685: LD_VAR 0 2
34689: PUSH
34690: LD_VAR 0 2
34694: ARRAY
34695: PPUSH
34696: LD_VAR 0 3
34700: PPUSH
34701: CALL_OW 1
34705: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34706: LD_ADDR_VAR 0 7
34710: PUSH
34711: LD_VAR 0 7
34715: PPUSH
34716: LD_VAR 0 7
34720: PPUSH
34721: LD_VAR 0 6
34725: PPUSH
34726: CALL_OW 1
34730: ST_TO_ADDR
// for i = s_arr downto 2 do
34731: LD_ADDR_VAR 0 5
34735: PUSH
34736: DOUBLE
34737: LD_VAR 0 7
34741: INC
34742: ST_TO_ADDR
34743: LD_INT 2
34745: PUSH
34746: FOR_DOWNTO
34747: IFFALSE 34831
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34749: LD_ADDR_VAR 0 6
34753: PUSH
34754: LD_VAR 0 7
34758: PUSH
34759: LD_VAR 0 5
34763: PUSH
34764: LD_INT 1
34766: MINUS
34767: ARRAY
34768: PPUSH
34769: LD_VAR 0 2
34773: PUSH
34774: LD_VAR 0 5
34778: PUSH
34779: LD_INT 1
34781: MINUS
34782: ARRAY
34783: PPUSH
34784: LD_VAR 0 7
34788: PUSH
34789: LD_VAR 0 5
34793: ARRAY
34794: PPUSH
34795: CALL_OW 1
34799: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34800: LD_ADDR_VAR 0 7
34804: PUSH
34805: LD_VAR 0 7
34809: PPUSH
34810: LD_VAR 0 5
34814: PUSH
34815: LD_INT 1
34817: MINUS
34818: PPUSH
34819: LD_VAR 0 6
34823: PPUSH
34824: CALL_OW 1
34828: ST_TO_ADDR
// end ;
34829: GO 34746
34831: POP
34832: POP
// result := s_arr [ 1 ] ;
34833: LD_ADDR_VAR 0 4
34837: PUSH
34838: LD_VAR 0 7
34842: PUSH
34843: LD_INT 1
34845: ARRAY
34846: ST_TO_ADDR
// end ; end ;
34847: LD_VAR 0 4
34851: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34852: LD_INT 0
34854: PPUSH
34855: PPUSH
// if not list then
34856: LD_VAR 0 1
34860: NOT
34861: IFFALSE 34865
// exit ;
34863: GO 34956
// i := list [ pos1 ] ;
34865: LD_ADDR_VAR 0 5
34869: PUSH
34870: LD_VAR 0 1
34874: PUSH
34875: LD_VAR 0 2
34879: ARRAY
34880: ST_TO_ADDR
// if not i then
34881: LD_VAR 0 5
34885: NOT
34886: IFFALSE 34890
// exit ;
34888: GO 34956
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34890: LD_ADDR_VAR 0 1
34894: PUSH
34895: LD_VAR 0 1
34899: PPUSH
34900: LD_VAR 0 2
34904: PPUSH
34905: LD_VAR 0 1
34909: PUSH
34910: LD_VAR 0 3
34914: ARRAY
34915: PPUSH
34916: CALL_OW 1
34920: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34921: LD_ADDR_VAR 0 1
34925: PUSH
34926: LD_VAR 0 1
34930: PPUSH
34931: LD_VAR 0 3
34935: PPUSH
34936: LD_VAR 0 5
34940: PPUSH
34941: CALL_OW 1
34945: ST_TO_ADDR
// result := list ;
34946: LD_ADDR_VAR 0 4
34950: PUSH
34951: LD_VAR 0 1
34955: ST_TO_ADDR
// end ;
34956: LD_VAR 0 4
34960: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34961: LD_INT 0
34963: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34964: LD_ADDR_VAR 0 5
34968: PUSH
34969: LD_VAR 0 1
34973: PPUSH
34974: CALL_OW 250
34978: PPUSH
34979: LD_VAR 0 1
34983: PPUSH
34984: CALL_OW 251
34988: PPUSH
34989: LD_VAR 0 2
34993: PPUSH
34994: LD_VAR 0 3
34998: PPUSH
34999: LD_VAR 0 4
35003: PPUSH
35004: CALL 35014 0 5
35008: ST_TO_ADDR
// end ;
35009: LD_VAR 0 5
35013: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35014: LD_INT 0
35016: PPUSH
35017: PPUSH
35018: PPUSH
35019: PPUSH
// if not list then
35020: LD_VAR 0 3
35024: NOT
35025: IFFALSE 35029
// exit ;
35027: GO 35417
// result := [ ] ;
35029: LD_ADDR_VAR 0 6
35033: PUSH
35034: EMPTY
35035: ST_TO_ADDR
// for i in list do
35036: LD_ADDR_VAR 0 7
35040: PUSH
35041: LD_VAR 0 3
35045: PUSH
35046: FOR_IN
35047: IFFALSE 35249
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35049: LD_ADDR_VAR 0 9
35053: PUSH
35054: LD_VAR 0 7
35058: PPUSH
35059: LD_VAR 0 1
35063: PPUSH
35064: LD_VAR 0 2
35068: PPUSH
35069: CALL_OW 297
35073: ST_TO_ADDR
// if not result then
35074: LD_VAR 0 6
35078: NOT
35079: IFFALSE 35105
// result := [ [ i , tmp ] ] else
35081: LD_ADDR_VAR 0 6
35085: PUSH
35086: LD_VAR 0 7
35090: PUSH
35091: LD_VAR 0 9
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: PUSH
35100: EMPTY
35101: LIST
35102: ST_TO_ADDR
35103: GO 35247
// begin if result [ result ] [ 2 ] < tmp then
35105: LD_VAR 0 6
35109: PUSH
35110: LD_VAR 0 6
35114: ARRAY
35115: PUSH
35116: LD_INT 2
35118: ARRAY
35119: PUSH
35120: LD_VAR 0 9
35124: LESS
35125: IFFALSE 35167
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35127: LD_ADDR_VAR 0 6
35131: PUSH
35132: LD_VAR 0 6
35136: PPUSH
35137: LD_VAR 0 6
35141: PUSH
35142: LD_INT 1
35144: PLUS
35145: PPUSH
35146: LD_VAR 0 7
35150: PUSH
35151: LD_VAR 0 9
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: PPUSH
35160: CALL_OW 2
35164: ST_TO_ADDR
35165: GO 35247
// for j = 1 to result do
35167: LD_ADDR_VAR 0 8
35171: PUSH
35172: DOUBLE
35173: LD_INT 1
35175: DEC
35176: ST_TO_ADDR
35177: LD_VAR 0 6
35181: PUSH
35182: FOR_TO
35183: IFFALSE 35245
// begin if tmp < result [ j ] [ 2 ] then
35185: LD_VAR 0 9
35189: PUSH
35190: LD_VAR 0 6
35194: PUSH
35195: LD_VAR 0 8
35199: ARRAY
35200: PUSH
35201: LD_INT 2
35203: ARRAY
35204: LESS
35205: IFFALSE 35243
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35207: LD_ADDR_VAR 0 6
35211: PUSH
35212: LD_VAR 0 6
35216: PPUSH
35217: LD_VAR 0 8
35221: PPUSH
35222: LD_VAR 0 7
35226: PUSH
35227: LD_VAR 0 9
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PPUSH
35236: CALL_OW 2
35240: ST_TO_ADDR
// break ;
35241: GO 35245
// end ; end ;
35243: GO 35182
35245: POP
35246: POP
// end ; end ;
35247: GO 35046
35249: POP
35250: POP
// if result and not asc then
35251: LD_VAR 0 6
35255: PUSH
35256: LD_VAR 0 4
35260: NOT
35261: AND
35262: IFFALSE 35337
// begin tmp := result ;
35264: LD_ADDR_VAR 0 9
35268: PUSH
35269: LD_VAR 0 6
35273: ST_TO_ADDR
// for i = tmp downto 1 do
35274: LD_ADDR_VAR 0 7
35278: PUSH
35279: DOUBLE
35280: LD_VAR 0 9
35284: INC
35285: ST_TO_ADDR
35286: LD_INT 1
35288: PUSH
35289: FOR_DOWNTO
35290: IFFALSE 35335
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35292: LD_ADDR_VAR 0 6
35296: PUSH
35297: LD_VAR 0 6
35301: PPUSH
35302: LD_VAR 0 9
35306: PUSH
35307: LD_VAR 0 7
35311: MINUS
35312: PUSH
35313: LD_INT 1
35315: PLUS
35316: PPUSH
35317: LD_VAR 0 9
35321: PUSH
35322: LD_VAR 0 7
35326: ARRAY
35327: PPUSH
35328: CALL_OW 1
35332: ST_TO_ADDR
35333: GO 35289
35335: POP
35336: POP
// end ; tmp := [ ] ;
35337: LD_ADDR_VAR 0 9
35341: PUSH
35342: EMPTY
35343: ST_TO_ADDR
// if mode then
35344: LD_VAR 0 5
35348: IFFALSE 35417
// begin for i = 1 to result do
35350: LD_ADDR_VAR 0 7
35354: PUSH
35355: DOUBLE
35356: LD_INT 1
35358: DEC
35359: ST_TO_ADDR
35360: LD_VAR 0 6
35364: PUSH
35365: FOR_TO
35366: IFFALSE 35405
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35368: LD_ADDR_VAR 0 9
35372: PUSH
35373: LD_VAR 0 9
35377: PPUSH
35378: LD_VAR 0 7
35382: PPUSH
35383: LD_VAR 0 6
35387: PUSH
35388: LD_VAR 0 7
35392: ARRAY
35393: PUSH
35394: LD_INT 1
35396: ARRAY
35397: PPUSH
35398: CALL_OW 1
35402: ST_TO_ADDR
35403: GO 35365
35405: POP
35406: POP
// result := tmp ;
35407: LD_ADDR_VAR 0 6
35411: PUSH
35412: LD_VAR 0 9
35416: ST_TO_ADDR
// end ; end ;
35417: LD_VAR 0 6
35421: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35422: LD_INT 0
35424: PPUSH
35425: PPUSH
35426: PPUSH
35427: PPUSH
35428: PPUSH
35429: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35430: LD_ADDR_VAR 0 5
35434: PUSH
35435: LD_INT 0
35437: PUSH
35438: LD_INT 0
35440: PUSH
35441: LD_INT 0
35443: PUSH
35444: EMPTY
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: LIST
35450: LIST
35451: ST_TO_ADDR
// if not x or not y then
35452: LD_VAR 0 2
35456: NOT
35457: PUSH
35458: LD_VAR 0 3
35462: NOT
35463: OR
35464: IFFALSE 35468
// exit ;
35466: GO 37114
// if not range then
35468: LD_VAR 0 4
35472: NOT
35473: IFFALSE 35483
// range := 10 ;
35475: LD_ADDR_VAR 0 4
35479: PUSH
35480: LD_INT 10
35482: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35483: LD_ADDR_VAR 0 8
35487: PUSH
35488: LD_INT 81
35490: PUSH
35491: LD_VAR 0 1
35495: PUSH
35496: EMPTY
35497: LIST
35498: LIST
35499: PUSH
35500: LD_INT 92
35502: PUSH
35503: LD_VAR 0 2
35507: PUSH
35508: LD_VAR 0 3
35512: PUSH
35513: LD_VAR 0 4
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: LIST
35522: LIST
35523: PUSH
35524: LD_INT 3
35526: PUSH
35527: LD_INT 21
35529: PUSH
35530: LD_INT 3
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: LIST
35545: PPUSH
35546: CALL_OW 69
35550: ST_TO_ADDR
// if not tmp then
35551: LD_VAR 0 8
35555: NOT
35556: IFFALSE 35560
// exit ;
35558: GO 37114
// for i in tmp do
35560: LD_ADDR_VAR 0 6
35564: PUSH
35565: LD_VAR 0 8
35569: PUSH
35570: FOR_IN
35571: IFFALSE 37089
// begin points := [ 0 , 0 , 0 ] ;
35573: LD_ADDR_VAR 0 9
35577: PUSH
35578: LD_INT 0
35580: PUSH
35581: LD_INT 0
35583: PUSH
35584: LD_INT 0
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: LIST
35591: ST_TO_ADDR
// bpoints := 1 ;
35592: LD_ADDR_VAR 0 10
35596: PUSH
35597: LD_INT 1
35599: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35600: LD_VAR 0 6
35604: PPUSH
35605: CALL_OW 247
35609: PUSH
35610: LD_INT 1
35612: DOUBLE
35613: EQUAL
35614: IFTRUE 35618
35616: GO 36196
35618: POP
// begin if GetClass ( i ) = 1 then
35619: LD_VAR 0 6
35623: PPUSH
35624: CALL_OW 257
35628: PUSH
35629: LD_INT 1
35631: EQUAL
35632: IFFALSE 35653
// points := [ 10 , 5 , 3 ] ;
35634: LD_ADDR_VAR 0 9
35638: PUSH
35639: LD_INT 10
35641: PUSH
35642: LD_INT 5
35644: PUSH
35645: LD_INT 3
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: LIST
35652: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35653: LD_VAR 0 6
35657: PPUSH
35658: CALL_OW 257
35662: PUSH
35663: LD_INT 2
35665: PUSH
35666: LD_INT 3
35668: PUSH
35669: LD_INT 4
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: LIST
35676: IN
35677: IFFALSE 35698
// points := [ 3 , 2 , 1 ] ;
35679: LD_ADDR_VAR 0 9
35683: PUSH
35684: LD_INT 3
35686: PUSH
35687: LD_INT 2
35689: PUSH
35690: LD_INT 1
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: LIST
35697: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35698: LD_VAR 0 6
35702: PPUSH
35703: CALL_OW 257
35707: PUSH
35708: LD_INT 5
35710: EQUAL
35711: IFFALSE 35732
// points := [ 130 , 5 , 2 ] ;
35713: LD_ADDR_VAR 0 9
35717: PUSH
35718: LD_INT 130
35720: PUSH
35721: LD_INT 5
35723: PUSH
35724: LD_INT 2
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: LIST
35731: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35732: LD_VAR 0 6
35736: PPUSH
35737: CALL_OW 257
35741: PUSH
35742: LD_INT 8
35744: EQUAL
35745: IFFALSE 35766
// points := [ 35 , 35 , 30 ] ;
35747: LD_ADDR_VAR 0 9
35751: PUSH
35752: LD_INT 35
35754: PUSH
35755: LD_INT 35
35757: PUSH
35758: LD_INT 30
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: LIST
35765: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35766: LD_VAR 0 6
35770: PPUSH
35771: CALL_OW 257
35775: PUSH
35776: LD_INT 9
35778: EQUAL
35779: IFFALSE 35800
// points := [ 20 , 55 , 40 ] ;
35781: LD_ADDR_VAR 0 9
35785: PUSH
35786: LD_INT 20
35788: PUSH
35789: LD_INT 55
35791: PUSH
35792: LD_INT 40
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: LIST
35799: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35800: LD_VAR 0 6
35804: PPUSH
35805: CALL_OW 257
35809: PUSH
35810: LD_INT 12
35812: PUSH
35813: LD_INT 16
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: IN
35820: IFFALSE 35841
// points := [ 5 , 3 , 2 ] ;
35822: LD_ADDR_VAR 0 9
35826: PUSH
35827: LD_INT 5
35829: PUSH
35830: LD_INT 3
35832: PUSH
35833: LD_INT 2
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: LIST
35840: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35841: LD_VAR 0 6
35845: PPUSH
35846: CALL_OW 257
35850: PUSH
35851: LD_INT 17
35853: EQUAL
35854: IFFALSE 35875
// points := [ 100 , 50 , 75 ] ;
35856: LD_ADDR_VAR 0 9
35860: PUSH
35861: LD_INT 100
35863: PUSH
35864: LD_INT 50
35866: PUSH
35867: LD_INT 75
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: LIST
35874: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35875: LD_VAR 0 6
35879: PPUSH
35880: CALL_OW 257
35884: PUSH
35885: LD_INT 15
35887: EQUAL
35888: IFFALSE 35909
// points := [ 10 , 5 , 3 ] ;
35890: LD_ADDR_VAR 0 9
35894: PUSH
35895: LD_INT 10
35897: PUSH
35898: LD_INT 5
35900: PUSH
35901: LD_INT 3
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: LIST
35908: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35909: LD_VAR 0 6
35913: PPUSH
35914: CALL_OW 257
35918: PUSH
35919: LD_INT 14
35921: EQUAL
35922: IFFALSE 35943
// points := [ 10 , 0 , 0 ] ;
35924: LD_ADDR_VAR 0 9
35928: PUSH
35929: LD_INT 10
35931: PUSH
35932: LD_INT 0
35934: PUSH
35935: LD_INT 0
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: LIST
35942: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35943: LD_VAR 0 6
35947: PPUSH
35948: CALL_OW 257
35952: PUSH
35953: LD_INT 11
35955: EQUAL
35956: IFFALSE 35977
// points := [ 30 , 10 , 5 ] ;
35958: LD_ADDR_VAR 0 9
35962: PUSH
35963: LD_INT 30
35965: PUSH
35966: LD_INT 10
35968: PUSH
35969: LD_INT 5
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: LIST
35976: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35977: LD_VAR 0 1
35981: PPUSH
35982: LD_INT 5
35984: PPUSH
35985: CALL_OW 321
35989: PUSH
35990: LD_INT 2
35992: EQUAL
35993: IFFALSE 36010
// bpoints := bpoints * 1.8 ;
35995: LD_ADDR_VAR 0 10
35999: PUSH
36000: LD_VAR 0 10
36004: PUSH
36005: LD_REAL  1.80000000000000E+0000
36008: MUL
36009: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36010: LD_VAR 0 6
36014: PPUSH
36015: CALL_OW 257
36019: PUSH
36020: LD_INT 1
36022: PUSH
36023: LD_INT 2
36025: PUSH
36026: LD_INT 3
36028: PUSH
36029: LD_INT 4
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: LIST
36036: LIST
36037: IN
36038: PUSH
36039: LD_VAR 0 1
36043: PPUSH
36044: LD_INT 51
36046: PPUSH
36047: CALL_OW 321
36051: PUSH
36052: LD_INT 2
36054: EQUAL
36055: AND
36056: IFFALSE 36073
// bpoints := bpoints * 1.2 ;
36058: LD_ADDR_VAR 0 10
36062: PUSH
36063: LD_VAR 0 10
36067: PUSH
36068: LD_REAL  1.20000000000000E+0000
36071: MUL
36072: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36073: LD_VAR 0 6
36077: PPUSH
36078: CALL_OW 257
36082: PUSH
36083: LD_INT 5
36085: PUSH
36086: LD_INT 7
36088: PUSH
36089: LD_INT 9
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: LIST
36096: IN
36097: PUSH
36098: LD_VAR 0 1
36102: PPUSH
36103: LD_INT 52
36105: PPUSH
36106: CALL_OW 321
36110: PUSH
36111: LD_INT 2
36113: EQUAL
36114: AND
36115: IFFALSE 36132
// bpoints := bpoints * 1.5 ;
36117: LD_ADDR_VAR 0 10
36121: PUSH
36122: LD_VAR 0 10
36126: PUSH
36127: LD_REAL  1.50000000000000E+0000
36130: MUL
36131: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36132: LD_VAR 0 1
36136: PPUSH
36137: LD_INT 66
36139: PPUSH
36140: CALL_OW 321
36144: PUSH
36145: LD_INT 2
36147: EQUAL
36148: IFFALSE 36165
// bpoints := bpoints * 1.1 ;
36150: LD_ADDR_VAR 0 10
36154: PUSH
36155: LD_VAR 0 10
36159: PUSH
36160: LD_REAL  1.10000000000000E+0000
36163: MUL
36164: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36165: LD_ADDR_VAR 0 10
36169: PUSH
36170: LD_VAR 0 10
36174: PUSH
36175: LD_VAR 0 6
36179: PPUSH
36180: LD_INT 1
36182: PPUSH
36183: CALL_OW 259
36187: PUSH
36188: LD_REAL  1.15000000000000E+0000
36191: MUL
36192: MUL
36193: ST_TO_ADDR
// end ; unit_vehicle :
36194: GO 37018
36196: LD_INT 2
36198: DOUBLE
36199: EQUAL
36200: IFTRUE 36204
36202: GO 37006
36204: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36205: LD_VAR 0 6
36209: PPUSH
36210: CALL_OW 264
36214: PUSH
36215: LD_INT 2
36217: PUSH
36218: LD_INT 42
36220: PUSH
36221: LD_INT 24
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: LIST
36228: IN
36229: IFFALSE 36250
// points := [ 25 , 5 , 3 ] ;
36231: LD_ADDR_VAR 0 9
36235: PUSH
36236: LD_INT 25
36238: PUSH
36239: LD_INT 5
36241: PUSH
36242: LD_INT 3
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: LIST
36249: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36250: LD_VAR 0 6
36254: PPUSH
36255: CALL_OW 264
36259: PUSH
36260: LD_INT 4
36262: PUSH
36263: LD_INT 43
36265: PUSH
36266: LD_INT 25
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: LIST
36273: IN
36274: IFFALSE 36295
// points := [ 40 , 15 , 5 ] ;
36276: LD_ADDR_VAR 0 9
36280: PUSH
36281: LD_INT 40
36283: PUSH
36284: LD_INT 15
36286: PUSH
36287: LD_INT 5
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: LIST
36294: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36295: LD_VAR 0 6
36299: PPUSH
36300: CALL_OW 264
36304: PUSH
36305: LD_INT 3
36307: PUSH
36308: LD_INT 23
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: IN
36315: IFFALSE 36336
// points := [ 7 , 25 , 8 ] ;
36317: LD_ADDR_VAR 0 9
36321: PUSH
36322: LD_INT 7
36324: PUSH
36325: LD_INT 25
36327: PUSH
36328: LD_INT 8
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: LIST
36335: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36336: LD_VAR 0 6
36340: PPUSH
36341: CALL_OW 264
36345: PUSH
36346: LD_INT 5
36348: PUSH
36349: LD_INT 27
36351: PUSH
36352: LD_INT 44
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: LIST
36359: IN
36360: IFFALSE 36381
// points := [ 14 , 50 , 16 ] ;
36362: LD_ADDR_VAR 0 9
36366: PUSH
36367: LD_INT 14
36369: PUSH
36370: LD_INT 50
36372: PUSH
36373: LD_INT 16
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: LIST
36380: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36381: LD_VAR 0 6
36385: PPUSH
36386: CALL_OW 264
36390: PUSH
36391: LD_INT 6
36393: PUSH
36394: LD_INT 46
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: IN
36401: IFFALSE 36422
// points := [ 32 , 120 , 70 ] ;
36403: LD_ADDR_VAR 0 9
36407: PUSH
36408: LD_INT 32
36410: PUSH
36411: LD_INT 120
36413: PUSH
36414: LD_INT 70
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: LIST
36421: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
36422: LD_VAR 0 6
36426: PPUSH
36427: CALL_OW 264
36431: PUSH
36432: LD_INT 7
36434: PUSH
36435: LD_INT 28
36437: PUSH
36438: LD_INT 45
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: LIST
36445: IN
36446: IFFALSE 36467
// points := [ 35 , 20 , 45 ] ;
36448: LD_ADDR_VAR 0 9
36452: PUSH
36453: LD_INT 35
36455: PUSH
36456: LD_INT 20
36458: PUSH
36459: LD_INT 45
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: LIST
36466: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36467: LD_VAR 0 6
36471: PPUSH
36472: CALL_OW 264
36476: PUSH
36477: LD_INT 47
36479: PUSH
36480: EMPTY
36481: LIST
36482: IN
36483: IFFALSE 36504
// points := [ 67 , 45 , 75 ] ;
36485: LD_ADDR_VAR 0 9
36489: PUSH
36490: LD_INT 67
36492: PUSH
36493: LD_INT 45
36495: PUSH
36496: LD_INT 75
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: LIST
36503: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36504: LD_VAR 0 6
36508: PPUSH
36509: CALL_OW 264
36513: PUSH
36514: LD_INT 26
36516: PUSH
36517: EMPTY
36518: LIST
36519: IN
36520: IFFALSE 36541
// points := [ 120 , 30 , 80 ] ;
36522: LD_ADDR_VAR 0 9
36526: PUSH
36527: LD_INT 120
36529: PUSH
36530: LD_INT 30
36532: PUSH
36533: LD_INT 80
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: LIST
36540: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36541: LD_VAR 0 6
36545: PPUSH
36546: CALL_OW 264
36550: PUSH
36551: LD_INT 22
36553: PUSH
36554: EMPTY
36555: LIST
36556: IN
36557: IFFALSE 36578
// points := [ 40 , 1 , 1 ] ;
36559: LD_ADDR_VAR 0 9
36563: PUSH
36564: LD_INT 40
36566: PUSH
36567: LD_INT 1
36569: PUSH
36570: LD_INT 1
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: LIST
36577: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36578: LD_VAR 0 6
36582: PPUSH
36583: CALL_OW 264
36587: PUSH
36588: LD_INT 29
36590: PUSH
36591: EMPTY
36592: LIST
36593: IN
36594: IFFALSE 36615
// points := [ 70 , 200 , 400 ] ;
36596: LD_ADDR_VAR 0 9
36600: PUSH
36601: LD_INT 70
36603: PUSH
36604: LD_INT 200
36606: PUSH
36607: LD_INT 400
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: LIST
36614: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36615: LD_VAR 0 6
36619: PPUSH
36620: CALL_OW 264
36624: PUSH
36625: LD_INT 14
36627: PUSH
36628: LD_INT 53
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: IN
36635: IFFALSE 36656
// points := [ 40 , 10 , 20 ] ;
36637: LD_ADDR_VAR 0 9
36641: PUSH
36642: LD_INT 40
36644: PUSH
36645: LD_INT 10
36647: PUSH
36648: LD_INT 20
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: LIST
36655: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36656: LD_VAR 0 6
36660: PPUSH
36661: CALL_OW 264
36665: PUSH
36666: LD_INT 9
36668: PUSH
36669: EMPTY
36670: LIST
36671: IN
36672: IFFALSE 36693
// points := [ 5 , 70 , 20 ] ;
36674: LD_ADDR_VAR 0 9
36678: PUSH
36679: LD_INT 5
36681: PUSH
36682: LD_INT 70
36684: PUSH
36685: LD_INT 20
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: LIST
36692: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36693: LD_VAR 0 6
36697: PPUSH
36698: CALL_OW 264
36702: PUSH
36703: LD_INT 10
36705: PUSH
36706: EMPTY
36707: LIST
36708: IN
36709: IFFALSE 36730
// points := [ 35 , 110 , 70 ] ;
36711: LD_ADDR_VAR 0 9
36715: PUSH
36716: LD_INT 35
36718: PUSH
36719: LD_INT 110
36721: PUSH
36722: LD_INT 70
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: LIST
36729: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36730: LD_VAR 0 6
36734: PPUSH
36735: CALL_OW 265
36739: PUSH
36740: LD_INT 25
36742: EQUAL
36743: IFFALSE 36764
// points := [ 80 , 65 , 100 ] ;
36745: LD_ADDR_VAR 0 9
36749: PUSH
36750: LD_INT 80
36752: PUSH
36753: LD_INT 65
36755: PUSH
36756: LD_INT 100
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: LIST
36763: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36764: LD_VAR 0 6
36768: PPUSH
36769: CALL_OW 263
36773: PUSH
36774: LD_INT 1
36776: EQUAL
36777: IFFALSE 36812
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36779: LD_ADDR_VAR 0 10
36783: PUSH
36784: LD_VAR 0 10
36788: PUSH
36789: LD_VAR 0 6
36793: PPUSH
36794: CALL_OW 311
36798: PPUSH
36799: LD_INT 3
36801: PPUSH
36802: CALL_OW 259
36806: PUSH
36807: LD_INT 4
36809: MUL
36810: MUL
36811: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36812: LD_VAR 0 6
36816: PPUSH
36817: CALL_OW 263
36821: PUSH
36822: LD_INT 2
36824: EQUAL
36825: IFFALSE 36876
// begin j := IsControledBy ( i ) ;
36827: LD_ADDR_VAR 0 7
36831: PUSH
36832: LD_VAR 0 6
36836: PPUSH
36837: CALL_OW 312
36841: ST_TO_ADDR
// if j then
36842: LD_VAR 0 7
36846: IFFALSE 36876
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36848: LD_ADDR_VAR 0 10
36852: PUSH
36853: LD_VAR 0 10
36857: PUSH
36858: LD_VAR 0 7
36862: PPUSH
36863: LD_INT 3
36865: PPUSH
36866: CALL_OW 259
36870: PUSH
36871: LD_INT 3
36873: MUL
36874: MUL
36875: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36876: LD_VAR 0 6
36880: PPUSH
36881: CALL_OW 264
36885: PUSH
36886: LD_INT 5
36888: PUSH
36889: LD_INT 6
36891: PUSH
36892: LD_INT 46
36894: PUSH
36895: LD_INT 44
36897: PUSH
36898: LD_INT 47
36900: PUSH
36901: LD_INT 45
36903: PUSH
36904: LD_INT 28
36906: PUSH
36907: LD_INT 7
36909: PUSH
36910: LD_INT 27
36912: PUSH
36913: LD_INT 29
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: LIST
36926: LIST
36927: IN
36928: PUSH
36929: LD_VAR 0 1
36933: PPUSH
36934: LD_INT 52
36936: PPUSH
36937: CALL_OW 321
36941: PUSH
36942: LD_INT 2
36944: EQUAL
36945: AND
36946: IFFALSE 36963
// bpoints := bpoints * 1.2 ;
36948: LD_ADDR_VAR 0 10
36952: PUSH
36953: LD_VAR 0 10
36957: PUSH
36958: LD_REAL  1.20000000000000E+0000
36961: MUL
36962: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36963: LD_VAR 0 6
36967: PPUSH
36968: CALL_OW 264
36972: PUSH
36973: LD_INT 6
36975: PUSH
36976: LD_INT 46
36978: PUSH
36979: LD_INT 47
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: LIST
36986: IN
36987: IFFALSE 37004
// bpoints := bpoints * 1.2 ;
36989: LD_ADDR_VAR 0 10
36993: PUSH
36994: LD_VAR 0 10
36998: PUSH
36999: LD_REAL  1.20000000000000E+0000
37002: MUL
37003: ST_TO_ADDR
// end ; unit_building :
37004: GO 37018
37006: LD_INT 3
37008: DOUBLE
37009: EQUAL
37010: IFTRUE 37014
37012: GO 37017
37014: POP
// ; end ;
37015: GO 37018
37017: POP
// for j = 1 to 3 do
37018: LD_ADDR_VAR 0 7
37022: PUSH
37023: DOUBLE
37024: LD_INT 1
37026: DEC
37027: ST_TO_ADDR
37028: LD_INT 3
37030: PUSH
37031: FOR_TO
37032: IFFALSE 37085
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37034: LD_ADDR_VAR 0 5
37038: PUSH
37039: LD_VAR 0 5
37043: PPUSH
37044: LD_VAR 0 7
37048: PPUSH
37049: LD_VAR 0 5
37053: PUSH
37054: LD_VAR 0 7
37058: ARRAY
37059: PUSH
37060: LD_VAR 0 9
37064: PUSH
37065: LD_VAR 0 7
37069: ARRAY
37070: PUSH
37071: LD_VAR 0 10
37075: MUL
37076: PLUS
37077: PPUSH
37078: CALL_OW 1
37082: ST_TO_ADDR
37083: GO 37031
37085: POP
37086: POP
// end ;
37087: GO 35570
37089: POP
37090: POP
// result := Replace ( result , 4 , tmp ) ;
37091: LD_ADDR_VAR 0 5
37095: PUSH
37096: LD_VAR 0 5
37100: PPUSH
37101: LD_INT 4
37103: PPUSH
37104: LD_VAR 0 8
37108: PPUSH
37109: CALL_OW 1
37113: ST_TO_ADDR
// end ;
37114: LD_VAR 0 5
37118: RET
// export function DangerAtRange ( unit , range ) ; begin
37119: LD_INT 0
37121: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37122: LD_ADDR_VAR 0 3
37126: PUSH
37127: LD_VAR 0 1
37131: PPUSH
37132: CALL_OW 255
37136: PPUSH
37137: LD_VAR 0 1
37141: PPUSH
37142: CALL_OW 250
37146: PPUSH
37147: LD_VAR 0 1
37151: PPUSH
37152: CALL_OW 251
37156: PPUSH
37157: LD_VAR 0 2
37161: PPUSH
37162: CALL 35422 0 4
37166: ST_TO_ADDR
// end ;
37167: LD_VAR 0 3
37171: RET
// export function DangerInArea ( side , area ) ; begin
37172: LD_INT 0
37174: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37175: LD_ADDR_VAR 0 3
37179: PUSH
37180: LD_VAR 0 2
37184: PPUSH
37185: LD_INT 81
37187: PUSH
37188: LD_VAR 0 1
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PPUSH
37197: CALL_OW 70
37201: ST_TO_ADDR
// end ;
37202: LD_VAR 0 3
37206: RET
// export function IsExtension ( b ) ; begin
37207: LD_INT 0
37209: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37210: LD_ADDR_VAR 0 2
37214: PUSH
37215: LD_VAR 0 1
37219: PUSH
37220: LD_INT 23
37222: PUSH
37223: LD_INT 20
37225: PUSH
37226: LD_INT 22
37228: PUSH
37229: LD_INT 17
37231: PUSH
37232: LD_INT 24
37234: PUSH
37235: LD_INT 21
37237: PUSH
37238: LD_INT 19
37240: PUSH
37241: LD_INT 16
37243: PUSH
37244: LD_INT 25
37246: PUSH
37247: LD_INT 18
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: LIST
37256: LIST
37257: LIST
37258: LIST
37259: LIST
37260: LIST
37261: IN
37262: ST_TO_ADDR
// end ;
37263: LD_VAR 0 2
37267: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37268: LD_INT 0
37270: PPUSH
37271: PPUSH
37272: PPUSH
// result := [ ] ;
37273: LD_ADDR_VAR 0 4
37277: PUSH
37278: EMPTY
37279: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37280: LD_ADDR_VAR 0 5
37284: PUSH
37285: LD_VAR 0 2
37289: PPUSH
37290: LD_INT 21
37292: PUSH
37293: LD_INT 3
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: PPUSH
37300: CALL_OW 70
37304: ST_TO_ADDR
// if not tmp then
37305: LD_VAR 0 5
37309: NOT
37310: IFFALSE 37314
// exit ;
37312: GO 37378
// if checkLink then
37314: LD_VAR 0 3
37318: IFFALSE 37368
// begin for i in tmp do
37320: LD_ADDR_VAR 0 6
37324: PUSH
37325: LD_VAR 0 5
37329: PUSH
37330: FOR_IN
37331: IFFALSE 37366
// if GetBase ( i ) <> base then
37333: LD_VAR 0 6
37337: PPUSH
37338: CALL_OW 274
37342: PUSH
37343: LD_VAR 0 1
37347: NONEQUAL
37348: IFFALSE 37364
// ComLinkToBase ( base , i ) ;
37350: LD_VAR 0 1
37354: PPUSH
37355: LD_VAR 0 6
37359: PPUSH
37360: CALL_OW 169
37364: GO 37330
37366: POP
37367: POP
// end ; result := tmp ;
37368: LD_ADDR_VAR 0 4
37372: PUSH
37373: LD_VAR 0 5
37377: ST_TO_ADDR
// end ;
37378: LD_VAR 0 4
37382: RET
// export function ComComplete ( units , b ) ; var i ; begin
37383: LD_INT 0
37385: PPUSH
37386: PPUSH
// if not units then
37387: LD_VAR 0 1
37391: NOT
37392: IFFALSE 37396
// exit ;
37394: GO 37486
// for i in units do
37396: LD_ADDR_VAR 0 4
37400: PUSH
37401: LD_VAR 0 1
37405: PUSH
37406: FOR_IN
37407: IFFALSE 37484
// if BuildingStatus ( b ) = bs_build then
37409: LD_VAR 0 2
37413: PPUSH
37414: CALL_OW 461
37418: PUSH
37419: LD_INT 1
37421: EQUAL
37422: IFFALSE 37482
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37424: LD_VAR 0 4
37428: PPUSH
37429: LD_STRING h
37431: PUSH
37432: LD_VAR 0 2
37436: PPUSH
37437: CALL_OW 250
37441: PUSH
37442: LD_VAR 0 2
37446: PPUSH
37447: CALL_OW 251
37451: PUSH
37452: LD_VAR 0 2
37456: PUSH
37457: LD_INT 0
37459: PUSH
37460: LD_INT 0
37462: PUSH
37463: LD_INT 0
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: PUSH
37475: EMPTY
37476: LIST
37477: PPUSH
37478: CALL_OW 446
37482: GO 37406
37484: POP
37485: POP
// end ;
37486: LD_VAR 0 3
37490: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37491: LD_INT 0
37493: PPUSH
37494: PPUSH
37495: PPUSH
37496: PPUSH
37497: PPUSH
37498: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
37499: LD_VAR 0 1
37503: NOT
37504: PUSH
37505: LD_VAR 0 1
37509: PPUSH
37510: CALL_OW 263
37514: PUSH
37515: LD_INT 2
37517: EQUAL
37518: NOT
37519: OR
37520: IFFALSE 37524
// exit ;
37522: GO 37840
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37524: LD_ADDR_VAR 0 6
37528: PUSH
37529: LD_INT 22
37531: PUSH
37532: LD_VAR 0 1
37536: PPUSH
37537: CALL_OW 255
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: PUSH
37546: LD_INT 2
37548: PUSH
37549: LD_INT 30
37551: PUSH
37552: LD_INT 36
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: LD_INT 34
37561: PUSH
37562: LD_INT 31
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: LIST
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: PPUSH
37578: CALL_OW 69
37582: ST_TO_ADDR
// if not tmp then
37583: LD_VAR 0 6
37587: NOT
37588: IFFALSE 37592
// exit ;
37590: GO 37840
// result := [ ] ;
37592: LD_ADDR_VAR 0 2
37596: PUSH
37597: EMPTY
37598: ST_TO_ADDR
// for i in tmp do
37599: LD_ADDR_VAR 0 3
37603: PUSH
37604: LD_VAR 0 6
37608: PUSH
37609: FOR_IN
37610: IFFALSE 37681
// begin t := UnitsInside ( i ) ;
37612: LD_ADDR_VAR 0 4
37616: PUSH
37617: LD_VAR 0 3
37621: PPUSH
37622: CALL_OW 313
37626: ST_TO_ADDR
// if t then
37627: LD_VAR 0 4
37631: IFFALSE 37679
// for j in t do
37633: LD_ADDR_VAR 0 7
37637: PUSH
37638: LD_VAR 0 4
37642: PUSH
37643: FOR_IN
37644: IFFALSE 37677
// result := Insert ( result , result + 1 , j ) ;
37646: LD_ADDR_VAR 0 2
37650: PUSH
37651: LD_VAR 0 2
37655: PPUSH
37656: LD_VAR 0 2
37660: PUSH
37661: LD_INT 1
37663: PLUS
37664: PPUSH
37665: LD_VAR 0 7
37669: PPUSH
37670: CALL_OW 2
37674: ST_TO_ADDR
37675: GO 37643
37677: POP
37678: POP
// end ;
37679: GO 37609
37681: POP
37682: POP
// if not result then
37683: LD_VAR 0 2
37687: NOT
37688: IFFALSE 37692
// exit ;
37690: GO 37840
// mech := result [ 1 ] ;
37692: LD_ADDR_VAR 0 5
37696: PUSH
37697: LD_VAR 0 2
37701: PUSH
37702: LD_INT 1
37704: ARRAY
37705: ST_TO_ADDR
// if result > 1 then
37706: LD_VAR 0 2
37710: PUSH
37711: LD_INT 1
37713: GREATER
37714: IFFALSE 37826
// for i = 2 to result do
37716: LD_ADDR_VAR 0 3
37720: PUSH
37721: DOUBLE
37722: LD_INT 2
37724: DEC
37725: ST_TO_ADDR
37726: LD_VAR 0 2
37730: PUSH
37731: FOR_TO
37732: IFFALSE 37824
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37734: LD_ADDR_VAR 0 4
37738: PUSH
37739: LD_VAR 0 2
37743: PUSH
37744: LD_VAR 0 3
37748: ARRAY
37749: PPUSH
37750: LD_INT 3
37752: PPUSH
37753: CALL_OW 259
37757: PUSH
37758: LD_VAR 0 2
37762: PUSH
37763: LD_VAR 0 3
37767: ARRAY
37768: PPUSH
37769: CALL_OW 432
37773: MINUS
37774: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37775: LD_VAR 0 4
37779: PUSH
37780: LD_VAR 0 5
37784: PPUSH
37785: LD_INT 3
37787: PPUSH
37788: CALL_OW 259
37792: PUSH
37793: LD_VAR 0 5
37797: PPUSH
37798: CALL_OW 432
37802: MINUS
37803: GREATEREQUAL
37804: IFFALSE 37822
// mech := result [ i ] ;
37806: LD_ADDR_VAR 0 5
37810: PUSH
37811: LD_VAR 0 2
37815: PUSH
37816: LD_VAR 0 3
37820: ARRAY
37821: ST_TO_ADDR
// end ;
37822: GO 37731
37824: POP
37825: POP
// ComLinkTo ( vehicle , mech ) ;
37826: LD_VAR 0 1
37830: PPUSH
37831: LD_VAR 0 5
37835: PPUSH
37836: CALL_OW 135
// end ;
37840: LD_VAR 0 2
37844: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37845: LD_INT 0
37847: PPUSH
37848: PPUSH
37849: PPUSH
37850: PPUSH
37851: PPUSH
37852: PPUSH
37853: PPUSH
37854: PPUSH
37855: PPUSH
37856: PPUSH
37857: PPUSH
37858: PPUSH
37859: PPUSH
// result := [ ] ;
37860: LD_ADDR_VAR 0 7
37864: PUSH
37865: EMPTY
37866: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37867: LD_VAR 0 1
37871: PPUSH
37872: CALL_OW 266
37876: PUSH
37877: LD_INT 0
37879: PUSH
37880: LD_INT 1
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: IN
37887: NOT
37888: IFFALSE 37892
// exit ;
37890: GO 39526
// if name then
37892: LD_VAR 0 3
37896: IFFALSE 37912
// SetBName ( base_dep , name ) ;
37898: LD_VAR 0 1
37902: PPUSH
37903: LD_VAR 0 3
37907: PPUSH
37908: CALL_OW 500
// base := GetBase ( base_dep ) ;
37912: LD_ADDR_VAR 0 15
37916: PUSH
37917: LD_VAR 0 1
37921: PPUSH
37922: CALL_OW 274
37926: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37927: LD_ADDR_VAR 0 16
37931: PUSH
37932: LD_VAR 0 1
37936: PPUSH
37937: CALL_OW 255
37941: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37942: LD_ADDR_VAR 0 17
37946: PUSH
37947: LD_VAR 0 1
37951: PPUSH
37952: CALL_OW 248
37956: ST_TO_ADDR
// if sources then
37957: LD_VAR 0 5
37961: IFFALSE 38008
// for i = 1 to 3 do
37963: LD_ADDR_VAR 0 8
37967: PUSH
37968: DOUBLE
37969: LD_INT 1
37971: DEC
37972: ST_TO_ADDR
37973: LD_INT 3
37975: PUSH
37976: FOR_TO
37977: IFFALSE 38006
// AddResourceType ( base , i , sources [ i ] ) ;
37979: LD_VAR 0 15
37983: PPUSH
37984: LD_VAR 0 8
37988: PPUSH
37989: LD_VAR 0 5
37993: PUSH
37994: LD_VAR 0 8
37998: ARRAY
37999: PPUSH
38000: CALL_OW 276
38004: GO 37976
38006: POP
38007: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38008: LD_ADDR_VAR 0 18
38012: PUSH
38013: LD_VAR 0 15
38017: PPUSH
38018: LD_VAR 0 2
38022: PPUSH
38023: LD_INT 1
38025: PPUSH
38026: CALL 37268 0 3
38030: ST_TO_ADDR
// InitHc ;
38031: CALL_OW 19
// InitUc ;
38035: CALL_OW 18
// uc_side := side ;
38039: LD_ADDR_OWVAR 20
38043: PUSH
38044: LD_VAR 0 16
38048: ST_TO_ADDR
// uc_nation := nation ;
38049: LD_ADDR_OWVAR 21
38053: PUSH
38054: LD_VAR 0 17
38058: ST_TO_ADDR
// if buildings then
38059: LD_VAR 0 18
38063: IFFALSE 39385
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38065: LD_ADDR_VAR 0 19
38069: PUSH
38070: LD_VAR 0 18
38074: PPUSH
38075: LD_INT 2
38077: PUSH
38078: LD_INT 30
38080: PUSH
38081: LD_INT 29
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: PUSH
38088: LD_INT 30
38090: PUSH
38091: LD_INT 30
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: LIST
38102: PPUSH
38103: CALL_OW 72
38107: ST_TO_ADDR
// if tmp then
38108: LD_VAR 0 19
38112: IFFALSE 38160
// for i in tmp do
38114: LD_ADDR_VAR 0 8
38118: PUSH
38119: LD_VAR 0 19
38123: PUSH
38124: FOR_IN
38125: IFFALSE 38158
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38127: LD_VAR 0 8
38131: PPUSH
38132: CALL_OW 250
38136: PPUSH
38137: LD_VAR 0 8
38141: PPUSH
38142: CALL_OW 251
38146: PPUSH
38147: LD_VAR 0 16
38151: PPUSH
38152: CALL_OW 441
38156: GO 38124
38158: POP
38159: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38160: LD_VAR 0 18
38164: PPUSH
38165: LD_INT 2
38167: PUSH
38168: LD_INT 30
38170: PUSH
38171: LD_INT 32
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: LD_INT 30
38180: PUSH
38181: LD_INT 33
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: LIST
38192: PPUSH
38193: CALL_OW 72
38197: IFFALSE 38285
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38199: LD_ADDR_VAR 0 8
38203: PUSH
38204: LD_VAR 0 18
38208: PPUSH
38209: LD_INT 2
38211: PUSH
38212: LD_INT 30
38214: PUSH
38215: LD_INT 32
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 30
38224: PUSH
38225: LD_INT 33
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: LIST
38236: PPUSH
38237: CALL_OW 72
38241: PUSH
38242: FOR_IN
38243: IFFALSE 38283
// begin if not GetBWeapon ( i ) then
38245: LD_VAR 0 8
38249: PPUSH
38250: CALL_OW 269
38254: NOT
38255: IFFALSE 38281
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38257: LD_VAR 0 8
38261: PPUSH
38262: LD_VAR 0 8
38266: PPUSH
38267: LD_VAR 0 2
38271: PPUSH
38272: CALL 39531 0 2
38276: PPUSH
38277: CALL_OW 431
// end ;
38281: GO 38242
38283: POP
38284: POP
// end ; for i = 1 to personel do
38285: LD_ADDR_VAR 0 8
38289: PUSH
38290: DOUBLE
38291: LD_INT 1
38293: DEC
38294: ST_TO_ADDR
38295: LD_VAR 0 6
38299: PUSH
38300: FOR_TO
38301: IFFALSE 39365
// begin if i > 4 then
38303: LD_VAR 0 8
38307: PUSH
38308: LD_INT 4
38310: GREATER
38311: IFFALSE 38315
// break ;
38313: GO 39365
// case i of 1 :
38315: LD_VAR 0 8
38319: PUSH
38320: LD_INT 1
38322: DOUBLE
38323: EQUAL
38324: IFTRUE 38328
38326: GO 38408
38328: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38329: LD_ADDR_VAR 0 12
38333: PUSH
38334: LD_VAR 0 18
38338: PPUSH
38339: LD_INT 22
38341: PUSH
38342: LD_VAR 0 16
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PUSH
38351: LD_INT 58
38353: PUSH
38354: EMPTY
38355: LIST
38356: PUSH
38357: LD_INT 2
38359: PUSH
38360: LD_INT 30
38362: PUSH
38363: LD_INT 32
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: LD_INT 30
38372: PUSH
38373: LD_INT 4
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: PUSH
38380: LD_INT 30
38382: PUSH
38383: LD_INT 5
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: LIST
38400: PPUSH
38401: CALL_OW 72
38405: ST_TO_ADDR
38406: GO 38630
38408: LD_INT 2
38410: DOUBLE
38411: EQUAL
38412: IFTRUE 38416
38414: GO 38478
38416: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38417: LD_ADDR_VAR 0 12
38421: PUSH
38422: LD_VAR 0 18
38426: PPUSH
38427: LD_INT 22
38429: PUSH
38430: LD_VAR 0 16
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: PUSH
38439: LD_INT 2
38441: PUSH
38442: LD_INT 30
38444: PUSH
38445: LD_INT 0
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 30
38454: PUSH
38455: LD_INT 1
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: LIST
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PPUSH
38471: CALL_OW 72
38475: ST_TO_ADDR
38476: GO 38630
38478: LD_INT 3
38480: DOUBLE
38481: EQUAL
38482: IFTRUE 38486
38484: GO 38548
38486: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38487: LD_ADDR_VAR 0 12
38491: PUSH
38492: LD_VAR 0 18
38496: PPUSH
38497: LD_INT 22
38499: PUSH
38500: LD_VAR 0 16
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 2
38511: PUSH
38512: LD_INT 30
38514: PUSH
38515: LD_INT 2
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: LD_INT 30
38524: PUSH
38525: LD_INT 3
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: LIST
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PPUSH
38541: CALL_OW 72
38545: ST_TO_ADDR
38546: GO 38630
38548: LD_INT 4
38550: DOUBLE
38551: EQUAL
38552: IFTRUE 38556
38554: GO 38629
38556: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38557: LD_ADDR_VAR 0 12
38561: PUSH
38562: LD_VAR 0 18
38566: PPUSH
38567: LD_INT 22
38569: PUSH
38570: LD_VAR 0 16
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: PUSH
38579: LD_INT 2
38581: PUSH
38582: LD_INT 30
38584: PUSH
38585: LD_INT 6
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: LD_INT 30
38594: PUSH
38595: LD_INT 7
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: PUSH
38602: LD_INT 30
38604: PUSH
38605: LD_INT 8
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: PPUSH
38622: CALL_OW 72
38626: ST_TO_ADDR
38627: GO 38630
38629: POP
// if i = 1 then
38630: LD_VAR 0 8
38634: PUSH
38635: LD_INT 1
38637: EQUAL
38638: IFFALSE 38749
// begin tmp := [ ] ;
38640: LD_ADDR_VAR 0 19
38644: PUSH
38645: EMPTY
38646: ST_TO_ADDR
// for j in f do
38647: LD_ADDR_VAR 0 9
38651: PUSH
38652: LD_VAR 0 12
38656: PUSH
38657: FOR_IN
38658: IFFALSE 38731
// if GetBType ( j ) = b_bunker then
38660: LD_VAR 0 9
38664: PPUSH
38665: CALL_OW 266
38669: PUSH
38670: LD_INT 32
38672: EQUAL
38673: IFFALSE 38700
// tmp := Insert ( tmp , 1 , j ) else
38675: LD_ADDR_VAR 0 19
38679: PUSH
38680: LD_VAR 0 19
38684: PPUSH
38685: LD_INT 1
38687: PPUSH
38688: LD_VAR 0 9
38692: PPUSH
38693: CALL_OW 2
38697: ST_TO_ADDR
38698: GO 38729
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38700: LD_ADDR_VAR 0 19
38704: PUSH
38705: LD_VAR 0 19
38709: PPUSH
38710: LD_VAR 0 19
38714: PUSH
38715: LD_INT 1
38717: PLUS
38718: PPUSH
38719: LD_VAR 0 9
38723: PPUSH
38724: CALL_OW 2
38728: ST_TO_ADDR
38729: GO 38657
38731: POP
38732: POP
// if tmp then
38733: LD_VAR 0 19
38737: IFFALSE 38749
// f := tmp ;
38739: LD_ADDR_VAR 0 12
38743: PUSH
38744: LD_VAR 0 19
38748: ST_TO_ADDR
// end ; x := personel [ i ] ;
38749: LD_ADDR_VAR 0 13
38753: PUSH
38754: LD_VAR 0 6
38758: PUSH
38759: LD_VAR 0 8
38763: ARRAY
38764: ST_TO_ADDR
// if x = - 1 then
38765: LD_VAR 0 13
38769: PUSH
38770: LD_INT 1
38772: NEG
38773: EQUAL
38774: IFFALSE 38983
// begin for j in f do
38776: LD_ADDR_VAR 0 9
38780: PUSH
38781: LD_VAR 0 12
38785: PUSH
38786: FOR_IN
38787: IFFALSE 38979
// repeat InitHc ;
38789: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38793: LD_VAR 0 9
38797: PPUSH
38798: CALL_OW 266
38802: PUSH
38803: LD_INT 5
38805: EQUAL
38806: IFFALSE 38876
// begin if UnitsInside ( j ) < 3 then
38808: LD_VAR 0 9
38812: PPUSH
38813: CALL_OW 313
38817: PUSH
38818: LD_INT 3
38820: LESS
38821: IFFALSE 38857
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38823: LD_INT 0
38825: PPUSH
38826: LD_INT 5
38828: PUSH
38829: LD_INT 8
38831: PUSH
38832: LD_INT 9
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: LIST
38839: PUSH
38840: LD_VAR 0 17
38844: ARRAY
38845: PPUSH
38846: LD_VAR 0 4
38850: PPUSH
38851: CALL_OW 380
38855: GO 38874
// PrepareHuman ( false , i , skill ) ;
38857: LD_INT 0
38859: PPUSH
38860: LD_VAR 0 8
38864: PPUSH
38865: LD_VAR 0 4
38869: PPUSH
38870: CALL_OW 380
// end else
38874: GO 38893
// PrepareHuman ( false , i , skill ) ;
38876: LD_INT 0
38878: PPUSH
38879: LD_VAR 0 8
38883: PPUSH
38884: LD_VAR 0 4
38888: PPUSH
38889: CALL_OW 380
// un := CreateHuman ;
38893: LD_ADDR_VAR 0 14
38897: PUSH
38898: CALL_OW 44
38902: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38903: LD_ADDR_VAR 0 7
38907: PUSH
38908: LD_VAR 0 7
38912: PPUSH
38913: LD_INT 1
38915: PPUSH
38916: LD_VAR 0 14
38920: PPUSH
38921: CALL_OW 2
38925: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38926: LD_VAR 0 14
38930: PPUSH
38931: LD_VAR 0 9
38935: PPUSH
38936: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38940: LD_VAR 0 9
38944: PPUSH
38945: CALL_OW 313
38949: PUSH
38950: LD_INT 6
38952: EQUAL
38953: PUSH
38954: LD_VAR 0 9
38958: PPUSH
38959: CALL_OW 266
38963: PUSH
38964: LD_INT 32
38966: PUSH
38967: LD_INT 31
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: IN
38974: OR
38975: IFFALSE 38789
38977: GO 38786
38979: POP
38980: POP
// end else
38981: GO 39363
// for j = 1 to x do
38983: LD_ADDR_VAR 0 9
38987: PUSH
38988: DOUBLE
38989: LD_INT 1
38991: DEC
38992: ST_TO_ADDR
38993: LD_VAR 0 13
38997: PUSH
38998: FOR_TO
38999: IFFALSE 39361
// begin InitHc ;
39001: CALL_OW 19
// if not f then
39005: LD_VAR 0 12
39009: NOT
39010: IFFALSE 39099
// begin PrepareHuman ( false , i , skill ) ;
39012: LD_INT 0
39014: PPUSH
39015: LD_VAR 0 8
39019: PPUSH
39020: LD_VAR 0 4
39024: PPUSH
39025: CALL_OW 380
// un := CreateHuman ;
39029: LD_ADDR_VAR 0 14
39033: PUSH
39034: CALL_OW 44
39038: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39039: LD_ADDR_VAR 0 7
39043: PUSH
39044: LD_VAR 0 7
39048: PPUSH
39049: LD_INT 1
39051: PPUSH
39052: LD_VAR 0 14
39056: PPUSH
39057: CALL_OW 2
39061: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39062: LD_VAR 0 14
39066: PPUSH
39067: LD_VAR 0 1
39071: PPUSH
39072: CALL_OW 250
39076: PPUSH
39077: LD_VAR 0 1
39081: PPUSH
39082: CALL_OW 251
39086: PPUSH
39087: LD_INT 10
39089: PPUSH
39090: LD_INT 0
39092: PPUSH
39093: CALL_OW 50
// continue ;
39097: GO 38998
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39099: LD_VAR 0 12
39103: PUSH
39104: LD_INT 1
39106: ARRAY
39107: PPUSH
39108: CALL_OW 313
39112: PUSH
39113: LD_VAR 0 12
39117: PUSH
39118: LD_INT 1
39120: ARRAY
39121: PPUSH
39122: CALL_OW 266
39126: PUSH
39127: LD_INT 32
39129: PUSH
39130: LD_INT 31
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: IN
39137: AND
39138: PUSH
39139: LD_VAR 0 12
39143: PUSH
39144: LD_INT 1
39146: ARRAY
39147: PPUSH
39148: CALL_OW 313
39152: PUSH
39153: LD_INT 6
39155: EQUAL
39156: OR
39157: IFFALSE 39177
// f := Delete ( f , 1 ) ;
39159: LD_ADDR_VAR 0 12
39163: PUSH
39164: LD_VAR 0 12
39168: PPUSH
39169: LD_INT 1
39171: PPUSH
39172: CALL_OW 3
39176: ST_TO_ADDR
// if not f then
39177: LD_VAR 0 12
39181: NOT
39182: IFFALSE 39200
// begin x := x + 2 ;
39184: LD_ADDR_VAR 0 13
39188: PUSH
39189: LD_VAR 0 13
39193: PUSH
39194: LD_INT 2
39196: PLUS
39197: ST_TO_ADDR
// continue ;
39198: GO 38998
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39200: LD_VAR 0 12
39204: PUSH
39205: LD_INT 1
39207: ARRAY
39208: PPUSH
39209: CALL_OW 266
39213: PUSH
39214: LD_INT 5
39216: EQUAL
39217: IFFALSE 39291
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39219: LD_VAR 0 12
39223: PUSH
39224: LD_INT 1
39226: ARRAY
39227: PPUSH
39228: CALL_OW 313
39232: PUSH
39233: LD_INT 3
39235: LESS
39236: IFFALSE 39272
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39238: LD_INT 0
39240: PPUSH
39241: LD_INT 5
39243: PUSH
39244: LD_INT 8
39246: PUSH
39247: LD_INT 9
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: LIST
39254: PUSH
39255: LD_VAR 0 17
39259: ARRAY
39260: PPUSH
39261: LD_VAR 0 4
39265: PPUSH
39266: CALL_OW 380
39270: GO 39289
// PrepareHuman ( false , i , skill ) ;
39272: LD_INT 0
39274: PPUSH
39275: LD_VAR 0 8
39279: PPUSH
39280: LD_VAR 0 4
39284: PPUSH
39285: CALL_OW 380
// end else
39289: GO 39308
// PrepareHuman ( false , i , skill ) ;
39291: LD_INT 0
39293: PPUSH
39294: LD_VAR 0 8
39298: PPUSH
39299: LD_VAR 0 4
39303: PPUSH
39304: CALL_OW 380
// un := CreateHuman ;
39308: LD_ADDR_VAR 0 14
39312: PUSH
39313: CALL_OW 44
39317: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39318: LD_ADDR_VAR 0 7
39322: PUSH
39323: LD_VAR 0 7
39327: PPUSH
39328: LD_INT 1
39330: PPUSH
39331: LD_VAR 0 14
39335: PPUSH
39336: CALL_OW 2
39340: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39341: LD_VAR 0 14
39345: PPUSH
39346: LD_VAR 0 12
39350: PUSH
39351: LD_INT 1
39353: ARRAY
39354: PPUSH
39355: CALL_OW 52
// end ;
39359: GO 38998
39361: POP
39362: POP
// end ;
39363: GO 38300
39365: POP
39366: POP
// result := result ^ buildings ;
39367: LD_ADDR_VAR 0 7
39371: PUSH
39372: LD_VAR 0 7
39376: PUSH
39377: LD_VAR 0 18
39381: ADD
39382: ST_TO_ADDR
// end else
39383: GO 39526
// begin for i = 1 to personel do
39385: LD_ADDR_VAR 0 8
39389: PUSH
39390: DOUBLE
39391: LD_INT 1
39393: DEC
39394: ST_TO_ADDR
39395: LD_VAR 0 6
39399: PUSH
39400: FOR_TO
39401: IFFALSE 39524
// begin if i > 4 then
39403: LD_VAR 0 8
39407: PUSH
39408: LD_INT 4
39410: GREATER
39411: IFFALSE 39415
// break ;
39413: GO 39524
// x := personel [ i ] ;
39415: LD_ADDR_VAR 0 13
39419: PUSH
39420: LD_VAR 0 6
39424: PUSH
39425: LD_VAR 0 8
39429: ARRAY
39430: ST_TO_ADDR
// if x = - 1 then
39431: LD_VAR 0 13
39435: PUSH
39436: LD_INT 1
39438: NEG
39439: EQUAL
39440: IFFALSE 39444
// continue ;
39442: GO 39400
// PrepareHuman ( false , i , skill ) ;
39444: LD_INT 0
39446: PPUSH
39447: LD_VAR 0 8
39451: PPUSH
39452: LD_VAR 0 4
39456: PPUSH
39457: CALL_OW 380
// un := CreateHuman ;
39461: LD_ADDR_VAR 0 14
39465: PUSH
39466: CALL_OW 44
39470: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39471: LD_VAR 0 14
39475: PPUSH
39476: LD_VAR 0 1
39480: PPUSH
39481: CALL_OW 250
39485: PPUSH
39486: LD_VAR 0 1
39490: PPUSH
39491: CALL_OW 251
39495: PPUSH
39496: LD_INT 10
39498: PPUSH
39499: LD_INT 0
39501: PPUSH
39502: CALL_OW 50
// result := result ^ un ;
39506: LD_ADDR_VAR 0 7
39510: PUSH
39511: LD_VAR 0 7
39515: PUSH
39516: LD_VAR 0 14
39520: ADD
39521: ST_TO_ADDR
// end ;
39522: GO 39400
39524: POP
39525: POP
// end ; end ;
39526: LD_VAR 0 7
39530: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39531: LD_INT 0
39533: PPUSH
39534: PPUSH
39535: PPUSH
39536: PPUSH
39537: PPUSH
39538: PPUSH
39539: PPUSH
39540: PPUSH
39541: PPUSH
39542: PPUSH
39543: PPUSH
39544: PPUSH
39545: PPUSH
39546: PPUSH
39547: PPUSH
39548: PPUSH
// result := false ;
39549: LD_ADDR_VAR 0 3
39553: PUSH
39554: LD_INT 0
39556: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39557: LD_VAR 0 1
39561: NOT
39562: PUSH
39563: LD_VAR 0 1
39567: PPUSH
39568: CALL_OW 266
39572: PUSH
39573: LD_INT 32
39575: PUSH
39576: LD_INT 33
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: IN
39583: NOT
39584: OR
39585: IFFALSE 39589
// exit ;
39587: GO 40728
// nat := GetNation ( tower ) ;
39589: LD_ADDR_VAR 0 12
39593: PUSH
39594: LD_VAR 0 1
39598: PPUSH
39599: CALL_OW 248
39603: ST_TO_ADDR
// side := GetSide ( tower ) ;
39604: LD_ADDR_VAR 0 16
39608: PUSH
39609: LD_VAR 0 1
39613: PPUSH
39614: CALL_OW 255
39618: ST_TO_ADDR
// x := GetX ( tower ) ;
39619: LD_ADDR_VAR 0 10
39623: PUSH
39624: LD_VAR 0 1
39628: PPUSH
39629: CALL_OW 250
39633: ST_TO_ADDR
// y := GetY ( tower ) ;
39634: LD_ADDR_VAR 0 11
39638: PUSH
39639: LD_VAR 0 1
39643: PPUSH
39644: CALL_OW 251
39648: ST_TO_ADDR
// if not x or not y then
39649: LD_VAR 0 10
39653: NOT
39654: PUSH
39655: LD_VAR 0 11
39659: NOT
39660: OR
39661: IFFALSE 39665
// exit ;
39663: GO 40728
// weapon := 0 ;
39665: LD_ADDR_VAR 0 18
39669: PUSH
39670: LD_INT 0
39672: ST_TO_ADDR
// fac_list := [ ] ;
39673: LD_ADDR_VAR 0 17
39677: PUSH
39678: EMPTY
39679: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39680: LD_ADDR_VAR 0 6
39684: PUSH
39685: LD_VAR 0 1
39689: PPUSH
39690: CALL_OW 274
39694: PPUSH
39695: LD_VAR 0 2
39699: PPUSH
39700: LD_INT 0
39702: PPUSH
39703: CALL 37268 0 3
39707: PPUSH
39708: LD_INT 30
39710: PUSH
39711: LD_INT 3
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: PPUSH
39718: CALL_OW 72
39722: ST_TO_ADDR
// if not factories then
39723: LD_VAR 0 6
39727: NOT
39728: IFFALSE 39732
// exit ;
39730: GO 40728
// for i in factories do
39732: LD_ADDR_VAR 0 8
39736: PUSH
39737: LD_VAR 0 6
39741: PUSH
39742: FOR_IN
39743: IFFALSE 39768
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39745: LD_ADDR_VAR 0 17
39749: PUSH
39750: LD_VAR 0 17
39754: PUSH
39755: LD_VAR 0 8
39759: PPUSH
39760: CALL_OW 478
39764: UNION
39765: ST_TO_ADDR
39766: GO 39742
39768: POP
39769: POP
// if not fac_list then
39770: LD_VAR 0 17
39774: NOT
39775: IFFALSE 39779
// exit ;
39777: GO 40728
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39779: LD_ADDR_VAR 0 5
39783: PUSH
39784: LD_INT 4
39786: PUSH
39787: LD_INT 5
39789: PUSH
39790: LD_INT 9
39792: PUSH
39793: LD_INT 10
39795: PUSH
39796: LD_INT 6
39798: PUSH
39799: LD_INT 7
39801: PUSH
39802: LD_INT 11
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 27
39816: PUSH
39817: LD_INT 28
39819: PUSH
39820: LD_INT 26
39822: PUSH
39823: LD_INT 30
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: PUSH
39832: LD_INT 43
39834: PUSH
39835: LD_INT 44
39837: PUSH
39838: LD_INT 46
39840: PUSH
39841: LD_INT 45
39843: PUSH
39844: LD_INT 47
39846: PUSH
39847: LD_INT 49
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: LIST
39862: PUSH
39863: LD_VAR 0 12
39867: ARRAY
39868: ST_TO_ADDR
// for i in list do
39869: LD_ADDR_VAR 0 8
39873: PUSH
39874: LD_VAR 0 5
39878: PUSH
39879: FOR_IN
39880: IFFALSE 39913
// if not i in fac_list then
39882: LD_VAR 0 8
39886: PUSH
39887: LD_VAR 0 17
39891: IN
39892: NOT
39893: IFFALSE 39911
// list := list diff i ;
39895: LD_ADDR_VAR 0 5
39899: PUSH
39900: LD_VAR 0 5
39904: PUSH
39905: LD_VAR 0 8
39909: DIFF
39910: ST_TO_ADDR
39911: GO 39879
39913: POP
39914: POP
// if not list then
39915: LD_VAR 0 5
39919: NOT
39920: IFFALSE 39924
// exit ;
39922: GO 40728
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39924: LD_VAR 0 12
39928: PUSH
39929: LD_INT 3
39931: EQUAL
39932: PUSH
39933: LD_INT 49
39935: PUSH
39936: LD_VAR 0 5
39940: IN
39941: AND
39942: PUSH
39943: LD_INT 31
39945: PPUSH
39946: LD_VAR 0 16
39950: PPUSH
39951: CALL_OW 321
39955: PUSH
39956: LD_INT 2
39958: EQUAL
39959: AND
39960: IFFALSE 40020
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39962: LD_INT 22
39964: PUSH
39965: LD_VAR 0 16
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 35
39976: PUSH
39977: LD_INT 49
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: LD_INT 91
39986: PUSH
39987: LD_VAR 0 1
39991: PUSH
39992: LD_INT 10
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: LIST
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: LIST
40004: PPUSH
40005: CALL_OW 69
40009: NOT
40010: IFFALSE 40020
// weapon := ru_time_lapser ;
40012: LD_ADDR_VAR 0 18
40016: PUSH
40017: LD_INT 49
40019: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40020: LD_VAR 0 12
40024: PUSH
40025: LD_INT 1
40027: PUSH
40028: LD_INT 2
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: IN
40035: PUSH
40036: LD_INT 11
40038: PUSH
40039: LD_VAR 0 5
40043: IN
40044: PUSH
40045: LD_INT 30
40047: PUSH
40048: LD_VAR 0 5
40052: IN
40053: OR
40054: AND
40055: PUSH
40056: LD_INT 6
40058: PPUSH
40059: LD_VAR 0 16
40063: PPUSH
40064: CALL_OW 321
40068: PUSH
40069: LD_INT 2
40071: EQUAL
40072: AND
40073: IFFALSE 40238
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40075: LD_INT 22
40077: PUSH
40078: LD_VAR 0 16
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 2
40089: PUSH
40090: LD_INT 35
40092: PUSH
40093: LD_INT 11
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PUSH
40100: LD_INT 35
40102: PUSH
40103: LD_INT 30
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 91
40117: PUSH
40118: LD_VAR 0 1
40122: PUSH
40123: LD_INT 18
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: LIST
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: LIST
40135: PPUSH
40136: CALL_OW 69
40140: NOT
40141: PUSH
40142: LD_INT 22
40144: PUSH
40145: LD_VAR 0 16
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PUSH
40154: LD_INT 2
40156: PUSH
40157: LD_INT 30
40159: PUSH
40160: LD_INT 32
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 30
40169: PUSH
40170: LD_INT 33
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 91
40184: PUSH
40185: LD_VAR 0 1
40189: PUSH
40190: LD_INT 12
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: LIST
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: LIST
40202: PUSH
40203: EMPTY
40204: LIST
40205: PPUSH
40206: CALL_OW 69
40210: PUSH
40211: LD_INT 2
40213: GREATER
40214: AND
40215: IFFALSE 40238
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40217: LD_ADDR_VAR 0 18
40221: PUSH
40222: LD_INT 11
40224: PUSH
40225: LD_INT 30
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_VAR 0 12
40236: ARRAY
40237: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40238: LD_VAR 0 18
40242: NOT
40243: PUSH
40244: LD_INT 40
40246: PPUSH
40247: LD_VAR 0 16
40251: PPUSH
40252: CALL_OW 321
40256: PUSH
40257: LD_INT 2
40259: EQUAL
40260: AND
40261: PUSH
40262: LD_INT 7
40264: PUSH
40265: LD_VAR 0 5
40269: IN
40270: PUSH
40271: LD_INT 28
40273: PUSH
40274: LD_VAR 0 5
40278: IN
40279: OR
40280: PUSH
40281: LD_INT 45
40283: PUSH
40284: LD_VAR 0 5
40288: IN
40289: OR
40290: AND
40291: IFFALSE 40545
// begin hex := GetHexInfo ( x , y ) ;
40293: LD_ADDR_VAR 0 4
40297: PUSH
40298: LD_VAR 0 10
40302: PPUSH
40303: LD_VAR 0 11
40307: PPUSH
40308: CALL_OW 546
40312: ST_TO_ADDR
// if hex [ 1 ] then
40313: LD_VAR 0 4
40317: PUSH
40318: LD_INT 1
40320: ARRAY
40321: IFFALSE 40325
// exit ;
40323: GO 40728
// height := hex [ 2 ] ;
40325: LD_ADDR_VAR 0 15
40329: PUSH
40330: LD_VAR 0 4
40334: PUSH
40335: LD_INT 2
40337: ARRAY
40338: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40339: LD_ADDR_VAR 0 14
40343: PUSH
40344: LD_INT 0
40346: PUSH
40347: LD_INT 2
40349: PUSH
40350: LD_INT 3
40352: PUSH
40353: LD_INT 5
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: ST_TO_ADDR
// for i in tmp do
40362: LD_ADDR_VAR 0 8
40366: PUSH
40367: LD_VAR 0 14
40371: PUSH
40372: FOR_IN
40373: IFFALSE 40543
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40375: LD_ADDR_VAR 0 9
40379: PUSH
40380: LD_VAR 0 10
40384: PPUSH
40385: LD_VAR 0 8
40389: PPUSH
40390: LD_INT 5
40392: PPUSH
40393: CALL_OW 272
40397: PUSH
40398: LD_VAR 0 11
40402: PPUSH
40403: LD_VAR 0 8
40407: PPUSH
40408: LD_INT 5
40410: PPUSH
40411: CALL_OW 273
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40420: LD_VAR 0 9
40424: PUSH
40425: LD_INT 1
40427: ARRAY
40428: PPUSH
40429: LD_VAR 0 9
40433: PUSH
40434: LD_INT 2
40436: ARRAY
40437: PPUSH
40438: CALL_OW 488
40442: IFFALSE 40541
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40444: LD_ADDR_VAR 0 4
40448: PUSH
40449: LD_VAR 0 9
40453: PUSH
40454: LD_INT 1
40456: ARRAY
40457: PPUSH
40458: LD_VAR 0 9
40462: PUSH
40463: LD_INT 2
40465: ARRAY
40466: PPUSH
40467: CALL_OW 546
40471: ST_TO_ADDR
// if hex [ 1 ] then
40472: LD_VAR 0 4
40476: PUSH
40477: LD_INT 1
40479: ARRAY
40480: IFFALSE 40484
// continue ;
40482: GO 40372
// h := hex [ 2 ] ;
40484: LD_ADDR_VAR 0 13
40488: PUSH
40489: LD_VAR 0 4
40493: PUSH
40494: LD_INT 2
40496: ARRAY
40497: ST_TO_ADDR
// if h + 7 < height then
40498: LD_VAR 0 13
40502: PUSH
40503: LD_INT 7
40505: PLUS
40506: PUSH
40507: LD_VAR 0 15
40511: LESS
40512: IFFALSE 40541
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40514: LD_ADDR_VAR 0 18
40518: PUSH
40519: LD_INT 7
40521: PUSH
40522: LD_INT 28
40524: PUSH
40525: LD_INT 45
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: LIST
40532: PUSH
40533: LD_VAR 0 12
40537: ARRAY
40538: ST_TO_ADDR
// break ;
40539: GO 40543
// end ; end ; end ;
40541: GO 40372
40543: POP
40544: POP
// end ; if not weapon then
40545: LD_VAR 0 18
40549: NOT
40550: IFFALSE 40610
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40552: LD_ADDR_VAR 0 5
40556: PUSH
40557: LD_VAR 0 5
40561: PUSH
40562: LD_INT 11
40564: PUSH
40565: LD_INT 30
40567: PUSH
40568: LD_INT 49
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: LIST
40575: DIFF
40576: ST_TO_ADDR
// if not list then
40577: LD_VAR 0 5
40581: NOT
40582: IFFALSE 40586
// exit ;
40584: GO 40728
// weapon := list [ rand ( 1 , list ) ] ;
40586: LD_ADDR_VAR 0 18
40590: PUSH
40591: LD_VAR 0 5
40595: PUSH
40596: LD_INT 1
40598: PPUSH
40599: LD_VAR 0 5
40603: PPUSH
40604: CALL_OW 12
40608: ARRAY
40609: ST_TO_ADDR
// end ; if weapon then
40610: LD_VAR 0 18
40614: IFFALSE 40728
// begin tmp := CostOfWeapon ( weapon ) ;
40616: LD_ADDR_VAR 0 14
40620: PUSH
40621: LD_VAR 0 18
40625: PPUSH
40626: CALL_OW 451
40630: ST_TO_ADDR
// j := GetBase ( tower ) ;
40631: LD_ADDR_VAR 0 9
40635: PUSH
40636: LD_VAR 0 1
40640: PPUSH
40641: CALL_OW 274
40645: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40646: LD_VAR 0 9
40650: PPUSH
40651: LD_INT 1
40653: PPUSH
40654: CALL_OW 275
40658: PUSH
40659: LD_VAR 0 14
40663: PUSH
40664: LD_INT 1
40666: ARRAY
40667: GREATEREQUAL
40668: PUSH
40669: LD_VAR 0 9
40673: PPUSH
40674: LD_INT 2
40676: PPUSH
40677: CALL_OW 275
40681: PUSH
40682: LD_VAR 0 14
40686: PUSH
40687: LD_INT 2
40689: ARRAY
40690: GREATEREQUAL
40691: AND
40692: PUSH
40693: LD_VAR 0 9
40697: PPUSH
40698: LD_INT 3
40700: PPUSH
40701: CALL_OW 275
40705: PUSH
40706: LD_VAR 0 14
40710: PUSH
40711: LD_INT 3
40713: ARRAY
40714: GREATEREQUAL
40715: AND
40716: IFFALSE 40728
// result := weapon ;
40718: LD_ADDR_VAR 0 3
40722: PUSH
40723: LD_VAR 0 18
40727: ST_TO_ADDR
// end ; end ;
40728: LD_VAR 0 3
40732: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40733: LD_INT 0
40735: PPUSH
40736: PPUSH
// result := true ;
40737: LD_ADDR_VAR 0 3
40741: PUSH
40742: LD_INT 1
40744: ST_TO_ADDR
// if array1 = array2 then
40745: LD_VAR 0 1
40749: PUSH
40750: LD_VAR 0 2
40754: EQUAL
40755: IFFALSE 40815
// begin for i = 1 to array1 do
40757: LD_ADDR_VAR 0 4
40761: PUSH
40762: DOUBLE
40763: LD_INT 1
40765: DEC
40766: ST_TO_ADDR
40767: LD_VAR 0 1
40771: PUSH
40772: FOR_TO
40773: IFFALSE 40811
// if array1 [ i ] <> array2 [ i ] then
40775: LD_VAR 0 1
40779: PUSH
40780: LD_VAR 0 4
40784: ARRAY
40785: PUSH
40786: LD_VAR 0 2
40790: PUSH
40791: LD_VAR 0 4
40795: ARRAY
40796: NONEQUAL
40797: IFFALSE 40809
// begin result := false ;
40799: LD_ADDR_VAR 0 3
40803: PUSH
40804: LD_INT 0
40806: ST_TO_ADDR
// break ;
40807: GO 40811
// end ;
40809: GO 40772
40811: POP
40812: POP
// end else
40813: GO 40823
// result := false ;
40815: LD_ADDR_VAR 0 3
40819: PUSH
40820: LD_INT 0
40822: ST_TO_ADDR
// end ;
40823: LD_VAR 0 3
40827: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40828: LD_INT 0
40830: PPUSH
40831: PPUSH
// if not array1 or not array2 then
40832: LD_VAR 0 1
40836: NOT
40837: PUSH
40838: LD_VAR 0 2
40842: NOT
40843: OR
40844: IFFALSE 40848
// exit ;
40846: GO 40912
// result := true ;
40848: LD_ADDR_VAR 0 3
40852: PUSH
40853: LD_INT 1
40855: ST_TO_ADDR
// for i = 1 to array1 do
40856: LD_ADDR_VAR 0 4
40860: PUSH
40861: DOUBLE
40862: LD_INT 1
40864: DEC
40865: ST_TO_ADDR
40866: LD_VAR 0 1
40870: PUSH
40871: FOR_TO
40872: IFFALSE 40910
// if array1 [ i ] <> array2 [ i ] then
40874: LD_VAR 0 1
40878: PUSH
40879: LD_VAR 0 4
40883: ARRAY
40884: PUSH
40885: LD_VAR 0 2
40889: PUSH
40890: LD_VAR 0 4
40894: ARRAY
40895: NONEQUAL
40896: IFFALSE 40908
// begin result := false ;
40898: LD_ADDR_VAR 0 3
40902: PUSH
40903: LD_INT 0
40905: ST_TO_ADDR
// break ;
40906: GO 40910
// end ;
40908: GO 40871
40910: POP
40911: POP
// end ;
40912: LD_VAR 0 3
40916: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40917: LD_INT 0
40919: PPUSH
40920: PPUSH
40921: PPUSH
// pom := GetBase ( fac ) ;
40922: LD_ADDR_VAR 0 5
40926: PUSH
40927: LD_VAR 0 1
40931: PPUSH
40932: CALL_OW 274
40936: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40937: LD_ADDR_VAR 0 4
40941: PUSH
40942: LD_VAR 0 2
40946: PUSH
40947: LD_INT 1
40949: ARRAY
40950: PPUSH
40951: LD_VAR 0 2
40955: PUSH
40956: LD_INT 2
40958: ARRAY
40959: PPUSH
40960: LD_VAR 0 2
40964: PUSH
40965: LD_INT 3
40967: ARRAY
40968: PPUSH
40969: LD_VAR 0 2
40973: PUSH
40974: LD_INT 4
40976: ARRAY
40977: PPUSH
40978: CALL_OW 449
40982: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40983: LD_ADDR_VAR 0 3
40987: PUSH
40988: LD_VAR 0 5
40992: PPUSH
40993: LD_INT 1
40995: PPUSH
40996: CALL_OW 275
41000: PUSH
41001: LD_VAR 0 4
41005: PUSH
41006: LD_INT 1
41008: ARRAY
41009: GREATEREQUAL
41010: PUSH
41011: LD_VAR 0 5
41015: PPUSH
41016: LD_INT 2
41018: PPUSH
41019: CALL_OW 275
41023: PUSH
41024: LD_VAR 0 4
41028: PUSH
41029: LD_INT 2
41031: ARRAY
41032: GREATEREQUAL
41033: AND
41034: PUSH
41035: LD_VAR 0 5
41039: PPUSH
41040: LD_INT 3
41042: PPUSH
41043: CALL_OW 275
41047: PUSH
41048: LD_VAR 0 4
41052: PUSH
41053: LD_INT 3
41055: ARRAY
41056: GREATEREQUAL
41057: AND
41058: ST_TO_ADDR
// end ;
41059: LD_VAR 0 3
41063: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41064: LD_INT 0
41066: PPUSH
41067: PPUSH
41068: PPUSH
41069: PPUSH
// pom := GetBase ( building ) ;
41070: LD_ADDR_VAR 0 3
41074: PUSH
41075: LD_VAR 0 1
41079: PPUSH
41080: CALL_OW 274
41084: ST_TO_ADDR
// if not pom then
41085: LD_VAR 0 3
41089: NOT
41090: IFFALSE 41094
// exit ;
41092: GO 41264
// btype := GetBType ( building ) ;
41094: LD_ADDR_VAR 0 5
41098: PUSH
41099: LD_VAR 0 1
41103: PPUSH
41104: CALL_OW 266
41108: ST_TO_ADDR
// if btype = b_armoury then
41109: LD_VAR 0 5
41113: PUSH
41114: LD_INT 4
41116: EQUAL
41117: IFFALSE 41127
// btype := b_barracks ;
41119: LD_ADDR_VAR 0 5
41123: PUSH
41124: LD_INT 5
41126: ST_TO_ADDR
// if btype = b_depot then
41127: LD_VAR 0 5
41131: PUSH
41132: LD_INT 0
41134: EQUAL
41135: IFFALSE 41145
// btype := b_warehouse ;
41137: LD_ADDR_VAR 0 5
41141: PUSH
41142: LD_INT 1
41144: ST_TO_ADDR
// if btype = b_workshop then
41145: LD_VAR 0 5
41149: PUSH
41150: LD_INT 2
41152: EQUAL
41153: IFFALSE 41163
// btype := b_factory ;
41155: LD_ADDR_VAR 0 5
41159: PUSH
41160: LD_INT 3
41162: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41163: LD_ADDR_VAR 0 4
41167: PUSH
41168: LD_VAR 0 5
41172: PPUSH
41173: LD_VAR 0 1
41177: PPUSH
41178: CALL_OW 248
41182: PPUSH
41183: CALL_OW 450
41187: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41188: LD_ADDR_VAR 0 2
41192: PUSH
41193: LD_VAR 0 3
41197: PPUSH
41198: LD_INT 1
41200: PPUSH
41201: CALL_OW 275
41205: PUSH
41206: LD_VAR 0 4
41210: PUSH
41211: LD_INT 1
41213: ARRAY
41214: GREATEREQUAL
41215: PUSH
41216: LD_VAR 0 3
41220: PPUSH
41221: LD_INT 2
41223: PPUSH
41224: CALL_OW 275
41228: PUSH
41229: LD_VAR 0 4
41233: PUSH
41234: LD_INT 2
41236: ARRAY
41237: GREATEREQUAL
41238: AND
41239: PUSH
41240: LD_VAR 0 3
41244: PPUSH
41245: LD_INT 3
41247: PPUSH
41248: CALL_OW 275
41252: PUSH
41253: LD_VAR 0 4
41257: PUSH
41258: LD_INT 3
41260: ARRAY
41261: GREATEREQUAL
41262: AND
41263: ST_TO_ADDR
// end ;
41264: LD_VAR 0 2
41268: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41269: LD_INT 0
41271: PPUSH
41272: PPUSH
41273: PPUSH
// pom := GetBase ( building ) ;
41274: LD_ADDR_VAR 0 4
41278: PUSH
41279: LD_VAR 0 1
41283: PPUSH
41284: CALL_OW 274
41288: ST_TO_ADDR
// if not pom then
41289: LD_VAR 0 4
41293: NOT
41294: IFFALSE 41298
// exit ;
41296: GO 41399
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41298: LD_ADDR_VAR 0 5
41302: PUSH
41303: LD_VAR 0 2
41307: PPUSH
41308: LD_VAR 0 1
41312: PPUSH
41313: CALL_OW 248
41317: PPUSH
41318: CALL_OW 450
41322: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41323: LD_ADDR_VAR 0 3
41327: PUSH
41328: LD_VAR 0 4
41332: PPUSH
41333: LD_INT 1
41335: PPUSH
41336: CALL_OW 275
41340: PUSH
41341: LD_VAR 0 5
41345: PUSH
41346: LD_INT 1
41348: ARRAY
41349: GREATEREQUAL
41350: PUSH
41351: LD_VAR 0 4
41355: PPUSH
41356: LD_INT 2
41358: PPUSH
41359: CALL_OW 275
41363: PUSH
41364: LD_VAR 0 5
41368: PUSH
41369: LD_INT 2
41371: ARRAY
41372: GREATEREQUAL
41373: AND
41374: PUSH
41375: LD_VAR 0 4
41379: PPUSH
41380: LD_INT 3
41382: PPUSH
41383: CALL_OW 275
41387: PUSH
41388: LD_VAR 0 5
41392: PUSH
41393: LD_INT 3
41395: ARRAY
41396: GREATEREQUAL
41397: AND
41398: ST_TO_ADDR
// end ;
41399: LD_VAR 0 3
41403: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41404: LD_INT 0
41406: PPUSH
41407: PPUSH
41408: PPUSH
41409: PPUSH
41410: PPUSH
41411: PPUSH
41412: PPUSH
41413: PPUSH
41414: PPUSH
41415: PPUSH
41416: PPUSH
// result := false ;
41417: LD_ADDR_VAR 0 8
41421: PUSH
41422: LD_INT 0
41424: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41425: LD_VAR 0 5
41429: NOT
41430: PUSH
41431: LD_VAR 0 1
41435: NOT
41436: OR
41437: PUSH
41438: LD_VAR 0 2
41442: NOT
41443: OR
41444: PUSH
41445: LD_VAR 0 3
41449: NOT
41450: OR
41451: IFFALSE 41455
// exit ;
41453: GO 42269
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41455: LD_ADDR_VAR 0 14
41459: PUSH
41460: LD_VAR 0 1
41464: PPUSH
41465: LD_VAR 0 2
41469: PPUSH
41470: LD_VAR 0 3
41474: PPUSH
41475: LD_VAR 0 4
41479: PPUSH
41480: LD_VAR 0 5
41484: PUSH
41485: LD_INT 1
41487: ARRAY
41488: PPUSH
41489: CALL_OW 248
41493: PPUSH
41494: LD_INT 0
41496: PPUSH
41497: CALL 43106 0 6
41501: ST_TO_ADDR
// if not hexes then
41502: LD_VAR 0 14
41506: NOT
41507: IFFALSE 41511
// exit ;
41509: GO 42269
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41511: LD_ADDR_VAR 0 17
41515: PUSH
41516: LD_VAR 0 5
41520: PPUSH
41521: LD_INT 22
41523: PUSH
41524: LD_VAR 0 13
41528: PPUSH
41529: CALL_OW 255
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 2
41540: PUSH
41541: LD_INT 30
41543: PUSH
41544: LD_INT 0
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: PUSH
41551: LD_INT 30
41553: PUSH
41554: LD_INT 1
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: LIST
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PPUSH
41570: CALL_OW 72
41574: ST_TO_ADDR
// for i = 1 to hexes do
41575: LD_ADDR_VAR 0 9
41579: PUSH
41580: DOUBLE
41581: LD_INT 1
41583: DEC
41584: ST_TO_ADDR
41585: LD_VAR 0 14
41589: PUSH
41590: FOR_TO
41591: IFFALSE 42267
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41593: LD_ADDR_VAR 0 13
41597: PUSH
41598: LD_VAR 0 14
41602: PUSH
41603: LD_VAR 0 9
41607: ARRAY
41608: PUSH
41609: LD_INT 1
41611: ARRAY
41612: PPUSH
41613: LD_VAR 0 14
41617: PUSH
41618: LD_VAR 0 9
41622: ARRAY
41623: PUSH
41624: LD_INT 2
41626: ARRAY
41627: PPUSH
41628: CALL_OW 428
41632: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41633: LD_VAR 0 14
41637: PUSH
41638: LD_VAR 0 9
41642: ARRAY
41643: PUSH
41644: LD_INT 1
41646: ARRAY
41647: PPUSH
41648: LD_VAR 0 14
41652: PUSH
41653: LD_VAR 0 9
41657: ARRAY
41658: PUSH
41659: LD_INT 2
41661: ARRAY
41662: PPUSH
41663: CALL_OW 351
41667: PUSH
41668: LD_VAR 0 14
41672: PUSH
41673: LD_VAR 0 9
41677: ARRAY
41678: PUSH
41679: LD_INT 1
41681: ARRAY
41682: PPUSH
41683: LD_VAR 0 14
41687: PUSH
41688: LD_VAR 0 9
41692: ARRAY
41693: PUSH
41694: LD_INT 2
41696: ARRAY
41697: PPUSH
41698: CALL_OW 488
41702: NOT
41703: OR
41704: PUSH
41705: LD_VAR 0 13
41709: PPUSH
41710: CALL_OW 247
41714: PUSH
41715: LD_INT 3
41717: EQUAL
41718: OR
41719: IFFALSE 41725
// exit ;
41721: POP
41722: POP
41723: GO 42269
// if not tmp then
41725: LD_VAR 0 13
41729: NOT
41730: IFFALSE 41734
// continue ;
41732: GO 41590
// result := true ;
41734: LD_ADDR_VAR 0 8
41738: PUSH
41739: LD_INT 1
41741: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41742: LD_VAR 0 6
41746: PUSH
41747: LD_VAR 0 13
41751: PPUSH
41752: CALL_OW 247
41756: PUSH
41757: LD_INT 2
41759: EQUAL
41760: AND
41761: PUSH
41762: LD_VAR 0 13
41766: PPUSH
41767: CALL_OW 263
41771: PUSH
41772: LD_INT 1
41774: EQUAL
41775: AND
41776: IFFALSE 41940
// begin if IsDrivenBy ( tmp ) then
41778: LD_VAR 0 13
41782: PPUSH
41783: CALL_OW 311
41787: IFFALSE 41791
// continue ;
41789: GO 41590
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41791: LD_VAR 0 6
41795: PPUSH
41796: LD_INT 3
41798: PUSH
41799: LD_INT 60
41801: PUSH
41802: EMPTY
41803: LIST
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 3
41811: PUSH
41812: LD_INT 55
41814: PUSH
41815: EMPTY
41816: LIST
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PPUSH
41826: CALL_OW 72
41830: IFFALSE 41938
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41832: LD_ADDR_VAR 0 18
41836: PUSH
41837: LD_VAR 0 6
41841: PPUSH
41842: LD_INT 3
41844: PUSH
41845: LD_INT 60
41847: PUSH
41848: EMPTY
41849: LIST
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: LD_INT 3
41857: PUSH
41858: LD_INT 55
41860: PUSH
41861: EMPTY
41862: LIST
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PPUSH
41872: CALL_OW 72
41876: PUSH
41877: LD_INT 1
41879: ARRAY
41880: ST_TO_ADDR
// if IsInUnit ( driver ) then
41881: LD_VAR 0 18
41885: PPUSH
41886: CALL_OW 310
41890: IFFALSE 41901
// ComExit ( driver ) ;
41892: LD_VAR 0 18
41896: PPUSH
41897: CALL 66290 0 1
// AddComEnterUnit ( driver , tmp ) ;
41901: LD_VAR 0 18
41905: PPUSH
41906: LD_VAR 0 13
41910: PPUSH
41911: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41915: LD_VAR 0 18
41919: PPUSH
41920: LD_VAR 0 7
41924: PPUSH
41925: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41929: LD_VAR 0 18
41933: PPUSH
41934: CALL_OW 181
// end ; continue ;
41938: GO 41590
// end ; if not cleaners or not tmp in cleaners then
41940: LD_VAR 0 6
41944: NOT
41945: PUSH
41946: LD_VAR 0 13
41950: PUSH
41951: LD_VAR 0 6
41955: IN
41956: NOT
41957: OR
41958: IFFALSE 42265
// begin if dep then
41960: LD_VAR 0 17
41964: IFFALSE 42100
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41966: LD_ADDR_VAR 0 16
41970: PUSH
41971: LD_VAR 0 17
41975: PUSH
41976: LD_INT 1
41978: ARRAY
41979: PPUSH
41980: CALL_OW 250
41984: PPUSH
41985: LD_VAR 0 17
41989: PUSH
41990: LD_INT 1
41992: ARRAY
41993: PPUSH
41994: CALL_OW 254
41998: PPUSH
41999: LD_INT 5
42001: PPUSH
42002: CALL_OW 272
42006: PUSH
42007: LD_VAR 0 17
42011: PUSH
42012: LD_INT 1
42014: ARRAY
42015: PPUSH
42016: CALL_OW 251
42020: PPUSH
42021: LD_VAR 0 17
42025: PUSH
42026: LD_INT 1
42028: ARRAY
42029: PPUSH
42030: CALL_OW 254
42034: PPUSH
42035: LD_INT 5
42037: PPUSH
42038: CALL_OW 273
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42047: LD_VAR 0 16
42051: PUSH
42052: LD_INT 1
42054: ARRAY
42055: PPUSH
42056: LD_VAR 0 16
42060: PUSH
42061: LD_INT 2
42063: ARRAY
42064: PPUSH
42065: CALL_OW 488
42069: IFFALSE 42100
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42071: LD_VAR 0 13
42075: PPUSH
42076: LD_VAR 0 16
42080: PUSH
42081: LD_INT 1
42083: ARRAY
42084: PPUSH
42085: LD_VAR 0 16
42089: PUSH
42090: LD_INT 2
42092: ARRAY
42093: PPUSH
42094: CALL_OW 111
// continue ;
42098: GO 41590
// end ; end ; r := GetDir ( tmp ) ;
42100: LD_ADDR_VAR 0 15
42104: PUSH
42105: LD_VAR 0 13
42109: PPUSH
42110: CALL_OW 254
42114: ST_TO_ADDR
// if r = 5 then
42115: LD_VAR 0 15
42119: PUSH
42120: LD_INT 5
42122: EQUAL
42123: IFFALSE 42133
// r := 0 ;
42125: LD_ADDR_VAR 0 15
42129: PUSH
42130: LD_INT 0
42132: ST_TO_ADDR
// for j = r to 5 do
42133: LD_ADDR_VAR 0 10
42137: PUSH
42138: DOUBLE
42139: LD_VAR 0 15
42143: DEC
42144: ST_TO_ADDR
42145: LD_INT 5
42147: PUSH
42148: FOR_TO
42149: IFFALSE 42263
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42151: LD_ADDR_VAR 0 11
42155: PUSH
42156: LD_VAR 0 13
42160: PPUSH
42161: CALL_OW 250
42165: PPUSH
42166: LD_VAR 0 10
42170: PPUSH
42171: LD_INT 2
42173: PPUSH
42174: CALL_OW 272
42178: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42179: LD_ADDR_VAR 0 12
42183: PUSH
42184: LD_VAR 0 13
42188: PPUSH
42189: CALL_OW 251
42193: PPUSH
42194: LD_VAR 0 10
42198: PPUSH
42199: LD_INT 2
42201: PPUSH
42202: CALL_OW 273
42206: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42207: LD_VAR 0 11
42211: PPUSH
42212: LD_VAR 0 12
42216: PPUSH
42217: CALL_OW 488
42221: PUSH
42222: LD_VAR 0 11
42226: PPUSH
42227: LD_VAR 0 12
42231: PPUSH
42232: CALL_OW 428
42236: NOT
42237: AND
42238: IFFALSE 42261
// begin ComMoveXY ( tmp , _x , _y ) ;
42240: LD_VAR 0 13
42244: PPUSH
42245: LD_VAR 0 11
42249: PPUSH
42250: LD_VAR 0 12
42254: PPUSH
42255: CALL_OW 111
// break ;
42259: GO 42263
// end ; end ;
42261: GO 42148
42263: POP
42264: POP
// end ; end ;
42265: GO 41590
42267: POP
42268: POP
// end ;
42269: LD_VAR 0 8
42273: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
42274: LD_INT 0
42276: PPUSH
42277: PPUSH
42278: PPUSH
42279: PPUSH
42280: PPUSH
42281: PPUSH
42282: PPUSH
42283: PPUSH
42284: PPUSH
42285: PPUSH
// result := false ;
42286: LD_ADDR_VAR 0 6
42290: PUSH
42291: LD_INT 0
42293: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42294: LD_VAR 0 1
42298: NOT
42299: PUSH
42300: LD_VAR 0 1
42304: PPUSH
42305: CALL_OW 266
42309: PUSH
42310: LD_INT 0
42312: PUSH
42313: LD_INT 1
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: IN
42320: NOT
42321: OR
42322: PUSH
42323: LD_VAR 0 2
42327: NOT
42328: OR
42329: PUSH
42330: LD_VAR 0 5
42334: PUSH
42335: LD_INT 0
42337: PUSH
42338: LD_INT 1
42340: PUSH
42341: LD_INT 2
42343: PUSH
42344: LD_INT 3
42346: PUSH
42347: LD_INT 4
42349: PUSH
42350: LD_INT 5
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: IN
42361: NOT
42362: OR
42363: PUSH
42364: LD_VAR 0 3
42368: PPUSH
42369: LD_VAR 0 4
42373: PPUSH
42374: CALL_OW 488
42378: NOT
42379: OR
42380: IFFALSE 42384
// exit ;
42382: GO 43101
// pom := GetBase ( depot ) ;
42384: LD_ADDR_VAR 0 10
42388: PUSH
42389: LD_VAR 0 1
42393: PPUSH
42394: CALL_OW 274
42398: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42399: LD_ADDR_VAR 0 11
42403: PUSH
42404: LD_VAR 0 2
42408: PPUSH
42409: LD_VAR 0 1
42413: PPUSH
42414: CALL_OW 248
42418: PPUSH
42419: CALL_OW 450
42423: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42424: LD_VAR 0 10
42428: PPUSH
42429: LD_INT 1
42431: PPUSH
42432: CALL_OW 275
42436: PUSH
42437: LD_VAR 0 11
42441: PUSH
42442: LD_INT 1
42444: ARRAY
42445: GREATEREQUAL
42446: PUSH
42447: LD_VAR 0 10
42451: PPUSH
42452: LD_INT 2
42454: PPUSH
42455: CALL_OW 275
42459: PUSH
42460: LD_VAR 0 11
42464: PUSH
42465: LD_INT 2
42467: ARRAY
42468: GREATEREQUAL
42469: AND
42470: PUSH
42471: LD_VAR 0 10
42475: PPUSH
42476: LD_INT 3
42478: PPUSH
42479: CALL_OW 275
42483: PUSH
42484: LD_VAR 0 11
42488: PUSH
42489: LD_INT 3
42491: ARRAY
42492: GREATEREQUAL
42493: AND
42494: NOT
42495: IFFALSE 42499
// exit ;
42497: GO 43101
// if GetBType ( depot ) = b_depot then
42499: LD_VAR 0 1
42503: PPUSH
42504: CALL_OW 266
42508: PUSH
42509: LD_INT 0
42511: EQUAL
42512: IFFALSE 42524
// dist := 28 else
42514: LD_ADDR_VAR 0 14
42518: PUSH
42519: LD_INT 28
42521: ST_TO_ADDR
42522: GO 42532
// dist := 36 ;
42524: LD_ADDR_VAR 0 14
42528: PUSH
42529: LD_INT 36
42531: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42532: LD_VAR 0 1
42536: PPUSH
42537: LD_VAR 0 3
42541: PPUSH
42542: LD_VAR 0 4
42546: PPUSH
42547: CALL_OW 297
42551: PUSH
42552: LD_VAR 0 14
42556: GREATER
42557: IFFALSE 42561
// exit ;
42559: GO 43101
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42561: LD_ADDR_VAR 0 12
42565: PUSH
42566: LD_VAR 0 2
42570: PPUSH
42571: LD_VAR 0 3
42575: PPUSH
42576: LD_VAR 0 4
42580: PPUSH
42581: LD_VAR 0 5
42585: PPUSH
42586: LD_VAR 0 1
42590: PPUSH
42591: CALL_OW 248
42595: PPUSH
42596: LD_INT 0
42598: PPUSH
42599: CALL 43106 0 6
42603: ST_TO_ADDR
// if not hexes then
42604: LD_VAR 0 12
42608: NOT
42609: IFFALSE 42613
// exit ;
42611: GO 43101
// hex := GetHexInfo ( x , y ) ;
42613: LD_ADDR_VAR 0 15
42617: PUSH
42618: LD_VAR 0 3
42622: PPUSH
42623: LD_VAR 0 4
42627: PPUSH
42628: CALL_OW 546
42632: ST_TO_ADDR
// if hex [ 1 ] then
42633: LD_VAR 0 15
42637: PUSH
42638: LD_INT 1
42640: ARRAY
42641: IFFALSE 42645
// exit ;
42643: GO 43101
// height := hex [ 2 ] ;
42645: LD_ADDR_VAR 0 13
42649: PUSH
42650: LD_VAR 0 15
42654: PUSH
42655: LD_INT 2
42657: ARRAY
42658: ST_TO_ADDR
// for i = 1 to hexes do
42659: LD_ADDR_VAR 0 7
42663: PUSH
42664: DOUBLE
42665: LD_INT 1
42667: DEC
42668: ST_TO_ADDR
42669: LD_VAR 0 12
42673: PUSH
42674: FOR_TO
42675: IFFALSE 43005
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42677: LD_VAR 0 12
42681: PUSH
42682: LD_VAR 0 7
42686: ARRAY
42687: PUSH
42688: LD_INT 1
42690: ARRAY
42691: PPUSH
42692: LD_VAR 0 12
42696: PUSH
42697: LD_VAR 0 7
42701: ARRAY
42702: PUSH
42703: LD_INT 2
42705: ARRAY
42706: PPUSH
42707: CALL_OW 488
42711: NOT
42712: PUSH
42713: LD_VAR 0 12
42717: PUSH
42718: LD_VAR 0 7
42722: ARRAY
42723: PUSH
42724: LD_INT 1
42726: ARRAY
42727: PPUSH
42728: LD_VAR 0 12
42732: PUSH
42733: LD_VAR 0 7
42737: ARRAY
42738: PUSH
42739: LD_INT 2
42741: ARRAY
42742: PPUSH
42743: CALL_OW 428
42747: PUSH
42748: LD_INT 0
42750: GREATER
42751: OR
42752: PUSH
42753: LD_VAR 0 12
42757: PUSH
42758: LD_VAR 0 7
42762: ARRAY
42763: PUSH
42764: LD_INT 1
42766: ARRAY
42767: PPUSH
42768: LD_VAR 0 12
42772: PUSH
42773: LD_VAR 0 7
42777: ARRAY
42778: PUSH
42779: LD_INT 2
42781: ARRAY
42782: PPUSH
42783: CALL_OW 351
42787: OR
42788: IFFALSE 42794
// exit ;
42790: POP
42791: POP
42792: GO 43101
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42794: LD_ADDR_VAR 0 8
42798: PUSH
42799: LD_VAR 0 12
42803: PUSH
42804: LD_VAR 0 7
42808: ARRAY
42809: PUSH
42810: LD_INT 1
42812: ARRAY
42813: PPUSH
42814: LD_VAR 0 12
42818: PUSH
42819: LD_VAR 0 7
42823: ARRAY
42824: PUSH
42825: LD_INT 2
42827: ARRAY
42828: PPUSH
42829: CALL_OW 546
42833: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42834: LD_VAR 0 8
42838: PUSH
42839: LD_INT 1
42841: ARRAY
42842: PUSH
42843: LD_VAR 0 8
42847: PUSH
42848: LD_INT 2
42850: ARRAY
42851: PUSH
42852: LD_VAR 0 13
42856: PUSH
42857: LD_INT 2
42859: PLUS
42860: GREATER
42861: OR
42862: PUSH
42863: LD_VAR 0 8
42867: PUSH
42868: LD_INT 2
42870: ARRAY
42871: PUSH
42872: LD_VAR 0 13
42876: PUSH
42877: LD_INT 2
42879: MINUS
42880: LESS
42881: OR
42882: PUSH
42883: LD_VAR 0 8
42887: PUSH
42888: LD_INT 3
42890: ARRAY
42891: PUSH
42892: LD_INT 0
42894: PUSH
42895: LD_INT 8
42897: PUSH
42898: LD_INT 9
42900: PUSH
42901: LD_INT 10
42903: PUSH
42904: LD_INT 11
42906: PUSH
42907: LD_INT 12
42909: PUSH
42910: LD_INT 13
42912: PUSH
42913: LD_INT 16
42915: PUSH
42916: LD_INT 17
42918: PUSH
42919: LD_INT 18
42921: PUSH
42922: LD_INT 19
42924: PUSH
42925: LD_INT 20
42927: PUSH
42928: LD_INT 21
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: IN
42946: NOT
42947: OR
42948: PUSH
42949: LD_VAR 0 8
42953: PUSH
42954: LD_INT 5
42956: ARRAY
42957: NOT
42958: OR
42959: PUSH
42960: LD_VAR 0 8
42964: PUSH
42965: LD_INT 6
42967: ARRAY
42968: PUSH
42969: LD_INT 1
42971: PUSH
42972: LD_INT 2
42974: PUSH
42975: LD_INT 7
42977: PUSH
42978: LD_INT 9
42980: PUSH
42981: LD_INT 10
42983: PUSH
42984: LD_INT 11
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: IN
42995: NOT
42996: OR
42997: IFFALSE 43003
// exit ;
42999: POP
43000: POP
43001: GO 43101
// end ;
43003: GO 42674
43005: POP
43006: POP
// side := GetSide ( depot ) ;
43007: LD_ADDR_VAR 0 9
43011: PUSH
43012: LD_VAR 0 1
43016: PPUSH
43017: CALL_OW 255
43021: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43022: LD_VAR 0 9
43026: PPUSH
43027: LD_VAR 0 3
43031: PPUSH
43032: LD_VAR 0 4
43036: PPUSH
43037: LD_INT 20
43039: PPUSH
43040: CALL 35422 0 4
43044: PUSH
43045: LD_INT 4
43047: ARRAY
43048: IFFALSE 43052
// exit ;
43050: GO 43101
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43052: LD_VAR 0 2
43056: PUSH
43057: LD_INT 29
43059: PUSH
43060: LD_INT 30
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: IN
43067: PUSH
43068: LD_VAR 0 3
43072: PPUSH
43073: LD_VAR 0 4
43077: PPUSH
43078: LD_VAR 0 9
43082: PPUSH
43083: CALL_OW 440
43087: NOT
43088: AND
43089: IFFALSE 43093
// exit ;
43091: GO 43101
// result := true ;
43093: LD_ADDR_VAR 0 6
43097: PUSH
43098: LD_INT 1
43100: ST_TO_ADDR
// end ;
43101: LD_VAR 0 6
43105: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43106: LD_INT 0
43108: PPUSH
43109: PPUSH
43110: PPUSH
43111: PPUSH
43112: PPUSH
43113: PPUSH
43114: PPUSH
43115: PPUSH
43116: PPUSH
43117: PPUSH
43118: PPUSH
43119: PPUSH
43120: PPUSH
43121: PPUSH
43122: PPUSH
43123: PPUSH
43124: PPUSH
43125: PPUSH
43126: PPUSH
43127: PPUSH
43128: PPUSH
43129: PPUSH
43130: PPUSH
43131: PPUSH
43132: PPUSH
43133: PPUSH
43134: PPUSH
43135: PPUSH
43136: PPUSH
43137: PPUSH
43138: PPUSH
43139: PPUSH
43140: PPUSH
43141: PPUSH
43142: PPUSH
43143: PPUSH
43144: PPUSH
43145: PPUSH
43146: PPUSH
43147: PPUSH
43148: PPUSH
43149: PPUSH
43150: PPUSH
43151: PPUSH
43152: PPUSH
43153: PPUSH
43154: PPUSH
43155: PPUSH
43156: PPUSH
43157: PPUSH
43158: PPUSH
43159: PPUSH
43160: PPUSH
43161: PPUSH
43162: PPUSH
43163: PPUSH
43164: PPUSH
43165: PPUSH
// result = [ ] ;
43166: LD_ADDR_VAR 0 7
43170: PUSH
43171: EMPTY
43172: ST_TO_ADDR
// temp_list = [ ] ;
43173: LD_ADDR_VAR 0 9
43177: PUSH
43178: EMPTY
43179: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43180: LD_VAR 0 4
43184: PUSH
43185: LD_INT 0
43187: PUSH
43188: LD_INT 1
43190: PUSH
43191: LD_INT 2
43193: PUSH
43194: LD_INT 3
43196: PUSH
43197: LD_INT 4
43199: PUSH
43200: LD_INT 5
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: IN
43211: NOT
43212: PUSH
43213: LD_VAR 0 1
43217: PUSH
43218: LD_INT 0
43220: PUSH
43221: LD_INT 1
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: IN
43228: PUSH
43229: LD_VAR 0 5
43233: PUSH
43234: LD_INT 1
43236: PUSH
43237: LD_INT 2
43239: PUSH
43240: LD_INT 3
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: LIST
43247: IN
43248: NOT
43249: AND
43250: OR
43251: IFFALSE 43255
// exit ;
43253: GO 61646
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43255: LD_VAR 0 1
43259: PUSH
43260: LD_INT 6
43262: PUSH
43263: LD_INT 7
43265: PUSH
43266: LD_INT 8
43268: PUSH
43269: LD_INT 13
43271: PUSH
43272: LD_INT 12
43274: PUSH
43275: LD_INT 15
43277: PUSH
43278: LD_INT 11
43280: PUSH
43281: LD_INT 14
43283: PUSH
43284: LD_INT 10
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: IN
43298: IFFALSE 43308
// btype = b_lab ;
43300: LD_ADDR_VAR 0 1
43304: PUSH
43305: LD_INT 6
43307: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43308: LD_VAR 0 6
43312: PUSH
43313: LD_INT 0
43315: PUSH
43316: LD_INT 1
43318: PUSH
43319: LD_INT 2
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: LIST
43326: IN
43327: NOT
43328: PUSH
43329: LD_VAR 0 1
43333: PUSH
43334: LD_INT 0
43336: PUSH
43337: LD_INT 1
43339: PUSH
43340: LD_INT 2
43342: PUSH
43343: LD_INT 3
43345: PUSH
43346: LD_INT 6
43348: PUSH
43349: LD_INT 36
43351: PUSH
43352: LD_INT 4
43354: PUSH
43355: LD_INT 5
43357: PUSH
43358: LD_INT 31
43360: PUSH
43361: LD_INT 32
43363: PUSH
43364: LD_INT 33
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: IN
43380: NOT
43381: PUSH
43382: LD_VAR 0 6
43386: PUSH
43387: LD_INT 1
43389: EQUAL
43390: AND
43391: OR
43392: PUSH
43393: LD_VAR 0 1
43397: PUSH
43398: LD_INT 2
43400: PUSH
43401: LD_INT 3
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: IN
43408: NOT
43409: PUSH
43410: LD_VAR 0 6
43414: PUSH
43415: LD_INT 2
43417: EQUAL
43418: AND
43419: OR
43420: IFFALSE 43430
// mode = 0 ;
43422: LD_ADDR_VAR 0 6
43426: PUSH
43427: LD_INT 0
43429: ST_TO_ADDR
// case mode of 0 :
43430: LD_VAR 0 6
43434: PUSH
43435: LD_INT 0
43437: DOUBLE
43438: EQUAL
43439: IFTRUE 43443
43441: GO 54896
43443: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43444: LD_ADDR_VAR 0 11
43448: PUSH
43449: LD_INT 0
43451: PUSH
43452: LD_INT 0
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 0
43461: PUSH
43462: LD_INT 1
43464: NEG
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 1
43472: PUSH
43473: LD_INT 0
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 1
43482: PUSH
43483: LD_INT 1
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 0
43492: PUSH
43493: LD_INT 1
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 1
43502: NEG
43503: PUSH
43504: LD_INT 0
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 1
43513: NEG
43514: PUSH
43515: LD_INT 1
43517: NEG
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 1
43525: NEG
43526: PUSH
43527: LD_INT 2
43529: NEG
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 0
43537: PUSH
43538: LD_INT 2
43540: NEG
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 1
43548: PUSH
43549: LD_INT 1
43551: NEG
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 1
43559: PUSH
43560: LD_INT 2
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 0
43569: PUSH
43570: LD_INT 2
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: LD_INT 1
43579: NEG
43580: PUSH
43581: LD_INT 1
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 1
43590: PUSH
43591: LD_INT 3
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 0
43600: PUSH
43601: LD_INT 3
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 1
43610: NEG
43611: PUSH
43612: LD_INT 2
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43637: LD_ADDR_VAR 0 12
43641: PUSH
43642: LD_INT 0
43644: PUSH
43645: LD_INT 0
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 0
43654: PUSH
43655: LD_INT 1
43657: NEG
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 1
43665: PUSH
43666: LD_INT 0
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 1
43675: PUSH
43676: LD_INT 1
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 0
43685: PUSH
43686: LD_INT 1
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 1
43695: NEG
43696: PUSH
43697: LD_INT 0
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: PUSH
43704: LD_INT 1
43706: NEG
43707: PUSH
43708: LD_INT 1
43710: NEG
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 1
43718: PUSH
43719: LD_INT 1
43721: NEG
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 2
43729: PUSH
43730: LD_INT 0
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 2
43739: PUSH
43740: LD_INT 1
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: LD_INT 1
43749: NEG
43750: PUSH
43751: LD_INT 1
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: LD_INT 2
43760: NEG
43761: PUSH
43762: LD_INT 0
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 2
43771: NEG
43772: PUSH
43773: LD_INT 1
43775: NEG
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: LD_INT 2
43783: NEG
43784: PUSH
43785: LD_INT 1
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: LD_INT 3
43794: NEG
43795: PUSH
43796: LD_INT 0
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 3
43805: NEG
43806: PUSH
43807: LD_INT 1
43809: NEG
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: LIST
43821: LIST
43822: LIST
43823: LIST
43824: LIST
43825: LIST
43826: LIST
43827: LIST
43828: LIST
43829: LIST
43830: LIST
43831: LIST
43832: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43833: LD_ADDR_VAR 0 13
43837: PUSH
43838: LD_INT 0
43840: PUSH
43841: LD_INT 0
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 0
43850: PUSH
43851: LD_INT 1
43853: NEG
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 1
43861: PUSH
43862: LD_INT 0
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 1
43871: PUSH
43872: LD_INT 1
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 0
43881: PUSH
43882: LD_INT 1
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 1
43891: NEG
43892: PUSH
43893: LD_INT 0
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 1
43902: NEG
43903: PUSH
43904: LD_INT 1
43906: NEG
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 1
43914: NEG
43915: PUSH
43916: LD_INT 2
43918: NEG
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 2
43926: PUSH
43927: LD_INT 1
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 2
43936: PUSH
43937: LD_INT 2
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 1
43946: PUSH
43947: LD_INT 2
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 2
43956: NEG
43957: PUSH
43958: LD_INT 1
43960: NEG
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 2
43968: NEG
43969: PUSH
43970: LD_INT 2
43972: NEG
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 2
43980: NEG
43981: PUSH
43982: LD_INT 3
43984: NEG
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 3
43992: NEG
43993: PUSH
43994: LD_INT 2
43996: NEG
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 3
44004: NEG
44005: PUSH
44006: LD_INT 3
44008: NEG
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44032: LD_ADDR_VAR 0 14
44036: PUSH
44037: LD_INT 0
44039: PUSH
44040: LD_INT 0
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 0
44049: PUSH
44050: LD_INT 1
44052: NEG
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 1
44060: PUSH
44061: LD_INT 0
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 1
44070: PUSH
44071: LD_INT 1
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 0
44080: PUSH
44081: LD_INT 1
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 1
44090: NEG
44091: PUSH
44092: LD_INT 0
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 1
44101: NEG
44102: PUSH
44103: LD_INT 1
44105: NEG
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 1
44113: NEG
44114: PUSH
44115: LD_INT 2
44117: NEG
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 0
44125: PUSH
44126: LD_INT 2
44128: NEG
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: LD_INT 1
44136: PUSH
44137: LD_INT 1
44139: NEG
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 1
44147: PUSH
44148: LD_INT 2
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: LD_INT 0
44157: PUSH
44158: LD_INT 2
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PUSH
44165: LD_INT 1
44167: NEG
44168: PUSH
44169: LD_INT 1
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: LD_INT 1
44178: NEG
44179: PUSH
44180: LD_INT 3
44182: NEG
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: PUSH
44188: LD_INT 0
44190: PUSH
44191: LD_INT 3
44193: NEG
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 1
44201: PUSH
44202: LD_INT 2
44204: NEG
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44228: LD_ADDR_VAR 0 15
44232: PUSH
44233: LD_INT 0
44235: PUSH
44236: LD_INT 0
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 0
44245: PUSH
44246: LD_INT 1
44248: NEG
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 1
44256: PUSH
44257: LD_INT 0
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 1
44266: PUSH
44267: LD_INT 1
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 0
44276: PUSH
44277: LD_INT 1
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 1
44286: NEG
44287: PUSH
44288: LD_INT 0
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 1
44297: NEG
44298: PUSH
44299: LD_INT 1
44301: NEG
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 1
44309: PUSH
44310: LD_INT 1
44312: NEG
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 2
44320: PUSH
44321: LD_INT 0
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 2
44330: PUSH
44331: LD_INT 1
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 1
44340: NEG
44341: PUSH
44342: LD_INT 1
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 2
44351: NEG
44352: PUSH
44353: LD_INT 0
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 2
44362: NEG
44363: PUSH
44364: LD_INT 1
44366: NEG
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 2
44374: PUSH
44375: LD_INT 1
44377: NEG
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 3
44385: PUSH
44386: LD_INT 0
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 3
44395: PUSH
44396: LD_INT 1
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44421: LD_ADDR_VAR 0 16
44425: PUSH
44426: LD_INT 0
44428: PUSH
44429: LD_INT 0
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 0
44438: PUSH
44439: LD_INT 1
44441: NEG
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 1
44449: PUSH
44450: LD_INT 0
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 1
44459: PUSH
44460: LD_INT 1
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 0
44469: PUSH
44470: LD_INT 1
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 1
44479: NEG
44480: PUSH
44481: LD_INT 0
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 1
44490: NEG
44491: PUSH
44492: LD_INT 1
44494: NEG
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 1
44502: NEG
44503: PUSH
44504: LD_INT 2
44506: NEG
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 2
44514: PUSH
44515: LD_INT 1
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 2
44524: PUSH
44525: LD_INT 2
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 1
44534: PUSH
44535: LD_INT 2
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 2
44544: NEG
44545: PUSH
44546: LD_INT 1
44548: NEG
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 2
44556: NEG
44557: PUSH
44558: LD_INT 2
44560: NEG
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 3
44568: PUSH
44569: LD_INT 2
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 3
44578: PUSH
44579: LD_INT 3
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 2
44588: PUSH
44589: LD_INT 3
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44614: LD_ADDR_VAR 0 17
44618: PUSH
44619: LD_INT 0
44621: PUSH
44622: LD_INT 0
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 0
44631: PUSH
44632: LD_INT 1
44634: NEG
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 1
44642: PUSH
44643: LD_INT 0
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 1
44652: PUSH
44653: LD_INT 1
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 0
44662: PUSH
44663: LD_INT 1
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 1
44672: NEG
44673: PUSH
44674: LD_INT 0
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 1
44683: NEG
44684: PUSH
44685: LD_INT 1
44687: NEG
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 1
44695: NEG
44696: PUSH
44697: LD_INT 2
44699: NEG
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 0
44707: PUSH
44708: LD_INT 2
44710: NEG
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 1
44718: PUSH
44719: LD_INT 1
44721: NEG
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 2
44729: PUSH
44730: LD_INT 0
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 2
44739: PUSH
44740: LD_INT 1
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 2
44749: PUSH
44750: LD_INT 2
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 1
44759: PUSH
44760: LD_INT 2
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 0
44769: PUSH
44770: LD_INT 2
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 1
44779: NEG
44780: PUSH
44781: LD_INT 1
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 2
44790: NEG
44791: PUSH
44792: LD_INT 0
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 2
44801: NEG
44802: PUSH
44803: LD_INT 1
44805: NEG
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 2
44813: NEG
44814: PUSH
44815: LD_INT 2
44817: NEG
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44844: LD_ADDR_VAR 0 18
44848: PUSH
44849: LD_INT 0
44851: PUSH
44852: LD_INT 0
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 0
44861: PUSH
44862: LD_INT 1
44864: NEG
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 1
44872: PUSH
44873: LD_INT 0
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 1
44882: PUSH
44883: LD_INT 1
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 0
44892: PUSH
44893: LD_INT 1
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 1
44902: NEG
44903: PUSH
44904: LD_INT 0
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 1
44913: NEG
44914: PUSH
44915: LD_INT 1
44917: NEG
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 1
44925: NEG
44926: PUSH
44927: LD_INT 2
44929: NEG
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: LD_INT 0
44937: PUSH
44938: LD_INT 2
44940: NEG
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 1
44948: PUSH
44949: LD_INT 1
44951: NEG
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 2
44959: PUSH
44960: LD_INT 0
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 2
44969: PUSH
44970: LD_INT 1
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 2
44979: PUSH
44980: LD_INT 2
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 1
44989: PUSH
44990: LD_INT 2
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 0
44999: PUSH
45000: LD_INT 2
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 1
45009: NEG
45010: PUSH
45011: LD_INT 1
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 2
45020: NEG
45021: PUSH
45022: LD_INT 0
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 2
45031: NEG
45032: PUSH
45033: LD_INT 1
45035: NEG
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 2
45043: NEG
45044: PUSH
45045: LD_INT 2
45047: NEG
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45074: LD_ADDR_VAR 0 19
45078: PUSH
45079: LD_INT 0
45081: PUSH
45082: LD_INT 0
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 0
45091: PUSH
45092: LD_INT 1
45094: NEG
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 1
45102: PUSH
45103: LD_INT 0
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 1
45112: PUSH
45113: LD_INT 1
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 0
45122: PUSH
45123: LD_INT 1
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 1
45132: NEG
45133: PUSH
45134: LD_INT 0
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 1
45143: NEG
45144: PUSH
45145: LD_INT 1
45147: NEG
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 1
45155: NEG
45156: PUSH
45157: LD_INT 2
45159: NEG
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 0
45167: PUSH
45168: LD_INT 2
45170: NEG
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 1
45178: PUSH
45179: LD_INT 1
45181: NEG
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 2
45189: PUSH
45190: LD_INT 0
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 2
45199: PUSH
45200: LD_INT 1
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 2
45209: PUSH
45210: LD_INT 2
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 1
45219: PUSH
45220: LD_INT 2
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 0
45229: PUSH
45230: LD_INT 2
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 1
45239: NEG
45240: PUSH
45241: LD_INT 1
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 2
45250: NEG
45251: PUSH
45252: LD_INT 0
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 2
45261: NEG
45262: PUSH
45263: LD_INT 1
45265: NEG
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 2
45273: NEG
45274: PUSH
45275: LD_INT 2
45277: NEG
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45304: LD_ADDR_VAR 0 20
45308: PUSH
45309: LD_INT 0
45311: PUSH
45312: LD_INT 0
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 0
45321: PUSH
45322: LD_INT 1
45324: NEG
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 1
45332: PUSH
45333: LD_INT 0
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 1
45342: PUSH
45343: LD_INT 1
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 0
45352: PUSH
45353: LD_INT 1
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 1
45362: NEG
45363: PUSH
45364: LD_INT 0
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 1
45373: NEG
45374: PUSH
45375: LD_INT 1
45377: NEG
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 1
45385: NEG
45386: PUSH
45387: LD_INT 2
45389: NEG
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 0
45397: PUSH
45398: LD_INT 2
45400: NEG
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 1
45408: PUSH
45409: LD_INT 1
45411: NEG
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 2
45419: PUSH
45420: LD_INT 0
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 2
45429: PUSH
45430: LD_INT 1
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 2
45439: PUSH
45440: LD_INT 2
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 1
45449: PUSH
45450: LD_INT 2
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 0
45459: PUSH
45460: LD_INT 2
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 1
45469: NEG
45470: PUSH
45471: LD_INT 1
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 2
45480: NEG
45481: PUSH
45482: LD_INT 0
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 2
45491: NEG
45492: PUSH
45493: LD_INT 1
45495: NEG
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 2
45503: NEG
45504: PUSH
45505: LD_INT 2
45507: NEG
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45534: LD_ADDR_VAR 0 21
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: LD_INT 0
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 0
45551: PUSH
45552: LD_INT 1
45554: NEG
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 1
45562: PUSH
45563: LD_INT 0
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 1
45572: PUSH
45573: LD_INT 1
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 0
45582: PUSH
45583: LD_INT 1
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 1
45592: NEG
45593: PUSH
45594: LD_INT 0
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 1
45603: NEG
45604: PUSH
45605: LD_INT 1
45607: NEG
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 1
45615: NEG
45616: PUSH
45617: LD_INT 2
45619: NEG
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 0
45627: PUSH
45628: LD_INT 2
45630: NEG
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 1
45638: PUSH
45639: LD_INT 1
45641: NEG
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 2
45649: PUSH
45650: LD_INT 0
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 2
45659: PUSH
45660: LD_INT 1
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 2
45669: PUSH
45670: LD_INT 2
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 1
45679: PUSH
45680: LD_INT 2
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 0
45689: PUSH
45690: LD_INT 2
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 1
45699: NEG
45700: PUSH
45701: LD_INT 1
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 2
45710: NEG
45711: PUSH
45712: LD_INT 0
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 2
45721: NEG
45722: PUSH
45723: LD_INT 1
45725: NEG
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 2
45733: NEG
45734: PUSH
45735: LD_INT 2
45737: NEG
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45764: LD_ADDR_VAR 0 22
45768: PUSH
45769: LD_INT 0
45771: PUSH
45772: LD_INT 0
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 0
45781: PUSH
45782: LD_INT 1
45784: NEG
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 1
45792: PUSH
45793: LD_INT 0
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 1
45802: PUSH
45803: LD_INT 1
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 0
45812: PUSH
45813: LD_INT 1
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 1
45822: NEG
45823: PUSH
45824: LD_INT 0
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 1
45833: NEG
45834: PUSH
45835: LD_INT 1
45837: NEG
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 1
45845: NEG
45846: PUSH
45847: LD_INT 2
45849: NEG
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 0
45857: PUSH
45858: LD_INT 2
45860: NEG
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 1
45868: PUSH
45869: LD_INT 1
45871: NEG
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 2
45879: PUSH
45880: LD_INT 0
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 2
45889: PUSH
45890: LD_INT 1
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 2
45899: PUSH
45900: LD_INT 2
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: LD_INT 1
45909: PUSH
45910: LD_INT 2
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 0
45919: PUSH
45920: LD_INT 2
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 1
45929: NEG
45930: PUSH
45931: LD_INT 1
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 2
45940: NEG
45941: PUSH
45942: LD_INT 0
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 2
45951: NEG
45952: PUSH
45953: LD_INT 1
45955: NEG
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 2
45963: NEG
45964: PUSH
45965: LD_INT 2
45967: NEG
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45994: LD_ADDR_VAR 0 23
45998: PUSH
45999: LD_INT 0
46001: PUSH
46002: LD_INT 0
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 0
46011: PUSH
46012: LD_INT 1
46014: NEG
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 1
46022: PUSH
46023: LD_INT 0
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 1
46032: PUSH
46033: LD_INT 1
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 0
46042: PUSH
46043: LD_INT 1
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 1
46052: NEG
46053: PUSH
46054: LD_INT 0
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 1
46063: NEG
46064: PUSH
46065: LD_INT 1
46067: NEG
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 1
46075: NEG
46076: PUSH
46077: LD_INT 2
46079: NEG
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 0
46087: PUSH
46088: LD_INT 2
46090: NEG
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 1
46098: PUSH
46099: LD_INT 1
46101: NEG
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 2
46109: PUSH
46110: LD_INT 0
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 2
46119: PUSH
46120: LD_INT 1
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 2
46129: PUSH
46130: LD_INT 2
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 1
46139: PUSH
46140: LD_INT 2
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 0
46149: PUSH
46150: LD_INT 2
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 1
46159: NEG
46160: PUSH
46161: LD_INT 1
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 2
46170: NEG
46171: PUSH
46172: LD_INT 0
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 2
46181: NEG
46182: PUSH
46183: LD_INT 1
46185: NEG
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 2
46193: NEG
46194: PUSH
46195: LD_INT 2
46197: NEG
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 2
46205: NEG
46206: PUSH
46207: LD_INT 3
46209: NEG
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 1
46217: NEG
46218: PUSH
46219: LD_INT 3
46221: NEG
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 1
46229: PUSH
46230: LD_INT 2
46232: NEG
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 2
46240: PUSH
46241: LD_INT 1
46243: NEG
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46274: LD_ADDR_VAR 0 24
46278: PUSH
46279: LD_INT 0
46281: PUSH
46282: LD_INT 0
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 0
46291: PUSH
46292: LD_INT 1
46294: NEG
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 1
46302: PUSH
46303: LD_INT 0
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 1
46312: PUSH
46313: LD_INT 1
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 0
46322: PUSH
46323: LD_INT 1
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 1
46332: NEG
46333: PUSH
46334: LD_INT 0
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 1
46343: NEG
46344: PUSH
46345: LD_INT 1
46347: NEG
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 1
46355: NEG
46356: PUSH
46357: LD_INT 2
46359: NEG
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 0
46367: PUSH
46368: LD_INT 2
46370: NEG
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 1
46378: PUSH
46379: LD_INT 1
46381: NEG
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 2
46389: PUSH
46390: LD_INT 0
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 2
46399: PUSH
46400: LD_INT 1
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 2
46409: PUSH
46410: LD_INT 2
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 1
46419: PUSH
46420: LD_INT 2
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 0
46429: PUSH
46430: LD_INT 2
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 1
46439: NEG
46440: PUSH
46441: LD_INT 1
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 2
46450: NEG
46451: PUSH
46452: LD_INT 0
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 2
46461: NEG
46462: PUSH
46463: LD_INT 1
46465: NEG
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 2
46473: NEG
46474: PUSH
46475: LD_INT 2
46477: NEG
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 1
46485: PUSH
46486: LD_INT 2
46488: NEG
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 2
46496: PUSH
46497: LD_INT 1
46499: NEG
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 3
46507: PUSH
46508: LD_INT 1
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 3
46517: PUSH
46518: LD_INT 2
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46550: LD_ADDR_VAR 0 25
46554: PUSH
46555: LD_INT 0
46557: PUSH
46558: LD_INT 0
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 0
46567: PUSH
46568: LD_INT 1
46570: NEG
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 1
46578: PUSH
46579: LD_INT 0
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 1
46588: PUSH
46589: LD_INT 1
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 0
46598: PUSH
46599: LD_INT 1
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 1
46608: NEG
46609: PUSH
46610: LD_INT 0
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 1
46619: NEG
46620: PUSH
46621: LD_INT 1
46623: NEG
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 1
46631: NEG
46632: PUSH
46633: LD_INT 2
46635: NEG
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 0
46643: PUSH
46644: LD_INT 2
46646: NEG
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 1
46654: PUSH
46655: LD_INT 1
46657: NEG
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 2
46665: PUSH
46666: LD_INT 0
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 2
46675: PUSH
46676: LD_INT 1
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 2
46685: PUSH
46686: LD_INT 2
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 1
46695: PUSH
46696: LD_INT 2
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 0
46705: PUSH
46706: LD_INT 2
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 1
46715: NEG
46716: PUSH
46717: LD_INT 1
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 2
46726: NEG
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 2
46737: NEG
46738: PUSH
46739: LD_INT 1
46741: NEG
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 2
46749: NEG
46750: PUSH
46751: LD_INT 2
46753: NEG
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 3
46761: PUSH
46762: LD_INT 1
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 3
46771: PUSH
46772: LD_INT 2
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 2
46781: PUSH
46782: LD_INT 3
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 1
46791: PUSH
46792: LD_INT 3
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46824: LD_ADDR_VAR 0 26
46828: PUSH
46829: LD_INT 0
46831: PUSH
46832: LD_INT 0
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 0
46841: PUSH
46842: LD_INT 1
46844: NEG
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 1
46852: PUSH
46853: LD_INT 0
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 1
46862: PUSH
46863: LD_INT 1
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 0
46872: PUSH
46873: LD_INT 1
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 1
46882: NEG
46883: PUSH
46884: LD_INT 0
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 1
46893: NEG
46894: PUSH
46895: LD_INT 1
46897: NEG
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 1
46905: NEG
46906: PUSH
46907: LD_INT 2
46909: NEG
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 0
46917: PUSH
46918: LD_INT 2
46920: NEG
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 1
46928: PUSH
46929: LD_INT 1
46931: NEG
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 2
46939: PUSH
46940: LD_INT 0
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 2
46949: PUSH
46950: LD_INT 1
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 2
46959: PUSH
46960: LD_INT 2
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 1
46969: PUSH
46970: LD_INT 2
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 0
46979: PUSH
46980: LD_INT 2
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 1
46989: NEG
46990: PUSH
46991: LD_INT 1
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 2
47000: NEG
47001: PUSH
47002: LD_INT 0
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 2
47011: NEG
47012: PUSH
47013: LD_INT 1
47015: NEG
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 2
47023: NEG
47024: PUSH
47025: LD_INT 2
47027: NEG
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 2
47035: PUSH
47036: LD_INT 3
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 1
47045: PUSH
47046: LD_INT 3
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 1
47055: NEG
47056: PUSH
47057: LD_INT 2
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 2
47066: NEG
47067: PUSH
47068: LD_INT 1
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47100: LD_ADDR_VAR 0 27
47104: PUSH
47105: LD_INT 0
47107: PUSH
47108: LD_INT 0
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 0
47117: PUSH
47118: LD_INT 1
47120: NEG
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 1
47128: PUSH
47129: LD_INT 0
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 1
47138: PUSH
47139: LD_INT 1
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 0
47148: PUSH
47149: LD_INT 1
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 1
47158: NEG
47159: PUSH
47160: LD_INT 0
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 1
47169: NEG
47170: PUSH
47171: LD_INT 1
47173: NEG
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 1
47181: NEG
47182: PUSH
47183: LD_INT 2
47185: NEG
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 0
47193: PUSH
47194: LD_INT 2
47196: NEG
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 1
47204: PUSH
47205: LD_INT 1
47207: NEG
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 2
47215: PUSH
47216: LD_INT 0
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 2
47225: PUSH
47226: LD_INT 1
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 2
47235: PUSH
47236: LD_INT 2
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 1
47245: PUSH
47246: LD_INT 2
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 0
47255: PUSH
47256: LD_INT 2
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 1
47265: NEG
47266: PUSH
47267: LD_INT 1
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 2
47276: NEG
47277: PUSH
47278: LD_INT 0
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 2
47287: NEG
47288: PUSH
47289: LD_INT 1
47291: NEG
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 2
47299: NEG
47300: PUSH
47301: LD_INT 2
47303: NEG
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 1
47311: NEG
47312: PUSH
47313: LD_INT 2
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 2
47322: NEG
47323: PUSH
47324: LD_INT 1
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 3
47333: NEG
47334: PUSH
47335: LD_INT 1
47337: NEG
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 3
47345: NEG
47346: PUSH
47347: LD_INT 2
47349: NEG
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47380: LD_ADDR_VAR 0 28
47384: PUSH
47385: LD_INT 0
47387: PUSH
47388: LD_INT 0
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 0
47397: PUSH
47398: LD_INT 1
47400: NEG
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 1
47408: PUSH
47409: LD_INT 0
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 1
47418: PUSH
47419: LD_INT 1
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 0
47428: PUSH
47429: LD_INT 1
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 1
47438: NEG
47439: PUSH
47440: LD_INT 0
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 1
47449: NEG
47450: PUSH
47451: LD_INT 1
47453: NEG
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 1
47461: NEG
47462: PUSH
47463: LD_INT 2
47465: NEG
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 0
47473: PUSH
47474: LD_INT 2
47476: NEG
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 1
47484: PUSH
47485: LD_INT 1
47487: NEG
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 2
47495: PUSH
47496: LD_INT 0
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 2
47505: PUSH
47506: LD_INT 1
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 2
47515: PUSH
47516: LD_INT 2
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 1
47525: PUSH
47526: LD_INT 2
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 0
47535: PUSH
47536: LD_INT 2
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 1
47545: NEG
47546: PUSH
47547: LD_INT 1
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 2
47556: NEG
47557: PUSH
47558: LD_INT 0
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 2
47567: NEG
47568: PUSH
47569: LD_INT 1
47571: NEG
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 2
47579: NEG
47580: PUSH
47581: LD_INT 2
47583: NEG
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 2
47591: NEG
47592: PUSH
47593: LD_INT 3
47595: NEG
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 1
47603: NEG
47604: PUSH
47605: LD_INT 3
47607: NEG
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 3
47615: NEG
47616: PUSH
47617: LD_INT 1
47619: NEG
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 3
47627: NEG
47628: PUSH
47629: LD_INT 2
47631: NEG
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47662: LD_ADDR_VAR 0 29
47666: PUSH
47667: LD_INT 0
47669: PUSH
47670: LD_INT 0
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 0
47679: PUSH
47680: LD_INT 1
47682: NEG
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 1
47690: PUSH
47691: LD_INT 0
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 1
47700: PUSH
47701: LD_INT 1
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 0
47710: PUSH
47711: LD_INT 1
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 1
47720: NEG
47721: PUSH
47722: LD_INT 0
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 1
47731: NEG
47732: PUSH
47733: LD_INT 1
47735: NEG
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 1
47743: NEG
47744: PUSH
47745: LD_INT 2
47747: NEG
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 0
47755: PUSH
47756: LD_INT 2
47758: NEG
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 1
47766: PUSH
47767: LD_INT 1
47769: NEG
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 2
47777: PUSH
47778: LD_INT 0
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 2
47787: PUSH
47788: LD_INT 1
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 1
47797: PUSH
47798: LD_INT 2
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 0
47807: PUSH
47808: LD_INT 2
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 1
47817: NEG
47818: PUSH
47819: LD_INT 1
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 2
47828: NEG
47829: PUSH
47830: LD_INT 1
47832: NEG
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 2
47840: NEG
47841: PUSH
47842: LD_INT 2
47844: NEG
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 2
47852: NEG
47853: PUSH
47854: LD_INT 3
47856: NEG
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 2
47864: PUSH
47865: LD_INT 1
47867: NEG
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 3
47875: PUSH
47876: LD_INT 1
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 1
47885: PUSH
47886: LD_INT 3
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 1
47895: NEG
47896: PUSH
47897: LD_INT 2
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 3
47906: NEG
47907: PUSH
47908: LD_INT 2
47910: NEG
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47941: LD_ADDR_VAR 0 30
47945: PUSH
47946: LD_INT 0
47948: PUSH
47949: LD_INT 0
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 0
47958: PUSH
47959: LD_INT 1
47961: NEG
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 1
47969: PUSH
47970: LD_INT 0
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 1
47979: PUSH
47980: LD_INT 1
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 0
47989: PUSH
47990: LD_INT 1
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 1
47999: NEG
48000: PUSH
48001: LD_INT 0
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 1
48010: NEG
48011: PUSH
48012: LD_INT 1
48014: NEG
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 1
48022: NEG
48023: PUSH
48024: LD_INT 2
48026: NEG
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: LD_INT 2
48037: NEG
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 1
48045: PUSH
48046: LD_INT 1
48048: NEG
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 2
48056: PUSH
48057: LD_INT 0
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 2
48066: PUSH
48067: LD_INT 1
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 2
48076: PUSH
48077: LD_INT 2
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 1
48086: PUSH
48087: LD_INT 2
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 1
48096: NEG
48097: PUSH
48098: LD_INT 1
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 2
48107: NEG
48108: PUSH
48109: LD_INT 0
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 2
48118: NEG
48119: PUSH
48120: LD_INT 1
48122: NEG
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 1
48130: NEG
48131: PUSH
48132: LD_INT 3
48134: NEG
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 1
48142: PUSH
48143: LD_INT 2
48145: NEG
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 3
48153: PUSH
48154: LD_INT 2
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 2
48163: PUSH
48164: LD_INT 3
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 2
48173: NEG
48174: PUSH
48175: LD_INT 1
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 3
48184: NEG
48185: PUSH
48186: LD_INT 1
48188: NEG
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48219: LD_ADDR_VAR 0 31
48223: PUSH
48224: LD_INT 0
48226: PUSH
48227: LD_INT 0
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 0
48236: PUSH
48237: LD_INT 1
48239: NEG
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 1
48247: PUSH
48248: LD_INT 0
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 1
48257: PUSH
48258: LD_INT 1
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 0
48267: PUSH
48268: LD_INT 1
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 1
48277: NEG
48278: PUSH
48279: LD_INT 0
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 1
48288: NEG
48289: PUSH
48290: LD_INT 1
48292: NEG
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 1
48300: NEG
48301: PUSH
48302: LD_INT 2
48304: NEG
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 1
48312: PUSH
48313: LD_INT 1
48315: NEG
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 2
48323: PUSH
48324: LD_INT 0
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 2
48333: PUSH
48334: LD_INT 1
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 2
48343: PUSH
48344: LD_INT 2
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 1
48353: PUSH
48354: LD_INT 2
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 0
48363: PUSH
48364: LD_INT 2
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 1
48373: NEG
48374: PUSH
48375: LD_INT 1
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 2
48384: NEG
48385: PUSH
48386: LD_INT 1
48388: NEG
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 2
48396: NEG
48397: PUSH
48398: LD_INT 2
48400: NEG
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 2
48408: NEG
48409: PUSH
48410: LD_INT 3
48412: NEG
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 2
48420: PUSH
48421: LD_INT 1
48423: NEG
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 3
48431: PUSH
48432: LD_INT 1
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 1
48441: PUSH
48442: LD_INT 3
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 1
48451: NEG
48452: PUSH
48453: LD_INT 2
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 3
48462: NEG
48463: PUSH
48464: LD_INT 2
48466: NEG
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48497: LD_ADDR_VAR 0 32
48501: PUSH
48502: LD_INT 0
48504: PUSH
48505: LD_INT 0
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 0
48514: PUSH
48515: LD_INT 1
48517: NEG
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 1
48525: PUSH
48526: LD_INT 0
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 1
48535: PUSH
48536: LD_INT 1
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 0
48545: PUSH
48546: LD_INT 1
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 1
48555: NEG
48556: PUSH
48557: LD_INT 0
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 1
48566: NEG
48567: PUSH
48568: LD_INT 1
48570: NEG
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 1
48578: NEG
48579: PUSH
48580: LD_INT 2
48582: NEG
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: LD_INT 2
48593: NEG
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 1
48601: PUSH
48602: LD_INT 1
48604: NEG
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 2
48612: PUSH
48613: LD_INT 1
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 2
48622: PUSH
48623: LD_INT 2
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 1
48632: PUSH
48633: LD_INT 2
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 0
48642: PUSH
48643: LD_INT 2
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 1
48652: NEG
48653: PUSH
48654: LD_INT 1
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 2
48663: NEG
48664: PUSH
48665: LD_INT 0
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 2
48674: NEG
48675: PUSH
48676: LD_INT 1
48678: NEG
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 1
48686: NEG
48687: PUSH
48688: LD_INT 3
48690: NEG
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 1
48698: PUSH
48699: LD_INT 2
48701: NEG
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 3
48709: PUSH
48710: LD_INT 2
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 2
48719: PUSH
48720: LD_INT 3
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 2
48729: NEG
48730: PUSH
48731: LD_INT 1
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 3
48740: NEG
48741: PUSH
48742: LD_INT 1
48744: NEG
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48775: LD_ADDR_VAR 0 33
48779: PUSH
48780: LD_INT 0
48782: PUSH
48783: LD_INT 0
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 0
48792: PUSH
48793: LD_INT 1
48795: NEG
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 1
48803: PUSH
48804: LD_INT 0
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 1
48813: PUSH
48814: LD_INT 1
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 0
48823: PUSH
48824: LD_INT 1
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 1
48833: NEG
48834: PUSH
48835: LD_INT 0
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 1
48844: NEG
48845: PUSH
48846: LD_INT 1
48848: NEG
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 1
48856: NEG
48857: PUSH
48858: LD_INT 2
48860: NEG
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 1
48868: PUSH
48869: LD_INT 1
48871: NEG
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 2
48879: PUSH
48880: LD_INT 0
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 2
48889: PUSH
48890: LD_INT 1
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 1
48899: PUSH
48900: LD_INT 2
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 0
48909: PUSH
48910: LD_INT 2
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 1
48919: NEG
48920: PUSH
48921: LD_INT 1
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 2
48930: NEG
48931: PUSH
48932: LD_INT 0
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 2
48941: NEG
48942: PUSH
48943: LD_INT 1
48945: NEG
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 2
48953: NEG
48954: PUSH
48955: LD_INT 2
48957: NEG
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 2
48965: NEG
48966: PUSH
48967: LD_INT 3
48969: NEG
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 2
48977: PUSH
48978: LD_INT 1
48980: NEG
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 3
48988: PUSH
48989: LD_INT 1
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 1
48998: PUSH
48999: LD_INT 3
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 1
49008: NEG
49009: PUSH
49010: LD_INT 2
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 3
49019: NEG
49020: PUSH
49021: LD_INT 2
49023: NEG
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49054: LD_ADDR_VAR 0 34
49058: PUSH
49059: LD_INT 0
49061: PUSH
49062: LD_INT 0
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 0
49071: PUSH
49072: LD_INT 1
49074: NEG
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 1
49082: PUSH
49083: LD_INT 0
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 1
49092: PUSH
49093: LD_INT 1
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 0
49102: PUSH
49103: LD_INT 1
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 1
49112: NEG
49113: PUSH
49114: LD_INT 0
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 1
49123: NEG
49124: PUSH
49125: LD_INT 1
49127: NEG
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 1
49135: NEG
49136: PUSH
49137: LD_INT 2
49139: NEG
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 0
49147: PUSH
49148: LD_INT 2
49150: NEG
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 1
49158: PUSH
49159: LD_INT 1
49161: NEG
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 2
49169: PUSH
49170: LD_INT 1
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 2
49179: PUSH
49180: LD_INT 2
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 1
49189: PUSH
49190: LD_INT 2
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 1
49199: NEG
49200: PUSH
49201: LD_INT 1
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 2
49210: NEG
49211: PUSH
49212: LD_INT 0
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 2
49221: NEG
49222: PUSH
49223: LD_INT 1
49225: NEG
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 2
49233: NEG
49234: PUSH
49235: LD_INT 2
49237: NEG
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 1
49245: NEG
49246: PUSH
49247: LD_INT 3
49249: NEG
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 1
49257: PUSH
49258: LD_INT 2
49260: NEG
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 3
49268: PUSH
49269: LD_INT 2
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 2
49278: PUSH
49279: LD_INT 3
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 2
49288: NEG
49289: PUSH
49290: LD_INT 1
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 3
49299: NEG
49300: PUSH
49301: LD_INT 1
49303: NEG
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49334: LD_ADDR_VAR 0 35
49338: PUSH
49339: LD_INT 0
49341: PUSH
49342: LD_INT 0
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 0
49351: PUSH
49352: LD_INT 1
49354: NEG
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 1
49362: PUSH
49363: LD_INT 0
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 1
49372: PUSH
49373: LD_INT 1
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 0
49382: PUSH
49383: LD_INT 1
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 1
49392: NEG
49393: PUSH
49394: LD_INT 0
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 1
49403: NEG
49404: PUSH
49405: LD_INT 1
49407: NEG
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 2
49415: PUSH
49416: LD_INT 1
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 2
49425: NEG
49426: PUSH
49427: LD_INT 1
49429: NEG
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49446: LD_ADDR_VAR 0 36
49450: PUSH
49451: LD_INT 0
49453: PUSH
49454: LD_INT 0
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 0
49463: PUSH
49464: LD_INT 1
49466: NEG
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 1
49474: PUSH
49475: LD_INT 0
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 1
49484: PUSH
49485: LD_INT 1
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 0
49494: PUSH
49495: LD_INT 1
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 1
49504: NEG
49505: PUSH
49506: LD_INT 0
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 1
49515: NEG
49516: PUSH
49517: LD_INT 1
49519: NEG
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 1
49527: NEG
49528: PUSH
49529: LD_INT 2
49531: NEG
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 1
49539: PUSH
49540: LD_INT 2
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49558: LD_ADDR_VAR 0 37
49562: PUSH
49563: LD_INT 0
49565: PUSH
49566: LD_INT 0
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 0
49575: PUSH
49576: LD_INT 1
49578: NEG
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 1
49586: PUSH
49587: LD_INT 0
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 1
49596: PUSH
49597: LD_INT 1
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 0
49606: PUSH
49607: LD_INT 1
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 1
49616: NEG
49617: PUSH
49618: LD_INT 0
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 1
49627: NEG
49628: PUSH
49629: LD_INT 1
49631: NEG
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: LD_INT 1
49639: PUSH
49640: LD_INT 1
49642: NEG
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 1
49650: NEG
49651: PUSH
49652: LD_INT 1
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49670: LD_ADDR_VAR 0 38
49674: PUSH
49675: LD_INT 0
49677: PUSH
49678: LD_INT 0
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 0
49687: PUSH
49688: LD_INT 1
49690: NEG
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 1
49698: PUSH
49699: LD_INT 0
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 1
49708: PUSH
49709: LD_INT 1
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 0
49718: PUSH
49719: LD_INT 1
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 1
49728: NEG
49729: PUSH
49730: LD_INT 0
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 1
49739: NEG
49740: PUSH
49741: LD_INT 1
49743: NEG
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 2
49751: PUSH
49752: LD_INT 1
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 2
49761: NEG
49762: PUSH
49763: LD_INT 1
49765: NEG
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49782: LD_ADDR_VAR 0 39
49786: PUSH
49787: LD_INT 0
49789: PUSH
49790: LD_INT 0
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 0
49799: PUSH
49800: LD_INT 1
49802: NEG
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 1
49810: PUSH
49811: LD_INT 0
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 1
49820: PUSH
49821: LD_INT 1
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 0
49830: PUSH
49831: LD_INT 1
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 1
49840: NEG
49841: PUSH
49842: LD_INT 0
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 1
49851: NEG
49852: PUSH
49853: LD_INT 1
49855: NEG
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 1
49863: NEG
49864: PUSH
49865: LD_INT 2
49867: NEG
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 1
49875: PUSH
49876: LD_INT 2
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49894: LD_ADDR_VAR 0 40
49898: PUSH
49899: LD_INT 0
49901: PUSH
49902: LD_INT 0
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 0
49911: PUSH
49912: LD_INT 1
49914: NEG
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 1
49922: PUSH
49923: LD_INT 0
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 1
49932: PUSH
49933: LD_INT 1
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 0
49942: PUSH
49943: LD_INT 1
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 1
49952: NEG
49953: PUSH
49954: LD_INT 0
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 1
49963: NEG
49964: PUSH
49965: LD_INT 1
49967: NEG
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 1
49975: PUSH
49976: LD_INT 1
49978: NEG
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 1
49986: NEG
49987: PUSH
49988: LD_INT 1
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50006: LD_ADDR_VAR 0 41
50010: PUSH
50011: LD_INT 0
50013: PUSH
50014: LD_INT 0
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 0
50023: PUSH
50024: LD_INT 1
50026: NEG
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 1
50034: PUSH
50035: LD_INT 0
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 1
50044: PUSH
50045: LD_INT 1
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 0
50054: PUSH
50055: LD_INT 1
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 1
50064: NEG
50065: PUSH
50066: LD_INT 0
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 1
50075: NEG
50076: PUSH
50077: LD_INT 1
50079: NEG
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 1
50087: NEG
50088: PUSH
50089: LD_INT 2
50091: NEG
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 1
50099: PUSH
50100: LD_INT 1
50102: NEG
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 2
50110: PUSH
50111: LD_INT 0
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 2
50120: PUSH
50121: LD_INT 1
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 2
50130: PUSH
50131: LD_INT 2
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 1
50140: PUSH
50141: LD_INT 2
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 1
50150: NEG
50151: PUSH
50152: LD_INT 1
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 2
50161: NEG
50162: PUSH
50163: LD_INT 0
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 2
50172: NEG
50173: PUSH
50174: LD_INT 1
50176: NEG
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 2
50184: NEG
50185: PUSH
50186: LD_INT 2
50188: NEG
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 2
50196: NEG
50197: PUSH
50198: LD_INT 3
50200: NEG
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 2
50208: PUSH
50209: LD_INT 1
50211: NEG
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 3
50219: PUSH
50220: LD_INT 0
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 3
50229: PUSH
50230: LD_INT 1
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 3
50239: PUSH
50240: LD_INT 2
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 3
50249: PUSH
50250: LD_INT 3
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 2
50259: PUSH
50260: LD_INT 3
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 2
50269: NEG
50270: PUSH
50271: LD_INT 1
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 3
50280: NEG
50281: PUSH
50282: LD_INT 0
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 3
50291: NEG
50292: PUSH
50293: LD_INT 1
50295: NEG
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 3
50303: NEG
50304: PUSH
50305: LD_INT 2
50307: NEG
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 3
50315: NEG
50316: PUSH
50317: LD_INT 3
50319: NEG
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50356: LD_ADDR_VAR 0 42
50360: PUSH
50361: LD_INT 0
50363: PUSH
50364: LD_INT 0
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 0
50373: PUSH
50374: LD_INT 1
50376: NEG
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 1
50384: PUSH
50385: LD_INT 0
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 1
50394: PUSH
50395: LD_INT 1
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 0
50404: PUSH
50405: LD_INT 1
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 1
50414: NEG
50415: PUSH
50416: LD_INT 0
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 1
50425: NEG
50426: PUSH
50427: LD_INT 1
50429: NEG
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 1
50437: NEG
50438: PUSH
50439: LD_INT 2
50441: NEG
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 0
50449: PUSH
50450: LD_INT 2
50452: NEG
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 1
50460: PUSH
50461: LD_INT 1
50463: NEG
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 2
50471: PUSH
50472: LD_INT 1
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 2
50481: PUSH
50482: LD_INT 2
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 1
50491: PUSH
50492: LD_INT 2
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 0
50501: PUSH
50502: LD_INT 2
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 1
50511: NEG
50512: PUSH
50513: LD_INT 1
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 2
50522: NEG
50523: PUSH
50524: LD_INT 1
50526: NEG
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 2
50534: NEG
50535: PUSH
50536: LD_INT 2
50538: NEG
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 2
50546: NEG
50547: PUSH
50548: LD_INT 3
50550: NEG
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 1
50558: NEG
50559: PUSH
50560: LD_INT 3
50562: NEG
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 0
50570: PUSH
50571: LD_INT 3
50573: NEG
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 1
50581: PUSH
50582: LD_INT 2
50584: NEG
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 3
50592: PUSH
50593: LD_INT 2
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 3
50602: PUSH
50603: LD_INT 3
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 2
50612: PUSH
50613: LD_INT 3
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 1
50622: PUSH
50623: LD_INT 3
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 0
50632: PUSH
50633: LD_INT 3
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 1
50642: NEG
50643: PUSH
50644: LD_INT 2
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 3
50653: NEG
50654: PUSH
50655: LD_INT 2
50657: NEG
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 3
50665: NEG
50666: PUSH
50667: LD_INT 3
50669: NEG
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50706: LD_ADDR_VAR 0 43
50710: PUSH
50711: LD_INT 0
50713: PUSH
50714: LD_INT 0
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 0
50723: PUSH
50724: LD_INT 1
50726: NEG
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 1
50734: PUSH
50735: LD_INT 0
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 1
50744: PUSH
50745: LD_INT 1
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 0
50754: PUSH
50755: LD_INT 1
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 1
50764: NEG
50765: PUSH
50766: LD_INT 0
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 1
50775: NEG
50776: PUSH
50777: LD_INT 1
50779: NEG
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 1
50787: NEG
50788: PUSH
50789: LD_INT 2
50791: NEG
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 0
50799: PUSH
50800: LD_INT 2
50802: NEG
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 1
50810: PUSH
50811: LD_INT 1
50813: NEG
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 2
50821: PUSH
50822: LD_INT 0
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 2
50831: PUSH
50832: LD_INT 1
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 1
50841: PUSH
50842: LD_INT 2
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 0
50851: PUSH
50852: LD_INT 2
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 1
50861: NEG
50862: PUSH
50863: LD_INT 1
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 2
50872: NEG
50873: PUSH
50874: LD_INT 0
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 2
50883: NEG
50884: PUSH
50885: LD_INT 1
50887: NEG
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 1
50895: NEG
50896: PUSH
50897: LD_INT 3
50899: NEG
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 0
50907: PUSH
50908: LD_INT 3
50910: NEG
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 1
50918: PUSH
50919: LD_INT 2
50921: NEG
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 2
50929: PUSH
50930: LD_INT 1
50932: NEG
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 3
50940: PUSH
50941: LD_INT 0
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 3
50950: PUSH
50951: LD_INT 1
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 1
50960: PUSH
50961: LD_INT 3
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 0
50970: PUSH
50971: LD_INT 3
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 1
50980: NEG
50981: PUSH
50982: LD_INT 2
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 2
50991: NEG
50992: PUSH
50993: LD_INT 1
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 3
51002: NEG
51003: PUSH
51004: LD_INT 0
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 3
51013: NEG
51014: PUSH
51015: LD_INT 1
51017: NEG
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51054: LD_ADDR_VAR 0 44
51058: PUSH
51059: LD_INT 0
51061: PUSH
51062: LD_INT 0
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 0
51071: PUSH
51072: LD_INT 1
51074: NEG
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 1
51082: PUSH
51083: LD_INT 0
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 1
51092: PUSH
51093: LD_INT 1
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 0
51102: PUSH
51103: LD_INT 1
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 1
51112: NEG
51113: PUSH
51114: LD_INT 0
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 1
51123: NEG
51124: PUSH
51125: LD_INT 1
51127: NEG
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 1
51135: NEG
51136: PUSH
51137: LD_INT 2
51139: NEG
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 1
51147: PUSH
51148: LD_INT 1
51150: NEG
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 2
51158: PUSH
51159: LD_INT 0
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 2
51168: PUSH
51169: LD_INT 1
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 2
51178: PUSH
51179: LD_INT 2
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 1
51188: PUSH
51189: LD_INT 2
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 1
51198: NEG
51199: PUSH
51200: LD_INT 1
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 2
51209: NEG
51210: PUSH
51211: LD_INT 0
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 2
51220: NEG
51221: PUSH
51222: LD_INT 1
51224: NEG
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 2
51232: NEG
51233: PUSH
51234: LD_INT 2
51236: NEG
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 2
51244: NEG
51245: PUSH
51246: LD_INT 3
51248: NEG
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 2
51256: PUSH
51257: LD_INT 1
51259: NEG
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 3
51267: PUSH
51268: LD_INT 0
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 3
51277: PUSH
51278: LD_INT 1
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 3
51287: PUSH
51288: LD_INT 2
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 3
51297: PUSH
51298: LD_INT 3
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 2
51307: PUSH
51308: LD_INT 3
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 2
51317: NEG
51318: PUSH
51319: LD_INT 1
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 3
51328: NEG
51329: PUSH
51330: LD_INT 0
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 3
51339: NEG
51340: PUSH
51341: LD_INT 1
51343: NEG
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 3
51351: NEG
51352: PUSH
51353: LD_INT 2
51355: NEG
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 3
51363: NEG
51364: PUSH
51365: LD_INT 3
51367: NEG
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51404: LD_ADDR_VAR 0 45
51408: PUSH
51409: LD_INT 0
51411: PUSH
51412: LD_INT 0
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 0
51421: PUSH
51422: LD_INT 1
51424: NEG
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 1
51432: PUSH
51433: LD_INT 0
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 1
51442: PUSH
51443: LD_INT 1
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 0
51452: PUSH
51453: LD_INT 1
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 1
51462: NEG
51463: PUSH
51464: LD_INT 0
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 1
51473: NEG
51474: PUSH
51475: LD_INT 1
51477: NEG
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 1
51485: NEG
51486: PUSH
51487: LD_INT 2
51489: NEG
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 0
51497: PUSH
51498: LD_INT 2
51500: NEG
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 1
51508: PUSH
51509: LD_INT 1
51511: NEG
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 2
51519: PUSH
51520: LD_INT 1
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 2
51529: PUSH
51530: LD_INT 2
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 1
51539: PUSH
51540: LD_INT 2
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 0
51549: PUSH
51550: LD_INT 2
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 1
51559: NEG
51560: PUSH
51561: LD_INT 1
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 2
51570: NEG
51571: PUSH
51572: LD_INT 1
51574: NEG
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 2
51582: NEG
51583: PUSH
51584: LD_INT 2
51586: NEG
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 2
51594: NEG
51595: PUSH
51596: LD_INT 3
51598: NEG
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 1
51606: NEG
51607: PUSH
51608: LD_INT 3
51610: NEG
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 0
51618: PUSH
51619: LD_INT 3
51621: NEG
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 1
51629: PUSH
51630: LD_INT 2
51632: NEG
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 3
51640: PUSH
51641: LD_INT 2
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 3
51650: PUSH
51651: LD_INT 3
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 2
51660: PUSH
51661: LD_INT 3
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 1
51670: PUSH
51671: LD_INT 3
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 0
51680: PUSH
51681: LD_INT 3
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 1
51690: NEG
51691: PUSH
51692: LD_INT 2
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 3
51701: NEG
51702: PUSH
51703: LD_INT 2
51705: NEG
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 3
51713: NEG
51714: PUSH
51715: LD_INT 3
51717: NEG
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51754: LD_ADDR_VAR 0 46
51758: PUSH
51759: LD_INT 0
51761: PUSH
51762: LD_INT 0
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 0
51771: PUSH
51772: LD_INT 1
51774: NEG
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 1
51782: PUSH
51783: LD_INT 0
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 1
51792: PUSH
51793: LD_INT 1
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 0
51802: PUSH
51803: LD_INT 1
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 1
51812: NEG
51813: PUSH
51814: LD_INT 0
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 1
51823: NEG
51824: PUSH
51825: LD_INT 1
51827: NEG
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 1
51835: NEG
51836: PUSH
51837: LD_INT 2
51839: NEG
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 0
51847: PUSH
51848: LD_INT 2
51850: NEG
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 1
51858: PUSH
51859: LD_INT 1
51861: NEG
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 2
51869: PUSH
51870: LD_INT 0
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 2
51879: PUSH
51880: LD_INT 1
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 1
51889: PUSH
51890: LD_INT 2
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 0
51899: PUSH
51900: LD_INT 2
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 1
51909: NEG
51910: PUSH
51911: LD_INT 1
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 2
51920: NEG
51921: PUSH
51922: LD_INT 0
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 2
51931: NEG
51932: PUSH
51933: LD_INT 1
51935: NEG
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 1
51943: NEG
51944: PUSH
51945: LD_INT 3
51947: NEG
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 0
51955: PUSH
51956: LD_INT 3
51958: NEG
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 1
51966: PUSH
51967: LD_INT 2
51969: NEG
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 2
51977: PUSH
51978: LD_INT 1
51980: NEG
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 3
51988: PUSH
51989: LD_INT 0
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 3
51998: PUSH
51999: LD_INT 1
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 1
52008: PUSH
52009: LD_INT 3
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 0
52018: PUSH
52019: LD_INT 3
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 1
52028: NEG
52029: PUSH
52030: LD_INT 2
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 2
52039: NEG
52040: PUSH
52041: LD_INT 1
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 3
52050: NEG
52051: PUSH
52052: LD_INT 0
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 3
52061: NEG
52062: PUSH
52063: LD_INT 1
52065: NEG
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52102: LD_ADDR_VAR 0 47
52106: PUSH
52107: LD_INT 0
52109: PUSH
52110: LD_INT 0
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 0
52119: PUSH
52120: LD_INT 1
52122: NEG
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 1
52130: PUSH
52131: LD_INT 0
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 1
52140: PUSH
52141: LD_INT 1
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 0
52150: PUSH
52151: LD_INT 1
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 1
52160: NEG
52161: PUSH
52162: LD_INT 0
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 1
52171: NEG
52172: PUSH
52173: LD_INT 1
52175: NEG
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 1
52183: NEG
52184: PUSH
52185: LD_INT 2
52187: NEG
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 0
52195: PUSH
52196: LD_INT 2
52198: NEG
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 1
52206: PUSH
52207: LD_INT 1
52209: NEG
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 2
52217: NEG
52218: PUSH
52219: LD_INT 1
52221: NEG
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 2
52229: NEG
52230: PUSH
52231: LD_INT 2
52233: NEG
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52253: LD_ADDR_VAR 0 48
52257: PUSH
52258: LD_INT 0
52260: PUSH
52261: LD_INT 0
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 0
52270: PUSH
52271: LD_INT 1
52273: NEG
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 1
52281: PUSH
52282: LD_INT 0
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 1
52291: PUSH
52292: LD_INT 1
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 0
52301: PUSH
52302: LD_INT 1
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 1
52311: NEG
52312: PUSH
52313: LD_INT 0
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 1
52322: NEG
52323: PUSH
52324: LD_INT 1
52326: NEG
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 1
52334: NEG
52335: PUSH
52336: LD_INT 2
52338: NEG
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 0
52346: PUSH
52347: LD_INT 2
52349: NEG
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 1
52357: PUSH
52358: LD_INT 1
52360: NEG
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 2
52368: PUSH
52369: LD_INT 0
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 2
52378: PUSH
52379: LD_INT 1
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52400: LD_ADDR_VAR 0 49
52404: PUSH
52405: LD_INT 0
52407: PUSH
52408: LD_INT 0
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 0
52417: PUSH
52418: LD_INT 1
52420: NEG
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 1
52428: PUSH
52429: LD_INT 0
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 1
52438: PUSH
52439: LD_INT 1
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 0
52448: PUSH
52449: LD_INT 1
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 1
52458: NEG
52459: PUSH
52460: LD_INT 0
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 1
52469: NEG
52470: PUSH
52471: LD_INT 1
52473: NEG
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 1
52481: PUSH
52482: LD_INT 1
52484: NEG
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 2
52492: PUSH
52493: LD_INT 0
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 2
52502: PUSH
52503: LD_INT 1
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 2
52512: PUSH
52513: LD_INT 2
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 1
52522: PUSH
52523: LD_INT 2
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52544: LD_ADDR_VAR 0 50
52548: PUSH
52549: LD_INT 0
52551: PUSH
52552: LD_INT 0
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 0
52561: PUSH
52562: LD_INT 1
52564: NEG
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 1
52572: PUSH
52573: LD_INT 0
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 1
52582: PUSH
52583: LD_INT 1
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 0
52592: PUSH
52593: LD_INT 1
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 1
52602: NEG
52603: PUSH
52604: LD_INT 0
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 1
52613: NEG
52614: PUSH
52615: LD_INT 1
52617: NEG
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 2
52625: PUSH
52626: LD_INT 1
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 2
52635: PUSH
52636: LD_INT 2
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 1
52645: PUSH
52646: LD_INT 2
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 0
52655: PUSH
52656: LD_INT 2
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 1
52665: NEG
52666: PUSH
52667: LD_INT 1
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52688: LD_ADDR_VAR 0 51
52692: PUSH
52693: LD_INT 0
52695: PUSH
52696: LD_INT 0
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 0
52705: PUSH
52706: LD_INT 1
52708: NEG
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 1
52716: PUSH
52717: LD_INT 0
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 1
52726: PUSH
52727: LD_INT 1
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 0
52736: PUSH
52737: LD_INT 1
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 1
52746: NEG
52747: PUSH
52748: LD_INT 0
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 1
52757: NEG
52758: PUSH
52759: LD_INT 1
52761: NEG
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 1
52769: PUSH
52770: LD_INT 2
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 0
52779: PUSH
52780: LD_INT 2
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 1
52789: NEG
52790: PUSH
52791: LD_INT 1
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 2
52800: NEG
52801: PUSH
52802: LD_INT 0
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 2
52811: NEG
52812: PUSH
52813: LD_INT 1
52815: NEG
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52835: LD_ADDR_VAR 0 52
52839: PUSH
52840: LD_INT 0
52842: PUSH
52843: LD_INT 0
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 0
52852: PUSH
52853: LD_INT 1
52855: NEG
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 1
52863: PUSH
52864: LD_INT 0
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 1
52873: PUSH
52874: LD_INT 1
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 0
52883: PUSH
52884: LD_INT 1
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 1
52893: NEG
52894: PUSH
52895: LD_INT 0
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 1
52904: NEG
52905: PUSH
52906: LD_INT 1
52908: NEG
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 1
52916: NEG
52917: PUSH
52918: LD_INT 2
52920: NEG
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 1
52928: NEG
52929: PUSH
52930: LD_INT 1
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 2
52939: NEG
52940: PUSH
52941: LD_INT 0
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 2
52950: NEG
52951: PUSH
52952: LD_INT 1
52954: NEG
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 2
52962: NEG
52963: PUSH
52964: LD_INT 2
52966: NEG
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52986: LD_ADDR_VAR 0 53
52990: PUSH
52991: LD_INT 0
52993: PUSH
52994: LD_INT 0
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 0
53003: PUSH
53004: LD_INT 1
53006: NEG
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 1
53014: PUSH
53015: LD_INT 0
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 1
53024: PUSH
53025: LD_INT 1
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 0
53034: PUSH
53035: LD_INT 1
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 1
53044: NEG
53045: PUSH
53046: LD_INT 0
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 1
53055: NEG
53056: PUSH
53057: LD_INT 1
53059: NEG
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 1
53067: NEG
53068: PUSH
53069: LD_INT 2
53071: NEG
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 0
53079: PUSH
53080: LD_INT 2
53082: NEG
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 1
53090: PUSH
53091: LD_INT 1
53093: NEG
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 2
53101: PUSH
53102: LD_INT 0
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 2
53111: PUSH
53112: LD_INT 1
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 2
53121: PUSH
53122: LD_INT 2
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 1
53131: PUSH
53132: LD_INT 2
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 0
53141: PUSH
53142: LD_INT 2
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 1
53151: NEG
53152: PUSH
53153: LD_INT 1
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 2
53162: NEG
53163: PUSH
53164: LD_INT 0
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 2
53173: NEG
53174: PUSH
53175: LD_INT 1
53177: NEG
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 2
53185: NEG
53186: PUSH
53187: LD_INT 2
53189: NEG
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53216: LD_ADDR_VAR 0 54
53220: PUSH
53221: LD_INT 0
53223: PUSH
53224: LD_INT 0
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 0
53233: PUSH
53234: LD_INT 1
53236: NEG
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 1
53244: PUSH
53245: LD_INT 0
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 1
53254: PUSH
53255: LD_INT 1
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 0
53264: PUSH
53265: LD_INT 1
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 1
53274: NEG
53275: PUSH
53276: LD_INT 0
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 1
53285: NEG
53286: PUSH
53287: LD_INT 1
53289: NEG
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 1
53297: NEG
53298: PUSH
53299: LD_INT 2
53301: NEG
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 0
53309: PUSH
53310: LD_INT 2
53312: NEG
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 1
53320: PUSH
53321: LD_INT 1
53323: NEG
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 2
53331: PUSH
53332: LD_INT 0
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 2
53341: PUSH
53342: LD_INT 1
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 2
53351: PUSH
53352: LD_INT 2
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 1
53361: PUSH
53362: LD_INT 2
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 0
53371: PUSH
53372: LD_INT 2
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 1
53381: NEG
53382: PUSH
53383: LD_INT 1
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 2
53392: NEG
53393: PUSH
53394: LD_INT 0
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 2
53403: NEG
53404: PUSH
53405: LD_INT 1
53407: NEG
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 2
53415: NEG
53416: PUSH
53417: LD_INT 2
53419: NEG
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53446: LD_ADDR_VAR 0 55
53450: PUSH
53451: LD_INT 0
53453: PUSH
53454: LD_INT 0
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 0
53463: PUSH
53464: LD_INT 1
53466: NEG
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 1
53474: PUSH
53475: LD_INT 0
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 1
53484: PUSH
53485: LD_INT 1
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 0
53494: PUSH
53495: LD_INT 1
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 1
53504: NEG
53505: PUSH
53506: LD_INT 0
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 1
53515: NEG
53516: PUSH
53517: LD_INT 1
53519: NEG
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 1
53527: NEG
53528: PUSH
53529: LD_INT 2
53531: NEG
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 0
53539: PUSH
53540: LD_INT 2
53542: NEG
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 1
53550: PUSH
53551: LD_INT 1
53553: NEG
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 2
53561: PUSH
53562: LD_INT 0
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 2
53571: PUSH
53572: LD_INT 1
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 2
53581: PUSH
53582: LD_INT 2
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 1
53591: PUSH
53592: LD_INT 2
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 0
53601: PUSH
53602: LD_INT 2
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 1
53611: NEG
53612: PUSH
53613: LD_INT 1
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 2
53622: NEG
53623: PUSH
53624: LD_INT 0
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 2
53633: NEG
53634: PUSH
53635: LD_INT 1
53637: NEG
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 2
53645: NEG
53646: PUSH
53647: LD_INT 2
53649: NEG
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53676: LD_ADDR_VAR 0 56
53680: PUSH
53681: LD_INT 0
53683: PUSH
53684: LD_INT 0
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 0
53693: PUSH
53694: LD_INT 1
53696: NEG
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 1
53704: PUSH
53705: LD_INT 0
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 1
53714: PUSH
53715: LD_INT 1
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 0
53724: PUSH
53725: LD_INT 1
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 1
53734: NEG
53735: PUSH
53736: LD_INT 0
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 1
53745: NEG
53746: PUSH
53747: LD_INT 1
53749: NEG
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 1
53757: NEG
53758: PUSH
53759: LD_INT 2
53761: NEG
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 0
53769: PUSH
53770: LD_INT 2
53772: NEG
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 1
53780: PUSH
53781: LD_INT 1
53783: NEG
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 2
53791: PUSH
53792: LD_INT 0
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 2
53801: PUSH
53802: LD_INT 1
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 2
53811: PUSH
53812: LD_INT 2
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 1
53821: PUSH
53822: LD_INT 2
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 0
53831: PUSH
53832: LD_INT 2
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 1
53841: NEG
53842: PUSH
53843: LD_INT 1
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 2
53852: NEG
53853: PUSH
53854: LD_INT 0
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 2
53863: NEG
53864: PUSH
53865: LD_INT 1
53867: NEG
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 2
53875: NEG
53876: PUSH
53877: LD_INT 2
53879: NEG
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53906: LD_ADDR_VAR 0 57
53910: PUSH
53911: LD_INT 0
53913: PUSH
53914: LD_INT 0
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 0
53923: PUSH
53924: LD_INT 1
53926: NEG
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 1
53934: PUSH
53935: LD_INT 0
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 1
53944: PUSH
53945: LD_INT 1
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 0
53954: PUSH
53955: LD_INT 1
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 1
53964: NEG
53965: PUSH
53966: LD_INT 0
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 1
53975: NEG
53976: PUSH
53977: LD_INT 1
53979: NEG
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 1
53987: NEG
53988: PUSH
53989: LD_INT 2
53991: NEG
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 0
53999: PUSH
54000: LD_INT 2
54002: NEG
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 1
54010: PUSH
54011: LD_INT 1
54013: NEG
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 2
54021: PUSH
54022: LD_INT 0
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 2
54031: PUSH
54032: LD_INT 1
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 2
54041: PUSH
54042: LD_INT 2
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 1
54051: PUSH
54052: LD_INT 2
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 0
54061: PUSH
54062: LD_INT 2
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 1
54071: NEG
54072: PUSH
54073: LD_INT 1
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 2
54082: NEG
54083: PUSH
54084: LD_INT 0
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 2
54093: NEG
54094: PUSH
54095: LD_INT 1
54097: NEG
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 2
54105: NEG
54106: PUSH
54107: LD_INT 2
54109: NEG
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54136: LD_ADDR_VAR 0 58
54140: PUSH
54141: LD_INT 0
54143: PUSH
54144: LD_INT 0
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 0
54153: PUSH
54154: LD_INT 1
54156: NEG
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 1
54164: PUSH
54165: LD_INT 0
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 1
54174: PUSH
54175: LD_INT 1
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 0
54184: PUSH
54185: LD_INT 1
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 1
54194: NEG
54195: PUSH
54196: LD_INT 0
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 1
54205: NEG
54206: PUSH
54207: LD_INT 1
54209: NEG
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 1
54217: NEG
54218: PUSH
54219: LD_INT 2
54221: NEG
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 0
54229: PUSH
54230: LD_INT 2
54232: NEG
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 1
54240: PUSH
54241: LD_INT 1
54243: NEG
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 2
54251: PUSH
54252: LD_INT 0
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 2
54261: PUSH
54262: LD_INT 1
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 2
54271: PUSH
54272: LD_INT 2
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 1
54281: PUSH
54282: LD_INT 2
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 0
54291: PUSH
54292: LD_INT 2
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 1
54301: NEG
54302: PUSH
54303: LD_INT 1
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 2
54312: NEG
54313: PUSH
54314: LD_INT 0
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 2
54323: NEG
54324: PUSH
54325: LD_INT 1
54327: NEG
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 2
54335: NEG
54336: PUSH
54337: LD_INT 2
54339: NEG
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54366: LD_ADDR_VAR 0 59
54370: PUSH
54371: LD_INT 0
54373: PUSH
54374: LD_INT 0
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 0
54383: PUSH
54384: LD_INT 1
54386: NEG
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 1
54394: PUSH
54395: LD_INT 0
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 1
54404: PUSH
54405: LD_INT 1
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 0
54414: PUSH
54415: LD_INT 1
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 1
54424: NEG
54425: PUSH
54426: LD_INT 0
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 1
54435: NEG
54436: PUSH
54437: LD_INT 1
54439: NEG
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54454: LD_ADDR_VAR 0 60
54458: PUSH
54459: LD_INT 0
54461: PUSH
54462: LD_INT 0
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 0
54471: PUSH
54472: LD_INT 1
54474: NEG
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 1
54482: PUSH
54483: LD_INT 0
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 1
54492: PUSH
54493: LD_INT 1
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 0
54502: PUSH
54503: LD_INT 1
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 1
54512: NEG
54513: PUSH
54514: LD_INT 0
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 1
54523: NEG
54524: PUSH
54525: LD_INT 1
54527: NEG
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54542: LD_ADDR_VAR 0 61
54546: PUSH
54547: LD_INT 0
54549: PUSH
54550: LD_INT 0
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 0
54559: PUSH
54560: LD_INT 1
54562: NEG
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 1
54570: PUSH
54571: LD_INT 0
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 1
54580: PUSH
54581: LD_INT 1
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 0
54590: PUSH
54591: LD_INT 1
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 1
54600: NEG
54601: PUSH
54602: LD_INT 0
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 1
54611: NEG
54612: PUSH
54613: LD_INT 1
54615: NEG
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54630: LD_ADDR_VAR 0 62
54634: PUSH
54635: LD_INT 0
54637: PUSH
54638: LD_INT 0
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 0
54647: PUSH
54648: LD_INT 1
54650: NEG
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 1
54658: PUSH
54659: LD_INT 0
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 1
54668: PUSH
54669: LD_INT 1
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 0
54678: PUSH
54679: LD_INT 1
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 1
54688: NEG
54689: PUSH
54690: LD_INT 0
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 1
54699: NEG
54700: PUSH
54701: LD_INT 1
54703: NEG
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54718: LD_ADDR_VAR 0 63
54722: PUSH
54723: LD_INT 0
54725: PUSH
54726: LD_INT 0
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 0
54735: PUSH
54736: LD_INT 1
54738: NEG
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 1
54746: PUSH
54747: LD_INT 0
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 1
54756: PUSH
54757: LD_INT 1
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 0
54766: PUSH
54767: LD_INT 1
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 1
54776: NEG
54777: PUSH
54778: LD_INT 0
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 1
54787: NEG
54788: PUSH
54789: LD_INT 1
54791: NEG
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54806: LD_ADDR_VAR 0 64
54810: PUSH
54811: LD_INT 0
54813: PUSH
54814: LD_INT 0
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 0
54823: PUSH
54824: LD_INT 1
54826: NEG
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 1
54834: PUSH
54835: LD_INT 0
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 1
54844: PUSH
54845: LD_INT 1
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 0
54854: PUSH
54855: LD_INT 1
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 1
54864: NEG
54865: PUSH
54866: LD_INT 0
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 1
54875: NEG
54876: PUSH
54877: LD_INT 1
54879: NEG
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: ST_TO_ADDR
// end ; 1 :
54894: GO 60791
54896: LD_INT 1
54898: DOUBLE
54899: EQUAL
54900: IFTRUE 54904
54902: GO 57527
54904: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54905: LD_ADDR_VAR 0 11
54909: PUSH
54910: LD_INT 1
54912: NEG
54913: PUSH
54914: LD_INT 3
54916: NEG
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 0
54924: PUSH
54925: LD_INT 3
54927: NEG
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 1
54935: PUSH
54936: LD_INT 2
54938: NEG
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: LIST
54948: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54949: LD_ADDR_VAR 0 12
54953: PUSH
54954: LD_INT 2
54956: PUSH
54957: LD_INT 1
54959: NEG
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 3
54967: PUSH
54968: LD_INT 0
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 3
54977: PUSH
54978: LD_INT 1
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: LIST
54989: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54990: LD_ADDR_VAR 0 13
54994: PUSH
54995: LD_INT 3
54997: PUSH
54998: LD_INT 2
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 3
55007: PUSH
55008: LD_INT 3
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 2
55017: PUSH
55018: LD_INT 3
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: LIST
55029: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55030: LD_ADDR_VAR 0 14
55034: PUSH
55035: LD_INT 1
55037: PUSH
55038: LD_INT 3
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 0
55047: PUSH
55048: LD_INT 3
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 1
55057: NEG
55058: PUSH
55059: LD_INT 2
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: LIST
55070: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55071: LD_ADDR_VAR 0 15
55075: PUSH
55076: LD_INT 2
55078: NEG
55079: PUSH
55080: LD_INT 1
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 3
55089: NEG
55090: PUSH
55091: LD_INT 0
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 3
55100: NEG
55101: PUSH
55102: LD_INT 1
55104: NEG
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: LIST
55114: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55115: LD_ADDR_VAR 0 16
55119: PUSH
55120: LD_INT 2
55122: NEG
55123: PUSH
55124: LD_INT 3
55126: NEG
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 3
55134: NEG
55135: PUSH
55136: LD_INT 2
55138: NEG
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 3
55146: NEG
55147: PUSH
55148: LD_INT 3
55150: NEG
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: LIST
55160: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55161: LD_ADDR_VAR 0 17
55165: PUSH
55166: LD_INT 1
55168: NEG
55169: PUSH
55170: LD_INT 3
55172: NEG
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 0
55180: PUSH
55181: LD_INT 3
55183: NEG
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 1
55191: PUSH
55192: LD_INT 2
55194: NEG
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: LIST
55204: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55205: LD_ADDR_VAR 0 18
55209: PUSH
55210: LD_INT 2
55212: PUSH
55213: LD_INT 1
55215: NEG
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 3
55223: PUSH
55224: LD_INT 0
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 3
55233: PUSH
55234: LD_INT 1
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: LIST
55245: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55246: LD_ADDR_VAR 0 19
55250: PUSH
55251: LD_INT 3
55253: PUSH
55254: LD_INT 2
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 3
55263: PUSH
55264: LD_INT 3
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 2
55273: PUSH
55274: LD_INT 3
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: LIST
55285: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55286: LD_ADDR_VAR 0 20
55290: PUSH
55291: LD_INT 1
55293: PUSH
55294: LD_INT 3
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 0
55303: PUSH
55304: LD_INT 3
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 1
55313: NEG
55314: PUSH
55315: LD_INT 2
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: LIST
55326: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55327: LD_ADDR_VAR 0 21
55331: PUSH
55332: LD_INT 2
55334: NEG
55335: PUSH
55336: LD_INT 1
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 3
55345: NEG
55346: PUSH
55347: LD_INT 0
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 3
55356: NEG
55357: PUSH
55358: LD_INT 1
55360: NEG
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: LIST
55370: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55371: LD_ADDR_VAR 0 22
55375: PUSH
55376: LD_INT 2
55378: NEG
55379: PUSH
55380: LD_INT 3
55382: NEG
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 3
55390: NEG
55391: PUSH
55392: LD_INT 2
55394: NEG
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 3
55402: NEG
55403: PUSH
55404: LD_INT 3
55406: NEG
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: LIST
55416: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55417: LD_ADDR_VAR 0 23
55421: PUSH
55422: LD_INT 0
55424: PUSH
55425: LD_INT 3
55427: NEG
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 1
55435: NEG
55436: PUSH
55437: LD_INT 4
55439: NEG
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 1
55447: PUSH
55448: LD_INT 3
55450: NEG
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: LIST
55460: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55461: LD_ADDR_VAR 0 24
55465: PUSH
55466: LD_INT 3
55468: PUSH
55469: LD_INT 0
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 3
55478: PUSH
55479: LD_INT 1
55481: NEG
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 4
55489: PUSH
55490: LD_INT 1
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: LIST
55501: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55502: LD_ADDR_VAR 0 25
55506: PUSH
55507: LD_INT 3
55509: PUSH
55510: LD_INT 3
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 4
55519: PUSH
55520: LD_INT 3
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 3
55529: PUSH
55530: LD_INT 4
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: LIST
55541: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55542: LD_ADDR_VAR 0 26
55546: PUSH
55547: LD_INT 0
55549: PUSH
55550: LD_INT 3
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 1
55559: PUSH
55560: LD_INT 4
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 1
55569: NEG
55570: PUSH
55571: LD_INT 3
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: LIST
55582: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55583: LD_ADDR_VAR 0 27
55587: PUSH
55588: LD_INT 3
55590: NEG
55591: PUSH
55592: LD_INT 0
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 3
55601: NEG
55602: PUSH
55603: LD_INT 1
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 4
55612: NEG
55613: PUSH
55614: LD_INT 1
55616: NEG
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: LIST
55626: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55627: LD_ADDR_VAR 0 28
55631: PUSH
55632: LD_INT 3
55634: NEG
55635: PUSH
55636: LD_INT 3
55638: NEG
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 3
55646: NEG
55647: PUSH
55648: LD_INT 4
55650: NEG
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 4
55658: NEG
55659: PUSH
55660: LD_INT 3
55662: NEG
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: LIST
55672: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55673: LD_ADDR_VAR 0 29
55677: PUSH
55678: LD_INT 1
55680: NEG
55681: PUSH
55682: LD_INT 3
55684: NEG
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 0
55692: PUSH
55693: LD_INT 3
55695: NEG
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 1
55703: PUSH
55704: LD_INT 2
55706: NEG
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 1
55714: NEG
55715: PUSH
55716: LD_INT 4
55718: NEG
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 0
55726: PUSH
55727: LD_INT 4
55729: NEG
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 1
55737: PUSH
55738: LD_INT 3
55740: NEG
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 1
55748: NEG
55749: PUSH
55750: LD_INT 5
55752: NEG
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 0
55760: PUSH
55761: LD_INT 5
55763: NEG
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 1
55771: PUSH
55772: LD_INT 4
55774: NEG
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 1
55782: NEG
55783: PUSH
55784: LD_INT 6
55786: NEG
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 0
55794: PUSH
55795: LD_INT 6
55797: NEG
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 1
55805: PUSH
55806: LD_INT 5
55808: NEG
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55828: LD_ADDR_VAR 0 30
55832: PUSH
55833: LD_INT 2
55835: PUSH
55836: LD_INT 1
55838: NEG
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 3
55846: PUSH
55847: LD_INT 0
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 3
55856: PUSH
55857: LD_INT 1
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 3
55866: PUSH
55867: LD_INT 1
55869: NEG
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 4
55877: PUSH
55878: LD_INT 0
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 4
55887: PUSH
55888: LD_INT 1
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 4
55897: PUSH
55898: LD_INT 1
55900: NEG
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 5
55908: PUSH
55909: LD_INT 0
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 5
55918: PUSH
55919: LD_INT 1
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 5
55928: PUSH
55929: LD_INT 1
55931: NEG
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 6
55939: PUSH
55940: LD_INT 0
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 6
55949: PUSH
55950: LD_INT 1
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55971: LD_ADDR_VAR 0 31
55975: PUSH
55976: LD_INT 3
55978: PUSH
55979: LD_INT 2
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 3
55988: PUSH
55989: LD_INT 3
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 2
55998: PUSH
55999: LD_INT 3
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 4
56008: PUSH
56009: LD_INT 3
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 4
56018: PUSH
56019: LD_INT 4
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 3
56028: PUSH
56029: LD_INT 4
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 5
56038: PUSH
56039: LD_INT 4
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 5
56048: PUSH
56049: LD_INT 5
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 4
56058: PUSH
56059: LD_INT 5
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 6
56068: PUSH
56069: LD_INT 5
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 6
56078: PUSH
56079: LD_INT 6
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 5
56088: PUSH
56089: LD_INT 6
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56110: LD_ADDR_VAR 0 32
56114: PUSH
56115: LD_INT 1
56117: PUSH
56118: LD_INT 3
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 0
56127: PUSH
56128: LD_INT 3
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 1
56137: NEG
56138: PUSH
56139: LD_INT 2
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 1
56148: PUSH
56149: LD_INT 4
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 0
56158: PUSH
56159: LD_INT 4
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 1
56168: NEG
56169: PUSH
56170: LD_INT 3
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 1
56179: PUSH
56180: LD_INT 5
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 0
56189: PUSH
56190: LD_INT 5
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 1
56199: NEG
56200: PUSH
56201: LD_INT 4
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 1
56210: PUSH
56211: LD_INT 6
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 0
56220: PUSH
56221: LD_INT 6
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 1
56230: NEG
56231: PUSH
56232: LD_INT 5
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56253: LD_ADDR_VAR 0 33
56257: PUSH
56258: LD_INT 2
56260: NEG
56261: PUSH
56262: LD_INT 1
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 3
56271: NEG
56272: PUSH
56273: LD_INT 0
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 3
56282: NEG
56283: PUSH
56284: LD_INT 1
56286: NEG
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 3
56294: NEG
56295: PUSH
56296: LD_INT 1
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 4
56305: NEG
56306: PUSH
56307: LD_INT 0
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 4
56316: NEG
56317: PUSH
56318: LD_INT 1
56320: NEG
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 4
56328: NEG
56329: PUSH
56330: LD_INT 1
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 5
56339: NEG
56340: PUSH
56341: LD_INT 0
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 5
56350: NEG
56351: PUSH
56352: LD_INT 1
56354: NEG
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 5
56362: NEG
56363: PUSH
56364: LD_INT 1
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 6
56373: NEG
56374: PUSH
56375: LD_INT 0
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 6
56384: NEG
56385: PUSH
56386: LD_INT 1
56388: NEG
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56408: LD_ADDR_VAR 0 34
56412: PUSH
56413: LD_INT 2
56415: NEG
56416: PUSH
56417: LD_INT 3
56419: NEG
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 3
56427: NEG
56428: PUSH
56429: LD_INT 2
56431: NEG
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 3
56439: NEG
56440: PUSH
56441: LD_INT 3
56443: NEG
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 3
56451: NEG
56452: PUSH
56453: LD_INT 4
56455: NEG
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 4
56463: NEG
56464: PUSH
56465: LD_INT 3
56467: NEG
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 4
56475: NEG
56476: PUSH
56477: LD_INT 4
56479: NEG
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 4
56487: NEG
56488: PUSH
56489: LD_INT 5
56491: NEG
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 5
56499: NEG
56500: PUSH
56501: LD_INT 4
56503: NEG
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 5
56511: NEG
56512: PUSH
56513: LD_INT 5
56515: NEG
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 5
56523: NEG
56524: PUSH
56525: LD_INT 6
56527: NEG
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 6
56535: NEG
56536: PUSH
56537: LD_INT 5
56539: NEG
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 6
56547: NEG
56548: PUSH
56549: LD_INT 6
56551: NEG
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56571: LD_ADDR_VAR 0 41
56575: PUSH
56576: LD_INT 0
56578: PUSH
56579: LD_INT 2
56581: NEG
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 1
56589: NEG
56590: PUSH
56591: LD_INT 3
56593: NEG
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 1
56601: PUSH
56602: LD_INT 2
56604: NEG
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: LIST
56614: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56615: LD_ADDR_VAR 0 42
56619: PUSH
56620: LD_INT 2
56622: PUSH
56623: LD_INT 0
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 2
56632: PUSH
56633: LD_INT 1
56635: NEG
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 3
56643: PUSH
56644: LD_INT 1
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: LIST
56655: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56656: LD_ADDR_VAR 0 43
56660: PUSH
56661: LD_INT 2
56663: PUSH
56664: LD_INT 2
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 3
56673: PUSH
56674: LD_INT 2
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 2
56683: PUSH
56684: LD_INT 3
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: LIST
56695: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56696: LD_ADDR_VAR 0 44
56700: PUSH
56701: LD_INT 0
56703: PUSH
56704: LD_INT 2
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 1
56713: PUSH
56714: LD_INT 3
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 1
56723: NEG
56724: PUSH
56725: LD_INT 2
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: LIST
56736: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56737: LD_ADDR_VAR 0 45
56741: PUSH
56742: LD_INT 2
56744: NEG
56745: PUSH
56746: LD_INT 0
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 2
56755: NEG
56756: PUSH
56757: LD_INT 1
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 3
56766: NEG
56767: PUSH
56768: LD_INT 1
56770: NEG
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: LIST
56780: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56781: LD_ADDR_VAR 0 46
56785: PUSH
56786: LD_INT 2
56788: NEG
56789: PUSH
56790: LD_INT 2
56792: NEG
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 2
56800: NEG
56801: PUSH
56802: LD_INT 3
56804: NEG
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 3
56812: NEG
56813: PUSH
56814: LD_INT 2
56816: NEG
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: LIST
56826: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56827: LD_ADDR_VAR 0 47
56831: PUSH
56832: LD_INT 2
56834: NEG
56835: PUSH
56836: LD_INT 3
56838: NEG
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 1
56846: NEG
56847: PUSH
56848: LD_INT 3
56850: NEG
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56860: LD_ADDR_VAR 0 48
56864: PUSH
56865: LD_INT 1
56867: PUSH
56868: LD_INT 2
56870: NEG
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 2
56878: PUSH
56879: LD_INT 1
56881: NEG
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56891: LD_ADDR_VAR 0 49
56895: PUSH
56896: LD_INT 3
56898: PUSH
56899: LD_INT 1
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 3
56908: PUSH
56909: LD_INT 2
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56920: LD_ADDR_VAR 0 50
56924: PUSH
56925: LD_INT 2
56927: PUSH
56928: LD_INT 3
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 1
56937: PUSH
56938: LD_INT 3
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56949: LD_ADDR_VAR 0 51
56953: PUSH
56954: LD_INT 1
56956: NEG
56957: PUSH
56958: LD_INT 2
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 2
56967: NEG
56968: PUSH
56969: LD_INT 1
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56980: LD_ADDR_VAR 0 52
56984: PUSH
56985: LD_INT 3
56987: NEG
56988: PUSH
56989: LD_INT 1
56991: NEG
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 3
56999: NEG
57000: PUSH
57001: LD_INT 2
57003: NEG
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57013: LD_ADDR_VAR 0 53
57017: PUSH
57018: LD_INT 1
57020: NEG
57021: PUSH
57022: LD_INT 3
57024: NEG
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 0
57032: PUSH
57033: LD_INT 3
57035: NEG
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 1
57043: PUSH
57044: LD_INT 2
57046: NEG
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: LIST
57056: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57057: LD_ADDR_VAR 0 54
57061: PUSH
57062: LD_INT 2
57064: PUSH
57065: LD_INT 1
57067: NEG
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 3
57075: PUSH
57076: LD_INT 0
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 3
57085: PUSH
57086: LD_INT 1
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: LIST
57097: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57098: LD_ADDR_VAR 0 55
57102: PUSH
57103: LD_INT 3
57105: PUSH
57106: LD_INT 2
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 3
57115: PUSH
57116: LD_INT 3
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 2
57125: PUSH
57126: LD_INT 3
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: LIST
57137: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57138: LD_ADDR_VAR 0 56
57142: PUSH
57143: LD_INT 1
57145: PUSH
57146: LD_INT 3
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 0
57155: PUSH
57156: LD_INT 3
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 1
57165: NEG
57166: PUSH
57167: LD_INT 2
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: LIST
57178: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57179: LD_ADDR_VAR 0 57
57183: PUSH
57184: LD_INT 2
57186: NEG
57187: PUSH
57188: LD_INT 1
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 3
57197: NEG
57198: PUSH
57199: LD_INT 0
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 3
57208: NEG
57209: PUSH
57210: LD_INT 1
57212: NEG
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: LIST
57222: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57223: LD_ADDR_VAR 0 58
57227: PUSH
57228: LD_INT 2
57230: NEG
57231: PUSH
57232: LD_INT 3
57234: NEG
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 3
57242: NEG
57243: PUSH
57244: LD_INT 2
57246: NEG
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 3
57254: NEG
57255: PUSH
57256: LD_INT 3
57258: NEG
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: LIST
57268: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57269: LD_ADDR_VAR 0 59
57273: PUSH
57274: LD_INT 1
57276: NEG
57277: PUSH
57278: LD_INT 2
57280: NEG
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 0
57288: PUSH
57289: LD_INT 2
57291: NEG
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 1
57299: PUSH
57300: LD_INT 1
57302: NEG
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: LIST
57312: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57313: LD_ADDR_VAR 0 60
57317: PUSH
57318: LD_INT 1
57320: PUSH
57321: LD_INT 1
57323: NEG
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 2
57331: PUSH
57332: LD_INT 0
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 2
57341: PUSH
57342: LD_INT 1
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: LIST
57353: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57354: LD_ADDR_VAR 0 61
57358: PUSH
57359: LD_INT 2
57361: PUSH
57362: LD_INT 1
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 2
57371: PUSH
57372: LD_INT 2
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 1
57381: PUSH
57382: LD_INT 2
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: LIST
57393: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57394: LD_ADDR_VAR 0 62
57398: PUSH
57399: LD_INT 1
57401: PUSH
57402: LD_INT 2
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 0
57411: PUSH
57412: LD_INT 2
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 1
57421: NEG
57422: PUSH
57423: LD_INT 1
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: LIST
57434: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57435: LD_ADDR_VAR 0 63
57439: PUSH
57440: LD_INT 1
57442: NEG
57443: PUSH
57444: LD_INT 1
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 2
57453: NEG
57454: PUSH
57455: LD_INT 0
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 2
57464: NEG
57465: PUSH
57466: LD_INT 1
57468: NEG
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: LIST
57478: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57479: LD_ADDR_VAR 0 64
57483: PUSH
57484: LD_INT 1
57486: NEG
57487: PUSH
57488: LD_INT 2
57490: NEG
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 2
57498: NEG
57499: PUSH
57500: LD_INT 1
57502: NEG
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 2
57510: NEG
57511: PUSH
57512: LD_INT 2
57514: NEG
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: LIST
57524: ST_TO_ADDR
// end ; 2 :
57525: GO 60791
57527: LD_INT 2
57529: DOUBLE
57530: EQUAL
57531: IFTRUE 57535
57533: GO 60790
57535: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57536: LD_ADDR_VAR 0 29
57540: PUSH
57541: LD_INT 4
57543: PUSH
57544: LD_INT 0
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 4
57553: PUSH
57554: LD_INT 1
57556: NEG
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 5
57564: PUSH
57565: LD_INT 0
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 5
57574: PUSH
57575: LD_INT 1
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 4
57584: PUSH
57585: LD_INT 1
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 3
57594: PUSH
57595: LD_INT 0
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 3
57604: PUSH
57605: LD_INT 1
57607: NEG
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 3
57615: PUSH
57616: LD_INT 2
57618: NEG
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 5
57626: PUSH
57627: LD_INT 2
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 3
57636: PUSH
57637: LD_INT 3
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 3
57646: PUSH
57647: LD_INT 2
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 4
57656: PUSH
57657: LD_INT 3
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 4
57666: PUSH
57667: LD_INT 4
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 3
57676: PUSH
57677: LD_INT 4
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 2
57686: PUSH
57687: LD_INT 3
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 2
57696: PUSH
57697: LD_INT 2
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 4
57706: PUSH
57707: LD_INT 2
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 2
57716: PUSH
57717: LD_INT 4
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 0
57726: PUSH
57727: LD_INT 4
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 0
57736: PUSH
57737: LD_INT 3
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 1
57746: PUSH
57747: LD_INT 4
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 1
57756: PUSH
57757: LD_INT 5
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 0
57766: PUSH
57767: LD_INT 5
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 1
57776: NEG
57777: PUSH
57778: LD_INT 4
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 1
57787: NEG
57788: PUSH
57789: LD_INT 3
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 2
57798: PUSH
57799: LD_INT 5
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 2
57808: NEG
57809: PUSH
57810: LD_INT 3
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 3
57819: NEG
57820: PUSH
57821: LD_INT 0
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 3
57830: NEG
57831: PUSH
57832: LD_INT 1
57834: NEG
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 2
57842: NEG
57843: PUSH
57844: LD_INT 0
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 2
57853: NEG
57854: PUSH
57855: LD_INT 1
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 3
57864: NEG
57865: PUSH
57866: LD_INT 1
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 4
57875: NEG
57876: PUSH
57877: LD_INT 0
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 4
57886: NEG
57887: PUSH
57888: LD_INT 1
57890: NEG
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 4
57898: NEG
57899: PUSH
57900: LD_INT 2
57902: NEG
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 2
57910: NEG
57911: PUSH
57912: LD_INT 2
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 4
57921: NEG
57922: PUSH
57923: LD_INT 4
57925: NEG
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 4
57933: NEG
57934: PUSH
57935: LD_INT 5
57937: NEG
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 3
57945: NEG
57946: PUSH
57947: LD_INT 4
57949: NEG
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 3
57957: NEG
57958: PUSH
57959: LD_INT 3
57961: NEG
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: LD_INT 4
57969: NEG
57970: PUSH
57971: LD_INT 3
57973: NEG
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 5
57981: NEG
57982: PUSH
57983: LD_INT 4
57985: NEG
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 5
57993: NEG
57994: PUSH
57995: LD_INT 5
57997: NEG
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 3
58005: NEG
58006: PUSH
58007: LD_INT 5
58009: NEG
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 5
58017: NEG
58018: PUSH
58019: LD_INT 3
58021: NEG
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58074: LD_ADDR_VAR 0 30
58078: PUSH
58079: LD_INT 4
58081: PUSH
58082: LD_INT 4
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 4
58091: PUSH
58092: LD_INT 3
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 5
58101: PUSH
58102: LD_INT 4
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 5
58111: PUSH
58112: LD_INT 5
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 4
58121: PUSH
58122: LD_INT 5
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 3
58131: PUSH
58132: LD_INT 4
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 3
58141: PUSH
58142: LD_INT 3
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 5
58151: PUSH
58152: LD_INT 3
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 3
58161: PUSH
58162: LD_INT 5
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 0
58171: PUSH
58172: LD_INT 3
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 0
58181: PUSH
58182: LD_INT 2
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 1
58191: PUSH
58192: LD_INT 3
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 1
58201: PUSH
58202: LD_INT 4
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 0
58211: PUSH
58212: LD_INT 4
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 1
58221: NEG
58222: PUSH
58223: LD_INT 3
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_INT 1
58232: NEG
58233: PUSH
58234: LD_INT 2
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 2
58243: PUSH
58244: LD_INT 4
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 2
58253: NEG
58254: PUSH
58255: LD_INT 2
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 4
58264: NEG
58265: PUSH
58266: LD_INT 0
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 4
58275: NEG
58276: PUSH
58277: LD_INT 1
58279: NEG
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 3
58287: NEG
58288: PUSH
58289: LD_INT 0
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 3
58298: NEG
58299: PUSH
58300: LD_INT 1
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 4
58309: NEG
58310: PUSH
58311: LD_INT 1
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 5
58320: NEG
58321: PUSH
58322: LD_INT 0
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 5
58331: NEG
58332: PUSH
58333: LD_INT 1
58335: NEG
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 5
58343: NEG
58344: PUSH
58345: LD_INT 2
58347: NEG
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 3
58355: NEG
58356: PUSH
58357: LD_INT 2
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 3
58366: NEG
58367: PUSH
58368: LD_INT 3
58370: NEG
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 3
58378: NEG
58379: PUSH
58380: LD_INT 4
58382: NEG
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 2
58390: NEG
58391: PUSH
58392: LD_INT 3
58394: NEG
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 2
58402: NEG
58403: PUSH
58404: LD_INT 2
58406: NEG
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 3
58414: NEG
58415: PUSH
58416: LD_INT 2
58418: NEG
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 4
58426: NEG
58427: PUSH
58428: LD_INT 3
58430: NEG
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 4
58438: NEG
58439: PUSH
58440: LD_INT 4
58442: NEG
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 2
58450: NEG
58451: PUSH
58452: LD_INT 4
58454: NEG
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 4
58462: NEG
58463: PUSH
58464: LD_INT 2
58466: NEG
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 0
58474: PUSH
58475: LD_INT 4
58477: NEG
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 0
58485: PUSH
58486: LD_INT 5
58488: NEG
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 1
58496: PUSH
58497: LD_INT 4
58499: NEG
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 1
58507: PUSH
58508: LD_INT 3
58510: NEG
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 0
58518: PUSH
58519: LD_INT 3
58521: NEG
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 1
58529: NEG
58530: PUSH
58531: LD_INT 4
58533: NEG
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 1
58541: NEG
58542: PUSH
58543: LD_INT 5
58545: NEG
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 2
58553: PUSH
58554: LD_INT 3
58556: NEG
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 2
58564: NEG
58565: PUSH
58566: LD_INT 5
58568: NEG
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: LIST
58603: LIST
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58621: LD_ADDR_VAR 0 31
58625: PUSH
58626: LD_INT 0
58628: PUSH
58629: LD_INT 4
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 0
58638: PUSH
58639: LD_INT 3
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 1
58648: PUSH
58649: LD_INT 4
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 1
58658: PUSH
58659: LD_INT 5
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 0
58668: PUSH
58669: LD_INT 5
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 1
58678: NEG
58679: PUSH
58680: LD_INT 4
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 1
58689: NEG
58690: PUSH
58691: LD_INT 3
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 2
58700: PUSH
58701: LD_INT 5
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 2
58710: NEG
58711: PUSH
58712: LD_INT 3
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 3
58721: NEG
58722: PUSH
58723: LD_INT 0
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 3
58732: NEG
58733: PUSH
58734: LD_INT 1
58736: NEG
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 2
58744: NEG
58745: PUSH
58746: LD_INT 0
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 2
58755: NEG
58756: PUSH
58757: LD_INT 1
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 3
58766: NEG
58767: PUSH
58768: LD_INT 1
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 4
58777: NEG
58778: PUSH
58779: LD_INT 0
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 4
58788: NEG
58789: PUSH
58790: LD_INT 1
58792: NEG
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 4
58800: NEG
58801: PUSH
58802: LD_INT 2
58804: NEG
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 2
58812: NEG
58813: PUSH
58814: LD_INT 2
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 4
58823: NEG
58824: PUSH
58825: LD_INT 4
58827: NEG
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 4
58835: NEG
58836: PUSH
58837: LD_INT 5
58839: NEG
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 3
58847: NEG
58848: PUSH
58849: LD_INT 4
58851: NEG
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 3
58859: NEG
58860: PUSH
58861: LD_INT 3
58863: NEG
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 4
58871: NEG
58872: PUSH
58873: LD_INT 3
58875: NEG
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: LD_INT 5
58883: NEG
58884: PUSH
58885: LD_INT 4
58887: NEG
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 5
58895: NEG
58896: PUSH
58897: LD_INT 5
58899: NEG
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 3
58907: NEG
58908: PUSH
58909: LD_INT 5
58911: NEG
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 5
58919: NEG
58920: PUSH
58921: LD_INT 3
58923: NEG
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 0
58931: PUSH
58932: LD_INT 3
58934: NEG
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 0
58942: PUSH
58943: LD_INT 4
58945: NEG
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 1
58953: PUSH
58954: LD_INT 3
58956: NEG
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 1
58964: PUSH
58965: LD_INT 2
58967: NEG
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 0
58975: PUSH
58976: LD_INT 2
58978: NEG
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 1
58986: NEG
58987: PUSH
58988: LD_INT 3
58990: NEG
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 1
58998: NEG
58999: PUSH
59000: LD_INT 4
59002: NEG
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 2
59010: PUSH
59011: LD_INT 2
59013: NEG
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 2
59021: NEG
59022: PUSH
59023: LD_INT 4
59025: NEG
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 4
59033: PUSH
59034: LD_INT 0
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 4
59043: PUSH
59044: LD_INT 1
59046: NEG
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 5
59054: PUSH
59055: LD_INT 0
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 5
59064: PUSH
59065: LD_INT 1
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 4
59074: PUSH
59075: LD_INT 1
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 3
59084: PUSH
59085: LD_INT 0
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 3
59094: PUSH
59095: LD_INT 1
59097: NEG
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 3
59105: PUSH
59106: LD_INT 2
59108: NEG
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 5
59116: PUSH
59117: LD_INT 2
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59171: LD_ADDR_VAR 0 32
59175: PUSH
59176: LD_INT 4
59178: NEG
59179: PUSH
59180: LD_INT 0
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 4
59189: NEG
59190: PUSH
59191: LD_INT 1
59193: NEG
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 3
59201: NEG
59202: PUSH
59203: LD_INT 0
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 3
59212: NEG
59213: PUSH
59214: LD_INT 1
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 4
59223: NEG
59224: PUSH
59225: LD_INT 1
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 5
59234: NEG
59235: PUSH
59236: LD_INT 0
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 5
59245: NEG
59246: PUSH
59247: LD_INT 1
59249: NEG
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 5
59257: NEG
59258: PUSH
59259: LD_INT 2
59261: NEG
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 3
59269: NEG
59270: PUSH
59271: LD_INT 2
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 3
59280: NEG
59281: PUSH
59282: LD_INT 3
59284: NEG
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 3
59292: NEG
59293: PUSH
59294: LD_INT 4
59296: NEG
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 2
59304: NEG
59305: PUSH
59306: LD_INT 3
59308: NEG
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 2
59316: NEG
59317: PUSH
59318: LD_INT 2
59320: NEG
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 3
59328: NEG
59329: PUSH
59330: LD_INT 2
59332: NEG
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 4
59340: NEG
59341: PUSH
59342: LD_INT 3
59344: NEG
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 4
59352: NEG
59353: PUSH
59354: LD_INT 4
59356: NEG
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 2
59364: NEG
59365: PUSH
59366: LD_INT 4
59368: NEG
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 4
59376: NEG
59377: PUSH
59378: LD_INT 2
59380: NEG
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 0
59388: PUSH
59389: LD_INT 4
59391: NEG
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 0
59399: PUSH
59400: LD_INT 5
59402: NEG
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 1
59410: PUSH
59411: LD_INT 4
59413: NEG
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 1
59421: PUSH
59422: LD_INT 3
59424: NEG
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 0
59432: PUSH
59433: LD_INT 3
59435: NEG
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 1
59443: NEG
59444: PUSH
59445: LD_INT 4
59447: NEG
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 1
59455: NEG
59456: PUSH
59457: LD_INT 5
59459: NEG
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 2
59467: PUSH
59468: LD_INT 3
59470: NEG
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 2
59478: NEG
59479: PUSH
59480: LD_INT 5
59482: NEG
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 3
59490: PUSH
59491: LD_INT 0
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 3
59500: PUSH
59501: LD_INT 1
59503: NEG
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 4
59511: PUSH
59512: LD_INT 0
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 4
59521: PUSH
59522: LD_INT 1
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 3
59531: PUSH
59532: LD_INT 1
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 2
59541: PUSH
59542: LD_INT 0
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 2
59551: PUSH
59552: LD_INT 1
59554: NEG
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 2
59562: PUSH
59563: LD_INT 2
59565: NEG
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 4
59573: PUSH
59574: LD_INT 2
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: PUSH
59581: LD_INT 4
59583: PUSH
59584: LD_INT 4
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 4
59593: PUSH
59594: LD_INT 3
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 5
59603: PUSH
59604: LD_INT 4
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 5
59613: PUSH
59614: LD_INT 5
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 4
59623: PUSH
59624: LD_INT 5
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 3
59633: PUSH
59634: LD_INT 4
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 3
59643: PUSH
59644: LD_INT 3
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 5
59653: PUSH
59654: LD_INT 3
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 3
59663: PUSH
59664: LD_INT 5
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59718: LD_ADDR_VAR 0 33
59722: PUSH
59723: LD_INT 4
59725: NEG
59726: PUSH
59727: LD_INT 4
59729: NEG
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 4
59737: NEG
59738: PUSH
59739: LD_INT 5
59741: NEG
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 3
59749: NEG
59750: PUSH
59751: LD_INT 4
59753: NEG
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 3
59761: NEG
59762: PUSH
59763: LD_INT 3
59765: NEG
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 4
59773: NEG
59774: PUSH
59775: LD_INT 3
59777: NEG
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 5
59785: NEG
59786: PUSH
59787: LD_INT 4
59789: NEG
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 5
59797: NEG
59798: PUSH
59799: LD_INT 5
59801: NEG
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 3
59809: NEG
59810: PUSH
59811: LD_INT 5
59813: NEG
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 5
59821: NEG
59822: PUSH
59823: LD_INT 3
59825: NEG
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 0
59833: PUSH
59834: LD_INT 3
59836: NEG
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 0
59844: PUSH
59845: LD_INT 4
59847: NEG
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 1
59855: PUSH
59856: LD_INT 3
59858: NEG
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 1
59866: PUSH
59867: LD_INT 2
59869: NEG
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 0
59877: PUSH
59878: LD_INT 2
59880: NEG
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 1
59888: NEG
59889: PUSH
59890: LD_INT 3
59892: NEG
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 1
59900: NEG
59901: PUSH
59902: LD_INT 4
59904: NEG
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 2
59912: PUSH
59913: LD_INT 2
59915: NEG
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 2
59923: NEG
59924: PUSH
59925: LD_INT 4
59927: NEG
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 4
59935: PUSH
59936: LD_INT 0
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 4
59945: PUSH
59946: LD_INT 1
59948: NEG
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 5
59956: PUSH
59957: LD_INT 0
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 5
59966: PUSH
59967: LD_INT 1
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 4
59976: PUSH
59977: LD_INT 1
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 3
59986: PUSH
59987: LD_INT 0
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 3
59996: PUSH
59997: LD_INT 1
59999: NEG
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 3
60007: PUSH
60008: LD_INT 2
60010: NEG
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 5
60018: PUSH
60019: LD_INT 2
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 3
60028: PUSH
60029: LD_INT 3
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 3
60038: PUSH
60039: LD_INT 2
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 4
60048: PUSH
60049: LD_INT 3
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 4
60058: PUSH
60059: LD_INT 4
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 3
60068: PUSH
60069: LD_INT 4
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 2
60078: PUSH
60079: LD_INT 3
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 2
60088: PUSH
60089: LD_INT 2
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 4
60098: PUSH
60099: LD_INT 2
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 2
60108: PUSH
60109: LD_INT 4
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 0
60118: PUSH
60119: LD_INT 4
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 0
60128: PUSH
60129: LD_INT 3
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 1
60138: PUSH
60139: LD_INT 4
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 1
60148: PUSH
60149: LD_INT 5
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 0
60158: PUSH
60159: LD_INT 5
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 1
60168: NEG
60169: PUSH
60170: LD_INT 4
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 1
60179: NEG
60180: PUSH
60181: LD_INT 3
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 2
60190: PUSH
60191: LD_INT 5
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 2
60200: NEG
60201: PUSH
60202: LD_INT 3
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60256: LD_ADDR_VAR 0 34
60260: PUSH
60261: LD_INT 0
60263: PUSH
60264: LD_INT 4
60266: NEG
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 0
60274: PUSH
60275: LD_INT 5
60277: NEG
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 1
60285: PUSH
60286: LD_INT 4
60288: NEG
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 1
60296: PUSH
60297: LD_INT 3
60299: NEG
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 0
60307: PUSH
60308: LD_INT 3
60310: NEG
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 1
60318: NEG
60319: PUSH
60320: LD_INT 4
60322: NEG
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 1
60330: NEG
60331: PUSH
60332: LD_INT 5
60334: NEG
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 2
60342: PUSH
60343: LD_INT 3
60345: NEG
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 2
60353: NEG
60354: PUSH
60355: LD_INT 5
60357: NEG
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: LD_INT 3
60365: PUSH
60366: LD_INT 0
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 3
60375: PUSH
60376: LD_INT 1
60378: NEG
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 4
60386: PUSH
60387: LD_INT 0
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 4
60396: PUSH
60397: LD_INT 1
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 3
60406: PUSH
60407: LD_INT 1
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 2
60416: PUSH
60417: LD_INT 0
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 2
60426: PUSH
60427: LD_INT 1
60429: NEG
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 2
60437: PUSH
60438: LD_INT 2
60440: NEG
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PUSH
60446: LD_INT 4
60448: PUSH
60449: LD_INT 2
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 4
60458: PUSH
60459: LD_INT 4
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: PUSH
60466: LD_INT 4
60468: PUSH
60469: LD_INT 3
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 5
60478: PUSH
60479: LD_INT 4
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 5
60488: PUSH
60489: LD_INT 5
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 4
60498: PUSH
60499: LD_INT 5
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 3
60508: PUSH
60509: LD_INT 4
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: LD_INT 3
60518: PUSH
60519: LD_INT 3
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 5
60528: PUSH
60529: LD_INT 3
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 3
60538: PUSH
60539: LD_INT 5
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 0
60548: PUSH
60549: LD_INT 3
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 0
60558: PUSH
60559: LD_INT 2
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 1
60568: PUSH
60569: LD_INT 3
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 1
60578: PUSH
60579: LD_INT 4
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 0
60588: PUSH
60589: LD_INT 4
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: LD_INT 1
60598: NEG
60599: PUSH
60600: LD_INT 3
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 1
60609: NEG
60610: PUSH
60611: LD_INT 2
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 2
60620: PUSH
60621: LD_INT 4
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 2
60630: NEG
60631: PUSH
60632: LD_INT 2
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 4
60641: NEG
60642: PUSH
60643: LD_INT 0
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 4
60652: NEG
60653: PUSH
60654: LD_INT 1
60656: NEG
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 3
60664: NEG
60665: PUSH
60666: LD_INT 0
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 3
60675: NEG
60676: PUSH
60677: LD_INT 1
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 4
60686: NEG
60687: PUSH
60688: LD_INT 1
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 5
60697: NEG
60698: PUSH
60699: LD_INT 0
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 5
60708: NEG
60709: PUSH
60710: LD_INT 1
60712: NEG
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 5
60720: NEG
60721: PUSH
60722: LD_INT 2
60724: NEG
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 3
60732: NEG
60733: PUSH
60734: LD_INT 2
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: ST_TO_ADDR
// end ; end ;
60788: GO 60791
60790: POP
// case btype of b_depot , b_warehouse :
60791: LD_VAR 0 1
60795: PUSH
60796: LD_INT 0
60798: DOUBLE
60799: EQUAL
60800: IFTRUE 60810
60802: LD_INT 1
60804: DOUBLE
60805: EQUAL
60806: IFTRUE 60810
60808: GO 61011
60810: POP
// case nation of nation_american :
60811: LD_VAR 0 5
60815: PUSH
60816: LD_INT 1
60818: DOUBLE
60819: EQUAL
60820: IFTRUE 60824
60822: GO 60880
60824: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60825: LD_ADDR_VAR 0 9
60829: PUSH
60830: LD_VAR 0 11
60834: PUSH
60835: LD_VAR 0 12
60839: PUSH
60840: LD_VAR 0 13
60844: PUSH
60845: LD_VAR 0 14
60849: PUSH
60850: LD_VAR 0 15
60854: PUSH
60855: LD_VAR 0 16
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: PUSH
60868: LD_VAR 0 4
60872: PUSH
60873: LD_INT 1
60875: PLUS
60876: ARRAY
60877: ST_TO_ADDR
60878: GO 61009
60880: LD_INT 2
60882: DOUBLE
60883: EQUAL
60884: IFTRUE 60888
60886: GO 60944
60888: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60889: LD_ADDR_VAR 0 9
60893: PUSH
60894: LD_VAR 0 17
60898: PUSH
60899: LD_VAR 0 18
60903: PUSH
60904: LD_VAR 0 19
60908: PUSH
60909: LD_VAR 0 20
60913: PUSH
60914: LD_VAR 0 21
60918: PUSH
60919: LD_VAR 0 22
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: PUSH
60932: LD_VAR 0 4
60936: PUSH
60937: LD_INT 1
60939: PLUS
60940: ARRAY
60941: ST_TO_ADDR
60942: GO 61009
60944: LD_INT 3
60946: DOUBLE
60947: EQUAL
60948: IFTRUE 60952
60950: GO 61008
60952: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60953: LD_ADDR_VAR 0 9
60957: PUSH
60958: LD_VAR 0 23
60962: PUSH
60963: LD_VAR 0 24
60967: PUSH
60968: LD_VAR 0 25
60972: PUSH
60973: LD_VAR 0 26
60977: PUSH
60978: LD_VAR 0 27
60982: PUSH
60983: LD_VAR 0 28
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: PUSH
60996: LD_VAR 0 4
61000: PUSH
61001: LD_INT 1
61003: PLUS
61004: ARRAY
61005: ST_TO_ADDR
61006: GO 61009
61008: POP
61009: GO 61564
61011: LD_INT 2
61013: DOUBLE
61014: EQUAL
61015: IFTRUE 61025
61017: LD_INT 3
61019: DOUBLE
61020: EQUAL
61021: IFTRUE 61025
61023: GO 61081
61025: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61026: LD_ADDR_VAR 0 9
61030: PUSH
61031: LD_VAR 0 29
61035: PUSH
61036: LD_VAR 0 30
61040: PUSH
61041: LD_VAR 0 31
61045: PUSH
61046: LD_VAR 0 32
61050: PUSH
61051: LD_VAR 0 33
61055: PUSH
61056: LD_VAR 0 34
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: PUSH
61069: LD_VAR 0 4
61073: PUSH
61074: LD_INT 1
61076: PLUS
61077: ARRAY
61078: ST_TO_ADDR
61079: GO 61564
61081: LD_INT 16
61083: DOUBLE
61084: EQUAL
61085: IFTRUE 61143
61087: LD_INT 17
61089: DOUBLE
61090: EQUAL
61091: IFTRUE 61143
61093: LD_INT 18
61095: DOUBLE
61096: EQUAL
61097: IFTRUE 61143
61099: LD_INT 19
61101: DOUBLE
61102: EQUAL
61103: IFTRUE 61143
61105: LD_INT 22
61107: DOUBLE
61108: EQUAL
61109: IFTRUE 61143
61111: LD_INT 20
61113: DOUBLE
61114: EQUAL
61115: IFTRUE 61143
61117: LD_INT 21
61119: DOUBLE
61120: EQUAL
61121: IFTRUE 61143
61123: LD_INT 23
61125: DOUBLE
61126: EQUAL
61127: IFTRUE 61143
61129: LD_INT 24
61131: DOUBLE
61132: EQUAL
61133: IFTRUE 61143
61135: LD_INT 25
61137: DOUBLE
61138: EQUAL
61139: IFTRUE 61143
61141: GO 61199
61143: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61144: LD_ADDR_VAR 0 9
61148: PUSH
61149: LD_VAR 0 35
61153: PUSH
61154: LD_VAR 0 36
61158: PUSH
61159: LD_VAR 0 37
61163: PUSH
61164: LD_VAR 0 38
61168: PUSH
61169: LD_VAR 0 39
61173: PUSH
61174: LD_VAR 0 40
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: PUSH
61187: LD_VAR 0 4
61191: PUSH
61192: LD_INT 1
61194: PLUS
61195: ARRAY
61196: ST_TO_ADDR
61197: GO 61564
61199: LD_INT 6
61201: DOUBLE
61202: EQUAL
61203: IFTRUE 61255
61205: LD_INT 7
61207: DOUBLE
61208: EQUAL
61209: IFTRUE 61255
61211: LD_INT 8
61213: DOUBLE
61214: EQUAL
61215: IFTRUE 61255
61217: LD_INT 13
61219: DOUBLE
61220: EQUAL
61221: IFTRUE 61255
61223: LD_INT 12
61225: DOUBLE
61226: EQUAL
61227: IFTRUE 61255
61229: LD_INT 15
61231: DOUBLE
61232: EQUAL
61233: IFTRUE 61255
61235: LD_INT 11
61237: DOUBLE
61238: EQUAL
61239: IFTRUE 61255
61241: LD_INT 14
61243: DOUBLE
61244: EQUAL
61245: IFTRUE 61255
61247: LD_INT 10
61249: DOUBLE
61250: EQUAL
61251: IFTRUE 61255
61253: GO 61311
61255: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61256: LD_ADDR_VAR 0 9
61260: PUSH
61261: LD_VAR 0 41
61265: PUSH
61266: LD_VAR 0 42
61270: PUSH
61271: LD_VAR 0 43
61275: PUSH
61276: LD_VAR 0 44
61280: PUSH
61281: LD_VAR 0 45
61285: PUSH
61286: LD_VAR 0 46
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: PUSH
61299: LD_VAR 0 4
61303: PUSH
61304: LD_INT 1
61306: PLUS
61307: ARRAY
61308: ST_TO_ADDR
61309: GO 61564
61311: LD_INT 36
61313: DOUBLE
61314: EQUAL
61315: IFTRUE 61319
61317: GO 61375
61319: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61320: LD_ADDR_VAR 0 9
61324: PUSH
61325: LD_VAR 0 47
61329: PUSH
61330: LD_VAR 0 48
61334: PUSH
61335: LD_VAR 0 49
61339: PUSH
61340: LD_VAR 0 50
61344: PUSH
61345: LD_VAR 0 51
61349: PUSH
61350: LD_VAR 0 52
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: PUSH
61363: LD_VAR 0 4
61367: PUSH
61368: LD_INT 1
61370: PLUS
61371: ARRAY
61372: ST_TO_ADDR
61373: GO 61564
61375: LD_INT 4
61377: DOUBLE
61378: EQUAL
61379: IFTRUE 61401
61381: LD_INT 5
61383: DOUBLE
61384: EQUAL
61385: IFTRUE 61401
61387: LD_INT 34
61389: DOUBLE
61390: EQUAL
61391: IFTRUE 61401
61393: LD_INT 37
61395: DOUBLE
61396: EQUAL
61397: IFTRUE 61401
61399: GO 61457
61401: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61402: LD_ADDR_VAR 0 9
61406: PUSH
61407: LD_VAR 0 53
61411: PUSH
61412: LD_VAR 0 54
61416: PUSH
61417: LD_VAR 0 55
61421: PUSH
61422: LD_VAR 0 56
61426: PUSH
61427: LD_VAR 0 57
61431: PUSH
61432: LD_VAR 0 58
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: PUSH
61445: LD_VAR 0 4
61449: PUSH
61450: LD_INT 1
61452: PLUS
61453: ARRAY
61454: ST_TO_ADDR
61455: GO 61564
61457: LD_INT 31
61459: DOUBLE
61460: EQUAL
61461: IFTRUE 61507
61463: LD_INT 32
61465: DOUBLE
61466: EQUAL
61467: IFTRUE 61507
61469: LD_INT 33
61471: DOUBLE
61472: EQUAL
61473: IFTRUE 61507
61475: LD_INT 27
61477: DOUBLE
61478: EQUAL
61479: IFTRUE 61507
61481: LD_INT 26
61483: DOUBLE
61484: EQUAL
61485: IFTRUE 61507
61487: LD_INT 28
61489: DOUBLE
61490: EQUAL
61491: IFTRUE 61507
61493: LD_INT 29
61495: DOUBLE
61496: EQUAL
61497: IFTRUE 61507
61499: LD_INT 30
61501: DOUBLE
61502: EQUAL
61503: IFTRUE 61507
61505: GO 61563
61507: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61508: LD_ADDR_VAR 0 9
61512: PUSH
61513: LD_VAR 0 59
61517: PUSH
61518: LD_VAR 0 60
61522: PUSH
61523: LD_VAR 0 61
61527: PUSH
61528: LD_VAR 0 62
61532: PUSH
61533: LD_VAR 0 63
61537: PUSH
61538: LD_VAR 0 64
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: PUSH
61551: LD_VAR 0 4
61555: PUSH
61556: LD_INT 1
61558: PLUS
61559: ARRAY
61560: ST_TO_ADDR
61561: GO 61564
61563: POP
// temp_list2 = [ ] ;
61564: LD_ADDR_VAR 0 10
61568: PUSH
61569: EMPTY
61570: ST_TO_ADDR
// for i in temp_list do
61571: LD_ADDR_VAR 0 8
61575: PUSH
61576: LD_VAR 0 9
61580: PUSH
61581: FOR_IN
61582: IFFALSE 61634
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61584: LD_ADDR_VAR 0 10
61588: PUSH
61589: LD_VAR 0 10
61593: PUSH
61594: LD_VAR 0 8
61598: PUSH
61599: LD_INT 1
61601: ARRAY
61602: PUSH
61603: LD_VAR 0 2
61607: PLUS
61608: PUSH
61609: LD_VAR 0 8
61613: PUSH
61614: LD_INT 2
61616: ARRAY
61617: PUSH
61618: LD_VAR 0 3
61622: PLUS
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: EMPTY
61629: LIST
61630: ADD
61631: ST_TO_ADDR
61632: GO 61581
61634: POP
61635: POP
// result = temp_list2 ;
61636: LD_ADDR_VAR 0 7
61640: PUSH
61641: LD_VAR 0 10
61645: ST_TO_ADDR
// end ;
61646: LD_VAR 0 7
61650: RET
// export function EnemyInRange ( unit , dist ) ; begin
61651: LD_INT 0
61653: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61654: LD_ADDR_VAR 0 3
61658: PUSH
61659: LD_VAR 0 1
61663: PPUSH
61664: CALL_OW 255
61668: PPUSH
61669: LD_VAR 0 1
61673: PPUSH
61674: CALL_OW 250
61678: PPUSH
61679: LD_VAR 0 1
61683: PPUSH
61684: CALL_OW 251
61688: PPUSH
61689: LD_VAR 0 2
61693: PPUSH
61694: CALL 35422 0 4
61698: PUSH
61699: LD_INT 4
61701: ARRAY
61702: ST_TO_ADDR
// end ;
61703: LD_VAR 0 3
61707: RET
// export function PlayerSeeMe ( unit ) ; begin
61708: LD_INT 0
61710: PPUSH
// result := See ( your_side , unit ) ;
61711: LD_ADDR_VAR 0 2
61715: PUSH
61716: LD_OWVAR 2
61720: PPUSH
61721: LD_VAR 0 1
61725: PPUSH
61726: CALL_OW 292
61730: ST_TO_ADDR
// end ;
61731: LD_VAR 0 2
61735: RET
// export function ReverseDir ( unit ) ; begin
61736: LD_INT 0
61738: PPUSH
// if not unit then
61739: LD_VAR 0 1
61743: NOT
61744: IFFALSE 61748
// exit ;
61746: GO 61771
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61748: LD_ADDR_VAR 0 2
61752: PUSH
61753: LD_VAR 0 1
61757: PPUSH
61758: CALL_OW 254
61762: PUSH
61763: LD_INT 3
61765: PLUS
61766: PUSH
61767: LD_INT 6
61769: MOD
61770: ST_TO_ADDR
// end ;
61771: LD_VAR 0 2
61775: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
61776: LD_INT 0
61778: PPUSH
61779: PPUSH
61780: PPUSH
61781: PPUSH
61782: PPUSH
// if not hexes then
61783: LD_VAR 0 2
61787: NOT
61788: IFFALSE 61792
// exit ;
61790: GO 61940
// dist := 9999 ;
61792: LD_ADDR_VAR 0 5
61796: PUSH
61797: LD_INT 9999
61799: ST_TO_ADDR
// for i = 1 to hexes do
61800: LD_ADDR_VAR 0 4
61804: PUSH
61805: DOUBLE
61806: LD_INT 1
61808: DEC
61809: ST_TO_ADDR
61810: LD_VAR 0 2
61814: PUSH
61815: FOR_TO
61816: IFFALSE 61928
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
61818: LD_VAR 0 1
61822: PPUSH
61823: LD_VAR 0 2
61827: PUSH
61828: LD_VAR 0 4
61832: ARRAY
61833: PUSH
61834: LD_INT 1
61836: ARRAY
61837: PPUSH
61838: LD_VAR 0 2
61842: PUSH
61843: LD_VAR 0 4
61847: ARRAY
61848: PUSH
61849: LD_INT 2
61851: ARRAY
61852: PPUSH
61853: CALL_OW 297
61857: PUSH
61858: LD_VAR 0 5
61862: LESS
61863: IFFALSE 61926
// begin hex := hexes [ i ] ;
61865: LD_ADDR_VAR 0 7
61869: PUSH
61870: LD_VAR 0 2
61874: PUSH
61875: LD_VAR 0 4
61879: ARRAY
61880: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61881: LD_ADDR_VAR 0 5
61885: PUSH
61886: LD_VAR 0 1
61890: PPUSH
61891: LD_VAR 0 2
61895: PUSH
61896: LD_VAR 0 4
61900: ARRAY
61901: PUSH
61902: LD_INT 1
61904: ARRAY
61905: PPUSH
61906: LD_VAR 0 2
61910: PUSH
61911: LD_VAR 0 4
61915: ARRAY
61916: PUSH
61917: LD_INT 2
61919: ARRAY
61920: PPUSH
61921: CALL_OW 297
61925: ST_TO_ADDR
// end ; end ;
61926: GO 61815
61928: POP
61929: POP
// result := hex ;
61930: LD_ADDR_VAR 0 3
61934: PUSH
61935: LD_VAR 0 7
61939: ST_TO_ADDR
// end ;
61940: LD_VAR 0 3
61944: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61945: LD_INT 0
61947: PPUSH
61948: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61949: LD_VAR 0 1
61953: NOT
61954: PUSH
61955: LD_VAR 0 1
61959: PUSH
61960: LD_INT 21
61962: PUSH
61963: LD_INT 2
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 23
61972: PUSH
61973: LD_INT 2
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PPUSH
61984: CALL_OW 69
61988: IN
61989: NOT
61990: OR
61991: IFFALSE 61995
// exit ;
61993: GO 62042
// for i = 1 to 3 do
61995: LD_ADDR_VAR 0 3
61999: PUSH
62000: DOUBLE
62001: LD_INT 1
62003: DEC
62004: ST_TO_ADDR
62005: LD_INT 3
62007: PUSH
62008: FOR_TO
62009: IFFALSE 62040
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62011: LD_VAR 0 1
62015: PPUSH
62016: CALL_OW 250
62020: PPUSH
62021: LD_VAR 0 1
62025: PPUSH
62026: CALL_OW 251
62030: PPUSH
62031: LD_INT 1
62033: PPUSH
62034: CALL_OW 453
62038: GO 62008
62040: POP
62041: POP
// end ;
62042: LD_VAR 0 2
62046: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62047: LD_INT 0
62049: PPUSH
62050: PPUSH
62051: PPUSH
62052: PPUSH
62053: PPUSH
62054: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62055: LD_VAR 0 1
62059: NOT
62060: PUSH
62061: LD_VAR 0 2
62065: NOT
62066: OR
62067: PUSH
62068: LD_VAR 0 1
62072: PPUSH
62073: CALL_OW 314
62077: OR
62078: IFFALSE 62082
// exit ;
62080: GO 62523
// x := GetX ( enemy_unit ) ;
62082: LD_ADDR_VAR 0 7
62086: PUSH
62087: LD_VAR 0 2
62091: PPUSH
62092: CALL_OW 250
62096: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62097: LD_ADDR_VAR 0 8
62101: PUSH
62102: LD_VAR 0 2
62106: PPUSH
62107: CALL_OW 251
62111: ST_TO_ADDR
// if not x or not y then
62112: LD_VAR 0 7
62116: NOT
62117: PUSH
62118: LD_VAR 0 8
62122: NOT
62123: OR
62124: IFFALSE 62128
// exit ;
62126: GO 62523
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62128: LD_ADDR_VAR 0 6
62132: PUSH
62133: LD_VAR 0 7
62137: PPUSH
62138: LD_INT 0
62140: PPUSH
62141: LD_INT 4
62143: PPUSH
62144: CALL_OW 272
62148: PUSH
62149: LD_VAR 0 8
62153: PPUSH
62154: LD_INT 0
62156: PPUSH
62157: LD_INT 4
62159: PPUSH
62160: CALL_OW 273
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_VAR 0 7
62173: PPUSH
62174: LD_INT 1
62176: PPUSH
62177: LD_INT 4
62179: PPUSH
62180: CALL_OW 272
62184: PUSH
62185: LD_VAR 0 8
62189: PPUSH
62190: LD_INT 1
62192: PPUSH
62193: LD_INT 4
62195: PPUSH
62196: CALL_OW 273
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_VAR 0 7
62209: PPUSH
62210: LD_INT 2
62212: PPUSH
62213: LD_INT 4
62215: PPUSH
62216: CALL_OW 272
62220: PUSH
62221: LD_VAR 0 8
62225: PPUSH
62226: LD_INT 2
62228: PPUSH
62229: LD_INT 4
62231: PPUSH
62232: CALL_OW 273
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_VAR 0 7
62245: PPUSH
62246: LD_INT 3
62248: PPUSH
62249: LD_INT 4
62251: PPUSH
62252: CALL_OW 272
62256: PUSH
62257: LD_VAR 0 8
62261: PPUSH
62262: LD_INT 3
62264: PPUSH
62265: LD_INT 4
62267: PPUSH
62268: CALL_OW 273
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_VAR 0 7
62281: PPUSH
62282: LD_INT 4
62284: PPUSH
62285: LD_INT 4
62287: PPUSH
62288: CALL_OW 272
62292: PUSH
62293: LD_VAR 0 8
62297: PPUSH
62298: LD_INT 4
62300: PPUSH
62301: LD_INT 4
62303: PPUSH
62304: CALL_OW 273
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_VAR 0 7
62317: PPUSH
62318: LD_INT 5
62320: PPUSH
62321: LD_INT 4
62323: PPUSH
62324: CALL_OW 272
62328: PUSH
62329: LD_VAR 0 8
62333: PPUSH
62334: LD_INT 5
62336: PPUSH
62337: LD_INT 4
62339: PPUSH
62340: CALL_OW 273
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: ST_TO_ADDR
// for i = tmp downto 1 do
62357: LD_ADDR_VAR 0 4
62361: PUSH
62362: DOUBLE
62363: LD_VAR 0 6
62367: INC
62368: ST_TO_ADDR
62369: LD_INT 1
62371: PUSH
62372: FOR_DOWNTO
62373: IFFALSE 62474
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62375: LD_VAR 0 6
62379: PUSH
62380: LD_VAR 0 4
62384: ARRAY
62385: PUSH
62386: LD_INT 1
62388: ARRAY
62389: PPUSH
62390: LD_VAR 0 6
62394: PUSH
62395: LD_VAR 0 4
62399: ARRAY
62400: PUSH
62401: LD_INT 2
62403: ARRAY
62404: PPUSH
62405: CALL_OW 488
62409: NOT
62410: PUSH
62411: LD_VAR 0 6
62415: PUSH
62416: LD_VAR 0 4
62420: ARRAY
62421: PUSH
62422: LD_INT 1
62424: ARRAY
62425: PPUSH
62426: LD_VAR 0 6
62430: PUSH
62431: LD_VAR 0 4
62435: ARRAY
62436: PUSH
62437: LD_INT 2
62439: ARRAY
62440: PPUSH
62441: CALL_OW 428
62445: PUSH
62446: LD_INT 0
62448: NONEQUAL
62449: OR
62450: IFFALSE 62472
// tmp := Delete ( tmp , i ) ;
62452: LD_ADDR_VAR 0 6
62456: PUSH
62457: LD_VAR 0 6
62461: PPUSH
62462: LD_VAR 0 4
62466: PPUSH
62467: CALL_OW 3
62471: ST_TO_ADDR
62472: GO 62372
62474: POP
62475: POP
// j := GetClosestHex ( unit , tmp ) ;
62476: LD_ADDR_VAR 0 5
62480: PUSH
62481: LD_VAR 0 1
62485: PPUSH
62486: LD_VAR 0 6
62490: PPUSH
62491: CALL 61776 0 2
62495: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62496: LD_VAR 0 1
62500: PPUSH
62501: LD_VAR 0 5
62505: PUSH
62506: LD_INT 1
62508: ARRAY
62509: PPUSH
62510: LD_VAR 0 5
62514: PUSH
62515: LD_INT 2
62517: ARRAY
62518: PPUSH
62519: CALL_OW 111
// end ;
62523: LD_VAR 0 3
62527: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62528: LD_INT 0
62530: PPUSH
62531: PPUSH
62532: PPUSH
// uc_side = 0 ;
62533: LD_ADDR_OWVAR 20
62537: PUSH
62538: LD_INT 0
62540: ST_TO_ADDR
// uc_nation = 0 ;
62541: LD_ADDR_OWVAR 21
62545: PUSH
62546: LD_INT 0
62548: ST_TO_ADDR
// InitHc_All ( ) ;
62549: CALL_OW 584
// InitVc ;
62553: CALL_OW 20
// if mastodonts then
62557: LD_VAR 0 6
62561: IFFALSE 62628
// for i = 1 to mastodonts do
62563: LD_ADDR_VAR 0 11
62567: PUSH
62568: DOUBLE
62569: LD_INT 1
62571: DEC
62572: ST_TO_ADDR
62573: LD_VAR 0 6
62577: PUSH
62578: FOR_TO
62579: IFFALSE 62626
// begin vc_chassis := 31 ;
62581: LD_ADDR_OWVAR 37
62585: PUSH
62586: LD_INT 31
62588: ST_TO_ADDR
// vc_control := control_rider ;
62589: LD_ADDR_OWVAR 38
62593: PUSH
62594: LD_INT 4
62596: ST_TO_ADDR
// animal := CreateVehicle ;
62597: LD_ADDR_VAR 0 12
62601: PUSH
62602: CALL_OW 45
62606: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62607: LD_VAR 0 12
62611: PPUSH
62612: LD_VAR 0 8
62616: PPUSH
62617: LD_INT 0
62619: PPUSH
62620: CALL 64816 0 3
// end ;
62624: GO 62578
62626: POP
62627: POP
// if horses then
62628: LD_VAR 0 5
62632: IFFALSE 62699
// for i = 1 to horses do
62634: LD_ADDR_VAR 0 11
62638: PUSH
62639: DOUBLE
62640: LD_INT 1
62642: DEC
62643: ST_TO_ADDR
62644: LD_VAR 0 5
62648: PUSH
62649: FOR_TO
62650: IFFALSE 62697
// begin hc_class := 21 ;
62652: LD_ADDR_OWVAR 28
62656: PUSH
62657: LD_INT 21
62659: ST_TO_ADDR
// hc_gallery :=  ;
62660: LD_ADDR_OWVAR 33
62664: PUSH
62665: LD_STRING 
62667: ST_TO_ADDR
// animal := CreateHuman ;
62668: LD_ADDR_VAR 0 12
62672: PUSH
62673: CALL_OW 44
62677: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62678: LD_VAR 0 12
62682: PPUSH
62683: LD_VAR 0 8
62687: PPUSH
62688: LD_INT 0
62690: PPUSH
62691: CALL 64816 0 3
// end ;
62695: GO 62649
62697: POP
62698: POP
// if birds then
62699: LD_VAR 0 1
62703: IFFALSE 62770
// for i = 1 to birds do
62705: LD_ADDR_VAR 0 11
62709: PUSH
62710: DOUBLE
62711: LD_INT 1
62713: DEC
62714: ST_TO_ADDR
62715: LD_VAR 0 1
62719: PUSH
62720: FOR_TO
62721: IFFALSE 62768
// begin hc_class = 18 ;
62723: LD_ADDR_OWVAR 28
62727: PUSH
62728: LD_INT 18
62730: ST_TO_ADDR
// hc_gallery =  ;
62731: LD_ADDR_OWVAR 33
62735: PUSH
62736: LD_STRING 
62738: ST_TO_ADDR
// animal := CreateHuman ;
62739: LD_ADDR_VAR 0 12
62743: PUSH
62744: CALL_OW 44
62748: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62749: LD_VAR 0 12
62753: PPUSH
62754: LD_VAR 0 8
62758: PPUSH
62759: LD_INT 0
62761: PPUSH
62762: CALL 64816 0 3
// end ;
62766: GO 62720
62768: POP
62769: POP
// if tigers then
62770: LD_VAR 0 2
62774: IFFALSE 62858
// for i = 1 to tigers do
62776: LD_ADDR_VAR 0 11
62780: PUSH
62781: DOUBLE
62782: LD_INT 1
62784: DEC
62785: ST_TO_ADDR
62786: LD_VAR 0 2
62790: PUSH
62791: FOR_TO
62792: IFFALSE 62856
// begin hc_class = class_tiger ;
62794: LD_ADDR_OWVAR 28
62798: PUSH
62799: LD_INT 14
62801: ST_TO_ADDR
// hc_gallery =  ;
62802: LD_ADDR_OWVAR 33
62806: PUSH
62807: LD_STRING 
62809: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62810: LD_ADDR_OWVAR 35
62814: PUSH
62815: LD_INT 7
62817: NEG
62818: PPUSH
62819: LD_INT 7
62821: PPUSH
62822: CALL_OW 12
62826: ST_TO_ADDR
// animal := CreateHuman ;
62827: LD_ADDR_VAR 0 12
62831: PUSH
62832: CALL_OW 44
62836: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62837: LD_VAR 0 12
62841: PPUSH
62842: LD_VAR 0 8
62846: PPUSH
62847: LD_INT 0
62849: PPUSH
62850: CALL 64816 0 3
// end ;
62854: GO 62791
62856: POP
62857: POP
// if apemans then
62858: LD_VAR 0 3
62862: IFFALSE 62985
// for i = 1 to apemans do
62864: LD_ADDR_VAR 0 11
62868: PUSH
62869: DOUBLE
62870: LD_INT 1
62872: DEC
62873: ST_TO_ADDR
62874: LD_VAR 0 3
62878: PUSH
62879: FOR_TO
62880: IFFALSE 62983
// begin hc_class = class_apeman ;
62882: LD_ADDR_OWVAR 28
62886: PUSH
62887: LD_INT 12
62889: ST_TO_ADDR
// hc_gallery =  ;
62890: LD_ADDR_OWVAR 33
62894: PUSH
62895: LD_STRING 
62897: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
62898: LD_ADDR_OWVAR 35
62902: PUSH
62903: LD_INT 5
62905: NEG
62906: PPUSH
62907: LD_INT 5
62909: PPUSH
62910: CALL_OW 12
62914: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62915: LD_ADDR_OWVAR 31
62919: PUSH
62920: LD_INT 1
62922: PPUSH
62923: LD_INT 3
62925: PPUSH
62926: CALL_OW 12
62930: PUSH
62931: LD_INT 1
62933: PPUSH
62934: LD_INT 3
62936: PPUSH
62937: CALL_OW 12
62941: PUSH
62942: LD_INT 0
62944: PUSH
62945: LD_INT 0
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: LIST
62952: LIST
62953: ST_TO_ADDR
// animal := CreateHuman ;
62954: LD_ADDR_VAR 0 12
62958: PUSH
62959: CALL_OW 44
62963: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62964: LD_VAR 0 12
62968: PPUSH
62969: LD_VAR 0 8
62973: PPUSH
62974: LD_INT 0
62976: PPUSH
62977: CALL 64816 0 3
// end ;
62981: GO 62879
62983: POP
62984: POP
// if enchidnas then
62985: LD_VAR 0 4
62989: IFFALSE 63056
// for i = 1 to enchidnas do
62991: LD_ADDR_VAR 0 11
62995: PUSH
62996: DOUBLE
62997: LD_INT 1
62999: DEC
63000: ST_TO_ADDR
63001: LD_VAR 0 4
63005: PUSH
63006: FOR_TO
63007: IFFALSE 63054
// begin hc_class = 13 ;
63009: LD_ADDR_OWVAR 28
63013: PUSH
63014: LD_INT 13
63016: ST_TO_ADDR
// hc_gallery =  ;
63017: LD_ADDR_OWVAR 33
63021: PUSH
63022: LD_STRING 
63024: ST_TO_ADDR
// animal := CreateHuman ;
63025: LD_ADDR_VAR 0 12
63029: PUSH
63030: CALL_OW 44
63034: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63035: LD_VAR 0 12
63039: PPUSH
63040: LD_VAR 0 8
63044: PPUSH
63045: LD_INT 0
63047: PPUSH
63048: CALL 64816 0 3
// end ;
63052: GO 63006
63054: POP
63055: POP
// if fishes then
63056: LD_VAR 0 7
63060: IFFALSE 63127
// for i = 1 to fishes do
63062: LD_ADDR_VAR 0 11
63066: PUSH
63067: DOUBLE
63068: LD_INT 1
63070: DEC
63071: ST_TO_ADDR
63072: LD_VAR 0 7
63076: PUSH
63077: FOR_TO
63078: IFFALSE 63125
// begin hc_class = 20 ;
63080: LD_ADDR_OWVAR 28
63084: PUSH
63085: LD_INT 20
63087: ST_TO_ADDR
// hc_gallery =  ;
63088: LD_ADDR_OWVAR 33
63092: PUSH
63093: LD_STRING 
63095: ST_TO_ADDR
// animal := CreateHuman ;
63096: LD_ADDR_VAR 0 12
63100: PUSH
63101: CALL_OW 44
63105: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63106: LD_VAR 0 12
63110: PPUSH
63111: LD_VAR 0 9
63115: PPUSH
63116: LD_INT 0
63118: PPUSH
63119: CALL 64816 0 3
// end ;
63123: GO 63077
63125: POP
63126: POP
// end ;
63127: LD_VAR 0 10
63131: RET
// export function WantHeal ( sci , unit ) ; begin
63132: LD_INT 0
63134: PPUSH
// if GetTaskList ( sci ) > 0 then
63135: LD_VAR 0 1
63139: PPUSH
63140: CALL_OW 437
63144: PUSH
63145: LD_INT 0
63147: GREATER
63148: IFFALSE 63218
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63150: LD_VAR 0 1
63154: PPUSH
63155: CALL_OW 437
63159: PUSH
63160: LD_INT 1
63162: ARRAY
63163: PUSH
63164: LD_INT 1
63166: ARRAY
63167: PUSH
63168: LD_STRING l
63170: EQUAL
63171: PUSH
63172: LD_VAR 0 1
63176: PPUSH
63177: CALL_OW 437
63181: PUSH
63182: LD_INT 1
63184: ARRAY
63185: PUSH
63186: LD_INT 4
63188: ARRAY
63189: PUSH
63190: LD_VAR 0 2
63194: EQUAL
63195: AND
63196: IFFALSE 63208
// result := true else
63198: LD_ADDR_VAR 0 3
63202: PUSH
63203: LD_INT 1
63205: ST_TO_ADDR
63206: GO 63216
// result := false ;
63208: LD_ADDR_VAR 0 3
63212: PUSH
63213: LD_INT 0
63215: ST_TO_ADDR
// end else
63216: GO 63226
// result := false ;
63218: LD_ADDR_VAR 0 3
63222: PUSH
63223: LD_INT 0
63225: ST_TO_ADDR
// end ;
63226: LD_VAR 0 3
63230: RET
// export function HealTarget ( sci ) ; begin
63231: LD_INT 0
63233: PPUSH
// if not sci then
63234: LD_VAR 0 1
63238: NOT
63239: IFFALSE 63243
// exit ;
63241: GO 63308
// result := 0 ;
63243: LD_ADDR_VAR 0 2
63247: PUSH
63248: LD_INT 0
63250: ST_TO_ADDR
// if GetTaskList ( sci ) then
63251: LD_VAR 0 1
63255: PPUSH
63256: CALL_OW 437
63260: IFFALSE 63308
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63262: LD_VAR 0 1
63266: PPUSH
63267: CALL_OW 437
63271: PUSH
63272: LD_INT 1
63274: ARRAY
63275: PUSH
63276: LD_INT 1
63278: ARRAY
63279: PUSH
63280: LD_STRING l
63282: EQUAL
63283: IFFALSE 63308
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63285: LD_ADDR_VAR 0 2
63289: PUSH
63290: LD_VAR 0 1
63294: PPUSH
63295: CALL_OW 437
63299: PUSH
63300: LD_INT 1
63302: ARRAY
63303: PUSH
63304: LD_INT 4
63306: ARRAY
63307: ST_TO_ADDR
// end ;
63308: LD_VAR 0 2
63312: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63313: LD_INT 0
63315: PPUSH
63316: PPUSH
63317: PPUSH
63318: PPUSH
// if not base_units then
63319: LD_VAR 0 1
63323: NOT
63324: IFFALSE 63328
// exit ;
63326: GO 63415
// result := false ;
63328: LD_ADDR_VAR 0 2
63332: PUSH
63333: LD_INT 0
63335: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63336: LD_ADDR_VAR 0 5
63340: PUSH
63341: LD_VAR 0 1
63345: PPUSH
63346: LD_INT 21
63348: PUSH
63349: LD_INT 3
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PPUSH
63356: CALL_OW 72
63360: ST_TO_ADDR
// if not tmp then
63361: LD_VAR 0 5
63365: NOT
63366: IFFALSE 63370
// exit ;
63368: GO 63415
// for i in tmp do
63370: LD_ADDR_VAR 0 3
63374: PUSH
63375: LD_VAR 0 5
63379: PUSH
63380: FOR_IN
63381: IFFALSE 63413
// begin result := EnemyInRange ( i , 22 ) ;
63383: LD_ADDR_VAR 0 2
63387: PUSH
63388: LD_VAR 0 3
63392: PPUSH
63393: LD_INT 22
63395: PPUSH
63396: CALL 61651 0 2
63400: ST_TO_ADDR
// if result then
63401: LD_VAR 0 2
63405: IFFALSE 63411
// exit ;
63407: POP
63408: POP
63409: GO 63415
// end ;
63411: GO 63380
63413: POP
63414: POP
// end ;
63415: LD_VAR 0 2
63419: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
63420: LD_INT 0
63422: PPUSH
63423: PPUSH
// if not units then
63424: LD_VAR 0 1
63428: NOT
63429: IFFALSE 63433
// exit ;
63431: GO 63503
// result := [ ] ;
63433: LD_ADDR_VAR 0 3
63437: PUSH
63438: EMPTY
63439: ST_TO_ADDR
// for i in units do
63440: LD_ADDR_VAR 0 4
63444: PUSH
63445: LD_VAR 0 1
63449: PUSH
63450: FOR_IN
63451: IFFALSE 63501
// if GetTag ( i ) = tag then
63453: LD_VAR 0 4
63457: PPUSH
63458: CALL_OW 110
63462: PUSH
63463: LD_VAR 0 2
63467: EQUAL
63468: IFFALSE 63499
// result := Insert ( result , result + 1 , i ) ;
63470: LD_ADDR_VAR 0 3
63474: PUSH
63475: LD_VAR 0 3
63479: PPUSH
63480: LD_VAR 0 3
63484: PUSH
63485: LD_INT 1
63487: PLUS
63488: PPUSH
63489: LD_VAR 0 4
63493: PPUSH
63494: CALL_OW 2
63498: ST_TO_ADDR
63499: GO 63450
63501: POP
63502: POP
// end ;
63503: LD_VAR 0 3
63507: RET
// export function IsDriver ( un ) ; begin
63508: LD_INT 0
63510: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63511: LD_ADDR_VAR 0 2
63515: PUSH
63516: LD_VAR 0 1
63520: PUSH
63521: LD_INT 55
63523: PUSH
63524: EMPTY
63525: LIST
63526: PPUSH
63527: CALL_OW 69
63531: IN
63532: ST_TO_ADDR
// end ;
63533: LD_VAR 0 2
63537: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63538: LD_INT 0
63540: PPUSH
63541: PPUSH
// list := [ ] ;
63542: LD_ADDR_VAR 0 5
63546: PUSH
63547: EMPTY
63548: ST_TO_ADDR
// case d of 0 :
63549: LD_VAR 0 3
63553: PUSH
63554: LD_INT 0
63556: DOUBLE
63557: EQUAL
63558: IFTRUE 63562
63560: GO 63695
63562: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63563: LD_ADDR_VAR 0 5
63567: PUSH
63568: LD_VAR 0 1
63572: PUSH
63573: LD_INT 4
63575: MINUS
63576: PUSH
63577: LD_VAR 0 2
63581: PUSH
63582: LD_INT 4
63584: MINUS
63585: PUSH
63586: LD_INT 2
63588: PUSH
63589: EMPTY
63590: LIST
63591: LIST
63592: LIST
63593: PUSH
63594: LD_VAR 0 1
63598: PUSH
63599: LD_INT 3
63601: MINUS
63602: PUSH
63603: LD_VAR 0 2
63607: PUSH
63608: LD_INT 1
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: LIST
63615: PUSH
63616: LD_VAR 0 1
63620: PUSH
63621: LD_INT 4
63623: PLUS
63624: PUSH
63625: LD_VAR 0 2
63629: PUSH
63630: LD_INT 4
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: LIST
63637: PUSH
63638: LD_VAR 0 1
63642: PUSH
63643: LD_INT 3
63645: PLUS
63646: PUSH
63647: LD_VAR 0 2
63651: PUSH
63652: LD_INT 3
63654: PLUS
63655: PUSH
63656: LD_INT 5
63658: PUSH
63659: EMPTY
63660: LIST
63661: LIST
63662: LIST
63663: PUSH
63664: LD_VAR 0 1
63668: PUSH
63669: LD_VAR 0 2
63673: PUSH
63674: LD_INT 4
63676: PLUS
63677: PUSH
63678: LD_INT 0
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: LIST
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: LIST
63690: LIST
63691: LIST
63692: ST_TO_ADDR
// end ; 1 :
63693: GO 64393
63695: LD_INT 1
63697: DOUBLE
63698: EQUAL
63699: IFTRUE 63703
63701: GO 63836
63703: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63704: LD_ADDR_VAR 0 5
63708: PUSH
63709: LD_VAR 0 1
63713: PUSH
63714: LD_VAR 0 2
63718: PUSH
63719: LD_INT 4
63721: MINUS
63722: PUSH
63723: LD_INT 3
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: LIST
63730: PUSH
63731: LD_VAR 0 1
63735: PUSH
63736: LD_INT 3
63738: MINUS
63739: PUSH
63740: LD_VAR 0 2
63744: PUSH
63745: LD_INT 3
63747: MINUS
63748: PUSH
63749: LD_INT 2
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: LIST
63756: PUSH
63757: LD_VAR 0 1
63761: PUSH
63762: LD_INT 4
63764: MINUS
63765: PUSH
63766: LD_VAR 0 2
63770: PUSH
63771: LD_INT 1
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: LIST
63778: PUSH
63779: LD_VAR 0 1
63783: PUSH
63784: LD_VAR 0 2
63788: PUSH
63789: LD_INT 3
63791: PLUS
63792: PUSH
63793: LD_INT 0
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: LIST
63800: PUSH
63801: LD_VAR 0 1
63805: PUSH
63806: LD_INT 4
63808: PLUS
63809: PUSH
63810: LD_VAR 0 2
63814: PUSH
63815: LD_INT 4
63817: PLUS
63818: PUSH
63819: LD_INT 5
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: LIST
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: LIST
63831: LIST
63832: LIST
63833: ST_TO_ADDR
// end ; 2 :
63834: GO 64393
63836: LD_INT 2
63838: DOUBLE
63839: EQUAL
63840: IFTRUE 63844
63842: GO 63973
63844: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63845: LD_ADDR_VAR 0 5
63849: PUSH
63850: LD_VAR 0 1
63854: PUSH
63855: LD_VAR 0 2
63859: PUSH
63860: LD_INT 3
63862: MINUS
63863: PUSH
63864: LD_INT 3
63866: PUSH
63867: EMPTY
63868: LIST
63869: LIST
63870: LIST
63871: PUSH
63872: LD_VAR 0 1
63876: PUSH
63877: LD_INT 4
63879: PLUS
63880: PUSH
63881: LD_VAR 0 2
63885: PUSH
63886: LD_INT 4
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: LIST
63893: PUSH
63894: LD_VAR 0 1
63898: PUSH
63899: LD_VAR 0 2
63903: PUSH
63904: LD_INT 4
63906: PLUS
63907: PUSH
63908: LD_INT 0
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: LIST
63915: PUSH
63916: LD_VAR 0 1
63920: PUSH
63921: LD_INT 3
63923: MINUS
63924: PUSH
63925: LD_VAR 0 2
63929: PUSH
63930: LD_INT 1
63932: PUSH
63933: EMPTY
63934: LIST
63935: LIST
63936: LIST
63937: PUSH
63938: LD_VAR 0 1
63942: PUSH
63943: LD_INT 4
63945: MINUS
63946: PUSH
63947: LD_VAR 0 2
63951: PUSH
63952: LD_INT 4
63954: MINUS
63955: PUSH
63956: LD_INT 2
63958: PUSH
63959: EMPTY
63960: LIST
63961: LIST
63962: LIST
63963: PUSH
63964: EMPTY
63965: LIST
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: ST_TO_ADDR
// end ; 3 :
63971: GO 64393
63973: LD_INT 3
63975: DOUBLE
63976: EQUAL
63977: IFTRUE 63981
63979: GO 64114
63981: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63982: LD_ADDR_VAR 0 5
63986: PUSH
63987: LD_VAR 0 1
63991: PUSH
63992: LD_INT 3
63994: PLUS
63995: PUSH
63996: LD_VAR 0 2
64000: PUSH
64001: LD_INT 4
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: LIST
64008: PUSH
64009: LD_VAR 0 1
64013: PUSH
64014: LD_INT 4
64016: PLUS
64017: PUSH
64018: LD_VAR 0 2
64022: PUSH
64023: LD_INT 4
64025: PLUS
64026: PUSH
64027: LD_INT 5
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: LIST
64034: PUSH
64035: LD_VAR 0 1
64039: PUSH
64040: LD_INT 4
64042: MINUS
64043: PUSH
64044: LD_VAR 0 2
64048: PUSH
64049: LD_INT 1
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: LIST
64056: PUSH
64057: LD_VAR 0 1
64061: PUSH
64062: LD_VAR 0 2
64066: PUSH
64067: LD_INT 4
64069: MINUS
64070: PUSH
64071: LD_INT 3
64073: PUSH
64074: EMPTY
64075: LIST
64076: LIST
64077: LIST
64078: PUSH
64079: LD_VAR 0 1
64083: PUSH
64084: LD_INT 3
64086: MINUS
64087: PUSH
64088: LD_VAR 0 2
64092: PUSH
64093: LD_INT 3
64095: MINUS
64096: PUSH
64097: LD_INT 2
64099: PUSH
64100: EMPTY
64101: LIST
64102: LIST
64103: LIST
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: LIST
64111: ST_TO_ADDR
// end ; 4 :
64112: GO 64393
64114: LD_INT 4
64116: DOUBLE
64117: EQUAL
64118: IFTRUE 64122
64120: GO 64255
64122: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64123: LD_ADDR_VAR 0 5
64127: PUSH
64128: LD_VAR 0 1
64132: PUSH
64133: LD_VAR 0 2
64137: PUSH
64138: LD_INT 4
64140: PLUS
64141: PUSH
64142: LD_INT 0
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: LIST
64149: PUSH
64150: LD_VAR 0 1
64154: PUSH
64155: LD_INT 3
64157: PLUS
64158: PUSH
64159: LD_VAR 0 2
64163: PUSH
64164: LD_INT 3
64166: PLUS
64167: PUSH
64168: LD_INT 5
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: LIST
64175: PUSH
64176: LD_VAR 0 1
64180: PUSH
64181: LD_INT 4
64183: PLUS
64184: PUSH
64185: LD_VAR 0 2
64189: PUSH
64190: LD_INT 4
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: LIST
64197: PUSH
64198: LD_VAR 0 1
64202: PUSH
64203: LD_VAR 0 2
64207: PUSH
64208: LD_INT 3
64210: MINUS
64211: PUSH
64212: LD_INT 3
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: LIST
64219: PUSH
64220: LD_VAR 0 1
64224: PUSH
64225: LD_INT 4
64227: MINUS
64228: PUSH
64229: LD_VAR 0 2
64233: PUSH
64234: LD_INT 4
64236: MINUS
64237: PUSH
64238: LD_INT 2
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: LIST
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: LIST
64250: LIST
64251: LIST
64252: ST_TO_ADDR
// end ; 5 :
64253: GO 64393
64255: LD_INT 5
64257: DOUBLE
64258: EQUAL
64259: IFTRUE 64263
64261: GO 64392
64263: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64264: LD_ADDR_VAR 0 5
64268: PUSH
64269: LD_VAR 0 1
64273: PUSH
64274: LD_INT 4
64276: MINUS
64277: PUSH
64278: LD_VAR 0 2
64282: PUSH
64283: LD_INT 1
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: LIST
64290: PUSH
64291: LD_VAR 0 1
64295: PUSH
64296: LD_VAR 0 2
64300: PUSH
64301: LD_INT 4
64303: MINUS
64304: PUSH
64305: LD_INT 3
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: LIST
64312: PUSH
64313: LD_VAR 0 1
64317: PUSH
64318: LD_INT 4
64320: PLUS
64321: PUSH
64322: LD_VAR 0 2
64326: PUSH
64327: LD_INT 4
64329: PLUS
64330: PUSH
64331: LD_INT 5
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: LIST
64338: PUSH
64339: LD_VAR 0 1
64343: PUSH
64344: LD_INT 3
64346: PLUS
64347: PUSH
64348: LD_VAR 0 2
64352: PUSH
64353: LD_INT 4
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: LIST
64360: PUSH
64361: LD_VAR 0 1
64365: PUSH
64366: LD_VAR 0 2
64370: PUSH
64371: LD_INT 3
64373: PLUS
64374: PUSH
64375: LD_INT 0
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: LIST
64382: PUSH
64383: EMPTY
64384: LIST
64385: LIST
64386: LIST
64387: LIST
64388: LIST
64389: ST_TO_ADDR
// end ; end ;
64390: GO 64393
64392: POP
// result := list ;
64393: LD_ADDR_VAR 0 4
64397: PUSH
64398: LD_VAR 0 5
64402: ST_TO_ADDR
// end ;
64403: LD_VAR 0 4
64407: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64408: LD_INT 0
64410: PPUSH
64411: PPUSH
64412: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64413: LD_VAR 0 1
64417: NOT
64418: PUSH
64419: LD_VAR 0 2
64423: PUSH
64424: LD_INT 1
64426: PUSH
64427: LD_INT 2
64429: PUSH
64430: LD_INT 3
64432: PUSH
64433: LD_INT 4
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: IN
64442: NOT
64443: OR
64444: IFFALSE 64448
// exit ;
64446: GO 64540
// tmp := [ ] ;
64448: LD_ADDR_VAR 0 5
64452: PUSH
64453: EMPTY
64454: ST_TO_ADDR
// for i in units do
64455: LD_ADDR_VAR 0 4
64459: PUSH
64460: LD_VAR 0 1
64464: PUSH
64465: FOR_IN
64466: IFFALSE 64509
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
64468: LD_ADDR_VAR 0 5
64472: PUSH
64473: LD_VAR 0 5
64477: PPUSH
64478: LD_VAR 0 5
64482: PUSH
64483: LD_INT 1
64485: PLUS
64486: PPUSH
64487: LD_VAR 0 4
64491: PPUSH
64492: LD_VAR 0 2
64496: PPUSH
64497: CALL_OW 259
64501: PPUSH
64502: CALL_OW 2
64506: ST_TO_ADDR
64507: GO 64465
64509: POP
64510: POP
// if not tmp then
64511: LD_VAR 0 5
64515: NOT
64516: IFFALSE 64520
// exit ;
64518: GO 64540
// result := SortListByListDesc ( units , tmp ) ;
64520: LD_ADDR_VAR 0 3
64524: PUSH
64525: LD_VAR 0 1
64529: PPUSH
64530: LD_VAR 0 5
64534: PPUSH
64535: CALL_OW 77
64539: ST_TO_ADDR
// end ;
64540: LD_VAR 0 3
64544: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64545: LD_INT 0
64547: PPUSH
64548: PPUSH
64549: PPUSH
// result := false ;
64550: LD_ADDR_VAR 0 3
64554: PUSH
64555: LD_INT 0
64557: ST_TO_ADDR
// x := GetX ( building ) ;
64558: LD_ADDR_VAR 0 4
64562: PUSH
64563: LD_VAR 0 2
64567: PPUSH
64568: CALL_OW 250
64572: ST_TO_ADDR
// y := GetY ( building ) ;
64573: LD_ADDR_VAR 0 5
64577: PUSH
64578: LD_VAR 0 2
64582: PPUSH
64583: CALL_OW 251
64587: ST_TO_ADDR
// if not building or not x or not y then
64588: LD_VAR 0 2
64592: NOT
64593: PUSH
64594: LD_VAR 0 4
64598: NOT
64599: OR
64600: PUSH
64601: LD_VAR 0 5
64605: NOT
64606: OR
64607: IFFALSE 64611
// exit ;
64609: GO 64703
// if GetTaskList ( unit ) then
64611: LD_VAR 0 1
64615: PPUSH
64616: CALL_OW 437
64620: IFFALSE 64703
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64622: LD_STRING e
64624: PUSH
64625: LD_VAR 0 1
64629: PPUSH
64630: CALL_OW 437
64634: PUSH
64635: LD_INT 1
64637: ARRAY
64638: PUSH
64639: LD_INT 1
64641: ARRAY
64642: EQUAL
64643: PUSH
64644: LD_VAR 0 4
64648: PUSH
64649: LD_VAR 0 1
64653: PPUSH
64654: CALL_OW 437
64658: PUSH
64659: LD_INT 1
64661: ARRAY
64662: PUSH
64663: LD_INT 2
64665: ARRAY
64666: EQUAL
64667: AND
64668: PUSH
64669: LD_VAR 0 5
64673: PUSH
64674: LD_VAR 0 1
64678: PPUSH
64679: CALL_OW 437
64683: PUSH
64684: LD_INT 1
64686: ARRAY
64687: PUSH
64688: LD_INT 3
64690: ARRAY
64691: EQUAL
64692: AND
64693: IFFALSE 64703
// result := true end ;
64695: LD_ADDR_VAR 0 3
64699: PUSH
64700: LD_INT 1
64702: ST_TO_ADDR
// end ;
64703: LD_VAR 0 3
64707: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64708: LD_INT 0
64710: PPUSH
// result := false ;
64711: LD_ADDR_VAR 0 4
64715: PUSH
64716: LD_INT 0
64718: ST_TO_ADDR
// if GetTaskList ( unit ) then
64719: LD_VAR 0 1
64723: PPUSH
64724: CALL_OW 437
64728: IFFALSE 64811
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64730: LD_STRING M
64732: PUSH
64733: LD_VAR 0 1
64737: PPUSH
64738: CALL_OW 437
64742: PUSH
64743: LD_INT 1
64745: ARRAY
64746: PUSH
64747: LD_INT 1
64749: ARRAY
64750: EQUAL
64751: PUSH
64752: LD_VAR 0 2
64756: PUSH
64757: LD_VAR 0 1
64761: PPUSH
64762: CALL_OW 437
64766: PUSH
64767: LD_INT 1
64769: ARRAY
64770: PUSH
64771: LD_INT 2
64773: ARRAY
64774: EQUAL
64775: AND
64776: PUSH
64777: LD_VAR 0 3
64781: PUSH
64782: LD_VAR 0 1
64786: PPUSH
64787: CALL_OW 437
64791: PUSH
64792: LD_INT 1
64794: ARRAY
64795: PUSH
64796: LD_INT 3
64798: ARRAY
64799: EQUAL
64800: AND
64801: IFFALSE 64811
// result := true ;
64803: LD_ADDR_VAR 0 4
64807: PUSH
64808: LD_INT 1
64810: ST_TO_ADDR
// end ; end ;
64811: LD_VAR 0 4
64815: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64816: LD_INT 0
64818: PPUSH
64819: PPUSH
64820: PPUSH
64821: PPUSH
// if not unit or not area then
64822: LD_VAR 0 1
64826: NOT
64827: PUSH
64828: LD_VAR 0 2
64832: NOT
64833: OR
64834: IFFALSE 64838
// exit ;
64836: GO 65002
// tmp := AreaToList ( area , i ) ;
64838: LD_ADDR_VAR 0 6
64842: PUSH
64843: LD_VAR 0 2
64847: PPUSH
64848: LD_VAR 0 5
64852: PPUSH
64853: CALL_OW 517
64857: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64858: LD_ADDR_VAR 0 5
64862: PUSH
64863: DOUBLE
64864: LD_INT 1
64866: DEC
64867: ST_TO_ADDR
64868: LD_VAR 0 6
64872: PUSH
64873: LD_INT 1
64875: ARRAY
64876: PUSH
64877: FOR_TO
64878: IFFALSE 65000
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64880: LD_ADDR_VAR 0 7
64884: PUSH
64885: LD_VAR 0 6
64889: PUSH
64890: LD_INT 1
64892: ARRAY
64893: PUSH
64894: LD_VAR 0 5
64898: ARRAY
64899: PUSH
64900: LD_VAR 0 6
64904: PUSH
64905: LD_INT 2
64907: ARRAY
64908: PUSH
64909: LD_VAR 0 5
64913: ARRAY
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
64919: LD_VAR 0 7
64923: PUSH
64924: LD_INT 1
64926: ARRAY
64927: PPUSH
64928: LD_VAR 0 7
64932: PUSH
64933: LD_INT 2
64935: ARRAY
64936: PPUSH
64937: CALL_OW 428
64941: PUSH
64942: LD_INT 0
64944: EQUAL
64945: IFFALSE 64998
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64947: LD_VAR 0 1
64951: PPUSH
64952: LD_VAR 0 7
64956: PUSH
64957: LD_INT 1
64959: ARRAY
64960: PPUSH
64961: LD_VAR 0 7
64965: PUSH
64966: LD_INT 2
64968: ARRAY
64969: PPUSH
64970: LD_VAR 0 3
64974: PPUSH
64975: CALL_OW 48
// result := IsPlaced ( unit ) ;
64979: LD_ADDR_VAR 0 4
64983: PUSH
64984: LD_VAR 0 1
64988: PPUSH
64989: CALL_OW 305
64993: ST_TO_ADDR
// exit ;
64994: POP
64995: POP
64996: GO 65002
// end ; end ;
64998: GO 64877
65000: POP
65001: POP
// end ;
65002: LD_VAR 0 4
65006: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65007: LD_INT 0
65009: PPUSH
65010: PPUSH
65011: PPUSH
// if not side or side > 8 then
65012: LD_VAR 0 1
65016: NOT
65017: PUSH
65018: LD_VAR 0 1
65022: PUSH
65023: LD_INT 8
65025: GREATER
65026: OR
65027: IFFALSE 65031
// exit ;
65029: GO 65218
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65031: LD_ADDR_VAR 0 4
65035: PUSH
65036: LD_INT 22
65038: PUSH
65039: LD_VAR 0 1
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: PUSH
65048: LD_INT 21
65050: PUSH
65051: LD_INT 3
65053: PUSH
65054: EMPTY
65055: LIST
65056: LIST
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: PPUSH
65062: CALL_OW 69
65066: ST_TO_ADDR
// if not tmp then
65067: LD_VAR 0 4
65071: NOT
65072: IFFALSE 65076
// exit ;
65074: GO 65218
// enable_addtolog := true ;
65076: LD_ADDR_OWVAR 81
65080: PUSH
65081: LD_INT 1
65083: ST_TO_ADDR
// AddToLog ( [ ) ;
65084: LD_STRING [
65086: PPUSH
65087: CALL_OW 561
// for i in tmp do
65091: LD_ADDR_VAR 0 3
65095: PUSH
65096: LD_VAR 0 4
65100: PUSH
65101: FOR_IN
65102: IFFALSE 65209
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65104: LD_STRING [
65106: PUSH
65107: LD_VAR 0 3
65111: PPUSH
65112: CALL_OW 266
65116: STR
65117: PUSH
65118: LD_STRING , 
65120: STR
65121: PUSH
65122: LD_VAR 0 3
65126: PPUSH
65127: CALL_OW 250
65131: STR
65132: PUSH
65133: LD_STRING , 
65135: STR
65136: PUSH
65137: LD_VAR 0 3
65141: PPUSH
65142: CALL_OW 251
65146: STR
65147: PUSH
65148: LD_STRING , 
65150: STR
65151: PUSH
65152: LD_VAR 0 3
65156: PPUSH
65157: CALL_OW 254
65161: STR
65162: PUSH
65163: LD_STRING , 
65165: STR
65166: PUSH
65167: LD_VAR 0 3
65171: PPUSH
65172: LD_INT 1
65174: PPUSH
65175: CALL_OW 268
65179: STR
65180: PUSH
65181: LD_STRING , 
65183: STR
65184: PUSH
65185: LD_VAR 0 3
65189: PPUSH
65190: LD_INT 2
65192: PPUSH
65193: CALL_OW 268
65197: STR
65198: PUSH
65199: LD_STRING ],
65201: STR
65202: PPUSH
65203: CALL_OW 561
// end ;
65207: GO 65101
65209: POP
65210: POP
// AddToLog ( ]; ) ;
65211: LD_STRING ];
65213: PPUSH
65214: CALL_OW 561
// end ;
65218: LD_VAR 0 2
65222: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65223: LD_INT 0
65225: PPUSH
65226: PPUSH
65227: PPUSH
65228: PPUSH
65229: PPUSH
// if not area or not rate or not max then
65230: LD_VAR 0 1
65234: NOT
65235: PUSH
65236: LD_VAR 0 2
65240: NOT
65241: OR
65242: PUSH
65243: LD_VAR 0 4
65247: NOT
65248: OR
65249: IFFALSE 65253
// exit ;
65251: GO 65445
// while 1 do
65253: LD_INT 1
65255: IFFALSE 65445
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65257: LD_ADDR_VAR 0 9
65261: PUSH
65262: LD_VAR 0 1
65266: PPUSH
65267: LD_INT 1
65269: PPUSH
65270: CALL_OW 287
65274: PUSH
65275: LD_INT 10
65277: MUL
65278: ST_TO_ADDR
// r := rate / 10 ;
65279: LD_ADDR_VAR 0 7
65283: PUSH
65284: LD_VAR 0 2
65288: PUSH
65289: LD_INT 10
65291: DIVREAL
65292: ST_TO_ADDR
// time := 1 1$00 ;
65293: LD_ADDR_VAR 0 8
65297: PUSH
65298: LD_INT 2100
65300: ST_TO_ADDR
// if amount < min then
65301: LD_VAR 0 9
65305: PUSH
65306: LD_VAR 0 3
65310: LESS
65311: IFFALSE 65329
// r := r * 2 else
65313: LD_ADDR_VAR 0 7
65317: PUSH
65318: LD_VAR 0 7
65322: PUSH
65323: LD_INT 2
65325: MUL
65326: ST_TO_ADDR
65327: GO 65355
// if amount > max then
65329: LD_VAR 0 9
65333: PUSH
65334: LD_VAR 0 4
65338: GREATER
65339: IFFALSE 65355
// r := r / 2 ;
65341: LD_ADDR_VAR 0 7
65345: PUSH
65346: LD_VAR 0 7
65350: PUSH
65351: LD_INT 2
65353: DIVREAL
65354: ST_TO_ADDR
// time := time / r ;
65355: LD_ADDR_VAR 0 8
65359: PUSH
65360: LD_VAR 0 8
65364: PUSH
65365: LD_VAR 0 7
65369: DIVREAL
65370: ST_TO_ADDR
// if time < 0 then
65371: LD_VAR 0 8
65375: PUSH
65376: LD_INT 0
65378: LESS
65379: IFFALSE 65396
// time := time * - 1 ;
65381: LD_ADDR_VAR 0 8
65385: PUSH
65386: LD_VAR 0 8
65390: PUSH
65391: LD_INT 1
65393: NEG
65394: MUL
65395: ST_TO_ADDR
// wait ( time ) ;
65396: LD_VAR 0 8
65400: PPUSH
65401: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
65405: LD_INT 35
65407: PPUSH
65408: LD_INT 875
65410: PPUSH
65411: CALL_OW 12
65415: PPUSH
65416: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65420: LD_INT 1
65422: PPUSH
65423: LD_INT 5
65425: PPUSH
65426: CALL_OW 12
65430: PPUSH
65431: LD_VAR 0 1
65435: PPUSH
65436: LD_INT 1
65438: PPUSH
65439: CALL_OW 55
// end ;
65443: GO 65253
// end ;
65445: LD_VAR 0 5
65449: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65450: LD_INT 0
65452: PPUSH
65453: PPUSH
65454: PPUSH
65455: PPUSH
65456: PPUSH
65457: PPUSH
65458: PPUSH
65459: PPUSH
// if not turrets or not factories then
65460: LD_VAR 0 1
65464: NOT
65465: PUSH
65466: LD_VAR 0 2
65470: NOT
65471: OR
65472: IFFALSE 65476
// exit ;
65474: GO 65783
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65476: LD_ADDR_VAR 0 10
65480: PUSH
65481: LD_INT 5
65483: PUSH
65484: LD_INT 6
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: PUSH
65491: LD_INT 2
65493: PUSH
65494: LD_INT 4
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: PUSH
65501: LD_INT 3
65503: PUSH
65504: LD_INT 5
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: LIST
65515: PUSH
65516: LD_INT 24
65518: PUSH
65519: LD_INT 25
65521: PUSH
65522: EMPTY
65523: LIST
65524: LIST
65525: PUSH
65526: LD_INT 23
65528: PUSH
65529: LD_INT 27
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: PUSH
65540: LD_INT 42
65542: PUSH
65543: LD_INT 43
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: PUSH
65550: LD_INT 44
65552: PUSH
65553: LD_INT 46
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: PUSH
65560: LD_INT 45
65562: PUSH
65563: LD_INT 47
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: LIST
65574: PUSH
65575: EMPTY
65576: LIST
65577: LIST
65578: LIST
65579: ST_TO_ADDR
// result := [ ] ;
65580: LD_ADDR_VAR 0 3
65584: PUSH
65585: EMPTY
65586: ST_TO_ADDR
// for i in turrets do
65587: LD_ADDR_VAR 0 4
65591: PUSH
65592: LD_VAR 0 1
65596: PUSH
65597: FOR_IN
65598: IFFALSE 65781
// begin nat := GetNation ( i ) ;
65600: LD_ADDR_VAR 0 7
65604: PUSH
65605: LD_VAR 0 4
65609: PPUSH
65610: CALL_OW 248
65614: ST_TO_ADDR
// weapon := 0 ;
65615: LD_ADDR_VAR 0 8
65619: PUSH
65620: LD_INT 0
65622: ST_TO_ADDR
// if not nat then
65623: LD_VAR 0 7
65627: NOT
65628: IFFALSE 65632
// continue ;
65630: GO 65597
// for j in list [ nat ] do
65632: LD_ADDR_VAR 0 5
65636: PUSH
65637: LD_VAR 0 10
65641: PUSH
65642: LD_VAR 0 7
65646: ARRAY
65647: PUSH
65648: FOR_IN
65649: IFFALSE 65690
// if GetBWeapon ( i ) = j [ 1 ] then
65651: LD_VAR 0 4
65655: PPUSH
65656: CALL_OW 269
65660: PUSH
65661: LD_VAR 0 5
65665: PUSH
65666: LD_INT 1
65668: ARRAY
65669: EQUAL
65670: IFFALSE 65688
// begin weapon := j [ 2 ] ;
65672: LD_ADDR_VAR 0 8
65676: PUSH
65677: LD_VAR 0 5
65681: PUSH
65682: LD_INT 2
65684: ARRAY
65685: ST_TO_ADDR
// break ;
65686: GO 65690
// end ;
65688: GO 65648
65690: POP
65691: POP
// if not weapon then
65692: LD_VAR 0 8
65696: NOT
65697: IFFALSE 65701
// continue ;
65699: GO 65597
// for k in factories do
65701: LD_ADDR_VAR 0 6
65705: PUSH
65706: LD_VAR 0 2
65710: PUSH
65711: FOR_IN
65712: IFFALSE 65777
// begin weapons := AvailableWeaponList ( k ) ;
65714: LD_ADDR_VAR 0 9
65718: PUSH
65719: LD_VAR 0 6
65723: PPUSH
65724: CALL_OW 478
65728: ST_TO_ADDR
// if not weapons then
65729: LD_VAR 0 9
65733: NOT
65734: IFFALSE 65738
// continue ;
65736: GO 65711
// if weapon in weapons then
65738: LD_VAR 0 8
65742: PUSH
65743: LD_VAR 0 9
65747: IN
65748: IFFALSE 65775
// begin result := [ i , weapon ] ;
65750: LD_ADDR_VAR 0 3
65754: PUSH
65755: LD_VAR 0 4
65759: PUSH
65760: LD_VAR 0 8
65764: PUSH
65765: EMPTY
65766: LIST
65767: LIST
65768: ST_TO_ADDR
// exit ;
65769: POP
65770: POP
65771: POP
65772: POP
65773: GO 65783
// end ; end ;
65775: GO 65711
65777: POP
65778: POP
// end ;
65779: GO 65597
65781: POP
65782: POP
// end ;
65783: LD_VAR 0 3
65787: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65788: LD_INT 0
65790: PPUSH
// if not side or side > 8 then
65791: LD_VAR 0 3
65795: NOT
65796: PUSH
65797: LD_VAR 0 3
65801: PUSH
65802: LD_INT 8
65804: GREATER
65805: OR
65806: IFFALSE 65810
// exit ;
65808: GO 65869
// if not range then
65810: LD_VAR 0 4
65814: NOT
65815: IFFALSE 65826
// range := - 12 ;
65817: LD_ADDR_VAR 0 4
65821: PUSH
65822: LD_INT 12
65824: NEG
65825: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65826: LD_VAR 0 1
65830: PPUSH
65831: LD_VAR 0 2
65835: PPUSH
65836: LD_VAR 0 3
65840: PPUSH
65841: LD_VAR 0 4
65845: PPUSH
65846: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65850: LD_VAR 0 1
65854: PPUSH
65855: LD_VAR 0 2
65859: PPUSH
65860: LD_VAR 0 3
65864: PPUSH
65865: CALL_OW 331
// end ;
65869: LD_VAR 0 5
65873: RET
// export function Video ( mode ) ; begin
65874: LD_INT 0
65876: PPUSH
// ingame_video = mode ;
65877: LD_ADDR_OWVAR 52
65881: PUSH
65882: LD_VAR 0 1
65886: ST_TO_ADDR
// interface_hidden = mode ;
65887: LD_ADDR_OWVAR 54
65891: PUSH
65892: LD_VAR 0 1
65896: ST_TO_ADDR
// end ;
65897: LD_VAR 0 2
65901: RET
// export function Join ( array , element ) ; begin
65902: LD_INT 0
65904: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65905: LD_ADDR_VAR 0 3
65909: PUSH
65910: LD_VAR 0 1
65914: PPUSH
65915: LD_VAR 0 1
65919: PUSH
65920: LD_INT 1
65922: PLUS
65923: PPUSH
65924: LD_VAR 0 2
65928: PPUSH
65929: CALL_OW 1
65933: ST_TO_ADDR
// end ;
65934: LD_VAR 0 3
65938: RET
// export function JoinUnion ( array , element ) ; begin
65939: LD_INT 0
65941: PPUSH
// result := array union element ;
65942: LD_ADDR_VAR 0 3
65946: PUSH
65947: LD_VAR 0 1
65951: PUSH
65952: LD_VAR 0 2
65956: UNION
65957: ST_TO_ADDR
// end ;
65958: LD_VAR 0 3
65962: RET
// export function GetBehemoths ( side ) ; begin
65963: LD_INT 0
65965: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
65966: LD_ADDR_VAR 0 2
65970: PUSH
65971: LD_INT 22
65973: PUSH
65974: LD_VAR 0 1
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: PUSH
65983: LD_INT 31
65985: PUSH
65986: LD_INT 25
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: EMPTY
65994: LIST
65995: LIST
65996: PPUSH
65997: CALL_OW 69
66001: ST_TO_ADDR
// end ;
66002: LD_VAR 0 2
66006: RET
// export function Shuffle ( array ) ; var i , index ; begin
66007: LD_INT 0
66009: PPUSH
66010: PPUSH
66011: PPUSH
// result := [ ] ;
66012: LD_ADDR_VAR 0 2
66016: PUSH
66017: EMPTY
66018: ST_TO_ADDR
// if not array then
66019: LD_VAR 0 1
66023: NOT
66024: IFFALSE 66028
// exit ;
66026: GO 66127
// Randomize ;
66028: CALL_OW 10
// for i = array downto 1 do
66032: LD_ADDR_VAR 0 3
66036: PUSH
66037: DOUBLE
66038: LD_VAR 0 1
66042: INC
66043: ST_TO_ADDR
66044: LD_INT 1
66046: PUSH
66047: FOR_DOWNTO
66048: IFFALSE 66125
// begin index := rand ( 1 , array ) ;
66050: LD_ADDR_VAR 0 4
66054: PUSH
66055: LD_INT 1
66057: PPUSH
66058: LD_VAR 0 1
66062: PPUSH
66063: CALL_OW 12
66067: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66068: LD_ADDR_VAR 0 2
66072: PUSH
66073: LD_VAR 0 2
66077: PPUSH
66078: LD_VAR 0 2
66082: PUSH
66083: LD_INT 1
66085: PLUS
66086: PPUSH
66087: LD_VAR 0 1
66091: PUSH
66092: LD_VAR 0 4
66096: ARRAY
66097: PPUSH
66098: CALL_OW 2
66102: ST_TO_ADDR
// array := Delete ( array , index ) ;
66103: LD_ADDR_VAR 0 1
66107: PUSH
66108: LD_VAR 0 1
66112: PPUSH
66113: LD_VAR 0 4
66117: PPUSH
66118: CALL_OW 3
66122: ST_TO_ADDR
// end ;
66123: GO 66047
66125: POP
66126: POP
// end ;
66127: LD_VAR 0 2
66131: RET
// export function GetBaseMaterials ( base ) ; begin
66132: LD_INT 0
66134: PPUSH
// result := [ 0 , 0 , 0 ] ;
66135: LD_ADDR_VAR 0 2
66139: PUSH
66140: LD_INT 0
66142: PUSH
66143: LD_INT 0
66145: PUSH
66146: LD_INT 0
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: LIST
66153: ST_TO_ADDR
// if not base then
66154: LD_VAR 0 1
66158: NOT
66159: IFFALSE 66163
// exit ;
66161: GO 66212
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66163: LD_ADDR_VAR 0 2
66167: PUSH
66168: LD_VAR 0 1
66172: PPUSH
66173: LD_INT 1
66175: PPUSH
66176: CALL_OW 275
66180: PUSH
66181: LD_VAR 0 1
66185: PPUSH
66186: LD_INT 2
66188: PPUSH
66189: CALL_OW 275
66193: PUSH
66194: LD_VAR 0 1
66198: PPUSH
66199: LD_INT 3
66201: PPUSH
66202: CALL_OW 275
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: LIST
66211: ST_TO_ADDR
// end ;
66212: LD_VAR 0 2
66216: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66217: LD_INT 0
66219: PPUSH
66220: PPUSH
// result := array ;
66221: LD_ADDR_VAR 0 3
66225: PUSH
66226: LD_VAR 0 1
66230: ST_TO_ADDR
// if size > 0 then
66231: LD_VAR 0 2
66235: PUSH
66236: LD_INT 0
66238: GREATER
66239: IFFALSE 66285
// for i := array downto size do
66241: LD_ADDR_VAR 0 4
66245: PUSH
66246: DOUBLE
66247: LD_VAR 0 1
66251: INC
66252: ST_TO_ADDR
66253: LD_VAR 0 2
66257: PUSH
66258: FOR_DOWNTO
66259: IFFALSE 66283
// result := Delete ( result , result ) ;
66261: LD_ADDR_VAR 0 3
66265: PUSH
66266: LD_VAR 0 3
66270: PPUSH
66271: LD_VAR 0 3
66275: PPUSH
66276: CALL_OW 3
66280: ST_TO_ADDR
66281: GO 66258
66283: POP
66284: POP
// end ;
66285: LD_VAR 0 3
66289: RET
// export function ComExit ( unit ) ; var tmp ; begin
66290: LD_INT 0
66292: PPUSH
66293: PPUSH
// if not IsInUnit ( unit ) then
66294: LD_VAR 0 1
66298: PPUSH
66299: CALL_OW 310
66303: NOT
66304: IFFALSE 66308
// exit ;
66306: GO 66368
// tmp := IsInUnit ( unit ) ;
66308: LD_ADDR_VAR 0 3
66312: PUSH
66313: LD_VAR 0 1
66317: PPUSH
66318: CALL_OW 310
66322: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66323: LD_VAR 0 3
66327: PPUSH
66328: CALL_OW 247
66332: PUSH
66333: LD_INT 2
66335: EQUAL
66336: IFFALSE 66349
// ComExitVehicle ( unit ) else
66338: LD_VAR 0 1
66342: PPUSH
66343: CALL_OW 121
66347: GO 66358
// ComExitBuilding ( unit ) ;
66349: LD_VAR 0 1
66353: PPUSH
66354: CALL_OW 122
// result := tmp ;
66358: LD_ADDR_VAR 0 2
66362: PUSH
66363: LD_VAR 0 3
66367: ST_TO_ADDR
// end ;
66368: LD_VAR 0 2
66372: RET
// export function ComExitAll ( units ) ; var i ; begin
66373: LD_INT 0
66375: PPUSH
66376: PPUSH
// if not units then
66377: LD_VAR 0 1
66381: NOT
66382: IFFALSE 66386
// exit ;
66384: GO 66412
// for i in units do
66386: LD_ADDR_VAR 0 3
66390: PUSH
66391: LD_VAR 0 1
66395: PUSH
66396: FOR_IN
66397: IFFALSE 66410
// ComExit ( i ) ;
66399: LD_VAR 0 3
66403: PPUSH
66404: CALL 66290 0 1
66408: GO 66396
66410: POP
66411: POP
// end ;
66412: LD_VAR 0 2
66416: RET
// export function ResetHc ; begin
66417: LD_INT 0
66419: PPUSH
// InitHc ;
66420: CALL_OW 19
// hc_importance := 0 ;
66424: LD_ADDR_OWVAR 32
66428: PUSH
66429: LD_INT 0
66431: ST_TO_ADDR
// end ;
66432: LD_VAR 0 1
66436: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66437: LD_INT 0
66439: PPUSH
66440: PPUSH
66441: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66442: LD_ADDR_VAR 0 6
66446: PUSH
66447: LD_VAR 0 1
66451: PUSH
66452: LD_VAR 0 3
66456: PLUS
66457: PUSH
66458: LD_INT 2
66460: DIV
66461: ST_TO_ADDR
// if _x < 0 then
66462: LD_VAR 0 6
66466: PUSH
66467: LD_INT 0
66469: LESS
66470: IFFALSE 66487
// _x := _x * - 1 ;
66472: LD_ADDR_VAR 0 6
66476: PUSH
66477: LD_VAR 0 6
66481: PUSH
66482: LD_INT 1
66484: NEG
66485: MUL
66486: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66487: LD_ADDR_VAR 0 7
66491: PUSH
66492: LD_VAR 0 2
66496: PUSH
66497: LD_VAR 0 4
66501: PLUS
66502: PUSH
66503: LD_INT 2
66505: DIV
66506: ST_TO_ADDR
// if _y < 0 then
66507: LD_VAR 0 7
66511: PUSH
66512: LD_INT 0
66514: LESS
66515: IFFALSE 66532
// _y := _y * - 1 ;
66517: LD_ADDR_VAR 0 7
66521: PUSH
66522: LD_VAR 0 7
66526: PUSH
66527: LD_INT 1
66529: NEG
66530: MUL
66531: ST_TO_ADDR
// result := [ _x , _y ] ;
66532: LD_ADDR_VAR 0 5
66536: PUSH
66537: LD_VAR 0 6
66541: PUSH
66542: LD_VAR 0 7
66546: PUSH
66547: EMPTY
66548: LIST
66549: LIST
66550: ST_TO_ADDR
// end ;
66551: LD_VAR 0 5
66555: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66556: LD_INT 0
66558: PPUSH
66559: PPUSH
66560: PPUSH
66561: PPUSH
// task := GetTaskList ( unit ) ;
66562: LD_ADDR_VAR 0 7
66566: PUSH
66567: LD_VAR 0 1
66571: PPUSH
66572: CALL_OW 437
66576: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66577: LD_VAR 0 7
66581: NOT
66582: PUSH
66583: LD_VAR 0 1
66587: PPUSH
66588: LD_VAR 0 2
66592: PPUSH
66593: CALL_OW 308
66597: NOT
66598: AND
66599: IFFALSE 66603
// exit ;
66601: GO 66721
// if IsInArea ( unit , area ) then
66603: LD_VAR 0 1
66607: PPUSH
66608: LD_VAR 0 2
66612: PPUSH
66613: CALL_OW 308
66617: IFFALSE 66635
// begin ComMoveToArea ( unit , goAway ) ;
66619: LD_VAR 0 1
66623: PPUSH
66624: LD_VAR 0 3
66628: PPUSH
66629: CALL_OW 113
// exit ;
66633: GO 66721
// end ; if task [ 1 ] [ 1 ] <> M then
66635: LD_VAR 0 7
66639: PUSH
66640: LD_INT 1
66642: ARRAY
66643: PUSH
66644: LD_INT 1
66646: ARRAY
66647: PUSH
66648: LD_STRING M
66650: NONEQUAL
66651: IFFALSE 66655
// exit ;
66653: GO 66721
// x := task [ 1 ] [ 2 ] ;
66655: LD_ADDR_VAR 0 5
66659: PUSH
66660: LD_VAR 0 7
66664: PUSH
66665: LD_INT 1
66667: ARRAY
66668: PUSH
66669: LD_INT 2
66671: ARRAY
66672: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66673: LD_ADDR_VAR 0 6
66677: PUSH
66678: LD_VAR 0 7
66682: PUSH
66683: LD_INT 1
66685: ARRAY
66686: PUSH
66687: LD_INT 3
66689: ARRAY
66690: ST_TO_ADDR
// if InArea ( x , y , area ) then
66691: LD_VAR 0 5
66695: PPUSH
66696: LD_VAR 0 6
66700: PPUSH
66701: LD_VAR 0 2
66705: PPUSH
66706: CALL_OW 309
66710: IFFALSE 66721
// ComStop ( unit ) ;
66712: LD_VAR 0 1
66716: PPUSH
66717: CALL_OW 141
// end ;
66721: LD_VAR 0 4
66725: RET
// export function Abs ( value ) ; begin
66726: LD_INT 0
66728: PPUSH
// result := value ;
66729: LD_ADDR_VAR 0 2
66733: PUSH
66734: LD_VAR 0 1
66738: ST_TO_ADDR
// if value < 0 then
66739: LD_VAR 0 1
66743: PUSH
66744: LD_INT 0
66746: LESS
66747: IFFALSE 66764
// result := value * - 1 ;
66749: LD_ADDR_VAR 0 2
66753: PUSH
66754: LD_VAR 0 1
66758: PUSH
66759: LD_INT 1
66761: NEG
66762: MUL
66763: ST_TO_ADDR
// end ;
66764: LD_VAR 0 2
66768: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66769: LD_INT 0
66771: PPUSH
66772: PPUSH
66773: PPUSH
66774: PPUSH
66775: PPUSH
66776: PPUSH
66777: PPUSH
66778: PPUSH
// if not unit or not building then
66779: LD_VAR 0 1
66783: NOT
66784: PUSH
66785: LD_VAR 0 2
66789: NOT
66790: OR
66791: IFFALSE 66795
// exit ;
66793: GO 67021
// x := GetX ( building ) ;
66795: LD_ADDR_VAR 0 4
66799: PUSH
66800: LD_VAR 0 2
66804: PPUSH
66805: CALL_OW 250
66809: ST_TO_ADDR
// y := GetY ( building ) ;
66810: LD_ADDR_VAR 0 6
66814: PUSH
66815: LD_VAR 0 2
66819: PPUSH
66820: CALL_OW 251
66824: ST_TO_ADDR
// d := GetDir ( building ) ;
66825: LD_ADDR_VAR 0 8
66829: PUSH
66830: LD_VAR 0 2
66834: PPUSH
66835: CALL_OW 254
66839: ST_TO_ADDR
// r := 4 ;
66840: LD_ADDR_VAR 0 9
66844: PUSH
66845: LD_INT 4
66847: ST_TO_ADDR
// for i := 1 to 5 do
66848: LD_ADDR_VAR 0 10
66852: PUSH
66853: DOUBLE
66854: LD_INT 1
66856: DEC
66857: ST_TO_ADDR
66858: LD_INT 5
66860: PUSH
66861: FOR_TO
66862: IFFALSE 67019
// begin _x := ShiftX ( x , d , r + i ) ;
66864: LD_ADDR_VAR 0 5
66868: PUSH
66869: LD_VAR 0 4
66873: PPUSH
66874: LD_VAR 0 8
66878: PPUSH
66879: LD_VAR 0 9
66883: PUSH
66884: LD_VAR 0 10
66888: PLUS
66889: PPUSH
66890: CALL_OW 272
66894: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66895: LD_ADDR_VAR 0 7
66899: PUSH
66900: LD_VAR 0 6
66904: PPUSH
66905: LD_VAR 0 8
66909: PPUSH
66910: LD_VAR 0 9
66914: PUSH
66915: LD_VAR 0 10
66919: PLUS
66920: PPUSH
66921: CALL_OW 273
66925: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66926: LD_VAR 0 5
66930: PPUSH
66931: LD_VAR 0 7
66935: PPUSH
66936: CALL_OW 488
66940: PUSH
66941: LD_VAR 0 5
66945: PPUSH
66946: LD_VAR 0 7
66950: PPUSH
66951: CALL_OW 428
66955: PPUSH
66956: CALL_OW 247
66960: PUSH
66961: LD_INT 3
66963: PUSH
66964: LD_INT 2
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: IN
66971: NOT
66972: AND
66973: IFFALSE 67017
// begin ComMoveXY ( unit , _x , _y ) ;
66975: LD_VAR 0 1
66979: PPUSH
66980: LD_VAR 0 5
66984: PPUSH
66985: LD_VAR 0 7
66989: PPUSH
66990: CALL_OW 111
// result := [ _x , _y ] ;
66994: LD_ADDR_VAR 0 3
66998: PUSH
66999: LD_VAR 0 5
67003: PUSH
67004: LD_VAR 0 7
67008: PUSH
67009: EMPTY
67010: LIST
67011: LIST
67012: ST_TO_ADDR
// exit ;
67013: POP
67014: POP
67015: GO 67021
// end ; end ;
67017: GO 66861
67019: POP
67020: POP
// end ;
67021: LD_VAR 0 3
67025: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67026: LD_INT 0
67028: PPUSH
67029: PPUSH
67030: PPUSH
// result := 0 ;
67031: LD_ADDR_VAR 0 3
67035: PUSH
67036: LD_INT 0
67038: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67039: LD_VAR 0 1
67043: PUSH
67044: LD_INT 0
67046: LESS
67047: PUSH
67048: LD_VAR 0 1
67052: PUSH
67053: LD_INT 8
67055: GREATER
67056: OR
67057: PUSH
67058: LD_VAR 0 2
67062: PUSH
67063: LD_INT 0
67065: LESS
67066: OR
67067: PUSH
67068: LD_VAR 0 2
67072: PUSH
67073: LD_INT 8
67075: GREATER
67076: OR
67077: IFFALSE 67081
// exit ;
67079: GO 67156
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67081: LD_ADDR_VAR 0 4
67085: PUSH
67086: LD_INT 22
67088: PUSH
67089: LD_VAR 0 2
67093: PUSH
67094: EMPTY
67095: LIST
67096: LIST
67097: PPUSH
67098: CALL_OW 69
67102: PUSH
67103: FOR_IN
67104: IFFALSE 67154
// begin un := UnitShoot ( i ) ;
67106: LD_ADDR_VAR 0 5
67110: PUSH
67111: LD_VAR 0 4
67115: PPUSH
67116: CALL_OW 504
67120: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67121: LD_VAR 0 5
67125: PPUSH
67126: CALL_OW 255
67130: PUSH
67131: LD_VAR 0 1
67135: EQUAL
67136: IFFALSE 67152
// begin result := un ;
67138: LD_ADDR_VAR 0 3
67142: PUSH
67143: LD_VAR 0 5
67147: ST_TO_ADDR
// exit ;
67148: POP
67149: POP
67150: GO 67156
// end ; end ;
67152: GO 67103
67154: POP
67155: POP
// end ;
67156: LD_VAR 0 3
67160: RET
// export function GetCargoBay ( units ) ; begin
67161: LD_INT 0
67163: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67164: LD_ADDR_VAR 0 2
67168: PUSH
67169: LD_VAR 0 1
67173: PPUSH
67174: LD_INT 2
67176: PUSH
67177: LD_INT 34
67179: PUSH
67180: LD_INT 12
67182: PUSH
67183: EMPTY
67184: LIST
67185: LIST
67186: PUSH
67187: LD_INT 34
67189: PUSH
67190: LD_INT 51
67192: PUSH
67193: EMPTY
67194: LIST
67195: LIST
67196: PUSH
67197: LD_INT 34
67199: PUSH
67200: LD_INT 32
67202: PUSH
67203: EMPTY
67204: LIST
67205: LIST
67206: PUSH
67207: LD_INT 34
67209: PUSH
67210: LD_EXP 33
67214: PUSH
67215: EMPTY
67216: LIST
67217: LIST
67218: PUSH
67219: EMPTY
67220: LIST
67221: LIST
67222: LIST
67223: LIST
67224: LIST
67225: PPUSH
67226: CALL_OW 72
67230: ST_TO_ADDR
// end ; end_of_file
67231: LD_VAR 0 2
67235: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
67236: LD_VAR 0 1
67240: PUSH
67241: LD_INT 200
67243: DOUBLE
67244: GREATEREQUAL
67245: IFFALSE 67253
67247: LD_INT 299
67249: DOUBLE
67250: LESSEQUAL
67251: IFTRUE 67255
67253: GO 67287
67255: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
67256: LD_VAR 0 1
67260: PPUSH
67261: LD_VAR 0 2
67265: PPUSH
67266: LD_VAR 0 3
67270: PPUSH
67271: LD_VAR 0 4
67275: PPUSH
67276: LD_VAR 0 5
67280: PPUSH
67281: CALL 25697 0 5
67285: GO 67364
67287: LD_INT 300
67289: DOUBLE
67290: GREATEREQUAL
67291: IFFALSE 67299
67293: LD_INT 399
67295: DOUBLE
67296: LESSEQUAL
67297: IFTRUE 67301
67299: GO 67363
67301: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
67302: LD_VAR 0 1
67306: PPUSH
67307: LD_VAR 0 2
67311: PPUSH
67312: LD_VAR 0 3
67316: PPUSH
67317: LD_VAR 0 4
67321: PPUSH
67322: LD_VAR 0 5
67326: PPUSH
67327: LD_VAR 0 6
67331: PPUSH
67332: LD_VAR 0 7
67336: PPUSH
67337: LD_VAR 0 8
67341: PPUSH
67342: LD_VAR 0 9
67346: PPUSH
67347: LD_VAR 0 10
67351: PPUSH
67352: LD_VAR 0 11
67356: PPUSH
67357: CALL 23585 0 11
67361: GO 67364
67363: POP
// end ;
67364: PPOPN 11
67366: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
67367: LD_VAR 0 1
67371: PPUSH
67372: LD_VAR 0 2
67376: PPUSH
67377: LD_VAR 0 3
67381: PPUSH
67382: LD_VAR 0 4
67386: PPUSH
67387: LD_VAR 0 5
67391: PPUSH
67392: CALL 25679 0 5
// end ; end_of_file
67396: PPOPN 5
67398: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
67399: LD_VAR 0 1
67403: PPUSH
67404: LD_VAR 0 2
67408: PPUSH
67409: LD_VAR 0 3
67413: PPUSH
67414: LD_VAR 0 4
67418: PPUSH
67419: LD_VAR 0 5
67423: PPUSH
67424: LD_VAR 0 6
67428: PPUSH
67429: CALL 12393 0 6
// end ;
67433: PPOPN 6
67435: END
