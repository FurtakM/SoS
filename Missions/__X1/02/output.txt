// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 46 0 0
// CreateNature ;
  19: CALL 533 0 0
// PrepareAmericans ;
  23: CALL 830 0 0
// PrepareArabian ;
  27: CALL 11120 0 0
// if debug then
  31: LD_EXP 1
  35: IFFALSE 41
// DebugMode ;
  37: CALL 214 0 0
// Action ;
  41: CALL 4640 0 0
// end ;
  45: END
// export debug , prefix , missionStart , aviradzeSpotted , deltaSpotted , spottedBeforeRadio , sciSpotted , aviradzeQuestDone , sciCounterKill , usAlert , usActiveDefend , gladstoneEscaped , timeUntilFarmer , attackDeltaAllowed , trickyMove , usPatrol , trap , lostCounter ; function Init ; begin
  46: LD_INT 0
  48: PPUSH
// debug := false ;
  49: LD_ADDR_EXP 1
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// missionStart := false ;
  57: LD_ADDR_EXP 3
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// aviradzeSpotted := false ;
  65: LD_ADDR_EXP 4
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// deltaSpotted := false ;
  73: LD_ADDR_EXP 5
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// sciSpotted := false ;
  81: LD_ADDR_EXP 7
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// sciCounterKill := 0 ;
  89: LD_ADDR_EXP 9
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// aviradzeQuestDone := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// attackDeltaAllowed := false ;
 105: LD_ADDR_EXP 14
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usAlert := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// usActiveDefend := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// usPatrol := [ ] ;
 129: LD_ADDR_EXP 16
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// timeUntilFarmer := [ 40 40$00 , 30 30$00 , 20 20$00 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 13
 140: PUSH
 141: LD_INT 84000
 143: PUSH
 144: LD_INT 63000
 146: PUSH
 147: LD_INT 42000
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: PUSH
 155: LD_OWVAR 67
 159: ARRAY
 160: ST_TO_ADDR
// trickyMove := false ;
 161: LD_ADDR_EXP 15
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// gladstoneEscaped := false ;
 169: LD_ADDR_EXP 12
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// prefix := 01_ ;
 177: LD_ADDR_EXP 2
 181: PUSH
 182: LD_STRING 01_
 184: ST_TO_ADDR
// trap := 0 ;
 185: LD_ADDR_EXP 17
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// lostCounter := false ;
 193: LD_ADDR_EXP 18
 197: PUSH
 198: LD_INT 0
 200: ST_TO_ADDR
// spottedBeforeRadio := false ;
 201: LD_ADDR_EXP 6
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// end ;
 209: LD_VAR 0 1
 213: RET
// function DebugMode ; begin
 214: LD_INT 0
 216: PPUSH
// FogOff ( 1 ) ;
 217: LD_INT 1
 219: PPUSH
 220: CALL_OW 344
// Difficulty := 2 ;
 224: LD_ADDR_OWVAR 67
 228: PUSH
 229: LD_INT 2
 231: ST_TO_ADDR
// end ; end_of_file
 232: LD_VAR 0 1
 236: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 237: LD_INT 0
 239: PPUSH
// uc_side := side ;
 240: LD_ADDR_OWVAR 20
 244: PUSH
 245: LD_VAR 0 1
 249: ST_TO_ADDR
// uc_nation := nation ;
 250: LD_ADDR_OWVAR 21
 254: PUSH
 255: LD_VAR 0 2
 259: ST_TO_ADDR
// vc_chassis := chassis ;
 260: LD_ADDR_OWVAR 37
 264: PUSH
 265: LD_VAR 0 3
 269: ST_TO_ADDR
// vc_engine := engine ;
 270: LD_ADDR_OWVAR 39
 274: PUSH
 275: LD_VAR 0 4
 279: ST_TO_ADDR
// vc_control := control ;
 280: LD_ADDR_OWVAR 38
 284: PUSH
 285: LD_VAR 0 5
 289: ST_TO_ADDR
// vc_weapon := weapon ;
 290: LD_ADDR_OWVAR 40
 294: PUSH
 295: LD_VAR 0 6
 299: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 300: LD_ADDR_OWVAR 41
 304: PUSH
 305: LD_VAR 0 7
 309: ST_TO_ADDR
// result := CreateVehicle ;
 310: LD_ADDR_VAR 0 8
 314: PUSH
 315: CALL_OW 45
 319: ST_TO_ADDR
// end ;
 320: LD_VAR 0 8
 324: RET
// export function SayX ( units , ident ) ; var i ; begin
 325: LD_INT 0
 327: PPUSH
 328: PPUSH
// result := false ;
 329: LD_ADDR_VAR 0 3
 333: PUSH
 334: LD_INT 0
 336: ST_TO_ADDR
// if not units then
 337: LD_VAR 0 1
 341: NOT
 342: IFFALSE 346
// exit ;
 344: GO 400
// for i in units do
 346: LD_ADDR_VAR 0 4
 350: PUSH
 351: LD_VAR 0 1
 355: PUSH
 356: FOR_IN
 357: IFFALSE 398
// if IsOk ( i ) then
 359: LD_VAR 0 4
 363: PPUSH
 364: CALL_OW 302
 368: IFFALSE 396
// begin Say ( i , ident ) ;
 370: LD_VAR 0 4
 374: PPUSH
 375: LD_VAR 0 2
 379: PPUSH
 380: CALL_OW 88
// result := i ;
 384: LD_ADDR_VAR 0 3
 388: PUSH
 389: LD_VAR 0 4
 393: ST_TO_ADDR
// break ;
 394: GO 398
// end ;
 396: GO 356
 398: POP
 399: POP
// end ;
 400: LD_VAR 0 3
 404: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 405: LD_INT 0
 407: PPUSH
 408: PPUSH
// InitUc ;
 409: CALL_OW 18
// InitHc ;
 413: CALL_OW 19
// uc_side := 0 ;
 417: LD_ADDR_OWVAR 20
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// uc_nation := 0 ;
 425: LD_ADDR_OWVAR 21
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// for i = 1 to amount do
 433: LD_ADDR_VAR 0 4
 437: PUSH
 438: DOUBLE
 439: LD_INT 1
 441: DEC
 442: ST_TO_ADDR
 443: LD_VAR 0 2
 447: PUSH
 448: FOR_TO
 449: IFFALSE 522
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 451: LD_ADDR_OWVAR 29
 455: PUSH
 456: LD_INT 9
 458: PPUSH
 459: LD_INT 12
 461: PPUSH
 462: CALL_OW 12
 466: PUSH
 467: LD_INT 9
 469: PPUSH
 470: LD_INT 12
 472: PPUSH
 473: CALL_OW 12
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: ST_TO_ADDR
// hc_agressivity := 0 ;
 482: LD_ADDR_OWVAR 35
 486: PUSH
 487: LD_INT 0
 489: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 490: LD_INT 0
 492: PPUSH
 493: LD_INT 12
 495: PPUSH
 496: LD_INT 1
 498: PPUSH
 499: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 503: CALL_OW 44
 507: PPUSH
 508: LD_VAR 0 1
 512: PPUSH
 513: LD_INT 0
 515: PPUSH
 516: CALL_OW 49
// end ;
 520: GO 448
 522: POP
 523: POP
// InitHc ;
 524: CALL_OW 19
// end ;
 528: LD_VAR 0 3
 532: RET
// export function CreateNature ; var i ; begin
 533: LD_INT 0
 535: PPUSH
 536: PPUSH
// SpawnApeman ( forest , 9 ) ;
 537: LD_INT 1
 539: PPUSH
 540: LD_INT 9
 542: PPUSH
 543: CALL 405 0 2
// for i := 1 to 4 do
 547: LD_ADDR_VAR 0 2
 551: PUSH
 552: DOUBLE
 553: LD_INT 1
 555: DEC
 556: ST_TO_ADDR
 557: LD_INT 4
 559: PUSH
 560: FOR_TO
 561: IFFALSE 596
// begin hc_class := 21 ;
 563: LD_ADDR_OWVAR 28
 567: PUSH
 568: LD_INT 21
 570: ST_TO_ADDR
// hc_gallery :=  ;
 571: LD_ADDR_OWVAR 33
 575: PUSH
 576: LD_STRING 
 578: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 579: CALL_OW 44
 583: PPUSH
 584: LD_INT 1
 586: PPUSH
 587: LD_INT 0
 589: PPUSH
 590: CALL_OW 49
// end ;
 594: GO 560
 596: POP
 597: POP
// for i := 1 to 2 do
 598: LD_ADDR_VAR 0 2
 602: PUSH
 603: DOUBLE
 604: LD_INT 1
 606: DEC
 607: ST_TO_ADDR
 608: LD_INT 2
 610: PUSH
 611: FOR_TO
 612: IFFALSE 647
// begin hc_class := 18 ;
 614: LD_ADDR_OWVAR 28
 618: PUSH
 619: LD_INT 18
 621: ST_TO_ADDR
// hc_gallery :=  ;
 622: LD_ADDR_OWVAR 33
 626: PUSH
 627: LD_STRING 
 629: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 630: CALL_OW 44
 634: PPUSH
 635: LD_INT 1
 637: PPUSH
 638: LD_INT 0
 640: PPUSH
 641: CALL_OW 49
// end ;
 645: GO 611
 647: POP
 648: POP
// for i := 1 to 3 do
 649: LD_ADDR_VAR 0 2
 653: PUSH
 654: DOUBLE
 655: LD_INT 1
 657: DEC
 658: ST_TO_ADDR
 659: LD_INT 3
 661: PUSH
 662: FOR_TO
 663: IFFALSE 698
// begin hc_class := 13 ;
 665: LD_ADDR_OWVAR 28
 669: PUSH
 670: LD_INT 13
 672: ST_TO_ADDR
// hc_gallery :=  ;
 673: LD_ADDR_OWVAR 33
 677: PUSH
 678: LD_STRING 
 680: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 681: CALL_OW 44
 685: PPUSH
 686: LD_INT 1
 688: PPUSH
 689: LD_INT 0
 691: PPUSH
 692: CALL_OW 49
// end ;
 696: GO 662
 698: POP
 699: POP
// for i := 1 to 4 do
 700: LD_ADDR_VAR 0 2
 704: PUSH
 705: DOUBLE
 706: LD_INT 1
 708: DEC
 709: ST_TO_ADDR
 710: LD_INT 4
 712: PUSH
 713: FOR_TO
 714: IFFALSE 749
// begin hc_class := class_frog ;
 716: LD_ADDR_OWVAR 28
 720: PUSH
 721: LD_INT 19
 723: ST_TO_ADDR
// hc_gallery :=  ;
 724: LD_ADDR_OWVAR 33
 728: PUSH
 729: LD_STRING 
 731: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 732: CALL_OW 44
 736: PPUSH
 737: LD_INT 8
 739: PPUSH
 740: LD_INT 0
 742: PPUSH
 743: CALL_OW 49
// end ;
 747: GO 713
 749: POP
 750: POP
// end ;
 751: LD_VAR 0 1
 755: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 756: LD_INT 0
 758: PPUSH
 759: PPUSH
 760: PPUSH
// if not observer or not unit then
 761: LD_VAR 0 1
 765: NOT
 766: PUSH
 767: LD_VAR 0 2
 771: NOT
 772: OR
 773: IFFALSE 777
// exit ;
 775: GO 825
// if not See ( GetSide ( observer ) , unit ) then
 777: LD_VAR 0 1
 781: PPUSH
 782: CALL_OW 255
 786: PPUSH
 787: LD_VAR 0 2
 791: PPUSH
 792: CALL_OW 292
 796: NOT
 797: IFFALSE 801
// exit ;
 799: GO 825
// result := GetDistUnits ( observer , unit ) < 12 ;
 801: LD_ADDR_VAR 0 3
 805: PUSH
 806: LD_VAR 0 1
 810: PPUSH
 811: LD_VAR 0 2
 815: PPUSH
 816: CALL_OW 296
 820: PUSH
 821: LD_INT 12
 823: LESS
 824: ST_TO_ADDR
// end ; end_of_file
 825: LD_VAR 0 3
 829: RET
// export Gladstone , Lynch ; export usForces , usSci ; export function PrepareAmericans ; var i , un , veh , tmp , arm ; begin
 830: LD_INT 0
 832: PPUSH
 833: PPUSH
 834: PPUSH
 835: PPUSH
 836: PPUSH
 837: PPUSH
// usForces := [ ] ;
 838: LD_ADDR_EXP 21
 842: PUSH
 843: EMPTY
 844: ST_TO_ADDR
// usSci := [ ] ;
 845: LD_ADDR_EXP 22
 849: PUSH
 850: EMPTY
 851: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
 852: LD_INT 1
 854: PPUSH
 855: LD_STRING Delta
 857: PPUSH
 858: CALL_OW 500
// SetResourceType ( GetBase ( Delta ) , mat_cans , 400 ) ;
 862: LD_INT 1
 864: PPUSH
 865: CALL_OW 274
 869: PPUSH
 870: LD_INT 1
 872: PPUSH
 873: LD_INT 400
 875: PPUSH
 876: CALL_OW 277
// SetResourceType ( GetBase ( Delta ) , mat_oil , 80 ) ;
 880: LD_INT 1
 882: PPUSH
 883: CALL_OW 274
 887: PPUSH
 888: LD_INT 2
 890: PPUSH
 891: LD_INT 80
 893: PPUSH
 894: CALL_OW 277
// uc_side := 1 ;
 898: LD_ADDR_OWVAR 20
 902: PUSH
 903: LD_INT 1
 905: ST_TO_ADDR
// uc_nation := 1 ;
 906: LD_ADDR_OWVAR 21
 910: PUSH
 911: LD_INT 1
 913: ST_TO_ADDR
// InitHc ;
 914: CALL_OW 19
// hc_importance := 0 ;
 918: LD_ADDR_OWVAR 32
 922: PUSH
 923: LD_INT 0
 925: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
 926: LD_ADDR_EXP 20
 930: PUSH
 931: LD_STRING Lynch
 933: PPUSH
 934: LD_INT 0
 936: PPUSH
 937: LD_STRING 
 939: PPUSH
 940: CALL 26774 0 3
 944: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false ,  ) ;
 945: LD_ADDR_EXP 19
 949: PUSH
 950: LD_STRING Gladstone
 952: PPUSH
 953: LD_INT 0
 955: PPUSH
 956: LD_STRING 
 958: PPUSH
 959: CALL 26774 0 3
 963: ST_TO_ADDR
// PlaceHumanInUnit ( Lynch , Delta ) ;
 964: LD_EXP 20
 968: PPUSH
 969: LD_INT 1
 971: PPUSH
 972: CALL_OW 52
// PlaceHumanInUnit ( Gladstone , usLab ) ;
 976: LD_EXP 19
 980: PPUSH
 981: LD_INT 3
 983: PPUSH
 984: CALL_OW 52
// for i := 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
 988: LD_ADDR_VAR 0 2
 992: PUSH
 993: DOUBLE
 994: LD_INT 1
 996: DEC
 997: ST_TO_ADDR
 998: LD_INT 1
1000: PUSH
1001: LD_INT 2
1003: PUSH
1004: LD_INT 2
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: LIST
1011: PUSH
1012: LD_OWVAR 67
1016: ARRAY
1017: PUSH
1018: FOR_TO
1019: IFFALSE 1065
// begin PrepareHuman ( false , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
1021: LD_INT 0
1023: PPUSH
1024: LD_INT 2
1026: PPUSH
1027: LD_INT 1
1029: PUSH
1030: LD_INT 2
1032: PUSH
1033: LD_INT 2
1035: PUSH
1036: EMPTY
1037: LIST
1038: LIST
1039: LIST
1040: PUSH
1041: LD_OWVAR 67
1045: ARRAY
1046: PPUSH
1047: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , Delta ) ;
1051: CALL_OW 44
1055: PPUSH
1056: LD_INT 1
1058: PPUSH
1059: CALL_OW 52
// end ;
1063: GO 1018
1065: POP
1066: POP
// for i := 1 to 7 - Difficulty do
1067: LD_ADDR_VAR 0 2
1071: PUSH
1072: DOUBLE
1073: LD_INT 1
1075: DEC
1076: ST_TO_ADDR
1077: LD_INT 7
1079: PUSH
1080: LD_OWVAR 67
1084: MINUS
1085: PUSH
1086: FOR_TO
1087: IFFALSE 1172
// begin PrepareHuman ( false , 4 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
1089: LD_INT 0
1091: PPUSH
1092: LD_INT 4
1094: PPUSH
1095: LD_INT 1
1097: PUSH
1098: LD_INT 2
1100: PUSH
1101: LD_INT 2
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: LIST
1108: PUSH
1109: LD_OWVAR 67
1113: ARRAY
1114: PPUSH
1115: CALL_OW 380
// un := CreateHuman ;
1119: LD_ADDR_VAR 0 3
1123: PUSH
1124: CALL_OW 44
1128: ST_TO_ADDR
// PlaceHumanInUnit ( un , usLab ) ;
1129: LD_VAR 0 3
1133: PPUSH
1134: LD_INT 3
1136: PPUSH
1137: CALL_OW 52
// usSci := Replace ( usSci , usSci + 1 , un ) ;
1141: LD_ADDR_EXP 22
1145: PUSH
1146: LD_EXP 22
1150: PPUSH
1151: LD_EXP 22
1155: PUSH
1156: LD_INT 1
1158: PLUS
1159: PPUSH
1160: LD_VAR 0 3
1164: PPUSH
1165: CALL_OW 1
1169: ST_TO_ADDR
// end ;
1170: GO 1086
1172: POP
1173: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
1174: LD_ADDR_VAR 0 6
1178: PUSH
1179: LD_INT 22
1181: PUSH
1182: LD_INT 1
1184: PUSH
1185: EMPTY
1186: LIST
1187: LIST
1188: PUSH
1189: LD_INT 30
1191: PUSH
1192: LD_INT 4
1194: PUSH
1195: EMPTY
1196: LIST
1197: LIST
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: PPUSH
1203: CALL_OW 69
1207: ST_TO_ADDR
// for i := 1 to 3 + Difficulty do
1208: LD_ADDR_VAR 0 2
1212: PUSH
1213: DOUBLE
1214: LD_INT 1
1216: DEC
1217: ST_TO_ADDR
1218: LD_INT 3
1220: PUSH
1221: LD_OWVAR 67
1225: PLUS
1226: PUSH
1227: FOR_TO
1228: IFFALSE 1306
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
1230: LD_INT 0
1232: PPUSH
1233: LD_INT 1
1235: PPUSH
1236: LD_INT 1
1238: PUSH
1239: LD_INT 2
1241: PUSH
1242: LD_INT 3
1244: PUSH
1245: EMPTY
1246: LIST
1247: LIST
1248: LIST
1249: PUSH
1250: LD_OWVAR 67
1254: ARRAY
1255: PPUSH
1256: CALL_OW 380
// un := CreateHuman ;
1260: LD_ADDR_VAR 0 3
1264: PUSH
1265: CALL_OW 44
1269: ST_TO_ADDR
// usForces := usForces ^ un ;
1270: LD_ADDR_EXP 21
1274: PUSH
1275: LD_EXP 21
1279: PUSH
1280: LD_VAR 0 3
1284: ADD
1285: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm [ 1 ] ) ;
1286: LD_VAR 0 3
1290: PPUSH
1291: LD_VAR 0 6
1295: PUSH
1296: LD_INT 1
1298: ARRAY
1299: PPUSH
1300: CALL_OW 52
// end ;
1304: GO 1227
1306: POP
1307: POP
// if Difficulty > 1 then
1308: LD_OWVAR 67
1312: PUSH
1313: LD_INT 1
1315: GREATER
1316: IFFALSE 1409
// begin for i := 1 to 3 do
1318: LD_ADDR_VAR 0 2
1322: PUSH
1323: DOUBLE
1324: LD_INT 1
1326: DEC
1327: ST_TO_ADDR
1328: LD_INT 3
1330: PUSH
1331: FOR_TO
1332: IFFALSE 1407
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
1334: LD_INT 0
1336: PPUSH
1337: LD_INT 1
1339: PPUSH
1340: LD_INT 1
1342: PUSH
1343: LD_INT 2
1345: PUSH
1346: LD_INT 3
1348: PUSH
1349: EMPTY
1350: LIST
1351: LIST
1352: LIST
1353: PUSH
1354: LD_OWVAR 67
1358: ARRAY
1359: PPUSH
1360: CALL_OW 380
// un := CreateHuman ;
1364: LD_ADDR_VAR 0 3
1368: PUSH
1369: CALL_OW 44
1373: ST_TO_ADDR
// usForces := usForces ^ un ;
1374: LD_ADDR_EXP 21
1378: PUSH
1379: LD_EXP 21
1383: PUSH
1384: LD_VAR 0 3
1388: ADD
1389: ST_TO_ADDR
// PlaceUnitArea ( un , usAdditionalDefenceArea , false ) ;
1390: LD_VAR 0 3
1394: PPUSH
1395: LD_INT 9
1397: PPUSH
1398: LD_INT 0
1400: PPUSH
1401: CALL_OW 49
// end ;
1405: GO 1331
1407: POP
1408: POP
// end ; PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 100 ) ;
1409: LD_INT 1
1411: PPUSH
1412: LD_INT 1
1414: PPUSH
1415: LD_INT 1
1417: PPUSH
1418: LD_INT 2
1420: PPUSH
1421: LD_INT 1
1423: PPUSH
1424: LD_INT 2
1426: PPUSH
1427: LD_INT 100
1429: PPUSH
1430: CALL 237 0 7
// veh := CreateVehicle ;
1434: LD_ADDR_VAR 0 4
1438: PUSH
1439: CALL_OW 45
1443: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1444: LD_VAR 0 4
1448: PPUSH
1449: LD_INT 2
1451: PPUSH
1452: CALL_OW 233
// PlaceUnitXY ( veh , 43 , 24 , false ) ;
1456: LD_VAR 0 4
1460: PPUSH
1461: LD_INT 43
1463: PPUSH
1464: LD_INT 24
1466: PPUSH
1467: LD_INT 0
1469: PPUSH
1470: CALL_OW 48
// end ;
1474: LD_VAR 0 1
1478: RET
// export function SendSciToForest ; var i , j , k , tmp , xy ; begin
1479: LD_INT 0
1481: PPUSH
1482: PPUSH
1483: PPUSH
1484: PPUSH
1485: PPUSH
1486: PPUSH
// if not usSci then
1487: LD_EXP 22
1491: NOT
1492: IFFALSE 1496
// exit ;
1494: GO 1670
// xy := AreaToList ( tameArea , 0 ) ;
1496: LD_ADDR_VAR 0 6
1500: PUSH
1501: LD_INT 5
1503: PPUSH
1504: LD_INT 0
1506: PPUSH
1507: CALL_OW 517
1511: ST_TO_ADDR
// for i in usSci do
1512: LD_ADDR_VAR 0 2
1516: PUSH
1517: LD_EXP 22
1521: PUSH
1522: FOR_IN
1523: IFFALSE 1668
// begin k := rand ( 1 , xy [ 1 ] ) ;
1525: LD_ADDR_VAR 0 4
1529: PUSH
1530: LD_INT 1
1532: PPUSH
1533: LD_VAR 0 6
1537: PUSH
1538: LD_INT 1
1540: ARRAY
1541: PPUSH
1542: CALL_OW 12
1546: ST_TO_ADDR
// ComExitBuilding ( i ) ;
1547: LD_VAR 0 2
1551: PPUSH
1552: CALL_OW 122
// AddComMoveXY ( i , xy [ 1 ] [ k ] , xy [ 2 ] [ k ] ) ;
1556: LD_VAR 0 2
1560: PPUSH
1561: LD_VAR 0 6
1565: PUSH
1566: LD_INT 1
1568: ARRAY
1569: PUSH
1570: LD_VAR 0 4
1574: ARRAY
1575: PPUSH
1576: LD_VAR 0 6
1580: PUSH
1581: LD_INT 2
1583: ARRAY
1584: PUSH
1585: LD_VAR 0 4
1589: ARRAY
1590: PPUSH
1591: CALL_OW 171
// for j := 1 to 2 do
1595: LD_ADDR_VAR 0 3
1599: PUSH
1600: DOUBLE
1601: LD_INT 1
1603: DEC
1604: ST_TO_ADDR
1605: LD_INT 2
1607: PUSH
1608: FOR_TO
1609: IFFALSE 1664
// begin tmp := Delete ( xy [ j ] , k ) ;
1611: LD_ADDR_VAR 0 5
1615: PUSH
1616: LD_VAR 0 6
1620: PUSH
1621: LD_VAR 0 3
1625: ARRAY
1626: PPUSH
1627: LD_VAR 0 4
1631: PPUSH
1632: CALL_OW 3
1636: ST_TO_ADDR
// xy := Replace ( xy , j , tmp ) ;
1637: LD_ADDR_VAR 0 6
1641: PUSH
1642: LD_VAR 0 6
1646: PPUSH
1647: LD_VAR 0 3
1651: PPUSH
1652: LD_VAR 0 5
1656: PPUSH
1657: CALL_OW 1
1661: ST_TO_ADDR
// end ;
1662: GO 1608
1664: POP
1665: POP
// end ;
1666: GO 1522
1668: POP
1669: POP
// end ;
1670: LD_VAR 0 1
1674: RET
// every 0 0$5 + 0 0$10 trigger aviradzeSpotted and usSci and not usAlert and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do var i , x , y , d , ape ;
1675: LD_EXP 4
1679: PUSH
1680: LD_EXP 22
1684: AND
1685: PUSH
1686: LD_EXP 10
1690: NOT
1691: AND
1692: PUSH
1693: LD_INT 22
1695: PUSH
1696: LD_INT 0
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: PUSH
1703: LD_INT 25
1705: PUSH
1706: LD_INT 12
1708: PUSH
1709: EMPTY
1710: LIST
1711: LIST
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: PPUSH
1717: CALL_OW 69
1721: AND
1722: IFFALSE 2214
1724: GO 1726
1726: DISABLE
1727: LD_INT 0
1729: PPUSH
1730: PPUSH
1731: PPUSH
1732: PPUSH
1733: PPUSH
// begin enable ;
1734: ENABLE
// if UnitFilter ( usSci , [ f_or , [ f_hastask ] , [ f_inside ] ] ) then
1735: LD_EXP 22
1739: PPUSH
1740: LD_INT 2
1742: PUSH
1743: LD_INT 60
1745: PUSH
1746: EMPTY
1747: LIST
1748: PUSH
1749: LD_INT 54
1751: PUSH
1752: EMPTY
1753: LIST
1754: PUSH
1755: EMPTY
1756: LIST
1757: LIST
1758: LIST
1759: PPUSH
1760: CALL_OW 72
1764: IFFALSE 1768
// exit ;
1766: GO 2214
// for i in usSci do
1768: LD_ADDR_VAR 0 1
1772: PUSH
1773: LD_EXP 22
1777: PUSH
1778: FOR_IN
1779: IFFALSE 2212
// begin if not HasTask ( i ) and GetLives ( i ) = 1000 then
1781: LD_VAR 0 1
1785: PPUSH
1786: CALL_OW 314
1790: NOT
1791: PUSH
1792: LD_VAR 0 1
1796: PPUSH
1797: CALL_OW 256
1801: PUSH
1802: LD_INT 1000
1804: EQUAL
1805: AND
1806: IFFALSE 2013
// begin ape := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) , i ) ;
1808: LD_ADDR_VAR 0 5
1812: PUSH
1813: LD_INT 22
1815: PUSH
1816: LD_INT 0
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: PUSH
1823: LD_INT 25
1825: PUSH
1826: LD_INT 12
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: PPUSH
1837: CALL_OW 69
1841: PPUSH
1842: LD_VAR 0 1
1846: PPUSH
1847: CALL_OW 74
1851: ST_TO_ADDR
// if GetDistUnits ( i , ape ) < 10 then
1852: LD_VAR 0 1
1856: PPUSH
1857: LD_VAR 0 5
1861: PPUSH
1862: CALL_OW 296
1866: PUSH
1867: LD_INT 10
1869: LESS
1870: IFFALSE 1903
// ComTameXY ( i , GetX ( ape ) , GetY ( ape ) ) else
1872: LD_VAR 0 1
1876: PPUSH
1877: LD_VAR 0 5
1881: PPUSH
1882: CALL_OW 250
1886: PPUSH
1887: LD_VAR 0 5
1891: PPUSH
1892: CALL_OW 251
1896: PPUSH
1897: CALL_OW 131
1901: GO 2013
// begin d := rand ( 0 , 5 ) ;
1903: LD_ADDR_VAR 0 4
1907: PUSH
1908: LD_INT 0
1910: PPUSH
1911: LD_INT 5
1913: PPUSH
1914: CALL_OW 12
1918: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 3 ) ;
1919: LD_ADDR_VAR 0 2
1923: PUSH
1924: LD_VAR 0 1
1928: PPUSH
1929: CALL_OW 250
1933: PPUSH
1934: LD_VAR 0 4
1938: PPUSH
1939: LD_INT 3
1941: PPUSH
1942: CALL_OW 272
1946: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 3 ) ;
1947: LD_ADDR_VAR 0 3
1951: PUSH
1952: LD_VAR 0 1
1956: PPUSH
1957: CALL_OW 251
1961: PPUSH
1962: LD_VAR 0 4
1966: PPUSH
1967: LD_INT 3
1969: PPUSH
1970: CALL_OW 273
1974: ST_TO_ADDR
// if not ValidHex ( x , y ) then
1975: LD_VAR 0 2
1979: PPUSH
1980: LD_VAR 0 3
1984: PPUSH
1985: CALL_OW 488
1989: NOT
1990: IFFALSE 1994
// continue ;
1992: GO 1778
// ComMoveXY ( i , x , y ) ;
1994: LD_VAR 0 1
1998: PPUSH
1999: LD_VAR 0 2
2003: PPUSH
2004: LD_VAR 0 3
2008: PPUSH
2009: CALL_OW 111
// end ; end ; if GetLives ( i ) < 900 and GetDistUnitXY ( i , 37 , 23 ) > 10 then
2013: LD_VAR 0 1
2017: PPUSH
2018: CALL_OW 256
2022: PUSH
2023: LD_INT 900
2025: LESS
2026: PUSH
2027: LD_VAR 0 1
2031: PPUSH
2032: LD_INT 37
2034: PPUSH
2035: LD_INT 23
2037: PPUSH
2038: CALL_OW 297
2042: PUSH
2043: LD_INT 10
2045: GREATER
2046: AND
2047: IFFALSE 2123
// begin if IsOk ( Gladstone ) and IsInUnit ( Gladstone ) then
2049: LD_EXP 19
2053: PPUSH
2054: CALL_OW 302
2058: PUSH
2059: LD_EXP 19
2063: PPUSH
2064: CALL_OW 310
2068: AND
2069: IFFALSE 2080
// ComExitBuilding ( Gladstone ) ;
2071: LD_EXP 19
2075: PPUSH
2076: CALL_OW 122
// AddComHeal ( Gladstone , i ) ;
2080: LD_EXP 19
2084: PPUSH
2085: LD_VAR 0 1
2089: PPUSH
2090: CALL_OW 188
// AddComEnterUnit ( Gladstone , usLab ) ;
2094: LD_EXP 19
2098: PPUSH
2099: LD_INT 3
2101: PPUSH
2102: CALL_OW 180
// ComMoveXY ( i , 37 , 23 ) ;
2106: LD_VAR 0 1
2110: PPUSH
2111: LD_INT 37
2113: PPUSH
2114: LD_INT 23
2116: PPUSH
2117: CALL_OW 111
// end else
2121: GO 2210
// if GetLives ( i ) = 1000 then
2123: LD_VAR 0 1
2127: PPUSH
2128: CALL_OW 256
2132: PUSH
2133: LD_INT 1000
2135: EQUAL
2136: IFFALSE 2210
// begin if SideShoot ( i ) = 2 then
2138: LD_VAR 0 1
2142: PPUSH
2143: CALL_OW 503
2147: PUSH
2148: LD_INT 2
2150: EQUAL
2151: IFFALSE 2198
// begin if not usAlert then
2153: LD_EXP 10
2157: NOT
2158: IFFALSE 2168
// usAlert := true ;
2160: LD_ADDR_EXP 10
2164: PUSH
2165: LD_INT 1
2167: ST_TO_ADDR
// AddComEnterUnit ( i , usLab ) ;
2168: LD_VAR 0 1
2172: PPUSH
2173: LD_INT 3
2175: PPUSH
2176: CALL_OW 180
// usSci := usSci diff i ;
2180: LD_ADDR_EXP 22
2184: PUSH
2185: LD_EXP 22
2189: PUSH
2190: LD_VAR 0 1
2194: DIFF
2195: ST_TO_ADDR
// end else
2196: GO 2210
// ComMoveToArea ( i , tameArea ) ;
2198: LD_VAR 0 1
2202: PPUSH
2203: LD_INT 5
2205: PPUSH
2206: CALL_OW 113
// end ; end ;
2210: GO 1778
2212: POP
2213: POP
// end ;
2214: PPOPN 5
2216: END
// every 0 0$1 trigger not usAlert and ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 999 ] ] ] ) or FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) ) do
2217: LD_EXP 10
2221: NOT
2222: PUSH
2223: LD_INT 22
2225: PUSH
2226: LD_INT 1
2228: PUSH
2229: EMPTY
2230: LIST
2231: LIST
2232: PUSH
2233: LD_INT 21
2235: PUSH
2236: LD_INT 3
2238: PUSH
2239: EMPTY
2240: LIST
2241: LIST
2242: PUSH
2243: LD_INT 3
2245: PUSH
2246: LD_INT 57
2248: PUSH
2249: EMPTY
2250: LIST
2251: PUSH
2252: EMPTY
2253: LIST
2254: LIST
2255: PUSH
2256: LD_INT 3
2258: PUSH
2259: LD_INT 24
2261: PUSH
2262: LD_INT 999
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: LIST
2277: LIST
2278: PPUSH
2279: CALL_OW 69
2283: PUSH
2284: LD_INT 7
2286: PPUSH
2287: LD_INT 22
2289: PUSH
2290: LD_INT 2
2292: PUSH
2293: EMPTY
2294: LIST
2295: LIST
2296: PPUSH
2297: CALL_OW 70
2301: OR
2302: AND
2303: IFFALSE 2316
2305: GO 2307
2307: DISABLE
// usAlert := true ;
2308: LD_ADDR_EXP 10
2312: PUSH
2313: LD_INT 1
2315: ST_TO_ADDR
2316: END
// every 0 0$1 trigger usAlert do var i , b , arm ;
2317: LD_EXP 10
2321: IFFALSE 2668
2323: GO 2325
2325: DISABLE
2326: LD_INT 0
2328: PPUSH
2329: PPUSH
2330: PPUSH
// begin usActiveDefend := true ;
2331: LD_ADDR_EXP 11
2335: PUSH
2336: LD_INT 1
2338: ST_TO_ADDR
// if not usForces then
2339: LD_EXP 21
2343: NOT
2344: IFFALSE 2348
// exit ;
2346: GO 2668
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
2348: LD_ADDR_VAR 0 3
2352: PUSH
2353: LD_INT 22
2355: PUSH
2356: LD_INT 1
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: PUSH
2363: LD_INT 30
2365: PUSH
2366: LD_INT 4
2368: PUSH
2369: EMPTY
2370: LIST
2371: LIST
2372: PUSH
2373: EMPTY
2374: LIST
2375: LIST
2376: PPUSH
2377: CALL_OW 69
2381: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
2382: LD_ADDR_VAR 0 2
2386: PUSH
2387: LD_INT 22
2389: PUSH
2390: LD_INT 1
2392: PUSH
2393: EMPTY
2394: LIST
2395: LIST
2396: PUSH
2397: LD_INT 30
2399: PUSH
2400: LD_INT 31
2402: PUSH
2403: EMPTY
2404: LIST
2405: LIST
2406: PUSH
2407: EMPTY
2408: LIST
2409: LIST
2410: PPUSH
2411: CALL_OW 69
2415: ST_TO_ADDR
// ComExitBuilding ( Lynch ) ;
2416: LD_EXP 20
2420: PPUSH
2421: CALL_OW 122
// AddComEnterUnit ( Lynch , arm [ 1 ] ) ;
2425: LD_EXP 20
2429: PPUSH
2430: LD_VAR 0 3
2434: PUSH
2435: LD_INT 1
2437: ARRAY
2438: PPUSH
2439: CALL_OW 180
// if IsOk ( Gladstone ) then
2443: LD_EXP 19
2447: PPUSH
2448: CALL_OW 302
2452: IFFALSE 2493
// begin ComExitBuilding ( Gladstone ) ;
2454: LD_EXP 19
2458: PPUSH
2459: CALL_OW 122
// AddComEnterUnit ( Gladstone , arm [ 1 ] ) ;
2463: LD_EXP 19
2467: PPUSH
2468: LD_VAR 0 3
2472: PUSH
2473: LD_INT 1
2475: ARRAY
2476: PPUSH
2477: CALL_OW 180
// AddComChangeProfession ( Gladstone , class_soldier ) ;
2481: LD_EXP 19
2485: PPUSH
2486: LD_INT 1
2488: PPUSH
2489: CALL_OW 183
// end ; ComExitBuilding ( usForces [ 1 ] ) ;
2493: LD_EXP 21
2497: PUSH
2498: LD_INT 1
2500: ARRAY
2501: PPUSH
2502: CALL_OW 122
// AddComEnterUnit ( usForces [ 1 ] , b [ 1 ] ) ;
2506: LD_EXP 21
2510: PUSH
2511: LD_INT 1
2513: ARRAY
2514: PPUSH
2515: LD_VAR 0 2
2519: PUSH
2520: LD_INT 1
2522: ARRAY
2523: PPUSH
2524: CALL_OW 180
// ComExitBuilding ( usForces [ 2 ] ) ;
2528: LD_EXP 21
2532: PUSH
2533: LD_INT 2
2535: ARRAY
2536: PPUSH
2537: CALL_OW 122
// AddComEnterUnit ( usForces [ 2 ] , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
2541: LD_EXP 21
2545: PUSH
2546: LD_INT 2
2548: ARRAY
2549: PPUSH
2550: LD_INT 22
2552: PUSH
2553: LD_INT 1
2555: PUSH
2556: EMPTY
2557: LIST
2558: LIST
2559: PUSH
2560: LD_INT 30
2562: PUSH
2563: LD_INT 32
2565: PUSH
2566: EMPTY
2567: LIST
2568: LIST
2569: PUSH
2570: EMPTY
2571: LIST
2572: LIST
2573: PPUSH
2574: CALL_OW 69
2578: PUSH
2579: LD_INT 1
2581: ARRAY
2582: PPUSH
2583: CALL_OW 180
// if b > 1 and usForces > 2 then
2587: LD_VAR 0 2
2591: PUSH
2592: LD_INT 1
2594: GREATER
2595: PUSH
2596: LD_EXP 21
2600: PUSH
2601: LD_INT 2
2603: GREATER
2604: AND
2605: IFFALSE 2668
// begin repeat wait ( 0 0$1 ) ;
2607: LD_INT 35
2609: PPUSH
2610: CALL_OW 67
// until BuildingStatus ( b [ 2 ] ) <> bs_build ;
2614: LD_VAR 0 2
2618: PUSH
2619: LD_INT 2
2621: ARRAY
2622: PPUSH
2623: CALL_OW 461
2627: PUSH
2628: LD_INT 1
2630: NONEQUAL
2631: IFFALSE 2607
// ComExitBuilding ( usForces [ 3 ] ) ;
2633: LD_EXP 21
2637: PUSH
2638: LD_INT 3
2640: ARRAY
2641: PPUSH
2642: CALL_OW 122
// AddComEnterUnit ( usForces [ 3 ] , b [ 2 ] ) ;
2646: LD_EXP 21
2650: PUSH
2651: LD_INT 3
2653: ARRAY
2654: PPUSH
2655: LD_VAR 0 2
2659: PUSH
2660: LD_INT 2
2662: ARRAY
2663: PPUSH
2664: CALL_OW 180
// end ; end ;
2668: PPOPN 3
2670: END
// every 0 0$1 trigger GetLives ( usLab ) < 999 and usAlert and usForces do var i ;
2671: LD_INT 3
2673: PPUSH
2674: CALL_OW 256
2678: PUSH
2679: LD_INT 999
2681: LESS
2682: PUSH
2683: LD_EXP 10
2687: AND
2688: PUSH
2689: LD_EXP 21
2693: AND
2694: IFFALSE 2865
2696: GO 2698
2698: DISABLE
2699: LD_INT 0
2701: PPUSH
// begin for i in usForces do
2702: LD_ADDR_VAR 0 1
2706: PUSH
2707: LD_EXP 21
2711: PUSH
2712: FOR_IN
2713: IFFALSE 2752
// begin if IsInUnit ( i ) then
2715: LD_VAR 0 1
2719: PPUSH
2720: CALL_OW 310
2724: IFFALSE 2735
// ComExitBuilding ( i ) ;
2726: LD_VAR 0 1
2730: PPUSH
2731: CALL_OW 122
// AddComAgressiveMove ( i , 31 , 8 ) ;
2735: LD_VAR 0 1
2739: PPUSH
2740: LD_INT 31
2742: PPUSH
2743: LD_INT 8
2745: PPUSH
2746: CALL_OW 174
// end ;
2750: GO 2712
2752: POP
2753: POP
// wait ( 0 0$8 ) ;
2754: LD_INT 280
2756: PPUSH
2757: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) then
2761: LD_INT 22
2763: PUSH
2764: LD_INT 2
2766: PUSH
2767: EMPTY
2768: LIST
2769: LIST
2770: PUSH
2771: LD_INT 91
2773: PUSH
2774: LD_INT 3
2776: PUSH
2777: LD_INT 14
2779: PUSH
2780: EMPTY
2781: LIST
2782: LIST
2783: LIST
2784: PUSH
2785: EMPTY
2786: LIST
2787: LIST
2788: PPUSH
2789: CALL_OW 69
2793: IFFALSE 2843
// ComAttackUnit ( usForces , FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) [ 1 ] ) else
2795: LD_EXP 21
2799: PPUSH
2800: LD_INT 22
2802: PUSH
2803: LD_INT 2
2805: PUSH
2806: EMPTY
2807: LIST
2808: LIST
2809: PUSH
2810: LD_INT 91
2812: PUSH
2813: LD_INT 3
2815: PUSH
2816: LD_INT 14
2818: PUSH
2819: EMPTY
2820: LIST
2821: LIST
2822: LIST
2823: PUSH
2824: EMPTY
2825: LIST
2826: LIST
2827: PPUSH
2828: CALL_OW 69
2832: PUSH
2833: LD_INT 1
2835: ARRAY
2836: PPUSH
2837: CALL_OW 115
2841: GO 2865
// begin wait ( 0 0$20 ) ;
2843: LD_INT 700
2845: PPUSH
2846: CALL_OW 67
// AddComMoveXY ( usForces , 39 , 19 ) ;
2850: LD_EXP 21
2854: PPUSH
2855: LD_INT 39
2857: PPUSH
2858: LD_INT 19
2860: PPUSH
2861: CALL_OW 171
// end ; end ;
2865: PPOPN 1
2867: END
// every 0 0$3 trigger ( GetDistUnits ( Heike , Delta ) < 10 or GetLives ( usLab ) < 999 ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do var tmp , veh ;
2868: LD_EXP 23
2872: PPUSH
2873: LD_INT 1
2875: PPUSH
2876: CALL_OW 296
2880: PUSH
2881: LD_INT 10
2883: LESS
2884: PUSH
2885: LD_INT 3
2887: PPUSH
2888: CALL_OW 256
2892: PUSH
2893: LD_INT 999
2895: LESS
2896: OR
2897: PUSH
2898: LD_INT 22
2900: PUSH
2901: LD_INT 1
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: PUSH
2908: LD_INT 25
2910: PUSH
2911: LD_INT 2
2913: PUSH
2914: EMPTY
2915: LIST
2916: LIST
2917: PUSH
2918: EMPTY
2919: LIST
2920: LIST
2921: PPUSH
2922: CALL_OW 69
2926: AND
2927: IFFALSE 3041
2929: GO 2931
2931: DISABLE
2932: LD_INT 0
2934: PPUSH
2935: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
2936: LD_ADDR_VAR 0 1
2940: PUSH
2941: LD_INT 22
2943: PUSH
2944: LD_INT 1
2946: PUSH
2947: EMPTY
2948: LIST
2949: LIST
2950: PUSH
2951: LD_INT 25
2953: PUSH
2954: LD_INT 2
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PUSH
2961: EMPTY
2962: LIST
2963: LIST
2964: PPUSH
2965: CALL_OW 69
2969: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2970: LD_ADDR_VAR 0 2
2974: PUSH
2975: LD_INT 22
2977: PUSH
2978: LD_INT 1
2980: PUSH
2981: EMPTY
2982: LIST
2983: LIST
2984: PUSH
2985: LD_INT 21
2987: PUSH
2988: LD_INT 2
2990: PUSH
2991: EMPTY
2992: LIST
2993: LIST
2994: PUSH
2995: LD_INT 58
2997: PUSH
2998: EMPTY
2999: LIST
3000: PUSH
3001: EMPTY
3002: LIST
3003: LIST
3004: LIST
3005: PPUSH
3006: CALL_OW 69
3010: ST_TO_ADDR
// if not tmp then
3011: LD_VAR 0 1
3015: NOT
3016: IFFALSE 3020
// exit ;
3018: GO 3041
// ComExitBuilding ( tmp ) ;
3020: LD_VAR 0 1
3024: PPUSH
3025: CALL_OW 122
// AddComDismantle ( tmp , usLab ) ;
3029: LD_VAR 0 1
3033: PPUSH
3034: LD_INT 3
3036: PPUSH
3037: CALL_OW 227
// end ;
3041: PPOPN 2
3043: END
// every 0 0$1 trigger usAlert and FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) do var i , tmp ;
3044: LD_EXP 10
3048: PUSH
3049: LD_INT 7
3051: PPUSH
3052: LD_INT 22
3054: PUSH
3055: LD_INT 1
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: PUSH
3062: LD_INT 21
3064: PUSH
3065: LD_INT 1
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: PUSH
3072: LD_INT 3
3074: PUSH
3075: LD_INT 24
3077: PUSH
3078: LD_INT 600
3080: PUSH
3081: EMPTY
3082: LIST
3083: LIST
3084: PUSH
3085: EMPTY
3086: LIST
3087: LIST
3088: PUSH
3089: EMPTY
3090: LIST
3091: LIST
3092: LIST
3093: PPUSH
3094: CALL_OW 70
3098: AND
3099: IFFALSE 3227
3101: GO 3103
3103: DISABLE
3104: LD_INT 0
3106: PPUSH
3107: PPUSH
// begin enable ;
3108: ENABLE
// tmp := FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) ;
3109: LD_ADDR_VAR 0 2
3113: PUSH
3114: LD_INT 7
3116: PPUSH
3117: LD_INT 22
3119: PUSH
3120: LD_INT 1
3122: PUSH
3123: EMPTY
3124: LIST
3125: LIST
3126: PUSH
3127: LD_INT 21
3129: PUSH
3130: LD_INT 1
3132: PUSH
3133: EMPTY
3134: LIST
3135: LIST
3136: PUSH
3137: LD_INT 3
3139: PUSH
3140: LD_INT 24
3142: PUSH
3143: LD_INT 600
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: PUSH
3150: EMPTY
3151: LIST
3152: LIST
3153: PUSH
3154: EMPTY
3155: LIST
3156: LIST
3157: LIST
3158: PPUSH
3159: CALL_OW 70
3163: ST_TO_ADDR
// if not tmp then
3164: LD_VAR 0 2
3168: NOT
3169: IFFALSE 3173
// exit ;
3171: GO 3227
// for i in tmp do
3173: LD_ADDR_VAR 0 1
3177: PUSH
3178: LD_VAR 0 2
3182: PUSH
3183: FOR_IN
3184: IFFALSE 3225
// if IsInUnit ( i ) then
3186: LD_VAR 0 1
3190: PPUSH
3191: CALL_OW 310
3195: IFFALSE 3208
// ComExitBuilding ( i ) else
3197: LD_VAR 0 1
3201: PPUSH
3202: CALL_OW 122
3206: GO 3223
// ComMoveXY ( i , 48 , 74 ) ;
3208: LD_VAR 0 1
3212: PPUSH
3213: LD_INT 48
3215: PPUSH
3216: LD_INT 74
3218: PPUSH
3219: CALL_OW 111
3223: GO 3183
3225: POP
3226: POP
// end ;
3227: PPOPN 2
3229: END
// every 6 6$00 do var i , un , tmp ;
3230: GO 3232
3232: DISABLE
3233: LD_INT 0
3235: PPUSH
3236: PPUSH
3237: PPUSH
// begin tmp := [ ] ;
3238: LD_ADDR_VAR 0 3
3242: PUSH
3243: EMPTY
3244: ST_TO_ADDR
// uc_side := 1 ;
3245: LD_ADDR_OWVAR 20
3249: PUSH
3250: LD_INT 1
3252: ST_TO_ADDR
// uc_nation := 1 ;
3253: LD_ADDR_OWVAR 21
3257: PUSH
3258: LD_INT 1
3260: ST_TO_ADDR
// case Difficulty of 1 :
3261: LD_OWVAR 67
3265: PUSH
3266: LD_INT 1
3268: DOUBLE
3269: EQUAL
3270: IFTRUE 3274
3272: GO 3377
3274: POP
// begin wait ( 1 1$00 ) ;
3275: LD_INT 2100
3277: PPUSH
3278: CALL_OW 67
// for i := 1 to 2 do
3282: LD_ADDR_VAR 0 1
3286: PUSH
3287: DOUBLE
3288: LD_INT 1
3290: DEC
3291: ST_TO_ADDR
3292: LD_INT 2
3294: PUSH
3295: FOR_TO
3296: IFFALSE 3373
// begin PrepareHuman ( false , [ 1 , 4 ] [ i mod 2 + 1 ] , 1 ) ;
3298: LD_INT 0
3300: PPUSH
3301: LD_INT 1
3303: PUSH
3304: LD_INT 4
3306: PUSH
3307: EMPTY
3308: LIST
3309: LIST
3310: PUSH
3311: LD_VAR 0 1
3315: PUSH
3316: LD_INT 2
3318: MOD
3319: PUSH
3320: LD_INT 1
3322: PLUS
3323: ARRAY
3324: PPUSH
3325: LD_INT 1
3327: PPUSH
3328: CALL_OW 380
// un := CreateHuman ;
3332: LD_ADDR_VAR 0 2
3336: PUSH
3337: CALL_OW 44
3341: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3342: LD_ADDR_VAR 0 3
3346: PUSH
3347: LD_VAR 0 3
3351: PPUSH
3352: LD_VAR 0 3
3356: PUSH
3357: LD_INT 1
3359: PLUS
3360: PPUSH
3361: LD_VAR 0 2
3365: PPUSH
3366: CALL_OW 1
3370: ST_TO_ADDR
// end ;
3371: GO 3295
3373: POP
3374: POP
// end ; 2 :
3375: GO 3771
3377: LD_INT 2
3379: DOUBLE
3380: EQUAL
3381: IFTRUE 3385
3383: GO 3519
3385: POP
// begin wait ( 0 0$30 ) ;
3386: LD_INT 1050
3388: PPUSH
3389: CALL_OW 67
// for i := 1 to 2 do
3393: LD_ADDR_VAR 0 1
3397: PUSH
3398: DOUBLE
3399: LD_INT 1
3401: DEC
3402: ST_TO_ADDR
3403: LD_INT 2
3405: PUSH
3406: FOR_TO
3407: IFFALSE 3463
// begin PrepareHuman ( false , 1 , 2 ) ;
3409: LD_INT 0
3411: PPUSH
3412: LD_INT 1
3414: PPUSH
3415: LD_INT 2
3417: PPUSH
3418: CALL_OW 380
// un := CreateHuman ;
3422: LD_ADDR_VAR 0 2
3426: PUSH
3427: CALL_OW 44
3431: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3432: LD_ADDR_VAR 0 3
3436: PUSH
3437: LD_VAR 0 3
3441: PPUSH
3442: LD_VAR 0 3
3446: PUSH
3447: LD_INT 1
3449: PLUS
3450: PPUSH
3451: LD_VAR 0 2
3455: PPUSH
3456: CALL_OW 1
3460: ST_TO_ADDR
// end ;
3461: GO 3406
3463: POP
3464: POP
// PrepareHuman ( false , 4 , 2 ) ;
3465: LD_INT 0
3467: PPUSH
3468: LD_INT 4
3470: PPUSH
3471: LD_INT 2
3473: PPUSH
3474: CALL_OW 380
// un := CreateHuman ;
3478: LD_ADDR_VAR 0 2
3482: PUSH
3483: CALL_OW 44
3487: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3488: LD_ADDR_VAR 0 3
3492: PUSH
3493: LD_VAR 0 3
3497: PPUSH
3498: LD_VAR 0 3
3502: PUSH
3503: LD_INT 1
3505: PLUS
3506: PPUSH
3507: LD_VAR 0 2
3511: PPUSH
3512: CALL_OW 1
3516: ST_TO_ADDR
// end ; 3 :
3517: GO 3771
3519: LD_INT 3
3521: DOUBLE
3522: EQUAL
3523: IFTRUE 3527
3525: GO 3770
3527: POP
// begin for i := 1 to 2 do
3528: LD_ADDR_VAR 0 1
3532: PUSH
3533: DOUBLE
3534: LD_INT 1
3536: DEC
3537: ST_TO_ADDR
3538: LD_INT 2
3540: PUSH
3541: FOR_TO
3542: IFFALSE 3598
// begin PrepareHuman ( false , 1 , 2 ) ;
3544: LD_INT 0
3546: PPUSH
3547: LD_INT 1
3549: PPUSH
3550: LD_INT 2
3552: PPUSH
3553: CALL_OW 380
// un := CreateHuman ;
3557: LD_ADDR_VAR 0 2
3561: PUSH
3562: CALL_OW 44
3566: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3567: LD_ADDR_VAR 0 3
3571: PUSH
3572: LD_VAR 0 3
3576: PPUSH
3577: LD_VAR 0 3
3581: PUSH
3582: LD_INT 1
3584: PLUS
3585: PPUSH
3586: LD_VAR 0 2
3590: PPUSH
3591: CALL_OW 1
3595: ST_TO_ADDR
// end ;
3596: GO 3541
3598: POP
3599: POP
// PrepareHuman ( false , 4 , 2 ) ;
3600: LD_INT 0
3602: PPUSH
3603: LD_INT 4
3605: PPUSH
3606: LD_INT 2
3608: PPUSH
3609: CALL_OW 380
// un := CreateHuman ;
3613: LD_ADDR_VAR 0 2
3617: PUSH
3618: CALL_OW 44
3622: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3623: LD_ADDR_VAR 0 3
3627: PUSH
3628: LD_VAR 0 3
3632: PPUSH
3633: LD_VAR 0 3
3637: PUSH
3638: LD_INT 1
3640: PLUS
3641: PPUSH
3642: LD_VAR 0 2
3646: PPUSH
3647: CALL_OW 1
3651: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_machine_gun , 90 ) ;
3652: LD_INT 1
3654: PPUSH
3655: LD_INT 1
3657: PPUSH
3658: LD_INT 2
3660: PPUSH
3661: LD_INT 2
3663: PPUSH
3664: LD_INT 1
3666: PPUSH
3667: LD_INT 2
3669: PPUSH
3670: LD_INT 90
3672: PPUSH
3673: CALL 237 0 7
// un := CreateVehicle ;
3677: LD_ADDR_VAR 0 2
3681: PUSH
3682: CALL_OW 45
3686: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3687: LD_ADDR_VAR 0 3
3691: PUSH
3692: LD_VAR 0 3
3696: PPUSH
3697: LD_VAR 0 3
3701: PUSH
3702: LD_INT 1
3704: PLUS
3705: PPUSH
3706: LD_VAR 0 2
3710: PPUSH
3711: CALL_OW 1
3715: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
3716: LD_INT 0
3718: PPUSH
3719: LD_INT 1
3721: PPUSH
3722: LD_INT 2
3724: PPUSH
3725: CALL_OW 380
// un := CreateHuman ;
3729: LD_ADDR_VAR 0 2
3733: PUSH
3734: CALL_OW 44
3738: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3739: LD_ADDR_VAR 0 3
3743: PUSH
3744: LD_VAR 0 3
3748: PPUSH
3749: LD_VAR 0 3
3753: PUSH
3754: LD_INT 1
3756: PLUS
3757: PPUSH
3758: LD_VAR 0 2
3762: PPUSH
3763: CALL_OW 1
3767: ST_TO_ADDR
// end ; end ;
3768: GO 3771
3770: POP
// for i := 1 to tmp do
3771: LD_ADDR_VAR 0 1
3775: PUSH
3776: DOUBLE
3777: LD_INT 1
3779: DEC
3780: ST_TO_ADDR
3781: LD_VAR 0 3
3785: PUSH
3786: FOR_TO
3787: IFFALSE 3952
// begin SetDir ( tmp [ i ] , 1 ) ;
3789: LD_VAR 0 3
3793: PUSH
3794: LD_VAR 0 1
3798: ARRAY
3799: PPUSH
3800: LD_INT 1
3802: PPUSH
3803: CALL_OW 233
// if GetType ( tmp [ i ] ) = unit_human then
3807: LD_VAR 0 3
3811: PUSH
3812: LD_VAR 0 1
3816: ARRAY
3817: PPUSH
3818: CALL_OW 247
3822: PUSH
3823: LD_INT 1
3825: EQUAL
3826: IFFALSE 3854
// PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) else
3828: LD_VAR 0 3
3832: PUSH
3833: LD_VAR 0 1
3837: ARRAY
3838: PPUSH
3839: LD_INT 28
3841: PPUSH
3842: LD_INT 52
3844: PPUSH
3845: LD_INT 0
3847: PPUSH
3848: CALL_OW 48
3852: GO 3922
// begin PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) ;
3854: LD_VAR 0 3
3858: PUSH
3859: LD_VAR 0 1
3863: ARRAY
3864: PPUSH
3865: LD_INT 28
3867: PPUSH
3868: LD_INT 52
3870: PPUSH
3871: LD_INT 0
3873: PPUSH
3874: CALL_OW 48
// i := i + 1 ;
3878: LD_ADDR_VAR 0 1
3882: PUSH
3883: LD_VAR 0 1
3887: PUSH
3888: LD_INT 1
3890: PLUS
3891: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ i ] , tmp [ i - 1 ] ) ;
3892: LD_VAR 0 3
3896: PUSH
3897: LD_VAR 0 1
3901: ARRAY
3902: PPUSH
3903: LD_VAR 0 3
3907: PUSH
3908: LD_VAR 0 1
3912: PUSH
3913: LD_INT 1
3915: MINUS
3916: ARRAY
3917: PPUSH
3918: CALL_OW 52
// end ; ComMoveXY ( tmp [ i ] , 43 , 56 ) ;
3922: LD_VAR 0 3
3926: PUSH
3927: LD_VAR 0 1
3931: ARRAY
3932: PPUSH
3933: LD_INT 43
3935: PPUSH
3936: LD_INT 56
3938: PPUSH
3939: CALL_OW 111
// wait ( 0 0$2 ) ;
3943: LD_INT 70
3945: PPUSH
3946: CALL_OW 67
// end ;
3950: GO 3786
3952: POP
3953: POP
// wait ( 0 0$2 ) ;
3954: LD_INT 70
3956: PPUSH
3957: CALL_OW 67
// if not FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) then
3961: LD_INT 7
3963: PPUSH
3964: LD_INT 22
3966: PUSH
3967: LD_INT 2
3969: PUSH
3970: EMPTY
3971: LIST
3972: LIST
3973: PPUSH
3974: CALL_OW 70
3978: NOT
3979: IFFALSE 4177
// begin AddComAgressiveMove ( tmp , 35 , 24 ) ;
3981: LD_VAR 0 3
3985: PPUSH
3986: LD_INT 35
3988: PPUSH
3989: LD_INT 24
3991: PPUSH
3992: CALL_OW 174
// usForces := usForces union UnitFilter ( tmp , [ f_class , 1 ] ) ;
3996: LD_ADDR_EXP 21
4000: PUSH
4001: LD_EXP 21
4005: PUSH
4006: LD_VAR 0 3
4010: PPUSH
4011: LD_INT 25
4013: PUSH
4014: LD_INT 1
4016: PUSH
4017: EMPTY
4018: LIST
4019: LIST
4020: PPUSH
4021: CALL_OW 72
4025: UNION
4026: ST_TO_ADDR
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
4027: LD_INT 22
4029: PUSH
4030: LD_INT 1
4032: PUSH
4033: EMPTY
4034: LIST
4035: LIST
4036: PUSH
4037: LD_INT 30
4039: PUSH
4040: LD_INT 4
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: PPUSH
4051: CALL_OW 69
4055: PUSH
4056: LD_INT 1
4058: ARRAY
4059: PPUSH
4060: CALL_OW 313
4064: PUSH
4065: LD_INT 6
4067: LESS
4068: IFFALSE 4127
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 1 ] ) , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
4070: LD_VAR 0 3
4074: PPUSH
4075: LD_INT 25
4077: PUSH
4078: LD_INT 1
4080: PUSH
4081: EMPTY
4082: LIST
4083: LIST
4084: PPUSH
4085: CALL_OW 72
4089: PPUSH
4090: LD_INT 22
4092: PUSH
4093: LD_INT 1
4095: PUSH
4096: EMPTY
4097: LIST
4098: LIST
4099: PUSH
4100: LD_INT 30
4102: PUSH
4103: LD_INT 4
4105: PUSH
4106: EMPTY
4107: LIST
4108: LIST
4109: PUSH
4110: EMPTY
4111: LIST
4112: LIST
4113: PPUSH
4114: CALL_OW 69
4118: PUSH
4119: LD_INT 1
4121: ARRAY
4122: PPUSH
4123: CALL_OW 180
// if UnitFilter ( tmp , [ f_class , 4 ] ) then
4127: LD_VAR 0 3
4131: PPUSH
4132: LD_INT 25
4134: PUSH
4135: LD_INT 4
4137: PUSH
4138: EMPTY
4139: LIST
4140: LIST
4141: PPUSH
4142: CALL_OW 72
4146: IFFALSE 4175
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 4 ] ) , usLab ) ;
4148: LD_VAR 0 3
4152: PPUSH
4153: LD_INT 25
4155: PUSH
4156: LD_INT 4
4158: PUSH
4159: EMPTY
4160: LIST
4161: LIST
4162: PPUSH
4163: CALL_OW 72
4167: PPUSH
4168: LD_INT 3
4170: PPUSH
4171: CALL_OW 180
// end else
4175: GO 4452
// begin tmp := tmp union FilterUnitsInArea ( retreatArea , [ f_side , 1 ] ) ;
4177: LD_ADDR_VAR 0 3
4181: PUSH
4182: LD_VAR 0 3
4186: PUSH
4187: LD_INT 6
4189: PPUSH
4190: LD_INT 22
4192: PUSH
4193: LD_INT 1
4195: PUSH
4196: EMPTY
4197: LIST
4198: LIST
4199: PPUSH
4200: CALL_OW 70
4204: UNION
4205: ST_TO_ADDR
// ComMoveXY ( tmp , 45 , 54 ) ;
4206: LD_VAR 0 3
4210: PPUSH
4211: LD_INT 45
4213: PPUSH
4214: LD_INT 54
4216: PPUSH
4217: CALL_OW 111
// wait ( 0 0$3 ) ;
4221: LD_INT 105
4223: PPUSH
4224: CALL_OW 67
// AddComAgressiveMove ( tmp diff UnitFilter ( tmp , [ f_class , 4 ] ) , 35 , 24 ) ;
4228: LD_VAR 0 3
4232: PUSH
4233: LD_VAR 0 3
4237: PPUSH
4238: LD_INT 25
4240: PUSH
4241: LD_INT 4
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: PPUSH
4248: CALL_OW 72
4252: DIFF
4253: PPUSH
4254: LD_INT 35
4256: PPUSH
4257: LD_INT 24
4259: PPUSH
4260: CALL_OW 174
// AddComMoveXY ( UnitFilter ( tmp , [ f_class , 4 ] ) , 42 , 49 ) ;
4264: LD_VAR 0 3
4268: PPUSH
4269: LD_INT 25
4271: PUSH
4272: LD_INT 4
4274: PUSH
4275: EMPTY
4276: LIST
4277: LIST
4278: PPUSH
4279: CALL_OW 72
4283: PPUSH
4284: LD_INT 42
4286: PPUSH
4287: LD_INT 49
4289: PPUSH
4290: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4294: LD_INT 35
4296: PPUSH
4297: CALL_OW 67
// for i in tmp do
4301: LD_ADDR_VAR 0 1
4305: PUSH
4306: LD_VAR 0 3
4310: PUSH
4311: FOR_IN
4312: IFFALSE 4443
// if IsDead ( i ) then
4314: LD_VAR 0 1
4318: PPUSH
4319: CALL_OW 301
4323: IFFALSE 4343
// tmp := tmp diff i else
4325: LD_ADDR_VAR 0 3
4329: PUSH
4330: LD_VAR 0 3
4334: PUSH
4335: LD_VAR 0 1
4339: DIFF
4340: ST_TO_ADDR
4341: GO 4441
// if GetClass ( i ) = 1 then
4343: LD_VAR 0 1
4347: PPUSH
4348: CALL_OW 257
4352: PUSH
4353: LD_INT 1
4355: EQUAL
4356: IFFALSE 4441
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 42 , 49 ) > 6 then
4358: LD_VAR 0 1
4362: PPUSH
4363: CALL_OW 256
4367: PUSH
4368: LD_INT 600
4370: LESS
4371: PUSH
4372: LD_VAR 0 1
4376: PPUSH
4377: LD_INT 42
4379: PPUSH
4380: LD_INT 49
4382: PPUSH
4383: CALL_OW 297
4387: PUSH
4388: LD_INT 6
4390: GREATER
4391: AND
4392: IFFALSE 4411
// ComMoveXY ( i , 42 , 49 ) else
4394: LD_VAR 0 1
4398: PPUSH
4399: LD_INT 42
4401: PPUSH
4402: LD_INT 49
4404: PPUSH
4405: CALL_OW 111
4409: GO 4441
// if GetLives ( i ) = 1000 then
4411: LD_VAR 0 1
4415: PPUSH
4416: CALL_OW 256
4420: PUSH
4421: LD_INT 1000
4423: EQUAL
4424: IFFALSE 4441
// ComAgressiveMove ( i , 36 , 25 ) ;
4426: LD_VAR 0 1
4430: PPUSH
4431: LD_INT 36
4433: PPUSH
4434: LD_INT 25
4436: PPUSH
4437: CALL_OW 114
// end ;
4441: GO 4311
4443: POP
4444: POP
// until not tmp ;
4445: LD_VAR 0 3
4449: NOT
4450: IFFALSE 4294
// end ; end ;
4452: PPOPN 3
4454: END
// every 0 0$1 trigger FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) and not attackDeltaAllowed do var i , un , veh ;
4455: LD_INT 7
4457: PPUSH
4458: LD_INT 22
4460: PUSH
4461: LD_INT 2
4463: PUSH
4464: EMPTY
4465: LIST
4466: LIST
4467: PPUSH
4468: CALL_OW 70
4472: PUSH
4473: LD_EXP 14
4477: NOT
4478: AND
4479: IFFALSE 4637
4481: GO 4483
4483: DISABLE
4484: LD_INT 0
4486: PPUSH
4487: PPUSH
4488: PPUSH
// begin for i := 1 to 2 do
4489: LD_ADDR_VAR 0 1
4493: PUSH
4494: DOUBLE
4495: LD_INT 1
4497: DEC
4498: ST_TO_ADDR
4499: LD_INT 2
4501: PUSH
4502: FOR_TO
4503: IFFALSE 4635
// begin wait ( 0 0$3 ) ;
4505: LD_INT 105
4507: PPUSH
4508: CALL_OW 67
// uc_side := 1 ;
4512: LD_ADDR_OWVAR 20
4516: PUSH
4517: LD_INT 1
4519: ST_TO_ADDR
// uc_nation := 1 ;
4520: LD_ADDR_OWVAR 21
4524: PUSH
4525: LD_INT 1
4527: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 90 ) ;
4528: LD_INT 1
4530: PPUSH
4531: LD_INT 1
4533: PPUSH
4534: LD_INT 2
4536: PPUSH
4537: LD_INT 1
4539: PPUSH
4540: LD_INT 1
4542: PPUSH
4543: LD_INT 4
4545: PPUSH
4546: LD_INT 90
4548: PPUSH
4549: CALL 237 0 7
// veh := CreateVehicle ;
4553: LD_ADDR_VAR 0 3
4557: PUSH
4558: CALL_OW 45
4562: ST_TO_ADDR
// PlaceUnitXY ( veh , 29 , 52 , false ) ;
4563: LD_VAR 0 3
4567: PPUSH
4568: LD_INT 29
4570: PPUSH
4571: LD_INT 52
4573: PPUSH
4574: LD_INT 0
4576: PPUSH
4577: CALL_OW 48
// PrepareHuman ( false , 3 , 3 ) ;
4581: LD_INT 0
4583: PPUSH
4584: LD_INT 3
4586: PPUSH
4587: LD_INT 3
4589: PPUSH
4590: CALL_OW 380
// un := CreateHuman ;
4594: LD_ADDR_VAR 0 2
4598: PUSH
4599: CALL_OW 44
4603: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4604: LD_VAR 0 2
4608: PPUSH
4609: LD_VAR 0 3
4613: PPUSH
4614: CALL_OW 52
// ComAgressiveMove ( veh , 36 , 25 ) ;
4618: LD_VAR 0 3
4622: PPUSH
4623: LD_INT 36
4625: PPUSH
4626: LD_INT 25
4628: PPUSH
4629: CALL_OW 114
// end ;
4633: GO 4502
4635: POP
4636: POP
// end ; end_of_file
4637: PPOPN 3
4639: END
// export function Action ; var i , tmp ; begin
4640: LD_INT 0
4642: PPUSH
4643: PPUSH
4644: PPUSH
// InGameOn ;
4645: CALL_OW 8
// DoNotAttack ( 2 , usLab ) ;
4649: LD_INT 2
4651: PPUSH
4652: LD_INT 3
4654: PPUSH
4655: CALL_OW 471
// ComMoveXY ( Heike , 78 , 61 ) ;
4659: LD_EXP 23
4663: PPUSH
4664: LD_INT 78
4666: PPUSH
4667: LD_INT 61
4669: PPUSH
4670: CALL_OW 111
// if Mike then
4674: LD_EXP 25
4678: IFFALSE 4695
// ComMoveXY ( Mike , 80 , 66 ) ;
4680: LD_EXP 25
4684: PPUSH
4685: LD_INT 80
4687: PPUSH
4688: LD_INT 66
4690: PPUSH
4691: CALL_OW 111
// if Givi then
4695: LD_EXP 24
4699: IFFALSE 4716
// ComMoveXY ( Givi , 82 , 66 ) ;
4701: LD_EXP 24
4705: PPUSH
4706: LD_INT 82
4708: PPUSH
4709: LD_INT 66
4711: PPUSH
4712: CALL_OW 111
// if Kamil then
4716: LD_EXP 26
4720: IFFALSE 4737
// ComMoveXY ( Kamil , 82 , 67 ) ;
4722: LD_EXP 26
4726: PPUSH
4727: LD_INT 82
4729: PPUSH
4730: LD_INT 67
4732: PPUSH
4733: CALL_OW 111
// CenterNowOnUnits ( Heike ) ;
4737: LD_EXP 23
4741: PPUSH
4742: CALL_OW 87
// wait ( 0 0$2 ) ;
4746: LD_INT 70
4748: PPUSH
4749: CALL_OW 67
// if Givi and Mike then
4753: LD_EXP 24
4757: PUSH
4758: LD_EXP 25
4762: AND
4763: IFFALSE 5297
// begin AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
4765: LD_EXP 24
4769: PUSH
4770: LD_EXP 25
4774: PUSH
4775: LD_EXP 26
4779: PUSH
4780: EMPTY
4781: LIST
4782: LIST
4783: LIST
4784: PPUSH
4785: LD_EXP 23
4789: PPUSH
4790: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
4794: LD_EXP 23
4798: PPUSH
4799: LD_EXP 24
4803: PPUSH
4804: CALL_OW 179
// Say ( Givi , DG-1-start ) ;
4808: LD_EXP 24
4812: PPUSH
4813: LD_STRING DG-1-start
4815: PPUSH
4816: CALL_OW 88
// Say ( Heike , DH-1-start ) ;
4820: LD_EXP 23
4824: PPUSH
4825: LD_STRING DH-1-start
4827: PPUSH
4828: CALL_OW 88
// AddComTurnUnit ( Mike , Heike ) ;
4832: LD_EXP 25
4836: PPUSH
4837: LD_EXP 23
4841: PPUSH
4842: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
4846: LD_EXP 23
4850: PPUSH
4851: LD_EXP 25
4855: PPUSH
4856: CALL_OW 179
// Say ( Mike , DM-1-start ) ;
4860: LD_EXP 25
4864: PPUSH
4865: LD_STRING DM-1-start
4867: PPUSH
4868: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
4872: LD_EXP 23
4876: PPUSH
4877: LD_STRING DH-2-start
4879: PPUSH
4880: CALL_OW 88
// Say ( Mike , DM-2-start ) ;
4884: LD_EXP 25
4888: PPUSH
4889: LD_STRING DM-2-start
4891: PPUSH
4892: CALL_OW 88
// Say ( Givi , DG-2-start ) ;
4896: LD_EXP 24
4900: PPUSH
4901: LD_STRING DG-2-start
4903: PPUSH
4904: CALL_OW 88
// ComTurnUnit ( Mike , Givi ) ;
4908: LD_EXP 25
4912: PPUSH
4913: LD_EXP 24
4917: PPUSH
4918: CALL_OW 119
// ComTurnUnit ( Heike , Mike ) ;
4922: LD_EXP 23
4926: PPUSH
4927: LD_EXP 25
4931: PPUSH
4932: CALL_OW 119
// Say ( Mike , DM-3-start ) ;
4936: LD_EXP 25
4940: PPUSH
4941: LD_STRING DM-3-start
4943: PPUSH
4944: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
4948: LD_EXP 23
4952: PPUSH
4953: LD_STRING DH-3-start
4955: PPUSH
4956: CALL_OW 88
// ComMoveXY ( [ Heike , Mike , Givi , Kamil ] , 84 , 51 ) ;
4960: LD_EXP 23
4964: PUSH
4965: LD_EXP 25
4969: PUSH
4970: LD_EXP 24
4974: PUSH
4975: LD_EXP 26
4979: PUSH
4980: EMPTY
4981: LIST
4982: LIST
4983: LIST
4984: LIST
4985: PPUSH
4986: LD_INT 84
4988: PPUSH
4989: LD_INT 51
4991: PPUSH
4992: CALL_OW 111
// wait ( 0 0$2 ) ;
4996: LD_INT 70
4998: PPUSH
4999: CALL_OW 67
// Say ( Givi , DG-3-start ) ;
5003: LD_EXP 24
5007: PPUSH
5008: LD_STRING DG-3-start
5010: PPUSH
5011: CALL_OW 88
// ComHold ( [ Heike , Mike , Givi , Kamil ] ) ;
5015: LD_EXP 23
5019: PUSH
5020: LD_EXP 25
5024: PUSH
5025: LD_EXP 24
5029: PUSH
5030: LD_EXP 26
5034: PUSH
5035: EMPTY
5036: LIST
5037: LIST
5038: LIST
5039: LIST
5040: PPUSH
5041: CALL_OW 140
// AddComTurnUnit ( Heike , Givi ) ;
5045: LD_EXP 23
5049: PPUSH
5050: LD_EXP 24
5054: PPUSH
5055: CALL_OW 179
// AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
5059: LD_EXP 24
5063: PUSH
5064: LD_EXP 25
5068: PUSH
5069: LD_EXP 26
5073: PUSH
5074: EMPTY
5075: LIST
5076: LIST
5077: LIST
5078: PPUSH
5079: LD_EXP 23
5083: PPUSH
5084: CALL_OW 179
// Say ( Heike , DH-4-start ) ;
5088: LD_EXP 23
5092: PPUSH
5093: LD_STRING DH-4-start
5095: PPUSH
5096: CALL_OW 88
// Say ( Givi , DG-4-start ) ;
5100: LD_EXP 24
5104: PPUSH
5105: LD_STRING DG-4-start
5107: PPUSH
5108: CALL_OW 88
// Say ( Heike , DH-5-start ) ;
5112: LD_EXP 23
5116: PPUSH
5117: LD_STRING DH-5-start
5119: PPUSH
5120: CALL_OW 88
// Say ( Givi , DG-5-start ) ;
5124: LD_EXP 24
5128: PPUSH
5129: LD_STRING DG-5-start
5131: PPUSH
5132: CALL_OW 88
// Say ( Heike , DH-6-start ) ;
5136: LD_EXP 23
5140: PPUSH
5141: LD_STRING DH-6-start
5143: PPUSH
5144: CALL_OW 88
// if not Kamil then
5148: LD_EXP 26
5152: NOT
5153: IFFALSE 5204
// begin Say ( Mike , DM-6-start ) ;
5155: LD_EXP 25
5159: PPUSH
5160: LD_STRING DM-6-start
5162: PPUSH
5163: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi ] , Mike ) ;
5167: LD_EXP 23
5171: PUSH
5172: LD_EXP 24
5176: PUSH
5177: EMPTY
5178: LIST
5179: LIST
5180: PPUSH
5181: LD_EXP 25
5185: PPUSH
5186: CALL_OW 119
// Say ( Givi , DG-6-start ) ;
5190: LD_EXP 24
5194: PPUSH
5195: LD_STRING DG-6-start
5197: PPUSH
5198: CALL_OW 88
// end else
5202: GO 5283
// begin Say ( Mike , DM-6-start-a ) ;
5204: LD_EXP 25
5208: PPUSH
5209: LD_STRING DM-6-start-a
5211: PPUSH
5212: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi , Mike ] , Kamil ) ;
5216: LD_EXP 23
5220: PUSH
5221: LD_EXP 24
5225: PUSH
5226: LD_EXP 25
5230: PUSH
5231: EMPTY
5232: LIST
5233: LIST
5234: LIST
5235: PPUSH
5236: LD_EXP 26
5240: PPUSH
5241: CALL_OW 119
// ComTurnUnit ( Kamil , Mike ) ;
5245: LD_EXP 26
5249: PPUSH
5250: LD_EXP 25
5254: PPUSH
5255: CALL_OW 119
// Say ( Kamil , DKam-7-start-a ) ;
5259: LD_EXP 26
5263: PPUSH
5264: LD_STRING DKam-7-start-a
5266: PPUSH
5267: CALL_OW 88
// Say ( Givi , DG-6-start-a ) ;
5271: LD_EXP 24
5275: PPUSH
5276: LD_STRING DG-6-start-a
5278: PPUSH
5279: CALL_OW 88
// end ; Say ( Heike , DH-7-start ) ;
5283: LD_EXP 23
5287: PPUSH
5288: LD_STRING DH-7-start
5290: PPUSH
5291: CALL_OW 88
// end else
5295: GO 6019
// if not Mike and Givi then
5297: LD_EXP 25
5301: NOT
5302: PUSH
5303: LD_EXP 24
5307: AND
5308: IFFALSE 5653
// begin AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5310: LD_EXP 24
5314: PUSH
5315: LD_EXP 26
5319: PUSH
5320: EMPTY
5321: LIST
5322: LIST
5323: PPUSH
5324: LD_EXP 23
5328: PPUSH
5329: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
5333: LD_EXP 23
5337: PPUSH
5338: LD_EXP 24
5342: PPUSH
5343: CALL_OW 179
// Say ( Givi , DG-1-start-c ) ;
5347: LD_EXP 24
5351: PPUSH
5352: LD_STRING DG-1-start-c
5354: PPUSH
5355: CALL_OW 88
// Say ( Heike , DH-1-start-c ) ;
5359: LD_EXP 23
5363: PPUSH
5364: LD_STRING DH-1-start-c
5366: PPUSH
5367: CALL_OW 88
// Say ( Givi , DG-2-start-c ) ;
5371: LD_EXP 24
5375: PPUSH
5376: LD_STRING DG-2-start-c
5378: PPUSH
5379: CALL_OW 88
// Say ( Heike , DH-2-start-c ) ;
5383: LD_EXP 23
5387: PPUSH
5388: LD_STRING DH-2-start-c
5390: PPUSH
5391: CALL_OW 88
// Say ( Givi , DG-3-start-c ) ;
5395: LD_EXP 24
5399: PPUSH
5400: LD_STRING DG-3-start-c
5402: PPUSH
5403: CALL_OW 88
// ComMoveXY ( Heike , 83 , 56 ) ;
5407: LD_EXP 23
5411: PPUSH
5412: LD_INT 83
5414: PPUSH
5415: LD_INT 56
5417: PPUSH
5418: CALL_OW 111
// ComMoveXY ( Givi , 83 , 59 ) ;
5422: LD_EXP 24
5426: PPUSH
5427: LD_INT 83
5429: PPUSH
5430: LD_INT 59
5432: PPUSH
5433: CALL_OW 111
// if Kamil then
5437: LD_EXP 26
5441: IFFALSE 5458
// ComMoveXY ( Kamil , 80 , 58 ) ;
5443: LD_EXP 26
5447: PPUSH
5448: LD_INT 80
5450: PPUSH
5451: LD_INT 58
5453: PPUSH
5454: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5458: LD_EXP 23
5462: PPUSH
5463: LD_EXP 24
5467: PPUSH
5468: CALL_OW 179
// AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5472: LD_EXP 24
5476: PUSH
5477: LD_EXP 26
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: PPUSH
5486: LD_EXP 23
5490: PPUSH
5491: CALL_OW 179
// Say ( Heike , DH-3-start-c ) ;
5495: LD_EXP 23
5499: PPUSH
5500: LD_STRING DH-3-start-c
5502: PPUSH
5503: CALL_OW 88
// Say ( Givi , DG-4-start-c ) ;
5507: LD_EXP 24
5511: PPUSH
5512: LD_STRING DG-4-start-c
5514: PPUSH
5515: CALL_OW 88
// Say ( Heike , DH-5-start-c ) ;
5519: LD_EXP 23
5523: PPUSH
5524: LD_STRING DH-5-start-c
5526: PPUSH
5527: CALL_OW 88
// Say ( Givi , DG-5-start-c ) ;
5531: LD_EXP 24
5535: PPUSH
5536: LD_STRING DG-5-start-c
5538: PPUSH
5539: CALL_OW 88
// Say ( Heike , DH-6-start-c ) ;
5543: LD_EXP 23
5547: PPUSH
5548: LD_STRING DH-6-start-c
5550: PPUSH
5551: CALL_OW 88
// Say ( Givi , DG-6-start-c ) ;
5555: LD_EXP 24
5559: PPUSH
5560: LD_STRING DG-6-start-c
5562: PPUSH
5563: CALL_OW 88
// if Kamil then
5567: LD_EXP 26
5571: IFFALSE 5627
// begin ComTurnUnit ( Kamil , Heike ) ;
5573: LD_EXP 26
5577: PPUSH
5578: LD_EXP 23
5582: PPUSH
5583: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5587: LD_EXP 26
5591: PPUSH
5592: LD_STRING DKam-1-start-c
5594: PPUSH
5595: CALL_OW 88
// ComTurnUnit ( Givi , Kamil ) ;
5599: LD_EXP 24
5603: PPUSH
5604: LD_EXP 26
5608: PPUSH
5609: CALL_OW 119
// Say ( Givi , DG-7-start-c ) ;
5613: LD_EXP 24
5617: PPUSH
5618: LD_STRING DG-7-start-c
5620: PPUSH
5621: CALL_OW 88
// end else
5625: GO 5651
// begin Say ( Givi , DG-8-start-c ) ;
5627: LD_EXP 24
5631: PPUSH
5632: LD_STRING DG-8-start-c
5634: PPUSH
5635: CALL_OW 88
// Say ( Heike , DH-7-start-c ) ;
5639: LD_EXP 23
5643: PPUSH
5644: LD_STRING DH-7-start-c
5646: PPUSH
5647: CALL_OW 88
// end ; end else
5651: GO 6019
// if not Givi and Mike then
5653: LD_EXP 24
5657: NOT
5658: PUSH
5659: LD_EXP 25
5663: AND
5664: IFFALSE 5923
// begin AddComTurnUnit ( [ Mike , Kamil ] , Heike ) ;
5666: LD_EXP 25
5670: PUSH
5671: LD_EXP 26
5675: PUSH
5676: EMPTY
5677: LIST
5678: LIST
5679: PPUSH
5680: LD_EXP 23
5684: PPUSH
5685: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
5689: LD_EXP 23
5693: PPUSH
5694: LD_EXP 25
5698: PPUSH
5699: CALL_OW 179
// Say ( Mike , DM-1-start-b ) ;
5703: LD_EXP 25
5707: PPUSH
5708: LD_STRING DM-1-start-b
5710: PPUSH
5711: CALL_OW 88
// Say ( Heike , DH-1-start-b ) ;
5715: LD_EXP 23
5719: PPUSH
5720: LD_STRING DH-1-start-b
5722: PPUSH
5723: CALL_OW 88
// Say ( Mike , DM-2-start-b ) ;
5727: LD_EXP 25
5731: PPUSH
5732: LD_STRING DM-2-start-b
5734: PPUSH
5735: CALL_OW 88
// Say ( Heike , DH-2-start-b ) ;
5739: LD_EXP 23
5743: PPUSH
5744: LD_STRING DH-2-start-b
5746: PPUSH
5747: CALL_OW 88
// Say ( Mike , DM-3-start-b ) ;
5751: LD_EXP 25
5755: PPUSH
5756: LD_STRING DM-3-start-b
5758: PPUSH
5759: CALL_OW 88
// if Kamil then
5763: LD_EXP 26
5767: IFFALSE 5784
// ComMoveXY ( Kamil , 80 , 58 ) ;
5769: LD_EXP 26
5773: PPUSH
5774: LD_INT 80
5776: PPUSH
5777: LD_INT 58
5779: PPUSH
5780: CALL_OW 111
// ComMoveXY ( Heike , 83 , 56 ) ;
5784: LD_EXP 23
5788: PPUSH
5789: LD_INT 83
5791: PPUSH
5792: LD_INT 56
5794: PPUSH
5795: CALL_OW 111
// ComMoveXY ( Mike , 83 , 59 ) ;
5799: LD_EXP 25
5803: PPUSH
5804: LD_INT 83
5806: PPUSH
5807: LD_INT 59
5809: PPUSH
5810: CALL_OW 111
// AddComTurnUnit ( Heike , Mike ) ;
5814: LD_EXP 23
5818: PPUSH
5819: LD_EXP 25
5823: PPUSH
5824: CALL_OW 179
// AddComTurnUnit ( [ Kamil , Mike ] , Heike ) ;
5828: LD_EXP 26
5832: PUSH
5833: LD_EXP 25
5837: PUSH
5838: EMPTY
5839: LIST
5840: LIST
5841: PPUSH
5842: LD_EXP 23
5846: PPUSH
5847: CALL_OW 179
// Say ( Heike , DH-3-start-b ) ;
5851: LD_EXP 23
5855: PPUSH
5856: LD_STRING DH-3-start-b
5858: PPUSH
5859: CALL_OW 88
// Say ( Mike , DM-4-start-b ) ;
5863: LD_EXP 25
5867: PPUSH
5868: LD_STRING DM-4-start-b
5870: PPUSH
5871: CALL_OW 88
// if Kamil then
5875: LD_EXP 26
5879: IFFALSE 5909
// begin ComTurnUnit ( Kamil , Heike ) ;
5881: LD_EXP 26
5885: PPUSH
5886: LD_EXP 23
5890: PPUSH
5891: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5895: LD_EXP 26
5899: PPUSH
5900: LD_STRING DKam-1-start-c
5902: PPUSH
5903: CALL_OW 88
// end else
5907: GO 5921
// begin Say ( Mike , DM-5-start-b ) ;
5909: LD_EXP 25
5913: PPUSH
5914: LD_STRING DM-5-start-b
5916: PPUSH
5917: CALL_OW 88
// end ; end else
5921: GO 6019
// if Kamil then
5923: LD_EXP 26
5927: IFFALSE 6007
// begin AddComTurnUnit ( Heike , Kamil ) ;
5929: LD_EXP 23
5933: PPUSH
5934: LD_EXP 26
5938: PPUSH
5939: CALL_OW 179
// AddComTurnUnit ( Kamil , Heike ) ;
5943: LD_EXP 26
5947: PPUSH
5948: LD_EXP 23
5952: PPUSH
5953: CALL_OW 179
// Say ( Heike , DH-1-start-f ) ;
5957: LD_EXP 23
5961: PPUSH
5962: LD_STRING DH-1-start-f
5964: PPUSH
5965: CALL_OW 88
// Say ( Kamil , DKam-1-start-f ) ;
5969: LD_EXP 26
5973: PPUSH
5974: LD_STRING DKam-1-start-f
5976: PPUSH
5977: CALL_OW 88
// Say ( Heike , DH-2-start-f ) ;
5981: LD_EXP 23
5985: PPUSH
5986: LD_STRING DH-2-start-f
5988: PPUSH
5989: CALL_OW 88
// Say ( Kamil , DKam-2-start-f ) ;
5993: LD_EXP 26
5997: PPUSH
5998: LD_STRING DKam-2-start-f
6000: PPUSH
6001: CALL_OW 88
// end else
6005: GO 6019
// begin Say ( Heike , DH-1-start-d ) ;
6007: LD_EXP 23
6011: PPUSH
6012: LD_STRING DH-1-start-d
6014: PPUSH
6015: CALL_OW 88
// end ; ComFree ( [ Heike , Givi , Mike , Kamil ] ) ;
6019: LD_EXP 23
6023: PUSH
6024: LD_EXP 24
6028: PUSH
6029: LD_EXP 25
6033: PUSH
6034: LD_EXP 26
6038: PUSH
6039: EMPTY
6040: LIST
6041: LIST
6042: LIST
6043: LIST
6044: PPUSH
6045: CALL_OW 139
// InGameOff ;
6049: CALL_OW 9
// ChangeMissionObjectives ( OEast ) ;
6053: LD_STRING OEast
6055: PPUSH
6056: CALL_OW 337
// SaveForQuickRestart ;
6060: CALL_OW 22
// wait ( 0 0$20 ) ;
6064: LD_INT 700
6066: PPUSH
6067: CALL_OW 67
// SendSciToForest ;
6071: CALL 1479 0 0
// if Difficulty = 1 then
6075: LD_OWVAR 67
6079: PUSH
6080: LD_INT 1
6082: EQUAL
6083: IFFALSE 6087
// exit ;
6085: GO 6204
// wait ( [ 5 5$00 , 2 2$30 ] [ Difficulty - 1 ] ) ;
6087: LD_INT 10500
6089: PUSH
6090: LD_INT 5250
6092: PUSH
6093: EMPTY
6094: LIST
6095: LIST
6096: PUSH
6097: LD_OWVAR 67
6101: PUSH
6102: LD_INT 1
6104: MINUS
6105: ARRAY
6106: PPUSH
6107: CALL_OW 67
// if usAlert then
6111: LD_EXP 10
6115: IFFALSE 6119
// exit ;
6117: GO 6204
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
6119: LD_ADDR_VAR 0 3
6123: PUSH
6124: LD_INT 22
6126: PUSH
6127: LD_INT 1
6129: PUSH
6130: EMPTY
6131: LIST
6132: LIST
6133: PUSH
6134: LD_INT 25
6136: PUSH
6137: LD_INT 2
6139: PUSH
6140: EMPTY
6141: LIST
6142: LIST
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: PPUSH
6148: CALL_OW 69
6152: ST_TO_ADDR
// if not tmp then
6153: LD_VAR 0 3
6157: NOT
6158: IFFALSE 6162
// exit ;
6160: GO 6204
// ComExitBuilding ( tmp ) ;
6162: LD_VAR 0 3
6166: PPUSH
6167: CALL_OW 122
// AddComBuild ( tmp , b_breastwork , 40 , 13 , 3 ) ;
6171: LD_VAR 0 3
6175: PPUSH
6176: LD_INT 31
6178: PPUSH
6179: LD_INT 40
6181: PPUSH
6182: LD_INT 13
6184: PPUSH
6185: LD_INT 3
6187: PPUSH
6188: CALL_OW 205
// AddComEnterUnit ( tmp , Delta ) ;
6192: LD_VAR 0 3
6196: PPUSH
6197: LD_INT 1
6199: PPUSH
6200: CALL_OW 180
// end ;
6204: LD_VAR 0 1
6208: RET
// every 3 3$00 do
6209: GO 6211
6211: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
6212: LD_INT 1
6214: PPUSH
6215: LD_INT 570
6217: PPUSH
6218: LD_INT 350
6220: PPUSH
6221: CALL_OW 550
// wait ( 2 2$40 ) ;
6225: LD_INT 5600
6227: PPUSH
6228: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
6232: LD_INT 0
6234: PPUSH
6235: LD_INT 570
6237: PPUSH
6238: LD_INT 350
6240: PPUSH
6241: CALL_OW 550
// end ;
6245: END
// every 0 0$1 trigger not aviradzeSpotted and See ( 2 , Aviradze ) do var i , pepAmount ;
6246: LD_EXP 4
6250: NOT
6251: PUSH
6252: LD_INT 2
6254: PPUSH
6255: LD_EXP 27
6259: PPUSH
6260: CALL_OW 292
6264: AND
6265: IFFALSE 7171
6267: GO 6269
6269: DISABLE
6270: LD_INT 0
6272: PPUSH
6273: PPUSH
// begin aviradzeSpotted := true ;
6274: LD_ADDR_EXP 4
6278: PUSH
6279: LD_INT 1
6281: ST_TO_ADDR
// pepAmount := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ;
6282: LD_ADDR_VAR 0 2
6286: PUSH
6287: LD_INT 22
6289: PUSH
6290: LD_INT 2
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PUSH
6297: LD_INT 21
6299: PUSH
6300: LD_INT 1
6302: PUSH
6303: EMPTY
6304: LIST
6305: LIST
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: PPUSH
6311: CALL_OW 69
6315: ST_TO_ADDR
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6316: LD_EXP 23
6320: PPUSH
6321: LD_EXP 27
6325: PPUSH
6326: CALL_OW 250
6330: PPUSH
6331: LD_EXP 27
6335: PPUSH
6336: CALL_OW 251
6340: PPUSH
6341: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6345: LD_INT 35
6347: PPUSH
6348: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 16 ;
6352: LD_EXP 23
6356: PPUSH
6357: LD_EXP 27
6361: PPUSH
6362: CALL_OW 296
6366: PUSH
6367: LD_INT 16
6369: LESS
6370: IFFALSE 6345
// InGameOn ;
6372: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
6376: LD_INT 5
6378: PPUSH
6379: LD_INT 2
6381: PPUSH
6382: CALL_OW 343
// if pepAmount > 2 then
6386: LD_VAR 0 2
6390: PUSH
6391: LD_INT 2
6393: GREATER
6394: IFFALSE 6410
// Say ( Heike , DH-1-spot ) else
6396: LD_EXP 23
6400: PPUSH
6401: LD_STRING DH-1-spot
6403: PPUSH
6404: CALL_OW 88
6408: GO 6422
// Say ( Heike , DH-1-spot-d ) ;
6410: LD_EXP 23
6414: PPUSH
6415: LD_STRING DH-1-spot-d
6417: PPUSH
6418: CALL_OW 88
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6422: LD_EXP 23
6426: PPUSH
6427: LD_EXP 27
6431: PPUSH
6432: CALL_OW 250
6436: PPUSH
6437: LD_EXP 27
6441: PPUSH
6442: CALL_OW 251
6446: PPUSH
6447: CALL_OW 111
// for i in [ Kamil , Mike , Givi ] do
6451: LD_ADDR_VAR 0 1
6455: PUSH
6456: LD_EXP 26
6460: PUSH
6461: LD_EXP 25
6465: PUSH
6466: LD_EXP 24
6470: PUSH
6471: EMPTY
6472: LIST
6473: LIST
6474: LIST
6475: PUSH
6476: FOR_IN
6477: IFFALSE 6516
// if GetDistUnits ( i , Aviradze ) > 7 then
6479: LD_VAR 0 1
6483: PPUSH
6484: LD_EXP 27
6488: PPUSH
6489: CALL_OW 296
6493: PUSH
6494: LD_INT 7
6496: GREATER
6497: IFFALSE 6514
// ComMoveXY ( i , 102 , 40 ) ;
6499: LD_VAR 0 1
6503: PPUSH
6504: LD_INT 102
6506: PPUSH
6507: LD_INT 40
6509: PPUSH
6510: CALL_OW 111
6514: GO 6476
6516: POP
6517: POP
// repeat wait ( 0 0$1 ) ;
6518: LD_INT 35
6520: PPUSH
6521: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 6 ;
6525: LD_EXP 23
6529: PPUSH
6530: LD_EXP 27
6534: PPUSH
6535: CALL_OW 296
6539: PUSH
6540: LD_INT 6
6542: LESS
6543: IFFALSE 6518
// ComTurnUnit ( Heike , Aviradze ) ;
6545: LD_EXP 23
6549: PPUSH
6550: LD_EXP 27
6554: PPUSH
6555: CALL_OW 119
// ComTurnUnit ( [ Aviradze , Sophia , Kaia ] , Heike ) ;
6559: LD_EXP 27
6563: PUSH
6564: LD_EXP 29
6568: PUSH
6569: LD_EXP 28
6573: PUSH
6574: EMPTY
6575: LIST
6576: LIST
6577: LIST
6578: PPUSH
6579: LD_EXP 23
6583: PPUSH
6584: CALL_OW 119
// if pepAmount > 1 then
6588: LD_VAR 0 2
6592: PUSH
6593: LD_INT 1
6595: GREATER
6596: IFFALSE 6648
// begin wait ( 0 0$2 ) ;
6598: LD_INT 70
6600: PPUSH
6601: CALL_OW 67
// ComTurnUnit ( [ Kamil , Mike , Givi ] , Aviradze ) ;
6605: LD_EXP 26
6609: PUSH
6610: LD_EXP 25
6614: PUSH
6615: LD_EXP 24
6619: PUSH
6620: EMPTY
6621: LIST
6622: LIST
6623: LIST
6624: PPUSH
6625: LD_EXP 27
6629: PPUSH
6630: CALL_OW 119
// Say ( Heike , DH-2-spot ) ;
6634: LD_EXP 23
6638: PPUSH
6639: LD_STRING DH-2-spot
6641: PPUSH
6642: CALL_OW 88
// end else
6646: GO 6660
// Say ( Heike , DH-2-spot-d ) ;
6648: LD_EXP 23
6652: PPUSH
6653: LD_STRING DH-2-spot-d
6655: PPUSH
6656: CALL_OW 88
// Say ( Aviradze , DA-2-spot ) ;
6660: LD_EXP 27
6664: PPUSH
6665: LD_STRING DA-2-spot
6667: PPUSH
6668: CALL_OW 88
// Say ( Heike , DH-3-spot ) ;
6672: LD_EXP 23
6676: PPUSH
6677: LD_STRING DH-3-spot
6679: PPUSH
6680: CALL_OW 88
// ComMoveUnit ( Kaia , Heike ) ;
6684: LD_EXP 28
6688: PPUSH
6689: LD_EXP 23
6693: PPUSH
6694: CALL_OW 112
// ComTurnUnit ( Heike , Kaia ) ;
6698: LD_EXP 23
6702: PPUSH
6703: LD_EXP 28
6707: PPUSH
6708: CALL_OW 119
// wait ( 0 0$0.3 ) ;
6712: LD_INT 10
6714: PPUSH
6715: CALL_OW 67
// Say ( Kaia , DK-3-spot ) ;
6719: LD_EXP 28
6723: PPUSH
6724: LD_STRING DK-3-spot
6726: PPUSH
6727: CALL_OW 88
// ComTurnUnit ( Kaia , Heike ) ;
6731: LD_EXP 28
6735: PPUSH
6736: LD_EXP 23
6740: PPUSH
6741: CALL_OW 119
// Say ( Heike , DH-4-spot ) ;
6745: LD_EXP 23
6749: PPUSH
6750: LD_STRING DH-4-spot
6752: PPUSH
6753: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6757: LD_INT 10
6759: PPUSH
6760: CALL_OW 67
// ComTurnUnit ( Heike , Aviradze ) ;
6764: LD_EXP 23
6768: PPUSH
6769: LD_EXP 27
6773: PPUSH
6774: CALL_OW 119
// Say ( Aviradze , DA-4-spot ) ;
6778: LD_EXP 27
6782: PPUSH
6783: LD_STRING DA-4-spot
6785: PPUSH
6786: CALL_OW 88
// ComTurnUnit ( Kaia , Aviradze ) ;
6790: LD_EXP 28
6794: PPUSH
6795: LD_EXP 27
6799: PPUSH
6800: CALL_OW 119
// Say ( Kaia , DK-4-spot ) ;
6804: LD_EXP 28
6808: PPUSH
6809: LD_STRING DK-4-spot
6811: PPUSH
6812: CALL_OW 88
// ComTurnUnit ( Aviradze , Kaia ) ;
6816: LD_EXP 27
6820: PPUSH
6821: LD_EXP 28
6825: PPUSH
6826: CALL_OW 119
// Say ( Aviradze , DA-5-spot ) ;
6830: LD_EXP 27
6834: PPUSH
6835: LD_STRING DA-5-spot
6837: PPUSH
6838: CALL_OW 88
// Say ( Kaia , DK-5-spot ) ;
6842: LD_EXP 28
6846: PPUSH
6847: LD_STRING DK-5-spot
6849: PPUSH
6850: CALL_OW 88
// if pepAmount = 1 then
6854: LD_VAR 0 2
6858: PUSH
6859: LD_INT 1
6861: EQUAL
6862: IFFALSE 6876
// Say ( Heike , DH-5-spot-f ) ;
6864: LD_EXP 23
6868: PPUSH
6869: LD_STRING DH-5-spot-f
6871: PPUSH
6872: CALL_OW 88
// if pepAmount < 3 then
6876: LD_VAR 0 2
6880: PUSH
6881: LD_INT 3
6883: LESS
6884: IFFALSE 6900
// Say ( Aviradze , DA-6-spot-f ) else
6886: LD_EXP 27
6890: PPUSH
6891: LD_STRING DA-6-spot-f
6893: PPUSH
6894: CALL_OW 88
6898: GO 6936
// if pepAmount < 4 then
6900: LD_VAR 0 2
6904: PUSH
6905: LD_INT 4
6907: LESS
6908: IFFALSE 6924
// Say ( Aviradze , DA-6-spot-c ) else
6910: LD_EXP 27
6914: PPUSH
6915: LD_STRING DA-6-spot-c
6917: PPUSH
6918: CALL_OW 88
6922: GO 6936
// Say ( Aviradze , DA-6-spot ) ;
6924: LD_EXP 27
6928: PPUSH
6929: LD_STRING DA-6-spot
6931: PPUSH
6932: CALL_OW 88
// if Kamil then
6936: LD_EXP 26
6940: IFFALSE 6954
// Say ( Kamil , DKam-6-spot ) ;
6942: LD_EXP 26
6946: PPUSH
6947: LD_STRING DKam-6-spot
6949: PPUSH
6950: CALL_OW 88
// Say ( Kaia , DK-6-spot ) ;
6954: LD_EXP 28
6958: PPUSH
6959: LD_STRING DK-6-spot
6961: PPUSH
6962: CALL_OW 88
// ComTurnUnit ( Aviradze , Heike ) ;
6966: LD_EXP 27
6970: PPUSH
6971: LD_EXP 23
6975: PPUSH
6976: CALL_OW 119
// Say ( Aviradze , DA-7-spot ) ;
6980: LD_EXP 27
6984: PPUSH
6985: LD_STRING DA-7-spot
6987: PPUSH
6988: CALL_OW 88
// Say ( Heike , DH-7-spot ) ;
6992: LD_EXP 23
6996: PPUSH
6997: LD_STRING DH-7-spot
6999: PPUSH
7000: CALL_OW 88
// if sciCounterKill >= 3 then
7004: LD_EXP 9
7008: PUSH
7009: LD_INT 3
7011: GREATEREQUAL
7012: IFFALSE 7038
// begin Say ( Heike , DH-7-spot-a ) ;
7014: LD_EXP 23
7018: PPUSH
7019: LD_STRING DH-7-spot-a
7021: PPUSH
7022: CALL_OW 88
// Say ( Aviradze , DA-8-spot-a ) ;
7026: LD_EXP 27
7030: PPUSH
7031: LD_STRING DA-8-spot-a
7033: PPUSH
7034: CALL_OW 88
// end ; InGameOff ;
7038: CALL_OW 9
// if sciCounterKill < 3 then
7042: LD_EXP 9
7046: PUSH
7047: LD_INT 3
7049: LESS
7050: IFFALSE 7109
// begin SetSide ( Kaia , 2 ) ;
7052: LD_EXP 28
7056: PPUSH
7057: LD_INT 2
7059: PPUSH
7060: CALL_OW 235
// ComFree ( Kaia ) ;
7064: LD_EXP 28
7068: PPUSH
7069: CALL_OW 139
// if Kamil then
7073: LD_EXP 26
7077: IFFALSE 7100
// begin ComHold ( Kamil ) ;
7079: LD_EXP 26
7083: PPUSH
7084: CALL_OW 140
// SetSide ( Kamil , 5 ) ;
7088: LD_EXP 26
7092: PPUSH
7093: LD_INT 5
7095: PPUSH
7096: CALL_OW 235
// end ; ChangeMissionObjectives ( OSci ) ;
7100: LD_STRING OSci
7102: PPUSH
7103: CALL_OW 337
// end else
7107: GO 7171
// begin aviradzeQuestDone := true ;
7109: LD_ADDR_EXP 8
7113: PUSH
7114: LD_INT 1
7116: ST_TO_ADDR
// attackDeltaAllowed := true ;
7117: LD_ADDR_EXP 14
7121: PUSH
7122: LD_INT 1
7124: ST_TO_ADDR
// ChangeMissionObjectives ( ODelta2 ) ;
7125: LD_STRING ODelta2
7127: PPUSH
7128: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
7132: LD_ADDR_VAR 0 1
7136: PUSH
7137: LD_INT 22
7139: PUSH
7140: LD_INT 5
7142: PUSH
7143: EMPTY
7144: LIST
7145: LIST
7146: PPUSH
7147: CALL_OW 69
7151: PUSH
7152: FOR_IN
7153: IFFALSE 7169
// SetSide ( i , 2 ) ;
7155: LD_VAR 0 1
7159: PPUSH
7160: LD_INT 2
7162: PPUSH
7163: CALL_OW 235
7167: GO 7152
7169: POP
7170: POP
// end ; end ;
7171: PPOPN 2
7173: END
// every 0 0$1 trigger not sciSpotted and GetDistUnits ( NearestUnitToUnit ( usSci , Heike ) , Heike ) < 8 and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and not aviradzeSpotted do
7174: LD_EXP 7
7178: NOT
7179: PUSH
7180: LD_EXP 22
7184: PPUSH
7185: LD_EXP 23
7189: PPUSH
7190: CALL_OW 74
7194: PPUSH
7195: LD_EXP 23
7199: PPUSH
7200: CALL_OW 296
7204: PUSH
7205: LD_INT 8
7207: LESS
7208: AND
7209: PUSH
7210: LD_INT 2
7212: PPUSH
7213: LD_EXP 22
7217: PPUSH
7218: LD_EXP 23
7222: PPUSH
7223: CALL_OW 74
7227: PPUSH
7228: CALL_OW 292
7232: AND
7233: PUSH
7234: LD_INT 22
7236: PUSH
7237: LD_INT 2
7239: PUSH
7240: EMPTY
7241: LIST
7242: LIST
7243: PUSH
7244: LD_INT 21
7246: PUSH
7247: LD_INT 1
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: PUSH
7254: EMPTY
7255: LIST
7256: LIST
7257: PPUSH
7258: CALL_OW 69
7262: PUSH
7263: LD_INT 1
7265: GREATER
7266: AND
7267: PUSH
7268: LD_EXP 4
7272: NOT
7273: AND
7274: IFFALSE 7318
7276: GO 7278
7278: DISABLE
// begin sciSpotted := true ;
7279: LD_ADDR_EXP 7
7283: PUSH
7284: LD_INT 1
7286: ST_TO_ADDR
// CenterNowOnUnits ( NearestUnitToUnit ( usSci , Heike ) ) ;
7287: LD_EXP 22
7291: PPUSH
7292: LD_EXP 23
7296: PPUSH
7297: CALL_OW 74
7301: PPUSH
7302: CALL_OW 87
// Say ( Heike , DH-1-sci ) ;
7306: LD_EXP 23
7310: PPUSH
7311: LD_STRING DH-1-sci
7313: PPUSH
7314: CALL_OW 88
// end ;
7318: END
// every 0 0$1 trigger aviradzeSpotted and not sciSpotted and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and aviradzeSpotted and not aviradzeQuestDone do var un ;
7319: LD_EXP 4
7323: PUSH
7324: LD_EXP 7
7328: NOT
7329: AND
7330: PUSH
7331: LD_INT 2
7333: PPUSH
7334: LD_EXP 22
7338: PPUSH
7339: LD_EXP 23
7343: PPUSH
7344: CALL_OW 74
7348: PPUSH
7349: CALL_OW 292
7353: AND
7354: PUSH
7355: LD_INT 22
7357: PUSH
7358: LD_INT 2
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: PUSH
7365: LD_INT 21
7367: PUSH
7368: LD_INT 1
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: PUSH
7375: EMPTY
7376: LIST
7377: LIST
7378: PPUSH
7379: CALL_OW 69
7383: PUSH
7384: LD_INT 1
7386: GREATER
7387: AND
7388: PUSH
7389: LD_EXP 4
7393: AND
7394: PUSH
7395: LD_EXP 8
7399: NOT
7400: AND
7401: IFFALSE 7542
7403: GO 7405
7405: DISABLE
7406: LD_INT 0
7408: PPUSH
// begin sciSpotted := true ;
7409: LD_ADDR_EXP 7
7413: PUSH
7414: LD_INT 1
7416: ST_TO_ADDR
// un := NearestUnitToUnit ( usSci , Heike ) ;
7417: LD_ADDR_VAR 0 1
7421: PUSH
7422: LD_EXP 22
7426: PPUSH
7427: LD_EXP 23
7431: PPUSH
7432: CALL_OW 74
7436: ST_TO_ADDR
// DialogueOn ;
7437: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 2 , - 3 ) ;
7441: LD_VAR 0 1
7445: PPUSH
7446: CALL_OW 250
7450: PPUSH
7451: LD_VAR 0 1
7455: PPUSH
7456: CALL_OW 251
7460: PPUSH
7461: LD_INT 2
7463: PPUSH
7464: LD_INT 3
7466: NEG
7467: PPUSH
7468: CALL_OW 330
// CenterNowOnUnits ( un ) ;
7472: LD_VAR 0 1
7476: PPUSH
7477: CALL_OW 87
// Say ( Heike , DH-1-sci-a ) ;
7481: LD_EXP 23
7485: PPUSH
7486: LD_STRING DH-1-sci-a
7488: PPUSH
7489: CALL_OW 88
// if Mike then
7493: LD_EXP 25
7497: IFFALSE 7511
// Say ( Mike , DM-1-sci-a ) ;
7499: LD_EXP 25
7503: PPUSH
7504: LD_STRING DM-1-sci-a
7506: PPUSH
7507: CALL_OW 88
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 2 ) ;
7511: LD_VAR 0 1
7515: PPUSH
7516: CALL_OW 250
7520: PPUSH
7521: LD_VAR 0 1
7525: PPUSH
7526: CALL_OW 251
7530: PPUSH
7531: LD_INT 2
7533: PPUSH
7534: CALL_OW 331
// DialogueOff ;
7538: CALL_OW 7
// end ;
7542: PPOPN 1
7544: END
// every 0 0$1 trigger usAlert and ( GetLives ( Gladstone ) < 1000 or GetLives ( usLab ) < 999 ) do var veh ;
7545: LD_EXP 10
7549: PUSH
7550: LD_EXP 19
7554: PPUSH
7555: CALL_OW 256
7559: PUSH
7560: LD_INT 1000
7562: LESS
7563: PUSH
7564: LD_INT 3
7566: PPUSH
7567: CALL_OW 256
7571: PUSH
7572: LD_INT 999
7574: LESS
7575: OR
7576: AND
7577: IFFALSE 7833
7579: GO 7581
7581: DISABLE
7582: LD_INT 0
7584: PPUSH
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
7585: LD_ADDR_VAR 0 1
7589: PUSH
7590: LD_INT 22
7592: PUSH
7593: LD_INT 1
7595: PUSH
7596: EMPTY
7597: LIST
7598: LIST
7599: PUSH
7600: LD_INT 21
7602: PUSH
7603: LD_INT 2
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: PUSH
7610: LD_INT 58
7612: PUSH
7613: EMPTY
7614: LIST
7615: PUSH
7616: EMPTY
7617: LIST
7618: LIST
7619: LIST
7620: PPUSH
7621: CALL_OW 69
7625: ST_TO_ADDR
// if veh and IsOk ( Gladstone ) then
7626: LD_VAR 0 1
7630: PUSH
7631: LD_EXP 19
7635: PPUSH
7636: CALL_OW 302
7640: AND
7641: IFFALSE 7683
// begin if IsInUnit ( Gladstone ) then
7643: LD_EXP 19
7647: PPUSH
7648: CALL_OW 310
7652: IFFALSE 7663
// ComExitBuilding ( Gladstone ) ;
7654: LD_EXP 19
7658: PPUSH
7659: CALL_OW 122
// AddComEnterUnit ( Gladstone , veh [ 1 ] ) ;
7663: LD_EXP 19
7667: PPUSH
7668: LD_VAR 0 1
7672: PUSH
7673: LD_INT 1
7675: ARRAY
7676: PPUSH
7677: CALL_OW 180
// end else
7681: GO 7703
// if IsInUnit ( Gladstone ) then
7683: LD_EXP 19
7687: PPUSH
7688: CALL_OW 310
7692: IFFALSE 7703
// ComExitBuilding ( Gladstone ) ;
7694: LD_EXP 19
7698: PPUSH
7699: CALL_OW 122
// AddComMoveXY ( Gladstone , 27 , 51 ) ;
7703: LD_EXP 19
7707: PPUSH
7708: LD_INT 27
7710: PPUSH
7711: LD_INT 51
7713: PPUSH
7714: CALL_OW 171
// Say ( Gladstone , D8-Glad-2 ) ;
7718: LD_EXP 19
7722: PPUSH
7723: LD_STRING D8-Glad-2
7725: PPUSH
7726: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7730: LD_INT 35
7732: PPUSH
7733: CALL_OW 67
// until IsAt ( Gladstone , 27 , 51 ) or IsAt ( IsInUnit ( Gladstone ) , 27 , 51 ) or IsDead ( Gladstone ) ;
7737: LD_EXP 19
7741: PPUSH
7742: LD_INT 27
7744: PPUSH
7745: LD_INT 51
7747: PPUSH
7748: CALL_OW 307
7752: PUSH
7753: LD_EXP 19
7757: PPUSH
7758: CALL_OW 310
7762: PPUSH
7763: LD_INT 27
7765: PPUSH
7766: LD_INT 51
7768: PPUSH
7769: CALL_OW 307
7773: OR
7774: PUSH
7775: LD_EXP 19
7779: PPUSH
7780: CALL_OW 301
7784: OR
7785: IFFALSE 7730
// if IsDead ( Gladstone ) then
7787: LD_EXP 19
7791: PPUSH
7792: CALL_OW 301
7796: IFFALSE 7800
// exit ;
7798: GO 7833
// RemoveUnit ( HexInfo ( 27 , 51 ) ) ;
7800: LD_INT 27
7802: PPUSH
7803: LD_INT 51
7805: PPUSH
7806: CALL_OW 428
7810: PPUSH
7811: CALL_OW 64
// gladstoneEscaped := true ;
7815: LD_ADDR_EXP 12
7819: PUSH
7820: LD_INT 1
7822: ST_TO_ADDR
// SaveVariable ( true , 02_GladstoneEscaped ) ;
7823: LD_INT 1
7825: PPUSH
7826: LD_STRING 02_GladstoneEscaped
7828: PPUSH
7829: CALL_OW 39
// end ;
7833: PPOPN 1
7835: END
// every 0 0$1 trigger aviradzeSpotted and ( sciCounterKill >= 3 or not usSci ) and not aviradzeQuestDone do
7836: LD_EXP 4
7840: PUSH
7841: LD_EXP 9
7845: PUSH
7846: LD_INT 3
7848: GREATEREQUAL
7849: PUSH
7850: LD_EXP 22
7854: NOT
7855: OR
7856: AND
7857: PUSH
7858: LD_EXP 8
7862: NOT
7863: AND
7864: IFFALSE 7907
7866: GO 7868
7868: DISABLE
// begin aviradzeQuestDone := true ;
7869: LD_ADDR_EXP 8
7873: PUSH
7874: LD_INT 1
7876: ST_TO_ADDR
// Say ( Heike , DH-1-quest-done ) ;
7877: LD_EXP 23
7881: PPUSH
7882: LD_STRING DH-1-quest-done
7884: PPUSH
7885: CALL_OW 88
// if Givi then
7889: LD_EXP 24
7893: IFFALSE 7907
// Say ( Givi , DG-1-quest-done ) ;
7895: LD_EXP 24
7899: PPUSH
7900: LD_STRING DG-1-quest-done
7902: PPUSH
7903: CALL_OW 88
// end ;
7907: END
// every 0 0$1 trigger See ( 5 , Heike ) and GetDistUnits ( Heike , Aviradze ) < 6 and aviradzeQuestDone and not attackDeltaAllowed do var i ;
7908: LD_INT 5
7910: PPUSH
7911: LD_EXP 23
7915: PPUSH
7916: CALL_OW 292
7920: PUSH
7921: LD_EXP 23
7925: PPUSH
7926: LD_EXP 27
7930: PPUSH
7931: CALL_OW 296
7935: PUSH
7936: LD_INT 6
7938: LESS
7939: AND
7940: PUSH
7941: LD_EXP 8
7945: AND
7946: PUSH
7947: LD_EXP 14
7951: NOT
7952: AND
7953: IFFALSE 8091
7955: GO 7957
7957: DISABLE
7958: LD_INT 0
7960: PPUSH
// begin attackDeltaAllowed := true ;
7961: LD_ADDR_EXP 14
7965: PUSH
7966: LD_INT 1
7968: ST_TO_ADDR
// InGameOn ;
7969: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
7973: LD_EXP 23
7977: PPUSH
7978: CALL_OW 87
// wait ( 0 0$0.3 ) ;
7982: LD_INT 10
7984: PPUSH
7985: CALL_OW 67
// ComTurnUnit ( Aviradze , Heike ) ;
7989: LD_EXP 27
7993: PPUSH
7994: LD_EXP 23
7998: PPUSH
7999: CALL_OW 119
// ComTurnUnit ( Heike , Aviradze ) ;
8003: LD_EXP 23
8007: PPUSH
8008: LD_EXP 27
8012: PPUSH
8013: CALL_OW 119
// Say ( Heike , DH-1-return ) ;
8017: LD_EXP 23
8021: PPUSH
8022: LD_STRING DH-1-return
8024: PPUSH
8025: CALL_OW 88
// Say ( Aviradze , DA-1-return ) ;
8029: LD_EXP 27
8033: PPUSH
8034: LD_STRING DA-1-return
8036: PPUSH
8037: CALL_OW 88
// InGameOff ;
8041: CALL_OW 9
// ChangeMissionObjectives ( ODelta ) ;
8045: LD_STRING ODelta
8047: PPUSH
8048: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
8052: LD_ADDR_VAR 0 1
8056: PUSH
8057: LD_INT 22
8059: PUSH
8060: LD_INT 5
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: PPUSH
8067: CALL_OW 69
8071: PUSH
8072: FOR_IN
8073: IFFALSE 8089
// SetSide ( i , 2 ) ;
8075: LD_VAR 0 1
8079: PPUSH
8080: LD_INT 2
8082: PPUSH
8083: CALL_OW 235
8087: GO 8072
8089: POP
8090: POP
// end ;
8091: PPOPN 1
8093: END
// every 0 0$1 trigger usAlert and not attackDeltaAllowed do
8094: LD_EXP 10
8098: PUSH
8099: LD_EXP 14
8103: NOT
8104: AND
8105: IFFALSE 8118
8107: GO 8109
8109: DISABLE
// spottedBeforeRadio := true ;
8110: LD_ADDR_EXP 6
8114: PUSH
8115: LD_INT 1
8117: ST_TO_ADDR
8118: END
// every 0 0$1 trigger attackDeltaAllowed and IsOk ( Markov ) and GetSide ( Delta ) = 1 and IsOk ( Lynch ) and not usAlert do var i , k , tmp ;
8119: LD_EXP 14
8123: PUSH
8124: LD_EXP 30
8128: PPUSH
8129: CALL_OW 302
8133: AND
8134: PUSH
8135: LD_INT 1
8137: PPUSH
8138: CALL_OW 255
8142: PUSH
8143: LD_INT 1
8145: EQUAL
8146: AND
8147: PUSH
8148: LD_EXP 20
8152: PPUSH
8153: CALL_OW 302
8157: AND
8158: PUSH
8159: LD_EXP 10
8163: NOT
8164: AND
8165: IFFALSE 9381
8167: GO 8169
8169: DISABLE
8170: LD_INT 0
8172: PPUSH
8173: PPUSH
8174: PPUSH
// begin trap := 0 ;
8175: LD_ADDR_EXP 17
8179: PUSH
8180: LD_INT 0
8182: ST_TO_ADDR
// wait ( 0 0$12 ) ;
8183: LD_INT 420
8185: PPUSH
8186: CALL_OW 67
// DialogueOn ;
8190: CALL_OW 6
// Say ( Markov , DMar-1-radio ) ;
8194: LD_EXP 30
8198: PPUSH
8199: LD_STRING DMar-1-radio
8201: PPUSH
8202: CALL_OW 88
// Say ( Heike , DH-1-radio ) ;
8206: LD_EXP 23
8210: PPUSH
8211: LD_STRING DH-1-radio
8213: PPUSH
8214: CALL_OW 88
// Say ( Markov , DMar-2-radio ) ;
8218: LD_EXP 30
8222: PPUSH
8223: LD_STRING DMar-2-radio
8225: PPUSH
8226: CALL_OW 88
// Say ( Heike , DH-2-radio ) ;
8230: LD_EXP 23
8234: PPUSH
8235: LD_STRING DH-2-radio
8237: PPUSH
8238: CALL_OW 88
// if IsOk ( Kamil ) or IsOk ( Sophia ) then
8242: LD_EXP 26
8246: PPUSH
8247: CALL_OW 302
8251: PUSH
8252: LD_EXP 29
8256: PPUSH
8257: CALL_OW 302
8261: OR
8262: IFFALSE 9381
// begin case Query ( Q1Trap ) of 1 :
8264: LD_STRING Q1Trap
8266: PPUSH
8267: CALL_OW 97
8271: PUSH
8272: LD_INT 1
8274: DOUBLE
8275: EQUAL
8276: IFTRUE 8280
8278: GO 8474
8280: POP
// begin if IsOk ( Kamil ) then
8281: LD_EXP 26
8285: PPUSH
8286: CALL_OW 302
8290: IFFALSE 8369
// begin Say ( Kamil , DKam-2-radio ) ;
8292: LD_EXP 26
8296: PPUSH
8297: LD_STRING DKam-2-radio
8299: PPUSH
8300: CALL_OW 88
// Say ( Kamil , DKam-3-radio ) ;
8304: LD_EXP 26
8308: PPUSH
8309: LD_STRING DKam-3-radio
8311: PPUSH
8312: CALL_OW 88
// SayRadio ( Lynch , DDelta-3-radio ) ;
8316: LD_EXP 20
8320: PPUSH
8321: LD_STRING DDelta-3-radio
8323: PPUSH
8324: CALL_OW 94
// dwait ( 0 0$01 ) ;
8328: LD_INT 35
8330: PPUSH
8331: CALL_OW 68
// Say ( Heike , DH-3-radio ) ;
8335: LD_EXP 23
8339: PPUSH
8340: LD_STRING DH-3-radio
8342: PPUSH
8343: CALL_OW 88
// Say ( Kamil , DKam-4-radio ) ;
8347: LD_EXP 26
8351: PPUSH
8352: LD_STRING DKam-4-radio
8354: PPUSH
8355: CALL_OW 88
// trap := 1 ;
8359: LD_ADDR_EXP 17
8363: PUSH
8364: LD_INT 1
8366: ST_TO_ADDR
// end else
8367: GO 8468
// begin Say ( Sophia , DS-1-radio ) ;
8369: LD_EXP 29
8373: PPUSH
8374: LD_STRING DS-1-radio
8376: PPUSH
8377: CALL_OW 88
// Say ( Sophia , DS-2-radio ) ;
8381: LD_EXP 29
8385: PPUSH
8386: LD_STRING DS-2-radio
8388: PPUSH
8389: CALL_OW 88
// SayRadio ( Lynch , DDelta-2-radio-s ) ;
8393: LD_EXP 20
8397: PPUSH
8398: LD_STRING DDelta-2-radio-s
8400: PPUSH
8401: CALL_OW 94
// Say ( Sophia , DS-3-radio ) ;
8405: LD_EXP 29
8409: PPUSH
8410: LD_STRING DS-3-radio
8412: PPUSH
8413: CALL_OW 88
// SayRadio ( Lynch , DDelta-3-radio-s ) ;
8417: LD_EXP 20
8421: PPUSH
8422: LD_STRING DDelta-3-radio-s
8424: PPUSH
8425: CALL_OW 94
// Say ( Sophia , DS-4-radio-s ) ;
8429: LD_EXP 29
8433: PPUSH
8434: LD_STRING DS-4-radio-s
8436: PPUSH
8437: CALL_OW 88
// dwait ( 0 0$01 ) ;
8441: LD_INT 35
8443: PPUSH
8444: CALL_OW 68
// Say ( Heike , DH-1-trap ) ;
8448: LD_EXP 23
8452: PPUSH
8453: LD_STRING DH-1-trap
8455: PPUSH
8456: CALL_OW 88
// trap := 0 ;
8460: LD_ADDR_EXP 17
8464: PUSH
8465: LD_INT 0
8467: ST_TO_ADDR
// end ; DialogueOff ;
8468: CALL_OW 7
// end ; 2 :
8472: GO 8492
8474: LD_INT 2
8476: DOUBLE
8477: EQUAL
8478: IFTRUE 8482
8480: GO 8491
8482: POP
// begin DialogueOff ;
8483: CALL_OW 7
// exit ;
8487: GO 9381
// end ; end ;
8489: GO 8492
8491: POP
// if trap = 1 then
8492: LD_EXP 17
8496: PUSH
8497: LD_INT 1
8499: EQUAL
8500: IFFALSE 8952
// begin PlaceSeeing ( 64 , 32 , 2 , 8 ) ;
8502: LD_INT 64
8504: PPUSH
8505: LD_INT 32
8507: PPUSH
8508: LD_INT 2
8510: PPUSH
8511: LD_INT 8
8513: PPUSH
8514: CALL_OW 330
// CenterOnXY ( 64 , 32 ) ;
8518: LD_INT 64
8520: PPUSH
8521: LD_INT 32
8523: PPUSH
8524: CALL_OW 84
// tmp := [ ] ;
8528: LD_ADDR_VAR 0 3
8532: PUSH
8533: EMPTY
8534: ST_TO_ADDR
// k := 3 ;
8535: LD_ADDR_VAR 0 2
8539: PUSH
8540: LD_INT 3
8542: ST_TO_ADDR
// if usForces < 3 then
8543: LD_EXP 21
8547: PUSH
8548: LD_INT 3
8550: LESS
8551: IFFALSE 8563
// k := usForces ;
8553: LD_ADDR_VAR 0 2
8557: PUSH
8558: LD_EXP 21
8562: ST_TO_ADDR
// for i := 1 to k do
8563: LD_ADDR_VAR 0 1
8567: PUSH
8568: DOUBLE
8569: LD_INT 1
8571: DEC
8572: ST_TO_ADDR
8573: LD_VAR 0 2
8577: PUSH
8578: FOR_TO
8579: IFFALSE 8634
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
8581: LD_ADDR_VAR 0 3
8585: PUSH
8586: LD_VAR 0 3
8590: PPUSH
8591: LD_VAR 0 3
8595: PUSH
8596: LD_INT 1
8598: PLUS
8599: PPUSH
8600: LD_EXP 21
8604: PUSH
8605: LD_INT 1
8607: ARRAY
8608: PPUSH
8609: CALL_OW 1
8613: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
8614: LD_ADDR_EXP 21
8618: PUSH
8619: LD_EXP 21
8623: PPUSH
8624: LD_INT 1
8626: PPUSH
8627: CALL_OW 3
8631: ST_TO_ADDR
// end ;
8632: GO 8578
8634: POP
8635: POP
// usPatrol := tmp ;
8636: LD_ADDR_EXP 16
8640: PUSH
8641: LD_VAR 0 3
8645: ST_TO_ADDR
// for i in tmp do
8646: LD_ADDR_VAR 0 1
8650: PUSH
8651: LD_VAR 0 3
8655: PUSH
8656: FOR_IN
8657: IFFALSE 8787
// begin if IsInUnit ( i ) then
8659: LD_VAR 0 1
8663: PPUSH
8664: CALL_OW 310
8668: IFFALSE 8679
// ComExitBuilding ( i ) ;
8670: LD_VAR 0 1
8674: PPUSH
8675: CALL_OW 122
// AddComAgressiveMove ( i , 63 , 31 ) ;
8679: LD_VAR 0 1
8683: PPUSH
8684: LD_INT 63
8686: PPUSH
8687: LD_INT 31
8689: PPUSH
8690: CALL_OW 174
// AddComWait ( i , 0 0$2 ) ;
8694: LD_VAR 0 1
8698: PPUSH
8699: LD_INT 70
8701: PPUSH
8702: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 43 ) ;
8706: LD_VAR 0 1
8710: PPUSH
8711: LD_INT 103
8713: PPUSH
8714: LD_INT 43
8716: PPUSH
8717: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
8721: LD_VAR 0 1
8725: PPUSH
8726: LD_INT 105
8728: PPUSH
8729: CALL_OW 202
// if Difficulty > 1 then
8733: LD_OWVAR 67
8737: PUSH
8738: LD_INT 1
8740: GREATER
8741: IFFALSE 8758
// AddComAgressiveMove ( i , 114 , 69 ) ;
8743: LD_VAR 0 1
8747: PPUSH
8748: LD_INT 114
8750: PPUSH
8751: LD_INT 69
8753: PPUSH
8754: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
8758: LD_VAR 0 1
8762: PPUSH
8763: LD_INT 105
8765: PPUSH
8766: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
8770: LD_VAR 0 1
8774: PPUSH
8775: LD_INT 42
8777: PPUSH
8778: LD_INT 20
8780: PPUSH
8781: CALL_OW 174
// end ;
8785: GO 8656
8787: POP
8788: POP
// wait ( 0 0$8 ) ;
8789: LD_INT 280
8791: PPUSH
8792: CALL_OW 67
// RemoveSeeing ( 64 , 32 , 2 ) ;
8796: LD_INT 64
8798: PPUSH
8799: LD_INT 32
8801: PPUSH
8802: LD_INT 2
8804: PPUSH
8805: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
8809: LD_INT 35
8811: PPUSH
8812: CALL_OW 67
// for i in tmp do
8816: LD_ADDR_VAR 0 1
8820: PUSH
8821: LD_VAR 0 3
8825: PUSH
8826: FOR_IN
8827: IFFALSE 8858
// if IsDead ( i ) then
8829: LD_VAR 0 1
8833: PPUSH
8834: CALL_OW 301
8838: IFFALSE 8856
// tmp := tmp diff i ;
8840: LD_ADDR_VAR 0 3
8844: PUSH
8845: LD_VAR 0 3
8849: PUSH
8850: LD_VAR 0 1
8854: DIFF
8855: ST_TO_ADDR
8856: GO 8826
8858: POP
8859: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
8860: LD_VAR 0 3
8864: NOT
8865: PUSH
8866: LD_VAR 0 3
8870: PPUSH
8871: LD_INT 95
8873: PUSH
8874: LD_INT 7
8876: PUSH
8877: EMPTY
8878: LIST
8879: LIST
8880: PUSH
8881: LD_INT 3
8883: PUSH
8884: LD_INT 60
8886: PUSH
8887: EMPTY
8888: LIST
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: PPUSH
8898: CALL_OW 72
8902: PUSH
8903: LD_VAR 0 3
8907: EQUAL
8908: OR
8909: IFFALSE 8809
// if tmp then
8911: LD_VAR 0 3
8915: IFFALSE 8942
// begin usPatrol := [ ] ;
8917: LD_ADDR_EXP 16
8921: PUSH
8922: EMPTY
8923: ST_TO_ADDR
// usForces := usForces union tmp ;
8924: LD_ADDR_EXP 21
8928: PUSH
8929: LD_EXP 21
8933: PUSH
8934: LD_VAR 0 3
8938: UNION
8939: ST_TO_ADDR
// end else
8940: GO 8950
// trickyMove := true ;
8942: LD_ADDR_EXP 15
8946: PUSH
8947: LD_INT 1
8949: ST_TO_ADDR
// end else
8950: GO 9381
// begin tmp := [ ] ;
8952: LD_ADDR_VAR 0 3
8956: PUSH
8957: EMPTY
8958: ST_TO_ADDR
// k := 4 ;
8959: LD_ADDR_VAR 0 2
8963: PUSH
8964: LD_INT 4
8966: ST_TO_ADDR
// if usForces < 4 then
8967: LD_EXP 21
8971: PUSH
8972: LD_INT 4
8974: LESS
8975: IFFALSE 8987
// k := usForces ;
8977: LD_ADDR_VAR 0 2
8981: PUSH
8982: LD_EXP 21
8986: ST_TO_ADDR
// for i := 1 to k do
8987: LD_ADDR_VAR 0 1
8991: PUSH
8992: DOUBLE
8993: LD_INT 1
8995: DEC
8996: ST_TO_ADDR
8997: LD_VAR 0 2
9001: PUSH
9002: FOR_TO
9003: IFFALSE 9058
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
9005: LD_ADDR_VAR 0 3
9009: PUSH
9010: LD_VAR 0 3
9014: PPUSH
9015: LD_VAR 0 3
9019: PUSH
9020: LD_INT 1
9022: PLUS
9023: PPUSH
9024: LD_EXP 21
9028: PUSH
9029: LD_INT 1
9031: ARRAY
9032: PPUSH
9033: CALL_OW 1
9037: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
9038: LD_ADDR_EXP 21
9042: PUSH
9043: LD_EXP 21
9047: PPUSH
9048: LD_INT 1
9050: PPUSH
9051: CALL_OW 3
9055: ST_TO_ADDR
// end ;
9056: GO 9002
9058: POP
9059: POP
// if Lynch then
9060: LD_EXP 20
9064: IFFALSE 9082
// tmp := tmp ^ Lynch ;
9066: LD_ADDR_VAR 0 3
9070: PUSH
9071: LD_VAR 0 3
9075: PUSH
9076: LD_EXP 20
9080: ADD
9081: ST_TO_ADDR
// usPatrol := tmp ;
9082: LD_ADDR_EXP 16
9086: PUSH
9087: LD_VAR 0 3
9091: ST_TO_ADDR
// for i in tmp do
9092: LD_ADDR_VAR 0 1
9096: PUSH
9097: LD_VAR 0 3
9101: PUSH
9102: FOR_IN
9103: IFFALSE 9196
// begin if IsInUnit ( i ) then
9105: LD_VAR 0 1
9109: PPUSH
9110: CALL_OW 310
9114: IFFALSE 9125
// ComExitBuilding ( i ) ;
9116: LD_VAR 0 1
9120: PPUSH
9121: CALL_OW 122
// AddComAgressiveMove ( i , 69 , 15 ) ;
9125: LD_VAR 0 1
9129: PPUSH
9130: LD_INT 69
9132: PPUSH
9133: LD_INT 15
9135: PPUSH
9136: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9140: LD_VAR 0 1
9144: PPUSH
9145: LD_INT 700
9147: PPUSH
9148: CALL_OW 202
// AddComAgressiveMove ( i , 55 , 43 ) ;
9152: LD_VAR 0 1
9156: PPUSH
9157: LD_INT 55
9159: PPUSH
9160: LD_INT 43
9162: PPUSH
9163: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9167: LD_VAR 0 1
9171: PPUSH
9172: LD_INT 700
9174: PPUSH
9175: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9179: LD_VAR 0 1
9183: PPUSH
9184: LD_INT 42
9186: PPUSH
9187: LD_INT 20
9189: PPUSH
9190: CALL_OW 174
// end ;
9194: GO 9102
9196: POP
9197: POP
// repeat wait ( 0 0$1 ) ;
9198: LD_INT 35
9200: PPUSH
9201: CALL_OW 67
// for i in tmp do
9205: LD_ADDR_VAR 0 1
9209: PUSH
9210: LD_VAR 0 3
9214: PUSH
9215: FOR_IN
9216: IFFALSE 9247
// if IsDead ( i ) then
9218: LD_VAR 0 1
9222: PPUSH
9223: CALL_OW 301
9227: IFFALSE 9245
// tmp := tmp diff i ;
9229: LD_ADDR_VAR 0 3
9233: PUSH
9234: LD_VAR 0 3
9238: PUSH
9239: LD_VAR 0 1
9243: DIFF
9244: ST_TO_ADDR
9245: GO 9215
9247: POP
9248: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9249: LD_VAR 0 3
9253: NOT
9254: PUSH
9255: LD_VAR 0 3
9259: PPUSH
9260: LD_INT 95
9262: PUSH
9263: LD_INT 7
9265: PUSH
9266: EMPTY
9267: LIST
9268: LIST
9269: PUSH
9270: LD_INT 3
9272: PUSH
9273: LD_INT 60
9275: PUSH
9276: EMPTY
9277: LIST
9278: PUSH
9279: EMPTY
9280: LIST
9281: LIST
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: PPUSH
9287: CALL_OW 72
9291: PUSH
9292: LD_VAR 0 3
9296: EQUAL
9297: OR
9298: IFFALSE 9198
// if not tmp then
9300: LD_VAR 0 3
9304: NOT
9305: IFFALSE 9317
// trickyMove := true else
9307: LD_ADDR_EXP 15
9311: PUSH
9312: LD_INT 1
9314: ST_TO_ADDR
9315: GO 9324
// usPatrol := [ ] ;
9317: LD_ADDR_EXP 16
9321: PUSH
9322: EMPTY
9323: ST_TO_ADDR
// if tmp diff Lynch then
9324: LD_VAR 0 3
9328: PUSH
9329: LD_EXP 20
9333: DIFF
9334: IFFALSE 9358
// usForces := usForces union ( tmp diff Lynch ) ;
9336: LD_ADDR_EXP 21
9340: PUSH
9341: LD_EXP 21
9345: PUSH
9346: LD_VAR 0 3
9350: PUSH
9351: LD_EXP 20
9355: DIFF
9356: UNION
9357: ST_TO_ADDR
// if IsOk ( Lynch ) then
9358: LD_EXP 20
9362: PPUSH
9363: CALL_OW 302
9367: IFFALSE 9381
// ComEnterUnit ( Lynch , Delta ) ;
9369: LD_EXP 20
9373: PPUSH
9374: LD_INT 1
9376: PPUSH
9377: CALL_OW 120
// end ; end ; end ;
9381: PPOPN 3
9383: END
// every 0 0$1 trigger trickyMove do
9384: LD_EXP 15
9388: IFFALSE 9400
9390: GO 9392
9392: DISABLE
// SetAchievement ( ACH_TRAP ) ;
9393: LD_STRING ACH_TRAP
9395: PPUSH
9396: CALL_OW 543
9400: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ) do
9401: LD_INT 22
9403: PUSH
9404: LD_INT 2
9406: PUSH
9407: EMPTY
9408: LIST
9409: LIST
9410: PUSH
9411: LD_INT 23
9413: PUSH
9414: LD_INT 1
9416: PUSH
9417: EMPTY
9418: LIST
9419: LIST
9420: PUSH
9421: LD_INT 21
9423: PUSH
9424: LD_INT 2
9426: PUSH
9427: EMPTY
9428: LIST
9429: LIST
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: LIST
9435: PPUSH
9436: CALL_OW 69
9440: IFFALSE 9452
9442: GO 9444
9444: DISABLE
// SetAchievement ( ACH_SCRAP ) ;
9445: LD_STRING ACH_SCRAP
9447: PPUSH
9448: CALL_OW 543
9452: END
// every 0 0$1 trigger UnitFilter ( usPatrol , [ f_see , 2 ] ) and See ( 1 , Heike ) do
9453: LD_EXP 16
9457: PPUSH
9458: LD_INT 101
9460: PUSH
9461: LD_INT 2
9463: PUSH
9464: EMPTY
9465: LIST
9466: LIST
9467: PPUSH
9468: CALL_OW 72
9472: PUSH
9473: LD_INT 1
9475: PPUSH
9476: LD_EXP 23
9480: PPUSH
9481: CALL_OW 292
9485: AND
9486: IFFALSE 9619
9488: GO 9490
9490: DISABLE
// begin if not trap then
9491: LD_EXP 17
9495: NOT
9496: IFFALSE 9524
// begin Say ( Heike , DH-2-trap ) ;
9498: LD_EXP 23
9502: PPUSH
9503: LD_STRING DH-2-trap
9505: PPUSH
9506: CALL_OW 88
// Say ( Mike , DM-2-trap ) ;
9510: LD_EXP 25
9514: PPUSH
9515: LD_STRING DM-2-trap
9517: PPUSH
9518: CALL_OW 88
// end else
9522: GO 9536
// begin Say ( Heike , DH-1-trap-a ) ;
9524: LD_EXP 23
9528: PPUSH
9529: LD_STRING DH-1-trap-a
9531: PPUSH
9532: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
9536: LD_INT 35
9538: PPUSH
9539: CALL_OW 67
// until trickyMove ;
9543: LD_EXP 15
9547: IFFALSE 9536
// Say ( Heike , DH-3-trap ) ;
9549: LD_EXP 23
9553: PPUSH
9554: LD_STRING DH-3-trap
9556: PPUSH
9557: CALL_OW 88
// if IsOk ( Givi ) and IsOk ( Kaia ) then
9561: LD_EXP 24
9565: PPUSH
9566: CALL_OW 302
9570: PUSH
9571: LD_EXP 28
9575: PPUSH
9576: CALL_OW 302
9580: AND
9581: IFFALSE 9619
// begin Say ( Givi , DG-3-trap ) ;
9583: LD_EXP 24
9587: PPUSH
9588: LD_STRING DG-3-trap
9590: PPUSH
9591: CALL_OW 88
// Say ( Kaia , DK-3-trap ) ;
9595: LD_EXP 28
9599: PPUSH
9600: LD_STRING DK-3-trap
9602: PPUSH
9603: CALL_OW 88
// Say ( Givi , DG-4-trap ) ;
9607: LD_EXP 24
9611: PPUSH
9612: LD_STRING DG-4-trap
9614: PPUSH
9615: CALL_OW 88
// end ; end ;
9619: END
// every 0 0$1 trigger GetSide ( Delta ) = 2 and attackDeltaAllowed do var i , tmp ;
9620: LD_INT 1
9622: PPUSH
9623: CALL_OW 255
9627: PUSH
9628: LD_INT 2
9630: EQUAL
9631: PUSH
9632: LD_EXP 14
9636: AND
9637: IFFALSE 9796
9639: GO 9641
9641: DISABLE
9642: LD_INT 0
9644: PPUSH
9645: PPUSH
// begin if not IsOk ( Kaia ) then
9646: LD_EXP 28
9650: PPUSH
9651: CALL_OW 302
9655: NOT
9656: IFFALSE 9660
// exit ;
9658: GO 9796
// if tick < 5 5$00 then
9660: LD_OWVAR 1
9664: PUSH
9665: LD_INT 10500
9667: LESS
9668: IFFALSE 9677
// SetAchievement ( ACH_DELTA ) ;
9670: LD_STRING ACH_DELTA
9672: PPUSH
9673: CALL_OW 543
// Say ( Kaia , DK-1-capture ) ;
9677: LD_EXP 28
9681: PPUSH
9682: LD_STRING DK-1-capture
9684: PPUSH
9685: CALL_OW 88
// Say ( Heike , DH-1-capture ) ;
9689: LD_EXP 23
9693: PPUSH
9694: LD_STRING DH-1-capture
9696: PPUSH
9697: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
9701: LD_ADDR_VAR 0 2
9705: PUSH
9706: LD_INT 22
9708: PUSH
9709: LD_INT 1
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: PUSH
9716: LD_INT 25
9718: PUSH
9719: LD_INT 1
9721: PUSH
9722: EMPTY
9723: LIST
9724: LIST
9725: PUSH
9726: EMPTY
9727: LIST
9728: LIST
9729: PPUSH
9730: CALL_OW 69
9734: ST_TO_ADDR
// if not tmp then
9735: LD_VAR 0 2
9739: NOT
9740: IFFALSE 9744
// exit ;
9742: GO 9796
// for i in tmp do
9744: LD_ADDR_VAR 0 1
9748: PUSH
9749: LD_VAR 0 2
9753: PUSH
9754: FOR_IN
9755: IFFALSE 9794
// begin if IsInUnit ( i ) then
9757: LD_VAR 0 1
9761: PPUSH
9762: CALL_OW 310
9766: IFFALSE 9777
// ComExitBuilding ( i ) ;
9768: LD_VAR 0 1
9772: PPUSH
9773: CALL_OW 122
// AddComAgressiveMove ( i , 38 , 23 ) ;
9777: LD_VAR 0 1
9781: PPUSH
9782: LD_INT 38
9784: PPUSH
9785: LD_INT 23
9787: PPUSH
9788: CALL_OW 174
// end ;
9792: GO 9754
9794: POP
9795: POP
// end ;
9796: PPOPN 2
9798: END
// every 0 0$1 trigger GetSide ( usLab ) = 2 and attackDeltaAllowed do
9799: LD_INT 3
9801: PPUSH
9802: CALL_OW 255
9806: PUSH
9807: LD_INT 2
9809: EQUAL
9810: PUSH
9811: LD_EXP 14
9815: AND
9816: IFFALSE 9848
9818: GO 9820
9820: DISABLE
// begin DialogueOn ;
9821: CALL_OW 6
// Say ( Aviradze , DA-1-capture ) ;
9825: LD_EXP 27
9829: PPUSH
9830: LD_STRING DA-1-capture
9832: PPUSH
9833: CALL_OW 88
// DialogueOff ;
9837: CALL_OW 7
// ChangeMissionObjectives ( OTame ) ;
9841: LD_STRING OTame
9843: PPUSH
9844: CALL_OW 337
// end ;
9848: END
// every 0 0$1 trigger GetTech ( tech_ApeLang , 2 ) = state_researched and attackDeltaAllowed do
9849: LD_INT 1
9851: PPUSH
9852: LD_INT 2
9854: PPUSH
9855: CALL_OW 321
9859: PUSH
9860: LD_INT 2
9862: EQUAL
9863: PUSH
9864: LD_EXP 14
9868: AND
9869: IFFALSE 10016
9871: GO 9873
9873: DISABLE
// begin DialogueOn ;
9874: CALL_OW 6
// Say ( Aviradze , DA-1-ape ) ;
9878: LD_EXP 27
9882: PPUSH
9883: LD_STRING DA-1-ape
9885: PPUSH
9886: CALL_OW 88
// Say ( Heike , DH-1-ape ) ;
9890: LD_EXP 23
9894: PPUSH
9895: LD_STRING DH-1-ape
9897: PPUSH
9898: CALL_OW 88
// Say ( Aviradze , DA-2-ape ) ;
9902: LD_EXP 27
9906: PPUSH
9907: LD_STRING DA-2-ape
9909: PPUSH
9910: CALL_OW 88
// Say ( Aviradze , DA-3-ape ) ;
9914: LD_EXP 27
9918: PPUSH
9919: LD_STRING DA-3-ape
9921: PPUSH
9922: CALL_OW 88
// Say ( Heike , DH-3-ape ) ;
9926: LD_EXP 23
9930: PPUSH
9931: LD_STRING DH-3-ape
9933: PPUSH
9934: CALL_OW 88
// DialogueOff ;
9938: CALL_OW 7
// if FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) then
9942: LD_INT 22
9944: PUSH
9945: LD_INT 0
9947: PUSH
9948: EMPTY
9949: LIST
9950: LIST
9951: PUSH
9952: LD_INT 25
9954: PUSH
9955: LD_INT 12
9957: PUSH
9958: EMPTY
9959: LIST
9960: LIST
9961: PUSH
9962: EMPTY
9963: LIST
9964: LIST
9965: PPUSH
9966: CALL_OW 69
9970: IFFALSE 9982
// SpawnApeman ( forest , 2 ) ;
9972: LD_INT 1
9974: PPUSH
9975: LD_INT 2
9977: PPUSH
9978: CALL 405 0 2
// repeat wait ( 0 0$1 ) ;
9982: LD_INT 35
9984: PPUSH
9985: CALL_OW 67
// until FilterAllUnits ( [ f_class , class_apeman ] ) = 0 ;
9989: LD_INT 25
9991: PUSH
9992: LD_INT 12
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: PPUSH
9999: CALL_OW 69
10003: PUSH
10004: LD_INT 0
10006: EQUAL
10007: IFFALSE 9982
// YouLost ( Ape ) ;
10009: LD_STRING Ape
10011: PPUSH
10012: CALL_OW 104
// end ;
10016: END
// every 0 0$5 trigger lostCounter >= [ 3 , 2 , 2 ] [ Difficulty ] do
10017: LD_EXP 18
10021: PUSH
10022: LD_INT 3
10024: PUSH
10025: LD_INT 2
10027: PUSH
10028: LD_INT 2
10030: PUSH
10031: EMPTY
10032: LIST
10033: LIST
10034: LIST
10035: PUSH
10036: LD_OWVAR 67
10040: ARRAY
10041: GREATEREQUAL
10042: IFFALSE 10086
10044: GO 10046
10046: DISABLE
// begin DialogueOn ;
10047: CALL_OW 6
// Say ( Aviradze , DA-1-failure ) ;
10051: LD_EXP 27
10055: PPUSH
10056: LD_STRING DA-1-failure
10058: PPUSH
10059: CALL_OW 88
// Say ( Aviradze , DA-2-failure ) ;
10063: LD_EXP 27
10067: PPUSH
10068: LD_STRING DA-2-failure
10070: PPUSH
10071: CALL_OW 88
// YouLost ( Failure ) ;
10075: LD_STRING Failure
10077: PPUSH
10078: CALL_OW 104
// DialogueOff ;
10082: CALL_OW 7
// end ;
10086: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
10087: LD_EXP 28
10091: PPUSH
10092: CALL_OW 256
10096: PUSH
10097: LD_INT 3
10099: LESS
10100: IFFALSE 10233
10102: GO 10104
10104: DISABLE
// begin DialogueOn ;
10105: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
10109: LD_EXP 28
10113: PPUSH
10114: CALL_OW 87
// ForceSay ( Kaia , DK-Kaiaout-1 ) ;
10118: LD_EXP 28
10122: PPUSH
10123: LD_STRING DK-Kaiaout-1
10125: PPUSH
10126: CALL_OW 91
// Say ( Heike , DH-Kaiaout-2 ) ;
10130: LD_EXP 23
10134: PPUSH
10135: LD_STRING DH-Kaiaout-2
10137: PPUSH
10138: CALL_OW 88
// Say ( Givi , DG-Kaiaout-3 ) ;
10142: LD_EXP 24
10146: PPUSH
10147: LD_STRING DG-Kaiaout-3
10149: PPUSH
10150: CALL_OW 88
// Say ( Heike , DH-Kaiaout-4 ) ;
10154: LD_EXP 23
10158: PPUSH
10159: LD_STRING DH-Kaiaout-4
10161: PPUSH
10162: CALL_OW 88
// if Givi then
10166: LD_EXP 24
10170: IFFALSE 10220
// begin Say ( Givi , DG-Kaiaout-5 ) ;
10172: LD_EXP 24
10176: PPUSH
10177: LD_STRING DG-Kaiaout-5
10179: PPUSH
10180: CALL_OW 88
// Say ( Heike , DH-Kaiaout-6 ) ;
10184: LD_EXP 23
10188: PPUSH
10189: LD_STRING DH-Kaiaout-6
10191: PPUSH
10192: CALL_OW 88
// Say ( Givi , DG-Kaiaout-7 ) ;
10196: LD_EXP 24
10200: PPUSH
10201: LD_STRING DG-Kaiaout-7
10203: PPUSH
10204: CALL_OW 88
// Say ( Heike , DH-Kaiaout-8 ) ;
10208: LD_EXP 23
10212: PPUSH
10213: LD_STRING DH-Kaiaout-8
10215: PPUSH
10216: CALL_OW 88
// end ; DialogueOff ;
10220: CALL_OW 7
// KillUnit ( Kaia ) ;
10224: LD_EXP 28
10228: PPUSH
10229: CALL_OW 66
// end ;
10233: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) and IsOk ( Aviradze ) and GetSide ( Aviradze ) = 2 do var tmp ;
10234: LD_INT 22
10236: PUSH
10237: LD_INT 2
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: PUSH
10244: LD_INT 23
10246: PUSH
10247: LD_INT 0
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: PUSH
10254: EMPTY
10255: LIST
10256: LIST
10257: PPUSH
10258: CALL_OW 69
10262: PUSH
10263: LD_EXP 27
10267: PPUSH
10268: CALL_OW 302
10272: AND
10273: PUSH
10274: LD_EXP 27
10278: PPUSH
10279: CALL_OW 255
10283: PUSH
10284: LD_INT 2
10286: EQUAL
10287: AND
10288: IFFALSE 11060
10290: GO 10292
10292: DISABLE
10293: LD_INT 0
10295: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10296: LD_ADDR_VAR 0 1
10300: PUSH
10301: LD_INT 22
10303: PUSH
10304: LD_INT 2
10306: PUSH
10307: EMPTY
10308: LIST
10309: LIST
10310: PUSH
10311: LD_INT 23
10313: PUSH
10314: LD_INT 0
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: PUSH
10321: EMPTY
10322: LIST
10323: LIST
10324: PPUSH
10325: CALL_OW 69
10329: ST_TO_ADDR
// InGameOn ;
10330: CALL_OW 8
// CenterNowOnUnits ( tmp ) ;
10334: LD_VAR 0 1
10338: PPUSH
10339: CALL_OW 87
// ComMoveUnit ( tmp , Aviradze ) ;
10343: LD_VAR 0 1
10347: PPUSH
10348: LD_EXP 27
10352: PPUSH
10353: CALL_OW 112
// ComTurnUnit ( Aviradze , tmp ) ;
10357: LD_EXP 27
10361: PPUSH
10362: LD_VAR 0 1
10366: PPUSH
10367: CALL_OW 119
// wait ( 0 0$1 ) ;
10371: LD_INT 35
10373: PPUSH
10374: CALL_OW 67
// Say ( Aviradze , DA-1-tame-a ) ;
10378: LD_EXP 27
10382: PPUSH
10383: LD_STRING DA-1-tame-a
10385: PPUSH
10386: CALL_OW 88
// if IsOk ( Mike ) then
10390: LD_EXP 25
10394: PPUSH
10395: CALL_OW 302
10399: IFFALSE 10437
// begin Say ( Mike , DM-1-tame-a ) ;
10401: LD_EXP 25
10405: PPUSH
10406: LD_STRING DM-1-tame-a
10408: PPUSH
10409: CALL_OW 88
// Say ( Sophia , DS-1-tame-a ) ;
10413: LD_EXP 29
10417: PPUSH
10418: LD_STRING DS-1-tame-a
10420: PPUSH
10421: CALL_OW 88
// Say ( Mike , DM-2-tame-a ) ;
10425: LD_EXP 25
10429: PPUSH
10430: LD_STRING DM-2-tame-a
10432: PPUSH
10433: CALL_OW 88
// end ; wait ( 0 0$3 ) ;
10437: LD_INT 105
10439: PPUSH
10440: CALL_OW 67
// PrepareFarmer ;
10444: CALL 11735 0 0
// CenterOnUnits ( Farmer ) ;
10448: LD_EXP 31
10452: PPUSH
10453: CALL_OW 85
// ComMoveXY ( Farmer , 105 , 59 ) ;
10457: LD_EXP 31
10461: PPUSH
10462: LD_INT 105
10464: PPUSH
10465: LD_INT 59
10467: PPUSH
10468: CALL_OW 111
// AddComHold ( Farmer ) ;
10472: LD_EXP 31
10476: PPUSH
10477: CALL_OW 200
// SayRadio ( Farmer , DF-1-end ) ;
10481: LD_EXP 31
10485: PPUSH
10486: LD_STRING DF-1-end
10488: PPUSH
10489: CALL_OW 94
// Say ( Aviradze , DA-1-end ) ;
10493: LD_EXP 27
10497: PPUSH
10498: LD_STRING DA-1-end
10500: PPUSH
10501: CALL_OW 88
// SayRadio ( Farmer , DF-2-end ) ;
10505: LD_EXP 31
10509: PPUSH
10510: LD_STRING DF-2-end
10512: PPUSH
10513: CALL_OW 94
// Say ( Aviradze , DA-2-end ) ;
10517: LD_EXP 27
10521: PPUSH
10522: LD_STRING DA-2-end
10524: PPUSH
10525: CALL_OW 88
// SayRadio ( Farmer , DF-3-end ) ;
10529: LD_EXP 31
10533: PPUSH
10534: LD_STRING DF-3-end
10536: PPUSH
10537: CALL_OW 94
// Say ( Heike , DH-3-end ) ;
10541: LD_EXP 23
10545: PPUSH
10546: LD_STRING DH-3-end
10548: PPUSH
10549: CALL_OW 88
// SayRadio ( Farmer , DF-4-end ) ;
10553: LD_EXP 31
10557: PPUSH
10558: LD_STRING DF-4-end
10560: PPUSH
10561: CALL_OW 94
// if tick <= [ 25 25$00 , 24 24$00 , 23 23$00 ] [ Difficulty ] then
10565: LD_OWVAR 1
10569: PUSH
10570: LD_INT 52500
10572: PUSH
10573: LD_INT 50400
10575: PUSH
10576: LD_INT 48300
10578: PUSH
10579: EMPTY
10580: LIST
10581: LIST
10582: LIST
10583: PUSH
10584: LD_OWVAR 67
10588: ARRAY
10589: LESSEQUAL
10590: IFFALSE 10604
// AddMedal ( med1 , 1 ) else
10592: LD_STRING med1
10594: PPUSH
10595: LD_INT 1
10597: PPUSH
10598: CALL_OW 101
10602: GO 10615
// AddMedal ( med1 , - 1 ) ;
10604: LD_STRING med1
10606: PPUSH
10607: LD_INT 1
10609: NEG
10610: PPUSH
10611: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) = 0 and not gladstoneEscaped then
10615: LD_INT 22
10617: PUSH
10618: LD_INT 1
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: PUSH
10625: LD_INT 25
10627: PUSH
10628: LD_INT 4
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: PPUSH
10639: CALL_OW 69
10643: PUSH
10644: LD_INT 0
10646: EQUAL
10647: PUSH
10648: LD_EXP 12
10652: NOT
10653: AND
10654: IFFALSE 10668
// AddMedal ( med2 , 1 ) else
10656: LD_STRING med2
10658: PPUSH
10659: LD_INT 1
10661: PPUSH
10662: CALL_OW 101
10666: GO 10679
// AddMedal ( med2 , - 1 ) ;
10668: LD_STRING med2
10670: PPUSH
10671: LD_INT 1
10673: NEG
10674: PPUSH
10675: CALL_OW 101
// if trickyMove then
10679: LD_EXP 15
10683: IFFALSE 10697
// AddMedal ( med3 , 1 ) else
10685: LD_STRING med3
10687: PPUSH
10688: LD_INT 1
10690: PPUSH
10691: CALL_OW 101
10695: GO 10727
// if spottedBeforeRadio then
10697: LD_EXP 6
10701: IFFALSE 10716
// AddMedal ( med3 , - 2 ) else
10703: LD_STRING med3
10705: PPUSH
10706: LD_INT 2
10708: NEG
10709: PPUSH
10710: CALL_OW 101
10714: GO 10727
// AddMedal ( med3 , - 1 ) ;
10716: LD_STRING med3
10718: PPUSH
10719: LD_INT 1
10721: NEG
10722: PPUSH
10723: CALL_OW 101
// GiveMedals ( MAIN ) ;
10727: LD_STRING MAIN
10729: PPUSH
10730: CALL_OW 102
// SaveCharacters ( tmp , 02_ape ) ;
10734: LD_VAR 0 1
10738: PPUSH
10739: LD_STRING 02_ape
10741: PPUSH
10742: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
10746: LD_ADDR_VAR 0 1
10750: PUSH
10751: LD_INT 22
10753: PUSH
10754: LD_INT 2
10756: PUSH
10757: EMPTY
10758: LIST
10759: LIST
10760: PUSH
10761: LD_INT 23
10763: PUSH
10764: LD_INT 2
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: PUSH
10771: LD_INT 21
10773: PUSH
10774: LD_INT 1
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: PUSH
10781: EMPTY
10782: LIST
10783: LIST
10784: LIST
10785: PPUSH
10786: CALL_OW 69
10790: ST_TO_ADDR
// RewardPeople ( tmp ) ;
10791: LD_VAR 0 1
10795: PPUSH
10796: CALL_OW 43
// SaveCharacters ( Heike , 02_Heike ) ;
10800: LD_EXP 23
10804: PPUSH
10805: LD_STRING 02_Heike
10807: PPUSH
10808: CALL_OW 38
// SaveCharacters ( Aviradze , 02_Aviradze ) ;
10812: LD_EXP 27
10816: PPUSH
10817: LD_STRING 02_Aviradze
10819: PPUSH
10820: CALL_OW 38
// if Givi then
10824: LD_EXP 24
10828: IFFALSE 10842
// SaveCharacters ( Givi , 02_Givi ) ;
10830: LD_EXP 24
10834: PPUSH
10835: LD_STRING 02_Givi
10837: PPUSH
10838: CALL_OW 38
// if Mike then
10842: LD_EXP 25
10846: IFFALSE 10860
// SaveCharacters ( Mike , 02_Mike ) ;
10848: LD_EXP 25
10852: PPUSH
10853: LD_STRING 02_Mike
10855: PPUSH
10856: CALL_OW 38
// if Kamil then
10860: LD_EXP 26
10864: IFFALSE 10878
// SaveCharacters ( Kamil , 02_Kamil ) ;
10866: LD_EXP 26
10870: PPUSH
10871: LD_STRING 02_Kamil
10873: PPUSH
10874: CALL_OW 38
// if Kaia then
10878: LD_EXP 28
10882: IFFALSE 10896
// SaveCharacters ( Kaia , 02_Kaia ) ;
10884: LD_EXP 28
10888: PPUSH
10889: LD_STRING 02_Kaia
10891: PPUSH
10892: CALL_OW 38
// if Sophia then
10896: LD_EXP 29
10900: IFFALSE 10914
// SaveCharacters ( Sophia , 02_Sophia ) ;
10902: LD_EXP 29
10906: PPUSH
10907: LD_STRING 02_Sophia
10909: PPUSH
10910: CALL_OW 38
// if Markov then
10914: LD_EXP 30
10918: IFFALSE 10932
// SaveCharacters ( Markov , 02_Markov ) ;
10920: LD_EXP 30
10924: PPUSH
10925: LD_STRING 02_Markov
10927: PPUSH
10928: CALL_OW 38
// if tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] then
10932: LD_VAR 0 1
10936: PUSH
10937: LD_EXP 23
10941: PUSH
10942: LD_EXP 27
10946: PUSH
10947: LD_EXP 24
10951: PUSH
10952: LD_EXP 25
10956: PUSH
10957: LD_EXP 26
10961: PUSH
10962: LD_EXP 29
10966: PUSH
10967: LD_EXP 28
10971: PUSH
10972: LD_EXP 30
10976: PUSH
10977: EMPTY
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: DIFF
10987: IFFALSE 11052
// SaveCharacters ( tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] , 02_others ) ;
10989: LD_VAR 0 1
10993: PUSH
10994: LD_EXP 23
10998: PUSH
10999: LD_EXP 27
11003: PUSH
11004: LD_EXP 24
11008: PUSH
11009: LD_EXP 25
11013: PUSH
11014: LD_EXP 26
11018: PUSH
11019: LD_EXP 29
11023: PUSH
11024: LD_EXP 28
11028: PUSH
11029: LD_EXP 30
11033: PUSH
11034: EMPTY
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: DIFF
11044: PPUSH
11045: LD_STRING 02_others
11047: PPUSH
11048: CALL_OW 38
// YouWin ;
11052: CALL_OW 103
// InGameOff ;
11056: CALL_OW 9
// end ;
11060: PPOPN 1
11062: END
// every 0 0$1 trigger tick > timeUntilFarmer and aviradzeSpotted do
11063: LD_OWVAR 1
11067: PUSH
11068: LD_EXP 13
11072: GREATER
11073: PUSH
11074: LD_EXP 4
11078: AND
11079: IFFALSE 11119
11081: GO 11083
11083: DISABLE
// begin InGameOn ;
11084: CALL_OW 8
// PrepareFarmer ;
11088: CALL 11735 0 0
// CenterNowOnUnits ( Farmer ) ;
11092: LD_EXP 31
11096: PPUSH
11097: CALL_OW 87
// wait ( 0 0$2 ) ;
11101: LD_INT 70
11103: PPUSH
11104: CALL_OW 67
// YouLost ( Farmer ) ;
11108: LD_STRING Farmer
11110: PPUSH
11111: CALL_OW 104
// InGameOff ;
11115: CALL_OW 9
// end ; end_of_file
11119: END
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer ; export function PrepareArabian ; var un , veh ; begin
11120: LD_INT 0
11122: PPUSH
11123: PPUSH
11124: PPUSH
// uc_side := 2 ;
11125: LD_ADDR_OWVAR 20
11129: PUSH
11130: LD_INT 2
11132: ST_TO_ADDR
// uc_nation := 2 ;
11133: LD_ADDR_OWVAR 21
11137: PUSH
11138: LD_INT 2
11140: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
11141: LD_ADDR_EXP 23
11145: PUSH
11146: LD_STRING Heike
11148: PPUSH
11149: LD_EXP 1
11153: NOT
11154: PPUSH
11155: LD_EXP 2
11159: PPUSH
11160: CALL 26774 0 3
11164: ST_TO_ADDR
// PlaceUnitXY ( Heike , 83 , 72 , false ) ;
11165: LD_EXP 23
11169: PPUSH
11170: LD_INT 83
11172: PPUSH
11173: LD_INT 72
11175: PPUSH
11176: LD_INT 0
11178: PPUSH
11179: CALL_OW 48
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
11183: LD_ADDR_EXP 24
11187: PUSH
11188: LD_STRING Givi
11190: PPUSH
11191: LD_EXP 1
11195: NOT
11196: PPUSH
11197: LD_EXP 2
11201: PPUSH
11202: CALL 26774 0 3
11206: ST_TO_ADDR
// if Givi then
11207: LD_EXP 24
11211: IFFALSE 11231
// PlaceUnitXY ( Givi , 87 , 76 , false ) ;
11213: LD_EXP 24
11217: PPUSH
11218: LD_INT 87
11220: PPUSH
11221: LD_INT 76
11223: PPUSH
11224: LD_INT 0
11226: PPUSH
11227: CALL_OW 48
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
11231: LD_ADDR_EXP 25
11235: PUSH
11236: LD_STRING Mike
11238: PPUSH
11239: LD_EXP 1
11243: NOT
11244: PPUSH
11245: LD_EXP 2
11249: PPUSH
11250: CALL 26774 0 3
11254: ST_TO_ADDR
// if Mike then
11255: LD_EXP 25
11259: IFFALSE 11279
// PlaceUnitXY ( Mike , 84 , 76 , false ) ;
11261: LD_EXP 25
11265: PPUSH
11266: LD_INT 84
11268: PPUSH
11269: LD_INT 76
11271: PPUSH
11272: LD_INT 0
11274: PPUSH
11275: CALL_OW 48
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
11279: LD_ADDR_EXP 26
11283: PUSH
11284: LD_STRING Kamil
11286: PPUSH
11287: LD_EXP 1
11291: NOT
11292: PPUSH
11293: LD_EXP 2
11297: PPUSH
11298: CALL 26774 0 3
11302: ST_TO_ADDR
// if Kamil then
11303: LD_EXP 26
11307: IFFALSE 11327
// PlaceUnitXY ( Kamil , 85 , 78 , false ) ;
11309: LD_EXP 26
11313: PPUSH
11314: LD_INT 85
11316: PPUSH
11317: LD_INT 78
11319: PPUSH
11320: LD_INT 0
11322: PPUSH
11323: CALL_OW 48
// uc_side := 5 ;
11327: LD_ADDR_OWVAR 20
11331: PUSH
11332: LD_INT 5
11334: ST_TO_ADDR
// uc_nation := 2 ;
11335: LD_ADDR_OWVAR 21
11339: PUSH
11340: LD_INT 2
11342: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , false ,  ) ;
11343: LD_ADDR_EXP 27
11347: PUSH
11348: LD_STRING Aviradze
11350: PPUSH
11351: LD_INT 0
11353: PPUSH
11354: LD_STRING 
11356: PPUSH
11357: CALL 26774 0 3
11361: ST_TO_ADDR
// PlaceUnitXY ( Aviradze , 106 , 38 , false ) ;
11362: LD_EXP 27
11366: PPUSH
11367: LD_INT 106
11369: PPUSH
11370: LD_INT 38
11372: PPUSH
11373: LD_INT 0
11375: PPUSH
11376: CALL_OW 48
// ComTurnXY ( Aviradze , 103 , 38 ) ;
11380: LD_EXP 27
11384: PPUSH
11385: LD_INT 103
11387: PPUSH
11388: LD_INT 38
11390: PPUSH
11391: CALL_OW 118
// Kaia := PrepareUnit ( Kaia , false ,  ) ;
11395: LD_ADDR_EXP 28
11399: PUSH
11400: LD_STRING Kaia
11402: PPUSH
11403: LD_INT 0
11405: PPUSH
11406: LD_STRING 
11408: PPUSH
11409: CALL 26774 0 3
11413: ST_TO_ADDR
// PlaceUnitXY ( Kaia , 100 , 34 , false ) ;
11414: LD_EXP 28
11418: PPUSH
11419: LD_INT 100
11421: PPUSH
11422: LD_INT 34
11424: PPUSH
11425: LD_INT 0
11427: PPUSH
11428: CALL_OW 48
// ComTurnXY ( Kaia , 100 , 39 ) ;
11432: LD_EXP 28
11436: PPUSH
11437: LD_INT 100
11439: PPUSH
11440: LD_INT 39
11442: PPUSH
11443: CALL_OW 118
// Sophia := PrepareUnit ( Sophia , false ,  ) ;
11447: LD_ADDR_EXP 29
11451: PUSH
11452: LD_STRING Sophia
11454: PPUSH
11455: LD_INT 0
11457: PPUSH
11458: LD_STRING 
11460: PPUSH
11461: CALL 26774 0 3
11465: ST_TO_ADDR
// PlaceUnitXY ( Sophia , 109 , 50 , false ) ;
11466: LD_EXP 29
11470: PPUSH
11471: LD_INT 109
11473: PPUSH
11474: LD_INT 50
11476: PPUSH
11477: LD_INT 0
11479: PPUSH
11480: CALL_OW 48
// ComTurnXY ( Sophia , 100 , 39 ) ;
11484: LD_EXP 29
11488: PPUSH
11489: LD_INT 100
11491: PPUSH
11492: LD_INT 39
11494: PPUSH
11495: CALL_OW 118
// Markov := PrepareUnit ( Markov , false ,  ) ;
11499: LD_ADDR_EXP 30
11503: PUSH
11504: LD_STRING Markov
11506: PPUSH
11507: LD_INT 0
11509: PPUSH
11510: LD_STRING 
11512: PPUSH
11513: CALL 26774 0 3
11517: ST_TO_ADDR
// PrepareTank ( 5 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , [ 90 , 70 , 60 ] [ Difficulty ] ) ;
11518: LD_INT 5
11520: PPUSH
11521: LD_INT 3
11523: PPUSH
11524: LD_INT 21
11526: PPUSH
11527: LD_INT 1
11529: PPUSH
11530: LD_INT 1
11532: PPUSH
11533: LD_INT 42
11535: PPUSH
11536: LD_INT 90
11538: PUSH
11539: LD_INT 70
11541: PUSH
11542: LD_INT 60
11544: PUSH
11545: EMPTY
11546: LIST
11547: LIST
11548: LIST
11549: PUSH
11550: LD_OWVAR 67
11554: ARRAY
11555: PPUSH
11556: CALL 237 0 7
// veh := CreateVehicle ;
11560: LD_ADDR_VAR 0 3
11564: PUSH
11565: CALL_OW 45
11569: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
11570: LD_VAR 0 3
11574: PPUSH
11575: LD_INT 4
11577: PPUSH
11578: CALL_OW 233
// PlaceUnitXY ( veh , 109 , 38 , false ) ;
11582: LD_VAR 0 3
11586: PPUSH
11587: LD_INT 109
11589: PPUSH
11590: LD_INT 38
11592: PPUSH
11593: LD_INT 0
11595: PPUSH
11596: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
11600: LD_EXP 30
11604: PPUSH
11605: LD_VAR 0 3
11609: PPUSH
11610: CALL_OW 52
// ComTurnUnit ( Kaia , Aviradze ) ;
11614: LD_EXP 28
11618: PPUSH
11619: LD_EXP 27
11623: PPUSH
11624: CALL_OW 119
// ComTurnUnit ( Aviradze , Kaia ) ;
11628: LD_EXP 27
11632: PPUSH
11633: LD_EXP 28
11637: PPUSH
11638: CALL_OW 119
// if not Givi or not Mike then
11642: LD_EXP 24
11646: NOT
11647: PUSH
11648: LD_EXP 25
11652: NOT
11653: OR
11654: IFFALSE 11730
// begin uc_nation := 2 ;
11656: LD_ADDR_OWVAR 21
11660: PUSH
11661: LD_INT 2
11663: ST_TO_ADDR
// uc_side := 5 ;
11664: LD_ADDR_OWVAR 20
11668: PUSH
11669: LD_INT 5
11671: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 1 ) ;
11672: LD_INT 1
11674: PPUSH
11675: LD_INT 1
11677: PPUSH
11678: LD_INT 1
11680: PPUSH
11681: CALL_OW 380
// un := CreateHuman ;
11685: LD_ADDR_VAR 0 2
11689: PUSH
11690: CALL_OW 44
11694: ST_TO_ADDR
// PlaceUnitXYR ( un , 112 , 40 , 3 , false ) ;
11695: LD_VAR 0 2
11699: PPUSH
11700: LD_INT 112
11702: PPUSH
11703: LD_INT 40
11705: PPUSH
11706: LD_INT 3
11708: PPUSH
11709: LD_INT 0
11711: PPUSH
11712: CALL_OW 50
// ComTurnUnit ( un , Aviradze ) ;
11716: LD_VAR 0 2
11720: PPUSH
11721: LD_EXP 27
11725: PPUSH
11726: CALL_OW 119
// end ; end ;
11730: LD_VAR 0 1
11734: RET
// export function PrepareFarmer ; var i ; begin
11735: LD_INT 0
11737: PPUSH
11738: PPUSH
// uc_side := 5 ;
11739: LD_ADDR_OWVAR 20
11743: PUSH
11744: LD_INT 5
11746: ST_TO_ADDR
// uc_nation := 2 ;
11747: LD_ADDR_OWVAR 21
11751: PUSH
11752: LD_INT 2
11754: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
11755: LD_ADDR_EXP 31
11759: PUSH
11760: LD_STRING Farmer
11762: PPUSH
11763: LD_INT 0
11765: PPUSH
11766: LD_STRING 
11768: PPUSH
11769: CALL 26774 0 3
11773: ST_TO_ADDR
// PlaceUnitXY ( Farmer , 106 , 62 , false ) ;
11774: LD_EXP 31
11778: PPUSH
11779: LD_INT 106
11781: PPUSH
11782: LD_INT 62
11784: PPUSH
11785: LD_INT 0
11787: PPUSH
11788: CALL_OW 48
// for i := 1 to 5 do
11792: LD_ADDR_VAR 0 2
11796: PUSH
11797: DOUBLE
11798: LD_INT 1
11800: DEC
11801: ST_TO_ADDR
11802: LD_INT 5
11804: PUSH
11805: FOR_TO
11806: IFFALSE 11844
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
11808: LD_INT 1
11810: PPUSH
11811: LD_INT 1
11813: PPUSH
11814: LD_INT 1
11816: PPUSH
11817: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 105 , 64 , 3 , false ) ;
11821: CALL_OW 44
11825: PPUSH
11826: LD_INT 105
11828: PPUSH
11829: LD_INT 64
11831: PPUSH
11832: LD_INT 3
11834: PPUSH
11835: LD_INT 0
11837: PPUSH
11838: CALL_OW 50
// end ;
11842: GO 11805
11844: POP
11845: POP
// end ; end_of_file
11846: LD_VAR 0 1
11850: RET
// every 2 2$20 + 0 0$10 do
11851: GO 11853
11853: DISABLE
// begin enable ;
11854: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , forest , true ) ;
11855: LD_INT 1
11857: PPUSH
11858: LD_INT 5
11860: PPUSH
11861: CALL_OW 12
11865: PPUSH
11866: LD_INT 1
11868: PPUSH
11869: LD_INT 1
11871: PPUSH
11872: CALL_OW 55
// if tick > 6 6$00 then
11876: LD_OWVAR 1
11880: PUSH
11881: LD_INT 12600
11883: GREATER
11884: IFFALSE 11887
// disable ;
11886: DISABLE
// end ; end_of_file
11887: END
// on UnitDestroyed ( un ) do begin if un = Heike then
11888: LD_VAR 0 1
11892: PUSH
11893: LD_EXP 23
11897: EQUAL
11898: IFFALSE 11907
// YouLost ( Heike ) ;
11900: LD_STRING Heike
11902: PPUSH
11903: CALL_OW 104
// if un = Aviradze then
11907: LD_VAR 0 1
11911: PUSH
11912: LD_EXP 27
11916: EQUAL
11917: IFFALSE 11926
// YouLost ( Aviradze ) ;
11919: LD_STRING Aviradze
11921: PPUSH
11922: CALL_OW 104
// if un = usLab then
11926: LD_VAR 0 1
11930: PUSH
11931: LD_INT 3
11933: EQUAL
11934: IFFALSE 11943
// YouLost ( Lab ) ;
11936: LD_STRING Lab
11938: PPUSH
11939: CALL_OW 104
// if ( un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) diff [ Heike , Aviradze ] ) and aviradzeSpotted then
11943: LD_VAR 0 1
11947: PUSH
11948: LD_INT 22
11950: PUSH
11951: LD_INT 2
11953: PUSH
11954: EMPTY
11955: LIST
11956: LIST
11957: PUSH
11958: LD_INT 21
11960: PUSH
11961: LD_INT 1
11963: PUSH
11964: EMPTY
11965: LIST
11966: LIST
11967: PUSH
11968: LD_INT 23
11970: PUSH
11971: LD_INT 2
11973: PUSH
11974: EMPTY
11975: LIST
11976: LIST
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: LIST
11982: PPUSH
11983: CALL_OW 69
11987: PUSH
11988: LD_EXP 23
11992: PUSH
11993: LD_EXP 27
11997: PUSH
11998: EMPTY
11999: LIST
12000: LIST
12001: DIFF
12002: IN
12003: PUSH
12004: LD_EXP 4
12008: AND
12009: IFFALSE 12025
// lostCounter := lostCounter + 1 ;
12011: LD_ADDR_EXP 18
12015: PUSH
12016: LD_EXP 18
12020: PUSH
12021: LD_INT 1
12023: PLUS
12024: ST_TO_ADDR
// end ;
12025: PPOPN 1
12027: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 2 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) = 0 do
12028: LD_INT 23
12030: PUSH
12031: LD_INT 2
12033: PUSH
12034: EMPTY
12035: LIST
12036: LIST
12037: PUSH
12038: LD_INT 25
12040: PUSH
12041: LD_INT 2
12043: PUSH
12044: EMPTY
12045: LIST
12046: LIST
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: PPUSH
12052: CALL_OW 69
12056: PUSH
12057: LD_INT 0
12059: EQUAL
12060: PUSH
12061: LD_INT 22
12063: PUSH
12064: LD_INT 2
12066: PUSH
12067: EMPTY
12068: LIST
12069: LIST
12070: PUSH
12071: LD_INT 21
12073: PUSH
12074: LD_INT 3
12076: PUSH
12077: EMPTY
12078: LIST
12079: LIST
12080: PUSH
12081: EMPTY
12082: LIST
12083: LIST
12084: PPUSH
12085: CALL_OW 69
12089: PUSH
12090: LD_INT 0
12092: EQUAL
12093: AND
12094: IFFALSE 12106
12096: GO 12098
12098: DISABLE
// YouLost ( Eng ) ;
12099: LD_STRING Eng
12101: PPUSH
12102: CALL_OW 104
12106: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in usSci and killerSide = 2 then
12107: LD_VAR 0 1
12111: PUSH
12112: LD_EXP 22
12116: IN
12117: PUSH
12118: LD_VAR 0 2
12122: PUSH
12123: LD_INT 2
12125: EQUAL
12126: AND
12127: IFFALSE 12159
// begin usSci := usSci diff un ;
12129: LD_ADDR_EXP 22
12133: PUSH
12134: LD_EXP 22
12138: PUSH
12139: LD_VAR 0 1
12143: DIFF
12144: ST_TO_ADDR
// sciCounterKill := sciCounterKill + 1 ;
12145: LD_ADDR_EXP 9
12149: PUSH
12150: LD_EXP 9
12154: PUSH
12155: LD_INT 1
12157: PLUS
12158: ST_TO_ADDR
// end ; end ;
12159: PPOPN 3
12161: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
12162: LD_VAR 0 1
12166: PUSH
12167: LD_INT 2
12169: EQUAL
12170: PUSH
12171: LD_VAR 0 2
12175: PUSH
12176: LD_INT 5
12178: EQUAL
12179: AND
12180: IFFALSE 12189
// YouLost ( FriendlyFire ) ;
12182: LD_STRING FriendlyFire
12184: PPUSH
12185: CALL_OW 104
// end ; end_of_file
12189: PPOPN 2
12191: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
12192: LD_INT 0
12194: PPUSH
// ar_crane := 88 ;
12195: LD_ADDR_EXP 38
12199: PUSH
12200: LD_INT 88
12202: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
12203: LD_ADDR_EXP 33
12207: PUSH
12208: LD_INT 89
12210: ST_TO_ADDR
// us_hack := 99 ;
12211: LD_ADDR_EXP 34
12215: PUSH
12216: LD_INT 99
12218: ST_TO_ADDR
// us_artillery := 97 ;
12219: LD_ADDR_EXP 35
12223: PUSH
12224: LD_INT 97
12226: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12227: LD_ADDR_EXP 36
12231: PUSH
12232: LD_INT 91
12234: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
12235: LD_ADDR_EXP 37
12239: PUSH
12240: LD_INT 92
12242: ST_TO_ADDR
// ru_radar := 98 ;
12243: LD_ADDR_EXP 32
12247: PUSH
12248: LD_INT 98
12250: ST_TO_ADDR
// tech_Artillery := 80 ;
12251: LD_ADDR_EXP 39
12255: PUSH
12256: LD_INT 80
12258: ST_TO_ADDR
// tech_RadMat := 81 ;
12259: LD_ADDR_EXP 40
12263: PUSH
12264: LD_INT 81
12266: ST_TO_ADDR
// tech_BasicTools := 82 ;
12267: LD_ADDR_EXP 41
12271: PUSH
12272: LD_INT 82
12274: ST_TO_ADDR
// tech_Cargo := 83 ;
12275: LD_ADDR_EXP 42
12279: PUSH
12280: LD_INT 83
12282: ST_TO_ADDR
// tech_Track := 84 ;
12283: LD_ADDR_EXP 43
12287: PUSH
12288: LD_INT 84
12290: ST_TO_ADDR
// tech_Crane := 85 ;
12291: LD_ADDR_EXP 44
12295: PUSH
12296: LD_INT 85
12298: ST_TO_ADDR
// tech_Bulldozer := 86 ;
12299: LD_ADDR_EXP 45
12303: PUSH
12304: LD_INT 86
12306: ST_TO_ADDR
// tech_Hovercraft := 87 ;
12307: LD_ADDR_EXP 46
12311: PUSH
12312: LD_INT 87
12314: ST_TO_ADDR
// end ;
12315: LD_VAR 0 1
12319: RET
// every 1 do
12320: GO 12322
12322: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
12323: CALL 12192 0 0
12327: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
12328: LD_VAR 0 2
12332: PUSH
12333: LD_INT 100
12335: EQUAL
12336: IFFALSE 13285
// begin if not StreamModeActive then
12338: LD_EXP 47
12342: NOT
12343: IFFALSE 12353
// StreamModeActive := true ;
12345: LD_ADDR_EXP 47
12349: PUSH
12350: LD_INT 1
12352: ST_TO_ADDR
// if p3 = 0 then
12353: LD_VAR 0 3
12357: PUSH
12358: LD_INT 0
12360: EQUAL
12361: IFFALSE 12367
// InitStreamMode ;
12363: CALL 13518 0 0
// if p3 = 1 then
12367: LD_VAR 0 3
12371: PUSH
12372: LD_INT 1
12374: EQUAL
12375: IFFALSE 12385
// sRocket := true ;
12377: LD_ADDR_EXP 52
12381: PUSH
12382: LD_INT 1
12384: ST_TO_ADDR
// if p3 = 2 then
12385: LD_VAR 0 3
12389: PUSH
12390: LD_INT 2
12392: EQUAL
12393: IFFALSE 12403
// sSpeed := true ;
12395: LD_ADDR_EXP 51
12399: PUSH
12400: LD_INT 1
12402: ST_TO_ADDR
// if p3 = 3 then
12403: LD_VAR 0 3
12407: PUSH
12408: LD_INT 3
12410: EQUAL
12411: IFFALSE 12421
// sEngine := true ;
12413: LD_ADDR_EXP 53
12417: PUSH
12418: LD_INT 1
12420: ST_TO_ADDR
// if p3 = 4 then
12421: LD_VAR 0 3
12425: PUSH
12426: LD_INT 4
12428: EQUAL
12429: IFFALSE 12439
// sSpec := true ;
12431: LD_ADDR_EXP 50
12435: PUSH
12436: LD_INT 1
12438: ST_TO_ADDR
// if p3 = 5 then
12439: LD_VAR 0 3
12443: PUSH
12444: LD_INT 5
12446: EQUAL
12447: IFFALSE 12457
// sLevel := true ;
12449: LD_ADDR_EXP 54
12453: PUSH
12454: LD_INT 1
12456: ST_TO_ADDR
// if p3 = 6 then
12457: LD_VAR 0 3
12461: PUSH
12462: LD_INT 6
12464: EQUAL
12465: IFFALSE 12475
// sArmoury := true ;
12467: LD_ADDR_EXP 55
12471: PUSH
12472: LD_INT 1
12474: ST_TO_ADDR
// if p3 = 7 then
12475: LD_VAR 0 3
12479: PUSH
12480: LD_INT 7
12482: EQUAL
12483: IFFALSE 12493
// sRadar := true ;
12485: LD_ADDR_EXP 56
12489: PUSH
12490: LD_INT 1
12492: ST_TO_ADDR
// if p3 = 8 then
12493: LD_VAR 0 3
12497: PUSH
12498: LD_INT 8
12500: EQUAL
12501: IFFALSE 12511
// sBunker := true ;
12503: LD_ADDR_EXP 57
12507: PUSH
12508: LD_INT 1
12510: ST_TO_ADDR
// if p3 = 9 then
12511: LD_VAR 0 3
12515: PUSH
12516: LD_INT 9
12518: EQUAL
12519: IFFALSE 12529
// sHack := true ;
12521: LD_ADDR_EXP 58
12525: PUSH
12526: LD_INT 1
12528: ST_TO_ADDR
// if p3 = 10 then
12529: LD_VAR 0 3
12533: PUSH
12534: LD_INT 10
12536: EQUAL
12537: IFFALSE 12547
// sFire := true ;
12539: LD_ADDR_EXP 59
12543: PUSH
12544: LD_INT 1
12546: ST_TO_ADDR
// if p3 = 11 then
12547: LD_VAR 0 3
12551: PUSH
12552: LD_INT 11
12554: EQUAL
12555: IFFALSE 12565
// sRefresh := true ;
12557: LD_ADDR_EXP 60
12561: PUSH
12562: LD_INT 1
12564: ST_TO_ADDR
// if p3 = 12 then
12565: LD_VAR 0 3
12569: PUSH
12570: LD_INT 12
12572: EQUAL
12573: IFFALSE 12583
// sExp := true ;
12575: LD_ADDR_EXP 61
12579: PUSH
12580: LD_INT 1
12582: ST_TO_ADDR
// if p3 = 13 then
12583: LD_VAR 0 3
12587: PUSH
12588: LD_INT 13
12590: EQUAL
12591: IFFALSE 12601
// sDepot := true ;
12593: LD_ADDR_EXP 62
12597: PUSH
12598: LD_INT 1
12600: ST_TO_ADDR
// if p3 = 14 then
12601: LD_VAR 0 3
12605: PUSH
12606: LD_INT 14
12608: EQUAL
12609: IFFALSE 12619
// sFlag := true ;
12611: LD_ADDR_EXP 63
12615: PUSH
12616: LD_INT 1
12618: ST_TO_ADDR
// if p3 = 15 then
12619: LD_VAR 0 3
12623: PUSH
12624: LD_INT 15
12626: EQUAL
12627: IFFALSE 12637
// sKamikadze := true ;
12629: LD_ADDR_EXP 71
12633: PUSH
12634: LD_INT 1
12636: ST_TO_ADDR
// if p3 = 16 then
12637: LD_VAR 0 3
12641: PUSH
12642: LD_INT 16
12644: EQUAL
12645: IFFALSE 12655
// sTroll := true ;
12647: LD_ADDR_EXP 72
12651: PUSH
12652: LD_INT 1
12654: ST_TO_ADDR
// if p3 = 17 then
12655: LD_VAR 0 3
12659: PUSH
12660: LD_INT 17
12662: EQUAL
12663: IFFALSE 12673
// sSlow := true ;
12665: LD_ADDR_EXP 73
12669: PUSH
12670: LD_INT 1
12672: ST_TO_ADDR
// if p3 = 18 then
12673: LD_VAR 0 3
12677: PUSH
12678: LD_INT 18
12680: EQUAL
12681: IFFALSE 12691
// sLack := true ;
12683: LD_ADDR_EXP 74
12687: PUSH
12688: LD_INT 1
12690: ST_TO_ADDR
// if p3 = 19 then
12691: LD_VAR 0 3
12695: PUSH
12696: LD_INT 19
12698: EQUAL
12699: IFFALSE 12709
// sTank := true ;
12701: LD_ADDR_EXP 76
12705: PUSH
12706: LD_INT 1
12708: ST_TO_ADDR
// if p3 = 20 then
12709: LD_VAR 0 3
12713: PUSH
12714: LD_INT 20
12716: EQUAL
12717: IFFALSE 12727
// sRemote := true ;
12719: LD_ADDR_EXP 77
12723: PUSH
12724: LD_INT 1
12726: ST_TO_ADDR
// if p3 = 21 then
12727: LD_VAR 0 3
12731: PUSH
12732: LD_INT 21
12734: EQUAL
12735: IFFALSE 12745
// sPowell := true ;
12737: LD_ADDR_EXP 78
12741: PUSH
12742: LD_INT 1
12744: ST_TO_ADDR
// if p3 = 22 then
12745: LD_VAR 0 3
12749: PUSH
12750: LD_INT 22
12752: EQUAL
12753: IFFALSE 12763
// sTeleport := true ;
12755: LD_ADDR_EXP 81
12759: PUSH
12760: LD_INT 1
12762: ST_TO_ADDR
// if p3 = 23 then
12763: LD_VAR 0 3
12767: PUSH
12768: LD_INT 23
12770: EQUAL
12771: IFFALSE 12781
// sOilTower := true ;
12773: LD_ADDR_EXP 83
12777: PUSH
12778: LD_INT 1
12780: ST_TO_ADDR
// if p3 = 24 then
12781: LD_VAR 0 3
12785: PUSH
12786: LD_INT 24
12788: EQUAL
12789: IFFALSE 12799
// sShovel := true ;
12791: LD_ADDR_EXP 84
12795: PUSH
12796: LD_INT 1
12798: ST_TO_ADDR
// if p3 = 25 then
12799: LD_VAR 0 3
12803: PUSH
12804: LD_INT 25
12806: EQUAL
12807: IFFALSE 12817
// sSheik := true ;
12809: LD_ADDR_EXP 85
12813: PUSH
12814: LD_INT 1
12816: ST_TO_ADDR
// if p3 = 26 then
12817: LD_VAR 0 3
12821: PUSH
12822: LD_INT 26
12824: EQUAL
12825: IFFALSE 12835
// sEarthquake := true ;
12827: LD_ADDR_EXP 87
12831: PUSH
12832: LD_INT 1
12834: ST_TO_ADDR
// if p3 = 27 then
12835: LD_VAR 0 3
12839: PUSH
12840: LD_INT 27
12842: EQUAL
12843: IFFALSE 12853
// sAI := true ;
12845: LD_ADDR_EXP 88
12849: PUSH
12850: LD_INT 1
12852: ST_TO_ADDR
// if p3 = 28 then
12853: LD_VAR 0 3
12857: PUSH
12858: LD_INT 28
12860: EQUAL
12861: IFFALSE 12871
// sCargo := true ;
12863: LD_ADDR_EXP 91
12867: PUSH
12868: LD_INT 1
12870: ST_TO_ADDR
// if p3 = 29 then
12871: LD_VAR 0 3
12875: PUSH
12876: LD_INT 29
12878: EQUAL
12879: IFFALSE 12889
// sDLaser := true ;
12881: LD_ADDR_EXP 92
12885: PUSH
12886: LD_INT 1
12888: ST_TO_ADDR
// if p3 = 30 then
12889: LD_VAR 0 3
12893: PUSH
12894: LD_INT 30
12896: EQUAL
12897: IFFALSE 12907
// sExchange := true ;
12899: LD_ADDR_EXP 93
12903: PUSH
12904: LD_INT 1
12906: ST_TO_ADDR
// if p3 = 31 then
12907: LD_VAR 0 3
12911: PUSH
12912: LD_INT 31
12914: EQUAL
12915: IFFALSE 12925
// sFac := true ;
12917: LD_ADDR_EXP 94
12921: PUSH
12922: LD_INT 1
12924: ST_TO_ADDR
// if p3 = 32 then
12925: LD_VAR 0 3
12929: PUSH
12930: LD_INT 32
12932: EQUAL
12933: IFFALSE 12943
// sPower := true ;
12935: LD_ADDR_EXP 95
12939: PUSH
12940: LD_INT 1
12942: ST_TO_ADDR
// if p3 = 33 then
12943: LD_VAR 0 3
12947: PUSH
12948: LD_INT 33
12950: EQUAL
12951: IFFALSE 12961
// sRandom := true ;
12953: LD_ADDR_EXP 96
12957: PUSH
12958: LD_INT 1
12960: ST_TO_ADDR
// if p3 = 34 then
12961: LD_VAR 0 3
12965: PUSH
12966: LD_INT 34
12968: EQUAL
12969: IFFALSE 12979
// sShield := true ;
12971: LD_ADDR_EXP 97
12975: PUSH
12976: LD_INT 1
12978: ST_TO_ADDR
// if p3 = 35 then
12979: LD_VAR 0 3
12983: PUSH
12984: LD_INT 35
12986: EQUAL
12987: IFFALSE 12997
// sTime := true ;
12989: LD_ADDR_EXP 98
12993: PUSH
12994: LD_INT 1
12996: ST_TO_ADDR
// if p3 = 36 then
12997: LD_VAR 0 3
13001: PUSH
13002: LD_INT 36
13004: EQUAL
13005: IFFALSE 13015
// sTools := true ;
13007: LD_ADDR_EXP 99
13011: PUSH
13012: LD_INT 1
13014: ST_TO_ADDR
// if p3 = 101 then
13015: LD_VAR 0 3
13019: PUSH
13020: LD_INT 101
13022: EQUAL
13023: IFFALSE 13033
// sSold := true ;
13025: LD_ADDR_EXP 64
13029: PUSH
13030: LD_INT 1
13032: ST_TO_ADDR
// if p3 = 102 then
13033: LD_VAR 0 3
13037: PUSH
13038: LD_INT 102
13040: EQUAL
13041: IFFALSE 13051
// sDiff := true ;
13043: LD_ADDR_EXP 65
13047: PUSH
13048: LD_INT 1
13050: ST_TO_ADDR
// if p3 = 103 then
13051: LD_VAR 0 3
13055: PUSH
13056: LD_INT 103
13058: EQUAL
13059: IFFALSE 13069
// sFog := true ;
13061: LD_ADDR_EXP 68
13065: PUSH
13066: LD_INT 1
13068: ST_TO_ADDR
// if p3 = 104 then
13069: LD_VAR 0 3
13073: PUSH
13074: LD_INT 104
13076: EQUAL
13077: IFFALSE 13087
// sReset := true ;
13079: LD_ADDR_EXP 69
13083: PUSH
13084: LD_INT 1
13086: ST_TO_ADDR
// if p3 = 105 then
13087: LD_VAR 0 3
13091: PUSH
13092: LD_INT 105
13094: EQUAL
13095: IFFALSE 13105
// sSun := true ;
13097: LD_ADDR_EXP 70
13101: PUSH
13102: LD_INT 1
13104: ST_TO_ADDR
// if p3 = 106 then
13105: LD_VAR 0 3
13109: PUSH
13110: LD_INT 106
13112: EQUAL
13113: IFFALSE 13123
// sTiger := true ;
13115: LD_ADDR_EXP 66
13119: PUSH
13120: LD_INT 1
13122: ST_TO_ADDR
// if p3 = 107 then
13123: LD_VAR 0 3
13127: PUSH
13128: LD_INT 107
13130: EQUAL
13131: IFFALSE 13141
// sBomb := true ;
13133: LD_ADDR_EXP 67
13137: PUSH
13138: LD_INT 1
13140: ST_TO_ADDR
// if p3 = 108 then
13141: LD_VAR 0 3
13145: PUSH
13146: LD_INT 108
13148: EQUAL
13149: IFFALSE 13159
// sWound := true ;
13151: LD_ADDR_EXP 75
13155: PUSH
13156: LD_INT 1
13158: ST_TO_ADDR
// if p3 = 109 then
13159: LD_VAR 0 3
13163: PUSH
13164: LD_INT 109
13166: EQUAL
13167: IFFALSE 13177
// sBetray := true ;
13169: LD_ADDR_EXP 79
13173: PUSH
13174: LD_INT 1
13176: ST_TO_ADDR
// if p3 = 110 then
13177: LD_VAR 0 3
13181: PUSH
13182: LD_INT 110
13184: EQUAL
13185: IFFALSE 13195
// sContamin := true ;
13187: LD_ADDR_EXP 80
13191: PUSH
13192: LD_INT 1
13194: ST_TO_ADDR
// if p3 = 111 then
13195: LD_VAR 0 3
13199: PUSH
13200: LD_INT 111
13202: EQUAL
13203: IFFALSE 13213
// sOil := true ;
13205: LD_ADDR_EXP 82
13209: PUSH
13210: LD_INT 1
13212: ST_TO_ADDR
// if p3 = 112 then
13213: LD_VAR 0 3
13217: PUSH
13218: LD_INT 112
13220: EQUAL
13221: IFFALSE 13231
// sStu := true ;
13223: LD_ADDR_EXP 86
13227: PUSH
13228: LD_INT 1
13230: ST_TO_ADDR
// if p3 = 113 then
13231: LD_VAR 0 3
13235: PUSH
13236: LD_INT 113
13238: EQUAL
13239: IFFALSE 13249
// sBazooka := true ;
13241: LD_ADDR_EXP 89
13245: PUSH
13246: LD_INT 1
13248: ST_TO_ADDR
// if p3 = 114 then
13249: LD_VAR 0 3
13253: PUSH
13254: LD_INT 114
13256: EQUAL
13257: IFFALSE 13267
// sMortar := true ;
13259: LD_ADDR_EXP 90
13263: PUSH
13264: LD_INT 1
13266: ST_TO_ADDR
// if p3 = 115 then
13267: LD_VAR 0 3
13271: PUSH
13272: LD_INT 115
13274: EQUAL
13275: IFFALSE 13285
// sRanger := true ;
13277: LD_ADDR_EXP 100
13281: PUSH
13282: LD_INT 1
13284: ST_TO_ADDR
// end ; if p2 = 101 then
13285: LD_VAR 0 2
13289: PUSH
13290: LD_INT 101
13292: EQUAL
13293: IFFALSE 13496
// begin case p3 of 1 :
13295: LD_VAR 0 3
13299: PUSH
13300: LD_INT 1
13302: DOUBLE
13303: EQUAL
13304: IFTRUE 13308
13306: GO 13315
13308: POP
// hHackUnlimitedResources ; 2 :
13309: CALL 23590 0 0
13313: GO 13496
13315: LD_INT 2
13317: DOUBLE
13318: EQUAL
13319: IFTRUE 13323
13321: GO 13330
13323: POP
// hHackSetLevel10 ; 3 :
13324: CALL 23723 0 0
13328: GO 13496
13330: LD_INT 3
13332: DOUBLE
13333: EQUAL
13334: IFTRUE 13338
13336: GO 13345
13338: POP
// hHackSetLevel10YourUnits ; 4 :
13339: CALL 23808 0 0
13343: GO 13496
13345: LD_INT 4
13347: DOUBLE
13348: EQUAL
13349: IFTRUE 13353
13351: GO 13375
13353: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
13354: LD_VAR 0 4
13358: PPUSH
13359: LD_VAR 0 5
13363: PPUSH
13364: LD_VAR 0 6
13368: PPUSH
13369: CALL 23898 0 3
13373: GO 13496
13375: LD_INT 5
13377: DOUBLE
13378: EQUAL
13379: IFTRUE 13383
13381: GO 13390
13383: POP
// hHackSpawnVehicle ; 6 :
13384: CALL 23959 0 0
13388: GO 13496
13390: LD_INT 6
13392: DOUBLE
13393: EQUAL
13394: IFTRUE 13398
13396: GO 13405
13398: POP
// hHackInvincible ; 7 :
13399: CALL 24505 0 0
13403: GO 13496
13405: LD_INT 7
13407: DOUBLE
13408: EQUAL
13409: IFTRUE 13413
13411: GO 13420
13413: POP
// hHackInvisible ; 8 :
13414: CALL 24616 0 0
13418: GO 13496
13420: LD_INT 8
13422: DOUBLE
13423: EQUAL
13424: IFTRUE 13428
13426: GO 13435
13428: POP
// hHackChangeYourSide ; 9 :
13429: CALL 24673 0 0
13433: GO 13496
13435: LD_INT 9
13437: DOUBLE
13438: EQUAL
13439: IFTRUE 13443
13441: GO 13450
13443: POP
// hHackChangeUnitSide ; 10 :
13444: CALL 24715 0 0
13448: GO 13496
13450: LD_INT 10
13452: DOUBLE
13453: EQUAL
13454: IFTRUE 13458
13456: GO 13465
13458: POP
// hHackFog ; 11 :
13459: CALL 24816 0 0
13463: GO 13496
13465: LD_INT 11
13467: DOUBLE
13468: EQUAL
13469: IFTRUE 13473
13471: GO 13480
13473: POP
// hHackApeman ; 12 :
13474: CALL 24831 0 0
13478: GO 13496
13480: LD_INT 12
13482: DOUBLE
13483: EQUAL
13484: IFTRUE 13488
13486: GO 13495
13488: POP
// hHackBoom ; end ;
13489: CALL 24916 0 0
13493: GO 13496
13495: POP
// end ; end ;
13496: PPOPN 6
13498: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
13499: GO 13501
13501: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
13502: LD_STRING initStreamRollete();
13504: PPUSH
13505: CALL_OW 559
// InitStreamMode ;
13509: CALL 13518 0 0
// DefineStreamItems ( ) ;
13513: CALL 13958 0 0
// end ;
13517: END
// function InitStreamMode ; begin
13518: LD_INT 0
13520: PPUSH
// streamModeActive := false ;
13521: LD_ADDR_EXP 47
13525: PUSH
13526: LD_INT 0
13528: ST_TO_ADDR
// normalCounter := 36 ;
13529: LD_ADDR_EXP 48
13533: PUSH
13534: LD_INT 36
13536: ST_TO_ADDR
// hardcoreCounter := 16 ;
13537: LD_ADDR_EXP 49
13541: PUSH
13542: LD_INT 16
13544: ST_TO_ADDR
// sRocket := false ;
13545: LD_ADDR_EXP 52
13549: PUSH
13550: LD_INT 0
13552: ST_TO_ADDR
// sSpeed := false ;
13553: LD_ADDR_EXP 51
13557: PUSH
13558: LD_INT 0
13560: ST_TO_ADDR
// sEngine := false ;
13561: LD_ADDR_EXP 53
13565: PUSH
13566: LD_INT 0
13568: ST_TO_ADDR
// sSpec := false ;
13569: LD_ADDR_EXP 50
13573: PUSH
13574: LD_INT 0
13576: ST_TO_ADDR
// sLevel := false ;
13577: LD_ADDR_EXP 54
13581: PUSH
13582: LD_INT 0
13584: ST_TO_ADDR
// sArmoury := false ;
13585: LD_ADDR_EXP 55
13589: PUSH
13590: LD_INT 0
13592: ST_TO_ADDR
// sRadar := false ;
13593: LD_ADDR_EXP 56
13597: PUSH
13598: LD_INT 0
13600: ST_TO_ADDR
// sBunker := false ;
13601: LD_ADDR_EXP 57
13605: PUSH
13606: LD_INT 0
13608: ST_TO_ADDR
// sHack := false ;
13609: LD_ADDR_EXP 58
13613: PUSH
13614: LD_INT 0
13616: ST_TO_ADDR
// sFire := false ;
13617: LD_ADDR_EXP 59
13621: PUSH
13622: LD_INT 0
13624: ST_TO_ADDR
// sRefresh := false ;
13625: LD_ADDR_EXP 60
13629: PUSH
13630: LD_INT 0
13632: ST_TO_ADDR
// sExp := false ;
13633: LD_ADDR_EXP 61
13637: PUSH
13638: LD_INT 0
13640: ST_TO_ADDR
// sDepot := false ;
13641: LD_ADDR_EXP 62
13645: PUSH
13646: LD_INT 0
13648: ST_TO_ADDR
// sFlag := false ;
13649: LD_ADDR_EXP 63
13653: PUSH
13654: LD_INT 0
13656: ST_TO_ADDR
// sKamikadze := false ;
13657: LD_ADDR_EXP 71
13661: PUSH
13662: LD_INT 0
13664: ST_TO_ADDR
// sTroll := false ;
13665: LD_ADDR_EXP 72
13669: PUSH
13670: LD_INT 0
13672: ST_TO_ADDR
// sSlow := false ;
13673: LD_ADDR_EXP 73
13677: PUSH
13678: LD_INT 0
13680: ST_TO_ADDR
// sLack := false ;
13681: LD_ADDR_EXP 74
13685: PUSH
13686: LD_INT 0
13688: ST_TO_ADDR
// sTank := false ;
13689: LD_ADDR_EXP 76
13693: PUSH
13694: LD_INT 0
13696: ST_TO_ADDR
// sRemote := false ;
13697: LD_ADDR_EXP 77
13701: PUSH
13702: LD_INT 0
13704: ST_TO_ADDR
// sPowell := false ;
13705: LD_ADDR_EXP 78
13709: PUSH
13710: LD_INT 0
13712: ST_TO_ADDR
// sTeleport := false ;
13713: LD_ADDR_EXP 81
13717: PUSH
13718: LD_INT 0
13720: ST_TO_ADDR
// sOilTower := false ;
13721: LD_ADDR_EXP 83
13725: PUSH
13726: LD_INT 0
13728: ST_TO_ADDR
// sShovel := false ;
13729: LD_ADDR_EXP 84
13733: PUSH
13734: LD_INT 0
13736: ST_TO_ADDR
// sSheik := false ;
13737: LD_ADDR_EXP 85
13741: PUSH
13742: LD_INT 0
13744: ST_TO_ADDR
// sEarthquake := false ;
13745: LD_ADDR_EXP 87
13749: PUSH
13750: LD_INT 0
13752: ST_TO_ADDR
// sAI := false ;
13753: LD_ADDR_EXP 88
13757: PUSH
13758: LD_INT 0
13760: ST_TO_ADDR
// sCargo := false ;
13761: LD_ADDR_EXP 91
13765: PUSH
13766: LD_INT 0
13768: ST_TO_ADDR
// sDLaser := false ;
13769: LD_ADDR_EXP 92
13773: PUSH
13774: LD_INT 0
13776: ST_TO_ADDR
// sExchange := false ;
13777: LD_ADDR_EXP 93
13781: PUSH
13782: LD_INT 0
13784: ST_TO_ADDR
// sFac := false ;
13785: LD_ADDR_EXP 94
13789: PUSH
13790: LD_INT 0
13792: ST_TO_ADDR
// sPower := false ;
13793: LD_ADDR_EXP 95
13797: PUSH
13798: LD_INT 0
13800: ST_TO_ADDR
// sRandom := false ;
13801: LD_ADDR_EXP 96
13805: PUSH
13806: LD_INT 0
13808: ST_TO_ADDR
// sShield := false ;
13809: LD_ADDR_EXP 97
13813: PUSH
13814: LD_INT 0
13816: ST_TO_ADDR
// sTime := false ;
13817: LD_ADDR_EXP 98
13821: PUSH
13822: LD_INT 0
13824: ST_TO_ADDR
// sTools := false ;
13825: LD_ADDR_EXP 99
13829: PUSH
13830: LD_INT 0
13832: ST_TO_ADDR
// sSold := false ;
13833: LD_ADDR_EXP 64
13837: PUSH
13838: LD_INT 0
13840: ST_TO_ADDR
// sDiff := false ;
13841: LD_ADDR_EXP 65
13845: PUSH
13846: LD_INT 0
13848: ST_TO_ADDR
// sFog := false ;
13849: LD_ADDR_EXP 68
13853: PUSH
13854: LD_INT 0
13856: ST_TO_ADDR
// sReset := false ;
13857: LD_ADDR_EXP 69
13861: PUSH
13862: LD_INT 0
13864: ST_TO_ADDR
// sSun := false ;
13865: LD_ADDR_EXP 70
13869: PUSH
13870: LD_INT 0
13872: ST_TO_ADDR
// sTiger := false ;
13873: LD_ADDR_EXP 66
13877: PUSH
13878: LD_INT 0
13880: ST_TO_ADDR
// sBomb := false ;
13881: LD_ADDR_EXP 67
13885: PUSH
13886: LD_INT 0
13888: ST_TO_ADDR
// sWound := false ;
13889: LD_ADDR_EXP 75
13893: PUSH
13894: LD_INT 0
13896: ST_TO_ADDR
// sBetray := false ;
13897: LD_ADDR_EXP 79
13901: PUSH
13902: LD_INT 0
13904: ST_TO_ADDR
// sContamin := false ;
13905: LD_ADDR_EXP 80
13909: PUSH
13910: LD_INT 0
13912: ST_TO_ADDR
// sOil := false ;
13913: LD_ADDR_EXP 82
13917: PUSH
13918: LD_INT 0
13920: ST_TO_ADDR
// sStu := false ;
13921: LD_ADDR_EXP 86
13925: PUSH
13926: LD_INT 0
13928: ST_TO_ADDR
// sBazooka := false ;
13929: LD_ADDR_EXP 89
13933: PUSH
13934: LD_INT 0
13936: ST_TO_ADDR
// sMortar := false ;
13937: LD_ADDR_EXP 90
13941: PUSH
13942: LD_INT 0
13944: ST_TO_ADDR
// sRanger := false ;
13945: LD_ADDR_EXP 100
13949: PUSH
13950: LD_INT 0
13952: ST_TO_ADDR
// end ;
13953: LD_VAR 0 1
13957: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
13958: LD_INT 0
13960: PPUSH
13961: PPUSH
13962: PPUSH
13963: PPUSH
13964: PPUSH
// result := [ ] ;
13965: LD_ADDR_VAR 0 1
13969: PUSH
13970: EMPTY
13971: ST_TO_ADDR
// if campaign_id = 1 then
13972: LD_OWVAR 69
13976: PUSH
13977: LD_INT 1
13979: EQUAL
13980: IFFALSE 16918
// begin case mission_number of 1 :
13982: LD_OWVAR 70
13986: PUSH
13987: LD_INT 1
13989: DOUBLE
13990: EQUAL
13991: IFTRUE 13995
13993: GO 14059
13995: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
13996: LD_ADDR_VAR 0 1
14000: PUSH
14001: LD_INT 2
14003: PUSH
14004: LD_INT 4
14006: PUSH
14007: LD_INT 11
14009: PUSH
14010: LD_INT 12
14012: PUSH
14013: LD_INT 15
14015: PUSH
14016: LD_INT 16
14018: PUSH
14019: LD_INT 22
14021: PUSH
14022: LD_INT 23
14024: PUSH
14025: LD_INT 26
14027: PUSH
14028: EMPTY
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: PUSH
14039: LD_INT 101
14041: PUSH
14042: LD_INT 102
14044: PUSH
14045: LD_INT 106
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: LIST
14052: PUSH
14053: EMPTY
14054: LIST
14055: LIST
14056: ST_TO_ADDR
14057: GO 16916
14059: LD_INT 2
14061: DOUBLE
14062: EQUAL
14063: IFTRUE 14067
14065: GO 14139
14067: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
14068: LD_ADDR_VAR 0 1
14072: PUSH
14073: LD_INT 2
14075: PUSH
14076: LD_INT 4
14078: PUSH
14079: LD_INT 11
14081: PUSH
14082: LD_INT 12
14084: PUSH
14085: LD_INT 15
14087: PUSH
14088: LD_INT 16
14090: PUSH
14091: LD_INT 22
14093: PUSH
14094: LD_INT 23
14096: PUSH
14097: LD_INT 26
14099: PUSH
14100: EMPTY
14101: LIST
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: LIST
14107: LIST
14108: LIST
14109: LIST
14110: PUSH
14111: LD_INT 101
14113: PUSH
14114: LD_INT 102
14116: PUSH
14117: LD_INT 105
14119: PUSH
14120: LD_INT 106
14122: PUSH
14123: LD_INT 108
14125: PUSH
14126: EMPTY
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: PUSH
14133: EMPTY
14134: LIST
14135: LIST
14136: ST_TO_ADDR
14137: GO 16916
14139: LD_INT 3
14141: DOUBLE
14142: EQUAL
14143: IFTRUE 14147
14145: GO 14223
14147: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
14148: LD_ADDR_VAR 0 1
14152: PUSH
14153: LD_INT 2
14155: PUSH
14156: LD_INT 4
14158: PUSH
14159: LD_INT 5
14161: PUSH
14162: LD_INT 11
14164: PUSH
14165: LD_INT 12
14167: PUSH
14168: LD_INT 15
14170: PUSH
14171: LD_INT 16
14173: PUSH
14174: LD_INT 22
14176: PUSH
14177: LD_INT 26
14179: PUSH
14180: LD_INT 36
14182: PUSH
14183: EMPTY
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: PUSH
14195: LD_INT 101
14197: PUSH
14198: LD_INT 102
14200: PUSH
14201: LD_INT 105
14203: PUSH
14204: LD_INT 106
14206: PUSH
14207: LD_INT 108
14209: PUSH
14210: EMPTY
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: ST_TO_ADDR
14221: GO 16916
14223: LD_INT 4
14225: DOUBLE
14226: EQUAL
14227: IFTRUE 14231
14229: GO 14315
14231: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
14232: LD_ADDR_VAR 0 1
14236: PUSH
14237: LD_INT 2
14239: PUSH
14240: LD_INT 4
14242: PUSH
14243: LD_INT 5
14245: PUSH
14246: LD_INT 8
14248: PUSH
14249: LD_INT 11
14251: PUSH
14252: LD_INT 12
14254: PUSH
14255: LD_INT 15
14257: PUSH
14258: LD_INT 16
14260: PUSH
14261: LD_INT 22
14263: PUSH
14264: LD_INT 23
14266: PUSH
14267: LD_INT 26
14269: PUSH
14270: LD_INT 36
14272: PUSH
14273: EMPTY
14274: LIST
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: PUSH
14287: LD_INT 101
14289: PUSH
14290: LD_INT 102
14292: PUSH
14293: LD_INT 105
14295: PUSH
14296: LD_INT 106
14298: PUSH
14299: LD_INT 108
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: PUSH
14309: EMPTY
14310: LIST
14311: LIST
14312: ST_TO_ADDR
14313: GO 16916
14315: LD_INT 5
14317: DOUBLE
14318: EQUAL
14319: IFTRUE 14323
14321: GO 14423
14323: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
14324: LD_ADDR_VAR 0 1
14328: PUSH
14329: LD_INT 2
14331: PUSH
14332: LD_INT 4
14334: PUSH
14335: LD_INT 5
14337: PUSH
14338: LD_INT 6
14340: PUSH
14341: LD_INT 8
14343: PUSH
14344: LD_INT 11
14346: PUSH
14347: LD_INT 12
14349: PUSH
14350: LD_INT 15
14352: PUSH
14353: LD_INT 16
14355: PUSH
14356: LD_INT 22
14358: PUSH
14359: LD_INT 23
14361: PUSH
14362: LD_INT 25
14364: PUSH
14365: LD_INT 26
14367: PUSH
14368: LD_INT 36
14370: PUSH
14371: EMPTY
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: PUSH
14387: LD_INT 101
14389: PUSH
14390: LD_INT 102
14392: PUSH
14393: LD_INT 105
14395: PUSH
14396: LD_INT 106
14398: PUSH
14399: LD_INT 108
14401: PUSH
14402: LD_INT 109
14404: PUSH
14405: LD_INT 112
14407: PUSH
14408: EMPTY
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: ST_TO_ADDR
14421: GO 16916
14423: LD_INT 6
14425: DOUBLE
14426: EQUAL
14427: IFTRUE 14431
14429: GO 14551
14431: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
14432: LD_ADDR_VAR 0 1
14436: PUSH
14437: LD_INT 2
14439: PUSH
14440: LD_INT 4
14442: PUSH
14443: LD_INT 5
14445: PUSH
14446: LD_INT 6
14448: PUSH
14449: LD_INT 8
14451: PUSH
14452: LD_INT 11
14454: PUSH
14455: LD_INT 12
14457: PUSH
14458: LD_INT 15
14460: PUSH
14461: LD_INT 16
14463: PUSH
14464: LD_INT 20
14466: PUSH
14467: LD_INT 21
14469: PUSH
14470: LD_INT 22
14472: PUSH
14473: LD_INT 23
14475: PUSH
14476: LD_INT 25
14478: PUSH
14479: LD_INT 26
14481: PUSH
14482: LD_INT 30
14484: PUSH
14485: LD_INT 31
14487: PUSH
14488: LD_INT 32
14490: PUSH
14491: LD_INT 36
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: LIST
14502: LIST
14503: LIST
14504: LIST
14505: LIST
14506: LIST
14507: LIST
14508: LIST
14509: LIST
14510: LIST
14511: LIST
14512: LIST
14513: LIST
14514: PUSH
14515: LD_INT 101
14517: PUSH
14518: LD_INT 102
14520: PUSH
14521: LD_INT 105
14523: PUSH
14524: LD_INT 106
14526: PUSH
14527: LD_INT 108
14529: PUSH
14530: LD_INT 109
14532: PUSH
14533: LD_INT 112
14535: PUSH
14536: EMPTY
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: PUSH
14545: EMPTY
14546: LIST
14547: LIST
14548: ST_TO_ADDR
14549: GO 16916
14551: LD_INT 7
14553: DOUBLE
14554: EQUAL
14555: IFTRUE 14559
14557: GO 14659
14559: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
14560: LD_ADDR_VAR 0 1
14564: PUSH
14565: LD_INT 2
14567: PUSH
14568: LD_INT 4
14570: PUSH
14571: LD_INT 5
14573: PUSH
14574: LD_INT 7
14576: PUSH
14577: LD_INT 11
14579: PUSH
14580: LD_INT 12
14582: PUSH
14583: LD_INT 15
14585: PUSH
14586: LD_INT 16
14588: PUSH
14589: LD_INT 20
14591: PUSH
14592: LD_INT 21
14594: PUSH
14595: LD_INT 22
14597: PUSH
14598: LD_INT 23
14600: PUSH
14601: LD_INT 25
14603: PUSH
14604: LD_INT 26
14606: PUSH
14607: EMPTY
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: PUSH
14623: LD_INT 101
14625: PUSH
14626: LD_INT 102
14628: PUSH
14629: LD_INT 103
14631: PUSH
14632: LD_INT 105
14634: PUSH
14635: LD_INT 106
14637: PUSH
14638: LD_INT 108
14640: PUSH
14641: LD_INT 112
14643: PUSH
14644: EMPTY
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: PUSH
14653: EMPTY
14654: LIST
14655: LIST
14656: ST_TO_ADDR
14657: GO 16916
14659: LD_INT 8
14661: DOUBLE
14662: EQUAL
14663: IFTRUE 14667
14665: GO 14795
14667: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
14668: LD_ADDR_VAR 0 1
14672: PUSH
14673: LD_INT 2
14675: PUSH
14676: LD_INT 4
14678: PUSH
14679: LD_INT 5
14681: PUSH
14682: LD_INT 6
14684: PUSH
14685: LD_INT 7
14687: PUSH
14688: LD_INT 8
14690: PUSH
14691: LD_INT 11
14693: PUSH
14694: LD_INT 12
14696: PUSH
14697: LD_INT 15
14699: PUSH
14700: LD_INT 16
14702: PUSH
14703: LD_INT 20
14705: PUSH
14706: LD_INT 21
14708: PUSH
14709: LD_INT 22
14711: PUSH
14712: LD_INT 23
14714: PUSH
14715: LD_INT 25
14717: PUSH
14718: LD_INT 26
14720: PUSH
14721: LD_INT 30
14723: PUSH
14724: LD_INT 31
14726: PUSH
14727: LD_INT 32
14729: PUSH
14730: LD_INT 36
14732: PUSH
14733: EMPTY
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: PUSH
14755: LD_INT 101
14757: PUSH
14758: LD_INT 102
14760: PUSH
14761: LD_INT 103
14763: PUSH
14764: LD_INT 105
14766: PUSH
14767: LD_INT 106
14769: PUSH
14770: LD_INT 108
14772: PUSH
14773: LD_INT 109
14775: PUSH
14776: LD_INT 112
14778: PUSH
14779: EMPTY
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: LIST
14786: LIST
14787: LIST
14788: PUSH
14789: EMPTY
14790: LIST
14791: LIST
14792: ST_TO_ADDR
14793: GO 16916
14795: LD_INT 9
14797: DOUBLE
14798: EQUAL
14799: IFTRUE 14803
14801: GO 14939
14803: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
14804: LD_ADDR_VAR 0 1
14808: PUSH
14809: LD_INT 2
14811: PUSH
14812: LD_INT 4
14814: PUSH
14815: LD_INT 5
14817: PUSH
14818: LD_INT 6
14820: PUSH
14821: LD_INT 7
14823: PUSH
14824: LD_INT 8
14826: PUSH
14827: LD_INT 11
14829: PUSH
14830: LD_INT 12
14832: PUSH
14833: LD_INT 15
14835: PUSH
14836: LD_INT 16
14838: PUSH
14839: LD_INT 20
14841: PUSH
14842: LD_INT 21
14844: PUSH
14845: LD_INT 22
14847: PUSH
14848: LD_INT 23
14850: PUSH
14851: LD_INT 25
14853: PUSH
14854: LD_INT 26
14856: PUSH
14857: LD_INT 28
14859: PUSH
14860: LD_INT 30
14862: PUSH
14863: LD_INT 31
14865: PUSH
14866: LD_INT 32
14868: PUSH
14869: LD_INT 36
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: PUSH
14895: LD_INT 101
14897: PUSH
14898: LD_INT 102
14900: PUSH
14901: LD_INT 103
14903: PUSH
14904: LD_INT 105
14906: PUSH
14907: LD_INT 106
14909: PUSH
14910: LD_INT 108
14912: PUSH
14913: LD_INT 109
14915: PUSH
14916: LD_INT 112
14918: PUSH
14919: LD_INT 114
14921: PUSH
14922: EMPTY
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: PUSH
14933: EMPTY
14934: LIST
14935: LIST
14936: ST_TO_ADDR
14937: GO 16916
14939: LD_INT 10
14941: DOUBLE
14942: EQUAL
14943: IFTRUE 14947
14945: GO 15131
14947: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
14948: LD_ADDR_VAR 0 1
14952: PUSH
14953: LD_INT 2
14955: PUSH
14956: LD_INT 4
14958: PUSH
14959: LD_INT 5
14961: PUSH
14962: LD_INT 6
14964: PUSH
14965: LD_INT 7
14967: PUSH
14968: LD_INT 8
14970: PUSH
14971: LD_INT 9
14973: PUSH
14974: LD_INT 10
14976: PUSH
14977: LD_INT 11
14979: PUSH
14980: LD_INT 12
14982: PUSH
14983: LD_INT 13
14985: PUSH
14986: LD_INT 14
14988: PUSH
14989: LD_INT 15
14991: PUSH
14992: LD_INT 16
14994: PUSH
14995: LD_INT 17
14997: PUSH
14998: LD_INT 18
15000: PUSH
15001: LD_INT 19
15003: PUSH
15004: LD_INT 20
15006: PUSH
15007: LD_INT 21
15009: PUSH
15010: LD_INT 22
15012: PUSH
15013: LD_INT 23
15015: PUSH
15016: LD_INT 24
15018: PUSH
15019: LD_INT 25
15021: PUSH
15022: LD_INT 26
15024: PUSH
15025: LD_INT 28
15027: PUSH
15028: LD_INT 30
15030: PUSH
15031: LD_INT 31
15033: PUSH
15034: LD_INT 32
15036: PUSH
15037: LD_INT 36
15039: PUSH
15040: EMPTY
15041: LIST
15042: LIST
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: LIST
15054: LIST
15055: LIST
15056: LIST
15057: LIST
15058: LIST
15059: LIST
15060: LIST
15061: LIST
15062: LIST
15063: LIST
15064: LIST
15065: LIST
15066: LIST
15067: LIST
15068: LIST
15069: LIST
15070: PUSH
15071: LD_INT 101
15073: PUSH
15074: LD_INT 102
15076: PUSH
15077: LD_INT 103
15079: PUSH
15080: LD_INT 104
15082: PUSH
15083: LD_INT 105
15085: PUSH
15086: LD_INT 106
15088: PUSH
15089: LD_INT 107
15091: PUSH
15092: LD_INT 108
15094: PUSH
15095: LD_INT 109
15097: PUSH
15098: LD_INT 110
15100: PUSH
15101: LD_INT 111
15103: PUSH
15104: LD_INT 112
15106: PUSH
15107: LD_INT 114
15109: PUSH
15110: EMPTY
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: PUSH
15125: EMPTY
15126: LIST
15127: LIST
15128: ST_TO_ADDR
15129: GO 16916
15131: LD_INT 11
15133: DOUBLE
15134: EQUAL
15135: IFTRUE 15139
15137: GO 15331
15139: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
15140: LD_ADDR_VAR 0 1
15144: PUSH
15145: LD_INT 2
15147: PUSH
15148: LD_INT 3
15150: PUSH
15151: LD_INT 4
15153: PUSH
15154: LD_INT 5
15156: PUSH
15157: LD_INT 6
15159: PUSH
15160: LD_INT 7
15162: PUSH
15163: LD_INT 8
15165: PUSH
15166: LD_INT 9
15168: PUSH
15169: LD_INT 10
15171: PUSH
15172: LD_INT 11
15174: PUSH
15175: LD_INT 12
15177: PUSH
15178: LD_INT 13
15180: PUSH
15181: LD_INT 14
15183: PUSH
15184: LD_INT 15
15186: PUSH
15187: LD_INT 16
15189: PUSH
15190: LD_INT 17
15192: PUSH
15193: LD_INT 18
15195: PUSH
15196: LD_INT 19
15198: PUSH
15199: LD_INT 20
15201: PUSH
15202: LD_INT 21
15204: PUSH
15205: LD_INT 22
15207: PUSH
15208: LD_INT 23
15210: PUSH
15211: LD_INT 24
15213: PUSH
15214: LD_INT 25
15216: PUSH
15217: LD_INT 26
15219: PUSH
15220: LD_INT 28
15222: PUSH
15223: LD_INT 30
15225: PUSH
15226: LD_INT 31
15228: PUSH
15229: LD_INT 32
15231: PUSH
15232: LD_INT 34
15234: PUSH
15235: LD_INT 36
15237: PUSH
15238: EMPTY
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: LIST
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: LIST
15263: LIST
15264: LIST
15265: LIST
15266: LIST
15267: LIST
15268: LIST
15269: LIST
15270: PUSH
15271: LD_INT 101
15273: PUSH
15274: LD_INT 102
15276: PUSH
15277: LD_INT 103
15279: PUSH
15280: LD_INT 104
15282: PUSH
15283: LD_INT 105
15285: PUSH
15286: LD_INT 106
15288: PUSH
15289: LD_INT 107
15291: PUSH
15292: LD_INT 108
15294: PUSH
15295: LD_INT 109
15297: PUSH
15298: LD_INT 110
15300: PUSH
15301: LD_INT 111
15303: PUSH
15304: LD_INT 112
15306: PUSH
15307: LD_INT 114
15309: PUSH
15310: EMPTY
15311: LIST
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: ST_TO_ADDR
15329: GO 16916
15331: LD_INT 12
15333: DOUBLE
15334: EQUAL
15335: IFTRUE 15339
15337: GO 15547
15339: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
15340: LD_ADDR_VAR 0 1
15344: PUSH
15345: LD_INT 1
15347: PUSH
15348: LD_INT 2
15350: PUSH
15351: LD_INT 3
15353: PUSH
15354: LD_INT 4
15356: PUSH
15357: LD_INT 5
15359: PUSH
15360: LD_INT 6
15362: PUSH
15363: LD_INT 7
15365: PUSH
15366: LD_INT 8
15368: PUSH
15369: LD_INT 9
15371: PUSH
15372: LD_INT 10
15374: PUSH
15375: LD_INT 11
15377: PUSH
15378: LD_INT 12
15380: PUSH
15381: LD_INT 13
15383: PUSH
15384: LD_INT 14
15386: PUSH
15387: LD_INT 15
15389: PUSH
15390: LD_INT 16
15392: PUSH
15393: LD_INT 17
15395: PUSH
15396: LD_INT 18
15398: PUSH
15399: LD_INT 19
15401: PUSH
15402: LD_INT 20
15404: PUSH
15405: LD_INT 21
15407: PUSH
15408: LD_INT 22
15410: PUSH
15411: LD_INT 23
15413: PUSH
15414: LD_INT 24
15416: PUSH
15417: LD_INT 25
15419: PUSH
15420: LD_INT 26
15422: PUSH
15423: LD_INT 27
15425: PUSH
15426: LD_INT 28
15428: PUSH
15429: LD_INT 30
15431: PUSH
15432: LD_INT 31
15434: PUSH
15435: LD_INT 32
15437: PUSH
15438: LD_INT 33
15440: PUSH
15441: LD_INT 34
15443: PUSH
15444: LD_INT 36
15446: PUSH
15447: EMPTY
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: LIST
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: PUSH
15483: LD_INT 101
15485: PUSH
15486: LD_INT 102
15488: PUSH
15489: LD_INT 103
15491: PUSH
15492: LD_INT 104
15494: PUSH
15495: LD_INT 105
15497: PUSH
15498: LD_INT 106
15500: PUSH
15501: LD_INT 107
15503: PUSH
15504: LD_INT 108
15506: PUSH
15507: LD_INT 109
15509: PUSH
15510: LD_INT 110
15512: PUSH
15513: LD_INT 111
15515: PUSH
15516: LD_INT 112
15518: PUSH
15519: LD_INT 113
15521: PUSH
15522: LD_INT 114
15524: PUSH
15525: EMPTY
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: PUSH
15541: EMPTY
15542: LIST
15543: LIST
15544: ST_TO_ADDR
15545: GO 16916
15547: LD_INT 13
15549: DOUBLE
15550: EQUAL
15551: IFTRUE 15555
15553: GO 15751
15555: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
15556: LD_ADDR_VAR 0 1
15560: PUSH
15561: LD_INT 1
15563: PUSH
15564: LD_INT 2
15566: PUSH
15567: LD_INT 3
15569: PUSH
15570: LD_INT 4
15572: PUSH
15573: LD_INT 5
15575: PUSH
15576: LD_INT 8
15578: PUSH
15579: LD_INT 9
15581: PUSH
15582: LD_INT 10
15584: PUSH
15585: LD_INT 11
15587: PUSH
15588: LD_INT 12
15590: PUSH
15591: LD_INT 14
15593: PUSH
15594: LD_INT 15
15596: PUSH
15597: LD_INT 16
15599: PUSH
15600: LD_INT 17
15602: PUSH
15603: LD_INT 18
15605: PUSH
15606: LD_INT 19
15608: PUSH
15609: LD_INT 20
15611: PUSH
15612: LD_INT 21
15614: PUSH
15615: LD_INT 22
15617: PUSH
15618: LD_INT 23
15620: PUSH
15621: LD_INT 24
15623: PUSH
15624: LD_INT 25
15626: PUSH
15627: LD_INT 26
15629: PUSH
15630: LD_INT 27
15632: PUSH
15633: LD_INT 28
15635: PUSH
15636: LD_INT 30
15638: PUSH
15639: LD_INT 31
15641: PUSH
15642: LD_INT 32
15644: PUSH
15645: LD_INT 33
15647: PUSH
15648: LD_INT 34
15650: PUSH
15651: LD_INT 36
15653: PUSH
15654: EMPTY
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: LIST
15686: PUSH
15687: LD_INT 101
15689: PUSH
15690: LD_INT 102
15692: PUSH
15693: LD_INT 103
15695: PUSH
15696: LD_INT 104
15698: PUSH
15699: LD_INT 105
15701: PUSH
15702: LD_INT 106
15704: PUSH
15705: LD_INT 107
15707: PUSH
15708: LD_INT 108
15710: PUSH
15711: LD_INT 109
15713: PUSH
15714: LD_INT 110
15716: PUSH
15717: LD_INT 111
15719: PUSH
15720: LD_INT 112
15722: PUSH
15723: LD_INT 113
15725: PUSH
15726: LD_INT 114
15728: PUSH
15729: EMPTY
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: ST_TO_ADDR
15749: GO 16916
15751: LD_INT 14
15753: DOUBLE
15754: EQUAL
15755: IFTRUE 15759
15757: GO 15971
15759: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
15760: LD_ADDR_VAR 0 1
15764: PUSH
15765: LD_INT 1
15767: PUSH
15768: LD_INT 2
15770: PUSH
15771: LD_INT 3
15773: PUSH
15774: LD_INT 4
15776: PUSH
15777: LD_INT 5
15779: PUSH
15780: LD_INT 6
15782: PUSH
15783: LD_INT 7
15785: PUSH
15786: LD_INT 8
15788: PUSH
15789: LD_INT 9
15791: PUSH
15792: LD_INT 10
15794: PUSH
15795: LD_INT 11
15797: PUSH
15798: LD_INT 12
15800: PUSH
15801: LD_INT 13
15803: PUSH
15804: LD_INT 14
15806: PUSH
15807: LD_INT 15
15809: PUSH
15810: LD_INT 16
15812: PUSH
15813: LD_INT 17
15815: PUSH
15816: LD_INT 18
15818: PUSH
15819: LD_INT 19
15821: PUSH
15822: LD_INT 20
15824: PUSH
15825: LD_INT 21
15827: PUSH
15828: LD_INT 22
15830: PUSH
15831: LD_INT 23
15833: PUSH
15834: LD_INT 24
15836: PUSH
15837: LD_INT 25
15839: PUSH
15840: LD_INT 26
15842: PUSH
15843: LD_INT 27
15845: PUSH
15846: LD_INT 28
15848: PUSH
15849: LD_INT 29
15851: PUSH
15852: LD_INT 30
15854: PUSH
15855: LD_INT 31
15857: PUSH
15858: LD_INT 32
15860: PUSH
15861: LD_INT 33
15863: PUSH
15864: LD_INT 34
15866: PUSH
15867: LD_INT 36
15869: PUSH
15870: EMPTY
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: LIST
15888: LIST
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: LIST
15896: LIST
15897: LIST
15898: LIST
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: PUSH
15907: LD_INT 101
15909: PUSH
15910: LD_INT 102
15912: PUSH
15913: LD_INT 103
15915: PUSH
15916: LD_INT 104
15918: PUSH
15919: LD_INT 105
15921: PUSH
15922: LD_INT 106
15924: PUSH
15925: LD_INT 107
15927: PUSH
15928: LD_INT 108
15930: PUSH
15931: LD_INT 109
15933: PUSH
15934: LD_INT 110
15936: PUSH
15937: LD_INT 111
15939: PUSH
15940: LD_INT 112
15942: PUSH
15943: LD_INT 113
15945: PUSH
15946: LD_INT 114
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: ST_TO_ADDR
15969: GO 16916
15971: LD_INT 15
15973: DOUBLE
15974: EQUAL
15975: IFTRUE 15979
15977: GO 16191
15979: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
15980: LD_ADDR_VAR 0 1
15984: PUSH
15985: LD_INT 1
15987: PUSH
15988: LD_INT 2
15990: PUSH
15991: LD_INT 3
15993: PUSH
15994: LD_INT 4
15996: PUSH
15997: LD_INT 5
15999: PUSH
16000: LD_INT 6
16002: PUSH
16003: LD_INT 7
16005: PUSH
16006: LD_INT 8
16008: PUSH
16009: LD_INT 9
16011: PUSH
16012: LD_INT 10
16014: PUSH
16015: LD_INT 11
16017: PUSH
16018: LD_INT 12
16020: PUSH
16021: LD_INT 13
16023: PUSH
16024: LD_INT 14
16026: PUSH
16027: LD_INT 15
16029: PUSH
16030: LD_INT 16
16032: PUSH
16033: LD_INT 17
16035: PUSH
16036: LD_INT 18
16038: PUSH
16039: LD_INT 19
16041: PUSH
16042: LD_INT 20
16044: PUSH
16045: LD_INT 21
16047: PUSH
16048: LD_INT 22
16050: PUSH
16051: LD_INT 23
16053: PUSH
16054: LD_INT 24
16056: PUSH
16057: LD_INT 25
16059: PUSH
16060: LD_INT 26
16062: PUSH
16063: LD_INT 27
16065: PUSH
16066: LD_INT 28
16068: PUSH
16069: LD_INT 29
16071: PUSH
16072: LD_INT 30
16074: PUSH
16075: LD_INT 31
16077: PUSH
16078: LD_INT 32
16080: PUSH
16081: LD_INT 33
16083: PUSH
16084: LD_INT 34
16086: PUSH
16087: LD_INT 36
16089: PUSH
16090: EMPTY
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: PUSH
16127: LD_INT 101
16129: PUSH
16130: LD_INT 102
16132: PUSH
16133: LD_INT 103
16135: PUSH
16136: LD_INT 104
16138: PUSH
16139: LD_INT 105
16141: PUSH
16142: LD_INT 106
16144: PUSH
16145: LD_INT 107
16147: PUSH
16148: LD_INT 108
16150: PUSH
16151: LD_INT 109
16153: PUSH
16154: LD_INT 110
16156: PUSH
16157: LD_INT 111
16159: PUSH
16160: LD_INT 112
16162: PUSH
16163: LD_INT 113
16165: PUSH
16166: LD_INT 114
16168: PUSH
16169: EMPTY
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: ST_TO_ADDR
16189: GO 16916
16191: LD_INT 16
16193: DOUBLE
16194: EQUAL
16195: IFTRUE 16199
16197: GO 16323
16199: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
16200: LD_ADDR_VAR 0 1
16204: PUSH
16205: LD_INT 2
16207: PUSH
16208: LD_INT 4
16210: PUSH
16211: LD_INT 5
16213: PUSH
16214: LD_INT 7
16216: PUSH
16217: LD_INT 11
16219: PUSH
16220: LD_INT 12
16222: PUSH
16223: LD_INT 15
16225: PUSH
16226: LD_INT 16
16228: PUSH
16229: LD_INT 20
16231: PUSH
16232: LD_INT 21
16234: PUSH
16235: LD_INT 22
16237: PUSH
16238: LD_INT 23
16240: PUSH
16241: LD_INT 25
16243: PUSH
16244: LD_INT 26
16246: PUSH
16247: LD_INT 30
16249: PUSH
16250: LD_INT 31
16252: PUSH
16253: LD_INT 32
16255: PUSH
16256: LD_INT 33
16258: PUSH
16259: LD_INT 34
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: LIST
16268: LIST
16269: LIST
16270: LIST
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: LIST
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: LIST
16282: PUSH
16283: LD_INT 101
16285: PUSH
16286: LD_INT 102
16288: PUSH
16289: LD_INT 103
16291: PUSH
16292: LD_INT 106
16294: PUSH
16295: LD_INT 108
16297: PUSH
16298: LD_INT 112
16300: PUSH
16301: LD_INT 113
16303: PUSH
16304: LD_INT 114
16306: PUSH
16307: EMPTY
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: ST_TO_ADDR
16321: GO 16916
16323: LD_INT 17
16325: DOUBLE
16326: EQUAL
16327: IFTRUE 16331
16329: GO 16543
16331: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
16332: LD_ADDR_VAR 0 1
16336: PUSH
16337: LD_INT 1
16339: PUSH
16340: LD_INT 2
16342: PUSH
16343: LD_INT 3
16345: PUSH
16346: LD_INT 4
16348: PUSH
16349: LD_INT 5
16351: PUSH
16352: LD_INT 6
16354: PUSH
16355: LD_INT 7
16357: PUSH
16358: LD_INT 8
16360: PUSH
16361: LD_INT 9
16363: PUSH
16364: LD_INT 10
16366: PUSH
16367: LD_INT 11
16369: PUSH
16370: LD_INT 12
16372: PUSH
16373: LD_INT 13
16375: PUSH
16376: LD_INT 14
16378: PUSH
16379: LD_INT 15
16381: PUSH
16382: LD_INT 16
16384: PUSH
16385: LD_INT 17
16387: PUSH
16388: LD_INT 18
16390: PUSH
16391: LD_INT 19
16393: PUSH
16394: LD_INT 20
16396: PUSH
16397: LD_INT 21
16399: PUSH
16400: LD_INT 22
16402: PUSH
16403: LD_INT 23
16405: PUSH
16406: LD_INT 24
16408: PUSH
16409: LD_INT 25
16411: PUSH
16412: LD_INT 26
16414: PUSH
16415: LD_INT 27
16417: PUSH
16418: LD_INT 28
16420: PUSH
16421: LD_INT 29
16423: PUSH
16424: LD_INT 30
16426: PUSH
16427: LD_INT 31
16429: PUSH
16430: LD_INT 32
16432: PUSH
16433: LD_INT 33
16435: PUSH
16436: LD_INT 34
16438: PUSH
16439: LD_INT 36
16441: PUSH
16442: EMPTY
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: LIST
16465: LIST
16466: LIST
16467: LIST
16468: LIST
16469: LIST
16470: LIST
16471: LIST
16472: LIST
16473: LIST
16474: LIST
16475: LIST
16476: LIST
16477: LIST
16478: PUSH
16479: LD_INT 101
16481: PUSH
16482: LD_INT 102
16484: PUSH
16485: LD_INT 103
16487: PUSH
16488: LD_INT 104
16490: PUSH
16491: LD_INT 105
16493: PUSH
16494: LD_INT 106
16496: PUSH
16497: LD_INT 107
16499: PUSH
16500: LD_INT 108
16502: PUSH
16503: LD_INT 109
16505: PUSH
16506: LD_INT 110
16508: PUSH
16509: LD_INT 111
16511: PUSH
16512: LD_INT 112
16514: PUSH
16515: LD_INT 113
16517: PUSH
16518: LD_INT 114
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: ST_TO_ADDR
16541: GO 16916
16543: LD_INT 18
16545: DOUBLE
16546: EQUAL
16547: IFTRUE 16551
16549: GO 16687
16551: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
16552: LD_ADDR_VAR 0 1
16556: PUSH
16557: LD_INT 2
16559: PUSH
16560: LD_INT 4
16562: PUSH
16563: LD_INT 5
16565: PUSH
16566: LD_INT 7
16568: PUSH
16569: LD_INT 11
16571: PUSH
16572: LD_INT 12
16574: PUSH
16575: LD_INT 15
16577: PUSH
16578: LD_INT 16
16580: PUSH
16581: LD_INT 20
16583: PUSH
16584: LD_INT 21
16586: PUSH
16587: LD_INT 22
16589: PUSH
16590: LD_INT 23
16592: PUSH
16593: LD_INT 25
16595: PUSH
16596: LD_INT 26
16598: PUSH
16599: LD_INT 30
16601: PUSH
16602: LD_INT 31
16604: PUSH
16605: LD_INT 32
16607: PUSH
16608: LD_INT 33
16610: PUSH
16611: LD_INT 34
16613: PUSH
16614: LD_INT 35
16616: PUSH
16617: LD_INT 36
16619: PUSH
16620: EMPTY
16621: LIST
16622: LIST
16623: LIST
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: LIST
16632: LIST
16633: LIST
16634: LIST
16635: LIST
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: LIST
16641: LIST
16642: PUSH
16643: LD_INT 101
16645: PUSH
16646: LD_INT 102
16648: PUSH
16649: LD_INT 103
16651: PUSH
16652: LD_INT 106
16654: PUSH
16655: LD_INT 108
16657: PUSH
16658: LD_INT 112
16660: PUSH
16661: LD_INT 113
16663: PUSH
16664: LD_INT 114
16666: PUSH
16667: LD_INT 115
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: LIST
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: LIST
16679: LIST
16680: PUSH
16681: EMPTY
16682: LIST
16683: LIST
16684: ST_TO_ADDR
16685: GO 16916
16687: LD_INT 19
16689: DOUBLE
16690: EQUAL
16691: IFTRUE 16695
16693: GO 16915
16695: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
16696: LD_ADDR_VAR 0 1
16700: PUSH
16701: LD_INT 1
16703: PUSH
16704: LD_INT 2
16706: PUSH
16707: LD_INT 3
16709: PUSH
16710: LD_INT 4
16712: PUSH
16713: LD_INT 5
16715: PUSH
16716: LD_INT 6
16718: PUSH
16719: LD_INT 7
16721: PUSH
16722: LD_INT 8
16724: PUSH
16725: LD_INT 9
16727: PUSH
16728: LD_INT 10
16730: PUSH
16731: LD_INT 11
16733: PUSH
16734: LD_INT 12
16736: PUSH
16737: LD_INT 13
16739: PUSH
16740: LD_INT 14
16742: PUSH
16743: LD_INT 15
16745: PUSH
16746: LD_INT 16
16748: PUSH
16749: LD_INT 17
16751: PUSH
16752: LD_INT 18
16754: PUSH
16755: LD_INT 19
16757: PUSH
16758: LD_INT 20
16760: PUSH
16761: LD_INT 21
16763: PUSH
16764: LD_INT 22
16766: PUSH
16767: LD_INT 23
16769: PUSH
16770: LD_INT 24
16772: PUSH
16773: LD_INT 25
16775: PUSH
16776: LD_INT 26
16778: PUSH
16779: LD_INT 27
16781: PUSH
16782: LD_INT 28
16784: PUSH
16785: LD_INT 29
16787: PUSH
16788: LD_INT 30
16790: PUSH
16791: LD_INT 31
16793: PUSH
16794: LD_INT 32
16796: PUSH
16797: LD_INT 33
16799: PUSH
16800: LD_INT 34
16802: PUSH
16803: LD_INT 35
16805: PUSH
16806: LD_INT 36
16808: PUSH
16809: EMPTY
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: LIST
16836: LIST
16837: LIST
16838: LIST
16839: LIST
16840: LIST
16841: LIST
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: PUSH
16847: LD_INT 101
16849: PUSH
16850: LD_INT 102
16852: PUSH
16853: LD_INT 103
16855: PUSH
16856: LD_INT 104
16858: PUSH
16859: LD_INT 105
16861: PUSH
16862: LD_INT 106
16864: PUSH
16865: LD_INT 107
16867: PUSH
16868: LD_INT 108
16870: PUSH
16871: LD_INT 109
16873: PUSH
16874: LD_INT 110
16876: PUSH
16877: LD_INT 111
16879: PUSH
16880: LD_INT 112
16882: PUSH
16883: LD_INT 113
16885: PUSH
16886: LD_INT 114
16888: PUSH
16889: LD_INT 115
16891: PUSH
16892: EMPTY
16893: LIST
16894: LIST
16895: LIST
16896: LIST
16897: LIST
16898: LIST
16899: LIST
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: LIST
16905: LIST
16906: LIST
16907: LIST
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: ST_TO_ADDR
16913: GO 16916
16915: POP
// end else
16916: GO 17135
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
16918: LD_ADDR_VAR 0 1
16922: PUSH
16923: LD_INT 1
16925: PUSH
16926: LD_INT 2
16928: PUSH
16929: LD_INT 3
16931: PUSH
16932: LD_INT 4
16934: PUSH
16935: LD_INT 5
16937: PUSH
16938: LD_INT 6
16940: PUSH
16941: LD_INT 7
16943: PUSH
16944: LD_INT 8
16946: PUSH
16947: LD_INT 9
16949: PUSH
16950: LD_INT 10
16952: PUSH
16953: LD_INT 11
16955: PUSH
16956: LD_INT 12
16958: PUSH
16959: LD_INT 13
16961: PUSH
16962: LD_INT 14
16964: PUSH
16965: LD_INT 15
16967: PUSH
16968: LD_INT 16
16970: PUSH
16971: LD_INT 17
16973: PUSH
16974: LD_INT 18
16976: PUSH
16977: LD_INT 19
16979: PUSH
16980: LD_INT 20
16982: PUSH
16983: LD_INT 21
16985: PUSH
16986: LD_INT 22
16988: PUSH
16989: LD_INT 23
16991: PUSH
16992: LD_INT 24
16994: PUSH
16995: LD_INT 25
16997: PUSH
16998: LD_INT 26
17000: PUSH
17001: LD_INT 27
17003: PUSH
17004: LD_INT 28
17006: PUSH
17007: LD_INT 29
17009: PUSH
17010: LD_INT 30
17012: PUSH
17013: LD_INT 31
17015: PUSH
17016: LD_INT 32
17018: PUSH
17019: LD_INT 33
17021: PUSH
17022: LD_INT 34
17024: PUSH
17025: LD_INT 35
17027: PUSH
17028: LD_INT 36
17030: PUSH
17031: EMPTY
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: LIST
17064: LIST
17065: LIST
17066: LIST
17067: LIST
17068: PUSH
17069: LD_INT 101
17071: PUSH
17072: LD_INT 102
17074: PUSH
17075: LD_INT 103
17077: PUSH
17078: LD_INT 104
17080: PUSH
17081: LD_INT 105
17083: PUSH
17084: LD_INT 106
17086: PUSH
17087: LD_INT 107
17089: PUSH
17090: LD_INT 108
17092: PUSH
17093: LD_INT 109
17095: PUSH
17096: LD_INT 110
17098: PUSH
17099: LD_INT 111
17101: PUSH
17102: LD_INT 112
17104: PUSH
17105: LD_INT 113
17107: PUSH
17108: LD_INT 114
17110: PUSH
17111: LD_INT 115
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: LIST
17118: LIST
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: LIST
17127: LIST
17128: LIST
17129: LIST
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: ST_TO_ADDR
// if result then
17135: LD_VAR 0 1
17139: IFFALSE 17428
// begin normal :=  ;
17141: LD_ADDR_VAR 0 3
17145: PUSH
17146: LD_STRING 
17148: ST_TO_ADDR
// hardcore :=  ;
17149: LD_ADDR_VAR 0 4
17153: PUSH
17154: LD_STRING 
17156: ST_TO_ADDR
// for i = 1 to normalCounter do
17157: LD_ADDR_VAR 0 5
17161: PUSH
17162: DOUBLE
17163: LD_INT 1
17165: DEC
17166: ST_TO_ADDR
17167: LD_EXP 48
17171: PUSH
17172: FOR_TO
17173: IFFALSE 17274
// begin tmp := 0 ;
17175: LD_ADDR_VAR 0 2
17179: PUSH
17180: LD_STRING 0
17182: ST_TO_ADDR
// if result [ 1 ] then
17183: LD_VAR 0 1
17187: PUSH
17188: LD_INT 1
17190: ARRAY
17191: IFFALSE 17256
// if result [ 1 ] [ 1 ] = i then
17193: LD_VAR 0 1
17197: PUSH
17198: LD_INT 1
17200: ARRAY
17201: PUSH
17202: LD_INT 1
17204: ARRAY
17205: PUSH
17206: LD_VAR 0 5
17210: EQUAL
17211: IFFALSE 17256
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
17213: LD_ADDR_VAR 0 1
17217: PUSH
17218: LD_VAR 0 1
17222: PPUSH
17223: LD_INT 1
17225: PPUSH
17226: LD_VAR 0 1
17230: PUSH
17231: LD_INT 1
17233: ARRAY
17234: PPUSH
17235: LD_INT 1
17237: PPUSH
17238: CALL_OW 3
17242: PPUSH
17243: CALL_OW 1
17247: ST_TO_ADDR
// tmp := 1 ;
17248: LD_ADDR_VAR 0 2
17252: PUSH
17253: LD_STRING 1
17255: ST_TO_ADDR
// end ; normal := normal & tmp ;
17256: LD_ADDR_VAR 0 3
17260: PUSH
17261: LD_VAR 0 3
17265: PUSH
17266: LD_VAR 0 2
17270: STR
17271: ST_TO_ADDR
// end ;
17272: GO 17172
17274: POP
17275: POP
// for i = 1 to hardcoreCounter do
17276: LD_ADDR_VAR 0 5
17280: PUSH
17281: DOUBLE
17282: LD_INT 1
17284: DEC
17285: ST_TO_ADDR
17286: LD_EXP 49
17290: PUSH
17291: FOR_TO
17292: IFFALSE 17397
// begin tmp := 0 ;
17294: LD_ADDR_VAR 0 2
17298: PUSH
17299: LD_STRING 0
17301: ST_TO_ADDR
// if result [ 2 ] then
17302: LD_VAR 0 1
17306: PUSH
17307: LD_INT 2
17309: ARRAY
17310: IFFALSE 17379
// if result [ 2 ] [ 1 ] = 100 + i then
17312: LD_VAR 0 1
17316: PUSH
17317: LD_INT 2
17319: ARRAY
17320: PUSH
17321: LD_INT 1
17323: ARRAY
17324: PUSH
17325: LD_INT 100
17327: PUSH
17328: LD_VAR 0 5
17332: PLUS
17333: EQUAL
17334: IFFALSE 17379
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17336: LD_ADDR_VAR 0 1
17340: PUSH
17341: LD_VAR 0 1
17345: PPUSH
17346: LD_INT 2
17348: PPUSH
17349: LD_VAR 0 1
17353: PUSH
17354: LD_INT 2
17356: ARRAY
17357: PPUSH
17358: LD_INT 1
17360: PPUSH
17361: CALL_OW 3
17365: PPUSH
17366: CALL_OW 1
17370: ST_TO_ADDR
// tmp := 1 ;
17371: LD_ADDR_VAR 0 2
17375: PUSH
17376: LD_STRING 1
17378: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17379: LD_ADDR_VAR 0 4
17383: PUSH
17384: LD_VAR 0 4
17388: PUSH
17389: LD_VAR 0 2
17393: STR
17394: ST_TO_ADDR
// end ;
17395: GO 17291
17397: POP
17398: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
17399: LD_STRING getStreamItemsFromMission("
17401: PUSH
17402: LD_VAR 0 3
17406: STR
17407: PUSH
17408: LD_STRING ","
17410: STR
17411: PUSH
17412: LD_VAR 0 4
17416: STR
17417: PUSH
17418: LD_STRING ")
17420: STR
17421: PPUSH
17422: CALL_OW 559
// end else
17426: GO 17435
// ToLua ( getStreamItemsFromMission("","") ) ;
17428: LD_STRING getStreamItemsFromMission("","")
17430: PPUSH
17431: CALL_OW 559
// end ;
17435: LD_VAR 0 1
17439: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17440: LD_EXP 47
17444: PUSH
17445: LD_EXP 52
17449: AND
17450: IFFALSE 17574
17452: GO 17454
17454: DISABLE
17455: LD_INT 0
17457: PPUSH
17458: PPUSH
// begin enable ;
17459: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17460: LD_ADDR_VAR 0 2
17464: PUSH
17465: LD_INT 22
17467: PUSH
17468: LD_OWVAR 2
17472: PUSH
17473: EMPTY
17474: LIST
17475: LIST
17476: PUSH
17477: LD_INT 2
17479: PUSH
17480: LD_INT 34
17482: PUSH
17483: LD_INT 7
17485: PUSH
17486: EMPTY
17487: LIST
17488: LIST
17489: PUSH
17490: LD_INT 34
17492: PUSH
17493: LD_INT 45
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: PUSH
17500: LD_INT 34
17502: PUSH
17503: LD_INT 28
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: PUSH
17510: LD_INT 34
17512: PUSH
17513: LD_INT 47
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: PUSH
17520: EMPTY
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: PPUSH
17531: CALL_OW 69
17535: ST_TO_ADDR
// if not tmp then
17536: LD_VAR 0 2
17540: NOT
17541: IFFALSE 17545
// exit ;
17543: GO 17574
// for i in tmp do
17545: LD_ADDR_VAR 0 1
17549: PUSH
17550: LD_VAR 0 2
17554: PUSH
17555: FOR_IN
17556: IFFALSE 17572
// begin SetLives ( i , 0 ) ;
17558: LD_VAR 0 1
17562: PPUSH
17563: LD_INT 0
17565: PPUSH
17566: CALL_OW 234
// end ;
17570: GO 17555
17572: POP
17573: POP
// end ;
17574: PPOPN 2
17576: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17577: LD_EXP 47
17581: PUSH
17582: LD_EXP 53
17586: AND
17587: IFFALSE 17671
17589: GO 17591
17591: DISABLE
17592: LD_INT 0
17594: PPUSH
17595: PPUSH
// begin enable ;
17596: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17597: LD_ADDR_VAR 0 2
17601: PUSH
17602: LD_INT 22
17604: PUSH
17605: LD_OWVAR 2
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: PUSH
17614: LD_INT 32
17616: PUSH
17617: LD_INT 3
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: PPUSH
17628: CALL_OW 69
17632: ST_TO_ADDR
// if not tmp then
17633: LD_VAR 0 2
17637: NOT
17638: IFFALSE 17642
// exit ;
17640: GO 17671
// for i in tmp do
17642: LD_ADDR_VAR 0 1
17646: PUSH
17647: LD_VAR 0 2
17651: PUSH
17652: FOR_IN
17653: IFFALSE 17669
// begin SetLives ( i , 0 ) ;
17655: LD_VAR 0 1
17659: PPUSH
17660: LD_INT 0
17662: PPUSH
17663: CALL_OW 234
// end ;
17667: GO 17652
17669: POP
17670: POP
// end ;
17671: PPOPN 2
17673: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17674: LD_EXP 47
17678: PUSH
17679: LD_EXP 50
17683: AND
17684: IFFALSE 17777
17686: GO 17688
17688: DISABLE
17689: LD_INT 0
17691: PPUSH
// begin enable ;
17692: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17693: LD_ADDR_VAR 0 1
17697: PUSH
17698: LD_INT 22
17700: PUSH
17701: LD_OWVAR 2
17705: PUSH
17706: EMPTY
17707: LIST
17708: LIST
17709: PUSH
17710: LD_INT 2
17712: PUSH
17713: LD_INT 25
17715: PUSH
17716: LD_INT 5
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: PUSH
17723: LD_INT 25
17725: PUSH
17726: LD_INT 9
17728: PUSH
17729: EMPTY
17730: LIST
17731: LIST
17732: PUSH
17733: LD_INT 25
17735: PUSH
17736: LD_INT 8
17738: PUSH
17739: EMPTY
17740: LIST
17741: LIST
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: PUSH
17749: EMPTY
17750: LIST
17751: LIST
17752: PPUSH
17753: CALL_OW 69
17757: PUSH
17758: FOR_IN
17759: IFFALSE 17775
// begin SetClass ( i , 1 ) ;
17761: LD_VAR 0 1
17765: PPUSH
17766: LD_INT 1
17768: PPUSH
17769: CALL_OW 336
// end ;
17773: GO 17758
17775: POP
17776: POP
// end ;
17777: PPOPN 1
17779: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17780: LD_EXP 47
17784: PUSH
17785: LD_EXP 51
17789: AND
17790: PUSH
17791: LD_OWVAR 65
17795: PUSH
17796: LD_INT 7
17798: LESS
17799: AND
17800: IFFALSE 17814
17802: GO 17804
17804: DISABLE
// begin enable ;
17805: ENABLE
// game_speed := 7 ;
17806: LD_ADDR_OWVAR 65
17810: PUSH
17811: LD_INT 7
17813: ST_TO_ADDR
// end ;
17814: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17815: LD_EXP 47
17819: PUSH
17820: LD_EXP 54
17824: AND
17825: IFFALSE 18027
17827: GO 17829
17829: DISABLE
17830: LD_INT 0
17832: PPUSH
17833: PPUSH
17834: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17835: LD_ADDR_VAR 0 3
17839: PUSH
17840: LD_INT 81
17842: PUSH
17843: LD_OWVAR 2
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: PUSH
17852: LD_INT 21
17854: PUSH
17855: LD_INT 1
17857: PUSH
17858: EMPTY
17859: LIST
17860: LIST
17861: PUSH
17862: EMPTY
17863: LIST
17864: LIST
17865: PPUSH
17866: CALL_OW 69
17870: ST_TO_ADDR
// if not tmp then
17871: LD_VAR 0 3
17875: NOT
17876: IFFALSE 17880
// exit ;
17878: GO 18027
// if tmp > 5 then
17880: LD_VAR 0 3
17884: PUSH
17885: LD_INT 5
17887: GREATER
17888: IFFALSE 17900
// k := 5 else
17890: LD_ADDR_VAR 0 2
17894: PUSH
17895: LD_INT 5
17897: ST_TO_ADDR
17898: GO 17910
// k := tmp ;
17900: LD_ADDR_VAR 0 2
17904: PUSH
17905: LD_VAR 0 3
17909: ST_TO_ADDR
// for i := 1 to k do
17910: LD_ADDR_VAR 0 1
17914: PUSH
17915: DOUBLE
17916: LD_INT 1
17918: DEC
17919: ST_TO_ADDR
17920: LD_VAR 0 2
17924: PUSH
17925: FOR_TO
17926: IFFALSE 18025
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17928: LD_VAR 0 3
17932: PUSH
17933: LD_VAR 0 1
17937: ARRAY
17938: PPUSH
17939: LD_VAR 0 1
17943: PUSH
17944: LD_INT 4
17946: MOD
17947: PUSH
17948: LD_INT 1
17950: PLUS
17951: PPUSH
17952: CALL_OW 259
17956: PUSH
17957: LD_INT 10
17959: LESS
17960: IFFALSE 18023
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17962: LD_VAR 0 3
17966: PUSH
17967: LD_VAR 0 1
17971: ARRAY
17972: PPUSH
17973: LD_VAR 0 1
17977: PUSH
17978: LD_INT 4
17980: MOD
17981: PUSH
17982: LD_INT 1
17984: PLUS
17985: PPUSH
17986: LD_VAR 0 3
17990: PUSH
17991: LD_VAR 0 1
17995: ARRAY
17996: PPUSH
17997: LD_VAR 0 1
18001: PUSH
18002: LD_INT 4
18004: MOD
18005: PUSH
18006: LD_INT 1
18008: PLUS
18009: PPUSH
18010: CALL_OW 259
18014: PUSH
18015: LD_INT 1
18017: PLUS
18018: PPUSH
18019: CALL_OW 237
18023: GO 17925
18025: POP
18026: POP
// end ;
18027: PPOPN 3
18029: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18030: LD_EXP 47
18034: PUSH
18035: LD_EXP 55
18039: AND
18040: IFFALSE 18060
18042: GO 18044
18044: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18045: LD_INT 4
18047: PPUSH
18048: LD_OWVAR 2
18052: PPUSH
18053: LD_INT 0
18055: PPUSH
18056: CALL_OW 324
18060: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18061: LD_EXP 47
18065: PUSH
18066: LD_EXP 84
18070: AND
18071: IFFALSE 18091
18073: GO 18075
18075: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18076: LD_INT 19
18078: PPUSH
18079: LD_OWVAR 2
18083: PPUSH
18084: LD_INT 0
18086: PPUSH
18087: CALL_OW 324
18091: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18092: LD_EXP 47
18096: PUSH
18097: LD_EXP 56
18101: AND
18102: IFFALSE 18204
18104: GO 18106
18106: DISABLE
18107: LD_INT 0
18109: PPUSH
18110: PPUSH
// begin enable ;
18111: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18112: LD_ADDR_VAR 0 2
18116: PUSH
18117: LD_INT 22
18119: PUSH
18120: LD_OWVAR 2
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: PUSH
18129: LD_INT 2
18131: PUSH
18132: LD_INT 34
18134: PUSH
18135: LD_INT 11
18137: PUSH
18138: EMPTY
18139: LIST
18140: LIST
18141: PUSH
18142: LD_INT 34
18144: PUSH
18145: LD_INT 30
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: PUSH
18152: EMPTY
18153: LIST
18154: LIST
18155: LIST
18156: PUSH
18157: EMPTY
18158: LIST
18159: LIST
18160: PPUSH
18161: CALL_OW 69
18165: ST_TO_ADDR
// if not tmp then
18166: LD_VAR 0 2
18170: NOT
18171: IFFALSE 18175
// exit ;
18173: GO 18204
// for i in tmp do
18175: LD_ADDR_VAR 0 1
18179: PUSH
18180: LD_VAR 0 2
18184: PUSH
18185: FOR_IN
18186: IFFALSE 18202
// begin SetLives ( i , 0 ) ;
18188: LD_VAR 0 1
18192: PPUSH
18193: LD_INT 0
18195: PPUSH
18196: CALL_OW 234
// end ;
18200: GO 18185
18202: POP
18203: POP
// end ;
18204: PPOPN 2
18206: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18207: LD_EXP 47
18211: PUSH
18212: LD_EXP 57
18216: AND
18217: IFFALSE 18237
18219: GO 18221
18221: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18222: LD_INT 32
18224: PPUSH
18225: LD_OWVAR 2
18229: PPUSH
18230: LD_INT 0
18232: PPUSH
18233: CALL_OW 324
18237: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18238: LD_EXP 47
18242: PUSH
18243: LD_EXP 58
18247: AND
18248: IFFALSE 18429
18250: GO 18252
18252: DISABLE
18253: LD_INT 0
18255: PPUSH
18256: PPUSH
18257: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18258: LD_ADDR_VAR 0 2
18262: PUSH
18263: LD_INT 22
18265: PUSH
18266: LD_OWVAR 2
18270: PUSH
18271: EMPTY
18272: LIST
18273: LIST
18274: PUSH
18275: LD_INT 33
18277: PUSH
18278: LD_INT 3
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: PUSH
18285: EMPTY
18286: LIST
18287: LIST
18288: PPUSH
18289: CALL_OW 69
18293: ST_TO_ADDR
// if not tmp then
18294: LD_VAR 0 2
18298: NOT
18299: IFFALSE 18303
// exit ;
18301: GO 18429
// side := 0 ;
18303: LD_ADDR_VAR 0 3
18307: PUSH
18308: LD_INT 0
18310: ST_TO_ADDR
// for i := 1 to 8 do
18311: LD_ADDR_VAR 0 1
18315: PUSH
18316: DOUBLE
18317: LD_INT 1
18319: DEC
18320: ST_TO_ADDR
18321: LD_INT 8
18323: PUSH
18324: FOR_TO
18325: IFFALSE 18373
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18327: LD_OWVAR 2
18331: PUSH
18332: LD_VAR 0 1
18336: NONEQUAL
18337: PUSH
18338: LD_OWVAR 2
18342: PPUSH
18343: LD_VAR 0 1
18347: PPUSH
18348: CALL_OW 81
18352: PUSH
18353: LD_INT 2
18355: EQUAL
18356: AND
18357: IFFALSE 18371
// begin side := i ;
18359: LD_ADDR_VAR 0 3
18363: PUSH
18364: LD_VAR 0 1
18368: ST_TO_ADDR
// break ;
18369: GO 18373
// end ;
18371: GO 18324
18373: POP
18374: POP
// if not side then
18375: LD_VAR 0 3
18379: NOT
18380: IFFALSE 18384
// exit ;
18382: GO 18429
// for i := 1 to tmp do
18384: LD_ADDR_VAR 0 1
18388: PUSH
18389: DOUBLE
18390: LD_INT 1
18392: DEC
18393: ST_TO_ADDR
18394: LD_VAR 0 2
18398: PUSH
18399: FOR_TO
18400: IFFALSE 18427
// if Prob ( 60 ) then
18402: LD_INT 60
18404: PPUSH
18405: CALL_OW 13
18409: IFFALSE 18425
// SetSide ( i , side ) ;
18411: LD_VAR 0 1
18415: PPUSH
18416: LD_VAR 0 3
18420: PPUSH
18421: CALL_OW 235
18425: GO 18399
18427: POP
18428: POP
// end ;
18429: PPOPN 3
18431: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18432: LD_EXP 47
18436: PUSH
18437: LD_EXP 60
18441: AND
18442: IFFALSE 18561
18444: GO 18446
18446: DISABLE
18447: LD_INT 0
18449: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18450: LD_ADDR_VAR 0 1
18454: PUSH
18455: LD_INT 22
18457: PUSH
18458: LD_OWVAR 2
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: PUSH
18467: LD_INT 21
18469: PUSH
18470: LD_INT 1
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: PUSH
18477: LD_INT 3
18479: PUSH
18480: LD_INT 23
18482: PUSH
18483: LD_INT 0
18485: PUSH
18486: EMPTY
18487: LIST
18488: LIST
18489: PUSH
18490: EMPTY
18491: LIST
18492: LIST
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: LIST
18498: PPUSH
18499: CALL_OW 69
18503: PUSH
18504: FOR_IN
18505: IFFALSE 18559
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18507: LD_VAR 0 1
18511: PPUSH
18512: CALL_OW 257
18516: PUSH
18517: LD_INT 1
18519: PUSH
18520: LD_INT 2
18522: PUSH
18523: LD_INT 3
18525: PUSH
18526: LD_INT 4
18528: PUSH
18529: EMPTY
18530: LIST
18531: LIST
18532: LIST
18533: LIST
18534: IN
18535: IFFALSE 18557
// SetClass ( un , rand ( 1 , 4 ) ) ;
18537: LD_VAR 0 1
18541: PPUSH
18542: LD_INT 1
18544: PPUSH
18545: LD_INT 4
18547: PPUSH
18548: CALL_OW 12
18552: PPUSH
18553: CALL_OW 336
18557: GO 18504
18559: POP
18560: POP
// end ;
18561: PPOPN 1
18563: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18564: LD_EXP 47
18568: PUSH
18569: LD_EXP 59
18573: AND
18574: IFFALSE 18653
18576: GO 18578
18578: DISABLE
18579: LD_INT 0
18581: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18582: LD_ADDR_VAR 0 1
18586: PUSH
18587: LD_INT 22
18589: PUSH
18590: LD_OWVAR 2
18594: PUSH
18595: EMPTY
18596: LIST
18597: LIST
18598: PUSH
18599: LD_INT 21
18601: PUSH
18602: LD_INT 3
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: PUSH
18609: EMPTY
18610: LIST
18611: LIST
18612: PPUSH
18613: CALL_OW 69
18617: ST_TO_ADDR
// if not tmp then
18618: LD_VAR 0 1
18622: NOT
18623: IFFALSE 18627
// exit ;
18625: GO 18653
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18627: LD_VAR 0 1
18631: PUSH
18632: LD_INT 1
18634: PPUSH
18635: LD_VAR 0 1
18639: PPUSH
18640: CALL_OW 12
18644: ARRAY
18645: PPUSH
18646: LD_INT 100
18648: PPUSH
18649: CALL_OW 234
// end ;
18653: PPOPN 1
18655: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18656: LD_EXP 47
18660: PUSH
18661: LD_EXP 61
18665: AND
18666: IFFALSE 18764
18668: GO 18670
18670: DISABLE
18671: LD_INT 0
18673: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18674: LD_ADDR_VAR 0 1
18678: PUSH
18679: LD_INT 22
18681: PUSH
18682: LD_OWVAR 2
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: PUSH
18691: LD_INT 21
18693: PUSH
18694: LD_INT 1
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: PUSH
18701: EMPTY
18702: LIST
18703: LIST
18704: PPUSH
18705: CALL_OW 69
18709: ST_TO_ADDR
// if not tmp then
18710: LD_VAR 0 1
18714: NOT
18715: IFFALSE 18719
// exit ;
18717: GO 18764
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18719: LD_VAR 0 1
18723: PUSH
18724: LD_INT 1
18726: PPUSH
18727: LD_VAR 0 1
18731: PPUSH
18732: CALL_OW 12
18736: ARRAY
18737: PPUSH
18738: LD_INT 1
18740: PPUSH
18741: LD_INT 4
18743: PPUSH
18744: CALL_OW 12
18748: PPUSH
18749: LD_INT 3000
18751: PPUSH
18752: LD_INT 9000
18754: PPUSH
18755: CALL_OW 12
18759: PPUSH
18760: CALL_OW 492
// end ;
18764: PPOPN 1
18766: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18767: LD_EXP 47
18771: PUSH
18772: LD_EXP 62
18776: AND
18777: IFFALSE 18797
18779: GO 18781
18781: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18782: LD_INT 1
18784: PPUSH
18785: LD_OWVAR 2
18789: PPUSH
18790: LD_INT 0
18792: PPUSH
18793: CALL_OW 324
18797: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18798: LD_EXP 47
18802: PUSH
18803: LD_EXP 63
18807: AND
18808: IFFALSE 18891
18810: GO 18812
18812: DISABLE
18813: LD_INT 0
18815: PPUSH
18816: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18817: LD_ADDR_VAR 0 2
18821: PUSH
18822: LD_INT 22
18824: PUSH
18825: LD_OWVAR 2
18829: PUSH
18830: EMPTY
18831: LIST
18832: LIST
18833: PUSH
18834: LD_INT 21
18836: PUSH
18837: LD_INT 3
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: PPUSH
18848: CALL_OW 69
18852: ST_TO_ADDR
// if not tmp then
18853: LD_VAR 0 2
18857: NOT
18858: IFFALSE 18862
// exit ;
18860: GO 18891
// for i in tmp do
18862: LD_ADDR_VAR 0 1
18866: PUSH
18867: LD_VAR 0 2
18871: PUSH
18872: FOR_IN
18873: IFFALSE 18889
// SetBLevel ( i , 10 ) ;
18875: LD_VAR 0 1
18879: PPUSH
18880: LD_INT 10
18882: PPUSH
18883: CALL_OW 241
18887: GO 18872
18889: POP
18890: POP
// end ;
18891: PPOPN 2
18893: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18894: LD_EXP 47
18898: PUSH
18899: LD_EXP 64
18903: AND
18904: IFFALSE 19015
18906: GO 18908
18908: DISABLE
18909: LD_INT 0
18911: PPUSH
18912: PPUSH
18913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18914: LD_ADDR_VAR 0 3
18918: PUSH
18919: LD_INT 22
18921: PUSH
18922: LD_OWVAR 2
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: PUSH
18931: LD_INT 25
18933: PUSH
18934: LD_INT 1
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: PPUSH
18945: CALL_OW 69
18949: ST_TO_ADDR
// if not tmp then
18950: LD_VAR 0 3
18954: NOT
18955: IFFALSE 18959
// exit ;
18957: GO 19015
// un := tmp [ rand ( 1 , tmp ) ] ;
18959: LD_ADDR_VAR 0 2
18963: PUSH
18964: LD_VAR 0 3
18968: PUSH
18969: LD_INT 1
18971: PPUSH
18972: LD_VAR 0 3
18976: PPUSH
18977: CALL_OW 12
18981: ARRAY
18982: ST_TO_ADDR
// if Crawls ( un ) then
18983: LD_VAR 0 2
18987: PPUSH
18988: CALL_OW 318
18992: IFFALSE 19003
// ComWalk ( un ) ;
18994: LD_VAR 0 2
18998: PPUSH
18999: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19003: LD_VAR 0 2
19007: PPUSH
19008: LD_INT 5
19010: PPUSH
19011: CALL_OW 336
// end ;
19015: PPOPN 3
19017: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
19018: LD_EXP 47
19022: PUSH
19023: LD_EXP 65
19027: AND
19028: PUSH
19029: LD_OWVAR 67
19033: PUSH
19034: LD_INT 3
19036: LESS
19037: AND
19038: IFFALSE 19057
19040: GO 19042
19042: DISABLE
// Difficulty := Difficulty + 1 ;
19043: LD_ADDR_OWVAR 67
19047: PUSH
19048: LD_OWVAR 67
19052: PUSH
19053: LD_INT 1
19055: PLUS
19056: ST_TO_ADDR
19057: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19058: LD_EXP 47
19062: PUSH
19063: LD_EXP 66
19067: AND
19068: IFFALSE 19171
19070: GO 19072
19072: DISABLE
19073: LD_INT 0
19075: PPUSH
// begin for i := 1 to 5 do
19076: LD_ADDR_VAR 0 1
19080: PUSH
19081: DOUBLE
19082: LD_INT 1
19084: DEC
19085: ST_TO_ADDR
19086: LD_INT 5
19088: PUSH
19089: FOR_TO
19090: IFFALSE 19169
// begin uc_nation := nation_nature ;
19092: LD_ADDR_OWVAR 21
19096: PUSH
19097: LD_INT 0
19099: ST_TO_ADDR
// uc_side := 0 ;
19100: LD_ADDR_OWVAR 20
19104: PUSH
19105: LD_INT 0
19107: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19108: LD_ADDR_OWVAR 29
19112: PUSH
19113: LD_INT 12
19115: PUSH
19116: LD_INT 12
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: ST_TO_ADDR
// hc_agressivity := 20 ;
19123: LD_ADDR_OWVAR 35
19127: PUSH
19128: LD_INT 20
19130: ST_TO_ADDR
// hc_class := class_tiger ;
19131: LD_ADDR_OWVAR 28
19135: PUSH
19136: LD_INT 14
19138: ST_TO_ADDR
// hc_gallery :=  ;
19139: LD_ADDR_OWVAR 33
19143: PUSH
19144: LD_STRING 
19146: ST_TO_ADDR
// hc_name :=  ;
19147: LD_ADDR_OWVAR 26
19151: PUSH
19152: LD_STRING 
19154: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19155: CALL_OW 44
19159: PPUSH
19160: LD_INT 0
19162: PPUSH
19163: CALL_OW 51
// end ;
19167: GO 19089
19169: POP
19170: POP
// end ;
19171: PPOPN 1
19173: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19174: LD_EXP 47
19178: PUSH
19179: LD_EXP 67
19183: AND
19184: IFFALSE 19193
19186: GO 19188
19188: DISABLE
// StreamSibBomb ;
19189: CALL 19194 0 0
19193: END
// export function StreamSibBomb ; var i , x , y ; begin
19194: LD_INT 0
19196: PPUSH
19197: PPUSH
19198: PPUSH
19199: PPUSH
// result := false ;
19200: LD_ADDR_VAR 0 1
19204: PUSH
19205: LD_INT 0
19207: ST_TO_ADDR
// for i := 1 to 16 do
19208: LD_ADDR_VAR 0 2
19212: PUSH
19213: DOUBLE
19214: LD_INT 1
19216: DEC
19217: ST_TO_ADDR
19218: LD_INT 16
19220: PUSH
19221: FOR_TO
19222: IFFALSE 19421
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19224: LD_ADDR_VAR 0 3
19228: PUSH
19229: LD_INT 10
19231: PUSH
19232: LD_INT 20
19234: PUSH
19235: LD_INT 30
19237: PUSH
19238: LD_INT 40
19240: PUSH
19241: LD_INT 50
19243: PUSH
19244: LD_INT 60
19246: PUSH
19247: LD_INT 70
19249: PUSH
19250: LD_INT 80
19252: PUSH
19253: LD_INT 90
19255: PUSH
19256: LD_INT 100
19258: PUSH
19259: LD_INT 110
19261: PUSH
19262: LD_INT 120
19264: PUSH
19265: LD_INT 130
19267: PUSH
19268: LD_INT 140
19270: PUSH
19271: LD_INT 150
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: LIST
19289: LIST
19290: PUSH
19291: LD_INT 1
19293: PPUSH
19294: LD_INT 15
19296: PPUSH
19297: CALL_OW 12
19301: ARRAY
19302: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19303: LD_ADDR_VAR 0 4
19307: PUSH
19308: LD_INT 10
19310: PUSH
19311: LD_INT 20
19313: PUSH
19314: LD_INT 30
19316: PUSH
19317: LD_INT 40
19319: PUSH
19320: LD_INT 50
19322: PUSH
19323: LD_INT 60
19325: PUSH
19326: LD_INT 70
19328: PUSH
19329: LD_INT 80
19331: PUSH
19332: LD_INT 90
19334: PUSH
19335: LD_INT 100
19337: PUSH
19338: LD_INT 110
19340: PUSH
19341: LD_INT 120
19343: PUSH
19344: LD_INT 130
19346: PUSH
19347: LD_INT 140
19349: PUSH
19350: LD_INT 150
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: LIST
19362: LIST
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: PUSH
19370: LD_INT 1
19372: PPUSH
19373: LD_INT 15
19375: PPUSH
19376: CALL_OW 12
19380: ARRAY
19381: ST_TO_ADDR
// if ValidHex ( x , y ) then
19382: LD_VAR 0 3
19386: PPUSH
19387: LD_VAR 0 4
19391: PPUSH
19392: CALL_OW 488
19396: IFFALSE 19419
// begin result := [ x , y ] ;
19398: LD_ADDR_VAR 0 1
19402: PUSH
19403: LD_VAR 0 3
19407: PUSH
19408: LD_VAR 0 4
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: ST_TO_ADDR
// break ;
19417: GO 19421
// end ; end ;
19419: GO 19221
19421: POP
19422: POP
// if result then
19423: LD_VAR 0 1
19427: IFFALSE 19487
// begin ToLua ( playSibBomb() ) ;
19429: LD_STRING playSibBomb()
19431: PPUSH
19432: CALL_OW 559
// wait ( 0 0$14 ) ;
19436: LD_INT 490
19438: PPUSH
19439: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19443: LD_VAR 0 1
19447: PUSH
19448: LD_INT 1
19450: ARRAY
19451: PPUSH
19452: LD_VAR 0 1
19456: PUSH
19457: LD_INT 2
19459: ARRAY
19460: PPUSH
19461: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19465: LD_VAR 0 1
19469: PUSH
19470: LD_INT 1
19472: ARRAY
19473: PPUSH
19474: LD_VAR 0 1
19478: PUSH
19479: LD_INT 2
19481: ARRAY
19482: PPUSH
19483: CALL_OW 429
// end ; end ;
19487: LD_VAR 0 1
19491: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19492: LD_EXP 47
19496: PUSH
19497: LD_EXP 69
19501: AND
19502: IFFALSE 19514
19504: GO 19506
19506: DISABLE
// YouLost (  ) ;
19507: LD_STRING 
19509: PPUSH
19510: CALL_OW 104
19514: END
// every 0 0$1 trigger StreamModeActive and sFog do
19515: LD_EXP 47
19519: PUSH
19520: LD_EXP 68
19524: AND
19525: IFFALSE 19539
19527: GO 19529
19529: DISABLE
// FogOff ( your_side ) ;
19530: LD_OWVAR 2
19534: PPUSH
19535: CALL_OW 344
19539: END
// every 0 0$1 trigger StreamModeActive and sSun do
19540: LD_EXP 47
19544: PUSH
19545: LD_EXP 70
19549: AND
19550: IFFALSE 19578
19552: GO 19554
19554: DISABLE
// begin solar_recharge_percent := 0 ;
19555: LD_ADDR_OWVAR 79
19559: PUSH
19560: LD_INT 0
19562: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19563: LD_INT 10500
19565: PPUSH
19566: CALL_OW 67
// solar_recharge_percent := 100 ;
19570: LD_ADDR_OWVAR 79
19574: PUSH
19575: LD_INT 100
19577: ST_TO_ADDR
// end ;
19578: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19579: LD_EXP 47
19583: PUSH
19584: LD_EXP 71
19588: AND
19589: IFFALSE 19828
19591: GO 19593
19593: DISABLE
19594: LD_INT 0
19596: PPUSH
19597: PPUSH
19598: PPUSH
// begin tmp := [ ] ;
19599: LD_ADDR_VAR 0 3
19603: PUSH
19604: EMPTY
19605: ST_TO_ADDR
// for i := 1 to 6 do
19606: LD_ADDR_VAR 0 1
19610: PUSH
19611: DOUBLE
19612: LD_INT 1
19614: DEC
19615: ST_TO_ADDR
19616: LD_INT 6
19618: PUSH
19619: FOR_TO
19620: IFFALSE 19725
// begin uc_nation := nation_nature ;
19622: LD_ADDR_OWVAR 21
19626: PUSH
19627: LD_INT 0
19629: ST_TO_ADDR
// uc_side := 0 ;
19630: LD_ADDR_OWVAR 20
19634: PUSH
19635: LD_INT 0
19637: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19638: LD_ADDR_OWVAR 29
19642: PUSH
19643: LD_INT 12
19645: PUSH
19646: LD_INT 12
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: ST_TO_ADDR
// hc_agressivity := 20 ;
19653: LD_ADDR_OWVAR 35
19657: PUSH
19658: LD_INT 20
19660: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19661: LD_ADDR_OWVAR 28
19665: PUSH
19666: LD_INT 17
19668: ST_TO_ADDR
// hc_gallery :=  ;
19669: LD_ADDR_OWVAR 33
19673: PUSH
19674: LD_STRING 
19676: ST_TO_ADDR
// hc_name :=  ;
19677: LD_ADDR_OWVAR 26
19681: PUSH
19682: LD_STRING 
19684: ST_TO_ADDR
// un := CreateHuman ;
19685: LD_ADDR_VAR 0 2
19689: PUSH
19690: CALL_OW 44
19694: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19695: LD_VAR 0 2
19699: PPUSH
19700: LD_INT 1
19702: PPUSH
19703: CALL_OW 51
// tmp := tmp ^ un ;
19707: LD_ADDR_VAR 0 3
19711: PUSH
19712: LD_VAR 0 3
19716: PUSH
19717: LD_VAR 0 2
19721: ADD
19722: ST_TO_ADDR
// end ;
19723: GO 19619
19725: POP
19726: POP
// repeat wait ( 0 0$1 ) ;
19727: LD_INT 35
19729: PPUSH
19730: CALL_OW 67
// for un in tmp do
19734: LD_ADDR_VAR 0 2
19738: PUSH
19739: LD_VAR 0 3
19743: PUSH
19744: FOR_IN
19745: IFFALSE 19819
// begin if IsDead ( un ) then
19747: LD_VAR 0 2
19751: PPUSH
19752: CALL_OW 301
19756: IFFALSE 19776
// begin tmp := tmp diff un ;
19758: LD_ADDR_VAR 0 3
19762: PUSH
19763: LD_VAR 0 3
19767: PUSH
19768: LD_VAR 0 2
19772: DIFF
19773: ST_TO_ADDR
// continue ;
19774: GO 19744
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19776: LD_VAR 0 2
19780: PPUSH
19781: LD_INT 3
19783: PUSH
19784: LD_INT 22
19786: PUSH
19787: LD_INT 0
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: PUSH
19794: EMPTY
19795: LIST
19796: LIST
19797: PPUSH
19798: CALL_OW 69
19802: PPUSH
19803: LD_VAR 0 2
19807: PPUSH
19808: CALL_OW 74
19812: PPUSH
19813: CALL_OW 115
// end ;
19817: GO 19744
19819: POP
19820: POP
// until not tmp ;
19821: LD_VAR 0 3
19825: NOT
19826: IFFALSE 19727
// end ;
19828: PPOPN 3
19830: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19831: LD_EXP 47
19835: PUSH
19836: LD_EXP 72
19840: AND
19841: IFFALSE 19895
19843: GO 19845
19845: DISABLE
// begin ToLua ( displayTroll(); ) ;
19846: LD_STRING displayTroll();
19848: PPUSH
19849: CALL_OW 559
// wait ( 3 3$00 ) ;
19853: LD_INT 6300
19855: PPUSH
19856: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19860: LD_STRING hideTroll();
19862: PPUSH
19863: CALL_OW 559
// wait ( 1 1$00 ) ;
19867: LD_INT 2100
19869: PPUSH
19870: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19874: LD_STRING displayTroll();
19876: PPUSH
19877: CALL_OW 559
// wait ( 1 1$00 ) ;
19881: LD_INT 2100
19883: PPUSH
19884: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19888: LD_STRING hideTroll();
19890: PPUSH
19891: CALL_OW 559
// end ;
19895: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19896: LD_EXP 47
19900: PUSH
19901: LD_EXP 73
19905: AND
19906: IFFALSE 19969
19908: GO 19910
19910: DISABLE
19911: LD_INT 0
19913: PPUSH
// begin p := 0 ;
19914: LD_ADDR_VAR 0 1
19918: PUSH
19919: LD_INT 0
19921: ST_TO_ADDR
// repeat game_speed := 1 ;
19922: LD_ADDR_OWVAR 65
19926: PUSH
19927: LD_INT 1
19929: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19930: LD_INT 35
19932: PPUSH
19933: CALL_OW 67
// p := p + 1 ;
19937: LD_ADDR_VAR 0 1
19941: PUSH
19942: LD_VAR 0 1
19946: PUSH
19947: LD_INT 1
19949: PLUS
19950: ST_TO_ADDR
// until p >= 60 ;
19951: LD_VAR 0 1
19955: PUSH
19956: LD_INT 60
19958: GREATEREQUAL
19959: IFFALSE 19922
// game_speed := 4 ;
19961: LD_ADDR_OWVAR 65
19965: PUSH
19966: LD_INT 4
19968: ST_TO_ADDR
// end ;
19969: PPOPN 1
19971: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19972: LD_EXP 47
19976: PUSH
19977: LD_EXP 74
19981: AND
19982: IFFALSE 20128
19984: GO 19986
19986: DISABLE
19987: LD_INT 0
19989: PPUSH
19990: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19991: LD_ADDR_VAR 0 1
19995: PUSH
19996: LD_INT 22
19998: PUSH
19999: LD_OWVAR 2
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: PUSH
20008: LD_INT 2
20010: PUSH
20011: LD_INT 30
20013: PUSH
20014: LD_INT 0
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: PUSH
20021: LD_INT 30
20023: PUSH
20024: LD_INT 1
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: PUSH
20031: EMPTY
20032: LIST
20033: LIST
20034: LIST
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: PPUSH
20040: CALL_OW 69
20044: ST_TO_ADDR
// if not depot then
20045: LD_VAR 0 1
20049: NOT
20050: IFFALSE 20054
// exit ;
20052: GO 20128
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20054: LD_ADDR_VAR 0 2
20058: PUSH
20059: LD_VAR 0 1
20063: PUSH
20064: LD_INT 1
20066: PPUSH
20067: LD_VAR 0 1
20071: PPUSH
20072: CALL_OW 12
20076: ARRAY
20077: PPUSH
20078: CALL_OW 274
20082: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20083: LD_VAR 0 2
20087: PPUSH
20088: LD_INT 1
20090: PPUSH
20091: LD_INT 0
20093: PPUSH
20094: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20098: LD_VAR 0 2
20102: PPUSH
20103: LD_INT 2
20105: PPUSH
20106: LD_INT 0
20108: PPUSH
20109: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20113: LD_VAR 0 2
20117: PPUSH
20118: LD_INT 3
20120: PPUSH
20121: LD_INT 0
20123: PPUSH
20124: CALL_OW 277
// end ;
20128: PPOPN 2
20130: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20131: LD_EXP 47
20135: PUSH
20136: LD_EXP 75
20140: AND
20141: IFFALSE 20238
20143: GO 20145
20145: DISABLE
20146: LD_INT 0
20148: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20149: LD_ADDR_VAR 0 1
20153: PUSH
20154: LD_INT 22
20156: PUSH
20157: LD_OWVAR 2
20161: PUSH
20162: EMPTY
20163: LIST
20164: LIST
20165: PUSH
20166: LD_INT 21
20168: PUSH
20169: LD_INT 1
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: PUSH
20176: LD_INT 3
20178: PUSH
20179: LD_INT 23
20181: PUSH
20182: LD_INT 0
20184: PUSH
20185: EMPTY
20186: LIST
20187: LIST
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: PUSH
20193: EMPTY
20194: LIST
20195: LIST
20196: LIST
20197: PPUSH
20198: CALL_OW 69
20202: ST_TO_ADDR
// if not tmp then
20203: LD_VAR 0 1
20207: NOT
20208: IFFALSE 20212
// exit ;
20210: GO 20238
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20212: LD_VAR 0 1
20216: PUSH
20217: LD_INT 1
20219: PPUSH
20220: LD_VAR 0 1
20224: PPUSH
20225: CALL_OW 12
20229: ARRAY
20230: PPUSH
20231: LD_INT 200
20233: PPUSH
20234: CALL_OW 234
// end ;
20238: PPOPN 1
20240: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20241: LD_EXP 47
20245: PUSH
20246: LD_EXP 76
20250: AND
20251: IFFALSE 20330
20253: GO 20255
20255: DISABLE
20256: LD_INT 0
20258: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20259: LD_ADDR_VAR 0 1
20263: PUSH
20264: LD_INT 22
20266: PUSH
20267: LD_OWVAR 2
20271: PUSH
20272: EMPTY
20273: LIST
20274: LIST
20275: PUSH
20276: LD_INT 21
20278: PUSH
20279: LD_INT 2
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: PPUSH
20290: CALL_OW 69
20294: ST_TO_ADDR
// if not tmp then
20295: LD_VAR 0 1
20299: NOT
20300: IFFALSE 20304
// exit ;
20302: GO 20330
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20304: LD_VAR 0 1
20308: PUSH
20309: LD_INT 1
20311: PPUSH
20312: LD_VAR 0 1
20316: PPUSH
20317: CALL_OW 12
20321: ARRAY
20322: PPUSH
20323: LD_INT 60
20325: PPUSH
20326: CALL_OW 234
// end ;
20330: PPOPN 1
20332: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20333: LD_EXP 47
20337: PUSH
20338: LD_EXP 77
20342: AND
20343: IFFALSE 20442
20345: GO 20347
20347: DISABLE
20348: LD_INT 0
20350: PPUSH
20351: PPUSH
// begin enable ;
20352: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20353: LD_ADDR_VAR 0 1
20357: PUSH
20358: LD_INT 22
20360: PUSH
20361: LD_OWVAR 2
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: PUSH
20370: LD_INT 61
20372: PUSH
20373: EMPTY
20374: LIST
20375: PUSH
20376: LD_INT 33
20378: PUSH
20379: LD_INT 2
20381: PUSH
20382: EMPTY
20383: LIST
20384: LIST
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: LIST
20390: PPUSH
20391: CALL_OW 69
20395: ST_TO_ADDR
// if not tmp then
20396: LD_VAR 0 1
20400: NOT
20401: IFFALSE 20405
// exit ;
20403: GO 20442
// for i in tmp do
20405: LD_ADDR_VAR 0 2
20409: PUSH
20410: LD_VAR 0 1
20414: PUSH
20415: FOR_IN
20416: IFFALSE 20440
// if IsControledBy ( i ) then
20418: LD_VAR 0 2
20422: PPUSH
20423: CALL_OW 312
20427: IFFALSE 20438
// ComUnlink ( i ) ;
20429: LD_VAR 0 2
20433: PPUSH
20434: CALL_OW 136
20438: GO 20415
20440: POP
20441: POP
// end ;
20442: PPOPN 2
20444: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20445: LD_EXP 47
20449: PUSH
20450: LD_EXP 78
20454: AND
20455: IFFALSE 20595
20457: GO 20459
20459: DISABLE
20460: LD_INT 0
20462: PPUSH
20463: PPUSH
// begin ToLua ( displayPowell(); ) ;
20464: LD_STRING displayPowell();
20466: PPUSH
20467: CALL_OW 559
// uc_side := 0 ;
20471: LD_ADDR_OWVAR 20
20475: PUSH
20476: LD_INT 0
20478: ST_TO_ADDR
// uc_nation := 2 ;
20479: LD_ADDR_OWVAR 21
20483: PUSH
20484: LD_INT 2
20486: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20487: LD_ADDR_OWVAR 37
20491: PUSH
20492: LD_INT 14
20494: ST_TO_ADDR
// vc_engine := engine_siberite ;
20495: LD_ADDR_OWVAR 39
20499: PUSH
20500: LD_INT 3
20502: ST_TO_ADDR
// vc_control := control_apeman ;
20503: LD_ADDR_OWVAR 38
20507: PUSH
20508: LD_INT 5
20510: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20511: LD_ADDR_OWVAR 40
20515: PUSH
20516: LD_INT 29
20518: ST_TO_ADDR
// un := CreateVehicle ;
20519: LD_ADDR_VAR 0 2
20523: PUSH
20524: CALL_OW 45
20528: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20529: LD_VAR 0 2
20533: PPUSH
20534: LD_INT 1
20536: PPUSH
20537: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20541: LD_INT 35
20543: PPUSH
20544: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20548: LD_VAR 0 2
20552: PPUSH
20553: LD_INT 22
20555: PUSH
20556: LD_OWVAR 2
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: PPUSH
20565: CALL_OW 69
20569: PPUSH
20570: LD_VAR 0 2
20574: PPUSH
20575: CALL_OW 74
20579: PPUSH
20580: CALL_OW 115
// until IsDead ( un ) ;
20584: LD_VAR 0 2
20588: PPUSH
20589: CALL_OW 301
20593: IFFALSE 20541
// end ;
20595: PPOPN 2
20597: END
// every 0 0$1 trigger StreamModeActive and sStu do
20598: LD_EXP 47
20602: PUSH
20603: LD_EXP 86
20607: AND
20608: IFFALSE 20624
20610: GO 20612
20612: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20613: LD_STRING displayStucuk();
20615: PPUSH
20616: CALL_OW 559
// ResetFog ;
20620: CALL_OW 335
// end ;
20624: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20625: LD_EXP 47
20629: PUSH
20630: LD_EXP 79
20634: AND
20635: IFFALSE 20776
20637: GO 20639
20639: DISABLE
20640: LD_INT 0
20642: PPUSH
20643: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20644: LD_ADDR_VAR 0 2
20648: PUSH
20649: LD_INT 22
20651: PUSH
20652: LD_OWVAR 2
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: PUSH
20661: LD_INT 21
20663: PUSH
20664: LD_INT 1
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: PUSH
20671: EMPTY
20672: LIST
20673: LIST
20674: PPUSH
20675: CALL_OW 69
20679: ST_TO_ADDR
// if not tmp then
20680: LD_VAR 0 2
20684: NOT
20685: IFFALSE 20689
// exit ;
20687: GO 20776
// un := tmp [ rand ( 1 , tmp ) ] ;
20689: LD_ADDR_VAR 0 1
20693: PUSH
20694: LD_VAR 0 2
20698: PUSH
20699: LD_INT 1
20701: PPUSH
20702: LD_VAR 0 2
20706: PPUSH
20707: CALL_OW 12
20711: ARRAY
20712: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20713: LD_VAR 0 1
20717: PPUSH
20718: LD_INT 0
20720: PPUSH
20721: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20725: LD_VAR 0 1
20729: PPUSH
20730: LD_OWVAR 3
20734: PUSH
20735: LD_VAR 0 1
20739: DIFF
20740: PPUSH
20741: LD_VAR 0 1
20745: PPUSH
20746: CALL_OW 74
20750: PPUSH
20751: CALL_OW 115
// wait ( 0 0$20 ) ;
20755: LD_INT 700
20757: PPUSH
20758: CALL_OW 67
// SetSide ( un , your_side ) ;
20762: LD_VAR 0 1
20766: PPUSH
20767: LD_OWVAR 2
20771: PPUSH
20772: CALL_OW 235
// end ;
20776: PPOPN 2
20778: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20779: LD_EXP 47
20783: PUSH
20784: LD_EXP 80
20788: AND
20789: IFFALSE 20895
20791: GO 20793
20793: DISABLE
20794: LD_INT 0
20796: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20797: LD_ADDR_VAR 0 1
20801: PUSH
20802: LD_INT 22
20804: PUSH
20805: LD_OWVAR 2
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: PUSH
20814: LD_INT 2
20816: PUSH
20817: LD_INT 30
20819: PUSH
20820: LD_INT 0
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: PUSH
20827: LD_INT 30
20829: PUSH
20830: LD_INT 1
20832: PUSH
20833: EMPTY
20834: LIST
20835: LIST
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: LIST
20841: PUSH
20842: EMPTY
20843: LIST
20844: LIST
20845: PPUSH
20846: CALL_OW 69
20850: ST_TO_ADDR
// if not depot then
20851: LD_VAR 0 1
20855: NOT
20856: IFFALSE 20860
// exit ;
20858: GO 20895
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20860: LD_VAR 0 1
20864: PUSH
20865: LD_INT 1
20867: ARRAY
20868: PPUSH
20869: CALL_OW 250
20873: PPUSH
20874: LD_VAR 0 1
20878: PUSH
20879: LD_INT 1
20881: ARRAY
20882: PPUSH
20883: CALL_OW 251
20887: PPUSH
20888: LD_INT 70
20890: PPUSH
20891: CALL_OW 495
// end ;
20895: PPOPN 1
20897: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20898: LD_EXP 47
20902: PUSH
20903: LD_EXP 81
20907: AND
20908: IFFALSE 21119
20910: GO 20912
20912: DISABLE
20913: LD_INT 0
20915: PPUSH
20916: PPUSH
20917: PPUSH
20918: PPUSH
20919: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20920: LD_ADDR_VAR 0 5
20924: PUSH
20925: LD_INT 22
20927: PUSH
20928: LD_OWVAR 2
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: PUSH
20937: LD_INT 21
20939: PUSH
20940: LD_INT 1
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PPUSH
20951: CALL_OW 69
20955: ST_TO_ADDR
// if not tmp then
20956: LD_VAR 0 5
20960: NOT
20961: IFFALSE 20965
// exit ;
20963: GO 21119
// for i in tmp do
20965: LD_ADDR_VAR 0 1
20969: PUSH
20970: LD_VAR 0 5
20974: PUSH
20975: FOR_IN
20976: IFFALSE 21117
// begin d := rand ( 0 , 5 ) ;
20978: LD_ADDR_VAR 0 4
20982: PUSH
20983: LD_INT 0
20985: PPUSH
20986: LD_INT 5
20988: PPUSH
20989: CALL_OW 12
20993: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20994: LD_ADDR_VAR 0 2
20998: PUSH
20999: LD_VAR 0 1
21003: PPUSH
21004: CALL_OW 250
21008: PPUSH
21009: LD_VAR 0 4
21013: PPUSH
21014: LD_INT 3
21016: PPUSH
21017: LD_INT 12
21019: PPUSH
21020: CALL_OW 12
21024: PPUSH
21025: CALL_OW 272
21029: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21030: LD_ADDR_VAR 0 3
21034: PUSH
21035: LD_VAR 0 1
21039: PPUSH
21040: CALL_OW 251
21044: PPUSH
21045: LD_VAR 0 4
21049: PPUSH
21050: LD_INT 3
21052: PPUSH
21053: LD_INT 12
21055: PPUSH
21056: CALL_OW 12
21060: PPUSH
21061: CALL_OW 273
21065: ST_TO_ADDR
// if ValidHex ( x , y ) then
21066: LD_VAR 0 2
21070: PPUSH
21071: LD_VAR 0 3
21075: PPUSH
21076: CALL_OW 488
21080: IFFALSE 21115
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21082: LD_VAR 0 1
21086: PPUSH
21087: LD_VAR 0 2
21091: PPUSH
21092: LD_VAR 0 3
21096: PPUSH
21097: LD_INT 3
21099: PPUSH
21100: LD_INT 6
21102: PPUSH
21103: CALL_OW 12
21107: PPUSH
21108: LD_INT 1
21110: PPUSH
21111: CALL_OW 483
// end ;
21115: GO 20975
21117: POP
21118: POP
// end ;
21119: PPOPN 5
21121: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21122: LD_EXP 47
21126: PUSH
21127: LD_EXP 82
21131: AND
21132: IFFALSE 21226
21134: GO 21136
21136: DISABLE
21137: LD_INT 0
21139: PPUSH
21140: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21141: LD_ADDR_VAR 0 2
21145: PUSH
21146: LD_INT 22
21148: PUSH
21149: LD_OWVAR 2
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: PUSH
21158: LD_INT 32
21160: PUSH
21161: LD_INT 1
21163: PUSH
21164: EMPTY
21165: LIST
21166: LIST
21167: PUSH
21168: LD_INT 21
21170: PUSH
21171: LD_INT 2
21173: PUSH
21174: EMPTY
21175: LIST
21176: LIST
21177: PUSH
21178: EMPTY
21179: LIST
21180: LIST
21181: LIST
21182: PPUSH
21183: CALL_OW 69
21187: ST_TO_ADDR
// if not tmp then
21188: LD_VAR 0 2
21192: NOT
21193: IFFALSE 21197
// exit ;
21195: GO 21226
// for i in tmp do
21197: LD_ADDR_VAR 0 1
21201: PUSH
21202: LD_VAR 0 2
21206: PUSH
21207: FOR_IN
21208: IFFALSE 21224
// SetFuel ( i , 0 ) ;
21210: LD_VAR 0 1
21214: PPUSH
21215: LD_INT 0
21217: PPUSH
21218: CALL_OW 240
21222: GO 21207
21224: POP
21225: POP
// end ;
21226: PPOPN 2
21228: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21229: LD_EXP 47
21233: PUSH
21234: LD_EXP 83
21238: AND
21239: IFFALSE 21305
21241: GO 21243
21243: DISABLE
21244: LD_INT 0
21246: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21247: LD_ADDR_VAR 0 1
21251: PUSH
21252: LD_INT 22
21254: PUSH
21255: LD_OWVAR 2
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: PUSH
21264: LD_INT 30
21266: PUSH
21267: LD_INT 29
21269: PUSH
21270: EMPTY
21271: LIST
21272: LIST
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: PPUSH
21278: CALL_OW 69
21282: ST_TO_ADDR
// if not tmp then
21283: LD_VAR 0 1
21287: NOT
21288: IFFALSE 21292
// exit ;
21290: GO 21305
// DestroyUnit ( tmp [ 1 ] ) ;
21292: LD_VAR 0 1
21296: PUSH
21297: LD_INT 1
21299: ARRAY
21300: PPUSH
21301: CALL_OW 65
// end ;
21305: PPOPN 1
21307: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21308: LD_EXP 47
21312: PUSH
21313: LD_EXP 85
21317: AND
21318: IFFALSE 21447
21320: GO 21322
21322: DISABLE
21323: LD_INT 0
21325: PPUSH
// begin uc_side := 0 ;
21326: LD_ADDR_OWVAR 20
21330: PUSH
21331: LD_INT 0
21333: ST_TO_ADDR
// uc_nation := nation_arabian ;
21334: LD_ADDR_OWVAR 21
21338: PUSH
21339: LD_INT 2
21341: ST_TO_ADDR
// hc_gallery :=  ;
21342: LD_ADDR_OWVAR 33
21346: PUSH
21347: LD_STRING 
21349: ST_TO_ADDR
// hc_name :=  ;
21350: LD_ADDR_OWVAR 26
21354: PUSH
21355: LD_STRING 
21357: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21358: LD_INT 1
21360: PPUSH
21361: LD_INT 11
21363: PPUSH
21364: LD_INT 10
21366: PPUSH
21367: CALL_OW 380
// un := CreateHuman ;
21371: LD_ADDR_VAR 0 1
21375: PUSH
21376: CALL_OW 44
21380: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21381: LD_VAR 0 1
21385: PPUSH
21386: LD_INT 1
21388: PPUSH
21389: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21393: LD_INT 35
21395: PPUSH
21396: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21400: LD_VAR 0 1
21404: PPUSH
21405: LD_INT 22
21407: PUSH
21408: LD_OWVAR 2
21412: PUSH
21413: EMPTY
21414: LIST
21415: LIST
21416: PPUSH
21417: CALL_OW 69
21421: PPUSH
21422: LD_VAR 0 1
21426: PPUSH
21427: CALL_OW 74
21431: PPUSH
21432: CALL_OW 115
// until IsDead ( un ) ;
21436: LD_VAR 0 1
21440: PPUSH
21441: CALL_OW 301
21445: IFFALSE 21393
// end ;
21447: PPOPN 1
21449: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21450: LD_EXP 47
21454: PUSH
21455: LD_EXP 87
21459: AND
21460: IFFALSE 21472
21462: GO 21464
21464: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21465: LD_STRING earthquake(getX(game), 0, 32)
21467: PPUSH
21468: CALL_OW 559
21472: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21473: LD_EXP 47
21477: PUSH
21478: LD_EXP 88
21482: AND
21483: IFFALSE 21574
21485: GO 21487
21487: DISABLE
21488: LD_INT 0
21490: PPUSH
// begin enable ;
21491: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21492: LD_ADDR_VAR 0 1
21496: PUSH
21497: LD_INT 22
21499: PUSH
21500: LD_OWVAR 2
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: PUSH
21509: LD_INT 21
21511: PUSH
21512: LD_INT 2
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: PUSH
21519: LD_INT 33
21521: PUSH
21522: LD_INT 3
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: LIST
21533: PPUSH
21534: CALL_OW 69
21538: ST_TO_ADDR
// if not tmp then
21539: LD_VAR 0 1
21543: NOT
21544: IFFALSE 21548
// exit ;
21546: GO 21574
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21548: LD_VAR 0 1
21552: PUSH
21553: LD_INT 1
21555: PPUSH
21556: LD_VAR 0 1
21560: PPUSH
21561: CALL_OW 12
21565: ARRAY
21566: PPUSH
21567: LD_INT 1
21569: PPUSH
21570: CALL_OW 234
// end ;
21574: PPOPN 1
21576: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21577: LD_EXP 47
21581: PUSH
21582: LD_EXP 89
21586: AND
21587: IFFALSE 21728
21589: GO 21591
21591: DISABLE
21592: LD_INT 0
21594: PPUSH
21595: PPUSH
21596: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21597: LD_ADDR_VAR 0 3
21601: PUSH
21602: LD_INT 22
21604: PUSH
21605: LD_OWVAR 2
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: PUSH
21614: LD_INT 25
21616: PUSH
21617: LD_INT 1
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: PPUSH
21628: CALL_OW 69
21632: ST_TO_ADDR
// if not tmp then
21633: LD_VAR 0 3
21637: NOT
21638: IFFALSE 21642
// exit ;
21640: GO 21728
// un := tmp [ rand ( 1 , tmp ) ] ;
21642: LD_ADDR_VAR 0 2
21646: PUSH
21647: LD_VAR 0 3
21651: PUSH
21652: LD_INT 1
21654: PPUSH
21655: LD_VAR 0 3
21659: PPUSH
21660: CALL_OW 12
21664: ARRAY
21665: ST_TO_ADDR
// if Crawls ( un ) then
21666: LD_VAR 0 2
21670: PPUSH
21671: CALL_OW 318
21675: IFFALSE 21686
// ComWalk ( un ) ;
21677: LD_VAR 0 2
21681: PPUSH
21682: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21686: LD_VAR 0 2
21690: PPUSH
21691: LD_INT 9
21693: PPUSH
21694: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21698: LD_INT 28
21700: PPUSH
21701: LD_OWVAR 2
21705: PPUSH
21706: LD_INT 2
21708: PPUSH
21709: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21713: LD_INT 29
21715: PPUSH
21716: LD_OWVAR 2
21720: PPUSH
21721: LD_INT 2
21723: PPUSH
21724: CALL_OW 322
// end ;
21728: PPOPN 3
21730: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21731: LD_EXP 47
21735: PUSH
21736: LD_EXP 90
21740: AND
21741: IFFALSE 21852
21743: GO 21745
21745: DISABLE
21746: LD_INT 0
21748: PPUSH
21749: PPUSH
21750: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21751: LD_ADDR_VAR 0 3
21755: PUSH
21756: LD_INT 22
21758: PUSH
21759: LD_OWVAR 2
21763: PUSH
21764: EMPTY
21765: LIST
21766: LIST
21767: PUSH
21768: LD_INT 25
21770: PUSH
21771: LD_INT 1
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PPUSH
21782: CALL_OW 69
21786: ST_TO_ADDR
// if not tmp then
21787: LD_VAR 0 3
21791: NOT
21792: IFFALSE 21796
// exit ;
21794: GO 21852
// un := tmp [ rand ( 1 , tmp ) ] ;
21796: LD_ADDR_VAR 0 2
21800: PUSH
21801: LD_VAR 0 3
21805: PUSH
21806: LD_INT 1
21808: PPUSH
21809: LD_VAR 0 3
21813: PPUSH
21814: CALL_OW 12
21818: ARRAY
21819: ST_TO_ADDR
// if Crawls ( un ) then
21820: LD_VAR 0 2
21824: PPUSH
21825: CALL_OW 318
21829: IFFALSE 21840
// ComWalk ( un ) ;
21831: LD_VAR 0 2
21835: PPUSH
21836: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21840: LD_VAR 0 2
21844: PPUSH
21845: LD_INT 8
21847: PPUSH
21848: CALL_OW 336
// end ;
21852: PPOPN 3
21854: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21855: LD_EXP 47
21859: PUSH
21860: LD_EXP 91
21864: AND
21865: IFFALSE 22009
21867: GO 21869
21869: DISABLE
21870: LD_INT 0
21872: PPUSH
21873: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21874: LD_ADDR_VAR 0 2
21878: PUSH
21879: LD_INT 22
21881: PUSH
21882: LD_OWVAR 2
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: PUSH
21891: LD_INT 21
21893: PUSH
21894: LD_INT 2
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: PUSH
21901: LD_INT 2
21903: PUSH
21904: LD_INT 34
21906: PUSH
21907: LD_INT 12
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: PUSH
21914: LD_INT 34
21916: PUSH
21917: LD_INT 51
21919: PUSH
21920: EMPTY
21921: LIST
21922: LIST
21923: PUSH
21924: LD_INT 34
21926: PUSH
21927: LD_INT 32
21929: PUSH
21930: EMPTY
21931: LIST
21932: LIST
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: LIST
21944: PPUSH
21945: CALL_OW 69
21949: ST_TO_ADDR
// if not tmp then
21950: LD_VAR 0 2
21954: NOT
21955: IFFALSE 21959
// exit ;
21957: GO 22009
// for i in tmp do
21959: LD_ADDR_VAR 0 1
21963: PUSH
21964: LD_VAR 0 2
21968: PUSH
21969: FOR_IN
21970: IFFALSE 22007
// if GetCargo ( i , mat_artifact ) = 0 then
21972: LD_VAR 0 1
21976: PPUSH
21977: LD_INT 4
21979: PPUSH
21980: CALL_OW 289
21984: PUSH
21985: LD_INT 0
21987: EQUAL
21988: IFFALSE 22005
// SetCargo ( i , mat_siberit , 100 ) ;
21990: LD_VAR 0 1
21994: PPUSH
21995: LD_INT 3
21997: PPUSH
21998: LD_INT 100
22000: PPUSH
22001: CALL_OW 290
22005: GO 21969
22007: POP
22008: POP
// end ;
22009: PPOPN 2
22011: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22012: LD_EXP 47
22016: PUSH
22017: LD_EXP 92
22021: AND
22022: IFFALSE 22205
22024: GO 22026
22026: DISABLE
22027: LD_INT 0
22029: PPUSH
22030: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22031: LD_ADDR_VAR 0 2
22035: PUSH
22036: LD_INT 22
22038: PUSH
22039: LD_OWVAR 2
22043: PUSH
22044: EMPTY
22045: LIST
22046: LIST
22047: PPUSH
22048: CALL_OW 69
22052: ST_TO_ADDR
// if not tmp then
22053: LD_VAR 0 2
22057: NOT
22058: IFFALSE 22062
// exit ;
22060: GO 22205
// for i := 1 to 2 do
22062: LD_ADDR_VAR 0 1
22066: PUSH
22067: DOUBLE
22068: LD_INT 1
22070: DEC
22071: ST_TO_ADDR
22072: LD_INT 2
22074: PUSH
22075: FOR_TO
22076: IFFALSE 22203
// begin uc_side := your_side ;
22078: LD_ADDR_OWVAR 20
22082: PUSH
22083: LD_OWVAR 2
22087: ST_TO_ADDR
// uc_nation := nation_american ;
22088: LD_ADDR_OWVAR 21
22092: PUSH
22093: LD_INT 1
22095: ST_TO_ADDR
// vc_chassis := us_morphling ;
22096: LD_ADDR_OWVAR 37
22100: PUSH
22101: LD_INT 5
22103: ST_TO_ADDR
// vc_engine := engine_siberite ;
22104: LD_ADDR_OWVAR 39
22108: PUSH
22109: LD_INT 3
22111: ST_TO_ADDR
// vc_control := control_computer ;
22112: LD_ADDR_OWVAR 38
22116: PUSH
22117: LD_INT 3
22119: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22120: LD_ADDR_OWVAR 40
22124: PUSH
22125: LD_INT 10
22127: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22128: LD_VAR 0 2
22132: PUSH
22133: LD_INT 1
22135: ARRAY
22136: PPUSH
22137: CALL_OW 310
22141: NOT
22142: IFFALSE 22189
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22144: CALL_OW 45
22148: PPUSH
22149: LD_VAR 0 2
22153: PUSH
22154: LD_INT 1
22156: ARRAY
22157: PPUSH
22158: CALL_OW 250
22162: PPUSH
22163: LD_VAR 0 2
22167: PUSH
22168: LD_INT 1
22170: ARRAY
22171: PPUSH
22172: CALL_OW 251
22176: PPUSH
22177: LD_INT 12
22179: PPUSH
22180: LD_INT 1
22182: PPUSH
22183: CALL_OW 50
22187: GO 22201
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22189: CALL_OW 45
22193: PPUSH
22194: LD_INT 1
22196: PPUSH
22197: CALL_OW 51
// end ;
22201: GO 22075
22203: POP
22204: POP
// end ;
22205: PPOPN 2
22207: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22208: LD_EXP 47
22212: PUSH
22213: LD_EXP 93
22217: AND
22218: IFFALSE 22440
22220: GO 22222
22222: DISABLE
22223: LD_INT 0
22225: PPUSH
22226: PPUSH
22227: PPUSH
22228: PPUSH
22229: PPUSH
22230: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22231: LD_ADDR_VAR 0 6
22235: PUSH
22236: LD_INT 22
22238: PUSH
22239: LD_OWVAR 2
22243: PUSH
22244: EMPTY
22245: LIST
22246: LIST
22247: PUSH
22248: LD_INT 21
22250: PUSH
22251: LD_INT 1
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: PUSH
22258: LD_INT 3
22260: PUSH
22261: LD_INT 23
22263: PUSH
22264: LD_INT 0
22266: PUSH
22267: EMPTY
22268: LIST
22269: LIST
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: LIST
22279: PPUSH
22280: CALL_OW 69
22284: ST_TO_ADDR
// if not tmp then
22285: LD_VAR 0 6
22289: NOT
22290: IFFALSE 22294
// exit ;
22292: GO 22440
// s1 := rand ( 1 , 4 ) ;
22294: LD_ADDR_VAR 0 2
22298: PUSH
22299: LD_INT 1
22301: PPUSH
22302: LD_INT 4
22304: PPUSH
22305: CALL_OW 12
22309: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22310: LD_ADDR_VAR 0 4
22314: PUSH
22315: LD_VAR 0 6
22319: PUSH
22320: LD_INT 1
22322: ARRAY
22323: PPUSH
22324: LD_VAR 0 2
22328: PPUSH
22329: CALL_OW 259
22333: ST_TO_ADDR
// if s1 = 1 then
22334: LD_VAR 0 2
22338: PUSH
22339: LD_INT 1
22341: EQUAL
22342: IFFALSE 22362
// s2 := rand ( 2 , 4 ) else
22344: LD_ADDR_VAR 0 3
22348: PUSH
22349: LD_INT 2
22351: PPUSH
22352: LD_INT 4
22354: PPUSH
22355: CALL_OW 12
22359: ST_TO_ADDR
22360: GO 22370
// s2 := 1 ;
22362: LD_ADDR_VAR 0 3
22366: PUSH
22367: LD_INT 1
22369: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22370: LD_ADDR_VAR 0 5
22374: PUSH
22375: LD_VAR 0 6
22379: PUSH
22380: LD_INT 1
22382: ARRAY
22383: PPUSH
22384: LD_VAR 0 3
22388: PPUSH
22389: CALL_OW 259
22393: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22394: LD_VAR 0 6
22398: PUSH
22399: LD_INT 1
22401: ARRAY
22402: PPUSH
22403: LD_VAR 0 2
22407: PPUSH
22408: LD_VAR 0 5
22412: PPUSH
22413: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22417: LD_VAR 0 6
22421: PUSH
22422: LD_INT 1
22424: ARRAY
22425: PPUSH
22426: LD_VAR 0 3
22430: PPUSH
22431: LD_VAR 0 4
22435: PPUSH
22436: CALL_OW 237
// end ;
22440: PPOPN 6
22442: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22443: LD_EXP 47
22447: PUSH
22448: LD_EXP 94
22452: AND
22453: IFFALSE 22532
22455: GO 22457
22457: DISABLE
22458: LD_INT 0
22460: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22461: LD_ADDR_VAR 0 1
22465: PUSH
22466: LD_INT 22
22468: PUSH
22469: LD_OWVAR 2
22473: PUSH
22474: EMPTY
22475: LIST
22476: LIST
22477: PUSH
22478: LD_INT 30
22480: PUSH
22481: LD_INT 3
22483: PUSH
22484: EMPTY
22485: LIST
22486: LIST
22487: PUSH
22488: EMPTY
22489: LIST
22490: LIST
22491: PPUSH
22492: CALL_OW 69
22496: ST_TO_ADDR
// if not tmp then
22497: LD_VAR 0 1
22501: NOT
22502: IFFALSE 22506
// exit ;
22504: GO 22532
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22506: LD_VAR 0 1
22510: PUSH
22511: LD_INT 1
22513: PPUSH
22514: LD_VAR 0 1
22518: PPUSH
22519: CALL_OW 12
22523: ARRAY
22524: PPUSH
22525: LD_INT 1
22527: PPUSH
22528: CALL_OW 234
// end ;
22532: PPOPN 1
22534: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22535: LD_EXP 47
22539: PUSH
22540: LD_EXP 95
22544: AND
22545: IFFALSE 22657
22547: GO 22549
22549: DISABLE
22550: LD_INT 0
22552: PPUSH
22553: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22554: LD_ADDR_VAR 0 2
22558: PUSH
22559: LD_INT 22
22561: PUSH
22562: LD_OWVAR 2
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PUSH
22571: LD_INT 2
22573: PUSH
22574: LD_INT 30
22576: PUSH
22577: LD_INT 27
22579: PUSH
22580: EMPTY
22581: LIST
22582: LIST
22583: PUSH
22584: LD_INT 30
22586: PUSH
22587: LD_INT 26
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: PUSH
22594: LD_INT 30
22596: PUSH
22597: LD_INT 28
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: PPUSH
22614: CALL_OW 69
22618: ST_TO_ADDR
// if not tmp then
22619: LD_VAR 0 2
22623: NOT
22624: IFFALSE 22628
// exit ;
22626: GO 22657
// for i in tmp do
22628: LD_ADDR_VAR 0 1
22632: PUSH
22633: LD_VAR 0 2
22637: PUSH
22638: FOR_IN
22639: IFFALSE 22655
// SetLives ( i , 1 ) ;
22641: LD_VAR 0 1
22645: PPUSH
22646: LD_INT 1
22648: PPUSH
22649: CALL_OW 234
22653: GO 22638
22655: POP
22656: POP
// end ;
22657: PPOPN 2
22659: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22660: LD_EXP 47
22664: PUSH
22665: LD_EXP 96
22669: AND
22670: IFFALSE 22944
22672: GO 22674
22674: DISABLE
22675: LD_INT 0
22677: PPUSH
22678: PPUSH
22679: PPUSH
// begin i := rand ( 1 , 7 ) ;
22680: LD_ADDR_VAR 0 1
22684: PUSH
22685: LD_INT 1
22687: PPUSH
22688: LD_INT 7
22690: PPUSH
22691: CALL_OW 12
22695: ST_TO_ADDR
// case i of 1 :
22696: LD_VAR 0 1
22700: PUSH
22701: LD_INT 1
22703: DOUBLE
22704: EQUAL
22705: IFTRUE 22709
22707: GO 22719
22709: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22710: LD_STRING earthquake(getX(game), 0, 32)
22712: PPUSH
22713: CALL_OW 559
22717: GO 22944
22719: LD_INT 2
22721: DOUBLE
22722: EQUAL
22723: IFTRUE 22727
22725: GO 22741
22727: POP
// begin ToLua ( displayStucuk(); ) ;
22728: LD_STRING displayStucuk();
22730: PPUSH
22731: CALL_OW 559
// ResetFog ;
22735: CALL_OW 335
// end ; 3 :
22739: GO 22944
22741: LD_INT 3
22743: DOUBLE
22744: EQUAL
22745: IFTRUE 22749
22747: GO 22853
22749: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22750: LD_ADDR_VAR 0 2
22754: PUSH
22755: LD_INT 22
22757: PUSH
22758: LD_OWVAR 2
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: PUSH
22767: LD_INT 25
22769: PUSH
22770: LD_INT 1
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: PPUSH
22781: CALL_OW 69
22785: ST_TO_ADDR
// if not tmp then
22786: LD_VAR 0 2
22790: NOT
22791: IFFALSE 22795
// exit ;
22793: GO 22944
// un := tmp [ rand ( 1 , tmp ) ] ;
22795: LD_ADDR_VAR 0 3
22799: PUSH
22800: LD_VAR 0 2
22804: PUSH
22805: LD_INT 1
22807: PPUSH
22808: LD_VAR 0 2
22812: PPUSH
22813: CALL_OW 12
22817: ARRAY
22818: ST_TO_ADDR
// if Crawls ( un ) then
22819: LD_VAR 0 3
22823: PPUSH
22824: CALL_OW 318
22828: IFFALSE 22839
// ComWalk ( un ) ;
22830: LD_VAR 0 3
22834: PPUSH
22835: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22839: LD_VAR 0 3
22843: PPUSH
22844: LD_INT 8
22846: PPUSH
22847: CALL_OW 336
// end ; 4 :
22851: GO 22944
22853: LD_INT 4
22855: DOUBLE
22856: EQUAL
22857: IFTRUE 22861
22859: GO 22922
22861: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22862: LD_ADDR_VAR 0 2
22866: PUSH
22867: LD_INT 22
22869: PUSH
22870: LD_OWVAR 2
22874: PUSH
22875: EMPTY
22876: LIST
22877: LIST
22878: PUSH
22879: LD_INT 30
22881: PUSH
22882: LD_INT 29
22884: PUSH
22885: EMPTY
22886: LIST
22887: LIST
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: PPUSH
22893: CALL_OW 69
22897: ST_TO_ADDR
// if not tmp then
22898: LD_VAR 0 2
22902: NOT
22903: IFFALSE 22907
// exit ;
22905: GO 22944
// DestroyUnit ( tmp [ 1 ] ) ;
22907: LD_VAR 0 2
22911: PUSH
22912: LD_INT 1
22914: ARRAY
22915: PPUSH
22916: CALL_OW 65
// end ; 5 .. 7 :
22920: GO 22944
22922: LD_INT 5
22924: DOUBLE
22925: GREATEREQUAL
22926: IFFALSE 22934
22928: LD_INT 7
22930: DOUBLE
22931: LESSEQUAL
22932: IFTRUE 22936
22934: GO 22943
22936: POP
// StreamSibBomb ; end ;
22937: CALL 19194 0 0
22941: GO 22944
22943: POP
// end ;
22944: PPOPN 3
22946: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22947: LD_EXP 47
22951: PUSH
22952: LD_EXP 97
22956: AND
22957: IFFALSE 23113
22959: GO 22961
22961: DISABLE
22962: LD_INT 0
22964: PPUSH
22965: PPUSH
22966: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22967: LD_ADDR_VAR 0 2
22971: PUSH
22972: LD_INT 81
22974: PUSH
22975: LD_OWVAR 2
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: PUSH
22984: LD_INT 2
22986: PUSH
22987: LD_INT 21
22989: PUSH
22990: LD_INT 1
22992: PUSH
22993: EMPTY
22994: LIST
22995: LIST
22996: PUSH
22997: LD_INT 21
22999: PUSH
23000: LD_INT 2
23002: PUSH
23003: EMPTY
23004: LIST
23005: LIST
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: LIST
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: PPUSH
23016: CALL_OW 69
23020: ST_TO_ADDR
// if not tmp then
23021: LD_VAR 0 2
23025: NOT
23026: IFFALSE 23030
// exit ;
23028: GO 23113
// p := 0 ;
23030: LD_ADDR_VAR 0 3
23034: PUSH
23035: LD_INT 0
23037: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23038: LD_INT 35
23040: PPUSH
23041: CALL_OW 67
// p := p + 1 ;
23045: LD_ADDR_VAR 0 3
23049: PUSH
23050: LD_VAR 0 3
23054: PUSH
23055: LD_INT 1
23057: PLUS
23058: ST_TO_ADDR
// for i in tmp do
23059: LD_ADDR_VAR 0 1
23063: PUSH
23064: LD_VAR 0 2
23068: PUSH
23069: FOR_IN
23070: IFFALSE 23101
// if GetLives ( i ) < 1000 then
23072: LD_VAR 0 1
23076: PPUSH
23077: CALL_OW 256
23081: PUSH
23082: LD_INT 1000
23084: LESS
23085: IFFALSE 23099
// SetLives ( i , 1000 ) ;
23087: LD_VAR 0 1
23091: PPUSH
23092: LD_INT 1000
23094: PPUSH
23095: CALL_OW 234
23099: GO 23069
23101: POP
23102: POP
// until p > 20 ;
23103: LD_VAR 0 3
23107: PUSH
23108: LD_INT 20
23110: GREATER
23111: IFFALSE 23038
// end ;
23113: PPOPN 3
23115: END
// every 0 0$1 trigger StreamModeActive and sTime do
23116: LD_EXP 47
23120: PUSH
23121: LD_EXP 98
23125: AND
23126: IFFALSE 23161
23128: GO 23130
23130: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23131: LD_INT 28
23133: PPUSH
23134: LD_OWVAR 2
23138: PPUSH
23139: LD_INT 2
23141: PPUSH
23142: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23146: LD_INT 30
23148: PPUSH
23149: LD_OWVAR 2
23153: PPUSH
23154: LD_INT 2
23156: PPUSH
23157: CALL_OW 322
// end ;
23161: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23162: LD_EXP 47
23166: PUSH
23167: LD_EXP 99
23171: AND
23172: IFFALSE 23293
23174: GO 23176
23176: DISABLE
23177: LD_INT 0
23179: PPUSH
23180: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23181: LD_ADDR_VAR 0 2
23185: PUSH
23186: LD_INT 22
23188: PUSH
23189: LD_OWVAR 2
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: PUSH
23198: LD_INT 21
23200: PUSH
23201: LD_INT 1
23203: PUSH
23204: EMPTY
23205: LIST
23206: LIST
23207: PUSH
23208: LD_INT 3
23210: PUSH
23211: LD_INT 23
23213: PUSH
23214: LD_INT 0
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: PUSH
23221: EMPTY
23222: LIST
23223: LIST
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: LIST
23229: PPUSH
23230: CALL_OW 69
23234: ST_TO_ADDR
// if not tmp then
23235: LD_VAR 0 2
23239: NOT
23240: IFFALSE 23244
// exit ;
23242: GO 23293
// for i in tmp do
23244: LD_ADDR_VAR 0 1
23248: PUSH
23249: LD_VAR 0 2
23253: PUSH
23254: FOR_IN
23255: IFFALSE 23291
// begin if Crawls ( i ) then
23257: LD_VAR 0 1
23261: PPUSH
23262: CALL_OW 318
23266: IFFALSE 23277
// ComWalk ( i ) ;
23268: LD_VAR 0 1
23272: PPUSH
23273: CALL_OW 138
// SetClass ( i , 2 ) ;
23277: LD_VAR 0 1
23281: PPUSH
23282: LD_INT 2
23284: PPUSH
23285: CALL_OW 336
// end ;
23289: GO 23254
23291: POP
23292: POP
// end ;
23293: PPOPN 2
23295: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23296: LD_EXP 47
23300: PUSH
23301: LD_EXP 100
23305: AND
23306: IFFALSE 23587
23308: GO 23310
23310: DISABLE
23311: LD_INT 0
23313: PPUSH
23314: PPUSH
23315: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23316: LD_OWVAR 2
23320: PPUSH
23321: LD_INT 9
23323: PPUSH
23324: LD_INT 1
23326: PPUSH
23327: LD_INT 1
23329: PPUSH
23330: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23334: LD_INT 9
23336: PPUSH
23337: LD_OWVAR 2
23341: PPUSH
23342: CALL_OW 343
// uc_side := 9 ;
23346: LD_ADDR_OWVAR 20
23350: PUSH
23351: LD_INT 9
23353: ST_TO_ADDR
// uc_nation := 2 ;
23354: LD_ADDR_OWVAR 21
23358: PUSH
23359: LD_INT 2
23361: ST_TO_ADDR
// hc_name := Dark Warrior ;
23362: LD_ADDR_OWVAR 26
23366: PUSH
23367: LD_STRING Dark Warrior
23369: ST_TO_ADDR
// hc_gallery :=  ;
23370: LD_ADDR_OWVAR 33
23374: PUSH
23375: LD_STRING 
23377: ST_TO_ADDR
// hc_noskilllimit := true ;
23378: LD_ADDR_OWVAR 76
23382: PUSH
23383: LD_INT 1
23385: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23386: LD_ADDR_OWVAR 31
23390: PUSH
23391: LD_INT 30
23393: PUSH
23394: LD_INT 30
23396: PUSH
23397: LD_INT 30
23399: PUSH
23400: LD_INT 30
23402: PUSH
23403: EMPTY
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: ST_TO_ADDR
// un := CreateHuman ;
23409: LD_ADDR_VAR 0 3
23413: PUSH
23414: CALL_OW 44
23418: ST_TO_ADDR
// hc_noskilllimit := false ;
23419: LD_ADDR_OWVAR 76
23423: PUSH
23424: LD_INT 0
23426: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23427: LD_VAR 0 3
23431: PPUSH
23432: LD_INT 1
23434: PPUSH
23435: CALL_OW 51
// p := 0 ;
23439: LD_ADDR_VAR 0 2
23443: PUSH
23444: LD_INT 0
23446: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23447: LD_INT 35
23449: PPUSH
23450: CALL_OW 67
// p := p + 1 ;
23454: LD_ADDR_VAR 0 2
23458: PUSH
23459: LD_VAR 0 2
23463: PUSH
23464: LD_INT 1
23466: PLUS
23467: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23468: LD_VAR 0 3
23472: PPUSH
23473: CALL_OW 256
23477: PUSH
23478: LD_INT 1000
23480: LESS
23481: IFFALSE 23495
// SetLives ( un , 1000 ) ;
23483: LD_VAR 0 3
23487: PPUSH
23488: LD_INT 1000
23490: PPUSH
23491: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23495: LD_VAR 0 3
23499: PPUSH
23500: LD_INT 81
23502: PUSH
23503: LD_OWVAR 2
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: PUSH
23512: LD_INT 91
23514: PUSH
23515: LD_VAR 0 3
23519: PUSH
23520: LD_INT 30
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: LIST
23527: PUSH
23528: EMPTY
23529: LIST
23530: LIST
23531: PPUSH
23532: CALL_OW 69
23536: PPUSH
23537: LD_VAR 0 3
23541: PPUSH
23542: CALL_OW 74
23546: PPUSH
23547: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
23551: LD_VAR 0 2
23555: PUSH
23556: LD_INT 60
23558: GREATER
23559: PUSH
23560: LD_VAR 0 3
23564: PPUSH
23565: CALL_OW 301
23569: OR
23570: IFFALSE 23447
// if un then
23572: LD_VAR 0 3
23576: IFFALSE 23587
// RemoveUnit ( un ) ;
23578: LD_VAR 0 3
23582: PPUSH
23583: CALL_OW 64
// end ;
23587: PPOPN 3
23589: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23590: LD_INT 0
23592: PPUSH
23593: PPUSH
23594: PPUSH
23595: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23596: LD_ADDR_VAR 0 4
23600: PUSH
23601: LD_INT 22
23603: PUSH
23604: LD_OWVAR 2
23608: PUSH
23609: EMPTY
23610: LIST
23611: LIST
23612: PUSH
23613: LD_INT 2
23615: PUSH
23616: LD_INT 30
23618: PUSH
23619: LD_INT 0
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: PUSH
23626: LD_INT 30
23628: PUSH
23629: LD_INT 1
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: LIST
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: PPUSH
23645: CALL_OW 69
23649: ST_TO_ADDR
// if not tmp then
23650: LD_VAR 0 4
23654: NOT
23655: IFFALSE 23659
// exit ;
23657: GO 23718
// for i in tmp do
23659: LD_ADDR_VAR 0 2
23663: PUSH
23664: LD_VAR 0 4
23668: PUSH
23669: FOR_IN
23670: IFFALSE 23716
// for j = 1 to 3 do
23672: LD_ADDR_VAR 0 3
23676: PUSH
23677: DOUBLE
23678: LD_INT 1
23680: DEC
23681: ST_TO_ADDR
23682: LD_INT 3
23684: PUSH
23685: FOR_TO
23686: IFFALSE 23712
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23688: LD_VAR 0 2
23692: PPUSH
23693: CALL_OW 274
23697: PPUSH
23698: LD_VAR 0 3
23702: PPUSH
23703: LD_INT 99999
23705: PPUSH
23706: CALL_OW 277
23710: GO 23685
23712: POP
23713: POP
23714: GO 23669
23716: POP
23717: POP
// end ;
23718: LD_VAR 0 1
23722: RET
// export function hHackSetLevel10 ; var i , j ; begin
23723: LD_INT 0
23725: PPUSH
23726: PPUSH
23727: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23728: LD_ADDR_VAR 0 2
23732: PUSH
23733: LD_INT 21
23735: PUSH
23736: LD_INT 1
23738: PUSH
23739: EMPTY
23740: LIST
23741: LIST
23742: PPUSH
23743: CALL_OW 69
23747: PUSH
23748: FOR_IN
23749: IFFALSE 23801
// if IsSelected ( i ) then
23751: LD_VAR 0 2
23755: PPUSH
23756: CALL_OW 306
23760: IFFALSE 23799
// begin for j := 1 to 4 do
23762: LD_ADDR_VAR 0 3
23766: PUSH
23767: DOUBLE
23768: LD_INT 1
23770: DEC
23771: ST_TO_ADDR
23772: LD_INT 4
23774: PUSH
23775: FOR_TO
23776: IFFALSE 23797
// SetSkill ( i , j , 10 ) ;
23778: LD_VAR 0 2
23782: PPUSH
23783: LD_VAR 0 3
23787: PPUSH
23788: LD_INT 10
23790: PPUSH
23791: CALL_OW 237
23795: GO 23775
23797: POP
23798: POP
// end ;
23799: GO 23748
23801: POP
23802: POP
// end ;
23803: LD_VAR 0 1
23807: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23808: LD_INT 0
23810: PPUSH
23811: PPUSH
23812: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23813: LD_ADDR_VAR 0 2
23817: PUSH
23818: LD_INT 22
23820: PUSH
23821: LD_OWVAR 2
23825: PUSH
23826: EMPTY
23827: LIST
23828: LIST
23829: PUSH
23830: LD_INT 21
23832: PUSH
23833: LD_INT 1
23835: PUSH
23836: EMPTY
23837: LIST
23838: LIST
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PPUSH
23844: CALL_OW 69
23848: PUSH
23849: FOR_IN
23850: IFFALSE 23891
// begin for j := 1 to 4 do
23852: LD_ADDR_VAR 0 3
23856: PUSH
23857: DOUBLE
23858: LD_INT 1
23860: DEC
23861: ST_TO_ADDR
23862: LD_INT 4
23864: PUSH
23865: FOR_TO
23866: IFFALSE 23887
// SetSkill ( i , j , 10 ) ;
23868: LD_VAR 0 2
23872: PPUSH
23873: LD_VAR 0 3
23877: PPUSH
23878: LD_INT 10
23880: PPUSH
23881: CALL_OW 237
23885: GO 23865
23887: POP
23888: POP
// end ;
23889: GO 23849
23891: POP
23892: POP
// end ;
23893: LD_VAR 0 1
23897: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
23898: LD_INT 0
23900: PPUSH
// uc_side := your_side ;
23901: LD_ADDR_OWVAR 20
23905: PUSH
23906: LD_OWVAR 2
23910: ST_TO_ADDR
// uc_nation := nation ;
23911: LD_ADDR_OWVAR 21
23915: PUSH
23916: LD_VAR 0 1
23920: ST_TO_ADDR
// InitHc ;
23921: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23925: LD_INT 0
23927: PPUSH
23928: LD_VAR 0 2
23932: PPUSH
23933: LD_VAR 0 3
23937: PPUSH
23938: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
23942: CALL_OW 44
23946: PPUSH
23947: LD_INT 1
23949: PPUSH
23950: CALL_OW 51
// end ;
23954: LD_VAR 0 4
23958: RET
// export function hHackSpawnVehicle ; begin
23959: LD_INT 0
23961: PPUSH
// uc_side := your_side ;
23962: LD_ADDR_OWVAR 20
23966: PUSH
23967: LD_OWVAR 2
23971: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
23972: LD_ADDR_OWVAR 21
23976: PUSH
23977: LD_INT 1
23979: PPUSH
23980: LD_INT 3
23982: PPUSH
23983: CALL_OW 12
23987: ST_TO_ADDR
// InitVc ;
23988: CALL_OW 20
// case uc_nation of 1 :
23992: LD_OWVAR 21
23996: PUSH
23997: LD_INT 1
23999: DOUBLE
24000: EQUAL
24001: IFTRUE 24005
24003: GO 24149
24005: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
24006: LD_ADDR_OWVAR 37
24010: PUSH
24011: LD_INT 1
24013: PUSH
24014: LD_INT 2
24016: PUSH
24017: LD_INT 3
24019: PUSH
24020: LD_INT 4
24022: PUSH
24023: LD_INT 5
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: PUSH
24033: LD_INT 1
24035: PPUSH
24036: LD_INT 5
24038: PPUSH
24039: CALL_OW 12
24043: ARRAY
24044: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
24045: LD_ADDR_OWVAR 39
24049: PUSH
24050: LD_INT 1
24052: PPUSH
24053: LD_INT 3
24055: PPUSH
24056: CALL_OW 12
24060: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
24061: LD_ADDR_OWVAR 38
24065: PUSH
24066: LD_INT 1
24068: PUSH
24069: LD_INT 2
24071: PUSH
24072: LD_INT 3
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: LIST
24079: PUSH
24080: LD_INT 1
24082: PPUSH
24083: LD_INT 3
24085: PPUSH
24086: CALL_OW 12
24090: ARRAY
24091: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
24092: LD_ADDR_OWVAR 40
24096: PUSH
24097: LD_INT 2
24099: PUSH
24100: LD_INT 4
24102: PUSH
24103: LD_INT 5
24105: PUSH
24106: LD_INT 3
24108: PUSH
24109: LD_INT 7
24111: PUSH
24112: LD_INT 8
24114: PUSH
24115: LD_INT 9
24117: PUSH
24118: LD_INT 10
24120: PUSH
24121: LD_INT 6
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: PUSH
24135: LD_INT 1
24137: PPUSH
24138: LD_INT 9
24140: PPUSH
24141: CALL_OW 12
24145: ARRAY
24146: ST_TO_ADDR
// end ; 2 :
24147: GO 24414
24149: LD_INT 2
24151: DOUBLE
24152: EQUAL
24153: IFTRUE 24157
24155: GO 24281
24157: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
24158: LD_ADDR_OWVAR 37
24162: PUSH
24163: LD_INT 11
24165: PUSH
24166: LD_INT 12
24168: PUSH
24169: LD_INT 13
24171: PUSH
24172: LD_INT 14
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: PUSH
24181: LD_INT 1
24183: PPUSH
24184: LD_INT 4
24186: PPUSH
24187: CALL_OW 12
24191: ARRAY
24192: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
24193: LD_ADDR_OWVAR 39
24197: PUSH
24198: LD_INT 1
24200: PPUSH
24201: LD_INT 3
24203: PPUSH
24204: CALL_OW 12
24208: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
24209: LD_ADDR_OWVAR 38
24213: PUSH
24214: LD_INT 1
24216: PUSH
24217: LD_INT 2
24219: PUSH
24220: LD_INT 5
24222: PUSH
24223: EMPTY
24224: LIST
24225: LIST
24226: LIST
24227: PUSH
24228: LD_INT 1
24230: PPUSH
24231: LD_INT 3
24233: PPUSH
24234: CALL_OW 12
24238: ARRAY
24239: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
24240: LD_ADDR_OWVAR 40
24244: PUSH
24245: LD_INT 24
24247: PUSH
24248: LD_INT 26
24250: PUSH
24251: LD_INT 27
24253: PUSH
24254: LD_INT 28
24256: PUSH
24257: LD_INT 29
24259: PUSH
24260: EMPTY
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: PUSH
24267: LD_INT 1
24269: PPUSH
24270: LD_INT 5
24272: PPUSH
24273: CALL_OW 12
24277: ARRAY
24278: ST_TO_ADDR
// end ; 3 :
24279: GO 24414
24281: LD_INT 3
24283: DOUBLE
24284: EQUAL
24285: IFTRUE 24289
24287: GO 24413
24289: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
24290: LD_ADDR_OWVAR 37
24294: PUSH
24295: LD_INT 21
24297: PUSH
24298: LD_INT 23
24300: PUSH
24301: LD_INT 22
24303: PUSH
24304: LD_INT 24
24306: PUSH
24307: EMPTY
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: PUSH
24313: LD_INT 1
24315: PPUSH
24316: LD_INT 4
24318: PPUSH
24319: CALL_OW 12
24323: ARRAY
24324: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
24325: LD_ADDR_OWVAR 39
24329: PUSH
24330: LD_INT 1
24332: PPUSH
24333: LD_INT 3
24335: PPUSH
24336: CALL_OW 12
24340: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
24341: LD_ADDR_OWVAR 38
24345: PUSH
24346: LD_INT 1
24348: PUSH
24349: LD_INT 3
24351: PUSH
24352: EMPTY
24353: LIST
24354: LIST
24355: PUSH
24356: LD_INT 1
24358: PPUSH
24359: LD_INT 2
24361: PPUSH
24362: CALL_OW 12
24366: ARRAY
24367: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
24368: LD_ADDR_OWVAR 40
24372: PUSH
24373: LD_INT 42
24375: PUSH
24376: LD_INT 43
24378: PUSH
24379: LD_INT 44
24381: PUSH
24382: LD_INT 46
24384: PUSH
24385: LD_INT 48
24387: PUSH
24388: LD_INT 47
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: PUSH
24399: LD_INT 1
24401: PPUSH
24402: LD_INT 6
24404: PPUSH
24405: CALL_OW 12
24409: ARRAY
24410: ST_TO_ADDR
// end ; end ;
24411: GO 24414
24413: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
24414: CALL_OW 45
24418: PPUSH
24419: LD_INT 1
24421: PPUSH
24422: CALL_OW 51
// end ;
24426: LD_VAR 0 1
24430: RET
// export hInvincible ; every 1 do
24431: GO 24433
24433: DISABLE
// hInvincible := [ ] ;
24434: LD_ADDR_EXP 101
24438: PUSH
24439: EMPTY
24440: ST_TO_ADDR
24441: END
// every 10 do var i ;
24442: GO 24444
24444: DISABLE
24445: LD_INT 0
24447: PPUSH
// begin enable ;
24448: ENABLE
// if not hInvincible then
24449: LD_EXP 101
24453: NOT
24454: IFFALSE 24458
// exit ;
24456: GO 24502
// for i in hInvincible do
24458: LD_ADDR_VAR 0 1
24462: PUSH
24463: LD_EXP 101
24467: PUSH
24468: FOR_IN
24469: IFFALSE 24500
// if GetLives ( i ) < 1000 then
24471: LD_VAR 0 1
24475: PPUSH
24476: CALL_OW 256
24480: PUSH
24481: LD_INT 1000
24483: LESS
24484: IFFALSE 24498
// SetLives ( i , 1000 ) ;
24486: LD_VAR 0 1
24490: PPUSH
24491: LD_INT 1000
24493: PPUSH
24494: CALL_OW 234
24498: GO 24468
24500: POP
24501: POP
// end ;
24502: PPOPN 1
24504: END
// export function hHackInvincible ; var i ; begin
24505: LD_INT 0
24507: PPUSH
24508: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24509: LD_ADDR_VAR 0 2
24513: PUSH
24514: LD_INT 2
24516: PUSH
24517: LD_INT 21
24519: PUSH
24520: LD_INT 1
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: PUSH
24527: LD_INT 21
24529: PUSH
24530: LD_INT 2
24532: PUSH
24533: EMPTY
24534: LIST
24535: LIST
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: LIST
24541: PPUSH
24542: CALL_OW 69
24546: PUSH
24547: FOR_IN
24548: IFFALSE 24609
// if IsSelected ( i ) then
24550: LD_VAR 0 2
24554: PPUSH
24555: CALL_OW 306
24559: IFFALSE 24607
// begin if i in hInvincible then
24561: LD_VAR 0 2
24565: PUSH
24566: LD_EXP 101
24570: IN
24571: IFFALSE 24591
// hInvincible := hInvincible diff i else
24573: LD_ADDR_EXP 101
24577: PUSH
24578: LD_EXP 101
24582: PUSH
24583: LD_VAR 0 2
24587: DIFF
24588: ST_TO_ADDR
24589: GO 24607
// hInvincible := hInvincible union i ;
24591: LD_ADDR_EXP 101
24595: PUSH
24596: LD_EXP 101
24600: PUSH
24601: LD_VAR 0 2
24605: UNION
24606: ST_TO_ADDR
// end ;
24607: GO 24547
24609: POP
24610: POP
// end ;
24611: LD_VAR 0 1
24615: RET
// export function hHackInvisible ; var i , j ; begin
24616: LD_INT 0
24618: PPUSH
24619: PPUSH
24620: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24621: LD_ADDR_VAR 0 2
24625: PUSH
24626: LD_INT 21
24628: PUSH
24629: LD_INT 1
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: PPUSH
24636: CALL_OW 69
24640: PUSH
24641: FOR_IN
24642: IFFALSE 24666
// if IsSelected ( i ) then
24644: LD_VAR 0 2
24648: PPUSH
24649: CALL_OW 306
24653: IFFALSE 24664
// ComForceInvisible ( i ) ;
24655: LD_VAR 0 2
24659: PPUSH
24660: CALL_OW 496
24664: GO 24641
24666: POP
24667: POP
// end ;
24668: LD_VAR 0 1
24672: RET
// export function hHackChangeYourSide ; begin
24673: LD_INT 0
24675: PPUSH
// if your_side = 8 then
24676: LD_OWVAR 2
24680: PUSH
24681: LD_INT 8
24683: EQUAL
24684: IFFALSE 24696
// your_side := 0 else
24686: LD_ADDR_OWVAR 2
24690: PUSH
24691: LD_INT 0
24693: ST_TO_ADDR
24694: GO 24710
// your_side := your_side + 1 ;
24696: LD_ADDR_OWVAR 2
24700: PUSH
24701: LD_OWVAR 2
24705: PUSH
24706: LD_INT 1
24708: PLUS
24709: ST_TO_ADDR
// end ;
24710: LD_VAR 0 1
24714: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24715: LD_INT 0
24717: PPUSH
24718: PPUSH
24719: PPUSH
// for i in all_units do
24720: LD_ADDR_VAR 0 2
24724: PUSH
24725: LD_OWVAR 3
24729: PUSH
24730: FOR_IN
24731: IFFALSE 24809
// if IsSelected ( i ) then
24733: LD_VAR 0 2
24737: PPUSH
24738: CALL_OW 306
24742: IFFALSE 24807
// begin j := GetSide ( i ) ;
24744: LD_ADDR_VAR 0 3
24748: PUSH
24749: LD_VAR 0 2
24753: PPUSH
24754: CALL_OW 255
24758: ST_TO_ADDR
// if j = 8 then
24759: LD_VAR 0 3
24763: PUSH
24764: LD_INT 8
24766: EQUAL
24767: IFFALSE 24779
// j := 0 else
24769: LD_ADDR_VAR 0 3
24773: PUSH
24774: LD_INT 0
24776: ST_TO_ADDR
24777: GO 24793
// j := j + 1 ;
24779: LD_ADDR_VAR 0 3
24783: PUSH
24784: LD_VAR 0 3
24788: PUSH
24789: LD_INT 1
24791: PLUS
24792: ST_TO_ADDR
// SetSide ( i , j ) ;
24793: LD_VAR 0 2
24797: PPUSH
24798: LD_VAR 0 3
24802: PPUSH
24803: CALL_OW 235
// end ;
24807: GO 24730
24809: POP
24810: POP
// end ;
24811: LD_VAR 0 1
24815: RET
// export function hHackFog ; begin
24816: LD_INT 0
24818: PPUSH
// FogOff ( true ) ;
24819: LD_INT 1
24821: PPUSH
24822: CALL_OW 344
// end ;
24826: LD_VAR 0 1
24830: RET
// export function hHackApeman ; begin
24831: LD_INT 0
24833: PPUSH
// uc_side := your_side ;
24834: LD_ADDR_OWVAR 20
24838: PUSH
24839: LD_OWVAR 2
24843: ST_TO_ADDR
// uc_nation := 0 ;
24844: LD_ADDR_OWVAR 21
24848: PUSH
24849: LD_INT 0
24851: ST_TO_ADDR
// hc_name :=  ;
24852: LD_ADDR_OWVAR 26
24856: PUSH
24857: LD_STRING 
24859: ST_TO_ADDR
// hc_gallery :=  ;
24860: LD_ADDR_OWVAR 33
24864: PUSH
24865: LD_STRING 
24867: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
24868: LD_ADDR_OWVAR 31
24872: PUSH
24873: LD_INT 0
24875: PUSH
24876: LD_INT 0
24878: PUSH
24879: LD_INT 0
24881: PUSH
24882: LD_INT 0
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: ST_TO_ADDR
// hc_class := class_apeman ;
24891: LD_ADDR_OWVAR 28
24895: PUSH
24896: LD_INT 12
24898: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
24899: CALL_OW 44
24903: PPUSH
24904: LD_INT 1
24906: PPUSH
24907: CALL_OW 51
// end ;
24911: LD_VAR 0 1
24915: RET
// export function hHackBoom ; begin
24916: LD_INT 0
24918: PPUSH
// uc_side := your_side ;
24919: LD_ADDR_OWVAR 20
24923: PUSH
24924: LD_OWVAR 2
24928: ST_TO_ADDR
// uc_nation := 1 ;
24929: LD_ADDR_OWVAR 21
24933: PUSH
24934: LD_INT 1
24936: ST_TO_ADDR
// vc_chassis := us_morphling ;
24937: LD_ADDR_OWVAR 37
24941: PUSH
24942: LD_INT 5
24944: ST_TO_ADDR
// vc_engine := engine_siberite ;
24945: LD_ADDR_OWVAR 39
24949: PUSH
24950: LD_INT 3
24952: ST_TO_ADDR
// vc_control := control_computer ;
24953: LD_ADDR_OWVAR 38
24957: PUSH
24958: LD_INT 3
24960: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
24961: LD_ADDR_OWVAR 40
24965: PUSH
24966: LD_INT 8
24968: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
24969: CALL_OW 45
24973: PPUSH
24974: LD_INT 1
24976: PPUSH
24977: CALL_OW 51
// end ; end_of_file
24981: LD_VAR 0 1
24985: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
24986: LD_INT 0
24988: PPUSH
24989: PPUSH
24990: PPUSH
24991: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24992: LD_VAR 0 1
24996: PPUSH
24997: CALL_OW 264
25001: PUSH
25002: LD_EXP 36
25006: EQUAL
25007: IFFALSE 25079
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25009: LD_INT 68
25011: PPUSH
25012: LD_VAR 0 1
25016: PPUSH
25017: CALL_OW 255
25021: PPUSH
25022: CALL_OW 321
25026: PUSH
25027: LD_INT 2
25029: EQUAL
25030: IFFALSE 25042
// eff := 70 else
25032: LD_ADDR_VAR 0 4
25036: PUSH
25037: LD_INT 70
25039: ST_TO_ADDR
25040: GO 25050
// eff := 30 ;
25042: LD_ADDR_VAR 0 4
25046: PUSH
25047: LD_INT 30
25049: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25050: LD_VAR 0 1
25054: PPUSH
25055: CALL_OW 250
25059: PPUSH
25060: LD_VAR 0 1
25064: PPUSH
25065: CALL_OW 251
25069: PPUSH
25070: LD_VAR 0 4
25074: PPUSH
25075: CALL_OW 495
// end ; end ;
25079: LD_VAR 0 2
25083: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25084: LD_INT 0
25086: PPUSH
// end ;
25087: LD_VAR 0 4
25091: RET
// export function SOS_Command ( cmd ) ; begin
25092: LD_INT 0
25094: PPUSH
// end ;
25095: LD_VAR 0 2
25099: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25100: LD_VAR 0 1
25104: PUSH
25105: LD_INT 254
25107: EQUAL
25108: PUSH
25109: LD_VAR 0 2
25113: PPUSH
25114: CALL_OW 264
25118: PUSH
25119: LD_EXP 34
25123: EQUAL
25124: AND
25125: PUSH
25126: LD_VAR 0 3
25130: PPUSH
25131: CALL_OW 263
25135: PUSH
25136: LD_INT 3
25138: EQUAL
25139: AND
25140: IFFALSE 25156
// HackDestroyVehicle ( unit , selectedUnit ) ;
25142: LD_VAR 0 2
25146: PPUSH
25147: LD_VAR 0 3
25151: PPUSH
25152: CALL 26663 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25156: LD_VAR 0 1
25160: PUSH
25161: LD_INT 255
25163: EQUAL
25164: PUSH
25165: LD_VAR 0 2
25169: PPUSH
25170: CALL_OW 264
25174: PUSH
25175: LD_INT 14
25177: PUSH
25178: LD_INT 53
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: IN
25185: AND
25186: PUSH
25187: LD_VAR 0 4
25191: PPUSH
25192: LD_VAR 0 5
25196: PPUSH
25197: CALL_OW 488
25201: AND
25202: IFFALSE 25226
// CutTreeXYR ( unit , x , y , 12 ) ;
25204: LD_VAR 0 2
25208: PPUSH
25209: LD_VAR 0 4
25213: PPUSH
25214: LD_VAR 0 5
25218: PPUSH
25219: LD_INT 12
25221: PPUSH
25222: CALL 25229 0 4
// end ;
25226: PPOPN 5
25228: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25229: LD_INT 0
25231: PPUSH
25232: PPUSH
25233: PPUSH
25234: PPUSH
25235: PPUSH
25236: PPUSH
25237: PPUSH
25238: PPUSH
25239: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
25240: LD_VAR 0 1
25244: NOT
25245: PUSH
25246: LD_VAR 0 2
25250: PPUSH
25251: LD_VAR 0 3
25255: PPUSH
25256: CALL_OW 488
25260: NOT
25261: OR
25262: PUSH
25263: LD_VAR 0 4
25267: NOT
25268: OR
25269: IFFALSE 25273
// exit ;
25271: GO 25613
// list := [ ] ;
25273: LD_ADDR_VAR 0 13
25277: PUSH
25278: EMPTY
25279: ST_TO_ADDR
// if x - r < 0 then
25280: LD_VAR 0 2
25284: PUSH
25285: LD_VAR 0 4
25289: MINUS
25290: PUSH
25291: LD_INT 0
25293: LESS
25294: IFFALSE 25306
// min_x := 0 else
25296: LD_ADDR_VAR 0 7
25300: PUSH
25301: LD_INT 0
25303: ST_TO_ADDR
25304: GO 25322
// min_x := x - r ;
25306: LD_ADDR_VAR 0 7
25310: PUSH
25311: LD_VAR 0 2
25315: PUSH
25316: LD_VAR 0 4
25320: MINUS
25321: ST_TO_ADDR
// if y - r < 0 then
25322: LD_VAR 0 3
25326: PUSH
25327: LD_VAR 0 4
25331: MINUS
25332: PUSH
25333: LD_INT 0
25335: LESS
25336: IFFALSE 25348
// min_y := 0 else
25338: LD_ADDR_VAR 0 8
25342: PUSH
25343: LD_INT 0
25345: ST_TO_ADDR
25346: GO 25364
// min_y := y - r ;
25348: LD_ADDR_VAR 0 8
25352: PUSH
25353: LD_VAR 0 3
25357: PUSH
25358: LD_VAR 0 4
25362: MINUS
25363: ST_TO_ADDR
// max_x := x + r ;
25364: LD_ADDR_VAR 0 9
25368: PUSH
25369: LD_VAR 0 2
25373: PUSH
25374: LD_VAR 0 4
25378: PLUS
25379: ST_TO_ADDR
// max_y := y + r ;
25380: LD_ADDR_VAR 0 10
25384: PUSH
25385: LD_VAR 0 3
25389: PUSH
25390: LD_VAR 0 4
25394: PLUS
25395: ST_TO_ADDR
// for _x = min_x to max_x do
25396: LD_ADDR_VAR 0 11
25400: PUSH
25401: DOUBLE
25402: LD_VAR 0 7
25406: DEC
25407: ST_TO_ADDR
25408: LD_VAR 0 9
25412: PUSH
25413: FOR_TO
25414: IFFALSE 25531
// for _y = min_y to max_y do
25416: LD_ADDR_VAR 0 12
25420: PUSH
25421: DOUBLE
25422: LD_VAR 0 8
25426: DEC
25427: ST_TO_ADDR
25428: LD_VAR 0 10
25432: PUSH
25433: FOR_TO
25434: IFFALSE 25527
// begin if not ValidHex ( _x , _y ) then
25436: LD_VAR 0 11
25440: PPUSH
25441: LD_VAR 0 12
25445: PPUSH
25446: CALL_OW 488
25450: NOT
25451: IFFALSE 25455
// continue ;
25453: GO 25433
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25455: LD_VAR 0 11
25459: PPUSH
25460: LD_VAR 0 12
25464: PPUSH
25465: CALL_OW 351
25469: PUSH
25470: LD_VAR 0 11
25474: PPUSH
25475: LD_VAR 0 12
25479: PPUSH
25480: CALL_OW 554
25484: AND
25485: IFFALSE 25525
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25487: LD_ADDR_VAR 0 13
25491: PUSH
25492: LD_VAR 0 13
25496: PPUSH
25497: LD_VAR 0 13
25501: PUSH
25502: LD_INT 1
25504: PLUS
25505: PPUSH
25506: LD_VAR 0 11
25510: PUSH
25511: LD_VAR 0 12
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: PPUSH
25520: CALL_OW 2
25524: ST_TO_ADDR
// end ;
25525: GO 25433
25527: POP
25528: POP
25529: GO 25413
25531: POP
25532: POP
// if not list then
25533: LD_VAR 0 13
25537: NOT
25538: IFFALSE 25542
// exit ;
25540: GO 25613
// for i in list do
25542: LD_ADDR_VAR 0 6
25546: PUSH
25547: LD_VAR 0 13
25551: PUSH
25552: FOR_IN
25553: IFFALSE 25611
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25555: LD_VAR 0 1
25559: PPUSH
25560: LD_STRING M
25562: PUSH
25563: LD_VAR 0 6
25567: PUSH
25568: LD_INT 1
25570: ARRAY
25571: PUSH
25572: LD_VAR 0 6
25576: PUSH
25577: LD_INT 2
25579: ARRAY
25580: PUSH
25581: LD_INT 0
25583: PUSH
25584: LD_INT 0
25586: PUSH
25587: LD_INT 0
25589: PUSH
25590: LD_INT 0
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: PUSH
25602: EMPTY
25603: LIST
25604: PPUSH
25605: CALL_OW 447
25609: GO 25552
25611: POP
25612: POP
// end ;
25613: LD_VAR 0 5
25617: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25618: LD_EXP 102
25622: NOT
25623: IFFALSE 25673
25625: GO 25627
25627: DISABLE
// begin initHack := true ;
25628: LD_ADDR_EXP 102
25632: PUSH
25633: LD_INT 1
25635: ST_TO_ADDR
// hackTanks := [ ] ;
25636: LD_ADDR_EXP 103
25640: PUSH
25641: EMPTY
25642: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25643: LD_ADDR_EXP 104
25647: PUSH
25648: EMPTY
25649: ST_TO_ADDR
// hackLimit := 3 ;
25650: LD_ADDR_EXP 105
25654: PUSH
25655: LD_INT 3
25657: ST_TO_ADDR
// hackDist := 12 ;
25658: LD_ADDR_EXP 106
25662: PUSH
25663: LD_INT 12
25665: ST_TO_ADDR
// hackCounter := [ ] ;
25666: LD_ADDR_EXP 107
25670: PUSH
25671: EMPTY
25672: ST_TO_ADDR
// end ;
25673: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25674: LD_EXP 102
25678: PUSH
25679: LD_INT 34
25681: PUSH
25682: LD_EXP 34
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PPUSH
25691: CALL_OW 69
25695: AND
25696: IFFALSE 25951
25698: GO 25700
25700: DISABLE
25701: LD_INT 0
25703: PPUSH
25704: PPUSH
// begin enable ;
25705: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25706: LD_ADDR_VAR 0 1
25710: PUSH
25711: LD_INT 34
25713: PUSH
25714: LD_EXP 34
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: PPUSH
25723: CALL_OW 69
25727: PUSH
25728: FOR_IN
25729: IFFALSE 25949
// begin if not i in hackTanks then
25731: LD_VAR 0 1
25735: PUSH
25736: LD_EXP 103
25740: IN
25741: NOT
25742: IFFALSE 25825
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
25744: LD_ADDR_EXP 103
25748: PUSH
25749: LD_EXP 103
25753: PPUSH
25754: LD_EXP 103
25758: PUSH
25759: LD_INT 1
25761: PLUS
25762: PPUSH
25763: LD_VAR 0 1
25767: PPUSH
25768: CALL_OW 1
25772: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
25773: LD_ADDR_EXP 104
25777: PUSH
25778: LD_EXP 104
25782: PPUSH
25783: LD_EXP 104
25787: PUSH
25788: LD_INT 1
25790: PLUS
25791: PPUSH
25792: EMPTY
25793: PPUSH
25794: CALL_OW 1
25798: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
25799: LD_ADDR_EXP 107
25803: PUSH
25804: LD_EXP 107
25808: PPUSH
25809: LD_EXP 107
25813: PUSH
25814: LD_INT 1
25816: PLUS
25817: PPUSH
25818: EMPTY
25819: PPUSH
25820: CALL_OW 1
25824: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25825: LD_VAR 0 1
25829: PPUSH
25830: CALL_OW 302
25834: NOT
25835: IFFALSE 25848
// begin HackUnlinkAll ( i ) ;
25837: LD_VAR 0 1
25841: PPUSH
25842: CALL 25954 0 1
// continue ;
25846: GO 25728
// end ; HackCheckCapturedStatus ( i ) ;
25848: LD_VAR 0 1
25852: PPUSH
25853: CALL 26397 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25857: LD_ADDR_VAR 0 2
25861: PUSH
25862: LD_INT 81
25864: PUSH
25865: LD_VAR 0 1
25869: PPUSH
25870: CALL_OW 255
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PUSH
25879: LD_INT 33
25881: PUSH
25882: LD_INT 3
25884: PUSH
25885: EMPTY
25886: LIST
25887: LIST
25888: PUSH
25889: LD_INT 91
25891: PUSH
25892: LD_VAR 0 1
25896: PUSH
25897: LD_EXP 106
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: LIST
25906: PUSH
25907: LD_INT 50
25909: PUSH
25910: EMPTY
25911: LIST
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: PPUSH
25919: CALL_OW 69
25923: ST_TO_ADDR
// if not tmp then
25924: LD_VAR 0 2
25928: NOT
25929: IFFALSE 25933
// continue ;
25931: GO 25728
// HackLink ( i , tmp ) ;
25933: LD_VAR 0 1
25937: PPUSH
25938: LD_VAR 0 2
25942: PPUSH
25943: CALL 26090 0 2
// end ;
25947: GO 25728
25949: POP
25950: POP
// end ;
25951: PPOPN 2
25953: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
25954: LD_INT 0
25956: PPUSH
25957: PPUSH
25958: PPUSH
// if not hack in hackTanks then
25959: LD_VAR 0 1
25963: PUSH
25964: LD_EXP 103
25968: IN
25969: NOT
25970: IFFALSE 25974
// exit ;
25972: GO 26085
// index := GetElementIndex ( hackTanks , hack ) ;
25974: LD_ADDR_VAR 0 4
25978: PUSH
25979: LD_EXP 103
25983: PPUSH
25984: LD_VAR 0 1
25988: PPUSH
25989: CALL 31505 0 2
25993: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
25994: LD_EXP 104
25998: PUSH
25999: LD_VAR 0 4
26003: ARRAY
26004: IFFALSE 26085
// begin for i in hackTanksCaptured [ index ] do
26006: LD_ADDR_VAR 0 3
26010: PUSH
26011: LD_EXP 104
26015: PUSH
26016: LD_VAR 0 4
26020: ARRAY
26021: PUSH
26022: FOR_IN
26023: IFFALSE 26049
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26025: LD_VAR 0 3
26029: PUSH
26030: LD_INT 1
26032: ARRAY
26033: PPUSH
26034: LD_VAR 0 3
26038: PUSH
26039: LD_INT 2
26041: ARRAY
26042: PPUSH
26043: CALL_OW 235
26047: GO 26022
26049: POP
26050: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26051: LD_ADDR_EXP 104
26055: PUSH
26056: LD_EXP 104
26060: PPUSH
26061: LD_VAR 0 4
26065: PPUSH
26066: EMPTY
26067: PPUSH
26068: CALL_OW 1
26072: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26073: LD_VAR 0 1
26077: PPUSH
26078: LD_INT 0
26080: PPUSH
26081: CALL_OW 505
// end ; end ;
26085: LD_VAR 0 2
26089: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26090: LD_INT 0
26092: PPUSH
26093: PPUSH
26094: PPUSH
// if not hack in hackTanks or not vehicles then
26095: LD_VAR 0 1
26099: PUSH
26100: LD_EXP 103
26104: IN
26105: NOT
26106: PUSH
26107: LD_VAR 0 2
26111: NOT
26112: OR
26113: IFFALSE 26117
// exit ;
26115: GO 26392
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26117: LD_ADDR_VAR 0 2
26121: PUSH
26122: LD_VAR 0 1
26126: PPUSH
26127: LD_VAR 0 2
26131: PPUSH
26132: LD_INT 1
26134: PPUSH
26135: LD_INT 1
26137: PPUSH
26138: CALL 32155 0 4
26142: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26143: LD_ADDR_VAR 0 5
26147: PUSH
26148: LD_EXP 103
26152: PPUSH
26153: LD_VAR 0 1
26157: PPUSH
26158: CALL 31505 0 2
26162: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26163: LD_EXP 104
26167: PUSH
26168: LD_VAR 0 5
26172: ARRAY
26173: PUSH
26174: LD_EXP 105
26178: LESS
26179: IFFALSE 26368
// begin for i := 1 to vehicles do
26181: LD_ADDR_VAR 0 4
26185: PUSH
26186: DOUBLE
26187: LD_INT 1
26189: DEC
26190: ST_TO_ADDR
26191: LD_VAR 0 2
26195: PUSH
26196: FOR_TO
26197: IFFALSE 26366
// begin if hackTanksCaptured [ index ] = hackLimit then
26199: LD_EXP 104
26203: PUSH
26204: LD_VAR 0 5
26208: ARRAY
26209: PUSH
26210: LD_EXP 105
26214: EQUAL
26215: IFFALSE 26219
// break ;
26217: GO 26366
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26219: LD_ADDR_EXP 107
26223: PUSH
26224: LD_EXP 107
26228: PPUSH
26229: LD_VAR 0 5
26233: PPUSH
26234: LD_EXP 107
26238: PUSH
26239: LD_VAR 0 5
26243: ARRAY
26244: PUSH
26245: LD_INT 1
26247: PLUS
26248: PPUSH
26249: CALL_OW 1
26253: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26254: LD_ADDR_EXP 104
26258: PUSH
26259: LD_EXP 104
26263: PPUSH
26264: LD_VAR 0 5
26268: PUSH
26269: LD_EXP 104
26273: PUSH
26274: LD_VAR 0 5
26278: ARRAY
26279: PUSH
26280: LD_INT 1
26282: PLUS
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: PPUSH
26288: LD_VAR 0 2
26292: PUSH
26293: LD_VAR 0 4
26297: ARRAY
26298: PUSH
26299: LD_VAR 0 2
26303: PUSH
26304: LD_VAR 0 4
26308: ARRAY
26309: PPUSH
26310: CALL_OW 255
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: PPUSH
26319: CALL 31720 0 3
26323: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26324: LD_VAR 0 2
26328: PUSH
26329: LD_VAR 0 4
26333: ARRAY
26334: PPUSH
26335: LD_VAR 0 1
26339: PPUSH
26340: CALL_OW 255
26344: PPUSH
26345: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26349: LD_VAR 0 2
26353: PUSH
26354: LD_VAR 0 4
26358: ARRAY
26359: PPUSH
26360: CALL_OW 141
// end ;
26364: GO 26196
26366: POP
26367: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26368: LD_VAR 0 1
26372: PPUSH
26373: LD_EXP 104
26377: PUSH
26378: LD_VAR 0 5
26382: ARRAY
26383: PUSH
26384: LD_INT 0
26386: PLUS
26387: PPUSH
26388: CALL_OW 505
// end ;
26392: LD_VAR 0 3
26396: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26397: LD_INT 0
26399: PPUSH
26400: PPUSH
26401: PPUSH
26402: PPUSH
// if not hack in hackTanks then
26403: LD_VAR 0 1
26407: PUSH
26408: LD_EXP 103
26412: IN
26413: NOT
26414: IFFALSE 26418
// exit ;
26416: GO 26658
// index := GetElementIndex ( hackTanks , hack ) ;
26418: LD_ADDR_VAR 0 4
26422: PUSH
26423: LD_EXP 103
26427: PPUSH
26428: LD_VAR 0 1
26432: PPUSH
26433: CALL 31505 0 2
26437: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26438: LD_ADDR_VAR 0 3
26442: PUSH
26443: DOUBLE
26444: LD_EXP 104
26448: PUSH
26449: LD_VAR 0 4
26453: ARRAY
26454: INC
26455: ST_TO_ADDR
26456: LD_INT 1
26458: PUSH
26459: FOR_DOWNTO
26460: IFFALSE 26632
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26462: LD_ADDR_VAR 0 5
26466: PUSH
26467: LD_EXP 104
26471: PUSH
26472: LD_VAR 0 4
26476: ARRAY
26477: PUSH
26478: LD_VAR 0 3
26482: ARRAY
26483: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26484: LD_VAR 0 5
26488: PUSH
26489: LD_INT 1
26491: ARRAY
26492: PPUSH
26493: CALL_OW 302
26497: NOT
26498: PUSH
26499: LD_VAR 0 5
26503: PUSH
26504: LD_INT 1
26506: ARRAY
26507: PPUSH
26508: CALL_OW 255
26512: PUSH
26513: LD_VAR 0 1
26517: PPUSH
26518: CALL_OW 255
26522: NONEQUAL
26523: OR
26524: IFFALSE 26630
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26526: LD_VAR 0 5
26530: PUSH
26531: LD_INT 1
26533: ARRAY
26534: PPUSH
26535: CALL_OW 305
26539: PUSH
26540: LD_VAR 0 5
26544: PUSH
26545: LD_INT 1
26547: ARRAY
26548: PPUSH
26549: CALL_OW 255
26553: PUSH
26554: LD_VAR 0 1
26558: PPUSH
26559: CALL_OW 255
26563: EQUAL
26564: AND
26565: IFFALSE 26589
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26567: LD_VAR 0 5
26571: PUSH
26572: LD_INT 1
26574: ARRAY
26575: PPUSH
26576: LD_VAR 0 5
26580: PUSH
26581: LD_INT 2
26583: ARRAY
26584: PPUSH
26585: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26589: LD_ADDR_EXP 104
26593: PUSH
26594: LD_EXP 104
26598: PPUSH
26599: LD_VAR 0 4
26603: PPUSH
26604: LD_EXP 104
26608: PUSH
26609: LD_VAR 0 4
26613: ARRAY
26614: PPUSH
26615: LD_VAR 0 3
26619: PPUSH
26620: CALL_OW 3
26624: PPUSH
26625: CALL_OW 1
26629: ST_TO_ADDR
// end ; end ;
26630: GO 26459
26632: POP
26633: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26634: LD_VAR 0 1
26638: PPUSH
26639: LD_EXP 104
26643: PUSH
26644: LD_VAR 0 4
26648: ARRAY
26649: PUSH
26650: LD_INT 0
26652: PLUS
26653: PPUSH
26654: CALL_OW 505
// end ;
26658: LD_VAR 0 2
26662: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26663: LD_INT 0
26665: PPUSH
26666: PPUSH
26667: PPUSH
26668: PPUSH
// if not hack in hackTanks then
26669: LD_VAR 0 1
26673: PUSH
26674: LD_EXP 103
26678: IN
26679: NOT
26680: IFFALSE 26684
// exit ;
26682: GO 26769
// index := GetElementIndex ( hackTanks , hack ) ;
26684: LD_ADDR_VAR 0 5
26688: PUSH
26689: LD_EXP 103
26693: PPUSH
26694: LD_VAR 0 1
26698: PPUSH
26699: CALL 31505 0 2
26703: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26704: LD_ADDR_VAR 0 4
26708: PUSH
26709: DOUBLE
26710: LD_INT 1
26712: DEC
26713: ST_TO_ADDR
26714: LD_EXP 104
26718: PUSH
26719: LD_VAR 0 5
26723: ARRAY
26724: PUSH
26725: FOR_TO
26726: IFFALSE 26767
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26728: LD_EXP 104
26732: PUSH
26733: LD_VAR 0 5
26737: ARRAY
26738: PUSH
26739: LD_VAR 0 4
26743: ARRAY
26744: PUSH
26745: LD_INT 1
26747: ARRAY
26748: PUSH
26749: LD_VAR 0 2
26753: EQUAL
26754: IFFALSE 26765
// KillUnit ( vehicle ) ;
26756: LD_VAR 0 2
26760: PPUSH
26761: CALL_OW 66
26765: GO 26725
26767: POP
26768: POP
// end ; end_of_file
26769: LD_VAR 0 3
26773: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26774: LD_INT 0
26776: PPUSH
26777: PPUSH
// if exist_mode then
26778: LD_VAR 0 2
26782: IFFALSE 26807
// unit := CreateCharacter ( prefix & ident ) else
26784: LD_ADDR_VAR 0 5
26788: PUSH
26789: LD_VAR 0 3
26793: PUSH
26794: LD_VAR 0 1
26798: STR
26799: PPUSH
26800: CALL_OW 34
26804: ST_TO_ADDR
26805: GO 26822
// unit := NewCharacter ( ident ) ;
26807: LD_ADDR_VAR 0 5
26811: PUSH
26812: LD_VAR 0 1
26816: PPUSH
26817: CALL_OW 25
26821: ST_TO_ADDR
// result := unit ;
26822: LD_ADDR_VAR 0 4
26826: PUSH
26827: LD_VAR 0 5
26831: ST_TO_ADDR
// end ;
26832: LD_VAR 0 4
26836: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26837: LD_INT 0
26839: PPUSH
26840: PPUSH
// if not side or not nation then
26841: LD_VAR 0 1
26845: NOT
26846: PUSH
26847: LD_VAR 0 2
26851: NOT
26852: OR
26853: IFFALSE 26857
// exit ;
26855: GO 27621
// case nation of nation_american :
26857: LD_VAR 0 2
26861: PUSH
26862: LD_INT 1
26864: DOUBLE
26865: EQUAL
26866: IFTRUE 26870
26868: GO 27084
26870: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
26871: LD_ADDR_VAR 0 4
26875: PUSH
26876: LD_INT 35
26878: PUSH
26879: LD_INT 45
26881: PUSH
26882: LD_INT 46
26884: PUSH
26885: LD_INT 47
26887: PUSH
26888: LD_INT 82
26890: PUSH
26891: LD_INT 83
26893: PUSH
26894: LD_INT 84
26896: PUSH
26897: LD_INT 85
26899: PUSH
26900: LD_INT 86
26902: PUSH
26903: LD_INT 1
26905: PUSH
26906: LD_INT 2
26908: PUSH
26909: LD_INT 6
26911: PUSH
26912: LD_INT 15
26914: PUSH
26915: LD_INT 16
26917: PUSH
26918: LD_INT 7
26920: PUSH
26921: LD_INT 12
26923: PUSH
26924: LD_INT 13
26926: PUSH
26927: LD_INT 10
26929: PUSH
26930: LD_INT 14
26932: PUSH
26933: LD_INT 20
26935: PUSH
26936: LD_INT 21
26938: PUSH
26939: LD_INT 22
26941: PUSH
26942: LD_INT 25
26944: PUSH
26945: LD_INT 32
26947: PUSH
26948: LD_INT 27
26950: PUSH
26951: LD_INT 36
26953: PUSH
26954: LD_INT 69
26956: PUSH
26957: LD_INT 39
26959: PUSH
26960: LD_INT 34
26962: PUSH
26963: LD_INT 40
26965: PUSH
26966: LD_INT 48
26968: PUSH
26969: LD_INT 49
26971: PUSH
26972: LD_INT 50
26974: PUSH
26975: LD_INT 51
26977: PUSH
26978: LD_INT 52
26980: PUSH
26981: LD_INT 53
26983: PUSH
26984: LD_INT 54
26986: PUSH
26987: LD_INT 55
26989: PUSH
26990: LD_INT 56
26992: PUSH
26993: LD_INT 57
26995: PUSH
26996: LD_INT 58
26998: PUSH
26999: LD_INT 59
27001: PUSH
27002: LD_INT 60
27004: PUSH
27005: LD_INT 61
27007: PUSH
27008: LD_INT 62
27010: PUSH
27011: LD_INT 80
27013: PUSH
27014: LD_INT 82
27016: PUSH
27017: LD_INT 83
27019: PUSH
27020: LD_INT 84
27022: PUSH
27023: LD_INT 85
27025: PUSH
27026: LD_INT 86
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: LIST
27037: LIST
27038: LIST
27039: LIST
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: LIST
27048: LIST
27049: LIST
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: LIST
27058: LIST
27059: LIST
27060: LIST
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: LIST
27077: LIST
27078: LIST
27079: LIST
27080: LIST
27081: ST_TO_ADDR
27082: GO 27545
27084: LD_INT 2
27086: DOUBLE
27087: EQUAL
27088: IFTRUE 27092
27090: GO 27314
27092: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
27093: LD_ADDR_VAR 0 4
27097: PUSH
27098: LD_INT 35
27100: PUSH
27101: LD_INT 45
27103: PUSH
27104: LD_INT 46
27106: PUSH
27107: LD_INT 47
27109: PUSH
27110: LD_INT 82
27112: PUSH
27113: LD_INT 83
27115: PUSH
27116: LD_INT 84
27118: PUSH
27119: LD_INT 85
27121: PUSH
27122: LD_INT 87
27124: PUSH
27125: LD_INT 70
27127: PUSH
27128: LD_INT 1
27130: PUSH
27131: LD_INT 11
27133: PUSH
27134: LD_INT 3
27136: PUSH
27137: LD_INT 4
27139: PUSH
27140: LD_INT 5
27142: PUSH
27143: LD_INT 6
27145: PUSH
27146: LD_INT 15
27148: PUSH
27149: LD_INT 18
27151: PUSH
27152: LD_INT 7
27154: PUSH
27155: LD_INT 17
27157: PUSH
27158: LD_INT 8
27160: PUSH
27161: LD_INT 20
27163: PUSH
27164: LD_INT 21
27166: PUSH
27167: LD_INT 22
27169: PUSH
27170: LD_INT 72
27172: PUSH
27173: LD_INT 26
27175: PUSH
27176: LD_INT 69
27178: PUSH
27179: LD_INT 39
27181: PUSH
27182: LD_INT 40
27184: PUSH
27185: LD_INT 41
27187: PUSH
27188: LD_INT 42
27190: PUSH
27191: LD_INT 43
27193: PUSH
27194: LD_INT 48
27196: PUSH
27197: LD_INT 49
27199: PUSH
27200: LD_INT 50
27202: PUSH
27203: LD_INT 51
27205: PUSH
27206: LD_INT 52
27208: PUSH
27209: LD_INT 53
27211: PUSH
27212: LD_INT 54
27214: PUSH
27215: LD_INT 55
27217: PUSH
27218: LD_INT 56
27220: PUSH
27221: LD_INT 60
27223: PUSH
27224: LD_INT 61
27226: PUSH
27227: LD_INT 62
27229: PUSH
27230: LD_INT 66
27232: PUSH
27233: LD_INT 67
27235: PUSH
27236: LD_INT 68
27238: PUSH
27239: LD_INT 81
27241: PUSH
27242: LD_INT 82
27244: PUSH
27245: LD_INT 83
27247: PUSH
27248: LD_INT 84
27250: PUSH
27251: LD_INT 85
27253: PUSH
27254: LD_INT 87
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: LIST
27277: LIST
27278: LIST
27279: LIST
27280: LIST
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: LIST
27300: LIST
27301: LIST
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: LIST
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: ST_TO_ADDR
27312: GO 27545
27314: LD_INT 3
27316: DOUBLE
27317: EQUAL
27318: IFTRUE 27322
27320: GO 27544
27322: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27323: LD_ADDR_VAR 0 4
27327: PUSH
27328: LD_INT 46
27330: PUSH
27331: LD_INT 47
27333: PUSH
27334: LD_INT 1
27336: PUSH
27337: LD_INT 2
27339: PUSH
27340: LD_INT 82
27342: PUSH
27343: LD_INT 83
27345: PUSH
27346: LD_INT 84
27348: PUSH
27349: LD_INT 85
27351: PUSH
27352: LD_INT 86
27354: PUSH
27355: LD_INT 11
27357: PUSH
27358: LD_INT 9
27360: PUSH
27361: LD_INT 20
27363: PUSH
27364: LD_INT 19
27366: PUSH
27367: LD_INT 21
27369: PUSH
27370: LD_INT 24
27372: PUSH
27373: LD_INT 22
27375: PUSH
27376: LD_INT 25
27378: PUSH
27379: LD_INT 28
27381: PUSH
27382: LD_INT 29
27384: PUSH
27385: LD_INT 30
27387: PUSH
27388: LD_INT 31
27390: PUSH
27391: LD_INT 37
27393: PUSH
27394: LD_INT 38
27396: PUSH
27397: LD_INT 32
27399: PUSH
27400: LD_INT 27
27402: PUSH
27403: LD_INT 33
27405: PUSH
27406: LD_INT 69
27408: PUSH
27409: LD_INT 39
27411: PUSH
27412: LD_INT 34
27414: PUSH
27415: LD_INT 40
27417: PUSH
27418: LD_INT 71
27420: PUSH
27421: LD_INT 23
27423: PUSH
27424: LD_INT 44
27426: PUSH
27427: LD_INT 48
27429: PUSH
27430: LD_INT 49
27432: PUSH
27433: LD_INT 50
27435: PUSH
27436: LD_INT 51
27438: PUSH
27439: LD_INT 52
27441: PUSH
27442: LD_INT 53
27444: PUSH
27445: LD_INT 54
27447: PUSH
27448: LD_INT 55
27450: PUSH
27451: LD_INT 56
27453: PUSH
27454: LD_INT 57
27456: PUSH
27457: LD_INT 58
27459: PUSH
27460: LD_INT 59
27462: PUSH
27463: LD_INT 63
27465: PUSH
27466: LD_INT 64
27468: PUSH
27469: LD_INT 65
27471: PUSH
27472: LD_INT 82
27474: PUSH
27475: LD_INT 83
27477: PUSH
27478: LD_INT 84
27480: PUSH
27481: LD_INT 85
27483: PUSH
27484: LD_INT 86
27486: PUSH
27487: EMPTY
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: LIST
27501: LIST
27502: LIST
27503: LIST
27504: LIST
27505: LIST
27506: LIST
27507: LIST
27508: LIST
27509: LIST
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: ST_TO_ADDR
27542: GO 27545
27544: POP
// if state > - 1 and state < 3 then
27545: LD_VAR 0 3
27549: PUSH
27550: LD_INT 1
27552: NEG
27553: GREATER
27554: PUSH
27555: LD_VAR 0 3
27559: PUSH
27560: LD_INT 3
27562: LESS
27563: AND
27564: IFFALSE 27621
// for i in result do
27566: LD_ADDR_VAR 0 5
27570: PUSH
27571: LD_VAR 0 4
27575: PUSH
27576: FOR_IN
27577: IFFALSE 27619
// if GetTech ( i , side ) <> state then
27579: LD_VAR 0 5
27583: PPUSH
27584: LD_VAR 0 1
27588: PPUSH
27589: CALL_OW 321
27593: PUSH
27594: LD_VAR 0 3
27598: NONEQUAL
27599: IFFALSE 27617
// result := result diff i ;
27601: LD_ADDR_VAR 0 4
27605: PUSH
27606: LD_VAR 0 4
27610: PUSH
27611: LD_VAR 0 5
27615: DIFF
27616: ST_TO_ADDR
27617: GO 27576
27619: POP
27620: POP
// end ;
27621: LD_VAR 0 4
27625: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27626: LD_INT 0
27628: PPUSH
27629: PPUSH
27630: PPUSH
// result := true ;
27631: LD_ADDR_VAR 0 3
27635: PUSH
27636: LD_INT 1
27638: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27639: LD_ADDR_VAR 0 5
27643: PUSH
27644: LD_VAR 0 2
27648: PPUSH
27649: CALL_OW 480
27653: ST_TO_ADDR
// if not tmp then
27654: LD_VAR 0 5
27658: NOT
27659: IFFALSE 27663
// exit ;
27661: GO 27712
// for i in tmp do
27663: LD_ADDR_VAR 0 4
27667: PUSH
27668: LD_VAR 0 5
27672: PUSH
27673: FOR_IN
27674: IFFALSE 27710
// if GetTech ( i , side ) <> state_researched then
27676: LD_VAR 0 4
27680: PPUSH
27681: LD_VAR 0 1
27685: PPUSH
27686: CALL_OW 321
27690: PUSH
27691: LD_INT 2
27693: NONEQUAL
27694: IFFALSE 27708
// begin result := false ;
27696: LD_ADDR_VAR 0 3
27700: PUSH
27701: LD_INT 0
27703: ST_TO_ADDR
// exit ;
27704: POP
27705: POP
27706: GO 27712
// end ;
27708: GO 27673
27710: POP
27711: POP
// end ;
27712: LD_VAR 0 3
27716: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27717: LD_INT 0
27719: PPUSH
27720: PPUSH
27721: PPUSH
27722: PPUSH
27723: PPUSH
27724: PPUSH
27725: PPUSH
27726: PPUSH
27727: PPUSH
27728: PPUSH
27729: PPUSH
27730: PPUSH
27731: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27732: LD_VAR 0 1
27736: NOT
27737: PUSH
27738: LD_VAR 0 1
27742: PPUSH
27743: CALL_OW 257
27747: PUSH
27748: LD_INT 9
27750: NONEQUAL
27751: OR
27752: IFFALSE 27756
// exit ;
27754: GO 28329
// side := GetSide ( unit ) ;
27756: LD_ADDR_VAR 0 9
27760: PUSH
27761: LD_VAR 0 1
27765: PPUSH
27766: CALL_OW 255
27770: ST_TO_ADDR
// tech_space := tech_spacanom ;
27771: LD_ADDR_VAR 0 12
27775: PUSH
27776: LD_INT 29
27778: ST_TO_ADDR
// tech_time := tech_taurad ;
27779: LD_ADDR_VAR 0 13
27783: PUSH
27784: LD_INT 28
27786: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27787: LD_ADDR_VAR 0 11
27791: PUSH
27792: LD_VAR 0 1
27796: PPUSH
27797: CALL_OW 310
27801: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27802: LD_VAR 0 11
27806: PPUSH
27807: CALL_OW 247
27811: PUSH
27812: LD_INT 2
27814: EQUAL
27815: IFFALSE 27819
// exit ;
27817: GO 28329
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27819: LD_ADDR_VAR 0 8
27823: PUSH
27824: LD_INT 81
27826: PUSH
27827: LD_VAR 0 9
27831: PUSH
27832: EMPTY
27833: LIST
27834: LIST
27835: PUSH
27836: LD_INT 3
27838: PUSH
27839: LD_INT 21
27841: PUSH
27842: LD_INT 3
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: PPUSH
27857: CALL_OW 69
27861: ST_TO_ADDR
// if not tmp then
27862: LD_VAR 0 8
27866: NOT
27867: IFFALSE 27871
// exit ;
27869: GO 28329
// if in_unit then
27871: LD_VAR 0 11
27875: IFFALSE 27899
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27877: LD_ADDR_VAR 0 10
27881: PUSH
27882: LD_VAR 0 8
27886: PPUSH
27887: LD_VAR 0 11
27891: PPUSH
27892: CALL_OW 74
27896: ST_TO_ADDR
27897: GO 27919
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27899: LD_ADDR_VAR 0 10
27903: PUSH
27904: LD_VAR 0 8
27908: PPUSH
27909: LD_VAR 0 1
27913: PPUSH
27914: CALL_OW 74
27918: ST_TO_ADDR
// if not enemy then
27919: LD_VAR 0 10
27923: NOT
27924: IFFALSE 27928
// exit ;
27926: GO 28329
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27928: LD_VAR 0 11
27932: PUSH
27933: LD_VAR 0 11
27937: PPUSH
27938: LD_VAR 0 10
27942: PPUSH
27943: CALL_OW 296
27947: PUSH
27948: LD_INT 13
27950: GREATER
27951: AND
27952: PUSH
27953: LD_VAR 0 1
27957: PPUSH
27958: LD_VAR 0 10
27962: PPUSH
27963: CALL_OW 296
27967: PUSH
27968: LD_INT 12
27970: GREATER
27971: OR
27972: IFFALSE 27976
// exit ;
27974: GO 28329
// missile := [ 1 ] ;
27976: LD_ADDR_VAR 0 14
27980: PUSH
27981: LD_INT 1
27983: PUSH
27984: EMPTY
27985: LIST
27986: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27987: LD_VAR 0 9
27991: PPUSH
27992: LD_VAR 0 12
27996: PPUSH
27997: CALL_OW 325
28001: IFFALSE 28030
// missile := Insert ( missile , missile + 1 , 2 ) ;
28003: LD_ADDR_VAR 0 14
28007: PUSH
28008: LD_VAR 0 14
28012: PPUSH
28013: LD_VAR 0 14
28017: PUSH
28018: LD_INT 1
28020: PLUS
28021: PPUSH
28022: LD_INT 2
28024: PPUSH
28025: CALL_OW 2
28029: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28030: LD_VAR 0 9
28034: PPUSH
28035: LD_VAR 0 13
28039: PPUSH
28040: CALL_OW 325
28044: PUSH
28045: LD_VAR 0 10
28049: PPUSH
28050: CALL_OW 255
28054: PPUSH
28055: LD_VAR 0 13
28059: PPUSH
28060: CALL_OW 325
28064: NOT
28065: AND
28066: IFFALSE 28095
// missile := Insert ( missile , missile + 1 , 3 ) ;
28068: LD_ADDR_VAR 0 14
28072: PUSH
28073: LD_VAR 0 14
28077: PPUSH
28078: LD_VAR 0 14
28082: PUSH
28083: LD_INT 1
28085: PLUS
28086: PPUSH
28087: LD_INT 3
28089: PPUSH
28090: CALL_OW 2
28094: ST_TO_ADDR
// if missile < 2 then
28095: LD_VAR 0 14
28099: PUSH
28100: LD_INT 2
28102: LESS
28103: IFFALSE 28107
// exit ;
28105: GO 28329
// x := GetX ( enemy ) ;
28107: LD_ADDR_VAR 0 4
28111: PUSH
28112: LD_VAR 0 10
28116: PPUSH
28117: CALL_OW 250
28121: ST_TO_ADDR
// y := GetY ( enemy ) ;
28122: LD_ADDR_VAR 0 5
28126: PUSH
28127: LD_VAR 0 10
28131: PPUSH
28132: CALL_OW 251
28136: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28137: LD_ADDR_VAR 0 6
28141: PUSH
28142: LD_VAR 0 4
28146: PUSH
28147: LD_INT 1
28149: NEG
28150: PPUSH
28151: LD_INT 1
28153: PPUSH
28154: CALL_OW 12
28158: PLUS
28159: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28160: LD_ADDR_VAR 0 7
28164: PUSH
28165: LD_VAR 0 5
28169: PUSH
28170: LD_INT 1
28172: NEG
28173: PPUSH
28174: LD_INT 1
28176: PPUSH
28177: CALL_OW 12
28181: PLUS
28182: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28183: LD_VAR 0 6
28187: PPUSH
28188: LD_VAR 0 7
28192: PPUSH
28193: CALL_OW 488
28197: NOT
28198: IFFALSE 28220
// begin _x := x ;
28200: LD_ADDR_VAR 0 6
28204: PUSH
28205: LD_VAR 0 4
28209: ST_TO_ADDR
// _y := y ;
28210: LD_ADDR_VAR 0 7
28214: PUSH
28215: LD_VAR 0 5
28219: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28220: LD_ADDR_VAR 0 3
28224: PUSH
28225: LD_INT 1
28227: PPUSH
28228: LD_VAR 0 14
28232: PPUSH
28233: CALL_OW 12
28237: ST_TO_ADDR
// case i of 1 :
28238: LD_VAR 0 3
28242: PUSH
28243: LD_INT 1
28245: DOUBLE
28246: EQUAL
28247: IFTRUE 28251
28249: GO 28268
28251: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28252: LD_VAR 0 1
28256: PPUSH
28257: LD_VAR 0 10
28261: PPUSH
28262: CALL_OW 115
28266: GO 28329
28268: LD_INT 2
28270: DOUBLE
28271: EQUAL
28272: IFTRUE 28276
28274: GO 28298
28276: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28277: LD_VAR 0 1
28281: PPUSH
28282: LD_VAR 0 6
28286: PPUSH
28287: LD_VAR 0 7
28291: PPUSH
28292: CALL_OW 153
28296: GO 28329
28298: LD_INT 3
28300: DOUBLE
28301: EQUAL
28302: IFTRUE 28306
28304: GO 28328
28306: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28307: LD_VAR 0 1
28311: PPUSH
28312: LD_VAR 0 6
28316: PPUSH
28317: LD_VAR 0 7
28321: PPUSH
28322: CALL_OW 154
28326: GO 28329
28328: POP
// end ;
28329: LD_VAR 0 2
28333: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28334: LD_INT 0
28336: PPUSH
28337: PPUSH
28338: PPUSH
28339: PPUSH
28340: PPUSH
28341: PPUSH
// if not unit or not building then
28342: LD_VAR 0 1
28346: NOT
28347: PUSH
28348: LD_VAR 0 2
28352: NOT
28353: OR
28354: IFFALSE 28358
// exit ;
28356: GO 28516
// x := GetX ( building ) ;
28358: LD_ADDR_VAR 0 5
28362: PUSH
28363: LD_VAR 0 2
28367: PPUSH
28368: CALL_OW 250
28372: ST_TO_ADDR
// y := GetY ( building ) ;
28373: LD_ADDR_VAR 0 6
28377: PUSH
28378: LD_VAR 0 2
28382: PPUSH
28383: CALL_OW 251
28387: ST_TO_ADDR
// for i = 0 to 5 do
28388: LD_ADDR_VAR 0 4
28392: PUSH
28393: DOUBLE
28394: LD_INT 0
28396: DEC
28397: ST_TO_ADDR
28398: LD_INT 5
28400: PUSH
28401: FOR_TO
28402: IFFALSE 28514
// begin _x := ShiftX ( x , i , 3 ) ;
28404: LD_ADDR_VAR 0 7
28408: PUSH
28409: LD_VAR 0 5
28413: PPUSH
28414: LD_VAR 0 4
28418: PPUSH
28419: LD_INT 3
28421: PPUSH
28422: CALL_OW 272
28426: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28427: LD_ADDR_VAR 0 8
28431: PUSH
28432: LD_VAR 0 6
28436: PPUSH
28437: LD_VAR 0 4
28441: PPUSH
28442: LD_INT 3
28444: PPUSH
28445: CALL_OW 273
28449: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28450: LD_VAR 0 7
28454: PPUSH
28455: LD_VAR 0 8
28459: PPUSH
28460: CALL_OW 488
28464: NOT
28465: IFFALSE 28469
// continue ;
28467: GO 28401
// if HexInfo ( _x , _y ) = 0 then
28469: LD_VAR 0 7
28473: PPUSH
28474: LD_VAR 0 8
28478: PPUSH
28479: CALL_OW 428
28483: PUSH
28484: LD_INT 0
28486: EQUAL
28487: IFFALSE 28512
// begin ComMoveXY ( unit , _x , _y ) ;
28489: LD_VAR 0 1
28493: PPUSH
28494: LD_VAR 0 7
28498: PPUSH
28499: LD_VAR 0 8
28503: PPUSH
28504: CALL_OW 111
// exit ;
28508: POP
28509: POP
28510: GO 28516
// end ; end ;
28512: GO 28401
28514: POP
28515: POP
// end ;
28516: LD_VAR 0 3
28520: RET
// export function ScanBase ( side , base_area ) ; begin
28521: LD_INT 0
28523: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28524: LD_ADDR_VAR 0 3
28528: PUSH
28529: LD_VAR 0 2
28533: PPUSH
28534: LD_INT 81
28536: PUSH
28537: LD_VAR 0 1
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: PPUSH
28546: CALL_OW 70
28550: ST_TO_ADDR
// end ;
28551: LD_VAR 0 3
28555: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28556: LD_INT 0
28558: PPUSH
28559: PPUSH
28560: PPUSH
28561: PPUSH
// result := false ;
28562: LD_ADDR_VAR 0 2
28566: PUSH
28567: LD_INT 0
28569: ST_TO_ADDR
// side := GetSide ( unit ) ;
28570: LD_ADDR_VAR 0 3
28574: PUSH
28575: LD_VAR 0 1
28579: PPUSH
28580: CALL_OW 255
28584: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28585: LD_ADDR_VAR 0 4
28589: PUSH
28590: LD_VAR 0 1
28594: PPUSH
28595: CALL_OW 248
28599: ST_TO_ADDR
// case nat of 1 :
28600: LD_VAR 0 4
28604: PUSH
28605: LD_INT 1
28607: DOUBLE
28608: EQUAL
28609: IFTRUE 28613
28611: GO 28624
28613: POP
// tech := tech_lassight ; 2 :
28614: LD_ADDR_VAR 0 5
28618: PUSH
28619: LD_INT 12
28621: ST_TO_ADDR
28622: GO 28663
28624: LD_INT 2
28626: DOUBLE
28627: EQUAL
28628: IFTRUE 28632
28630: GO 28643
28632: POP
// tech := tech_mortar ; 3 :
28633: LD_ADDR_VAR 0 5
28637: PUSH
28638: LD_INT 41
28640: ST_TO_ADDR
28641: GO 28663
28643: LD_INT 3
28645: DOUBLE
28646: EQUAL
28647: IFTRUE 28651
28649: GO 28662
28651: POP
// tech := tech_bazooka ; end ;
28652: LD_ADDR_VAR 0 5
28656: PUSH
28657: LD_INT 44
28659: ST_TO_ADDR
28660: GO 28663
28662: POP
// if Researched ( side , tech ) then
28663: LD_VAR 0 3
28667: PPUSH
28668: LD_VAR 0 5
28672: PPUSH
28673: CALL_OW 325
28677: IFFALSE 28704
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28679: LD_ADDR_VAR 0 2
28683: PUSH
28684: LD_INT 5
28686: PUSH
28687: LD_INT 8
28689: PUSH
28690: LD_INT 9
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: LIST
28697: PUSH
28698: LD_VAR 0 4
28702: ARRAY
28703: ST_TO_ADDR
// end ;
28704: LD_VAR 0 2
28708: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28709: LD_INT 0
28711: PPUSH
28712: PPUSH
28713: PPUSH
// if not mines then
28714: LD_VAR 0 2
28718: NOT
28719: IFFALSE 28723
// exit ;
28721: GO 28867
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28723: LD_ADDR_VAR 0 5
28727: PUSH
28728: LD_INT 81
28730: PUSH
28731: LD_VAR 0 1
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PUSH
28740: LD_INT 3
28742: PUSH
28743: LD_INT 21
28745: PUSH
28746: LD_INT 3
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PPUSH
28761: CALL_OW 69
28765: ST_TO_ADDR
// for i in mines do
28766: LD_ADDR_VAR 0 4
28770: PUSH
28771: LD_VAR 0 2
28775: PUSH
28776: FOR_IN
28777: IFFALSE 28865
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28779: LD_VAR 0 4
28783: PUSH
28784: LD_INT 1
28786: ARRAY
28787: PPUSH
28788: LD_VAR 0 4
28792: PUSH
28793: LD_INT 2
28795: ARRAY
28796: PPUSH
28797: CALL_OW 458
28801: NOT
28802: IFFALSE 28806
// continue ;
28804: GO 28776
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28806: LD_VAR 0 4
28810: PUSH
28811: LD_INT 1
28813: ARRAY
28814: PPUSH
28815: LD_VAR 0 4
28819: PUSH
28820: LD_INT 2
28822: ARRAY
28823: PPUSH
28824: CALL_OW 428
28828: PUSH
28829: LD_VAR 0 5
28833: IN
28834: IFFALSE 28863
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28836: LD_VAR 0 4
28840: PUSH
28841: LD_INT 1
28843: ARRAY
28844: PPUSH
28845: LD_VAR 0 4
28849: PUSH
28850: LD_INT 2
28852: ARRAY
28853: PPUSH
28854: LD_VAR 0 1
28858: PPUSH
28859: CALL_OW 456
// end ;
28863: GO 28776
28865: POP
28866: POP
// end ;
28867: LD_VAR 0 3
28871: RET
// export function Count ( array ) ; var i ; begin
28872: LD_INT 0
28874: PPUSH
28875: PPUSH
// result := 0 ;
28876: LD_ADDR_VAR 0 2
28880: PUSH
28881: LD_INT 0
28883: ST_TO_ADDR
// for i in array do
28884: LD_ADDR_VAR 0 3
28888: PUSH
28889: LD_VAR 0 1
28893: PUSH
28894: FOR_IN
28895: IFFALSE 28919
// if i then
28897: LD_VAR 0 3
28901: IFFALSE 28917
// result := result + 1 ;
28903: LD_ADDR_VAR 0 2
28907: PUSH
28908: LD_VAR 0 2
28912: PUSH
28913: LD_INT 1
28915: PLUS
28916: ST_TO_ADDR
28917: GO 28894
28919: POP
28920: POP
// end ;
28921: LD_VAR 0 2
28925: RET
// export function IsEmpty ( building ) ; begin
28926: LD_INT 0
28928: PPUSH
// if not building then
28929: LD_VAR 0 1
28933: NOT
28934: IFFALSE 28938
// exit ;
28936: GO 28981
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28938: LD_ADDR_VAR 0 2
28942: PUSH
28943: LD_VAR 0 1
28947: PUSH
28948: LD_INT 22
28950: PUSH
28951: LD_VAR 0 1
28955: PPUSH
28956: CALL_OW 255
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: PUSH
28965: LD_INT 58
28967: PUSH
28968: EMPTY
28969: LIST
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: PPUSH
28975: CALL_OW 69
28979: IN
28980: ST_TO_ADDR
// end ;
28981: LD_VAR 0 2
28985: RET
// export function IsNotFull ( building ) ; begin
28986: LD_INT 0
28988: PPUSH
// if not building then
28989: LD_VAR 0 1
28993: NOT
28994: IFFALSE 28998
// exit ;
28996: GO 29017
// result := UnitsInside ( building ) < 6 ;
28998: LD_ADDR_VAR 0 2
29002: PUSH
29003: LD_VAR 0 1
29007: PPUSH
29008: CALL_OW 313
29012: PUSH
29013: LD_INT 6
29015: LESS
29016: ST_TO_ADDR
// end ;
29017: LD_VAR 0 2
29021: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29022: LD_INT 0
29024: PPUSH
29025: PPUSH
29026: PPUSH
29027: PPUSH
// tmp := [ ] ;
29028: LD_ADDR_VAR 0 3
29032: PUSH
29033: EMPTY
29034: ST_TO_ADDR
// list := [ ] ;
29035: LD_ADDR_VAR 0 5
29039: PUSH
29040: EMPTY
29041: ST_TO_ADDR
// for i = 16 to 25 do
29042: LD_ADDR_VAR 0 4
29046: PUSH
29047: DOUBLE
29048: LD_INT 16
29050: DEC
29051: ST_TO_ADDR
29052: LD_INT 25
29054: PUSH
29055: FOR_TO
29056: IFFALSE 29129
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29058: LD_ADDR_VAR 0 3
29062: PUSH
29063: LD_VAR 0 3
29067: PUSH
29068: LD_INT 22
29070: PUSH
29071: LD_VAR 0 1
29075: PPUSH
29076: CALL_OW 255
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PUSH
29085: LD_INT 91
29087: PUSH
29088: LD_VAR 0 1
29092: PUSH
29093: LD_INT 6
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: LIST
29100: PUSH
29101: LD_INT 30
29103: PUSH
29104: LD_VAR 0 4
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: LIST
29117: PUSH
29118: EMPTY
29119: LIST
29120: PPUSH
29121: CALL_OW 69
29125: ADD
29126: ST_TO_ADDR
29127: GO 29055
29129: POP
29130: POP
// for i = 1 to tmp do
29131: LD_ADDR_VAR 0 4
29135: PUSH
29136: DOUBLE
29137: LD_INT 1
29139: DEC
29140: ST_TO_ADDR
29141: LD_VAR 0 3
29145: PUSH
29146: FOR_TO
29147: IFFALSE 29235
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29149: LD_ADDR_VAR 0 5
29153: PUSH
29154: LD_VAR 0 5
29158: PUSH
29159: LD_VAR 0 3
29163: PUSH
29164: LD_VAR 0 4
29168: ARRAY
29169: PPUSH
29170: CALL_OW 266
29174: PUSH
29175: LD_VAR 0 3
29179: PUSH
29180: LD_VAR 0 4
29184: ARRAY
29185: PPUSH
29186: CALL_OW 250
29190: PUSH
29191: LD_VAR 0 3
29195: PUSH
29196: LD_VAR 0 4
29200: ARRAY
29201: PPUSH
29202: CALL_OW 251
29206: PUSH
29207: LD_VAR 0 3
29211: PUSH
29212: LD_VAR 0 4
29216: ARRAY
29217: PPUSH
29218: CALL_OW 254
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: PUSH
29229: EMPTY
29230: LIST
29231: ADD
29232: ST_TO_ADDR
29233: GO 29146
29235: POP
29236: POP
// result := list ;
29237: LD_ADDR_VAR 0 2
29241: PUSH
29242: LD_VAR 0 5
29246: ST_TO_ADDR
// end ;
29247: LD_VAR 0 2
29251: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29252: LD_INT 0
29254: PPUSH
29255: PPUSH
29256: PPUSH
29257: PPUSH
29258: PPUSH
29259: PPUSH
29260: PPUSH
// if not factory then
29261: LD_VAR 0 1
29265: NOT
29266: IFFALSE 29270
// exit ;
29268: GO 29863
// if control = control_apeman then
29270: LD_VAR 0 4
29274: PUSH
29275: LD_INT 5
29277: EQUAL
29278: IFFALSE 29387
// begin tmp := UnitsInside ( factory ) ;
29280: LD_ADDR_VAR 0 8
29284: PUSH
29285: LD_VAR 0 1
29289: PPUSH
29290: CALL_OW 313
29294: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29295: LD_VAR 0 8
29299: PPUSH
29300: LD_INT 25
29302: PUSH
29303: LD_INT 12
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PPUSH
29310: CALL_OW 72
29314: NOT
29315: IFFALSE 29325
// control := control_manual ;
29317: LD_ADDR_VAR 0 4
29321: PUSH
29322: LD_INT 1
29324: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29325: LD_ADDR_VAR 0 8
29329: PUSH
29330: LD_VAR 0 1
29334: PPUSH
29335: CALL 29022 0 1
29339: ST_TO_ADDR
// if tmp then
29340: LD_VAR 0 8
29344: IFFALSE 29387
// begin for i in tmp do
29346: LD_ADDR_VAR 0 7
29350: PUSH
29351: LD_VAR 0 8
29355: PUSH
29356: FOR_IN
29357: IFFALSE 29385
// if i [ 1 ] = b_ext_radio then
29359: LD_VAR 0 7
29363: PUSH
29364: LD_INT 1
29366: ARRAY
29367: PUSH
29368: LD_INT 22
29370: EQUAL
29371: IFFALSE 29383
// begin control := control_remote ;
29373: LD_ADDR_VAR 0 4
29377: PUSH
29378: LD_INT 2
29380: ST_TO_ADDR
// break ;
29381: GO 29385
// end ;
29383: GO 29356
29385: POP
29386: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29387: LD_VAR 0 1
29391: PPUSH
29392: LD_VAR 0 2
29396: PPUSH
29397: LD_VAR 0 3
29401: PPUSH
29402: LD_VAR 0 4
29406: PPUSH
29407: LD_VAR 0 5
29411: PPUSH
29412: CALL_OW 448
29416: IFFALSE 29451
// begin result := [ chassis , engine , control , weapon ] ;
29418: LD_ADDR_VAR 0 6
29422: PUSH
29423: LD_VAR 0 2
29427: PUSH
29428: LD_VAR 0 3
29432: PUSH
29433: LD_VAR 0 4
29437: PUSH
29438: LD_VAR 0 5
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: LIST
29447: LIST
29448: ST_TO_ADDR
// exit ;
29449: GO 29863
// end ; _chassis := AvailableChassisList ( factory ) ;
29451: LD_ADDR_VAR 0 9
29455: PUSH
29456: LD_VAR 0 1
29460: PPUSH
29461: CALL_OW 475
29465: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29466: LD_ADDR_VAR 0 11
29470: PUSH
29471: LD_VAR 0 1
29475: PPUSH
29476: CALL_OW 476
29480: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29481: LD_ADDR_VAR 0 12
29485: PUSH
29486: LD_VAR 0 1
29490: PPUSH
29491: CALL_OW 477
29495: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29496: LD_ADDR_VAR 0 10
29500: PUSH
29501: LD_VAR 0 1
29505: PPUSH
29506: CALL_OW 478
29510: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29511: LD_VAR 0 9
29515: NOT
29516: PUSH
29517: LD_VAR 0 11
29521: NOT
29522: OR
29523: PUSH
29524: LD_VAR 0 12
29528: NOT
29529: OR
29530: PUSH
29531: LD_VAR 0 10
29535: NOT
29536: OR
29537: IFFALSE 29572
// begin result := [ chassis , engine , control , weapon ] ;
29539: LD_ADDR_VAR 0 6
29543: PUSH
29544: LD_VAR 0 2
29548: PUSH
29549: LD_VAR 0 3
29553: PUSH
29554: LD_VAR 0 4
29558: PUSH
29559: LD_VAR 0 5
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: ST_TO_ADDR
// exit ;
29570: GO 29863
// end ; if not chassis in _chassis then
29572: LD_VAR 0 2
29576: PUSH
29577: LD_VAR 0 9
29581: IN
29582: NOT
29583: IFFALSE 29609
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29585: LD_ADDR_VAR 0 2
29589: PUSH
29590: LD_VAR 0 9
29594: PUSH
29595: LD_INT 1
29597: PPUSH
29598: LD_VAR 0 9
29602: PPUSH
29603: CALL_OW 12
29607: ARRAY
29608: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29609: LD_VAR 0 2
29613: PPUSH
29614: LD_VAR 0 3
29618: PPUSH
29619: CALL 29868 0 2
29623: NOT
29624: IFFALSE 29683
// repeat engine := _engine [ 1 ] ;
29626: LD_ADDR_VAR 0 3
29630: PUSH
29631: LD_VAR 0 11
29635: PUSH
29636: LD_INT 1
29638: ARRAY
29639: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29640: LD_ADDR_VAR 0 11
29644: PUSH
29645: LD_VAR 0 11
29649: PPUSH
29650: LD_INT 1
29652: PPUSH
29653: CALL_OW 3
29657: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29658: LD_VAR 0 2
29662: PPUSH
29663: LD_VAR 0 3
29667: PPUSH
29668: CALL 29868 0 2
29672: PUSH
29673: LD_VAR 0 11
29677: PUSH
29678: EMPTY
29679: EQUAL
29680: OR
29681: IFFALSE 29626
// if not control in _control then
29683: LD_VAR 0 4
29687: PUSH
29688: LD_VAR 0 12
29692: IN
29693: NOT
29694: IFFALSE 29720
// control := _control [ rand ( 1 , _control ) ] ;
29696: LD_ADDR_VAR 0 4
29700: PUSH
29701: LD_VAR 0 12
29705: PUSH
29706: LD_INT 1
29708: PPUSH
29709: LD_VAR 0 12
29713: PPUSH
29714: CALL_OW 12
29718: ARRAY
29719: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29720: LD_VAR 0 2
29724: PPUSH
29725: LD_VAR 0 5
29729: PPUSH
29730: CALL 30088 0 2
29734: NOT
29735: IFFALSE 29794
// repeat weapon := _weapon [ 1 ] ;
29737: LD_ADDR_VAR 0 5
29741: PUSH
29742: LD_VAR 0 10
29746: PUSH
29747: LD_INT 1
29749: ARRAY
29750: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29751: LD_ADDR_VAR 0 10
29755: PUSH
29756: LD_VAR 0 10
29760: PPUSH
29761: LD_INT 1
29763: PPUSH
29764: CALL_OW 3
29768: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29769: LD_VAR 0 2
29773: PPUSH
29774: LD_VAR 0 5
29778: PPUSH
29779: CALL 30088 0 2
29783: PUSH
29784: LD_VAR 0 10
29788: PUSH
29789: EMPTY
29790: EQUAL
29791: OR
29792: IFFALSE 29737
// result := [ ] ;
29794: LD_ADDR_VAR 0 6
29798: PUSH
29799: EMPTY
29800: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29801: LD_VAR 0 1
29805: PPUSH
29806: LD_VAR 0 2
29810: PPUSH
29811: LD_VAR 0 3
29815: PPUSH
29816: LD_VAR 0 4
29820: PPUSH
29821: LD_VAR 0 5
29825: PPUSH
29826: CALL_OW 448
29830: IFFALSE 29863
// result := [ chassis , engine , control , weapon ] ;
29832: LD_ADDR_VAR 0 6
29836: PUSH
29837: LD_VAR 0 2
29841: PUSH
29842: LD_VAR 0 3
29846: PUSH
29847: LD_VAR 0 4
29851: PUSH
29852: LD_VAR 0 5
29856: PUSH
29857: EMPTY
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: ST_TO_ADDR
// end ;
29863: LD_VAR 0 6
29867: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29868: LD_INT 0
29870: PPUSH
// if not chassis or not engine then
29871: LD_VAR 0 1
29875: NOT
29876: PUSH
29877: LD_VAR 0 2
29881: NOT
29882: OR
29883: IFFALSE 29887
// exit ;
29885: GO 30083
// case engine of engine_solar :
29887: LD_VAR 0 2
29891: PUSH
29892: LD_INT 2
29894: DOUBLE
29895: EQUAL
29896: IFTRUE 29900
29898: GO 29938
29900: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29901: LD_ADDR_VAR 0 3
29905: PUSH
29906: LD_INT 11
29908: PUSH
29909: LD_INT 12
29911: PUSH
29912: LD_INT 13
29914: PUSH
29915: LD_INT 14
29917: PUSH
29918: LD_INT 1
29920: PUSH
29921: LD_INT 2
29923: PUSH
29924: LD_INT 3
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: LIST
29931: LIST
29932: LIST
29933: LIST
29934: LIST
29935: ST_TO_ADDR
29936: GO 30067
29938: LD_INT 1
29940: DOUBLE
29941: EQUAL
29942: IFTRUE 29946
29944: GO 30008
29946: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29947: LD_ADDR_VAR 0 3
29951: PUSH
29952: LD_INT 11
29954: PUSH
29955: LD_INT 12
29957: PUSH
29958: LD_INT 13
29960: PUSH
29961: LD_INT 14
29963: PUSH
29964: LD_INT 1
29966: PUSH
29967: LD_INT 2
29969: PUSH
29970: LD_INT 3
29972: PUSH
29973: LD_INT 4
29975: PUSH
29976: LD_INT 5
29978: PUSH
29979: LD_INT 21
29981: PUSH
29982: LD_INT 23
29984: PUSH
29985: LD_INT 22
29987: PUSH
29988: LD_INT 24
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: ST_TO_ADDR
30006: GO 30067
30008: LD_INT 3
30010: DOUBLE
30011: EQUAL
30012: IFTRUE 30016
30014: GO 30066
30016: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30017: LD_ADDR_VAR 0 3
30021: PUSH
30022: LD_INT 13
30024: PUSH
30025: LD_INT 14
30027: PUSH
30028: LD_INT 2
30030: PUSH
30031: LD_INT 3
30033: PUSH
30034: LD_INT 4
30036: PUSH
30037: LD_INT 5
30039: PUSH
30040: LD_INT 21
30042: PUSH
30043: LD_INT 22
30045: PUSH
30046: LD_INT 23
30048: PUSH
30049: LD_INT 24
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: LIST
30062: LIST
30063: ST_TO_ADDR
30064: GO 30067
30066: POP
// result := ( chassis in result ) ;
30067: LD_ADDR_VAR 0 3
30071: PUSH
30072: LD_VAR 0 1
30076: PUSH
30077: LD_VAR 0 3
30081: IN
30082: ST_TO_ADDR
// end ;
30083: LD_VAR 0 3
30087: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30088: LD_INT 0
30090: PPUSH
// if not chassis or not weapon then
30091: LD_VAR 0 1
30095: NOT
30096: PUSH
30097: LD_VAR 0 2
30101: NOT
30102: OR
30103: IFFALSE 30107
// exit ;
30105: GO 31133
// case weapon of us_machine_gun :
30107: LD_VAR 0 2
30111: PUSH
30112: LD_INT 2
30114: DOUBLE
30115: EQUAL
30116: IFTRUE 30120
30118: GO 30150
30120: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30121: LD_ADDR_VAR 0 3
30125: PUSH
30126: LD_INT 1
30128: PUSH
30129: LD_INT 2
30131: PUSH
30132: LD_INT 3
30134: PUSH
30135: LD_INT 4
30137: PUSH
30138: LD_INT 5
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: LIST
30145: LIST
30146: LIST
30147: ST_TO_ADDR
30148: GO 31117
30150: LD_INT 3
30152: DOUBLE
30153: EQUAL
30154: IFTRUE 30158
30156: GO 30188
30158: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30159: LD_ADDR_VAR 0 3
30163: PUSH
30164: LD_INT 1
30166: PUSH
30167: LD_INT 2
30169: PUSH
30170: LD_INT 3
30172: PUSH
30173: LD_INT 4
30175: PUSH
30176: LD_INT 5
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: ST_TO_ADDR
30186: GO 31117
30188: LD_INT 11
30190: DOUBLE
30191: EQUAL
30192: IFTRUE 30196
30194: GO 30226
30196: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30197: LD_ADDR_VAR 0 3
30201: PUSH
30202: LD_INT 1
30204: PUSH
30205: LD_INT 2
30207: PUSH
30208: LD_INT 3
30210: PUSH
30211: LD_INT 4
30213: PUSH
30214: LD_INT 5
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: ST_TO_ADDR
30224: GO 31117
30226: LD_INT 4
30228: DOUBLE
30229: EQUAL
30230: IFTRUE 30234
30232: GO 30260
30234: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30235: LD_ADDR_VAR 0 3
30239: PUSH
30240: LD_INT 2
30242: PUSH
30243: LD_INT 3
30245: PUSH
30246: LD_INT 4
30248: PUSH
30249: LD_INT 5
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: LIST
30256: LIST
30257: ST_TO_ADDR
30258: GO 31117
30260: LD_INT 5
30262: DOUBLE
30263: EQUAL
30264: IFTRUE 30268
30266: GO 30294
30268: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30269: LD_ADDR_VAR 0 3
30273: PUSH
30274: LD_INT 2
30276: PUSH
30277: LD_INT 3
30279: PUSH
30280: LD_INT 4
30282: PUSH
30283: LD_INT 5
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: ST_TO_ADDR
30292: GO 31117
30294: LD_INT 9
30296: DOUBLE
30297: EQUAL
30298: IFTRUE 30302
30300: GO 30328
30302: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30303: LD_ADDR_VAR 0 3
30307: PUSH
30308: LD_INT 2
30310: PUSH
30311: LD_INT 3
30313: PUSH
30314: LD_INT 4
30316: PUSH
30317: LD_INT 5
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: ST_TO_ADDR
30326: GO 31117
30328: LD_INT 7
30330: DOUBLE
30331: EQUAL
30332: IFTRUE 30336
30334: GO 30362
30336: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30337: LD_ADDR_VAR 0 3
30341: PUSH
30342: LD_INT 2
30344: PUSH
30345: LD_INT 3
30347: PUSH
30348: LD_INT 4
30350: PUSH
30351: LD_INT 5
30353: PUSH
30354: EMPTY
30355: LIST
30356: LIST
30357: LIST
30358: LIST
30359: ST_TO_ADDR
30360: GO 31117
30362: LD_INT 12
30364: DOUBLE
30365: EQUAL
30366: IFTRUE 30370
30368: GO 30396
30370: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30371: LD_ADDR_VAR 0 3
30375: PUSH
30376: LD_INT 2
30378: PUSH
30379: LD_INT 3
30381: PUSH
30382: LD_INT 4
30384: PUSH
30385: LD_INT 5
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: LIST
30392: LIST
30393: ST_TO_ADDR
30394: GO 31117
30396: LD_INT 13
30398: DOUBLE
30399: EQUAL
30400: IFTRUE 30404
30402: GO 30430
30404: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30405: LD_ADDR_VAR 0 3
30409: PUSH
30410: LD_INT 2
30412: PUSH
30413: LD_INT 3
30415: PUSH
30416: LD_INT 4
30418: PUSH
30419: LD_INT 5
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: LIST
30426: LIST
30427: ST_TO_ADDR
30428: GO 31117
30430: LD_INT 14
30432: DOUBLE
30433: EQUAL
30434: IFTRUE 30438
30436: GO 30456
30438: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30439: LD_ADDR_VAR 0 3
30443: PUSH
30444: LD_INT 4
30446: PUSH
30447: LD_INT 5
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: ST_TO_ADDR
30454: GO 31117
30456: LD_INT 6
30458: DOUBLE
30459: EQUAL
30460: IFTRUE 30464
30462: GO 30482
30464: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30465: LD_ADDR_VAR 0 3
30469: PUSH
30470: LD_INT 4
30472: PUSH
30473: LD_INT 5
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: ST_TO_ADDR
30480: GO 31117
30482: LD_INT 10
30484: DOUBLE
30485: EQUAL
30486: IFTRUE 30490
30488: GO 30508
30490: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30491: LD_ADDR_VAR 0 3
30495: PUSH
30496: LD_INT 4
30498: PUSH
30499: LD_INT 5
30501: PUSH
30502: EMPTY
30503: LIST
30504: LIST
30505: ST_TO_ADDR
30506: GO 31117
30508: LD_INT 22
30510: DOUBLE
30511: EQUAL
30512: IFTRUE 30516
30514: GO 30542
30516: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30517: LD_ADDR_VAR 0 3
30521: PUSH
30522: LD_INT 11
30524: PUSH
30525: LD_INT 12
30527: PUSH
30528: LD_INT 13
30530: PUSH
30531: LD_INT 14
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: ST_TO_ADDR
30540: GO 31117
30542: LD_INT 23
30544: DOUBLE
30545: EQUAL
30546: IFTRUE 30550
30548: GO 30576
30550: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30551: LD_ADDR_VAR 0 3
30555: PUSH
30556: LD_INT 11
30558: PUSH
30559: LD_INT 12
30561: PUSH
30562: LD_INT 13
30564: PUSH
30565: LD_INT 14
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: ST_TO_ADDR
30574: GO 31117
30576: LD_INT 24
30578: DOUBLE
30579: EQUAL
30580: IFTRUE 30584
30582: GO 30610
30584: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30585: LD_ADDR_VAR 0 3
30589: PUSH
30590: LD_INT 11
30592: PUSH
30593: LD_INT 12
30595: PUSH
30596: LD_INT 13
30598: PUSH
30599: LD_INT 14
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: LIST
30606: LIST
30607: ST_TO_ADDR
30608: GO 31117
30610: LD_INT 30
30612: DOUBLE
30613: EQUAL
30614: IFTRUE 30618
30616: GO 30644
30618: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30619: LD_ADDR_VAR 0 3
30623: PUSH
30624: LD_INT 11
30626: PUSH
30627: LD_INT 12
30629: PUSH
30630: LD_INT 13
30632: PUSH
30633: LD_INT 14
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: ST_TO_ADDR
30642: GO 31117
30644: LD_INT 25
30646: DOUBLE
30647: EQUAL
30648: IFTRUE 30652
30650: GO 30670
30652: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30653: LD_ADDR_VAR 0 3
30657: PUSH
30658: LD_INT 13
30660: PUSH
30661: LD_INT 14
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: ST_TO_ADDR
30668: GO 31117
30670: LD_INT 27
30672: DOUBLE
30673: EQUAL
30674: IFTRUE 30678
30676: GO 30696
30678: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30679: LD_ADDR_VAR 0 3
30683: PUSH
30684: LD_INT 13
30686: PUSH
30687: LD_INT 14
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: ST_TO_ADDR
30694: GO 31117
30696: LD_INT 28
30698: DOUBLE
30699: EQUAL
30700: IFTRUE 30704
30702: GO 30722
30704: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30705: LD_ADDR_VAR 0 3
30709: PUSH
30710: LD_INT 13
30712: PUSH
30713: LD_INT 14
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: ST_TO_ADDR
30720: GO 31117
30722: LD_INT 29
30724: DOUBLE
30725: EQUAL
30726: IFTRUE 30730
30728: GO 30748
30730: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30731: LD_ADDR_VAR 0 3
30735: PUSH
30736: LD_INT 13
30738: PUSH
30739: LD_INT 14
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: ST_TO_ADDR
30746: GO 31117
30748: LD_INT 31
30750: DOUBLE
30751: EQUAL
30752: IFTRUE 30756
30754: GO 30774
30756: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30757: LD_ADDR_VAR 0 3
30761: PUSH
30762: LD_INT 13
30764: PUSH
30765: LD_INT 14
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: ST_TO_ADDR
30772: GO 31117
30774: LD_INT 26
30776: DOUBLE
30777: EQUAL
30778: IFTRUE 30782
30780: GO 30800
30782: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30783: LD_ADDR_VAR 0 3
30787: PUSH
30788: LD_INT 13
30790: PUSH
30791: LD_INT 14
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: ST_TO_ADDR
30798: GO 31117
30800: LD_INT 42
30802: DOUBLE
30803: EQUAL
30804: IFTRUE 30808
30806: GO 30834
30808: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30809: LD_ADDR_VAR 0 3
30813: PUSH
30814: LD_INT 21
30816: PUSH
30817: LD_INT 22
30819: PUSH
30820: LD_INT 23
30822: PUSH
30823: LD_INT 24
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: ST_TO_ADDR
30832: GO 31117
30834: LD_INT 43
30836: DOUBLE
30837: EQUAL
30838: IFTRUE 30842
30840: GO 30868
30842: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30843: LD_ADDR_VAR 0 3
30847: PUSH
30848: LD_INT 21
30850: PUSH
30851: LD_INT 22
30853: PUSH
30854: LD_INT 23
30856: PUSH
30857: LD_INT 24
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: LIST
30864: LIST
30865: ST_TO_ADDR
30866: GO 31117
30868: LD_INT 44
30870: DOUBLE
30871: EQUAL
30872: IFTRUE 30876
30874: GO 30902
30876: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30877: LD_ADDR_VAR 0 3
30881: PUSH
30882: LD_INT 21
30884: PUSH
30885: LD_INT 22
30887: PUSH
30888: LD_INT 23
30890: PUSH
30891: LD_INT 24
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: LIST
30898: LIST
30899: ST_TO_ADDR
30900: GO 31117
30902: LD_INT 45
30904: DOUBLE
30905: EQUAL
30906: IFTRUE 30910
30908: GO 30936
30910: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30911: LD_ADDR_VAR 0 3
30915: PUSH
30916: LD_INT 21
30918: PUSH
30919: LD_INT 22
30921: PUSH
30922: LD_INT 23
30924: PUSH
30925: LD_INT 24
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: ST_TO_ADDR
30934: GO 31117
30936: LD_INT 49
30938: DOUBLE
30939: EQUAL
30940: IFTRUE 30944
30942: GO 30970
30944: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30945: LD_ADDR_VAR 0 3
30949: PUSH
30950: LD_INT 21
30952: PUSH
30953: LD_INT 22
30955: PUSH
30956: LD_INT 23
30958: PUSH
30959: LD_INT 24
30961: PUSH
30962: EMPTY
30963: LIST
30964: LIST
30965: LIST
30966: LIST
30967: ST_TO_ADDR
30968: GO 31117
30970: LD_INT 51
30972: DOUBLE
30973: EQUAL
30974: IFTRUE 30978
30976: GO 31004
30978: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30979: LD_ADDR_VAR 0 3
30983: PUSH
30984: LD_INT 21
30986: PUSH
30987: LD_INT 22
30989: PUSH
30990: LD_INT 23
30992: PUSH
30993: LD_INT 24
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: LIST
31000: LIST
31001: ST_TO_ADDR
31002: GO 31117
31004: LD_INT 52
31006: DOUBLE
31007: EQUAL
31008: IFTRUE 31012
31010: GO 31038
31012: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31013: LD_ADDR_VAR 0 3
31017: PUSH
31018: LD_INT 21
31020: PUSH
31021: LD_INT 22
31023: PUSH
31024: LD_INT 23
31026: PUSH
31027: LD_INT 24
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: ST_TO_ADDR
31036: GO 31117
31038: LD_INT 53
31040: DOUBLE
31041: EQUAL
31042: IFTRUE 31046
31044: GO 31064
31046: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31047: LD_ADDR_VAR 0 3
31051: PUSH
31052: LD_INT 23
31054: PUSH
31055: LD_INT 24
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: ST_TO_ADDR
31062: GO 31117
31064: LD_INT 46
31066: DOUBLE
31067: EQUAL
31068: IFTRUE 31072
31070: GO 31090
31072: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31073: LD_ADDR_VAR 0 3
31077: PUSH
31078: LD_INT 23
31080: PUSH
31081: LD_INT 24
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: ST_TO_ADDR
31088: GO 31117
31090: LD_INT 47
31092: DOUBLE
31093: EQUAL
31094: IFTRUE 31098
31096: GO 31116
31098: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31099: LD_ADDR_VAR 0 3
31103: PUSH
31104: LD_INT 23
31106: PUSH
31107: LD_INT 24
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: ST_TO_ADDR
31114: GO 31117
31116: POP
// result := ( chassis in result ) ;
31117: LD_ADDR_VAR 0 3
31121: PUSH
31122: LD_VAR 0 1
31126: PUSH
31127: LD_VAR 0 3
31131: IN
31132: ST_TO_ADDR
// end ;
31133: LD_VAR 0 3
31137: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31138: LD_INT 0
31140: PPUSH
31141: PPUSH
31142: PPUSH
31143: PPUSH
31144: PPUSH
31145: PPUSH
31146: PPUSH
// result := array ;
31147: LD_ADDR_VAR 0 5
31151: PUSH
31152: LD_VAR 0 1
31156: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31157: LD_VAR 0 1
31161: NOT
31162: PUSH
31163: LD_VAR 0 2
31167: NOT
31168: OR
31169: PUSH
31170: LD_VAR 0 3
31174: NOT
31175: OR
31176: PUSH
31177: LD_VAR 0 2
31181: PUSH
31182: LD_VAR 0 1
31186: GREATER
31187: OR
31188: PUSH
31189: LD_VAR 0 3
31193: PUSH
31194: LD_VAR 0 1
31198: GREATER
31199: OR
31200: IFFALSE 31204
// exit ;
31202: GO 31500
// if direction then
31204: LD_VAR 0 4
31208: IFFALSE 31272
// begin d := 1 ;
31210: LD_ADDR_VAR 0 9
31214: PUSH
31215: LD_INT 1
31217: ST_TO_ADDR
// if i_from > i_to then
31218: LD_VAR 0 2
31222: PUSH
31223: LD_VAR 0 3
31227: GREATER
31228: IFFALSE 31254
// length := ( array - i_from ) + i_to else
31230: LD_ADDR_VAR 0 11
31234: PUSH
31235: LD_VAR 0 1
31239: PUSH
31240: LD_VAR 0 2
31244: MINUS
31245: PUSH
31246: LD_VAR 0 3
31250: PLUS
31251: ST_TO_ADDR
31252: GO 31270
// length := i_to - i_from ;
31254: LD_ADDR_VAR 0 11
31258: PUSH
31259: LD_VAR 0 3
31263: PUSH
31264: LD_VAR 0 2
31268: MINUS
31269: ST_TO_ADDR
// end else
31270: GO 31333
// begin d := - 1 ;
31272: LD_ADDR_VAR 0 9
31276: PUSH
31277: LD_INT 1
31279: NEG
31280: ST_TO_ADDR
// if i_from > i_to then
31281: LD_VAR 0 2
31285: PUSH
31286: LD_VAR 0 3
31290: GREATER
31291: IFFALSE 31311
// length := i_from - i_to else
31293: LD_ADDR_VAR 0 11
31297: PUSH
31298: LD_VAR 0 2
31302: PUSH
31303: LD_VAR 0 3
31307: MINUS
31308: ST_TO_ADDR
31309: GO 31333
// length := ( array - i_to ) + i_from ;
31311: LD_ADDR_VAR 0 11
31315: PUSH
31316: LD_VAR 0 1
31320: PUSH
31321: LD_VAR 0 3
31325: MINUS
31326: PUSH
31327: LD_VAR 0 2
31331: PLUS
31332: ST_TO_ADDR
// end ; if not length then
31333: LD_VAR 0 11
31337: NOT
31338: IFFALSE 31342
// exit ;
31340: GO 31500
// tmp := array ;
31342: LD_ADDR_VAR 0 10
31346: PUSH
31347: LD_VAR 0 1
31351: ST_TO_ADDR
// for i = 1 to length do
31352: LD_ADDR_VAR 0 6
31356: PUSH
31357: DOUBLE
31358: LD_INT 1
31360: DEC
31361: ST_TO_ADDR
31362: LD_VAR 0 11
31366: PUSH
31367: FOR_TO
31368: IFFALSE 31488
// begin for j = 1 to array do
31370: LD_ADDR_VAR 0 7
31374: PUSH
31375: DOUBLE
31376: LD_INT 1
31378: DEC
31379: ST_TO_ADDR
31380: LD_VAR 0 1
31384: PUSH
31385: FOR_TO
31386: IFFALSE 31474
// begin k := j + d ;
31388: LD_ADDR_VAR 0 8
31392: PUSH
31393: LD_VAR 0 7
31397: PUSH
31398: LD_VAR 0 9
31402: PLUS
31403: ST_TO_ADDR
// if k > array then
31404: LD_VAR 0 8
31408: PUSH
31409: LD_VAR 0 1
31413: GREATER
31414: IFFALSE 31424
// k := 1 ;
31416: LD_ADDR_VAR 0 8
31420: PUSH
31421: LD_INT 1
31423: ST_TO_ADDR
// if not k then
31424: LD_VAR 0 8
31428: NOT
31429: IFFALSE 31441
// k := array ;
31431: LD_ADDR_VAR 0 8
31435: PUSH
31436: LD_VAR 0 1
31440: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31441: LD_ADDR_VAR 0 10
31445: PUSH
31446: LD_VAR 0 10
31450: PPUSH
31451: LD_VAR 0 8
31455: PPUSH
31456: LD_VAR 0 1
31460: PUSH
31461: LD_VAR 0 7
31465: ARRAY
31466: PPUSH
31467: CALL_OW 1
31471: ST_TO_ADDR
// end ;
31472: GO 31385
31474: POP
31475: POP
// array := tmp ;
31476: LD_ADDR_VAR 0 1
31480: PUSH
31481: LD_VAR 0 10
31485: ST_TO_ADDR
// end ;
31486: GO 31367
31488: POP
31489: POP
// result := array ;
31490: LD_ADDR_VAR 0 5
31494: PUSH
31495: LD_VAR 0 1
31499: ST_TO_ADDR
// end ;
31500: LD_VAR 0 5
31504: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31505: LD_INT 0
31507: PPUSH
31508: PPUSH
// result := 0 ;
31509: LD_ADDR_VAR 0 3
31513: PUSH
31514: LD_INT 0
31516: ST_TO_ADDR
// if not array or not value in array then
31517: LD_VAR 0 1
31521: NOT
31522: PUSH
31523: LD_VAR 0 2
31527: PUSH
31528: LD_VAR 0 1
31532: IN
31533: NOT
31534: OR
31535: IFFALSE 31539
// exit ;
31537: GO 31593
// for i = 1 to array do
31539: LD_ADDR_VAR 0 4
31543: PUSH
31544: DOUBLE
31545: LD_INT 1
31547: DEC
31548: ST_TO_ADDR
31549: LD_VAR 0 1
31553: PUSH
31554: FOR_TO
31555: IFFALSE 31591
// if value = array [ i ] then
31557: LD_VAR 0 2
31561: PUSH
31562: LD_VAR 0 1
31566: PUSH
31567: LD_VAR 0 4
31571: ARRAY
31572: EQUAL
31573: IFFALSE 31589
// begin result := i ;
31575: LD_ADDR_VAR 0 3
31579: PUSH
31580: LD_VAR 0 4
31584: ST_TO_ADDR
// exit ;
31585: POP
31586: POP
31587: GO 31593
// end ;
31589: GO 31554
31591: POP
31592: POP
// end ;
31593: LD_VAR 0 3
31597: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31598: LD_INT 0
31600: PPUSH
// vc_chassis := chassis ;
31601: LD_ADDR_OWVAR 37
31605: PUSH
31606: LD_VAR 0 1
31610: ST_TO_ADDR
// vc_engine := engine ;
31611: LD_ADDR_OWVAR 39
31615: PUSH
31616: LD_VAR 0 2
31620: ST_TO_ADDR
// vc_control := control ;
31621: LD_ADDR_OWVAR 38
31625: PUSH
31626: LD_VAR 0 3
31630: ST_TO_ADDR
// vc_weapon := weapon ;
31631: LD_ADDR_OWVAR 40
31635: PUSH
31636: LD_VAR 0 4
31640: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31641: LD_ADDR_OWVAR 41
31645: PUSH
31646: LD_VAR 0 5
31650: ST_TO_ADDR
// end ;
31651: LD_VAR 0 6
31655: RET
// export function WantPlant ( unit ) ; var task ; begin
31656: LD_INT 0
31658: PPUSH
31659: PPUSH
// result := false ;
31660: LD_ADDR_VAR 0 2
31664: PUSH
31665: LD_INT 0
31667: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31668: LD_ADDR_VAR 0 3
31672: PUSH
31673: LD_VAR 0 1
31677: PPUSH
31678: CALL_OW 437
31682: ST_TO_ADDR
// if task then
31683: LD_VAR 0 3
31687: IFFALSE 31715
// if task [ 1 ] [ 1 ] = p then
31689: LD_VAR 0 3
31693: PUSH
31694: LD_INT 1
31696: ARRAY
31697: PUSH
31698: LD_INT 1
31700: ARRAY
31701: PUSH
31702: LD_STRING p
31704: EQUAL
31705: IFFALSE 31715
// result := true ;
31707: LD_ADDR_VAR 0 2
31711: PUSH
31712: LD_INT 1
31714: ST_TO_ADDR
// end ;
31715: LD_VAR 0 2
31719: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31720: LD_INT 0
31722: PPUSH
31723: PPUSH
31724: PPUSH
31725: PPUSH
// if pos < 1 then
31726: LD_VAR 0 2
31730: PUSH
31731: LD_INT 1
31733: LESS
31734: IFFALSE 31738
// exit ;
31736: GO 32041
// if pos = 1 then
31738: LD_VAR 0 2
31742: PUSH
31743: LD_INT 1
31745: EQUAL
31746: IFFALSE 31779
// result := Replace ( arr , pos [ 1 ] , value ) else
31748: LD_ADDR_VAR 0 4
31752: PUSH
31753: LD_VAR 0 1
31757: PPUSH
31758: LD_VAR 0 2
31762: PUSH
31763: LD_INT 1
31765: ARRAY
31766: PPUSH
31767: LD_VAR 0 3
31771: PPUSH
31772: CALL_OW 1
31776: ST_TO_ADDR
31777: GO 32041
// begin tmp := arr ;
31779: LD_ADDR_VAR 0 6
31783: PUSH
31784: LD_VAR 0 1
31788: ST_TO_ADDR
// s_arr := [ tmp ] ;
31789: LD_ADDR_VAR 0 7
31793: PUSH
31794: LD_VAR 0 6
31798: PUSH
31799: EMPTY
31800: LIST
31801: ST_TO_ADDR
// for i = 1 to pos - 1 do
31802: LD_ADDR_VAR 0 5
31806: PUSH
31807: DOUBLE
31808: LD_INT 1
31810: DEC
31811: ST_TO_ADDR
31812: LD_VAR 0 2
31816: PUSH
31817: LD_INT 1
31819: MINUS
31820: PUSH
31821: FOR_TO
31822: IFFALSE 31867
// begin tmp := tmp [ pos [ i ] ] ;
31824: LD_ADDR_VAR 0 6
31828: PUSH
31829: LD_VAR 0 6
31833: PUSH
31834: LD_VAR 0 2
31838: PUSH
31839: LD_VAR 0 5
31843: ARRAY
31844: ARRAY
31845: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31846: LD_ADDR_VAR 0 7
31850: PUSH
31851: LD_VAR 0 7
31855: PUSH
31856: LD_VAR 0 6
31860: PUSH
31861: EMPTY
31862: LIST
31863: ADD
31864: ST_TO_ADDR
// end ;
31865: GO 31821
31867: POP
31868: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31869: LD_ADDR_VAR 0 6
31873: PUSH
31874: LD_VAR 0 6
31878: PPUSH
31879: LD_VAR 0 2
31883: PUSH
31884: LD_VAR 0 2
31888: ARRAY
31889: PPUSH
31890: LD_VAR 0 3
31894: PPUSH
31895: CALL_OW 1
31899: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31900: LD_ADDR_VAR 0 7
31904: PUSH
31905: LD_VAR 0 7
31909: PPUSH
31910: LD_VAR 0 7
31914: PPUSH
31915: LD_VAR 0 6
31919: PPUSH
31920: CALL_OW 1
31924: ST_TO_ADDR
// for i = s_arr downto 2 do
31925: LD_ADDR_VAR 0 5
31929: PUSH
31930: DOUBLE
31931: LD_VAR 0 7
31935: INC
31936: ST_TO_ADDR
31937: LD_INT 2
31939: PUSH
31940: FOR_DOWNTO
31941: IFFALSE 32025
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31943: LD_ADDR_VAR 0 6
31947: PUSH
31948: LD_VAR 0 7
31952: PUSH
31953: LD_VAR 0 5
31957: PUSH
31958: LD_INT 1
31960: MINUS
31961: ARRAY
31962: PPUSH
31963: LD_VAR 0 2
31967: PUSH
31968: LD_VAR 0 5
31972: PUSH
31973: LD_INT 1
31975: MINUS
31976: ARRAY
31977: PPUSH
31978: LD_VAR 0 7
31982: PUSH
31983: LD_VAR 0 5
31987: ARRAY
31988: PPUSH
31989: CALL_OW 1
31993: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31994: LD_ADDR_VAR 0 7
31998: PUSH
31999: LD_VAR 0 7
32003: PPUSH
32004: LD_VAR 0 5
32008: PUSH
32009: LD_INT 1
32011: MINUS
32012: PPUSH
32013: LD_VAR 0 6
32017: PPUSH
32018: CALL_OW 1
32022: ST_TO_ADDR
// end ;
32023: GO 31940
32025: POP
32026: POP
// result := s_arr [ 1 ] ;
32027: LD_ADDR_VAR 0 4
32031: PUSH
32032: LD_VAR 0 7
32036: PUSH
32037: LD_INT 1
32039: ARRAY
32040: ST_TO_ADDR
// end ; end ;
32041: LD_VAR 0 4
32045: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32046: LD_INT 0
32048: PPUSH
32049: PPUSH
// if not list then
32050: LD_VAR 0 1
32054: NOT
32055: IFFALSE 32059
// exit ;
32057: GO 32150
// i := list [ pos1 ] ;
32059: LD_ADDR_VAR 0 5
32063: PUSH
32064: LD_VAR 0 1
32068: PUSH
32069: LD_VAR 0 2
32073: ARRAY
32074: ST_TO_ADDR
// if not i then
32075: LD_VAR 0 5
32079: NOT
32080: IFFALSE 32084
// exit ;
32082: GO 32150
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32084: LD_ADDR_VAR 0 1
32088: PUSH
32089: LD_VAR 0 1
32093: PPUSH
32094: LD_VAR 0 2
32098: PPUSH
32099: LD_VAR 0 1
32103: PUSH
32104: LD_VAR 0 3
32108: ARRAY
32109: PPUSH
32110: CALL_OW 1
32114: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32115: LD_ADDR_VAR 0 1
32119: PUSH
32120: LD_VAR 0 1
32124: PPUSH
32125: LD_VAR 0 3
32129: PPUSH
32130: LD_VAR 0 5
32134: PPUSH
32135: CALL_OW 1
32139: ST_TO_ADDR
// result := list ;
32140: LD_ADDR_VAR 0 4
32144: PUSH
32145: LD_VAR 0 1
32149: ST_TO_ADDR
// end ;
32150: LD_VAR 0 4
32154: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32155: LD_INT 0
32157: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32158: LD_ADDR_VAR 0 5
32162: PUSH
32163: LD_VAR 0 1
32167: PPUSH
32168: CALL_OW 250
32172: PPUSH
32173: LD_VAR 0 1
32177: PPUSH
32178: CALL_OW 251
32182: PPUSH
32183: LD_VAR 0 2
32187: PPUSH
32188: LD_VAR 0 3
32192: PPUSH
32193: LD_VAR 0 4
32197: PPUSH
32198: CALL 32208 0 5
32202: ST_TO_ADDR
// end ;
32203: LD_VAR 0 5
32207: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32208: LD_INT 0
32210: PPUSH
32211: PPUSH
32212: PPUSH
32213: PPUSH
// if not list then
32214: LD_VAR 0 3
32218: NOT
32219: IFFALSE 32223
// exit ;
32221: GO 32611
// result := [ ] ;
32223: LD_ADDR_VAR 0 6
32227: PUSH
32228: EMPTY
32229: ST_TO_ADDR
// for i in list do
32230: LD_ADDR_VAR 0 7
32234: PUSH
32235: LD_VAR 0 3
32239: PUSH
32240: FOR_IN
32241: IFFALSE 32443
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32243: LD_ADDR_VAR 0 9
32247: PUSH
32248: LD_VAR 0 7
32252: PPUSH
32253: LD_VAR 0 1
32257: PPUSH
32258: LD_VAR 0 2
32262: PPUSH
32263: CALL_OW 297
32267: ST_TO_ADDR
// if not result then
32268: LD_VAR 0 6
32272: NOT
32273: IFFALSE 32299
// result := [ [ i , tmp ] ] else
32275: LD_ADDR_VAR 0 6
32279: PUSH
32280: LD_VAR 0 7
32284: PUSH
32285: LD_VAR 0 9
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: PUSH
32294: EMPTY
32295: LIST
32296: ST_TO_ADDR
32297: GO 32441
// begin if result [ result ] [ 2 ] < tmp then
32299: LD_VAR 0 6
32303: PUSH
32304: LD_VAR 0 6
32308: ARRAY
32309: PUSH
32310: LD_INT 2
32312: ARRAY
32313: PUSH
32314: LD_VAR 0 9
32318: LESS
32319: IFFALSE 32361
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32321: LD_ADDR_VAR 0 6
32325: PUSH
32326: LD_VAR 0 6
32330: PPUSH
32331: LD_VAR 0 6
32335: PUSH
32336: LD_INT 1
32338: PLUS
32339: PPUSH
32340: LD_VAR 0 7
32344: PUSH
32345: LD_VAR 0 9
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: PPUSH
32354: CALL_OW 2
32358: ST_TO_ADDR
32359: GO 32441
// for j = 1 to result do
32361: LD_ADDR_VAR 0 8
32365: PUSH
32366: DOUBLE
32367: LD_INT 1
32369: DEC
32370: ST_TO_ADDR
32371: LD_VAR 0 6
32375: PUSH
32376: FOR_TO
32377: IFFALSE 32439
// begin if tmp < result [ j ] [ 2 ] then
32379: LD_VAR 0 9
32383: PUSH
32384: LD_VAR 0 6
32388: PUSH
32389: LD_VAR 0 8
32393: ARRAY
32394: PUSH
32395: LD_INT 2
32397: ARRAY
32398: LESS
32399: IFFALSE 32437
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32401: LD_ADDR_VAR 0 6
32405: PUSH
32406: LD_VAR 0 6
32410: PPUSH
32411: LD_VAR 0 8
32415: PPUSH
32416: LD_VAR 0 7
32420: PUSH
32421: LD_VAR 0 9
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PPUSH
32430: CALL_OW 2
32434: ST_TO_ADDR
// break ;
32435: GO 32439
// end ; end ;
32437: GO 32376
32439: POP
32440: POP
// end ; end ;
32441: GO 32240
32443: POP
32444: POP
// if result and not asc then
32445: LD_VAR 0 6
32449: PUSH
32450: LD_VAR 0 4
32454: NOT
32455: AND
32456: IFFALSE 32531
// begin tmp := result ;
32458: LD_ADDR_VAR 0 9
32462: PUSH
32463: LD_VAR 0 6
32467: ST_TO_ADDR
// for i = tmp downto 1 do
32468: LD_ADDR_VAR 0 7
32472: PUSH
32473: DOUBLE
32474: LD_VAR 0 9
32478: INC
32479: ST_TO_ADDR
32480: LD_INT 1
32482: PUSH
32483: FOR_DOWNTO
32484: IFFALSE 32529
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32486: LD_ADDR_VAR 0 6
32490: PUSH
32491: LD_VAR 0 6
32495: PPUSH
32496: LD_VAR 0 9
32500: PUSH
32501: LD_VAR 0 7
32505: MINUS
32506: PUSH
32507: LD_INT 1
32509: PLUS
32510: PPUSH
32511: LD_VAR 0 9
32515: PUSH
32516: LD_VAR 0 7
32520: ARRAY
32521: PPUSH
32522: CALL_OW 1
32526: ST_TO_ADDR
32527: GO 32483
32529: POP
32530: POP
// end ; tmp := [ ] ;
32531: LD_ADDR_VAR 0 9
32535: PUSH
32536: EMPTY
32537: ST_TO_ADDR
// if mode then
32538: LD_VAR 0 5
32542: IFFALSE 32611
// begin for i = 1 to result do
32544: LD_ADDR_VAR 0 7
32548: PUSH
32549: DOUBLE
32550: LD_INT 1
32552: DEC
32553: ST_TO_ADDR
32554: LD_VAR 0 6
32558: PUSH
32559: FOR_TO
32560: IFFALSE 32599
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32562: LD_ADDR_VAR 0 9
32566: PUSH
32567: LD_VAR 0 9
32571: PPUSH
32572: LD_VAR 0 7
32576: PPUSH
32577: LD_VAR 0 6
32581: PUSH
32582: LD_VAR 0 7
32586: ARRAY
32587: PUSH
32588: LD_INT 1
32590: ARRAY
32591: PPUSH
32592: CALL_OW 1
32596: ST_TO_ADDR
32597: GO 32559
32599: POP
32600: POP
// result := tmp ;
32601: LD_ADDR_VAR 0 6
32605: PUSH
32606: LD_VAR 0 9
32610: ST_TO_ADDR
// end ; end ;
32611: LD_VAR 0 6
32615: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32616: LD_INT 0
32618: PPUSH
32619: PPUSH
32620: PPUSH
32621: PPUSH
32622: PPUSH
32623: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32624: LD_ADDR_VAR 0 5
32628: PUSH
32629: LD_INT 0
32631: PUSH
32632: LD_INT 0
32634: PUSH
32635: LD_INT 0
32637: PUSH
32638: EMPTY
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: ST_TO_ADDR
// if not x or not y then
32646: LD_VAR 0 2
32650: NOT
32651: PUSH
32652: LD_VAR 0 3
32656: NOT
32657: OR
32658: IFFALSE 32662
// exit ;
32660: GO 34308
// if not range then
32662: LD_VAR 0 4
32666: NOT
32667: IFFALSE 32677
// range := 10 ;
32669: LD_ADDR_VAR 0 4
32673: PUSH
32674: LD_INT 10
32676: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32677: LD_ADDR_VAR 0 8
32681: PUSH
32682: LD_INT 81
32684: PUSH
32685: LD_VAR 0 1
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: PUSH
32694: LD_INT 92
32696: PUSH
32697: LD_VAR 0 2
32701: PUSH
32702: LD_VAR 0 3
32706: PUSH
32707: LD_VAR 0 4
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 3
32720: PUSH
32721: LD_INT 21
32723: PUSH
32724: LD_INT 3
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: LIST
32739: PPUSH
32740: CALL_OW 69
32744: ST_TO_ADDR
// if not tmp then
32745: LD_VAR 0 8
32749: NOT
32750: IFFALSE 32754
// exit ;
32752: GO 34308
// for i in tmp do
32754: LD_ADDR_VAR 0 6
32758: PUSH
32759: LD_VAR 0 8
32763: PUSH
32764: FOR_IN
32765: IFFALSE 34283
// begin points := [ 0 , 0 , 0 ] ;
32767: LD_ADDR_VAR 0 9
32771: PUSH
32772: LD_INT 0
32774: PUSH
32775: LD_INT 0
32777: PUSH
32778: LD_INT 0
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: LIST
32785: ST_TO_ADDR
// bpoints := 1 ;
32786: LD_ADDR_VAR 0 10
32790: PUSH
32791: LD_INT 1
32793: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32794: LD_VAR 0 6
32798: PPUSH
32799: CALL_OW 247
32803: PUSH
32804: LD_INT 1
32806: DOUBLE
32807: EQUAL
32808: IFTRUE 32812
32810: GO 33390
32812: POP
// begin if GetClass ( i ) = 1 then
32813: LD_VAR 0 6
32817: PPUSH
32818: CALL_OW 257
32822: PUSH
32823: LD_INT 1
32825: EQUAL
32826: IFFALSE 32847
// points := [ 10 , 5 , 3 ] ;
32828: LD_ADDR_VAR 0 9
32832: PUSH
32833: LD_INT 10
32835: PUSH
32836: LD_INT 5
32838: PUSH
32839: LD_INT 3
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: LIST
32846: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32847: LD_VAR 0 6
32851: PPUSH
32852: CALL_OW 257
32856: PUSH
32857: LD_INT 2
32859: PUSH
32860: LD_INT 3
32862: PUSH
32863: LD_INT 4
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: LIST
32870: IN
32871: IFFALSE 32892
// points := [ 3 , 2 , 1 ] ;
32873: LD_ADDR_VAR 0 9
32877: PUSH
32878: LD_INT 3
32880: PUSH
32881: LD_INT 2
32883: PUSH
32884: LD_INT 1
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: LIST
32891: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32892: LD_VAR 0 6
32896: PPUSH
32897: CALL_OW 257
32901: PUSH
32902: LD_INT 5
32904: EQUAL
32905: IFFALSE 32926
// points := [ 130 , 5 , 2 ] ;
32907: LD_ADDR_VAR 0 9
32911: PUSH
32912: LD_INT 130
32914: PUSH
32915: LD_INT 5
32917: PUSH
32918: LD_INT 2
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: LIST
32925: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32926: LD_VAR 0 6
32930: PPUSH
32931: CALL_OW 257
32935: PUSH
32936: LD_INT 8
32938: EQUAL
32939: IFFALSE 32960
// points := [ 35 , 35 , 30 ] ;
32941: LD_ADDR_VAR 0 9
32945: PUSH
32946: LD_INT 35
32948: PUSH
32949: LD_INT 35
32951: PUSH
32952: LD_INT 30
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: LIST
32959: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32960: LD_VAR 0 6
32964: PPUSH
32965: CALL_OW 257
32969: PUSH
32970: LD_INT 9
32972: EQUAL
32973: IFFALSE 32994
// points := [ 20 , 55 , 40 ] ;
32975: LD_ADDR_VAR 0 9
32979: PUSH
32980: LD_INT 20
32982: PUSH
32983: LD_INT 55
32985: PUSH
32986: LD_INT 40
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: LIST
32993: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32994: LD_VAR 0 6
32998: PPUSH
32999: CALL_OW 257
33003: PUSH
33004: LD_INT 12
33006: PUSH
33007: LD_INT 16
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: IN
33014: IFFALSE 33035
// points := [ 5 , 3 , 2 ] ;
33016: LD_ADDR_VAR 0 9
33020: PUSH
33021: LD_INT 5
33023: PUSH
33024: LD_INT 3
33026: PUSH
33027: LD_INT 2
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: LIST
33034: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33035: LD_VAR 0 6
33039: PPUSH
33040: CALL_OW 257
33044: PUSH
33045: LD_INT 17
33047: EQUAL
33048: IFFALSE 33069
// points := [ 100 , 50 , 75 ] ;
33050: LD_ADDR_VAR 0 9
33054: PUSH
33055: LD_INT 100
33057: PUSH
33058: LD_INT 50
33060: PUSH
33061: LD_INT 75
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: LIST
33068: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33069: LD_VAR 0 6
33073: PPUSH
33074: CALL_OW 257
33078: PUSH
33079: LD_INT 15
33081: EQUAL
33082: IFFALSE 33103
// points := [ 10 , 5 , 3 ] ;
33084: LD_ADDR_VAR 0 9
33088: PUSH
33089: LD_INT 10
33091: PUSH
33092: LD_INT 5
33094: PUSH
33095: LD_INT 3
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: LIST
33102: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33103: LD_VAR 0 6
33107: PPUSH
33108: CALL_OW 257
33112: PUSH
33113: LD_INT 14
33115: EQUAL
33116: IFFALSE 33137
// points := [ 10 , 0 , 0 ] ;
33118: LD_ADDR_VAR 0 9
33122: PUSH
33123: LD_INT 10
33125: PUSH
33126: LD_INT 0
33128: PUSH
33129: LD_INT 0
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: LIST
33136: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33137: LD_VAR 0 6
33141: PPUSH
33142: CALL_OW 257
33146: PUSH
33147: LD_INT 11
33149: EQUAL
33150: IFFALSE 33171
// points := [ 30 , 10 , 5 ] ;
33152: LD_ADDR_VAR 0 9
33156: PUSH
33157: LD_INT 30
33159: PUSH
33160: LD_INT 10
33162: PUSH
33163: LD_INT 5
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: LIST
33170: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33171: LD_VAR 0 1
33175: PPUSH
33176: LD_INT 5
33178: PPUSH
33179: CALL_OW 321
33183: PUSH
33184: LD_INT 2
33186: EQUAL
33187: IFFALSE 33204
// bpoints := bpoints * 1.8 ;
33189: LD_ADDR_VAR 0 10
33193: PUSH
33194: LD_VAR 0 10
33198: PUSH
33199: LD_REAL  1.80000000000000E+0000
33202: MUL
33203: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33204: LD_VAR 0 6
33208: PPUSH
33209: CALL_OW 257
33213: PUSH
33214: LD_INT 1
33216: PUSH
33217: LD_INT 2
33219: PUSH
33220: LD_INT 3
33222: PUSH
33223: LD_INT 4
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: IN
33232: PUSH
33233: LD_VAR 0 1
33237: PPUSH
33238: LD_INT 51
33240: PPUSH
33241: CALL_OW 321
33245: PUSH
33246: LD_INT 2
33248: EQUAL
33249: AND
33250: IFFALSE 33267
// bpoints := bpoints * 1.2 ;
33252: LD_ADDR_VAR 0 10
33256: PUSH
33257: LD_VAR 0 10
33261: PUSH
33262: LD_REAL  1.20000000000000E+0000
33265: MUL
33266: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33267: LD_VAR 0 6
33271: PPUSH
33272: CALL_OW 257
33276: PUSH
33277: LD_INT 5
33279: PUSH
33280: LD_INT 7
33282: PUSH
33283: LD_INT 9
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: LIST
33290: IN
33291: PUSH
33292: LD_VAR 0 1
33296: PPUSH
33297: LD_INT 52
33299: PPUSH
33300: CALL_OW 321
33304: PUSH
33305: LD_INT 2
33307: EQUAL
33308: AND
33309: IFFALSE 33326
// bpoints := bpoints * 1.5 ;
33311: LD_ADDR_VAR 0 10
33315: PUSH
33316: LD_VAR 0 10
33320: PUSH
33321: LD_REAL  1.50000000000000E+0000
33324: MUL
33325: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33326: LD_VAR 0 1
33330: PPUSH
33331: LD_INT 66
33333: PPUSH
33334: CALL_OW 321
33338: PUSH
33339: LD_INT 2
33341: EQUAL
33342: IFFALSE 33359
// bpoints := bpoints * 1.1 ;
33344: LD_ADDR_VAR 0 10
33348: PUSH
33349: LD_VAR 0 10
33353: PUSH
33354: LD_REAL  1.10000000000000E+0000
33357: MUL
33358: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33359: LD_ADDR_VAR 0 10
33363: PUSH
33364: LD_VAR 0 10
33368: PUSH
33369: LD_VAR 0 6
33373: PPUSH
33374: LD_INT 1
33376: PPUSH
33377: CALL_OW 259
33381: PUSH
33382: LD_REAL  1.15000000000000E+0000
33385: MUL
33386: MUL
33387: ST_TO_ADDR
// end ; unit_vehicle :
33388: GO 34212
33390: LD_INT 2
33392: DOUBLE
33393: EQUAL
33394: IFTRUE 33398
33396: GO 34200
33398: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33399: LD_VAR 0 6
33403: PPUSH
33404: CALL_OW 264
33408: PUSH
33409: LD_INT 2
33411: PUSH
33412: LD_INT 42
33414: PUSH
33415: LD_INT 24
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: LIST
33422: IN
33423: IFFALSE 33444
// points := [ 25 , 5 , 3 ] ;
33425: LD_ADDR_VAR 0 9
33429: PUSH
33430: LD_INT 25
33432: PUSH
33433: LD_INT 5
33435: PUSH
33436: LD_INT 3
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: LIST
33443: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33444: LD_VAR 0 6
33448: PPUSH
33449: CALL_OW 264
33453: PUSH
33454: LD_INT 4
33456: PUSH
33457: LD_INT 43
33459: PUSH
33460: LD_INT 25
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: LIST
33467: IN
33468: IFFALSE 33489
// points := [ 40 , 15 , 5 ] ;
33470: LD_ADDR_VAR 0 9
33474: PUSH
33475: LD_INT 40
33477: PUSH
33478: LD_INT 15
33480: PUSH
33481: LD_INT 5
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: LIST
33488: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33489: LD_VAR 0 6
33493: PPUSH
33494: CALL_OW 264
33498: PUSH
33499: LD_INT 3
33501: PUSH
33502: LD_INT 23
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: IN
33509: IFFALSE 33530
// points := [ 7 , 25 , 8 ] ;
33511: LD_ADDR_VAR 0 9
33515: PUSH
33516: LD_INT 7
33518: PUSH
33519: LD_INT 25
33521: PUSH
33522: LD_INT 8
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: LIST
33529: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33530: LD_VAR 0 6
33534: PPUSH
33535: CALL_OW 264
33539: PUSH
33540: LD_INT 5
33542: PUSH
33543: LD_INT 27
33545: PUSH
33546: LD_INT 44
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: LIST
33553: IN
33554: IFFALSE 33575
// points := [ 14 , 50 , 16 ] ;
33556: LD_ADDR_VAR 0 9
33560: PUSH
33561: LD_INT 14
33563: PUSH
33564: LD_INT 50
33566: PUSH
33567: LD_INT 16
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: LIST
33574: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33575: LD_VAR 0 6
33579: PPUSH
33580: CALL_OW 264
33584: PUSH
33585: LD_INT 6
33587: PUSH
33588: LD_INT 46
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: IN
33595: IFFALSE 33616
// points := [ 32 , 120 , 70 ] ;
33597: LD_ADDR_VAR 0 9
33601: PUSH
33602: LD_INT 32
33604: PUSH
33605: LD_INT 120
33607: PUSH
33608: LD_INT 70
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: LIST
33615: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
33616: LD_VAR 0 6
33620: PPUSH
33621: CALL_OW 264
33625: PUSH
33626: LD_INT 7
33628: PUSH
33629: LD_INT 28
33631: PUSH
33632: LD_INT 45
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: LIST
33639: IN
33640: IFFALSE 33661
// points := [ 35 , 20 , 45 ] ;
33642: LD_ADDR_VAR 0 9
33646: PUSH
33647: LD_INT 35
33649: PUSH
33650: LD_INT 20
33652: PUSH
33653: LD_INT 45
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: LIST
33660: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33661: LD_VAR 0 6
33665: PPUSH
33666: CALL_OW 264
33670: PUSH
33671: LD_INT 47
33673: PUSH
33674: EMPTY
33675: LIST
33676: IN
33677: IFFALSE 33698
// points := [ 67 , 45 , 75 ] ;
33679: LD_ADDR_VAR 0 9
33683: PUSH
33684: LD_INT 67
33686: PUSH
33687: LD_INT 45
33689: PUSH
33690: LD_INT 75
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: LIST
33697: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33698: LD_VAR 0 6
33702: PPUSH
33703: CALL_OW 264
33707: PUSH
33708: LD_INT 26
33710: PUSH
33711: EMPTY
33712: LIST
33713: IN
33714: IFFALSE 33735
// points := [ 120 , 30 , 80 ] ;
33716: LD_ADDR_VAR 0 9
33720: PUSH
33721: LD_INT 120
33723: PUSH
33724: LD_INT 30
33726: PUSH
33727: LD_INT 80
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: LIST
33734: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33735: LD_VAR 0 6
33739: PPUSH
33740: CALL_OW 264
33744: PUSH
33745: LD_INT 22
33747: PUSH
33748: EMPTY
33749: LIST
33750: IN
33751: IFFALSE 33772
// points := [ 40 , 1 , 1 ] ;
33753: LD_ADDR_VAR 0 9
33757: PUSH
33758: LD_INT 40
33760: PUSH
33761: LD_INT 1
33763: PUSH
33764: LD_INT 1
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: LIST
33771: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33772: LD_VAR 0 6
33776: PPUSH
33777: CALL_OW 264
33781: PUSH
33782: LD_INT 29
33784: PUSH
33785: EMPTY
33786: LIST
33787: IN
33788: IFFALSE 33809
// points := [ 70 , 200 , 400 ] ;
33790: LD_ADDR_VAR 0 9
33794: PUSH
33795: LD_INT 70
33797: PUSH
33798: LD_INT 200
33800: PUSH
33801: LD_INT 400
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: LIST
33808: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33809: LD_VAR 0 6
33813: PPUSH
33814: CALL_OW 264
33818: PUSH
33819: LD_INT 14
33821: PUSH
33822: LD_INT 53
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: IN
33829: IFFALSE 33850
// points := [ 40 , 10 , 20 ] ;
33831: LD_ADDR_VAR 0 9
33835: PUSH
33836: LD_INT 40
33838: PUSH
33839: LD_INT 10
33841: PUSH
33842: LD_INT 20
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: LIST
33849: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33850: LD_VAR 0 6
33854: PPUSH
33855: CALL_OW 264
33859: PUSH
33860: LD_INT 9
33862: PUSH
33863: EMPTY
33864: LIST
33865: IN
33866: IFFALSE 33887
// points := [ 5 , 70 , 20 ] ;
33868: LD_ADDR_VAR 0 9
33872: PUSH
33873: LD_INT 5
33875: PUSH
33876: LD_INT 70
33878: PUSH
33879: LD_INT 20
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: LIST
33886: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33887: LD_VAR 0 6
33891: PPUSH
33892: CALL_OW 264
33896: PUSH
33897: LD_INT 10
33899: PUSH
33900: EMPTY
33901: LIST
33902: IN
33903: IFFALSE 33924
// points := [ 35 , 110 , 70 ] ;
33905: LD_ADDR_VAR 0 9
33909: PUSH
33910: LD_INT 35
33912: PUSH
33913: LD_INT 110
33915: PUSH
33916: LD_INT 70
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: LIST
33923: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33924: LD_VAR 0 6
33928: PPUSH
33929: CALL_OW 265
33933: PUSH
33934: LD_INT 25
33936: EQUAL
33937: IFFALSE 33958
// points := [ 80 , 65 , 100 ] ;
33939: LD_ADDR_VAR 0 9
33943: PUSH
33944: LD_INT 80
33946: PUSH
33947: LD_INT 65
33949: PUSH
33950: LD_INT 100
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: LIST
33957: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33958: LD_VAR 0 6
33962: PPUSH
33963: CALL_OW 263
33967: PUSH
33968: LD_INT 1
33970: EQUAL
33971: IFFALSE 34006
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33973: LD_ADDR_VAR 0 10
33977: PUSH
33978: LD_VAR 0 10
33982: PUSH
33983: LD_VAR 0 6
33987: PPUSH
33988: CALL_OW 311
33992: PPUSH
33993: LD_INT 3
33995: PPUSH
33996: CALL_OW 259
34000: PUSH
34001: LD_INT 4
34003: MUL
34004: MUL
34005: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34006: LD_VAR 0 6
34010: PPUSH
34011: CALL_OW 263
34015: PUSH
34016: LD_INT 2
34018: EQUAL
34019: IFFALSE 34070
// begin j := IsControledBy ( i ) ;
34021: LD_ADDR_VAR 0 7
34025: PUSH
34026: LD_VAR 0 6
34030: PPUSH
34031: CALL_OW 312
34035: ST_TO_ADDR
// if j then
34036: LD_VAR 0 7
34040: IFFALSE 34070
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34042: LD_ADDR_VAR 0 10
34046: PUSH
34047: LD_VAR 0 10
34051: PUSH
34052: LD_VAR 0 7
34056: PPUSH
34057: LD_INT 3
34059: PPUSH
34060: CALL_OW 259
34064: PUSH
34065: LD_INT 3
34067: MUL
34068: MUL
34069: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34070: LD_VAR 0 6
34074: PPUSH
34075: CALL_OW 264
34079: PUSH
34080: LD_INT 5
34082: PUSH
34083: LD_INT 6
34085: PUSH
34086: LD_INT 46
34088: PUSH
34089: LD_INT 44
34091: PUSH
34092: LD_INT 47
34094: PUSH
34095: LD_INT 45
34097: PUSH
34098: LD_INT 28
34100: PUSH
34101: LD_INT 7
34103: PUSH
34104: LD_INT 27
34106: PUSH
34107: LD_INT 29
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: LIST
34114: LIST
34115: LIST
34116: LIST
34117: LIST
34118: LIST
34119: LIST
34120: LIST
34121: IN
34122: PUSH
34123: LD_VAR 0 1
34127: PPUSH
34128: LD_INT 52
34130: PPUSH
34131: CALL_OW 321
34135: PUSH
34136: LD_INT 2
34138: EQUAL
34139: AND
34140: IFFALSE 34157
// bpoints := bpoints * 1.2 ;
34142: LD_ADDR_VAR 0 10
34146: PUSH
34147: LD_VAR 0 10
34151: PUSH
34152: LD_REAL  1.20000000000000E+0000
34155: MUL
34156: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34157: LD_VAR 0 6
34161: PPUSH
34162: CALL_OW 264
34166: PUSH
34167: LD_INT 6
34169: PUSH
34170: LD_INT 46
34172: PUSH
34173: LD_INT 47
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: LIST
34180: IN
34181: IFFALSE 34198
// bpoints := bpoints * 1.2 ;
34183: LD_ADDR_VAR 0 10
34187: PUSH
34188: LD_VAR 0 10
34192: PUSH
34193: LD_REAL  1.20000000000000E+0000
34196: MUL
34197: ST_TO_ADDR
// end ; unit_building :
34198: GO 34212
34200: LD_INT 3
34202: DOUBLE
34203: EQUAL
34204: IFTRUE 34208
34206: GO 34211
34208: POP
// ; end ;
34209: GO 34212
34211: POP
// for j = 1 to 3 do
34212: LD_ADDR_VAR 0 7
34216: PUSH
34217: DOUBLE
34218: LD_INT 1
34220: DEC
34221: ST_TO_ADDR
34222: LD_INT 3
34224: PUSH
34225: FOR_TO
34226: IFFALSE 34279
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34228: LD_ADDR_VAR 0 5
34232: PUSH
34233: LD_VAR 0 5
34237: PPUSH
34238: LD_VAR 0 7
34242: PPUSH
34243: LD_VAR 0 5
34247: PUSH
34248: LD_VAR 0 7
34252: ARRAY
34253: PUSH
34254: LD_VAR 0 9
34258: PUSH
34259: LD_VAR 0 7
34263: ARRAY
34264: PUSH
34265: LD_VAR 0 10
34269: MUL
34270: PLUS
34271: PPUSH
34272: CALL_OW 1
34276: ST_TO_ADDR
34277: GO 34225
34279: POP
34280: POP
// end ;
34281: GO 32764
34283: POP
34284: POP
// result := Replace ( result , 4 , tmp ) ;
34285: LD_ADDR_VAR 0 5
34289: PUSH
34290: LD_VAR 0 5
34294: PPUSH
34295: LD_INT 4
34297: PPUSH
34298: LD_VAR 0 8
34302: PPUSH
34303: CALL_OW 1
34307: ST_TO_ADDR
// end ;
34308: LD_VAR 0 5
34312: RET
// export function DangerAtRange ( unit , range ) ; begin
34313: LD_INT 0
34315: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34316: LD_ADDR_VAR 0 3
34320: PUSH
34321: LD_VAR 0 1
34325: PPUSH
34326: CALL_OW 255
34330: PPUSH
34331: LD_VAR 0 1
34335: PPUSH
34336: CALL_OW 250
34340: PPUSH
34341: LD_VAR 0 1
34345: PPUSH
34346: CALL_OW 251
34350: PPUSH
34351: LD_VAR 0 2
34355: PPUSH
34356: CALL 32616 0 4
34360: ST_TO_ADDR
// end ;
34361: LD_VAR 0 3
34365: RET
// export function DangerInArea ( side , area ) ; begin
34366: LD_INT 0
34368: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34369: LD_ADDR_VAR 0 3
34373: PUSH
34374: LD_VAR 0 2
34378: PPUSH
34379: LD_INT 81
34381: PUSH
34382: LD_VAR 0 1
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PPUSH
34391: CALL_OW 70
34395: ST_TO_ADDR
// end ;
34396: LD_VAR 0 3
34400: RET
// export function IsExtension ( b ) ; begin
34401: LD_INT 0
34403: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34404: LD_ADDR_VAR 0 2
34408: PUSH
34409: LD_VAR 0 1
34413: PUSH
34414: LD_INT 23
34416: PUSH
34417: LD_INT 20
34419: PUSH
34420: LD_INT 22
34422: PUSH
34423: LD_INT 17
34425: PUSH
34426: LD_INT 24
34428: PUSH
34429: LD_INT 21
34431: PUSH
34432: LD_INT 19
34434: PUSH
34435: LD_INT 16
34437: PUSH
34438: LD_INT 25
34440: PUSH
34441: LD_INT 18
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: IN
34456: ST_TO_ADDR
// end ;
34457: LD_VAR 0 2
34461: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
34462: LD_INT 0
34464: PPUSH
34465: PPUSH
34466: PPUSH
// result := [ ] ;
34467: LD_ADDR_VAR 0 3
34471: PUSH
34472: EMPTY
34473: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34474: LD_ADDR_VAR 0 4
34478: PUSH
34479: LD_VAR 0 2
34483: PPUSH
34484: LD_INT 21
34486: PUSH
34487: LD_INT 3
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PPUSH
34494: CALL_OW 70
34498: ST_TO_ADDR
// if not tmp then
34499: LD_VAR 0 4
34503: NOT
34504: IFFALSE 34508
// exit ;
34506: GO 34566
// for i in tmp do
34508: LD_ADDR_VAR 0 5
34512: PUSH
34513: LD_VAR 0 4
34517: PUSH
34518: FOR_IN
34519: IFFALSE 34554
// if GetBase ( i ) <> base then
34521: LD_VAR 0 5
34525: PPUSH
34526: CALL_OW 274
34530: PUSH
34531: LD_VAR 0 1
34535: NONEQUAL
34536: IFFALSE 34552
// ComLinkToBase ( base , i ) ;
34538: LD_VAR 0 1
34542: PPUSH
34543: LD_VAR 0 5
34547: PPUSH
34548: CALL_OW 169
34552: GO 34518
34554: POP
34555: POP
// result := tmp ;
34556: LD_ADDR_VAR 0 3
34560: PUSH
34561: LD_VAR 0 4
34565: ST_TO_ADDR
// end ;
34566: LD_VAR 0 3
34570: RET
// export function ComComplete ( unit , b ) ; var i ; begin
34571: LD_INT 0
34573: PPUSH
34574: PPUSH
// if BuildingStatus ( b ) = bs_build then
34575: LD_VAR 0 2
34579: PPUSH
34580: CALL_OW 461
34584: PUSH
34585: LD_INT 1
34587: EQUAL
34588: IFFALSE 34648
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34590: LD_VAR 0 1
34594: PPUSH
34595: LD_STRING h
34597: PUSH
34598: LD_VAR 0 2
34602: PPUSH
34603: CALL_OW 250
34607: PUSH
34608: LD_VAR 0 2
34612: PPUSH
34613: CALL_OW 251
34617: PUSH
34618: LD_VAR 0 2
34622: PUSH
34623: LD_INT 0
34625: PUSH
34626: LD_INT 0
34628: PUSH
34629: LD_INT 0
34631: PUSH
34632: EMPTY
34633: LIST
34634: LIST
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: LIST
34640: PUSH
34641: EMPTY
34642: LIST
34643: PPUSH
34644: CALL_OW 446
// end ;
34648: LD_VAR 0 3
34652: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34653: LD_INT 0
34655: PPUSH
34656: PPUSH
34657: PPUSH
34658: PPUSH
34659: PPUSH
34660: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
34661: LD_VAR 0 1
34665: NOT
34666: PUSH
34667: LD_VAR 0 1
34671: PPUSH
34672: CALL_OW 263
34676: PUSH
34677: LD_INT 2
34679: EQUAL
34680: NOT
34681: OR
34682: IFFALSE 34686
// exit ;
34684: GO 35002
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34686: LD_ADDR_VAR 0 6
34690: PUSH
34691: LD_INT 22
34693: PUSH
34694: LD_VAR 0 1
34698: PPUSH
34699: CALL_OW 255
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: PUSH
34708: LD_INT 2
34710: PUSH
34711: LD_INT 30
34713: PUSH
34714: LD_INT 36
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: PUSH
34721: LD_INT 34
34723: PUSH
34724: LD_INT 31
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: LIST
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: PPUSH
34740: CALL_OW 69
34744: ST_TO_ADDR
// if not tmp then
34745: LD_VAR 0 6
34749: NOT
34750: IFFALSE 34754
// exit ;
34752: GO 35002
// result := [ ] ;
34754: LD_ADDR_VAR 0 2
34758: PUSH
34759: EMPTY
34760: ST_TO_ADDR
// for i in tmp do
34761: LD_ADDR_VAR 0 3
34765: PUSH
34766: LD_VAR 0 6
34770: PUSH
34771: FOR_IN
34772: IFFALSE 34843
// begin t := UnitsInside ( i ) ;
34774: LD_ADDR_VAR 0 4
34778: PUSH
34779: LD_VAR 0 3
34783: PPUSH
34784: CALL_OW 313
34788: ST_TO_ADDR
// if t then
34789: LD_VAR 0 4
34793: IFFALSE 34841
// for j in t do
34795: LD_ADDR_VAR 0 7
34799: PUSH
34800: LD_VAR 0 4
34804: PUSH
34805: FOR_IN
34806: IFFALSE 34839
// result := Insert ( result , result + 1 , j ) ;
34808: LD_ADDR_VAR 0 2
34812: PUSH
34813: LD_VAR 0 2
34817: PPUSH
34818: LD_VAR 0 2
34822: PUSH
34823: LD_INT 1
34825: PLUS
34826: PPUSH
34827: LD_VAR 0 7
34831: PPUSH
34832: CALL_OW 2
34836: ST_TO_ADDR
34837: GO 34805
34839: POP
34840: POP
// end ;
34841: GO 34771
34843: POP
34844: POP
// if not result then
34845: LD_VAR 0 2
34849: NOT
34850: IFFALSE 34854
// exit ;
34852: GO 35002
// mech := result [ 1 ] ;
34854: LD_ADDR_VAR 0 5
34858: PUSH
34859: LD_VAR 0 2
34863: PUSH
34864: LD_INT 1
34866: ARRAY
34867: ST_TO_ADDR
// if result > 1 then
34868: LD_VAR 0 2
34872: PUSH
34873: LD_INT 1
34875: GREATER
34876: IFFALSE 34988
// for i = 2 to result do
34878: LD_ADDR_VAR 0 3
34882: PUSH
34883: DOUBLE
34884: LD_INT 2
34886: DEC
34887: ST_TO_ADDR
34888: LD_VAR 0 2
34892: PUSH
34893: FOR_TO
34894: IFFALSE 34986
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34896: LD_ADDR_VAR 0 4
34900: PUSH
34901: LD_VAR 0 2
34905: PUSH
34906: LD_VAR 0 3
34910: ARRAY
34911: PPUSH
34912: LD_INT 3
34914: PPUSH
34915: CALL_OW 259
34919: PUSH
34920: LD_VAR 0 2
34924: PUSH
34925: LD_VAR 0 3
34929: ARRAY
34930: PPUSH
34931: CALL_OW 432
34935: MINUS
34936: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34937: LD_VAR 0 4
34941: PUSH
34942: LD_VAR 0 5
34946: PPUSH
34947: LD_INT 3
34949: PPUSH
34950: CALL_OW 259
34954: PUSH
34955: LD_VAR 0 5
34959: PPUSH
34960: CALL_OW 432
34964: MINUS
34965: GREATEREQUAL
34966: IFFALSE 34984
// mech := result [ i ] ;
34968: LD_ADDR_VAR 0 5
34972: PUSH
34973: LD_VAR 0 2
34977: PUSH
34978: LD_VAR 0 3
34982: ARRAY
34983: ST_TO_ADDR
// end ;
34984: GO 34893
34986: POP
34987: POP
// ComLinkTo ( vehicle , mech ) ;
34988: LD_VAR 0 1
34992: PPUSH
34993: LD_VAR 0 5
34997: PPUSH
34998: CALL_OW 135
// end ;
35002: LD_VAR 0 2
35006: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35007: LD_INT 0
35009: PPUSH
35010: PPUSH
35011: PPUSH
35012: PPUSH
35013: PPUSH
35014: PPUSH
35015: PPUSH
35016: PPUSH
35017: PPUSH
35018: PPUSH
35019: PPUSH
35020: PPUSH
35021: PPUSH
// result := [ ] ;
35022: LD_ADDR_VAR 0 7
35026: PUSH
35027: EMPTY
35028: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35029: LD_VAR 0 1
35033: PPUSH
35034: CALL_OW 266
35038: PUSH
35039: LD_INT 0
35041: PUSH
35042: LD_INT 1
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: IN
35049: NOT
35050: IFFALSE 35054
// exit ;
35052: GO 36685
// if name then
35054: LD_VAR 0 3
35058: IFFALSE 35074
// SetBName ( base_dep , name ) ;
35060: LD_VAR 0 1
35064: PPUSH
35065: LD_VAR 0 3
35069: PPUSH
35070: CALL_OW 500
// base := GetBase ( base_dep ) ;
35074: LD_ADDR_VAR 0 15
35078: PUSH
35079: LD_VAR 0 1
35083: PPUSH
35084: CALL_OW 274
35088: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35089: LD_ADDR_VAR 0 16
35093: PUSH
35094: LD_VAR 0 1
35098: PPUSH
35099: CALL_OW 255
35103: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35104: LD_ADDR_VAR 0 17
35108: PUSH
35109: LD_VAR 0 1
35113: PPUSH
35114: CALL_OW 248
35118: ST_TO_ADDR
// if sources then
35119: LD_VAR 0 5
35123: IFFALSE 35170
// for i = 1 to 3 do
35125: LD_ADDR_VAR 0 8
35129: PUSH
35130: DOUBLE
35131: LD_INT 1
35133: DEC
35134: ST_TO_ADDR
35135: LD_INT 3
35137: PUSH
35138: FOR_TO
35139: IFFALSE 35168
// AddResourceType ( base , i , sources [ i ] ) ;
35141: LD_VAR 0 15
35145: PPUSH
35146: LD_VAR 0 8
35150: PPUSH
35151: LD_VAR 0 5
35155: PUSH
35156: LD_VAR 0 8
35160: ARRAY
35161: PPUSH
35162: CALL_OW 276
35166: GO 35138
35168: POP
35169: POP
// buildings := GetBaseBuildings ( base , area ) ;
35170: LD_ADDR_VAR 0 18
35174: PUSH
35175: LD_VAR 0 15
35179: PPUSH
35180: LD_VAR 0 2
35184: PPUSH
35185: CALL 34462 0 2
35189: ST_TO_ADDR
// InitHc ;
35190: CALL_OW 19
// InitUc ;
35194: CALL_OW 18
// uc_side := side ;
35198: LD_ADDR_OWVAR 20
35202: PUSH
35203: LD_VAR 0 16
35207: ST_TO_ADDR
// uc_nation := nation ;
35208: LD_ADDR_OWVAR 21
35212: PUSH
35213: LD_VAR 0 17
35217: ST_TO_ADDR
// if buildings then
35218: LD_VAR 0 18
35222: IFFALSE 36544
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35224: LD_ADDR_VAR 0 19
35228: PUSH
35229: LD_VAR 0 18
35233: PPUSH
35234: LD_INT 2
35236: PUSH
35237: LD_INT 30
35239: PUSH
35240: LD_INT 29
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: PUSH
35247: LD_INT 30
35249: PUSH
35250: LD_INT 30
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: LIST
35261: PPUSH
35262: CALL_OW 72
35266: ST_TO_ADDR
// if tmp then
35267: LD_VAR 0 19
35271: IFFALSE 35319
// for i in tmp do
35273: LD_ADDR_VAR 0 8
35277: PUSH
35278: LD_VAR 0 19
35282: PUSH
35283: FOR_IN
35284: IFFALSE 35317
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35286: LD_VAR 0 8
35290: PPUSH
35291: CALL_OW 250
35295: PPUSH
35296: LD_VAR 0 8
35300: PPUSH
35301: CALL_OW 251
35305: PPUSH
35306: LD_VAR 0 16
35310: PPUSH
35311: CALL_OW 441
35315: GO 35283
35317: POP
35318: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35319: LD_VAR 0 18
35323: PPUSH
35324: LD_INT 2
35326: PUSH
35327: LD_INT 30
35329: PUSH
35330: LD_INT 32
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: PUSH
35337: LD_INT 30
35339: PUSH
35340: LD_INT 33
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: LIST
35351: PPUSH
35352: CALL_OW 72
35356: IFFALSE 35444
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35358: LD_ADDR_VAR 0 8
35362: PUSH
35363: LD_VAR 0 18
35367: PPUSH
35368: LD_INT 2
35370: PUSH
35371: LD_INT 30
35373: PUSH
35374: LD_INT 32
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: PUSH
35381: LD_INT 30
35383: PUSH
35384: LD_INT 33
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: LIST
35395: PPUSH
35396: CALL_OW 72
35400: PUSH
35401: FOR_IN
35402: IFFALSE 35442
// begin if not GetBWeapon ( i ) then
35404: LD_VAR 0 8
35408: PPUSH
35409: CALL_OW 269
35413: NOT
35414: IFFALSE 35440
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35416: LD_VAR 0 8
35420: PPUSH
35421: LD_VAR 0 8
35425: PPUSH
35426: LD_VAR 0 2
35430: PPUSH
35431: CALL 36690 0 2
35435: PPUSH
35436: CALL_OW 431
// end ;
35440: GO 35401
35442: POP
35443: POP
// end ; for i = 1 to personel do
35444: LD_ADDR_VAR 0 8
35448: PUSH
35449: DOUBLE
35450: LD_INT 1
35452: DEC
35453: ST_TO_ADDR
35454: LD_VAR 0 6
35458: PUSH
35459: FOR_TO
35460: IFFALSE 36524
// begin if i > 4 then
35462: LD_VAR 0 8
35466: PUSH
35467: LD_INT 4
35469: GREATER
35470: IFFALSE 35474
// break ;
35472: GO 36524
// case i of 1 :
35474: LD_VAR 0 8
35478: PUSH
35479: LD_INT 1
35481: DOUBLE
35482: EQUAL
35483: IFTRUE 35487
35485: GO 35567
35487: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35488: LD_ADDR_VAR 0 12
35492: PUSH
35493: LD_VAR 0 18
35497: PPUSH
35498: LD_INT 22
35500: PUSH
35501: LD_VAR 0 16
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 58
35512: PUSH
35513: EMPTY
35514: LIST
35515: PUSH
35516: LD_INT 2
35518: PUSH
35519: LD_INT 30
35521: PUSH
35522: LD_INT 32
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: PUSH
35529: LD_INT 30
35531: PUSH
35532: LD_INT 4
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: LD_INT 30
35541: PUSH
35542: LD_INT 5
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: LIST
35553: LIST
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: LIST
35559: PPUSH
35560: CALL_OW 72
35564: ST_TO_ADDR
35565: GO 35789
35567: LD_INT 2
35569: DOUBLE
35570: EQUAL
35571: IFTRUE 35575
35573: GO 35637
35575: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35576: LD_ADDR_VAR 0 12
35580: PUSH
35581: LD_VAR 0 18
35585: PPUSH
35586: LD_INT 22
35588: PUSH
35589: LD_VAR 0 16
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: PUSH
35598: LD_INT 2
35600: PUSH
35601: LD_INT 30
35603: PUSH
35604: LD_INT 0
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PUSH
35611: LD_INT 30
35613: PUSH
35614: LD_INT 1
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: PUSH
35621: EMPTY
35622: LIST
35623: LIST
35624: LIST
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: PPUSH
35630: CALL_OW 72
35634: ST_TO_ADDR
35635: GO 35789
35637: LD_INT 3
35639: DOUBLE
35640: EQUAL
35641: IFTRUE 35645
35643: GO 35707
35645: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35646: LD_ADDR_VAR 0 12
35650: PUSH
35651: LD_VAR 0 18
35655: PPUSH
35656: LD_INT 22
35658: PUSH
35659: LD_VAR 0 16
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: LD_INT 2
35670: PUSH
35671: LD_INT 30
35673: PUSH
35674: LD_INT 2
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 30
35683: PUSH
35684: LD_INT 3
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: LIST
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: PPUSH
35700: CALL_OW 72
35704: ST_TO_ADDR
35705: GO 35789
35707: LD_INT 4
35709: DOUBLE
35710: EQUAL
35711: IFTRUE 35715
35713: GO 35788
35715: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35716: LD_ADDR_VAR 0 12
35720: PUSH
35721: LD_VAR 0 18
35725: PPUSH
35726: LD_INT 22
35728: PUSH
35729: LD_VAR 0 16
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: PUSH
35738: LD_INT 2
35740: PUSH
35741: LD_INT 30
35743: PUSH
35744: LD_INT 6
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: PUSH
35751: LD_INT 30
35753: PUSH
35754: LD_INT 7
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: PUSH
35761: LD_INT 30
35763: PUSH
35764: LD_INT 8
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: LIST
35775: LIST
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: PPUSH
35781: CALL_OW 72
35785: ST_TO_ADDR
35786: GO 35789
35788: POP
// if i = 1 then
35789: LD_VAR 0 8
35793: PUSH
35794: LD_INT 1
35796: EQUAL
35797: IFFALSE 35908
// begin tmp := [ ] ;
35799: LD_ADDR_VAR 0 19
35803: PUSH
35804: EMPTY
35805: ST_TO_ADDR
// for j in f do
35806: LD_ADDR_VAR 0 9
35810: PUSH
35811: LD_VAR 0 12
35815: PUSH
35816: FOR_IN
35817: IFFALSE 35890
// if GetBType ( j ) = b_bunker then
35819: LD_VAR 0 9
35823: PPUSH
35824: CALL_OW 266
35828: PUSH
35829: LD_INT 32
35831: EQUAL
35832: IFFALSE 35859
// tmp := Insert ( tmp , 1 , j ) else
35834: LD_ADDR_VAR 0 19
35838: PUSH
35839: LD_VAR 0 19
35843: PPUSH
35844: LD_INT 1
35846: PPUSH
35847: LD_VAR 0 9
35851: PPUSH
35852: CALL_OW 2
35856: ST_TO_ADDR
35857: GO 35888
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35859: LD_ADDR_VAR 0 19
35863: PUSH
35864: LD_VAR 0 19
35868: PPUSH
35869: LD_VAR 0 19
35873: PUSH
35874: LD_INT 1
35876: PLUS
35877: PPUSH
35878: LD_VAR 0 9
35882: PPUSH
35883: CALL_OW 2
35887: ST_TO_ADDR
35888: GO 35816
35890: POP
35891: POP
// if tmp then
35892: LD_VAR 0 19
35896: IFFALSE 35908
// f := tmp ;
35898: LD_ADDR_VAR 0 12
35902: PUSH
35903: LD_VAR 0 19
35907: ST_TO_ADDR
// end ; x := personel [ i ] ;
35908: LD_ADDR_VAR 0 13
35912: PUSH
35913: LD_VAR 0 6
35917: PUSH
35918: LD_VAR 0 8
35922: ARRAY
35923: ST_TO_ADDR
// if x = - 1 then
35924: LD_VAR 0 13
35928: PUSH
35929: LD_INT 1
35931: NEG
35932: EQUAL
35933: IFFALSE 36142
// begin for j in f do
35935: LD_ADDR_VAR 0 9
35939: PUSH
35940: LD_VAR 0 12
35944: PUSH
35945: FOR_IN
35946: IFFALSE 36138
// repeat InitHc ;
35948: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35952: LD_VAR 0 9
35956: PPUSH
35957: CALL_OW 266
35961: PUSH
35962: LD_INT 5
35964: EQUAL
35965: IFFALSE 36035
// begin if UnitsInside ( j ) < 3 then
35967: LD_VAR 0 9
35971: PPUSH
35972: CALL_OW 313
35976: PUSH
35977: LD_INT 3
35979: LESS
35980: IFFALSE 36016
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35982: LD_INT 0
35984: PPUSH
35985: LD_INT 5
35987: PUSH
35988: LD_INT 8
35990: PUSH
35991: LD_INT 9
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: LIST
35998: PUSH
35999: LD_VAR 0 17
36003: ARRAY
36004: PPUSH
36005: LD_VAR 0 4
36009: PPUSH
36010: CALL_OW 380
36014: GO 36033
// PrepareHuman ( false , i , skill ) ;
36016: LD_INT 0
36018: PPUSH
36019: LD_VAR 0 8
36023: PPUSH
36024: LD_VAR 0 4
36028: PPUSH
36029: CALL_OW 380
// end else
36033: GO 36052
// PrepareHuman ( false , i , skill ) ;
36035: LD_INT 0
36037: PPUSH
36038: LD_VAR 0 8
36042: PPUSH
36043: LD_VAR 0 4
36047: PPUSH
36048: CALL_OW 380
// un := CreateHuman ;
36052: LD_ADDR_VAR 0 14
36056: PUSH
36057: CALL_OW 44
36061: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36062: LD_ADDR_VAR 0 7
36066: PUSH
36067: LD_VAR 0 7
36071: PPUSH
36072: LD_INT 1
36074: PPUSH
36075: LD_VAR 0 14
36079: PPUSH
36080: CALL_OW 2
36084: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36085: LD_VAR 0 14
36089: PPUSH
36090: LD_VAR 0 9
36094: PPUSH
36095: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36099: LD_VAR 0 9
36103: PPUSH
36104: CALL_OW 313
36108: PUSH
36109: LD_INT 6
36111: EQUAL
36112: PUSH
36113: LD_VAR 0 9
36117: PPUSH
36118: CALL_OW 266
36122: PUSH
36123: LD_INT 32
36125: PUSH
36126: LD_INT 31
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: IN
36133: OR
36134: IFFALSE 35948
36136: GO 35945
36138: POP
36139: POP
// end else
36140: GO 36522
// for j = 1 to x do
36142: LD_ADDR_VAR 0 9
36146: PUSH
36147: DOUBLE
36148: LD_INT 1
36150: DEC
36151: ST_TO_ADDR
36152: LD_VAR 0 13
36156: PUSH
36157: FOR_TO
36158: IFFALSE 36520
// begin InitHc ;
36160: CALL_OW 19
// if not f then
36164: LD_VAR 0 12
36168: NOT
36169: IFFALSE 36258
// begin PrepareHuman ( false , i , skill ) ;
36171: LD_INT 0
36173: PPUSH
36174: LD_VAR 0 8
36178: PPUSH
36179: LD_VAR 0 4
36183: PPUSH
36184: CALL_OW 380
// un := CreateHuman ;
36188: LD_ADDR_VAR 0 14
36192: PUSH
36193: CALL_OW 44
36197: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36198: LD_ADDR_VAR 0 7
36202: PUSH
36203: LD_VAR 0 7
36207: PPUSH
36208: LD_INT 1
36210: PPUSH
36211: LD_VAR 0 14
36215: PPUSH
36216: CALL_OW 2
36220: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36221: LD_VAR 0 14
36225: PPUSH
36226: LD_VAR 0 1
36230: PPUSH
36231: CALL_OW 250
36235: PPUSH
36236: LD_VAR 0 1
36240: PPUSH
36241: CALL_OW 251
36245: PPUSH
36246: LD_INT 10
36248: PPUSH
36249: LD_INT 0
36251: PPUSH
36252: CALL_OW 50
// continue ;
36256: GO 36157
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36258: LD_VAR 0 12
36262: PUSH
36263: LD_INT 1
36265: ARRAY
36266: PPUSH
36267: CALL_OW 313
36271: PUSH
36272: LD_VAR 0 12
36276: PUSH
36277: LD_INT 1
36279: ARRAY
36280: PPUSH
36281: CALL_OW 266
36285: PUSH
36286: LD_INT 32
36288: PUSH
36289: LD_INT 31
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: IN
36296: AND
36297: PUSH
36298: LD_VAR 0 12
36302: PUSH
36303: LD_INT 1
36305: ARRAY
36306: PPUSH
36307: CALL_OW 313
36311: PUSH
36312: LD_INT 6
36314: EQUAL
36315: OR
36316: IFFALSE 36336
// f := Delete ( f , 1 ) ;
36318: LD_ADDR_VAR 0 12
36322: PUSH
36323: LD_VAR 0 12
36327: PPUSH
36328: LD_INT 1
36330: PPUSH
36331: CALL_OW 3
36335: ST_TO_ADDR
// if not f then
36336: LD_VAR 0 12
36340: NOT
36341: IFFALSE 36359
// begin x := x + 2 ;
36343: LD_ADDR_VAR 0 13
36347: PUSH
36348: LD_VAR 0 13
36352: PUSH
36353: LD_INT 2
36355: PLUS
36356: ST_TO_ADDR
// continue ;
36357: GO 36157
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36359: LD_VAR 0 12
36363: PUSH
36364: LD_INT 1
36366: ARRAY
36367: PPUSH
36368: CALL_OW 266
36372: PUSH
36373: LD_INT 5
36375: EQUAL
36376: IFFALSE 36450
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36378: LD_VAR 0 12
36382: PUSH
36383: LD_INT 1
36385: ARRAY
36386: PPUSH
36387: CALL_OW 313
36391: PUSH
36392: LD_INT 3
36394: LESS
36395: IFFALSE 36431
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36397: LD_INT 0
36399: PPUSH
36400: LD_INT 5
36402: PUSH
36403: LD_INT 8
36405: PUSH
36406: LD_INT 9
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: LIST
36413: PUSH
36414: LD_VAR 0 17
36418: ARRAY
36419: PPUSH
36420: LD_VAR 0 4
36424: PPUSH
36425: CALL_OW 380
36429: GO 36448
// PrepareHuman ( false , i , skill ) ;
36431: LD_INT 0
36433: PPUSH
36434: LD_VAR 0 8
36438: PPUSH
36439: LD_VAR 0 4
36443: PPUSH
36444: CALL_OW 380
// end else
36448: GO 36467
// PrepareHuman ( false , i , skill ) ;
36450: LD_INT 0
36452: PPUSH
36453: LD_VAR 0 8
36457: PPUSH
36458: LD_VAR 0 4
36462: PPUSH
36463: CALL_OW 380
// un := CreateHuman ;
36467: LD_ADDR_VAR 0 14
36471: PUSH
36472: CALL_OW 44
36476: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36477: LD_ADDR_VAR 0 7
36481: PUSH
36482: LD_VAR 0 7
36486: PPUSH
36487: LD_INT 1
36489: PPUSH
36490: LD_VAR 0 14
36494: PPUSH
36495: CALL_OW 2
36499: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36500: LD_VAR 0 14
36504: PPUSH
36505: LD_VAR 0 12
36509: PUSH
36510: LD_INT 1
36512: ARRAY
36513: PPUSH
36514: CALL_OW 52
// end ;
36518: GO 36157
36520: POP
36521: POP
// end ;
36522: GO 35459
36524: POP
36525: POP
// result := result ^ buildings ;
36526: LD_ADDR_VAR 0 7
36530: PUSH
36531: LD_VAR 0 7
36535: PUSH
36536: LD_VAR 0 18
36540: ADD
36541: ST_TO_ADDR
// end else
36542: GO 36685
// begin for i = 1 to personel do
36544: LD_ADDR_VAR 0 8
36548: PUSH
36549: DOUBLE
36550: LD_INT 1
36552: DEC
36553: ST_TO_ADDR
36554: LD_VAR 0 6
36558: PUSH
36559: FOR_TO
36560: IFFALSE 36683
// begin if i > 4 then
36562: LD_VAR 0 8
36566: PUSH
36567: LD_INT 4
36569: GREATER
36570: IFFALSE 36574
// break ;
36572: GO 36683
// x := personel [ i ] ;
36574: LD_ADDR_VAR 0 13
36578: PUSH
36579: LD_VAR 0 6
36583: PUSH
36584: LD_VAR 0 8
36588: ARRAY
36589: ST_TO_ADDR
// if x = - 1 then
36590: LD_VAR 0 13
36594: PUSH
36595: LD_INT 1
36597: NEG
36598: EQUAL
36599: IFFALSE 36603
// continue ;
36601: GO 36559
// PrepareHuman ( false , i , skill ) ;
36603: LD_INT 0
36605: PPUSH
36606: LD_VAR 0 8
36610: PPUSH
36611: LD_VAR 0 4
36615: PPUSH
36616: CALL_OW 380
// un := CreateHuman ;
36620: LD_ADDR_VAR 0 14
36624: PUSH
36625: CALL_OW 44
36629: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36630: LD_VAR 0 14
36634: PPUSH
36635: LD_VAR 0 1
36639: PPUSH
36640: CALL_OW 250
36644: PPUSH
36645: LD_VAR 0 1
36649: PPUSH
36650: CALL_OW 251
36654: PPUSH
36655: LD_INT 10
36657: PPUSH
36658: LD_INT 0
36660: PPUSH
36661: CALL_OW 50
// result := result ^ un ;
36665: LD_ADDR_VAR 0 7
36669: PUSH
36670: LD_VAR 0 7
36674: PUSH
36675: LD_VAR 0 14
36679: ADD
36680: ST_TO_ADDR
// end ;
36681: GO 36559
36683: POP
36684: POP
// end ; end ;
36685: LD_VAR 0 7
36689: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36690: LD_INT 0
36692: PPUSH
36693: PPUSH
36694: PPUSH
36695: PPUSH
36696: PPUSH
36697: PPUSH
36698: PPUSH
36699: PPUSH
36700: PPUSH
36701: PPUSH
36702: PPUSH
36703: PPUSH
36704: PPUSH
36705: PPUSH
36706: PPUSH
36707: PPUSH
// result := false ;
36708: LD_ADDR_VAR 0 3
36712: PUSH
36713: LD_INT 0
36715: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36716: LD_VAR 0 1
36720: NOT
36721: PUSH
36722: LD_VAR 0 1
36726: PPUSH
36727: CALL_OW 266
36731: PUSH
36732: LD_INT 32
36734: PUSH
36735: LD_INT 33
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: IN
36742: NOT
36743: OR
36744: IFFALSE 36748
// exit ;
36746: GO 37884
// nat := GetNation ( tower ) ;
36748: LD_ADDR_VAR 0 12
36752: PUSH
36753: LD_VAR 0 1
36757: PPUSH
36758: CALL_OW 248
36762: ST_TO_ADDR
// side := GetSide ( tower ) ;
36763: LD_ADDR_VAR 0 16
36767: PUSH
36768: LD_VAR 0 1
36772: PPUSH
36773: CALL_OW 255
36777: ST_TO_ADDR
// x := GetX ( tower ) ;
36778: LD_ADDR_VAR 0 10
36782: PUSH
36783: LD_VAR 0 1
36787: PPUSH
36788: CALL_OW 250
36792: ST_TO_ADDR
// y := GetY ( tower ) ;
36793: LD_ADDR_VAR 0 11
36797: PUSH
36798: LD_VAR 0 1
36802: PPUSH
36803: CALL_OW 251
36807: ST_TO_ADDR
// if not x or not y then
36808: LD_VAR 0 10
36812: NOT
36813: PUSH
36814: LD_VAR 0 11
36818: NOT
36819: OR
36820: IFFALSE 36824
// exit ;
36822: GO 37884
// weapon := 0 ;
36824: LD_ADDR_VAR 0 18
36828: PUSH
36829: LD_INT 0
36831: ST_TO_ADDR
// fac_list := [ ] ;
36832: LD_ADDR_VAR 0 17
36836: PUSH
36837: EMPTY
36838: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
36839: LD_ADDR_VAR 0 6
36843: PUSH
36844: LD_VAR 0 1
36848: PPUSH
36849: CALL_OW 274
36853: PPUSH
36854: LD_VAR 0 2
36858: PPUSH
36859: CALL 34462 0 2
36863: PPUSH
36864: LD_INT 30
36866: PUSH
36867: LD_INT 3
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: PPUSH
36874: CALL_OW 72
36878: ST_TO_ADDR
// if not factories then
36879: LD_VAR 0 6
36883: NOT
36884: IFFALSE 36888
// exit ;
36886: GO 37884
// for i in factories do
36888: LD_ADDR_VAR 0 8
36892: PUSH
36893: LD_VAR 0 6
36897: PUSH
36898: FOR_IN
36899: IFFALSE 36924
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36901: LD_ADDR_VAR 0 17
36905: PUSH
36906: LD_VAR 0 17
36910: PUSH
36911: LD_VAR 0 8
36915: PPUSH
36916: CALL_OW 478
36920: UNION
36921: ST_TO_ADDR
36922: GO 36898
36924: POP
36925: POP
// if not fac_list then
36926: LD_VAR 0 17
36930: NOT
36931: IFFALSE 36935
// exit ;
36933: GO 37884
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36935: LD_ADDR_VAR 0 5
36939: PUSH
36940: LD_INT 4
36942: PUSH
36943: LD_INT 5
36945: PUSH
36946: LD_INT 9
36948: PUSH
36949: LD_INT 10
36951: PUSH
36952: LD_INT 6
36954: PUSH
36955: LD_INT 7
36957: PUSH
36958: LD_INT 11
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: PUSH
36970: LD_INT 27
36972: PUSH
36973: LD_INT 28
36975: PUSH
36976: LD_INT 26
36978: PUSH
36979: LD_INT 30
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: PUSH
36988: LD_INT 43
36990: PUSH
36991: LD_INT 44
36993: PUSH
36994: LD_INT 46
36996: PUSH
36997: LD_INT 45
36999: PUSH
37000: LD_INT 47
37002: PUSH
37003: LD_INT 49
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: LIST
37018: PUSH
37019: LD_VAR 0 12
37023: ARRAY
37024: ST_TO_ADDR
// for i in list do
37025: LD_ADDR_VAR 0 8
37029: PUSH
37030: LD_VAR 0 5
37034: PUSH
37035: FOR_IN
37036: IFFALSE 37069
// if not i in fac_list then
37038: LD_VAR 0 8
37042: PUSH
37043: LD_VAR 0 17
37047: IN
37048: NOT
37049: IFFALSE 37067
// list := list diff i ;
37051: LD_ADDR_VAR 0 5
37055: PUSH
37056: LD_VAR 0 5
37060: PUSH
37061: LD_VAR 0 8
37065: DIFF
37066: ST_TO_ADDR
37067: GO 37035
37069: POP
37070: POP
// if not list then
37071: LD_VAR 0 5
37075: NOT
37076: IFFALSE 37080
// exit ;
37078: GO 37884
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37080: LD_VAR 0 12
37084: PUSH
37085: LD_INT 3
37087: EQUAL
37088: PUSH
37089: LD_INT 49
37091: PUSH
37092: LD_VAR 0 5
37096: IN
37097: AND
37098: PUSH
37099: LD_INT 31
37101: PPUSH
37102: LD_VAR 0 16
37106: PPUSH
37107: CALL_OW 321
37111: PUSH
37112: LD_INT 2
37114: EQUAL
37115: AND
37116: IFFALSE 37176
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37118: LD_INT 22
37120: PUSH
37121: LD_VAR 0 16
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PUSH
37130: LD_INT 35
37132: PUSH
37133: LD_INT 49
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: PUSH
37140: LD_INT 91
37142: PUSH
37143: LD_VAR 0 1
37147: PUSH
37148: LD_INT 10
37150: PUSH
37151: EMPTY
37152: LIST
37153: LIST
37154: LIST
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: LIST
37160: PPUSH
37161: CALL_OW 69
37165: NOT
37166: IFFALSE 37176
// weapon := ru_time_lapser ;
37168: LD_ADDR_VAR 0 18
37172: PUSH
37173: LD_INT 49
37175: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37176: LD_VAR 0 12
37180: PUSH
37181: LD_INT 1
37183: PUSH
37184: LD_INT 2
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: IN
37191: PUSH
37192: LD_INT 11
37194: PUSH
37195: LD_VAR 0 5
37199: IN
37200: PUSH
37201: LD_INT 30
37203: PUSH
37204: LD_VAR 0 5
37208: IN
37209: OR
37210: AND
37211: PUSH
37212: LD_INT 6
37214: PPUSH
37215: LD_VAR 0 16
37219: PPUSH
37220: CALL_OW 321
37224: PUSH
37225: LD_INT 2
37227: EQUAL
37228: AND
37229: IFFALSE 37394
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37231: LD_INT 22
37233: PUSH
37234: LD_VAR 0 16
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: PUSH
37243: LD_INT 2
37245: PUSH
37246: LD_INT 35
37248: PUSH
37249: LD_INT 11
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 35
37258: PUSH
37259: LD_INT 30
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: LIST
37270: PUSH
37271: LD_INT 91
37273: PUSH
37274: LD_VAR 0 1
37278: PUSH
37279: LD_INT 18
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: LIST
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: LIST
37291: PPUSH
37292: CALL_OW 69
37296: NOT
37297: PUSH
37298: LD_INT 22
37300: PUSH
37301: LD_VAR 0 16
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: PUSH
37310: LD_INT 2
37312: PUSH
37313: LD_INT 30
37315: PUSH
37316: LD_INT 32
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: PUSH
37323: LD_INT 30
37325: PUSH
37326: LD_INT 33
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: LIST
37337: PUSH
37338: LD_INT 91
37340: PUSH
37341: LD_VAR 0 1
37345: PUSH
37346: LD_INT 12
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: LIST
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: LIST
37358: PUSH
37359: EMPTY
37360: LIST
37361: PPUSH
37362: CALL_OW 69
37366: PUSH
37367: LD_INT 2
37369: GREATER
37370: AND
37371: IFFALSE 37394
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37373: LD_ADDR_VAR 0 18
37377: PUSH
37378: LD_INT 11
37380: PUSH
37381: LD_INT 30
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: PUSH
37388: LD_VAR 0 12
37392: ARRAY
37393: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37394: LD_VAR 0 18
37398: NOT
37399: PUSH
37400: LD_INT 40
37402: PPUSH
37403: LD_VAR 0 16
37407: PPUSH
37408: CALL_OW 321
37412: PUSH
37413: LD_INT 2
37415: EQUAL
37416: AND
37417: PUSH
37418: LD_INT 7
37420: PUSH
37421: LD_VAR 0 5
37425: IN
37426: PUSH
37427: LD_INT 28
37429: PUSH
37430: LD_VAR 0 5
37434: IN
37435: OR
37436: PUSH
37437: LD_INT 45
37439: PUSH
37440: LD_VAR 0 5
37444: IN
37445: OR
37446: AND
37447: IFFALSE 37701
// begin hex := GetHexInfo ( x , y ) ;
37449: LD_ADDR_VAR 0 4
37453: PUSH
37454: LD_VAR 0 10
37458: PPUSH
37459: LD_VAR 0 11
37463: PPUSH
37464: CALL_OW 546
37468: ST_TO_ADDR
// if hex [ 1 ] then
37469: LD_VAR 0 4
37473: PUSH
37474: LD_INT 1
37476: ARRAY
37477: IFFALSE 37481
// exit ;
37479: GO 37884
// height := hex [ 2 ] ;
37481: LD_ADDR_VAR 0 15
37485: PUSH
37486: LD_VAR 0 4
37490: PUSH
37491: LD_INT 2
37493: ARRAY
37494: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37495: LD_ADDR_VAR 0 14
37499: PUSH
37500: LD_INT 0
37502: PUSH
37503: LD_INT 2
37505: PUSH
37506: LD_INT 3
37508: PUSH
37509: LD_INT 5
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: LIST
37516: LIST
37517: ST_TO_ADDR
// for i in tmp do
37518: LD_ADDR_VAR 0 8
37522: PUSH
37523: LD_VAR 0 14
37527: PUSH
37528: FOR_IN
37529: IFFALSE 37699
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37531: LD_ADDR_VAR 0 9
37535: PUSH
37536: LD_VAR 0 10
37540: PPUSH
37541: LD_VAR 0 8
37545: PPUSH
37546: LD_INT 5
37548: PPUSH
37549: CALL_OW 272
37553: PUSH
37554: LD_VAR 0 11
37558: PPUSH
37559: LD_VAR 0 8
37563: PPUSH
37564: LD_INT 5
37566: PPUSH
37567: CALL_OW 273
37571: PUSH
37572: EMPTY
37573: LIST
37574: LIST
37575: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37576: LD_VAR 0 9
37580: PUSH
37581: LD_INT 1
37583: ARRAY
37584: PPUSH
37585: LD_VAR 0 9
37589: PUSH
37590: LD_INT 2
37592: ARRAY
37593: PPUSH
37594: CALL_OW 488
37598: IFFALSE 37697
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37600: LD_ADDR_VAR 0 4
37604: PUSH
37605: LD_VAR 0 9
37609: PUSH
37610: LD_INT 1
37612: ARRAY
37613: PPUSH
37614: LD_VAR 0 9
37618: PUSH
37619: LD_INT 2
37621: ARRAY
37622: PPUSH
37623: CALL_OW 546
37627: ST_TO_ADDR
// if hex [ 1 ] then
37628: LD_VAR 0 4
37632: PUSH
37633: LD_INT 1
37635: ARRAY
37636: IFFALSE 37640
// continue ;
37638: GO 37528
// h := hex [ 2 ] ;
37640: LD_ADDR_VAR 0 13
37644: PUSH
37645: LD_VAR 0 4
37649: PUSH
37650: LD_INT 2
37652: ARRAY
37653: ST_TO_ADDR
// if h + 7 < height then
37654: LD_VAR 0 13
37658: PUSH
37659: LD_INT 7
37661: PLUS
37662: PUSH
37663: LD_VAR 0 15
37667: LESS
37668: IFFALSE 37697
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37670: LD_ADDR_VAR 0 18
37674: PUSH
37675: LD_INT 7
37677: PUSH
37678: LD_INT 28
37680: PUSH
37681: LD_INT 45
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: LIST
37688: PUSH
37689: LD_VAR 0 12
37693: ARRAY
37694: ST_TO_ADDR
// break ;
37695: GO 37699
// end ; end ; end ;
37697: GO 37528
37699: POP
37700: POP
// end ; if not weapon then
37701: LD_VAR 0 18
37705: NOT
37706: IFFALSE 37766
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37708: LD_ADDR_VAR 0 5
37712: PUSH
37713: LD_VAR 0 5
37717: PUSH
37718: LD_INT 11
37720: PUSH
37721: LD_INT 30
37723: PUSH
37724: LD_INT 49
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: LIST
37731: DIFF
37732: ST_TO_ADDR
// if not list then
37733: LD_VAR 0 5
37737: NOT
37738: IFFALSE 37742
// exit ;
37740: GO 37884
// weapon := list [ rand ( 1 , list ) ] ;
37742: LD_ADDR_VAR 0 18
37746: PUSH
37747: LD_VAR 0 5
37751: PUSH
37752: LD_INT 1
37754: PPUSH
37755: LD_VAR 0 5
37759: PPUSH
37760: CALL_OW 12
37764: ARRAY
37765: ST_TO_ADDR
// end ; if weapon then
37766: LD_VAR 0 18
37770: IFFALSE 37884
// begin tmp := CostOfWeapon ( weapon ) ;
37772: LD_ADDR_VAR 0 14
37776: PUSH
37777: LD_VAR 0 18
37781: PPUSH
37782: CALL_OW 451
37786: ST_TO_ADDR
// j := GetBase ( tower ) ;
37787: LD_ADDR_VAR 0 9
37791: PUSH
37792: LD_VAR 0 1
37796: PPUSH
37797: CALL_OW 274
37801: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37802: LD_VAR 0 9
37806: PPUSH
37807: LD_INT 1
37809: PPUSH
37810: CALL_OW 275
37814: PUSH
37815: LD_VAR 0 14
37819: PUSH
37820: LD_INT 1
37822: ARRAY
37823: GREATEREQUAL
37824: PUSH
37825: LD_VAR 0 9
37829: PPUSH
37830: LD_INT 2
37832: PPUSH
37833: CALL_OW 275
37837: PUSH
37838: LD_VAR 0 14
37842: PUSH
37843: LD_INT 2
37845: ARRAY
37846: GREATEREQUAL
37847: AND
37848: PUSH
37849: LD_VAR 0 9
37853: PPUSH
37854: LD_INT 3
37856: PPUSH
37857: CALL_OW 275
37861: PUSH
37862: LD_VAR 0 14
37866: PUSH
37867: LD_INT 3
37869: ARRAY
37870: GREATEREQUAL
37871: AND
37872: IFFALSE 37884
// result := weapon ;
37874: LD_ADDR_VAR 0 3
37878: PUSH
37879: LD_VAR 0 18
37883: ST_TO_ADDR
// end ; end ;
37884: LD_VAR 0 3
37888: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37889: LD_INT 0
37891: PPUSH
37892: PPUSH
// result := true ;
37893: LD_ADDR_VAR 0 3
37897: PUSH
37898: LD_INT 1
37900: ST_TO_ADDR
// if array1 = array2 then
37901: LD_VAR 0 1
37905: PUSH
37906: LD_VAR 0 2
37910: EQUAL
37911: IFFALSE 37971
// begin for i = 1 to array1 do
37913: LD_ADDR_VAR 0 4
37917: PUSH
37918: DOUBLE
37919: LD_INT 1
37921: DEC
37922: ST_TO_ADDR
37923: LD_VAR 0 1
37927: PUSH
37928: FOR_TO
37929: IFFALSE 37967
// if array1 [ i ] <> array2 [ i ] then
37931: LD_VAR 0 1
37935: PUSH
37936: LD_VAR 0 4
37940: ARRAY
37941: PUSH
37942: LD_VAR 0 2
37946: PUSH
37947: LD_VAR 0 4
37951: ARRAY
37952: NONEQUAL
37953: IFFALSE 37965
// begin result := false ;
37955: LD_ADDR_VAR 0 3
37959: PUSH
37960: LD_INT 0
37962: ST_TO_ADDR
// break ;
37963: GO 37967
// end ;
37965: GO 37928
37967: POP
37968: POP
// end else
37969: GO 37979
// result := false ;
37971: LD_ADDR_VAR 0 3
37975: PUSH
37976: LD_INT 0
37978: ST_TO_ADDR
// end ;
37979: LD_VAR 0 3
37983: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
37984: LD_INT 0
37986: PPUSH
37987: PPUSH
37988: PPUSH
// pom := GetBase ( fac ) ;
37989: LD_ADDR_VAR 0 5
37993: PUSH
37994: LD_VAR 0 1
37998: PPUSH
37999: CALL_OW 274
38003: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38004: LD_ADDR_VAR 0 4
38008: PUSH
38009: LD_VAR 0 2
38013: PUSH
38014: LD_INT 1
38016: ARRAY
38017: PPUSH
38018: LD_VAR 0 2
38022: PUSH
38023: LD_INT 2
38025: ARRAY
38026: PPUSH
38027: LD_VAR 0 2
38031: PUSH
38032: LD_INT 3
38034: ARRAY
38035: PPUSH
38036: LD_VAR 0 2
38040: PUSH
38041: LD_INT 4
38043: ARRAY
38044: PPUSH
38045: CALL_OW 449
38049: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38050: LD_ADDR_VAR 0 3
38054: PUSH
38055: LD_VAR 0 5
38059: PPUSH
38060: LD_INT 1
38062: PPUSH
38063: CALL_OW 275
38067: PUSH
38068: LD_VAR 0 4
38072: PUSH
38073: LD_INT 1
38075: ARRAY
38076: GREATEREQUAL
38077: PUSH
38078: LD_VAR 0 5
38082: PPUSH
38083: LD_INT 2
38085: PPUSH
38086: CALL_OW 275
38090: PUSH
38091: LD_VAR 0 4
38095: PUSH
38096: LD_INT 2
38098: ARRAY
38099: GREATEREQUAL
38100: AND
38101: PUSH
38102: LD_VAR 0 5
38106: PPUSH
38107: LD_INT 3
38109: PPUSH
38110: CALL_OW 275
38114: PUSH
38115: LD_VAR 0 4
38119: PUSH
38120: LD_INT 3
38122: ARRAY
38123: GREATEREQUAL
38124: AND
38125: ST_TO_ADDR
// end ;
38126: LD_VAR 0 3
38130: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38131: LD_INT 0
38133: PPUSH
38134: PPUSH
38135: PPUSH
38136: PPUSH
// pom := GetBase ( building ) ;
38137: LD_ADDR_VAR 0 3
38141: PUSH
38142: LD_VAR 0 1
38146: PPUSH
38147: CALL_OW 274
38151: ST_TO_ADDR
// if not pom then
38152: LD_VAR 0 3
38156: NOT
38157: IFFALSE 38161
// exit ;
38159: GO 38331
// btype := GetBType ( building ) ;
38161: LD_ADDR_VAR 0 5
38165: PUSH
38166: LD_VAR 0 1
38170: PPUSH
38171: CALL_OW 266
38175: ST_TO_ADDR
// if btype = b_armoury then
38176: LD_VAR 0 5
38180: PUSH
38181: LD_INT 4
38183: EQUAL
38184: IFFALSE 38194
// btype := b_barracks ;
38186: LD_ADDR_VAR 0 5
38190: PUSH
38191: LD_INT 5
38193: ST_TO_ADDR
// if btype = b_depot then
38194: LD_VAR 0 5
38198: PUSH
38199: LD_INT 0
38201: EQUAL
38202: IFFALSE 38212
// btype := b_warehouse ;
38204: LD_ADDR_VAR 0 5
38208: PUSH
38209: LD_INT 1
38211: ST_TO_ADDR
// if btype = b_workshop then
38212: LD_VAR 0 5
38216: PUSH
38217: LD_INT 2
38219: EQUAL
38220: IFFALSE 38230
// btype := b_factory ;
38222: LD_ADDR_VAR 0 5
38226: PUSH
38227: LD_INT 3
38229: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38230: LD_ADDR_VAR 0 4
38234: PUSH
38235: LD_VAR 0 5
38239: PPUSH
38240: LD_VAR 0 1
38244: PPUSH
38245: CALL_OW 248
38249: PPUSH
38250: CALL_OW 450
38254: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38255: LD_ADDR_VAR 0 2
38259: PUSH
38260: LD_VAR 0 3
38264: PPUSH
38265: LD_INT 1
38267: PPUSH
38268: CALL_OW 275
38272: PUSH
38273: LD_VAR 0 4
38277: PUSH
38278: LD_INT 1
38280: ARRAY
38281: GREATEREQUAL
38282: PUSH
38283: LD_VAR 0 3
38287: PPUSH
38288: LD_INT 2
38290: PPUSH
38291: CALL_OW 275
38295: PUSH
38296: LD_VAR 0 4
38300: PUSH
38301: LD_INT 2
38303: ARRAY
38304: GREATEREQUAL
38305: AND
38306: PUSH
38307: LD_VAR 0 3
38311: PPUSH
38312: LD_INT 3
38314: PPUSH
38315: CALL_OW 275
38319: PUSH
38320: LD_VAR 0 4
38324: PUSH
38325: LD_INT 3
38327: ARRAY
38328: GREATEREQUAL
38329: AND
38330: ST_TO_ADDR
// end ;
38331: LD_VAR 0 2
38335: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38336: LD_INT 0
38338: PPUSH
38339: PPUSH
38340: PPUSH
// pom := GetBase ( building ) ;
38341: LD_ADDR_VAR 0 4
38345: PUSH
38346: LD_VAR 0 1
38350: PPUSH
38351: CALL_OW 274
38355: ST_TO_ADDR
// if not pom then
38356: LD_VAR 0 4
38360: NOT
38361: IFFALSE 38365
// exit ;
38363: GO 38466
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38365: LD_ADDR_VAR 0 5
38369: PUSH
38370: LD_VAR 0 2
38374: PPUSH
38375: LD_VAR 0 1
38379: PPUSH
38380: CALL_OW 248
38384: PPUSH
38385: CALL_OW 450
38389: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38390: LD_ADDR_VAR 0 3
38394: PUSH
38395: LD_VAR 0 4
38399: PPUSH
38400: LD_INT 1
38402: PPUSH
38403: CALL_OW 275
38407: PUSH
38408: LD_VAR 0 5
38412: PUSH
38413: LD_INT 1
38415: ARRAY
38416: GREATEREQUAL
38417: PUSH
38418: LD_VAR 0 4
38422: PPUSH
38423: LD_INT 2
38425: PPUSH
38426: CALL_OW 275
38430: PUSH
38431: LD_VAR 0 5
38435: PUSH
38436: LD_INT 2
38438: ARRAY
38439: GREATEREQUAL
38440: AND
38441: PUSH
38442: LD_VAR 0 4
38446: PPUSH
38447: LD_INT 3
38449: PPUSH
38450: CALL_OW 275
38454: PUSH
38455: LD_VAR 0 5
38459: PUSH
38460: LD_INT 3
38462: ARRAY
38463: GREATEREQUAL
38464: AND
38465: ST_TO_ADDR
// end ;
38466: LD_VAR 0 3
38470: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
38471: LD_INT 0
38473: PPUSH
38474: PPUSH
38475: PPUSH
38476: PPUSH
38477: PPUSH
38478: PPUSH
38479: PPUSH
38480: PPUSH
38481: PPUSH
38482: PPUSH
// result := false ;
38483: LD_ADDR_VAR 0 6
38487: PUSH
38488: LD_INT 0
38490: ST_TO_ADDR
// if not base or not btype or not x or not y then
38491: LD_VAR 0 1
38495: NOT
38496: PUSH
38497: LD_VAR 0 2
38501: NOT
38502: OR
38503: PUSH
38504: LD_VAR 0 3
38508: NOT
38509: OR
38510: PUSH
38511: LD_VAR 0 4
38515: NOT
38516: OR
38517: IFFALSE 38521
// exit ;
38519: GO 39130
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
38521: LD_ADDR_VAR 0 12
38525: PUSH
38526: LD_VAR 0 2
38530: PPUSH
38531: LD_VAR 0 3
38535: PPUSH
38536: LD_VAR 0 4
38540: PPUSH
38541: LD_VAR 0 5
38545: PPUSH
38546: LD_VAR 0 1
38550: PUSH
38551: LD_INT 1
38553: ARRAY
38554: PPUSH
38555: CALL_OW 248
38559: PPUSH
38560: LD_INT 0
38562: PPUSH
38563: CALL 39967 0 6
38567: ST_TO_ADDR
// if not hexes then
38568: LD_VAR 0 12
38572: NOT
38573: IFFALSE 38577
// exit ;
38575: GO 39130
// for i = 1 to hexes do
38577: LD_ADDR_VAR 0 7
38581: PUSH
38582: DOUBLE
38583: LD_INT 1
38585: DEC
38586: ST_TO_ADDR
38587: LD_VAR 0 12
38591: PUSH
38592: FOR_TO
38593: IFFALSE 39128
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38595: LD_ADDR_VAR 0 11
38599: PUSH
38600: LD_VAR 0 12
38604: PUSH
38605: LD_VAR 0 7
38609: ARRAY
38610: PUSH
38611: LD_INT 1
38613: ARRAY
38614: PPUSH
38615: LD_VAR 0 12
38619: PUSH
38620: LD_VAR 0 7
38624: ARRAY
38625: PUSH
38626: LD_INT 2
38628: ARRAY
38629: PPUSH
38630: CALL_OW 428
38634: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38635: LD_VAR 0 12
38639: PUSH
38640: LD_VAR 0 7
38644: ARRAY
38645: PUSH
38646: LD_INT 1
38648: ARRAY
38649: PPUSH
38650: LD_VAR 0 12
38654: PUSH
38655: LD_VAR 0 7
38659: ARRAY
38660: PUSH
38661: LD_INT 2
38663: ARRAY
38664: PPUSH
38665: CALL_OW 351
38669: PUSH
38670: LD_VAR 0 12
38674: PUSH
38675: LD_VAR 0 7
38679: ARRAY
38680: PUSH
38681: LD_INT 1
38683: ARRAY
38684: PPUSH
38685: LD_VAR 0 12
38689: PUSH
38690: LD_VAR 0 7
38694: ARRAY
38695: PUSH
38696: LD_INT 2
38698: ARRAY
38699: PPUSH
38700: CALL_OW 488
38704: NOT
38705: OR
38706: PUSH
38707: LD_VAR 0 11
38711: PPUSH
38712: CALL_OW 247
38716: PUSH
38717: LD_INT 3
38719: EQUAL
38720: OR
38721: IFFALSE 38727
// exit ;
38723: POP
38724: POP
38725: GO 39130
// if not tmp or not tmp in base then
38727: LD_VAR 0 11
38731: NOT
38732: PUSH
38733: LD_VAR 0 11
38737: PUSH
38738: LD_VAR 0 1
38742: IN
38743: NOT
38744: OR
38745: IFFALSE 38749
// continue ;
38747: GO 38592
// result := true ;
38749: LD_ADDR_VAR 0 6
38753: PUSH
38754: LD_INT 1
38756: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38757: LD_ADDR_VAR 0 15
38761: PUSH
38762: LD_VAR 0 1
38766: PPUSH
38767: LD_INT 22
38769: PUSH
38770: LD_VAR 0 11
38774: PPUSH
38775: CALL_OW 255
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: LD_INT 2
38786: PUSH
38787: LD_INT 30
38789: PUSH
38790: LD_INT 0
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: PUSH
38797: LD_INT 30
38799: PUSH
38800: LD_INT 1
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: LIST
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PPUSH
38816: CALL_OW 72
38820: ST_TO_ADDR
// if dep then
38821: LD_VAR 0 15
38825: IFFALSE 38961
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38827: LD_ADDR_VAR 0 14
38831: PUSH
38832: LD_VAR 0 15
38836: PUSH
38837: LD_INT 1
38839: ARRAY
38840: PPUSH
38841: CALL_OW 250
38845: PPUSH
38846: LD_VAR 0 15
38850: PUSH
38851: LD_INT 1
38853: ARRAY
38854: PPUSH
38855: CALL_OW 254
38859: PPUSH
38860: LD_INT 5
38862: PPUSH
38863: CALL_OW 272
38867: PUSH
38868: LD_VAR 0 15
38872: PUSH
38873: LD_INT 1
38875: ARRAY
38876: PPUSH
38877: CALL_OW 251
38881: PPUSH
38882: LD_VAR 0 15
38886: PUSH
38887: LD_INT 1
38889: ARRAY
38890: PPUSH
38891: CALL_OW 254
38895: PPUSH
38896: LD_INT 5
38898: PPUSH
38899: CALL_OW 273
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38908: LD_VAR 0 14
38912: PUSH
38913: LD_INT 1
38915: ARRAY
38916: PPUSH
38917: LD_VAR 0 14
38921: PUSH
38922: LD_INT 2
38924: ARRAY
38925: PPUSH
38926: CALL_OW 488
38930: IFFALSE 38961
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38932: LD_VAR 0 11
38936: PPUSH
38937: LD_VAR 0 14
38941: PUSH
38942: LD_INT 1
38944: ARRAY
38945: PPUSH
38946: LD_VAR 0 14
38950: PUSH
38951: LD_INT 2
38953: ARRAY
38954: PPUSH
38955: CALL_OW 111
// continue ;
38959: GO 38592
// end ; end ; r := GetDir ( tmp ) ;
38961: LD_ADDR_VAR 0 13
38965: PUSH
38966: LD_VAR 0 11
38970: PPUSH
38971: CALL_OW 254
38975: ST_TO_ADDR
// if r = 5 then
38976: LD_VAR 0 13
38980: PUSH
38981: LD_INT 5
38983: EQUAL
38984: IFFALSE 38994
// r := 0 ;
38986: LD_ADDR_VAR 0 13
38990: PUSH
38991: LD_INT 0
38993: ST_TO_ADDR
// for j = r to 5 do
38994: LD_ADDR_VAR 0 8
38998: PUSH
38999: DOUBLE
39000: LD_VAR 0 13
39004: DEC
39005: ST_TO_ADDR
39006: LD_INT 5
39008: PUSH
39009: FOR_TO
39010: IFFALSE 39124
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39012: LD_ADDR_VAR 0 9
39016: PUSH
39017: LD_VAR 0 11
39021: PPUSH
39022: CALL_OW 250
39026: PPUSH
39027: LD_VAR 0 8
39031: PPUSH
39032: LD_INT 2
39034: PPUSH
39035: CALL_OW 272
39039: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39040: LD_ADDR_VAR 0 10
39044: PUSH
39045: LD_VAR 0 11
39049: PPUSH
39050: CALL_OW 251
39054: PPUSH
39055: LD_VAR 0 8
39059: PPUSH
39060: LD_INT 2
39062: PPUSH
39063: CALL_OW 273
39067: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39068: LD_VAR 0 9
39072: PPUSH
39073: LD_VAR 0 10
39077: PPUSH
39078: CALL_OW 488
39082: PUSH
39083: LD_VAR 0 9
39087: PPUSH
39088: LD_VAR 0 10
39092: PPUSH
39093: CALL_OW 428
39097: NOT
39098: AND
39099: IFFALSE 39122
// begin ComMoveXY ( tmp , _x , _y ) ;
39101: LD_VAR 0 11
39105: PPUSH
39106: LD_VAR 0 9
39110: PPUSH
39111: LD_VAR 0 10
39115: PPUSH
39116: CALL_OW 111
// break ;
39120: GO 39124
// end ; end ;
39122: GO 39009
39124: POP
39125: POP
// end ;
39126: GO 38592
39128: POP
39129: POP
// end ;
39130: LD_VAR 0 6
39134: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
39135: LD_INT 0
39137: PPUSH
39138: PPUSH
39139: PPUSH
39140: PPUSH
39141: PPUSH
39142: PPUSH
39143: PPUSH
39144: PPUSH
39145: PPUSH
39146: PPUSH
// result := false ;
39147: LD_ADDR_VAR 0 6
39151: PUSH
39152: LD_INT 0
39154: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39155: LD_VAR 0 1
39159: NOT
39160: PUSH
39161: LD_VAR 0 1
39165: PPUSH
39166: CALL_OW 266
39170: PUSH
39171: LD_INT 0
39173: PUSH
39174: LD_INT 1
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: IN
39181: NOT
39182: OR
39183: PUSH
39184: LD_VAR 0 2
39188: NOT
39189: OR
39190: PUSH
39191: LD_VAR 0 5
39195: PUSH
39196: LD_INT 0
39198: PUSH
39199: LD_INT 1
39201: PUSH
39202: LD_INT 2
39204: PUSH
39205: LD_INT 3
39207: PUSH
39208: LD_INT 4
39210: PUSH
39211: LD_INT 5
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: IN
39222: NOT
39223: OR
39224: PUSH
39225: LD_VAR 0 3
39229: PPUSH
39230: LD_VAR 0 4
39234: PPUSH
39235: CALL_OW 488
39239: NOT
39240: OR
39241: IFFALSE 39245
// exit ;
39243: GO 39962
// pom := GetBase ( depot ) ;
39245: LD_ADDR_VAR 0 10
39249: PUSH
39250: LD_VAR 0 1
39254: PPUSH
39255: CALL_OW 274
39259: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39260: LD_ADDR_VAR 0 11
39264: PUSH
39265: LD_VAR 0 2
39269: PPUSH
39270: LD_VAR 0 1
39274: PPUSH
39275: CALL_OW 248
39279: PPUSH
39280: CALL_OW 450
39284: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39285: LD_VAR 0 10
39289: PPUSH
39290: LD_INT 1
39292: PPUSH
39293: CALL_OW 275
39297: PUSH
39298: LD_VAR 0 11
39302: PUSH
39303: LD_INT 1
39305: ARRAY
39306: GREATEREQUAL
39307: PUSH
39308: LD_VAR 0 10
39312: PPUSH
39313: LD_INT 2
39315: PPUSH
39316: CALL_OW 275
39320: PUSH
39321: LD_VAR 0 11
39325: PUSH
39326: LD_INT 2
39328: ARRAY
39329: GREATEREQUAL
39330: AND
39331: PUSH
39332: LD_VAR 0 10
39336: PPUSH
39337: LD_INT 3
39339: PPUSH
39340: CALL_OW 275
39344: PUSH
39345: LD_VAR 0 11
39349: PUSH
39350: LD_INT 3
39352: ARRAY
39353: GREATEREQUAL
39354: AND
39355: NOT
39356: IFFALSE 39360
// exit ;
39358: GO 39962
// if GetBType ( depot ) = b_depot then
39360: LD_VAR 0 1
39364: PPUSH
39365: CALL_OW 266
39369: PUSH
39370: LD_INT 0
39372: EQUAL
39373: IFFALSE 39385
// dist := 28 else
39375: LD_ADDR_VAR 0 14
39379: PUSH
39380: LD_INT 28
39382: ST_TO_ADDR
39383: GO 39393
// dist := 36 ;
39385: LD_ADDR_VAR 0 14
39389: PUSH
39390: LD_INT 36
39392: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39393: LD_VAR 0 1
39397: PPUSH
39398: LD_VAR 0 3
39402: PPUSH
39403: LD_VAR 0 4
39407: PPUSH
39408: CALL_OW 297
39412: PUSH
39413: LD_VAR 0 14
39417: GREATER
39418: IFFALSE 39422
// exit ;
39420: GO 39962
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39422: LD_ADDR_VAR 0 12
39426: PUSH
39427: LD_VAR 0 2
39431: PPUSH
39432: LD_VAR 0 3
39436: PPUSH
39437: LD_VAR 0 4
39441: PPUSH
39442: LD_VAR 0 5
39446: PPUSH
39447: LD_VAR 0 1
39451: PPUSH
39452: CALL_OW 248
39456: PPUSH
39457: LD_INT 0
39459: PPUSH
39460: CALL 39967 0 6
39464: ST_TO_ADDR
// if not hexes then
39465: LD_VAR 0 12
39469: NOT
39470: IFFALSE 39474
// exit ;
39472: GO 39962
// hex := GetHexInfo ( x , y ) ;
39474: LD_ADDR_VAR 0 15
39478: PUSH
39479: LD_VAR 0 3
39483: PPUSH
39484: LD_VAR 0 4
39488: PPUSH
39489: CALL_OW 546
39493: ST_TO_ADDR
// if hex [ 1 ] then
39494: LD_VAR 0 15
39498: PUSH
39499: LD_INT 1
39501: ARRAY
39502: IFFALSE 39506
// exit ;
39504: GO 39962
// height := hex [ 2 ] ;
39506: LD_ADDR_VAR 0 13
39510: PUSH
39511: LD_VAR 0 15
39515: PUSH
39516: LD_INT 2
39518: ARRAY
39519: ST_TO_ADDR
// for i = 1 to hexes do
39520: LD_ADDR_VAR 0 7
39524: PUSH
39525: DOUBLE
39526: LD_INT 1
39528: DEC
39529: ST_TO_ADDR
39530: LD_VAR 0 12
39534: PUSH
39535: FOR_TO
39536: IFFALSE 39866
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39538: LD_VAR 0 12
39542: PUSH
39543: LD_VAR 0 7
39547: ARRAY
39548: PUSH
39549: LD_INT 1
39551: ARRAY
39552: PPUSH
39553: LD_VAR 0 12
39557: PUSH
39558: LD_VAR 0 7
39562: ARRAY
39563: PUSH
39564: LD_INT 2
39566: ARRAY
39567: PPUSH
39568: CALL_OW 488
39572: NOT
39573: PUSH
39574: LD_VAR 0 12
39578: PUSH
39579: LD_VAR 0 7
39583: ARRAY
39584: PUSH
39585: LD_INT 1
39587: ARRAY
39588: PPUSH
39589: LD_VAR 0 12
39593: PUSH
39594: LD_VAR 0 7
39598: ARRAY
39599: PUSH
39600: LD_INT 2
39602: ARRAY
39603: PPUSH
39604: CALL_OW 428
39608: PUSH
39609: LD_INT 0
39611: GREATER
39612: OR
39613: PUSH
39614: LD_VAR 0 12
39618: PUSH
39619: LD_VAR 0 7
39623: ARRAY
39624: PUSH
39625: LD_INT 1
39627: ARRAY
39628: PPUSH
39629: LD_VAR 0 12
39633: PUSH
39634: LD_VAR 0 7
39638: ARRAY
39639: PUSH
39640: LD_INT 2
39642: ARRAY
39643: PPUSH
39644: CALL_OW 351
39648: OR
39649: IFFALSE 39655
// exit ;
39651: POP
39652: POP
39653: GO 39962
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39655: LD_ADDR_VAR 0 8
39659: PUSH
39660: LD_VAR 0 12
39664: PUSH
39665: LD_VAR 0 7
39669: ARRAY
39670: PUSH
39671: LD_INT 1
39673: ARRAY
39674: PPUSH
39675: LD_VAR 0 12
39679: PUSH
39680: LD_VAR 0 7
39684: ARRAY
39685: PUSH
39686: LD_INT 2
39688: ARRAY
39689: PPUSH
39690: CALL_OW 546
39694: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39695: LD_VAR 0 8
39699: PUSH
39700: LD_INT 1
39702: ARRAY
39703: PUSH
39704: LD_VAR 0 8
39708: PUSH
39709: LD_INT 2
39711: ARRAY
39712: PUSH
39713: LD_VAR 0 13
39717: PUSH
39718: LD_INT 2
39720: PLUS
39721: GREATER
39722: OR
39723: PUSH
39724: LD_VAR 0 8
39728: PUSH
39729: LD_INT 2
39731: ARRAY
39732: PUSH
39733: LD_VAR 0 13
39737: PUSH
39738: LD_INT 2
39740: MINUS
39741: LESS
39742: OR
39743: PUSH
39744: LD_VAR 0 8
39748: PUSH
39749: LD_INT 3
39751: ARRAY
39752: PUSH
39753: LD_INT 0
39755: PUSH
39756: LD_INT 8
39758: PUSH
39759: LD_INT 9
39761: PUSH
39762: LD_INT 10
39764: PUSH
39765: LD_INT 11
39767: PUSH
39768: LD_INT 12
39770: PUSH
39771: LD_INT 13
39773: PUSH
39774: LD_INT 16
39776: PUSH
39777: LD_INT 17
39779: PUSH
39780: LD_INT 18
39782: PUSH
39783: LD_INT 19
39785: PUSH
39786: LD_INT 20
39788: PUSH
39789: LD_INT 21
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: LIST
39806: IN
39807: NOT
39808: OR
39809: PUSH
39810: LD_VAR 0 8
39814: PUSH
39815: LD_INT 5
39817: ARRAY
39818: NOT
39819: OR
39820: PUSH
39821: LD_VAR 0 8
39825: PUSH
39826: LD_INT 6
39828: ARRAY
39829: PUSH
39830: LD_INT 1
39832: PUSH
39833: LD_INT 2
39835: PUSH
39836: LD_INT 7
39838: PUSH
39839: LD_INT 9
39841: PUSH
39842: LD_INT 10
39844: PUSH
39845: LD_INT 11
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: IN
39856: NOT
39857: OR
39858: IFFALSE 39864
// exit ;
39860: POP
39861: POP
39862: GO 39962
// end ;
39864: GO 39535
39866: POP
39867: POP
// side := GetSide ( depot ) ;
39868: LD_ADDR_VAR 0 9
39872: PUSH
39873: LD_VAR 0 1
39877: PPUSH
39878: CALL_OW 255
39882: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39883: LD_VAR 0 9
39887: PPUSH
39888: LD_VAR 0 3
39892: PPUSH
39893: LD_VAR 0 4
39897: PPUSH
39898: LD_INT 20
39900: PPUSH
39901: CALL 32616 0 4
39905: PUSH
39906: LD_INT 4
39908: ARRAY
39909: IFFALSE 39913
// exit ;
39911: GO 39962
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39913: LD_VAR 0 2
39917: PUSH
39918: LD_INT 29
39920: PUSH
39921: LD_INT 30
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: IN
39928: PUSH
39929: LD_VAR 0 3
39933: PPUSH
39934: LD_VAR 0 4
39938: PPUSH
39939: LD_VAR 0 9
39943: PPUSH
39944: CALL_OW 440
39948: NOT
39949: AND
39950: IFFALSE 39954
// exit ;
39952: GO 39962
// result := true ;
39954: LD_ADDR_VAR 0 6
39958: PUSH
39959: LD_INT 1
39961: ST_TO_ADDR
// end ;
39962: LD_VAR 0 6
39966: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
39967: LD_INT 0
39969: PPUSH
39970: PPUSH
39971: PPUSH
39972: PPUSH
39973: PPUSH
39974: PPUSH
39975: PPUSH
39976: PPUSH
39977: PPUSH
39978: PPUSH
39979: PPUSH
39980: PPUSH
39981: PPUSH
39982: PPUSH
39983: PPUSH
39984: PPUSH
39985: PPUSH
39986: PPUSH
39987: PPUSH
39988: PPUSH
39989: PPUSH
39990: PPUSH
39991: PPUSH
39992: PPUSH
39993: PPUSH
39994: PPUSH
39995: PPUSH
39996: PPUSH
39997: PPUSH
39998: PPUSH
39999: PPUSH
40000: PPUSH
40001: PPUSH
40002: PPUSH
40003: PPUSH
40004: PPUSH
40005: PPUSH
40006: PPUSH
40007: PPUSH
40008: PPUSH
40009: PPUSH
40010: PPUSH
40011: PPUSH
40012: PPUSH
40013: PPUSH
40014: PPUSH
40015: PPUSH
40016: PPUSH
40017: PPUSH
40018: PPUSH
40019: PPUSH
40020: PPUSH
40021: PPUSH
40022: PPUSH
40023: PPUSH
40024: PPUSH
40025: PPUSH
40026: PPUSH
// result = [ ] ;
40027: LD_ADDR_VAR 0 7
40031: PUSH
40032: EMPTY
40033: ST_TO_ADDR
// temp_list = [ ] ;
40034: LD_ADDR_VAR 0 9
40038: PUSH
40039: EMPTY
40040: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40041: LD_VAR 0 4
40045: PUSH
40046: LD_INT 0
40048: PUSH
40049: LD_INT 1
40051: PUSH
40052: LD_INT 2
40054: PUSH
40055: LD_INT 3
40057: PUSH
40058: LD_INT 4
40060: PUSH
40061: LD_INT 5
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: IN
40072: NOT
40073: PUSH
40074: LD_VAR 0 1
40078: PUSH
40079: LD_INT 0
40081: PUSH
40082: LD_INT 1
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: IN
40089: PUSH
40090: LD_VAR 0 5
40094: PUSH
40095: LD_INT 1
40097: PUSH
40098: LD_INT 2
40100: PUSH
40101: LD_INT 3
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: LIST
40108: IN
40109: NOT
40110: AND
40111: OR
40112: IFFALSE 40116
// exit ;
40114: GO 58507
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40116: LD_VAR 0 1
40120: PUSH
40121: LD_INT 6
40123: PUSH
40124: LD_INT 7
40126: PUSH
40127: LD_INT 8
40129: PUSH
40130: LD_INT 13
40132: PUSH
40133: LD_INT 12
40135: PUSH
40136: LD_INT 15
40138: PUSH
40139: LD_INT 11
40141: PUSH
40142: LD_INT 14
40144: PUSH
40145: LD_INT 10
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: LIST
40156: LIST
40157: LIST
40158: IN
40159: IFFALSE 40169
// btype = b_lab ;
40161: LD_ADDR_VAR 0 1
40165: PUSH
40166: LD_INT 6
40168: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40169: LD_VAR 0 6
40173: PUSH
40174: LD_INT 0
40176: PUSH
40177: LD_INT 1
40179: PUSH
40180: LD_INT 2
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: LIST
40187: IN
40188: NOT
40189: PUSH
40190: LD_VAR 0 1
40194: PUSH
40195: LD_INT 0
40197: PUSH
40198: LD_INT 1
40200: PUSH
40201: LD_INT 2
40203: PUSH
40204: LD_INT 3
40206: PUSH
40207: LD_INT 6
40209: PUSH
40210: LD_INT 36
40212: PUSH
40213: LD_INT 4
40215: PUSH
40216: LD_INT 5
40218: PUSH
40219: LD_INT 31
40221: PUSH
40222: LD_INT 32
40224: PUSH
40225: LD_INT 33
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: IN
40241: NOT
40242: PUSH
40243: LD_VAR 0 6
40247: PUSH
40248: LD_INT 1
40250: EQUAL
40251: AND
40252: OR
40253: PUSH
40254: LD_VAR 0 1
40258: PUSH
40259: LD_INT 2
40261: PUSH
40262: LD_INT 3
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: IN
40269: NOT
40270: PUSH
40271: LD_VAR 0 6
40275: PUSH
40276: LD_INT 2
40278: EQUAL
40279: AND
40280: OR
40281: IFFALSE 40291
// mode = 0 ;
40283: LD_ADDR_VAR 0 6
40287: PUSH
40288: LD_INT 0
40290: ST_TO_ADDR
// case mode of 0 :
40291: LD_VAR 0 6
40295: PUSH
40296: LD_INT 0
40298: DOUBLE
40299: EQUAL
40300: IFTRUE 40304
40302: GO 51757
40304: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40305: LD_ADDR_VAR 0 11
40309: PUSH
40310: LD_INT 0
40312: PUSH
40313: LD_INT 0
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 0
40322: PUSH
40323: LD_INT 1
40325: NEG
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PUSH
40331: LD_INT 1
40333: PUSH
40334: LD_INT 0
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: PUSH
40341: LD_INT 1
40343: PUSH
40344: LD_INT 1
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 0
40353: PUSH
40354: LD_INT 1
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: PUSH
40361: LD_INT 1
40363: NEG
40364: PUSH
40365: LD_INT 0
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: PUSH
40372: LD_INT 1
40374: NEG
40375: PUSH
40376: LD_INT 1
40378: NEG
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: LD_INT 1
40386: NEG
40387: PUSH
40388: LD_INT 2
40390: NEG
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 0
40398: PUSH
40399: LD_INT 2
40401: NEG
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 1
40409: PUSH
40410: LD_INT 1
40412: NEG
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: PUSH
40418: LD_INT 1
40420: PUSH
40421: LD_INT 2
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PUSH
40428: LD_INT 0
40430: PUSH
40431: LD_INT 2
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: LD_INT 1
40440: NEG
40441: PUSH
40442: LD_INT 1
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: PUSH
40449: LD_INT 1
40451: PUSH
40452: LD_INT 3
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 0
40461: PUSH
40462: LD_INT 3
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 1
40471: NEG
40472: PUSH
40473: LD_INT 2
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40498: LD_ADDR_VAR 0 12
40502: PUSH
40503: LD_INT 0
40505: PUSH
40506: LD_INT 0
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: LD_INT 0
40515: PUSH
40516: LD_INT 1
40518: NEG
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 1
40526: PUSH
40527: LD_INT 0
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 1
40536: PUSH
40537: LD_INT 1
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 0
40546: PUSH
40547: LD_INT 1
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 1
40556: NEG
40557: PUSH
40558: LD_INT 0
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PUSH
40565: LD_INT 1
40567: NEG
40568: PUSH
40569: LD_INT 1
40571: NEG
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PUSH
40577: LD_INT 1
40579: PUSH
40580: LD_INT 1
40582: NEG
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 2
40590: PUSH
40591: LD_INT 0
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 2
40600: PUSH
40601: LD_INT 1
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 1
40610: NEG
40611: PUSH
40612: LD_INT 1
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 2
40621: NEG
40622: PUSH
40623: LD_INT 0
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 2
40632: NEG
40633: PUSH
40634: LD_INT 1
40636: NEG
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 2
40644: NEG
40645: PUSH
40646: LD_INT 1
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 3
40655: NEG
40656: PUSH
40657: LD_INT 0
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 3
40666: NEG
40667: PUSH
40668: LD_INT 1
40670: NEG
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: LIST
40685: LIST
40686: LIST
40687: LIST
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40694: LD_ADDR_VAR 0 13
40698: PUSH
40699: LD_INT 0
40701: PUSH
40702: LD_INT 0
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: LD_INT 0
40711: PUSH
40712: LD_INT 1
40714: NEG
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: PUSH
40720: LD_INT 1
40722: PUSH
40723: LD_INT 0
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 1
40732: PUSH
40733: LD_INT 1
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 0
40742: PUSH
40743: LD_INT 1
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 1
40752: NEG
40753: PUSH
40754: LD_INT 0
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: LD_INT 1
40763: NEG
40764: PUSH
40765: LD_INT 1
40767: NEG
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 1
40775: NEG
40776: PUSH
40777: LD_INT 2
40779: NEG
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PUSH
40785: LD_INT 2
40787: PUSH
40788: LD_INT 1
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: LD_INT 2
40797: PUSH
40798: LD_INT 2
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 1
40807: PUSH
40808: LD_INT 2
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: LD_INT 2
40817: NEG
40818: PUSH
40819: LD_INT 1
40821: NEG
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 2
40829: NEG
40830: PUSH
40831: LD_INT 2
40833: NEG
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 2
40841: NEG
40842: PUSH
40843: LD_INT 3
40845: NEG
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 3
40853: NEG
40854: PUSH
40855: LD_INT 2
40857: NEG
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: LD_INT 3
40865: NEG
40866: PUSH
40867: LD_INT 3
40869: NEG
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40893: LD_ADDR_VAR 0 14
40897: PUSH
40898: LD_INT 0
40900: PUSH
40901: LD_INT 0
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: PUSH
40908: LD_INT 0
40910: PUSH
40911: LD_INT 1
40913: NEG
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: LD_INT 1
40921: PUSH
40922: LD_INT 0
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 1
40931: PUSH
40932: LD_INT 1
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 0
40941: PUSH
40942: LD_INT 1
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 1
40951: NEG
40952: PUSH
40953: LD_INT 0
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: PUSH
40960: LD_INT 1
40962: NEG
40963: PUSH
40964: LD_INT 1
40966: NEG
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 1
40974: NEG
40975: PUSH
40976: LD_INT 2
40978: NEG
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: PUSH
40984: LD_INT 0
40986: PUSH
40987: LD_INT 2
40989: NEG
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 1
40997: PUSH
40998: LD_INT 1
41000: NEG
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: LD_INT 1
41008: PUSH
41009: LD_INT 2
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 0
41018: PUSH
41019: LD_INT 2
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: LD_INT 1
41028: NEG
41029: PUSH
41030: LD_INT 1
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: PUSH
41037: LD_INT 1
41039: NEG
41040: PUSH
41041: LD_INT 3
41043: NEG
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: PUSH
41049: LD_INT 0
41051: PUSH
41052: LD_INT 3
41054: NEG
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 1
41062: PUSH
41063: LD_INT 2
41065: NEG
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: LIST
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41089: LD_ADDR_VAR 0 15
41093: PUSH
41094: LD_INT 0
41096: PUSH
41097: LD_INT 0
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: LD_INT 0
41106: PUSH
41107: LD_INT 1
41109: NEG
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: LD_INT 1
41117: PUSH
41118: LD_INT 0
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 1
41127: PUSH
41128: LD_INT 1
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 0
41137: PUSH
41138: LD_INT 1
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 1
41147: NEG
41148: PUSH
41149: LD_INT 0
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 1
41158: NEG
41159: PUSH
41160: LD_INT 1
41162: NEG
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: PUSH
41168: LD_INT 1
41170: PUSH
41171: LD_INT 1
41173: NEG
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 2
41181: PUSH
41182: LD_INT 0
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 2
41191: PUSH
41192: LD_INT 1
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 1
41201: NEG
41202: PUSH
41203: LD_INT 1
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 2
41212: NEG
41213: PUSH
41214: LD_INT 0
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 2
41223: NEG
41224: PUSH
41225: LD_INT 1
41227: NEG
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 2
41235: PUSH
41236: LD_INT 1
41238: NEG
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 3
41246: PUSH
41247: LD_INT 0
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 3
41256: PUSH
41257: LD_INT 1
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41282: LD_ADDR_VAR 0 16
41286: PUSH
41287: LD_INT 0
41289: PUSH
41290: LD_INT 0
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 0
41299: PUSH
41300: LD_INT 1
41302: NEG
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 1
41310: PUSH
41311: LD_INT 0
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 1
41320: PUSH
41321: LD_INT 1
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 0
41330: PUSH
41331: LD_INT 1
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 1
41340: NEG
41341: PUSH
41342: LD_INT 0
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: LD_INT 1
41351: NEG
41352: PUSH
41353: LD_INT 1
41355: NEG
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 1
41363: NEG
41364: PUSH
41365: LD_INT 2
41367: NEG
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: LD_INT 2
41375: PUSH
41376: LD_INT 1
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: PUSH
41383: LD_INT 2
41385: PUSH
41386: LD_INT 2
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 1
41395: PUSH
41396: LD_INT 2
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: LD_INT 2
41405: NEG
41406: PUSH
41407: LD_INT 1
41409: NEG
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 2
41417: NEG
41418: PUSH
41419: LD_INT 2
41421: NEG
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 3
41429: PUSH
41430: LD_INT 2
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 3
41439: PUSH
41440: LD_INT 3
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PUSH
41447: LD_INT 2
41449: PUSH
41450: LD_INT 3
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41475: LD_ADDR_VAR 0 17
41479: PUSH
41480: LD_INT 0
41482: PUSH
41483: LD_INT 0
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 0
41492: PUSH
41493: LD_INT 1
41495: NEG
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 1
41503: PUSH
41504: LD_INT 0
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: PUSH
41511: LD_INT 1
41513: PUSH
41514: LD_INT 1
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: LD_INT 0
41523: PUSH
41524: LD_INT 1
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: PUSH
41531: LD_INT 1
41533: NEG
41534: PUSH
41535: LD_INT 0
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 1
41544: NEG
41545: PUSH
41546: LD_INT 1
41548: NEG
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: PUSH
41554: LD_INT 1
41556: NEG
41557: PUSH
41558: LD_INT 2
41560: NEG
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 0
41568: PUSH
41569: LD_INT 2
41571: NEG
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: LD_INT 1
41579: PUSH
41580: LD_INT 1
41582: NEG
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: LD_INT 2
41590: PUSH
41591: LD_INT 0
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: PUSH
41598: LD_INT 2
41600: PUSH
41601: LD_INT 1
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 2
41610: PUSH
41611: LD_INT 2
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: LD_INT 1
41620: PUSH
41621: LD_INT 2
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: LD_INT 0
41630: PUSH
41631: LD_INT 2
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: PUSH
41638: LD_INT 1
41640: NEG
41641: PUSH
41642: LD_INT 1
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: LD_INT 2
41651: NEG
41652: PUSH
41653: LD_INT 0
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 2
41662: NEG
41663: PUSH
41664: LD_INT 1
41666: NEG
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 2
41674: NEG
41675: PUSH
41676: LD_INT 2
41678: NEG
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41705: LD_ADDR_VAR 0 18
41709: PUSH
41710: LD_INT 0
41712: PUSH
41713: LD_INT 0
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 0
41722: PUSH
41723: LD_INT 1
41725: NEG
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 1
41733: PUSH
41734: LD_INT 0
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 1
41743: PUSH
41744: LD_INT 1
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: LD_INT 0
41753: PUSH
41754: LD_INT 1
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 1
41763: NEG
41764: PUSH
41765: LD_INT 0
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: PUSH
41772: LD_INT 1
41774: NEG
41775: PUSH
41776: LD_INT 1
41778: NEG
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PUSH
41784: LD_INT 1
41786: NEG
41787: PUSH
41788: LD_INT 2
41790: NEG
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: LD_INT 0
41798: PUSH
41799: LD_INT 2
41801: NEG
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 1
41809: PUSH
41810: LD_INT 1
41812: NEG
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 2
41820: PUSH
41821: LD_INT 0
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 2
41830: PUSH
41831: LD_INT 1
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: PUSH
41838: LD_INT 2
41840: PUSH
41841: LD_INT 2
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: LD_INT 1
41850: PUSH
41851: LD_INT 2
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 0
41860: PUSH
41861: LD_INT 2
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 1
41870: NEG
41871: PUSH
41872: LD_INT 1
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 2
41881: NEG
41882: PUSH
41883: LD_INT 0
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: LD_INT 2
41892: NEG
41893: PUSH
41894: LD_INT 1
41896: NEG
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 2
41904: NEG
41905: PUSH
41906: LD_INT 2
41908: NEG
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: LIST
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41935: LD_ADDR_VAR 0 19
41939: PUSH
41940: LD_INT 0
41942: PUSH
41943: LD_INT 0
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 0
41952: PUSH
41953: LD_INT 1
41955: NEG
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 1
41963: PUSH
41964: LD_INT 0
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 1
41973: PUSH
41974: LD_INT 1
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 0
41983: PUSH
41984: LD_INT 1
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 1
41993: NEG
41994: PUSH
41995: LD_INT 0
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 1
42004: NEG
42005: PUSH
42006: LD_INT 1
42008: NEG
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 1
42016: NEG
42017: PUSH
42018: LD_INT 2
42020: NEG
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 0
42028: PUSH
42029: LD_INT 2
42031: NEG
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 1
42039: PUSH
42040: LD_INT 1
42042: NEG
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 2
42050: PUSH
42051: LD_INT 0
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 2
42060: PUSH
42061: LD_INT 1
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 2
42070: PUSH
42071: LD_INT 2
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 1
42080: PUSH
42081: LD_INT 2
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 0
42090: PUSH
42091: LD_INT 2
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 1
42100: NEG
42101: PUSH
42102: LD_INT 1
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 2
42111: NEG
42112: PUSH
42113: LD_INT 0
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 2
42122: NEG
42123: PUSH
42124: LD_INT 1
42126: NEG
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: LD_INT 2
42134: NEG
42135: PUSH
42136: LD_INT 2
42138: NEG
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42165: LD_ADDR_VAR 0 20
42169: PUSH
42170: LD_INT 0
42172: PUSH
42173: LD_INT 0
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 0
42182: PUSH
42183: LD_INT 1
42185: NEG
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 1
42193: PUSH
42194: LD_INT 0
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 1
42203: PUSH
42204: LD_INT 1
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: LD_INT 0
42213: PUSH
42214: LD_INT 1
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 1
42223: NEG
42224: PUSH
42225: LD_INT 0
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 1
42234: NEG
42235: PUSH
42236: LD_INT 1
42238: NEG
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 1
42246: NEG
42247: PUSH
42248: LD_INT 2
42250: NEG
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 0
42258: PUSH
42259: LD_INT 2
42261: NEG
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: PUSH
42267: LD_INT 1
42269: PUSH
42270: LD_INT 1
42272: NEG
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 2
42280: PUSH
42281: LD_INT 0
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: LD_INT 2
42290: PUSH
42291: LD_INT 1
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: LD_INT 2
42300: PUSH
42301: LD_INT 2
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 1
42310: PUSH
42311: LD_INT 2
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: PUSH
42318: LD_INT 0
42320: PUSH
42321: LD_INT 2
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: LD_INT 1
42330: NEG
42331: PUSH
42332: LD_INT 1
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 2
42341: NEG
42342: PUSH
42343: LD_INT 0
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 2
42352: NEG
42353: PUSH
42354: LD_INT 1
42356: NEG
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 2
42364: NEG
42365: PUSH
42366: LD_INT 2
42368: NEG
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42395: LD_ADDR_VAR 0 21
42399: PUSH
42400: LD_INT 0
42402: PUSH
42403: LD_INT 0
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 0
42412: PUSH
42413: LD_INT 1
42415: NEG
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 1
42423: PUSH
42424: LD_INT 0
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: LD_INT 1
42433: PUSH
42434: LD_INT 1
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 0
42443: PUSH
42444: LD_INT 1
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 1
42453: NEG
42454: PUSH
42455: LD_INT 0
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 1
42464: NEG
42465: PUSH
42466: LD_INT 1
42468: NEG
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 1
42476: NEG
42477: PUSH
42478: LD_INT 2
42480: NEG
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PUSH
42486: LD_INT 0
42488: PUSH
42489: LD_INT 2
42491: NEG
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 1
42499: PUSH
42500: LD_INT 1
42502: NEG
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: LD_INT 2
42510: PUSH
42511: LD_INT 0
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: LD_INT 2
42520: PUSH
42521: LD_INT 1
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PUSH
42528: LD_INT 2
42530: PUSH
42531: LD_INT 2
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PUSH
42538: LD_INT 1
42540: PUSH
42541: LD_INT 2
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PUSH
42548: LD_INT 0
42550: PUSH
42551: LD_INT 2
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 1
42560: NEG
42561: PUSH
42562: LD_INT 1
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 2
42571: NEG
42572: PUSH
42573: LD_INT 0
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 2
42582: NEG
42583: PUSH
42584: LD_INT 1
42586: NEG
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: PUSH
42592: LD_INT 2
42594: NEG
42595: PUSH
42596: LD_INT 2
42598: NEG
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42625: LD_ADDR_VAR 0 22
42629: PUSH
42630: LD_INT 0
42632: PUSH
42633: LD_INT 0
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 0
42642: PUSH
42643: LD_INT 1
42645: NEG
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 1
42653: PUSH
42654: LD_INT 0
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 1
42663: PUSH
42664: LD_INT 1
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 0
42673: PUSH
42674: LD_INT 1
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 1
42683: NEG
42684: PUSH
42685: LD_INT 0
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 1
42694: NEG
42695: PUSH
42696: LD_INT 1
42698: NEG
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 1
42706: NEG
42707: PUSH
42708: LD_INT 2
42710: NEG
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 0
42718: PUSH
42719: LD_INT 2
42721: NEG
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 1
42729: PUSH
42730: LD_INT 1
42732: NEG
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 2
42740: PUSH
42741: LD_INT 0
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 2
42750: PUSH
42751: LD_INT 1
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 2
42760: PUSH
42761: LD_INT 2
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 1
42770: PUSH
42771: LD_INT 2
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: LD_INT 0
42780: PUSH
42781: LD_INT 2
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 1
42790: NEG
42791: PUSH
42792: LD_INT 1
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 2
42801: NEG
42802: PUSH
42803: LD_INT 0
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 2
42812: NEG
42813: PUSH
42814: LD_INT 1
42816: NEG
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: LD_INT 2
42824: NEG
42825: PUSH
42826: LD_INT 2
42828: NEG
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42855: LD_ADDR_VAR 0 23
42859: PUSH
42860: LD_INT 0
42862: PUSH
42863: LD_INT 0
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 0
42872: PUSH
42873: LD_INT 1
42875: NEG
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: LD_INT 1
42883: PUSH
42884: LD_INT 0
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 1
42893: PUSH
42894: LD_INT 1
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: LD_INT 0
42903: PUSH
42904: LD_INT 1
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 1
42913: NEG
42914: PUSH
42915: LD_INT 0
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 1
42924: NEG
42925: PUSH
42926: LD_INT 1
42928: NEG
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 1
42936: NEG
42937: PUSH
42938: LD_INT 2
42940: NEG
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 0
42948: PUSH
42949: LD_INT 2
42951: NEG
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PUSH
42957: LD_INT 1
42959: PUSH
42960: LD_INT 1
42962: NEG
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 2
42970: PUSH
42971: LD_INT 0
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 2
42980: PUSH
42981: LD_INT 1
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 2
42990: PUSH
42991: LD_INT 2
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 1
43000: PUSH
43001: LD_INT 2
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PUSH
43008: LD_INT 0
43010: PUSH
43011: LD_INT 2
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 1
43020: NEG
43021: PUSH
43022: LD_INT 1
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 2
43031: NEG
43032: PUSH
43033: LD_INT 0
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 2
43042: NEG
43043: PUSH
43044: LD_INT 1
43046: NEG
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 2
43054: NEG
43055: PUSH
43056: LD_INT 2
43058: NEG
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 2
43066: NEG
43067: PUSH
43068: LD_INT 3
43070: NEG
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 1
43078: NEG
43079: PUSH
43080: LD_INT 3
43082: NEG
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 1
43090: PUSH
43091: LD_INT 2
43093: NEG
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 2
43101: PUSH
43102: LD_INT 1
43104: NEG
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43135: LD_ADDR_VAR 0 24
43139: PUSH
43140: LD_INT 0
43142: PUSH
43143: LD_INT 0
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 0
43152: PUSH
43153: LD_INT 1
43155: NEG
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: PUSH
43161: LD_INT 1
43163: PUSH
43164: LD_INT 0
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 1
43173: PUSH
43174: LD_INT 1
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: LD_INT 0
43183: PUSH
43184: LD_INT 1
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 1
43193: NEG
43194: PUSH
43195: LD_INT 0
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 1
43204: NEG
43205: PUSH
43206: LD_INT 1
43208: NEG
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 1
43216: NEG
43217: PUSH
43218: LD_INT 2
43220: NEG
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: LD_INT 0
43228: PUSH
43229: LD_INT 2
43231: NEG
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 1
43239: PUSH
43240: LD_INT 1
43242: NEG
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 2
43250: PUSH
43251: LD_INT 0
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 2
43260: PUSH
43261: LD_INT 1
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 2
43270: PUSH
43271: LD_INT 2
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 1
43280: PUSH
43281: LD_INT 2
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 0
43290: PUSH
43291: LD_INT 2
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 1
43300: NEG
43301: PUSH
43302: LD_INT 1
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 2
43311: NEG
43312: PUSH
43313: LD_INT 0
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 2
43322: NEG
43323: PUSH
43324: LD_INT 1
43326: NEG
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 2
43334: NEG
43335: PUSH
43336: LD_INT 2
43338: NEG
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 1
43346: PUSH
43347: LD_INT 2
43349: NEG
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 2
43357: PUSH
43358: LD_INT 1
43360: NEG
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 3
43368: PUSH
43369: LD_INT 1
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 3
43378: PUSH
43379: LD_INT 2
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43411: LD_ADDR_VAR 0 25
43415: PUSH
43416: LD_INT 0
43418: PUSH
43419: LD_INT 0
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 0
43428: PUSH
43429: LD_INT 1
43431: NEG
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 1
43439: PUSH
43440: LD_INT 0
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 1
43449: PUSH
43450: LD_INT 1
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 0
43459: PUSH
43460: LD_INT 1
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: LD_INT 1
43469: NEG
43470: PUSH
43471: LD_INT 0
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 1
43480: NEG
43481: PUSH
43482: LD_INT 1
43484: NEG
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 1
43492: NEG
43493: PUSH
43494: LD_INT 2
43496: NEG
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 0
43504: PUSH
43505: LD_INT 2
43507: NEG
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 1
43515: PUSH
43516: LD_INT 1
43518: NEG
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 2
43526: PUSH
43527: LD_INT 0
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 2
43536: PUSH
43537: LD_INT 1
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 2
43546: PUSH
43547: LD_INT 2
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 1
43556: PUSH
43557: LD_INT 2
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 0
43566: PUSH
43567: LD_INT 2
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 1
43576: NEG
43577: PUSH
43578: LD_INT 1
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 2
43587: NEG
43588: PUSH
43589: LD_INT 0
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 2
43598: NEG
43599: PUSH
43600: LD_INT 1
43602: NEG
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 2
43610: NEG
43611: PUSH
43612: LD_INT 2
43614: NEG
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 3
43622: PUSH
43623: LD_INT 1
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 3
43632: PUSH
43633: LD_INT 2
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 2
43642: PUSH
43643: LD_INT 3
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 1
43652: PUSH
43653: LD_INT 3
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43685: LD_ADDR_VAR 0 26
43689: PUSH
43690: LD_INT 0
43692: PUSH
43693: LD_INT 0
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 0
43702: PUSH
43703: LD_INT 1
43705: NEG
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 1
43713: PUSH
43714: LD_INT 0
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 1
43723: PUSH
43724: LD_INT 1
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 0
43733: PUSH
43734: LD_INT 1
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 1
43743: NEG
43744: PUSH
43745: LD_INT 0
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 1
43754: NEG
43755: PUSH
43756: LD_INT 1
43758: NEG
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 1
43766: NEG
43767: PUSH
43768: LD_INT 2
43770: NEG
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 0
43778: PUSH
43779: LD_INT 2
43781: NEG
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 1
43789: PUSH
43790: LD_INT 1
43792: NEG
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 2
43800: PUSH
43801: LD_INT 0
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 2
43810: PUSH
43811: LD_INT 1
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 2
43820: PUSH
43821: LD_INT 2
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 1
43830: PUSH
43831: LD_INT 2
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 0
43840: PUSH
43841: LD_INT 2
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 1
43850: NEG
43851: PUSH
43852: LD_INT 1
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 2
43861: NEG
43862: PUSH
43863: LD_INT 0
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 2
43872: NEG
43873: PUSH
43874: LD_INT 1
43876: NEG
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 2
43884: NEG
43885: PUSH
43886: LD_INT 2
43888: NEG
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 2
43896: PUSH
43897: LD_INT 3
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 1
43906: PUSH
43907: LD_INT 3
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 1
43916: NEG
43917: PUSH
43918: LD_INT 2
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 2
43927: NEG
43928: PUSH
43929: LD_INT 1
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43961: LD_ADDR_VAR 0 27
43965: PUSH
43966: LD_INT 0
43968: PUSH
43969: LD_INT 0
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: LD_INT 0
43978: PUSH
43979: LD_INT 1
43981: NEG
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 1
43989: PUSH
43990: LD_INT 0
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 1
43999: PUSH
44000: LD_INT 1
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 0
44009: PUSH
44010: LD_INT 1
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 1
44019: NEG
44020: PUSH
44021: LD_INT 0
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 1
44030: NEG
44031: PUSH
44032: LD_INT 1
44034: NEG
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 1
44042: NEG
44043: PUSH
44044: LD_INT 2
44046: NEG
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: PUSH
44052: LD_INT 0
44054: PUSH
44055: LD_INT 2
44057: NEG
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 1
44065: PUSH
44066: LD_INT 1
44068: NEG
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 2
44076: PUSH
44077: LD_INT 0
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 2
44086: PUSH
44087: LD_INT 1
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 2
44096: PUSH
44097: LD_INT 2
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 1
44106: PUSH
44107: LD_INT 2
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: PUSH
44114: LD_INT 0
44116: PUSH
44117: LD_INT 2
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: LD_INT 1
44126: NEG
44127: PUSH
44128: LD_INT 1
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 2
44137: NEG
44138: PUSH
44139: LD_INT 0
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 2
44148: NEG
44149: PUSH
44150: LD_INT 1
44152: NEG
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 2
44160: NEG
44161: PUSH
44162: LD_INT 2
44164: NEG
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 1
44172: NEG
44173: PUSH
44174: LD_INT 2
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 2
44183: NEG
44184: PUSH
44185: LD_INT 1
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 3
44194: NEG
44195: PUSH
44196: LD_INT 1
44198: NEG
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 3
44206: NEG
44207: PUSH
44208: LD_INT 2
44210: NEG
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44241: LD_ADDR_VAR 0 28
44245: PUSH
44246: LD_INT 0
44248: PUSH
44249: LD_INT 0
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 0
44258: PUSH
44259: LD_INT 1
44261: NEG
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 1
44269: PUSH
44270: LD_INT 0
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 1
44279: PUSH
44280: LD_INT 1
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 0
44289: PUSH
44290: LD_INT 1
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 1
44299: NEG
44300: PUSH
44301: LD_INT 0
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 1
44310: NEG
44311: PUSH
44312: LD_INT 1
44314: NEG
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 1
44322: NEG
44323: PUSH
44324: LD_INT 2
44326: NEG
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 0
44334: PUSH
44335: LD_INT 2
44337: NEG
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 1
44345: PUSH
44346: LD_INT 1
44348: NEG
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 2
44356: PUSH
44357: LD_INT 0
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 2
44366: PUSH
44367: LD_INT 1
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 2
44376: PUSH
44377: LD_INT 2
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: LD_INT 1
44386: PUSH
44387: LD_INT 2
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: LD_INT 0
44396: PUSH
44397: LD_INT 2
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 1
44406: NEG
44407: PUSH
44408: LD_INT 1
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 2
44417: NEG
44418: PUSH
44419: LD_INT 0
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 2
44428: NEG
44429: PUSH
44430: LD_INT 1
44432: NEG
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 2
44440: NEG
44441: PUSH
44442: LD_INT 2
44444: NEG
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 2
44452: NEG
44453: PUSH
44454: LD_INT 3
44456: NEG
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 1
44464: NEG
44465: PUSH
44466: LD_INT 3
44468: NEG
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 3
44476: NEG
44477: PUSH
44478: LD_INT 1
44480: NEG
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 3
44488: NEG
44489: PUSH
44490: LD_INT 2
44492: NEG
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44523: LD_ADDR_VAR 0 29
44527: PUSH
44528: LD_INT 0
44530: PUSH
44531: LD_INT 0
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 0
44540: PUSH
44541: LD_INT 1
44543: NEG
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 1
44551: PUSH
44552: LD_INT 0
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 1
44561: PUSH
44562: LD_INT 1
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 0
44571: PUSH
44572: LD_INT 1
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 1
44581: NEG
44582: PUSH
44583: LD_INT 0
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 1
44592: NEG
44593: PUSH
44594: LD_INT 1
44596: NEG
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 1
44604: NEG
44605: PUSH
44606: LD_INT 2
44608: NEG
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 0
44616: PUSH
44617: LD_INT 2
44619: NEG
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 1
44627: PUSH
44628: LD_INT 1
44630: NEG
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 2
44638: PUSH
44639: LD_INT 0
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 2
44648: PUSH
44649: LD_INT 1
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 1
44658: PUSH
44659: LD_INT 2
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 0
44668: PUSH
44669: LD_INT 2
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 1
44678: NEG
44679: PUSH
44680: LD_INT 1
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 2
44689: NEG
44690: PUSH
44691: LD_INT 1
44693: NEG
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 2
44701: NEG
44702: PUSH
44703: LD_INT 2
44705: NEG
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 2
44713: NEG
44714: PUSH
44715: LD_INT 3
44717: NEG
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 2
44725: PUSH
44726: LD_INT 1
44728: NEG
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 3
44736: PUSH
44737: LD_INT 1
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 1
44746: PUSH
44747: LD_INT 3
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 1
44756: NEG
44757: PUSH
44758: LD_INT 2
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 3
44767: NEG
44768: PUSH
44769: LD_INT 2
44771: NEG
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44802: LD_ADDR_VAR 0 30
44806: PUSH
44807: LD_INT 0
44809: PUSH
44810: LD_INT 0
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 0
44819: PUSH
44820: LD_INT 1
44822: NEG
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 1
44830: PUSH
44831: LD_INT 0
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 1
44840: PUSH
44841: LD_INT 1
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 0
44850: PUSH
44851: LD_INT 1
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: PUSH
44858: LD_INT 1
44860: NEG
44861: PUSH
44862: LD_INT 0
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 1
44871: NEG
44872: PUSH
44873: LD_INT 1
44875: NEG
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 1
44883: NEG
44884: PUSH
44885: LD_INT 2
44887: NEG
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 0
44895: PUSH
44896: LD_INT 2
44898: NEG
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 1
44906: PUSH
44907: LD_INT 1
44909: NEG
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 2
44917: PUSH
44918: LD_INT 0
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 2
44927: PUSH
44928: LD_INT 1
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: LD_INT 2
44937: PUSH
44938: LD_INT 2
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: LD_INT 1
44947: PUSH
44948: LD_INT 2
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 1
44957: NEG
44958: PUSH
44959: LD_INT 1
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 2
44968: NEG
44969: PUSH
44970: LD_INT 0
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 2
44979: NEG
44980: PUSH
44981: LD_INT 1
44983: NEG
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 1
44991: NEG
44992: PUSH
44993: LD_INT 3
44995: NEG
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 1
45003: PUSH
45004: LD_INT 2
45006: NEG
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 3
45014: PUSH
45015: LD_INT 2
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 2
45024: PUSH
45025: LD_INT 3
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 2
45034: NEG
45035: PUSH
45036: LD_INT 1
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 3
45045: NEG
45046: PUSH
45047: LD_INT 1
45049: NEG
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45080: LD_ADDR_VAR 0 31
45084: PUSH
45085: LD_INT 0
45087: PUSH
45088: LD_INT 0
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 0
45097: PUSH
45098: LD_INT 1
45100: NEG
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 1
45108: PUSH
45109: LD_INT 0
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 1
45118: PUSH
45119: LD_INT 1
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 0
45128: PUSH
45129: LD_INT 1
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 1
45138: NEG
45139: PUSH
45140: LD_INT 0
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 1
45149: NEG
45150: PUSH
45151: LD_INT 1
45153: NEG
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 1
45161: NEG
45162: PUSH
45163: LD_INT 2
45165: NEG
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 1
45173: PUSH
45174: LD_INT 1
45176: NEG
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 2
45184: PUSH
45185: LD_INT 0
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 2
45194: PUSH
45195: LD_INT 1
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 2
45204: PUSH
45205: LD_INT 2
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 1
45214: PUSH
45215: LD_INT 2
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 0
45224: PUSH
45225: LD_INT 2
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 1
45234: NEG
45235: PUSH
45236: LD_INT 1
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 2
45245: NEG
45246: PUSH
45247: LD_INT 1
45249: NEG
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: LD_INT 2
45257: NEG
45258: PUSH
45259: LD_INT 2
45261: NEG
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 2
45269: NEG
45270: PUSH
45271: LD_INT 3
45273: NEG
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 2
45281: PUSH
45282: LD_INT 1
45284: NEG
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 3
45292: PUSH
45293: LD_INT 1
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 1
45302: PUSH
45303: LD_INT 3
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 1
45312: NEG
45313: PUSH
45314: LD_INT 2
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 3
45323: NEG
45324: PUSH
45325: LD_INT 2
45327: NEG
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45358: LD_ADDR_VAR 0 32
45362: PUSH
45363: LD_INT 0
45365: PUSH
45366: LD_INT 0
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 0
45375: PUSH
45376: LD_INT 1
45378: NEG
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 1
45386: PUSH
45387: LD_INT 0
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 1
45396: PUSH
45397: LD_INT 1
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 0
45406: PUSH
45407: LD_INT 1
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 1
45416: NEG
45417: PUSH
45418: LD_INT 0
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 1
45427: NEG
45428: PUSH
45429: LD_INT 1
45431: NEG
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 1
45439: NEG
45440: PUSH
45441: LD_INT 2
45443: NEG
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 0
45451: PUSH
45452: LD_INT 2
45454: NEG
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 1
45462: PUSH
45463: LD_INT 1
45465: NEG
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 2
45473: PUSH
45474: LD_INT 1
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 2
45483: PUSH
45484: LD_INT 2
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 1
45493: PUSH
45494: LD_INT 2
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: LD_INT 2
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 1
45513: NEG
45514: PUSH
45515: LD_INT 1
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 2
45524: NEG
45525: PUSH
45526: LD_INT 0
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 2
45535: NEG
45536: PUSH
45537: LD_INT 1
45539: NEG
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 1
45547: NEG
45548: PUSH
45549: LD_INT 3
45551: NEG
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 1
45559: PUSH
45560: LD_INT 2
45562: NEG
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 3
45570: PUSH
45571: LD_INT 2
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 2
45580: PUSH
45581: LD_INT 3
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 2
45590: NEG
45591: PUSH
45592: LD_INT 1
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 3
45601: NEG
45602: PUSH
45603: LD_INT 1
45605: NEG
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45636: LD_ADDR_VAR 0 33
45640: PUSH
45641: LD_INT 0
45643: PUSH
45644: LD_INT 0
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 0
45653: PUSH
45654: LD_INT 1
45656: NEG
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 1
45664: PUSH
45665: LD_INT 0
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 1
45674: PUSH
45675: LD_INT 1
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 0
45684: PUSH
45685: LD_INT 1
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 1
45694: NEG
45695: PUSH
45696: LD_INT 0
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 1
45705: NEG
45706: PUSH
45707: LD_INT 1
45709: NEG
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 1
45717: NEG
45718: PUSH
45719: LD_INT 2
45721: NEG
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 1
45729: PUSH
45730: LD_INT 1
45732: NEG
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 2
45740: PUSH
45741: LD_INT 0
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 2
45750: PUSH
45751: LD_INT 1
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 1
45760: PUSH
45761: LD_INT 2
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 0
45770: PUSH
45771: LD_INT 2
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 1
45780: NEG
45781: PUSH
45782: LD_INT 1
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 2
45791: NEG
45792: PUSH
45793: LD_INT 0
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 2
45802: NEG
45803: PUSH
45804: LD_INT 1
45806: NEG
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 2
45814: NEG
45815: PUSH
45816: LD_INT 2
45818: NEG
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 2
45826: NEG
45827: PUSH
45828: LD_INT 3
45830: NEG
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 2
45838: PUSH
45839: LD_INT 1
45841: NEG
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 3
45849: PUSH
45850: LD_INT 1
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 1
45859: PUSH
45860: LD_INT 3
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 1
45869: NEG
45870: PUSH
45871: LD_INT 2
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 3
45880: NEG
45881: PUSH
45882: LD_INT 2
45884: NEG
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45915: LD_ADDR_VAR 0 34
45919: PUSH
45920: LD_INT 0
45922: PUSH
45923: LD_INT 0
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 0
45932: PUSH
45933: LD_INT 1
45935: NEG
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 1
45943: PUSH
45944: LD_INT 0
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 1
45953: PUSH
45954: LD_INT 1
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 0
45963: PUSH
45964: LD_INT 1
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 1
45973: NEG
45974: PUSH
45975: LD_INT 0
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 1
45984: NEG
45985: PUSH
45986: LD_INT 1
45988: NEG
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 1
45996: NEG
45997: PUSH
45998: LD_INT 2
46000: NEG
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 0
46008: PUSH
46009: LD_INT 2
46011: NEG
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 1
46019: PUSH
46020: LD_INT 1
46022: NEG
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 2
46030: PUSH
46031: LD_INT 1
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 2
46040: PUSH
46041: LD_INT 2
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 1
46050: PUSH
46051: LD_INT 2
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 1
46060: NEG
46061: PUSH
46062: LD_INT 1
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 2
46071: NEG
46072: PUSH
46073: LD_INT 0
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 2
46082: NEG
46083: PUSH
46084: LD_INT 1
46086: NEG
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 2
46094: NEG
46095: PUSH
46096: LD_INT 2
46098: NEG
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 1
46106: NEG
46107: PUSH
46108: LD_INT 3
46110: NEG
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 1
46118: PUSH
46119: LD_INT 2
46121: NEG
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 3
46129: PUSH
46130: LD_INT 2
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 2
46139: PUSH
46140: LD_INT 3
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 2
46149: NEG
46150: PUSH
46151: LD_INT 1
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 3
46160: NEG
46161: PUSH
46162: LD_INT 1
46164: NEG
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46195: LD_ADDR_VAR 0 35
46199: PUSH
46200: LD_INT 0
46202: PUSH
46203: LD_INT 0
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 0
46212: PUSH
46213: LD_INT 1
46215: NEG
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 1
46223: PUSH
46224: LD_INT 0
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 1
46233: PUSH
46234: LD_INT 1
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 0
46243: PUSH
46244: LD_INT 1
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 1
46253: NEG
46254: PUSH
46255: LD_INT 0
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 1
46264: NEG
46265: PUSH
46266: LD_INT 1
46268: NEG
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 2
46276: PUSH
46277: LD_INT 1
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 2
46286: NEG
46287: PUSH
46288: LD_INT 1
46290: NEG
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46307: LD_ADDR_VAR 0 36
46311: PUSH
46312: LD_INT 0
46314: PUSH
46315: LD_INT 0
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 0
46324: PUSH
46325: LD_INT 1
46327: NEG
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 1
46335: PUSH
46336: LD_INT 0
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 1
46345: PUSH
46346: LD_INT 1
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 0
46355: PUSH
46356: LD_INT 1
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 1
46365: NEG
46366: PUSH
46367: LD_INT 0
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 1
46376: NEG
46377: PUSH
46378: LD_INT 1
46380: NEG
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 1
46388: NEG
46389: PUSH
46390: LD_INT 2
46392: NEG
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 1
46400: PUSH
46401: LD_INT 2
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46419: LD_ADDR_VAR 0 37
46423: PUSH
46424: LD_INT 0
46426: PUSH
46427: LD_INT 0
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 0
46436: PUSH
46437: LD_INT 1
46439: NEG
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 1
46447: PUSH
46448: LD_INT 0
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 1
46457: PUSH
46458: LD_INT 1
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 0
46467: PUSH
46468: LD_INT 1
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 1
46477: NEG
46478: PUSH
46479: LD_INT 0
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 1
46488: NEG
46489: PUSH
46490: LD_INT 1
46492: NEG
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 1
46500: PUSH
46501: LD_INT 1
46503: NEG
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 1
46511: NEG
46512: PUSH
46513: LD_INT 1
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46531: LD_ADDR_VAR 0 38
46535: PUSH
46536: LD_INT 0
46538: PUSH
46539: LD_INT 0
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 0
46548: PUSH
46549: LD_INT 1
46551: NEG
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 1
46559: PUSH
46560: LD_INT 0
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 1
46569: PUSH
46570: LD_INT 1
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 0
46579: PUSH
46580: LD_INT 1
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 1
46589: NEG
46590: PUSH
46591: LD_INT 0
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 1
46600: NEG
46601: PUSH
46602: LD_INT 1
46604: NEG
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 2
46612: PUSH
46613: LD_INT 1
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 2
46622: NEG
46623: PUSH
46624: LD_INT 1
46626: NEG
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46643: LD_ADDR_VAR 0 39
46647: PUSH
46648: LD_INT 0
46650: PUSH
46651: LD_INT 0
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 0
46660: PUSH
46661: LD_INT 1
46663: NEG
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 1
46671: PUSH
46672: LD_INT 0
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 1
46681: PUSH
46682: LD_INT 1
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 0
46691: PUSH
46692: LD_INT 1
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 1
46701: NEG
46702: PUSH
46703: LD_INT 0
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 1
46712: NEG
46713: PUSH
46714: LD_INT 1
46716: NEG
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 1
46724: NEG
46725: PUSH
46726: LD_INT 2
46728: NEG
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 1
46736: PUSH
46737: LD_INT 2
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46755: LD_ADDR_VAR 0 40
46759: PUSH
46760: LD_INT 0
46762: PUSH
46763: LD_INT 0
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 0
46772: PUSH
46773: LD_INT 1
46775: NEG
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 1
46783: PUSH
46784: LD_INT 0
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 1
46793: PUSH
46794: LD_INT 1
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 0
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 1
46813: NEG
46814: PUSH
46815: LD_INT 0
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 1
46824: NEG
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 1
46836: PUSH
46837: LD_INT 1
46839: NEG
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 1
46847: NEG
46848: PUSH
46849: LD_INT 1
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46867: LD_ADDR_VAR 0 41
46871: PUSH
46872: LD_INT 0
46874: PUSH
46875: LD_INT 0
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 0
46884: PUSH
46885: LD_INT 1
46887: NEG
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 1
46895: PUSH
46896: LD_INT 0
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 1
46905: PUSH
46906: LD_INT 1
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 0
46915: PUSH
46916: LD_INT 1
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 1
46925: NEG
46926: PUSH
46927: LD_INT 0
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 1
46936: NEG
46937: PUSH
46938: LD_INT 1
46940: NEG
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 1
46948: NEG
46949: PUSH
46950: LD_INT 2
46952: NEG
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 1
46960: PUSH
46961: LD_INT 1
46963: NEG
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 2
46971: PUSH
46972: LD_INT 0
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 2
46981: PUSH
46982: LD_INT 1
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 2
46991: PUSH
46992: LD_INT 2
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 1
47001: PUSH
47002: LD_INT 2
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 1
47011: NEG
47012: PUSH
47013: LD_INT 1
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 2
47022: NEG
47023: PUSH
47024: LD_INT 0
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 2
47033: NEG
47034: PUSH
47035: LD_INT 1
47037: NEG
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 2
47045: NEG
47046: PUSH
47047: LD_INT 2
47049: NEG
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 2
47057: NEG
47058: PUSH
47059: LD_INT 3
47061: NEG
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 2
47069: PUSH
47070: LD_INT 1
47072: NEG
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 3
47080: PUSH
47081: LD_INT 0
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 3
47090: PUSH
47091: LD_INT 1
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 3
47100: PUSH
47101: LD_INT 2
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 3
47110: PUSH
47111: LD_INT 3
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 2
47120: PUSH
47121: LD_INT 3
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 2
47130: NEG
47131: PUSH
47132: LD_INT 1
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 3
47141: NEG
47142: PUSH
47143: LD_INT 0
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 3
47152: NEG
47153: PUSH
47154: LD_INT 1
47156: NEG
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 3
47164: NEG
47165: PUSH
47166: LD_INT 2
47168: NEG
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 3
47176: NEG
47177: PUSH
47178: LD_INT 3
47180: NEG
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47217: LD_ADDR_VAR 0 42
47221: PUSH
47222: LD_INT 0
47224: PUSH
47225: LD_INT 0
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 0
47234: PUSH
47235: LD_INT 1
47237: NEG
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 1
47245: PUSH
47246: LD_INT 0
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 1
47255: PUSH
47256: LD_INT 1
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 0
47265: PUSH
47266: LD_INT 1
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 1
47275: NEG
47276: PUSH
47277: LD_INT 0
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 1
47286: NEG
47287: PUSH
47288: LD_INT 1
47290: NEG
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 1
47298: NEG
47299: PUSH
47300: LD_INT 2
47302: NEG
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 0
47310: PUSH
47311: LD_INT 2
47313: NEG
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 1
47321: PUSH
47322: LD_INT 1
47324: NEG
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 2
47332: PUSH
47333: LD_INT 1
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 2
47342: PUSH
47343: LD_INT 2
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 1
47352: PUSH
47353: LD_INT 2
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 0
47362: PUSH
47363: LD_INT 2
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 1
47372: NEG
47373: PUSH
47374: LD_INT 1
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 2
47383: NEG
47384: PUSH
47385: LD_INT 1
47387: NEG
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 2
47395: NEG
47396: PUSH
47397: LD_INT 2
47399: NEG
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 2
47407: NEG
47408: PUSH
47409: LD_INT 3
47411: NEG
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 1
47419: NEG
47420: PUSH
47421: LD_INT 3
47423: NEG
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 0
47431: PUSH
47432: LD_INT 3
47434: NEG
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 1
47442: PUSH
47443: LD_INT 2
47445: NEG
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 3
47453: PUSH
47454: LD_INT 2
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 3
47463: PUSH
47464: LD_INT 3
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 2
47473: PUSH
47474: LD_INT 3
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 1
47483: PUSH
47484: LD_INT 3
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 0
47493: PUSH
47494: LD_INT 3
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 1
47503: NEG
47504: PUSH
47505: LD_INT 2
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 3
47514: NEG
47515: PUSH
47516: LD_INT 2
47518: NEG
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 3
47526: NEG
47527: PUSH
47528: LD_INT 3
47530: NEG
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47567: LD_ADDR_VAR 0 43
47571: PUSH
47572: LD_INT 0
47574: PUSH
47575: LD_INT 0
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 0
47584: PUSH
47585: LD_INT 1
47587: NEG
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 1
47595: PUSH
47596: LD_INT 0
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 1
47605: PUSH
47606: LD_INT 1
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 0
47615: PUSH
47616: LD_INT 1
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 1
47625: NEG
47626: PUSH
47627: LD_INT 0
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 1
47636: NEG
47637: PUSH
47638: LD_INT 1
47640: NEG
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 1
47648: NEG
47649: PUSH
47650: LD_INT 2
47652: NEG
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 0
47660: PUSH
47661: LD_INT 2
47663: NEG
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 1
47671: PUSH
47672: LD_INT 1
47674: NEG
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 2
47682: PUSH
47683: LD_INT 0
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 2
47692: PUSH
47693: LD_INT 1
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 1
47702: PUSH
47703: LD_INT 2
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 0
47712: PUSH
47713: LD_INT 2
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 1
47722: NEG
47723: PUSH
47724: LD_INT 1
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 2
47733: NEG
47734: PUSH
47735: LD_INT 0
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 2
47744: NEG
47745: PUSH
47746: LD_INT 1
47748: NEG
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 1
47756: NEG
47757: PUSH
47758: LD_INT 3
47760: NEG
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 0
47768: PUSH
47769: LD_INT 3
47771: NEG
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 1
47779: PUSH
47780: LD_INT 2
47782: NEG
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 2
47790: PUSH
47791: LD_INT 1
47793: NEG
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 3
47801: PUSH
47802: LD_INT 0
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 3
47811: PUSH
47812: LD_INT 1
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 1
47821: PUSH
47822: LD_INT 3
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 0
47831: PUSH
47832: LD_INT 3
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 1
47841: NEG
47842: PUSH
47843: LD_INT 2
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 2
47852: NEG
47853: PUSH
47854: LD_INT 1
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 3
47863: NEG
47864: PUSH
47865: LD_INT 0
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 3
47874: NEG
47875: PUSH
47876: LD_INT 1
47878: NEG
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47915: LD_ADDR_VAR 0 44
47919: PUSH
47920: LD_INT 0
47922: PUSH
47923: LD_INT 0
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 0
47932: PUSH
47933: LD_INT 1
47935: NEG
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 1
47943: PUSH
47944: LD_INT 0
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 1
47953: PUSH
47954: LD_INT 1
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 0
47963: PUSH
47964: LD_INT 1
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 1
47973: NEG
47974: PUSH
47975: LD_INT 0
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 1
47984: NEG
47985: PUSH
47986: LD_INT 1
47988: NEG
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 1
47996: NEG
47997: PUSH
47998: LD_INT 2
48000: NEG
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 1
48008: PUSH
48009: LD_INT 1
48011: NEG
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 2
48019: PUSH
48020: LD_INT 0
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 2
48029: PUSH
48030: LD_INT 1
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 2
48039: PUSH
48040: LD_INT 2
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 1
48049: PUSH
48050: LD_INT 2
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 1
48059: NEG
48060: PUSH
48061: LD_INT 1
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 2
48070: NEG
48071: PUSH
48072: LD_INT 0
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 2
48081: NEG
48082: PUSH
48083: LD_INT 1
48085: NEG
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 2
48093: NEG
48094: PUSH
48095: LD_INT 2
48097: NEG
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 2
48105: NEG
48106: PUSH
48107: LD_INT 3
48109: NEG
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 2
48117: PUSH
48118: LD_INT 1
48120: NEG
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 3
48128: PUSH
48129: LD_INT 0
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 3
48138: PUSH
48139: LD_INT 1
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 3
48148: PUSH
48149: LD_INT 2
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 3
48158: PUSH
48159: LD_INT 3
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 2
48168: PUSH
48169: LD_INT 3
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 2
48178: NEG
48179: PUSH
48180: LD_INT 1
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 3
48189: NEG
48190: PUSH
48191: LD_INT 0
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 3
48200: NEG
48201: PUSH
48202: LD_INT 1
48204: NEG
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 3
48212: NEG
48213: PUSH
48214: LD_INT 2
48216: NEG
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 3
48224: NEG
48225: PUSH
48226: LD_INT 3
48228: NEG
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48265: LD_ADDR_VAR 0 45
48269: PUSH
48270: LD_INT 0
48272: PUSH
48273: LD_INT 0
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 0
48282: PUSH
48283: LD_INT 1
48285: NEG
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 1
48293: PUSH
48294: LD_INT 0
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 1
48303: PUSH
48304: LD_INT 1
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 0
48313: PUSH
48314: LD_INT 1
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 1
48323: NEG
48324: PUSH
48325: LD_INT 0
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 1
48334: NEG
48335: PUSH
48336: LD_INT 1
48338: NEG
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 1
48346: NEG
48347: PUSH
48348: LD_INT 2
48350: NEG
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 0
48358: PUSH
48359: LD_INT 2
48361: NEG
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 1
48369: PUSH
48370: LD_INT 1
48372: NEG
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 2
48380: PUSH
48381: LD_INT 1
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 2
48390: PUSH
48391: LD_INT 2
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 1
48400: PUSH
48401: LD_INT 2
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 0
48410: PUSH
48411: LD_INT 2
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 1
48420: NEG
48421: PUSH
48422: LD_INT 1
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 2
48431: NEG
48432: PUSH
48433: LD_INT 1
48435: NEG
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 2
48443: NEG
48444: PUSH
48445: LD_INT 2
48447: NEG
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 2
48455: NEG
48456: PUSH
48457: LD_INT 3
48459: NEG
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 1
48467: NEG
48468: PUSH
48469: LD_INT 3
48471: NEG
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 0
48479: PUSH
48480: LD_INT 3
48482: NEG
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 1
48490: PUSH
48491: LD_INT 2
48493: NEG
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 3
48501: PUSH
48502: LD_INT 2
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 3
48511: PUSH
48512: LD_INT 3
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 2
48521: PUSH
48522: LD_INT 3
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 1
48531: PUSH
48532: LD_INT 3
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 0
48541: PUSH
48542: LD_INT 3
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 1
48551: NEG
48552: PUSH
48553: LD_INT 2
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 3
48562: NEG
48563: PUSH
48564: LD_INT 2
48566: NEG
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 3
48574: NEG
48575: PUSH
48576: LD_INT 3
48578: NEG
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48615: LD_ADDR_VAR 0 46
48619: PUSH
48620: LD_INT 0
48622: PUSH
48623: LD_INT 0
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 0
48632: PUSH
48633: LD_INT 1
48635: NEG
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 1
48643: PUSH
48644: LD_INT 0
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 1
48653: PUSH
48654: LD_INT 1
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 0
48663: PUSH
48664: LD_INT 1
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 1
48673: NEG
48674: PUSH
48675: LD_INT 0
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 1
48684: NEG
48685: PUSH
48686: LD_INT 1
48688: NEG
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 1
48696: NEG
48697: PUSH
48698: LD_INT 2
48700: NEG
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 0
48708: PUSH
48709: LD_INT 2
48711: NEG
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 1
48719: PUSH
48720: LD_INT 1
48722: NEG
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 2
48730: PUSH
48731: LD_INT 0
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 2
48740: PUSH
48741: LD_INT 1
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 1
48750: PUSH
48751: LD_INT 2
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 0
48760: PUSH
48761: LD_INT 2
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 1
48770: NEG
48771: PUSH
48772: LD_INT 1
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 2
48781: NEG
48782: PUSH
48783: LD_INT 0
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 2
48792: NEG
48793: PUSH
48794: LD_INT 1
48796: NEG
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 1
48804: NEG
48805: PUSH
48806: LD_INT 3
48808: NEG
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 0
48816: PUSH
48817: LD_INT 3
48819: NEG
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 1
48827: PUSH
48828: LD_INT 2
48830: NEG
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 2
48838: PUSH
48839: LD_INT 1
48841: NEG
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 3
48849: PUSH
48850: LD_INT 0
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 3
48859: PUSH
48860: LD_INT 1
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 1
48869: PUSH
48870: LD_INT 3
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 0
48879: PUSH
48880: LD_INT 3
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 1
48889: NEG
48890: PUSH
48891: LD_INT 2
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 2
48900: NEG
48901: PUSH
48902: LD_INT 1
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 3
48911: NEG
48912: PUSH
48913: LD_INT 0
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 3
48922: NEG
48923: PUSH
48924: LD_INT 1
48926: NEG
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48963: LD_ADDR_VAR 0 47
48967: PUSH
48968: LD_INT 0
48970: PUSH
48971: LD_INT 0
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 0
48980: PUSH
48981: LD_INT 1
48983: NEG
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 1
48991: PUSH
48992: LD_INT 0
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 1
49001: PUSH
49002: LD_INT 1
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 0
49011: PUSH
49012: LD_INT 1
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 1
49021: NEG
49022: PUSH
49023: LD_INT 0
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 1
49032: NEG
49033: PUSH
49034: LD_INT 1
49036: NEG
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 1
49044: NEG
49045: PUSH
49046: LD_INT 2
49048: NEG
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 0
49056: PUSH
49057: LD_INT 2
49059: NEG
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 1
49067: PUSH
49068: LD_INT 1
49070: NEG
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 2
49078: NEG
49079: PUSH
49080: LD_INT 1
49082: NEG
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 2
49090: NEG
49091: PUSH
49092: LD_INT 2
49094: NEG
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49114: LD_ADDR_VAR 0 48
49118: PUSH
49119: LD_INT 0
49121: PUSH
49122: LD_INT 0
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 0
49131: PUSH
49132: LD_INT 1
49134: NEG
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 1
49142: PUSH
49143: LD_INT 0
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 1
49152: PUSH
49153: LD_INT 1
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 0
49162: PUSH
49163: LD_INT 1
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 1
49172: NEG
49173: PUSH
49174: LD_INT 0
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 1
49183: NEG
49184: PUSH
49185: LD_INT 1
49187: NEG
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 1
49195: NEG
49196: PUSH
49197: LD_INT 2
49199: NEG
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 0
49207: PUSH
49208: LD_INT 2
49210: NEG
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 1
49218: PUSH
49219: LD_INT 1
49221: NEG
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 2
49229: PUSH
49230: LD_INT 0
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 2
49239: PUSH
49240: LD_INT 1
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49261: LD_ADDR_VAR 0 49
49265: PUSH
49266: LD_INT 0
49268: PUSH
49269: LD_INT 0
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 0
49278: PUSH
49279: LD_INT 1
49281: NEG
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 1
49289: PUSH
49290: LD_INT 0
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 1
49299: PUSH
49300: LD_INT 1
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 0
49309: PUSH
49310: LD_INT 1
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 1
49319: NEG
49320: PUSH
49321: LD_INT 0
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 1
49330: NEG
49331: PUSH
49332: LD_INT 1
49334: NEG
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 1
49342: PUSH
49343: LD_INT 1
49345: NEG
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 2
49353: PUSH
49354: LD_INT 0
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 2
49363: PUSH
49364: LD_INT 1
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 2
49373: PUSH
49374: LD_INT 2
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 1
49383: PUSH
49384: LD_INT 2
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49405: LD_ADDR_VAR 0 50
49409: PUSH
49410: LD_INT 0
49412: PUSH
49413: LD_INT 0
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 0
49422: PUSH
49423: LD_INT 1
49425: NEG
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 1
49433: PUSH
49434: LD_INT 0
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 1
49443: PUSH
49444: LD_INT 1
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 0
49453: PUSH
49454: LD_INT 1
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 1
49463: NEG
49464: PUSH
49465: LD_INT 0
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 1
49474: NEG
49475: PUSH
49476: LD_INT 1
49478: NEG
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 2
49486: PUSH
49487: LD_INT 1
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 2
49496: PUSH
49497: LD_INT 2
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 1
49506: PUSH
49507: LD_INT 2
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 0
49516: PUSH
49517: LD_INT 2
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 1
49526: NEG
49527: PUSH
49528: LD_INT 1
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49549: LD_ADDR_VAR 0 51
49553: PUSH
49554: LD_INT 0
49556: PUSH
49557: LD_INT 0
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 0
49566: PUSH
49567: LD_INT 1
49569: NEG
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 1
49577: PUSH
49578: LD_INT 0
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 1
49587: PUSH
49588: LD_INT 1
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 0
49597: PUSH
49598: LD_INT 1
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 1
49607: NEG
49608: PUSH
49609: LD_INT 0
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 1
49618: NEG
49619: PUSH
49620: LD_INT 1
49622: NEG
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 1
49630: PUSH
49631: LD_INT 2
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 0
49640: PUSH
49641: LD_INT 2
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 1
49650: NEG
49651: PUSH
49652: LD_INT 1
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 2
49661: NEG
49662: PUSH
49663: LD_INT 0
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 2
49672: NEG
49673: PUSH
49674: LD_INT 1
49676: NEG
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49696: LD_ADDR_VAR 0 52
49700: PUSH
49701: LD_INT 0
49703: PUSH
49704: LD_INT 0
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 0
49713: PUSH
49714: LD_INT 1
49716: NEG
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 1
49724: PUSH
49725: LD_INT 0
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 1
49734: PUSH
49735: LD_INT 1
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 0
49744: PUSH
49745: LD_INT 1
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 1
49754: NEG
49755: PUSH
49756: LD_INT 0
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 1
49765: NEG
49766: PUSH
49767: LD_INT 1
49769: NEG
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 1
49777: NEG
49778: PUSH
49779: LD_INT 2
49781: NEG
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 1
49789: NEG
49790: PUSH
49791: LD_INT 1
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 2
49800: NEG
49801: PUSH
49802: LD_INT 0
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 2
49811: NEG
49812: PUSH
49813: LD_INT 1
49815: NEG
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 2
49823: NEG
49824: PUSH
49825: LD_INT 2
49827: NEG
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49847: LD_ADDR_VAR 0 53
49851: PUSH
49852: LD_INT 0
49854: PUSH
49855: LD_INT 0
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 0
49864: PUSH
49865: LD_INT 1
49867: NEG
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 1
49875: PUSH
49876: LD_INT 0
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 1
49885: PUSH
49886: LD_INT 1
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 0
49895: PUSH
49896: LD_INT 1
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 1
49905: NEG
49906: PUSH
49907: LD_INT 0
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 1
49916: NEG
49917: PUSH
49918: LD_INT 1
49920: NEG
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 1
49928: NEG
49929: PUSH
49930: LD_INT 2
49932: NEG
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 0
49940: PUSH
49941: LD_INT 2
49943: NEG
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 1
49951: PUSH
49952: LD_INT 1
49954: NEG
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 2
49962: PUSH
49963: LD_INT 0
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 2
49972: PUSH
49973: LD_INT 1
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 2
49982: PUSH
49983: LD_INT 2
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 1
49992: PUSH
49993: LD_INT 2
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 0
50002: PUSH
50003: LD_INT 2
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 1
50012: NEG
50013: PUSH
50014: LD_INT 1
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 2
50023: NEG
50024: PUSH
50025: LD_INT 0
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 2
50034: NEG
50035: PUSH
50036: LD_INT 1
50038: NEG
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 2
50046: NEG
50047: PUSH
50048: LD_INT 2
50050: NEG
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50077: LD_ADDR_VAR 0 54
50081: PUSH
50082: LD_INT 0
50084: PUSH
50085: LD_INT 0
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 0
50094: PUSH
50095: LD_INT 1
50097: NEG
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 1
50105: PUSH
50106: LD_INT 0
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 1
50115: PUSH
50116: LD_INT 1
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 0
50125: PUSH
50126: LD_INT 1
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 1
50135: NEG
50136: PUSH
50137: LD_INT 0
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 1
50146: NEG
50147: PUSH
50148: LD_INT 1
50150: NEG
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 1
50158: NEG
50159: PUSH
50160: LD_INT 2
50162: NEG
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 0
50170: PUSH
50171: LD_INT 2
50173: NEG
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 1
50181: PUSH
50182: LD_INT 1
50184: NEG
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 2
50192: PUSH
50193: LD_INT 0
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 2
50202: PUSH
50203: LD_INT 1
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 2
50212: PUSH
50213: LD_INT 2
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 1
50222: PUSH
50223: LD_INT 2
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 0
50232: PUSH
50233: LD_INT 2
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 1
50242: NEG
50243: PUSH
50244: LD_INT 1
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 2
50253: NEG
50254: PUSH
50255: LD_INT 0
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 2
50264: NEG
50265: PUSH
50266: LD_INT 1
50268: NEG
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 2
50276: NEG
50277: PUSH
50278: LD_INT 2
50280: NEG
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50307: LD_ADDR_VAR 0 55
50311: PUSH
50312: LD_INT 0
50314: PUSH
50315: LD_INT 0
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 0
50324: PUSH
50325: LD_INT 1
50327: NEG
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 1
50335: PUSH
50336: LD_INT 0
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 1
50345: PUSH
50346: LD_INT 1
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 0
50355: PUSH
50356: LD_INT 1
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 1
50365: NEG
50366: PUSH
50367: LD_INT 0
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 1
50376: NEG
50377: PUSH
50378: LD_INT 1
50380: NEG
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 1
50388: NEG
50389: PUSH
50390: LD_INT 2
50392: NEG
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 0
50400: PUSH
50401: LD_INT 2
50403: NEG
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 1
50411: PUSH
50412: LD_INT 1
50414: NEG
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 2
50422: PUSH
50423: LD_INT 0
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 2
50432: PUSH
50433: LD_INT 1
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 2
50442: PUSH
50443: LD_INT 2
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 1
50452: PUSH
50453: LD_INT 2
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 0
50462: PUSH
50463: LD_INT 2
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 1
50472: NEG
50473: PUSH
50474: LD_INT 1
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 2
50483: NEG
50484: PUSH
50485: LD_INT 0
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 2
50494: NEG
50495: PUSH
50496: LD_INT 1
50498: NEG
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 2
50506: NEG
50507: PUSH
50508: LD_INT 2
50510: NEG
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50537: LD_ADDR_VAR 0 56
50541: PUSH
50542: LD_INT 0
50544: PUSH
50545: LD_INT 0
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 0
50554: PUSH
50555: LD_INT 1
50557: NEG
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 1
50565: PUSH
50566: LD_INT 0
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 1
50575: PUSH
50576: LD_INT 1
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 0
50585: PUSH
50586: LD_INT 1
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 1
50595: NEG
50596: PUSH
50597: LD_INT 0
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 1
50606: NEG
50607: PUSH
50608: LD_INT 1
50610: NEG
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 1
50618: NEG
50619: PUSH
50620: LD_INT 2
50622: NEG
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 0
50630: PUSH
50631: LD_INT 2
50633: NEG
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 1
50641: PUSH
50642: LD_INT 1
50644: NEG
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 2
50652: PUSH
50653: LD_INT 0
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 2
50662: PUSH
50663: LD_INT 1
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 2
50672: PUSH
50673: LD_INT 2
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 1
50682: PUSH
50683: LD_INT 2
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 0
50692: PUSH
50693: LD_INT 2
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 1
50702: NEG
50703: PUSH
50704: LD_INT 1
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 2
50713: NEG
50714: PUSH
50715: LD_INT 0
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 2
50724: NEG
50725: PUSH
50726: LD_INT 1
50728: NEG
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 2
50736: NEG
50737: PUSH
50738: LD_INT 2
50740: NEG
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50767: LD_ADDR_VAR 0 57
50771: PUSH
50772: LD_INT 0
50774: PUSH
50775: LD_INT 0
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 0
50784: PUSH
50785: LD_INT 1
50787: NEG
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 1
50795: PUSH
50796: LD_INT 0
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 1
50805: PUSH
50806: LD_INT 1
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 0
50815: PUSH
50816: LD_INT 1
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 1
50825: NEG
50826: PUSH
50827: LD_INT 0
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 1
50836: NEG
50837: PUSH
50838: LD_INT 1
50840: NEG
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 1
50848: NEG
50849: PUSH
50850: LD_INT 2
50852: NEG
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 0
50860: PUSH
50861: LD_INT 2
50863: NEG
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 1
50871: PUSH
50872: LD_INT 1
50874: NEG
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 2
50882: PUSH
50883: LD_INT 0
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 2
50892: PUSH
50893: LD_INT 1
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 2
50902: PUSH
50903: LD_INT 2
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 1
50912: PUSH
50913: LD_INT 2
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 0
50922: PUSH
50923: LD_INT 2
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 1
50932: NEG
50933: PUSH
50934: LD_INT 1
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 2
50943: NEG
50944: PUSH
50945: LD_INT 0
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 2
50954: NEG
50955: PUSH
50956: LD_INT 1
50958: NEG
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 2
50966: NEG
50967: PUSH
50968: LD_INT 2
50970: NEG
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50997: LD_ADDR_VAR 0 58
51001: PUSH
51002: LD_INT 0
51004: PUSH
51005: LD_INT 0
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 0
51014: PUSH
51015: LD_INT 1
51017: NEG
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 1
51025: PUSH
51026: LD_INT 0
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 1
51035: PUSH
51036: LD_INT 1
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 0
51045: PUSH
51046: LD_INT 1
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 1
51055: NEG
51056: PUSH
51057: LD_INT 0
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 1
51066: NEG
51067: PUSH
51068: LD_INT 1
51070: NEG
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 1
51078: NEG
51079: PUSH
51080: LD_INT 2
51082: NEG
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 0
51090: PUSH
51091: LD_INT 2
51093: NEG
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 1
51101: PUSH
51102: LD_INT 1
51104: NEG
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 2
51112: PUSH
51113: LD_INT 0
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 2
51122: PUSH
51123: LD_INT 1
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 2
51132: PUSH
51133: LD_INT 2
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 1
51142: PUSH
51143: LD_INT 2
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 0
51152: PUSH
51153: LD_INT 2
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 1
51162: NEG
51163: PUSH
51164: LD_INT 1
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 2
51173: NEG
51174: PUSH
51175: LD_INT 0
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 2
51184: NEG
51185: PUSH
51186: LD_INT 1
51188: NEG
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 2
51196: NEG
51197: PUSH
51198: LD_INT 2
51200: NEG
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51227: LD_ADDR_VAR 0 59
51231: PUSH
51232: LD_INT 0
51234: PUSH
51235: LD_INT 0
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 0
51244: PUSH
51245: LD_INT 1
51247: NEG
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 1
51255: PUSH
51256: LD_INT 0
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 1
51265: PUSH
51266: LD_INT 1
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 0
51275: PUSH
51276: LD_INT 1
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 1
51285: NEG
51286: PUSH
51287: LD_INT 0
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 1
51296: NEG
51297: PUSH
51298: LD_INT 1
51300: NEG
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51315: LD_ADDR_VAR 0 60
51319: PUSH
51320: LD_INT 0
51322: PUSH
51323: LD_INT 0
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 0
51332: PUSH
51333: LD_INT 1
51335: NEG
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 1
51343: PUSH
51344: LD_INT 0
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 1
51353: PUSH
51354: LD_INT 1
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 0
51363: PUSH
51364: LD_INT 1
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 1
51373: NEG
51374: PUSH
51375: LD_INT 0
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 1
51384: NEG
51385: PUSH
51386: LD_INT 1
51388: NEG
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51403: LD_ADDR_VAR 0 61
51407: PUSH
51408: LD_INT 0
51410: PUSH
51411: LD_INT 0
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 0
51420: PUSH
51421: LD_INT 1
51423: NEG
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 1
51431: PUSH
51432: LD_INT 0
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 1
51441: PUSH
51442: LD_INT 1
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 0
51451: PUSH
51452: LD_INT 1
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 1
51461: NEG
51462: PUSH
51463: LD_INT 0
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 1
51472: NEG
51473: PUSH
51474: LD_INT 1
51476: NEG
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51491: LD_ADDR_VAR 0 62
51495: PUSH
51496: LD_INT 0
51498: PUSH
51499: LD_INT 0
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 0
51508: PUSH
51509: LD_INT 1
51511: NEG
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 1
51519: PUSH
51520: LD_INT 0
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 1
51529: PUSH
51530: LD_INT 1
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 0
51539: PUSH
51540: LD_INT 1
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 1
51549: NEG
51550: PUSH
51551: LD_INT 0
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 1
51560: NEG
51561: PUSH
51562: LD_INT 1
51564: NEG
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51579: LD_ADDR_VAR 0 63
51583: PUSH
51584: LD_INT 0
51586: PUSH
51587: LD_INT 0
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 0
51596: PUSH
51597: LD_INT 1
51599: NEG
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 1
51607: PUSH
51608: LD_INT 0
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 1
51617: PUSH
51618: LD_INT 1
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 0
51627: PUSH
51628: LD_INT 1
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 1
51637: NEG
51638: PUSH
51639: LD_INT 0
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 1
51648: NEG
51649: PUSH
51650: LD_INT 1
51652: NEG
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51667: LD_ADDR_VAR 0 64
51671: PUSH
51672: LD_INT 0
51674: PUSH
51675: LD_INT 0
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 0
51684: PUSH
51685: LD_INT 1
51687: NEG
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 1
51695: PUSH
51696: LD_INT 0
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 1
51705: PUSH
51706: LD_INT 1
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 0
51715: PUSH
51716: LD_INT 1
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 1
51725: NEG
51726: PUSH
51727: LD_INT 0
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 1
51736: NEG
51737: PUSH
51738: LD_INT 1
51740: NEG
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: ST_TO_ADDR
// end ; 1 :
51755: GO 57652
51757: LD_INT 1
51759: DOUBLE
51760: EQUAL
51761: IFTRUE 51765
51763: GO 54388
51765: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51766: LD_ADDR_VAR 0 11
51770: PUSH
51771: LD_INT 1
51773: NEG
51774: PUSH
51775: LD_INT 3
51777: NEG
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 0
51785: PUSH
51786: LD_INT 3
51788: NEG
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 1
51796: PUSH
51797: LD_INT 2
51799: NEG
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: LIST
51809: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51810: LD_ADDR_VAR 0 12
51814: PUSH
51815: LD_INT 2
51817: PUSH
51818: LD_INT 1
51820: NEG
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 3
51828: PUSH
51829: LD_INT 0
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 3
51838: PUSH
51839: LD_INT 1
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: LIST
51850: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51851: LD_ADDR_VAR 0 13
51855: PUSH
51856: LD_INT 3
51858: PUSH
51859: LD_INT 2
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 3
51868: PUSH
51869: LD_INT 3
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 2
51878: PUSH
51879: LD_INT 3
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: LIST
51890: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51891: LD_ADDR_VAR 0 14
51895: PUSH
51896: LD_INT 1
51898: PUSH
51899: LD_INT 3
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 0
51908: PUSH
51909: LD_INT 3
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 1
51918: NEG
51919: PUSH
51920: LD_INT 2
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: LIST
51931: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51932: LD_ADDR_VAR 0 15
51936: PUSH
51937: LD_INT 2
51939: NEG
51940: PUSH
51941: LD_INT 1
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 3
51950: NEG
51951: PUSH
51952: LD_INT 0
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 3
51961: NEG
51962: PUSH
51963: LD_INT 1
51965: NEG
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: LIST
51975: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51976: LD_ADDR_VAR 0 16
51980: PUSH
51981: LD_INT 2
51983: NEG
51984: PUSH
51985: LD_INT 3
51987: NEG
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 3
51995: NEG
51996: PUSH
51997: LD_INT 2
51999: NEG
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 3
52007: NEG
52008: PUSH
52009: LD_INT 3
52011: NEG
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: LIST
52021: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52022: LD_ADDR_VAR 0 17
52026: PUSH
52027: LD_INT 1
52029: NEG
52030: PUSH
52031: LD_INT 3
52033: NEG
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 0
52041: PUSH
52042: LD_INT 3
52044: NEG
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 1
52052: PUSH
52053: LD_INT 2
52055: NEG
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: LIST
52065: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52066: LD_ADDR_VAR 0 18
52070: PUSH
52071: LD_INT 2
52073: PUSH
52074: LD_INT 1
52076: NEG
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 3
52084: PUSH
52085: LD_INT 0
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 3
52094: PUSH
52095: LD_INT 1
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: LIST
52106: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52107: LD_ADDR_VAR 0 19
52111: PUSH
52112: LD_INT 3
52114: PUSH
52115: LD_INT 2
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 3
52124: PUSH
52125: LD_INT 3
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 2
52134: PUSH
52135: LD_INT 3
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: LIST
52146: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52147: LD_ADDR_VAR 0 20
52151: PUSH
52152: LD_INT 1
52154: PUSH
52155: LD_INT 3
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 0
52164: PUSH
52165: LD_INT 3
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 1
52174: NEG
52175: PUSH
52176: LD_INT 2
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: LIST
52187: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52188: LD_ADDR_VAR 0 21
52192: PUSH
52193: LD_INT 2
52195: NEG
52196: PUSH
52197: LD_INT 1
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 3
52206: NEG
52207: PUSH
52208: LD_INT 0
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 3
52217: NEG
52218: PUSH
52219: LD_INT 1
52221: NEG
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: LIST
52231: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52232: LD_ADDR_VAR 0 22
52236: PUSH
52237: LD_INT 2
52239: NEG
52240: PUSH
52241: LD_INT 3
52243: NEG
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 3
52251: NEG
52252: PUSH
52253: LD_INT 2
52255: NEG
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 3
52263: NEG
52264: PUSH
52265: LD_INT 3
52267: NEG
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: LIST
52277: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52278: LD_ADDR_VAR 0 23
52282: PUSH
52283: LD_INT 0
52285: PUSH
52286: LD_INT 3
52288: NEG
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 1
52296: NEG
52297: PUSH
52298: LD_INT 4
52300: NEG
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 1
52308: PUSH
52309: LD_INT 3
52311: NEG
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: LIST
52321: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52322: LD_ADDR_VAR 0 24
52326: PUSH
52327: LD_INT 3
52329: PUSH
52330: LD_INT 0
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 3
52339: PUSH
52340: LD_INT 1
52342: NEG
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 4
52350: PUSH
52351: LD_INT 1
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: LIST
52362: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52363: LD_ADDR_VAR 0 25
52367: PUSH
52368: LD_INT 3
52370: PUSH
52371: LD_INT 3
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 4
52380: PUSH
52381: LD_INT 3
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 3
52390: PUSH
52391: LD_INT 4
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: LIST
52402: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52403: LD_ADDR_VAR 0 26
52407: PUSH
52408: LD_INT 0
52410: PUSH
52411: LD_INT 3
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 1
52420: PUSH
52421: LD_INT 4
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 1
52430: NEG
52431: PUSH
52432: LD_INT 3
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: LIST
52443: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52444: LD_ADDR_VAR 0 27
52448: PUSH
52449: LD_INT 3
52451: NEG
52452: PUSH
52453: LD_INT 0
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 3
52462: NEG
52463: PUSH
52464: LD_INT 1
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 4
52473: NEG
52474: PUSH
52475: LD_INT 1
52477: NEG
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: LIST
52487: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52488: LD_ADDR_VAR 0 28
52492: PUSH
52493: LD_INT 3
52495: NEG
52496: PUSH
52497: LD_INT 3
52499: NEG
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 3
52507: NEG
52508: PUSH
52509: LD_INT 4
52511: NEG
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 4
52519: NEG
52520: PUSH
52521: LD_INT 3
52523: NEG
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: LIST
52533: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52534: LD_ADDR_VAR 0 29
52538: PUSH
52539: LD_INT 1
52541: NEG
52542: PUSH
52543: LD_INT 3
52545: NEG
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 0
52553: PUSH
52554: LD_INT 3
52556: NEG
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 1
52564: PUSH
52565: LD_INT 2
52567: NEG
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 1
52575: NEG
52576: PUSH
52577: LD_INT 4
52579: NEG
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 0
52587: PUSH
52588: LD_INT 4
52590: NEG
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 1
52598: PUSH
52599: LD_INT 3
52601: NEG
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 1
52609: NEG
52610: PUSH
52611: LD_INT 5
52613: NEG
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 0
52621: PUSH
52622: LD_INT 5
52624: NEG
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 1
52632: PUSH
52633: LD_INT 4
52635: NEG
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 1
52643: NEG
52644: PUSH
52645: LD_INT 6
52647: NEG
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 0
52655: PUSH
52656: LD_INT 6
52658: NEG
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 1
52666: PUSH
52667: LD_INT 5
52669: NEG
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52689: LD_ADDR_VAR 0 30
52693: PUSH
52694: LD_INT 2
52696: PUSH
52697: LD_INT 1
52699: NEG
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 3
52707: PUSH
52708: LD_INT 0
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 3
52717: PUSH
52718: LD_INT 1
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 3
52727: PUSH
52728: LD_INT 1
52730: NEG
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 4
52738: PUSH
52739: LD_INT 0
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 4
52748: PUSH
52749: LD_INT 1
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 4
52758: PUSH
52759: LD_INT 1
52761: NEG
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 5
52769: PUSH
52770: LD_INT 0
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 5
52779: PUSH
52780: LD_INT 1
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 5
52789: PUSH
52790: LD_INT 1
52792: NEG
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 6
52800: PUSH
52801: LD_INT 0
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 6
52810: PUSH
52811: LD_INT 1
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52832: LD_ADDR_VAR 0 31
52836: PUSH
52837: LD_INT 3
52839: PUSH
52840: LD_INT 2
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 3
52849: PUSH
52850: LD_INT 3
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 2
52859: PUSH
52860: LD_INT 3
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 4
52869: PUSH
52870: LD_INT 3
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 4
52879: PUSH
52880: LD_INT 4
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 3
52889: PUSH
52890: LD_INT 4
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 5
52899: PUSH
52900: LD_INT 4
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 5
52909: PUSH
52910: LD_INT 5
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 4
52919: PUSH
52920: LD_INT 5
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 6
52929: PUSH
52930: LD_INT 5
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 6
52939: PUSH
52940: LD_INT 6
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 5
52949: PUSH
52950: LD_INT 6
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52971: LD_ADDR_VAR 0 32
52975: PUSH
52976: LD_INT 1
52978: PUSH
52979: LD_INT 3
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 0
52988: PUSH
52989: LD_INT 3
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 1
52998: NEG
52999: PUSH
53000: LD_INT 2
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 1
53009: PUSH
53010: LD_INT 4
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 0
53019: PUSH
53020: LD_INT 4
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 1
53029: NEG
53030: PUSH
53031: LD_INT 3
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 1
53040: PUSH
53041: LD_INT 5
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 0
53050: PUSH
53051: LD_INT 5
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 1
53060: NEG
53061: PUSH
53062: LD_INT 4
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 1
53071: PUSH
53072: LD_INT 6
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 0
53081: PUSH
53082: LD_INT 6
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 1
53091: NEG
53092: PUSH
53093: LD_INT 5
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53114: LD_ADDR_VAR 0 33
53118: PUSH
53119: LD_INT 2
53121: NEG
53122: PUSH
53123: LD_INT 1
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 3
53132: NEG
53133: PUSH
53134: LD_INT 0
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 3
53143: NEG
53144: PUSH
53145: LD_INT 1
53147: NEG
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 3
53155: NEG
53156: PUSH
53157: LD_INT 1
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 4
53166: NEG
53167: PUSH
53168: LD_INT 0
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 4
53177: NEG
53178: PUSH
53179: LD_INT 1
53181: NEG
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 4
53189: NEG
53190: PUSH
53191: LD_INT 1
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 5
53200: NEG
53201: PUSH
53202: LD_INT 0
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 5
53211: NEG
53212: PUSH
53213: LD_INT 1
53215: NEG
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 5
53223: NEG
53224: PUSH
53225: LD_INT 1
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 6
53234: NEG
53235: PUSH
53236: LD_INT 0
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 6
53245: NEG
53246: PUSH
53247: LD_INT 1
53249: NEG
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53269: LD_ADDR_VAR 0 34
53273: PUSH
53274: LD_INT 2
53276: NEG
53277: PUSH
53278: LD_INT 3
53280: NEG
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 3
53288: NEG
53289: PUSH
53290: LD_INT 2
53292: NEG
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 3
53300: NEG
53301: PUSH
53302: LD_INT 3
53304: NEG
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 3
53312: NEG
53313: PUSH
53314: LD_INT 4
53316: NEG
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 4
53324: NEG
53325: PUSH
53326: LD_INT 3
53328: NEG
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 4
53336: NEG
53337: PUSH
53338: LD_INT 4
53340: NEG
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 4
53348: NEG
53349: PUSH
53350: LD_INT 5
53352: NEG
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 5
53360: NEG
53361: PUSH
53362: LD_INT 4
53364: NEG
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 5
53372: NEG
53373: PUSH
53374: LD_INT 5
53376: NEG
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 5
53384: NEG
53385: PUSH
53386: LD_INT 6
53388: NEG
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 6
53396: NEG
53397: PUSH
53398: LD_INT 5
53400: NEG
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 6
53408: NEG
53409: PUSH
53410: LD_INT 6
53412: NEG
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53432: LD_ADDR_VAR 0 41
53436: PUSH
53437: LD_INT 0
53439: PUSH
53440: LD_INT 2
53442: NEG
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 1
53450: NEG
53451: PUSH
53452: LD_INT 3
53454: NEG
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 1
53462: PUSH
53463: LD_INT 2
53465: NEG
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: LIST
53475: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53476: LD_ADDR_VAR 0 42
53480: PUSH
53481: LD_INT 2
53483: PUSH
53484: LD_INT 0
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 2
53493: PUSH
53494: LD_INT 1
53496: NEG
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 3
53504: PUSH
53505: LD_INT 1
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: LIST
53516: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53517: LD_ADDR_VAR 0 43
53521: PUSH
53522: LD_INT 2
53524: PUSH
53525: LD_INT 2
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 3
53534: PUSH
53535: LD_INT 2
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 2
53544: PUSH
53545: LD_INT 3
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: LIST
53556: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53557: LD_ADDR_VAR 0 44
53561: PUSH
53562: LD_INT 0
53564: PUSH
53565: LD_INT 2
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 1
53574: PUSH
53575: LD_INT 3
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 1
53584: NEG
53585: PUSH
53586: LD_INT 2
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: LIST
53597: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53598: LD_ADDR_VAR 0 45
53602: PUSH
53603: LD_INT 2
53605: NEG
53606: PUSH
53607: LD_INT 0
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 2
53616: NEG
53617: PUSH
53618: LD_INT 1
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 3
53627: NEG
53628: PUSH
53629: LD_INT 1
53631: NEG
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: LIST
53641: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53642: LD_ADDR_VAR 0 46
53646: PUSH
53647: LD_INT 2
53649: NEG
53650: PUSH
53651: LD_INT 2
53653: NEG
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 2
53661: NEG
53662: PUSH
53663: LD_INT 3
53665: NEG
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 3
53673: NEG
53674: PUSH
53675: LD_INT 2
53677: NEG
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: LIST
53687: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53688: LD_ADDR_VAR 0 47
53692: PUSH
53693: LD_INT 2
53695: NEG
53696: PUSH
53697: LD_INT 3
53699: NEG
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 1
53707: NEG
53708: PUSH
53709: LD_INT 3
53711: NEG
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53721: LD_ADDR_VAR 0 48
53725: PUSH
53726: LD_INT 1
53728: PUSH
53729: LD_INT 2
53731: NEG
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 2
53739: PUSH
53740: LD_INT 1
53742: NEG
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53752: LD_ADDR_VAR 0 49
53756: PUSH
53757: LD_INT 3
53759: PUSH
53760: LD_INT 1
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 3
53769: PUSH
53770: LD_INT 2
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53781: LD_ADDR_VAR 0 50
53785: PUSH
53786: LD_INT 2
53788: PUSH
53789: LD_INT 3
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 1
53798: PUSH
53799: LD_INT 3
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53810: LD_ADDR_VAR 0 51
53814: PUSH
53815: LD_INT 1
53817: NEG
53818: PUSH
53819: LD_INT 2
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 2
53828: NEG
53829: PUSH
53830: LD_INT 1
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53841: LD_ADDR_VAR 0 52
53845: PUSH
53846: LD_INT 3
53848: NEG
53849: PUSH
53850: LD_INT 1
53852: NEG
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 3
53860: NEG
53861: PUSH
53862: LD_INT 2
53864: NEG
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53874: LD_ADDR_VAR 0 53
53878: PUSH
53879: LD_INT 1
53881: NEG
53882: PUSH
53883: LD_INT 3
53885: NEG
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 0
53893: PUSH
53894: LD_INT 3
53896: NEG
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 1
53904: PUSH
53905: LD_INT 2
53907: NEG
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: LIST
53917: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53918: LD_ADDR_VAR 0 54
53922: PUSH
53923: LD_INT 2
53925: PUSH
53926: LD_INT 1
53928: NEG
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 3
53936: PUSH
53937: LD_INT 0
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 3
53946: PUSH
53947: LD_INT 1
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: LIST
53958: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53959: LD_ADDR_VAR 0 55
53963: PUSH
53964: LD_INT 3
53966: PUSH
53967: LD_INT 2
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 3
53976: PUSH
53977: LD_INT 3
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 2
53986: PUSH
53987: LD_INT 3
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: LIST
53998: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53999: LD_ADDR_VAR 0 56
54003: PUSH
54004: LD_INT 1
54006: PUSH
54007: LD_INT 3
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 0
54016: PUSH
54017: LD_INT 3
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 1
54026: NEG
54027: PUSH
54028: LD_INT 2
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: LIST
54039: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54040: LD_ADDR_VAR 0 57
54044: PUSH
54045: LD_INT 2
54047: NEG
54048: PUSH
54049: LD_INT 1
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 3
54058: NEG
54059: PUSH
54060: LD_INT 0
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 3
54069: NEG
54070: PUSH
54071: LD_INT 1
54073: NEG
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: LIST
54083: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54084: LD_ADDR_VAR 0 58
54088: PUSH
54089: LD_INT 2
54091: NEG
54092: PUSH
54093: LD_INT 3
54095: NEG
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 3
54103: NEG
54104: PUSH
54105: LD_INT 2
54107: NEG
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 3
54115: NEG
54116: PUSH
54117: LD_INT 3
54119: NEG
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: LIST
54129: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54130: LD_ADDR_VAR 0 59
54134: PUSH
54135: LD_INT 1
54137: NEG
54138: PUSH
54139: LD_INT 2
54141: NEG
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 0
54149: PUSH
54150: LD_INT 2
54152: NEG
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 1
54160: PUSH
54161: LD_INT 1
54163: NEG
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: LIST
54173: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54174: LD_ADDR_VAR 0 60
54178: PUSH
54179: LD_INT 1
54181: PUSH
54182: LD_INT 1
54184: NEG
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 2
54192: PUSH
54193: LD_INT 0
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 2
54202: PUSH
54203: LD_INT 1
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: LIST
54214: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54215: LD_ADDR_VAR 0 61
54219: PUSH
54220: LD_INT 2
54222: PUSH
54223: LD_INT 1
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 2
54232: PUSH
54233: LD_INT 2
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 1
54242: PUSH
54243: LD_INT 2
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: LIST
54254: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54255: LD_ADDR_VAR 0 62
54259: PUSH
54260: LD_INT 1
54262: PUSH
54263: LD_INT 2
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 0
54272: PUSH
54273: LD_INT 2
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 1
54282: NEG
54283: PUSH
54284: LD_INT 1
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: LIST
54295: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54296: LD_ADDR_VAR 0 63
54300: PUSH
54301: LD_INT 1
54303: NEG
54304: PUSH
54305: LD_INT 1
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 2
54314: NEG
54315: PUSH
54316: LD_INT 0
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 2
54325: NEG
54326: PUSH
54327: LD_INT 1
54329: NEG
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: LIST
54339: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54340: LD_ADDR_VAR 0 64
54344: PUSH
54345: LD_INT 1
54347: NEG
54348: PUSH
54349: LD_INT 2
54351: NEG
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 2
54359: NEG
54360: PUSH
54361: LD_INT 1
54363: NEG
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 2
54371: NEG
54372: PUSH
54373: LD_INT 2
54375: NEG
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: LIST
54385: ST_TO_ADDR
// end ; 2 :
54386: GO 57652
54388: LD_INT 2
54390: DOUBLE
54391: EQUAL
54392: IFTRUE 54396
54394: GO 57651
54396: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54397: LD_ADDR_VAR 0 29
54401: PUSH
54402: LD_INT 4
54404: PUSH
54405: LD_INT 0
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 4
54414: PUSH
54415: LD_INT 1
54417: NEG
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 5
54425: PUSH
54426: LD_INT 0
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 5
54435: PUSH
54436: LD_INT 1
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 4
54445: PUSH
54446: LD_INT 1
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 3
54455: PUSH
54456: LD_INT 0
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 3
54465: PUSH
54466: LD_INT 1
54468: NEG
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 3
54476: PUSH
54477: LD_INT 2
54479: NEG
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 5
54487: PUSH
54488: LD_INT 2
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 3
54497: PUSH
54498: LD_INT 3
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 3
54507: PUSH
54508: LD_INT 2
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 4
54517: PUSH
54518: LD_INT 3
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 4
54527: PUSH
54528: LD_INT 4
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 3
54537: PUSH
54538: LD_INT 4
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 2
54547: PUSH
54548: LD_INT 3
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 2
54557: PUSH
54558: LD_INT 2
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 4
54567: PUSH
54568: LD_INT 2
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 2
54577: PUSH
54578: LD_INT 4
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 0
54587: PUSH
54588: LD_INT 4
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 0
54597: PUSH
54598: LD_INT 3
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 1
54607: PUSH
54608: LD_INT 4
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 1
54617: PUSH
54618: LD_INT 5
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 0
54627: PUSH
54628: LD_INT 5
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 1
54637: NEG
54638: PUSH
54639: LD_INT 4
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 1
54648: NEG
54649: PUSH
54650: LD_INT 3
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 2
54659: PUSH
54660: LD_INT 5
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 2
54669: NEG
54670: PUSH
54671: LD_INT 3
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 3
54680: NEG
54681: PUSH
54682: LD_INT 0
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 3
54691: NEG
54692: PUSH
54693: LD_INT 1
54695: NEG
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 2
54703: NEG
54704: PUSH
54705: LD_INT 0
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 2
54714: NEG
54715: PUSH
54716: LD_INT 1
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 3
54725: NEG
54726: PUSH
54727: LD_INT 1
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 4
54736: NEG
54737: PUSH
54738: LD_INT 0
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 4
54747: NEG
54748: PUSH
54749: LD_INT 1
54751: NEG
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 4
54759: NEG
54760: PUSH
54761: LD_INT 2
54763: NEG
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 2
54771: NEG
54772: PUSH
54773: LD_INT 2
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 4
54782: NEG
54783: PUSH
54784: LD_INT 4
54786: NEG
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 4
54794: NEG
54795: PUSH
54796: LD_INT 5
54798: NEG
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 3
54806: NEG
54807: PUSH
54808: LD_INT 4
54810: NEG
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 3
54818: NEG
54819: PUSH
54820: LD_INT 3
54822: NEG
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 4
54830: NEG
54831: PUSH
54832: LD_INT 3
54834: NEG
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 5
54842: NEG
54843: PUSH
54844: LD_INT 4
54846: NEG
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 5
54854: NEG
54855: PUSH
54856: LD_INT 5
54858: NEG
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 3
54866: NEG
54867: PUSH
54868: LD_INT 5
54870: NEG
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 5
54878: NEG
54879: PUSH
54880: LD_INT 3
54882: NEG
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54935: LD_ADDR_VAR 0 30
54939: PUSH
54940: LD_INT 4
54942: PUSH
54943: LD_INT 4
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 4
54952: PUSH
54953: LD_INT 3
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 5
54962: PUSH
54963: LD_INT 4
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 5
54972: PUSH
54973: LD_INT 5
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 4
54982: PUSH
54983: LD_INT 5
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 3
54992: PUSH
54993: LD_INT 4
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 3
55002: PUSH
55003: LD_INT 3
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 5
55012: PUSH
55013: LD_INT 3
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 3
55022: PUSH
55023: LD_INT 5
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 0
55032: PUSH
55033: LD_INT 3
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 0
55042: PUSH
55043: LD_INT 2
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 1
55052: PUSH
55053: LD_INT 3
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 1
55062: PUSH
55063: LD_INT 4
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 0
55072: PUSH
55073: LD_INT 4
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 1
55082: NEG
55083: PUSH
55084: LD_INT 3
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 1
55093: NEG
55094: PUSH
55095: LD_INT 2
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 2
55104: PUSH
55105: LD_INT 4
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 2
55114: NEG
55115: PUSH
55116: LD_INT 2
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 4
55125: NEG
55126: PUSH
55127: LD_INT 0
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 4
55136: NEG
55137: PUSH
55138: LD_INT 1
55140: NEG
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 3
55148: NEG
55149: PUSH
55150: LD_INT 0
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 3
55159: NEG
55160: PUSH
55161: LD_INT 1
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 4
55170: NEG
55171: PUSH
55172: LD_INT 1
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 5
55181: NEG
55182: PUSH
55183: LD_INT 0
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 5
55192: NEG
55193: PUSH
55194: LD_INT 1
55196: NEG
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 5
55204: NEG
55205: PUSH
55206: LD_INT 2
55208: NEG
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 3
55216: NEG
55217: PUSH
55218: LD_INT 2
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 3
55227: NEG
55228: PUSH
55229: LD_INT 3
55231: NEG
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 3
55239: NEG
55240: PUSH
55241: LD_INT 4
55243: NEG
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 2
55251: NEG
55252: PUSH
55253: LD_INT 3
55255: NEG
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 2
55263: NEG
55264: PUSH
55265: LD_INT 2
55267: NEG
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 3
55275: NEG
55276: PUSH
55277: LD_INT 2
55279: NEG
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 4
55287: NEG
55288: PUSH
55289: LD_INT 3
55291: NEG
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 4
55299: NEG
55300: PUSH
55301: LD_INT 4
55303: NEG
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 2
55311: NEG
55312: PUSH
55313: LD_INT 4
55315: NEG
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 4
55323: NEG
55324: PUSH
55325: LD_INT 2
55327: NEG
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 0
55335: PUSH
55336: LD_INT 4
55338: NEG
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 0
55346: PUSH
55347: LD_INT 5
55349: NEG
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 1
55357: PUSH
55358: LD_INT 4
55360: NEG
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 1
55368: PUSH
55369: LD_INT 3
55371: NEG
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 0
55379: PUSH
55380: LD_INT 3
55382: NEG
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 1
55390: NEG
55391: PUSH
55392: LD_INT 4
55394: NEG
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 1
55402: NEG
55403: PUSH
55404: LD_INT 5
55406: NEG
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 2
55414: PUSH
55415: LD_INT 3
55417: NEG
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 2
55425: NEG
55426: PUSH
55427: LD_INT 5
55429: NEG
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55482: LD_ADDR_VAR 0 31
55486: PUSH
55487: LD_INT 0
55489: PUSH
55490: LD_INT 4
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 0
55499: PUSH
55500: LD_INT 3
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 1
55509: PUSH
55510: LD_INT 4
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 1
55519: PUSH
55520: LD_INT 5
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 0
55529: PUSH
55530: LD_INT 5
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 1
55539: NEG
55540: PUSH
55541: LD_INT 4
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 1
55550: NEG
55551: PUSH
55552: LD_INT 3
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 2
55561: PUSH
55562: LD_INT 5
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 2
55571: NEG
55572: PUSH
55573: LD_INT 3
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 3
55582: NEG
55583: PUSH
55584: LD_INT 0
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 3
55593: NEG
55594: PUSH
55595: LD_INT 1
55597: NEG
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 2
55605: NEG
55606: PUSH
55607: LD_INT 0
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 2
55616: NEG
55617: PUSH
55618: LD_INT 1
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 3
55627: NEG
55628: PUSH
55629: LD_INT 1
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 4
55638: NEG
55639: PUSH
55640: LD_INT 0
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 4
55649: NEG
55650: PUSH
55651: LD_INT 1
55653: NEG
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 4
55661: NEG
55662: PUSH
55663: LD_INT 2
55665: NEG
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 2
55673: NEG
55674: PUSH
55675: LD_INT 2
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 4
55684: NEG
55685: PUSH
55686: LD_INT 4
55688: NEG
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 4
55696: NEG
55697: PUSH
55698: LD_INT 5
55700: NEG
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 3
55708: NEG
55709: PUSH
55710: LD_INT 4
55712: NEG
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 3
55720: NEG
55721: PUSH
55722: LD_INT 3
55724: NEG
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 4
55732: NEG
55733: PUSH
55734: LD_INT 3
55736: NEG
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 5
55744: NEG
55745: PUSH
55746: LD_INT 4
55748: NEG
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 5
55756: NEG
55757: PUSH
55758: LD_INT 5
55760: NEG
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 3
55768: NEG
55769: PUSH
55770: LD_INT 5
55772: NEG
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 5
55780: NEG
55781: PUSH
55782: LD_INT 3
55784: NEG
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 0
55792: PUSH
55793: LD_INT 3
55795: NEG
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 0
55803: PUSH
55804: LD_INT 4
55806: NEG
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 1
55814: PUSH
55815: LD_INT 3
55817: NEG
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 1
55825: PUSH
55826: LD_INT 2
55828: NEG
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 0
55836: PUSH
55837: LD_INT 2
55839: NEG
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 1
55847: NEG
55848: PUSH
55849: LD_INT 3
55851: NEG
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 1
55859: NEG
55860: PUSH
55861: LD_INT 4
55863: NEG
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 2
55871: PUSH
55872: LD_INT 2
55874: NEG
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 2
55882: NEG
55883: PUSH
55884: LD_INT 4
55886: NEG
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 4
55894: PUSH
55895: LD_INT 0
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 4
55904: PUSH
55905: LD_INT 1
55907: NEG
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 5
55915: PUSH
55916: LD_INT 0
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 5
55925: PUSH
55926: LD_INT 1
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 4
55935: PUSH
55936: LD_INT 1
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 3
55945: PUSH
55946: LD_INT 0
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 3
55955: PUSH
55956: LD_INT 1
55958: NEG
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 3
55966: PUSH
55967: LD_INT 2
55969: NEG
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 5
55977: PUSH
55978: LD_INT 2
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56032: LD_ADDR_VAR 0 32
56036: PUSH
56037: LD_INT 4
56039: NEG
56040: PUSH
56041: LD_INT 0
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 4
56050: NEG
56051: PUSH
56052: LD_INT 1
56054: NEG
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 3
56062: NEG
56063: PUSH
56064: LD_INT 0
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 3
56073: NEG
56074: PUSH
56075: LD_INT 1
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 4
56084: NEG
56085: PUSH
56086: LD_INT 1
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 5
56095: NEG
56096: PUSH
56097: LD_INT 0
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 5
56106: NEG
56107: PUSH
56108: LD_INT 1
56110: NEG
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 5
56118: NEG
56119: PUSH
56120: LD_INT 2
56122: NEG
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 3
56130: NEG
56131: PUSH
56132: LD_INT 2
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 3
56141: NEG
56142: PUSH
56143: LD_INT 3
56145: NEG
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 3
56153: NEG
56154: PUSH
56155: LD_INT 4
56157: NEG
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 2
56165: NEG
56166: PUSH
56167: LD_INT 3
56169: NEG
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 2
56177: NEG
56178: PUSH
56179: LD_INT 2
56181: NEG
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 3
56189: NEG
56190: PUSH
56191: LD_INT 2
56193: NEG
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 4
56201: NEG
56202: PUSH
56203: LD_INT 3
56205: NEG
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 4
56213: NEG
56214: PUSH
56215: LD_INT 4
56217: NEG
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 2
56225: NEG
56226: PUSH
56227: LD_INT 4
56229: NEG
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 4
56237: NEG
56238: PUSH
56239: LD_INT 2
56241: NEG
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 0
56249: PUSH
56250: LD_INT 4
56252: NEG
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 0
56260: PUSH
56261: LD_INT 5
56263: NEG
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 1
56271: PUSH
56272: LD_INT 4
56274: NEG
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 1
56282: PUSH
56283: LD_INT 3
56285: NEG
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 0
56293: PUSH
56294: LD_INT 3
56296: NEG
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 1
56304: NEG
56305: PUSH
56306: LD_INT 4
56308: NEG
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 1
56316: NEG
56317: PUSH
56318: LD_INT 5
56320: NEG
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 2
56328: PUSH
56329: LD_INT 3
56331: NEG
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 2
56339: NEG
56340: PUSH
56341: LD_INT 5
56343: NEG
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 3
56351: PUSH
56352: LD_INT 0
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 3
56361: PUSH
56362: LD_INT 1
56364: NEG
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 4
56372: PUSH
56373: LD_INT 0
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 4
56382: PUSH
56383: LD_INT 1
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 3
56392: PUSH
56393: LD_INT 1
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 2
56402: PUSH
56403: LD_INT 0
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 2
56412: PUSH
56413: LD_INT 1
56415: NEG
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 2
56423: PUSH
56424: LD_INT 2
56426: NEG
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 4
56434: PUSH
56435: LD_INT 2
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 4
56444: PUSH
56445: LD_INT 4
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 4
56454: PUSH
56455: LD_INT 3
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 5
56464: PUSH
56465: LD_INT 4
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 5
56474: PUSH
56475: LD_INT 5
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 4
56484: PUSH
56485: LD_INT 5
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 3
56494: PUSH
56495: LD_INT 4
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 3
56504: PUSH
56505: LD_INT 3
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 5
56514: PUSH
56515: LD_INT 3
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 3
56524: PUSH
56525: LD_INT 5
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56579: LD_ADDR_VAR 0 33
56583: PUSH
56584: LD_INT 4
56586: NEG
56587: PUSH
56588: LD_INT 4
56590: NEG
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 4
56598: NEG
56599: PUSH
56600: LD_INT 5
56602: NEG
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 3
56610: NEG
56611: PUSH
56612: LD_INT 4
56614: NEG
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 3
56622: NEG
56623: PUSH
56624: LD_INT 3
56626: NEG
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 4
56634: NEG
56635: PUSH
56636: LD_INT 3
56638: NEG
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 5
56646: NEG
56647: PUSH
56648: LD_INT 4
56650: NEG
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 5
56658: NEG
56659: PUSH
56660: LD_INT 5
56662: NEG
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 3
56670: NEG
56671: PUSH
56672: LD_INT 5
56674: NEG
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 5
56682: NEG
56683: PUSH
56684: LD_INT 3
56686: NEG
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 0
56694: PUSH
56695: LD_INT 3
56697: NEG
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 0
56705: PUSH
56706: LD_INT 4
56708: NEG
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 1
56716: PUSH
56717: LD_INT 3
56719: NEG
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 1
56727: PUSH
56728: LD_INT 2
56730: NEG
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 0
56738: PUSH
56739: LD_INT 2
56741: NEG
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 1
56749: NEG
56750: PUSH
56751: LD_INT 3
56753: NEG
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 1
56761: NEG
56762: PUSH
56763: LD_INT 4
56765: NEG
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 2
56773: PUSH
56774: LD_INT 2
56776: NEG
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 2
56784: NEG
56785: PUSH
56786: LD_INT 4
56788: NEG
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 4
56796: PUSH
56797: LD_INT 0
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 4
56806: PUSH
56807: LD_INT 1
56809: NEG
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 5
56817: PUSH
56818: LD_INT 0
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 5
56827: PUSH
56828: LD_INT 1
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 4
56837: PUSH
56838: LD_INT 1
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 3
56847: PUSH
56848: LD_INT 0
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 3
56857: PUSH
56858: LD_INT 1
56860: NEG
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 3
56868: PUSH
56869: LD_INT 2
56871: NEG
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 5
56879: PUSH
56880: LD_INT 2
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 3
56889: PUSH
56890: LD_INT 3
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 3
56899: PUSH
56900: LD_INT 2
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 4
56909: PUSH
56910: LD_INT 3
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 4
56919: PUSH
56920: LD_INT 4
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 3
56929: PUSH
56930: LD_INT 4
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 2
56939: PUSH
56940: LD_INT 3
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 2
56949: PUSH
56950: LD_INT 2
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 4
56959: PUSH
56960: LD_INT 2
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 2
56969: PUSH
56970: LD_INT 4
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 0
56979: PUSH
56980: LD_INT 4
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 0
56989: PUSH
56990: LD_INT 3
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 1
56999: PUSH
57000: LD_INT 4
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 1
57009: PUSH
57010: LD_INT 5
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 0
57019: PUSH
57020: LD_INT 5
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 1
57029: NEG
57030: PUSH
57031: LD_INT 4
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 1
57040: NEG
57041: PUSH
57042: LD_INT 3
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 2
57051: PUSH
57052: LD_INT 5
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 2
57061: NEG
57062: PUSH
57063: LD_INT 3
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57117: LD_ADDR_VAR 0 34
57121: PUSH
57122: LD_INT 0
57124: PUSH
57125: LD_INT 4
57127: NEG
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 0
57135: PUSH
57136: LD_INT 5
57138: NEG
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 1
57146: PUSH
57147: LD_INT 4
57149: NEG
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 1
57157: PUSH
57158: LD_INT 3
57160: NEG
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 0
57168: PUSH
57169: LD_INT 3
57171: NEG
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 1
57179: NEG
57180: PUSH
57181: LD_INT 4
57183: NEG
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 1
57191: NEG
57192: PUSH
57193: LD_INT 5
57195: NEG
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 2
57203: PUSH
57204: LD_INT 3
57206: NEG
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 2
57214: NEG
57215: PUSH
57216: LD_INT 5
57218: NEG
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 3
57226: PUSH
57227: LD_INT 0
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 3
57236: PUSH
57237: LD_INT 1
57239: NEG
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 4
57247: PUSH
57248: LD_INT 0
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 4
57257: PUSH
57258: LD_INT 1
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 3
57267: PUSH
57268: LD_INT 1
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 2
57277: PUSH
57278: LD_INT 0
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 2
57287: PUSH
57288: LD_INT 1
57290: NEG
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 2
57298: PUSH
57299: LD_INT 2
57301: NEG
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 4
57309: PUSH
57310: LD_INT 2
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 4
57319: PUSH
57320: LD_INT 4
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 4
57329: PUSH
57330: LD_INT 3
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 5
57339: PUSH
57340: LD_INT 4
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 5
57349: PUSH
57350: LD_INT 5
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 4
57359: PUSH
57360: LD_INT 5
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 3
57369: PUSH
57370: LD_INT 4
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 3
57379: PUSH
57380: LD_INT 3
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 5
57389: PUSH
57390: LD_INT 3
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 3
57399: PUSH
57400: LD_INT 5
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 0
57409: PUSH
57410: LD_INT 3
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 0
57419: PUSH
57420: LD_INT 2
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 1
57429: PUSH
57430: LD_INT 3
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 1
57439: PUSH
57440: LD_INT 4
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 0
57449: PUSH
57450: LD_INT 4
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 1
57459: NEG
57460: PUSH
57461: LD_INT 3
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 1
57470: NEG
57471: PUSH
57472: LD_INT 2
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 2
57481: PUSH
57482: LD_INT 4
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 2
57491: NEG
57492: PUSH
57493: LD_INT 2
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 4
57502: NEG
57503: PUSH
57504: LD_INT 0
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 4
57513: NEG
57514: PUSH
57515: LD_INT 1
57517: NEG
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 3
57525: NEG
57526: PUSH
57527: LD_INT 0
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 3
57536: NEG
57537: PUSH
57538: LD_INT 1
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 4
57547: NEG
57548: PUSH
57549: LD_INT 1
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 5
57558: NEG
57559: PUSH
57560: LD_INT 0
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 5
57569: NEG
57570: PUSH
57571: LD_INT 1
57573: NEG
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 5
57581: NEG
57582: PUSH
57583: LD_INT 2
57585: NEG
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 3
57593: NEG
57594: PUSH
57595: LD_INT 2
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: ST_TO_ADDR
// end ; end ;
57649: GO 57652
57651: POP
// case btype of b_depot , b_warehouse :
57652: LD_VAR 0 1
57656: PUSH
57657: LD_INT 0
57659: DOUBLE
57660: EQUAL
57661: IFTRUE 57671
57663: LD_INT 1
57665: DOUBLE
57666: EQUAL
57667: IFTRUE 57671
57669: GO 57872
57671: POP
// case nation of nation_american :
57672: LD_VAR 0 5
57676: PUSH
57677: LD_INT 1
57679: DOUBLE
57680: EQUAL
57681: IFTRUE 57685
57683: GO 57741
57685: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
57686: LD_ADDR_VAR 0 9
57690: PUSH
57691: LD_VAR 0 11
57695: PUSH
57696: LD_VAR 0 12
57700: PUSH
57701: LD_VAR 0 13
57705: PUSH
57706: LD_VAR 0 14
57710: PUSH
57711: LD_VAR 0 15
57715: PUSH
57716: LD_VAR 0 16
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: PUSH
57729: LD_VAR 0 4
57733: PUSH
57734: LD_INT 1
57736: PLUS
57737: ARRAY
57738: ST_TO_ADDR
57739: GO 57870
57741: LD_INT 2
57743: DOUBLE
57744: EQUAL
57745: IFTRUE 57749
57747: GO 57805
57749: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
57750: LD_ADDR_VAR 0 9
57754: PUSH
57755: LD_VAR 0 17
57759: PUSH
57760: LD_VAR 0 18
57764: PUSH
57765: LD_VAR 0 19
57769: PUSH
57770: LD_VAR 0 20
57774: PUSH
57775: LD_VAR 0 21
57779: PUSH
57780: LD_VAR 0 22
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: PUSH
57793: LD_VAR 0 4
57797: PUSH
57798: LD_INT 1
57800: PLUS
57801: ARRAY
57802: ST_TO_ADDR
57803: GO 57870
57805: LD_INT 3
57807: DOUBLE
57808: EQUAL
57809: IFTRUE 57813
57811: GO 57869
57813: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57814: LD_ADDR_VAR 0 9
57818: PUSH
57819: LD_VAR 0 23
57823: PUSH
57824: LD_VAR 0 24
57828: PUSH
57829: LD_VAR 0 25
57833: PUSH
57834: LD_VAR 0 26
57838: PUSH
57839: LD_VAR 0 27
57843: PUSH
57844: LD_VAR 0 28
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: PUSH
57857: LD_VAR 0 4
57861: PUSH
57862: LD_INT 1
57864: PLUS
57865: ARRAY
57866: ST_TO_ADDR
57867: GO 57870
57869: POP
57870: GO 58425
57872: LD_INT 2
57874: DOUBLE
57875: EQUAL
57876: IFTRUE 57886
57878: LD_INT 3
57880: DOUBLE
57881: EQUAL
57882: IFTRUE 57886
57884: GO 57942
57886: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57887: LD_ADDR_VAR 0 9
57891: PUSH
57892: LD_VAR 0 29
57896: PUSH
57897: LD_VAR 0 30
57901: PUSH
57902: LD_VAR 0 31
57906: PUSH
57907: LD_VAR 0 32
57911: PUSH
57912: LD_VAR 0 33
57916: PUSH
57917: LD_VAR 0 34
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: PUSH
57930: LD_VAR 0 4
57934: PUSH
57935: LD_INT 1
57937: PLUS
57938: ARRAY
57939: ST_TO_ADDR
57940: GO 58425
57942: LD_INT 16
57944: DOUBLE
57945: EQUAL
57946: IFTRUE 58004
57948: LD_INT 17
57950: DOUBLE
57951: EQUAL
57952: IFTRUE 58004
57954: LD_INT 18
57956: DOUBLE
57957: EQUAL
57958: IFTRUE 58004
57960: LD_INT 19
57962: DOUBLE
57963: EQUAL
57964: IFTRUE 58004
57966: LD_INT 22
57968: DOUBLE
57969: EQUAL
57970: IFTRUE 58004
57972: LD_INT 20
57974: DOUBLE
57975: EQUAL
57976: IFTRUE 58004
57978: LD_INT 21
57980: DOUBLE
57981: EQUAL
57982: IFTRUE 58004
57984: LD_INT 23
57986: DOUBLE
57987: EQUAL
57988: IFTRUE 58004
57990: LD_INT 24
57992: DOUBLE
57993: EQUAL
57994: IFTRUE 58004
57996: LD_INT 25
57998: DOUBLE
57999: EQUAL
58000: IFTRUE 58004
58002: GO 58060
58004: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58005: LD_ADDR_VAR 0 9
58009: PUSH
58010: LD_VAR 0 35
58014: PUSH
58015: LD_VAR 0 36
58019: PUSH
58020: LD_VAR 0 37
58024: PUSH
58025: LD_VAR 0 38
58029: PUSH
58030: LD_VAR 0 39
58034: PUSH
58035: LD_VAR 0 40
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: PUSH
58048: LD_VAR 0 4
58052: PUSH
58053: LD_INT 1
58055: PLUS
58056: ARRAY
58057: ST_TO_ADDR
58058: GO 58425
58060: LD_INT 6
58062: DOUBLE
58063: EQUAL
58064: IFTRUE 58116
58066: LD_INT 7
58068: DOUBLE
58069: EQUAL
58070: IFTRUE 58116
58072: LD_INT 8
58074: DOUBLE
58075: EQUAL
58076: IFTRUE 58116
58078: LD_INT 13
58080: DOUBLE
58081: EQUAL
58082: IFTRUE 58116
58084: LD_INT 12
58086: DOUBLE
58087: EQUAL
58088: IFTRUE 58116
58090: LD_INT 15
58092: DOUBLE
58093: EQUAL
58094: IFTRUE 58116
58096: LD_INT 11
58098: DOUBLE
58099: EQUAL
58100: IFTRUE 58116
58102: LD_INT 14
58104: DOUBLE
58105: EQUAL
58106: IFTRUE 58116
58108: LD_INT 10
58110: DOUBLE
58111: EQUAL
58112: IFTRUE 58116
58114: GO 58172
58116: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
58117: LD_ADDR_VAR 0 9
58121: PUSH
58122: LD_VAR 0 41
58126: PUSH
58127: LD_VAR 0 42
58131: PUSH
58132: LD_VAR 0 43
58136: PUSH
58137: LD_VAR 0 44
58141: PUSH
58142: LD_VAR 0 45
58146: PUSH
58147: LD_VAR 0 46
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: PUSH
58160: LD_VAR 0 4
58164: PUSH
58165: LD_INT 1
58167: PLUS
58168: ARRAY
58169: ST_TO_ADDR
58170: GO 58425
58172: LD_INT 36
58174: DOUBLE
58175: EQUAL
58176: IFTRUE 58180
58178: GO 58236
58180: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58181: LD_ADDR_VAR 0 9
58185: PUSH
58186: LD_VAR 0 47
58190: PUSH
58191: LD_VAR 0 48
58195: PUSH
58196: LD_VAR 0 49
58200: PUSH
58201: LD_VAR 0 50
58205: PUSH
58206: LD_VAR 0 51
58210: PUSH
58211: LD_VAR 0 52
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: PUSH
58224: LD_VAR 0 4
58228: PUSH
58229: LD_INT 1
58231: PLUS
58232: ARRAY
58233: ST_TO_ADDR
58234: GO 58425
58236: LD_INT 4
58238: DOUBLE
58239: EQUAL
58240: IFTRUE 58262
58242: LD_INT 5
58244: DOUBLE
58245: EQUAL
58246: IFTRUE 58262
58248: LD_INT 34
58250: DOUBLE
58251: EQUAL
58252: IFTRUE 58262
58254: LD_INT 37
58256: DOUBLE
58257: EQUAL
58258: IFTRUE 58262
58260: GO 58318
58262: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58263: LD_ADDR_VAR 0 9
58267: PUSH
58268: LD_VAR 0 53
58272: PUSH
58273: LD_VAR 0 54
58277: PUSH
58278: LD_VAR 0 55
58282: PUSH
58283: LD_VAR 0 56
58287: PUSH
58288: LD_VAR 0 57
58292: PUSH
58293: LD_VAR 0 58
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: PUSH
58306: LD_VAR 0 4
58310: PUSH
58311: LD_INT 1
58313: PLUS
58314: ARRAY
58315: ST_TO_ADDR
58316: GO 58425
58318: LD_INT 31
58320: DOUBLE
58321: EQUAL
58322: IFTRUE 58368
58324: LD_INT 32
58326: DOUBLE
58327: EQUAL
58328: IFTRUE 58368
58330: LD_INT 33
58332: DOUBLE
58333: EQUAL
58334: IFTRUE 58368
58336: LD_INT 27
58338: DOUBLE
58339: EQUAL
58340: IFTRUE 58368
58342: LD_INT 26
58344: DOUBLE
58345: EQUAL
58346: IFTRUE 58368
58348: LD_INT 28
58350: DOUBLE
58351: EQUAL
58352: IFTRUE 58368
58354: LD_INT 29
58356: DOUBLE
58357: EQUAL
58358: IFTRUE 58368
58360: LD_INT 30
58362: DOUBLE
58363: EQUAL
58364: IFTRUE 58368
58366: GO 58424
58368: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
58369: LD_ADDR_VAR 0 9
58373: PUSH
58374: LD_VAR 0 59
58378: PUSH
58379: LD_VAR 0 60
58383: PUSH
58384: LD_VAR 0 61
58388: PUSH
58389: LD_VAR 0 62
58393: PUSH
58394: LD_VAR 0 63
58398: PUSH
58399: LD_VAR 0 64
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: PUSH
58412: LD_VAR 0 4
58416: PUSH
58417: LD_INT 1
58419: PLUS
58420: ARRAY
58421: ST_TO_ADDR
58422: GO 58425
58424: POP
// temp_list2 = [ ] ;
58425: LD_ADDR_VAR 0 10
58429: PUSH
58430: EMPTY
58431: ST_TO_ADDR
// for i in temp_list do
58432: LD_ADDR_VAR 0 8
58436: PUSH
58437: LD_VAR 0 9
58441: PUSH
58442: FOR_IN
58443: IFFALSE 58495
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58445: LD_ADDR_VAR 0 10
58449: PUSH
58450: LD_VAR 0 10
58454: PUSH
58455: LD_VAR 0 8
58459: PUSH
58460: LD_INT 1
58462: ARRAY
58463: PUSH
58464: LD_VAR 0 2
58468: PLUS
58469: PUSH
58470: LD_VAR 0 8
58474: PUSH
58475: LD_INT 2
58477: ARRAY
58478: PUSH
58479: LD_VAR 0 3
58483: PLUS
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: EMPTY
58490: LIST
58491: ADD
58492: ST_TO_ADDR
58493: GO 58442
58495: POP
58496: POP
// result = temp_list2 ;
58497: LD_ADDR_VAR 0 7
58501: PUSH
58502: LD_VAR 0 10
58506: ST_TO_ADDR
// end ;
58507: LD_VAR 0 7
58511: RET
// export function EnemyInRange ( unit , dist ) ; begin
58512: LD_INT 0
58514: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58515: LD_ADDR_VAR 0 3
58519: PUSH
58520: LD_VAR 0 1
58524: PPUSH
58525: CALL_OW 255
58529: PPUSH
58530: LD_VAR 0 1
58534: PPUSH
58535: CALL_OW 250
58539: PPUSH
58540: LD_VAR 0 1
58544: PPUSH
58545: CALL_OW 251
58549: PPUSH
58550: LD_VAR 0 2
58554: PPUSH
58555: CALL 32616 0 4
58559: PUSH
58560: LD_INT 4
58562: ARRAY
58563: ST_TO_ADDR
// end ;
58564: LD_VAR 0 3
58568: RET
// export function PlayerSeeMe ( unit ) ; begin
58569: LD_INT 0
58571: PPUSH
// result := See ( your_side , unit ) ;
58572: LD_ADDR_VAR 0 2
58576: PUSH
58577: LD_OWVAR 2
58581: PPUSH
58582: LD_VAR 0 1
58586: PPUSH
58587: CALL_OW 292
58591: ST_TO_ADDR
// end ;
58592: LD_VAR 0 2
58596: RET
// export function ReverseDir ( unit ) ; begin
58597: LD_INT 0
58599: PPUSH
// if not unit then
58600: LD_VAR 0 1
58604: NOT
58605: IFFALSE 58609
// exit ;
58607: GO 58632
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58609: LD_ADDR_VAR 0 2
58613: PUSH
58614: LD_VAR 0 1
58618: PPUSH
58619: CALL_OW 254
58623: PUSH
58624: LD_INT 3
58626: PLUS
58627: PUSH
58628: LD_INT 6
58630: MOD
58631: ST_TO_ADDR
// end ;
58632: LD_VAR 0 2
58636: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
58637: LD_INT 0
58639: PPUSH
58640: PPUSH
58641: PPUSH
58642: PPUSH
58643: PPUSH
// if not hexes then
58644: LD_VAR 0 2
58648: NOT
58649: IFFALSE 58653
// exit ;
58651: GO 58801
// dist := 9999 ;
58653: LD_ADDR_VAR 0 5
58657: PUSH
58658: LD_INT 9999
58660: ST_TO_ADDR
// for i = 1 to hexes do
58661: LD_ADDR_VAR 0 4
58665: PUSH
58666: DOUBLE
58667: LD_INT 1
58669: DEC
58670: ST_TO_ADDR
58671: LD_VAR 0 2
58675: PUSH
58676: FOR_TO
58677: IFFALSE 58789
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
58679: LD_VAR 0 1
58683: PPUSH
58684: LD_VAR 0 2
58688: PUSH
58689: LD_VAR 0 4
58693: ARRAY
58694: PUSH
58695: LD_INT 1
58697: ARRAY
58698: PPUSH
58699: LD_VAR 0 2
58703: PUSH
58704: LD_VAR 0 4
58708: ARRAY
58709: PUSH
58710: LD_INT 2
58712: ARRAY
58713: PPUSH
58714: CALL_OW 297
58718: PUSH
58719: LD_VAR 0 5
58723: LESS
58724: IFFALSE 58787
// begin hex := hexes [ i ] ;
58726: LD_ADDR_VAR 0 7
58730: PUSH
58731: LD_VAR 0 2
58735: PUSH
58736: LD_VAR 0 4
58740: ARRAY
58741: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58742: LD_ADDR_VAR 0 5
58746: PUSH
58747: LD_VAR 0 1
58751: PPUSH
58752: LD_VAR 0 2
58756: PUSH
58757: LD_VAR 0 4
58761: ARRAY
58762: PUSH
58763: LD_INT 1
58765: ARRAY
58766: PPUSH
58767: LD_VAR 0 2
58771: PUSH
58772: LD_VAR 0 4
58776: ARRAY
58777: PUSH
58778: LD_INT 2
58780: ARRAY
58781: PPUSH
58782: CALL_OW 297
58786: ST_TO_ADDR
// end ; end ;
58787: GO 58676
58789: POP
58790: POP
// result := hex ;
58791: LD_ADDR_VAR 0 3
58795: PUSH
58796: LD_VAR 0 7
58800: ST_TO_ADDR
// end ;
58801: LD_VAR 0 3
58805: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58806: LD_INT 0
58808: PPUSH
58809: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58810: LD_VAR 0 1
58814: NOT
58815: PUSH
58816: LD_VAR 0 1
58820: PUSH
58821: LD_INT 21
58823: PUSH
58824: LD_INT 2
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 23
58833: PUSH
58834: LD_INT 2
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PPUSH
58845: CALL_OW 69
58849: IN
58850: NOT
58851: OR
58852: IFFALSE 58856
// exit ;
58854: GO 58903
// for i = 1 to 3 do
58856: LD_ADDR_VAR 0 3
58860: PUSH
58861: DOUBLE
58862: LD_INT 1
58864: DEC
58865: ST_TO_ADDR
58866: LD_INT 3
58868: PUSH
58869: FOR_TO
58870: IFFALSE 58901
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58872: LD_VAR 0 1
58876: PPUSH
58877: CALL_OW 250
58881: PPUSH
58882: LD_VAR 0 1
58886: PPUSH
58887: CALL_OW 251
58891: PPUSH
58892: LD_INT 1
58894: PPUSH
58895: CALL_OW 453
58899: GO 58869
58901: POP
58902: POP
// end ;
58903: LD_VAR 0 2
58907: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58908: LD_INT 0
58910: PPUSH
58911: PPUSH
58912: PPUSH
58913: PPUSH
58914: PPUSH
58915: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58916: LD_VAR 0 1
58920: NOT
58921: PUSH
58922: LD_VAR 0 2
58926: NOT
58927: OR
58928: PUSH
58929: LD_VAR 0 1
58933: PPUSH
58934: CALL_OW 314
58938: OR
58939: IFFALSE 58943
// exit ;
58941: GO 59384
// x := GetX ( enemy_unit ) ;
58943: LD_ADDR_VAR 0 7
58947: PUSH
58948: LD_VAR 0 2
58952: PPUSH
58953: CALL_OW 250
58957: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58958: LD_ADDR_VAR 0 8
58962: PUSH
58963: LD_VAR 0 2
58967: PPUSH
58968: CALL_OW 251
58972: ST_TO_ADDR
// if not x or not y then
58973: LD_VAR 0 7
58977: NOT
58978: PUSH
58979: LD_VAR 0 8
58983: NOT
58984: OR
58985: IFFALSE 58989
// exit ;
58987: GO 59384
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58989: LD_ADDR_VAR 0 6
58993: PUSH
58994: LD_VAR 0 7
58998: PPUSH
58999: LD_INT 0
59001: PPUSH
59002: LD_INT 4
59004: PPUSH
59005: CALL_OW 272
59009: PUSH
59010: LD_VAR 0 8
59014: PPUSH
59015: LD_INT 0
59017: PPUSH
59018: LD_INT 4
59020: PPUSH
59021: CALL_OW 273
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_VAR 0 7
59034: PPUSH
59035: LD_INT 1
59037: PPUSH
59038: LD_INT 4
59040: PPUSH
59041: CALL_OW 272
59045: PUSH
59046: LD_VAR 0 8
59050: PPUSH
59051: LD_INT 1
59053: PPUSH
59054: LD_INT 4
59056: PPUSH
59057: CALL_OW 273
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_VAR 0 7
59070: PPUSH
59071: LD_INT 2
59073: PPUSH
59074: LD_INT 4
59076: PPUSH
59077: CALL_OW 272
59081: PUSH
59082: LD_VAR 0 8
59086: PPUSH
59087: LD_INT 2
59089: PPUSH
59090: LD_INT 4
59092: PPUSH
59093: CALL_OW 273
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_VAR 0 7
59106: PPUSH
59107: LD_INT 3
59109: PPUSH
59110: LD_INT 4
59112: PPUSH
59113: CALL_OW 272
59117: PUSH
59118: LD_VAR 0 8
59122: PPUSH
59123: LD_INT 3
59125: PPUSH
59126: LD_INT 4
59128: PPUSH
59129: CALL_OW 273
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_VAR 0 7
59142: PPUSH
59143: LD_INT 4
59145: PPUSH
59146: LD_INT 4
59148: PPUSH
59149: CALL_OW 272
59153: PUSH
59154: LD_VAR 0 8
59158: PPUSH
59159: LD_INT 4
59161: PPUSH
59162: LD_INT 4
59164: PPUSH
59165: CALL_OW 273
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_VAR 0 7
59178: PPUSH
59179: LD_INT 5
59181: PPUSH
59182: LD_INT 4
59184: PPUSH
59185: CALL_OW 272
59189: PUSH
59190: LD_VAR 0 8
59194: PPUSH
59195: LD_INT 5
59197: PPUSH
59198: LD_INT 4
59200: PPUSH
59201: CALL_OW 273
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: ST_TO_ADDR
// for i = tmp downto 1 do
59218: LD_ADDR_VAR 0 4
59222: PUSH
59223: DOUBLE
59224: LD_VAR 0 6
59228: INC
59229: ST_TO_ADDR
59230: LD_INT 1
59232: PUSH
59233: FOR_DOWNTO
59234: IFFALSE 59335
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59236: LD_VAR 0 6
59240: PUSH
59241: LD_VAR 0 4
59245: ARRAY
59246: PUSH
59247: LD_INT 1
59249: ARRAY
59250: PPUSH
59251: LD_VAR 0 6
59255: PUSH
59256: LD_VAR 0 4
59260: ARRAY
59261: PUSH
59262: LD_INT 2
59264: ARRAY
59265: PPUSH
59266: CALL_OW 488
59270: NOT
59271: PUSH
59272: LD_VAR 0 6
59276: PUSH
59277: LD_VAR 0 4
59281: ARRAY
59282: PUSH
59283: LD_INT 1
59285: ARRAY
59286: PPUSH
59287: LD_VAR 0 6
59291: PUSH
59292: LD_VAR 0 4
59296: ARRAY
59297: PUSH
59298: LD_INT 2
59300: ARRAY
59301: PPUSH
59302: CALL_OW 428
59306: PUSH
59307: LD_INT 0
59309: NONEQUAL
59310: OR
59311: IFFALSE 59333
// tmp := Delete ( tmp , i ) ;
59313: LD_ADDR_VAR 0 6
59317: PUSH
59318: LD_VAR 0 6
59322: PPUSH
59323: LD_VAR 0 4
59327: PPUSH
59328: CALL_OW 3
59332: ST_TO_ADDR
59333: GO 59233
59335: POP
59336: POP
// j := GetClosestHex ( unit , tmp ) ;
59337: LD_ADDR_VAR 0 5
59341: PUSH
59342: LD_VAR 0 1
59346: PPUSH
59347: LD_VAR 0 6
59351: PPUSH
59352: CALL 58637 0 2
59356: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59357: LD_VAR 0 1
59361: PPUSH
59362: LD_VAR 0 5
59366: PUSH
59367: LD_INT 1
59369: ARRAY
59370: PPUSH
59371: LD_VAR 0 5
59375: PUSH
59376: LD_INT 2
59378: ARRAY
59379: PPUSH
59380: CALL_OW 111
// end ;
59384: LD_VAR 0 3
59388: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59389: LD_INT 0
59391: PPUSH
59392: PPUSH
59393: PPUSH
// uc_side = 0 ;
59394: LD_ADDR_OWVAR 20
59398: PUSH
59399: LD_INT 0
59401: ST_TO_ADDR
// uc_nation = 0 ;
59402: LD_ADDR_OWVAR 21
59406: PUSH
59407: LD_INT 0
59409: ST_TO_ADDR
// InitHc ;
59410: CALL_OW 19
// InitVc ;
59414: CALL_OW 20
// if mastodonts then
59418: LD_VAR 0 6
59422: IFFALSE 59489
// for i = 1 to mastodonts do
59424: LD_ADDR_VAR 0 11
59428: PUSH
59429: DOUBLE
59430: LD_INT 1
59432: DEC
59433: ST_TO_ADDR
59434: LD_VAR 0 6
59438: PUSH
59439: FOR_TO
59440: IFFALSE 59487
// begin vc_chassis := 31 ;
59442: LD_ADDR_OWVAR 37
59446: PUSH
59447: LD_INT 31
59449: ST_TO_ADDR
// vc_control := control_rider ;
59450: LD_ADDR_OWVAR 38
59454: PUSH
59455: LD_INT 4
59457: ST_TO_ADDR
// animal := CreateVehicle ;
59458: LD_ADDR_VAR 0 12
59462: PUSH
59463: CALL_OW 45
59467: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59468: LD_VAR 0 12
59472: PPUSH
59473: LD_VAR 0 8
59477: PPUSH
59478: LD_INT 0
59480: PPUSH
59481: CALL 61558 0 3
// end ;
59485: GO 59439
59487: POP
59488: POP
// if horses then
59489: LD_VAR 0 5
59493: IFFALSE 59560
// for i = 1 to horses do
59495: LD_ADDR_VAR 0 11
59499: PUSH
59500: DOUBLE
59501: LD_INT 1
59503: DEC
59504: ST_TO_ADDR
59505: LD_VAR 0 5
59509: PUSH
59510: FOR_TO
59511: IFFALSE 59558
// begin hc_class := 21 ;
59513: LD_ADDR_OWVAR 28
59517: PUSH
59518: LD_INT 21
59520: ST_TO_ADDR
// hc_gallery :=  ;
59521: LD_ADDR_OWVAR 33
59525: PUSH
59526: LD_STRING 
59528: ST_TO_ADDR
// animal := CreateHuman ;
59529: LD_ADDR_VAR 0 12
59533: PUSH
59534: CALL_OW 44
59538: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59539: LD_VAR 0 12
59543: PPUSH
59544: LD_VAR 0 8
59548: PPUSH
59549: LD_INT 0
59551: PPUSH
59552: CALL 61558 0 3
// end ;
59556: GO 59510
59558: POP
59559: POP
// if birds then
59560: LD_VAR 0 1
59564: IFFALSE 59631
// for i = 1 to birds do
59566: LD_ADDR_VAR 0 11
59570: PUSH
59571: DOUBLE
59572: LD_INT 1
59574: DEC
59575: ST_TO_ADDR
59576: LD_VAR 0 1
59580: PUSH
59581: FOR_TO
59582: IFFALSE 59629
// begin hc_class = 18 ;
59584: LD_ADDR_OWVAR 28
59588: PUSH
59589: LD_INT 18
59591: ST_TO_ADDR
// hc_gallery =  ;
59592: LD_ADDR_OWVAR 33
59596: PUSH
59597: LD_STRING 
59599: ST_TO_ADDR
// animal := CreateHuman ;
59600: LD_ADDR_VAR 0 12
59604: PUSH
59605: CALL_OW 44
59609: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59610: LD_VAR 0 12
59614: PPUSH
59615: LD_VAR 0 8
59619: PPUSH
59620: LD_INT 0
59622: PPUSH
59623: CALL 61558 0 3
// end ;
59627: GO 59581
59629: POP
59630: POP
// if tigers then
59631: LD_VAR 0 2
59635: IFFALSE 59719
// for i = 1 to tigers do
59637: LD_ADDR_VAR 0 11
59641: PUSH
59642: DOUBLE
59643: LD_INT 1
59645: DEC
59646: ST_TO_ADDR
59647: LD_VAR 0 2
59651: PUSH
59652: FOR_TO
59653: IFFALSE 59717
// begin hc_class = class_tiger ;
59655: LD_ADDR_OWVAR 28
59659: PUSH
59660: LD_INT 14
59662: ST_TO_ADDR
// hc_gallery =  ;
59663: LD_ADDR_OWVAR 33
59667: PUSH
59668: LD_STRING 
59670: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
59671: LD_ADDR_OWVAR 35
59675: PUSH
59676: LD_INT 7
59678: NEG
59679: PPUSH
59680: LD_INT 7
59682: PPUSH
59683: CALL_OW 12
59687: ST_TO_ADDR
// animal := CreateHuman ;
59688: LD_ADDR_VAR 0 12
59692: PUSH
59693: CALL_OW 44
59697: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59698: LD_VAR 0 12
59702: PPUSH
59703: LD_VAR 0 8
59707: PPUSH
59708: LD_INT 0
59710: PPUSH
59711: CALL 61558 0 3
// end ;
59715: GO 59652
59717: POP
59718: POP
// if apemans then
59719: LD_VAR 0 3
59723: IFFALSE 59846
// for i = 1 to apemans do
59725: LD_ADDR_VAR 0 11
59729: PUSH
59730: DOUBLE
59731: LD_INT 1
59733: DEC
59734: ST_TO_ADDR
59735: LD_VAR 0 3
59739: PUSH
59740: FOR_TO
59741: IFFALSE 59844
// begin hc_class = class_apeman ;
59743: LD_ADDR_OWVAR 28
59747: PUSH
59748: LD_INT 12
59750: ST_TO_ADDR
// hc_gallery =  ;
59751: LD_ADDR_OWVAR 33
59755: PUSH
59756: LD_STRING 
59758: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
59759: LD_ADDR_OWVAR 35
59763: PUSH
59764: LD_INT 5
59766: NEG
59767: PPUSH
59768: LD_INT 5
59770: PPUSH
59771: CALL_OW 12
59775: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59776: LD_ADDR_OWVAR 31
59780: PUSH
59781: LD_INT 1
59783: PPUSH
59784: LD_INT 3
59786: PPUSH
59787: CALL_OW 12
59791: PUSH
59792: LD_INT 1
59794: PPUSH
59795: LD_INT 3
59797: PPUSH
59798: CALL_OW 12
59802: PUSH
59803: LD_INT 0
59805: PUSH
59806: LD_INT 0
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: ST_TO_ADDR
// animal := CreateHuman ;
59815: LD_ADDR_VAR 0 12
59819: PUSH
59820: CALL_OW 44
59824: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59825: LD_VAR 0 12
59829: PPUSH
59830: LD_VAR 0 8
59834: PPUSH
59835: LD_INT 0
59837: PPUSH
59838: CALL 61558 0 3
// end ;
59842: GO 59740
59844: POP
59845: POP
// if enchidnas then
59846: LD_VAR 0 4
59850: IFFALSE 59917
// for i = 1 to enchidnas do
59852: LD_ADDR_VAR 0 11
59856: PUSH
59857: DOUBLE
59858: LD_INT 1
59860: DEC
59861: ST_TO_ADDR
59862: LD_VAR 0 4
59866: PUSH
59867: FOR_TO
59868: IFFALSE 59915
// begin hc_class = 13 ;
59870: LD_ADDR_OWVAR 28
59874: PUSH
59875: LD_INT 13
59877: ST_TO_ADDR
// hc_gallery =  ;
59878: LD_ADDR_OWVAR 33
59882: PUSH
59883: LD_STRING 
59885: ST_TO_ADDR
// animal := CreateHuman ;
59886: LD_ADDR_VAR 0 12
59890: PUSH
59891: CALL_OW 44
59895: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59896: LD_VAR 0 12
59900: PPUSH
59901: LD_VAR 0 8
59905: PPUSH
59906: LD_INT 0
59908: PPUSH
59909: CALL 61558 0 3
// end ;
59913: GO 59867
59915: POP
59916: POP
// if fishes then
59917: LD_VAR 0 7
59921: IFFALSE 59988
// for i = 1 to fishes do
59923: LD_ADDR_VAR 0 11
59927: PUSH
59928: DOUBLE
59929: LD_INT 1
59931: DEC
59932: ST_TO_ADDR
59933: LD_VAR 0 7
59937: PUSH
59938: FOR_TO
59939: IFFALSE 59986
// begin hc_class = 20 ;
59941: LD_ADDR_OWVAR 28
59945: PUSH
59946: LD_INT 20
59948: ST_TO_ADDR
// hc_gallery =  ;
59949: LD_ADDR_OWVAR 33
59953: PUSH
59954: LD_STRING 
59956: ST_TO_ADDR
// animal := CreateHuman ;
59957: LD_ADDR_VAR 0 12
59961: PUSH
59962: CALL_OW 44
59966: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59967: LD_VAR 0 12
59971: PPUSH
59972: LD_VAR 0 9
59976: PPUSH
59977: LD_INT 0
59979: PPUSH
59980: CALL 61558 0 3
// end ;
59984: GO 59938
59986: POP
59987: POP
// end ;
59988: LD_VAR 0 10
59992: RET
// export function WantHeal ( sci , unit ) ; begin
59993: LD_INT 0
59995: PPUSH
// if GetTaskList ( sci ) > 0 then
59996: LD_VAR 0 1
60000: PPUSH
60001: CALL_OW 437
60005: PUSH
60006: LD_INT 0
60008: GREATER
60009: IFFALSE 60079
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60011: LD_VAR 0 1
60015: PPUSH
60016: CALL_OW 437
60020: PUSH
60021: LD_INT 1
60023: ARRAY
60024: PUSH
60025: LD_INT 1
60027: ARRAY
60028: PUSH
60029: LD_STRING l
60031: EQUAL
60032: PUSH
60033: LD_VAR 0 1
60037: PPUSH
60038: CALL_OW 437
60042: PUSH
60043: LD_INT 1
60045: ARRAY
60046: PUSH
60047: LD_INT 4
60049: ARRAY
60050: PUSH
60051: LD_VAR 0 2
60055: EQUAL
60056: AND
60057: IFFALSE 60069
// result := true else
60059: LD_ADDR_VAR 0 3
60063: PUSH
60064: LD_INT 1
60066: ST_TO_ADDR
60067: GO 60077
// result := false ;
60069: LD_ADDR_VAR 0 3
60073: PUSH
60074: LD_INT 0
60076: ST_TO_ADDR
// end else
60077: GO 60087
// result := false ;
60079: LD_ADDR_VAR 0 3
60083: PUSH
60084: LD_INT 0
60086: ST_TO_ADDR
// end ;
60087: LD_VAR 0 3
60091: RET
// export function HealTarget ( sci ) ; begin
60092: LD_INT 0
60094: PPUSH
// if not sci then
60095: LD_VAR 0 1
60099: NOT
60100: IFFALSE 60104
// exit ;
60102: GO 60169
// result := 0 ;
60104: LD_ADDR_VAR 0 2
60108: PUSH
60109: LD_INT 0
60111: ST_TO_ADDR
// if GetTaskList ( sci ) then
60112: LD_VAR 0 1
60116: PPUSH
60117: CALL_OW 437
60121: IFFALSE 60169
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60123: LD_VAR 0 1
60127: PPUSH
60128: CALL_OW 437
60132: PUSH
60133: LD_INT 1
60135: ARRAY
60136: PUSH
60137: LD_INT 1
60139: ARRAY
60140: PUSH
60141: LD_STRING l
60143: EQUAL
60144: IFFALSE 60169
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60146: LD_ADDR_VAR 0 2
60150: PUSH
60151: LD_VAR 0 1
60155: PPUSH
60156: CALL_OW 437
60160: PUSH
60161: LD_INT 1
60163: ARRAY
60164: PUSH
60165: LD_INT 4
60167: ARRAY
60168: ST_TO_ADDR
// end ;
60169: LD_VAR 0 2
60173: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60174: LD_INT 0
60176: PPUSH
60177: PPUSH
60178: PPUSH
60179: PPUSH
// if not base_units then
60180: LD_VAR 0 1
60184: NOT
60185: IFFALSE 60189
// exit ;
60187: GO 60276
// result := false ;
60189: LD_ADDR_VAR 0 2
60193: PUSH
60194: LD_INT 0
60196: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60197: LD_ADDR_VAR 0 5
60201: PUSH
60202: LD_VAR 0 1
60206: PPUSH
60207: LD_INT 21
60209: PUSH
60210: LD_INT 3
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PPUSH
60217: CALL_OW 72
60221: ST_TO_ADDR
// if not tmp then
60222: LD_VAR 0 5
60226: NOT
60227: IFFALSE 60231
// exit ;
60229: GO 60276
// for i in tmp do
60231: LD_ADDR_VAR 0 3
60235: PUSH
60236: LD_VAR 0 5
60240: PUSH
60241: FOR_IN
60242: IFFALSE 60274
// begin result := EnemyInRange ( i , 22 ) ;
60244: LD_ADDR_VAR 0 2
60248: PUSH
60249: LD_VAR 0 3
60253: PPUSH
60254: LD_INT 22
60256: PPUSH
60257: CALL 58512 0 2
60261: ST_TO_ADDR
// if result then
60262: LD_VAR 0 2
60266: IFFALSE 60272
// exit ;
60268: POP
60269: POP
60270: GO 60276
// end ;
60272: GO 60241
60274: POP
60275: POP
// end ;
60276: LD_VAR 0 2
60280: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
60281: LD_INT 0
60283: PPUSH
60284: PPUSH
// if not units then
60285: LD_VAR 0 1
60289: NOT
60290: IFFALSE 60294
// exit ;
60292: GO 60364
// result := [ ] ;
60294: LD_ADDR_VAR 0 3
60298: PUSH
60299: EMPTY
60300: ST_TO_ADDR
// for i in units do
60301: LD_ADDR_VAR 0 4
60305: PUSH
60306: LD_VAR 0 1
60310: PUSH
60311: FOR_IN
60312: IFFALSE 60362
// if GetTag ( i ) = tag then
60314: LD_VAR 0 4
60318: PPUSH
60319: CALL_OW 110
60323: PUSH
60324: LD_VAR 0 2
60328: EQUAL
60329: IFFALSE 60360
// result := Insert ( result , result + 1 , i ) ;
60331: LD_ADDR_VAR 0 3
60335: PUSH
60336: LD_VAR 0 3
60340: PPUSH
60341: LD_VAR 0 3
60345: PUSH
60346: LD_INT 1
60348: PLUS
60349: PPUSH
60350: LD_VAR 0 4
60354: PPUSH
60355: CALL_OW 2
60359: ST_TO_ADDR
60360: GO 60311
60362: POP
60363: POP
// end ;
60364: LD_VAR 0 3
60368: RET
// export function IsDriver ( un ) ; begin
60369: LD_INT 0
60371: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60372: LD_ADDR_VAR 0 2
60376: PUSH
60377: LD_VAR 0 1
60381: PUSH
60382: LD_INT 55
60384: PUSH
60385: EMPTY
60386: LIST
60387: PPUSH
60388: CALL_OW 69
60392: IN
60393: ST_TO_ADDR
// end ;
60394: LD_VAR 0 2
60398: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60399: LD_INT 0
60401: PPUSH
60402: PPUSH
// list := [ ] ;
60403: LD_ADDR_VAR 0 5
60407: PUSH
60408: EMPTY
60409: ST_TO_ADDR
// case d of 0 :
60410: LD_VAR 0 3
60414: PUSH
60415: LD_INT 0
60417: DOUBLE
60418: EQUAL
60419: IFTRUE 60423
60421: GO 60556
60423: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60424: LD_ADDR_VAR 0 5
60428: PUSH
60429: LD_VAR 0 1
60433: PUSH
60434: LD_INT 4
60436: MINUS
60437: PUSH
60438: LD_VAR 0 2
60442: PUSH
60443: LD_INT 4
60445: MINUS
60446: PUSH
60447: LD_INT 2
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: LIST
60454: PUSH
60455: LD_VAR 0 1
60459: PUSH
60460: LD_INT 3
60462: MINUS
60463: PUSH
60464: LD_VAR 0 2
60468: PUSH
60469: LD_INT 1
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: LIST
60476: PUSH
60477: LD_VAR 0 1
60481: PUSH
60482: LD_INT 4
60484: PLUS
60485: PUSH
60486: LD_VAR 0 2
60490: PUSH
60491: LD_INT 4
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: LIST
60498: PUSH
60499: LD_VAR 0 1
60503: PUSH
60504: LD_INT 3
60506: PLUS
60507: PUSH
60508: LD_VAR 0 2
60512: PUSH
60513: LD_INT 3
60515: PLUS
60516: PUSH
60517: LD_INT 5
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: LIST
60524: PUSH
60525: LD_VAR 0 1
60529: PUSH
60530: LD_VAR 0 2
60534: PUSH
60535: LD_INT 4
60537: PLUS
60538: PUSH
60539: LD_INT 0
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: LIST
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: ST_TO_ADDR
// end ; 1 :
60554: GO 61254
60556: LD_INT 1
60558: DOUBLE
60559: EQUAL
60560: IFTRUE 60564
60562: GO 60697
60564: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60565: LD_ADDR_VAR 0 5
60569: PUSH
60570: LD_VAR 0 1
60574: PUSH
60575: LD_VAR 0 2
60579: PUSH
60580: LD_INT 4
60582: MINUS
60583: PUSH
60584: LD_INT 3
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: LIST
60591: PUSH
60592: LD_VAR 0 1
60596: PUSH
60597: LD_INT 3
60599: MINUS
60600: PUSH
60601: LD_VAR 0 2
60605: PUSH
60606: LD_INT 3
60608: MINUS
60609: PUSH
60610: LD_INT 2
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: LIST
60617: PUSH
60618: LD_VAR 0 1
60622: PUSH
60623: LD_INT 4
60625: MINUS
60626: PUSH
60627: LD_VAR 0 2
60631: PUSH
60632: LD_INT 1
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: LIST
60639: PUSH
60640: LD_VAR 0 1
60644: PUSH
60645: LD_VAR 0 2
60649: PUSH
60650: LD_INT 3
60652: PLUS
60653: PUSH
60654: LD_INT 0
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: LIST
60661: PUSH
60662: LD_VAR 0 1
60666: PUSH
60667: LD_INT 4
60669: PLUS
60670: PUSH
60671: LD_VAR 0 2
60675: PUSH
60676: LD_INT 4
60678: PLUS
60679: PUSH
60680: LD_INT 5
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: LIST
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: ST_TO_ADDR
// end ; 2 :
60695: GO 61254
60697: LD_INT 2
60699: DOUBLE
60700: EQUAL
60701: IFTRUE 60705
60703: GO 60834
60705: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60706: LD_ADDR_VAR 0 5
60710: PUSH
60711: LD_VAR 0 1
60715: PUSH
60716: LD_VAR 0 2
60720: PUSH
60721: LD_INT 3
60723: MINUS
60724: PUSH
60725: LD_INT 3
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: LIST
60732: PUSH
60733: LD_VAR 0 1
60737: PUSH
60738: LD_INT 4
60740: PLUS
60741: PUSH
60742: LD_VAR 0 2
60746: PUSH
60747: LD_INT 4
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: LIST
60754: PUSH
60755: LD_VAR 0 1
60759: PUSH
60760: LD_VAR 0 2
60764: PUSH
60765: LD_INT 4
60767: PLUS
60768: PUSH
60769: LD_INT 0
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: LIST
60776: PUSH
60777: LD_VAR 0 1
60781: PUSH
60782: LD_INT 3
60784: MINUS
60785: PUSH
60786: LD_VAR 0 2
60790: PUSH
60791: LD_INT 1
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: LIST
60798: PUSH
60799: LD_VAR 0 1
60803: PUSH
60804: LD_INT 4
60806: MINUS
60807: PUSH
60808: LD_VAR 0 2
60812: PUSH
60813: LD_INT 4
60815: MINUS
60816: PUSH
60817: LD_INT 2
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: LIST
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: ST_TO_ADDR
// end ; 3 :
60832: GO 61254
60834: LD_INT 3
60836: DOUBLE
60837: EQUAL
60838: IFTRUE 60842
60840: GO 60975
60842: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60843: LD_ADDR_VAR 0 5
60847: PUSH
60848: LD_VAR 0 1
60852: PUSH
60853: LD_INT 3
60855: PLUS
60856: PUSH
60857: LD_VAR 0 2
60861: PUSH
60862: LD_INT 4
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: LIST
60869: PUSH
60870: LD_VAR 0 1
60874: PUSH
60875: LD_INT 4
60877: PLUS
60878: PUSH
60879: LD_VAR 0 2
60883: PUSH
60884: LD_INT 4
60886: PLUS
60887: PUSH
60888: LD_INT 5
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: LIST
60895: PUSH
60896: LD_VAR 0 1
60900: PUSH
60901: LD_INT 4
60903: MINUS
60904: PUSH
60905: LD_VAR 0 2
60909: PUSH
60910: LD_INT 1
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: LIST
60917: PUSH
60918: LD_VAR 0 1
60922: PUSH
60923: LD_VAR 0 2
60927: PUSH
60928: LD_INT 4
60930: MINUS
60931: PUSH
60932: LD_INT 3
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: LIST
60939: PUSH
60940: LD_VAR 0 1
60944: PUSH
60945: LD_INT 3
60947: MINUS
60948: PUSH
60949: LD_VAR 0 2
60953: PUSH
60954: LD_INT 3
60956: MINUS
60957: PUSH
60958: LD_INT 2
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: LIST
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: ST_TO_ADDR
// end ; 4 :
60973: GO 61254
60975: LD_INT 4
60977: DOUBLE
60978: EQUAL
60979: IFTRUE 60983
60981: GO 61116
60983: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60984: LD_ADDR_VAR 0 5
60988: PUSH
60989: LD_VAR 0 1
60993: PUSH
60994: LD_VAR 0 2
60998: PUSH
60999: LD_INT 4
61001: PLUS
61002: PUSH
61003: LD_INT 0
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: LIST
61010: PUSH
61011: LD_VAR 0 1
61015: PUSH
61016: LD_INT 3
61018: PLUS
61019: PUSH
61020: LD_VAR 0 2
61024: PUSH
61025: LD_INT 3
61027: PLUS
61028: PUSH
61029: LD_INT 5
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: LIST
61036: PUSH
61037: LD_VAR 0 1
61041: PUSH
61042: LD_INT 4
61044: PLUS
61045: PUSH
61046: LD_VAR 0 2
61050: PUSH
61051: LD_INT 4
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: LIST
61058: PUSH
61059: LD_VAR 0 1
61063: PUSH
61064: LD_VAR 0 2
61068: PUSH
61069: LD_INT 3
61071: MINUS
61072: PUSH
61073: LD_INT 3
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: LIST
61080: PUSH
61081: LD_VAR 0 1
61085: PUSH
61086: LD_INT 4
61088: MINUS
61089: PUSH
61090: LD_VAR 0 2
61094: PUSH
61095: LD_INT 4
61097: MINUS
61098: PUSH
61099: LD_INT 2
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: LIST
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: ST_TO_ADDR
// end ; 5 :
61114: GO 61254
61116: LD_INT 5
61118: DOUBLE
61119: EQUAL
61120: IFTRUE 61124
61122: GO 61253
61124: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61125: LD_ADDR_VAR 0 5
61129: PUSH
61130: LD_VAR 0 1
61134: PUSH
61135: LD_INT 4
61137: MINUS
61138: PUSH
61139: LD_VAR 0 2
61143: PUSH
61144: LD_INT 1
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: LIST
61151: PUSH
61152: LD_VAR 0 1
61156: PUSH
61157: LD_VAR 0 2
61161: PUSH
61162: LD_INT 4
61164: MINUS
61165: PUSH
61166: LD_INT 3
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: LIST
61173: PUSH
61174: LD_VAR 0 1
61178: PUSH
61179: LD_INT 4
61181: PLUS
61182: PUSH
61183: LD_VAR 0 2
61187: PUSH
61188: LD_INT 4
61190: PLUS
61191: PUSH
61192: LD_INT 5
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: LIST
61199: PUSH
61200: LD_VAR 0 1
61204: PUSH
61205: LD_INT 3
61207: PLUS
61208: PUSH
61209: LD_VAR 0 2
61213: PUSH
61214: LD_INT 4
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: LIST
61221: PUSH
61222: LD_VAR 0 1
61226: PUSH
61227: LD_VAR 0 2
61231: PUSH
61232: LD_INT 3
61234: PLUS
61235: PUSH
61236: LD_INT 0
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: LIST
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: ST_TO_ADDR
// end ; end ;
61251: GO 61254
61253: POP
// result := list ;
61254: LD_ADDR_VAR 0 4
61258: PUSH
61259: LD_VAR 0 5
61263: ST_TO_ADDR
// end ;
61264: LD_VAR 0 4
61268: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61269: LD_INT 0
61271: PPUSH
61272: PPUSH
61273: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61274: LD_VAR 0 1
61278: NOT
61279: PUSH
61280: LD_VAR 0 2
61284: PUSH
61285: LD_INT 1
61287: PUSH
61288: LD_INT 2
61290: PUSH
61291: LD_INT 3
61293: PUSH
61294: LD_INT 4
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: IN
61303: NOT
61304: OR
61305: IFFALSE 61309
// exit ;
61307: GO 61401
// tmp := [ ] ;
61309: LD_ADDR_VAR 0 5
61313: PUSH
61314: EMPTY
61315: ST_TO_ADDR
// for i in units do
61316: LD_ADDR_VAR 0 4
61320: PUSH
61321: LD_VAR 0 1
61325: PUSH
61326: FOR_IN
61327: IFFALSE 61370
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
61329: LD_ADDR_VAR 0 5
61333: PUSH
61334: LD_VAR 0 5
61338: PPUSH
61339: LD_VAR 0 5
61343: PUSH
61344: LD_INT 1
61346: PLUS
61347: PPUSH
61348: LD_VAR 0 4
61352: PPUSH
61353: LD_VAR 0 2
61357: PPUSH
61358: CALL_OW 259
61362: PPUSH
61363: CALL_OW 2
61367: ST_TO_ADDR
61368: GO 61326
61370: POP
61371: POP
// if not tmp then
61372: LD_VAR 0 5
61376: NOT
61377: IFFALSE 61381
// exit ;
61379: GO 61401
// result := SortListByListDesc ( units , tmp ) ;
61381: LD_ADDR_VAR 0 3
61385: PUSH
61386: LD_VAR 0 1
61390: PPUSH
61391: LD_VAR 0 5
61395: PPUSH
61396: CALL_OW 77
61400: ST_TO_ADDR
// end ;
61401: LD_VAR 0 3
61405: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61406: LD_INT 0
61408: PPUSH
61409: PPUSH
61410: PPUSH
// x := GetX ( building ) ;
61411: LD_ADDR_VAR 0 4
61415: PUSH
61416: LD_VAR 0 2
61420: PPUSH
61421: CALL_OW 250
61425: ST_TO_ADDR
// y := GetY ( building ) ;
61426: LD_ADDR_VAR 0 5
61430: PUSH
61431: LD_VAR 0 2
61435: PPUSH
61436: CALL_OW 251
61440: ST_TO_ADDR
// if GetTaskList ( unit ) then
61441: LD_VAR 0 1
61445: PPUSH
61446: CALL_OW 437
61450: IFFALSE 61545
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61452: LD_STRING e
61454: PUSH
61455: LD_VAR 0 1
61459: PPUSH
61460: CALL_OW 437
61464: PUSH
61465: LD_INT 1
61467: ARRAY
61468: PUSH
61469: LD_INT 1
61471: ARRAY
61472: EQUAL
61473: PUSH
61474: LD_VAR 0 4
61478: PUSH
61479: LD_VAR 0 1
61483: PPUSH
61484: CALL_OW 437
61488: PUSH
61489: LD_INT 1
61491: ARRAY
61492: PUSH
61493: LD_INT 2
61495: ARRAY
61496: EQUAL
61497: AND
61498: PUSH
61499: LD_VAR 0 5
61503: PUSH
61504: LD_VAR 0 1
61508: PPUSH
61509: CALL_OW 437
61513: PUSH
61514: LD_INT 1
61516: ARRAY
61517: PUSH
61518: LD_INT 3
61520: ARRAY
61521: EQUAL
61522: AND
61523: IFFALSE 61535
// result := true else
61525: LD_ADDR_VAR 0 3
61529: PUSH
61530: LD_INT 1
61532: ST_TO_ADDR
61533: GO 61543
// result := false ;
61535: LD_ADDR_VAR 0 3
61539: PUSH
61540: LD_INT 0
61542: ST_TO_ADDR
// end else
61543: GO 61553
// result := false ;
61545: LD_ADDR_VAR 0 3
61549: PUSH
61550: LD_INT 0
61552: ST_TO_ADDR
// end ;
61553: LD_VAR 0 3
61557: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61558: LD_INT 0
61560: PPUSH
61561: PPUSH
61562: PPUSH
61563: PPUSH
// if not unit or not area then
61564: LD_VAR 0 1
61568: NOT
61569: PUSH
61570: LD_VAR 0 2
61574: NOT
61575: OR
61576: IFFALSE 61580
// exit ;
61578: GO 61744
// tmp := AreaToList ( area , i ) ;
61580: LD_ADDR_VAR 0 6
61584: PUSH
61585: LD_VAR 0 2
61589: PPUSH
61590: LD_VAR 0 5
61594: PPUSH
61595: CALL_OW 517
61599: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61600: LD_ADDR_VAR 0 5
61604: PUSH
61605: DOUBLE
61606: LD_INT 1
61608: DEC
61609: ST_TO_ADDR
61610: LD_VAR 0 6
61614: PUSH
61615: LD_INT 1
61617: ARRAY
61618: PUSH
61619: FOR_TO
61620: IFFALSE 61742
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61622: LD_ADDR_VAR 0 7
61626: PUSH
61627: LD_VAR 0 6
61631: PUSH
61632: LD_INT 1
61634: ARRAY
61635: PUSH
61636: LD_VAR 0 5
61640: ARRAY
61641: PUSH
61642: LD_VAR 0 6
61646: PUSH
61647: LD_INT 2
61649: ARRAY
61650: PUSH
61651: LD_VAR 0 5
61655: ARRAY
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
61661: LD_VAR 0 7
61665: PUSH
61666: LD_INT 1
61668: ARRAY
61669: PPUSH
61670: LD_VAR 0 7
61674: PUSH
61675: LD_INT 2
61677: ARRAY
61678: PPUSH
61679: CALL_OW 428
61683: PUSH
61684: LD_INT 0
61686: EQUAL
61687: IFFALSE 61740
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61689: LD_VAR 0 1
61693: PPUSH
61694: LD_VAR 0 7
61698: PUSH
61699: LD_INT 1
61701: ARRAY
61702: PPUSH
61703: LD_VAR 0 7
61707: PUSH
61708: LD_INT 2
61710: ARRAY
61711: PPUSH
61712: LD_VAR 0 3
61716: PPUSH
61717: CALL_OW 48
// result := IsPlaced ( unit ) ;
61721: LD_ADDR_VAR 0 4
61725: PUSH
61726: LD_VAR 0 1
61730: PPUSH
61731: CALL_OW 305
61735: ST_TO_ADDR
// exit ;
61736: POP
61737: POP
61738: GO 61744
// end ; end ;
61740: GO 61619
61742: POP
61743: POP
// end ;
61744: LD_VAR 0 4
61748: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61749: LD_INT 0
61751: PPUSH
61752: PPUSH
61753: PPUSH
// if not side or side > 8 then
61754: LD_VAR 0 1
61758: NOT
61759: PUSH
61760: LD_VAR 0 1
61764: PUSH
61765: LD_INT 8
61767: GREATER
61768: OR
61769: IFFALSE 61773
// exit ;
61771: GO 61960
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61773: LD_ADDR_VAR 0 4
61777: PUSH
61778: LD_INT 22
61780: PUSH
61781: LD_VAR 0 1
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: LD_INT 21
61792: PUSH
61793: LD_INT 3
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PPUSH
61804: CALL_OW 69
61808: ST_TO_ADDR
// if not tmp then
61809: LD_VAR 0 4
61813: NOT
61814: IFFALSE 61818
// exit ;
61816: GO 61960
// enable_addtolog := true ;
61818: LD_ADDR_OWVAR 81
61822: PUSH
61823: LD_INT 1
61825: ST_TO_ADDR
// AddToLog ( [ ) ;
61826: LD_STRING [
61828: PPUSH
61829: CALL_OW 561
// for i in tmp do
61833: LD_ADDR_VAR 0 3
61837: PUSH
61838: LD_VAR 0 4
61842: PUSH
61843: FOR_IN
61844: IFFALSE 61951
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61846: LD_STRING [
61848: PUSH
61849: LD_VAR 0 3
61853: PPUSH
61854: CALL_OW 266
61858: STR
61859: PUSH
61860: LD_STRING , 
61862: STR
61863: PUSH
61864: LD_VAR 0 3
61868: PPUSH
61869: CALL_OW 250
61873: STR
61874: PUSH
61875: LD_STRING , 
61877: STR
61878: PUSH
61879: LD_VAR 0 3
61883: PPUSH
61884: CALL_OW 251
61888: STR
61889: PUSH
61890: LD_STRING , 
61892: STR
61893: PUSH
61894: LD_VAR 0 3
61898: PPUSH
61899: CALL_OW 254
61903: STR
61904: PUSH
61905: LD_STRING , 
61907: STR
61908: PUSH
61909: LD_VAR 0 3
61913: PPUSH
61914: LD_INT 1
61916: PPUSH
61917: CALL_OW 268
61921: STR
61922: PUSH
61923: LD_STRING , 
61925: STR
61926: PUSH
61927: LD_VAR 0 3
61931: PPUSH
61932: LD_INT 2
61934: PPUSH
61935: CALL_OW 268
61939: STR
61940: PUSH
61941: LD_STRING ],
61943: STR
61944: PPUSH
61945: CALL_OW 561
// end ;
61949: GO 61843
61951: POP
61952: POP
// AddToLog ( ]; ) ;
61953: LD_STRING ];
61955: PPUSH
61956: CALL_OW 561
// end ;
61960: LD_VAR 0 2
61964: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61965: LD_INT 0
61967: PPUSH
61968: PPUSH
61969: PPUSH
61970: PPUSH
61971: PPUSH
// if not area or not rate or not max then
61972: LD_VAR 0 1
61976: NOT
61977: PUSH
61978: LD_VAR 0 2
61982: NOT
61983: OR
61984: PUSH
61985: LD_VAR 0 4
61989: NOT
61990: OR
61991: IFFALSE 61995
// exit ;
61993: GO 62187
// while 1 do
61995: LD_INT 1
61997: IFFALSE 62187
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61999: LD_ADDR_VAR 0 9
62003: PUSH
62004: LD_VAR 0 1
62008: PPUSH
62009: LD_INT 1
62011: PPUSH
62012: CALL_OW 287
62016: PUSH
62017: LD_INT 10
62019: MUL
62020: ST_TO_ADDR
// r := rate / 10 ;
62021: LD_ADDR_VAR 0 7
62025: PUSH
62026: LD_VAR 0 2
62030: PUSH
62031: LD_INT 10
62033: DIVREAL
62034: ST_TO_ADDR
// time := 1 1$00 ;
62035: LD_ADDR_VAR 0 8
62039: PUSH
62040: LD_INT 2100
62042: ST_TO_ADDR
// if amount < min then
62043: LD_VAR 0 9
62047: PUSH
62048: LD_VAR 0 3
62052: LESS
62053: IFFALSE 62071
// r := r * 2 else
62055: LD_ADDR_VAR 0 7
62059: PUSH
62060: LD_VAR 0 7
62064: PUSH
62065: LD_INT 2
62067: MUL
62068: ST_TO_ADDR
62069: GO 62097
// if amount > max then
62071: LD_VAR 0 9
62075: PUSH
62076: LD_VAR 0 4
62080: GREATER
62081: IFFALSE 62097
// r := r / 2 ;
62083: LD_ADDR_VAR 0 7
62087: PUSH
62088: LD_VAR 0 7
62092: PUSH
62093: LD_INT 2
62095: DIVREAL
62096: ST_TO_ADDR
// time := time / r ;
62097: LD_ADDR_VAR 0 8
62101: PUSH
62102: LD_VAR 0 8
62106: PUSH
62107: LD_VAR 0 7
62111: DIVREAL
62112: ST_TO_ADDR
// if time < 0 then
62113: LD_VAR 0 8
62117: PUSH
62118: LD_INT 0
62120: LESS
62121: IFFALSE 62138
// time := time * - 1 ;
62123: LD_ADDR_VAR 0 8
62127: PUSH
62128: LD_VAR 0 8
62132: PUSH
62133: LD_INT 1
62135: NEG
62136: MUL
62137: ST_TO_ADDR
// wait ( time ) ;
62138: LD_VAR 0 8
62142: PPUSH
62143: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
62147: LD_INT 35
62149: PPUSH
62150: LD_INT 875
62152: PPUSH
62153: CALL_OW 12
62157: PPUSH
62158: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62162: LD_INT 1
62164: PPUSH
62165: LD_INT 5
62167: PPUSH
62168: CALL_OW 12
62172: PPUSH
62173: LD_VAR 0 1
62177: PPUSH
62178: LD_INT 1
62180: PPUSH
62181: CALL_OW 55
// end ;
62185: GO 61995
// end ;
62187: LD_VAR 0 5
62191: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62192: LD_INT 0
62194: PPUSH
62195: PPUSH
62196: PPUSH
62197: PPUSH
62198: PPUSH
62199: PPUSH
62200: PPUSH
62201: PPUSH
// if not turrets or not factories then
62202: LD_VAR 0 1
62206: NOT
62207: PUSH
62208: LD_VAR 0 2
62212: NOT
62213: OR
62214: IFFALSE 62218
// exit ;
62216: GO 62525
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62218: LD_ADDR_VAR 0 10
62222: PUSH
62223: LD_INT 5
62225: PUSH
62226: LD_INT 6
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PUSH
62233: LD_INT 2
62235: PUSH
62236: LD_INT 4
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 3
62245: PUSH
62246: LD_INT 5
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 24
62260: PUSH
62261: LD_INT 25
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_INT 23
62270: PUSH
62271: LD_INT 27
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 42
62284: PUSH
62285: LD_INT 43
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 44
62294: PUSH
62295: LD_INT 46
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 45
62304: PUSH
62305: LD_INT 47
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: LIST
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: LIST
62321: ST_TO_ADDR
// result := [ ] ;
62322: LD_ADDR_VAR 0 3
62326: PUSH
62327: EMPTY
62328: ST_TO_ADDR
// for i in turrets do
62329: LD_ADDR_VAR 0 4
62333: PUSH
62334: LD_VAR 0 1
62338: PUSH
62339: FOR_IN
62340: IFFALSE 62523
// begin nat := GetNation ( i ) ;
62342: LD_ADDR_VAR 0 7
62346: PUSH
62347: LD_VAR 0 4
62351: PPUSH
62352: CALL_OW 248
62356: ST_TO_ADDR
// weapon := 0 ;
62357: LD_ADDR_VAR 0 8
62361: PUSH
62362: LD_INT 0
62364: ST_TO_ADDR
// if not nat then
62365: LD_VAR 0 7
62369: NOT
62370: IFFALSE 62374
// continue ;
62372: GO 62339
// for j in list [ nat ] do
62374: LD_ADDR_VAR 0 5
62378: PUSH
62379: LD_VAR 0 10
62383: PUSH
62384: LD_VAR 0 7
62388: ARRAY
62389: PUSH
62390: FOR_IN
62391: IFFALSE 62432
// if GetBWeapon ( i ) = j [ 1 ] then
62393: LD_VAR 0 4
62397: PPUSH
62398: CALL_OW 269
62402: PUSH
62403: LD_VAR 0 5
62407: PUSH
62408: LD_INT 1
62410: ARRAY
62411: EQUAL
62412: IFFALSE 62430
// begin weapon := j [ 2 ] ;
62414: LD_ADDR_VAR 0 8
62418: PUSH
62419: LD_VAR 0 5
62423: PUSH
62424: LD_INT 2
62426: ARRAY
62427: ST_TO_ADDR
// break ;
62428: GO 62432
// end ;
62430: GO 62390
62432: POP
62433: POP
// if not weapon then
62434: LD_VAR 0 8
62438: NOT
62439: IFFALSE 62443
// continue ;
62441: GO 62339
// for k in factories do
62443: LD_ADDR_VAR 0 6
62447: PUSH
62448: LD_VAR 0 2
62452: PUSH
62453: FOR_IN
62454: IFFALSE 62519
// begin weapons := AvailableWeaponList ( k ) ;
62456: LD_ADDR_VAR 0 9
62460: PUSH
62461: LD_VAR 0 6
62465: PPUSH
62466: CALL_OW 478
62470: ST_TO_ADDR
// if not weapons then
62471: LD_VAR 0 9
62475: NOT
62476: IFFALSE 62480
// continue ;
62478: GO 62453
// if weapon in weapons then
62480: LD_VAR 0 8
62484: PUSH
62485: LD_VAR 0 9
62489: IN
62490: IFFALSE 62517
// begin result := [ i , weapon ] ;
62492: LD_ADDR_VAR 0 3
62496: PUSH
62497: LD_VAR 0 4
62501: PUSH
62502: LD_VAR 0 8
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: ST_TO_ADDR
// exit ;
62511: POP
62512: POP
62513: POP
62514: POP
62515: GO 62525
// end ; end ;
62517: GO 62453
62519: POP
62520: POP
// end ;
62521: GO 62339
62523: POP
62524: POP
// end ;
62525: LD_VAR 0 3
62529: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62530: LD_INT 0
62532: PPUSH
// if not side or side > 8 then
62533: LD_VAR 0 3
62537: NOT
62538: PUSH
62539: LD_VAR 0 3
62543: PUSH
62544: LD_INT 8
62546: GREATER
62547: OR
62548: IFFALSE 62552
// exit ;
62550: GO 62611
// if not range then
62552: LD_VAR 0 4
62556: NOT
62557: IFFALSE 62568
// range := - 12 ;
62559: LD_ADDR_VAR 0 4
62563: PUSH
62564: LD_INT 12
62566: NEG
62567: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62568: LD_VAR 0 1
62572: PPUSH
62573: LD_VAR 0 2
62577: PPUSH
62578: LD_VAR 0 3
62582: PPUSH
62583: LD_VAR 0 4
62587: PPUSH
62588: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62592: LD_VAR 0 1
62596: PPUSH
62597: LD_VAR 0 2
62601: PPUSH
62602: LD_VAR 0 3
62606: PPUSH
62607: CALL_OW 331
// end ;
62611: LD_VAR 0 5
62615: RET
// export function Video ( mode ) ; begin
62616: LD_INT 0
62618: PPUSH
// ingame_video = mode ;
62619: LD_ADDR_OWVAR 52
62623: PUSH
62624: LD_VAR 0 1
62628: ST_TO_ADDR
// interface_hidden = mode ;
62629: LD_ADDR_OWVAR 54
62633: PUSH
62634: LD_VAR 0 1
62638: ST_TO_ADDR
// end ;
62639: LD_VAR 0 2
62643: RET
// export function Join ( array , element ) ; begin
62644: LD_INT 0
62646: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62647: LD_ADDR_VAR 0 3
62651: PUSH
62652: LD_VAR 0 1
62656: PPUSH
62657: LD_VAR 0 1
62661: PUSH
62662: LD_INT 1
62664: PLUS
62665: PPUSH
62666: LD_VAR 0 2
62670: PPUSH
62671: CALL_OW 1
62675: ST_TO_ADDR
// end ;
62676: LD_VAR 0 3
62680: RET
// export function JoinUnion ( array , element ) ; begin
62681: LD_INT 0
62683: PPUSH
// result := array union element ;
62684: LD_ADDR_VAR 0 3
62688: PUSH
62689: LD_VAR 0 1
62693: PUSH
62694: LD_VAR 0 2
62698: UNION
62699: ST_TO_ADDR
// end ;
62700: LD_VAR 0 3
62704: RET
// export function GetBehemoths ( side ) ; begin
62705: LD_INT 0
62707: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
62708: LD_ADDR_VAR 0 2
62712: PUSH
62713: LD_INT 22
62715: PUSH
62716: LD_VAR 0 1
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: PUSH
62725: LD_INT 31
62727: PUSH
62728: LD_INT 25
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PPUSH
62739: CALL_OW 69
62743: ST_TO_ADDR
// end ;
62744: LD_VAR 0 2
62748: RET
// export function Shuffle ( array ) ; var i , index ; begin
62749: LD_INT 0
62751: PPUSH
62752: PPUSH
62753: PPUSH
// result := [ ] ;
62754: LD_ADDR_VAR 0 2
62758: PUSH
62759: EMPTY
62760: ST_TO_ADDR
// if not array then
62761: LD_VAR 0 1
62765: NOT
62766: IFFALSE 62770
// exit ;
62768: GO 62869
// Randomize ;
62770: CALL_OW 10
// for i = array downto 1 do
62774: LD_ADDR_VAR 0 3
62778: PUSH
62779: DOUBLE
62780: LD_VAR 0 1
62784: INC
62785: ST_TO_ADDR
62786: LD_INT 1
62788: PUSH
62789: FOR_DOWNTO
62790: IFFALSE 62867
// begin index := rand ( 1 , array ) ;
62792: LD_ADDR_VAR 0 4
62796: PUSH
62797: LD_INT 1
62799: PPUSH
62800: LD_VAR 0 1
62804: PPUSH
62805: CALL_OW 12
62809: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62810: LD_ADDR_VAR 0 2
62814: PUSH
62815: LD_VAR 0 2
62819: PPUSH
62820: LD_VAR 0 2
62824: PUSH
62825: LD_INT 1
62827: PLUS
62828: PPUSH
62829: LD_VAR 0 1
62833: PUSH
62834: LD_VAR 0 4
62838: ARRAY
62839: PPUSH
62840: CALL_OW 2
62844: ST_TO_ADDR
// array := Delete ( array , index ) ;
62845: LD_ADDR_VAR 0 1
62849: PUSH
62850: LD_VAR 0 1
62854: PPUSH
62855: LD_VAR 0 4
62859: PPUSH
62860: CALL_OW 3
62864: ST_TO_ADDR
// end ;
62865: GO 62789
62867: POP
62868: POP
// end ;
62869: LD_VAR 0 2
62873: RET
// export function GetBaseMaterials ( base ) ; begin
62874: LD_INT 0
62876: PPUSH
// result := [ 0 , 0 , 0 ] ;
62877: LD_ADDR_VAR 0 2
62881: PUSH
62882: LD_INT 0
62884: PUSH
62885: LD_INT 0
62887: PUSH
62888: LD_INT 0
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: LIST
62895: ST_TO_ADDR
// if not base then
62896: LD_VAR 0 1
62900: NOT
62901: IFFALSE 62905
// exit ;
62903: GO 62954
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62905: LD_ADDR_VAR 0 2
62909: PUSH
62910: LD_VAR 0 1
62914: PPUSH
62915: LD_INT 1
62917: PPUSH
62918: CALL_OW 275
62922: PUSH
62923: LD_VAR 0 1
62927: PPUSH
62928: LD_INT 2
62930: PPUSH
62931: CALL_OW 275
62935: PUSH
62936: LD_VAR 0 1
62940: PPUSH
62941: LD_INT 3
62943: PPUSH
62944: CALL_OW 275
62948: PUSH
62949: EMPTY
62950: LIST
62951: LIST
62952: LIST
62953: ST_TO_ADDR
// end ;
62954: LD_VAR 0 2
62958: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62959: LD_INT 0
62961: PPUSH
62962: PPUSH
// result := array ;
62963: LD_ADDR_VAR 0 3
62967: PUSH
62968: LD_VAR 0 1
62972: ST_TO_ADDR
// if size > 0 then
62973: LD_VAR 0 2
62977: PUSH
62978: LD_INT 0
62980: GREATER
62981: IFFALSE 63027
// for i := array downto size do
62983: LD_ADDR_VAR 0 4
62987: PUSH
62988: DOUBLE
62989: LD_VAR 0 1
62993: INC
62994: ST_TO_ADDR
62995: LD_VAR 0 2
62999: PUSH
63000: FOR_DOWNTO
63001: IFFALSE 63025
// result := Delete ( result , result ) ;
63003: LD_ADDR_VAR 0 3
63007: PUSH
63008: LD_VAR 0 3
63012: PPUSH
63013: LD_VAR 0 3
63017: PPUSH
63018: CALL_OW 3
63022: ST_TO_ADDR
63023: GO 63000
63025: POP
63026: POP
// end ;
63027: LD_VAR 0 3
63031: RET
// export function ComExit ( unit ) ; var tmp ; begin
63032: LD_INT 0
63034: PPUSH
63035: PPUSH
// if not IsInUnit ( unit ) then
63036: LD_VAR 0 1
63040: PPUSH
63041: CALL_OW 310
63045: NOT
63046: IFFALSE 63050
// exit ;
63048: GO 63110
// tmp := IsInUnit ( unit ) ;
63050: LD_ADDR_VAR 0 3
63054: PUSH
63055: LD_VAR 0 1
63059: PPUSH
63060: CALL_OW 310
63064: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63065: LD_VAR 0 3
63069: PPUSH
63070: CALL_OW 247
63074: PUSH
63075: LD_INT 2
63077: EQUAL
63078: IFFALSE 63091
// ComExitVehicle ( unit ) else
63080: LD_VAR 0 1
63084: PPUSH
63085: CALL_OW 121
63089: GO 63100
// ComExitBuilding ( unit ) ;
63091: LD_VAR 0 1
63095: PPUSH
63096: CALL_OW 122
// result := tmp ;
63100: LD_ADDR_VAR 0 2
63104: PUSH
63105: LD_VAR 0 3
63109: ST_TO_ADDR
// end ;
63110: LD_VAR 0 2
63114: RET
// export function ResetHc ; begin
63115: LD_INT 0
63117: PPUSH
// InitHc ;
63118: CALL_OW 19
// hc_importance := 0 ;
63122: LD_ADDR_OWVAR 32
63126: PUSH
63127: LD_INT 0
63129: ST_TO_ADDR
// end ;
63130: LD_VAR 0 1
63134: RET
