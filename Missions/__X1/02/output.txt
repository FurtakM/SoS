// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 46 0 0
// PrepareNature ;
  19: CALL 589 0 0
// PrepareAmericans ;
  23: CALL 835 0 0
// PrepareArabian ;
  27: CALL 9907 0 0
// if debug then
  31: LD_EXP 1
  35: IFFALSE 41
// DebugMode ;
  37: CALL 198 0 0
// Action ;
  41: CALL 4431 0 0
// end ;
  45: END
// export debug , prefix , missionStart , aviradzeSpotted , deltaSpotted , sciSpotted , aviradzeQuestDone , sciCounterKill , usAlert , usActiveDefend , timeUntilFarmer , attackDeltaAllowed , trickyMove , usPatrol , trap , lostCounter ; function Init ; begin
  46: LD_INT 0
  48: PPUSH
// debug := 1 ;
  49: LD_ADDR_EXP 1
  53: PUSH
  54: LD_INT 1
  56: ST_TO_ADDR
// missionStart := false ;
  57: LD_ADDR_EXP 3
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// aviradzeSpotted := false ;
  65: LD_ADDR_EXP 4
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// deltaSpotted := false ;
  73: LD_ADDR_EXP 5
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// sciSpotted := false ;
  81: LD_ADDR_EXP 6
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// sciCounterKill := 0 ;
  89: LD_ADDR_EXP 8
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// aviradzeQuestDone := false ;
  97: LD_ADDR_EXP 7
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// attackDeltaAllowed := false ;
 105: LD_ADDR_EXP 12
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usAlert := false ;
 113: LD_ADDR_EXP 9
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// usActiveDefend := false ;
 121: LD_ADDR_EXP 10
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// usPatrol := [ ] ;
 129: LD_ADDR_EXP 14
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// timeUntilFarmer := [ 40 40$00 , 30 30$00 , 20 20$00 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 11
 140: PUSH
 141: LD_INT 84000
 143: PUSH
 144: LD_INT 63000
 146: PUSH
 147: LD_INT 42000
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: PUSH
 155: LD_OWVAR 67
 159: ARRAY
 160: ST_TO_ADDR
// trickyMove := false ;
 161: LD_ADDR_EXP 13
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// prefix := 01_ ;
 169: LD_ADDR_EXP 2
 173: PUSH
 174: LD_STRING 01_
 176: ST_TO_ADDR
// trap := 0 ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// lostCounter := false ;
 185: LD_ADDR_EXP 16
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// end ;
 193: LD_VAR 0 1
 197: RET
// function DebugMode ; begin
 198: LD_INT 0
 200: PPUSH
// FogOff ( 1 ) ;
 201: LD_INT 1
 203: PPUSH
 204: CALL_OW 344
// Difficulty := 2 ;
 208: LD_ADDR_OWVAR 67
 212: PUSH
 213: LD_INT 2
 215: ST_TO_ADDR
// end ; end_of_file
 216: LD_VAR 0 1
 220: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 221: LD_INT 0
 223: PPUSH
 224: PPUSH
// if exist_mode then
 225: LD_VAR 0 2
 229: IFFALSE 254
// unit := CreateCharacter ( prefix & ident ) else
 231: LD_ADDR_VAR 0 5
 235: PUSH
 236: LD_VAR 0 3
 240: PUSH
 241: LD_VAR 0 1
 245: STR
 246: PPUSH
 247: CALL_OW 34
 251: ST_TO_ADDR
 252: GO 269
// unit := NewCharacter ( ident ) ;
 254: LD_ADDR_VAR 0 5
 258: PUSH
 259: LD_VAR 0 1
 263: PPUSH
 264: CALL_OW 25
 268: ST_TO_ADDR
// result := unit ;
 269: LD_ADDR_VAR 0 4
 273: PUSH
 274: LD_VAR 0 5
 278: ST_TO_ADDR
// end ;
 279: LD_VAR 0 4
 283: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 284: LD_INT 0
 286: PPUSH
// uc_side := side ;
 287: LD_ADDR_OWVAR 20
 291: PUSH
 292: LD_VAR 0 1
 296: ST_TO_ADDR
// uc_nation := nation ;
 297: LD_ADDR_OWVAR 21
 301: PUSH
 302: LD_VAR 0 2
 306: ST_TO_ADDR
// vc_chassis := chassis ;
 307: LD_ADDR_OWVAR 37
 311: PUSH
 312: LD_VAR 0 3
 316: ST_TO_ADDR
// vc_engine := engine ;
 317: LD_ADDR_OWVAR 39
 321: PUSH
 322: LD_VAR 0 4
 326: ST_TO_ADDR
// vc_control := control ;
 327: LD_ADDR_OWVAR 38
 331: PUSH
 332: LD_VAR 0 5
 336: ST_TO_ADDR
// vc_weapon := weapon ;
 337: LD_ADDR_OWVAR 40
 341: PUSH
 342: LD_VAR 0 6
 346: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 347: LD_ADDR_OWVAR 41
 351: PUSH
 352: LD_VAR 0 7
 356: ST_TO_ADDR
// result := CreateVehicle ;
 357: LD_ADDR_VAR 0 8
 361: PUSH
 362: CALL_OW 45
 366: ST_TO_ADDR
// end ;
 367: LD_VAR 0 8
 371: RET
// export function SayX ( units , ident ) ; var i ; begin
 372: LD_INT 0
 374: PPUSH
 375: PPUSH
// result := false ;
 376: LD_ADDR_VAR 0 3
 380: PUSH
 381: LD_INT 0
 383: ST_TO_ADDR
// if not units then
 384: LD_VAR 0 1
 388: NOT
 389: IFFALSE 393
// exit ;
 391: GO 447
// for i in units do
 393: LD_ADDR_VAR 0 4
 397: PUSH
 398: LD_VAR 0 1
 402: PUSH
 403: FOR_IN
 404: IFFALSE 445
// if IsOk ( i ) then
 406: LD_VAR 0 4
 410: PPUSH
 411: CALL_OW 302
 415: IFFALSE 443
// begin Say ( i , ident ) ;
 417: LD_VAR 0 4
 421: PPUSH
 422: LD_VAR 0 2
 426: PPUSH
 427: CALL_OW 88
// result := i ;
 431: LD_ADDR_VAR 0 3
 435: PUSH
 436: LD_VAR 0 4
 440: ST_TO_ADDR
// break ;
 441: GO 445
// end ;
 443: GO 403
 445: POP
 446: POP
// end ;
 447: LD_VAR 0 3
 451: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 452: LD_INT 0
 454: PPUSH
 455: PPUSH
// InitUc ;
 456: CALL_OW 18
// InitHc ;
 460: CALL_OW 19
// uc_side := 0 ;
 464: LD_ADDR_OWVAR 20
 468: PUSH
 469: LD_INT 0
 471: ST_TO_ADDR
// uc_nation := 0 ;
 472: LD_ADDR_OWVAR 21
 476: PUSH
 477: LD_INT 0
 479: ST_TO_ADDR
// for i = 1 to amount do
 480: LD_ADDR_VAR 0 4
 484: PUSH
 485: DOUBLE
 486: LD_INT 1
 488: DEC
 489: ST_TO_ADDR
 490: LD_VAR 0 2
 494: PUSH
 495: FOR_TO
 496: IFFALSE 578
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 498: LD_ADDR_OWVAR 29
 502: PUSH
 503: LD_INT 9
 505: PPUSH
 506: LD_INT 12
 508: PPUSH
 509: CALL_OW 12
 513: PUSH
 514: LD_INT 9
 516: PPUSH
 517: LD_INT 12
 519: PPUSH
 520: CALL_OW 12
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 529: LD_ADDR_OWVAR 35
 533: PUSH
 534: LD_INT 1
 536: NEG
 537: PPUSH
 538: LD_INT 1
 540: PPUSH
 541: CALL_OW 12
 545: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 546: LD_INT 0
 548: PPUSH
 549: LD_INT 12
 551: PPUSH
 552: LD_INT 1
 554: PPUSH
 555: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 559: CALL_OW 44
 563: PPUSH
 564: LD_VAR 0 1
 568: PPUSH
 569: LD_INT 0
 571: PPUSH
 572: CALL_OW 49
// end ;
 576: GO 495
 578: POP
 579: POP
// InitHc ;
 580: CALL_OW 19
// end ;
 584: LD_VAR 0 3
 588: RET
// export function PrepareNature ; var i ; begin
 589: LD_INT 0
 591: PPUSH
 592: PPUSH
// SpawnApeman ( forest , 9 ) ;
 593: LD_INT 1
 595: PPUSH
 596: LD_INT 9
 598: PPUSH
 599: CALL 452 0 2
// for i := 1 to 4 do
 603: LD_ADDR_VAR 0 2
 607: PUSH
 608: DOUBLE
 609: LD_INT 1
 611: DEC
 612: ST_TO_ADDR
 613: LD_INT 4
 615: PUSH
 616: FOR_TO
 617: IFFALSE 652
// begin hc_class := 21 ;
 619: LD_ADDR_OWVAR 28
 623: PUSH
 624: LD_INT 21
 626: ST_TO_ADDR
// hc_gallery :=  ;
 627: LD_ADDR_OWVAR 33
 631: PUSH
 632: LD_STRING 
 634: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 635: CALL_OW 44
 639: PPUSH
 640: LD_INT 1
 642: PPUSH
 643: LD_INT 0
 645: PPUSH
 646: CALL_OW 49
// end ;
 650: GO 616
 652: POP
 653: POP
// for i := 1 to 2 do
 654: LD_ADDR_VAR 0 2
 658: PUSH
 659: DOUBLE
 660: LD_INT 1
 662: DEC
 663: ST_TO_ADDR
 664: LD_INT 2
 666: PUSH
 667: FOR_TO
 668: IFFALSE 703
// begin hc_class := 18 ;
 670: LD_ADDR_OWVAR 28
 674: PUSH
 675: LD_INT 18
 677: ST_TO_ADDR
// hc_gallery :=  ;
 678: LD_ADDR_OWVAR 33
 682: PUSH
 683: LD_STRING 
 685: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 686: CALL_OW 44
 690: PPUSH
 691: LD_INT 1
 693: PPUSH
 694: LD_INT 0
 696: PPUSH
 697: CALL_OW 49
// end ;
 701: GO 667
 703: POP
 704: POP
// for i := 1 to 3 do
 705: LD_ADDR_VAR 0 2
 709: PUSH
 710: DOUBLE
 711: LD_INT 1
 713: DEC
 714: ST_TO_ADDR
 715: LD_INT 3
 717: PUSH
 718: FOR_TO
 719: IFFALSE 754
// begin hc_class := 13 ;
 721: LD_ADDR_OWVAR 28
 725: PUSH
 726: LD_INT 13
 728: ST_TO_ADDR
// hc_gallery :=  ;
 729: LD_ADDR_OWVAR 33
 733: PUSH
 734: LD_STRING 
 736: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 737: CALL_OW 44
 741: PPUSH
 742: LD_INT 1
 744: PPUSH
 745: LD_INT 0
 747: PPUSH
 748: CALL_OW 49
// end ;
 752: GO 718
 754: POP
 755: POP
// end ;
 756: LD_VAR 0 1
 760: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 761: LD_INT 0
 763: PPUSH
 764: PPUSH
 765: PPUSH
// if not observer or not unit then
 766: LD_VAR 0 1
 770: NOT
 771: PUSH
 772: LD_VAR 0 2
 776: NOT
 777: OR
 778: IFFALSE 782
// exit ;
 780: GO 830
// if not See ( GetSide ( observer ) , unit ) then
 782: LD_VAR 0 1
 786: PPUSH
 787: CALL_OW 255
 791: PPUSH
 792: LD_VAR 0 2
 796: PPUSH
 797: CALL_OW 292
 801: NOT
 802: IFFALSE 806
// exit ;
 804: GO 830
// result := GetDistUnits ( observer , unit ) < 12 ;
 806: LD_ADDR_VAR 0 3
 810: PUSH
 811: LD_VAR 0 1
 815: PPUSH
 816: LD_VAR 0 2
 820: PPUSH
 821: CALL_OW 296
 825: PUSH
 826: LD_INT 12
 828: LESS
 829: ST_TO_ADDR
// end ; end_of_file
 830: LD_VAR 0 3
 834: RET
// export Gladstone , Lynch ; export usForces , usSci ; export function PrepareAmericans ; var i , un , veh , tmp , arm ; begin
 835: LD_INT 0
 837: PPUSH
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
 842: PPUSH
// usForces := [ ] ;
 843: LD_ADDR_EXP 19
 847: PUSH
 848: EMPTY
 849: ST_TO_ADDR
// usSci := [ ] ;
 850: LD_ADDR_EXP 20
 854: PUSH
 855: EMPTY
 856: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
 857: LD_INT 1
 859: PPUSH
 860: LD_STRING Delta
 862: PPUSH
 863: CALL_OW 500
// SetResourceType ( GetBase ( Delta ) , mat_cans , 400 ) ;
 867: LD_INT 1
 869: PPUSH
 870: CALL_OW 274
 874: PPUSH
 875: LD_INT 1
 877: PPUSH
 878: LD_INT 400
 880: PPUSH
 881: CALL_OW 277
// SetResourceType ( GetBase ( Delta ) , mat_oil , 80 ) ;
 885: LD_INT 1
 887: PPUSH
 888: CALL_OW 274
 892: PPUSH
 893: LD_INT 2
 895: PPUSH
 896: LD_INT 80
 898: PPUSH
 899: CALL_OW 277
// uc_side := 1 ;
 903: LD_ADDR_OWVAR 20
 907: PUSH
 908: LD_INT 1
 910: ST_TO_ADDR
// uc_nation := 1 ;
 911: LD_ADDR_OWVAR 21
 915: PUSH
 916: LD_INT 1
 918: ST_TO_ADDR
// InitHc ;
 919: CALL_OW 19
// hc_importance := 0 ;
 923: LD_ADDR_OWVAR 32
 927: PUSH
 928: LD_INT 0
 930: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
 931: LD_ADDR_EXP 18
 935: PUSH
 936: LD_STRING Lynch
 938: PPUSH
 939: LD_INT 0
 941: PPUSH
 942: LD_STRING 
 944: PPUSH
 945: CALL 221 0 3
 949: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false ,  ) ;
 950: LD_ADDR_EXP 17
 954: PUSH
 955: LD_STRING Gladstone
 957: PPUSH
 958: LD_INT 0
 960: PPUSH
 961: LD_STRING 
 963: PPUSH
 964: CALL 221 0 3
 968: ST_TO_ADDR
// PlaceHumanInUnit ( Lynch , Delta ) ;
 969: LD_EXP 18
 973: PPUSH
 974: LD_INT 1
 976: PPUSH
 977: CALL_OW 52
// PlaceHumanInUnit ( Gladstone , usLab ) ;
 981: LD_EXP 17
 985: PPUSH
 986: LD_INT 3
 988: PPUSH
 989: CALL_OW 52
// for i := 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
 993: LD_ADDR_VAR 0 2
 997: PUSH
 998: DOUBLE
 999: LD_INT 1
1001: DEC
1002: ST_TO_ADDR
1003: LD_INT 1
1005: PUSH
1006: LD_INT 2
1008: PUSH
1009: LD_INT 2
1011: PUSH
1012: EMPTY
1013: LIST
1014: LIST
1015: LIST
1016: PUSH
1017: LD_OWVAR 67
1021: ARRAY
1022: PUSH
1023: FOR_TO
1024: IFFALSE 1070
// begin PrepareHuman ( false , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
1026: LD_INT 0
1028: PPUSH
1029: LD_INT 2
1031: PPUSH
1032: LD_INT 1
1034: PUSH
1035: LD_INT 2
1037: PUSH
1038: LD_INT 2
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: LIST
1045: PUSH
1046: LD_OWVAR 67
1050: ARRAY
1051: PPUSH
1052: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , Delta ) ;
1056: CALL_OW 44
1060: PPUSH
1061: LD_INT 1
1063: PPUSH
1064: CALL_OW 52
// end ;
1068: GO 1023
1070: POP
1071: POP
// for i := 1 to 2 + Difficulty do
1072: LD_ADDR_VAR 0 2
1076: PUSH
1077: DOUBLE
1078: LD_INT 1
1080: DEC
1081: ST_TO_ADDR
1082: LD_INT 2
1084: PUSH
1085: LD_OWVAR 67
1089: PLUS
1090: PUSH
1091: FOR_TO
1092: IFFALSE 1177
// begin PrepareHuman ( false , 4 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
1094: LD_INT 0
1096: PPUSH
1097: LD_INT 4
1099: PPUSH
1100: LD_INT 1
1102: PUSH
1103: LD_INT 2
1105: PUSH
1106: LD_INT 2
1108: PUSH
1109: EMPTY
1110: LIST
1111: LIST
1112: LIST
1113: PUSH
1114: LD_OWVAR 67
1118: ARRAY
1119: PPUSH
1120: CALL_OW 380
// un := CreateHuman ;
1124: LD_ADDR_VAR 0 3
1128: PUSH
1129: CALL_OW 44
1133: ST_TO_ADDR
// PlaceHumanInUnit ( un , usLab ) ;
1134: LD_VAR 0 3
1138: PPUSH
1139: LD_INT 3
1141: PPUSH
1142: CALL_OW 52
// usSci := Replace ( usSci , usSci + 1 , un ) ;
1146: LD_ADDR_EXP 20
1150: PUSH
1151: LD_EXP 20
1155: PPUSH
1156: LD_EXP 20
1160: PUSH
1161: LD_INT 1
1163: PLUS
1164: PPUSH
1165: LD_VAR 0 3
1169: PPUSH
1170: CALL_OW 1
1174: ST_TO_ADDR
// end ;
1175: GO 1091
1177: POP
1178: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
1179: LD_ADDR_VAR 0 6
1183: PUSH
1184: LD_INT 22
1186: PUSH
1187: LD_INT 1
1189: PUSH
1190: EMPTY
1191: LIST
1192: LIST
1193: PUSH
1194: LD_INT 30
1196: PUSH
1197: LD_INT 4
1199: PUSH
1200: EMPTY
1201: LIST
1202: LIST
1203: PUSH
1204: EMPTY
1205: LIST
1206: LIST
1207: PPUSH
1208: CALL_OW 69
1212: ST_TO_ADDR
// for i := 1 to 3 + Difficulty do
1213: LD_ADDR_VAR 0 2
1217: PUSH
1218: DOUBLE
1219: LD_INT 1
1221: DEC
1222: ST_TO_ADDR
1223: LD_INT 3
1225: PUSH
1226: LD_OWVAR 67
1230: PLUS
1231: PUSH
1232: FOR_TO
1233: IFFALSE 1311
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
1235: LD_INT 0
1237: PPUSH
1238: LD_INT 1
1240: PPUSH
1241: LD_INT 1
1243: PUSH
1244: LD_INT 2
1246: PUSH
1247: LD_INT 3
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: LIST
1254: PUSH
1255: LD_OWVAR 67
1259: ARRAY
1260: PPUSH
1261: CALL_OW 380
// un := CreateHuman ;
1265: LD_ADDR_VAR 0 3
1269: PUSH
1270: CALL_OW 44
1274: ST_TO_ADDR
// usForces := usForces ^ un ;
1275: LD_ADDR_EXP 19
1279: PUSH
1280: LD_EXP 19
1284: PUSH
1285: LD_VAR 0 3
1289: ADD
1290: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm [ 1 ] ) ;
1291: LD_VAR 0 3
1295: PPUSH
1296: LD_VAR 0 6
1300: PUSH
1301: LD_INT 1
1303: ARRAY
1304: PPUSH
1305: CALL_OW 52
// end ;
1309: GO 1232
1311: POP
1312: POP
// PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 100 ) ;
1313: LD_INT 1
1315: PPUSH
1316: LD_INT 1
1318: PPUSH
1319: LD_INT 1
1321: PPUSH
1322: LD_INT 2
1324: PPUSH
1325: LD_INT 1
1327: PPUSH
1328: LD_INT 2
1330: PPUSH
1331: LD_INT 100
1333: PPUSH
1334: CALL 284 0 7
// veh := CreateVehicle ;
1338: LD_ADDR_VAR 0 4
1342: PUSH
1343: CALL_OW 45
1347: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1348: LD_VAR 0 4
1352: PPUSH
1353: LD_INT 2
1355: PPUSH
1356: CALL_OW 233
// PlaceUnitXY ( veh , 43 , 24 , false ) ;
1360: LD_VAR 0 4
1364: PPUSH
1365: LD_INT 43
1367: PPUSH
1368: LD_INT 24
1370: PPUSH
1371: LD_INT 0
1373: PPUSH
1374: CALL_OW 48
// end ;
1378: LD_VAR 0 1
1382: RET
// export function SendSciToForest ; var i , j , k , tmp , xy ; begin
1383: LD_INT 0
1385: PPUSH
1386: PPUSH
1387: PPUSH
1388: PPUSH
1389: PPUSH
1390: PPUSH
// if not usSci then
1391: LD_EXP 20
1395: NOT
1396: IFFALSE 1400
// exit ;
1398: GO 1574
// xy := AreaToList ( tameArea , 0 ) ;
1400: LD_ADDR_VAR 0 6
1404: PUSH
1405: LD_INT 5
1407: PPUSH
1408: LD_INT 0
1410: PPUSH
1411: CALL_OW 517
1415: ST_TO_ADDR
// for i in usSci do
1416: LD_ADDR_VAR 0 2
1420: PUSH
1421: LD_EXP 20
1425: PUSH
1426: FOR_IN
1427: IFFALSE 1572
// begin k := rand ( 1 , xy [ 1 ] ) ;
1429: LD_ADDR_VAR 0 4
1433: PUSH
1434: LD_INT 1
1436: PPUSH
1437: LD_VAR 0 6
1441: PUSH
1442: LD_INT 1
1444: ARRAY
1445: PPUSH
1446: CALL_OW 12
1450: ST_TO_ADDR
// ComExitBuilding ( i ) ;
1451: LD_VAR 0 2
1455: PPUSH
1456: CALL_OW 122
// AddComMoveXY ( i , xy [ 1 ] [ k ] , xy [ 2 ] [ k ] ) ;
1460: LD_VAR 0 2
1464: PPUSH
1465: LD_VAR 0 6
1469: PUSH
1470: LD_INT 1
1472: ARRAY
1473: PUSH
1474: LD_VAR 0 4
1478: ARRAY
1479: PPUSH
1480: LD_VAR 0 6
1484: PUSH
1485: LD_INT 2
1487: ARRAY
1488: PUSH
1489: LD_VAR 0 4
1493: ARRAY
1494: PPUSH
1495: CALL_OW 171
// for j := 1 to 2 do
1499: LD_ADDR_VAR 0 3
1503: PUSH
1504: DOUBLE
1505: LD_INT 1
1507: DEC
1508: ST_TO_ADDR
1509: LD_INT 2
1511: PUSH
1512: FOR_TO
1513: IFFALSE 1568
// begin tmp := Delete ( xy [ j ] , k ) ;
1515: LD_ADDR_VAR 0 5
1519: PUSH
1520: LD_VAR 0 6
1524: PUSH
1525: LD_VAR 0 3
1529: ARRAY
1530: PPUSH
1531: LD_VAR 0 4
1535: PPUSH
1536: CALL_OW 3
1540: ST_TO_ADDR
// xy := Replace ( xy , j , tmp ) ;
1541: LD_ADDR_VAR 0 6
1545: PUSH
1546: LD_VAR 0 6
1550: PPUSH
1551: LD_VAR 0 3
1555: PPUSH
1556: LD_VAR 0 5
1560: PPUSH
1561: CALL_OW 1
1565: ST_TO_ADDR
// end ;
1566: GO 1512
1568: POP
1569: POP
// end ;
1570: GO 1426
1572: POP
1573: POP
// end ;
1574: LD_VAR 0 1
1578: RET
// every 0 0$5 + 0 0$10 trigger usSci and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do var i , x , y , d , ape ;
1579: LD_EXP 20
1583: PUSH
1584: LD_INT 22
1586: PUSH
1587: LD_INT 0
1589: PUSH
1590: EMPTY
1591: LIST
1592: LIST
1593: PUSH
1594: LD_INT 25
1596: PUSH
1597: LD_INT 12
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: PUSH
1604: EMPTY
1605: LIST
1606: LIST
1607: PPUSH
1608: CALL_OW 69
1612: AND
1613: IFFALSE 2102
1615: GO 1617
1617: DISABLE
1618: LD_INT 0
1620: PPUSH
1621: PPUSH
1622: PPUSH
1623: PPUSH
1624: PPUSH
// begin enable ;
1625: ENABLE
// if UnitFilter ( usSci , [ f_or , [ f_hastask ] , [ f_inside ] ] ) then
1626: LD_EXP 20
1630: PPUSH
1631: LD_INT 2
1633: PUSH
1634: LD_INT 60
1636: PUSH
1637: EMPTY
1638: LIST
1639: PUSH
1640: LD_INT 54
1642: PUSH
1643: EMPTY
1644: LIST
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: LIST
1650: PPUSH
1651: CALL_OW 72
1655: IFFALSE 1659
// exit ;
1657: GO 2102
// for i in usSci do
1659: LD_ADDR_VAR 0 1
1663: PUSH
1664: LD_EXP 20
1668: PUSH
1669: FOR_IN
1670: IFFALSE 2100
// begin if not HasTask ( i ) and GetLives ( i ) = 1000 then
1672: LD_VAR 0 1
1676: PPUSH
1677: CALL_OW 314
1681: NOT
1682: PUSH
1683: LD_VAR 0 1
1687: PPUSH
1688: CALL_OW 256
1692: PUSH
1693: LD_INT 1000
1695: EQUAL
1696: AND
1697: IFFALSE 1904
// begin ape := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) , i ) ;
1699: LD_ADDR_VAR 0 5
1703: PUSH
1704: LD_INT 22
1706: PUSH
1707: LD_INT 0
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: PUSH
1714: LD_INT 25
1716: PUSH
1717: LD_INT 12
1719: PUSH
1720: EMPTY
1721: LIST
1722: LIST
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: PPUSH
1728: CALL_OW 69
1732: PPUSH
1733: LD_VAR 0 1
1737: PPUSH
1738: CALL_OW 74
1742: ST_TO_ADDR
// if GetDistUnits ( i , ape ) < 10 then
1743: LD_VAR 0 1
1747: PPUSH
1748: LD_VAR 0 5
1752: PPUSH
1753: CALL_OW 296
1757: PUSH
1758: LD_INT 10
1760: LESS
1761: IFFALSE 1794
// ComTameXY ( i , GetX ( ape ) , GetY ( ape ) ) else
1763: LD_VAR 0 1
1767: PPUSH
1768: LD_VAR 0 5
1772: PPUSH
1773: CALL_OW 250
1777: PPUSH
1778: LD_VAR 0 5
1782: PPUSH
1783: CALL_OW 251
1787: PPUSH
1788: CALL_OW 131
1792: GO 1904
// begin d := rand ( 0 , 5 ) ;
1794: LD_ADDR_VAR 0 4
1798: PUSH
1799: LD_INT 0
1801: PPUSH
1802: LD_INT 5
1804: PPUSH
1805: CALL_OW 12
1809: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 3 ) ;
1810: LD_ADDR_VAR 0 2
1814: PUSH
1815: LD_VAR 0 1
1819: PPUSH
1820: CALL_OW 250
1824: PPUSH
1825: LD_VAR 0 4
1829: PPUSH
1830: LD_INT 3
1832: PPUSH
1833: CALL_OW 272
1837: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 3 ) ;
1838: LD_ADDR_VAR 0 3
1842: PUSH
1843: LD_VAR 0 1
1847: PPUSH
1848: CALL_OW 251
1852: PPUSH
1853: LD_VAR 0 4
1857: PPUSH
1858: LD_INT 3
1860: PPUSH
1861: CALL_OW 273
1865: ST_TO_ADDR
// if not ValidHex ( x , y ) then
1866: LD_VAR 0 2
1870: PPUSH
1871: LD_VAR 0 3
1875: PPUSH
1876: CALL_OW 488
1880: NOT
1881: IFFALSE 1885
// continue ;
1883: GO 1669
// ComMoveXY ( i , x , y ) ;
1885: LD_VAR 0 1
1889: PPUSH
1890: LD_VAR 0 2
1894: PPUSH
1895: LD_VAR 0 3
1899: PPUSH
1900: CALL_OW 111
// end ; end ; if GetLives ( i ) < 900 and GetDistUnitXY ( i , 37 , 23 ) > 10 then
1904: LD_VAR 0 1
1908: PPUSH
1909: CALL_OW 256
1913: PUSH
1914: LD_INT 900
1916: LESS
1917: PUSH
1918: LD_VAR 0 1
1922: PPUSH
1923: LD_INT 37
1925: PPUSH
1926: LD_INT 23
1928: PPUSH
1929: CALL_OW 297
1933: PUSH
1934: LD_INT 10
1936: GREATER
1937: AND
1938: IFFALSE 1988
// begin if IsOk ( Gladstone ) and IsInUnit ( Gladstone ) then
1940: LD_EXP 17
1944: PPUSH
1945: CALL_OW 302
1949: PUSH
1950: LD_EXP 17
1954: PPUSH
1955: CALL_OW 310
1959: AND
1960: IFFALSE 1971
// ComExitBuilding ( Gladstone ) ;
1962: LD_EXP 17
1966: PPUSH
1967: CALL_OW 122
// ComMoveXY ( i , 37 , 23 ) ;
1971: LD_VAR 0 1
1975: PPUSH
1976: LD_INT 37
1978: PPUSH
1979: LD_INT 23
1981: PPUSH
1982: CALL_OW 111
// end else
1986: GO 2098
// if GetLives ( i ) = 1000 then
1988: LD_VAR 0 1
1992: PPUSH
1993: CALL_OW 256
1997: PUSH
1998: LD_INT 1000
2000: EQUAL
2001: IFFALSE 2098
// begin if IsOk ( Gladstone ) then
2003: LD_EXP 17
2007: PPUSH
2008: CALL_OW 302
2012: IFFALSE 2026
// ComEnterUnit ( Gladstone , usLab ) ;
2014: LD_EXP 17
2018: PPUSH
2019: LD_INT 3
2021: PPUSH
2022: CALL_OW 120
// if SideShoot ( i ) = 2 then
2026: LD_VAR 0 1
2030: PPUSH
2031: CALL_OW 503
2035: PUSH
2036: LD_INT 2
2038: EQUAL
2039: IFFALSE 2086
// begin if not usAlert then
2041: LD_EXP 9
2045: NOT
2046: IFFALSE 2056
// usAlert := true ;
2048: LD_ADDR_EXP 9
2052: PUSH
2053: LD_INT 1
2055: ST_TO_ADDR
// AddComEnterUnit ( i , usLab ) ;
2056: LD_VAR 0 1
2060: PPUSH
2061: LD_INT 3
2063: PPUSH
2064: CALL_OW 180
// usSci := usSci diff i ;
2068: LD_ADDR_EXP 20
2072: PUSH
2073: LD_EXP 20
2077: PUSH
2078: LD_VAR 0 1
2082: DIFF
2083: ST_TO_ADDR
// end else
2084: GO 2098
// ComMoveToArea ( i , tameArea ) ;
2086: LD_VAR 0 1
2090: PPUSH
2091: LD_INT 5
2093: PPUSH
2094: CALL_OW 113
// end ; end ;
2098: GO 1669
2100: POP
2101: POP
// end ;
2102: PPOPN 5
2104: END
// every 0 0$1 trigger not usAlert and ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 999 ] ] ] ) or FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) ) do
2105: LD_EXP 9
2109: NOT
2110: PUSH
2111: LD_INT 22
2113: PUSH
2114: LD_INT 1
2116: PUSH
2117: EMPTY
2118: LIST
2119: LIST
2120: PUSH
2121: LD_INT 21
2123: PUSH
2124: LD_INT 3
2126: PUSH
2127: EMPTY
2128: LIST
2129: LIST
2130: PUSH
2131: LD_INT 3
2133: PUSH
2134: LD_INT 57
2136: PUSH
2137: EMPTY
2138: LIST
2139: PUSH
2140: EMPTY
2141: LIST
2142: LIST
2143: PUSH
2144: LD_INT 3
2146: PUSH
2147: LD_INT 24
2149: PUSH
2150: LD_INT 999
2152: PUSH
2153: EMPTY
2154: LIST
2155: LIST
2156: PUSH
2157: EMPTY
2158: LIST
2159: LIST
2160: PUSH
2161: EMPTY
2162: LIST
2163: LIST
2164: LIST
2165: LIST
2166: PPUSH
2167: CALL_OW 69
2171: PUSH
2172: LD_INT 7
2174: PPUSH
2175: LD_INT 22
2177: PUSH
2178: LD_INT 2
2180: PUSH
2181: EMPTY
2182: LIST
2183: LIST
2184: PPUSH
2185: CALL_OW 70
2189: OR
2190: AND
2191: IFFALSE 2204
2193: GO 2195
2195: DISABLE
// usAlert := true ;
2196: LD_ADDR_EXP 9
2200: PUSH
2201: LD_INT 1
2203: ST_TO_ADDR
2204: END
// every 0 0$1 trigger usAlert do var i , b , arm ;
2205: LD_EXP 9
2209: IFFALSE 2556
2211: GO 2213
2213: DISABLE
2214: LD_INT 0
2216: PPUSH
2217: PPUSH
2218: PPUSH
// begin usActiveDefend := true ;
2219: LD_ADDR_EXP 10
2223: PUSH
2224: LD_INT 1
2226: ST_TO_ADDR
// if not usForces then
2227: LD_EXP 19
2231: NOT
2232: IFFALSE 2236
// exit ;
2234: GO 2556
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
2236: LD_ADDR_VAR 0 3
2240: PUSH
2241: LD_INT 22
2243: PUSH
2244: LD_INT 1
2246: PUSH
2247: EMPTY
2248: LIST
2249: LIST
2250: PUSH
2251: LD_INT 30
2253: PUSH
2254: LD_INT 4
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: PUSH
2261: EMPTY
2262: LIST
2263: LIST
2264: PPUSH
2265: CALL_OW 69
2269: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
2270: LD_ADDR_VAR 0 2
2274: PUSH
2275: LD_INT 22
2277: PUSH
2278: LD_INT 1
2280: PUSH
2281: EMPTY
2282: LIST
2283: LIST
2284: PUSH
2285: LD_INT 30
2287: PUSH
2288: LD_INT 31
2290: PUSH
2291: EMPTY
2292: LIST
2293: LIST
2294: PUSH
2295: EMPTY
2296: LIST
2297: LIST
2298: PPUSH
2299: CALL_OW 69
2303: ST_TO_ADDR
// ComExitBuilding ( Lynch ) ;
2304: LD_EXP 18
2308: PPUSH
2309: CALL_OW 122
// AddComEnterUnit ( Lynch , arm [ 1 ] ) ;
2313: LD_EXP 18
2317: PPUSH
2318: LD_VAR 0 3
2322: PUSH
2323: LD_INT 1
2325: ARRAY
2326: PPUSH
2327: CALL_OW 180
// if IsOk ( Gladstone ) then
2331: LD_EXP 17
2335: PPUSH
2336: CALL_OW 302
2340: IFFALSE 2381
// begin ComExitBuilding ( Gladstone ) ;
2342: LD_EXP 17
2346: PPUSH
2347: CALL_OW 122
// AddComEnterUnit ( Gladstone , arm [ 1 ] ) ;
2351: LD_EXP 17
2355: PPUSH
2356: LD_VAR 0 3
2360: PUSH
2361: LD_INT 1
2363: ARRAY
2364: PPUSH
2365: CALL_OW 180
// AddComChangeProfession ( Gladstone , class_soldier ) ;
2369: LD_EXP 17
2373: PPUSH
2374: LD_INT 1
2376: PPUSH
2377: CALL_OW 183
// end ; ComExitBuilding ( usForces [ 1 ] ) ;
2381: LD_EXP 19
2385: PUSH
2386: LD_INT 1
2388: ARRAY
2389: PPUSH
2390: CALL_OW 122
// AddComEnterUnit ( usForces [ 1 ] , b [ 1 ] ) ;
2394: LD_EXP 19
2398: PUSH
2399: LD_INT 1
2401: ARRAY
2402: PPUSH
2403: LD_VAR 0 2
2407: PUSH
2408: LD_INT 1
2410: ARRAY
2411: PPUSH
2412: CALL_OW 180
// ComExitBuilding ( usForces [ 2 ] ) ;
2416: LD_EXP 19
2420: PUSH
2421: LD_INT 2
2423: ARRAY
2424: PPUSH
2425: CALL_OW 122
// AddComEnterUnit ( usForces [ 2 ] , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
2429: LD_EXP 19
2433: PUSH
2434: LD_INT 2
2436: ARRAY
2437: PPUSH
2438: LD_INT 22
2440: PUSH
2441: LD_INT 1
2443: PUSH
2444: EMPTY
2445: LIST
2446: LIST
2447: PUSH
2448: LD_INT 30
2450: PUSH
2451: LD_INT 32
2453: PUSH
2454: EMPTY
2455: LIST
2456: LIST
2457: PUSH
2458: EMPTY
2459: LIST
2460: LIST
2461: PPUSH
2462: CALL_OW 69
2466: PUSH
2467: LD_INT 1
2469: ARRAY
2470: PPUSH
2471: CALL_OW 180
// if b > 1 and usForces > 2 then
2475: LD_VAR 0 2
2479: PUSH
2480: LD_INT 1
2482: GREATER
2483: PUSH
2484: LD_EXP 19
2488: PUSH
2489: LD_INT 2
2491: GREATER
2492: AND
2493: IFFALSE 2556
// begin repeat wait ( 0 0$1 ) ;
2495: LD_INT 35
2497: PPUSH
2498: CALL_OW 67
// until BuildingStatus ( b [ 2 ] ) <> bs_build ;
2502: LD_VAR 0 2
2506: PUSH
2507: LD_INT 2
2509: ARRAY
2510: PPUSH
2511: CALL_OW 461
2515: PUSH
2516: LD_INT 1
2518: NONEQUAL
2519: IFFALSE 2495
// ComExitBuilding ( usForces [ 3 ] ) ;
2521: LD_EXP 19
2525: PUSH
2526: LD_INT 3
2528: ARRAY
2529: PPUSH
2530: CALL_OW 122
// AddComEnterUnit ( usForces [ 3 ] , b [ 2 ] ) ;
2534: LD_EXP 19
2538: PUSH
2539: LD_INT 3
2541: ARRAY
2542: PPUSH
2543: LD_VAR 0 2
2547: PUSH
2548: LD_INT 2
2550: ARRAY
2551: PPUSH
2552: CALL_OW 180
// end ; end ;
2556: PPOPN 3
2558: END
// every 0 0$1 trigger GetLives ( usLab ) < 999 and usAlert and usForces do var i ;
2559: LD_INT 3
2561: PPUSH
2562: CALL_OW 256
2566: PUSH
2567: LD_INT 999
2569: LESS
2570: PUSH
2571: LD_EXP 9
2575: AND
2576: PUSH
2577: LD_EXP 19
2581: AND
2582: IFFALSE 2753
2584: GO 2586
2586: DISABLE
2587: LD_INT 0
2589: PPUSH
// begin for i in usForces do
2590: LD_ADDR_VAR 0 1
2594: PUSH
2595: LD_EXP 19
2599: PUSH
2600: FOR_IN
2601: IFFALSE 2640
// begin if IsInUnit ( i ) then
2603: LD_VAR 0 1
2607: PPUSH
2608: CALL_OW 310
2612: IFFALSE 2623
// ComExitBuilding ( i ) ;
2614: LD_VAR 0 1
2618: PPUSH
2619: CALL_OW 122
// AddComAgressiveMove ( i , 31 , 8 ) ;
2623: LD_VAR 0 1
2627: PPUSH
2628: LD_INT 31
2630: PPUSH
2631: LD_INT 8
2633: PPUSH
2634: CALL_OW 174
// end ;
2638: GO 2600
2640: POP
2641: POP
// wait ( 0 0$8 ) ;
2642: LD_INT 280
2644: PPUSH
2645: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) then
2649: LD_INT 22
2651: PUSH
2652: LD_INT 2
2654: PUSH
2655: EMPTY
2656: LIST
2657: LIST
2658: PUSH
2659: LD_INT 91
2661: PUSH
2662: LD_INT 3
2664: PUSH
2665: LD_INT 14
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: LIST
2672: PUSH
2673: EMPTY
2674: LIST
2675: LIST
2676: PPUSH
2677: CALL_OW 69
2681: IFFALSE 2731
// ComAttackUnit ( usForces , FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) [ 1 ] ) else
2683: LD_EXP 19
2687: PPUSH
2688: LD_INT 22
2690: PUSH
2691: LD_INT 2
2693: PUSH
2694: EMPTY
2695: LIST
2696: LIST
2697: PUSH
2698: LD_INT 91
2700: PUSH
2701: LD_INT 3
2703: PUSH
2704: LD_INT 14
2706: PUSH
2707: EMPTY
2708: LIST
2709: LIST
2710: LIST
2711: PUSH
2712: EMPTY
2713: LIST
2714: LIST
2715: PPUSH
2716: CALL_OW 69
2720: PUSH
2721: LD_INT 1
2723: ARRAY
2724: PPUSH
2725: CALL_OW 115
2729: GO 2753
// begin wait ( 0 0$20 ) ;
2731: LD_INT 700
2733: PPUSH
2734: CALL_OW 67
// AddComMoveXY ( usForces , 39 , 19 ) ;
2738: LD_EXP 19
2742: PPUSH
2743: LD_INT 39
2745: PPUSH
2746: LD_INT 19
2748: PPUSH
2749: CALL_OW 171
// end ; end ;
2753: PPOPN 1
2755: END
// every 0 0$3 trigger ( GetDistUnits ( Heike , Delta ) < 10 or GetLives ( usLab ) < 999 ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do var tmp , veh ;
2756: LD_EXP 21
2760: PPUSH
2761: LD_INT 1
2763: PPUSH
2764: CALL_OW 296
2768: PUSH
2769: LD_INT 10
2771: LESS
2772: PUSH
2773: LD_INT 3
2775: PPUSH
2776: CALL_OW 256
2780: PUSH
2781: LD_INT 999
2783: LESS
2784: OR
2785: PUSH
2786: LD_INT 22
2788: PUSH
2789: LD_INT 1
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PUSH
2796: LD_INT 25
2798: PUSH
2799: LD_INT 2
2801: PUSH
2802: EMPTY
2803: LIST
2804: LIST
2805: PUSH
2806: EMPTY
2807: LIST
2808: LIST
2809: PPUSH
2810: CALL_OW 69
2814: AND
2815: IFFALSE 2999
2817: GO 2819
2819: DISABLE
2820: LD_INT 0
2822: PPUSH
2823: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
2824: LD_ADDR_VAR 0 1
2828: PUSH
2829: LD_INT 22
2831: PUSH
2832: LD_INT 1
2834: PUSH
2835: EMPTY
2836: LIST
2837: LIST
2838: PUSH
2839: LD_INT 25
2841: PUSH
2842: LD_INT 2
2844: PUSH
2845: EMPTY
2846: LIST
2847: LIST
2848: PUSH
2849: EMPTY
2850: LIST
2851: LIST
2852: PPUSH
2853: CALL_OW 69
2857: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2858: LD_ADDR_VAR 0 2
2862: PUSH
2863: LD_INT 22
2865: PUSH
2866: LD_INT 1
2868: PUSH
2869: EMPTY
2870: LIST
2871: LIST
2872: PUSH
2873: LD_INT 21
2875: PUSH
2876: LD_INT 2
2878: PUSH
2879: EMPTY
2880: LIST
2881: LIST
2882: PUSH
2883: LD_INT 58
2885: PUSH
2886: EMPTY
2887: LIST
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: LIST
2893: PPUSH
2894: CALL_OW 69
2898: ST_TO_ADDR
// if not tmp then
2899: LD_VAR 0 1
2903: NOT
2904: IFFALSE 2908
// exit ;
2906: GO 2999
// ComExitBuilding ( tmp ) ;
2908: LD_VAR 0 1
2912: PPUSH
2913: CALL_OW 122
// AddComDismantle ( tmp , usLab ) ;
2917: LD_VAR 0 1
2921: PPUSH
2922: LD_INT 3
2924: PPUSH
2925: CALL_OW 227
// if veh and IsOk ( Gladstone ) then
2929: LD_VAR 0 2
2933: PUSH
2934: LD_EXP 17
2938: PPUSH
2939: CALL_OW 302
2943: AND
2944: IFFALSE 2999
// begin if IsInUnit ( Gladstone ) then
2946: LD_EXP 17
2950: PPUSH
2951: CALL_OW 310
2955: IFFALSE 2966
// ComExitBuilding ( Gladstone ) ;
2957: LD_EXP 17
2961: PPUSH
2962: CALL_OW 122
// AddComEnterUnit ( Gladstone , veh [ 1 ] ) ;
2966: LD_EXP 17
2970: PPUSH
2971: LD_VAR 0 2
2975: PUSH
2976: LD_INT 1
2978: ARRAY
2979: PPUSH
2980: CALL_OW 180
// AddComAgressiveMove ( Gladstone , 39 , 14 ) ;
2984: LD_EXP 17
2988: PPUSH
2989: LD_INT 39
2991: PPUSH
2992: LD_INT 14
2994: PPUSH
2995: CALL_OW 174
// end ; end ;
2999: PPOPN 2
3001: END
// every 0 0$1 trigger usAlert and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) diff ( usForces union usSci ) do var i , tmp ;
3002: LD_EXP 9
3006: PUSH
3007: LD_INT 22
3009: PUSH
3010: LD_INT 1
3012: PUSH
3013: EMPTY
3014: LIST
3015: LIST
3016: PUSH
3017: LD_INT 21
3019: PUSH
3020: LD_INT 1
3022: PUSH
3023: EMPTY
3024: LIST
3025: LIST
3026: PUSH
3027: LD_INT 3
3029: PUSH
3030: LD_INT 24
3032: PUSH
3033: LD_INT 600
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: PUSH
3040: EMPTY
3041: LIST
3042: LIST
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: LIST
3048: PPUSH
3049: CALL_OW 69
3053: PUSH
3054: LD_EXP 19
3058: PUSH
3059: LD_EXP 20
3063: UNION
3064: DIFF
3065: AND
3066: IFFALSE 3203
3068: GO 3070
3070: DISABLE
3071: LD_INT 0
3073: PPUSH
3074: PPUSH
// begin enable ;
3075: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) diff ( usForces union usSci ) ;
3076: LD_ADDR_VAR 0 2
3080: PUSH
3081: LD_INT 22
3083: PUSH
3084: LD_INT 1
3086: PUSH
3087: EMPTY
3088: LIST
3089: LIST
3090: PUSH
3091: LD_INT 21
3093: PUSH
3094: LD_INT 1
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: PUSH
3101: LD_INT 3
3103: PUSH
3104: LD_INT 24
3106: PUSH
3107: LD_INT 600
3109: PUSH
3110: EMPTY
3111: LIST
3112: LIST
3113: PUSH
3114: EMPTY
3115: LIST
3116: LIST
3117: PUSH
3118: EMPTY
3119: LIST
3120: LIST
3121: LIST
3122: PPUSH
3123: CALL_OW 69
3127: PUSH
3128: LD_EXP 19
3132: PUSH
3133: LD_EXP 20
3137: UNION
3138: DIFF
3139: ST_TO_ADDR
// if not tmp then
3140: LD_VAR 0 2
3144: NOT
3145: IFFALSE 3149
// exit ;
3147: GO 3203
// for i in tmp do
3149: LD_ADDR_VAR 0 1
3153: PUSH
3154: LD_VAR 0 2
3158: PUSH
3159: FOR_IN
3160: IFFALSE 3201
// if IsInUnit ( i ) then
3162: LD_VAR 0 1
3166: PPUSH
3167: CALL_OW 310
3171: IFFALSE 3184
// ComExitBuilding ( i ) else
3173: LD_VAR 0 1
3177: PPUSH
3178: CALL_OW 122
3182: GO 3199
// ComMoveXY ( i , 48 , 74 ) ;
3184: LD_VAR 0 1
3188: PPUSH
3189: LD_INT 48
3191: PPUSH
3192: LD_INT 74
3194: PPUSH
3195: CALL_OW 111
3199: GO 3159
3201: POP
3202: POP
// end ;
3203: PPOPN 2
3205: END
// every 5 5$00 do var i , un , tmp ;
3206: GO 3208
3208: DISABLE
3209: LD_INT 0
3211: PPUSH
3212: PPUSH
3213: PPUSH
// begin tmp := [ ] ;
3214: LD_ADDR_VAR 0 3
3218: PUSH
3219: EMPTY
3220: ST_TO_ADDR
// uc_side := 1 ;
3221: LD_ADDR_OWVAR 20
3225: PUSH
3226: LD_INT 1
3228: ST_TO_ADDR
// uc_nation := 1 ;
3229: LD_ADDR_OWVAR 21
3233: PUSH
3234: LD_INT 1
3236: ST_TO_ADDR
// case Difficulty of 1 :
3237: LD_OWVAR 67
3241: PUSH
3242: LD_INT 1
3244: DOUBLE
3245: EQUAL
3246: IFTRUE 3250
3248: GO 3353
3250: POP
// begin wait ( 1 1$00 ) ;
3251: LD_INT 2100
3253: PPUSH
3254: CALL_OW 67
// for i := 1 to 2 do
3258: LD_ADDR_VAR 0 1
3262: PUSH
3263: DOUBLE
3264: LD_INT 1
3266: DEC
3267: ST_TO_ADDR
3268: LD_INT 2
3270: PUSH
3271: FOR_TO
3272: IFFALSE 3349
// begin PrepareHuman ( false , [ 1 , 4 ] [ i mod 2 + 1 ] , 1 ) ;
3274: LD_INT 0
3276: PPUSH
3277: LD_INT 1
3279: PUSH
3280: LD_INT 4
3282: PUSH
3283: EMPTY
3284: LIST
3285: LIST
3286: PUSH
3287: LD_VAR 0 1
3291: PUSH
3292: LD_INT 2
3294: MOD
3295: PUSH
3296: LD_INT 1
3298: PLUS
3299: ARRAY
3300: PPUSH
3301: LD_INT 1
3303: PPUSH
3304: CALL_OW 380
// un := CreateHuman ;
3308: LD_ADDR_VAR 0 2
3312: PUSH
3313: CALL_OW 44
3317: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3318: LD_ADDR_VAR 0 3
3322: PUSH
3323: LD_VAR 0 3
3327: PPUSH
3328: LD_VAR 0 3
3332: PUSH
3333: LD_INT 1
3335: PLUS
3336: PPUSH
3337: LD_VAR 0 2
3341: PPUSH
3342: CALL_OW 1
3346: ST_TO_ADDR
// end ;
3347: GO 3271
3349: POP
3350: POP
// end ; 2 :
3351: GO 3747
3353: LD_INT 2
3355: DOUBLE
3356: EQUAL
3357: IFTRUE 3361
3359: GO 3495
3361: POP
// begin wait ( 0 0$30 ) ;
3362: LD_INT 1050
3364: PPUSH
3365: CALL_OW 67
// for i := 1 to 2 do
3369: LD_ADDR_VAR 0 1
3373: PUSH
3374: DOUBLE
3375: LD_INT 1
3377: DEC
3378: ST_TO_ADDR
3379: LD_INT 2
3381: PUSH
3382: FOR_TO
3383: IFFALSE 3439
// begin PrepareHuman ( false , 1 , 2 ) ;
3385: LD_INT 0
3387: PPUSH
3388: LD_INT 1
3390: PPUSH
3391: LD_INT 2
3393: PPUSH
3394: CALL_OW 380
// un := CreateHuman ;
3398: LD_ADDR_VAR 0 2
3402: PUSH
3403: CALL_OW 44
3407: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3408: LD_ADDR_VAR 0 3
3412: PUSH
3413: LD_VAR 0 3
3417: PPUSH
3418: LD_VAR 0 3
3422: PUSH
3423: LD_INT 1
3425: PLUS
3426: PPUSH
3427: LD_VAR 0 2
3431: PPUSH
3432: CALL_OW 1
3436: ST_TO_ADDR
// end ;
3437: GO 3382
3439: POP
3440: POP
// PrepareHuman ( false , 4 , 2 ) ;
3441: LD_INT 0
3443: PPUSH
3444: LD_INT 4
3446: PPUSH
3447: LD_INT 2
3449: PPUSH
3450: CALL_OW 380
// un := CreateHuman ;
3454: LD_ADDR_VAR 0 2
3458: PUSH
3459: CALL_OW 44
3463: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3464: LD_ADDR_VAR 0 3
3468: PUSH
3469: LD_VAR 0 3
3473: PPUSH
3474: LD_VAR 0 3
3478: PUSH
3479: LD_INT 1
3481: PLUS
3482: PPUSH
3483: LD_VAR 0 2
3487: PPUSH
3488: CALL_OW 1
3492: ST_TO_ADDR
// end ; 3 :
3493: GO 3747
3495: LD_INT 3
3497: DOUBLE
3498: EQUAL
3499: IFTRUE 3503
3501: GO 3746
3503: POP
// begin for i := 1 to 2 do
3504: LD_ADDR_VAR 0 1
3508: PUSH
3509: DOUBLE
3510: LD_INT 1
3512: DEC
3513: ST_TO_ADDR
3514: LD_INT 2
3516: PUSH
3517: FOR_TO
3518: IFFALSE 3574
// begin PrepareHuman ( false , 1 , 2 ) ;
3520: LD_INT 0
3522: PPUSH
3523: LD_INT 1
3525: PPUSH
3526: LD_INT 2
3528: PPUSH
3529: CALL_OW 380
// un := CreateHuman ;
3533: LD_ADDR_VAR 0 2
3537: PUSH
3538: CALL_OW 44
3542: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3543: LD_ADDR_VAR 0 3
3547: PUSH
3548: LD_VAR 0 3
3552: PPUSH
3553: LD_VAR 0 3
3557: PUSH
3558: LD_INT 1
3560: PLUS
3561: PPUSH
3562: LD_VAR 0 2
3566: PPUSH
3567: CALL_OW 1
3571: ST_TO_ADDR
// end ;
3572: GO 3517
3574: POP
3575: POP
// PrepareHuman ( false , 4 , 2 ) ;
3576: LD_INT 0
3578: PPUSH
3579: LD_INT 4
3581: PPUSH
3582: LD_INT 2
3584: PPUSH
3585: CALL_OW 380
// un := CreateHuman ;
3589: LD_ADDR_VAR 0 2
3593: PUSH
3594: CALL_OW 44
3598: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3599: LD_ADDR_VAR 0 3
3603: PUSH
3604: LD_VAR 0 3
3608: PPUSH
3609: LD_VAR 0 3
3613: PUSH
3614: LD_INT 1
3616: PLUS
3617: PPUSH
3618: LD_VAR 0 2
3622: PPUSH
3623: CALL_OW 1
3627: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_machine_gun , 90 ) ;
3628: LD_INT 1
3630: PPUSH
3631: LD_INT 1
3633: PPUSH
3634: LD_INT 2
3636: PPUSH
3637: LD_INT 2
3639: PPUSH
3640: LD_INT 1
3642: PPUSH
3643: LD_INT 2
3645: PPUSH
3646: LD_INT 90
3648: PPUSH
3649: CALL 284 0 7
// un := CreateVehicle ;
3653: LD_ADDR_VAR 0 2
3657: PUSH
3658: CALL_OW 45
3662: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3663: LD_ADDR_VAR 0 3
3667: PUSH
3668: LD_VAR 0 3
3672: PPUSH
3673: LD_VAR 0 3
3677: PUSH
3678: LD_INT 1
3680: PLUS
3681: PPUSH
3682: LD_VAR 0 2
3686: PPUSH
3687: CALL_OW 1
3691: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
3692: LD_INT 0
3694: PPUSH
3695: LD_INT 1
3697: PPUSH
3698: LD_INT 2
3700: PPUSH
3701: CALL_OW 380
// un := CreateHuman ;
3705: LD_ADDR_VAR 0 2
3709: PUSH
3710: CALL_OW 44
3714: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3715: LD_ADDR_VAR 0 3
3719: PUSH
3720: LD_VAR 0 3
3724: PPUSH
3725: LD_VAR 0 3
3729: PUSH
3730: LD_INT 1
3732: PLUS
3733: PPUSH
3734: LD_VAR 0 2
3738: PPUSH
3739: CALL_OW 1
3743: ST_TO_ADDR
// end ; end ;
3744: GO 3747
3746: POP
// for i := 1 to tmp do
3747: LD_ADDR_VAR 0 1
3751: PUSH
3752: DOUBLE
3753: LD_INT 1
3755: DEC
3756: ST_TO_ADDR
3757: LD_VAR 0 3
3761: PUSH
3762: FOR_TO
3763: IFFALSE 3928
// begin SetDir ( tmp [ i ] , 1 ) ;
3765: LD_VAR 0 3
3769: PUSH
3770: LD_VAR 0 1
3774: ARRAY
3775: PPUSH
3776: LD_INT 1
3778: PPUSH
3779: CALL_OW 233
// if GetType ( tmp [ i ] ) = unit_human then
3783: LD_VAR 0 3
3787: PUSH
3788: LD_VAR 0 1
3792: ARRAY
3793: PPUSH
3794: CALL_OW 247
3798: PUSH
3799: LD_INT 1
3801: EQUAL
3802: IFFALSE 3830
// PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) else
3804: LD_VAR 0 3
3808: PUSH
3809: LD_VAR 0 1
3813: ARRAY
3814: PPUSH
3815: LD_INT 28
3817: PPUSH
3818: LD_INT 52
3820: PPUSH
3821: LD_INT 0
3823: PPUSH
3824: CALL_OW 48
3828: GO 3898
// begin PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) ;
3830: LD_VAR 0 3
3834: PUSH
3835: LD_VAR 0 1
3839: ARRAY
3840: PPUSH
3841: LD_INT 28
3843: PPUSH
3844: LD_INT 52
3846: PPUSH
3847: LD_INT 0
3849: PPUSH
3850: CALL_OW 48
// i := i + 1 ;
3854: LD_ADDR_VAR 0 1
3858: PUSH
3859: LD_VAR 0 1
3863: PUSH
3864: LD_INT 1
3866: PLUS
3867: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ i ] , tmp [ i - 1 ] ) ;
3868: LD_VAR 0 3
3872: PUSH
3873: LD_VAR 0 1
3877: ARRAY
3878: PPUSH
3879: LD_VAR 0 3
3883: PUSH
3884: LD_VAR 0 1
3888: PUSH
3889: LD_INT 1
3891: MINUS
3892: ARRAY
3893: PPUSH
3894: CALL_OW 52
// end ; ComMoveXY ( tmp [ i ] , 43 , 56 ) ;
3898: LD_VAR 0 3
3902: PUSH
3903: LD_VAR 0 1
3907: ARRAY
3908: PPUSH
3909: LD_INT 43
3911: PPUSH
3912: LD_INT 56
3914: PPUSH
3915: CALL_OW 111
// wait ( 0 0$2 ) ;
3919: LD_INT 70
3921: PPUSH
3922: CALL_OW 67
// end ;
3926: GO 3762
3928: POP
3929: POP
// wait ( 0 0$2 ) ;
3930: LD_INT 70
3932: PPUSH
3933: CALL_OW 67
// if not FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) then
3937: LD_INT 7
3939: PPUSH
3940: LD_INT 22
3942: PUSH
3943: LD_INT 2
3945: PUSH
3946: EMPTY
3947: LIST
3948: LIST
3949: PPUSH
3950: CALL_OW 70
3954: NOT
3955: IFFALSE 4153
// begin AddComAgressiveMove ( tmp , 35 , 24 ) ;
3957: LD_VAR 0 3
3961: PPUSH
3962: LD_INT 35
3964: PPUSH
3965: LD_INT 24
3967: PPUSH
3968: CALL_OW 174
// usForces := usForces union UnitFilter ( tmp , [ f_class , 1 ] ) ;
3972: LD_ADDR_EXP 19
3976: PUSH
3977: LD_EXP 19
3981: PUSH
3982: LD_VAR 0 3
3986: PPUSH
3987: LD_INT 25
3989: PUSH
3990: LD_INT 1
3992: PUSH
3993: EMPTY
3994: LIST
3995: LIST
3996: PPUSH
3997: CALL_OW 72
4001: UNION
4002: ST_TO_ADDR
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
4003: LD_INT 22
4005: PUSH
4006: LD_INT 1
4008: PUSH
4009: EMPTY
4010: LIST
4011: LIST
4012: PUSH
4013: LD_INT 30
4015: PUSH
4016: LD_INT 4
4018: PUSH
4019: EMPTY
4020: LIST
4021: LIST
4022: PUSH
4023: EMPTY
4024: LIST
4025: LIST
4026: PPUSH
4027: CALL_OW 69
4031: PUSH
4032: LD_INT 1
4034: ARRAY
4035: PPUSH
4036: CALL_OW 313
4040: PUSH
4041: LD_INT 6
4043: LESS
4044: IFFALSE 4103
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 1 ] ) , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
4046: LD_VAR 0 3
4050: PPUSH
4051: LD_INT 25
4053: PUSH
4054: LD_INT 1
4056: PUSH
4057: EMPTY
4058: LIST
4059: LIST
4060: PPUSH
4061: CALL_OW 72
4065: PPUSH
4066: LD_INT 22
4068: PUSH
4069: LD_INT 1
4071: PUSH
4072: EMPTY
4073: LIST
4074: LIST
4075: PUSH
4076: LD_INT 30
4078: PUSH
4079: LD_INT 4
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: PUSH
4086: EMPTY
4087: LIST
4088: LIST
4089: PPUSH
4090: CALL_OW 69
4094: PUSH
4095: LD_INT 1
4097: ARRAY
4098: PPUSH
4099: CALL_OW 180
// if UnitFilter ( tmp , [ f_class , 4 ] ) then
4103: LD_VAR 0 3
4107: PPUSH
4108: LD_INT 25
4110: PUSH
4111: LD_INT 4
4113: PUSH
4114: EMPTY
4115: LIST
4116: LIST
4117: PPUSH
4118: CALL_OW 72
4122: IFFALSE 4151
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 4 ] ) , usLab ) ;
4124: LD_VAR 0 3
4128: PPUSH
4129: LD_INT 25
4131: PUSH
4132: LD_INT 4
4134: PUSH
4135: EMPTY
4136: LIST
4137: LIST
4138: PPUSH
4139: CALL_OW 72
4143: PPUSH
4144: LD_INT 3
4146: PPUSH
4147: CALL_OW 180
// end else
4151: GO 4428
// begin tmp := tmp union FilterUnitsInArea ( retreatArea , [ f_side , 1 ] ) ;
4153: LD_ADDR_VAR 0 3
4157: PUSH
4158: LD_VAR 0 3
4162: PUSH
4163: LD_INT 6
4165: PPUSH
4166: LD_INT 22
4168: PUSH
4169: LD_INT 1
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: PPUSH
4176: CALL_OW 70
4180: UNION
4181: ST_TO_ADDR
// ComMoveXY ( tmp , 45 , 54 ) ;
4182: LD_VAR 0 3
4186: PPUSH
4187: LD_INT 45
4189: PPUSH
4190: LD_INT 54
4192: PPUSH
4193: CALL_OW 111
// wait ( 0 0$3 ) ;
4197: LD_INT 105
4199: PPUSH
4200: CALL_OW 67
// AddComAgressiveMove ( tmp diff UnitFilter ( tmp , [ f_class , 4 ] ) , 35 , 24 ) ;
4204: LD_VAR 0 3
4208: PUSH
4209: LD_VAR 0 3
4213: PPUSH
4214: LD_INT 25
4216: PUSH
4217: LD_INT 4
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: PPUSH
4224: CALL_OW 72
4228: DIFF
4229: PPUSH
4230: LD_INT 35
4232: PPUSH
4233: LD_INT 24
4235: PPUSH
4236: CALL_OW 174
// AddComMoveXY ( UnitFilter ( tmp , [ f_class , 4 ] ) , 42 , 49 ) ;
4240: LD_VAR 0 3
4244: PPUSH
4245: LD_INT 25
4247: PUSH
4248: LD_INT 4
4250: PUSH
4251: EMPTY
4252: LIST
4253: LIST
4254: PPUSH
4255: CALL_OW 72
4259: PPUSH
4260: LD_INT 42
4262: PPUSH
4263: LD_INT 49
4265: PPUSH
4266: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4270: LD_INT 35
4272: PPUSH
4273: CALL_OW 67
// for i in tmp do
4277: LD_ADDR_VAR 0 1
4281: PUSH
4282: LD_VAR 0 3
4286: PUSH
4287: FOR_IN
4288: IFFALSE 4419
// if IsDead ( i ) then
4290: LD_VAR 0 1
4294: PPUSH
4295: CALL_OW 301
4299: IFFALSE 4319
// tmp := tmp diff i else
4301: LD_ADDR_VAR 0 3
4305: PUSH
4306: LD_VAR 0 3
4310: PUSH
4311: LD_VAR 0 1
4315: DIFF
4316: ST_TO_ADDR
4317: GO 4417
// if GetClass ( i ) = 1 then
4319: LD_VAR 0 1
4323: PPUSH
4324: CALL_OW 257
4328: PUSH
4329: LD_INT 1
4331: EQUAL
4332: IFFALSE 4417
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 42 , 49 ) > 6 then
4334: LD_VAR 0 1
4338: PPUSH
4339: CALL_OW 256
4343: PUSH
4344: LD_INT 600
4346: LESS
4347: PUSH
4348: LD_VAR 0 1
4352: PPUSH
4353: LD_INT 42
4355: PPUSH
4356: LD_INT 49
4358: PPUSH
4359: CALL_OW 297
4363: PUSH
4364: LD_INT 6
4366: GREATER
4367: AND
4368: IFFALSE 4387
// ComMoveXY ( i , 42 , 49 ) else
4370: LD_VAR 0 1
4374: PPUSH
4375: LD_INT 42
4377: PPUSH
4378: LD_INT 49
4380: PPUSH
4381: CALL_OW 111
4385: GO 4417
// if GetLives ( i ) = 1000 then
4387: LD_VAR 0 1
4391: PPUSH
4392: CALL_OW 256
4396: PUSH
4397: LD_INT 1000
4399: EQUAL
4400: IFFALSE 4417
// ComAgressiveMove ( i , 36 , 25 ) ;
4402: LD_VAR 0 1
4406: PPUSH
4407: LD_INT 36
4409: PPUSH
4410: LD_INT 25
4412: PPUSH
4413: CALL_OW 114
// end ;
4417: GO 4287
4419: POP
4420: POP
// until not tmp ;
4421: LD_VAR 0 3
4425: NOT
4426: IFFALSE 4270
// end ; end ; end_of_file
4428: PPOPN 3
4430: END
// export function Action ; var i , tmp ; begin
4431: LD_INT 0
4433: PPUSH
4434: PPUSH
4435: PPUSH
// InGameOn ;
4436: CALL_OW 8
// DoNotAttack ( 2 , usLab ) ;
4440: LD_INT 2
4442: PPUSH
4443: LD_INT 3
4445: PPUSH
4446: CALL_OW 471
// ComMoveXY ( Heike , 78 , 61 ) ;
4450: LD_EXP 21
4454: PPUSH
4455: LD_INT 78
4457: PPUSH
4458: LD_INT 61
4460: PPUSH
4461: CALL_OW 111
// if Mike then
4465: LD_EXP 23
4469: IFFALSE 4486
// ComMoveXY ( Mike , 80 , 66 ) ;
4471: LD_EXP 23
4475: PPUSH
4476: LD_INT 80
4478: PPUSH
4479: LD_INT 66
4481: PPUSH
4482: CALL_OW 111
// if Givi then
4486: LD_EXP 22
4490: IFFALSE 4507
// ComMoveXY ( Givi , 82 , 66 ) ;
4492: LD_EXP 22
4496: PPUSH
4497: LD_INT 82
4499: PPUSH
4500: LD_INT 66
4502: PPUSH
4503: CALL_OW 111
// if Kamil then
4507: LD_EXP 24
4511: IFFALSE 4528
// ComMoveXY ( Kamil , 82 , 67 ) ;
4513: LD_EXP 24
4517: PPUSH
4518: LD_INT 82
4520: PPUSH
4521: LD_INT 67
4523: PPUSH
4524: CALL_OW 111
// CenterNowOnUnits ( Heike ) ;
4528: LD_EXP 21
4532: PPUSH
4533: CALL_OW 87
// wait ( 0 0$2 ) ;
4537: LD_INT 70
4539: PPUSH
4540: CALL_OW 67
// if Givi and Mike then
4544: LD_EXP 22
4548: PUSH
4549: LD_EXP 23
4553: AND
4554: IFFALSE 5000
// begin AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
4556: LD_EXP 22
4560: PUSH
4561: LD_EXP 23
4565: PUSH
4566: LD_EXP 24
4570: PUSH
4571: EMPTY
4572: LIST
4573: LIST
4574: LIST
4575: PPUSH
4576: LD_EXP 21
4580: PPUSH
4581: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
4585: LD_EXP 21
4589: PPUSH
4590: LD_EXP 22
4594: PPUSH
4595: CALL_OW 179
// Say ( Givi , DG-1-start ) ;
4599: LD_EXP 22
4603: PPUSH
4604: LD_STRING DG-1-start
4606: PPUSH
4607: CALL_OW 88
// Say ( Heike , DH-1-start ) ;
4611: LD_EXP 21
4615: PPUSH
4616: LD_STRING DH-1-start
4618: PPUSH
4619: CALL_OW 88
// AddComTurnUnit ( Mike , Heike ) ;
4623: LD_EXP 23
4627: PPUSH
4628: LD_EXP 21
4632: PPUSH
4633: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
4637: LD_EXP 21
4641: PPUSH
4642: LD_EXP 23
4646: PPUSH
4647: CALL_OW 179
// Say ( Mike , DM-1-start ) ;
4651: LD_EXP 23
4655: PPUSH
4656: LD_STRING DM-1-start
4658: PPUSH
4659: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
4663: LD_EXP 21
4667: PPUSH
4668: LD_STRING DH-2-start
4670: PPUSH
4671: CALL_OW 88
// Say ( Mike , DM-2-start ) ;
4675: LD_EXP 23
4679: PPUSH
4680: LD_STRING DM-2-start
4682: PPUSH
4683: CALL_OW 88
// Say ( Givi , DG-2-start ) ;
4687: LD_EXP 22
4691: PPUSH
4692: LD_STRING DG-2-start
4694: PPUSH
4695: CALL_OW 88
// ComTurnUnit ( Mike , Givi ) ;
4699: LD_EXP 23
4703: PPUSH
4704: LD_EXP 22
4708: PPUSH
4709: CALL_OW 119
// ComTurnUnit ( Heike , Mike ) ;
4713: LD_EXP 21
4717: PPUSH
4718: LD_EXP 23
4722: PPUSH
4723: CALL_OW 119
// Say ( Mike , DM-3-start ) ;
4727: LD_EXP 23
4731: PPUSH
4732: LD_STRING DM-3-start
4734: PPUSH
4735: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
4739: LD_EXP 21
4743: PPUSH
4744: LD_STRING DH-3-start
4746: PPUSH
4747: CALL_OW 88
// ComMoveXY ( [ Heike , Mike , Givi , Kamil ] , 84 , 51 ) ;
4751: LD_EXP 21
4755: PUSH
4756: LD_EXP 23
4760: PUSH
4761: LD_EXP 22
4765: PUSH
4766: LD_EXP 24
4770: PUSH
4771: EMPTY
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: PPUSH
4777: LD_INT 84
4779: PPUSH
4780: LD_INT 51
4782: PPUSH
4783: CALL_OW 111
// wait ( 0 0$2 ) ;
4787: LD_INT 70
4789: PPUSH
4790: CALL_OW 67
// Say ( Givi , DG-3-start ) ;
4794: LD_EXP 22
4798: PPUSH
4799: LD_STRING DG-3-start
4801: PPUSH
4802: CALL_OW 88
// ComHold ( [ Heike , Mike , Givi , Kamil ] ) ;
4806: LD_EXP 21
4810: PUSH
4811: LD_EXP 23
4815: PUSH
4816: LD_EXP 22
4820: PUSH
4821: LD_EXP 24
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: PPUSH
4832: CALL_OW 140
// AddComTurnUnit ( Heike , Givi ) ;
4836: LD_EXP 21
4840: PPUSH
4841: LD_EXP 22
4845: PPUSH
4846: CALL_OW 179
// AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
4850: LD_EXP 22
4854: PUSH
4855: LD_EXP 23
4859: PUSH
4860: LD_EXP 24
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: LIST
4869: PPUSH
4870: LD_EXP 21
4874: PPUSH
4875: CALL_OW 179
// Say ( Heike , DH-4-start ) ;
4879: LD_EXP 21
4883: PPUSH
4884: LD_STRING DH-4-start
4886: PPUSH
4887: CALL_OW 88
// Say ( Givi , DG-4-start ) ;
4891: LD_EXP 22
4895: PPUSH
4896: LD_STRING DG-4-start
4898: PPUSH
4899: CALL_OW 88
// Say ( Heike , DH-5-start ) ;
4903: LD_EXP 21
4907: PPUSH
4908: LD_STRING DH-5-start
4910: PPUSH
4911: CALL_OW 88
// Say ( Givi , DG-5-start ) ;
4915: LD_EXP 22
4919: PPUSH
4920: LD_STRING DG-5-start
4922: PPUSH
4923: CALL_OW 88
// Say ( Heike , DH-6-start ) ;
4927: LD_EXP 21
4931: PPUSH
4932: LD_STRING DH-6-start
4934: PPUSH
4935: CALL_OW 88
// Say ( Mike , DM-6-start ) ;
4939: LD_EXP 23
4943: PPUSH
4944: LD_STRING DM-6-start
4946: PPUSH
4947: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi ] , Mike ) ;
4951: LD_EXP 21
4955: PUSH
4956: LD_EXP 22
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: PPUSH
4965: LD_EXP 23
4969: PPUSH
4970: CALL_OW 119
// Say ( Givi , DG-6-start ) ;
4974: LD_EXP 22
4978: PPUSH
4979: LD_STRING DG-6-start
4981: PPUSH
4982: CALL_OW 88
// Say ( Heike , DH-7-start ) ;
4986: LD_EXP 21
4990: PPUSH
4991: LD_STRING DH-7-start
4993: PPUSH
4994: CALL_OW 88
// end else
4998: GO 5722
// if not Mike and Givi then
5000: LD_EXP 23
5004: NOT
5005: PUSH
5006: LD_EXP 22
5010: AND
5011: IFFALSE 5356
// begin AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5013: LD_EXP 22
5017: PUSH
5018: LD_EXP 24
5022: PUSH
5023: EMPTY
5024: LIST
5025: LIST
5026: PPUSH
5027: LD_EXP 21
5031: PPUSH
5032: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
5036: LD_EXP 21
5040: PPUSH
5041: LD_EXP 22
5045: PPUSH
5046: CALL_OW 179
// Say ( Givi , DG-1-start-c ) ;
5050: LD_EXP 22
5054: PPUSH
5055: LD_STRING DG-1-start-c
5057: PPUSH
5058: CALL_OW 88
// Say ( Heike , DH-1-start-c ) ;
5062: LD_EXP 21
5066: PPUSH
5067: LD_STRING DH-1-start-c
5069: PPUSH
5070: CALL_OW 88
// Say ( Givi , DG-2-start-c ) ;
5074: LD_EXP 22
5078: PPUSH
5079: LD_STRING DG-2-start-c
5081: PPUSH
5082: CALL_OW 88
// Say ( Heike , DH-2-start-c ) ;
5086: LD_EXP 21
5090: PPUSH
5091: LD_STRING DH-2-start-c
5093: PPUSH
5094: CALL_OW 88
// Say ( Givi , DG-3-start-c ) ;
5098: LD_EXP 22
5102: PPUSH
5103: LD_STRING DG-3-start-c
5105: PPUSH
5106: CALL_OW 88
// ComMoveXY ( Heike , 83 , 56 ) ;
5110: LD_EXP 21
5114: PPUSH
5115: LD_INT 83
5117: PPUSH
5118: LD_INT 56
5120: PPUSH
5121: CALL_OW 111
// ComMoveXY ( Givi , 83 , 59 ) ;
5125: LD_EXP 22
5129: PPUSH
5130: LD_INT 83
5132: PPUSH
5133: LD_INT 59
5135: PPUSH
5136: CALL_OW 111
// if Kamil then
5140: LD_EXP 24
5144: IFFALSE 5161
// ComMoveXY ( Kamil , 80 , 58 ) ;
5146: LD_EXP 24
5150: PPUSH
5151: LD_INT 80
5153: PPUSH
5154: LD_INT 58
5156: PPUSH
5157: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5161: LD_EXP 21
5165: PPUSH
5166: LD_EXP 22
5170: PPUSH
5171: CALL_OW 179
// AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5175: LD_EXP 22
5179: PUSH
5180: LD_EXP 24
5184: PUSH
5185: EMPTY
5186: LIST
5187: LIST
5188: PPUSH
5189: LD_EXP 21
5193: PPUSH
5194: CALL_OW 179
// Say ( Heike , DH-3-start-c ) ;
5198: LD_EXP 21
5202: PPUSH
5203: LD_STRING DH-3-start-c
5205: PPUSH
5206: CALL_OW 88
// Say ( Givi , DG-4-start-c ) ;
5210: LD_EXP 22
5214: PPUSH
5215: LD_STRING DG-4-start-c
5217: PPUSH
5218: CALL_OW 88
// Say ( Heike , DH-5-start-c ) ;
5222: LD_EXP 21
5226: PPUSH
5227: LD_STRING DH-5-start-c
5229: PPUSH
5230: CALL_OW 88
// Say ( Givi , DG-5-start-c ) ;
5234: LD_EXP 22
5238: PPUSH
5239: LD_STRING DG-5-start-c
5241: PPUSH
5242: CALL_OW 88
// Say ( Heike , DH-6-start-c ) ;
5246: LD_EXP 21
5250: PPUSH
5251: LD_STRING DH-6-start-c
5253: PPUSH
5254: CALL_OW 88
// Say ( Givi , DG-6-start-c ) ;
5258: LD_EXP 22
5262: PPUSH
5263: LD_STRING DG-6-start-c
5265: PPUSH
5266: CALL_OW 88
// if Kamil then
5270: LD_EXP 24
5274: IFFALSE 5330
// begin ComTurnUnit ( Kamil , Heike ) ;
5276: LD_EXP 24
5280: PPUSH
5281: LD_EXP 21
5285: PPUSH
5286: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5290: LD_EXP 24
5294: PPUSH
5295: LD_STRING DKam-1-start-c
5297: PPUSH
5298: CALL_OW 88
// ComTurnUnit ( Givi , Kamil ) ;
5302: LD_EXP 22
5306: PPUSH
5307: LD_EXP 24
5311: PPUSH
5312: CALL_OW 119
// Say ( Givi , DG-7-start-c ) ;
5316: LD_EXP 22
5320: PPUSH
5321: LD_STRING DG-7-start-c
5323: PPUSH
5324: CALL_OW 88
// end else
5328: GO 5354
// begin Say ( Givi , DG-8-start-c ) ;
5330: LD_EXP 22
5334: PPUSH
5335: LD_STRING DG-8-start-c
5337: PPUSH
5338: CALL_OW 88
// Say ( Heike , DH-7-start-c ) ;
5342: LD_EXP 21
5346: PPUSH
5347: LD_STRING DH-7-start-c
5349: PPUSH
5350: CALL_OW 88
// end ; end else
5354: GO 5722
// if not Givi and Mike then
5356: LD_EXP 22
5360: NOT
5361: PUSH
5362: LD_EXP 23
5366: AND
5367: IFFALSE 5626
// begin AddComTurnUnit ( [ Mike , Kamil ] , Heike ) ;
5369: LD_EXP 23
5373: PUSH
5374: LD_EXP 24
5378: PUSH
5379: EMPTY
5380: LIST
5381: LIST
5382: PPUSH
5383: LD_EXP 21
5387: PPUSH
5388: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
5392: LD_EXP 21
5396: PPUSH
5397: LD_EXP 23
5401: PPUSH
5402: CALL_OW 179
// Say ( Mike , DM-1-start-b ) ;
5406: LD_EXP 23
5410: PPUSH
5411: LD_STRING DM-1-start-b
5413: PPUSH
5414: CALL_OW 88
// Say ( Heike , DH-1-start-b ) ;
5418: LD_EXP 21
5422: PPUSH
5423: LD_STRING DH-1-start-b
5425: PPUSH
5426: CALL_OW 88
// Say ( Mike , DM-2-start-b ) ;
5430: LD_EXP 23
5434: PPUSH
5435: LD_STRING DM-2-start-b
5437: PPUSH
5438: CALL_OW 88
// Say ( Heike , DH-2-start-b ) ;
5442: LD_EXP 21
5446: PPUSH
5447: LD_STRING DH-2-start-b
5449: PPUSH
5450: CALL_OW 88
// Say ( Mike , DM-3-start-b ) ;
5454: LD_EXP 23
5458: PPUSH
5459: LD_STRING DM-3-start-b
5461: PPUSH
5462: CALL_OW 88
// if Kamil then
5466: LD_EXP 24
5470: IFFALSE 5487
// ComMoveXY ( Kamil , 80 , 58 ) ;
5472: LD_EXP 24
5476: PPUSH
5477: LD_INT 80
5479: PPUSH
5480: LD_INT 58
5482: PPUSH
5483: CALL_OW 111
// ComMoveXY ( Heike , 83 , 56 ) ;
5487: LD_EXP 21
5491: PPUSH
5492: LD_INT 83
5494: PPUSH
5495: LD_INT 56
5497: PPUSH
5498: CALL_OW 111
// ComMoveXY ( Mike , 83 , 59 ) ;
5502: LD_EXP 23
5506: PPUSH
5507: LD_INT 83
5509: PPUSH
5510: LD_INT 59
5512: PPUSH
5513: CALL_OW 111
// AddComTurnUnit ( Heike , Mike ) ;
5517: LD_EXP 21
5521: PPUSH
5522: LD_EXP 23
5526: PPUSH
5527: CALL_OW 179
// AddComTurnUnit ( [ Kamil , Mike ] , Heike ) ;
5531: LD_EXP 24
5535: PUSH
5536: LD_EXP 23
5540: PUSH
5541: EMPTY
5542: LIST
5543: LIST
5544: PPUSH
5545: LD_EXP 21
5549: PPUSH
5550: CALL_OW 179
// Say ( Heike , DH-3-start-b ) ;
5554: LD_EXP 21
5558: PPUSH
5559: LD_STRING DH-3-start-b
5561: PPUSH
5562: CALL_OW 88
// Say ( Mike , DM-4-start-b ) ;
5566: LD_EXP 23
5570: PPUSH
5571: LD_STRING DM-4-start-b
5573: PPUSH
5574: CALL_OW 88
// if Kamil then
5578: LD_EXP 24
5582: IFFALSE 5612
// begin ComTurnUnit ( Kamil , Heike ) ;
5584: LD_EXP 24
5588: PPUSH
5589: LD_EXP 21
5593: PPUSH
5594: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5598: LD_EXP 24
5602: PPUSH
5603: LD_STRING DKam-1-start-c
5605: PPUSH
5606: CALL_OW 88
// end else
5610: GO 5624
// begin Say ( Mike , DM-5-start-b ) ;
5612: LD_EXP 23
5616: PPUSH
5617: LD_STRING DM-5-start-b
5619: PPUSH
5620: CALL_OW 88
// end ; end else
5624: GO 5722
// if Kamil then
5626: LD_EXP 24
5630: IFFALSE 5710
// begin AddComTurnUnit ( Heike , Kamil ) ;
5632: LD_EXP 21
5636: PPUSH
5637: LD_EXP 24
5641: PPUSH
5642: CALL_OW 179
// AddComTurnUnit ( Kamil , Heike ) ;
5646: LD_EXP 24
5650: PPUSH
5651: LD_EXP 21
5655: PPUSH
5656: CALL_OW 179
// Say ( Heike , DH-1-start-f ) ;
5660: LD_EXP 21
5664: PPUSH
5665: LD_STRING DH-1-start-f
5667: PPUSH
5668: CALL_OW 88
// Say ( Kamil , DKam-1-start-f ) ;
5672: LD_EXP 24
5676: PPUSH
5677: LD_STRING DKam-1-start-f
5679: PPUSH
5680: CALL_OW 88
// Say ( Heike , DH-2-start-f ) ;
5684: LD_EXP 21
5688: PPUSH
5689: LD_STRING DH-2-start-f
5691: PPUSH
5692: CALL_OW 88
// Say ( Kamil , DKam-2-start-f ) ;
5696: LD_EXP 24
5700: PPUSH
5701: LD_STRING DKam-2-start-f
5703: PPUSH
5704: CALL_OW 88
// end else
5708: GO 5722
// begin Say ( Heike , DH-1-start-d ) ;
5710: LD_EXP 21
5714: PPUSH
5715: LD_STRING DH-1-start-d
5717: PPUSH
5718: CALL_OW 88
// end ; ComFree ( [ Heike , Givi , Mike , Kamil ] ) ;
5722: LD_EXP 21
5726: PUSH
5727: LD_EXP 22
5731: PUSH
5732: LD_EXP 23
5736: PUSH
5737: LD_EXP 24
5741: PUSH
5742: EMPTY
5743: LIST
5744: LIST
5745: LIST
5746: LIST
5747: PPUSH
5748: CALL_OW 139
// InGameOff ;
5752: CALL_OW 9
// ChangeMissionObjectives ( OEast ) ;
5756: LD_STRING OEast
5758: PPUSH
5759: CALL_OW 337
// wait ( 0 0$20 ) ;
5763: LD_INT 700
5765: PPUSH
5766: CALL_OW 67
// SendSciToForest ;
5770: CALL 1383 0 0
// if Difficulty = 1 then
5774: LD_OWVAR 67
5778: PUSH
5779: LD_INT 1
5781: EQUAL
5782: IFFALSE 5786
// exit ;
5784: GO 5903
// wait ( [ 5 5$00 , 2 2$30 ] [ Difficulty - 1 ] ) ;
5786: LD_INT 10500
5788: PUSH
5789: LD_INT 5250
5791: PUSH
5792: EMPTY
5793: LIST
5794: LIST
5795: PUSH
5796: LD_OWVAR 67
5800: PUSH
5801: LD_INT 1
5803: MINUS
5804: ARRAY
5805: PPUSH
5806: CALL_OW 67
// if usAlert then
5810: LD_EXP 9
5814: IFFALSE 5818
// exit ;
5816: GO 5903
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
5818: LD_ADDR_VAR 0 3
5822: PUSH
5823: LD_INT 22
5825: PUSH
5826: LD_INT 1
5828: PUSH
5829: EMPTY
5830: LIST
5831: LIST
5832: PUSH
5833: LD_INT 25
5835: PUSH
5836: LD_INT 2
5838: PUSH
5839: EMPTY
5840: LIST
5841: LIST
5842: PUSH
5843: EMPTY
5844: LIST
5845: LIST
5846: PPUSH
5847: CALL_OW 69
5851: ST_TO_ADDR
// if not tmp then
5852: LD_VAR 0 3
5856: NOT
5857: IFFALSE 5861
// exit ;
5859: GO 5903
// ComExitBuilding ( tmp ) ;
5861: LD_VAR 0 3
5865: PPUSH
5866: CALL_OW 122
// AddComBuild ( tmp , b_breastwork , 40 , 13 , 3 ) ;
5870: LD_VAR 0 3
5874: PPUSH
5875: LD_INT 31
5877: PPUSH
5878: LD_INT 40
5880: PPUSH
5881: LD_INT 13
5883: PPUSH
5884: LD_INT 3
5886: PPUSH
5887: CALL_OW 205
// AddComEnterUnit ( tmp , Delta ) ;
5891: LD_VAR 0 3
5895: PPUSH
5896: LD_INT 1
5898: PPUSH
5899: CALL_OW 180
// end ;
5903: LD_VAR 0 1
5907: RET
// every 3 3$00 do
5908: GO 5910
5910: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
5911: LD_INT 1
5913: PPUSH
5914: LD_INT 570
5916: PPUSH
5917: LD_INT 350
5919: PPUSH
5920: CALL_OW 550
// wait ( 2 2$40 ) ;
5924: LD_INT 5600
5926: PPUSH
5927: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
5931: LD_INT 0
5933: PPUSH
5934: LD_INT 570
5936: PPUSH
5937: LD_INT 350
5939: PPUSH
5940: CALL_OW 550
// end ;
5944: END
// every 0 0$1 trigger not aviradzeSpotted and See ( 2 , Aviradze ) do var i , pepAmount ;
5945: LD_EXP 4
5949: NOT
5950: PUSH
5951: LD_INT 2
5953: PPUSH
5954: LD_EXP 25
5958: PPUSH
5959: CALL_OW 292
5963: AND
5964: IFFALSE 6872
5966: GO 5968
5968: DISABLE
5969: LD_INT 0
5971: PPUSH
5972: PPUSH
// begin aviradzeSpotted := true ;
5973: LD_ADDR_EXP 4
5977: PUSH
5978: LD_INT 1
5980: ST_TO_ADDR
// pepAmount := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ;
5981: LD_ADDR_VAR 0 2
5985: PUSH
5986: LD_INT 22
5988: PUSH
5989: LD_INT 2
5991: PUSH
5992: EMPTY
5993: LIST
5994: LIST
5995: PUSH
5996: LD_INT 21
5998: PUSH
5999: LD_INT 1
6001: PUSH
6002: EMPTY
6003: LIST
6004: LIST
6005: PUSH
6006: EMPTY
6007: LIST
6008: LIST
6009: PPUSH
6010: CALL_OW 69
6014: ST_TO_ADDR
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6015: LD_EXP 21
6019: PPUSH
6020: LD_EXP 25
6024: PPUSH
6025: CALL_OW 250
6029: PPUSH
6030: LD_EXP 25
6034: PPUSH
6035: CALL_OW 251
6039: PPUSH
6040: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6044: LD_INT 35
6046: PPUSH
6047: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 16 ;
6051: LD_EXP 21
6055: PPUSH
6056: LD_EXP 25
6060: PPUSH
6061: CALL_OW 296
6065: PUSH
6066: LD_INT 16
6068: LESS
6069: IFFALSE 6044
// InGameOn ;
6071: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
6075: LD_INT 5
6077: PPUSH
6078: LD_INT 2
6080: PPUSH
6081: CALL_OW 343
// if pepAmount > 2 then
6085: LD_VAR 0 2
6089: PUSH
6090: LD_INT 2
6092: GREATER
6093: IFFALSE 6109
// Say ( Heike , DH-1-spot ) else
6095: LD_EXP 21
6099: PPUSH
6100: LD_STRING DH-1-spot
6102: PPUSH
6103: CALL_OW 88
6107: GO 6121
// Say ( Heike , DH-1-spot-d ) ;
6109: LD_EXP 21
6113: PPUSH
6114: LD_STRING DH-1-spot-d
6116: PPUSH
6117: CALL_OW 88
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6121: LD_EXP 21
6125: PPUSH
6126: LD_EXP 25
6130: PPUSH
6131: CALL_OW 250
6135: PPUSH
6136: LD_EXP 25
6140: PPUSH
6141: CALL_OW 251
6145: PPUSH
6146: CALL_OW 111
// for i in [ Kamil , Mike , Givi ] do
6150: LD_ADDR_VAR 0 1
6154: PUSH
6155: LD_EXP 24
6159: PUSH
6160: LD_EXP 23
6164: PUSH
6165: LD_EXP 22
6169: PUSH
6170: EMPTY
6171: LIST
6172: LIST
6173: LIST
6174: PUSH
6175: FOR_IN
6176: IFFALSE 6215
// if GetDistUnits ( i , Aviradze ) > 7 then
6178: LD_VAR 0 1
6182: PPUSH
6183: LD_EXP 25
6187: PPUSH
6188: CALL_OW 296
6192: PUSH
6193: LD_INT 7
6195: GREATER
6196: IFFALSE 6213
// ComMoveXY ( i , 102 , 40 ) ;
6198: LD_VAR 0 1
6202: PPUSH
6203: LD_INT 102
6205: PPUSH
6206: LD_INT 40
6208: PPUSH
6209: CALL_OW 111
6213: GO 6175
6215: POP
6216: POP
// repeat wait ( 0 0$1 ) ;
6217: LD_INT 35
6219: PPUSH
6220: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 6 ;
6224: LD_EXP 21
6228: PPUSH
6229: LD_EXP 25
6233: PPUSH
6234: CALL_OW 296
6238: PUSH
6239: LD_INT 6
6241: LESS
6242: IFFALSE 6217
// ComTurnUnit ( Heike , Aviradze ) ;
6244: LD_EXP 21
6248: PPUSH
6249: LD_EXP 25
6253: PPUSH
6254: CALL_OW 119
// ComTurnUnit ( [ Aviradze , Sophia , Kaia ] , Heike ) ;
6258: LD_EXP 25
6262: PUSH
6263: LD_EXP 27
6267: PUSH
6268: LD_EXP 26
6272: PUSH
6273: EMPTY
6274: LIST
6275: LIST
6276: LIST
6277: PPUSH
6278: LD_EXP 21
6282: PPUSH
6283: CALL_OW 119
// if pepAmount > 1 then
6287: LD_VAR 0 2
6291: PUSH
6292: LD_INT 1
6294: GREATER
6295: IFFALSE 6347
// begin wait ( 0 0$2 ) ;
6297: LD_INT 70
6299: PPUSH
6300: CALL_OW 67
// ComTurnUnit ( [ Kamil , Mike , Givi ] , Aviradze ) ;
6304: LD_EXP 24
6308: PUSH
6309: LD_EXP 23
6313: PUSH
6314: LD_EXP 22
6318: PUSH
6319: EMPTY
6320: LIST
6321: LIST
6322: LIST
6323: PPUSH
6324: LD_EXP 25
6328: PPUSH
6329: CALL_OW 119
// Say ( Heike , DH-2-spot ) ;
6333: LD_EXP 21
6337: PPUSH
6338: LD_STRING DH-2-spot
6340: PPUSH
6341: CALL_OW 88
// end else
6345: GO 6359
// Say ( Heike , DH-2-spot-d ) ;
6347: LD_EXP 21
6351: PPUSH
6352: LD_STRING DH-2-spot-d
6354: PPUSH
6355: CALL_OW 88
// Say ( Aviradze , DA-2-spot ) ;
6359: LD_EXP 25
6363: PPUSH
6364: LD_STRING DA-2-spot
6366: PPUSH
6367: CALL_OW 88
// Say ( Heike , DH-3-spot ) ;
6371: LD_EXP 21
6375: PPUSH
6376: LD_STRING DH-3-spot
6378: PPUSH
6379: CALL_OW 88
// ComMoveUnit ( Kaia , Heike ) ;
6383: LD_EXP 26
6387: PPUSH
6388: LD_EXP 21
6392: PPUSH
6393: CALL_OW 112
// ComTurnUNit ( Heike , Kaia ) ;
6397: LD_EXP 21
6401: PPUSH
6402: LD_EXP 26
6406: PPUSH
6407: CALL_OW 119
// wait ( 0 0$0.3 ) ;
6411: LD_INT 10
6413: PPUSH
6414: CALL_OW 67
// async ;
6418: ASYNC
// Say ( Kaia , DK-3-spot ) ;
6419: LD_EXP 26
6423: PPUSH
6424: LD_STRING DK-3-spot
6426: PPUSH
6427: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
6431: LD_INT 35
6433: PPUSH
6434: CALL_OW 67
// until GetDistUnits ( Heike , Kaia ) < 4 ;
6438: LD_EXP 21
6442: PPUSH
6443: LD_EXP 26
6447: PPUSH
6448: CALL_OW 296
6452: PUSH
6453: LD_INT 4
6455: LESS
6456: IFFALSE 6431
// ComTurnUnit ( Kaia , Heike ) ;
6458: LD_EXP 26
6462: PPUSH
6463: LD_EXP 21
6467: PPUSH
6468: CALL_OW 119
// sync ;
6472: SYNC
// Say ( Heike , DH-4-spot ) ;
6473: LD_EXP 21
6477: PPUSH
6478: LD_STRING DH-4-spot
6480: PPUSH
6481: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6485: LD_INT 10
6487: PPUSH
6488: CALL_OW 67
// ComTurnUnit ( Heike , Aviradze ) ;
6492: LD_EXP 21
6496: PPUSH
6497: LD_EXP 25
6501: PPUSH
6502: CALL_OW 119
// Say ( Aviradze , DA-4-spot ) ;
6506: LD_EXP 25
6510: PPUSH
6511: LD_STRING DA-4-spot
6513: PPUSH
6514: CALL_OW 88
// ComTurnUnit ( Kaia , Aviradze ) ;
6518: LD_EXP 26
6522: PPUSH
6523: LD_EXP 25
6527: PPUSH
6528: CALL_OW 119
// Say ( Kaia , DK-4-spot ) ;
6532: LD_EXP 26
6536: PPUSH
6537: LD_STRING DK-4-spot
6539: PPUSH
6540: CALL_OW 88
// ComTurnUnit ( Aviradze , Kaia ) ;
6544: LD_EXP 25
6548: PPUSH
6549: LD_EXP 26
6553: PPUSH
6554: CALL_OW 119
// Say ( Aviradze , DA-5-spot ) ;
6558: LD_EXP 25
6562: PPUSH
6563: LD_STRING DA-5-spot
6565: PPUSH
6566: CALL_OW 88
// Say ( Kaia , DK-5-spot ) ;
6570: LD_EXP 26
6574: PPUSH
6575: LD_STRING DK-5-spot
6577: PPUSH
6578: CALL_OW 88
// if pepAmount = 1 then
6582: LD_VAR 0 2
6586: PUSH
6587: LD_INT 1
6589: EQUAL
6590: IFFALSE 6604
// Say ( Heike , DH-5-spot-f ) ;
6592: LD_EXP 21
6596: PPUSH
6597: LD_STRING DH-5-spot-f
6599: PPUSH
6600: CALL_OW 88
// if pepAmount < 3 then
6604: LD_VAR 0 2
6608: PUSH
6609: LD_INT 3
6611: LESS
6612: IFFALSE 6628
// Say ( Aviradze , DA-6-spot-f ) else
6614: LD_EXP 25
6618: PPUSH
6619: LD_STRING DA-6-spot-f
6621: PPUSH
6622: CALL_OW 88
6626: GO 6664
// if pepAmount < 4 then
6628: LD_VAR 0 2
6632: PUSH
6633: LD_INT 4
6635: LESS
6636: IFFALSE 6652
// Say ( Aviradze , DA-6-spot-c ) else
6638: LD_EXP 25
6642: PPUSH
6643: LD_STRING DA-6-spot-c
6645: PPUSH
6646: CALL_OW 88
6650: GO 6664
// Say ( Aviradze , DA-6-spot ) ;
6652: LD_EXP 25
6656: PPUSH
6657: LD_STRING DA-6-spot
6659: PPUSH
6660: CALL_OW 88
// if Kamil then
6664: LD_EXP 24
6668: IFFALSE 6682
// Say ( Kamil , DKam-6-spot ) ;
6670: LD_EXP 24
6674: PPUSH
6675: LD_STRING DKam-6-spot
6677: PPUSH
6678: CALL_OW 88
// Say ( Kaia , DK-6-spot ) ;
6682: LD_EXP 26
6686: PPUSH
6687: LD_STRING DK-6-spot
6689: PPUSH
6690: CALL_OW 88
// ComTurnUnit ( Aviradze , Heike ) ;
6694: LD_EXP 25
6698: PPUSH
6699: LD_EXP 21
6703: PPUSH
6704: CALL_OW 119
// Say ( Aviradze , DA-7-spot ) ;
6708: LD_EXP 25
6712: PPUSH
6713: LD_STRING DA-7-spot
6715: PPUSH
6716: CALL_OW 88
// Say ( Heike , DH-7-spot ) ;
6720: LD_EXP 21
6724: PPUSH
6725: LD_STRING DH-7-spot
6727: PPUSH
6728: CALL_OW 88
// if sciCounterKill >= 3 then
6732: LD_EXP 8
6736: PUSH
6737: LD_INT 3
6739: GREATEREQUAL
6740: IFFALSE 6766
// begin Say ( Heike , DH-7-spot-a ) ;
6742: LD_EXP 21
6746: PPUSH
6747: LD_STRING DH-7-spot-a
6749: PPUSH
6750: CALL_OW 88
// Say ( Aviradze , DA-8-spot-a ) ;
6754: LD_EXP 25
6758: PPUSH
6759: LD_STRING DA-8-spot-a
6761: PPUSH
6762: CALL_OW 88
// end ; InGameOff ;
6766: CALL_OW 9
// if sciCounterKill < 3 then
6770: LD_EXP 8
6774: PUSH
6775: LD_INT 3
6777: LESS
6778: IFFALSE 6810
// begin SetSide ( Kaia , 2 ) ;
6780: LD_EXP 26
6784: PPUSH
6785: LD_INT 2
6787: PPUSH
6788: CALL_OW 235
// ComFree ( Kaia ) ;
6792: LD_EXP 26
6796: PPUSH
6797: CALL_OW 139
// ChangeMissionObjectives ( OSci ) ;
6801: LD_STRING OSci
6803: PPUSH
6804: CALL_OW 337
// end else
6808: GO 6872
// begin aviradzeQuestDone := true ;
6810: LD_ADDR_EXP 7
6814: PUSH
6815: LD_INT 1
6817: ST_TO_ADDR
// attackDeltaAllowed := true ;
6818: LD_ADDR_EXP 12
6822: PUSH
6823: LD_INT 1
6825: ST_TO_ADDR
// ChangeMissionObjectives ( ODelta2 ) ;
6826: LD_STRING ODelta2
6828: PPUSH
6829: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
6833: LD_ADDR_VAR 0 1
6837: PUSH
6838: LD_INT 22
6840: PUSH
6841: LD_INT 5
6843: PUSH
6844: EMPTY
6845: LIST
6846: LIST
6847: PPUSH
6848: CALL_OW 69
6852: PUSH
6853: FOR_IN
6854: IFFALSE 6870
// SetSide ( i , 2 ) ;
6856: LD_VAR 0 1
6860: PPUSH
6861: LD_INT 2
6863: PPUSH
6864: CALL_OW 235
6868: GO 6853
6870: POP
6871: POP
// end ; end ;
6872: PPOPN 2
6874: END
// every 0 0$1 trigger not sciSpotted and GetDistUnits ( NearestUnitToUnit ( usSci , Heike ) , Heike ) < 8 and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and not aviradzeSpotted do
6875: LD_EXP 6
6879: NOT
6880: PUSH
6881: LD_EXP 20
6885: PPUSH
6886: LD_EXP 21
6890: PPUSH
6891: CALL_OW 74
6895: PPUSH
6896: LD_EXP 21
6900: PPUSH
6901: CALL_OW 296
6905: PUSH
6906: LD_INT 8
6908: LESS
6909: AND
6910: PUSH
6911: LD_INT 2
6913: PPUSH
6914: LD_EXP 20
6918: PPUSH
6919: LD_EXP 21
6923: PPUSH
6924: CALL_OW 74
6928: PPUSH
6929: CALL_OW 292
6933: AND
6934: PUSH
6935: LD_INT 22
6937: PUSH
6938: LD_INT 2
6940: PUSH
6941: EMPTY
6942: LIST
6943: LIST
6944: PUSH
6945: LD_INT 21
6947: PUSH
6948: LD_INT 1
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: PPUSH
6959: CALL_OW 69
6963: PUSH
6964: LD_INT 1
6966: GREATER
6967: AND
6968: PUSH
6969: LD_EXP 4
6973: NOT
6974: AND
6975: IFFALSE 7019
6977: GO 6979
6979: DISABLE
// begin sciSpotted := true ;
6980: LD_ADDR_EXP 6
6984: PUSH
6985: LD_INT 1
6987: ST_TO_ADDR
// CenterNowOnUnits ( NearestUnitToUnit ( usSci , Heike ) ) ;
6988: LD_EXP 20
6992: PPUSH
6993: LD_EXP 21
6997: PPUSH
6998: CALL_OW 74
7002: PPUSH
7003: CALL_OW 87
// Say ( Heike , DH-1-sci ) ;
7007: LD_EXP 21
7011: PPUSH
7012: LD_STRING DH-1-sci
7014: PPUSH
7015: CALL_OW 88
// end ;
7019: END
// every 0 0$1 trigger not sciSpotted and GetDistUnits ( NearestUnitToUnit ( usSci , Heike ) , Heike ) < 8 and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and aviradzeSpotted and not aviradzeQuestDone do
7020: LD_EXP 6
7024: NOT
7025: PUSH
7026: LD_EXP 20
7030: PPUSH
7031: LD_EXP 21
7035: PPUSH
7036: CALL_OW 74
7040: PPUSH
7041: LD_EXP 21
7045: PPUSH
7046: CALL_OW 296
7050: PUSH
7051: LD_INT 8
7053: LESS
7054: AND
7055: PUSH
7056: LD_INT 2
7058: PPUSH
7059: LD_EXP 20
7063: PPUSH
7064: LD_EXP 21
7068: PPUSH
7069: CALL_OW 74
7073: PPUSH
7074: CALL_OW 292
7078: AND
7079: PUSH
7080: LD_INT 22
7082: PUSH
7083: LD_INT 2
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: PUSH
7090: LD_INT 21
7092: PUSH
7093: LD_INT 1
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: PPUSH
7104: CALL_OW 69
7108: PUSH
7109: LD_INT 1
7111: GREATER
7112: AND
7113: PUSH
7114: LD_EXP 4
7118: AND
7119: PUSH
7120: LD_EXP 7
7124: NOT
7125: AND
7126: IFFALSE 7188
7128: GO 7130
7130: DISABLE
// begin sciSpotted := true ;
7131: LD_ADDR_EXP 6
7135: PUSH
7136: LD_INT 1
7138: ST_TO_ADDR
// CenterNowOnUnits ( NearestUnitToUnit ( usSci , Heike ) ) ;
7139: LD_EXP 20
7143: PPUSH
7144: LD_EXP 21
7148: PPUSH
7149: CALL_OW 74
7153: PPUSH
7154: CALL_OW 87
// Say ( Heike , DH-1-sci-a ) ;
7158: LD_EXP 21
7162: PPUSH
7163: LD_STRING DH-1-sci-a
7165: PPUSH
7166: CALL_OW 88
// if Mike then
7170: LD_EXP 23
7174: IFFALSE 7188
// Say ( Mike , DM-1-sci-a ) ;
7176: LD_EXP 23
7180: PPUSH
7181: LD_STRING DM-1-sci-a
7183: PPUSH
7184: CALL_OW 88
// end ;
7188: END
// every 0 0$1 trigger aviradzeSpotted and sciCounterKill >= 3 and not aviradzeQuestDone do
7189: LD_EXP 4
7193: PUSH
7194: LD_EXP 8
7198: PUSH
7199: LD_INT 3
7201: GREATEREQUAL
7202: AND
7203: PUSH
7204: LD_EXP 7
7208: NOT
7209: AND
7210: IFFALSE 7253
7212: GO 7214
7214: DISABLE
// begin aviradzeQuestDone := true ;
7215: LD_ADDR_EXP 7
7219: PUSH
7220: LD_INT 1
7222: ST_TO_ADDR
// Say ( Heike , DH-1-quest-done ) ;
7223: LD_EXP 21
7227: PPUSH
7228: LD_STRING DH-1-quest-done
7230: PPUSH
7231: CALL_OW 88
// if Givi then
7235: LD_EXP 22
7239: IFFALSE 7253
// Say ( Givi , DG-1-quest-done ) ;
7241: LD_EXP 22
7245: PPUSH
7246: LD_STRING DG-1-quest-done
7248: PPUSH
7249: CALL_OW 88
// end ;
7253: END
// every 0 0$1 trigger See ( 5 , Heike ) and GetDistUnits ( Heike , Aviradze ) < 6 and aviradzeQuestDone and not attackDeltaAllowed do var i ;
7254: LD_INT 5
7256: PPUSH
7257: LD_EXP 21
7261: PPUSH
7262: CALL_OW 292
7266: PUSH
7267: LD_EXP 21
7271: PPUSH
7272: LD_EXP 25
7276: PPUSH
7277: CALL_OW 296
7281: PUSH
7282: LD_INT 6
7284: LESS
7285: AND
7286: PUSH
7287: LD_EXP 7
7291: AND
7292: PUSH
7293: LD_EXP 12
7297: NOT
7298: AND
7299: IFFALSE 7437
7301: GO 7303
7303: DISABLE
7304: LD_INT 0
7306: PPUSH
// begin attackDeltaAllowed := true ;
7307: LD_ADDR_EXP 12
7311: PUSH
7312: LD_INT 1
7314: ST_TO_ADDR
// InGameOn ;
7315: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
7319: LD_EXP 21
7323: PPUSH
7324: CALL_OW 87
// wait ( 0 0$0.3 ) ;
7328: LD_INT 10
7330: PPUSH
7331: CALL_OW 67
// ComTurnUnit ( Aviradze , Heike ) ;
7335: LD_EXP 25
7339: PPUSH
7340: LD_EXP 21
7344: PPUSH
7345: CALL_OW 119
// ComTurnUnit ( Heike , Aviradze ) ;
7349: LD_EXP 21
7353: PPUSH
7354: LD_EXP 25
7358: PPUSH
7359: CALL_OW 119
// Say ( Heike , DH-1-return ) ;
7363: LD_EXP 21
7367: PPUSH
7368: LD_STRING DH-1-return
7370: PPUSH
7371: CALL_OW 88
// Say ( Aviradze , DA-1-return ) ;
7375: LD_EXP 25
7379: PPUSH
7380: LD_STRING DA-1-return
7382: PPUSH
7383: CALL_OW 88
// InGameOff ;
7387: CALL_OW 9
// ChangeMissionObjectives ( ODelta ) ;
7391: LD_STRING ODelta
7393: PPUSH
7394: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
7398: LD_ADDR_VAR 0 1
7402: PUSH
7403: LD_INT 22
7405: PUSH
7406: LD_INT 5
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: PPUSH
7413: CALL_OW 69
7417: PUSH
7418: FOR_IN
7419: IFFALSE 7435
// SetSide ( i , 2 ) ;
7421: LD_VAR 0 1
7425: PPUSH
7426: LD_INT 2
7428: PPUSH
7429: CALL_OW 235
7433: GO 7418
7435: POP
7436: POP
// end ;
7437: PPOPN 1
7439: END
// every 0 0$1 trigger attackDeltaAllowed and IsOk ( Markov ) and GetSide ( Delta ) = 1 and IsOk ( Lynch ) and not usAlert do var i , k , tmp ;
7440: LD_EXP 12
7444: PUSH
7445: LD_EXP 28
7449: PPUSH
7450: CALL_OW 302
7454: AND
7455: PUSH
7456: LD_INT 1
7458: PPUSH
7459: CALL_OW 255
7463: PUSH
7464: LD_INT 1
7466: EQUAL
7467: AND
7468: PUSH
7469: LD_EXP 18
7473: PPUSH
7474: CALL_OW 302
7478: AND
7479: PUSH
7480: LD_EXP 9
7484: NOT
7485: AND
7486: IFFALSE 8656
7488: GO 7490
7490: DISABLE
7491: LD_INT 0
7493: PPUSH
7494: PPUSH
7495: PPUSH
// begin trap := 0 ;
7496: LD_ADDR_EXP 15
7500: PUSH
7501: LD_INT 0
7503: ST_TO_ADDR
// wait ( 0 0$15 ) ;
7504: LD_INT 525
7506: PPUSH
7507: CALL_OW 67
// DialogueOn ;
7511: CALL_OW 6
// Say ( Markov , DMar-1-radio ) ;
7515: LD_EXP 28
7519: PPUSH
7520: LD_STRING DMar-1-radio
7522: PPUSH
7523: CALL_OW 88
// Say ( Heike , DH-1-radio ) ;
7527: LD_EXP 21
7531: PPUSH
7532: LD_STRING DH-1-radio
7534: PPUSH
7535: CALL_OW 88
// Say ( Markov , DMar-2-radio ) ;
7539: LD_EXP 28
7543: PPUSH
7544: LD_STRING DMar-2-radio
7546: PPUSH
7547: CALL_OW 88
// Say ( Heike , DH-2-radio ) ;
7551: LD_EXP 21
7555: PPUSH
7556: LD_STRING DH-2-radio
7558: PPUSH
7559: CALL_OW 88
// if IsOk ( Kamil ) or IsOk ( Sophia ) then
7563: LD_EXP 24
7567: PPUSH
7568: CALL_OW 302
7572: PUSH
7573: LD_EXP 27
7577: PPUSH
7578: CALL_OW 302
7582: OR
7583: IFFALSE 8656
// begin case Query ( Q1Trap ) of 1 :
7585: LD_STRING Q1Trap
7587: PPUSH
7588: CALL_OW 97
7592: PUSH
7593: LD_INT 1
7595: DOUBLE
7596: EQUAL
7597: IFTRUE 7601
7599: GO 7795
7601: POP
// begin if IsOk ( Kamil ) then
7602: LD_EXP 24
7606: PPUSH
7607: CALL_OW 302
7611: IFFALSE 7690
// begin Say ( Kamil , DKam-2-radio ) ;
7613: LD_EXP 24
7617: PPUSH
7618: LD_STRING DKam-2-radio
7620: PPUSH
7621: CALL_OW 88
// Say ( Kamil , DKam-3-radio ) ;
7625: LD_EXP 24
7629: PPUSH
7630: LD_STRING DKam-3-radio
7632: PPUSH
7633: CALL_OW 88
// SayRadio ( Lynch , DDelta-3-radio ) ;
7637: LD_EXP 18
7641: PPUSH
7642: LD_STRING DDelta-3-radio
7644: PPUSH
7645: CALL_OW 94
// dwait ( 0 0$01 ) ;
7649: LD_INT 35
7651: PPUSH
7652: CALL_OW 68
// Say ( Heike , DH-3-radio ) ;
7656: LD_EXP 21
7660: PPUSH
7661: LD_STRING DH-3-radio
7663: PPUSH
7664: CALL_OW 88
// Say ( Kamil , DKam-4-radio ) ;
7668: LD_EXP 24
7672: PPUSH
7673: LD_STRING DKam-4-radio
7675: PPUSH
7676: CALL_OW 88
// trap := 1 ;
7680: LD_ADDR_EXP 15
7684: PUSH
7685: LD_INT 1
7687: ST_TO_ADDR
// end else
7688: GO 7789
// begin Say ( Sophia , DS-1-radio ) ;
7690: LD_EXP 27
7694: PPUSH
7695: LD_STRING DS-1-radio
7697: PPUSH
7698: CALL_OW 88
// Say ( Sophia , DS-2-radio ) ;
7702: LD_EXP 27
7706: PPUSH
7707: LD_STRING DS-2-radio
7709: PPUSH
7710: CALL_OW 88
// SayRadio ( Lynch , DDelta-2-radio-s ) ;
7714: LD_EXP 18
7718: PPUSH
7719: LD_STRING DDelta-2-radio-s
7721: PPUSH
7722: CALL_OW 94
// Say ( Sophia , DS-3-radio ) ;
7726: LD_EXP 27
7730: PPUSH
7731: LD_STRING DS-3-radio
7733: PPUSH
7734: CALL_OW 88
// SayRadio ( Lynch , DDelta-3-radio-s ) ;
7738: LD_EXP 18
7742: PPUSH
7743: LD_STRING DDelta-3-radio-s
7745: PPUSH
7746: CALL_OW 94
// Say ( Sophia , DS-4-radio-s ) ;
7750: LD_EXP 27
7754: PPUSH
7755: LD_STRING DS-4-radio-s
7757: PPUSH
7758: CALL_OW 88
// dwait ( 0 0$01 ) ;
7762: LD_INT 35
7764: PPUSH
7765: CALL_OW 68
// Say ( Heike , DH-1-trap ) ;
7769: LD_EXP 21
7773: PPUSH
7774: LD_STRING DH-1-trap
7776: PPUSH
7777: CALL_OW 88
// trap := 0 ;
7781: LD_ADDR_EXP 15
7785: PUSH
7786: LD_INT 0
7788: ST_TO_ADDR
// end ; DialogueOff ;
7789: CALL_OW 7
// end ; 2 :
7793: GO 7813
7795: LD_INT 2
7797: DOUBLE
7798: EQUAL
7799: IFTRUE 7803
7801: GO 7812
7803: POP
// begin DialogueOff ;
7804: CALL_OW 7
// exit ;
7808: GO 8656
// end ; end ;
7810: GO 7813
7812: POP
// if trap = 1 then
7813: LD_EXP 15
7817: PUSH
7818: LD_INT 1
7820: EQUAL
7821: IFFALSE 8227
// begin tmp := [ ] ;
7823: LD_ADDR_VAR 0 3
7827: PUSH
7828: EMPTY
7829: ST_TO_ADDR
// k := 3 ;
7830: LD_ADDR_VAR 0 2
7834: PUSH
7835: LD_INT 3
7837: ST_TO_ADDR
// if usForces < 3 then
7838: LD_EXP 19
7842: PUSH
7843: LD_INT 3
7845: LESS
7846: IFFALSE 7858
// k := usForces ;
7848: LD_ADDR_VAR 0 2
7852: PUSH
7853: LD_EXP 19
7857: ST_TO_ADDR
// for i := 1 to k do
7858: LD_ADDR_VAR 0 1
7862: PUSH
7863: DOUBLE
7864: LD_INT 1
7866: DEC
7867: ST_TO_ADDR
7868: LD_VAR 0 2
7872: PUSH
7873: FOR_TO
7874: IFFALSE 7929
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
7876: LD_ADDR_VAR 0 3
7880: PUSH
7881: LD_VAR 0 3
7885: PPUSH
7886: LD_VAR 0 3
7890: PUSH
7891: LD_INT 1
7893: PLUS
7894: PPUSH
7895: LD_EXP 19
7899: PUSH
7900: LD_INT 1
7902: ARRAY
7903: PPUSH
7904: CALL_OW 1
7908: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
7909: LD_ADDR_EXP 19
7913: PUSH
7914: LD_EXP 19
7918: PPUSH
7919: LD_INT 1
7921: PPUSH
7922: CALL_OW 3
7926: ST_TO_ADDR
// end ;
7927: GO 7873
7929: POP
7930: POP
// usPatrol := tmp ;
7931: LD_ADDR_EXP 14
7935: PUSH
7936: LD_VAR 0 3
7940: ST_TO_ADDR
// for i in tmp do
7941: LD_ADDR_VAR 0 1
7945: PUSH
7946: LD_VAR 0 3
7950: PUSH
7951: FOR_IN
7952: IFFALSE 8082
// begin if IsInUnit ( i ) then
7954: LD_VAR 0 1
7958: PPUSH
7959: CALL_OW 310
7963: IFFALSE 7974
// ComExitBuilding ( i ) ;
7965: LD_VAR 0 1
7969: PPUSH
7970: CALL_OW 122
// AddComAgressiveMove ( i , 63 , 31 ) ;
7974: LD_VAR 0 1
7978: PPUSH
7979: LD_INT 63
7981: PPUSH
7982: LD_INT 31
7984: PPUSH
7985: CALL_OW 174
// AddComWait ( i , 0 0$2 ) ;
7989: LD_VAR 0 1
7993: PPUSH
7994: LD_INT 70
7996: PPUSH
7997: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 43 ) ;
8001: LD_VAR 0 1
8005: PPUSH
8006: LD_INT 103
8008: PPUSH
8009: LD_INT 43
8011: PPUSH
8012: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
8016: LD_VAR 0 1
8020: PPUSH
8021: LD_INT 105
8023: PPUSH
8024: CALL_OW 202
// if Difficulty > 1 then
8028: LD_OWVAR 67
8032: PUSH
8033: LD_INT 1
8035: GREATER
8036: IFFALSE 8053
// AddComAgressiveMove ( i , 114 , 69 ) ;
8038: LD_VAR 0 1
8042: PPUSH
8043: LD_INT 114
8045: PPUSH
8046: LD_INT 69
8048: PPUSH
8049: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
8053: LD_VAR 0 1
8057: PPUSH
8058: LD_INT 105
8060: PPUSH
8061: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
8065: LD_VAR 0 1
8069: PPUSH
8070: LD_INT 42
8072: PPUSH
8073: LD_INT 20
8075: PPUSH
8076: CALL_OW 174
// end ;
8080: GO 7951
8082: POP
8083: POP
// repeat wait ( 0 0$1 ) ;
8084: LD_INT 35
8086: PPUSH
8087: CALL_OW 67
// for i in tmp do
8091: LD_ADDR_VAR 0 1
8095: PUSH
8096: LD_VAR 0 3
8100: PUSH
8101: FOR_IN
8102: IFFALSE 8133
// if IsDead ( i ) then
8104: LD_VAR 0 1
8108: PPUSH
8109: CALL_OW 301
8113: IFFALSE 8131
// tmp := tmp diff i ;
8115: LD_ADDR_VAR 0 3
8119: PUSH
8120: LD_VAR 0 3
8124: PUSH
8125: LD_VAR 0 1
8129: DIFF
8130: ST_TO_ADDR
8131: GO 8101
8133: POP
8134: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
8135: LD_VAR 0 3
8139: NOT
8140: PUSH
8141: LD_VAR 0 3
8145: PPUSH
8146: LD_INT 95
8148: PUSH
8149: LD_INT 7
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: PUSH
8156: LD_INT 3
8158: PUSH
8159: LD_INT 60
8161: PUSH
8162: EMPTY
8163: LIST
8164: PUSH
8165: EMPTY
8166: LIST
8167: LIST
8168: PUSH
8169: EMPTY
8170: LIST
8171: LIST
8172: PPUSH
8173: CALL_OW 72
8177: PUSH
8178: LD_VAR 0 3
8182: EQUAL
8183: OR
8184: IFFALSE 8084
// if tmp then
8186: LD_VAR 0 3
8190: IFFALSE 8217
// begin usPatrol := [ ] ;
8192: LD_ADDR_EXP 14
8196: PUSH
8197: EMPTY
8198: ST_TO_ADDR
// usForces := usForces union tmp ;
8199: LD_ADDR_EXP 19
8203: PUSH
8204: LD_EXP 19
8208: PUSH
8209: LD_VAR 0 3
8213: UNION
8214: ST_TO_ADDR
// end else
8215: GO 8225
// trickyMove := true ;
8217: LD_ADDR_EXP 13
8221: PUSH
8222: LD_INT 1
8224: ST_TO_ADDR
// end else
8225: GO 8656
// begin tmp := [ ] ;
8227: LD_ADDR_VAR 0 3
8231: PUSH
8232: EMPTY
8233: ST_TO_ADDR
// k := 4 ;
8234: LD_ADDR_VAR 0 2
8238: PUSH
8239: LD_INT 4
8241: ST_TO_ADDR
// if usForces < 4 then
8242: LD_EXP 19
8246: PUSH
8247: LD_INT 4
8249: LESS
8250: IFFALSE 8262
// k := usForces ;
8252: LD_ADDR_VAR 0 2
8256: PUSH
8257: LD_EXP 19
8261: ST_TO_ADDR
// for i := 1 to k do
8262: LD_ADDR_VAR 0 1
8266: PUSH
8267: DOUBLE
8268: LD_INT 1
8270: DEC
8271: ST_TO_ADDR
8272: LD_VAR 0 2
8276: PUSH
8277: FOR_TO
8278: IFFALSE 8333
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
8280: LD_ADDR_VAR 0 3
8284: PUSH
8285: LD_VAR 0 3
8289: PPUSH
8290: LD_VAR 0 3
8294: PUSH
8295: LD_INT 1
8297: PLUS
8298: PPUSH
8299: LD_EXP 19
8303: PUSH
8304: LD_INT 1
8306: ARRAY
8307: PPUSH
8308: CALL_OW 1
8312: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
8313: LD_ADDR_EXP 19
8317: PUSH
8318: LD_EXP 19
8322: PPUSH
8323: LD_INT 1
8325: PPUSH
8326: CALL_OW 3
8330: ST_TO_ADDR
// end ;
8331: GO 8277
8333: POP
8334: POP
// if Lynch then
8335: LD_EXP 18
8339: IFFALSE 8357
// tmp := tmp ^ Lynch ;
8341: LD_ADDR_VAR 0 3
8345: PUSH
8346: LD_VAR 0 3
8350: PUSH
8351: LD_EXP 18
8355: ADD
8356: ST_TO_ADDR
// usPatrol := tmp ;
8357: LD_ADDR_EXP 14
8361: PUSH
8362: LD_VAR 0 3
8366: ST_TO_ADDR
// for i in tmp do
8367: LD_ADDR_VAR 0 1
8371: PUSH
8372: LD_VAR 0 3
8376: PUSH
8377: FOR_IN
8378: IFFALSE 8471
// begin if IsInUnit ( i ) then
8380: LD_VAR 0 1
8384: PPUSH
8385: CALL_OW 310
8389: IFFALSE 8400
// ComExitBuilding ( i ) ;
8391: LD_VAR 0 1
8395: PPUSH
8396: CALL_OW 122
// AddComAgressiveMove ( i , 69 , 15 ) ;
8400: LD_VAR 0 1
8404: PPUSH
8405: LD_INT 69
8407: PPUSH
8408: LD_INT 15
8410: PPUSH
8411: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
8415: LD_VAR 0 1
8419: PPUSH
8420: LD_INT 700
8422: PPUSH
8423: CALL_OW 202
// AddComAgressiveMove ( i , 55 , 43 ) ;
8427: LD_VAR 0 1
8431: PPUSH
8432: LD_INT 55
8434: PPUSH
8435: LD_INT 43
8437: PPUSH
8438: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
8442: LD_VAR 0 1
8446: PPUSH
8447: LD_INT 700
8449: PPUSH
8450: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
8454: LD_VAR 0 1
8458: PPUSH
8459: LD_INT 42
8461: PPUSH
8462: LD_INT 20
8464: PPUSH
8465: CALL_OW 174
// end ;
8469: GO 8377
8471: POP
8472: POP
// repeat wait ( 0 0$1 ) ;
8473: LD_INT 35
8475: PPUSH
8476: CALL_OW 67
// for i in tmp do
8480: LD_ADDR_VAR 0 1
8484: PUSH
8485: LD_VAR 0 3
8489: PUSH
8490: FOR_IN
8491: IFFALSE 8522
// if IsDead ( i ) then
8493: LD_VAR 0 1
8497: PPUSH
8498: CALL_OW 301
8502: IFFALSE 8520
// tmp := tmp diff i ;
8504: LD_ADDR_VAR 0 3
8508: PUSH
8509: LD_VAR 0 3
8513: PUSH
8514: LD_VAR 0 1
8518: DIFF
8519: ST_TO_ADDR
8520: GO 8490
8522: POP
8523: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
8524: LD_VAR 0 3
8528: NOT
8529: PUSH
8530: LD_VAR 0 3
8534: PPUSH
8535: LD_INT 95
8537: PUSH
8538: LD_INT 7
8540: PUSH
8541: EMPTY
8542: LIST
8543: LIST
8544: PUSH
8545: LD_INT 3
8547: PUSH
8548: LD_INT 60
8550: PUSH
8551: EMPTY
8552: LIST
8553: PUSH
8554: EMPTY
8555: LIST
8556: LIST
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: PPUSH
8562: CALL_OW 72
8566: PUSH
8567: LD_VAR 0 3
8571: EQUAL
8572: OR
8573: IFFALSE 8473
// if not tmp then
8575: LD_VAR 0 3
8579: NOT
8580: IFFALSE 8592
// trickyMove := true else
8582: LD_ADDR_EXP 13
8586: PUSH
8587: LD_INT 1
8589: ST_TO_ADDR
8590: GO 8599
// usPatrol := [ ] ;
8592: LD_ADDR_EXP 14
8596: PUSH
8597: EMPTY
8598: ST_TO_ADDR
// if tmp diff Lynch then
8599: LD_VAR 0 3
8603: PUSH
8604: LD_EXP 18
8608: DIFF
8609: IFFALSE 8633
// usForces := usForces union ( tmp diff Lynch ) ;
8611: LD_ADDR_EXP 19
8615: PUSH
8616: LD_EXP 19
8620: PUSH
8621: LD_VAR 0 3
8625: PUSH
8626: LD_EXP 18
8630: DIFF
8631: UNION
8632: ST_TO_ADDR
// if IsOk ( Lynch ) then
8633: LD_EXP 18
8637: PPUSH
8638: CALL_OW 302
8642: IFFALSE 8656
// ComEnterUnit ( Lynch , Delta ) ;
8644: LD_EXP 18
8648: PPUSH
8649: LD_INT 1
8651: PPUSH
8652: CALL_OW 120
// end ; end ; end ;
8656: PPOPN 3
8658: END
// every 0 0$1 trigger UnitFilter ( usPatrol , [ f_see , 2 ] ) do
8659: LD_EXP 14
8663: PPUSH
8664: LD_INT 101
8666: PUSH
8667: LD_INT 2
8669: PUSH
8670: EMPTY
8671: LIST
8672: LIST
8673: PPUSH
8674: CALL_OW 72
8678: IFFALSE 8811
8680: GO 8682
8682: DISABLE
// begin if not trap then
8683: LD_EXP 15
8687: NOT
8688: IFFALSE 8716
// begin Say ( Heike , DH-2-trap ) ;
8690: LD_EXP 21
8694: PPUSH
8695: LD_STRING DH-2-trap
8697: PPUSH
8698: CALL_OW 88
// Say ( Mike , DM-2-trap ) ;
8702: LD_EXP 23
8706: PPUSH
8707: LD_STRING DM-2-trap
8709: PPUSH
8710: CALL_OW 88
// end else
8714: GO 8728
// begin Say ( Heike , DH-1-trap-a ) ;
8716: LD_EXP 21
8720: PPUSH
8721: LD_STRING DH-1-trap-a
8723: PPUSH
8724: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
8728: LD_INT 35
8730: PPUSH
8731: CALL_OW 67
// until trickyMove ;
8735: LD_EXP 13
8739: IFFALSE 8728
// Say ( Heike , DH-3-trap ) ;
8741: LD_EXP 21
8745: PPUSH
8746: LD_STRING DH-3-trap
8748: PPUSH
8749: CALL_OW 88
// if IsOk ( Givi ) and IsOk ( Kaia ) then
8753: LD_EXP 22
8757: PPUSH
8758: CALL_OW 302
8762: PUSH
8763: LD_EXP 26
8767: PPUSH
8768: CALL_OW 302
8772: AND
8773: IFFALSE 8811
// begin Say ( Givi , DG-3-trap ) ;
8775: LD_EXP 22
8779: PPUSH
8780: LD_STRING DG-3-trap
8782: PPUSH
8783: CALL_OW 88
// Say ( Kaia , DK-3-trap ) ;
8787: LD_EXP 26
8791: PPUSH
8792: LD_STRING DK-3-trap
8794: PPUSH
8795: CALL_OW 88
// Say ( Givi , DG-4-trap ) ;
8799: LD_EXP 22
8803: PPUSH
8804: LD_STRING DG-4-trap
8806: PPUSH
8807: CALL_OW 88
// end ; end ;
8811: END
// every 0 0$1 trigger GetSide ( Delta ) = 2 do
8812: LD_INT 1
8814: PPUSH
8815: CALL_OW 255
8819: PUSH
8820: LD_INT 2
8822: EQUAL
8823: IFFALSE 8866
8825: GO 8827
8827: DISABLE
// begin if not IsOk ( Kaia ) then
8828: LD_EXP 26
8832: PPUSH
8833: CALL_OW 302
8837: NOT
8838: IFFALSE 8842
// exit ;
8840: GO 8866
// Say ( Kaia , DK-1-capture ) ;
8842: LD_EXP 26
8846: PPUSH
8847: LD_STRING DK-1-capture
8849: PPUSH
8850: CALL_OW 88
// Say ( Heike , DH-1-capture ) ;
8854: LD_EXP 21
8858: PPUSH
8859: LD_STRING DH-1-capture
8861: PPUSH
8862: CALL_OW 88
// end ;
8866: END
// every 0 0$1 trigger GetSide ( usLab ) = 2 do
8867: LD_INT 3
8869: PPUSH
8870: CALL_OW 255
8874: PUSH
8875: LD_INT 2
8877: EQUAL
8878: IFFALSE 8910
8880: GO 8882
8882: DISABLE
// begin DialogueOn ;
8883: CALL_OW 6
// Say ( Aviradze , DA-1-capture ) ;
8887: LD_EXP 25
8891: PPUSH
8892: LD_STRING DA-1-capture
8894: PPUSH
8895: CALL_OW 88
// DialogueOff ;
8899: CALL_OW 7
// ChangeMissionObjectives ( OTame ) ;
8903: LD_STRING OTame
8905: PPUSH
8906: CALL_OW 337
// end ;
8910: END
// every 0 0$1 trigger GetTech ( tech_ApeLang , 2 ) = state_researched do
8911: LD_INT 1
8913: PPUSH
8914: LD_INT 2
8916: PPUSH
8917: CALL_OW 321
8921: PUSH
8922: LD_INT 2
8924: EQUAL
8925: IFFALSE 8998
8927: GO 8929
8929: DISABLE
// begin DialogueOn ;
8930: CALL_OW 6
// Say ( Aviradze , DA-1-ape ) ;
8934: LD_EXP 25
8938: PPUSH
8939: LD_STRING DA-1-ape
8941: PPUSH
8942: CALL_OW 88
// Say ( Heike , DH-1-ape ) ;
8946: LD_EXP 21
8950: PPUSH
8951: LD_STRING DH-1-ape
8953: PPUSH
8954: CALL_OW 88
// Say ( Aviradze , DA-2-ape ) ;
8958: LD_EXP 25
8962: PPUSH
8963: LD_STRING DA-2-ape
8965: PPUSH
8966: CALL_OW 88
// Say ( Aviradze , DA-3-ape ) ;
8970: LD_EXP 25
8974: PPUSH
8975: LD_STRING DA-3-ape
8977: PPUSH
8978: CALL_OW 88
// Say ( Heike , DH-3-ape ) ;
8982: LD_EXP 21
8986: PPUSH
8987: LD_STRING DH-3-ape
8989: PPUSH
8990: CALL_OW 88
// DialogueOff ;
8994: CALL_OW 7
// end ;
8998: END
// every 0 0$5 trigger lostCounter >= [ 3 , 2 , 2 ] [ Difficulty ] do
8999: LD_EXP 16
9003: PUSH
9004: LD_INT 3
9006: PUSH
9007: LD_INT 2
9009: PUSH
9010: LD_INT 2
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: LIST
9017: PUSH
9018: LD_OWVAR 67
9022: ARRAY
9023: GREATEREQUAL
9024: IFFALSE 9068
9026: GO 9028
9028: DISABLE
// begin DialogueOn ;
9029: CALL_OW 6
// Say ( Aviradze , DA-1-failure ) ;
9033: LD_EXP 25
9037: PPUSH
9038: LD_STRING DA-1-failure
9040: PPUSH
9041: CALL_OW 88
// Say ( Aviradze , DA-2-failure ) ;
9045: LD_EXP 25
9049: PPUSH
9050: LD_STRING DA-2-failure
9052: PPUSH
9053: CALL_OW 88
// YouLost ( Failure ) ;
9057: LD_STRING Failure
9059: PPUSH
9060: CALL_OW 104
// DialogueOff ;
9064: CALL_OW 7
// end ;
9068: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) do var tmp ;
9069: LD_INT 22
9071: PUSH
9072: LD_INT 2
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: PUSH
9079: LD_INT 23
9081: PUSH
9082: LD_INT 0
9084: PUSH
9085: EMPTY
9086: LIST
9087: LIST
9088: PUSH
9089: EMPTY
9090: LIST
9091: LIST
9092: PPUSH
9093: CALL_OW 69
9097: IFFALSE 9847
9099: GO 9101
9101: DISABLE
9102: LD_INT 0
9104: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) [ 1 ] ;
9105: LD_ADDR_VAR 0 1
9109: PUSH
9110: LD_INT 22
9112: PUSH
9113: LD_INT 2
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PUSH
9120: LD_INT 23
9122: PUSH
9123: LD_INT 0
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: PUSH
9130: EMPTY
9131: LIST
9132: LIST
9133: PPUSH
9134: CALL_OW 69
9138: PUSH
9139: LD_INT 1
9141: ARRAY
9142: ST_TO_ADDR
// InGameOn ;
9143: CALL_OW 8
// CenterNowOnUnits ( tmp ) ;
9147: LD_VAR 0 1
9151: PPUSH
9152: CALL_OW 87
// ComMoveUnit ( tmp , Aviradze ) ;
9156: LD_VAR 0 1
9160: PPUSH
9161: LD_EXP 25
9165: PPUSH
9166: CALL_OW 112
// ComTurnUnit ( Aviradze , tmp ) ;
9170: LD_EXP 25
9174: PPUSH
9175: LD_VAR 0 1
9179: PPUSH
9180: CALL_OW 119
// wait ( 0 0$1 ) ;
9184: LD_INT 35
9186: PPUSH
9187: CALL_OW 67
// Say ( Aviradze , DA-1-tame-a ) ;
9191: LD_EXP 25
9195: PPUSH
9196: LD_STRING DA-1-tame-a
9198: PPUSH
9199: CALL_OW 88
// if IsOk ( Mike ) then
9203: LD_EXP 23
9207: PPUSH
9208: CALL_OW 302
9212: IFFALSE 9250
// begin Say ( Mike , DM-1-tame-a ) ;
9214: LD_EXP 23
9218: PPUSH
9219: LD_STRING DM-1-tame-a
9221: PPUSH
9222: CALL_OW 88
// Say ( Sophia , DS-1-tame-a ) ;
9226: LD_EXP 27
9230: PPUSH
9231: LD_STRING DS-1-tame-a
9233: PPUSH
9234: CALL_OW 88
// Say ( Mike , DM-2-tame-a ) ;
9238: LD_EXP 23
9242: PPUSH
9243: LD_STRING DM-2-tame-a
9245: PPUSH
9246: CALL_OW 88
// end ; wait ( 0 0$3 ) ;
9250: LD_INT 105
9252: PPUSH
9253: CALL_OW 67
// PrepareFarmer ;
9257: CALL 10506 0 0
// CenterOnUnits ( Farmer ) ;
9261: LD_EXP 29
9265: PPUSH
9266: CALL_OW 85
// ComMoveXY ( Farmer , 105 , 59 ) ;
9270: LD_EXP 29
9274: PPUSH
9275: LD_INT 105
9277: PPUSH
9278: LD_INT 59
9280: PPUSH
9281: CALL_OW 111
// AddComHold ( Farmer ) ;
9285: LD_EXP 29
9289: PPUSH
9290: CALL_OW 200
// SayRadio ( Farmer , DF-1-end ) ;
9294: LD_EXP 29
9298: PPUSH
9299: LD_STRING DF-1-end
9301: PPUSH
9302: CALL_OW 94
// Say ( Aviradze , DA-1-end ) ;
9306: LD_EXP 25
9310: PPUSH
9311: LD_STRING DA-1-end
9313: PPUSH
9314: CALL_OW 88
// SayRadio ( Farmer , DF-2-end ) ;
9318: LD_EXP 29
9322: PPUSH
9323: LD_STRING DF-2-end
9325: PPUSH
9326: CALL_OW 94
// Say ( Aviradze , DA-2-end ) ;
9330: LD_EXP 25
9334: PPUSH
9335: LD_STRING DA-2-end
9337: PPUSH
9338: CALL_OW 88
// SayRadio ( Farmer , DF-3-end ) ;
9342: LD_EXP 29
9346: PPUSH
9347: LD_STRING DF-3-end
9349: PPUSH
9350: CALL_OW 94
// Say ( Heike , DH-3-end ) ;
9354: LD_EXP 21
9358: PPUSH
9359: LD_STRING DH-3-end
9361: PPUSH
9362: CALL_OW 88
// SayRadio ( Farmer , DF-4-end ) ;
9366: LD_EXP 29
9370: PPUSH
9371: LD_STRING DF-4-end
9373: PPUSH
9374: CALL_OW 94
// if tick <= [ 20 20$00 , 15 15$00 , 10 10$00 ] [ Difficulty ] then
9378: LD_OWVAR 1
9382: PUSH
9383: LD_INT 42000
9385: PUSH
9386: LD_INT 31500
9388: PUSH
9389: LD_INT 21000
9391: PUSH
9392: EMPTY
9393: LIST
9394: LIST
9395: LIST
9396: PUSH
9397: LD_OWVAR 67
9401: ARRAY
9402: LESSEQUAL
9403: IFFALSE 9417
// AddMedal ( med1 , 1 ) else
9405: LD_STRING med1
9407: PPUSH
9408: LD_INT 1
9410: PPUSH
9411: CALL_OW 101
9415: GO 9428
// AddMedal ( med1 , - 1 ) ;
9417: LD_STRING med1
9419: PPUSH
9420: LD_INT 1
9422: NEG
9423: PPUSH
9424: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) = 0 then
9428: LD_INT 22
9430: PUSH
9431: LD_INT 1
9433: PUSH
9434: EMPTY
9435: LIST
9436: LIST
9437: PUSH
9438: LD_INT 25
9440: PUSH
9441: LD_INT 4
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: PPUSH
9452: CALL_OW 69
9456: PUSH
9457: LD_INT 0
9459: EQUAL
9460: IFFALSE 9474
// AddMedal ( med2 , 1 ) else
9462: LD_STRING med2
9464: PPUSH
9465: LD_INT 1
9467: PPUSH
9468: CALL_OW 101
9472: GO 9485
// AddMedal ( med2 , - 1 ) ;
9474: LD_STRING med2
9476: PPUSH
9477: LD_INT 1
9479: NEG
9480: PPUSH
9481: CALL_OW 101
// if trickyMove then
9485: LD_EXP 13
9489: IFFALSE 9503
// AddMedal ( med3 , 1 ) else
9491: LD_STRING med3
9493: PPUSH
9494: LD_INT 1
9496: PPUSH
9497: CALL_OW 101
9501: GO 9514
// AddMedal ( med3 , - 1 ) ;
9503: LD_STRING med3
9505: PPUSH
9506: LD_INT 1
9508: NEG
9509: PPUSH
9510: CALL_OW 101
// GiveMedals ( MAIN ) ;
9514: LD_STRING MAIN
9516: PPUSH
9517: CALL_OW 102
// SaveCharacters ( tmp , 02_ape ) ;
9521: LD_VAR 0 1
9525: PPUSH
9526: LD_STRING 02_ape
9528: PPUSH
9529: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
9533: LD_ADDR_VAR 0 1
9537: PUSH
9538: LD_INT 22
9540: PUSH
9541: LD_INT 2
9543: PUSH
9544: EMPTY
9545: LIST
9546: LIST
9547: PUSH
9548: LD_INT 23
9550: PUSH
9551: LD_INT 2
9553: PUSH
9554: EMPTY
9555: LIST
9556: LIST
9557: PUSH
9558: LD_INT 21
9560: PUSH
9561: LD_INT 1
9563: PUSH
9564: EMPTY
9565: LIST
9566: LIST
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: LIST
9572: PPUSH
9573: CALL_OW 69
9577: ST_TO_ADDR
// RewardPeople ( tmp ) ;
9578: LD_VAR 0 1
9582: PPUSH
9583: CALL_OW 43
// SaveCharacters ( Heike , 02_Heike ) ;
9587: LD_EXP 21
9591: PPUSH
9592: LD_STRING 02_Heike
9594: PPUSH
9595: CALL_OW 38
// SaveCharacters ( Aviradze , 02_Aviradze ) ;
9599: LD_EXP 25
9603: PPUSH
9604: LD_STRING 02_Aviradze
9606: PPUSH
9607: CALL_OW 38
// if Givi then
9611: LD_EXP 22
9615: IFFALSE 9629
// SaveCharacters ( Givi , 02_Givi ) ;
9617: LD_EXP 22
9621: PPUSH
9622: LD_STRING 02_Givi
9624: PPUSH
9625: CALL_OW 38
// if Mike then
9629: LD_EXP 23
9633: IFFALSE 9647
// SaveCharacters ( Mike , 02_Mike ) ;
9635: LD_EXP 23
9639: PPUSH
9640: LD_STRING 02_Mike
9642: PPUSH
9643: CALL_OW 38
// if Kamil then
9647: LD_EXP 24
9651: IFFALSE 9665
// SaveCharacters ( Kamil , 02_Kamil ) ;
9653: LD_EXP 24
9657: PPUSH
9658: LD_STRING 02_Kamil
9660: PPUSH
9661: CALL_OW 38
// if Kaia then
9665: LD_EXP 26
9669: IFFALSE 9683
// SaveCharacters ( Kaia , 02_Kaia ) ;
9671: LD_EXP 26
9675: PPUSH
9676: LD_STRING 02_Kaia
9678: PPUSH
9679: CALL_OW 38
// if Sophia then
9683: LD_EXP 27
9687: IFFALSE 9701
// SaveCharacters ( Sophia , 02_Sophia ) ;
9689: LD_EXP 27
9693: PPUSH
9694: LD_STRING 02_Sophia
9696: PPUSH
9697: CALL_OW 38
// if Markov then
9701: LD_EXP 28
9705: IFFALSE 9719
// SaveCharacters ( Markov , 02_Markov ) ;
9707: LD_EXP 28
9711: PPUSH
9712: LD_STRING 02_Markov
9714: PPUSH
9715: CALL_OW 38
// if tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] then
9719: LD_VAR 0 1
9723: PUSH
9724: LD_EXP 21
9728: PUSH
9729: LD_EXP 25
9733: PUSH
9734: LD_EXP 22
9738: PUSH
9739: LD_EXP 23
9743: PUSH
9744: LD_EXP 24
9748: PUSH
9749: LD_EXP 27
9753: PUSH
9754: LD_EXP 26
9758: PUSH
9759: LD_EXP 28
9763: PUSH
9764: EMPTY
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: DIFF
9774: IFFALSE 9839
// SaveCharacters ( tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] , 02_others ) ;
9776: LD_VAR 0 1
9780: PUSH
9781: LD_EXP 21
9785: PUSH
9786: LD_EXP 25
9790: PUSH
9791: LD_EXP 22
9795: PUSH
9796: LD_EXP 23
9800: PUSH
9801: LD_EXP 24
9805: PUSH
9806: LD_EXP 27
9810: PUSH
9811: LD_EXP 26
9815: PUSH
9816: LD_EXP 28
9820: PUSH
9821: EMPTY
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: DIFF
9831: PPUSH
9832: LD_STRING 02_others
9834: PPUSH
9835: CALL_OW 38
// YouWin ;
9839: CALL_OW 103
// InGameOff ;
9843: CALL_OW 9
// end ;
9847: PPOPN 1
9849: END
// every 0 0$1 trigger tick > timeUntilFarmer and aviradzeSpotted do
9850: LD_OWVAR 1
9854: PUSH
9855: LD_EXP 11
9859: GREATER
9860: PUSH
9861: LD_EXP 4
9865: AND
9866: IFFALSE 9906
9868: GO 9870
9870: DISABLE
// begin InGameOn ;
9871: CALL_OW 8
// PrepareFarmer ;
9875: CALL 10506 0 0
// CenterNowOnUnits ( Farmer ) ;
9879: LD_EXP 29
9883: PPUSH
9884: CALL_OW 87
// wait ( 0 0$2 ) ;
9888: LD_INT 70
9890: PPUSH
9891: CALL_OW 67
// YouLost ( Farmer ) ;
9895: LD_STRING Farmer
9897: PPUSH
9898: CALL_OW 104
// InGameOff ;
9902: CALL_OW 9
// end ; end_of_file
9906: END
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer ; export function PrepareArabian ; var un , veh ; begin
9907: LD_INT 0
9909: PPUSH
9910: PPUSH
9911: PPUSH
// uc_side := 2 ;
9912: LD_ADDR_OWVAR 20
9916: PUSH
9917: LD_INT 2
9919: ST_TO_ADDR
// uc_nation := 2 ;
9920: LD_ADDR_OWVAR 21
9924: PUSH
9925: LD_INT 2
9927: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
9928: LD_ADDR_EXP 21
9932: PUSH
9933: LD_STRING Heike
9935: PPUSH
9936: LD_EXP 1
9940: NOT
9941: PPUSH
9942: LD_EXP 2
9946: PPUSH
9947: CALL 221 0 3
9951: ST_TO_ADDR
// PlaceUnitXY ( Heike , 83 , 72 , false ) ;
9952: LD_EXP 21
9956: PPUSH
9957: LD_INT 83
9959: PPUSH
9960: LD_INT 72
9962: PPUSH
9963: LD_INT 0
9965: PPUSH
9966: CALL_OW 48
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
9970: LD_ADDR_EXP 22
9974: PUSH
9975: LD_STRING Givi
9977: PPUSH
9978: LD_EXP 1
9982: NOT
9983: PPUSH
9984: LD_EXP 2
9988: PPUSH
9989: CALL 221 0 3
9993: ST_TO_ADDR
// if Givi then
9994: LD_EXP 22
9998: IFFALSE 10018
// PlaceUnitXY ( Givi , 87 , 76 , false ) ;
10000: LD_EXP 22
10004: PPUSH
10005: LD_INT 87
10007: PPUSH
10008: LD_INT 76
10010: PPUSH
10011: LD_INT 0
10013: PPUSH
10014: CALL_OW 48
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
10018: LD_ADDR_EXP 23
10022: PUSH
10023: LD_STRING Mike
10025: PPUSH
10026: LD_EXP 1
10030: NOT
10031: PPUSH
10032: LD_EXP 2
10036: PPUSH
10037: CALL 221 0 3
10041: ST_TO_ADDR
// if Mike then
10042: LD_EXP 23
10046: IFFALSE 10066
// PlaceUnitXY ( Mike , 84 , 76 , false ) ;
10048: LD_EXP 23
10052: PPUSH
10053: LD_INT 84
10055: PPUSH
10056: LD_INT 76
10058: PPUSH
10059: LD_INT 0
10061: PPUSH
10062: CALL_OW 48
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
10066: LD_ADDR_EXP 24
10070: PUSH
10071: LD_STRING Kamil
10073: PPUSH
10074: LD_EXP 1
10078: NOT
10079: PPUSH
10080: LD_EXP 2
10084: PPUSH
10085: CALL 221 0 3
10089: ST_TO_ADDR
// if Kamil then
10090: LD_EXP 24
10094: IFFALSE 10114
// PlaceUnitXY ( Kamil , 85 , 78 , false ) ;
10096: LD_EXP 24
10100: PPUSH
10101: LD_INT 85
10103: PPUSH
10104: LD_INT 78
10106: PPUSH
10107: LD_INT 0
10109: PPUSH
10110: CALL_OW 48
// uc_side := 5 ;
10114: LD_ADDR_OWVAR 20
10118: PUSH
10119: LD_INT 5
10121: ST_TO_ADDR
// uc_nation := 2 ;
10122: LD_ADDR_OWVAR 21
10126: PUSH
10127: LD_INT 2
10129: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , false ,  ) ;
10130: LD_ADDR_EXP 25
10134: PUSH
10135: LD_STRING Aviradze
10137: PPUSH
10138: LD_INT 0
10140: PPUSH
10141: LD_STRING 
10143: PPUSH
10144: CALL 221 0 3
10148: ST_TO_ADDR
// PlaceUnitXY ( Aviradze , 106 , 38 , false ) ;
10149: LD_EXP 25
10153: PPUSH
10154: LD_INT 106
10156: PPUSH
10157: LD_INT 38
10159: PPUSH
10160: LD_INT 0
10162: PPUSH
10163: CALL_OW 48
// ComTurnXY ( Aviradze , 103 , 38 ) ;
10167: LD_EXP 25
10171: PPUSH
10172: LD_INT 103
10174: PPUSH
10175: LD_INT 38
10177: PPUSH
10178: CALL_OW 118
// Kaia := PrepareUnit ( Kaia , false ,  ) ;
10182: LD_ADDR_EXP 26
10186: PUSH
10187: LD_STRING Kaia
10189: PPUSH
10190: LD_INT 0
10192: PPUSH
10193: LD_STRING 
10195: PPUSH
10196: CALL 221 0 3
10200: ST_TO_ADDR
// PlaceUnitXY ( Kaia , 100 , 34 , false ) ;
10201: LD_EXP 26
10205: PPUSH
10206: LD_INT 100
10208: PPUSH
10209: LD_INT 34
10211: PPUSH
10212: LD_INT 0
10214: PPUSH
10215: CALL_OW 48
// ComTurnXY ( Kaia , 100 , 39 ) ;
10219: LD_EXP 26
10223: PPUSH
10224: LD_INT 100
10226: PPUSH
10227: LD_INT 39
10229: PPUSH
10230: CALL_OW 118
// Sophia := PrepareUnit ( Sophia , false ,  ) ;
10234: LD_ADDR_EXP 27
10238: PUSH
10239: LD_STRING Sophia
10241: PPUSH
10242: LD_INT 0
10244: PPUSH
10245: LD_STRING 
10247: PPUSH
10248: CALL 221 0 3
10252: ST_TO_ADDR
// PlaceUnitXY ( Sophia , 109 , 50 , false ) ;
10253: LD_EXP 27
10257: PPUSH
10258: LD_INT 109
10260: PPUSH
10261: LD_INT 50
10263: PPUSH
10264: LD_INT 0
10266: PPUSH
10267: CALL_OW 48
// ComTurnXY ( Sophia , 100 , 39 ) ;
10271: LD_EXP 27
10275: PPUSH
10276: LD_INT 100
10278: PPUSH
10279: LD_INT 39
10281: PPUSH
10282: CALL_OW 118
// Markov := PrepareUnit ( Markov , false ,  ) ;
10286: LD_ADDR_EXP 28
10290: PUSH
10291: LD_STRING Markov
10293: PPUSH
10294: LD_INT 0
10296: PPUSH
10297: LD_STRING 
10299: PPUSH
10300: CALL 221 0 3
10304: ST_TO_ADDR
// PrepareTank ( 5 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , [ 90 , 70 , 60 ] [ Difficulty ] ) ;
10305: LD_INT 5
10307: PPUSH
10308: LD_INT 3
10310: PPUSH
10311: LD_INT 21
10313: PPUSH
10314: LD_INT 1
10316: PPUSH
10317: LD_INT 1
10319: PPUSH
10320: LD_INT 42
10322: PPUSH
10323: LD_INT 90
10325: PUSH
10326: LD_INT 70
10328: PUSH
10329: LD_INT 60
10331: PUSH
10332: EMPTY
10333: LIST
10334: LIST
10335: LIST
10336: PUSH
10337: LD_OWVAR 67
10341: ARRAY
10342: PPUSH
10343: CALL 284 0 7
// veh := CreateVehicle ;
10347: LD_ADDR_VAR 0 3
10351: PUSH
10352: CALL_OW 45
10356: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
10357: LD_VAR 0 3
10361: PPUSH
10362: LD_INT 4
10364: PPUSH
10365: CALL_OW 233
// PlaceUnitXY ( veh , 109 , 38 , false ) ;
10369: LD_VAR 0 3
10373: PPUSH
10374: LD_INT 109
10376: PPUSH
10377: LD_INT 38
10379: PPUSH
10380: LD_INT 0
10382: PPUSH
10383: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
10387: LD_EXP 28
10391: PPUSH
10392: LD_VAR 0 3
10396: PPUSH
10397: CALL_OW 52
// ComTurnUnit ( Kaia , Aviradze ) ;
10401: LD_EXP 26
10405: PPUSH
10406: LD_EXP 25
10410: PPUSH
10411: CALL_OW 119
// ComTurnUnit ( Aviradze , Kaia ) ;
10415: LD_EXP 25
10419: PPUSH
10420: LD_EXP 26
10424: PPUSH
10425: CALL_OW 119
// if not Givi or not Mike then
10429: LD_EXP 22
10433: NOT
10434: PUSH
10435: LD_EXP 23
10439: NOT
10440: OR
10441: IFFALSE 10501
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
10443: LD_INT 1
10445: PPUSH
10446: LD_INT 1
10448: PPUSH
10449: LD_INT 1
10451: PPUSH
10452: CALL_OW 380
// un := CreateHuman ;
10456: LD_ADDR_VAR 0 2
10460: PUSH
10461: CALL_OW 44
10465: ST_TO_ADDR
// PlaceUnitXYR ( un , 112 , 40 , 3 , false ) ;
10466: LD_VAR 0 2
10470: PPUSH
10471: LD_INT 112
10473: PPUSH
10474: LD_INT 40
10476: PPUSH
10477: LD_INT 3
10479: PPUSH
10480: LD_INT 0
10482: PPUSH
10483: CALL_OW 50
// ComTurnUnit ( un , Aviradze ) ;
10487: LD_VAR 0 2
10491: PPUSH
10492: LD_EXP 25
10496: PPUSH
10497: CALL_OW 119
// end ; end ;
10501: LD_VAR 0 1
10505: RET
// export function PrepareFarmer ; var i ; begin
10506: LD_INT 0
10508: PPUSH
10509: PPUSH
// uc_side := 5 ;
10510: LD_ADDR_OWVAR 20
10514: PUSH
10515: LD_INT 5
10517: ST_TO_ADDR
// uc_nation := 2 ;
10518: LD_ADDR_OWVAR 21
10522: PUSH
10523: LD_INT 2
10525: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
10526: LD_ADDR_EXP 29
10530: PUSH
10531: LD_STRING Farmer
10533: PPUSH
10534: LD_INT 0
10536: PPUSH
10537: LD_STRING 
10539: PPUSH
10540: CALL 221 0 3
10544: ST_TO_ADDR
// PlaceUnitXY ( Farmer , 106 , 62 , false ) ;
10545: LD_EXP 29
10549: PPUSH
10550: LD_INT 106
10552: PPUSH
10553: LD_INT 62
10555: PPUSH
10556: LD_INT 0
10558: PPUSH
10559: CALL_OW 48
// for i := 1 to 2 do
10563: LD_ADDR_VAR 0 2
10567: PUSH
10568: DOUBLE
10569: LD_INT 1
10571: DEC
10572: ST_TO_ADDR
10573: LD_INT 2
10575: PUSH
10576: FOR_TO
10577: IFFALSE 10615
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
10579: LD_INT 1
10581: PPUSH
10582: LD_INT 1
10584: PPUSH
10585: LD_INT 1
10587: PPUSH
10588: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 105 , 64 , 2 , false ) ;
10592: CALL_OW 44
10596: PPUSH
10597: LD_INT 105
10599: PPUSH
10600: LD_INT 64
10602: PPUSH
10603: LD_INT 2
10605: PPUSH
10606: LD_INT 0
10608: PPUSH
10609: CALL_OW 50
// end ;
10613: GO 10576
10615: POP
10616: POP
// end ; end_of_file
10617: LD_VAR 0 1
10621: RET
// every 2 2$20 + 0 0$10 do
10622: GO 10624
10624: DISABLE
// begin enable ;
10625: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , forest , true ) ;
10626: LD_INT 1
10628: PPUSH
10629: LD_INT 5
10631: PPUSH
10632: CALL_OW 12
10636: PPUSH
10637: LD_INT 1
10639: PPUSH
10640: LD_INT 1
10642: PPUSH
10643: CALL_OW 55
// end ; end_of_file
10647: END
// on UnitDestroyed ( un ) do begin if un = Heike then
10648: LD_VAR 0 1
10652: PUSH
10653: LD_EXP 21
10657: EQUAL
10658: IFFALSE 10667
// YouLost ( Heike ) ;
10660: LD_STRING Heike
10662: PPUSH
10663: CALL_OW 104
// if un = Aviradze then
10667: LD_VAR 0 1
10671: PUSH
10672: LD_EXP 25
10676: EQUAL
10677: IFFALSE 10686
// YouLost ( Aviradze ) ;
10679: LD_STRING Aviradze
10681: PPUSH
10682: CALL_OW 104
// if un = usLab then
10686: LD_VAR 0 1
10690: PUSH
10691: LD_INT 3
10693: EQUAL
10694: IFFALSE 10703
// YouLost ( Lab ) ;
10696: LD_STRING Lab
10698: PPUSH
10699: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) diff [ Heike , Aviradze ] and aviradzeSpotted then
10703: LD_VAR 0 1
10707: PUSH
10708: LD_INT 22
10710: PUSH
10711: LD_INT 2
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: PUSH
10718: LD_INT 21
10720: PUSH
10721: LD_INT 1
10723: PUSH
10724: EMPTY
10725: LIST
10726: LIST
10727: PUSH
10728: LD_INT 23
10730: PUSH
10731: LD_INT 2
10733: PUSH
10734: EMPTY
10735: LIST
10736: LIST
10737: PUSH
10738: EMPTY
10739: LIST
10740: LIST
10741: LIST
10742: PPUSH
10743: CALL_OW 69
10747: PUSH
10748: LD_EXP 21
10752: PUSH
10753: LD_EXP 25
10757: PUSH
10758: EMPTY
10759: LIST
10760: LIST
10761: DIFF
10762: IN
10763: PUSH
10764: LD_EXP 4
10768: AND
10769: IFFALSE 10785
// lostCounter := lostCounter + 1 ;
10771: LD_ADDR_EXP 16
10775: PUSH
10776: LD_EXP 16
10780: PUSH
10781: LD_INT 1
10783: PLUS
10784: ST_TO_ADDR
// end ;
10785: PPOPN 1
10787: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in usSci and killerSide = 2 then
10788: LD_VAR 0 1
10792: PUSH
10793: LD_EXP 20
10797: IN
10798: PUSH
10799: LD_VAR 0 2
10803: PUSH
10804: LD_INT 2
10806: EQUAL
10807: AND
10808: IFFALSE 10824
// sciCounterKill := sciCounterKill + 1 ;
10810: LD_ADDR_EXP 8
10814: PUSH
10815: LD_EXP 8
10819: PUSH
10820: LD_INT 1
10822: PLUS
10823: ST_TO_ADDR
// end ;
10824: PPOPN 3
10826: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
10827: LD_VAR 0 1
10831: PUSH
10832: LD_INT 2
10834: EQUAL
10835: PUSH
10836: LD_VAR 0 2
10840: PUSH
10841: LD_INT 5
10843: EQUAL
10844: AND
10845: IFFALSE 10854
// YouLost ( FriendlyFire ) ;
10847: LD_STRING FriendlyFire
10849: PPUSH
10850: CALL_OW 104
// end ; end_of_file
10854: PPOPN 2
10856: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
10857: GO 10859
10859: DISABLE
// begin ru_radar := 98 ;
10860: LD_ADDR_EXP 30
10864: PUSH
10865: LD_INT 98
10867: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
10868: LD_ADDR_EXP 31
10872: PUSH
10873: LD_INT 89
10875: ST_TO_ADDR
// us_hack := 99 ;
10876: LD_ADDR_EXP 32
10880: PUSH
10881: LD_INT 99
10883: ST_TO_ADDR
// us_artillery := 97 ;
10884: LD_ADDR_EXP 33
10888: PUSH
10889: LD_INT 97
10891: ST_TO_ADDR
// ar_bio_bomb := 91 ;
10892: LD_ADDR_EXP 34
10896: PUSH
10897: LD_INT 91
10899: ST_TO_ADDR
// end ; end_of_file end_of_file
10900: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
10901: GO 10903
10903: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
10904: LD_STRING initStreamRollete();
10906: PPUSH
10907: CALL_OW 559
// InitStreamMode ;
10911: CALL 10920 0 0
// DefineStreamItems ( ) ;
10915: CALL 11360 0 0
// end ;
10919: END
// function InitStreamMode ; begin
10920: LD_INT 0
10922: PPUSH
// streamModeActive := false ;
10923: LD_ADDR_EXP 35
10927: PUSH
10928: LD_INT 0
10930: ST_TO_ADDR
// normalCounter := 36 ;
10931: LD_ADDR_EXP 36
10935: PUSH
10936: LD_INT 36
10938: ST_TO_ADDR
// hardcoreCounter := 16 ;
10939: LD_ADDR_EXP 37
10943: PUSH
10944: LD_INT 16
10946: ST_TO_ADDR
// sRocket := false ;
10947: LD_ADDR_EXP 40
10951: PUSH
10952: LD_INT 0
10954: ST_TO_ADDR
// sSpeed := false ;
10955: LD_ADDR_EXP 39
10959: PUSH
10960: LD_INT 0
10962: ST_TO_ADDR
// sEngine := false ;
10963: LD_ADDR_EXP 41
10967: PUSH
10968: LD_INT 0
10970: ST_TO_ADDR
// sSpec := false ;
10971: LD_ADDR_EXP 38
10975: PUSH
10976: LD_INT 0
10978: ST_TO_ADDR
// sLevel := false ;
10979: LD_ADDR_EXP 42
10983: PUSH
10984: LD_INT 0
10986: ST_TO_ADDR
// sArmoury := false ;
10987: LD_ADDR_EXP 43
10991: PUSH
10992: LD_INT 0
10994: ST_TO_ADDR
// sRadar := false ;
10995: LD_ADDR_EXP 44
10999: PUSH
11000: LD_INT 0
11002: ST_TO_ADDR
// sBunker := false ;
11003: LD_ADDR_EXP 45
11007: PUSH
11008: LD_INT 0
11010: ST_TO_ADDR
// sHack := false ;
11011: LD_ADDR_EXP 46
11015: PUSH
11016: LD_INT 0
11018: ST_TO_ADDR
// sFire := false ;
11019: LD_ADDR_EXP 47
11023: PUSH
11024: LD_INT 0
11026: ST_TO_ADDR
// sRefresh := false ;
11027: LD_ADDR_EXP 48
11031: PUSH
11032: LD_INT 0
11034: ST_TO_ADDR
// sExp := false ;
11035: LD_ADDR_EXP 49
11039: PUSH
11040: LD_INT 0
11042: ST_TO_ADDR
// sDepot := false ;
11043: LD_ADDR_EXP 50
11047: PUSH
11048: LD_INT 0
11050: ST_TO_ADDR
// sFlag := false ;
11051: LD_ADDR_EXP 51
11055: PUSH
11056: LD_INT 0
11058: ST_TO_ADDR
// sKamikadze := false ;
11059: LD_ADDR_EXP 59
11063: PUSH
11064: LD_INT 0
11066: ST_TO_ADDR
// sTroll := false ;
11067: LD_ADDR_EXP 60
11071: PUSH
11072: LD_INT 0
11074: ST_TO_ADDR
// sSlow := false ;
11075: LD_ADDR_EXP 61
11079: PUSH
11080: LD_INT 0
11082: ST_TO_ADDR
// sLack := false ;
11083: LD_ADDR_EXP 62
11087: PUSH
11088: LD_INT 0
11090: ST_TO_ADDR
// sTank := false ;
11091: LD_ADDR_EXP 64
11095: PUSH
11096: LD_INT 0
11098: ST_TO_ADDR
// sRemote := false ;
11099: LD_ADDR_EXP 65
11103: PUSH
11104: LD_INT 0
11106: ST_TO_ADDR
// sPowell := false ;
11107: LD_ADDR_EXP 66
11111: PUSH
11112: LD_INT 0
11114: ST_TO_ADDR
// sTeleport := false ;
11115: LD_ADDR_EXP 69
11119: PUSH
11120: LD_INT 0
11122: ST_TO_ADDR
// sOilTower := false ;
11123: LD_ADDR_EXP 71
11127: PUSH
11128: LD_INT 0
11130: ST_TO_ADDR
// sShovel := false ;
11131: LD_ADDR_EXP 72
11135: PUSH
11136: LD_INT 0
11138: ST_TO_ADDR
// sSheik := false ;
11139: LD_ADDR_EXP 73
11143: PUSH
11144: LD_INT 0
11146: ST_TO_ADDR
// sEarthquake := false ;
11147: LD_ADDR_EXP 75
11151: PUSH
11152: LD_INT 0
11154: ST_TO_ADDR
// sAI := false ;
11155: LD_ADDR_EXP 76
11159: PUSH
11160: LD_INT 0
11162: ST_TO_ADDR
// sCargo := false ;
11163: LD_ADDR_EXP 79
11167: PUSH
11168: LD_INT 0
11170: ST_TO_ADDR
// sDLaser := false ;
11171: LD_ADDR_EXP 80
11175: PUSH
11176: LD_INT 0
11178: ST_TO_ADDR
// sExchange := false ;
11179: LD_ADDR_EXP 81
11183: PUSH
11184: LD_INT 0
11186: ST_TO_ADDR
// sFac := false ;
11187: LD_ADDR_EXP 82
11191: PUSH
11192: LD_INT 0
11194: ST_TO_ADDR
// sPower := false ;
11195: LD_ADDR_EXP 83
11199: PUSH
11200: LD_INT 0
11202: ST_TO_ADDR
// sRandom := false ;
11203: LD_ADDR_EXP 84
11207: PUSH
11208: LD_INT 0
11210: ST_TO_ADDR
// sShield := false ;
11211: LD_ADDR_EXP 85
11215: PUSH
11216: LD_INT 0
11218: ST_TO_ADDR
// sTime := false ;
11219: LD_ADDR_EXP 86
11223: PUSH
11224: LD_INT 0
11226: ST_TO_ADDR
// sTools := false ;
11227: LD_ADDR_EXP 87
11231: PUSH
11232: LD_INT 0
11234: ST_TO_ADDR
// sSold := false ;
11235: LD_ADDR_EXP 52
11239: PUSH
11240: LD_INT 0
11242: ST_TO_ADDR
// sDiff := false ;
11243: LD_ADDR_EXP 53
11247: PUSH
11248: LD_INT 0
11250: ST_TO_ADDR
// sFog := false ;
11251: LD_ADDR_EXP 56
11255: PUSH
11256: LD_INT 0
11258: ST_TO_ADDR
// sReset := false ;
11259: LD_ADDR_EXP 57
11263: PUSH
11264: LD_INT 0
11266: ST_TO_ADDR
// sSun := false ;
11267: LD_ADDR_EXP 58
11271: PUSH
11272: LD_INT 0
11274: ST_TO_ADDR
// sTiger := false ;
11275: LD_ADDR_EXP 54
11279: PUSH
11280: LD_INT 0
11282: ST_TO_ADDR
// sBomb := false ;
11283: LD_ADDR_EXP 55
11287: PUSH
11288: LD_INT 0
11290: ST_TO_ADDR
// sWound := false ;
11291: LD_ADDR_EXP 63
11295: PUSH
11296: LD_INT 0
11298: ST_TO_ADDR
// sBetray := false ;
11299: LD_ADDR_EXP 67
11303: PUSH
11304: LD_INT 0
11306: ST_TO_ADDR
// sContamin := false ;
11307: LD_ADDR_EXP 68
11311: PUSH
11312: LD_INT 0
11314: ST_TO_ADDR
// sOil := false ;
11315: LD_ADDR_EXP 70
11319: PUSH
11320: LD_INT 0
11322: ST_TO_ADDR
// sStu := false ;
11323: LD_ADDR_EXP 74
11327: PUSH
11328: LD_INT 0
11330: ST_TO_ADDR
// sBazooka := false ;
11331: LD_ADDR_EXP 77
11335: PUSH
11336: LD_INT 0
11338: ST_TO_ADDR
// sMortar := false ;
11339: LD_ADDR_EXP 78
11343: PUSH
11344: LD_INT 0
11346: ST_TO_ADDR
// sRanger := false ;
11347: LD_ADDR_EXP 88
11351: PUSH
11352: LD_INT 0
11354: ST_TO_ADDR
// end ;
11355: LD_VAR 0 1
11359: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
11360: LD_INT 0
11362: PPUSH
11363: PPUSH
11364: PPUSH
11365: PPUSH
11366: PPUSH
// result := [ ] ;
11367: LD_ADDR_VAR 0 1
11371: PUSH
11372: EMPTY
11373: ST_TO_ADDR
// if campaign_id = 1 then
11374: LD_OWVAR 69
11378: PUSH
11379: LD_INT 1
11381: EQUAL
11382: IFFALSE 14320
// begin case mission_number of 1 :
11384: LD_OWVAR 70
11388: PUSH
11389: LD_INT 1
11391: DOUBLE
11392: EQUAL
11393: IFTRUE 11397
11395: GO 11461
11397: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
11398: LD_ADDR_VAR 0 1
11402: PUSH
11403: LD_INT 2
11405: PUSH
11406: LD_INT 4
11408: PUSH
11409: LD_INT 11
11411: PUSH
11412: LD_INT 12
11414: PUSH
11415: LD_INT 15
11417: PUSH
11418: LD_INT 16
11420: PUSH
11421: LD_INT 22
11423: PUSH
11424: LD_INT 23
11426: PUSH
11427: LD_INT 26
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: PUSH
11441: LD_INT 101
11443: PUSH
11444: LD_INT 102
11446: PUSH
11447: LD_INT 106
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: LIST
11454: PUSH
11455: EMPTY
11456: LIST
11457: LIST
11458: ST_TO_ADDR
11459: GO 14318
11461: LD_INT 2
11463: DOUBLE
11464: EQUAL
11465: IFTRUE 11469
11467: GO 11541
11469: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
11470: LD_ADDR_VAR 0 1
11474: PUSH
11475: LD_INT 2
11477: PUSH
11478: LD_INT 4
11480: PUSH
11481: LD_INT 11
11483: PUSH
11484: LD_INT 12
11486: PUSH
11487: LD_INT 15
11489: PUSH
11490: LD_INT 16
11492: PUSH
11493: LD_INT 22
11495: PUSH
11496: LD_INT 23
11498: PUSH
11499: LD_INT 26
11501: PUSH
11502: EMPTY
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: PUSH
11513: LD_INT 101
11515: PUSH
11516: LD_INT 102
11518: PUSH
11519: LD_INT 105
11521: PUSH
11522: LD_INT 106
11524: PUSH
11525: LD_INT 108
11527: PUSH
11528: EMPTY
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: ST_TO_ADDR
11539: GO 14318
11541: LD_INT 3
11543: DOUBLE
11544: EQUAL
11545: IFTRUE 11549
11547: GO 11625
11549: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
11550: LD_ADDR_VAR 0 1
11554: PUSH
11555: LD_INT 2
11557: PUSH
11558: LD_INT 4
11560: PUSH
11561: LD_INT 5
11563: PUSH
11564: LD_INT 11
11566: PUSH
11567: LD_INT 12
11569: PUSH
11570: LD_INT 15
11572: PUSH
11573: LD_INT 16
11575: PUSH
11576: LD_INT 22
11578: PUSH
11579: LD_INT 26
11581: PUSH
11582: LD_INT 36
11584: PUSH
11585: EMPTY
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: PUSH
11597: LD_INT 101
11599: PUSH
11600: LD_INT 102
11602: PUSH
11603: LD_INT 105
11605: PUSH
11606: LD_INT 106
11608: PUSH
11609: LD_INT 108
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: PUSH
11619: EMPTY
11620: LIST
11621: LIST
11622: ST_TO_ADDR
11623: GO 14318
11625: LD_INT 4
11627: DOUBLE
11628: EQUAL
11629: IFTRUE 11633
11631: GO 11717
11633: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
11634: LD_ADDR_VAR 0 1
11638: PUSH
11639: LD_INT 2
11641: PUSH
11642: LD_INT 4
11644: PUSH
11645: LD_INT 5
11647: PUSH
11648: LD_INT 8
11650: PUSH
11651: LD_INT 11
11653: PUSH
11654: LD_INT 12
11656: PUSH
11657: LD_INT 15
11659: PUSH
11660: LD_INT 16
11662: PUSH
11663: LD_INT 22
11665: PUSH
11666: LD_INT 23
11668: PUSH
11669: LD_INT 26
11671: PUSH
11672: LD_INT 36
11674: PUSH
11675: EMPTY
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: PUSH
11689: LD_INT 101
11691: PUSH
11692: LD_INT 102
11694: PUSH
11695: LD_INT 105
11697: PUSH
11698: LD_INT 106
11700: PUSH
11701: LD_INT 108
11703: PUSH
11704: EMPTY
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: PUSH
11711: EMPTY
11712: LIST
11713: LIST
11714: ST_TO_ADDR
11715: GO 14318
11717: LD_INT 5
11719: DOUBLE
11720: EQUAL
11721: IFTRUE 11725
11723: GO 11825
11725: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
11726: LD_ADDR_VAR 0 1
11730: PUSH
11731: LD_INT 2
11733: PUSH
11734: LD_INT 4
11736: PUSH
11737: LD_INT 5
11739: PUSH
11740: LD_INT 6
11742: PUSH
11743: LD_INT 8
11745: PUSH
11746: LD_INT 11
11748: PUSH
11749: LD_INT 12
11751: PUSH
11752: LD_INT 15
11754: PUSH
11755: LD_INT 16
11757: PUSH
11758: LD_INT 22
11760: PUSH
11761: LD_INT 23
11763: PUSH
11764: LD_INT 25
11766: PUSH
11767: LD_INT 26
11769: PUSH
11770: LD_INT 36
11772: PUSH
11773: EMPTY
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: PUSH
11789: LD_INT 101
11791: PUSH
11792: LD_INT 102
11794: PUSH
11795: LD_INT 105
11797: PUSH
11798: LD_INT 106
11800: PUSH
11801: LD_INT 108
11803: PUSH
11804: LD_INT 109
11806: PUSH
11807: LD_INT 112
11809: PUSH
11810: EMPTY
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: PUSH
11819: EMPTY
11820: LIST
11821: LIST
11822: ST_TO_ADDR
11823: GO 14318
11825: LD_INT 6
11827: DOUBLE
11828: EQUAL
11829: IFTRUE 11833
11831: GO 11953
11833: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
11834: LD_ADDR_VAR 0 1
11838: PUSH
11839: LD_INT 2
11841: PUSH
11842: LD_INT 4
11844: PUSH
11845: LD_INT 5
11847: PUSH
11848: LD_INT 6
11850: PUSH
11851: LD_INT 8
11853: PUSH
11854: LD_INT 11
11856: PUSH
11857: LD_INT 12
11859: PUSH
11860: LD_INT 15
11862: PUSH
11863: LD_INT 16
11865: PUSH
11866: LD_INT 20
11868: PUSH
11869: LD_INT 21
11871: PUSH
11872: LD_INT 22
11874: PUSH
11875: LD_INT 23
11877: PUSH
11878: LD_INT 25
11880: PUSH
11881: LD_INT 26
11883: PUSH
11884: LD_INT 30
11886: PUSH
11887: LD_INT 31
11889: PUSH
11890: LD_INT 32
11892: PUSH
11893: LD_INT 36
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: LIST
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: PUSH
11917: LD_INT 101
11919: PUSH
11920: LD_INT 102
11922: PUSH
11923: LD_INT 105
11925: PUSH
11926: LD_INT 106
11928: PUSH
11929: LD_INT 108
11931: PUSH
11932: LD_INT 109
11934: PUSH
11935: LD_INT 112
11937: PUSH
11938: EMPTY
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: PUSH
11947: EMPTY
11948: LIST
11949: LIST
11950: ST_TO_ADDR
11951: GO 14318
11953: LD_INT 7
11955: DOUBLE
11956: EQUAL
11957: IFTRUE 11961
11959: GO 12061
11961: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
11962: LD_ADDR_VAR 0 1
11966: PUSH
11967: LD_INT 2
11969: PUSH
11970: LD_INT 4
11972: PUSH
11973: LD_INT 5
11975: PUSH
11976: LD_INT 7
11978: PUSH
11979: LD_INT 11
11981: PUSH
11982: LD_INT 12
11984: PUSH
11985: LD_INT 15
11987: PUSH
11988: LD_INT 16
11990: PUSH
11991: LD_INT 20
11993: PUSH
11994: LD_INT 21
11996: PUSH
11997: LD_INT 22
11999: PUSH
12000: LD_INT 23
12002: PUSH
12003: LD_INT 25
12005: PUSH
12006: LD_INT 26
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: LIST
12019: LIST
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: PUSH
12025: LD_INT 101
12027: PUSH
12028: LD_INT 102
12030: PUSH
12031: LD_INT 103
12033: PUSH
12034: LD_INT 105
12036: PUSH
12037: LD_INT 106
12039: PUSH
12040: LD_INT 108
12042: PUSH
12043: LD_INT 112
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: PUSH
12055: EMPTY
12056: LIST
12057: LIST
12058: ST_TO_ADDR
12059: GO 14318
12061: LD_INT 8
12063: DOUBLE
12064: EQUAL
12065: IFTRUE 12069
12067: GO 12197
12069: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
12070: LD_ADDR_VAR 0 1
12074: PUSH
12075: LD_INT 2
12077: PUSH
12078: LD_INT 4
12080: PUSH
12081: LD_INT 5
12083: PUSH
12084: LD_INT 6
12086: PUSH
12087: LD_INT 7
12089: PUSH
12090: LD_INT 8
12092: PUSH
12093: LD_INT 11
12095: PUSH
12096: LD_INT 12
12098: PUSH
12099: LD_INT 15
12101: PUSH
12102: LD_INT 16
12104: PUSH
12105: LD_INT 20
12107: PUSH
12108: LD_INT 21
12110: PUSH
12111: LD_INT 22
12113: PUSH
12114: LD_INT 23
12116: PUSH
12117: LD_INT 25
12119: PUSH
12120: LD_INT 26
12122: PUSH
12123: LD_INT 30
12125: PUSH
12126: LD_INT 31
12128: PUSH
12129: LD_INT 32
12131: PUSH
12132: LD_INT 36
12134: PUSH
12135: EMPTY
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: PUSH
12157: LD_INT 101
12159: PUSH
12160: LD_INT 102
12162: PUSH
12163: LD_INT 103
12165: PUSH
12166: LD_INT 105
12168: PUSH
12169: LD_INT 106
12171: PUSH
12172: LD_INT 108
12174: PUSH
12175: LD_INT 109
12177: PUSH
12178: LD_INT 112
12180: PUSH
12181: EMPTY
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: ST_TO_ADDR
12195: GO 14318
12197: LD_INT 9
12199: DOUBLE
12200: EQUAL
12201: IFTRUE 12205
12203: GO 12341
12205: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
12206: LD_ADDR_VAR 0 1
12210: PUSH
12211: LD_INT 2
12213: PUSH
12214: LD_INT 4
12216: PUSH
12217: LD_INT 5
12219: PUSH
12220: LD_INT 6
12222: PUSH
12223: LD_INT 7
12225: PUSH
12226: LD_INT 8
12228: PUSH
12229: LD_INT 11
12231: PUSH
12232: LD_INT 12
12234: PUSH
12235: LD_INT 15
12237: PUSH
12238: LD_INT 16
12240: PUSH
12241: LD_INT 20
12243: PUSH
12244: LD_INT 21
12246: PUSH
12247: LD_INT 22
12249: PUSH
12250: LD_INT 23
12252: PUSH
12253: LD_INT 25
12255: PUSH
12256: LD_INT 26
12258: PUSH
12259: LD_INT 28
12261: PUSH
12262: LD_INT 30
12264: PUSH
12265: LD_INT 31
12267: PUSH
12268: LD_INT 32
12270: PUSH
12271: LD_INT 36
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: PUSH
12297: LD_INT 101
12299: PUSH
12300: LD_INT 102
12302: PUSH
12303: LD_INT 103
12305: PUSH
12306: LD_INT 105
12308: PUSH
12309: LD_INT 106
12311: PUSH
12312: LD_INT 108
12314: PUSH
12315: LD_INT 109
12317: PUSH
12318: LD_INT 112
12320: PUSH
12321: LD_INT 114
12323: PUSH
12324: EMPTY
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: LIST
12332: LIST
12333: LIST
12334: PUSH
12335: EMPTY
12336: LIST
12337: LIST
12338: ST_TO_ADDR
12339: GO 14318
12341: LD_INT 10
12343: DOUBLE
12344: EQUAL
12345: IFTRUE 12349
12347: GO 12533
12349: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
12350: LD_ADDR_VAR 0 1
12354: PUSH
12355: LD_INT 2
12357: PUSH
12358: LD_INT 4
12360: PUSH
12361: LD_INT 5
12363: PUSH
12364: LD_INT 6
12366: PUSH
12367: LD_INT 7
12369: PUSH
12370: LD_INT 8
12372: PUSH
12373: LD_INT 9
12375: PUSH
12376: LD_INT 10
12378: PUSH
12379: LD_INT 11
12381: PUSH
12382: LD_INT 12
12384: PUSH
12385: LD_INT 13
12387: PUSH
12388: LD_INT 14
12390: PUSH
12391: LD_INT 15
12393: PUSH
12394: LD_INT 16
12396: PUSH
12397: LD_INT 17
12399: PUSH
12400: LD_INT 18
12402: PUSH
12403: LD_INT 19
12405: PUSH
12406: LD_INT 20
12408: PUSH
12409: LD_INT 21
12411: PUSH
12412: LD_INT 22
12414: PUSH
12415: LD_INT 23
12417: PUSH
12418: LD_INT 24
12420: PUSH
12421: LD_INT 25
12423: PUSH
12424: LD_INT 26
12426: PUSH
12427: LD_INT 28
12429: PUSH
12430: LD_INT 30
12432: PUSH
12433: LD_INT 31
12435: PUSH
12436: LD_INT 32
12438: PUSH
12439: LD_INT 36
12441: PUSH
12442: EMPTY
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: PUSH
12473: LD_INT 101
12475: PUSH
12476: LD_INT 102
12478: PUSH
12479: LD_INT 103
12481: PUSH
12482: LD_INT 104
12484: PUSH
12485: LD_INT 105
12487: PUSH
12488: LD_INT 106
12490: PUSH
12491: LD_INT 107
12493: PUSH
12494: LD_INT 108
12496: PUSH
12497: LD_INT 109
12499: PUSH
12500: LD_INT 110
12502: PUSH
12503: LD_INT 111
12505: PUSH
12506: LD_INT 112
12508: PUSH
12509: LD_INT 114
12511: PUSH
12512: EMPTY
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: PUSH
12527: EMPTY
12528: LIST
12529: LIST
12530: ST_TO_ADDR
12531: GO 14318
12533: LD_INT 11
12535: DOUBLE
12536: EQUAL
12537: IFTRUE 12541
12539: GO 12733
12541: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
12542: LD_ADDR_VAR 0 1
12546: PUSH
12547: LD_INT 2
12549: PUSH
12550: LD_INT 3
12552: PUSH
12553: LD_INT 4
12555: PUSH
12556: LD_INT 5
12558: PUSH
12559: LD_INT 6
12561: PUSH
12562: LD_INT 7
12564: PUSH
12565: LD_INT 8
12567: PUSH
12568: LD_INT 9
12570: PUSH
12571: LD_INT 10
12573: PUSH
12574: LD_INT 11
12576: PUSH
12577: LD_INT 12
12579: PUSH
12580: LD_INT 13
12582: PUSH
12583: LD_INT 14
12585: PUSH
12586: LD_INT 15
12588: PUSH
12589: LD_INT 16
12591: PUSH
12592: LD_INT 17
12594: PUSH
12595: LD_INT 18
12597: PUSH
12598: LD_INT 19
12600: PUSH
12601: LD_INT 20
12603: PUSH
12604: LD_INT 21
12606: PUSH
12607: LD_INT 22
12609: PUSH
12610: LD_INT 23
12612: PUSH
12613: LD_INT 24
12615: PUSH
12616: LD_INT 25
12618: PUSH
12619: LD_INT 26
12621: PUSH
12622: LD_INT 28
12624: PUSH
12625: LD_INT 30
12627: PUSH
12628: LD_INT 31
12630: PUSH
12631: LD_INT 32
12633: PUSH
12634: LD_INT 34
12636: PUSH
12637: LD_INT 36
12639: PUSH
12640: EMPTY
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: PUSH
12673: LD_INT 101
12675: PUSH
12676: LD_INT 102
12678: PUSH
12679: LD_INT 103
12681: PUSH
12682: LD_INT 104
12684: PUSH
12685: LD_INT 105
12687: PUSH
12688: LD_INT 106
12690: PUSH
12691: LD_INT 107
12693: PUSH
12694: LD_INT 108
12696: PUSH
12697: LD_INT 109
12699: PUSH
12700: LD_INT 110
12702: PUSH
12703: LD_INT 111
12705: PUSH
12706: LD_INT 112
12708: PUSH
12709: LD_INT 114
12711: PUSH
12712: EMPTY
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: PUSH
12727: EMPTY
12728: LIST
12729: LIST
12730: ST_TO_ADDR
12731: GO 14318
12733: LD_INT 12
12735: DOUBLE
12736: EQUAL
12737: IFTRUE 12741
12739: GO 12949
12741: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
12742: LD_ADDR_VAR 0 1
12746: PUSH
12747: LD_INT 1
12749: PUSH
12750: LD_INT 2
12752: PUSH
12753: LD_INT 3
12755: PUSH
12756: LD_INT 4
12758: PUSH
12759: LD_INT 5
12761: PUSH
12762: LD_INT 6
12764: PUSH
12765: LD_INT 7
12767: PUSH
12768: LD_INT 8
12770: PUSH
12771: LD_INT 9
12773: PUSH
12774: LD_INT 10
12776: PUSH
12777: LD_INT 11
12779: PUSH
12780: LD_INT 12
12782: PUSH
12783: LD_INT 13
12785: PUSH
12786: LD_INT 14
12788: PUSH
12789: LD_INT 15
12791: PUSH
12792: LD_INT 16
12794: PUSH
12795: LD_INT 17
12797: PUSH
12798: LD_INT 18
12800: PUSH
12801: LD_INT 19
12803: PUSH
12804: LD_INT 20
12806: PUSH
12807: LD_INT 21
12809: PUSH
12810: LD_INT 22
12812: PUSH
12813: LD_INT 23
12815: PUSH
12816: LD_INT 24
12818: PUSH
12819: LD_INT 25
12821: PUSH
12822: LD_INT 26
12824: PUSH
12825: LD_INT 27
12827: PUSH
12828: LD_INT 28
12830: PUSH
12831: LD_INT 30
12833: PUSH
12834: LD_INT 31
12836: PUSH
12837: LD_INT 32
12839: PUSH
12840: LD_INT 33
12842: PUSH
12843: LD_INT 34
12845: PUSH
12846: LD_INT 36
12848: PUSH
12849: EMPTY
12850: LIST
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: LIST
12856: LIST
12857: LIST
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: LIST
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: PUSH
12885: LD_INT 101
12887: PUSH
12888: LD_INT 102
12890: PUSH
12891: LD_INT 103
12893: PUSH
12894: LD_INT 104
12896: PUSH
12897: LD_INT 105
12899: PUSH
12900: LD_INT 106
12902: PUSH
12903: LD_INT 107
12905: PUSH
12906: LD_INT 108
12908: PUSH
12909: LD_INT 109
12911: PUSH
12912: LD_INT 110
12914: PUSH
12915: LD_INT 111
12917: PUSH
12918: LD_INT 112
12920: PUSH
12921: LD_INT 113
12923: PUSH
12924: LD_INT 114
12926: PUSH
12927: EMPTY
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: PUSH
12943: EMPTY
12944: LIST
12945: LIST
12946: ST_TO_ADDR
12947: GO 14318
12949: LD_INT 13
12951: DOUBLE
12952: EQUAL
12953: IFTRUE 12957
12955: GO 13153
12957: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
12958: LD_ADDR_VAR 0 1
12962: PUSH
12963: LD_INT 1
12965: PUSH
12966: LD_INT 2
12968: PUSH
12969: LD_INT 3
12971: PUSH
12972: LD_INT 4
12974: PUSH
12975: LD_INT 5
12977: PUSH
12978: LD_INT 8
12980: PUSH
12981: LD_INT 9
12983: PUSH
12984: LD_INT 10
12986: PUSH
12987: LD_INT 11
12989: PUSH
12990: LD_INT 12
12992: PUSH
12993: LD_INT 14
12995: PUSH
12996: LD_INT 15
12998: PUSH
12999: LD_INT 16
13001: PUSH
13002: LD_INT 17
13004: PUSH
13005: LD_INT 18
13007: PUSH
13008: LD_INT 19
13010: PUSH
13011: LD_INT 20
13013: PUSH
13014: LD_INT 21
13016: PUSH
13017: LD_INT 22
13019: PUSH
13020: LD_INT 23
13022: PUSH
13023: LD_INT 24
13025: PUSH
13026: LD_INT 25
13028: PUSH
13029: LD_INT 26
13031: PUSH
13032: LD_INT 27
13034: PUSH
13035: LD_INT 28
13037: PUSH
13038: LD_INT 30
13040: PUSH
13041: LD_INT 31
13043: PUSH
13044: LD_INT 32
13046: PUSH
13047: LD_INT 33
13049: PUSH
13050: LD_INT 34
13052: PUSH
13053: LD_INT 36
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: LIST
13063: LIST
13064: LIST
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: LIST
13070: LIST
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: PUSH
13089: LD_INT 101
13091: PUSH
13092: LD_INT 102
13094: PUSH
13095: LD_INT 103
13097: PUSH
13098: LD_INT 104
13100: PUSH
13101: LD_INT 105
13103: PUSH
13104: LD_INT 106
13106: PUSH
13107: LD_INT 107
13109: PUSH
13110: LD_INT 108
13112: PUSH
13113: LD_INT 109
13115: PUSH
13116: LD_INT 110
13118: PUSH
13119: LD_INT 111
13121: PUSH
13122: LD_INT 112
13124: PUSH
13125: LD_INT 113
13127: PUSH
13128: LD_INT 114
13130: PUSH
13131: EMPTY
13132: LIST
13133: LIST
13134: LIST
13135: LIST
13136: LIST
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: LIST
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: ST_TO_ADDR
13151: GO 14318
13153: LD_INT 14
13155: DOUBLE
13156: EQUAL
13157: IFTRUE 13161
13159: GO 13373
13161: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
13162: LD_ADDR_VAR 0 1
13166: PUSH
13167: LD_INT 1
13169: PUSH
13170: LD_INT 2
13172: PUSH
13173: LD_INT 3
13175: PUSH
13176: LD_INT 4
13178: PUSH
13179: LD_INT 5
13181: PUSH
13182: LD_INT 6
13184: PUSH
13185: LD_INT 7
13187: PUSH
13188: LD_INT 8
13190: PUSH
13191: LD_INT 9
13193: PUSH
13194: LD_INT 10
13196: PUSH
13197: LD_INT 11
13199: PUSH
13200: LD_INT 12
13202: PUSH
13203: LD_INT 13
13205: PUSH
13206: LD_INT 14
13208: PUSH
13209: LD_INT 15
13211: PUSH
13212: LD_INT 16
13214: PUSH
13215: LD_INT 17
13217: PUSH
13218: LD_INT 18
13220: PUSH
13221: LD_INT 19
13223: PUSH
13224: LD_INT 20
13226: PUSH
13227: LD_INT 21
13229: PUSH
13230: LD_INT 22
13232: PUSH
13233: LD_INT 23
13235: PUSH
13236: LD_INT 24
13238: PUSH
13239: LD_INT 25
13241: PUSH
13242: LD_INT 26
13244: PUSH
13245: LD_INT 27
13247: PUSH
13248: LD_INT 28
13250: PUSH
13251: LD_INT 29
13253: PUSH
13254: LD_INT 30
13256: PUSH
13257: LD_INT 31
13259: PUSH
13260: LD_INT 32
13262: PUSH
13263: LD_INT 33
13265: PUSH
13266: LD_INT 34
13268: PUSH
13269: LD_INT 36
13271: PUSH
13272: EMPTY
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: LIST
13280: LIST
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: LIST
13286: LIST
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: PUSH
13309: LD_INT 101
13311: PUSH
13312: LD_INT 102
13314: PUSH
13315: LD_INT 103
13317: PUSH
13318: LD_INT 104
13320: PUSH
13321: LD_INT 105
13323: PUSH
13324: LD_INT 106
13326: PUSH
13327: LD_INT 107
13329: PUSH
13330: LD_INT 108
13332: PUSH
13333: LD_INT 109
13335: PUSH
13336: LD_INT 110
13338: PUSH
13339: LD_INT 111
13341: PUSH
13342: LD_INT 112
13344: PUSH
13345: LD_INT 113
13347: PUSH
13348: LD_INT 114
13350: PUSH
13351: EMPTY
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: PUSH
13367: EMPTY
13368: LIST
13369: LIST
13370: ST_TO_ADDR
13371: GO 14318
13373: LD_INT 15
13375: DOUBLE
13376: EQUAL
13377: IFTRUE 13381
13379: GO 13593
13381: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
13382: LD_ADDR_VAR 0 1
13386: PUSH
13387: LD_INT 1
13389: PUSH
13390: LD_INT 2
13392: PUSH
13393: LD_INT 3
13395: PUSH
13396: LD_INT 4
13398: PUSH
13399: LD_INT 5
13401: PUSH
13402: LD_INT 6
13404: PUSH
13405: LD_INT 7
13407: PUSH
13408: LD_INT 8
13410: PUSH
13411: LD_INT 9
13413: PUSH
13414: LD_INT 10
13416: PUSH
13417: LD_INT 11
13419: PUSH
13420: LD_INT 12
13422: PUSH
13423: LD_INT 13
13425: PUSH
13426: LD_INT 14
13428: PUSH
13429: LD_INT 15
13431: PUSH
13432: LD_INT 16
13434: PUSH
13435: LD_INT 17
13437: PUSH
13438: LD_INT 18
13440: PUSH
13441: LD_INT 19
13443: PUSH
13444: LD_INT 20
13446: PUSH
13447: LD_INT 21
13449: PUSH
13450: LD_INT 22
13452: PUSH
13453: LD_INT 23
13455: PUSH
13456: LD_INT 24
13458: PUSH
13459: LD_INT 25
13461: PUSH
13462: LD_INT 26
13464: PUSH
13465: LD_INT 27
13467: PUSH
13468: LD_INT 28
13470: PUSH
13471: LD_INT 29
13473: PUSH
13474: LD_INT 30
13476: PUSH
13477: LD_INT 31
13479: PUSH
13480: LD_INT 32
13482: PUSH
13483: LD_INT 33
13485: PUSH
13486: LD_INT 34
13488: PUSH
13489: LD_INT 36
13491: PUSH
13492: EMPTY
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: PUSH
13529: LD_INT 101
13531: PUSH
13532: LD_INT 102
13534: PUSH
13535: LD_INT 103
13537: PUSH
13538: LD_INT 104
13540: PUSH
13541: LD_INT 105
13543: PUSH
13544: LD_INT 106
13546: PUSH
13547: LD_INT 107
13549: PUSH
13550: LD_INT 108
13552: PUSH
13553: LD_INT 109
13555: PUSH
13556: LD_INT 110
13558: PUSH
13559: LD_INT 111
13561: PUSH
13562: LD_INT 112
13564: PUSH
13565: LD_INT 113
13567: PUSH
13568: LD_INT 114
13570: PUSH
13571: EMPTY
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: LIST
13585: LIST
13586: PUSH
13587: EMPTY
13588: LIST
13589: LIST
13590: ST_TO_ADDR
13591: GO 14318
13593: LD_INT 16
13595: DOUBLE
13596: EQUAL
13597: IFTRUE 13601
13599: GO 13725
13601: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
13602: LD_ADDR_VAR 0 1
13606: PUSH
13607: LD_INT 2
13609: PUSH
13610: LD_INT 4
13612: PUSH
13613: LD_INT 5
13615: PUSH
13616: LD_INT 7
13618: PUSH
13619: LD_INT 11
13621: PUSH
13622: LD_INT 12
13624: PUSH
13625: LD_INT 15
13627: PUSH
13628: LD_INT 16
13630: PUSH
13631: LD_INT 20
13633: PUSH
13634: LD_INT 21
13636: PUSH
13637: LD_INT 22
13639: PUSH
13640: LD_INT 23
13642: PUSH
13643: LD_INT 25
13645: PUSH
13646: LD_INT 26
13648: PUSH
13649: LD_INT 30
13651: PUSH
13652: LD_INT 31
13654: PUSH
13655: LD_INT 32
13657: PUSH
13658: LD_INT 33
13660: PUSH
13661: LD_INT 34
13663: PUSH
13664: EMPTY
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: PUSH
13685: LD_INT 101
13687: PUSH
13688: LD_INT 102
13690: PUSH
13691: LD_INT 103
13693: PUSH
13694: LD_INT 106
13696: PUSH
13697: LD_INT 108
13699: PUSH
13700: LD_INT 112
13702: PUSH
13703: LD_INT 113
13705: PUSH
13706: LD_INT 114
13708: PUSH
13709: EMPTY
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: ST_TO_ADDR
13723: GO 14318
13725: LD_INT 17
13727: DOUBLE
13728: EQUAL
13729: IFTRUE 13733
13731: GO 13945
13733: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
13734: LD_ADDR_VAR 0 1
13738: PUSH
13739: LD_INT 1
13741: PUSH
13742: LD_INT 2
13744: PUSH
13745: LD_INT 3
13747: PUSH
13748: LD_INT 4
13750: PUSH
13751: LD_INT 5
13753: PUSH
13754: LD_INT 6
13756: PUSH
13757: LD_INT 7
13759: PUSH
13760: LD_INT 8
13762: PUSH
13763: LD_INT 9
13765: PUSH
13766: LD_INT 10
13768: PUSH
13769: LD_INT 11
13771: PUSH
13772: LD_INT 12
13774: PUSH
13775: LD_INT 13
13777: PUSH
13778: LD_INT 14
13780: PUSH
13781: LD_INT 15
13783: PUSH
13784: LD_INT 16
13786: PUSH
13787: LD_INT 17
13789: PUSH
13790: LD_INT 18
13792: PUSH
13793: LD_INT 19
13795: PUSH
13796: LD_INT 20
13798: PUSH
13799: LD_INT 21
13801: PUSH
13802: LD_INT 22
13804: PUSH
13805: LD_INT 23
13807: PUSH
13808: LD_INT 24
13810: PUSH
13811: LD_INT 25
13813: PUSH
13814: LD_INT 26
13816: PUSH
13817: LD_INT 27
13819: PUSH
13820: LD_INT 28
13822: PUSH
13823: LD_INT 29
13825: PUSH
13826: LD_INT 30
13828: PUSH
13829: LD_INT 31
13831: PUSH
13832: LD_INT 32
13834: PUSH
13835: LD_INT 33
13837: PUSH
13838: LD_INT 34
13840: PUSH
13841: LD_INT 36
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: LIST
13848: LIST
13849: LIST
13850: LIST
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: PUSH
13881: LD_INT 101
13883: PUSH
13884: LD_INT 102
13886: PUSH
13887: LD_INT 103
13889: PUSH
13890: LD_INT 104
13892: PUSH
13893: LD_INT 105
13895: PUSH
13896: LD_INT 106
13898: PUSH
13899: LD_INT 107
13901: PUSH
13902: LD_INT 108
13904: PUSH
13905: LD_INT 109
13907: PUSH
13908: LD_INT 110
13910: PUSH
13911: LD_INT 111
13913: PUSH
13914: LD_INT 112
13916: PUSH
13917: LD_INT 113
13919: PUSH
13920: LD_INT 114
13922: PUSH
13923: EMPTY
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: LIST
13932: LIST
13933: LIST
13934: LIST
13935: LIST
13936: LIST
13937: LIST
13938: PUSH
13939: EMPTY
13940: LIST
13941: LIST
13942: ST_TO_ADDR
13943: GO 14318
13945: LD_INT 18
13947: DOUBLE
13948: EQUAL
13949: IFTRUE 13953
13951: GO 14089
13953: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
13954: LD_ADDR_VAR 0 1
13958: PUSH
13959: LD_INT 2
13961: PUSH
13962: LD_INT 4
13964: PUSH
13965: LD_INT 5
13967: PUSH
13968: LD_INT 7
13970: PUSH
13971: LD_INT 11
13973: PUSH
13974: LD_INT 12
13976: PUSH
13977: LD_INT 15
13979: PUSH
13980: LD_INT 16
13982: PUSH
13983: LD_INT 20
13985: PUSH
13986: LD_INT 21
13988: PUSH
13989: LD_INT 22
13991: PUSH
13992: LD_INT 23
13994: PUSH
13995: LD_INT 25
13997: PUSH
13998: LD_INT 26
14000: PUSH
14001: LD_INT 30
14003: PUSH
14004: LD_INT 31
14006: PUSH
14007: LD_INT 32
14009: PUSH
14010: LD_INT 33
14012: PUSH
14013: LD_INT 34
14015: PUSH
14016: LD_INT 35
14018: PUSH
14019: LD_INT 36
14021: PUSH
14022: EMPTY
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: PUSH
14045: LD_INT 101
14047: PUSH
14048: LD_INT 102
14050: PUSH
14051: LD_INT 103
14053: PUSH
14054: LD_INT 106
14056: PUSH
14057: LD_INT 108
14059: PUSH
14060: LD_INT 112
14062: PUSH
14063: LD_INT 113
14065: PUSH
14066: LD_INT 114
14068: PUSH
14069: LD_INT 115
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: PUSH
14083: EMPTY
14084: LIST
14085: LIST
14086: ST_TO_ADDR
14087: GO 14318
14089: LD_INT 19
14091: DOUBLE
14092: EQUAL
14093: IFTRUE 14097
14095: GO 14317
14097: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
14098: LD_ADDR_VAR 0 1
14102: PUSH
14103: LD_INT 1
14105: PUSH
14106: LD_INT 2
14108: PUSH
14109: LD_INT 3
14111: PUSH
14112: LD_INT 4
14114: PUSH
14115: LD_INT 5
14117: PUSH
14118: LD_INT 6
14120: PUSH
14121: LD_INT 7
14123: PUSH
14124: LD_INT 8
14126: PUSH
14127: LD_INT 9
14129: PUSH
14130: LD_INT 10
14132: PUSH
14133: LD_INT 11
14135: PUSH
14136: LD_INT 12
14138: PUSH
14139: LD_INT 13
14141: PUSH
14142: LD_INT 14
14144: PUSH
14145: LD_INT 15
14147: PUSH
14148: LD_INT 16
14150: PUSH
14151: LD_INT 17
14153: PUSH
14154: LD_INT 18
14156: PUSH
14157: LD_INT 19
14159: PUSH
14160: LD_INT 20
14162: PUSH
14163: LD_INT 21
14165: PUSH
14166: LD_INT 22
14168: PUSH
14169: LD_INT 23
14171: PUSH
14172: LD_INT 24
14174: PUSH
14175: LD_INT 25
14177: PUSH
14178: LD_INT 26
14180: PUSH
14181: LD_INT 27
14183: PUSH
14184: LD_INT 28
14186: PUSH
14187: LD_INT 29
14189: PUSH
14190: LD_INT 30
14192: PUSH
14193: LD_INT 31
14195: PUSH
14196: LD_INT 32
14198: PUSH
14199: LD_INT 33
14201: PUSH
14202: LD_INT 34
14204: PUSH
14205: LD_INT 35
14207: PUSH
14208: LD_INT 36
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: PUSH
14249: LD_INT 101
14251: PUSH
14252: LD_INT 102
14254: PUSH
14255: LD_INT 103
14257: PUSH
14258: LD_INT 104
14260: PUSH
14261: LD_INT 105
14263: PUSH
14264: LD_INT 106
14266: PUSH
14267: LD_INT 107
14269: PUSH
14270: LD_INT 108
14272: PUSH
14273: LD_INT 109
14275: PUSH
14276: LD_INT 110
14278: PUSH
14279: LD_INT 111
14281: PUSH
14282: LD_INT 112
14284: PUSH
14285: LD_INT 113
14287: PUSH
14288: LD_INT 114
14290: PUSH
14291: LD_INT 115
14293: PUSH
14294: EMPTY
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: PUSH
14311: EMPTY
14312: LIST
14313: LIST
14314: ST_TO_ADDR
14315: GO 14318
14317: POP
// end else
14318: GO 14355
// if campaign_id = 5 then
14320: LD_OWVAR 69
14324: PUSH
14325: LD_INT 5
14327: EQUAL
14328: IFFALSE 14355
// begin result := [ [ 1 , 2 ] , [ 100 ] ] ;
14330: LD_ADDR_VAR 0 1
14334: PUSH
14335: LD_INT 1
14337: PUSH
14338: LD_INT 2
14340: PUSH
14341: EMPTY
14342: LIST
14343: LIST
14344: PUSH
14345: LD_INT 100
14347: PUSH
14348: EMPTY
14349: LIST
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: ST_TO_ADDR
// end ; if result then
14355: LD_VAR 0 1
14359: IFFALSE 14648
// begin normal :=  ;
14361: LD_ADDR_VAR 0 3
14365: PUSH
14366: LD_STRING 
14368: ST_TO_ADDR
// hardcore :=  ;
14369: LD_ADDR_VAR 0 4
14373: PUSH
14374: LD_STRING 
14376: ST_TO_ADDR
// for i = 1 to normalCounter do
14377: LD_ADDR_VAR 0 5
14381: PUSH
14382: DOUBLE
14383: LD_INT 1
14385: DEC
14386: ST_TO_ADDR
14387: LD_EXP 36
14391: PUSH
14392: FOR_TO
14393: IFFALSE 14494
// begin tmp := 0 ;
14395: LD_ADDR_VAR 0 2
14399: PUSH
14400: LD_STRING 0
14402: ST_TO_ADDR
// if result [ 1 ] then
14403: LD_VAR 0 1
14407: PUSH
14408: LD_INT 1
14410: ARRAY
14411: IFFALSE 14476
// if result [ 1 ] [ 1 ] = i then
14413: LD_VAR 0 1
14417: PUSH
14418: LD_INT 1
14420: ARRAY
14421: PUSH
14422: LD_INT 1
14424: ARRAY
14425: PUSH
14426: LD_VAR 0 5
14430: EQUAL
14431: IFFALSE 14476
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14433: LD_ADDR_VAR 0 1
14437: PUSH
14438: LD_VAR 0 1
14442: PPUSH
14443: LD_INT 1
14445: PPUSH
14446: LD_VAR 0 1
14450: PUSH
14451: LD_INT 1
14453: ARRAY
14454: PPUSH
14455: LD_INT 1
14457: PPUSH
14458: CALL_OW 3
14462: PPUSH
14463: CALL_OW 1
14467: ST_TO_ADDR
// tmp := 1 ;
14468: LD_ADDR_VAR 0 2
14472: PUSH
14473: LD_STRING 1
14475: ST_TO_ADDR
// end ; normal := normal & tmp ;
14476: LD_ADDR_VAR 0 3
14480: PUSH
14481: LD_VAR 0 3
14485: PUSH
14486: LD_VAR 0 2
14490: STR
14491: ST_TO_ADDR
// end ;
14492: GO 14392
14494: POP
14495: POP
// for i = 1 to hardcoreCounter do
14496: LD_ADDR_VAR 0 5
14500: PUSH
14501: DOUBLE
14502: LD_INT 1
14504: DEC
14505: ST_TO_ADDR
14506: LD_EXP 37
14510: PUSH
14511: FOR_TO
14512: IFFALSE 14617
// begin tmp := 0 ;
14514: LD_ADDR_VAR 0 2
14518: PUSH
14519: LD_STRING 0
14521: ST_TO_ADDR
// if result [ 2 ] then
14522: LD_VAR 0 1
14526: PUSH
14527: LD_INT 2
14529: ARRAY
14530: IFFALSE 14599
// if result [ 2 ] [ 1 ] = 100 + i then
14532: LD_VAR 0 1
14536: PUSH
14537: LD_INT 2
14539: ARRAY
14540: PUSH
14541: LD_INT 1
14543: ARRAY
14544: PUSH
14545: LD_INT 100
14547: PUSH
14548: LD_VAR 0 5
14552: PLUS
14553: EQUAL
14554: IFFALSE 14599
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14556: LD_ADDR_VAR 0 1
14560: PUSH
14561: LD_VAR 0 1
14565: PPUSH
14566: LD_INT 2
14568: PPUSH
14569: LD_VAR 0 1
14573: PUSH
14574: LD_INT 2
14576: ARRAY
14577: PPUSH
14578: LD_INT 1
14580: PPUSH
14581: CALL_OW 3
14585: PPUSH
14586: CALL_OW 1
14590: ST_TO_ADDR
// tmp := 1 ;
14591: LD_ADDR_VAR 0 2
14595: PUSH
14596: LD_STRING 1
14598: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14599: LD_ADDR_VAR 0 4
14603: PUSH
14604: LD_VAR 0 4
14608: PUSH
14609: LD_VAR 0 2
14613: STR
14614: ST_TO_ADDR
// end ;
14615: GO 14511
14617: POP
14618: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
14619: LD_STRING getStreamItemsFromMission("
14621: PUSH
14622: LD_VAR 0 3
14626: STR
14627: PUSH
14628: LD_STRING ","
14630: STR
14631: PUSH
14632: LD_VAR 0 4
14636: STR
14637: PUSH
14638: LD_STRING ")
14640: STR
14641: PPUSH
14642: CALL_OW 559
// end else
14646: GO 14655
// ToLua ( getStreamItemsFromMission("","") ) ;
14648: LD_STRING getStreamItemsFromMission("","")
14650: PPUSH
14651: CALL_OW 559
// end ;
14655: LD_VAR 0 1
14659: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
14660: LD_VAR 0 2
14664: PUSH
14665: LD_INT 100
14667: EQUAL
14668: IFFALSE 15617
// begin if not StreamModeActive then
14670: LD_EXP 35
14674: NOT
14675: IFFALSE 14685
// StreamModeActive := true ;
14677: LD_ADDR_EXP 35
14681: PUSH
14682: LD_INT 1
14684: ST_TO_ADDR
// if p3 = 0 then
14685: LD_VAR 0 3
14689: PUSH
14690: LD_INT 0
14692: EQUAL
14693: IFFALSE 14699
// InitStreamMode ;
14695: CALL 10920 0 0
// if p3 = 1 then
14699: LD_VAR 0 3
14703: PUSH
14704: LD_INT 1
14706: EQUAL
14707: IFFALSE 14717
// sRocket := true ;
14709: LD_ADDR_EXP 40
14713: PUSH
14714: LD_INT 1
14716: ST_TO_ADDR
// if p3 = 2 then
14717: LD_VAR 0 3
14721: PUSH
14722: LD_INT 2
14724: EQUAL
14725: IFFALSE 14735
// sSpeed := true ;
14727: LD_ADDR_EXP 39
14731: PUSH
14732: LD_INT 1
14734: ST_TO_ADDR
// if p3 = 3 then
14735: LD_VAR 0 3
14739: PUSH
14740: LD_INT 3
14742: EQUAL
14743: IFFALSE 14753
// sEngine := true ;
14745: LD_ADDR_EXP 41
14749: PUSH
14750: LD_INT 1
14752: ST_TO_ADDR
// if p3 = 4 then
14753: LD_VAR 0 3
14757: PUSH
14758: LD_INT 4
14760: EQUAL
14761: IFFALSE 14771
// sSpec := true ;
14763: LD_ADDR_EXP 38
14767: PUSH
14768: LD_INT 1
14770: ST_TO_ADDR
// if p3 = 5 then
14771: LD_VAR 0 3
14775: PUSH
14776: LD_INT 5
14778: EQUAL
14779: IFFALSE 14789
// sLevel := true ;
14781: LD_ADDR_EXP 42
14785: PUSH
14786: LD_INT 1
14788: ST_TO_ADDR
// if p3 = 6 then
14789: LD_VAR 0 3
14793: PUSH
14794: LD_INT 6
14796: EQUAL
14797: IFFALSE 14807
// sArmoury := true ;
14799: LD_ADDR_EXP 43
14803: PUSH
14804: LD_INT 1
14806: ST_TO_ADDR
// if p3 = 7 then
14807: LD_VAR 0 3
14811: PUSH
14812: LD_INT 7
14814: EQUAL
14815: IFFALSE 14825
// sRadar := true ;
14817: LD_ADDR_EXP 44
14821: PUSH
14822: LD_INT 1
14824: ST_TO_ADDR
// if p3 = 8 then
14825: LD_VAR 0 3
14829: PUSH
14830: LD_INT 8
14832: EQUAL
14833: IFFALSE 14843
// sBunker := true ;
14835: LD_ADDR_EXP 45
14839: PUSH
14840: LD_INT 1
14842: ST_TO_ADDR
// if p3 = 9 then
14843: LD_VAR 0 3
14847: PUSH
14848: LD_INT 9
14850: EQUAL
14851: IFFALSE 14861
// sHack := true ;
14853: LD_ADDR_EXP 46
14857: PUSH
14858: LD_INT 1
14860: ST_TO_ADDR
// if p3 = 10 then
14861: LD_VAR 0 3
14865: PUSH
14866: LD_INT 10
14868: EQUAL
14869: IFFALSE 14879
// sFire := true ;
14871: LD_ADDR_EXP 47
14875: PUSH
14876: LD_INT 1
14878: ST_TO_ADDR
// if p3 = 11 then
14879: LD_VAR 0 3
14883: PUSH
14884: LD_INT 11
14886: EQUAL
14887: IFFALSE 14897
// sRefresh := true ;
14889: LD_ADDR_EXP 48
14893: PUSH
14894: LD_INT 1
14896: ST_TO_ADDR
// if p3 = 12 then
14897: LD_VAR 0 3
14901: PUSH
14902: LD_INT 12
14904: EQUAL
14905: IFFALSE 14915
// sExp := true ;
14907: LD_ADDR_EXP 49
14911: PUSH
14912: LD_INT 1
14914: ST_TO_ADDR
// if p3 = 13 then
14915: LD_VAR 0 3
14919: PUSH
14920: LD_INT 13
14922: EQUAL
14923: IFFALSE 14933
// sDepot := true ;
14925: LD_ADDR_EXP 50
14929: PUSH
14930: LD_INT 1
14932: ST_TO_ADDR
// if p3 = 14 then
14933: LD_VAR 0 3
14937: PUSH
14938: LD_INT 14
14940: EQUAL
14941: IFFALSE 14951
// sFlag := true ;
14943: LD_ADDR_EXP 51
14947: PUSH
14948: LD_INT 1
14950: ST_TO_ADDR
// if p3 = 15 then
14951: LD_VAR 0 3
14955: PUSH
14956: LD_INT 15
14958: EQUAL
14959: IFFALSE 14969
// sKamikadze := true ;
14961: LD_ADDR_EXP 59
14965: PUSH
14966: LD_INT 1
14968: ST_TO_ADDR
// if p3 = 16 then
14969: LD_VAR 0 3
14973: PUSH
14974: LD_INT 16
14976: EQUAL
14977: IFFALSE 14987
// sTroll := true ;
14979: LD_ADDR_EXP 60
14983: PUSH
14984: LD_INT 1
14986: ST_TO_ADDR
// if p3 = 17 then
14987: LD_VAR 0 3
14991: PUSH
14992: LD_INT 17
14994: EQUAL
14995: IFFALSE 15005
// sSlow := true ;
14997: LD_ADDR_EXP 61
15001: PUSH
15002: LD_INT 1
15004: ST_TO_ADDR
// if p3 = 18 then
15005: LD_VAR 0 3
15009: PUSH
15010: LD_INT 18
15012: EQUAL
15013: IFFALSE 15023
// sLack := true ;
15015: LD_ADDR_EXP 62
15019: PUSH
15020: LD_INT 1
15022: ST_TO_ADDR
// if p3 = 19 then
15023: LD_VAR 0 3
15027: PUSH
15028: LD_INT 19
15030: EQUAL
15031: IFFALSE 15041
// sTank := true ;
15033: LD_ADDR_EXP 64
15037: PUSH
15038: LD_INT 1
15040: ST_TO_ADDR
// if p3 = 20 then
15041: LD_VAR 0 3
15045: PUSH
15046: LD_INT 20
15048: EQUAL
15049: IFFALSE 15059
// sRemote := true ;
15051: LD_ADDR_EXP 65
15055: PUSH
15056: LD_INT 1
15058: ST_TO_ADDR
// if p3 = 21 then
15059: LD_VAR 0 3
15063: PUSH
15064: LD_INT 21
15066: EQUAL
15067: IFFALSE 15077
// sPowell := true ;
15069: LD_ADDR_EXP 66
15073: PUSH
15074: LD_INT 1
15076: ST_TO_ADDR
// if p3 = 22 then
15077: LD_VAR 0 3
15081: PUSH
15082: LD_INT 22
15084: EQUAL
15085: IFFALSE 15095
// sTeleport := true ;
15087: LD_ADDR_EXP 69
15091: PUSH
15092: LD_INT 1
15094: ST_TO_ADDR
// if p3 = 23 then
15095: LD_VAR 0 3
15099: PUSH
15100: LD_INT 23
15102: EQUAL
15103: IFFALSE 15113
// sOilTower := true ;
15105: LD_ADDR_EXP 71
15109: PUSH
15110: LD_INT 1
15112: ST_TO_ADDR
// if p3 = 24 then
15113: LD_VAR 0 3
15117: PUSH
15118: LD_INT 24
15120: EQUAL
15121: IFFALSE 15131
// sShovel := true ;
15123: LD_ADDR_EXP 72
15127: PUSH
15128: LD_INT 1
15130: ST_TO_ADDR
// if p3 = 25 then
15131: LD_VAR 0 3
15135: PUSH
15136: LD_INT 25
15138: EQUAL
15139: IFFALSE 15149
// sSheik := true ;
15141: LD_ADDR_EXP 73
15145: PUSH
15146: LD_INT 1
15148: ST_TO_ADDR
// if p3 = 26 then
15149: LD_VAR 0 3
15153: PUSH
15154: LD_INT 26
15156: EQUAL
15157: IFFALSE 15167
// sEarthquake := true ;
15159: LD_ADDR_EXP 75
15163: PUSH
15164: LD_INT 1
15166: ST_TO_ADDR
// if p3 = 27 then
15167: LD_VAR 0 3
15171: PUSH
15172: LD_INT 27
15174: EQUAL
15175: IFFALSE 15185
// sAI := true ;
15177: LD_ADDR_EXP 76
15181: PUSH
15182: LD_INT 1
15184: ST_TO_ADDR
// if p3 = 28 then
15185: LD_VAR 0 3
15189: PUSH
15190: LD_INT 28
15192: EQUAL
15193: IFFALSE 15203
// sCargo := true ;
15195: LD_ADDR_EXP 79
15199: PUSH
15200: LD_INT 1
15202: ST_TO_ADDR
// if p3 = 29 then
15203: LD_VAR 0 3
15207: PUSH
15208: LD_INT 29
15210: EQUAL
15211: IFFALSE 15221
// sDLaser := true ;
15213: LD_ADDR_EXP 80
15217: PUSH
15218: LD_INT 1
15220: ST_TO_ADDR
// if p3 = 30 then
15221: LD_VAR 0 3
15225: PUSH
15226: LD_INT 30
15228: EQUAL
15229: IFFALSE 15239
// sExchange := true ;
15231: LD_ADDR_EXP 81
15235: PUSH
15236: LD_INT 1
15238: ST_TO_ADDR
// if p3 = 31 then
15239: LD_VAR 0 3
15243: PUSH
15244: LD_INT 31
15246: EQUAL
15247: IFFALSE 15257
// sFac := true ;
15249: LD_ADDR_EXP 82
15253: PUSH
15254: LD_INT 1
15256: ST_TO_ADDR
// if p3 = 32 then
15257: LD_VAR 0 3
15261: PUSH
15262: LD_INT 32
15264: EQUAL
15265: IFFALSE 15275
// sPower := true ;
15267: LD_ADDR_EXP 83
15271: PUSH
15272: LD_INT 1
15274: ST_TO_ADDR
// if p3 = 33 then
15275: LD_VAR 0 3
15279: PUSH
15280: LD_INT 33
15282: EQUAL
15283: IFFALSE 15293
// sRandom := true ;
15285: LD_ADDR_EXP 84
15289: PUSH
15290: LD_INT 1
15292: ST_TO_ADDR
// if p3 = 34 then
15293: LD_VAR 0 3
15297: PUSH
15298: LD_INT 34
15300: EQUAL
15301: IFFALSE 15311
// sShield := true ;
15303: LD_ADDR_EXP 85
15307: PUSH
15308: LD_INT 1
15310: ST_TO_ADDR
// if p3 = 35 then
15311: LD_VAR 0 3
15315: PUSH
15316: LD_INT 35
15318: EQUAL
15319: IFFALSE 15329
// sTime := true ;
15321: LD_ADDR_EXP 86
15325: PUSH
15326: LD_INT 1
15328: ST_TO_ADDR
// if p3 = 36 then
15329: LD_VAR 0 3
15333: PUSH
15334: LD_INT 36
15336: EQUAL
15337: IFFALSE 15347
// sTools := true ;
15339: LD_ADDR_EXP 87
15343: PUSH
15344: LD_INT 1
15346: ST_TO_ADDR
// if p3 = 101 then
15347: LD_VAR 0 3
15351: PUSH
15352: LD_INT 101
15354: EQUAL
15355: IFFALSE 15365
// sSold := true ;
15357: LD_ADDR_EXP 52
15361: PUSH
15362: LD_INT 1
15364: ST_TO_ADDR
// if p3 = 102 then
15365: LD_VAR 0 3
15369: PUSH
15370: LD_INT 102
15372: EQUAL
15373: IFFALSE 15383
// sDiff := true ;
15375: LD_ADDR_EXP 53
15379: PUSH
15380: LD_INT 1
15382: ST_TO_ADDR
// if p3 = 103 then
15383: LD_VAR 0 3
15387: PUSH
15388: LD_INT 103
15390: EQUAL
15391: IFFALSE 15401
// sFog := true ;
15393: LD_ADDR_EXP 56
15397: PUSH
15398: LD_INT 1
15400: ST_TO_ADDR
// if p3 = 104 then
15401: LD_VAR 0 3
15405: PUSH
15406: LD_INT 104
15408: EQUAL
15409: IFFALSE 15419
// sReset := true ;
15411: LD_ADDR_EXP 57
15415: PUSH
15416: LD_INT 1
15418: ST_TO_ADDR
// if p3 = 105 then
15419: LD_VAR 0 3
15423: PUSH
15424: LD_INT 105
15426: EQUAL
15427: IFFALSE 15437
// sSun := true ;
15429: LD_ADDR_EXP 58
15433: PUSH
15434: LD_INT 1
15436: ST_TO_ADDR
// if p3 = 106 then
15437: LD_VAR 0 3
15441: PUSH
15442: LD_INT 106
15444: EQUAL
15445: IFFALSE 15455
// sTiger := true ;
15447: LD_ADDR_EXP 54
15451: PUSH
15452: LD_INT 1
15454: ST_TO_ADDR
// if p3 = 107 then
15455: LD_VAR 0 3
15459: PUSH
15460: LD_INT 107
15462: EQUAL
15463: IFFALSE 15473
// sBomb := true ;
15465: LD_ADDR_EXP 55
15469: PUSH
15470: LD_INT 1
15472: ST_TO_ADDR
// if p3 = 108 then
15473: LD_VAR 0 3
15477: PUSH
15478: LD_INT 108
15480: EQUAL
15481: IFFALSE 15491
// sWound := true ;
15483: LD_ADDR_EXP 63
15487: PUSH
15488: LD_INT 1
15490: ST_TO_ADDR
// if p3 = 109 then
15491: LD_VAR 0 3
15495: PUSH
15496: LD_INT 109
15498: EQUAL
15499: IFFALSE 15509
// sBetray := true ;
15501: LD_ADDR_EXP 67
15505: PUSH
15506: LD_INT 1
15508: ST_TO_ADDR
// if p3 = 110 then
15509: LD_VAR 0 3
15513: PUSH
15514: LD_INT 110
15516: EQUAL
15517: IFFALSE 15527
// sContamin := true ;
15519: LD_ADDR_EXP 68
15523: PUSH
15524: LD_INT 1
15526: ST_TO_ADDR
// if p3 = 111 then
15527: LD_VAR 0 3
15531: PUSH
15532: LD_INT 111
15534: EQUAL
15535: IFFALSE 15545
// sOil := true ;
15537: LD_ADDR_EXP 70
15541: PUSH
15542: LD_INT 1
15544: ST_TO_ADDR
// if p3 = 112 then
15545: LD_VAR 0 3
15549: PUSH
15550: LD_INT 112
15552: EQUAL
15553: IFFALSE 15563
// sStu := true ;
15555: LD_ADDR_EXP 74
15559: PUSH
15560: LD_INT 1
15562: ST_TO_ADDR
// if p3 = 113 then
15563: LD_VAR 0 3
15567: PUSH
15568: LD_INT 113
15570: EQUAL
15571: IFFALSE 15581
// sBazooka := true ;
15573: LD_ADDR_EXP 77
15577: PUSH
15578: LD_INT 1
15580: ST_TO_ADDR
// if p3 = 114 then
15581: LD_VAR 0 3
15585: PUSH
15586: LD_INT 114
15588: EQUAL
15589: IFFALSE 15599
// sMortar := true ;
15591: LD_ADDR_EXP 78
15595: PUSH
15596: LD_INT 1
15598: ST_TO_ADDR
// if p3 = 115 then
15599: LD_VAR 0 3
15603: PUSH
15604: LD_INT 115
15606: EQUAL
15607: IFFALSE 15617
// sRanger := true ;
15609: LD_ADDR_EXP 88
15613: PUSH
15614: LD_INT 1
15616: ST_TO_ADDR
// end ; end ;
15617: PPOPN 6
15619: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
15620: LD_EXP 35
15624: PUSH
15625: LD_EXP 40
15629: AND
15630: IFFALSE 15754
15632: GO 15634
15634: DISABLE
15635: LD_INT 0
15637: PPUSH
15638: PPUSH
// begin enable ;
15639: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
15640: LD_ADDR_VAR 0 2
15644: PUSH
15645: LD_INT 22
15647: PUSH
15648: LD_OWVAR 2
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: PUSH
15657: LD_INT 2
15659: PUSH
15660: LD_INT 34
15662: PUSH
15663: LD_INT 7
15665: PUSH
15666: EMPTY
15667: LIST
15668: LIST
15669: PUSH
15670: LD_INT 34
15672: PUSH
15673: LD_INT 45
15675: PUSH
15676: EMPTY
15677: LIST
15678: LIST
15679: PUSH
15680: LD_INT 34
15682: PUSH
15683: LD_INT 28
15685: PUSH
15686: EMPTY
15687: LIST
15688: LIST
15689: PUSH
15690: LD_INT 34
15692: PUSH
15693: LD_INT 47
15695: PUSH
15696: EMPTY
15697: LIST
15698: LIST
15699: PUSH
15700: EMPTY
15701: LIST
15702: LIST
15703: LIST
15704: LIST
15705: LIST
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: PPUSH
15711: CALL_OW 69
15715: ST_TO_ADDR
// if not tmp then
15716: LD_VAR 0 2
15720: NOT
15721: IFFALSE 15725
// exit ;
15723: GO 15754
// for i in tmp do
15725: LD_ADDR_VAR 0 1
15729: PUSH
15730: LD_VAR 0 2
15734: PUSH
15735: FOR_IN
15736: IFFALSE 15752
// begin SetLives ( i , 0 ) ;
15738: LD_VAR 0 1
15742: PPUSH
15743: LD_INT 0
15745: PPUSH
15746: CALL_OW 234
// end ;
15750: GO 15735
15752: POP
15753: POP
// end ;
15754: PPOPN 2
15756: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15757: LD_EXP 35
15761: PUSH
15762: LD_EXP 41
15766: AND
15767: IFFALSE 15851
15769: GO 15771
15771: DISABLE
15772: LD_INT 0
15774: PPUSH
15775: PPUSH
// begin enable ;
15776: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15777: LD_ADDR_VAR 0 2
15781: PUSH
15782: LD_INT 22
15784: PUSH
15785: LD_OWVAR 2
15789: PUSH
15790: EMPTY
15791: LIST
15792: LIST
15793: PUSH
15794: LD_INT 32
15796: PUSH
15797: LD_INT 3
15799: PUSH
15800: EMPTY
15801: LIST
15802: LIST
15803: PUSH
15804: EMPTY
15805: LIST
15806: LIST
15807: PPUSH
15808: CALL_OW 69
15812: ST_TO_ADDR
// if not tmp then
15813: LD_VAR 0 2
15817: NOT
15818: IFFALSE 15822
// exit ;
15820: GO 15851
// for i in tmp do
15822: LD_ADDR_VAR 0 1
15826: PUSH
15827: LD_VAR 0 2
15831: PUSH
15832: FOR_IN
15833: IFFALSE 15849
// begin SetLives ( i , 0 ) ;
15835: LD_VAR 0 1
15839: PPUSH
15840: LD_INT 0
15842: PPUSH
15843: CALL_OW 234
// end ;
15847: GO 15832
15849: POP
15850: POP
// end ;
15851: PPOPN 2
15853: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15854: LD_EXP 35
15858: PUSH
15859: LD_EXP 38
15863: AND
15864: IFFALSE 15957
15866: GO 15868
15868: DISABLE
15869: LD_INT 0
15871: PPUSH
// begin enable ;
15872: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15873: LD_ADDR_VAR 0 1
15877: PUSH
15878: LD_INT 22
15880: PUSH
15881: LD_OWVAR 2
15885: PUSH
15886: EMPTY
15887: LIST
15888: LIST
15889: PUSH
15890: LD_INT 2
15892: PUSH
15893: LD_INT 25
15895: PUSH
15896: LD_INT 5
15898: PUSH
15899: EMPTY
15900: LIST
15901: LIST
15902: PUSH
15903: LD_INT 25
15905: PUSH
15906: LD_INT 9
15908: PUSH
15909: EMPTY
15910: LIST
15911: LIST
15912: PUSH
15913: LD_INT 25
15915: PUSH
15916: LD_INT 8
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: PUSH
15923: EMPTY
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: PUSH
15929: EMPTY
15930: LIST
15931: LIST
15932: PPUSH
15933: CALL_OW 69
15937: PUSH
15938: FOR_IN
15939: IFFALSE 15955
// begin SetClass ( i , 1 ) ;
15941: LD_VAR 0 1
15945: PPUSH
15946: LD_INT 1
15948: PPUSH
15949: CALL_OW 336
// end ;
15953: GO 15938
15955: POP
15956: POP
// end ;
15957: PPOPN 1
15959: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15960: LD_EXP 35
15964: PUSH
15965: LD_EXP 39
15969: AND
15970: PUSH
15971: LD_OWVAR 65
15975: PUSH
15976: LD_INT 7
15978: LESS
15979: AND
15980: IFFALSE 15994
15982: GO 15984
15984: DISABLE
// begin enable ;
15985: ENABLE
// game_speed := 7 ;
15986: LD_ADDR_OWVAR 65
15990: PUSH
15991: LD_INT 7
15993: ST_TO_ADDR
// end ;
15994: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15995: LD_EXP 35
15999: PUSH
16000: LD_EXP 42
16004: AND
16005: IFFALSE 16207
16007: GO 16009
16009: DISABLE
16010: LD_INT 0
16012: PPUSH
16013: PPUSH
16014: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16015: LD_ADDR_VAR 0 3
16019: PUSH
16020: LD_INT 81
16022: PUSH
16023: LD_OWVAR 2
16027: PUSH
16028: EMPTY
16029: LIST
16030: LIST
16031: PUSH
16032: LD_INT 21
16034: PUSH
16035: LD_INT 1
16037: PUSH
16038: EMPTY
16039: LIST
16040: LIST
16041: PUSH
16042: EMPTY
16043: LIST
16044: LIST
16045: PPUSH
16046: CALL_OW 69
16050: ST_TO_ADDR
// if not tmp then
16051: LD_VAR 0 3
16055: NOT
16056: IFFALSE 16060
// exit ;
16058: GO 16207
// if tmp > 5 then
16060: LD_VAR 0 3
16064: PUSH
16065: LD_INT 5
16067: GREATER
16068: IFFALSE 16080
// k := 5 else
16070: LD_ADDR_VAR 0 2
16074: PUSH
16075: LD_INT 5
16077: ST_TO_ADDR
16078: GO 16090
// k := tmp ;
16080: LD_ADDR_VAR 0 2
16084: PUSH
16085: LD_VAR 0 3
16089: ST_TO_ADDR
// for i := 1 to k do
16090: LD_ADDR_VAR 0 1
16094: PUSH
16095: DOUBLE
16096: LD_INT 1
16098: DEC
16099: ST_TO_ADDR
16100: LD_VAR 0 2
16104: PUSH
16105: FOR_TO
16106: IFFALSE 16205
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16108: LD_VAR 0 3
16112: PUSH
16113: LD_VAR 0 1
16117: ARRAY
16118: PPUSH
16119: LD_VAR 0 1
16123: PUSH
16124: LD_INT 4
16126: MOD
16127: PUSH
16128: LD_INT 1
16130: PLUS
16131: PPUSH
16132: CALL_OW 259
16136: PUSH
16137: LD_INT 10
16139: LESS
16140: IFFALSE 16203
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16142: LD_VAR 0 3
16146: PUSH
16147: LD_VAR 0 1
16151: ARRAY
16152: PPUSH
16153: LD_VAR 0 1
16157: PUSH
16158: LD_INT 4
16160: MOD
16161: PUSH
16162: LD_INT 1
16164: PLUS
16165: PPUSH
16166: LD_VAR 0 3
16170: PUSH
16171: LD_VAR 0 1
16175: ARRAY
16176: PPUSH
16177: LD_VAR 0 1
16181: PUSH
16182: LD_INT 4
16184: MOD
16185: PUSH
16186: LD_INT 1
16188: PLUS
16189: PPUSH
16190: CALL_OW 259
16194: PUSH
16195: LD_INT 1
16197: PLUS
16198: PPUSH
16199: CALL_OW 237
16203: GO 16105
16205: POP
16206: POP
// end ;
16207: PPOPN 3
16209: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16210: LD_EXP 35
16214: PUSH
16215: LD_EXP 43
16219: AND
16220: IFFALSE 16240
16222: GO 16224
16224: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16225: LD_INT 4
16227: PPUSH
16228: LD_OWVAR 2
16232: PPUSH
16233: LD_INT 0
16235: PPUSH
16236: CALL_OW 324
16240: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16241: LD_EXP 35
16245: PUSH
16246: LD_EXP 72
16250: AND
16251: IFFALSE 16271
16253: GO 16255
16255: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16256: LD_INT 19
16258: PPUSH
16259: LD_OWVAR 2
16263: PPUSH
16264: LD_INT 0
16266: PPUSH
16267: CALL_OW 324
16271: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16272: LD_EXP 35
16276: PUSH
16277: LD_EXP 44
16281: AND
16282: IFFALSE 16384
16284: GO 16286
16286: DISABLE
16287: LD_INT 0
16289: PPUSH
16290: PPUSH
// begin enable ;
16291: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16292: LD_ADDR_VAR 0 2
16296: PUSH
16297: LD_INT 22
16299: PUSH
16300: LD_OWVAR 2
16304: PUSH
16305: EMPTY
16306: LIST
16307: LIST
16308: PUSH
16309: LD_INT 2
16311: PUSH
16312: LD_INT 34
16314: PUSH
16315: LD_INT 11
16317: PUSH
16318: EMPTY
16319: LIST
16320: LIST
16321: PUSH
16322: LD_INT 34
16324: PUSH
16325: LD_INT 30
16327: PUSH
16328: EMPTY
16329: LIST
16330: LIST
16331: PUSH
16332: EMPTY
16333: LIST
16334: LIST
16335: LIST
16336: PUSH
16337: EMPTY
16338: LIST
16339: LIST
16340: PPUSH
16341: CALL_OW 69
16345: ST_TO_ADDR
// if not tmp then
16346: LD_VAR 0 2
16350: NOT
16351: IFFALSE 16355
// exit ;
16353: GO 16384
// for i in tmp do
16355: LD_ADDR_VAR 0 1
16359: PUSH
16360: LD_VAR 0 2
16364: PUSH
16365: FOR_IN
16366: IFFALSE 16382
// begin SetLives ( i , 0 ) ;
16368: LD_VAR 0 1
16372: PPUSH
16373: LD_INT 0
16375: PPUSH
16376: CALL_OW 234
// end ;
16380: GO 16365
16382: POP
16383: POP
// end ;
16384: PPOPN 2
16386: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16387: LD_EXP 35
16391: PUSH
16392: LD_EXP 45
16396: AND
16397: IFFALSE 16417
16399: GO 16401
16401: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16402: LD_INT 32
16404: PPUSH
16405: LD_OWVAR 2
16409: PPUSH
16410: LD_INT 0
16412: PPUSH
16413: CALL_OW 324
16417: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16418: LD_EXP 35
16422: PUSH
16423: LD_EXP 46
16427: AND
16428: IFFALSE 16609
16430: GO 16432
16432: DISABLE
16433: LD_INT 0
16435: PPUSH
16436: PPUSH
16437: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16438: LD_ADDR_VAR 0 2
16442: PUSH
16443: LD_INT 22
16445: PUSH
16446: LD_OWVAR 2
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: PUSH
16455: LD_INT 33
16457: PUSH
16458: LD_INT 3
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PPUSH
16469: CALL_OW 69
16473: ST_TO_ADDR
// if not tmp then
16474: LD_VAR 0 2
16478: NOT
16479: IFFALSE 16483
// exit ;
16481: GO 16609
// side := 0 ;
16483: LD_ADDR_VAR 0 3
16487: PUSH
16488: LD_INT 0
16490: ST_TO_ADDR
// for i := 1 to 8 do
16491: LD_ADDR_VAR 0 1
16495: PUSH
16496: DOUBLE
16497: LD_INT 1
16499: DEC
16500: ST_TO_ADDR
16501: LD_INT 8
16503: PUSH
16504: FOR_TO
16505: IFFALSE 16553
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16507: LD_OWVAR 2
16511: PUSH
16512: LD_VAR 0 1
16516: NONEQUAL
16517: PUSH
16518: LD_OWVAR 2
16522: PPUSH
16523: LD_VAR 0 1
16527: PPUSH
16528: CALL_OW 81
16532: PUSH
16533: LD_INT 2
16535: EQUAL
16536: AND
16537: IFFALSE 16551
// begin side := i ;
16539: LD_ADDR_VAR 0 3
16543: PUSH
16544: LD_VAR 0 1
16548: ST_TO_ADDR
// break ;
16549: GO 16553
// end ;
16551: GO 16504
16553: POP
16554: POP
// if not side then
16555: LD_VAR 0 3
16559: NOT
16560: IFFALSE 16564
// exit ;
16562: GO 16609
// for i := 1 to tmp do
16564: LD_ADDR_VAR 0 1
16568: PUSH
16569: DOUBLE
16570: LD_INT 1
16572: DEC
16573: ST_TO_ADDR
16574: LD_VAR 0 2
16578: PUSH
16579: FOR_TO
16580: IFFALSE 16607
// if Prob ( 60 ) then
16582: LD_INT 60
16584: PPUSH
16585: CALL_OW 13
16589: IFFALSE 16605
// SetSide ( i , side ) ;
16591: LD_VAR 0 1
16595: PPUSH
16596: LD_VAR 0 3
16600: PPUSH
16601: CALL_OW 235
16605: GO 16579
16607: POP
16608: POP
// end ;
16609: PPOPN 3
16611: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
16612: LD_EXP 35
16616: PUSH
16617: LD_EXP 48
16621: AND
16622: IFFALSE 16741
16624: GO 16626
16626: DISABLE
16627: LD_INT 0
16629: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
16630: LD_ADDR_VAR 0 1
16634: PUSH
16635: LD_INT 22
16637: PUSH
16638: LD_OWVAR 2
16642: PUSH
16643: EMPTY
16644: LIST
16645: LIST
16646: PUSH
16647: LD_INT 21
16649: PUSH
16650: LD_INT 1
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: PUSH
16657: LD_INT 3
16659: PUSH
16660: LD_INT 23
16662: PUSH
16663: LD_INT 0
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: PUSH
16674: EMPTY
16675: LIST
16676: LIST
16677: LIST
16678: PPUSH
16679: CALL_OW 69
16683: PUSH
16684: FOR_IN
16685: IFFALSE 16739
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16687: LD_VAR 0 1
16691: PPUSH
16692: CALL_OW 257
16696: PUSH
16697: LD_INT 1
16699: PUSH
16700: LD_INT 2
16702: PUSH
16703: LD_INT 3
16705: PUSH
16706: LD_INT 4
16708: PUSH
16709: EMPTY
16710: LIST
16711: LIST
16712: LIST
16713: LIST
16714: IN
16715: IFFALSE 16737
// SetClass ( un , rand ( 1 , 4 ) ) ;
16717: LD_VAR 0 1
16721: PPUSH
16722: LD_INT 1
16724: PPUSH
16725: LD_INT 4
16727: PPUSH
16728: CALL_OW 12
16732: PPUSH
16733: CALL_OW 336
16737: GO 16684
16739: POP
16740: POP
// end ;
16741: PPOPN 1
16743: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16744: LD_EXP 35
16748: PUSH
16749: LD_EXP 47
16753: AND
16754: IFFALSE 16833
16756: GO 16758
16758: DISABLE
16759: LD_INT 0
16761: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16762: LD_ADDR_VAR 0 1
16766: PUSH
16767: LD_INT 22
16769: PUSH
16770: LD_OWVAR 2
16774: PUSH
16775: EMPTY
16776: LIST
16777: LIST
16778: PUSH
16779: LD_INT 21
16781: PUSH
16782: LD_INT 3
16784: PUSH
16785: EMPTY
16786: LIST
16787: LIST
16788: PUSH
16789: EMPTY
16790: LIST
16791: LIST
16792: PPUSH
16793: CALL_OW 69
16797: ST_TO_ADDR
// if not tmp then
16798: LD_VAR 0 1
16802: NOT
16803: IFFALSE 16807
// exit ;
16805: GO 16833
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16807: LD_VAR 0 1
16811: PUSH
16812: LD_INT 1
16814: PPUSH
16815: LD_VAR 0 1
16819: PPUSH
16820: CALL_OW 12
16824: ARRAY
16825: PPUSH
16826: LD_INT 100
16828: PPUSH
16829: CALL_OW 234
// end ;
16833: PPOPN 1
16835: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16836: LD_EXP 35
16840: PUSH
16841: LD_EXP 49
16845: AND
16846: IFFALSE 16944
16848: GO 16850
16850: DISABLE
16851: LD_INT 0
16853: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16854: LD_ADDR_VAR 0 1
16858: PUSH
16859: LD_INT 22
16861: PUSH
16862: LD_OWVAR 2
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: PUSH
16871: LD_INT 21
16873: PUSH
16874: LD_INT 1
16876: PUSH
16877: EMPTY
16878: LIST
16879: LIST
16880: PUSH
16881: EMPTY
16882: LIST
16883: LIST
16884: PPUSH
16885: CALL_OW 69
16889: ST_TO_ADDR
// if not tmp then
16890: LD_VAR 0 1
16894: NOT
16895: IFFALSE 16899
// exit ;
16897: GO 16944
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16899: LD_VAR 0 1
16903: PUSH
16904: LD_INT 1
16906: PPUSH
16907: LD_VAR 0 1
16911: PPUSH
16912: CALL_OW 12
16916: ARRAY
16917: PPUSH
16918: LD_INT 1
16920: PPUSH
16921: LD_INT 4
16923: PPUSH
16924: CALL_OW 12
16928: PPUSH
16929: LD_INT 3000
16931: PPUSH
16932: LD_INT 9000
16934: PPUSH
16935: CALL_OW 12
16939: PPUSH
16940: CALL_OW 492
// end ;
16944: PPOPN 1
16946: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16947: LD_EXP 35
16951: PUSH
16952: LD_EXP 50
16956: AND
16957: IFFALSE 16977
16959: GO 16961
16961: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16962: LD_INT 1
16964: PPUSH
16965: LD_OWVAR 2
16969: PPUSH
16970: LD_INT 0
16972: PPUSH
16973: CALL_OW 324
16977: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16978: LD_EXP 35
16982: PUSH
16983: LD_EXP 51
16987: AND
16988: IFFALSE 17071
16990: GO 16992
16992: DISABLE
16993: LD_INT 0
16995: PPUSH
16996: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16997: LD_ADDR_VAR 0 2
17001: PUSH
17002: LD_INT 22
17004: PUSH
17005: LD_OWVAR 2
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PUSH
17014: LD_INT 21
17016: PUSH
17017: LD_INT 3
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: PPUSH
17028: CALL_OW 69
17032: ST_TO_ADDR
// if not tmp then
17033: LD_VAR 0 2
17037: NOT
17038: IFFALSE 17042
// exit ;
17040: GO 17071
// for i in tmp do
17042: LD_ADDR_VAR 0 1
17046: PUSH
17047: LD_VAR 0 2
17051: PUSH
17052: FOR_IN
17053: IFFALSE 17069
// SetBLevel ( i , 10 ) ;
17055: LD_VAR 0 1
17059: PPUSH
17060: LD_INT 10
17062: PPUSH
17063: CALL_OW 241
17067: GO 17052
17069: POP
17070: POP
// end ;
17071: PPOPN 2
17073: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17074: LD_EXP 35
17078: PUSH
17079: LD_EXP 52
17083: AND
17084: IFFALSE 17195
17086: GO 17088
17088: DISABLE
17089: LD_INT 0
17091: PPUSH
17092: PPUSH
17093: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17094: LD_ADDR_VAR 0 3
17098: PUSH
17099: LD_INT 22
17101: PUSH
17102: LD_OWVAR 2
17106: PUSH
17107: EMPTY
17108: LIST
17109: LIST
17110: PUSH
17111: LD_INT 25
17113: PUSH
17114: LD_INT 1
17116: PUSH
17117: EMPTY
17118: LIST
17119: LIST
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: PPUSH
17125: CALL_OW 69
17129: ST_TO_ADDR
// if not tmp then
17130: LD_VAR 0 3
17134: NOT
17135: IFFALSE 17139
// exit ;
17137: GO 17195
// un := tmp [ rand ( 1 , tmp ) ] ;
17139: LD_ADDR_VAR 0 2
17143: PUSH
17144: LD_VAR 0 3
17148: PUSH
17149: LD_INT 1
17151: PPUSH
17152: LD_VAR 0 3
17156: PPUSH
17157: CALL_OW 12
17161: ARRAY
17162: ST_TO_ADDR
// if Crawls ( un ) then
17163: LD_VAR 0 2
17167: PPUSH
17168: CALL_OW 318
17172: IFFALSE 17183
// ComWalk ( un ) ;
17174: LD_VAR 0 2
17178: PPUSH
17179: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17183: LD_VAR 0 2
17187: PPUSH
17188: LD_INT 5
17190: PPUSH
17191: CALL_OW 336
// end ;
17195: PPOPN 3
17197: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
17198: LD_EXP 35
17202: PUSH
17203: LD_EXP 53
17207: AND
17208: PUSH
17209: LD_OWVAR 67
17213: PUSH
17214: LD_INT 3
17216: LESS
17217: AND
17218: IFFALSE 17237
17220: GO 17222
17222: DISABLE
// Difficulty := Difficulty + 1 ;
17223: LD_ADDR_OWVAR 67
17227: PUSH
17228: LD_OWVAR 67
17232: PUSH
17233: LD_INT 1
17235: PLUS
17236: ST_TO_ADDR
17237: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17238: LD_EXP 35
17242: PUSH
17243: LD_EXP 54
17247: AND
17248: IFFALSE 17351
17250: GO 17252
17252: DISABLE
17253: LD_INT 0
17255: PPUSH
// begin for i := 1 to 5 do
17256: LD_ADDR_VAR 0 1
17260: PUSH
17261: DOUBLE
17262: LD_INT 1
17264: DEC
17265: ST_TO_ADDR
17266: LD_INT 5
17268: PUSH
17269: FOR_TO
17270: IFFALSE 17349
// begin uc_nation := nation_nature ;
17272: LD_ADDR_OWVAR 21
17276: PUSH
17277: LD_INT 0
17279: ST_TO_ADDR
// uc_side := 0 ;
17280: LD_ADDR_OWVAR 20
17284: PUSH
17285: LD_INT 0
17287: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17288: LD_ADDR_OWVAR 29
17292: PUSH
17293: LD_INT 12
17295: PUSH
17296: LD_INT 12
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: ST_TO_ADDR
// hc_agressivity := 20 ;
17303: LD_ADDR_OWVAR 35
17307: PUSH
17308: LD_INT 20
17310: ST_TO_ADDR
// hc_class := class_tiger ;
17311: LD_ADDR_OWVAR 28
17315: PUSH
17316: LD_INT 14
17318: ST_TO_ADDR
// hc_gallery :=  ;
17319: LD_ADDR_OWVAR 33
17323: PUSH
17324: LD_STRING 
17326: ST_TO_ADDR
// hc_name :=  ;
17327: LD_ADDR_OWVAR 26
17331: PUSH
17332: LD_STRING 
17334: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17335: CALL_OW 44
17339: PPUSH
17340: LD_INT 0
17342: PPUSH
17343: CALL_OW 51
// end ;
17347: GO 17269
17349: POP
17350: POP
// end ;
17351: PPOPN 1
17353: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17354: LD_EXP 35
17358: PUSH
17359: LD_EXP 55
17363: AND
17364: IFFALSE 17373
17366: GO 17368
17368: DISABLE
// StreamSibBomb ;
17369: CALL 17374 0 0
17373: END
// export function StreamSibBomb ; var i , x , y ; begin
17374: LD_INT 0
17376: PPUSH
17377: PPUSH
17378: PPUSH
17379: PPUSH
// result := false ;
17380: LD_ADDR_VAR 0 1
17384: PUSH
17385: LD_INT 0
17387: ST_TO_ADDR
// for i := 1 to 16 do
17388: LD_ADDR_VAR 0 2
17392: PUSH
17393: DOUBLE
17394: LD_INT 1
17396: DEC
17397: ST_TO_ADDR
17398: LD_INT 16
17400: PUSH
17401: FOR_TO
17402: IFFALSE 17601
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17404: LD_ADDR_VAR 0 3
17408: PUSH
17409: LD_INT 10
17411: PUSH
17412: LD_INT 20
17414: PUSH
17415: LD_INT 30
17417: PUSH
17418: LD_INT 40
17420: PUSH
17421: LD_INT 50
17423: PUSH
17424: LD_INT 60
17426: PUSH
17427: LD_INT 70
17429: PUSH
17430: LD_INT 80
17432: PUSH
17433: LD_INT 90
17435: PUSH
17436: LD_INT 100
17438: PUSH
17439: LD_INT 110
17441: PUSH
17442: LD_INT 120
17444: PUSH
17445: LD_INT 130
17447: PUSH
17448: LD_INT 140
17450: PUSH
17451: LD_INT 150
17453: PUSH
17454: EMPTY
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: PUSH
17471: LD_INT 1
17473: PPUSH
17474: LD_INT 15
17476: PPUSH
17477: CALL_OW 12
17481: ARRAY
17482: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17483: LD_ADDR_VAR 0 4
17487: PUSH
17488: LD_INT 10
17490: PUSH
17491: LD_INT 20
17493: PUSH
17494: LD_INT 30
17496: PUSH
17497: LD_INT 40
17499: PUSH
17500: LD_INT 50
17502: PUSH
17503: LD_INT 60
17505: PUSH
17506: LD_INT 70
17508: PUSH
17509: LD_INT 80
17511: PUSH
17512: LD_INT 90
17514: PUSH
17515: LD_INT 100
17517: PUSH
17518: LD_INT 110
17520: PUSH
17521: LD_INT 120
17523: PUSH
17524: LD_INT 130
17526: PUSH
17527: LD_INT 140
17529: PUSH
17530: LD_INT 150
17532: PUSH
17533: EMPTY
17534: LIST
17535: LIST
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: LIST
17541: LIST
17542: LIST
17543: LIST
17544: LIST
17545: LIST
17546: LIST
17547: LIST
17548: LIST
17549: PUSH
17550: LD_INT 1
17552: PPUSH
17553: LD_INT 15
17555: PPUSH
17556: CALL_OW 12
17560: ARRAY
17561: ST_TO_ADDR
// if ValidHex ( x , y ) then
17562: LD_VAR 0 3
17566: PPUSH
17567: LD_VAR 0 4
17571: PPUSH
17572: CALL_OW 488
17576: IFFALSE 17599
// begin result := [ x , y ] ;
17578: LD_ADDR_VAR 0 1
17582: PUSH
17583: LD_VAR 0 3
17587: PUSH
17588: LD_VAR 0 4
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: ST_TO_ADDR
// break ;
17597: GO 17601
// end ; end ;
17599: GO 17401
17601: POP
17602: POP
// if result then
17603: LD_VAR 0 1
17607: IFFALSE 17667
// begin ToLua ( playSibBomb() ) ;
17609: LD_STRING playSibBomb()
17611: PPUSH
17612: CALL_OW 559
// wait ( 0 0$14 ) ;
17616: LD_INT 490
17618: PPUSH
17619: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
17623: LD_VAR 0 1
17627: PUSH
17628: LD_INT 1
17630: ARRAY
17631: PPUSH
17632: LD_VAR 0 1
17636: PUSH
17637: LD_INT 2
17639: ARRAY
17640: PPUSH
17641: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
17645: LD_VAR 0 1
17649: PUSH
17650: LD_INT 1
17652: ARRAY
17653: PPUSH
17654: LD_VAR 0 1
17658: PUSH
17659: LD_INT 2
17661: ARRAY
17662: PPUSH
17663: CALL_OW 429
// end ; end ;
17667: LD_VAR 0 1
17671: RET
// every 0 0$1 trigger StreamModeActive and sReset do
17672: LD_EXP 35
17676: PUSH
17677: LD_EXP 57
17681: AND
17682: IFFALSE 17694
17684: GO 17686
17686: DISABLE
// YouLost (  ) ;
17687: LD_STRING 
17689: PPUSH
17690: CALL_OW 104
17694: END
// every 0 0$1 trigger StreamModeActive and sFog do
17695: LD_EXP 35
17699: PUSH
17700: LD_EXP 56
17704: AND
17705: IFFALSE 17719
17707: GO 17709
17709: DISABLE
// FogOff ( your_side ) ;
17710: LD_OWVAR 2
17714: PPUSH
17715: CALL_OW 344
17719: END
// every 0 0$1 trigger StreamModeActive and sSun do
17720: LD_EXP 35
17724: PUSH
17725: LD_EXP 58
17729: AND
17730: IFFALSE 17758
17732: GO 17734
17734: DISABLE
// begin solar_recharge_percent := 0 ;
17735: LD_ADDR_OWVAR 79
17739: PUSH
17740: LD_INT 0
17742: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17743: LD_INT 10500
17745: PPUSH
17746: CALL_OW 67
// solar_recharge_percent := 100 ;
17750: LD_ADDR_OWVAR 79
17754: PUSH
17755: LD_INT 100
17757: ST_TO_ADDR
// end ;
17758: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17759: LD_EXP 35
17763: PUSH
17764: LD_EXP 59
17768: AND
17769: IFFALSE 18008
17771: GO 17773
17773: DISABLE
17774: LD_INT 0
17776: PPUSH
17777: PPUSH
17778: PPUSH
// begin tmp := [ ] ;
17779: LD_ADDR_VAR 0 3
17783: PUSH
17784: EMPTY
17785: ST_TO_ADDR
// for i := 1 to 6 do
17786: LD_ADDR_VAR 0 1
17790: PUSH
17791: DOUBLE
17792: LD_INT 1
17794: DEC
17795: ST_TO_ADDR
17796: LD_INT 6
17798: PUSH
17799: FOR_TO
17800: IFFALSE 17905
// begin uc_nation := nation_nature ;
17802: LD_ADDR_OWVAR 21
17806: PUSH
17807: LD_INT 0
17809: ST_TO_ADDR
// uc_side := 0 ;
17810: LD_ADDR_OWVAR 20
17814: PUSH
17815: LD_INT 0
17817: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17818: LD_ADDR_OWVAR 29
17822: PUSH
17823: LD_INT 12
17825: PUSH
17826: LD_INT 12
17828: PUSH
17829: EMPTY
17830: LIST
17831: LIST
17832: ST_TO_ADDR
// hc_agressivity := 20 ;
17833: LD_ADDR_OWVAR 35
17837: PUSH
17838: LD_INT 20
17840: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17841: LD_ADDR_OWVAR 28
17845: PUSH
17846: LD_INT 17
17848: ST_TO_ADDR
// hc_gallery :=  ;
17849: LD_ADDR_OWVAR 33
17853: PUSH
17854: LD_STRING 
17856: ST_TO_ADDR
// hc_name :=  ;
17857: LD_ADDR_OWVAR 26
17861: PUSH
17862: LD_STRING 
17864: ST_TO_ADDR
// un := CreateHuman ;
17865: LD_ADDR_VAR 0 2
17869: PUSH
17870: CALL_OW 44
17874: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17875: LD_VAR 0 2
17879: PPUSH
17880: LD_INT 1
17882: PPUSH
17883: CALL_OW 51
// tmp := tmp ^ un ;
17887: LD_ADDR_VAR 0 3
17891: PUSH
17892: LD_VAR 0 3
17896: PUSH
17897: LD_VAR 0 2
17901: ADD
17902: ST_TO_ADDR
// end ;
17903: GO 17799
17905: POP
17906: POP
// repeat wait ( 0 0$1 ) ;
17907: LD_INT 35
17909: PPUSH
17910: CALL_OW 67
// for un in tmp do
17914: LD_ADDR_VAR 0 2
17918: PUSH
17919: LD_VAR 0 3
17923: PUSH
17924: FOR_IN
17925: IFFALSE 17999
// begin if IsDead ( un ) then
17927: LD_VAR 0 2
17931: PPUSH
17932: CALL_OW 301
17936: IFFALSE 17956
// begin tmp := tmp diff un ;
17938: LD_ADDR_VAR 0 3
17942: PUSH
17943: LD_VAR 0 3
17947: PUSH
17948: LD_VAR 0 2
17952: DIFF
17953: ST_TO_ADDR
// continue ;
17954: GO 17924
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17956: LD_VAR 0 2
17960: PPUSH
17961: LD_INT 3
17963: PUSH
17964: LD_INT 22
17966: PUSH
17967: LD_INT 0
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: PUSH
17974: EMPTY
17975: LIST
17976: LIST
17977: PPUSH
17978: CALL_OW 69
17982: PPUSH
17983: LD_VAR 0 2
17987: PPUSH
17988: CALL_OW 74
17992: PPUSH
17993: CALL_OW 115
// end ;
17997: GO 17924
17999: POP
18000: POP
// until not tmp ;
18001: LD_VAR 0 3
18005: NOT
18006: IFFALSE 17907
// end ;
18008: PPOPN 3
18010: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18011: LD_EXP 35
18015: PUSH
18016: LD_EXP 60
18020: AND
18021: IFFALSE 18075
18023: GO 18025
18025: DISABLE
// begin ToLua ( displayTroll(); ) ;
18026: LD_STRING displayTroll();
18028: PPUSH
18029: CALL_OW 559
// wait ( 3 3$00 ) ;
18033: LD_INT 6300
18035: PPUSH
18036: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18040: LD_STRING hideTroll();
18042: PPUSH
18043: CALL_OW 559
// wait ( 1 1$00 ) ;
18047: LD_INT 2100
18049: PPUSH
18050: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18054: LD_STRING displayTroll();
18056: PPUSH
18057: CALL_OW 559
// wait ( 1 1$00 ) ;
18061: LD_INT 2100
18063: PPUSH
18064: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18068: LD_STRING hideTroll();
18070: PPUSH
18071: CALL_OW 559
// end ;
18075: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18076: LD_EXP 35
18080: PUSH
18081: LD_EXP 61
18085: AND
18086: IFFALSE 18149
18088: GO 18090
18090: DISABLE
18091: LD_INT 0
18093: PPUSH
// begin p := 0 ;
18094: LD_ADDR_VAR 0 1
18098: PUSH
18099: LD_INT 0
18101: ST_TO_ADDR
// repeat game_speed := 1 ;
18102: LD_ADDR_OWVAR 65
18106: PUSH
18107: LD_INT 1
18109: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18110: LD_INT 35
18112: PPUSH
18113: CALL_OW 67
// p := p + 1 ;
18117: LD_ADDR_VAR 0 1
18121: PUSH
18122: LD_VAR 0 1
18126: PUSH
18127: LD_INT 1
18129: PLUS
18130: ST_TO_ADDR
// until p >= 60 ;
18131: LD_VAR 0 1
18135: PUSH
18136: LD_INT 60
18138: GREATEREQUAL
18139: IFFALSE 18102
// game_speed := 4 ;
18141: LD_ADDR_OWVAR 65
18145: PUSH
18146: LD_INT 4
18148: ST_TO_ADDR
// end ;
18149: PPOPN 1
18151: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18152: LD_EXP 35
18156: PUSH
18157: LD_EXP 62
18161: AND
18162: IFFALSE 18308
18164: GO 18166
18166: DISABLE
18167: LD_INT 0
18169: PPUSH
18170: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18171: LD_ADDR_VAR 0 1
18175: PUSH
18176: LD_INT 22
18178: PUSH
18179: LD_OWVAR 2
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PUSH
18188: LD_INT 2
18190: PUSH
18191: LD_INT 30
18193: PUSH
18194: LD_INT 0
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: PUSH
18201: LD_INT 30
18203: PUSH
18204: LD_INT 1
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: LIST
18215: PUSH
18216: EMPTY
18217: LIST
18218: LIST
18219: PPUSH
18220: CALL_OW 69
18224: ST_TO_ADDR
// if not depot then
18225: LD_VAR 0 1
18229: NOT
18230: IFFALSE 18234
// exit ;
18232: GO 18308
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18234: LD_ADDR_VAR 0 2
18238: PUSH
18239: LD_VAR 0 1
18243: PUSH
18244: LD_INT 1
18246: PPUSH
18247: LD_VAR 0 1
18251: PPUSH
18252: CALL_OW 12
18256: ARRAY
18257: PPUSH
18258: CALL_OW 274
18262: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18263: LD_VAR 0 2
18267: PPUSH
18268: LD_INT 1
18270: PPUSH
18271: LD_INT 0
18273: PPUSH
18274: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18278: LD_VAR 0 2
18282: PPUSH
18283: LD_INT 2
18285: PPUSH
18286: LD_INT 0
18288: PPUSH
18289: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18293: LD_VAR 0 2
18297: PPUSH
18298: LD_INT 3
18300: PPUSH
18301: LD_INT 0
18303: PPUSH
18304: CALL_OW 277
// end ;
18308: PPOPN 2
18310: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18311: LD_EXP 35
18315: PUSH
18316: LD_EXP 63
18320: AND
18321: IFFALSE 18418
18323: GO 18325
18325: DISABLE
18326: LD_INT 0
18328: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18329: LD_ADDR_VAR 0 1
18333: PUSH
18334: LD_INT 22
18336: PUSH
18337: LD_OWVAR 2
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: PUSH
18346: LD_INT 21
18348: PUSH
18349: LD_INT 1
18351: PUSH
18352: EMPTY
18353: LIST
18354: LIST
18355: PUSH
18356: LD_INT 3
18358: PUSH
18359: LD_INT 23
18361: PUSH
18362: LD_INT 0
18364: PUSH
18365: EMPTY
18366: LIST
18367: LIST
18368: PUSH
18369: EMPTY
18370: LIST
18371: LIST
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: LIST
18377: PPUSH
18378: CALL_OW 69
18382: ST_TO_ADDR
// if not tmp then
18383: LD_VAR 0 1
18387: NOT
18388: IFFALSE 18392
// exit ;
18390: GO 18418
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18392: LD_VAR 0 1
18396: PUSH
18397: LD_INT 1
18399: PPUSH
18400: LD_VAR 0 1
18404: PPUSH
18405: CALL_OW 12
18409: ARRAY
18410: PPUSH
18411: LD_INT 200
18413: PPUSH
18414: CALL_OW 234
// end ;
18418: PPOPN 1
18420: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18421: LD_EXP 35
18425: PUSH
18426: LD_EXP 64
18430: AND
18431: IFFALSE 18510
18433: GO 18435
18435: DISABLE
18436: LD_INT 0
18438: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18439: LD_ADDR_VAR 0 1
18443: PUSH
18444: LD_INT 22
18446: PUSH
18447: LD_OWVAR 2
18451: PUSH
18452: EMPTY
18453: LIST
18454: LIST
18455: PUSH
18456: LD_INT 21
18458: PUSH
18459: LD_INT 2
18461: PUSH
18462: EMPTY
18463: LIST
18464: LIST
18465: PUSH
18466: EMPTY
18467: LIST
18468: LIST
18469: PPUSH
18470: CALL_OW 69
18474: ST_TO_ADDR
// if not tmp then
18475: LD_VAR 0 1
18479: NOT
18480: IFFALSE 18484
// exit ;
18482: GO 18510
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18484: LD_VAR 0 1
18488: PUSH
18489: LD_INT 1
18491: PPUSH
18492: LD_VAR 0 1
18496: PPUSH
18497: CALL_OW 12
18501: ARRAY
18502: PPUSH
18503: LD_INT 60
18505: PPUSH
18506: CALL_OW 234
// end ;
18510: PPOPN 1
18512: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18513: LD_EXP 35
18517: PUSH
18518: LD_EXP 65
18522: AND
18523: IFFALSE 18622
18525: GO 18527
18527: DISABLE
18528: LD_INT 0
18530: PPUSH
18531: PPUSH
// begin enable ;
18532: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18533: LD_ADDR_VAR 0 1
18537: PUSH
18538: LD_INT 22
18540: PUSH
18541: LD_OWVAR 2
18545: PUSH
18546: EMPTY
18547: LIST
18548: LIST
18549: PUSH
18550: LD_INT 61
18552: PUSH
18553: EMPTY
18554: LIST
18555: PUSH
18556: LD_INT 33
18558: PUSH
18559: LD_INT 2
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: LIST
18570: PPUSH
18571: CALL_OW 69
18575: ST_TO_ADDR
// if not tmp then
18576: LD_VAR 0 1
18580: NOT
18581: IFFALSE 18585
// exit ;
18583: GO 18622
// for i in tmp do
18585: LD_ADDR_VAR 0 2
18589: PUSH
18590: LD_VAR 0 1
18594: PUSH
18595: FOR_IN
18596: IFFALSE 18620
// if IsControledBy ( i ) then
18598: LD_VAR 0 2
18602: PPUSH
18603: CALL_OW 312
18607: IFFALSE 18618
// ComUnlink ( i ) ;
18609: LD_VAR 0 2
18613: PPUSH
18614: CALL_OW 136
18618: GO 18595
18620: POP
18621: POP
// end ;
18622: PPOPN 2
18624: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
18625: LD_EXP 35
18629: PUSH
18630: LD_EXP 66
18634: AND
18635: IFFALSE 18775
18637: GO 18639
18639: DISABLE
18640: LD_INT 0
18642: PPUSH
18643: PPUSH
// begin ToLua ( displayPowell(); ) ;
18644: LD_STRING displayPowell();
18646: PPUSH
18647: CALL_OW 559
// uc_side := 0 ;
18651: LD_ADDR_OWVAR 20
18655: PUSH
18656: LD_INT 0
18658: ST_TO_ADDR
// uc_nation := 2 ;
18659: LD_ADDR_OWVAR 21
18663: PUSH
18664: LD_INT 2
18666: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
18667: LD_ADDR_OWVAR 37
18671: PUSH
18672: LD_INT 14
18674: ST_TO_ADDR
// vc_engine := engine_siberite ;
18675: LD_ADDR_OWVAR 39
18679: PUSH
18680: LD_INT 3
18682: ST_TO_ADDR
// vc_control := control_apeman ;
18683: LD_ADDR_OWVAR 38
18687: PUSH
18688: LD_INT 5
18690: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18691: LD_ADDR_OWVAR 40
18695: PUSH
18696: LD_INT 29
18698: ST_TO_ADDR
// un := CreateVehicle ;
18699: LD_ADDR_VAR 0 2
18703: PUSH
18704: CALL_OW 45
18708: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18709: LD_VAR 0 2
18713: PPUSH
18714: LD_INT 1
18716: PPUSH
18717: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18721: LD_INT 35
18723: PPUSH
18724: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18728: LD_VAR 0 2
18732: PPUSH
18733: LD_INT 22
18735: PUSH
18736: LD_OWVAR 2
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: PPUSH
18745: CALL_OW 69
18749: PPUSH
18750: LD_VAR 0 2
18754: PPUSH
18755: CALL_OW 74
18759: PPUSH
18760: CALL_OW 115
// until IsDead ( un ) ;
18764: LD_VAR 0 2
18768: PPUSH
18769: CALL_OW 301
18773: IFFALSE 18721
// end ;
18775: PPOPN 2
18777: END
// every 0 0$1 trigger StreamModeActive and sStu do
18778: LD_EXP 35
18782: PUSH
18783: LD_EXP 74
18787: AND
18788: IFFALSE 18804
18790: GO 18792
18792: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18793: LD_STRING displayStucuk();
18795: PPUSH
18796: CALL_OW 559
// ResetFog ;
18800: CALL_OW 335
// end ;
18804: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18805: LD_EXP 35
18809: PUSH
18810: LD_EXP 67
18814: AND
18815: IFFALSE 18956
18817: GO 18819
18819: DISABLE
18820: LD_INT 0
18822: PPUSH
18823: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18824: LD_ADDR_VAR 0 2
18828: PUSH
18829: LD_INT 22
18831: PUSH
18832: LD_OWVAR 2
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: PUSH
18841: LD_INT 21
18843: PUSH
18844: LD_INT 1
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: PUSH
18851: EMPTY
18852: LIST
18853: LIST
18854: PPUSH
18855: CALL_OW 69
18859: ST_TO_ADDR
// if not tmp then
18860: LD_VAR 0 2
18864: NOT
18865: IFFALSE 18869
// exit ;
18867: GO 18956
// un := tmp [ rand ( 1 , tmp ) ] ;
18869: LD_ADDR_VAR 0 1
18873: PUSH
18874: LD_VAR 0 2
18878: PUSH
18879: LD_INT 1
18881: PPUSH
18882: LD_VAR 0 2
18886: PPUSH
18887: CALL_OW 12
18891: ARRAY
18892: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18893: LD_VAR 0 1
18897: PPUSH
18898: LD_INT 0
18900: PPUSH
18901: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18905: LD_VAR 0 1
18909: PPUSH
18910: LD_OWVAR 3
18914: PUSH
18915: LD_VAR 0 1
18919: DIFF
18920: PPUSH
18921: LD_VAR 0 1
18925: PPUSH
18926: CALL_OW 74
18930: PPUSH
18931: CALL_OW 115
// wait ( 0 0$20 ) ;
18935: LD_INT 700
18937: PPUSH
18938: CALL_OW 67
// SetSide ( un , your_side ) ;
18942: LD_VAR 0 1
18946: PPUSH
18947: LD_OWVAR 2
18951: PPUSH
18952: CALL_OW 235
// end ;
18956: PPOPN 2
18958: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18959: LD_EXP 35
18963: PUSH
18964: LD_EXP 68
18968: AND
18969: IFFALSE 19075
18971: GO 18973
18973: DISABLE
18974: LD_INT 0
18976: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18977: LD_ADDR_VAR 0 1
18981: PUSH
18982: LD_INT 22
18984: PUSH
18985: LD_OWVAR 2
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: PUSH
18994: LD_INT 2
18996: PUSH
18997: LD_INT 30
18999: PUSH
19000: LD_INT 0
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: PUSH
19007: LD_INT 30
19009: PUSH
19010: LD_INT 1
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: LIST
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: PPUSH
19026: CALL_OW 69
19030: ST_TO_ADDR
// if not depot then
19031: LD_VAR 0 1
19035: NOT
19036: IFFALSE 19040
// exit ;
19038: GO 19075
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19040: LD_VAR 0 1
19044: PUSH
19045: LD_INT 1
19047: ARRAY
19048: PPUSH
19049: CALL_OW 250
19053: PPUSH
19054: LD_VAR 0 1
19058: PUSH
19059: LD_INT 1
19061: ARRAY
19062: PPUSH
19063: CALL_OW 251
19067: PPUSH
19068: LD_INT 70
19070: PPUSH
19071: CALL_OW 495
// end ;
19075: PPOPN 1
19077: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19078: LD_EXP 35
19082: PUSH
19083: LD_EXP 69
19087: AND
19088: IFFALSE 19299
19090: GO 19092
19092: DISABLE
19093: LD_INT 0
19095: PPUSH
19096: PPUSH
19097: PPUSH
19098: PPUSH
19099: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19100: LD_ADDR_VAR 0 5
19104: PUSH
19105: LD_INT 22
19107: PUSH
19108: LD_OWVAR 2
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: PUSH
19117: LD_INT 21
19119: PUSH
19120: LD_INT 1
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: PUSH
19127: EMPTY
19128: LIST
19129: LIST
19130: PPUSH
19131: CALL_OW 69
19135: ST_TO_ADDR
// if not tmp then
19136: LD_VAR 0 5
19140: NOT
19141: IFFALSE 19145
// exit ;
19143: GO 19299
// for i in tmp do
19145: LD_ADDR_VAR 0 1
19149: PUSH
19150: LD_VAR 0 5
19154: PUSH
19155: FOR_IN
19156: IFFALSE 19297
// begin d := rand ( 0 , 5 ) ;
19158: LD_ADDR_VAR 0 4
19162: PUSH
19163: LD_INT 0
19165: PPUSH
19166: LD_INT 5
19168: PPUSH
19169: CALL_OW 12
19173: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19174: LD_ADDR_VAR 0 2
19178: PUSH
19179: LD_VAR 0 1
19183: PPUSH
19184: CALL_OW 250
19188: PPUSH
19189: LD_VAR 0 4
19193: PPUSH
19194: LD_INT 3
19196: PPUSH
19197: LD_INT 12
19199: PPUSH
19200: CALL_OW 12
19204: PPUSH
19205: CALL_OW 272
19209: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19210: LD_ADDR_VAR 0 3
19214: PUSH
19215: LD_VAR 0 1
19219: PPUSH
19220: CALL_OW 251
19224: PPUSH
19225: LD_VAR 0 4
19229: PPUSH
19230: LD_INT 3
19232: PPUSH
19233: LD_INT 12
19235: PPUSH
19236: CALL_OW 12
19240: PPUSH
19241: CALL_OW 273
19245: ST_TO_ADDR
// if ValidHex ( x , y ) then
19246: LD_VAR 0 2
19250: PPUSH
19251: LD_VAR 0 3
19255: PPUSH
19256: CALL_OW 488
19260: IFFALSE 19295
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19262: LD_VAR 0 1
19266: PPUSH
19267: LD_VAR 0 2
19271: PPUSH
19272: LD_VAR 0 3
19276: PPUSH
19277: LD_INT 3
19279: PPUSH
19280: LD_INT 6
19282: PPUSH
19283: CALL_OW 12
19287: PPUSH
19288: LD_INT 1
19290: PPUSH
19291: CALL_OW 483
// end ;
19295: GO 19155
19297: POP
19298: POP
// end ;
19299: PPOPN 5
19301: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19302: LD_EXP 35
19306: PUSH
19307: LD_EXP 70
19311: AND
19312: IFFALSE 19406
19314: GO 19316
19316: DISABLE
19317: LD_INT 0
19319: PPUSH
19320: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19321: LD_ADDR_VAR 0 2
19325: PUSH
19326: LD_INT 22
19328: PUSH
19329: LD_OWVAR 2
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PUSH
19338: LD_INT 32
19340: PUSH
19341: LD_INT 1
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: PUSH
19348: LD_INT 21
19350: PUSH
19351: LD_INT 2
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: PUSH
19358: EMPTY
19359: LIST
19360: LIST
19361: LIST
19362: PPUSH
19363: CALL_OW 69
19367: ST_TO_ADDR
// if not tmp then
19368: LD_VAR 0 2
19372: NOT
19373: IFFALSE 19377
// exit ;
19375: GO 19406
// for i in tmp do
19377: LD_ADDR_VAR 0 1
19381: PUSH
19382: LD_VAR 0 2
19386: PUSH
19387: FOR_IN
19388: IFFALSE 19404
// SetFuel ( i , 0 ) ;
19390: LD_VAR 0 1
19394: PPUSH
19395: LD_INT 0
19397: PPUSH
19398: CALL_OW 240
19402: GO 19387
19404: POP
19405: POP
// end ;
19406: PPOPN 2
19408: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19409: LD_EXP 35
19413: PUSH
19414: LD_EXP 71
19418: AND
19419: IFFALSE 19485
19421: GO 19423
19423: DISABLE
19424: LD_INT 0
19426: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19427: LD_ADDR_VAR 0 1
19431: PUSH
19432: LD_INT 22
19434: PUSH
19435: LD_OWVAR 2
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: PUSH
19444: LD_INT 30
19446: PUSH
19447: LD_INT 29
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: PUSH
19454: EMPTY
19455: LIST
19456: LIST
19457: PPUSH
19458: CALL_OW 69
19462: ST_TO_ADDR
// if not tmp then
19463: LD_VAR 0 1
19467: NOT
19468: IFFALSE 19472
// exit ;
19470: GO 19485
// DestroyUnit ( tmp [ 1 ] ) ;
19472: LD_VAR 0 1
19476: PUSH
19477: LD_INT 1
19479: ARRAY
19480: PPUSH
19481: CALL_OW 65
// end ;
19485: PPOPN 1
19487: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19488: LD_EXP 35
19492: PUSH
19493: LD_EXP 73
19497: AND
19498: IFFALSE 19627
19500: GO 19502
19502: DISABLE
19503: LD_INT 0
19505: PPUSH
// begin uc_side := 0 ;
19506: LD_ADDR_OWVAR 20
19510: PUSH
19511: LD_INT 0
19513: ST_TO_ADDR
// uc_nation := nation_arabian ;
19514: LD_ADDR_OWVAR 21
19518: PUSH
19519: LD_INT 2
19521: ST_TO_ADDR
// hc_gallery :=  ;
19522: LD_ADDR_OWVAR 33
19526: PUSH
19527: LD_STRING 
19529: ST_TO_ADDR
// hc_name :=  ;
19530: LD_ADDR_OWVAR 26
19534: PUSH
19535: LD_STRING 
19537: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19538: LD_INT 1
19540: PPUSH
19541: LD_INT 11
19543: PPUSH
19544: LD_INT 10
19546: PPUSH
19547: CALL_OW 380
// un := CreateHuman ;
19551: LD_ADDR_VAR 0 1
19555: PUSH
19556: CALL_OW 44
19560: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19561: LD_VAR 0 1
19565: PPUSH
19566: LD_INT 1
19568: PPUSH
19569: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19573: LD_INT 35
19575: PPUSH
19576: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19580: LD_VAR 0 1
19584: PPUSH
19585: LD_INT 22
19587: PUSH
19588: LD_OWVAR 2
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: PPUSH
19597: CALL_OW 69
19601: PPUSH
19602: LD_VAR 0 1
19606: PPUSH
19607: CALL_OW 74
19611: PPUSH
19612: CALL_OW 115
// until IsDead ( un ) ;
19616: LD_VAR 0 1
19620: PPUSH
19621: CALL_OW 301
19625: IFFALSE 19573
// end ;
19627: PPOPN 1
19629: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
19630: LD_EXP 35
19634: PUSH
19635: LD_EXP 75
19639: AND
19640: IFFALSE 19652
19642: GO 19644
19644: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
19645: LD_STRING earthquake(getX(game), 0, 32)
19647: PPUSH
19648: CALL_OW 559
19652: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
19653: LD_EXP 35
19657: PUSH
19658: LD_EXP 76
19662: AND
19663: IFFALSE 19754
19665: GO 19667
19667: DISABLE
19668: LD_INT 0
19670: PPUSH
// begin enable ;
19671: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
19672: LD_ADDR_VAR 0 1
19676: PUSH
19677: LD_INT 22
19679: PUSH
19680: LD_OWVAR 2
19684: PUSH
19685: EMPTY
19686: LIST
19687: LIST
19688: PUSH
19689: LD_INT 21
19691: PUSH
19692: LD_INT 2
19694: PUSH
19695: EMPTY
19696: LIST
19697: LIST
19698: PUSH
19699: LD_INT 33
19701: PUSH
19702: LD_INT 3
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: LIST
19713: PPUSH
19714: CALL_OW 69
19718: ST_TO_ADDR
// if not tmp then
19719: LD_VAR 0 1
19723: NOT
19724: IFFALSE 19728
// exit ;
19726: GO 19754
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19728: LD_VAR 0 1
19732: PUSH
19733: LD_INT 1
19735: PPUSH
19736: LD_VAR 0 1
19740: PPUSH
19741: CALL_OW 12
19745: ARRAY
19746: PPUSH
19747: LD_INT 1
19749: PPUSH
19750: CALL_OW 234
// end ;
19754: PPOPN 1
19756: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19757: LD_EXP 35
19761: PUSH
19762: LD_EXP 77
19766: AND
19767: IFFALSE 19908
19769: GO 19771
19771: DISABLE
19772: LD_INT 0
19774: PPUSH
19775: PPUSH
19776: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19777: LD_ADDR_VAR 0 3
19781: PUSH
19782: LD_INT 22
19784: PUSH
19785: LD_OWVAR 2
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: PUSH
19794: LD_INT 25
19796: PUSH
19797: LD_INT 1
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PPUSH
19808: CALL_OW 69
19812: ST_TO_ADDR
// if not tmp then
19813: LD_VAR 0 3
19817: NOT
19818: IFFALSE 19822
// exit ;
19820: GO 19908
// un := tmp [ rand ( 1 , tmp ) ] ;
19822: LD_ADDR_VAR 0 2
19826: PUSH
19827: LD_VAR 0 3
19831: PUSH
19832: LD_INT 1
19834: PPUSH
19835: LD_VAR 0 3
19839: PPUSH
19840: CALL_OW 12
19844: ARRAY
19845: ST_TO_ADDR
// if Crawls ( un ) then
19846: LD_VAR 0 2
19850: PPUSH
19851: CALL_OW 318
19855: IFFALSE 19866
// ComWalk ( un ) ;
19857: LD_VAR 0 2
19861: PPUSH
19862: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19866: LD_VAR 0 2
19870: PPUSH
19871: LD_INT 9
19873: PPUSH
19874: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19878: LD_INT 28
19880: PPUSH
19881: LD_OWVAR 2
19885: PPUSH
19886: LD_INT 2
19888: PPUSH
19889: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19893: LD_INT 29
19895: PPUSH
19896: LD_OWVAR 2
19900: PPUSH
19901: LD_INT 2
19903: PPUSH
19904: CALL_OW 322
// end ;
19908: PPOPN 3
19910: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19911: LD_EXP 35
19915: PUSH
19916: LD_EXP 78
19920: AND
19921: IFFALSE 20032
19923: GO 19925
19925: DISABLE
19926: LD_INT 0
19928: PPUSH
19929: PPUSH
19930: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19931: LD_ADDR_VAR 0 3
19935: PUSH
19936: LD_INT 22
19938: PUSH
19939: LD_OWVAR 2
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: PUSH
19948: LD_INT 25
19950: PUSH
19951: LD_INT 1
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: PPUSH
19962: CALL_OW 69
19966: ST_TO_ADDR
// if not tmp then
19967: LD_VAR 0 3
19971: NOT
19972: IFFALSE 19976
// exit ;
19974: GO 20032
// un := tmp [ rand ( 1 , tmp ) ] ;
19976: LD_ADDR_VAR 0 2
19980: PUSH
19981: LD_VAR 0 3
19985: PUSH
19986: LD_INT 1
19988: PPUSH
19989: LD_VAR 0 3
19993: PPUSH
19994: CALL_OW 12
19998: ARRAY
19999: ST_TO_ADDR
// if Crawls ( un ) then
20000: LD_VAR 0 2
20004: PPUSH
20005: CALL_OW 318
20009: IFFALSE 20020
// ComWalk ( un ) ;
20011: LD_VAR 0 2
20015: PPUSH
20016: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20020: LD_VAR 0 2
20024: PPUSH
20025: LD_INT 8
20027: PPUSH
20028: CALL_OW 336
// end ;
20032: PPOPN 3
20034: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20035: LD_EXP 35
20039: PUSH
20040: LD_EXP 79
20044: AND
20045: IFFALSE 20189
20047: GO 20049
20049: DISABLE
20050: LD_INT 0
20052: PPUSH
20053: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20054: LD_ADDR_VAR 0 2
20058: PUSH
20059: LD_INT 22
20061: PUSH
20062: LD_OWVAR 2
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: PUSH
20071: LD_INT 21
20073: PUSH
20074: LD_INT 2
20076: PUSH
20077: EMPTY
20078: LIST
20079: LIST
20080: PUSH
20081: LD_INT 2
20083: PUSH
20084: LD_INT 34
20086: PUSH
20087: LD_INT 12
20089: PUSH
20090: EMPTY
20091: LIST
20092: LIST
20093: PUSH
20094: LD_INT 34
20096: PUSH
20097: LD_INT 51
20099: PUSH
20100: EMPTY
20101: LIST
20102: LIST
20103: PUSH
20104: LD_INT 34
20106: PUSH
20107: LD_INT 32
20109: PUSH
20110: EMPTY
20111: LIST
20112: LIST
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: PUSH
20120: EMPTY
20121: LIST
20122: LIST
20123: LIST
20124: PPUSH
20125: CALL_OW 69
20129: ST_TO_ADDR
// if not tmp then
20130: LD_VAR 0 2
20134: NOT
20135: IFFALSE 20139
// exit ;
20137: GO 20189
// for i in tmp do
20139: LD_ADDR_VAR 0 1
20143: PUSH
20144: LD_VAR 0 2
20148: PUSH
20149: FOR_IN
20150: IFFALSE 20187
// if GetCargo ( i , mat_artifact ) = 0 then
20152: LD_VAR 0 1
20156: PPUSH
20157: LD_INT 4
20159: PPUSH
20160: CALL_OW 289
20164: PUSH
20165: LD_INT 0
20167: EQUAL
20168: IFFALSE 20185
// SetCargo ( i , mat_siberit , 100 ) ;
20170: LD_VAR 0 1
20174: PPUSH
20175: LD_INT 3
20177: PPUSH
20178: LD_INT 100
20180: PPUSH
20181: CALL_OW 290
20185: GO 20149
20187: POP
20188: POP
// end ;
20189: PPOPN 2
20191: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20192: LD_EXP 35
20196: PUSH
20197: LD_EXP 80
20201: AND
20202: IFFALSE 20355
20204: GO 20206
20206: DISABLE
20207: LD_INT 0
20209: PPUSH
20210: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20211: LD_ADDR_VAR 0 2
20215: PUSH
20216: LD_INT 22
20218: PUSH
20219: LD_OWVAR 2
20223: PUSH
20224: EMPTY
20225: LIST
20226: LIST
20227: PPUSH
20228: CALL_OW 69
20232: ST_TO_ADDR
// if not tmp then
20233: LD_VAR 0 2
20237: NOT
20238: IFFALSE 20242
// exit ;
20240: GO 20355
// for i := 1 to 2 do
20242: LD_ADDR_VAR 0 1
20246: PUSH
20247: DOUBLE
20248: LD_INT 1
20250: DEC
20251: ST_TO_ADDR
20252: LD_INT 2
20254: PUSH
20255: FOR_TO
20256: IFFALSE 20353
// begin uc_side := your_side ;
20258: LD_ADDR_OWVAR 20
20262: PUSH
20263: LD_OWVAR 2
20267: ST_TO_ADDR
// uc_nation := nation_american ;
20268: LD_ADDR_OWVAR 21
20272: PUSH
20273: LD_INT 1
20275: ST_TO_ADDR
// vc_chassis := us_morphling ;
20276: LD_ADDR_OWVAR 37
20280: PUSH
20281: LD_INT 5
20283: ST_TO_ADDR
// vc_engine := engine_siberite ;
20284: LD_ADDR_OWVAR 39
20288: PUSH
20289: LD_INT 3
20291: ST_TO_ADDR
// vc_control := control_computer ;
20292: LD_ADDR_OWVAR 38
20296: PUSH
20297: LD_INT 3
20299: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20300: LD_ADDR_OWVAR 40
20304: PUSH
20305: LD_INT 10
20307: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
20308: CALL_OW 45
20312: PPUSH
20313: LD_VAR 0 2
20317: PUSH
20318: LD_INT 1
20320: ARRAY
20321: PPUSH
20322: CALL_OW 250
20326: PPUSH
20327: LD_VAR 0 2
20331: PUSH
20332: LD_INT 1
20334: ARRAY
20335: PPUSH
20336: CALL_OW 251
20340: PPUSH
20341: LD_INT 12
20343: PPUSH
20344: LD_INT 1
20346: PPUSH
20347: CALL_OW 50
// end ;
20351: GO 20255
20353: POP
20354: POP
// end ;
20355: PPOPN 2
20357: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20358: LD_EXP 35
20362: PUSH
20363: LD_EXP 81
20367: AND
20368: IFFALSE 20590
20370: GO 20372
20372: DISABLE
20373: LD_INT 0
20375: PPUSH
20376: PPUSH
20377: PPUSH
20378: PPUSH
20379: PPUSH
20380: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20381: LD_ADDR_VAR 0 6
20385: PUSH
20386: LD_INT 22
20388: PUSH
20389: LD_OWVAR 2
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: PUSH
20398: LD_INT 21
20400: PUSH
20401: LD_INT 1
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: PUSH
20408: LD_INT 3
20410: PUSH
20411: LD_INT 23
20413: PUSH
20414: LD_INT 0
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: LIST
20429: PPUSH
20430: CALL_OW 69
20434: ST_TO_ADDR
// if not tmp then
20435: LD_VAR 0 6
20439: NOT
20440: IFFALSE 20444
// exit ;
20442: GO 20590
// s1 := rand ( 1 , 4 ) ;
20444: LD_ADDR_VAR 0 2
20448: PUSH
20449: LD_INT 1
20451: PPUSH
20452: LD_INT 4
20454: PPUSH
20455: CALL_OW 12
20459: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20460: LD_ADDR_VAR 0 4
20464: PUSH
20465: LD_VAR 0 6
20469: PUSH
20470: LD_INT 1
20472: ARRAY
20473: PPUSH
20474: LD_VAR 0 2
20478: PPUSH
20479: CALL_OW 259
20483: ST_TO_ADDR
// if s1 = 1 then
20484: LD_VAR 0 2
20488: PUSH
20489: LD_INT 1
20491: EQUAL
20492: IFFALSE 20512
// s2 := rand ( 2 , 4 ) else
20494: LD_ADDR_VAR 0 3
20498: PUSH
20499: LD_INT 2
20501: PPUSH
20502: LD_INT 4
20504: PPUSH
20505: CALL_OW 12
20509: ST_TO_ADDR
20510: GO 20520
// s2 := 1 ;
20512: LD_ADDR_VAR 0 3
20516: PUSH
20517: LD_INT 1
20519: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20520: LD_ADDR_VAR 0 5
20524: PUSH
20525: LD_VAR 0 6
20529: PUSH
20530: LD_INT 1
20532: ARRAY
20533: PPUSH
20534: LD_VAR 0 3
20538: PPUSH
20539: CALL_OW 259
20543: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20544: LD_VAR 0 6
20548: PUSH
20549: LD_INT 1
20551: ARRAY
20552: PPUSH
20553: LD_VAR 0 2
20557: PPUSH
20558: LD_VAR 0 5
20562: PPUSH
20563: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
20567: LD_VAR 0 6
20571: PUSH
20572: LD_INT 1
20574: ARRAY
20575: PPUSH
20576: LD_VAR 0 3
20580: PPUSH
20581: LD_VAR 0 4
20585: PPUSH
20586: CALL_OW 237
// end ;
20590: PPOPN 6
20592: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
20593: LD_EXP 35
20597: PUSH
20598: LD_EXP 82
20602: AND
20603: IFFALSE 20682
20605: GO 20607
20607: DISABLE
20608: LD_INT 0
20610: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
20611: LD_ADDR_VAR 0 1
20615: PUSH
20616: LD_INT 22
20618: PUSH
20619: LD_OWVAR 2
20623: PUSH
20624: EMPTY
20625: LIST
20626: LIST
20627: PUSH
20628: LD_INT 30
20630: PUSH
20631: LD_INT 3
20633: PUSH
20634: EMPTY
20635: LIST
20636: LIST
20637: PUSH
20638: EMPTY
20639: LIST
20640: LIST
20641: PPUSH
20642: CALL_OW 69
20646: ST_TO_ADDR
// if not tmp then
20647: LD_VAR 0 1
20651: NOT
20652: IFFALSE 20656
// exit ;
20654: GO 20682
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20656: LD_VAR 0 1
20660: PUSH
20661: LD_INT 1
20663: PPUSH
20664: LD_VAR 0 1
20668: PPUSH
20669: CALL_OW 12
20673: ARRAY
20674: PPUSH
20675: LD_INT 1
20677: PPUSH
20678: CALL_OW 234
// end ;
20682: PPOPN 1
20684: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20685: LD_EXP 35
20689: PUSH
20690: LD_EXP 83
20694: AND
20695: IFFALSE 20807
20697: GO 20699
20699: DISABLE
20700: LD_INT 0
20702: PPUSH
20703: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20704: LD_ADDR_VAR 0 2
20708: PUSH
20709: LD_INT 22
20711: PUSH
20712: LD_OWVAR 2
20716: PUSH
20717: EMPTY
20718: LIST
20719: LIST
20720: PUSH
20721: LD_INT 2
20723: PUSH
20724: LD_INT 30
20726: PUSH
20727: LD_INT 27
20729: PUSH
20730: EMPTY
20731: LIST
20732: LIST
20733: PUSH
20734: LD_INT 30
20736: PUSH
20737: LD_INT 26
20739: PUSH
20740: EMPTY
20741: LIST
20742: LIST
20743: PUSH
20744: LD_INT 30
20746: PUSH
20747: LD_INT 28
20749: PUSH
20750: EMPTY
20751: LIST
20752: LIST
20753: PUSH
20754: EMPTY
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: PPUSH
20764: CALL_OW 69
20768: ST_TO_ADDR
// if not tmp then
20769: LD_VAR 0 2
20773: NOT
20774: IFFALSE 20778
// exit ;
20776: GO 20807
// for i in tmp do
20778: LD_ADDR_VAR 0 1
20782: PUSH
20783: LD_VAR 0 2
20787: PUSH
20788: FOR_IN
20789: IFFALSE 20805
// SetLives ( i , 1 ) ;
20791: LD_VAR 0 1
20795: PPUSH
20796: LD_INT 1
20798: PPUSH
20799: CALL_OW 234
20803: GO 20788
20805: POP
20806: POP
// end ;
20807: PPOPN 2
20809: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20810: LD_EXP 35
20814: PUSH
20815: LD_EXP 84
20819: AND
20820: IFFALSE 21094
20822: GO 20824
20824: DISABLE
20825: LD_INT 0
20827: PPUSH
20828: PPUSH
20829: PPUSH
// begin i := rand ( 1 , 7 ) ;
20830: LD_ADDR_VAR 0 1
20834: PUSH
20835: LD_INT 1
20837: PPUSH
20838: LD_INT 7
20840: PPUSH
20841: CALL_OW 12
20845: ST_TO_ADDR
// case i of 1 :
20846: LD_VAR 0 1
20850: PUSH
20851: LD_INT 1
20853: DOUBLE
20854: EQUAL
20855: IFTRUE 20859
20857: GO 20869
20859: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20860: LD_STRING earthquake(getX(game), 0, 32)
20862: PPUSH
20863: CALL_OW 559
20867: GO 21094
20869: LD_INT 2
20871: DOUBLE
20872: EQUAL
20873: IFTRUE 20877
20875: GO 20891
20877: POP
// begin ToLua ( displayStucuk(); ) ;
20878: LD_STRING displayStucuk();
20880: PPUSH
20881: CALL_OW 559
// ResetFog ;
20885: CALL_OW 335
// end ; 3 :
20889: GO 21094
20891: LD_INT 3
20893: DOUBLE
20894: EQUAL
20895: IFTRUE 20899
20897: GO 21003
20899: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20900: LD_ADDR_VAR 0 2
20904: PUSH
20905: LD_INT 22
20907: PUSH
20908: LD_OWVAR 2
20912: PUSH
20913: EMPTY
20914: LIST
20915: LIST
20916: PUSH
20917: LD_INT 25
20919: PUSH
20920: LD_INT 1
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: PPUSH
20931: CALL_OW 69
20935: ST_TO_ADDR
// if not tmp then
20936: LD_VAR 0 2
20940: NOT
20941: IFFALSE 20945
// exit ;
20943: GO 21094
// un := tmp [ rand ( 1 , tmp ) ] ;
20945: LD_ADDR_VAR 0 3
20949: PUSH
20950: LD_VAR 0 2
20954: PUSH
20955: LD_INT 1
20957: PPUSH
20958: LD_VAR 0 2
20962: PPUSH
20963: CALL_OW 12
20967: ARRAY
20968: ST_TO_ADDR
// if Crawls ( un ) then
20969: LD_VAR 0 3
20973: PPUSH
20974: CALL_OW 318
20978: IFFALSE 20989
// ComWalk ( un ) ;
20980: LD_VAR 0 3
20984: PPUSH
20985: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20989: LD_VAR 0 3
20993: PPUSH
20994: LD_INT 8
20996: PPUSH
20997: CALL_OW 336
// end ; 4 :
21001: GO 21094
21003: LD_INT 4
21005: DOUBLE
21006: EQUAL
21007: IFTRUE 21011
21009: GO 21072
21011: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21012: LD_ADDR_VAR 0 2
21016: PUSH
21017: LD_INT 22
21019: PUSH
21020: LD_OWVAR 2
21024: PUSH
21025: EMPTY
21026: LIST
21027: LIST
21028: PUSH
21029: LD_INT 30
21031: PUSH
21032: LD_INT 29
21034: PUSH
21035: EMPTY
21036: LIST
21037: LIST
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: PPUSH
21043: CALL_OW 69
21047: ST_TO_ADDR
// if not tmp then
21048: LD_VAR 0 2
21052: NOT
21053: IFFALSE 21057
// exit ;
21055: GO 21094
// DestroyUnit ( tmp [ 1 ] ) ;
21057: LD_VAR 0 2
21061: PUSH
21062: LD_INT 1
21064: ARRAY
21065: PPUSH
21066: CALL_OW 65
// end ; 5 .. 7 :
21070: GO 21094
21072: LD_INT 5
21074: DOUBLE
21075: GREATEREQUAL
21076: IFFALSE 21084
21078: LD_INT 7
21080: DOUBLE
21081: LESSEQUAL
21082: IFTRUE 21086
21084: GO 21093
21086: POP
// StreamSibBomb ; end ;
21087: CALL 17374 0 0
21091: GO 21094
21093: POP
// end ;
21094: PPOPN 3
21096: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21097: LD_EXP 35
21101: PUSH
21102: LD_EXP 85
21106: AND
21107: IFFALSE 21263
21109: GO 21111
21111: DISABLE
21112: LD_INT 0
21114: PPUSH
21115: PPUSH
21116: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21117: LD_ADDR_VAR 0 2
21121: PUSH
21122: LD_INT 81
21124: PUSH
21125: LD_OWVAR 2
21129: PUSH
21130: EMPTY
21131: LIST
21132: LIST
21133: PUSH
21134: LD_INT 2
21136: PUSH
21137: LD_INT 21
21139: PUSH
21140: LD_INT 1
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: PUSH
21147: LD_INT 21
21149: PUSH
21150: LD_INT 2
21152: PUSH
21153: EMPTY
21154: LIST
21155: LIST
21156: PUSH
21157: EMPTY
21158: LIST
21159: LIST
21160: LIST
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: PPUSH
21166: CALL_OW 69
21170: ST_TO_ADDR
// if not tmp then
21171: LD_VAR 0 2
21175: NOT
21176: IFFALSE 21180
// exit ;
21178: GO 21263
// p := 0 ;
21180: LD_ADDR_VAR 0 3
21184: PUSH
21185: LD_INT 0
21187: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21188: LD_INT 35
21190: PPUSH
21191: CALL_OW 67
// p := p + 1 ;
21195: LD_ADDR_VAR 0 3
21199: PUSH
21200: LD_VAR 0 3
21204: PUSH
21205: LD_INT 1
21207: PLUS
21208: ST_TO_ADDR
// for i in tmp do
21209: LD_ADDR_VAR 0 1
21213: PUSH
21214: LD_VAR 0 2
21218: PUSH
21219: FOR_IN
21220: IFFALSE 21251
// if GetLives ( i ) < 1000 then
21222: LD_VAR 0 1
21226: PPUSH
21227: CALL_OW 256
21231: PUSH
21232: LD_INT 1000
21234: LESS
21235: IFFALSE 21249
// SetLives ( i , 1000 ) ;
21237: LD_VAR 0 1
21241: PPUSH
21242: LD_INT 1000
21244: PPUSH
21245: CALL_OW 234
21249: GO 21219
21251: POP
21252: POP
// until p > 20 ;
21253: LD_VAR 0 3
21257: PUSH
21258: LD_INT 20
21260: GREATER
21261: IFFALSE 21188
// end ;
21263: PPOPN 3
21265: END
// every 0 0$1 trigger StreamModeActive and sTime do
21266: LD_EXP 35
21270: PUSH
21271: LD_EXP 86
21275: AND
21276: IFFALSE 21311
21278: GO 21280
21280: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21281: LD_INT 28
21283: PPUSH
21284: LD_OWVAR 2
21288: PPUSH
21289: LD_INT 2
21291: PPUSH
21292: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21296: LD_INT 30
21298: PPUSH
21299: LD_OWVAR 2
21303: PPUSH
21304: LD_INT 2
21306: PPUSH
21307: CALL_OW 322
// end ;
21311: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21312: LD_EXP 35
21316: PUSH
21317: LD_EXP 87
21321: AND
21322: IFFALSE 21443
21324: GO 21326
21326: DISABLE
21327: LD_INT 0
21329: PPUSH
21330: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21331: LD_ADDR_VAR 0 2
21335: PUSH
21336: LD_INT 22
21338: PUSH
21339: LD_OWVAR 2
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: PUSH
21348: LD_INT 21
21350: PUSH
21351: LD_INT 1
21353: PUSH
21354: EMPTY
21355: LIST
21356: LIST
21357: PUSH
21358: LD_INT 3
21360: PUSH
21361: LD_INT 23
21363: PUSH
21364: LD_INT 0
21366: PUSH
21367: EMPTY
21368: LIST
21369: LIST
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: LIST
21379: PPUSH
21380: CALL_OW 69
21384: ST_TO_ADDR
// if not tmp then
21385: LD_VAR 0 2
21389: NOT
21390: IFFALSE 21394
// exit ;
21392: GO 21443
// for i in tmp do
21394: LD_ADDR_VAR 0 1
21398: PUSH
21399: LD_VAR 0 2
21403: PUSH
21404: FOR_IN
21405: IFFALSE 21441
// begin if Crawls ( i ) then
21407: LD_VAR 0 1
21411: PPUSH
21412: CALL_OW 318
21416: IFFALSE 21427
// ComWalk ( i ) ;
21418: LD_VAR 0 1
21422: PPUSH
21423: CALL_OW 138
// SetClass ( i , 2 ) ;
21427: LD_VAR 0 1
21431: PPUSH
21432: LD_INT 2
21434: PPUSH
21435: CALL_OW 336
// end ;
21439: GO 21404
21441: POP
21442: POP
// end ;
21443: PPOPN 2
21445: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21446: LD_EXP 35
21450: PUSH
21451: LD_EXP 88
21455: AND
21456: IFFALSE 21737
21458: GO 21460
21460: DISABLE
21461: LD_INT 0
21463: PPUSH
21464: PPUSH
21465: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21466: LD_OWVAR 2
21470: PPUSH
21471: LD_INT 9
21473: PPUSH
21474: LD_INT 1
21476: PPUSH
21477: LD_INT 1
21479: PPUSH
21480: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21484: LD_INT 9
21486: PPUSH
21487: LD_OWVAR 2
21491: PPUSH
21492: CALL_OW 343
// uc_side := 9 ;
21496: LD_ADDR_OWVAR 20
21500: PUSH
21501: LD_INT 9
21503: ST_TO_ADDR
// uc_nation := 2 ;
21504: LD_ADDR_OWVAR 21
21508: PUSH
21509: LD_INT 2
21511: ST_TO_ADDR
// hc_name := Dark Warrior ;
21512: LD_ADDR_OWVAR 26
21516: PUSH
21517: LD_STRING Dark Warrior
21519: ST_TO_ADDR
// hc_gallery :=  ;
21520: LD_ADDR_OWVAR 33
21524: PUSH
21525: LD_STRING 
21527: ST_TO_ADDR
// hc_noskilllimit := true ;
21528: LD_ADDR_OWVAR 76
21532: PUSH
21533: LD_INT 1
21535: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
21536: LD_ADDR_OWVAR 31
21540: PUSH
21541: LD_INT 30
21543: PUSH
21544: LD_INT 30
21546: PUSH
21547: LD_INT 30
21549: PUSH
21550: LD_INT 30
21552: PUSH
21553: EMPTY
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: ST_TO_ADDR
// un := CreateHuman ;
21559: LD_ADDR_VAR 0 3
21563: PUSH
21564: CALL_OW 44
21568: ST_TO_ADDR
// hc_noskilllimit := false ;
21569: LD_ADDR_OWVAR 76
21573: PUSH
21574: LD_INT 0
21576: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21577: LD_VAR 0 3
21581: PPUSH
21582: LD_INT 1
21584: PPUSH
21585: CALL_OW 51
// p := 0 ;
21589: LD_ADDR_VAR 0 2
21593: PUSH
21594: LD_INT 0
21596: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21597: LD_INT 35
21599: PPUSH
21600: CALL_OW 67
// p := p + 1 ;
21604: LD_ADDR_VAR 0 2
21608: PUSH
21609: LD_VAR 0 2
21613: PUSH
21614: LD_INT 1
21616: PLUS
21617: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
21618: LD_VAR 0 3
21622: PPUSH
21623: CALL_OW 256
21627: PUSH
21628: LD_INT 1000
21630: LESS
21631: IFFALSE 21645
// SetLives ( un , 1000 ) ;
21633: LD_VAR 0 3
21637: PPUSH
21638: LD_INT 1000
21640: PPUSH
21641: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21645: LD_VAR 0 3
21649: PPUSH
21650: LD_INT 81
21652: PUSH
21653: LD_OWVAR 2
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: PUSH
21662: LD_INT 91
21664: PUSH
21665: LD_VAR 0 3
21669: PUSH
21670: LD_INT 30
21672: PUSH
21673: EMPTY
21674: LIST
21675: LIST
21676: LIST
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: PPUSH
21682: CALL_OW 69
21686: PPUSH
21687: LD_VAR 0 3
21691: PPUSH
21692: CALL_OW 74
21696: PPUSH
21697: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
21701: LD_VAR 0 2
21705: PUSH
21706: LD_INT 60
21708: GREATER
21709: PUSH
21710: LD_VAR 0 3
21714: PPUSH
21715: CALL_OW 301
21719: OR
21720: IFFALSE 21597
// if un then
21722: LD_VAR 0 3
21726: IFFALSE 21737
// RemoveUnit ( un ) ;
21728: LD_VAR 0 3
21732: PPUSH
21733: CALL_OW 64
// end ; end_of_file
21737: PPOPN 3
21739: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
21740: LD_INT 0
21742: PPUSH
21743: PPUSH
21744: PPUSH
21745: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21746: LD_VAR 0 1
21750: PPUSH
21751: CALL_OW 264
21755: PUSH
21756: LD_EXP 34
21760: EQUAL
21761: IFFALSE 21833
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21763: LD_INT 68
21765: PPUSH
21766: LD_VAR 0 1
21770: PPUSH
21771: CALL_OW 255
21775: PPUSH
21776: CALL_OW 321
21780: PUSH
21781: LD_INT 2
21783: EQUAL
21784: IFFALSE 21796
// eff := 70 else
21786: LD_ADDR_VAR 0 4
21790: PUSH
21791: LD_INT 70
21793: ST_TO_ADDR
21794: GO 21804
// eff := 30 ;
21796: LD_ADDR_VAR 0 4
21800: PUSH
21801: LD_INT 30
21803: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21804: LD_VAR 0 1
21808: PPUSH
21809: CALL_OW 250
21813: PPUSH
21814: LD_VAR 0 1
21818: PPUSH
21819: CALL_OW 251
21823: PPUSH
21824: LD_VAR 0 4
21828: PPUSH
21829: CALL_OW 495
// end ; end ;
21833: LD_VAR 0 2
21837: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21838: LD_INT 0
21840: PPUSH
// end ;
21841: LD_VAR 0 4
21845: RET
// export function SOS_Command ( cmd ) ; begin
21846: LD_INT 0
21848: PPUSH
// end ;
21849: LD_VAR 0 2
21853: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21854: LD_VAR 0 1
21858: PUSH
21859: LD_INT 255
21861: EQUAL
21862: PUSH
21863: LD_VAR 0 2
21867: PPUSH
21868: CALL_OW 264
21872: PUSH
21873: LD_INT 14
21875: PUSH
21876: LD_INT 53
21878: PUSH
21879: EMPTY
21880: LIST
21881: LIST
21882: IN
21883: AND
21884: PUSH
21885: LD_VAR 0 4
21889: PPUSH
21890: LD_VAR 0 5
21894: PPUSH
21895: CALL_OW 488
21899: AND
21900: IFFALSE 21924
// CutTreeXYR ( unit , x , y , 12 ) ;
21902: LD_VAR 0 2
21906: PPUSH
21907: LD_VAR 0 4
21911: PPUSH
21912: LD_VAR 0 5
21916: PPUSH
21917: LD_INT 12
21919: PPUSH
21920: CALL 21927 0 4
// end ;
21924: PPOPN 5
21926: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21927: LD_INT 0
21929: PPUSH
21930: PPUSH
21931: PPUSH
21932: PPUSH
21933: PPUSH
21934: PPUSH
21935: PPUSH
21936: PPUSH
21937: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
21938: LD_VAR 0 1
21942: NOT
21943: PUSH
21944: LD_VAR 0 2
21948: PPUSH
21949: LD_VAR 0 3
21953: PPUSH
21954: CALL_OW 488
21958: NOT
21959: OR
21960: PUSH
21961: LD_VAR 0 4
21965: NOT
21966: OR
21967: IFFALSE 21971
// exit ;
21969: GO 22311
// list := [ ] ;
21971: LD_ADDR_VAR 0 13
21975: PUSH
21976: EMPTY
21977: ST_TO_ADDR
// if x - r < 0 then
21978: LD_VAR 0 2
21982: PUSH
21983: LD_VAR 0 4
21987: MINUS
21988: PUSH
21989: LD_INT 0
21991: LESS
21992: IFFALSE 22004
// min_x := 0 else
21994: LD_ADDR_VAR 0 7
21998: PUSH
21999: LD_INT 0
22001: ST_TO_ADDR
22002: GO 22020
// min_x := x - r ;
22004: LD_ADDR_VAR 0 7
22008: PUSH
22009: LD_VAR 0 2
22013: PUSH
22014: LD_VAR 0 4
22018: MINUS
22019: ST_TO_ADDR
// if y - r < 0 then
22020: LD_VAR 0 3
22024: PUSH
22025: LD_VAR 0 4
22029: MINUS
22030: PUSH
22031: LD_INT 0
22033: LESS
22034: IFFALSE 22046
// min_y := 0 else
22036: LD_ADDR_VAR 0 8
22040: PUSH
22041: LD_INT 0
22043: ST_TO_ADDR
22044: GO 22062
// min_y := y - r ;
22046: LD_ADDR_VAR 0 8
22050: PUSH
22051: LD_VAR 0 3
22055: PUSH
22056: LD_VAR 0 4
22060: MINUS
22061: ST_TO_ADDR
// max_x := x + r ;
22062: LD_ADDR_VAR 0 9
22066: PUSH
22067: LD_VAR 0 2
22071: PUSH
22072: LD_VAR 0 4
22076: PLUS
22077: ST_TO_ADDR
// max_y := y + r ;
22078: LD_ADDR_VAR 0 10
22082: PUSH
22083: LD_VAR 0 3
22087: PUSH
22088: LD_VAR 0 4
22092: PLUS
22093: ST_TO_ADDR
// for _x = min_x to max_x do
22094: LD_ADDR_VAR 0 11
22098: PUSH
22099: DOUBLE
22100: LD_VAR 0 7
22104: DEC
22105: ST_TO_ADDR
22106: LD_VAR 0 9
22110: PUSH
22111: FOR_TO
22112: IFFALSE 22229
// for _y = min_y to max_y do
22114: LD_ADDR_VAR 0 12
22118: PUSH
22119: DOUBLE
22120: LD_VAR 0 8
22124: DEC
22125: ST_TO_ADDR
22126: LD_VAR 0 10
22130: PUSH
22131: FOR_TO
22132: IFFALSE 22225
// begin if not ValidHex ( _x , _y ) then
22134: LD_VAR 0 11
22138: PPUSH
22139: LD_VAR 0 12
22143: PPUSH
22144: CALL_OW 488
22148: NOT
22149: IFFALSE 22153
// continue ;
22151: GO 22131
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22153: LD_VAR 0 11
22157: PPUSH
22158: LD_VAR 0 12
22162: PPUSH
22163: CALL_OW 351
22167: PUSH
22168: LD_VAR 0 11
22172: PPUSH
22173: LD_VAR 0 12
22177: PPUSH
22178: CALL_OW 554
22182: AND
22183: IFFALSE 22223
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22185: LD_ADDR_VAR 0 13
22189: PUSH
22190: LD_VAR 0 13
22194: PPUSH
22195: LD_VAR 0 13
22199: PUSH
22200: LD_INT 1
22202: PLUS
22203: PPUSH
22204: LD_VAR 0 11
22208: PUSH
22209: LD_VAR 0 12
22213: PUSH
22214: EMPTY
22215: LIST
22216: LIST
22217: PPUSH
22218: CALL_OW 2
22222: ST_TO_ADDR
// end ;
22223: GO 22131
22225: POP
22226: POP
22227: GO 22111
22229: POP
22230: POP
// if not list then
22231: LD_VAR 0 13
22235: NOT
22236: IFFALSE 22240
// exit ;
22238: GO 22311
// for i in list do
22240: LD_ADDR_VAR 0 6
22244: PUSH
22245: LD_VAR 0 13
22249: PUSH
22250: FOR_IN
22251: IFFALSE 22309
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22253: LD_VAR 0 1
22257: PPUSH
22258: LD_STRING M
22260: PUSH
22261: LD_VAR 0 6
22265: PUSH
22266: LD_INT 1
22268: ARRAY
22269: PUSH
22270: LD_VAR 0 6
22274: PUSH
22275: LD_INT 2
22277: ARRAY
22278: PUSH
22279: LD_INT 0
22281: PUSH
22282: LD_INT 0
22284: PUSH
22285: LD_INT 0
22287: PUSH
22288: LD_INT 0
22290: PUSH
22291: EMPTY
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: PUSH
22300: EMPTY
22301: LIST
22302: PPUSH
22303: CALL_OW 447
22307: GO 22250
22309: POP
22310: POP
// end ;
22311: LD_VAR 0 5
22315: RET
