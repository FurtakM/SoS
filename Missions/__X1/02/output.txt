// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 46 0 0
// CreateNature ;
  19: CALL 537 0 0
// PrepareAmericans ;
  23: CALL 834 0 0
// PrepareArabian ;
  27: CALL 11619 0 0
// if debug then
  31: LD_EXP 1
  35: IFFALSE 41
// DebugMode ;
  37: CALL 218 0 0
// Action ;
  41: CALL 4691 0 0
// end ;
  45: END
// export debug , prefix , missionStart , aviradzeSpotted , deltaSpotted , spottedBeforeRadio , sciSpotted , aviradzeQuestDone , sciCounterKill , usAlert , usActiveDefend , gladstoneEscaped , timeUntilFarmer , attackDeltaAllowed , trickyMove , usPatrol , trap , lostCounter ; function Init ; begin
  46: LD_INT 0
  48: PPUSH
// debug := false ;
  49: LD_ADDR_EXP 1
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// missionStart := false ;
  57: LD_ADDR_EXP 3
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// aviradzeSpotted := false ;
  65: LD_ADDR_EXP 4
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// deltaSpotted := false ;
  73: LD_ADDR_EXP 5
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// sciSpotted := false ;
  81: LD_ADDR_EXP 7
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// sciCounterKill := 0 ;
  89: LD_ADDR_EXP 9
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// aviradzeQuestDone := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// attackDeltaAllowed := false ;
 105: LD_ADDR_EXP 14
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usAlert := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// usActiveDefend := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// usPatrol := [ ] ;
 129: LD_ADDR_EXP 16
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// timeUntilFarmer := [ 40 40$00 , 30 30$00 , 20 20$00 , 15 15$00 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 13
 140: PUSH
 141: LD_INT 84000
 143: PUSH
 144: LD_INT 63000
 146: PUSH
 147: LD_INT 42000
 149: PUSH
 150: LD_INT 31500
 152: PUSH
 153: EMPTY
 154: LIST
 155: LIST
 156: LIST
 157: LIST
 158: PUSH
 159: LD_OWVAR 67
 163: ARRAY
 164: ST_TO_ADDR
// trickyMove := false ;
 165: LD_ADDR_EXP 15
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// gladstoneEscaped := false ;
 173: LD_ADDR_EXP 12
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// prefix := 01_ ;
 181: LD_ADDR_EXP 2
 185: PUSH
 186: LD_STRING 01_
 188: ST_TO_ADDR
// trap := 0 ;
 189: LD_ADDR_EXP 17
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// lostCounter := false ;
 197: LD_ADDR_EXP 18
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// spottedBeforeRadio := false ;
 205: LD_ADDR_EXP 6
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// end ;
 213: LD_VAR 0 1
 217: RET
// function DebugMode ; begin
 218: LD_INT 0
 220: PPUSH
// FogOff ( 1 ) ;
 221: LD_INT 1
 223: PPUSH
 224: CALL_OW 344
// Difficulty := 2 ;
 228: LD_ADDR_OWVAR 67
 232: PUSH
 233: LD_INT 2
 235: ST_TO_ADDR
// end ; end_of_file
 236: LD_VAR 0 1
 240: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 241: LD_INT 0
 243: PPUSH
// uc_side := side ;
 244: LD_ADDR_OWVAR 20
 248: PUSH
 249: LD_VAR 0 1
 253: ST_TO_ADDR
// uc_nation := nation ;
 254: LD_ADDR_OWVAR 21
 258: PUSH
 259: LD_VAR 0 2
 263: ST_TO_ADDR
// vc_chassis := chassis ;
 264: LD_ADDR_OWVAR 37
 268: PUSH
 269: LD_VAR 0 3
 273: ST_TO_ADDR
// vc_engine := engine ;
 274: LD_ADDR_OWVAR 39
 278: PUSH
 279: LD_VAR 0 4
 283: ST_TO_ADDR
// vc_control := control ;
 284: LD_ADDR_OWVAR 38
 288: PUSH
 289: LD_VAR 0 5
 293: ST_TO_ADDR
// vc_weapon := weapon ;
 294: LD_ADDR_OWVAR 40
 298: PUSH
 299: LD_VAR 0 6
 303: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 304: LD_ADDR_OWVAR 41
 308: PUSH
 309: LD_VAR 0 7
 313: ST_TO_ADDR
// result := CreateVehicle ;
 314: LD_ADDR_VAR 0 8
 318: PUSH
 319: CALL_OW 45
 323: ST_TO_ADDR
// end ;
 324: LD_VAR 0 8
 328: RET
// export function SayX ( units , ident ) ; var i ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
// result := false ;
 333: LD_ADDR_VAR 0 3
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// if not units then
 341: LD_VAR 0 1
 345: NOT
 346: IFFALSE 350
// exit ;
 348: GO 404
// for i in units do
 350: LD_ADDR_VAR 0 4
 354: PUSH
 355: LD_VAR 0 1
 359: PUSH
 360: FOR_IN
 361: IFFALSE 402
// if IsOk ( i ) then
 363: LD_VAR 0 4
 367: PPUSH
 368: CALL_OW 302
 372: IFFALSE 400
// begin Say ( i , ident ) ;
 374: LD_VAR 0 4
 378: PPUSH
 379: LD_VAR 0 2
 383: PPUSH
 384: CALL_OW 88
// result := i ;
 388: LD_ADDR_VAR 0 3
 392: PUSH
 393: LD_VAR 0 4
 397: ST_TO_ADDR
// break ;
 398: GO 402
// end ;
 400: GO 360
 402: POP
 403: POP
// end ;
 404: LD_VAR 0 3
 408: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 409: LD_INT 0
 411: PPUSH
 412: PPUSH
// InitUc ;
 413: CALL_OW 18
// InitHc ;
 417: CALL_OW 19
// uc_side := 0 ;
 421: LD_ADDR_OWVAR 20
 425: PUSH
 426: LD_INT 0
 428: ST_TO_ADDR
// uc_nation := 0 ;
 429: LD_ADDR_OWVAR 21
 433: PUSH
 434: LD_INT 0
 436: ST_TO_ADDR
// for i = 1 to amount do
 437: LD_ADDR_VAR 0 4
 441: PUSH
 442: DOUBLE
 443: LD_INT 1
 445: DEC
 446: ST_TO_ADDR
 447: LD_VAR 0 2
 451: PUSH
 452: FOR_TO
 453: IFFALSE 526
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 455: LD_ADDR_OWVAR 29
 459: PUSH
 460: LD_INT 9
 462: PPUSH
 463: LD_INT 12
 465: PPUSH
 466: CALL_OW 12
 470: PUSH
 471: LD_INT 9
 473: PPUSH
 474: LD_INT 12
 476: PPUSH
 477: CALL_OW 12
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: ST_TO_ADDR
// hc_agressivity := 0 ;
 486: LD_ADDR_OWVAR 35
 490: PUSH
 491: LD_INT 0
 493: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 494: LD_INT 0
 496: PPUSH
 497: LD_INT 12
 499: PPUSH
 500: LD_INT 1
 502: PPUSH
 503: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 507: CALL_OW 44
 511: PPUSH
 512: LD_VAR 0 1
 516: PPUSH
 517: LD_INT 0
 519: PPUSH
 520: CALL_OW 49
// end ;
 524: GO 452
 526: POP
 527: POP
// InitHc ;
 528: CALL_OW 19
// end ;
 532: LD_VAR 0 3
 536: RET
// export function CreateNature ; var i ; begin
 537: LD_INT 0
 539: PPUSH
 540: PPUSH
// SpawnApeman ( forest , 9 ) ;
 541: LD_INT 1
 543: PPUSH
 544: LD_INT 9
 546: PPUSH
 547: CALL 409 0 2
// for i := 1 to 4 do
 551: LD_ADDR_VAR 0 2
 555: PUSH
 556: DOUBLE
 557: LD_INT 1
 559: DEC
 560: ST_TO_ADDR
 561: LD_INT 4
 563: PUSH
 564: FOR_TO
 565: IFFALSE 600
// begin hc_class := 21 ;
 567: LD_ADDR_OWVAR 28
 571: PUSH
 572: LD_INT 21
 574: ST_TO_ADDR
// hc_gallery :=  ;
 575: LD_ADDR_OWVAR 33
 579: PUSH
 580: LD_STRING 
 582: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 583: CALL_OW 44
 587: PPUSH
 588: LD_INT 1
 590: PPUSH
 591: LD_INT 0
 593: PPUSH
 594: CALL_OW 49
// end ;
 598: GO 564
 600: POP
 601: POP
// for i := 1 to 2 do
 602: LD_ADDR_VAR 0 2
 606: PUSH
 607: DOUBLE
 608: LD_INT 1
 610: DEC
 611: ST_TO_ADDR
 612: LD_INT 2
 614: PUSH
 615: FOR_TO
 616: IFFALSE 651
// begin hc_class := 18 ;
 618: LD_ADDR_OWVAR 28
 622: PUSH
 623: LD_INT 18
 625: ST_TO_ADDR
// hc_gallery :=  ;
 626: LD_ADDR_OWVAR 33
 630: PUSH
 631: LD_STRING 
 633: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 634: CALL_OW 44
 638: PPUSH
 639: LD_INT 1
 641: PPUSH
 642: LD_INT 0
 644: PPUSH
 645: CALL_OW 49
// end ;
 649: GO 615
 651: POP
 652: POP
// for i := 1 to 3 do
 653: LD_ADDR_VAR 0 2
 657: PUSH
 658: DOUBLE
 659: LD_INT 1
 661: DEC
 662: ST_TO_ADDR
 663: LD_INT 3
 665: PUSH
 666: FOR_TO
 667: IFFALSE 702
// begin hc_class := 13 ;
 669: LD_ADDR_OWVAR 28
 673: PUSH
 674: LD_INT 13
 676: ST_TO_ADDR
// hc_gallery :=  ;
 677: LD_ADDR_OWVAR 33
 681: PUSH
 682: LD_STRING 
 684: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 685: CALL_OW 44
 689: PPUSH
 690: LD_INT 1
 692: PPUSH
 693: LD_INT 0
 695: PPUSH
 696: CALL_OW 49
// end ;
 700: GO 666
 702: POP
 703: POP
// for i := 1 to 4 do
 704: LD_ADDR_VAR 0 2
 708: PUSH
 709: DOUBLE
 710: LD_INT 1
 712: DEC
 713: ST_TO_ADDR
 714: LD_INT 4
 716: PUSH
 717: FOR_TO
 718: IFFALSE 753
// begin hc_class := class_frog ;
 720: LD_ADDR_OWVAR 28
 724: PUSH
 725: LD_INT 19
 727: ST_TO_ADDR
// hc_gallery :=  ;
 728: LD_ADDR_OWVAR 33
 732: PUSH
 733: LD_STRING 
 735: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 736: CALL_OW 44
 740: PPUSH
 741: LD_INT 8
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: CALL_OW 49
// end ;
 751: GO 717
 753: POP
 754: POP
// end ;
 755: LD_VAR 0 1
 759: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 760: LD_INT 0
 762: PPUSH
 763: PPUSH
 764: PPUSH
// if not observer or not unit then
 765: LD_VAR 0 1
 769: NOT
 770: PUSH
 771: LD_VAR 0 2
 775: NOT
 776: OR
 777: IFFALSE 781
// exit ;
 779: GO 829
// if not See ( GetSide ( observer ) , unit ) then
 781: LD_VAR 0 1
 785: PPUSH
 786: CALL_OW 255
 790: PPUSH
 791: LD_VAR 0 2
 795: PPUSH
 796: CALL_OW 292
 800: NOT
 801: IFFALSE 805
// exit ;
 803: GO 829
// result := GetDistUnits ( observer , unit ) < 12 ;
 805: LD_ADDR_VAR 0 3
 809: PUSH
 810: LD_VAR 0 1
 814: PPUSH
 815: LD_VAR 0 2
 819: PPUSH
 820: CALL_OW 296
 824: PUSH
 825: LD_INT 12
 827: LESS
 828: ST_TO_ADDR
// end ; end_of_file
 829: LD_VAR 0 3
 833: RET
// export Gladstone , Lynch ; export usForces , usSci ; export function PrepareAmericans ; var i , un , veh , tmp , arm ; begin
 834: LD_INT 0
 836: PPUSH
 837: PPUSH
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
// usForces := [ ] ;
 842: LD_ADDR_EXP 21
 846: PUSH
 847: EMPTY
 848: ST_TO_ADDR
// usSci := [ ] ;
 849: LD_ADDR_EXP 22
 853: PUSH
 854: EMPTY
 855: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
 856: LD_INT 1
 858: PPUSH
 859: LD_STRING Delta
 861: PPUSH
 862: CALL_OW 500
// SetResourceType ( GetBase ( Delta ) , mat_cans , 400 ) ;
 866: LD_INT 1
 868: PPUSH
 869: CALL_OW 274
 873: PPUSH
 874: LD_INT 1
 876: PPUSH
 877: LD_INT 400
 879: PPUSH
 880: CALL_OW 277
// SetResourceType ( GetBase ( Delta ) , mat_oil , 80 ) ;
 884: LD_INT 1
 886: PPUSH
 887: CALL_OW 274
 891: PPUSH
 892: LD_INT 2
 894: PPUSH
 895: LD_INT 80
 897: PPUSH
 898: CALL_OW 277
// uc_side := 1 ;
 902: LD_ADDR_OWVAR 20
 906: PUSH
 907: LD_INT 1
 909: ST_TO_ADDR
// uc_nation := 1 ;
 910: LD_ADDR_OWVAR 21
 914: PUSH
 915: LD_INT 1
 917: ST_TO_ADDR
// InitHc ;
 918: CALL_OW 19
// hc_importance := 0 ;
 922: LD_ADDR_OWVAR 32
 926: PUSH
 927: LD_INT 0
 929: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
 930: LD_ADDR_EXP 20
 934: PUSH
 935: LD_STRING Lynch
 937: PPUSH
 938: LD_INT 0
 940: PPUSH
 941: LD_STRING 
 943: PPUSH
 944: CALL 31832 0 3
 948: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false ,  ) ;
 949: LD_ADDR_EXP 19
 953: PUSH
 954: LD_STRING Gladstone
 956: PPUSH
 957: LD_INT 0
 959: PPUSH
 960: LD_STRING 
 962: PPUSH
 963: CALL 31832 0 3
 967: ST_TO_ADDR
// PlaceHumanInUnit ( Lynch , Delta ) ;
 968: LD_EXP 20
 972: PPUSH
 973: LD_INT 1
 975: PPUSH
 976: CALL_OW 52
// PlaceHumanInUnit ( Gladstone , usLab ) ;
 980: LD_EXP 19
 984: PPUSH
 985: LD_INT 3
 987: PPUSH
 988: CALL_OW 52
// for i := 1 to [ 1 , 2 , 2 , 2 ] [ Difficulty ] do
 992: LD_ADDR_VAR 0 2
 996: PUSH
 997: DOUBLE
 998: LD_INT 1
1000: DEC
1001: ST_TO_ADDR
1002: LD_INT 1
1004: PUSH
1005: LD_INT 2
1007: PUSH
1008: LD_INT 2
1010: PUSH
1011: LD_INT 2
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: LIST
1018: LIST
1019: PUSH
1020: LD_OWVAR 67
1024: ARRAY
1025: PUSH
1026: FOR_TO
1027: IFFALSE 1077
// begin PrepareHuman ( false , 2 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
1029: LD_INT 0
1031: PPUSH
1032: LD_INT 2
1034: PPUSH
1035: LD_INT 1
1037: PUSH
1038: LD_INT 2
1040: PUSH
1041: LD_INT 2
1043: PUSH
1044: LD_INT 3
1046: PUSH
1047: EMPTY
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: LD_OWVAR 67
1057: ARRAY
1058: PPUSH
1059: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , Delta ) ;
1063: CALL_OW 44
1067: PPUSH
1068: LD_INT 1
1070: PPUSH
1071: CALL_OW 52
// end ;
1075: GO 1026
1077: POP
1078: POP
// for i := 1 to 7 - Difficulty do
1079: LD_ADDR_VAR 0 2
1083: PUSH
1084: DOUBLE
1085: LD_INT 1
1087: DEC
1088: ST_TO_ADDR
1089: LD_INT 7
1091: PUSH
1092: LD_OWVAR 67
1096: MINUS
1097: PUSH
1098: FOR_TO
1099: IFFALSE 1188
// begin PrepareHuman ( false , 4 , [ 1 , 2 , 2 , 2 ] [ Difficulty ] ) ;
1101: LD_INT 0
1103: PPUSH
1104: LD_INT 4
1106: PPUSH
1107: LD_INT 1
1109: PUSH
1110: LD_INT 2
1112: PUSH
1113: LD_INT 2
1115: PUSH
1116: LD_INT 2
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: LIST
1123: LIST
1124: PUSH
1125: LD_OWVAR 67
1129: ARRAY
1130: PPUSH
1131: CALL_OW 380
// un := CreateHuman ;
1135: LD_ADDR_VAR 0 3
1139: PUSH
1140: CALL_OW 44
1144: ST_TO_ADDR
// PlaceHumanInUnit ( un , usLab ) ;
1145: LD_VAR 0 3
1149: PPUSH
1150: LD_INT 3
1152: PPUSH
1153: CALL_OW 52
// usSci := Replace ( usSci , usSci + 1 , un ) ;
1157: LD_ADDR_EXP 22
1161: PUSH
1162: LD_EXP 22
1166: PPUSH
1167: LD_EXP 22
1171: PUSH
1172: LD_INT 1
1174: PLUS
1175: PPUSH
1176: LD_VAR 0 3
1180: PPUSH
1181: CALL_OW 1
1185: ST_TO_ADDR
// end ;
1186: GO 1098
1188: POP
1189: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
1190: LD_ADDR_VAR 0 6
1194: PUSH
1195: LD_INT 22
1197: PUSH
1198: LD_INT 1
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: PUSH
1205: LD_INT 30
1207: PUSH
1208: LD_INT 4
1210: PUSH
1211: EMPTY
1212: LIST
1213: LIST
1214: PUSH
1215: EMPTY
1216: LIST
1217: LIST
1218: PPUSH
1219: CALL_OW 69
1223: ST_TO_ADDR
// for i := 1 to 3 + [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
1224: LD_ADDR_VAR 0 2
1228: PUSH
1229: DOUBLE
1230: LD_INT 1
1232: DEC
1233: ST_TO_ADDR
1234: LD_INT 3
1236: PUSH
1237: LD_INT 1
1239: PUSH
1240: LD_INT 2
1242: PUSH
1243: LD_INT 2
1245: PUSH
1246: LD_INT 3
1248: PUSH
1249: EMPTY
1250: LIST
1251: LIST
1252: LIST
1253: LIST
1254: PUSH
1255: LD_OWVAR 67
1259: ARRAY
1260: PLUS
1261: PUSH
1262: FOR_TO
1263: IFFALSE 1345
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
1265: LD_INT 0
1267: PPUSH
1268: LD_INT 1
1270: PPUSH
1271: LD_INT 1
1273: PUSH
1274: LD_INT 2
1276: PUSH
1277: LD_INT 3
1279: PUSH
1280: LD_INT 3
1282: PUSH
1283: EMPTY
1284: LIST
1285: LIST
1286: LIST
1287: LIST
1288: PUSH
1289: LD_OWVAR 67
1293: ARRAY
1294: PPUSH
1295: CALL_OW 380
// un := CreateHuman ;
1299: LD_ADDR_VAR 0 3
1303: PUSH
1304: CALL_OW 44
1308: ST_TO_ADDR
// usForces := usForces ^ un ;
1309: LD_ADDR_EXP 21
1313: PUSH
1314: LD_EXP 21
1318: PUSH
1319: LD_VAR 0 3
1323: ADD
1324: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm [ 1 ] ) ;
1325: LD_VAR 0 3
1329: PPUSH
1330: LD_VAR 0 6
1334: PUSH
1335: LD_INT 1
1337: ARRAY
1338: PPUSH
1339: CALL_OW 52
// end ;
1343: GO 1262
1345: POP
1346: POP
// if Difficulty > 1 then
1347: LD_OWVAR 67
1351: PUSH
1352: LD_INT 1
1354: GREATER
1355: IFFALSE 1454
// begin for i := 1 to Difficulty do
1357: LD_ADDR_VAR 0 2
1361: PUSH
1362: DOUBLE
1363: LD_INT 1
1365: DEC
1366: ST_TO_ADDR
1367: LD_OWVAR 67
1371: PUSH
1372: FOR_TO
1373: IFFALSE 1452
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
1375: LD_INT 0
1377: PPUSH
1378: LD_INT 1
1380: PPUSH
1381: LD_INT 1
1383: PUSH
1384: LD_INT 2
1386: PUSH
1387: LD_INT 2
1389: PUSH
1390: LD_INT 3
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: PUSH
1399: LD_OWVAR 67
1403: ARRAY
1404: PPUSH
1405: CALL_OW 380
// un := CreateHuman ;
1409: LD_ADDR_VAR 0 3
1413: PUSH
1414: CALL_OW 44
1418: ST_TO_ADDR
// usForces := usForces ^ un ;
1419: LD_ADDR_EXP 21
1423: PUSH
1424: LD_EXP 21
1428: PUSH
1429: LD_VAR 0 3
1433: ADD
1434: ST_TO_ADDR
// PlaceUnitArea ( un , usAdditionalDefenceArea , false ) ;
1435: LD_VAR 0 3
1439: PPUSH
1440: LD_INT 9
1442: PPUSH
1443: LD_INT 0
1445: PPUSH
1446: CALL_OW 49
// end ;
1450: GO 1372
1452: POP
1453: POP
// end ; PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 100 ) ;
1454: LD_INT 1
1456: PPUSH
1457: LD_INT 1
1459: PPUSH
1460: LD_INT 1
1462: PPUSH
1463: LD_INT 2
1465: PPUSH
1466: LD_INT 1
1468: PPUSH
1469: LD_INT 2
1471: PPUSH
1472: LD_INT 100
1474: PPUSH
1475: CALL 241 0 7
// veh := CreateVehicle ;
1479: LD_ADDR_VAR 0 4
1483: PUSH
1484: CALL_OW 45
1488: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1489: LD_VAR 0 4
1493: PPUSH
1494: LD_INT 2
1496: PPUSH
1497: CALL_OW 233
// PlaceUnitXY ( veh , 43 , 24 , false ) ;
1501: LD_VAR 0 4
1505: PPUSH
1506: LD_INT 43
1508: PPUSH
1509: LD_INT 24
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: CALL_OW 48
// end ;
1519: LD_VAR 0 1
1523: RET
// export function SendSciToForest ; var i , j , k , tmp , xy ; begin
1524: LD_INT 0
1526: PPUSH
1527: PPUSH
1528: PPUSH
1529: PPUSH
1530: PPUSH
1531: PPUSH
// if not usSci then
1532: LD_EXP 22
1536: NOT
1537: IFFALSE 1541
// exit ;
1539: GO 1715
// xy := AreaToList ( tameArea , 0 ) ;
1541: LD_ADDR_VAR 0 6
1545: PUSH
1546: LD_INT 5
1548: PPUSH
1549: LD_INT 0
1551: PPUSH
1552: CALL_OW 517
1556: ST_TO_ADDR
// for i in usSci do
1557: LD_ADDR_VAR 0 2
1561: PUSH
1562: LD_EXP 22
1566: PUSH
1567: FOR_IN
1568: IFFALSE 1713
// begin k := rand ( 1 , xy [ 1 ] ) ;
1570: LD_ADDR_VAR 0 4
1574: PUSH
1575: LD_INT 1
1577: PPUSH
1578: LD_VAR 0 6
1582: PUSH
1583: LD_INT 1
1585: ARRAY
1586: PPUSH
1587: CALL_OW 12
1591: ST_TO_ADDR
// ComExitBuilding ( i ) ;
1592: LD_VAR 0 2
1596: PPUSH
1597: CALL_OW 122
// AddComMoveXY ( i , xy [ 1 ] [ k ] , xy [ 2 ] [ k ] ) ;
1601: LD_VAR 0 2
1605: PPUSH
1606: LD_VAR 0 6
1610: PUSH
1611: LD_INT 1
1613: ARRAY
1614: PUSH
1615: LD_VAR 0 4
1619: ARRAY
1620: PPUSH
1621: LD_VAR 0 6
1625: PUSH
1626: LD_INT 2
1628: ARRAY
1629: PUSH
1630: LD_VAR 0 4
1634: ARRAY
1635: PPUSH
1636: CALL_OW 171
// for j := 1 to 2 do
1640: LD_ADDR_VAR 0 3
1644: PUSH
1645: DOUBLE
1646: LD_INT 1
1648: DEC
1649: ST_TO_ADDR
1650: LD_INT 2
1652: PUSH
1653: FOR_TO
1654: IFFALSE 1709
// begin tmp := Delete ( xy [ j ] , k ) ;
1656: LD_ADDR_VAR 0 5
1660: PUSH
1661: LD_VAR 0 6
1665: PUSH
1666: LD_VAR 0 3
1670: ARRAY
1671: PPUSH
1672: LD_VAR 0 4
1676: PPUSH
1677: CALL_OW 3
1681: ST_TO_ADDR
// xy := Replace ( xy , j , tmp ) ;
1682: LD_ADDR_VAR 0 6
1686: PUSH
1687: LD_VAR 0 6
1691: PPUSH
1692: LD_VAR 0 3
1696: PPUSH
1697: LD_VAR 0 5
1701: PPUSH
1702: CALL_OW 1
1706: ST_TO_ADDR
// end ;
1707: GO 1653
1709: POP
1710: POP
// end ;
1711: GO 1567
1713: POP
1714: POP
// end ;
1715: LD_VAR 0 1
1719: RET
// every 0 0$5 + 0 0$10 trigger aviradzeSpotted and usSci and not usAlert and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do var i , x , y , d , ape ;
1720: LD_EXP 4
1724: PUSH
1725: LD_EXP 22
1729: AND
1730: PUSH
1731: LD_EXP 10
1735: NOT
1736: AND
1737: PUSH
1738: LD_INT 22
1740: PUSH
1741: LD_INT 0
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: LD_INT 25
1750: PUSH
1751: LD_INT 12
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: PPUSH
1762: CALL_OW 69
1766: AND
1767: IFFALSE 2259
1769: GO 1771
1771: DISABLE
1772: LD_INT 0
1774: PPUSH
1775: PPUSH
1776: PPUSH
1777: PPUSH
1778: PPUSH
// begin enable ;
1779: ENABLE
// if UnitFilter ( usSci , [ f_or , [ f_hastask ] , [ f_inside ] ] ) then
1780: LD_EXP 22
1784: PPUSH
1785: LD_INT 2
1787: PUSH
1788: LD_INT 60
1790: PUSH
1791: EMPTY
1792: LIST
1793: PUSH
1794: LD_INT 54
1796: PUSH
1797: EMPTY
1798: LIST
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: LIST
1804: PPUSH
1805: CALL_OW 72
1809: IFFALSE 1813
// exit ;
1811: GO 2259
// for i in usSci do
1813: LD_ADDR_VAR 0 1
1817: PUSH
1818: LD_EXP 22
1822: PUSH
1823: FOR_IN
1824: IFFALSE 2257
// begin if not HasTask ( i ) and GetLives ( i ) = 1000 then
1826: LD_VAR 0 1
1830: PPUSH
1831: CALL_OW 314
1835: NOT
1836: PUSH
1837: LD_VAR 0 1
1841: PPUSH
1842: CALL_OW 256
1846: PUSH
1847: LD_INT 1000
1849: EQUAL
1850: AND
1851: IFFALSE 2058
// begin ape := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) , i ) ;
1853: LD_ADDR_VAR 0 5
1857: PUSH
1858: LD_INT 22
1860: PUSH
1861: LD_INT 0
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: LD_INT 25
1870: PUSH
1871: LD_INT 12
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: PPUSH
1882: CALL_OW 69
1886: PPUSH
1887: LD_VAR 0 1
1891: PPUSH
1892: CALL_OW 74
1896: ST_TO_ADDR
// if GetDistUnits ( i , ape ) < 10 then
1897: LD_VAR 0 1
1901: PPUSH
1902: LD_VAR 0 5
1906: PPUSH
1907: CALL_OW 296
1911: PUSH
1912: LD_INT 10
1914: LESS
1915: IFFALSE 1948
// ComTameXY ( i , GetX ( ape ) , GetY ( ape ) ) else
1917: LD_VAR 0 1
1921: PPUSH
1922: LD_VAR 0 5
1926: PPUSH
1927: CALL_OW 250
1931: PPUSH
1932: LD_VAR 0 5
1936: PPUSH
1937: CALL_OW 251
1941: PPUSH
1942: CALL_OW 131
1946: GO 2058
// begin d := rand ( 0 , 5 ) ;
1948: LD_ADDR_VAR 0 4
1952: PUSH
1953: LD_INT 0
1955: PPUSH
1956: LD_INT 5
1958: PPUSH
1959: CALL_OW 12
1963: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 3 ) ;
1964: LD_ADDR_VAR 0 2
1968: PUSH
1969: LD_VAR 0 1
1973: PPUSH
1974: CALL_OW 250
1978: PPUSH
1979: LD_VAR 0 4
1983: PPUSH
1984: LD_INT 3
1986: PPUSH
1987: CALL_OW 272
1991: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 3 ) ;
1992: LD_ADDR_VAR 0 3
1996: PUSH
1997: LD_VAR 0 1
2001: PPUSH
2002: CALL_OW 251
2006: PPUSH
2007: LD_VAR 0 4
2011: PPUSH
2012: LD_INT 3
2014: PPUSH
2015: CALL_OW 273
2019: ST_TO_ADDR
// if not ValidHex ( x , y ) then
2020: LD_VAR 0 2
2024: PPUSH
2025: LD_VAR 0 3
2029: PPUSH
2030: CALL_OW 488
2034: NOT
2035: IFFALSE 2039
// continue ;
2037: GO 1823
// ComMoveXY ( i , x , y ) ;
2039: LD_VAR 0 1
2043: PPUSH
2044: LD_VAR 0 2
2048: PPUSH
2049: LD_VAR 0 3
2053: PPUSH
2054: CALL_OW 111
// end ; end ; if GetLives ( i ) < 900 and GetDistUnitXY ( i , 37 , 23 ) > 10 then
2058: LD_VAR 0 1
2062: PPUSH
2063: CALL_OW 256
2067: PUSH
2068: LD_INT 900
2070: LESS
2071: PUSH
2072: LD_VAR 0 1
2076: PPUSH
2077: LD_INT 37
2079: PPUSH
2080: LD_INT 23
2082: PPUSH
2083: CALL_OW 297
2087: PUSH
2088: LD_INT 10
2090: GREATER
2091: AND
2092: IFFALSE 2168
// begin if IsOk ( Gladstone ) and IsInUnit ( Gladstone ) then
2094: LD_EXP 19
2098: PPUSH
2099: CALL_OW 302
2103: PUSH
2104: LD_EXP 19
2108: PPUSH
2109: CALL_OW 310
2113: AND
2114: IFFALSE 2125
// ComExitBuilding ( Gladstone ) ;
2116: LD_EXP 19
2120: PPUSH
2121: CALL_OW 122
// AddComHeal ( Gladstone , i ) ;
2125: LD_EXP 19
2129: PPUSH
2130: LD_VAR 0 1
2134: PPUSH
2135: CALL_OW 188
// AddComEnterUnit ( Gladstone , usLab ) ;
2139: LD_EXP 19
2143: PPUSH
2144: LD_INT 3
2146: PPUSH
2147: CALL_OW 180
// ComMoveXY ( i , 37 , 23 ) ;
2151: LD_VAR 0 1
2155: PPUSH
2156: LD_INT 37
2158: PPUSH
2159: LD_INT 23
2161: PPUSH
2162: CALL_OW 111
// end else
2166: GO 2255
// if GetLives ( i ) = 1000 then
2168: LD_VAR 0 1
2172: PPUSH
2173: CALL_OW 256
2177: PUSH
2178: LD_INT 1000
2180: EQUAL
2181: IFFALSE 2255
// begin if SideShoot ( i ) = 2 then
2183: LD_VAR 0 1
2187: PPUSH
2188: CALL_OW 503
2192: PUSH
2193: LD_INT 2
2195: EQUAL
2196: IFFALSE 2243
// begin if not usAlert then
2198: LD_EXP 10
2202: NOT
2203: IFFALSE 2213
// usAlert := true ;
2205: LD_ADDR_EXP 10
2209: PUSH
2210: LD_INT 1
2212: ST_TO_ADDR
// AddComEnterUnit ( i , usLab ) ;
2213: LD_VAR 0 1
2217: PPUSH
2218: LD_INT 3
2220: PPUSH
2221: CALL_OW 180
// usSci := usSci diff i ;
2225: LD_ADDR_EXP 22
2229: PUSH
2230: LD_EXP 22
2234: PUSH
2235: LD_VAR 0 1
2239: DIFF
2240: ST_TO_ADDR
// end else
2241: GO 2255
// ComMoveToArea ( i , tameArea ) ;
2243: LD_VAR 0 1
2247: PPUSH
2248: LD_INT 5
2250: PPUSH
2251: CALL_OW 113
// end ; end ;
2255: GO 1823
2257: POP
2258: POP
// end ;
2259: PPOPN 5
2261: END
// every 0 0$1 trigger not usAlert and ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 999 ] ] ] ) or FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) ) do
2262: LD_EXP 10
2266: NOT
2267: PUSH
2268: LD_INT 22
2270: PUSH
2271: LD_INT 1
2273: PUSH
2274: EMPTY
2275: LIST
2276: LIST
2277: PUSH
2278: LD_INT 21
2280: PUSH
2281: LD_INT 3
2283: PUSH
2284: EMPTY
2285: LIST
2286: LIST
2287: PUSH
2288: LD_INT 3
2290: PUSH
2291: LD_INT 57
2293: PUSH
2294: EMPTY
2295: LIST
2296: PUSH
2297: EMPTY
2298: LIST
2299: LIST
2300: PUSH
2301: LD_INT 3
2303: PUSH
2304: LD_INT 24
2306: PUSH
2307: LD_INT 999
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: PUSH
2314: EMPTY
2315: LIST
2316: LIST
2317: PUSH
2318: EMPTY
2319: LIST
2320: LIST
2321: LIST
2322: LIST
2323: PPUSH
2324: CALL_OW 69
2328: PUSH
2329: LD_INT 7
2331: PPUSH
2332: LD_INT 22
2334: PUSH
2335: LD_INT 2
2337: PUSH
2338: EMPTY
2339: LIST
2340: LIST
2341: PPUSH
2342: CALL_OW 70
2346: OR
2347: AND
2348: IFFALSE 2361
2350: GO 2352
2352: DISABLE
// usAlert := true ;
2353: LD_ADDR_EXP 10
2357: PUSH
2358: LD_INT 1
2360: ST_TO_ADDR
2361: END
// every 0 0$1 trigger usAlert do var i , b , arm ;
2362: LD_EXP 10
2366: IFFALSE 2713
2368: GO 2370
2370: DISABLE
2371: LD_INT 0
2373: PPUSH
2374: PPUSH
2375: PPUSH
// begin usActiveDefend := true ;
2376: LD_ADDR_EXP 11
2380: PUSH
2381: LD_INT 1
2383: ST_TO_ADDR
// if not usForces then
2384: LD_EXP 21
2388: NOT
2389: IFFALSE 2393
// exit ;
2391: GO 2713
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
2393: LD_ADDR_VAR 0 3
2397: PUSH
2398: LD_INT 22
2400: PUSH
2401: LD_INT 1
2403: PUSH
2404: EMPTY
2405: LIST
2406: LIST
2407: PUSH
2408: LD_INT 30
2410: PUSH
2411: LD_INT 4
2413: PUSH
2414: EMPTY
2415: LIST
2416: LIST
2417: PUSH
2418: EMPTY
2419: LIST
2420: LIST
2421: PPUSH
2422: CALL_OW 69
2426: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
2427: LD_ADDR_VAR 0 2
2431: PUSH
2432: LD_INT 22
2434: PUSH
2435: LD_INT 1
2437: PUSH
2438: EMPTY
2439: LIST
2440: LIST
2441: PUSH
2442: LD_INT 30
2444: PUSH
2445: LD_INT 31
2447: PUSH
2448: EMPTY
2449: LIST
2450: LIST
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: PPUSH
2456: CALL_OW 69
2460: ST_TO_ADDR
// ComExitBuilding ( Lynch ) ;
2461: LD_EXP 20
2465: PPUSH
2466: CALL_OW 122
// AddComEnterUnit ( Lynch , arm [ 1 ] ) ;
2470: LD_EXP 20
2474: PPUSH
2475: LD_VAR 0 3
2479: PUSH
2480: LD_INT 1
2482: ARRAY
2483: PPUSH
2484: CALL_OW 180
// if IsOk ( Gladstone ) then
2488: LD_EXP 19
2492: PPUSH
2493: CALL_OW 302
2497: IFFALSE 2538
// begin ComExitBuilding ( Gladstone ) ;
2499: LD_EXP 19
2503: PPUSH
2504: CALL_OW 122
// AddComEnterUnit ( Gladstone , arm [ 1 ] ) ;
2508: LD_EXP 19
2512: PPUSH
2513: LD_VAR 0 3
2517: PUSH
2518: LD_INT 1
2520: ARRAY
2521: PPUSH
2522: CALL_OW 180
// AddComChangeProfession ( Gladstone , class_soldier ) ;
2526: LD_EXP 19
2530: PPUSH
2531: LD_INT 1
2533: PPUSH
2534: CALL_OW 183
// end ; ComExitBuilding ( usForces [ 1 ] ) ;
2538: LD_EXP 21
2542: PUSH
2543: LD_INT 1
2545: ARRAY
2546: PPUSH
2547: CALL_OW 122
// AddComEnterUnit ( usForces [ 1 ] , b [ 1 ] ) ;
2551: LD_EXP 21
2555: PUSH
2556: LD_INT 1
2558: ARRAY
2559: PPUSH
2560: LD_VAR 0 2
2564: PUSH
2565: LD_INT 1
2567: ARRAY
2568: PPUSH
2569: CALL_OW 180
// ComExitBuilding ( usForces [ 2 ] ) ;
2573: LD_EXP 21
2577: PUSH
2578: LD_INT 2
2580: ARRAY
2581: PPUSH
2582: CALL_OW 122
// AddComEnterUnit ( usForces [ 2 ] , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
2586: LD_EXP 21
2590: PUSH
2591: LD_INT 2
2593: ARRAY
2594: PPUSH
2595: LD_INT 22
2597: PUSH
2598: LD_INT 1
2600: PUSH
2601: EMPTY
2602: LIST
2603: LIST
2604: PUSH
2605: LD_INT 30
2607: PUSH
2608: LD_INT 32
2610: PUSH
2611: EMPTY
2612: LIST
2613: LIST
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: PPUSH
2619: CALL_OW 69
2623: PUSH
2624: LD_INT 1
2626: ARRAY
2627: PPUSH
2628: CALL_OW 180
// if b > 1 and usForces > 2 then
2632: LD_VAR 0 2
2636: PUSH
2637: LD_INT 1
2639: GREATER
2640: PUSH
2641: LD_EXP 21
2645: PUSH
2646: LD_INT 2
2648: GREATER
2649: AND
2650: IFFALSE 2713
// begin repeat wait ( 0 0$1 ) ;
2652: LD_INT 35
2654: PPUSH
2655: CALL_OW 67
// until BuildingStatus ( b [ 2 ] ) <> bs_build ;
2659: LD_VAR 0 2
2663: PUSH
2664: LD_INT 2
2666: ARRAY
2667: PPUSH
2668: CALL_OW 461
2672: PUSH
2673: LD_INT 1
2675: NONEQUAL
2676: IFFALSE 2652
// ComExitBuilding ( usForces [ 3 ] ) ;
2678: LD_EXP 21
2682: PUSH
2683: LD_INT 3
2685: ARRAY
2686: PPUSH
2687: CALL_OW 122
// AddComEnterUnit ( usForces [ 3 ] , b [ 2 ] ) ;
2691: LD_EXP 21
2695: PUSH
2696: LD_INT 3
2698: ARRAY
2699: PPUSH
2700: LD_VAR 0 2
2704: PUSH
2705: LD_INT 2
2707: ARRAY
2708: PPUSH
2709: CALL_OW 180
// end ; end ;
2713: PPOPN 3
2715: END
// every 0 0$1 trigger GetLives ( usLab ) < 999 and usAlert and usForces do var i ;
2716: LD_INT 3
2718: PPUSH
2719: CALL_OW 256
2723: PUSH
2724: LD_INT 999
2726: LESS
2727: PUSH
2728: LD_EXP 10
2732: AND
2733: PUSH
2734: LD_EXP 21
2738: AND
2739: IFFALSE 2910
2741: GO 2743
2743: DISABLE
2744: LD_INT 0
2746: PPUSH
// begin for i in usForces do
2747: LD_ADDR_VAR 0 1
2751: PUSH
2752: LD_EXP 21
2756: PUSH
2757: FOR_IN
2758: IFFALSE 2797
// begin if IsInUnit ( i ) then
2760: LD_VAR 0 1
2764: PPUSH
2765: CALL_OW 310
2769: IFFALSE 2780
// ComExitBuilding ( i ) ;
2771: LD_VAR 0 1
2775: PPUSH
2776: CALL_OW 122
// AddComAgressiveMove ( i , 31 , 8 ) ;
2780: LD_VAR 0 1
2784: PPUSH
2785: LD_INT 31
2787: PPUSH
2788: LD_INT 8
2790: PPUSH
2791: CALL_OW 174
// end ;
2795: GO 2757
2797: POP
2798: POP
// wait ( 0 0$8 ) ;
2799: LD_INT 280
2801: PPUSH
2802: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) then
2806: LD_INT 22
2808: PUSH
2809: LD_INT 2
2811: PUSH
2812: EMPTY
2813: LIST
2814: LIST
2815: PUSH
2816: LD_INT 91
2818: PUSH
2819: LD_INT 3
2821: PUSH
2822: LD_INT 14
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: LIST
2829: PUSH
2830: EMPTY
2831: LIST
2832: LIST
2833: PPUSH
2834: CALL_OW 69
2838: IFFALSE 2888
// ComAttackUnit ( usForces , FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) [ 1 ] ) else
2840: LD_EXP 21
2844: PPUSH
2845: LD_INT 22
2847: PUSH
2848: LD_INT 2
2850: PUSH
2851: EMPTY
2852: LIST
2853: LIST
2854: PUSH
2855: LD_INT 91
2857: PUSH
2858: LD_INT 3
2860: PUSH
2861: LD_INT 14
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: LIST
2868: PUSH
2869: EMPTY
2870: LIST
2871: LIST
2872: PPUSH
2873: CALL_OW 69
2877: PUSH
2878: LD_INT 1
2880: ARRAY
2881: PPUSH
2882: CALL_OW 115
2886: GO 2910
// begin wait ( 0 0$20 ) ;
2888: LD_INT 700
2890: PPUSH
2891: CALL_OW 67
// AddComMoveXY ( usForces , 39 , 19 ) ;
2895: LD_EXP 21
2899: PPUSH
2900: LD_INT 39
2902: PPUSH
2903: LD_INT 19
2905: PPUSH
2906: CALL_OW 171
// end ; end ;
2910: PPOPN 1
2912: END
// every 0 0$3 trigger ( GetDistUnits ( Heike , Delta ) < 10 or GetLives ( usLab ) < 999 ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do var tmp , veh ;
2913: LD_EXP 23
2917: PPUSH
2918: LD_INT 1
2920: PPUSH
2921: CALL_OW 296
2925: PUSH
2926: LD_INT 10
2928: LESS
2929: PUSH
2930: LD_INT 3
2932: PPUSH
2933: CALL_OW 256
2937: PUSH
2938: LD_INT 999
2940: LESS
2941: OR
2942: PUSH
2943: LD_INT 22
2945: PUSH
2946: LD_INT 1
2948: PUSH
2949: EMPTY
2950: LIST
2951: LIST
2952: PUSH
2953: LD_INT 25
2955: PUSH
2956: LD_INT 2
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: PPUSH
2967: CALL_OW 69
2971: AND
2972: IFFALSE 3086
2974: GO 2976
2976: DISABLE
2977: LD_INT 0
2979: PPUSH
2980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
2981: LD_ADDR_VAR 0 1
2985: PUSH
2986: LD_INT 22
2988: PUSH
2989: LD_INT 1
2991: PUSH
2992: EMPTY
2993: LIST
2994: LIST
2995: PUSH
2996: LD_INT 25
2998: PUSH
2999: LD_INT 2
3001: PUSH
3002: EMPTY
3003: LIST
3004: LIST
3005: PUSH
3006: EMPTY
3007: LIST
3008: LIST
3009: PPUSH
3010: CALL_OW 69
3014: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3015: LD_ADDR_VAR 0 2
3019: PUSH
3020: LD_INT 22
3022: PUSH
3023: LD_INT 1
3025: PUSH
3026: EMPTY
3027: LIST
3028: LIST
3029: PUSH
3030: LD_INT 21
3032: PUSH
3033: LD_INT 2
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: PUSH
3040: LD_INT 58
3042: PUSH
3043: EMPTY
3044: LIST
3045: PUSH
3046: EMPTY
3047: LIST
3048: LIST
3049: LIST
3050: PPUSH
3051: CALL_OW 69
3055: ST_TO_ADDR
// if not tmp then
3056: LD_VAR 0 1
3060: NOT
3061: IFFALSE 3065
// exit ;
3063: GO 3086
// ComExitBuilding ( tmp ) ;
3065: LD_VAR 0 1
3069: PPUSH
3070: CALL_OW 122
// AddComDismantle ( tmp , usLab ) ;
3074: LD_VAR 0 1
3078: PPUSH
3079: LD_INT 3
3081: PPUSH
3082: CALL_OW 227
// end ;
3086: PPOPN 2
3088: END
// every 0 0$1 trigger usAlert and FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) do var i , tmp ;
3089: LD_EXP 10
3093: PUSH
3094: LD_INT 7
3096: PPUSH
3097: LD_INT 22
3099: PUSH
3100: LD_INT 1
3102: PUSH
3103: EMPTY
3104: LIST
3105: LIST
3106: PUSH
3107: LD_INT 21
3109: PUSH
3110: LD_INT 1
3112: PUSH
3113: EMPTY
3114: LIST
3115: LIST
3116: PUSH
3117: LD_INT 3
3119: PUSH
3120: LD_INT 24
3122: PUSH
3123: LD_INT 600
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: PUSH
3130: EMPTY
3131: LIST
3132: LIST
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: LIST
3138: PPUSH
3139: CALL_OW 70
3143: AND
3144: IFFALSE 3272
3146: GO 3148
3148: DISABLE
3149: LD_INT 0
3151: PPUSH
3152: PPUSH
// begin enable ;
3153: ENABLE
// tmp := FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) ;
3154: LD_ADDR_VAR 0 2
3158: PUSH
3159: LD_INT 7
3161: PPUSH
3162: LD_INT 22
3164: PUSH
3165: LD_INT 1
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: PUSH
3172: LD_INT 21
3174: PUSH
3175: LD_INT 1
3177: PUSH
3178: EMPTY
3179: LIST
3180: LIST
3181: PUSH
3182: LD_INT 3
3184: PUSH
3185: LD_INT 24
3187: PUSH
3188: LD_INT 600
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: LIST
3203: PPUSH
3204: CALL_OW 70
3208: ST_TO_ADDR
// if not tmp then
3209: LD_VAR 0 2
3213: NOT
3214: IFFALSE 3218
// exit ;
3216: GO 3272
// for i in tmp do
3218: LD_ADDR_VAR 0 1
3222: PUSH
3223: LD_VAR 0 2
3227: PUSH
3228: FOR_IN
3229: IFFALSE 3270
// if IsInUnit ( i ) then
3231: LD_VAR 0 1
3235: PPUSH
3236: CALL_OW 310
3240: IFFALSE 3253
// ComExitBuilding ( i ) else
3242: LD_VAR 0 1
3246: PPUSH
3247: CALL_OW 122
3251: GO 3268
// ComMoveXY ( i , 48 , 74 ) ;
3253: LD_VAR 0 1
3257: PPUSH
3258: LD_INT 48
3260: PPUSH
3261: LD_INT 74
3263: PPUSH
3264: CALL_OW 111
3268: GO 3228
3270: POP
3271: POP
// end ;
3272: PPOPN 2
3274: END
// every 12 12$00 do var i , un , tmp ;
3275: GO 3277
3277: DISABLE
3278: LD_INT 0
3280: PPUSH
3281: PPUSH
3282: PPUSH
// begin tmp := [ ] ;
3283: LD_ADDR_VAR 0 3
3287: PUSH
3288: EMPTY
3289: ST_TO_ADDR
// uc_side := 1 ;
3290: LD_ADDR_OWVAR 20
3294: PUSH
3295: LD_INT 1
3297: ST_TO_ADDR
// uc_nation := 1 ;
3298: LD_ADDR_OWVAR 21
3302: PUSH
3303: LD_INT 1
3305: ST_TO_ADDR
// case Difficulty of 1 :
3306: LD_OWVAR 67
3310: PUSH
3311: LD_INT 1
3313: DOUBLE
3314: EQUAL
3315: IFTRUE 3319
3317: GO 3422
3319: POP
// begin wait ( 1 1$00 ) ;
3320: LD_INT 2100
3322: PPUSH
3323: CALL_OW 67
// for i := 1 to 2 do
3327: LD_ADDR_VAR 0 1
3331: PUSH
3332: DOUBLE
3333: LD_INT 1
3335: DEC
3336: ST_TO_ADDR
3337: LD_INT 2
3339: PUSH
3340: FOR_TO
3341: IFFALSE 3418
// begin PrepareHuman ( false , [ 1 , 4 ] [ i mod 2 + 1 ] , 1 ) ;
3343: LD_INT 0
3345: PPUSH
3346: LD_INT 1
3348: PUSH
3349: LD_INT 4
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PUSH
3356: LD_VAR 0 1
3360: PUSH
3361: LD_INT 2
3363: MOD
3364: PUSH
3365: LD_INT 1
3367: PLUS
3368: ARRAY
3369: PPUSH
3370: LD_INT 1
3372: PPUSH
3373: CALL_OW 380
// un := CreateHuman ;
3377: LD_ADDR_VAR 0 2
3381: PUSH
3382: CALL_OW 44
3386: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3387: LD_ADDR_VAR 0 3
3391: PUSH
3392: LD_VAR 0 3
3396: PPUSH
3397: LD_VAR 0 3
3401: PUSH
3402: LD_INT 1
3404: PLUS
3405: PPUSH
3406: LD_VAR 0 2
3410: PPUSH
3411: CALL_OW 1
3415: ST_TO_ADDR
// end ;
3416: GO 3340
3418: POP
3419: POP
// end ; 2 :
3420: GO 3822
3422: LD_INT 2
3424: DOUBLE
3425: EQUAL
3426: IFTRUE 3430
3428: GO 3564
3430: POP
// begin wait ( 0 0$30 ) ;
3431: LD_INT 1050
3433: PPUSH
3434: CALL_OW 67
// for i := 1 to 2 do
3438: LD_ADDR_VAR 0 1
3442: PUSH
3443: DOUBLE
3444: LD_INT 1
3446: DEC
3447: ST_TO_ADDR
3448: LD_INT 2
3450: PUSH
3451: FOR_TO
3452: IFFALSE 3508
// begin PrepareHuman ( false , 1 , 2 ) ;
3454: LD_INT 0
3456: PPUSH
3457: LD_INT 1
3459: PPUSH
3460: LD_INT 2
3462: PPUSH
3463: CALL_OW 380
// un := CreateHuman ;
3467: LD_ADDR_VAR 0 2
3471: PUSH
3472: CALL_OW 44
3476: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3477: LD_ADDR_VAR 0 3
3481: PUSH
3482: LD_VAR 0 3
3486: PPUSH
3487: LD_VAR 0 3
3491: PUSH
3492: LD_INT 1
3494: PLUS
3495: PPUSH
3496: LD_VAR 0 2
3500: PPUSH
3501: CALL_OW 1
3505: ST_TO_ADDR
// end ;
3506: GO 3451
3508: POP
3509: POP
// PrepareHuman ( false , 4 , 2 ) ;
3510: LD_INT 0
3512: PPUSH
3513: LD_INT 4
3515: PPUSH
3516: LD_INT 2
3518: PPUSH
3519: CALL_OW 380
// un := CreateHuman ;
3523: LD_ADDR_VAR 0 2
3527: PUSH
3528: CALL_OW 44
3532: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3533: LD_ADDR_VAR 0 3
3537: PUSH
3538: LD_VAR 0 3
3542: PPUSH
3543: LD_VAR 0 3
3547: PUSH
3548: LD_INT 1
3550: PLUS
3551: PPUSH
3552: LD_VAR 0 2
3556: PPUSH
3557: CALL_OW 1
3561: ST_TO_ADDR
// end ; 3 .. 4 :
3562: GO 3822
3564: LD_INT 3
3566: DOUBLE
3567: GREATEREQUAL
3568: IFFALSE 3576
3570: LD_INT 4
3572: DOUBLE
3573: LESSEQUAL
3574: IFTRUE 3578
3576: GO 3821
3578: POP
// begin for i := 1 to 2 do
3579: LD_ADDR_VAR 0 1
3583: PUSH
3584: DOUBLE
3585: LD_INT 1
3587: DEC
3588: ST_TO_ADDR
3589: LD_INT 2
3591: PUSH
3592: FOR_TO
3593: IFFALSE 3649
// begin PrepareHuman ( false , 1 , 2 ) ;
3595: LD_INT 0
3597: PPUSH
3598: LD_INT 1
3600: PPUSH
3601: LD_INT 2
3603: PPUSH
3604: CALL_OW 380
// un := CreateHuman ;
3608: LD_ADDR_VAR 0 2
3612: PUSH
3613: CALL_OW 44
3617: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3618: LD_ADDR_VAR 0 3
3622: PUSH
3623: LD_VAR 0 3
3627: PPUSH
3628: LD_VAR 0 3
3632: PUSH
3633: LD_INT 1
3635: PLUS
3636: PPUSH
3637: LD_VAR 0 2
3641: PPUSH
3642: CALL_OW 1
3646: ST_TO_ADDR
// end ;
3647: GO 3592
3649: POP
3650: POP
// PrepareHuman ( false , 4 , 2 ) ;
3651: LD_INT 0
3653: PPUSH
3654: LD_INT 4
3656: PPUSH
3657: LD_INT 2
3659: PPUSH
3660: CALL_OW 380
// un := CreateHuman ;
3664: LD_ADDR_VAR 0 2
3668: PUSH
3669: CALL_OW 44
3673: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3674: LD_ADDR_VAR 0 3
3678: PUSH
3679: LD_VAR 0 3
3683: PPUSH
3684: LD_VAR 0 3
3688: PUSH
3689: LD_INT 1
3691: PLUS
3692: PPUSH
3693: LD_VAR 0 2
3697: PPUSH
3698: CALL_OW 1
3702: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_machine_gun , 90 ) ;
3703: LD_INT 1
3705: PPUSH
3706: LD_INT 1
3708: PPUSH
3709: LD_INT 2
3711: PPUSH
3712: LD_INT 2
3714: PPUSH
3715: LD_INT 1
3717: PPUSH
3718: LD_INT 2
3720: PPUSH
3721: LD_INT 90
3723: PPUSH
3724: CALL 241 0 7
// un := CreateVehicle ;
3728: LD_ADDR_VAR 0 2
3732: PUSH
3733: CALL_OW 45
3737: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3738: LD_ADDR_VAR 0 3
3742: PUSH
3743: LD_VAR 0 3
3747: PPUSH
3748: LD_VAR 0 3
3752: PUSH
3753: LD_INT 1
3755: PLUS
3756: PPUSH
3757: LD_VAR 0 2
3761: PPUSH
3762: CALL_OW 1
3766: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
3767: LD_INT 0
3769: PPUSH
3770: LD_INT 1
3772: PPUSH
3773: LD_INT 2
3775: PPUSH
3776: CALL_OW 380
// un := CreateHuman ;
3780: LD_ADDR_VAR 0 2
3784: PUSH
3785: CALL_OW 44
3789: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3790: LD_ADDR_VAR 0 3
3794: PUSH
3795: LD_VAR 0 3
3799: PPUSH
3800: LD_VAR 0 3
3804: PUSH
3805: LD_INT 1
3807: PLUS
3808: PPUSH
3809: LD_VAR 0 2
3813: PPUSH
3814: CALL_OW 1
3818: ST_TO_ADDR
// end ; end ;
3819: GO 3822
3821: POP
// for i := 1 to tmp do
3822: LD_ADDR_VAR 0 1
3826: PUSH
3827: DOUBLE
3828: LD_INT 1
3830: DEC
3831: ST_TO_ADDR
3832: LD_VAR 0 3
3836: PUSH
3837: FOR_TO
3838: IFFALSE 4003
// begin SetDir ( tmp [ i ] , 1 ) ;
3840: LD_VAR 0 3
3844: PUSH
3845: LD_VAR 0 1
3849: ARRAY
3850: PPUSH
3851: LD_INT 1
3853: PPUSH
3854: CALL_OW 233
// if GetType ( tmp [ i ] ) = unit_human then
3858: LD_VAR 0 3
3862: PUSH
3863: LD_VAR 0 1
3867: ARRAY
3868: PPUSH
3869: CALL_OW 247
3873: PUSH
3874: LD_INT 1
3876: EQUAL
3877: IFFALSE 3905
// PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) else
3879: LD_VAR 0 3
3883: PUSH
3884: LD_VAR 0 1
3888: ARRAY
3889: PPUSH
3890: LD_INT 28
3892: PPUSH
3893: LD_INT 52
3895: PPUSH
3896: LD_INT 0
3898: PPUSH
3899: CALL_OW 48
3903: GO 3973
// begin PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) ;
3905: LD_VAR 0 3
3909: PUSH
3910: LD_VAR 0 1
3914: ARRAY
3915: PPUSH
3916: LD_INT 28
3918: PPUSH
3919: LD_INT 52
3921: PPUSH
3922: LD_INT 0
3924: PPUSH
3925: CALL_OW 48
// i := i + 1 ;
3929: LD_ADDR_VAR 0 1
3933: PUSH
3934: LD_VAR 0 1
3938: PUSH
3939: LD_INT 1
3941: PLUS
3942: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ i ] , tmp [ i - 1 ] ) ;
3943: LD_VAR 0 3
3947: PUSH
3948: LD_VAR 0 1
3952: ARRAY
3953: PPUSH
3954: LD_VAR 0 3
3958: PUSH
3959: LD_VAR 0 1
3963: PUSH
3964: LD_INT 1
3966: MINUS
3967: ARRAY
3968: PPUSH
3969: CALL_OW 52
// end ; ComMoveXY ( tmp [ i ] , 43 , 56 ) ;
3973: LD_VAR 0 3
3977: PUSH
3978: LD_VAR 0 1
3982: ARRAY
3983: PPUSH
3984: LD_INT 43
3986: PPUSH
3987: LD_INT 56
3989: PPUSH
3990: CALL_OW 111
// wait ( 0 0$2 ) ;
3994: LD_INT 70
3996: PPUSH
3997: CALL_OW 67
// end ;
4001: GO 3837
4003: POP
4004: POP
// wait ( 0 0$2 ) ;
4005: LD_INT 70
4007: PPUSH
4008: CALL_OW 67
// if not FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) then
4012: LD_INT 7
4014: PPUSH
4015: LD_INT 22
4017: PUSH
4018: LD_INT 2
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: PPUSH
4025: CALL_OW 70
4029: NOT
4030: IFFALSE 4228
// begin AddComAgressiveMove ( tmp , 35 , 24 ) ;
4032: LD_VAR 0 3
4036: PPUSH
4037: LD_INT 35
4039: PPUSH
4040: LD_INT 24
4042: PPUSH
4043: CALL_OW 174
// usForces := usForces union UnitFilter ( tmp , [ f_class , 1 ] ) ;
4047: LD_ADDR_EXP 21
4051: PUSH
4052: LD_EXP 21
4056: PUSH
4057: LD_VAR 0 3
4061: PPUSH
4062: LD_INT 25
4064: PUSH
4065: LD_INT 1
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PPUSH
4072: CALL_OW 72
4076: UNION
4077: ST_TO_ADDR
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
4078: LD_INT 22
4080: PUSH
4081: LD_INT 1
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: PUSH
4088: LD_INT 30
4090: PUSH
4091: LD_INT 4
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PPUSH
4102: CALL_OW 69
4106: PUSH
4107: LD_INT 1
4109: ARRAY
4110: PPUSH
4111: CALL_OW 313
4115: PUSH
4116: LD_INT 6
4118: LESS
4119: IFFALSE 4178
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 1 ] ) , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
4121: LD_VAR 0 3
4125: PPUSH
4126: LD_INT 25
4128: PUSH
4129: LD_INT 1
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: PPUSH
4136: CALL_OW 72
4140: PPUSH
4141: LD_INT 22
4143: PUSH
4144: LD_INT 1
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: PUSH
4151: LD_INT 30
4153: PUSH
4154: LD_INT 4
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: PUSH
4161: EMPTY
4162: LIST
4163: LIST
4164: PPUSH
4165: CALL_OW 69
4169: PUSH
4170: LD_INT 1
4172: ARRAY
4173: PPUSH
4174: CALL_OW 180
// if UnitFilter ( tmp , [ f_class , 4 ] ) then
4178: LD_VAR 0 3
4182: PPUSH
4183: LD_INT 25
4185: PUSH
4186: LD_INT 4
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PPUSH
4193: CALL_OW 72
4197: IFFALSE 4226
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 4 ] ) , usLab ) ;
4199: LD_VAR 0 3
4203: PPUSH
4204: LD_INT 25
4206: PUSH
4207: LD_INT 4
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: PPUSH
4214: CALL_OW 72
4218: PPUSH
4219: LD_INT 3
4221: PPUSH
4222: CALL_OW 180
// end else
4226: GO 4503
// begin tmp := tmp union FilterUnitsInArea ( retreatArea , [ f_side , 1 ] ) ;
4228: LD_ADDR_VAR 0 3
4232: PUSH
4233: LD_VAR 0 3
4237: PUSH
4238: LD_INT 6
4240: PPUSH
4241: LD_INT 22
4243: PUSH
4244: LD_INT 1
4246: PUSH
4247: EMPTY
4248: LIST
4249: LIST
4250: PPUSH
4251: CALL_OW 70
4255: UNION
4256: ST_TO_ADDR
// ComMoveXY ( tmp , 45 , 54 ) ;
4257: LD_VAR 0 3
4261: PPUSH
4262: LD_INT 45
4264: PPUSH
4265: LD_INT 54
4267: PPUSH
4268: CALL_OW 111
// wait ( 0 0$3 ) ;
4272: LD_INT 105
4274: PPUSH
4275: CALL_OW 67
// AddComAgressiveMove ( tmp diff UnitFilter ( tmp , [ f_class , 4 ] ) , 35 , 24 ) ;
4279: LD_VAR 0 3
4283: PUSH
4284: LD_VAR 0 3
4288: PPUSH
4289: LD_INT 25
4291: PUSH
4292: LD_INT 4
4294: PUSH
4295: EMPTY
4296: LIST
4297: LIST
4298: PPUSH
4299: CALL_OW 72
4303: DIFF
4304: PPUSH
4305: LD_INT 35
4307: PPUSH
4308: LD_INT 24
4310: PPUSH
4311: CALL_OW 174
// AddComMoveXY ( UnitFilter ( tmp , [ f_class , 4 ] ) , 42 , 49 ) ;
4315: LD_VAR 0 3
4319: PPUSH
4320: LD_INT 25
4322: PUSH
4323: LD_INT 4
4325: PUSH
4326: EMPTY
4327: LIST
4328: LIST
4329: PPUSH
4330: CALL_OW 72
4334: PPUSH
4335: LD_INT 42
4337: PPUSH
4338: LD_INT 49
4340: PPUSH
4341: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4345: LD_INT 35
4347: PPUSH
4348: CALL_OW 67
// for i in tmp do
4352: LD_ADDR_VAR 0 1
4356: PUSH
4357: LD_VAR 0 3
4361: PUSH
4362: FOR_IN
4363: IFFALSE 4494
// if IsDead ( i ) then
4365: LD_VAR 0 1
4369: PPUSH
4370: CALL_OW 301
4374: IFFALSE 4394
// tmp := tmp diff i else
4376: LD_ADDR_VAR 0 3
4380: PUSH
4381: LD_VAR 0 3
4385: PUSH
4386: LD_VAR 0 1
4390: DIFF
4391: ST_TO_ADDR
4392: GO 4492
// if GetClass ( i ) = 1 then
4394: LD_VAR 0 1
4398: PPUSH
4399: CALL_OW 257
4403: PUSH
4404: LD_INT 1
4406: EQUAL
4407: IFFALSE 4492
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 42 , 49 ) > 6 then
4409: LD_VAR 0 1
4413: PPUSH
4414: CALL_OW 256
4418: PUSH
4419: LD_INT 600
4421: LESS
4422: PUSH
4423: LD_VAR 0 1
4427: PPUSH
4428: LD_INT 42
4430: PPUSH
4431: LD_INT 49
4433: PPUSH
4434: CALL_OW 297
4438: PUSH
4439: LD_INT 6
4441: GREATER
4442: AND
4443: IFFALSE 4462
// ComMoveXY ( i , 42 , 49 ) else
4445: LD_VAR 0 1
4449: PPUSH
4450: LD_INT 42
4452: PPUSH
4453: LD_INT 49
4455: PPUSH
4456: CALL_OW 111
4460: GO 4492
// if GetLives ( i ) = 1000 then
4462: LD_VAR 0 1
4466: PPUSH
4467: CALL_OW 256
4471: PUSH
4472: LD_INT 1000
4474: EQUAL
4475: IFFALSE 4492
// ComAgressiveMove ( i , 36 , 25 ) ;
4477: LD_VAR 0 1
4481: PPUSH
4482: LD_INT 36
4484: PPUSH
4485: LD_INT 25
4487: PPUSH
4488: CALL_OW 114
// end ;
4492: GO 4362
4494: POP
4495: POP
// until not tmp ;
4496: LD_VAR 0 3
4500: NOT
4501: IFFALSE 4345
// end ; end ;
4503: PPOPN 3
4505: END
// every 1 1$30 trigger FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) and not attackDeltaAllowed do var i , un , veh ;
4506: LD_INT 7
4508: PPUSH
4509: LD_INT 22
4511: PUSH
4512: LD_INT 2
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: PPUSH
4519: CALL_OW 70
4523: PUSH
4524: LD_EXP 14
4528: NOT
4529: AND
4530: IFFALSE 4688
4532: GO 4534
4534: DISABLE
4535: LD_INT 0
4537: PPUSH
4538: PPUSH
4539: PPUSH
// begin for i := 1 to 2 do
4540: LD_ADDR_VAR 0 1
4544: PUSH
4545: DOUBLE
4546: LD_INT 1
4548: DEC
4549: ST_TO_ADDR
4550: LD_INT 2
4552: PUSH
4553: FOR_TO
4554: IFFALSE 4686
// begin wait ( 0 0$3 ) ;
4556: LD_INT 105
4558: PPUSH
4559: CALL_OW 67
// uc_side := 1 ;
4563: LD_ADDR_OWVAR 20
4567: PUSH
4568: LD_INT 1
4570: ST_TO_ADDR
// uc_nation := 1 ;
4571: LD_ADDR_OWVAR 21
4575: PUSH
4576: LD_INT 1
4578: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 90 ) ;
4579: LD_INT 1
4581: PPUSH
4582: LD_INT 1
4584: PPUSH
4585: LD_INT 2
4587: PPUSH
4588: LD_INT 1
4590: PPUSH
4591: LD_INT 1
4593: PPUSH
4594: LD_INT 4
4596: PPUSH
4597: LD_INT 90
4599: PPUSH
4600: CALL 241 0 7
// veh := CreateVehicle ;
4604: LD_ADDR_VAR 0 3
4608: PUSH
4609: CALL_OW 45
4613: ST_TO_ADDR
// PlaceUnitXY ( veh , 29 , 52 , false ) ;
4614: LD_VAR 0 3
4618: PPUSH
4619: LD_INT 29
4621: PPUSH
4622: LD_INT 52
4624: PPUSH
4625: LD_INT 0
4627: PPUSH
4628: CALL_OW 48
// PrepareHuman ( false , 3 , 3 ) ;
4632: LD_INT 0
4634: PPUSH
4635: LD_INT 3
4637: PPUSH
4638: LD_INT 3
4640: PPUSH
4641: CALL_OW 380
// un := CreateHuman ;
4645: LD_ADDR_VAR 0 2
4649: PUSH
4650: CALL_OW 44
4654: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4655: LD_VAR 0 2
4659: PPUSH
4660: LD_VAR 0 3
4664: PPUSH
4665: CALL_OW 52
// ComAgressiveMove ( veh , 36 , 25 ) ;
4669: LD_VAR 0 3
4673: PPUSH
4674: LD_INT 36
4676: PPUSH
4677: LD_INT 25
4679: PPUSH
4680: CALL_OW 114
// end ;
4684: GO 4553
4686: POP
4687: POP
// end ; end_of_file
4688: PPOPN 3
4690: END
// export function Action ; var i , tmp ; begin
4691: LD_INT 0
4693: PPUSH
4694: PPUSH
4695: PPUSH
// InGameOn ;
4696: CALL_OW 8
// DoNotAttack ( 2 , usLab ) ;
4700: LD_INT 2
4702: PPUSH
4703: LD_INT 3
4705: PPUSH
4706: CALL_OW 471
// ComMoveXY ( Heike , 78 , 61 ) ;
4710: LD_EXP 23
4714: PPUSH
4715: LD_INT 78
4717: PPUSH
4718: LD_INT 61
4720: PPUSH
4721: CALL_OW 111
// if Mike then
4725: LD_EXP 25
4729: IFFALSE 4746
// ComMoveXY ( Mike , 80 , 66 ) ;
4731: LD_EXP 25
4735: PPUSH
4736: LD_INT 80
4738: PPUSH
4739: LD_INT 66
4741: PPUSH
4742: CALL_OW 111
// if Givi then
4746: LD_EXP 24
4750: IFFALSE 4767
// ComMoveXY ( Givi , 82 , 66 ) ;
4752: LD_EXP 24
4756: PPUSH
4757: LD_INT 82
4759: PPUSH
4760: LD_INT 66
4762: PPUSH
4763: CALL_OW 111
// if Kamil then
4767: LD_EXP 26
4771: IFFALSE 4788
// ComMoveXY ( Kamil , 82 , 67 ) ;
4773: LD_EXP 26
4777: PPUSH
4778: LD_INT 82
4780: PPUSH
4781: LD_INT 67
4783: PPUSH
4784: CALL_OW 111
// CenterNowOnUnits ( Heike ) ;
4788: LD_EXP 23
4792: PPUSH
4793: CALL_OW 87
// wait ( 0 0$2 ) ;
4797: LD_INT 70
4799: PPUSH
4800: CALL_OW 67
// if Givi and Mike then
4804: LD_EXP 24
4808: PUSH
4809: LD_EXP 25
4813: AND
4814: IFFALSE 5348
// begin AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
4816: LD_EXP 24
4820: PUSH
4821: LD_EXP 25
4825: PUSH
4826: LD_EXP 26
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: LIST
4835: PPUSH
4836: LD_EXP 23
4840: PPUSH
4841: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
4845: LD_EXP 23
4849: PPUSH
4850: LD_EXP 24
4854: PPUSH
4855: CALL_OW 179
// Say ( Givi , DG-1-start ) ;
4859: LD_EXP 24
4863: PPUSH
4864: LD_STRING DG-1-start
4866: PPUSH
4867: CALL_OW 88
// Say ( Heike , DH-1-start ) ;
4871: LD_EXP 23
4875: PPUSH
4876: LD_STRING DH-1-start
4878: PPUSH
4879: CALL_OW 88
// AddComTurnUnit ( Mike , Heike ) ;
4883: LD_EXP 25
4887: PPUSH
4888: LD_EXP 23
4892: PPUSH
4893: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
4897: LD_EXP 23
4901: PPUSH
4902: LD_EXP 25
4906: PPUSH
4907: CALL_OW 179
// Say ( Mike , DM-1-start ) ;
4911: LD_EXP 25
4915: PPUSH
4916: LD_STRING DM-1-start
4918: PPUSH
4919: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
4923: LD_EXP 23
4927: PPUSH
4928: LD_STRING DH-2-start
4930: PPUSH
4931: CALL_OW 88
// Say ( Mike , DM-2-start ) ;
4935: LD_EXP 25
4939: PPUSH
4940: LD_STRING DM-2-start
4942: PPUSH
4943: CALL_OW 88
// Say ( Givi , DG-2-start ) ;
4947: LD_EXP 24
4951: PPUSH
4952: LD_STRING DG-2-start
4954: PPUSH
4955: CALL_OW 88
// ComTurnUnit ( Mike , Givi ) ;
4959: LD_EXP 25
4963: PPUSH
4964: LD_EXP 24
4968: PPUSH
4969: CALL_OW 119
// ComTurnUnit ( Heike , Mike ) ;
4973: LD_EXP 23
4977: PPUSH
4978: LD_EXP 25
4982: PPUSH
4983: CALL_OW 119
// Say ( Mike , DM-3-start ) ;
4987: LD_EXP 25
4991: PPUSH
4992: LD_STRING DM-3-start
4994: PPUSH
4995: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
4999: LD_EXP 23
5003: PPUSH
5004: LD_STRING DH-3-start
5006: PPUSH
5007: CALL_OW 88
// ComMoveXY ( [ Heike , Mike , Givi , Kamil ] , 84 , 51 ) ;
5011: LD_EXP 23
5015: PUSH
5016: LD_EXP 25
5020: PUSH
5021: LD_EXP 24
5025: PUSH
5026: LD_EXP 26
5030: PUSH
5031: EMPTY
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: PPUSH
5037: LD_INT 84
5039: PPUSH
5040: LD_INT 51
5042: PPUSH
5043: CALL_OW 111
// wait ( 0 0$2 ) ;
5047: LD_INT 70
5049: PPUSH
5050: CALL_OW 67
// Say ( Givi , DG-3-start ) ;
5054: LD_EXP 24
5058: PPUSH
5059: LD_STRING DG-3-start
5061: PPUSH
5062: CALL_OW 88
// ComHold ( [ Heike , Mike , Givi , Kamil ] ) ;
5066: LD_EXP 23
5070: PUSH
5071: LD_EXP 25
5075: PUSH
5076: LD_EXP 24
5080: PUSH
5081: LD_EXP 26
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: PPUSH
5092: CALL_OW 140
// AddComTurnUnit ( Heike , Givi ) ;
5096: LD_EXP 23
5100: PPUSH
5101: LD_EXP 24
5105: PPUSH
5106: CALL_OW 179
// AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
5110: LD_EXP 24
5114: PUSH
5115: LD_EXP 25
5119: PUSH
5120: LD_EXP 26
5124: PUSH
5125: EMPTY
5126: LIST
5127: LIST
5128: LIST
5129: PPUSH
5130: LD_EXP 23
5134: PPUSH
5135: CALL_OW 179
// Say ( Heike , DH-4-start ) ;
5139: LD_EXP 23
5143: PPUSH
5144: LD_STRING DH-4-start
5146: PPUSH
5147: CALL_OW 88
// Say ( Givi , DG-4-start ) ;
5151: LD_EXP 24
5155: PPUSH
5156: LD_STRING DG-4-start
5158: PPUSH
5159: CALL_OW 88
// Say ( Heike , DH-5-start ) ;
5163: LD_EXP 23
5167: PPUSH
5168: LD_STRING DH-5-start
5170: PPUSH
5171: CALL_OW 88
// Say ( Givi , DG-5-start ) ;
5175: LD_EXP 24
5179: PPUSH
5180: LD_STRING DG-5-start
5182: PPUSH
5183: CALL_OW 88
// Say ( Heike , DH-6-start ) ;
5187: LD_EXP 23
5191: PPUSH
5192: LD_STRING DH-6-start
5194: PPUSH
5195: CALL_OW 88
// if not Kamil then
5199: LD_EXP 26
5203: NOT
5204: IFFALSE 5255
// begin Say ( Mike , DM-6-start ) ;
5206: LD_EXP 25
5210: PPUSH
5211: LD_STRING DM-6-start
5213: PPUSH
5214: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi ] , Mike ) ;
5218: LD_EXP 23
5222: PUSH
5223: LD_EXP 24
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PPUSH
5232: LD_EXP 25
5236: PPUSH
5237: CALL_OW 119
// Say ( Givi , DG-6-start ) ;
5241: LD_EXP 24
5245: PPUSH
5246: LD_STRING DG-6-start
5248: PPUSH
5249: CALL_OW 88
// end else
5253: GO 5334
// begin Say ( Mike , DM-6-start-a ) ;
5255: LD_EXP 25
5259: PPUSH
5260: LD_STRING DM-6-start-a
5262: PPUSH
5263: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi , Mike ] , Kamil ) ;
5267: LD_EXP 23
5271: PUSH
5272: LD_EXP 24
5276: PUSH
5277: LD_EXP 25
5281: PUSH
5282: EMPTY
5283: LIST
5284: LIST
5285: LIST
5286: PPUSH
5287: LD_EXP 26
5291: PPUSH
5292: CALL_OW 119
// ComTurnUnit ( Kamil , Mike ) ;
5296: LD_EXP 26
5300: PPUSH
5301: LD_EXP 25
5305: PPUSH
5306: CALL_OW 119
// Say ( Kamil , DKam-7-start-a ) ;
5310: LD_EXP 26
5314: PPUSH
5315: LD_STRING DKam-7-start-a
5317: PPUSH
5318: CALL_OW 88
// Say ( Givi , DG-6-start-a ) ;
5322: LD_EXP 24
5326: PPUSH
5327: LD_STRING DG-6-start-a
5329: PPUSH
5330: CALL_OW 88
// end ; Say ( Heike , DH-7-start ) ;
5334: LD_EXP 23
5338: PPUSH
5339: LD_STRING DH-7-start
5341: PPUSH
5342: CALL_OW 88
// end else
5346: GO 6070
// if not Mike and Givi then
5348: LD_EXP 25
5352: NOT
5353: PUSH
5354: LD_EXP 24
5358: AND
5359: IFFALSE 5704
// begin AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5361: LD_EXP 24
5365: PUSH
5366: LD_EXP 26
5370: PUSH
5371: EMPTY
5372: LIST
5373: LIST
5374: PPUSH
5375: LD_EXP 23
5379: PPUSH
5380: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
5384: LD_EXP 23
5388: PPUSH
5389: LD_EXP 24
5393: PPUSH
5394: CALL_OW 179
// Say ( Givi , DG-1-start-c ) ;
5398: LD_EXP 24
5402: PPUSH
5403: LD_STRING DG-1-start-c
5405: PPUSH
5406: CALL_OW 88
// Say ( Heike , DH-1-start-c ) ;
5410: LD_EXP 23
5414: PPUSH
5415: LD_STRING DH-1-start-c
5417: PPUSH
5418: CALL_OW 88
// Say ( Givi , DG-2-start-c ) ;
5422: LD_EXP 24
5426: PPUSH
5427: LD_STRING DG-2-start-c
5429: PPUSH
5430: CALL_OW 88
// Say ( Heike , DH-2-start-c ) ;
5434: LD_EXP 23
5438: PPUSH
5439: LD_STRING DH-2-start-c
5441: PPUSH
5442: CALL_OW 88
// Say ( Givi , DG-3-start-c ) ;
5446: LD_EXP 24
5450: PPUSH
5451: LD_STRING DG-3-start-c
5453: PPUSH
5454: CALL_OW 88
// ComMoveXY ( Heike , 83 , 56 ) ;
5458: LD_EXP 23
5462: PPUSH
5463: LD_INT 83
5465: PPUSH
5466: LD_INT 56
5468: PPUSH
5469: CALL_OW 111
// ComMoveXY ( Givi , 83 , 59 ) ;
5473: LD_EXP 24
5477: PPUSH
5478: LD_INT 83
5480: PPUSH
5481: LD_INT 59
5483: PPUSH
5484: CALL_OW 111
// if Kamil then
5488: LD_EXP 26
5492: IFFALSE 5509
// ComMoveXY ( Kamil , 80 , 58 ) ;
5494: LD_EXP 26
5498: PPUSH
5499: LD_INT 80
5501: PPUSH
5502: LD_INT 58
5504: PPUSH
5505: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5509: LD_EXP 23
5513: PPUSH
5514: LD_EXP 24
5518: PPUSH
5519: CALL_OW 179
// AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5523: LD_EXP 24
5527: PUSH
5528: LD_EXP 26
5532: PUSH
5533: EMPTY
5534: LIST
5535: LIST
5536: PPUSH
5537: LD_EXP 23
5541: PPUSH
5542: CALL_OW 179
// Say ( Heike , DH-3-start-c ) ;
5546: LD_EXP 23
5550: PPUSH
5551: LD_STRING DH-3-start-c
5553: PPUSH
5554: CALL_OW 88
// Say ( Givi , DG-4-start-c ) ;
5558: LD_EXP 24
5562: PPUSH
5563: LD_STRING DG-4-start-c
5565: PPUSH
5566: CALL_OW 88
// Say ( Heike , DH-5-start-c ) ;
5570: LD_EXP 23
5574: PPUSH
5575: LD_STRING DH-5-start-c
5577: PPUSH
5578: CALL_OW 88
// Say ( Givi , DG-5-start-c ) ;
5582: LD_EXP 24
5586: PPUSH
5587: LD_STRING DG-5-start-c
5589: PPUSH
5590: CALL_OW 88
// Say ( Heike , DH-6-start-c ) ;
5594: LD_EXP 23
5598: PPUSH
5599: LD_STRING DH-6-start-c
5601: PPUSH
5602: CALL_OW 88
// Say ( Givi , DG-6-start-c ) ;
5606: LD_EXP 24
5610: PPUSH
5611: LD_STRING DG-6-start-c
5613: PPUSH
5614: CALL_OW 88
// if Kamil then
5618: LD_EXP 26
5622: IFFALSE 5678
// begin ComTurnUnit ( Kamil , Heike ) ;
5624: LD_EXP 26
5628: PPUSH
5629: LD_EXP 23
5633: PPUSH
5634: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5638: LD_EXP 26
5642: PPUSH
5643: LD_STRING DKam-1-start-c
5645: PPUSH
5646: CALL_OW 88
// ComTurnUnit ( Givi , Kamil ) ;
5650: LD_EXP 24
5654: PPUSH
5655: LD_EXP 26
5659: PPUSH
5660: CALL_OW 119
// Say ( Givi , DG-7-start-c ) ;
5664: LD_EXP 24
5668: PPUSH
5669: LD_STRING DG-7-start-c
5671: PPUSH
5672: CALL_OW 88
// end else
5676: GO 5702
// begin Say ( Givi , DG-8-start-c ) ;
5678: LD_EXP 24
5682: PPUSH
5683: LD_STRING DG-8-start-c
5685: PPUSH
5686: CALL_OW 88
// Say ( Heike , DH-7-start-c ) ;
5690: LD_EXP 23
5694: PPUSH
5695: LD_STRING DH-7-start-c
5697: PPUSH
5698: CALL_OW 88
// end ; end else
5702: GO 6070
// if not Givi and Mike then
5704: LD_EXP 24
5708: NOT
5709: PUSH
5710: LD_EXP 25
5714: AND
5715: IFFALSE 5974
// begin AddComTurnUnit ( [ Mike , Kamil ] , Heike ) ;
5717: LD_EXP 25
5721: PUSH
5722: LD_EXP 26
5726: PUSH
5727: EMPTY
5728: LIST
5729: LIST
5730: PPUSH
5731: LD_EXP 23
5735: PPUSH
5736: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
5740: LD_EXP 23
5744: PPUSH
5745: LD_EXP 25
5749: PPUSH
5750: CALL_OW 179
// Say ( Mike , DM-1-start-b ) ;
5754: LD_EXP 25
5758: PPUSH
5759: LD_STRING DM-1-start-b
5761: PPUSH
5762: CALL_OW 88
// Say ( Heike , DH-1-start-b ) ;
5766: LD_EXP 23
5770: PPUSH
5771: LD_STRING DH-1-start-b
5773: PPUSH
5774: CALL_OW 88
// Say ( Mike , DM-2-start-b ) ;
5778: LD_EXP 25
5782: PPUSH
5783: LD_STRING DM-2-start-b
5785: PPUSH
5786: CALL_OW 88
// Say ( Heike , DH-2-start-b ) ;
5790: LD_EXP 23
5794: PPUSH
5795: LD_STRING DH-2-start-b
5797: PPUSH
5798: CALL_OW 88
// Say ( Mike , DM-3-start-b ) ;
5802: LD_EXP 25
5806: PPUSH
5807: LD_STRING DM-3-start-b
5809: PPUSH
5810: CALL_OW 88
// if Kamil then
5814: LD_EXP 26
5818: IFFALSE 5835
// ComMoveXY ( Kamil , 80 , 58 ) ;
5820: LD_EXP 26
5824: PPUSH
5825: LD_INT 80
5827: PPUSH
5828: LD_INT 58
5830: PPUSH
5831: CALL_OW 111
// ComMoveXY ( Heike , 83 , 56 ) ;
5835: LD_EXP 23
5839: PPUSH
5840: LD_INT 83
5842: PPUSH
5843: LD_INT 56
5845: PPUSH
5846: CALL_OW 111
// ComMoveXY ( Mike , 83 , 59 ) ;
5850: LD_EXP 25
5854: PPUSH
5855: LD_INT 83
5857: PPUSH
5858: LD_INT 59
5860: PPUSH
5861: CALL_OW 111
// AddComTurnUnit ( Heike , Mike ) ;
5865: LD_EXP 23
5869: PPUSH
5870: LD_EXP 25
5874: PPUSH
5875: CALL_OW 179
// AddComTurnUnit ( [ Kamil , Mike ] , Heike ) ;
5879: LD_EXP 26
5883: PUSH
5884: LD_EXP 25
5888: PUSH
5889: EMPTY
5890: LIST
5891: LIST
5892: PPUSH
5893: LD_EXP 23
5897: PPUSH
5898: CALL_OW 179
// Say ( Heike , DH-3-start-b ) ;
5902: LD_EXP 23
5906: PPUSH
5907: LD_STRING DH-3-start-b
5909: PPUSH
5910: CALL_OW 88
// Say ( Mike , DM-4-start-b ) ;
5914: LD_EXP 25
5918: PPUSH
5919: LD_STRING DM-4-start-b
5921: PPUSH
5922: CALL_OW 88
// if Kamil then
5926: LD_EXP 26
5930: IFFALSE 5960
// begin ComTurnUnit ( Kamil , Heike ) ;
5932: LD_EXP 26
5936: PPUSH
5937: LD_EXP 23
5941: PPUSH
5942: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5946: LD_EXP 26
5950: PPUSH
5951: LD_STRING DKam-1-start-c
5953: PPUSH
5954: CALL_OW 88
// end else
5958: GO 5972
// begin Say ( Mike , DM-5-start-b ) ;
5960: LD_EXP 25
5964: PPUSH
5965: LD_STRING DM-5-start-b
5967: PPUSH
5968: CALL_OW 88
// end ; end else
5972: GO 6070
// if Kamil then
5974: LD_EXP 26
5978: IFFALSE 6058
// begin AddComTurnUnit ( Heike , Kamil ) ;
5980: LD_EXP 23
5984: PPUSH
5985: LD_EXP 26
5989: PPUSH
5990: CALL_OW 179
// AddComTurnUnit ( Kamil , Heike ) ;
5994: LD_EXP 26
5998: PPUSH
5999: LD_EXP 23
6003: PPUSH
6004: CALL_OW 179
// Say ( Heike , DH-1-start-f ) ;
6008: LD_EXP 23
6012: PPUSH
6013: LD_STRING DH-1-start-f
6015: PPUSH
6016: CALL_OW 88
// Say ( Kamil , DKam-1-start-f ) ;
6020: LD_EXP 26
6024: PPUSH
6025: LD_STRING DKam-1-start-f
6027: PPUSH
6028: CALL_OW 88
// Say ( Heike , DH-2-start-f ) ;
6032: LD_EXP 23
6036: PPUSH
6037: LD_STRING DH-2-start-f
6039: PPUSH
6040: CALL_OW 88
// Say ( Kamil , DKam-2-start-f ) ;
6044: LD_EXP 26
6048: PPUSH
6049: LD_STRING DKam-2-start-f
6051: PPUSH
6052: CALL_OW 88
// end else
6056: GO 6070
// begin Say ( Heike , DH-1-start-d ) ;
6058: LD_EXP 23
6062: PPUSH
6063: LD_STRING DH-1-start-d
6065: PPUSH
6066: CALL_OW 88
// end ; ComFree ( [ Heike , Givi , Mike , Kamil ] ) ;
6070: LD_EXP 23
6074: PUSH
6075: LD_EXP 24
6079: PUSH
6080: LD_EXP 25
6084: PUSH
6085: LD_EXP 26
6089: PUSH
6090: EMPTY
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: PPUSH
6096: CALL_OW 139
// InGameOff ;
6100: CALL_OW 9
// ChangeMissionObjectives ( OEast ) ;
6104: LD_STRING OEast
6106: PPUSH
6107: CALL_OW 337
// SetAreaMapShow ( eastExitArea , 1 ) ;
6111: LD_INT 10
6113: PPUSH
6114: LD_INT 1
6116: PPUSH
6117: CALL_OW 424
// SaveForQuickRestart ;
6121: CALL_OW 22
// wait ( 0 0$20 ) ;
6125: LD_INT 700
6127: PPUSH
6128: CALL_OW 67
// SendSciToForest ;
6132: CALL 1524 0 0
// if Difficulty = 1 then
6136: LD_OWVAR 67
6140: PUSH
6141: LD_INT 1
6143: EQUAL
6144: IFFALSE 6148
// exit ;
6146: GO 6269
// wait ( [ 5 5$00 , 2 2$30 , 2 2$00 ] [ Difficulty - 1 ] ) ;
6148: LD_INT 10500
6150: PUSH
6151: LD_INT 5250
6153: PUSH
6154: LD_INT 4200
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: LIST
6161: PUSH
6162: LD_OWVAR 67
6166: PUSH
6167: LD_INT 1
6169: MINUS
6170: ARRAY
6171: PPUSH
6172: CALL_OW 67
// if usAlert then
6176: LD_EXP 10
6180: IFFALSE 6184
// exit ;
6182: GO 6269
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
6184: LD_ADDR_VAR 0 3
6188: PUSH
6189: LD_INT 22
6191: PUSH
6192: LD_INT 1
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: PUSH
6199: LD_INT 25
6201: PUSH
6202: LD_INT 2
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: PPUSH
6213: CALL_OW 69
6217: ST_TO_ADDR
// if not tmp then
6218: LD_VAR 0 3
6222: NOT
6223: IFFALSE 6227
// exit ;
6225: GO 6269
// ComExitBuilding ( tmp ) ;
6227: LD_VAR 0 3
6231: PPUSH
6232: CALL_OW 122
// AddComBuild ( tmp , b_breastwork , 40 , 13 , 3 ) ;
6236: LD_VAR 0 3
6240: PPUSH
6241: LD_INT 31
6243: PPUSH
6244: LD_INT 40
6246: PPUSH
6247: LD_INT 13
6249: PPUSH
6250: LD_INT 3
6252: PPUSH
6253: CALL_OW 205
// AddComEnterUnit ( tmp , Delta ) ;
6257: LD_VAR 0 3
6261: PPUSH
6262: LD_INT 1
6264: PPUSH
6265: CALL_OW 180
// end ;
6269: LD_VAR 0 1
6273: RET
// every 3 3$00 do
6274: GO 6276
6276: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
6277: LD_INT 1
6279: PPUSH
6280: LD_INT 570
6282: PPUSH
6283: LD_INT 350
6285: PPUSH
6286: CALL_OW 550
// wait ( 2 2$40 ) ;
6290: LD_INT 5600
6292: PPUSH
6293: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
6297: LD_INT 0
6299: PPUSH
6300: LD_INT 570
6302: PPUSH
6303: LD_INT 350
6305: PPUSH
6306: CALL_OW 550
// end ;
6310: END
// every 0 0$1 trigger not aviradzeSpotted and See ( 2 , Aviradze ) do var i , pepAmount ;
6311: LD_EXP 4
6315: NOT
6316: PUSH
6317: LD_INT 2
6319: PPUSH
6320: LD_EXP 27
6324: PPUSH
6325: CALL_OW 292
6329: AND
6330: IFFALSE 7246
6332: GO 6334
6334: DISABLE
6335: LD_INT 0
6337: PPUSH
6338: PPUSH
// begin SetAreaMapShow ( eastExitArea , 0 ) ;
6339: LD_INT 10
6341: PPUSH
6342: LD_INT 0
6344: PPUSH
6345: CALL_OW 424
// aviradzeSpotted := true ;
6349: LD_ADDR_EXP 4
6353: PUSH
6354: LD_INT 1
6356: ST_TO_ADDR
// pepAmount := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ;
6357: LD_ADDR_VAR 0 2
6361: PUSH
6362: LD_INT 22
6364: PUSH
6365: LD_INT 2
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: PUSH
6372: LD_INT 21
6374: PUSH
6375: LD_INT 1
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: PPUSH
6386: CALL_OW 69
6390: ST_TO_ADDR
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6391: LD_EXP 23
6395: PPUSH
6396: LD_EXP 27
6400: PPUSH
6401: CALL_OW 250
6405: PPUSH
6406: LD_EXP 27
6410: PPUSH
6411: CALL_OW 251
6415: PPUSH
6416: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6420: LD_INT 35
6422: PPUSH
6423: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 16 ;
6427: LD_EXP 23
6431: PPUSH
6432: LD_EXP 27
6436: PPUSH
6437: CALL_OW 296
6441: PUSH
6442: LD_INT 16
6444: LESS
6445: IFFALSE 6420
// InGameOn ;
6447: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
6451: LD_INT 5
6453: PPUSH
6454: LD_INT 2
6456: PPUSH
6457: CALL_OW 343
// if pepAmount > 2 then
6461: LD_VAR 0 2
6465: PUSH
6466: LD_INT 2
6468: GREATER
6469: IFFALSE 6485
// Say ( Heike , DH-1-spot ) else
6471: LD_EXP 23
6475: PPUSH
6476: LD_STRING DH-1-spot
6478: PPUSH
6479: CALL_OW 88
6483: GO 6497
// Say ( Heike , DH-1-spot-d ) ;
6485: LD_EXP 23
6489: PPUSH
6490: LD_STRING DH-1-spot-d
6492: PPUSH
6493: CALL_OW 88
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6497: LD_EXP 23
6501: PPUSH
6502: LD_EXP 27
6506: PPUSH
6507: CALL_OW 250
6511: PPUSH
6512: LD_EXP 27
6516: PPUSH
6517: CALL_OW 251
6521: PPUSH
6522: CALL_OW 111
// for i in [ Kamil , Mike , Givi ] do
6526: LD_ADDR_VAR 0 1
6530: PUSH
6531: LD_EXP 26
6535: PUSH
6536: LD_EXP 25
6540: PUSH
6541: LD_EXP 24
6545: PUSH
6546: EMPTY
6547: LIST
6548: LIST
6549: LIST
6550: PUSH
6551: FOR_IN
6552: IFFALSE 6591
// if GetDistUnits ( i , Aviradze ) > 7 then
6554: LD_VAR 0 1
6558: PPUSH
6559: LD_EXP 27
6563: PPUSH
6564: CALL_OW 296
6568: PUSH
6569: LD_INT 7
6571: GREATER
6572: IFFALSE 6589
// ComMoveXY ( i , 102 , 40 ) ;
6574: LD_VAR 0 1
6578: PPUSH
6579: LD_INT 102
6581: PPUSH
6582: LD_INT 40
6584: PPUSH
6585: CALL_OW 111
6589: GO 6551
6591: POP
6592: POP
// repeat wait ( 0 0$1 ) ;
6593: LD_INT 35
6595: PPUSH
6596: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 6 ;
6600: LD_EXP 23
6604: PPUSH
6605: LD_EXP 27
6609: PPUSH
6610: CALL_OW 296
6614: PUSH
6615: LD_INT 6
6617: LESS
6618: IFFALSE 6593
// ComTurnUnit ( Heike , Aviradze ) ;
6620: LD_EXP 23
6624: PPUSH
6625: LD_EXP 27
6629: PPUSH
6630: CALL_OW 119
// ComTurnUnit ( [ Aviradze , Sophia , Kaia ] , Heike ) ;
6634: LD_EXP 27
6638: PUSH
6639: LD_EXP 29
6643: PUSH
6644: LD_EXP 28
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: LIST
6653: PPUSH
6654: LD_EXP 23
6658: PPUSH
6659: CALL_OW 119
// if pepAmount > 1 then
6663: LD_VAR 0 2
6667: PUSH
6668: LD_INT 1
6670: GREATER
6671: IFFALSE 6723
// begin wait ( 0 0$2 ) ;
6673: LD_INT 70
6675: PPUSH
6676: CALL_OW 67
// ComTurnUnit ( [ Kamil , Mike , Givi ] , Aviradze ) ;
6680: LD_EXP 26
6684: PUSH
6685: LD_EXP 25
6689: PUSH
6690: LD_EXP 24
6694: PUSH
6695: EMPTY
6696: LIST
6697: LIST
6698: LIST
6699: PPUSH
6700: LD_EXP 27
6704: PPUSH
6705: CALL_OW 119
// Say ( Heike , DH-2-spot ) ;
6709: LD_EXP 23
6713: PPUSH
6714: LD_STRING DH-2-spot
6716: PPUSH
6717: CALL_OW 88
// end else
6721: GO 6735
// Say ( Heike , DH-2-spot-d ) ;
6723: LD_EXP 23
6727: PPUSH
6728: LD_STRING DH-2-spot-d
6730: PPUSH
6731: CALL_OW 88
// Say ( Aviradze , DA-2-spot ) ;
6735: LD_EXP 27
6739: PPUSH
6740: LD_STRING DA-2-spot
6742: PPUSH
6743: CALL_OW 88
// Say ( Heike , DH-3-spot ) ;
6747: LD_EXP 23
6751: PPUSH
6752: LD_STRING DH-3-spot
6754: PPUSH
6755: CALL_OW 88
// ComMoveUnit ( Kaia , Heike ) ;
6759: LD_EXP 28
6763: PPUSH
6764: LD_EXP 23
6768: PPUSH
6769: CALL_OW 112
// ComTurnUnit ( Heike , Kaia ) ;
6773: LD_EXP 23
6777: PPUSH
6778: LD_EXP 28
6782: PPUSH
6783: CALL_OW 119
// wait ( 0 0$0.3 ) ;
6787: LD_INT 10
6789: PPUSH
6790: CALL_OW 67
// Say ( Kaia , DK-3-spot ) ;
6794: LD_EXP 28
6798: PPUSH
6799: LD_STRING DK-3-spot
6801: PPUSH
6802: CALL_OW 88
// ComTurnUnit ( Kaia , Heike ) ;
6806: LD_EXP 28
6810: PPUSH
6811: LD_EXP 23
6815: PPUSH
6816: CALL_OW 119
// Say ( Heike , DH-4-spot ) ;
6820: LD_EXP 23
6824: PPUSH
6825: LD_STRING DH-4-spot
6827: PPUSH
6828: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6832: LD_INT 10
6834: PPUSH
6835: CALL_OW 67
// ComTurnUnit ( Heike , Aviradze ) ;
6839: LD_EXP 23
6843: PPUSH
6844: LD_EXP 27
6848: PPUSH
6849: CALL_OW 119
// Say ( Aviradze , DA-4-spot ) ;
6853: LD_EXP 27
6857: PPUSH
6858: LD_STRING DA-4-spot
6860: PPUSH
6861: CALL_OW 88
// ComTurnUnit ( Kaia , Aviradze ) ;
6865: LD_EXP 28
6869: PPUSH
6870: LD_EXP 27
6874: PPUSH
6875: CALL_OW 119
// Say ( Kaia , DK-4-spot ) ;
6879: LD_EXP 28
6883: PPUSH
6884: LD_STRING DK-4-spot
6886: PPUSH
6887: CALL_OW 88
// ComTurnUnit ( Aviradze , Kaia ) ;
6891: LD_EXP 27
6895: PPUSH
6896: LD_EXP 28
6900: PPUSH
6901: CALL_OW 119
// Say ( Aviradze , DA-5-spot ) ;
6905: LD_EXP 27
6909: PPUSH
6910: LD_STRING DA-5-spot
6912: PPUSH
6913: CALL_OW 88
// Say ( Kaia , DK-5-spot ) ;
6917: LD_EXP 28
6921: PPUSH
6922: LD_STRING DK-5-spot
6924: PPUSH
6925: CALL_OW 88
// if pepAmount = 1 then
6929: LD_VAR 0 2
6933: PUSH
6934: LD_INT 1
6936: EQUAL
6937: IFFALSE 6951
// Say ( Heike , DH-5-spot-f ) ;
6939: LD_EXP 23
6943: PPUSH
6944: LD_STRING DH-5-spot-f
6946: PPUSH
6947: CALL_OW 88
// if pepAmount < 3 then
6951: LD_VAR 0 2
6955: PUSH
6956: LD_INT 3
6958: LESS
6959: IFFALSE 6975
// Say ( Aviradze , DA-6-spot-f ) else
6961: LD_EXP 27
6965: PPUSH
6966: LD_STRING DA-6-spot-f
6968: PPUSH
6969: CALL_OW 88
6973: GO 7011
// if pepAmount < 4 then
6975: LD_VAR 0 2
6979: PUSH
6980: LD_INT 4
6982: LESS
6983: IFFALSE 6999
// Say ( Aviradze , DA-6-spot-c ) else
6985: LD_EXP 27
6989: PPUSH
6990: LD_STRING DA-6-spot-c
6992: PPUSH
6993: CALL_OW 88
6997: GO 7011
// Say ( Aviradze , DA-6-spot ) ;
6999: LD_EXP 27
7003: PPUSH
7004: LD_STRING DA-6-spot
7006: PPUSH
7007: CALL_OW 88
// if Kamil then
7011: LD_EXP 26
7015: IFFALSE 7029
// Say ( Kamil , DKam-6-spot ) ;
7017: LD_EXP 26
7021: PPUSH
7022: LD_STRING DKam-6-spot
7024: PPUSH
7025: CALL_OW 88
// Say ( Kaia , DK-6-spot ) ;
7029: LD_EXP 28
7033: PPUSH
7034: LD_STRING DK-6-spot
7036: PPUSH
7037: CALL_OW 88
// ComTurnUnit ( Aviradze , Heike ) ;
7041: LD_EXP 27
7045: PPUSH
7046: LD_EXP 23
7050: PPUSH
7051: CALL_OW 119
// Say ( Aviradze , DA-7-spot ) ;
7055: LD_EXP 27
7059: PPUSH
7060: LD_STRING DA-7-spot
7062: PPUSH
7063: CALL_OW 88
// Say ( Heike , DH-7-spot ) ;
7067: LD_EXP 23
7071: PPUSH
7072: LD_STRING DH-7-spot
7074: PPUSH
7075: CALL_OW 88
// if sciCounterKill >= 3 then
7079: LD_EXP 9
7083: PUSH
7084: LD_INT 3
7086: GREATEREQUAL
7087: IFFALSE 7113
// begin Say ( Heike , DH-7-spot-a ) ;
7089: LD_EXP 23
7093: PPUSH
7094: LD_STRING DH-7-spot-a
7096: PPUSH
7097: CALL_OW 88
// Say ( Aviradze , DA-8-spot-a ) ;
7101: LD_EXP 27
7105: PPUSH
7106: LD_STRING DA-8-spot-a
7108: PPUSH
7109: CALL_OW 88
// end ; InGameOff ;
7113: CALL_OW 9
// if sciCounterKill < 3 then
7117: LD_EXP 9
7121: PUSH
7122: LD_INT 3
7124: LESS
7125: IFFALSE 7184
// begin SetSide ( Kaia , 2 ) ;
7127: LD_EXP 28
7131: PPUSH
7132: LD_INT 2
7134: PPUSH
7135: CALL_OW 235
// ComFree ( Kaia ) ;
7139: LD_EXP 28
7143: PPUSH
7144: CALL_OW 139
// if Kamil then
7148: LD_EXP 26
7152: IFFALSE 7175
// begin ComHold ( Kamil ) ;
7154: LD_EXP 26
7158: PPUSH
7159: CALL_OW 140
// SetSide ( Kamil , 5 ) ;
7163: LD_EXP 26
7167: PPUSH
7168: LD_INT 5
7170: PPUSH
7171: CALL_OW 235
// end ; ChangeMissionObjectives ( OSci ) ;
7175: LD_STRING OSci
7177: PPUSH
7178: CALL_OW 337
// end else
7182: GO 7246
// begin aviradzeQuestDone := true ;
7184: LD_ADDR_EXP 8
7188: PUSH
7189: LD_INT 1
7191: ST_TO_ADDR
// attackDeltaAllowed := true ;
7192: LD_ADDR_EXP 14
7196: PUSH
7197: LD_INT 1
7199: ST_TO_ADDR
// ChangeMissionObjectives ( ODelta2 ) ;
7200: LD_STRING ODelta2
7202: PPUSH
7203: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
7207: LD_ADDR_VAR 0 1
7211: PUSH
7212: LD_INT 22
7214: PUSH
7215: LD_INT 5
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: PPUSH
7222: CALL_OW 69
7226: PUSH
7227: FOR_IN
7228: IFFALSE 7244
// SetSide ( i , 2 ) ;
7230: LD_VAR 0 1
7234: PPUSH
7235: LD_INT 2
7237: PPUSH
7238: CALL_OW 235
7242: GO 7227
7244: POP
7245: POP
// end ; end ;
7246: PPOPN 2
7248: END
// every 0 0$2 trigger usAlert and not aviradzeQuestDone do
7249: LD_EXP 10
7253: PUSH
7254: LD_EXP 8
7258: NOT
7259: AND
7260: IFFALSE 7277
7262: GO 7264
7264: DISABLE
// SayRadio ( Lynch , DDelta-Alarm-1 ) ;
7265: LD_EXP 20
7269: PPUSH
7270: LD_STRING DDelta-Alarm-1
7272: PPUSH
7273: CALL_OW 94
7277: END
// every 0 0$1 trigger not sciSpotted and GetDistUnits ( NearestUnitToUnit ( usSci , Heike ) , Heike ) < 8 and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and not aviradzeSpotted do
7278: LD_EXP 7
7282: NOT
7283: PUSH
7284: LD_EXP 22
7288: PPUSH
7289: LD_EXP 23
7293: PPUSH
7294: CALL_OW 74
7298: PPUSH
7299: LD_EXP 23
7303: PPUSH
7304: CALL_OW 296
7308: PUSH
7309: LD_INT 8
7311: LESS
7312: AND
7313: PUSH
7314: LD_INT 2
7316: PPUSH
7317: LD_EXP 22
7321: PPUSH
7322: LD_EXP 23
7326: PPUSH
7327: CALL_OW 74
7331: PPUSH
7332: CALL_OW 292
7336: AND
7337: PUSH
7338: LD_INT 22
7340: PUSH
7341: LD_INT 2
7343: PUSH
7344: EMPTY
7345: LIST
7346: LIST
7347: PUSH
7348: LD_INT 21
7350: PUSH
7351: LD_INT 1
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: PPUSH
7362: CALL_OW 69
7366: PUSH
7367: LD_INT 1
7369: GREATER
7370: AND
7371: PUSH
7372: LD_EXP 4
7376: NOT
7377: AND
7378: IFFALSE 7422
7380: GO 7382
7382: DISABLE
// begin sciSpotted := true ;
7383: LD_ADDR_EXP 7
7387: PUSH
7388: LD_INT 1
7390: ST_TO_ADDR
// CenterNowOnUnits ( NearestUnitToUnit ( usSci , Heike ) ) ;
7391: LD_EXP 22
7395: PPUSH
7396: LD_EXP 23
7400: PPUSH
7401: CALL_OW 74
7405: PPUSH
7406: CALL_OW 87
// Say ( Heike , DH-1-sci ) ;
7410: LD_EXP 23
7414: PPUSH
7415: LD_STRING DH-1-sci
7417: PPUSH
7418: CALL_OW 88
// end ;
7422: END
// every 0 0$1 trigger aviradzeSpotted and not sciSpotted and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and aviradzeSpotted and not aviradzeQuestDone do var un ;
7423: LD_EXP 4
7427: PUSH
7428: LD_EXP 7
7432: NOT
7433: AND
7434: PUSH
7435: LD_INT 2
7437: PPUSH
7438: LD_EXP 22
7442: PPUSH
7443: LD_EXP 23
7447: PPUSH
7448: CALL_OW 74
7452: PPUSH
7453: CALL_OW 292
7457: AND
7458: PUSH
7459: LD_INT 22
7461: PUSH
7462: LD_INT 2
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: PUSH
7469: LD_INT 21
7471: PUSH
7472: LD_INT 1
7474: PUSH
7475: EMPTY
7476: LIST
7477: LIST
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: PPUSH
7483: CALL_OW 69
7487: PUSH
7488: LD_INT 1
7490: GREATER
7491: AND
7492: PUSH
7493: LD_EXP 4
7497: AND
7498: PUSH
7499: LD_EXP 8
7503: NOT
7504: AND
7505: IFFALSE 7646
7507: GO 7509
7509: DISABLE
7510: LD_INT 0
7512: PPUSH
// begin sciSpotted := true ;
7513: LD_ADDR_EXP 7
7517: PUSH
7518: LD_INT 1
7520: ST_TO_ADDR
// un := NearestUnitToUnit ( usSci , Heike ) ;
7521: LD_ADDR_VAR 0 1
7525: PUSH
7526: LD_EXP 22
7530: PPUSH
7531: LD_EXP 23
7535: PPUSH
7536: CALL_OW 74
7540: ST_TO_ADDR
// DialogueOn ;
7541: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 2 , - 3 ) ;
7545: LD_VAR 0 1
7549: PPUSH
7550: CALL_OW 250
7554: PPUSH
7555: LD_VAR 0 1
7559: PPUSH
7560: CALL_OW 251
7564: PPUSH
7565: LD_INT 2
7567: PPUSH
7568: LD_INT 3
7570: NEG
7571: PPUSH
7572: CALL_OW 330
// CenterNowOnUnits ( un ) ;
7576: LD_VAR 0 1
7580: PPUSH
7581: CALL_OW 87
// Say ( Heike , DH-1-sci-a ) ;
7585: LD_EXP 23
7589: PPUSH
7590: LD_STRING DH-1-sci-a
7592: PPUSH
7593: CALL_OW 88
// if Mike then
7597: LD_EXP 25
7601: IFFALSE 7615
// Say ( Mike , DM-1-sci-a ) ;
7603: LD_EXP 25
7607: PPUSH
7608: LD_STRING DM-1-sci-a
7610: PPUSH
7611: CALL_OW 88
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 2 ) ;
7615: LD_VAR 0 1
7619: PPUSH
7620: CALL_OW 250
7624: PPUSH
7625: LD_VAR 0 1
7629: PPUSH
7630: CALL_OW 251
7634: PPUSH
7635: LD_INT 2
7637: PPUSH
7638: CALL_OW 331
// DialogueOff ;
7642: CALL_OW 7
// end ;
7646: PPOPN 1
7648: END
// every 0 0$1 trigger usAlert and ( GetLives ( Gladstone ) < 1000 or GetLives ( usLab ) < 999 ) do var veh ;
7649: LD_EXP 10
7653: PUSH
7654: LD_EXP 19
7658: PPUSH
7659: CALL_OW 256
7663: PUSH
7664: LD_INT 1000
7666: LESS
7667: PUSH
7668: LD_INT 3
7670: PPUSH
7671: CALL_OW 256
7675: PUSH
7676: LD_INT 999
7678: LESS
7679: OR
7680: AND
7681: IFFALSE 7937
7683: GO 7685
7685: DISABLE
7686: LD_INT 0
7688: PPUSH
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
7689: LD_ADDR_VAR 0 1
7693: PUSH
7694: LD_INT 22
7696: PUSH
7697: LD_INT 1
7699: PUSH
7700: EMPTY
7701: LIST
7702: LIST
7703: PUSH
7704: LD_INT 21
7706: PUSH
7707: LD_INT 2
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: PUSH
7714: LD_INT 58
7716: PUSH
7717: EMPTY
7718: LIST
7719: PUSH
7720: EMPTY
7721: LIST
7722: LIST
7723: LIST
7724: PPUSH
7725: CALL_OW 69
7729: ST_TO_ADDR
// if veh and IsOk ( Gladstone ) then
7730: LD_VAR 0 1
7734: PUSH
7735: LD_EXP 19
7739: PPUSH
7740: CALL_OW 302
7744: AND
7745: IFFALSE 7787
// begin if IsInUnit ( Gladstone ) then
7747: LD_EXP 19
7751: PPUSH
7752: CALL_OW 310
7756: IFFALSE 7767
// ComExitBuilding ( Gladstone ) ;
7758: LD_EXP 19
7762: PPUSH
7763: CALL_OW 122
// AddComEnterUnit ( Gladstone , veh [ 1 ] ) ;
7767: LD_EXP 19
7771: PPUSH
7772: LD_VAR 0 1
7776: PUSH
7777: LD_INT 1
7779: ARRAY
7780: PPUSH
7781: CALL_OW 180
// end else
7785: GO 7807
// if IsInUnit ( Gladstone ) then
7787: LD_EXP 19
7791: PPUSH
7792: CALL_OW 310
7796: IFFALSE 7807
// ComExitBuilding ( Gladstone ) ;
7798: LD_EXP 19
7802: PPUSH
7803: CALL_OW 122
// AddComMoveXY ( Gladstone , 27 , 51 ) ;
7807: LD_EXP 19
7811: PPUSH
7812: LD_INT 27
7814: PPUSH
7815: LD_INT 51
7817: PPUSH
7818: CALL_OW 171
// Say ( Gladstone , D8-Glad-2 ) ;
7822: LD_EXP 19
7826: PPUSH
7827: LD_STRING D8-Glad-2
7829: PPUSH
7830: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7834: LD_INT 35
7836: PPUSH
7837: CALL_OW 67
// until IsAt ( Gladstone , 27 , 51 ) or IsAt ( IsInUnit ( Gladstone ) , 27 , 51 ) or IsDead ( Gladstone ) ;
7841: LD_EXP 19
7845: PPUSH
7846: LD_INT 27
7848: PPUSH
7849: LD_INT 51
7851: PPUSH
7852: CALL_OW 307
7856: PUSH
7857: LD_EXP 19
7861: PPUSH
7862: CALL_OW 310
7866: PPUSH
7867: LD_INT 27
7869: PPUSH
7870: LD_INT 51
7872: PPUSH
7873: CALL_OW 307
7877: OR
7878: PUSH
7879: LD_EXP 19
7883: PPUSH
7884: CALL_OW 301
7888: OR
7889: IFFALSE 7834
// if IsDead ( Gladstone ) then
7891: LD_EXP 19
7895: PPUSH
7896: CALL_OW 301
7900: IFFALSE 7904
// exit ;
7902: GO 7937
// RemoveUnit ( HexInfo ( 27 , 51 ) ) ;
7904: LD_INT 27
7906: PPUSH
7907: LD_INT 51
7909: PPUSH
7910: CALL_OW 428
7914: PPUSH
7915: CALL_OW 64
// gladstoneEscaped := true ;
7919: LD_ADDR_EXP 12
7923: PUSH
7924: LD_INT 1
7926: ST_TO_ADDR
// SaveVariable ( true , 02_GladstoneEscaped ) ;
7927: LD_INT 1
7929: PPUSH
7930: LD_STRING 02_GladstoneEscaped
7932: PPUSH
7933: CALL_OW 39
// end ;
7937: PPOPN 1
7939: END
// every 0 0$1 trigger aviradzeSpotted and ( sciCounterKill >= 3 or not usSci ) and not aviradzeQuestDone do
7940: LD_EXP 4
7944: PUSH
7945: LD_EXP 9
7949: PUSH
7950: LD_INT 3
7952: GREATEREQUAL
7953: PUSH
7954: LD_EXP 22
7958: NOT
7959: OR
7960: AND
7961: PUSH
7962: LD_EXP 8
7966: NOT
7967: AND
7968: IFFALSE 8011
7970: GO 7972
7972: DISABLE
// begin aviradzeQuestDone := true ;
7973: LD_ADDR_EXP 8
7977: PUSH
7978: LD_INT 1
7980: ST_TO_ADDR
// Say ( Heike , DH-1-quest-done ) ;
7981: LD_EXP 23
7985: PPUSH
7986: LD_STRING DH-1-quest-done
7988: PPUSH
7989: CALL_OW 88
// if Givi then
7993: LD_EXP 24
7997: IFFALSE 8011
// Say ( Givi , DG-1-quest-done ) ;
7999: LD_EXP 24
8003: PPUSH
8004: LD_STRING DG-1-quest-done
8006: PPUSH
8007: CALL_OW 88
// end ;
8011: END
// every 0 0$1 trigger FilterUnitsInArea ( frontlineAttack , [ f_side , 2 ] ) > 1 and GetSide ( Delta ) = 2 and IsOk ( Mike ) and IsOk ( Heike ) do
8012: LD_INT 11
8014: PPUSH
8015: LD_INT 22
8017: PUSH
8018: LD_INT 2
8020: PUSH
8021: EMPTY
8022: LIST
8023: LIST
8024: PPUSH
8025: CALL_OW 70
8029: PUSH
8030: LD_INT 1
8032: GREATER
8033: PUSH
8034: LD_INT 1
8036: PPUSH
8037: CALL_OW 255
8041: PUSH
8042: LD_INT 2
8044: EQUAL
8045: AND
8046: PUSH
8047: LD_EXP 25
8051: PPUSH
8052: CALL_OW 302
8056: AND
8057: PUSH
8058: LD_EXP 23
8062: PPUSH
8063: CALL_OW 302
8067: AND
8068: IFFALSE 8213
8070: GO 8072
8072: DISABLE
// begin DialogueOn ;
8073: CALL_OW 6
// PlaceSeeing ( 47 , 19 , 2 , - 6 ) ;
8077: LD_INT 47
8079: PPUSH
8080: LD_INT 19
8082: PPUSH
8083: LD_INT 2
8085: PPUSH
8086: LD_INT 6
8088: NEG
8089: PPUSH
8090: CALL_OW 330
// RemoveSeeing ( 47 , 19 , 2 ) ;
8094: LD_INT 47
8096: PPUSH
8097: LD_INT 19
8099: PPUSH
8100: LD_INT 2
8102: PPUSH
8103: CALL_OW 331
// PlaceSeeing ( 34 , 32 , 2 , - 6 ) ;
8107: LD_INT 34
8109: PPUSH
8110: LD_INT 32
8112: PPUSH
8113: LD_INT 2
8115: PPUSH
8116: LD_INT 6
8118: NEG
8119: PPUSH
8120: CALL_OW 330
// RemoveSeeing ( 34 , 32 , 2 ) ;
8124: LD_INT 34
8126: PPUSH
8127: LD_INT 32
8129: PPUSH
8130: LD_INT 2
8132: PPUSH
8133: CALL_OW 331
// Say ( Mike , DM-Prem-1 ) ;
8137: LD_EXP 25
8141: PPUSH
8142: LD_STRING DM-Prem-1
8144: PPUSH
8145: CALL_OW 88
// Say ( Heike , DH-Prem-2 ) ;
8149: LD_EXP 23
8153: PPUSH
8154: LD_STRING DH-Prem-2
8156: PPUSH
8157: CALL_OW 88
// Say ( Heike , DH-Prem-3 ) ;
8161: LD_EXP 23
8165: PPUSH
8166: LD_STRING DH-Prem-3
8168: PPUSH
8169: CALL_OW 88
// Say ( Mike , DM-Prem-4 ) ;
8173: LD_EXP 25
8177: PPUSH
8178: LD_STRING DM-Prem-4
8180: PPUSH
8181: CALL_OW 88
// Say ( Mike , DM-Prem-5 ) ;
8185: LD_EXP 25
8189: PPUSH
8190: LD_STRING DM-Prem-5
8192: PPUSH
8193: CALL_OW 88
// Say ( Givi , DG-Prem-6 ) ;
8197: LD_EXP 24
8201: PPUSH
8202: LD_STRING DG-Prem-6
8204: PPUSH
8205: CALL_OW 88
// DialogueOff ;
8209: CALL_OW 7
// end ;
8213: END
// every 0 0$1 trigger See ( 5 , Heike ) and GetDistUnits ( Heike , Aviradze ) < 6 and aviradzeQuestDone and not attackDeltaAllowed do var i ;
8214: LD_INT 5
8216: PPUSH
8217: LD_EXP 23
8221: PPUSH
8222: CALL_OW 292
8226: PUSH
8227: LD_EXP 23
8231: PPUSH
8232: LD_EXP 27
8236: PPUSH
8237: CALL_OW 296
8241: PUSH
8242: LD_INT 6
8244: LESS
8245: AND
8246: PUSH
8247: LD_EXP 8
8251: AND
8252: PUSH
8253: LD_EXP 14
8257: NOT
8258: AND
8259: IFFALSE 8397
8261: GO 8263
8263: DISABLE
8264: LD_INT 0
8266: PPUSH
// begin attackDeltaAllowed := true ;
8267: LD_ADDR_EXP 14
8271: PUSH
8272: LD_INT 1
8274: ST_TO_ADDR
// InGameOn ;
8275: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
8279: LD_EXP 23
8283: PPUSH
8284: CALL_OW 87
// wait ( 0 0$0.3 ) ;
8288: LD_INT 10
8290: PPUSH
8291: CALL_OW 67
// ComTurnUnit ( Aviradze , Heike ) ;
8295: LD_EXP 27
8299: PPUSH
8300: LD_EXP 23
8304: PPUSH
8305: CALL_OW 119
// ComTurnUnit ( Heike , Aviradze ) ;
8309: LD_EXP 23
8313: PPUSH
8314: LD_EXP 27
8318: PPUSH
8319: CALL_OW 119
// Say ( Heike , DH-1-return ) ;
8323: LD_EXP 23
8327: PPUSH
8328: LD_STRING DH-1-return
8330: PPUSH
8331: CALL_OW 88
// Say ( Aviradze , DA-1-return ) ;
8335: LD_EXP 27
8339: PPUSH
8340: LD_STRING DA-1-return
8342: PPUSH
8343: CALL_OW 88
// InGameOff ;
8347: CALL_OW 9
// ChangeMissionObjectives ( ODelta ) ;
8351: LD_STRING ODelta
8353: PPUSH
8354: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
8358: LD_ADDR_VAR 0 1
8362: PUSH
8363: LD_INT 22
8365: PUSH
8366: LD_INT 5
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: PPUSH
8373: CALL_OW 69
8377: PUSH
8378: FOR_IN
8379: IFFALSE 8395
// SetSide ( i , 2 ) ;
8381: LD_VAR 0 1
8385: PPUSH
8386: LD_INT 2
8388: PPUSH
8389: CALL_OW 235
8393: GO 8378
8395: POP
8396: POP
// end ;
8397: PPOPN 1
8399: END
// every 0 0$1 trigger usAlert and not attackDeltaAllowed do
8400: LD_EXP 10
8404: PUSH
8405: LD_EXP 14
8409: NOT
8410: AND
8411: IFFALSE 8424
8413: GO 8415
8415: DISABLE
// spottedBeforeRadio := true ;
8416: LD_ADDR_EXP 6
8420: PUSH
8421: LD_INT 1
8423: ST_TO_ADDR
8424: END
// every 0 0$1 trigger attackDeltaAllowed and IsOk ( Markov ) and GetSide ( Delta ) = 1 and IsOk ( Lynch ) and not usAlert do var i , k , tmp ;
8425: LD_EXP 14
8429: PUSH
8430: LD_EXP 30
8434: PPUSH
8435: CALL_OW 302
8439: AND
8440: PUSH
8441: LD_INT 1
8443: PPUSH
8444: CALL_OW 255
8448: PUSH
8449: LD_INT 1
8451: EQUAL
8452: AND
8453: PUSH
8454: LD_EXP 20
8458: PPUSH
8459: CALL_OW 302
8463: AND
8464: PUSH
8465: LD_EXP 10
8469: NOT
8470: AND
8471: IFFALSE 9699
8473: GO 8475
8475: DISABLE
8476: LD_INT 0
8478: PPUSH
8479: PPUSH
8480: PPUSH
// begin trap := 0 ;
8481: LD_ADDR_EXP 17
8485: PUSH
8486: LD_INT 0
8488: ST_TO_ADDR
// wait ( 0 0$12 ) ;
8489: LD_INT 420
8491: PPUSH
8492: CALL_OW 67
// DialogueOn ;
8496: CALL_OW 6
// Say ( Markov , DMar-1-radio ) ;
8500: LD_EXP 30
8504: PPUSH
8505: LD_STRING DMar-1-radio
8507: PPUSH
8508: CALL_OW 88
// Say ( Heike , DH-1-radio ) ;
8512: LD_EXP 23
8516: PPUSH
8517: LD_STRING DH-1-radio
8519: PPUSH
8520: CALL_OW 88
// Say ( Markov , DMar-2-radio ) ;
8524: LD_EXP 30
8528: PPUSH
8529: LD_STRING DMar-2-radio
8531: PPUSH
8532: CALL_OW 88
// Say ( Heike , DH-2-radio ) ;
8536: LD_EXP 23
8540: PPUSH
8541: LD_STRING DH-2-radio
8543: PPUSH
8544: CALL_OW 88
// if IsOk ( Kamil ) or IsOk ( Sophia ) then
8548: LD_EXP 26
8552: PPUSH
8553: CALL_OW 302
8557: PUSH
8558: LD_EXP 29
8562: PPUSH
8563: CALL_OW 302
8567: OR
8568: IFFALSE 9699
// begin case Query ( Q1Trap ) of 1 :
8570: LD_STRING Q1Trap
8572: PPUSH
8573: CALL_OW 97
8577: PUSH
8578: LD_INT 1
8580: DOUBLE
8581: EQUAL
8582: IFTRUE 8586
8584: GO 8792
8586: POP
// begin if IsOk ( Kamil ) then
8587: LD_EXP 26
8591: PPUSH
8592: CALL_OW 302
8596: IFFALSE 8675
// begin Say ( Kamil , DKam-2-radio ) ;
8598: LD_EXP 26
8602: PPUSH
8603: LD_STRING DKam-2-radio
8605: PPUSH
8606: CALL_OW 88
// Say ( Kamil , DKam-3-radio ) ;
8610: LD_EXP 26
8614: PPUSH
8615: LD_STRING DKam-3-radio
8617: PPUSH
8618: CALL_OW 88
// SayRadio ( Lynch , DDelta-3-radio ) ;
8622: LD_EXP 20
8626: PPUSH
8627: LD_STRING DDelta-3-radio
8629: PPUSH
8630: CALL_OW 94
// dwait ( 0 0$01 ) ;
8634: LD_INT 35
8636: PPUSH
8637: CALL_OW 68
// Say ( Heike , DH-3-radio ) ;
8641: LD_EXP 23
8645: PPUSH
8646: LD_STRING DH-3-radio
8648: PPUSH
8649: CALL_OW 88
// Say ( Kamil , DKam-4-radio ) ;
8653: LD_EXP 26
8657: PPUSH
8658: LD_STRING DKam-4-radio
8660: PPUSH
8661: CALL_OW 88
// trap := 1 ;
8665: LD_ADDR_EXP 17
8669: PUSH
8670: LD_INT 1
8672: ST_TO_ADDR
// end else
8673: GO 8786
// begin Say ( Sophia , DS-1-radio ) ;
8675: LD_EXP 29
8679: PPUSH
8680: LD_STRING DS-1-radio
8682: PPUSH
8683: CALL_OW 88
// Say ( Sophia , DS-2-radio ) ;
8687: LD_EXP 29
8691: PPUSH
8692: LD_STRING DS-2-radio
8694: PPUSH
8695: CALL_OW 88
// SayRadio ( Lynch , DDelta-2-radio-s ) ;
8699: LD_EXP 20
8703: PPUSH
8704: LD_STRING DDelta-2-radio-s
8706: PPUSH
8707: CALL_OW 94
// Say ( Sophia , DS-3-radio ) ;
8711: LD_EXP 29
8715: PPUSH
8716: LD_STRING DS-3-radio
8718: PPUSH
8719: CALL_OW 88
// SayRadio ( Lynch , DDelta-3-radio-s ) ;
8723: LD_EXP 20
8727: PPUSH
8728: LD_STRING DDelta-3-radio-s
8730: PPUSH
8731: CALL_OW 94
// Say ( Sophia , DS-4-radio-s ) ;
8735: LD_EXP 29
8739: PPUSH
8740: LD_STRING DS-4-radio-s
8742: PPUSH
8743: CALL_OW 88
// SayRadio ( Lynch , DDelta-4-radio-s ) ;
8747: LD_EXP 20
8751: PPUSH
8752: LD_STRING DDelta-4-radio-s
8754: PPUSH
8755: CALL_OW 94
// dwait ( 0 0$01 ) ;
8759: LD_INT 35
8761: PPUSH
8762: CALL_OW 68
// Say ( Heike , DH-1-trap ) ;
8766: LD_EXP 23
8770: PPUSH
8771: LD_STRING DH-1-trap
8773: PPUSH
8774: CALL_OW 88
// trap := 0 ;
8778: LD_ADDR_EXP 17
8782: PUSH
8783: LD_INT 0
8785: ST_TO_ADDR
// end ; DialogueOff ;
8786: CALL_OW 7
// end ; 2 :
8790: GO 8810
8792: LD_INT 2
8794: DOUBLE
8795: EQUAL
8796: IFTRUE 8800
8798: GO 8809
8800: POP
// begin DialogueOff ;
8801: CALL_OW 7
// exit ;
8805: GO 9699
// end ; end ;
8807: GO 8810
8809: POP
// if trap = 1 then
8810: LD_EXP 17
8814: PUSH
8815: LD_INT 1
8817: EQUAL
8818: IFFALSE 9270
// begin PlaceSeeing ( 64 , 32 , 2 , 8 ) ;
8820: LD_INT 64
8822: PPUSH
8823: LD_INT 32
8825: PPUSH
8826: LD_INT 2
8828: PPUSH
8829: LD_INT 8
8831: PPUSH
8832: CALL_OW 330
// CenterOnXY ( 64 , 32 ) ;
8836: LD_INT 64
8838: PPUSH
8839: LD_INT 32
8841: PPUSH
8842: CALL_OW 84
// tmp := [ ] ;
8846: LD_ADDR_VAR 0 3
8850: PUSH
8851: EMPTY
8852: ST_TO_ADDR
// k := 3 ;
8853: LD_ADDR_VAR 0 2
8857: PUSH
8858: LD_INT 3
8860: ST_TO_ADDR
// if usForces < 3 then
8861: LD_EXP 21
8865: PUSH
8866: LD_INT 3
8868: LESS
8869: IFFALSE 8881
// k := usForces ;
8871: LD_ADDR_VAR 0 2
8875: PUSH
8876: LD_EXP 21
8880: ST_TO_ADDR
// for i := 1 to k do
8881: LD_ADDR_VAR 0 1
8885: PUSH
8886: DOUBLE
8887: LD_INT 1
8889: DEC
8890: ST_TO_ADDR
8891: LD_VAR 0 2
8895: PUSH
8896: FOR_TO
8897: IFFALSE 8952
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
8899: LD_ADDR_VAR 0 3
8903: PUSH
8904: LD_VAR 0 3
8908: PPUSH
8909: LD_VAR 0 3
8913: PUSH
8914: LD_INT 1
8916: PLUS
8917: PPUSH
8918: LD_EXP 21
8922: PUSH
8923: LD_INT 1
8925: ARRAY
8926: PPUSH
8927: CALL_OW 1
8931: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
8932: LD_ADDR_EXP 21
8936: PUSH
8937: LD_EXP 21
8941: PPUSH
8942: LD_INT 1
8944: PPUSH
8945: CALL_OW 3
8949: ST_TO_ADDR
// end ;
8950: GO 8896
8952: POP
8953: POP
// usPatrol := tmp ;
8954: LD_ADDR_EXP 16
8958: PUSH
8959: LD_VAR 0 3
8963: ST_TO_ADDR
// for i in tmp do
8964: LD_ADDR_VAR 0 1
8968: PUSH
8969: LD_VAR 0 3
8973: PUSH
8974: FOR_IN
8975: IFFALSE 9105
// begin if IsInUnit ( i ) then
8977: LD_VAR 0 1
8981: PPUSH
8982: CALL_OW 310
8986: IFFALSE 8997
// ComExitBuilding ( i ) ;
8988: LD_VAR 0 1
8992: PPUSH
8993: CALL_OW 122
// AddComAgressiveMove ( i , 63 , 31 ) ;
8997: LD_VAR 0 1
9001: PPUSH
9002: LD_INT 63
9004: PPUSH
9005: LD_INT 31
9007: PPUSH
9008: CALL_OW 174
// AddComWait ( i , 0 0$2 ) ;
9012: LD_VAR 0 1
9016: PPUSH
9017: LD_INT 70
9019: PPUSH
9020: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 43 ) ;
9024: LD_VAR 0 1
9028: PPUSH
9029: LD_INT 103
9031: PPUSH
9032: LD_INT 43
9034: PPUSH
9035: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
9039: LD_VAR 0 1
9043: PPUSH
9044: LD_INT 105
9046: PPUSH
9047: CALL_OW 202
// if Difficulty > 1 then
9051: LD_OWVAR 67
9055: PUSH
9056: LD_INT 1
9058: GREATER
9059: IFFALSE 9076
// AddComAgressiveMove ( i , 114 , 69 ) ;
9061: LD_VAR 0 1
9065: PPUSH
9066: LD_INT 114
9068: PPUSH
9069: LD_INT 69
9071: PPUSH
9072: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
9076: LD_VAR 0 1
9080: PPUSH
9081: LD_INT 105
9083: PPUSH
9084: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9088: LD_VAR 0 1
9092: PPUSH
9093: LD_INT 42
9095: PPUSH
9096: LD_INT 20
9098: PPUSH
9099: CALL_OW 174
// end ;
9103: GO 8974
9105: POP
9106: POP
// wait ( 0 0$8 ) ;
9107: LD_INT 280
9109: PPUSH
9110: CALL_OW 67
// RemoveSeeing ( 64 , 32 , 2 ) ;
9114: LD_INT 64
9116: PPUSH
9117: LD_INT 32
9119: PPUSH
9120: LD_INT 2
9122: PPUSH
9123: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
9127: LD_INT 35
9129: PPUSH
9130: CALL_OW 67
// for i in tmp do
9134: LD_ADDR_VAR 0 1
9138: PUSH
9139: LD_VAR 0 3
9143: PUSH
9144: FOR_IN
9145: IFFALSE 9176
// if IsDead ( i ) then
9147: LD_VAR 0 1
9151: PPUSH
9152: CALL_OW 301
9156: IFFALSE 9174
// tmp := tmp diff i ;
9158: LD_ADDR_VAR 0 3
9162: PUSH
9163: LD_VAR 0 3
9167: PUSH
9168: LD_VAR 0 1
9172: DIFF
9173: ST_TO_ADDR
9174: GO 9144
9176: POP
9177: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9178: LD_VAR 0 3
9182: NOT
9183: PUSH
9184: LD_VAR 0 3
9188: PPUSH
9189: LD_INT 95
9191: PUSH
9192: LD_INT 7
9194: PUSH
9195: EMPTY
9196: LIST
9197: LIST
9198: PUSH
9199: LD_INT 3
9201: PUSH
9202: LD_INT 60
9204: PUSH
9205: EMPTY
9206: LIST
9207: PUSH
9208: EMPTY
9209: LIST
9210: LIST
9211: PUSH
9212: EMPTY
9213: LIST
9214: LIST
9215: PPUSH
9216: CALL_OW 72
9220: PUSH
9221: LD_VAR 0 3
9225: EQUAL
9226: OR
9227: IFFALSE 9127
// if tmp then
9229: LD_VAR 0 3
9233: IFFALSE 9260
// begin usPatrol := [ ] ;
9235: LD_ADDR_EXP 16
9239: PUSH
9240: EMPTY
9241: ST_TO_ADDR
// usForces := usForces union tmp ;
9242: LD_ADDR_EXP 21
9246: PUSH
9247: LD_EXP 21
9251: PUSH
9252: LD_VAR 0 3
9256: UNION
9257: ST_TO_ADDR
// end else
9258: GO 9268
// trickyMove := true ;
9260: LD_ADDR_EXP 15
9264: PUSH
9265: LD_INT 1
9267: ST_TO_ADDR
// end else
9268: GO 9699
// begin tmp := [ ] ;
9270: LD_ADDR_VAR 0 3
9274: PUSH
9275: EMPTY
9276: ST_TO_ADDR
// k := 4 ;
9277: LD_ADDR_VAR 0 2
9281: PUSH
9282: LD_INT 4
9284: ST_TO_ADDR
// if usForces < 4 then
9285: LD_EXP 21
9289: PUSH
9290: LD_INT 4
9292: LESS
9293: IFFALSE 9305
// k := usForces ;
9295: LD_ADDR_VAR 0 2
9299: PUSH
9300: LD_EXP 21
9304: ST_TO_ADDR
// for i := 1 to k do
9305: LD_ADDR_VAR 0 1
9309: PUSH
9310: DOUBLE
9311: LD_INT 1
9313: DEC
9314: ST_TO_ADDR
9315: LD_VAR 0 2
9319: PUSH
9320: FOR_TO
9321: IFFALSE 9376
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
9323: LD_ADDR_VAR 0 3
9327: PUSH
9328: LD_VAR 0 3
9332: PPUSH
9333: LD_VAR 0 3
9337: PUSH
9338: LD_INT 1
9340: PLUS
9341: PPUSH
9342: LD_EXP 21
9346: PUSH
9347: LD_INT 1
9349: ARRAY
9350: PPUSH
9351: CALL_OW 1
9355: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
9356: LD_ADDR_EXP 21
9360: PUSH
9361: LD_EXP 21
9365: PPUSH
9366: LD_INT 1
9368: PPUSH
9369: CALL_OW 3
9373: ST_TO_ADDR
// end ;
9374: GO 9320
9376: POP
9377: POP
// if Lynch then
9378: LD_EXP 20
9382: IFFALSE 9400
// tmp := tmp ^ Lynch ;
9384: LD_ADDR_VAR 0 3
9388: PUSH
9389: LD_VAR 0 3
9393: PUSH
9394: LD_EXP 20
9398: ADD
9399: ST_TO_ADDR
// usPatrol := tmp ;
9400: LD_ADDR_EXP 16
9404: PUSH
9405: LD_VAR 0 3
9409: ST_TO_ADDR
// for i in tmp do
9410: LD_ADDR_VAR 0 1
9414: PUSH
9415: LD_VAR 0 3
9419: PUSH
9420: FOR_IN
9421: IFFALSE 9514
// begin if IsInUnit ( i ) then
9423: LD_VAR 0 1
9427: PPUSH
9428: CALL_OW 310
9432: IFFALSE 9443
// ComExitBuilding ( i ) ;
9434: LD_VAR 0 1
9438: PPUSH
9439: CALL_OW 122
// AddComAgressiveMove ( i , 69 , 15 ) ;
9443: LD_VAR 0 1
9447: PPUSH
9448: LD_INT 69
9450: PPUSH
9451: LD_INT 15
9453: PPUSH
9454: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9458: LD_VAR 0 1
9462: PPUSH
9463: LD_INT 700
9465: PPUSH
9466: CALL_OW 202
// AddComAgressiveMove ( i , 55 , 43 ) ;
9470: LD_VAR 0 1
9474: PPUSH
9475: LD_INT 55
9477: PPUSH
9478: LD_INT 43
9480: PPUSH
9481: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9485: LD_VAR 0 1
9489: PPUSH
9490: LD_INT 700
9492: PPUSH
9493: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9497: LD_VAR 0 1
9501: PPUSH
9502: LD_INT 42
9504: PPUSH
9505: LD_INT 20
9507: PPUSH
9508: CALL_OW 174
// end ;
9512: GO 9420
9514: POP
9515: POP
// repeat wait ( 0 0$1 ) ;
9516: LD_INT 35
9518: PPUSH
9519: CALL_OW 67
// for i in tmp do
9523: LD_ADDR_VAR 0 1
9527: PUSH
9528: LD_VAR 0 3
9532: PUSH
9533: FOR_IN
9534: IFFALSE 9565
// if IsDead ( i ) then
9536: LD_VAR 0 1
9540: PPUSH
9541: CALL_OW 301
9545: IFFALSE 9563
// tmp := tmp diff i ;
9547: LD_ADDR_VAR 0 3
9551: PUSH
9552: LD_VAR 0 3
9556: PUSH
9557: LD_VAR 0 1
9561: DIFF
9562: ST_TO_ADDR
9563: GO 9533
9565: POP
9566: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9567: LD_VAR 0 3
9571: NOT
9572: PUSH
9573: LD_VAR 0 3
9577: PPUSH
9578: LD_INT 95
9580: PUSH
9581: LD_INT 7
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: PUSH
9588: LD_INT 3
9590: PUSH
9591: LD_INT 60
9593: PUSH
9594: EMPTY
9595: LIST
9596: PUSH
9597: EMPTY
9598: LIST
9599: LIST
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: PPUSH
9605: CALL_OW 72
9609: PUSH
9610: LD_VAR 0 3
9614: EQUAL
9615: OR
9616: IFFALSE 9516
// if not tmp then
9618: LD_VAR 0 3
9622: NOT
9623: IFFALSE 9635
// trickyMove := true else
9625: LD_ADDR_EXP 15
9629: PUSH
9630: LD_INT 1
9632: ST_TO_ADDR
9633: GO 9642
// usPatrol := [ ] ;
9635: LD_ADDR_EXP 16
9639: PUSH
9640: EMPTY
9641: ST_TO_ADDR
// if tmp diff Lynch then
9642: LD_VAR 0 3
9646: PUSH
9647: LD_EXP 20
9651: DIFF
9652: IFFALSE 9676
// usForces := usForces union ( tmp diff Lynch ) ;
9654: LD_ADDR_EXP 21
9658: PUSH
9659: LD_EXP 21
9663: PUSH
9664: LD_VAR 0 3
9668: PUSH
9669: LD_EXP 20
9673: DIFF
9674: UNION
9675: ST_TO_ADDR
// if IsOk ( Lynch ) then
9676: LD_EXP 20
9680: PPUSH
9681: CALL_OW 302
9685: IFFALSE 9699
// ComEnterUnit ( Lynch , Delta ) ;
9687: LD_EXP 20
9691: PPUSH
9692: LD_INT 1
9694: PPUSH
9695: CALL_OW 120
// end ; end ; end ;
9699: PPOPN 3
9701: END
// every 0 0$1 trigger trickyMove do
9702: LD_EXP 15
9706: IFFALSE 9718
9708: GO 9710
9710: DISABLE
// SetAchievement ( ACH_TRAP ) ;
9711: LD_STRING ACH_TRAP
9713: PPUSH
9714: CALL_OW 543
9718: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ) do
9719: LD_INT 22
9721: PUSH
9722: LD_INT 2
9724: PUSH
9725: EMPTY
9726: LIST
9727: LIST
9728: PUSH
9729: LD_INT 23
9731: PUSH
9732: LD_INT 1
9734: PUSH
9735: EMPTY
9736: LIST
9737: LIST
9738: PUSH
9739: LD_INT 21
9741: PUSH
9742: LD_INT 2
9744: PUSH
9745: EMPTY
9746: LIST
9747: LIST
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: LIST
9753: PPUSH
9754: CALL_OW 69
9758: IFFALSE 9770
9760: GO 9762
9762: DISABLE
// SetAchievement ( ACH_SCRAP ) ;
9763: LD_STRING ACH_SCRAP
9765: PPUSH
9766: CALL_OW 543
9770: END
// every 0 0$1 trigger UnitFilter ( usPatrol , [ f_see , 2 ] ) and See ( 1 , Heike ) do
9771: LD_EXP 16
9775: PPUSH
9776: LD_INT 101
9778: PUSH
9779: LD_INT 2
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: PPUSH
9786: CALL_OW 72
9790: PUSH
9791: LD_INT 1
9793: PPUSH
9794: LD_EXP 23
9798: PPUSH
9799: CALL_OW 292
9803: AND
9804: IFFALSE 9937
9806: GO 9808
9808: DISABLE
// begin if not trap then
9809: LD_EXP 17
9813: NOT
9814: IFFALSE 9842
// begin Say ( Heike , DH-2-trap ) ;
9816: LD_EXP 23
9820: PPUSH
9821: LD_STRING DH-2-trap
9823: PPUSH
9824: CALL_OW 88
// Say ( Mike , DM-2-trap ) ;
9828: LD_EXP 25
9832: PPUSH
9833: LD_STRING DM-2-trap
9835: PPUSH
9836: CALL_OW 88
// end else
9840: GO 9854
// begin Say ( Heike , DH-1-trap-a ) ;
9842: LD_EXP 23
9846: PPUSH
9847: LD_STRING DH-1-trap-a
9849: PPUSH
9850: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
9854: LD_INT 35
9856: PPUSH
9857: CALL_OW 67
// until trickyMove ;
9861: LD_EXP 15
9865: IFFALSE 9854
// Say ( Heike , DH-3-trap ) ;
9867: LD_EXP 23
9871: PPUSH
9872: LD_STRING DH-3-trap
9874: PPUSH
9875: CALL_OW 88
// if IsOk ( Givi ) and IsOk ( Kaia ) then
9879: LD_EXP 24
9883: PPUSH
9884: CALL_OW 302
9888: PUSH
9889: LD_EXP 28
9893: PPUSH
9894: CALL_OW 302
9898: AND
9899: IFFALSE 9937
// begin Say ( Givi , DG-3-trap ) ;
9901: LD_EXP 24
9905: PPUSH
9906: LD_STRING DG-3-trap
9908: PPUSH
9909: CALL_OW 88
// Say ( Kaia , DK-3-trap ) ;
9913: LD_EXP 28
9917: PPUSH
9918: LD_STRING DK-3-trap
9920: PPUSH
9921: CALL_OW 88
// Say ( Givi , DG-4-trap ) ;
9925: LD_EXP 24
9929: PPUSH
9930: LD_STRING DG-4-trap
9932: PPUSH
9933: CALL_OW 88
// end ; end ;
9937: END
// every 0 0$1 trigger GetSide ( Delta ) = 2 and attackDeltaAllowed do var i , tmp ;
9938: LD_INT 1
9940: PPUSH
9941: CALL_OW 255
9945: PUSH
9946: LD_INT 2
9948: EQUAL
9949: PUSH
9950: LD_EXP 14
9954: AND
9955: IFFALSE 10114
9957: GO 9959
9959: DISABLE
9960: LD_INT 0
9962: PPUSH
9963: PPUSH
// begin if not IsOk ( Kaia ) then
9964: LD_EXP 28
9968: PPUSH
9969: CALL_OW 302
9973: NOT
9974: IFFALSE 9978
// exit ;
9976: GO 10114
// if tick < 5 5$00 then
9978: LD_OWVAR 1
9982: PUSH
9983: LD_INT 10500
9985: LESS
9986: IFFALSE 9995
// SetAchievement ( ACH_DELTA ) ;
9988: LD_STRING ACH_DELTA
9990: PPUSH
9991: CALL_OW 543
// Say ( Kaia , DK-1-capture ) ;
9995: LD_EXP 28
9999: PPUSH
10000: LD_STRING DK-1-capture
10002: PPUSH
10003: CALL_OW 88
// Say ( Heike , DH-1-capture ) ;
10007: LD_EXP 23
10011: PPUSH
10012: LD_STRING DH-1-capture
10014: PPUSH
10015: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
10019: LD_ADDR_VAR 0 2
10023: PUSH
10024: LD_INT 22
10026: PUSH
10027: LD_INT 1
10029: PUSH
10030: EMPTY
10031: LIST
10032: LIST
10033: PUSH
10034: LD_INT 25
10036: PUSH
10037: LD_INT 1
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PPUSH
10048: CALL_OW 69
10052: ST_TO_ADDR
// if not tmp then
10053: LD_VAR 0 2
10057: NOT
10058: IFFALSE 10062
// exit ;
10060: GO 10114
// for i in tmp do
10062: LD_ADDR_VAR 0 1
10066: PUSH
10067: LD_VAR 0 2
10071: PUSH
10072: FOR_IN
10073: IFFALSE 10112
// begin if IsInUnit ( i ) then
10075: LD_VAR 0 1
10079: PPUSH
10080: CALL_OW 310
10084: IFFALSE 10095
// ComExitBuilding ( i ) ;
10086: LD_VAR 0 1
10090: PPUSH
10091: CALL_OW 122
// AddComAgressiveMove ( i , 38 , 23 ) ;
10095: LD_VAR 0 1
10099: PPUSH
10100: LD_INT 38
10102: PPUSH
10103: LD_INT 23
10105: PPUSH
10106: CALL_OW 174
// end ;
10110: GO 10072
10112: POP
10113: POP
// end ;
10114: PPOPN 2
10116: END
// every 0 0$1 trigger GetSide ( usLab ) = 2 and attackDeltaAllowed do
10117: LD_INT 3
10119: PPUSH
10120: CALL_OW 255
10124: PUSH
10125: LD_INT 2
10127: EQUAL
10128: PUSH
10129: LD_EXP 14
10133: AND
10134: IFFALSE 10166
10136: GO 10138
10138: DISABLE
// begin DialogueOn ;
10139: CALL_OW 6
// Say ( Aviradze , DA-1-capture ) ;
10143: LD_EXP 27
10147: PPUSH
10148: LD_STRING DA-1-capture
10150: PPUSH
10151: CALL_OW 88
// DialogueOff ;
10155: CALL_OW 7
// ChangeMissionObjectives ( OTame ) ;
10159: LD_STRING OTame
10161: PPUSH
10162: CALL_OW 337
// end ;
10166: END
// every 0 0$1 trigger GetTech ( tech_ApeLang , 2 ) = state_researched and attackDeltaAllowed do
10167: LD_INT 1
10169: PPUSH
10170: LD_INT 2
10172: PPUSH
10173: CALL_OW 321
10177: PUSH
10178: LD_INT 2
10180: EQUAL
10181: PUSH
10182: LD_EXP 14
10186: AND
10187: IFFALSE 10338
10189: GO 10191
10191: DISABLE
// begin DialogueOn ;
10192: CALL_OW 6
// Say ( Aviradze , DA-1-ape ) ;
10196: LD_EXP 27
10200: PPUSH
10201: LD_STRING DA-1-ape
10203: PPUSH
10204: CALL_OW 88
// Say ( Heike , DH-1-ape ) ;
10208: LD_EXP 23
10212: PPUSH
10213: LD_STRING DH-1-ape
10215: PPUSH
10216: CALL_OW 88
// Say ( Aviradze , DA-2-ape ) ;
10220: LD_EXP 27
10224: PPUSH
10225: LD_STRING DA-2-ape
10227: PPUSH
10228: CALL_OW 88
// Say ( Aviradze , DA-3-ape ) ;
10232: LD_EXP 27
10236: PPUSH
10237: LD_STRING DA-3-ape
10239: PPUSH
10240: CALL_OW 88
// Say ( Heike , DH-3-ape ) ;
10244: LD_EXP 23
10248: PPUSH
10249: LD_STRING DH-3-ape
10251: PPUSH
10252: CALL_OW 88
// DialogueOff ;
10256: CALL_OW 7
// if FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 then
10260: LD_INT 22
10262: PUSH
10263: LD_INT 0
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PUSH
10270: LD_INT 25
10272: PUSH
10273: LD_INT 12
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: PPUSH
10284: CALL_OW 69
10288: PUSH
10289: LD_INT 0
10291: EQUAL
10292: IFFALSE 10304
// SpawnApeman ( forest , 2 ) ;
10294: LD_INT 1
10296: PPUSH
10297: LD_INT 2
10299: PPUSH
10300: CALL 409 0 2
// repeat wait ( 0 0$1 ) ;
10304: LD_INT 35
10306: PPUSH
10307: CALL_OW 67
// until FilterAllUnits ( [ f_class , class_apeman ] ) = 0 ;
10311: LD_INT 25
10313: PUSH
10314: LD_INT 12
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: PPUSH
10321: CALL_OW 69
10325: PUSH
10326: LD_INT 0
10328: EQUAL
10329: IFFALSE 10304
// YouLost ( Ape ) ;
10331: LD_STRING Ape
10333: PPUSH
10334: CALL_OW 104
// end ;
10338: END
// every 0 0$5 trigger lostCounter >= [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
10339: LD_EXP 18
10343: PUSH
10344: LD_INT 3
10346: PUSH
10347: LD_INT 2
10349: PUSH
10350: LD_INT 2
10352: PUSH
10353: LD_INT 2
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: PUSH
10362: LD_OWVAR 67
10366: ARRAY
10367: GREATEREQUAL
10368: IFFALSE 10412
10370: GO 10372
10372: DISABLE
// begin DialogueOn ;
10373: CALL_OW 6
// Say ( Aviradze , DA-1-failure ) ;
10377: LD_EXP 27
10381: PPUSH
10382: LD_STRING DA-1-failure
10384: PPUSH
10385: CALL_OW 88
// Say ( Aviradze , DA-2-failure ) ;
10389: LD_EXP 27
10393: PPUSH
10394: LD_STRING DA-2-failure
10396: PPUSH
10397: CALL_OW 88
// YouLost ( Failure ) ;
10401: LD_STRING Failure
10403: PPUSH
10404: CALL_OW 104
// DialogueOff ;
10408: CALL_OW 7
// end ;
10412: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
10413: LD_EXP 28
10417: PPUSH
10418: CALL_OW 256
10422: PUSH
10423: LD_INT 3
10425: LESS
10426: IFFALSE 10559
10428: GO 10430
10430: DISABLE
// begin DialogueOn ;
10431: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
10435: LD_EXP 28
10439: PPUSH
10440: CALL_OW 87
// ForceSay ( Kaia , DK-Kaiaout-1 ) ;
10444: LD_EXP 28
10448: PPUSH
10449: LD_STRING DK-Kaiaout-1
10451: PPUSH
10452: CALL_OW 91
// Say ( Heike , DH-Kaiaout-2 ) ;
10456: LD_EXP 23
10460: PPUSH
10461: LD_STRING DH-Kaiaout-2
10463: PPUSH
10464: CALL_OW 88
// Say ( Givi , DG-Kaiaout-3 ) ;
10468: LD_EXP 24
10472: PPUSH
10473: LD_STRING DG-Kaiaout-3
10475: PPUSH
10476: CALL_OW 88
// Say ( Heike , DH-Kaiaout-4 ) ;
10480: LD_EXP 23
10484: PPUSH
10485: LD_STRING DH-Kaiaout-4
10487: PPUSH
10488: CALL_OW 88
// if Givi then
10492: LD_EXP 24
10496: IFFALSE 10546
// begin Say ( Givi , DG-Kaiaout-5 ) ;
10498: LD_EXP 24
10502: PPUSH
10503: LD_STRING DG-Kaiaout-5
10505: PPUSH
10506: CALL_OW 88
// Say ( Heike , DH-Kaiaout-6 ) ;
10510: LD_EXP 23
10514: PPUSH
10515: LD_STRING DH-Kaiaout-6
10517: PPUSH
10518: CALL_OW 88
// Say ( Givi , DG-Kaiaout-7 ) ;
10522: LD_EXP 24
10526: PPUSH
10527: LD_STRING DG-Kaiaout-7
10529: PPUSH
10530: CALL_OW 88
// Say ( Heike , DH-Kaiaout-8 ) ;
10534: LD_EXP 23
10538: PPUSH
10539: LD_STRING DH-Kaiaout-8
10541: PPUSH
10542: CALL_OW 88
// end ; DialogueOff ;
10546: CALL_OW 7
// KillUnit ( Kaia ) ;
10550: LD_EXP 28
10554: PPUSH
10555: CALL_OW 66
// end ;
10559: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) and IsOk ( Aviradze ) and GetSide ( Aviradze ) = 2 do var tmp ;
10560: LD_INT 22
10562: PUSH
10563: LD_INT 2
10565: PUSH
10566: EMPTY
10567: LIST
10568: LIST
10569: PUSH
10570: LD_INT 23
10572: PUSH
10573: LD_INT 0
10575: PUSH
10576: EMPTY
10577: LIST
10578: LIST
10579: PUSH
10580: EMPTY
10581: LIST
10582: LIST
10583: PPUSH
10584: CALL_OW 69
10588: PUSH
10589: LD_EXP 27
10593: PPUSH
10594: CALL_OW 302
10598: AND
10599: PUSH
10600: LD_EXP 27
10604: PPUSH
10605: CALL_OW 255
10609: PUSH
10610: LD_INT 2
10612: EQUAL
10613: AND
10614: IFFALSE 11559
10616: GO 10618
10618: DISABLE
10619: LD_INT 0
10621: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) then
10622: LD_INT 22
10624: PUSH
10625: LD_INT 1
10627: PUSH
10628: EMPTY
10629: LIST
10630: LIST
10631: PUSH
10632: LD_INT 2
10634: PUSH
10635: LD_INT 25
10637: PUSH
10638: LD_INT 1
10640: PUSH
10641: EMPTY
10642: LIST
10643: LIST
10644: PUSH
10645: LD_INT 34
10647: PUSH
10648: LD_INT 4
10650: PUSH
10651: EMPTY
10652: LIST
10653: LIST
10654: PUSH
10655: EMPTY
10656: LIST
10657: LIST
10658: LIST
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: PPUSH
10664: CALL_OW 69
10668: IFFALSE 10763
// begin Query ( QEnemyInSight ) ;
10670: LD_STRING QEnemyInSight
10672: PPUSH
10673: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
10677: LD_INT 35
10679: PPUSH
10680: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10684: LD_INT 22
10686: PUSH
10687: LD_INT 1
10689: PUSH
10690: EMPTY
10691: LIST
10692: LIST
10693: PUSH
10694: LD_INT 2
10696: PUSH
10697: LD_INT 25
10699: PUSH
10700: LD_INT 1
10702: PUSH
10703: EMPTY
10704: LIST
10705: LIST
10706: PUSH
10707: LD_INT 34
10709: PUSH
10710: LD_INT 4
10712: PUSH
10713: EMPTY
10714: LIST
10715: LIST
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: LIST
10721: PUSH
10722: EMPTY
10723: LIST
10724: LIST
10725: PPUSH
10726: CALL_OW 69
10730: NOT
10731: PUSH
10732: LD_INT 22
10734: PUSH
10735: LD_INT 2
10737: PUSH
10738: EMPTY
10739: LIST
10740: LIST
10741: PUSH
10742: LD_INT 23
10744: PUSH
10745: LD_INT 0
10747: PUSH
10748: EMPTY
10749: LIST
10750: LIST
10751: PUSH
10752: EMPTY
10753: LIST
10754: LIST
10755: PPUSH
10756: CALL_OW 69
10760: AND
10761: IFFALSE 10677
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10763: LD_ADDR_VAR 0 1
10767: PUSH
10768: LD_INT 22
10770: PUSH
10771: LD_INT 2
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: PUSH
10778: LD_INT 23
10780: PUSH
10781: LD_INT 0
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: PUSH
10788: EMPTY
10789: LIST
10790: LIST
10791: PPUSH
10792: CALL_OW 69
10796: ST_TO_ADDR
// InGameOn ;
10797: CALL_OW 8
// CenterNowOnUnits ( tmp ) ;
10801: LD_VAR 0 1
10805: PPUSH
10806: CALL_OW 87
// ComMoveUnit ( tmp , Aviradze ) ;
10810: LD_VAR 0 1
10814: PPUSH
10815: LD_EXP 27
10819: PPUSH
10820: CALL_OW 112
// ComTurnUnit ( Aviradze , tmp ) ;
10824: LD_EXP 27
10828: PPUSH
10829: LD_VAR 0 1
10833: PPUSH
10834: CALL_OW 119
// wait ( 0 0$1 ) ;
10838: LD_INT 35
10840: PPUSH
10841: CALL_OW 67
// Say ( Aviradze , DA-1-tame-a ) ;
10845: LD_EXP 27
10849: PPUSH
10850: LD_STRING DA-1-tame-a
10852: PPUSH
10853: CALL_OW 88
// if IsOk ( Mike ) then
10857: LD_EXP 25
10861: PPUSH
10862: CALL_OW 302
10866: IFFALSE 10904
// begin Say ( Mike , DM-1-tame-a ) ;
10868: LD_EXP 25
10872: PPUSH
10873: LD_STRING DM-1-tame-a
10875: PPUSH
10876: CALL_OW 88
// Say ( Sophia , DS-1-tame-a ) ;
10880: LD_EXP 29
10884: PPUSH
10885: LD_STRING DS-1-tame-a
10887: PPUSH
10888: CALL_OW 88
// Say ( Mike , DM-2-tame-a ) ;
10892: LD_EXP 25
10896: PPUSH
10897: LD_STRING DM-2-tame-a
10899: PPUSH
10900: CALL_OW 88
// end ; wait ( 0 0$3 ) ;
10904: LD_INT 105
10906: PPUSH
10907: CALL_OW 67
// PrepareFarmer ;
10911: CALL 12238 0 0
// CenterOnUnits ( Farmer ) ;
10915: LD_EXP 31
10919: PPUSH
10920: CALL_OW 85
// ComMoveXY ( Farmer , 105 , 59 ) ;
10924: LD_EXP 31
10928: PPUSH
10929: LD_INT 105
10931: PPUSH
10932: LD_INT 59
10934: PPUSH
10935: CALL_OW 111
// AddComHold ( Farmer ) ;
10939: LD_EXP 31
10943: PPUSH
10944: CALL_OW 200
// SayRadio ( Farmer , DF-1-end ) ;
10948: LD_EXP 31
10952: PPUSH
10953: LD_STRING DF-1-end
10955: PPUSH
10956: CALL_OW 94
// Say ( Aviradze , DA-1-end ) ;
10960: LD_EXP 27
10964: PPUSH
10965: LD_STRING DA-1-end
10967: PPUSH
10968: CALL_OW 88
// SayRadio ( Farmer , DF-2-end ) ;
10972: LD_EXP 31
10976: PPUSH
10977: LD_STRING DF-2-end
10979: PPUSH
10980: CALL_OW 94
// Say ( Aviradze , DA-2-end ) ;
10984: LD_EXP 27
10988: PPUSH
10989: LD_STRING DA-2-end
10991: PPUSH
10992: CALL_OW 88
// SayRadio ( Farmer , DF-3-end ) ;
10996: LD_EXP 31
11000: PPUSH
11001: LD_STRING DF-3-end
11003: PPUSH
11004: CALL_OW 94
// Say ( Heike , DH-3-end ) ;
11008: LD_EXP 23
11012: PPUSH
11013: LD_STRING DH-3-end
11015: PPUSH
11016: CALL_OW 88
// SayRadio ( Farmer , DF-4-end ) ;
11020: LD_EXP 31
11024: PPUSH
11025: LD_STRING DF-4-end
11027: PPUSH
11028: CALL_OW 94
// if tick <= [ 25 25$00 , 22 22$30 , 20 20$00 , 15 15$00 ] [ Difficulty ] then
11032: LD_OWVAR 1
11036: PUSH
11037: LD_INT 52500
11039: PUSH
11040: LD_INT 47250
11042: PUSH
11043: LD_INT 42000
11045: PUSH
11046: LD_INT 31500
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: PUSH
11055: LD_OWVAR 67
11059: ARRAY
11060: LESSEQUAL
11061: IFFALSE 11075
// AddMedal ( med1 , 1 ) else
11063: LD_STRING med1
11065: PPUSH
11066: LD_INT 1
11068: PPUSH
11069: CALL_OW 101
11073: GO 11086
// AddMedal ( med1 , - 1 ) ;
11075: LD_STRING med1
11077: PPUSH
11078: LD_INT 1
11080: NEG
11081: PPUSH
11082: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) = 0 and not gladstoneEscaped then
11086: LD_INT 22
11088: PUSH
11089: LD_INT 1
11091: PUSH
11092: EMPTY
11093: LIST
11094: LIST
11095: PUSH
11096: LD_INT 25
11098: PUSH
11099: LD_INT 4
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: PUSH
11106: EMPTY
11107: LIST
11108: LIST
11109: PPUSH
11110: CALL_OW 69
11114: PUSH
11115: LD_INT 0
11117: EQUAL
11118: PUSH
11119: LD_EXP 12
11123: NOT
11124: AND
11125: IFFALSE 11139
// AddMedal ( med2 , 1 ) else
11127: LD_STRING med2
11129: PPUSH
11130: LD_INT 1
11132: PPUSH
11133: CALL_OW 101
11137: GO 11150
// AddMedal ( med2 , - 1 ) ;
11139: LD_STRING med2
11141: PPUSH
11142: LD_INT 1
11144: NEG
11145: PPUSH
11146: CALL_OW 101
// if trickyMove then
11150: LD_EXP 15
11154: IFFALSE 11168
// AddMedal ( med3 , 1 ) else
11156: LD_STRING med3
11158: PPUSH
11159: LD_INT 1
11161: PPUSH
11162: CALL_OW 101
11166: GO 11198
// if spottedBeforeRadio then
11168: LD_EXP 6
11172: IFFALSE 11187
// AddMedal ( med3 , - 2 ) else
11174: LD_STRING med3
11176: PPUSH
11177: LD_INT 2
11179: NEG
11180: PPUSH
11181: CALL_OW 101
11185: GO 11198
// AddMedal ( med3 , - 1 ) ;
11187: LD_STRING med3
11189: PPUSH
11190: LD_INT 1
11192: NEG
11193: PPUSH
11194: CALL_OW 101
// GiveMedals ( MAIN ) ;
11198: LD_STRING MAIN
11200: PPUSH
11201: CALL_OW 102
// SaveCharacters ( tmp , 02_ape ) ;
11205: LD_VAR 0 1
11209: PPUSH
11210: LD_STRING 02_ape
11212: PPUSH
11213: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
11217: LD_ADDR_VAR 0 1
11221: PUSH
11222: LD_INT 22
11224: PUSH
11225: LD_INT 2
11227: PUSH
11228: EMPTY
11229: LIST
11230: LIST
11231: PUSH
11232: LD_INT 23
11234: PUSH
11235: LD_INT 2
11237: PUSH
11238: EMPTY
11239: LIST
11240: LIST
11241: PUSH
11242: LD_INT 21
11244: PUSH
11245: LD_INT 1
11247: PUSH
11248: EMPTY
11249: LIST
11250: LIST
11251: PUSH
11252: EMPTY
11253: LIST
11254: LIST
11255: LIST
11256: PPUSH
11257: CALL_OW 69
11261: ST_TO_ADDR
// RewardPeople ( tmp ) ;
11262: LD_VAR 0 1
11266: PPUSH
11267: CALL_OW 43
// SaveCharacters ( Heike , 02_Heike ) ;
11271: LD_EXP 23
11275: PPUSH
11276: LD_STRING 02_Heike
11278: PPUSH
11279: CALL_OW 38
// SaveCharacters ( Aviradze , 02_Aviradze ) ;
11283: LD_EXP 27
11287: PPUSH
11288: LD_STRING 02_Aviradze
11290: PPUSH
11291: CALL_OW 38
// if Givi then
11295: LD_EXP 24
11299: IFFALSE 11313
// SaveCharacters ( Givi , 02_Givi ) ;
11301: LD_EXP 24
11305: PPUSH
11306: LD_STRING 02_Givi
11308: PPUSH
11309: CALL_OW 38
// if Mike then
11313: LD_EXP 25
11317: IFFALSE 11331
// SaveCharacters ( Mike , 02_Mike ) ;
11319: LD_EXP 25
11323: PPUSH
11324: LD_STRING 02_Mike
11326: PPUSH
11327: CALL_OW 38
// if Kamil then
11331: LD_EXP 26
11335: IFFALSE 11349
// SaveCharacters ( Kamil , 02_Kamil ) ;
11337: LD_EXP 26
11341: PPUSH
11342: LD_STRING 02_Kamil
11344: PPUSH
11345: CALL_OW 38
// if Kaia then
11349: LD_EXP 28
11353: IFFALSE 11367
// SaveCharacters ( Kaia , 02_Kaia ) ;
11355: LD_EXP 28
11359: PPUSH
11360: LD_STRING 02_Kaia
11362: PPUSH
11363: CALL_OW 38
// if Sophia then
11367: LD_EXP 29
11371: IFFALSE 11385
// SaveCharacters ( Sophia , 02_Sophia ) ;
11373: LD_EXP 29
11377: PPUSH
11378: LD_STRING 02_Sophia
11380: PPUSH
11381: CALL_OW 38
// if Markov then
11385: LD_EXP 30
11389: IFFALSE 11403
// SaveCharacters ( Markov , 02_Markov ) ;
11391: LD_EXP 30
11395: PPUSH
11396: LD_STRING 02_Markov
11398: PPUSH
11399: CALL_OW 38
// if tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] then
11403: LD_VAR 0 1
11407: PUSH
11408: LD_EXP 23
11412: PUSH
11413: LD_EXP 27
11417: PUSH
11418: LD_EXP 24
11422: PUSH
11423: LD_EXP 25
11427: PUSH
11428: LD_EXP 26
11432: PUSH
11433: LD_EXP 29
11437: PUSH
11438: LD_EXP 28
11442: PUSH
11443: LD_EXP 30
11447: PUSH
11448: EMPTY
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: DIFF
11458: IFFALSE 11523
// SaveCharacters ( tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] , 02_others ) ;
11460: LD_VAR 0 1
11464: PUSH
11465: LD_EXP 23
11469: PUSH
11470: LD_EXP 27
11474: PUSH
11475: LD_EXP 24
11479: PUSH
11480: LD_EXP 25
11484: PUSH
11485: LD_EXP 26
11489: PUSH
11490: LD_EXP 29
11494: PUSH
11495: LD_EXP 28
11499: PUSH
11500: LD_EXP 30
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: DIFF
11515: PPUSH
11516: LD_STRING 02_others
11518: PPUSH
11519: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_KRAY) ) ;
11523: LD_STRING enableBioCharacter(BIO_KRAY)
11525: PPUSH
11526: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_AVIR) ) ;
11530: LD_STRING enableBioCharacter(BIO_AVIR)
11532: PPUSH
11533: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_SOPH) ) ;
11537: LD_STRING enableBioCharacter(BIO_SOPH)
11539: PPUSH
11540: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_KAMI) ) ;
11544: LD_STRING enableBioCharacter(BIO_KAMI)
11546: PPUSH
11547: CALL_OW 559
// YouWin ;
11551: CALL_OW 103
// InGameOff ;
11555: CALL_OW 9
// end ;
11559: PPOPN 1
11561: END
// every 0 0$1 trigger tick > timeUntilFarmer and aviradzeSpotted do
11562: LD_OWVAR 1
11566: PUSH
11567: LD_EXP 13
11571: GREATER
11572: PUSH
11573: LD_EXP 4
11577: AND
11578: IFFALSE 11618
11580: GO 11582
11582: DISABLE
// begin InGameOn ;
11583: CALL_OW 8
// PrepareFarmer ;
11587: CALL 12238 0 0
// CenterNowOnUnits ( Farmer ) ;
11591: LD_EXP 31
11595: PPUSH
11596: CALL_OW 87
// wait ( 0 0$2 ) ;
11600: LD_INT 70
11602: PPUSH
11603: CALL_OW 67
// YouLost ( Farmer ) ;
11607: LD_STRING Farmer
11609: PPUSH
11610: CALL_OW 104
// InGameOff ;
11614: CALL_OW 9
// end ; end_of_file
11618: END
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer ; export function PrepareArabian ; var un , veh ; begin
11619: LD_INT 0
11621: PPUSH
11622: PPUSH
11623: PPUSH
// uc_side := 2 ;
11624: LD_ADDR_OWVAR 20
11628: PUSH
11629: LD_INT 2
11631: ST_TO_ADDR
// uc_nation := 2 ;
11632: LD_ADDR_OWVAR 21
11636: PUSH
11637: LD_INT 2
11639: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
11640: LD_ADDR_EXP 23
11644: PUSH
11645: LD_STRING Heike
11647: PPUSH
11648: LD_EXP 1
11652: NOT
11653: PPUSH
11654: LD_EXP 2
11658: PPUSH
11659: CALL 31832 0 3
11663: ST_TO_ADDR
// PlaceUnitXY ( Heike , 83 , 72 , false ) ;
11664: LD_EXP 23
11668: PPUSH
11669: LD_INT 83
11671: PPUSH
11672: LD_INT 72
11674: PPUSH
11675: LD_INT 0
11677: PPUSH
11678: CALL_OW 48
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
11682: LD_ADDR_EXP 24
11686: PUSH
11687: LD_STRING Givi
11689: PPUSH
11690: LD_EXP 1
11694: NOT
11695: PPUSH
11696: LD_EXP 2
11700: PPUSH
11701: CALL 31832 0 3
11705: ST_TO_ADDR
// if Givi then
11706: LD_EXP 24
11710: IFFALSE 11730
// PlaceUnitXY ( Givi , 87 , 76 , false ) ;
11712: LD_EXP 24
11716: PPUSH
11717: LD_INT 87
11719: PPUSH
11720: LD_INT 76
11722: PPUSH
11723: LD_INT 0
11725: PPUSH
11726: CALL_OW 48
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
11730: LD_ADDR_EXP 25
11734: PUSH
11735: LD_STRING Mike
11737: PPUSH
11738: LD_EXP 1
11742: NOT
11743: PPUSH
11744: LD_EXP 2
11748: PPUSH
11749: CALL 31832 0 3
11753: ST_TO_ADDR
// if Mike then
11754: LD_EXP 25
11758: IFFALSE 11778
// PlaceUnitXY ( Mike , 84 , 76 , false ) ;
11760: LD_EXP 25
11764: PPUSH
11765: LD_INT 84
11767: PPUSH
11768: LD_INT 76
11770: PPUSH
11771: LD_INT 0
11773: PPUSH
11774: CALL_OW 48
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
11778: LD_ADDR_EXP 26
11782: PUSH
11783: LD_STRING Kamil
11785: PPUSH
11786: LD_EXP 1
11790: NOT
11791: PPUSH
11792: LD_EXP 2
11796: PPUSH
11797: CALL 31832 0 3
11801: ST_TO_ADDR
// if Kamil then
11802: LD_EXP 26
11806: IFFALSE 11826
// PlaceUnitXY ( Kamil , 85 , 78 , false ) ;
11808: LD_EXP 26
11812: PPUSH
11813: LD_INT 85
11815: PPUSH
11816: LD_INT 78
11818: PPUSH
11819: LD_INT 0
11821: PPUSH
11822: CALL_OW 48
// uc_side := 5 ;
11826: LD_ADDR_OWVAR 20
11830: PUSH
11831: LD_INT 5
11833: ST_TO_ADDR
// uc_nation := 2 ;
11834: LD_ADDR_OWVAR 21
11838: PUSH
11839: LD_INT 2
11841: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , false ,  ) ;
11842: LD_ADDR_EXP 27
11846: PUSH
11847: LD_STRING Aviradze
11849: PPUSH
11850: LD_INT 0
11852: PPUSH
11853: LD_STRING 
11855: PPUSH
11856: CALL 31832 0 3
11860: ST_TO_ADDR
// PlaceUnitXY ( Aviradze , 106 , 38 , false ) ;
11861: LD_EXP 27
11865: PPUSH
11866: LD_INT 106
11868: PPUSH
11869: LD_INT 38
11871: PPUSH
11872: LD_INT 0
11874: PPUSH
11875: CALL_OW 48
// ComTurnXY ( Aviradze , 103 , 38 ) ;
11879: LD_EXP 27
11883: PPUSH
11884: LD_INT 103
11886: PPUSH
11887: LD_INT 38
11889: PPUSH
11890: CALL_OW 118
// Kaia := PrepareUnit ( Kaia , false ,  ) ;
11894: LD_ADDR_EXP 28
11898: PUSH
11899: LD_STRING Kaia
11901: PPUSH
11902: LD_INT 0
11904: PPUSH
11905: LD_STRING 
11907: PPUSH
11908: CALL 31832 0 3
11912: ST_TO_ADDR
// PlaceUnitXY ( Kaia , 100 , 34 , false ) ;
11913: LD_EXP 28
11917: PPUSH
11918: LD_INT 100
11920: PPUSH
11921: LD_INT 34
11923: PPUSH
11924: LD_INT 0
11926: PPUSH
11927: CALL_OW 48
// ComTurnXY ( Kaia , 100 , 39 ) ;
11931: LD_EXP 28
11935: PPUSH
11936: LD_INT 100
11938: PPUSH
11939: LD_INT 39
11941: PPUSH
11942: CALL_OW 118
// Sophia := PrepareUnit ( Sophia , false ,  ) ;
11946: LD_ADDR_EXP 29
11950: PUSH
11951: LD_STRING Sophia
11953: PPUSH
11954: LD_INT 0
11956: PPUSH
11957: LD_STRING 
11959: PPUSH
11960: CALL 31832 0 3
11964: ST_TO_ADDR
// PlaceUnitXY ( Sophia , 109 , 50 , false ) ;
11965: LD_EXP 29
11969: PPUSH
11970: LD_INT 109
11972: PPUSH
11973: LD_INT 50
11975: PPUSH
11976: LD_INT 0
11978: PPUSH
11979: CALL_OW 48
// ComTurnXY ( Sophia , 100 , 39 ) ;
11983: LD_EXP 29
11987: PPUSH
11988: LD_INT 100
11990: PPUSH
11991: LD_INT 39
11993: PPUSH
11994: CALL_OW 118
// Markov := PrepareUnit ( Markov , false ,  ) ;
11998: LD_ADDR_EXP 30
12002: PUSH
12003: LD_STRING Markov
12005: PPUSH
12006: LD_INT 0
12008: PPUSH
12009: LD_STRING 
12011: PPUSH
12012: CALL 31832 0 3
12016: ST_TO_ADDR
// PrepareTank ( 5 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , [ 90 , 70 , 60 , 50 ] [ Difficulty ] ) ;
12017: LD_INT 5
12019: PPUSH
12020: LD_INT 3
12022: PPUSH
12023: LD_INT 21
12025: PPUSH
12026: LD_INT 1
12028: PPUSH
12029: LD_INT 1
12031: PPUSH
12032: LD_INT 42
12034: PPUSH
12035: LD_INT 90
12037: PUSH
12038: LD_INT 70
12040: PUSH
12041: LD_INT 60
12043: PUSH
12044: LD_INT 50
12046: PUSH
12047: EMPTY
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: PUSH
12053: LD_OWVAR 67
12057: ARRAY
12058: PPUSH
12059: CALL 241 0 7
// veh := CreateVehicle ;
12063: LD_ADDR_VAR 0 3
12067: PUSH
12068: CALL_OW 45
12072: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
12073: LD_VAR 0 3
12077: PPUSH
12078: LD_INT 4
12080: PPUSH
12081: CALL_OW 233
// PlaceUnitXY ( veh , 109 , 38 , false ) ;
12085: LD_VAR 0 3
12089: PPUSH
12090: LD_INT 109
12092: PPUSH
12093: LD_INT 38
12095: PPUSH
12096: LD_INT 0
12098: PPUSH
12099: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
12103: LD_EXP 30
12107: PPUSH
12108: LD_VAR 0 3
12112: PPUSH
12113: CALL_OW 52
// ComTurnUnit ( Kaia , Aviradze ) ;
12117: LD_EXP 28
12121: PPUSH
12122: LD_EXP 27
12126: PPUSH
12127: CALL_OW 119
// ComTurnUnit ( Aviradze , Kaia ) ;
12131: LD_EXP 27
12135: PPUSH
12136: LD_EXP 28
12140: PPUSH
12141: CALL_OW 119
// if not Givi or not Mike then
12145: LD_EXP 24
12149: NOT
12150: PUSH
12151: LD_EXP 25
12155: NOT
12156: OR
12157: IFFALSE 12233
// begin uc_nation := 2 ;
12159: LD_ADDR_OWVAR 21
12163: PUSH
12164: LD_INT 2
12166: ST_TO_ADDR
// uc_side := 5 ;
12167: LD_ADDR_OWVAR 20
12171: PUSH
12172: LD_INT 5
12174: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 1 ) ;
12175: LD_INT 1
12177: PPUSH
12178: LD_INT 1
12180: PPUSH
12181: LD_INT 1
12183: PPUSH
12184: CALL_OW 380
// un := CreateHuman ;
12188: LD_ADDR_VAR 0 2
12192: PUSH
12193: CALL_OW 44
12197: ST_TO_ADDR
// PlaceUnitXYR ( un , 112 , 40 , 3 , false ) ;
12198: LD_VAR 0 2
12202: PPUSH
12203: LD_INT 112
12205: PPUSH
12206: LD_INT 40
12208: PPUSH
12209: LD_INT 3
12211: PPUSH
12212: LD_INT 0
12214: PPUSH
12215: CALL_OW 50
// ComTurnUnit ( un , Aviradze ) ;
12219: LD_VAR 0 2
12223: PPUSH
12224: LD_EXP 27
12228: PPUSH
12229: CALL_OW 119
// end ; end ;
12233: LD_VAR 0 1
12237: RET
// export function PrepareFarmer ; var i ; begin
12238: LD_INT 0
12240: PPUSH
12241: PPUSH
// uc_side := 5 ;
12242: LD_ADDR_OWVAR 20
12246: PUSH
12247: LD_INT 5
12249: ST_TO_ADDR
// uc_nation := 2 ;
12250: LD_ADDR_OWVAR 21
12254: PUSH
12255: LD_INT 2
12257: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
12258: LD_ADDR_EXP 31
12262: PUSH
12263: LD_STRING Farmer
12265: PPUSH
12266: LD_INT 0
12268: PPUSH
12269: LD_STRING 
12271: PPUSH
12272: CALL 31832 0 3
12276: ST_TO_ADDR
// PlaceUnitXY ( Farmer , 106 , 62 , false ) ;
12277: LD_EXP 31
12281: PPUSH
12282: LD_INT 106
12284: PPUSH
12285: LD_INT 62
12287: PPUSH
12288: LD_INT 0
12290: PPUSH
12291: CALL_OW 48
// for i := 1 to 5 do
12295: LD_ADDR_VAR 0 2
12299: PUSH
12300: DOUBLE
12301: LD_INT 1
12303: DEC
12304: ST_TO_ADDR
12305: LD_INT 5
12307: PUSH
12308: FOR_TO
12309: IFFALSE 12347
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
12311: LD_INT 1
12313: PPUSH
12314: LD_INT 1
12316: PPUSH
12317: LD_INT 1
12319: PPUSH
12320: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 105 , 64 , 3 , false ) ;
12324: CALL_OW 44
12328: PPUSH
12329: LD_INT 105
12331: PPUSH
12332: LD_INT 64
12334: PPUSH
12335: LD_INT 3
12337: PPUSH
12338: LD_INT 0
12340: PPUSH
12341: CALL_OW 50
// end ;
12345: GO 12308
12347: POP
12348: POP
// end ; end_of_file
12349: LD_VAR 0 1
12353: RET
// every 2 2$20 + 0 0$10 do
12354: GO 12356
12356: DISABLE
// begin enable ;
12357: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , forest , true ) ;
12358: LD_INT 1
12360: PPUSH
12361: LD_INT 5
12363: PPUSH
12364: CALL_OW 12
12368: PPUSH
12369: LD_INT 1
12371: PPUSH
12372: LD_INT 1
12374: PPUSH
12375: CALL_OW 55
// if tick > 6 6$00 then
12379: LD_OWVAR 1
12383: PUSH
12384: LD_INT 12600
12386: GREATER
12387: IFFALSE 12390
// disable ;
12389: DISABLE
// end ; end_of_file
12390: END
// on UnitDestroyed ( un ) do begin if un = Heike then
12391: LD_VAR 0 1
12395: PUSH
12396: LD_EXP 23
12400: EQUAL
12401: IFFALSE 12410
// YouLost ( Heike ) ;
12403: LD_STRING Heike
12405: PPUSH
12406: CALL_OW 104
// if un = Aviradze then
12410: LD_VAR 0 1
12414: PUSH
12415: LD_EXP 27
12419: EQUAL
12420: IFFALSE 12429
// YouLost ( Aviradze ) ;
12422: LD_STRING Aviradze
12424: PPUSH
12425: CALL_OW 104
// if un = usLab then
12429: LD_VAR 0 1
12433: PUSH
12434: LD_INT 3
12436: EQUAL
12437: IFFALSE 12446
// YouLost ( Lab ) ;
12439: LD_STRING Lab
12441: PPUSH
12442: CALL_OW 104
// if ( un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) diff [ Heike , Aviradze ] ) and aviradzeSpotted then
12446: LD_VAR 0 1
12450: PUSH
12451: LD_INT 22
12453: PUSH
12454: LD_INT 2
12456: PUSH
12457: EMPTY
12458: LIST
12459: LIST
12460: PUSH
12461: LD_INT 21
12463: PUSH
12464: LD_INT 1
12466: PUSH
12467: EMPTY
12468: LIST
12469: LIST
12470: PUSH
12471: LD_INT 23
12473: PUSH
12474: LD_INT 2
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: PUSH
12481: EMPTY
12482: LIST
12483: LIST
12484: LIST
12485: PPUSH
12486: CALL_OW 69
12490: PUSH
12491: LD_EXP 23
12495: PUSH
12496: LD_EXP 27
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: DIFF
12505: IN
12506: PUSH
12507: LD_EXP 4
12511: AND
12512: IFFALSE 12528
// lostCounter := lostCounter + 1 ;
12514: LD_ADDR_EXP 18
12518: PUSH
12519: LD_EXP 18
12523: PUSH
12524: LD_INT 1
12526: PLUS
12527: ST_TO_ADDR
// end ;
12528: PPOPN 1
12530: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 2 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) = 0 do
12531: LD_INT 23
12533: PUSH
12534: LD_INT 2
12536: PUSH
12537: EMPTY
12538: LIST
12539: LIST
12540: PUSH
12541: LD_INT 25
12543: PUSH
12544: LD_INT 2
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: PUSH
12551: EMPTY
12552: LIST
12553: LIST
12554: PPUSH
12555: CALL_OW 69
12559: PUSH
12560: LD_INT 0
12562: EQUAL
12563: PUSH
12564: LD_INT 22
12566: PUSH
12567: LD_INT 2
12569: PUSH
12570: EMPTY
12571: LIST
12572: LIST
12573: PUSH
12574: LD_INT 21
12576: PUSH
12577: LD_INT 3
12579: PUSH
12580: EMPTY
12581: LIST
12582: LIST
12583: PUSH
12584: EMPTY
12585: LIST
12586: LIST
12587: PPUSH
12588: CALL_OW 69
12592: PUSH
12593: LD_INT 0
12595: EQUAL
12596: AND
12597: IFFALSE 12609
12599: GO 12601
12601: DISABLE
// YouLost ( Eng ) ;
12602: LD_STRING Eng
12604: PPUSH
12605: CALL_OW 104
12609: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in usSci and killerSide = 2 then
12610: LD_VAR 0 1
12614: PUSH
12615: LD_EXP 22
12619: IN
12620: PUSH
12621: LD_VAR 0 2
12625: PUSH
12626: LD_INT 2
12628: EQUAL
12629: AND
12630: IFFALSE 12662
// begin usSci := usSci diff un ;
12632: LD_ADDR_EXP 22
12636: PUSH
12637: LD_EXP 22
12641: PUSH
12642: LD_VAR 0 1
12646: DIFF
12647: ST_TO_ADDR
// sciCounterKill := sciCounterKill + 1 ;
12648: LD_ADDR_EXP 9
12652: PUSH
12653: LD_EXP 9
12657: PUSH
12658: LD_INT 1
12660: PLUS
12661: ST_TO_ADDR
// end ; end ;
12662: PPOPN 3
12664: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
12665: LD_VAR 0 1
12669: PUSH
12670: LD_INT 2
12672: EQUAL
12673: PUSH
12674: LD_VAR 0 2
12678: PUSH
12679: LD_INT 5
12681: EQUAL
12682: AND
12683: IFFALSE 12692
// YouLost ( FriendlyFire ) ;
12685: LD_STRING FriendlyFire
12687: PPUSH
12688: CALL_OW 104
// end ; end_of_file
12692: PPOPN 2
12694: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
12695: LD_INT 0
12697: PPUSH
// ar_miner := 81 ;
12698: LD_ADDR_EXP 39
12702: PUSH
12703: LD_INT 81
12705: ST_TO_ADDR
// ar_crane := 88 ;
12706: LD_ADDR_EXP 38
12710: PUSH
12711: LD_INT 88
12713: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
12714: LD_ADDR_EXP 33
12718: PUSH
12719: LD_INT 89
12721: ST_TO_ADDR
// us_hack := 99 ;
12722: LD_ADDR_EXP 34
12726: PUSH
12727: LD_INT 99
12729: ST_TO_ADDR
// us_artillery := 97 ;
12730: LD_ADDR_EXP 35
12734: PUSH
12735: LD_INT 97
12737: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12738: LD_ADDR_EXP 36
12742: PUSH
12743: LD_INT 91
12745: ST_TO_ADDR
// ar_mortar := 92 ;
12746: LD_ADDR_EXP 37
12750: PUSH
12751: LD_INT 92
12753: ST_TO_ADDR
// ru_radar := 98 ;
12754: LD_ADDR_EXP 32
12758: PUSH
12759: LD_INT 98
12761: ST_TO_ADDR
// tech_Artillery := 80 ;
12762: LD_ADDR_EXP 40
12766: PUSH
12767: LD_INT 80
12769: ST_TO_ADDR
// tech_RadMat := 81 ;
12770: LD_ADDR_EXP 41
12774: PUSH
12775: LD_INT 81
12777: ST_TO_ADDR
// tech_BasicTools := 82 ;
12778: LD_ADDR_EXP 42
12782: PUSH
12783: LD_INT 82
12785: ST_TO_ADDR
// tech_Cargo := 83 ;
12786: LD_ADDR_EXP 43
12790: PUSH
12791: LD_INT 83
12793: ST_TO_ADDR
// tech_Track := 84 ;
12794: LD_ADDR_EXP 44
12798: PUSH
12799: LD_INT 84
12801: ST_TO_ADDR
// tech_Crane := 85 ;
12802: LD_ADDR_EXP 45
12806: PUSH
12807: LD_INT 85
12809: ST_TO_ADDR
// tech_Bulldozer := 86 ;
12810: LD_ADDR_EXP 46
12814: PUSH
12815: LD_INT 86
12817: ST_TO_ADDR
// tech_Hovercraft := 87 ;
12818: LD_ADDR_EXP 47
12822: PUSH
12823: LD_INT 87
12825: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
12826: LD_ADDR_EXP 48
12830: PUSH
12831: LD_INT 88
12833: ST_TO_ADDR
// class_mastodont := 31 ;
12834: LD_ADDR_EXP 49
12838: PUSH
12839: LD_INT 31
12841: ST_TO_ADDR
// class_horse := 21 ;
12842: LD_ADDR_EXP 50
12846: PUSH
12847: LD_INT 21
12849: ST_TO_ADDR
// end ;
12850: LD_VAR 0 1
12854: RET
// every 1 do
12855: GO 12857
12857: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
12858: CALL 12695 0 0
12862: END
// every 0 0$1 do
12863: GO 12865
12865: DISABLE
// begin enable ;
12866: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
12867: LD_STRING updateTimer(
12869: PUSH
12870: LD_OWVAR 1
12874: STR
12875: PUSH
12876: LD_STRING );
12878: STR
12879: PPUSH
12880: CALL_OW 559
// end ;
12884: END
// on MapStart ( p ) do begin if streamModeActive then
12885: LD_EXP 51
12889: IFFALSE 12898
// DefineStreamItems ( true ) ;
12891: LD_INT 1
12893: PPUSH
12894: CALL 14546 0 1
// UpdateFactoryWaypoints ( ) ;
12898: CALL 28130 0 0
// end ;
12902: PPOPN 1
12904: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12905: LD_INT 0
12907: PPUSH
// if p2 = 100 then
12908: LD_VAR 0 2
12912: PUSH
12913: LD_INT 100
12915: EQUAL
12916: IFFALSE 13919
// begin if not StreamModeActive then
12918: LD_EXP 51
12922: NOT
12923: IFFALSE 12933
// StreamModeActive := true ;
12925: LD_ADDR_EXP 51
12929: PUSH
12930: LD_INT 1
12932: ST_TO_ADDR
// if p3 = 0 then
12933: LD_VAR 0 3
12937: PUSH
12938: LD_INT 0
12940: EQUAL
12941: IFFALSE 12947
// InitStreamMode ;
12943: CALL 14082 0 0
// if p3 = 1 then
12947: LD_VAR 0 3
12951: PUSH
12952: LD_INT 1
12954: EQUAL
12955: IFFALSE 12965
// sRocket := true ;
12957: LD_ADDR_EXP 56
12961: PUSH
12962: LD_INT 1
12964: ST_TO_ADDR
// if p3 = 2 then
12965: LD_VAR 0 3
12969: PUSH
12970: LD_INT 2
12972: EQUAL
12973: IFFALSE 12983
// sSpeed := true ;
12975: LD_ADDR_EXP 55
12979: PUSH
12980: LD_INT 1
12982: ST_TO_ADDR
// if p3 = 3 then
12983: LD_VAR 0 3
12987: PUSH
12988: LD_INT 3
12990: EQUAL
12991: IFFALSE 13001
// sEngine := true ;
12993: LD_ADDR_EXP 57
12997: PUSH
12998: LD_INT 1
13000: ST_TO_ADDR
// if p3 = 4 then
13001: LD_VAR 0 3
13005: PUSH
13006: LD_INT 4
13008: EQUAL
13009: IFFALSE 13019
// sSpec := true ;
13011: LD_ADDR_EXP 54
13015: PUSH
13016: LD_INT 1
13018: ST_TO_ADDR
// if p3 = 5 then
13019: LD_VAR 0 3
13023: PUSH
13024: LD_INT 5
13026: EQUAL
13027: IFFALSE 13037
// sLevel := true ;
13029: LD_ADDR_EXP 58
13033: PUSH
13034: LD_INT 1
13036: ST_TO_ADDR
// if p3 = 6 then
13037: LD_VAR 0 3
13041: PUSH
13042: LD_INT 6
13044: EQUAL
13045: IFFALSE 13055
// sArmoury := true ;
13047: LD_ADDR_EXP 59
13051: PUSH
13052: LD_INT 1
13054: ST_TO_ADDR
// if p3 = 7 then
13055: LD_VAR 0 3
13059: PUSH
13060: LD_INT 7
13062: EQUAL
13063: IFFALSE 13073
// sRadar := true ;
13065: LD_ADDR_EXP 60
13069: PUSH
13070: LD_INT 1
13072: ST_TO_ADDR
// if p3 = 8 then
13073: LD_VAR 0 3
13077: PUSH
13078: LD_INT 8
13080: EQUAL
13081: IFFALSE 13091
// sBunker := true ;
13083: LD_ADDR_EXP 61
13087: PUSH
13088: LD_INT 1
13090: ST_TO_ADDR
// if p3 = 9 then
13091: LD_VAR 0 3
13095: PUSH
13096: LD_INT 9
13098: EQUAL
13099: IFFALSE 13109
// sHack := true ;
13101: LD_ADDR_EXP 62
13105: PUSH
13106: LD_INT 1
13108: ST_TO_ADDR
// if p3 = 10 then
13109: LD_VAR 0 3
13113: PUSH
13114: LD_INT 10
13116: EQUAL
13117: IFFALSE 13127
// sFire := true ;
13119: LD_ADDR_EXP 63
13123: PUSH
13124: LD_INT 1
13126: ST_TO_ADDR
// if p3 = 11 then
13127: LD_VAR 0 3
13131: PUSH
13132: LD_INT 11
13134: EQUAL
13135: IFFALSE 13145
// sRefresh := true ;
13137: LD_ADDR_EXP 64
13141: PUSH
13142: LD_INT 1
13144: ST_TO_ADDR
// if p3 = 12 then
13145: LD_VAR 0 3
13149: PUSH
13150: LD_INT 12
13152: EQUAL
13153: IFFALSE 13163
// sExp := true ;
13155: LD_ADDR_EXP 65
13159: PUSH
13160: LD_INT 1
13162: ST_TO_ADDR
// if p3 = 13 then
13163: LD_VAR 0 3
13167: PUSH
13168: LD_INT 13
13170: EQUAL
13171: IFFALSE 13181
// sDepot := true ;
13173: LD_ADDR_EXP 66
13177: PUSH
13178: LD_INT 1
13180: ST_TO_ADDR
// if p3 = 14 then
13181: LD_VAR 0 3
13185: PUSH
13186: LD_INT 14
13188: EQUAL
13189: IFFALSE 13199
// sFlag := true ;
13191: LD_ADDR_EXP 67
13195: PUSH
13196: LD_INT 1
13198: ST_TO_ADDR
// if p3 = 15 then
13199: LD_VAR 0 3
13203: PUSH
13204: LD_INT 15
13206: EQUAL
13207: IFFALSE 13217
// sKamikadze := true ;
13209: LD_ADDR_EXP 75
13213: PUSH
13214: LD_INT 1
13216: ST_TO_ADDR
// if p3 = 16 then
13217: LD_VAR 0 3
13221: PUSH
13222: LD_INT 16
13224: EQUAL
13225: IFFALSE 13235
// sTroll := true ;
13227: LD_ADDR_EXP 76
13231: PUSH
13232: LD_INT 1
13234: ST_TO_ADDR
// if p3 = 17 then
13235: LD_VAR 0 3
13239: PUSH
13240: LD_INT 17
13242: EQUAL
13243: IFFALSE 13253
// sSlow := true ;
13245: LD_ADDR_EXP 77
13249: PUSH
13250: LD_INT 1
13252: ST_TO_ADDR
// if p3 = 18 then
13253: LD_VAR 0 3
13257: PUSH
13258: LD_INT 18
13260: EQUAL
13261: IFFALSE 13271
// sLack := true ;
13263: LD_ADDR_EXP 78
13267: PUSH
13268: LD_INT 1
13270: ST_TO_ADDR
// if p3 = 19 then
13271: LD_VAR 0 3
13275: PUSH
13276: LD_INT 19
13278: EQUAL
13279: IFFALSE 13289
// sTank := true ;
13281: LD_ADDR_EXP 80
13285: PUSH
13286: LD_INT 1
13288: ST_TO_ADDR
// if p3 = 20 then
13289: LD_VAR 0 3
13293: PUSH
13294: LD_INT 20
13296: EQUAL
13297: IFFALSE 13307
// sRemote := true ;
13299: LD_ADDR_EXP 81
13303: PUSH
13304: LD_INT 1
13306: ST_TO_ADDR
// if p3 = 21 then
13307: LD_VAR 0 3
13311: PUSH
13312: LD_INT 21
13314: EQUAL
13315: IFFALSE 13325
// sPowell := true ;
13317: LD_ADDR_EXP 82
13321: PUSH
13322: LD_INT 1
13324: ST_TO_ADDR
// if p3 = 22 then
13325: LD_VAR 0 3
13329: PUSH
13330: LD_INT 22
13332: EQUAL
13333: IFFALSE 13343
// sTeleport := true ;
13335: LD_ADDR_EXP 85
13339: PUSH
13340: LD_INT 1
13342: ST_TO_ADDR
// if p3 = 23 then
13343: LD_VAR 0 3
13347: PUSH
13348: LD_INT 23
13350: EQUAL
13351: IFFALSE 13361
// sOilTower := true ;
13353: LD_ADDR_EXP 87
13357: PUSH
13358: LD_INT 1
13360: ST_TO_ADDR
// if p3 = 24 then
13361: LD_VAR 0 3
13365: PUSH
13366: LD_INT 24
13368: EQUAL
13369: IFFALSE 13379
// sShovel := true ;
13371: LD_ADDR_EXP 88
13375: PUSH
13376: LD_INT 1
13378: ST_TO_ADDR
// if p3 = 25 then
13379: LD_VAR 0 3
13383: PUSH
13384: LD_INT 25
13386: EQUAL
13387: IFFALSE 13397
// sSheik := true ;
13389: LD_ADDR_EXP 89
13393: PUSH
13394: LD_INT 1
13396: ST_TO_ADDR
// if p3 = 26 then
13397: LD_VAR 0 3
13401: PUSH
13402: LD_INT 26
13404: EQUAL
13405: IFFALSE 13415
// sEarthquake := true ;
13407: LD_ADDR_EXP 91
13411: PUSH
13412: LD_INT 1
13414: ST_TO_ADDR
// if p3 = 27 then
13415: LD_VAR 0 3
13419: PUSH
13420: LD_INT 27
13422: EQUAL
13423: IFFALSE 13433
// sAI := true ;
13425: LD_ADDR_EXP 92
13429: PUSH
13430: LD_INT 1
13432: ST_TO_ADDR
// if p3 = 28 then
13433: LD_VAR 0 3
13437: PUSH
13438: LD_INT 28
13440: EQUAL
13441: IFFALSE 13451
// sCargo := true ;
13443: LD_ADDR_EXP 95
13447: PUSH
13448: LD_INT 1
13450: ST_TO_ADDR
// if p3 = 29 then
13451: LD_VAR 0 3
13455: PUSH
13456: LD_INT 29
13458: EQUAL
13459: IFFALSE 13469
// sDLaser := true ;
13461: LD_ADDR_EXP 96
13465: PUSH
13466: LD_INT 1
13468: ST_TO_ADDR
// if p3 = 30 then
13469: LD_VAR 0 3
13473: PUSH
13474: LD_INT 30
13476: EQUAL
13477: IFFALSE 13487
// sExchange := true ;
13479: LD_ADDR_EXP 97
13483: PUSH
13484: LD_INT 1
13486: ST_TO_ADDR
// if p3 = 31 then
13487: LD_VAR 0 3
13491: PUSH
13492: LD_INT 31
13494: EQUAL
13495: IFFALSE 13505
// sFac := true ;
13497: LD_ADDR_EXP 98
13501: PUSH
13502: LD_INT 1
13504: ST_TO_ADDR
// if p3 = 32 then
13505: LD_VAR 0 3
13509: PUSH
13510: LD_INT 32
13512: EQUAL
13513: IFFALSE 13523
// sPower := true ;
13515: LD_ADDR_EXP 99
13519: PUSH
13520: LD_INT 1
13522: ST_TO_ADDR
// if p3 = 33 then
13523: LD_VAR 0 3
13527: PUSH
13528: LD_INT 33
13530: EQUAL
13531: IFFALSE 13541
// sRandom := true ;
13533: LD_ADDR_EXP 100
13537: PUSH
13538: LD_INT 1
13540: ST_TO_ADDR
// if p3 = 34 then
13541: LD_VAR 0 3
13545: PUSH
13546: LD_INT 34
13548: EQUAL
13549: IFFALSE 13559
// sShield := true ;
13551: LD_ADDR_EXP 101
13555: PUSH
13556: LD_INT 1
13558: ST_TO_ADDR
// if p3 = 35 then
13559: LD_VAR 0 3
13563: PUSH
13564: LD_INT 35
13566: EQUAL
13567: IFFALSE 13577
// sTime := true ;
13569: LD_ADDR_EXP 102
13573: PUSH
13574: LD_INT 1
13576: ST_TO_ADDR
// if p3 = 36 then
13577: LD_VAR 0 3
13581: PUSH
13582: LD_INT 36
13584: EQUAL
13585: IFFALSE 13595
// sTools := true ;
13587: LD_ADDR_EXP 103
13591: PUSH
13592: LD_INT 1
13594: ST_TO_ADDR
// if p3 = 101 then
13595: LD_VAR 0 3
13599: PUSH
13600: LD_INT 101
13602: EQUAL
13603: IFFALSE 13613
// sSold := true ;
13605: LD_ADDR_EXP 68
13609: PUSH
13610: LD_INT 1
13612: ST_TO_ADDR
// if p3 = 102 then
13613: LD_VAR 0 3
13617: PUSH
13618: LD_INT 102
13620: EQUAL
13621: IFFALSE 13631
// sDiff := true ;
13623: LD_ADDR_EXP 69
13627: PUSH
13628: LD_INT 1
13630: ST_TO_ADDR
// if p3 = 103 then
13631: LD_VAR 0 3
13635: PUSH
13636: LD_INT 103
13638: EQUAL
13639: IFFALSE 13649
// sFog := true ;
13641: LD_ADDR_EXP 72
13645: PUSH
13646: LD_INT 1
13648: ST_TO_ADDR
// if p3 = 104 then
13649: LD_VAR 0 3
13653: PUSH
13654: LD_INT 104
13656: EQUAL
13657: IFFALSE 13667
// sReset := true ;
13659: LD_ADDR_EXP 73
13663: PUSH
13664: LD_INT 1
13666: ST_TO_ADDR
// if p3 = 105 then
13667: LD_VAR 0 3
13671: PUSH
13672: LD_INT 105
13674: EQUAL
13675: IFFALSE 13685
// sSun := true ;
13677: LD_ADDR_EXP 74
13681: PUSH
13682: LD_INT 1
13684: ST_TO_ADDR
// if p3 = 106 then
13685: LD_VAR 0 3
13689: PUSH
13690: LD_INT 106
13692: EQUAL
13693: IFFALSE 13703
// sTiger := true ;
13695: LD_ADDR_EXP 70
13699: PUSH
13700: LD_INT 1
13702: ST_TO_ADDR
// if p3 = 107 then
13703: LD_VAR 0 3
13707: PUSH
13708: LD_INT 107
13710: EQUAL
13711: IFFALSE 13721
// sBomb := true ;
13713: LD_ADDR_EXP 71
13717: PUSH
13718: LD_INT 1
13720: ST_TO_ADDR
// if p3 = 108 then
13721: LD_VAR 0 3
13725: PUSH
13726: LD_INT 108
13728: EQUAL
13729: IFFALSE 13739
// sWound := true ;
13731: LD_ADDR_EXP 79
13735: PUSH
13736: LD_INT 1
13738: ST_TO_ADDR
// if p3 = 109 then
13739: LD_VAR 0 3
13743: PUSH
13744: LD_INT 109
13746: EQUAL
13747: IFFALSE 13757
// sBetray := true ;
13749: LD_ADDR_EXP 83
13753: PUSH
13754: LD_INT 1
13756: ST_TO_ADDR
// if p3 = 110 then
13757: LD_VAR 0 3
13761: PUSH
13762: LD_INT 110
13764: EQUAL
13765: IFFALSE 13775
// sContamin := true ;
13767: LD_ADDR_EXP 84
13771: PUSH
13772: LD_INT 1
13774: ST_TO_ADDR
// if p3 = 111 then
13775: LD_VAR 0 3
13779: PUSH
13780: LD_INT 111
13782: EQUAL
13783: IFFALSE 13793
// sOil := true ;
13785: LD_ADDR_EXP 86
13789: PUSH
13790: LD_INT 1
13792: ST_TO_ADDR
// if p3 = 112 then
13793: LD_VAR 0 3
13797: PUSH
13798: LD_INT 112
13800: EQUAL
13801: IFFALSE 13811
// sStu := true ;
13803: LD_ADDR_EXP 90
13807: PUSH
13808: LD_INT 1
13810: ST_TO_ADDR
// if p3 = 113 then
13811: LD_VAR 0 3
13815: PUSH
13816: LD_INT 113
13818: EQUAL
13819: IFFALSE 13829
// sBazooka := true ;
13821: LD_ADDR_EXP 93
13825: PUSH
13826: LD_INT 1
13828: ST_TO_ADDR
// if p3 = 114 then
13829: LD_VAR 0 3
13833: PUSH
13834: LD_INT 114
13836: EQUAL
13837: IFFALSE 13847
// sMortar := true ;
13839: LD_ADDR_EXP 94
13843: PUSH
13844: LD_INT 1
13846: ST_TO_ADDR
// if p3 = 115 then
13847: LD_VAR 0 3
13851: PUSH
13852: LD_INT 115
13854: EQUAL
13855: IFFALSE 13865
// sRanger := true ;
13857: LD_ADDR_EXP 104
13861: PUSH
13862: LD_INT 1
13864: ST_TO_ADDR
// if p3 = 116 then
13865: LD_VAR 0 3
13869: PUSH
13870: LD_INT 116
13872: EQUAL
13873: IFFALSE 13883
// sComputer := true ;
13875: LD_ADDR_EXP 105
13879: PUSH
13880: LD_INT 1
13882: ST_TO_ADDR
// if p3 = 117 then
13883: LD_VAR 0 3
13887: PUSH
13888: LD_INT 117
13890: EQUAL
13891: IFFALSE 13901
// s30 := true ;
13893: LD_ADDR_EXP 106
13897: PUSH
13898: LD_INT 1
13900: ST_TO_ADDR
// if p3 = 118 then
13901: LD_VAR 0 3
13905: PUSH
13906: LD_INT 118
13908: EQUAL
13909: IFFALSE 13919
// s60 := true ;
13911: LD_ADDR_EXP 107
13915: PUSH
13916: LD_INT 1
13918: ST_TO_ADDR
// end ; if p2 = 101 then
13919: LD_VAR 0 2
13923: PUSH
13924: LD_INT 101
13926: EQUAL
13927: IFFALSE 14055
// begin case p3 of 1 :
13929: LD_VAR 0 3
13933: PUSH
13934: LD_INT 1
13936: DOUBLE
13937: EQUAL
13938: IFTRUE 13942
13940: GO 13949
13942: POP
// hHackUnlimitedResources ; 2 :
13943: CALL 26153 0 0
13947: GO 14055
13949: LD_INT 2
13951: DOUBLE
13952: EQUAL
13953: IFTRUE 13957
13955: GO 13964
13957: POP
// hHackSetLevel10 ; 3 :
13958: CALL 26286 0 0
13962: GO 14055
13964: LD_INT 3
13966: DOUBLE
13967: EQUAL
13968: IFTRUE 13972
13970: GO 13979
13972: POP
// hHackSetLevel10YourUnits ; 4 :
13973: CALL 26371 0 0
13977: GO 14055
13979: LD_INT 4
13981: DOUBLE
13982: EQUAL
13983: IFTRUE 13987
13985: GO 13994
13987: POP
// hHackInvincible ; 5 :
13988: CALL 26819 0 0
13992: GO 14055
13994: LD_INT 5
13996: DOUBLE
13997: EQUAL
13998: IFTRUE 14002
14000: GO 14009
14002: POP
// hHackInvisible ; 6 :
14003: CALL 26930 0 0
14007: GO 14055
14009: LD_INT 6
14011: DOUBLE
14012: EQUAL
14013: IFTRUE 14017
14015: GO 14024
14017: POP
// hHackChangeYourSide ; 7 :
14018: CALL 26987 0 0
14022: GO 14055
14024: LD_INT 7
14026: DOUBLE
14027: EQUAL
14028: IFTRUE 14032
14030: GO 14039
14032: POP
// hHackChangeUnitSide ; 8 :
14033: CALL 27029 0 0
14037: GO 14055
14039: LD_INT 8
14041: DOUBLE
14042: EQUAL
14043: IFTRUE 14047
14045: GO 14054
14047: POP
// hHackFog ; end ;
14048: CALL 27130 0 0
14052: GO 14055
14054: POP
// end ; end ;
14055: LD_VAR 0 7
14059: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
14060: GO 14062
14062: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
14063: LD_STRING initStreamRollete();
14065: PPUSH
14066: CALL_OW 559
// InitStreamMode ;
14070: CALL 14082 0 0
// DefineStreamItems ( false ) ;
14074: LD_INT 0
14076: PPUSH
14077: CALL 14546 0 1
// end ;
14081: END
// function InitStreamMode ; begin
14082: LD_INT 0
14084: PPUSH
// streamModeActive := false ;
14085: LD_ADDR_EXP 51
14089: PUSH
14090: LD_INT 0
14092: ST_TO_ADDR
// normalCounter := 36 ;
14093: LD_ADDR_EXP 52
14097: PUSH
14098: LD_INT 36
14100: ST_TO_ADDR
// hardcoreCounter := 18 ;
14101: LD_ADDR_EXP 53
14105: PUSH
14106: LD_INT 18
14108: ST_TO_ADDR
// sRocket := false ;
14109: LD_ADDR_EXP 56
14113: PUSH
14114: LD_INT 0
14116: ST_TO_ADDR
// sSpeed := false ;
14117: LD_ADDR_EXP 55
14121: PUSH
14122: LD_INT 0
14124: ST_TO_ADDR
// sEngine := false ;
14125: LD_ADDR_EXP 57
14129: PUSH
14130: LD_INT 0
14132: ST_TO_ADDR
// sSpec := false ;
14133: LD_ADDR_EXP 54
14137: PUSH
14138: LD_INT 0
14140: ST_TO_ADDR
// sLevel := false ;
14141: LD_ADDR_EXP 58
14145: PUSH
14146: LD_INT 0
14148: ST_TO_ADDR
// sArmoury := false ;
14149: LD_ADDR_EXP 59
14153: PUSH
14154: LD_INT 0
14156: ST_TO_ADDR
// sRadar := false ;
14157: LD_ADDR_EXP 60
14161: PUSH
14162: LD_INT 0
14164: ST_TO_ADDR
// sBunker := false ;
14165: LD_ADDR_EXP 61
14169: PUSH
14170: LD_INT 0
14172: ST_TO_ADDR
// sHack := false ;
14173: LD_ADDR_EXP 62
14177: PUSH
14178: LD_INT 0
14180: ST_TO_ADDR
// sFire := false ;
14181: LD_ADDR_EXP 63
14185: PUSH
14186: LD_INT 0
14188: ST_TO_ADDR
// sRefresh := false ;
14189: LD_ADDR_EXP 64
14193: PUSH
14194: LD_INT 0
14196: ST_TO_ADDR
// sExp := false ;
14197: LD_ADDR_EXP 65
14201: PUSH
14202: LD_INT 0
14204: ST_TO_ADDR
// sDepot := false ;
14205: LD_ADDR_EXP 66
14209: PUSH
14210: LD_INT 0
14212: ST_TO_ADDR
// sFlag := false ;
14213: LD_ADDR_EXP 67
14217: PUSH
14218: LD_INT 0
14220: ST_TO_ADDR
// sKamikadze := false ;
14221: LD_ADDR_EXP 75
14225: PUSH
14226: LD_INT 0
14228: ST_TO_ADDR
// sTroll := false ;
14229: LD_ADDR_EXP 76
14233: PUSH
14234: LD_INT 0
14236: ST_TO_ADDR
// sSlow := false ;
14237: LD_ADDR_EXP 77
14241: PUSH
14242: LD_INT 0
14244: ST_TO_ADDR
// sLack := false ;
14245: LD_ADDR_EXP 78
14249: PUSH
14250: LD_INT 0
14252: ST_TO_ADDR
// sTank := false ;
14253: LD_ADDR_EXP 80
14257: PUSH
14258: LD_INT 0
14260: ST_TO_ADDR
// sRemote := false ;
14261: LD_ADDR_EXP 81
14265: PUSH
14266: LD_INT 0
14268: ST_TO_ADDR
// sPowell := false ;
14269: LD_ADDR_EXP 82
14273: PUSH
14274: LD_INT 0
14276: ST_TO_ADDR
// sTeleport := false ;
14277: LD_ADDR_EXP 85
14281: PUSH
14282: LD_INT 0
14284: ST_TO_ADDR
// sOilTower := false ;
14285: LD_ADDR_EXP 87
14289: PUSH
14290: LD_INT 0
14292: ST_TO_ADDR
// sShovel := false ;
14293: LD_ADDR_EXP 88
14297: PUSH
14298: LD_INT 0
14300: ST_TO_ADDR
// sSheik := false ;
14301: LD_ADDR_EXP 89
14305: PUSH
14306: LD_INT 0
14308: ST_TO_ADDR
// sEarthquake := false ;
14309: LD_ADDR_EXP 91
14313: PUSH
14314: LD_INT 0
14316: ST_TO_ADDR
// sAI := false ;
14317: LD_ADDR_EXP 92
14321: PUSH
14322: LD_INT 0
14324: ST_TO_ADDR
// sCargo := false ;
14325: LD_ADDR_EXP 95
14329: PUSH
14330: LD_INT 0
14332: ST_TO_ADDR
// sDLaser := false ;
14333: LD_ADDR_EXP 96
14337: PUSH
14338: LD_INT 0
14340: ST_TO_ADDR
// sExchange := false ;
14341: LD_ADDR_EXP 97
14345: PUSH
14346: LD_INT 0
14348: ST_TO_ADDR
// sFac := false ;
14349: LD_ADDR_EXP 98
14353: PUSH
14354: LD_INT 0
14356: ST_TO_ADDR
// sPower := false ;
14357: LD_ADDR_EXP 99
14361: PUSH
14362: LD_INT 0
14364: ST_TO_ADDR
// sRandom := false ;
14365: LD_ADDR_EXP 100
14369: PUSH
14370: LD_INT 0
14372: ST_TO_ADDR
// sShield := false ;
14373: LD_ADDR_EXP 101
14377: PUSH
14378: LD_INT 0
14380: ST_TO_ADDR
// sTime := false ;
14381: LD_ADDR_EXP 102
14385: PUSH
14386: LD_INT 0
14388: ST_TO_ADDR
// sTools := false ;
14389: LD_ADDR_EXP 103
14393: PUSH
14394: LD_INT 0
14396: ST_TO_ADDR
// sSold := false ;
14397: LD_ADDR_EXP 68
14401: PUSH
14402: LD_INT 0
14404: ST_TO_ADDR
// sDiff := false ;
14405: LD_ADDR_EXP 69
14409: PUSH
14410: LD_INT 0
14412: ST_TO_ADDR
// sFog := false ;
14413: LD_ADDR_EXP 72
14417: PUSH
14418: LD_INT 0
14420: ST_TO_ADDR
// sReset := false ;
14421: LD_ADDR_EXP 73
14425: PUSH
14426: LD_INT 0
14428: ST_TO_ADDR
// sSun := false ;
14429: LD_ADDR_EXP 74
14433: PUSH
14434: LD_INT 0
14436: ST_TO_ADDR
// sTiger := false ;
14437: LD_ADDR_EXP 70
14441: PUSH
14442: LD_INT 0
14444: ST_TO_ADDR
// sBomb := false ;
14445: LD_ADDR_EXP 71
14449: PUSH
14450: LD_INT 0
14452: ST_TO_ADDR
// sWound := false ;
14453: LD_ADDR_EXP 79
14457: PUSH
14458: LD_INT 0
14460: ST_TO_ADDR
// sBetray := false ;
14461: LD_ADDR_EXP 83
14465: PUSH
14466: LD_INT 0
14468: ST_TO_ADDR
// sContamin := false ;
14469: LD_ADDR_EXP 84
14473: PUSH
14474: LD_INT 0
14476: ST_TO_ADDR
// sOil := false ;
14477: LD_ADDR_EXP 86
14481: PUSH
14482: LD_INT 0
14484: ST_TO_ADDR
// sStu := false ;
14485: LD_ADDR_EXP 90
14489: PUSH
14490: LD_INT 0
14492: ST_TO_ADDR
// sBazooka := false ;
14493: LD_ADDR_EXP 93
14497: PUSH
14498: LD_INT 0
14500: ST_TO_ADDR
// sMortar := false ;
14501: LD_ADDR_EXP 94
14505: PUSH
14506: LD_INT 0
14508: ST_TO_ADDR
// sRanger := false ;
14509: LD_ADDR_EXP 104
14513: PUSH
14514: LD_INT 0
14516: ST_TO_ADDR
// sComputer := false ;
14517: LD_ADDR_EXP 105
14521: PUSH
14522: LD_INT 0
14524: ST_TO_ADDR
// s30 := false ;
14525: LD_ADDR_EXP 106
14529: PUSH
14530: LD_INT 0
14532: ST_TO_ADDR
// s60 := false ;
14533: LD_ADDR_EXP 107
14537: PUSH
14538: LD_INT 0
14540: ST_TO_ADDR
// end ;
14541: LD_VAR 0 1
14545: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
14546: LD_INT 0
14548: PPUSH
14549: PPUSH
14550: PPUSH
14551: PPUSH
14552: PPUSH
14553: PPUSH
14554: PPUSH
// result := [ ] ;
14555: LD_ADDR_VAR 0 2
14559: PUSH
14560: EMPTY
14561: ST_TO_ADDR
// if campaign_id = 1 then
14562: LD_OWVAR 69
14566: PUSH
14567: LD_INT 1
14569: EQUAL
14570: IFFALSE 17736
// begin case mission_number of 1 :
14572: LD_OWVAR 70
14576: PUSH
14577: LD_INT 1
14579: DOUBLE
14580: EQUAL
14581: IFTRUE 14585
14583: GO 14661
14585: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
14586: LD_ADDR_VAR 0 2
14590: PUSH
14591: LD_INT 2
14593: PUSH
14594: LD_INT 4
14596: PUSH
14597: LD_INT 11
14599: PUSH
14600: LD_INT 12
14602: PUSH
14603: LD_INT 15
14605: PUSH
14606: LD_INT 16
14608: PUSH
14609: LD_INT 22
14611: PUSH
14612: LD_INT 23
14614: PUSH
14615: LD_INT 26
14617: PUSH
14618: EMPTY
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: PUSH
14629: LD_INT 101
14631: PUSH
14632: LD_INT 102
14634: PUSH
14635: LD_INT 106
14637: PUSH
14638: LD_INT 116
14640: PUSH
14641: LD_INT 117
14643: PUSH
14644: LD_INT 118
14646: PUSH
14647: EMPTY
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: PUSH
14655: EMPTY
14656: LIST
14657: LIST
14658: ST_TO_ADDR
14659: GO 17734
14661: LD_INT 2
14663: DOUBLE
14664: EQUAL
14665: IFTRUE 14669
14667: GO 14753
14669: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
14670: LD_ADDR_VAR 0 2
14674: PUSH
14675: LD_INT 2
14677: PUSH
14678: LD_INT 4
14680: PUSH
14681: LD_INT 11
14683: PUSH
14684: LD_INT 12
14686: PUSH
14687: LD_INT 15
14689: PUSH
14690: LD_INT 16
14692: PUSH
14693: LD_INT 22
14695: PUSH
14696: LD_INT 23
14698: PUSH
14699: LD_INT 26
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: PUSH
14713: LD_INT 101
14715: PUSH
14716: LD_INT 102
14718: PUSH
14719: LD_INT 105
14721: PUSH
14722: LD_INT 106
14724: PUSH
14725: LD_INT 108
14727: PUSH
14728: LD_INT 116
14730: PUSH
14731: LD_INT 117
14733: PUSH
14734: LD_INT 118
14736: PUSH
14737: EMPTY
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: PUSH
14747: EMPTY
14748: LIST
14749: LIST
14750: ST_TO_ADDR
14751: GO 17734
14753: LD_INT 3
14755: DOUBLE
14756: EQUAL
14757: IFTRUE 14761
14759: GO 14849
14761: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
14762: LD_ADDR_VAR 0 2
14766: PUSH
14767: LD_INT 2
14769: PUSH
14770: LD_INT 4
14772: PUSH
14773: LD_INT 5
14775: PUSH
14776: LD_INT 11
14778: PUSH
14779: LD_INT 12
14781: PUSH
14782: LD_INT 15
14784: PUSH
14785: LD_INT 16
14787: PUSH
14788: LD_INT 22
14790: PUSH
14791: LD_INT 26
14793: PUSH
14794: LD_INT 36
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: LIST
14801: LIST
14802: LIST
14803: LIST
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: PUSH
14809: LD_INT 101
14811: PUSH
14812: LD_INT 102
14814: PUSH
14815: LD_INT 105
14817: PUSH
14818: LD_INT 106
14820: PUSH
14821: LD_INT 108
14823: PUSH
14824: LD_INT 116
14826: PUSH
14827: LD_INT 117
14829: PUSH
14830: LD_INT 118
14832: PUSH
14833: EMPTY
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: LIST
14839: LIST
14840: LIST
14841: LIST
14842: PUSH
14843: EMPTY
14844: LIST
14845: LIST
14846: ST_TO_ADDR
14847: GO 17734
14849: LD_INT 4
14851: DOUBLE
14852: EQUAL
14853: IFTRUE 14857
14855: GO 14953
14857: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
14858: LD_ADDR_VAR 0 2
14862: PUSH
14863: LD_INT 2
14865: PUSH
14866: LD_INT 4
14868: PUSH
14869: LD_INT 5
14871: PUSH
14872: LD_INT 8
14874: PUSH
14875: LD_INT 11
14877: PUSH
14878: LD_INT 12
14880: PUSH
14881: LD_INT 15
14883: PUSH
14884: LD_INT 16
14886: PUSH
14887: LD_INT 22
14889: PUSH
14890: LD_INT 23
14892: PUSH
14893: LD_INT 26
14895: PUSH
14896: LD_INT 36
14898: PUSH
14899: EMPTY
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: PUSH
14913: LD_INT 101
14915: PUSH
14916: LD_INT 102
14918: PUSH
14919: LD_INT 105
14921: PUSH
14922: LD_INT 106
14924: PUSH
14925: LD_INT 108
14927: PUSH
14928: LD_INT 116
14930: PUSH
14931: LD_INT 117
14933: PUSH
14934: LD_INT 118
14936: PUSH
14937: EMPTY
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: LIST
14945: LIST
14946: PUSH
14947: EMPTY
14948: LIST
14949: LIST
14950: ST_TO_ADDR
14951: GO 17734
14953: LD_INT 5
14955: DOUBLE
14956: EQUAL
14957: IFTRUE 14961
14959: GO 15073
14961: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
14962: LD_ADDR_VAR 0 2
14966: PUSH
14967: LD_INT 2
14969: PUSH
14970: LD_INT 4
14972: PUSH
14973: LD_INT 5
14975: PUSH
14976: LD_INT 6
14978: PUSH
14979: LD_INT 8
14981: PUSH
14982: LD_INT 11
14984: PUSH
14985: LD_INT 12
14987: PUSH
14988: LD_INT 15
14990: PUSH
14991: LD_INT 16
14993: PUSH
14994: LD_INT 22
14996: PUSH
14997: LD_INT 23
14999: PUSH
15000: LD_INT 25
15002: PUSH
15003: LD_INT 26
15005: PUSH
15006: LD_INT 36
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: PUSH
15025: LD_INT 101
15027: PUSH
15028: LD_INT 102
15030: PUSH
15031: LD_INT 105
15033: PUSH
15034: LD_INT 106
15036: PUSH
15037: LD_INT 108
15039: PUSH
15040: LD_INT 109
15042: PUSH
15043: LD_INT 112
15045: PUSH
15046: LD_INT 116
15048: PUSH
15049: LD_INT 117
15051: PUSH
15052: LD_INT 118
15054: PUSH
15055: EMPTY
15056: LIST
15057: LIST
15058: LIST
15059: LIST
15060: LIST
15061: LIST
15062: LIST
15063: LIST
15064: LIST
15065: LIST
15066: PUSH
15067: EMPTY
15068: LIST
15069: LIST
15070: ST_TO_ADDR
15071: GO 17734
15073: LD_INT 6
15075: DOUBLE
15076: EQUAL
15077: IFTRUE 15081
15079: GO 15213
15081: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
15082: LD_ADDR_VAR 0 2
15086: PUSH
15087: LD_INT 2
15089: PUSH
15090: LD_INT 4
15092: PUSH
15093: LD_INT 5
15095: PUSH
15096: LD_INT 6
15098: PUSH
15099: LD_INT 8
15101: PUSH
15102: LD_INT 11
15104: PUSH
15105: LD_INT 12
15107: PUSH
15108: LD_INT 15
15110: PUSH
15111: LD_INT 16
15113: PUSH
15114: LD_INT 20
15116: PUSH
15117: LD_INT 21
15119: PUSH
15120: LD_INT 22
15122: PUSH
15123: LD_INT 23
15125: PUSH
15126: LD_INT 25
15128: PUSH
15129: LD_INT 26
15131: PUSH
15132: LD_INT 30
15134: PUSH
15135: LD_INT 31
15137: PUSH
15138: LD_INT 32
15140: PUSH
15141: LD_INT 36
15143: PUSH
15144: EMPTY
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: PUSH
15165: LD_INT 101
15167: PUSH
15168: LD_INT 102
15170: PUSH
15171: LD_INT 105
15173: PUSH
15174: LD_INT 106
15176: PUSH
15177: LD_INT 108
15179: PUSH
15180: LD_INT 109
15182: PUSH
15183: LD_INT 112
15185: PUSH
15186: LD_INT 116
15188: PUSH
15189: LD_INT 117
15191: PUSH
15192: LD_INT 118
15194: PUSH
15195: EMPTY
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: LIST
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: ST_TO_ADDR
15211: GO 17734
15213: LD_INT 7
15215: DOUBLE
15216: EQUAL
15217: IFTRUE 15221
15219: GO 15333
15221: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
15222: LD_ADDR_VAR 0 2
15226: PUSH
15227: LD_INT 2
15229: PUSH
15230: LD_INT 4
15232: PUSH
15233: LD_INT 5
15235: PUSH
15236: LD_INT 7
15238: PUSH
15239: LD_INT 11
15241: PUSH
15242: LD_INT 12
15244: PUSH
15245: LD_INT 15
15247: PUSH
15248: LD_INT 16
15250: PUSH
15251: LD_INT 20
15253: PUSH
15254: LD_INT 21
15256: PUSH
15257: LD_INT 22
15259: PUSH
15260: LD_INT 23
15262: PUSH
15263: LD_INT 25
15265: PUSH
15266: LD_INT 26
15268: PUSH
15269: EMPTY
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: PUSH
15285: LD_INT 101
15287: PUSH
15288: LD_INT 102
15290: PUSH
15291: LD_INT 103
15293: PUSH
15294: LD_INT 105
15296: PUSH
15297: LD_INT 106
15299: PUSH
15300: LD_INT 108
15302: PUSH
15303: LD_INT 112
15305: PUSH
15306: LD_INT 116
15308: PUSH
15309: LD_INT 117
15311: PUSH
15312: LD_INT 118
15314: PUSH
15315: EMPTY
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: ST_TO_ADDR
15331: GO 17734
15333: LD_INT 8
15335: DOUBLE
15336: EQUAL
15337: IFTRUE 15341
15339: GO 15481
15341: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
15342: LD_ADDR_VAR 0 2
15346: PUSH
15347: LD_INT 2
15349: PUSH
15350: LD_INT 4
15352: PUSH
15353: LD_INT 5
15355: PUSH
15356: LD_INT 6
15358: PUSH
15359: LD_INT 7
15361: PUSH
15362: LD_INT 8
15364: PUSH
15365: LD_INT 11
15367: PUSH
15368: LD_INT 12
15370: PUSH
15371: LD_INT 15
15373: PUSH
15374: LD_INT 16
15376: PUSH
15377: LD_INT 20
15379: PUSH
15380: LD_INT 21
15382: PUSH
15383: LD_INT 22
15385: PUSH
15386: LD_INT 23
15388: PUSH
15389: LD_INT 25
15391: PUSH
15392: LD_INT 26
15394: PUSH
15395: LD_INT 30
15397: PUSH
15398: LD_INT 31
15400: PUSH
15401: LD_INT 32
15403: PUSH
15404: LD_INT 36
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: PUSH
15429: LD_INT 101
15431: PUSH
15432: LD_INT 102
15434: PUSH
15435: LD_INT 103
15437: PUSH
15438: LD_INT 105
15440: PUSH
15441: LD_INT 106
15443: PUSH
15444: LD_INT 108
15446: PUSH
15447: LD_INT 109
15449: PUSH
15450: LD_INT 112
15452: PUSH
15453: LD_INT 116
15455: PUSH
15456: LD_INT 117
15458: PUSH
15459: LD_INT 118
15461: PUSH
15462: EMPTY
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: PUSH
15475: EMPTY
15476: LIST
15477: LIST
15478: ST_TO_ADDR
15479: GO 17734
15481: LD_INT 9
15483: DOUBLE
15484: EQUAL
15485: IFTRUE 15489
15487: GO 15637
15489: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
15490: LD_ADDR_VAR 0 2
15494: PUSH
15495: LD_INT 2
15497: PUSH
15498: LD_INT 4
15500: PUSH
15501: LD_INT 5
15503: PUSH
15504: LD_INT 6
15506: PUSH
15507: LD_INT 7
15509: PUSH
15510: LD_INT 8
15512: PUSH
15513: LD_INT 11
15515: PUSH
15516: LD_INT 12
15518: PUSH
15519: LD_INT 15
15521: PUSH
15522: LD_INT 16
15524: PUSH
15525: LD_INT 20
15527: PUSH
15528: LD_INT 21
15530: PUSH
15531: LD_INT 22
15533: PUSH
15534: LD_INT 23
15536: PUSH
15537: LD_INT 25
15539: PUSH
15540: LD_INT 26
15542: PUSH
15543: LD_INT 28
15545: PUSH
15546: LD_INT 30
15548: PUSH
15549: LD_INT 31
15551: PUSH
15552: LD_INT 32
15554: PUSH
15555: LD_INT 36
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: LIST
15564: LIST
15565: LIST
15566: LIST
15567: LIST
15568: LIST
15569: LIST
15570: LIST
15571: LIST
15572: LIST
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: PUSH
15581: LD_INT 101
15583: PUSH
15584: LD_INT 102
15586: PUSH
15587: LD_INT 103
15589: PUSH
15590: LD_INT 105
15592: PUSH
15593: LD_INT 106
15595: PUSH
15596: LD_INT 108
15598: PUSH
15599: LD_INT 109
15601: PUSH
15602: LD_INT 112
15604: PUSH
15605: LD_INT 114
15607: PUSH
15608: LD_INT 116
15610: PUSH
15611: LD_INT 117
15613: PUSH
15614: LD_INT 118
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: PUSH
15631: EMPTY
15632: LIST
15633: LIST
15634: ST_TO_ADDR
15635: GO 17734
15637: LD_INT 10
15639: DOUBLE
15640: EQUAL
15641: IFTRUE 15645
15643: GO 15841
15645: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
15646: LD_ADDR_VAR 0 2
15650: PUSH
15651: LD_INT 2
15653: PUSH
15654: LD_INT 4
15656: PUSH
15657: LD_INT 5
15659: PUSH
15660: LD_INT 6
15662: PUSH
15663: LD_INT 7
15665: PUSH
15666: LD_INT 8
15668: PUSH
15669: LD_INT 9
15671: PUSH
15672: LD_INT 10
15674: PUSH
15675: LD_INT 11
15677: PUSH
15678: LD_INT 12
15680: PUSH
15681: LD_INT 13
15683: PUSH
15684: LD_INT 14
15686: PUSH
15687: LD_INT 15
15689: PUSH
15690: LD_INT 16
15692: PUSH
15693: LD_INT 17
15695: PUSH
15696: LD_INT 18
15698: PUSH
15699: LD_INT 19
15701: PUSH
15702: LD_INT 20
15704: PUSH
15705: LD_INT 21
15707: PUSH
15708: LD_INT 22
15710: PUSH
15711: LD_INT 23
15713: PUSH
15714: LD_INT 24
15716: PUSH
15717: LD_INT 25
15719: PUSH
15720: LD_INT 26
15722: PUSH
15723: LD_INT 28
15725: PUSH
15726: LD_INT 30
15728: PUSH
15729: LD_INT 31
15731: PUSH
15732: LD_INT 32
15734: PUSH
15735: LD_INT 36
15737: PUSH
15738: EMPTY
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: LIST
15767: LIST
15768: PUSH
15769: LD_INT 101
15771: PUSH
15772: LD_INT 102
15774: PUSH
15775: LD_INT 103
15777: PUSH
15778: LD_INT 104
15780: PUSH
15781: LD_INT 105
15783: PUSH
15784: LD_INT 106
15786: PUSH
15787: LD_INT 107
15789: PUSH
15790: LD_INT 108
15792: PUSH
15793: LD_INT 109
15795: PUSH
15796: LD_INT 110
15798: PUSH
15799: LD_INT 111
15801: PUSH
15802: LD_INT 112
15804: PUSH
15805: LD_INT 114
15807: PUSH
15808: LD_INT 116
15810: PUSH
15811: LD_INT 117
15813: PUSH
15814: LD_INT 118
15816: PUSH
15817: EMPTY
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: PUSH
15835: EMPTY
15836: LIST
15837: LIST
15838: ST_TO_ADDR
15839: GO 17734
15841: LD_INT 11
15843: DOUBLE
15844: EQUAL
15845: IFTRUE 15849
15847: GO 16053
15849: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
15850: LD_ADDR_VAR 0 2
15854: PUSH
15855: LD_INT 2
15857: PUSH
15858: LD_INT 3
15860: PUSH
15861: LD_INT 4
15863: PUSH
15864: LD_INT 5
15866: PUSH
15867: LD_INT 6
15869: PUSH
15870: LD_INT 7
15872: PUSH
15873: LD_INT 8
15875: PUSH
15876: LD_INT 9
15878: PUSH
15879: LD_INT 10
15881: PUSH
15882: LD_INT 11
15884: PUSH
15885: LD_INT 12
15887: PUSH
15888: LD_INT 13
15890: PUSH
15891: LD_INT 14
15893: PUSH
15894: LD_INT 15
15896: PUSH
15897: LD_INT 16
15899: PUSH
15900: LD_INT 17
15902: PUSH
15903: LD_INT 18
15905: PUSH
15906: LD_INT 19
15908: PUSH
15909: LD_INT 20
15911: PUSH
15912: LD_INT 21
15914: PUSH
15915: LD_INT 22
15917: PUSH
15918: LD_INT 23
15920: PUSH
15921: LD_INT 24
15923: PUSH
15924: LD_INT 25
15926: PUSH
15927: LD_INT 26
15929: PUSH
15930: LD_INT 28
15932: PUSH
15933: LD_INT 30
15935: PUSH
15936: LD_INT 31
15938: PUSH
15939: LD_INT 32
15941: PUSH
15942: LD_INT 34
15944: PUSH
15945: LD_INT 36
15947: PUSH
15948: EMPTY
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: PUSH
15981: LD_INT 101
15983: PUSH
15984: LD_INT 102
15986: PUSH
15987: LD_INT 103
15989: PUSH
15990: LD_INT 104
15992: PUSH
15993: LD_INT 105
15995: PUSH
15996: LD_INT 106
15998: PUSH
15999: LD_INT 107
16001: PUSH
16002: LD_INT 108
16004: PUSH
16005: LD_INT 109
16007: PUSH
16008: LD_INT 110
16010: PUSH
16011: LD_INT 111
16013: PUSH
16014: LD_INT 112
16016: PUSH
16017: LD_INT 114
16019: PUSH
16020: LD_INT 116
16022: PUSH
16023: LD_INT 117
16025: PUSH
16026: LD_INT 118
16028: PUSH
16029: EMPTY
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: PUSH
16047: EMPTY
16048: LIST
16049: LIST
16050: ST_TO_ADDR
16051: GO 17734
16053: LD_INT 12
16055: DOUBLE
16056: EQUAL
16057: IFTRUE 16061
16059: GO 16281
16061: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
16062: LD_ADDR_VAR 0 2
16066: PUSH
16067: LD_INT 1
16069: PUSH
16070: LD_INT 2
16072: PUSH
16073: LD_INT 3
16075: PUSH
16076: LD_INT 4
16078: PUSH
16079: LD_INT 5
16081: PUSH
16082: LD_INT 6
16084: PUSH
16085: LD_INT 7
16087: PUSH
16088: LD_INT 8
16090: PUSH
16091: LD_INT 9
16093: PUSH
16094: LD_INT 10
16096: PUSH
16097: LD_INT 11
16099: PUSH
16100: LD_INT 12
16102: PUSH
16103: LD_INT 13
16105: PUSH
16106: LD_INT 14
16108: PUSH
16109: LD_INT 15
16111: PUSH
16112: LD_INT 16
16114: PUSH
16115: LD_INT 17
16117: PUSH
16118: LD_INT 18
16120: PUSH
16121: LD_INT 19
16123: PUSH
16124: LD_INT 20
16126: PUSH
16127: LD_INT 21
16129: PUSH
16130: LD_INT 22
16132: PUSH
16133: LD_INT 23
16135: PUSH
16136: LD_INT 24
16138: PUSH
16139: LD_INT 25
16141: PUSH
16142: LD_INT 26
16144: PUSH
16145: LD_INT 27
16147: PUSH
16148: LD_INT 28
16150: PUSH
16151: LD_INT 30
16153: PUSH
16154: LD_INT 31
16156: PUSH
16157: LD_INT 32
16159: PUSH
16160: LD_INT 33
16162: PUSH
16163: LD_INT 34
16165: PUSH
16166: LD_INT 36
16168: PUSH
16169: EMPTY
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: PUSH
16205: LD_INT 101
16207: PUSH
16208: LD_INT 102
16210: PUSH
16211: LD_INT 103
16213: PUSH
16214: LD_INT 104
16216: PUSH
16217: LD_INT 105
16219: PUSH
16220: LD_INT 106
16222: PUSH
16223: LD_INT 107
16225: PUSH
16226: LD_INT 108
16228: PUSH
16229: LD_INT 109
16231: PUSH
16232: LD_INT 110
16234: PUSH
16235: LD_INT 111
16237: PUSH
16238: LD_INT 112
16240: PUSH
16241: LD_INT 113
16243: PUSH
16244: LD_INT 114
16246: PUSH
16247: LD_INT 116
16249: PUSH
16250: LD_INT 117
16252: PUSH
16253: LD_INT 118
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: LIST
16268: LIST
16269: LIST
16270: LIST
16271: LIST
16272: LIST
16273: LIST
16274: PUSH
16275: EMPTY
16276: LIST
16277: LIST
16278: ST_TO_ADDR
16279: GO 17734
16281: LD_INT 13
16283: DOUBLE
16284: EQUAL
16285: IFTRUE 16289
16287: GO 16497
16289: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
16290: LD_ADDR_VAR 0 2
16294: PUSH
16295: LD_INT 1
16297: PUSH
16298: LD_INT 2
16300: PUSH
16301: LD_INT 3
16303: PUSH
16304: LD_INT 4
16306: PUSH
16307: LD_INT 5
16309: PUSH
16310: LD_INT 8
16312: PUSH
16313: LD_INT 9
16315: PUSH
16316: LD_INT 10
16318: PUSH
16319: LD_INT 11
16321: PUSH
16322: LD_INT 12
16324: PUSH
16325: LD_INT 14
16327: PUSH
16328: LD_INT 15
16330: PUSH
16331: LD_INT 16
16333: PUSH
16334: LD_INT 17
16336: PUSH
16337: LD_INT 18
16339: PUSH
16340: LD_INT 19
16342: PUSH
16343: LD_INT 20
16345: PUSH
16346: LD_INT 21
16348: PUSH
16349: LD_INT 22
16351: PUSH
16352: LD_INT 23
16354: PUSH
16355: LD_INT 24
16357: PUSH
16358: LD_INT 25
16360: PUSH
16361: LD_INT 26
16363: PUSH
16364: LD_INT 27
16366: PUSH
16367: LD_INT 28
16369: PUSH
16370: LD_INT 30
16372: PUSH
16373: LD_INT 31
16375: PUSH
16376: LD_INT 32
16378: PUSH
16379: LD_INT 33
16381: PUSH
16382: LD_INT 34
16384: PUSH
16385: LD_INT 36
16387: PUSH
16388: EMPTY
16389: LIST
16390: LIST
16391: LIST
16392: LIST
16393: LIST
16394: LIST
16395: LIST
16396: LIST
16397: LIST
16398: LIST
16399: LIST
16400: LIST
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: LIST
16406: LIST
16407: LIST
16408: LIST
16409: LIST
16410: LIST
16411: LIST
16412: LIST
16413: LIST
16414: LIST
16415: LIST
16416: LIST
16417: LIST
16418: LIST
16419: LIST
16420: PUSH
16421: LD_INT 101
16423: PUSH
16424: LD_INT 102
16426: PUSH
16427: LD_INT 103
16429: PUSH
16430: LD_INT 104
16432: PUSH
16433: LD_INT 105
16435: PUSH
16436: LD_INT 106
16438: PUSH
16439: LD_INT 107
16441: PUSH
16442: LD_INT 108
16444: PUSH
16445: LD_INT 109
16447: PUSH
16448: LD_INT 110
16450: PUSH
16451: LD_INT 111
16453: PUSH
16454: LD_INT 112
16456: PUSH
16457: LD_INT 113
16459: PUSH
16460: LD_INT 114
16462: PUSH
16463: LD_INT 116
16465: PUSH
16466: LD_INT 117
16468: PUSH
16469: LD_INT 118
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: LIST
16476: LIST
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: LIST
16489: LIST
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: ST_TO_ADDR
16495: GO 17734
16497: LD_INT 14
16499: DOUBLE
16500: EQUAL
16501: IFTRUE 16505
16503: GO 16729
16505: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
16506: LD_ADDR_VAR 0 2
16510: PUSH
16511: LD_INT 1
16513: PUSH
16514: LD_INT 2
16516: PUSH
16517: LD_INT 3
16519: PUSH
16520: LD_INT 4
16522: PUSH
16523: LD_INT 5
16525: PUSH
16526: LD_INT 6
16528: PUSH
16529: LD_INT 7
16531: PUSH
16532: LD_INT 8
16534: PUSH
16535: LD_INT 9
16537: PUSH
16538: LD_INT 10
16540: PUSH
16541: LD_INT 11
16543: PUSH
16544: LD_INT 12
16546: PUSH
16547: LD_INT 13
16549: PUSH
16550: LD_INT 14
16552: PUSH
16553: LD_INT 15
16555: PUSH
16556: LD_INT 16
16558: PUSH
16559: LD_INT 17
16561: PUSH
16562: LD_INT 18
16564: PUSH
16565: LD_INT 19
16567: PUSH
16568: LD_INT 20
16570: PUSH
16571: LD_INT 21
16573: PUSH
16574: LD_INT 22
16576: PUSH
16577: LD_INT 23
16579: PUSH
16580: LD_INT 24
16582: PUSH
16583: LD_INT 25
16585: PUSH
16586: LD_INT 26
16588: PUSH
16589: LD_INT 27
16591: PUSH
16592: LD_INT 28
16594: PUSH
16595: LD_INT 29
16597: PUSH
16598: LD_INT 30
16600: PUSH
16601: LD_INT 31
16603: PUSH
16604: LD_INT 32
16606: PUSH
16607: LD_INT 33
16609: PUSH
16610: LD_INT 34
16612: PUSH
16613: LD_INT 36
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: LIST
16623: LIST
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: LIST
16632: LIST
16633: LIST
16634: LIST
16635: LIST
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: LIST
16641: LIST
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: LIST
16647: LIST
16648: LIST
16649: LIST
16650: LIST
16651: LIST
16652: PUSH
16653: LD_INT 101
16655: PUSH
16656: LD_INT 102
16658: PUSH
16659: LD_INT 103
16661: PUSH
16662: LD_INT 104
16664: PUSH
16665: LD_INT 105
16667: PUSH
16668: LD_INT 106
16670: PUSH
16671: LD_INT 107
16673: PUSH
16674: LD_INT 108
16676: PUSH
16677: LD_INT 109
16679: PUSH
16680: LD_INT 110
16682: PUSH
16683: LD_INT 111
16685: PUSH
16686: LD_INT 112
16688: PUSH
16689: LD_INT 113
16691: PUSH
16692: LD_INT 114
16694: PUSH
16695: LD_INT 116
16697: PUSH
16698: LD_INT 117
16700: PUSH
16701: LD_INT 118
16703: PUSH
16704: EMPTY
16705: LIST
16706: LIST
16707: LIST
16708: LIST
16709: LIST
16710: LIST
16711: LIST
16712: LIST
16713: LIST
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: LIST
16722: PUSH
16723: EMPTY
16724: LIST
16725: LIST
16726: ST_TO_ADDR
16727: GO 17734
16729: LD_INT 15
16731: DOUBLE
16732: EQUAL
16733: IFTRUE 16737
16735: GO 16961
16737: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
16738: LD_ADDR_VAR 0 2
16742: PUSH
16743: LD_INT 1
16745: PUSH
16746: LD_INT 2
16748: PUSH
16749: LD_INT 3
16751: PUSH
16752: LD_INT 4
16754: PUSH
16755: LD_INT 5
16757: PUSH
16758: LD_INT 6
16760: PUSH
16761: LD_INT 7
16763: PUSH
16764: LD_INT 8
16766: PUSH
16767: LD_INT 9
16769: PUSH
16770: LD_INT 10
16772: PUSH
16773: LD_INT 11
16775: PUSH
16776: LD_INT 12
16778: PUSH
16779: LD_INT 13
16781: PUSH
16782: LD_INT 14
16784: PUSH
16785: LD_INT 15
16787: PUSH
16788: LD_INT 16
16790: PUSH
16791: LD_INT 17
16793: PUSH
16794: LD_INT 18
16796: PUSH
16797: LD_INT 19
16799: PUSH
16800: LD_INT 20
16802: PUSH
16803: LD_INT 21
16805: PUSH
16806: LD_INT 22
16808: PUSH
16809: LD_INT 23
16811: PUSH
16812: LD_INT 24
16814: PUSH
16815: LD_INT 25
16817: PUSH
16818: LD_INT 26
16820: PUSH
16821: LD_INT 27
16823: PUSH
16824: LD_INT 28
16826: PUSH
16827: LD_INT 29
16829: PUSH
16830: LD_INT 30
16832: PUSH
16833: LD_INT 31
16835: PUSH
16836: LD_INT 32
16838: PUSH
16839: LD_INT 33
16841: PUSH
16842: LD_INT 34
16844: PUSH
16845: LD_INT 36
16847: PUSH
16848: EMPTY
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: LIST
16876: LIST
16877: LIST
16878: LIST
16879: LIST
16880: LIST
16881: LIST
16882: LIST
16883: LIST
16884: PUSH
16885: LD_INT 101
16887: PUSH
16888: LD_INT 102
16890: PUSH
16891: LD_INT 103
16893: PUSH
16894: LD_INT 104
16896: PUSH
16897: LD_INT 105
16899: PUSH
16900: LD_INT 106
16902: PUSH
16903: LD_INT 107
16905: PUSH
16906: LD_INT 108
16908: PUSH
16909: LD_INT 109
16911: PUSH
16912: LD_INT 110
16914: PUSH
16915: LD_INT 111
16917: PUSH
16918: LD_INT 112
16920: PUSH
16921: LD_INT 113
16923: PUSH
16924: LD_INT 114
16926: PUSH
16927: LD_INT 116
16929: PUSH
16930: LD_INT 117
16932: PUSH
16933: LD_INT 118
16935: PUSH
16936: EMPTY
16937: LIST
16938: LIST
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: PUSH
16955: EMPTY
16956: LIST
16957: LIST
16958: ST_TO_ADDR
16959: GO 17734
16961: LD_INT 16
16963: DOUBLE
16964: EQUAL
16965: IFTRUE 16969
16967: GO 17105
16969: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
16970: LD_ADDR_VAR 0 2
16974: PUSH
16975: LD_INT 2
16977: PUSH
16978: LD_INT 4
16980: PUSH
16981: LD_INT 5
16983: PUSH
16984: LD_INT 7
16986: PUSH
16987: LD_INT 11
16989: PUSH
16990: LD_INT 12
16992: PUSH
16993: LD_INT 15
16995: PUSH
16996: LD_INT 16
16998: PUSH
16999: LD_INT 20
17001: PUSH
17002: LD_INT 21
17004: PUSH
17005: LD_INT 22
17007: PUSH
17008: LD_INT 23
17010: PUSH
17011: LD_INT 25
17013: PUSH
17014: LD_INT 26
17016: PUSH
17017: LD_INT 30
17019: PUSH
17020: LD_INT 31
17022: PUSH
17023: LD_INT 32
17025: PUSH
17026: LD_INT 33
17028: PUSH
17029: LD_INT 34
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: PUSH
17053: LD_INT 101
17055: PUSH
17056: LD_INT 102
17058: PUSH
17059: LD_INT 103
17061: PUSH
17062: LD_INT 106
17064: PUSH
17065: LD_INT 108
17067: PUSH
17068: LD_INT 112
17070: PUSH
17071: LD_INT 113
17073: PUSH
17074: LD_INT 114
17076: PUSH
17077: LD_INT 116
17079: PUSH
17080: LD_INT 117
17082: PUSH
17083: LD_INT 118
17085: PUSH
17086: EMPTY
17087: LIST
17088: LIST
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: PUSH
17099: EMPTY
17100: LIST
17101: LIST
17102: ST_TO_ADDR
17103: GO 17734
17105: LD_INT 17
17107: DOUBLE
17108: EQUAL
17109: IFTRUE 17113
17111: GO 17337
17113: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
17114: LD_ADDR_VAR 0 2
17118: PUSH
17119: LD_INT 1
17121: PUSH
17122: LD_INT 2
17124: PUSH
17125: LD_INT 3
17127: PUSH
17128: LD_INT 4
17130: PUSH
17131: LD_INT 5
17133: PUSH
17134: LD_INT 6
17136: PUSH
17137: LD_INT 7
17139: PUSH
17140: LD_INT 8
17142: PUSH
17143: LD_INT 9
17145: PUSH
17146: LD_INT 10
17148: PUSH
17149: LD_INT 11
17151: PUSH
17152: LD_INT 12
17154: PUSH
17155: LD_INT 13
17157: PUSH
17158: LD_INT 14
17160: PUSH
17161: LD_INT 15
17163: PUSH
17164: LD_INT 16
17166: PUSH
17167: LD_INT 17
17169: PUSH
17170: LD_INT 18
17172: PUSH
17173: LD_INT 19
17175: PUSH
17176: LD_INT 20
17178: PUSH
17179: LD_INT 21
17181: PUSH
17182: LD_INT 22
17184: PUSH
17185: LD_INT 23
17187: PUSH
17188: LD_INT 24
17190: PUSH
17191: LD_INT 25
17193: PUSH
17194: LD_INT 26
17196: PUSH
17197: LD_INT 27
17199: PUSH
17200: LD_INT 28
17202: PUSH
17203: LD_INT 29
17205: PUSH
17206: LD_INT 30
17208: PUSH
17209: LD_INT 31
17211: PUSH
17212: LD_INT 32
17214: PUSH
17215: LD_INT 33
17217: PUSH
17218: LD_INT 34
17220: PUSH
17221: LD_INT 36
17223: PUSH
17224: EMPTY
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: PUSH
17261: LD_INT 101
17263: PUSH
17264: LD_INT 102
17266: PUSH
17267: LD_INT 103
17269: PUSH
17270: LD_INT 104
17272: PUSH
17273: LD_INT 105
17275: PUSH
17276: LD_INT 106
17278: PUSH
17279: LD_INT 107
17281: PUSH
17282: LD_INT 108
17284: PUSH
17285: LD_INT 109
17287: PUSH
17288: LD_INT 110
17290: PUSH
17291: LD_INT 111
17293: PUSH
17294: LD_INT 112
17296: PUSH
17297: LD_INT 113
17299: PUSH
17300: LD_INT 114
17302: PUSH
17303: LD_INT 116
17305: PUSH
17306: LD_INT 117
17308: PUSH
17309: LD_INT 118
17311: PUSH
17312: EMPTY
17313: LIST
17314: LIST
17315: LIST
17316: LIST
17317: LIST
17318: LIST
17319: LIST
17320: LIST
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: PUSH
17331: EMPTY
17332: LIST
17333: LIST
17334: ST_TO_ADDR
17335: GO 17734
17337: LD_INT 18
17339: DOUBLE
17340: EQUAL
17341: IFTRUE 17345
17343: GO 17493
17345: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
17346: LD_ADDR_VAR 0 2
17350: PUSH
17351: LD_INT 2
17353: PUSH
17354: LD_INT 4
17356: PUSH
17357: LD_INT 5
17359: PUSH
17360: LD_INT 7
17362: PUSH
17363: LD_INT 11
17365: PUSH
17366: LD_INT 12
17368: PUSH
17369: LD_INT 15
17371: PUSH
17372: LD_INT 16
17374: PUSH
17375: LD_INT 20
17377: PUSH
17378: LD_INT 21
17380: PUSH
17381: LD_INT 22
17383: PUSH
17384: LD_INT 23
17386: PUSH
17387: LD_INT 25
17389: PUSH
17390: LD_INT 26
17392: PUSH
17393: LD_INT 30
17395: PUSH
17396: LD_INT 31
17398: PUSH
17399: LD_INT 32
17401: PUSH
17402: LD_INT 33
17404: PUSH
17405: LD_INT 34
17407: PUSH
17408: LD_INT 35
17410: PUSH
17411: LD_INT 36
17413: PUSH
17414: EMPTY
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: PUSH
17437: LD_INT 101
17439: PUSH
17440: LD_INT 102
17442: PUSH
17443: LD_INT 103
17445: PUSH
17446: LD_INT 106
17448: PUSH
17449: LD_INT 108
17451: PUSH
17452: LD_INT 112
17454: PUSH
17455: LD_INT 113
17457: PUSH
17458: LD_INT 114
17460: PUSH
17461: LD_INT 115
17463: PUSH
17464: LD_INT 116
17466: PUSH
17467: LD_INT 117
17469: PUSH
17470: LD_INT 118
17472: PUSH
17473: EMPTY
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: PUSH
17487: EMPTY
17488: LIST
17489: LIST
17490: ST_TO_ADDR
17491: GO 17734
17493: LD_INT 19
17495: DOUBLE
17496: EQUAL
17497: IFTRUE 17501
17499: GO 17733
17501: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
17502: LD_ADDR_VAR 0 2
17506: PUSH
17507: LD_INT 1
17509: PUSH
17510: LD_INT 2
17512: PUSH
17513: LD_INT 3
17515: PUSH
17516: LD_INT 4
17518: PUSH
17519: LD_INT 5
17521: PUSH
17522: LD_INT 6
17524: PUSH
17525: LD_INT 7
17527: PUSH
17528: LD_INT 8
17530: PUSH
17531: LD_INT 9
17533: PUSH
17534: LD_INT 10
17536: PUSH
17537: LD_INT 11
17539: PUSH
17540: LD_INT 12
17542: PUSH
17543: LD_INT 13
17545: PUSH
17546: LD_INT 14
17548: PUSH
17549: LD_INT 15
17551: PUSH
17552: LD_INT 16
17554: PUSH
17555: LD_INT 17
17557: PUSH
17558: LD_INT 18
17560: PUSH
17561: LD_INT 19
17563: PUSH
17564: LD_INT 20
17566: PUSH
17567: LD_INT 21
17569: PUSH
17570: LD_INT 22
17572: PUSH
17573: LD_INT 23
17575: PUSH
17576: LD_INT 24
17578: PUSH
17579: LD_INT 25
17581: PUSH
17582: LD_INT 26
17584: PUSH
17585: LD_INT 27
17587: PUSH
17588: LD_INT 28
17590: PUSH
17591: LD_INT 29
17593: PUSH
17594: LD_INT 30
17596: PUSH
17597: LD_INT 31
17599: PUSH
17600: LD_INT 32
17602: PUSH
17603: LD_INT 33
17605: PUSH
17606: LD_INT 34
17608: PUSH
17609: LD_INT 35
17611: PUSH
17612: LD_INT 36
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: LIST
17625: LIST
17626: LIST
17627: LIST
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: LIST
17640: LIST
17641: LIST
17642: LIST
17643: LIST
17644: LIST
17645: LIST
17646: LIST
17647: LIST
17648: LIST
17649: LIST
17650: LIST
17651: LIST
17652: PUSH
17653: LD_INT 101
17655: PUSH
17656: LD_INT 102
17658: PUSH
17659: LD_INT 103
17661: PUSH
17662: LD_INT 104
17664: PUSH
17665: LD_INT 105
17667: PUSH
17668: LD_INT 106
17670: PUSH
17671: LD_INT 107
17673: PUSH
17674: LD_INT 108
17676: PUSH
17677: LD_INT 109
17679: PUSH
17680: LD_INT 110
17682: PUSH
17683: LD_INT 111
17685: PUSH
17686: LD_INT 112
17688: PUSH
17689: LD_INT 113
17691: PUSH
17692: LD_INT 114
17694: PUSH
17695: LD_INT 115
17697: PUSH
17698: LD_INT 116
17700: PUSH
17701: LD_INT 117
17703: PUSH
17704: LD_INT 118
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: LIST
17711: LIST
17712: LIST
17713: LIST
17714: LIST
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: ST_TO_ADDR
17731: GO 17734
17733: POP
// end else
17734: GO 17965
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
17736: LD_ADDR_VAR 0 2
17740: PUSH
17741: LD_INT 1
17743: PUSH
17744: LD_INT 2
17746: PUSH
17747: LD_INT 3
17749: PUSH
17750: LD_INT 4
17752: PUSH
17753: LD_INT 5
17755: PUSH
17756: LD_INT 6
17758: PUSH
17759: LD_INT 7
17761: PUSH
17762: LD_INT 8
17764: PUSH
17765: LD_INT 9
17767: PUSH
17768: LD_INT 10
17770: PUSH
17771: LD_INT 11
17773: PUSH
17774: LD_INT 12
17776: PUSH
17777: LD_INT 13
17779: PUSH
17780: LD_INT 14
17782: PUSH
17783: LD_INT 15
17785: PUSH
17786: LD_INT 16
17788: PUSH
17789: LD_INT 17
17791: PUSH
17792: LD_INT 18
17794: PUSH
17795: LD_INT 19
17797: PUSH
17798: LD_INT 20
17800: PUSH
17801: LD_INT 21
17803: PUSH
17804: LD_INT 22
17806: PUSH
17807: LD_INT 23
17809: PUSH
17810: LD_INT 24
17812: PUSH
17813: LD_INT 25
17815: PUSH
17816: LD_INT 26
17818: PUSH
17819: LD_INT 27
17821: PUSH
17822: LD_INT 28
17824: PUSH
17825: LD_INT 29
17827: PUSH
17828: LD_INT 30
17830: PUSH
17831: LD_INT 31
17833: PUSH
17834: LD_INT 32
17836: PUSH
17837: LD_INT 33
17839: PUSH
17840: LD_INT 34
17842: PUSH
17843: LD_INT 35
17845: PUSH
17846: LD_INT 36
17848: PUSH
17849: EMPTY
17850: LIST
17851: LIST
17852: LIST
17853: LIST
17854: LIST
17855: LIST
17856: LIST
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: LIST
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: LIST
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: LIST
17886: PUSH
17887: LD_INT 101
17889: PUSH
17890: LD_INT 102
17892: PUSH
17893: LD_INT 103
17895: PUSH
17896: LD_INT 104
17898: PUSH
17899: LD_INT 105
17901: PUSH
17902: LD_INT 106
17904: PUSH
17905: LD_INT 107
17907: PUSH
17908: LD_INT 108
17910: PUSH
17911: LD_INT 109
17913: PUSH
17914: LD_INT 110
17916: PUSH
17917: LD_INT 111
17919: PUSH
17920: LD_INT 112
17922: PUSH
17923: LD_INT 113
17925: PUSH
17926: LD_INT 114
17928: PUSH
17929: LD_INT 115
17931: PUSH
17932: LD_INT 116
17934: PUSH
17935: LD_INT 117
17937: PUSH
17938: LD_INT 118
17940: PUSH
17941: EMPTY
17942: LIST
17943: LIST
17944: LIST
17945: LIST
17946: LIST
17947: LIST
17948: LIST
17949: LIST
17950: LIST
17951: LIST
17952: LIST
17953: LIST
17954: LIST
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: ST_TO_ADDR
// if result then
17965: LD_VAR 0 2
17969: IFFALSE 18755
// begin normal :=  ;
17971: LD_ADDR_VAR 0 5
17975: PUSH
17976: LD_STRING 
17978: ST_TO_ADDR
// hardcore :=  ;
17979: LD_ADDR_VAR 0 6
17983: PUSH
17984: LD_STRING 
17986: ST_TO_ADDR
// active :=  ;
17987: LD_ADDR_VAR 0 7
17991: PUSH
17992: LD_STRING 
17994: ST_TO_ADDR
// for i = 1 to normalCounter do
17995: LD_ADDR_VAR 0 8
17999: PUSH
18000: DOUBLE
18001: LD_INT 1
18003: DEC
18004: ST_TO_ADDR
18005: LD_EXP 52
18009: PUSH
18010: FOR_TO
18011: IFFALSE 18112
// begin tmp := 0 ;
18013: LD_ADDR_VAR 0 3
18017: PUSH
18018: LD_STRING 0
18020: ST_TO_ADDR
// if result [ 1 ] then
18021: LD_VAR 0 2
18025: PUSH
18026: LD_INT 1
18028: ARRAY
18029: IFFALSE 18094
// if result [ 1 ] [ 1 ] = i then
18031: LD_VAR 0 2
18035: PUSH
18036: LD_INT 1
18038: ARRAY
18039: PUSH
18040: LD_INT 1
18042: ARRAY
18043: PUSH
18044: LD_VAR 0 8
18048: EQUAL
18049: IFFALSE 18094
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
18051: LD_ADDR_VAR 0 2
18055: PUSH
18056: LD_VAR 0 2
18060: PPUSH
18061: LD_INT 1
18063: PPUSH
18064: LD_VAR 0 2
18068: PUSH
18069: LD_INT 1
18071: ARRAY
18072: PPUSH
18073: LD_INT 1
18075: PPUSH
18076: CALL_OW 3
18080: PPUSH
18081: CALL_OW 1
18085: ST_TO_ADDR
// tmp := 1 ;
18086: LD_ADDR_VAR 0 3
18090: PUSH
18091: LD_STRING 1
18093: ST_TO_ADDR
// end ; normal := normal & tmp ;
18094: LD_ADDR_VAR 0 5
18098: PUSH
18099: LD_VAR 0 5
18103: PUSH
18104: LD_VAR 0 3
18108: STR
18109: ST_TO_ADDR
// end ;
18110: GO 18010
18112: POP
18113: POP
// for i = 1 to hardcoreCounter do
18114: LD_ADDR_VAR 0 8
18118: PUSH
18119: DOUBLE
18120: LD_INT 1
18122: DEC
18123: ST_TO_ADDR
18124: LD_EXP 53
18128: PUSH
18129: FOR_TO
18130: IFFALSE 18235
// begin tmp := 0 ;
18132: LD_ADDR_VAR 0 3
18136: PUSH
18137: LD_STRING 0
18139: ST_TO_ADDR
// if result [ 2 ] then
18140: LD_VAR 0 2
18144: PUSH
18145: LD_INT 2
18147: ARRAY
18148: IFFALSE 18217
// if result [ 2 ] [ 1 ] = 100 + i then
18150: LD_VAR 0 2
18154: PUSH
18155: LD_INT 2
18157: ARRAY
18158: PUSH
18159: LD_INT 1
18161: ARRAY
18162: PUSH
18163: LD_INT 100
18165: PUSH
18166: LD_VAR 0 8
18170: PLUS
18171: EQUAL
18172: IFFALSE 18217
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
18174: LD_ADDR_VAR 0 2
18178: PUSH
18179: LD_VAR 0 2
18183: PPUSH
18184: LD_INT 2
18186: PPUSH
18187: LD_VAR 0 2
18191: PUSH
18192: LD_INT 2
18194: ARRAY
18195: PPUSH
18196: LD_INT 1
18198: PPUSH
18199: CALL_OW 3
18203: PPUSH
18204: CALL_OW 1
18208: ST_TO_ADDR
// tmp := 1 ;
18209: LD_ADDR_VAR 0 3
18213: PUSH
18214: LD_STRING 1
18216: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
18217: LD_ADDR_VAR 0 6
18221: PUSH
18222: LD_VAR 0 6
18226: PUSH
18227: LD_VAR 0 3
18231: STR
18232: ST_TO_ADDR
// end ;
18233: GO 18129
18235: POP
18236: POP
// if isGameLoad then
18237: LD_VAR 0 1
18241: IFFALSE 18716
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
18243: LD_ADDR_VAR 0 4
18247: PUSH
18248: LD_EXP 56
18252: PUSH
18253: LD_EXP 55
18257: PUSH
18258: LD_EXP 57
18262: PUSH
18263: LD_EXP 54
18267: PUSH
18268: LD_EXP 58
18272: PUSH
18273: LD_EXP 59
18277: PUSH
18278: LD_EXP 60
18282: PUSH
18283: LD_EXP 61
18287: PUSH
18288: LD_EXP 62
18292: PUSH
18293: LD_EXP 63
18297: PUSH
18298: LD_EXP 64
18302: PUSH
18303: LD_EXP 65
18307: PUSH
18308: LD_EXP 66
18312: PUSH
18313: LD_EXP 67
18317: PUSH
18318: LD_EXP 75
18322: PUSH
18323: LD_EXP 76
18327: PUSH
18328: LD_EXP 77
18332: PUSH
18333: LD_EXP 78
18337: PUSH
18338: LD_EXP 80
18342: PUSH
18343: LD_EXP 81
18347: PUSH
18348: LD_EXP 82
18352: PUSH
18353: LD_EXP 85
18357: PUSH
18358: LD_EXP 87
18362: PUSH
18363: LD_EXP 88
18367: PUSH
18368: LD_EXP 89
18372: PUSH
18373: LD_EXP 91
18377: PUSH
18378: LD_EXP 92
18382: PUSH
18383: LD_EXP 95
18387: PUSH
18388: LD_EXP 96
18392: PUSH
18393: LD_EXP 97
18397: PUSH
18398: LD_EXP 98
18402: PUSH
18403: LD_EXP 99
18407: PUSH
18408: LD_EXP 100
18412: PUSH
18413: LD_EXP 101
18417: PUSH
18418: LD_EXP 102
18422: PUSH
18423: LD_EXP 103
18427: PUSH
18428: LD_EXP 68
18432: PUSH
18433: LD_EXP 69
18437: PUSH
18438: LD_EXP 72
18442: PUSH
18443: LD_EXP 73
18447: PUSH
18448: LD_EXP 74
18452: PUSH
18453: LD_EXP 70
18457: PUSH
18458: LD_EXP 71
18462: PUSH
18463: LD_EXP 79
18467: PUSH
18468: LD_EXP 83
18472: PUSH
18473: LD_EXP 84
18477: PUSH
18478: LD_EXP 86
18482: PUSH
18483: LD_EXP 90
18487: PUSH
18488: LD_EXP 93
18492: PUSH
18493: LD_EXP 94
18497: PUSH
18498: LD_EXP 104
18502: PUSH
18503: LD_EXP 105
18507: PUSH
18508: LD_EXP 106
18512: PUSH
18513: LD_EXP 107
18517: PUSH
18518: EMPTY
18519: LIST
18520: LIST
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: LIST
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: LIST
18537: LIST
18538: LIST
18539: LIST
18540: LIST
18541: LIST
18542: LIST
18543: LIST
18544: LIST
18545: LIST
18546: LIST
18547: LIST
18548: LIST
18549: LIST
18550: LIST
18551: LIST
18552: LIST
18553: LIST
18554: LIST
18555: LIST
18556: LIST
18557: LIST
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: ST_TO_ADDR
// tmp :=  ;
18574: LD_ADDR_VAR 0 3
18578: PUSH
18579: LD_STRING 
18581: ST_TO_ADDR
// for i = 1 to normalCounter do
18582: LD_ADDR_VAR 0 8
18586: PUSH
18587: DOUBLE
18588: LD_INT 1
18590: DEC
18591: ST_TO_ADDR
18592: LD_EXP 52
18596: PUSH
18597: FOR_TO
18598: IFFALSE 18634
// begin if flags [ i ] then
18600: LD_VAR 0 4
18604: PUSH
18605: LD_VAR 0 8
18609: ARRAY
18610: IFFALSE 18632
// tmp := tmp & i & ; ;
18612: LD_ADDR_VAR 0 3
18616: PUSH
18617: LD_VAR 0 3
18621: PUSH
18622: LD_VAR 0 8
18626: STR
18627: PUSH
18628: LD_STRING ;
18630: STR
18631: ST_TO_ADDR
// end ;
18632: GO 18597
18634: POP
18635: POP
// for i = 1 to hardcoreCounter do
18636: LD_ADDR_VAR 0 8
18640: PUSH
18641: DOUBLE
18642: LD_INT 1
18644: DEC
18645: ST_TO_ADDR
18646: LD_EXP 53
18650: PUSH
18651: FOR_TO
18652: IFFALSE 18698
// begin if flags [ normalCounter + i ] then
18654: LD_VAR 0 4
18658: PUSH
18659: LD_EXP 52
18663: PUSH
18664: LD_VAR 0 8
18668: PLUS
18669: ARRAY
18670: IFFALSE 18696
// tmp := tmp & ( 100 + i ) & ; ;
18672: LD_ADDR_VAR 0 3
18676: PUSH
18677: LD_VAR 0 3
18681: PUSH
18682: LD_INT 100
18684: PUSH
18685: LD_VAR 0 8
18689: PLUS
18690: STR
18691: PUSH
18692: LD_STRING ;
18694: STR
18695: ST_TO_ADDR
// end ;
18696: GO 18651
18698: POP
18699: POP
// if tmp then
18700: LD_VAR 0 3
18704: IFFALSE 18716
// active := tmp ;
18706: LD_ADDR_VAR 0 7
18710: PUSH
18711: LD_VAR 0 3
18715: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
18716: LD_STRING getStreamItemsFromMission("
18718: PUSH
18719: LD_VAR 0 5
18723: STR
18724: PUSH
18725: LD_STRING ","
18727: STR
18728: PUSH
18729: LD_VAR 0 6
18733: STR
18734: PUSH
18735: LD_STRING ","
18737: STR
18738: PUSH
18739: LD_VAR 0 7
18743: STR
18744: PUSH
18745: LD_STRING ")
18747: STR
18748: PPUSH
18749: CALL_OW 559
// end else
18753: GO 18762
// ToLua ( getStreamItemsFromMission("","","") ) ;
18755: LD_STRING getStreamItemsFromMission("","","")
18757: PPUSH
18758: CALL_OW 559
// end ;
18762: LD_VAR 0 2
18766: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
18767: LD_EXP 51
18771: PUSH
18772: LD_EXP 56
18776: AND
18777: IFFALSE 18901
18779: GO 18781
18781: DISABLE
18782: LD_INT 0
18784: PPUSH
18785: PPUSH
// begin enable ;
18786: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
18787: LD_ADDR_VAR 0 2
18791: PUSH
18792: LD_INT 22
18794: PUSH
18795: LD_OWVAR 2
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: PUSH
18804: LD_INT 2
18806: PUSH
18807: LD_INT 34
18809: PUSH
18810: LD_INT 7
18812: PUSH
18813: EMPTY
18814: LIST
18815: LIST
18816: PUSH
18817: LD_INT 34
18819: PUSH
18820: LD_INT 45
18822: PUSH
18823: EMPTY
18824: LIST
18825: LIST
18826: PUSH
18827: LD_INT 34
18829: PUSH
18830: LD_INT 28
18832: PUSH
18833: EMPTY
18834: LIST
18835: LIST
18836: PUSH
18837: LD_INT 34
18839: PUSH
18840: LD_INT 47
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: PPUSH
18858: CALL_OW 69
18862: ST_TO_ADDR
// if not tmp then
18863: LD_VAR 0 2
18867: NOT
18868: IFFALSE 18872
// exit ;
18870: GO 18901
// for i in tmp do
18872: LD_ADDR_VAR 0 1
18876: PUSH
18877: LD_VAR 0 2
18881: PUSH
18882: FOR_IN
18883: IFFALSE 18899
// begin SetLives ( i , 0 ) ;
18885: LD_VAR 0 1
18889: PPUSH
18890: LD_INT 0
18892: PPUSH
18893: CALL_OW 234
// end ;
18897: GO 18882
18899: POP
18900: POP
// end ;
18901: PPOPN 2
18903: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
18904: LD_EXP 51
18908: PUSH
18909: LD_EXP 57
18913: AND
18914: IFFALSE 18998
18916: GO 18918
18918: DISABLE
18919: LD_INT 0
18921: PPUSH
18922: PPUSH
// begin enable ;
18923: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
18924: LD_ADDR_VAR 0 2
18928: PUSH
18929: LD_INT 22
18931: PUSH
18932: LD_OWVAR 2
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: PUSH
18941: LD_INT 32
18943: PUSH
18944: LD_INT 3
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PPUSH
18955: CALL_OW 69
18959: ST_TO_ADDR
// if not tmp then
18960: LD_VAR 0 2
18964: NOT
18965: IFFALSE 18969
// exit ;
18967: GO 18998
// for i in tmp do
18969: LD_ADDR_VAR 0 1
18973: PUSH
18974: LD_VAR 0 2
18978: PUSH
18979: FOR_IN
18980: IFFALSE 18996
// begin SetLives ( i , 0 ) ;
18982: LD_VAR 0 1
18986: PPUSH
18987: LD_INT 0
18989: PPUSH
18990: CALL_OW 234
// end ;
18994: GO 18979
18996: POP
18997: POP
// end ;
18998: PPOPN 2
19000: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
19001: LD_EXP 51
19005: PUSH
19006: LD_EXP 54
19010: AND
19011: IFFALSE 19104
19013: GO 19015
19015: DISABLE
19016: LD_INT 0
19018: PPUSH
// begin enable ;
19019: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
19020: LD_ADDR_VAR 0 1
19024: PUSH
19025: LD_INT 22
19027: PUSH
19028: LD_OWVAR 2
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: PUSH
19037: LD_INT 2
19039: PUSH
19040: LD_INT 25
19042: PUSH
19043: LD_INT 5
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PUSH
19050: LD_INT 25
19052: PUSH
19053: LD_INT 9
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: PUSH
19060: LD_INT 25
19062: PUSH
19063: LD_INT 8
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: PUSH
19070: EMPTY
19071: LIST
19072: LIST
19073: LIST
19074: LIST
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PPUSH
19080: CALL_OW 69
19084: PUSH
19085: FOR_IN
19086: IFFALSE 19102
// begin SetClass ( i , 1 ) ;
19088: LD_VAR 0 1
19092: PPUSH
19093: LD_INT 1
19095: PPUSH
19096: CALL_OW 336
// end ;
19100: GO 19085
19102: POP
19103: POP
// end ;
19104: PPOPN 1
19106: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
19107: LD_EXP 51
19111: PUSH
19112: LD_EXP 55
19116: AND
19117: PUSH
19118: LD_OWVAR 65
19122: PUSH
19123: LD_INT 7
19125: LESS
19126: AND
19127: IFFALSE 19141
19129: GO 19131
19131: DISABLE
// begin enable ;
19132: ENABLE
// game_speed := 7 ;
19133: LD_ADDR_OWVAR 65
19137: PUSH
19138: LD_INT 7
19140: ST_TO_ADDR
// end ;
19141: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
19142: LD_EXP 51
19146: PUSH
19147: LD_EXP 58
19151: AND
19152: IFFALSE 19354
19154: GO 19156
19156: DISABLE
19157: LD_INT 0
19159: PPUSH
19160: PPUSH
19161: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19162: LD_ADDR_VAR 0 3
19166: PUSH
19167: LD_INT 81
19169: PUSH
19170: LD_OWVAR 2
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: PUSH
19179: LD_INT 21
19181: PUSH
19182: LD_INT 1
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: PUSH
19189: EMPTY
19190: LIST
19191: LIST
19192: PPUSH
19193: CALL_OW 69
19197: ST_TO_ADDR
// if not tmp then
19198: LD_VAR 0 3
19202: NOT
19203: IFFALSE 19207
// exit ;
19205: GO 19354
// if tmp > 5 then
19207: LD_VAR 0 3
19211: PUSH
19212: LD_INT 5
19214: GREATER
19215: IFFALSE 19227
// k := 5 else
19217: LD_ADDR_VAR 0 2
19221: PUSH
19222: LD_INT 5
19224: ST_TO_ADDR
19225: GO 19237
// k := tmp ;
19227: LD_ADDR_VAR 0 2
19231: PUSH
19232: LD_VAR 0 3
19236: ST_TO_ADDR
// for i := 1 to k do
19237: LD_ADDR_VAR 0 1
19241: PUSH
19242: DOUBLE
19243: LD_INT 1
19245: DEC
19246: ST_TO_ADDR
19247: LD_VAR 0 2
19251: PUSH
19252: FOR_TO
19253: IFFALSE 19352
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
19255: LD_VAR 0 3
19259: PUSH
19260: LD_VAR 0 1
19264: ARRAY
19265: PPUSH
19266: LD_VAR 0 1
19270: PUSH
19271: LD_INT 4
19273: MOD
19274: PUSH
19275: LD_INT 1
19277: PLUS
19278: PPUSH
19279: CALL_OW 259
19283: PUSH
19284: LD_INT 10
19286: LESS
19287: IFFALSE 19350
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
19289: LD_VAR 0 3
19293: PUSH
19294: LD_VAR 0 1
19298: ARRAY
19299: PPUSH
19300: LD_VAR 0 1
19304: PUSH
19305: LD_INT 4
19307: MOD
19308: PUSH
19309: LD_INT 1
19311: PLUS
19312: PPUSH
19313: LD_VAR 0 3
19317: PUSH
19318: LD_VAR 0 1
19322: ARRAY
19323: PPUSH
19324: LD_VAR 0 1
19328: PUSH
19329: LD_INT 4
19331: MOD
19332: PUSH
19333: LD_INT 1
19335: PLUS
19336: PPUSH
19337: CALL_OW 259
19341: PUSH
19342: LD_INT 1
19344: PLUS
19345: PPUSH
19346: CALL_OW 237
19350: GO 19252
19352: POP
19353: POP
// end ;
19354: PPOPN 3
19356: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
19357: LD_EXP 51
19361: PUSH
19362: LD_EXP 59
19366: AND
19367: IFFALSE 19387
19369: GO 19371
19371: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
19372: LD_INT 4
19374: PPUSH
19375: LD_OWVAR 2
19379: PPUSH
19380: LD_INT 0
19382: PPUSH
19383: CALL_OW 324
19387: END
// every 0 0$1 trigger StreamModeActive and sShovel do
19388: LD_EXP 51
19392: PUSH
19393: LD_EXP 88
19397: AND
19398: IFFALSE 19418
19400: GO 19402
19402: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
19403: LD_INT 19
19405: PPUSH
19406: LD_OWVAR 2
19410: PPUSH
19411: LD_INT 0
19413: PPUSH
19414: CALL_OW 324
19418: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
19419: LD_EXP 51
19423: PUSH
19424: LD_EXP 60
19428: AND
19429: IFFALSE 19531
19431: GO 19433
19433: DISABLE
19434: LD_INT 0
19436: PPUSH
19437: PPUSH
// begin enable ;
19438: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
19439: LD_ADDR_VAR 0 2
19443: PUSH
19444: LD_INT 22
19446: PUSH
19447: LD_OWVAR 2
19451: PUSH
19452: EMPTY
19453: LIST
19454: LIST
19455: PUSH
19456: LD_INT 2
19458: PUSH
19459: LD_INT 34
19461: PUSH
19462: LD_INT 11
19464: PUSH
19465: EMPTY
19466: LIST
19467: LIST
19468: PUSH
19469: LD_INT 34
19471: PUSH
19472: LD_INT 30
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: PUSH
19479: EMPTY
19480: LIST
19481: LIST
19482: LIST
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PPUSH
19488: CALL_OW 69
19492: ST_TO_ADDR
// if not tmp then
19493: LD_VAR 0 2
19497: NOT
19498: IFFALSE 19502
// exit ;
19500: GO 19531
// for i in tmp do
19502: LD_ADDR_VAR 0 1
19506: PUSH
19507: LD_VAR 0 2
19511: PUSH
19512: FOR_IN
19513: IFFALSE 19529
// begin SetLives ( i , 0 ) ;
19515: LD_VAR 0 1
19519: PPUSH
19520: LD_INT 0
19522: PPUSH
19523: CALL_OW 234
// end ;
19527: GO 19512
19529: POP
19530: POP
// end ;
19531: PPOPN 2
19533: END
// every 0 0$1 trigger StreamModeActive and sBunker do
19534: LD_EXP 51
19538: PUSH
19539: LD_EXP 61
19543: AND
19544: IFFALSE 19564
19546: GO 19548
19548: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
19549: LD_INT 32
19551: PPUSH
19552: LD_OWVAR 2
19556: PPUSH
19557: LD_INT 0
19559: PPUSH
19560: CALL_OW 324
19564: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
19565: LD_EXP 51
19569: PUSH
19570: LD_EXP 62
19574: AND
19575: IFFALSE 19756
19577: GO 19579
19579: DISABLE
19580: LD_INT 0
19582: PPUSH
19583: PPUSH
19584: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
19585: LD_ADDR_VAR 0 2
19589: PUSH
19590: LD_INT 22
19592: PUSH
19593: LD_OWVAR 2
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: PUSH
19602: LD_INT 33
19604: PUSH
19605: LD_INT 3
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: PPUSH
19616: CALL_OW 69
19620: ST_TO_ADDR
// if not tmp then
19621: LD_VAR 0 2
19625: NOT
19626: IFFALSE 19630
// exit ;
19628: GO 19756
// side := 0 ;
19630: LD_ADDR_VAR 0 3
19634: PUSH
19635: LD_INT 0
19637: ST_TO_ADDR
// for i := 1 to 8 do
19638: LD_ADDR_VAR 0 1
19642: PUSH
19643: DOUBLE
19644: LD_INT 1
19646: DEC
19647: ST_TO_ADDR
19648: LD_INT 8
19650: PUSH
19651: FOR_TO
19652: IFFALSE 19700
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
19654: LD_OWVAR 2
19658: PUSH
19659: LD_VAR 0 1
19663: NONEQUAL
19664: PUSH
19665: LD_OWVAR 2
19669: PPUSH
19670: LD_VAR 0 1
19674: PPUSH
19675: CALL_OW 81
19679: PUSH
19680: LD_INT 2
19682: EQUAL
19683: AND
19684: IFFALSE 19698
// begin side := i ;
19686: LD_ADDR_VAR 0 3
19690: PUSH
19691: LD_VAR 0 1
19695: ST_TO_ADDR
// break ;
19696: GO 19700
// end ;
19698: GO 19651
19700: POP
19701: POP
// if not side then
19702: LD_VAR 0 3
19706: NOT
19707: IFFALSE 19711
// exit ;
19709: GO 19756
// for i := 1 to tmp do
19711: LD_ADDR_VAR 0 1
19715: PUSH
19716: DOUBLE
19717: LD_INT 1
19719: DEC
19720: ST_TO_ADDR
19721: LD_VAR 0 2
19725: PUSH
19726: FOR_TO
19727: IFFALSE 19754
// if Prob ( 60 ) then
19729: LD_INT 60
19731: PPUSH
19732: CALL_OW 13
19736: IFFALSE 19752
// SetSide ( i , side ) ;
19738: LD_VAR 0 1
19742: PPUSH
19743: LD_VAR 0 3
19747: PPUSH
19748: CALL_OW 235
19752: GO 19726
19754: POP
19755: POP
// end ;
19756: PPOPN 3
19758: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
19759: LD_EXP 51
19763: PUSH
19764: LD_EXP 64
19768: AND
19769: IFFALSE 19888
19771: GO 19773
19773: DISABLE
19774: LD_INT 0
19776: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
19777: LD_ADDR_VAR 0 1
19781: PUSH
19782: LD_INT 22
19784: PUSH
19785: LD_OWVAR 2
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: PUSH
19794: LD_INT 21
19796: PUSH
19797: LD_INT 1
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: PUSH
19804: LD_INT 3
19806: PUSH
19807: LD_INT 23
19809: PUSH
19810: LD_INT 0
19812: PUSH
19813: EMPTY
19814: LIST
19815: LIST
19816: PUSH
19817: EMPTY
19818: LIST
19819: LIST
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: LIST
19825: PPUSH
19826: CALL_OW 69
19830: PUSH
19831: FOR_IN
19832: IFFALSE 19886
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
19834: LD_VAR 0 1
19838: PPUSH
19839: CALL_OW 257
19843: PUSH
19844: LD_INT 1
19846: PUSH
19847: LD_INT 2
19849: PUSH
19850: LD_INT 3
19852: PUSH
19853: LD_INT 4
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: IN
19862: IFFALSE 19884
// SetClass ( un , rand ( 1 , 4 ) ) ;
19864: LD_VAR 0 1
19868: PPUSH
19869: LD_INT 1
19871: PPUSH
19872: LD_INT 4
19874: PPUSH
19875: CALL_OW 12
19879: PPUSH
19880: CALL_OW 336
19884: GO 19831
19886: POP
19887: POP
// end ;
19888: PPOPN 1
19890: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
19891: LD_EXP 51
19895: PUSH
19896: LD_EXP 63
19900: AND
19901: IFFALSE 19980
19903: GO 19905
19905: DISABLE
19906: LD_INT 0
19908: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19909: LD_ADDR_VAR 0 1
19913: PUSH
19914: LD_INT 22
19916: PUSH
19917: LD_OWVAR 2
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: PUSH
19926: LD_INT 21
19928: PUSH
19929: LD_INT 3
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: PUSH
19936: EMPTY
19937: LIST
19938: LIST
19939: PPUSH
19940: CALL_OW 69
19944: ST_TO_ADDR
// if not tmp then
19945: LD_VAR 0 1
19949: NOT
19950: IFFALSE 19954
// exit ;
19952: GO 19980
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
19954: LD_VAR 0 1
19958: PUSH
19959: LD_INT 1
19961: PPUSH
19962: LD_VAR 0 1
19966: PPUSH
19967: CALL_OW 12
19971: ARRAY
19972: PPUSH
19973: LD_INT 100
19975: PPUSH
19976: CALL_OW 234
// end ;
19980: PPOPN 1
19982: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
19983: LD_EXP 51
19987: PUSH
19988: LD_EXP 65
19992: AND
19993: IFFALSE 20091
19995: GO 19997
19997: DISABLE
19998: LD_INT 0
20000: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20001: LD_ADDR_VAR 0 1
20005: PUSH
20006: LD_INT 22
20008: PUSH
20009: LD_OWVAR 2
20013: PUSH
20014: EMPTY
20015: LIST
20016: LIST
20017: PUSH
20018: LD_INT 21
20020: PUSH
20021: LD_INT 1
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: PUSH
20028: EMPTY
20029: LIST
20030: LIST
20031: PPUSH
20032: CALL_OW 69
20036: ST_TO_ADDR
// if not tmp then
20037: LD_VAR 0 1
20041: NOT
20042: IFFALSE 20046
// exit ;
20044: GO 20091
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
20046: LD_VAR 0 1
20050: PUSH
20051: LD_INT 1
20053: PPUSH
20054: LD_VAR 0 1
20058: PPUSH
20059: CALL_OW 12
20063: ARRAY
20064: PPUSH
20065: LD_INT 1
20067: PPUSH
20068: LD_INT 4
20070: PPUSH
20071: CALL_OW 12
20075: PPUSH
20076: LD_INT 3000
20078: PPUSH
20079: LD_INT 9000
20081: PPUSH
20082: CALL_OW 12
20086: PPUSH
20087: CALL_OW 492
// end ;
20091: PPOPN 1
20093: END
// every 0 0$1 trigger StreamModeActive and sDepot do
20094: LD_EXP 51
20098: PUSH
20099: LD_EXP 66
20103: AND
20104: IFFALSE 20124
20106: GO 20108
20108: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
20109: LD_INT 1
20111: PPUSH
20112: LD_OWVAR 2
20116: PPUSH
20117: LD_INT 0
20119: PPUSH
20120: CALL_OW 324
20124: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
20125: LD_EXP 51
20129: PUSH
20130: LD_EXP 67
20134: AND
20135: IFFALSE 20218
20137: GO 20139
20139: DISABLE
20140: LD_INT 0
20142: PPUSH
20143: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20144: LD_ADDR_VAR 0 2
20148: PUSH
20149: LD_INT 22
20151: PUSH
20152: LD_OWVAR 2
20156: PUSH
20157: EMPTY
20158: LIST
20159: LIST
20160: PUSH
20161: LD_INT 21
20163: PUSH
20164: LD_INT 3
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: PPUSH
20175: CALL_OW 69
20179: ST_TO_ADDR
// if not tmp then
20180: LD_VAR 0 2
20184: NOT
20185: IFFALSE 20189
// exit ;
20187: GO 20218
// for i in tmp do
20189: LD_ADDR_VAR 0 1
20193: PUSH
20194: LD_VAR 0 2
20198: PUSH
20199: FOR_IN
20200: IFFALSE 20216
// SetBLevel ( i , 10 ) ;
20202: LD_VAR 0 1
20206: PPUSH
20207: LD_INT 10
20209: PPUSH
20210: CALL_OW 241
20214: GO 20199
20216: POP
20217: POP
// end ;
20218: PPOPN 2
20220: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
20221: LD_EXP 51
20225: PUSH
20226: LD_EXP 68
20230: AND
20231: IFFALSE 20342
20233: GO 20235
20235: DISABLE
20236: LD_INT 0
20238: PPUSH
20239: PPUSH
20240: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20241: LD_ADDR_VAR 0 3
20245: PUSH
20246: LD_INT 22
20248: PUSH
20249: LD_OWVAR 2
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: PUSH
20258: LD_INT 25
20260: PUSH
20261: LD_INT 1
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: PUSH
20268: EMPTY
20269: LIST
20270: LIST
20271: PPUSH
20272: CALL_OW 69
20276: ST_TO_ADDR
// if not tmp then
20277: LD_VAR 0 3
20281: NOT
20282: IFFALSE 20286
// exit ;
20284: GO 20342
// un := tmp [ rand ( 1 , tmp ) ] ;
20286: LD_ADDR_VAR 0 2
20290: PUSH
20291: LD_VAR 0 3
20295: PUSH
20296: LD_INT 1
20298: PPUSH
20299: LD_VAR 0 3
20303: PPUSH
20304: CALL_OW 12
20308: ARRAY
20309: ST_TO_ADDR
// if Crawls ( un ) then
20310: LD_VAR 0 2
20314: PPUSH
20315: CALL_OW 318
20319: IFFALSE 20330
// ComWalk ( un ) ;
20321: LD_VAR 0 2
20325: PPUSH
20326: CALL_OW 138
// SetClass ( un , class_sniper ) ;
20330: LD_VAR 0 2
20334: PPUSH
20335: LD_INT 5
20337: PPUSH
20338: CALL_OW 336
// end ;
20342: PPOPN 3
20344: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
20345: LD_EXP 51
20349: PUSH
20350: LD_EXP 69
20354: AND
20355: PUSH
20356: LD_OWVAR 67
20360: PUSH
20361: LD_INT 4
20363: LESS
20364: AND
20365: IFFALSE 20384
20367: GO 20369
20369: DISABLE
// begin Difficulty := Difficulty + 1 ;
20370: LD_ADDR_OWVAR 67
20374: PUSH
20375: LD_OWVAR 67
20379: PUSH
20380: LD_INT 1
20382: PLUS
20383: ST_TO_ADDR
// end ;
20384: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
20385: LD_EXP 51
20389: PUSH
20390: LD_EXP 70
20394: AND
20395: IFFALSE 20498
20397: GO 20399
20399: DISABLE
20400: LD_INT 0
20402: PPUSH
// begin for i := 1 to 5 do
20403: LD_ADDR_VAR 0 1
20407: PUSH
20408: DOUBLE
20409: LD_INT 1
20411: DEC
20412: ST_TO_ADDR
20413: LD_INT 5
20415: PUSH
20416: FOR_TO
20417: IFFALSE 20496
// begin uc_nation := nation_nature ;
20419: LD_ADDR_OWVAR 21
20423: PUSH
20424: LD_INT 0
20426: ST_TO_ADDR
// uc_side := 0 ;
20427: LD_ADDR_OWVAR 20
20431: PUSH
20432: LD_INT 0
20434: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20435: LD_ADDR_OWVAR 29
20439: PUSH
20440: LD_INT 12
20442: PUSH
20443: LD_INT 12
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: ST_TO_ADDR
// hc_agressivity := 20 ;
20450: LD_ADDR_OWVAR 35
20454: PUSH
20455: LD_INT 20
20457: ST_TO_ADDR
// hc_class := class_tiger ;
20458: LD_ADDR_OWVAR 28
20462: PUSH
20463: LD_INT 14
20465: ST_TO_ADDR
// hc_gallery :=  ;
20466: LD_ADDR_OWVAR 33
20470: PUSH
20471: LD_STRING 
20473: ST_TO_ADDR
// hc_name :=  ;
20474: LD_ADDR_OWVAR 26
20478: PUSH
20479: LD_STRING 
20481: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
20482: CALL_OW 44
20486: PPUSH
20487: LD_INT 0
20489: PPUSH
20490: CALL_OW 51
// end ;
20494: GO 20416
20496: POP
20497: POP
// end ;
20498: PPOPN 1
20500: END
// every 0 0$1 trigger StreamModeActive and sBomb do
20501: LD_EXP 51
20505: PUSH
20506: LD_EXP 71
20510: AND
20511: IFFALSE 20520
20513: GO 20515
20515: DISABLE
// StreamSibBomb ;
20516: CALL 20521 0 0
20520: END
// export function StreamSibBomb ; var i , x , y ; begin
20521: LD_INT 0
20523: PPUSH
20524: PPUSH
20525: PPUSH
20526: PPUSH
// result := false ;
20527: LD_ADDR_VAR 0 1
20531: PUSH
20532: LD_INT 0
20534: ST_TO_ADDR
// for i := 1 to 16 do
20535: LD_ADDR_VAR 0 2
20539: PUSH
20540: DOUBLE
20541: LD_INT 1
20543: DEC
20544: ST_TO_ADDR
20545: LD_INT 16
20547: PUSH
20548: FOR_TO
20549: IFFALSE 20748
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20551: LD_ADDR_VAR 0 3
20555: PUSH
20556: LD_INT 10
20558: PUSH
20559: LD_INT 20
20561: PUSH
20562: LD_INT 30
20564: PUSH
20565: LD_INT 40
20567: PUSH
20568: LD_INT 50
20570: PUSH
20571: LD_INT 60
20573: PUSH
20574: LD_INT 70
20576: PUSH
20577: LD_INT 80
20579: PUSH
20580: LD_INT 90
20582: PUSH
20583: LD_INT 100
20585: PUSH
20586: LD_INT 110
20588: PUSH
20589: LD_INT 120
20591: PUSH
20592: LD_INT 130
20594: PUSH
20595: LD_INT 140
20597: PUSH
20598: LD_INT 150
20600: PUSH
20601: EMPTY
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: PUSH
20618: LD_INT 1
20620: PPUSH
20621: LD_INT 15
20623: PPUSH
20624: CALL_OW 12
20628: ARRAY
20629: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20630: LD_ADDR_VAR 0 4
20634: PUSH
20635: LD_INT 10
20637: PUSH
20638: LD_INT 20
20640: PUSH
20641: LD_INT 30
20643: PUSH
20644: LD_INT 40
20646: PUSH
20647: LD_INT 50
20649: PUSH
20650: LD_INT 60
20652: PUSH
20653: LD_INT 70
20655: PUSH
20656: LD_INT 80
20658: PUSH
20659: LD_INT 90
20661: PUSH
20662: LD_INT 100
20664: PUSH
20665: LD_INT 110
20667: PUSH
20668: LD_INT 120
20670: PUSH
20671: LD_INT 130
20673: PUSH
20674: LD_INT 140
20676: PUSH
20677: LD_INT 150
20679: PUSH
20680: EMPTY
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: PUSH
20697: LD_INT 1
20699: PPUSH
20700: LD_INT 15
20702: PPUSH
20703: CALL_OW 12
20707: ARRAY
20708: ST_TO_ADDR
// if ValidHex ( x , y ) then
20709: LD_VAR 0 3
20713: PPUSH
20714: LD_VAR 0 4
20718: PPUSH
20719: CALL_OW 488
20723: IFFALSE 20746
// begin result := [ x , y ] ;
20725: LD_ADDR_VAR 0 1
20729: PUSH
20730: LD_VAR 0 3
20734: PUSH
20735: LD_VAR 0 4
20739: PUSH
20740: EMPTY
20741: LIST
20742: LIST
20743: ST_TO_ADDR
// break ;
20744: GO 20748
// end ; end ;
20746: GO 20548
20748: POP
20749: POP
// if result then
20750: LD_VAR 0 1
20754: IFFALSE 20814
// begin ToLua ( playSibBomb() ) ;
20756: LD_STRING playSibBomb()
20758: PPUSH
20759: CALL_OW 559
// wait ( 0 0$14 ) ;
20763: LD_INT 490
20765: PPUSH
20766: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
20770: LD_VAR 0 1
20774: PUSH
20775: LD_INT 1
20777: ARRAY
20778: PPUSH
20779: LD_VAR 0 1
20783: PUSH
20784: LD_INT 2
20786: ARRAY
20787: PPUSH
20788: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
20792: LD_VAR 0 1
20796: PUSH
20797: LD_INT 1
20799: ARRAY
20800: PPUSH
20801: LD_VAR 0 1
20805: PUSH
20806: LD_INT 2
20808: ARRAY
20809: PPUSH
20810: CALL_OW 429
// end ; end ;
20814: LD_VAR 0 1
20818: RET
// every 0 0$1 trigger StreamModeActive and sReset do
20819: LD_EXP 51
20823: PUSH
20824: LD_EXP 73
20828: AND
20829: IFFALSE 20841
20831: GO 20833
20833: DISABLE
// YouLost (  ) ;
20834: LD_STRING 
20836: PPUSH
20837: CALL_OW 104
20841: END
// every 0 0$1 trigger StreamModeActive and sFog do
20842: LD_EXP 51
20846: PUSH
20847: LD_EXP 72
20851: AND
20852: IFFALSE 20866
20854: GO 20856
20856: DISABLE
// FogOff ( your_side ) ;
20857: LD_OWVAR 2
20861: PPUSH
20862: CALL_OW 344
20866: END
// every 0 0$1 trigger StreamModeActive and sSun do
20867: LD_EXP 51
20871: PUSH
20872: LD_EXP 74
20876: AND
20877: IFFALSE 20905
20879: GO 20881
20881: DISABLE
// begin solar_recharge_percent := 0 ;
20882: LD_ADDR_OWVAR 79
20886: PUSH
20887: LD_INT 0
20889: ST_TO_ADDR
// wait ( 5 5$00 ) ;
20890: LD_INT 10500
20892: PPUSH
20893: CALL_OW 67
// solar_recharge_percent := 100 ;
20897: LD_ADDR_OWVAR 79
20901: PUSH
20902: LD_INT 100
20904: ST_TO_ADDR
// end ;
20905: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
20906: LD_EXP 51
20910: PUSH
20911: LD_EXP 75
20915: AND
20916: IFFALSE 21155
20918: GO 20920
20920: DISABLE
20921: LD_INT 0
20923: PPUSH
20924: PPUSH
20925: PPUSH
// begin tmp := [ ] ;
20926: LD_ADDR_VAR 0 3
20930: PUSH
20931: EMPTY
20932: ST_TO_ADDR
// for i := 1 to 6 do
20933: LD_ADDR_VAR 0 1
20937: PUSH
20938: DOUBLE
20939: LD_INT 1
20941: DEC
20942: ST_TO_ADDR
20943: LD_INT 6
20945: PUSH
20946: FOR_TO
20947: IFFALSE 21052
// begin uc_nation := nation_nature ;
20949: LD_ADDR_OWVAR 21
20953: PUSH
20954: LD_INT 0
20956: ST_TO_ADDR
// uc_side := 0 ;
20957: LD_ADDR_OWVAR 20
20961: PUSH
20962: LD_INT 0
20964: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20965: LD_ADDR_OWVAR 29
20969: PUSH
20970: LD_INT 12
20972: PUSH
20973: LD_INT 12
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: ST_TO_ADDR
// hc_agressivity := 20 ;
20980: LD_ADDR_OWVAR 35
20984: PUSH
20985: LD_INT 20
20987: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
20988: LD_ADDR_OWVAR 28
20992: PUSH
20993: LD_INT 17
20995: ST_TO_ADDR
// hc_gallery :=  ;
20996: LD_ADDR_OWVAR 33
21000: PUSH
21001: LD_STRING 
21003: ST_TO_ADDR
// hc_name :=  ;
21004: LD_ADDR_OWVAR 26
21008: PUSH
21009: LD_STRING 
21011: ST_TO_ADDR
// un := CreateHuman ;
21012: LD_ADDR_VAR 0 2
21016: PUSH
21017: CALL_OW 44
21021: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
21022: LD_VAR 0 2
21026: PPUSH
21027: LD_INT 1
21029: PPUSH
21030: CALL_OW 51
// tmp := tmp ^ un ;
21034: LD_ADDR_VAR 0 3
21038: PUSH
21039: LD_VAR 0 3
21043: PUSH
21044: LD_VAR 0 2
21048: ADD
21049: ST_TO_ADDR
// end ;
21050: GO 20946
21052: POP
21053: POP
// repeat wait ( 0 0$1 ) ;
21054: LD_INT 35
21056: PPUSH
21057: CALL_OW 67
// for un in tmp do
21061: LD_ADDR_VAR 0 2
21065: PUSH
21066: LD_VAR 0 3
21070: PUSH
21071: FOR_IN
21072: IFFALSE 21146
// begin if IsDead ( un ) then
21074: LD_VAR 0 2
21078: PPUSH
21079: CALL_OW 301
21083: IFFALSE 21103
// begin tmp := tmp diff un ;
21085: LD_ADDR_VAR 0 3
21089: PUSH
21090: LD_VAR 0 3
21094: PUSH
21095: LD_VAR 0 2
21099: DIFF
21100: ST_TO_ADDR
// continue ;
21101: GO 21071
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
21103: LD_VAR 0 2
21107: PPUSH
21108: LD_INT 3
21110: PUSH
21111: LD_INT 22
21113: PUSH
21114: LD_INT 0
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: PPUSH
21125: CALL_OW 69
21129: PPUSH
21130: LD_VAR 0 2
21134: PPUSH
21135: CALL_OW 74
21139: PPUSH
21140: CALL_OW 115
// end ;
21144: GO 21071
21146: POP
21147: POP
// until not tmp ;
21148: LD_VAR 0 3
21152: NOT
21153: IFFALSE 21054
// end ;
21155: PPOPN 3
21157: END
// every 0 0$1 trigger StreamModeActive and sTroll do
21158: LD_EXP 51
21162: PUSH
21163: LD_EXP 76
21167: AND
21168: IFFALSE 21222
21170: GO 21172
21172: DISABLE
// begin ToLua ( displayTroll(); ) ;
21173: LD_STRING displayTroll();
21175: PPUSH
21176: CALL_OW 559
// wait ( 3 3$00 ) ;
21180: LD_INT 6300
21182: PPUSH
21183: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21187: LD_STRING hideTroll();
21189: PPUSH
21190: CALL_OW 559
// wait ( 1 1$00 ) ;
21194: LD_INT 2100
21196: PPUSH
21197: CALL_OW 67
// ToLua ( displayTroll(); ) ;
21201: LD_STRING displayTroll();
21203: PPUSH
21204: CALL_OW 559
// wait ( 1 1$00 ) ;
21208: LD_INT 2100
21210: PPUSH
21211: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21215: LD_STRING hideTroll();
21217: PPUSH
21218: CALL_OW 559
// end ;
21222: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
21223: LD_EXP 51
21227: PUSH
21228: LD_EXP 77
21232: AND
21233: IFFALSE 21296
21235: GO 21237
21237: DISABLE
21238: LD_INT 0
21240: PPUSH
// begin p := 0 ;
21241: LD_ADDR_VAR 0 1
21245: PUSH
21246: LD_INT 0
21248: ST_TO_ADDR
// repeat game_speed := 1 ;
21249: LD_ADDR_OWVAR 65
21253: PUSH
21254: LD_INT 1
21256: ST_TO_ADDR
// wait ( 0 0$1 ) ;
21257: LD_INT 35
21259: PPUSH
21260: CALL_OW 67
// p := p + 1 ;
21264: LD_ADDR_VAR 0 1
21268: PUSH
21269: LD_VAR 0 1
21273: PUSH
21274: LD_INT 1
21276: PLUS
21277: ST_TO_ADDR
// until p >= 60 ;
21278: LD_VAR 0 1
21282: PUSH
21283: LD_INT 60
21285: GREATEREQUAL
21286: IFFALSE 21249
// game_speed := 4 ;
21288: LD_ADDR_OWVAR 65
21292: PUSH
21293: LD_INT 4
21295: ST_TO_ADDR
// end ;
21296: PPOPN 1
21298: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
21299: LD_EXP 51
21303: PUSH
21304: LD_EXP 78
21308: AND
21309: IFFALSE 21455
21311: GO 21313
21313: DISABLE
21314: LD_INT 0
21316: PPUSH
21317: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21318: LD_ADDR_VAR 0 1
21322: PUSH
21323: LD_INT 22
21325: PUSH
21326: LD_OWVAR 2
21330: PUSH
21331: EMPTY
21332: LIST
21333: LIST
21334: PUSH
21335: LD_INT 2
21337: PUSH
21338: LD_INT 30
21340: PUSH
21341: LD_INT 0
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: PUSH
21348: LD_INT 30
21350: PUSH
21351: LD_INT 1
21353: PUSH
21354: EMPTY
21355: LIST
21356: LIST
21357: PUSH
21358: EMPTY
21359: LIST
21360: LIST
21361: LIST
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: PPUSH
21367: CALL_OW 69
21371: ST_TO_ADDR
// if not depot then
21372: LD_VAR 0 1
21376: NOT
21377: IFFALSE 21381
// exit ;
21379: GO 21455
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
21381: LD_ADDR_VAR 0 2
21385: PUSH
21386: LD_VAR 0 1
21390: PUSH
21391: LD_INT 1
21393: PPUSH
21394: LD_VAR 0 1
21398: PPUSH
21399: CALL_OW 12
21403: ARRAY
21404: PPUSH
21405: CALL_OW 274
21409: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
21410: LD_VAR 0 2
21414: PPUSH
21415: LD_INT 1
21417: PPUSH
21418: LD_INT 0
21420: PPUSH
21421: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
21425: LD_VAR 0 2
21429: PPUSH
21430: LD_INT 2
21432: PPUSH
21433: LD_INT 0
21435: PPUSH
21436: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
21440: LD_VAR 0 2
21444: PPUSH
21445: LD_INT 3
21447: PPUSH
21448: LD_INT 0
21450: PPUSH
21451: CALL_OW 277
// end ;
21455: PPOPN 2
21457: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
21458: LD_EXP 51
21462: PUSH
21463: LD_EXP 79
21467: AND
21468: IFFALSE 21565
21470: GO 21472
21472: DISABLE
21473: LD_INT 0
21475: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21476: LD_ADDR_VAR 0 1
21480: PUSH
21481: LD_INT 22
21483: PUSH
21484: LD_OWVAR 2
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: PUSH
21493: LD_INT 21
21495: PUSH
21496: LD_INT 1
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: PUSH
21503: LD_INT 3
21505: PUSH
21506: LD_INT 23
21508: PUSH
21509: LD_INT 0
21511: PUSH
21512: EMPTY
21513: LIST
21514: LIST
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: PUSH
21520: EMPTY
21521: LIST
21522: LIST
21523: LIST
21524: PPUSH
21525: CALL_OW 69
21529: ST_TO_ADDR
// if not tmp then
21530: LD_VAR 0 1
21534: NOT
21535: IFFALSE 21539
// exit ;
21537: GO 21565
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
21539: LD_VAR 0 1
21543: PUSH
21544: LD_INT 1
21546: PPUSH
21547: LD_VAR 0 1
21551: PPUSH
21552: CALL_OW 12
21556: ARRAY
21557: PPUSH
21558: LD_INT 200
21560: PPUSH
21561: CALL_OW 234
// end ;
21565: PPOPN 1
21567: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
21568: LD_EXP 51
21572: PUSH
21573: LD_EXP 80
21577: AND
21578: IFFALSE 21657
21580: GO 21582
21582: DISABLE
21583: LD_INT 0
21585: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
21586: LD_ADDR_VAR 0 1
21590: PUSH
21591: LD_INT 22
21593: PUSH
21594: LD_OWVAR 2
21598: PUSH
21599: EMPTY
21600: LIST
21601: LIST
21602: PUSH
21603: LD_INT 21
21605: PUSH
21606: LD_INT 2
21608: PUSH
21609: EMPTY
21610: LIST
21611: LIST
21612: PUSH
21613: EMPTY
21614: LIST
21615: LIST
21616: PPUSH
21617: CALL_OW 69
21621: ST_TO_ADDR
// if not tmp then
21622: LD_VAR 0 1
21626: NOT
21627: IFFALSE 21631
// exit ;
21629: GO 21657
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
21631: LD_VAR 0 1
21635: PUSH
21636: LD_INT 1
21638: PPUSH
21639: LD_VAR 0 1
21643: PPUSH
21644: CALL_OW 12
21648: ARRAY
21649: PPUSH
21650: LD_INT 60
21652: PPUSH
21653: CALL_OW 234
// end ;
21657: PPOPN 1
21659: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
21660: LD_EXP 51
21664: PUSH
21665: LD_EXP 81
21669: AND
21670: IFFALSE 21769
21672: GO 21674
21674: DISABLE
21675: LD_INT 0
21677: PPUSH
21678: PPUSH
// begin enable ;
21679: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
21680: LD_ADDR_VAR 0 1
21684: PUSH
21685: LD_INT 22
21687: PUSH
21688: LD_OWVAR 2
21692: PUSH
21693: EMPTY
21694: LIST
21695: LIST
21696: PUSH
21697: LD_INT 61
21699: PUSH
21700: EMPTY
21701: LIST
21702: PUSH
21703: LD_INT 33
21705: PUSH
21706: LD_INT 2
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: LIST
21717: PPUSH
21718: CALL_OW 69
21722: ST_TO_ADDR
// if not tmp then
21723: LD_VAR 0 1
21727: NOT
21728: IFFALSE 21732
// exit ;
21730: GO 21769
// for i in tmp do
21732: LD_ADDR_VAR 0 2
21736: PUSH
21737: LD_VAR 0 1
21741: PUSH
21742: FOR_IN
21743: IFFALSE 21767
// if IsControledBy ( i ) then
21745: LD_VAR 0 2
21749: PPUSH
21750: CALL_OW 312
21754: IFFALSE 21765
// ComUnlink ( i ) ;
21756: LD_VAR 0 2
21760: PPUSH
21761: CALL_OW 136
21765: GO 21742
21767: POP
21768: POP
// end ;
21769: PPOPN 2
21771: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
21772: LD_EXP 51
21776: PUSH
21777: LD_EXP 82
21781: AND
21782: IFFALSE 21922
21784: GO 21786
21786: DISABLE
21787: LD_INT 0
21789: PPUSH
21790: PPUSH
// begin ToLua ( displayPowell(); ) ;
21791: LD_STRING displayPowell();
21793: PPUSH
21794: CALL_OW 559
// uc_side := 0 ;
21798: LD_ADDR_OWVAR 20
21802: PUSH
21803: LD_INT 0
21805: ST_TO_ADDR
// uc_nation := 2 ;
21806: LD_ADDR_OWVAR 21
21810: PUSH
21811: LD_INT 2
21813: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
21814: LD_ADDR_OWVAR 37
21818: PUSH
21819: LD_INT 14
21821: ST_TO_ADDR
// vc_engine := engine_siberite ;
21822: LD_ADDR_OWVAR 39
21826: PUSH
21827: LD_INT 3
21829: ST_TO_ADDR
// vc_control := control_apeman ;
21830: LD_ADDR_OWVAR 38
21834: PUSH
21835: LD_INT 5
21837: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
21838: LD_ADDR_OWVAR 40
21842: PUSH
21843: LD_INT 29
21845: ST_TO_ADDR
// un := CreateVehicle ;
21846: LD_ADDR_VAR 0 2
21850: PUSH
21851: CALL_OW 45
21855: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21856: LD_VAR 0 2
21860: PPUSH
21861: LD_INT 1
21863: PPUSH
21864: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21868: LD_INT 35
21870: PPUSH
21871: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21875: LD_VAR 0 2
21879: PPUSH
21880: LD_INT 22
21882: PUSH
21883: LD_OWVAR 2
21887: PUSH
21888: EMPTY
21889: LIST
21890: LIST
21891: PPUSH
21892: CALL_OW 69
21896: PPUSH
21897: LD_VAR 0 2
21901: PPUSH
21902: CALL_OW 74
21906: PPUSH
21907: CALL_OW 115
// until IsDead ( un ) ;
21911: LD_VAR 0 2
21915: PPUSH
21916: CALL_OW 301
21920: IFFALSE 21868
// end ;
21922: PPOPN 2
21924: END
// every 0 0$1 trigger StreamModeActive and sStu do
21925: LD_EXP 51
21929: PUSH
21930: LD_EXP 90
21934: AND
21935: IFFALSE 21951
21937: GO 21939
21939: DISABLE
// begin ToLua ( displayStucuk(); ) ;
21940: LD_STRING displayStucuk();
21942: PPUSH
21943: CALL_OW 559
// ResetFog ;
21947: CALL_OW 335
// end ;
21951: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
21952: LD_EXP 51
21956: PUSH
21957: LD_EXP 83
21961: AND
21962: IFFALSE 22103
21964: GO 21966
21966: DISABLE
21967: LD_INT 0
21969: PPUSH
21970: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21971: LD_ADDR_VAR 0 2
21975: PUSH
21976: LD_INT 22
21978: PUSH
21979: LD_OWVAR 2
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: PUSH
21988: LD_INT 21
21990: PUSH
21991: LD_INT 1
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: PUSH
21998: EMPTY
21999: LIST
22000: LIST
22001: PPUSH
22002: CALL_OW 69
22006: ST_TO_ADDR
// if not tmp then
22007: LD_VAR 0 2
22011: NOT
22012: IFFALSE 22016
// exit ;
22014: GO 22103
// un := tmp [ rand ( 1 , tmp ) ] ;
22016: LD_ADDR_VAR 0 1
22020: PUSH
22021: LD_VAR 0 2
22025: PUSH
22026: LD_INT 1
22028: PPUSH
22029: LD_VAR 0 2
22033: PPUSH
22034: CALL_OW 12
22038: ARRAY
22039: ST_TO_ADDR
// SetSide ( un , 0 ) ;
22040: LD_VAR 0 1
22044: PPUSH
22045: LD_INT 0
22047: PPUSH
22048: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
22052: LD_VAR 0 1
22056: PPUSH
22057: LD_OWVAR 3
22061: PUSH
22062: LD_VAR 0 1
22066: DIFF
22067: PPUSH
22068: LD_VAR 0 1
22072: PPUSH
22073: CALL_OW 74
22077: PPUSH
22078: CALL_OW 115
// wait ( 0 0$20 ) ;
22082: LD_INT 700
22084: PPUSH
22085: CALL_OW 67
// SetSide ( un , your_side ) ;
22089: LD_VAR 0 1
22093: PPUSH
22094: LD_OWVAR 2
22098: PPUSH
22099: CALL_OW 235
// end ;
22103: PPOPN 2
22105: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
22106: LD_EXP 51
22110: PUSH
22111: LD_EXP 84
22115: AND
22116: IFFALSE 22222
22118: GO 22120
22120: DISABLE
22121: LD_INT 0
22123: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22124: LD_ADDR_VAR 0 1
22128: PUSH
22129: LD_INT 22
22131: PUSH
22132: LD_OWVAR 2
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: PUSH
22141: LD_INT 2
22143: PUSH
22144: LD_INT 30
22146: PUSH
22147: LD_INT 0
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: PUSH
22154: LD_INT 30
22156: PUSH
22157: LD_INT 1
22159: PUSH
22160: EMPTY
22161: LIST
22162: LIST
22163: PUSH
22164: EMPTY
22165: LIST
22166: LIST
22167: LIST
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: PPUSH
22173: CALL_OW 69
22177: ST_TO_ADDR
// if not depot then
22178: LD_VAR 0 1
22182: NOT
22183: IFFALSE 22187
// exit ;
22185: GO 22222
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
22187: LD_VAR 0 1
22191: PUSH
22192: LD_INT 1
22194: ARRAY
22195: PPUSH
22196: CALL_OW 250
22200: PPUSH
22201: LD_VAR 0 1
22205: PUSH
22206: LD_INT 1
22208: ARRAY
22209: PPUSH
22210: CALL_OW 251
22214: PPUSH
22215: LD_INT 70
22217: PPUSH
22218: CALL_OW 495
// end ;
22222: PPOPN 1
22224: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
22225: LD_EXP 51
22229: PUSH
22230: LD_EXP 85
22234: AND
22235: IFFALSE 22446
22237: GO 22239
22239: DISABLE
22240: LD_INT 0
22242: PPUSH
22243: PPUSH
22244: PPUSH
22245: PPUSH
22246: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22247: LD_ADDR_VAR 0 5
22251: PUSH
22252: LD_INT 22
22254: PUSH
22255: LD_OWVAR 2
22259: PUSH
22260: EMPTY
22261: LIST
22262: LIST
22263: PUSH
22264: LD_INT 21
22266: PUSH
22267: LD_INT 1
22269: PUSH
22270: EMPTY
22271: LIST
22272: LIST
22273: PUSH
22274: EMPTY
22275: LIST
22276: LIST
22277: PPUSH
22278: CALL_OW 69
22282: ST_TO_ADDR
// if not tmp then
22283: LD_VAR 0 5
22287: NOT
22288: IFFALSE 22292
// exit ;
22290: GO 22446
// for i in tmp do
22292: LD_ADDR_VAR 0 1
22296: PUSH
22297: LD_VAR 0 5
22301: PUSH
22302: FOR_IN
22303: IFFALSE 22444
// begin d := rand ( 0 , 5 ) ;
22305: LD_ADDR_VAR 0 4
22309: PUSH
22310: LD_INT 0
22312: PPUSH
22313: LD_INT 5
22315: PPUSH
22316: CALL_OW 12
22320: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
22321: LD_ADDR_VAR 0 2
22325: PUSH
22326: LD_VAR 0 1
22330: PPUSH
22331: CALL_OW 250
22335: PPUSH
22336: LD_VAR 0 4
22340: PPUSH
22341: LD_INT 3
22343: PPUSH
22344: LD_INT 12
22346: PPUSH
22347: CALL_OW 12
22351: PPUSH
22352: CALL_OW 272
22356: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
22357: LD_ADDR_VAR 0 3
22361: PUSH
22362: LD_VAR 0 1
22366: PPUSH
22367: CALL_OW 251
22371: PPUSH
22372: LD_VAR 0 4
22376: PPUSH
22377: LD_INT 3
22379: PPUSH
22380: LD_INT 12
22382: PPUSH
22383: CALL_OW 12
22387: PPUSH
22388: CALL_OW 273
22392: ST_TO_ADDR
// if ValidHex ( x , y ) then
22393: LD_VAR 0 2
22397: PPUSH
22398: LD_VAR 0 3
22402: PPUSH
22403: CALL_OW 488
22407: IFFALSE 22442
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
22409: LD_VAR 0 1
22413: PPUSH
22414: LD_VAR 0 2
22418: PPUSH
22419: LD_VAR 0 3
22423: PPUSH
22424: LD_INT 3
22426: PPUSH
22427: LD_INT 6
22429: PPUSH
22430: CALL_OW 12
22434: PPUSH
22435: LD_INT 1
22437: PPUSH
22438: CALL_OW 483
// end ;
22442: GO 22302
22444: POP
22445: POP
// end ;
22446: PPOPN 5
22448: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
22449: LD_EXP 51
22453: PUSH
22454: LD_EXP 86
22458: AND
22459: IFFALSE 22553
22461: GO 22463
22463: DISABLE
22464: LD_INT 0
22466: PPUSH
22467: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
22468: LD_ADDR_VAR 0 2
22472: PUSH
22473: LD_INT 22
22475: PUSH
22476: LD_OWVAR 2
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: PUSH
22485: LD_INT 32
22487: PUSH
22488: LD_INT 1
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: PUSH
22495: LD_INT 21
22497: PUSH
22498: LD_INT 2
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: PUSH
22505: EMPTY
22506: LIST
22507: LIST
22508: LIST
22509: PPUSH
22510: CALL_OW 69
22514: ST_TO_ADDR
// if not tmp then
22515: LD_VAR 0 2
22519: NOT
22520: IFFALSE 22524
// exit ;
22522: GO 22553
// for i in tmp do
22524: LD_ADDR_VAR 0 1
22528: PUSH
22529: LD_VAR 0 2
22533: PUSH
22534: FOR_IN
22535: IFFALSE 22551
// SetFuel ( i , 0 ) ;
22537: LD_VAR 0 1
22541: PPUSH
22542: LD_INT 0
22544: PPUSH
22545: CALL_OW 240
22549: GO 22534
22551: POP
22552: POP
// end ;
22553: PPOPN 2
22555: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
22556: LD_EXP 51
22560: PUSH
22561: LD_EXP 87
22565: AND
22566: IFFALSE 22632
22568: GO 22570
22570: DISABLE
22571: LD_INT 0
22573: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22574: LD_ADDR_VAR 0 1
22578: PUSH
22579: LD_INT 22
22581: PUSH
22582: LD_OWVAR 2
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PUSH
22591: LD_INT 30
22593: PUSH
22594: LD_INT 29
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: PPUSH
22605: CALL_OW 69
22609: ST_TO_ADDR
// if not tmp then
22610: LD_VAR 0 1
22614: NOT
22615: IFFALSE 22619
// exit ;
22617: GO 22632
// DestroyUnit ( tmp [ 1 ] ) ;
22619: LD_VAR 0 1
22623: PUSH
22624: LD_INT 1
22626: ARRAY
22627: PPUSH
22628: CALL_OW 65
// end ;
22632: PPOPN 1
22634: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
22635: LD_EXP 51
22639: PUSH
22640: LD_EXP 89
22644: AND
22645: IFFALSE 22774
22647: GO 22649
22649: DISABLE
22650: LD_INT 0
22652: PPUSH
// begin uc_side := 0 ;
22653: LD_ADDR_OWVAR 20
22657: PUSH
22658: LD_INT 0
22660: ST_TO_ADDR
// uc_nation := nation_arabian ;
22661: LD_ADDR_OWVAR 21
22665: PUSH
22666: LD_INT 2
22668: ST_TO_ADDR
// hc_gallery :=  ;
22669: LD_ADDR_OWVAR 33
22673: PUSH
22674: LD_STRING 
22676: ST_TO_ADDR
// hc_name :=  ;
22677: LD_ADDR_OWVAR 26
22681: PUSH
22682: LD_STRING 
22684: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
22685: LD_INT 1
22687: PPUSH
22688: LD_INT 11
22690: PPUSH
22691: LD_INT 10
22693: PPUSH
22694: CALL_OW 380
// un := CreateHuman ;
22698: LD_ADDR_VAR 0 1
22702: PUSH
22703: CALL_OW 44
22707: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22708: LD_VAR 0 1
22712: PPUSH
22713: LD_INT 1
22715: PPUSH
22716: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22720: LD_INT 35
22722: PPUSH
22723: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22727: LD_VAR 0 1
22731: PPUSH
22732: LD_INT 22
22734: PUSH
22735: LD_OWVAR 2
22739: PUSH
22740: EMPTY
22741: LIST
22742: LIST
22743: PPUSH
22744: CALL_OW 69
22748: PPUSH
22749: LD_VAR 0 1
22753: PPUSH
22754: CALL_OW 74
22758: PPUSH
22759: CALL_OW 115
// until IsDead ( un ) ;
22763: LD_VAR 0 1
22767: PPUSH
22768: CALL_OW 301
22772: IFFALSE 22720
// end ;
22774: PPOPN 1
22776: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
22777: LD_EXP 51
22781: PUSH
22782: LD_EXP 91
22786: AND
22787: IFFALSE 22799
22789: GO 22791
22791: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
22792: LD_STRING earthquake(getX(game), 0, 32)
22794: PPUSH
22795: CALL_OW 559
22799: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
22800: LD_EXP 51
22804: PUSH
22805: LD_EXP 92
22809: AND
22810: IFFALSE 22901
22812: GO 22814
22814: DISABLE
22815: LD_INT 0
22817: PPUSH
// begin enable ;
22818: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
22819: LD_ADDR_VAR 0 1
22823: PUSH
22824: LD_INT 22
22826: PUSH
22827: LD_OWVAR 2
22831: PUSH
22832: EMPTY
22833: LIST
22834: LIST
22835: PUSH
22836: LD_INT 21
22838: PUSH
22839: LD_INT 2
22841: PUSH
22842: EMPTY
22843: LIST
22844: LIST
22845: PUSH
22846: LD_INT 33
22848: PUSH
22849: LD_INT 3
22851: PUSH
22852: EMPTY
22853: LIST
22854: LIST
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: LIST
22860: PPUSH
22861: CALL_OW 69
22865: ST_TO_ADDR
// if not tmp then
22866: LD_VAR 0 1
22870: NOT
22871: IFFALSE 22875
// exit ;
22873: GO 22901
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22875: LD_VAR 0 1
22879: PUSH
22880: LD_INT 1
22882: PPUSH
22883: LD_VAR 0 1
22887: PPUSH
22888: CALL_OW 12
22892: ARRAY
22893: PPUSH
22894: LD_INT 1
22896: PPUSH
22897: CALL_OW 234
// end ;
22901: PPOPN 1
22903: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
22904: LD_EXP 51
22908: PUSH
22909: LD_EXP 93
22913: AND
22914: IFFALSE 23055
22916: GO 22918
22918: DISABLE
22919: LD_INT 0
22921: PPUSH
22922: PPUSH
22923: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22924: LD_ADDR_VAR 0 3
22928: PUSH
22929: LD_INT 22
22931: PUSH
22932: LD_OWVAR 2
22936: PUSH
22937: EMPTY
22938: LIST
22939: LIST
22940: PUSH
22941: LD_INT 25
22943: PUSH
22944: LD_INT 1
22946: PUSH
22947: EMPTY
22948: LIST
22949: LIST
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: PPUSH
22955: CALL_OW 69
22959: ST_TO_ADDR
// if not tmp then
22960: LD_VAR 0 3
22964: NOT
22965: IFFALSE 22969
// exit ;
22967: GO 23055
// un := tmp [ rand ( 1 , tmp ) ] ;
22969: LD_ADDR_VAR 0 2
22973: PUSH
22974: LD_VAR 0 3
22978: PUSH
22979: LD_INT 1
22981: PPUSH
22982: LD_VAR 0 3
22986: PPUSH
22987: CALL_OW 12
22991: ARRAY
22992: ST_TO_ADDR
// if Crawls ( un ) then
22993: LD_VAR 0 2
22997: PPUSH
22998: CALL_OW 318
23002: IFFALSE 23013
// ComWalk ( un ) ;
23004: LD_VAR 0 2
23008: PPUSH
23009: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
23013: LD_VAR 0 2
23017: PPUSH
23018: LD_INT 9
23020: PPUSH
23021: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
23025: LD_INT 28
23027: PPUSH
23028: LD_OWVAR 2
23032: PPUSH
23033: LD_INT 2
23035: PPUSH
23036: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
23040: LD_INT 29
23042: PPUSH
23043: LD_OWVAR 2
23047: PPUSH
23048: LD_INT 2
23050: PPUSH
23051: CALL_OW 322
// end ;
23055: PPOPN 3
23057: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
23058: LD_EXP 51
23062: PUSH
23063: LD_EXP 94
23067: AND
23068: IFFALSE 23179
23070: GO 23072
23072: DISABLE
23073: LD_INT 0
23075: PPUSH
23076: PPUSH
23077: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23078: LD_ADDR_VAR 0 3
23082: PUSH
23083: LD_INT 22
23085: PUSH
23086: LD_OWVAR 2
23090: PUSH
23091: EMPTY
23092: LIST
23093: LIST
23094: PUSH
23095: LD_INT 25
23097: PUSH
23098: LD_INT 1
23100: PUSH
23101: EMPTY
23102: LIST
23103: LIST
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: PPUSH
23109: CALL_OW 69
23113: ST_TO_ADDR
// if not tmp then
23114: LD_VAR 0 3
23118: NOT
23119: IFFALSE 23123
// exit ;
23121: GO 23179
// un := tmp [ rand ( 1 , tmp ) ] ;
23123: LD_ADDR_VAR 0 2
23127: PUSH
23128: LD_VAR 0 3
23132: PUSH
23133: LD_INT 1
23135: PPUSH
23136: LD_VAR 0 3
23140: PPUSH
23141: CALL_OW 12
23145: ARRAY
23146: ST_TO_ADDR
// if Crawls ( un ) then
23147: LD_VAR 0 2
23151: PPUSH
23152: CALL_OW 318
23156: IFFALSE 23167
// ComWalk ( un ) ;
23158: LD_VAR 0 2
23162: PPUSH
23163: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23167: LD_VAR 0 2
23171: PPUSH
23172: LD_INT 8
23174: PPUSH
23175: CALL_OW 336
// end ;
23179: PPOPN 3
23181: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
23182: LD_EXP 51
23186: PUSH
23187: LD_EXP 95
23191: AND
23192: IFFALSE 23336
23194: GO 23196
23196: DISABLE
23197: LD_INT 0
23199: PPUSH
23200: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
23201: LD_ADDR_VAR 0 2
23205: PUSH
23206: LD_INT 22
23208: PUSH
23209: LD_OWVAR 2
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: PUSH
23218: LD_INT 21
23220: PUSH
23221: LD_INT 2
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: PUSH
23228: LD_INT 2
23230: PUSH
23231: LD_INT 34
23233: PUSH
23234: LD_INT 12
23236: PUSH
23237: EMPTY
23238: LIST
23239: LIST
23240: PUSH
23241: LD_INT 34
23243: PUSH
23244: LD_INT 51
23246: PUSH
23247: EMPTY
23248: LIST
23249: LIST
23250: PUSH
23251: LD_INT 34
23253: PUSH
23254: LD_INT 32
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: LIST
23271: PPUSH
23272: CALL_OW 69
23276: ST_TO_ADDR
// if not tmp then
23277: LD_VAR 0 2
23281: NOT
23282: IFFALSE 23286
// exit ;
23284: GO 23336
// for i in tmp do
23286: LD_ADDR_VAR 0 1
23290: PUSH
23291: LD_VAR 0 2
23295: PUSH
23296: FOR_IN
23297: IFFALSE 23334
// if GetCargo ( i , mat_artifact ) = 0 then
23299: LD_VAR 0 1
23303: PPUSH
23304: LD_INT 4
23306: PPUSH
23307: CALL_OW 289
23311: PUSH
23312: LD_INT 0
23314: EQUAL
23315: IFFALSE 23332
// SetCargo ( i , mat_siberit , 100 ) ;
23317: LD_VAR 0 1
23321: PPUSH
23322: LD_INT 3
23324: PPUSH
23325: LD_INT 100
23327: PPUSH
23328: CALL_OW 290
23332: GO 23296
23334: POP
23335: POP
// end ;
23336: PPOPN 2
23338: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
23339: LD_EXP 51
23343: PUSH
23344: LD_EXP 96
23348: AND
23349: IFFALSE 23532
23351: GO 23353
23353: DISABLE
23354: LD_INT 0
23356: PPUSH
23357: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23358: LD_ADDR_VAR 0 2
23362: PUSH
23363: LD_INT 22
23365: PUSH
23366: LD_OWVAR 2
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: PPUSH
23375: CALL_OW 69
23379: ST_TO_ADDR
// if not tmp then
23380: LD_VAR 0 2
23384: NOT
23385: IFFALSE 23389
// exit ;
23387: GO 23532
// for i := 1 to 2 do
23389: LD_ADDR_VAR 0 1
23393: PUSH
23394: DOUBLE
23395: LD_INT 1
23397: DEC
23398: ST_TO_ADDR
23399: LD_INT 2
23401: PUSH
23402: FOR_TO
23403: IFFALSE 23530
// begin uc_side := your_side ;
23405: LD_ADDR_OWVAR 20
23409: PUSH
23410: LD_OWVAR 2
23414: ST_TO_ADDR
// uc_nation := nation_american ;
23415: LD_ADDR_OWVAR 21
23419: PUSH
23420: LD_INT 1
23422: ST_TO_ADDR
// vc_chassis := us_morphling ;
23423: LD_ADDR_OWVAR 37
23427: PUSH
23428: LD_INT 5
23430: ST_TO_ADDR
// vc_engine := engine_siberite ;
23431: LD_ADDR_OWVAR 39
23435: PUSH
23436: LD_INT 3
23438: ST_TO_ADDR
// vc_control := control_computer ;
23439: LD_ADDR_OWVAR 38
23443: PUSH
23444: LD_INT 3
23446: ST_TO_ADDR
// vc_weapon := us_double_laser ;
23447: LD_ADDR_OWVAR 40
23451: PUSH
23452: LD_INT 10
23454: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
23455: LD_VAR 0 2
23459: PUSH
23460: LD_INT 1
23462: ARRAY
23463: PPUSH
23464: CALL_OW 310
23468: NOT
23469: IFFALSE 23516
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
23471: CALL_OW 45
23475: PPUSH
23476: LD_VAR 0 2
23480: PUSH
23481: LD_INT 1
23483: ARRAY
23484: PPUSH
23485: CALL_OW 250
23489: PPUSH
23490: LD_VAR 0 2
23494: PUSH
23495: LD_INT 1
23497: ARRAY
23498: PPUSH
23499: CALL_OW 251
23503: PPUSH
23504: LD_INT 12
23506: PPUSH
23507: LD_INT 1
23509: PPUSH
23510: CALL_OW 50
23514: GO 23528
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
23516: CALL_OW 45
23520: PPUSH
23521: LD_INT 1
23523: PPUSH
23524: CALL_OW 51
// end ;
23528: GO 23402
23530: POP
23531: POP
// end ;
23532: PPOPN 2
23534: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
23535: LD_EXP 51
23539: PUSH
23540: LD_EXP 97
23544: AND
23545: IFFALSE 23767
23547: GO 23549
23549: DISABLE
23550: LD_INT 0
23552: PPUSH
23553: PPUSH
23554: PPUSH
23555: PPUSH
23556: PPUSH
23557: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23558: LD_ADDR_VAR 0 6
23562: PUSH
23563: LD_INT 22
23565: PUSH
23566: LD_OWVAR 2
23570: PUSH
23571: EMPTY
23572: LIST
23573: LIST
23574: PUSH
23575: LD_INT 21
23577: PUSH
23578: LD_INT 1
23580: PUSH
23581: EMPTY
23582: LIST
23583: LIST
23584: PUSH
23585: LD_INT 3
23587: PUSH
23588: LD_INT 23
23590: PUSH
23591: LD_INT 0
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: PUSH
23598: EMPTY
23599: LIST
23600: LIST
23601: PUSH
23602: EMPTY
23603: LIST
23604: LIST
23605: LIST
23606: PPUSH
23607: CALL_OW 69
23611: ST_TO_ADDR
// if not tmp then
23612: LD_VAR 0 6
23616: NOT
23617: IFFALSE 23621
// exit ;
23619: GO 23767
// s1 := rand ( 1 , 4 ) ;
23621: LD_ADDR_VAR 0 2
23625: PUSH
23626: LD_INT 1
23628: PPUSH
23629: LD_INT 4
23631: PPUSH
23632: CALL_OW 12
23636: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
23637: LD_ADDR_VAR 0 4
23641: PUSH
23642: LD_VAR 0 6
23646: PUSH
23647: LD_INT 1
23649: ARRAY
23650: PPUSH
23651: LD_VAR 0 2
23655: PPUSH
23656: CALL_OW 259
23660: ST_TO_ADDR
// if s1 = 1 then
23661: LD_VAR 0 2
23665: PUSH
23666: LD_INT 1
23668: EQUAL
23669: IFFALSE 23689
// s2 := rand ( 2 , 4 ) else
23671: LD_ADDR_VAR 0 3
23675: PUSH
23676: LD_INT 2
23678: PPUSH
23679: LD_INT 4
23681: PPUSH
23682: CALL_OW 12
23686: ST_TO_ADDR
23687: GO 23697
// s2 := 1 ;
23689: LD_ADDR_VAR 0 3
23693: PUSH
23694: LD_INT 1
23696: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
23697: LD_ADDR_VAR 0 5
23701: PUSH
23702: LD_VAR 0 6
23706: PUSH
23707: LD_INT 1
23709: ARRAY
23710: PPUSH
23711: LD_VAR 0 3
23715: PPUSH
23716: CALL_OW 259
23720: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
23721: LD_VAR 0 6
23725: PUSH
23726: LD_INT 1
23728: ARRAY
23729: PPUSH
23730: LD_VAR 0 2
23734: PPUSH
23735: LD_VAR 0 5
23739: PPUSH
23740: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
23744: LD_VAR 0 6
23748: PUSH
23749: LD_INT 1
23751: ARRAY
23752: PPUSH
23753: LD_VAR 0 3
23757: PPUSH
23758: LD_VAR 0 4
23762: PPUSH
23763: CALL_OW 237
// end ;
23767: PPOPN 6
23769: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
23770: LD_EXP 51
23774: PUSH
23775: LD_EXP 98
23779: AND
23780: IFFALSE 23859
23782: GO 23784
23784: DISABLE
23785: LD_INT 0
23787: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
23788: LD_ADDR_VAR 0 1
23792: PUSH
23793: LD_INT 22
23795: PUSH
23796: LD_OWVAR 2
23800: PUSH
23801: EMPTY
23802: LIST
23803: LIST
23804: PUSH
23805: LD_INT 30
23807: PUSH
23808: LD_INT 3
23810: PUSH
23811: EMPTY
23812: LIST
23813: LIST
23814: PUSH
23815: EMPTY
23816: LIST
23817: LIST
23818: PPUSH
23819: CALL_OW 69
23823: ST_TO_ADDR
// if not tmp then
23824: LD_VAR 0 1
23828: NOT
23829: IFFALSE 23833
// exit ;
23831: GO 23859
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23833: LD_VAR 0 1
23837: PUSH
23838: LD_INT 1
23840: PPUSH
23841: LD_VAR 0 1
23845: PPUSH
23846: CALL_OW 12
23850: ARRAY
23851: PPUSH
23852: LD_INT 1
23854: PPUSH
23855: CALL_OW 234
// end ;
23859: PPOPN 1
23861: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
23862: LD_EXP 51
23866: PUSH
23867: LD_EXP 99
23871: AND
23872: IFFALSE 23984
23874: GO 23876
23876: DISABLE
23877: LD_INT 0
23879: PPUSH
23880: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
23881: LD_ADDR_VAR 0 2
23885: PUSH
23886: LD_INT 22
23888: PUSH
23889: LD_OWVAR 2
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: PUSH
23898: LD_INT 2
23900: PUSH
23901: LD_INT 30
23903: PUSH
23904: LD_INT 27
23906: PUSH
23907: EMPTY
23908: LIST
23909: LIST
23910: PUSH
23911: LD_INT 30
23913: PUSH
23914: LD_INT 26
23916: PUSH
23917: EMPTY
23918: LIST
23919: LIST
23920: PUSH
23921: LD_INT 30
23923: PUSH
23924: LD_INT 28
23926: PUSH
23927: EMPTY
23928: LIST
23929: LIST
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: PPUSH
23941: CALL_OW 69
23945: ST_TO_ADDR
// if not tmp then
23946: LD_VAR 0 2
23950: NOT
23951: IFFALSE 23955
// exit ;
23953: GO 23984
// for i in tmp do
23955: LD_ADDR_VAR 0 1
23959: PUSH
23960: LD_VAR 0 2
23964: PUSH
23965: FOR_IN
23966: IFFALSE 23982
// SetLives ( i , 1 ) ;
23968: LD_VAR 0 1
23972: PPUSH
23973: LD_INT 1
23975: PPUSH
23976: CALL_OW 234
23980: GO 23965
23982: POP
23983: POP
// end ;
23984: PPOPN 2
23986: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
23987: LD_EXP 51
23991: PUSH
23992: LD_EXP 100
23996: AND
23997: IFFALSE 24284
23999: GO 24001
24001: DISABLE
24002: LD_INT 0
24004: PPUSH
24005: PPUSH
24006: PPUSH
// begin i := rand ( 1 , 7 ) ;
24007: LD_ADDR_VAR 0 1
24011: PUSH
24012: LD_INT 1
24014: PPUSH
24015: LD_INT 7
24017: PPUSH
24018: CALL_OW 12
24022: ST_TO_ADDR
// case i of 1 :
24023: LD_VAR 0 1
24027: PUSH
24028: LD_INT 1
24030: DOUBLE
24031: EQUAL
24032: IFTRUE 24036
24034: GO 24046
24036: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
24037: LD_STRING earthquake(getX(game), 0, 32)
24039: PPUSH
24040: CALL_OW 559
24044: GO 24284
24046: LD_INT 2
24048: DOUBLE
24049: EQUAL
24050: IFTRUE 24054
24052: GO 24068
24054: POP
// begin ToLua ( displayStucuk(); ) ;
24055: LD_STRING displayStucuk();
24057: PPUSH
24058: CALL_OW 559
// ResetFog ;
24062: CALL_OW 335
// end ; 3 :
24066: GO 24284
24068: LD_INT 3
24070: DOUBLE
24071: EQUAL
24072: IFTRUE 24076
24074: GO 24180
24076: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24077: LD_ADDR_VAR 0 2
24081: PUSH
24082: LD_INT 22
24084: PUSH
24085: LD_OWVAR 2
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: PUSH
24094: LD_INT 25
24096: PUSH
24097: LD_INT 1
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: PUSH
24104: EMPTY
24105: LIST
24106: LIST
24107: PPUSH
24108: CALL_OW 69
24112: ST_TO_ADDR
// if not tmp then
24113: LD_VAR 0 2
24117: NOT
24118: IFFALSE 24122
// exit ;
24120: GO 24284
// un := tmp [ rand ( 1 , tmp ) ] ;
24122: LD_ADDR_VAR 0 3
24126: PUSH
24127: LD_VAR 0 2
24131: PUSH
24132: LD_INT 1
24134: PPUSH
24135: LD_VAR 0 2
24139: PPUSH
24140: CALL_OW 12
24144: ARRAY
24145: ST_TO_ADDR
// if Crawls ( un ) then
24146: LD_VAR 0 3
24150: PPUSH
24151: CALL_OW 318
24155: IFFALSE 24166
// ComWalk ( un ) ;
24157: LD_VAR 0 3
24161: PPUSH
24162: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24166: LD_VAR 0 3
24170: PPUSH
24171: LD_INT 8
24173: PPUSH
24174: CALL_OW 336
// end ; 4 :
24178: GO 24284
24180: LD_INT 4
24182: DOUBLE
24183: EQUAL
24184: IFTRUE 24188
24186: GO 24262
24188: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24189: LD_ADDR_VAR 0 2
24193: PUSH
24194: LD_INT 22
24196: PUSH
24197: LD_OWVAR 2
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: LD_INT 30
24208: PUSH
24209: LD_INT 29
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: PPUSH
24220: CALL_OW 69
24224: ST_TO_ADDR
// if not tmp then
24225: LD_VAR 0 2
24229: NOT
24230: IFFALSE 24234
// exit ;
24232: GO 24284
// CenterNowOnUnits ( tmp [ 1 ] ) ;
24234: LD_VAR 0 2
24238: PUSH
24239: LD_INT 1
24241: ARRAY
24242: PPUSH
24243: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
24247: LD_VAR 0 2
24251: PUSH
24252: LD_INT 1
24254: ARRAY
24255: PPUSH
24256: CALL_OW 65
// end ; 5 .. 7 :
24260: GO 24284
24262: LD_INT 5
24264: DOUBLE
24265: GREATEREQUAL
24266: IFFALSE 24274
24268: LD_INT 7
24270: DOUBLE
24271: LESSEQUAL
24272: IFTRUE 24276
24274: GO 24283
24276: POP
// StreamSibBomb ; end ;
24277: CALL 20521 0 0
24281: GO 24284
24283: POP
// end ;
24284: PPOPN 3
24286: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
24287: LD_EXP 51
24291: PUSH
24292: LD_EXP 101
24296: AND
24297: IFFALSE 24453
24299: GO 24301
24301: DISABLE
24302: LD_INT 0
24304: PPUSH
24305: PPUSH
24306: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
24307: LD_ADDR_VAR 0 2
24311: PUSH
24312: LD_INT 81
24314: PUSH
24315: LD_OWVAR 2
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: PUSH
24324: LD_INT 2
24326: PUSH
24327: LD_INT 21
24329: PUSH
24330: LD_INT 1
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: PUSH
24337: LD_INT 21
24339: PUSH
24340: LD_INT 2
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: PUSH
24347: EMPTY
24348: LIST
24349: LIST
24350: LIST
24351: PUSH
24352: EMPTY
24353: LIST
24354: LIST
24355: PPUSH
24356: CALL_OW 69
24360: ST_TO_ADDR
// if not tmp then
24361: LD_VAR 0 2
24365: NOT
24366: IFFALSE 24370
// exit ;
24368: GO 24453
// p := 0 ;
24370: LD_ADDR_VAR 0 3
24374: PUSH
24375: LD_INT 0
24377: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24378: LD_INT 35
24380: PPUSH
24381: CALL_OW 67
// p := p + 1 ;
24385: LD_ADDR_VAR 0 3
24389: PUSH
24390: LD_VAR 0 3
24394: PUSH
24395: LD_INT 1
24397: PLUS
24398: ST_TO_ADDR
// for i in tmp do
24399: LD_ADDR_VAR 0 1
24403: PUSH
24404: LD_VAR 0 2
24408: PUSH
24409: FOR_IN
24410: IFFALSE 24441
// if GetLives ( i ) < 1000 then
24412: LD_VAR 0 1
24416: PPUSH
24417: CALL_OW 256
24421: PUSH
24422: LD_INT 1000
24424: LESS
24425: IFFALSE 24439
// SetLives ( i , 1000 ) ;
24427: LD_VAR 0 1
24431: PPUSH
24432: LD_INT 1000
24434: PPUSH
24435: CALL_OW 234
24439: GO 24409
24441: POP
24442: POP
// until p > 20 ;
24443: LD_VAR 0 3
24447: PUSH
24448: LD_INT 20
24450: GREATER
24451: IFFALSE 24378
// end ;
24453: PPOPN 3
24455: END
// every 0 0$1 trigger StreamModeActive and sTime do
24456: LD_EXP 51
24460: PUSH
24461: LD_EXP 102
24465: AND
24466: IFFALSE 24501
24468: GO 24470
24470: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
24471: LD_INT 28
24473: PPUSH
24474: LD_OWVAR 2
24478: PPUSH
24479: LD_INT 2
24481: PPUSH
24482: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
24486: LD_INT 30
24488: PPUSH
24489: LD_OWVAR 2
24493: PPUSH
24494: LD_INT 2
24496: PPUSH
24497: CALL_OW 322
// end ;
24501: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
24502: LD_EXP 51
24506: PUSH
24507: LD_EXP 103
24511: AND
24512: IFFALSE 24633
24514: GO 24516
24516: DISABLE
24517: LD_INT 0
24519: PPUSH
24520: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24521: LD_ADDR_VAR 0 2
24525: PUSH
24526: LD_INT 22
24528: PUSH
24529: LD_OWVAR 2
24533: PUSH
24534: EMPTY
24535: LIST
24536: LIST
24537: PUSH
24538: LD_INT 21
24540: PUSH
24541: LD_INT 1
24543: PUSH
24544: EMPTY
24545: LIST
24546: LIST
24547: PUSH
24548: LD_INT 3
24550: PUSH
24551: LD_INT 23
24553: PUSH
24554: LD_INT 0
24556: PUSH
24557: EMPTY
24558: LIST
24559: LIST
24560: PUSH
24561: EMPTY
24562: LIST
24563: LIST
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: LIST
24569: PPUSH
24570: CALL_OW 69
24574: ST_TO_ADDR
// if not tmp then
24575: LD_VAR 0 2
24579: NOT
24580: IFFALSE 24584
// exit ;
24582: GO 24633
// for i in tmp do
24584: LD_ADDR_VAR 0 1
24588: PUSH
24589: LD_VAR 0 2
24593: PUSH
24594: FOR_IN
24595: IFFALSE 24631
// begin if Crawls ( i ) then
24597: LD_VAR 0 1
24601: PPUSH
24602: CALL_OW 318
24606: IFFALSE 24617
// ComWalk ( i ) ;
24608: LD_VAR 0 1
24612: PPUSH
24613: CALL_OW 138
// SetClass ( i , 2 ) ;
24617: LD_VAR 0 1
24621: PPUSH
24622: LD_INT 2
24624: PPUSH
24625: CALL_OW 336
// end ;
24629: GO 24594
24631: POP
24632: POP
// end ;
24633: PPOPN 2
24635: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
24636: LD_EXP 51
24640: PUSH
24641: LD_EXP 104
24645: AND
24646: IFFALSE 24934
24648: GO 24650
24650: DISABLE
24651: LD_INT 0
24653: PPUSH
24654: PPUSH
24655: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
24656: LD_OWVAR 2
24660: PPUSH
24661: LD_INT 9
24663: PPUSH
24664: LD_INT 1
24666: PPUSH
24667: LD_INT 1
24669: PPUSH
24670: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
24674: LD_INT 9
24676: PPUSH
24677: LD_OWVAR 2
24681: PPUSH
24682: CALL_OW 343
// uc_side := 9 ;
24686: LD_ADDR_OWVAR 20
24690: PUSH
24691: LD_INT 9
24693: ST_TO_ADDR
// uc_nation := 2 ;
24694: LD_ADDR_OWVAR 21
24698: PUSH
24699: LD_INT 2
24701: ST_TO_ADDR
// hc_name := Dark Warrior ;
24702: LD_ADDR_OWVAR 26
24706: PUSH
24707: LD_STRING Dark Warrior
24709: ST_TO_ADDR
// hc_gallery :=  ;
24710: LD_ADDR_OWVAR 33
24714: PUSH
24715: LD_STRING 
24717: ST_TO_ADDR
// hc_noskilllimit := true ;
24718: LD_ADDR_OWVAR 76
24722: PUSH
24723: LD_INT 1
24725: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
24726: LD_ADDR_OWVAR 31
24730: PUSH
24731: LD_INT 30
24733: PUSH
24734: LD_INT 30
24736: PUSH
24737: LD_INT 30
24739: PUSH
24740: LD_INT 30
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: ST_TO_ADDR
// un := CreateHuman ;
24749: LD_ADDR_VAR 0 3
24753: PUSH
24754: CALL_OW 44
24758: ST_TO_ADDR
// hc_noskilllimit := false ;
24759: LD_ADDR_OWVAR 76
24763: PUSH
24764: LD_INT 0
24766: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24767: LD_VAR 0 3
24771: PPUSH
24772: LD_INT 1
24774: PPUSH
24775: CALL_OW 51
// ToLua ( playRanger() ) ;
24779: LD_STRING playRanger()
24781: PPUSH
24782: CALL_OW 559
// p := 0 ;
24786: LD_ADDR_VAR 0 2
24790: PUSH
24791: LD_INT 0
24793: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24794: LD_INT 35
24796: PPUSH
24797: CALL_OW 67
// p := p + 1 ;
24801: LD_ADDR_VAR 0 2
24805: PUSH
24806: LD_VAR 0 2
24810: PUSH
24811: LD_INT 1
24813: PLUS
24814: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
24815: LD_VAR 0 3
24819: PPUSH
24820: CALL_OW 256
24824: PUSH
24825: LD_INT 1000
24827: LESS
24828: IFFALSE 24842
// SetLives ( un , 1000 ) ;
24830: LD_VAR 0 3
24834: PPUSH
24835: LD_INT 1000
24837: PPUSH
24838: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
24842: LD_VAR 0 3
24846: PPUSH
24847: LD_INT 81
24849: PUSH
24850: LD_OWVAR 2
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: PUSH
24859: LD_INT 91
24861: PUSH
24862: LD_VAR 0 3
24866: PUSH
24867: LD_INT 30
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: LIST
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: PPUSH
24879: CALL_OW 69
24883: PPUSH
24884: LD_VAR 0 3
24888: PPUSH
24889: CALL_OW 74
24893: PPUSH
24894: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
24898: LD_VAR 0 2
24902: PUSH
24903: LD_INT 80
24905: GREATER
24906: PUSH
24907: LD_VAR 0 3
24911: PPUSH
24912: CALL_OW 301
24916: OR
24917: IFFALSE 24794
// if un then
24919: LD_VAR 0 3
24923: IFFALSE 24934
// RemoveUnit ( un ) ;
24925: LD_VAR 0 3
24929: PPUSH
24930: CALL_OW 64
// end ;
24934: PPOPN 3
24936: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
24937: LD_EXP 105
24941: IFFALSE 25057
24943: GO 24945
24945: DISABLE
24946: LD_INT 0
24948: PPUSH
24949: PPUSH
24950: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24951: LD_ADDR_VAR 0 2
24955: PUSH
24956: LD_INT 81
24958: PUSH
24959: LD_OWVAR 2
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: PUSH
24968: LD_INT 21
24970: PUSH
24971: LD_INT 1
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: PPUSH
24982: CALL_OW 69
24986: ST_TO_ADDR
// ToLua ( playComputer() ) ;
24987: LD_STRING playComputer()
24989: PPUSH
24990: CALL_OW 559
// if not tmp then
24994: LD_VAR 0 2
24998: NOT
24999: IFFALSE 25003
// exit ;
25001: GO 25057
// for i in tmp do
25003: LD_ADDR_VAR 0 1
25007: PUSH
25008: LD_VAR 0 2
25012: PUSH
25013: FOR_IN
25014: IFFALSE 25055
// for j := 1 to 4 do
25016: LD_ADDR_VAR 0 3
25020: PUSH
25021: DOUBLE
25022: LD_INT 1
25024: DEC
25025: ST_TO_ADDR
25026: LD_INT 4
25028: PUSH
25029: FOR_TO
25030: IFFALSE 25051
// SetSkill ( i , j , 10 ) ;
25032: LD_VAR 0 1
25036: PPUSH
25037: LD_VAR 0 3
25041: PPUSH
25042: LD_INT 10
25044: PPUSH
25045: CALL_OW 237
25049: GO 25029
25051: POP
25052: POP
25053: GO 25013
25055: POP
25056: POP
// end ;
25057: PPOPN 3
25059: END
// every 0 0$1 trigger s30 do var i , tmp ;
25060: LD_EXP 106
25064: IFFALSE 25133
25066: GO 25068
25068: DISABLE
25069: LD_INT 0
25071: PPUSH
25072: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25073: LD_ADDR_VAR 0 2
25077: PUSH
25078: LD_INT 22
25080: PUSH
25081: LD_OWVAR 2
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PPUSH
25090: CALL_OW 69
25094: ST_TO_ADDR
// if not tmp then
25095: LD_VAR 0 2
25099: NOT
25100: IFFALSE 25104
// exit ;
25102: GO 25133
// for i in tmp do
25104: LD_ADDR_VAR 0 1
25108: PUSH
25109: LD_VAR 0 2
25113: PUSH
25114: FOR_IN
25115: IFFALSE 25131
// SetLives ( i , 300 ) ;
25117: LD_VAR 0 1
25121: PPUSH
25122: LD_INT 300
25124: PPUSH
25125: CALL_OW 234
25129: GO 25114
25131: POP
25132: POP
// end ;
25133: PPOPN 2
25135: END
// every 0 0$1 trigger s60 do var i , tmp ;
25136: LD_EXP 107
25140: IFFALSE 25209
25142: GO 25144
25144: DISABLE
25145: LD_INT 0
25147: PPUSH
25148: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25149: LD_ADDR_VAR 0 2
25153: PUSH
25154: LD_INT 22
25156: PUSH
25157: LD_OWVAR 2
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: PPUSH
25166: CALL_OW 69
25170: ST_TO_ADDR
// if not tmp then
25171: LD_VAR 0 2
25175: NOT
25176: IFFALSE 25180
// exit ;
25178: GO 25209
// for i in tmp do
25180: LD_ADDR_VAR 0 1
25184: PUSH
25185: LD_VAR 0 2
25189: PUSH
25190: FOR_IN
25191: IFFALSE 25207
// SetLives ( i , 600 ) ;
25193: LD_VAR 0 1
25197: PPUSH
25198: LD_INT 600
25200: PPUSH
25201: CALL_OW 234
25205: GO 25190
25207: POP
25208: POP
// end ;
25209: PPOPN 2
25211: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
25212: LD_INT 0
25214: PPUSH
// case cmd of 301 :
25215: LD_VAR 0 1
25219: PUSH
25220: LD_INT 301
25222: DOUBLE
25223: EQUAL
25224: IFTRUE 25228
25226: GO 25260
25228: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
25229: LD_VAR 0 6
25233: PPUSH
25234: LD_VAR 0 7
25238: PPUSH
25239: LD_VAR 0 8
25243: PPUSH
25244: LD_VAR 0 4
25248: PPUSH
25249: LD_VAR 0 5
25253: PPUSH
25254: CALL 26461 0 5
25258: GO 25381
25260: LD_INT 302
25262: DOUBLE
25263: EQUAL
25264: IFTRUE 25268
25266: GO 25305
25268: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
25269: LD_VAR 0 6
25273: PPUSH
25274: LD_VAR 0 7
25278: PPUSH
25279: LD_VAR 0 8
25283: PPUSH
25284: LD_VAR 0 9
25288: PPUSH
25289: LD_VAR 0 4
25293: PPUSH
25294: LD_VAR 0 5
25298: PPUSH
25299: CALL 26552 0 6
25303: GO 25381
25305: LD_INT 303
25307: DOUBLE
25308: EQUAL
25309: IFTRUE 25313
25311: GO 25350
25313: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
25314: LD_VAR 0 6
25318: PPUSH
25319: LD_VAR 0 7
25323: PPUSH
25324: LD_VAR 0 8
25328: PPUSH
25329: LD_VAR 0 9
25333: PPUSH
25334: LD_VAR 0 4
25338: PPUSH
25339: LD_VAR 0 5
25343: PPUSH
25344: CALL 25386 0 6
25348: GO 25381
25350: LD_INT 304
25352: DOUBLE
25353: EQUAL
25354: IFTRUE 25358
25356: GO 25380
25358: POP
// hHackTeleport ( unit , x , y ) ; end ;
25359: LD_VAR 0 2
25363: PPUSH
25364: LD_VAR 0 4
25368: PPUSH
25369: LD_VAR 0 5
25373: PPUSH
25374: CALL 27145 0 3
25378: GO 25381
25380: POP
// end ;
25381: LD_VAR 0 12
25385: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
25386: LD_INT 0
25388: PPUSH
25389: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
25390: LD_VAR 0 1
25394: PUSH
25395: LD_INT 1
25397: LESS
25398: PUSH
25399: LD_VAR 0 1
25403: PUSH
25404: LD_INT 3
25406: GREATER
25407: OR
25408: PUSH
25409: LD_VAR 0 5
25413: PPUSH
25414: LD_VAR 0 6
25418: PPUSH
25419: CALL_OW 428
25423: OR
25424: IFFALSE 25428
// exit ;
25426: GO 26148
// uc_side := your_side ;
25428: LD_ADDR_OWVAR 20
25432: PUSH
25433: LD_OWVAR 2
25437: ST_TO_ADDR
// uc_nation := nation ;
25438: LD_ADDR_OWVAR 21
25442: PUSH
25443: LD_VAR 0 1
25447: ST_TO_ADDR
// bc_level = 1 ;
25448: LD_ADDR_OWVAR 43
25452: PUSH
25453: LD_INT 1
25455: ST_TO_ADDR
// case btype of 1 :
25456: LD_VAR 0 2
25460: PUSH
25461: LD_INT 1
25463: DOUBLE
25464: EQUAL
25465: IFTRUE 25469
25467: GO 25480
25469: POP
// bc_type := b_depot ; 2 :
25470: LD_ADDR_OWVAR 42
25474: PUSH
25475: LD_INT 0
25477: ST_TO_ADDR
25478: GO 26092
25480: LD_INT 2
25482: DOUBLE
25483: EQUAL
25484: IFTRUE 25488
25486: GO 25499
25488: POP
// bc_type := b_warehouse ; 3 :
25489: LD_ADDR_OWVAR 42
25493: PUSH
25494: LD_INT 1
25496: ST_TO_ADDR
25497: GO 26092
25499: LD_INT 3
25501: DOUBLE
25502: EQUAL
25503: IFTRUE 25507
25505: GO 25518
25507: POP
// bc_type := b_lab ; 4 .. 9 :
25508: LD_ADDR_OWVAR 42
25512: PUSH
25513: LD_INT 6
25515: ST_TO_ADDR
25516: GO 26092
25518: LD_INT 4
25520: DOUBLE
25521: GREATEREQUAL
25522: IFFALSE 25530
25524: LD_INT 9
25526: DOUBLE
25527: LESSEQUAL
25528: IFTRUE 25532
25530: GO 25584
25532: POP
// begin bc_type := b_lab_half ;
25533: LD_ADDR_OWVAR 42
25537: PUSH
25538: LD_INT 7
25540: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
25541: LD_ADDR_OWVAR 44
25545: PUSH
25546: LD_INT 10
25548: PUSH
25549: LD_INT 11
25551: PUSH
25552: LD_INT 12
25554: PUSH
25555: LD_INT 15
25557: PUSH
25558: LD_INT 14
25560: PUSH
25561: LD_INT 13
25563: PUSH
25564: EMPTY
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: PUSH
25572: LD_VAR 0 2
25576: PUSH
25577: LD_INT 3
25579: MINUS
25580: ARRAY
25581: ST_TO_ADDR
// end ; 10 .. 13 :
25582: GO 26092
25584: LD_INT 10
25586: DOUBLE
25587: GREATEREQUAL
25588: IFFALSE 25596
25590: LD_INT 13
25592: DOUBLE
25593: LESSEQUAL
25594: IFTRUE 25598
25596: GO 25675
25598: POP
// begin bc_type := b_lab_full ;
25599: LD_ADDR_OWVAR 42
25603: PUSH
25604: LD_INT 8
25606: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
25607: LD_ADDR_OWVAR 44
25611: PUSH
25612: LD_INT 10
25614: PUSH
25615: LD_INT 12
25617: PUSH
25618: LD_INT 14
25620: PUSH
25621: LD_INT 13
25623: PUSH
25624: EMPTY
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: PUSH
25630: LD_VAR 0 2
25634: PUSH
25635: LD_INT 9
25637: MINUS
25638: ARRAY
25639: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
25640: LD_ADDR_OWVAR 45
25644: PUSH
25645: LD_INT 11
25647: PUSH
25648: LD_INT 15
25650: PUSH
25651: LD_INT 12
25653: PUSH
25654: LD_INT 15
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: PUSH
25663: LD_VAR 0 2
25667: PUSH
25668: LD_INT 9
25670: MINUS
25671: ARRAY
25672: ST_TO_ADDR
// end ; 14 :
25673: GO 26092
25675: LD_INT 14
25677: DOUBLE
25678: EQUAL
25679: IFTRUE 25683
25681: GO 25694
25683: POP
// bc_type := b_workshop ; 15 :
25684: LD_ADDR_OWVAR 42
25688: PUSH
25689: LD_INT 2
25691: ST_TO_ADDR
25692: GO 26092
25694: LD_INT 15
25696: DOUBLE
25697: EQUAL
25698: IFTRUE 25702
25700: GO 25713
25702: POP
// bc_type := b_factory ; 16 :
25703: LD_ADDR_OWVAR 42
25707: PUSH
25708: LD_INT 3
25710: ST_TO_ADDR
25711: GO 26092
25713: LD_INT 16
25715: DOUBLE
25716: EQUAL
25717: IFTRUE 25721
25719: GO 25732
25721: POP
// bc_type := b_ext_gun ; 17 :
25722: LD_ADDR_OWVAR 42
25726: PUSH
25727: LD_INT 17
25729: ST_TO_ADDR
25730: GO 26092
25732: LD_INT 17
25734: DOUBLE
25735: EQUAL
25736: IFTRUE 25740
25738: GO 25768
25740: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
25741: LD_ADDR_OWVAR 42
25745: PUSH
25746: LD_INT 19
25748: PUSH
25749: LD_INT 23
25751: PUSH
25752: LD_INT 19
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: LIST
25759: PUSH
25760: LD_VAR 0 1
25764: ARRAY
25765: ST_TO_ADDR
25766: GO 26092
25768: LD_INT 18
25770: DOUBLE
25771: EQUAL
25772: IFTRUE 25776
25774: GO 25787
25776: POP
// bc_type := b_ext_radar ; 19 :
25777: LD_ADDR_OWVAR 42
25781: PUSH
25782: LD_INT 20
25784: ST_TO_ADDR
25785: GO 26092
25787: LD_INT 19
25789: DOUBLE
25790: EQUAL
25791: IFTRUE 25795
25793: GO 25806
25795: POP
// bc_type := b_ext_radio ; 20 :
25796: LD_ADDR_OWVAR 42
25800: PUSH
25801: LD_INT 22
25803: ST_TO_ADDR
25804: GO 26092
25806: LD_INT 20
25808: DOUBLE
25809: EQUAL
25810: IFTRUE 25814
25812: GO 25825
25814: POP
// bc_type := b_ext_siberium ; 21 :
25815: LD_ADDR_OWVAR 42
25819: PUSH
25820: LD_INT 21
25822: ST_TO_ADDR
25823: GO 26092
25825: LD_INT 21
25827: DOUBLE
25828: EQUAL
25829: IFTRUE 25833
25831: GO 25844
25833: POP
// bc_type := b_ext_computer ; 22 :
25834: LD_ADDR_OWVAR 42
25838: PUSH
25839: LD_INT 24
25841: ST_TO_ADDR
25842: GO 26092
25844: LD_INT 22
25846: DOUBLE
25847: EQUAL
25848: IFTRUE 25852
25850: GO 25863
25852: POP
// bc_type := b_ext_track ; 23 :
25853: LD_ADDR_OWVAR 42
25857: PUSH
25858: LD_INT 16
25860: ST_TO_ADDR
25861: GO 26092
25863: LD_INT 23
25865: DOUBLE
25866: EQUAL
25867: IFTRUE 25871
25869: GO 25882
25871: POP
// bc_type := b_ext_laser ; 24 :
25872: LD_ADDR_OWVAR 42
25876: PUSH
25877: LD_INT 25
25879: ST_TO_ADDR
25880: GO 26092
25882: LD_INT 24
25884: DOUBLE
25885: EQUAL
25886: IFTRUE 25890
25888: GO 25901
25890: POP
// bc_type := b_control_tower ; 25 :
25891: LD_ADDR_OWVAR 42
25895: PUSH
25896: LD_INT 36
25898: ST_TO_ADDR
25899: GO 26092
25901: LD_INT 25
25903: DOUBLE
25904: EQUAL
25905: IFTRUE 25909
25907: GO 25920
25909: POP
// bc_type := b_breastwork ; 26 :
25910: LD_ADDR_OWVAR 42
25914: PUSH
25915: LD_INT 31
25917: ST_TO_ADDR
25918: GO 26092
25920: LD_INT 26
25922: DOUBLE
25923: EQUAL
25924: IFTRUE 25928
25926: GO 25939
25928: POP
// bc_type := b_bunker ; 27 :
25929: LD_ADDR_OWVAR 42
25933: PUSH
25934: LD_INT 32
25936: ST_TO_ADDR
25937: GO 26092
25939: LD_INT 27
25941: DOUBLE
25942: EQUAL
25943: IFTRUE 25947
25945: GO 25958
25947: POP
// bc_type := b_turret ; 28 :
25948: LD_ADDR_OWVAR 42
25952: PUSH
25953: LD_INT 33
25955: ST_TO_ADDR
25956: GO 26092
25958: LD_INT 28
25960: DOUBLE
25961: EQUAL
25962: IFTRUE 25966
25964: GO 25977
25966: POP
// bc_type := b_armoury ; 29 :
25967: LD_ADDR_OWVAR 42
25971: PUSH
25972: LD_INT 4
25974: ST_TO_ADDR
25975: GO 26092
25977: LD_INT 29
25979: DOUBLE
25980: EQUAL
25981: IFTRUE 25985
25983: GO 25996
25985: POP
// bc_type := b_barracks ; 30 :
25986: LD_ADDR_OWVAR 42
25990: PUSH
25991: LD_INT 5
25993: ST_TO_ADDR
25994: GO 26092
25996: LD_INT 30
25998: DOUBLE
25999: EQUAL
26000: IFTRUE 26004
26002: GO 26015
26004: POP
// bc_type := b_solar_power ; 31 :
26005: LD_ADDR_OWVAR 42
26009: PUSH
26010: LD_INT 27
26012: ST_TO_ADDR
26013: GO 26092
26015: LD_INT 31
26017: DOUBLE
26018: EQUAL
26019: IFTRUE 26023
26021: GO 26034
26023: POP
// bc_type := b_oil_power ; 32 :
26024: LD_ADDR_OWVAR 42
26028: PUSH
26029: LD_INT 26
26031: ST_TO_ADDR
26032: GO 26092
26034: LD_INT 32
26036: DOUBLE
26037: EQUAL
26038: IFTRUE 26042
26040: GO 26053
26042: POP
// bc_type := b_siberite_power ; 33 :
26043: LD_ADDR_OWVAR 42
26047: PUSH
26048: LD_INT 28
26050: ST_TO_ADDR
26051: GO 26092
26053: LD_INT 33
26055: DOUBLE
26056: EQUAL
26057: IFTRUE 26061
26059: GO 26072
26061: POP
// bc_type := b_oil_mine ; 34 :
26062: LD_ADDR_OWVAR 42
26066: PUSH
26067: LD_INT 29
26069: ST_TO_ADDR
26070: GO 26092
26072: LD_INT 34
26074: DOUBLE
26075: EQUAL
26076: IFTRUE 26080
26078: GO 26091
26080: POP
// bc_type := b_siberite_mine ; end ;
26081: LD_ADDR_OWVAR 42
26085: PUSH
26086: LD_INT 30
26088: ST_TO_ADDR
26089: GO 26092
26091: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
26092: LD_ADDR_VAR 0 8
26096: PUSH
26097: LD_VAR 0 5
26101: PPUSH
26102: LD_VAR 0 6
26106: PPUSH
26107: LD_VAR 0 3
26111: PPUSH
26112: CALL_OW 47
26116: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
26117: LD_OWVAR 42
26121: PUSH
26122: LD_INT 32
26124: PUSH
26125: LD_INT 33
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: IN
26132: IFFALSE 26148
// PlaceWeaponTurret ( b , weapon ) ;
26134: LD_VAR 0 8
26138: PPUSH
26139: LD_VAR 0 4
26143: PPUSH
26144: CALL_OW 431
// end ;
26148: LD_VAR 0 7
26152: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
26153: LD_INT 0
26155: PPUSH
26156: PPUSH
26157: PPUSH
26158: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26159: LD_ADDR_VAR 0 4
26163: PUSH
26164: LD_INT 22
26166: PUSH
26167: LD_OWVAR 2
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: LD_INT 2
26178: PUSH
26179: LD_INT 30
26181: PUSH
26182: LD_INT 0
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: LD_INT 30
26191: PUSH
26192: LD_INT 1
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: LIST
26203: PUSH
26204: EMPTY
26205: LIST
26206: LIST
26207: PPUSH
26208: CALL_OW 69
26212: ST_TO_ADDR
// if not tmp then
26213: LD_VAR 0 4
26217: NOT
26218: IFFALSE 26222
// exit ;
26220: GO 26281
// for i in tmp do
26222: LD_ADDR_VAR 0 2
26226: PUSH
26227: LD_VAR 0 4
26231: PUSH
26232: FOR_IN
26233: IFFALSE 26279
// for j = 1 to 3 do
26235: LD_ADDR_VAR 0 3
26239: PUSH
26240: DOUBLE
26241: LD_INT 1
26243: DEC
26244: ST_TO_ADDR
26245: LD_INT 3
26247: PUSH
26248: FOR_TO
26249: IFFALSE 26275
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
26251: LD_VAR 0 2
26255: PPUSH
26256: CALL_OW 274
26260: PPUSH
26261: LD_VAR 0 3
26265: PPUSH
26266: LD_INT 99999
26268: PPUSH
26269: CALL_OW 277
26273: GO 26248
26275: POP
26276: POP
26277: GO 26232
26279: POP
26280: POP
// end ;
26281: LD_VAR 0 1
26285: RET
// export function hHackSetLevel10 ; var i , j ; begin
26286: LD_INT 0
26288: PPUSH
26289: PPUSH
26290: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26291: LD_ADDR_VAR 0 2
26295: PUSH
26296: LD_INT 21
26298: PUSH
26299: LD_INT 1
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: PPUSH
26306: CALL_OW 69
26310: PUSH
26311: FOR_IN
26312: IFFALSE 26364
// if IsSelected ( i ) then
26314: LD_VAR 0 2
26318: PPUSH
26319: CALL_OW 306
26323: IFFALSE 26362
// begin for j := 1 to 4 do
26325: LD_ADDR_VAR 0 3
26329: PUSH
26330: DOUBLE
26331: LD_INT 1
26333: DEC
26334: ST_TO_ADDR
26335: LD_INT 4
26337: PUSH
26338: FOR_TO
26339: IFFALSE 26360
// SetSkill ( i , j , 10 ) ;
26341: LD_VAR 0 2
26345: PPUSH
26346: LD_VAR 0 3
26350: PPUSH
26351: LD_INT 10
26353: PPUSH
26354: CALL_OW 237
26358: GO 26338
26360: POP
26361: POP
// end ;
26362: GO 26311
26364: POP
26365: POP
// end ;
26366: LD_VAR 0 1
26370: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
26371: LD_INT 0
26373: PPUSH
26374: PPUSH
26375: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
26376: LD_ADDR_VAR 0 2
26380: PUSH
26381: LD_INT 22
26383: PUSH
26384: LD_OWVAR 2
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: PUSH
26393: LD_INT 21
26395: PUSH
26396: LD_INT 1
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PPUSH
26407: CALL_OW 69
26411: PUSH
26412: FOR_IN
26413: IFFALSE 26454
// begin for j := 1 to 4 do
26415: LD_ADDR_VAR 0 3
26419: PUSH
26420: DOUBLE
26421: LD_INT 1
26423: DEC
26424: ST_TO_ADDR
26425: LD_INT 4
26427: PUSH
26428: FOR_TO
26429: IFFALSE 26450
// SetSkill ( i , j , 10 ) ;
26431: LD_VAR 0 2
26435: PPUSH
26436: LD_VAR 0 3
26440: PPUSH
26441: LD_INT 10
26443: PPUSH
26444: CALL_OW 237
26448: GO 26428
26450: POP
26451: POP
// end ;
26452: GO 26412
26454: POP
26455: POP
// end ;
26456: LD_VAR 0 1
26460: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
26461: LD_INT 0
26463: PPUSH
// uc_side := your_side ;
26464: LD_ADDR_OWVAR 20
26468: PUSH
26469: LD_OWVAR 2
26473: ST_TO_ADDR
// uc_nation := nation ;
26474: LD_ADDR_OWVAR 21
26478: PUSH
26479: LD_VAR 0 1
26483: ST_TO_ADDR
// InitHc ;
26484: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
26488: LD_INT 0
26490: PPUSH
26491: LD_VAR 0 2
26495: PPUSH
26496: LD_VAR 0 3
26500: PPUSH
26501: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
26505: LD_VAR 0 4
26509: PPUSH
26510: LD_VAR 0 5
26514: PPUSH
26515: CALL_OW 428
26519: PUSH
26520: LD_INT 0
26522: EQUAL
26523: IFFALSE 26547
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
26525: CALL_OW 44
26529: PPUSH
26530: LD_VAR 0 4
26534: PPUSH
26535: LD_VAR 0 5
26539: PPUSH
26540: LD_INT 1
26542: PPUSH
26543: CALL_OW 48
// end ;
26547: LD_VAR 0 6
26551: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
26552: LD_INT 0
26554: PPUSH
26555: PPUSH
// uc_side := your_side ;
26556: LD_ADDR_OWVAR 20
26560: PUSH
26561: LD_OWVAR 2
26565: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
26566: LD_VAR 0 1
26570: PUSH
26571: LD_INT 1
26573: PUSH
26574: LD_INT 2
26576: PUSH
26577: LD_INT 3
26579: PUSH
26580: LD_INT 4
26582: PUSH
26583: LD_INT 5
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: IN
26593: IFFALSE 26605
// uc_nation := nation_american else
26595: LD_ADDR_OWVAR 21
26599: PUSH
26600: LD_INT 1
26602: ST_TO_ADDR
26603: GO 26648
// if chassis in [ 11 , 12 , 13 , 14 ] then
26605: LD_VAR 0 1
26609: PUSH
26610: LD_INT 11
26612: PUSH
26613: LD_INT 12
26615: PUSH
26616: LD_INT 13
26618: PUSH
26619: LD_INT 14
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: LIST
26626: LIST
26627: IN
26628: IFFALSE 26640
// uc_nation := nation_arabian else
26630: LD_ADDR_OWVAR 21
26634: PUSH
26635: LD_INT 2
26637: ST_TO_ADDR
26638: GO 26648
// uc_nation := nation_russian ;
26640: LD_ADDR_OWVAR 21
26644: PUSH
26645: LD_INT 3
26647: ST_TO_ADDR
// vc_chassis := chassis ;
26648: LD_ADDR_OWVAR 37
26652: PUSH
26653: LD_VAR 0 1
26657: ST_TO_ADDR
// vc_engine := engine ;
26658: LD_ADDR_OWVAR 39
26662: PUSH
26663: LD_VAR 0 2
26667: ST_TO_ADDR
// vc_control := control ;
26668: LD_ADDR_OWVAR 38
26672: PUSH
26673: LD_VAR 0 3
26677: ST_TO_ADDR
// vc_weapon := weapon ;
26678: LD_ADDR_OWVAR 40
26682: PUSH
26683: LD_VAR 0 4
26687: ST_TO_ADDR
// un := CreateVehicle ;
26688: LD_ADDR_VAR 0 8
26692: PUSH
26693: CALL_OW 45
26697: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
26698: LD_VAR 0 8
26702: PPUSH
26703: LD_INT 0
26705: PPUSH
26706: LD_INT 5
26708: PPUSH
26709: CALL_OW 12
26713: PPUSH
26714: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
26718: LD_VAR 0 8
26722: PPUSH
26723: LD_VAR 0 5
26727: PPUSH
26728: LD_VAR 0 6
26732: PPUSH
26733: LD_INT 1
26735: PPUSH
26736: CALL_OW 48
// end ;
26740: LD_VAR 0 7
26744: RET
// export hInvincible ; every 1 do
26745: GO 26747
26747: DISABLE
// hInvincible := [ ] ;
26748: LD_ADDR_EXP 108
26752: PUSH
26753: EMPTY
26754: ST_TO_ADDR
26755: END
// every 10 do var i ;
26756: GO 26758
26758: DISABLE
26759: LD_INT 0
26761: PPUSH
// begin enable ;
26762: ENABLE
// if not hInvincible then
26763: LD_EXP 108
26767: NOT
26768: IFFALSE 26772
// exit ;
26770: GO 26816
// for i in hInvincible do
26772: LD_ADDR_VAR 0 1
26776: PUSH
26777: LD_EXP 108
26781: PUSH
26782: FOR_IN
26783: IFFALSE 26814
// if GetLives ( i ) < 1000 then
26785: LD_VAR 0 1
26789: PPUSH
26790: CALL_OW 256
26794: PUSH
26795: LD_INT 1000
26797: LESS
26798: IFFALSE 26812
// SetLives ( i , 1000 ) ;
26800: LD_VAR 0 1
26804: PPUSH
26805: LD_INT 1000
26807: PPUSH
26808: CALL_OW 234
26812: GO 26782
26814: POP
26815: POP
// end ;
26816: PPOPN 1
26818: END
// export function hHackInvincible ; var i ; begin
26819: LD_INT 0
26821: PPUSH
26822: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
26823: LD_ADDR_VAR 0 2
26827: PUSH
26828: LD_INT 2
26830: PUSH
26831: LD_INT 21
26833: PUSH
26834: LD_INT 1
26836: PUSH
26837: EMPTY
26838: LIST
26839: LIST
26840: PUSH
26841: LD_INT 21
26843: PUSH
26844: LD_INT 2
26846: PUSH
26847: EMPTY
26848: LIST
26849: LIST
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: LIST
26855: PPUSH
26856: CALL_OW 69
26860: PUSH
26861: FOR_IN
26862: IFFALSE 26923
// if IsSelected ( i ) then
26864: LD_VAR 0 2
26868: PPUSH
26869: CALL_OW 306
26873: IFFALSE 26921
// begin if i in hInvincible then
26875: LD_VAR 0 2
26879: PUSH
26880: LD_EXP 108
26884: IN
26885: IFFALSE 26905
// hInvincible := hInvincible diff i else
26887: LD_ADDR_EXP 108
26891: PUSH
26892: LD_EXP 108
26896: PUSH
26897: LD_VAR 0 2
26901: DIFF
26902: ST_TO_ADDR
26903: GO 26921
// hInvincible := hInvincible union i ;
26905: LD_ADDR_EXP 108
26909: PUSH
26910: LD_EXP 108
26914: PUSH
26915: LD_VAR 0 2
26919: UNION
26920: ST_TO_ADDR
// end ;
26921: GO 26861
26923: POP
26924: POP
// end ;
26925: LD_VAR 0 1
26929: RET
// export function hHackInvisible ; var i , j ; begin
26930: LD_INT 0
26932: PPUSH
26933: PPUSH
26934: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26935: LD_ADDR_VAR 0 2
26939: PUSH
26940: LD_INT 21
26942: PUSH
26943: LD_INT 1
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: PPUSH
26950: CALL_OW 69
26954: PUSH
26955: FOR_IN
26956: IFFALSE 26980
// if IsSelected ( i ) then
26958: LD_VAR 0 2
26962: PPUSH
26963: CALL_OW 306
26967: IFFALSE 26978
// ComForceInvisible ( i ) ;
26969: LD_VAR 0 2
26973: PPUSH
26974: CALL_OW 496
26978: GO 26955
26980: POP
26981: POP
// end ;
26982: LD_VAR 0 1
26986: RET
// export function hHackChangeYourSide ; begin
26987: LD_INT 0
26989: PPUSH
// if your_side = 8 then
26990: LD_OWVAR 2
26994: PUSH
26995: LD_INT 8
26997: EQUAL
26998: IFFALSE 27010
// your_side := 0 else
27000: LD_ADDR_OWVAR 2
27004: PUSH
27005: LD_INT 0
27007: ST_TO_ADDR
27008: GO 27024
// your_side := your_side + 1 ;
27010: LD_ADDR_OWVAR 2
27014: PUSH
27015: LD_OWVAR 2
27019: PUSH
27020: LD_INT 1
27022: PLUS
27023: ST_TO_ADDR
// end ;
27024: LD_VAR 0 1
27028: RET
// export function hHackChangeUnitSide ; var i , j ; begin
27029: LD_INT 0
27031: PPUSH
27032: PPUSH
27033: PPUSH
// for i in all_units do
27034: LD_ADDR_VAR 0 2
27038: PUSH
27039: LD_OWVAR 3
27043: PUSH
27044: FOR_IN
27045: IFFALSE 27123
// if IsSelected ( i ) then
27047: LD_VAR 0 2
27051: PPUSH
27052: CALL_OW 306
27056: IFFALSE 27121
// begin j := GetSide ( i ) ;
27058: LD_ADDR_VAR 0 3
27062: PUSH
27063: LD_VAR 0 2
27067: PPUSH
27068: CALL_OW 255
27072: ST_TO_ADDR
// if j = 8 then
27073: LD_VAR 0 3
27077: PUSH
27078: LD_INT 8
27080: EQUAL
27081: IFFALSE 27093
// j := 0 else
27083: LD_ADDR_VAR 0 3
27087: PUSH
27088: LD_INT 0
27090: ST_TO_ADDR
27091: GO 27107
// j := j + 1 ;
27093: LD_ADDR_VAR 0 3
27097: PUSH
27098: LD_VAR 0 3
27102: PUSH
27103: LD_INT 1
27105: PLUS
27106: ST_TO_ADDR
// SetSide ( i , j ) ;
27107: LD_VAR 0 2
27111: PPUSH
27112: LD_VAR 0 3
27116: PPUSH
27117: CALL_OW 235
// end ;
27121: GO 27044
27123: POP
27124: POP
// end ;
27125: LD_VAR 0 1
27129: RET
// export function hHackFog ; begin
27130: LD_INT 0
27132: PPUSH
// FogOff ( true ) ;
27133: LD_INT 1
27135: PPUSH
27136: CALL_OW 344
// end ;
27140: LD_VAR 0 1
27144: RET
// export function hHackTeleport ( unit , x , y ) ; begin
27145: LD_INT 0
27147: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
27148: LD_VAR 0 1
27152: PPUSH
27153: LD_VAR 0 2
27157: PPUSH
27158: LD_VAR 0 3
27162: PPUSH
27163: LD_INT 1
27165: PPUSH
27166: LD_INT 1
27168: PPUSH
27169: CALL_OW 483
// CenterOnXY ( x , y ) ;
27173: LD_VAR 0 2
27177: PPUSH
27178: LD_VAR 0 3
27182: PPUSH
27183: CALL_OW 84
// end ; end_of_file
27187: LD_VAR 0 4
27191: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
27192: LD_INT 0
27194: PPUSH
27195: PPUSH
27196: PPUSH
27197: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
27198: LD_VAR 0 1
27202: PPUSH
27203: CALL_OW 264
27207: PUSH
27208: LD_EXP 36
27212: EQUAL
27213: IFFALSE 27285
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
27215: LD_INT 68
27217: PPUSH
27218: LD_VAR 0 1
27222: PPUSH
27223: CALL_OW 255
27227: PPUSH
27228: CALL_OW 321
27232: PUSH
27233: LD_INT 2
27235: EQUAL
27236: IFFALSE 27248
// eff := 70 else
27238: LD_ADDR_VAR 0 4
27242: PUSH
27243: LD_INT 70
27245: ST_TO_ADDR
27246: GO 27256
// eff := 30 ;
27248: LD_ADDR_VAR 0 4
27252: PUSH
27253: LD_INT 30
27255: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
27256: LD_VAR 0 1
27260: PPUSH
27261: CALL_OW 250
27265: PPUSH
27266: LD_VAR 0 1
27270: PPUSH
27271: CALL_OW 251
27275: PPUSH
27276: LD_VAR 0 4
27280: PPUSH
27281: CALL_OW 495
// end ; end ;
27285: LD_VAR 0 2
27289: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27290: LD_INT 0
27292: PPUSH
// end ;
27293: LD_VAR 0 4
27297: RET
// export function SOS_Command ( cmd ) ; begin
27298: LD_INT 0
27300: PPUSH
// end ;
27301: LD_VAR 0 2
27305: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
27306: LD_INT 0
27308: PPUSH
// end ;
27309: LD_VAR 0 6
27313: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
27314: LD_INT 0
27316: PPUSH
27317: PPUSH
// if not vehicle or not factory then
27318: LD_VAR 0 1
27322: NOT
27323: PUSH
27324: LD_VAR 0 2
27328: NOT
27329: OR
27330: IFFALSE 27334
// exit ;
27332: GO 27565
// if factoryWaypoints >= factory then
27334: LD_EXP 109
27338: PUSH
27339: LD_VAR 0 2
27343: GREATEREQUAL
27344: IFFALSE 27565
// if factoryWaypoints [ factory ] then
27346: LD_EXP 109
27350: PUSH
27351: LD_VAR 0 2
27355: ARRAY
27356: IFFALSE 27565
// begin if GetControl ( vehicle ) = control_manual then
27358: LD_VAR 0 1
27362: PPUSH
27363: CALL_OW 263
27367: PUSH
27368: LD_INT 1
27370: EQUAL
27371: IFFALSE 27452
// begin driver := IsDrivenBy ( vehicle ) ;
27373: LD_ADDR_VAR 0 4
27377: PUSH
27378: LD_VAR 0 1
27382: PPUSH
27383: CALL_OW 311
27387: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
27388: LD_VAR 0 4
27392: PPUSH
27393: LD_EXP 109
27397: PUSH
27398: LD_VAR 0 2
27402: ARRAY
27403: PUSH
27404: LD_INT 1
27406: ARRAY
27407: PPUSH
27408: LD_EXP 109
27412: PUSH
27413: LD_VAR 0 2
27417: ARRAY
27418: PUSH
27419: LD_INT 2
27421: ARRAY
27422: PPUSH
27423: CALL_OW 171
// AddComExitVehicle ( driver ) ;
27427: LD_VAR 0 4
27431: PPUSH
27432: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
27436: LD_VAR 0 4
27440: PPUSH
27441: LD_VAR 0 2
27445: PPUSH
27446: CALL_OW 180
// end else
27450: GO 27565
// if GetControl ( vehicle ) = control_remote then
27452: LD_VAR 0 1
27456: PPUSH
27457: CALL_OW 263
27461: PUSH
27462: LD_INT 2
27464: EQUAL
27465: IFFALSE 27526
// begin wait ( 0 0$2 ) ;
27467: LD_INT 70
27469: PPUSH
27470: CALL_OW 67
// if Connect ( vehicle ) then
27474: LD_VAR 0 1
27478: PPUSH
27479: CALL 39789 0 1
27483: IFFALSE 27524
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
27485: LD_VAR 0 1
27489: PPUSH
27490: LD_EXP 109
27494: PUSH
27495: LD_VAR 0 2
27499: ARRAY
27500: PUSH
27501: LD_INT 1
27503: ARRAY
27504: PPUSH
27505: LD_EXP 109
27509: PUSH
27510: LD_VAR 0 2
27514: ARRAY
27515: PUSH
27516: LD_INT 2
27518: ARRAY
27519: PPUSH
27520: CALL_OW 171
// end else
27524: GO 27565
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
27526: LD_VAR 0 1
27530: PPUSH
27531: LD_EXP 109
27535: PUSH
27536: LD_VAR 0 2
27540: ARRAY
27541: PUSH
27542: LD_INT 1
27544: ARRAY
27545: PPUSH
27546: LD_EXP 109
27550: PUSH
27551: LD_VAR 0 2
27555: ARRAY
27556: PUSH
27557: LD_INT 2
27559: ARRAY
27560: PPUSH
27561: CALL_OW 171
// end ; end ;
27565: LD_VAR 0 3
27569: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27570: LD_INT 0
27572: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27573: LD_VAR 0 1
27577: PUSH
27578: LD_INT 250
27580: EQUAL
27581: PUSH
27582: LD_VAR 0 2
27586: PPUSH
27587: CALL_OW 264
27591: PUSH
27592: LD_EXP 39
27596: EQUAL
27597: AND
27598: IFFALSE 27619
// MinerPlaceMine ( unit , x , y ) ;
27600: LD_VAR 0 2
27604: PPUSH
27605: LD_VAR 0 4
27609: PPUSH
27610: LD_VAR 0 5
27614: PPUSH
27615: CALL 30347 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27619: LD_VAR 0 1
27623: PUSH
27624: LD_INT 251
27626: EQUAL
27627: PUSH
27628: LD_VAR 0 2
27632: PPUSH
27633: CALL_OW 264
27637: PUSH
27638: LD_EXP 39
27642: EQUAL
27643: AND
27644: IFFALSE 27665
// MinerDetonateMine ( unit , x , y ) ;
27646: LD_VAR 0 2
27650: PPUSH
27651: LD_VAR 0 4
27655: PPUSH
27656: LD_VAR 0 5
27660: PPUSH
27661: CALL 30624 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27665: LD_VAR 0 1
27669: PUSH
27670: LD_INT 252
27672: EQUAL
27673: PUSH
27674: LD_VAR 0 2
27678: PPUSH
27679: CALL_OW 264
27683: PUSH
27684: LD_EXP 39
27688: EQUAL
27689: AND
27690: IFFALSE 27711
// MinerCreateMinefield ( unit , x , y ) ;
27692: LD_VAR 0 2
27696: PPUSH
27697: LD_VAR 0 4
27701: PPUSH
27702: LD_VAR 0 5
27706: PPUSH
27707: CALL 31041 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27711: LD_VAR 0 1
27715: PUSH
27716: LD_INT 253
27718: EQUAL
27719: PUSH
27720: LD_VAR 0 2
27724: PPUSH
27725: CALL_OW 257
27729: PUSH
27730: LD_INT 5
27732: EQUAL
27733: AND
27734: IFFALSE 27755
// ComBinocular ( unit , x , y ) ;
27736: LD_VAR 0 2
27740: PPUSH
27741: LD_VAR 0 4
27745: PPUSH
27746: LD_VAR 0 5
27750: PPUSH
27751: CALL 31412 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27755: LD_VAR 0 1
27759: PUSH
27760: LD_INT 254
27762: EQUAL
27763: PUSH
27764: LD_VAR 0 2
27768: PPUSH
27769: CALL_OW 264
27773: PUSH
27774: LD_EXP 34
27778: EQUAL
27779: AND
27780: PUSH
27781: LD_VAR 0 3
27785: PPUSH
27786: CALL_OW 263
27790: PUSH
27791: LD_INT 3
27793: EQUAL
27794: AND
27795: IFFALSE 27811
// HackDestroyVehicle ( unit , selectedUnit ) ;
27797: LD_VAR 0 2
27801: PPUSH
27802: LD_VAR 0 3
27806: PPUSH
27807: CALL 29707 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27811: LD_VAR 0 1
27815: PUSH
27816: LD_INT 255
27818: EQUAL
27819: PUSH
27820: LD_VAR 0 2
27824: PPUSH
27825: CALL_OW 264
27829: PUSH
27830: LD_INT 14
27832: PUSH
27833: LD_INT 53
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: IN
27840: AND
27841: PUSH
27842: LD_VAR 0 4
27846: PPUSH
27847: LD_VAR 0 5
27851: PPUSH
27852: CALL_OW 488
27856: AND
27857: IFFALSE 27881
// CutTreeXYR ( unit , x , y , 12 ) ;
27859: LD_VAR 0 2
27863: PPUSH
27864: LD_VAR 0 4
27868: PPUSH
27869: LD_VAR 0 5
27873: PPUSH
27874: LD_INT 12
27876: PPUSH
27877: CALL 28273 0 4
// if cmd = 256 then
27881: LD_VAR 0 1
27885: PUSH
27886: LD_INT 256
27888: EQUAL
27889: IFFALSE 27910
// SetFactoryWaypoint ( unit , x , y ) ;
27891: LD_VAR 0 2
27895: PPUSH
27896: LD_VAR 0 4
27900: PPUSH
27901: LD_VAR 0 5
27905: PPUSH
27906: CALL 27915 0 3
// end ;
27910: LD_VAR 0 6
27914: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
27915: LD_INT 0
27917: PPUSH
27918: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
27919: LD_VAR 0 1
27923: NOT
27924: PUSH
27925: LD_VAR 0 2
27929: PPUSH
27930: LD_VAR 0 3
27934: PPUSH
27935: CALL_OW 488
27939: NOT
27940: OR
27941: PUSH
27942: LD_VAR 0 1
27946: PPUSH
27947: CALL_OW 266
27951: PUSH
27952: LD_INT 3
27954: NONEQUAL
27955: PUSH
27956: LD_VAR 0 1
27960: PPUSH
27961: CALL_OW 247
27965: PUSH
27966: LD_INT 1
27968: EQUAL
27969: NOT
27970: AND
27971: OR
27972: IFFALSE 27976
// exit ;
27974: GO 28125
// if GetType ( factory ) = unit_human then
27976: LD_VAR 0 1
27980: PPUSH
27981: CALL_OW 247
27985: PUSH
27986: LD_INT 1
27988: EQUAL
27989: IFFALSE 28006
// factory := IsInUnit ( factory ) ;
27991: LD_ADDR_VAR 0 1
27995: PUSH
27996: LD_VAR 0 1
28000: PPUSH
28001: CALL_OW 310
28005: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
28006: LD_VAR 0 1
28010: PPUSH
28011: CALL_OW 266
28015: PUSH
28016: LD_INT 3
28018: NONEQUAL
28019: IFFALSE 28023
// exit ;
28021: GO 28125
// if HexInfo ( x , y ) = factory then
28023: LD_VAR 0 2
28027: PPUSH
28028: LD_VAR 0 3
28032: PPUSH
28033: CALL_OW 428
28037: PUSH
28038: LD_VAR 0 1
28042: EQUAL
28043: IFFALSE 28070
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
28045: LD_ADDR_EXP 109
28049: PUSH
28050: LD_EXP 109
28054: PPUSH
28055: LD_VAR 0 1
28059: PPUSH
28060: LD_INT 0
28062: PPUSH
28063: CALL_OW 1
28067: ST_TO_ADDR
28068: GO 28121
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
28070: LD_ADDR_EXP 109
28074: PUSH
28075: LD_EXP 109
28079: PPUSH
28080: LD_VAR 0 1
28084: PPUSH
28085: LD_VAR 0 1
28089: PPUSH
28090: CALL_OW 255
28094: PUSH
28095: LD_VAR 0 1
28099: PUSH
28100: LD_VAR 0 2
28104: PUSH
28105: LD_VAR 0 3
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: LIST
28114: LIST
28115: PPUSH
28116: CALL_OW 1
28120: ST_TO_ADDR
// UpdateFactoryWaypoints ;
28121: CALL 28130 0 0
// end ;
28125: LD_VAR 0 4
28129: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
28130: LD_INT 0
28132: PPUSH
28133: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
28134: LD_STRING resetFactoryWaypoint();
28136: PPUSH
28137: CALL_OW 559
// if factoryWaypoints then
28141: LD_EXP 109
28145: IFFALSE 28268
// begin for i := 1 to factoryWaypoints do
28147: LD_ADDR_VAR 0 2
28151: PUSH
28152: DOUBLE
28153: LD_INT 1
28155: DEC
28156: ST_TO_ADDR
28157: LD_EXP 109
28161: PUSH
28162: FOR_TO
28163: IFFALSE 28266
// if factoryWaypoints [ i ] then
28165: LD_EXP 109
28169: PUSH
28170: LD_VAR 0 2
28174: ARRAY
28175: IFFALSE 28264
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
28177: LD_STRING setFactoryWaypointXY(
28179: PUSH
28180: LD_EXP 109
28184: PUSH
28185: LD_VAR 0 2
28189: ARRAY
28190: PUSH
28191: LD_INT 1
28193: ARRAY
28194: STR
28195: PUSH
28196: LD_STRING ,
28198: STR
28199: PUSH
28200: LD_EXP 109
28204: PUSH
28205: LD_VAR 0 2
28209: ARRAY
28210: PUSH
28211: LD_INT 2
28213: ARRAY
28214: STR
28215: PUSH
28216: LD_STRING ,
28218: STR
28219: PUSH
28220: LD_EXP 109
28224: PUSH
28225: LD_VAR 0 2
28229: ARRAY
28230: PUSH
28231: LD_INT 3
28233: ARRAY
28234: STR
28235: PUSH
28236: LD_STRING ,
28238: STR
28239: PUSH
28240: LD_EXP 109
28244: PUSH
28245: LD_VAR 0 2
28249: ARRAY
28250: PUSH
28251: LD_INT 4
28253: ARRAY
28254: STR
28255: PUSH
28256: LD_STRING )
28258: STR
28259: PPUSH
28260: CALL_OW 559
28264: GO 28162
28266: POP
28267: POP
// end ; end ;
28268: LD_VAR 0 1
28272: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28273: LD_INT 0
28275: PPUSH
28276: PPUSH
28277: PPUSH
28278: PPUSH
28279: PPUSH
28280: PPUSH
28281: PPUSH
28282: PPUSH
28283: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
28284: LD_VAR 0 1
28288: NOT
28289: PUSH
28290: LD_VAR 0 2
28294: PPUSH
28295: LD_VAR 0 3
28299: PPUSH
28300: CALL_OW 488
28304: NOT
28305: OR
28306: PUSH
28307: LD_VAR 0 4
28311: NOT
28312: OR
28313: IFFALSE 28317
// exit ;
28315: GO 28657
// list := [ ] ;
28317: LD_ADDR_VAR 0 13
28321: PUSH
28322: EMPTY
28323: ST_TO_ADDR
// if x - r < 0 then
28324: LD_VAR 0 2
28328: PUSH
28329: LD_VAR 0 4
28333: MINUS
28334: PUSH
28335: LD_INT 0
28337: LESS
28338: IFFALSE 28350
// min_x := 0 else
28340: LD_ADDR_VAR 0 7
28344: PUSH
28345: LD_INT 0
28347: ST_TO_ADDR
28348: GO 28366
// min_x := x - r ;
28350: LD_ADDR_VAR 0 7
28354: PUSH
28355: LD_VAR 0 2
28359: PUSH
28360: LD_VAR 0 4
28364: MINUS
28365: ST_TO_ADDR
// if y - r < 0 then
28366: LD_VAR 0 3
28370: PUSH
28371: LD_VAR 0 4
28375: MINUS
28376: PUSH
28377: LD_INT 0
28379: LESS
28380: IFFALSE 28392
// min_y := 0 else
28382: LD_ADDR_VAR 0 8
28386: PUSH
28387: LD_INT 0
28389: ST_TO_ADDR
28390: GO 28408
// min_y := y - r ;
28392: LD_ADDR_VAR 0 8
28396: PUSH
28397: LD_VAR 0 3
28401: PUSH
28402: LD_VAR 0 4
28406: MINUS
28407: ST_TO_ADDR
// max_x := x + r ;
28408: LD_ADDR_VAR 0 9
28412: PUSH
28413: LD_VAR 0 2
28417: PUSH
28418: LD_VAR 0 4
28422: PLUS
28423: ST_TO_ADDR
// max_y := y + r ;
28424: LD_ADDR_VAR 0 10
28428: PUSH
28429: LD_VAR 0 3
28433: PUSH
28434: LD_VAR 0 4
28438: PLUS
28439: ST_TO_ADDR
// for _x = min_x to max_x do
28440: LD_ADDR_VAR 0 11
28444: PUSH
28445: DOUBLE
28446: LD_VAR 0 7
28450: DEC
28451: ST_TO_ADDR
28452: LD_VAR 0 9
28456: PUSH
28457: FOR_TO
28458: IFFALSE 28575
// for _y = min_y to max_y do
28460: LD_ADDR_VAR 0 12
28464: PUSH
28465: DOUBLE
28466: LD_VAR 0 8
28470: DEC
28471: ST_TO_ADDR
28472: LD_VAR 0 10
28476: PUSH
28477: FOR_TO
28478: IFFALSE 28571
// begin if not ValidHex ( _x , _y ) then
28480: LD_VAR 0 11
28484: PPUSH
28485: LD_VAR 0 12
28489: PPUSH
28490: CALL_OW 488
28494: NOT
28495: IFFALSE 28499
// continue ;
28497: GO 28477
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28499: LD_VAR 0 11
28503: PPUSH
28504: LD_VAR 0 12
28508: PPUSH
28509: CALL_OW 351
28513: PUSH
28514: LD_VAR 0 11
28518: PPUSH
28519: LD_VAR 0 12
28523: PPUSH
28524: CALL_OW 554
28528: AND
28529: IFFALSE 28569
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28531: LD_ADDR_VAR 0 13
28535: PUSH
28536: LD_VAR 0 13
28540: PPUSH
28541: LD_VAR 0 13
28545: PUSH
28546: LD_INT 1
28548: PLUS
28549: PPUSH
28550: LD_VAR 0 11
28554: PUSH
28555: LD_VAR 0 12
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: PPUSH
28564: CALL_OW 2
28568: ST_TO_ADDR
// end ;
28569: GO 28477
28571: POP
28572: POP
28573: GO 28457
28575: POP
28576: POP
// if not list then
28577: LD_VAR 0 13
28581: NOT
28582: IFFALSE 28586
// exit ;
28584: GO 28657
// for i in list do
28586: LD_ADDR_VAR 0 6
28590: PUSH
28591: LD_VAR 0 13
28595: PUSH
28596: FOR_IN
28597: IFFALSE 28655
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28599: LD_VAR 0 1
28603: PPUSH
28604: LD_STRING M
28606: PUSH
28607: LD_VAR 0 6
28611: PUSH
28612: LD_INT 1
28614: ARRAY
28615: PUSH
28616: LD_VAR 0 6
28620: PUSH
28621: LD_INT 2
28623: ARRAY
28624: PUSH
28625: LD_INT 0
28627: PUSH
28628: LD_INT 0
28630: PUSH
28631: LD_INT 0
28633: PUSH
28634: LD_INT 0
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: LIST
28641: LIST
28642: LIST
28643: LIST
28644: LIST
28645: PUSH
28646: EMPTY
28647: LIST
28648: PPUSH
28649: CALL_OW 447
28653: GO 28596
28655: POP
28656: POP
// end ;
28657: LD_VAR 0 5
28661: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
28662: LD_EXP 110
28666: NOT
28667: IFFALSE 28717
28669: GO 28671
28671: DISABLE
// begin initHack := true ;
28672: LD_ADDR_EXP 110
28676: PUSH
28677: LD_INT 1
28679: ST_TO_ADDR
// hackTanks := [ ] ;
28680: LD_ADDR_EXP 111
28684: PUSH
28685: EMPTY
28686: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
28687: LD_ADDR_EXP 112
28691: PUSH
28692: EMPTY
28693: ST_TO_ADDR
// hackLimit := 3 ;
28694: LD_ADDR_EXP 113
28698: PUSH
28699: LD_INT 3
28701: ST_TO_ADDR
// hackDist := 12 ;
28702: LD_ADDR_EXP 114
28706: PUSH
28707: LD_INT 12
28709: ST_TO_ADDR
// hackCounter := [ ] ;
28710: LD_ADDR_EXP 115
28714: PUSH
28715: EMPTY
28716: ST_TO_ADDR
// end ;
28717: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
28718: LD_EXP 110
28722: PUSH
28723: LD_INT 34
28725: PUSH
28726: LD_EXP 34
28730: PUSH
28731: EMPTY
28732: LIST
28733: LIST
28734: PPUSH
28735: CALL_OW 69
28739: AND
28740: IFFALSE 28995
28742: GO 28744
28744: DISABLE
28745: LD_INT 0
28747: PPUSH
28748: PPUSH
// begin enable ;
28749: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28750: LD_ADDR_VAR 0 1
28754: PUSH
28755: LD_INT 34
28757: PUSH
28758: LD_EXP 34
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: PPUSH
28767: CALL_OW 69
28771: PUSH
28772: FOR_IN
28773: IFFALSE 28993
// begin if not i in hackTanks then
28775: LD_VAR 0 1
28779: PUSH
28780: LD_EXP 111
28784: IN
28785: NOT
28786: IFFALSE 28869
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28788: LD_ADDR_EXP 111
28792: PUSH
28793: LD_EXP 111
28797: PPUSH
28798: LD_EXP 111
28802: PUSH
28803: LD_INT 1
28805: PLUS
28806: PPUSH
28807: LD_VAR 0 1
28811: PPUSH
28812: CALL_OW 1
28816: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28817: LD_ADDR_EXP 112
28821: PUSH
28822: LD_EXP 112
28826: PPUSH
28827: LD_EXP 112
28831: PUSH
28832: LD_INT 1
28834: PLUS
28835: PPUSH
28836: EMPTY
28837: PPUSH
28838: CALL_OW 1
28842: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28843: LD_ADDR_EXP 115
28847: PUSH
28848: LD_EXP 115
28852: PPUSH
28853: LD_EXP 115
28857: PUSH
28858: LD_INT 1
28860: PLUS
28861: PPUSH
28862: EMPTY
28863: PPUSH
28864: CALL_OW 1
28868: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28869: LD_VAR 0 1
28873: PPUSH
28874: CALL_OW 302
28878: NOT
28879: IFFALSE 28892
// begin HackUnlinkAll ( i ) ;
28881: LD_VAR 0 1
28885: PPUSH
28886: CALL 28998 0 1
// continue ;
28890: GO 28772
// end ; HackCheckCapturedStatus ( i ) ;
28892: LD_VAR 0 1
28896: PPUSH
28897: CALL 29441 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28901: LD_ADDR_VAR 0 2
28905: PUSH
28906: LD_INT 81
28908: PUSH
28909: LD_VAR 0 1
28913: PPUSH
28914: CALL_OW 255
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: PUSH
28923: LD_INT 33
28925: PUSH
28926: LD_INT 3
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: PUSH
28933: LD_INT 91
28935: PUSH
28936: LD_VAR 0 1
28940: PUSH
28941: LD_EXP 114
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: LIST
28950: PUSH
28951: LD_INT 50
28953: PUSH
28954: EMPTY
28955: LIST
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: LIST
28961: LIST
28962: PPUSH
28963: CALL_OW 69
28967: ST_TO_ADDR
// if not tmp then
28968: LD_VAR 0 2
28972: NOT
28973: IFFALSE 28977
// continue ;
28975: GO 28772
// HackLink ( i , tmp ) ;
28977: LD_VAR 0 1
28981: PPUSH
28982: LD_VAR 0 2
28986: PPUSH
28987: CALL 29134 0 2
// end ;
28991: GO 28772
28993: POP
28994: POP
// end ;
28995: PPOPN 2
28997: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28998: LD_INT 0
29000: PPUSH
29001: PPUSH
29002: PPUSH
// if not hack in hackTanks then
29003: LD_VAR 0 1
29007: PUSH
29008: LD_EXP 111
29012: IN
29013: NOT
29014: IFFALSE 29018
// exit ;
29016: GO 29129
// index := GetElementIndex ( hackTanks , hack ) ;
29018: LD_ADDR_VAR 0 4
29022: PUSH
29023: LD_EXP 111
29027: PPUSH
29028: LD_VAR 0 1
29032: PPUSH
29033: CALL 36603 0 2
29037: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
29038: LD_EXP 112
29042: PUSH
29043: LD_VAR 0 4
29047: ARRAY
29048: IFFALSE 29129
// begin for i in hackTanksCaptured [ index ] do
29050: LD_ADDR_VAR 0 3
29054: PUSH
29055: LD_EXP 112
29059: PUSH
29060: LD_VAR 0 4
29064: ARRAY
29065: PUSH
29066: FOR_IN
29067: IFFALSE 29093
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
29069: LD_VAR 0 3
29073: PUSH
29074: LD_INT 1
29076: ARRAY
29077: PPUSH
29078: LD_VAR 0 3
29082: PUSH
29083: LD_INT 2
29085: ARRAY
29086: PPUSH
29087: CALL_OW 235
29091: GO 29066
29093: POP
29094: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
29095: LD_ADDR_EXP 112
29099: PUSH
29100: LD_EXP 112
29104: PPUSH
29105: LD_VAR 0 4
29109: PPUSH
29110: EMPTY
29111: PPUSH
29112: CALL_OW 1
29116: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
29117: LD_VAR 0 1
29121: PPUSH
29122: LD_INT 0
29124: PPUSH
29125: CALL_OW 505
// end ; end ;
29129: LD_VAR 0 2
29133: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29134: LD_INT 0
29136: PPUSH
29137: PPUSH
29138: PPUSH
// if not hack in hackTanks or not vehicles then
29139: LD_VAR 0 1
29143: PUSH
29144: LD_EXP 111
29148: IN
29149: NOT
29150: PUSH
29151: LD_VAR 0 2
29155: NOT
29156: OR
29157: IFFALSE 29161
// exit ;
29159: GO 29436
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
29161: LD_ADDR_VAR 0 2
29165: PUSH
29166: LD_VAR 0 1
29170: PPUSH
29171: LD_VAR 0 2
29175: PPUSH
29176: LD_INT 1
29178: PPUSH
29179: LD_INT 1
29181: PPUSH
29182: CALL 37253 0 4
29186: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
29187: LD_ADDR_VAR 0 5
29191: PUSH
29192: LD_EXP 111
29196: PPUSH
29197: LD_VAR 0 1
29201: PPUSH
29202: CALL 36603 0 2
29206: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
29207: LD_EXP 112
29211: PUSH
29212: LD_VAR 0 5
29216: ARRAY
29217: PUSH
29218: LD_EXP 113
29222: LESS
29223: IFFALSE 29412
// begin for i := 1 to vehicles do
29225: LD_ADDR_VAR 0 4
29229: PUSH
29230: DOUBLE
29231: LD_INT 1
29233: DEC
29234: ST_TO_ADDR
29235: LD_VAR 0 2
29239: PUSH
29240: FOR_TO
29241: IFFALSE 29410
// begin if hackTanksCaptured [ index ] = hackLimit then
29243: LD_EXP 112
29247: PUSH
29248: LD_VAR 0 5
29252: ARRAY
29253: PUSH
29254: LD_EXP 113
29258: EQUAL
29259: IFFALSE 29263
// break ;
29261: GO 29410
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
29263: LD_ADDR_EXP 115
29267: PUSH
29268: LD_EXP 115
29272: PPUSH
29273: LD_VAR 0 5
29277: PPUSH
29278: LD_EXP 115
29282: PUSH
29283: LD_VAR 0 5
29287: ARRAY
29288: PUSH
29289: LD_INT 1
29291: PLUS
29292: PPUSH
29293: CALL_OW 1
29297: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
29298: LD_ADDR_EXP 112
29302: PUSH
29303: LD_EXP 112
29307: PPUSH
29308: LD_VAR 0 5
29312: PUSH
29313: LD_EXP 112
29317: PUSH
29318: LD_VAR 0 5
29322: ARRAY
29323: PUSH
29324: LD_INT 1
29326: PLUS
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PPUSH
29332: LD_VAR 0 2
29336: PUSH
29337: LD_VAR 0 4
29341: ARRAY
29342: PUSH
29343: LD_VAR 0 2
29347: PUSH
29348: LD_VAR 0 4
29352: ARRAY
29353: PPUSH
29354: CALL_OW 255
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: PPUSH
29363: CALL 36818 0 3
29367: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29368: LD_VAR 0 2
29372: PUSH
29373: LD_VAR 0 4
29377: ARRAY
29378: PPUSH
29379: LD_VAR 0 1
29383: PPUSH
29384: CALL_OW 255
29388: PPUSH
29389: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29393: LD_VAR 0 2
29397: PUSH
29398: LD_VAR 0 4
29402: ARRAY
29403: PPUSH
29404: CALL_OW 141
// end ;
29408: GO 29240
29410: POP
29411: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29412: LD_VAR 0 1
29416: PPUSH
29417: LD_EXP 112
29421: PUSH
29422: LD_VAR 0 5
29426: ARRAY
29427: PUSH
29428: LD_INT 0
29430: PLUS
29431: PPUSH
29432: CALL_OW 505
// end ;
29436: LD_VAR 0 3
29440: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
29441: LD_INT 0
29443: PPUSH
29444: PPUSH
29445: PPUSH
29446: PPUSH
// if not hack in hackTanks then
29447: LD_VAR 0 1
29451: PUSH
29452: LD_EXP 111
29456: IN
29457: NOT
29458: IFFALSE 29462
// exit ;
29460: GO 29702
// index := GetElementIndex ( hackTanks , hack ) ;
29462: LD_ADDR_VAR 0 4
29466: PUSH
29467: LD_EXP 111
29471: PPUSH
29472: LD_VAR 0 1
29476: PPUSH
29477: CALL 36603 0 2
29481: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
29482: LD_ADDR_VAR 0 3
29486: PUSH
29487: DOUBLE
29488: LD_EXP 112
29492: PUSH
29493: LD_VAR 0 4
29497: ARRAY
29498: INC
29499: ST_TO_ADDR
29500: LD_INT 1
29502: PUSH
29503: FOR_DOWNTO
29504: IFFALSE 29676
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
29506: LD_ADDR_VAR 0 5
29510: PUSH
29511: LD_EXP 112
29515: PUSH
29516: LD_VAR 0 4
29520: ARRAY
29521: PUSH
29522: LD_VAR 0 3
29526: ARRAY
29527: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
29528: LD_VAR 0 5
29532: PUSH
29533: LD_INT 1
29535: ARRAY
29536: PPUSH
29537: CALL_OW 302
29541: NOT
29542: PUSH
29543: LD_VAR 0 5
29547: PUSH
29548: LD_INT 1
29550: ARRAY
29551: PPUSH
29552: CALL_OW 255
29556: PUSH
29557: LD_VAR 0 1
29561: PPUSH
29562: CALL_OW 255
29566: NONEQUAL
29567: OR
29568: IFFALSE 29674
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
29570: LD_VAR 0 5
29574: PUSH
29575: LD_INT 1
29577: ARRAY
29578: PPUSH
29579: CALL_OW 305
29583: PUSH
29584: LD_VAR 0 5
29588: PUSH
29589: LD_INT 1
29591: ARRAY
29592: PPUSH
29593: CALL_OW 255
29597: PUSH
29598: LD_VAR 0 1
29602: PPUSH
29603: CALL_OW 255
29607: EQUAL
29608: AND
29609: IFFALSE 29633
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
29611: LD_VAR 0 5
29615: PUSH
29616: LD_INT 1
29618: ARRAY
29619: PPUSH
29620: LD_VAR 0 5
29624: PUSH
29625: LD_INT 2
29627: ARRAY
29628: PPUSH
29629: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
29633: LD_ADDR_EXP 112
29637: PUSH
29638: LD_EXP 112
29642: PPUSH
29643: LD_VAR 0 4
29647: PPUSH
29648: LD_EXP 112
29652: PUSH
29653: LD_VAR 0 4
29657: ARRAY
29658: PPUSH
29659: LD_VAR 0 3
29663: PPUSH
29664: CALL_OW 3
29668: PPUSH
29669: CALL_OW 1
29673: ST_TO_ADDR
// end ; end ;
29674: GO 29503
29676: POP
29677: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29678: LD_VAR 0 1
29682: PPUSH
29683: LD_EXP 112
29687: PUSH
29688: LD_VAR 0 4
29692: ARRAY
29693: PUSH
29694: LD_INT 0
29696: PLUS
29697: PPUSH
29698: CALL_OW 505
// end ;
29702: LD_VAR 0 2
29706: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
29707: LD_INT 0
29709: PPUSH
29710: PPUSH
29711: PPUSH
29712: PPUSH
// if not hack in hackTanks then
29713: LD_VAR 0 1
29717: PUSH
29718: LD_EXP 111
29722: IN
29723: NOT
29724: IFFALSE 29728
// exit ;
29726: GO 29813
// index := GetElementIndex ( hackTanks , hack ) ;
29728: LD_ADDR_VAR 0 5
29732: PUSH
29733: LD_EXP 111
29737: PPUSH
29738: LD_VAR 0 1
29742: PPUSH
29743: CALL 36603 0 2
29747: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29748: LD_ADDR_VAR 0 4
29752: PUSH
29753: DOUBLE
29754: LD_INT 1
29756: DEC
29757: ST_TO_ADDR
29758: LD_EXP 112
29762: PUSH
29763: LD_VAR 0 5
29767: ARRAY
29768: PUSH
29769: FOR_TO
29770: IFFALSE 29811
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29772: LD_EXP 112
29776: PUSH
29777: LD_VAR 0 5
29781: ARRAY
29782: PUSH
29783: LD_VAR 0 4
29787: ARRAY
29788: PUSH
29789: LD_INT 1
29791: ARRAY
29792: PUSH
29793: LD_VAR 0 2
29797: EQUAL
29798: IFFALSE 29809
// KillUnit ( vehicle ) ;
29800: LD_VAR 0 2
29804: PPUSH
29805: CALL_OW 66
29809: GO 29769
29811: POP
29812: POP
// end ;
29813: LD_VAR 0 3
29817: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29818: LD_EXP 116
29822: NOT
29823: IFFALSE 29858
29825: GO 29827
29827: DISABLE
// begin initMiner := true ;
29828: LD_ADDR_EXP 116
29832: PUSH
29833: LD_INT 1
29835: ST_TO_ADDR
// minersList := [ ] ;
29836: LD_ADDR_EXP 117
29840: PUSH
29841: EMPTY
29842: ST_TO_ADDR
// minerMinesList := [ ] ;
29843: LD_ADDR_EXP 118
29847: PUSH
29848: EMPTY
29849: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29850: LD_ADDR_EXP 119
29854: PUSH
29855: LD_INT 5
29857: ST_TO_ADDR
// end ;
29858: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29859: LD_EXP 116
29863: PUSH
29864: LD_INT 34
29866: PUSH
29867: LD_EXP 39
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: PPUSH
29876: CALL_OW 69
29880: AND
29881: IFFALSE 30344
29883: GO 29885
29885: DISABLE
29886: LD_INT 0
29888: PPUSH
29889: PPUSH
29890: PPUSH
29891: PPUSH
// begin enable ;
29892: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29893: LD_ADDR_VAR 0 1
29897: PUSH
29898: LD_INT 34
29900: PUSH
29901: LD_EXP 39
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PPUSH
29910: CALL_OW 69
29914: PUSH
29915: FOR_IN
29916: IFFALSE 29988
// begin if not i in minersList then
29918: LD_VAR 0 1
29922: PUSH
29923: LD_EXP 117
29927: IN
29928: NOT
29929: IFFALSE 29986
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29931: LD_ADDR_EXP 117
29935: PUSH
29936: LD_EXP 117
29940: PPUSH
29941: LD_EXP 117
29945: PUSH
29946: LD_INT 1
29948: PLUS
29949: PPUSH
29950: LD_VAR 0 1
29954: PPUSH
29955: CALL_OW 1
29959: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29960: LD_ADDR_EXP 118
29964: PUSH
29965: LD_EXP 118
29969: PPUSH
29970: LD_EXP 118
29974: PUSH
29975: LD_INT 1
29977: PLUS
29978: PPUSH
29979: EMPTY
29980: PPUSH
29981: CALL_OW 1
29985: ST_TO_ADDR
// end end ;
29986: GO 29915
29988: POP
29989: POP
// for i := minerMinesList downto 1 do
29990: LD_ADDR_VAR 0 1
29994: PUSH
29995: DOUBLE
29996: LD_EXP 118
30000: INC
30001: ST_TO_ADDR
30002: LD_INT 1
30004: PUSH
30005: FOR_DOWNTO
30006: IFFALSE 30342
// begin if IsLive ( minersList [ i ] ) then
30008: LD_EXP 117
30012: PUSH
30013: LD_VAR 0 1
30017: ARRAY
30018: PPUSH
30019: CALL_OW 300
30023: IFFALSE 30051
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
30025: LD_EXP 117
30029: PUSH
30030: LD_VAR 0 1
30034: ARRAY
30035: PPUSH
30036: LD_EXP 118
30040: PUSH
30041: LD_VAR 0 1
30045: ARRAY
30046: PPUSH
30047: CALL_OW 505
// if not minerMinesList [ i ] then
30051: LD_EXP 118
30055: PUSH
30056: LD_VAR 0 1
30060: ARRAY
30061: NOT
30062: IFFALSE 30066
// continue ;
30064: GO 30005
// for j := minerMinesList [ i ] downto 1 do
30066: LD_ADDR_VAR 0 2
30070: PUSH
30071: DOUBLE
30072: LD_EXP 118
30076: PUSH
30077: LD_VAR 0 1
30081: ARRAY
30082: INC
30083: ST_TO_ADDR
30084: LD_INT 1
30086: PUSH
30087: FOR_DOWNTO
30088: IFFALSE 30338
// begin side := GetSide ( minersList [ i ] ) ;
30090: LD_ADDR_VAR 0 3
30094: PUSH
30095: LD_EXP 117
30099: PUSH
30100: LD_VAR 0 1
30104: ARRAY
30105: PPUSH
30106: CALL_OW 255
30110: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30111: LD_ADDR_VAR 0 4
30115: PUSH
30116: LD_EXP 118
30120: PUSH
30121: LD_VAR 0 1
30125: ARRAY
30126: PUSH
30127: LD_VAR 0 2
30131: ARRAY
30132: PUSH
30133: LD_INT 1
30135: ARRAY
30136: PPUSH
30137: LD_EXP 118
30141: PUSH
30142: LD_VAR 0 1
30146: ARRAY
30147: PUSH
30148: LD_VAR 0 2
30152: ARRAY
30153: PUSH
30154: LD_INT 2
30156: ARRAY
30157: PPUSH
30158: CALL_OW 428
30162: ST_TO_ADDR
// if not tmp then
30163: LD_VAR 0 4
30167: NOT
30168: IFFALSE 30172
// continue ;
30170: GO 30087
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
30172: LD_VAR 0 4
30176: PUSH
30177: LD_INT 81
30179: PUSH
30180: LD_VAR 0 3
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: PPUSH
30189: CALL_OW 69
30193: IN
30194: PUSH
30195: LD_EXP 118
30199: PUSH
30200: LD_VAR 0 1
30204: ARRAY
30205: PUSH
30206: LD_VAR 0 2
30210: ARRAY
30211: PUSH
30212: LD_INT 1
30214: ARRAY
30215: PPUSH
30216: LD_EXP 118
30220: PUSH
30221: LD_VAR 0 1
30225: ARRAY
30226: PUSH
30227: LD_VAR 0 2
30231: ARRAY
30232: PUSH
30233: LD_INT 2
30235: ARRAY
30236: PPUSH
30237: CALL_OW 458
30241: AND
30242: IFFALSE 30336
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
30244: LD_EXP 118
30248: PUSH
30249: LD_VAR 0 1
30253: ARRAY
30254: PUSH
30255: LD_VAR 0 2
30259: ARRAY
30260: PUSH
30261: LD_INT 1
30263: ARRAY
30264: PPUSH
30265: LD_EXP 118
30269: PUSH
30270: LD_VAR 0 1
30274: ARRAY
30275: PUSH
30276: LD_VAR 0 2
30280: ARRAY
30281: PUSH
30282: LD_INT 2
30284: ARRAY
30285: PPUSH
30286: LD_VAR 0 3
30290: PPUSH
30291: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
30295: LD_ADDR_EXP 118
30299: PUSH
30300: LD_EXP 118
30304: PPUSH
30305: LD_VAR 0 1
30309: PPUSH
30310: LD_EXP 118
30314: PUSH
30315: LD_VAR 0 1
30319: ARRAY
30320: PPUSH
30321: LD_VAR 0 2
30325: PPUSH
30326: CALL_OW 3
30330: PPUSH
30331: CALL_OW 1
30335: ST_TO_ADDR
// end ; end ;
30336: GO 30087
30338: POP
30339: POP
// end ;
30340: GO 30005
30342: POP
30343: POP
// end ;
30344: PPOPN 4
30346: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
30347: LD_INT 0
30349: PPUSH
30350: PPUSH
// result := false ;
30351: LD_ADDR_VAR 0 4
30355: PUSH
30356: LD_INT 0
30358: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
30359: LD_VAR 0 1
30363: PPUSH
30364: CALL_OW 264
30368: PUSH
30369: LD_EXP 39
30373: EQUAL
30374: NOT
30375: IFFALSE 30379
// exit ;
30377: GO 30619
// index := GetElementIndex ( minersList , unit ) ;
30379: LD_ADDR_VAR 0 5
30383: PUSH
30384: LD_EXP 117
30388: PPUSH
30389: LD_VAR 0 1
30393: PPUSH
30394: CALL 36603 0 2
30398: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
30399: LD_EXP 118
30403: PUSH
30404: LD_VAR 0 5
30408: ARRAY
30409: PUSH
30410: LD_EXP 119
30414: GREATEREQUAL
30415: IFFALSE 30419
// exit ;
30417: GO 30619
// ComMoveXY ( unit , x , y ) ;
30419: LD_VAR 0 1
30423: PPUSH
30424: LD_VAR 0 2
30428: PPUSH
30429: LD_VAR 0 3
30433: PPUSH
30434: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30438: LD_INT 35
30440: PPUSH
30441: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
30445: LD_VAR 0 1
30449: PPUSH
30450: LD_VAR 0 2
30454: PPUSH
30455: LD_VAR 0 3
30459: PPUSH
30460: CALL 67375 0 3
30464: NOT
30465: PUSH
30466: LD_VAR 0 1
30470: PPUSH
30471: CALL_OW 314
30475: AND
30476: IFFALSE 30480
// exit ;
30478: GO 30619
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
30480: LD_VAR 0 2
30484: PPUSH
30485: LD_VAR 0 3
30489: PPUSH
30490: CALL_OW 428
30494: PUSH
30495: LD_VAR 0 1
30499: EQUAL
30500: PUSH
30501: LD_VAR 0 1
30505: PPUSH
30506: CALL_OW 314
30510: NOT
30511: AND
30512: IFFALSE 30438
// PlaySoundXY ( x , y , PlantMine ) ;
30514: LD_VAR 0 2
30518: PPUSH
30519: LD_VAR 0 3
30523: PPUSH
30524: LD_STRING PlantMine
30526: PPUSH
30527: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
30531: LD_VAR 0 2
30535: PPUSH
30536: LD_VAR 0 3
30540: PPUSH
30541: LD_VAR 0 1
30545: PPUSH
30546: CALL_OW 255
30550: PPUSH
30551: LD_INT 0
30553: PPUSH
30554: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
30558: LD_ADDR_EXP 118
30562: PUSH
30563: LD_EXP 118
30567: PPUSH
30568: LD_VAR 0 5
30572: PUSH
30573: LD_EXP 118
30577: PUSH
30578: LD_VAR 0 5
30582: ARRAY
30583: PUSH
30584: LD_INT 1
30586: PLUS
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PPUSH
30592: LD_VAR 0 2
30596: PUSH
30597: LD_VAR 0 3
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PPUSH
30606: CALL 36818 0 3
30610: ST_TO_ADDR
// result := true ;
30611: LD_ADDR_VAR 0 4
30615: PUSH
30616: LD_INT 1
30618: ST_TO_ADDR
// end ;
30619: LD_VAR 0 4
30623: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
30624: LD_INT 0
30626: PPUSH
30627: PPUSH
30628: PPUSH
// if not unit in minersList then
30629: LD_VAR 0 1
30633: PUSH
30634: LD_EXP 117
30638: IN
30639: NOT
30640: IFFALSE 30644
// exit ;
30642: GO 31036
// index := GetElementIndex ( minersList , unit ) ;
30644: LD_ADDR_VAR 0 6
30648: PUSH
30649: LD_EXP 117
30653: PPUSH
30654: LD_VAR 0 1
30658: PPUSH
30659: CALL 36603 0 2
30663: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
30664: LD_ADDR_VAR 0 5
30668: PUSH
30669: DOUBLE
30670: LD_EXP 118
30674: PUSH
30675: LD_VAR 0 6
30679: ARRAY
30680: INC
30681: ST_TO_ADDR
30682: LD_INT 1
30684: PUSH
30685: FOR_DOWNTO
30686: IFFALSE 30847
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
30688: LD_EXP 118
30692: PUSH
30693: LD_VAR 0 6
30697: ARRAY
30698: PUSH
30699: LD_VAR 0 5
30703: ARRAY
30704: PUSH
30705: LD_INT 1
30707: ARRAY
30708: PUSH
30709: LD_VAR 0 2
30713: EQUAL
30714: PUSH
30715: LD_EXP 118
30719: PUSH
30720: LD_VAR 0 6
30724: ARRAY
30725: PUSH
30726: LD_VAR 0 5
30730: ARRAY
30731: PUSH
30732: LD_INT 2
30734: ARRAY
30735: PUSH
30736: LD_VAR 0 3
30740: EQUAL
30741: AND
30742: IFFALSE 30845
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30744: LD_EXP 118
30748: PUSH
30749: LD_VAR 0 6
30753: ARRAY
30754: PUSH
30755: LD_VAR 0 5
30759: ARRAY
30760: PUSH
30761: LD_INT 1
30763: ARRAY
30764: PPUSH
30765: LD_EXP 118
30769: PUSH
30770: LD_VAR 0 6
30774: ARRAY
30775: PUSH
30776: LD_VAR 0 5
30780: ARRAY
30781: PUSH
30782: LD_INT 2
30784: ARRAY
30785: PPUSH
30786: LD_VAR 0 1
30790: PPUSH
30791: CALL_OW 255
30795: PPUSH
30796: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30800: LD_ADDR_EXP 118
30804: PUSH
30805: LD_EXP 118
30809: PPUSH
30810: LD_VAR 0 6
30814: PPUSH
30815: LD_EXP 118
30819: PUSH
30820: LD_VAR 0 6
30824: ARRAY
30825: PPUSH
30826: LD_VAR 0 5
30830: PPUSH
30831: CALL_OW 3
30835: PPUSH
30836: CALL_OW 1
30840: ST_TO_ADDR
// exit ;
30841: POP
30842: POP
30843: GO 31036
// end ; end ;
30845: GO 30685
30847: POP
30848: POP
// for i := minerMinesList [ index ] downto 1 do
30849: LD_ADDR_VAR 0 5
30853: PUSH
30854: DOUBLE
30855: LD_EXP 118
30859: PUSH
30860: LD_VAR 0 6
30864: ARRAY
30865: INC
30866: ST_TO_ADDR
30867: LD_INT 1
30869: PUSH
30870: FOR_DOWNTO
30871: IFFALSE 31034
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30873: LD_EXP 118
30877: PUSH
30878: LD_VAR 0 6
30882: ARRAY
30883: PUSH
30884: LD_VAR 0 5
30888: ARRAY
30889: PUSH
30890: LD_INT 1
30892: ARRAY
30893: PPUSH
30894: LD_EXP 118
30898: PUSH
30899: LD_VAR 0 6
30903: ARRAY
30904: PUSH
30905: LD_VAR 0 5
30909: ARRAY
30910: PUSH
30911: LD_INT 2
30913: ARRAY
30914: PPUSH
30915: LD_VAR 0 2
30919: PPUSH
30920: LD_VAR 0 3
30924: PPUSH
30925: CALL_OW 298
30929: PUSH
30930: LD_INT 6
30932: LESS
30933: IFFALSE 31032
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30935: LD_EXP 118
30939: PUSH
30940: LD_VAR 0 6
30944: ARRAY
30945: PUSH
30946: LD_VAR 0 5
30950: ARRAY
30951: PUSH
30952: LD_INT 1
30954: ARRAY
30955: PPUSH
30956: LD_EXP 118
30960: PUSH
30961: LD_VAR 0 6
30965: ARRAY
30966: PUSH
30967: LD_VAR 0 5
30971: ARRAY
30972: PUSH
30973: LD_INT 2
30975: ARRAY
30976: PPUSH
30977: LD_VAR 0 1
30981: PPUSH
30982: CALL_OW 255
30986: PPUSH
30987: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30991: LD_ADDR_EXP 118
30995: PUSH
30996: LD_EXP 118
31000: PPUSH
31001: LD_VAR 0 6
31005: PPUSH
31006: LD_EXP 118
31010: PUSH
31011: LD_VAR 0 6
31015: ARRAY
31016: PPUSH
31017: LD_VAR 0 5
31021: PPUSH
31022: CALL_OW 3
31026: PPUSH
31027: CALL_OW 1
31031: ST_TO_ADDR
// end ; end ;
31032: GO 30870
31034: POP
31035: POP
// end ;
31036: LD_VAR 0 4
31040: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
31041: LD_INT 0
31043: PPUSH
31044: PPUSH
31045: PPUSH
31046: PPUSH
31047: PPUSH
31048: PPUSH
31049: PPUSH
31050: PPUSH
31051: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
31052: LD_VAR 0 1
31056: PPUSH
31057: CALL_OW 264
31061: PUSH
31062: LD_EXP 39
31066: EQUAL
31067: NOT
31068: PUSH
31069: LD_VAR 0 1
31073: PUSH
31074: LD_EXP 117
31078: IN
31079: NOT
31080: OR
31081: IFFALSE 31085
// exit ;
31083: GO 31407
// index := GetElementIndex ( minersList , unit ) ;
31085: LD_ADDR_VAR 0 6
31089: PUSH
31090: LD_EXP 117
31094: PPUSH
31095: LD_VAR 0 1
31099: PPUSH
31100: CALL 36603 0 2
31104: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
31105: LD_ADDR_VAR 0 8
31109: PUSH
31110: LD_EXP 119
31114: PUSH
31115: LD_EXP 118
31119: PUSH
31120: LD_VAR 0 6
31124: ARRAY
31125: MINUS
31126: ST_TO_ADDR
// if not minesFreeAmount then
31127: LD_VAR 0 8
31131: NOT
31132: IFFALSE 31136
// exit ;
31134: GO 31407
// tmp := [ ] ;
31136: LD_ADDR_VAR 0 7
31140: PUSH
31141: EMPTY
31142: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
31143: LD_ADDR_VAR 0 5
31147: PUSH
31148: DOUBLE
31149: LD_INT 1
31151: DEC
31152: ST_TO_ADDR
31153: LD_VAR 0 8
31157: PUSH
31158: FOR_TO
31159: IFFALSE 31354
// begin _d := rand ( 0 , 5 ) ;
31161: LD_ADDR_VAR 0 11
31165: PUSH
31166: LD_INT 0
31168: PPUSH
31169: LD_INT 5
31171: PPUSH
31172: CALL_OW 12
31176: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
31177: LD_ADDR_VAR 0 12
31181: PUSH
31182: LD_INT 2
31184: PPUSH
31185: LD_INT 6
31187: PPUSH
31188: CALL_OW 12
31192: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
31193: LD_ADDR_VAR 0 9
31197: PUSH
31198: LD_VAR 0 2
31202: PPUSH
31203: LD_VAR 0 11
31207: PPUSH
31208: LD_VAR 0 12
31212: PPUSH
31213: CALL_OW 272
31217: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
31218: LD_ADDR_VAR 0 10
31222: PUSH
31223: LD_VAR 0 3
31227: PPUSH
31228: LD_VAR 0 11
31232: PPUSH
31233: LD_VAR 0 12
31237: PPUSH
31238: CALL_OW 273
31242: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
31243: LD_VAR 0 9
31247: PPUSH
31248: LD_VAR 0 10
31252: PPUSH
31253: CALL_OW 488
31257: PUSH
31258: LD_VAR 0 9
31262: PUSH
31263: LD_VAR 0 10
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: LD_VAR 0 7
31276: IN
31277: NOT
31278: AND
31279: PUSH
31280: LD_VAR 0 9
31284: PPUSH
31285: LD_VAR 0 10
31289: PPUSH
31290: CALL_OW 458
31294: NOT
31295: AND
31296: IFFALSE 31338
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
31298: LD_ADDR_VAR 0 7
31302: PUSH
31303: LD_VAR 0 7
31307: PPUSH
31308: LD_VAR 0 7
31312: PUSH
31313: LD_INT 1
31315: PLUS
31316: PPUSH
31317: LD_VAR 0 9
31321: PUSH
31322: LD_VAR 0 10
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PPUSH
31331: CALL_OW 1
31335: ST_TO_ADDR
31336: GO 31352
// i := i - 1 ;
31338: LD_ADDR_VAR 0 5
31342: PUSH
31343: LD_VAR 0 5
31347: PUSH
31348: LD_INT 1
31350: MINUS
31351: ST_TO_ADDR
// end ;
31352: GO 31158
31354: POP
31355: POP
// for i in tmp do
31356: LD_ADDR_VAR 0 5
31360: PUSH
31361: LD_VAR 0 7
31365: PUSH
31366: FOR_IN
31367: IFFALSE 31405
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
31369: LD_VAR 0 1
31373: PPUSH
31374: LD_VAR 0 5
31378: PUSH
31379: LD_INT 1
31381: ARRAY
31382: PPUSH
31383: LD_VAR 0 5
31387: PUSH
31388: LD_INT 2
31390: ARRAY
31391: PPUSH
31392: CALL 30347 0 3
31396: NOT
31397: IFFALSE 31403
// exit ;
31399: POP
31400: POP
31401: GO 31407
31403: GO 31366
31405: POP
31406: POP
// end ;
31407: LD_VAR 0 4
31411: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
31412: LD_INT 0
31414: PPUSH
31415: PPUSH
31416: PPUSH
31417: PPUSH
31418: PPUSH
31419: PPUSH
31420: PPUSH
// if not GetClass ( unit ) = class_sniper then
31421: LD_VAR 0 1
31425: PPUSH
31426: CALL_OW 257
31430: PUSH
31431: LD_INT 5
31433: EQUAL
31434: NOT
31435: IFFALSE 31439
// exit ;
31437: GO 31827
// dist := 8 ;
31439: LD_ADDR_VAR 0 5
31443: PUSH
31444: LD_INT 8
31446: ST_TO_ADDR
// viewRange := 12 ;
31447: LD_ADDR_VAR 0 7
31451: PUSH
31452: LD_INT 12
31454: ST_TO_ADDR
// side := GetSide ( unit ) ;
31455: LD_ADDR_VAR 0 6
31459: PUSH
31460: LD_VAR 0 1
31464: PPUSH
31465: CALL_OW 255
31469: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
31470: LD_INT 61
31472: PPUSH
31473: LD_VAR 0 6
31477: PPUSH
31478: CALL_OW 321
31482: PUSH
31483: LD_INT 2
31485: EQUAL
31486: IFFALSE 31496
// viewRange := 16 ;
31488: LD_ADDR_VAR 0 7
31492: PUSH
31493: LD_INT 16
31495: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
31496: LD_VAR 0 1
31500: PPUSH
31501: LD_VAR 0 2
31505: PPUSH
31506: LD_VAR 0 3
31510: PPUSH
31511: CALL_OW 297
31515: PUSH
31516: LD_VAR 0 5
31520: GREATER
31521: IFFALSE 31600
// begin ComMoveXY ( unit , x , y ) ;
31523: LD_VAR 0 1
31527: PPUSH
31528: LD_VAR 0 2
31532: PPUSH
31533: LD_VAR 0 3
31537: PPUSH
31538: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31542: LD_INT 35
31544: PPUSH
31545: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
31549: LD_VAR 0 1
31553: PPUSH
31554: LD_VAR 0 2
31558: PPUSH
31559: LD_VAR 0 3
31563: PPUSH
31564: CALL 67375 0 3
31568: NOT
31569: IFFALSE 31573
// exit ;
31571: GO 31827
// until GetDistUnitXY ( unit , x , y ) < dist ;
31573: LD_VAR 0 1
31577: PPUSH
31578: LD_VAR 0 2
31582: PPUSH
31583: LD_VAR 0 3
31587: PPUSH
31588: CALL_OW 297
31592: PUSH
31593: LD_VAR 0 5
31597: LESS
31598: IFFALSE 31542
// end ; ComTurnXY ( unit , x , y ) ;
31600: LD_VAR 0 1
31604: PPUSH
31605: LD_VAR 0 2
31609: PPUSH
31610: LD_VAR 0 3
31614: PPUSH
31615: CALL_OW 118
// wait ( 5 ) ;
31619: LD_INT 5
31621: PPUSH
31622: CALL_OW 67
// _d := GetDir ( unit ) ;
31626: LD_ADDR_VAR 0 10
31630: PUSH
31631: LD_VAR 0 1
31635: PPUSH
31636: CALL_OW 254
31640: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
31641: LD_ADDR_VAR 0 8
31645: PUSH
31646: LD_VAR 0 1
31650: PPUSH
31651: CALL_OW 250
31655: PPUSH
31656: LD_VAR 0 10
31660: PPUSH
31661: LD_VAR 0 5
31665: PPUSH
31666: CALL_OW 272
31670: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
31671: LD_ADDR_VAR 0 9
31675: PUSH
31676: LD_VAR 0 1
31680: PPUSH
31681: CALL_OW 251
31685: PPUSH
31686: LD_VAR 0 10
31690: PPUSH
31691: LD_VAR 0 5
31695: PPUSH
31696: CALL_OW 273
31700: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31701: LD_VAR 0 8
31705: PPUSH
31706: LD_VAR 0 9
31710: PPUSH
31711: CALL_OW 488
31715: NOT
31716: IFFALSE 31720
// exit ;
31718: GO 31827
// ComAnimCustom ( unit , 1 ) ;
31720: LD_VAR 0 1
31724: PPUSH
31725: LD_INT 1
31727: PPUSH
31728: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
31732: LD_VAR 0 8
31736: PPUSH
31737: LD_VAR 0 9
31741: PPUSH
31742: LD_VAR 0 6
31746: PPUSH
31747: LD_VAR 0 7
31751: PPUSH
31752: CALL_OW 330
// repeat wait ( 1 ) ;
31756: LD_INT 1
31758: PPUSH
31759: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
31763: LD_VAR 0 1
31767: PPUSH
31768: CALL_OW 316
31772: PUSH
31773: LD_VAR 0 1
31777: PPUSH
31778: CALL_OW 314
31782: OR
31783: PUSH
31784: LD_VAR 0 1
31788: PPUSH
31789: CALL_OW 302
31793: NOT
31794: OR
31795: PUSH
31796: LD_VAR 0 1
31800: PPUSH
31801: CALL_OW 301
31805: OR
31806: IFFALSE 31756
// RemoveSeeing ( _x , _y , side ) ;
31808: LD_VAR 0 8
31812: PPUSH
31813: LD_VAR 0 9
31817: PPUSH
31818: LD_VAR 0 6
31822: PPUSH
31823: CALL_OW 331
// end ; end_of_file
31827: LD_VAR 0 4
31831: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31832: LD_INT 0
31834: PPUSH
31835: PPUSH
// if exist_mode then
31836: LD_VAR 0 2
31840: IFFALSE 31865
// unit := CreateCharacter ( prefix & ident ) else
31842: LD_ADDR_VAR 0 5
31846: PUSH
31847: LD_VAR 0 3
31851: PUSH
31852: LD_VAR 0 1
31856: STR
31857: PPUSH
31858: CALL_OW 34
31862: ST_TO_ADDR
31863: GO 31880
// unit := NewCharacter ( ident ) ;
31865: LD_ADDR_VAR 0 5
31869: PUSH
31870: LD_VAR 0 1
31874: PPUSH
31875: CALL_OW 25
31879: ST_TO_ADDR
// result := unit ;
31880: LD_ADDR_VAR 0 4
31884: PUSH
31885: LD_VAR 0 5
31889: ST_TO_ADDR
// end ;
31890: LD_VAR 0 4
31894: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31895: LD_INT 0
31897: PPUSH
31898: PPUSH
// if not side or not nation then
31899: LD_VAR 0 1
31903: NOT
31904: PUSH
31905: LD_VAR 0 2
31909: NOT
31910: OR
31911: IFFALSE 31915
// exit ;
31913: GO 32683
// case nation of nation_american :
31915: LD_VAR 0 2
31919: PUSH
31920: LD_INT 1
31922: DOUBLE
31923: EQUAL
31924: IFTRUE 31928
31926: GO 32142
31928: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31929: LD_ADDR_VAR 0 4
31933: PUSH
31934: LD_INT 35
31936: PUSH
31937: LD_INT 45
31939: PUSH
31940: LD_INT 46
31942: PUSH
31943: LD_INT 47
31945: PUSH
31946: LD_INT 82
31948: PUSH
31949: LD_INT 83
31951: PUSH
31952: LD_INT 84
31954: PUSH
31955: LD_INT 85
31957: PUSH
31958: LD_INT 86
31960: PUSH
31961: LD_INT 1
31963: PUSH
31964: LD_INT 2
31966: PUSH
31967: LD_INT 6
31969: PUSH
31970: LD_INT 15
31972: PUSH
31973: LD_INT 16
31975: PUSH
31976: LD_INT 7
31978: PUSH
31979: LD_INT 12
31981: PUSH
31982: LD_INT 13
31984: PUSH
31985: LD_INT 10
31987: PUSH
31988: LD_INT 14
31990: PUSH
31991: LD_INT 20
31993: PUSH
31994: LD_INT 21
31996: PUSH
31997: LD_INT 22
31999: PUSH
32000: LD_INT 25
32002: PUSH
32003: LD_INT 32
32005: PUSH
32006: LD_INT 27
32008: PUSH
32009: LD_INT 36
32011: PUSH
32012: LD_INT 69
32014: PUSH
32015: LD_INT 39
32017: PUSH
32018: LD_INT 34
32020: PUSH
32021: LD_INT 40
32023: PUSH
32024: LD_INT 48
32026: PUSH
32027: LD_INT 49
32029: PUSH
32030: LD_INT 50
32032: PUSH
32033: LD_INT 51
32035: PUSH
32036: LD_INT 52
32038: PUSH
32039: LD_INT 53
32041: PUSH
32042: LD_INT 54
32044: PUSH
32045: LD_INT 55
32047: PUSH
32048: LD_INT 56
32050: PUSH
32051: LD_INT 57
32053: PUSH
32054: LD_INT 58
32056: PUSH
32057: LD_INT 59
32059: PUSH
32060: LD_INT 60
32062: PUSH
32063: LD_INT 61
32065: PUSH
32066: LD_INT 62
32068: PUSH
32069: LD_INT 80
32071: PUSH
32072: LD_INT 82
32074: PUSH
32075: LD_INT 83
32077: PUSH
32078: LD_INT 84
32080: PUSH
32081: LD_INT 85
32083: PUSH
32084: LD_INT 86
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: ST_TO_ADDR
32140: GO 32607
32142: LD_INT 2
32144: DOUBLE
32145: EQUAL
32146: IFTRUE 32150
32148: GO 32376
32150: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
32151: LD_ADDR_VAR 0 4
32155: PUSH
32156: LD_INT 35
32158: PUSH
32159: LD_INT 45
32161: PUSH
32162: LD_INT 46
32164: PUSH
32165: LD_INT 47
32167: PUSH
32168: LD_INT 82
32170: PUSH
32171: LD_INT 83
32173: PUSH
32174: LD_INT 84
32176: PUSH
32177: LD_INT 85
32179: PUSH
32180: LD_INT 87
32182: PUSH
32183: LD_INT 70
32185: PUSH
32186: LD_INT 1
32188: PUSH
32189: LD_INT 11
32191: PUSH
32192: LD_INT 3
32194: PUSH
32195: LD_INT 4
32197: PUSH
32198: LD_INT 5
32200: PUSH
32201: LD_INT 6
32203: PUSH
32204: LD_INT 15
32206: PUSH
32207: LD_INT 18
32209: PUSH
32210: LD_INT 7
32212: PUSH
32213: LD_INT 17
32215: PUSH
32216: LD_INT 8
32218: PUSH
32219: LD_INT 20
32221: PUSH
32222: LD_INT 21
32224: PUSH
32225: LD_INT 22
32227: PUSH
32228: LD_INT 72
32230: PUSH
32231: LD_INT 26
32233: PUSH
32234: LD_INT 69
32236: PUSH
32237: LD_INT 39
32239: PUSH
32240: LD_INT 40
32242: PUSH
32243: LD_INT 41
32245: PUSH
32246: LD_INT 42
32248: PUSH
32249: LD_INT 43
32251: PUSH
32252: LD_INT 48
32254: PUSH
32255: LD_INT 49
32257: PUSH
32258: LD_INT 50
32260: PUSH
32261: LD_INT 51
32263: PUSH
32264: LD_INT 52
32266: PUSH
32267: LD_INT 53
32269: PUSH
32270: LD_INT 54
32272: PUSH
32273: LD_INT 55
32275: PUSH
32276: LD_INT 56
32278: PUSH
32279: LD_INT 60
32281: PUSH
32282: LD_INT 61
32284: PUSH
32285: LD_INT 62
32287: PUSH
32288: LD_INT 66
32290: PUSH
32291: LD_INT 67
32293: PUSH
32294: LD_INT 68
32296: PUSH
32297: LD_INT 81
32299: PUSH
32300: LD_INT 82
32302: PUSH
32303: LD_INT 83
32305: PUSH
32306: LD_INT 84
32308: PUSH
32309: LD_INT 85
32311: PUSH
32312: LD_INT 87
32314: PUSH
32315: LD_INT 88
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: LIST
32362: LIST
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: ST_TO_ADDR
32374: GO 32607
32376: LD_INT 3
32378: DOUBLE
32379: EQUAL
32380: IFTRUE 32384
32382: GO 32606
32384: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32385: LD_ADDR_VAR 0 4
32389: PUSH
32390: LD_INT 46
32392: PUSH
32393: LD_INT 47
32395: PUSH
32396: LD_INT 1
32398: PUSH
32399: LD_INT 2
32401: PUSH
32402: LD_INT 82
32404: PUSH
32405: LD_INT 83
32407: PUSH
32408: LD_INT 84
32410: PUSH
32411: LD_INT 85
32413: PUSH
32414: LD_INT 86
32416: PUSH
32417: LD_INT 11
32419: PUSH
32420: LD_INT 9
32422: PUSH
32423: LD_INT 20
32425: PUSH
32426: LD_INT 19
32428: PUSH
32429: LD_INT 21
32431: PUSH
32432: LD_INT 24
32434: PUSH
32435: LD_INT 22
32437: PUSH
32438: LD_INT 25
32440: PUSH
32441: LD_INT 28
32443: PUSH
32444: LD_INT 29
32446: PUSH
32447: LD_INT 30
32449: PUSH
32450: LD_INT 31
32452: PUSH
32453: LD_INT 37
32455: PUSH
32456: LD_INT 38
32458: PUSH
32459: LD_INT 32
32461: PUSH
32462: LD_INT 27
32464: PUSH
32465: LD_INT 33
32467: PUSH
32468: LD_INT 69
32470: PUSH
32471: LD_INT 39
32473: PUSH
32474: LD_INT 34
32476: PUSH
32477: LD_INT 40
32479: PUSH
32480: LD_INT 71
32482: PUSH
32483: LD_INT 23
32485: PUSH
32486: LD_INT 44
32488: PUSH
32489: LD_INT 48
32491: PUSH
32492: LD_INT 49
32494: PUSH
32495: LD_INT 50
32497: PUSH
32498: LD_INT 51
32500: PUSH
32501: LD_INT 52
32503: PUSH
32504: LD_INT 53
32506: PUSH
32507: LD_INT 54
32509: PUSH
32510: LD_INT 55
32512: PUSH
32513: LD_INT 56
32515: PUSH
32516: LD_INT 57
32518: PUSH
32519: LD_INT 58
32521: PUSH
32522: LD_INT 59
32524: PUSH
32525: LD_INT 63
32527: PUSH
32528: LD_INT 64
32530: PUSH
32531: LD_INT 65
32533: PUSH
32534: LD_INT 82
32536: PUSH
32537: LD_INT 83
32539: PUSH
32540: LD_INT 84
32542: PUSH
32543: LD_INT 85
32545: PUSH
32546: LD_INT 86
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: ST_TO_ADDR
32604: GO 32607
32606: POP
// if state > - 1 and state < 3 then
32607: LD_VAR 0 3
32611: PUSH
32612: LD_INT 1
32614: NEG
32615: GREATER
32616: PUSH
32617: LD_VAR 0 3
32621: PUSH
32622: LD_INT 3
32624: LESS
32625: AND
32626: IFFALSE 32683
// for i in result do
32628: LD_ADDR_VAR 0 5
32632: PUSH
32633: LD_VAR 0 4
32637: PUSH
32638: FOR_IN
32639: IFFALSE 32681
// if GetTech ( i , side ) <> state then
32641: LD_VAR 0 5
32645: PPUSH
32646: LD_VAR 0 1
32650: PPUSH
32651: CALL_OW 321
32655: PUSH
32656: LD_VAR 0 3
32660: NONEQUAL
32661: IFFALSE 32679
// result := result diff i ;
32663: LD_ADDR_VAR 0 4
32667: PUSH
32668: LD_VAR 0 4
32672: PUSH
32673: LD_VAR 0 5
32677: DIFF
32678: ST_TO_ADDR
32679: GO 32638
32681: POP
32682: POP
// end ;
32683: LD_VAR 0 4
32687: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32688: LD_INT 0
32690: PPUSH
32691: PPUSH
32692: PPUSH
// result := true ;
32693: LD_ADDR_VAR 0 3
32697: PUSH
32698: LD_INT 1
32700: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32701: LD_ADDR_VAR 0 5
32705: PUSH
32706: LD_VAR 0 2
32710: PPUSH
32711: CALL_OW 480
32715: ST_TO_ADDR
// if not tmp then
32716: LD_VAR 0 5
32720: NOT
32721: IFFALSE 32725
// exit ;
32723: GO 32774
// for i in tmp do
32725: LD_ADDR_VAR 0 4
32729: PUSH
32730: LD_VAR 0 5
32734: PUSH
32735: FOR_IN
32736: IFFALSE 32772
// if GetTech ( i , side ) <> state_researched then
32738: LD_VAR 0 4
32742: PPUSH
32743: LD_VAR 0 1
32747: PPUSH
32748: CALL_OW 321
32752: PUSH
32753: LD_INT 2
32755: NONEQUAL
32756: IFFALSE 32770
// begin result := false ;
32758: LD_ADDR_VAR 0 3
32762: PUSH
32763: LD_INT 0
32765: ST_TO_ADDR
// exit ;
32766: POP
32767: POP
32768: GO 32774
// end ;
32770: GO 32735
32772: POP
32773: POP
// end ;
32774: LD_VAR 0 3
32778: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32779: LD_INT 0
32781: PPUSH
32782: PPUSH
32783: PPUSH
32784: PPUSH
32785: PPUSH
32786: PPUSH
32787: PPUSH
32788: PPUSH
32789: PPUSH
32790: PPUSH
32791: PPUSH
32792: PPUSH
32793: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32794: LD_VAR 0 1
32798: NOT
32799: PUSH
32800: LD_VAR 0 1
32804: PPUSH
32805: CALL_OW 257
32809: PUSH
32810: LD_INT 9
32812: NONEQUAL
32813: OR
32814: IFFALSE 32818
// exit ;
32816: GO 33391
// side := GetSide ( unit ) ;
32818: LD_ADDR_VAR 0 9
32822: PUSH
32823: LD_VAR 0 1
32827: PPUSH
32828: CALL_OW 255
32832: ST_TO_ADDR
// tech_space := tech_spacanom ;
32833: LD_ADDR_VAR 0 12
32837: PUSH
32838: LD_INT 29
32840: ST_TO_ADDR
// tech_time := tech_taurad ;
32841: LD_ADDR_VAR 0 13
32845: PUSH
32846: LD_INT 28
32848: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32849: LD_ADDR_VAR 0 11
32853: PUSH
32854: LD_VAR 0 1
32858: PPUSH
32859: CALL_OW 310
32863: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32864: LD_VAR 0 11
32868: PPUSH
32869: CALL_OW 247
32873: PUSH
32874: LD_INT 2
32876: EQUAL
32877: IFFALSE 32881
// exit ;
32879: GO 33391
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32881: LD_ADDR_VAR 0 8
32885: PUSH
32886: LD_INT 81
32888: PUSH
32889: LD_VAR 0 9
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 3
32900: PUSH
32901: LD_INT 21
32903: PUSH
32904: LD_INT 3
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PPUSH
32919: CALL_OW 69
32923: ST_TO_ADDR
// if not tmp then
32924: LD_VAR 0 8
32928: NOT
32929: IFFALSE 32933
// exit ;
32931: GO 33391
// if in_unit then
32933: LD_VAR 0 11
32937: IFFALSE 32961
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32939: LD_ADDR_VAR 0 10
32943: PUSH
32944: LD_VAR 0 8
32948: PPUSH
32949: LD_VAR 0 11
32953: PPUSH
32954: CALL_OW 74
32958: ST_TO_ADDR
32959: GO 32981
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32961: LD_ADDR_VAR 0 10
32965: PUSH
32966: LD_VAR 0 8
32970: PPUSH
32971: LD_VAR 0 1
32975: PPUSH
32976: CALL_OW 74
32980: ST_TO_ADDR
// if not enemy then
32981: LD_VAR 0 10
32985: NOT
32986: IFFALSE 32990
// exit ;
32988: GO 33391
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32990: LD_VAR 0 11
32994: PUSH
32995: LD_VAR 0 11
32999: PPUSH
33000: LD_VAR 0 10
33004: PPUSH
33005: CALL_OW 296
33009: PUSH
33010: LD_INT 13
33012: GREATER
33013: AND
33014: PUSH
33015: LD_VAR 0 1
33019: PPUSH
33020: LD_VAR 0 10
33024: PPUSH
33025: CALL_OW 296
33029: PUSH
33030: LD_INT 12
33032: GREATER
33033: OR
33034: IFFALSE 33038
// exit ;
33036: GO 33391
// missile := [ 1 ] ;
33038: LD_ADDR_VAR 0 14
33042: PUSH
33043: LD_INT 1
33045: PUSH
33046: EMPTY
33047: LIST
33048: ST_TO_ADDR
// if Researched ( side , tech_space ) then
33049: LD_VAR 0 9
33053: PPUSH
33054: LD_VAR 0 12
33058: PPUSH
33059: CALL_OW 325
33063: IFFALSE 33092
// missile := Insert ( missile , missile + 1 , 2 ) ;
33065: LD_ADDR_VAR 0 14
33069: PUSH
33070: LD_VAR 0 14
33074: PPUSH
33075: LD_VAR 0 14
33079: PUSH
33080: LD_INT 1
33082: PLUS
33083: PPUSH
33084: LD_INT 2
33086: PPUSH
33087: CALL_OW 2
33091: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
33092: LD_VAR 0 9
33096: PPUSH
33097: LD_VAR 0 13
33101: PPUSH
33102: CALL_OW 325
33106: PUSH
33107: LD_VAR 0 10
33111: PPUSH
33112: CALL_OW 255
33116: PPUSH
33117: LD_VAR 0 13
33121: PPUSH
33122: CALL_OW 325
33126: NOT
33127: AND
33128: IFFALSE 33157
// missile := Insert ( missile , missile + 1 , 3 ) ;
33130: LD_ADDR_VAR 0 14
33134: PUSH
33135: LD_VAR 0 14
33139: PPUSH
33140: LD_VAR 0 14
33144: PUSH
33145: LD_INT 1
33147: PLUS
33148: PPUSH
33149: LD_INT 3
33151: PPUSH
33152: CALL_OW 2
33156: ST_TO_ADDR
// if missile < 2 then
33157: LD_VAR 0 14
33161: PUSH
33162: LD_INT 2
33164: LESS
33165: IFFALSE 33169
// exit ;
33167: GO 33391
// x := GetX ( enemy ) ;
33169: LD_ADDR_VAR 0 4
33173: PUSH
33174: LD_VAR 0 10
33178: PPUSH
33179: CALL_OW 250
33183: ST_TO_ADDR
// y := GetY ( enemy ) ;
33184: LD_ADDR_VAR 0 5
33188: PUSH
33189: LD_VAR 0 10
33193: PPUSH
33194: CALL_OW 251
33198: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
33199: LD_ADDR_VAR 0 6
33203: PUSH
33204: LD_VAR 0 4
33208: PUSH
33209: LD_INT 1
33211: NEG
33212: PPUSH
33213: LD_INT 1
33215: PPUSH
33216: CALL_OW 12
33220: PLUS
33221: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
33222: LD_ADDR_VAR 0 7
33226: PUSH
33227: LD_VAR 0 5
33231: PUSH
33232: LD_INT 1
33234: NEG
33235: PPUSH
33236: LD_INT 1
33238: PPUSH
33239: CALL_OW 12
33243: PLUS
33244: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33245: LD_VAR 0 6
33249: PPUSH
33250: LD_VAR 0 7
33254: PPUSH
33255: CALL_OW 488
33259: NOT
33260: IFFALSE 33282
// begin _x := x ;
33262: LD_ADDR_VAR 0 6
33266: PUSH
33267: LD_VAR 0 4
33271: ST_TO_ADDR
// _y := y ;
33272: LD_ADDR_VAR 0 7
33276: PUSH
33277: LD_VAR 0 5
33281: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33282: LD_ADDR_VAR 0 3
33286: PUSH
33287: LD_INT 1
33289: PPUSH
33290: LD_VAR 0 14
33294: PPUSH
33295: CALL_OW 12
33299: ST_TO_ADDR
// case i of 1 :
33300: LD_VAR 0 3
33304: PUSH
33305: LD_INT 1
33307: DOUBLE
33308: EQUAL
33309: IFTRUE 33313
33311: GO 33330
33313: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33314: LD_VAR 0 1
33318: PPUSH
33319: LD_VAR 0 10
33323: PPUSH
33324: CALL_OW 115
33328: GO 33391
33330: LD_INT 2
33332: DOUBLE
33333: EQUAL
33334: IFTRUE 33338
33336: GO 33360
33338: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33339: LD_VAR 0 1
33343: PPUSH
33344: LD_VAR 0 6
33348: PPUSH
33349: LD_VAR 0 7
33353: PPUSH
33354: CALL_OW 153
33358: GO 33391
33360: LD_INT 3
33362: DOUBLE
33363: EQUAL
33364: IFTRUE 33368
33366: GO 33390
33368: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33369: LD_VAR 0 1
33373: PPUSH
33374: LD_VAR 0 6
33378: PPUSH
33379: LD_VAR 0 7
33383: PPUSH
33384: CALL_OW 154
33388: GO 33391
33390: POP
// end ;
33391: LD_VAR 0 2
33395: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33396: LD_INT 0
33398: PPUSH
33399: PPUSH
33400: PPUSH
33401: PPUSH
33402: PPUSH
33403: PPUSH
// if not unit or not building then
33404: LD_VAR 0 1
33408: NOT
33409: PUSH
33410: LD_VAR 0 2
33414: NOT
33415: OR
33416: IFFALSE 33420
// exit ;
33418: GO 33578
// x := GetX ( building ) ;
33420: LD_ADDR_VAR 0 5
33424: PUSH
33425: LD_VAR 0 2
33429: PPUSH
33430: CALL_OW 250
33434: ST_TO_ADDR
// y := GetY ( building ) ;
33435: LD_ADDR_VAR 0 6
33439: PUSH
33440: LD_VAR 0 2
33444: PPUSH
33445: CALL_OW 251
33449: ST_TO_ADDR
// for i = 0 to 5 do
33450: LD_ADDR_VAR 0 4
33454: PUSH
33455: DOUBLE
33456: LD_INT 0
33458: DEC
33459: ST_TO_ADDR
33460: LD_INT 5
33462: PUSH
33463: FOR_TO
33464: IFFALSE 33576
// begin _x := ShiftX ( x , i , 3 ) ;
33466: LD_ADDR_VAR 0 7
33470: PUSH
33471: LD_VAR 0 5
33475: PPUSH
33476: LD_VAR 0 4
33480: PPUSH
33481: LD_INT 3
33483: PPUSH
33484: CALL_OW 272
33488: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33489: LD_ADDR_VAR 0 8
33493: PUSH
33494: LD_VAR 0 6
33498: PPUSH
33499: LD_VAR 0 4
33503: PPUSH
33504: LD_INT 3
33506: PPUSH
33507: CALL_OW 273
33511: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33512: LD_VAR 0 7
33516: PPUSH
33517: LD_VAR 0 8
33521: PPUSH
33522: CALL_OW 488
33526: NOT
33527: IFFALSE 33531
// continue ;
33529: GO 33463
// if HexInfo ( _x , _y ) = 0 then
33531: LD_VAR 0 7
33535: PPUSH
33536: LD_VAR 0 8
33540: PPUSH
33541: CALL_OW 428
33545: PUSH
33546: LD_INT 0
33548: EQUAL
33549: IFFALSE 33574
// begin ComMoveXY ( unit , _x , _y ) ;
33551: LD_VAR 0 1
33555: PPUSH
33556: LD_VAR 0 7
33560: PPUSH
33561: LD_VAR 0 8
33565: PPUSH
33566: CALL_OW 111
// exit ;
33570: POP
33571: POP
33572: GO 33578
// end ; end ;
33574: GO 33463
33576: POP
33577: POP
// end ;
33578: LD_VAR 0 3
33582: RET
// export function ScanBase ( side , base_area ) ; begin
33583: LD_INT 0
33585: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33586: LD_ADDR_VAR 0 3
33590: PUSH
33591: LD_VAR 0 2
33595: PPUSH
33596: LD_INT 81
33598: PUSH
33599: LD_VAR 0 1
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: PPUSH
33608: CALL_OW 70
33612: ST_TO_ADDR
// end ;
33613: LD_VAR 0 3
33617: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33618: LD_INT 0
33620: PPUSH
33621: PPUSH
33622: PPUSH
33623: PPUSH
// result := false ;
33624: LD_ADDR_VAR 0 2
33628: PUSH
33629: LD_INT 0
33631: ST_TO_ADDR
// side := GetSide ( unit ) ;
33632: LD_ADDR_VAR 0 3
33636: PUSH
33637: LD_VAR 0 1
33641: PPUSH
33642: CALL_OW 255
33646: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33647: LD_ADDR_VAR 0 4
33651: PUSH
33652: LD_VAR 0 1
33656: PPUSH
33657: CALL_OW 248
33661: ST_TO_ADDR
// case nat of 1 :
33662: LD_VAR 0 4
33666: PUSH
33667: LD_INT 1
33669: DOUBLE
33670: EQUAL
33671: IFTRUE 33675
33673: GO 33686
33675: POP
// tech := tech_lassight ; 2 :
33676: LD_ADDR_VAR 0 5
33680: PUSH
33681: LD_INT 12
33683: ST_TO_ADDR
33684: GO 33725
33686: LD_INT 2
33688: DOUBLE
33689: EQUAL
33690: IFTRUE 33694
33692: GO 33705
33694: POP
// tech := tech_mortar ; 3 :
33695: LD_ADDR_VAR 0 5
33699: PUSH
33700: LD_INT 41
33702: ST_TO_ADDR
33703: GO 33725
33705: LD_INT 3
33707: DOUBLE
33708: EQUAL
33709: IFTRUE 33713
33711: GO 33724
33713: POP
// tech := tech_bazooka ; end ;
33714: LD_ADDR_VAR 0 5
33718: PUSH
33719: LD_INT 44
33721: ST_TO_ADDR
33722: GO 33725
33724: POP
// if Researched ( side , tech ) then
33725: LD_VAR 0 3
33729: PPUSH
33730: LD_VAR 0 5
33734: PPUSH
33735: CALL_OW 325
33739: IFFALSE 33766
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33741: LD_ADDR_VAR 0 2
33745: PUSH
33746: LD_INT 5
33748: PUSH
33749: LD_INT 8
33751: PUSH
33752: LD_INT 9
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: LIST
33759: PUSH
33760: LD_VAR 0 4
33764: ARRAY
33765: ST_TO_ADDR
// end ;
33766: LD_VAR 0 2
33770: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33771: LD_INT 0
33773: PPUSH
33774: PPUSH
33775: PPUSH
// if not mines then
33776: LD_VAR 0 2
33780: NOT
33781: IFFALSE 33785
// exit ;
33783: GO 33929
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33785: LD_ADDR_VAR 0 5
33789: PUSH
33790: LD_INT 81
33792: PUSH
33793: LD_VAR 0 1
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 3
33804: PUSH
33805: LD_INT 21
33807: PUSH
33808: LD_INT 3
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: PPUSH
33823: CALL_OW 69
33827: ST_TO_ADDR
// for i in mines do
33828: LD_ADDR_VAR 0 4
33832: PUSH
33833: LD_VAR 0 2
33837: PUSH
33838: FOR_IN
33839: IFFALSE 33927
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33841: LD_VAR 0 4
33845: PUSH
33846: LD_INT 1
33848: ARRAY
33849: PPUSH
33850: LD_VAR 0 4
33854: PUSH
33855: LD_INT 2
33857: ARRAY
33858: PPUSH
33859: CALL_OW 458
33863: NOT
33864: IFFALSE 33868
// continue ;
33866: GO 33838
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33868: LD_VAR 0 4
33872: PUSH
33873: LD_INT 1
33875: ARRAY
33876: PPUSH
33877: LD_VAR 0 4
33881: PUSH
33882: LD_INT 2
33884: ARRAY
33885: PPUSH
33886: CALL_OW 428
33890: PUSH
33891: LD_VAR 0 5
33895: IN
33896: IFFALSE 33925
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33898: LD_VAR 0 4
33902: PUSH
33903: LD_INT 1
33905: ARRAY
33906: PPUSH
33907: LD_VAR 0 4
33911: PUSH
33912: LD_INT 2
33914: ARRAY
33915: PPUSH
33916: LD_VAR 0 1
33920: PPUSH
33921: CALL_OW 456
// end ;
33925: GO 33838
33927: POP
33928: POP
// end ;
33929: LD_VAR 0 3
33933: RET
// export function Count ( array ) ; var i ; begin
33934: LD_INT 0
33936: PPUSH
33937: PPUSH
// result := 0 ;
33938: LD_ADDR_VAR 0 2
33942: PUSH
33943: LD_INT 0
33945: ST_TO_ADDR
// for i in array do
33946: LD_ADDR_VAR 0 3
33950: PUSH
33951: LD_VAR 0 1
33955: PUSH
33956: FOR_IN
33957: IFFALSE 33981
// if i then
33959: LD_VAR 0 3
33963: IFFALSE 33979
// result := result + 1 ;
33965: LD_ADDR_VAR 0 2
33969: PUSH
33970: LD_VAR 0 2
33974: PUSH
33975: LD_INT 1
33977: PLUS
33978: ST_TO_ADDR
33979: GO 33956
33981: POP
33982: POP
// end ;
33983: LD_VAR 0 2
33987: RET
// export function IsEmpty ( building ) ; begin
33988: LD_INT 0
33990: PPUSH
// if not building then
33991: LD_VAR 0 1
33995: NOT
33996: IFFALSE 34000
// exit ;
33998: GO 34043
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
34000: LD_ADDR_VAR 0 2
34004: PUSH
34005: LD_VAR 0 1
34009: PUSH
34010: LD_INT 22
34012: PUSH
34013: LD_VAR 0 1
34017: PPUSH
34018: CALL_OW 255
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: PUSH
34027: LD_INT 58
34029: PUSH
34030: EMPTY
34031: LIST
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: PPUSH
34037: CALL_OW 69
34041: IN
34042: ST_TO_ADDR
// end ;
34043: LD_VAR 0 2
34047: RET
// export function IsNotFull ( building ) ; begin
34048: LD_INT 0
34050: PPUSH
// if not building then
34051: LD_VAR 0 1
34055: NOT
34056: IFFALSE 34060
// exit ;
34058: GO 34079
// result := UnitsInside ( building ) < 6 ;
34060: LD_ADDR_VAR 0 2
34064: PUSH
34065: LD_VAR 0 1
34069: PPUSH
34070: CALL_OW 313
34074: PUSH
34075: LD_INT 6
34077: LESS
34078: ST_TO_ADDR
// end ;
34079: LD_VAR 0 2
34083: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
34084: LD_INT 0
34086: PPUSH
34087: PPUSH
34088: PPUSH
34089: PPUSH
// tmp := [ ] ;
34090: LD_ADDR_VAR 0 3
34094: PUSH
34095: EMPTY
34096: ST_TO_ADDR
// list := [ ] ;
34097: LD_ADDR_VAR 0 5
34101: PUSH
34102: EMPTY
34103: ST_TO_ADDR
// for i = 16 to 25 do
34104: LD_ADDR_VAR 0 4
34108: PUSH
34109: DOUBLE
34110: LD_INT 16
34112: DEC
34113: ST_TO_ADDR
34114: LD_INT 25
34116: PUSH
34117: FOR_TO
34118: IFFALSE 34191
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
34120: LD_ADDR_VAR 0 3
34124: PUSH
34125: LD_VAR 0 3
34129: PUSH
34130: LD_INT 22
34132: PUSH
34133: LD_VAR 0 1
34137: PPUSH
34138: CALL_OW 255
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: LD_INT 91
34149: PUSH
34150: LD_VAR 0 1
34154: PUSH
34155: LD_INT 6
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: LIST
34162: PUSH
34163: LD_INT 30
34165: PUSH
34166: LD_VAR 0 4
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: LIST
34179: PUSH
34180: EMPTY
34181: LIST
34182: PPUSH
34183: CALL_OW 69
34187: ADD
34188: ST_TO_ADDR
34189: GO 34117
34191: POP
34192: POP
// for i = 1 to tmp do
34193: LD_ADDR_VAR 0 4
34197: PUSH
34198: DOUBLE
34199: LD_INT 1
34201: DEC
34202: ST_TO_ADDR
34203: LD_VAR 0 3
34207: PUSH
34208: FOR_TO
34209: IFFALSE 34297
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34211: LD_ADDR_VAR 0 5
34215: PUSH
34216: LD_VAR 0 5
34220: PUSH
34221: LD_VAR 0 3
34225: PUSH
34226: LD_VAR 0 4
34230: ARRAY
34231: PPUSH
34232: CALL_OW 266
34236: PUSH
34237: LD_VAR 0 3
34241: PUSH
34242: LD_VAR 0 4
34246: ARRAY
34247: PPUSH
34248: CALL_OW 250
34252: PUSH
34253: LD_VAR 0 3
34257: PUSH
34258: LD_VAR 0 4
34262: ARRAY
34263: PPUSH
34264: CALL_OW 251
34268: PUSH
34269: LD_VAR 0 3
34273: PUSH
34274: LD_VAR 0 4
34278: ARRAY
34279: PPUSH
34280: CALL_OW 254
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: PUSH
34291: EMPTY
34292: LIST
34293: ADD
34294: ST_TO_ADDR
34295: GO 34208
34297: POP
34298: POP
// result := list ;
34299: LD_ADDR_VAR 0 2
34303: PUSH
34304: LD_VAR 0 5
34308: ST_TO_ADDR
// end ;
34309: LD_VAR 0 2
34313: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34314: LD_INT 0
34316: PPUSH
34317: PPUSH
34318: PPUSH
34319: PPUSH
34320: PPUSH
34321: PPUSH
34322: PPUSH
// if not factory then
34323: LD_VAR 0 1
34327: NOT
34328: IFFALSE 34332
// exit ;
34330: GO 34925
// if control = control_apeman then
34332: LD_VAR 0 4
34336: PUSH
34337: LD_INT 5
34339: EQUAL
34340: IFFALSE 34449
// begin tmp := UnitsInside ( factory ) ;
34342: LD_ADDR_VAR 0 8
34346: PUSH
34347: LD_VAR 0 1
34351: PPUSH
34352: CALL_OW 313
34356: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34357: LD_VAR 0 8
34361: PPUSH
34362: LD_INT 25
34364: PUSH
34365: LD_INT 12
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PPUSH
34372: CALL_OW 72
34376: NOT
34377: IFFALSE 34387
// control := control_manual ;
34379: LD_ADDR_VAR 0 4
34383: PUSH
34384: LD_INT 1
34386: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34387: LD_ADDR_VAR 0 8
34391: PUSH
34392: LD_VAR 0 1
34396: PPUSH
34397: CALL 34084 0 1
34401: ST_TO_ADDR
// if tmp then
34402: LD_VAR 0 8
34406: IFFALSE 34449
// begin for i in tmp do
34408: LD_ADDR_VAR 0 7
34412: PUSH
34413: LD_VAR 0 8
34417: PUSH
34418: FOR_IN
34419: IFFALSE 34447
// if i [ 1 ] = b_ext_radio then
34421: LD_VAR 0 7
34425: PUSH
34426: LD_INT 1
34428: ARRAY
34429: PUSH
34430: LD_INT 22
34432: EQUAL
34433: IFFALSE 34445
// begin control := control_remote ;
34435: LD_ADDR_VAR 0 4
34439: PUSH
34440: LD_INT 2
34442: ST_TO_ADDR
// break ;
34443: GO 34447
// end ;
34445: GO 34418
34447: POP
34448: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34449: LD_VAR 0 1
34453: PPUSH
34454: LD_VAR 0 2
34458: PPUSH
34459: LD_VAR 0 3
34463: PPUSH
34464: LD_VAR 0 4
34468: PPUSH
34469: LD_VAR 0 5
34473: PPUSH
34474: CALL_OW 448
34478: IFFALSE 34513
// begin result := [ chassis , engine , control , weapon ] ;
34480: LD_ADDR_VAR 0 6
34484: PUSH
34485: LD_VAR 0 2
34489: PUSH
34490: LD_VAR 0 3
34494: PUSH
34495: LD_VAR 0 4
34499: PUSH
34500: LD_VAR 0 5
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: ST_TO_ADDR
// exit ;
34511: GO 34925
// end ; _chassis := AvailableChassisList ( factory ) ;
34513: LD_ADDR_VAR 0 9
34517: PUSH
34518: LD_VAR 0 1
34522: PPUSH
34523: CALL_OW 475
34527: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34528: LD_ADDR_VAR 0 11
34532: PUSH
34533: LD_VAR 0 1
34537: PPUSH
34538: CALL_OW 476
34542: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34543: LD_ADDR_VAR 0 12
34547: PUSH
34548: LD_VAR 0 1
34552: PPUSH
34553: CALL_OW 477
34557: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34558: LD_ADDR_VAR 0 10
34562: PUSH
34563: LD_VAR 0 1
34567: PPUSH
34568: CALL_OW 478
34572: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34573: LD_VAR 0 9
34577: NOT
34578: PUSH
34579: LD_VAR 0 11
34583: NOT
34584: OR
34585: PUSH
34586: LD_VAR 0 12
34590: NOT
34591: OR
34592: PUSH
34593: LD_VAR 0 10
34597: NOT
34598: OR
34599: IFFALSE 34634
// begin result := [ chassis , engine , control , weapon ] ;
34601: LD_ADDR_VAR 0 6
34605: PUSH
34606: LD_VAR 0 2
34610: PUSH
34611: LD_VAR 0 3
34615: PUSH
34616: LD_VAR 0 4
34620: PUSH
34621: LD_VAR 0 5
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: LIST
34630: LIST
34631: ST_TO_ADDR
// exit ;
34632: GO 34925
// end ; if not chassis in _chassis then
34634: LD_VAR 0 2
34638: PUSH
34639: LD_VAR 0 9
34643: IN
34644: NOT
34645: IFFALSE 34671
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34647: LD_ADDR_VAR 0 2
34651: PUSH
34652: LD_VAR 0 9
34656: PUSH
34657: LD_INT 1
34659: PPUSH
34660: LD_VAR 0 9
34664: PPUSH
34665: CALL_OW 12
34669: ARRAY
34670: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34671: LD_VAR 0 2
34675: PPUSH
34676: LD_VAR 0 3
34680: PPUSH
34681: CALL 34930 0 2
34685: NOT
34686: IFFALSE 34745
// repeat engine := _engine [ 1 ] ;
34688: LD_ADDR_VAR 0 3
34692: PUSH
34693: LD_VAR 0 11
34697: PUSH
34698: LD_INT 1
34700: ARRAY
34701: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34702: LD_ADDR_VAR 0 11
34706: PUSH
34707: LD_VAR 0 11
34711: PPUSH
34712: LD_INT 1
34714: PPUSH
34715: CALL_OW 3
34719: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34720: LD_VAR 0 2
34724: PPUSH
34725: LD_VAR 0 3
34729: PPUSH
34730: CALL 34930 0 2
34734: PUSH
34735: LD_VAR 0 11
34739: PUSH
34740: EMPTY
34741: EQUAL
34742: OR
34743: IFFALSE 34688
// if not control in _control then
34745: LD_VAR 0 4
34749: PUSH
34750: LD_VAR 0 12
34754: IN
34755: NOT
34756: IFFALSE 34782
// control := _control [ rand ( 1 , _control ) ] ;
34758: LD_ADDR_VAR 0 4
34762: PUSH
34763: LD_VAR 0 12
34767: PUSH
34768: LD_INT 1
34770: PPUSH
34771: LD_VAR 0 12
34775: PPUSH
34776: CALL_OW 12
34780: ARRAY
34781: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34782: LD_VAR 0 2
34786: PPUSH
34787: LD_VAR 0 5
34791: PPUSH
34792: CALL 35150 0 2
34796: NOT
34797: IFFALSE 34856
// repeat weapon := _weapon [ 1 ] ;
34799: LD_ADDR_VAR 0 5
34803: PUSH
34804: LD_VAR 0 10
34808: PUSH
34809: LD_INT 1
34811: ARRAY
34812: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34813: LD_ADDR_VAR 0 10
34817: PUSH
34818: LD_VAR 0 10
34822: PPUSH
34823: LD_INT 1
34825: PPUSH
34826: CALL_OW 3
34830: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34831: LD_VAR 0 2
34835: PPUSH
34836: LD_VAR 0 5
34840: PPUSH
34841: CALL 35150 0 2
34845: PUSH
34846: LD_VAR 0 10
34850: PUSH
34851: EMPTY
34852: EQUAL
34853: OR
34854: IFFALSE 34799
// result := [ ] ;
34856: LD_ADDR_VAR 0 6
34860: PUSH
34861: EMPTY
34862: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34863: LD_VAR 0 1
34867: PPUSH
34868: LD_VAR 0 2
34872: PPUSH
34873: LD_VAR 0 3
34877: PPUSH
34878: LD_VAR 0 4
34882: PPUSH
34883: LD_VAR 0 5
34887: PPUSH
34888: CALL_OW 448
34892: IFFALSE 34925
// result := [ chassis , engine , control , weapon ] ;
34894: LD_ADDR_VAR 0 6
34898: PUSH
34899: LD_VAR 0 2
34903: PUSH
34904: LD_VAR 0 3
34908: PUSH
34909: LD_VAR 0 4
34913: PUSH
34914: LD_VAR 0 5
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: ST_TO_ADDR
// end ;
34925: LD_VAR 0 6
34929: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34930: LD_INT 0
34932: PPUSH
// if not chassis or not engine then
34933: LD_VAR 0 1
34937: NOT
34938: PUSH
34939: LD_VAR 0 2
34943: NOT
34944: OR
34945: IFFALSE 34949
// exit ;
34947: GO 35145
// case engine of engine_solar :
34949: LD_VAR 0 2
34953: PUSH
34954: LD_INT 2
34956: DOUBLE
34957: EQUAL
34958: IFTRUE 34962
34960: GO 35000
34962: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34963: LD_ADDR_VAR 0 3
34967: PUSH
34968: LD_INT 11
34970: PUSH
34971: LD_INT 12
34973: PUSH
34974: LD_INT 13
34976: PUSH
34977: LD_INT 14
34979: PUSH
34980: LD_INT 1
34982: PUSH
34983: LD_INT 2
34985: PUSH
34986: LD_INT 3
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: ST_TO_ADDR
34998: GO 35129
35000: LD_INT 1
35002: DOUBLE
35003: EQUAL
35004: IFTRUE 35008
35006: GO 35070
35008: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
35009: LD_ADDR_VAR 0 3
35013: PUSH
35014: LD_INT 11
35016: PUSH
35017: LD_INT 12
35019: PUSH
35020: LD_INT 13
35022: PUSH
35023: LD_INT 14
35025: PUSH
35026: LD_INT 1
35028: PUSH
35029: LD_INT 2
35031: PUSH
35032: LD_INT 3
35034: PUSH
35035: LD_INT 4
35037: PUSH
35038: LD_INT 5
35040: PUSH
35041: LD_INT 21
35043: PUSH
35044: LD_INT 23
35046: PUSH
35047: LD_INT 22
35049: PUSH
35050: LD_INT 24
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: LIST
35057: LIST
35058: LIST
35059: LIST
35060: LIST
35061: LIST
35062: LIST
35063: LIST
35064: LIST
35065: LIST
35066: LIST
35067: ST_TO_ADDR
35068: GO 35129
35070: LD_INT 3
35072: DOUBLE
35073: EQUAL
35074: IFTRUE 35078
35076: GO 35128
35078: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35079: LD_ADDR_VAR 0 3
35083: PUSH
35084: LD_INT 13
35086: PUSH
35087: LD_INT 14
35089: PUSH
35090: LD_INT 2
35092: PUSH
35093: LD_INT 3
35095: PUSH
35096: LD_INT 4
35098: PUSH
35099: LD_INT 5
35101: PUSH
35102: LD_INT 21
35104: PUSH
35105: LD_INT 22
35107: PUSH
35108: LD_INT 23
35110: PUSH
35111: LD_INT 24
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: ST_TO_ADDR
35126: GO 35129
35128: POP
// result := ( chassis in result ) ;
35129: LD_ADDR_VAR 0 3
35133: PUSH
35134: LD_VAR 0 1
35138: PUSH
35139: LD_VAR 0 3
35143: IN
35144: ST_TO_ADDR
// end ;
35145: LD_VAR 0 3
35149: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35150: LD_INT 0
35152: PPUSH
// if not chassis or not weapon then
35153: LD_VAR 0 1
35157: NOT
35158: PUSH
35159: LD_VAR 0 2
35163: NOT
35164: OR
35165: IFFALSE 35169
// exit ;
35167: GO 36231
// case weapon of us_machine_gun :
35169: LD_VAR 0 2
35173: PUSH
35174: LD_INT 2
35176: DOUBLE
35177: EQUAL
35178: IFTRUE 35182
35180: GO 35212
35182: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35183: LD_ADDR_VAR 0 3
35187: PUSH
35188: LD_INT 1
35190: PUSH
35191: LD_INT 2
35193: PUSH
35194: LD_INT 3
35196: PUSH
35197: LD_INT 4
35199: PUSH
35200: LD_INT 5
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: LIST
35207: LIST
35208: LIST
35209: ST_TO_ADDR
35210: GO 36215
35212: LD_INT 3
35214: DOUBLE
35215: EQUAL
35216: IFTRUE 35220
35218: GO 35250
35220: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35221: LD_ADDR_VAR 0 3
35225: PUSH
35226: LD_INT 1
35228: PUSH
35229: LD_INT 2
35231: PUSH
35232: LD_INT 3
35234: PUSH
35235: LD_INT 4
35237: PUSH
35238: LD_INT 5
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: LIST
35245: LIST
35246: LIST
35247: ST_TO_ADDR
35248: GO 36215
35250: LD_INT 11
35252: DOUBLE
35253: EQUAL
35254: IFTRUE 35258
35256: GO 35288
35258: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35259: LD_ADDR_VAR 0 3
35263: PUSH
35264: LD_INT 1
35266: PUSH
35267: LD_INT 2
35269: PUSH
35270: LD_INT 3
35272: PUSH
35273: LD_INT 4
35275: PUSH
35276: LD_INT 5
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: ST_TO_ADDR
35286: GO 36215
35288: LD_INT 4
35290: DOUBLE
35291: EQUAL
35292: IFTRUE 35296
35294: GO 35322
35296: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35297: LD_ADDR_VAR 0 3
35301: PUSH
35302: LD_INT 2
35304: PUSH
35305: LD_INT 3
35307: PUSH
35308: LD_INT 4
35310: PUSH
35311: LD_INT 5
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: LIST
35318: LIST
35319: ST_TO_ADDR
35320: GO 36215
35322: LD_INT 5
35324: DOUBLE
35325: EQUAL
35326: IFTRUE 35330
35328: GO 35356
35330: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35331: LD_ADDR_VAR 0 3
35335: PUSH
35336: LD_INT 2
35338: PUSH
35339: LD_INT 3
35341: PUSH
35342: LD_INT 4
35344: PUSH
35345: LD_INT 5
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: ST_TO_ADDR
35354: GO 36215
35356: LD_INT 9
35358: DOUBLE
35359: EQUAL
35360: IFTRUE 35364
35362: GO 35390
35364: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35365: LD_ADDR_VAR 0 3
35369: PUSH
35370: LD_INT 2
35372: PUSH
35373: LD_INT 3
35375: PUSH
35376: LD_INT 4
35378: PUSH
35379: LD_INT 5
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: ST_TO_ADDR
35388: GO 36215
35390: LD_INT 7
35392: DOUBLE
35393: EQUAL
35394: IFTRUE 35398
35396: GO 35424
35398: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35399: LD_ADDR_VAR 0 3
35403: PUSH
35404: LD_INT 2
35406: PUSH
35407: LD_INT 3
35409: PUSH
35410: LD_INT 4
35412: PUSH
35413: LD_INT 5
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: ST_TO_ADDR
35422: GO 36215
35424: LD_INT 12
35426: DOUBLE
35427: EQUAL
35428: IFTRUE 35432
35430: GO 35458
35432: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35433: LD_ADDR_VAR 0 3
35437: PUSH
35438: LD_INT 2
35440: PUSH
35441: LD_INT 3
35443: PUSH
35444: LD_INT 4
35446: PUSH
35447: LD_INT 5
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: LIST
35454: LIST
35455: ST_TO_ADDR
35456: GO 36215
35458: LD_INT 13
35460: DOUBLE
35461: EQUAL
35462: IFTRUE 35466
35464: GO 35492
35466: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35467: LD_ADDR_VAR 0 3
35471: PUSH
35472: LD_INT 2
35474: PUSH
35475: LD_INT 3
35477: PUSH
35478: LD_INT 4
35480: PUSH
35481: LD_INT 5
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: LIST
35488: LIST
35489: ST_TO_ADDR
35490: GO 36215
35492: LD_INT 14
35494: DOUBLE
35495: EQUAL
35496: IFTRUE 35500
35498: GO 35518
35500: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35501: LD_ADDR_VAR 0 3
35505: PUSH
35506: LD_INT 4
35508: PUSH
35509: LD_INT 5
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: ST_TO_ADDR
35516: GO 36215
35518: LD_INT 6
35520: DOUBLE
35521: EQUAL
35522: IFTRUE 35526
35524: GO 35544
35526: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35527: LD_ADDR_VAR 0 3
35531: PUSH
35532: LD_INT 4
35534: PUSH
35535: LD_INT 5
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: ST_TO_ADDR
35542: GO 36215
35544: LD_INT 10
35546: DOUBLE
35547: EQUAL
35548: IFTRUE 35552
35550: GO 35570
35552: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35553: LD_ADDR_VAR 0 3
35557: PUSH
35558: LD_INT 4
35560: PUSH
35561: LD_INT 5
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: ST_TO_ADDR
35568: GO 36215
35570: LD_INT 22
35572: DOUBLE
35573: EQUAL
35574: IFTRUE 35578
35576: GO 35604
35578: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35579: LD_ADDR_VAR 0 3
35583: PUSH
35584: LD_INT 11
35586: PUSH
35587: LD_INT 12
35589: PUSH
35590: LD_INT 13
35592: PUSH
35593: LD_INT 14
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: ST_TO_ADDR
35602: GO 36215
35604: LD_INT 23
35606: DOUBLE
35607: EQUAL
35608: IFTRUE 35612
35610: GO 35638
35612: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35613: LD_ADDR_VAR 0 3
35617: PUSH
35618: LD_INT 11
35620: PUSH
35621: LD_INT 12
35623: PUSH
35624: LD_INT 13
35626: PUSH
35627: LD_INT 14
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: ST_TO_ADDR
35636: GO 36215
35638: LD_INT 24
35640: DOUBLE
35641: EQUAL
35642: IFTRUE 35646
35644: GO 35672
35646: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35647: LD_ADDR_VAR 0 3
35651: PUSH
35652: LD_INT 11
35654: PUSH
35655: LD_INT 12
35657: PUSH
35658: LD_INT 13
35660: PUSH
35661: LD_INT 14
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: ST_TO_ADDR
35670: GO 36215
35672: LD_INT 30
35674: DOUBLE
35675: EQUAL
35676: IFTRUE 35680
35678: GO 35706
35680: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35681: LD_ADDR_VAR 0 3
35685: PUSH
35686: LD_INT 11
35688: PUSH
35689: LD_INT 12
35691: PUSH
35692: LD_INT 13
35694: PUSH
35695: LD_INT 14
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: LIST
35702: LIST
35703: ST_TO_ADDR
35704: GO 36215
35706: LD_INT 25
35708: DOUBLE
35709: EQUAL
35710: IFTRUE 35714
35712: GO 35732
35714: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35715: LD_ADDR_VAR 0 3
35719: PUSH
35720: LD_INT 13
35722: PUSH
35723: LD_INT 14
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: ST_TO_ADDR
35730: GO 36215
35732: LD_INT 27
35734: DOUBLE
35735: EQUAL
35736: IFTRUE 35740
35738: GO 35758
35740: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35741: LD_ADDR_VAR 0 3
35745: PUSH
35746: LD_INT 13
35748: PUSH
35749: LD_INT 14
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: ST_TO_ADDR
35756: GO 36215
35758: LD_EXP 37
35762: DOUBLE
35763: EQUAL
35764: IFTRUE 35768
35766: GO 35794
35768: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35769: LD_ADDR_VAR 0 3
35773: PUSH
35774: LD_INT 11
35776: PUSH
35777: LD_INT 12
35779: PUSH
35780: LD_INT 13
35782: PUSH
35783: LD_INT 14
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: LIST
35790: LIST
35791: ST_TO_ADDR
35792: GO 36215
35794: LD_INT 28
35796: DOUBLE
35797: EQUAL
35798: IFTRUE 35802
35800: GO 35820
35802: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35803: LD_ADDR_VAR 0 3
35807: PUSH
35808: LD_INT 13
35810: PUSH
35811: LD_INT 14
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: ST_TO_ADDR
35818: GO 36215
35820: LD_INT 29
35822: DOUBLE
35823: EQUAL
35824: IFTRUE 35828
35826: GO 35846
35828: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35829: LD_ADDR_VAR 0 3
35833: PUSH
35834: LD_INT 13
35836: PUSH
35837: LD_INT 14
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: ST_TO_ADDR
35844: GO 36215
35846: LD_INT 31
35848: DOUBLE
35849: EQUAL
35850: IFTRUE 35854
35852: GO 35872
35854: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35855: LD_ADDR_VAR 0 3
35859: PUSH
35860: LD_INT 13
35862: PUSH
35863: LD_INT 14
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: ST_TO_ADDR
35870: GO 36215
35872: LD_INT 26
35874: DOUBLE
35875: EQUAL
35876: IFTRUE 35880
35878: GO 35898
35880: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35881: LD_ADDR_VAR 0 3
35885: PUSH
35886: LD_INT 13
35888: PUSH
35889: LD_INT 14
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: ST_TO_ADDR
35896: GO 36215
35898: LD_INT 42
35900: DOUBLE
35901: EQUAL
35902: IFTRUE 35906
35904: GO 35932
35906: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35907: LD_ADDR_VAR 0 3
35911: PUSH
35912: LD_INT 21
35914: PUSH
35915: LD_INT 22
35917: PUSH
35918: LD_INT 23
35920: PUSH
35921: LD_INT 24
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: LIST
35928: LIST
35929: ST_TO_ADDR
35930: GO 36215
35932: LD_INT 43
35934: DOUBLE
35935: EQUAL
35936: IFTRUE 35940
35938: GO 35966
35940: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35941: LD_ADDR_VAR 0 3
35945: PUSH
35946: LD_INT 21
35948: PUSH
35949: LD_INT 22
35951: PUSH
35952: LD_INT 23
35954: PUSH
35955: LD_INT 24
35957: PUSH
35958: EMPTY
35959: LIST
35960: LIST
35961: LIST
35962: LIST
35963: ST_TO_ADDR
35964: GO 36215
35966: LD_INT 44
35968: DOUBLE
35969: EQUAL
35970: IFTRUE 35974
35972: GO 36000
35974: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35975: LD_ADDR_VAR 0 3
35979: PUSH
35980: LD_INT 21
35982: PUSH
35983: LD_INT 22
35985: PUSH
35986: LD_INT 23
35988: PUSH
35989: LD_INT 24
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: LIST
35996: LIST
35997: ST_TO_ADDR
35998: GO 36215
36000: LD_INT 45
36002: DOUBLE
36003: EQUAL
36004: IFTRUE 36008
36006: GO 36034
36008: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
36009: LD_ADDR_VAR 0 3
36013: PUSH
36014: LD_INT 21
36016: PUSH
36017: LD_INT 22
36019: PUSH
36020: LD_INT 23
36022: PUSH
36023: LD_INT 24
36025: PUSH
36026: EMPTY
36027: LIST
36028: LIST
36029: LIST
36030: LIST
36031: ST_TO_ADDR
36032: GO 36215
36034: LD_INT 49
36036: DOUBLE
36037: EQUAL
36038: IFTRUE 36042
36040: GO 36068
36042: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
36043: LD_ADDR_VAR 0 3
36047: PUSH
36048: LD_INT 21
36050: PUSH
36051: LD_INT 22
36053: PUSH
36054: LD_INT 23
36056: PUSH
36057: LD_INT 24
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: LIST
36064: LIST
36065: ST_TO_ADDR
36066: GO 36215
36068: LD_INT 51
36070: DOUBLE
36071: EQUAL
36072: IFTRUE 36076
36074: GO 36102
36076: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
36077: LD_ADDR_VAR 0 3
36081: PUSH
36082: LD_INT 21
36084: PUSH
36085: LD_INT 22
36087: PUSH
36088: LD_INT 23
36090: PUSH
36091: LD_INT 24
36093: PUSH
36094: EMPTY
36095: LIST
36096: LIST
36097: LIST
36098: LIST
36099: ST_TO_ADDR
36100: GO 36215
36102: LD_INT 52
36104: DOUBLE
36105: EQUAL
36106: IFTRUE 36110
36108: GO 36136
36110: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
36111: LD_ADDR_VAR 0 3
36115: PUSH
36116: LD_INT 21
36118: PUSH
36119: LD_INT 22
36121: PUSH
36122: LD_INT 23
36124: PUSH
36125: LD_INT 24
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: ST_TO_ADDR
36134: GO 36215
36136: LD_INT 53
36138: DOUBLE
36139: EQUAL
36140: IFTRUE 36144
36142: GO 36162
36144: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
36145: LD_ADDR_VAR 0 3
36149: PUSH
36150: LD_INT 23
36152: PUSH
36153: LD_INT 24
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: ST_TO_ADDR
36160: GO 36215
36162: LD_INT 46
36164: DOUBLE
36165: EQUAL
36166: IFTRUE 36170
36168: GO 36188
36170: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36171: LD_ADDR_VAR 0 3
36175: PUSH
36176: LD_INT 23
36178: PUSH
36179: LD_INT 24
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: ST_TO_ADDR
36186: GO 36215
36188: LD_INT 47
36190: DOUBLE
36191: EQUAL
36192: IFTRUE 36196
36194: GO 36214
36196: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36197: LD_ADDR_VAR 0 3
36201: PUSH
36202: LD_INT 23
36204: PUSH
36205: LD_INT 24
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: ST_TO_ADDR
36212: GO 36215
36214: POP
// result := ( chassis in result ) ;
36215: LD_ADDR_VAR 0 3
36219: PUSH
36220: LD_VAR 0 1
36224: PUSH
36225: LD_VAR 0 3
36229: IN
36230: ST_TO_ADDR
// end ;
36231: LD_VAR 0 3
36235: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36236: LD_INT 0
36238: PPUSH
36239: PPUSH
36240: PPUSH
36241: PPUSH
36242: PPUSH
36243: PPUSH
36244: PPUSH
// result := array ;
36245: LD_ADDR_VAR 0 5
36249: PUSH
36250: LD_VAR 0 1
36254: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36255: LD_VAR 0 1
36259: NOT
36260: PUSH
36261: LD_VAR 0 2
36265: NOT
36266: OR
36267: PUSH
36268: LD_VAR 0 3
36272: NOT
36273: OR
36274: PUSH
36275: LD_VAR 0 2
36279: PUSH
36280: LD_VAR 0 1
36284: GREATER
36285: OR
36286: PUSH
36287: LD_VAR 0 3
36291: PUSH
36292: LD_VAR 0 1
36296: GREATER
36297: OR
36298: IFFALSE 36302
// exit ;
36300: GO 36598
// if direction then
36302: LD_VAR 0 4
36306: IFFALSE 36370
// begin d := 1 ;
36308: LD_ADDR_VAR 0 9
36312: PUSH
36313: LD_INT 1
36315: ST_TO_ADDR
// if i_from > i_to then
36316: LD_VAR 0 2
36320: PUSH
36321: LD_VAR 0 3
36325: GREATER
36326: IFFALSE 36352
// length := ( array - i_from ) + i_to else
36328: LD_ADDR_VAR 0 11
36332: PUSH
36333: LD_VAR 0 1
36337: PUSH
36338: LD_VAR 0 2
36342: MINUS
36343: PUSH
36344: LD_VAR 0 3
36348: PLUS
36349: ST_TO_ADDR
36350: GO 36368
// length := i_to - i_from ;
36352: LD_ADDR_VAR 0 11
36356: PUSH
36357: LD_VAR 0 3
36361: PUSH
36362: LD_VAR 0 2
36366: MINUS
36367: ST_TO_ADDR
// end else
36368: GO 36431
// begin d := - 1 ;
36370: LD_ADDR_VAR 0 9
36374: PUSH
36375: LD_INT 1
36377: NEG
36378: ST_TO_ADDR
// if i_from > i_to then
36379: LD_VAR 0 2
36383: PUSH
36384: LD_VAR 0 3
36388: GREATER
36389: IFFALSE 36409
// length := i_from - i_to else
36391: LD_ADDR_VAR 0 11
36395: PUSH
36396: LD_VAR 0 2
36400: PUSH
36401: LD_VAR 0 3
36405: MINUS
36406: ST_TO_ADDR
36407: GO 36431
// length := ( array - i_to ) + i_from ;
36409: LD_ADDR_VAR 0 11
36413: PUSH
36414: LD_VAR 0 1
36418: PUSH
36419: LD_VAR 0 3
36423: MINUS
36424: PUSH
36425: LD_VAR 0 2
36429: PLUS
36430: ST_TO_ADDR
// end ; if not length then
36431: LD_VAR 0 11
36435: NOT
36436: IFFALSE 36440
// exit ;
36438: GO 36598
// tmp := array ;
36440: LD_ADDR_VAR 0 10
36444: PUSH
36445: LD_VAR 0 1
36449: ST_TO_ADDR
// for i = 1 to length do
36450: LD_ADDR_VAR 0 6
36454: PUSH
36455: DOUBLE
36456: LD_INT 1
36458: DEC
36459: ST_TO_ADDR
36460: LD_VAR 0 11
36464: PUSH
36465: FOR_TO
36466: IFFALSE 36586
// begin for j = 1 to array do
36468: LD_ADDR_VAR 0 7
36472: PUSH
36473: DOUBLE
36474: LD_INT 1
36476: DEC
36477: ST_TO_ADDR
36478: LD_VAR 0 1
36482: PUSH
36483: FOR_TO
36484: IFFALSE 36572
// begin k := j + d ;
36486: LD_ADDR_VAR 0 8
36490: PUSH
36491: LD_VAR 0 7
36495: PUSH
36496: LD_VAR 0 9
36500: PLUS
36501: ST_TO_ADDR
// if k > array then
36502: LD_VAR 0 8
36506: PUSH
36507: LD_VAR 0 1
36511: GREATER
36512: IFFALSE 36522
// k := 1 ;
36514: LD_ADDR_VAR 0 8
36518: PUSH
36519: LD_INT 1
36521: ST_TO_ADDR
// if not k then
36522: LD_VAR 0 8
36526: NOT
36527: IFFALSE 36539
// k := array ;
36529: LD_ADDR_VAR 0 8
36533: PUSH
36534: LD_VAR 0 1
36538: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36539: LD_ADDR_VAR 0 10
36543: PUSH
36544: LD_VAR 0 10
36548: PPUSH
36549: LD_VAR 0 8
36553: PPUSH
36554: LD_VAR 0 1
36558: PUSH
36559: LD_VAR 0 7
36563: ARRAY
36564: PPUSH
36565: CALL_OW 1
36569: ST_TO_ADDR
// end ;
36570: GO 36483
36572: POP
36573: POP
// array := tmp ;
36574: LD_ADDR_VAR 0 1
36578: PUSH
36579: LD_VAR 0 10
36583: ST_TO_ADDR
// end ;
36584: GO 36465
36586: POP
36587: POP
// result := array ;
36588: LD_ADDR_VAR 0 5
36592: PUSH
36593: LD_VAR 0 1
36597: ST_TO_ADDR
// end ;
36598: LD_VAR 0 5
36602: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36603: LD_INT 0
36605: PPUSH
36606: PPUSH
// result := 0 ;
36607: LD_ADDR_VAR 0 3
36611: PUSH
36612: LD_INT 0
36614: ST_TO_ADDR
// if not array or not value in array then
36615: LD_VAR 0 1
36619: NOT
36620: PUSH
36621: LD_VAR 0 2
36625: PUSH
36626: LD_VAR 0 1
36630: IN
36631: NOT
36632: OR
36633: IFFALSE 36637
// exit ;
36635: GO 36691
// for i = 1 to array do
36637: LD_ADDR_VAR 0 4
36641: PUSH
36642: DOUBLE
36643: LD_INT 1
36645: DEC
36646: ST_TO_ADDR
36647: LD_VAR 0 1
36651: PUSH
36652: FOR_TO
36653: IFFALSE 36689
// if value = array [ i ] then
36655: LD_VAR 0 2
36659: PUSH
36660: LD_VAR 0 1
36664: PUSH
36665: LD_VAR 0 4
36669: ARRAY
36670: EQUAL
36671: IFFALSE 36687
// begin result := i ;
36673: LD_ADDR_VAR 0 3
36677: PUSH
36678: LD_VAR 0 4
36682: ST_TO_ADDR
// exit ;
36683: POP
36684: POP
36685: GO 36691
// end ;
36687: GO 36652
36689: POP
36690: POP
// end ;
36691: LD_VAR 0 3
36695: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36696: LD_INT 0
36698: PPUSH
// vc_chassis := chassis ;
36699: LD_ADDR_OWVAR 37
36703: PUSH
36704: LD_VAR 0 1
36708: ST_TO_ADDR
// vc_engine := engine ;
36709: LD_ADDR_OWVAR 39
36713: PUSH
36714: LD_VAR 0 2
36718: ST_TO_ADDR
// vc_control := control ;
36719: LD_ADDR_OWVAR 38
36723: PUSH
36724: LD_VAR 0 3
36728: ST_TO_ADDR
// vc_weapon := weapon ;
36729: LD_ADDR_OWVAR 40
36733: PUSH
36734: LD_VAR 0 4
36738: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36739: LD_ADDR_OWVAR 41
36743: PUSH
36744: LD_VAR 0 5
36748: ST_TO_ADDR
// end ;
36749: LD_VAR 0 6
36753: RET
// export function WantPlant ( unit ) ; var task ; begin
36754: LD_INT 0
36756: PPUSH
36757: PPUSH
// result := false ;
36758: LD_ADDR_VAR 0 2
36762: PUSH
36763: LD_INT 0
36765: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36766: LD_ADDR_VAR 0 3
36770: PUSH
36771: LD_VAR 0 1
36775: PPUSH
36776: CALL_OW 437
36780: ST_TO_ADDR
// if task then
36781: LD_VAR 0 3
36785: IFFALSE 36813
// if task [ 1 ] [ 1 ] = p then
36787: LD_VAR 0 3
36791: PUSH
36792: LD_INT 1
36794: ARRAY
36795: PUSH
36796: LD_INT 1
36798: ARRAY
36799: PUSH
36800: LD_STRING p
36802: EQUAL
36803: IFFALSE 36813
// result := true ;
36805: LD_ADDR_VAR 0 2
36809: PUSH
36810: LD_INT 1
36812: ST_TO_ADDR
// end ;
36813: LD_VAR 0 2
36817: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36818: LD_INT 0
36820: PPUSH
36821: PPUSH
36822: PPUSH
36823: PPUSH
// if pos < 1 then
36824: LD_VAR 0 2
36828: PUSH
36829: LD_INT 1
36831: LESS
36832: IFFALSE 36836
// exit ;
36834: GO 37139
// if pos = 1 then
36836: LD_VAR 0 2
36840: PUSH
36841: LD_INT 1
36843: EQUAL
36844: IFFALSE 36877
// result := Replace ( arr , pos [ 1 ] , value ) else
36846: LD_ADDR_VAR 0 4
36850: PUSH
36851: LD_VAR 0 1
36855: PPUSH
36856: LD_VAR 0 2
36860: PUSH
36861: LD_INT 1
36863: ARRAY
36864: PPUSH
36865: LD_VAR 0 3
36869: PPUSH
36870: CALL_OW 1
36874: ST_TO_ADDR
36875: GO 37139
// begin tmp := arr ;
36877: LD_ADDR_VAR 0 6
36881: PUSH
36882: LD_VAR 0 1
36886: ST_TO_ADDR
// s_arr := [ tmp ] ;
36887: LD_ADDR_VAR 0 7
36891: PUSH
36892: LD_VAR 0 6
36896: PUSH
36897: EMPTY
36898: LIST
36899: ST_TO_ADDR
// for i = 1 to pos - 1 do
36900: LD_ADDR_VAR 0 5
36904: PUSH
36905: DOUBLE
36906: LD_INT 1
36908: DEC
36909: ST_TO_ADDR
36910: LD_VAR 0 2
36914: PUSH
36915: LD_INT 1
36917: MINUS
36918: PUSH
36919: FOR_TO
36920: IFFALSE 36965
// begin tmp := tmp [ pos [ i ] ] ;
36922: LD_ADDR_VAR 0 6
36926: PUSH
36927: LD_VAR 0 6
36931: PUSH
36932: LD_VAR 0 2
36936: PUSH
36937: LD_VAR 0 5
36941: ARRAY
36942: ARRAY
36943: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36944: LD_ADDR_VAR 0 7
36948: PUSH
36949: LD_VAR 0 7
36953: PUSH
36954: LD_VAR 0 6
36958: PUSH
36959: EMPTY
36960: LIST
36961: ADD
36962: ST_TO_ADDR
// end ;
36963: GO 36919
36965: POP
36966: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36967: LD_ADDR_VAR 0 6
36971: PUSH
36972: LD_VAR 0 6
36976: PPUSH
36977: LD_VAR 0 2
36981: PUSH
36982: LD_VAR 0 2
36986: ARRAY
36987: PPUSH
36988: LD_VAR 0 3
36992: PPUSH
36993: CALL_OW 1
36997: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36998: LD_ADDR_VAR 0 7
37002: PUSH
37003: LD_VAR 0 7
37007: PPUSH
37008: LD_VAR 0 7
37012: PPUSH
37013: LD_VAR 0 6
37017: PPUSH
37018: CALL_OW 1
37022: ST_TO_ADDR
// for i = s_arr downto 2 do
37023: LD_ADDR_VAR 0 5
37027: PUSH
37028: DOUBLE
37029: LD_VAR 0 7
37033: INC
37034: ST_TO_ADDR
37035: LD_INT 2
37037: PUSH
37038: FOR_DOWNTO
37039: IFFALSE 37123
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
37041: LD_ADDR_VAR 0 6
37045: PUSH
37046: LD_VAR 0 7
37050: PUSH
37051: LD_VAR 0 5
37055: PUSH
37056: LD_INT 1
37058: MINUS
37059: ARRAY
37060: PPUSH
37061: LD_VAR 0 2
37065: PUSH
37066: LD_VAR 0 5
37070: PUSH
37071: LD_INT 1
37073: MINUS
37074: ARRAY
37075: PPUSH
37076: LD_VAR 0 7
37080: PUSH
37081: LD_VAR 0 5
37085: ARRAY
37086: PPUSH
37087: CALL_OW 1
37091: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
37092: LD_ADDR_VAR 0 7
37096: PUSH
37097: LD_VAR 0 7
37101: PPUSH
37102: LD_VAR 0 5
37106: PUSH
37107: LD_INT 1
37109: MINUS
37110: PPUSH
37111: LD_VAR 0 6
37115: PPUSH
37116: CALL_OW 1
37120: ST_TO_ADDR
// end ;
37121: GO 37038
37123: POP
37124: POP
// result := s_arr [ 1 ] ;
37125: LD_ADDR_VAR 0 4
37129: PUSH
37130: LD_VAR 0 7
37134: PUSH
37135: LD_INT 1
37137: ARRAY
37138: ST_TO_ADDR
// end ; end ;
37139: LD_VAR 0 4
37143: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
37144: LD_INT 0
37146: PPUSH
37147: PPUSH
// if not list then
37148: LD_VAR 0 1
37152: NOT
37153: IFFALSE 37157
// exit ;
37155: GO 37248
// i := list [ pos1 ] ;
37157: LD_ADDR_VAR 0 5
37161: PUSH
37162: LD_VAR 0 1
37166: PUSH
37167: LD_VAR 0 2
37171: ARRAY
37172: ST_TO_ADDR
// if not i then
37173: LD_VAR 0 5
37177: NOT
37178: IFFALSE 37182
// exit ;
37180: GO 37248
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37182: LD_ADDR_VAR 0 1
37186: PUSH
37187: LD_VAR 0 1
37191: PPUSH
37192: LD_VAR 0 2
37196: PPUSH
37197: LD_VAR 0 1
37201: PUSH
37202: LD_VAR 0 3
37206: ARRAY
37207: PPUSH
37208: CALL_OW 1
37212: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37213: LD_ADDR_VAR 0 1
37217: PUSH
37218: LD_VAR 0 1
37222: PPUSH
37223: LD_VAR 0 3
37227: PPUSH
37228: LD_VAR 0 5
37232: PPUSH
37233: CALL_OW 1
37237: ST_TO_ADDR
// result := list ;
37238: LD_ADDR_VAR 0 4
37242: PUSH
37243: LD_VAR 0 1
37247: ST_TO_ADDR
// end ;
37248: LD_VAR 0 4
37252: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37253: LD_INT 0
37255: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37256: LD_ADDR_VAR 0 5
37260: PUSH
37261: LD_VAR 0 1
37265: PPUSH
37266: CALL_OW 250
37270: PPUSH
37271: LD_VAR 0 1
37275: PPUSH
37276: CALL_OW 251
37280: PPUSH
37281: LD_VAR 0 2
37285: PPUSH
37286: LD_VAR 0 3
37290: PPUSH
37291: LD_VAR 0 4
37295: PPUSH
37296: CALL 37306 0 5
37300: ST_TO_ADDR
// end ;
37301: LD_VAR 0 5
37305: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37306: LD_INT 0
37308: PPUSH
37309: PPUSH
37310: PPUSH
37311: PPUSH
// if not list then
37312: LD_VAR 0 3
37316: NOT
37317: IFFALSE 37321
// exit ;
37319: GO 37709
// result := [ ] ;
37321: LD_ADDR_VAR 0 6
37325: PUSH
37326: EMPTY
37327: ST_TO_ADDR
// for i in list do
37328: LD_ADDR_VAR 0 7
37332: PUSH
37333: LD_VAR 0 3
37337: PUSH
37338: FOR_IN
37339: IFFALSE 37541
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37341: LD_ADDR_VAR 0 9
37345: PUSH
37346: LD_VAR 0 7
37350: PPUSH
37351: LD_VAR 0 1
37355: PPUSH
37356: LD_VAR 0 2
37360: PPUSH
37361: CALL_OW 297
37365: ST_TO_ADDR
// if not result then
37366: LD_VAR 0 6
37370: NOT
37371: IFFALSE 37397
// result := [ [ i , tmp ] ] else
37373: LD_ADDR_VAR 0 6
37377: PUSH
37378: LD_VAR 0 7
37382: PUSH
37383: LD_VAR 0 9
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: PUSH
37392: EMPTY
37393: LIST
37394: ST_TO_ADDR
37395: GO 37539
// begin if result [ result ] [ 2 ] < tmp then
37397: LD_VAR 0 6
37401: PUSH
37402: LD_VAR 0 6
37406: ARRAY
37407: PUSH
37408: LD_INT 2
37410: ARRAY
37411: PUSH
37412: LD_VAR 0 9
37416: LESS
37417: IFFALSE 37459
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37419: LD_ADDR_VAR 0 6
37423: PUSH
37424: LD_VAR 0 6
37428: PPUSH
37429: LD_VAR 0 6
37433: PUSH
37434: LD_INT 1
37436: PLUS
37437: PPUSH
37438: LD_VAR 0 7
37442: PUSH
37443: LD_VAR 0 9
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: PPUSH
37452: CALL_OW 2
37456: ST_TO_ADDR
37457: GO 37539
// for j = 1 to result do
37459: LD_ADDR_VAR 0 8
37463: PUSH
37464: DOUBLE
37465: LD_INT 1
37467: DEC
37468: ST_TO_ADDR
37469: LD_VAR 0 6
37473: PUSH
37474: FOR_TO
37475: IFFALSE 37537
// begin if tmp < result [ j ] [ 2 ] then
37477: LD_VAR 0 9
37481: PUSH
37482: LD_VAR 0 6
37486: PUSH
37487: LD_VAR 0 8
37491: ARRAY
37492: PUSH
37493: LD_INT 2
37495: ARRAY
37496: LESS
37497: IFFALSE 37535
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37499: LD_ADDR_VAR 0 6
37503: PUSH
37504: LD_VAR 0 6
37508: PPUSH
37509: LD_VAR 0 8
37513: PPUSH
37514: LD_VAR 0 7
37518: PUSH
37519: LD_VAR 0 9
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PPUSH
37528: CALL_OW 2
37532: ST_TO_ADDR
// break ;
37533: GO 37537
// end ; end ;
37535: GO 37474
37537: POP
37538: POP
// end ; end ;
37539: GO 37338
37541: POP
37542: POP
// if result and not asc then
37543: LD_VAR 0 6
37547: PUSH
37548: LD_VAR 0 4
37552: NOT
37553: AND
37554: IFFALSE 37629
// begin tmp := result ;
37556: LD_ADDR_VAR 0 9
37560: PUSH
37561: LD_VAR 0 6
37565: ST_TO_ADDR
// for i = tmp downto 1 do
37566: LD_ADDR_VAR 0 7
37570: PUSH
37571: DOUBLE
37572: LD_VAR 0 9
37576: INC
37577: ST_TO_ADDR
37578: LD_INT 1
37580: PUSH
37581: FOR_DOWNTO
37582: IFFALSE 37627
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37584: LD_ADDR_VAR 0 6
37588: PUSH
37589: LD_VAR 0 6
37593: PPUSH
37594: LD_VAR 0 9
37598: PUSH
37599: LD_VAR 0 7
37603: MINUS
37604: PUSH
37605: LD_INT 1
37607: PLUS
37608: PPUSH
37609: LD_VAR 0 9
37613: PUSH
37614: LD_VAR 0 7
37618: ARRAY
37619: PPUSH
37620: CALL_OW 1
37624: ST_TO_ADDR
37625: GO 37581
37627: POP
37628: POP
// end ; tmp := [ ] ;
37629: LD_ADDR_VAR 0 9
37633: PUSH
37634: EMPTY
37635: ST_TO_ADDR
// if mode then
37636: LD_VAR 0 5
37640: IFFALSE 37709
// begin for i = 1 to result do
37642: LD_ADDR_VAR 0 7
37646: PUSH
37647: DOUBLE
37648: LD_INT 1
37650: DEC
37651: ST_TO_ADDR
37652: LD_VAR 0 6
37656: PUSH
37657: FOR_TO
37658: IFFALSE 37697
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37660: LD_ADDR_VAR 0 9
37664: PUSH
37665: LD_VAR 0 9
37669: PPUSH
37670: LD_VAR 0 7
37674: PPUSH
37675: LD_VAR 0 6
37679: PUSH
37680: LD_VAR 0 7
37684: ARRAY
37685: PUSH
37686: LD_INT 1
37688: ARRAY
37689: PPUSH
37690: CALL_OW 1
37694: ST_TO_ADDR
37695: GO 37657
37697: POP
37698: POP
// result := tmp ;
37699: LD_ADDR_VAR 0 6
37703: PUSH
37704: LD_VAR 0 9
37708: ST_TO_ADDR
// end ; end ;
37709: LD_VAR 0 6
37713: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37714: LD_INT 0
37716: PPUSH
37717: PPUSH
37718: PPUSH
37719: PPUSH
37720: PPUSH
37721: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37722: LD_ADDR_VAR 0 5
37726: PUSH
37727: LD_INT 0
37729: PUSH
37730: LD_INT 0
37732: PUSH
37733: LD_INT 0
37735: PUSH
37736: EMPTY
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: LIST
37742: LIST
37743: ST_TO_ADDR
// if not x or not y then
37744: LD_VAR 0 2
37748: NOT
37749: PUSH
37750: LD_VAR 0 3
37754: NOT
37755: OR
37756: IFFALSE 37760
// exit ;
37758: GO 39412
// if not range then
37760: LD_VAR 0 4
37764: NOT
37765: IFFALSE 37775
// range := 10 ;
37767: LD_ADDR_VAR 0 4
37771: PUSH
37772: LD_INT 10
37774: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37775: LD_ADDR_VAR 0 8
37779: PUSH
37780: LD_INT 81
37782: PUSH
37783: LD_VAR 0 1
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: LD_INT 92
37794: PUSH
37795: LD_VAR 0 2
37799: PUSH
37800: LD_VAR 0 3
37804: PUSH
37805: LD_VAR 0 4
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: LIST
37814: LIST
37815: PUSH
37816: LD_INT 3
37818: PUSH
37819: LD_INT 21
37821: PUSH
37822: LD_INT 3
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: LIST
37837: PPUSH
37838: CALL_OW 69
37842: ST_TO_ADDR
// if not tmp then
37843: LD_VAR 0 8
37847: NOT
37848: IFFALSE 37852
// exit ;
37850: GO 39412
// for i in tmp do
37852: LD_ADDR_VAR 0 6
37856: PUSH
37857: LD_VAR 0 8
37861: PUSH
37862: FOR_IN
37863: IFFALSE 39387
// begin points := [ 0 , 0 , 0 ] ;
37865: LD_ADDR_VAR 0 9
37869: PUSH
37870: LD_INT 0
37872: PUSH
37873: LD_INT 0
37875: PUSH
37876: LD_INT 0
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: LIST
37883: ST_TO_ADDR
// bpoints := 1 ;
37884: LD_ADDR_VAR 0 10
37888: PUSH
37889: LD_INT 1
37891: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37892: LD_VAR 0 6
37896: PPUSH
37897: CALL_OW 247
37901: PUSH
37902: LD_INT 1
37904: DOUBLE
37905: EQUAL
37906: IFTRUE 37910
37908: GO 38488
37910: POP
// begin if GetClass ( i ) = 1 then
37911: LD_VAR 0 6
37915: PPUSH
37916: CALL_OW 257
37920: PUSH
37921: LD_INT 1
37923: EQUAL
37924: IFFALSE 37945
// points := [ 10 , 5 , 3 ] ;
37926: LD_ADDR_VAR 0 9
37930: PUSH
37931: LD_INT 10
37933: PUSH
37934: LD_INT 5
37936: PUSH
37937: LD_INT 3
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: LIST
37944: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37945: LD_VAR 0 6
37949: PPUSH
37950: CALL_OW 257
37954: PUSH
37955: LD_INT 2
37957: PUSH
37958: LD_INT 3
37960: PUSH
37961: LD_INT 4
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: LIST
37968: IN
37969: IFFALSE 37990
// points := [ 3 , 2 , 1 ] ;
37971: LD_ADDR_VAR 0 9
37975: PUSH
37976: LD_INT 3
37978: PUSH
37979: LD_INT 2
37981: PUSH
37982: LD_INT 1
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: LIST
37989: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37990: LD_VAR 0 6
37994: PPUSH
37995: CALL_OW 257
37999: PUSH
38000: LD_INT 5
38002: EQUAL
38003: IFFALSE 38024
// points := [ 130 , 5 , 2 ] ;
38005: LD_ADDR_VAR 0 9
38009: PUSH
38010: LD_INT 130
38012: PUSH
38013: LD_INT 5
38015: PUSH
38016: LD_INT 2
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: LIST
38023: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38024: LD_VAR 0 6
38028: PPUSH
38029: CALL_OW 257
38033: PUSH
38034: LD_INT 8
38036: EQUAL
38037: IFFALSE 38058
// points := [ 35 , 35 , 30 ] ;
38039: LD_ADDR_VAR 0 9
38043: PUSH
38044: LD_INT 35
38046: PUSH
38047: LD_INT 35
38049: PUSH
38050: LD_INT 30
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: LIST
38057: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38058: LD_VAR 0 6
38062: PPUSH
38063: CALL_OW 257
38067: PUSH
38068: LD_INT 9
38070: EQUAL
38071: IFFALSE 38092
// points := [ 20 , 55 , 40 ] ;
38073: LD_ADDR_VAR 0 9
38077: PUSH
38078: LD_INT 20
38080: PUSH
38081: LD_INT 55
38083: PUSH
38084: LD_INT 40
38086: PUSH
38087: EMPTY
38088: LIST
38089: LIST
38090: LIST
38091: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38092: LD_VAR 0 6
38096: PPUSH
38097: CALL_OW 257
38101: PUSH
38102: LD_INT 12
38104: PUSH
38105: LD_INT 16
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: IN
38112: IFFALSE 38133
// points := [ 5 , 3 , 2 ] ;
38114: LD_ADDR_VAR 0 9
38118: PUSH
38119: LD_INT 5
38121: PUSH
38122: LD_INT 3
38124: PUSH
38125: LD_INT 2
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: LIST
38132: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38133: LD_VAR 0 6
38137: PPUSH
38138: CALL_OW 257
38142: PUSH
38143: LD_INT 17
38145: EQUAL
38146: IFFALSE 38167
// points := [ 100 , 50 , 75 ] ;
38148: LD_ADDR_VAR 0 9
38152: PUSH
38153: LD_INT 100
38155: PUSH
38156: LD_INT 50
38158: PUSH
38159: LD_INT 75
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: LIST
38166: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38167: LD_VAR 0 6
38171: PPUSH
38172: CALL_OW 257
38176: PUSH
38177: LD_INT 15
38179: EQUAL
38180: IFFALSE 38201
// points := [ 10 , 5 , 3 ] ;
38182: LD_ADDR_VAR 0 9
38186: PUSH
38187: LD_INT 10
38189: PUSH
38190: LD_INT 5
38192: PUSH
38193: LD_INT 3
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: LIST
38200: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38201: LD_VAR 0 6
38205: PPUSH
38206: CALL_OW 257
38210: PUSH
38211: LD_INT 14
38213: EQUAL
38214: IFFALSE 38235
// points := [ 10 , 0 , 0 ] ;
38216: LD_ADDR_VAR 0 9
38220: PUSH
38221: LD_INT 10
38223: PUSH
38224: LD_INT 0
38226: PUSH
38227: LD_INT 0
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: LIST
38234: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38235: LD_VAR 0 6
38239: PPUSH
38240: CALL_OW 257
38244: PUSH
38245: LD_INT 11
38247: EQUAL
38248: IFFALSE 38269
// points := [ 30 , 10 , 5 ] ;
38250: LD_ADDR_VAR 0 9
38254: PUSH
38255: LD_INT 30
38257: PUSH
38258: LD_INT 10
38260: PUSH
38261: LD_INT 5
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: LIST
38268: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38269: LD_VAR 0 1
38273: PPUSH
38274: LD_INT 5
38276: PPUSH
38277: CALL_OW 321
38281: PUSH
38282: LD_INT 2
38284: EQUAL
38285: IFFALSE 38302
// bpoints := bpoints * 1.8 ;
38287: LD_ADDR_VAR 0 10
38291: PUSH
38292: LD_VAR 0 10
38296: PUSH
38297: LD_REAL  1.80000000000000E+0000
38300: MUL
38301: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38302: LD_VAR 0 6
38306: PPUSH
38307: CALL_OW 257
38311: PUSH
38312: LD_INT 1
38314: PUSH
38315: LD_INT 2
38317: PUSH
38318: LD_INT 3
38320: PUSH
38321: LD_INT 4
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: LIST
38328: LIST
38329: IN
38330: PUSH
38331: LD_VAR 0 1
38335: PPUSH
38336: LD_INT 51
38338: PPUSH
38339: CALL_OW 321
38343: PUSH
38344: LD_INT 2
38346: EQUAL
38347: AND
38348: IFFALSE 38365
// bpoints := bpoints * 1.2 ;
38350: LD_ADDR_VAR 0 10
38354: PUSH
38355: LD_VAR 0 10
38359: PUSH
38360: LD_REAL  1.20000000000000E+0000
38363: MUL
38364: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38365: LD_VAR 0 6
38369: PPUSH
38370: CALL_OW 257
38374: PUSH
38375: LD_INT 5
38377: PUSH
38378: LD_INT 7
38380: PUSH
38381: LD_INT 9
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: LIST
38388: IN
38389: PUSH
38390: LD_VAR 0 1
38394: PPUSH
38395: LD_INT 52
38397: PPUSH
38398: CALL_OW 321
38402: PUSH
38403: LD_INT 2
38405: EQUAL
38406: AND
38407: IFFALSE 38424
// bpoints := bpoints * 1.5 ;
38409: LD_ADDR_VAR 0 10
38413: PUSH
38414: LD_VAR 0 10
38418: PUSH
38419: LD_REAL  1.50000000000000E+0000
38422: MUL
38423: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38424: LD_VAR 0 1
38428: PPUSH
38429: LD_INT 66
38431: PPUSH
38432: CALL_OW 321
38436: PUSH
38437: LD_INT 2
38439: EQUAL
38440: IFFALSE 38457
// bpoints := bpoints * 1.1 ;
38442: LD_ADDR_VAR 0 10
38446: PUSH
38447: LD_VAR 0 10
38451: PUSH
38452: LD_REAL  1.10000000000000E+0000
38455: MUL
38456: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38457: LD_ADDR_VAR 0 10
38461: PUSH
38462: LD_VAR 0 10
38466: PUSH
38467: LD_VAR 0 6
38471: PPUSH
38472: LD_INT 1
38474: PPUSH
38475: CALL_OW 259
38479: PUSH
38480: LD_REAL  1.15000000000000E+0000
38483: MUL
38484: MUL
38485: ST_TO_ADDR
// end ; unit_vehicle :
38486: GO 39316
38488: LD_INT 2
38490: DOUBLE
38491: EQUAL
38492: IFTRUE 38496
38494: GO 39304
38496: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38497: LD_VAR 0 6
38501: PPUSH
38502: CALL_OW 264
38506: PUSH
38507: LD_INT 2
38509: PUSH
38510: LD_INT 42
38512: PUSH
38513: LD_INT 24
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: LIST
38520: IN
38521: IFFALSE 38542
// points := [ 25 , 5 , 3 ] ;
38523: LD_ADDR_VAR 0 9
38527: PUSH
38528: LD_INT 25
38530: PUSH
38531: LD_INT 5
38533: PUSH
38534: LD_INT 3
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: LIST
38541: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38542: LD_VAR 0 6
38546: PPUSH
38547: CALL_OW 264
38551: PUSH
38552: LD_INT 4
38554: PUSH
38555: LD_INT 43
38557: PUSH
38558: LD_INT 25
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: LIST
38565: IN
38566: IFFALSE 38587
// points := [ 40 , 15 , 5 ] ;
38568: LD_ADDR_VAR 0 9
38572: PUSH
38573: LD_INT 40
38575: PUSH
38576: LD_INT 15
38578: PUSH
38579: LD_INT 5
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: LIST
38586: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38587: LD_VAR 0 6
38591: PPUSH
38592: CALL_OW 264
38596: PUSH
38597: LD_INT 3
38599: PUSH
38600: LD_INT 23
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: IN
38607: IFFALSE 38628
// points := [ 7 , 25 , 8 ] ;
38609: LD_ADDR_VAR 0 9
38613: PUSH
38614: LD_INT 7
38616: PUSH
38617: LD_INT 25
38619: PUSH
38620: LD_INT 8
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: LIST
38627: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38628: LD_VAR 0 6
38632: PPUSH
38633: CALL_OW 264
38637: PUSH
38638: LD_INT 5
38640: PUSH
38641: LD_INT 27
38643: PUSH
38644: LD_INT 44
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: LIST
38651: IN
38652: IFFALSE 38673
// points := [ 14 , 50 , 16 ] ;
38654: LD_ADDR_VAR 0 9
38658: PUSH
38659: LD_INT 14
38661: PUSH
38662: LD_INT 50
38664: PUSH
38665: LD_INT 16
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: LIST
38672: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38673: LD_VAR 0 6
38677: PPUSH
38678: CALL_OW 264
38682: PUSH
38683: LD_INT 6
38685: PUSH
38686: LD_INT 46
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: IN
38693: IFFALSE 38714
// points := [ 32 , 120 , 70 ] ;
38695: LD_ADDR_VAR 0 9
38699: PUSH
38700: LD_INT 32
38702: PUSH
38703: LD_INT 120
38705: PUSH
38706: LD_INT 70
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: LIST
38713: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38714: LD_VAR 0 6
38718: PPUSH
38719: CALL_OW 264
38723: PUSH
38724: LD_INT 7
38726: PUSH
38727: LD_INT 28
38729: PUSH
38730: LD_INT 45
38732: PUSH
38733: LD_EXP 37
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: LIST
38742: LIST
38743: IN
38744: IFFALSE 38765
// points := [ 35 , 20 , 45 ] ;
38746: LD_ADDR_VAR 0 9
38750: PUSH
38751: LD_INT 35
38753: PUSH
38754: LD_INT 20
38756: PUSH
38757: LD_INT 45
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: LIST
38764: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38765: LD_VAR 0 6
38769: PPUSH
38770: CALL_OW 264
38774: PUSH
38775: LD_INT 47
38777: PUSH
38778: EMPTY
38779: LIST
38780: IN
38781: IFFALSE 38802
// points := [ 67 , 45 , 75 ] ;
38783: LD_ADDR_VAR 0 9
38787: PUSH
38788: LD_INT 67
38790: PUSH
38791: LD_INT 45
38793: PUSH
38794: LD_INT 75
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: LIST
38801: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38802: LD_VAR 0 6
38806: PPUSH
38807: CALL_OW 264
38811: PUSH
38812: LD_INT 26
38814: PUSH
38815: EMPTY
38816: LIST
38817: IN
38818: IFFALSE 38839
// points := [ 120 , 30 , 80 ] ;
38820: LD_ADDR_VAR 0 9
38824: PUSH
38825: LD_INT 120
38827: PUSH
38828: LD_INT 30
38830: PUSH
38831: LD_INT 80
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: LIST
38838: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38839: LD_VAR 0 6
38843: PPUSH
38844: CALL_OW 264
38848: PUSH
38849: LD_INT 22
38851: PUSH
38852: EMPTY
38853: LIST
38854: IN
38855: IFFALSE 38876
// points := [ 40 , 1 , 1 ] ;
38857: LD_ADDR_VAR 0 9
38861: PUSH
38862: LD_INT 40
38864: PUSH
38865: LD_INT 1
38867: PUSH
38868: LD_INT 1
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: LIST
38875: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38876: LD_VAR 0 6
38880: PPUSH
38881: CALL_OW 264
38885: PUSH
38886: LD_INT 29
38888: PUSH
38889: EMPTY
38890: LIST
38891: IN
38892: IFFALSE 38913
// points := [ 70 , 200 , 400 ] ;
38894: LD_ADDR_VAR 0 9
38898: PUSH
38899: LD_INT 70
38901: PUSH
38902: LD_INT 200
38904: PUSH
38905: LD_INT 400
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: LIST
38912: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38913: LD_VAR 0 6
38917: PPUSH
38918: CALL_OW 264
38922: PUSH
38923: LD_INT 14
38925: PUSH
38926: LD_INT 53
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: IN
38933: IFFALSE 38954
// points := [ 40 , 10 , 20 ] ;
38935: LD_ADDR_VAR 0 9
38939: PUSH
38940: LD_INT 40
38942: PUSH
38943: LD_INT 10
38945: PUSH
38946: LD_INT 20
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: LIST
38953: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38954: LD_VAR 0 6
38958: PPUSH
38959: CALL_OW 264
38963: PUSH
38964: LD_INT 9
38966: PUSH
38967: EMPTY
38968: LIST
38969: IN
38970: IFFALSE 38991
// points := [ 5 , 70 , 20 ] ;
38972: LD_ADDR_VAR 0 9
38976: PUSH
38977: LD_INT 5
38979: PUSH
38980: LD_INT 70
38982: PUSH
38983: LD_INT 20
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: LIST
38990: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38991: LD_VAR 0 6
38995: PPUSH
38996: CALL_OW 264
39000: PUSH
39001: LD_INT 10
39003: PUSH
39004: EMPTY
39005: LIST
39006: IN
39007: IFFALSE 39028
// points := [ 35 , 110 , 70 ] ;
39009: LD_ADDR_VAR 0 9
39013: PUSH
39014: LD_INT 35
39016: PUSH
39017: LD_INT 110
39019: PUSH
39020: LD_INT 70
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: LIST
39027: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39028: LD_VAR 0 6
39032: PPUSH
39033: CALL_OW 265
39037: PUSH
39038: LD_INT 25
39040: EQUAL
39041: IFFALSE 39062
// points := [ 80 , 65 , 100 ] ;
39043: LD_ADDR_VAR 0 9
39047: PUSH
39048: LD_INT 80
39050: PUSH
39051: LD_INT 65
39053: PUSH
39054: LD_INT 100
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: LIST
39061: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39062: LD_VAR 0 6
39066: PPUSH
39067: CALL_OW 263
39071: PUSH
39072: LD_INT 1
39074: EQUAL
39075: IFFALSE 39110
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39077: LD_ADDR_VAR 0 10
39081: PUSH
39082: LD_VAR 0 10
39086: PUSH
39087: LD_VAR 0 6
39091: PPUSH
39092: CALL_OW 311
39096: PPUSH
39097: LD_INT 3
39099: PPUSH
39100: CALL_OW 259
39104: PUSH
39105: LD_INT 4
39107: MUL
39108: MUL
39109: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39110: LD_VAR 0 6
39114: PPUSH
39115: CALL_OW 263
39119: PUSH
39120: LD_INT 2
39122: EQUAL
39123: IFFALSE 39174
// begin j := IsControledBy ( i ) ;
39125: LD_ADDR_VAR 0 7
39129: PUSH
39130: LD_VAR 0 6
39134: PPUSH
39135: CALL_OW 312
39139: ST_TO_ADDR
// if j then
39140: LD_VAR 0 7
39144: IFFALSE 39174
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39146: LD_ADDR_VAR 0 10
39150: PUSH
39151: LD_VAR 0 10
39155: PUSH
39156: LD_VAR 0 7
39160: PPUSH
39161: LD_INT 3
39163: PPUSH
39164: CALL_OW 259
39168: PUSH
39169: LD_INT 3
39171: MUL
39172: MUL
39173: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39174: LD_VAR 0 6
39178: PPUSH
39179: CALL_OW 264
39183: PUSH
39184: LD_INT 5
39186: PUSH
39187: LD_INT 6
39189: PUSH
39190: LD_INT 46
39192: PUSH
39193: LD_INT 44
39195: PUSH
39196: LD_INT 47
39198: PUSH
39199: LD_INT 45
39201: PUSH
39202: LD_INT 28
39204: PUSH
39205: LD_INT 7
39207: PUSH
39208: LD_INT 27
39210: PUSH
39211: LD_INT 29
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: IN
39226: PUSH
39227: LD_VAR 0 1
39231: PPUSH
39232: LD_INT 52
39234: PPUSH
39235: CALL_OW 321
39239: PUSH
39240: LD_INT 2
39242: EQUAL
39243: AND
39244: IFFALSE 39261
// bpoints := bpoints * 1.2 ;
39246: LD_ADDR_VAR 0 10
39250: PUSH
39251: LD_VAR 0 10
39255: PUSH
39256: LD_REAL  1.20000000000000E+0000
39259: MUL
39260: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39261: LD_VAR 0 6
39265: PPUSH
39266: CALL_OW 264
39270: PUSH
39271: LD_INT 6
39273: PUSH
39274: LD_INT 46
39276: PUSH
39277: LD_INT 47
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: LIST
39284: IN
39285: IFFALSE 39302
// bpoints := bpoints * 1.2 ;
39287: LD_ADDR_VAR 0 10
39291: PUSH
39292: LD_VAR 0 10
39296: PUSH
39297: LD_REAL  1.20000000000000E+0000
39300: MUL
39301: ST_TO_ADDR
// end ; unit_building :
39302: GO 39316
39304: LD_INT 3
39306: DOUBLE
39307: EQUAL
39308: IFTRUE 39312
39310: GO 39315
39312: POP
// ; end ;
39313: GO 39316
39315: POP
// for j = 1 to 3 do
39316: LD_ADDR_VAR 0 7
39320: PUSH
39321: DOUBLE
39322: LD_INT 1
39324: DEC
39325: ST_TO_ADDR
39326: LD_INT 3
39328: PUSH
39329: FOR_TO
39330: IFFALSE 39383
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39332: LD_ADDR_VAR 0 5
39336: PUSH
39337: LD_VAR 0 5
39341: PPUSH
39342: LD_VAR 0 7
39346: PPUSH
39347: LD_VAR 0 5
39351: PUSH
39352: LD_VAR 0 7
39356: ARRAY
39357: PUSH
39358: LD_VAR 0 9
39362: PUSH
39363: LD_VAR 0 7
39367: ARRAY
39368: PUSH
39369: LD_VAR 0 10
39373: MUL
39374: PLUS
39375: PPUSH
39376: CALL_OW 1
39380: ST_TO_ADDR
39381: GO 39329
39383: POP
39384: POP
// end ;
39385: GO 37862
39387: POP
39388: POP
// result := Replace ( result , 4 , tmp ) ;
39389: LD_ADDR_VAR 0 5
39393: PUSH
39394: LD_VAR 0 5
39398: PPUSH
39399: LD_INT 4
39401: PPUSH
39402: LD_VAR 0 8
39406: PPUSH
39407: CALL_OW 1
39411: ST_TO_ADDR
// end ;
39412: LD_VAR 0 5
39416: RET
// export function DangerAtRange ( unit , range ) ; begin
39417: LD_INT 0
39419: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39420: LD_ADDR_VAR 0 3
39424: PUSH
39425: LD_VAR 0 1
39429: PPUSH
39430: CALL_OW 255
39434: PPUSH
39435: LD_VAR 0 1
39439: PPUSH
39440: CALL_OW 250
39444: PPUSH
39445: LD_VAR 0 1
39449: PPUSH
39450: CALL_OW 251
39454: PPUSH
39455: LD_VAR 0 2
39459: PPUSH
39460: CALL 37714 0 4
39464: ST_TO_ADDR
// end ;
39465: LD_VAR 0 3
39469: RET
// export function DangerInArea ( side , area ) ; begin
39470: LD_INT 0
39472: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39473: LD_ADDR_VAR 0 3
39477: PUSH
39478: LD_VAR 0 2
39482: PPUSH
39483: LD_INT 81
39485: PUSH
39486: LD_VAR 0 1
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PPUSH
39495: CALL_OW 70
39499: ST_TO_ADDR
// end ;
39500: LD_VAR 0 3
39504: RET
// export function IsExtension ( b ) ; begin
39505: LD_INT 0
39507: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39508: LD_ADDR_VAR 0 2
39512: PUSH
39513: LD_VAR 0 1
39517: PUSH
39518: LD_INT 23
39520: PUSH
39521: LD_INT 20
39523: PUSH
39524: LD_INT 22
39526: PUSH
39527: LD_INT 17
39529: PUSH
39530: LD_INT 24
39532: PUSH
39533: LD_INT 21
39535: PUSH
39536: LD_INT 19
39538: PUSH
39539: LD_INT 16
39541: PUSH
39542: LD_INT 25
39544: PUSH
39545: LD_INT 18
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: IN
39560: ST_TO_ADDR
// end ;
39561: LD_VAR 0 2
39565: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
39566: LD_INT 0
39568: PPUSH
39569: PPUSH
39570: PPUSH
// result := [ ] ;
39571: LD_ADDR_VAR 0 4
39575: PUSH
39576: EMPTY
39577: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39578: LD_ADDR_VAR 0 5
39582: PUSH
39583: LD_VAR 0 2
39587: PPUSH
39588: LD_INT 21
39590: PUSH
39591: LD_INT 3
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: PPUSH
39598: CALL_OW 70
39602: ST_TO_ADDR
// if not tmp then
39603: LD_VAR 0 5
39607: NOT
39608: IFFALSE 39612
// exit ;
39610: GO 39676
// if checkLink then
39612: LD_VAR 0 3
39616: IFFALSE 39666
// begin for i in tmp do
39618: LD_ADDR_VAR 0 6
39622: PUSH
39623: LD_VAR 0 5
39627: PUSH
39628: FOR_IN
39629: IFFALSE 39664
// if GetBase ( i ) <> base then
39631: LD_VAR 0 6
39635: PPUSH
39636: CALL_OW 274
39640: PUSH
39641: LD_VAR 0 1
39645: NONEQUAL
39646: IFFALSE 39662
// ComLinkToBase ( base , i ) ;
39648: LD_VAR 0 1
39652: PPUSH
39653: LD_VAR 0 6
39657: PPUSH
39658: CALL_OW 169
39662: GO 39628
39664: POP
39665: POP
// end ; result := tmp ;
39666: LD_ADDR_VAR 0 4
39670: PUSH
39671: LD_VAR 0 5
39675: ST_TO_ADDR
// end ;
39676: LD_VAR 0 4
39680: RET
// export function ComComplete ( units , b ) ; var i ; begin
39681: LD_INT 0
39683: PPUSH
39684: PPUSH
// if not units then
39685: LD_VAR 0 1
39689: NOT
39690: IFFALSE 39694
// exit ;
39692: GO 39784
// for i in units do
39694: LD_ADDR_VAR 0 4
39698: PUSH
39699: LD_VAR 0 1
39703: PUSH
39704: FOR_IN
39705: IFFALSE 39782
// if BuildingStatus ( b ) = bs_build then
39707: LD_VAR 0 2
39711: PPUSH
39712: CALL_OW 461
39716: PUSH
39717: LD_INT 1
39719: EQUAL
39720: IFFALSE 39780
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39722: LD_VAR 0 4
39726: PPUSH
39727: LD_STRING h
39729: PUSH
39730: LD_VAR 0 2
39734: PPUSH
39735: CALL_OW 250
39739: PUSH
39740: LD_VAR 0 2
39744: PPUSH
39745: CALL_OW 251
39749: PUSH
39750: LD_VAR 0 2
39754: PUSH
39755: LD_INT 0
39757: PUSH
39758: LD_INT 0
39760: PUSH
39761: LD_INT 0
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: PUSH
39773: EMPTY
39774: LIST
39775: PPUSH
39776: CALL_OW 446
39780: GO 39704
39782: POP
39783: POP
// end ;
39784: LD_VAR 0 3
39788: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39789: LD_INT 0
39791: PPUSH
39792: PPUSH
39793: PPUSH
39794: PPUSH
39795: PPUSH
39796: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39797: LD_VAR 0 1
39801: NOT
39802: PUSH
39803: LD_VAR 0 1
39807: PPUSH
39808: CALL_OW 263
39812: PUSH
39813: LD_INT 2
39815: NONEQUAL
39816: OR
39817: IFFALSE 39821
// exit ;
39819: GO 40137
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39821: LD_ADDR_VAR 0 6
39825: PUSH
39826: LD_INT 22
39828: PUSH
39829: LD_VAR 0 1
39833: PPUSH
39834: CALL_OW 255
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: LD_INT 2
39845: PUSH
39846: LD_INT 30
39848: PUSH
39849: LD_INT 36
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PUSH
39856: LD_INT 34
39858: PUSH
39859: LD_INT 31
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: LIST
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PPUSH
39875: CALL_OW 69
39879: ST_TO_ADDR
// if not tmp then
39880: LD_VAR 0 6
39884: NOT
39885: IFFALSE 39889
// exit ;
39887: GO 40137
// result := [ ] ;
39889: LD_ADDR_VAR 0 2
39893: PUSH
39894: EMPTY
39895: ST_TO_ADDR
// for i in tmp do
39896: LD_ADDR_VAR 0 3
39900: PUSH
39901: LD_VAR 0 6
39905: PUSH
39906: FOR_IN
39907: IFFALSE 39978
// begin t := UnitsInside ( i ) ;
39909: LD_ADDR_VAR 0 4
39913: PUSH
39914: LD_VAR 0 3
39918: PPUSH
39919: CALL_OW 313
39923: ST_TO_ADDR
// if t then
39924: LD_VAR 0 4
39928: IFFALSE 39976
// for j in t do
39930: LD_ADDR_VAR 0 7
39934: PUSH
39935: LD_VAR 0 4
39939: PUSH
39940: FOR_IN
39941: IFFALSE 39974
// result := Replace ( result , result + 1 , j ) ;
39943: LD_ADDR_VAR 0 2
39947: PUSH
39948: LD_VAR 0 2
39952: PPUSH
39953: LD_VAR 0 2
39957: PUSH
39958: LD_INT 1
39960: PLUS
39961: PPUSH
39962: LD_VAR 0 7
39966: PPUSH
39967: CALL_OW 1
39971: ST_TO_ADDR
39972: GO 39940
39974: POP
39975: POP
// end ;
39976: GO 39906
39978: POP
39979: POP
// if not result then
39980: LD_VAR 0 2
39984: NOT
39985: IFFALSE 39989
// exit ;
39987: GO 40137
// mech := result [ 1 ] ;
39989: LD_ADDR_VAR 0 5
39993: PUSH
39994: LD_VAR 0 2
39998: PUSH
39999: LD_INT 1
40001: ARRAY
40002: ST_TO_ADDR
// if result > 1 then
40003: LD_VAR 0 2
40007: PUSH
40008: LD_INT 1
40010: GREATER
40011: IFFALSE 40123
// begin for i = 2 to result do
40013: LD_ADDR_VAR 0 3
40017: PUSH
40018: DOUBLE
40019: LD_INT 2
40021: DEC
40022: ST_TO_ADDR
40023: LD_VAR 0 2
40027: PUSH
40028: FOR_TO
40029: IFFALSE 40121
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40031: LD_ADDR_VAR 0 4
40035: PUSH
40036: LD_VAR 0 2
40040: PUSH
40041: LD_VAR 0 3
40045: ARRAY
40046: PPUSH
40047: LD_INT 3
40049: PPUSH
40050: CALL_OW 259
40054: PUSH
40055: LD_VAR 0 2
40059: PUSH
40060: LD_VAR 0 3
40064: ARRAY
40065: PPUSH
40066: CALL_OW 432
40070: MINUS
40071: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40072: LD_VAR 0 4
40076: PUSH
40077: LD_VAR 0 5
40081: PPUSH
40082: LD_INT 3
40084: PPUSH
40085: CALL_OW 259
40089: PUSH
40090: LD_VAR 0 5
40094: PPUSH
40095: CALL_OW 432
40099: MINUS
40100: GREATEREQUAL
40101: IFFALSE 40119
// mech := result [ i ] ;
40103: LD_ADDR_VAR 0 5
40107: PUSH
40108: LD_VAR 0 2
40112: PUSH
40113: LD_VAR 0 3
40117: ARRAY
40118: ST_TO_ADDR
// end ;
40119: GO 40028
40121: POP
40122: POP
// end ; ComLinkTo ( vehicle , mech ) ;
40123: LD_VAR 0 1
40127: PPUSH
40128: LD_VAR 0 5
40132: PPUSH
40133: CALL_OW 135
// end ;
40137: LD_VAR 0 2
40141: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40142: LD_INT 0
40144: PPUSH
40145: PPUSH
40146: PPUSH
40147: PPUSH
40148: PPUSH
40149: PPUSH
40150: PPUSH
40151: PPUSH
40152: PPUSH
40153: PPUSH
40154: PPUSH
40155: PPUSH
40156: PPUSH
// result := [ ] ;
40157: LD_ADDR_VAR 0 7
40161: PUSH
40162: EMPTY
40163: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40164: LD_VAR 0 1
40168: PPUSH
40169: CALL_OW 266
40173: PUSH
40174: LD_INT 0
40176: PUSH
40177: LD_INT 1
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: IN
40184: NOT
40185: IFFALSE 40189
// exit ;
40187: GO 41823
// if name then
40189: LD_VAR 0 3
40193: IFFALSE 40209
// SetBName ( base_dep , name ) ;
40195: LD_VAR 0 1
40199: PPUSH
40200: LD_VAR 0 3
40204: PPUSH
40205: CALL_OW 500
// base := GetBase ( base_dep ) ;
40209: LD_ADDR_VAR 0 15
40213: PUSH
40214: LD_VAR 0 1
40218: PPUSH
40219: CALL_OW 274
40223: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40224: LD_ADDR_VAR 0 16
40228: PUSH
40229: LD_VAR 0 1
40233: PPUSH
40234: CALL_OW 255
40238: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40239: LD_ADDR_VAR 0 17
40243: PUSH
40244: LD_VAR 0 1
40248: PPUSH
40249: CALL_OW 248
40253: ST_TO_ADDR
// if sources then
40254: LD_VAR 0 5
40258: IFFALSE 40305
// for i = 1 to 3 do
40260: LD_ADDR_VAR 0 8
40264: PUSH
40265: DOUBLE
40266: LD_INT 1
40268: DEC
40269: ST_TO_ADDR
40270: LD_INT 3
40272: PUSH
40273: FOR_TO
40274: IFFALSE 40303
// AddResourceType ( base , i , sources [ i ] ) ;
40276: LD_VAR 0 15
40280: PPUSH
40281: LD_VAR 0 8
40285: PPUSH
40286: LD_VAR 0 5
40290: PUSH
40291: LD_VAR 0 8
40295: ARRAY
40296: PPUSH
40297: CALL_OW 276
40301: GO 40273
40303: POP
40304: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40305: LD_ADDR_VAR 0 18
40309: PUSH
40310: LD_VAR 0 15
40314: PPUSH
40315: LD_VAR 0 2
40319: PPUSH
40320: LD_INT 1
40322: PPUSH
40323: CALL 39566 0 3
40327: ST_TO_ADDR
// InitHc ;
40328: CALL_OW 19
// InitUc ;
40332: CALL_OW 18
// uc_side := side ;
40336: LD_ADDR_OWVAR 20
40340: PUSH
40341: LD_VAR 0 16
40345: ST_TO_ADDR
// uc_nation := nation ;
40346: LD_ADDR_OWVAR 21
40350: PUSH
40351: LD_VAR 0 17
40355: ST_TO_ADDR
// if buildings then
40356: LD_VAR 0 18
40360: IFFALSE 41682
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40362: LD_ADDR_VAR 0 19
40366: PUSH
40367: LD_VAR 0 18
40371: PPUSH
40372: LD_INT 2
40374: PUSH
40375: LD_INT 30
40377: PUSH
40378: LD_INT 29
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: PUSH
40385: LD_INT 30
40387: PUSH
40388: LD_INT 30
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: LIST
40399: PPUSH
40400: CALL_OW 72
40404: ST_TO_ADDR
// if tmp then
40405: LD_VAR 0 19
40409: IFFALSE 40457
// for i in tmp do
40411: LD_ADDR_VAR 0 8
40415: PUSH
40416: LD_VAR 0 19
40420: PUSH
40421: FOR_IN
40422: IFFALSE 40455
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40424: LD_VAR 0 8
40428: PPUSH
40429: CALL_OW 250
40433: PPUSH
40434: LD_VAR 0 8
40438: PPUSH
40439: CALL_OW 251
40443: PPUSH
40444: LD_VAR 0 16
40448: PPUSH
40449: CALL_OW 441
40453: GO 40421
40455: POP
40456: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40457: LD_VAR 0 18
40461: PPUSH
40462: LD_INT 2
40464: PUSH
40465: LD_INT 30
40467: PUSH
40468: LD_INT 32
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: LD_INT 30
40477: PUSH
40478: LD_INT 33
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: LIST
40489: PPUSH
40490: CALL_OW 72
40494: IFFALSE 40582
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40496: LD_ADDR_VAR 0 8
40500: PUSH
40501: LD_VAR 0 18
40505: PPUSH
40506: LD_INT 2
40508: PUSH
40509: LD_INT 30
40511: PUSH
40512: LD_INT 32
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 30
40521: PUSH
40522: LD_INT 33
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: LIST
40533: PPUSH
40534: CALL_OW 72
40538: PUSH
40539: FOR_IN
40540: IFFALSE 40580
// begin if not GetBWeapon ( i ) then
40542: LD_VAR 0 8
40546: PPUSH
40547: CALL_OW 269
40551: NOT
40552: IFFALSE 40578
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40554: LD_VAR 0 8
40558: PPUSH
40559: LD_VAR 0 8
40563: PPUSH
40564: LD_VAR 0 2
40568: PPUSH
40569: CALL 41828 0 2
40573: PPUSH
40574: CALL_OW 431
// end ;
40578: GO 40539
40580: POP
40581: POP
// end ; for i = 1 to personel do
40582: LD_ADDR_VAR 0 8
40586: PUSH
40587: DOUBLE
40588: LD_INT 1
40590: DEC
40591: ST_TO_ADDR
40592: LD_VAR 0 6
40596: PUSH
40597: FOR_TO
40598: IFFALSE 41662
// begin if i > 4 then
40600: LD_VAR 0 8
40604: PUSH
40605: LD_INT 4
40607: GREATER
40608: IFFALSE 40612
// break ;
40610: GO 41662
// case i of 1 :
40612: LD_VAR 0 8
40616: PUSH
40617: LD_INT 1
40619: DOUBLE
40620: EQUAL
40621: IFTRUE 40625
40623: GO 40705
40625: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40626: LD_ADDR_VAR 0 12
40630: PUSH
40631: LD_VAR 0 18
40635: PPUSH
40636: LD_INT 22
40638: PUSH
40639: LD_VAR 0 16
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 58
40650: PUSH
40651: EMPTY
40652: LIST
40653: PUSH
40654: LD_INT 2
40656: PUSH
40657: LD_INT 30
40659: PUSH
40660: LD_INT 32
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: LD_INT 30
40669: PUSH
40670: LD_INT 4
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 30
40679: PUSH
40680: LD_INT 5
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: LIST
40697: PPUSH
40698: CALL_OW 72
40702: ST_TO_ADDR
40703: GO 40927
40705: LD_INT 2
40707: DOUBLE
40708: EQUAL
40709: IFTRUE 40713
40711: GO 40775
40713: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40714: LD_ADDR_VAR 0 12
40718: PUSH
40719: LD_VAR 0 18
40723: PPUSH
40724: LD_INT 22
40726: PUSH
40727: LD_VAR 0 16
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 2
40738: PUSH
40739: LD_INT 30
40741: PUSH
40742: LD_INT 0
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 30
40751: PUSH
40752: LD_INT 1
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: LIST
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PPUSH
40768: CALL_OW 72
40772: ST_TO_ADDR
40773: GO 40927
40775: LD_INT 3
40777: DOUBLE
40778: EQUAL
40779: IFTRUE 40783
40781: GO 40845
40783: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40784: LD_ADDR_VAR 0 12
40788: PUSH
40789: LD_VAR 0 18
40793: PPUSH
40794: LD_INT 22
40796: PUSH
40797: LD_VAR 0 16
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 2
40808: PUSH
40809: LD_INT 30
40811: PUSH
40812: LD_INT 2
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: LD_INT 30
40821: PUSH
40822: LD_INT 3
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: LIST
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PPUSH
40838: CALL_OW 72
40842: ST_TO_ADDR
40843: GO 40927
40845: LD_INT 4
40847: DOUBLE
40848: EQUAL
40849: IFTRUE 40853
40851: GO 40926
40853: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40854: LD_ADDR_VAR 0 12
40858: PUSH
40859: LD_VAR 0 18
40863: PPUSH
40864: LD_INT 22
40866: PUSH
40867: LD_VAR 0 16
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 2
40878: PUSH
40879: LD_INT 30
40881: PUSH
40882: LD_INT 6
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 30
40891: PUSH
40892: LD_INT 7
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 30
40901: PUSH
40902: LD_INT 8
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PPUSH
40919: CALL_OW 72
40923: ST_TO_ADDR
40924: GO 40927
40926: POP
// if i = 1 then
40927: LD_VAR 0 8
40931: PUSH
40932: LD_INT 1
40934: EQUAL
40935: IFFALSE 41046
// begin tmp := [ ] ;
40937: LD_ADDR_VAR 0 19
40941: PUSH
40942: EMPTY
40943: ST_TO_ADDR
// for j in f do
40944: LD_ADDR_VAR 0 9
40948: PUSH
40949: LD_VAR 0 12
40953: PUSH
40954: FOR_IN
40955: IFFALSE 41028
// if GetBType ( j ) = b_bunker then
40957: LD_VAR 0 9
40961: PPUSH
40962: CALL_OW 266
40966: PUSH
40967: LD_INT 32
40969: EQUAL
40970: IFFALSE 40997
// tmp := Insert ( tmp , 1 , j ) else
40972: LD_ADDR_VAR 0 19
40976: PUSH
40977: LD_VAR 0 19
40981: PPUSH
40982: LD_INT 1
40984: PPUSH
40985: LD_VAR 0 9
40989: PPUSH
40990: CALL_OW 2
40994: ST_TO_ADDR
40995: GO 41026
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40997: LD_ADDR_VAR 0 19
41001: PUSH
41002: LD_VAR 0 19
41006: PPUSH
41007: LD_VAR 0 19
41011: PUSH
41012: LD_INT 1
41014: PLUS
41015: PPUSH
41016: LD_VAR 0 9
41020: PPUSH
41021: CALL_OW 2
41025: ST_TO_ADDR
41026: GO 40954
41028: POP
41029: POP
// if tmp then
41030: LD_VAR 0 19
41034: IFFALSE 41046
// f := tmp ;
41036: LD_ADDR_VAR 0 12
41040: PUSH
41041: LD_VAR 0 19
41045: ST_TO_ADDR
// end ; x := personel [ i ] ;
41046: LD_ADDR_VAR 0 13
41050: PUSH
41051: LD_VAR 0 6
41055: PUSH
41056: LD_VAR 0 8
41060: ARRAY
41061: ST_TO_ADDR
// if x = - 1 then
41062: LD_VAR 0 13
41066: PUSH
41067: LD_INT 1
41069: NEG
41070: EQUAL
41071: IFFALSE 41280
// begin for j in f do
41073: LD_ADDR_VAR 0 9
41077: PUSH
41078: LD_VAR 0 12
41082: PUSH
41083: FOR_IN
41084: IFFALSE 41276
// repeat InitHc ;
41086: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41090: LD_VAR 0 9
41094: PPUSH
41095: CALL_OW 266
41099: PUSH
41100: LD_INT 5
41102: EQUAL
41103: IFFALSE 41173
// begin if UnitsInside ( j ) < 3 then
41105: LD_VAR 0 9
41109: PPUSH
41110: CALL_OW 313
41114: PUSH
41115: LD_INT 3
41117: LESS
41118: IFFALSE 41154
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41120: LD_INT 0
41122: PPUSH
41123: LD_INT 5
41125: PUSH
41126: LD_INT 8
41128: PUSH
41129: LD_INT 9
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: LIST
41136: PUSH
41137: LD_VAR 0 17
41141: ARRAY
41142: PPUSH
41143: LD_VAR 0 4
41147: PPUSH
41148: CALL_OW 380
41152: GO 41171
// PrepareHuman ( false , i , skill ) ;
41154: LD_INT 0
41156: PPUSH
41157: LD_VAR 0 8
41161: PPUSH
41162: LD_VAR 0 4
41166: PPUSH
41167: CALL_OW 380
// end else
41171: GO 41190
// PrepareHuman ( false , i , skill ) ;
41173: LD_INT 0
41175: PPUSH
41176: LD_VAR 0 8
41180: PPUSH
41181: LD_VAR 0 4
41185: PPUSH
41186: CALL_OW 380
// un := CreateHuman ;
41190: LD_ADDR_VAR 0 14
41194: PUSH
41195: CALL_OW 44
41199: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41200: LD_ADDR_VAR 0 7
41204: PUSH
41205: LD_VAR 0 7
41209: PPUSH
41210: LD_INT 1
41212: PPUSH
41213: LD_VAR 0 14
41217: PPUSH
41218: CALL_OW 2
41222: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41223: LD_VAR 0 14
41227: PPUSH
41228: LD_VAR 0 9
41232: PPUSH
41233: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41237: LD_VAR 0 9
41241: PPUSH
41242: CALL_OW 313
41246: PUSH
41247: LD_INT 6
41249: EQUAL
41250: PUSH
41251: LD_VAR 0 9
41255: PPUSH
41256: CALL_OW 266
41260: PUSH
41261: LD_INT 32
41263: PUSH
41264: LD_INT 31
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: IN
41271: OR
41272: IFFALSE 41086
41274: GO 41083
41276: POP
41277: POP
// end else
41278: GO 41660
// for j = 1 to x do
41280: LD_ADDR_VAR 0 9
41284: PUSH
41285: DOUBLE
41286: LD_INT 1
41288: DEC
41289: ST_TO_ADDR
41290: LD_VAR 0 13
41294: PUSH
41295: FOR_TO
41296: IFFALSE 41658
// begin InitHc ;
41298: CALL_OW 19
// if not f then
41302: LD_VAR 0 12
41306: NOT
41307: IFFALSE 41396
// begin PrepareHuman ( false , i , skill ) ;
41309: LD_INT 0
41311: PPUSH
41312: LD_VAR 0 8
41316: PPUSH
41317: LD_VAR 0 4
41321: PPUSH
41322: CALL_OW 380
// un := CreateHuman ;
41326: LD_ADDR_VAR 0 14
41330: PUSH
41331: CALL_OW 44
41335: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41336: LD_ADDR_VAR 0 7
41340: PUSH
41341: LD_VAR 0 7
41345: PPUSH
41346: LD_INT 1
41348: PPUSH
41349: LD_VAR 0 14
41353: PPUSH
41354: CALL_OW 2
41358: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41359: LD_VAR 0 14
41363: PPUSH
41364: LD_VAR 0 1
41368: PPUSH
41369: CALL_OW 250
41373: PPUSH
41374: LD_VAR 0 1
41378: PPUSH
41379: CALL_OW 251
41383: PPUSH
41384: LD_INT 10
41386: PPUSH
41387: LD_INT 0
41389: PPUSH
41390: CALL_OW 50
// continue ;
41394: GO 41295
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41396: LD_VAR 0 12
41400: PUSH
41401: LD_INT 1
41403: ARRAY
41404: PPUSH
41405: CALL_OW 313
41409: PUSH
41410: LD_VAR 0 12
41414: PUSH
41415: LD_INT 1
41417: ARRAY
41418: PPUSH
41419: CALL_OW 266
41423: PUSH
41424: LD_INT 32
41426: PUSH
41427: LD_INT 31
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: IN
41434: AND
41435: PUSH
41436: LD_VAR 0 12
41440: PUSH
41441: LD_INT 1
41443: ARRAY
41444: PPUSH
41445: CALL_OW 313
41449: PUSH
41450: LD_INT 6
41452: EQUAL
41453: OR
41454: IFFALSE 41474
// f := Delete ( f , 1 ) ;
41456: LD_ADDR_VAR 0 12
41460: PUSH
41461: LD_VAR 0 12
41465: PPUSH
41466: LD_INT 1
41468: PPUSH
41469: CALL_OW 3
41473: ST_TO_ADDR
// if not f then
41474: LD_VAR 0 12
41478: NOT
41479: IFFALSE 41497
// begin x := x + 2 ;
41481: LD_ADDR_VAR 0 13
41485: PUSH
41486: LD_VAR 0 13
41490: PUSH
41491: LD_INT 2
41493: PLUS
41494: ST_TO_ADDR
// continue ;
41495: GO 41295
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41497: LD_VAR 0 12
41501: PUSH
41502: LD_INT 1
41504: ARRAY
41505: PPUSH
41506: CALL_OW 266
41510: PUSH
41511: LD_INT 5
41513: EQUAL
41514: IFFALSE 41588
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41516: LD_VAR 0 12
41520: PUSH
41521: LD_INT 1
41523: ARRAY
41524: PPUSH
41525: CALL_OW 313
41529: PUSH
41530: LD_INT 3
41532: LESS
41533: IFFALSE 41569
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41535: LD_INT 0
41537: PPUSH
41538: LD_INT 5
41540: PUSH
41541: LD_INT 8
41543: PUSH
41544: LD_INT 9
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: LIST
41551: PUSH
41552: LD_VAR 0 17
41556: ARRAY
41557: PPUSH
41558: LD_VAR 0 4
41562: PPUSH
41563: CALL_OW 380
41567: GO 41586
// PrepareHuman ( false , i , skill ) ;
41569: LD_INT 0
41571: PPUSH
41572: LD_VAR 0 8
41576: PPUSH
41577: LD_VAR 0 4
41581: PPUSH
41582: CALL_OW 380
// end else
41586: GO 41605
// PrepareHuman ( false , i , skill ) ;
41588: LD_INT 0
41590: PPUSH
41591: LD_VAR 0 8
41595: PPUSH
41596: LD_VAR 0 4
41600: PPUSH
41601: CALL_OW 380
// un := CreateHuman ;
41605: LD_ADDR_VAR 0 14
41609: PUSH
41610: CALL_OW 44
41614: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41615: LD_ADDR_VAR 0 7
41619: PUSH
41620: LD_VAR 0 7
41624: PPUSH
41625: LD_INT 1
41627: PPUSH
41628: LD_VAR 0 14
41632: PPUSH
41633: CALL_OW 2
41637: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41638: LD_VAR 0 14
41642: PPUSH
41643: LD_VAR 0 12
41647: PUSH
41648: LD_INT 1
41650: ARRAY
41651: PPUSH
41652: CALL_OW 52
// end ;
41656: GO 41295
41658: POP
41659: POP
// end ;
41660: GO 40597
41662: POP
41663: POP
// result := result ^ buildings ;
41664: LD_ADDR_VAR 0 7
41668: PUSH
41669: LD_VAR 0 7
41673: PUSH
41674: LD_VAR 0 18
41678: ADD
41679: ST_TO_ADDR
// end else
41680: GO 41823
// begin for i = 1 to personel do
41682: LD_ADDR_VAR 0 8
41686: PUSH
41687: DOUBLE
41688: LD_INT 1
41690: DEC
41691: ST_TO_ADDR
41692: LD_VAR 0 6
41696: PUSH
41697: FOR_TO
41698: IFFALSE 41821
// begin if i > 4 then
41700: LD_VAR 0 8
41704: PUSH
41705: LD_INT 4
41707: GREATER
41708: IFFALSE 41712
// break ;
41710: GO 41821
// x := personel [ i ] ;
41712: LD_ADDR_VAR 0 13
41716: PUSH
41717: LD_VAR 0 6
41721: PUSH
41722: LD_VAR 0 8
41726: ARRAY
41727: ST_TO_ADDR
// if x = - 1 then
41728: LD_VAR 0 13
41732: PUSH
41733: LD_INT 1
41735: NEG
41736: EQUAL
41737: IFFALSE 41741
// continue ;
41739: GO 41697
// PrepareHuman ( false , i , skill ) ;
41741: LD_INT 0
41743: PPUSH
41744: LD_VAR 0 8
41748: PPUSH
41749: LD_VAR 0 4
41753: PPUSH
41754: CALL_OW 380
// un := CreateHuman ;
41758: LD_ADDR_VAR 0 14
41762: PUSH
41763: CALL_OW 44
41767: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41768: LD_VAR 0 14
41772: PPUSH
41773: LD_VAR 0 1
41777: PPUSH
41778: CALL_OW 250
41782: PPUSH
41783: LD_VAR 0 1
41787: PPUSH
41788: CALL_OW 251
41792: PPUSH
41793: LD_INT 10
41795: PPUSH
41796: LD_INT 0
41798: PPUSH
41799: CALL_OW 50
// result := result ^ un ;
41803: LD_ADDR_VAR 0 7
41807: PUSH
41808: LD_VAR 0 7
41812: PUSH
41813: LD_VAR 0 14
41817: ADD
41818: ST_TO_ADDR
// end ;
41819: GO 41697
41821: POP
41822: POP
// end ; end ;
41823: LD_VAR 0 7
41827: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41828: LD_INT 0
41830: PPUSH
41831: PPUSH
41832: PPUSH
41833: PPUSH
41834: PPUSH
41835: PPUSH
41836: PPUSH
41837: PPUSH
41838: PPUSH
41839: PPUSH
41840: PPUSH
41841: PPUSH
41842: PPUSH
41843: PPUSH
41844: PPUSH
41845: PPUSH
// result := false ;
41846: LD_ADDR_VAR 0 3
41850: PUSH
41851: LD_INT 0
41853: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41854: LD_VAR 0 1
41858: NOT
41859: PUSH
41860: LD_VAR 0 1
41864: PPUSH
41865: CALL_OW 266
41869: PUSH
41870: LD_INT 32
41872: PUSH
41873: LD_INT 33
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: IN
41880: NOT
41881: OR
41882: IFFALSE 41886
// exit ;
41884: GO 42995
// nat := GetNation ( tower ) ;
41886: LD_ADDR_VAR 0 12
41890: PUSH
41891: LD_VAR 0 1
41895: PPUSH
41896: CALL_OW 248
41900: ST_TO_ADDR
// side := GetSide ( tower ) ;
41901: LD_ADDR_VAR 0 16
41905: PUSH
41906: LD_VAR 0 1
41910: PPUSH
41911: CALL_OW 255
41915: ST_TO_ADDR
// x := GetX ( tower ) ;
41916: LD_ADDR_VAR 0 10
41920: PUSH
41921: LD_VAR 0 1
41925: PPUSH
41926: CALL_OW 250
41930: ST_TO_ADDR
// y := GetY ( tower ) ;
41931: LD_ADDR_VAR 0 11
41935: PUSH
41936: LD_VAR 0 1
41940: PPUSH
41941: CALL_OW 251
41945: ST_TO_ADDR
// if not x or not y then
41946: LD_VAR 0 10
41950: NOT
41951: PUSH
41952: LD_VAR 0 11
41956: NOT
41957: OR
41958: IFFALSE 41962
// exit ;
41960: GO 42995
// weapon := 0 ;
41962: LD_ADDR_VAR 0 18
41966: PUSH
41967: LD_INT 0
41969: ST_TO_ADDR
// fac_list := [ ] ;
41970: LD_ADDR_VAR 0 17
41974: PUSH
41975: EMPTY
41976: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41977: LD_ADDR_VAR 0 6
41981: PUSH
41982: LD_VAR 0 1
41986: PPUSH
41987: CALL_OW 274
41991: PPUSH
41992: LD_VAR 0 2
41996: PPUSH
41997: LD_INT 0
41999: PPUSH
42000: CALL 39566 0 3
42004: PPUSH
42005: LD_INT 30
42007: PUSH
42008: LD_INT 3
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PPUSH
42015: CALL_OW 72
42019: ST_TO_ADDR
// if not factories then
42020: LD_VAR 0 6
42024: NOT
42025: IFFALSE 42029
// exit ;
42027: GO 42995
// for i in factories do
42029: LD_ADDR_VAR 0 8
42033: PUSH
42034: LD_VAR 0 6
42038: PUSH
42039: FOR_IN
42040: IFFALSE 42065
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42042: LD_ADDR_VAR 0 17
42046: PUSH
42047: LD_VAR 0 17
42051: PUSH
42052: LD_VAR 0 8
42056: PPUSH
42057: CALL_OW 478
42061: UNION
42062: ST_TO_ADDR
42063: GO 42039
42065: POP
42066: POP
// if not fac_list then
42067: LD_VAR 0 17
42071: NOT
42072: IFFALSE 42076
// exit ;
42074: GO 42995
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42076: LD_ADDR_VAR 0 5
42080: PUSH
42081: LD_INT 4
42083: PUSH
42084: LD_INT 5
42086: PUSH
42087: LD_INT 9
42089: PUSH
42090: LD_INT 10
42092: PUSH
42093: LD_INT 6
42095: PUSH
42096: LD_INT 7
42098: PUSH
42099: LD_INT 11
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 27
42113: PUSH
42114: LD_INT 28
42116: PUSH
42117: LD_INT 26
42119: PUSH
42120: LD_INT 30
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 43
42131: PUSH
42132: LD_INT 44
42134: PUSH
42135: LD_INT 46
42137: PUSH
42138: LD_INT 45
42140: PUSH
42141: LD_INT 47
42143: PUSH
42144: LD_INT 49
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: LIST
42159: PUSH
42160: LD_VAR 0 12
42164: ARRAY
42165: ST_TO_ADDR
// list := list isect fac_list ;
42166: LD_ADDR_VAR 0 5
42170: PUSH
42171: LD_VAR 0 5
42175: PUSH
42176: LD_VAR 0 17
42180: ISECT
42181: ST_TO_ADDR
// if not list then
42182: LD_VAR 0 5
42186: NOT
42187: IFFALSE 42191
// exit ;
42189: GO 42995
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42191: LD_VAR 0 12
42195: PUSH
42196: LD_INT 3
42198: EQUAL
42199: PUSH
42200: LD_INT 49
42202: PUSH
42203: LD_VAR 0 5
42207: IN
42208: AND
42209: PUSH
42210: LD_INT 31
42212: PPUSH
42213: LD_VAR 0 16
42217: PPUSH
42218: CALL_OW 321
42222: PUSH
42223: LD_INT 2
42225: EQUAL
42226: AND
42227: IFFALSE 42287
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42229: LD_INT 22
42231: PUSH
42232: LD_VAR 0 16
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: PUSH
42241: LD_INT 35
42243: PUSH
42244: LD_INT 49
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: LD_INT 91
42253: PUSH
42254: LD_VAR 0 1
42258: PUSH
42259: LD_INT 10
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: LIST
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: LIST
42271: PPUSH
42272: CALL_OW 69
42276: NOT
42277: IFFALSE 42287
// weapon := ru_time_lapser ;
42279: LD_ADDR_VAR 0 18
42283: PUSH
42284: LD_INT 49
42286: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42287: LD_VAR 0 12
42291: PUSH
42292: LD_INT 1
42294: PUSH
42295: LD_INT 2
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: IN
42302: PUSH
42303: LD_INT 11
42305: PUSH
42306: LD_VAR 0 5
42310: IN
42311: PUSH
42312: LD_INT 30
42314: PUSH
42315: LD_VAR 0 5
42319: IN
42320: OR
42321: AND
42322: PUSH
42323: LD_INT 6
42325: PPUSH
42326: LD_VAR 0 16
42330: PPUSH
42331: CALL_OW 321
42335: PUSH
42336: LD_INT 2
42338: EQUAL
42339: AND
42340: IFFALSE 42505
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42342: LD_INT 22
42344: PUSH
42345: LD_VAR 0 16
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 2
42356: PUSH
42357: LD_INT 35
42359: PUSH
42360: LD_INT 11
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 35
42369: PUSH
42370: LD_INT 30
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: LIST
42381: PUSH
42382: LD_INT 91
42384: PUSH
42385: LD_VAR 0 1
42389: PUSH
42390: LD_INT 18
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: LIST
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: LIST
42402: PPUSH
42403: CALL_OW 69
42407: NOT
42408: PUSH
42409: LD_INT 22
42411: PUSH
42412: LD_VAR 0 16
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 2
42423: PUSH
42424: LD_INT 30
42426: PUSH
42427: LD_INT 32
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 30
42436: PUSH
42437: LD_INT 33
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: LIST
42448: PUSH
42449: LD_INT 91
42451: PUSH
42452: LD_VAR 0 1
42456: PUSH
42457: LD_INT 12
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: LIST
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: LIST
42469: PUSH
42470: EMPTY
42471: LIST
42472: PPUSH
42473: CALL_OW 69
42477: PUSH
42478: LD_INT 2
42480: GREATER
42481: AND
42482: IFFALSE 42505
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42484: LD_ADDR_VAR 0 18
42488: PUSH
42489: LD_INT 11
42491: PUSH
42492: LD_INT 30
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_VAR 0 12
42503: ARRAY
42504: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42505: LD_VAR 0 18
42509: NOT
42510: PUSH
42511: LD_INT 40
42513: PPUSH
42514: LD_VAR 0 16
42518: PPUSH
42519: CALL_OW 321
42523: PUSH
42524: LD_INT 2
42526: EQUAL
42527: AND
42528: PUSH
42529: LD_INT 7
42531: PUSH
42532: LD_VAR 0 5
42536: IN
42537: PUSH
42538: LD_INT 28
42540: PUSH
42541: LD_VAR 0 5
42545: IN
42546: OR
42547: PUSH
42548: LD_INT 45
42550: PUSH
42551: LD_VAR 0 5
42555: IN
42556: OR
42557: AND
42558: IFFALSE 42812
// begin hex := GetHexInfo ( x , y ) ;
42560: LD_ADDR_VAR 0 4
42564: PUSH
42565: LD_VAR 0 10
42569: PPUSH
42570: LD_VAR 0 11
42574: PPUSH
42575: CALL_OW 546
42579: ST_TO_ADDR
// if hex [ 1 ] then
42580: LD_VAR 0 4
42584: PUSH
42585: LD_INT 1
42587: ARRAY
42588: IFFALSE 42592
// exit ;
42590: GO 42995
// height := hex [ 2 ] ;
42592: LD_ADDR_VAR 0 15
42596: PUSH
42597: LD_VAR 0 4
42601: PUSH
42602: LD_INT 2
42604: ARRAY
42605: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42606: LD_ADDR_VAR 0 14
42610: PUSH
42611: LD_INT 0
42613: PUSH
42614: LD_INT 2
42616: PUSH
42617: LD_INT 3
42619: PUSH
42620: LD_INT 5
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: ST_TO_ADDR
// for i in tmp do
42629: LD_ADDR_VAR 0 8
42633: PUSH
42634: LD_VAR 0 14
42638: PUSH
42639: FOR_IN
42640: IFFALSE 42810
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42642: LD_ADDR_VAR 0 9
42646: PUSH
42647: LD_VAR 0 10
42651: PPUSH
42652: LD_VAR 0 8
42656: PPUSH
42657: LD_INT 5
42659: PPUSH
42660: CALL_OW 272
42664: PUSH
42665: LD_VAR 0 11
42669: PPUSH
42670: LD_VAR 0 8
42674: PPUSH
42675: LD_INT 5
42677: PPUSH
42678: CALL_OW 273
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42687: LD_VAR 0 9
42691: PUSH
42692: LD_INT 1
42694: ARRAY
42695: PPUSH
42696: LD_VAR 0 9
42700: PUSH
42701: LD_INT 2
42703: ARRAY
42704: PPUSH
42705: CALL_OW 488
42709: IFFALSE 42808
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42711: LD_ADDR_VAR 0 4
42715: PUSH
42716: LD_VAR 0 9
42720: PUSH
42721: LD_INT 1
42723: ARRAY
42724: PPUSH
42725: LD_VAR 0 9
42729: PUSH
42730: LD_INT 2
42732: ARRAY
42733: PPUSH
42734: CALL_OW 546
42738: ST_TO_ADDR
// if hex [ 1 ] then
42739: LD_VAR 0 4
42743: PUSH
42744: LD_INT 1
42746: ARRAY
42747: IFFALSE 42751
// continue ;
42749: GO 42639
// h := hex [ 2 ] ;
42751: LD_ADDR_VAR 0 13
42755: PUSH
42756: LD_VAR 0 4
42760: PUSH
42761: LD_INT 2
42763: ARRAY
42764: ST_TO_ADDR
// if h + 7 < height then
42765: LD_VAR 0 13
42769: PUSH
42770: LD_INT 7
42772: PLUS
42773: PUSH
42774: LD_VAR 0 15
42778: LESS
42779: IFFALSE 42808
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42781: LD_ADDR_VAR 0 18
42785: PUSH
42786: LD_INT 7
42788: PUSH
42789: LD_INT 28
42791: PUSH
42792: LD_INT 45
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: LIST
42799: PUSH
42800: LD_VAR 0 12
42804: ARRAY
42805: ST_TO_ADDR
// break ;
42806: GO 42810
// end ; end ; end ;
42808: GO 42639
42810: POP
42811: POP
// end ; if not weapon then
42812: LD_VAR 0 18
42816: NOT
42817: IFFALSE 42877
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42819: LD_ADDR_VAR 0 5
42823: PUSH
42824: LD_VAR 0 5
42828: PUSH
42829: LD_INT 11
42831: PUSH
42832: LD_INT 30
42834: PUSH
42835: LD_INT 49
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: LIST
42842: DIFF
42843: ST_TO_ADDR
// if not list then
42844: LD_VAR 0 5
42848: NOT
42849: IFFALSE 42853
// exit ;
42851: GO 42995
// weapon := list [ rand ( 1 , list ) ] ;
42853: LD_ADDR_VAR 0 18
42857: PUSH
42858: LD_VAR 0 5
42862: PUSH
42863: LD_INT 1
42865: PPUSH
42866: LD_VAR 0 5
42870: PPUSH
42871: CALL_OW 12
42875: ARRAY
42876: ST_TO_ADDR
// end ; if weapon then
42877: LD_VAR 0 18
42881: IFFALSE 42995
// begin tmp := CostOfWeapon ( weapon ) ;
42883: LD_ADDR_VAR 0 14
42887: PUSH
42888: LD_VAR 0 18
42892: PPUSH
42893: CALL_OW 451
42897: ST_TO_ADDR
// j := GetBase ( tower ) ;
42898: LD_ADDR_VAR 0 9
42902: PUSH
42903: LD_VAR 0 1
42907: PPUSH
42908: CALL_OW 274
42912: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42913: LD_VAR 0 9
42917: PPUSH
42918: LD_INT 1
42920: PPUSH
42921: CALL_OW 275
42925: PUSH
42926: LD_VAR 0 14
42930: PUSH
42931: LD_INT 1
42933: ARRAY
42934: GREATEREQUAL
42935: PUSH
42936: LD_VAR 0 9
42940: PPUSH
42941: LD_INT 2
42943: PPUSH
42944: CALL_OW 275
42948: PUSH
42949: LD_VAR 0 14
42953: PUSH
42954: LD_INT 2
42956: ARRAY
42957: GREATEREQUAL
42958: AND
42959: PUSH
42960: LD_VAR 0 9
42964: PPUSH
42965: LD_INT 3
42967: PPUSH
42968: CALL_OW 275
42972: PUSH
42973: LD_VAR 0 14
42977: PUSH
42978: LD_INT 3
42980: ARRAY
42981: GREATEREQUAL
42982: AND
42983: IFFALSE 42995
// result := weapon ;
42985: LD_ADDR_VAR 0 3
42989: PUSH
42990: LD_VAR 0 18
42994: ST_TO_ADDR
// end ; end ;
42995: LD_VAR 0 3
42999: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43000: LD_INT 0
43002: PPUSH
43003: PPUSH
// result := true ;
43004: LD_ADDR_VAR 0 3
43008: PUSH
43009: LD_INT 1
43011: ST_TO_ADDR
// if array1 = array2 then
43012: LD_VAR 0 1
43016: PUSH
43017: LD_VAR 0 2
43021: EQUAL
43022: IFFALSE 43082
// begin for i = 1 to array1 do
43024: LD_ADDR_VAR 0 4
43028: PUSH
43029: DOUBLE
43030: LD_INT 1
43032: DEC
43033: ST_TO_ADDR
43034: LD_VAR 0 1
43038: PUSH
43039: FOR_TO
43040: IFFALSE 43078
// if array1 [ i ] <> array2 [ i ] then
43042: LD_VAR 0 1
43046: PUSH
43047: LD_VAR 0 4
43051: ARRAY
43052: PUSH
43053: LD_VAR 0 2
43057: PUSH
43058: LD_VAR 0 4
43062: ARRAY
43063: NONEQUAL
43064: IFFALSE 43076
// begin result := false ;
43066: LD_ADDR_VAR 0 3
43070: PUSH
43071: LD_INT 0
43073: ST_TO_ADDR
// break ;
43074: GO 43078
// end ;
43076: GO 43039
43078: POP
43079: POP
// end else
43080: GO 43090
// result := false ;
43082: LD_ADDR_VAR 0 3
43086: PUSH
43087: LD_INT 0
43089: ST_TO_ADDR
// end ;
43090: LD_VAR 0 3
43094: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
43095: LD_INT 0
43097: PPUSH
43098: PPUSH
// if not array1 or not array2 then
43099: LD_VAR 0 1
43103: NOT
43104: PUSH
43105: LD_VAR 0 2
43109: NOT
43110: OR
43111: IFFALSE 43115
// exit ;
43113: GO 43179
// result := true ;
43115: LD_ADDR_VAR 0 3
43119: PUSH
43120: LD_INT 1
43122: ST_TO_ADDR
// for i = 1 to array1 do
43123: LD_ADDR_VAR 0 4
43127: PUSH
43128: DOUBLE
43129: LD_INT 1
43131: DEC
43132: ST_TO_ADDR
43133: LD_VAR 0 1
43137: PUSH
43138: FOR_TO
43139: IFFALSE 43177
// if array1 [ i ] <> array2 [ i ] then
43141: LD_VAR 0 1
43145: PUSH
43146: LD_VAR 0 4
43150: ARRAY
43151: PUSH
43152: LD_VAR 0 2
43156: PUSH
43157: LD_VAR 0 4
43161: ARRAY
43162: NONEQUAL
43163: IFFALSE 43175
// begin result := false ;
43165: LD_ADDR_VAR 0 3
43169: PUSH
43170: LD_INT 0
43172: ST_TO_ADDR
// break ;
43173: GO 43177
// end ;
43175: GO 43138
43177: POP
43178: POP
// end ;
43179: LD_VAR 0 3
43183: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43184: LD_INT 0
43186: PPUSH
43187: PPUSH
43188: PPUSH
// pom := GetBase ( fac ) ;
43189: LD_ADDR_VAR 0 5
43193: PUSH
43194: LD_VAR 0 1
43198: PPUSH
43199: CALL_OW 274
43203: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43204: LD_ADDR_VAR 0 4
43208: PUSH
43209: LD_VAR 0 2
43213: PUSH
43214: LD_INT 1
43216: ARRAY
43217: PPUSH
43218: LD_VAR 0 2
43222: PUSH
43223: LD_INT 2
43225: ARRAY
43226: PPUSH
43227: LD_VAR 0 2
43231: PUSH
43232: LD_INT 3
43234: ARRAY
43235: PPUSH
43236: LD_VAR 0 2
43240: PUSH
43241: LD_INT 4
43243: ARRAY
43244: PPUSH
43245: CALL_OW 449
43249: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43250: LD_ADDR_VAR 0 3
43254: PUSH
43255: LD_VAR 0 5
43259: PPUSH
43260: LD_INT 1
43262: PPUSH
43263: CALL_OW 275
43267: PUSH
43268: LD_VAR 0 4
43272: PUSH
43273: LD_INT 1
43275: ARRAY
43276: GREATEREQUAL
43277: PUSH
43278: LD_VAR 0 5
43282: PPUSH
43283: LD_INT 2
43285: PPUSH
43286: CALL_OW 275
43290: PUSH
43291: LD_VAR 0 4
43295: PUSH
43296: LD_INT 2
43298: ARRAY
43299: GREATEREQUAL
43300: AND
43301: PUSH
43302: LD_VAR 0 5
43306: PPUSH
43307: LD_INT 3
43309: PPUSH
43310: CALL_OW 275
43314: PUSH
43315: LD_VAR 0 4
43319: PUSH
43320: LD_INT 3
43322: ARRAY
43323: GREATEREQUAL
43324: AND
43325: ST_TO_ADDR
// end ;
43326: LD_VAR 0 3
43330: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43331: LD_INT 0
43333: PPUSH
43334: PPUSH
43335: PPUSH
43336: PPUSH
// pom := GetBase ( building ) ;
43337: LD_ADDR_VAR 0 3
43341: PUSH
43342: LD_VAR 0 1
43346: PPUSH
43347: CALL_OW 274
43351: ST_TO_ADDR
// if not pom then
43352: LD_VAR 0 3
43356: NOT
43357: IFFALSE 43361
// exit ;
43359: GO 43531
// btype := GetBType ( building ) ;
43361: LD_ADDR_VAR 0 5
43365: PUSH
43366: LD_VAR 0 1
43370: PPUSH
43371: CALL_OW 266
43375: ST_TO_ADDR
// if btype = b_armoury then
43376: LD_VAR 0 5
43380: PUSH
43381: LD_INT 4
43383: EQUAL
43384: IFFALSE 43394
// btype := b_barracks ;
43386: LD_ADDR_VAR 0 5
43390: PUSH
43391: LD_INT 5
43393: ST_TO_ADDR
// if btype = b_depot then
43394: LD_VAR 0 5
43398: PUSH
43399: LD_INT 0
43401: EQUAL
43402: IFFALSE 43412
// btype := b_warehouse ;
43404: LD_ADDR_VAR 0 5
43408: PUSH
43409: LD_INT 1
43411: ST_TO_ADDR
// if btype = b_workshop then
43412: LD_VAR 0 5
43416: PUSH
43417: LD_INT 2
43419: EQUAL
43420: IFFALSE 43430
// btype := b_factory ;
43422: LD_ADDR_VAR 0 5
43426: PUSH
43427: LD_INT 3
43429: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43430: LD_ADDR_VAR 0 4
43434: PUSH
43435: LD_VAR 0 5
43439: PPUSH
43440: LD_VAR 0 1
43444: PPUSH
43445: CALL_OW 248
43449: PPUSH
43450: CALL_OW 450
43454: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43455: LD_ADDR_VAR 0 2
43459: PUSH
43460: LD_VAR 0 3
43464: PPUSH
43465: LD_INT 1
43467: PPUSH
43468: CALL_OW 275
43472: PUSH
43473: LD_VAR 0 4
43477: PUSH
43478: LD_INT 1
43480: ARRAY
43481: GREATEREQUAL
43482: PUSH
43483: LD_VAR 0 3
43487: PPUSH
43488: LD_INT 2
43490: PPUSH
43491: CALL_OW 275
43495: PUSH
43496: LD_VAR 0 4
43500: PUSH
43501: LD_INT 2
43503: ARRAY
43504: GREATEREQUAL
43505: AND
43506: PUSH
43507: LD_VAR 0 3
43511: PPUSH
43512: LD_INT 3
43514: PPUSH
43515: CALL_OW 275
43519: PUSH
43520: LD_VAR 0 4
43524: PUSH
43525: LD_INT 3
43527: ARRAY
43528: GREATEREQUAL
43529: AND
43530: ST_TO_ADDR
// end ;
43531: LD_VAR 0 2
43535: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43536: LD_INT 0
43538: PPUSH
43539: PPUSH
43540: PPUSH
// pom := GetBase ( building ) ;
43541: LD_ADDR_VAR 0 4
43545: PUSH
43546: LD_VAR 0 1
43550: PPUSH
43551: CALL_OW 274
43555: ST_TO_ADDR
// if not pom then
43556: LD_VAR 0 4
43560: NOT
43561: IFFALSE 43565
// exit ;
43563: GO 43666
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43565: LD_ADDR_VAR 0 5
43569: PUSH
43570: LD_VAR 0 2
43574: PPUSH
43575: LD_VAR 0 1
43579: PPUSH
43580: CALL_OW 248
43584: PPUSH
43585: CALL_OW 450
43589: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43590: LD_ADDR_VAR 0 3
43594: PUSH
43595: LD_VAR 0 4
43599: PPUSH
43600: LD_INT 1
43602: PPUSH
43603: CALL_OW 275
43607: PUSH
43608: LD_VAR 0 5
43612: PUSH
43613: LD_INT 1
43615: ARRAY
43616: GREATEREQUAL
43617: PUSH
43618: LD_VAR 0 4
43622: PPUSH
43623: LD_INT 2
43625: PPUSH
43626: CALL_OW 275
43630: PUSH
43631: LD_VAR 0 5
43635: PUSH
43636: LD_INT 2
43638: ARRAY
43639: GREATEREQUAL
43640: AND
43641: PUSH
43642: LD_VAR 0 4
43646: PPUSH
43647: LD_INT 3
43649: PPUSH
43650: CALL_OW 275
43654: PUSH
43655: LD_VAR 0 5
43659: PUSH
43660: LD_INT 3
43662: ARRAY
43663: GREATEREQUAL
43664: AND
43665: ST_TO_ADDR
// end ;
43666: LD_VAR 0 3
43670: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43671: LD_INT 0
43673: PPUSH
43674: PPUSH
43675: PPUSH
43676: PPUSH
43677: PPUSH
43678: PPUSH
43679: PPUSH
43680: PPUSH
43681: PPUSH
43682: PPUSH
43683: PPUSH
// result := false ;
43684: LD_ADDR_VAR 0 8
43688: PUSH
43689: LD_INT 0
43691: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43692: LD_VAR 0 5
43696: NOT
43697: PUSH
43698: LD_VAR 0 1
43702: NOT
43703: OR
43704: PUSH
43705: LD_VAR 0 2
43709: NOT
43710: OR
43711: PUSH
43712: LD_VAR 0 3
43716: NOT
43717: OR
43718: IFFALSE 43722
// exit ;
43720: GO 44536
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43722: LD_ADDR_VAR 0 14
43726: PUSH
43727: LD_VAR 0 1
43731: PPUSH
43732: LD_VAR 0 2
43736: PPUSH
43737: LD_VAR 0 3
43741: PPUSH
43742: LD_VAR 0 4
43746: PPUSH
43747: LD_VAR 0 5
43751: PUSH
43752: LD_INT 1
43754: ARRAY
43755: PPUSH
43756: CALL_OW 248
43760: PPUSH
43761: LD_INT 0
43763: PPUSH
43764: CALL 45773 0 6
43768: ST_TO_ADDR
// if not hexes then
43769: LD_VAR 0 14
43773: NOT
43774: IFFALSE 43778
// exit ;
43776: GO 44536
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43778: LD_ADDR_VAR 0 17
43782: PUSH
43783: LD_VAR 0 5
43787: PPUSH
43788: LD_INT 22
43790: PUSH
43791: LD_VAR 0 13
43795: PPUSH
43796: CALL_OW 255
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 2
43807: PUSH
43808: LD_INT 30
43810: PUSH
43811: LD_INT 0
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 30
43820: PUSH
43821: LD_INT 1
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: LIST
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PPUSH
43837: CALL_OW 72
43841: ST_TO_ADDR
// for i = 1 to hexes do
43842: LD_ADDR_VAR 0 9
43846: PUSH
43847: DOUBLE
43848: LD_INT 1
43850: DEC
43851: ST_TO_ADDR
43852: LD_VAR 0 14
43856: PUSH
43857: FOR_TO
43858: IFFALSE 44534
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43860: LD_ADDR_VAR 0 13
43864: PUSH
43865: LD_VAR 0 14
43869: PUSH
43870: LD_VAR 0 9
43874: ARRAY
43875: PUSH
43876: LD_INT 1
43878: ARRAY
43879: PPUSH
43880: LD_VAR 0 14
43884: PUSH
43885: LD_VAR 0 9
43889: ARRAY
43890: PUSH
43891: LD_INT 2
43893: ARRAY
43894: PPUSH
43895: CALL_OW 428
43899: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43900: LD_VAR 0 14
43904: PUSH
43905: LD_VAR 0 9
43909: ARRAY
43910: PUSH
43911: LD_INT 1
43913: ARRAY
43914: PPUSH
43915: LD_VAR 0 14
43919: PUSH
43920: LD_VAR 0 9
43924: ARRAY
43925: PUSH
43926: LD_INT 2
43928: ARRAY
43929: PPUSH
43930: CALL_OW 351
43934: PUSH
43935: LD_VAR 0 14
43939: PUSH
43940: LD_VAR 0 9
43944: ARRAY
43945: PUSH
43946: LD_INT 1
43948: ARRAY
43949: PPUSH
43950: LD_VAR 0 14
43954: PUSH
43955: LD_VAR 0 9
43959: ARRAY
43960: PUSH
43961: LD_INT 2
43963: ARRAY
43964: PPUSH
43965: CALL_OW 488
43969: NOT
43970: OR
43971: PUSH
43972: LD_VAR 0 13
43976: PPUSH
43977: CALL_OW 247
43981: PUSH
43982: LD_INT 3
43984: EQUAL
43985: OR
43986: IFFALSE 43992
// exit ;
43988: POP
43989: POP
43990: GO 44536
// if not tmp then
43992: LD_VAR 0 13
43996: NOT
43997: IFFALSE 44001
// continue ;
43999: GO 43857
// result := true ;
44001: LD_ADDR_VAR 0 8
44005: PUSH
44006: LD_INT 1
44008: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
44009: LD_VAR 0 6
44013: PUSH
44014: LD_VAR 0 13
44018: PPUSH
44019: CALL_OW 247
44023: PUSH
44024: LD_INT 2
44026: EQUAL
44027: AND
44028: PUSH
44029: LD_VAR 0 13
44033: PPUSH
44034: CALL_OW 263
44038: PUSH
44039: LD_INT 1
44041: EQUAL
44042: AND
44043: IFFALSE 44207
// begin if IsDrivenBy ( tmp ) then
44045: LD_VAR 0 13
44049: PPUSH
44050: CALL_OW 311
44054: IFFALSE 44058
// continue ;
44056: GO 43857
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
44058: LD_VAR 0 6
44062: PPUSH
44063: LD_INT 3
44065: PUSH
44066: LD_INT 60
44068: PUSH
44069: EMPTY
44070: LIST
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 3
44078: PUSH
44079: LD_INT 55
44081: PUSH
44082: EMPTY
44083: LIST
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: PPUSH
44093: CALL_OW 72
44097: IFFALSE 44205
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
44099: LD_ADDR_VAR 0 18
44103: PUSH
44104: LD_VAR 0 6
44108: PPUSH
44109: LD_INT 3
44111: PUSH
44112: LD_INT 60
44114: PUSH
44115: EMPTY
44116: LIST
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 3
44124: PUSH
44125: LD_INT 55
44127: PUSH
44128: EMPTY
44129: LIST
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PPUSH
44139: CALL_OW 72
44143: PUSH
44144: LD_INT 1
44146: ARRAY
44147: ST_TO_ADDR
// if IsInUnit ( driver ) then
44148: LD_VAR 0 18
44152: PPUSH
44153: CALL_OW 310
44157: IFFALSE 44168
// ComExit ( driver ) ;
44159: LD_VAR 0 18
44163: PPUSH
44164: CALL 68957 0 1
// AddComEnterUnit ( driver , tmp ) ;
44168: LD_VAR 0 18
44172: PPUSH
44173: LD_VAR 0 13
44177: PPUSH
44178: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44182: LD_VAR 0 18
44186: PPUSH
44187: LD_VAR 0 7
44191: PPUSH
44192: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44196: LD_VAR 0 18
44200: PPUSH
44201: CALL_OW 181
// end ; continue ;
44205: GO 43857
// end ; if not cleaners or not tmp in cleaners then
44207: LD_VAR 0 6
44211: NOT
44212: PUSH
44213: LD_VAR 0 13
44217: PUSH
44218: LD_VAR 0 6
44222: IN
44223: NOT
44224: OR
44225: IFFALSE 44532
// begin if dep then
44227: LD_VAR 0 17
44231: IFFALSE 44367
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44233: LD_ADDR_VAR 0 16
44237: PUSH
44238: LD_VAR 0 17
44242: PUSH
44243: LD_INT 1
44245: ARRAY
44246: PPUSH
44247: CALL_OW 250
44251: PPUSH
44252: LD_VAR 0 17
44256: PUSH
44257: LD_INT 1
44259: ARRAY
44260: PPUSH
44261: CALL_OW 254
44265: PPUSH
44266: LD_INT 5
44268: PPUSH
44269: CALL_OW 272
44273: PUSH
44274: LD_VAR 0 17
44278: PUSH
44279: LD_INT 1
44281: ARRAY
44282: PPUSH
44283: CALL_OW 251
44287: PPUSH
44288: LD_VAR 0 17
44292: PUSH
44293: LD_INT 1
44295: ARRAY
44296: PPUSH
44297: CALL_OW 254
44301: PPUSH
44302: LD_INT 5
44304: PPUSH
44305: CALL_OW 273
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44314: LD_VAR 0 16
44318: PUSH
44319: LD_INT 1
44321: ARRAY
44322: PPUSH
44323: LD_VAR 0 16
44327: PUSH
44328: LD_INT 2
44330: ARRAY
44331: PPUSH
44332: CALL_OW 488
44336: IFFALSE 44367
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44338: LD_VAR 0 13
44342: PPUSH
44343: LD_VAR 0 16
44347: PUSH
44348: LD_INT 1
44350: ARRAY
44351: PPUSH
44352: LD_VAR 0 16
44356: PUSH
44357: LD_INT 2
44359: ARRAY
44360: PPUSH
44361: CALL_OW 111
// continue ;
44365: GO 43857
// end ; end ; r := GetDir ( tmp ) ;
44367: LD_ADDR_VAR 0 15
44371: PUSH
44372: LD_VAR 0 13
44376: PPUSH
44377: CALL_OW 254
44381: ST_TO_ADDR
// if r = 5 then
44382: LD_VAR 0 15
44386: PUSH
44387: LD_INT 5
44389: EQUAL
44390: IFFALSE 44400
// r := 0 ;
44392: LD_ADDR_VAR 0 15
44396: PUSH
44397: LD_INT 0
44399: ST_TO_ADDR
// for j = r to 5 do
44400: LD_ADDR_VAR 0 10
44404: PUSH
44405: DOUBLE
44406: LD_VAR 0 15
44410: DEC
44411: ST_TO_ADDR
44412: LD_INT 5
44414: PUSH
44415: FOR_TO
44416: IFFALSE 44530
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44418: LD_ADDR_VAR 0 11
44422: PUSH
44423: LD_VAR 0 13
44427: PPUSH
44428: CALL_OW 250
44432: PPUSH
44433: LD_VAR 0 10
44437: PPUSH
44438: LD_INT 2
44440: PPUSH
44441: CALL_OW 272
44445: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44446: LD_ADDR_VAR 0 12
44450: PUSH
44451: LD_VAR 0 13
44455: PPUSH
44456: CALL_OW 251
44460: PPUSH
44461: LD_VAR 0 10
44465: PPUSH
44466: LD_INT 2
44468: PPUSH
44469: CALL_OW 273
44473: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44474: LD_VAR 0 11
44478: PPUSH
44479: LD_VAR 0 12
44483: PPUSH
44484: CALL_OW 488
44488: PUSH
44489: LD_VAR 0 11
44493: PPUSH
44494: LD_VAR 0 12
44498: PPUSH
44499: CALL_OW 428
44503: NOT
44504: AND
44505: IFFALSE 44528
// begin ComMoveXY ( tmp , _x , _y ) ;
44507: LD_VAR 0 13
44511: PPUSH
44512: LD_VAR 0 11
44516: PPUSH
44517: LD_VAR 0 12
44521: PPUSH
44522: CALL_OW 111
// break ;
44526: GO 44530
// end ; end ;
44528: GO 44415
44530: POP
44531: POP
// end ; end ;
44532: GO 43857
44534: POP
44535: POP
// end ;
44536: LD_VAR 0 8
44540: RET
// export function BuildingTechInvented ( side , btype ) ; begin
44541: LD_INT 0
44543: PPUSH
// result := true ;
44544: LD_ADDR_VAR 0 3
44548: PUSH
44549: LD_INT 1
44551: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
44552: LD_VAR 0 2
44556: PUSH
44557: LD_INT 24
44559: DOUBLE
44560: EQUAL
44561: IFTRUE 44571
44563: LD_INT 33
44565: DOUBLE
44566: EQUAL
44567: IFTRUE 44571
44569: GO 44596
44571: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
44572: LD_ADDR_VAR 0 3
44576: PUSH
44577: LD_INT 32
44579: PPUSH
44580: LD_VAR 0 1
44584: PPUSH
44585: CALL_OW 321
44589: PUSH
44590: LD_INT 2
44592: EQUAL
44593: ST_TO_ADDR
44594: GO 44916
44596: LD_INT 20
44598: DOUBLE
44599: EQUAL
44600: IFTRUE 44604
44602: GO 44629
44604: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
44605: LD_ADDR_VAR 0 3
44609: PUSH
44610: LD_INT 6
44612: PPUSH
44613: LD_VAR 0 1
44617: PPUSH
44618: CALL_OW 321
44622: PUSH
44623: LD_INT 2
44625: EQUAL
44626: ST_TO_ADDR
44627: GO 44916
44629: LD_INT 22
44631: DOUBLE
44632: EQUAL
44633: IFTRUE 44643
44635: LD_INT 36
44637: DOUBLE
44638: EQUAL
44639: IFTRUE 44643
44641: GO 44668
44643: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44644: LD_ADDR_VAR 0 3
44648: PUSH
44649: LD_INT 15
44651: PPUSH
44652: LD_VAR 0 1
44656: PPUSH
44657: CALL_OW 321
44661: PUSH
44662: LD_INT 2
44664: EQUAL
44665: ST_TO_ADDR
44666: GO 44916
44668: LD_INT 30
44670: DOUBLE
44671: EQUAL
44672: IFTRUE 44676
44674: GO 44701
44676: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44677: LD_ADDR_VAR 0 3
44681: PUSH
44682: LD_INT 20
44684: PPUSH
44685: LD_VAR 0 1
44689: PPUSH
44690: CALL_OW 321
44694: PUSH
44695: LD_INT 2
44697: EQUAL
44698: ST_TO_ADDR
44699: GO 44916
44701: LD_INT 28
44703: DOUBLE
44704: EQUAL
44705: IFTRUE 44715
44707: LD_INT 21
44709: DOUBLE
44710: EQUAL
44711: IFTRUE 44715
44713: GO 44740
44715: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44716: LD_ADDR_VAR 0 3
44720: PUSH
44721: LD_INT 21
44723: PPUSH
44724: LD_VAR 0 1
44728: PPUSH
44729: CALL_OW 321
44733: PUSH
44734: LD_INT 2
44736: EQUAL
44737: ST_TO_ADDR
44738: GO 44916
44740: LD_INT 16
44742: DOUBLE
44743: EQUAL
44744: IFTRUE 44748
44746: GO 44775
44748: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44749: LD_ADDR_VAR 0 3
44753: PUSH
44754: LD_EXP 44
44758: PPUSH
44759: LD_VAR 0 1
44763: PPUSH
44764: CALL_OW 321
44768: PUSH
44769: LD_INT 2
44771: EQUAL
44772: ST_TO_ADDR
44773: GO 44916
44775: LD_INT 19
44777: DOUBLE
44778: EQUAL
44779: IFTRUE 44789
44781: LD_INT 23
44783: DOUBLE
44784: EQUAL
44785: IFTRUE 44789
44787: GO 44816
44789: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44790: LD_ADDR_VAR 0 3
44794: PUSH
44795: LD_EXP 43
44799: PPUSH
44800: LD_VAR 0 1
44804: PPUSH
44805: CALL_OW 321
44809: PUSH
44810: LD_INT 2
44812: EQUAL
44813: ST_TO_ADDR
44814: GO 44916
44816: LD_INT 17
44818: DOUBLE
44819: EQUAL
44820: IFTRUE 44824
44822: GO 44849
44824: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44825: LD_ADDR_VAR 0 3
44829: PUSH
44830: LD_INT 39
44832: PPUSH
44833: LD_VAR 0 1
44837: PPUSH
44838: CALL_OW 321
44842: PUSH
44843: LD_INT 2
44845: EQUAL
44846: ST_TO_ADDR
44847: GO 44916
44849: LD_INT 18
44851: DOUBLE
44852: EQUAL
44853: IFTRUE 44857
44855: GO 44882
44857: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44858: LD_ADDR_VAR 0 3
44862: PUSH
44863: LD_INT 40
44865: PPUSH
44866: LD_VAR 0 1
44870: PPUSH
44871: CALL_OW 321
44875: PUSH
44876: LD_INT 2
44878: EQUAL
44879: ST_TO_ADDR
44880: GO 44916
44882: LD_INT 27
44884: DOUBLE
44885: EQUAL
44886: IFTRUE 44890
44888: GO 44915
44890: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44891: LD_ADDR_VAR 0 3
44895: PUSH
44896: LD_INT 35
44898: PPUSH
44899: LD_VAR 0 1
44903: PPUSH
44904: CALL_OW 321
44908: PUSH
44909: LD_INT 2
44911: EQUAL
44912: ST_TO_ADDR
44913: GO 44916
44915: POP
// end ;
44916: LD_VAR 0 3
44920: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44921: LD_INT 0
44923: PPUSH
44924: PPUSH
44925: PPUSH
44926: PPUSH
44927: PPUSH
44928: PPUSH
44929: PPUSH
44930: PPUSH
44931: PPUSH
44932: PPUSH
44933: PPUSH
// result := false ;
44934: LD_ADDR_VAR 0 6
44938: PUSH
44939: LD_INT 0
44941: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44942: LD_VAR 0 1
44946: NOT
44947: PUSH
44948: LD_VAR 0 1
44952: PPUSH
44953: CALL_OW 266
44957: PUSH
44958: LD_INT 0
44960: PUSH
44961: LD_INT 1
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: IN
44968: NOT
44969: OR
44970: PUSH
44971: LD_VAR 0 2
44975: NOT
44976: OR
44977: PUSH
44978: LD_VAR 0 5
44982: PUSH
44983: LD_INT 0
44985: PUSH
44986: LD_INT 1
44988: PUSH
44989: LD_INT 2
44991: PUSH
44992: LD_INT 3
44994: PUSH
44995: LD_INT 4
44997: PUSH
44998: LD_INT 5
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: IN
45009: NOT
45010: OR
45011: PUSH
45012: LD_VAR 0 3
45016: PPUSH
45017: LD_VAR 0 4
45021: PPUSH
45022: CALL_OW 488
45026: NOT
45027: OR
45028: IFFALSE 45032
// exit ;
45030: GO 45768
// side := GetSide ( depot ) ;
45032: LD_ADDR_VAR 0 9
45036: PUSH
45037: LD_VAR 0 1
45041: PPUSH
45042: CALL_OW 255
45046: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
45047: LD_VAR 0 9
45051: PPUSH
45052: LD_VAR 0 2
45056: PPUSH
45057: CALL 44541 0 2
45061: NOT
45062: IFFALSE 45066
// exit ;
45064: GO 45768
// pom := GetBase ( depot ) ;
45066: LD_ADDR_VAR 0 10
45070: PUSH
45071: LD_VAR 0 1
45075: PPUSH
45076: CALL_OW 274
45080: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45081: LD_ADDR_VAR 0 11
45085: PUSH
45086: LD_VAR 0 2
45090: PPUSH
45091: LD_VAR 0 1
45095: PPUSH
45096: CALL_OW 248
45100: PPUSH
45101: CALL_OW 450
45105: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
45106: LD_VAR 0 10
45110: PPUSH
45111: LD_INT 1
45113: PPUSH
45114: CALL_OW 275
45118: PUSH
45119: LD_VAR 0 11
45123: PUSH
45124: LD_INT 1
45126: ARRAY
45127: GREATEREQUAL
45128: PUSH
45129: LD_VAR 0 10
45133: PPUSH
45134: LD_INT 2
45136: PPUSH
45137: CALL_OW 275
45141: PUSH
45142: LD_VAR 0 11
45146: PUSH
45147: LD_INT 2
45149: ARRAY
45150: GREATEREQUAL
45151: AND
45152: PUSH
45153: LD_VAR 0 10
45157: PPUSH
45158: LD_INT 3
45160: PPUSH
45161: CALL_OW 275
45165: PUSH
45166: LD_VAR 0 11
45170: PUSH
45171: LD_INT 3
45173: ARRAY
45174: GREATEREQUAL
45175: AND
45176: NOT
45177: IFFALSE 45181
// exit ;
45179: GO 45768
// if GetBType ( depot ) = b_depot then
45181: LD_VAR 0 1
45185: PPUSH
45186: CALL_OW 266
45190: PUSH
45191: LD_INT 0
45193: EQUAL
45194: IFFALSE 45206
// dist := 28 else
45196: LD_ADDR_VAR 0 14
45200: PUSH
45201: LD_INT 28
45203: ST_TO_ADDR
45204: GO 45214
// dist := 36 ;
45206: LD_ADDR_VAR 0 14
45210: PUSH
45211: LD_INT 36
45213: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45214: LD_VAR 0 1
45218: PPUSH
45219: LD_VAR 0 3
45223: PPUSH
45224: LD_VAR 0 4
45228: PPUSH
45229: CALL_OW 297
45233: PUSH
45234: LD_VAR 0 14
45238: GREATER
45239: IFFALSE 45243
// exit ;
45241: GO 45768
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45243: LD_ADDR_VAR 0 12
45247: PUSH
45248: LD_VAR 0 2
45252: PPUSH
45253: LD_VAR 0 3
45257: PPUSH
45258: LD_VAR 0 4
45262: PPUSH
45263: LD_VAR 0 5
45267: PPUSH
45268: LD_VAR 0 1
45272: PPUSH
45273: CALL_OW 248
45277: PPUSH
45278: LD_INT 0
45280: PPUSH
45281: CALL 45773 0 6
45285: ST_TO_ADDR
// if not hexes then
45286: LD_VAR 0 12
45290: NOT
45291: IFFALSE 45295
// exit ;
45293: GO 45768
// hex := GetHexInfo ( x , y ) ;
45295: LD_ADDR_VAR 0 15
45299: PUSH
45300: LD_VAR 0 3
45304: PPUSH
45305: LD_VAR 0 4
45309: PPUSH
45310: CALL_OW 546
45314: ST_TO_ADDR
// if hex [ 1 ] then
45315: LD_VAR 0 15
45319: PUSH
45320: LD_INT 1
45322: ARRAY
45323: IFFALSE 45327
// exit ;
45325: GO 45768
// height := hex [ 2 ] ;
45327: LD_ADDR_VAR 0 13
45331: PUSH
45332: LD_VAR 0 15
45336: PUSH
45337: LD_INT 2
45339: ARRAY
45340: ST_TO_ADDR
// for i = 1 to hexes do
45341: LD_ADDR_VAR 0 7
45345: PUSH
45346: DOUBLE
45347: LD_INT 1
45349: DEC
45350: ST_TO_ADDR
45351: LD_VAR 0 12
45355: PUSH
45356: FOR_TO
45357: IFFALSE 45687
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45359: LD_VAR 0 12
45363: PUSH
45364: LD_VAR 0 7
45368: ARRAY
45369: PUSH
45370: LD_INT 1
45372: ARRAY
45373: PPUSH
45374: LD_VAR 0 12
45378: PUSH
45379: LD_VAR 0 7
45383: ARRAY
45384: PUSH
45385: LD_INT 2
45387: ARRAY
45388: PPUSH
45389: CALL_OW 488
45393: NOT
45394: PUSH
45395: LD_VAR 0 12
45399: PUSH
45400: LD_VAR 0 7
45404: ARRAY
45405: PUSH
45406: LD_INT 1
45408: ARRAY
45409: PPUSH
45410: LD_VAR 0 12
45414: PUSH
45415: LD_VAR 0 7
45419: ARRAY
45420: PUSH
45421: LD_INT 2
45423: ARRAY
45424: PPUSH
45425: CALL_OW 428
45429: PUSH
45430: LD_INT 0
45432: GREATER
45433: OR
45434: PUSH
45435: LD_VAR 0 12
45439: PUSH
45440: LD_VAR 0 7
45444: ARRAY
45445: PUSH
45446: LD_INT 1
45448: ARRAY
45449: PPUSH
45450: LD_VAR 0 12
45454: PUSH
45455: LD_VAR 0 7
45459: ARRAY
45460: PUSH
45461: LD_INT 2
45463: ARRAY
45464: PPUSH
45465: CALL_OW 351
45469: OR
45470: IFFALSE 45476
// exit ;
45472: POP
45473: POP
45474: GO 45768
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45476: LD_ADDR_VAR 0 8
45480: PUSH
45481: LD_VAR 0 12
45485: PUSH
45486: LD_VAR 0 7
45490: ARRAY
45491: PUSH
45492: LD_INT 1
45494: ARRAY
45495: PPUSH
45496: LD_VAR 0 12
45500: PUSH
45501: LD_VAR 0 7
45505: ARRAY
45506: PUSH
45507: LD_INT 2
45509: ARRAY
45510: PPUSH
45511: CALL_OW 546
45515: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45516: LD_VAR 0 8
45520: PUSH
45521: LD_INT 1
45523: ARRAY
45524: PUSH
45525: LD_VAR 0 8
45529: PUSH
45530: LD_INT 2
45532: ARRAY
45533: PUSH
45534: LD_VAR 0 13
45538: PUSH
45539: LD_INT 2
45541: PLUS
45542: GREATER
45543: OR
45544: PUSH
45545: LD_VAR 0 8
45549: PUSH
45550: LD_INT 2
45552: ARRAY
45553: PUSH
45554: LD_VAR 0 13
45558: PUSH
45559: LD_INT 2
45561: MINUS
45562: LESS
45563: OR
45564: PUSH
45565: LD_VAR 0 8
45569: PUSH
45570: LD_INT 3
45572: ARRAY
45573: PUSH
45574: LD_INT 0
45576: PUSH
45577: LD_INT 8
45579: PUSH
45580: LD_INT 9
45582: PUSH
45583: LD_INT 10
45585: PUSH
45586: LD_INT 11
45588: PUSH
45589: LD_INT 12
45591: PUSH
45592: LD_INT 13
45594: PUSH
45595: LD_INT 16
45597: PUSH
45598: LD_INT 17
45600: PUSH
45601: LD_INT 18
45603: PUSH
45604: LD_INT 19
45606: PUSH
45607: LD_INT 20
45609: PUSH
45610: LD_INT 21
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: IN
45628: NOT
45629: OR
45630: PUSH
45631: LD_VAR 0 8
45635: PUSH
45636: LD_INT 5
45638: ARRAY
45639: NOT
45640: OR
45641: PUSH
45642: LD_VAR 0 8
45646: PUSH
45647: LD_INT 6
45649: ARRAY
45650: PUSH
45651: LD_INT 1
45653: PUSH
45654: LD_INT 2
45656: PUSH
45657: LD_INT 7
45659: PUSH
45660: LD_INT 9
45662: PUSH
45663: LD_INT 10
45665: PUSH
45666: LD_INT 11
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: IN
45677: NOT
45678: OR
45679: IFFALSE 45685
// exit ;
45681: POP
45682: POP
45683: GO 45768
// end ;
45685: GO 45356
45687: POP
45688: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45689: LD_VAR 0 9
45693: PPUSH
45694: LD_VAR 0 3
45698: PPUSH
45699: LD_VAR 0 4
45703: PPUSH
45704: LD_INT 20
45706: PPUSH
45707: CALL 37714 0 4
45711: PUSH
45712: LD_INT 4
45714: ARRAY
45715: IFFALSE 45719
// exit ;
45717: GO 45768
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45719: LD_VAR 0 2
45723: PUSH
45724: LD_INT 29
45726: PUSH
45727: LD_INT 30
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: IN
45734: PUSH
45735: LD_VAR 0 3
45739: PPUSH
45740: LD_VAR 0 4
45744: PPUSH
45745: LD_VAR 0 9
45749: PPUSH
45750: CALL_OW 440
45754: NOT
45755: AND
45756: IFFALSE 45760
// exit ;
45758: GO 45768
// result := true ;
45760: LD_ADDR_VAR 0 6
45764: PUSH
45765: LD_INT 1
45767: ST_TO_ADDR
// end ;
45768: LD_VAR 0 6
45772: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45773: LD_INT 0
45775: PPUSH
45776: PPUSH
45777: PPUSH
45778: PPUSH
45779: PPUSH
45780: PPUSH
45781: PPUSH
45782: PPUSH
45783: PPUSH
45784: PPUSH
45785: PPUSH
45786: PPUSH
45787: PPUSH
45788: PPUSH
45789: PPUSH
45790: PPUSH
45791: PPUSH
45792: PPUSH
45793: PPUSH
45794: PPUSH
45795: PPUSH
45796: PPUSH
45797: PPUSH
45798: PPUSH
45799: PPUSH
45800: PPUSH
45801: PPUSH
45802: PPUSH
45803: PPUSH
45804: PPUSH
45805: PPUSH
45806: PPUSH
45807: PPUSH
45808: PPUSH
45809: PPUSH
45810: PPUSH
45811: PPUSH
45812: PPUSH
45813: PPUSH
45814: PPUSH
45815: PPUSH
45816: PPUSH
45817: PPUSH
45818: PPUSH
45819: PPUSH
45820: PPUSH
45821: PPUSH
45822: PPUSH
45823: PPUSH
45824: PPUSH
45825: PPUSH
45826: PPUSH
45827: PPUSH
45828: PPUSH
45829: PPUSH
45830: PPUSH
45831: PPUSH
45832: PPUSH
// result = [ ] ;
45833: LD_ADDR_VAR 0 7
45837: PUSH
45838: EMPTY
45839: ST_TO_ADDR
// temp_list = [ ] ;
45840: LD_ADDR_VAR 0 9
45844: PUSH
45845: EMPTY
45846: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45847: LD_VAR 0 4
45851: PUSH
45852: LD_INT 0
45854: PUSH
45855: LD_INT 1
45857: PUSH
45858: LD_INT 2
45860: PUSH
45861: LD_INT 3
45863: PUSH
45864: LD_INT 4
45866: PUSH
45867: LD_INT 5
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: IN
45878: NOT
45879: PUSH
45880: LD_VAR 0 1
45884: PUSH
45885: LD_INT 0
45887: PUSH
45888: LD_INT 1
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: IN
45895: PUSH
45896: LD_VAR 0 5
45900: PUSH
45901: LD_INT 1
45903: PUSH
45904: LD_INT 2
45906: PUSH
45907: LD_INT 3
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: LIST
45914: IN
45915: NOT
45916: AND
45917: OR
45918: IFFALSE 45922
// exit ;
45920: GO 64313
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45922: LD_VAR 0 1
45926: PUSH
45927: LD_INT 6
45929: PUSH
45930: LD_INT 7
45932: PUSH
45933: LD_INT 8
45935: PUSH
45936: LD_INT 13
45938: PUSH
45939: LD_INT 12
45941: PUSH
45942: LD_INT 15
45944: PUSH
45945: LD_INT 11
45947: PUSH
45948: LD_INT 14
45950: PUSH
45951: LD_INT 10
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: IN
45965: IFFALSE 45975
// btype = b_lab ;
45967: LD_ADDR_VAR 0 1
45971: PUSH
45972: LD_INT 6
45974: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45975: LD_VAR 0 6
45979: PUSH
45980: LD_INT 0
45982: PUSH
45983: LD_INT 1
45985: PUSH
45986: LD_INT 2
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: LIST
45993: IN
45994: NOT
45995: PUSH
45996: LD_VAR 0 1
46000: PUSH
46001: LD_INT 0
46003: PUSH
46004: LD_INT 1
46006: PUSH
46007: LD_INT 2
46009: PUSH
46010: LD_INT 3
46012: PUSH
46013: LD_INT 6
46015: PUSH
46016: LD_INT 36
46018: PUSH
46019: LD_INT 4
46021: PUSH
46022: LD_INT 5
46024: PUSH
46025: LD_INT 31
46027: PUSH
46028: LD_INT 32
46030: PUSH
46031: LD_INT 33
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: IN
46047: NOT
46048: PUSH
46049: LD_VAR 0 6
46053: PUSH
46054: LD_INT 1
46056: EQUAL
46057: AND
46058: OR
46059: PUSH
46060: LD_VAR 0 1
46064: PUSH
46065: LD_INT 2
46067: PUSH
46068: LD_INT 3
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: IN
46075: NOT
46076: PUSH
46077: LD_VAR 0 6
46081: PUSH
46082: LD_INT 2
46084: EQUAL
46085: AND
46086: OR
46087: IFFALSE 46097
// mode = 0 ;
46089: LD_ADDR_VAR 0 6
46093: PUSH
46094: LD_INT 0
46096: ST_TO_ADDR
// case mode of 0 :
46097: LD_VAR 0 6
46101: PUSH
46102: LD_INT 0
46104: DOUBLE
46105: EQUAL
46106: IFTRUE 46110
46108: GO 57563
46110: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46111: LD_ADDR_VAR 0 11
46115: PUSH
46116: LD_INT 0
46118: PUSH
46119: LD_INT 0
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 0
46128: PUSH
46129: LD_INT 1
46131: NEG
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 1
46139: PUSH
46140: LD_INT 0
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 1
46149: PUSH
46150: LD_INT 1
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 0
46159: PUSH
46160: LD_INT 1
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 1
46169: NEG
46170: PUSH
46171: LD_INT 0
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 1
46180: NEG
46181: PUSH
46182: LD_INT 1
46184: NEG
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 1
46192: NEG
46193: PUSH
46194: LD_INT 2
46196: NEG
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 0
46204: PUSH
46205: LD_INT 2
46207: NEG
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 1
46215: PUSH
46216: LD_INT 1
46218: NEG
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 1
46226: PUSH
46227: LD_INT 2
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 0
46236: PUSH
46237: LD_INT 2
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 1
46246: NEG
46247: PUSH
46248: LD_INT 1
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 1
46257: PUSH
46258: LD_INT 3
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 0
46267: PUSH
46268: LD_INT 3
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 1
46277: NEG
46278: PUSH
46279: LD_INT 2
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46304: LD_ADDR_VAR 0 12
46308: PUSH
46309: LD_INT 0
46311: PUSH
46312: LD_INT 0
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 0
46321: PUSH
46322: LD_INT 1
46324: NEG
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 1
46332: PUSH
46333: LD_INT 0
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 1
46342: PUSH
46343: LD_INT 1
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 0
46352: PUSH
46353: LD_INT 1
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 1
46362: NEG
46363: PUSH
46364: LD_INT 0
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 1
46373: NEG
46374: PUSH
46375: LD_INT 1
46377: NEG
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 1
46385: PUSH
46386: LD_INT 1
46388: NEG
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 2
46396: PUSH
46397: LD_INT 0
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 2
46406: PUSH
46407: LD_INT 1
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 1
46416: NEG
46417: PUSH
46418: LD_INT 1
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 2
46427: NEG
46428: PUSH
46429: LD_INT 0
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 2
46438: NEG
46439: PUSH
46440: LD_INT 1
46442: NEG
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 2
46450: NEG
46451: PUSH
46452: LD_INT 1
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 3
46461: NEG
46462: PUSH
46463: LD_INT 0
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 3
46472: NEG
46473: PUSH
46474: LD_INT 1
46476: NEG
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46500: LD_ADDR_VAR 0 13
46504: PUSH
46505: LD_INT 0
46507: PUSH
46508: LD_INT 0
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 0
46517: PUSH
46518: LD_INT 1
46520: NEG
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 1
46528: PUSH
46529: LD_INT 0
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 1
46538: PUSH
46539: LD_INT 1
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 0
46548: PUSH
46549: LD_INT 1
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 1
46558: NEG
46559: PUSH
46560: LD_INT 0
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 1
46569: NEG
46570: PUSH
46571: LD_INT 1
46573: NEG
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 1
46581: NEG
46582: PUSH
46583: LD_INT 2
46585: NEG
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 2
46593: PUSH
46594: LD_INT 1
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 2
46603: PUSH
46604: LD_INT 2
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 1
46613: PUSH
46614: LD_INT 2
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 2
46623: NEG
46624: PUSH
46625: LD_INT 1
46627: NEG
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 2
46635: NEG
46636: PUSH
46637: LD_INT 2
46639: NEG
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 2
46647: NEG
46648: PUSH
46649: LD_INT 3
46651: NEG
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 3
46659: NEG
46660: PUSH
46661: LD_INT 2
46663: NEG
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 3
46671: NEG
46672: PUSH
46673: LD_INT 3
46675: NEG
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46699: LD_ADDR_VAR 0 14
46703: PUSH
46704: LD_INT 0
46706: PUSH
46707: LD_INT 0
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 0
46716: PUSH
46717: LD_INT 1
46719: NEG
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 1
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 1
46737: PUSH
46738: LD_INT 1
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 0
46747: PUSH
46748: LD_INT 1
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 1
46757: NEG
46758: PUSH
46759: LD_INT 0
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 1
46768: NEG
46769: PUSH
46770: LD_INT 1
46772: NEG
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 1
46780: NEG
46781: PUSH
46782: LD_INT 2
46784: NEG
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 0
46792: PUSH
46793: LD_INT 2
46795: NEG
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 1
46803: PUSH
46804: LD_INT 1
46806: NEG
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 1
46814: PUSH
46815: LD_INT 2
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 0
46824: PUSH
46825: LD_INT 2
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 1
46834: NEG
46835: PUSH
46836: LD_INT 1
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 1
46845: NEG
46846: PUSH
46847: LD_INT 3
46849: NEG
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 0
46857: PUSH
46858: LD_INT 3
46860: NEG
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 1
46868: PUSH
46869: LD_INT 2
46871: NEG
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46895: LD_ADDR_VAR 0 15
46899: PUSH
46900: LD_INT 0
46902: PUSH
46903: LD_INT 0
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 0
46912: PUSH
46913: LD_INT 1
46915: NEG
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 1
46923: PUSH
46924: LD_INT 0
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 1
46933: PUSH
46934: LD_INT 1
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 0
46943: PUSH
46944: LD_INT 1
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 1
46953: NEG
46954: PUSH
46955: LD_INT 0
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 1
46964: NEG
46965: PUSH
46966: LD_INT 1
46968: NEG
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 1
46976: PUSH
46977: LD_INT 1
46979: NEG
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 2
46987: PUSH
46988: LD_INT 0
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 2
46997: PUSH
46998: LD_INT 1
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 1
47007: NEG
47008: PUSH
47009: LD_INT 1
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 2
47018: NEG
47019: PUSH
47020: LD_INT 0
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 2
47029: NEG
47030: PUSH
47031: LD_INT 1
47033: NEG
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 2
47041: PUSH
47042: LD_INT 1
47044: NEG
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 3
47052: PUSH
47053: LD_INT 0
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 3
47062: PUSH
47063: LD_INT 1
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47088: LD_ADDR_VAR 0 16
47092: PUSH
47093: LD_INT 0
47095: PUSH
47096: LD_INT 0
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 0
47105: PUSH
47106: LD_INT 1
47108: NEG
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 1
47116: PUSH
47117: LD_INT 0
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 1
47126: PUSH
47127: LD_INT 1
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 0
47136: PUSH
47137: LD_INT 1
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 1
47146: NEG
47147: PUSH
47148: LD_INT 0
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 1
47157: NEG
47158: PUSH
47159: LD_INT 1
47161: NEG
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 1
47169: NEG
47170: PUSH
47171: LD_INT 2
47173: NEG
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 2
47181: PUSH
47182: LD_INT 1
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 2
47191: PUSH
47192: LD_INT 2
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 1
47201: PUSH
47202: LD_INT 2
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 2
47211: NEG
47212: PUSH
47213: LD_INT 1
47215: NEG
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 2
47223: NEG
47224: PUSH
47225: LD_INT 2
47227: NEG
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 3
47235: PUSH
47236: LD_INT 2
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 3
47245: PUSH
47246: LD_INT 3
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 2
47255: PUSH
47256: LD_INT 3
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47281: LD_ADDR_VAR 0 17
47285: PUSH
47286: LD_INT 0
47288: PUSH
47289: LD_INT 0
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 0
47298: PUSH
47299: LD_INT 1
47301: NEG
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 1
47309: PUSH
47310: LD_INT 0
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 1
47319: PUSH
47320: LD_INT 1
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 0
47329: PUSH
47330: LD_INT 1
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 1
47339: NEG
47340: PUSH
47341: LD_INT 0
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 1
47350: NEG
47351: PUSH
47352: LD_INT 1
47354: NEG
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 1
47362: NEG
47363: PUSH
47364: LD_INT 2
47366: NEG
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 0
47374: PUSH
47375: LD_INT 2
47377: NEG
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 1
47385: PUSH
47386: LD_INT 1
47388: NEG
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 2
47396: PUSH
47397: LD_INT 0
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 2
47406: PUSH
47407: LD_INT 1
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 2
47416: PUSH
47417: LD_INT 2
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 1
47426: PUSH
47427: LD_INT 2
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 0
47436: PUSH
47437: LD_INT 2
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 1
47446: NEG
47447: PUSH
47448: LD_INT 1
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 2
47457: NEG
47458: PUSH
47459: LD_INT 0
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 2
47468: NEG
47469: PUSH
47470: LD_INT 1
47472: NEG
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 2
47480: NEG
47481: PUSH
47482: LD_INT 2
47484: NEG
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47511: LD_ADDR_VAR 0 18
47515: PUSH
47516: LD_INT 0
47518: PUSH
47519: LD_INT 0
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 0
47528: PUSH
47529: LD_INT 1
47531: NEG
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 1
47539: PUSH
47540: LD_INT 0
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 1
47549: PUSH
47550: LD_INT 1
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 0
47559: PUSH
47560: LD_INT 1
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 1
47569: NEG
47570: PUSH
47571: LD_INT 0
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 1
47580: NEG
47581: PUSH
47582: LD_INT 1
47584: NEG
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 1
47592: NEG
47593: PUSH
47594: LD_INT 2
47596: NEG
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 0
47604: PUSH
47605: LD_INT 2
47607: NEG
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 1
47615: PUSH
47616: LD_INT 1
47618: NEG
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 2
47626: PUSH
47627: LD_INT 0
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 2
47636: PUSH
47637: LD_INT 1
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 2
47646: PUSH
47647: LD_INT 2
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 1
47656: PUSH
47657: LD_INT 2
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 0
47666: PUSH
47667: LD_INT 2
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 1
47676: NEG
47677: PUSH
47678: LD_INT 1
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 2
47687: NEG
47688: PUSH
47689: LD_INT 0
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 2
47698: NEG
47699: PUSH
47700: LD_INT 1
47702: NEG
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 2
47710: NEG
47711: PUSH
47712: LD_INT 2
47714: NEG
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47741: LD_ADDR_VAR 0 19
47745: PUSH
47746: LD_INT 0
47748: PUSH
47749: LD_INT 0
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 0
47758: PUSH
47759: LD_INT 1
47761: NEG
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 1
47769: PUSH
47770: LD_INT 0
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 1
47779: PUSH
47780: LD_INT 1
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 0
47789: PUSH
47790: LD_INT 1
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 1
47799: NEG
47800: PUSH
47801: LD_INT 0
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 1
47810: NEG
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 1
47822: NEG
47823: PUSH
47824: LD_INT 2
47826: NEG
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 0
47834: PUSH
47835: LD_INT 2
47837: NEG
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 1
47845: PUSH
47846: LD_INT 1
47848: NEG
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 2
47856: PUSH
47857: LD_INT 0
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 2
47866: PUSH
47867: LD_INT 1
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 2
47876: PUSH
47877: LD_INT 2
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 1
47886: PUSH
47887: LD_INT 2
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 0
47896: PUSH
47897: LD_INT 2
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 1
47906: NEG
47907: PUSH
47908: LD_INT 1
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 2
47917: NEG
47918: PUSH
47919: LD_INT 0
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 2
47928: NEG
47929: PUSH
47930: LD_INT 1
47932: NEG
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 2
47940: NEG
47941: PUSH
47942: LD_INT 2
47944: NEG
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47971: LD_ADDR_VAR 0 20
47975: PUSH
47976: LD_INT 0
47978: PUSH
47979: LD_INT 0
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 0
47988: PUSH
47989: LD_INT 1
47991: NEG
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 1
47999: PUSH
48000: LD_INT 0
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 1
48009: PUSH
48010: LD_INT 1
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 0
48019: PUSH
48020: LD_INT 1
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 1
48029: NEG
48030: PUSH
48031: LD_INT 0
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 1
48040: NEG
48041: PUSH
48042: LD_INT 1
48044: NEG
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 1
48052: NEG
48053: PUSH
48054: LD_INT 2
48056: NEG
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 0
48064: PUSH
48065: LD_INT 2
48067: NEG
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 1
48075: PUSH
48076: LD_INT 1
48078: NEG
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 2
48086: PUSH
48087: LD_INT 0
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 2
48096: PUSH
48097: LD_INT 1
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 2
48106: PUSH
48107: LD_INT 2
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 1
48116: PUSH
48117: LD_INT 2
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 0
48126: PUSH
48127: LD_INT 2
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 1
48136: NEG
48137: PUSH
48138: LD_INT 1
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 2
48147: NEG
48148: PUSH
48149: LD_INT 0
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 2
48158: NEG
48159: PUSH
48160: LD_INT 1
48162: NEG
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 2
48170: NEG
48171: PUSH
48172: LD_INT 2
48174: NEG
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48201: LD_ADDR_VAR 0 21
48205: PUSH
48206: LD_INT 0
48208: PUSH
48209: LD_INT 0
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 0
48218: PUSH
48219: LD_INT 1
48221: NEG
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 1
48229: PUSH
48230: LD_INT 0
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 1
48239: PUSH
48240: LD_INT 1
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 0
48249: PUSH
48250: LD_INT 1
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 1
48259: NEG
48260: PUSH
48261: LD_INT 0
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 1
48270: NEG
48271: PUSH
48272: LD_INT 1
48274: NEG
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 1
48282: NEG
48283: PUSH
48284: LD_INT 2
48286: NEG
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 0
48294: PUSH
48295: LD_INT 2
48297: NEG
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 1
48305: PUSH
48306: LD_INT 1
48308: NEG
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 2
48316: PUSH
48317: LD_INT 0
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 2
48326: PUSH
48327: LD_INT 1
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 2
48336: PUSH
48337: LD_INT 2
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 1
48346: PUSH
48347: LD_INT 2
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 0
48356: PUSH
48357: LD_INT 2
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 1
48366: NEG
48367: PUSH
48368: LD_INT 1
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 2
48377: NEG
48378: PUSH
48379: LD_INT 0
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 2
48388: NEG
48389: PUSH
48390: LD_INT 1
48392: NEG
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 2
48400: NEG
48401: PUSH
48402: LD_INT 2
48404: NEG
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48431: LD_ADDR_VAR 0 22
48435: PUSH
48436: LD_INT 0
48438: PUSH
48439: LD_INT 0
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 0
48448: PUSH
48449: LD_INT 1
48451: NEG
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 1
48459: PUSH
48460: LD_INT 0
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 1
48469: PUSH
48470: LD_INT 1
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 0
48479: PUSH
48480: LD_INT 1
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 1
48489: NEG
48490: PUSH
48491: LD_INT 0
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 1
48500: NEG
48501: PUSH
48502: LD_INT 1
48504: NEG
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 1
48512: NEG
48513: PUSH
48514: LD_INT 2
48516: NEG
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 0
48524: PUSH
48525: LD_INT 2
48527: NEG
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 1
48535: PUSH
48536: LD_INT 1
48538: NEG
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 2
48546: PUSH
48547: LD_INT 0
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 2
48556: PUSH
48557: LD_INT 1
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 2
48566: PUSH
48567: LD_INT 2
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 1
48576: PUSH
48577: LD_INT 2
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 0
48586: PUSH
48587: LD_INT 2
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 1
48596: NEG
48597: PUSH
48598: LD_INT 1
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 2
48607: NEG
48608: PUSH
48609: LD_INT 0
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 2
48618: NEG
48619: PUSH
48620: LD_INT 1
48622: NEG
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 2
48630: NEG
48631: PUSH
48632: LD_INT 2
48634: NEG
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48661: LD_ADDR_VAR 0 23
48665: PUSH
48666: LD_INT 0
48668: PUSH
48669: LD_INT 0
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 0
48678: PUSH
48679: LD_INT 1
48681: NEG
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 1
48689: PUSH
48690: LD_INT 0
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 1
48699: PUSH
48700: LD_INT 1
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 0
48709: PUSH
48710: LD_INT 1
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 1
48719: NEG
48720: PUSH
48721: LD_INT 0
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 1
48730: NEG
48731: PUSH
48732: LD_INT 1
48734: NEG
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 1
48742: NEG
48743: PUSH
48744: LD_INT 2
48746: NEG
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 0
48754: PUSH
48755: LD_INT 2
48757: NEG
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 1
48765: PUSH
48766: LD_INT 1
48768: NEG
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 2
48776: PUSH
48777: LD_INT 0
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 2
48786: PUSH
48787: LD_INT 1
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 2
48796: PUSH
48797: LD_INT 2
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 1
48806: PUSH
48807: LD_INT 2
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 0
48816: PUSH
48817: LD_INT 2
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 1
48826: NEG
48827: PUSH
48828: LD_INT 1
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 2
48837: NEG
48838: PUSH
48839: LD_INT 0
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 2
48848: NEG
48849: PUSH
48850: LD_INT 1
48852: NEG
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: LD_INT 2
48860: NEG
48861: PUSH
48862: LD_INT 2
48864: NEG
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 2
48872: NEG
48873: PUSH
48874: LD_INT 3
48876: NEG
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 1
48884: NEG
48885: PUSH
48886: LD_INT 3
48888: NEG
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 1
48896: PUSH
48897: LD_INT 2
48899: NEG
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 2
48907: PUSH
48908: LD_INT 1
48910: NEG
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48941: LD_ADDR_VAR 0 24
48945: PUSH
48946: LD_INT 0
48948: PUSH
48949: LD_INT 0
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 0
48958: PUSH
48959: LD_INT 1
48961: NEG
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 1
48969: PUSH
48970: LD_INT 0
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 1
48979: PUSH
48980: LD_INT 1
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 0
48989: PUSH
48990: LD_INT 1
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 1
48999: NEG
49000: PUSH
49001: LD_INT 0
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 1
49010: NEG
49011: PUSH
49012: LD_INT 1
49014: NEG
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 1
49022: NEG
49023: PUSH
49024: LD_INT 2
49026: NEG
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 0
49034: PUSH
49035: LD_INT 2
49037: NEG
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 1
49045: PUSH
49046: LD_INT 1
49048: NEG
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 2
49056: PUSH
49057: LD_INT 0
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 2
49066: PUSH
49067: LD_INT 1
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 2
49076: PUSH
49077: LD_INT 2
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 1
49086: PUSH
49087: LD_INT 2
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 0
49096: PUSH
49097: LD_INT 2
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 1
49106: NEG
49107: PUSH
49108: LD_INT 1
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 2
49117: NEG
49118: PUSH
49119: LD_INT 0
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 2
49128: NEG
49129: PUSH
49130: LD_INT 1
49132: NEG
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 2
49140: NEG
49141: PUSH
49142: LD_INT 2
49144: NEG
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 1
49152: PUSH
49153: LD_INT 2
49155: NEG
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 2
49163: PUSH
49164: LD_INT 1
49166: NEG
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 3
49174: PUSH
49175: LD_INT 1
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 3
49184: PUSH
49185: LD_INT 2
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49217: LD_ADDR_VAR 0 25
49221: PUSH
49222: LD_INT 0
49224: PUSH
49225: LD_INT 0
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 0
49234: PUSH
49235: LD_INT 1
49237: NEG
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 1
49245: PUSH
49246: LD_INT 0
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 1
49255: PUSH
49256: LD_INT 1
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 0
49265: PUSH
49266: LD_INT 1
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 1
49275: NEG
49276: PUSH
49277: LD_INT 0
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 1
49286: NEG
49287: PUSH
49288: LD_INT 1
49290: NEG
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 1
49298: NEG
49299: PUSH
49300: LD_INT 2
49302: NEG
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 0
49310: PUSH
49311: LD_INT 2
49313: NEG
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 1
49321: PUSH
49322: LD_INT 1
49324: NEG
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 2
49332: PUSH
49333: LD_INT 0
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 2
49342: PUSH
49343: LD_INT 1
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 2
49352: PUSH
49353: LD_INT 2
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 1
49362: PUSH
49363: LD_INT 2
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 0
49372: PUSH
49373: LD_INT 2
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 1
49382: NEG
49383: PUSH
49384: LD_INT 1
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 2
49393: NEG
49394: PUSH
49395: LD_INT 0
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 2
49404: NEG
49405: PUSH
49406: LD_INT 1
49408: NEG
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 2
49416: NEG
49417: PUSH
49418: LD_INT 2
49420: NEG
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 3
49428: PUSH
49429: LD_INT 1
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 3
49438: PUSH
49439: LD_INT 2
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 2
49448: PUSH
49449: LD_INT 3
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 1
49458: PUSH
49459: LD_INT 3
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49491: LD_ADDR_VAR 0 26
49495: PUSH
49496: LD_INT 0
49498: PUSH
49499: LD_INT 0
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 0
49508: PUSH
49509: LD_INT 1
49511: NEG
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 1
49519: PUSH
49520: LD_INT 0
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 1
49529: PUSH
49530: LD_INT 1
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 0
49539: PUSH
49540: LD_INT 1
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 1
49549: NEG
49550: PUSH
49551: LD_INT 0
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 1
49560: NEG
49561: PUSH
49562: LD_INT 1
49564: NEG
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 1
49572: NEG
49573: PUSH
49574: LD_INT 2
49576: NEG
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 0
49584: PUSH
49585: LD_INT 2
49587: NEG
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 1
49595: PUSH
49596: LD_INT 1
49598: NEG
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 2
49606: PUSH
49607: LD_INT 0
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 2
49616: PUSH
49617: LD_INT 1
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 2
49626: PUSH
49627: LD_INT 2
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 1
49636: PUSH
49637: LD_INT 2
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 0
49646: PUSH
49647: LD_INT 2
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 1
49656: NEG
49657: PUSH
49658: LD_INT 1
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 2
49667: NEG
49668: PUSH
49669: LD_INT 0
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 2
49678: NEG
49679: PUSH
49680: LD_INT 1
49682: NEG
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 2
49690: NEG
49691: PUSH
49692: LD_INT 2
49694: NEG
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 2
49702: PUSH
49703: LD_INT 3
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 1
49712: PUSH
49713: LD_INT 3
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 1
49722: NEG
49723: PUSH
49724: LD_INT 2
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 2
49733: NEG
49734: PUSH
49735: LD_INT 1
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49767: LD_ADDR_VAR 0 27
49771: PUSH
49772: LD_INT 0
49774: PUSH
49775: LD_INT 0
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 0
49784: PUSH
49785: LD_INT 1
49787: NEG
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 1
49795: PUSH
49796: LD_INT 0
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 1
49805: PUSH
49806: LD_INT 1
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 0
49815: PUSH
49816: LD_INT 1
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 1
49825: NEG
49826: PUSH
49827: LD_INT 0
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 1
49836: NEG
49837: PUSH
49838: LD_INT 1
49840: NEG
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 1
49848: NEG
49849: PUSH
49850: LD_INT 2
49852: NEG
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 0
49860: PUSH
49861: LD_INT 2
49863: NEG
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 1
49871: PUSH
49872: LD_INT 1
49874: NEG
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 2
49882: PUSH
49883: LD_INT 0
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 2
49892: PUSH
49893: LD_INT 1
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 2
49902: PUSH
49903: LD_INT 2
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 1
49912: PUSH
49913: LD_INT 2
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 0
49922: PUSH
49923: LD_INT 2
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 1
49932: NEG
49933: PUSH
49934: LD_INT 1
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 2
49943: NEG
49944: PUSH
49945: LD_INT 0
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 2
49954: NEG
49955: PUSH
49956: LD_INT 1
49958: NEG
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 2
49966: NEG
49967: PUSH
49968: LD_INT 2
49970: NEG
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 1
49978: NEG
49979: PUSH
49980: LD_INT 2
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 2
49989: NEG
49990: PUSH
49991: LD_INT 1
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 3
50000: NEG
50001: PUSH
50002: LD_INT 1
50004: NEG
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 3
50012: NEG
50013: PUSH
50014: LD_INT 2
50016: NEG
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50047: LD_ADDR_VAR 0 28
50051: PUSH
50052: LD_INT 0
50054: PUSH
50055: LD_INT 0
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 0
50064: PUSH
50065: LD_INT 1
50067: NEG
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 1
50075: PUSH
50076: LD_INT 0
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 1
50085: PUSH
50086: LD_INT 1
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 0
50095: PUSH
50096: LD_INT 1
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 1
50105: NEG
50106: PUSH
50107: LD_INT 0
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 1
50116: NEG
50117: PUSH
50118: LD_INT 1
50120: NEG
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 1
50128: NEG
50129: PUSH
50130: LD_INT 2
50132: NEG
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 0
50140: PUSH
50141: LD_INT 2
50143: NEG
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 1
50151: PUSH
50152: LD_INT 1
50154: NEG
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 2
50162: PUSH
50163: LD_INT 0
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 2
50172: PUSH
50173: LD_INT 1
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 2
50182: PUSH
50183: LD_INT 2
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 1
50192: PUSH
50193: LD_INT 2
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 0
50202: PUSH
50203: LD_INT 2
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 1
50212: NEG
50213: PUSH
50214: LD_INT 1
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 2
50223: NEG
50224: PUSH
50225: LD_INT 0
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 2
50234: NEG
50235: PUSH
50236: LD_INT 1
50238: NEG
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 2
50246: NEG
50247: PUSH
50248: LD_INT 2
50250: NEG
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 2
50258: NEG
50259: PUSH
50260: LD_INT 3
50262: NEG
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 1
50270: NEG
50271: PUSH
50272: LD_INT 3
50274: NEG
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 3
50282: NEG
50283: PUSH
50284: LD_INT 1
50286: NEG
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 3
50294: NEG
50295: PUSH
50296: LD_INT 2
50298: NEG
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50329: LD_ADDR_VAR 0 29
50333: PUSH
50334: LD_INT 0
50336: PUSH
50337: LD_INT 0
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 0
50346: PUSH
50347: LD_INT 1
50349: NEG
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 1
50357: PUSH
50358: LD_INT 0
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 1
50367: PUSH
50368: LD_INT 1
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 0
50377: PUSH
50378: LD_INT 1
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 1
50387: NEG
50388: PUSH
50389: LD_INT 0
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 1
50398: NEG
50399: PUSH
50400: LD_INT 1
50402: NEG
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 1
50410: NEG
50411: PUSH
50412: LD_INT 2
50414: NEG
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 0
50422: PUSH
50423: LD_INT 2
50425: NEG
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 1
50433: PUSH
50434: LD_INT 1
50436: NEG
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 2
50444: PUSH
50445: LD_INT 0
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 2
50454: PUSH
50455: LD_INT 1
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 1
50464: PUSH
50465: LD_INT 2
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 0
50474: PUSH
50475: LD_INT 2
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 1
50484: NEG
50485: PUSH
50486: LD_INT 1
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 2
50495: NEG
50496: PUSH
50497: LD_INT 1
50499: NEG
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 2
50507: NEG
50508: PUSH
50509: LD_INT 2
50511: NEG
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 2
50519: NEG
50520: PUSH
50521: LD_INT 3
50523: NEG
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 2
50531: PUSH
50532: LD_INT 1
50534: NEG
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 3
50542: PUSH
50543: LD_INT 1
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 1
50552: PUSH
50553: LD_INT 3
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 1
50562: NEG
50563: PUSH
50564: LD_INT 2
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 3
50573: NEG
50574: PUSH
50575: LD_INT 2
50577: NEG
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50608: LD_ADDR_VAR 0 30
50612: PUSH
50613: LD_INT 0
50615: PUSH
50616: LD_INT 0
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 0
50625: PUSH
50626: LD_INT 1
50628: NEG
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 1
50636: PUSH
50637: LD_INT 0
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 1
50646: PUSH
50647: LD_INT 1
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 0
50656: PUSH
50657: LD_INT 1
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 1
50666: NEG
50667: PUSH
50668: LD_INT 0
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 1
50677: NEG
50678: PUSH
50679: LD_INT 1
50681: NEG
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 1
50689: NEG
50690: PUSH
50691: LD_INT 2
50693: NEG
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 0
50701: PUSH
50702: LD_INT 2
50704: NEG
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 1
50712: PUSH
50713: LD_INT 1
50715: NEG
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 2
50723: PUSH
50724: LD_INT 0
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 2
50733: PUSH
50734: LD_INT 1
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 2
50743: PUSH
50744: LD_INT 2
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 1
50753: PUSH
50754: LD_INT 2
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 1
50763: NEG
50764: PUSH
50765: LD_INT 1
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 2
50774: NEG
50775: PUSH
50776: LD_INT 0
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 2
50785: NEG
50786: PUSH
50787: LD_INT 1
50789: NEG
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 1
50797: NEG
50798: PUSH
50799: LD_INT 3
50801: NEG
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 1
50809: PUSH
50810: LD_INT 2
50812: NEG
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 3
50820: PUSH
50821: LD_INT 2
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 2
50830: PUSH
50831: LD_INT 3
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 2
50840: NEG
50841: PUSH
50842: LD_INT 1
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 3
50851: NEG
50852: PUSH
50853: LD_INT 1
50855: NEG
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50886: LD_ADDR_VAR 0 31
50890: PUSH
50891: LD_INT 0
50893: PUSH
50894: LD_INT 0
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 0
50903: PUSH
50904: LD_INT 1
50906: NEG
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 1
50914: PUSH
50915: LD_INT 0
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 1
50924: PUSH
50925: LD_INT 1
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 0
50934: PUSH
50935: LD_INT 1
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 1
50944: NEG
50945: PUSH
50946: LD_INT 0
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 1
50955: NEG
50956: PUSH
50957: LD_INT 1
50959: NEG
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 1
50967: NEG
50968: PUSH
50969: LD_INT 2
50971: NEG
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 1
50979: PUSH
50980: LD_INT 1
50982: NEG
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 2
50990: PUSH
50991: LD_INT 0
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 2
51000: PUSH
51001: LD_INT 1
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 2
51010: PUSH
51011: LD_INT 2
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 1
51020: PUSH
51021: LD_INT 2
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 0
51030: PUSH
51031: LD_INT 2
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 1
51040: NEG
51041: PUSH
51042: LD_INT 1
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 2
51051: NEG
51052: PUSH
51053: LD_INT 1
51055: NEG
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 2
51063: NEG
51064: PUSH
51065: LD_INT 2
51067: NEG
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 2
51075: NEG
51076: PUSH
51077: LD_INT 3
51079: NEG
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 2
51087: PUSH
51088: LD_INT 1
51090: NEG
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 3
51098: PUSH
51099: LD_INT 1
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 1
51108: PUSH
51109: LD_INT 3
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 1
51118: NEG
51119: PUSH
51120: LD_INT 2
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 3
51129: NEG
51130: PUSH
51131: LD_INT 2
51133: NEG
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51164: LD_ADDR_VAR 0 32
51168: PUSH
51169: LD_INT 0
51171: PUSH
51172: LD_INT 0
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 0
51181: PUSH
51182: LD_INT 1
51184: NEG
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 1
51192: PUSH
51193: LD_INT 0
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 1
51202: PUSH
51203: LD_INT 1
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 0
51212: PUSH
51213: LD_INT 1
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 1
51222: NEG
51223: PUSH
51224: LD_INT 0
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 1
51233: NEG
51234: PUSH
51235: LD_INT 1
51237: NEG
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 1
51245: NEG
51246: PUSH
51247: LD_INT 2
51249: NEG
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 0
51257: PUSH
51258: LD_INT 2
51260: NEG
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 1
51268: PUSH
51269: LD_INT 1
51271: NEG
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 2
51279: PUSH
51280: LD_INT 1
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 2
51289: PUSH
51290: LD_INT 2
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 1
51299: PUSH
51300: LD_INT 2
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 0
51309: PUSH
51310: LD_INT 2
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 1
51319: NEG
51320: PUSH
51321: LD_INT 1
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 2
51330: NEG
51331: PUSH
51332: LD_INT 0
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 2
51341: NEG
51342: PUSH
51343: LD_INT 1
51345: NEG
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 1
51353: NEG
51354: PUSH
51355: LD_INT 3
51357: NEG
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 1
51365: PUSH
51366: LD_INT 2
51368: NEG
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 3
51376: PUSH
51377: LD_INT 2
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 2
51386: PUSH
51387: LD_INT 3
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 2
51396: NEG
51397: PUSH
51398: LD_INT 1
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 3
51407: NEG
51408: PUSH
51409: LD_INT 1
51411: NEG
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51442: LD_ADDR_VAR 0 33
51446: PUSH
51447: LD_INT 0
51449: PUSH
51450: LD_INT 0
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 0
51459: PUSH
51460: LD_INT 1
51462: NEG
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 1
51470: PUSH
51471: LD_INT 0
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 1
51480: PUSH
51481: LD_INT 1
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 0
51490: PUSH
51491: LD_INT 1
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 1
51500: NEG
51501: PUSH
51502: LD_INT 0
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 1
51511: NEG
51512: PUSH
51513: LD_INT 1
51515: NEG
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 1
51523: NEG
51524: PUSH
51525: LD_INT 2
51527: NEG
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 1
51535: PUSH
51536: LD_INT 1
51538: NEG
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 2
51546: PUSH
51547: LD_INT 0
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 2
51556: PUSH
51557: LD_INT 1
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 1
51566: PUSH
51567: LD_INT 2
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 0
51576: PUSH
51577: LD_INT 2
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 1
51586: NEG
51587: PUSH
51588: LD_INT 1
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 2
51597: NEG
51598: PUSH
51599: LD_INT 0
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 2
51608: NEG
51609: PUSH
51610: LD_INT 1
51612: NEG
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 2
51620: NEG
51621: PUSH
51622: LD_INT 2
51624: NEG
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 2
51632: NEG
51633: PUSH
51634: LD_INT 3
51636: NEG
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 2
51644: PUSH
51645: LD_INT 1
51647: NEG
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 3
51655: PUSH
51656: LD_INT 1
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 1
51665: PUSH
51666: LD_INT 3
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 1
51675: NEG
51676: PUSH
51677: LD_INT 2
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 3
51686: NEG
51687: PUSH
51688: LD_INT 2
51690: NEG
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51721: LD_ADDR_VAR 0 34
51725: PUSH
51726: LD_INT 0
51728: PUSH
51729: LD_INT 0
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 0
51738: PUSH
51739: LD_INT 1
51741: NEG
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 1
51749: PUSH
51750: LD_INT 0
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 1
51759: PUSH
51760: LD_INT 1
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 0
51769: PUSH
51770: LD_INT 1
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 1
51779: NEG
51780: PUSH
51781: LD_INT 0
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 1
51790: NEG
51791: PUSH
51792: LD_INT 1
51794: NEG
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 1
51802: NEG
51803: PUSH
51804: LD_INT 2
51806: NEG
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 0
51814: PUSH
51815: LD_INT 2
51817: NEG
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 1
51825: PUSH
51826: LD_INT 1
51828: NEG
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 2
51836: PUSH
51837: LD_INT 1
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 2
51846: PUSH
51847: LD_INT 2
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 1
51856: PUSH
51857: LD_INT 2
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 1
51866: NEG
51867: PUSH
51868: LD_INT 1
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 2
51877: NEG
51878: PUSH
51879: LD_INT 0
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 2
51888: NEG
51889: PUSH
51890: LD_INT 1
51892: NEG
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 2
51900: NEG
51901: PUSH
51902: LD_INT 2
51904: NEG
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 1
51912: NEG
51913: PUSH
51914: LD_INT 3
51916: NEG
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 1
51924: PUSH
51925: LD_INT 2
51927: NEG
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 3
51935: PUSH
51936: LD_INT 2
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 2
51945: PUSH
51946: LD_INT 3
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 2
51955: NEG
51956: PUSH
51957: LD_INT 1
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 3
51966: NEG
51967: PUSH
51968: LD_INT 1
51970: NEG
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52001: LD_ADDR_VAR 0 35
52005: PUSH
52006: LD_INT 0
52008: PUSH
52009: LD_INT 0
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 0
52018: PUSH
52019: LD_INT 1
52021: NEG
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 1
52029: PUSH
52030: LD_INT 0
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 1
52039: PUSH
52040: LD_INT 1
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 0
52049: PUSH
52050: LD_INT 1
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 1
52059: NEG
52060: PUSH
52061: LD_INT 0
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 1
52070: NEG
52071: PUSH
52072: LD_INT 1
52074: NEG
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 2
52082: PUSH
52083: LD_INT 1
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 2
52092: NEG
52093: PUSH
52094: LD_INT 1
52096: NEG
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52113: LD_ADDR_VAR 0 36
52117: PUSH
52118: LD_INT 0
52120: PUSH
52121: LD_INT 0
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 0
52130: PUSH
52131: LD_INT 1
52133: NEG
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 1
52141: PUSH
52142: LD_INT 0
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 1
52151: PUSH
52152: LD_INT 1
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 0
52161: PUSH
52162: LD_INT 1
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 1
52171: NEG
52172: PUSH
52173: LD_INT 0
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 1
52182: NEG
52183: PUSH
52184: LD_INT 1
52186: NEG
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 1
52194: NEG
52195: PUSH
52196: LD_INT 2
52198: NEG
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 1
52206: PUSH
52207: LD_INT 2
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52225: LD_ADDR_VAR 0 37
52229: PUSH
52230: LD_INT 0
52232: PUSH
52233: LD_INT 0
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 0
52242: PUSH
52243: LD_INT 1
52245: NEG
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 1
52253: PUSH
52254: LD_INT 0
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 1
52263: PUSH
52264: LD_INT 1
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 0
52273: PUSH
52274: LD_INT 1
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 1
52283: NEG
52284: PUSH
52285: LD_INT 0
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 1
52294: NEG
52295: PUSH
52296: LD_INT 1
52298: NEG
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 1
52306: PUSH
52307: LD_INT 1
52309: NEG
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 1
52317: NEG
52318: PUSH
52319: LD_INT 1
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52337: LD_ADDR_VAR 0 38
52341: PUSH
52342: LD_INT 0
52344: PUSH
52345: LD_INT 0
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 0
52354: PUSH
52355: LD_INT 1
52357: NEG
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 1
52365: PUSH
52366: LD_INT 0
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 1
52375: PUSH
52376: LD_INT 1
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 0
52385: PUSH
52386: LD_INT 1
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 1
52395: NEG
52396: PUSH
52397: LD_INT 0
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 1
52406: NEG
52407: PUSH
52408: LD_INT 1
52410: NEG
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 2
52418: PUSH
52419: LD_INT 1
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 2
52428: NEG
52429: PUSH
52430: LD_INT 1
52432: NEG
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52449: LD_ADDR_VAR 0 39
52453: PUSH
52454: LD_INT 0
52456: PUSH
52457: LD_INT 0
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 0
52466: PUSH
52467: LD_INT 1
52469: NEG
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 1
52477: PUSH
52478: LD_INT 0
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 1
52487: PUSH
52488: LD_INT 1
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 0
52497: PUSH
52498: LD_INT 1
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 1
52507: NEG
52508: PUSH
52509: LD_INT 0
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 1
52518: NEG
52519: PUSH
52520: LD_INT 1
52522: NEG
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 1
52530: NEG
52531: PUSH
52532: LD_INT 2
52534: NEG
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 1
52542: PUSH
52543: LD_INT 2
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52561: LD_ADDR_VAR 0 40
52565: PUSH
52566: LD_INT 0
52568: PUSH
52569: LD_INT 0
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 0
52578: PUSH
52579: LD_INT 1
52581: NEG
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 1
52589: PUSH
52590: LD_INT 0
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 1
52599: PUSH
52600: LD_INT 1
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 0
52609: PUSH
52610: LD_INT 1
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 1
52619: NEG
52620: PUSH
52621: LD_INT 0
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 1
52630: NEG
52631: PUSH
52632: LD_INT 1
52634: NEG
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 1
52642: PUSH
52643: LD_INT 1
52645: NEG
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 1
52653: NEG
52654: PUSH
52655: LD_INT 1
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52673: LD_ADDR_VAR 0 41
52677: PUSH
52678: LD_INT 0
52680: PUSH
52681: LD_INT 0
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 0
52690: PUSH
52691: LD_INT 1
52693: NEG
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 1
52701: PUSH
52702: LD_INT 0
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 1
52711: PUSH
52712: LD_INT 1
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 0
52721: PUSH
52722: LD_INT 1
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 1
52731: NEG
52732: PUSH
52733: LD_INT 0
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 1
52742: NEG
52743: PUSH
52744: LD_INT 1
52746: NEG
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 1
52754: NEG
52755: PUSH
52756: LD_INT 2
52758: NEG
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 1
52766: PUSH
52767: LD_INT 1
52769: NEG
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 2
52777: PUSH
52778: LD_INT 0
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 2
52787: PUSH
52788: LD_INT 1
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 2
52797: PUSH
52798: LD_INT 2
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 1
52807: PUSH
52808: LD_INT 2
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 1
52817: NEG
52818: PUSH
52819: LD_INT 1
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 2
52828: NEG
52829: PUSH
52830: LD_INT 0
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 2
52839: NEG
52840: PUSH
52841: LD_INT 1
52843: NEG
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 2
52851: NEG
52852: PUSH
52853: LD_INT 2
52855: NEG
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 2
52863: NEG
52864: PUSH
52865: LD_INT 3
52867: NEG
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 2
52875: PUSH
52876: LD_INT 1
52878: NEG
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 3
52886: PUSH
52887: LD_INT 0
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 3
52896: PUSH
52897: LD_INT 1
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 3
52906: PUSH
52907: LD_INT 2
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 3
52916: PUSH
52917: LD_INT 3
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 2
52926: PUSH
52927: LD_INT 3
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 2
52936: NEG
52937: PUSH
52938: LD_INT 1
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 3
52947: NEG
52948: PUSH
52949: LD_INT 0
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 3
52958: NEG
52959: PUSH
52960: LD_INT 1
52962: NEG
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 3
52970: NEG
52971: PUSH
52972: LD_INT 2
52974: NEG
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 3
52982: NEG
52983: PUSH
52984: LD_INT 3
52986: NEG
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53023: LD_ADDR_VAR 0 42
53027: PUSH
53028: LD_INT 0
53030: PUSH
53031: LD_INT 0
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 0
53040: PUSH
53041: LD_INT 1
53043: NEG
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 1
53051: PUSH
53052: LD_INT 0
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 1
53061: PUSH
53062: LD_INT 1
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 0
53071: PUSH
53072: LD_INT 1
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 1
53081: NEG
53082: PUSH
53083: LD_INT 0
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 1
53092: NEG
53093: PUSH
53094: LD_INT 1
53096: NEG
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 1
53104: NEG
53105: PUSH
53106: LD_INT 2
53108: NEG
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 0
53116: PUSH
53117: LD_INT 2
53119: NEG
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 1
53127: PUSH
53128: LD_INT 1
53130: NEG
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 2
53138: PUSH
53139: LD_INT 1
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 2
53148: PUSH
53149: LD_INT 2
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 1
53158: PUSH
53159: LD_INT 2
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 0
53168: PUSH
53169: LD_INT 2
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 1
53178: NEG
53179: PUSH
53180: LD_INT 1
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 2
53189: NEG
53190: PUSH
53191: LD_INT 1
53193: NEG
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 2
53201: NEG
53202: PUSH
53203: LD_INT 2
53205: NEG
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 2
53213: NEG
53214: PUSH
53215: LD_INT 3
53217: NEG
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 1
53225: NEG
53226: PUSH
53227: LD_INT 3
53229: NEG
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 0
53237: PUSH
53238: LD_INT 3
53240: NEG
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 1
53248: PUSH
53249: LD_INT 2
53251: NEG
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 3
53259: PUSH
53260: LD_INT 2
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 3
53269: PUSH
53270: LD_INT 3
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 2
53279: PUSH
53280: LD_INT 3
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 1
53289: PUSH
53290: LD_INT 3
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 0
53299: PUSH
53300: LD_INT 3
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 1
53309: NEG
53310: PUSH
53311: LD_INT 2
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 3
53320: NEG
53321: PUSH
53322: LD_INT 2
53324: NEG
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 3
53332: NEG
53333: PUSH
53334: LD_INT 3
53336: NEG
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53373: LD_ADDR_VAR 0 43
53377: PUSH
53378: LD_INT 0
53380: PUSH
53381: LD_INT 0
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 0
53390: PUSH
53391: LD_INT 1
53393: NEG
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 1
53401: PUSH
53402: LD_INT 0
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 1
53411: PUSH
53412: LD_INT 1
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 0
53421: PUSH
53422: LD_INT 1
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 1
53431: NEG
53432: PUSH
53433: LD_INT 0
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 1
53442: NEG
53443: PUSH
53444: LD_INT 1
53446: NEG
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 1
53454: NEG
53455: PUSH
53456: LD_INT 2
53458: NEG
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 0
53466: PUSH
53467: LD_INT 2
53469: NEG
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 1
53477: PUSH
53478: LD_INT 1
53480: NEG
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 2
53488: PUSH
53489: LD_INT 0
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 2
53498: PUSH
53499: LD_INT 1
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 1
53508: PUSH
53509: LD_INT 2
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 0
53518: PUSH
53519: LD_INT 2
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 1
53528: NEG
53529: PUSH
53530: LD_INT 1
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 2
53539: NEG
53540: PUSH
53541: LD_INT 0
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 2
53550: NEG
53551: PUSH
53552: LD_INT 1
53554: NEG
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 1
53562: NEG
53563: PUSH
53564: LD_INT 3
53566: NEG
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 0
53574: PUSH
53575: LD_INT 3
53577: NEG
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 1
53585: PUSH
53586: LD_INT 2
53588: NEG
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 2
53596: PUSH
53597: LD_INT 1
53599: NEG
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 3
53607: PUSH
53608: LD_INT 0
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 3
53617: PUSH
53618: LD_INT 1
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 1
53627: PUSH
53628: LD_INT 3
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 0
53637: PUSH
53638: LD_INT 3
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 1
53647: NEG
53648: PUSH
53649: LD_INT 2
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 2
53658: NEG
53659: PUSH
53660: LD_INT 1
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 3
53669: NEG
53670: PUSH
53671: LD_INT 0
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 3
53680: NEG
53681: PUSH
53682: LD_INT 1
53684: NEG
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53721: LD_ADDR_VAR 0 44
53725: PUSH
53726: LD_INT 0
53728: PUSH
53729: LD_INT 0
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 0
53738: PUSH
53739: LD_INT 1
53741: NEG
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 1
53749: PUSH
53750: LD_INT 0
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 1
53759: PUSH
53760: LD_INT 1
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 0
53769: PUSH
53770: LD_INT 1
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 1
53779: NEG
53780: PUSH
53781: LD_INT 0
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 1
53790: NEG
53791: PUSH
53792: LD_INT 1
53794: NEG
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 1
53802: NEG
53803: PUSH
53804: LD_INT 2
53806: NEG
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 1
53814: PUSH
53815: LD_INT 1
53817: NEG
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 2
53825: PUSH
53826: LD_INT 0
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 2
53835: PUSH
53836: LD_INT 1
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 2
53845: PUSH
53846: LD_INT 2
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 1
53855: PUSH
53856: LD_INT 2
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 1
53865: NEG
53866: PUSH
53867: LD_INT 1
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 2
53876: NEG
53877: PUSH
53878: LD_INT 0
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 2
53887: NEG
53888: PUSH
53889: LD_INT 1
53891: NEG
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 2
53899: NEG
53900: PUSH
53901: LD_INT 2
53903: NEG
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 2
53911: NEG
53912: PUSH
53913: LD_INT 3
53915: NEG
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 2
53923: PUSH
53924: LD_INT 1
53926: NEG
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 3
53934: PUSH
53935: LD_INT 0
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 3
53944: PUSH
53945: LD_INT 1
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 3
53954: PUSH
53955: LD_INT 2
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 3
53964: PUSH
53965: LD_INT 3
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 2
53974: PUSH
53975: LD_INT 3
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 2
53984: NEG
53985: PUSH
53986: LD_INT 1
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 3
53995: NEG
53996: PUSH
53997: LD_INT 0
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 3
54006: NEG
54007: PUSH
54008: LD_INT 1
54010: NEG
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 3
54018: NEG
54019: PUSH
54020: LD_INT 2
54022: NEG
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 3
54030: NEG
54031: PUSH
54032: LD_INT 3
54034: NEG
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54071: LD_ADDR_VAR 0 45
54075: PUSH
54076: LD_INT 0
54078: PUSH
54079: LD_INT 0
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 0
54088: PUSH
54089: LD_INT 1
54091: NEG
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 1
54099: PUSH
54100: LD_INT 0
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 1
54109: PUSH
54110: LD_INT 1
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 0
54119: PUSH
54120: LD_INT 1
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 1
54129: NEG
54130: PUSH
54131: LD_INT 0
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 1
54140: NEG
54141: PUSH
54142: LD_INT 1
54144: NEG
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 1
54152: NEG
54153: PUSH
54154: LD_INT 2
54156: NEG
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 0
54164: PUSH
54165: LD_INT 2
54167: NEG
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 1
54175: PUSH
54176: LD_INT 1
54178: NEG
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 2
54186: PUSH
54187: LD_INT 1
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 2
54196: PUSH
54197: LD_INT 2
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 1
54206: PUSH
54207: LD_INT 2
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 0
54216: PUSH
54217: LD_INT 2
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 1
54226: NEG
54227: PUSH
54228: LD_INT 1
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 2
54237: NEG
54238: PUSH
54239: LD_INT 1
54241: NEG
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 2
54249: NEG
54250: PUSH
54251: LD_INT 2
54253: NEG
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 2
54261: NEG
54262: PUSH
54263: LD_INT 3
54265: NEG
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 1
54273: NEG
54274: PUSH
54275: LD_INT 3
54277: NEG
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 0
54285: PUSH
54286: LD_INT 3
54288: NEG
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 1
54296: PUSH
54297: LD_INT 2
54299: NEG
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 3
54307: PUSH
54308: LD_INT 2
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 3
54317: PUSH
54318: LD_INT 3
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 2
54327: PUSH
54328: LD_INT 3
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 1
54337: PUSH
54338: LD_INT 3
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 0
54347: PUSH
54348: LD_INT 3
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 1
54357: NEG
54358: PUSH
54359: LD_INT 2
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 3
54368: NEG
54369: PUSH
54370: LD_INT 2
54372: NEG
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 3
54380: NEG
54381: PUSH
54382: LD_INT 3
54384: NEG
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54421: LD_ADDR_VAR 0 46
54425: PUSH
54426: LD_INT 0
54428: PUSH
54429: LD_INT 0
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 0
54438: PUSH
54439: LD_INT 1
54441: NEG
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 1
54449: PUSH
54450: LD_INT 0
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 1
54459: PUSH
54460: LD_INT 1
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 0
54469: PUSH
54470: LD_INT 1
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 1
54479: NEG
54480: PUSH
54481: LD_INT 0
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 1
54490: NEG
54491: PUSH
54492: LD_INT 1
54494: NEG
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 1
54502: NEG
54503: PUSH
54504: LD_INT 2
54506: NEG
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 0
54514: PUSH
54515: LD_INT 2
54517: NEG
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 1
54525: PUSH
54526: LD_INT 1
54528: NEG
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 2
54536: PUSH
54537: LD_INT 0
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 2
54546: PUSH
54547: LD_INT 1
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 1
54556: PUSH
54557: LD_INT 2
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 0
54566: PUSH
54567: LD_INT 2
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 1
54576: NEG
54577: PUSH
54578: LD_INT 1
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 2
54587: NEG
54588: PUSH
54589: LD_INT 0
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 2
54598: NEG
54599: PUSH
54600: LD_INT 1
54602: NEG
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 1
54610: NEG
54611: PUSH
54612: LD_INT 3
54614: NEG
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 0
54622: PUSH
54623: LD_INT 3
54625: NEG
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 1
54633: PUSH
54634: LD_INT 2
54636: NEG
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 2
54644: PUSH
54645: LD_INT 1
54647: NEG
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 3
54655: PUSH
54656: LD_INT 0
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 3
54665: PUSH
54666: LD_INT 1
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 1
54675: PUSH
54676: LD_INT 3
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 0
54685: PUSH
54686: LD_INT 3
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 1
54695: NEG
54696: PUSH
54697: LD_INT 2
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 2
54706: NEG
54707: PUSH
54708: LD_INT 1
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 3
54717: NEG
54718: PUSH
54719: LD_INT 0
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 3
54728: NEG
54729: PUSH
54730: LD_INT 1
54732: NEG
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54769: LD_ADDR_VAR 0 47
54773: PUSH
54774: LD_INT 0
54776: PUSH
54777: LD_INT 0
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 0
54786: PUSH
54787: LD_INT 1
54789: NEG
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 1
54797: PUSH
54798: LD_INT 0
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 1
54807: PUSH
54808: LD_INT 1
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 0
54817: PUSH
54818: LD_INT 1
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 1
54827: NEG
54828: PUSH
54829: LD_INT 0
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 1
54838: NEG
54839: PUSH
54840: LD_INT 1
54842: NEG
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 1
54850: NEG
54851: PUSH
54852: LD_INT 2
54854: NEG
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 0
54862: PUSH
54863: LD_INT 2
54865: NEG
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 1
54873: PUSH
54874: LD_INT 1
54876: NEG
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 2
54884: NEG
54885: PUSH
54886: LD_INT 1
54888: NEG
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 2
54896: NEG
54897: PUSH
54898: LD_INT 2
54900: NEG
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54920: LD_ADDR_VAR 0 48
54924: PUSH
54925: LD_INT 0
54927: PUSH
54928: LD_INT 0
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 0
54937: PUSH
54938: LD_INT 1
54940: NEG
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 1
54948: PUSH
54949: LD_INT 0
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 1
54958: PUSH
54959: LD_INT 1
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 0
54968: PUSH
54969: LD_INT 1
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 1
54978: NEG
54979: PUSH
54980: LD_INT 0
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 1
54989: NEG
54990: PUSH
54991: LD_INT 1
54993: NEG
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 1
55001: NEG
55002: PUSH
55003: LD_INT 2
55005: NEG
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 0
55013: PUSH
55014: LD_INT 2
55016: NEG
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 1
55024: PUSH
55025: LD_INT 1
55027: NEG
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 2
55035: PUSH
55036: LD_INT 0
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 2
55045: PUSH
55046: LD_INT 1
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55067: LD_ADDR_VAR 0 49
55071: PUSH
55072: LD_INT 0
55074: PUSH
55075: LD_INT 0
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 0
55084: PUSH
55085: LD_INT 1
55087: NEG
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 1
55095: PUSH
55096: LD_INT 0
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 1
55105: PUSH
55106: LD_INT 1
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 0
55115: PUSH
55116: LD_INT 1
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 1
55125: NEG
55126: PUSH
55127: LD_INT 0
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 1
55136: NEG
55137: PUSH
55138: LD_INT 1
55140: NEG
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 1
55148: PUSH
55149: LD_INT 1
55151: NEG
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 2
55159: PUSH
55160: LD_INT 0
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 2
55169: PUSH
55170: LD_INT 1
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 2
55179: PUSH
55180: LD_INT 2
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 1
55189: PUSH
55190: LD_INT 2
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55211: LD_ADDR_VAR 0 50
55215: PUSH
55216: LD_INT 0
55218: PUSH
55219: LD_INT 0
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 0
55228: PUSH
55229: LD_INT 1
55231: NEG
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 1
55239: PUSH
55240: LD_INT 0
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 1
55249: PUSH
55250: LD_INT 1
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 0
55259: PUSH
55260: LD_INT 1
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 1
55269: NEG
55270: PUSH
55271: LD_INT 0
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 1
55280: NEG
55281: PUSH
55282: LD_INT 1
55284: NEG
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 2
55292: PUSH
55293: LD_INT 1
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 2
55302: PUSH
55303: LD_INT 2
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 1
55312: PUSH
55313: LD_INT 2
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 0
55322: PUSH
55323: LD_INT 2
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 1
55332: NEG
55333: PUSH
55334: LD_INT 1
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55355: LD_ADDR_VAR 0 51
55359: PUSH
55360: LD_INT 0
55362: PUSH
55363: LD_INT 0
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 0
55372: PUSH
55373: LD_INT 1
55375: NEG
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 1
55383: PUSH
55384: LD_INT 0
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 1
55393: PUSH
55394: LD_INT 1
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 0
55403: PUSH
55404: LD_INT 1
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 1
55413: NEG
55414: PUSH
55415: LD_INT 0
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 1
55424: NEG
55425: PUSH
55426: LD_INT 1
55428: NEG
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 1
55436: PUSH
55437: LD_INT 2
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 0
55446: PUSH
55447: LD_INT 2
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 1
55456: NEG
55457: PUSH
55458: LD_INT 1
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 2
55467: NEG
55468: PUSH
55469: LD_INT 0
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 2
55478: NEG
55479: PUSH
55480: LD_INT 1
55482: NEG
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55502: LD_ADDR_VAR 0 52
55506: PUSH
55507: LD_INT 0
55509: PUSH
55510: LD_INT 0
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 0
55519: PUSH
55520: LD_INT 1
55522: NEG
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 1
55530: PUSH
55531: LD_INT 0
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 1
55540: PUSH
55541: LD_INT 1
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 0
55550: PUSH
55551: LD_INT 1
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 1
55560: NEG
55561: PUSH
55562: LD_INT 0
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 1
55571: NEG
55572: PUSH
55573: LD_INT 1
55575: NEG
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 1
55583: NEG
55584: PUSH
55585: LD_INT 2
55587: NEG
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 1
55595: NEG
55596: PUSH
55597: LD_INT 1
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 2
55606: NEG
55607: PUSH
55608: LD_INT 0
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 2
55617: NEG
55618: PUSH
55619: LD_INT 1
55621: NEG
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 2
55629: NEG
55630: PUSH
55631: LD_INT 2
55633: NEG
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55653: LD_ADDR_VAR 0 53
55657: PUSH
55658: LD_INT 0
55660: PUSH
55661: LD_INT 0
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 0
55670: PUSH
55671: LD_INT 1
55673: NEG
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 1
55681: PUSH
55682: LD_INT 0
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 1
55691: PUSH
55692: LD_INT 1
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 0
55701: PUSH
55702: LD_INT 1
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 1
55711: NEG
55712: PUSH
55713: LD_INT 0
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 1
55722: NEG
55723: PUSH
55724: LD_INT 1
55726: NEG
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 1
55734: NEG
55735: PUSH
55736: LD_INT 2
55738: NEG
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 0
55746: PUSH
55747: LD_INT 2
55749: NEG
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 1
55757: PUSH
55758: LD_INT 1
55760: NEG
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 2
55768: PUSH
55769: LD_INT 0
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 2
55778: PUSH
55779: LD_INT 1
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 2
55788: PUSH
55789: LD_INT 2
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 1
55798: PUSH
55799: LD_INT 2
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 0
55808: PUSH
55809: LD_INT 2
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 1
55818: NEG
55819: PUSH
55820: LD_INT 1
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 2
55829: NEG
55830: PUSH
55831: LD_INT 0
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 2
55840: NEG
55841: PUSH
55842: LD_INT 1
55844: NEG
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 2
55852: NEG
55853: PUSH
55854: LD_INT 2
55856: NEG
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55883: LD_ADDR_VAR 0 54
55887: PUSH
55888: LD_INT 0
55890: PUSH
55891: LD_INT 0
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 0
55900: PUSH
55901: LD_INT 1
55903: NEG
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 1
55911: PUSH
55912: LD_INT 0
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 1
55921: PUSH
55922: LD_INT 1
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 0
55931: PUSH
55932: LD_INT 1
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 1
55941: NEG
55942: PUSH
55943: LD_INT 0
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 1
55952: NEG
55953: PUSH
55954: LD_INT 1
55956: NEG
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 1
55964: NEG
55965: PUSH
55966: LD_INT 2
55968: NEG
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 0
55976: PUSH
55977: LD_INT 2
55979: NEG
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 1
55987: PUSH
55988: LD_INT 1
55990: NEG
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 2
55998: PUSH
55999: LD_INT 0
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 2
56008: PUSH
56009: LD_INT 1
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 2
56018: PUSH
56019: LD_INT 2
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 1
56028: PUSH
56029: LD_INT 2
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 0
56038: PUSH
56039: LD_INT 2
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 1
56048: NEG
56049: PUSH
56050: LD_INT 1
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 2
56059: NEG
56060: PUSH
56061: LD_INT 0
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 2
56070: NEG
56071: PUSH
56072: LD_INT 1
56074: NEG
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 2
56082: NEG
56083: PUSH
56084: LD_INT 2
56086: NEG
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56113: LD_ADDR_VAR 0 55
56117: PUSH
56118: LD_INT 0
56120: PUSH
56121: LD_INT 0
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 0
56130: PUSH
56131: LD_INT 1
56133: NEG
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 1
56141: PUSH
56142: LD_INT 0
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 1
56151: PUSH
56152: LD_INT 1
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 0
56161: PUSH
56162: LD_INT 1
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 1
56171: NEG
56172: PUSH
56173: LD_INT 0
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 1
56182: NEG
56183: PUSH
56184: LD_INT 1
56186: NEG
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 1
56194: NEG
56195: PUSH
56196: LD_INT 2
56198: NEG
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 0
56206: PUSH
56207: LD_INT 2
56209: NEG
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 1
56217: PUSH
56218: LD_INT 1
56220: NEG
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 2
56228: PUSH
56229: LD_INT 0
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 2
56238: PUSH
56239: LD_INT 1
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 2
56248: PUSH
56249: LD_INT 2
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 1
56258: PUSH
56259: LD_INT 2
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 0
56268: PUSH
56269: LD_INT 2
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 1
56278: NEG
56279: PUSH
56280: LD_INT 1
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 2
56289: NEG
56290: PUSH
56291: LD_INT 0
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 2
56300: NEG
56301: PUSH
56302: LD_INT 1
56304: NEG
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 2
56312: NEG
56313: PUSH
56314: LD_INT 2
56316: NEG
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56343: LD_ADDR_VAR 0 56
56347: PUSH
56348: LD_INT 0
56350: PUSH
56351: LD_INT 0
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 0
56360: PUSH
56361: LD_INT 1
56363: NEG
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 1
56371: PUSH
56372: LD_INT 0
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 1
56381: PUSH
56382: LD_INT 1
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 0
56391: PUSH
56392: LD_INT 1
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 1
56401: NEG
56402: PUSH
56403: LD_INT 0
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 1
56412: NEG
56413: PUSH
56414: LD_INT 1
56416: NEG
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 1
56424: NEG
56425: PUSH
56426: LD_INT 2
56428: NEG
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 0
56436: PUSH
56437: LD_INT 2
56439: NEG
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 1
56447: PUSH
56448: LD_INT 1
56450: NEG
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 2
56458: PUSH
56459: LD_INT 0
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 2
56468: PUSH
56469: LD_INT 1
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 2
56478: PUSH
56479: LD_INT 2
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 1
56488: PUSH
56489: LD_INT 2
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 0
56498: PUSH
56499: LD_INT 2
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 1
56508: NEG
56509: PUSH
56510: LD_INT 1
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 2
56519: NEG
56520: PUSH
56521: LD_INT 0
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 2
56530: NEG
56531: PUSH
56532: LD_INT 1
56534: NEG
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 2
56542: NEG
56543: PUSH
56544: LD_INT 2
56546: NEG
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56573: LD_ADDR_VAR 0 57
56577: PUSH
56578: LD_INT 0
56580: PUSH
56581: LD_INT 0
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 0
56590: PUSH
56591: LD_INT 1
56593: NEG
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 1
56601: PUSH
56602: LD_INT 0
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 1
56611: PUSH
56612: LD_INT 1
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 0
56621: PUSH
56622: LD_INT 1
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 1
56631: NEG
56632: PUSH
56633: LD_INT 0
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 1
56642: NEG
56643: PUSH
56644: LD_INT 1
56646: NEG
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 1
56654: NEG
56655: PUSH
56656: LD_INT 2
56658: NEG
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 0
56666: PUSH
56667: LD_INT 2
56669: NEG
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 1
56677: PUSH
56678: LD_INT 1
56680: NEG
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 2
56688: PUSH
56689: LD_INT 0
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 2
56698: PUSH
56699: LD_INT 1
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 2
56708: PUSH
56709: LD_INT 2
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 1
56718: PUSH
56719: LD_INT 2
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 0
56728: PUSH
56729: LD_INT 2
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 1
56738: NEG
56739: PUSH
56740: LD_INT 1
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 2
56749: NEG
56750: PUSH
56751: LD_INT 0
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 2
56760: NEG
56761: PUSH
56762: LD_INT 1
56764: NEG
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 2
56772: NEG
56773: PUSH
56774: LD_INT 2
56776: NEG
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56803: LD_ADDR_VAR 0 58
56807: PUSH
56808: LD_INT 0
56810: PUSH
56811: LD_INT 0
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 0
56820: PUSH
56821: LD_INT 1
56823: NEG
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 1
56831: PUSH
56832: LD_INT 0
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 1
56841: PUSH
56842: LD_INT 1
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 0
56851: PUSH
56852: LD_INT 1
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 1
56861: NEG
56862: PUSH
56863: LD_INT 0
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 1
56872: NEG
56873: PUSH
56874: LD_INT 1
56876: NEG
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 1
56884: NEG
56885: PUSH
56886: LD_INT 2
56888: NEG
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 0
56896: PUSH
56897: LD_INT 2
56899: NEG
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 1
56907: PUSH
56908: LD_INT 1
56910: NEG
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 2
56918: PUSH
56919: LD_INT 0
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 2
56928: PUSH
56929: LD_INT 1
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 2
56938: PUSH
56939: LD_INT 2
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 1
56948: PUSH
56949: LD_INT 2
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 0
56958: PUSH
56959: LD_INT 2
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 1
56968: NEG
56969: PUSH
56970: LD_INT 1
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 2
56979: NEG
56980: PUSH
56981: LD_INT 0
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 2
56990: NEG
56991: PUSH
56992: LD_INT 1
56994: NEG
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 2
57002: NEG
57003: PUSH
57004: LD_INT 2
57006: NEG
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: LIST
57027: LIST
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57033: LD_ADDR_VAR 0 59
57037: PUSH
57038: LD_INT 0
57040: PUSH
57041: LD_INT 0
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 0
57050: PUSH
57051: LD_INT 1
57053: NEG
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 1
57061: PUSH
57062: LD_INT 0
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 1
57071: PUSH
57072: LD_INT 1
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 0
57081: PUSH
57082: LD_INT 1
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 1
57091: NEG
57092: PUSH
57093: LD_INT 0
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 1
57102: NEG
57103: PUSH
57104: LD_INT 1
57106: NEG
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57121: LD_ADDR_VAR 0 60
57125: PUSH
57126: LD_INT 0
57128: PUSH
57129: LD_INT 0
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 0
57138: PUSH
57139: LD_INT 1
57141: NEG
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 1
57149: PUSH
57150: LD_INT 0
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 1
57159: PUSH
57160: LD_INT 1
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 0
57169: PUSH
57170: LD_INT 1
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 1
57179: NEG
57180: PUSH
57181: LD_INT 0
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 1
57190: NEG
57191: PUSH
57192: LD_INT 1
57194: NEG
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57209: LD_ADDR_VAR 0 61
57213: PUSH
57214: LD_INT 0
57216: PUSH
57217: LD_INT 0
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 0
57226: PUSH
57227: LD_INT 1
57229: NEG
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 1
57237: PUSH
57238: LD_INT 0
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 1
57247: PUSH
57248: LD_INT 1
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 0
57257: PUSH
57258: LD_INT 1
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 1
57267: NEG
57268: PUSH
57269: LD_INT 0
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 1
57278: NEG
57279: PUSH
57280: LD_INT 1
57282: NEG
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57297: LD_ADDR_VAR 0 62
57301: PUSH
57302: LD_INT 0
57304: PUSH
57305: LD_INT 0
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 0
57314: PUSH
57315: LD_INT 1
57317: NEG
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 1
57325: PUSH
57326: LD_INT 0
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 1
57335: PUSH
57336: LD_INT 1
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 0
57345: PUSH
57346: LD_INT 1
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 1
57355: NEG
57356: PUSH
57357: LD_INT 0
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 1
57366: NEG
57367: PUSH
57368: LD_INT 1
57370: NEG
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57385: LD_ADDR_VAR 0 63
57389: PUSH
57390: LD_INT 0
57392: PUSH
57393: LD_INT 0
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 0
57402: PUSH
57403: LD_INT 1
57405: NEG
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 1
57413: PUSH
57414: LD_INT 0
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 1
57423: PUSH
57424: LD_INT 1
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 0
57433: PUSH
57434: LD_INT 1
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 1
57443: NEG
57444: PUSH
57445: LD_INT 0
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 1
57454: NEG
57455: PUSH
57456: LD_INT 1
57458: NEG
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57473: LD_ADDR_VAR 0 64
57477: PUSH
57478: LD_INT 0
57480: PUSH
57481: LD_INT 0
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 0
57490: PUSH
57491: LD_INT 1
57493: NEG
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 1
57501: PUSH
57502: LD_INT 0
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 1
57511: PUSH
57512: LD_INT 1
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 0
57521: PUSH
57522: LD_INT 1
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 1
57531: NEG
57532: PUSH
57533: LD_INT 0
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 1
57542: NEG
57543: PUSH
57544: LD_INT 1
57546: NEG
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: ST_TO_ADDR
// end ; 1 :
57561: GO 63458
57563: LD_INT 1
57565: DOUBLE
57566: EQUAL
57567: IFTRUE 57571
57569: GO 60194
57571: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57572: LD_ADDR_VAR 0 11
57576: PUSH
57577: LD_INT 1
57579: NEG
57580: PUSH
57581: LD_INT 3
57583: NEG
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 0
57591: PUSH
57592: LD_INT 3
57594: NEG
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 1
57602: PUSH
57603: LD_INT 2
57605: NEG
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: LIST
57615: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57616: LD_ADDR_VAR 0 12
57620: PUSH
57621: LD_INT 2
57623: PUSH
57624: LD_INT 1
57626: NEG
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 3
57634: PUSH
57635: LD_INT 0
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 3
57644: PUSH
57645: LD_INT 1
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: LIST
57656: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57657: LD_ADDR_VAR 0 13
57661: PUSH
57662: LD_INT 3
57664: PUSH
57665: LD_INT 2
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 3
57674: PUSH
57675: LD_INT 3
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 2
57684: PUSH
57685: LD_INT 3
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: LIST
57696: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57697: LD_ADDR_VAR 0 14
57701: PUSH
57702: LD_INT 1
57704: PUSH
57705: LD_INT 3
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 0
57714: PUSH
57715: LD_INT 3
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 1
57724: NEG
57725: PUSH
57726: LD_INT 2
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: LIST
57737: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57738: LD_ADDR_VAR 0 15
57742: PUSH
57743: LD_INT 2
57745: NEG
57746: PUSH
57747: LD_INT 1
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 3
57756: NEG
57757: PUSH
57758: LD_INT 0
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 3
57767: NEG
57768: PUSH
57769: LD_INT 1
57771: NEG
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: LIST
57781: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57782: LD_ADDR_VAR 0 16
57786: PUSH
57787: LD_INT 2
57789: NEG
57790: PUSH
57791: LD_INT 3
57793: NEG
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 3
57801: NEG
57802: PUSH
57803: LD_INT 2
57805: NEG
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 3
57813: NEG
57814: PUSH
57815: LD_INT 3
57817: NEG
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: LIST
57827: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57828: LD_ADDR_VAR 0 17
57832: PUSH
57833: LD_INT 1
57835: NEG
57836: PUSH
57837: LD_INT 3
57839: NEG
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 0
57847: PUSH
57848: LD_INT 3
57850: NEG
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 1
57858: PUSH
57859: LD_INT 2
57861: NEG
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: LIST
57871: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57872: LD_ADDR_VAR 0 18
57876: PUSH
57877: LD_INT 2
57879: PUSH
57880: LD_INT 1
57882: NEG
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 3
57890: PUSH
57891: LD_INT 0
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 3
57900: PUSH
57901: LD_INT 1
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: LIST
57912: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57913: LD_ADDR_VAR 0 19
57917: PUSH
57918: LD_INT 3
57920: PUSH
57921: LD_INT 2
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 3
57930: PUSH
57931: LD_INT 3
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 2
57940: PUSH
57941: LD_INT 3
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: LIST
57952: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57953: LD_ADDR_VAR 0 20
57957: PUSH
57958: LD_INT 1
57960: PUSH
57961: LD_INT 3
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 0
57970: PUSH
57971: LD_INT 3
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 1
57980: NEG
57981: PUSH
57982: LD_INT 2
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: LIST
57993: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57994: LD_ADDR_VAR 0 21
57998: PUSH
57999: LD_INT 2
58001: NEG
58002: PUSH
58003: LD_INT 1
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 3
58012: NEG
58013: PUSH
58014: LD_INT 0
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 3
58023: NEG
58024: PUSH
58025: LD_INT 1
58027: NEG
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: LIST
58037: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58038: LD_ADDR_VAR 0 22
58042: PUSH
58043: LD_INT 2
58045: NEG
58046: PUSH
58047: LD_INT 3
58049: NEG
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 3
58057: NEG
58058: PUSH
58059: LD_INT 2
58061: NEG
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 3
58069: NEG
58070: PUSH
58071: LD_INT 3
58073: NEG
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: LIST
58083: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
58084: LD_ADDR_VAR 0 23
58088: PUSH
58089: LD_INT 0
58091: PUSH
58092: LD_INT 3
58094: NEG
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 1
58102: NEG
58103: PUSH
58104: LD_INT 4
58106: NEG
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 1
58114: PUSH
58115: LD_INT 3
58117: NEG
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: LIST
58127: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58128: LD_ADDR_VAR 0 24
58132: PUSH
58133: LD_INT 3
58135: PUSH
58136: LD_INT 0
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 3
58145: PUSH
58146: LD_INT 1
58148: NEG
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 4
58156: PUSH
58157: LD_INT 1
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: LIST
58168: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58169: LD_ADDR_VAR 0 25
58173: PUSH
58174: LD_INT 3
58176: PUSH
58177: LD_INT 3
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 4
58186: PUSH
58187: LD_INT 3
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 3
58196: PUSH
58197: LD_INT 4
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: LIST
58208: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58209: LD_ADDR_VAR 0 26
58213: PUSH
58214: LD_INT 0
58216: PUSH
58217: LD_INT 3
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 1
58226: PUSH
58227: LD_INT 4
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 1
58236: NEG
58237: PUSH
58238: LD_INT 3
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: LIST
58249: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58250: LD_ADDR_VAR 0 27
58254: PUSH
58255: LD_INT 3
58257: NEG
58258: PUSH
58259: LD_INT 0
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 3
58268: NEG
58269: PUSH
58270: LD_INT 1
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 4
58279: NEG
58280: PUSH
58281: LD_INT 1
58283: NEG
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: LIST
58293: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58294: LD_ADDR_VAR 0 28
58298: PUSH
58299: LD_INT 3
58301: NEG
58302: PUSH
58303: LD_INT 3
58305: NEG
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 3
58313: NEG
58314: PUSH
58315: LD_INT 4
58317: NEG
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 4
58325: NEG
58326: PUSH
58327: LD_INT 3
58329: NEG
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: LIST
58339: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58340: LD_ADDR_VAR 0 29
58344: PUSH
58345: LD_INT 1
58347: NEG
58348: PUSH
58349: LD_INT 3
58351: NEG
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 0
58359: PUSH
58360: LD_INT 3
58362: NEG
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 1
58370: PUSH
58371: LD_INT 2
58373: NEG
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 1
58381: NEG
58382: PUSH
58383: LD_INT 4
58385: NEG
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 0
58393: PUSH
58394: LD_INT 4
58396: NEG
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 1
58404: PUSH
58405: LD_INT 3
58407: NEG
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 1
58415: NEG
58416: PUSH
58417: LD_INT 5
58419: NEG
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 0
58427: PUSH
58428: LD_INT 5
58430: NEG
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 1
58438: PUSH
58439: LD_INT 4
58441: NEG
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 1
58449: NEG
58450: PUSH
58451: LD_INT 6
58453: NEG
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 0
58461: PUSH
58462: LD_INT 6
58464: NEG
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 1
58472: PUSH
58473: LD_INT 5
58475: NEG
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58495: LD_ADDR_VAR 0 30
58499: PUSH
58500: LD_INT 2
58502: PUSH
58503: LD_INT 1
58505: NEG
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 3
58513: PUSH
58514: LD_INT 0
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 3
58523: PUSH
58524: LD_INT 1
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 3
58533: PUSH
58534: LD_INT 1
58536: NEG
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 4
58544: PUSH
58545: LD_INT 0
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 4
58554: PUSH
58555: LD_INT 1
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 4
58564: PUSH
58565: LD_INT 1
58567: NEG
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 5
58575: PUSH
58576: LD_INT 0
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 5
58585: PUSH
58586: LD_INT 1
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 5
58595: PUSH
58596: LD_INT 1
58598: NEG
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 6
58606: PUSH
58607: LD_INT 0
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 6
58616: PUSH
58617: LD_INT 1
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58638: LD_ADDR_VAR 0 31
58642: PUSH
58643: LD_INT 3
58645: PUSH
58646: LD_INT 2
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 3
58655: PUSH
58656: LD_INT 3
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 2
58665: PUSH
58666: LD_INT 3
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 4
58675: PUSH
58676: LD_INT 3
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 4
58685: PUSH
58686: LD_INT 4
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 3
58695: PUSH
58696: LD_INT 4
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 5
58705: PUSH
58706: LD_INT 4
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 5
58715: PUSH
58716: LD_INT 5
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 4
58725: PUSH
58726: LD_INT 5
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 6
58735: PUSH
58736: LD_INT 5
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 6
58745: PUSH
58746: LD_INT 6
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 5
58755: PUSH
58756: LD_INT 6
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58777: LD_ADDR_VAR 0 32
58781: PUSH
58782: LD_INT 1
58784: PUSH
58785: LD_INT 3
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 0
58794: PUSH
58795: LD_INT 3
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 1
58804: NEG
58805: PUSH
58806: LD_INT 2
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 1
58815: PUSH
58816: LD_INT 4
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 0
58825: PUSH
58826: LD_INT 4
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 1
58835: NEG
58836: PUSH
58837: LD_INT 3
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 1
58846: PUSH
58847: LD_INT 5
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 0
58856: PUSH
58857: LD_INT 5
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 1
58866: NEG
58867: PUSH
58868: LD_INT 4
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 1
58877: PUSH
58878: LD_INT 6
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 0
58887: PUSH
58888: LD_INT 6
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 1
58897: NEG
58898: PUSH
58899: LD_INT 5
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58920: LD_ADDR_VAR 0 33
58924: PUSH
58925: LD_INT 2
58927: NEG
58928: PUSH
58929: LD_INT 1
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 3
58938: NEG
58939: PUSH
58940: LD_INT 0
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 3
58949: NEG
58950: PUSH
58951: LD_INT 1
58953: NEG
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 3
58961: NEG
58962: PUSH
58963: LD_INT 1
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 4
58972: NEG
58973: PUSH
58974: LD_INT 0
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 4
58983: NEG
58984: PUSH
58985: LD_INT 1
58987: NEG
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 4
58995: NEG
58996: PUSH
58997: LD_INT 1
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 5
59006: NEG
59007: PUSH
59008: LD_INT 0
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 5
59017: NEG
59018: PUSH
59019: LD_INT 1
59021: NEG
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 5
59029: NEG
59030: PUSH
59031: LD_INT 1
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 6
59040: NEG
59041: PUSH
59042: LD_INT 0
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 6
59051: NEG
59052: PUSH
59053: LD_INT 1
59055: NEG
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
59075: LD_ADDR_VAR 0 34
59079: PUSH
59080: LD_INT 2
59082: NEG
59083: PUSH
59084: LD_INT 3
59086: NEG
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 3
59094: NEG
59095: PUSH
59096: LD_INT 2
59098: NEG
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 3
59106: NEG
59107: PUSH
59108: LD_INT 3
59110: NEG
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 3
59118: NEG
59119: PUSH
59120: LD_INT 4
59122: NEG
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 4
59130: NEG
59131: PUSH
59132: LD_INT 3
59134: NEG
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 4
59142: NEG
59143: PUSH
59144: LD_INT 4
59146: NEG
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 4
59154: NEG
59155: PUSH
59156: LD_INT 5
59158: NEG
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 5
59166: NEG
59167: PUSH
59168: LD_INT 4
59170: NEG
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 5
59178: NEG
59179: PUSH
59180: LD_INT 5
59182: NEG
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 5
59190: NEG
59191: PUSH
59192: LD_INT 6
59194: NEG
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 6
59202: NEG
59203: PUSH
59204: LD_INT 5
59206: NEG
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 6
59214: NEG
59215: PUSH
59216: LD_INT 6
59218: NEG
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59238: LD_ADDR_VAR 0 41
59242: PUSH
59243: LD_INT 0
59245: PUSH
59246: LD_INT 2
59248: NEG
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 1
59256: NEG
59257: PUSH
59258: LD_INT 3
59260: NEG
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 1
59268: PUSH
59269: LD_INT 2
59271: NEG
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: LIST
59281: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59282: LD_ADDR_VAR 0 42
59286: PUSH
59287: LD_INT 2
59289: PUSH
59290: LD_INT 0
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 2
59299: PUSH
59300: LD_INT 1
59302: NEG
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 3
59310: PUSH
59311: LD_INT 1
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: LIST
59322: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59323: LD_ADDR_VAR 0 43
59327: PUSH
59328: LD_INT 2
59330: PUSH
59331: LD_INT 2
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 3
59340: PUSH
59341: LD_INT 2
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 2
59350: PUSH
59351: LD_INT 3
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: LIST
59362: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59363: LD_ADDR_VAR 0 44
59367: PUSH
59368: LD_INT 0
59370: PUSH
59371: LD_INT 2
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 1
59380: PUSH
59381: LD_INT 3
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 1
59390: NEG
59391: PUSH
59392: LD_INT 2
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: LIST
59403: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59404: LD_ADDR_VAR 0 45
59408: PUSH
59409: LD_INT 2
59411: NEG
59412: PUSH
59413: LD_INT 0
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 2
59422: NEG
59423: PUSH
59424: LD_INT 1
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 3
59433: NEG
59434: PUSH
59435: LD_INT 1
59437: NEG
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: LIST
59447: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59448: LD_ADDR_VAR 0 46
59452: PUSH
59453: LD_INT 2
59455: NEG
59456: PUSH
59457: LD_INT 2
59459: NEG
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 2
59467: NEG
59468: PUSH
59469: LD_INT 3
59471: NEG
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 3
59479: NEG
59480: PUSH
59481: LD_INT 2
59483: NEG
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: LIST
59493: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59494: LD_ADDR_VAR 0 47
59498: PUSH
59499: LD_INT 2
59501: NEG
59502: PUSH
59503: LD_INT 3
59505: NEG
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 1
59513: NEG
59514: PUSH
59515: LD_INT 3
59517: NEG
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59527: LD_ADDR_VAR 0 48
59531: PUSH
59532: LD_INT 1
59534: PUSH
59535: LD_INT 2
59537: NEG
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 2
59545: PUSH
59546: LD_INT 1
59548: NEG
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59558: LD_ADDR_VAR 0 49
59562: PUSH
59563: LD_INT 3
59565: PUSH
59566: LD_INT 1
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 3
59575: PUSH
59576: LD_INT 2
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59587: LD_ADDR_VAR 0 50
59591: PUSH
59592: LD_INT 2
59594: PUSH
59595: LD_INT 3
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 1
59604: PUSH
59605: LD_INT 3
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59616: LD_ADDR_VAR 0 51
59620: PUSH
59621: LD_INT 1
59623: NEG
59624: PUSH
59625: LD_INT 2
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 2
59634: NEG
59635: PUSH
59636: LD_INT 1
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59647: LD_ADDR_VAR 0 52
59651: PUSH
59652: LD_INT 3
59654: NEG
59655: PUSH
59656: LD_INT 1
59658: NEG
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 3
59666: NEG
59667: PUSH
59668: LD_INT 2
59670: NEG
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59680: LD_ADDR_VAR 0 53
59684: PUSH
59685: LD_INT 1
59687: NEG
59688: PUSH
59689: LD_INT 3
59691: NEG
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 0
59699: PUSH
59700: LD_INT 3
59702: NEG
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 1
59710: PUSH
59711: LD_INT 2
59713: NEG
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: LIST
59723: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59724: LD_ADDR_VAR 0 54
59728: PUSH
59729: LD_INT 2
59731: PUSH
59732: LD_INT 1
59734: NEG
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 3
59742: PUSH
59743: LD_INT 0
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 3
59752: PUSH
59753: LD_INT 1
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: LIST
59764: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59765: LD_ADDR_VAR 0 55
59769: PUSH
59770: LD_INT 3
59772: PUSH
59773: LD_INT 2
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 3
59782: PUSH
59783: LD_INT 3
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 2
59792: PUSH
59793: LD_INT 3
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: LIST
59804: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59805: LD_ADDR_VAR 0 56
59809: PUSH
59810: LD_INT 1
59812: PUSH
59813: LD_INT 3
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 0
59822: PUSH
59823: LD_INT 3
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 1
59832: NEG
59833: PUSH
59834: LD_INT 2
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: LIST
59845: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59846: LD_ADDR_VAR 0 57
59850: PUSH
59851: LD_INT 2
59853: NEG
59854: PUSH
59855: LD_INT 1
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 3
59864: NEG
59865: PUSH
59866: LD_INT 0
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 3
59875: NEG
59876: PUSH
59877: LD_INT 1
59879: NEG
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: LIST
59889: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59890: LD_ADDR_VAR 0 58
59894: PUSH
59895: LD_INT 2
59897: NEG
59898: PUSH
59899: LD_INT 3
59901: NEG
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 3
59909: NEG
59910: PUSH
59911: LD_INT 2
59913: NEG
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 3
59921: NEG
59922: PUSH
59923: LD_INT 3
59925: NEG
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: LIST
59935: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59936: LD_ADDR_VAR 0 59
59940: PUSH
59941: LD_INT 1
59943: NEG
59944: PUSH
59945: LD_INT 2
59947: NEG
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_INT 0
59955: PUSH
59956: LD_INT 2
59958: NEG
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 1
59966: PUSH
59967: LD_INT 1
59969: NEG
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: LIST
59979: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59980: LD_ADDR_VAR 0 60
59984: PUSH
59985: LD_INT 1
59987: PUSH
59988: LD_INT 1
59990: NEG
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 2
59998: PUSH
59999: LD_INT 0
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 2
60008: PUSH
60009: LD_INT 1
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: LIST
60020: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60021: LD_ADDR_VAR 0 61
60025: PUSH
60026: LD_INT 2
60028: PUSH
60029: LD_INT 1
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 2
60038: PUSH
60039: LD_INT 2
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 1
60048: PUSH
60049: LD_INT 2
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: LIST
60060: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60061: LD_ADDR_VAR 0 62
60065: PUSH
60066: LD_INT 1
60068: PUSH
60069: LD_INT 2
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 0
60078: PUSH
60079: LD_INT 2
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 1
60088: NEG
60089: PUSH
60090: LD_INT 1
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: LIST
60101: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60102: LD_ADDR_VAR 0 63
60106: PUSH
60107: LD_INT 1
60109: NEG
60110: PUSH
60111: LD_INT 1
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 2
60120: NEG
60121: PUSH
60122: LD_INT 0
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 2
60131: NEG
60132: PUSH
60133: LD_INT 1
60135: NEG
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: LIST
60145: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60146: LD_ADDR_VAR 0 64
60150: PUSH
60151: LD_INT 1
60153: NEG
60154: PUSH
60155: LD_INT 2
60157: NEG
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 2
60165: NEG
60166: PUSH
60167: LD_INT 1
60169: NEG
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 2
60177: NEG
60178: PUSH
60179: LD_INT 2
60181: NEG
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: LIST
60191: ST_TO_ADDR
// end ; 2 :
60192: GO 63458
60194: LD_INT 2
60196: DOUBLE
60197: EQUAL
60198: IFTRUE 60202
60200: GO 63457
60202: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60203: LD_ADDR_VAR 0 29
60207: PUSH
60208: LD_INT 4
60210: PUSH
60211: LD_INT 0
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 4
60220: PUSH
60221: LD_INT 1
60223: NEG
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 5
60231: PUSH
60232: LD_INT 0
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 5
60241: PUSH
60242: LD_INT 1
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 4
60251: PUSH
60252: LD_INT 1
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 3
60261: PUSH
60262: LD_INT 0
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 3
60271: PUSH
60272: LD_INT 1
60274: NEG
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 3
60282: PUSH
60283: LD_INT 2
60285: NEG
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 5
60293: PUSH
60294: LD_INT 2
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 3
60303: PUSH
60304: LD_INT 3
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 3
60313: PUSH
60314: LD_INT 2
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 4
60323: PUSH
60324: LD_INT 3
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 4
60333: PUSH
60334: LD_INT 4
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 3
60343: PUSH
60344: LD_INT 4
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 2
60353: PUSH
60354: LD_INT 3
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 2
60363: PUSH
60364: LD_INT 2
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 4
60373: PUSH
60374: LD_INT 2
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 2
60383: PUSH
60384: LD_INT 4
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 0
60393: PUSH
60394: LD_INT 4
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: LD_INT 0
60403: PUSH
60404: LD_INT 3
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 1
60413: PUSH
60414: LD_INT 4
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 1
60423: PUSH
60424: LD_INT 5
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 0
60433: PUSH
60434: LD_INT 5
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 1
60443: NEG
60444: PUSH
60445: LD_INT 4
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 1
60454: NEG
60455: PUSH
60456: LD_INT 3
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 2
60465: PUSH
60466: LD_INT 5
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: LD_INT 2
60475: NEG
60476: PUSH
60477: LD_INT 3
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 3
60486: NEG
60487: PUSH
60488: LD_INT 0
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 3
60497: NEG
60498: PUSH
60499: LD_INT 1
60501: NEG
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 2
60509: NEG
60510: PUSH
60511: LD_INT 0
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 2
60520: NEG
60521: PUSH
60522: LD_INT 1
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 3
60531: NEG
60532: PUSH
60533: LD_INT 1
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 4
60542: NEG
60543: PUSH
60544: LD_INT 0
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 4
60553: NEG
60554: PUSH
60555: LD_INT 1
60557: NEG
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 4
60565: NEG
60566: PUSH
60567: LD_INT 2
60569: NEG
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 2
60577: NEG
60578: PUSH
60579: LD_INT 2
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 4
60588: NEG
60589: PUSH
60590: LD_INT 4
60592: NEG
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 4
60600: NEG
60601: PUSH
60602: LD_INT 5
60604: NEG
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 3
60612: NEG
60613: PUSH
60614: LD_INT 4
60616: NEG
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 3
60624: NEG
60625: PUSH
60626: LD_INT 3
60628: NEG
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 4
60636: NEG
60637: PUSH
60638: LD_INT 3
60640: NEG
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 5
60648: NEG
60649: PUSH
60650: LD_INT 4
60652: NEG
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 5
60660: NEG
60661: PUSH
60662: LD_INT 5
60664: NEG
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 3
60672: NEG
60673: PUSH
60674: LD_INT 5
60676: NEG
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 5
60684: NEG
60685: PUSH
60686: LD_INT 3
60688: NEG
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60741: LD_ADDR_VAR 0 30
60745: PUSH
60746: LD_INT 4
60748: PUSH
60749: LD_INT 4
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 4
60758: PUSH
60759: LD_INT 3
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 5
60768: PUSH
60769: LD_INT 4
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 5
60778: PUSH
60779: LD_INT 5
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 4
60788: PUSH
60789: LD_INT 5
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 3
60798: PUSH
60799: LD_INT 4
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 3
60808: PUSH
60809: LD_INT 3
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 5
60818: PUSH
60819: LD_INT 3
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 3
60828: PUSH
60829: LD_INT 5
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 0
60838: PUSH
60839: LD_INT 3
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 0
60848: PUSH
60849: LD_INT 2
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 1
60858: PUSH
60859: LD_INT 3
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 1
60868: PUSH
60869: LD_INT 4
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 0
60878: PUSH
60879: LD_INT 4
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: LD_INT 1
60888: NEG
60889: PUSH
60890: LD_INT 3
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 1
60899: NEG
60900: PUSH
60901: LD_INT 2
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 2
60910: PUSH
60911: LD_INT 4
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 2
60920: NEG
60921: PUSH
60922: LD_INT 2
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: LD_INT 4
60931: NEG
60932: PUSH
60933: LD_INT 0
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PUSH
60940: LD_INT 4
60942: NEG
60943: PUSH
60944: LD_INT 1
60946: NEG
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 3
60954: NEG
60955: PUSH
60956: LD_INT 0
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 3
60965: NEG
60966: PUSH
60967: LD_INT 1
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 4
60976: NEG
60977: PUSH
60978: LD_INT 1
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 5
60987: NEG
60988: PUSH
60989: LD_INT 0
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 5
60998: NEG
60999: PUSH
61000: LD_INT 1
61002: NEG
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 5
61010: NEG
61011: PUSH
61012: LD_INT 2
61014: NEG
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 3
61022: NEG
61023: PUSH
61024: LD_INT 2
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 3
61033: NEG
61034: PUSH
61035: LD_INT 3
61037: NEG
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: LD_INT 3
61045: NEG
61046: PUSH
61047: LD_INT 4
61049: NEG
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 2
61057: NEG
61058: PUSH
61059: LD_INT 3
61061: NEG
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 2
61069: NEG
61070: PUSH
61071: LD_INT 2
61073: NEG
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 3
61081: NEG
61082: PUSH
61083: LD_INT 2
61085: NEG
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 4
61093: NEG
61094: PUSH
61095: LD_INT 3
61097: NEG
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 4
61105: NEG
61106: PUSH
61107: LD_INT 4
61109: NEG
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 2
61117: NEG
61118: PUSH
61119: LD_INT 4
61121: NEG
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 4
61129: NEG
61130: PUSH
61131: LD_INT 2
61133: NEG
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 0
61141: PUSH
61142: LD_INT 4
61144: NEG
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 0
61152: PUSH
61153: LD_INT 5
61155: NEG
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 1
61163: PUSH
61164: LD_INT 4
61166: NEG
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 1
61174: PUSH
61175: LD_INT 3
61177: NEG
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 0
61185: PUSH
61186: LD_INT 3
61188: NEG
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 1
61196: NEG
61197: PUSH
61198: LD_INT 4
61200: NEG
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 1
61208: NEG
61209: PUSH
61210: LD_INT 5
61212: NEG
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: LD_INT 2
61220: PUSH
61221: LD_INT 3
61223: NEG
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: LD_INT 2
61231: NEG
61232: PUSH
61233: LD_INT 5
61235: NEG
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61288: LD_ADDR_VAR 0 31
61292: PUSH
61293: LD_INT 0
61295: PUSH
61296: LD_INT 4
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 0
61305: PUSH
61306: LD_INT 3
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 1
61315: PUSH
61316: LD_INT 4
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 1
61325: PUSH
61326: LD_INT 5
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 0
61335: PUSH
61336: LD_INT 5
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 1
61345: NEG
61346: PUSH
61347: LD_INT 4
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 1
61356: NEG
61357: PUSH
61358: LD_INT 3
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 2
61367: PUSH
61368: LD_INT 5
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 2
61377: NEG
61378: PUSH
61379: LD_INT 3
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 3
61388: NEG
61389: PUSH
61390: LD_INT 0
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 3
61399: NEG
61400: PUSH
61401: LD_INT 1
61403: NEG
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 2
61411: NEG
61412: PUSH
61413: LD_INT 0
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 2
61422: NEG
61423: PUSH
61424: LD_INT 1
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 3
61433: NEG
61434: PUSH
61435: LD_INT 1
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: LD_INT 4
61444: NEG
61445: PUSH
61446: LD_INT 0
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 4
61455: NEG
61456: PUSH
61457: LD_INT 1
61459: NEG
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: LD_INT 4
61467: NEG
61468: PUSH
61469: LD_INT 2
61471: NEG
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: PUSH
61477: LD_INT 2
61479: NEG
61480: PUSH
61481: LD_INT 2
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: PUSH
61488: LD_INT 4
61490: NEG
61491: PUSH
61492: LD_INT 4
61494: NEG
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 4
61502: NEG
61503: PUSH
61504: LD_INT 5
61506: NEG
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: LD_INT 3
61514: NEG
61515: PUSH
61516: LD_INT 4
61518: NEG
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 3
61526: NEG
61527: PUSH
61528: LD_INT 3
61530: NEG
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 4
61538: NEG
61539: PUSH
61540: LD_INT 3
61542: NEG
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 5
61550: NEG
61551: PUSH
61552: LD_INT 4
61554: NEG
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 5
61562: NEG
61563: PUSH
61564: LD_INT 5
61566: NEG
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 3
61574: NEG
61575: PUSH
61576: LD_INT 5
61578: NEG
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: LD_INT 5
61586: NEG
61587: PUSH
61588: LD_INT 3
61590: NEG
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_INT 0
61598: PUSH
61599: LD_INT 3
61601: NEG
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 0
61609: PUSH
61610: LD_INT 4
61612: NEG
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 1
61620: PUSH
61621: LD_INT 3
61623: NEG
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 1
61631: PUSH
61632: LD_INT 2
61634: NEG
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 0
61642: PUSH
61643: LD_INT 2
61645: NEG
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 1
61653: NEG
61654: PUSH
61655: LD_INT 3
61657: NEG
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: LD_INT 1
61665: NEG
61666: PUSH
61667: LD_INT 4
61669: NEG
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 2
61677: PUSH
61678: LD_INT 2
61680: NEG
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: LD_INT 2
61688: NEG
61689: PUSH
61690: LD_INT 4
61692: NEG
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 4
61700: PUSH
61701: LD_INT 0
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 4
61710: PUSH
61711: LD_INT 1
61713: NEG
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PUSH
61719: LD_INT 5
61721: PUSH
61722: LD_INT 0
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 5
61731: PUSH
61732: LD_INT 1
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: LD_INT 4
61741: PUSH
61742: LD_INT 1
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 3
61751: PUSH
61752: LD_INT 0
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 3
61761: PUSH
61762: LD_INT 1
61764: NEG
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: LD_INT 3
61772: PUSH
61773: LD_INT 2
61775: NEG
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 5
61783: PUSH
61784: LD_INT 2
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61838: LD_ADDR_VAR 0 32
61842: PUSH
61843: LD_INT 4
61845: NEG
61846: PUSH
61847: LD_INT 0
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 4
61856: NEG
61857: PUSH
61858: LD_INT 1
61860: NEG
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: LD_INT 3
61868: NEG
61869: PUSH
61870: LD_INT 0
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: LD_INT 3
61879: NEG
61880: PUSH
61881: LD_INT 1
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 4
61890: NEG
61891: PUSH
61892: LD_INT 1
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: PUSH
61899: LD_INT 5
61901: NEG
61902: PUSH
61903: LD_INT 0
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: LD_INT 5
61912: NEG
61913: PUSH
61914: LD_INT 1
61916: NEG
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 5
61924: NEG
61925: PUSH
61926: LD_INT 2
61928: NEG
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: LD_INT 3
61936: NEG
61937: PUSH
61938: LD_INT 2
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 3
61947: NEG
61948: PUSH
61949: LD_INT 3
61951: NEG
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 3
61959: NEG
61960: PUSH
61961: LD_INT 4
61963: NEG
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 2
61971: NEG
61972: PUSH
61973: LD_INT 3
61975: NEG
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: LD_INT 2
61983: NEG
61984: PUSH
61985: LD_INT 2
61987: NEG
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 3
61995: NEG
61996: PUSH
61997: LD_INT 2
61999: NEG
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 4
62007: NEG
62008: PUSH
62009: LD_INT 3
62011: NEG
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 4
62019: NEG
62020: PUSH
62021: LD_INT 4
62023: NEG
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 2
62031: NEG
62032: PUSH
62033: LD_INT 4
62035: NEG
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: PUSH
62041: LD_INT 4
62043: NEG
62044: PUSH
62045: LD_INT 2
62047: NEG
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 0
62055: PUSH
62056: LD_INT 4
62058: NEG
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 0
62066: PUSH
62067: LD_INT 5
62069: NEG
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 1
62077: PUSH
62078: LD_INT 4
62080: NEG
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: PUSH
62086: LD_INT 1
62088: PUSH
62089: LD_INT 3
62091: NEG
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 0
62099: PUSH
62100: LD_INT 3
62102: NEG
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 1
62110: NEG
62111: PUSH
62112: LD_INT 4
62114: NEG
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: LD_INT 1
62122: NEG
62123: PUSH
62124: LD_INT 5
62126: NEG
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 2
62134: PUSH
62135: LD_INT 3
62137: NEG
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 2
62145: NEG
62146: PUSH
62147: LD_INT 5
62149: NEG
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 3
62157: PUSH
62158: LD_INT 0
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 3
62167: PUSH
62168: LD_INT 1
62170: NEG
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: PUSH
62176: LD_INT 4
62178: PUSH
62179: LD_INT 0
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: PUSH
62186: LD_INT 4
62188: PUSH
62189: LD_INT 1
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: PUSH
62196: LD_INT 3
62198: PUSH
62199: LD_INT 1
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: PUSH
62206: LD_INT 2
62208: PUSH
62209: LD_INT 0
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: PUSH
62216: LD_INT 2
62218: PUSH
62219: LD_INT 1
62221: NEG
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 2
62229: PUSH
62230: LD_INT 2
62232: NEG
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: PUSH
62238: LD_INT 4
62240: PUSH
62241: LD_INT 2
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 4
62250: PUSH
62251: LD_INT 4
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 4
62260: PUSH
62261: LD_INT 3
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_INT 5
62270: PUSH
62271: LD_INT 4
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 5
62280: PUSH
62281: LD_INT 5
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 4
62290: PUSH
62291: LD_INT 5
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: LD_INT 3
62300: PUSH
62301: LD_INT 4
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: PUSH
62308: LD_INT 3
62310: PUSH
62311: LD_INT 3
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: LD_INT 5
62320: PUSH
62321: LD_INT 3
62323: PUSH
62324: EMPTY
62325: LIST
62326: LIST
62327: PUSH
62328: LD_INT 3
62330: PUSH
62331: LD_INT 5
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62385: LD_ADDR_VAR 0 33
62389: PUSH
62390: LD_INT 4
62392: NEG
62393: PUSH
62394: LD_INT 4
62396: NEG
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 4
62404: NEG
62405: PUSH
62406: LD_INT 5
62408: NEG
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 3
62416: NEG
62417: PUSH
62418: LD_INT 4
62420: NEG
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PUSH
62426: LD_INT 3
62428: NEG
62429: PUSH
62430: LD_INT 3
62432: NEG
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 4
62440: NEG
62441: PUSH
62442: LD_INT 3
62444: NEG
62445: PUSH
62446: EMPTY
62447: LIST
62448: LIST
62449: PUSH
62450: LD_INT 5
62452: NEG
62453: PUSH
62454: LD_INT 4
62456: NEG
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PUSH
62462: LD_INT 5
62464: NEG
62465: PUSH
62466: LD_INT 5
62468: NEG
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 3
62476: NEG
62477: PUSH
62478: LD_INT 5
62480: NEG
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: PUSH
62486: LD_INT 5
62488: NEG
62489: PUSH
62490: LD_INT 3
62492: NEG
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: LD_INT 0
62500: PUSH
62501: LD_INT 3
62503: NEG
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 0
62511: PUSH
62512: LD_INT 4
62514: NEG
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: PUSH
62520: LD_INT 1
62522: PUSH
62523: LD_INT 3
62525: NEG
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: LD_INT 1
62533: PUSH
62534: LD_INT 2
62536: NEG
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 0
62544: PUSH
62545: LD_INT 2
62547: NEG
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PUSH
62553: LD_INT 1
62555: NEG
62556: PUSH
62557: LD_INT 3
62559: NEG
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 1
62567: NEG
62568: PUSH
62569: LD_INT 4
62571: NEG
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 2
62579: PUSH
62580: LD_INT 2
62582: NEG
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 2
62590: NEG
62591: PUSH
62592: LD_INT 4
62594: NEG
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PUSH
62600: LD_INT 4
62602: PUSH
62603: LD_INT 0
62605: PUSH
62606: EMPTY
62607: LIST
62608: LIST
62609: PUSH
62610: LD_INT 4
62612: PUSH
62613: LD_INT 1
62615: NEG
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PUSH
62621: LD_INT 5
62623: PUSH
62624: LD_INT 0
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 5
62633: PUSH
62634: LD_INT 1
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: LD_INT 4
62643: PUSH
62644: LD_INT 1
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: LD_INT 3
62653: PUSH
62654: LD_INT 0
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: PUSH
62661: LD_INT 3
62663: PUSH
62664: LD_INT 1
62666: NEG
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: PUSH
62672: LD_INT 3
62674: PUSH
62675: LD_INT 2
62677: NEG
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 5
62685: PUSH
62686: LD_INT 2
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 3
62695: PUSH
62696: LD_INT 3
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 3
62705: PUSH
62706: LD_INT 2
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: PUSH
62713: LD_INT 4
62715: PUSH
62716: LD_INT 3
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 4
62725: PUSH
62726: LD_INT 4
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 3
62735: PUSH
62736: LD_INT 4
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: LD_INT 2
62745: PUSH
62746: LD_INT 3
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 2
62755: PUSH
62756: LD_INT 2
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 4
62765: PUSH
62766: LD_INT 2
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: LD_INT 2
62775: PUSH
62776: LD_INT 4
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 0
62785: PUSH
62786: LD_INT 4
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: LD_INT 0
62795: PUSH
62796: LD_INT 3
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: LD_INT 1
62805: PUSH
62806: LD_INT 4
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: LD_INT 1
62815: PUSH
62816: LD_INT 5
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: LD_INT 0
62825: PUSH
62826: LD_INT 5
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: LD_INT 1
62835: NEG
62836: PUSH
62837: LD_INT 4
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 1
62846: NEG
62847: PUSH
62848: LD_INT 3
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: LD_INT 2
62857: PUSH
62858: LD_INT 5
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: PUSH
62865: LD_INT 2
62867: NEG
62868: PUSH
62869: LD_INT 3
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: LIST
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: LIST
62896: LIST
62897: LIST
62898: LIST
62899: LIST
62900: LIST
62901: LIST
62902: LIST
62903: LIST
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62923: LD_ADDR_VAR 0 34
62927: PUSH
62928: LD_INT 0
62930: PUSH
62931: LD_INT 4
62933: NEG
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: PUSH
62939: LD_INT 0
62941: PUSH
62942: LD_INT 5
62944: NEG
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PUSH
62950: LD_INT 1
62952: PUSH
62953: LD_INT 4
62955: NEG
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_INT 1
62963: PUSH
62964: LD_INT 3
62966: NEG
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: PUSH
62972: LD_INT 0
62974: PUSH
62975: LD_INT 3
62977: NEG
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: PUSH
62983: LD_INT 1
62985: NEG
62986: PUSH
62987: LD_INT 4
62989: NEG
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PUSH
62995: LD_INT 1
62997: NEG
62998: PUSH
62999: LD_INT 5
63001: NEG
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: PUSH
63007: LD_INT 2
63009: PUSH
63010: LD_INT 3
63012: NEG
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: LD_INT 2
63020: NEG
63021: PUSH
63022: LD_INT 5
63024: NEG
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: PUSH
63030: LD_INT 3
63032: PUSH
63033: LD_INT 0
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: LD_INT 3
63042: PUSH
63043: LD_INT 1
63045: NEG
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: LD_INT 4
63053: PUSH
63054: LD_INT 0
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: LD_INT 4
63063: PUSH
63064: LD_INT 1
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PUSH
63071: LD_INT 3
63073: PUSH
63074: LD_INT 1
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PUSH
63081: LD_INT 2
63083: PUSH
63084: LD_INT 0
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: LD_INT 2
63093: PUSH
63094: LD_INT 1
63096: NEG
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: PUSH
63102: LD_INT 2
63104: PUSH
63105: LD_INT 2
63107: NEG
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 4
63115: PUSH
63116: LD_INT 2
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 4
63125: PUSH
63126: LD_INT 4
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: PUSH
63133: LD_INT 4
63135: PUSH
63136: LD_INT 3
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: PUSH
63143: LD_INT 5
63145: PUSH
63146: LD_INT 4
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: PUSH
63153: LD_INT 5
63155: PUSH
63156: LD_INT 5
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: PUSH
63163: LD_INT 4
63165: PUSH
63166: LD_INT 5
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: PUSH
63173: LD_INT 3
63175: PUSH
63176: LD_INT 4
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 3
63185: PUSH
63186: LD_INT 3
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: PUSH
63193: LD_INT 5
63195: PUSH
63196: LD_INT 3
63198: PUSH
63199: EMPTY
63200: LIST
63201: LIST
63202: PUSH
63203: LD_INT 3
63205: PUSH
63206: LD_INT 5
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: LD_INT 0
63215: PUSH
63216: LD_INT 3
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: PUSH
63223: LD_INT 0
63225: PUSH
63226: LD_INT 2
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: PUSH
63233: LD_INT 1
63235: PUSH
63236: LD_INT 3
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: PUSH
63243: LD_INT 1
63245: PUSH
63246: LD_INT 4
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: PUSH
63253: LD_INT 0
63255: PUSH
63256: LD_INT 4
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: PUSH
63263: LD_INT 1
63265: NEG
63266: PUSH
63267: LD_INT 3
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: LD_INT 1
63276: NEG
63277: PUSH
63278: LD_INT 2
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: PUSH
63285: LD_INT 2
63287: PUSH
63288: LD_INT 4
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 2
63297: NEG
63298: PUSH
63299: LD_INT 2
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: LD_INT 4
63308: NEG
63309: PUSH
63310: LD_INT 0
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: PUSH
63317: LD_INT 4
63319: NEG
63320: PUSH
63321: LD_INT 1
63323: NEG
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 3
63331: NEG
63332: PUSH
63333: LD_INT 0
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PUSH
63340: LD_INT 3
63342: NEG
63343: PUSH
63344: LD_INT 1
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: LD_INT 4
63353: NEG
63354: PUSH
63355: LD_INT 1
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: PUSH
63362: LD_INT 5
63364: NEG
63365: PUSH
63366: LD_INT 0
63368: PUSH
63369: EMPTY
63370: LIST
63371: LIST
63372: PUSH
63373: LD_INT 5
63375: NEG
63376: PUSH
63377: LD_INT 1
63379: NEG
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 5
63387: NEG
63388: PUSH
63389: LD_INT 2
63391: NEG
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 3
63399: NEG
63400: PUSH
63401: LD_INT 2
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: LIST
63412: LIST
63413: LIST
63414: LIST
63415: LIST
63416: LIST
63417: LIST
63418: LIST
63419: LIST
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: LIST
63436: LIST
63437: LIST
63438: LIST
63439: LIST
63440: LIST
63441: LIST
63442: LIST
63443: LIST
63444: LIST
63445: LIST
63446: LIST
63447: LIST
63448: LIST
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: ST_TO_ADDR
// end ; end ;
63455: GO 63458
63457: POP
// case btype of b_depot , b_warehouse :
63458: LD_VAR 0 1
63462: PUSH
63463: LD_INT 0
63465: DOUBLE
63466: EQUAL
63467: IFTRUE 63477
63469: LD_INT 1
63471: DOUBLE
63472: EQUAL
63473: IFTRUE 63477
63475: GO 63678
63477: POP
// case nation of nation_american :
63478: LD_VAR 0 5
63482: PUSH
63483: LD_INT 1
63485: DOUBLE
63486: EQUAL
63487: IFTRUE 63491
63489: GO 63547
63491: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63492: LD_ADDR_VAR 0 9
63496: PUSH
63497: LD_VAR 0 11
63501: PUSH
63502: LD_VAR 0 12
63506: PUSH
63507: LD_VAR 0 13
63511: PUSH
63512: LD_VAR 0 14
63516: PUSH
63517: LD_VAR 0 15
63521: PUSH
63522: LD_VAR 0 16
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: PUSH
63535: LD_VAR 0 4
63539: PUSH
63540: LD_INT 1
63542: PLUS
63543: ARRAY
63544: ST_TO_ADDR
63545: GO 63676
63547: LD_INT 2
63549: DOUBLE
63550: EQUAL
63551: IFTRUE 63555
63553: GO 63611
63555: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63556: LD_ADDR_VAR 0 9
63560: PUSH
63561: LD_VAR 0 17
63565: PUSH
63566: LD_VAR 0 18
63570: PUSH
63571: LD_VAR 0 19
63575: PUSH
63576: LD_VAR 0 20
63580: PUSH
63581: LD_VAR 0 21
63585: PUSH
63586: LD_VAR 0 22
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: LIST
63595: LIST
63596: LIST
63597: LIST
63598: PUSH
63599: LD_VAR 0 4
63603: PUSH
63604: LD_INT 1
63606: PLUS
63607: ARRAY
63608: ST_TO_ADDR
63609: GO 63676
63611: LD_INT 3
63613: DOUBLE
63614: EQUAL
63615: IFTRUE 63619
63617: GO 63675
63619: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63620: LD_ADDR_VAR 0 9
63624: PUSH
63625: LD_VAR 0 23
63629: PUSH
63630: LD_VAR 0 24
63634: PUSH
63635: LD_VAR 0 25
63639: PUSH
63640: LD_VAR 0 26
63644: PUSH
63645: LD_VAR 0 27
63649: PUSH
63650: LD_VAR 0 28
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: LIST
63659: LIST
63660: LIST
63661: LIST
63662: PUSH
63663: LD_VAR 0 4
63667: PUSH
63668: LD_INT 1
63670: PLUS
63671: ARRAY
63672: ST_TO_ADDR
63673: GO 63676
63675: POP
63676: GO 64231
63678: LD_INT 2
63680: DOUBLE
63681: EQUAL
63682: IFTRUE 63692
63684: LD_INT 3
63686: DOUBLE
63687: EQUAL
63688: IFTRUE 63692
63690: GO 63748
63692: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63693: LD_ADDR_VAR 0 9
63697: PUSH
63698: LD_VAR 0 29
63702: PUSH
63703: LD_VAR 0 30
63707: PUSH
63708: LD_VAR 0 31
63712: PUSH
63713: LD_VAR 0 32
63717: PUSH
63718: LD_VAR 0 33
63722: PUSH
63723: LD_VAR 0 34
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: LIST
63734: LIST
63735: PUSH
63736: LD_VAR 0 4
63740: PUSH
63741: LD_INT 1
63743: PLUS
63744: ARRAY
63745: ST_TO_ADDR
63746: GO 64231
63748: LD_INT 16
63750: DOUBLE
63751: EQUAL
63752: IFTRUE 63810
63754: LD_INT 17
63756: DOUBLE
63757: EQUAL
63758: IFTRUE 63810
63760: LD_INT 18
63762: DOUBLE
63763: EQUAL
63764: IFTRUE 63810
63766: LD_INT 19
63768: DOUBLE
63769: EQUAL
63770: IFTRUE 63810
63772: LD_INT 22
63774: DOUBLE
63775: EQUAL
63776: IFTRUE 63810
63778: LD_INT 20
63780: DOUBLE
63781: EQUAL
63782: IFTRUE 63810
63784: LD_INT 21
63786: DOUBLE
63787: EQUAL
63788: IFTRUE 63810
63790: LD_INT 23
63792: DOUBLE
63793: EQUAL
63794: IFTRUE 63810
63796: LD_INT 24
63798: DOUBLE
63799: EQUAL
63800: IFTRUE 63810
63802: LD_INT 25
63804: DOUBLE
63805: EQUAL
63806: IFTRUE 63810
63808: GO 63866
63810: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63811: LD_ADDR_VAR 0 9
63815: PUSH
63816: LD_VAR 0 35
63820: PUSH
63821: LD_VAR 0 36
63825: PUSH
63826: LD_VAR 0 37
63830: PUSH
63831: LD_VAR 0 38
63835: PUSH
63836: LD_VAR 0 39
63840: PUSH
63841: LD_VAR 0 40
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: LIST
63850: LIST
63851: LIST
63852: LIST
63853: PUSH
63854: LD_VAR 0 4
63858: PUSH
63859: LD_INT 1
63861: PLUS
63862: ARRAY
63863: ST_TO_ADDR
63864: GO 64231
63866: LD_INT 6
63868: DOUBLE
63869: EQUAL
63870: IFTRUE 63922
63872: LD_INT 7
63874: DOUBLE
63875: EQUAL
63876: IFTRUE 63922
63878: LD_INT 8
63880: DOUBLE
63881: EQUAL
63882: IFTRUE 63922
63884: LD_INT 13
63886: DOUBLE
63887: EQUAL
63888: IFTRUE 63922
63890: LD_INT 12
63892: DOUBLE
63893: EQUAL
63894: IFTRUE 63922
63896: LD_INT 15
63898: DOUBLE
63899: EQUAL
63900: IFTRUE 63922
63902: LD_INT 11
63904: DOUBLE
63905: EQUAL
63906: IFTRUE 63922
63908: LD_INT 14
63910: DOUBLE
63911: EQUAL
63912: IFTRUE 63922
63914: LD_INT 10
63916: DOUBLE
63917: EQUAL
63918: IFTRUE 63922
63920: GO 63978
63922: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63923: LD_ADDR_VAR 0 9
63927: PUSH
63928: LD_VAR 0 41
63932: PUSH
63933: LD_VAR 0 42
63937: PUSH
63938: LD_VAR 0 43
63942: PUSH
63943: LD_VAR 0 44
63947: PUSH
63948: LD_VAR 0 45
63952: PUSH
63953: LD_VAR 0 46
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: PUSH
63966: LD_VAR 0 4
63970: PUSH
63971: LD_INT 1
63973: PLUS
63974: ARRAY
63975: ST_TO_ADDR
63976: GO 64231
63978: LD_INT 36
63980: DOUBLE
63981: EQUAL
63982: IFTRUE 63986
63984: GO 64042
63986: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63987: LD_ADDR_VAR 0 9
63991: PUSH
63992: LD_VAR 0 47
63996: PUSH
63997: LD_VAR 0 48
64001: PUSH
64002: LD_VAR 0 49
64006: PUSH
64007: LD_VAR 0 50
64011: PUSH
64012: LD_VAR 0 51
64016: PUSH
64017: LD_VAR 0 52
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: LIST
64026: LIST
64027: LIST
64028: LIST
64029: PUSH
64030: LD_VAR 0 4
64034: PUSH
64035: LD_INT 1
64037: PLUS
64038: ARRAY
64039: ST_TO_ADDR
64040: GO 64231
64042: LD_INT 4
64044: DOUBLE
64045: EQUAL
64046: IFTRUE 64068
64048: LD_INT 5
64050: DOUBLE
64051: EQUAL
64052: IFTRUE 64068
64054: LD_INT 34
64056: DOUBLE
64057: EQUAL
64058: IFTRUE 64068
64060: LD_INT 37
64062: DOUBLE
64063: EQUAL
64064: IFTRUE 64068
64066: GO 64124
64068: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
64069: LD_ADDR_VAR 0 9
64073: PUSH
64074: LD_VAR 0 53
64078: PUSH
64079: LD_VAR 0 54
64083: PUSH
64084: LD_VAR 0 55
64088: PUSH
64089: LD_VAR 0 56
64093: PUSH
64094: LD_VAR 0 57
64098: PUSH
64099: LD_VAR 0 58
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: LIST
64111: PUSH
64112: LD_VAR 0 4
64116: PUSH
64117: LD_INT 1
64119: PLUS
64120: ARRAY
64121: ST_TO_ADDR
64122: GO 64231
64124: LD_INT 31
64126: DOUBLE
64127: EQUAL
64128: IFTRUE 64174
64130: LD_INT 32
64132: DOUBLE
64133: EQUAL
64134: IFTRUE 64174
64136: LD_INT 33
64138: DOUBLE
64139: EQUAL
64140: IFTRUE 64174
64142: LD_INT 27
64144: DOUBLE
64145: EQUAL
64146: IFTRUE 64174
64148: LD_INT 26
64150: DOUBLE
64151: EQUAL
64152: IFTRUE 64174
64154: LD_INT 28
64156: DOUBLE
64157: EQUAL
64158: IFTRUE 64174
64160: LD_INT 29
64162: DOUBLE
64163: EQUAL
64164: IFTRUE 64174
64166: LD_INT 30
64168: DOUBLE
64169: EQUAL
64170: IFTRUE 64174
64172: GO 64230
64174: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64175: LD_ADDR_VAR 0 9
64179: PUSH
64180: LD_VAR 0 59
64184: PUSH
64185: LD_VAR 0 60
64189: PUSH
64190: LD_VAR 0 61
64194: PUSH
64195: LD_VAR 0 62
64199: PUSH
64200: LD_VAR 0 63
64204: PUSH
64205: LD_VAR 0 64
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: PUSH
64218: LD_VAR 0 4
64222: PUSH
64223: LD_INT 1
64225: PLUS
64226: ARRAY
64227: ST_TO_ADDR
64228: GO 64231
64230: POP
// temp_list2 = [ ] ;
64231: LD_ADDR_VAR 0 10
64235: PUSH
64236: EMPTY
64237: ST_TO_ADDR
// for i in temp_list do
64238: LD_ADDR_VAR 0 8
64242: PUSH
64243: LD_VAR 0 9
64247: PUSH
64248: FOR_IN
64249: IFFALSE 64301
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64251: LD_ADDR_VAR 0 10
64255: PUSH
64256: LD_VAR 0 10
64260: PUSH
64261: LD_VAR 0 8
64265: PUSH
64266: LD_INT 1
64268: ARRAY
64269: PUSH
64270: LD_VAR 0 2
64274: PLUS
64275: PUSH
64276: LD_VAR 0 8
64280: PUSH
64281: LD_INT 2
64283: ARRAY
64284: PUSH
64285: LD_VAR 0 3
64289: PLUS
64290: PUSH
64291: EMPTY
64292: LIST
64293: LIST
64294: PUSH
64295: EMPTY
64296: LIST
64297: ADD
64298: ST_TO_ADDR
64299: GO 64248
64301: POP
64302: POP
// result = temp_list2 ;
64303: LD_ADDR_VAR 0 7
64307: PUSH
64308: LD_VAR 0 10
64312: ST_TO_ADDR
// end ;
64313: LD_VAR 0 7
64317: RET
// export function EnemyInRange ( unit , dist ) ; begin
64318: LD_INT 0
64320: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64321: LD_ADDR_VAR 0 3
64325: PUSH
64326: LD_VAR 0 1
64330: PPUSH
64331: CALL_OW 255
64335: PPUSH
64336: LD_VAR 0 1
64340: PPUSH
64341: CALL_OW 250
64345: PPUSH
64346: LD_VAR 0 1
64350: PPUSH
64351: CALL_OW 251
64355: PPUSH
64356: LD_VAR 0 2
64360: PPUSH
64361: CALL 37714 0 4
64365: PUSH
64366: LD_INT 4
64368: ARRAY
64369: ST_TO_ADDR
// end ;
64370: LD_VAR 0 3
64374: RET
// export function PlayerSeeMe ( unit ) ; begin
64375: LD_INT 0
64377: PPUSH
// result := See ( your_side , unit ) ;
64378: LD_ADDR_VAR 0 2
64382: PUSH
64383: LD_OWVAR 2
64387: PPUSH
64388: LD_VAR 0 1
64392: PPUSH
64393: CALL_OW 292
64397: ST_TO_ADDR
// end ;
64398: LD_VAR 0 2
64402: RET
// export function ReverseDir ( unit ) ; begin
64403: LD_INT 0
64405: PPUSH
// if not unit then
64406: LD_VAR 0 1
64410: NOT
64411: IFFALSE 64415
// exit ;
64413: GO 64438
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64415: LD_ADDR_VAR 0 2
64419: PUSH
64420: LD_VAR 0 1
64424: PPUSH
64425: CALL_OW 254
64429: PUSH
64430: LD_INT 3
64432: PLUS
64433: PUSH
64434: LD_INT 6
64436: MOD
64437: ST_TO_ADDR
// end ;
64438: LD_VAR 0 2
64442: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
64443: LD_INT 0
64445: PPUSH
64446: PPUSH
64447: PPUSH
64448: PPUSH
64449: PPUSH
// if not hexes then
64450: LD_VAR 0 2
64454: NOT
64455: IFFALSE 64459
// exit ;
64457: GO 64607
// dist := 9999 ;
64459: LD_ADDR_VAR 0 5
64463: PUSH
64464: LD_INT 9999
64466: ST_TO_ADDR
// for i = 1 to hexes do
64467: LD_ADDR_VAR 0 4
64471: PUSH
64472: DOUBLE
64473: LD_INT 1
64475: DEC
64476: ST_TO_ADDR
64477: LD_VAR 0 2
64481: PUSH
64482: FOR_TO
64483: IFFALSE 64595
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
64485: LD_VAR 0 1
64489: PPUSH
64490: LD_VAR 0 2
64494: PUSH
64495: LD_VAR 0 4
64499: ARRAY
64500: PUSH
64501: LD_INT 1
64503: ARRAY
64504: PPUSH
64505: LD_VAR 0 2
64509: PUSH
64510: LD_VAR 0 4
64514: ARRAY
64515: PUSH
64516: LD_INT 2
64518: ARRAY
64519: PPUSH
64520: CALL_OW 297
64524: PUSH
64525: LD_VAR 0 5
64529: LESS
64530: IFFALSE 64593
// begin hex := hexes [ i ] ;
64532: LD_ADDR_VAR 0 7
64536: PUSH
64537: LD_VAR 0 2
64541: PUSH
64542: LD_VAR 0 4
64546: ARRAY
64547: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64548: LD_ADDR_VAR 0 5
64552: PUSH
64553: LD_VAR 0 1
64557: PPUSH
64558: LD_VAR 0 2
64562: PUSH
64563: LD_VAR 0 4
64567: ARRAY
64568: PUSH
64569: LD_INT 1
64571: ARRAY
64572: PPUSH
64573: LD_VAR 0 2
64577: PUSH
64578: LD_VAR 0 4
64582: ARRAY
64583: PUSH
64584: LD_INT 2
64586: ARRAY
64587: PPUSH
64588: CALL_OW 297
64592: ST_TO_ADDR
// end ; end ;
64593: GO 64482
64595: POP
64596: POP
// result := hex ;
64597: LD_ADDR_VAR 0 3
64601: PUSH
64602: LD_VAR 0 7
64606: ST_TO_ADDR
// end ;
64607: LD_VAR 0 3
64611: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64612: LD_INT 0
64614: PPUSH
64615: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64616: LD_VAR 0 1
64620: NOT
64621: PUSH
64622: LD_VAR 0 1
64626: PUSH
64627: LD_INT 21
64629: PUSH
64630: LD_INT 2
64632: PUSH
64633: EMPTY
64634: LIST
64635: LIST
64636: PUSH
64637: LD_INT 23
64639: PUSH
64640: LD_INT 2
64642: PUSH
64643: EMPTY
64644: LIST
64645: LIST
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: PPUSH
64651: CALL_OW 69
64655: IN
64656: NOT
64657: OR
64658: IFFALSE 64662
// exit ;
64660: GO 64709
// for i = 1 to 3 do
64662: LD_ADDR_VAR 0 3
64666: PUSH
64667: DOUBLE
64668: LD_INT 1
64670: DEC
64671: ST_TO_ADDR
64672: LD_INT 3
64674: PUSH
64675: FOR_TO
64676: IFFALSE 64707
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64678: LD_VAR 0 1
64682: PPUSH
64683: CALL_OW 250
64687: PPUSH
64688: LD_VAR 0 1
64692: PPUSH
64693: CALL_OW 251
64697: PPUSH
64698: LD_INT 1
64700: PPUSH
64701: CALL_OW 453
64705: GO 64675
64707: POP
64708: POP
// end ;
64709: LD_VAR 0 2
64713: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64714: LD_INT 0
64716: PPUSH
64717: PPUSH
64718: PPUSH
64719: PPUSH
64720: PPUSH
64721: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64722: LD_VAR 0 1
64726: NOT
64727: PUSH
64728: LD_VAR 0 2
64732: NOT
64733: OR
64734: PUSH
64735: LD_VAR 0 1
64739: PPUSH
64740: CALL_OW 314
64744: OR
64745: IFFALSE 64749
// exit ;
64747: GO 65190
// x := GetX ( enemy_unit ) ;
64749: LD_ADDR_VAR 0 7
64753: PUSH
64754: LD_VAR 0 2
64758: PPUSH
64759: CALL_OW 250
64763: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64764: LD_ADDR_VAR 0 8
64768: PUSH
64769: LD_VAR 0 2
64773: PPUSH
64774: CALL_OW 251
64778: ST_TO_ADDR
// if not x or not y then
64779: LD_VAR 0 7
64783: NOT
64784: PUSH
64785: LD_VAR 0 8
64789: NOT
64790: OR
64791: IFFALSE 64795
// exit ;
64793: GO 65190
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64795: LD_ADDR_VAR 0 6
64799: PUSH
64800: LD_VAR 0 7
64804: PPUSH
64805: LD_INT 0
64807: PPUSH
64808: LD_INT 4
64810: PPUSH
64811: CALL_OW 272
64815: PUSH
64816: LD_VAR 0 8
64820: PPUSH
64821: LD_INT 0
64823: PPUSH
64824: LD_INT 4
64826: PPUSH
64827: CALL_OW 273
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: PUSH
64836: LD_VAR 0 7
64840: PPUSH
64841: LD_INT 1
64843: PPUSH
64844: LD_INT 4
64846: PPUSH
64847: CALL_OW 272
64851: PUSH
64852: LD_VAR 0 8
64856: PPUSH
64857: LD_INT 1
64859: PPUSH
64860: LD_INT 4
64862: PPUSH
64863: CALL_OW 273
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: PUSH
64872: LD_VAR 0 7
64876: PPUSH
64877: LD_INT 2
64879: PPUSH
64880: LD_INT 4
64882: PPUSH
64883: CALL_OW 272
64887: PUSH
64888: LD_VAR 0 8
64892: PPUSH
64893: LD_INT 2
64895: PPUSH
64896: LD_INT 4
64898: PPUSH
64899: CALL_OW 273
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: PUSH
64908: LD_VAR 0 7
64912: PPUSH
64913: LD_INT 3
64915: PPUSH
64916: LD_INT 4
64918: PPUSH
64919: CALL_OW 272
64923: PUSH
64924: LD_VAR 0 8
64928: PPUSH
64929: LD_INT 3
64931: PPUSH
64932: LD_INT 4
64934: PPUSH
64935: CALL_OW 273
64939: PUSH
64940: EMPTY
64941: LIST
64942: LIST
64943: PUSH
64944: LD_VAR 0 7
64948: PPUSH
64949: LD_INT 4
64951: PPUSH
64952: LD_INT 4
64954: PPUSH
64955: CALL_OW 272
64959: PUSH
64960: LD_VAR 0 8
64964: PPUSH
64965: LD_INT 4
64967: PPUSH
64968: LD_INT 4
64970: PPUSH
64971: CALL_OW 273
64975: PUSH
64976: EMPTY
64977: LIST
64978: LIST
64979: PUSH
64980: LD_VAR 0 7
64984: PPUSH
64985: LD_INT 5
64987: PPUSH
64988: LD_INT 4
64990: PPUSH
64991: CALL_OW 272
64995: PUSH
64996: LD_VAR 0 8
65000: PPUSH
65001: LD_INT 5
65003: PPUSH
65004: LD_INT 4
65006: PPUSH
65007: CALL_OW 273
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: LIST
65020: LIST
65021: LIST
65022: LIST
65023: ST_TO_ADDR
// for i = tmp downto 1 do
65024: LD_ADDR_VAR 0 4
65028: PUSH
65029: DOUBLE
65030: LD_VAR 0 6
65034: INC
65035: ST_TO_ADDR
65036: LD_INT 1
65038: PUSH
65039: FOR_DOWNTO
65040: IFFALSE 65141
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
65042: LD_VAR 0 6
65046: PUSH
65047: LD_VAR 0 4
65051: ARRAY
65052: PUSH
65053: LD_INT 1
65055: ARRAY
65056: PPUSH
65057: LD_VAR 0 6
65061: PUSH
65062: LD_VAR 0 4
65066: ARRAY
65067: PUSH
65068: LD_INT 2
65070: ARRAY
65071: PPUSH
65072: CALL_OW 488
65076: NOT
65077: PUSH
65078: LD_VAR 0 6
65082: PUSH
65083: LD_VAR 0 4
65087: ARRAY
65088: PUSH
65089: LD_INT 1
65091: ARRAY
65092: PPUSH
65093: LD_VAR 0 6
65097: PUSH
65098: LD_VAR 0 4
65102: ARRAY
65103: PUSH
65104: LD_INT 2
65106: ARRAY
65107: PPUSH
65108: CALL_OW 428
65112: PUSH
65113: LD_INT 0
65115: NONEQUAL
65116: OR
65117: IFFALSE 65139
// tmp := Delete ( tmp , i ) ;
65119: LD_ADDR_VAR 0 6
65123: PUSH
65124: LD_VAR 0 6
65128: PPUSH
65129: LD_VAR 0 4
65133: PPUSH
65134: CALL_OW 3
65138: ST_TO_ADDR
65139: GO 65039
65141: POP
65142: POP
// j := GetClosestHex ( unit , tmp ) ;
65143: LD_ADDR_VAR 0 5
65147: PUSH
65148: LD_VAR 0 1
65152: PPUSH
65153: LD_VAR 0 6
65157: PPUSH
65158: CALL 64443 0 2
65162: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65163: LD_VAR 0 1
65167: PPUSH
65168: LD_VAR 0 5
65172: PUSH
65173: LD_INT 1
65175: ARRAY
65176: PPUSH
65177: LD_VAR 0 5
65181: PUSH
65182: LD_INT 2
65184: ARRAY
65185: PPUSH
65186: CALL_OW 111
// end ;
65190: LD_VAR 0 3
65194: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65195: LD_INT 0
65197: PPUSH
65198: PPUSH
65199: PPUSH
// uc_side = 0 ;
65200: LD_ADDR_OWVAR 20
65204: PUSH
65205: LD_INT 0
65207: ST_TO_ADDR
// uc_nation = 0 ;
65208: LD_ADDR_OWVAR 21
65212: PUSH
65213: LD_INT 0
65215: ST_TO_ADDR
// InitHc_All ( ) ;
65216: CALL_OW 584
// InitVc ;
65220: CALL_OW 20
// if mastodonts then
65224: LD_VAR 0 6
65228: IFFALSE 65295
// for i = 1 to mastodonts do
65230: LD_ADDR_VAR 0 11
65234: PUSH
65235: DOUBLE
65236: LD_INT 1
65238: DEC
65239: ST_TO_ADDR
65240: LD_VAR 0 6
65244: PUSH
65245: FOR_TO
65246: IFFALSE 65293
// begin vc_chassis := 31 ;
65248: LD_ADDR_OWVAR 37
65252: PUSH
65253: LD_INT 31
65255: ST_TO_ADDR
// vc_control := control_rider ;
65256: LD_ADDR_OWVAR 38
65260: PUSH
65261: LD_INT 4
65263: ST_TO_ADDR
// animal := CreateVehicle ;
65264: LD_ADDR_VAR 0 12
65268: PUSH
65269: CALL_OW 45
65273: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65274: LD_VAR 0 12
65278: PPUSH
65279: LD_VAR 0 8
65283: PPUSH
65284: LD_INT 0
65286: PPUSH
65287: CALL 67483 0 3
// end ;
65291: GO 65245
65293: POP
65294: POP
// if horses then
65295: LD_VAR 0 5
65299: IFFALSE 65366
// for i = 1 to horses do
65301: LD_ADDR_VAR 0 11
65305: PUSH
65306: DOUBLE
65307: LD_INT 1
65309: DEC
65310: ST_TO_ADDR
65311: LD_VAR 0 5
65315: PUSH
65316: FOR_TO
65317: IFFALSE 65364
// begin hc_class := 21 ;
65319: LD_ADDR_OWVAR 28
65323: PUSH
65324: LD_INT 21
65326: ST_TO_ADDR
// hc_gallery :=  ;
65327: LD_ADDR_OWVAR 33
65331: PUSH
65332: LD_STRING 
65334: ST_TO_ADDR
// animal := CreateHuman ;
65335: LD_ADDR_VAR 0 12
65339: PUSH
65340: CALL_OW 44
65344: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65345: LD_VAR 0 12
65349: PPUSH
65350: LD_VAR 0 8
65354: PPUSH
65355: LD_INT 0
65357: PPUSH
65358: CALL 67483 0 3
// end ;
65362: GO 65316
65364: POP
65365: POP
// if birds then
65366: LD_VAR 0 1
65370: IFFALSE 65437
// for i = 1 to birds do
65372: LD_ADDR_VAR 0 11
65376: PUSH
65377: DOUBLE
65378: LD_INT 1
65380: DEC
65381: ST_TO_ADDR
65382: LD_VAR 0 1
65386: PUSH
65387: FOR_TO
65388: IFFALSE 65435
// begin hc_class = 18 ;
65390: LD_ADDR_OWVAR 28
65394: PUSH
65395: LD_INT 18
65397: ST_TO_ADDR
// hc_gallery =  ;
65398: LD_ADDR_OWVAR 33
65402: PUSH
65403: LD_STRING 
65405: ST_TO_ADDR
// animal := CreateHuman ;
65406: LD_ADDR_VAR 0 12
65410: PUSH
65411: CALL_OW 44
65415: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65416: LD_VAR 0 12
65420: PPUSH
65421: LD_VAR 0 8
65425: PPUSH
65426: LD_INT 0
65428: PPUSH
65429: CALL 67483 0 3
// end ;
65433: GO 65387
65435: POP
65436: POP
// if tigers then
65437: LD_VAR 0 2
65441: IFFALSE 65525
// for i = 1 to tigers do
65443: LD_ADDR_VAR 0 11
65447: PUSH
65448: DOUBLE
65449: LD_INT 1
65451: DEC
65452: ST_TO_ADDR
65453: LD_VAR 0 2
65457: PUSH
65458: FOR_TO
65459: IFFALSE 65523
// begin hc_class = class_tiger ;
65461: LD_ADDR_OWVAR 28
65465: PUSH
65466: LD_INT 14
65468: ST_TO_ADDR
// hc_gallery =  ;
65469: LD_ADDR_OWVAR 33
65473: PUSH
65474: LD_STRING 
65476: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65477: LD_ADDR_OWVAR 35
65481: PUSH
65482: LD_INT 7
65484: NEG
65485: PPUSH
65486: LD_INT 7
65488: PPUSH
65489: CALL_OW 12
65493: ST_TO_ADDR
// animal := CreateHuman ;
65494: LD_ADDR_VAR 0 12
65498: PUSH
65499: CALL_OW 44
65503: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65504: LD_VAR 0 12
65508: PPUSH
65509: LD_VAR 0 8
65513: PPUSH
65514: LD_INT 0
65516: PPUSH
65517: CALL 67483 0 3
// end ;
65521: GO 65458
65523: POP
65524: POP
// if apemans then
65525: LD_VAR 0 3
65529: IFFALSE 65652
// for i = 1 to apemans do
65531: LD_ADDR_VAR 0 11
65535: PUSH
65536: DOUBLE
65537: LD_INT 1
65539: DEC
65540: ST_TO_ADDR
65541: LD_VAR 0 3
65545: PUSH
65546: FOR_TO
65547: IFFALSE 65650
// begin hc_class = class_apeman ;
65549: LD_ADDR_OWVAR 28
65553: PUSH
65554: LD_INT 12
65556: ST_TO_ADDR
// hc_gallery =  ;
65557: LD_ADDR_OWVAR 33
65561: PUSH
65562: LD_STRING 
65564: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65565: LD_ADDR_OWVAR 35
65569: PUSH
65570: LD_INT 2
65572: NEG
65573: PPUSH
65574: LD_INT 2
65576: PPUSH
65577: CALL_OW 12
65581: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65582: LD_ADDR_OWVAR 31
65586: PUSH
65587: LD_INT 1
65589: PPUSH
65590: LD_INT 3
65592: PPUSH
65593: CALL_OW 12
65597: PUSH
65598: LD_INT 1
65600: PPUSH
65601: LD_INT 3
65603: PPUSH
65604: CALL_OW 12
65608: PUSH
65609: LD_INT 0
65611: PUSH
65612: LD_INT 0
65614: PUSH
65615: EMPTY
65616: LIST
65617: LIST
65618: LIST
65619: LIST
65620: ST_TO_ADDR
// animal := CreateHuman ;
65621: LD_ADDR_VAR 0 12
65625: PUSH
65626: CALL_OW 44
65630: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65631: LD_VAR 0 12
65635: PPUSH
65636: LD_VAR 0 8
65640: PPUSH
65641: LD_INT 0
65643: PPUSH
65644: CALL 67483 0 3
// end ;
65648: GO 65546
65650: POP
65651: POP
// if enchidnas then
65652: LD_VAR 0 4
65656: IFFALSE 65723
// for i = 1 to enchidnas do
65658: LD_ADDR_VAR 0 11
65662: PUSH
65663: DOUBLE
65664: LD_INT 1
65666: DEC
65667: ST_TO_ADDR
65668: LD_VAR 0 4
65672: PUSH
65673: FOR_TO
65674: IFFALSE 65721
// begin hc_class = 13 ;
65676: LD_ADDR_OWVAR 28
65680: PUSH
65681: LD_INT 13
65683: ST_TO_ADDR
// hc_gallery =  ;
65684: LD_ADDR_OWVAR 33
65688: PUSH
65689: LD_STRING 
65691: ST_TO_ADDR
// animal := CreateHuman ;
65692: LD_ADDR_VAR 0 12
65696: PUSH
65697: CALL_OW 44
65701: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65702: LD_VAR 0 12
65706: PPUSH
65707: LD_VAR 0 8
65711: PPUSH
65712: LD_INT 0
65714: PPUSH
65715: CALL 67483 0 3
// end ;
65719: GO 65673
65721: POP
65722: POP
// if fishes then
65723: LD_VAR 0 7
65727: IFFALSE 65794
// for i = 1 to fishes do
65729: LD_ADDR_VAR 0 11
65733: PUSH
65734: DOUBLE
65735: LD_INT 1
65737: DEC
65738: ST_TO_ADDR
65739: LD_VAR 0 7
65743: PUSH
65744: FOR_TO
65745: IFFALSE 65792
// begin hc_class = 20 ;
65747: LD_ADDR_OWVAR 28
65751: PUSH
65752: LD_INT 20
65754: ST_TO_ADDR
// hc_gallery =  ;
65755: LD_ADDR_OWVAR 33
65759: PUSH
65760: LD_STRING 
65762: ST_TO_ADDR
// animal := CreateHuman ;
65763: LD_ADDR_VAR 0 12
65767: PUSH
65768: CALL_OW 44
65772: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65773: LD_VAR 0 12
65777: PPUSH
65778: LD_VAR 0 9
65782: PPUSH
65783: LD_INT 0
65785: PPUSH
65786: CALL 67483 0 3
// end ;
65790: GO 65744
65792: POP
65793: POP
// end ;
65794: LD_VAR 0 10
65798: RET
// export function WantHeal ( sci , unit ) ; begin
65799: LD_INT 0
65801: PPUSH
// if GetTaskList ( sci ) > 0 then
65802: LD_VAR 0 1
65806: PPUSH
65807: CALL_OW 437
65811: PUSH
65812: LD_INT 0
65814: GREATER
65815: IFFALSE 65885
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65817: LD_VAR 0 1
65821: PPUSH
65822: CALL_OW 437
65826: PUSH
65827: LD_INT 1
65829: ARRAY
65830: PUSH
65831: LD_INT 1
65833: ARRAY
65834: PUSH
65835: LD_STRING l
65837: EQUAL
65838: PUSH
65839: LD_VAR 0 1
65843: PPUSH
65844: CALL_OW 437
65848: PUSH
65849: LD_INT 1
65851: ARRAY
65852: PUSH
65853: LD_INT 4
65855: ARRAY
65856: PUSH
65857: LD_VAR 0 2
65861: EQUAL
65862: AND
65863: IFFALSE 65875
// result := true else
65865: LD_ADDR_VAR 0 3
65869: PUSH
65870: LD_INT 1
65872: ST_TO_ADDR
65873: GO 65883
// result := false ;
65875: LD_ADDR_VAR 0 3
65879: PUSH
65880: LD_INT 0
65882: ST_TO_ADDR
// end else
65883: GO 65893
// result := false ;
65885: LD_ADDR_VAR 0 3
65889: PUSH
65890: LD_INT 0
65892: ST_TO_ADDR
// end ;
65893: LD_VAR 0 3
65897: RET
// export function HealTarget ( sci ) ; begin
65898: LD_INT 0
65900: PPUSH
// if not sci then
65901: LD_VAR 0 1
65905: NOT
65906: IFFALSE 65910
// exit ;
65908: GO 65975
// result := 0 ;
65910: LD_ADDR_VAR 0 2
65914: PUSH
65915: LD_INT 0
65917: ST_TO_ADDR
// if GetTaskList ( sci ) then
65918: LD_VAR 0 1
65922: PPUSH
65923: CALL_OW 437
65927: IFFALSE 65975
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65929: LD_VAR 0 1
65933: PPUSH
65934: CALL_OW 437
65938: PUSH
65939: LD_INT 1
65941: ARRAY
65942: PUSH
65943: LD_INT 1
65945: ARRAY
65946: PUSH
65947: LD_STRING l
65949: EQUAL
65950: IFFALSE 65975
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65952: LD_ADDR_VAR 0 2
65956: PUSH
65957: LD_VAR 0 1
65961: PPUSH
65962: CALL_OW 437
65966: PUSH
65967: LD_INT 1
65969: ARRAY
65970: PUSH
65971: LD_INT 4
65973: ARRAY
65974: ST_TO_ADDR
// end ;
65975: LD_VAR 0 2
65979: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65980: LD_INT 0
65982: PPUSH
65983: PPUSH
65984: PPUSH
65985: PPUSH
// if not base_units then
65986: LD_VAR 0 1
65990: NOT
65991: IFFALSE 65995
// exit ;
65993: GO 66082
// result := false ;
65995: LD_ADDR_VAR 0 2
65999: PUSH
66000: LD_INT 0
66002: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66003: LD_ADDR_VAR 0 5
66007: PUSH
66008: LD_VAR 0 1
66012: PPUSH
66013: LD_INT 21
66015: PUSH
66016: LD_INT 3
66018: PUSH
66019: EMPTY
66020: LIST
66021: LIST
66022: PPUSH
66023: CALL_OW 72
66027: ST_TO_ADDR
// if not tmp then
66028: LD_VAR 0 5
66032: NOT
66033: IFFALSE 66037
// exit ;
66035: GO 66082
// for i in tmp do
66037: LD_ADDR_VAR 0 3
66041: PUSH
66042: LD_VAR 0 5
66046: PUSH
66047: FOR_IN
66048: IFFALSE 66080
// begin result := EnemyInRange ( i , 22 ) ;
66050: LD_ADDR_VAR 0 2
66054: PUSH
66055: LD_VAR 0 3
66059: PPUSH
66060: LD_INT 22
66062: PPUSH
66063: CALL 64318 0 2
66067: ST_TO_ADDR
// if result then
66068: LD_VAR 0 2
66072: IFFALSE 66078
// exit ;
66074: POP
66075: POP
66076: GO 66082
// end ;
66078: GO 66047
66080: POP
66081: POP
// end ;
66082: LD_VAR 0 2
66086: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
66087: LD_INT 0
66089: PPUSH
66090: PPUSH
// if not units then
66091: LD_VAR 0 1
66095: NOT
66096: IFFALSE 66100
// exit ;
66098: GO 66170
// result := [ ] ;
66100: LD_ADDR_VAR 0 3
66104: PUSH
66105: EMPTY
66106: ST_TO_ADDR
// for i in units do
66107: LD_ADDR_VAR 0 4
66111: PUSH
66112: LD_VAR 0 1
66116: PUSH
66117: FOR_IN
66118: IFFALSE 66168
// if GetTag ( i ) = tag then
66120: LD_VAR 0 4
66124: PPUSH
66125: CALL_OW 110
66129: PUSH
66130: LD_VAR 0 2
66134: EQUAL
66135: IFFALSE 66166
// result := Replace ( result , result + 1 , i ) ;
66137: LD_ADDR_VAR 0 3
66141: PUSH
66142: LD_VAR 0 3
66146: PPUSH
66147: LD_VAR 0 3
66151: PUSH
66152: LD_INT 1
66154: PLUS
66155: PPUSH
66156: LD_VAR 0 4
66160: PPUSH
66161: CALL_OW 1
66165: ST_TO_ADDR
66166: GO 66117
66168: POP
66169: POP
// end ;
66170: LD_VAR 0 3
66174: RET
// export function IsDriver ( un ) ; begin
66175: LD_INT 0
66177: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66178: LD_ADDR_VAR 0 2
66182: PUSH
66183: LD_VAR 0 1
66187: PUSH
66188: LD_INT 55
66190: PUSH
66191: EMPTY
66192: LIST
66193: PPUSH
66194: CALL_OW 69
66198: IN
66199: ST_TO_ADDR
// end ;
66200: LD_VAR 0 2
66204: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66205: LD_INT 0
66207: PPUSH
66208: PPUSH
// list := [ ] ;
66209: LD_ADDR_VAR 0 5
66213: PUSH
66214: EMPTY
66215: ST_TO_ADDR
// case d of 0 :
66216: LD_VAR 0 3
66220: PUSH
66221: LD_INT 0
66223: DOUBLE
66224: EQUAL
66225: IFTRUE 66229
66227: GO 66362
66229: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66230: LD_ADDR_VAR 0 5
66234: PUSH
66235: LD_VAR 0 1
66239: PUSH
66240: LD_INT 4
66242: MINUS
66243: PUSH
66244: LD_VAR 0 2
66248: PUSH
66249: LD_INT 4
66251: MINUS
66252: PUSH
66253: LD_INT 2
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: LIST
66260: PUSH
66261: LD_VAR 0 1
66265: PUSH
66266: LD_INT 3
66268: MINUS
66269: PUSH
66270: LD_VAR 0 2
66274: PUSH
66275: LD_INT 1
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: LIST
66282: PUSH
66283: LD_VAR 0 1
66287: PUSH
66288: LD_INT 4
66290: PLUS
66291: PUSH
66292: LD_VAR 0 2
66296: PUSH
66297: LD_INT 4
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: LIST
66304: PUSH
66305: LD_VAR 0 1
66309: PUSH
66310: LD_INT 3
66312: PLUS
66313: PUSH
66314: LD_VAR 0 2
66318: PUSH
66319: LD_INT 3
66321: PLUS
66322: PUSH
66323: LD_INT 5
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: LIST
66330: PUSH
66331: LD_VAR 0 1
66335: PUSH
66336: LD_VAR 0 2
66340: PUSH
66341: LD_INT 4
66343: PLUS
66344: PUSH
66345: LD_INT 0
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: LIST
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: LIST
66357: LIST
66358: LIST
66359: ST_TO_ADDR
// end ; 1 :
66360: GO 67060
66362: LD_INT 1
66364: DOUBLE
66365: EQUAL
66366: IFTRUE 66370
66368: GO 66503
66370: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66371: LD_ADDR_VAR 0 5
66375: PUSH
66376: LD_VAR 0 1
66380: PUSH
66381: LD_VAR 0 2
66385: PUSH
66386: LD_INT 4
66388: MINUS
66389: PUSH
66390: LD_INT 3
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: LIST
66397: PUSH
66398: LD_VAR 0 1
66402: PUSH
66403: LD_INT 3
66405: MINUS
66406: PUSH
66407: LD_VAR 0 2
66411: PUSH
66412: LD_INT 3
66414: MINUS
66415: PUSH
66416: LD_INT 2
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: LIST
66423: PUSH
66424: LD_VAR 0 1
66428: PUSH
66429: LD_INT 4
66431: MINUS
66432: PUSH
66433: LD_VAR 0 2
66437: PUSH
66438: LD_INT 1
66440: PUSH
66441: EMPTY
66442: LIST
66443: LIST
66444: LIST
66445: PUSH
66446: LD_VAR 0 1
66450: PUSH
66451: LD_VAR 0 2
66455: PUSH
66456: LD_INT 3
66458: PLUS
66459: PUSH
66460: LD_INT 0
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: LIST
66467: PUSH
66468: LD_VAR 0 1
66472: PUSH
66473: LD_INT 4
66475: PLUS
66476: PUSH
66477: LD_VAR 0 2
66481: PUSH
66482: LD_INT 4
66484: PLUS
66485: PUSH
66486: LD_INT 5
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: LIST
66493: PUSH
66494: EMPTY
66495: LIST
66496: LIST
66497: LIST
66498: LIST
66499: LIST
66500: ST_TO_ADDR
// end ; 2 :
66501: GO 67060
66503: LD_INT 2
66505: DOUBLE
66506: EQUAL
66507: IFTRUE 66511
66509: GO 66640
66511: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66512: LD_ADDR_VAR 0 5
66516: PUSH
66517: LD_VAR 0 1
66521: PUSH
66522: LD_VAR 0 2
66526: PUSH
66527: LD_INT 3
66529: MINUS
66530: PUSH
66531: LD_INT 3
66533: PUSH
66534: EMPTY
66535: LIST
66536: LIST
66537: LIST
66538: PUSH
66539: LD_VAR 0 1
66543: PUSH
66544: LD_INT 4
66546: PLUS
66547: PUSH
66548: LD_VAR 0 2
66552: PUSH
66553: LD_INT 4
66555: PUSH
66556: EMPTY
66557: LIST
66558: LIST
66559: LIST
66560: PUSH
66561: LD_VAR 0 1
66565: PUSH
66566: LD_VAR 0 2
66570: PUSH
66571: LD_INT 4
66573: PLUS
66574: PUSH
66575: LD_INT 0
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: LIST
66582: PUSH
66583: LD_VAR 0 1
66587: PUSH
66588: LD_INT 3
66590: MINUS
66591: PUSH
66592: LD_VAR 0 2
66596: PUSH
66597: LD_INT 1
66599: PUSH
66600: EMPTY
66601: LIST
66602: LIST
66603: LIST
66604: PUSH
66605: LD_VAR 0 1
66609: PUSH
66610: LD_INT 4
66612: MINUS
66613: PUSH
66614: LD_VAR 0 2
66618: PUSH
66619: LD_INT 4
66621: MINUS
66622: PUSH
66623: LD_INT 2
66625: PUSH
66626: EMPTY
66627: LIST
66628: LIST
66629: LIST
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: LIST
66635: LIST
66636: LIST
66637: ST_TO_ADDR
// end ; 3 :
66638: GO 67060
66640: LD_INT 3
66642: DOUBLE
66643: EQUAL
66644: IFTRUE 66648
66646: GO 66781
66648: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66649: LD_ADDR_VAR 0 5
66653: PUSH
66654: LD_VAR 0 1
66658: PUSH
66659: LD_INT 3
66661: PLUS
66662: PUSH
66663: LD_VAR 0 2
66667: PUSH
66668: LD_INT 4
66670: PUSH
66671: EMPTY
66672: LIST
66673: LIST
66674: LIST
66675: PUSH
66676: LD_VAR 0 1
66680: PUSH
66681: LD_INT 4
66683: PLUS
66684: PUSH
66685: LD_VAR 0 2
66689: PUSH
66690: LD_INT 4
66692: PLUS
66693: PUSH
66694: LD_INT 5
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: LIST
66701: PUSH
66702: LD_VAR 0 1
66706: PUSH
66707: LD_INT 4
66709: MINUS
66710: PUSH
66711: LD_VAR 0 2
66715: PUSH
66716: LD_INT 1
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: LIST
66723: PUSH
66724: LD_VAR 0 1
66728: PUSH
66729: LD_VAR 0 2
66733: PUSH
66734: LD_INT 4
66736: MINUS
66737: PUSH
66738: LD_INT 3
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: LIST
66745: PUSH
66746: LD_VAR 0 1
66750: PUSH
66751: LD_INT 3
66753: MINUS
66754: PUSH
66755: LD_VAR 0 2
66759: PUSH
66760: LD_INT 3
66762: MINUS
66763: PUSH
66764: LD_INT 2
66766: PUSH
66767: EMPTY
66768: LIST
66769: LIST
66770: LIST
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: LIST
66776: LIST
66777: LIST
66778: ST_TO_ADDR
// end ; 4 :
66779: GO 67060
66781: LD_INT 4
66783: DOUBLE
66784: EQUAL
66785: IFTRUE 66789
66787: GO 66922
66789: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66790: LD_ADDR_VAR 0 5
66794: PUSH
66795: LD_VAR 0 1
66799: PUSH
66800: LD_VAR 0 2
66804: PUSH
66805: LD_INT 4
66807: PLUS
66808: PUSH
66809: LD_INT 0
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: LIST
66816: PUSH
66817: LD_VAR 0 1
66821: PUSH
66822: LD_INT 3
66824: PLUS
66825: PUSH
66826: LD_VAR 0 2
66830: PUSH
66831: LD_INT 3
66833: PLUS
66834: PUSH
66835: LD_INT 5
66837: PUSH
66838: EMPTY
66839: LIST
66840: LIST
66841: LIST
66842: PUSH
66843: LD_VAR 0 1
66847: PUSH
66848: LD_INT 4
66850: PLUS
66851: PUSH
66852: LD_VAR 0 2
66856: PUSH
66857: LD_INT 4
66859: PUSH
66860: EMPTY
66861: LIST
66862: LIST
66863: LIST
66864: PUSH
66865: LD_VAR 0 1
66869: PUSH
66870: LD_VAR 0 2
66874: PUSH
66875: LD_INT 3
66877: MINUS
66878: PUSH
66879: LD_INT 3
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: LIST
66886: PUSH
66887: LD_VAR 0 1
66891: PUSH
66892: LD_INT 4
66894: MINUS
66895: PUSH
66896: LD_VAR 0 2
66900: PUSH
66901: LD_INT 4
66903: MINUS
66904: PUSH
66905: LD_INT 2
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: LIST
66912: PUSH
66913: EMPTY
66914: LIST
66915: LIST
66916: LIST
66917: LIST
66918: LIST
66919: ST_TO_ADDR
// end ; 5 :
66920: GO 67060
66922: LD_INT 5
66924: DOUBLE
66925: EQUAL
66926: IFTRUE 66930
66928: GO 67059
66930: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66931: LD_ADDR_VAR 0 5
66935: PUSH
66936: LD_VAR 0 1
66940: PUSH
66941: LD_INT 4
66943: MINUS
66944: PUSH
66945: LD_VAR 0 2
66949: PUSH
66950: LD_INT 1
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: LIST
66957: PUSH
66958: LD_VAR 0 1
66962: PUSH
66963: LD_VAR 0 2
66967: PUSH
66968: LD_INT 4
66970: MINUS
66971: PUSH
66972: LD_INT 3
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: LIST
66979: PUSH
66980: LD_VAR 0 1
66984: PUSH
66985: LD_INT 4
66987: PLUS
66988: PUSH
66989: LD_VAR 0 2
66993: PUSH
66994: LD_INT 4
66996: PLUS
66997: PUSH
66998: LD_INT 5
67000: PUSH
67001: EMPTY
67002: LIST
67003: LIST
67004: LIST
67005: PUSH
67006: LD_VAR 0 1
67010: PUSH
67011: LD_INT 3
67013: PLUS
67014: PUSH
67015: LD_VAR 0 2
67019: PUSH
67020: LD_INT 4
67022: PUSH
67023: EMPTY
67024: LIST
67025: LIST
67026: LIST
67027: PUSH
67028: LD_VAR 0 1
67032: PUSH
67033: LD_VAR 0 2
67037: PUSH
67038: LD_INT 3
67040: PLUS
67041: PUSH
67042: LD_INT 0
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: LIST
67049: PUSH
67050: EMPTY
67051: LIST
67052: LIST
67053: LIST
67054: LIST
67055: LIST
67056: ST_TO_ADDR
// end ; end ;
67057: GO 67060
67059: POP
// result := list ;
67060: LD_ADDR_VAR 0 4
67064: PUSH
67065: LD_VAR 0 5
67069: ST_TO_ADDR
// end ;
67070: LD_VAR 0 4
67074: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67075: LD_INT 0
67077: PPUSH
67078: PPUSH
67079: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67080: LD_VAR 0 1
67084: NOT
67085: PUSH
67086: LD_VAR 0 2
67090: PUSH
67091: LD_INT 1
67093: PUSH
67094: LD_INT 2
67096: PUSH
67097: LD_INT 3
67099: PUSH
67100: LD_INT 4
67102: PUSH
67103: EMPTY
67104: LIST
67105: LIST
67106: LIST
67107: LIST
67108: IN
67109: NOT
67110: OR
67111: IFFALSE 67115
// exit ;
67113: GO 67207
// tmp := [ ] ;
67115: LD_ADDR_VAR 0 5
67119: PUSH
67120: EMPTY
67121: ST_TO_ADDR
// for i in units do
67122: LD_ADDR_VAR 0 4
67126: PUSH
67127: LD_VAR 0 1
67131: PUSH
67132: FOR_IN
67133: IFFALSE 67176
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
67135: LD_ADDR_VAR 0 5
67139: PUSH
67140: LD_VAR 0 5
67144: PPUSH
67145: LD_VAR 0 5
67149: PUSH
67150: LD_INT 1
67152: PLUS
67153: PPUSH
67154: LD_VAR 0 4
67158: PPUSH
67159: LD_VAR 0 2
67163: PPUSH
67164: CALL_OW 259
67168: PPUSH
67169: CALL_OW 2
67173: ST_TO_ADDR
67174: GO 67132
67176: POP
67177: POP
// if not tmp then
67178: LD_VAR 0 5
67182: NOT
67183: IFFALSE 67187
// exit ;
67185: GO 67207
// result := SortListByListDesc ( units , tmp ) ;
67187: LD_ADDR_VAR 0 3
67191: PUSH
67192: LD_VAR 0 1
67196: PPUSH
67197: LD_VAR 0 5
67201: PPUSH
67202: CALL_OW 77
67206: ST_TO_ADDR
// end ;
67207: LD_VAR 0 3
67211: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67212: LD_INT 0
67214: PPUSH
67215: PPUSH
67216: PPUSH
// result := false ;
67217: LD_ADDR_VAR 0 3
67221: PUSH
67222: LD_INT 0
67224: ST_TO_ADDR
// x := GetX ( building ) ;
67225: LD_ADDR_VAR 0 4
67229: PUSH
67230: LD_VAR 0 2
67234: PPUSH
67235: CALL_OW 250
67239: ST_TO_ADDR
// y := GetY ( building ) ;
67240: LD_ADDR_VAR 0 5
67244: PUSH
67245: LD_VAR 0 2
67249: PPUSH
67250: CALL_OW 251
67254: ST_TO_ADDR
// if not building or not x or not y then
67255: LD_VAR 0 2
67259: NOT
67260: PUSH
67261: LD_VAR 0 4
67265: NOT
67266: OR
67267: PUSH
67268: LD_VAR 0 5
67272: NOT
67273: OR
67274: IFFALSE 67278
// exit ;
67276: GO 67370
// if GetTaskList ( unit ) then
67278: LD_VAR 0 1
67282: PPUSH
67283: CALL_OW 437
67287: IFFALSE 67370
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67289: LD_STRING e
67291: PUSH
67292: LD_VAR 0 1
67296: PPUSH
67297: CALL_OW 437
67301: PUSH
67302: LD_INT 1
67304: ARRAY
67305: PUSH
67306: LD_INT 1
67308: ARRAY
67309: EQUAL
67310: PUSH
67311: LD_VAR 0 4
67315: PUSH
67316: LD_VAR 0 1
67320: PPUSH
67321: CALL_OW 437
67325: PUSH
67326: LD_INT 1
67328: ARRAY
67329: PUSH
67330: LD_INT 2
67332: ARRAY
67333: EQUAL
67334: AND
67335: PUSH
67336: LD_VAR 0 5
67340: PUSH
67341: LD_VAR 0 1
67345: PPUSH
67346: CALL_OW 437
67350: PUSH
67351: LD_INT 1
67353: ARRAY
67354: PUSH
67355: LD_INT 3
67357: ARRAY
67358: EQUAL
67359: AND
67360: IFFALSE 67370
// result := true end ;
67362: LD_ADDR_VAR 0 3
67366: PUSH
67367: LD_INT 1
67369: ST_TO_ADDR
// end ;
67370: LD_VAR 0 3
67374: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67375: LD_INT 0
67377: PPUSH
// result := false ;
67378: LD_ADDR_VAR 0 4
67382: PUSH
67383: LD_INT 0
67385: ST_TO_ADDR
// if GetTaskList ( unit ) then
67386: LD_VAR 0 1
67390: PPUSH
67391: CALL_OW 437
67395: IFFALSE 67478
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67397: LD_STRING M
67399: PUSH
67400: LD_VAR 0 1
67404: PPUSH
67405: CALL_OW 437
67409: PUSH
67410: LD_INT 1
67412: ARRAY
67413: PUSH
67414: LD_INT 1
67416: ARRAY
67417: EQUAL
67418: PUSH
67419: LD_VAR 0 2
67423: PUSH
67424: LD_VAR 0 1
67428: PPUSH
67429: CALL_OW 437
67433: PUSH
67434: LD_INT 1
67436: ARRAY
67437: PUSH
67438: LD_INT 2
67440: ARRAY
67441: EQUAL
67442: AND
67443: PUSH
67444: LD_VAR 0 3
67448: PUSH
67449: LD_VAR 0 1
67453: PPUSH
67454: CALL_OW 437
67458: PUSH
67459: LD_INT 1
67461: ARRAY
67462: PUSH
67463: LD_INT 3
67465: ARRAY
67466: EQUAL
67467: AND
67468: IFFALSE 67478
// result := true ;
67470: LD_ADDR_VAR 0 4
67474: PUSH
67475: LD_INT 1
67477: ST_TO_ADDR
// end ; end ;
67478: LD_VAR 0 4
67482: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67483: LD_INT 0
67485: PPUSH
67486: PPUSH
67487: PPUSH
67488: PPUSH
// if not unit or not area then
67489: LD_VAR 0 1
67493: NOT
67494: PUSH
67495: LD_VAR 0 2
67499: NOT
67500: OR
67501: IFFALSE 67505
// exit ;
67503: GO 67669
// tmp := AreaToList ( area , i ) ;
67505: LD_ADDR_VAR 0 6
67509: PUSH
67510: LD_VAR 0 2
67514: PPUSH
67515: LD_VAR 0 5
67519: PPUSH
67520: CALL_OW 517
67524: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67525: LD_ADDR_VAR 0 5
67529: PUSH
67530: DOUBLE
67531: LD_INT 1
67533: DEC
67534: ST_TO_ADDR
67535: LD_VAR 0 6
67539: PUSH
67540: LD_INT 1
67542: ARRAY
67543: PUSH
67544: FOR_TO
67545: IFFALSE 67667
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67547: LD_ADDR_VAR 0 7
67551: PUSH
67552: LD_VAR 0 6
67556: PUSH
67557: LD_INT 1
67559: ARRAY
67560: PUSH
67561: LD_VAR 0 5
67565: ARRAY
67566: PUSH
67567: LD_VAR 0 6
67571: PUSH
67572: LD_INT 2
67574: ARRAY
67575: PUSH
67576: LD_VAR 0 5
67580: ARRAY
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
67586: LD_VAR 0 7
67590: PUSH
67591: LD_INT 1
67593: ARRAY
67594: PPUSH
67595: LD_VAR 0 7
67599: PUSH
67600: LD_INT 2
67602: ARRAY
67603: PPUSH
67604: CALL_OW 428
67608: PUSH
67609: LD_INT 0
67611: EQUAL
67612: IFFALSE 67665
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67614: LD_VAR 0 1
67618: PPUSH
67619: LD_VAR 0 7
67623: PUSH
67624: LD_INT 1
67626: ARRAY
67627: PPUSH
67628: LD_VAR 0 7
67632: PUSH
67633: LD_INT 2
67635: ARRAY
67636: PPUSH
67637: LD_VAR 0 3
67641: PPUSH
67642: CALL_OW 48
// result := IsPlaced ( unit ) ;
67646: LD_ADDR_VAR 0 4
67650: PUSH
67651: LD_VAR 0 1
67655: PPUSH
67656: CALL_OW 305
67660: ST_TO_ADDR
// exit ;
67661: POP
67662: POP
67663: GO 67669
// end ; end ;
67665: GO 67544
67667: POP
67668: POP
// end ;
67669: LD_VAR 0 4
67673: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67674: LD_INT 0
67676: PPUSH
67677: PPUSH
67678: PPUSH
// if not side or side > 8 then
67679: LD_VAR 0 1
67683: NOT
67684: PUSH
67685: LD_VAR 0 1
67689: PUSH
67690: LD_INT 8
67692: GREATER
67693: OR
67694: IFFALSE 67698
// exit ;
67696: GO 67885
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67698: LD_ADDR_VAR 0 4
67702: PUSH
67703: LD_INT 22
67705: PUSH
67706: LD_VAR 0 1
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: PUSH
67715: LD_INT 21
67717: PUSH
67718: LD_INT 3
67720: PUSH
67721: EMPTY
67722: LIST
67723: LIST
67724: PUSH
67725: EMPTY
67726: LIST
67727: LIST
67728: PPUSH
67729: CALL_OW 69
67733: ST_TO_ADDR
// if not tmp then
67734: LD_VAR 0 4
67738: NOT
67739: IFFALSE 67743
// exit ;
67741: GO 67885
// enable_addtolog := true ;
67743: LD_ADDR_OWVAR 81
67747: PUSH
67748: LD_INT 1
67750: ST_TO_ADDR
// AddToLog ( [ ) ;
67751: LD_STRING [
67753: PPUSH
67754: CALL_OW 561
// for i in tmp do
67758: LD_ADDR_VAR 0 3
67762: PUSH
67763: LD_VAR 0 4
67767: PUSH
67768: FOR_IN
67769: IFFALSE 67876
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67771: LD_STRING [
67773: PUSH
67774: LD_VAR 0 3
67778: PPUSH
67779: CALL_OW 266
67783: STR
67784: PUSH
67785: LD_STRING , 
67787: STR
67788: PUSH
67789: LD_VAR 0 3
67793: PPUSH
67794: CALL_OW 250
67798: STR
67799: PUSH
67800: LD_STRING , 
67802: STR
67803: PUSH
67804: LD_VAR 0 3
67808: PPUSH
67809: CALL_OW 251
67813: STR
67814: PUSH
67815: LD_STRING , 
67817: STR
67818: PUSH
67819: LD_VAR 0 3
67823: PPUSH
67824: CALL_OW 254
67828: STR
67829: PUSH
67830: LD_STRING , 
67832: STR
67833: PUSH
67834: LD_VAR 0 3
67838: PPUSH
67839: LD_INT 1
67841: PPUSH
67842: CALL_OW 268
67846: STR
67847: PUSH
67848: LD_STRING , 
67850: STR
67851: PUSH
67852: LD_VAR 0 3
67856: PPUSH
67857: LD_INT 2
67859: PPUSH
67860: CALL_OW 268
67864: STR
67865: PUSH
67866: LD_STRING ],
67868: STR
67869: PPUSH
67870: CALL_OW 561
// end ;
67874: GO 67768
67876: POP
67877: POP
// AddToLog ( ]; ) ;
67878: LD_STRING ];
67880: PPUSH
67881: CALL_OW 561
// end ;
67885: LD_VAR 0 2
67889: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67890: LD_INT 0
67892: PPUSH
67893: PPUSH
67894: PPUSH
67895: PPUSH
67896: PPUSH
// if not area or not rate or not max then
67897: LD_VAR 0 1
67901: NOT
67902: PUSH
67903: LD_VAR 0 2
67907: NOT
67908: OR
67909: PUSH
67910: LD_VAR 0 4
67914: NOT
67915: OR
67916: IFFALSE 67920
// exit ;
67918: GO 68112
// while 1 do
67920: LD_INT 1
67922: IFFALSE 68112
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67924: LD_ADDR_VAR 0 9
67928: PUSH
67929: LD_VAR 0 1
67933: PPUSH
67934: LD_INT 1
67936: PPUSH
67937: CALL_OW 287
67941: PUSH
67942: LD_INT 10
67944: MUL
67945: ST_TO_ADDR
// r := rate / 10 ;
67946: LD_ADDR_VAR 0 7
67950: PUSH
67951: LD_VAR 0 2
67955: PUSH
67956: LD_INT 10
67958: DIVREAL
67959: ST_TO_ADDR
// time := 1 1$00 ;
67960: LD_ADDR_VAR 0 8
67964: PUSH
67965: LD_INT 2100
67967: ST_TO_ADDR
// if amount < min then
67968: LD_VAR 0 9
67972: PUSH
67973: LD_VAR 0 3
67977: LESS
67978: IFFALSE 67996
// r := r * 2 else
67980: LD_ADDR_VAR 0 7
67984: PUSH
67985: LD_VAR 0 7
67989: PUSH
67990: LD_INT 2
67992: MUL
67993: ST_TO_ADDR
67994: GO 68022
// if amount > max then
67996: LD_VAR 0 9
68000: PUSH
68001: LD_VAR 0 4
68005: GREATER
68006: IFFALSE 68022
// r := r / 2 ;
68008: LD_ADDR_VAR 0 7
68012: PUSH
68013: LD_VAR 0 7
68017: PUSH
68018: LD_INT 2
68020: DIVREAL
68021: ST_TO_ADDR
// time := time / r ;
68022: LD_ADDR_VAR 0 8
68026: PUSH
68027: LD_VAR 0 8
68031: PUSH
68032: LD_VAR 0 7
68036: DIVREAL
68037: ST_TO_ADDR
// if time < 0 then
68038: LD_VAR 0 8
68042: PUSH
68043: LD_INT 0
68045: LESS
68046: IFFALSE 68063
// time := time * - 1 ;
68048: LD_ADDR_VAR 0 8
68052: PUSH
68053: LD_VAR 0 8
68057: PUSH
68058: LD_INT 1
68060: NEG
68061: MUL
68062: ST_TO_ADDR
// wait ( time ) ;
68063: LD_VAR 0 8
68067: PPUSH
68068: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
68072: LD_INT 35
68074: PPUSH
68075: LD_INT 875
68077: PPUSH
68078: CALL_OW 12
68082: PPUSH
68083: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68087: LD_INT 1
68089: PPUSH
68090: LD_INT 5
68092: PPUSH
68093: CALL_OW 12
68097: PPUSH
68098: LD_VAR 0 1
68102: PPUSH
68103: LD_INT 1
68105: PPUSH
68106: CALL_OW 55
// end ;
68110: GO 67920
// end ;
68112: LD_VAR 0 5
68116: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68117: LD_INT 0
68119: PPUSH
68120: PPUSH
68121: PPUSH
68122: PPUSH
68123: PPUSH
68124: PPUSH
68125: PPUSH
68126: PPUSH
// if not turrets or not factories then
68127: LD_VAR 0 1
68131: NOT
68132: PUSH
68133: LD_VAR 0 2
68137: NOT
68138: OR
68139: IFFALSE 68143
// exit ;
68141: GO 68450
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68143: LD_ADDR_VAR 0 10
68147: PUSH
68148: LD_INT 5
68150: PUSH
68151: LD_INT 6
68153: PUSH
68154: EMPTY
68155: LIST
68156: LIST
68157: PUSH
68158: LD_INT 2
68160: PUSH
68161: LD_INT 4
68163: PUSH
68164: EMPTY
68165: LIST
68166: LIST
68167: PUSH
68168: LD_INT 3
68170: PUSH
68171: LD_INT 5
68173: PUSH
68174: EMPTY
68175: LIST
68176: LIST
68177: PUSH
68178: EMPTY
68179: LIST
68180: LIST
68181: LIST
68182: PUSH
68183: LD_INT 24
68185: PUSH
68186: LD_INT 25
68188: PUSH
68189: EMPTY
68190: LIST
68191: LIST
68192: PUSH
68193: LD_INT 23
68195: PUSH
68196: LD_INT 27
68198: PUSH
68199: EMPTY
68200: LIST
68201: LIST
68202: PUSH
68203: EMPTY
68204: LIST
68205: LIST
68206: PUSH
68207: LD_INT 42
68209: PUSH
68210: LD_INT 43
68212: PUSH
68213: EMPTY
68214: LIST
68215: LIST
68216: PUSH
68217: LD_INT 44
68219: PUSH
68220: LD_INT 46
68222: PUSH
68223: EMPTY
68224: LIST
68225: LIST
68226: PUSH
68227: LD_INT 45
68229: PUSH
68230: LD_INT 47
68232: PUSH
68233: EMPTY
68234: LIST
68235: LIST
68236: PUSH
68237: EMPTY
68238: LIST
68239: LIST
68240: LIST
68241: PUSH
68242: EMPTY
68243: LIST
68244: LIST
68245: LIST
68246: ST_TO_ADDR
// result := [ ] ;
68247: LD_ADDR_VAR 0 3
68251: PUSH
68252: EMPTY
68253: ST_TO_ADDR
// for i in turrets do
68254: LD_ADDR_VAR 0 4
68258: PUSH
68259: LD_VAR 0 1
68263: PUSH
68264: FOR_IN
68265: IFFALSE 68448
// begin nat := GetNation ( i ) ;
68267: LD_ADDR_VAR 0 7
68271: PUSH
68272: LD_VAR 0 4
68276: PPUSH
68277: CALL_OW 248
68281: ST_TO_ADDR
// weapon := 0 ;
68282: LD_ADDR_VAR 0 8
68286: PUSH
68287: LD_INT 0
68289: ST_TO_ADDR
// if not nat then
68290: LD_VAR 0 7
68294: NOT
68295: IFFALSE 68299
// continue ;
68297: GO 68264
// for j in list [ nat ] do
68299: LD_ADDR_VAR 0 5
68303: PUSH
68304: LD_VAR 0 10
68308: PUSH
68309: LD_VAR 0 7
68313: ARRAY
68314: PUSH
68315: FOR_IN
68316: IFFALSE 68357
// if GetBWeapon ( i ) = j [ 1 ] then
68318: LD_VAR 0 4
68322: PPUSH
68323: CALL_OW 269
68327: PUSH
68328: LD_VAR 0 5
68332: PUSH
68333: LD_INT 1
68335: ARRAY
68336: EQUAL
68337: IFFALSE 68355
// begin weapon := j [ 2 ] ;
68339: LD_ADDR_VAR 0 8
68343: PUSH
68344: LD_VAR 0 5
68348: PUSH
68349: LD_INT 2
68351: ARRAY
68352: ST_TO_ADDR
// break ;
68353: GO 68357
// end ;
68355: GO 68315
68357: POP
68358: POP
// if not weapon then
68359: LD_VAR 0 8
68363: NOT
68364: IFFALSE 68368
// continue ;
68366: GO 68264
// for k in factories do
68368: LD_ADDR_VAR 0 6
68372: PUSH
68373: LD_VAR 0 2
68377: PUSH
68378: FOR_IN
68379: IFFALSE 68444
// begin weapons := AvailableWeaponList ( k ) ;
68381: LD_ADDR_VAR 0 9
68385: PUSH
68386: LD_VAR 0 6
68390: PPUSH
68391: CALL_OW 478
68395: ST_TO_ADDR
// if not weapons then
68396: LD_VAR 0 9
68400: NOT
68401: IFFALSE 68405
// continue ;
68403: GO 68378
// if weapon in weapons then
68405: LD_VAR 0 8
68409: PUSH
68410: LD_VAR 0 9
68414: IN
68415: IFFALSE 68442
// begin result := [ i , weapon ] ;
68417: LD_ADDR_VAR 0 3
68421: PUSH
68422: LD_VAR 0 4
68426: PUSH
68427: LD_VAR 0 8
68431: PUSH
68432: EMPTY
68433: LIST
68434: LIST
68435: ST_TO_ADDR
// exit ;
68436: POP
68437: POP
68438: POP
68439: POP
68440: GO 68450
// end ; end ;
68442: GO 68378
68444: POP
68445: POP
// end ;
68446: GO 68264
68448: POP
68449: POP
// end ;
68450: LD_VAR 0 3
68454: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68455: LD_INT 0
68457: PPUSH
// if not side or side > 8 then
68458: LD_VAR 0 3
68462: NOT
68463: PUSH
68464: LD_VAR 0 3
68468: PUSH
68469: LD_INT 8
68471: GREATER
68472: OR
68473: IFFALSE 68477
// exit ;
68475: GO 68536
// if not range then
68477: LD_VAR 0 4
68481: NOT
68482: IFFALSE 68493
// range := - 12 ;
68484: LD_ADDR_VAR 0 4
68488: PUSH
68489: LD_INT 12
68491: NEG
68492: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68493: LD_VAR 0 1
68497: PPUSH
68498: LD_VAR 0 2
68502: PPUSH
68503: LD_VAR 0 3
68507: PPUSH
68508: LD_VAR 0 4
68512: PPUSH
68513: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68517: LD_VAR 0 1
68521: PPUSH
68522: LD_VAR 0 2
68526: PPUSH
68527: LD_VAR 0 3
68531: PPUSH
68532: CALL_OW 331
// end ;
68536: LD_VAR 0 5
68540: RET
// export function Video ( mode ) ; begin
68541: LD_INT 0
68543: PPUSH
// ingame_video = mode ;
68544: LD_ADDR_OWVAR 52
68548: PUSH
68549: LD_VAR 0 1
68553: ST_TO_ADDR
// interface_hidden = mode ;
68554: LD_ADDR_OWVAR 54
68558: PUSH
68559: LD_VAR 0 1
68563: ST_TO_ADDR
// end ;
68564: LD_VAR 0 2
68568: RET
// export function Join ( array , element ) ; begin
68569: LD_INT 0
68571: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68572: LD_ADDR_VAR 0 3
68576: PUSH
68577: LD_VAR 0 1
68581: PPUSH
68582: LD_VAR 0 1
68586: PUSH
68587: LD_INT 1
68589: PLUS
68590: PPUSH
68591: LD_VAR 0 2
68595: PPUSH
68596: CALL_OW 1
68600: ST_TO_ADDR
// end ;
68601: LD_VAR 0 3
68605: RET
// export function JoinUnion ( array , element ) ; begin
68606: LD_INT 0
68608: PPUSH
// result := array union element ;
68609: LD_ADDR_VAR 0 3
68613: PUSH
68614: LD_VAR 0 1
68618: PUSH
68619: LD_VAR 0 2
68623: UNION
68624: ST_TO_ADDR
// end ;
68625: LD_VAR 0 3
68629: RET
// export function GetBehemoths ( side ) ; begin
68630: LD_INT 0
68632: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
68633: LD_ADDR_VAR 0 2
68637: PUSH
68638: LD_INT 22
68640: PUSH
68641: LD_VAR 0 1
68645: PUSH
68646: EMPTY
68647: LIST
68648: LIST
68649: PUSH
68650: LD_INT 31
68652: PUSH
68653: LD_INT 25
68655: PUSH
68656: EMPTY
68657: LIST
68658: LIST
68659: PUSH
68660: EMPTY
68661: LIST
68662: LIST
68663: PPUSH
68664: CALL_OW 69
68668: ST_TO_ADDR
// end ;
68669: LD_VAR 0 2
68673: RET
// export function Shuffle ( array ) ; var i , index ; begin
68674: LD_INT 0
68676: PPUSH
68677: PPUSH
68678: PPUSH
// result := [ ] ;
68679: LD_ADDR_VAR 0 2
68683: PUSH
68684: EMPTY
68685: ST_TO_ADDR
// if not array then
68686: LD_VAR 0 1
68690: NOT
68691: IFFALSE 68695
// exit ;
68693: GO 68794
// Randomize ;
68695: CALL_OW 10
// for i = array downto 1 do
68699: LD_ADDR_VAR 0 3
68703: PUSH
68704: DOUBLE
68705: LD_VAR 0 1
68709: INC
68710: ST_TO_ADDR
68711: LD_INT 1
68713: PUSH
68714: FOR_DOWNTO
68715: IFFALSE 68792
// begin index := rand ( 1 , array ) ;
68717: LD_ADDR_VAR 0 4
68721: PUSH
68722: LD_INT 1
68724: PPUSH
68725: LD_VAR 0 1
68729: PPUSH
68730: CALL_OW 12
68734: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68735: LD_ADDR_VAR 0 2
68739: PUSH
68740: LD_VAR 0 2
68744: PPUSH
68745: LD_VAR 0 2
68749: PUSH
68750: LD_INT 1
68752: PLUS
68753: PPUSH
68754: LD_VAR 0 1
68758: PUSH
68759: LD_VAR 0 4
68763: ARRAY
68764: PPUSH
68765: CALL_OW 2
68769: ST_TO_ADDR
// array := Delete ( array , index ) ;
68770: LD_ADDR_VAR 0 1
68774: PUSH
68775: LD_VAR 0 1
68779: PPUSH
68780: LD_VAR 0 4
68784: PPUSH
68785: CALL_OW 3
68789: ST_TO_ADDR
// end ;
68790: GO 68714
68792: POP
68793: POP
// end ;
68794: LD_VAR 0 2
68798: RET
// export function GetBaseMaterials ( base ) ; begin
68799: LD_INT 0
68801: PPUSH
// result := [ 0 , 0 , 0 ] ;
68802: LD_ADDR_VAR 0 2
68806: PUSH
68807: LD_INT 0
68809: PUSH
68810: LD_INT 0
68812: PUSH
68813: LD_INT 0
68815: PUSH
68816: EMPTY
68817: LIST
68818: LIST
68819: LIST
68820: ST_TO_ADDR
// if not base then
68821: LD_VAR 0 1
68825: NOT
68826: IFFALSE 68830
// exit ;
68828: GO 68879
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68830: LD_ADDR_VAR 0 2
68834: PUSH
68835: LD_VAR 0 1
68839: PPUSH
68840: LD_INT 1
68842: PPUSH
68843: CALL_OW 275
68847: PUSH
68848: LD_VAR 0 1
68852: PPUSH
68853: LD_INT 2
68855: PPUSH
68856: CALL_OW 275
68860: PUSH
68861: LD_VAR 0 1
68865: PPUSH
68866: LD_INT 3
68868: PPUSH
68869: CALL_OW 275
68873: PUSH
68874: EMPTY
68875: LIST
68876: LIST
68877: LIST
68878: ST_TO_ADDR
// end ;
68879: LD_VAR 0 2
68883: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68884: LD_INT 0
68886: PPUSH
68887: PPUSH
// result := array ;
68888: LD_ADDR_VAR 0 3
68892: PUSH
68893: LD_VAR 0 1
68897: ST_TO_ADDR
// if size > 0 then
68898: LD_VAR 0 2
68902: PUSH
68903: LD_INT 0
68905: GREATER
68906: IFFALSE 68952
// for i := array downto size do
68908: LD_ADDR_VAR 0 4
68912: PUSH
68913: DOUBLE
68914: LD_VAR 0 1
68918: INC
68919: ST_TO_ADDR
68920: LD_VAR 0 2
68924: PUSH
68925: FOR_DOWNTO
68926: IFFALSE 68950
// result := Delete ( result , result ) ;
68928: LD_ADDR_VAR 0 3
68932: PUSH
68933: LD_VAR 0 3
68937: PPUSH
68938: LD_VAR 0 3
68942: PPUSH
68943: CALL_OW 3
68947: ST_TO_ADDR
68948: GO 68925
68950: POP
68951: POP
// end ;
68952: LD_VAR 0 3
68956: RET
// export function ComExit ( unit ) ; var tmp ; begin
68957: LD_INT 0
68959: PPUSH
68960: PPUSH
// if not IsInUnit ( unit ) then
68961: LD_VAR 0 1
68965: PPUSH
68966: CALL_OW 310
68970: NOT
68971: IFFALSE 68975
// exit ;
68973: GO 69035
// tmp := IsInUnit ( unit ) ;
68975: LD_ADDR_VAR 0 3
68979: PUSH
68980: LD_VAR 0 1
68984: PPUSH
68985: CALL_OW 310
68989: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68990: LD_VAR 0 3
68994: PPUSH
68995: CALL_OW 247
68999: PUSH
69000: LD_INT 2
69002: EQUAL
69003: IFFALSE 69016
// ComExitVehicle ( unit ) else
69005: LD_VAR 0 1
69009: PPUSH
69010: CALL_OW 121
69014: GO 69025
// ComExitBuilding ( unit ) ;
69016: LD_VAR 0 1
69020: PPUSH
69021: CALL_OW 122
// result := tmp ;
69025: LD_ADDR_VAR 0 2
69029: PUSH
69030: LD_VAR 0 3
69034: ST_TO_ADDR
// end ;
69035: LD_VAR 0 2
69039: RET
// export function ComExitAll ( units ) ; var i ; begin
69040: LD_INT 0
69042: PPUSH
69043: PPUSH
// if not units then
69044: LD_VAR 0 1
69048: NOT
69049: IFFALSE 69053
// exit ;
69051: GO 69079
// for i in units do
69053: LD_ADDR_VAR 0 3
69057: PUSH
69058: LD_VAR 0 1
69062: PUSH
69063: FOR_IN
69064: IFFALSE 69077
// ComExit ( i ) ;
69066: LD_VAR 0 3
69070: PPUSH
69071: CALL 68957 0 1
69075: GO 69063
69077: POP
69078: POP
// end ;
69079: LD_VAR 0 2
69083: RET
// export function ResetHc ; begin
69084: LD_INT 0
69086: PPUSH
// InitHc ;
69087: CALL_OW 19
// hc_importance := 0 ;
69091: LD_ADDR_OWVAR 32
69095: PUSH
69096: LD_INT 0
69098: ST_TO_ADDR
// end ;
69099: LD_VAR 0 1
69103: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69104: LD_INT 0
69106: PPUSH
69107: PPUSH
69108: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69109: LD_ADDR_VAR 0 6
69113: PUSH
69114: LD_VAR 0 1
69118: PUSH
69119: LD_VAR 0 3
69123: PLUS
69124: PUSH
69125: LD_INT 2
69127: DIV
69128: ST_TO_ADDR
// if _x < 0 then
69129: LD_VAR 0 6
69133: PUSH
69134: LD_INT 0
69136: LESS
69137: IFFALSE 69154
// _x := _x * - 1 ;
69139: LD_ADDR_VAR 0 6
69143: PUSH
69144: LD_VAR 0 6
69148: PUSH
69149: LD_INT 1
69151: NEG
69152: MUL
69153: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69154: LD_ADDR_VAR 0 7
69158: PUSH
69159: LD_VAR 0 2
69163: PUSH
69164: LD_VAR 0 4
69168: PLUS
69169: PUSH
69170: LD_INT 2
69172: DIV
69173: ST_TO_ADDR
// if _y < 0 then
69174: LD_VAR 0 7
69178: PUSH
69179: LD_INT 0
69181: LESS
69182: IFFALSE 69199
// _y := _y * - 1 ;
69184: LD_ADDR_VAR 0 7
69188: PUSH
69189: LD_VAR 0 7
69193: PUSH
69194: LD_INT 1
69196: NEG
69197: MUL
69198: ST_TO_ADDR
// result := [ _x , _y ] ;
69199: LD_ADDR_VAR 0 5
69203: PUSH
69204: LD_VAR 0 6
69208: PUSH
69209: LD_VAR 0 7
69213: PUSH
69214: EMPTY
69215: LIST
69216: LIST
69217: ST_TO_ADDR
// end ;
69218: LD_VAR 0 5
69222: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69223: LD_INT 0
69225: PPUSH
69226: PPUSH
69227: PPUSH
69228: PPUSH
// task := GetTaskList ( unit ) ;
69229: LD_ADDR_VAR 0 7
69233: PUSH
69234: LD_VAR 0 1
69238: PPUSH
69239: CALL_OW 437
69243: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69244: LD_VAR 0 7
69248: NOT
69249: PUSH
69250: LD_VAR 0 1
69254: PPUSH
69255: LD_VAR 0 2
69259: PPUSH
69260: CALL_OW 308
69264: NOT
69265: AND
69266: IFFALSE 69270
// exit ;
69268: GO 69388
// if IsInArea ( unit , area ) then
69270: LD_VAR 0 1
69274: PPUSH
69275: LD_VAR 0 2
69279: PPUSH
69280: CALL_OW 308
69284: IFFALSE 69302
// begin ComMoveToArea ( unit , goAway ) ;
69286: LD_VAR 0 1
69290: PPUSH
69291: LD_VAR 0 3
69295: PPUSH
69296: CALL_OW 113
// exit ;
69300: GO 69388
// end ; if task [ 1 ] [ 1 ] <> M then
69302: LD_VAR 0 7
69306: PUSH
69307: LD_INT 1
69309: ARRAY
69310: PUSH
69311: LD_INT 1
69313: ARRAY
69314: PUSH
69315: LD_STRING M
69317: NONEQUAL
69318: IFFALSE 69322
// exit ;
69320: GO 69388
// x := task [ 1 ] [ 2 ] ;
69322: LD_ADDR_VAR 0 5
69326: PUSH
69327: LD_VAR 0 7
69331: PUSH
69332: LD_INT 1
69334: ARRAY
69335: PUSH
69336: LD_INT 2
69338: ARRAY
69339: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69340: LD_ADDR_VAR 0 6
69344: PUSH
69345: LD_VAR 0 7
69349: PUSH
69350: LD_INT 1
69352: ARRAY
69353: PUSH
69354: LD_INT 3
69356: ARRAY
69357: ST_TO_ADDR
// if InArea ( x , y , area ) then
69358: LD_VAR 0 5
69362: PPUSH
69363: LD_VAR 0 6
69367: PPUSH
69368: LD_VAR 0 2
69372: PPUSH
69373: CALL_OW 309
69377: IFFALSE 69388
// ComStop ( unit ) ;
69379: LD_VAR 0 1
69383: PPUSH
69384: CALL_OW 141
// end ;
69388: LD_VAR 0 4
69392: RET
// export function Abs ( value ) ; begin
69393: LD_INT 0
69395: PPUSH
// result := value ;
69396: LD_ADDR_VAR 0 2
69400: PUSH
69401: LD_VAR 0 1
69405: ST_TO_ADDR
// if value < 0 then
69406: LD_VAR 0 1
69410: PUSH
69411: LD_INT 0
69413: LESS
69414: IFFALSE 69431
// result := value * - 1 ;
69416: LD_ADDR_VAR 0 2
69420: PUSH
69421: LD_VAR 0 1
69425: PUSH
69426: LD_INT 1
69428: NEG
69429: MUL
69430: ST_TO_ADDR
// end ;
69431: LD_VAR 0 2
69435: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69436: LD_INT 0
69438: PPUSH
69439: PPUSH
69440: PPUSH
69441: PPUSH
69442: PPUSH
69443: PPUSH
69444: PPUSH
69445: PPUSH
// if not unit or not building then
69446: LD_VAR 0 1
69450: NOT
69451: PUSH
69452: LD_VAR 0 2
69456: NOT
69457: OR
69458: IFFALSE 69462
// exit ;
69460: GO 69688
// x := GetX ( building ) ;
69462: LD_ADDR_VAR 0 4
69466: PUSH
69467: LD_VAR 0 2
69471: PPUSH
69472: CALL_OW 250
69476: ST_TO_ADDR
// y := GetY ( building ) ;
69477: LD_ADDR_VAR 0 6
69481: PUSH
69482: LD_VAR 0 2
69486: PPUSH
69487: CALL_OW 251
69491: ST_TO_ADDR
// d := GetDir ( building ) ;
69492: LD_ADDR_VAR 0 8
69496: PUSH
69497: LD_VAR 0 2
69501: PPUSH
69502: CALL_OW 254
69506: ST_TO_ADDR
// r := 4 ;
69507: LD_ADDR_VAR 0 9
69511: PUSH
69512: LD_INT 4
69514: ST_TO_ADDR
// for i := 1 to 5 do
69515: LD_ADDR_VAR 0 10
69519: PUSH
69520: DOUBLE
69521: LD_INT 1
69523: DEC
69524: ST_TO_ADDR
69525: LD_INT 5
69527: PUSH
69528: FOR_TO
69529: IFFALSE 69686
// begin _x := ShiftX ( x , d , r + i ) ;
69531: LD_ADDR_VAR 0 5
69535: PUSH
69536: LD_VAR 0 4
69540: PPUSH
69541: LD_VAR 0 8
69545: PPUSH
69546: LD_VAR 0 9
69550: PUSH
69551: LD_VAR 0 10
69555: PLUS
69556: PPUSH
69557: CALL_OW 272
69561: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69562: LD_ADDR_VAR 0 7
69566: PUSH
69567: LD_VAR 0 6
69571: PPUSH
69572: LD_VAR 0 8
69576: PPUSH
69577: LD_VAR 0 9
69581: PUSH
69582: LD_VAR 0 10
69586: PLUS
69587: PPUSH
69588: CALL_OW 273
69592: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69593: LD_VAR 0 5
69597: PPUSH
69598: LD_VAR 0 7
69602: PPUSH
69603: CALL_OW 488
69607: PUSH
69608: LD_VAR 0 5
69612: PPUSH
69613: LD_VAR 0 7
69617: PPUSH
69618: CALL_OW 428
69622: PPUSH
69623: CALL_OW 247
69627: PUSH
69628: LD_INT 3
69630: PUSH
69631: LD_INT 2
69633: PUSH
69634: EMPTY
69635: LIST
69636: LIST
69637: IN
69638: NOT
69639: AND
69640: IFFALSE 69684
// begin ComMoveXY ( unit , _x , _y ) ;
69642: LD_VAR 0 1
69646: PPUSH
69647: LD_VAR 0 5
69651: PPUSH
69652: LD_VAR 0 7
69656: PPUSH
69657: CALL_OW 111
// result := [ _x , _y ] ;
69661: LD_ADDR_VAR 0 3
69665: PUSH
69666: LD_VAR 0 5
69670: PUSH
69671: LD_VAR 0 7
69675: PUSH
69676: EMPTY
69677: LIST
69678: LIST
69679: ST_TO_ADDR
// exit ;
69680: POP
69681: POP
69682: GO 69688
// end ; end ;
69684: GO 69528
69686: POP
69687: POP
// end ;
69688: LD_VAR 0 3
69692: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69693: LD_INT 0
69695: PPUSH
69696: PPUSH
69697: PPUSH
// result := 0 ;
69698: LD_ADDR_VAR 0 3
69702: PUSH
69703: LD_INT 0
69705: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69706: LD_VAR 0 1
69710: PUSH
69711: LD_INT 0
69713: LESS
69714: PUSH
69715: LD_VAR 0 1
69719: PUSH
69720: LD_INT 8
69722: GREATER
69723: OR
69724: PUSH
69725: LD_VAR 0 2
69729: PUSH
69730: LD_INT 0
69732: LESS
69733: OR
69734: PUSH
69735: LD_VAR 0 2
69739: PUSH
69740: LD_INT 8
69742: GREATER
69743: OR
69744: IFFALSE 69748
// exit ;
69746: GO 69823
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69748: LD_ADDR_VAR 0 4
69752: PUSH
69753: LD_INT 22
69755: PUSH
69756: LD_VAR 0 2
69760: PUSH
69761: EMPTY
69762: LIST
69763: LIST
69764: PPUSH
69765: CALL_OW 69
69769: PUSH
69770: FOR_IN
69771: IFFALSE 69821
// begin un := UnitShoot ( i ) ;
69773: LD_ADDR_VAR 0 5
69777: PUSH
69778: LD_VAR 0 4
69782: PPUSH
69783: CALL_OW 504
69787: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69788: LD_VAR 0 5
69792: PPUSH
69793: CALL_OW 255
69797: PUSH
69798: LD_VAR 0 1
69802: EQUAL
69803: IFFALSE 69819
// begin result := un ;
69805: LD_ADDR_VAR 0 3
69809: PUSH
69810: LD_VAR 0 5
69814: ST_TO_ADDR
// exit ;
69815: POP
69816: POP
69817: GO 69823
// end ; end ;
69819: GO 69770
69821: POP
69822: POP
// end ;
69823: LD_VAR 0 3
69827: RET
// export function GetCargoBay ( units ) ; begin
69828: LD_INT 0
69830: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69831: LD_ADDR_VAR 0 2
69835: PUSH
69836: LD_VAR 0 1
69840: PPUSH
69841: LD_INT 2
69843: PUSH
69844: LD_INT 34
69846: PUSH
69847: LD_INT 12
69849: PUSH
69850: EMPTY
69851: LIST
69852: LIST
69853: PUSH
69854: LD_INT 34
69856: PUSH
69857: LD_INT 51
69859: PUSH
69860: EMPTY
69861: LIST
69862: LIST
69863: PUSH
69864: LD_INT 34
69866: PUSH
69867: LD_INT 32
69869: PUSH
69870: EMPTY
69871: LIST
69872: LIST
69873: PUSH
69874: LD_INT 34
69876: PUSH
69877: LD_EXP 33
69881: PUSH
69882: EMPTY
69883: LIST
69884: LIST
69885: PUSH
69886: EMPTY
69887: LIST
69888: LIST
69889: LIST
69890: LIST
69891: LIST
69892: PPUSH
69893: CALL_OW 72
69897: ST_TO_ADDR
// end ;
69898: LD_VAR 0 2
69902: RET
// export function Negate ( value ) ; begin
69903: LD_INT 0
69905: PPUSH
// result := not value ;
69906: LD_ADDR_VAR 0 2
69910: PUSH
69911: LD_VAR 0 1
69915: NOT
69916: ST_TO_ADDR
// end ;
69917: LD_VAR 0 2
69921: RET
// export function Inc ( value ) ; begin
69922: LD_INT 0
69924: PPUSH
// result := value + 1 ;
69925: LD_ADDR_VAR 0 2
69929: PUSH
69930: LD_VAR 0 1
69934: PUSH
69935: LD_INT 1
69937: PLUS
69938: ST_TO_ADDR
// end ;
69939: LD_VAR 0 2
69943: RET
// export function Dec ( value ) ; begin
69944: LD_INT 0
69946: PPUSH
// result := value - 1 ;
69947: LD_ADDR_VAR 0 2
69951: PUSH
69952: LD_VAR 0 1
69956: PUSH
69957: LD_INT 1
69959: MINUS
69960: ST_TO_ADDR
// end ;
69961: LD_VAR 0 2
69965: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69966: LD_INT 0
69968: PPUSH
69969: PPUSH
69970: PPUSH
69971: PPUSH
69972: PPUSH
69973: PPUSH
69974: PPUSH
69975: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69976: LD_VAR 0 1
69980: PPUSH
69981: LD_VAR 0 2
69985: PPUSH
69986: CALL_OW 488
69990: NOT
69991: PUSH
69992: LD_VAR 0 3
69996: PPUSH
69997: LD_VAR 0 4
70001: PPUSH
70002: CALL_OW 488
70006: NOT
70007: OR
70008: IFFALSE 70021
// begin result := - 1 ;
70010: LD_ADDR_VAR 0 5
70014: PUSH
70015: LD_INT 1
70017: NEG
70018: ST_TO_ADDR
// exit ;
70019: GO 70256
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
70021: LD_ADDR_VAR 0 12
70025: PUSH
70026: LD_VAR 0 1
70030: PPUSH
70031: LD_VAR 0 2
70035: PPUSH
70036: LD_VAR 0 3
70040: PPUSH
70041: LD_VAR 0 4
70045: PPUSH
70046: CALL 69104 0 4
70050: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
70051: LD_ADDR_VAR 0 11
70055: PUSH
70056: LD_VAR 0 1
70060: PPUSH
70061: LD_VAR 0 2
70065: PPUSH
70066: LD_VAR 0 12
70070: PUSH
70071: LD_INT 1
70073: ARRAY
70074: PPUSH
70075: LD_VAR 0 12
70079: PUSH
70080: LD_INT 2
70082: ARRAY
70083: PPUSH
70084: CALL_OW 298
70088: ST_TO_ADDR
// distance := 9999 ;
70089: LD_ADDR_VAR 0 10
70093: PUSH
70094: LD_INT 9999
70096: ST_TO_ADDR
// for i := 0 to 5 do
70097: LD_ADDR_VAR 0 6
70101: PUSH
70102: DOUBLE
70103: LD_INT 0
70105: DEC
70106: ST_TO_ADDR
70107: LD_INT 5
70109: PUSH
70110: FOR_TO
70111: IFFALSE 70254
// begin _x := ShiftX ( x1 , i , centerDist ) ;
70113: LD_ADDR_VAR 0 7
70117: PUSH
70118: LD_VAR 0 1
70122: PPUSH
70123: LD_VAR 0 6
70127: PPUSH
70128: LD_VAR 0 11
70132: PPUSH
70133: CALL_OW 272
70137: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
70138: LD_ADDR_VAR 0 8
70142: PUSH
70143: LD_VAR 0 2
70147: PPUSH
70148: LD_VAR 0 6
70152: PPUSH
70153: LD_VAR 0 11
70157: PPUSH
70158: CALL_OW 273
70162: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70163: LD_VAR 0 7
70167: PPUSH
70168: LD_VAR 0 8
70172: PPUSH
70173: CALL_OW 488
70177: NOT
70178: IFFALSE 70182
// continue ;
70180: GO 70110
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70182: LD_ADDR_VAR 0 9
70186: PUSH
70187: LD_VAR 0 12
70191: PUSH
70192: LD_INT 1
70194: ARRAY
70195: PPUSH
70196: LD_VAR 0 12
70200: PUSH
70201: LD_INT 2
70203: ARRAY
70204: PPUSH
70205: LD_VAR 0 7
70209: PPUSH
70210: LD_VAR 0 8
70214: PPUSH
70215: CALL_OW 298
70219: ST_TO_ADDR
// if tmp < distance then
70220: LD_VAR 0 9
70224: PUSH
70225: LD_VAR 0 10
70229: LESS
70230: IFFALSE 70252
// begin result := i ;
70232: LD_ADDR_VAR 0 5
70236: PUSH
70237: LD_VAR 0 6
70241: ST_TO_ADDR
// distance := tmp ;
70242: LD_ADDR_VAR 0 10
70246: PUSH
70247: LD_VAR 0 9
70251: ST_TO_ADDR
// end ; end ;
70252: GO 70110
70254: POP
70255: POP
// end ;
70256: LD_VAR 0 5
70260: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70261: LD_INT 0
70263: PPUSH
70264: PPUSH
// if not driver or not IsInUnit ( driver ) then
70265: LD_VAR 0 1
70269: NOT
70270: PUSH
70271: LD_VAR 0 1
70275: PPUSH
70276: CALL_OW 310
70280: NOT
70281: OR
70282: IFFALSE 70286
// exit ;
70284: GO 70376
// vehicle := IsInUnit ( driver ) ;
70286: LD_ADDR_VAR 0 3
70290: PUSH
70291: LD_VAR 0 1
70295: PPUSH
70296: CALL_OW 310
70300: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70301: LD_VAR 0 1
70305: PPUSH
70306: LD_STRING \
70308: PUSH
70309: LD_INT 0
70311: PUSH
70312: LD_INT 0
70314: PUSH
70315: LD_INT 0
70317: PUSH
70318: LD_INT 0
70320: PUSH
70321: LD_INT 0
70323: PUSH
70324: LD_INT 0
70326: PUSH
70327: EMPTY
70328: LIST
70329: LIST
70330: LIST
70331: LIST
70332: LIST
70333: LIST
70334: LIST
70335: PUSH
70336: LD_STRING E
70338: PUSH
70339: LD_INT 0
70341: PUSH
70342: LD_INT 0
70344: PUSH
70345: LD_VAR 0 3
70349: PUSH
70350: LD_INT 0
70352: PUSH
70353: LD_INT 0
70355: PUSH
70356: LD_INT 0
70358: PUSH
70359: EMPTY
70360: LIST
70361: LIST
70362: LIST
70363: LIST
70364: LIST
70365: LIST
70366: LIST
70367: PUSH
70368: EMPTY
70369: LIST
70370: LIST
70371: PPUSH
70372: CALL_OW 446
// end ;
70376: LD_VAR 0 2
70380: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70381: LD_INT 0
70383: PPUSH
70384: PPUSH
// if not driver or not IsInUnit ( driver ) then
70385: LD_VAR 0 1
70389: NOT
70390: PUSH
70391: LD_VAR 0 1
70395: PPUSH
70396: CALL_OW 310
70400: NOT
70401: OR
70402: IFFALSE 70406
// exit ;
70404: GO 70496
// vehicle := IsInUnit ( driver ) ;
70406: LD_ADDR_VAR 0 3
70410: PUSH
70411: LD_VAR 0 1
70415: PPUSH
70416: CALL_OW 310
70420: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70421: LD_VAR 0 1
70425: PPUSH
70426: LD_STRING \
70428: PUSH
70429: LD_INT 0
70431: PUSH
70432: LD_INT 0
70434: PUSH
70435: LD_INT 0
70437: PUSH
70438: LD_INT 0
70440: PUSH
70441: LD_INT 0
70443: PUSH
70444: LD_INT 0
70446: PUSH
70447: EMPTY
70448: LIST
70449: LIST
70450: LIST
70451: LIST
70452: LIST
70453: LIST
70454: LIST
70455: PUSH
70456: LD_STRING E
70458: PUSH
70459: LD_INT 0
70461: PUSH
70462: LD_INT 0
70464: PUSH
70465: LD_VAR 0 3
70469: PUSH
70470: LD_INT 0
70472: PUSH
70473: LD_INT 0
70475: PUSH
70476: LD_INT 0
70478: PUSH
70479: EMPTY
70480: LIST
70481: LIST
70482: LIST
70483: LIST
70484: LIST
70485: LIST
70486: LIST
70487: PUSH
70488: EMPTY
70489: LIST
70490: LIST
70491: PPUSH
70492: CALL_OW 447
// end ;
70496: LD_VAR 0 2
70500: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70501: LD_INT 0
70503: PPUSH
70504: PPUSH
70505: PPUSH
// tmp := [ ] ;
70506: LD_ADDR_VAR 0 5
70510: PUSH
70511: EMPTY
70512: ST_TO_ADDR
// for i in units do
70513: LD_ADDR_VAR 0 4
70517: PUSH
70518: LD_VAR 0 1
70522: PUSH
70523: FOR_IN
70524: IFFALSE 70562
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70526: LD_ADDR_VAR 0 5
70530: PUSH
70531: LD_VAR 0 5
70535: PPUSH
70536: LD_VAR 0 5
70540: PUSH
70541: LD_INT 1
70543: PLUS
70544: PPUSH
70545: LD_VAR 0 4
70549: PPUSH
70550: CALL_OW 256
70554: PPUSH
70555: CALL_OW 2
70559: ST_TO_ADDR
70560: GO 70523
70562: POP
70563: POP
// if not tmp then
70564: LD_VAR 0 5
70568: NOT
70569: IFFALSE 70573
// exit ;
70571: GO 70621
// if asc then
70573: LD_VAR 0 2
70577: IFFALSE 70601
// result := SortListByListAsc ( units , tmp ) else
70579: LD_ADDR_VAR 0 3
70583: PUSH
70584: LD_VAR 0 1
70588: PPUSH
70589: LD_VAR 0 5
70593: PPUSH
70594: CALL_OW 76
70598: ST_TO_ADDR
70599: GO 70621
// result := SortListByListDesc ( units , tmp ) ;
70601: LD_ADDR_VAR 0 3
70605: PUSH
70606: LD_VAR 0 1
70610: PPUSH
70611: LD_VAR 0 5
70615: PPUSH
70616: CALL_OW 77
70620: ST_TO_ADDR
// end ;
70621: LD_VAR 0 3
70625: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70626: LD_INT 0
70628: PPUSH
70629: PPUSH
// task := GetTaskList ( mech ) ;
70630: LD_ADDR_VAR 0 4
70634: PUSH
70635: LD_VAR 0 1
70639: PPUSH
70640: CALL_OW 437
70644: ST_TO_ADDR
// if not task then
70645: LD_VAR 0 4
70649: NOT
70650: IFFALSE 70654
// exit ;
70652: GO 70696
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70654: LD_ADDR_VAR 0 3
70658: PUSH
70659: LD_VAR 0 4
70663: PUSH
70664: LD_INT 1
70666: ARRAY
70667: PUSH
70668: LD_INT 1
70670: ARRAY
70671: PUSH
70672: LD_STRING r
70674: EQUAL
70675: PUSH
70676: LD_VAR 0 4
70680: PUSH
70681: LD_INT 1
70683: ARRAY
70684: PUSH
70685: LD_INT 4
70687: ARRAY
70688: PUSH
70689: LD_VAR 0 2
70693: EQUAL
70694: AND
70695: ST_TO_ADDR
// end ;
70696: LD_VAR 0 3
70700: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70701: LD_INT 0
70703: PPUSH
// SetDir ( unit , d ) ;
70704: LD_VAR 0 1
70708: PPUSH
70709: LD_VAR 0 4
70713: PPUSH
70714: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70718: LD_VAR 0 1
70722: PPUSH
70723: LD_VAR 0 2
70727: PPUSH
70728: LD_VAR 0 3
70732: PPUSH
70733: LD_VAR 0 5
70737: PPUSH
70738: CALL_OW 48
// end ;
70742: LD_VAR 0 6
70746: RET
// export function ToNaturalNumber ( number ) ; begin
70747: LD_INT 0
70749: PPUSH
// result := number div 1 ;
70750: LD_ADDR_VAR 0 2
70754: PUSH
70755: LD_VAR 0 1
70759: PUSH
70760: LD_INT 1
70762: DIV
70763: ST_TO_ADDR
// if number < 0 then
70764: LD_VAR 0 1
70768: PUSH
70769: LD_INT 0
70771: LESS
70772: IFFALSE 70782
// result := 0 ;
70774: LD_ADDR_VAR 0 2
70778: PUSH
70779: LD_INT 0
70781: ST_TO_ADDR
// end ;
70782: LD_VAR 0 2
70786: RET
// export function SortByClass ( units , class ) ; var un ; begin
70787: LD_INT 0
70789: PPUSH
70790: PPUSH
// if not units or not class then
70791: LD_VAR 0 1
70795: NOT
70796: PUSH
70797: LD_VAR 0 2
70801: NOT
70802: OR
70803: IFFALSE 70807
// exit ;
70805: GO 70902
// result := [ ] ;
70807: LD_ADDR_VAR 0 3
70811: PUSH
70812: EMPTY
70813: ST_TO_ADDR
// for un in units do
70814: LD_ADDR_VAR 0 4
70818: PUSH
70819: LD_VAR 0 1
70823: PUSH
70824: FOR_IN
70825: IFFALSE 70900
// if GetClass ( un ) = class then
70827: LD_VAR 0 4
70831: PPUSH
70832: CALL_OW 257
70836: PUSH
70837: LD_VAR 0 2
70841: EQUAL
70842: IFFALSE 70869
// result := Insert ( result , 1 , un ) else
70844: LD_ADDR_VAR 0 3
70848: PUSH
70849: LD_VAR 0 3
70853: PPUSH
70854: LD_INT 1
70856: PPUSH
70857: LD_VAR 0 4
70861: PPUSH
70862: CALL_OW 2
70866: ST_TO_ADDR
70867: GO 70898
// result := Replace ( result , result + 1 , un ) ;
70869: LD_ADDR_VAR 0 3
70873: PUSH
70874: LD_VAR 0 3
70878: PPUSH
70879: LD_VAR 0 3
70883: PUSH
70884: LD_INT 1
70886: PLUS
70887: PPUSH
70888: LD_VAR 0 4
70892: PPUSH
70893: CALL_OW 1
70897: ST_TO_ADDR
70898: GO 70824
70900: POP
70901: POP
// end ;
70902: LD_VAR 0 3
70906: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70907: LD_INT 0
70909: PPUSH
70910: PPUSH
70911: PPUSH
70912: PPUSH
70913: PPUSH
70914: PPUSH
70915: PPUSH
// result := [ ] ;
70916: LD_ADDR_VAR 0 4
70920: PUSH
70921: EMPTY
70922: ST_TO_ADDR
// if x - r < 0 then
70923: LD_VAR 0 1
70927: PUSH
70928: LD_VAR 0 3
70932: MINUS
70933: PUSH
70934: LD_INT 0
70936: LESS
70937: IFFALSE 70949
// min_x := 0 else
70939: LD_ADDR_VAR 0 8
70943: PUSH
70944: LD_INT 0
70946: ST_TO_ADDR
70947: GO 70965
// min_x := x - r ;
70949: LD_ADDR_VAR 0 8
70953: PUSH
70954: LD_VAR 0 1
70958: PUSH
70959: LD_VAR 0 3
70963: MINUS
70964: ST_TO_ADDR
// if y - r < 0 then
70965: LD_VAR 0 2
70969: PUSH
70970: LD_VAR 0 3
70974: MINUS
70975: PUSH
70976: LD_INT 0
70978: LESS
70979: IFFALSE 70991
// min_y := 0 else
70981: LD_ADDR_VAR 0 7
70985: PUSH
70986: LD_INT 0
70988: ST_TO_ADDR
70989: GO 71007
// min_y := y - r ;
70991: LD_ADDR_VAR 0 7
70995: PUSH
70996: LD_VAR 0 2
71000: PUSH
71001: LD_VAR 0 3
71005: MINUS
71006: ST_TO_ADDR
// max_x := x + r ;
71007: LD_ADDR_VAR 0 9
71011: PUSH
71012: LD_VAR 0 1
71016: PUSH
71017: LD_VAR 0 3
71021: PLUS
71022: ST_TO_ADDR
// max_y := y + r ;
71023: LD_ADDR_VAR 0 10
71027: PUSH
71028: LD_VAR 0 2
71032: PUSH
71033: LD_VAR 0 3
71037: PLUS
71038: ST_TO_ADDR
// for _x = min_x to max_x do
71039: LD_ADDR_VAR 0 5
71043: PUSH
71044: DOUBLE
71045: LD_VAR 0 8
71049: DEC
71050: ST_TO_ADDR
71051: LD_VAR 0 9
71055: PUSH
71056: FOR_TO
71057: IFFALSE 71158
// for _y = min_y to max_y do
71059: LD_ADDR_VAR 0 6
71063: PUSH
71064: DOUBLE
71065: LD_VAR 0 7
71069: DEC
71070: ST_TO_ADDR
71071: LD_VAR 0 10
71075: PUSH
71076: FOR_TO
71077: IFFALSE 71154
// begin if not ValidHex ( _x , _y ) then
71079: LD_VAR 0 5
71083: PPUSH
71084: LD_VAR 0 6
71088: PPUSH
71089: CALL_OW 488
71093: NOT
71094: IFFALSE 71098
// continue ;
71096: GO 71076
// if GetResourceTypeXY ( _x , _y ) then
71098: LD_VAR 0 5
71102: PPUSH
71103: LD_VAR 0 6
71107: PPUSH
71108: CALL_OW 283
71112: IFFALSE 71152
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71114: LD_ADDR_VAR 0 4
71118: PUSH
71119: LD_VAR 0 4
71123: PPUSH
71124: LD_VAR 0 4
71128: PUSH
71129: LD_INT 1
71131: PLUS
71132: PPUSH
71133: LD_VAR 0 5
71137: PUSH
71138: LD_VAR 0 6
71142: PUSH
71143: EMPTY
71144: LIST
71145: LIST
71146: PPUSH
71147: CALL_OW 1
71151: ST_TO_ADDR
// end ;
71152: GO 71076
71154: POP
71155: POP
71156: GO 71056
71158: POP
71159: POP
// end ;
71160: LD_VAR 0 4
71164: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71165: LD_INT 0
71167: PPUSH
71168: PPUSH
71169: PPUSH
71170: PPUSH
71171: PPUSH
71172: PPUSH
71173: PPUSH
71174: PPUSH
// if not units then
71175: LD_VAR 0 1
71179: NOT
71180: IFFALSE 71184
// exit ;
71182: GO 71609
// result := UnitFilter ( units , [ f_ok ] ) ;
71184: LD_ADDR_VAR 0 3
71188: PUSH
71189: LD_VAR 0 1
71193: PPUSH
71194: LD_INT 50
71196: PUSH
71197: EMPTY
71198: LIST
71199: PPUSH
71200: CALL_OW 72
71204: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71205: LD_ADDR_VAR 0 8
71209: PUSH
71210: LD_VAR 0 1
71214: PUSH
71215: LD_INT 1
71217: ARRAY
71218: PPUSH
71219: CALL_OW 255
71223: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
71224: LD_ADDR_VAR 0 10
71228: PUSH
71229: LD_INT 29
71231: PUSH
71232: LD_EXP 36
71236: PUSH
71237: EMPTY
71238: LIST
71239: LIST
71240: ST_TO_ADDR
// if not result then
71241: LD_VAR 0 3
71245: NOT
71246: IFFALSE 71250
// exit ;
71248: GO 71609
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71250: LD_ADDR_VAR 0 5
71254: PUSH
71255: LD_INT 81
71257: PUSH
71258: LD_VAR 0 8
71262: PUSH
71263: EMPTY
71264: LIST
71265: LIST
71266: PPUSH
71267: CALL_OW 69
71271: ST_TO_ADDR
// for i in result do
71272: LD_ADDR_VAR 0 4
71276: PUSH
71277: LD_VAR 0 3
71281: PUSH
71282: FOR_IN
71283: IFFALSE 71607
// begin tag := GetTag ( i ) + 1 ;
71285: LD_ADDR_VAR 0 9
71289: PUSH
71290: LD_VAR 0 4
71294: PPUSH
71295: CALL_OW 110
71299: PUSH
71300: LD_INT 1
71302: PLUS
71303: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71304: LD_ADDR_VAR 0 7
71308: PUSH
71309: LD_VAR 0 4
71313: PPUSH
71314: CALL_OW 250
71318: PPUSH
71319: LD_VAR 0 4
71323: PPUSH
71324: CALL_OW 251
71328: PPUSH
71329: LD_INT 6
71331: PPUSH
71332: CALL 70907 0 3
71336: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
71337: LD_VAR 0 7
71341: PUSH
71342: LD_VAR 0 4
71346: PPUSH
71347: CALL_OW 264
71351: PUSH
71352: LD_VAR 0 10
71356: IN
71357: NOT
71358: AND
71359: IFFALSE 71398
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71361: LD_VAR 0 4
71365: PPUSH
71366: LD_VAR 0 7
71370: PUSH
71371: LD_INT 1
71373: ARRAY
71374: PUSH
71375: LD_INT 1
71377: ARRAY
71378: PPUSH
71379: LD_VAR 0 7
71383: PUSH
71384: LD_INT 1
71386: ARRAY
71387: PUSH
71388: LD_INT 2
71390: ARRAY
71391: PPUSH
71392: CALL_OW 116
71396: GO 71605
// if path > tag then
71398: LD_VAR 0 2
71402: PUSH
71403: LD_VAR 0 9
71407: GREATER
71408: IFFALSE 71575
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
71410: LD_ADDR_VAR 0 6
71414: PUSH
71415: LD_VAR 0 5
71419: PPUSH
71420: LD_INT 91
71422: PUSH
71423: LD_VAR 0 4
71427: PUSH
71428: LD_INT 12
71430: PUSH
71431: EMPTY
71432: LIST
71433: LIST
71434: LIST
71435: PPUSH
71436: CALL_OW 72
71440: ST_TO_ADDR
// if nearEnemy then
71441: LD_VAR 0 6
71445: IFFALSE 71473
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71447: LD_VAR 0 4
71451: PPUSH
71452: LD_VAR 0 6
71456: PPUSH
71457: LD_VAR 0 4
71461: PPUSH
71462: CALL_OW 74
71466: PPUSH
71467: CALL_OW 115
71471: GO 71573
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71473: LD_VAR 0 4
71477: PPUSH
71478: LD_VAR 0 2
71482: PUSH
71483: LD_VAR 0 9
71487: ARRAY
71488: PUSH
71489: LD_INT 1
71491: ARRAY
71492: PPUSH
71493: LD_VAR 0 2
71497: PUSH
71498: LD_VAR 0 9
71502: ARRAY
71503: PUSH
71504: LD_INT 2
71506: ARRAY
71507: PPUSH
71508: CALL_OW 297
71512: PUSH
71513: LD_INT 6
71515: GREATER
71516: IFFALSE 71559
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71518: LD_VAR 0 4
71522: PPUSH
71523: LD_VAR 0 2
71527: PUSH
71528: LD_VAR 0 9
71532: ARRAY
71533: PUSH
71534: LD_INT 1
71536: ARRAY
71537: PPUSH
71538: LD_VAR 0 2
71542: PUSH
71543: LD_VAR 0 9
71547: ARRAY
71548: PUSH
71549: LD_INT 2
71551: ARRAY
71552: PPUSH
71553: CALL_OW 114
71557: GO 71573
// SetTag ( i , tag ) ;
71559: LD_VAR 0 4
71563: PPUSH
71564: LD_VAR 0 9
71568: PPUSH
71569: CALL_OW 109
// end else
71573: GO 71605
// if enemy then
71575: LD_VAR 0 5
71579: IFFALSE 71605
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71581: LD_VAR 0 4
71585: PPUSH
71586: LD_VAR 0 5
71590: PPUSH
71591: LD_VAR 0 4
71595: PPUSH
71596: CALL_OW 74
71600: PPUSH
71601: CALL_OW 115
// end ;
71605: GO 71282
71607: POP
71608: POP
// end ;
71609: LD_VAR 0 3
71613: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71614: LD_INT 0
71616: PPUSH
71617: PPUSH
71618: PPUSH
// if not unit or IsInUnit ( unit ) then
71619: LD_VAR 0 1
71623: NOT
71624: PUSH
71625: LD_VAR 0 1
71629: PPUSH
71630: CALL_OW 310
71634: OR
71635: IFFALSE 71639
// exit ;
71637: GO 71730
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71639: LD_ADDR_VAR 0 4
71643: PUSH
71644: LD_VAR 0 1
71648: PPUSH
71649: CALL_OW 250
71653: PPUSH
71654: LD_VAR 0 2
71658: PPUSH
71659: LD_INT 1
71661: PPUSH
71662: CALL_OW 272
71666: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71667: LD_ADDR_VAR 0 5
71671: PUSH
71672: LD_VAR 0 1
71676: PPUSH
71677: CALL_OW 251
71681: PPUSH
71682: LD_VAR 0 2
71686: PPUSH
71687: LD_INT 1
71689: PPUSH
71690: CALL_OW 273
71694: ST_TO_ADDR
// if ValidHex ( x , y ) then
71695: LD_VAR 0 4
71699: PPUSH
71700: LD_VAR 0 5
71704: PPUSH
71705: CALL_OW 488
71709: IFFALSE 71730
// ComTurnXY ( unit , x , y ) ;
71711: LD_VAR 0 1
71715: PPUSH
71716: LD_VAR 0 4
71720: PPUSH
71721: LD_VAR 0 5
71725: PPUSH
71726: CALL_OW 118
// end ;
71730: LD_VAR 0 3
71734: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71735: LD_INT 0
71737: PPUSH
71738: PPUSH
// result := false ;
71739: LD_ADDR_VAR 0 3
71743: PUSH
71744: LD_INT 0
71746: ST_TO_ADDR
// if not units then
71747: LD_VAR 0 2
71751: NOT
71752: IFFALSE 71756
// exit ;
71754: GO 71801
// for i in units do
71756: LD_ADDR_VAR 0 4
71760: PUSH
71761: LD_VAR 0 2
71765: PUSH
71766: FOR_IN
71767: IFFALSE 71799
// if See ( side , i ) then
71769: LD_VAR 0 1
71773: PPUSH
71774: LD_VAR 0 4
71778: PPUSH
71779: CALL_OW 292
71783: IFFALSE 71797
// begin result := true ;
71785: LD_ADDR_VAR 0 3
71789: PUSH
71790: LD_INT 1
71792: ST_TO_ADDR
// exit ;
71793: POP
71794: POP
71795: GO 71801
// end ;
71797: GO 71766
71799: POP
71800: POP
// end ;
71801: LD_VAR 0 3
71805: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71806: LD_INT 0
71808: PPUSH
71809: PPUSH
71810: PPUSH
71811: PPUSH
// if not unit or not points then
71812: LD_VAR 0 1
71816: NOT
71817: PUSH
71818: LD_VAR 0 2
71822: NOT
71823: OR
71824: IFFALSE 71828
// exit ;
71826: GO 71918
// dist := 99999 ;
71828: LD_ADDR_VAR 0 5
71832: PUSH
71833: LD_INT 99999
71835: ST_TO_ADDR
// for i in points do
71836: LD_ADDR_VAR 0 4
71840: PUSH
71841: LD_VAR 0 2
71845: PUSH
71846: FOR_IN
71847: IFFALSE 71916
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71849: LD_ADDR_VAR 0 6
71853: PUSH
71854: LD_VAR 0 1
71858: PPUSH
71859: LD_VAR 0 4
71863: PUSH
71864: LD_INT 1
71866: ARRAY
71867: PPUSH
71868: LD_VAR 0 4
71872: PUSH
71873: LD_INT 2
71875: ARRAY
71876: PPUSH
71877: CALL_OW 297
71881: ST_TO_ADDR
// if tmpDist < dist then
71882: LD_VAR 0 6
71886: PUSH
71887: LD_VAR 0 5
71891: LESS
71892: IFFALSE 71914
// begin result := i ;
71894: LD_ADDR_VAR 0 3
71898: PUSH
71899: LD_VAR 0 4
71903: ST_TO_ADDR
// dist := tmpDist ;
71904: LD_ADDR_VAR 0 5
71908: PUSH
71909: LD_VAR 0 6
71913: ST_TO_ADDR
// end ; end ;
71914: GO 71846
71916: POP
71917: POP
// end ; end_of_file
71918: LD_VAR 0 3
71922: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
71923: LD_VAR 0 1
71927: PUSH
71928: LD_INT 200
71930: DOUBLE
71931: GREATEREQUAL
71932: IFFALSE 71940
71934: LD_INT 299
71936: DOUBLE
71937: LESSEQUAL
71938: IFTRUE 71942
71940: GO 71974
71942: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
71943: LD_VAR 0 1
71947: PPUSH
71948: LD_VAR 0 2
71952: PPUSH
71953: LD_VAR 0 3
71957: PPUSH
71958: LD_VAR 0 4
71962: PPUSH
71963: LD_VAR 0 5
71967: PPUSH
71968: CALL 27570 0 5
71972: GO 72051
71974: LD_INT 300
71976: DOUBLE
71977: GREATEREQUAL
71978: IFFALSE 71986
71980: LD_INT 399
71982: DOUBLE
71983: LESSEQUAL
71984: IFTRUE 71988
71986: GO 72050
71988: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
71989: LD_VAR 0 1
71993: PPUSH
71994: LD_VAR 0 2
71998: PPUSH
71999: LD_VAR 0 3
72003: PPUSH
72004: LD_VAR 0 4
72008: PPUSH
72009: LD_VAR 0 5
72013: PPUSH
72014: LD_VAR 0 6
72018: PPUSH
72019: LD_VAR 0 7
72023: PPUSH
72024: LD_VAR 0 8
72028: PPUSH
72029: LD_VAR 0 9
72033: PPUSH
72034: LD_VAR 0 10
72038: PPUSH
72039: LD_VAR 0 11
72043: PPUSH
72044: CALL 25212 0 11
72048: GO 72051
72050: POP
// end ;
72051: PPOPN 11
72053: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72054: LD_VAR 0 1
72058: PPUSH
72059: LD_VAR 0 2
72063: PPUSH
72064: LD_VAR 0 3
72068: PPUSH
72069: LD_VAR 0 4
72073: PPUSH
72074: LD_VAR 0 5
72078: PPUSH
72079: CALL 27306 0 5
// end ; end_of_file
72083: PPOPN 5
72085: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72086: LD_VAR 0 1
72090: PPUSH
72091: LD_VAR 0 2
72095: PPUSH
72096: LD_VAR 0 3
72100: PPUSH
72101: LD_VAR 0 4
72105: PPUSH
72106: LD_VAR 0 5
72110: PPUSH
72111: LD_VAR 0 6
72115: PPUSH
72116: CALL 12905 0 6
// end ;
72120: PPOPN 6
72122: END
