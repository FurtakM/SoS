// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 46 0 0
// CreateNature ;
  19: CALL 533 0 0
// PrepareAmericans ;
  23: CALL 830 0 0
// PrepareArabian ;
  27: CALL 11161 0 0
// if debug then
  31: LD_EXP 1
  35: IFFALSE 41
// DebugMode ;
  37: CALL 214 0 0
// Action ;
  41: CALL 4657 0 0
// end ;
  45: END
// export debug , prefix , missionStart , aviradzeSpotted , deltaSpotted , spottedBeforeRadio , sciSpotted , aviradzeQuestDone , sciCounterKill , usAlert , usActiveDefend , gladstoneEscaped , timeUntilFarmer , attackDeltaAllowed , trickyMove , usPatrol , trap , lostCounter ; function Init ; begin
  46: LD_INT 0
  48: PPUSH
// debug := false ;
  49: LD_ADDR_EXP 1
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// missionStart := false ;
  57: LD_ADDR_EXP 3
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// aviradzeSpotted := false ;
  65: LD_ADDR_EXP 4
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// deltaSpotted := false ;
  73: LD_ADDR_EXP 5
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// sciSpotted := false ;
  81: LD_ADDR_EXP 7
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// sciCounterKill := 0 ;
  89: LD_ADDR_EXP 9
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// aviradzeQuestDone := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// attackDeltaAllowed := false ;
 105: LD_ADDR_EXP 14
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usAlert := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// usActiveDefend := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// usPatrol := [ ] ;
 129: LD_ADDR_EXP 16
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// timeUntilFarmer := [ 40 40$00 , 30 30$00 , 20 20$00 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 13
 140: PUSH
 141: LD_INT 84000
 143: PUSH
 144: LD_INT 63000
 146: PUSH
 147: LD_INT 42000
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: PUSH
 155: LD_OWVAR 67
 159: ARRAY
 160: ST_TO_ADDR
// trickyMove := false ;
 161: LD_ADDR_EXP 15
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// gladstoneEscaped := false ;
 169: LD_ADDR_EXP 12
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// prefix := 01_ ;
 177: LD_ADDR_EXP 2
 181: PUSH
 182: LD_STRING 01_
 184: ST_TO_ADDR
// trap := 0 ;
 185: LD_ADDR_EXP 17
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// lostCounter := false ;
 193: LD_ADDR_EXP 18
 197: PUSH
 198: LD_INT 0
 200: ST_TO_ADDR
// spottedBeforeRadio := false ;
 201: LD_ADDR_EXP 6
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// end ;
 209: LD_VAR 0 1
 213: RET
// function DebugMode ; begin
 214: LD_INT 0
 216: PPUSH
// FogOff ( 1 ) ;
 217: LD_INT 1
 219: PPUSH
 220: CALL_OW 344
// Difficulty := 2 ;
 224: LD_ADDR_OWVAR 67
 228: PUSH
 229: LD_INT 2
 231: ST_TO_ADDR
// end ; end_of_file
 232: LD_VAR 0 1
 236: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 237: LD_INT 0
 239: PPUSH
// uc_side := side ;
 240: LD_ADDR_OWVAR 20
 244: PUSH
 245: LD_VAR 0 1
 249: ST_TO_ADDR
// uc_nation := nation ;
 250: LD_ADDR_OWVAR 21
 254: PUSH
 255: LD_VAR 0 2
 259: ST_TO_ADDR
// vc_chassis := chassis ;
 260: LD_ADDR_OWVAR 37
 264: PUSH
 265: LD_VAR 0 3
 269: ST_TO_ADDR
// vc_engine := engine ;
 270: LD_ADDR_OWVAR 39
 274: PUSH
 275: LD_VAR 0 4
 279: ST_TO_ADDR
// vc_control := control ;
 280: LD_ADDR_OWVAR 38
 284: PUSH
 285: LD_VAR 0 5
 289: ST_TO_ADDR
// vc_weapon := weapon ;
 290: LD_ADDR_OWVAR 40
 294: PUSH
 295: LD_VAR 0 6
 299: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 300: LD_ADDR_OWVAR 41
 304: PUSH
 305: LD_VAR 0 7
 309: ST_TO_ADDR
// result := CreateVehicle ;
 310: LD_ADDR_VAR 0 8
 314: PUSH
 315: CALL_OW 45
 319: ST_TO_ADDR
// end ;
 320: LD_VAR 0 8
 324: RET
// export function SayX ( units , ident ) ; var i ; begin
 325: LD_INT 0
 327: PPUSH
 328: PPUSH
// result := false ;
 329: LD_ADDR_VAR 0 3
 333: PUSH
 334: LD_INT 0
 336: ST_TO_ADDR
// if not units then
 337: LD_VAR 0 1
 341: NOT
 342: IFFALSE 346
// exit ;
 344: GO 400
// for i in units do
 346: LD_ADDR_VAR 0 4
 350: PUSH
 351: LD_VAR 0 1
 355: PUSH
 356: FOR_IN
 357: IFFALSE 398
// if IsOk ( i ) then
 359: LD_VAR 0 4
 363: PPUSH
 364: CALL_OW 302
 368: IFFALSE 396
// begin Say ( i , ident ) ;
 370: LD_VAR 0 4
 374: PPUSH
 375: LD_VAR 0 2
 379: PPUSH
 380: CALL_OW 88
// result := i ;
 384: LD_ADDR_VAR 0 3
 388: PUSH
 389: LD_VAR 0 4
 393: ST_TO_ADDR
// break ;
 394: GO 398
// end ;
 396: GO 356
 398: POP
 399: POP
// end ;
 400: LD_VAR 0 3
 404: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 405: LD_INT 0
 407: PPUSH
 408: PPUSH
// InitUc ;
 409: CALL_OW 18
// InitHc ;
 413: CALL_OW 19
// uc_side := 0 ;
 417: LD_ADDR_OWVAR 20
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// uc_nation := 0 ;
 425: LD_ADDR_OWVAR 21
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// for i = 1 to amount do
 433: LD_ADDR_VAR 0 4
 437: PUSH
 438: DOUBLE
 439: LD_INT 1
 441: DEC
 442: ST_TO_ADDR
 443: LD_VAR 0 2
 447: PUSH
 448: FOR_TO
 449: IFFALSE 522
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 451: LD_ADDR_OWVAR 29
 455: PUSH
 456: LD_INT 9
 458: PPUSH
 459: LD_INT 12
 461: PPUSH
 462: CALL_OW 12
 466: PUSH
 467: LD_INT 9
 469: PPUSH
 470: LD_INT 12
 472: PPUSH
 473: CALL_OW 12
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: ST_TO_ADDR
// hc_agressivity := 0 ;
 482: LD_ADDR_OWVAR 35
 486: PUSH
 487: LD_INT 0
 489: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 490: LD_INT 0
 492: PPUSH
 493: LD_INT 12
 495: PPUSH
 496: LD_INT 1
 498: PPUSH
 499: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 503: CALL_OW 44
 507: PPUSH
 508: LD_VAR 0 1
 512: PPUSH
 513: LD_INT 0
 515: PPUSH
 516: CALL_OW 49
// end ;
 520: GO 448
 522: POP
 523: POP
// InitHc ;
 524: CALL_OW 19
// end ;
 528: LD_VAR 0 3
 532: RET
// export function CreateNature ; var i ; begin
 533: LD_INT 0
 535: PPUSH
 536: PPUSH
// SpawnApeman ( forest , 9 ) ;
 537: LD_INT 1
 539: PPUSH
 540: LD_INT 9
 542: PPUSH
 543: CALL 405 0 2
// for i := 1 to 4 do
 547: LD_ADDR_VAR 0 2
 551: PUSH
 552: DOUBLE
 553: LD_INT 1
 555: DEC
 556: ST_TO_ADDR
 557: LD_INT 4
 559: PUSH
 560: FOR_TO
 561: IFFALSE 596
// begin hc_class := 21 ;
 563: LD_ADDR_OWVAR 28
 567: PUSH
 568: LD_INT 21
 570: ST_TO_ADDR
// hc_gallery :=  ;
 571: LD_ADDR_OWVAR 33
 575: PUSH
 576: LD_STRING 
 578: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 579: CALL_OW 44
 583: PPUSH
 584: LD_INT 1
 586: PPUSH
 587: LD_INT 0
 589: PPUSH
 590: CALL_OW 49
// end ;
 594: GO 560
 596: POP
 597: POP
// for i := 1 to 2 do
 598: LD_ADDR_VAR 0 2
 602: PUSH
 603: DOUBLE
 604: LD_INT 1
 606: DEC
 607: ST_TO_ADDR
 608: LD_INT 2
 610: PUSH
 611: FOR_TO
 612: IFFALSE 647
// begin hc_class := 18 ;
 614: LD_ADDR_OWVAR 28
 618: PUSH
 619: LD_INT 18
 621: ST_TO_ADDR
// hc_gallery :=  ;
 622: LD_ADDR_OWVAR 33
 626: PUSH
 627: LD_STRING 
 629: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 630: CALL_OW 44
 634: PPUSH
 635: LD_INT 1
 637: PPUSH
 638: LD_INT 0
 640: PPUSH
 641: CALL_OW 49
// end ;
 645: GO 611
 647: POP
 648: POP
// for i := 1 to 3 do
 649: LD_ADDR_VAR 0 2
 653: PUSH
 654: DOUBLE
 655: LD_INT 1
 657: DEC
 658: ST_TO_ADDR
 659: LD_INT 3
 661: PUSH
 662: FOR_TO
 663: IFFALSE 698
// begin hc_class := 13 ;
 665: LD_ADDR_OWVAR 28
 669: PUSH
 670: LD_INT 13
 672: ST_TO_ADDR
// hc_gallery :=  ;
 673: LD_ADDR_OWVAR 33
 677: PUSH
 678: LD_STRING 
 680: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 681: CALL_OW 44
 685: PPUSH
 686: LD_INT 1
 688: PPUSH
 689: LD_INT 0
 691: PPUSH
 692: CALL_OW 49
// end ;
 696: GO 662
 698: POP
 699: POP
// for i := 1 to 4 do
 700: LD_ADDR_VAR 0 2
 704: PUSH
 705: DOUBLE
 706: LD_INT 1
 708: DEC
 709: ST_TO_ADDR
 710: LD_INT 4
 712: PUSH
 713: FOR_TO
 714: IFFALSE 749
// begin hc_class := class_frog ;
 716: LD_ADDR_OWVAR 28
 720: PUSH
 721: LD_INT 19
 723: ST_TO_ADDR
// hc_gallery :=  ;
 724: LD_ADDR_OWVAR 33
 728: PUSH
 729: LD_STRING 
 731: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 732: CALL_OW 44
 736: PPUSH
 737: LD_INT 8
 739: PPUSH
 740: LD_INT 0
 742: PPUSH
 743: CALL_OW 49
// end ;
 747: GO 713
 749: POP
 750: POP
// end ;
 751: LD_VAR 0 1
 755: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 756: LD_INT 0
 758: PPUSH
 759: PPUSH
 760: PPUSH
// if not observer or not unit then
 761: LD_VAR 0 1
 765: NOT
 766: PUSH
 767: LD_VAR 0 2
 771: NOT
 772: OR
 773: IFFALSE 777
// exit ;
 775: GO 825
// if not See ( GetSide ( observer ) , unit ) then
 777: LD_VAR 0 1
 781: PPUSH
 782: CALL_OW 255
 786: PPUSH
 787: LD_VAR 0 2
 791: PPUSH
 792: CALL_OW 292
 796: NOT
 797: IFFALSE 801
// exit ;
 799: GO 825
// result := GetDistUnits ( observer , unit ) < 12 ;
 801: LD_ADDR_VAR 0 3
 805: PUSH
 806: LD_VAR 0 1
 810: PPUSH
 811: LD_VAR 0 2
 815: PPUSH
 816: CALL_OW 296
 820: PUSH
 821: LD_INT 12
 823: LESS
 824: ST_TO_ADDR
// end ; end_of_file
 825: LD_VAR 0 3
 829: RET
// export Gladstone , Lynch ; export usForces , usSci ; export function PrepareAmericans ; var i , un , veh , tmp , arm ; begin
 830: LD_INT 0
 832: PPUSH
 833: PPUSH
 834: PPUSH
 835: PPUSH
 836: PPUSH
 837: PPUSH
// usForces := [ ] ;
 838: LD_ADDR_EXP 21
 842: PUSH
 843: EMPTY
 844: ST_TO_ADDR
// usSci := [ ] ;
 845: LD_ADDR_EXP 22
 849: PUSH
 850: EMPTY
 851: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
 852: LD_INT 1
 854: PPUSH
 855: LD_STRING Delta
 857: PPUSH
 858: CALL_OW 500
// SetResourceType ( GetBase ( Delta ) , mat_cans , 400 ) ;
 862: LD_INT 1
 864: PPUSH
 865: CALL_OW 274
 869: PPUSH
 870: LD_INT 1
 872: PPUSH
 873: LD_INT 400
 875: PPUSH
 876: CALL_OW 277
// SetResourceType ( GetBase ( Delta ) , mat_oil , 80 ) ;
 880: LD_INT 1
 882: PPUSH
 883: CALL_OW 274
 887: PPUSH
 888: LD_INT 2
 890: PPUSH
 891: LD_INT 80
 893: PPUSH
 894: CALL_OW 277
// uc_side := 1 ;
 898: LD_ADDR_OWVAR 20
 902: PUSH
 903: LD_INT 1
 905: ST_TO_ADDR
// uc_nation := 1 ;
 906: LD_ADDR_OWVAR 21
 910: PUSH
 911: LD_INT 1
 913: ST_TO_ADDR
// InitHc ;
 914: CALL_OW 19
// hc_importance := 0 ;
 918: LD_ADDR_OWVAR 32
 922: PUSH
 923: LD_INT 0
 925: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
 926: LD_ADDR_EXP 20
 930: PUSH
 931: LD_STRING Lynch
 933: PPUSH
 934: LD_INT 0
 936: PPUSH
 937: LD_STRING 
 939: PPUSH
 940: CALL 29559 0 3
 944: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false ,  ) ;
 945: LD_ADDR_EXP 19
 949: PUSH
 950: LD_STRING Gladstone
 952: PPUSH
 953: LD_INT 0
 955: PPUSH
 956: LD_STRING 
 958: PPUSH
 959: CALL 29559 0 3
 963: ST_TO_ADDR
// PlaceHumanInUnit ( Lynch , Delta ) ;
 964: LD_EXP 20
 968: PPUSH
 969: LD_INT 1
 971: PPUSH
 972: CALL_OW 52
// PlaceHumanInUnit ( Gladstone , usLab ) ;
 976: LD_EXP 19
 980: PPUSH
 981: LD_INT 3
 983: PPUSH
 984: CALL_OW 52
// for i := 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
 988: LD_ADDR_VAR 0 2
 992: PUSH
 993: DOUBLE
 994: LD_INT 1
 996: DEC
 997: ST_TO_ADDR
 998: LD_INT 1
1000: PUSH
1001: LD_INT 2
1003: PUSH
1004: LD_INT 2
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: LIST
1011: PUSH
1012: LD_OWVAR 67
1016: ARRAY
1017: PUSH
1018: FOR_TO
1019: IFFALSE 1065
// begin PrepareHuman ( false , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
1021: LD_INT 0
1023: PPUSH
1024: LD_INT 2
1026: PPUSH
1027: LD_INT 1
1029: PUSH
1030: LD_INT 2
1032: PUSH
1033: LD_INT 2
1035: PUSH
1036: EMPTY
1037: LIST
1038: LIST
1039: LIST
1040: PUSH
1041: LD_OWVAR 67
1045: ARRAY
1046: PPUSH
1047: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , Delta ) ;
1051: CALL_OW 44
1055: PPUSH
1056: LD_INT 1
1058: PPUSH
1059: CALL_OW 52
// end ;
1063: GO 1018
1065: POP
1066: POP
// for i := 1 to 7 - Difficulty do
1067: LD_ADDR_VAR 0 2
1071: PUSH
1072: DOUBLE
1073: LD_INT 1
1075: DEC
1076: ST_TO_ADDR
1077: LD_INT 7
1079: PUSH
1080: LD_OWVAR 67
1084: MINUS
1085: PUSH
1086: FOR_TO
1087: IFFALSE 1172
// begin PrepareHuman ( false , 4 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
1089: LD_INT 0
1091: PPUSH
1092: LD_INT 4
1094: PPUSH
1095: LD_INT 1
1097: PUSH
1098: LD_INT 2
1100: PUSH
1101: LD_INT 2
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: LIST
1108: PUSH
1109: LD_OWVAR 67
1113: ARRAY
1114: PPUSH
1115: CALL_OW 380
// un := CreateHuman ;
1119: LD_ADDR_VAR 0 3
1123: PUSH
1124: CALL_OW 44
1128: ST_TO_ADDR
// PlaceHumanInUnit ( un , usLab ) ;
1129: LD_VAR 0 3
1133: PPUSH
1134: LD_INT 3
1136: PPUSH
1137: CALL_OW 52
// usSci := Replace ( usSci , usSci + 1 , un ) ;
1141: LD_ADDR_EXP 22
1145: PUSH
1146: LD_EXP 22
1150: PPUSH
1151: LD_EXP 22
1155: PUSH
1156: LD_INT 1
1158: PLUS
1159: PPUSH
1160: LD_VAR 0 3
1164: PPUSH
1165: CALL_OW 1
1169: ST_TO_ADDR
// end ;
1170: GO 1086
1172: POP
1173: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
1174: LD_ADDR_VAR 0 6
1178: PUSH
1179: LD_INT 22
1181: PUSH
1182: LD_INT 1
1184: PUSH
1185: EMPTY
1186: LIST
1187: LIST
1188: PUSH
1189: LD_INT 30
1191: PUSH
1192: LD_INT 4
1194: PUSH
1195: EMPTY
1196: LIST
1197: LIST
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: PPUSH
1203: CALL_OW 69
1207: ST_TO_ADDR
// for i := 1 to 3 + [ 1 , 2 , 2 ] [ Difficulty ] do
1208: LD_ADDR_VAR 0 2
1212: PUSH
1213: DOUBLE
1214: LD_INT 1
1216: DEC
1217: ST_TO_ADDR
1218: LD_INT 3
1220: PUSH
1221: LD_INT 1
1223: PUSH
1224: LD_INT 2
1226: PUSH
1227: LD_INT 2
1229: PUSH
1230: EMPTY
1231: LIST
1232: LIST
1233: LIST
1234: PUSH
1235: LD_OWVAR 67
1239: ARRAY
1240: PLUS
1241: PUSH
1242: FOR_TO
1243: IFFALSE 1321
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
1245: LD_INT 0
1247: PPUSH
1248: LD_INT 1
1250: PPUSH
1251: LD_INT 1
1253: PUSH
1254: LD_INT 2
1256: PUSH
1257: LD_INT 3
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: LIST
1264: PUSH
1265: LD_OWVAR 67
1269: ARRAY
1270: PPUSH
1271: CALL_OW 380
// un := CreateHuman ;
1275: LD_ADDR_VAR 0 3
1279: PUSH
1280: CALL_OW 44
1284: ST_TO_ADDR
// usForces := usForces ^ un ;
1285: LD_ADDR_EXP 21
1289: PUSH
1290: LD_EXP 21
1294: PUSH
1295: LD_VAR 0 3
1299: ADD
1300: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm [ 1 ] ) ;
1301: LD_VAR 0 3
1305: PPUSH
1306: LD_VAR 0 6
1310: PUSH
1311: LD_INT 1
1313: ARRAY
1314: PPUSH
1315: CALL_OW 52
// end ;
1319: GO 1242
1321: POP
1322: POP
// if Difficulty > 1 then
1323: LD_OWVAR 67
1327: PUSH
1328: LD_INT 1
1330: GREATER
1331: IFFALSE 1426
// begin for i := 1 to Difficulty do
1333: LD_ADDR_VAR 0 2
1337: PUSH
1338: DOUBLE
1339: LD_INT 1
1341: DEC
1342: ST_TO_ADDR
1343: LD_OWVAR 67
1347: PUSH
1348: FOR_TO
1349: IFFALSE 1424
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
1351: LD_INT 0
1353: PPUSH
1354: LD_INT 1
1356: PPUSH
1357: LD_INT 1
1359: PUSH
1360: LD_INT 2
1362: PUSH
1363: LD_INT 2
1365: PUSH
1366: EMPTY
1367: LIST
1368: LIST
1369: LIST
1370: PUSH
1371: LD_OWVAR 67
1375: ARRAY
1376: PPUSH
1377: CALL_OW 380
// un := CreateHuman ;
1381: LD_ADDR_VAR 0 3
1385: PUSH
1386: CALL_OW 44
1390: ST_TO_ADDR
// usForces := usForces ^ un ;
1391: LD_ADDR_EXP 21
1395: PUSH
1396: LD_EXP 21
1400: PUSH
1401: LD_VAR 0 3
1405: ADD
1406: ST_TO_ADDR
// PlaceUnitArea ( un , usAdditionalDefenceArea , false ) ;
1407: LD_VAR 0 3
1411: PPUSH
1412: LD_INT 9
1414: PPUSH
1415: LD_INT 0
1417: PPUSH
1418: CALL_OW 49
// end ;
1422: GO 1348
1424: POP
1425: POP
// end ; PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 100 ) ;
1426: LD_INT 1
1428: PPUSH
1429: LD_INT 1
1431: PPUSH
1432: LD_INT 1
1434: PPUSH
1435: LD_INT 2
1437: PPUSH
1438: LD_INT 1
1440: PPUSH
1441: LD_INT 2
1443: PPUSH
1444: LD_INT 100
1446: PPUSH
1447: CALL 237 0 7
// veh := CreateVehicle ;
1451: LD_ADDR_VAR 0 4
1455: PUSH
1456: CALL_OW 45
1460: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1461: LD_VAR 0 4
1465: PPUSH
1466: LD_INT 2
1468: PPUSH
1469: CALL_OW 233
// PlaceUnitXY ( veh , 43 , 24 , false ) ;
1473: LD_VAR 0 4
1477: PPUSH
1478: LD_INT 43
1480: PPUSH
1481: LD_INT 24
1483: PPUSH
1484: LD_INT 0
1486: PPUSH
1487: CALL_OW 48
// end ;
1491: LD_VAR 0 1
1495: RET
// export function SendSciToForest ; var i , j , k , tmp , xy ; begin
1496: LD_INT 0
1498: PPUSH
1499: PPUSH
1500: PPUSH
1501: PPUSH
1502: PPUSH
1503: PPUSH
// if not usSci then
1504: LD_EXP 22
1508: NOT
1509: IFFALSE 1513
// exit ;
1511: GO 1687
// xy := AreaToList ( tameArea , 0 ) ;
1513: LD_ADDR_VAR 0 6
1517: PUSH
1518: LD_INT 5
1520: PPUSH
1521: LD_INT 0
1523: PPUSH
1524: CALL_OW 517
1528: ST_TO_ADDR
// for i in usSci do
1529: LD_ADDR_VAR 0 2
1533: PUSH
1534: LD_EXP 22
1538: PUSH
1539: FOR_IN
1540: IFFALSE 1685
// begin k := rand ( 1 , xy [ 1 ] ) ;
1542: LD_ADDR_VAR 0 4
1546: PUSH
1547: LD_INT 1
1549: PPUSH
1550: LD_VAR 0 6
1554: PUSH
1555: LD_INT 1
1557: ARRAY
1558: PPUSH
1559: CALL_OW 12
1563: ST_TO_ADDR
// ComExitBuilding ( i ) ;
1564: LD_VAR 0 2
1568: PPUSH
1569: CALL_OW 122
// AddComMoveXY ( i , xy [ 1 ] [ k ] , xy [ 2 ] [ k ] ) ;
1573: LD_VAR 0 2
1577: PPUSH
1578: LD_VAR 0 6
1582: PUSH
1583: LD_INT 1
1585: ARRAY
1586: PUSH
1587: LD_VAR 0 4
1591: ARRAY
1592: PPUSH
1593: LD_VAR 0 6
1597: PUSH
1598: LD_INT 2
1600: ARRAY
1601: PUSH
1602: LD_VAR 0 4
1606: ARRAY
1607: PPUSH
1608: CALL_OW 171
// for j := 1 to 2 do
1612: LD_ADDR_VAR 0 3
1616: PUSH
1617: DOUBLE
1618: LD_INT 1
1620: DEC
1621: ST_TO_ADDR
1622: LD_INT 2
1624: PUSH
1625: FOR_TO
1626: IFFALSE 1681
// begin tmp := Delete ( xy [ j ] , k ) ;
1628: LD_ADDR_VAR 0 5
1632: PUSH
1633: LD_VAR 0 6
1637: PUSH
1638: LD_VAR 0 3
1642: ARRAY
1643: PPUSH
1644: LD_VAR 0 4
1648: PPUSH
1649: CALL_OW 3
1653: ST_TO_ADDR
// xy := Replace ( xy , j , tmp ) ;
1654: LD_ADDR_VAR 0 6
1658: PUSH
1659: LD_VAR 0 6
1663: PPUSH
1664: LD_VAR 0 3
1668: PPUSH
1669: LD_VAR 0 5
1673: PPUSH
1674: CALL_OW 1
1678: ST_TO_ADDR
// end ;
1679: GO 1625
1681: POP
1682: POP
// end ;
1683: GO 1539
1685: POP
1686: POP
// end ;
1687: LD_VAR 0 1
1691: RET
// every 0 0$5 + 0 0$10 trigger aviradzeSpotted and usSci and not usAlert and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do var i , x , y , d , ape ;
1692: LD_EXP 4
1696: PUSH
1697: LD_EXP 22
1701: AND
1702: PUSH
1703: LD_EXP 10
1707: NOT
1708: AND
1709: PUSH
1710: LD_INT 22
1712: PUSH
1713: LD_INT 0
1715: PUSH
1716: EMPTY
1717: LIST
1718: LIST
1719: PUSH
1720: LD_INT 25
1722: PUSH
1723: LD_INT 12
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: PPUSH
1734: CALL_OW 69
1738: AND
1739: IFFALSE 2231
1741: GO 1743
1743: DISABLE
1744: LD_INT 0
1746: PPUSH
1747: PPUSH
1748: PPUSH
1749: PPUSH
1750: PPUSH
// begin enable ;
1751: ENABLE
// if UnitFilter ( usSci , [ f_or , [ f_hastask ] , [ f_inside ] ] ) then
1752: LD_EXP 22
1756: PPUSH
1757: LD_INT 2
1759: PUSH
1760: LD_INT 60
1762: PUSH
1763: EMPTY
1764: LIST
1765: PUSH
1766: LD_INT 54
1768: PUSH
1769: EMPTY
1770: LIST
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: LIST
1776: PPUSH
1777: CALL_OW 72
1781: IFFALSE 1785
// exit ;
1783: GO 2231
// for i in usSci do
1785: LD_ADDR_VAR 0 1
1789: PUSH
1790: LD_EXP 22
1794: PUSH
1795: FOR_IN
1796: IFFALSE 2229
// begin if not HasTask ( i ) and GetLives ( i ) = 1000 then
1798: LD_VAR 0 1
1802: PPUSH
1803: CALL_OW 314
1807: NOT
1808: PUSH
1809: LD_VAR 0 1
1813: PPUSH
1814: CALL_OW 256
1818: PUSH
1819: LD_INT 1000
1821: EQUAL
1822: AND
1823: IFFALSE 2030
// begin ape := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) , i ) ;
1825: LD_ADDR_VAR 0 5
1829: PUSH
1830: LD_INT 22
1832: PUSH
1833: LD_INT 0
1835: PUSH
1836: EMPTY
1837: LIST
1838: LIST
1839: PUSH
1840: LD_INT 25
1842: PUSH
1843: LD_INT 12
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: PPUSH
1854: CALL_OW 69
1858: PPUSH
1859: LD_VAR 0 1
1863: PPUSH
1864: CALL_OW 74
1868: ST_TO_ADDR
// if GetDistUnits ( i , ape ) < 10 then
1869: LD_VAR 0 1
1873: PPUSH
1874: LD_VAR 0 5
1878: PPUSH
1879: CALL_OW 296
1883: PUSH
1884: LD_INT 10
1886: LESS
1887: IFFALSE 1920
// ComTameXY ( i , GetX ( ape ) , GetY ( ape ) ) else
1889: LD_VAR 0 1
1893: PPUSH
1894: LD_VAR 0 5
1898: PPUSH
1899: CALL_OW 250
1903: PPUSH
1904: LD_VAR 0 5
1908: PPUSH
1909: CALL_OW 251
1913: PPUSH
1914: CALL_OW 131
1918: GO 2030
// begin d := rand ( 0 , 5 ) ;
1920: LD_ADDR_VAR 0 4
1924: PUSH
1925: LD_INT 0
1927: PPUSH
1928: LD_INT 5
1930: PPUSH
1931: CALL_OW 12
1935: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 3 ) ;
1936: LD_ADDR_VAR 0 2
1940: PUSH
1941: LD_VAR 0 1
1945: PPUSH
1946: CALL_OW 250
1950: PPUSH
1951: LD_VAR 0 4
1955: PPUSH
1956: LD_INT 3
1958: PPUSH
1959: CALL_OW 272
1963: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 3 ) ;
1964: LD_ADDR_VAR 0 3
1968: PUSH
1969: LD_VAR 0 1
1973: PPUSH
1974: CALL_OW 251
1978: PPUSH
1979: LD_VAR 0 4
1983: PPUSH
1984: LD_INT 3
1986: PPUSH
1987: CALL_OW 273
1991: ST_TO_ADDR
// if not ValidHex ( x , y ) then
1992: LD_VAR 0 2
1996: PPUSH
1997: LD_VAR 0 3
2001: PPUSH
2002: CALL_OW 488
2006: NOT
2007: IFFALSE 2011
// continue ;
2009: GO 1795
// ComMoveXY ( i , x , y ) ;
2011: LD_VAR 0 1
2015: PPUSH
2016: LD_VAR 0 2
2020: PPUSH
2021: LD_VAR 0 3
2025: PPUSH
2026: CALL_OW 111
// end ; end ; if GetLives ( i ) < 900 and GetDistUnitXY ( i , 37 , 23 ) > 10 then
2030: LD_VAR 0 1
2034: PPUSH
2035: CALL_OW 256
2039: PUSH
2040: LD_INT 900
2042: LESS
2043: PUSH
2044: LD_VAR 0 1
2048: PPUSH
2049: LD_INT 37
2051: PPUSH
2052: LD_INT 23
2054: PPUSH
2055: CALL_OW 297
2059: PUSH
2060: LD_INT 10
2062: GREATER
2063: AND
2064: IFFALSE 2140
// begin if IsOk ( Gladstone ) and IsInUnit ( Gladstone ) then
2066: LD_EXP 19
2070: PPUSH
2071: CALL_OW 302
2075: PUSH
2076: LD_EXP 19
2080: PPUSH
2081: CALL_OW 310
2085: AND
2086: IFFALSE 2097
// ComExitBuilding ( Gladstone ) ;
2088: LD_EXP 19
2092: PPUSH
2093: CALL_OW 122
// AddComHeal ( Gladstone , i ) ;
2097: LD_EXP 19
2101: PPUSH
2102: LD_VAR 0 1
2106: PPUSH
2107: CALL_OW 188
// AddComEnterUnit ( Gladstone , usLab ) ;
2111: LD_EXP 19
2115: PPUSH
2116: LD_INT 3
2118: PPUSH
2119: CALL_OW 180
// ComMoveXY ( i , 37 , 23 ) ;
2123: LD_VAR 0 1
2127: PPUSH
2128: LD_INT 37
2130: PPUSH
2131: LD_INT 23
2133: PPUSH
2134: CALL_OW 111
// end else
2138: GO 2227
// if GetLives ( i ) = 1000 then
2140: LD_VAR 0 1
2144: PPUSH
2145: CALL_OW 256
2149: PUSH
2150: LD_INT 1000
2152: EQUAL
2153: IFFALSE 2227
// begin if SideShoot ( i ) = 2 then
2155: LD_VAR 0 1
2159: PPUSH
2160: CALL_OW 503
2164: PUSH
2165: LD_INT 2
2167: EQUAL
2168: IFFALSE 2215
// begin if not usAlert then
2170: LD_EXP 10
2174: NOT
2175: IFFALSE 2185
// usAlert := true ;
2177: LD_ADDR_EXP 10
2181: PUSH
2182: LD_INT 1
2184: ST_TO_ADDR
// AddComEnterUnit ( i , usLab ) ;
2185: LD_VAR 0 1
2189: PPUSH
2190: LD_INT 3
2192: PPUSH
2193: CALL_OW 180
// usSci := usSci diff i ;
2197: LD_ADDR_EXP 22
2201: PUSH
2202: LD_EXP 22
2206: PUSH
2207: LD_VAR 0 1
2211: DIFF
2212: ST_TO_ADDR
// end else
2213: GO 2227
// ComMoveToArea ( i , tameArea ) ;
2215: LD_VAR 0 1
2219: PPUSH
2220: LD_INT 5
2222: PPUSH
2223: CALL_OW 113
// end ; end ;
2227: GO 1795
2229: POP
2230: POP
// end ;
2231: PPOPN 5
2233: END
// every 0 0$1 trigger not usAlert and ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 999 ] ] ] ) or FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) ) do
2234: LD_EXP 10
2238: NOT
2239: PUSH
2240: LD_INT 22
2242: PUSH
2243: LD_INT 1
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: PUSH
2250: LD_INT 21
2252: PUSH
2253: LD_INT 3
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: PUSH
2260: LD_INT 3
2262: PUSH
2263: LD_INT 57
2265: PUSH
2266: EMPTY
2267: LIST
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PUSH
2273: LD_INT 3
2275: PUSH
2276: LD_INT 24
2278: PUSH
2279: LD_INT 999
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: PUSH
2290: EMPTY
2291: LIST
2292: LIST
2293: LIST
2294: LIST
2295: PPUSH
2296: CALL_OW 69
2300: PUSH
2301: LD_INT 7
2303: PPUSH
2304: LD_INT 22
2306: PUSH
2307: LD_INT 2
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: PPUSH
2314: CALL_OW 70
2318: OR
2319: AND
2320: IFFALSE 2333
2322: GO 2324
2324: DISABLE
// usAlert := true ;
2325: LD_ADDR_EXP 10
2329: PUSH
2330: LD_INT 1
2332: ST_TO_ADDR
2333: END
// every 0 0$1 trigger usAlert do var i , b , arm ;
2334: LD_EXP 10
2338: IFFALSE 2685
2340: GO 2342
2342: DISABLE
2343: LD_INT 0
2345: PPUSH
2346: PPUSH
2347: PPUSH
// begin usActiveDefend := true ;
2348: LD_ADDR_EXP 11
2352: PUSH
2353: LD_INT 1
2355: ST_TO_ADDR
// if not usForces then
2356: LD_EXP 21
2360: NOT
2361: IFFALSE 2365
// exit ;
2363: GO 2685
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
2365: LD_ADDR_VAR 0 3
2369: PUSH
2370: LD_INT 22
2372: PUSH
2373: LD_INT 1
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: PUSH
2380: LD_INT 30
2382: PUSH
2383: LD_INT 4
2385: PUSH
2386: EMPTY
2387: LIST
2388: LIST
2389: PUSH
2390: EMPTY
2391: LIST
2392: LIST
2393: PPUSH
2394: CALL_OW 69
2398: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
2399: LD_ADDR_VAR 0 2
2403: PUSH
2404: LD_INT 22
2406: PUSH
2407: LD_INT 1
2409: PUSH
2410: EMPTY
2411: LIST
2412: LIST
2413: PUSH
2414: LD_INT 30
2416: PUSH
2417: LD_INT 31
2419: PUSH
2420: EMPTY
2421: LIST
2422: LIST
2423: PUSH
2424: EMPTY
2425: LIST
2426: LIST
2427: PPUSH
2428: CALL_OW 69
2432: ST_TO_ADDR
// ComExitBuilding ( Lynch ) ;
2433: LD_EXP 20
2437: PPUSH
2438: CALL_OW 122
// AddComEnterUnit ( Lynch , arm [ 1 ] ) ;
2442: LD_EXP 20
2446: PPUSH
2447: LD_VAR 0 3
2451: PUSH
2452: LD_INT 1
2454: ARRAY
2455: PPUSH
2456: CALL_OW 180
// if IsOk ( Gladstone ) then
2460: LD_EXP 19
2464: PPUSH
2465: CALL_OW 302
2469: IFFALSE 2510
// begin ComExitBuilding ( Gladstone ) ;
2471: LD_EXP 19
2475: PPUSH
2476: CALL_OW 122
// AddComEnterUnit ( Gladstone , arm [ 1 ] ) ;
2480: LD_EXP 19
2484: PPUSH
2485: LD_VAR 0 3
2489: PUSH
2490: LD_INT 1
2492: ARRAY
2493: PPUSH
2494: CALL_OW 180
// AddComChangeProfession ( Gladstone , class_soldier ) ;
2498: LD_EXP 19
2502: PPUSH
2503: LD_INT 1
2505: PPUSH
2506: CALL_OW 183
// end ; ComExitBuilding ( usForces [ 1 ] ) ;
2510: LD_EXP 21
2514: PUSH
2515: LD_INT 1
2517: ARRAY
2518: PPUSH
2519: CALL_OW 122
// AddComEnterUnit ( usForces [ 1 ] , b [ 1 ] ) ;
2523: LD_EXP 21
2527: PUSH
2528: LD_INT 1
2530: ARRAY
2531: PPUSH
2532: LD_VAR 0 2
2536: PUSH
2537: LD_INT 1
2539: ARRAY
2540: PPUSH
2541: CALL_OW 180
// ComExitBuilding ( usForces [ 2 ] ) ;
2545: LD_EXP 21
2549: PUSH
2550: LD_INT 2
2552: ARRAY
2553: PPUSH
2554: CALL_OW 122
// AddComEnterUnit ( usForces [ 2 ] , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
2558: LD_EXP 21
2562: PUSH
2563: LD_INT 2
2565: ARRAY
2566: PPUSH
2567: LD_INT 22
2569: PUSH
2570: LD_INT 1
2572: PUSH
2573: EMPTY
2574: LIST
2575: LIST
2576: PUSH
2577: LD_INT 30
2579: PUSH
2580: LD_INT 32
2582: PUSH
2583: EMPTY
2584: LIST
2585: LIST
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: PPUSH
2591: CALL_OW 69
2595: PUSH
2596: LD_INT 1
2598: ARRAY
2599: PPUSH
2600: CALL_OW 180
// if b > 1 and usForces > 2 then
2604: LD_VAR 0 2
2608: PUSH
2609: LD_INT 1
2611: GREATER
2612: PUSH
2613: LD_EXP 21
2617: PUSH
2618: LD_INT 2
2620: GREATER
2621: AND
2622: IFFALSE 2685
// begin repeat wait ( 0 0$1 ) ;
2624: LD_INT 35
2626: PPUSH
2627: CALL_OW 67
// until BuildingStatus ( b [ 2 ] ) <> bs_build ;
2631: LD_VAR 0 2
2635: PUSH
2636: LD_INT 2
2638: ARRAY
2639: PPUSH
2640: CALL_OW 461
2644: PUSH
2645: LD_INT 1
2647: NONEQUAL
2648: IFFALSE 2624
// ComExitBuilding ( usForces [ 3 ] ) ;
2650: LD_EXP 21
2654: PUSH
2655: LD_INT 3
2657: ARRAY
2658: PPUSH
2659: CALL_OW 122
// AddComEnterUnit ( usForces [ 3 ] , b [ 2 ] ) ;
2663: LD_EXP 21
2667: PUSH
2668: LD_INT 3
2670: ARRAY
2671: PPUSH
2672: LD_VAR 0 2
2676: PUSH
2677: LD_INT 2
2679: ARRAY
2680: PPUSH
2681: CALL_OW 180
// end ; end ;
2685: PPOPN 3
2687: END
// every 0 0$1 trigger GetLives ( usLab ) < 999 and usAlert and usForces do var i ;
2688: LD_INT 3
2690: PPUSH
2691: CALL_OW 256
2695: PUSH
2696: LD_INT 999
2698: LESS
2699: PUSH
2700: LD_EXP 10
2704: AND
2705: PUSH
2706: LD_EXP 21
2710: AND
2711: IFFALSE 2882
2713: GO 2715
2715: DISABLE
2716: LD_INT 0
2718: PPUSH
// begin for i in usForces do
2719: LD_ADDR_VAR 0 1
2723: PUSH
2724: LD_EXP 21
2728: PUSH
2729: FOR_IN
2730: IFFALSE 2769
// begin if IsInUnit ( i ) then
2732: LD_VAR 0 1
2736: PPUSH
2737: CALL_OW 310
2741: IFFALSE 2752
// ComExitBuilding ( i ) ;
2743: LD_VAR 0 1
2747: PPUSH
2748: CALL_OW 122
// AddComAgressiveMove ( i , 31 , 8 ) ;
2752: LD_VAR 0 1
2756: PPUSH
2757: LD_INT 31
2759: PPUSH
2760: LD_INT 8
2762: PPUSH
2763: CALL_OW 174
// end ;
2767: GO 2729
2769: POP
2770: POP
// wait ( 0 0$8 ) ;
2771: LD_INT 280
2773: PPUSH
2774: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) then
2778: LD_INT 22
2780: PUSH
2781: LD_INT 2
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: PUSH
2788: LD_INT 91
2790: PUSH
2791: LD_INT 3
2793: PUSH
2794: LD_INT 14
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: LIST
2801: PUSH
2802: EMPTY
2803: LIST
2804: LIST
2805: PPUSH
2806: CALL_OW 69
2810: IFFALSE 2860
// ComAttackUnit ( usForces , FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) [ 1 ] ) else
2812: LD_EXP 21
2816: PPUSH
2817: LD_INT 22
2819: PUSH
2820: LD_INT 2
2822: PUSH
2823: EMPTY
2824: LIST
2825: LIST
2826: PUSH
2827: LD_INT 91
2829: PUSH
2830: LD_INT 3
2832: PUSH
2833: LD_INT 14
2835: PUSH
2836: EMPTY
2837: LIST
2838: LIST
2839: LIST
2840: PUSH
2841: EMPTY
2842: LIST
2843: LIST
2844: PPUSH
2845: CALL_OW 69
2849: PUSH
2850: LD_INT 1
2852: ARRAY
2853: PPUSH
2854: CALL_OW 115
2858: GO 2882
// begin wait ( 0 0$20 ) ;
2860: LD_INT 700
2862: PPUSH
2863: CALL_OW 67
// AddComMoveXY ( usForces , 39 , 19 ) ;
2867: LD_EXP 21
2871: PPUSH
2872: LD_INT 39
2874: PPUSH
2875: LD_INT 19
2877: PPUSH
2878: CALL_OW 171
// end ; end ;
2882: PPOPN 1
2884: END
// every 0 0$3 trigger ( GetDistUnits ( Heike , Delta ) < 10 or GetLives ( usLab ) < 999 ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do var tmp , veh ;
2885: LD_EXP 23
2889: PPUSH
2890: LD_INT 1
2892: PPUSH
2893: CALL_OW 296
2897: PUSH
2898: LD_INT 10
2900: LESS
2901: PUSH
2902: LD_INT 3
2904: PPUSH
2905: CALL_OW 256
2909: PUSH
2910: LD_INT 999
2912: LESS
2913: OR
2914: PUSH
2915: LD_INT 22
2917: PUSH
2918: LD_INT 1
2920: PUSH
2921: EMPTY
2922: LIST
2923: LIST
2924: PUSH
2925: LD_INT 25
2927: PUSH
2928: LD_INT 2
2930: PUSH
2931: EMPTY
2932: LIST
2933: LIST
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: PPUSH
2939: CALL_OW 69
2943: AND
2944: IFFALSE 3058
2946: GO 2948
2948: DISABLE
2949: LD_INT 0
2951: PPUSH
2952: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
2953: LD_ADDR_VAR 0 1
2957: PUSH
2958: LD_INT 22
2960: PUSH
2961: LD_INT 1
2963: PUSH
2964: EMPTY
2965: LIST
2966: LIST
2967: PUSH
2968: LD_INT 25
2970: PUSH
2971: LD_INT 2
2973: PUSH
2974: EMPTY
2975: LIST
2976: LIST
2977: PUSH
2978: EMPTY
2979: LIST
2980: LIST
2981: PPUSH
2982: CALL_OW 69
2986: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2987: LD_ADDR_VAR 0 2
2991: PUSH
2992: LD_INT 22
2994: PUSH
2995: LD_INT 1
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: PUSH
3002: LD_INT 21
3004: PUSH
3005: LD_INT 2
3007: PUSH
3008: EMPTY
3009: LIST
3010: LIST
3011: PUSH
3012: LD_INT 58
3014: PUSH
3015: EMPTY
3016: LIST
3017: PUSH
3018: EMPTY
3019: LIST
3020: LIST
3021: LIST
3022: PPUSH
3023: CALL_OW 69
3027: ST_TO_ADDR
// if not tmp then
3028: LD_VAR 0 1
3032: NOT
3033: IFFALSE 3037
// exit ;
3035: GO 3058
// ComExitBuilding ( tmp ) ;
3037: LD_VAR 0 1
3041: PPUSH
3042: CALL_OW 122
// AddComDismantle ( tmp , usLab ) ;
3046: LD_VAR 0 1
3050: PPUSH
3051: LD_INT 3
3053: PPUSH
3054: CALL_OW 227
// end ;
3058: PPOPN 2
3060: END
// every 0 0$1 trigger usAlert and FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) do var i , tmp ;
3061: LD_EXP 10
3065: PUSH
3066: LD_INT 7
3068: PPUSH
3069: LD_INT 22
3071: PUSH
3072: LD_INT 1
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: PUSH
3079: LD_INT 21
3081: PUSH
3082: LD_INT 1
3084: PUSH
3085: EMPTY
3086: LIST
3087: LIST
3088: PUSH
3089: LD_INT 3
3091: PUSH
3092: LD_INT 24
3094: PUSH
3095: LD_INT 600
3097: PUSH
3098: EMPTY
3099: LIST
3100: LIST
3101: PUSH
3102: EMPTY
3103: LIST
3104: LIST
3105: PUSH
3106: EMPTY
3107: LIST
3108: LIST
3109: LIST
3110: PPUSH
3111: CALL_OW 70
3115: AND
3116: IFFALSE 3244
3118: GO 3120
3120: DISABLE
3121: LD_INT 0
3123: PPUSH
3124: PPUSH
// begin enable ;
3125: ENABLE
// tmp := FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) ;
3126: LD_ADDR_VAR 0 2
3130: PUSH
3131: LD_INT 7
3133: PPUSH
3134: LD_INT 22
3136: PUSH
3137: LD_INT 1
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: PUSH
3144: LD_INT 21
3146: PUSH
3147: LD_INT 1
3149: PUSH
3150: EMPTY
3151: LIST
3152: LIST
3153: PUSH
3154: LD_INT 3
3156: PUSH
3157: LD_INT 24
3159: PUSH
3160: LD_INT 600
3162: PUSH
3163: EMPTY
3164: LIST
3165: LIST
3166: PUSH
3167: EMPTY
3168: LIST
3169: LIST
3170: PUSH
3171: EMPTY
3172: LIST
3173: LIST
3174: LIST
3175: PPUSH
3176: CALL_OW 70
3180: ST_TO_ADDR
// if not tmp then
3181: LD_VAR 0 2
3185: NOT
3186: IFFALSE 3190
// exit ;
3188: GO 3244
// for i in tmp do
3190: LD_ADDR_VAR 0 1
3194: PUSH
3195: LD_VAR 0 2
3199: PUSH
3200: FOR_IN
3201: IFFALSE 3242
// if IsInUnit ( i ) then
3203: LD_VAR 0 1
3207: PPUSH
3208: CALL_OW 310
3212: IFFALSE 3225
// ComExitBuilding ( i ) else
3214: LD_VAR 0 1
3218: PPUSH
3219: CALL_OW 122
3223: GO 3240
// ComMoveXY ( i , 48 , 74 ) ;
3225: LD_VAR 0 1
3229: PPUSH
3230: LD_INT 48
3232: PPUSH
3233: LD_INT 74
3235: PPUSH
3236: CALL_OW 111
3240: GO 3200
3242: POP
3243: POP
// end ;
3244: PPOPN 2
3246: END
// every 12 12$00 do var i , un , tmp ;
3247: GO 3249
3249: DISABLE
3250: LD_INT 0
3252: PPUSH
3253: PPUSH
3254: PPUSH
// begin tmp := [ ] ;
3255: LD_ADDR_VAR 0 3
3259: PUSH
3260: EMPTY
3261: ST_TO_ADDR
// uc_side := 1 ;
3262: LD_ADDR_OWVAR 20
3266: PUSH
3267: LD_INT 1
3269: ST_TO_ADDR
// uc_nation := 1 ;
3270: LD_ADDR_OWVAR 21
3274: PUSH
3275: LD_INT 1
3277: ST_TO_ADDR
// case Difficulty of 1 :
3278: LD_OWVAR 67
3282: PUSH
3283: LD_INT 1
3285: DOUBLE
3286: EQUAL
3287: IFTRUE 3291
3289: GO 3394
3291: POP
// begin wait ( 1 1$00 ) ;
3292: LD_INT 2100
3294: PPUSH
3295: CALL_OW 67
// for i := 1 to 2 do
3299: LD_ADDR_VAR 0 1
3303: PUSH
3304: DOUBLE
3305: LD_INT 1
3307: DEC
3308: ST_TO_ADDR
3309: LD_INT 2
3311: PUSH
3312: FOR_TO
3313: IFFALSE 3390
// begin PrepareHuman ( false , [ 1 , 4 ] [ i mod 2 + 1 ] , 1 ) ;
3315: LD_INT 0
3317: PPUSH
3318: LD_INT 1
3320: PUSH
3321: LD_INT 4
3323: PUSH
3324: EMPTY
3325: LIST
3326: LIST
3327: PUSH
3328: LD_VAR 0 1
3332: PUSH
3333: LD_INT 2
3335: MOD
3336: PUSH
3337: LD_INT 1
3339: PLUS
3340: ARRAY
3341: PPUSH
3342: LD_INT 1
3344: PPUSH
3345: CALL_OW 380
// un := CreateHuman ;
3349: LD_ADDR_VAR 0 2
3353: PUSH
3354: CALL_OW 44
3358: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3359: LD_ADDR_VAR 0 3
3363: PUSH
3364: LD_VAR 0 3
3368: PPUSH
3369: LD_VAR 0 3
3373: PUSH
3374: LD_INT 1
3376: PLUS
3377: PPUSH
3378: LD_VAR 0 2
3382: PPUSH
3383: CALL_OW 1
3387: ST_TO_ADDR
// end ;
3388: GO 3312
3390: POP
3391: POP
// end ; 2 :
3392: GO 3788
3394: LD_INT 2
3396: DOUBLE
3397: EQUAL
3398: IFTRUE 3402
3400: GO 3536
3402: POP
// begin wait ( 0 0$30 ) ;
3403: LD_INT 1050
3405: PPUSH
3406: CALL_OW 67
// for i := 1 to 2 do
3410: LD_ADDR_VAR 0 1
3414: PUSH
3415: DOUBLE
3416: LD_INT 1
3418: DEC
3419: ST_TO_ADDR
3420: LD_INT 2
3422: PUSH
3423: FOR_TO
3424: IFFALSE 3480
// begin PrepareHuman ( false , 1 , 2 ) ;
3426: LD_INT 0
3428: PPUSH
3429: LD_INT 1
3431: PPUSH
3432: LD_INT 2
3434: PPUSH
3435: CALL_OW 380
// un := CreateHuman ;
3439: LD_ADDR_VAR 0 2
3443: PUSH
3444: CALL_OW 44
3448: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3449: LD_ADDR_VAR 0 3
3453: PUSH
3454: LD_VAR 0 3
3458: PPUSH
3459: LD_VAR 0 3
3463: PUSH
3464: LD_INT 1
3466: PLUS
3467: PPUSH
3468: LD_VAR 0 2
3472: PPUSH
3473: CALL_OW 1
3477: ST_TO_ADDR
// end ;
3478: GO 3423
3480: POP
3481: POP
// PrepareHuman ( false , 4 , 2 ) ;
3482: LD_INT 0
3484: PPUSH
3485: LD_INT 4
3487: PPUSH
3488: LD_INT 2
3490: PPUSH
3491: CALL_OW 380
// un := CreateHuman ;
3495: LD_ADDR_VAR 0 2
3499: PUSH
3500: CALL_OW 44
3504: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3505: LD_ADDR_VAR 0 3
3509: PUSH
3510: LD_VAR 0 3
3514: PPUSH
3515: LD_VAR 0 3
3519: PUSH
3520: LD_INT 1
3522: PLUS
3523: PPUSH
3524: LD_VAR 0 2
3528: PPUSH
3529: CALL_OW 1
3533: ST_TO_ADDR
// end ; 3 :
3534: GO 3788
3536: LD_INT 3
3538: DOUBLE
3539: EQUAL
3540: IFTRUE 3544
3542: GO 3787
3544: POP
// begin for i := 1 to 2 do
3545: LD_ADDR_VAR 0 1
3549: PUSH
3550: DOUBLE
3551: LD_INT 1
3553: DEC
3554: ST_TO_ADDR
3555: LD_INT 2
3557: PUSH
3558: FOR_TO
3559: IFFALSE 3615
// begin PrepareHuman ( false , 1 , 2 ) ;
3561: LD_INT 0
3563: PPUSH
3564: LD_INT 1
3566: PPUSH
3567: LD_INT 2
3569: PPUSH
3570: CALL_OW 380
// un := CreateHuman ;
3574: LD_ADDR_VAR 0 2
3578: PUSH
3579: CALL_OW 44
3583: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3584: LD_ADDR_VAR 0 3
3588: PUSH
3589: LD_VAR 0 3
3593: PPUSH
3594: LD_VAR 0 3
3598: PUSH
3599: LD_INT 1
3601: PLUS
3602: PPUSH
3603: LD_VAR 0 2
3607: PPUSH
3608: CALL_OW 1
3612: ST_TO_ADDR
// end ;
3613: GO 3558
3615: POP
3616: POP
// PrepareHuman ( false , 4 , 2 ) ;
3617: LD_INT 0
3619: PPUSH
3620: LD_INT 4
3622: PPUSH
3623: LD_INT 2
3625: PPUSH
3626: CALL_OW 380
// un := CreateHuman ;
3630: LD_ADDR_VAR 0 2
3634: PUSH
3635: CALL_OW 44
3639: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3640: LD_ADDR_VAR 0 3
3644: PUSH
3645: LD_VAR 0 3
3649: PPUSH
3650: LD_VAR 0 3
3654: PUSH
3655: LD_INT 1
3657: PLUS
3658: PPUSH
3659: LD_VAR 0 2
3663: PPUSH
3664: CALL_OW 1
3668: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_machine_gun , 90 ) ;
3669: LD_INT 1
3671: PPUSH
3672: LD_INT 1
3674: PPUSH
3675: LD_INT 2
3677: PPUSH
3678: LD_INT 2
3680: PPUSH
3681: LD_INT 1
3683: PPUSH
3684: LD_INT 2
3686: PPUSH
3687: LD_INT 90
3689: PPUSH
3690: CALL 237 0 7
// un := CreateVehicle ;
3694: LD_ADDR_VAR 0 2
3698: PUSH
3699: CALL_OW 45
3703: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3704: LD_ADDR_VAR 0 3
3708: PUSH
3709: LD_VAR 0 3
3713: PPUSH
3714: LD_VAR 0 3
3718: PUSH
3719: LD_INT 1
3721: PLUS
3722: PPUSH
3723: LD_VAR 0 2
3727: PPUSH
3728: CALL_OW 1
3732: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
3733: LD_INT 0
3735: PPUSH
3736: LD_INT 1
3738: PPUSH
3739: LD_INT 2
3741: PPUSH
3742: CALL_OW 380
// un := CreateHuman ;
3746: LD_ADDR_VAR 0 2
3750: PUSH
3751: CALL_OW 44
3755: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3756: LD_ADDR_VAR 0 3
3760: PUSH
3761: LD_VAR 0 3
3765: PPUSH
3766: LD_VAR 0 3
3770: PUSH
3771: LD_INT 1
3773: PLUS
3774: PPUSH
3775: LD_VAR 0 2
3779: PPUSH
3780: CALL_OW 1
3784: ST_TO_ADDR
// end ; end ;
3785: GO 3788
3787: POP
// for i := 1 to tmp do
3788: LD_ADDR_VAR 0 1
3792: PUSH
3793: DOUBLE
3794: LD_INT 1
3796: DEC
3797: ST_TO_ADDR
3798: LD_VAR 0 3
3802: PUSH
3803: FOR_TO
3804: IFFALSE 3969
// begin SetDir ( tmp [ i ] , 1 ) ;
3806: LD_VAR 0 3
3810: PUSH
3811: LD_VAR 0 1
3815: ARRAY
3816: PPUSH
3817: LD_INT 1
3819: PPUSH
3820: CALL_OW 233
// if GetType ( tmp [ i ] ) = unit_human then
3824: LD_VAR 0 3
3828: PUSH
3829: LD_VAR 0 1
3833: ARRAY
3834: PPUSH
3835: CALL_OW 247
3839: PUSH
3840: LD_INT 1
3842: EQUAL
3843: IFFALSE 3871
// PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) else
3845: LD_VAR 0 3
3849: PUSH
3850: LD_VAR 0 1
3854: ARRAY
3855: PPUSH
3856: LD_INT 28
3858: PPUSH
3859: LD_INT 52
3861: PPUSH
3862: LD_INT 0
3864: PPUSH
3865: CALL_OW 48
3869: GO 3939
// begin PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) ;
3871: LD_VAR 0 3
3875: PUSH
3876: LD_VAR 0 1
3880: ARRAY
3881: PPUSH
3882: LD_INT 28
3884: PPUSH
3885: LD_INT 52
3887: PPUSH
3888: LD_INT 0
3890: PPUSH
3891: CALL_OW 48
// i := i + 1 ;
3895: LD_ADDR_VAR 0 1
3899: PUSH
3900: LD_VAR 0 1
3904: PUSH
3905: LD_INT 1
3907: PLUS
3908: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ i ] , tmp [ i - 1 ] ) ;
3909: LD_VAR 0 3
3913: PUSH
3914: LD_VAR 0 1
3918: ARRAY
3919: PPUSH
3920: LD_VAR 0 3
3924: PUSH
3925: LD_VAR 0 1
3929: PUSH
3930: LD_INT 1
3932: MINUS
3933: ARRAY
3934: PPUSH
3935: CALL_OW 52
// end ; ComMoveXY ( tmp [ i ] , 43 , 56 ) ;
3939: LD_VAR 0 3
3943: PUSH
3944: LD_VAR 0 1
3948: ARRAY
3949: PPUSH
3950: LD_INT 43
3952: PPUSH
3953: LD_INT 56
3955: PPUSH
3956: CALL_OW 111
// wait ( 0 0$2 ) ;
3960: LD_INT 70
3962: PPUSH
3963: CALL_OW 67
// end ;
3967: GO 3803
3969: POP
3970: POP
// wait ( 0 0$2 ) ;
3971: LD_INT 70
3973: PPUSH
3974: CALL_OW 67
// if not FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) then
3978: LD_INT 7
3980: PPUSH
3981: LD_INT 22
3983: PUSH
3984: LD_INT 2
3986: PUSH
3987: EMPTY
3988: LIST
3989: LIST
3990: PPUSH
3991: CALL_OW 70
3995: NOT
3996: IFFALSE 4194
// begin AddComAgressiveMove ( tmp , 35 , 24 ) ;
3998: LD_VAR 0 3
4002: PPUSH
4003: LD_INT 35
4005: PPUSH
4006: LD_INT 24
4008: PPUSH
4009: CALL_OW 174
// usForces := usForces union UnitFilter ( tmp , [ f_class , 1 ] ) ;
4013: LD_ADDR_EXP 21
4017: PUSH
4018: LD_EXP 21
4022: PUSH
4023: LD_VAR 0 3
4027: PPUSH
4028: LD_INT 25
4030: PUSH
4031: LD_INT 1
4033: PUSH
4034: EMPTY
4035: LIST
4036: LIST
4037: PPUSH
4038: CALL_OW 72
4042: UNION
4043: ST_TO_ADDR
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
4044: LD_INT 22
4046: PUSH
4047: LD_INT 1
4049: PUSH
4050: EMPTY
4051: LIST
4052: LIST
4053: PUSH
4054: LD_INT 30
4056: PUSH
4057: LD_INT 4
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: PUSH
4064: EMPTY
4065: LIST
4066: LIST
4067: PPUSH
4068: CALL_OW 69
4072: PUSH
4073: LD_INT 1
4075: ARRAY
4076: PPUSH
4077: CALL_OW 313
4081: PUSH
4082: LD_INT 6
4084: LESS
4085: IFFALSE 4144
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 1 ] ) , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
4087: LD_VAR 0 3
4091: PPUSH
4092: LD_INT 25
4094: PUSH
4095: LD_INT 1
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PPUSH
4102: CALL_OW 72
4106: PPUSH
4107: LD_INT 22
4109: PUSH
4110: LD_INT 1
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: PUSH
4117: LD_INT 30
4119: PUSH
4120: LD_INT 4
4122: PUSH
4123: EMPTY
4124: LIST
4125: LIST
4126: PUSH
4127: EMPTY
4128: LIST
4129: LIST
4130: PPUSH
4131: CALL_OW 69
4135: PUSH
4136: LD_INT 1
4138: ARRAY
4139: PPUSH
4140: CALL_OW 180
// if UnitFilter ( tmp , [ f_class , 4 ] ) then
4144: LD_VAR 0 3
4148: PPUSH
4149: LD_INT 25
4151: PUSH
4152: LD_INT 4
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: PPUSH
4159: CALL_OW 72
4163: IFFALSE 4192
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 4 ] ) , usLab ) ;
4165: LD_VAR 0 3
4169: PPUSH
4170: LD_INT 25
4172: PUSH
4173: LD_INT 4
4175: PUSH
4176: EMPTY
4177: LIST
4178: LIST
4179: PPUSH
4180: CALL_OW 72
4184: PPUSH
4185: LD_INT 3
4187: PPUSH
4188: CALL_OW 180
// end else
4192: GO 4469
// begin tmp := tmp union FilterUnitsInArea ( retreatArea , [ f_side , 1 ] ) ;
4194: LD_ADDR_VAR 0 3
4198: PUSH
4199: LD_VAR 0 3
4203: PUSH
4204: LD_INT 6
4206: PPUSH
4207: LD_INT 22
4209: PUSH
4210: LD_INT 1
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: PPUSH
4217: CALL_OW 70
4221: UNION
4222: ST_TO_ADDR
// ComMoveXY ( tmp , 45 , 54 ) ;
4223: LD_VAR 0 3
4227: PPUSH
4228: LD_INT 45
4230: PPUSH
4231: LD_INT 54
4233: PPUSH
4234: CALL_OW 111
// wait ( 0 0$3 ) ;
4238: LD_INT 105
4240: PPUSH
4241: CALL_OW 67
// AddComAgressiveMove ( tmp diff UnitFilter ( tmp , [ f_class , 4 ] ) , 35 , 24 ) ;
4245: LD_VAR 0 3
4249: PUSH
4250: LD_VAR 0 3
4254: PPUSH
4255: LD_INT 25
4257: PUSH
4258: LD_INT 4
4260: PUSH
4261: EMPTY
4262: LIST
4263: LIST
4264: PPUSH
4265: CALL_OW 72
4269: DIFF
4270: PPUSH
4271: LD_INT 35
4273: PPUSH
4274: LD_INT 24
4276: PPUSH
4277: CALL_OW 174
// AddComMoveXY ( UnitFilter ( tmp , [ f_class , 4 ] ) , 42 , 49 ) ;
4281: LD_VAR 0 3
4285: PPUSH
4286: LD_INT 25
4288: PUSH
4289: LD_INT 4
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: PPUSH
4296: CALL_OW 72
4300: PPUSH
4301: LD_INT 42
4303: PPUSH
4304: LD_INT 49
4306: PPUSH
4307: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4311: LD_INT 35
4313: PPUSH
4314: CALL_OW 67
// for i in tmp do
4318: LD_ADDR_VAR 0 1
4322: PUSH
4323: LD_VAR 0 3
4327: PUSH
4328: FOR_IN
4329: IFFALSE 4460
// if IsDead ( i ) then
4331: LD_VAR 0 1
4335: PPUSH
4336: CALL_OW 301
4340: IFFALSE 4360
// tmp := tmp diff i else
4342: LD_ADDR_VAR 0 3
4346: PUSH
4347: LD_VAR 0 3
4351: PUSH
4352: LD_VAR 0 1
4356: DIFF
4357: ST_TO_ADDR
4358: GO 4458
// if GetClass ( i ) = 1 then
4360: LD_VAR 0 1
4364: PPUSH
4365: CALL_OW 257
4369: PUSH
4370: LD_INT 1
4372: EQUAL
4373: IFFALSE 4458
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 42 , 49 ) > 6 then
4375: LD_VAR 0 1
4379: PPUSH
4380: CALL_OW 256
4384: PUSH
4385: LD_INT 600
4387: LESS
4388: PUSH
4389: LD_VAR 0 1
4393: PPUSH
4394: LD_INT 42
4396: PPUSH
4397: LD_INT 49
4399: PPUSH
4400: CALL_OW 297
4404: PUSH
4405: LD_INT 6
4407: GREATER
4408: AND
4409: IFFALSE 4428
// ComMoveXY ( i , 42 , 49 ) else
4411: LD_VAR 0 1
4415: PPUSH
4416: LD_INT 42
4418: PPUSH
4419: LD_INT 49
4421: PPUSH
4422: CALL_OW 111
4426: GO 4458
// if GetLives ( i ) = 1000 then
4428: LD_VAR 0 1
4432: PPUSH
4433: CALL_OW 256
4437: PUSH
4438: LD_INT 1000
4440: EQUAL
4441: IFFALSE 4458
// ComAgressiveMove ( i , 36 , 25 ) ;
4443: LD_VAR 0 1
4447: PPUSH
4448: LD_INT 36
4450: PPUSH
4451: LD_INT 25
4453: PPUSH
4454: CALL_OW 114
// end ;
4458: GO 4328
4460: POP
4461: POP
// until not tmp ;
4462: LD_VAR 0 3
4466: NOT
4467: IFFALSE 4311
// end ; end ;
4469: PPOPN 3
4471: END
// every 1 1$30 trigger FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) and not attackDeltaAllowed do var i , un , veh ;
4472: LD_INT 7
4474: PPUSH
4475: LD_INT 22
4477: PUSH
4478: LD_INT 2
4480: PUSH
4481: EMPTY
4482: LIST
4483: LIST
4484: PPUSH
4485: CALL_OW 70
4489: PUSH
4490: LD_EXP 14
4494: NOT
4495: AND
4496: IFFALSE 4654
4498: GO 4500
4500: DISABLE
4501: LD_INT 0
4503: PPUSH
4504: PPUSH
4505: PPUSH
// begin for i := 1 to 2 do
4506: LD_ADDR_VAR 0 1
4510: PUSH
4511: DOUBLE
4512: LD_INT 1
4514: DEC
4515: ST_TO_ADDR
4516: LD_INT 2
4518: PUSH
4519: FOR_TO
4520: IFFALSE 4652
// begin wait ( 0 0$3 ) ;
4522: LD_INT 105
4524: PPUSH
4525: CALL_OW 67
// uc_side := 1 ;
4529: LD_ADDR_OWVAR 20
4533: PUSH
4534: LD_INT 1
4536: ST_TO_ADDR
// uc_nation := 1 ;
4537: LD_ADDR_OWVAR 21
4541: PUSH
4542: LD_INT 1
4544: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 90 ) ;
4545: LD_INT 1
4547: PPUSH
4548: LD_INT 1
4550: PPUSH
4551: LD_INT 2
4553: PPUSH
4554: LD_INT 1
4556: PPUSH
4557: LD_INT 1
4559: PPUSH
4560: LD_INT 4
4562: PPUSH
4563: LD_INT 90
4565: PPUSH
4566: CALL 237 0 7
// veh := CreateVehicle ;
4570: LD_ADDR_VAR 0 3
4574: PUSH
4575: CALL_OW 45
4579: ST_TO_ADDR
// PlaceUnitXY ( veh , 29 , 52 , false ) ;
4580: LD_VAR 0 3
4584: PPUSH
4585: LD_INT 29
4587: PPUSH
4588: LD_INT 52
4590: PPUSH
4591: LD_INT 0
4593: PPUSH
4594: CALL_OW 48
// PrepareHuman ( false , 3 , 3 ) ;
4598: LD_INT 0
4600: PPUSH
4601: LD_INT 3
4603: PPUSH
4604: LD_INT 3
4606: PPUSH
4607: CALL_OW 380
// un := CreateHuman ;
4611: LD_ADDR_VAR 0 2
4615: PUSH
4616: CALL_OW 44
4620: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4621: LD_VAR 0 2
4625: PPUSH
4626: LD_VAR 0 3
4630: PPUSH
4631: CALL_OW 52
// ComAgressiveMove ( veh , 36 , 25 ) ;
4635: LD_VAR 0 3
4639: PPUSH
4640: LD_INT 36
4642: PPUSH
4643: LD_INT 25
4645: PPUSH
4646: CALL_OW 114
// end ;
4650: GO 4519
4652: POP
4653: POP
// end ; end_of_file
4654: PPOPN 3
4656: END
// export function Action ; var i , tmp ; begin
4657: LD_INT 0
4659: PPUSH
4660: PPUSH
4661: PPUSH
// InGameOn ;
4662: CALL_OW 8
// DoNotAttack ( 2 , usLab ) ;
4666: LD_INT 2
4668: PPUSH
4669: LD_INT 3
4671: PPUSH
4672: CALL_OW 471
// ComMoveXY ( Heike , 78 , 61 ) ;
4676: LD_EXP 23
4680: PPUSH
4681: LD_INT 78
4683: PPUSH
4684: LD_INT 61
4686: PPUSH
4687: CALL_OW 111
// if Mike then
4691: LD_EXP 25
4695: IFFALSE 4712
// ComMoveXY ( Mike , 80 , 66 ) ;
4697: LD_EXP 25
4701: PPUSH
4702: LD_INT 80
4704: PPUSH
4705: LD_INT 66
4707: PPUSH
4708: CALL_OW 111
// if Givi then
4712: LD_EXP 24
4716: IFFALSE 4733
// ComMoveXY ( Givi , 82 , 66 ) ;
4718: LD_EXP 24
4722: PPUSH
4723: LD_INT 82
4725: PPUSH
4726: LD_INT 66
4728: PPUSH
4729: CALL_OW 111
// if Kamil then
4733: LD_EXP 26
4737: IFFALSE 4754
// ComMoveXY ( Kamil , 82 , 67 ) ;
4739: LD_EXP 26
4743: PPUSH
4744: LD_INT 82
4746: PPUSH
4747: LD_INT 67
4749: PPUSH
4750: CALL_OW 111
// CenterNowOnUnits ( Heike ) ;
4754: LD_EXP 23
4758: PPUSH
4759: CALL_OW 87
// wait ( 0 0$2 ) ;
4763: LD_INT 70
4765: PPUSH
4766: CALL_OW 67
// if Givi and Mike then
4770: LD_EXP 24
4774: PUSH
4775: LD_EXP 25
4779: AND
4780: IFFALSE 5314
// begin AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
4782: LD_EXP 24
4786: PUSH
4787: LD_EXP 25
4791: PUSH
4792: LD_EXP 26
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: LIST
4801: PPUSH
4802: LD_EXP 23
4806: PPUSH
4807: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
4811: LD_EXP 23
4815: PPUSH
4816: LD_EXP 24
4820: PPUSH
4821: CALL_OW 179
// Say ( Givi , DG-1-start ) ;
4825: LD_EXP 24
4829: PPUSH
4830: LD_STRING DG-1-start
4832: PPUSH
4833: CALL_OW 88
// Say ( Heike , DH-1-start ) ;
4837: LD_EXP 23
4841: PPUSH
4842: LD_STRING DH-1-start
4844: PPUSH
4845: CALL_OW 88
// AddComTurnUnit ( Mike , Heike ) ;
4849: LD_EXP 25
4853: PPUSH
4854: LD_EXP 23
4858: PPUSH
4859: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
4863: LD_EXP 23
4867: PPUSH
4868: LD_EXP 25
4872: PPUSH
4873: CALL_OW 179
// Say ( Mike , DM-1-start ) ;
4877: LD_EXP 25
4881: PPUSH
4882: LD_STRING DM-1-start
4884: PPUSH
4885: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
4889: LD_EXP 23
4893: PPUSH
4894: LD_STRING DH-2-start
4896: PPUSH
4897: CALL_OW 88
// Say ( Mike , DM-2-start ) ;
4901: LD_EXP 25
4905: PPUSH
4906: LD_STRING DM-2-start
4908: PPUSH
4909: CALL_OW 88
// Say ( Givi , DG-2-start ) ;
4913: LD_EXP 24
4917: PPUSH
4918: LD_STRING DG-2-start
4920: PPUSH
4921: CALL_OW 88
// ComTurnUnit ( Mike , Givi ) ;
4925: LD_EXP 25
4929: PPUSH
4930: LD_EXP 24
4934: PPUSH
4935: CALL_OW 119
// ComTurnUnit ( Heike , Mike ) ;
4939: LD_EXP 23
4943: PPUSH
4944: LD_EXP 25
4948: PPUSH
4949: CALL_OW 119
// Say ( Mike , DM-3-start ) ;
4953: LD_EXP 25
4957: PPUSH
4958: LD_STRING DM-3-start
4960: PPUSH
4961: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
4965: LD_EXP 23
4969: PPUSH
4970: LD_STRING DH-3-start
4972: PPUSH
4973: CALL_OW 88
// ComMoveXY ( [ Heike , Mike , Givi , Kamil ] , 84 , 51 ) ;
4977: LD_EXP 23
4981: PUSH
4982: LD_EXP 25
4986: PUSH
4987: LD_EXP 24
4991: PUSH
4992: LD_EXP 26
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: PPUSH
5003: LD_INT 84
5005: PPUSH
5006: LD_INT 51
5008: PPUSH
5009: CALL_OW 111
// wait ( 0 0$2 ) ;
5013: LD_INT 70
5015: PPUSH
5016: CALL_OW 67
// Say ( Givi , DG-3-start ) ;
5020: LD_EXP 24
5024: PPUSH
5025: LD_STRING DG-3-start
5027: PPUSH
5028: CALL_OW 88
// ComHold ( [ Heike , Mike , Givi , Kamil ] ) ;
5032: LD_EXP 23
5036: PUSH
5037: LD_EXP 25
5041: PUSH
5042: LD_EXP 24
5046: PUSH
5047: LD_EXP 26
5051: PUSH
5052: EMPTY
5053: LIST
5054: LIST
5055: LIST
5056: LIST
5057: PPUSH
5058: CALL_OW 140
// AddComTurnUnit ( Heike , Givi ) ;
5062: LD_EXP 23
5066: PPUSH
5067: LD_EXP 24
5071: PPUSH
5072: CALL_OW 179
// AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
5076: LD_EXP 24
5080: PUSH
5081: LD_EXP 25
5085: PUSH
5086: LD_EXP 26
5090: PUSH
5091: EMPTY
5092: LIST
5093: LIST
5094: LIST
5095: PPUSH
5096: LD_EXP 23
5100: PPUSH
5101: CALL_OW 179
// Say ( Heike , DH-4-start ) ;
5105: LD_EXP 23
5109: PPUSH
5110: LD_STRING DH-4-start
5112: PPUSH
5113: CALL_OW 88
// Say ( Givi , DG-4-start ) ;
5117: LD_EXP 24
5121: PPUSH
5122: LD_STRING DG-4-start
5124: PPUSH
5125: CALL_OW 88
// Say ( Heike , DH-5-start ) ;
5129: LD_EXP 23
5133: PPUSH
5134: LD_STRING DH-5-start
5136: PPUSH
5137: CALL_OW 88
// Say ( Givi , DG-5-start ) ;
5141: LD_EXP 24
5145: PPUSH
5146: LD_STRING DG-5-start
5148: PPUSH
5149: CALL_OW 88
// Say ( Heike , DH-6-start ) ;
5153: LD_EXP 23
5157: PPUSH
5158: LD_STRING DH-6-start
5160: PPUSH
5161: CALL_OW 88
// if not Kamil then
5165: LD_EXP 26
5169: NOT
5170: IFFALSE 5221
// begin Say ( Mike , DM-6-start ) ;
5172: LD_EXP 25
5176: PPUSH
5177: LD_STRING DM-6-start
5179: PPUSH
5180: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi ] , Mike ) ;
5184: LD_EXP 23
5188: PUSH
5189: LD_EXP 24
5193: PUSH
5194: EMPTY
5195: LIST
5196: LIST
5197: PPUSH
5198: LD_EXP 25
5202: PPUSH
5203: CALL_OW 119
// Say ( Givi , DG-6-start ) ;
5207: LD_EXP 24
5211: PPUSH
5212: LD_STRING DG-6-start
5214: PPUSH
5215: CALL_OW 88
// end else
5219: GO 5300
// begin Say ( Mike , DM-6-start-a ) ;
5221: LD_EXP 25
5225: PPUSH
5226: LD_STRING DM-6-start-a
5228: PPUSH
5229: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi , Mike ] , Kamil ) ;
5233: LD_EXP 23
5237: PUSH
5238: LD_EXP 24
5242: PUSH
5243: LD_EXP 25
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: LIST
5252: PPUSH
5253: LD_EXP 26
5257: PPUSH
5258: CALL_OW 119
// ComTurnUnit ( Kamil , Mike ) ;
5262: LD_EXP 26
5266: PPUSH
5267: LD_EXP 25
5271: PPUSH
5272: CALL_OW 119
// Say ( Kamil , DKam-7-start-a ) ;
5276: LD_EXP 26
5280: PPUSH
5281: LD_STRING DKam-7-start-a
5283: PPUSH
5284: CALL_OW 88
// Say ( Givi , DG-6-start-a ) ;
5288: LD_EXP 24
5292: PPUSH
5293: LD_STRING DG-6-start-a
5295: PPUSH
5296: CALL_OW 88
// end ; Say ( Heike , DH-7-start ) ;
5300: LD_EXP 23
5304: PPUSH
5305: LD_STRING DH-7-start
5307: PPUSH
5308: CALL_OW 88
// end else
5312: GO 6036
// if not Mike and Givi then
5314: LD_EXP 25
5318: NOT
5319: PUSH
5320: LD_EXP 24
5324: AND
5325: IFFALSE 5670
// begin AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5327: LD_EXP 24
5331: PUSH
5332: LD_EXP 26
5336: PUSH
5337: EMPTY
5338: LIST
5339: LIST
5340: PPUSH
5341: LD_EXP 23
5345: PPUSH
5346: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
5350: LD_EXP 23
5354: PPUSH
5355: LD_EXP 24
5359: PPUSH
5360: CALL_OW 179
// Say ( Givi , DG-1-start-c ) ;
5364: LD_EXP 24
5368: PPUSH
5369: LD_STRING DG-1-start-c
5371: PPUSH
5372: CALL_OW 88
// Say ( Heike , DH-1-start-c ) ;
5376: LD_EXP 23
5380: PPUSH
5381: LD_STRING DH-1-start-c
5383: PPUSH
5384: CALL_OW 88
// Say ( Givi , DG-2-start-c ) ;
5388: LD_EXP 24
5392: PPUSH
5393: LD_STRING DG-2-start-c
5395: PPUSH
5396: CALL_OW 88
// Say ( Heike , DH-2-start-c ) ;
5400: LD_EXP 23
5404: PPUSH
5405: LD_STRING DH-2-start-c
5407: PPUSH
5408: CALL_OW 88
// Say ( Givi , DG-3-start-c ) ;
5412: LD_EXP 24
5416: PPUSH
5417: LD_STRING DG-3-start-c
5419: PPUSH
5420: CALL_OW 88
// ComMoveXY ( Heike , 83 , 56 ) ;
5424: LD_EXP 23
5428: PPUSH
5429: LD_INT 83
5431: PPUSH
5432: LD_INT 56
5434: PPUSH
5435: CALL_OW 111
// ComMoveXY ( Givi , 83 , 59 ) ;
5439: LD_EXP 24
5443: PPUSH
5444: LD_INT 83
5446: PPUSH
5447: LD_INT 59
5449: PPUSH
5450: CALL_OW 111
// if Kamil then
5454: LD_EXP 26
5458: IFFALSE 5475
// ComMoveXY ( Kamil , 80 , 58 ) ;
5460: LD_EXP 26
5464: PPUSH
5465: LD_INT 80
5467: PPUSH
5468: LD_INT 58
5470: PPUSH
5471: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5475: LD_EXP 23
5479: PPUSH
5480: LD_EXP 24
5484: PPUSH
5485: CALL_OW 179
// AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5489: LD_EXP 24
5493: PUSH
5494: LD_EXP 26
5498: PUSH
5499: EMPTY
5500: LIST
5501: LIST
5502: PPUSH
5503: LD_EXP 23
5507: PPUSH
5508: CALL_OW 179
// Say ( Heike , DH-3-start-c ) ;
5512: LD_EXP 23
5516: PPUSH
5517: LD_STRING DH-3-start-c
5519: PPUSH
5520: CALL_OW 88
// Say ( Givi , DG-4-start-c ) ;
5524: LD_EXP 24
5528: PPUSH
5529: LD_STRING DG-4-start-c
5531: PPUSH
5532: CALL_OW 88
// Say ( Heike , DH-5-start-c ) ;
5536: LD_EXP 23
5540: PPUSH
5541: LD_STRING DH-5-start-c
5543: PPUSH
5544: CALL_OW 88
// Say ( Givi , DG-5-start-c ) ;
5548: LD_EXP 24
5552: PPUSH
5553: LD_STRING DG-5-start-c
5555: PPUSH
5556: CALL_OW 88
// Say ( Heike , DH-6-start-c ) ;
5560: LD_EXP 23
5564: PPUSH
5565: LD_STRING DH-6-start-c
5567: PPUSH
5568: CALL_OW 88
// Say ( Givi , DG-6-start-c ) ;
5572: LD_EXP 24
5576: PPUSH
5577: LD_STRING DG-6-start-c
5579: PPUSH
5580: CALL_OW 88
// if Kamil then
5584: LD_EXP 26
5588: IFFALSE 5644
// begin ComTurnUnit ( Kamil , Heike ) ;
5590: LD_EXP 26
5594: PPUSH
5595: LD_EXP 23
5599: PPUSH
5600: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5604: LD_EXP 26
5608: PPUSH
5609: LD_STRING DKam-1-start-c
5611: PPUSH
5612: CALL_OW 88
// ComTurnUnit ( Givi , Kamil ) ;
5616: LD_EXP 24
5620: PPUSH
5621: LD_EXP 26
5625: PPUSH
5626: CALL_OW 119
// Say ( Givi , DG-7-start-c ) ;
5630: LD_EXP 24
5634: PPUSH
5635: LD_STRING DG-7-start-c
5637: PPUSH
5638: CALL_OW 88
// end else
5642: GO 5668
// begin Say ( Givi , DG-8-start-c ) ;
5644: LD_EXP 24
5648: PPUSH
5649: LD_STRING DG-8-start-c
5651: PPUSH
5652: CALL_OW 88
// Say ( Heike , DH-7-start-c ) ;
5656: LD_EXP 23
5660: PPUSH
5661: LD_STRING DH-7-start-c
5663: PPUSH
5664: CALL_OW 88
// end ; end else
5668: GO 6036
// if not Givi and Mike then
5670: LD_EXP 24
5674: NOT
5675: PUSH
5676: LD_EXP 25
5680: AND
5681: IFFALSE 5940
// begin AddComTurnUnit ( [ Mike , Kamil ] , Heike ) ;
5683: LD_EXP 25
5687: PUSH
5688: LD_EXP 26
5692: PUSH
5693: EMPTY
5694: LIST
5695: LIST
5696: PPUSH
5697: LD_EXP 23
5701: PPUSH
5702: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
5706: LD_EXP 23
5710: PPUSH
5711: LD_EXP 25
5715: PPUSH
5716: CALL_OW 179
// Say ( Mike , DM-1-start-b ) ;
5720: LD_EXP 25
5724: PPUSH
5725: LD_STRING DM-1-start-b
5727: PPUSH
5728: CALL_OW 88
// Say ( Heike , DH-1-start-b ) ;
5732: LD_EXP 23
5736: PPUSH
5737: LD_STRING DH-1-start-b
5739: PPUSH
5740: CALL_OW 88
// Say ( Mike , DM-2-start-b ) ;
5744: LD_EXP 25
5748: PPUSH
5749: LD_STRING DM-2-start-b
5751: PPUSH
5752: CALL_OW 88
// Say ( Heike , DH-2-start-b ) ;
5756: LD_EXP 23
5760: PPUSH
5761: LD_STRING DH-2-start-b
5763: PPUSH
5764: CALL_OW 88
// Say ( Mike , DM-3-start-b ) ;
5768: LD_EXP 25
5772: PPUSH
5773: LD_STRING DM-3-start-b
5775: PPUSH
5776: CALL_OW 88
// if Kamil then
5780: LD_EXP 26
5784: IFFALSE 5801
// ComMoveXY ( Kamil , 80 , 58 ) ;
5786: LD_EXP 26
5790: PPUSH
5791: LD_INT 80
5793: PPUSH
5794: LD_INT 58
5796: PPUSH
5797: CALL_OW 111
// ComMoveXY ( Heike , 83 , 56 ) ;
5801: LD_EXP 23
5805: PPUSH
5806: LD_INT 83
5808: PPUSH
5809: LD_INT 56
5811: PPUSH
5812: CALL_OW 111
// ComMoveXY ( Mike , 83 , 59 ) ;
5816: LD_EXP 25
5820: PPUSH
5821: LD_INT 83
5823: PPUSH
5824: LD_INT 59
5826: PPUSH
5827: CALL_OW 111
// AddComTurnUnit ( Heike , Mike ) ;
5831: LD_EXP 23
5835: PPUSH
5836: LD_EXP 25
5840: PPUSH
5841: CALL_OW 179
// AddComTurnUnit ( [ Kamil , Mike ] , Heike ) ;
5845: LD_EXP 26
5849: PUSH
5850: LD_EXP 25
5854: PUSH
5855: EMPTY
5856: LIST
5857: LIST
5858: PPUSH
5859: LD_EXP 23
5863: PPUSH
5864: CALL_OW 179
// Say ( Heike , DH-3-start-b ) ;
5868: LD_EXP 23
5872: PPUSH
5873: LD_STRING DH-3-start-b
5875: PPUSH
5876: CALL_OW 88
// Say ( Mike , DM-4-start-b ) ;
5880: LD_EXP 25
5884: PPUSH
5885: LD_STRING DM-4-start-b
5887: PPUSH
5888: CALL_OW 88
// if Kamil then
5892: LD_EXP 26
5896: IFFALSE 5926
// begin ComTurnUnit ( Kamil , Heike ) ;
5898: LD_EXP 26
5902: PPUSH
5903: LD_EXP 23
5907: PPUSH
5908: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5912: LD_EXP 26
5916: PPUSH
5917: LD_STRING DKam-1-start-c
5919: PPUSH
5920: CALL_OW 88
// end else
5924: GO 5938
// begin Say ( Mike , DM-5-start-b ) ;
5926: LD_EXP 25
5930: PPUSH
5931: LD_STRING DM-5-start-b
5933: PPUSH
5934: CALL_OW 88
// end ; end else
5938: GO 6036
// if Kamil then
5940: LD_EXP 26
5944: IFFALSE 6024
// begin AddComTurnUnit ( Heike , Kamil ) ;
5946: LD_EXP 23
5950: PPUSH
5951: LD_EXP 26
5955: PPUSH
5956: CALL_OW 179
// AddComTurnUnit ( Kamil , Heike ) ;
5960: LD_EXP 26
5964: PPUSH
5965: LD_EXP 23
5969: PPUSH
5970: CALL_OW 179
// Say ( Heike , DH-1-start-f ) ;
5974: LD_EXP 23
5978: PPUSH
5979: LD_STRING DH-1-start-f
5981: PPUSH
5982: CALL_OW 88
// Say ( Kamil , DKam-1-start-f ) ;
5986: LD_EXP 26
5990: PPUSH
5991: LD_STRING DKam-1-start-f
5993: PPUSH
5994: CALL_OW 88
// Say ( Heike , DH-2-start-f ) ;
5998: LD_EXP 23
6002: PPUSH
6003: LD_STRING DH-2-start-f
6005: PPUSH
6006: CALL_OW 88
// Say ( Kamil , DKam-2-start-f ) ;
6010: LD_EXP 26
6014: PPUSH
6015: LD_STRING DKam-2-start-f
6017: PPUSH
6018: CALL_OW 88
// end else
6022: GO 6036
// begin Say ( Heike , DH-1-start-d ) ;
6024: LD_EXP 23
6028: PPUSH
6029: LD_STRING DH-1-start-d
6031: PPUSH
6032: CALL_OW 88
// end ; ComFree ( [ Heike , Givi , Mike , Kamil ] ) ;
6036: LD_EXP 23
6040: PUSH
6041: LD_EXP 24
6045: PUSH
6046: LD_EXP 25
6050: PUSH
6051: LD_EXP 26
6055: PUSH
6056: EMPTY
6057: LIST
6058: LIST
6059: LIST
6060: LIST
6061: PPUSH
6062: CALL_OW 139
// InGameOff ;
6066: CALL_OW 9
// ChangeMissionObjectives ( OEast ) ;
6070: LD_STRING OEast
6072: PPUSH
6073: CALL_OW 337
// SetAreaMapShow ( eastExitArea , 1 ) ;
6077: LD_INT 10
6079: PPUSH
6080: LD_INT 1
6082: PPUSH
6083: CALL_OW 424
// SaveForQuickRestart ;
6087: CALL_OW 22
// wait ( 0 0$20 ) ;
6091: LD_INT 700
6093: PPUSH
6094: CALL_OW 67
// SendSciToForest ;
6098: CALL 1496 0 0
// if Difficulty = 1 then
6102: LD_OWVAR 67
6106: PUSH
6107: LD_INT 1
6109: EQUAL
6110: IFFALSE 6114
// exit ;
6112: GO 6231
// wait ( [ 5 5$00 , 2 2$30 ] [ Difficulty - 1 ] ) ;
6114: LD_INT 10500
6116: PUSH
6117: LD_INT 5250
6119: PUSH
6120: EMPTY
6121: LIST
6122: LIST
6123: PUSH
6124: LD_OWVAR 67
6128: PUSH
6129: LD_INT 1
6131: MINUS
6132: ARRAY
6133: PPUSH
6134: CALL_OW 67
// if usAlert then
6138: LD_EXP 10
6142: IFFALSE 6146
// exit ;
6144: GO 6231
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
6146: LD_ADDR_VAR 0 3
6150: PUSH
6151: LD_INT 22
6153: PUSH
6154: LD_INT 1
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: PUSH
6161: LD_INT 25
6163: PUSH
6164: LD_INT 2
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: PPUSH
6175: CALL_OW 69
6179: ST_TO_ADDR
// if not tmp then
6180: LD_VAR 0 3
6184: NOT
6185: IFFALSE 6189
// exit ;
6187: GO 6231
// ComExitBuilding ( tmp ) ;
6189: LD_VAR 0 3
6193: PPUSH
6194: CALL_OW 122
// AddComBuild ( tmp , b_breastwork , 40 , 13 , 3 ) ;
6198: LD_VAR 0 3
6202: PPUSH
6203: LD_INT 31
6205: PPUSH
6206: LD_INT 40
6208: PPUSH
6209: LD_INT 13
6211: PPUSH
6212: LD_INT 3
6214: PPUSH
6215: CALL_OW 205
// AddComEnterUnit ( tmp , Delta ) ;
6219: LD_VAR 0 3
6223: PPUSH
6224: LD_INT 1
6226: PPUSH
6227: CALL_OW 180
// end ;
6231: LD_VAR 0 1
6235: RET
// every 3 3$00 do
6236: GO 6238
6238: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
6239: LD_INT 1
6241: PPUSH
6242: LD_INT 570
6244: PPUSH
6245: LD_INT 350
6247: PPUSH
6248: CALL_OW 550
// wait ( 2 2$40 ) ;
6252: LD_INT 5600
6254: PPUSH
6255: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
6259: LD_INT 0
6261: PPUSH
6262: LD_INT 570
6264: PPUSH
6265: LD_INT 350
6267: PPUSH
6268: CALL_OW 550
// end ;
6272: END
// every 0 0$1 trigger not aviradzeSpotted and See ( 2 , Aviradze ) do var i , pepAmount ;
6273: LD_EXP 4
6277: NOT
6278: PUSH
6279: LD_INT 2
6281: PPUSH
6282: LD_EXP 27
6286: PPUSH
6287: CALL_OW 292
6291: AND
6292: IFFALSE 7208
6294: GO 6296
6296: DISABLE
6297: LD_INT 0
6299: PPUSH
6300: PPUSH
// begin SetAreaMapShow ( eastExitArea , 0 ) ;
6301: LD_INT 10
6303: PPUSH
6304: LD_INT 0
6306: PPUSH
6307: CALL_OW 424
// aviradzeSpotted := true ;
6311: LD_ADDR_EXP 4
6315: PUSH
6316: LD_INT 1
6318: ST_TO_ADDR
// pepAmount := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ;
6319: LD_ADDR_VAR 0 2
6323: PUSH
6324: LD_INT 22
6326: PUSH
6327: LD_INT 2
6329: PUSH
6330: EMPTY
6331: LIST
6332: LIST
6333: PUSH
6334: LD_INT 21
6336: PUSH
6337: LD_INT 1
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: PPUSH
6348: CALL_OW 69
6352: ST_TO_ADDR
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6353: LD_EXP 23
6357: PPUSH
6358: LD_EXP 27
6362: PPUSH
6363: CALL_OW 250
6367: PPUSH
6368: LD_EXP 27
6372: PPUSH
6373: CALL_OW 251
6377: PPUSH
6378: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6382: LD_INT 35
6384: PPUSH
6385: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 16 ;
6389: LD_EXP 23
6393: PPUSH
6394: LD_EXP 27
6398: PPUSH
6399: CALL_OW 296
6403: PUSH
6404: LD_INT 16
6406: LESS
6407: IFFALSE 6382
// InGameOn ;
6409: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
6413: LD_INT 5
6415: PPUSH
6416: LD_INT 2
6418: PPUSH
6419: CALL_OW 343
// if pepAmount > 2 then
6423: LD_VAR 0 2
6427: PUSH
6428: LD_INT 2
6430: GREATER
6431: IFFALSE 6447
// Say ( Heike , DH-1-spot ) else
6433: LD_EXP 23
6437: PPUSH
6438: LD_STRING DH-1-spot
6440: PPUSH
6441: CALL_OW 88
6445: GO 6459
// Say ( Heike , DH-1-spot-d ) ;
6447: LD_EXP 23
6451: PPUSH
6452: LD_STRING DH-1-spot-d
6454: PPUSH
6455: CALL_OW 88
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6459: LD_EXP 23
6463: PPUSH
6464: LD_EXP 27
6468: PPUSH
6469: CALL_OW 250
6473: PPUSH
6474: LD_EXP 27
6478: PPUSH
6479: CALL_OW 251
6483: PPUSH
6484: CALL_OW 111
// for i in [ Kamil , Mike , Givi ] do
6488: LD_ADDR_VAR 0 1
6492: PUSH
6493: LD_EXP 26
6497: PUSH
6498: LD_EXP 25
6502: PUSH
6503: LD_EXP 24
6507: PUSH
6508: EMPTY
6509: LIST
6510: LIST
6511: LIST
6512: PUSH
6513: FOR_IN
6514: IFFALSE 6553
// if GetDistUnits ( i , Aviradze ) > 7 then
6516: LD_VAR 0 1
6520: PPUSH
6521: LD_EXP 27
6525: PPUSH
6526: CALL_OW 296
6530: PUSH
6531: LD_INT 7
6533: GREATER
6534: IFFALSE 6551
// ComMoveXY ( i , 102 , 40 ) ;
6536: LD_VAR 0 1
6540: PPUSH
6541: LD_INT 102
6543: PPUSH
6544: LD_INT 40
6546: PPUSH
6547: CALL_OW 111
6551: GO 6513
6553: POP
6554: POP
// repeat wait ( 0 0$1 ) ;
6555: LD_INT 35
6557: PPUSH
6558: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 6 ;
6562: LD_EXP 23
6566: PPUSH
6567: LD_EXP 27
6571: PPUSH
6572: CALL_OW 296
6576: PUSH
6577: LD_INT 6
6579: LESS
6580: IFFALSE 6555
// ComTurnUnit ( Heike , Aviradze ) ;
6582: LD_EXP 23
6586: PPUSH
6587: LD_EXP 27
6591: PPUSH
6592: CALL_OW 119
// ComTurnUnit ( [ Aviradze , Sophia , Kaia ] , Heike ) ;
6596: LD_EXP 27
6600: PUSH
6601: LD_EXP 29
6605: PUSH
6606: LD_EXP 28
6610: PUSH
6611: EMPTY
6612: LIST
6613: LIST
6614: LIST
6615: PPUSH
6616: LD_EXP 23
6620: PPUSH
6621: CALL_OW 119
// if pepAmount > 1 then
6625: LD_VAR 0 2
6629: PUSH
6630: LD_INT 1
6632: GREATER
6633: IFFALSE 6685
// begin wait ( 0 0$2 ) ;
6635: LD_INT 70
6637: PPUSH
6638: CALL_OW 67
// ComTurnUnit ( [ Kamil , Mike , Givi ] , Aviradze ) ;
6642: LD_EXP 26
6646: PUSH
6647: LD_EXP 25
6651: PUSH
6652: LD_EXP 24
6656: PUSH
6657: EMPTY
6658: LIST
6659: LIST
6660: LIST
6661: PPUSH
6662: LD_EXP 27
6666: PPUSH
6667: CALL_OW 119
// Say ( Heike , DH-2-spot ) ;
6671: LD_EXP 23
6675: PPUSH
6676: LD_STRING DH-2-spot
6678: PPUSH
6679: CALL_OW 88
// end else
6683: GO 6697
// Say ( Heike , DH-2-spot-d ) ;
6685: LD_EXP 23
6689: PPUSH
6690: LD_STRING DH-2-spot-d
6692: PPUSH
6693: CALL_OW 88
// Say ( Aviradze , DA-2-spot ) ;
6697: LD_EXP 27
6701: PPUSH
6702: LD_STRING DA-2-spot
6704: PPUSH
6705: CALL_OW 88
// Say ( Heike , DH-3-spot ) ;
6709: LD_EXP 23
6713: PPUSH
6714: LD_STRING DH-3-spot
6716: PPUSH
6717: CALL_OW 88
// ComMoveUnit ( Kaia , Heike ) ;
6721: LD_EXP 28
6725: PPUSH
6726: LD_EXP 23
6730: PPUSH
6731: CALL_OW 112
// ComTurnUnit ( Heike , Kaia ) ;
6735: LD_EXP 23
6739: PPUSH
6740: LD_EXP 28
6744: PPUSH
6745: CALL_OW 119
// wait ( 0 0$0.3 ) ;
6749: LD_INT 10
6751: PPUSH
6752: CALL_OW 67
// Say ( Kaia , DK-3-spot ) ;
6756: LD_EXP 28
6760: PPUSH
6761: LD_STRING DK-3-spot
6763: PPUSH
6764: CALL_OW 88
// ComTurnUnit ( Kaia , Heike ) ;
6768: LD_EXP 28
6772: PPUSH
6773: LD_EXP 23
6777: PPUSH
6778: CALL_OW 119
// Say ( Heike , DH-4-spot ) ;
6782: LD_EXP 23
6786: PPUSH
6787: LD_STRING DH-4-spot
6789: PPUSH
6790: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6794: LD_INT 10
6796: PPUSH
6797: CALL_OW 67
// ComTurnUnit ( Heike , Aviradze ) ;
6801: LD_EXP 23
6805: PPUSH
6806: LD_EXP 27
6810: PPUSH
6811: CALL_OW 119
// Say ( Aviradze , DA-4-spot ) ;
6815: LD_EXP 27
6819: PPUSH
6820: LD_STRING DA-4-spot
6822: PPUSH
6823: CALL_OW 88
// ComTurnUnit ( Kaia , Aviradze ) ;
6827: LD_EXP 28
6831: PPUSH
6832: LD_EXP 27
6836: PPUSH
6837: CALL_OW 119
// Say ( Kaia , DK-4-spot ) ;
6841: LD_EXP 28
6845: PPUSH
6846: LD_STRING DK-4-spot
6848: PPUSH
6849: CALL_OW 88
// ComTurnUnit ( Aviradze , Kaia ) ;
6853: LD_EXP 27
6857: PPUSH
6858: LD_EXP 28
6862: PPUSH
6863: CALL_OW 119
// Say ( Aviradze , DA-5-spot ) ;
6867: LD_EXP 27
6871: PPUSH
6872: LD_STRING DA-5-spot
6874: PPUSH
6875: CALL_OW 88
// Say ( Kaia , DK-5-spot ) ;
6879: LD_EXP 28
6883: PPUSH
6884: LD_STRING DK-5-spot
6886: PPUSH
6887: CALL_OW 88
// if pepAmount = 1 then
6891: LD_VAR 0 2
6895: PUSH
6896: LD_INT 1
6898: EQUAL
6899: IFFALSE 6913
// Say ( Heike , DH-5-spot-f ) ;
6901: LD_EXP 23
6905: PPUSH
6906: LD_STRING DH-5-spot-f
6908: PPUSH
6909: CALL_OW 88
// if pepAmount < 3 then
6913: LD_VAR 0 2
6917: PUSH
6918: LD_INT 3
6920: LESS
6921: IFFALSE 6937
// Say ( Aviradze , DA-6-spot-f ) else
6923: LD_EXP 27
6927: PPUSH
6928: LD_STRING DA-6-spot-f
6930: PPUSH
6931: CALL_OW 88
6935: GO 6973
// if pepAmount < 4 then
6937: LD_VAR 0 2
6941: PUSH
6942: LD_INT 4
6944: LESS
6945: IFFALSE 6961
// Say ( Aviradze , DA-6-spot-c ) else
6947: LD_EXP 27
6951: PPUSH
6952: LD_STRING DA-6-spot-c
6954: PPUSH
6955: CALL_OW 88
6959: GO 6973
// Say ( Aviradze , DA-6-spot ) ;
6961: LD_EXP 27
6965: PPUSH
6966: LD_STRING DA-6-spot
6968: PPUSH
6969: CALL_OW 88
// if Kamil then
6973: LD_EXP 26
6977: IFFALSE 6991
// Say ( Kamil , DKam-6-spot ) ;
6979: LD_EXP 26
6983: PPUSH
6984: LD_STRING DKam-6-spot
6986: PPUSH
6987: CALL_OW 88
// Say ( Kaia , DK-6-spot ) ;
6991: LD_EXP 28
6995: PPUSH
6996: LD_STRING DK-6-spot
6998: PPUSH
6999: CALL_OW 88
// ComTurnUnit ( Aviradze , Heike ) ;
7003: LD_EXP 27
7007: PPUSH
7008: LD_EXP 23
7012: PPUSH
7013: CALL_OW 119
// Say ( Aviradze , DA-7-spot ) ;
7017: LD_EXP 27
7021: PPUSH
7022: LD_STRING DA-7-spot
7024: PPUSH
7025: CALL_OW 88
// Say ( Heike , DH-7-spot ) ;
7029: LD_EXP 23
7033: PPUSH
7034: LD_STRING DH-7-spot
7036: PPUSH
7037: CALL_OW 88
// if sciCounterKill >= 3 then
7041: LD_EXP 9
7045: PUSH
7046: LD_INT 3
7048: GREATEREQUAL
7049: IFFALSE 7075
// begin Say ( Heike , DH-7-spot-a ) ;
7051: LD_EXP 23
7055: PPUSH
7056: LD_STRING DH-7-spot-a
7058: PPUSH
7059: CALL_OW 88
// Say ( Aviradze , DA-8-spot-a ) ;
7063: LD_EXP 27
7067: PPUSH
7068: LD_STRING DA-8-spot-a
7070: PPUSH
7071: CALL_OW 88
// end ; InGameOff ;
7075: CALL_OW 9
// if sciCounterKill < 3 then
7079: LD_EXP 9
7083: PUSH
7084: LD_INT 3
7086: LESS
7087: IFFALSE 7146
// begin SetSide ( Kaia , 2 ) ;
7089: LD_EXP 28
7093: PPUSH
7094: LD_INT 2
7096: PPUSH
7097: CALL_OW 235
// ComFree ( Kaia ) ;
7101: LD_EXP 28
7105: PPUSH
7106: CALL_OW 139
// if Kamil then
7110: LD_EXP 26
7114: IFFALSE 7137
// begin ComHold ( Kamil ) ;
7116: LD_EXP 26
7120: PPUSH
7121: CALL_OW 140
// SetSide ( Kamil , 5 ) ;
7125: LD_EXP 26
7129: PPUSH
7130: LD_INT 5
7132: PPUSH
7133: CALL_OW 235
// end ; ChangeMissionObjectives ( OSci ) ;
7137: LD_STRING OSci
7139: PPUSH
7140: CALL_OW 337
// end else
7144: GO 7208
// begin aviradzeQuestDone := true ;
7146: LD_ADDR_EXP 8
7150: PUSH
7151: LD_INT 1
7153: ST_TO_ADDR
// attackDeltaAllowed := true ;
7154: LD_ADDR_EXP 14
7158: PUSH
7159: LD_INT 1
7161: ST_TO_ADDR
// ChangeMissionObjectives ( ODelta2 ) ;
7162: LD_STRING ODelta2
7164: PPUSH
7165: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
7169: LD_ADDR_VAR 0 1
7173: PUSH
7174: LD_INT 22
7176: PUSH
7177: LD_INT 5
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PPUSH
7184: CALL_OW 69
7188: PUSH
7189: FOR_IN
7190: IFFALSE 7206
// SetSide ( i , 2 ) ;
7192: LD_VAR 0 1
7196: PPUSH
7197: LD_INT 2
7199: PPUSH
7200: CALL_OW 235
7204: GO 7189
7206: POP
7207: POP
// end ; end ;
7208: PPOPN 2
7210: END
// every 0 0$1 trigger not sciSpotted and GetDistUnits ( NearestUnitToUnit ( usSci , Heike ) , Heike ) < 8 and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and not aviradzeSpotted do
7211: LD_EXP 7
7215: NOT
7216: PUSH
7217: LD_EXP 22
7221: PPUSH
7222: LD_EXP 23
7226: PPUSH
7227: CALL_OW 74
7231: PPUSH
7232: LD_EXP 23
7236: PPUSH
7237: CALL_OW 296
7241: PUSH
7242: LD_INT 8
7244: LESS
7245: AND
7246: PUSH
7247: LD_INT 2
7249: PPUSH
7250: LD_EXP 22
7254: PPUSH
7255: LD_EXP 23
7259: PPUSH
7260: CALL_OW 74
7264: PPUSH
7265: CALL_OW 292
7269: AND
7270: PUSH
7271: LD_INT 22
7273: PUSH
7274: LD_INT 2
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: PUSH
7281: LD_INT 21
7283: PUSH
7284: LD_INT 1
7286: PUSH
7287: EMPTY
7288: LIST
7289: LIST
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: PPUSH
7295: CALL_OW 69
7299: PUSH
7300: LD_INT 1
7302: GREATER
7303: AND
7304: PUSH
7305: LD_EXP 4
7309: NOT
7310: AND
7311: IFFALSE 7355
7313: GO 7315
7315: DISABLE
// begin sciSpotted := true ;
7316: LD_ADDR_EXP 7
7320: PUSH
7321: LD_INT 1
7323: ST_TO_ADDR
// CenterNowOnUnits ( NearestUnitToUnit ( usSci , Heike ) ) ;
7324: LD_EXP 22
7328: PPUSH
7329: LD_EXP 23
7333: PPUSH
7334: CALL_OW 74
7338: PPUSH
7339: CALL_OW 87
// Say ( Heike , DH-1-sci ) ;
7343: LD_EXP 23
7347: PPUSH
7348: LD_STRING DH-1-sci
7350: PPUSH
7351: CALL_OW 88
// end ;
7355: END
// every 0 0$1 trigger aviradzeSpotted and not sciSpotted and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and aviradzeSpotted and not aviradzeQuestDone do var un ;
7356: LD_EXP 4
7360: PUSH
7361: LD_EXP 7
7365: NOT
7366: AND
7367: PUSH
7368: LD_INT 2
7370: PPUSH
7371: LD_EXP 22
7375: PPUSH
7376: LD_EXP 23
7380: PPUSH
7381: CALL_OW 74
7385: PPUSH
7386: CALL_OW 292
7390: AND
7391: PUSH
7392: LD_INT 22
7394: PUSH
7395: LD_INT 2
7397: PUSH
7398: EMPTY
7399: LIST
7400: LIST
7401: PUSH
7402: LD_INT 21
7404: PUSH
7405: LD_INT 1
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: PPUSH
7416: CALL_OW 69
7420: PUSH
7421: LD_INT 1
7423: GREATER
7424: AND
7425: PUSH
7426: LD_EXP 4
7430: AND
7431: PUSH
7432: LD_EXP 8
7436: NOT
7437: AND
7438: IFFALSE 7579
7440: GO 7442
7442: DISABLE
7443: LD_INT 0
7445: PPUSH
// begin sciSpotted := true ;
7446: LD_ADDR_EXP 7
7450: PUSH
7451: LD_INT 1
7453: ST_TO_ADDR
// un := NearestUnitToUnit ( usSci , Heike ) ;
7454: LD_ADDR_VAR 0 1
7458: PUSH
7459: LD_EXP 22
7463: PPUSH
7464: LD_EXP 23
7468: PPUSH
7469: CALL_OW 74
7473: ST_TO_ADDR
// DialogueOn ;
7474: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 2 , - 3 ) ;
7478: LD_VAR 0 1
7482: PPUSH
7483: CALL_OW 250
7487: PPUSH
7488: LD_VAR 0 1
7492: PPUSH
7493: CALL_OW 251
7497: PPUSH
7498: LD_INT 2
7500: PPUSH
7501: LD_INT 3
7503: NEG
7504: PPUSH
7505: CALL_OW 330
// CenterNowOnUnits ( un ) ;
7509: LD_VAR 0 1
7513: PPUSH
7514: CALL_OW 87
// Say ( Heike , DH-1-sci-a ) ;
7518: LD_EXP 23
7522: PPUSH
7523: LD_STRING DH-1-sci-a
7525: PPUSH
7526: CALL_OW 88
// if Mike then
7530: LD_EXP 25
7534: IFFALSE 7548
// Say ( Mike , DM-1-sci-a ) ;
7536: LD_EXP 25
7540: PPUSH
7541: LD_STRING DM-1-sci-a
7543: PPUSH
7544: CALL_OW 88
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 2 ) ;
7548: LD_VAR 0 1
7552: PPUSH
7553: CALL_OW 250
7557: PPUSH
7558: LD_VAR 0 1
7562: PPUSH
7563: CALL_OW 251
7567: PPUSH
7568: LD_INT 2
7570: PPUSH
7571: CALL_OW 331
// DialogueOff ;
7575: CALL_OW 7
// end ;
7579: PPOPN 1
7581: END
// every 0 0$1 trigger usAlert and ( GetLives ( Gladstone ) < 1000 or GetLives ( usLab ) < 999 ) do var veh ;
7582: LD_EXP 10
7586: PUSH
7587: LD_EXP 19
7591: PPUSH
7592: CALL_OW 256
7596: PUSH
7597: LD_INT 1000
7599: LESS
7600: PUSH
7601: LD_INT 3
7603: PPUSH
7604: CALL_OW 256
7608: PUSH
7609: LD_INT 999
7611: LESS
7612: OR
7613: AND
7614: IFFALSE 7870
7616: GO 7618
7618: DISABLE
7619: LD_INT 0
7621: PPUSH
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
7622: LD_ADDR_VAR 0 1
7626: PUSH
7627: LD_INT 22
7629: PUSH
7630: LD_INT 1
7632: PUSH
7633: EMPTY
7634: LIST
7635: LIST
7636: PUSH
7637: LD_INT 21
7639: PUSH
7640: LD_INT 2
7642: PUSH
7643: EMPTY
7644: LIST
7645: LIST
7646: PUSH
7647: LD_INT 58
7649: PUSH
7650: EMPTY
7651: LIST
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: LIST
7657: PPUSH
7658: CALL_OW 69
7662: ST_TO_ADDR
// if veh and IsOk ( Gladstone ) then
7663: LD_VAR 0 1
7667: PUSH
7668: LD_EXP 19
7672: PPUSH
7673: CALL_OW 302
7677: AND
7678: IFFALSE 7720
// begin if IsInUnit ( Gladstone ) then
7680: LD_EXP 19
7684: PPUSH
7685: CALL_OW 310
7689: IFFALSE 7700
// ComExitBuilding ( Gladstone ) ;
7691: LD_EXP 19
7695: PPUSH
7696: CALL_OW 122
// AddComEnterUnit ( Gladstone , veh [ 1 ] ) ;
7700: LD_EXP 19
7704: PPUSH
7705: LD_VAR 0 1
7709: PUSH
7710: LD_INT 1
7712: ARRAY
7713: PPUSH
7714: CALL_OW 180
// end else
7718: GO 7740
// if IsInUnit ( Gladstone ) then
7720: LD_EXP 19
7724: PPUSH
7725: CALL_OW 310
7729: IFFALSE 7740
// ComExitBuilding ( Gladstone ) ;
7731: LD_EXP 19
7735: PPUSH
7736: CALL_OW 122
// AddComMoveXY ( Gladstone , 27 , 51 ) ;
7740: LD_EXP 19
7744: PPUSH
7745: LD_INT 27
7747: PPUSH
7748: LD_INT 51
7750: PPUSH
7751: CALL_OW 171
// Say ( Gladstone , D8-Glad-2 ) ;
7755: LD_EXP 19
7759: PPUSH
7760: LD_STRING D8-Glad-2
7762: PPUSH
7763: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7767: LD_INT 35
7769: PPUSH
7770: CALL_OW 67
// until IsAt ( Gladstone , 27 , 51 ) or IsAt ( IsInUnit ( Gladstone ) , 27 , 51 ) or IsDead ( Gladstone ) ;
7774: LD_EXP 19
7778: PPUSH
7779: LD_INT 27
7781: PPUSH
7782: LD_INT 51
7784: PPUSH
7785: CALL_OW 307
7789: PUSH
7790: LD_EXP 19
7794: PPUSH
7795: CALL_OW 310
7799: PPUSH
7800: LD_INT 27
7802: PPUSH
7803: LD_INT 51
7805: PPUSH
7806: CALL_OW 307
7810: OR
7811: PUSH
7812: LD_EXP 19
7816: PPUSH
7817: CALL_OW 301
7821: OR
7822: IFFALSE 7767
// if IsDead ( Gladstone ) then
7824: LD_EXP 19
7828: PPUSH
7829: CALL_OW 301
7833: IFFALSE 7837
// exit ;
7835: GO 7870
// RemoveUnit ( HexInfo ( 27 , 51 ) ) ;
7837: LD_INT 27
7839: PPUSH
7840: LD_INT 51
7842: PPUSH
7843: CALL_OW 428
7847: PPUSH
7848: CALL_OW 64
// gladstoneEscaped := true ;
7852: LD_ADDR_EXP 12
7856: PUSH
7857: LD_INT 1
7859: ST_TO_ADDR
// SaveVariable ( true , 02_GladstoneEscaped ) ;
7860: LD_INT 1
7862: PPUSH
7863: LD_STRING 02_GladstoneEscaped
7865: PPUSH
7866: CALL_OW 39
// end ;
7870: PPOPN 1
7872: END
// every 0 0$1 trigger aviradzeSpotted and ( sciCounterKill >= 3 or not usSci ) and not aviradzeQuestDone do
7873: LD_EXP 4
7877: PUSH
7878: LD_EXP 9
7882: PUSH
7883: LD_INT 3
7885: GREATEREQUAL
7886: PUSH
7887: LD_EXP 22
7891: NOT
7892: OR
7893: AND
7894: PUSH
7895: LD_EXP 8
7899: NOT
7900: AND
7901: IFFALSE 7944
7903: GO 7905
7905: DISABLE
// begin aviradzeQuestDone := true ;
7906: LD_ADDR_EXP 8
7910: PUSH
7911: LD_INT 1
7913: ST_TO_ADDR
// Say ( Heike , DH-1-quest-done ) ;
7914: LD_EXP 23
7918: PPUSH
7919: LD_STRING DH-1-quest-done
7921: PPUSH
7922: CALL_OW 88
// if Givi then
7926: LD_EXP 24
7930: IFFALSE 7944
// Say ( Givi , DG-1-quest-done ) ;
7932: LD_EXP 24
7936: PPUSH
7937: LD_STRING DG-1-quest-done
7939: PPUSH
7940: CALL_OW 88
// end ;
7944: END
// every 0 0$1 trigger See ( 5 , Heike ) and GetDistUnits ( Heike , Aviradze ) < 6 and aviradzeQuestDone and not attackDeltaAllowed do var i ;
7945: LD_INT 5
7947: PPUSH
7948: LD_EXP 23
7952: PPUSH
7953: CALL_OW 292
7957: PUSH
7958: LD_EXP 23
7962: PPUSH
7963: LD_EXP 27
7967: PPUSH
7968: CALL_OW 296
7972: PUSH
7973: LD_INT 6
7975: LESS
7976: AND
7977: PUSH
7978: LD_EXP 8
7982: AND
7983: PUSH
7984: LD_EXP 14
7988: NOT
7989: AND
7990: IFFALSE 8128
7992: GO 7994
7994: DISABLE
7995: LD_INT 0
7997: PPUSH
// begin attackDeltaAllowed := true ;
7998: LD_ADDR_EXP 14
8002: PUSH
8003: LD_INT 1
8005: ST_TO_ADDR
// InGameOn ;
8006: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
8010: LD_EXP 23
8014: PPUSH
8015: CALL_OW 87
// wait ( 0 0$0.3 ) ;
8019: LD_INT 10
8021: PPUSH
8022: CALL_OW 67
// ComTurnUnit ( Aviradze , Heike ) ;
8026: LD_EXP 27
8030: PPUSH
8031: LD_EXP 23
8035: PPUSH
8036: CALL_OW 119
// ComTurnUnit ( Heike , Aviradze ) ;
8040: LD_EXP 23
8044: PPUSH
8045: LD_EXP 27
8049: PPUSH
8050: CALL_OW 119
// Say ( Heike , DH-1-return ) ;
8054: LD_EXP 23
8058: PPUSH
8059: LD_STRING DH-1-return
8061: PPUSH
8062: CALL_OW 88
// Say ( Aviradze , DA-1-return ) ;
8066: LD_EXP 27
8070: PPUSH
8071: LD_STRING DA-1-return
8073: PPUSH
8074: CALL_OW 88
// InGameOff ;
8078: CALL_OW 9
// ChangeMissionObjectives ( ODelta ) ;
8082: LD_STRING ODelta
8084: PPUSH
8085: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
8089: LD_ADDR_VAR 0 1
8093: PUSH
8094: LD_INT 22
8096: PUSH
8097: LD_INT 5
8099: PUSH
8100: EMPTY
8101: LIST
8102: LIST
8103: PPUSH
8104: CALL_OW 69
8108: PUSH
8109: FOR_IN
8110: IFFALSE 8126
// SetSide ( i , 2 ) ;
8112: LD_VAR 0 1
8116: PPUSH
8117: LD_INT 2
8119: PPUSH
8120: CALL_OW 235
8124: GO 8109
8126: POP
8127: POP
// end ;
8128: PPOPN 1
8130: END
// every 0 0$1 trigger usAlert and not attackDeltaAllowed do
8131: LD_EXP 10
8135: PUSH
8136: LD_EXP 14
8140: NOT
8141: AND
8142: IFFALSE 8155
8144: GO 8146
8146: DISABLE
// spottedBeforeRadio := true ;
8147: LD_ADDR_EXP 6
8151: PUSH
8152: LD_INT 1
8154: ST_TO_ADDR
8155: END
// every 0 0$1 trigger attackDeltaAllowed and IsOk ( Markov ) and GetSide ( Delta ) = 1 and IsOk ( Lynch ) and not usAlert do var i , k , tmp ;
8156: LD_EXP 14
8160: PUSH
8161: LD_EXP 30
8165: PPUSH
8166: CALL_OW 302
8170: AND
8171: PUSH
8172: LD_INT 1
8174: PPUSH
8175: CALL_OW 255
8179: PUSH
8180: LD_INT 1
8182: EQUAL
8183: AND
8184: PUSH
8185: LD_EXP 20
8189: PPUSH
8190: CALL_OW 302
8194: AND
8195: PUSH
8196: LD_EXP 10
8200: NOT
8201: AND
8202: IFFALSE 9418
8204: GO 8206
8206: DISABLE
8207: LD_INT 0
8209: PPUSH
8210: PPUSH
8211: PPUSH
// begin trap := 0 ;
8212: LD_ADDR_EXP 17
8216: PUSH
8217: LD_INT 0
8219: ST_TO_ADDR
// wait ( 0 0$12 ) ;
8220: LD_INT 420
8222: PPUSH
8223: CALL_OW 67
// DialogueOn ;
8227: CALL_OW 6
// Say ( Markov , DMar-1-radio ) ;
8231: LD_EXP 30
8235: PPUSH
8236: LD_STRING DMar-1-radio
8238: PPUSH
8239: CALL_OW 88
// Say ( Heike , DH-1-radio ) ;
8243: LD_EXP 23
8247: PPUSH
8248: LD_STRING DH-1-radio
8250: PPUSH
8251: CALL_OW 88
// Say ( Markov , DMar-2-radio ) ;
8255: LD_EXP 30
8259: PPUSH
8260: LD_STRING DMar-2-radio
8262: PPUSH
8263: CALL_OW 88
// Say ( Heike , DH-2-radio ) ;
8267: LD_EXP 23
8271: PPUSH
8272: LD_STRING DH-2-radio
8274: PPUSH
8275: CALL_OW 88
// if IsOk ( Kamil ) or IsOk ( Sophia ) then
8279: LD_EXP 26
8283: PPUSH
8284: CALL_OW 302
8288: PUSH
8289: LD_EXP 29
8293: PPUSH
8294: CALL_OW 302
8298: OR
8299: IFFALSE 9418
// begin case Query ( Q1Trap ) of 1 :
8301: LD_STRING Q1Trap
8303: PPUSH
8304: CALL_OW 97
8308: PUSH
8309: LD_INT 1
8311: DOUBLE
8312: EQUAL
8313: IFTRUE 8317
8315: GO 8511
8317: POP
// begin if IsOk ( Kamil ) then
8318: LD_EXP 26
8322: PPUSH
8323: CALL_OW 302
8327: IFFALSE 8406
// begin Say ( Kamil , DKam-2-radio ) ;
8329: LD_EXP 26
8333: PPUSH
8334: LD_STRING DKam-2-radio
8336: PPUSH
8337: CALL_OW 88
// Say ( Kamil , DKam-3-radio ) ;
8341: LD_EXP 26
8345: PPUSH
8346: LD_STRING DKam-3-radio
8348: PPUSH
8349: CALL_OW 88
// SayRadio ( Lynch , DDelta-3-radio ) ;
8353: LD_EXP 20
8357: PPUSH
8358: LD_STRING DDelta-3-radio
8360: PPUSH
8361: CALL_OW 94
// dwait ( 0 0$01 ) ;
8365: LD_INT 35
8367: PPUSH
8368: CALL_OW 68
// Say ( Heike , DH-3-radio ) ;
8372: LD_EXP 23
8376: PPUSH
8377: LD_STRING DH-3-radio
8379: PPUSH
8380: CALL_OW 88
// Say ( Kamil , DKam-4-radio ) ;
8384: LD_EXP 26
8388: PPUSH
8389: LD_STRING DKam-4-radio
8391: PPUSH
8392: CALL_OW 88
// trap := 1 ;
8396: LD_ADDR_EXP 17
8400: PUSH
8401: LD_INT 1
8403: ST_TO_ADDR
// end else
8404: GO 8505
// begin Say ( Sophia , DS-1-radio ) ;
8406: LD_EXP 29
8410: PPUSH
8411: LD_STRING DS-1-radio
8413: PPUSH
8414: CALL_OW 88
// Say ( Sophia , DS-2-radio ) ;
8418: LD_EXP 29
8422: PPUSH
8423: LD_STRING DS-2-radio
8425: PPUSH
8426: CALL_OW 88
// SayRadio ( Lynch , DDelta-2-radio-s ) ;
8430: LD_EXP 20
8434: PPUSH
8435: LD_STRING DDelta-2-radio-s
8437: PPUSH
8438: CALL_OW 94
// Say ( Sophia , DS-3-radio ) ;
8442: LD_EXP 29
8446: PPUSH
8447: LD_STRING DS-3-radio
8449: PPUSH
8450: CALL_OW 88
// SayRadio ( Lynch , DDelta-3-radio-s ) ;
8454: LD_EXP 20
8458: PPUSH
8459: LD_STRING DDelta-3-radio-s
8461: PPUSH
8462: CALL_OW 94
// Say ( Sophia , DS-4-radio-s ) ;
8466: LD_EXP 29
8470: PPUSH
8471: LD_STRING DS-4-radio-s
8473: PPUSH
8474: CALL_OW 88
// dwait ( 0 0$01 ) ;
8478: LD_INT 35
8480: PPUSH
8481: CALL_OW 68
// Say ( Heike , DH-1-trap ) ;
8485: LD_EXP 23
8489: PPUSH
8490: LD_STRING DH-1-trap
8492: PPUSH
8493: CALL_OW 88
// trap := 0 ;
8497: LD_ADDR_EXP 17
8501: PUSH
8502: LD_INT 0
8504: ST_TO_ADDR
// end ; DialogueOff ;
8505: CALL_OW 7
// end ; 2 :
8509: GO 8529
8511: LD_INT 2
8513: DOUBLE
8514: EQUAL
8515: IFTRUE 8519
8517: GO 8528
8519: POP
// begin DialogueOff ;
8520: CALL_OW 7
// exit ;
8524: GO 9418
// end ; end ;
8526: GO 8529
8528: POP
// if trap = 1 then
8529: LD_EXP 17
8533: PUSH
8534: LD_INT 1
8536: EQUAL
8537: IFFALSE 8989
// begin PlaceSeeing ( 64 , 32 , 2 , 8 ) ;
8539: LD_INT 64
8541: PPUSH
8542: LD_INT 32
8544: PPUSH
8545: LD_INT 2
8547: PPUSH
8548: LD_INT 8
8550: PPUSH
8551: CALL_OW 330
// CenterOnXY ( 64 , 32 ) ;
8555: LD_INT 64
8557: PPUSH
8558: LD_INT 32
8560: PPUSH
8561: CALL_OW 84
// tmp := [ ] ;
8565: LD_ADDR_VAR 0 3
8569: PUSH
8570: EMPTY
8571: ST_TO_ADDR
// k := 3 ;
8572: LD_ADDR_VAR 0 2
8576: PUSH
8577: LD_INT 3
8579: ST_TO_ADDR
// if usForces < 3 then
8580: LD_EXP 21
8584: PUSH
8585: LD_INT 3
8587: LESS
8588: IFFALSE 8600
// k := usForces ;
8590: LD_ADDR_VAR 0 2
8594: PUSH
8595: LD_EXP 21
8599: ST_TO_ADDR
// for i := 1 to k do
8600: LD_ADDR_VAR 0 1
8604: PUSH
8605: DOUBLE
8606: LD_INT 1
8608: DEC
8609: ST_TO_ADDR
8610: LD_VAR 0 2
8614: PUSH
8615: FOR_TO
8616: IFFALSE 8671
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
8618: LD_ADDR_VAR 0 3
8622: PUSH
8623: LD_VAR 0 3
8627: PPUSH
8628: LD_VAR 0 3
8632: PUSH
8633: LD_INT 1
8635: PLUS
8636: PPUSH
8637: LD_EXP 21
8641: PUSH
8642: LD_INT 1
8644: ARRAY
8645: PPUSH
8646: CALL_OW 1
8650: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
8651: LD_ADDR_EXP 21
8655: PUSH
8656: LD_EXP 21
8660: PPUSH
8661: LD_INT 1
8663: PPUSH
8664: CALL_OW 3
8668: ST_TO_ADDR
// end ;
8669: GO 8615
8671: POP
8672: POP
// usPatrol := tmp ;
8673: LD_ADDR_EXP 16
8677: PUSH
8678: LD_VAR 0 3
8682: ST_TO_ADDR
// for i in tmp do
8683: LD_ADDR_VAR 0 1
8687: PUSH
8688: LD_VAR 0 3
8692: PUSH
8693: FOR_IN
8694: IFFALSE 8824
// begin if IsInUnit ( i ) then
8696: LD_VAR 0 1
8700: PPUSH
8701: CALL_OW 310
8705: IFFALSE 8716
// ComExitBuilding ( i ) ;
8707: LD_VAR 0 1
8711: PPUSH
8712: CALL_OW 122
// AddComAgressiveMove ( i , 63 , 31 ) ;
8716: LD_VAR 0 1
8720: PPUSH
8721: LD_INT 63
8723: PPUSH
8724: LD_INT 31
8726: PPUSH
8727: CALL_OW 174
// AddComWait ( i , 0 0$2 ) ;
8731: LD_VAR 0 1
8735: PPUSH
8736: LD_INT 70
8738: PPUSH
8739: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 43 ) ;
8743: LD_VAR 0 1
8747: PPUSH
8748: LD_INT 103
8750: PPUSH
8751: LD_INT 43
8753: PPUSH
8754: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
8758: LD_VAR 0 1
8762: PPUSH
8763: LD_INT 105
8765: PPUSH
8766: CALL_OW 202
// if Difficulty > 1 then
8770: LD_OWVAR 67
8774: PUSH
8775: LD_INT 1
8777: GREATER
8778: IFFALSE 8795
// AddComAgressiveMove ( i , 114 , 69 ) ;
8780: LD_VAR 0 1
8784: PPUSH
8785: LD_INT 114
8787: PPUSH
8788: LD_INT 69
8790: PPUSH
8791: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
8795: LD_VAR 0 1
8799: PPUSH
8800: LD_INT 105
8802: PPUSH
8803: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
8807: LD_VAR 0 1
8811: PPUSH
8812: LD_INT 42
8814: PPUSH
8815: LD_INT 20
8817: PPUSH
8818: CALL_OW 174
// end ;
8822: GO 8693
8824: POP
8825: POP
// wait ( 0 0$8 ) ;
8826: LD_INT 280
8828: PPUSH
8829: CALL_OW 67
// RemoveSeeing ( 64 , 32 , 2 ) ;
8833: LD_INT 64
8835: PPUSH
8836: LD_INT 32
8838: PPUSH
8839: LD_INT 2
8841: PPUSH
8842: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
8846: LD_INT 35
8848: PPUSH
8849: CALL_OW 67
// for i in tmp do
8853: LD_ADDR_VAR 0 1
8857: PUSH
8858: LD_VAR 0 3
8862: PUSH
8863: FOR_IN
8864: IFFALSE 8895
// if IsDead ( i ) then
8866: LD_VAR 0 1
8870: PPUSH
8871: CALL_OW 301
8875: IFFALSE 8893
// tmp := tmp diff i ;
8877: LD_ADDR_VAR 0 3
8881: PUSH
8882: LD_VAR 0 3
8886: PUSH
8887: LD_VAR 0 1
8891: DIFF
8892: ST_TO_ADDR
8893: GO 8863
8895: POP
8896: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
8897: LD_VAR 0 3
8901: NOT
8902: PUSH
8903: LD_VAR 0 3
8907: PPUSH
8908: LD_INT 95
8910: PUSH
8911: LD_INT 7
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: PUSH
8918: LD_INT 3
8920: PUSH
8921: LD_INT 60
8923: PUSH
8924: EMPTY
8925: LIST
8926: PUSH
8927: EMPTY
8928: LIST
8929: LIST
8930: PUSH
8931: EMPTY
8932: LIST
8933: LIST
8934: PPUSH
8935: CALL_OW 72
8939: PUSH
8940: LD_VAR 0 3
8944: EQUAL
8945: OR
8946: IFFALSE 8846
// if tmp then
8948: LD_VAR 0 3
8952: IFFALSE 8979
// begin usPatrol := [ ] ;
8954: LD_ADDR_EXP 16
8958: PUSH
8959: EMPTY
8960: ST_TO_ADDR
// usForces := usForces union tmp ;
8961: LD_ADDR_EXP 21
8965: PUSH
8966: LD_EXP 21
8970: PUSH
8971: LD_VAR 0 3
8975: UNION
8976: ST_TO_ADDR
// end else
8977: GO 8987
// trickyMove := true ;
8979: LD_ADDR_EXP 15
8983: PUSH
8984: LD_INT 1
8986: ST_TO_ADDR
// end else
8987: GO 9418
// begin tmp := [ ] ;
8989: LD_ADDR_VAR 0 3
8993: PUSH
8994: EMPTY
8995: ST_TO_ADDR
// k := 4 ;
8996: LD_ADDR_VAR 0 2
9000: PUSH
9001: LD_INT 4
9003: ST_TO_ADDR
// if usForces < 4 then
9004: LD_EXP 21
9008: PUSH
9009: LD_INT 4
9011: LESS
9012: IFFALSE 9024
// k := usForces ;
9014: LD_ADDR_VAR 0 2
9018: PUSH
9019: LD_EXP 21
9023: ST_TO_ADDR
// for i := 1 to k do
9024: LD_ADDR_VAR 0 1
9028: PUSH
9029: DOUBLE
9030: LD_INT 1
9032: DEC
9033: ST_TO_ADDR
9034: LD_VAR 0 2
9038: PUSH
9039: FOR_TO
9040: IFFALSE 9095
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
9042: LD_ADDR_VAR 0 3
9046: PUSH
9047: LD_VAR 0 3
9051: PPUSH
9052: LD_VAR 0 3
9056: PUSH
9057: LD_INT 1
9059: PLUS
9060: PPUSH
9061: LD_EXP 21
9065: PUSH
9066: LD_INT 1
9068: ARRAY
9069: PPUSH
9070: CALL_OW 1
9074: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
9075: LD_ADDR_EXP 21
9079: PUSH
9080: LD_EXP 21
9084: PPUSH
9085: LD_INT 1
9087: PPUSH
9088: CALL_OW 3
9092: ST_TO_ADDR
// end ;
9093: GO 9039
9095: POP
9096: POP
// if Lynch then
9097: LD_EXP 20
9101: IFFALSE 9119
// tmp := tmp ^ Lynch ;
9103: LD_ADDR_VAR 0 3
9107: PUSH
9108: LD_VAR 0 3
9112: PUSH
9113: LD_EXP 20
9117: ADD
9118: ST_TO_ADDR
// usPatrol := tmp ;
9119: LD_ADDR_EXP 16
9123: PUSH
9124: LD_VAR 0 3
9128: ST_TO_ADDR
// for i in tmp do
9129: LD_ADDR_VAR 0 1
9133: PUSH
9134: LD_VAR 0 3
9138: PUSH
9139: FOR_IN
9140: IFFALSE 9233
// begin if IsInUnit ( i ) then
9142: LD_VAR 0 1
9146: PPUSH
9147: CALL_OW 310
9151: IFFALSE 9162
// ComExitBuilding ( i ) ;
9153: LD_VAR 0 1
9157: PPUSH
9158: CALL_OW 122
// AddComAgressiveMove ( i , 69 , 15 ) ;
9162: LD_VAR 0 1
9166: PPUSH
9167: LD_INT 69
9169: PPUSH
9170: LD_INT 15
9172: PPUSH
9173: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9177: LD_VAR 0 1
9181: PPUSH
9182: LD_INT 700
9184: PPUSH
9185: CALL_OW 202
// AddComAgressiveMove ( i , 55 , 43 ) ;
9189: LD_VAR 0 1
9193: PPUSH
9194: LD_INT 55
9196: PPUSH
9197: LD_INT 43
9199: PPUSH
9200: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9204: LD_VAR 0 1
9208: PPUSH
9209: LD_INT 700
9211: PPUSH
9212: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9216: LD_VAR 0 1
9220: PPUSH
9221: LD_INT 42
9223: PPUSH
9224: LD_INT 20
9226: PPUSH
9227: CALL_OW 174
// end ;
9231: GO 9139
9233: POP
9234: POP
// repeat wait ( 0 0$1 ) ;
9235: LD_INT 35
9237: PPUSH
9238: CALL_OW 67
// for i in tmp do
9242: LD_ADDR_VAR 0 1
9246: PUSH
9247: LD_VAR 0 3
9251: PUSH
9252: FOR_IN
9253: IFFALSE 9284
// if IsDead ( i ) then
9255: LD_VAR 0 1
9259: PPUSH
9260: CALL_OW 301
9264: IFFALSE 9282
// tmp := tmp diff i ;
9266: LD_ADDR_VAR 0 3
9270: PUSH
9271: LD_VAR 0 3
9275: PUSH
9276: LD_VAR 0 1
9280: DIFF
9281: ST_TO_ADDR
9282: GO 9252
9284: POP
9285: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9286: LD_VAR 0 3
9290: NOT
9291: PUSH
9292: LD_VAR 0 3
9296: PPUSH
9297: LD_INT 95
9299: PUSH
9300: LD_INT 7
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: PUSH
9307: LD_INT 3
9309: PUSH
9310: LD_INT 60
9312: PUSH
9313: EMPTY
9314: LIST
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: PUSH
9320: EMPTY
9321: LIST
9322: LIST
9323: PPUSH
9324: CALL_OW 72
9328: PUSH
9329: LD_VAR 0 3
9333: EQUAL
9334: OR
9335: IFFALSE 9235
// if not tmp then
9337: LD_VAR 0 3
9341: NOT
9342: IFFALSE 9354
// trickyMove := true else
9344: LD_ADDR_EXP 15
9348: PUSH
9349: LD_INT 1
9351: ST_TO_ADDR
9352: GO 9361
// usPatrol := [ ] ;
9354: LD_ADDR_EXP 16
9358: PUSH
9359: EMPTY
9360: ST_TO_ADDR
// if tmp diff Lynch then
9361: LD_VAR 0 3
9365: PUSH
9366: LD_EXP 20
9370: DIFF
9371: IFFALSE 9395
// usForces := usForces union ( tmp diff Lynch ) ;
9373: LD_ADDR_EXP 21
9377: PUSH
9378: LD_EXP 21
9382: PUSH
9383: LD_VAR 0 3
9387: PUSH
9388: LD_EXP 20
9392: DIFF
9393: UNION
9394: ST_TO_ADDR
// if IsOk ( Lynch ) then
9395: LD_EXP 20
9399: PPUSH
9400: CALL_OW 302
9404: IFFALSE 9418
// ComEnterUnit ( Lynch , Delta ) ;
9406: LD_EXP 20
9410: PPUSH
9411: LD_INT 1
9413: PPUSH
9414: CALL_OW 120
// end ; end ; end ;
9418: PPOPN 3
9420: END
// every 0 0$1 trigger trickyMove do
9421: LD_EXP 15
9425: IFFALSE 9437
9427: GO 9429
9429: DISABLE
// SetAchievement ( ACH_TRAP ) ;
9430: LD_STRING ACH_TRAP
9432: PPUSH
9433: CALL_OW 543
9437: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ) do
9438: LD_INT 22
9440: PUSH
9441: LD_INT 2
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: PUSH
9448: LD_INT 23
9450: PUSH
9451: LD_INT 1
9453: PUSH
9454: EMPTY
9455: LIST
9456: LIST
9457: PUSH
9458: LD_INT 21
9460: PUSH
9461: LD_INT 2
9463: PUSH
9464: EMPTY
9465: LIST
9466: LIST
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: LIST
9472: PPUSH
9473: CALL_OW 69
9477: IFFALSE 9489
9479: GO 9481
9481: DISABLE
// SetAchievement ( ACH_SCRAP ) ;
9482: LD_STRING ACH_SCRAP
9484: PPUSH
9485: CALL_OW 543
9489: END
// every 0 0$1 trigger UnitFilter ( usPatrol , [ f_see , 2 ] ) and See ( 1 , Heike ) do
9490: LD_EXP 16
9494: PPUSH
9495: LD_INT 101
9497: PUSH
9498: LD_INT 2
9500: PUSH
9501: EMPTY
9502: LIST
9503: LIST
9504: PPUSH
9505: CALL_OW 72
9509: PUSH
9510: LD_INT 1
9512: PPUSH
9513: LD_EXP 23
9517: PPUSH
9518: CALL_OW 292
9522: AND
9523: IFFALSE 9656
9525: GO 9527
9527: DISABLE
// begin if not trap then
9528: LD_EXP 17
9532: NOT
9533: IFFALSE 9561
// begin Say ( Heike , DH-2-trap ) ;
9535: LD_EXP 23
9539: PPUSH
9540: LD_STRING DH-2-trap
9542: PPUSH
9543: CALL_OW 88
// Say ( Mike , DM-2-trap ) ;
9547: LD_EXP 25
9551: PPUSH
9552: LD_STRING DM-2-trap
9554: PPUSH
9555: CALL_OW 88
// end else
9559: GO 9573
// begin Say ( Heike , DH-1-trap-a ) ;
9561: LD_EXP 23
9565: PPUSH
9566: LD_STRING DH-1-trap-a
9568: PPUSH
9569: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
9573: LD_INT 35
9575: PPUSH
9576: CALL_OW 67
// until trickyMove ;
9580: LD_EXP 15
9584: IFFALSE 9573
// Say ( Heike , DH-3-trap ) ;
9586: LD_EXP 23
9590: PPUSH
9591: LD_STRING DH-3-trap
9593: PPUSH
9594: CALL_OW 88
// if IsOk ( Givi ) and IsOk ( Kaia ) then
9598: LD_EXP 24
9602: PPUSH
9603: CALL_OW 302
9607: PUSH
9608: LD_EXP 28
9612: PPUSH
9613: CALL_OW 302
9617: AND
9618: IFFALSE 9656
// begin Say ( Givi , DG-3-trap ) ;
9620: LD_EXP 24
9624: PPUSH
9625: LD_STRING DG-3-trap
9627: PPUSH
9628: CALL_OW 88
// Say ( Kaia , DK-3-trap ) ;
9632: LD_EXP 28
9636: PPUSH
9637: LD_STRING DK-3-trap
9639: PPUSH
9640: CALL_OW 88
// Say ( Givi , DG-4-trap ) ;
9644: LD_EXP 24
9648: PPUSH
9649: LD_STRING DG-4-trap
9651: PPUSH
9652: CALL_OW 88
// end ; end ;
9656: END
// every 0 0$1 trigger GetSide ( Delta ) = 2 and attackDeltaAllowed do var i , tmp ;
9657: LD_INT 1
9659: PPUSH
9660: CALL_OW 255
9664: PUSH
9665: LD_INT 2
9667: EQUAL
9668: PUSH
9669: LD_EXP 14
9673: AND
9674: IFFALSE 9833
9676: GO 9678
9678: DISABLE
9679: LD_INT 0
9681: PPUSH
9682: PPUSH
// begin if not IsOk ( Kaia ) then
9683: LD_EXP 28
9687: PPUSH
9688: CALL_OW 302
9692: NOT
9693: IFFALSE 9697
// exit ;
9695: GO 9833
// if tick < 5 5$00 then
9697: LD_OWVAR 1
9701: PUSH
9702: LD_INT 10500
9704: LESS
9705: IFFALSE 9714
// SetAchievement ( ACH_DELTA ) ;
9707: LD_STRING ACH_DELTA
9709: PPUSH
9710: CALL_OW 543
// Say ( Kaia , DK-1-capture ) ;
9714: LD_EXP 28
9718: PPUSH
9719: LD_STRING DK-1-capture
9721: PPUSH
9722: CALL_OW 88
// Say ( Heike , DH-1-capture ) ;
9726: LD_EXP 23
9730: PPUSH
9731: LD_STRING DH-1-capture
9733: PPUSH
9734: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
9738: LD_ADDR_VAR 0 2
9742: PUSH
9743: LD_INT 22
9745: PUSH
9746: LD_INT 1
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: PUSH
9753: LD_INT 25
9755: PUSH
9756: LD_INT 1
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: PPUSH
9767: CALL_OW 69
9771: ST_TO_ADDR
// if not tmp then
9772: LD_VAR 0 2
9776: NOT
9777: IFFALSE 9781
// exit ;
9779: GO 9833
// for i in tmp do
9781: LD_ADDR_VAR 0 1
9785: PUSH
9786: LD_VAR 0 2
9790: PUSH
9791: FOR_IN
9792: IFFALSE 9831
// begin if IsInUnit ( i ) then
9794: LD_VAR 0 1
9798: PPUSH
9799: CALL_OW 310
9803: IFFALSE 9814
// ComExitBuilding ( i ) ;
9805: LD_VAR 0 1
9809: PPUSH
9810: CALL_OW 122
// AddComAgressiveMove ( i , 38 , 23 ) ;
9814: LD_VAR 0 1
9818: PPUSH
9819: LD_INT 38
9821: PPUSH
9822: LD_INT 23
9824: PPUSH
9825: CALL_OW 174
// end ;
9829: GO 9791
9831: POP
9832: POP
// end ;
9833: PPOPN 2
9835: END
// every 0 0$1 trigger GetSide ( usLab ) = 2 and attackDeltaAllowed do
9836: LD_INT 3
9838: PPUSH
9839: CALL_OW 255
9843: PUSH
9844: LD_INT 2
9846: EQUAL
9847: PUSH
9848: LD_EXP 14
9852: AND
9853: IFFALSE 9885
9855: GO 9857
9857: DISABLE
// begin DialogueOn ;
9858: CALL_OW 6
// Say ( Aviradze , DA-1-capture ) ;
9862: LD_EXP 27
9866: PPUSH
9867: LD_STRING DA-1-capture
9869: PPUSH
9870: CALL_OW 88
// DialogueOff ;
9874: CALL_OW 7
// ChangeMissionObjectives ( OTame ) ;
9878: LD_STRING OTame
9880: PPUSH
9881: CALL_OW 337
// end ;
9885: END
// every 0 0$1 trigger GetTech ( tech_ApeLang , 2 ) = state_researched and attackDeltaAllowed do
9886: LD_INT 1
9888: PPUSH
9889: LD_INT 2
9891: PPUSH
9892: CALL_OW 321
9896: PUSH
9897: LD_INT 2
9899: EQUAL
9900: PUSH
9901: LD_EXP 14
9905: AND
9906: IFFALSE 10057
9908: GO 9910
9910: DISABLE
// begin DialogueOn ;
9911: CALL_OW 6
// Say ( Aviradze , DA-1-ape ) ;
9915: LD_EXP 27
9919: PPUSH
9920: LD_STRING DA-1-ape
9922: PPUSH
9923: CALL_OW 88
// Say ( Heike , DH-1-ape ) ;
9927: LD_EXP 23
9931: PPUSH
9932: LD_STRING DH-1-ape
9934: PPUSH
9935: CALL_OW 88
// Say ( Aviradze , DA-2-ape ) ;
9939: LD_EXP 27
9943: PPUSH
9944: LD_STRING DA-2-ape
9946: PPUSH
9947: CALL_OW 88
// Say ( Aviradze , DA-3-ape ) ;
9951: LD_EXP 27
9955: PPUSH
9956: LD_STRING DA-3-ape
9958: PPUSH
9959: CALL_OW 88
// Say ( Heike , DH-3-ape ) ;
9963: LD_EXP 23
9967: PPUSH
9968: LD_STRING DH-3-ape
9970: PPUSH
9971: CALL_OW 88
// DialogueOff ;
9975: CALL_OW 7
// if FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 then
9979: LD_INT 22
9981: PUSH
9982: LD_INT 0
9984: PUSH
9985: EMPTY
9986: LIST
9987: LIST
9988: PUSH
9989: LD_INT 25
9991: PUSH
9992: LD_INT 12
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: PPUSH
10003: CALL_OW 69
10007: PUSH
10008: LD_INT 0
10010: EQUAL
10011: IFFALSE 10023
// SpawnApeman ( forest , 2 ) ;
10013: LD_INT 1
10015: PPUSH
10016: LD_INT 2
10018: PPUSH
10019: CALL 405 0 2
// repeat wait ( 0 0$1 ) ;
10023: LD_INT 35
10025: PPUSH
10026: CALL_OW 67
// until FilterAllUnits ( [ f_class , class_apeman ] ) = 0 ;
10030: LD_INT 25
10032: PUSH
10033: LD_INT 12
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: PPUSH
10040: CALL_OW 69
10044: PUSH
10045: LD_INT 0
10047: EQUAL
10048: IFFALSE 10023
// YouLost ( Ape ) ;
10050: LD_STRING Ape
10052: PPUSH
10053: CALL_OW 104
// end ;
10057: END
// every 0 0$5 trigger lostCounter >= [ 3 , 2 , 2 ] [ Difficulty ] do
10058: LD_EXP 18
10062: PUSH
10063: LD_INT 3
10065: PUSH
10066: LD_INT 2
10068: PUSH
10069: LD_INT 2
10071: PUSH
10072: EMPTY
10073: LIST
10074: LIST
10075: LIST
10076: PUSH
10077: LD_OWVAR 67
10081: ARRAY
10082: GREATEREQUAL
10083: IFFALSE 10127
10085: GO 10087
10087: DISABLE
// begin DialogueOn ;
10088: CALL_OW 6
// Say ( Aviradze , DA-1-failure ) ;
10092: LD_EXP 27
10096: PPUSH
10097: LD_STRING DA-1-failure
10099: PPUSH
10100: CALL_OW 88
// Say ( Aviradze , DA-2-failure ) ;
10104: LD_EXP 27
10108: PPUSH
10109: LD_STRING DA-2-failure
10111: PPUSH
10112: CALL_OW 88
// YouLost ( Failure ) ;
10116: LD_STRING Failure
10118: PPUSH
10119: CALL_OW 104
// DialogueOff ;
10123: CALL_OW 7
// end ;
10127: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
10128: LD_EXP 28
10132: PPUSH
10133: CALL_OW 256
10137: PUSH
10138: LD_INT 3
10140: LESS
10141: IFFALSE 10274
10143: GO 10145
10145: DISABLE
// begin DialogueOn ;
10146: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
10150: LD_EXP 28
10154: PPUSH
10155: CALL_OW 87
// ForceSay ( Kaia , DK-Kaiaout-1 ) ;
10159: LD_EXP 28
10163: PPUSH
10164: LD_STRING DK-Kaiaout-1
10166: PPUSH
10167: CALL_OW 91
// Say ( Heike , DH-Kaiaout-2 ) ;
10171: LD_EXP 23
10175: PPUSH
10176: LD_STRING DH-Kaiaout-2
10178: PPUSH
10179: CALL_OW 88
// Say ( Givi , DG-Kaiaout-3 ) ;
10183: LD_EXP 24
10187: PPUSH
10188: LD_STRING DG-Kaiaout-3
10190: PPUSH
10191: CALL_OW 88
// Say ( Heike , DH-Kaiaout-4 ) ;
10195: LD_EXP 23
10199: PPUSH
10200: LD_STRING DH-Kaiaout-4
10202: PPUSH
10203: CALL_OW 88
// if Givi then
10207: LD_EXP 24
10211: IFFALSE 10261
// begin Say ( Givi , DG-Kaiaout-5 ) ;
10213: LD_EXP 24
10217: PPUSH
10218: LD_STRING DG-Kaiaout-5
10220: PPUSH
10221: CALL_OW 88
// Say ( Heike , DH-Kaiaout-6 ) ;
10225: LD_EXP 23
10229: PPUSH
10230: LD_STRING DH-Kaiaout-6
10232: PPUSH
10233: CALL_OW 88
// Say ( Givi , DG-Kaiaout-7 ) ;
10237: LD_EXP 24
10241: PPUSH
10242: LD_STRING DG-Kaiaout-7
10244: PPUSH
10245: CALL_OW 88
// Say ( Heike , DH-Kaiaout-8 ) ;
10249: LD_EXP 23
10253: PPUSH
10254: LD_STRING DH-Kaiaout-8
10256: PPUSH
10257: CALL_OW 88
// end ; DialogueOff ;
10261: CALL_OW 7
// KillUnit ( Kaia ) ;
10265: LD_EXP 28
10269: PPUSH
10270: CALL_OW 66
// end ;
10274: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) and IsOk ( Aviradze ) and GetSide ( Aviradze ) = 2 do var tmp ;
10275: LD_INT 22
10277: PUSH
10278: LD_INT 2
10280: PUSH
10281: EMPTY
10282: LIST
10283: LIST
10284: PUSH
10285: LD_INT 23
10287: PUSH
10288: LD_INT 0
10290: PUSH
10291: EMPTY
10292: LIST
10293: LIST
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: PPUSH
10299: CALL_OW 69
10303: PUSH
10304: LD_EXP 27
10308: PPUSH
10309: CALL_OW 302
10313: AND
10314: PUSH
10315: LD_EXP 27
10319: PPUSH
10320: CALL_OW 255
10324: PUSH
10325: LD_INT 2
10327: EQUAL
10328: AND
10329: IFFALSE 11101
10331: GO 10333
10333: DISABLE
10334: LD_INT 0
10336: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10337: LD_ADDR_VAR 0 1
10341: PUSH
10342: LD_INT 22
10344: PUSH
10345: LD_INT 2
10347: PUSH
10348: EMPTY
10349: LIST
10350: LIST
10351: PUSH
10352: LD_INT 23
10354: PUSH
10355: LD_INT 0
10357: PUSH
10358: EMPTY
10359: LIST
10360: LIST
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: PPUSH
10366: CALL_OW 69
10370: ST_TO_ADDR
// InGameOn ;
10371: CALL_OW 8
// CenterNowOnUnits ( tmp ) ;
10375: LD_VAR 0 1
10379: PPUSH
10380: CALL_OW 87
// ComMoveUnit ( tmp , Aviradze ) ;
10384: LD_VAR 0 1
10388: PPUSH
10389: LD_EXP 27
10393: PPUSH
10394: CALL_OW 112
// ComTurnUnit ( Aviradze , tmp ) ;
10398: LD_EXP 27
10402: PPUSH
10403: LD_VAR 0 1
10407: PPUSH
10408: CALL_OW 119
// wait ( 0 0$1 ) ;
10412: LD_INT 35
10414: PPUSH
10415: CALL_OW 67
// Say ( Aviradze , DA-1-tame-a ) ;
10419: LD_EXP 27
10423: PPUSH
10424: LD_STRING DA-1-tame-a
10426: PPUSH
10427: CALL_OW 88
// if IsOk ( Mike ) then
10431: LD_EXP 25
10435: PPUSH
10436: CALL_OW 302
10440: IFFALSE 10478
// begin Say ( Mike , DM-1-tame-a ) ;
10442: LD_EXP 25
10446: PPUSH
10447: LD_STRING DM-1-tame-a
10449: PPUSH
10450: CALL_OW 88
// Say ( Sophia , DS-1-tame-a ) ;
10454: LD_EXP 29
10458: PPUSH
10459: LD_STRING DS-1-tame-a
10461: PPUSH
10462: CALL_OW 88
// Say ( Mike , DM-2-tame-a ) ;
10466: LD_EXP 25
10470: PPUSH
10471: LD_STRING DM-2-tame-a
10473: PPUSH
10474: CALL_OW 88
// end ; wait ( 0 0$3 ) ;
10478: LD_INT 105
10480: PPUSH
10481: CALL_OW 67
// PrepareFarmer ;
10485: CALL 11776 0 0
// CenterOnUnits ( Farmer ) ;
10489: LD_EXP 31
10493: PPUSH
10494: CALL_OW 85
// ComMoveXY ( Farmer , 105 , 59 ) ;
10498: LD_EXP 31
10502: PPUSH
10503: LD_INT 105
10505: PPUSH
10506: LD_INT 59
10508: PPUSH
10509: CALL_OW 111
// AddComHold ( Farmer ) ;
10513: LD_EXP 31
10517: PPUSH
10518: CALL_OW 200
// SayRadio ( Farmer , DF-1-end ) ;
10522: LD_EXP 31
10526: PPUSH
10527: LD_STRING DF-1-end
10529: PPUSH
10530: CALL_OW 94
// Say ( Aviradze , DA-1-end ) ;
10534: LD_EXP 27
10538: PPUSH
10539: LD_STRING DA-1-end
10541: PPUSH
10542: CALL_OW 88
// SayRadio ( Farmer , DF-2-end ) ;
10546: LD_EXP 31
10550: PPUSH
10551: LD_STRING DF-2-end
10553: PPUSH
10554: CALL_OW 94
// Say ( Aviradze , DA-2-end ) ;
10558: LD_EXP 27
10562: PPUSH
10563: LD_STRING DA-2-end
10565: PPUSH
10566: CALL_OW 88
// SayRadio ( Farmer , DF-3-end ) ;
10570: LD_EXP 31
10574: PPUSH
10575: LD_STRING DF-3-end
10577: PPUSH
10578: CALL_OW 94
// Say ( Heike , DH-3-end ) ;
10582: LD_EXP 23
10586: PPUSH
10587: LD_STRING DH-3-end
10589: PPUSH
10590: CALL_OW 88
// SayRadio ( Farmer , DF-4-end ) ;
10594: LD_EXP 31
10598: PPUSH
10599: LD_STRING DF-4-end
10601: PPUSH
10602: CALL_OW 94
// if tick <= [ 25 25$00 , 22 22$30 , 20 20$00 ] [ Difficulty ] then
10606: LD_OWVAR 1
10610: PUSH
10611: LD_INT 52500
10613: PUSH
10614: LD_INT 47250
10616: PUSH
10617: LD_INT 42000
10619: PUSH
10620: EMPTY
10621: LIST
10622: LIST
10623: LIST
10624: PUSH
10625: LD_OWVAR 67
10629: ARRAY
10630: LESSEQUAL
10631: IFFALSE 10645
// AddMedal ( med1 , 1 ) else
10633: LD_STRING med1
10635: PPUSH
10636: LD_INT 1
10638: PPUSH
10639: CALL_OW 101
10643: GO 10656
// AddMedal ( med1 , - 1 ) ;
10645: LD_STRING med1
10647: PPUSH
10648: LD_INT 1
10650: NEG
10651: PPUSH
10652: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) = 0 and not gladstoneEscaped then
10656: LD_INT 22
10658: PUSH
10659: LD_INT 1
10661: PUSH
10662: EMPTY
10663: LIST
10664: LIST
10665: PUSH
10666: LD_INT 25
10668: PUSH
10669: LD_INT 4
10671: PUSH
10672: EMPTY
10673: LIST
10674: LIST
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: PPUSH
10680: CALL_OW 69
10684: PUSH
10685: LD_INT 0
10687: EQUAL
10688: PUSH
10689: LD_EXP 12
10693: NOT
10694: AND
10695: IFFALSE 10709
// AddMedal ( med2 , 1 ) else
10697: LD_STRING med2
10699: PPUSH
10700: LD_INT 1
10702: PPUSH
10703: CALL_OW 101
10707: GO 10720
// AddMedal ( med2 , - 1 ) ;
10709: LD_STRING med2
10711: PPUSH
10712: LD_INT 1
10714: NEG
10715: PPUSH
10716: CALL_OW 101
// if trickyMove then
10720: LD_EXP 15
10724: IFFALSE 10738
// AddMedal ( med3 , 1 ) else
10726: LD_STRING med3
10728: PPUSH
10729: LD_INT 1
10731: PPUSH
10732: CALL_OW 101
10736: GO 10768
// if spottedBeforeRadio then
10738: LD_EXP 6
10742: IFFALSE 10757
// AddMedal ( med3 , - 2 ) else
10744: LD_STRING med3
10746: PPUSH
10747: LD_INT 2
10749: NEG
10750: PPUSH
10751: CALL_OW 101
10755: GO 10768
// AddMedal ( med3 , - 1 ) ;
10757: LD_STRING med3
10759: PPUSH
10760: LD_INT 1
10762: NEG
10763: PPUSH
10764: CALL_OW 101
// GiveMedals ( MAIN ) ;
10768: LD_STRING MAIN
10770: PPUSH
10771: CALL_OW 102
// SaveCharacters ( tmp , 02_ape ) ;
10775: LD_VAR 0 1
10779: PPUSH
10780: LD_STRING 02_ape
10782: PPUSH
10783: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
10787: LD_ADDR_VAR 0 1
10791: PUSH
10792: LD_INT 22
10794: PUSH
10795: LD_INT 2
10797: PUSH
10798: EMPTY
10799: LIST
10800: LIST
10801: PUSH
10802: LD_INT 23
10804: PUSH
10805: LD_INT 2
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: PUSH
10812: LD_INT 21
10814: PUSH
10815: LD_INT 1
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: LIST
10826: PPUSH
10827: CALL_OW 69
10831: ST_TO_ADDR
// RewardPeople ( tmp ) ;
10832: LD_VAR 0 1
10836: PPUSH
10837: CALL_OW 43
// SaveCharacters ( Heike , 02_Heike ) ;
10841: LD_EXP 23
10845: PPUSH
10846: LD_STRING 02_Heike
10848: PPUSH
10849: CALL_OW 38
// SaveCharacters ( Aviradze , 02_Aviradze ) ;
10853: LD_EXP 27
10857: PPUSH
10858: LD_STRING 02_Aviradze
10860: PPUSH
10861: CALL_OW 38
// if Givi then
10865: LD_EXP 24
10869: IFFALSE 10883
// SaveCharacters ( Givi , 02_Givi ) ;
10871: LD_EXP 24
10875: PPUSH
10876: LD_STRING 02_Givi
10878: PPUSH
10879: CALL_OW 38
// if Mike then
10883: LD_EXP 25
10887: IFFALSE 10901
// SaveCharacters ( Mike , 02_Mike ) ;
10889: LD_EXP 25
10893: PPUSH
10894: LD_STRING 02_Mike
10896: PPUSH
10897: CALL_OW 38
// if Kamil then
10901: LD_EXP 26
10905: IFFALSE 10919
// SaveCharacters ( Kamil , 02_Kamil ) ;
10907: LD_EXP 26
10911: PPUSH
10912: LD_STRING 02_Kamil
10914: PPUSH
10915: CALL_OW 38
// if Kaia then
10919: LD_EXP 28
10923: IFFALSE 10937
// SaveCharacters ( Kaia , 02_Kaia ) ;
10925: LD_EXP 28
10929: PPUSH
10930: LD_STRING 02_Kaia
10932: PPUSH
10933: CALL_OW 38
// if Sophia then
10937: LD_EXP 29
10941: IFFALSE 10955
// SaveCharacters ( Sophia , 02_Sophia ) ;
10943: LD_EXP 29
10947: PPUSH
10948: LD_STRING 02_Sophia
10950: PPUSH
10951: CALL_OW 38
// if Markov then
10955: LD_EXP 30
10959: IFFALSE 10973
// SaveCharacters ( Markov , 02_Markov ) ;
10961: LD_EXP 30
10965: PPUSH
10966: LD_STRING 02_Markov
10968: PPUSH
10969: CALL_OW 38
// if tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] then
10973: LD_VAR 0 1
10977: PUSH
10978: LD_EXP 23
10982: PUSH
10983: LD_EXP 27
10987: PUSH
10988: LD_EXP 24
10992: PUSH
10993: LD_EXP 25
10997: PUSH
10998: LD_EXP 26
11002: PUSH
11003: LD_EXP 29
11007: PUSH
11008: LD_EXP 28
11012: PUSH
11013: LD_EXP 30
11017: PUSH
11018: EMPTY
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: DIFF
11028: IFFALSE 11093
// SaveCharacters ( tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] , 02_others ) ;
11030: LD_VAR 0 1
11034: PUSH
11035: LD_EXP 23
11039: PUSH
11040: LD_EXP 27
11044: PUSH
11045: LD_EXP 24
11049: PUSH
11050: LD_EXP 25
11054: PUSH
11055: LD_EXP 26
11059: PUSH
11060: LD_EXP 29
11064: PUSH
11065: LD_EXP 28
11069: PUSH
11070: LD_EXP 30
11074: PUSH
11075: EMPTY
11076: LIST
11077: LIST
11078: LIST
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: DIFF
11085: PPUSH
11086: LD_STRING 02_others
11088: PPUSH
11089: CALL_OW 38
// YouWin ;
11093: CALL_OW 103
// InGameOff ;
11097: CALL_OW 9
// end ;
11101: PPOPN 1
11103: END
// every 0 0$1 trigger tick > timeUntilFarmer and aviradzeSpotted do
11104: LD_OWVAR 1
11108: PUSH
11109: LD_EXP 13
11113: GREATER
11114: PUSH
11115: LD_EXP 4
11119: AND
11120: IFFALSE 11160
11122: GO 11124
11124: DISABLE
// begin InGameOn ;
11125: CALL_OW 8
// PrepareFarmer ;
11129: CALL 11776 0 0
// CenterNowOnUnits ( Farmer ) ;
11133: LD_EXP 31
11137: PPUSH
11138: CALL_OW 87
// wait ( 0 0$2 ) ;
11142: LD_INT 70
11144: PPUSH
11145: CALL_OW 67
// YouLost ( Farmer ) ;
11149: LD_STRING Farmer
11151: PPUSH
11152: CALL_OW 104
// InGameOff ;
11156: CALL_OW 9
// end ; end_of_file
11160: END
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer ; export function PrepareArabian ; var un , veh ; begin
11161: LD_INT 0
11163: PPUSH
11164: PPUSH
11165: PPUSH
// uc_side := 2 ;
11166: LD_ADDR_OWVAR 20
11170: PUSH
11171: LD_INT 2
11173: ST_TO_ADDR
// uc_nation := 2 ;
11174: LD_ADDR_OWVAR 21
11178: PUSH
11179: LD_INT 2
11181: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
11182: LD_ADDR_EXP 23
11186: PUSH
11187: LD_STRING Heike
11189: PPUSH
11190: LD_EXP 1
11194: NOT
11195: PPUSH
11196: LD_EXP 2
11200: PPUSH
11201: CALL 29559 0 3
11205: ST_TO_ADDR
// PlaceUnitXY ( Heike , 83 , 72 , false ) ;
11206: LD_EXP 23
11210: PPUSH
11211: LD_INT 83
11213: PPUSH
11214: LD_INT 72
11216: PPUSH
11217: LD_INT 0
11219: PPUSH
11220: CALL_OW 48
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
11224: LD_ADDR_EXP 24
11228: PUSH
11229: LD_STRING Givi
11231: PPUSH
11232: LD_EXP 1
11236: NOT
11237: PPUSH
11238: LD_EXP 2
11242: PPUSH
11243: CALL 29559 0 3
11247: ST_TO_ADDR
// if Givi then
11248: LD_EXP 24
11252: IFFALSE 11272
// PlaceUnitXY ( Givi , 87 , 76 , false ) ;
11254: LD_EXP 24
11258: PPUSH
11259: LD_INT 87
11261: PPUSH
11262: LD_INT 76
11264: PPUSH
11265: LD_INT 0
11267: PPUSH
11268: CALL_OW 48
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
11272: LD_ADDR_EXP 25
11276: PUSH
11277: LD_STRING Mike
11279: PPUSH
11280: LD_EXP 1
11284: NOT
11285: PPUSH
11286: LD_EXP 2
11290: PPUSH
11291: CALL 29559 0 3
11295: ST_TO_ADDR
// if Mike then
11296: LD_EXP 25
11300: IFFALSE 11320
// PlaceUnitXY ( Mike , 84 , 76 , false ) ;
11302: LD_EXP 25
11306: PPUSH
11307: LD_INT 84
11309: PPUSH
11310: LD_INT 76
11312: PPUSH
11313: LD_INT 0
11315: PPUSH
11316: CALL_OW 48
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
11320: LD_ADDR_EXP 26
11324: PUSH
11325: LD_STRING Kamil
11327: PPUSH
11328: LD_EXP 1
11332: NOT
11333: PPUSH
11334: LD_EXP 2
11338: PPUSH
11339: CALL 29559 0 3
11343: ST_TO_ADDR
// if Kamil then
11344: LD_EXP 26
11348: IFFALSE 11368
// PlaceUnitXY ( Kamil , 85 , 78 , false ) ;
11350: LD_EXP 26
11354: PPUSH
11355: LD_INT 85
11357: PPUSH
11358: LD_INT 78
11360: PPUSH
11361: LD_INT 0
11363: PPUSH
11364: CALL_OW 48
// uc_side := 5 ;
11368: LD_ADDR_OWVAR 20
11372: PUSH
11373: LD_INT 5
11375: ST_TO_ADDR
// uc_nation := 2 ;
11376: LD_ADDR_OWVAR 21
11380: PUSH
11381: LD_INT 2
11383: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , false ,  ) ;
11384: LD_ADDR_EXP 27
11388: PUSH
11389: LD_STRING Aviradze
11391: PPUSH
11392: LD_INT 0
11394: PPUSH
11395: LD_STRING 
11397: PPUSH
11398: CALL 29559 0 3
11402: ST_TO_ADDR
// PlaceUnitXY ( Aviradze , 106 , 38 , false ) ;
11403: LD_EXP 27
11407: PPUSH
11408: LD_INT 106
11410: PPUSH
11411: LD_INT 38
11413: PPUSH
11414: LD_INT 0
11416: PPUSH
11417: CALL_OW 48
// ComTurnXY ( Aviradze , 103 , 38 ) ;
11421: LD_EXP 27
11425: PPUSH
11426: LD_INT 103
11428: PPUSH
11429: LD_INT 38
11431: PPUSH
11432: CALL_OW 118
// Kaia := PrepareUnit ( Kaia , false ,  ) ;
11436: LD_ADDR_EXP 28
11440: PUSH
11441: LD_STRING Kaia
11443: PPUSH
11444: LD_INT 0
11446: PPUSH
11447: LD_STRING 
11449: PPUSH
11450: CALL 29559 0 3
11454: ST_TO_ADDR
// PlaceUnitXY ( Kaia , 100 , 34 , false ) ;
11455: LD_EXP 28
11459: PPUSH
11460: LD_INT 100
11462: PPUSH
11463: LD_INT 34
11465: PPUSH
11466: LD_INT 0
11468: PPUSH
11469: CALL_OW 48
// ComTurnXY ( Kaia , 100 , 39 ) ;
11473: LD_EXP 28
11477: PPUSH
11478: LD_INT 100
11480: PPUSH
11481: LD_INT 39
11483: PPUSH
11484: CALL_OW 118
// Sophia := PrepareUnit ( Sophia , false ,  ) ;
11488: LD_ADDR_EXP 29
11492: PUSH
11493: LD_STRING Sophia
11495: PPUSH
11496: LD_INT 0
11498: PPUSH
11499: LD_STRING 
11501: PPUSH
11502: CALL 29559 0 3
11506: ST_TO_ADDR
// PlaceUnitXY ( Sophia , 109 , 50 , false ) ;
11507: LD_EXP 29
11511: PPUSH
11512: LD_INT 109
11514: PPUSH
11515: LD_INT 50
11517: PPUSH
11518: LD_INT 0
11520: PPUSH
11521: CALL_OW 48
// ComTurnXY ( Sophia , 100 , 39 ) ;
11525: LD_EXP 29
11529: PPUSH
11530: LD_INT 100
11532: PPUSH
11533: LD_INT 39
11535: PPUSH
11536: CALL_OW 118
// Markov := PrepareUnit ( Markov , false ,  ) ;
11540: LD_ADDR_EXP 30
11544: PUSH
11545: LD_STRING Markov
11547: PPUSH
11548: LD_INT 0
11550: PPUSH
11551: LD_STRING 
11553: PPUSH
11554: CALL 29559 0 3
11558: ST_TO_ADDR
// PrepareTank ( 5 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , [ 90 , 70 , 60 ] [ Difficulty ] ) ;
11559: LD_INT 5
11561: PPUSH
11562: LD_INT 3
11564: PPUSH
11565: LD_INT 21
11567: PPUSH
11568: LD_INT 1
11570: PPUSH
11571: LD_INT 1
11573: PPUSH
11574: LD_INT 42
11576: PPUSH
11577: LD_INT 90
11579: PUSH
11580: LD_INT 70
11582: PUSH
11583: LD_INT 60
11585: PUSH
11586: EMPTY
11587: LIST
11588: LIST
11589: LIST
11590: PUSH
11591: LD_OWVAR 67
11595: ARRAY
11596: PPUSH
11597: CALL 237 0 7
// veh := CreateVehicle ;
11601: LD_ADDR_VAR 0 3
11605: PUSH
11606: CALL_OW 45
11610: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
11611: LD_VAR 0 3
11615: PPUSH
11616: LD_INT 4
11618: PPUSH
11619: CALL_OW 233
// PlaceUnitXY ( veh , 109 , 38 , false ) ;
11623: LD_VAR 0 3
11627: PPUSH
11628: LD_INT 109
11630: PPUSH
11631: LD_INT 38
11633: PPUSH
11634: LD_INT 0
11636: PPUSH
11637: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
11641: LD_EXP 30
11645: PPUSH
11646: LD_VAR 0 3
11650: PPUSH
11651: CALL_OW 52
// ComTurnUnit ( Kaia , Aviradze ) ;
11655: LD_EXP 28
11659: PPUSH
11660: LD_EXP 27
11664: PPUSH
11665: CALL_OW 119
// ComTurnUnit ( Aviradze , Kaia ) ;
11669: LD_EXP 27
11673: PPUSH
11674: LD_EXP 28
11678: PPUSH
11679: CALL_OW 119
// if not Givi or not Mike then
11683: LD_EXP 24
11687: NOT
11688: PUSH
11689: LD_EXP 25
11693: NOT
11694: OR
11695: IFFALSE 11771
// begin uc_nation := 2 ;
11697: LD_ADDR_OWVAR 21
11701: PUSH
11702: LD_INT 2
11704: ST_TO_ADDR
// uc_side := 5 ;
11705: LD_ADDR_OWVAR 20
11709: PUSH
11710: LD_INT 5
11712: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 1 ) ;
11713: LD_INT 1
11715: PPUSH
11716: LD_INT 1
11718: PPUSH
11719: LD_INT 1
11721: PPUSH
11722: CALL_OW 380
// un := CreateHuman ;
11726: LD_ADDR_VAR 0 2
11730: PUSH
11731: CALL_OW 44
11735: ST_TO_ADDR
// PlaceUnitXYR ( un , 112 , 40 , 3 , false ) ;
11736: LD_VAR 0 2
11740: PPUSH
11741: LD_INT 112
11743: PPUSH
11744: LD_INT 40
11746: PPUSH
11747: LD_INT 3
11749: PPUSH
11750: LD_INT 0
11752: PPUSH
11753: CALL_OW 50
// ComTurnUnit ( un , Aviradze ) ;
11757: LD_VAR 0 2
11761: PPUSH
11762: LD_EXP 27
11766: PPUSH
11767: CALL_OW 119
// end ; end ;
11771: LD_VAR 0 1
11775: RET
// export function PrepareFarmer ; var i ; begin
11776: LD_INT 0
11778: PPUSH
11779: PPUSH
// uc_side := 5 ;
11780: LD_ADDR_OWVAR 20
11784: PUSH
11785: LD_INT 5
11787: ST_TO_ADDR
// uc_nation := 2 ;
11788: LD_ADDR_OWVAR 21
11792: PUSH
11793: LD_INT 2
11795: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
11796: LD_ADDR_EXP 31
11800: PUSH
11801: LD_STRING Farmer
11803: PPUSH
11804: LD_INT 0
11806: PPUSH
11807: LD_STRING 
11809: PPUSH
11810: CALL 29559 0 3
11814: ST_TO_ADDR
// PlaceUnitXY ( Farmer , 106 , 62 , false ) ;
11815: LD_EXP 31
11819: PPUSH
11820: LD_INT 106
11822: PPUSH
11823: LD_INT 62
11825: PPUSH
11826: LD_INT 0
11828: PPUSH
11829: CALL_OW 48
// for i := 1 to 5 do
11833: LD_ADDR_VAR 0 2
11837: PUSH
11838: DOUBLE
11839: LD_INT 1
11841: DEC
11842: ST_TO_ADDR
11843: LD_INT 5
11845: PUSH
11846: FOR_TO
11847: IFFALSE 11885
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
11849: LD_INT 1
11851: PPUSH
11852: LD_INT 1
11854: PPUSH
11855: LD_INT 1
11857: PPUSH
11858: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 105 , 64 , 3 , false ) ;
11862: CALL_OW 44
11866: PPUSH
11867: LD_INT 105
11869: PPUSH
11870: LD_INT 64
11872: PPUSH
11873: LD_INT 3
11875: PPUSH
11876: LD_INT 0
11878: PPUSH
11879: CALL_OW 50
// end ;
11883: GO 11846
11885: POP
11886: POP
// end ; end_of_file
11887: LD_VAR 0 1
11891: RET
// every 2 2$20 + 0 0$10 do
11892: GO 11894
11894: DISABLE
// begin enable ;
11895: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , forest , true ) ;
11896: LD_INT 1
11898: PPUSH
11899: LD_INT 5
11901: PPUSH
11902: CALL_OW 12
11906: PPUSH
11907: LD_INT 1
11909: PPUSH
11910: LD_INT 1
11912: PPUSH
11913: CALL_OW 55
// if tick > 6 6$00 then
11917: LD_OWVAR 1
11921: PUSH
11922: LD_INT 12600
11924: GREATER
11925: IFFALSE 11928
// disable ;
11927: DISABLE
// end ; end_of_file
11928: END
// on UnitDestroyed ( un ) do begin if un = Heike then
11929: LD_VAR 0 1
11933: PUSH
11934: LD_EXP 23
11938: EQUAL
11939: IFFALSE 11948
// YouLost ( Heike ) ;
11941: LD_STRING Heike
11943: PPUSH
11944: CALL_OW 104
// if un = Aviradze then
11948: LD_VAR 0 1
11952: PUSH
11953: LD_EXP 27
11957: EQUAL
11958: IFFALSE 11967
// YouLost ( Aviradze ) ;
11960: LD_STRING Aviradze
11962: PPUSH
11963: CALL_OW 104
// if un = usLab then
11967: LD_VAR 0 1
11971: PUSH
11972: LD_INT 3
11974: EQUAL
11975: IFFALSE 11984
// YouLost ( Lab ) ;
11977: LD_STRING Lab
11979: PPUSH
11980: CALL_OW 104
// if ( un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) diff [ Heike , Aviradze ] ) and aviradzeSpotted then
11984: LD_VAR 0 1
11988: PUSH
11989: LD_INT 22
11991: PUSH
11992: LD_INT 2
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: PUSH
11999: LD_INT 21
12001: PUSH
12002: LD_INT 1
12004: PUSH
12005: EMPTY
12006: LIST
12007: LIST
12008: PUSH
12009: LD_INT 23
12011: PUSH
12012: LD_INT 2
12014: PUSH
12015: EMPTY
12016: LIST
12017: LIST
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: LIST
12023: PPUSH
12024: CALL_OW 69
12028: PUSH
12029: LD_EXP 23
12033: PUSH
12034: LD_EXP 27
12038: PUSH
12039: EMPTY
12040: LIST
12041: LIST
12042: DIFF
12043: IN
12044: PUSH
12045: LD_EXP 4
12049: AND
12050: IFFALSE 12066
// lostCounter := lostCounter + 1 ;
12052: LD_ADDR_EXP 18
12056: PUSH
12057: LD_EXP 18
12061: PUSH
12062: LD_INT 1
12064: PLUS
12065: ST_TO_ADDR
// end ;
12066: PPOPN 1
12068: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 2 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) = 0 do
12069: LD_INT 23
12071: PUSH
12072: LD_INT 2
12074: PUSH
12075: EMPTY
12076: LIST
12077: LIST
12078: PUSH
12079: LD_INT 25
12081: PUSH
12082: LD_INT 2
12084: PUSH
12085: EMPTY
12086: LIST
12087: LIST
12088: PUSH
12089: EMPTY
12090: LIST
12091: LIST
12092: PPUSH
12093: CALL_OW 69
12097: PUSH
12098: LD_INT 0
12100: EQUAL
12101: PUSH
12102: LD_INT 22
12104: PUSH
12105: LD_INT 2
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: PUSH
12112: LD_INT 21
12114: PUSH
12115: LD_INT 3
12117: PUSH
12118: EMPTY
12119: LIST
12120: LIST
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: PPUSH
12126: CALL_OW 69
12130: PUSH
12131: LD_INT 0
12133: EQUAL
12134: AND
12135: IFFALSE 12147
12137: GO 12139
12139: DISABLE
// YouLost ( Eng ) ;
12140: LD_STRING Eng
12142: PPUSH
12143: CALL_OW 104
12147: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in usSci and killerSide = 2 then
12148: LD_VAR 0 1
12152: PUSH
12153: LD_EXP 22
12157: IN
12158: PUSH
12159: LD_VAR 0 2
12163: PUSH
12164: LD_INT 2
12166: EQUAL
12167: AND
12168: IFFALSE 12200
// begin usSci := usSci diff un ;
12170: LD_ADDR_EXP 22
12174: PUSH
12175: LD_EXP 22
12179: PUSH
12180: LD_VAR 0 1
12184: DIFF
12185: ST_TO_ADDR
// sciCounterKill := sciCounterKill + 1 ;
12186: LD_ADDR_EXP 9
12190: PUSH
12191: LD_EXP 9
12195: PUSH
12196: LD_INT 1
12198: PLUS
12199: ST_TO_ADDR
// end ; end ;
12200: PPOPN 3
12202: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
12203: LD_VAR 0 1
12207: PUSH
12208: LD_INT 2
12210: EQUAL
12211: PUSH
12212: LD_VAR 0 2
12216: PUSH
12217: LD_INT 5
12219: EQUAL
12220: AND
12221: IFFALSE 12230
// YouLost ( FriendlyFire ) ;
12223: LD_STRING FriendlyFire
12225: PPUSH
12226: CALL_OW 104
// end ; end_of_file
12230: PPOPN 2
12232: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
12233: LD_INT 0
12235: PPUSH
// ar_miner := 81 ;
12236: LD_ADDR_EXP 39
12240: PUSH
12241: LD_INT 81
12243: ST_TO_ADDR
// ar_crane := 88 ;
12244: LD_ADDR_EXP 38
12248: PUSH
12249: LD_INT 88
12251: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
12252: LD_ADDR_EXP 33
12256: PUSH
12257: LD_INT 89
12259: ST_TO_ADDR
// us_hack := 99 ;
12260: LD_ADDR_EXP 34
12264: PUSH
12265: LD_INT 99
12267: ST_TO_ADDR
// us_artillery := 97 ;
12268: LD_ADDR_EXP 35
12272: PUSH
12273: LD_INT 97
12275: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12276: LD_ADDR_EXP 36
12280: PUSH
12281: LD_INT 91
12283: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
12284: LD_ADDR_EXP 37
12288: PUSH
12289: LD_INT 92
12291: ST_TO_ADDR
// ru_radar := 98 ;
12292: LD_ADDR_EXP 32
12296: PUSH
12297: LD_INT 98
12299: ST_TO_ADDR
// tech_Artillery := 80 ;
12300: LD_ADDR_EXP 40
12304: PUSH
12305: LD_INT 80
12307: ST_TO_ADDR
// tech_RadMat := 81 ;
12308: LD_ADDR_EXP 41
12312: PUSH
12313: LD_INT 81
12315: ST_TO_ADDR
// tech_BasicTools := 82 ;
12316: LD_ADDR_EXP 42
12320: PUSH
12321: LD_INT 82
12323: ST_TO_ADDR
// tech_Cargo := 83 ;
12324: LD_ADDR_EXP 43
12328: PUSH
12329: LD_INT 83
12331: ST_TO_ADDR
// tech_Track := 84 ;
12332: LD_ADDR_EXP 44
12336: PUSH
12337: LD_INT 84
12339: ST_TO_ADDR
// tech_Crane := 85 ;
12340: LD_ADDR_EXP 45
12344: PUSH
12345: LD_INT 85
12347: ST_TO_ADDR
// tech_Bulldozer := 86 ;
12348: LD_ADDR_EXP 46
12352: PUSH
12353: LD_INT 86
12355: ST_TO_ADDR
// tech_Hovercraft := 87 ;
12356: LD_ADDR_EXP 47
12360: PUSH
12361: LD_INT 87
12363: ST_TO_ADDR
// end ;
12364: LD_VAR 0 1
12368: RET
// every 1 do
12369: GO 12371
12371: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
12372: CALL 12233 0 0
12376: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
12377: LD_VAR 0 2
12381: PUSH
12382: LD_INT 100
12384: EQUAL
12385: IFFALSE 13334
// begin if not StreamModeActive then
12387: LD_EXP 48
12391: NOT
12392: IFFALSE 12402
// StreamModeActive := true ;
12394: LD_ADDR_EXP 48
12398: PUSH
12399: LD_INT 1
12401: ST_TO_ADDR
// if p3 = 0 then
12402: LD_VAR 0 3
12406: PUSH
12407: LD_INT 0
12409: EQUAL
12410: IFFALSE 12416
// InitStreamMode ;
12412: CALL 13492 0 0
// if p3 = 1 then
12416: LD_VAR 0 3
12420: PUSH
12421: LD_INT 1
12423: EQUAL
12424: IFFALSE 12434
// sRocket := true ;
12426: LD_ADDR_EXP 53
12430: PUSH
12431: LD_INT 1
12433: ST_TO_ADDR
// if p3 = 2 then
12434: LD_VAR 0 3
12438: PUSH
12439: LD_INT 2
12441: EQUAL
12442: IFFALSE 12452
// sSpeed := true ;
12444: LD_ADDR_EXP 52
12448: PUSH
12449: LD_INT 1
12451: ST_TO_ADDR
// if p3 = 3 then
12452: LD_VAR 0 3
12456: PUSH
12457: LD_INT 3
12459: EQUAL
12460: IFFALSE 12470
// sEngine := true ;
12462: LD_ADDR_EXP 54
12466: PUSH
12467: LD_INT 1
12469: ST_TO_ADDR
// if p3 = 4 then
12470: LD_VAR 0 3
12474: PUSH
12475: LD_INT 4
12477: EQUAL
12478: IFFALSE 12488
// sSpec := true ;
12480: LD_ADDR_EXP 51
12484: PUSH
12485: LD_INT 1
12487: ST_TO_ADDR
// if p3 = 5 then
12488: LD_VAR 0 3
12492: PUSH
12493: LD_INT 5
12495: EQUAL
12496: IFFALSE 12506
// sLevel := true ;
12498: LD_ADDR_EXP 55
12502: PUSH
12503: LD_INT 1
12505: ST_TO_ADDR
// if p3 = 6 then
12506: LD_VAR 0 3
12510: PUSH
12511: LD_INT 6
12513: EQUAL
12514: IFFALSE 12524
// sArmoury := true ;
12516: LD_ADDR_EXP 56
12520: PUSH
12521: LD_INT 1
12523: ST_TO_ADDR
// if p3 = 7 then
12524: LD_VAR 0 3
12528: PUSH
12529: LD_INT 7
12531: EQUAL
12532: IFFALSE 12542
// sRadar := true ;
12534: LD_ADDR_EXP 57
12538: PUSH
12539: LD_INT 1
12541: ST_TO_ADDR
// if p3 = 8 then
12542: LD_VAR 0 3
12546: PUSH
12547: LD_INT 8
12549: EQUAL
12550: IFFALSE 12560
// sBunker := true ;
12552: LD_ADDR_EXP 58
12556: PUSH
12557: LD_INT 1
12559: ST_TO_ADDR
// if p3 = 9 then
12560: LD_VAR 0 3
12564: PUSH
12565: LD_INT 9
12567: EQUAL
12568: IFFALSE 12578
// sHack := true ;
12570: LD_ADDR_EXP 59
12574: PUSH
12575: LD_INT 1
12577: ST_TO_ADDR
// if p3 = 10 then
12578: LD_VAR 0 3
12582: PUSH
12583: LD_INT 10
12585: EQUAL
12586: IFFALSE 12596
// sFire := true ;
12588: LD_ADDR_EXP 60
12592: PUSH
12593: LD_INT 1
12595: ST_TO_ADDR
// if p3 = 11 then
12596: LD_VAR 0 3
12600: PUSH
12601: LD_INT 11
12603: EQUAL
12604: IFFALSE 12614
// sRefresh := true ;
12606: LD_ADDR_EXP 61
12610: PUSH
12611: LD_INT 1
12613: ST_TO_ADDR
// if p3 = 12 then
12614: LD_VAR 0 3
12618: PUSH
12619: LD_INT 12
12621: EQUAL
12622: IFFALSE 12632
// sExp := true ;
12624: LD_ADDR_EXP 62
12628: PUSH
12629: LD_INT 1
12631: ST_TO_ADDR
// if p3 = 13 then
12632: LD_VAR 0 3
12636: PUSH
12637: LD_INT 13
12639: EQUAL
12640: IFFALSE 12650
// sDepot := true ;
12642: LD_ADDR_EXP 63
12646: PUSH
12647: LD_INT 1
12649: ST_TO_ADDR
// if p3 = 14 then
12650: LD_VAR 0 3
12654: PUSH
12655: LD_INT 14
12657: EQUAL
12658: IFFALSE 12668
// sFlag := true ;
12660: LD_ADDR_EXP 64
12664: PUSH
12665: LD_INT 1
12667: ST_TO_ADDR
// if p3 = 15 then
12668: LD_VAR 0 3
12672: PUSH
12673: LD_INT 15
12675: EQUAL
12676: IFFALSE 12686
// sKamikadze := true ;
12678: LD_ADDR_EXP 72
12682: PUSH
12683: LD_INT 1
12685: ST_TO_ADDR
// if p3 = 16 then
12686: LD_VAR 0 3
12690: PUSH
12691: LD_INT 16
12693: EQUAL
12694: IFFALSE 12704
// sTroll := true ;
12696: LD_ADDR_EXP 73
12700: PUSH
12701: LD_INT 1
12703: ST_TO_ADDR
// if p3 = 17 then
12704: LD_VAR 0 3
12708: PUSH
12709: LD_INT 17
12711: EQUAL
12712: IFFALSE 12722
// sSlow := true ;
12714: LD_ADDR_EXP 74
12718: PUSH
12719: LD_INT 1
12721: ST_TO_ADDR
// if p3 = 18 then
12722: LD_VAR 0 3
12726: PUSH
12727: LD_INT 18
12729: EQUAL
12730: IFFALSE 12740
// sLack := true ;
12732: LD_ADDR_EXP 75
12736: PUSH
12737: LD_INT 1
12739: ST_TO_ADDR
// if p3 = 19 then
12740: LD_VAR 0 3
12744: PUSH
12745: LD_INT 19
12747: EQUAL
12748: IFFALSE 12758
// sTank := true ;
12750: LD_ADDR_EXP 77
12754: PUSH
12755: LD_INT 1
12757: ST_TO_ADDR
// if p3 = 20 then
12758: LD_VAR 0 3
12762: PUSH
12763: LD_INT 20
12765: EQUAL
12766: IFFALSE 12776
// sRemote := true ;
12768: LD_ADDR_EXP 78
12772: PUSH
12773: LD_INT 1
12775: ST_TO_ADDR
// if p3 = 21 then
12776: LD_VAR 0 3
12780: PUSH
12781: LD_INT 21
12783: EQUAL
12784: IFFALSE 12794
// sPowell := true ;
12786: LD_ADDR_EXP 79
12790: PUSH
12791: LD_INT 1
12793: ST_TO_ADDR
// if p3 = 22 then
12794: LD_VAR 0 3
12798: PUSH
12799: LD_INT 22
12801: EQUAL
12802: IFFALSE 12812
// sTeleport := true ;
12804: LD_ADDR_EXP 82
12808: PUSH
12809: LD_INT 1
12811: ST_TO_ADDR
// if p3 = 23 then
12812: LD_VAR 0 3
12816: PUSH
12817: LD_INT 23
12819: EQUAL
12820: IFFALSE 12830
// sOilTower := true ;
12822: LD_ADDR_EXP 84
12826: PUSH
12827: LD_INT 1
12829: ST_TO_ADDR
// if p3 = 24 then
12830: LD_VAR 0 3
12834: PUSH
12835: LD_INT 24
12837: EQUAL
12838: IFFALSE 12848
// sShovel := true ;
12840: LD_ADDR_EXP 85
12844: PUSH
12845: LD_INT 1
12847: ST_TO_ADDR
// if p3 = 25 then
12848: LD_VAR 0 3
12852: PUSH
12853: LD_INT 25
12855: EQUAL
12856: IFFALSE 12866
// sSheik := true ;
12858: LD_ADDR_EXP 86
12862: PUSH
12863: LD_INT 1
12865: ST_TO_ADDR
// if p3 = 26 then
12866: LD_VAR 0 3
12870: PUSH
12871: LD_INT 26
12873: EQUAL
12874: IFFALSE 12884
// sEarthquake := true ;
12876: LD_ADDR_EXP 88
12880: PUSH
12881: LD_INT 1
12883: ST_TO_ADDR
// if p3 = 27 then
12884: LD_VAR 0 3
12888: PUSH
12889: LD_INT 27
12891: EQUAL
12892: IFFALSE 12902
// sAI := true ;
12894: LD_ADDR_EXP 89
12898: PUSH
12899: LD_INT 1
12901: ST_TO_ADDR
// if p3 = 28 then
12902: LD_VAR 0 3
12906: PUSH
12907: LD_INT 28
12909: EQUAL
12910: IFFALSE 12920
// sCargo := true ;
12912: LD_ADDR_EXP 92
12916: PUSH
12917: LD_INT 1
12919: ST_TO_ADDR
// if p3 = 29 then
12920: LD_VAR 0 3
12924: PUSH
12925: LD_INT 29
12927: EQUAL
12928: IFFALSE 12938
// sDLaser := true ;
12930: LD_ADDR_EXP 93
12934: PUSH
12935: LD_INT 1
12937: ST_TO_ADDR
// if p3 = 30 then
12938: LD_VAR 0 3
12942: PUSH
12943: LD_INT 30
12945: EQUAL
12946: IFFALSE 12956
// sExchange := true ;
12948: LD_ADDR_EXP 94
12952: PUSH
12953: LD_INT 1
12955: ST_TO_ADDR
// if p3 = 31 then
12956: LD_VAR 0 3
12960: PUSH
12961: LD_INT 31
12963: EQUAL
12964: IFFALSE 12974
// sFac := true ;
12966: LD_ADDR_EXP 95
12970: PUSH
12971: LD_INT 1
12973: ST_TO_ADDR
// if p3 = 32 then
12974: LD_VAR 0 3
12978: PUSH
12979: LD_INT 32
12981: EQUAL
12982: IFFALSE 12992
// sPower := true ;
12984: LD_ADDR_EXP 96
12988: PUSH
12989: LD_INT 1
12991: ST_TO_ADDR
// if p3 = 33 then
12992: LD_VAR 0 3
12996: PUSH
12997: LD_INT 33
12999: EQUAL
13000: IFFALSE 13010
// sRandom := true ;
13002: LD_ADDR_EXP 97
13006: PUSH
13007: LD_INT 1
13009: ST_TO_ADDR
// if p3 = 34 then
13010: LD_VAR 0 3
13014: PUSH
13015: LD_INT 34
13017: EQUAL
13018: IFFALSE 13028
// sShield := true ;
13020: LD_ADDR_EXP 98
13024: PUSH
13025: LD_INT 1
13027: ST_TO_ADDR
// if p3 = 35 then
13028: LD_VAR 0 3
13032: PUSH
13033: LD_INT 35
13035: EQUAL
13036: IFFALSE 13046
// sTime := true ;
13038: LD_ADDR_EXP 99
13042: PUSH
13043: LD_INT 1
13045: ST_TO_ADDR
// if p3 = 36 then
13046: LD_VAR 0 3
13050: PUSH
13051: LD_INT 36
13053: EQUAL
13054: IFFALSE 13064
// sTools := true ;
13056: LD_ADDR_EXP 100
13060: PUSH
13061: LD_INT 1
13063: ST_TO_ADDR
// if p3 = 101 then
13064: LD_VAR 0 3
13068: PUSH
13069: LD_INT 101
13071: EQUAL
13072: IFFALSE 13082
// sSold := true ;
13074: LD_ADDR_EXP 65
13078: PUSH
13079: LD_INT 1
13081: ST_TO_ADDR
// if p3 = 102 then
13082: LD_VAR 0 3
13086: PUSH
13087: LD_INT 102
13089: EQUAL
13090: IFFALSE 13100
// sDiff := true ;
13092: LD_ADDR_EXP 66
13096: PUSH
13097: LD_INT 1
13099: ST_TO_ADDR
// if p3 = 103 then
13100: LD_VAR 0 3
13104: PUSH
13105: LD_INT 103
13107: EQUAL
13108: IFFALSE 13118
// sFog := true ;
13110: LD_ADDR_EXP 69
13114: PUSH
13115: LD_INT 1
13117: ST_TO_ADDR
// if p3 = 104 then
13118: LD_VAR 0 3
13122: PUSH
13123: LD_INT 104
13125: EQUAL
13126: IFFALSE 13136
// sReset := true ;
13128: LD_ADDR_EXP 70
13132: PUSH
13133: LD_INT 1
13135: ST_TO_ADDR
// if p3 = 105 then
13136: LD_VAR 0 3
13140: PUSH
13141: LD_INT 105
13143: EQUAL
13144: IFFALSE 13154
// sSun := true ;
13146: LD_ADDR_EXP 71
13150: PUSH
13151: LD_INT 1
13153: ST_TO_ADDR
// if p3 = 106 then
13154: LD_VAR 0 3
13158: PUSH
13159: LD_INT 106
13161: EQUAL
13162: IFFALSE 13172
// sTiger := true ;
13164: LD_ADDR_EXP 67
13168: PUSH
13169: LD_INT 1
13171: ST_TO_ADDR
// if p3 = 107 then
13172: LD_VAR 0 3
13176: PUSH
13177: LD_INT 107
13179: EQUAL
13180: IFFALSE 13190
// sBomb := true ;
13182: LD_ADDR_EXP 68
13186: PUSH
13187: LD_INT 1
13189: ST_TO_ADDR
// if p3 = 108 then
13190: LD_VAR 0 3
13194: PUSH
13195: LD_INT 108
13197: EQUAL
13198: IFFALSE 13208
// sWound := true ;
13200: LD_ADDR_EXP 76
13204: PUSH
13205: LD_INT 1
13207: ST_TO_ADDR
// if p3 = 109 then
13208: LD_VAR 0 3
13212: PUSH
13213: LD_INT 109
13215: EQUAL
13216: IFFALSE 13226
// sBetray := true ;
13218: LD_ADDR_EXP 80
13222: PUSH
13223: LD_INT 1
13225: ST_TO_ADDR
// if p3 = 110 then
13226: LD_VAR 0 3
13230: PUSH
13231: LD_INT 110
13233: EQUAL
13234: IFFALSE 13244
// sContamin := true ;
13236: LD_ADDR_EXP 81
13240: PUSH
13241: LD_INT 1
13243: ST_TO_ADDR
// if p3 = 111 then
13244: LD_VAR 0 3
13248: PUSH
13249: LD_INT 111
13251: EQUAL
13252: IFFALSE 13262
// sOil := true ;
13254: LD_ADDR_EXP 83
13258: PUSH
13259: LD_INT 1
13261: ST_TO_ADDR
// if p3 = 112 then
13262: LD_VAR 0 3
13266: PUSH
13267: LD_INT 112
13269: EQUAL
13270: IFFALSE 13280
// sStu := true ;
13272: LD_ADDR_EXP 87
13276: PUSH
13277: LD_INT 1
13279: ST_TO_ADDR
// if p3 = 113 then
13280: LD_VAR 0 3
13284: PUSH
13285: LD_INT 113
13287: EQUAL
13288: IFFALSE 13298
// sBazooka := true ;
13290: LD_ADDR_EXP 90
13294: PUSH
13295: LD_INT 1
13297: ST_TO_ADDR
// if p3 = 114 then
13298: LD_VAR 0 3
13302: PUSH
13303: LD_INT 114
13305: EQUAL
13306: IFFALSE 13316
// sMortar := true ;
13308: LD_ADDR_EXP 91
13312: PUSH
13313: LD_INT 1
13315: ST_TO_ADDR
// if p3 = 115 then
13316: LD_VAR 0 3
13320: PUSH
13321: LD_INT 115
13323: EQUAL
13324: IFFALSE 13334
// sRanger := true ;
13326: LD_ADDR_EXP 101
13330: PUSH
13331: LD_INT 1
13333: ST_TO_ADDR
// end ; if p2 = 101 then
13334: LD_VAR 0 2
13338: PUSH
13339: LD_INT 101
13341: EQUAL
13342: IFFALSE 13470
// begin case p3 of 1 :
13344: LD_VAR 0 3
13348: PUSH
13349: LD_INT 1
13351: DOUBLE
13352: EQUAL
13353: IFTRUE 13357
13355: GO 13364
13357: POP
// hHackUnlimitedResources ; 2 :
13358: CALL 24505 0 0
13362: GO 13470
13364: LD_INT 2
13366: DOUBLE
13367: EQUAL
13368: IFTRUE 13372
13370: GO 13379
13372: POP
// hHackSetLevel10 ; 3 :
13373: CALL 24638 0 0
13377: GO 13470
13379: LD_INT 3
13381: DOUBLE
13382: EQUAL
13383: IFTRUE 13387
13385: GO 13394
13387: POP
// hHackSetLevel10YourUnits ; 4 :
13388: CALL 24723 0 0
13392: GO 13470
13394: LD_INT 4
13396: DOUBLE
13397: EQUAL
13398: IFTRUE 13402
13400: GO 13409
13402: POP
// hHackInvincible ; 5 :
13403: CALL 25171 0 0
13407: GO 13470
13409: LD_INT 5
13411: DOUBLE
13412: EQUAL
13413: IFTRUE 13417
13415: GO 13424
13417: POP
// hHackInvisible ; 6 :
13418: CALL 25282 0 0
13422: GO 13470
13424: LD_INT 6
13426: DOUBLE
13427: EQUAL
13428: IFTRUE 13432
13430: GO 13439
13432: POP
// hHackChangeYourSide ; 7 :
13433: CALL 25339 0 0
13437: GO 13470
13439: LD_INT 7
13441: DOUBLE
13442: EQUAL
13443: IFTRUE 13447
13445: GO 13454
13447: POP
// hHackChangeUnitSide ; 8 :
13448: CALL 25381 0 0
13452: GO 13470
13454: LD_INT 8
13456: DOUBLE
13457: EQUAL
13458: IFTRUE 13462
13460: GO 13469
13462: POP
// hHackFog ; end ;
13463: CALL 25482 0 0
13467: GO 13470
13469: POP
// end ; end ;
13470: PPOPN 6
13472: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
13473: GO 13475
13475: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
13476: LD_STRING initStreamRollete();
13478: PPUSH
13479: CALL_OW 559
// InitStreamMode ;
13483: CALL 13492 0 0
// DefineStreamItems ( ) ;
13487: CALL 13932 0 0
// end ;
13491: END
// function InitStreamMode ; begin
13492: LD_INT 0
13494: PPUSH
// streamModeActive := false ;
13495: LD_ADDR_EXP 48
13499: PUSH
13500: LD_INT 0
13502: ST_TO_ADDR
// normalCounter := 36 ;
13503: LD_ADDR_EXP 49
13507: PUSH
13508: LD_INT 36
13510: ST_TO_ADDR
// hardcoreCounter := 16 ;
13511: LD_ADDR_EXP 50
13515: PUSH
13516: LD_INT 16
13518: ST_TO_ADDR
// sRocket := false ;
13519: LD_ADDR_EXP 53
13523: PUSH
13524: LD_INT 0
13526: ST_TO_ADDR
// sSpeed := false ;
13527: LD_ADDR_EXP 52
13531: PUSH
13532: LD_INT 0
13534: ST_TO_ADDR
// sEngine := false ;
13535: LD_ADDR_EXP 54
13539: PUSH
13540: LD_INT 0
13542: ST_TO_ADDR
// sSpec := false ;
13543: LD_ADDR_EXP 51
13547: PUSH
13548: LD_INT 0
13550: ST_TO_ADDR
// sLevel := false ;
13551: LD_ADDR_EXP 55
13555: PUSH
13556: LD_INT 0
13558: ST_TO_ADDR
// sArmoury := false ;
13559: LD_ADDR_EXP 56
13563: PUSH
13564: LD_INT 0
13566: ST_TO_ADDR
// sRadar := false ;
13567: LD_ADDR_EXP 57
13571: PUSH
13572: LD_INT 0
13574: ST_TO_ADDR
// sBunker := false ;
13575: LD_ADDR_EXP 58
13579: PUSH
13580: LD_INT 0
13582: ST_TO_ADDR
// sHack := false ;
13583: LD_ADDR_EXP 59
13587: PUSH
13588: LD_INT 0
13590: ST_TO_ADDR
// sFire := false ;
13591: LD_ADDR_EXP 60
13595: PUSH
13596: LD_INT 0
13598: ST_TO_ADDR
// sRefresh := false ;
13599: LD_ADDR_EXP 61
13603: PUSH
13604: LD_INT 0
13606: ST_TO_ADDR
// sExp := false ;
13607: LD_ADDR_EXP 62
13611: PUSH
13612: LD_INT 0
13614: ST_TO_ADDR
// sDepot := false ;
13615: LD_ADDR_EXP 63
13619: PUSH
13620: LD_INT 0
13622: ST_TO_ADDR
// sFlag := false ;
13623: LD_ADDR_EXP 64
13627: PUSH
13628: LD_INT 0
13630: ST_TO_ADDR
// sKamikadze := false ;
13631: LD_ADDR_EXP 72
13635: PUSH
13636: LD_INT 0
13638: ST_TO_ADDR
// sTroll := false ;
13639: LD_ADDR_EXP 73
13643: PUSH
13644: LD_INT 0
13646: ST_TO_ADDR
// sSlow := false ;
13647: LD_ADDR_EXP 74
13651: PUSH
13652: LD_INT 0
13654: ST_TO_ADDR
// sLack := false ;
13655: LD_ADDR_EXP 75
13659: PUSH
13660: LD_INT 0
13662: ST_TO_ADDR
// sTank := false ;
13663: LD_ADDR_EXP 77
13667: PUSH
13668: LD_INT 0
13670: ST_TO_ADDR
// sRemote := false ;
13671: LD_ADDR_EXP 78
13675: PUSH
13676: LD_INT 0
13678: ST_TO_ADDR
// sPowell := false ;
13679: LD_ADDR_EXP 79
13683: PUSH
13684: LD_INT 0
13686: ST_TO_ADDR
// sTeleport := false ;
13687: LD_ADDR_EXP 82
13691: PUSH
13692: LD_INT 0
13694: ST_TO_ADDR
// sOilTower := false ;
13695: LD_ADDR_EXP 84
13699: PUSH
13700: LD_INT 0
13702: ST_TO_ADDR
// sShovel := false ;
13703: LD_ADDR_EXP 85
13707: PUSH
13708: LD_INT 0
13710: ST_TO_ADDR
// sSheik := false ;
13711: LD_ADDR_EXP 86
13715: PUSH
13716: LD_INT 0
13718: ST_TO_ADDR
// sEarthquake := false ;
13719: LD_ADDR_EXP 88
13723: PUSH
13724: LD_INT 0
13726: ST_TO_ADDR
// sAI := false ;
13727: LD_ADDR_EXP 89
13731: PUSH
13732: LD_INT 0
13734: ST_TO_ADDR
// sCargo := false ;
13735: LD_ADDR_EXP 92
13739: PUSH
13740: LD_INT 0
13742: ST_TO_ADDR
// sDLaser := false ;
13743: LD_ADDR_EXP 93
13747: PUSH
13748: LD_INT 0
13750: ST_TO_ADDR
// sExchange := false ;
13751: LD_ADDR_EXP 94
13755: PUSH
13756: LD_INT 0
13758: ST_TO_ADDR
// sFac := false ;
13759: LD_ADDR_EXP 95
13763: PUSH
13764: LD_INT 0
13766: ST_TO_ADDR
// sPower := false ;
13767: LD_ADDR_EXP 96
13771: PUSH
13772: LD_INT 0
13774: ST_TO_ADDR
// sRandom := false ;
13775: LD_ADDR_EXP 97
13779: PUSH
13780: LD_INT 0
13782: ST_TO_ADDR
// sShield := false ;
13783: LD_ADDR_EXP 98
13787: PUSH
13788: LD_INT 0
13790: ST_TO_ADDR
// sTime := false ;
13791: LD_ADDR_EXP 99
13795: PUSH
13796: LD_INT 0
13798: ST_TO_ADDR
// sTools := false ;
13799: LD_ADDR_EXP 100
13803: PUSH
13804: LD_INT 0
13806: ST_TO_ADDR
// sSold := false ;
13807: LD_ADDR_EXP 65
13811: PUSH
13812: LD_INT 0
13814: ST_TO_ADDR
// sDiff := false ;
13815: LD_ADDR_EXP 66
13819: PUSH
13820: LD_INT 0
13822: ST_TO_ADDR
// sFog := false ;
13823: LD_ADDR_EXP 69
13827: PUSH
13828: LD_INT 0
13830: ST_TO_ADDR
// sReset := false ;
13831: LD_ADDR_EXP 70
13835: PUSH
13836: LD_INT 0
13838: ST_TO_ADDR
// sSun := false ;
13839: LD_ADDR_EXP 71
13843: PUSH
13844: LD_INT 0
13846: ST_TO_ADDR
// sTiger := false ;
13847: LD_ADDR_EXP 67
13851: PUSH
13852: LD_INT 0
13854: ST_TO_ADDR
// sBomb := false ;
13855: LD_ADDR_EXP 68
13859: PUSH
13860: LD_INT 0
13862: ST_TO_ADDR
// sWound := false ;
13863: LD_ADDR_EXP 76
13867: PUSH
13868: LD_INT 0
13870: ST_TO_ADDR
// sBetray := false ;
13871: LD_ADDR_EXP 80
13875: PUSH
13876: LD_INT 0
13878: ST_TO_ADDR
// sContamin := false ;
13879: LD_ADDR_EXP 81
13883: PUSH
13884: LD_INT 0
13886: ST_TO_ADDR
// sOil := false ;
13887: LD_ADDR_EXP 83
13891: PUSH
13892: LD_INT 0
13894: ST_TO_ADDR
// sStu := false ;
13895: LD_ADDR_EXP 87
13899: PUSH
13900: LD_INT 0
13902: ST_TO_ADDR
// sBazooka := false ;
13903: LD_ADDR_EXP 90
13907: PUSH
13908: LD_INT 0
13910: ST_TO_ADDR
// sMortar := false ;
13911: LD_ADDR_EXP 91
13915: PUSH
13916: LD_INT 0
13918: ST_TO_ADDR
// sRanger := false ;
13919: LD_ADDR_EXP 101
13923: PUSH
13924: LD_INT 0
13926: ST_TO_ADDR
// end ;
13927: LD_VAR 0 1
13931: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
13932: LD_INT 0
13934: PPUSH
13935: PPUSH
13936: PPUSH
13937: PPUSH
13938: PPUSH
// result := [ ] ;
13939: LD_ADDR_VAR 0 1
13943: PUSH
13944: EMPTY
13945: ST_TO_ADDR
// if campaign_id = 1 then
13946: LD_OWVAR 69
13950: PUSH
13951: LD_INT 1
13953: EQUAL
13954: IFFALSE 16892
// begin case mission_number of 1 :
13956: LD_OWVAR 70
13960: PUSH
13961: LD_INT 1
13963: DOUBLE
13964: EQUAL
13965: IFTRUE 13969
13967: GO 14033
13969: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
13970: LD_ADDR_VAR 0 1
13974: PUSH
13975: LD_INT 2
13977: PUSH
13978: LD_INT 4
13980: PUSH
13981: LD_INT 11
13983: PUSH
13984: LD_INT 12
13986: PUSH
13987: LD_INT 15
13989: PUSH
13990: LD_INT 16
13992: PUSH
13993: LD_INT 22
13995: PUSH
13996: LD_INT 23
13998: PUSH
13999: LD_INT 26
14001: PUSH
14002: EMPTY
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: PUSH
14013: LD_INT 101
14015: PUSH
14016: LD_INT 102
14018: PUSH
14019: LD_INT 106
14021: PUSH
14022: EMPTY
14023: LIST
14024: LIST
14025: LIST
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: ST_TO_ADDR
14031: GO 16890
14033: LD_INT 2
14035: DOUBLE
14036: EQUAL
14037: IFTRUE 14041
14039: GO 14113
14041: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
14042: LD_ADDR_VAR 0 1
14046: PUSH
14047: LD_INT 2
14049: PUSH
14050: LD_INT 4
14052: PUSH
14053: LD_INT 11
14055: PUSH
14056: LD_INT 12
14058: PUSH
14059: LD_INT 15
14061: PUSH
14062: LD_INT 16
14064: PUSH
14065: LD_INT 22
14067: PUSH
14068: LD_INT 23
14070: PUSH
14071: LD_INT 26
14073: PUSH
14074: EMPTY
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: PUSH
14085: LD_INT 101
14087: PUSH
14088: LD_INT 102
14090: PUSH
14091: LD_INT 105
14093: PUSH
14094: LD_INT 106
14096: PUSH
14097: LD_INT 108
14099: PUSH
14100: EMPTY
14101: LIST
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: ST_TO_ADDR
14111: GO 16890
14113: LD_INT 3
14115: DOUBLE
14116: EQUAL
14117: IFTRUE 14121
14119: GO 14197
14121: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
14122: LD_ADDR_VAR 0 1
14126: PUSH
14127: LD_INT 2
14129: PUSH
14130: LD_INT 4
14132: PUSH
14133: LD_INT 5
14135: PUSH
14136: LD_INT 11
14138: PUSH
14139: LD_INT 12
14141: PUSH
14142: LD_INT 15
14144: PUSH
14145: LD_INT 16
14147: PUSH
14148: LD_INT 22
14150: PUSH
14151: LD_INT 26
14153: PUSH
14154: LD_INT 36
14156: PUSH
14157: EMPTY
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: PUSH
14169: LD_INT 101
14171: PUSH
14172: LD_INT 102
14174: PUSH
14175: LD_INT 105
14177: PUSH
14178: LD_INT 106
14180: PUSH
14181: LD_INT 108
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: PUSH
14191: EMPTY
14192: LIST
14193: LIST
14194: ST_TO_ADDR
14195: GO 16890
14197: LD_INT 4
14199: DOUBLE
14200: EQUAL
14201: IFTRUE 14205
14203: GO 14289
14205: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
14206: LD_ADDR_VAR 0 1
14210: PUSH
14211: LD_INT 2
14213: PUSH
14214: LD_INT 4
14216: PUSH
14217: LD_INT 5
14219: PUSH
14220: LD_INT 8
14222: PUSH
14223: LD_INT 11
14225: PUSH
14226: LD_INT 12
14228: PUSH
14229: LD_INT 15
14231: PUSH
14232: LD_INT 16
14234: PUSH
14235: LD_INT 22
14237: PUSH
14238: LD_INT 23
14240: PUSH
14241: LD_INT 26
14243: PUSH
14244: LD_INT 36
14246: PUSH
14247: EMPTY
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: PUSH
14261: LD_INT 101
14263: PUSH
14264: LD_INT 102
14266: PUSH
14267: LD_INT 105
14269: PUSH
14270: LD_INT 106
14272: PUSH
14273: LD_INT 108
14275: PUSH
14276: EMPTY
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: ST_TO_ADDR
14287: GO 16890
14289: LD_INT 5
14291: DOUBLE
14292: EQUAL
14293: IFTRUE 14297
14295: GO 14397
14297: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
14298: LD_ADDR_VAR 0 1
14302: PUSH
14303: LD_INT 2
14305: PUSH
14306: LD_INT 4
14308: PUSH
14309: LD_INT 5
14311: PUSH
14312: LD_INT 6
14314: PUSH
14315: LD_INT 8
14317: PUSH
14318: LD_INT 11
14320: PUSH
14321: LD_INT 12
14323: PUSH
14324: LD_INT 15
14326: PUSH
14327: LD_INT 16
14329: PUSH
14330: LD_INT 22
14332: PUSH
14333: LD_INT 23
14335: PUSH
14336: LD_INT 25
14338: PUSH
14339: LD_INT 26
14341: PUSH
14342: LD_INT 36
14344: PUSH
14345: EMPTY
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: PUSH
14361: LD_INT 101
14363: PUSH
14364: LD_INT 102
14366: PUSH
14367: LD_INT 105
14369: PUSH
14370: LD_INT 106
14372: PUSH
14373: LD_INT 108
14375: PUSH
14376: LD_INT 109
14378: PUSH
14379: LD_INT 112
14381: PUSH
14382: EMPTY
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: ST_TO_ADDR
14395: GO 16890
14397: LD_INT 6
14399: DOUBLE
14400: EQUAL
14401: IFTRUE 14405
14403: GO 14525
14405: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
14406: LD_ADDR_VAR 0 1
14410: PUSH
14411: LD_INT 2
14413: PUSH
14414: LD_INT 4
14416: PUSH
14417: LD_INT 5
14419: PUSH
14420: LD_INT 6
14422: PUSH
14423: LD_INT 8
14425: PUSH
14426: LD_INT 11
14428: PUSH
14429: LD_INT 12
14431: PUSH
14432: LD_INT 15
14434: PUSH
14435: LD_INT 16
14437: PUSH
14438: LD_INT 20
14440: PUSH
14441: LD_INT 21
14443: PUSH
14444: LD_INT 22
14446: PUSH
14447: LD_INT 23
14449: PUSH
14450: LD_INT 25
14452: PUSH
14453: LD_INT 26
14455: PUSH
14456: LD_INT 30
14458: PUSH
14459: LD_INT 31
14461: PUSH
14462: LD_INT 32
14464: PUSH
14465: LD_INT 36
14467: PUSH
14468: EMPTY
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: PUSH
14489: LD_INT 101
14491: PUSH
14492: LD_INT 102
14494: PUSH
14495: LD_INT 105
14497: PUSH
14498: LD_INT 106
14500: PUSH
14501: LD_INT 108
14503: PUSH
14504: LD_INT 109
14506: PUSH
14507: LD_INT 112
14509: PUSH
14510: EMPTY
14511: LIST
14512: LIST
14513: LIST
14514: LIST
14515: LIST
14516: LIST
14517: LIST
14518: PUSH
14519: EMPTY
14520: LIST
14521: LIST
14522: ST_TO_ADDR
14523: GO 16890
14525: LD_INT 7
14527: DOUBLE
14528: EQUAL
14529: IFTRUE 14533
14531: GO 14633
14533: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
14534: LD_ADDR_VAR 0 1
14538: PUSH
14539: LD_INT 2
14541: PUSH
14542: LD_INT 4
14544: PUSH
14545: LD_INT 5
14547: PUSH
14548: LD_INT 7
14550: PUSH
14551: LD_INT 11
14553: PUSH
14554: LD_INT 12
14556: PUSH
14557: LD_INT 15
14559: PUSH
14560: LD_INT 16
14562: PUSH
14563: LD_INT 20
14565: PUSH
14566: LD_INT 21
14568: PUSH
14569: LD_INT 22
14571: PUSH
14572: LD_INT 23
14574: PUSH
14575: LD_INT 25
14577: PUSH
14578: LD_INT 26
14580: PUSH
14581: EMPTY
14582: LIST
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: PUSH
14597: LD_INT 101
14599: PUSH
14600: LD_INT 102
14602: PUSH
14603: LD_INT 103
14605: PUSH
14606: LD_INT 105
14608: PUSH
14609: LD_INT 106
14611: PUSH
14612: LD_INT 108
14614: PUSH
14615: LD_INT 112
14617: PUSH
14618: EMPTY
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: PUSH
14627: EMPTY
14628: LIST
14629: LIST
14630: ST_TO_ADDR
14631: GO 16890
14633: LD_INT 8
14635: DOUBLE
14636: EQUAL
14637: IFTRUE 14641
14639: GO 14769
14641: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
14642: LD_ADDR_VAR 0 1
14646: PUSH
14647: LD_INT 2
14649: PUSH
14650: LD_INT 4
14652: PUSH
14653: LD_INT 5
14655: PUSH
14656: LD_INT 6
14658: PUSH
14659: LD_INT 7
14661: PUSH
14662: LD_INT 8
14664: PUSH
14665: LD_INT 11
14667: PUSH
14668: LD_INT 12
14670: PUSH
14671: LD_INT 15
14673: PUSH
14674: LD_INT 16
14676: PUSH
14677: LD_INT 20
14679: PUSH
14680: LD_INT 21
14682: PUSH
14683: LD_INT 22
14685: PUSH
14686: LD_INT 23
14688: PUSH
14689: LD_INT 25
14691: PUSH
14692: LD_INT 26
14694: PUSH
14695: LD_INT 30
14697: PUSH
14698: LD_INT 31
14700: PUSH
14701: LD_INT 32
14703: PUSH
14704: LD_INT 36
14706: PUSH
14707: EMPTY
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: PUSH
14729: LD_INT 101
14731: PUSH
14732: LD_INT 102
14734: PUSH
14735: LD_INT 103
14737: PUSH
14738: LD_INT 105
14740: PUSH
14741: LD_INT 106
14743: PUSH
14744: LD_INT 108
14746: PUSH
14747: LD_INT 109
14749: PUSH
14750: LD_INT 112
14752: PUSH
14753: EMPTY
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: PUSH
14763: EMPTY
14764: LIST
14765: LIST
14766: ST_TO_ADDR
14767: GO 16890
14769: LD_INT 9
14771: DOUBLE
14772: EQUAL
14773: IFTRUE 14777
14775: GO 14913
14777: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
14778: LD_ADDR_VAR 0 1
14782: PUSH
14783: LD_INT 2
14785: PUSH
14786: LD_INT 4
14788: PUSH
14789: LD_INT 5
14791: PUSH
14792: LD_INT 6
14794: PUSH
14795: LD_INT 7
14797: PUSH
14798: LD_INT 8
14800: PUSH
14801: LD_INT 11
14803: PUSH
14804: LD_INT 12
14806: PUSH
14807: LD_INT 15
14809: PUSH
14810: LD_INT 16
14812: PUSH
14813: LD_INT 20
14815: PUSH
14816: LD_INT 21
14818: PUSH
14819: LD_INT 22
14821: PUSH
14822: LD_INT 23
14824: PUSH
14825: LD_INT 25
14827: PUSH
14828: LD_INT 26
14830: PUSH
14831: LD_INT 28
14833: PUSH
14834: LD_INT 30
14836: PUSH
14837: LD_INT 31
14839: PUSH
14840: LD_INT 32
14842: PUSH
14843: LD_INT 36
14845: PUSH
14846: EMPTY
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: LIST
14862: LIST
14863: LIST
14864: LIST
14865: LIST
14866: LIST
14867: LIST
14868: PUSH
14869: LD_INT 101
14871: PUSH
14872: LD_INT 102
14874: PUSH
14875: LD_INT 103
14877: PUSH
14878: LD_INT 105
14880: PUSH
14881: LD_INT 106
14883: PUSH
14884: LD_INT 108
14886: PUSH
14887: LD_INT 109
14889: PUSH
14890: LD_INT 112
14892: PUSH
14893: LD_INT 114
14895: PUSH
14896: EMPTY
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: PUSH
14907: EMPTY
14908: LIST
14909: LIST
14910: ST_TO_ADDR
14911: GO 16890
14913: LD_INT 10
14915: DOUBLE
14916: EQUAL
14917: IFTRUE 14921
14919: GO 15105
14921: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
14922: LD_ADDR_VAR 0 1
14926: PUSH
14927: LD_INT 2
14929: PUSH
14930: LD_INT 4
14932: PUSH
14933: LD_INT 5
14935: PUSH
14936: LD_INT 6
14938: PUSH
14939: LD_INT 7
14941: PUSH
14942: LD_INT 8
14944: PUSH
14945: LD_INT 9
14947: PUSH
14948: LD_INT 10
14950: PUSH
14951: LD_INT 11
14953: PUSH
14954: LD_INT 12
14956: PUSH
14957: LD_INT 13
14959: PUSH
14960: LD_INT 14
14962: PUSH
14963: LD_INT 15
14965: PUSH
14966: LD_INT 16
14968: PUSH
14969: LD_INT 17
14971: PUSH
14972: LD_INT 18
14974: PUSH
14975: LD_INT 19
14977: PUSH
14978: LD_INT 20
14980: PUSH
14981: LD_INT 21
14983: PUSH
14984: LD_INT 22
14986: PUSH
14987: LD_INT 23
14989: PUSH
14990: LD_INT 24
14992: PUSH
14993: LD_INT 25
14995: PUSH
14996: LD_INT 26
14998: PUSH
14999: LD_INT 28
15001: PUSH
15002: LD_INT 30
15004: PUSH
15005: LD_INT 31
15007: PUSH
15008: LD_INT 32
15010: PUSH
15011: LD_INT 36
15013: PUSH
15014: EMPTY
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: PUSH
15045: LD_INT 101
15047: PUSH
15048: LD_INT 102
15050: PUSH
15051: LD_INT 103
15053: PUSH
15054: LD_INT 104
15056: PUSH
15057: LD_INT 105
15059: PUSH
15060: LD_INT 106
15062: PUSH
15063: LD_INT 107
15065: PUSH
15066: LD_INT 108
15068: PUSH
15069: LD_INT 109
15071: PUSH
15072: LD_INT 110
15074: PUSH
15075: LD_INT 111
15077: PUSH
15078: LD_INT 112
15080: PUSH
15081: LD_INT 114
15083: PUSH
15084: EMPTY
15085: LIST
15086: LIST
15087: LIST
15088: LIST
15089: LIST
15090: LIST
15091: LIST
15092: LIST
15093: LIST
15094: LIST
15095: LIST
15096: LIST
15097: LIST
15098: PUSH
15099: EMPTY
15100: LIST
15101: LIST
15102: ST_TO_ADDR
15103: GO 16890
15105: LD_INT 11
15107: DOUBLE
15108: EQUAL
15109: IFTRUE 15113
15111: GO 15305
15113: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
15114: LD_ADDR_VAR 0 1
15118: PUSH
15119: LD_INT 2
15121: PUSH
15122: LD_INT 3
15124: PUSH
15125: LD_INT 4
15127: PUSH
15128: LD_INT 5
15130: PUSH
15131: LD_INT 6
15133: PUSH
15134: LD_INT 7
15136: PUSH
15137: LD_INT 8
15139: PUSH
15140: LD_INT 9
15142: PUSH
15143: LD_INT 10
15145: PUSH
15146: LD_INT 11
15148: PUSH
15149: LD_INT 12
15151: PUSH
15152: LD_INT 13
15154: PUSH
15155: LD_INT 14
15157: PUSH
15158: LD_INT 15
15160: PUSH
15161: LD_INT 16
15163: PUSH
15164: LD_INT 17
15166: PUSH
15167: LD_INT 18
15169: PUSH
15170: LD_INT 19
15172: PUSH
15173: LD_INT 20
15175: PUSH
15176: LD_INT 21
15178: PUSH
15179: LD_INT 22
15181: PUSH
15182: LD_INT 23
15184: PUSH
15185: LD_INT 24
15187: PUSH
15188: LD_INT 25
15190: PUSH
15191: LD_INT 26
15193: PUSH
15194: LD_INT 28
15196: PUSH
15197: LD_INT 30
15199: PUSH
15200: LD_INT 31
15202: PUSH
15203: LD_INT 32
15205: PUSH
15206: LD_INT 34
15208: PUSH
15209: LD_INT 36
15211: PUSH
15212: EMPTY
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: PUSH
15245: LD_INT 101
15247: PUSH
15248: LD_INT 102
15250: PUSH
15251: LD_INT 103
15253: PUSH
15254: LD_INT 104
15256: PUSH
15257: LD_INT 105
15259: PUSH
15260: LD_INT 106
15262: PUSH
15263: LD_INT 107
15265: PUSH
15266: LD_INT 108
15268: PUSH
15269: LD_INT 109
15271: PUSH
15272: LD_INT 110
15274: PUSH
15275: LD_INT 111
15277: PUSH
15278: LD_INT 112
15280: PUSH
15281: LD_INT 114
15283: PUSH
15284: EMPTY
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: PUSH
15299: EMPTY
15300: LIST
15301: LIST
15302: ST_TO_ADDR
15303: GO 16890
15305: LD_INT 12
15307: DOUBLE
15308: EQUAL
15309: IFTRUE 15313
15311: GO 15521
15313: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
15314: LD_ADDR_VAR 0 1
15318: PUSH
15319: LD_INT 1
15321: PUSH
15322: LD_INT 2
15324: PUSH
15325: LD_INT 3
15327: PUSH
15328: LD_INT 4
15330: PUSH
15331: LD_INT 5
15333: PUSH
15334: LD_INT 6
15336: PUSH
15337: LD_INT 7
15339: PUSH
15340: LD_INT 8
15342: PUSH
15343: LD_INT 9
15345: PUSH
15346: LD_INT 10
15348: PUSH
15349: LD_INT 11
15351: PUSH
15352: LD_INT 12
15354: PUSH
15355: LD_INT 13
15357: PUSH
15358: LD_INT 14
15360: PUSH
15361: LD_INT 15
15363: PUSH
15364: LD_INT 16
15366: PUSH
15367: LD_INT 17
15369: PUSH
15370: LD_INT 18
15372: PUSH
15373: LD_INT 19
15375: PUSH
15376: LD_INT 20
15378: PUSH
15379: LD_INT 21
15381: PUSH
15382: LD_INT 22
15384: PUSH
15385: LD_INT 23
15387: PUSH
15388: LD_INT 24
15390: PUSH
15391: LD_INT 25
15393: PUSH
15394: LD_INT 26
15396: PUSH
15397: LD_INT 27
15399: PUSH
15400: LD_INT 28
15402: PUSH
15403: LD_INT 30
15405: PUSH
15406: LD_INT 31
15408: PUSH
15409: LD_INT 32
15411: PUSH
15412: LD_INT 33
15414: PUSH
15415: LD_INT 34
15417: PUSH
15418: LD_INT 36
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: PUSH
15457: LD_INT 101
15459: PUSH
15460: LD_INT 102
15462: PUSH
15463: LD_INT 103
15465: PUSH
15466: LD_INT 104
15468: PUSH
15469: LD_INT 105
15471: PUSH
15472: LD_INT 106
15474: PUSH
15475: LD_INT 107
15477: PUSH
15478: LD_INT 108
15480: PUSH
15481: LD_INT 109
15483: PUSH
15484: LD_INT 110
15486: PUSH
15487: LD_INT 111
15489: PUSH
15490: LD_INT 112
15492: PUSH
15493: LD_INT 113
15495: PUSH
15496: LD_INT 114
15498: PUSH
15499: EMPTY
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: PUSH
15515: EMPTY
15516: LIST
15517: LIST
15518: ST_TO_ADDR
15519: GO 16890
15521: LD_INT 13
15523: DOUBLE
15524: EQUAL
15525: IFTRUE 15529
15527: GO 15725
15529: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
15530: LD_ADDR_VAR 0 1
15534: PUSH
15535: LD_INT 1
15537: PUSH
15538: LD_INT 2
15540: PUSH
15541: LD_INT 3
15543: PUSH
15544: LD_INT 4
15546: PUSH
15547: LD_INT 5
15549: PUSH
15550: LD_INT 8
15552: PUSH
15553: LD_INT 9
15555: PUSH
15556: LD_INT 10
15558: PUSH
15559: LD_INT 11
15561: PUSH
15562: LD_INT 12
15564: PUSH
15565: LD_INT 14
15567: PUSH
15568: LD_INT 15
15570: PUSH
15571: LD_INT 16
15573: PUSH
15574: LD_INT 17
15576: PUSH
15577: LD_INT 18
15579: PUSH
15580: LD_INT 19
15582: PUSH
15583: LD_INT 20
15585: PUSH
15586: LD_INT 21
15588: PUSH
15589: LD_INT 22
15591: PUSH
15592: LD_INT 23
15594: PUSH
15595: LD_INT 24
15597: PUSH
15598: LD_INT 25
15600: PUSH
15601: LD_INT 26
15603: PUSH
15604: LD_INT 27
15606: PUSH
15607: LD_INT 28
15609: PUSH
15610: LD_INT 30
15612: PUSH
15613: LD_INT 31
15615: PUSH
15616: LD_INT 32
15618: PUSH
15619: LD_INT 33
15621: PUSH
15622: LD_INT 34
15624: PUSH
15625: LD_INT 36
15627: PUSH
15628: EMPTY
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: PUSH
15661: LD_INT 101
15663: PUSH
15664: LD_INT 102
15666: PUSH
15667: LD_INT 103
15669: PUSH
15670: LD_INT 104
15672: PUSH
15673: LD_INT 105
15675: PUSH
15676: LD_INT 106
15678: PUSH
15679: LD_INT 107
15681: PUSH
15682: LD_INT 108
15684: PUSH
15685: LD_INT 109
15687: PUSH
15688: LD_INT 110
15690: PUSH
15691: LD_INT 111
15693: PUSH
15694: LD_INT 112
15696: PUSH
15697: LD_INT 113
15699: PUSH
15700: LD_INT 114
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: PUSH
15719: EMPTY
15720: LIST
15721: LIST
15722: ST_TO_ADDR
15723: GO 16890
15725: LD_INT 14
15727: DOUBLE
15728: EQUAL
15729: IFTRUE 15733
15731: GO 15945
15733: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
15734: LD_ADDR_VAR 0 1
15738: PUSH
15739: LD_INT 1
15741: PUSH
15742: LD_INT 2
15744: PUSH
15745: LD_INT 3
15747: PUSH
15748: LD_INT 4
15750: PUSH
15751: LD_INT 5
15753: PUSH
15754: LD_INT 6
15756: PUSH
15757: LD_INT 7
15759: PUSH
15760: LD_INT 8
15762: PUSH
15763: LD_INT 9
15765: PUSH
15766: LD_INT 10
15768: PUSH
15769: LD_INT 11
15771: PUSH
15772: LD_INT 12
15774: PUSH
15775: LD_INT 13
15777: PUSH
15778: LD_INT 14
15780: PUSH
15781: LD_INT 15
15783: PUSH
15784: LD_INT 16
15786: PUSH
15787: LD_INT 17
15789: PUSH
15790: LD_INT 18
15792: PUSH
15793: LD_INT 19
15795: PUSH
15796: LD_INT 20
15798: PUSH
15799: LD_INT 21
15801: PUSH
15802: LD_INT 22
15804: PUSH
15805: LD_INT 23
15807: PUSH
15808: LD_INT 24
15810: PUSH
15811: LD_INT 25
15813: PUSH
15814: LD_INT 26
15816: PUSH
15817: LD_INT 27
15819: PUSH
15820: LD_INT 28
15822: PUSH
15823: LD_INT 29
15825: PUSH
15826: LD_INT 30
15828: PUSH
15829: LD_INT 31
15831: PUSH
15832: LD_INT 32
15834: PUSH
15835: LD_INT 33
15837: PUSH
15838: LD_INT 34
15840: PUSH
15841: LD_INT 36
15843: PUSH
15844: EMPTY
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: PUSH
15881: LD_INT 101
15883: PUSH
15884: LD_INT 102
15886: PUSH
15887: LD_INT 103
15889: PUSH
15890: LD_INT 104
15892: PUSH
15893: LD_INT 105
15895: PUSH
15896: LD_INT 106
15898: PUSH
15899: LD_INT 107
15901: PUSH
15902: LD_INT 108
15904: PUSH
15905: LD_INT 109
15907: PUSH
15908: LD_INT 110
15910: PUSH
15911: LD_INT 111
15913: PUSH
15914: LD_INT 112
15916: PUSH
15917: LD_INT 113
15919: PUSH
15920: LD_INT 114
15922: PUSH
15923: EMPTY
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: PUSH
15939: EMPTY
15940: LIST
15941: LIST
15942: ST_TO_ADDR
15943: GO 16890
15945: LD_INT 15
15947: DOUBLE
15948: EQUAL
15949: IFTRUE 15953
15951: GO 16165
15953: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
15954: LD_ADDR_VAR 0 1
15958: PUSH
15959: LD_INT 1
15961: PUSH
15962: LD_INT 2
15964: PUSH
15965: LD_INT 3
15967: PUSH
15968: LD_INT 4
15970: PUSH
15971: LD_INT 5
15973: PUSH
15974: LD_INT 6
15976: PUSH
15977: LD_INT 7
15979: PUSH
15980: LD_INT 8
15982: PUSH
15983: LD_INT 9
15985: PUSH
15986: LD_INT 10
15988: PUSH
15989: LD_INT 11
15991: PUSH
15992: LD_INT 12
15994: PUSH
15995: LD_INT 13
15997: PUSH
15998: LD_INT 14
16000: PUSH
16001: LD_INT 15
16003: PUSH
16004: LD_INT 16
16006: PUSH
16007: LD_INT 17
16009: PUSH
16010: LD_INT 18
16012: PUSH
16013: LD_INT 19
16015: PUSH
16016: LD_INT 20
16018: PUSH
16019: LD_INT 21
16021: PUSH
16022: LD_INT 22
16024: PUSH
16025: LD_INT 23
16027: PUSH
16028: LD_INT 24
16030: PUSH
16031: LD_INT 25
16033: PUSH
16034: LD_INT 26
16036: PUSH
16037: LD_INT 27
16039: PUSH
16040: LD_INT 28
16042: PUSH
16043: LD_INT 29
16045: PUSH
16046: LD_INT 30
16048: PUSH
16049: LD_INT 31
16051: PUSH
16052: LD_INT 32
16054: PUSH
16055: LD_INT 33
16057: PUSH
16058: LD_INT 34
16060: PUSH
16061: LD_INT 36
16063: PUSH
16064: EMPTY
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: PUSH
16101: LD_INT 101
16103: PUSH
16104: LD_INT 102
16106: PUSH
16107: LD_INT 103
16109: PUSH
16110: LD_INT 104
16112: PUSH
16113: LD_INT 105
16115: PUSH
16116: LD_INT 106
16118: PUSH
16119: LD_INT 107
16121: PUSH
16122: LD_INT 108
16124: PUSH
16125: LD_INT 109
16127: PUSH
16128: LD_INT 110
16130: PUSH
16131: LD_INT 111
16133: PUSH
16134: LD_INT 112
16136: PUSH
16137: LD_INT 113
16139: PUSH
16140: LD_INT 114
16142: PUSH
16143: EMPTY
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: PUSH
16159: EMPTY
16160: LIST
16161: LIST
16162: ST_TO_ADDR
16163: GO 16890
16165: LD_INT 16
16167: DOUBLE
16168: EQUAL
16169: IFTRUE 16173
16171: GO 16297
16173: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
16174: LD_ADDR_VAR 0 1
16178: PUSH
16179: LD_INT 2
16181: PUSH
16182: LD_INT 4
16184: PUSH
16185: LD_INT 5
16187: PUSH
16188: LD_INT 7
16190: PUSH
16191: LD_INT 11
16193: PUSH
16194: LD_INT 12
16196: PUSH
16197: LD_INT 15
16199: PUSH
16200: LD_INT 16
16202: PUSH
16203: LD_INT 20
16205: PUSH
16206: LD_INT 21
16208: PUSH
16209: LD_INT 22
16211: PUSH
16212: LD_INT 23
16214: PUSH
16215: LD_INT 25
16217: PUSH
16218: LD_INT 26
16220: PUSH
16221: LD_INT 30
16223: PUSH
16224: LD_INT 31
16226: PUSH
16227: LD_INT 32
16229: PUSH
16230: LD_INT 33
16232: PUSH
16233: LD_INT 34
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: PUSH
16257: LD_INT 101
16259: PUSH
16260: LD_INT 102
16262: PUSH
16263: LD_INT 103
16265: PUSH
16266: LD_INT 106
16268: PUSH
16269: LD_INT 108
16271: PUSH
16272: LD_INT 112
16274: PUSH
16275: LD_INT 113
16277: PUSH
16278: LD_INT 114
16280: PUSH
16281: EMPTY
16282: LIST
16283: LIST
16284: LIST
16285: LIST
16286: LIST
16287: LIST
16288: LIST
16289: LIST
16290: PUSH
16291: EMPTY
16292: LIST
16293: LIST
16294: ST_TO_ADDR
16295: GO 16890
16297: LD_INT 17
16299: DOUBLE
16300: EQUAL
16301: IFTRUE 16305
16303: GO 16517
16305: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
16306: LD_ADDR_VAR 0 1
16310: PUSH
16311: LD_INT 1
16313: PUSH
16314: LD_INT 2
16316: PUSH
16317: LD_INT 3
16319: PUSH
16320: LD_INT 4
16322: PUSH
16323: LD_INT 5
16325: PUSH
16326: LD_INT 6
16328: PUSH
16329: LD_INT 7
16331: PUSH
16332: LD_INT 8
16334: PUSH
16335: LD_INT 9
16337: PUSH
16338: LD_INT 10
16340: PUSH
16341: LD_INT 11
16343: PUSH
16344: LD_INT 12
16346: PUSH
16347: LD_INT 13
16349: PUSH
16350: LD_INT 14
16352: PUSH
16353: LD_INT 15
16355: PUSH
16356: LD_INT 16
16358: PUSH
16359: LD_INT 17
16361: PUSH
16362: LD_INT 18
16364: PUSH
16365: LD_INT 19
16367: PUSH
16368: LD_INT 20
16370: PUSH
16371: LD_INT 21
16373: PUSH
16374: LD_INT 22
16376: PUSH
16377: LD_INT 23
16379: PUSH
16380: LD_INT 24
16382: PUSH
16383: LD_INT 25
16385: PUSH
16386: LD_INT 26
16388: PUSH
16389: LD_INT 27
16391: PUSH
16392: LD_INT 28
16394: PUSH
16395: LD_INT 29
16397: PUSH
16398: LD_INT 30
16400: PUSH
16401: LD_INT 31
16403: PUSH
16404: LD_INT 32
16406: PUSH
16407: LD_INT 33
16409: PUSH
16410: LD_INT 34
16412: PUSH
16413: LD_INT 36
16415: PUSH
16416: EMPTY
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: LIST
16428: LIST
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: LIST
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: PUSH
16453: LD_INT 101
16455: PUSH
16456: LD_INT 102
16458: PUSH
16459: LD_INT 103
16461: PUSH
16462: LD_INT 104
16464: PUSH
16465: LD_INT 105
16467: PUSH
16468: LD_INT 106
16470: PUSH
16471: LD_INT 107
16473: PUSH
16474: LD_INT 108
16476: PUSH
16477: LD_INT 109
16479: PUSH
16480: LD_INT 110
16482: PUSH
16483: LD_INT 111
16485: PUSH
16486: LD_INT 112
16488: PUSH
16489: LD_INT 113
16491: PUSH
16492: LD_INT 114
16494: PUSH
16495: EMPTY
16496: LIST
16497: LIST
16498: LIST
16499: LIST
16500: LIST
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: LIST
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: ST_TO_ADDR
16515: GO 16890
16517: LD_INT 18
16519: DOUBLE
16520: EQUAL
16521: IFTRUE 16525
16523: GO 16661
16525: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
16526: LD_ADDR_VAR 0 1
16530: PUSH
16531: LD_INT 2
16533: PUSH
16534: LD_INT 4
16536: PUSH
16537: LD_INT 5
16539: PUSH
16540: LD_INT 7
16542: PUSH
16543: LD_INT 11
16545: PUSH
16546: LD_INT 12
16548: PUSH
16549: LD_INT 15
16551: PUSH
16552: LD_INT 16
16554: PUSH
16555: LD_INT 20
16557: PUSH
16558: LD_INT 21
16560: PUSH
16561: LD_INT 22
16563: PUSH
16564: LD_INT 23
16566: PUSH
16567: LD_INT 25
16569: PUSH
16570: LD_INT 26
16572: PUSH
16573: LD_INT 30
16575: PUSH
16576: LD_INT 31
16578: PUSH
16579: LD_INT 32
16581: PUSH
16582: LD_INT 33
16584: PUSH
16585: LD_INT 34
16587: PUSH
16588: LD_INT 35
16590: PUSH
16591: LD_INT 36
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: LIST
16614: LIST
16615: LIST
16616: PUSH
16617: LD_INT 101
16619: PUSH
16620: LD_INT 102
16622: PUSH
16623: LD_INT 103
16625: PUSH
16626: LD_INT 106
16628: PUSH
16629: LD_INT 108
16631: PUSH
16632: LD_INT 112
16634: PUSH
16635: LD_INT 113
16637: PUSH
16638: LD_INT 114
16640: PUSH
16641: LD_INT 115
16643: PUSH
16644: EMPTY
16645: LIST
16646: LIST
16647: LIST
16648: LIST
16649: LIST
16650: LIST
16651: LIST
16652: LIST
16653: LIST
16654: PUSH
16655: EMPTY
16656: LIST
16657: LIST
16658: ST_TO_ADDR
16659: GO 16890
16661: LD_INT 19
16663: DOUBLE
16664: EQUAL
16665: IFTRUE 16669
16667: GO 16889
16669: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
16670: LD_ADDR_VAR 0 1
16674: PUSH
16675: LD_INT 1
16677: PUSH
16678: LD_INT 2
16680: PUSH
16681: LD_INT 3
16683: PUSH
16684: LD_INT 4
16686: PUSH
16687: LD_INT 5
16689: PUSH
16690: LD_INT 6
16692: PUSH
16693: LD_INT 7
16695: PUSH
16696: LD_INT 8
16698: PUSH
16699: LD_INT 9
16701: PUSH
16702: LD_INT 10
16704: PUSH
16705: LD_INT 11
16707: PUSH
16708: LD_INT 12
16710: PUSH
16711: LD_INT 13
16713: PUSH
16714: LD_INT 14
16716: PUSH
16717: LD_INT 15
16719: PUSH
16720: LD_INT 16
16722: PUSH
16723: LD_INT 17
16725: PUSH
16726: LD_INT 18
16728: PUSH
16729: LD_INT 19
16731: PUSH
16732: LD_INT 20
16734: PUSH
16735: LD_INT 21
16737: PUSH
16738: LD_INT 22
16740: PUSH
16741: LD_INT 23
16743: PUSH
16744: LD_INT 24
16746: PUSH
16747: LD_INT 25
16749: PUSH
16750: LD_INT 26
16752: PUSH
16753: LD_INT 27
16755: PUSH
16756: LD_INT 28
16758: PUSH
16759: LD_INT 29
16761: PUSH
16762: LD_INT 30
16764: PUSH
16765: LD_INT 31
16767: PUSH
16768: LD_INT 32
16770: PUSH
16771: LD_INT 33
16773: PUSH
16774: LD_INT 34
16776: PUSH
16777: LD_INT 35
16779: PUSH
16780: LD_INT 36
16782: PUSH
16783: EMPTY
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: PUSH
16821: LD_INT 101
16823: PUSH
16824: LD_INT 102
16826: PUSH
16827: LD_INT 103
16829: PUSH
16830: LD_INT 104
16832: PUSH
16833: LD_INT 105
16835: PUSH
16836: LD_INT 106
16838: PUSH
16839: LD_INT 107
16841: PUSH
16842: LD_INT 108
16844: PUSH
16845: LD_INT 109
16847: PUSH
16848: LD_INT 110
16850: PUSH
16851: LD_INT 111
16853: PUSH
16854: LD_INT 112
16856: PUSH
16857: LD_INT 113
16859: PUSH
16860: LD_INT 114
16862: PUSH
16863: LD_INT 115
16865: PUSH
16866: EMPTY
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: LIST
16876: LIST
16877: LIST
16878: LIST
16879: LIST
16880: LIST
16881: LIST
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: ST_TO_ADDR
16887: GO 16890
16889: POP
// end else
16890: GO 17109
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
16892: LD_ADDR_VAR 0 1
16896: PUSH
16897: LD_INT 1
16899: PUSH
16900: LD_INT 2
16902: PUSH
16903: LD_INT 3
16905: PUSH
16906: LD_INT 4
16908: PUSH
16909: LD_INT 5
16911: PUSH
16912: LD_INT 6
16914: PUSH
16915: LD_INT 7
16917: PUSH
16918: LD_INT 8
16920: PUSH
16921: LD_INT 9
16923: PUSH
16924: LD_INT 10
16926: PUSH
16927: LD_INT 11
16929: PUSH
16930: LD_INT 12
16932: PUSH
16933: LD_INT 13
16935: PUSH
16936: LD_INT 14
16938: PUSH
16939: LD_INT 15
16941: PUSH
16942: LD_INT 16
16944: PUSH
16945: LD_INT 17
16947: PUSH
16948: LD_INT 18
16950: PUSH
16951: LD_INT 19
16953: PUSH
16954: LD_INT 20
16956: PUSH
16957: LD_INT 21
16959: PUSH
16960: LD_INT 22
16962: PUSH
16963: LD_INT 23
16965: PUSH
16966: LD_INT 24
16968: PUSH
16969: LD_INT 25
16971: PUSH
16972: LD_INT 26
16974: PUSH
16975: LD_INT 27
16977: PUSH
16978: LD_INT 28
16980: PUSH
16981: LD_INT 29
16983: PUSH
16984: LD_INT 30
16986: PUSH
16987: LD_INT 31
16989: PUSH
16990: LD_INT 32
16992: PUSH
16993: LD_INT 33
16995: PUSH
16996: LD_INT 34
16998: PUSH
16999: LD_INT 35
17001: PUSH
17002: LD_INT 36
17004: PUSH
17005: EMPTY
17006: LIST
17007: LIST
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: PUSH
17043: LD_INT 101
17045: PUSH
17046: LD_INT 102
17048: PUSH
17049: LD_INT 103
17051: PUSH
17052: LD_INT 104
17054: PUSH
17055: LD_INT 105
17057: PUSH
17058: LD_INT 106
17060: PUSH
17061: LD_INT 107
17063: PUSH
17064: LD_INT 108
17066: PUSH
17067: LD_INT 109
17069: PUSH
17070: LD_INT 110
17072: PUSH
17073: LD_INT 111
17075: PUSH
17076: LD_INT 112
17078: PUSH
17079: LD_INT 113
17081: PUSH
17082: LD_INT 114
17084: PUSH
17085: LD_INT 115
17087: PUSH
17088: EMPTY
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: LIST
17104: PUSH
17105: EMPTY
17106: LIST
17107: LIST
17108: ST_TO_ADDR
// if result then
17109: LD_VAR 0 1
17113: IFFALSE 17402
// begin normal :=  ;
17115: LD_ADDR_VAR 0 3
17119: PUSH
17120: LD_STRING 
17122: ST_TO_ADDR
// hardcore :=  ;
17123: LD_ADDR_VAR 0 4
17127: PUSH
17128: LD_STRING 
17130: ST_TO_ADDR
// for i = 1 to normalCounter do
17131: LD_ADDR_VAR 0 5
17135: PUSH
17136: DOUBLE
17137: LD_INT 1
17139: DEC
17140: ST_TO_ADDR
17141: LD_EXP 49
17145: PUSH
17146: FOR_TO
17147: IFFALSE 17248
// begin tmp := 0 ;
17149: LD_ADDR_VAR 0 2
17153: PUSH
17154: LD_STRING 0
17156: ST_TO_ADDR
// if result [ 1 ] then
17157: LD_VAR 0 1
17161: PUSH
17162: LD_INT 1
17164: ARRAY
17165: IFFALSE 17230
// if result [ 1 ] [ 1 ] = i then
17167: LD_VAR 0 1
17171: PUSH
17172: LD_INT 1
17174: ARRAY
17175: PUSH
17176: LD_INT 1
17178: ARRAY
17179: PUSH
17180: LD_VAR 0 5
17184: EQUAL
17185: IFFALSE 17230
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
17187: LD_ADDR_VAR 0 1
17191: PUSH
17192: LD_VAR 0 1
17196: PPUSH
17197: LD_INT 1
17199: PPUSH
17200: LD_VAR 0 1
17204: PUSH
17205: LD_INT 1
17207: ARRAY
17208: PPUSH
17209: LD_INT 1
17211: PPUSH
17212: CALL_OW 3
17216: PPUSH
17217: CALL_OW 1
17221: ST_TO_ADDR
// tmp := 1 ;
17222: LD_ADDR_VAR 0 2
17226: PUSH
17227: LD_STRING 1
17229: ST_TO_ADDR
// end ; normal := normal & tmp ;
17230: LD_ADDR_VAR 0 3
17234: PUSH
17235: LD_VAR 0 3
17239: PUSH
17240: LD_VAR 0 2
17244: STR
17245: ST_TO_ADDR
// end ;
17246: GO 17146
17248: POP
17249: POP
// for i = 1 to hardcoreCounter do
17250: LD_ADDR_VAR 0 5
17254: PUSH
17255: DOUBLE
17256: LD_INT 1
17258: DEC
17259: ST_TO_ADDR
17260: LD_EXP 50
17264: PUSH
17265: FOR_TO
17266: IFFALSE 17371
// begin tmp := 0 ;
17268: LD_ADDR_VAR 0 2
17272: PUSH
17273: LD_STRING 0
17275: ST_TO_ADDR
// if result [ 2 ] then
17276: LD_VAR 0 1
17280: PUSH
17281: LD_INT 2
17283: ARRAY
17284: IFFALSE 17353
// if result [ 2 ] [ 1 ] = 100 + i then
17286: LD_VAR 0 1
17290: PUSH
17291: LD_INT 2
17293: ARRAY
17294: PUSH
17295: LD_INT 1
17297: ARRAY
17298: PUSH
17299: LD_INT 100
17301: PUSH
17302: LD_VAR 0 5
17306: PLUS
17307: EQUAL
17308: IFFALSE 17353
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17310: LD_ADDR_VAR 0 1
17314: PUSH
17315: LD_VAR 0 1
17319: PPUSH
17320: LD_INT 2
17322: PPUSH
17323: LD_VAR 0 1
17327: PUSH
17328: LD_INT 2
17330: ARRAY
17331: PPUSH
17332: LD_INT 1
17334: PPUSH
17335: CALL_OW 3
17339: PPUSH
17340: CALL_OW 1
17344: ST_TO_ADDR
// tmp := 1 ;
17345: LD_ADDR_VAR 0 2
17349: PUSH
17350: LD_STRING 1
17352: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17353: LD_ADDR_VAR 0 4
17357: PUSH
17358: LD_VAR 0 4
17362: PUSH
17363: LD_VAR 0 2
17367: STR
17368: ST_TO_ADDR
// end ;
17369: GO 17265
17371: POP
17372: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
17373: LD_STRING getStreamItemsFromMission("
17375: PUSH
17376: LD_VAR 0 3
17380: STR
17381: PUSH
17382: LD_STRING ","
17384: STR
17385: PUSH
17386: LD_VAR 0 4
17390: STR
17391: PUSH
17392: LD_STRING ")
17394: STR
17395: PPUSH
17396: CALL_OW 559
// end else
17400: GO 17409
// ToLua ( getStreamItemsFromMission("","") ) ;
17402: LD_STRING getStreamItemsFromMission("","")
17404: PPUSH
17405: CALL_OW 559
// end ;
17409: LD_VAR 0 1
17413: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17414: LD_EXP 48
17418: PUSH
17419: LD_EXP 53
17423: AND
17424: IFFALSE 17548
17426: GO 17428
17428: DISABLE
17429: LD_INT 0
17431: PPUSH
17432: PPUSH
// begin enable ;
17433: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17434: LD_ADDR_VAR 0 2
17438: PUSH
17439: LD_INT 22
17441: PUSH
17442: LD_OWVAR 2
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: PUSH
17451: LD_INT 2
17453: PUSH
17454: LD_INT 34
17456: PUSH
17457: LD_INT 7
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: PUSH
17464: LD_INT 34
17466: PUSH
17467: LD_INT 45
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: PUSH
17474: LD_INT 34
17476: PUSH
17477: LD_INT 28
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: PUSH
17484: LD_INT 34
17486: PUSH
17487: LD_INT 47
17489: PUSH
17490: EMPTY
17491: LIST
17492: LIST
17493: PUSH
17494: EMPTY
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: LIST
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: PPUSH
17505: CALL_OW 69
17509: ST_TO_ADDR
// if not tmp then
17510: LD_VAR 0 2
17514: NOT
17515: IFFALSE 17519
// exit ;
17517: GO 17548
// for i in tmp do
17519: LD_ADDR_VAR 0 1
17523: PUSH
17524: LD_VAR 0 2
17528: PUSH
17529: FOR_IN
17530: IFFALSE 17546
// begin SetLives ( i , 0 ) ;
17532: LD_VAR 0 1
17536: PPUSH
17537: LD_INT 0
17539: PPUSH
17540: CALL_OW 234
// end ;
17544: GO 17529
17546: POP
17547: POP
// end ;
17548: PPOPN 2
17550: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17551: LD_EXP 48
17555: PUSH
17556: LD_EXP 54
17560: AND
17561: IFFALSE 17645
17563: GO 17565
17565: DISABLE
17566: LD_INT 0
17568: PPUSH
17569: PPUSH
// begin enable ;
17570: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17571: LD_ADDR_VAR 0 2
17575: PUSH
17576: LD_INT 22
17578: PUSH
17579: LD_OWVAR 2
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: PUSH
17588: LD_INT 32
17590: PUSH
17591: LD_INT 3
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: PPUSH
17602: CALL_OW 69
17606: ST_TO_ADDR
// if not tmp then
17607: LD_VAR 0 2
17611: NOT
17612: IFFALSE 17616
// exit ;
17614: GO 17645
// for i in tmp do
17616: LD_ADDR_VAR 0 1
17620: PUSH
17621: LD_VAR 0 2
17625: PUSH
17626: FOR_IN
17627: IFFALSE 17643
// begin SetLives ( i , 0 ) ;
17629: LD_VAR 0 1
17633: PPUSH
17634: LD_INT 0
17636: PPUSH
17637: CALL_OW 234
// end ;
17641: GO 17626
17643: POP
17644: POP
// end ;
17645: PPOPN 2
17647: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17648: LD_EXP 48
17652: PUSH
17653: LD_EXP 51
17657: AND
17658: IFFALSE 17751
17660: GO 17662
17662: DISABLE
17663: LD_INT 0
17665: PPUSH
// begin enable ;
17666: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17667: LD_ADDR_VAR 0 1
17671: PUSH
17672: LD_INT 22
17674: PUSH
17675: LD_OWVAR 2
17679: PUSH
17680: EMPTY
17681: LIST
17682: LIST
17683: PUSH
17684: LD_INT 2
17686: PUSH
17687: LD_INT 25
17689: PUSH
17690: LD_INT 5
17692: PUSH
17693: EMPTY
17694: LIST
17695: LIST
17696: PUSH
17697: LD_INT 25
17699: PUSH
17700: LD_INT 9
17702: PUSH
17703: EMPTY
17704: LIST
17705: LIST
17706: PUSH
17707: LD_INT 25
17709: PUSH
17710: LD_INT 8
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: PPUSH
17727: CALL_OW 69
17731: PUSH
17732: FOR_IN
17733: IFFALSE 17749
// begin SetClass ( i , 1 ) ;
17735: LD_VAR 0 1
17739: PPUSH
17740: LD_INT 1
17742: PPUSH
17743: CALL_OW 336
// end ;
17747: GO 17732
17749: POP
17750: POP
// end ;
17751: PPOPN 1
17753: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17754: LD_EXP 48
17758: PUSH
17759: LD_EXP 52
17763: AND
17764: PUSH
17765: LD_OWVAR 65
17769: PUSH
17770: LD_INT 7
17772: LESS
17773: AND
17774: IFFALSE 17788
17776: GO 17778
17778: DISABLE
// begin enable ;
17779: ENABLE
// game_speed := 7 ;
17780: LD_ADDR_OWVAR 65
17784: PUSH
17785: LD_INT 7
17787: ST_TO_ADDR
// end ;
17788: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17789: LD_EXP 48
17793: PUSH
17794: LD_EXP 55
17798: AND
17799: IFFALSE 18001
17801: GO 17803
17803: DISABLE
17804: LD_INT 0
17806: PPUSH
17807: PPUSH
17808: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17809: LD_ADDR_VAR 0 3
17813: PUSH
17814: LD_INT 81
17816: PUSH
17817: LD_OWVAR 2
17821: PUSH
17822: EMPTY
17823: LIST
17824: LIST
17825: PUSH
17826: LD_INT 21
17828: PUSH
17829: LD_INT 1
17831: PUSH
17832: EMPTY
17833: LIST
17834: LIST
17835: PUSH
17836: EMPTY
17837: LIST
17838: LIST
17839: PPUSH
17840: CALL_OW 69
17844: ST_TO_ADDR
// if not tmp then
17845: LD_VAR 0 3
17849: NOT
17850: IFFALSE 17854
// exit ;
17852: GO 18001
// if tmp > 5 then
17854: LD_VAR 0 3
17858: PUSH
17859: LD_INT 5
17861: GREATER
17862: IFFALSE 17874
// k := 5 else
17864: LD_ADDR_VAR 0 2
17868: PUSH
17869: LD_INT 5
17871: ST_TO_ADDR
17872: GO 17884
// k := tmp ;
17874: LD_ADDR_VAR 0 2
17878: PUSH
17879: LD_VAR 0 3
17883: ST_TO_ADDR
// for i := 1 to k do
17884: LD_ADDR_VAR 0 1
17888: PUSH
17889: DOUBLE
17890: LD_INT 1
17892: DEC
17893: ST_TO_ADDR
17894: LD_VAR 0 2
17898: PUSH
17899: FOR_TO
17900: IFFALSE 17999
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17902: LD_VAR 0 3
17906: PUSH
17907: LD_VAR 0 1
17911: ARRAY
17912: PPUSH
17913: LD_VAR 0 1
17917: PUSH
17918: LD_INT 4
17920: MOD
17921: PUSH
17922: LD_INT 1
17924: PLUS
17925: PPUSH
17926: CALL_OW 259
17930: PUSH
17931: LD_INT 10
17933: LESS
17934: IFFALSE 17997
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17936: LD_VAR 0 3
17940: PUSH
17941: LD_VAR 0 1
17945: ARRAY
17946: PPUSH
17947: LD_VAR 0 1
17951: PUSH
17952: LD_INT 4
17954: MOD
17955: PUSH
17956: LD_INT 1
17958: PLUS
17959: PPUSH
17960: LD_VAR 0 3
17964: PUSH
17965: LD_VAR 0 1
17969: ARRAY
17970: PPUSH
17971: LD_VAR 0 1
17975: PUSH
17976: LD_INT 4
17978: MOD
17979: PUSH
17980: LD_INT 1
17982: PLUS
17983: PPUSH
17984: CALL_OW 259
17988: PUSH
17989: LD_INT 1
17991: PLUS
17992: PPUSH
17993: CALL_OW 237
17997: GO 17899
17999: POP
18000: POP
// end ;
18001: PPOPN 3
18003: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18004: LD_EXP 48
18008: PUSH
18009: LD_EXP 56
18013: AND
18014: IFFALSE 18034
18016: GO 18018
18018: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18019: LD_INT 4
18021: PPUSH
18022: LD_OWVAR 2
18026: PPUSH
18027: LD_INT 0
18029: PPUSH
18030: CALL_OW 324
18034: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18035: LD_EXP 48
18039: PUSH
18040: LD_EXP 85
18044: AND
18045: IFFALSE 18065
18047: GO 18049
18049: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18050: LD_INT 19
18052: PPUSH
18053: LD_OWVAR 2
18057: PPUSH
18058: LD_INT 0
18060: PPUSH
18061: CALL_OW 324
18065: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18066: LD_EXP 48
18070: PUSH
18071: LD_EXP 57
18075: AND
18076: IFFALSE 18178
18078: GO 18080
18080: DISABLE
18081: LD_INT 0
18083: PPUSH
18084: PPUSH
// begin enable ;
18085: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18086: LD_ADDR_VAR 0 2
18090: PUSH
18091: LD_INT 22
18093: PUSH
18094: LD_OWVAR 2
18098: PUSH
18099: EMPTY
18100: LIST
18101: LIST
18102: PUSH
18103: LD_INT 2
18105: PUSH
18106: LD_INT 34
18108: PUSH
18109: LD_INT 11
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PUSH
18116: LD_INT 34
18118: PUSH
18119: LD_INT 30
18121: PUSH
18122: EMPTY
18123: LIST
18124: LIST
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: LIST
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PPUSH
18135: CALL_OW 69
18139: ST_TO_ADDR
// if not tmp then
18140: LD_VAR 0 2
18144: NOT
18145: IFFALSE 18149
// exit ;
18147: GO 18178
// for i in tmp do
18149: LD_ADDR_VAR 0 1
18153: PUSH
18154: LD_VAR 0 2
18158: PUSH
18159: FOR_IN
18160: IFFALSE 18176
// begin SetLives ( i , 0 ) ;
18162: LD_VAR 0 1
18166: PPUSH
18167: LD_INT 0
18169: PPUSH
18170: CALL_OW 234
// end ;
18174: GO 18159
18176: POP
18177: POP
// end ;
18178: PPOPN 2
18180: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18181: LD_EXP 48
18185: PUSH
18186: LD_EXP 58
18190: AND
18191: IFFALSE 18211
18193: GO 18195
18195: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18196: LD_INT 32
18198: PPUSH
18199: LD_OWVAR 2
18203: PPUSH
18204: LD_INT 0
18206: PPUSH
18207: CALL_OW 324
18211: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18212: LD_EXP 48
18216: PUSH
18217: LD_EXP 59
18221: AND
18222: IFFALSE 18403
18224: GO 18226
18226: DISABLE
18227: LD_INT 0
18229: PPUSH
18230: PPUSH
18231: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18232: LD_ADDR_VAR 0 2
18236: PUSH
18237: LD_INT 22
18239: PUSH
18240: LD_OWVAR 2
18244: PUSH
18245: EMPTY
18246: LIST
18247: LIST
18248: PUSH
18249: LD_INT 33
18251: PUSH
18252: LD_INT 3
18254: PUSH
18255: EMPTY
18256: LIST
18257: LIST
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: PPUSH
18263: CALL_OW 69
18267: ST_TO_ADDR
// if not tmp then
18268: LD_VAR 0 2
18272: NOT
18273: IFFALSE 18277
// exit ;
18275: GO 18403
// side := 0 ;
18277: LD_ADDR_VAR 0 3
18281: PUSH
18282: LD_INT 0
18284: ST_TO_ADDR
// for i := 1 to 8 do
18285: LD_ADDR_VAR 0 1
18289: PUSH
18290: DOUBLE
18291: LD_INT 1
18293: DEC
18294: ST_TO_ADDR
18295: LD_INT 8
18297: PUSH
18298: FOR_TO
18299: IFFALSE 18347
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18301: LD_OWVAR 2
18305: PUSH
18306: LD_VAR 0 1
18310: NONEQUAL
18311: PUSH
18312: LD_OWVAR 2
18316: PPUSH
18317: LD_VAR 0 1
18321: PPUSH
18322: CALL_OW 81
18326: PUSH
18327: LD_INT 2
18329: EQUAL
18330: AND
18331: IFFALSE 18345
// begin side := i ;
18333: LD_ADDR_VAR 0 3
18337: PUSH
18338: LD_VAR 0 1
18342: ST_TO_ADDR
// break ;
18343: GO 18347
// end ;
18345: GO 18298
18347: POP
18348: POP
// if not side then
18349: LD_VAR 0 3
18353: NOT
18354: IFFALSE 18358
// exit ;
18356: GO 18403
// for i := 1 to tmp do
18358: LD_ADDR_VAR 0 1
18362: PUSH
18363: DOUBLE
18364: LD_INT 1
18366: DEC
18367: ST_TO_ADDR
18368: LD_VAR 0 2
18372: PUSH
18373: FOR_TO
18374: IFFALSE 18401
// if Prob ( 60 ) then
18376: LD_INT 60
18378: PPUSH
18379: CALL_OW 13
18383: IFFALSE 18399
// SetSide ( i , side ) ;
18385: LD_VAR 0 1
18389: PPUSH
18390: LD_VAR 0 3
18394: PPUSH
18395: CALL_OW 235
18399: GO 18373
18401: POP
18402: POP
// end ;
18403: PPOPN 3
18405: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18406: LD_EXP 48
18410: PUSH
18411: LD_EXP 61
18415: AND
18416: IFFALSE 18535
18418: GO 18420
18420: DISABLE
18421: LD_INT 0
18423: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18424: LD_ADDR_VAR 0 1
18428: PUSH
18429: LD_INT 22
18431: PUSH
18432: LD_OWVAR 2
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: PUSH
18441: LD_INT 21
18443: PUSH
18444: LD_INT 1
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: PUSH
18451: LD_INT 3
18453: PUSH
18454: LD_INT 23
18456: PUSH
18457: LD_INT 0
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: LIST
18472: PPUSH
18473: CALL_OW 69
18477: PUSH
18478: FOR_IN
18479: IFFALSE 18533
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18481: LD_VAR 0 1
18485: PPUSH
18486: CALL_OW 257
18490: PUSH
18491: LD_INT 1
18493: PUSH
18494: LD_INT 2
18496: PUSH
18497: LD_INT 3
18499: PUSH
18500: LD_INT 4
18502: PUSH
18503: EMPTY
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: IN
18509: IFFALSE 18531
// SetClass ( un , rand ( 1 , 4 ) ) ;
18511: LD_VAR 0 1
18515: PPUSH
18516: LD_INT 1
18518: PPUSH
18519: LD_INT 4
18521: PPUSH
18522: CALL_OW 12
18526: PPUSH
18527: CALL_OW 336
18531: GO 18478
18533: POP
18534: POP
// end ;
18535: PPOPN 1
18537: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18538: LD_EXP 48
18542: PUSH
18543: LD_EXP 60
18547: AND
18548: IFFALSE 18627
18550: GO 18552
18552: DISABLE
18553: LD_INT 0
18555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18556: LD_ADDR_VAR 0 1
18560: PUSH
18561: LD_INT 22
18563: PUSH
18564: LD_OWVAR 2
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: PUSH
18573: LD_INT 21
18575: PUSH
18576: LD_INT 3
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: PUSH
18583: EMPTY
18584: LIST
18585: LIST
18586: PPUSH
18587: CALL_OW 69
18591: ST_TO_ADDR
// if not tmp then
18592: LD_VAR 0 1
18596: NOT
18597: IFFALSE 18601
// exit ;
18599: GO 18627
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18601: LD_VAR 0 1
18605: PUSH
18606: LD_INT 1
18608: PPUSH
18609: LD_VAR 0 1
18613: PPUSH
18614: CALL_OW 12
18618: ARRAY
18619: PPUSH
18620: LD_INT 100
18622: PPUSH
18623: CALL_OW 234
// end ;
18627: PPOPN 1
18629: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18630: LD_EXP 48
18634: PUSH
18635: LD_EXP 62
18639: AND
18640: IFFALSE 18738
18642: GO 18644
18644: DISABLE
18645: LD_INT 0
18647: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18648: LD_ADDR_VAR 0 1
18652: PUSH
18653: LD_INT 22
18655: PUSH
18656: LD_OWVAR 2
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PUSH
18665: LD_INT 21
18667: PUSH
18668: LD_INT 1
18670: PUSH
18671: EMPTY
18672: LIST
18673: LIST
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: PPUSH
18679: CALL_OW 69
18683: ST_TO_ADDR
// if not tmp then
18684: LD_VAR 0 1
18688: NOT
18689: IFFALSE 18693
// exit ;
18691: GO 18738
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18693: LD_VAR 0 1
18697: PUSH
18698: LD_INT 1
18700: PPUSH
18701: LD_VAR 0 1
18705: PPUSH
18706: CALL_OW 12
18710: ARRAY
18711: PPUSH
18712: LD_INT 1
18714: PPUSH
18715: LD_INT 4
18717: PPUSH
18718: CALL_OW 12
18722: PPUSH
18723: LD_INT 3000
18725: PPUSH
18726: LD_INT 9000
18728: PPUSH
18729: CALL_OW 12
18733: PPUSH
18734: CALL_OW 492
// end ;
18738: PPOPN 1
18740: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18741: LD_EXP 48
18745: PUSH
18746: LD_EXP 63
18750: AND
18751: IFFALSE 18771
18753: GO 18755
18755: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18756: LD_INT 1
18758: PPUSH
18759: LD_OWVAR 2
18763: PPUSH
18764: LD_INT 0
18766: PPUSH
18767: CALL_OW 324
18771: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18772: LD_EXP 48
18776: PUSH
18777: LD_EXP 64
18781: AND
18782: IFFALSE 18865
18784: GO 18786
18786: DISABLE
18787: LD_INT 0
18789: PPUSH
18790: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18791: LD_ADDR_VAR 0 2
18795: PUSH
18796: LD_INT 22
18798: PUSH
18799: LD_OWVAR 2
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: PUSH
18808: LD_INT 21
18810: PUSH
18811: LD_INT 3
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: PUSH
18818: EMPTY
18819: LIST
18820: LIST
18821: PPUSH
18822: CALL_OW 69
18826: ST_TO_ADDR
// if not tmp then
18827: LD_VAR 0 2
18831: NOT
18832: IFFALSE 18836
// exit ;
18834: GO 18865
// for i in tmp do
18836: LD_ADDR_VAR 0 1
18840: PUSH
18841: LD_VAR 0 2
18845: PUSH
18846: FOR_IN
18847: IFFALSE 18863
// SetBLevel ( i , 10 ) ;
18849: LD_VAR 0 1
18853: PPUSH
18854: LD_INT 10
18856: PPUSH
18857: CALL_OW 241
18861: GO 18846
18863: POP
18864: POP
// end ;
18865: PPOPN 2
18867: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18868: LD_EXP 48
18872: PUSH
18873: LD_EXP 65
18877: AND
18878: IFFALSE 18989
18880: GO 18882
18882: DISABLE
18883: LD_INT 0
18885: PPUSH
18886: PPUSH
18887: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18888: LD_ADDR_VAR 0 3
18892: PUSH
18893: LD_INT 22
18895: PUSH
18896: LD_OWVAR 2
18900: PUSH
18901: EMPTY
18902: LIST
18903: LIST
18904: PUSH
18905: LD_INT 25
18907: PUSH
18908: LD_INT 1
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: PPUSH
18919: CALL_OW 69
18923: ST_TO_ADDR
// if not tmp then
18924: LD_VAR 0 3
18928: NOT
18929: IFFALSE 18933
// exit ;
18931: GO 18989
// un := tmp [ rand ( 1 , tmp ) ] ;
18933: LD_ADDR_VAR 0 2
18937: PUSH
18938: LD_VAR 0 3
18942: PUSH
18943: LD_INT 1
18945: PPUSH
18946: LD_VAR 0 3
18950: PPUSH
18951: CALL_OW 12
18955: ARRAY
18956: ST_TO_ADDR
// if Crawls ( un ) then
18957: LD_VAR 0 2
18961: PPUSH
18962: CALL_OW 318
18966: IFFALSE 18977
// ComWalk ( un ) ;
18968: LD_VAR 0 2
18972: PPUSH
18973: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18977: LD_VAR 0 2
18981: PPUSH
18982: LD_INT 5
18984: PPUSH
18985: CALL_OW 336
// end ;
18989: PPOPN 3
18991: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
18992: LD_EXP 48
18996: PUSH
18997: LD_EXP 66
19001: AND
19002: PUSH
19003: LD_OWVAR 67
19007: PUSH
19008: LD_INT 3
19010: LESS
19011: AND
19012: IFFALSE 19031
19014: GO 19016
19016: DISABLE
// Difficulty := Difficulty + 1 ;
19017: LD_ADDR_OWVAR 67
19021: PUSH
19022: LD_OWVAR 67
19026: PUSH
19027: LD_INT 1
19029: PLUS
19030: ST_TO_ADDR
19031: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19032: LD_EXP 48
19036: PUSH
19037: LD_EXP 67
19041: AND
19042: IFFALSE 19145
19044: GO 19046
19046: DISABLE
19047: LD_INT 0
19049: PPUSH
// begin for i := 1 to 5 do
19050: LD_ADDR_VAR 0 1
19054: PUSH
19055: DOUBLE
19056: LD_INT 1
19058: DEC
19059: ST_TO_ADDR
19060: LD_INT 5
19062: PUSH
19063: FOR_TO
19064: IFFALSE 19143
// begin uc_nation := nation_nature ;
19066: LD_ADDR_OWVAR 21
19070: PUSH
19071: LD_INT 0
19073: ST_TO_ADDR
// uc_side := 0 ;
19074: LD_ADDR_OWVAR 20
19078: PUSH
19079: LD_INT 0
19081: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19082: LD_ADDR_OWVAR 29
19086: PUSH
19087: LD_INT 12
19089: PUSH
19090: LD_INT 12
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: ST_TO_ADDR
// hc_agressivity := 20 ;
19097: LD_ADDR_OWVAR 35
19101: PUSH
19102: LD_INT 20
19104: ST_TO_ADDR
// hc_class := class_tiger ;
19105: LD_ADDR_OWVAR 28
19109: PUSH
19110: LD_INT 14
19112: ST_TO_ADDR
// hc_gallery :=  ;
19113: LD_ADDR_OWVAR 33
19117: PUSH
19118: LD_STRING 
19120: ST_TO_ADDR
// hc_name :=  ;
19121: LD_ADDR_OWVAR 26
19125: PUSH
19126: LD_STRING 
19128: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19129: CALL_OW 44
19133: PPUSH
19134: LD_INT 0
19136: PPUSH
19137: CALL_OW 51
// end ;
19141: GO 19063
19143: POP
19144: POP
// end ;
19145: PPOPN 1
19147: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19148: LD_EXP 48
19152: PUSH
19153: LD_EXP 68
19157: AND
19158: IFFALSE 19167
19160: GO 19162
19162: DISABLE
// StreamSibBomb ;
19163: CALL 19168 0 0
19167: END
// export function StreamSibBomb ; var i , x , y ; begin
19168: LD_INT 0
19170: PPUSH
19171: PPUSH
19172: PPUSH
19173: PPUSH
// result := false ;
19174: LD_ADDR_VAR 0 1
19178: PUSH
19179: LD_INT 0
19181: ST_TO_ADDR
// for i := 1 to 16 do
19182: LD_ADDR_VAR 0 2
19186: PUSH
19187: DOUBLE
19188: LD_INT 1
19190: DEC
19191: ST_TO_ADDR
19192: LD_INT 16
19194: PUSH
19195: FOR_TO
19196: IFFALSE 19395
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19198: LD_ADDR_VAR 0 3
19202: PUSH
19203: LD_INT 10
19205: PUSH
19206: LD_INT 20
19208: PUSH
19209: LD_INT 30
19211: PUSH
19212: LD_INT 40
19214: PUSH
19215: LD_INT 50
19217: PUSH
19218: LD_INT 60
19220: PUSH
19221: LD_INT 70
19223: PUSH
19224: LD_INT 80
19226: PUSH
19227: LD_INT 90
19229: PUSH
19230: LD_INT 100
19232: PUSH
19233: LD_INT 110
19235: PUSH
19236: LD_INT 120
19238: PUSH
19239: LD_INT 130
19241: PUSH
19242: LD_INT 140
19244: PUSH
19245: LD_INT 150
19247: PUSH
19248: EMPTY
19249: LIST
19250: LIST
19251: LIST
19252: LIST
19253: LIST
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: PUSH
19265: LD_INT 1
19267: PPUSH
19268: LD_INT 15
19270: PPUSH
19271: CALL_OW 12
19275: ARRAY
19276: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19277: LD_ADDR_VAR 0 4
19281: PUSH
19282: LD_INT 10
19284: PUSH
19285: LD_INT 20
19287: PUSH
19288: LD_INT 30
19290: PUSH
19291: LD_INT 40
19293: PUSH
19294: LD_INT 50
19296: PUSH
19297: LD_INT 60
19299: PUSH
19300: LD_INT 70
19302: PUSH
19303: LD_INT 80
19305: PUSH
19306: LD_INT 90
19308: PUSH
19309: LD_INT 100
19311: PUSH
19312: LD_INT 110
19314: PUSH
19315: LD_INT 120
19317: PUSH
19318: LD_INT 130
19320: PUSH
19321: LD_INT 140
19323: PUSH
19324: LD_INT 150
19326: PUSH
19327: EMPTY
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: PUSH
19344: LD_INT 1
19346: PPUSH
19347: LD_INT 15
19349: PPUSH
19350: CALL_OW 12
19354: ARRAY
19355: ST_TO_ADDR
// if ValidHex ( x , y ) then
19356: LD_VAR 0 3
19360: PPUSH
19361: LD_VAR 0 4
19365: PPUSH
19366: CALL_OW 488
19370: IFFALSE 19393
// begin result := [ x , y ] ;
19372: LD_ADDR_VAR 0 1
19376: PUSH
19377: LD_VAR 0 3
19381: PUSH
19382: LD_VAR 0 4
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: ST_TO_ADDR
// break ;
19391: GO 19395
// end ; end ;
19393: GO 19195
19395: POP
19396: POP
// if result then
19397: LD_VAR 0 1
19401: IFFALSE 19461
// begin ToLua ( playSibBomb() ) ;
19403: LD_STRING playSibBomb()
19405: PPUSH
19406: CALL_OW 559
// wait ( 0 0$14 ) ;
19410: LD_INT 490
19412: PPUSH
19413: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19417: LD_VAR 0 1
19421: PUSH
19422: LD_INT 1
19424: ARRAY
19425: PPUSH
19426: LD_VAR 0 1
19430: PUSH
19431: LD_INT 2
19433: ARRAY
19434: PPUSH
19435: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19439: LD_VAR 0 1
19443: PUSH
19444: LD_INT 1
19446: ARRAY
19447: PPUSH
19448: LD_VAR 0 1
19452: PUSH
19453: LD_INT 2
19455: ARRAY
19456: PPUSH
19457: CALL_OW 429
// end ; end ;
19461: LD_VAR 0 1
19465: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19466: LD_EXP 48
19470: PUSH
19471: LD_EXP 70
19475: AND
19476: IFFALSE 19488
19478: GO 19480
19480: DISABLE
// YouLost (  ) ;
19481: LD_STRING 
19483: PPUSH
19484: CALL_OW 104
19488: END
// every 0 0$1 trigger StreamModeActive and sFog do
19489: LD_EXP 48
19493: PUSH
19494: LD_EXP 69
19498: AND
19499: IFFALSE 19513
19501: GO 19503
19503: DISABLE
// FogOff ( your_side ) ;
19504: LD_OWVAR 2
19508: PPUSH
19509: CALL_OW 344
19513: END
// every 0 0$1 trigger StreamModeActive and sSun do
19514: LD_EXP 48
19518: PUSH
19519: LD_EXP 71
19523: AND
19524: IFFALSE 19552
19526: GO 19528
19528: DISABLE
// begin solar_recharge_percent := 0 ;
19529: LD_ADDR_OWVAR 79
19533: PUSH
19534: LD_INT 0
19536: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19537: LD_INT 10500
19539: PPUSH
19540: CALL_OW 67
// solar_recharge_percent := 100 ;
19544: LD_ADDR_OWVAR 79
19548: PUSH
19549: LD_INT 100
19551: ST_TO_ADDR
// end ;
19552: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19553: LD_EXP 48
19557: PUSH
19558: LD_EXP 72
19562: AND
19563: IFFALSE 19802
19565: GO 19567
19567: DISABLE
19568: LD_INT 0
19570: PPUSH
19571: PPUSH
19572: PPUSH
// begin tmp := [ ] ;
19573: LD_ADDR_VAR 0 3
19577: PUSH
19578: EMPTY
19579: ST_TO_ADDR
// for i := 1 to 6 do
19580: LD_ADDR_VAR 0 1
19584: PUSH
19585: DOUBLE
19586: LD_INT 1
19588: DEC
19589: ST_TO_ADDR
19590: LD_INT 6
19592: PUSH
19593: FOR_TO
19594: IFFALSE 19699
// begin uc_nation := nation_nature ;
19596: LD_ADDR_OWVAR 21
19600: PUSH
19601: LD_INT 0
19603: ST_TO_ADDR
// uc_side := 0 ;
19604: LD_ADDR_OWVAR 20
19608: PUSH
19609: LD_INT 0
19611: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19612: LD_ADDR_OWVAR 29
19616: PUSH
19617: LD_INT 12
19619: PUSH
19620: LD_INT 12
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: ST_TO_ADDR
// hc_agressivity := 20 ;
19627: LD_ADDR_OWVAR 35
19631: PUSH
19632: LD_INT 20
19634: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19635: LD_ADDR_OWVAR 28
19639: PUSH
19640: LD_INT 17
19642: ST_TO_ADDR
// hc_gallery :=  ;
19643: LD_ADDR_OWVAR 33
19647: PUSH
19648: LD_STRING 
19650: ST_TO_ADDR
// hc_name :=  ;
19651: LD_ADDR_OWVAR 26
19655: PUSH
19656: LD_STRING 
19658: ST_TO_ADDR
// un := CreateHuman ;
19659: LD_ADDR_VAR 0 2
19663: PUSH
19664: CALL_OW 44
19668: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19669: LD_VAR 0 2
19673: PPUSH
19674: LD_INT 1
19676: PPUSH
19677: CALL_OW 51
// tmp := tmp ^ un ;
19681: LD_ADDR_VAR 0 3
19685: PUSH
19686: LD_VAR 0 3
19690: PUSH
19691: LD_VAR 0 2
19695: ADD
19696: ST_TO_ADDR
// end ;
19697: GO 19593
19699: POP
19700: POP
// repeat wait ( 0 0$1 ) ;
19701: LD_INT 35
19703: PPUSH
19704: CALL_OW 67
// for un in tmp do
19708: LD_ADDR_VAR 0 2
19712: PUSH
19713: LD_VAR 0 3
19717: PUSH
19718: FOR_IN
19719: IFFALSE 19793
// begin if IsDead ( un ) then
19721: LD_VAR 0 2
19725: PPUSH
19726: CALL_OW 301
19730: IFFALSE 19750
// begin tmp := tmp diff un ;
19732: LD_ADDR_VAR 0 3
19736: PUSH
19737: LD_VAR 0 3
19741: PUSH
19742: LD_VAR 0 2
19746: DIFF
19747: ST_TO_ADDR
// continue ;
19748: GO 19718
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19750: LD_VAR 0 2
19754: PPUSH
19755: LD_INT 3
19757: PUSH
19758: LD_INT 22
19760: PUSH
19761: LD_INT 0
19763: PUSH
19764: EMPTY
19765: LIST
19766: LIST
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: PPUSH
19772: CALL_OW 69
19776: PPUSH
19777: LD_VAR 0 2
19781: PPUSH
19782: CALL_OW 74
19786: PPUSH
19787: CALL_OW 115
// end ;
19791: GO 19718
19793: POP
19794: POP
// until not tmp ;
19795: LD_VAR 0 3
19799: NOT
19800: IFFALSE 19701
// end ;
19802: PPOPN 3
19804: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19805: LD_EXP 48
19809: PUSH
19810: LD_EXP 73
19814: AND
19815: IFFALSE 19869
19817: GO 19819
19819: DISABLE
// begin ToLua ( displayTroll(); ) ;
19820: LD_STRING displayTroll();
19822: PPUSH
19823: CALL_OW 559
// wait ( 3 3$00 ) ;
19827: LD_INT 6300
19829: PPUSH
19830: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19834: LD_STRING hideTroll();
19836: PPUSH
19837: CALL_OW 559
// wait ( 1 1$00 ) ;
19841: LD_INT 2100
19843: PPUSH
19844: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19848: LD_STRING displayTroll();
19850: PPUSH
19851: CALL_OW 559
// wait ( 1 1$00 ) ;
19855: LD_INT 2100
19857: PPUSH
19858: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19862: LD_STRING hideTroll();
19864: PPUSH
19865: CALL_OW 559
// end ;
19869: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19870: LD_EXP 48
19874: PUSH
19875: LD_EXP 74
19879: AND
19880: IFFALSE 19943
19882: GO 19884
19884: DISABLE
19885: LD_INT 0
19887: PPUSH
// begin p := 0 ;
19888: LD_ADDR_VAR 0 1
19892: PUSH
19893: LD_INT 0
19895: ST_TO_ADDR
// repeat game_speed := 1 ;
19896: LD_ADDR_OWVAR 65
19900: PUSH
19901: LD_INT 1
19903: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19904: LD_INT 35
19906: PPUSH
19907: CALL_OW 67
// p := p + 1 ;
19911: LD_ADDR_VAR 0 1
19915: PUSH
19916: LD_VAR 0 1
19920: PUSH
19921: LD_INT 1
19923: PLUS
19924: ST_TO_ADDR
// until p >= 60 ;
19925: LD_VAR 0 1
19929: PUSH
19930: LD_INT 60
19932: GREATEREQUAL
19933: IFFALSE 19896
// game_speed := 4 ;
19935: LD_ADDR_OWVAR 65
19939: PUSH
19940: LD_INT 4
19942: ST_TO_ADDR
// end ;
19943: PPOPN 1
19945: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19946: LD_EXP 48
19950: PUSH
19951: LD_EXP 75
19955: AND
19956: IFFALSE 20102
19958: GO 19960
19960: DISABLE
19961: LD_INT 0
19963: PPUSH
19964: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19965: LD_ADDR_VAR 0 1
19969: PUSH
19970: LD_INT 22
19972: PUSH
19973: LD_OWVAR 2
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: PUSH
19982: LD_INT 2
19984: PUSH
19985: LD_INT 30
19987: PUSH
19988: LD_INT 0
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: PUSH
19995: LD_INT 30
19997: PUSH
19998: LD_INT 1
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: LIST
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: PPUSH
20014: CALL_OW 69
20018: ST_TO_ADDR
// if not depot then
20019: LD_VAR 0 1
20023: NOT
20024: IFFALSE 20028
// exit ;
20026: GO 20102
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20028: LD_ADDR_VAR 0 2
20032: PUSH
20033: LD_VAR 0 1
20037: PUSH
20038: LD_INT 1
20040: PPUSH
20041: LD_VAR 0 1
20045: PPUSH
20046: CALL_OW 12
20050: ARRAY
20051: PPUSH
20052: CALL_OW 274
20056: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20057: LD_VAR 0 2
20061: PPUSH
20062: LD_INT 1
20064: PPUSH
20065: LD_INT 0
20067: PPUSH
20068: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20072: LD_VAR 0 2
20076: PPUSH
20077: LD_INT 2
20079: PPUSH
20080: LD_INT 0
20082: PPUSH
20083: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20087: LD_VAR 0 2
20091: PPUSH
20092: LD_INT 3
20094: PPUSH
20095: LD_INT 0
20097: PPUSH
20098: CALL_OW 277
// end ;
20102: PPOPN 2
20104: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20105: LD_EXP 48
20109: PUSH
20110: LD_EXP 76
20114: AND
20115: IFFALSE 20212
20117: GO 20119
20119: DISABLE
20120: LD_INT 0
20122: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20123: LD_ADDR_VAR 0 1
20127: PUSH
20128: LD_INT 22
20130: PUSH
20131: LD_OWVAR 2
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: PUSH
20140: LD_INT 21
20142: PUSH
20143: LD_INT 1
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: PUSH
20150: LD_INT 3
20152: PUSH
20153: LD_INT 23
20155: PUSH
20156: LD_INT 0
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: LIST
20171: PPUSH
20172: CALL_OW 69
20176: ST_TO_ADDR
// if not tmp then
20177: LD_VAR 0 1
20181: NOT
20182: IFFALSE 20186
// exit ;
20184: GO 20212
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20186: LD_VAR 0 1
20190: PUSH
20191: LD_INT 1
20193: PPUSH
20194: LD_VAR 0 1
20198: PPUSH
20199: CALL_OW 12
20203: ARRAY
20204: PPUSH
20205: LD_INT 200
20207: PPUSH
20208: CALL_OW 234
// end ;
20212: PPOPN 1
20214: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20215: LD_EXP 48
20219: PUSH
20220: LD_EXP 77
20224: AND
20225: IFFALSE 20304
20227: GO 20229
20229: DISABLE
20230: LD_INT 0
20232: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20233: LD_ADDR_VAR 0 1
20237: PUSH
20238: LD_INT 22
20240: PUSH
20241: LD_OWVAR 2
20245: PUSH
20246: EMPTY
20247: LIST
20248: LIST
20249: PUSH
20250: LD_INT 21
20252: PUSH
20253: LD_INT 2
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: PUSH
20260: EMPTY
20261: LIST
20262: LIST
20263: PPUSH
20264: CALL_OW 69
20268: ST_TO_ADDR
// if not tmp then
20269: LD_VAR 0 1
20273: NOT
20274: IFFALSE 20278
// exit ;
20276: GO 20304
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20278: LD_VAR 0 1
20282: PUSH
20283: LD_INT 1
20285: PPUSH
20286: LD_VAR 0 1
20290: PPUSH
20291: CALL_OW 12
20295: ARRAY
20296: PPUSH
20297: LD_INT 60
20299: PPUSH
20300: CALL_OW 234
// end ;
20304: PPOPN 1
20306: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20307: LD_EXP 48
20311: PUSH
20312: LD_EXP 78
20316: AND
20317: IFFALSE 20416
20319: GO 20321
20321: DISABLE
20322: LD_INT 0
20324: PPUSH
20325: PPUSH
// begin enable ;
20326: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20327: LD_ADDR_VAR 0 1
20331: PUSH
20332: LD_INT 22
20334: PUSH
20335: LD_OWVAR 2
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: PUSH
20344: LD_INT 61
20346: PUSH
20347: EMPTY
20348: LIST
20349: PUSH
20350: LD_INT 33
20352: PUSH
20353: LD_INT 2
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: PUSH
20360: EMPTY
20361: LIST
20362: LIST
20363: LIST
20364: PPUSH
20365: CALL_OW 69
20369: ST_TO_ADDR
// if not tmp then
20370: LD_VAR 0 1
20374: NOT
20375: IFFALSE 20379
// exit ;
20377: GO 20416
// for i in tmp do
20379: LD_ADDR_VAR 0 2
20383: PUSH
20384: LD_VAR 0 1
20388: PUSH
20389: FOR_IN
20390: IFFALSE 20414
// if IsControledBy ( i ) then
20392: LD_VAR 0 2
20396: PPUSH
20397: CALL_OW 312
20401: IFFALSE 20412
// ComUnlink ( i ) ;
20403: LD_VAR 0 2
20407: PPUSH
20408: CALL_OW 136
20412: GO 20389
20414: POP
20415: POP
// end ;
20416: PPOPN 2
20418: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20419: LD_EXP 48
20423: PUSH
20424: LD_EXP 79
20428: AND
20429: IFFALSE 20569
20431: GO 20433
20433: DISABLE
20434: LD_INT 0
20436: PPUSH
20437: PPUSH
// begin ToLua ( displayPowell(); ) ;
20438: LD_STRING displayPowell();
20440: PPUSH
20441: CALL_OW 559
// uc_side := 0 ;
20445: LD_ADDR_OWVAR 20
20449: PUSH
20450: LD_INT 0
20452: ST_TO_ADDR
// uc_nation := 2 ;
20453: LD_ADDR_OWVAR 21
20457: PUSH
20458: LD_INT 2
20460: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20461: LD_ADDR_OWVAR 37
20465: PUSH
20466: LD_INT 14
20468: ST_TO_ADDR
// vc_engine := engine_siberite ;
20469: LD_ADDR_OWVAR 39
20473: PUSH
20474: LD_INT 3
20476: ST_TO_ADDR
// vc_control := control_apeman ;
20477: LD_ADDR_OWVAR 38
20481: PUSH
20482: LD_INT 5
20484: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20485: LD_ADDR_OWVAR 40
20489: PUSH
20490: LD_INT 29
20492: ST_TO_ADDR
// un := CreateVehicle ;
20493: LD_ADDR_VAR 0 2
20497: PUSH
20498: CALL_OW 45
20502: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20503: LD_VAR 0 2
20507: PPUSH
20508: LD_INT 1
20510: PPUSH
20511: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20515: LD_INT 35
20517: PPUSH
20518: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20522: LD_VAR 0 2
20526: PPUSH
20527: LD_INT 22
20529: PUSH
20530: LD_OWVAR 2
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: PPUSH
20539: CALL_OW 69
20543: PPUSH
20544: LD_VAR 0 2
20548: PPUSH
20549: CALL_OW 74
20553: PPUSH
20554: CALL_OW 115
// until IsDead ( un ) ;
20558: LD_VAR 0 2
20562: PPUSH
20563: CALL_OW 301
20567: IFFALSE 20515
// end ;
20569: PPOPN 2
20571: END
// every 0 0$1 trigger StreamModeActive and sStu do
20572: LD_EXP 48
20576: PUSH
20577: LD_EXP 87
20581: AND
20582: IFFALSE 20598
20584: GO 20586
20586: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20587: LD_STRING displayStucuk();
20589: PPUSH
20590: CALL_OW 559
// ResetFog ;
20594: CALL_OW 335
// end ;
20598: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20599: LD_EXP 48
20603: PUSH
20604: LD_EXP 80
20608: AND
20609: IFFALSE 20750
20611: GO 20613
20613: DISABLE
20614: LD_INT 0
20616: PPUSH
20617: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20618: LD_ADDR_VAR 0 2
20622: PUSH
20623: LD_INT 22
20625: PUSH
20626: LD_OWVAR 2
20630: PUSH
20631: EMPTY
20632: LIST
20633: LIST
20634: PUSH
20635: LD_INT 21
20637: PUSH
20638: LD_INT 1
20640: PUSH
20641: EMPTY
20642: LIST
20643: LIST
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: PPUSH
20649: CALL_OW 69
20653: ST_TO_ADDR
// if not tmp then
20654: LD_VAR 0 2
20658: NOT
20659: IFFALSE 20663
// exit ;
20661: GO 20750
// un := tmp [ rand ( 1 , tmp ) ] ;
20663: LD_ADDR_VAR 0 1
20667: PUSH
20668: LD_VAR 0 2
20672: PUSH
20673: LD_INT 1
20675: PPUSH
20676: LD_VAR 0 2
20680: PPUSH
20681: CALL_OW 12
20685: ARRAY
20686: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20687: LD_VAR 0 1
20691: PPUSH
20692: LD_INT 0
20694: PPUSH
20695: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20699: LD_VAR 0 1
20703: PPUSH
20704: LD_OWVAR 3
20708: PUSH
20709: LD_VAR 0 1
20713: DIFF
20714: PPUSH
20715: LD_VAR 0 1
20719: PPUSH
20720: CALL_OW 74
20724: PPUSH
20725: CALL_OW 115
// wait ( 0 0$20 ) ;
20729: LD_INT 700
20731: PPUSH
20732: CALL_OW 67
// SetSide ( un , your_side ) ;
20736: LD_VAR 0 1
20740: PPUSH
20741: LD_OWVAR 2
20745: PPUSH
20746: CALL_OW 235
// end ;
20750: PPOPN 2
20752: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20753: LD_EXP 48
20757: PUSH
20758: LD_EXP 81
20762: AND
20763: IFFALSE 20869
20765: GO 20767
20767: DISABLE
20768: LD_INT 0
20770: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20771: LD_ADDR_VAR 0 1
20775: PUSH
20776: LD_INT 22
20778: PUSH
20779: LD_OWVAR 2
20783: PUSH
20784: EMPTY
20785: LIST
20786: LIST
20787: PUSH
20788: LD_INT 2
20790: PUSH
20791: LD_INT 30
20793: PUSH
20794: LD_INT 0
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: PUSH
20801: LD_INT 30
20803: PUSH
20804: LD_INT 1
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: LIST
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: PPUSH
20820: CALL_OW 69
20824: ST_TO_ADDR
// if not depot then
20825: LD_VAR 0 1
20829: NOT
20830: IFFALSE 20834
// exit ;
20832: GO 20869
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20834: LD_VAR 0 1
20838: PUSH
20839: LD_INT 1
20841: ARRAY
20842: PPUSH
20843: CALL_OW 250
20847: PPUSH
20848: LD_VAR 0 1
20852: PUSH
20853: LD_INT 1
20855: ARRAY
20856: PPUSH
20857: CALL_OW 251
20861: PPUSH
20862: LD_INT 70
20864: PPUSH
20865: CALL_OW 495
// end ;
20869: PPOPN 1
20871: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20872: LD_EXP 48
20876: PUSH
20877: LD_EXP 82
20881: AND
20882: IFFALSE 21093
20884: GO 20886
20886: DISABLE
20887: LD_INT 0
20889: PPUSH
20890: PPUSH
20891: PPUSH
20892: PPUSH
20893: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20894: LD_ADDR_VAR 0 5
20898: PUSH
20899: LD_INT 22
20901: PUSH
20902: LD_OWVAR 2
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: PUSH
20911: LD_INT 21
20913: PUSH
20914: LD_INT 1
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: PPUSH
20925: CALL_OW 69
20929: ST_TO_ADDR
// if not tmp then
20930: LD_VAR 0 5
20934: NOT
20935: IFFALSE 20939
// exit ;
20937: GO 21093
// for i in tmp do
20939: LD_ADDR_VAR 0 1
20943: PUSH
20944: LD_VAR 0 5
20948: PUSH
20949: FOR_IN
20950: IFFALSE 21091
// begin d := rand ( 0 , 5 ) ;
20952: LD_ADDR_VAR 0 4
20956: PUSH
20957: LD_INT 0
20959: PPUSH
20960: LD_INT 5
20962: PPUSH
20963: CALL_OW 12
20967: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20968: LD_ADDR_VAR 0 2
20972: PUSH
20973: LD_VAR 0 1
20977: PPUSH
20978: CALL_OW 250
20982: PPUSH
20983: LD_VAR 0 4
20987: PPUSH
20988: LD_INT 3
20990: PPUSH
20991: LD_INT 12
20993: PPUSH
20994: CALL_OW 12
20998: PPUSH
20999: CALL_OW 272
21003: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21004: LD_ADDR_VAR 0 3
21008: PUSH
21009: LD_VAR 0 1
21013: PPUSH
21014: CALL_OW 251
21018: PPUSH
21019: LD_VAR 0 4
21023: PPUSH
21024: LD_INT 3
21026: PPUSH
21027: LD_INT 12
21029: PPUSH
21030: CALL_OW 12
21034: PPUSH
21035: CALL_OW 273
21039: ST_TO_ADDR
// if ValidHex ( x , y ) then
21040: LD_VAR 0 2
21044: PPUSH
21045: LD_VAR 0 3
21049: PPUSH
21050: CALL_OW 488
21054: IFFALSE 21089
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21056: LD_VAR 0 1
21060: PPUSH
21061: LD_VAR 0 2
21065: PPUSH
21066: LD_VAR 0 3
21070: PPUSH
21071: LD_INT 3
21073: PPUSH
21074: LD_INT 6
21076: PPUSH
21077: CALL_OW 12
21081: PPUSH
21082: LD_INT 1
21084: PPUSH
21085: CALL_OW 483
// end ;
21089: GO 20949
21091: POP
21092: POP
// end ;
21093: PPOPN 5
21095: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21096: LD_EXP 48
21100: PUSH
21101: LD_EXP 83
21105: AND
21106: IFFALSE 21200
21108: GO 21110
21110: DISABLE
21111: LD_INT 0
21113: PPUSH
21114: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21115: LD_ADDR_VAR 0 2
21119: PUSH
21120: LD_INT 22
21122: PUSH
21123: LD_OWVAR 2
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: PUSH
21132: LD_INT 32
21134: PUSH
21135: LD_INT 1
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: PUSH
21142: LD_INT 21
21144: PUSH
21145: LD_INT 2
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: PUSH
21152: EMPTY
21153: LIST
21154: LIST
21155: LIST
21156: PPUSH
21157: CALL_OW 69
21161: ST_TO_ADDR
// if not tmp then
21162: LD_VAR 0 2
21166: NOT
21167: IFFALSE 21171
// exit ;
21169: GO 21200
// for i in tmp do
21171: LD_ADDR_VAR 0 1
21175: PUSH
21176: LD_VAR 0 2
21180: PUSH
21181: FOR_IN
21182: IFFALSE 21198
// SetFuel ( i , 0 ) ;
21184: LD_VAR 0 1
21188: PPUSH
21189: LD_INT 0
21191: PPUSH
21192: CALL_OW 240
21196: GO 21181
21198: POP
21199: POP
// end ;
21200: PPOPN 2
21202: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21203: LD_EXP 48
21207: PUSH
21208: LD_EXP 84
21212: AND
21213: IFFALSE 21279
21215: GO 21217
21217: DISABLE
21218: LD_INT 0
21220: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21221: LD_ADDR_VAR 0 1
21225: PUSH
21226: LD_INT 22
21228: PUSH
21229: LD_OWVAR 2
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: PUSH
21238: LD_INT 30
21240: PUSH
21241: LD_INT 29
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: PPUSH
21252: CALL_OW 69
21256: ST_TO_ADDR
// if not tmp then
21257: LD_VAR 0 1
21261: NOT
21262: IFFALSE 21266
// exit ;
21264: GO 21279
// DestroyUnit ( tmp [ 1 ] ) ;
21266: LD_VAR 0 1
21270: PUSH
21271: LD_INT 1
21273: ARRAY
21274: PPUSH
21275: CALL_OW 65
// end ;
21279: PPOPN 1
21281: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21282: LD_EXP 48
21286: PUSH
21287: LD_EXP 86
21291: AND
21292: IFFALSE 21421
21294: GO 21296
21296: DISABLE
21297: LD_INT 0
21299: PPUSH
// begin uc_side := 0 ;
21300: LD_ADDR_OWVAR 20
21304: PUSH
21305: LD_INT 0
21307: ST_TO_ADDR
// uc_nation := nation_arabian ;
21308: LD_ADDR_OWVAR 21
21312: PUSH
21313: LD_INT 2
21315: ST_TO_ADDR
// hc_gallery :=  ;
21316: LD_ADDR_OWVAR 33
21320: PUSH
21321: LD_STRING 
21323: ST_TO_ADDR
// hc_name :=  ;
21324: LD_ADDR_OWVAR 26
21328: PUSH
21329: LD_STRING 
21331: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21332: LD_INT 1
21334: PPUSH
21335: LD_INT 11
21337: PPUSH
21338: LD_INT 10
21340: PPUSH
21341: CALL_OW 380
// un := CreateHuman ;
21345: LD_ADDR_VAR 0 1
21349: PUSH
21350: CALL_OW 44
21354: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21355: LD_VAR 0 1
21359: PPUSH
21360: LD_INT 1
21362: PPUSH
21363: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21367: LD_INT 35
21369: PPUSH
21370: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21374: LD_VAR 0 1
21378: PPUSH
21379: LD_INT 22
21381: PUSH
21382: LD_OWVAR 2
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: PPUSH
21391: CALL_OW 69
21395: PPUSH
21396: LD_VAR 0 1
21400: PPUSH
21401: CALL_OW 74
21405: PPUSH
21406: CALL_OW 115
// until IsDead ( un ) ;
21410: LD_VAR 0 1
21414: PPUSH
21415: CALL_OW 301
21419: IFFALSE 21367
// end ;
21421: PPOPN 1
21423: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21424: LD_EXP 48
21428: PUSH
21429: LD_EXP 88
21433: AND
21434: IFFALSE 21446
21436: GO 21438
21438: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21439: LD_STRING earthquake(getX(game), 0, 32)
21441: PPUSH
21442: CALL_OW 559
21446: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21447: LD_EXP 48
21451: PUSH
21452: LD_EXP 89
21456: AND
21457: IFFALSE 21548
21459: GO 21461
21461: DISABLE
21462: LD_INT 0
21464: PPUSH
// begin enable ;
21465: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21466: LD_ADDR_VAR 0 1
21470: PUSH
21471: LD_INT 22
21473: PUSH
21474: LD_OWVAR 2
21478: PUSH
21479: EMPTY
21480: LIST
21481: LIST
21482: PUSH
21483: LD_INT 21
21485: PUSH
21486: LD_INT 2
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: PUSH
21493: LD_INT 33
21495: PUSH
21496: LD_INT 3
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: LIST
21507: PPUSH
21508: CALL_OW 69
21512: ST_TO_ADDR
// if not tmp then
21513: LD_VAR 0 1
21517: NOT
21518: IFFALSE 21522
// exit ;
21520: GO 21548
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21522: LD_VAR 0 1
21526: PUSH
21527: LD_INT 1
21529: PPUSH
21530: LD_VAR 0 1
21534: PPUSH
21535: CALL_OW 12
21539: ARRAY
21540: PPUSH
21541: LD_INT 1
21543: PPUSH
21544: CALL_OW 234
// end ;
21548: PPOPN 1
21550: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21551: LD_EXP 48
21555: PUSH
21556: LD_EXP 90
21560: AND
21561: IFFALSE 21702
21563: GO 21565
21565: DISABLE
21566: LD_INT 0
21568: PPUSH
21569: PPUSH
21570: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21571: LD_ADDR_VAR 0 3
21575: PUSH
21576: LD_INT 22
21578: PUSH
21579: LD_OWVAR 2
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: LD_INT 25
21590: PUSH
21591: LD_INT 1
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: PPUSH
21602: CALL_OW 69
21606: ST_TO_ADDR
// if not tmp then
21607: LD_VAR 0 3
21611: NOT
21612: IFFALSE 21616
// exit ;
21614: GO 21702
// un := tmp [ rand ( 1 , tmp ) ] ;
21616: LD_ADDR_VAR 0 2
21620: PUSH
21621: LD_VAR 0 3
21625: PUSH
21626: LD_INT 1
21628: PPUSH
21629: LD_VAR 0 3
21633: PPUSH
21634: CALL_OW 12
21638: ARRAY
21639: ST_TO_ADDR
// if Crawls ( un ) then
21640: LD_VAR 0 2
21644: PPUSH
21645: CALL_OW 318
21649: IFFALSE 21660
// ComWalk ( un ) ;
21651: LD_VAR 0 2
21655: PPUSH
21656: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21660: LD_VAR 0 2
21664: PPUSH
21665: LD_INT 9
21667: PPUSH
21668: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21672: LD_INT 28
21674: PPUSH
21675: LD_OWVAR 2
21679: PPUSH
21680: LD_INT 2
21682: PPUSH
21683: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21687: LD_INT 29
21689: PPUSH
21690: LD_OWVAR 2
21694: PPUSH
21695: LD_INT 2
21697: PPUSH
21698: CALL_OW 322
// end ;
21702: PPOPN 3
21704: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21705: LD_EXP 48
21709: PUSH
21710: LD_EXP 91
21714: AND
21715: IFFALSE 21826
21717: GO 21719
21719: DISABLE
21720: LD_INT 0
21722: PPUSH
21723: PPUSH
21724: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21725: LD_ADDR_VAR 0 3
21729: PUSH
21730: LD_INT 22
21732: PUSH
21733: LD_OWVAR 2
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: PUSH
21742: LD_INT 25
21744: PUSH
21745: LD_INT 1
21747: PUSH
21748: EMPTY
21749: LIST
21750: LIST
21751: PUSH
21752: EMPTY
21753: LIST
21754: LIST
21755: PPUSH
21756: CALL_OW 69
21760: ST_TO_ADDR
// if not tmp then
21761: LD_VAR 0 3
21765: NOT
21766: IFFALSE 21770
// exit ;
21768: GO 21826
// un := tmp [ rand ( 1 , tmp ) ] ;
21770: LD_ADDR_VAR 0 2
21774: PUSH
21775: LD_VAR 0 3
21779: PUSH
21780: LD_INT 1
21782: PPUSH
21783: LD_VAR 0 3
21787: PPUSH
21788: CALL_OW 12
21792: ARRAY
21793: ST_TO_ADDR
// if Crawls ( un ) then
21794: LD_VAR 0 2
21798: PPUSH
21799: CALL_OW 318
21803: IFFALSE 21814
// ComWalk ( un ) ;
21805: LD_VAR 0 2
21809: PPUSH
21810: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21814: LD_VAR 0 2
21818: PPUSH
21819: LD_INT 8
21821: PPUSH
21822: CALL_OW 336
// end ;
21826: PPOPN 3
21828: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21829: LD_EXP 48
21833: PUSH
21834: LD_EXP 92
21838: AND
21839: IFFALSE 21983
21841: GO 21843
21843: DISABLE
21844: LD_INT 0
21846: PPUSH
21847: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21848: LD_ADDR_VAR 0 2
21852: PUSH
21853: LD_INT 22
21855: PUSH
21856: LD_OWVAR 2
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: PUSH
21865: LD_INT 21
21867: PUSH
21868: LD_INT 2
21870: PUSH
21871: EMPTY
21872: LIST
21873: LIST
21874: PUSH
21875: LD_INT 2
21877: PUSH
21878: LD_INT 34
21880: PUSH
21881: LD_INT 12
21883: PUSH
21884: EMPTY
21885: LIST
21886: LIST
21887: PUSH
21888: LD_INT 34
21890: PUSH
21891: LD_INT 51
21893: PUSH
21894: EMPTY
21895: LIST
21896: LIST
21897: PUSH
21898: LD_INT 34
21900: PUSH
21901: LD_INT 32
21903: PUSH
21904: EMPTY
21905: LIST
21906: LIST
21907: PUSH
21908: EMPTY
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: PUSH
21914: EMPTY
21915: LIST
21916: LIST
21917: LIST
21918: PPUSH
21919: CALL_OW 69
21923: ST_TO_ADDR
// if not tmp then
21924: LD_VAR 0 2
21928: NOT
21929: IFFALSE 21933
// exit ;
21931: GO 21983
// for i in tmp do
21933: LD_ADDR_VAR 0 1
21937: PUSH
21938: LD_VAR 0 2
21942: PUSH
21943: FOR_IN
21944: IFFALSE 21981
// if GetCargo ( i , mat_artifact ) = 0 then
21946: LD_VAR 0 1
21950: PPUSH
21951: LD_INT 4
21953: PPUSH
21954: CALL_OW 289
21958: PUSH
21959: LD_INT 0
21961: EQUAL
21962: IFFALSE 21979
// SetCargo ( i , mat_siberit , 100 ) ;
21964: LD_VAR 0 1
21968: PPUSH
21969: LD_INT 3
21971: PPUSH
21972: LD_INT 100
21974: PPUSH
21975: CALL_OW 290
21979: GO 21943
21981: POP
21982: POP
// end ;
21983: PPOPN 2
21985: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21986: LD_EXP 48
21990: PUSH
21991: LD_EXP 93
21995: AND
21996: IFFALSE 22179
21998: GO 22000
22000: DISABLE
22001: LD_INT 0
22003: PPUSH
22004: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22005: LD_ADDR_VAR 0 2
22009: PUSH
22010: LD_INT 22
22012: PUSH
22013: LD_OWVAR 2
22017: PUSH
22018: EMPTY
22019: LIST
22020: LIST
22021: PPUSH
22022: CALL_OW 69
22026: ST_TO_ADDR
// if not tmp then
22027: LD_VAR 0 2
22031: NOT
22032: IFFALSE 22036
// exit ;
22034: GO 22179
// for i := 1 to 2 do
22036: LD_ADDR_VAR 0 1
22040: PUSH
22041: DOUBLE
22042: LD_INT 1
22044: DEC
22045: ST_TO_ADDR
22046: LD_INT 2
22048: PUSH
22049: FOR_TO
22050: IFFALSE 22177
// begin uc_side := your_side ;
22052: LD_ADDR_OWVAR 20
22056: PUSH
22057: LD_OWVAR 2
22061: ST_TO_ADDR
// uc_nation := nation_american ;
22062: LD_ADDR_OWVAR 21
22066: PUSH
22067: LD_INT 1
22069: ST_TO_ADDR
// vc_chassis := us_morphling ;
22070: LD_ADDR_OWVAR 37
22074: PUSH
22075: LD_INT 5
22077: ST_TO_ADDR
// vc_engine := engine_siberite ;
22078: LD_ADDR_OWVAR 39
22082: PUSH
22083: LD_INT 3
22085: ST_TO_ADDR
// vc_control := control_computer ;
22086: LD_ADDR_OWVAR 38
22090: PUSH
22091: LD_INT 3
22093: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22094: LD_ADDR_OWVAR 40
22098: PUSH
22099: LD_INT 10
22101: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22102: LD_VAR 0 2
22106: PUSH
22107: LD_INT 1
22109: ARRAY
22110: PPUSH
22111: CALL_OW 310
22115: NOT
22116: IFFALSE 22163
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22118: CALL_OW 45
22122: PPUSH
22123: LD_VAR 0 2
22127: PUSH
22128: LD_INT 1
22130: ARRAY
22131: PPUSH
22132: CALL_OW 250
22136: PPUSH
22137: LD_VAR 0 2
22141: PUSH
22142: LD_INT 1
22144: ARRAY
22145: PPUSH
22146: CALL_OW 251
22150: PPUSH
22151: LD_INT 12
22153: PPUSH
22154: LD_INT 1
22156: PPUSH
22157: CALL_OW 50
22161: GO 22175
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22163: CALL_OW 45
22167: PPUSH
22168: LD_INT 1
22170: PPUSH
22171: CALL_OW 51
// end ;
22175: GO 22049
22177: POP
22178: POP
// end ;
22179: PPOPN 2
22181: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22182: LD_EXP 48
22186: PUSH
22187: LD_EXP 94
22191: AND
22192: IFFALSE 22414
22194: GO 22196
22196: DISABLE
22197: LD_INT 0
22199: PPUSH
22200: PPUSH
22201: PPUSH
22202: PPUSH
22203: PPUSH
22204: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22205: LD_ADDR_VAR 0 6
22209: PUSH
22210: LD_INT 22
22212: PUSH
22213: LD_OWVAR 2
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: PUSH
22222: LD_INT 21
22224: PUSH
22225: LD_INT 1
22227: PUSH
22228: EMPTY
22229: LIST
22230: LIST
22231: PUSH
22232: LD_INT 3
22234: PUSH
22235: LD_INT 23
22237: PUSH
22238: LD_INT 0
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: PUSH
22245: EMPTY
22246: LIST
22247: LIST
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: LIST
22253: PPUSH
22254: CALL_OW 69
22258: ST_TO_ADDR
// if not tmp then
22259: LD_VAR 0 6
22263: NOT
22264: IFFALSE 22268
// exit ;
22266: GO 22414
// s1 := rand ( 1 , 4 ) ;
22268: LD_ADDR_VAR 0 2
22272: PUSH
22273: LD_INT 1
22275: PPUSH
22276: LD_INT 4
22278: PPUSH
22279: CALL_OW 12
22283: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22284: LD_ADDR_VAR 0 4
22288: PUSH
22289: LD_VAR 0 6
22293: PUSH
22294: LD_INT 1
22296: ARRAY
22297: PPUSH
22298: LD_VAR 0 2
22302: PPUSH
22303: CALL_OW 259
22307: ST_TO_ADDR
// if s1 = 1 then
22308: LD_VAR 0 2
22312: PUSH
22313: LD_INT 1
22315: EQUAL
22316: IFFALSE 22336
// s2 := rand ( 2 , 4 ) else
22318: LD_ADDR_VAR 0 3
22322: PUSH
22323: LD_INT 2
22325: PPUSH
22326: LD_INT 4
22328: PPUSH
22329: CALL_OW 12
22333: ST_TO_ADDR
22334: GO 22344
// s2 := 1 ;
22336: LD_ADDR_VAR 0 3
22340: PUSH
22341: LD_INT 1
22343: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22344: LD_ADDR_VAR 0 5
22348: PUSH
22349: LD_VAR 0 6
22353: PUSH
22354: LD_INT 1
22356: ARRAY
22357: PPUSH
22358: LD_VAR 0 3
22362: PPUSH
22363: CALL_OW 259
22367: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22368: LD_VAR 0 6
22372: PUSH
22373: LD_INT 1
22375: ARRAY
22376: PPUSH
22377: LD_VAR 0 2
22381: PPUSH
22382: LD_VAR 0 5
22386: PPUSH
22387: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22391: LD_VAR 0 6
22395: PUSH
22396: LD_INT 1
22398: ARRAY
22399: PPUSH
22400: LD_VAR 0 3
22404: PPUSH
22405: LD_VAR 0 4
22409: PPUSH
22410: CALL_OW 237
// end ;
22414: PPOPN 6
22416: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22417: LD_EXP 48
22421: PUSH
22422: LD_EXP 95
22426: AND
22427: IFFALSE 22506
22429: GO 22431
22431: DISABLE
22432: LD_INT 0
22434: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22435: LD_ADDR_VAR 0 1
22439: PUSH
22440: LD_INT 22
22442: PUSH
22443: LD_OWVAR 2
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: PUSH
22452: LD_INT 30
22454: PUSH
22455: LD_INT 3
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: PPUSH
22466: CALL_OW 69
22470: ST_TO_ADDR
// if not tmp then
22471: LD_VAR 0 1
22475: NOT
22476: IFFALSE 22480
// exit ;
22478: GO 22506
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22480: LD_VAR 0 1
22484: PUSH
22485: LD_INT 1
22487: PPUSH
22488: LD_VAR 0 1
22492: PPUSH
22493: CALL_OW 12
22497: ARRAY
22498: PPUSH
22499: LD_INT 1
22501: PPUSH
22502: CALL_OW 234
// end ;
22506: PPOPN 1
22508: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22509: LD_EXP 48
22513: PUSH
22514: LD_EXP 96
22518: AND
22519: IFFALSE 22631
22521: GO 22523
22523: DISABLE
22524: LD_INT 0
22526: PPUSH
22527: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22528: LD_ADDR_VAR 0 2
22532: PUSH
22533: LD_INT 22
22535: PUSH
22536: LD_OWVAR 2
22540: PUSH
22541: EMPTY
22542: LIST
22543: LIST
22544: PUSH
22545: LD_INT 2
22547: PUSH
22548: LD_INT 30
22550: PUSH
22551: LD_INT 27
22553: PUSH
22554: EMPTY
22555: LIST
22556: LIST
22557: PUSH
22558: LD_INT 30
22560: PUSH
22561: LD_INT 26
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: PUSH
22568: LD_INT 30
22570: PUSH
22571: LD_INT 28
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: PPUSH
22588: CALL_OW 69
22592: ST_TO_ADDR
// if not tmp then
22593: LD_VAR 0 2
22597: NOT
22598: IFFALSE 22602
// exit ;
22600: GO 22631
// for i in tmp do
22602: LD_ADDR_VAR 0 1
22606: PUSH
22607: LD_VAR 0 2
22611: PUSH
22612: FOR_IN
22613: IFFALSE 22629
// SetLives ( i , 1 ) ;
22615: LD_VAR 0 1
22619: PPUSH
22620: LD_INT 1
22622: PPUSH
22623: CALL_OW 234
22627: GO 22612
22629: POP
22630: POP
// end ;
22631: PPOPN 2
22633: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22634: LD_EXP 48
22638: PUSH
22639: LD_EXP 97
22643: AND
22644: IFFALSE 22918
22646: GO 22648
22648: DISABLE
22649: LD_INT 0
22651: PPUSH
22652: PPUSH
22653: PPUSH
// begin i := rand ( 1 , 7 ) ;
22654: LD_ADDR_VAR 0 1
22658: PUSH
22659: LD_INT 1
22661: PPUSH
22662: LD_INT 7
22664: PPUSH
22665: CALL_OW 12
22669: ST_TO_ADDR
// case i of 1 :
22670: LD_VAR 0 1
22674: PUSH
22675: LD_INT 1
22677: DOUBLE
22678: EQUAL
22679: IFTRUE 22683
22681: GO 22693
22683: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22684: LD_STRING earthquake(getX(game), 0, 32)
22686: PPUSH
22687: CALL_OW 559
22691: GO 22918
22693: LD_INT 2
22695: DOUBLE
22696: EQUAL
22697: IFTRUE 22701
22699: GO 22715
22701: POP
// begin ToLua ( displayStucuk(); ) ;
22702: LD_STRING displayStucuk();
22704: PPUSH
22705: CALL_OW 559
// ResetFog ;
22709: CALL_OW 335
// end ; 3 :
22713: GO 22918
22715: LD_INT 3
22717: DOUBLE
22718: EQUAL
22719: IFTRUE 22723
22721: GO 22827
22723: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22724: LD_ADDR_VAR 0 2
22728: PUSH
22729: LD_INT 22
22731: PUSH
22732: LD_OWVAR 2
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PUSH
22741: LD_INT 25
22743: PUSH
22744: LD_INT 1
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: PUSH
22751: EMPTY
22752: LIST
22753: LIST
22754: PPUSH
22755: CALL_OW 69
22759: ST_TO_ADDR
// if not tmp then
22760: LD_VAR 0 2
22764: NOT
22765: IFFALSE 22769
// exit ;
22767: GO 22918
// un := tmp [ rand ( 1 , tmp ) ] ;
22769: LD_ADDR_VAR 0 3
22773: PUSH
22774: LD_VAR 0 2
22778: PUSH
22779: LD_INT 1
22781: PPUSH
22782: LD_VAR 0 2
22786: PPUSH
22787: CALL_OW 12
22791: ARRAY
22792: ST_TO_ADDR
// if Crawls ( un ) then
22793: LD_VAR 0 3
22797: PPUSH
22798: CALL_OW 318
22802: IFFALSE 22813
// ComWalk ( un ) ;
22804: LD_VAR 0 3
22808: PPUSH
22809: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22813: LD_VAR 0 3
22817: PPUSH
22818: LD_INT 8
22820: PPUSH
22821: CALL_OW 336
// end ; 4 :
22825: GO 22918
22827: LD_INT 4
22829: DOUBLE
22830: EQUAL
22831: IFTRUE 22835
22833: GO 22896
22835: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22836: LD_ADDR_VAR 0 2
22840: PUSH
22841: LD_INT 22
22843: PUSH
22844: LD_OWVAR 2
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: PUSH
22853: LD_INT 30
22855: PUSH
22856: LD_INT 29
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: PUSH
22863: EMPTY
22864: LIST
22865: LIST
22866: PPUSH
22867: CALL_OW 69
22871: ST_TO_ADDR
// if not tmp then
22872: LD_VAR 0 2
22876: NOT
22877: IFFALSE 22881
// exit ;
22879: GO 22918
// DestroyUnit ( tmp [ 1 ] ) ;
22881: LD_VAR 0 2
22885: PUSH
22886: LD_INT 1
22888: ARRAY
22889: PPUSH
22890: CALL_OW 65
// end ; 5 .. 7 :
22894: GO 22918
22896: LD_INT 5
22898: DOUBLE
22899: GREATEREQUAL
22900: IFFALSE 22908
22902: LD_INT 7
22904: DOUBLE
22905: LESSEQUAL
22906: IFTRUE 22910
22908: GO 22917
22910: POP
// StreamSibBomb ; end ;
22911: CALL 19168 0 0
22915: GO 22918
22917: POP
// end ;
22918: PPOPN 3
22920: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22921: LD_EXP 48
22925: PUSH
22926: LD_EXP 98
22930: AND
22931: IFFALSE 23087
22933: GO 22935
22935: DISABLE
22936: LD_INT 0
22938: PPUSH
22939: PPUSH
22940: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22941: LD_ADDR_VAR 0 2
22945: PUSH
22946: LD_INT 81
22948: PUSH
22949: LD_OWVAR 2
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PUSH
22958: LD_INT 2
22960: PUSH
22961: LD_INT 21
22963: PUSH
22964: LD_INT 1
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PUSH
22971: LD_INT 21
22973: PUSH
22974: LD_INT 2
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: LIST
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: PPUSH
22990: CALL_OW 69
22994: ST_TO_ADDR
// if not tmp then
22995: LD_VAR 0 2
22999: NOT
23000: IFFALSE 23004
// exit ;
23002: GO 23087
// p := 0 ;
23004: LD_ADDR_VAR 0 3
23008: PUSH
23009: LD_INT 0
23011: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23012: LD_INT 35
23014: PPUSH
23015: CALL_OW 67
// p := p + 1 ;
23019: LD_ADDR_VAR 0 3
23023: PUSH
23024: LD_VAR 0 3
23028: PUSH
23029: LD_INT 1
23031: PLUS
23032: ST_TO_ADDR
// for i in tmp do
23033: LD_ADDR_VAR 0 1
23037: PUSH
23038: LD_VAR 0 2
23042: PUSH
23043: FOR_IN
23044: IFFALSE 23075
// if GetLives ( i ) < 1000 then
23046: LD_VAR 0 1
23050: PPUSH
23051: CALL_OW 256
23055: PUSH
23056: LD_INT 1000
23058: LESS
23059: IFFALSE 23073
// SetLives ( i , 1000 ) ;
23061: LD_VAR 0 1
23065: PPUSH
23066: LD_INT 1000
23068: PPUSH
23069: CALL_OW 234
23073: GO 23043
23075: POP
23076: POP
// until p > 20 ;
23077: LD_VAR 0 3
23081: PUSH
23082: LD_INT 20
23084: GREATER
23085: IFFALSE 23012
// end ;
23087: PPOPN 3
23089: END
// every 0 0$1 trigger StreamModeActive and sTime do
23090: LD_EXP 48
23094: PUSH
23095: LD_EXP 99
23099: AND
23100: IFFALSE 23135
23102: GO 23104
23104: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23105: LD_INT 28
23107: PPUSH
23108: LD_OWVAR 2
23112: PPUSH
23113: LD_INT 2
23115: PPUSH
23116: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23120: LD_INT 30
23122: PPUSH
23123: LD_OWVAR 2
23127: PPUSH
23128: LD_INT 2
23130: PPUSH
23131: CALL_OW 322
// end ;
23135: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23136: LD_EXP 48
23140: PUSH
23141: LD_EXP 100
23145: AND
23146: IFFALSE 23267
23148: GO 23150
23150: DISABLE
23151: LD_INT 0
23153: PPUSH
23154: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23155: LD_ADDR_VAR 0 2
23159: PUSH
23160: LD_INT 22
23162: PUSH
23163: LD_OWVAR 2
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: PUSH
23172: LD_INT 21
23174: PUSH
23175: LD_INT 1
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: PUSH
23182: LD_INT 3
23184: PUSH
23185: LD_INT 23
23187: PUSH
23188: LD_INT 0
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: PUSH
23199: EMPTY
23200: LIST
23201: LIST
23202: LIST
23203: PPUSH
23204: CALL_OW 69
23208: ST_TO_ADDR
// if not tmp then
23209: LD_VAR 0 2
23213: NOT
23214: IFFALSE 23218
// exit ;
23216: GO 23267
// for i in tmp do
23218: LD_ADDR_VAR 0 1
23222: PUSH
23223: LD_VAR 0 2
23227: PUSH
23228: FOR_IN
23229: IFFALSE 23265
// begin if Crawls ( i ) then
23231: LD_VAR 0 1
23235: PPUSH
23236: CALL_OW 318
23240: IFFALSE 23251
// ComWalk ( i ) ;
23242: LD_VAR 0 1
23246: PPUSH
23247: CALL_OW 138
// SetClass ( i , 2 ) ;
23251: LD_VAR 0 1
23255: PPUSH
23256: LD_INT 2
23258: PPUSH
23259: CALL_OW 336
// end ;
23263: GO 23228
23265: POP
23266: POP
// end ;
23267: PPOPN 2
23269: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23270: LD_EXP 48
23274: PUSH
23275: LD_EXP 101
23279: AND
23280: IFFALSE 23561
23282: GO 23284
23284: DISABLE
23285: LD_INT 0
23287: PPUSH
23288: PPUSH
23289: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23290: LD_OWVAR 2
23294: PPUSH
23295: LD_INT 9
23297: PPUSH
23298: LD_INT 1
23300: PPUSH
23301: LD_INT 1
23303: PPUSH
23304: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23308: LD_INT 9
23310: PPUSH
23311: LD_OWVAR 2
23315: PPUSH
23316: CALL_OW 343
// uc_side := 9 ;
23320: LD_ADDR_OWVAR 20
23324: PUSH
23325: LD_INT 9
23327: ST_TO_ADDR
// uc_nation := 2 ;
23328: LD_ADDR_OWVAR 21
23332: PUSH
23333: LD_INT 2
23335: ST_TO_ADDR
// hc_name := Dark Warrior ;
23336: LD_ADDR_OWVAR 26
23340: PUSH
23341: LD_STRING Dark Warrior
23343: ST_TO_ADDR
// hc_gallery :=  ;
23344: LD_ADDR_OWVAR 33
23348: PUSH
23349: LD_STRING 
23351: ST_TO_ADDR
// hc_noskilllimit := true ;
23352: LD_ADDR_OWVAR 76
23356: PUSH
23357: LD_INT 1
23359: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23360: LD_ADDR_OWVAR 31
23364: PUSH
23365: LD_INT 30
23367: PUSH
23368: LD_INT 30
23370: PUSH
23371: LD_INT 30
23373: PUSH
23374: LD_INT 30
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: ST_TO_ADDR
// un := CreateHuman ;
23383: LD_ADDR_VAR 0 3
23387: PUSH
23388: CALL_OW 44
23392: ST_TO_ADDR
// hc_noskilllimit := false ;
23393: LD_ADDR_OWVAR 76
23397: PUSH
23398: LD_INT 0
23400: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23401: LD_VAR 0 3
23405: PPUSH
23406: LD_INT 1
23408: PPUSH
23409: CALL_OW 51
// p := 0 ;
23413: LD_ADDR_VAR 0 2
23417: PUSH
23418: LD_INT 0
23420: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23421: LD_INT 35
23423: PPUSH
23424: CALL_OW 67
// p := p + 1 ;
23428: LD_ADDR_VAR 0 2
23432: PUSH
23433: LD_VAR 0 2
23437: PUSH
23438: LD_INT 1
23440: PLUS
23441: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23442: LD_VAR 0 3
23446: PPUSH
23447: CALL_OW 256
23451: PUSH
23452: LD_INT 1000
23454: LESS
23455: IFFALSE 23469
// SetLives ( un , 1000 ) ;
23457: LD_VAR 0 3
23461: PPUSH
23462: LD_INT 1000
23464: PPUSH
23465: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23469: LD_VAR 0 3
23473: PPUSH
23474: LD_INT 81
23476: PUSH
23477: LD_OWVAR 2
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: PUSH
23486: LD_INT 91
23488: PUSH
23489: LD_VAR 0 3
23493: PUSH
23494: LD_INT 30
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: LIST
23501: PUSH
23502: EMPTY
23503: LIST
23504: LIST
23505: PPUSH
23506: CALL_OW 69
23510: PPUSH
23511: LD_VAR 0 3
23515: PPUSH
23516: CALL_OW 74
23520: PPUSH
23521: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
23525: LD_VAR 0 2
23529: PUSH
23530: LD_INT 60
23532: GREATER
23533: PUSH
23534: LD_VAR 0 3
23538: PPUSH
23539: CALL_OW 301
23543: OR
23544: IFFALSE 23421
// if un then
23546: LD_VAR 0 3
23550: IFFALSE 23561
// RemoveUnit ( un ) ;
23552: LD_VAR 0 3
23556: PPUSH
23557: CALL_OW 64
// end ;
23561: PPOPN 3
23563: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23564: LD_INT 0
23566: PPUSH
// case cmd of 301 :
23567: LD_VAR 0 1
23571: PUSH
23572: LD_INT 301
23574: DOUBLE
23575: EQUAL
23576: IFTRUE 23580
23578: GO 23612
23580: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23581: LD_VAR 0 6
23585: PPUSH
23586: LD_VAR 0 7
23590: PPUSH
23591: LD_VAR 0 8
23595: PPUSH
23596: LD_VAR 0 4
23600: PPUSH
23601: LD_VAR 0 5
23605: PPUSH
23606: CALL 24813 0 5
23610: GO 23733
23612: LD_INT 302
23614: DOUBLE
23615: EQUAL
23616: IFTRUE 23620
23618: GO 23657
23620: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23621: LD_VAR 0 6
23625: PPUSH
23626: LD_VAR 0 7
23630: PPUSH
23631: LD_VAR 0 8
23635: PPUSH
23636: LD_VAR 0 9
23640: PPUSH
23641: LD_VAR 0 4
23645: PPUSH
23646: LD_VAR 0 5
23650: PPUSH
23651: CALL 24904 0 6
23655: GO 23733
23657: LD_INT 303
23659: DOUBLE
23660: EQUAL
23661: IFTRUE 23665
23663: GO 23702
23665: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23666: LD_VAR 0 6
23670: PPUSH
23671: LD_VAR 0 7
23675: PPUSH
23676: LD_VAR 0 8
23680: PPUSH
23681: LD_VAR 0 9
23685: PPUSH
23686: LD_VAR 0 4
23690: PPUSH
23691: LD_VAR 0 5
23695: PPUSH
23696: CALL 23738 0 6
23700: GO 23733
23702: LD_INT 304
23704: DOUBLE
23705: EQUAL
23706: IFTRUE 23710
23708: GO 23732
23710: POP
// hHackTeleport ( unit , x , y ) ; end ;
23711: LD_VAR 0 2
23715: PPUSH
23716: LD_VAR 0 4
23720: PPUSH
23721: LD_VAR 0 5
23725: PPUSH
23726: CALL 25497 0 3
23730: GO 23733
23732: POP
// end ;
23733: LD_VAR 0 12
23737: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23738: LD_INT 0
23740: PPUSH
23741: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23742: LD_VAR 0 1
23746: PUSH
23747: LD_INT 1
23749: LESS
23750: PUSH
23751: LD_VAR 0 1
23755: PUSH
23756: LD_INT 3
23758: GREATER
23759: OR
23760: PUSH
23761: LD_VAR 0 5
23765: PPUSH
23766: LD_VAR 0 6
23770: PPUSH
23771: CALL_OW 428
23775: OR
23776: IFFALSE 23780
// exit ;
23778: GO 24500
// uc_side := your_side ;
23780: LD_ADDR_OWVAR 20
23784: PUSH
23785: LD_OWVAR 2
23789: ST_TO_ADDR
// uc_nation := nation ;
23790: LD_ADDR_OWVAR 21
23794: PUSH
23795: LD_VAR 0 1
23799: ST_TO_ADDR
// bc_level = 1 ;
23800: LD_ADDR_OWVAR 43
23804: PUSH
23805: LD_INT 1
23807: ST_TO_ADDR
// case btype of 1 :
23808: LD_VAR 0 2
23812: PUSH
23813: LD_INT 1
23815: DOUBLE
23816: EQUAL
23817: IFTRUE 23821
23819: GO 23832
23821: POP
// bc_type := b_depot ; 2 :
23822: LD_ADDR_OWVAR 42
23826: PUSH
23827: LD_INT 0
23829: ST_TO_ADDR
23830: GO 24444
23832: LD_INT 2
23834: DOUBLE
23835: EQUAL
23836: IFTRUE 23840
23838: GO 23851
23840: POP
// bc_type := b_warehouse ; 3 :
23841: LD_ADDR_OWVAR 42
23845: PUSH
23846: LD_INT 1
23848: ST_TO_ADDR
23849: GO 24444
23851: LD_INT 3
23853: DOUBLE
23854: EQUAL
23855: IFTRUE 23859
23857: GO 23870
23859: POP
// bc_type := b_lab ; 4 .. 9 :
23860: LD_ADDR_OWVAR 42
23864: PUSH
23865: LD_INT 6
23867: ST_TO_ADDR
23868: GO 24444
23870: LD_INT 4
23872: DOUBLE
23873: GREATEREQUAL
23874: IFFALSE 23882
23876: LD_INT 9
23878: DOUBLE
23879: LESSEQUAL
23880: IFTRUE 23884
23882: GO 23936
23884: POP
// begin bc_type := b_lab_half ;
23885: LD_ADDR_OWVAR 42
23889: PUSH
23890: LD_INT 7
23892: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23893: LD_ADDR_OWVAR 44
23897: PUSH
23898: LD_INT 10
23900: PUSH
23901: LD_INT 11
23903: PUSH
23904: LD_INT 12
23906: PUSH
23907: LD_INT 15
23909: PUSH
23910: LD_INT 14
23912: PUSH
23913: LD_INT 13
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: PUSH
23924: LD_VAR 0 2
23928: PUSH
23929: LD_INT 3
23931: MINUS
23932: ARRAY
23933: ST_TO_ADDR
// end ; 10 .. 13 :
23934: GO 24444
23936: LD_INT 10
23938: DOUBLE
23939: GREATEREQUAL
23940: IFFALSE 23948
23942: LD_INT 13
23944: DOUBLE
23945: LESSEQUAL
23946: IFTRUE 23950
23948: GO 24027
23950: POP
// begin bc_type := b_lab_full ;
23951: LD_ADDR_OWVAR 42
23955: PUSH
23956: LD_INT 8
23958: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23959: LD_ADDR_OWVAR 44
23963: PUSH
23964: LD_INT 10
23966: PUSH
23967: LD_INT 12
23969: PUSH
23970: LD_INT 14
23972: PUSH
23973: LD_INT 13
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: PUSH
23982: LD_VAR 0 2
23986: PUSH
23987: LD_INT 9
23989: MINUS
23990: ARRAY
23991: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23992: LD_ADDR_OWVAR 45
23996: PUSH
23997: LD_INT 11
23999: PUSH
24000: LD_INT 15
24002: PUSH
24003: LD_INT 12
24005: PUSH
24006: LD_INT 15
24008: PUSH
24009: EMPTY
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: PUSH
24015: LD_VAR 0 2
24019: PUSH
24020: LD_INT 9
24022: MINUS
24023: ARRAY
24024: ST_TO_ADDR
// end ; 14 :
24025: GO 24444
24027: LD_INT 14
24029: DOUBLE
24030: EQUAL
24031: IFTRUE 24035
24033: GO 24046
24035: POP
// bc_type := b_workshop ; 15 :
24036: LD_ADDR_OWVAR 42
24040: PUSH
24041: LD_INT 2
24043: ST_TO_ADDR
24044: GO 24444
24046: LD_INT 15
24048: DOUBLE
24049: EQUAL
24050: IFTRUE 24054
24052: GO 24065
24054: POP
// bc_type := b_factory ; 16 :
24055: LD_ADDR_OWVAR 42
24059: PUSH
24060: LD_INT 3
24062: ST_TO_ADDR
24063: GO 24444
24065: LD_INT 16
24067: DOUBLE
24068: EQUAL
24069: IFTRUE 24073
24071: GO 24084
24073: POP
// bc_type := b_ext_gun ; 17 :
24074: LD_ADDR_OWVAR 42
24078: PUSH
24079: LD_INT 17
24081: ST_TO_ADDR
24082: GO 24444
24084: LD_INT 17
24086: DOUBLE
24087: EQUAL
24088: IFTRUE 24092
24090: GO 24120
24092: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24093: LD_ADDR_OWVAR 42
24097: PUSH
24098: LD_INT 19
24100: PUSH
24101: LD_INT 23
24103: PUSH
24104: LD_INT 19
24106: PUSH
24107: EMPTY
24108: LIST
24109: LIST
24110: LIST
24111: PUSH
24112: LD_VAR 0 1
24116: ARRAY
24117: ST_TO_ADDR
24118: GO 24444
24120: LD_INT 18
24122: DOUBLE
24123: EQUAL
24124: IFTRUE 24128
24126: GO 24139
24128: POP
// bc_type := b_ext_radar ; 19 :
24129: LD_ADDR_OWVAR 42
24133: PUSH
24134: LD_INT 20
24136: ST_TO_ADDR
24137: GO 24444
24139: LD_INT 19
24141: DOUBLE
24142: EQUAL
24143: IFTRUE 24147
24145: GO 24158
24147: POP
// bc_type := b_ext_radio ; 20 :
24148: LD_ADDR_OWVAR 42
24152: PUSH
24153: LD_INT 22
24155: ST_TO_ADDR
24156: GO 24444
24158: LD_INT 20
24160: DOUBLE
24161: EQUAL
24162: IFTRUE 24166
24164: GO 24177
24166: POP
// bc_type := b_ext_siberium ; 21 :
24167: LD_ADDR_OWVAR 42
24171: PUSH
24172: LD_INT 21
24174: ST_TO_ADDR
24175: GO 24444
24177: LD_INT 21
24179: DOUBLE
24180: EQUAL
24181: IFTRUE 24185
24183: GO 24196
24185: POP
// bc_type := b_ext_computer ; 22 :
24186: LD_ADDR_OWVAR 42
24190: PUSH
24191: LD_INT 24
24193: ST_TO_ADDR
24194: GO 24444
24196: LD_INT 22
24198: DOUBLE
24199: EQUAL
24200: IFTRUE 24204
24202: GO 24215
24204: POP
// bc_type := b_ext_track ; 23 :
24205: LD_ADDR_OWVAR 42
24209: PUSH
24210: LD_INT 16
24212: ST_TO_ADDR
24213: GO 24444
24215: LD_INT 23
24217: DOUBLE
24218: EQUAL
24219: IFTRUE 24223
24221: GO 24234
24223: POP
// bc_type := b_ext_laser ; 24 :
24224: LD_ADDR_OWVAR 42
24228: PUSH
24229: LD_INT 25
24231: ST_TO_ADDR
24232: GO 24444
24234: LD_INT 24
24236: DOUBLE
24237: EQUAL
24238: IFTRUE 24242
24240: GO 24253
24242: POP
// bc_type := b_control_tower ; 25 :
24243: LD_ADDR_OWVAR 42
24247: PUSH
24248: LD_INT 36
24250: ST_TO_ADDR
24251: GO 24444
24253: LD_INT 25
24255: DOUBLE
24256: EQUAL
24257: IFTRUE 24261
24259: GO 24272
24261: POP
// bc_type := b_breastwork ; 26 :
24262: LD_ADDR_OWVAR 42
24266: PUSH
24267: LD_INT 31
24269: ST_TO_ADDR
24270: GO 24444
24272: LD_INT 26
24274: DOUBLE
24275: EQUAL
24276: IFTRUE 24280
24278: GO 24291
24280: POP
// bc_type := b_bunker ; 27 :
24281: LD_ADDR_OWVAR 42
24285: PUSH
24286: LD_INT 32
24288: ST_TO_ADDR
24289: GO 24444
24291: LD_INT 27
24293: DOUBLE
24294: EQUAL
24295: IFTRUE 24299
24297: GO 24310
24299: POP
// bc_type := b_turret ; 28 :
24300: LD_ADDR_OWVAR 42
24304: PUSH
24305: LD_INT 33
24307: ST_TO_ADDR
24308: GO 24444
24310: LD_INT 28
24312: DOUBLE
24313: EQUAL
24314: IFTRUE 24318
24316: GO 24329
24318: POP
// bc_type := b_armoury ; 29 :
24319: LD_ADDR_OWVAR 42
24323: PUSH
24324: LD_INT 4
24326: ST_TO_ADDR
24327: GO 24444
24329: LD_INT 29
24331: DOUBLE
24332: EQUAL
24333: IFTRUE 24337
24335: GO 24348
24337: POP
// bc_type := b_barracks ; 30 :
24338: LD_ADDR_OWVAR 42
24342: PUSH
24343: LD_INT 5
24345: ST_TO_ADDR
24346: GO 24444
24348: LD_INT 30
24350: DOUBLE
24351: EQUAL
24352: IFTRUE 24356
24354: GO 24367
24356: POP
// bc_type := b_solar_power ; 31 :
24357: LD_ADDR_OWVAR 42
24361: PUSH
24362: LD_INT 27
24364: ST_TO_ADDR
24365: GO 24444
24367: LD_INT 31
24369: DOUBLE
24370: EQUAL
24371: IFTRUE 24375
24373: GO 24386
24375: POP
// bc_type := b_oil_power ; 32 :
24376: LD_ADDR_OWVAR 42
24380: PUSH
24381: LD_INT 26
24383: ST_TO_ADDR
24384: GO 24444
24386: LD_INT 32
24388: DOUBLE
24389: EQUAL
24390: IFTRUE 24394
24392: GO 24405
24394: POP
// bc_type := b_siberite_power ; 33 :
24395: LD_ADDR_OWVAR 42
24399: PUSH
24400: LD_INT 28
24402: ST_TO_ADDR
24403: GO 24444
24405: LD_INT 33
24407: DOUBLE
24408: EQUAL
24409: IFTRUE 24413
24411: GO 24424
24413: POP
// bc_type := b_oil_mine ; 34 :
24414: LD_ADDR_OWVAR 42
24418: PUSH
24419: LD_INT 29
24421: ST_TO_ADDR
24422: GO 24444
24424: LD_INT 34
24426: DOUBLE
24427: EQUAL
24428: IFTRUE 24432
24430: GO 24443
24432: POP
// bc_type := b_siberite_mine ; end ;
24433: LD_ADDR_OWVAR 42
24437: PUSH
24438: LD_INT 30
24440: ST_TO_ADDR
24441: GO 24444
24443: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24444: LD_ADDR_VAR 0 8
24448: PUSH
24449: LD_VAR 0 5
24453: PPUSH
24454: LD_VAR 0 6
24458: PPUSH
24459: LD_VAR 0 3
24463: PPUSH
24464: CALL_OW 47
24468: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24469: LD_OWVAR 42
24473: PUSH
24474: LD_INT 32
24476: PUSH
24477: LD_INT 33
24479: PUSH
24480: EMPTY
24481: LIST
24482: LIST
24483: IN
24484: IFFALSE 24500
// PlaceWeaponTurret ( b , weapon ) ;
24486: LD_VAR 0 8
24490: PPUSH
24491: LD_VAR 0 4
24495: PPUSH
24496: CALL_OW 431
// end ;
24500: LD_VAR 0 7
24504: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24505: LD_INT 0
24507: PPUSH
24508: PPUSH
24509: PPUSH
24510: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24511: LD_ADDR_VAR 0 4
24515: PUSH
24516: LD_INT 22
24518: PUSH
24519: LD_OWVAR 2
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: PUSH
24528: LD_INT 2
24530: PUSH
24531: LD_INT 30
24533: PUSH
24534: LD_INT 0
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: PUSH
24541: LD_INT 30
24543: PUSH
24544: LD_INT 1
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: LIST
24555: PUSH
24556: EMPTY
24557: LIST
24558: LIST
24559: PPUSH
24560: CALL_OW 69
24564: ST_TO_ADDR
// if not tmp then
24565: LD_VAR 0 4
24569: NOT
24570: IFFALSE 24574
// exit ;
24572: GO 24633
// for i in tmp do
24574: LD_ADDR_VAR 0 2
24578: PUSH
24579: LD_VAR 0 4
24583: PUSH
24584: FOR_IN
24585: IFFALSE 24631
// for j = 1 to 3 do
24587: LD_ADDR_VAR 0 3
24591: PUSH
24592: DOUBLE
24593: LD_INT 1
24595: DEC
24596: ST_TO_ADDR
24597: LD_INT 3
24599: PUSH
24600: FOR_TO
24601: IFFALSE 24627
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24603: LD_VAR 0 2
24607: PPUSH
24608: CALL_OW 274
24612: PPUSH
24613: LD_VAR 0 3
24617: PPUSH
24618: LD_INT 99999
24620: PPUSH
24621: CALL_OW 277
24625: GO 24600
24627: POP
24628: POP
24629: GO 24584
24631: POP
24632: POP
// end ;
24633: LD_VAR 0 1
24637: RET
// export function hHackSetLevel10 ; var i , j ; begin
24638: LD_INT 0
24640: PPUSH
24641: PPUSH
24642: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24643: LD_ADDR_VAR 0 2
24647: PUSH
24648: LD_INT 21
24650: PUSH
24651: LD_INT 1
24653: PUSH
24654: EMPTY
24655: LIST
24656: LIST
24657: PPUSH
24658: CALL_OW 69
24662: PUSH
24663: FOR_IN
24664: IFFALSE 24716
// if IsSelected ( i ) then
24666: LD_VAR 0 2
24670: PPUSH
24671: CALL_OW 306
24675: IFFALSE 24714
// begin for j := 1 to 4 do
24677: LD_ADDR_VAR 0 3
24681: PUSH
24682: DOUBLE
24683: LD_INT 1
24685: DEC
24686: ST_TO_ADDR
24687: LD_INT 4
24689: PUSH
24690: FOR_TO
24691: IFFALSE 24712
// SetSkill ( i , j , 10 ) ;
24693: LD_VAR 0 2
24697: PPUSH
24698: LD_VAR 0 3
24702: PPUSH
24703: LD_INT 10
24705: PPUSH
24706: CALL_OW 237
24710: GO 24690
24712: POP
24713: POP
// end ;
24714: GO 24663
24716: POP
24717: POP
// end ;
24718: LD_VAR 0 1
24722: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24723: LD_INT 0
24725: PPUSH
24726: PPUSH
24727: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24728: LD_ADDR_VAR 0 2
24732: PUSH
24733: LD_INT 22
24735: PUSH
24736: LD_OWVAR 2
24740: PUSH
24741: EMPTY
24742: LIST
24743: LIST
24744: PUSH
24745: LD_INT 21
24747: PUSH
24748: LD_INT 1
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: PUSH
24755: EMPTY
24756: LIST
24757: LIST
24758: PPUSH
24759: CALL_OW 69
24763: PUSH
24764: FOR_IN
24765: IFFALSE 24806
// begin for j := 1 to 4 do
24767: LD_ADDR_VAR 0 3
24771: PUSH
24772: DOUBLE
24773: LD_INT 1
24775: DEC
24776: ST_TO_ADDR
24777: LD_INT 4
24779: PUSH
24780: FOR_TO
24781: IFFALSE 24802
// SetSkill ( i , j , 10 ) ;
24783: LD_VAR 0 2
24787: PPUSH
24788: LD_VAR 0 3
24792: PPUSH
24793: LD_INT 10
24795: PPUSH
24796: CALL_OW 237
24800: GO 24780
24802: POP
24803: POP
// end ;
24804: GO 24764
24806: POP
24807: POP
// end ;
24808: LD_VAR 0 1
24812: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24813: LD_INT 0
24815: PPUSH
// uc_side := your_side ;
24816: LD_ADDR_OWVAR 20
24820: PUSH
24821: LD_OWVAR 2
24825: ST_TO_ADDR
// uc_nation := nation ;
24826: LD_ADDR_OWVAR 21
24830: PUSH
24831: LD_VAR 0 1
24835: ST_TO_ADDR
// InitHc ;
24836: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24840: LD_INT 0
24842: PPUSH
24843: LD_VAR 0 2
24847: PPUSH
24848: LD_VAR 0 3
24852: PPUSH
24853: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24857: LD_VAR 0 4
24861: PPUSH
24862: LD_VAR 0 5
24866: PPUSH
24867: CALL_OW 428
24871: PUSH
24872: LD_INT 0
24874: EQUAL
24875: IFFALSE 24899
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24877: CALL_OW 44
24881: PPUSH
24882: LD_VAR 0 4
24886: PPUSH
24887: LD_VAR 0 5
24891: PPUSH
24892: LD_INT 1
24894: PPUSH
24895: CALL_OW 48
// end ;
24899: LD_VAR 0 6
24903: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24904: LD_INT 0
24906: PPUSH
24907: PPUSH
// uc_side := your_side ;
24908: LD_ADDR_OWVAR 20
24912: PUSH
24913: LD_OWVAR 2
24917: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24918: LD_VAR 0 1
24922: PUSH
24923: LD_INT 1
24925: PUSH
24926: LD_INT 2
24928: PUSH
24929: LD_INT 3
24931: PUSH
24932: LD_INT 4
24934: PUSH
24935: LD_INT 5
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: IN
24945: IFFALSE 24957
// uc_nation := nation_american else
24947: LD_ADDR_OWVAR 21
24951: PUSH
24952: LD_INT 1
24954: ST_TO_ADDR
24955: GO 25000
// if chassis in [ 11 , 12 , 13 , 14 ] then
24957: LD_VAR 0 1
24961: PUSH
24962: LD_INT 11
24964: PUSH
24965: LD_INT 12
24967: PUSH
24968: LD_INT 13
24970: PUSH
24971: LD_INT 14
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: IN
24980: IFFALSE 24992
// uc_nation := nation_arabian else
24982: LD_ADDR_OWVAR 21
24986: PUSH
24987: LD_INT 2
24989: ST_TO_ADDR
24990: GO 25000
// uc_nation := nation_russian ;
24992: LD_ADDR_OWVAR 21
24996: PUSH
24997: LD_INT 3
24999: ST_TO_ADDR
// vc_chassis := chassis ;
25000: LD_ADDR_OWVAR 37
25004: PUSH
25005: LD_VAR 0 1
25009: ST_TO_ADDR
// vc_engine := engine ;
25010: LD_ADDR_OWVAR 39
25014: PUSH
25015: LD_VAR 0 2
25019: ST_TO_ADDR
// vc_control := control ;
25020: LD_ADDR_OWVAR 38
25024: PUSH
25025: LD_VAR 0 3
25029: ST_TO_ADDR
// vc_weapon := weapon ;
25030: LD_ADDR_OWVAR 40
25034: PUSH
25035: LD_VAR 0 4
25039: ST_TO_ADDR
// un := CreateVehicle ;
25040: LD_ADDR_VAR 0 8
25044: PUSH
25045: CALL_OW 45
25049: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25050: LD_VAR 0 8
25054: PPUSH
25055: LD_INT 0
25057: PPUSH
25058: LD_INT 5
25060: PPUSH
25061: CALL_OW 12
25065: PPUSH
25066: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25070: LD_VAR 0 8
25074: PPUSH
25075: LD_VAR 0 5
25079: PPUSH
25080: LD_VAR 0 6
25084: PPUSH
25085: LD_INT 1
25087: PPUSH
25088: CALL_OW 48
// end ;
25092: LD_VAR 0 7
25096: RET
// export hInvincible ; every 1 do
25097: GO 25099
25099: DISABLE
// hInvincible := [ ] ;
25100: LD_ADDR_EXP 102
25104: PUSH
25105: EMPTY
25106: ST_TO_ADDR
25107: END
// every 10 do var i ;
25108: GO 25110
25110: DISABLE
25111: LD_INT 0
25113: PPUSH
// begin enable ;
25114: ENABLE
// if not hInvincible then
25115: LD_EXP 102
25119: NOT
25120: IFFALSE 25124
// exit ;
25122: GO 25168
// for i in hInvincible do
25124: LD_ADDR_VAR 0 1
25128: PUSH
25129: LD_EXP 102
25133: PUSH
25134: FOR_IN
25135: IFFALSE 25166
// if GetLives ( i ) < 1000 then
25137: LD_VAR 0 1
25141: PPUSH
25142: CALL_OW 256
25146: PUSH
25147: LD_INT 1000
25149: LESS
25150: IFFALSE 25164
// SetLives ( i , 1000 ) ;
25152: LD_VAR 0 1
25156: PPUSH
25157: LD_INT 1000
25159: PPUSH
25160: CALL_OW 234
25164: GO 25134
25166: POP
25167: POP
// end ;
25168: PPOPN 1
25170: END
// export function hHackInvincible ; var i ; begin
25171: LD_INT 0
25173: PPUSH
25174: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25175: LD_ADDR_VAR 0 2
25179: PUSH
25180: LD_INT 2
25182: PUSH
25183: LD_INT 21
25185: PUSH
25186: LD_INT 1
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: PUSH
25193: LD_INT 21
25195: PUSH
25196: LD_INT 2
25198: PUSH
25199: EMPTY
25200: LIST
25201: LIST
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: LIST
25207: PPUSH
25208: CALL_OW 69
25212: PUSH
25213: FOR_IN
25214: IFFALSE 25275
// if IsSelected ( i ) then
25216: LD_VAR 0 2
25220: PPUSH
25221: CALL_OW 306
25225: IFFALSE 25273
// begin if i in hInvincible then
25227: LD_VAR 0 2
25231: PUSH
25232: LD_EXP 102
25236: IN
25237: IFFALSE 25257
// hInvincible := hInvincible diff i else
25239: LD_ADDR_EXP 102
25243: PUSH
25244: LD_EXP 102
25248: PUSH
25249: LD_VAR 0 2
25253: DIFF
25254: ST_TO_ADDR
25255: GO 25273
// hInvincible := hInvincible union i ;
25257: LD_ADDR_EXP 102
25261: PUSH
25262: LD_EXP 102
25266: PUSH
25267: LD_VAR 0 2
25271: UNION
25272: ST_TO_ADDR
// end ;
25273: GO 25213
25275: POP
25276: POP
// end ;
25277: LD_VAR 0 1
25281: RET
// export function hHackInvisible ; var i , j ; begin
25282: LD_INT 0
25284: PPUSH
25285: PPUSH
25286: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25287: LD_ADDR_VAR 0 2
25291: PUSH
25292: LD_INT 21
25294: PUSH
25295: LD_INT 1
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: PPUSH
25302: CALL_OW 69
25306: PUSH
25307: FOR_IN
25308: IFFALSE 25332
// if IsSelected ( i ) then
25310: LD_VAR 0 2
25314: PPUSH
25315: CALL_OW 306
25319: IFFALSE 25330
// ComForceInvisible ( i ) ;
25321: LD_VAR 0 2
25325: PPUSH
25326: CALL_OW 496
25330: GO 25307
25332: POP
25333: POP
// end ;
25334: LD_VAR 0 1
25338: RET
// export function hHackChangeYourSide ; begin
25339: LD_INT 0
25341: PPUSH
// if your_side = 8 then
25342: LD_OWVAR 2
25346: PUSH
25347: LD_INT 8
25349: EQUAL
25350: IFFALSE 25362
// your_side := 0 else
25352: LD_ADDR_OWVAR 2
25356: PUSH
25357: LD_INT 0
25359: ST_TO_ADDR
25360: GO 25376
// your_side := your_side + 1 ;
25362: LD_ADDR_OWVAR 2
25366: PUSH
25367: LD_OWVAR 2
25371: PUSH
25372: LD_INT 1
25374: PLUS
25375: ST_TO_ADDR
// end ;
25376: LD_VAR 0 1
25380: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25381: LD_INT 0
25383: PPUSH
25384: PPUSH
25385: PPUSH
// for i in all_units do
25386: LD_ADDR_VAR 0 2
25390: PUSH
25391: LD_OWVAR 3
25395: PUSH
25396: FOR_IN
25397: IFFALSE 25475
// if IsSelected ( i ) then
25399: LD_VAR 0 2
25403: PPUSH
25404: CALL_OW 306
25408: IFFALSE 25473
// begin j := GetSide ( i ) ;
25410: LD_ADDR_VAR 0 3
25414: PUSH
25415: LD_VAR 0 2
25419: PPUSH
25420: CALL_OW 255
25424: ST_TO_ADDR
// if j = 8 then
25425: LD_VAR 0 3
25429: PUSH
25430: LD_INT 8
25432: EQUAL
25433: IFFALSE 25445
// j := 0 else
25435: LD_ADDR_VAR 0 3
25439: PUSH
25440: LD_INT 0
25442: ST_TO_ADDR
25443: GO 25459
// j := j + 1 ;
25445: LD_ADDR_VAR 0 3
25449: PUSH
25450: LD_VAR 0 3
25454: PUSH
25455: LD_INT 1
25457: PLUS
25458: ST_TO_ADDR
// SetSide ( i , j ) ;
25459: LD_VAR 0 2
25463: PPUSH
25464: LD_VAR 0 3
25468: PPUSH
25469: CALL_OW 235
// end ;
25473: GO 25396
25475: POP
25476: POP
// end ;
25477: LD_VAR 0 1
25481: RET
// export function hHackFog ; begin
25482: LD_INT 0
25484: PPUSH
// FogOff ( true ) ;
25485: LD_INT 1
25487: PPUSH
25488: CALL_OW 344
// end ;
25492: LD_VAR 0 1
25496: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25497: LD_INT 0
25499: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25500: LD_VAR 0 1
25504: PPUSH
25505: LD_VAR 0 2
25509: PPUSH
25510: LD_VAR 0 3
25514: PPUSH
25515: LD_INT 1
25517: PPUSH
25518: LD_INT 1
25520: PPUSH
25521: CALL_OW 483
// CenterOnXY ( x , y ) ;
25525: LD_VAR 0 2
25529: PPUSH
25530: LD_VAR 0 3
25534: PPUSH
25535: CALL_OW 84
// end ; end_of_file
25539: LD_VAR 0 4
25543: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25544: LD_INT 0
25546: PPUSH
25547: PPUSH
25548: PPUSH
25549: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25550: LD_VAR 0 1
25554: PPUSH
25555: CALL_OW 264
25559: PUSH
25560: LD_EXP 36
25564: EQUAL
25565: IFFALSE 25637
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25567: LD_INT 68
25569: PPUSH
25570: LD_VAR 0 1
25574: PPUSH
25575: CALL_OW 255
25579: PPUSH
25580: CALL_OW 321
25584: PUSH
25585: LD_INT 2
25587: EQUAL
25588: IFFALSE 25600
// eff := 70 else
25590: LD_ADDR_VAR 0 4
25594: PUSH
25595: LD_INT 70
25597: ST_TO_ADDR
25598: GO 25608
// eff := 30 ;
25600: LD_ADDR_VAR 0 4
25604: PUSH
25605: LD_INT 30
25607: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25608: LD_VAR 0 1
25612: PPUSH
25613: CALL_OW 250
25617: PPUSH
25618: LD_VAR 0 1
25622: PPUSH
25623: CALL_OW 251
25627: PPUSH
25628: LD_VAR 0 4
25632: PPUSH
25633: CALL_OW 495
// end ; end ;
25637: LD_VAR 0 2
25641: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25642: LD_INT 0
25644: PPUSH
// end ;
25645: LD_VAR 0 4
25649: RET
// export function SOS_Command ( cmd ) ; begin
25650: LD_INT 0
25652: PPUSH
// end ;
25653: LD_VAR 0 2
25657: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25658: LD_INT 0
25660: PPUSH
// if cmd = 121 then
25661: LD_VAR 0 1
25665: PUSH
25666: LD_INT 121
25668: EQUAL
25669: IFFALSE 25671
// end ;
25671: LD_VAR 0 6
25675: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25676: LD_INT 0
25678: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25679: LD_VAR 0 1
25683: PUSH
25684: LD_INT 250
25686: EQUAL
25687: PUSH
25688: LD_VAR 0 2
25692: PPUSH
25693: CALL_OW 264
25697: PUSH
25698: LD_EXP 39
25702: EQUAL
25703: AND
25704: IFFALSE 25725
// MinerPlaceMine ( unit , x , y ) ;
25706: LD_VAR 0 2
25710: PPUSH
25711: LD_VAR 0 4
25715: PPUSH
25716: LD_VAR 0 5
25720: PPUSH
25721: CALL 28074 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
25725: LD_VAR 0 1
25729: PUSH
25730: LD_INT 251
25732: EQUAL
25733: PUSH
25734: LD_VAR 0 2
25738: PPUSH
25739: CALL_OW 264
25743: PUSH
25744: LD_EXP 39
25748: EQUAL
25749: AND
25750: IFFALSE 25771
// MinerDetonateMine ( unit , x , y ) ;
25752: LD_VAR 0 2
25756: PPUSH
25757: LD_VAR 0 4
25761: PPUSH
25762: LD_VAR 0 5
25766: PPUSH
25767: CALL 28351 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
25771: LD_VAR 0 1
25775: PUSH
25776: LD_INT 252
25778: EQUAL
25779: PUSH
25780: LD_VAR 0 2
25784: PPUSH
25785: CALL_OW 264
25789: PUSH
25790: LD_EXP 39
25794: EQUAL
25795: AND
25796: IFFALSE 25817
// MinerCreateMinefield ( unit , x , y ) ;
25798: LD_VAR 0 2
25802: PPUSH
25803: LD_VAR 0 4
25807: PPUSH
25808: LD_VAR 0 5
25812: PPUSH
25813: CALL 28768 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
25817: LD_VAR 0 1
25821: PUSH
25822: LD_INT 253
25824: EQUAL
25825: PUSH
25826: LD_VAR 0 2
25830: PPUSH
25831: CALL_OW 257
25835: PUSH
25836: LD_INT 5
25838: EQUAL
25839: AND
25840: IFFALSE 25861
// ComBinocular ( unit , x , y ) ;
25842: LD_VAR 0 2
25846: PPUSH
25847: LD_VAR 0 4
25851: PPUSH
25852: LD_VAR 0 5
25856: PPUSH
25857: CALL 29139 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25861: LD_VAR 0 1
25865: PUSH
25866: LD_INT 254
25868: EQUAL
25869: PUSH
25870: LD_VAR 0 2
25874: PPUSH
25875: CALL_OW 264
25879: PUSH
25880: LD_EXP 34
25884: EQUAL
25885: AND
25886: PUSH
25887: LD_VAR 0 3
25891: PPUSH
25892: CALL_OW 263
25896: PUSH
25897: LD_INT 3
25899: EQUAL
25900: AND
25901: IFFALSE 25917
// HackDestroyVehicle ( unit , selectedUnit ) ;
25903: LD_VAR 0 2
25907: PPUSH
25908: LD_VAR 0 3
25912: PPUSH
25913: CALL 27434 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25917: LD_VAR 0 1
25921: PUSH
25922: LD_INT 255
25924: EQUAL
25925: PUSH
25926: LD_VAR 0 2
25930: PPUSH
25931: CALL_OW 264
25935: PUSH
25936: LD_INT 14
25938: PUSH
25939: LD_INT 53
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: IN
25946: AND
25947: PUSH
25948: LD_VAR 0 4
25952: PPUSH
25953: LD_VAR 0 5
25957: PPUSH
25958: CALL_OW 488
25962: AND
25963: IFFALSE 25987
// CutTreeXYR ( unit , x , y , 12 ) ;
25965: LD_VAR 0 2
25969: PPUSH
25970: LD_VAR 0 4
25974: PPUSH
25975: LD_VAR 0 5
25979: PPUSH
25980: LD_INT 12
25982: PPUSH
25983: CALL 26000 0 4
// end ;
25987: LD_VAR 0 6
25991: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
25992: LD_INT 0
25994: PPUSH
// end ;
25995: LD_VAR 0 4
25999: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26000: LD_INT 0
26002: PPUSH
26003: PPUSH
26004: PPUSH
26005: PPUSH
26006: PPUSH
26007: PPUSH
26008: PPUSH
26009: PPUSH
26010: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26011: LD_VAR 0 1
26015: NOT
26016: PUSH
26017: LD_VAR 0 2
26021: PPUSH
26022: LD_VAR 0 3
26026: PPUSH
26027: CALL_OW 488
26031: NOT
26032: OR
26033: PUSH
26034: LD_VAR 0 4
26038: NOT
26039: OR
26040: IFFALSE 26044
// exit ;
26042: GO 26384
// list := [ ] ;
26044: LD_ADDR_VAR 0 13
26048: PUSH
26049: EMPTY
26050: ST_TO_ADDR
// if x - r < 0 then
26051: LD_VAR 0 2
26055: PUSH
26056: LD_VAR 0 4
26060: MINUS
26061: PUSH
26062: LD_INT 0
26064: LESS
26065: IFFALSE 26077
// min_x := 0 else
26067: LD_ADDR_VAR 0 7
26071: PUSH
26072: LD_INT 0
26074: ST_TO_ADDR
26075: GO 26093
// min_x := x - r ;
26077: LD_ADDR_VAR 0 7
26081: PUSH
26082: LD_VAR 0 2
26086: PUSH
26087: LD_VAR 0 4
26091: MINUS
26092: ST_TO_ADDR
// if y - r < 0 then
26093: LD_VAR 0 3
26097: PUSH
26098: LD_VAR 0 4
26102: MINUS
26103: PUSH
26104: LD_INT 0
26106: LESS
26107: IFFALSE 26119
// min_y := 0 else
26109: LD_ADDR_VAR 0 8
26113: PUSH
26114: LD_INT 0
26116: ST_TO_ADDR
26117: GO 26135
// min_y := y - r ;
26119: LD_ADDR_VAR 0 8
26123: PUSH
26124: LD_VAR 0 3
26128: PUSH
26129: LD_VAR 0 4
26133: MINUS
26134: ST_TO_ADDR
// max_x := x + r ;
26135: LD_ADDR_VAR 0 9
26139: PUSH
26140: LD_VAR 0 2
26144: PUSH
26145: LD_VAR 0 4
26149: PLUS
26150: ST_TO_ADDR
// max_y := y + r ;
26151: LD_ADDR_VAR 0 10
26155: PUSH
26156: LD_VAR 0 3
26160: PUSH
26161: LD_VAR 0 4
26165: PLUS
26166: ST_TO_ADDR
// for _x = min_x to max_x do
26167: LD_ADDR_VAR 0 11
26171: PUSH
26172: DOUBLE
26173: LD_VAR 0 7
26177: DEC
26178: ST_TO_ADDR
26179: LD_VAR 0 9
26183: PUSH
26184: FOR_TO
26185: IFFALSE 26302
// for _y = min_y to max_y do
26187: LD_ADDR_VAR 0 12
26191: PUSH
26192: DOUBLE
26193: LD_VAR 0 8
26197: DEC
26198: ST_TO_ADDR
26199: LD_VAR 0 10
26203: PUSH
26204: FOR_TO
26205: IFFALSE 26298
// begin if not ValidHex ( _x , _y ) then
26207: LD_VAR 0 11
26211: PPUSH
26212: LD_VAR 0 12
26216: PPUSH
26217: CALL_OW 488
26221: NOT
26222: IFFALSE 26226
// continue ;
26224: GO 26204
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26226: LD_VAR 0 11
26230: PPUSH
26231: LD_VAR 0 12
26235: PPUSH
26236: CALL_OW 351
26240: PUSH
26241: LD_VAR 0 11
26245: PPUSH
26246: LD_VAR 0 12
26250: PPUSH
26251: CALL_OW 554
26255: AND
26256: IFFALSE 26296
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26258: LD_ADDR_VAR 0 13
26262: PUSH
26263: LD_VAR 0 13
26267: PPUSH
26268: LD_VAR 0 13
26272: PUSH
26273: LD_INT 1
26275: PLUS
26276: PPUSH
26277: LD_VAR 0 11
26281: PUSH
26282: LD_VAR 0 12
26286: PUSH
26287: EMPTY
26288: LIST
26289: LIST
26290: PPUSH
26291: CALL_OW 2
26295: ST_TO_ADDR
// end ;
26296: GO 26204
26298: POP
26299: POP
26300: GO 26184
26302: POP
26303: POP
// if not list then
26304: LD_VAR 0 13
26308: NOT
26309: IFFALSE 26313
// exit ;
26311: GO 26384
// for i in list do
26313: LD_ADDR_VAR 0 6
26317: PUSH
26318: LD_VAR 0 13
26322: PUSH
26323: FOR_IN
26324: IFFALSE 26382
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26326: LD_VAR 0 1
26330: PPUSH
26331: LD_STRING M
26333: PUSH
26334: LD_VAR 0 6
26338: PUSH
26339: LD_INT 1
26341: ARRAY
26342: PUSH
26343: LD_VAR 0 6
26347: PUSH
26348: LD_INT 2
26350: ARRAY
26351: PUSH
26352: LD_INT 0
26354: PUSH
26355: LD_INT 0
26357: PUSH
26358: LD_INT 0
26360: PUSH
26361: LD_INT 0
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: LIST
26370: LIST
26371: LIST
26372: PUSH
26373: EMPTY
26374: LIST
26375: PPUSH
26376: CALL_OW 447
26380: GO 26323
26382: POP
26383: POP
// end ;
26384: LD_VAR 0 5
26388: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26389: LD_EXP 105
26393: NOT
26394: IFFALSE 26444
26396: GO 26398
26398: DISABLE
// begin initHack := true ;
26399: LD_ADDR_EXP 105
26403: PUSH
26404: LD_INT 1
26406: ST_TO_ADDR
// hackTanks := [ ] ;
26407: LD_ADDR_EXP 106
26411: PUSH
26412: EMPTY
26413: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26414: LD_ADDR_EXP 107
26418: PUSH
26419: EMPTY
26420: ST_TO_ADDR
// hackLimit := 3 ;
26421: LD_ADDR_EXP 108
26425: PUSH
26426: LD_INT 3
26428: ST_TO_ADDR
// hackDist := 12 ;
26429: LD_ADDR_EXP 109
26433: PUSH
26434: LD_INT 12
26436: ST_TO_ADDR
// hackCounter := [ ] ;
26437: LD_ADDR_EXP 110
26441: PUSH
26442: EMPTY
26443: ST_TO_ADDR
// end ;
26444: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26445: LD_EXP 105
26449: PUSH
26450: LD_INT 34
26452: PUSH
26453: LD_EXP 34
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: PPUSH
26462: CALL_OW 69
26466: AND
26467: IFFALSE 26722
26469: GO 26471
26471: DISABLE
26472: LD_INT 0
26474: PPUSH
26475: PPUSH
// begin enable ;
26476: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26477: LD_ADDR_VAR 0 1
26481: PUSH
26482: LD_INT 34
26484: PUSH
26485: LD_EXP 34
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: PPUSH
26494: CALL_OW 69
26498: PUSH
26499: FOR_IN
26500: IFFALSE 26720
// begin if not i in hackTanks then
26502: LD_VAR 0 1
26506: PUSH
26507: LD_EXP 106
26511: IN
26512: NOT
26513: IFFALSE 26596
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26515: LD_ADDR_EXP 106
26519: PUSH
26520: LD_EXP 106
26524: PPUSH
26525: LD_EXP 106
26529: PUSH
26530: LD_INT 1
26532: PLUS
26533: PPUSH
26534: LD_VAR 0 1
26538: PPUSH
26539: CALL_OW 1
26543: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26544: LD_ADDR_EXP 107
26548: PUSH
26549: LD_EXP 107
26553: PPUSH
26554: LD_EXP 107
26558: PUSH
26559: LD_INT 1
26561: PLUS
26562: PPUSH
26563: EMPTY
26564: PPUSH
26565: CALL_OW 1
26569: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26570: LD_ADDR_EXP 110
26574: PUSH
26575: LD_EXP 110
26579: PPUSH
26580: LD_EXP 110
26584: PUSH
26585: LD_INT 1
26587: PLUS
26588: PPUSH
26589: EMPTY
26590: PPUSH
26591: CALL_OW 1
26595: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26596: LD_VAR 0 1
26600: PPUSH
26601: CALL_OW 302
26605: NOT
26606: IFFALSE 26619
// begin HackUnlinkAll ( i ) ;
26608: LD_VAR 0 1
26612: PPUSH
26613: CALL 26725 0 1
// continue ;
26617: GO 26499
// end ; HackCheckCapturedStatus ( i ) ;
26619: LD_VAR 0 1
26623: PPUSH
26624: CALL 27168 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26628: LD_ADDR_VAR 0 2
26632: PUSH
26633: LD_INT 81
26635: PUSH
26636: LD_VAR 0 1
26640: PPUSH
26641: CALL_OW 255
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: PUSH
26650: LD_INT 33
26652: PUSH
26653: LD_INT 3
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: PUSH
26660: LD_INT 91
26662: PUSH
26663: LD_VAR 0 1
26667: PUSH
26668: LD_EXP 109
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: LIST
26677: PUSH
26678: LD_INT 50
26680: PUSH
26681: EMPTY
26682: LIST
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: PPUSH
26690: CALL_OW 69
26694: ST_TO_ADDR
// if not tmp then
26695: LD_VAR 0 2
26699: NOT
26700: IFFALSE 26704
// continue ;
26702: GO 26499
// HackLink ( i , tmp ) ;
26704: LD_VAR 0 1
26708: PPUSH
26709: LD_VAR 0 2
26713: PPUSH
26714: CALL 26861 0 2
// end ;
26718: GO 26499
26720: POP
26721: POP
// end ;
26722: PPOPN 2
26724: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
26725: LD_INT 0
26727: PPUSH
26728: PPUSH
26729: PPUSH
// if not hack in hackTanks then
26730: LD_VAR 0 1
26734: PUSH
26735: LD_EXP 106
26739: IN
26740: NOT
26741: IFFALSE 26745
// exit ;
26743: GO 26856
// index := GetElementIndex ( hackTanks , hack ) ;
26745: LD_ADDR_VAR 0 4
26749: PUSH
26750: LD_EXP 106
26754: PPUSH
26755: LD_VAR 0 1
26759: PPUSH
26760: CALL 34290 0 2
26764: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
26765: LD_EXP 107
26769: PUSH
26770: LD_VAR 0 4
26774: ARRAY
26775: IFFALSE 26856
// begin for i in hackTanksCaptured [ index ] do
26777: LD_ADDR_VAR 0 3
26781: PUSH
26782: LD_EXP 107
26786: PUSH
26787: LD_VAR 0 4
26791: ARRAY
26792: PUSH
26793: FOR_IN
26794: IFFALSE 26820
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26796: LD_VAR 0 3
26800: PUSH
26801: LD_INT 1
26803: ARRAY
26804: PPUSH
26805: LD_VAR 0 3
26809: PUSH
26810: LD_INT 2
26812: ARRAY
26813: PPUSH
26814: CALL_OW 235
26818: GO 26793
26820: POP
26821: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26822: LD_ADDR_EXP 107
26826: PUSH
26827: LD_EXP 107
26831: PPUSH
26832: LD_VAR 0 4
26836: PPUSH
26837: EMPTY
26838: PPUSH
26839: CALL_OW 1
26843: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26844: LD_VAR 0 1
26848: PPUSH
26849: LD_INT 0
26851: PPUSH
26852: CALL_OW 505
// end ; end ;
26856: LD_VAR 0 2
26860: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26861: LD_INT 0
26863: PPUSH
26864: PPUSH
26865: PPUSH
// if not hack in hackTanks or not vehicles then
26866: LD_VAR 0 1
26870: PUSH
26871: LD_EXP 106
26875: IN
26876: NOT
26877: PUSH
26878: LD_VAR 0 2
26882: NOT
26883: OR
26884: IFFALSE 26888
// exit ;
26886: GO 27163
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26888: LD_ADDR_VAR 0 2
26892: PUSH
26893: LD_VAR 0 1
26897: PPUSH
26898: LD_VAR 0 2
26902: PPUSH
26903: LD_INT 1
26905: PPUSH
26906: LD_INT 1
26908: PPUSH
26909: CALL 34940 0 4
26913: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26914: LD_ADDR_VAR 0 5
26918: PUSH
26919: LD_EXP 106
26923: PPUSH
26924: LD_VAR 0 1
26928: PPUSH
26929: CALL 34290 0 2
26933: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26934: LD_EXP 107
26938: PUSH
26939: LD_VAR 0 5
26943: ARRAY
26944: PUSH
26945: LD_EXP 108
26949: LESS
26950: IFFALSE 27139
// begin for i := 1 to vehicles do
26952: LD_ADDR_VAR 0 4
26956: PUSH
26957: DOUBLE
26958: LD_INT 1
26960: DEC
26961: ST_TO_ADDR
26962: LD_VAR 0 2
26966: PUSH
26967: FOR_TO
26968: IFFALSE 27137
// begin if hackTanksCaptured [ index ] = hackLimit then
26970: LD_EXP 107
26974: PUSH
26975: LD_VAR 0 5
26979: ARRAY
26980: PUSH
26981: LD_EXP 108
26985: EQUAL
26986: IFFALSE 26990
// break ;
26988: GO 27137
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26990: LD_ADDR_EXP 110
26994: PUSH
26995: LD_EXP 110
26999: PPUSH
27000: LD_VAR 0 5
27004: PPUSH
27005: LD_EXP 110
27009: PUSH
27010: LD_VAR 0 5
27014: ARRAY
27015: PUSH
27016: LD_INT 1
27018: PLUS
27019: PPUSH
27020: CALL_OW 1
27024: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27025: LD_ADDR_EXP 107
27029: PUSH
27030: LD_EXP 107
27034: PPUSH
27035: LD_VAR 0 5
27039: PUSH
27040: LD_EXP 107
27044: PUSH
27045: LD_VAR 0 5
27049: ARRAY
27050: PUSH
27051: LD_INT 1
27053: PLUS
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PPUSH
27059: LD_VAR 0 2
27063: PUSH
27064: LD_VAR 0 4
27068: ARRAY
27069: PUSH
27070: LD_VAR 0 2
27074: PUSH
27075: LD_VAR 0 4
27079: ARRAY
27080: PPUSH
27081: CALL_OW 255
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: PPUSH
27090: CALL 34505 0 3
27094: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27095: LD_VAR 0 2
27099: PUSH
27100: LD_VAR 0 4
27104: ARRAY
27105: PPUSH
27106: LD_VAR 0 1
27110: PPUSH
27111: CALL_OW 255
27115: PPUSH
27116: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27120: LD_VAR 0 2
27124: PUSH
27125: LD_VAR 0 4
27129: ARRAY
27130: PPUSH
27131: CALL_OW 141
// end ;
27135: GO 26967
27137: POP
27138: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27139: LD_VAR 0 1
27143: PPUSH
27144: LD_EXP 107
27148: PUSH
27149: LD_VAR 0 5
27153: ARRAY
27154: PUSH
27155: LD_INT 0
27157: PLUS
27158: PPUSH
27159: CALL_OW 505
// end ;
27163: LD_VAR 0 3
27167: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27168: LD_INT 0
27170: PPUSH
27171: PPUSH
27172: PPUSH
27173: PPUSH
// if not hack in hackTanks then
27174: LD_VAR 0 1
27178: PUSH
27179: LD_EXP 106
27183: IN
27184: NOT
27185: IFFALSE 27189
// exit ;
27187: GO 27429
// index := GetElementIndex ( hackTanks , hack ) ;
27189: LD_ADDR_VAR 0 4
27193: PUSH
27194: LD_EXP 106
27198: PPUSH
27199: LD_VAR 0 1
27203: PPUSH
27204: CALL 34290 0 2
27208: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27209: LD_ADDR_VAR 0 3
27213: PUSH
27214: DOUBLE
27215: LD_EXP 107
27219: PUSH
27220: LD_VAR 0 4
27224: ARRAY
27225: INC
27226: ST_TO_ADDR
27227: LD_INT 1
27229: PUSH
27230: FOR_DOWNTO
27231: IFFALSE 27403
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27233: LD_ADDR_VAR 0 5
27237: PUSH
27238: LD_EXP 107
27242: PUSH
27243: LD_VAR 0 4
27247: ARRAY
27248: PUSH
27249: LD_VAR 0 3
27253: ARRAY
27254: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27255: LD_VAR 0 5
27259: PUSH
27260: LD_INT 1
27262: ARRAY
27263: PPUSH
27264: CALL_OW 302
27268: NOT
27269: PUSH
27270: LD_VAR 0 5
27274: PUSH
27275: LD_INT 1
27277: ARRAY
27278: PPUSH
27279: CALL_OW 255
27283: PUSH
27284: LD_VAR 0 1
27288: PPUSH
27289: CALL_OW 255
27293: NONEQUAL
27294: OR
27295: IFFALSE 27401
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27297: LD_VAR 0 5
27301: PUSH
27302: LD_INT 1
27304: ARRAY
27305: PPUSH
27306: CALL_OW 305
27310: PUSH
27311: LD_VAR 0 5
27315: PUSH
27316: LD_INT 1
27318: ARRAY
27319: PPUSH
27320: CALL_OW 255
27324: PUSH
27325: LD_VAR 0 1
27329: PPUSH
27330: CALL_OW 255
27334: EQUAL
27335: AND
27336: IFFALSE 27360
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27338: LD_VAR 0 5
27342: PUSH
27343: LD_INT 1
27345: ARRAY
27346: PPUSH
27347: LD_VAR 0 5
27351: PUSH
27352: LD_INT 2
27354: ARRAY
27355: PPUSH
27356: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27360: LD_ADDR_EXP 107
27364: PUSH
27365: LD_EXP 107
27369: PPUSH
27370: LD_VAR 0 4
27374: PPUSH
27375: LD_EXP 107
27379: PUSH
27380: LD_VAR 0 4
27384: ARRAY
27385: PPUSH
27386: LD_VAR 0 3
27390: PPUSH
27391: CALL_OW 3
27395: PPUSH
27396: CALL_OW 1
27400: ST_TO_ADDR
// end ; end ;
27401: GO 27230
27403: POP
27404: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27405: LD_VAR 0 1
27409: PPUSH
27410: LD_EXP 107
27414: PUSH
27415: LD_VAR 0 4
27419: ARRAY
27420: PUSH
27421: LD_INT 0
27423: PLUS
27424: PPUSH
27425: CALL_OW 505
// end ;
27429: LD_VAR 0 2
27433: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27434: LD_INT 0
27436: PPUSH
27437: PPUSH
27438: PPUSH
27439: PPUSH
// if not hack in hackTanks then
27440: LD_VAR 0 1
27444: PUSH
27445: LD_EXP 106
27449: IN
27450: NOT
27451: IFFALSE 27455
// exit ;
27453: GO 27540
// index := GetElementIndex ( hackTanks , hack ) ;
27455: LD_ADDR_VAR 0 5
27459: PUSH
27460: LD_EXP 106
27464: PPUSH
27465: LD_VAR 0 1
27469: PPUSH
27470: CALL 34290 0 2
27474: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27475: LD_ADDR_VAR 0 4
27479: PUSH
27480: DOUBLE
27481: LD_INT 1
27483: DEC
27484: ST_TO_ADDR
27485: LD_EXP 107
27489: PUSH
27490: LD_VAR 0 5
27494: ARRAY
27495: PUSH
27496: FOR_TO
27497: IFFALSE 27538
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27499: LD_EXP 107
27503: PUSH
27504: LD_VAR 0 5
27508: ARRAY
27509: PUSH
27510: LD_VAR 0 4
27514: ARRAY
27515: PUSH
27516: LD_INT 1
27518: ARRAY
27519: PUSH
27520: LD_VAR 0 2
27524: EQUAL
27525: IFFALSE 27536
// KillUnit ( vehicle ) ;
27527: LD_VAR 0 2
27531: PPUSH
27532: CALL_OW 66
27536: GO 27496
27538: POP
27539: POP
// end ;
27540: LD_VAR 0 3
27544: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
27545: LD_EXP 111
27549: NOT
27550: IFFALSE 27585
27552: GO 27554
27554: DISABLE
// begin initMiner := true ;
27555: LD_ADDR_EXP 111
27559: PUSH
27560: LD_INT 1
27562: ST_TO_ADDR
// minersList := [ ] ;
27563: LD_ADDR_EXP 112
27567: PUSH
27568: EMPTY
27569: ST_TO_ADDR
// minerMinesList := [ ] ;
27570: LD_ADDR_EXP 113
27574: PUSH
27575: EMPTY
27576: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
27577: LD_ADDR_EXP 114
27581: PUSH
27582: LD_INT 5
27584: ST_TO_ADDR
// end ;
27585: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
27586: LD_EXP 111
27590: PUSH
27591: LD_INT 34
27593: PUSH
27594: LD_EXP 39
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PPUSH
27603: CALL_OW 69
27607: AND
27608: IFFALSE 28071
27610: GO 27612
27612: DISABLE
27613: LD_INT 0
27615: PPUSH
27616: PPUSH
27617: PPUSH
27618: PPUSH
// begin enable ;
27619: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
27620: LD_ADDR_VAR 0 1
27624: PUSH
27625: LD_INT 34
27627: PUSH
27628: LD_EXP 39
27632: PUSH
27633: EMPTY
27634: LIST
27635: LIST
27636: PPUSH
27637: CALL_OW 69
27641: PUSH
27642: FOR_IN
27643: IFFALSE 27715
// begin if not i in minersList then
27645: LD_VAR 0 1
27649: PUSH
27650: LD_EXP 112
27654: IN
27655: NOT
27656: IFFALSE 27713
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
27658: LD_ADDR_EXP 112
27662: PUSH
27663: LD_EXP 112
27667: PPUSH
27668: LD_EXP 112
27672: PUSH
27673: LD_INT 1
27675: PLUS
27676: PPUSH
27677: LD_VAR 0 1
27681: PPUSH
27682: CALL_OW 1
27686: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27687: LD_ADDR_EXP 113
27691: PUSH
27692: LD_EXP 113
27696: PPUSH
27697: LD_EXP 113
27701: PUSH
27702: LD_INT 1
27704: PLUS
27705: PPUSH
27706: EMPTY
27707: PPUSH
27708: CALL_OW 1
27712: ST_TO_ADDR
// end end ;
27713: GO 27642
27715: POP
27716: POP
// for i := minerMinesList downto 1 do
27717: LD_ADDR_VAR 0 1
27721: PUSH
27722: DOUBLE
27723: LD_EXP 113
27727: INC
27728: ST_TO_ADDR
27729: LD_INT 1
27731: PUSH
27732: FOR_DOWNTO
27733: IFFALSE 28069
// begin if IsLive ( minersList [ i ] ) then
27735: LD_EXP 112
27739: PUSH
27740: LD_VAR 0 1
27744: ARRAY
27745: PPUSH
27746: CALL_OW 300
27750: IFFALSE 27778
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
27752: LD_EXP 112
27756: PUSH
27757: LD_VAR 0 1
27761: ARRAY
27762: PPUSH
27763: LD_EXP 113
27767: PUSH
27768: LD_VAR 0 1
27772: ARRAY
27773: PPUSH
27774: CALL_OW 505
// if not minerMinesList [ i ] then
27778: LD_EXP 113
27782: PUSH
27783: LD_VAR 0 1
27787: ARRAY
27788: NOT
27789: IFFALSE 27793
// continue ;
27791: GO 27732
// for j := minerMinesList [ i ] downto 1 do
27793: LD_ADDR_VAR 0 2
27797: PUSH
27798: DOUBLE
27799: LD_EXP 113
27803: PUSH
27804: LD_VAR 0 1
27808: ARRAY
27809: INC
27810: ST_TO_ADDR
27811: LD_INT 1
27813: PUSH
27814: FOR_DOWNTO
27815: IFFALSE 28065
// begin side := GetSide ( minersList [ i ] ) ;
27817: LD_ADDR_VAR 0 3
27821: PUSH
27822: LD_EXP 112
27826: PUSH
27827: LD_VAR 0 1
27831: ARRAY
27832: PPUSH
27833: CALL_OW 255
27837: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27838: LD_ADDR_VAR 0 4
27842: PUSH
27843: LD_EXP 113
27847: PUSH
27848: LD_VAR 0 1
27852: ARRAY
27853: PUSH
27854: LD_VAR 0 2
27858: ARRAY
27859: PUSH
27860: LD_INT 1
27862: ARRAY
27863: PPUSH
27864: LD_EXP 113
27868: PUSH
27869: LD_VAR 0 1
27873: ARRAY
27874: PUSH
27875: LD_VAR 0 2
27879: ARRAY
27880: PUSH
27881: LD_INT 2
27883: ARRAY
27884: PPUSH
27885: CALL_OW 428
27889: ST_TO_ADDR
// if not tmp then
27890: LD_VAR 0 4
27894: NOT
27895: IFFALSE 27899
// continue ;
27897: GO 27814
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27899: LD_VAR 0 4
27903: PUSH
27904: LD_INT 81
27906: PUSH
27907: LD_VAR 0 3
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PPUSH
27916: CALL_OW 69
27920: IN
27921: PUSH
27922: LD_EXP 113
27926: PUSH
27927: LD_VAR 0 1
27931: ARRAY
27932: PUSH
27933: LD_VAR 0 2
27937: ARRAY
27938: PUSH
27939: LD_INT 1
27941: ARRAY
27942: PPUSH
27943: LD_EXP 113
27947: PUSH
27948: LD_VAR 0 1
27952: ARRAY
27953: PUSH
27954: LD_VAR 0 2
27958: ARRAY
27959: PUSH
27960: LD_INT 2
27962: ARRAY
27963: PPUSH
27964: CALL_OW 458
27968: AND
27969: IFFALSE 28063
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27971: LD_EXP 113
27975: PUSH
27976: LD_VAR 0 1
27980: ARRAY
27981: PUSH
27982: LD_VAR 0 2
27986: ARRAY
27987: PUSH
27988: LD_INT 1
27990: ARRAY
27991: PPUSH
27992: LD_EXP 113
27996: PUSH
27997: LD_VAR 0 1
28001: ARRAY
28002: PUSH
28003: LD_VAR 0 2
28007: ARRAY
28008: PUSH
28009: LD_INT 2
28011: ARRAY
28012: PPUSH
28013: LD_VAR 0 3
28017: PPUSH
28018: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28022: LD_ADDR_EXP 113
28026: PUSH
28027: LD_EXP 113
28031: PPUSH
28032: LD_VAR 0 1
28036: PPUSH
28037: LD_EXP 113
28041: PUSH
28042: LD_VAR 0 1
28046: ARRAY
28047: PPUSH
28048: LD_VAR 0 2
28052: PPUSH
28053: CALL_OW 3
28057: PPUSH
28058: CALL_OW 1
28062: ST_TO_ADDR
// end ; end ;
28063: GO 27814
28065: POP
28066: POP
// end ;
28067: GO 27732
28069: POP
28070: POP
// end ;
28071: PPOPN 4
28073: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28074: LD_INT 0
28076: PPUSH
28077: PPUSH
// result := false ;
28078: LD_ADDR_VAR 0 4
28082: PUSH
28083: LD_INT 0
28085: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28086: LD_VAR 0 1
28090: PPUSH
28091: CALL_OW 264
28095: PUSH
28096: LD_EXP 39
28100: EQUAL
28101: NOT
28102: IFFALSE 28106
// exit ;
28104: GO 28346
// index := GetElementIndex ( minersList , unit ) ;
28106: LD_ADDR_VAR 0 5
28110: PUSH
28111: LD_EXP 112
28115: PPUSH
28116: LD_VAR 0 1
28120: PPUSH
28121: CALL 34290 0 2
28125: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28126: LD_EXP 113
28130: PUSH
28131: LD_VAR 0 5
28135: ARRAY
28136: PUSH
28137: LD_EXP 114
28141: GREATEREQUAL
28142: IFFALSE 28146
// exit ;
28144: GO 28346
// ComMoveXY ( unit , x , y ) ;
28146: LD_VAR 0 1
28150: PPUSH
28151: LD_VAR 0 2
28155: PPUSH
28156: LD_VAR 0 3
28160: PPUSH
28161: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28165: LD_INT 35
28167: PPUSH
28168: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28172: LD_VAR 0 1
28176: PPUSH
28177: LD_VAR 0 2
28181: PPUSH
28182: LD_VAR 0 3
28186: PPUSH
28187: CALL 64674 0 3
28191: NOT
28192: PUSH
28193: LD_VAR 0 1
28197: PPUSH
28198: CALL_OW 314
28202: AND
28203: IFFALSE 28207
// exit ;
28205: GO 28346
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28207: LD_VAR 0 2
28211: PPUSH
28212: LD_VAR 0 3
28216: PPUSH
28217: CALL_OW 428
28221: PUSH
28222: LD_VAR 0 1
28226: EQUAL
28227: PUSH
28228: LD_VAR 0 1
28232: PPUSH
28233: CALL_OW 314
28237: NOT
28238: AND
28239: IFFALSE 28165
// PlaySoundXY ( x , y , PlantMine ) ;
28241: LD_VAR 0 2
28245: PPUSH
28246: LD_VAR 0 3
28250: PPUSH
28251: LD_STRING PlantMine
28253: PPUSH
28254: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28258: LD_VAR 0 2
28262: PPUSH
28263: LD_VAR 0 3
28267: PPUSH
28268: LD_VAR 0 1
28272: PPUSH
28273: CALL_OW 255
28277: PPUSH
28278: LD_INT 0
28280: PPUSH
28281: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28285: LD_ADDR_EXP 113
28289: PUSH
28290: LD_EXP 113
28294: PPUSH
28295: LD_VAR 0 5
28299: PUSH
28300: LD_EXP 113
28304: PUSH
28305: LD_VAR 0 5
28309: ARRAY
28310: PUSH
28311: LD_INT 1
28313: PLUS
28314: PUSH
28315: EMPTY
28316: LIST
28317: LIST
28318: PPUSH
28319: LD_VAR 0 2
28323: PUSH
28324: LD_VAR 0 3
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PPUSH
28333: CALL 34505 0 3
28337: ST_TO_ADDR
// result := true ;
28338: LD_ADDR_VAR 0 4
28342: PUSH
28343: LD_INT 1
28345: ST_TO_ADDR
// end ;
28346: LD_VAR 0 4
28350: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28351: LD_INT 0
28353: PPUSH
28354: PPUSH
28355: PPUSH
// if not unit in minersList then
28356: LD_VAR 0 1
28360: PUSH
28361: LD_EXP 112
28365: IN
28366: NOT
28367: IFFALSE 28371
// exit ;
28369: GO 28763
// index := GetElementIndex ( minersList , unit ) ;
28371: LD_ADDR_VAR 0 6
28375: PUSH
28376: LD_EXP 112
28380: PPUSH
28381: LD_VAR 0 1
28385: PPUSH
28386: CALL 34290 0 2
28390: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28391: LD_ADDR_VAR 0 5
28395: PUSH
28396: DOUBLE
28397: LD_EXP 113
28401: PUSH
28402: LD_VAR 0 6
28406: ARRAY
28407: INC
28408: ST_TO_ADDR
28409: LD_INT 1
28411: PUSH
28412: FOR_DOWNTO
28413: IFFALSE 28574
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28415: LD_EXP 113
28419: PUSH
28420: LD_VAR 0 6
28424: ARRAY
28425: PUSH
28426: LD_VAR 0 5
28430: ARRAY
28431: PUSH
28432: LD_INT 1
28434: ARRAY
28435: PUSH
28436: LD_VAR 0 2
28440: EQUAL
28441: PUSH
28442: LD_EXP 113
28446: PUSH
28447: LD_VAR 0 6
28451: ARRAY
28452: PUSH
28453: LD_VAR 0 5
28457: ARRAY
28458: PUSH
28459: LD_INT 2
28461: ARRAY
28462: PUSH
28463: LD_VAR 0 3
28467: EQUAL
28468: AND
28469: IFFALSE 28572
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28471: LD_EXP 113
28475: PUSH
28476: LD_VAR 0 6
28480: ARRAY
28481: PUSH
28482: LD_VAR 0 5
28486: ARRAY
28487: PUSH
28488: LD_INT 1
28490: ARRAY
28491: PPUSH
28492: LD_EXP 113
28496: PUSH
28497: LD_VAR 0 6
28501: ARRAY
28502: PUSH
28503: LD_VAR 0 5
28507: ARRAY
28508: PUSH
28509: LD_INT 2
28511: ARRAY
28512: PPUSH
28513: LD_VAR 0 1
28517: PPUSH
28518: CALL_OW 255
28522: PPUSH
28523: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28527: LD_ADDR_EXP 113
28531: PUSH
28532: LD_EXP 113
28536: PPUSH
28537: LD_VAR 0 6
28541: PPUSH
28542: LD_EXP 113
28546: PUSH
28547: LD_VAR 0 6
28551: ARRAY
28552: PPUSH
28553: LD_VAR 0 5
28557: PPUSH
28558: CALL_OW 3
28562: PPUSH
28563: CALL_OW 1
28567: ST_TO_ADDR
// exit ;
28568: POP
28569: POP
28570: GO 28763
// end ; end ;
28572: GO 28412
28574: POP
28575: POP
// for i := minerMinesList [ index ] downto 1 do
28576: LD_ADDR_VAR 0 5
28580: PUSH
28581: DOUBLE
28582: LD_EXP 113
28586: PUSH
28587: LD_VAR 0 6
28591: ARRAY
28592: INC
28593: ST_TO_ADDR
28594: LD_INT 1
28596: PUSH
28597: FOR_DOWNTO
28598: IFFALSE 28761
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
28600: LD_EXP 113
28604: PUSH
28605: LD_VAR 0 6
28609: ARRAY
28610: PUSH
28611: LD_VAR 0 5
28615: ARRAY
28616: PUSH
28617: LD_INT 1
28619: ARRAY
28620: PPUSH
28621: LD_EXP 113
28625: PUSH
28626: LD_VAR 0 6
28630: ARRAY
28631: PUSH
28632: LD_VAR 0 5
28636: ARRAY
28637: PUSH
28638: LD_INT 2
28640: ARRAY
28641: PPUSH
28642: LD_VAR 0 2
28646: PPUSH
28647: LD_VAR 0 3
28651: PPUSH
28652: CALL_OW 298
28656: PUSH
28657: LD_INT 6
28659: LESS
28660: IFFALSE 28759
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28662: LD_EXP 113
28666: PUSH
28667: LD_VAR 0 6
28671: ARRAY
28672: PUSH
28673: LD_VAR 0 5
28677: ARRAY
28678: PUSH
28679: LD_INT 1
28681: ARRAY
28682: PPUSH
28683: LD_EXP 113
28687: PUSH
28688: LD_VAR 0 6
28692: ARRAY
28693: PUSH
28694: LD_VAR 0 5
28698: ARRAY
28699: PUSH
28700: LD_INT 2
28702: ARRAY
28703: PPUSH
28704: LD_VAR 0 1
28708: PPUSH
28709: CALL_OW 255
28713: PPUSH
28714: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28718: LD_ADDR_EXP 113
28722: PUSH
28723: LD_EXP 113
28727: PPUSH
28728: LD_VAR 0 6
28732: PPUSH
28733: LD_EXP 113
28737: PUSH
28738: LD_VAR 0 6
28742: ARRAY
28743: PPUSH
28744: LD_VAR 0 5
28748: PPUSH
28749: CALL_OW 3
28753: PPUSH
28754: CALL_OW 1
28758: ST_TO_ADDR
// end ; end ;
28759: GO 28597
28761: POP
28762: POP
// end ;
28763: LD_VAR 0 4
28767: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
28768: LD_INT 0
28770: PPUSH
28771: PPUSH
28772: PPUSH
28773: PPUSH
28774: PPUSH
28775: PPUSH
28776: PPUSH
28777: PPUSH
28778: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
28779: LD_VAR 0 1
28783: PPUSH
28784: CALL_OW 264
28788: PUSH
28789: LD_EXP 39
28793: EQUAL
28794: NOT
28795: PUSH
28796: LD_VAR 0 1
28800: PUSH
28801: LD_EXP 112
28805: IN
28806: NOT
28807: OR
28808: IFFALSE 28812
// exit ;
28810: GO 29134
// index := GetElementIndex ( minersList , unit ) ;
28812: LD_ADDR_VAR 0 6
28816: PUSH
28817: LD_EXP 112
28821: PPUSH
28822: LD_VAR 0 1
28826: PPUSH
28827: CALL 34290 0 2
28831: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
28832: LD_ADDR_VAR 0 8
28836: PUSH
28837: LD_EXP 114
28841: PUSH
28842: LD_EXP 113
28846: PUSH
28847: LD_VAR 0 6
28851: ARRAY
28852: MINUS
28853: ST_TO_ADDR
// if not minesFreeAmount then
28854: LD_VAR 0 8
28858: NOT
28859: IFFALSE 28863
// exit ;
28861: GO 29134
// tmp := [ ] ;
28863: LD_ADDR_VAR 0 7
28867: PUSH
28868: EMPTY
28869: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28870: LD_ADDR_VAR 0 5
28874: PUSH
28875: DOUBLE
28876: LD_INT 1
28878: DEC
28879: ST_TO_ADDR
28880: LD_VAR 0 8
28884: PUSH
28885: FOR_TO
28886: IFFALSE 29081
// begin _d := rand ( 0 , 5 ) ;
28888: LD_ADDR_VAR 0 11
28892: PUSH
28893: LD_INT 0
28895: PPUSH
28896: LD_INT 5
28898: PPUSH
28899: CALL_OW 12
28903: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28904: LD_ADDR_VAR 0 12
28908: PUSH
28909: LD_INT 2
28911: PPUSH
28912: LD_INT 6
28914: PPUSH
28915: CALL_OW 12
28919: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28920: LD_ADDR_VAR 0 9
28924: PUSH
28925: LD_VAR 0 2
28929: PPUSH
28930: LD_VAR 0 11
28934: PPUSH
28935: LD_VAR 0 12
28939: PPUSH
28940: CALL_OW 272
28944: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28945: LD_ADDR_VAR 0 10
28949: PUSH
28950: LD_VAR 0 3
28954: PPUSH
28955: LD_VAR 0 11
28959: PPUSH
28960: LD_VAR 0 12
28964: PPUSH
28965: CALL_OW 273
28969: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28970: LD_VAR 0 9
28974: PPUSH
28975: LD_VAR 0 10
28979: PPUSH
28980: CALL_OW 488
28984: PUSH
28985: LD_VAR 0 9
28989: PUSH
28990: LD_VAR 0 10
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: PUSH
28999: LD_VAR 0 7
29003: IN
29004: NOT
29005: AND
29006: PUSH
29007: LD_VAR 0 9
29011: PPUSH
29012: LD_VAR 0 10
29016: PPUSH
29017: CALL_OW 458
29021: NOT
29022: AND
29023: IFFALSE 29065
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29025: LD_ADDR_VAR 0 7
29029: PUSH
29030: LD_VAR 0 7
29034: PPUSH
29035: LD_VAR 0 7
29039: PUSH
29040: LD_INT 1
29042: PLUS
29043: PPUSH
29044: LD_VAR 0 9
29048: PUSH
29049: LD_VAR 0 10
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: PPUSH
29058: CALL_OW 1
29062: ST_TO_ADDR
29063: GO 29079
// i := i - 1 ;
29065: LD_ADDR_VAR 0 5
29069: PUSH
29070: LD_VAR 0 5
29074: PUSH
29075: LD_INT 1
29077: MINUS
29078: ST_TO_ADDR
// end ;
29079: GO 28885
29081: POP
29082: POP
// for i in tmp do
29083: LD_ADDR_VAR 0 5
29087: PUSH
29088: LD_VAR 0 7
29092: PUSH
29093: FOR_IN
29094: IFFALSE 29132
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29096: LD_VAR 0 1
29100: PPUSH
29101: LD_VAR 0 5
29105: PUSH
29106: LD_INT 1
29108: ARRAY
29109: PPUSH
29110: LD_VAR 0 5
29114: PUSH
29115: LD_INT 2
29117: ARRAY
29118: PPUSH
29119: CALL 28074 0 3
29123: NOT
29124: IFFALSE 29130
// exit ;
29126: POP
29127: POP
29128: GO 29134
29130: GO 29093
29132: POP
29133: POP
// end ;
29134: LD_VAR 0 4
29138: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29139: LD_INT 0
29141: PPUSH
29142: PPUSH
29143: PPUSH
29144: PPUSH
29145: PPUSH
29146: PPUSH
29147: PPUSH
// if not GetClass ( unit ) = class_sniper then
29148: LD_VAR 0 1
29152: PPUSH
29153: CALL_OW 257
29157: PUSH
29158: LD_INT 5
29160: EQUAL
29161: NOT
29162: IFFALSE 29166
// exit ;
29164: GO 29554
// dist := 8 ;
29166: LD_ADDR_VAR 0 5
29170: PUSH
29171: LD_INT 8
29173: ST_TO_ADDR
// viewRange := 12 ;
29174: LD_ADDR_VAR 0 7
29178: PUSH
29179: LD_INT 12
29181: ST_TO_ADDR
// side := GetSide ( unit ) ;
29182: LD_ADDR_VAR 0 6
29186: PUSH
29187: LD_VAR 0 1
29191: PPUSH
29192: CALL_OW 255
29196: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29197: LD_INT 61
29199: PPUSH
29200: LD_VAR 0 6
29204: PPUSH
29205: CALL_OW 321
29209: PUSH
29210: LD_INT 2
29212: EQUAL
29213: IFFALSE 29223
// viewRange := 16 ;
29215: LD_ADDR_VAR 0 7
29219: PUSH
29220: LD_INT 16
29222: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29223: LD_VAR 0 1
29227: PPUSH
29228: LD_VAR 0 2
29232: PPUSH
29233: LD_VAR 0 3
29237: PPUSH
29238: CALL_OW 297
29242: PUSH
29243: LD_VAR 0 5
29247: GREATER
29248: IFFALSE 29327
// begin ComMoveXY ( unit , x , y ) ;
29250: LD_VAR 0 1
29254: PPUSH
29255: LD_VAR 0 2
29259: PPUSH
29260: LD_VAR 0 3
29264: PPUSH
29265: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29269: LD_INT 35
29271: PPUSH
29272: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29276: LD_VAR 0 1
29280: PPUSH
29281: LD_VAR 0 2
29285: PPUSH
29286: LD_VAR 0 3
29290: PPUSH
29291: CALL 64674 0 3
29295: NOT
29296: IFFALSE 29300
// exit ;
29298: GO 29554
// until GetDistUnitXY ( unit , x , y ) < dist ;
29300: LD_VAR 0 1
29304: PPUSH
29305: LD_VAR 0 2
29309: PPUSH
29310: LD_VAR 0 3
29314: PPUSH
29315: CALL_OW 297
29319: PUSH
29320: LD_VAR 0 5
29324: LESS
29325: IFFALSE 29269
// end ; ComTurnXY ( unit , x , y ) ;
29327: LD_VAR 0 1
29331: PPUSH
29332: LD_VAR 0 2
29336: PPUSH
29337: LD_VAR 0 3
29341: PPUSH
29342: CALL_OW 118
// wait ( 5 ) ;
29346: LD_INT 5
29348: PPUSH
29349: CALL_OW 67
// _d := GetDir ( unit ) ;
29353: LD_ADDR_VAR 0 10
29357: PUSH
29358: LD_VAR 0 1
29362: PPUSH
29363: CALL_OW 254
29367: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29368: LD_ADDR_VAR 0 8
29372: PUSH
29373: LD_VAR 0 1
29377: PPUSH
29378: CALL_OW 250
29382: PPUSH
29383: LD_VAR 0 10
29387: PPUSH
29388: LD_VAR 0 5
29392: PPUSH
29393: CALL_OW 272
29397: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29398: LD_ADDR_VAR 0 9
29402: PUSH
29403: LD_VAR 0 1
29407: PPUSH
29408: CALL_OW 251
29412: PPUSH
29413: LD_VAR 0 10
29417: PPUSH
29418: LD_VAR 0 5
29422: PPUSH
29423: CALL_OW 273
29427: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29428: LD_VAR 0 8
29432: PPUSH
29433: LD_VAR 0 9
29437: PPUSH
29438: CALL_OW 488
29442: NOT
29443: IFFALSE 29447
// exit ;
29445: GO 29554
// ComAnimCustom ( unit , 1 ) ;
29447: LD_VAR 0 1
29451: PPUSH
29452: LD_INT 1
29454: PPUSH
29455: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29459: LD_VAR 0 8
29463: PPUSH
29464: LD_VAR 0 9
29468: PPUSH
29469: LD_VAR 0 6
29473: PPUSH
29474: LD_VAR 0 7
29478: PPUSH
29479: CALL_OW 330
// repeat wait ( 1 ) ;
29483: LD_INT 1
29485: PPUSH
29486: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29490: LD_VAR 0 1
29494: PPUSH
29495: CALL_OW 316
29499: PUSH
29500: LD_VAR 0 1
29504: PPUSH
29505: CALL_OW 314
29509: OR
29510: PUSH
29511: LD_VAR 0 1
29515: PPUSH
29516: CALL_OW 302
29520: NOT
29521: OR
29522: PUSH
29523: LD_VAR 0 1
29527: PPUSH
29528: CALL_OW 301
29532: OR
29533: IFFALSE 29483
// RemoveSeeing ( _x , _y , side ) ;
29535: LD_VAR 0 8
29539: PPUSH
29540: LD_VAR 0 9
29544: PPUSH
29545: LD_VAR 0 6
29549: PPUSH
29550: CALL_OW 331
// end ; end_of_file
29554: LD_VAR 0 4
29558: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29559: LD_INT 0
29561: PPUSH
29562: PPUSH
// if exist_mode then
29563: LD_VAR 0 2
29567: IFFALSE 29592
// unit := CreateCharacter ( prefix & ident ) else
29569: LD_ADDR_VAR 0 5
29573: PUSH
29574: LD_VAR 0 3
29578: PUSH
29579: LD_VAR 0 1
29583: STR
29584: PPUSH
29585: CALL_OW 34
29589: ST_TO_ADDR
29590: GO 29607
// unit := NewCharacter ( ident ) ;
29592: LD_ADDR_VAR 0 5
29596: PUSH
29597: LD_VAR 0 1
29601: PPUSH
29602: CALL_OW 25
29606: ST_TO_ADDR
// result := unit ;
29607: LD_ADDR_VAR 0 4
29611: PUSH
29612: LD_VAR 0 5
29616: ST_TO_ADDR
// end ;
29617: LD_VAR 0 4
29621: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29622: LD_INT 0
29624: PPUSH
29625: PPUSH
// if not side or not nation then
29626: LD_VAR 0 1
29630: NOT
29631: PUSH
29632: LD_VAR 0 2
29636: NOT
29637: OR
29638: IFFALSE 29642
// exit ;
29640: GO 30406
// case nation of nation_american :
29642: LD_VAR 0 2
29646: PUSH
29647: LD_INT 1
29649: DOUBLE
29650: EQUAL
29651: IFTRUE 29655
29653: GO 29869
29655: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29656: LD_ADDR_VAR 0 4
29660: PUSH
29661: LD_INT 35
29663: PUSH
29664: LD_INT 45
29666: PUSH
29667: LD_INT 46
29669: PUSH
29670: LD_INT 47
29672: PUSH
29673: LD_INT 82
29675: PUSH
29676: LD_INT 83
29678: PUSH
29679: LD_INT 84
29681: PUSH
29682: LD_INT 85
29684: PUSH
29685: LD_INT 86
29687: PUSH
29688: LD_INT 1
29690: PUSH
29691: LD_INT 2
29693: PUSH
29694: LD_INT 6
29696: PUSH
29697: LD_INT 15
29699: PUSH
29700: LD_INT 16
29702: PUSH
29703: LD_INT 7
29705: PUSH
29706: LD_INT 12
29708: PUSH
29709: LD_INT 13
29711: PUSH
29712: LD_INT 10
29714: PUSH
29715: LD_INT 14
29717: PUSH
29718: LD_INT 20
29720: PUSH
29721: LD_INT 21
29723: PUSH
29724: LD_INT 22
29726: PUSH
29727: LD_INT 25
29729: PUSH
29730: LD_INT 32
29732: PUSH
29733: LD_INT 27
29735: PUSH
29736: LD_INT 36
29738: PUSH
29739: LD_INT 69
29741: PUSH
29742: LD_INT 39
29744: PUSH
29745: LD_INT 34
29747: PUSH
29748: LD_INT 40
29750: PUSH
29751: LD_INT 48
29753: PUSH
29754: LD_INT 49
29756: PUSH
29757: LD_INT 50
29759: PUSH
29760: LD_INT 51
29762: PUSH
29763: LD_INT 52
29765: PUSH
29766: LD_INT 53
29768: PUSH
29769: LD_INT 54
29771: PUSH
29772: LD_INT 55
29774: PUSH
29775: LD_INT 56
29777: PUSH
29778: LD_INT 57
29780: PUSH
29781: LD_INT 58
29783: PUSH
29784: LD_INT 59
29786: PUSH
29787: LD_INT 60
29789: PUSH
29790: LD_INT 61
29792: PUSH
29793: LD_INT 62
29795: PUSH
29796: LD_INT 80
29798: PUSH
29799: LD_INT 82
29801: PUSH
29802: LD_INT 83
29804: PUSH
29805: LD_INT 84
29807: PUSH
29808: LD_INT 85
29810: PUSH
29811: LD_INT 86
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: LIST
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: LIST
29842: LIST
29843: LIST
29844: LIST
29845: LIST
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: ST_TO_ADDR
29867: GO 30330
29869: LD_INT 2
29871: DOUBLE
29872: EQUAL
29873: IFTRUE 29877
29875: GO 30099
29877: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
29878: LD_ADDR_VAR 0 4
29882: PUSH
29883: LD_INT 35
29885: PUSH
29886: LD_INT 45
29888: PUSH
29889: LD_INT 46
29891: PUSH
29892: LD_INT 47
29894: PUSH
29895: LD_INT 82
29897: PUSH
29898: LD_INT 83
29900: PUSH
29901: LD_INT 84
29903: PUSH
29904: LD_INT 85
29906: PUSH
29907: LD_INT 87
29909: PUSH
29910: LD_INT 70
29912: PUSH
29913: LD_INT 1
29915: PUSH
29916: LD_INT 11
29918: PUSH
29919: LD_INT 3
29921: PUSH
29922: LD_INT 4
29924: PUSH
29925: LD_INT 5
29927: PUSH
29928: LD_INT 6
29930: PUSH
29931: LD_INT 15
29933: PUSH
29934: LD_INT 18
29936: PUSH
29937: LD_INT 7
29939: PUSH
29940: LD_INT 17
29942: PUSH
29943: LD_INT 8
29945: PUSH
29946: LD_INT 20
29948: PUSH
29949: LD_INT 21
29951: PUSH
29952: LD_INT 22
29954: PUSH
29955: LD_INT 72
29957: PUSH
29958: LD_INT 26
29960: PUSH
29961: LD_INT 69
29963: PUSH
29964: LD_INT 39
29966: PUSH
29967: LD_INT 40
29969: PUSH
29970: LD_INT 41
29972: PUSH
29973: LD_INT 42
29975: PUSH
29976: LD_INT 43
29978: PUSH
29979: LD_INT 48
29981: PUSH
29982: LD_INT 49
29984: PUSH
29985: LD_INT 50
29987: PUSH
29988: LD_INT 51
29990: PUSH
29991: LD_INT 52
29993: PUSH
29994: LD_INT 53
29996: PUSH
29997: LD_INT 54
29999: PUSH
30000: LD_INT 55
30002: PUSH
30003: LD_INT 56
30005: PUSH
30006: LD_INT 60
30008: PUSH
30009: LD_INT 61
30011: PUSH
30012: LD_INT 62
30014: PUSH
30015: LD_INT 66
30017: PUSH
30018: LD_INT 67
30020: PUSH
30021: LD_INT 68
30023: PUSH
30024: LD_INT 81
30026: PUSH
30027: LD_INT 82
30029: PUSH
30030: LD_INT 83
30032: PUSH
30033: LD_INT 84
30035: PUSH
30036: LD_INT 85
30038: PUSH
30039: LD_INT 87
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: LIST
30046: LIST
30047: LIST
30048: LIST
30049: LIST
30050: LIST
30051: LIST
30052: LIST
30053: LIST
30054: LIST
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: LIST
30062: LIST
30063: LIST
30064: LIST
30065: LIST
30066: LIST
30067: LIST
30068: LIST
30069: LIST
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: LIST
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: ST_TO_ADDR
30097: GO 30330
30099: LD_INT 3
30101: DOUBLE
30102: EQUAL
30103: IFTRUE 30107
30105: GO 30329
30107: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30108: LD_ADDR_VAR 0 4
30112: PUSH
30113: LD_INT 46
30115: PUSH
30116: LD_INT 47
30118: PUSH
30119: LD_INT 1
30121: PUSH
30122: LD_INT 2
30124: PUSH
30125: LD_INT 82
30127: PUSH
30128: LD_INT 83
30130: PUSH
30131: LD_INT 84
30133: PUSH
30134: LD_INT 85
30136: PUSH
30137: LD_INT 86
30139: PUSH
30140: LD_INT 11
30142: PUSH
30143: LD_INT 9
30145: PUSH
30146: LD_INT 20
30148: PUSH
30149: LD_INT 19
30151: PUSH
30152: LD_INT 21
30154: PUSH
30155: LD_INT 24
30157: PUSH
30158: LD_INT 22
30160: PUSH
30161: LD_INT 25
30163: PUSH
30164: LD_INT 28
30166: PUSH
30167: LD_INT 29
30169: PUSH
30170: LD_INT 30
30172: PUSH
30173: LD_INT 31
30175: PUSH
30176: LD_INT 37
30178: PUSH
30179: LD_INT 38
30181: PUSH
30182: LD_INT 32
30184: PUSH
30185: LD_INT 27
30187: PUSH
30188: LD_INT 33
30190: PUSH
30191: LD_INT 69
30193: PUSH
30194: LD_INT 39
30196: PUSH
30197: LD_INT 34
30199: PUSH
30200: LD_INT 40
30202: PUSH
30203: LD_INT 71
30205: PUSH
30206: LD_INT 23
30208: PUSH
30209: LD_INT 44
30211: PUSH
30212: LD_INT 48
30214: PUSH
30215: LD_INT 49
30217: PUSH
30218: LD_INT 50
30220: PUSH
30221: LD_INT 51
30223: PUSH
30224: LD_INT 52
30226: PUSH
30227: LD_INT 53
30229: PUSH
30230: LD_INT 54
30232: PUSH
30233: LD_INT 55
30235: PUSH
30236: LD_INT 56
30238: PUSH
30239: LD_INT 57
30241: PUSH
30242: LD_INT 58
30244: PUSH
30245: LD_INT 59
30247: PUSH
30248: LD_INT 63
30250: PUSH
30251: LD_INT 64
30253: PUSH
30254: LD_INT 65
30256: PUSH
30257: LD_INT 82
30259: PUSH
30260: LD_INT 83
30262: PUSH
30263: LD_INT 84
30265: PUSH
30266: LD_INT 85
30268: PUSH
30269: LD_INT 86
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: LIST
30276: LIST
30277: LIST
30278: LIST
30279: LIST
30280: LIST
30281: LIST
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: ST_TO_ADDR
30327: GO 30330
30329: POP
// if state > - 1 and state < 3 then
30330: LD_VAR 0 3
30334: PUSH
30335: LD_INT 1
30337: NEG
30338: GREATER
30339: PUSH
30340: LD_VAR 0 3
30344: PUSH
30345: LD_INT 3
30347: LESS
30348: AND
30349: IFFALSE 30406
// for i in result do
30351: LD_ADDR_VAR 0 5
30355: PUSH
30356: LD_VAR 0 4
30360: PUSH
30361: FOR_IN
30362: IFFALSE 30404
// if GetTech ( i , side ) <> state then
30364: LD_VAR 0 5
30368: PPUSH
30369: LD_VAR 0 1
30373: PPUSH
30374: CALL_OW 321
30378: PUSH
30379: LD_VAR 0 3
30383: NONEQUAL
30384: IFFALSE 30402
// result := result diff i ;
30386: LD_ADDR_VAR 0 4
30390: PUSH
30391: LD_VAR 0 4
30395: PUSH
30396: LD_VAR 0 5
30400: DIFF
30401: ST_TO_ADDR
30402: GO 30361
30404: POP
30405: POP
// end ;
30406: LD_VAR 0 4
30410: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30411: LD_INT 0
30413: PPUSH
30414: PPUSH
30415: PPUSH
// result := true ;
30416: LD_ADDR_VAR 0 3
30420: PUSH
30421: LD_INT 1
30423: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30424: LD_ADDR_VAR 0 5
30428: PUSH
30429: LD_VAR 0 2
30433: PPUSH
30434: CALL_OW 480
30438: ST_TO_ADDR
// if not tmp then
30439: LD_VAR 0 5
30443: NOT
30444: IFFALSE 30448
// exit ;
30446: GO 30497
// for i in tmp do
30448: LD_ADDR_VAR 0 4
30452: PUSH
30453: LD_VAR 0 5
30457: PUSH
30458: FOR_IN
30459: IFFALSE 30495
// if GetTech ( i , side ) <> state_researched then
30461: LD_VAR 0 4
30465: PPUSH
30466: LD_VAR 0 1
30470: PPUSH
30471: CALL_OW 321
30475: PUSH
30476: LD_INT 2
30478: NONEQUAL
30479: IFFALSE 30493
// begin result := false ;
30481: LD_ADDR_VAR 0 3
30485: PUSH
30486: LD_INT 0
30488: ST_TO_ADDR
// exit ;
30489: POP
30490: POP
30491: GO 30497
// end ;
30493: GO 30458
30495: POP
30496: POP
// end ;
30497: LD_VAR 0 3
30501: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30502: LD_INT 0
30504: PPUSH
30505: PPUSH
30506: PPUSH
30507: PPUSH
30508: PPUSH
30509: PPUSH
30510: PPUSH
30511: PPUSH
30512: PPUSH
30513: PPUSH
30514: PPUSH
30515: PPUSH
30516: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30517: LD_VAR 0 1
30521: NOT
30522: PUSH
30523: LD_VAR 0 1
30527: PPUSH
30528: CALL_OW 257
30532: PUSH
30533: LD_INT 9
30535: NONEQUAL
30536: OR
30537: IFFALSE 30541
// exit ;
30539: GO 31114
// side := GetSide ( unit ) ;
30541: LD_ADDR_VAR 0 9
30545: PUSH
30546: LD_VAR 0 1
30550: PPUSH
30551: CALL_OW 255
30555: ST_TO_ADDR
// tech_space := tech_spacanom ;
30556: LD_ADDR_VAR 0 12
30560: PUSH
30561: LD_INT 29
30563: ST_TO_ADDR
// tech_time := tech_taurad ;
30564: LD_ADDR_VAR 0 13
30568: PUSH
30569: LD_INT 28
30571: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30572: LD_ADDR_VAR 0 11
30576: PUSH
30577: LD_VAR 0 1
30581: PPUSH
30582: CALL_OW 310
30586: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30587: LD_VAR 0 11
30591: PPUSH
30592: CALL_OW 247
30596: PUSH
30597: LD_INT 2
30599: EQUAL
30600: IFFALSE 30604
// exit ;
30602: GO 31114
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30604: LD_ADDR_VAR 0 8
30608: PUSH
30609: LD_INT 81
30611: PUSH
30612: LD_VAR 0 9
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: PUSH
30621: LD_INT 3
30623: PUSH
30624: LD_INT 21
30626: PUSH
30627: LD_INT 3
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: PPUSH
30642: CALL_OW 69
30646: ST_TO_ADDR
// if not tmp then
30647: LD_VAR 0 8
30651: NOT
30652: IFFALSE 30656
// exit ;
30654: GO 31114
// if in_unit then
30656: LD_VAR 0 11
30660: IFFALSE 30684
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30662: LD_ADDR_VAR 0 10
30666: PUSH
30667: LD_VAR 0 8
30671: PPUSH
30672: LD_VAR 0 11
30676: PPUSH
30677: CALL_OW 74
30681: ST_TO_ADDR
30682: GO 30704
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30684: LD_ADDR_VAR 0 10
30688: PUSH
30689: LD_VAR 0 8
30693: PPUSH
30694: LD_VAR 0 1
30698: PPUSH
30699: CALL_OW 74
30703: ST_TO_ADDR
// if not enemy then
30704: LD_VAR 0 10
30708: NOT
30709: IFFALSE 30713
// exit ;
30711: GO 31114
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30713: LD_VAR 0 11
30717: PUSH
30718: LD_VAR 0 11
30722: PPUSH
30723: LD_VAR 0 10
30727: PPUSH
30728: CALL_OW 296
30732: PUSH
30733: LD_INT 13
30735: GREATER
30736: AND
30737: PUSH
30738: LD_VAR 0 1
30742: PPUSH
30743: LD_VAR 0 10
30747: PPUSH
30748: CALL_OW 296
30752: PUSH
30753: LD_INT 12
30755: GREATER
30756: OR
30757: IFFALSE 30761
// exit ;
30759: GO 31114
// missile := [ 1 ] ;
30761: LD_ADDR_VAR 0 14
30765: PUSH
30766: LD_INT 1
30768: PUSH
30769: EMPTY
30770: LIST
30771: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30772: LD_VAR 0 9
30776: PPUSH
30777: LD_VAR 0 12
30781: PPUSH
30782: CALL_OW 325
30786: IFFALSE 30815
// missile := Insert ( missile , missile + 1 , 2 ) ;
30788: LD_ADDR_VAR 0 14
30792: PUSH
30793: LD_VAR 0 14
30797: PPUSH
30798: LD_VAR 0 14
30802: PUSH
30803: LD_INT 1
30805: PLUS
30806: PPUSH
30807: LD_INT 2
30809: PPUSH
30810: CALL_OW 2
30814: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30815: LD_VAR 0 9
30819: PPUSH
30820: LD_VAR 0 13
30824: PPUSH
30825: CALL_OW 325
30829: PUSH
30830: LD_VAR 0 10
30834: PPUSH
30835: CALL_OW 255
30839: PPUSH
30840: LD_VAR 0 13
30844: PPUSH
30845: CALL_OW 325
30849: NOT
30850: AND
30851: IFFALSE 30880
// missile := Insert ( missile , missile + 1 , 3 ) ;
30853: LD_ADDR_VAR 0 14
30857: PUSH
30858: LD_VAR 0 14
30862: PPUSH
30863: LD_VAR 0 14
30867: PUSH
30868: LD_INT 1
30870: PLUS
30871: PPUSH
30872: LD_INT 3
30874: PPUSH
30875: CALL_OW 2
30879: ST_TO_ADDR
// if missile < 2 then
30880: LD_VAR 0 14
30884: PUSH
30885: LD_INT 2
30887: LESS
30888: IFFALSE 30892
// exit ;
30890: GO 31114
// x := GetX ( enemy ) ;
30892: LD_ADDR_VAR 0 4
30896: PUSH
30897: LD_VAR 0 10
30901: PPUSH
30902: CALL_OW 250
30906: ST_TO_ADDR
// y := GetY ( enemy ) ;
30907: LD_ADDR_VAR 0 5
30911: PUSH
30912: LD_VAR 0 10
30916: PPUSH
30917: CALL_OW 251
30921: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30922: LD_ADDR_VAR 0 6
30926: PUSH
30927: LD_VAR 0 4
30931: PUSH
30932: LD_INT 1
30934: NEG
30935: PPUSH
30936: LD_INT 1
30938: PPUSH
30939: CALL_OW 12
30943: PLUS
30944: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30945: LD_ADDR_VAR 0 7
30949: PUSH
30950: LD_VAR 0 5
30954: PUSH
30955: LD_INT 1
30957: NEG
30958: PPUSH
30959: LD_INT 1
30961: PPUSH
30962: CALL_OW 12
30966: PLUS
30967: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30968: LD_VAR 0 6
30972: PPUSH
30973: LD_VAR 0 7
30977: PPUSH
30978: CALL_OW 488
30982: NOT
30983: IFFALSE 31005
// begin _x := x ;
30985: LD_ADDR_VAR 0 6
30989: PUSH
30990: LD_VAR 0 4
30994: ST_TO_ADDR
// _y := y ;
30995: LD_ADDR_VAR 0 7
30999: PUSH
31000: LD_VAR 0 5
31004: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31005: LD_ADDR_VAR 0 3
31009: PUSH
31010: LD_INT 1
31012: PPUSH
31013: LD_VAR 0 14
31017: PPUSH
31018: CALL_OW 12
31022: ST_TO_ADDR
// case i of 1 :
31023: LD_VAR 0 3
31027: PUSH
31028: LD_INT 1
31030: DOUBLE
31031: EQUAL
31032: IFTRUE 31036
31034: GO 31053
31036: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31037: LD_VAR 0 1
31041: PPUSH
31042: LD_VAR 0 10
31046: PPUSH
31047: CALL_OW 115
31051: GO 31114
31053: LD_INT 2
31055: DOUBLE
31056: EQUAL
31057: IFTRUE 31061
31059: GO 31083
31061: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31062: LD_VAR 0 1
31066: PPUSH
31067: LD_VAR 0 6
31071: PPUSH
31072: LD_VAR 0 7
31076: PPUSH
31077: CALL_OW 153
31081: GO 31114
31083: LD_INT 3
31085: DOUBLE
31086: EQUAL
31087: IFTRUE 31091
31089: GO 31113
31091: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31092: LD_VAR 0 1
31096: PPUSH
31097: LD_VAR 0 6
31101: PPUSH
31102: LD_VAR 0 7
31106: PPUSH
31107: CALL_OW 154
31111: GO 31114
31113: POP
// end ;
31114: LD_VAR 0 2
31118: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31119: LD_INT 0
31121: PPUSH
31122: PPUSH
31123: PPUSH
31124: PPUSH
31125: PPUSH
31126: PPUSH
// if not unit or not building then
31127: LD_VAR 0 1
31131: NOT
31132: PUSH
31133: LD_VAR 0 2
31137: NOT
31138: OR
31139: IFFALSE 31143
// exit ;
31141: GO 31301
// x := GetX ( building ) ;
31143: LD_ADDR_VAR 0 5
31147: PUSH
31148: LD_VAR 0 2
31152: PPUSH
31153: CALL_OW 250
31157: ST_TO_ADDR
// y := GetY ( building ) ;
31158: LD_ADDR_VAR 0 6
31162: PUSH
31163: LD_VAR 0 2
31167: PPUSH
31168: CALL_OW 251
31172: ST_TO_ADDR
// for i = 0 to 5 do
31173: LD_ADDR_VAR 0 4
31177: PUSH
31178: DOUBLE
31179: LD_INT 0
31181: DEC
31182: ST_TO_ADDR
31183: LD_INT 5
31185: PUSH
31186: FOR_TO
31187: IFFALSE 31299
// begin _x := ShiftX ( x , i , 3 ) ;
31189: LD_ADDR_VAR 0 7
31193: PUSH
31194: LD_VAR 0 5
31198: PPUSH
31199: LD_VAR 0 4
31203: PPUSH
31204: LD_INT 3
31206: PPUSH
31207: CALL_OW 272
31211: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31212: LD_ADDR_VAR 0 8
31216: PUSH
31217: LD_VAR 0 6
31221: PPUSH
31222: LD_VAR 0 4
31226: PPUSH
31227: LD_INT 3
31229: PPUSH
31230: CALL_OW 273
31234: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31235: LD_VAR 0 7
31239: PPUSH
31240: LD_VAR 0 8
31244: PPUSH
31245: CALL_OW 488
31249: NOT
31250: IFFALSE 31254
// continue ;
31252: GO 31186
// if HexInfo ( _x , _y ) = 0 then
31254: LD_VAR 0 7
31258: PPUSH
31259: LD_VAR 0 8
31263: PPUSH
31264: CALL_OW 428
31268: PUSH
31269: LD_INT 0
31271: EQUAL
31272: IFFALSE 31297
// begin ComMoveXY ( unit , _x , _y ) ;
31274: LD_VAR 0 1
31278: PPUSH
31279: LD_VAR 0 7
31283: PPUSH
31284: LD_VAR 0 8
31288: PPUSH
31289: CALL_OW 111
// exit ;
31293: POP
31294: POP
31295: GO 31301
// end ; end ;
31297: GO 31186
31299: POP
31300: POP
// end ;
31301: LD_VAR 0 3
31305: RET
// export function ScanBase ( side , base_area ) ; begin
31306: LD_INT 0
31308: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31309: LD_ADDR_VAR 0 3
31313: PUSH
31314: LD_VAR 0 2
31318: PPUSH
31319: LD_INT 81
31321: PUSH
31322: LD_VAR 0 1
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PPUSH
31331: CALL_OW 70
31335: ST_TO_ADDR
// end ;
31336: LD_VAR 0 3
31340: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31341: LD_INT 0
31343: PPUSH
31344: PPUSH
31345: PPUSH
31346: PPUSH
// result := false ;
31347: LD_ADDR_VAR 0 2
31351: PUSH
31352: LD_INT 0
31354: ST_TO_ADDR
// side := GetSide ( unit ) ;
31355: LD_ADDR_VAR 0 3
31359: PUSH
31360: LD_VAR 0 1
31364: PPUSH
31365: CALL_OW 255
31369: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31370: LD_ADDR_VAR 0 4
31374: PUSH
31375: LD_VAR 0 1
31379: PPUSH
31380: CALL_OW 248
31384: ST_TO_ADDR
// case nat of 1 :
31385: LD_VAR 0 4
31389: PUSH
31390: LD_INT 1
31392: DOUBLE
31393: EQUAL
31394: IFTRUE 31398
31396: GO 31409
31398: POP
// tech := tech_lassight ; 2 :
31399: LD_ADDR_VAR 0 5
31403: PUSH
31404: LD_INT 12
31406: ST_TO_ADDR
31407: GO 31448
31409: LD_INT 2
31411: DOUBLE
31412: EQUAL
31413: IFTRUE 31417
31415: GO 31428
31417: POP
// tech := tech_mortar ; 3 :
31418: LD_ADDR_VAR 0 5
31422: PUSH
31423: LD_INT 41
31425: ST_TO_ADDR
31426: GO 31448
31428: LD_INT 3
31430: DOUBLE
31431: EQUAL
31432: IFTRUE 31436
31434: GO 31447
31436: POP
// tech := tech_bazooka ; end ;
31437: LD_ADDR_VAR 0 5
31441: PUSH
31442: LD_INT 44
31444: ST_TO_ADDR
31445: GO 31448
31447: POP
// if Researched ( side , tech ) then
31448: LD_VAR 0 3
31452: PPUSH
31453: LD_VAR 0 5
31457: PPUSH
31458: CALL_OW 325
31462: IFFALSE 31489
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31464: LD_ADDR_VAR 0 2
31468: PUSH
31469: LD_INT 5
31471: PUSH
31472: LD_INT 8
31474: PUSH
31475: LD_INT 9
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: LIST
31482: PUSH
31483: LD_VAR 0 4
31487: ARRAY
31488: ST_TO_ADDR
// end ;
31489: LD_VAR 0 2
31493: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31494: LD_INT 0
31496: PPUSH
31497: PPUSH
31498: PPUSH
// if not mines then
31499: LD_VAR 0 2
31503: NOT
31504: IFFALSE 31508
// exit ;
31506: GO 31652
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31508: LD_ADDR_VAR 0 5
31512: PUSH
31513: LD_INT 81
31515: PUSH
31516: LD_VAR 0 1
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: PUSH
31525: LD_INT 3
31527: PUSH
31528: LD_INT 21
31530: PUSH
31531: LD_INT 3
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PPUSH
31546: CALL_OW 69
31550: ST_TO_ADDR
// for i in mines do
31551: LD_ADDR_VAR 0 4
31555: PUSH
31556: LD_VAR 0 2
31560: PUSH
31561: FOR_IN
31562: IFFALSE 31650
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31564: LD_VAR 0 4
31568: PUSH
31569: LD_INT 1
31571: ARRAY
31572: PPUSH
31573: LD_VAR 0 4
31577: PUSH
31578: LD_INT 2
31580: ARRAY
31581: PPUSH
31582: CALL_OW 458
31586: NOT
31587: IFFALSE 31591
// continue ;
31589: GO 31561
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31591: LD_VAR 0 4
31595: PUSH
31596: LD_INT 1
31598: ARRAY
31599: PPUSH
31600: LD_VAR 0 4
31604: PUSH
31605: LD_INT 2
31607: ARRAY
31608: PPUSH
31609: CALL_OW 428
31613: PUSH
31614: LD_VAR 0 5
31618: IN
31619: IFFALSE 31648
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31621: LD_VAR 0 4
31625: PUSH
31626: LD_INT 1
31628: ARRAY
31629: PPUSH
31630: LD_VAR 0 4
31634: PUSH
31635: LD_INT 2
31637: ARRAY
31638: PPUSH
31639: LD_VAR 0 1
31643: PPUSH
31644: CALL_OW 456
// end ;
31648: GO 31561
31650: POP
31651: POP
// end ;
31652: LD_VAR 0 3
31656: RET
// export function Count ( array ) ; var i ; begin
31657: LD_INT 0
31659: PPUSH
31660: PPUSH
// result := 0 ;
31661: LD_ADDR_VAR 0 2
31665: PUSH
31666: LD_INT 0
31668: ST_TO_ADDR
// for i in array do
31669: LD_ADDR_VAR 0 3
31673: PUSH
31674: LD_VAR 0 1
31678: PUSH
31679: FOR_IN
31680: IFFALSE 31704
// if i then
31682: LD_VAR 0 3
31686: IFFALSE 31702
// result := result + 1 ;
31688: LD_ADDR_VAR 0 2
31692: PUSH
31693: LD_VAR 0 2
31697: PUSH
31698: LD_INT 1
31700: PLUS
31701: ST_TO_ADDR
31702: GO 31679
31704: POP
31705: POP
// end ;
31706: LD_VAR 0 2
31710: RET
// export function IsEmpty ( building ) ; begin
31711: LD_INT 0
31713: PPUSH
// if not building then
31714: LD_VAR 0 1
31718: NOT
31719: IFFALSE 31723
// exit ;
31721: GO 31766
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31723: LD_ADDR_VAR 0 2
31727: PUSH
31728: LD_VAR 0 1
31732: PUSH
31733: LD_INT 22
31735: PUSH
31736: LD_VAR 0 1
31740: PPUSH
31741: CALL_OW 255
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: PUSH
31750: LD_INT 58
31752: PUSH
31753: EMPTY
31754: LIST
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: PPUSH
31760: CALL_OW 69
31764: IN
31765: ST_TO_ADDR
// end ;
31766: LD_VAR 0 2
31770: RET
// export function IsNotFull ( building ) ; begin
31771: LD_INT 0
31773: PPUSH
// if not building then
31774: LD_VAR 0 1
31778: NOT
31779: IFFALSE 31783
// exit ;
31781: GO 31802
// result := UnitsInside ( building ) < 6 ;
31783: LD_ADDR_VAR 0 2
31787: PUSH
31788: LD_VAR 0 1
31792: PPUSH
31793: CALL_OW 313
31797: PUSH
31798: LD_INT 6
31800: LESS
31801: ST_TO_ADDR
// end ;
31802: LD_VAR 0 2
31806: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31807: LD_INT 0
31809: PPUSH
31810: PPUSH
31811: PPUSH
31812: PPUSH
// tmp := [ ] ;
31813: LD_ADDR_VAR 0 3
31817: PUSH
31818: EMPTY
31819: ST_TO_ADDR
// list := [ ] ;
31820: LD_ADDR_VAR 0 5
31824: PUSH
31825: EMPTY
31826: ST_TO_ADDR
// for i = 16 to 25 do
31827: LD_ADDR_VAR 0 4
31831: PUSH
31832: DOUBLE
31833: LD_INT 16
31835: DEC
31836: ST_TO_ADDR
31837: LD_INT 25
31839: PUSH
31840: FOR_TO
31841: IFFALSE 31914
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31843: LD_ADDR_VAR 0 3
31847: PUSH
31848: LD_VAR 0 3
31852: PUSH
31853: LD_INT 22
31855: PUSH
31856: LD_VAR 0 1
31860: PPUSH
31861: CALL_OW 255
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: PUSH
31870: LD_INT 91
31872: PUSH
31873: LD_VAR 0 1
31877: PUSH
31878: LD_INT 6
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: LIST
31885: PUSH
31886: LD_INT 30
31888: PUSH
31889: LD_VAR 0 4
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: LIST
31902: PUSH
31903: EMPTY
31904: LIST
31905: PPUSH
31906: CALL_OW 69
31910: ADD
31911: ST_TO_ADDR
31912: GO 31840
31914: POP
31915: POP
// for i = 1 to tmp do
31916: LD_ADDR_VAR 0 4
31920: PUSH
31921: DOUBLE
31922: LD_INT 1
31924: DEC
31925: ST_TO_ADDR
31926: LD_VAR 0 3
31930: PUSH
31931: FOR_TO
31932: IFFALSE 32020
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31934: LD_ADDR_VAR 0 5
31938: PUSH
31939: LD_VAR 0 5
31943: PUSH
31944: LD_VAR 0 3
31948: PUSH
31949: LD_VAR 0 4
31953: ARRAY
31954: PPUSH
31955: CALL_OW 266
31959: PUSH
31960: LD_VAR 0 3
31964: PUSH
31965: LD_VAR 0 4
31969: ARRAY
31970: PPUSH
31971: CALL_OW 250
31975: PUSH
31976: LD_VAR 0 3
31980: PUSH
31981: LD_VAR 0 4
31985: ARRAY
31986: PPUSH
31987: CALL_OW 251
31991: PUSH
31992: LD_VAR 0 3
31996: PUSH
31997: LD_VAR 0 4
32001: ARRAY
32002: PPUSH
32003: CALL_OW 254
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: PUSH
32014: EMPTY
32015: LIST
32016: ADD
32017: ST_TO_ADDR
32018: GO 31931
32020: POP
32021: POP
// result := list ;
32022: LD_ADDR_VAR 0 2
32026: PUSH
32027: LD_VAR 0 5
32031: ST_TO_ADDR
// end ;
32032: LD_VAR 0 2
32036: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32037: LD_INT 0
32039: PPUSH
32040: PPUSH
32041: PPUSH
32042: PPUSH
32043: PPUSH
32044: PPUSH
32045: PPUSH
// if not factory then
32046: LD_VAR 0 1
32050: NOT
32051: IFFALSE 32055
// exit ;
32053: GO 32648
// if control = control_apeman then
32055: LD_VAR 0 4
32059: PUSH
32060: LD_INT 5
32062: EQUAL
32063: IFFALSE 32172
// begin tmp := UnitsInside ( factory ) ;
32065: LD_ADDR_VAR 0 8
32069: PUSH
32070: LD_VAR 0 1
32074: PPUSH
32075: CALL_OW 313
32079: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32080: LD_VAR 0 8
32084: PPUSH
32085: LD_INT 25
32087: PUSH
32088: LD_INT 12
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PPUSH
32095: CALL_OW 72
32099: NOT
32100: IFFALSE 32110
// control := control_manual ;
32102: LD_ADDR_VAR 0 4
32106: PUSH
32107: LD_INT 1
32109: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32110: LD_ADDR_VAR 0 8
32114: PUSH
32115: LD_VAR 0 1
32119: PPUSH
32120: CALL 31807 0 1
32124: ST_TO_ADDR
// if tmp then
32125: LD_VAR 0 8
32129: IFFALSE 32172
// begin for i in tmp do
32131: LD_ADDR_VAR 0 7
32135: PUSH
32136: LD_VAR 0 8
32140: PUSH
32141: FOR_IN
32142: IFFALSE 32170
// if i [ 1 ] = b_ext_radio then
32144: LD_VAR 0 7
32148: PUSH
32149: LD_INT 1
32151: ARRAY
32152: PUSH
32153: LD_INT 22
32155: EQUAL
32156: IFFALSE 32168
// begin control := control_remote ;
32158: LD_ADDR_VAR 0 4
32162: PUSH
32163: LD_INT 2
32165: ST_TO_ADDR
// break ;
32166: GO 32170
// end ;
32168: GO 32141
32170: POP
32171: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32172: LD_VAR 0 1
32176: PPUSH
32177: LD_VAR 0 2
32181: PPUSH
32182: LD_VAR 0 3
32186: PPUSH
32187: LD_VAR 0 4
32191: PPUSH
32192: LD_VAR 0 5
32196: PPUSH
32197: CALL_OW 448
32201: IFFALSE 32236
// begin result := [ chassis , engine , control , weapon ] ;
32203: LD_ADDR_VAR 0 6
32207: PUSH
32208: LD_VAR 0 2
32212: PUSH
32213: LD_VAR 0 3
32217: PUSH
32218: LD_VAR 0 4
32222: PUSH
32223: LD_VAR 0 5
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: LIST
32232: LIST
32233: ST_TO_ADDR
// exit ;
32234: GO 32648
// end ; _chassis := AvailableChassisList ( factory ) ;
32236: LD_ADDR_VAR 0 9
32240: PUSH
32241: LD_VAR 0 1
32245: PPUSH
32246: CALL_OW 475
32250: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32251: LD_ADDR_VAR 0 11
32255: PUSH
32256: LD_VAR 0 1
32260: PPUSH
32261: CALL_OW 476
32265: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32266: LD_ADDR_VAR 0 12
32270: PUSH
32271: LD_VAR 0 1
32275: PPUSH
32276: CALL_OW 477
32280: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32281: LD_ADDR_VAR 0 10
32285: PUSH
32286: LD_VAR 0 1
32290: PPUSH
32291: CALL_OW 478
32295: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32296: LD_VAR 0 9
32300: NOT
32301: PUSH
32302: LD_VAR 0 11
32306: NOT
32307: OR
32308: PUSH
32309: LD_VAR 0 12
32313: NOT
32314: OR
32315: PUSH
32316: LD_VAR 0 10
32320: NOT
32321: OR
32322: IFFALSE 32357
// begin result := [ chassis , engine , control , weapon ] ;
32324: LD_ADDR_VAR 0 6
32328: PUSH
32329: LD_VAR 0 2
32333: PUSH
32334: LD_VAR 0 3
32338: PUSH
32339: LD_VAR 0 4
32343: PUSH
32344: LD_VAR 0 5
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: ST_TO_ADDR
// exit ;
32355: GO 32648
// end ; if not chassis in _chassis then
32357: LD_VAR 0 2
32361: PUSH
32362: LD_VAR 0 9
32366: IN
32367: NOT
32368: IFFALSE 32394
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32370: LD_ADDR_VAR 0 2
32374: PUSH
32375: LD_VAR 0 9
32379: PUSH
32380: LD_INT 1
32382: PPUSH
32383: LD_VAR 0 9
32387: PPUSH
32388: CALL_OW 12
32392: ARRAY
32393: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32394: LD_VAR 0 2
32398: PPUSH
32399: LD_VAR 0 3
32403: PPUSH
32404: CALL 32653 0 2
32408: NOT
32409: IFFALSE 32468
// repeat engine := _engine [ 1 ] ;
32411: LD_ADDR_VAR 0 3
32415: PUSH
32416: LD_VAR 0 11
32420: PUSH
32421: LD_INT 1
32423: ARRAY
32424: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32425: LD_ADDR_VAR 0 11
32429: PUSH
32430: LD_VAR 0 11
32434: PPUSH
32435: LD_INT 1
32437: PPUSH
32438: CALL_OW 3
32442: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32443: LD_VAR 0 2
32447: PPUSH
32448: LD_VAR 0 3
32452: PPUSH
32453: CALL 32653 0 2
32457: PUSH
32458: LD_VAR 0 11
32462: PUSH
32463: EMPTY
32464: EQUAL
32465: OR
32466: IFFALSE 32411
// if not control in _control then
32468: LD_VAR 0 4
32472: PUSH
32473: LD_VAR 0 12
32477: IN
32478: NOT
32479: IFFALSE 32505
// control := _control [ rand ( 1 , _control ) ] ;
32481: LD_ADDR_VAR 0 4
32485: PUSH
32486: LD_VAR 0 12
32490: PUSH
32491: LD_INT 1
32493: PPUSH
32494: LD_VAR 0 12
32498: PPUSH
32499: CALL_OW 12
32503: ARRAY
32504: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32505: LD_VAR 0 2
32509: PPUSH
32510: LD_VAR 0 5
32514: PPUSH
32515: CALL 32873 0 2
32519: NOT
32520: IFFALSE 32579
// repeat weapon := _weapon [ 1 ] ;
32522: LD_ADDR_VAR 0 5
32526: PUSH
32527: LD_VAR 0 10
32531: PUSH
32532: LD_INT 1
32534: ARRAY
32535: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32536: LD_ADDR_VAR 0 10
32540: PUSH
32541: LD_VAR 0 10
32545: PPUSH
32546: LD_INT 1
32548: PPUSH
32549: CALL_OW 3
32553: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32554: LD_VAR 0 2
32558: PPUSH
32559: LD_VAR 0 5
32563: PPUSH
32564: CALL 32873 0 2
32568: PUSH
32569: LD_VAR 0 10
32573: PUSH
32574: EMPTY
32575: EQUAL
32576: OR
32577: IFFALSE 32522
// result := [ ] ;
32579: LD_ADDR_VAR 0 6
32583: PUSH
32584: EMPTY
32585: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32586: LD_VAR 0 1
32590: PPUSH
32591: LD_VAR 0 2
32595: PPUSH
32596: LD_VAR 0 3
32600: PPUSH
32601: LD_VAR 0 4
32605: PPUSH
32606: LD_VAR 0 5
32610: PPUSH
32611: CALL_OW 448
32615: IFFALSE 32648
// result := [ chassis , engine , control , weapon ] ;
32617: LD_ADDR_VAR 0 6
32621: PUSH
32622: LD_VAR 0 2
32626: PUSH
32627: LD_VAR 0 3
32631: PUSH
32632: LD_VAR 0 4
32636: PUSH
32637: LD_VAR 0 5
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: ST_TO_ADDR
// end ;
32648: LD_VAR 0 6
32652: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32653: LD_INT 0
32655: PPUSH
// if not chassis or not engine then
32656: LD_VAR 0 1
32660: NOT
32661: PUSH
32662: LD_VAR 0 2
32666: NOT
32667: OR
32668: IFFALSE 32672
// exit ;
32670: GO 32868
// case engine of engine_solar :
32672: LD_VAR 0 2
32676: PUSH
32677: LD_INT 2
32679: DOUBLE
32680: EQUAL
32681: IFTRUE 32685
32683: GO 32723
32685: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32686: LD_ADDR_VAR 0 3
32690: PUSH
32691: LD_INT 11
32693: PUSH
32694: LD_INT 12
32696: PUSH
32697: LD_INT 13
32699: PUSH
32700: LD_INT 14
32702: PUSH
32703: LD_INT 1
32705: PUSH
32706: LD_INT 2
32708: PUSH
32709: LD_INT 3
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: LIST
32716: LIST
32717: LIST
32718: LIST
32719: LIST
32720: ST_TO_ADDR
32721: GO 32852
32723: LD_INT 1
32725: DOUBLE
32726: EQUAL
32727: IFTRUE 32731
32729: GO 32793
32731: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32732: LD_ADDR_VAR 0 3
32736: PUSH
32737: LD_INT 11
32739: PUSH
32740: LD_INT 12
32742: PUSH
32743: LD_INT 13
32745: PUSH
32746: LD_INT 14
32748: PUSH
32749: LD_INT 1
32751: PUSH
32752: LD_INT 2
32754: PUSH
32755: LD_INT 3
32757: PUSH
32758: LD_INT 4
32760: PUSH
32761: LD_INT 5
32763: PUSH
32764: LD_INT 21
32766: PUSH
32767: LD_INT 23
32769: PUSH
32770: LD_INT 22
32772: PUSH
32773: LD_INT 24
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: LIST
32780: LIST
32781: LIST
32782: LIST
32783: LIST
32784: LIST
32785: LIST
32786: LIST
32787: LIST
32788: LIST
32789: LIST
32790: ST_TO_ADDR
32791: GO 32852
32793: LD_INT 3
32795: DOUBLE
32796: EQUAL
32797: IFTRUE 32801
32799: GO 32851
32801: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32802: LD_ADDR_VAR 0 3
32806: PUSH
32807: LD_INT 13
32809: PUSH
32810: LD_INT 14
32812: PUSH
32813: LD_INT 2
32815: PUSH
32816: LD_INT 3
32818: PUSH
32819: LD_INT 4
32821: PUSH
32822: LD_INT 5
32824: PUSH
32825: LD_INT 21
32827: PUSH
32828: LD_INT 22
32830: PUSH
32831: LD_INT 23
32833: PUSH
32834: LD_INT 24
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: ST_TO_ADDR
32849: GO 32852
32851: POP
// result := ( chassis in result ) ;
32852: LD_ADDR_VAR 0 3
32856: PUSH
32857: LD_VAR 0 1
32861: PUSH
32862: LD_VAR 0 3
32866: IN
32867: ST_TO_ADDR
// end ;
32868: LD_VAR 0 3
32872: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32873: LD_INT 0
32875: PPUSH
// if not chassis or not weapon then
32876: LD_VAR 0 1
32880: NOT
32881: PUSH
32882: LD_VAR 0 2
32886: NOT
32887: OR
32888: IFFALSE 32892
// exit ;
32890: GO 33918
// case weapon of us_machine_gun :
32892: LD_VAR 0 2
32896: PUSH
32897: LD_INT 2
32899: DOUBLE
32900: EQUAL
32901: IFTRUE 32905
32903: GO 32935
32905: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32906: LD_ADDR_VAR 0 3
32910: PUSH
32911: LD_INT 1
32913: PUSH
32914: LD_INT 2
32916: PUSH
32917: LD_INT 3
32919: PUSH
32920: LD_INT 4
32922: PUSH
32923: LD_INT 5
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: LIST
32930: LIST
32931: LIST
32932: ST_TO_ADDR
32933: GO 33902
32935: LD_INT 3
32937: DOUBLE
32938: EQUAL
32939: IFTRUE 32943
32941: GO 32973
32943: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32944: LD_ADDR_VAR 0 3
32948: PUSH
32949: LD_INT 1
32951: PUSH
32952: LD_INT 2
32954: PUSH
32955: LD_INT 3
32957: PUSH
32958: LD_INT 4
32960: PUSH
32961: LD_INT 5
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: ST_TO_ADDR
32971: GO 33902
32973: LD_INT 11
32975: DOUBLE
32976: EQUAL
32977: IFTRUE 32981
32979: GO 33011
32981: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32982: LD_ADDR_VAR 0 3
32986: PUSH
32987: LD_INT 1
32989: PUSH
32990: LD_INT 2
32992: PUSH
32993: LD_INT 3
32995: PUSH
32996: LD_INT 4
32998: PUSH
32999: LD_INT 5
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: LIST
33006: LIST
33007: LIST
33008: ST_TO_ADDR
33009: GO 33902
33011: LD_INT 4
33013: DOUBLE
33014: EQUAL
33015: IFTRUE 33019
33017: GO 33045
33019: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33020: LD_ADDR_VAR 0 3
33024: PUSH
33025: LD_INT 2
33027: PUSH
33028: LD_INT 3
33030: PUSH
33031: LD_INT 4
33033: PUSH
33034: LD_INT 5
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: ST_TO_ADDR
33043: GO 33902
33045: LD_INT 5
33047: DOUBLE
33048: EQUAL
33049: IFTRUE 33053
33051: GO 33079
33053: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33054: LD_ADDR_VAR 0 3
33058: PUSH
33059: LD_INT 2
33061: PUSH
33062: LD_INT 3
33064: PUSH
33065: LD_INT 4
33067: PUSH
33068: LD_INT 5
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: ST_TO_ADDR
33077: GO 33902
33079: LD_INT 9
33081: DOUBLE
33082: EQUAL
33083: IFTRUE 33087
33085: GO 33113
33087: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33088: LD_ADDR_VAR 0 3
33092: PUSH
33093: LD_INT 2
33095: PUSH
33096: LD_INT 3
33098: PUSH
33099: LD_INT 4
33101: PUSH
33102: LD_INT 5
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: ST_TO_ADDR
33111: GO 33902
33113: LD_INT 7
33115: DOUBLE
33116: EQUAL
33117: IFTRUE 33121
33119: GO 33147
33121: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33122: LD_ADDR_VAR 0 3
33126: PUSH
33127: LD_INT 2
33129: PUSH
33130: LD_INT 3
33132: PUSH
33133: LD_INT 4
33135: PUSH
33136: LD_INT 5
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: ST_TO_ADDR
33145: GO 33902
33147: LD_INT 12
33149: DOUBLE
33150: EQUAL
33151: IFTRUE 33155
33153: GO 33181
33155: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33156: LD_ADDR_VAR 0 3
33160: PUSH
33161: LD_INT 2
33163: PUSH
33164: LD_INT 3
33166: PUSH
33167: LD_INT 4
33169: PUSH
33170: LD_INT 5
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: ST_TO_ADDR
33179: GO 33902
33181: LD_INT 13
33183: DOUBLE
33184: EQUAL
33185: IFTRUE 33189
33187: GO 33215
33189: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33190: LD_ADDR_VAR 0 3
33194: PUSH
33195: LD_INT 2
33197: PUSH
33198: LD_INT 3
33200: PUSH
33201: LD_INT 4
33203: PUSH
33204: LD_INT 5
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: ST_TO_ADDR
33213: GO 33902
33215: LD_INT 14
33217: DOUBLE
33218: EQUAL
33219: IFTRUE 33223
33221: GO 33241
33223: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33224: LD_ADDR_VAR 0 3
33228: PUSH
33229: LD_INT 4
33231: PUSH
33232: LD_INT 5
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: ST_TO_ADDR
33239: GO 33902
33241: LD_INT 6
33243: DOUBLE
33244: EQUAL
33245: IFTRUE 33249
33247: GO 33267
33249: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33250: LD_ADDR_VAR 0 3
33254: PUSH
33255: LD_INT 4
33257: PUSH
33258: LD_INT 5
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: ST_TO_ADDR
33265: GO 33902
33267: LD_INT 10
33269: DOUBLE
33270: EQUAL
33271: IFTRUE 33275
33273: GO 33293
33275: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33276: LD_ADDR_VAR 0 3
33280: PUSH
33281: LD_INT 4
33283: PUSH
33284: LD_INT 5
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: ST_TO_ADDR
33291: GO 33902
33293: LD_INT 22
33295: DOUBLE
33296: EQUAL
33297: IFTRUE 33301
33299: GO 33327
33301: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33302: LD_ADDR_VAR 0 3
33306: PUSH
33307: LD_INT 11
33309: PUSH
33310: LD_INT 12
33312: PUSH
33313: LD_INT 13
33315: PUSH
33316: LD_INT 14
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: LIST
33323: LIST
33324: ST_TO_ADDR
33325: GO 33902
33327: LD_INT 23
33329: DOUBLE
33330: EQUAL
33331: IFTRUE 33335
33333: GO 33361
33335: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33336: LD_ADDR_VAR 0 3
33340: PUSH
33341: LD_INT 11
33343: PUSH
33344: LD_INT 12
33346: PUSH
33347: LD_INT 13
33349: PUSH
33350: LD_INT 14
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: LIST
33357: LIST
33358: ST_TO_ADDR
33359: GO 33902
33361: LD_INT 24
33363: DOUBLE
33364: EQUAL
33365: IFTRUE 33369
33367: GO 33395
33369: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33370: LD_ADDR_VAR 0 3
33374: PUSH
33375: LD_INT 11
33377: PUSH
33378: LD_INT 12
33380: PUSH
33381: LD_INT 13
33383: PUSH
33384: LD_INT 14
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: ST_TO_ADDR
33393: GO 33902
33395: LD_INT 30
33397: DOUBLE
33398: EQUAL
33399: IFTRUE 33403
33401: GO 33429
33403: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33404: LD_ADDR_VAR 0 3
33408: PUSH
33409: LD_INT 11
33411: PUSH
33412: LD_INT 12
33414: PUSH
33415: LD_INT 13
33417: PUSH
33418: LD_INT 14
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: ST_TO_ADDR
33427: GO 33902
33429: LD_INT 25
33431: DOUBLE
33432: EQUAL
33433: IFTRUE 33437
33435: GO 33455
33437: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33438: LD_ADDR_VAR 0 3
33442: PUSH
33443: LD_INT 13
33445: PUSH
33446: LD_INT 14
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: ST_TO_ADDR
33453: GO 33902
33455: LD_INT 27
33457: DOUBLE
33458: EQUAL
33459: IFTRUE 33463
33461: GO 33481
33463: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33464: LD_ADDR_VAR 0 3
33468: PUSH
33469: LD_INT 13
33471: PUSH
33472: LD_INT 14
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: ST_TO_ADDR
33479: GO 33902
33481: LD_INT 28
33483: DOUBLE
33484: EQUAL
33485: IFTRUE 33489
33487: GO 33507
33489: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33490: LD_ADDR_VAR 0 3
33494: PUSH
33495: LD_INT 13
33497: PUSH
33498: LD_INT 14
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: ST_TO_ADDR
33505: GO 33902
33507: LD_INT 29
33509: DOUBLE
33510: EQUAL
33511: IFTRUE 33515
33513: GO 33533
33515: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33516: LD_ADDR_VAR 0 3
33520: PUSH
33521: LD_INT 13
33523: PUSH
33524: LD_INT 14
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: ST_TO_ADDR
33531: GO 33902
33533: LD_INT 31
33535: DOUBLE
33536: EQUAL
33537: IFTRUE 33541
33539: GO 33559
33541: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33542: LD_ADDR_VAR 0 3
33546: PUSH
33547: LD_INT 13
33549: PUSH
33550: LD_INT 14
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: ST_TO_ADDR
33557: GO 33902
33559: LD_INT 26
33561: DOUBLE
33562: EQUAL
33563: IFTRUE 33567
33565: GO 33585
33567: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33568: LD_ADDR_VAR 0 3
33572: PUSH
33573: LD_INT 13
33575: PUSH
33576: LD_INT 14
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: ST_TO_ADDR
33583: GO 33902
33585: LD_INT 42
33587: DOUBLE
33588: EQUAL
33589: IFTRUE 33593
33591: GO 33619
33593: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33594: LD_ADDR_VAR 0 3
33598: PUSH
33599: LD_INT 21
33601: PUSH
33602: LD_INT 22
33604: PUSH
33605: LD_INT 23
33607: PUSH
33608: LD_INT 24
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: ST_TO_ADDR
33617: GO 33902
33619: LD_INT 43
33621: DOUBLE
33622: EQUAL
33623: IFTRUE 33627
33625: GO 33653
33627: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33628: LD_ADDR_VAR 0 3
33632: PUSH
33633: LD_INT 21
33635: PUSH
33636: LD_INT 22
33638: PUSH
33639: LD_INT 23
33641: PUSH
33642: LD_INT 24
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: ST_TO_ADDR
33651: GO 33902
33653: LD_INT 44
33655: DOUBLE
33656: EQUAL
33657: IFTRUE 33661
33659: GO 33687
33661: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33662: LD_ADDR_VAR 0 3
33666: PUSH
33667: LD_INT 21
33669: PUSH
33670: LD_INT 22
33672: PUSH
33673: LD_INT 23
33675: PUSH
33676: LD_INT 24
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: ST_TO_ADDR
33685: GO 33902
33687: LD_INT 45
33689: DOUBLE
33690: EQUAL
33691: IFTRUE 33695
33693: GO 33721
33695: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33696: LD_ADDR_VAR 0 3
33700: PUSH
33701: LD_INT 21
33703: PUSH
33704: LD_INT 22
33706: PUSH
33707: LD_INT 23
33709: PUSH
33710: LD_INT 24
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: LIST
33717: LIST
33718: ST_TO_ADDR
33719: GO 33902
33721: LD_INT 49
33723: DOUBLE
33724: EQUAL
33725: IFTRUE 33729
33727: GO 33755
33729: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33730: LD_ADDR_VAR 0 3
33734: PUSH
33735: LD_INT 21
33737: PUSH
33738: LD_INT 22
33740: PUSH
33741: LD_INT 23
33743: PUSH
33744: LD_INT 24
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: ST_TO_ADDR
33753: GO 33902
33755: LD_INT 51
33757: DOUBLE
33758: EQUAL
33759: IFTRUE 33763
33761: GO 33789
33763: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33764: LD_ADDR_VAR 0 3
33768: PUSH
33769: LD_INT 21
33771: PUSH
33772: LD_INT 22
33774: PUSH
33775: LD_INT 23
33777: PUSH
33778: LD_INT 24
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: ST_TO_ADDR
33787: GO 33902
33789: LD_INT 52
33791: DOUBLE
33792: EQUAL
33793: IFTRUE 33797
33795: GO 33823
33797: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33798: LD_ADDR_VAR 0 3
33802: PUSH
33803: LD_INT 21
33805: PUSH
33806: LD_INT 22
33808: PUSH
33809: LD_INT 23
33811: PUSH
33812: LD_INT 24
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: LIST
33819: LIST
33820: ST_TO_ADDR
33821: GO 33902
33823: LD_INT 53
33825: DOUBLE
33826: EQUAL
33827: IFTRUE 33831
33829: GO 33849
33831: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33832: LD_ADDR_VAR 0 3
33836: PUSH
33837: LD_INT 23
33839: PUSH
33840: LD_INT 24
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: ST_TO_ADDR
33847: GO 33902
33849: LD_INT 46
33851: DOUBLE
33852: EQUAL
33853: IFTRUE 33857
33855: GO 33875
33857: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33858: LD_ADDR_VAR 0 3
33862: PUSH
33863: LD_INT 23
33865: PUSH
33866: LD_INT 24
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: ST_TO_ADDR
33873: GO 33902
33875: LD_INT 47
33877: DOUBLE
33878: EQUAL
33879: IFTRUE 33883
33881: GO 33901
33883: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33884: LD_ADDR_VAR 0 3
33888: PUSH
33889: LD_INT 23
33891: PUSH
33892: LD_INT 24
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: ST_TO_ADDR
33899: GO 33902
33901: POP
// result := ( chassis in result ) ;
33902: LD_ADDR_VAR 0 3
33906: PUSH
33907: LD_VAR 0 1
33911: PUSH
33912: LD_VAR 0 3
33916: IN
33917: ST_TO_ADDR
// end ;
33918: LD_VAR 0 3
33922: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33923: LD_INT 0
33925: PPUSH
33926: PPUSH
33927: PPUSH
33928: PPUSH
33929: PPUSH
33930: PPUSH
33931: PPUSH
// result := array ;
33932: LD_ADDR_VAR 0 5
33936: PUSH
33937: LD_VAR 0 1
33941: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33942: LD_VAR 0 1
33946: NOT
33947: PUSH
33948: LD_VAR 0 2
33952: NOT
33953: OR
33954: PUSH
33955: LD_VAR 0 3
33959: NOT
33960: OR
33961: PUSH
33962: LD_VAR 0 2
33966: PUSH
33967: LD_VAR 0 1
33971: GREATER
33972: OR
33973: PUSH
33974: LD_VAR 0 3
33978: PUSH
33979: LD_VAR 0 1
33983: GREATER
33984: OR
33985: IFFALSE 33989
// exit ;
33987: GO 34285
// if direction then
33989: LD_VAR 0 4
33993: IFFALSE 34057
// begin d := 1 ;
33995: LD_ADDR_VAR 0 9
33999: PUSH
34000: LD_INT 1
34002: ST_TO_ADDR
// if i_from > i_to then
34003: LD_VAR 0 2
34007: PUSH
34008: LD_VAR 0 3
34012: GREATER
34013: IFFALSE 34039
// length := ( array - i_from ) + i_to else
34015: LD_ADDR_VAR 0 11
34019: PUSH
34020: LD_VAR 0 1
34024: PUSH
34025: LD_VAR 0 2
34029: MINUS
34030: PUSH
34031: LD_VAR 0 3
34035: PLUS
34036: ST_TO_ADDR
34037: GO 34055
// length := i_to - i_from ;
34039: LD_ADDR_VAR 0 11
34043: PUSH
34044: LD_VAR 0 3
34048: PUSH
34049: LD_VAR 0 2
34053: MINUS
34054: ST_TO_ADDR
// end else
34055: GO 34118
// begin d := - 1 ;
34057: LD_ADDR_VAR 0 9
34061: PUSH
34062: LD_INT 1
34064: NEG
34065: ST_TO_ADDR
// if i_from > i_to then
34066: LD_VAR 0 2
34070: PUSH
34071: LD_VAR 0 3
34075: GREATER
34076: IFFALSE 34096
// length := i_from - i_to else
34078: LD_ADDR_VAR 0 11
34082: PUSH
34083: LD_VAR 0 2
34087: PUSH
34088: LD_VAR 0 3
34092: MINUS
34093: ST_TO_ADDR
34094: GO 34118
// length := ( array - i_to ) + i_from ;
34096: LD_ADDR_VAR 0 11
34100: PUSH
34101: LD_VAR 0 1
34105: PUSH
34106: LD_VAR 0 3
34110: MINUS
34111: PUSH
34112: LD_VAR 0 2
34116: PLUS
34117: ST_TO_ADDR
// end ; if not length then
34118: LD_VAR 0 11
34122: NOT
34123: IFFALSE 34127
// exit ;
34125: GO 34285
// tmp := array ;
34127: LD_ADDR_VAR 0 10
34131: PUSH
34132: LD_VAR 0 1
34136: ST_TO_ADDR
// for i = 1 to length do
34137: LD_ADDR_VAR 0 6
34141: PUSH
34142: DOUBLE
34143: LD_INT 1
34145: DEC
34146: ST_TO_ADDR
34147: LD_VAR 0 11
34151: PUSH
34152: FOR_TO
34153: IFFALSE 34273
// begin for j = 1 to array do
34155: LD_ADDR_VAR 0 7
34159: PUSH
34160: DOUBLE
34161: LD_INT 1
34163: DEC
34164: ST_TO_ADDR
34165: LD_VAR 0 1
34169: PUSH
34170: FOR_TO
34171: IFFALSE 34259
// begin k := j + d ;
34173: LD_ADDR_VAR 0 8
34177: PUSH
34178: LD_VAR 0 7
34182: PUSH
34183: LD_VAR 0 9
34187: PLUS
34188: ST_TO_ADDR
// if k > array then
34189: LD_VAR 0 8
34193: PUSH
34194: LD_VAR 0 1
34198: GREATER
34199: IFFALSE 34209
// k := 1 ;
34201: LD_ADDR_VAR 0 8
34205: PUSH
34206: LD_INT 1
34208: ST_TO_ADDR
// if not k then
34209: LD_VAR 0 8
34213: NOT
34214: IFFALSE 34226
// k := array ;
34216: LD_ADDR_VAR 0 8
34220: PUSH
34221: LD_VAR 0 1
34225: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34226: LD_ADDR_VAR 0 10
34230: PUSH
34231: LD_VAR 0 10
34235: PPUSH
34236: LD_VAR 0 8
34240: PPUSH
34241: LD_VAR 0 1
34245: PUSH
34246: LD_VAR 0 7
34250: ARRAY
34251: PPUSH
34252: CALL_OW 1
34256: ST_TO_ADDR
// end ;
34257: GO 34170
34259: POP
34260: POP
// array := tmp ;
34261: LD_ADDR_VAR 0 1
34265: PUSH
34266: LD_VAR 0 10
34270: ST_TO_ADDR
// end ;
34271: GO 34152
34273: POP
34274: POP
// result := array ;
34275: LD_ADDR_VAR 0 5
34279: PUSH
34280: LD_VAR 0 1
34284: ST_TO_ADDR
// end ;
34285: LD_VAR 0 5
34289: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34290: LD_INT 0
34292: PPUSH
34293: PPUSH
// result := 0 ;
34294: LD_ADDR_VAR 0 3
34298: PUSH
34299: LD_INT 0
34301: ST_TO_ADDR
// if not array or not value in array then
34302: LD_VAR 0 1
34306: NOT
34307: PUSH
34308: LD_VAR 0 2
34312: PUSH
34313: LD_VAR 0 1
34317: IN
34318: NOT
34319: OR
34320: IFFALSE 34324
// exit ;
34322: GO 34378
// for i = 1 to array do
34324: LD_ADDR_VAR 0 4
34328: PUSH
34329: DOUBLE
34330: LD_INT 1
34332: DEC
34333: ST_TO_ADDR
34334: LD_VAR 0 1
34338: PUSH
34339: FOR_TO
34340: IFFALSE 34376
// if value = array [ i ] then
34342: LD_VAR 0 2
34346: PUSH
34347: LD_VAR 0 1
34351: PUSH
34352: LD_VAR 0 4
34356: ARRAY
34357: EQUAL
34358: IFFALSE 34374
// begin result := i ;
34360: LD_ADDR_VAR 0 3
34364: PUSH
34365: LD_VAR 0 4
34369: ST_TO_ADDR
// exit ;
34370: POP
34371: POP
34372: GO 34378
// end ;
34374: GO 34339
34376: POP
34377: POP
// end ;
34378: LD_VAR 0 3
34382: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34383: LD_INT 0
34385: PPUSH
// vc_chassis := chassis ;
34386: LD_ADDR_OWVAR 37
34390: PUSH
34391: LD_VAR 0 1
34395: ST_TO_ADDR
// vc_engine := engine ;
34396: LD_ADDR_OWVAR 39
34400: PUSH
34401: LD_VAR 0 2
34405: ST_TO_ADDR
// vc_control := control ;
34406: LD_ADDR_OWVAR 38
34410: PUSH
34411: LD_VAR 0 3
34415: ST_TO_ADDR
// vc_weapon := weapon ;
34416: LD_ADDR_OWVAR 40
34420: PUSH
34421: LD_VAR 0 4
34425: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34426: LD_ADDR_OWVAR 41
34430: PUSH
34431: LD_VAR 0 5
34435: ST_TO_ADDR
// end ;
34436: LD_VAR 0 6
34440: RET
// export function WantPlant ( unit ) ; var task ; begin
34441: LD_INT 0
34443: PPUSH
34444: PPUSH
// result := false ;
34445: LD_ADDR_VAR 0 2
34449: PUSH
34450: LD_INT 0
34452: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34453: LD_ADDR_VAR 0 3
34457: PUSH
34458: LD_VAR 0 1
34462: PPUSH
34463: CALL_OW 437
34467: ST_TO_ADDR
// if task then
34468: LD_VAR 0 3
34472: IFFALSE 34500
// if task [ 1 ] [ 1 ] = p then
34474: LD_VAR 0 3
34478: PUSH
34479: LD_INT 1
34481: ARRAY
34482: PUSH
34483: LD_INT 1
34485: ARRAY
34486: PUSH
34487: LD_STRING p
34489: EQUAL
34490: IFFALSE 34500
// result := true ;
34492: LD_ADDR_VAR 0 2
34496: PUSH
34497: LD_INT 1
34499: ST_TO_ADDR
// end ;
34500: LD_VAR 0 2
34504: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34505: LD_INT 0
34507: PPUSH
34508: PPUSH
34509: PPUSH
34510: PPUSH
// if pos < 1 then
34511: LD_VAR 0 2
34515: PUSH
34516: LD_INT 1
34518: LESS
34519: IFFALSE 34523
// exit ;
34521: GO 34826
// if pos = 1 then
34523: LD_VAR 0 2
34527: PUSH
34528: LD_INT 1
34530: EQUAL
34531: IFFALSE 34564
// result := Replace ( arr , pos [ 1 ] , value ) else
34533: LD_ADDR_VAR 0 4
34537: PUSH
34538: LD_VAR 0 1
34542: PPUSH
34543: LD_VAR 0 2
34547: PUSH
34548: LD_INT 1
34550: ARRAY
34551: PPUSH
34552: LD_VAR 0 3
34556: PPUSH
34557: CALL_OW 1
34561: ST_TO_ADDR
34562: GO 34826
// begin tmp := arr ;
34564: LD_ADDR_VAR 0 6
34568: PUSH
34569: LD_VAR 0 1
34573: ST_TO_ADDR
// s_arr := [ tmp ] ;
34574: LD_ADDR_VAR 0 7
34578: PUSH
34579: LD_VAR 0 6
34583: PUSH
34584: EMPTY
34585: LIST
34586: ST_TO_ADDR
// for i = 1 to pos - 1 do
34587: LD_ADDR_VAR 0 5
34591: PUSH
34592: DOUBLE
34593: LD_INT 1
34595: DEC
34596: ST_TO_ADDR
34597: LD_VAR 0 2
34601: PUSH
34602: LD_INT 1
34604: MINUS
34605: PUSH
34606: FOR_TO
34607: IFFALSE 34652
// begin tmp := tmp [ pos [ i ] ] ;
34609: LD_ADDR_VAR 0 6
34613: PUSH
34614: LD_VAR 0 6
34618: PUSH
34619: LD_VAR 0 2
34623: PUSH
34624: LD_VAR 0 5
34628: ARRAY
34629: ARRAY
34630: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34631: LD_ADDR_VAR 0 7
34635: PUSH
34636: LD_VAR 0 7
34640: PUSH
34641: LD_VAR 0 6
34645: PUSH
34646: EMPTY
34647: LIST
34648: ADD
34649: ST_TO_ADDR
// end ;
34650: GO 34606
34652: POP
34653: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34654: LD_ADDR_VAR 0 6
34658: PUSH
34659: LD_VAR 0 6
34663: PPUSH
34664: LD_VAR 0 2
34668: PUSH
34669: LD_VAR 0 2
34673: ARRAY
34674: PPUSH
34675: LD_VAR 0 3
34679: PPUSH
34680: CALL_OW 1
34684: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34685: LD_ADDR_VAR 0 7
34689: PUSH
34690: LD_VAR 0 7
34694: PPUSH
34695: LD_VAR 0 7
34699: PPUSH
34700: LD_VAR 0 6
34704: PPUSH
34705: CALL_OW 1
34709: ST_TO_ADDR
// for i = s_arr downto 2 do
34710: LD_ADDR_VAR 0 5
34714: PUSH
34715: DOUBLE
34716: LD_VAR 0 7
34720: INC
34721: ST_TO_ADDR
34722: LD_INT 2
34724: PUSH
34725: FOR_DOWNTO
34726: IFFALSE 34810
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34728: LD_ADDR_VAR 0 6
34732: PUSH
34733: LD_VAR 0 7
34737: PUSH
34738: LD_VAR 0 5
34742: PUSH
34743: LD_INT 1
34745: MINUS
34746: ARRAY
34747: PPUSH
34748: LD_VAR 0 2
34752: PUSH
34753: LD_VAR 0 5
34757: PUSH
34758: LD_INT 1
34760: MINUS
34761: ARRAY
34762: PPUSH
34763: LD_VAR 0 7
34767: PUSH
34768: LD_VAR 0 5
34772: ARRAY
34773: PPUSH
34774: CALL_OW 1
34778: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34779: LD_ADDR_VAR 0 7
34783: PUSH
34784: LD_VAR 0 7
34788: PPUSH
34789: LD_VAR 0 5
34793: PUSH
34794: LD_INT 1
34796: MINUS
34797: PPUSH
34798: LD_VAR 0 6
34802: PPUSH
34803: CALL_OW 1
34807: ST_TO_ADDR
// end ;
34808: GO 34725
34810: POP
34811: POP
// result := s_arr [ 1 ] ;
34812: LD_ADDR_VAR 0 4
34816: PUSH
34817: LD_VAR 0 7
34821: PUSH
34822: LD_INT 1
34824: ARRAY
34825: ST_TO_ADDR
// end ; end ;
34826: LD_VAR 0 4
34830: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34831: LD_INT 0
34833: PPUSH
34834: PPUSH
// if not list then
34835: LD_VAR 0 1
34839: NOT
34840: IFFALSE 34844
// exit ;
34842: GO 34935
// i := list [ pos1 ] ;
34844: LD_ADDR_VAR 0 5
34848: PUSH
34849: LD_VAR 0 1
34853: PUSH
34854: LD_VAR 0 2
34858: ARRAY
34859: ST_TO_ADDR
// if not i then
34860: LD_VAR 0 5
34864: NOT
34865: IFFALSE 34869
// exit ;
34867: GO 34935
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34869: LD_ADDR_VAR 0 1
34873: PUSH
34874: LD_VAR 0 1
34878: PPUSH
34879: LD_VAR 0 2
34883: PPUSH
34884: LD_VAR 0 1
34888: PUSH
34889: LD_VAR 0 3
34893: ARRAY
34894: PPUSH
34895: CALL_OW 1
34899: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34900: LD_ADDR_VAR 0 1
34904: PUSH
34905: LD_VAR 0 1
34909: PPUSH
34910: LD_VAR 0 3
34914: PPUSH
34915: LD_VAR 0 5
34919: PPUSH
34920: CALL_OW 1
34924: ST_TO_ADDR
// result := list ;
34925: LD_ADDR_VAR 0 4
34929: PUSH
34930: LD_VAR 0 1
34934: ST_TO_ADDR
// end ;
34935: LD_VAR 0 4
34939: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34940: LD_INT 0
34942: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34943: LD_ADDR_VAR 0 5
34947: PUSH
34948: LD_VAR 0 1
34952: PPUSH
34953: CALL_OW 250
34957: PPUSH
34958: LD_VAR 0 1
34962: PPUSH
34963: CALL_OW 251
34967: PPUSH
34968: LD_VAR 0 2
34972: PPUSH
34973: LD_VAR 0 3
34977: PPUSH
34978: LD_VAR 0 4
34982: PPUSH
34983: CALL 34993 0 5
34987: ST_TO_ADDR
// end ;
34988: LD_VAR 0 5
34992: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34993: LD_INT 0
34995: PPUSH
34996: PPUSH
34997: PPUSH
34998: PPUSH
// if not list then
34999: LD_VAR 0 3
35003: NOT
35004: IFFALSE 35008
// exit ;
35006: GO 35396
// result := [ ] ;
35008: LD_ADDR_VAR 0 6
35012: PUSH
35013: EMPTY
35014: ST_TO_ADDR
// for i in list do
35015: LD_ADDR_VAR 0 7
35019: PUSH
35020: LD_VAR 0 3
35024: PUSH
35025: FOR_IN
35026: IFFALSE 35228
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35028: LD_ADDR_VAR 0 9
35032: PUSH
35033: LD_VAR 0 7
35037: PPUSH
35038: LD_VAR 0 1
35042: PPUSH
35043: LD_VAR 0 2
35047: PPUSH
35048: CALL_OW 297
35052: ST_TO_ADDR
// if not result then
35053: LD_VAR 0 6
35057: NOT
35058: IFFALSE 35084
// result := [ [ i , tmp ] ] else
35060: LD_ADDR_VAR 0 6
35064: PUSH
35065: LD_VAR 0 7
35069: PUSH
35070: LD_VAR 0 9
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: EMPTY
35080: LIST
35081: ST_TO_ADDR
35082: GO 35226
// begin if result [ result ] [ 2 ] < tmp then
35084: LD_VAR 0 6
35088: PUSH
35089: LD_VAR 0 6
35093: ARRAY
35094: PUSH
35095: LD_INT 2
35097: ARRAY
35098: PUSH
35099: LD_VAR 0 9
35103: LESS
35104: IFFALSE 35146
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35106: LD_ADDR_VAR 0 6
35110: PUSH
35111: LD_VAR 0 6
35115: PPUSH
35116: LD_VAR 0 6
35120: PUSH
35121: LD_INT 1
35123: PLUS
35124: PPUSH
35125: LD_VAR 0 7
35129: PUSH
35130: LD_VAR 0 9
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PPUSH
35139: CALL_OW 2
35143: ST_TO_ADDR
35144: GO 35226
// for j = 1 to result do
35146: LD_ADDR_VAR 0 8
35150: PUSH
35151: DOUBLE
35152: LD_INT 1
35154: DEC
35155: ST_TO_ADDR
35156: LD_VAR 0 6
35160: PUSH
35161: FOR_TO
35162: IFFALSE 35224
// begin if tmp < result [ j ] [ 2 ] then
35164: LD_VAR 0 9
35168: PUSH
35169: LD_VAR 0 6
35173: PUSH
35174: LD_VAR 0 8
35178: ARRAY
35179: PUSH
35180: LD_INT 2
35182: ARRAY
35183: LESS
35184: IFFALSE 35222
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35186: LD_ADDR_VAR 0 6
35190: PUSH
35191: LD_VAR 0 6
35195: PPUSH
35196: LD_VAR 0 8
35200: PPUSH
35201: LD_VAR 0 7
35205: PUSH
35206: LD_VAR 0 9
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: PPUSH
35215: CALL_OW 2
35219: ST_TO_ADDR
// break ;
35220: GO 35224
// end ; end ;
35222: GO 35161
35224: POP
35225: POP
// end ; end ;
35226: GO 35025
35228: POP
35229: POP
// if result and not asc then
35230: LD_VAR 0 6
35234: PUSH
35235: LD_VAR 0 4
35239: NOT
35240: AND
35241: IFFALSE 35316
// begin tmp := result ;
35243: LD_ADDR_VAR 0 9
35247: PUSH
35248: LD_VAR 0 6
35252: ST_TO_ADDR
// for i = tmp downto 1 do
35253: LD_ADDR_VAR 0 7
35257: PUSH
35258: DOUBLE
35259: LD_VAR 0 9
35263: INC
35264: ST_TO_ADDR
35265: LD_INT 1
35267: PUSH
35268: FOR_DOWNTO
35269: IFFALSE 35314
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35271: LD_ADDR_VAR 0 6
35275: PUSH
35276: LD_VAR 0 6
35280: PPUSH
35281: LD_VAR 0 9
35285: PUSH
35286: LD_VAR 0 7
35290: MINUS
35291: PUSH
35292: LD_INT 1
35294: PLUS
35295: PPUSH
35296: LD_VAR 0 9
35300: PUSH
35301: LD_VAR 0 7
35305: ARRAY
35306: PPUSH
35307: CALL_OW 1
35311: ST_TO_ADDR
35312: GO 35268
35314: POP
35315: POP
// end ; tmp := [ ] ;
35316: LD_ADDR_VAR 0 9
35320: PUSH
35321: EMPTY
35322: ST_TO_ADDR
// if mode then
35323: LD_VAR 0 5
35327: IFFALSE 35396
// begin for i = 1 to result do
35329: LD_ADDR_VAR 0 7
35333: PUSH
35334: DOUBLE
35335: LD_INT 1
35337: DEC
35338: ST_TO_ADDR
35339: LD_VAR 0 6
35343: PUSH
35344: FOR_TO
35345: IFFALSE 35384
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35347: LD_ADDR_VAR 0 9
35351: PUSH
35352: LD_VAR 0 9
35356: PPUSH
35357: LD_VAR 0 7
35361: PPUSH
35362: LD_VAR 0 6
35366: PUSH
35367: LD_VAR 0 7
35371: ARRAY
35372: PUSH
35373: LD_INT 1
35375: ARRAY
35376: PPUSH
35377: CALL_OW 1
35381: ST_TO_ADDR
35382: GO 35344
35384: POP
35385: POP
// result := tmp ;
35386: LD_ADDR_VAR 0 6
35390: PUSH
35391: LD_VAR 0 9
35395: ST_TO_ADDR
// end ; end ;
35396: LD_VAR 0 6
35400: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35401: LD_INT 0
35403: PPUSH
35404: PPUSH
35405: PPUSH
35406: PPUSH
35407: PPUSH
35408: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35409: LD_ADDR_VAR 0 5
35413: PUSH
35414: LD_INT 0
35416: PUSH
35417: LD_INT 0
35419: PUSH
35420: LD_INT 0
35422: PUSH
35423: EMPTY
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: LIST
35429: LIST
35430: ST_TO_ADDR
// if not x or not y then
35431: LD_VAR 0 2
35435: NOT
35436: PUSH
35437: LD_VAR 0 3
35441: NOT
35442: OR
35443: IFFALSE 35447
// exit ;
35445: GO 37093
// if not range then
35447: LD_VAR 0 4
35451: NOT
35452: IFFALSE 35462
// range := 10 ;
35454: LD_ADDR_VAR 0 4
35458: PUSH
35459: LD_INT 10
35461: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35462: LD_ADDR_VAR 0 8
35466: PUSH
35467: LD_INT 81
35469: PUSH
35470: LD_VAR 0 1
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: PUSH
35479: LD_INT 92
35481: PUSH
35482: LD_VAR 0 2
35486: PUSH
35487: LD_VAR 0 3
35491: PUSH
35492: LD_VAR 0 4
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: LIST
35501: LIST
35502: PUSH
35503: LD_INT 3
35505: PUSH
35506: LD_INT 21
35508: PUSH
35509: LD_INT 3
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: LIST
35524: PPUSH
35525: CALL_OW 69
35529: ST_TO_ADDR
// if not tmp then
35530: LD_VAR 0 8
35534: NOT
35535: IFFALSE 35539
// exit ;
35537: GO 37093
// for i in tmp do
35539: LD_ADDR_VAR 0 6
35543: PUSH
35544: LD_VAR 0 8
35548: PUSH
35549: FOR_IN
35550: IFFALSE 37068
// begin points := [ 0 , 0 , 0 ] ;
35552: LD_ADDR_VAR 0 9
35556: PUSH
35557: LD_INT 0
35559: PUSH
35560: LD_INT 0
35562: PUSH
35563: LD_INT 0
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: LIST
35570: ST_TO_ADDR
// bpoints := 1 ;
35571: LD_ADDR_VAR 0 10
35575: PUSH
35576: LD_INT 1
35578: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35579: LD_VAR 0 6
35583: PPUSH
35584: CALL_OW 247
35588: PUSH
35589: LD_INT 1
35591: DOUBLE
35592: EQUAL
35593: IFTRUE 35597
35595: GO 36175
35597: POP
// begin if GetClass ( i ) = 1 then
35598: LD_VAR 0 6
35602: PPUSH
35603: CALL_OW 257
35607: PUSH
35608: LD_INT 1
35610: EQUAL
35611: IFFALSE 35632
// points := [ 10 , 5 , 3 ] ;
35613: LD_ADDR_VAR 0 9
35617: PUSH
35618: LD_INT 10
35620: PUSH
35621: LD_INT 5
35623: PUSH
35624: LD_INT 3
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: LIST
35631: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35632: LD_VAR 0 6
35636: PPUSH
35637: CALL_OW 257
35641: PUSH
35642: LD_INT 2
35644: PUSH
35645: LD_INT 3
35647: PUSH
35648: LD_INT 4
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: LIST
35655: IN
35656: IFFALSE 35677
// points := [ 3 , 2 , 1 ] ;
35658: LD_ADDR_VAR 0 9
35662: PUSH
35663: LD_INT 3
35665: PUSH
35666: LD_INT 2
35668: PUSH
35669: LD_INT 1
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: LIST
35676: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35677: LD_VAR 0 6
35681: PPUSH
35682: CALL_OW 257
35686: PUSH
35687: LD_INT 5
35689: EQUAL
35690: IFFALSE 35711
// points := [ 130 , 5 , 2 ] ;
35692: LD_ADDR_VAR 0 9
35696: PUSH
35697: LD_INT 130
35699: PUSH
35700: LD_INT 5
35702: PUSH
35703: LD_INT 2
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: LIST
35710: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35711: LD_VAR 0 6
35715: PPUSH
35716: CALL_OW 257
35720: PUSH
35721: LD_INT 8
35723: EQUAL
35724: IFFALSE 35745
// points := [ 35 , 35 , 30 ] ;
35726: LD_ADDR_VAR 0 9
35730: PUSH
35731: LD_INT 35
35733: PUSH
35734: LD_INT 35
35736: PUSH
35737: LD_INT 30
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: LIST
35744: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35745: LD_VAR 0 6
35749: PPUSH
35750: CALL_OW 257
35754: PUSH
35755: LD_INT 9
35757: EQUAL
35758: IFFALSE 35779
// points := [ 20 , 55 , 40 ] ;
35760: LD_ADDR_VAR 0 9
35764: PUSH
35765: LD_INT 20
35767: PUSH
35768: LD_INT 55
35770: PUSH
35771: LD_INT 40
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: LIST
35778: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35779: LD_VAR 0 6
35783: PPUSH
35784: CALL_OW 257
35788: PUSH
35789: LD_INT 12
35791: PUSH
35792: LD_INT 16
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: IN
35799: IFFALSE 35820
// points := [ 5 , 3 , 2 ] ;
35801: LD_ADDR_VAR 0 9
35805: PUSH
35806: LD_INT 5
35808: PUSH
35809: LD_INT 3
35811: PUSH
35812: LD_INT 2
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: LIST
35819: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35820: LD_VAR 0 6
35824: PPUSH
35825: CALL_OW 257
35829: PUSH
35830: LD_INT 17
35832: EQUAL
35833: IFFALSE 35854
// points := [ 100 , 50 , 75 ] ;
35835: LD_ADDR_VAR 0 9
35839: PUSH
35840: LD_INT 100
35842: PUSH
35843: LD_INT 50
35845: PUSH
35846: LD_INT 75
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: LIST
35853: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35854: LD_VAR 0 6
35858: PPUSH
35859: CALL_OW 257
35863: PUSH
35864: LD_INT 15
35866: EQUAL
35867: IFFALSE 35888
// points := [ 10 , 5 , 3 ] ;
35869: LD_ADDR_VAR 0 9
35873: PUSH
35874: LD_INT 10
35876: PUSH
35877: LD_INT 5
35879: PUSH
35880: LD_INT 3
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: LIST
35887: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35888: LD_VAR 0 6
35892: PPUSH
35893: CALL_OW 257
35897: PUSH
35898: LD_INT 14
35900: EQUAL
35901: IFFALSE 35922
// points := [ 10 , 0 , 0 ] ;
35903: LD_ADDR_VAR 0 9
35907: PUSH
35908: LD_INT 10
35910: PUSH
35911: LD_INT 0
35913: PUSH
35914: LD_INT 0
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: LIST
35921: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35922: LD_VAR 0 6
35926: PPUSH
35927: CALL_OW 257
35931: PUSH
35932: LD_INT 11
35934: EQUAL
35935: IFFALSE 35956
// points := [ 30 , 10 , 5 ] ;
35937: LD_ADDR_VAR 0 9
35941: PUSH
35942: LD_INT 30
35944: PUSH
35945: LD_INT 10
35947: PUSH
35948: LD_INT 5
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: LIST
35955: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35956: LD_VAR 0 1
35960: PPUSH
35961: LD_INT 5
35963: PPUSH
35964: CALL_OW 321
35968: PUSH
35969: LD_INT 2
35971: EQUAL
35972: IFFALSE 35989
// bpoints := bpoints * 1.8 ;
35974: LD_ADDR_VAR 0 10
35978: PUSH
35979: LD_VAR 0 10
35983: PUSH
35984: LD_REAL  1.80000000000000E+0000
35987: MUL
35988: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35989: LD_VAR 0 6
35993: PPUSH
35994: CALL_OW 257
35998: PUSH
35999: LD_INT 1
36001: PUSH
36002: LD_INT 2
36004: PUSH
36005: LD_INT 3
36007: PUSH
36008: LD_INT 4
36010: PUSH
36011: EMPTY
36012: LIST
36013: LIST
36014: LIST
36015: LIST
36016: IN
36017: PUSH
36018: LD_VAR 0 1
36022: PPUSH
36023: LD_INT 51
36025: PPUSH
36026: CALL_OW 321
36030: PUSH
36031: LD_INT 2
36033: EQUAL
36034: AND
36035: IFFALSE 36052
// bpoints := bpoints * 1.2 ;
36037: LD_ADDR_VAR 0 10
36041: PUSH
36042: LD_VAR 0 10
36046: PUSH
36047: LD_REAL  1.20000000000000E+0000
36050: MUL
36051: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36052: LD_VAR 0 6
36056: PPUSH
36057: CALL_OW 257
36061: PUSH
36062: LD_INT 5
36064: PUSH
36065: LD_INT 7
36067: PUSH
36068: LD_INT 9
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: LIST
36075: IN
36076: PUSH
36077: LD_VAR 0 1
36081: PPUSH
36082: LD_INT 52
36084: PPUSH
36085: CALL_OW 321
36089: PUSH
36090: LD_INT 2
36092: EQUAL
36093: AND
36094: IFFALSE 36111
// bpoints := bpoints * 1.5 ;
36096: LD_ADDR_VAR 0 10
36100: PUSH
36101: LD_VAR 0 10
36105: PUSH
36106: LD_REAL  1.50000000000000E+0000
36109: MUL
36110: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36111: LD_VAR 0 1
36115: PPUSH
36116: LD_INT 66
36118: PPUSH
36119: CALL_OW 321
36123: PUSH
36124: LD_INT 2
36126: EQUAL
36127: IFFALSE 36144
// bpoints := bpoints * 1.1 ;
36129: LD_ADDR_VAR 0 10
36133: PUSH
36134: LD_VAR 0 10
36138: PUSH
36139: LD_REAL  1.10000000000000E+0000
36142: MUL
36143: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36144: LD_ADDR_VAR 0 10
36148: PUSH
36149: LD_VAR 0 10
36153: PUSH
36154: LD_VAR 0 6
36158: PPUSH
36159: LD_INT 1
36161: PPUSH
36162: CALL_OW 259
36166: PUSH
36167: LD_REAL  1.15000000000000E+0000
36170: MUL
36171: MUL
36172: ST_TO_ADDR
// end ; unit_vehicle :
36173: GO 36997
36175: LD_INT 2
36177: DOUBLE
36178: EQUAL
36179: IFTRUE 36183
36181: GO 36985
36183: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36184: LD_VAR 0 6
36188: PPUSH
36189: CALL_OW 264
36193: PUSH
36194: LD_INT 2
36196: PUSH
36197: LD_INT 42
36199: PUSH
36200: LD_INT 24
36202: PUSH
36203: EMPTY
36204: LIST
36205: LIST
36206: LIST
36207: IN
36208: IFFALSE 36229
// points := [ 25 , 5 , 3 ] ;
36210: LD_ADDR_VAR 0 9
36214: PUSH
36215: LD_INT 25
36217: PUSH
36218: LD_INT 5
36220: PUSH
36221: LD_INT 3
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: LIST
36228: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36229: LD_VAR 0 6
36233: PPUSH
36234: CALL_OW 264
36238: PUSH
36239: LD_INT 4
36241: PUSH
36242: LD_INT 43
36244: PUSH
36245: LD_INT 25
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: LIST
36252: IN
36253: IFFALSE 36274
// points := [ 40 , 15 , 5 ] ;
36255: LD_ADDR_VAR 0 9
36259: PUSH
36260: LD_INT 40
36262: PUSH
36263: LD_INT 15
36265: PUSH
36266: LD_INT 5
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: LIST
36273: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36274: LD_VAR 0 6
36278: PPUSH
36279: CALL_OW 264
36283: PUSH
36284: LD_INT 3
36286: PUSH
36287: LD_INT 23
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: IN
36294: IFFALSE 36315
// points := [ 7 , 25 , 8 ] ;
36296: LD_ADDR_VAR 0 9
36300: PUSH
36301: LD_INT 7
36303: PUSH
36304: LD_INT 25
36306: PUSH
36307: LD_INT 8
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: LIST
36314: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36315: LD_VAR 0 6
36319: PPUSH
36320: CALL_OW 264
36324: PUSH
36325: LD_INT 5
36327: PUSH
36328: LD_INT 27
36330: PUSH
36331: LD_INT 44
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: LIST
36338: IN
36339: IFFALSE 36360
// points := [ 14 , 50 , 16 ] ;
36341: LD_ADDR_VAR 0 9
36345: PUSH
36346: LD_INT 14
36348: PUSH
36349: LD_INT 50
36351: PUSH
36352: LD_INT 16
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: LIST
36359: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36360: LD_VAR 0 6
36364: PPUSH
36365: CALL_OW 264
36369: PUSH
36370: LD_INT 6
36372: PUSH
36373: LD_INT 46
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: IN
36380: IFFALSE 36401
// points := [ 32 , 120 , 70 ] ;
36382: LD_ADDR_VAR 0 9
36386: PUSH
36387: LD_INT 32
36389: PUSH
36390: LD_INT 120
36392: PUSH
36393: LD_INT 70
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: LIST
36400: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
36401: LD_VAR 0 6
36405: PPUSH
36406: CALL_OW 264
36410: PUSH
36411: LD_INT 7
36413: PUSH
36414: LD_INT 28
36416: PUSH
36417: LD_INT 45
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: LIST
36424: IN
36425: IFFALSE 36446
// points := [ 35 , 20 , 45 ] ;
36427: LD_ADDR_VAR 0 9
36431: PUSH
36432: LD_INT 35
36434: PUSH
36435: LD_INT 20
36437: PUSH
36438: LD_INT 45
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: LIST
36445: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36446: LD_VAR 0 6
36450: PPUSH
36451: CALL_OW 264
36455: PUSH
36456: LD_INT 47
36458: PUSH
36459: EMPTY
36460: LIST
36461: IN
36462: IFFALSE 36483
// points := [ 67 , 45 , 75 ] ;
36464: LD_ADDR_VAR 0 9
36468: PUSH
36469: LD_INT 67
36471: PUSH
36472: LD_INT 45
36474: PUSH
36475: LD_INT 75
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: LIST
36482: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36483: LD_VAR 0 6
36487: PPUSH
36488: CALL_OW 264
36492: PUSH
36493: LD_INT 26
36495: PUSH
36496: EMPTY
36497: LIST
36498: IN
36499: IFFALSE 36520
// points := [ 120 , 30 , 80 ] ;
36501: LD_ADDR_VAR 0 9
36505: PUSH
36506: LD_INT 120
36508: PUSH
36509: LD_INT 30
36511: PUSH
36512: LD_INT 80
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: LIST
36519: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36520: LD_VAR 0 6
36524: PPUSH
36525: CALL_OW 264
36529: PUSH
36530: LD_INT 22
36532: PUSH
36533: EMPTY
36534: LIST
36535: IN
36536: IFFALSE 36557
// points := [ 40 , 1 , 1 ] ;
36538: LD_ADDR_VAR 0 9
36542: PUSH
36543: LD_INT 40
36545: PUSH
36546: LD_INT 1
36548: PUSH
36549: LD_INT 1
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: LIST
36556: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36557: LD_VAR 0 6
36561: PPUSH
36562: CALL_OW 264
36566: PUSH
36567: LD_INT 29
36569: PUSH
36570: EMPTY
36571: LIST
36572: IN
36573: IFFALSE 36594
// points := [ 70 , 200 , 400 ] ;
36575: LD_ADDR_VAR 0 9
36579: PUSH
36580: LD_INT 70
36582: PUSH
36583: LD_INT 200
36585: PUSH
36586: LD_INT 400
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: LIST
36593: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36594: LD_VAR 0 6
36598: PPUSH
36599: CALL_OW 264
36603: PUSH
36604: LD_INT 14
36606: PUSH
36607: LD_INT 53
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: IN
36614: IFFALSE 36635
// points := [ 40 , 10 , 20 ] ;
36616: LD_ADDR_VAR 0 9
36620: PUSH
36621: LD_INT 40
36623: PUSH
36624: LD_INT 10
36626: PUSH
36627: LD_INT 20
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: LIST
36634: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36635: LD_VAR 0 6
36639: PPUSH
36640: CALL_OW 264
36644: PUSH
36645: LD_INT 9
36647: PUSH
36648: EMPTY
36649: LIST
36650: IN
36651: IFFALSE 36672
// points := [ 5 , 70 , 20 ] ;
36653: LD_ADDR_VAR 0 9
36657: PUSH
36658: LD_INT 5
36660: PUSH
36661: LD_INT 70
36663: PUSH
36664: LD_INT 20
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: LIST
36671: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36672: LD_VAR 0 6
36676: PPUSH
36677: CALL_OW 264
36681: PUSH
36682: LD_INT 10
36684: PUSH
36685: EMPTY
36686: LIST
36687: IN
36688: IFFALSE 36709
// points := [ 35 , 110 , 70 ] ;
36690: LD_ADDR_VAR 0 9
36694: PUSH
36695: LD_INT 35
36697: PUSH
36698: LD_INT 110
36700: PUSH
36701: LD_INT 70
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: LIST
36708: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36709: LD_VAR 0 6
36713: PPUSH
36714: CALL_OW 265
36718: PUSH
36719: LD_INT 25
36721: EQUAL
36722: IFFALSE 36743
// points := [ 80 , 65 , 100 ] ;
36724: LD_ADDR_VAR 0 9
36728: PUSH
36729: LD_INT 80
36731: PUSH
36732: LD_INT 65
36734: PUSH
36735: LD_INT 100
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: LIST
36742: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36743: LD_VAR 0 6
36747: PPUSH
36748: CALL_OW 263
36752: PUSH
36753: LD_INT 1
36755: EQUAL
36756: IFFALSE 36791
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36758: LD_ADDR_VAR 0 10
36762: PUSH
36763: LD_VAR 0 10
36767: PUSH
36768: LD_VAR 0 6
36772: PPUSH
36773: CALL_OW 311
36777: PPUSH
36778: LD_INT 3
36780: PPUSH
36781: CALL_OW 259
36785: PUSH
36786: LD_INT 4
36788: MUL
36789: MUL
36790: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36791: LD_VAR 0 6
36795: PPUSH
36796: CALL_OW 263
36800: PUSH
36801: LD_INT 2
36803: EQUAL
36804: IFFALSE 36855
// begin j := IsControledBy ( i ) ;
36806: LD_ADDR_VAR 0 7
36810: PUSH
36811: LD_VAR 0 6
36815: PPUSH
36816: CALL_OW 312
36820: ST_TO_ADDR
// if j then
36821: LD_VAR 0 7
36825: IFFALSE 36855
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36827: LD_ADDR_VAR 0 10
36831: PUSH
36832: LD_VAR 0 10
36836: PUSH
36837: LD_VAR 0 7
36841: PPUSH
36842: LD_INT 3
36844: PPUSH
36845: CALL_OW 259
36849: PUSH
36850: LD_INT 3
36852: MUL
36853: MUL
36854: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36855: LD_VAR 0 6
36859: PPUSH
36860: CALL_OW 264
36864: PUSH
36865: LD_INT 5
36867: PUSH
36868: LD_INT 6
36870: PUSH
36871: LD_INT 46
36873: PUSH
36874: LD_INT 44
36876: PUSH
36877: LD_INT 47
36879: PUSH
36880: LD_INT 45
36882: PUSH
36883: LD_INT 28
36885: PUSH
36886: LD_INT 7
36888: PUSH
36889: LD_INT 27
36891: PUSH
36892: LD_INT 29
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: LIST
36899: LIST
36900: LIST
36901: LIST
36902: LIST
36903: LIST
36904: LIST
36905: LIST
36906: IN
36907: PUSH
36908: LD_VAR 0 1
36912: PPUSH
36913: LD_INT 52
36915: PPUSH
36916: CALL_OW 321
36920: PUSH
36921: LD_INT 2
36923: EQUAL
36924: AND
36925: IFFALSE 36942
// bpoints := bpoints * 1.2 ;
36927: LD_ADDR_VAR 0 10
36931: PUSH
36932: LD_VAR 0 10
36936: PUSH
36937: LD_REAL  1.20000000000000E+0000
36940: MUL
36941: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36942: LD_VAR 0 6
36946: PPUSH
36947: CALL_OW 264
36951: PUSH
36952: LD_INT 6
36954: PUSH
36955: LD_INT 46
36957: PUSH
36958: LD_INT 47
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: LIST
36965: IN
36966: IFFALSE 36983
// bpoints := bpoints * 1.2 ;
36968: LD_ADDR_VAR 0 10
36972: PUSH
36973: LD_VAR 0 10
36977: PUSH
36978: LD_REAL  1.20000000000000E+0000
36981: MUL
36982: ST_TO_ADDR
// end ; unit_building :
36983: GO 36997
36985: LD_INT 3
36987: DOUBLE
36988: EQUAL
36989: IFTRUE 36993
36991: GO 36996
36993: POP
// ; end ;
36994: GO 36997
36996: POP
// for j = 1 to 3 do
36997: LD_ADDR_VAR 0 7
37001: PUSH
37002: DOUBLE
37003: LD_INT 1
37005: DEC
37006: ST_TO_ADDR
37007: LD_INT 3
37009: PUSH
37010: FOR_TO
37011: IFFALSE 37064
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37013: LD_ADDR_VAR 0 5
37017: PUSH
37018: LD_VAR 0 5
37022: PPUSH
37023: LD_VAR 0 7
37027: PPUSH
37028: LD_VAR 0 5
37032: PUSH
37033: LD_VAR 0 7
37037: ARRAY
37038: PUSH
37039: LD_VAR 0 9
37043: PUSH
37044: LD_VAR 0 7
37048: ARRAY
37049: PUSH
37050: LD_VAR 0 10
37054: MUL
37055: PLUS
37056: PPUSH
37057: CALL_OW 1
37061: ST_TO_ADDR
37062: GO 37010
37064: POP
37065: POP
// end ;
37066: GO 35549
37068: POP
37069: POP
// result := Replace ( result , 4 , tmp ) ;
37070: LD_ADDR_VAR 0 5
37074: PUSH
37075: LD_VAR 0 5
37079: PPUSH
37080: LD_INT 4
37082: PPUSH
37083: LD_VAR 0 8
37087: PPUSH
37088: CALL_OW 1
37092: ST_TO_ADDR
// end ;
37093: LD_VAR 0 5
37097: RET
// export function DangerAtRange ( unit , range ) ; begin
37098: LD_INT 0
37100: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37101: LD_ADDR_VAR 0 3
37105: PUSH
37106: LD_VAR 0 1
37110: PPUSH
37111: CALL_OW 255
37115: PPUSH
37116: LD_VAR 0 1
37120: PPUSH
37121: CALL_OW 250
37125: PPUSH
37126: LD_VAR 0 1
37130: PPUSH
37131: CALL_OW 251
37135: PPUSH
37136: LD_VAR 0 2
37140: PPUSH
37141: CALL 35401 0 4
37145: ST_TO_ADDR
// end ;
37146: LD_VAR 0 3
37150: RET
// export function DangerInArea ( side , area ) ; begin
37151: LD_INT 0
37153: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37154: LD_ADDR_VAR 0 3
37158: PUSH
37159: LD_VAR 0 2
37163: PPUSH
37164: LD_INT 81
37166: PUSH
37167: LD_VAR 0 1
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PPUSH
37176: CALL_OW 70
37180: ST_TO_ADDR
// end ;
37181: LD_VAR 0 3
37185: RET
// export function IsExtension ( b ) ; begin
37186: LD_INT 0
37188: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37189: LD_ADDR_VAR 0 2
37193: PUSH
37194: LD_VAR 0 1
37198: PUSH
37199: LD_INT 23
37201: PUSH
37202: LD_INT 20
37204: PUSH
37205: LD_INT 22
37207: PUSH
37208: LD_INT 17
37210: PUSH
37211: LD_INT 24
37213: PUSH
37214: LD_INT 21
37216: PUSH
37217: LD_INT 19
37219: PUSH
37220: LD_INT 16
37222: PUSH
37223: LD_INT 25
37225: PUSH
37226: LD_INT 18
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: LIST
37238: LIST
37239: LIST
37240: IN
37241: ST_TO_ADDR
// end ;
37242: LD_VAR 0 2
37246: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37247: LD_INT 0
37249: PPUSH
37250: PPUSH
37251: PPUSH
// result := [ ] ;
37252: LD_ADDR_VAR 0 4
37256: PUSH
37257: EMPTY
37258: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37259: LD_ADDR_VAR 0 5
37263: PUSH
37264: LD_VAR 0 2
37268: PPUSH
37269: LD_INT 21
37271: PUSH
37272: LD_INT 3
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: PPUSH
37279: CALL_OW 70
37283: ST_TO_ADDR
// if not tmp then
37284: LD_VAR 0 5
37288: NOT
37289: IFFALSE 37293
// exit ;
37291: GO 37357
// if checkLink then
37293: LD_VAR 0 3
37297: IFFALSE 37347
// begin for i in tmp do
37299: LD_ADDR_VAR 0 6
37303: PUSH
37304: LD_VAR 0 5
37308: PUSH
37309: FOR_IN
37310: IFFALSE 37345
// if GetBase ( i ) <> base then
37312: LD_VAR 0 6
37316: PPUSH
37317: CALL_OW 274
37321: PUSH
37322: LD_VAR 0 1
37326: NONEQUAL
37327: IFFALSE 37343
// ComLinkToBase ( base , i ) ;
37329: LD_VAR 0 1
37333: PPUSH
37334: LD_VAR 0 6
37338: PPUSH
37339: CALL_OW 169
37343: GO 37309
37345: POP
37346: POP
// end ; result := tmp ;
37347: LD_ADDR_VAR 0 4
37351: PUSH
37352: LD_VAR 0 5
37356: ST_TO_ADDR
// end ;
37357: LD_VAR 0 4
37361: RET
// export function ComComplete ( units , b ) ; var i ; begin
37362: LD_INT 0
37364: PPUSH
37365: PPUSH
// if not units then
37366: LD_VAR 0 1
37370: NOT
37371: IFFALSE 37375
// exit ;
37373: GO 37465
// for i in units do
37375: LD_ADDR_VAR 0 4
37379: PUSH
37380: LD_VAR 0 1
37384: PUSH
37385: FOR_IN
37386: IFFALSE 37463
// if BuildingStatus ( b ) = bs_build then
37388: LD_VAR 0 2
37392: PPUSH
37393: CALL_OW 461
37397: PUSH
37398: LD_INT 1
37400: EQUAL
37401: IFFALSE 37461
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37403: LD_VAR 0 4
37407: PPUSH
37408: LD_STRING h
37410: PUSH
37411: LD_VAR 0 2
37415: PPUSH
37416: CALL_OW 250
37420: PUSH
37421: LD_VAR 0 2
37425: PPUSH
37426: CALL_OW 251
37430: PUSH
37431: LD_VAR 0 2
37435: PUSH
37436: LD_INT 0
37438: PUSH
37439: LD_INT 0
37441: PUSH
37442: LD_INT 0
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: PUSH
37454: EMPTY
37455: LIST
37456: PPUSH
37457: CALL_OW 446
37461: GO 37385
37463: POP
37464: POP
// end ;
37465: LD_VAR 0 3
37469: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37470: LD_INT 0
37472: PPUSH
37473: PPUSH
37474: PPUSH
37475: PPUSH
37476: PPUSH
37477: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
37478: LD_VAR 0 1
37482: NOT
37483: PUSH
37484: LD_VAR 0 1
37488: PPUSH
37489: CALL_OW 263
37493: PUSH
37494: LD_INT 2
37496: EQUAL
37497: NOT
37498: OR
37499: IFFALSE 37503
// exit ;
37501: GO 37819
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37503: LD_ADDR_VAR 0 6
37507: PUSH
37508: LD_INT 22
37510: PUSH
37511: LD_VAR 0 1
37515: PPUSH
37516: CALL_OW 255
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: LD_INT 2
37527: PUSH
37528: LD_INT 30
37530: PUSH
37531: LD_INT 36
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: PUSH
37538: LD_INT 34
37540: PUSH
37541: LD_INT 31
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: LIST
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: PPUSH
37557: CALL_OW 69
37561: ST_TO_ADDR
// if not tmp then
37562: LD_VAR 0 6
37566: NOT
37567: IFFALSE 37571
// exit ;
37569: GO 37819
// result := [ ] ;
37571: LD_ADDR_VAR 0 2
37575: PUSH
37576: EMPTY
37577: ST_TO_ADDR
// for i in tmp do
37578: LD_ADDR_VAR 0 3
37582: PUSH
37583: LD_VAR 0 6
37587: PUSH
37588: FOR_IN
37589: IFFALSE 37660
// begin t := UnitsInside ( i ) ;
37591: LD_ADDR_VAR 0 4
37595: PUSH
37596: LD_VAR 0 3
37600: PPUSH
37601: CALL_OW 313
37605: ST_TO_ADDR
// if t then
37606: LD_VAR 0 4
37610: IFFALSE 37658
// for j in t do
37612: LD_ADDR_VAR 0 7
37616: PUSH
37617: LD_VAR 0 4
37621: PUSH
37622: FOR_IN
37623: IFFALSE 37656
// result := Insert ( result , result + 1 , j ) ;
37625: LD_ADDR_VAR 0 2
37629: PUSH
37630: LD_VAR 0 2
37634: PPUSH
37635: LD_VAR 0 2
37639: PUSH
37640: LD_INT 1
37642: PLUS
37643: PPUSH
37644: LD_VAR 0 7
37648: PPUSH
37649: CALL_OW 2
37653: ST_TO_ADDR
37654: GO 37622
37656: POP
37657: POP
// end ;
37658: GO 37588
37660: POP
37661: POP
// if not result then
37662: LD_VAR 0 2
37666: NOT
37667: IFFALSE 37671
// exit ;
37669: GO 37819
// mech := result [ 1 ] ;
37671: LD_ADDR_VAR 0 5
37675: PUSH
37676: LD_VAR 0 2
37680: PUSH
37681: LD_INT 1
37683: ARRAY
37684: ST_TO_ADDR
// if result > 1 then
37685: LD_VAR 0 2
37689: PUSH
37690: LD_INT 1
37692: GREATER
37693: IFFALSE 37805
// for i = 2 to result do
37695: LD_ADDR_VAR 0 3
37699: PUSH
37700: DOUBLE
37701: LD_INT 2
37703: DEC
37704: ST_TO_ADDR
37705: LD_VAR 0 2
37709: PUSH
37710: FOR_TO
37711: IFFALSE 37803
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37713: LD_ADDR_VAR 0 4
37717: PUSH
37718: LD_VAR 0 2
37722: PUSH
37723: LD_VAR 0 3
37727: ARRAY
37728: PPUSH
37729: LD_INT 3
37731: PPUSH
37732: CALL_OW 259
37736: PUSH
37737: LD_VAR 0 2
37741: PUSH
37742: LD_VAR 0 3
37746: ARRAY
37747: PPUSH
37748: CALL_OW 432
37752: MINUS
37753: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37754: LD_VAR 0 4
37758: PUSH
37759: LD_VAR 0 5
37763: PPUSH
37764: LD_INT 3
37766: PPUSH
37767: CALL_OW 259
37771: PUSH
37772: LD_VAR 0 5
37776: PPUSH
37777: CALL_OW 432
37781: MINUS
37782: GREATEREQUAL
37783: IFFALSE 37801
// mech := result [ i ] ;
37785: LD_ADDR_VAR 0 5
37789: PUSH
37790: LD_VAR 0 2
37794: PUSH
37795: LD_VAR 0 3
37799: ARRAY
37800: ST_TO_ADDR
// end ;
37801: GO 37710
37803: POP
37804: POP
// ComLinkTo ( vehicle , mech ) ;
37805: LD_VAR 0 1
37809: PPUSH
37810: LD_VAR 0 5
37814: PPUSH
37815: CALL_OW 135
// end ;
37819: LD_VAR 0 2
37823: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37824: LD_INT 0
37826: PPUSH
37827: PPUSH
37828: PPUSH
37829: PPUSH
37830: PPUSH
37831: PPUSH
37832: PPUSH
37833: PPUSH
37834: PPUSH
37835: PPUSH
37836: PPUSH
37837: PPUSH
37838: PPUSH
// result := [ ] ;
37839: LD_ADDR_VAR 0 7
37843: PUSH
37844: EMPTY
37845: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37846: LD_VAR 0 1
37850: PPUSH
37851: CALL_OW 266
37855: PUSH
37856: LD_INT 0
37858: PUSH
37859: LD_INT 1
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: IN
37866: NOT
37867: IFFALSE 37871
// exit ;
37869: GO 39505
// if name then
37871: LD_VAR 0 3
37875: IFFALSE 37891
// SetBName ( base_dep , name ) ;
37877: LD_VAR 0 1
37881: PPUSH
37882: LD_VAR 0 3
37886: PPUSH
37887: CALL_OW 500
// base := GetBase ( base_dep ) ;
37891: LD_ADDR_VAR 0 15
37895: PUSH
37896: LD_VAR 0 1
37900: PPUSH
37901: CALL_OW 274
37905: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37906: LD_ADDR_VAR 0 16
37910: PUSH
37911: LD_VAR 0 1
37915: PPUSH
37916: CALL_OW 255
37920: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37921: LD_ADDR_VAR 0 17
37925: PUSH
37926: LD_VAR 0 1
37930: PPUSH
37931: CALL_OW 248
37935: ST_TO_ADDR
// if sources then
37936: LD_VAR 0 5
37940: IFFALSE 37987
// for i = 1 to 3 do
37942: LD_ADDR_VAR 0 8
37946: PUSH
37947: DOUBLE
37948: LD_INT 1
37950: DEC
37951: ST_TO_ADDR
37952: LD_INT 3
37954: PUSH
37955: FOR_TO
37956: IFFALSE 37985
// AddResourceType ( base , i , sources [ i ] ) ;
37958: LD_VAR 0 15
37962: PPUSH
37963: LD_VAR 0 8
37967: PPUSH
37968: LD_VAR 0 5
37972: PUSH
37973: LD_VAR 0 8
37977: ARRAY
37978: PPUSH
37979: CALL_OW 276
37983: GO 37955
37985: POP
37986: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37987: LD_ADDR_VAR 0 18
37991: PUSH
37992: LD_VAR 0 15
37996: PPUSH
37997: LD_VAR 0 2
38001: PPUSH
38002: LD_INT 1
38004: PPUSH
38005: CALL 37247 0 3
38009: ST_TO_ADDR
// InitHc ;
38010: CALL_OW 19
// InitUc ;
38014: CALL_OW 18
// uc_side := side ;
38018: LD_ADDR_OWVAR 20
38022: PUSH
38023: LD_VAR 0 16
38027: ST_TO_ADDR
// uc_nation := nation ;
38028: LD_ADDR_OWVAR 21
38032: PUSH
38033: LD_VAR 0 17
38037: ST_TO_ADDR
// if buildings then
38038: LD_VAR 0 18
38042: IFFALSE 39364
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38044: LD_ADDR_VAR 0 19
38048: PUSH
38049: LD_VAR 0 18
38053: PPUSH
38054: LD_INT 2
38056: PUSH
38057: LD_INT 30
38059: PUSH
38060: LD_INT 29
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: PUSH
38067: LD_INT 30
38069: PUSH
38070: LD_INT 30
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: LIST
38081: PPUSH
38082: CALL_OW 72
38086: ST_TO_ADDR
// if tmp then
38087: LD_VAR 0 19
38091: IFFALSE 38139
// for i in tmp do
38093: LD_ADDR_VAR 0 8
38097: PUSH
38098: LD_VAR 0 19
38102: PUSH
38103: FOR_IN
38104: IFFALSE 38137
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38106: LD_VAR 0 8
38110: PPUSH
38111: CALL_OW 250
38115: PPUSH
38116: LD_VAR 0 8
38120: PPUSH
38121: CALL_OW 251
38125: PPUSH
38126: LD_VAR 0 16
38130: PPUSH
38131: CALL_OW 441
38135: GO 38103
38137: POP
38138: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38139: LD_VAR 0 18
38143: PPUSH
38144: LD_INT 2
38146: PUSH
38147: LD_INT 30
38149: PUSH
38150: LD_INT 32
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: LD_INT 30
38159: PUSH
38160: LD_INT 33
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: LIST
38171: PPUSH
38172: CALL_OW 72
38176: IFFALSE 38264
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38178: LD_ADDR_VAR 0 8
38182: PUSH
38183: LD_VAR 0 18
38187: PPUSH
38188: LD_INT 2
38190: PUSH
38191: LD_INT 30
38193: PUSH
38194: LD_INT 32
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: PUSH
38201: LD_INT 30
38203: PUSH
38204: LD_INT 33
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PUSH
38211: EMPTY
38212: LIST
38213: LIST
38214: LIST
38215: PPUSH
38216: CALL_OW 72
38220: PUSH
38221: FOR_IN
38222: IFFALSE 38262
// begin if not GetBWeapon ( i ) then
38224: LD_VAR 0 8
38228: PPUSH
38229: CALL_OW 269
38233: NOT
38234: IFFALSE 38260
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38236: LD_VAR 0 8
38240: PPUSH
38241: LD_VAR 0 8
38245: PPUSH
38246: LD_VAR 0 2
38250: PPUSH
38251: CALL 39510 0 2
38255: PPUSH
38256: CALL_OW 431
// end ;
38260: GO 38221
38262: POP
38263: POP
// end ; for i = 1 to personel do
38264: LD_ADDR_VAR 0 8
38268: PUSH
38269: DOUBLE
38270: LD_INT 1
38272: DEC
38273: ST_TO_ADDR
38274: LD_VAR 0 6
38278: PUSH
38279: FOR_TO
38280: IFFALSE 39344
// begin if i > 4 then
38282: LD_VAR 0 8
38286: PUSH
38287: LD_INT 4
38289: GREATER
38290: IFFALSE 38294
// break ;
38292: GO 39344
// case i of 1 :
38294: LD_VAR 0 8
38298: PUSH
38299: LD_INT 1
38301: DOUBLE
38302: EQUAL
38303: IFTRUE 38307
38305: GO 38387
38307: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38308: LD_ADDR_VAR 0 12
38312: PUSH
38313: LD_VAR 0 18
38317: PPUSH
38318: LD_INT 22
38320: PUSH
38321: LD_VAR 0 16
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: PUSH
38330: LD_INT 58
38332: PUSH
38333: EMPTY
38334: LIST
38335: PUSH
38336: LD_INT 2
38338: PUSH
38339: LD_INT 30
38341: PUSH
38342: LD_INT 32
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 30
38351: PUSH
38352: LD_INT 4
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 30
38361: PUSH
38362: LD_INT 5
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: LIST
38379: PPUSH
38380: CALL_OW 72
38384: ST_TO_ADDR
38385: GO 38609
38387: LD_INT 2
38389: DOUBLE
38390: EQUAL
38391: IFTRUE 38395
38393: GO 38457
38395: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38396: LD_ADDR_VAR 0 12
38400: PUSH
38401: LD_VAR 0 18
38405: PPUSH
38406: LD_INT 22
38408: PUSH
38409: LD_VAR 0 16
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: PUSH
38418: LD_INT 2
38420: PUSH
38421: LD_INT 30
38423: PUSH
38424: LD_INT 0
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 30
38433: PUSH
38434: LD_INT 1
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: LIST
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: PPUSH
38450: CALL_OW 72
38454: ST_TO_ADDR
38455: GO 38609
38457: LD_INT 3
38459: DOUBLE
38460: EQUAL
38461: IFTRUE 38465
38463: GO 38527
38465: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38466: LD_ADDR_VAR 0 12
38470: PUSH
38471: LD_VAR 0 18
38475: PPUSH
38476: LD_INT 22
38478: PUSH
38479: LD_VAR 0 16
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: PUSH
38488: LD_INT 2
38490: PUSH
38491: LD_INT 30
38493: PUSH
38494: LD_INT 2
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: PUSH
38501: LD_INT 30
38503: PUSH
38504: LD_INT 3
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: LIST
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PPUSH
38520: CALL_OW 72
38524: ST_TO_ADDR
38525: GO 38609
38527: LD_INT 4
38529: DOUBLE
38530: EQUAL
38531: IFTRUE 38535
38533: GO 38608
38535: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38536: LD_ADDR_VAR 0 12
38540: PUSH
38541: LD_VAR 0 18
38545: PPUSH
38546: LD_INT 22
38548: PUSH
38549: LD_VAR 0 16
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PUSH
38558: LD_INT 2
38560: PUSH
38561: LD_INT 30
38563: PUSH
38564: LD_INT 6
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: PUSH
38571: LD_INT 30
38573: PUSH
38574: LD_INT 7
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: PUSH
38581: LD_INT 30
38583: PUSH
38584: LD_INT 8
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PPUSH
38601: CALL_OW 72
38605: ST_TO_ADDR
38606: GO 38609
38608: POP
// if i = 1 then
38609: LD_VAR 0 8
38613: PUSH
38614: LD_INT 1
38616: EQUAL
38617: IFFALSE 38728
// begin tmp := [ ] ;
38619: LD_ADDR_VAR 0 19
38623: PUSH
38624: EMPTY
38625: ST_TO_ADDR
// for j in f do
38626: LD_ADDR_VAR 0 9
38630: PUSH
38631: LD_VAR 0 12
38635: PUSH
38636: FOR_IN
38637: IFFALSE 38710
// if GetBType ( j ) = b_bunker then
38639: LD_VAR 0 9
38643: PPUSH
38644: CALL_OW 266
38648: PUSH
38649: LD_INT 32
38651: EQUAL
38652: IFFALSE 38679
// tmp := Insert ( tmp , 1 , j ) else
38654: LD_ADDR_VAR 0 19
38658: PUSH
38659: LD_VAR 0 19
38663: PPUSH
38664: LD_INT 1
38666: PPUSH
38667: LD_VAR 0 9
38671: PPUSH
38672: CALL_OW 2
38676: ST_TO_ADDR
38677: GO 38708
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38679: LD_ADDR_VAR 0 19
38683: PUSH
38684: LD_VAR 0 19
38688: PPUSH
38689: LD_VAR 0 19
38693: PUSH
38694: LD_INT 1
38696: PLUS
38697: PPUSH
38698: LD_VAR 0 9
38702: PPUSH
38703: CALL_OW 2
38707: ST_TO_ADDR
38708: GO 38636
38710: POP
38711: POP
// if tmp then
38712: LD_VAR 0 19
38716: IFFALSE 38728
// f := tmp ;
38718: LD_ADDR_VAR 0 12
38722: PUSH
38723: LD_VAR 0 19
38727: ST_TO_ADDR
// end ; x := personel [ i ] ;
38728: LD_ADDR_VAR 0 13
38732: PUSH
38733: LD_VAR 0 6
38737: PUSH
38738: LD_VAR 0 8
38742: ARRAY
38743: ST_TO_ADDR
// if x = - 1 then
38744: LD_VAR 0 13
38748: PUSH
38749: LD_INT 1
38751: NEG
38752: EQUAL
38753: IFFALSE 38962
// begin for j in f do
38755: LD_ADDR_VAR 0 9
38759: PUSH
38760: LD_VAR 0 12
38764: PUSH
38765: FOR_IN
38766: IFFALSE 38958
// repeat InitHc ;
38768: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38772: LD_VAR 0 9
38776: PPUSH
38777: CALL_OW 266
38781: PUSH
38782: LD_INT 5
38784: EQUAL
38785: IFFALSE 38855
// begin if UnitsInside ( j ) < 3 then
38787: LD_VAR 0 9
38791: PPUSH
38792: CALL_OW 313
38796: PUSH
38797: LD_INT 3
38799: LESS
38800: IFFALSE 38836
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38802: LD_INT 0
38804: PPUSH
38805: LD_INT 5
38807: PUSH
38808: LD_INT 8
38810: PUSH
38811: LD_INT 9
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: LIST
38818: PUSH
38819: LD_VAR 0 17
38823: ARRAY
38824: PPUSH
38825: LD_VAR 0 4
38829: PPUSH
38830: CALL_OW 380
38834: GO 38853
// PrepareHuman ( false , i , skill ) ;
38836: LD_INT 0
38838: PPUSH
38839: LD_VAR 0 8
38843: PPUSH
38844: LD_VAR 0 4
38848: PPUSH
38849: CALL_OW 380
// end else
38853: GO 38872
// PrepareHuman ( false , i , skill ) ;
38855: LD_INT 0
38857: PPUSH
38858: LD_VAR 0 8
38862: PPUSH
38863: LD_VAR 0 4
38867: PPUSH
38868: CALL_OW 380
// un := CreateHuman ;
38872: LD_ADDR_VAR 0 14
38876: PUSH
38877: CALL_OW 44
38881: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38882: LD_ADDR_VAR 0 7
38886: PUSH
38887: LD_VAR 0 7
38891: PPUSH
38892: LD_INT 1
38894: PPUSH
38895: LD_VAR 0 14
38899: PPUSH
38900: CALL_OW 2
38904: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38905: LD_VAR 0 14
38909: PPUSH
38910: LD_VAR 0 9
38914: PPUSH
38915: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38919: LD_VAR 0 9
38923: PPUSH
38924: CALL_OW 313
38928: PUSH
38929: LD_INT 6
38931: EQUAL
38932: PUSH
38933: LD_VAR 0 9
38937: PPUSH
38938: CALL_OW 266
38942: PUSH
38943: LD_INT 32
38945: PUSH
38946: LD_INT 31
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: IN
38953: OR
38954: IFFALSE 38768
38956: GO 38765
38958: POP
38959: POP
// end else
38960: GO 39342
// for j = 1 to x do
38962: LD_ADDR_VAR 0 9
38966: PUSH
38967: DOUBLE
38968: LD_INT 1
38970: DEC
38971: ST_TO_ADDR
38972: LD_VAR 0 13
38976: PUSH
38977: FOR_TO
38978: IFFALSE 39340
// begin InitHc ;
38980: CALL_OW 19
// if not f then
38984: LD_VAR 0 12
38988: NOT
38989: IFFALSE 39078
// begin PrepareHuman ( false , i , skill ) ;
38991: LD_INT 0
38993: PPUSH
38994: LD_VAR 0 8
38998: PPUSH
38999: LD_VAR 0 4
39003: PPUSH
39004: CALL_OW 380
// un := CreateHuman ;
39008: LD_ADDR_VAR 0 14
39012: PUSH
39013: CALL_OW 44
39017: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39018: LD_ADDR_VAR 0 7
39022: PUSH
39023: LD_VAR 0 7
39027: PPUSH
39028: LD_INT 1
39030: PPUSH
39031: LD_VAR 0 14
39035: PPUSH
39036: CALL_OW 2
39040: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39041: LD_VAR 0 14
39045: PPUSH
39046: LD_VAR 0 1
39050: PPUSH
39051: CALL_OW 250
39055: PPUSH
39056: LD_VAR 0 1
39060: PPUSH
39061: CALL_OW 251
39065: PPUSH
39066: LD_INT 10
39068: PPUSH
39069: LD_INT 0
39071: PPUSH
39072: CALL_OW 50
// continue ;
39076: GO 38977
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39078: LD_VAR 0 12
39082: PUSH
39083: LD_INT 1
39085: ARRAY
39086: PPUSH
39087: CALL_OW 313
39091: PUSH
39092: LD_VAR 0 12
39096: PUSH
39097: LD_INT 1
39099: ARRAY
39100: PPUSH
39101: CALL_OW 266
39105: PUSH
39106: LD_INT 32
39108: PUSH
39109: LD_INT 31
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: IN
39116: AND
39117: PUSH
39118: LD_VAR 0 12
39122: PUSH
39123: LD_INT 1
39125: ARRAY
39126: PPUSH
39127: CALL_OW 313
39131: PUSH
39132: LD_INT 6
39134: EQUAL
39135: OR
39136: IFFALSE 39156
// f := Delete ( f , 1 ) ;
39138: LD_ADDR_VAR 0 12
39142: PUSH
39143: LD_VAR 0 12
39147: PPUSH
39148: LD_INT 1
39150: PPUSH
39151: CALL_OW 3
39155: ST_TO_ADDR
// if not f then
39156: LD_VAR 0 12
39160: NOT
39161: IFFALSE 39179
// begin x := x + 2 ;
39163: LD_ADDR_VAR 0 13
39167: PUSH
39168: LD_VAR 0 13
39172: PUSH
39173: LD_INT 2
39175: PLUS
39176: ST_TO_ADDR
// continue ;
39177: GO 38977
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39179: LD_VAR 0 12
39183: PUSH
39184: LD_INT 1
39186: ARRAY
39187: PPUSH
39188: CALL_OW 266
39192: PUSH
39193: LD_INT 5
39195: EQUAL
39196: IFFALSE 39270
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39198: LD_VAR 0 12
39202: PUSH
39203: LD_INT 1
39205: ARRAY
39206: PPUSH
39207: CALL_OW 313
39211: PUSH
39212: LD_INT 3
39214: LESS
39215: IFFALSE 39251
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39217: LD_INT 0
39219: PPUSH
39220: LD_INT 5
39222: PUSH
39223: LD_INT 8
39225: PUSH
39226: LD_INT 9
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: LIST
39233: PUSH
39234: LD_VAR 0 17
39238: ARRAY
39239: PPUSH
39240: LD_VAR 0 4
39244: PPUSH
39245: CALL_OW 380
39249: GO 39268
// PrepareHuman ( false , i , skill ) ;
39251: LD_INT 0
39253: PPUSH
39254: LD_VAR 0 8
39258: PPUSH
39259: LD_VAR 0 4
39263: PPUSH
39264: CALL_OW 380
// end else
39268: GO 39287
// PrepareHuman ( false , i , skill ) ;
39270: LD_INT 0
39272: PPUSH
39273: LD_VAR 0 8
39277: PPUSH
39278: LD_VAR 0 4
39282: PPUSH
39283: CALL_OW 380
// un := CreateHuman ;
39287: LD_ADDR_VAR 0 14
39291: PUSH
39292: CALL_OW 44
39296: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39297: LD_ADDR_VAR 0 7
39301: PUSH
39302: LD_VAR 0 7
39306: PPUSH
39307: LD_INT 1
39309: PPUSH
39310: LD_VAR 0 14
39314: PPUSH
39315: CALL_OW 2
39319: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39320: LD_VAR 0 14
39324: PPUSH
39325: LD_VAR 0 12
39329: PUSH
39330: LD_INT 1
39332: ARRAY
39333: PPUSH
39334: CALL_OW 52
// end ;
39338: GO 38977
39340: POP
39341: POP
// end ;
39342: GO 38279
39344: POP
39345: POP
// result := result ^ buildings ;
39346: LD_ADDR_VAR 0 7
39350: PUSH
39351: LD_VAR 0 7
39355: PUSH
39356: LD_VAR 0 18
39360: ADD
39361: ST_TO_ADDR
// end else
39362: GO 39505
// begin for i = 1 to personel do
39364: LD_ADDR_VAR 0 8
39368: PUSH
39369: DOUBLE
39370: LD_INT 1
39372: DEC
39373: ST_TO_ADDR
39374: LD_VAR 0 6
39378: PUSH
39379: FOR_TO
39380: IFFALSE 39503
// begin if i > 4 then
39382: LD_VAR 0 8
39386: PUSH
39387: LD_INT 4
39389: GREATER
39390: IFFALSE 39394
// break ;
39392: GO 39503
// x := personel [ i ] ;
39394: LD_ADDR_VAR 0 13
39398: PUSH
39399: LD_VAR 0 6
39403: PUSH
39404: LD_VAR 0 8
39408: ARRAY
39409: ST_TO_ADDR
// if x = - 1 then
39410: LD_VAR 0 13
39414: PUSH
39415: LD_INT 1
39417: NEG
39418: EQUAL
39419: IFFALSE 39423
// continue ;
39421: GO 39379
// PrepareHuman ( false , i , skill ) ;
39423: LD_INT 0
39425: PPUSH
39426: LD_VAR 0 8
39430: PPUSH
39431: LD_VAR 0 4
39435: PPUSH
39436: CALL_OW 380
// un := CreateHuman ;
39440: LD_ADDR_VAR 0 14
39444: PUSH
39445: CALL_OW 44
39449: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39450: LD_VAR 0 14
39454: PPUSH
39455: LD_VAR 0 1
39459: PPUSH
39460: CALL_OW 250
39464: PPUSH
39465: LD_VAR 0 1
39469: PPUSH
39470: CALL_OW 251
39474: PPUSH
39475: LD_INT 10
39477: PPUSH
39478: LD_INT 0
39480: PPUSH
39481: CALL_OW 50
// result := result ^ un ;
39485: LD_ADDR_VAR 0 7
39489: PUSH
39490: LD_VAR 0 7
39494: PUSH
39495: LD_VAR 0 14
39499: ADD
39500: ST_TO_ADDR
// end ;
39501: GO 39379
39503: POP
39504: POP
// end ; end ;
39505: LD_VAR 0 7
39509: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39510: LD_INT 0
39512: PPUSH
39513: PPUSH
39514: PPUSH
39515: PPUSH
39516: PPUSH
39517: PPUSH
39518: PPUSH
39519: PPUSH
39520: PPUSH
39521: PPUSH
39522: PPUSH
39523: PPUSH
39524: PPUSH
39525: PPUSH
39526: PPUSH
39527: PPUSH
// result := false ;
39528: LD_ADDR_VAR 0 3
39532: PUSH
39533: LD_INT 0
39535: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39536: LD_VAR 0 1
39540: NOT
39541: PUSH
39542: LD_VAR 0 1
39546: PPUSH
39547: CALL_OW 266
39551: PUSH
39552: LD_INT 32
39554: PUSH
39555: LD_INT 33
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: IN
39562: NOT
39563: OR
39564: IFFALSE 39568
// exit ;
39566: GO 40707
// nat := GetNation ( tower ) ;
39568: LD_ADDR_VAR 0 12
39572: PUSH
39573: LD_VAR 0 1
39577: PPUSH
39578: CALL_OW 248
39582: ST_TO_ADDR
// side := GetSide ( tower ) ;
39583: LD_ADDR_VAR 0 16
39587: PUSH
39588: LD_VAR 0 1
39592: PPUSH
39593: CALL_OW 255
39597: ST_TO_ADDR
// x := GetX ( tower ) ;
39598: LD_ADDR_VAR 0 10
39602: PUSH
39603: LD_VAR 0 1
39607: PPUSH
39608: CALL_OW 250
39612: ST_TO_ADDR
// y := GetY ( tower ) ;
39613: LD_ADDR_VAR 0 11
39617: PUSH
39618: LD_VAR 0 1
39622: PPUSH
39623: CALL_OW 251
39627: ST_TO_ADDR
// if not x or not y then
39628: LD_VAR 0 10
39632: NOT
39633: PUSH
39634: LD_VAR 0 11
39638: NOT
39639: OR
39640: IFFALSE 39644
// exit ;
39642: GO 40707
// weapon := 0 ;
39644: LD_ADDR_VAR 0 18
39648: PUSH
39649: LD_INT 0
39651: ST_TO_ADDR
// fac_list := [ ] ;
39652: LD_ADDR_VAR 0 17
39656: PUSH
39657: EMPTY
39658: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39659: LD_ADDR_VAR 0 6
39663: PUSH
39664: LD_VAR 0 1
39668: PPUSH
39669: CALL_OW 274
39673: PPUSH
39674: LD_VAR 0 2
39678: PPUSH
39679: LD_INT 0
39681: PPUSH
39682: CALL 37247 0 3
39686: PPUSH
39687: LD_INT 30
39689: PUSH
39690: LD_INT 3
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PPUSH
39697: CALL_OW 72
39701: ST_TO_ADDR
// if not factories then
39702: LD_VAR 0 6
39706: NOT
39707: IFFALSE 39711
// exit ;
39709: GO 40707
// for i in factories do
39711: LD_ADDR_VAR 0 8
39715: PUSH
39716: LD_VAR 0 6
39720: PUSH
39721: FOR_IN
39722: IFFALSE 39747
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39724: LD_ADDR_VAR 0 17
39728: PUSH
39729: LD_VAR 0 17
39733: PUSH
39734: LD_VAR 0 8
39738: PPUSH
39739: CALL_OW 478
39743: UNION
39744: ST_TO_ADDR
39745: GO 39721
39747: POP
39748: POP
// if not fac_list then
39749: LD_VAR 0 17
39753: NOT
39754: IFFALSE 39758
// exit ;
39756: GO 40707
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39758: LD_ADDR_VAR 0 5
39762: PUSH
39763: LD_INT 4
39765: PUSH
39766: LD_INT 5
39768: PUSH
39769: LD_INT 9
39771: PUSH
39772: LD_INT 10
39774: PUSH
39775: LD_INT 6
39777: PUSH
39778: LD_INT 7
39780: PUSH
39781: LD_INT 11
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: PUSH
39793: LD_INT 27
39795: PUSH
39796: LD_INT 28
39798: PUSH
39799: LD_INT 26
39801: PUSH
39802: LD_INT 30
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 43
39813: PUSH
39814: LD_INT 44
39816: PUSH
39817: LD_INT 46
39819: PUSH
39820: LD_INT 45
39822: PUSH
39823: LD_INT 47
39825: PUSH
39826: LD_INT 49
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: LIST
39841: PUSH
39842: LD_VAR 0 12
39846: ARRAY
39847: ST_TO_ADDR
// for i in list do
39848: LD_ADDR_VAR 0 8
39852: PUSH
39853: LD_VAR 0 5
39857: PUSH
39858: FOR_IN
39859: IFFALSE 39892
// if not i in fac_list then
39861: LD_VAR 0 8
39865: PUSH
39866: LD_VAR 0 17
39870: IN
39871: NOT
39872: IFFALSE 39890
// list := list diff i ;
39874: LD_ADDR_VAR 0 5
39878: PUSH
39879: LD_VAR 0 5
39883: PUSH
39884: LD_VAR 0 8
39888: DIFF
39889: ST_TO_ADDR
39890: GO 39858
39892: POP
39893: POP
// if not list then
39894: LD_VAR 0 5
39898: NOT
39899: IFFALSE 39903
// exit ;
39901: GO 40707
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39903: LD_VAR 0 12
39907: PUSH
39908: LD_INT 3
39910: EQUAL
39911: PUSH
39912: LD_INT 49
39914: PUSH
39915: LD_VAR 0 5
39919: IN
39920: AND
39921: PUSH
39922: LD_INT 31
39924: PPUSH
39925: LD_VAR 0 16
39929: PPUSH
39930: CALL_OW 321
39934: PUSH
39935: LD_INT 2
39937: EQUAL
39938: AND
39939: IFFALSE 39999
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39941: LD_INT 22
39943: PUSH
39944: LD_VAR 0 16
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: PUSH
39953: LD_INT 35
39955: PUSH
39956: LD_INT 49
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 91
39965: PUSH
39966: LD_VAR 0 1
39970: PUSH
39971: LD_INT 10
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: LIST
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: LIST
39983: PPUSH
39984: CALL_OW 69
39988: NOT
39989: IFFALSE 39999
// weapon := ru_time_lapser ;
39991: LD_ADDR_VAR 0 18
39995: PUSH
39996: LD_INT 49
39998: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39999: LD_VAR 0 12
40003: PUSH
40004: LD_INT 1
40006: PUSH
40007: LD_INT 2
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: IN
40014: PUSH
40015: LD_INT 11
40017: PUSH
40018: LD_VAR 0 5
40022: IN
40023: PUSH
40024: LD_INT 30
40026: PUSH
40027: LD_VAR 0 5
40031: IN
40032: OR
40033: AND
40034: PUSH
40035: LD_INT 6
40037: PPUSH
40038: LD_VAR 0 16
40042: PPUSH
40043: CALL_OW 321
40047: PUSH
40048: LD_INT 2
40050: EQUAL
40051: AND
40052: IFFALSE 40217
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40054: LD_INT 22
40056: PUSH
40057: LD_VAR 0 16
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 2
40068: PUSH
40069: LD_INT 35
40071: PUSH
40072: LD_INT 11
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: PUSH
40079: LD_INT 35
40081: PUSH
40082: LD_INT 30
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 91
40096: PUSH
40097: LD_VAR 0 1
40101: PUSH
40102: LD_INT 18
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: LIST
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: LIST
40114: PPUSH
40115: CALL_OW 69
40119: NOT
40120: PUSH
40121: LD_INT 22
40123: PUSH
40124: LD_VAR 0 16
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: PUSH
40133: LD_INT 2
40135: PUSH
40136: LD_INT 30
40138: PUSH
40139: LD_INT 32
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 30
40148: PUSH
40149: LD_INT 33
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 91
40163: PUSH
40164: LD_VAR 0 1
40168: PUSH
40169: LD_INT 12
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: LIST
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: LIST
40181: PUSH
40182: EMPTY
40183: LIST
40184: PPUSH
40185: CALL_OW 69
40189: PUSH
40190: LD_INT 2
40192: GREATER
40193: AND
40194: IFFALSE 40217
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40196: LD_ADDR_VAR 0 18
40200: PUSH
40201: LD_INT 11
40203: PUSH
40204: LD_INT 30
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: LD_VAR 0 12
40215: ARRAY
40216: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40217: LD_VAR 0 18
40221: NOT
40222: PUSH
40223: LD_INT 40
40225: PPUSH
40226: LD_VAR 0 16
40230: PPUSH
40231: CALL_OW 321
40235: PUSH
40236: LD_INT 2
40238: EQUAL
40239: AND
40240: PUSH
40241: LD_INT 7
40243: PUSH
40244: LD_VAR 0 5
40248: IN
40249: PUSH
40250: LD_INT 28
40252: PUSH
40253: LD_VAR 0 5
40257: IN
40258: OR
40259: PUSH
40260: LD_INT 45
40262: PUSH
40263: LD_VAR 0 5
40267: IN
40268: OR
40269: AND
40270: IFFALSE 40524
// begin hex := GetHexInfo ( x , y ) ;
40272: LD_ADDR_VAR 0 4
40276: PUSH
40277: LD_VAR 0 10
40281: PPUSH
40282: LD_VAR 0 11
40286: PPUSH
40287: CALL_OW 546
40291: ST_TO_ADDR
// if hex [ 1 ] then
40292: LD_VAR 0 4
40296: PUSH
40297: LD_INT 1
40299: ARRAY
40300: IFFALSE 40304
// exit ;
40302: GO 40707
// height := hex [ 2 ] ;
40304: LD_ADDR_VAR 0 15
40308: PUSH
40309: LD_VAR 0 4
40313: PUSH
40314: LD_INT 2
40316: ARRAY
40317: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40318: LD_ADDR_VAR 0 14
40322: PUSH
40323: LD_INT 0
40325: PUSH
40326: LD_INT 2
40328: PUSH
40329: LD_INT 3
40331: PUSH
40332: LD_INT 5
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: LIST
40339: LIST
40340: ST_TO_ADDR
// for i in tmp do
40341: LD_ADDR_VAR 0 8
40345: PUSH
40346: LD_VAR 0 14
40350: PUSH
40351: FOR_IN
40352: IFFALSE 40522
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40354: LD_ADDR_VAR 0 9
40358: PUSH
40359: LD_VAR 0 10
40363: PPUSH
40364: LD_VAR 0 8
40368: PPUSH
40369: LD_INT 5
40371: PPUSH
40372: CALL_OW 272
40376: PUSH
40377: LD_VAR 0 11
40381: PPUSH
40382: LD_VAR 0 8
40386: PPUSH
40387: LD_INT 5
40389: PPUSH
40390: CALL_OW 273
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40399: LD_VAR 0 9
40403: PUSH
40404: LD_INT 1
40406: ARRAY
40407: PPUSH
40408: LD_VAR 0 9
40412: PUSH
40413: LD_INT 2
40415: ARRAY
40416: PPUSH
40417: CALL_OW 488
40421: IFFALSE 40520
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40423: LD_ADDR_VAR 0 4
40427: PUSH
40428: LD_VAR 0 9
40432: PUSH
40433: LD_INT 1
40435: ARRAY
40436: PPUSH
40437: LD_VAR 0 9
40441: PUSH
40442: LD_INT 2
40444: ARRAY
40445: PPUSH
40446: CALL_OW 546
40450: ST_TO_ADDR
// if hex [ 1 ] then
40451: LD_VAR 0 4
40455: PUSH
40456: LD_INT 1
40458: ARRAY
40459: IFFALSE 40463
// continue ;
40461: GO 40351
// h := hex [ 2 ] ;
40463: LD_ADDR_VAR 0 13
40467: PUSH
40468: LD_VAR 0 4
40472: PUSH
40473: LD_INT 2
40475: ARRAY
40476: ST_TO_ADDR
// if h + 7 < height then
40477: LD_VAR 0 13
40481: PUSH
40482: LD_INT 7
40484: PLUS
40485: PUSH
40486: LD_VAR 0 15
40490: LESS
40491: IFFALSE 40520
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40493: LD_ADDR_VAR 0 18
40497: PUSH
40498: LD_INT 7
40500: PUSH
40501: LD_INT 28
40503: PUSH
40504: LD_INT 45
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: LIST
40511: PUSH
40512: LD_VAR 0 12
40516: ARRAY
40517: ST_TO_ADDR
// break ;
40518: GO 40522
// end ; end ; end ;
40520: GO 40351
40522: POP
40523: POP
// end ; if not weapon then
40524: LD_VAR 0 18
40528: NOT
40529: IFFALSE 40589
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40531: LD_ADDR_VAR 0 5
40535: PUSH
40536: LD_VAR 0 5
40540: PUSH
40541: LD_INT 11
40543: PUSH
40544: LD_INT 30
40546: PUSH
40547: LD_INT 49
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: LIST
40554: DIFF
40555: ST_TO_ADDR
// if not list then
40556: LD_VAR 0 5
40560: NOT
40561: IFFALSE 40565
// exit ;
40563: GO 40707
// weapon := list [ rand ( 1 , list ) ] ;
40565: LD_ADDR_VAR 0 18
40569: PUSH
40570: LD_VAR 0 5
40574: PUSH
40575: LD_INT 1
40577: PPUSH
40578: LD_VAR 0 5
40582: PPUSH
40583: CALL_OW 12
40587: ARRAY
40588: ST_TO_ADDR
// end ; if weapon then
40589: LD_VAR 0 18
40593: IFFALSE 40707
// begin tmp := CostOfWeapon ( weapon ) ;
40595: LD_ADDR_VAR 0 14
40599: PUSH
40600: LD_VAR 0 18
40604: PPUSH
40605: CALL_OW 451
40609: ST_TO_ADDR
// j := GetBase ( tower ) ;
40610: LD_ADDR_VAR 0 9
40614: PUSH
40615: LD_VAR 0 1
40619: PPUSH
40620: CALL_OW 274
40624: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40625: LD_VAR 0 9
40629: PPUSH
40630: LD_INT 1
40632: PPUSH
40633: CALL_OW 275
40637: PUSH
40638: LD_VAR 0 14
40642: PUSH
40643: LD_INT 1
40645: ARRAY
40646: GREATEREQUAL
40647: PUSH
40648: LD_VAR 0 9
40652: PPUSH
40653: LD_INT 2
40655: PPUSH
40656: CALL_OW 275
40660: PUSH
40661: LD_VAR 0 14
40665: PUSH
40666: LD_INT 2
40668: ARRAY
40669: GREATEREQUAL
40670: AND
40671: PUSH
40672: LD_VAR 0 9
40676: PPUSH
40677: LD_INT 3
40679: PPUSH
40680: CALL_OW 275
40684: PUSH
40685: LD_VAR 0 14
40689: PUSH
40690: LD_INT 3
40692: ARRAY
40693: GREATEREQUAL
40694: AND
40695: IFFALSE 40707
// result := weapon ;
40697: LD_ADDR_VAR 0 3
40701: PUSH
40702: LD_VAR 0 18
40706: ST_TO_ADDR
// end ; end ;
40707: LD_VAR 0 3
40711: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40712: LD_INT 0
40714: PPUSH
40715: PPUSH
// result := true ;
40716: LD_ADDR_VAR 0 3
40720: PUSH
40721: LD_INT 1
40723: ST_TO_ADDR
// if array1 = array2 then
40724: LD_VAR 0 1
40728: PUSH
40729: LD_VAR 0 2
40733: EQUAL
40734: IFFALSE 40794
// begin for i = 1 to array1 do
40736: LD_ADDR_VAR 0 4
40740: PUSH
40741: DOUBLE
40742: LD_INT 1
40744: DEC
40745: ST_TO_ADDR
40746: LD_VAR 0 1
40750: PUSH
40751: FOR_TO
40752: IFFALSE 40790
// if array1 [ i ] <> array2 [ i ] then
40754: LD_VAR 0 1
40758: PUSH
40759: LD_VAR 0 4
40763: ARRAY
40764: PUSH
40765: LD_VAR 0 2
40769: PUSH
40770: LD_VAR 0 4
40774: ARRAY
40775: NONEQUAL
40776: IFFALSE 40788
// begin result := false ;
40778: LD_ADDR_VAR 0 3
40782: PUSH
40783: LD_INT 0
40785: ST_TO_ADDR
// break ;
40786: GO 40790
// end ;
40788: GO 40751
40790: POP
40791: POP
// end else
40792: GO 40802
// result := false ;
40794: LD_ADDR_VAR 0 3
40798: PUSH
40799: LD_INT 0
40801: ST_TO_ADDR
// end ;
40802: LD_VAR 0 3
40806: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40807: LD_INT 0
40809: PPUSH
40810: PPUSH
// if not array1 or not array2 then
40811: LD_VAR 0 1
40815: NOT
40816: PUSH
40817: LD_VAR 0 2
40821: NOT
40822: OR
40823: IFFALSE 40827
// exit ;
40825: GO 40891
// result := true ;
40827: LD_ADDR_VAR 0 3
40831: PUSH
40832: LD_INT 1
40834: ST_TO_ADDR
// for i = 1 to array1 do
40835: LD_ADDR_VAR 0 4
40839: PUSH
40840: DOUBLE
40841: LD_INT 1
40843: DEC
40844: ST_TO_ADDR
40845: LD_VAR 0 1
40849: PUSH
40850: FOR_TO
40851: IFFALSE 40889
// if array1 [ i ] <> array2 [ i ] then
40853: LD_VAR 0 1
40857: PUSH
40858: LD_VAR 0 4
40862: ARRAY
40863: PUSH
40864: LD_VAR 0 2
40868: PUSH
40869: LD_VAR 0 4
40873: ARRAY
40874: NONEQUAL
40875: IFFALSE 40887
// begin result := false ;
40877: LD_ADDR_VAR 0 3
40881: PUSH
40882: LD_INT 0
40884: ST_TO_ADDR
// break ;
40885: GO 40889
// end ;
40887: GO 40850
40889: POP
40890: POP
// end ;
40891: LD_VAR 0 3
40895: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40896: LD_INT 0
40898: PPUSH
40899: PPUSH
40900: PPUSH
// pom := GetBase ( fac ) ;
40901: LD_ADDR_VAR 0 5
40905: PUSH
40906: LD_VAR 0 1
40910: PPUSH
40911: CALL_OW 274
40915: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40916: LD_ADDR_VAR 0 4
40920: PUSH
40921: LD_VAR 0 2
40925: PUSH
40926: LD_INT 1
40928: ARRAY
40929: PPUSH
40930: LD_VAR 0 2
40934: PUSH
40935: LD_INT 2
40937: ARRAY
40938: PPUSH
40939: LD_VAR 0 2
40943: PUSH
40944: LD_INT 3
40946: ARRAY
40947: PPUSH
40948: LD_VAR 0 2
40952: PUSH
40953: LD_INT 4
40955: ARRAY
40956: PPUSH
40957: CALL_OW 449
40961: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40962: LD_ADDR_VAR 0 3
40966: PUSH
40967: LD_VAR 0 5
40971: PPUSH
40972: LD_INT 1
40974: PPUSH
40975: CALL_OW 275
40979: PUSH
40980: LD_VAR 0 4
40984: PUSH
40985: LD_INT 1
40987: ARRAY
40988: GREATEREQUAL
40989: PUSH
40990: LD_VAR 0 5
40994: PPUSH
40995: LD_INT 2
40997: PPUSH
40998: CALL_OW 275
41002: PUSH
41003: LD_VAR 0 4
41007: PUSH
41008: LD_INT 2
41010: ARRAY
41011: GREATEREQUAL
41012: AND
41013: PUSH
41014: LD_VAR 0 5
41018: PPUSH
41019: LD_INT 3
41021: PPUSH
41022: CALL_OW 275
41026: PUSH
41027: LD_VAR 0 4
41031: PUSH
41032: LD_INT 3
41034: ARRAY
41035: GREATEREQUAL
41036: AND
41037: ST_TO_ADDR
// end ;
41038: LD_VAR 0 3
41042: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41043: LD_INT 0
41045: PPUSH
41046: PPUSH
41047: PPUSH
41048: PPUSH
// pom := GetBase ( building ) ;
41049: LD_ADDR_VAR 0 3
41053: PUSH
41054: LD_VAR 0 1
41058: PPUSH
41059: CALL_OW 274
41063: ST_TO_ADDR
// if not pom then
41064: LD_VAR 0 3
41068: NOT
41069: IFFALSE 41073
// exit ;
41071: GO 41243
// btype := GetBType ( building ) ;
41073: LD_ADDR_VAR 0 5
41077: PUSH
41078: LD_VAR 0 1
41082: PPUSH
41083: CALL_OW 266
41087: ST_TO_ADDR
// if btype = b_armoury then
41088: LD_VAR 0 5
41092: PUSH
41093: LD_INT 4
41095: EQUAL
41096: IFFALSE 41106
// btype := b_barracks ;
41098: LD_ADDR_VAR 0 5
41102: PUSH
41103: LD_INT 5
41105: ST_TO_ADDR
// if btype = b_depot then
41106: LD_VAR 0 5
41110: PUSH
41111: LD_INT 0
41113: EQUAL
41114: IFFALSE 41124
// btype := b_warehouse ;
41116: LD_ADDR_VAR 0 5
41120: PUSH
41121: LD_INT 1
41123: ST_TO_ADDR
// if btype = b_workshop then
41124: LD_VAR 0 5
41128: PUSH
41129: LD_INT 2
41131: EQUAL
41132: IFFALSE 41142
// btype := b_factory ;
41134: LD_ADDR_VAR 0 5
41138: PUSH
41139: LD_INT 3
41141: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41142: LD_ADDR_VAR 0 4
41146: PUSH
41147: LD_VAR 0 5
41151: PPUSH
41152: LD_VAR 0 1
41156: PPUSH
41157: CALL_OW 248
41161: PPUSH
41162: CALL_OW 450
41166: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41167: LD_ADDR_VAR 0 2
41171: PUSH
41172: LD_VAR 0 3
41176: PPUSH
41177: LD_INT 1
41179: PPUSH
41180: CALL_OW 275
41184: PUSH
41185: LD_VAR 0 4
41189: PUSH
41190: LD_INT 1
41192: ARRAY
41193: GREATEREQUAL
41194: PUSH
41195: LD_VAR 0 3
41199: PPUSH
41200: LD_INT 2
41202: PPUSH
41203: CALL_OW 275
41207: PUSH
41208: LD_VAR 0 4
41212: PUSH
41213: LD_INT 2
41215: ARRAY
41216: GREATEREQUAL
41217: AND
41218: PUSH
41219: LD_VAR 0 3
41223: PPUSH
41224: LD_INT 3
41226: PPUSH
41227: CALL_OW 275
41231: PUSH
41232: LD_VAR 0 4
41236: PUSH
41237: LD_INT 3
41239: ARRAY
41240: GREATEREQUAL
41241: AND
41242: ST_TO_ADDR
// end ;
41243: LD_VAR 0 2
41247: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41248: LD_INT 0
41250: PPUSH
41251: PPUSH
41252: PPUSH
// pom := GetBase ( building ) ;
41253: LD_ADDR_VAR 0 4
41257: PUSH
41258: LD_VAR 0 1
41262: PPUSH
41263: CALL_OW 274
41267: ST_TO_ADDR
// if not pom then
41268: LD_VAR 0 4
41272: NOT
41273: IFFALSE 41277
// exit ;
41275: GO 41378
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41277: LD_ADDR_VAR 0 5
41281: PUSH
41282: LD_VAR 0 2
41286: PPUSH
41287: LD_VAR 0 1
41291: PPUSH
41292: CALL_OW 248
41296: PPUSH
41297: CALL_OW 450
41301: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41302: LD_ADDR_VAR 0 3
41306: PUSH
41307: LD_VAR 0 4
41311: PPUSH
41312: LD_INT 1
41314: PPUSH
41315: CALL_OW 275
41319: PUSH
41320: LD_VAR 0 5
41324: PUSH
41325: LD_INT 1
41327: ARRAY
41328: GREATEREQUAL
41329: PUSH
41330: LD_VAR 0 4
41334: PPUSH
41335: LD_INT 2
41337: PPUSH
41338: CALL_OW 275
41342: PUSH
41343: LD_VAR 0 5
41347: PUSH
41348: LD_INT 2
41350: ARRAY
41351: GREATEREQUAL
41352: AND
41353: PUSH
41354: LD_VAR 0 4
41358: PPUSH
41359: LD_INT 3
41361: PPUSH
41362: CALL_OW 275
41366: PUSH
41367: LD_VAR 0 5
41371: PUSH
41372: LD_INT 3
41374: ARRAY
41375: GREATEREQUAL
41376: AND
41377: ST_TO_ADDR
// end ;
41378: LD_VAR 0 3
41382: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41383: LD_INT 0
41385: PPUSH
41386: PPUSH
41387: PPUSH
41388: PPUSH
41389: PPUSH
41390: PPUSH
41391: PPUSH
41392: PPUSH
41393: PPUSH
41394: PPUSH
41395: PPUSH
// result := false ;
41396: LD_ADDR_VAR 0 8
41400: PUSH
41401: LD_INT 0
41403: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41404: LD_VAR 0 5
41408: NOT
41409: PUSH
41410: LD_VAR 0 1
41414: NOT
41415: OR
41416: PUSH
41417: LD_VAR 0 2
41421: NOT
41422: OR
41423: PUSH
41424: LD_VAR 0 3
41428: NOT
41429: OR
41430: IFFALSE 41434
// exit ;
41432: GO 42235
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41434: LD_ADDR_VAR 0 14
41438: PUSH
41439: LD_VAR 0 1
41443: PPUSH
41444: LD_VAR 0 2
41448: PPUSH
41449: LD_VAR 0 3
41453: PPUSH
41454: LD_VAR 0 4
41458: PPUSH
41459: LD_VAR 0 5
41463: PUSH
41464: LD_INT 1
41466: ARRAY
41467: PPUSH
41468: CALL_OW 248
41472: PPUSH
41473: LD_INT 0
41475: PPUSH
41476: CALL 43072 0 6
41480: ST_TO_ADDR
// if not hexes then
41481: LD_VAR 0 14
41485: NOT
41486: IFFALSE 41490
// exit ;
41488: GO 42235
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41490: LD_ADDR_VAR 0 17
41494: PUSH
41495: LD_VAR 0 5
41499: PPUSH
41500: LD_INT 22
41502: PUSH
41503: LD_VAR 0 13
41507: PPUSH
41508: CALL_OW 255
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: LD_INT 2
41519: PUSH
41520: LD_INT 30
41522: PUSH
41523: LD_INT 0
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: PUSH
41530: LD_INT 30
41532: PUSH
41533: LD_INT 1
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: LIST
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PPUSH
41549: CALL_OW 72
41553: ST_TO_ADDR
// for i = 1 to hexes do
41554: LD_ADDR_VAR 0 9
41558: PUSH
41559: DOUBLE
41560: LD_INT 1
41562: DEC
41563: ST_TO_ADDR
41564: LD_VAR 0 14
41568: PUSH
41569: FOR_TO
41570: IFFALSE 42233
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41572: LD_ADDR_VAR 0 13
41576: PUSH
41577: LD_VAR 0 14
41581: PUSH
41582: LD_VAR 0 9
41586: ARRAY
41587: PUSH
41588: LD_INT 1
41590: ARRAY
41591: PPUSH
41592: LD_VAR 0 14
41596: PUSH
41597: LD_VAR 0 9
41601: ARRAY
41602: PUSH
41603: LD_INT 2
41605: ARRAY
41606: PPUSH
41607: CALL_OW 428
41611: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41612: LD_VAR 0 14
41616: PUSH
41617: LD_VAR 0 9
41621: ARRAY
41622: PUSH
41623: LD_INT 1
41625: ARRAY
41626: PPUSH
41627: LD_VAR 0 14
41631: PUSH
41632: LD_VAR 0 9
41636: ARRAY
41637: PUSH
41638: LD_INT 2
41640: ARRAY
41641: PPUSH
41642: CALL_OW 351
41646: PUSH
41647: LD_VAR 0 14
41651: PUSH
41652: LD_VAR 0 9
41656: ARRAY
41657: PUSH
41658: LD_INT 1
41660: ARRAY
41661: PPUSH
41662: LD_VAR 0 14
41666: PUSH
41667: LD_VAR 0 9
41671: ARRAY
41672: PUSH
41673: LD_INT 2
41675: ARRAY
41676: PPUSH
41677: CALL_OW 488
41681: NOT
41682: OR
41683: PUSH
41684: LD_VAR 0 13
41688: PPUSH
41689: CALL_OW 247
41693: PUSH
41694: LD_INT 3
41696: EQUAL
41697: OR
41698: IFFALSE 41704
// exit ;
41700: POP
41701: POP
41702: GO 42235
// if not tmp then
41704: LD_VAR 0 13
41708: NOT
41709: IFFALSE 41713
// continue ;
41711: GO 41569
// result := true ;
41713: LD_ADDR_VAR 0 8
41717: PUSH
41718: LD_INT 1
41720: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41721: LD_VAR 0 13
41725: PPUSH
41726: CALL_OW 247
41730: PUSH
41731: LD_INT 2
41733: EQUAL
41734: PUSH
41735: LD_VAR 0 13
41739: PPUSH
41740: CALL_OW 263
41744: PUSH
41745: LD_INT 1
41747: EQUAL
41748: AND
41749: IFFALSE 41913
// begin if IsDrivenBy ( tmp ) then
41751: LD_VAR 0 13
41755: PPUSH
41756: CALL_OW 311
41760: IFFALSE 41764
// continue ;
41762: GO 41569
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41764: LD_VAR 0 6
41768: PPUSH
41769: LD_INT 3
41771: PUSH
41772: LD_INT 60
41774: PUSH
41775: EMPTY
41776: LIST
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 3
41784: PUSH
41785: LD_INT 55
41787: PUSH
41788: EMPTY
41789: LIST
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PPUSH
41799: CALL_OW 72
41803: IFFALSE 41911
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41805: LD_ADDR_VAR 0 18
41809: PUSH
41810: LD_VAR 0 6
41814: PPUSH
41815: LD_INT 3
41817: PUSH
41818: LD_INT 60
41820: PUSH
41821: EMPTY
41822: LIST
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 3
41830: PUSH
41831: LD_INT 55
41833: PUSH
41834: EMPTY
41835: LIST
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PPUSH
41845: CALL_OW 72
41849: PUSH
41850: LD_INT 1
41852: ARRAY
41853: ST_TO_ADDR
// if IsInUnit ( driver ) then
41854: LD_VAR 0 18
41858: PPUSH
41859: CALL_OW 310
41863: IFFALSE 41874
// ComExit ( driver ) ;
41865: LD_VAR 0 18
41869: PPUSH
41870: CALL 66256 0 1
// AddComEnterUnit ( driver , tmp ) ;
41874: LD_VAR 0 18
41878: PPUSH
41879: LD_VAR 0 13
41883: PPUSH
41884: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41888: LD_VAR 0 18
41892: PPUSH
41893: LD_VAR 0 7
41897: PPUSH
41898: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41902: LD_VAR 0 18
41906: PPUSH
41907: CALL_OW 181
// end ; continue ;
41911: GO 41569
// end ; if not tmp in cleaners then
41913: LD_VAR 0 13
41917: PUSH
41918: LD_VAR 0 6
41922: IN
41923: NOT
41924: IFFALSE 42231
// begin if dep then
41926: LD_VAR 0 17
41930: IFFALSE 42066
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41932: LD_ADDR_VAR 0 16
41936: PUSH
41937: LD_VAR 0 17
41941: PUSH
41942: LD_INT 1
41944: ARRAY
41945: PPUSH
41946: CALL_OW 250
41950: PPUSH
41951: LD_VAR 0 17
41955: PUSH
41956: LD_INT 1
41958: ARRAY
41959: PPUSH
41960: CALL_OW 254
41964: PPUSH
41965: LD_INT 5
41967: PPUSH
41968: CALL_OW 272
41972: PUSH
41973: LD_VAR 0 17
41977: PUSH
41978: LD_INT 1
41980: ARRAY
41981: PPUSH
41982: CALL_OW 251
41986: PPUSH
41987: LD_VAR 0 17
41991: PUSH
41992: LD_INT 1
41994: ARRAY
41995: PPUSH
41996: CALL_OW 254
42000: PPUSH
42001: LD_INT 5
42003: PPUSH
42004: CALL_OW 273
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42013: LD_VAR 0 16
42017: PUSH
42018: LD_INT 1
42020: ARRAY
42021: PPUSH
42022: LD_VAR 0 16
42026: PUSH
42027: LD_INT 2
42029: ARRAY
42030: PPUSH
42031: CALL_OW 488
42035: IFFALSE 42066
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42037: LD_VAR 0 13
42041: PPUSH
42042: LD_VAR 0 16
42046: PUSH
42047: LD_INT 1
42049: ARRAY
42050: PPUSH
42051: LD_VAR 0 16
42055: PUSH
42056: LD_INT 2
42058: ARRAY
42059: PPUSH
42060: CALL_OW 111
// continue ;
42064: GO 41569
// end ; end ; r := GetDir ( tmp ) ;
42066: LD_ADDR_VAR 0 15
42070: PUSH
42071: LD_VAR 0 13
42075: PPUSH
42076: CALL_OW 254
42080: ST_TO_ADDR
// if r = 5 then
42081: LD_VAR 0 15
42085: PUSH
42086: LD_INT 5
42088: EQUAL
42089: IFFALSE 42099
// r := 0 ;
42091: LD_ADDR_VAR 0 15
42095: PUSH
42096: LD_INT 0
42098: ST_TO_ADDR
// for j = r to 5 do
42099: LD_ADDR_VAR 0 10
42103: PUSH
42104: DOUBLE
42105: LD_VAR 0 15
42109: DEC
42110: ST_TO_ADDR
42111: LD_INT 5
42113: PUSH
42114: FOR_TO
42115: IFFALSE 42229
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42117: LD_ADDR_VAR 0 11
42121: PUSH
42122: LD_VAR 0 13
42126: PPUSH
42127: CALL_OW 250
42131: PPUSH
42132: LD_VAR 0 10
42136: PPUSH
42137: LD_INT 2
42139: PPUSH
42140: CALL_OW 272
42144: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42145: LD_ADDR_VAR 0 12
42149: PUSH
42150: LD_VAR 0 13
42154: PPUSH
42155: CALL_OW 251
42159: PPUSH
42160: LD_VAR 0 10
42164: PPUSH
42165: LD_INT 2
42167: PPUSH
42168: CALL_OW 273
42172: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42173: LD_VAR 0 11
42177: PPUSH
42178: LD_VAR 0 12
42182: PPUSH
42183: CALL_OW 488
42187: PUSH
42188: LD_VAR 0 11
42192: PPUSH
42193: LD_VAR 0 12
42197: PPUSH
42198: CALL_OW 428
42202: NOT
42203: AND
42204: IFFALSE 42227
// begin ComMoveXY ( tmp , _x , _y ) ;
42206: LD_VAR 0 13
42210: PPUSH
42211: LD_VAR 0 11
42215: PPUSH
42216: LD_VAR 0 12
42220: PPUSH
42221: CALL_OW 111
// break ;
42225: GO 42229
// end ; end ;
42227: GO 42114
42229: POP
42230: POP
// end ; end ;
42231: GO 41569
42233: POP
42234: POP
// end ;
42235: LD_VAR 0 8
42239: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
42240: LD_INT 0
42242: PPUSH
42243: PPUSH
42244: PPUSH
42245: PPUSH
42246: PPUSH
42247: PPUSH
42248: PPUSH
42249: PPUSH
42250: PPUSH
42251: PPUSH
// result := false ;
42252: LD_ADDR_VAR 0 6
42256: PUSH
42257: LD_INT 0
42259: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42260: LD_VAR 0 1
42264: NOT
42265: PUSH
42266: LD_VAR 0 1
42270: PPUSH
42271: CALL_OW 266
42275: PUSH
42276: LD_INT 0
42278: PUSH
42279: LD_INT 1
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: IN
42286: NOT
42287: OR
42288: PUSH
42289: LD_VAR 0 2
42293: NOT
42294: OR
42295: PUSH
42296: LD_VAR 0 5
42300: PUSH
42301: LD_INT 0
42303: PUSH
42304: LD_INT 1
42306: PUSH
42307: LD_INT 2
42309: PUSH
42310: LD_INT 3
42312: PUSH
42313: LD_INT 4
42315: PUSH
42316: LD_INT 5
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: IN
42327: NOT
42328: OR
42329: PUSH
42330: LD_VAR 0 3
42334: PPUSH
42335: LD_VAR 0 4
42339: PPUSH
42340: CALL_OW 488
42344: NOT
42345: OR
42346: IFFALSE 42350
// exit ;
42348: GO 43067
// pom := GetBase ( depot ) ;
42350: LD_ADDR_VAR 0 10
42354: PUSH
42355: LD_VAR 0 1
42359: PPUSH
42360: CALL_OW 274
42364: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42365: LD_ADDR_VAR 0 11
42369: PUSH
42370: LD_VAR 0 2
42374: PPUSH
42375: LD_VAR 0 1
42379: PPUSH
42380: CALL_OW 248
42384: PPUSH
42385: CALL_OW 450
42389: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42390: LD_VAR 0 10
42394: PPUSH
42395: LD_INT 1
42397: PPUSH
42398: CALL_OW 275
42402: PUSH
42403: LD_VAR 0 11
42407: PUSH
42408: LD_INT 1
42410: ARRAY
42411: GREATEREQUAL
42412: PUSH
42413: LD_VAR 0 10
42417: PPUSH
42418: LD_INT 2
42420: PPUSH
42421: CALL_OW 275
42425: PUSH
42426: LD_VAR 0 11
42430: PUSH
42431: LD_INT 2
42433: ARRAY
42434: GREATEREQUAL
42435: AND
42436: PUSH
42437: LD_VAR 0 10
42441: PPUSH
42442: LD_INT 3
42444: PPUSH
42445: CALL_OW 275
42449: PUSH
42450: LD_VAR 0 11
42454: PUSH
42455: LD_INT 3
42457: ARRAY
42458: GREATEREQUAL
42459: AND
42460: NOT
42461: IFFALSE 42465
// exit ;
42463: GO 43067
// if GetBType ( depot ) = b_depot then
42465: LD_VAR 0 1
42469: PPUSH
42470: CALL_OW 266
42474: PUSH
42475: LD_INT 0
42477: EQUAL
42478: IFFALSE 42490
// dist := 28 else
42480: LD_ADDR_VAR 0 14
42484: PUSH
42485: LD_INT 28
42487: ST_TO_ADDR
42488: GO 42498
// dist := 36 ;
42490: LD_ADDR_VAR 0 14
42494: PUSH
42495: LD_INT 36
42497: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42498: LD_VAR 0 1
42502: PPUSH
42503: LD_VAR 0 3
42507: PPUSH
42508: LD_VAR 0 4
42512: PPUSH
42513: CALL_OW 297
42517: PUSH
42518: LD_VAR 0 14
42522: GREATER
42523: IFFALSE 42527
// exit ;
42525: GO 43067
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42527: LD_ADDR_VAR 0 12
42531: PUSH
42532: LD_VAR 0 2
42536: PPUSH
42537: LD_VAR 0 3
42541: PPUSH
42542: LD_VAR 0 4
42546: PPUSH
42547: LD_VAR 0 5
42551: PPUSH
42552: LD_VAR 0 1
42556: PPUSH
42557: CALL_OW 248
42561: PPUSH
42562: LD_INT 0
42564: PPUSH
42565: CALL 43072 0 6
42569: ST_TO_ADDR
// if not hexes then
42570: LD_VAR 0 12
42574: NOT
42575: IFFALSE 42579
// exit ;
42577: GO 43067
// hex := GetHexInfo ( x , y ) ;
42579: LD_ADDR_VAR 0 15
42583: PUSH
42584: LD_VAR 0 3
42588: PPUSH
42589: LD_VAR 0 4
42593: PPUSH
42594: CALL_OW 546
42598: ST_TO_ADDR
// if hex [ 1 ] then
42599: LD_VAR 0 15
42603: PUSH
42604: LD_INT 1
42606: ARRAY
42607: IFFALSE 42611
// exit ;
42609: GO 43067
// height := hex [ 2 ] ;
42611: LD_ADDR_VAR 0 13
42615: PUSH
42616: LD_VAR 0 15
42620: PUSH
42621: LD_INT 2
42623: ARRAY
42624: ST_TO_ADDR
// for i = 1 to hexes do
42625: LD_ADDR_VAR 0 7
42629: PUSH
42630: DOUBLE
42631: LD_INT 1
42633: DEC
42634: ST_TO_ADDR
42635: LD_VAR 0 12
42639: PUSH
42640: FOR_TO
42641: IFFALSE 42971
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42643: LD_VAR 0 12
42647: PUSH
42648: LD_VAR 0 7
42652: ARRAY
42653: PUSH
42654: LD_INT 1
42656: ARRAY
42657: PPUSH
42658: LD_VAR 0 12
42662: PUSH
42663: LD_VAR 0 7
42667: ARRAY
42668: PUSH
42669: LD_INT 2
42671: ARRAY
42672: PPUSH
42673: CALL_OW 488
42677: NOT
42678: PUSH
42679: LD_VAR 0 12
42683: PUSH
42684: LD_VAR 0 7
42688: ARRAY
42689: PUSH
42690: LD_INT 1
42692: ARRAY
42693: PPUSH
42694: LD_VAR 0 12
42698: PUSH
42699: LD_VAR 0 7
42703: ARRAY
42704: PUSH
42705: LD_INT 2
42707: ARRAY
42708: PPUSH
42709: CALL_OW 428
42713: PUSH
42714: LD_INT 0
42716: GREATER
42717: OR
42718: PUSH
42719: LD_VAR 0 12
42723: PUSH
42724: LD_VAR 0 7
42728: ARRAY
42729: PUSH
42730: LD_INT 1
42732: ARRAY
42733: PPUSH
42734: LD_VAR 0 12
42738: PUSH
42739: LD_VAR 0 7
42743: ARRAY
42744: PUSH
42745: LD_INT 2
42747: ARRAY
42748: PPUSH
42749: CALL_OW 351
42753: OR
42754: IFFALSE 42760
// exit ;
42756: POP
42757: POP
42758: GO 43067
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42760: LD_ADDR_VAR 0 8
42764: PUSH
42765: LD_VAR 0 12
42769: PUSH
42770: LD_VAR 0 7
42774: ARRAY
42775: PUSH
42776: LD_INT 1
42778: ARRAY
42779: PPUSH
42780: LD_VAR 0 12
42784: PUSH
42785: LD_VAR 0 7
42789: ARRAY
42790: PUSH
42791: LD_INT 2
42793: ARRAY
42794: PPUSH
42795: CALL_OW 546
42799: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42800: LD_VAR 0 8
42804: PUSH
42805: LD_INT 1
42807: ARRAY
42808: PUSH
42809: LD_VAR 0 8
42813: PUSH
42814: LD_INT 2
42816: ARRAY
42817: PUSH
42818: LD_VAR 0 13
42822: PUSH
42823: LD_INT 2
42825: PLUS
42826: GREATER
42827: OR
42828: PUSH
42829: LD_VAR 0 8
42833: PUSH
42834: LD_INT 2
42836: ARRAY
42837: PUSH
42838: LD_VAR 0 13
42842: PUSH
42843: LD_INT 2
42845: MINUS
42846: LESS
42847: OR
42848: PUSH
42849: LD_VAR 0 8
42853: PUSH
42854: LD_INT 3
42856: ARRAY
42857: PUSH
42858: LD_INT 0
42860: PUSH
42861: LD_INT 8
42863: PUSH
42864: LD_INT 9
42866: PUSH
42867: LD_INT 10
42869: PUSH
42870: LD_INT 11
42872: PUSH
42873: LD_INT 12
42875: PUSH
42876: LD_INT 13
42878: PUSH
42879: LD_INT 16
42881: PUSH
42882: LD_INT 17
42884: PUSH
42885: LD_INT 18
42887: PUSH
42888: LD_INT 19
42890: PUSH
42891: LD_INT 20
42893: PUSH
42894: LD_INT 21
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: IN
42912: NOT
42913: OR
42914: PUSH
42915: LD_VAR 0 8
42919: PUSH
42920: LD_INT 5
42922: ARRAY
42923: NOT
42924: OR
42925: PUSH
42926: LD_VAR 0 8
42930: PUSH
42931: LD_INT 6
42933: ARRAY
42934: PUSH
42935: LD_INT 1
42937: PUSH
42938: LD_INT 2
42940: PUSH
42941: LD_INT 7
42943: PUSH
42944: LD_INT 9
42946: PUSH
42947: LD_INT 10
42949: PUSH
42950: LD_INT 11
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: IN
42961: NOT
42962: OR
42963: IFFALSE 42969
// exit ;
42965: POP
42966: POP
42967: GO 43067
// end ;
42969: GO 42640
42971: POP
42972: POP
// side := GetSide ( depot ) ;
42973: LD_ADDR_VAR 0 9
42977: PUSH
42978: LD_VAR 0 1
42982: PPUSH
42983: CALL_OW 255
42987: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42988: LD_VAR 0 9
42992: PPUSH
42993: LD_VAR 0 3
42997: PPUSH
42998: LD_VAR 0 4
43002: PPUSH
43003: LD_INT 20
43005: PPUSH
43006: CALL 35401 0 4
43010: PUSH
43011: LD_INT 4
43013: ARRAY
43014: IFFALSE 43018
// exit ;
43016: GO 43067
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43018: LD_VAR 0 2
43022: PUSH
43023: LD_INT 29
43025: PUSH
43026: LD_INT 30
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: IN
43033: PUSH
43034: LD_VAR 0 3
43038: PPUSH
43039: LD_VAR 0 4
43043: PPUSH
43044: LD_VAR 0 9
43048: PPUSH
43049: CALL_OW 440
43053: NOT
43054: AND
43055: IFFALSE 43059
// exit ;
43057: GO 43067
// result := true ;
43059: LD_ADDR_VAR 0 6
43063: PUSH
43064: LD_INT 1
43066: ST_TO_ADDR
// end ;
43067: LD_VAR 0 6
43071: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43072: LD_INT 0
43074: PPUSH
43075: PPUSH
43076: PPUSH
43077: PPUSH
43078: PPUSH
43079: PPUSH
43080: PPUSH
43081: PPUSH
43082: PPUSH
43083: PPUSH
43084: PPUSH
43085: PPUSH
43086: PPUSH
43087: PPUSH
43088: PPUSH
43089: PPUSH
43090: PPUSH
43091: PPUSH
43092: PPUSH
43093: PPUSH
43094: PPUSH
43095: PPUSH
43096: PPUSH
43097: PPUSH
43098: PPUSH
43099: PPUSH
43100: PPUSH
43101: PPUSH
43102: PPUSH
43103: PPUSH
43104: PPUSH
43105: PPUSH
43106: PPUSH
43107: PPUSH
43108: PPUSH
43109: PPUSH
43110: PPUSH
43111: PPUSH
43112: PPUSH
43113: PPUSH
43114: PPUSH
43115: PPUSH
43116: PPUSH
43117: PPUSH
43118: PPUSH
43119: PPUSH
43120: PPUSH
43121: PPUSH
43122: PPUSH
43123: PPUSH
43124: PPUSH
43125: PPUSH
43126: PPUSH
43127: PPUSH
43128: PPUSH
43129: PPUSH
43130: PPUSH
43131: PPUSH
// result = [ ] ;
43132: LD_ADDR_VAR 0 7
43136: PUSH
43137: EMPTY
43138: ST_TO_ADDR
// temp_list = [ ] ;
43139: LD_ADDR_VAR 0 9
43143: PUSH
43144: EMPTY
43145: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43146: LD_VAR 0 4
43150: PUSH
43151: LD_INT 0
43153: PUSH
43154: LD_INT 1
43156: PUSH
43157: LD_INT 2
43159: PUSH
43160: LD_INT 3
43162: PUSH
43163: LD_INT 4
43165: PUSH
43166: LD_INT 5
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: IN
43177: NOT
43178: PUSH
43179: LD_VAR 0 1
43183: PUSH
43184: LD_INT 0
43186: PUSH
43187: LD_INT 1
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: IN
43194: PUSH
43195: LD_VAR 0 5
43199: PUSH
43200: LD_INT 1
43202: PUSH
43203: LD_INT 2
43205: PUSH
43206: LD_INT 3
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: LIST
43213: IN
43214: NOT
43215: AND
43216: OR
43217: IFFALSE 43221
// exit ;
43219: GO 61612
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43221: LD_VAR 0 1
43225: PUSH
43226: LD_INT 6
43228: PUSH
43229: LD_INT 7
43231: PUSH
43232: LD_INT 8
43234: PUSH
43235: LD_INT 13
43237: PUSH
43238: LD_INT 12
43240: PUSH
43241: LD_INT 15
43243: PUSH
43244: LD_INT 11
43246: PUSH
43247: LD_INT 14
43249: PUSH
43250: LD_INT 10
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: LIST
43263: IN
43264: IFFALSE 43274
// btype = b_lab ;
43266: LD_ADDR_VAR 0 1
43270: PUSH
43271: LD_INT 6
43273: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43274: LD_VAR 0 6
43278: PUSH
43279: LD_INT 0
43281: PUSH
43282: LD_INT 1
43284: PUSH
43285: LD_INT 2
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: LIST
43292: IN
43293: NOT
43294: PUSH
43295: LD_VAR 0 1
43299: PUSH
43300: LD_INT 0
43302: PUSH
43303: LD_INT 1
43305: PUSH
43306: LD_INT 2
43308: PUSH
43309: LD_INT 3
43311: PUSH
43312: LD_INT 6
43314: PUSH
43315: LD_INT 36
43317: PUSH
43318: LD_INT 4
43320: PUSH
43321: LD_INT 5
43323: PUSH
43324: LD_INT 31
43326: PUSH
43327: LD_INT 32
43329: PUSH
43330: LD_INT 33
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: IN
43346: NOT
43347: PUSH
43348: LD_VAR 0 6
43352: PUSH
43353: LD_INT 1
43355: EQUAL
43356: AND
43357: OR
43358: PUSH
43359: LD_VAR 0 1
43363: PUSH
43364: LD_INT 2
43366: PUSH
43367: LD_INT 3
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: IN
43374: NOT
43375: PUSH
43376: LD_VAR 0 6
43380: PUSH
43381: LD_INT 2
43383: EQUAL
43384: AND
43385: OR
43386: IFFALSE 43396
// mode = 0 ;
43388: LD_ADDR_VAR 0 6
43392: PUSH
43393: LD_INT 0
43395: ST_TO_ADDR
// case mode of 0 :
43396: LD_VAR 0 6
43400: PUSH
43401: LD_INT 0
43403: DOUBLE
43404: EQUAL
43405: IFTRUE 43409
43407: GO 54862
43409: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43410: LD_ADDR_VAR 0 11
43414: PUSH
43415: LD_INT 0
43417: PUSH
43418: LD_INT 0
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 0
43427: PUSH
43428: LD_INT 1
43430: NEG
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 1
43438: PUSH
43439: LD_INT 0
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 1
43448: PUSH
43449: LD_INT 1
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 0
43458: PUSH
43459: LD_INT 1
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: LD_INT 1
43468: NEG
43469: PUSH
43470: LD_INT 0
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 1
43479: NEG
43480: PUSH
43481: LD_INT 1
43483: NEG
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 1
43491: NEG
43492: PUSH
43493: LD_INT 2
43495: NEG
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 0
43503: PUSH
43504: LD_INT 2
43506: NEG
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 1
43514: PUSH
43515: LD_INT 1
43517: NEG
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 1
43525: PUSH
43526: LD_INT 2
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 0
43535: PUSH
43536: LD_INT 2
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 1
43545: NEG
43546: PUSH
43547: LD_INT 1
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 1
43556: PUSH
43557: LD_INT 3
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 0
43566: PUSH
43567: LD_INT 3
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 1
43576: NEG
43577: PUSH
43578: LD_INT 2
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43603: LD_ADDR_VAR 0 12
43607: PUSH
43608: LD_INT 0
43610: PUSH
43611: LD_INT 0
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 0
43620: PUSH
43621: LD_INT 1
43623: NEG
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 1
43631: PUSH
43632: LD_INT 0
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 1
43641: PUSH
43642: LD_INT 1
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 0
43651: PUSH
43652: LD_INT 1
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 1
43661: NEG
43662: PUSH
43663: LD_INT 0
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 1
43672: NEG
43673: PUSH
43674: LD_INT 1
43676: NEG
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 1
43684: PUSH
43685: LD_INT 1
43687: NEG
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 2
43695: PUSH
43696: LD_INT 0
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 2
43705: PUSH
43706: LD_INT 1
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 1
43715: NEG
43716: PUSH
43717: LD_INT 1
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 2
43726: NEG
43727: PUSH
43728: LD_INT 0
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 2
43737: NEG
43738: PUSH
43739: LD_INT 1
43741: NEG
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: LD_INT 2
43749: NEG
43750: PUSH
43751: LD_INT 1
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: LD_INT 3
43760: NEG
43761: PUSH
43762: LD_INT 0
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 3
43771: NEG
43772: PUSH
43773: LD_INT 1
43775: NEG
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43799: LD_ADDR_VAR 0 13
43803: PUSH
43804: LD_INT 0
43806: PUSH
43807: LD_INT 0
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 0
43816: PUSH
43817: LD_INT 1
43819: NEG
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 1
43827: PUSH
43828: LD_INT 0
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 1
43837: PUSH
43838: LD_INT 1
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 0
43847: PUSH
43848: LD_INT 1
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 1
43857: NEG
43858: PUSH
43859: LD_INT 0
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 1
43868: NEG
43869: PUSH
43870: LD_INT 1
43872: NEG
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 1
43880: NEG
43881: PUSH
43882: LD_INT 2
43884: NEG
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 2
43892: PUSH
43893: LD_INT 1
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 2
43902: PUSH
43903: LD_INT 2
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 1
43912: PUSH
43913: LD_INT 2
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: PUSH
43920: LD_INT 2
43922: NEG
43923: PUSH
43924: LD_INT 1
43926: NEG
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 2
43934: NEG
43935: PUSH
43936: LD_INT 2
43938: NEG
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 2
43946: NEG
43947: PUSH
43948: LD_INT 3
43950: NEG
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 3
43958: NEG
43959: PUSH
43960: LD_INT 2
43962: NEG
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 3
43970: NEG
43971: PUSH
43972: LD_INT 3
43974: NEG
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43998: LD_ADDR_VAR 0 14
44002: PUSH
44003: LD_INT 0
44005: PUSH
44006: LD_INT 0
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 0
44015: PUSH
44016: LD_INT 1
44018: NEG
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 1
44026: PUSH
44027: LD_INT 0
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 1
44036: PUSH
44037: LD_INT 1
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 0
44046: PUSH
44047: LD_INT 1
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 1
44056: NEG
44057: PUSH
44058: LD_INT 0
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 1
44067: NEG
44068: PUSH
44069: LD_INT 1
44071: NEG
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 1
44079: NEG
44080: PUSH
44081: LD_INT 2
44083: NEG
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 0
44091: PUSH
44092: LD_INT 2
44094: NEG
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 1
44102: PUSH
44103: LD_INT 1
44105: NEG
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 1
44113: PUSH
44114: LD_INT 2
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 0
44123: PUSH
44124: LD_INT 2
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 1
44133: NEG
44134: PUSH
44135: LD_INT 1
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: LD_INT 1
44144: NEG
44145: PUSH
44146: LD_INT 3
44148: NEG
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: PUSH
44154: LD_INT 0
44156: PUSH
44157: LD_INT 3
44159: NEG
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PUSH
44165: LD_INT 1
44167: PUSH
44168: LD_INT 2
44170: NEG
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44194: LD_ADDR_VAR 0 15
44198: PUSH
44199: LD_INT 0
44201: PUSH
44202: LD_INT 0
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 0
44211: PUSH
44212: LD_INT 1
44214: NEG
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 1
44222: PUSH
44223: LD_INT 0
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 1
44232: PUSH
44233: LD_INT 1
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 0
44242: PUSH
44243: LD_INT 1
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 1
44252: NEG
44253: PUSH
44254: LD_INT 0
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 1
44263: NEG
44264: PUSH
44265: LD_INT 1
44267: NEG
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 1
44275: PUSH
44276: LD_INT 1
44278: NEG
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 2
44286: PUSH
44287: LD_INT 0
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 2
44296: PUSH
44297: LD_INT 1
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 1
44306: NEG
44307: PUSH
44308: LD_INT 1
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 2
44317: NEG
44318: PUSH
44319: LD_INT 0
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 2
44328: NEG
44329: PUSH
44330: LD_INT 1
44332: NEG
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 2
44340: PUSH
44341: LD_INT 1
44343: NEG
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 3
44351: PUSH
44352: LD_INT 0
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: LD_INT 3
44361: PUSH
44362: LD_INT 1
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44387: LD_ADDR_VAR 0 16
44391: PUSH
44392: LD_INT 0
44394: PUSH
44395: LD_INT 0
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 0
44404: PUSH
44405: LD_INT 1
44407: NEG
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 1
44415: PUSH
44416: LD_INT 0
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 1
44425: PUSH
44426: LD_INT 1
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 0
44435: PUSH
44436: LD_INT 1
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 1
44445: NEG
44446: PUSH
44447: LD_INT 0
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 1
44456: NEG
44457: PUSH
44458: LD_INT 1
44460: NEG
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 1
44468: NEG
44469: PUSH
44470: LD_INT 2
44472: NEG
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 2
44480: PUSH
44481: LD_INT 1
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 2
44490: PUSH
44491: LD_INT 2
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 1
44500: PUSH
44501: LD_INT 2
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 2
44510: NEG
44511: PUSH
44512: LD_INT 1
44514: NEG
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 2
44522: NEG
44523: PUSH
44524: LD_INT 2
44526: NEG
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 3
44534: PUSH
44535: LD_INT 2
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 3
44544: PUSH
44545: LD_INT 3
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: LD_INT 2
44554: PUSH
44555: LD_INT 3
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: LIST
44579: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44580: LD_ADDR_VAR 0 17
44584: PUSH
44585: LD_INT 0
44587: PUSH
44588: LD_INT 0
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 0
44597: PUSH
44598: LD_INT 1
44600: NEG
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 1
44608: PUSH
44609: LD_INT 0
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 1
44618: PUSH
44619: LD_INT 1
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 0
44628: PUSH
44629: LD_INT 1
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 1
44638: NEG
44639: PUSH
44640: LD_INT 0
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 1
44649: NEG
44650: PUSH
44651: LD_INT 1
44653: NEG
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 1
44661: NEG
44662: PUSH
44663: LD_INT 2
44665: NEG
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 0
44673: PUSH
44674: LD_INT 2
44676: NEG
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 1
44684: PUSH
44685: LD_INT 1
44687: NEG
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 2
44695: PUSH
44696: LD_INT 0
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 2
44705: PUSH
44706: LD_INT 1
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 2
44715: PUSH
44716: LD_INT 2
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 1
44725: PUSH
44726: LD_INT 2
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 0
44735: PUSH
44736: LD_INT 2
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 1
44745: NEG
44746: PUSH
44747: LD_INT 1
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 2
44756: NEG
44757: PUSH
44758: LD_INT 0
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 2
44767: NEG
44768: PUSH
44769: LD_INT 1
44771: NEG
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 2
44779: NEG
44780: PUSH
44781: LD_INT 2
44783: NEG
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44810: LD_ADDR_VAR 0 18
44814: PUSH
44815: LD_INT 0
44817: PUSH
44818: LD_INT 0
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 0
44827: PUSH
44828: LD_INT 1
44830: NEG
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 1
44838: PUSH
44839: LD_INT 0
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 1
44848: PUSH
44849: LD_INT 1
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 0
44858: PUSH
44859: LD_INT 1
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 1
44868: NEG
44869: PUSH
44870: LD_INT 0
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 1
44879: NEG
44880: PUSH
44881: LD_INT 1
44883: NEG
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 1
44891: NEG
44892: PUSH
44893: LD_INT 2
44895: NEG
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 0
44903: PUSH
44904: LD_INT 2
44906: NEG
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 1
44914: PUSH
44915: LD_INT 1
44917: NEG
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 2
44925: PUSH
44926: LD_INT 0
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 2
44935: PUSH
44936: LD_INT 1
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 2
44945: PUSH
44946: LD_INT 2
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 1
44955: PUSH
44956: LD_INT 2
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 0
44965: PUSH
44966: LD_INT 2
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 1
44975: NEG
44976: PUSH
44977: LD_INT 1
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 2
44986: NEG
44987: PUSH
44988: LD_INT 0
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 2
44997: NEG
44998: PUSH
44999: LD_INT 1
45001: NEG
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 2
45009: NEG
45010: PUSH
45011: LD_INT 2
45013: NEG
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: LIST
45025: LIST
45026: LIST
45027: LIST
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45040: LD_ADDR_VAR 0 19
45044: PUSH
45045: LD_INT 0
45047: PUSH
45048: LD_INT 0
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 0
45057: PUSH
45058: LD_INT 1
45060: NEG
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 1
45068: PUSH
45069: LD_INT 0
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 1
45078: PUSH
45079: LD_INT 1
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 0
45088: PUSH
45089: LD_INT 1
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 1
45098: NEG
45099: PUSH
45100: LD_INT 0
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 1
45109: NEG
45110: PUSH
45111: LD_INT 1
45113: NEG
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 1
45121: NEG
45122: PUSH
45123: LD_INT 2
45125: NEG
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 0
45133: PUSH
45134: LD_INT 2
45136: NEG
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 1
45144: PUSH
45145: LD_INT 1
45147: NEG
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 2
45155: PUSH
45156: LD_INT 0
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 2
45165: PUSH
45166: LD_INT 1
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 2
45175: PUSH
45176: LD_INT 2
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 1
45185: PUSH
45186: LD_INT 2
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 0
45195: PUSH
45196: LD_INT 2
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 1
45205: NEG
45206: PUSH
45207: LD_INT 1
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 2
45216: NEG
45217: PUSH
45218: LD_INT 0
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 2
45227: NEG
45228: PUSH
45229: LD_INT 1
45231: NEG
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 2
45239: NEG
45240: PUSH
45241: LD_INT 2
45243: NEG
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45270: LD_ADDR_VAR 0 20
45274: PUSH
45275: LD_INT 0
45277: PUSH
45278: LD_INT 0
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 0
45287: PUSH
45288: LD_INT 1
45290: NEG
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 1
45298: PUSH
45299: LD_INT 0
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 1
45308: PUSH
45309: LD_INT 1
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 0
45318: PUSH
45319: LD_INT 1
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 1
45328: NEG
45329: PUSH
45330: LD_INT 0
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 1
45339: NEG
45340: PUSH
45341: LD_INT 1
45343: NEG
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 1
45351: NEG
45352: PUSH
45353: LD_INT 2
45355: NEG
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 0
45363: PUSH
45364: LD_INT 2
45366: NEG
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 1
45374: PUSH
45375: LD_INT 1
45377: NEG
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 2
45385: PUSH
45386: LD_INT 0
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PUSH
45393: LD_INT 2
45395: PUSH
45396: LD_INT 1
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 2
45405: PUSH
45406: LD_INT 2
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 1
45415: PUSH
45416: LD_INT 2
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 0
45425: PUSH
45426: LD_INT 2
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 1
45435: NEG
45436: PUSH
45437: LD_INT 1
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 2
45446: NEG
45447: PUSH
45448: LD_INT 0
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 2
45457: NEG
45458: PUSH
45459: LD_INT 1
45461: NEG
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 2
45469: NEG
45470: PUSH
45471: LD_INT 2
45473: NEG
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45500: LD_ADDR_VAR 0 21
45504: PUSH
45505: LD_INT 0
45507: PUSH
45508: LD_INT 0
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 0
45517: PUSH
45518: LD_INT 1
45520: NEG
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 1
45528: PUSH
45529: LD_INT 0
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 1
45538: PUSH
45539: LD_INT 1
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 0
45548: PUSH
45549: LD_INT 1
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 1
45558: NEG
45559: PUSH
45560: LD_INT 0
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 1
45569: NEG
45570: PUSH
45571: LD_INT 1
45573: NEG
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 1
45581: NEG
45582: PUSH
45583: LD_INT 2
45585: NEG
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 0
45593: PUSH
45594: LD_INT 2
45596: NEG
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 1
45604: PUSH
45605: LD_INT 1
45607: NEG
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 2
45615: PUSH
45616: LD_INT 0
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 2
45625: PUSH
45626: LD_INT 1
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 2
45635: PUSH
45636: LD_INT 2
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 1
45645: PUSH
45646: LD_INT 2
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 0
45655: PUSH
45656: LD_INT 2
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 1
45665: NEG
45666: PUSH
45667: LD_INT 1
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 2
45676: NEG
45677: PUSH
45678: LD_INT 0
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 2
45687: NEG
45688: PUSH
45689: LD_INT 1
45691: NEG
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 2
45699: NEG
45700: PUSH
45701: LD_INT 2
45703: NEG
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45730: LD_ADDR_VAR 0 22
45734: PUSH
45735: LD_INT 0
45737: PUSH
45738: LD_INT 0
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 0
45747: PUSH
45748: LD_INT 1
45750: NEG
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 1
45758: PUSH
45759: LD_INT 0
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 1
45768: PUSH
45769: LD_INT 1
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 0
45778: PUSH
45779: LD_INT 1
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 1
45788: NEG
45789: PUSH
45790: LD_INT 0
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 1
45799: NEG
45800: PUSH
45801: LD_INT 1
45803: NEG
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 1
45811: NEG
45812: PUSH
45813: LD_INT 2
45815: NEG
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 0
45823: PUSH
45824: LD_INT 2
45826: NEG
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 1
45834: PUSH
45835: LD_INT 1
45837: NEG
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 2
45845: PUSH
45846: LD_INT 0
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 2
45855: PUSH
45856: LD_INT 1
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 2
45865: PUSH
45866: LD_INT 2
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 1
45875: PUSH
45876: LD_INT 2
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 0
45885: PUSH
45886: LD_INT 2
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 1
45895: NEG
45896: PUSH
45897: LD_INT 1
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 2
45906: NEG
45907: PUSH
45908: LD_INT 0
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 2
45917: NEG
45918: PUSH
45919: LD_INT 1
45921: NEG
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 2
45929: NEG
45930: PUSH
45931: LD_INT 2
45933: NEG
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45960: LD_ADDR_VAR 0 23
45964: PUSH
45965: LD_INT 0
45967: PUSH
45968: LD_INT 0
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 0
45977: PUSH
45978: LD_INT 1
45980: NEG
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 1
45988: PUSH
45989: LD_INT 0
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 1
45998: PUSH
45999: LD_INT 1
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 0
46008: PUSH
46009: LD_INT 1
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 1
46018: NEG
46019: PUSH
46020: LD_INT 0
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 1
46029: NEG
46030: PUSH
46031: LD_INT 1
46033: NEG
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 1
46041: NEG
46042: PUSH
46043: LD_INT 2
46045: NEG
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 0
46053: PUSH
46054: LD_INT 2
46056: NEG
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 1
46064: PUSH
46065: LD_INT 1
46067: NEG
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 2
46075: PUSH
46076: LD_INT 0
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 2
46085: PUSH
46086: LD_INT 1
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 2
46095: PUSH
46096: LD_INT 2
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 1
46105: PUSH
46106: LD_INT 2
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 0
46115: PUSH
46116: LD_INT 2
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 1
46125: NEG
46126: PUSH
46127: LD_INT 1
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 2
46136: NEG
46137: PUSH
46138: LD_INT 0
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 2
46147: NEG
46148: PUSH
46149: LD_INT 1
46151: NEG
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 2
46159: NEG
46160: PUSH
46161: LD_INT 2
46163: NEG
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 2
46171: NEG
46172: PUSH
46173: LD_INT 3
46175: NEG
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 1
46183: NEG
46184: PUSH
46185: LD_INT 3
46187: NEG
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 1
46195: PUSH
46196: LD_INT 2
46198: NEG
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 2
46206: PUSH
46207: LD_INT 1
46209: NEG
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46240: LD_ADDR_VAR 0 24
46244: PUSH
46245: LD_INT 0
46247: PUSH
46248: LD_INT 0
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 0
46257: PUSH
46258: LD_INT 1
46260: NEG
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 1
46268: PUSH
46269: LD_INT 0
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 1
46278: PUSH
46279: LD_INT 1
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 0
46288: PUSH
46289: LD_INT 1
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 1
46298: NEG
46299: PUSH
46300: LD_INT 0
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 1
46309: NEG
46310: PUSH
46311: LD_INT 1
46313: NEG
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 1
46321: NEG
46322: PUSH
46323: LD_INT 2
46325: NEG
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 0
46333: PUSH
46334: LD_INT 2
46336: NEG
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 1
46344: PUSH
46345: LD_INT 1
46347: NEG
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 2
46355: PUSH
46356: LD_INT 0
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 2
46365: PUSH
46366: LD_INT 1
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 2
46375: PUSH
46376: LD_INT 2
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 1
46385: PUSH
46386: LD_INT 2
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 0
46395: PUSH
46396: LD_INT 2
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 1
46405: NEG
46406: PUSH
46407: LD_INT 1
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 2
46416: NEG
46417: PUSH
46418: LD_INT 0
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 2
46427: NEG
46428: PUSH
46429: LD_INT 1
46431: NEG
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 2
46439: NEG
46440: PUSH
46441: LD_INT 2
46443: NEG
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 1
46451: PUSH
46452: LD_INT 2
46454: NEG
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 2
46462: PUSH
46463: LD_INT 1
46465: NEG
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 3
46473: PUSH
46474: LD_INT 1
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 3
46483: PUSH
46484: LD_INT 2
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46516: LD_ADDR_VAR 0 25
46520: PUSH
46521: LD_INT 0
46523: PUSH
46524: LD_INT 0
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 0
46533: PUSH
46534: LD_INT 1
46536: NEG
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 1
46544: PUSH
46545: LD_INT 0
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 1
46554: PUSH
46555: LD_INT 1
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 0
46564: PUSH
46565: LD_INT 1
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 1
46574: NEG
46575: PUSH
46576: LD_INT 0
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 1
46585: NEG
46586: PUSH
46587: LD_INT 1
46589: NEG
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 1
46597: NEG
46598: PUSH
46599: LD_INT 2
46601: NEG
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 0
46609: PUSH
46610: LD_INT 2
46612: NEG
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 1
46620: PUSH
46621: LD_INT 1
46623: NEG
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 2
46631: PUSH
46632: LD_INT 0
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 2
46641: PUSH
46642: LD_INT 1
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 2
46651: PUSH
46652: LD_INT 2
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 1
46661: PUSH
46662: LD_INT 2
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 0
46671: PUSH
46672: LD_INT 2
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 1
46681: NEG
46682: PUSH
46683: LD_INT 1
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 2
46692: NEG
46693: PUSH
46694: LD_INT 0
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 2
46703: NEG
46704: PUSH
46705: LD_INT 1
46707: NEG
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 2
46715: NEG
46716: PUSH
46717: LD_INT 2
46719: NEG
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 3
46727: PUSH
46728: LD_INT 1
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 3
46737: PUSH
46738: LD_INT 2
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 2
46747: PUSH
46748: LD_INT 3
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 1
46757: PUSH
46758: LD_INT 3
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46790: LD_ADDR_VAR 0 26
46794: PUSH
46795: LD_INT 0
46797: PUSH
46798: LD_INT 0
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 0
46807: PUSH
46808: LD_INT 1
46810: NEG
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 1
46818: PUSH
46819: LD_INT 0
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 1
46828: PUSH
46829: LD_INT 1
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 0
46838: PUSH
46839: LD_INT 1
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 1
46848: NEG
46849: PUSH
46850: LD_INT 0
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 1
46859: NEG
46860: PUSH
46861: LD_INT 1
46863: NEG
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 1
46871: NEG
46872: PUSH
46873: LD_INT 2
46875: NEG
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 0
46883: PUSH
46884: LD_INT 2
46886: NEG
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 1
46894: PUSH
46895: LD_INT 1
46897: NEG
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 2
46905: PUSH
46906: LD_INT 0
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 2
46915: PUSH
46916: LD_INT 1
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 2
46925: PUSH
46926: LD_INT 2
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 1
46935: PUSH
46936: LD_INT 2
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 0
46945: PUSH
46946: LD_INT 2
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 1
46955: NEG
46956: PUSH
46957: LD_INT 1
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 2
46966: NEG
46967: PUSH
46968: LD_INT 0
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 2
46977: NEG
46978: PUSH
46979: LD_INT 1
46981: NEG
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 2
46989: NEG
46990: PUSH
46991: LD_INT 2
46993: NEG
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 2
47001: PUSH
47002: LD_INT 3
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 1
47011: PUSH
47012: LD_INT 3
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 1
47021: NEG
47022: PUSH
47023: LD_INT 2
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 2
47032: NEG
47033: PUSH
47034: LD_INT 1
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47066: LD_ADDR_VAR 0 27
47070: PUSH
47071: LD_INT 0
47073: PUSH
47074: LD_INT 0
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 0
47083: PUSH
47084: LD_INT 1
47086: NEG
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 1
47094: PUSH
47095: LD_INT 0
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 1
47104: PUSH
47105: LD_INT 1
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 0
47114: PUSH
47115: LD_INT 1
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 1
47124: NEG
47125: PUSH
47126: LD_INT 0
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 1
47135: NEG
47136: PUSH
47137: LD_INT 1
47139: NEG
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 1
47147: NEG
47148: PUSH
47149: LD_INT 2
47151: NEG
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 0
47159: PUSH
47160: LD_INT 2
47162: NEG
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 1
47170: PUSH
47171: LD_INT 1
47173: NEG
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 2
47181: PUSH
47182: LD_INT 0
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 2
47191: PUSH
47192: LD_INT 1
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 2
47201: PUSH
47202: LD_INT 2
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 1
47211: PUSH
47212: LD_INT 2
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 0
47221: PUSH
47222: LD_INT 2
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 1
47231: NEG
47232: PUSH
47233: LD_INT 1
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 2
47242: NEG
47243: PUSH
47244: LD_INT 0
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 2
47253: NEG
47254: PUSH
47255: LD_INT 1
47257: NEG
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 2
47265: NEG
47266: PUSH
47267: LD_INT 2
47269: NEG
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 1
47277: NEG
47278: PUSH
47279: LD_INT 2
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 2
47288: NEG
47289: PUSH
47290: LD_INT 1
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 3
47299: NEG
47300: PUSH
47301: LD_INT 1
47303: NEG
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 3
47311: NEG
47312: PUSH
47313: LD_INT 2
47315: NEG
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47346: LD_ADDR_VAR 0 28
47350: PUSH
47351: LD_INT 0
47353: PUSH
47354: LD_INT 0
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 0
47363: PUSH
47364: LD_INT 1
47366: NEG
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 1
47374: PUSH
47375: LD_INT 0
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 1
47384: PUSH
47385: LD_INT 1
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 0
47394: PUSH
47395: LD_INT 1
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 1
47404: NEG
47405: PUSH
47406: LD_INT 0
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 1
47415: NEG
47416: PUSH
47417: LD_INT 1
47419: NEG
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 1
47427: NEG
47428: PUSH
47429: LD_INT 2
47431: NEG
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 0
47439: PUSH
47440: LD_INT 2
47442: NEG
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 1
47450: PUSH
47451: LD_INT 1
47453: NEG
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 2
47461: PUSH
47462: LD_INT 0
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 2
47471: PUSH
47472: LD_INT 1
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 2
47481: PUSH
47482: LD_INT 2
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 1
47491: PUSH
47492: LD_INT 2
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 0
47501: PUSH
47502: LD_INT 2
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 1
47511: NEG
47512: PUSH
47513: LD_INT 1
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 2
47522: NEG
47523: PUSH
47524: LD_INT 0
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 2
47533: NEG
47534: PUSH
47535: LD_INT 1
47537: NEG
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 2
47545: NEG
47546: PUSH
47547: LD_INT 2
47549: NEG
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 2
47557: NEG
47558: PUSH
47559: LD_INT 3
47561: NEG
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 1
47569: NEG
47570: PUSH
47571: LD_INT 3
47573: NEG
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 3
47581: NEG
47582: PUSH
47583: LD_INT 1
47585: NEG
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 3
47593: NEG
47594: PUSH
47595: LD_INT 2
47597: NEG
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47628: LD_ADDR_VAR 0 29
47632: PUSH
47633: LD_INT 0
47635: PUSH
47636: LD_INT 0
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 0
47645: PUSH
47646: LD_INT 1
47648: NEG
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 1
47656: PUSH
47657: LD_INT 0
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 1
47666: PUSH
47667: LD_INT 1
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 0
47676: PUSH
47677: LD_INT 1
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 1
47686: NEG
47687: PUSH
47688: LD_INT 0
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 1
47697: NEG
47698: PUSH
47699: LD_INT 1
47701: NEG
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 1
47709: NEG
47710: PUSH
47711: LD_INT 2
47713: NEG
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 0
47721: PUSH
47722: LD_INT 2
47724: NEG
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 1
47732: PUSH
47733: LD_INT 1
47735: NEG
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 2
47743: PUSH
47744: LD_INT 0
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 2
47753: PUSH
47754: LD_INT 1
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 1
47763: PUSH
47764: LD_INT 2
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 0
47773: PUSH
47774: LD_INT 2
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 1
47783: NEG
47784: PUSH
47785: LD_INT 1
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 2
47794: NEG
47795: PUSH
47796: LD_INT 1
47798: NEG
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 2
47806: NEG
47807: PUSH
47808: LD_INT 2
47810: NEG
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 2
47818: NEG
47819: PUSH
47820: LD_INT 3
47822: NEG
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 2
47830: PUSH
47831: LD_INT 1
47833: NEG
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 3
47841: PUSH
47842: LD_INT 1
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 1
47851: PUSH
47852: LD_INT 3
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 1
47861: NEG
47862: PUSH
47863: LD_INT 2
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 3
47872: NEG
47873: PUSH
47874: LD_INT 2
47876: NEG
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47907: LD_ADDR_VAR 0 30
47911: PUSH
47912: LD_INT 0
47914: PUSH
47915: LD_INT 0
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 0
47924: PUSH
47925: LD_INT 1
47927: NEG
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 1
47935: PUSH
47936: LD_INT 0
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 1
47945: PUSH
47946: LD_INT 1
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 0
47955: PUSH
47956: LD_INT 1
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 1
47965: NEG
47966: PUSH
47967: LD_INT 0
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 1
47976: NEG
47977: PUSH
47978: LD_INT 1
47980: NEG
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 1
47988: NEG
47989: PUSH
47990: LD_INT 2
47992: NEG
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 0
48000: PUSH
48001: LD_INT 2
48003: NEG
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 1
48011: PUSH
48012: LD_INT 1
48014: NEG
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 2
48022: PUSH
48023: LD_INT 0
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 2
48032: PUSH
48033: LD_INT 1
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 2
48042: PUSH
48043: LD_INT 2
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 1
48052: PUSH
48053: LD_INT 2
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 1
48062: NEG
48063: PUSH
48064: LD_INT 1
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 2
48073: NEG
48074: PUSH
48075: LD_INT 0
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 2
48084: NEG
48085: PUSH
48086: LD_INT 1
48088: NEG
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 1
48096: NEG
48097: PUSH
48098: LD_INT 3
48100: NEG
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 1
48108: PUSH
48109: LD_INT 2
48111: NEG
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 3
48119: PUSH
48120: LD_INT 2
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 2
48129: PUSH
48130: LD_INT 3
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 2
48139: NEG
48140: PUSH
48141: LD_INT 1
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 3
48150: NEG
48151: PUSH
48152: LD_INT 1
48154: NEG
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48185: LD_ADDR_VAR 0 31
48189: PUSH
48190: LD_INT 0
48192: PUSH
48193: LD_INT 0
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 0
48202: PUSH
48203: LD_INT 1
48205: NEG
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 1
48213: PUSH
48214: LD_INT 0
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 1
48223: PUSH
48224: LD_INT 1
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 0
48233: PUSH
48234: LD_INT 1
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 1
48243: NEG
48244: PUSH
48245: LD_INT 0
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 1
48254: NEG
48255: PUSH
48256: LD_INT 1
48258: NEG
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 1
48266: NEG
48267: PUSH
48268: LD_INT 2
48270: NEG
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 1
48278: PUSH
48279: LD_INT 1
48281: NEG
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 2
48289: PUSH
48290: LD_INT 0
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 2
48299: PUSH
48300: LD_INT 1
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 2
48309: PUSH
48310: LD_INT 2
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 1
48319: PUSH
48320: LD_INT 2
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 0
48329: PUSH
48330: LD_INT 2
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 1
48339: NEG
48340: PUSH
48341: LD_INT 1
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 2
48350: NEG
48351: PUSH
48352: LD_INT 1
48354: NEG
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 2
48362: NEG
48363: PUSH
48364: LD_INT 2
48366: NEG
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 2
48374: NEG
48375: PUSH
48376: LD_INT 3
48378: NEG
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 2
48386: PUSH
48387: LD_INT 1
48389: NEG
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 3
48397: PUSH
48398: LD_INT 1
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 1
48407: PUSH
48408: LD_INT 3
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 1
48417: NEG
48418: PUSH
48419: LD_INT 2
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 3
48428: NEG
48429: PUSH
48430: LD_INT 2
48432: NEG
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48463: LD_ADDR_VAR 0 32
48467: PUSH
48468: LD_INT 0
48470: PUSH
48471: LD_INT 0
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 0
48480: PUSH
48481: LD_INT 1
48483: NEG
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 1
48491: PUSH
48492: LD_INT 0
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 1
48501: PUSH
48502: LD_INT 1
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 0
48511: PUSH
48512: LD_INT 1
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 1
48521: NEG
48522: PUSH
48523: LD_INT 0
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 1
48532: NEG
48533: PUSH
48534: LD_INT 1
48536: NEG
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 1
48544: NEG
48545: PUSH
48546: LD_INT 2
48548: NEG
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 0
48556: PUSH
48557: LD_INT 2
48559: NEG
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 1
48567: PUSH
48568: LD_INT 1
48570: NEG
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 2
48578: PUSH
48579: LD_INT 1
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 2
48588: PUSH
48589: LD_INT 2
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 1
48598: PUSH
48599: LD_INT 2
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 0
48608: PUSH
48609: LD_INT 2
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 1
48618: NEG
48619: PUSH
48620: LD_INT 1
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 2
48629: NEG
48630: PUSH
48631: LD_INT 0
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 2
48640: NEG
48641: PUSH
48642: LD_INT 1
48644: NEG
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 1
48652: NEG
48653: PUSH
48654: LD_INT 3
48656: NEG
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 1
48664: PUSH
48665: LD_INT 2
48667: NEG
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 3
48675: PUSH
48676: LD_INT 2
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 2
48685: PUSH
48686: LD_INT 3
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 2
48695: NEG
48696: PUSH
48697: LD_INT 1
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 3
48706: NEG
48707: PUSH
48708: LD_INT 1
48710: NEG
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: LIST
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48741: LD_ADDR_VAR 0 33
48745: PUSH
48746: LD_INT 0
48748: PUSH
48749: LD_INT 0
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 0
48758: PUSH
48759: LD_INT 1
48761: NEG
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 1
48769: PUSH
48770: LD_INT 0
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 1
48779: PUSH
48780: LD_INT 1
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 0
48789: PUSH
48790: LD_INT 1
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 1
48799: NEG
48800: PUSH
48801: LD_INT 0
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 1
48810: NEG
48811: PUSH
48812: LD_INT 1
48814: NEG
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 1
48822: NEG
48823: PUSH
48824: LD_INT 2
48826: NEG
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 1
48834: PUSH
48835: LD_INT 1
48837: NEG
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 2
48845: PUSH
48846: LD_INT 0
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 2
48855: PUSH
48856: LD_INT 1
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 1
48865: PUSH
48866: LD_INT 2
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 0
48875: PUSH
48876: LD_INT 2
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 1
48885: NEG
48886: PUSH
48887: LD_INT 1
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 2
48896: NEG
48897: PUSH
48898: LD_INT 0
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 2
48907: NEG
48908: PUSH
48909: LD_INT 1
48911: NEG
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 2
48919: NEG
48920: PUSH
48921: LD_INT 2
48923: NEG
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 2
48931: NEG
48932: PUSH
48933: LD_INT 3
48935: NEG
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 2
48943: PUSH
48944: LD_INT 1
48946: NEG
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 3
48954: PUSH
48955: LD_INT 1
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 1
48964: PUSH
48965: LD_INT 3
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 1
48974: NEG
48975: PUSH
48976: LD_INT 2
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 3
48985: NEG
48986: PUSH
48987: LD_INT 2
48989: NEG
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49020: LD_ADDR_VAR 0 34
49024: PUSH
49025: LD_INT 0
49027: PUSH
49028: LD_INT 0
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 0
49037: PUSH
49038: LD_INT 1
49040: NEG
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 1
49048: PUSH
49049: LD_INT 0
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 1
49058: PUSH
49059: LD_INT 1
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 0
49068: PUSH
49069: LD_INT 1
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 1
49078: NEG
49079: PUSH
49080: LD_INT 0
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 1
49089: NEG
49090: PUSH
49091: LD_INT 1
49093: NEG
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 1
49101: NEG
49102: PUSH
49103: LD_INT 2
49105: NEG
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 0
49113: PUSH
49114: LD_INT 2
49116: NEG
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 1
49124: PUSH
49125: LD_INT 1
49127: NEG
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 2
49135: PUSH
49136: LD_INT 1
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 2
49145: PUSH
49146: LD_INT 2
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 1
49155: PUSH
49156: LD_INT 2
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 1
49165: NEG
49166: PUSH
49167: LD_INT 1
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 2
49176: NEG
49177: PUSH
49178: LD_INT 0
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 2
49187: NEG
49188: PUSH
49189: LD_INT 1
49191: NEG
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 2
49199: NEG
49200: PUSH
49201: LD_INT 2
49203: NEG
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 1
49211: NEG
49212: PUSH
49213: LD_INT 3
49215: NEG
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 1
49223: PUSH
49224: LD_INT 2
49226: NEG
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 3
49234: PUSH
49235: LD_INT 2
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 2
49244: PUSH
49245: LD_INT 3
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 2
49254: NEG
49255: PUSH
49256: LD_INT 1
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 3
49265: NEG
49266: PUSH
49267: LD_INT 1
49269: NEG
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49300: LD_ADDR_VAR 0 35
49304: PUSH
49305: LD_INT 0
49307: PUSH
49308: LD_INT 0
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 0
49317: PUSH
49318: LD_INT 1
49320: NEG
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 1
49328: PUSH
49329: LD_INT 0
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 1
49338: PUSH
49339: LD_INT 1
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 0
49348: PUSH
49349: LD_INT 1
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 1
49358: NEG
49359: PUSH
49360: LD_INT 0
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 1
49369: NEG
49370: PUSH
49371: LD_INT 1
49373: NEG
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 2
49381: PUSH
49382: LD_INT 1
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 2
49391: NEG
49392: PUSH
49393: LD_INT 1
49395: NEG
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49412: LD_ADDR_VAR 0 36
49416: PUSH
49417: LD_INT 0
49419: PUSH
49420: LD_INT 0
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 0
49429: PUSH
49430: LD_INT 1
49432: NEG
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 1
49440: PUSH
49441: LD_INT 0
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 1
49450: PUSH
49451: LD_INT 1
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 0
49460: PUSH
49461: LD_INT 1
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 1
49470: NEG
49471: PUSH
49472: LD_INT 0
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 1
49481: NEG
49482: PUSH
49483: LD_INT 1
49485: NEG
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 1
49493: NEG
49494: PUSH
49495: LD_INT 2
49497: NEG
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 1
49505: PUSH
49506: LD_INT 2
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49524: LD_ADDR_VAR 0 37
49528: PUSH
49529: LD_INT 0
49531: PUSH
49532: LD_INT 0
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 0
49541: PUSH
49542: LD_INT 1
49544: NEG
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 1
49552: PUSH
49553: LD_INT 0
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 1
49562: PUSH
49563: LD_INT 1
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 0
49572: PUSH
49573: LD_INT 1
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 1
49582: NEG
49583: PUSH
49584: LD_INT 0
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 1
49593: NEG
49594: PUSH
49595: LD_INT 1
49597: NEG
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 1
49605: PUSH
49606: LD_INT 1
49608: NEG
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 1
49616: NEG
49617: PUSH
49618: LD_INT 1
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49636: LD_ADDR_VAR 0 38
49640: PUSH
49641: LD_INT 0
49643: PUSH
49644: LD_INT 0
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 0
49653: PUSH
49654: LD_INT 1
49656: NEG
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 1
49664: PUSH
49665: LD_INT 0
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 1
49674: PUSH
49675: LD_INT 1
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 0
49684: PUSH
49685: LD_INT 1
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 1
49694: NEG
49695: PUSH
49696: LD_INT 0
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 1
49705: NEG
49706: PUSH
49707: LD_INT 1
49709: NEG
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 2
49717: PUSH
49718: LD_INT 1
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 2
49727: NEG
49728: PUSH
49729: LD_INT 1
49731: NEG
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49748: LD_ADDR_VAR 0 39
49752: PUSH
49753: LD_INT 0
49755: PUSH
49756: LD_INT 0
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 0
49765: PUSH
49766: LD_INT 1
49768: NEG
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 1
49776: PUSH
49777: LD_INT 0
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 1
49786: PUSH
49787: LD_INT 1
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 0
49796: PUSH
49797: LD_INT 1
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 1
49806: NEG
49807: PUSH
49808: LD_INT 0
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 1
49817: NEG
49818: PUSH
49819: LD_INT 1
49821: NEG
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 1
49829: NEG
49830: PUSH
49831: LD_INT 2
49833: NEG
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 1
49841: PUSH
49842: LD_INT 2
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49860: LD_ADDR_VAR 0 40
49864: PUSH
49865: LD_INT 0
49867: PUSH
49868: LD_INT 0
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 0
49877: PUSH
49878: LD_INT 1
49880: NEG
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 1
49888: PUSH
49889: LD_INT 0
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 1
49898: PUSH
49899: LD_INT 1
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 0
49908: PUSH
49909: LD_INT 1
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 1
49918: NEG
49919: PUSH
49920: LD_INT 0
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 1
49929: NEG
49930: PUSH
49931: LD_INT 1
49933: NEG
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 1
49941: PUSH
49942: LD_INT 1
49944: NEG
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 1
49952: NEG
49953: PUSH
49954: LD_INT 1
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49972: LD_ADDR_VAR 0 41
49976: PUSH
49977: LD_INT 0
49979: PUSH
49980: LD_INT 0
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 0
49989: PUSH
49990: LD_INT 1
49992: NEG
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 1
50000: PUSH
50001: LD_INT 0
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 1
50010: PUSH
50011: LD_INT 1
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 0
50020: PUSH
50021: LD_INT 1
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 1
50030: NEG
50031: PUSH
50032: LD_INT 0
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 1
50041: NEG
50042: PUSH
50043: LD_INT 1
50045: NEG
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 1
50053: NEG
50054: PUSH
50055: LD_INT 2
50057: NEG
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 1
50065: PUSH
50066: LD_INT 1
50068: NEG
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 2
50076: PUSH
50077: LD_INT 0
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 2
50086: PUSH
50087: LD_INT 1
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 2
50096: PUSH
50097: LD_INT 2
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 1
50106: PUSH
50107: LD_INT 2
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 1
50116: NEG
50117: PUSH
50118: LD_INT 1
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 2
50127: NEG
50128: PUSH
50129: LD_INT 0
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 2
50138: NEG
50139: PUSH
50140: LD_INT 1
50142: NEG
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 2
50150: NEG
50151: PUSH
50152: LD_INT 2
50154: NEG
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 2
50162: NEG
50163: PUSH
50164: LD_INT 3
50166: NEG
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 2
50174: PUSH
50175: LD_INT 1
50177: NEG
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 3
50185: PUSH
50186: LD_INT 0
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 3
50195: PUSH
50196: LD_INT 1
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 3
50205: PUSH
50206: LD_INT 2
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 3
50215: PUSH
50216: LD_INT 3
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 2
50225: PUSH
50226: LD_INT 3
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 2
50235: NEG
50236: PUSH
50237: LD_INT 1
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 3
50246: NEG
50247: PUSH
50248: LD_INT 0
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 3
50257: NEG
50258: PUSH
50259: LD_INT 1
50261: NEG
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 3
50269: NEG
50270: PUSH
50271: LD_INT 2
50273: NEG
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 3
50281: NEG
50282: PUSH
50283: LD_INT 3
50285: NEG
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50322: LD_ADDR_VAR 0 42
50326: PUSH
50327: LD_INT 0
50329: PUSH
50330: LD_INT 0
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 0
50339: PUSH
50340: LD_INT 1
50342: NEG
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 1
50350: PUSH
50351: LD_INT 0
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 1
50360: PUSH
50361: LD_INT 1
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 0
50370: PUSH
50371: LD_INT 1
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 1
50380: NEG
50381: PUSH
50382: LD_INT 0
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 1
50391: NEG
50392: PUSH
50393: LD_INT 1
50395: NEG
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 1
50403: NEG
50404: PUSH
50405: LD_INT 2
50407: NEG
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 0
50415: PUSH
50416: LD_INT 2
50418: NEG
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 1
50426: PUSH
50427: LD_INT 1
50429: NEG
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 2
50437: PUSH
50438: LD_INT 1
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 2
50447: PUSH
50448: LD_INT 2
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 1
50457: PUSH
50458: LD_INT 2
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 0
50467: PUSH
50468: LD_INT 2
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 1
50477: NEG
50478: PUSH
50479: LD_INT 1
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 2
50488: NEG
50489: PUSH
50490: LD_INT 1
50492: NEG
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 2
50500: NEG
50501: PUSH
50502: LD_INT 2
50504: NEG
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 2
50512: NEG
50513: PUSH
50514: LD_INT 3
50516: NEG
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 1
50524: NEG
50525: PUSH
50526: LD_INT 3
50528: NEG
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 0
50536: PUSH
50537: LD_INT 3
50539: NEG
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 1
50547: PUSH
50548: LD_INT 2
50550: NEG
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 3
50558: PUSH
50559: LD_INT 2
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 3
50568: PUSH
50569: LD_INT 3
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 2
50578: PUSH
50579: LD_INT 3
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 1
50588: PUSH
50589: LD_INT 3
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 0
50598: PUSH
50599: LD_INT 3
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 1
50608: NEG
50609: PUSH
50610: LD_INT 2
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 3
50619: NEG
50620: PUSH
50621: LD_INT 2
50623: NEG
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 3
50631: NEG
50632: PUSH
50633: LD_INT 3
50635: NEG
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50672: LD_ADDR_VAR 0 43
50676: PUSH
50677: LD_INT 0
50679: PUSH
50680: LD_INT 0
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 0
50689: PUSH
50690: LD_INT 1
50692: NEG
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 1
50700: PUSH
50701: LD_INT 0
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 1
50710: PUSH
50711: LD_INT 1
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 0
50720: PUSH
50721: LD_INT 1
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 1
50730: NEG
50731: PUSH
50732: LD_INT 0
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 1
50741: NEG
50742: PUSH
50743: LD_INT 1
50745: NEG
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 1
50753: NEG
50754: PUSH
50755: LD_INT 2
50757: NEG
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 0
50765: PUSH
50766: LD_INT 2
50768: NEG
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 1
50776: PUSH
50777: LD_INT 1
50779: NEG
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 2
50787: PUSH
50788: LD_INT 0
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 2
50797: PUSH
50798: LD_INT 1
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 1
50807: PUSH
50808: LD_INT 2
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 0
50817: PUSH
50818: LD_INT 2
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 1
50827: NEG
50828: PUSH
50829: LD_INT 1
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 2
50838: NEG
50839: PUSH
50840: LD_INT 0
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 2
50849: NEG
50850: PUSH
50851: LD_INT 1
50853: NEG
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 1
50861: NEG
50862: PUSH
50863: LD_INT 3
50865: NEG
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 0
50873: PUSH
50874: LD_INT 3
50876: NEG
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 1
50884: PUSH
50885: LD_INT 2
50887: NEG
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 2
50895: PUSH
50896: LD_INT 1
50898: NEG
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 3
50906: PUSH
50907: LD_INT 0
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 3
50916: PUSH
50917: LD_INT 1
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 1
50926: PUSH
50927: LD_INT 3
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 0
50936: PUSH
50937: LD_INT 3
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 1
50946: NEG
50947: PUSH
50948: LD_INT 2
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 2
50957: NEG
50958: PUSH
50959: LD_INT 1
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 3
50968: NEG
50969: PUSH
50970: LD_INT 0
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 3
50979: NEG
50980: PUSH
50981: LD_INT 1
50983: NEG
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51020: LD_ADDR_VAR 0 44
51024: PUSH
51025: LD_INT 0
51027: PUSH
51028: LD_INT 0
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 0
51037: PUSH
51038: LD_INT 1
51040: NEG
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 1
51048: PUSH
51049: LD_INT 0
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 1
51058: PUSH
51059: LD_INT 1
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 0
51068: PUSH
51069: LD_INT 1
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 1
51078: NEG
51079: PUSH
51080: LD_INT 0
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 1
51089: NEG
51090: PUSH
51091: LD_INT 1
51093: NEG
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 1
51101: NEG
51102: PUSH
51103: LD_INT 2
51105: NEG
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 1
51113: PUSH
51114: LD_INT 1
51116: NEG
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 2
51124: PUSH
51125: LD_INT 0
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 2
51134: PUSH
51135: LD_INT 1
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 2
51144: PUSH
51145: LD_INT 2
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 1
51154: PUSH
51155: LD_INT 2
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 1
51164: NEG
51165: PUSH
51166: LD_INT 1
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 2
51175: NEG
51176: PUSH
51177: LD_INT 0
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 2
51186: NEG
51187: PUSH
51188: LD_INT 1
51190: NEG
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 2
51198: NEG
51199: PUSH
51200: LD_INT 2
51202: NEG
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 2
51210: NEG
51211: PUSH
51212: LD_INT 3
51214: NEG
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 2
51222: PUSH
51223: LD_INT 1
51225: NEG
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 3
51233: PUSH
51234: LD_INT 0
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 3
51243: PUSH
51244: LD_INT 1
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 3
51253: PUSH
51254: LD_INT 2
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 3
51263: PUSH
51264: LD_INT 3
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 2
51273: PUSH
51274: LD_INT 3
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 2
51283: NEG
51284: PUSH
51285: LD_INT 1
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 3
51294: NEG
51295: PUSH
51296: LD_INT 0
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 3
51305: NEG
51306: PUSH
51307: LD_INT 1
51309: NEG
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 3
51317: NEG
51318: PUSH
51319: LD_INT 2
51321: NEG
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 3
51329: NEG
51330: PUSH
51331: LD_INT 3
51333: NEG
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51370: LD_ADDR_VAR 0 45
51374: PUSH
51375: LD_INT 0
51377: PUSH
51378: LD_INT 0
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 0
51387: PUSH
51388: LD_INT 1
51390: NEG
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 1
51398: PUSH
51399: LD_INT 0
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 1
51408: PUSH
51409: LD_INT 1
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 0
51418: PUSH
51419: LD_INT 1
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 1
51428: NEG
51429: PUSH
51430: LD_INT 0
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 1
51439: NEG
51440: PUSH
51441: LD_INT 1
51443: NEG
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 1
51451: NEG
51452: PUSH
51453: LD_INT 2
51455: NEG
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 0
51463: PUSH
51464: LD_INT 2
51466: NEG
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 1
51474: PUSH
51475: LD_INT 1
51477: NEG
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 2
51485: PUSH
51486: LD_INT 1
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 2
51495: PUSH
51496: LD_INT 2
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 1
51505: PUSH
51506: LD_INT 2
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 0
51515: PUSH
51516: LD_INT 2
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 1
51525: NEG
51526: PUSH
51527: LD_INT 1
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 2
51536: NEG
51537: PUSH
51538: LD_INT 1
51540: NEG
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 2
51548: NEG
51549: PUSH
51550: LD_INT 2
51552: NEG
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 2
51560: NEG
51561: PUSH
51562: LD_INT 3
51564: NEG
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 1
51572: NEG
51573: PUSH
51574: LD_INT 3
51576: NEG
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 0
51584: PUSH
51585: LD_INT 3
51587: NEG
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 1
51595: PUSH
51596: LD_INT 2
51598: NEG
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 3
51606: PUSH
51607: LD_INT 2
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 3
51616: PUSH
51617: LD_INT 3
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 2
51626: PUSH
51627: LD_INT 3
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 1
51636: PUSH
51637: LD_INT 3
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 0
51646: PUSH
51647: LD_INT 3
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 1
51656: NEG
51657: PUSH
51658: LD_INT 2
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 3
51667: NEG
51668: PUSH
51669: LD_INT 2
51671: NEG
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 3
51679: NEG
51680: PUSH
51681: LD_INT 3
51683: NEG
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51720: LD_ADDR_VAR 0 46
51724: PUSH
51725: LD_INT 0
51727: PUSH
51728: LD_INT 0
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 0
51737: PUSH
51738: LD_INT 1
51740: NEG
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 1
51748: PUSH
51749: LD_INT 0
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 1
51758: PUSH
51759: LD_INT 1
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 0
51768: PUSH
51769: LD_INT 1
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 1
51778: NEG
51779: PUSH
51780: LD_INT 0
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 1
51789: NEG
51790: PUSH
51791: LD_INT 1
51793: NEG
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 1
51801: NEG
51802: PUSH
51803: LD_INT 2
51805: NEG
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 0
51813: PUSH
51814: LD_INT 2
51816: NEG
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 1
51824: PUSH
51825: LD_INT 1
51827: NEG
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 2
51835: PUSH
51836: LD_INT 0
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 2
51845: PUSH
51846: LD_INT 1
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 1
51855: PUSH
51856: LD_INT 2
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 0
51865: PUSH
51866: LD_INT 2
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 1
51875: NEG
51876: PUSH
51877: LD_INT 1
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 2
51886: NEG
51887: PUSH
51888: LD_INT 0
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 2
51897: NEG
51898: PUSH
51899: LD_INT 1
51901: NEG
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 1
51909: NEG
51910: PUSH
51911: LD_INT 3
51913: NEG
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 0
51921: PUSH
51922: LD_INT 3
51924: NEG
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 1
51932: PUSH
51933: LD_INT 2
51935: NEG
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 2
51943: PUSH
51944: LD_INT 1
51946: NEG
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 3
51954: PUSH
51955: LD_INT 0
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 3
51964: PUSH
51965: LD_INT 1
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 1
51974: PUSH
51975: LD_INT 3
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 0
51984: PUSH
51985: LD_INT 3
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 1
51994: NEG
51995: PUSH
51996: LD_INT 2
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 2
52005: NEG
52006: PUSH
52007: LD_INT 1
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 3
52016: NEG
52017: PUSH
52018: LD_INT 0
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 3
52027: NEG
52028: PUSH
52029: LD_INT 1
52031: NEG
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52068: LD_ADDR_VAR 0 47
52072: PUSH
52073: LD_INT 0
52075: PUSH
52076: LD_INT 0
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 0
52085: PUSH
52086: LD_INT 1
52088: NEG
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 1
52096: PUSH
52097: LD_INT 0
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 1
52106: PUSH
52107: LD_INT 1
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 0
52116: PUSH
52117: LD_INT 1
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 1
52126: NEG
52127: PUSH
52128: LD_INT 0
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 1
52137: NEG
52138: PUSH
52139: LD_INT 1
52141: NEG
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 1
52149: NEG
52150: PUSH
52151: LD_INT 2
52153: NEG
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 0
52161: PUSH
52162: LD_INT 2
52164: NEG
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 1
52172: PUSH
52173: LD_INT 1
52175: NEG
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 2
52183: NEG
52184: PUSH
52185: LD_INT 1
52187: NEG
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 2
52195: NEG
52196: PUSH
52197: LD_INT 2
52199: NEG
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52219: LD_ADDR_VAR 0 48
52223: PUSH
52224: LD_INT 0
52226: PUSH
52227: LD_INT 0
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 0
52236: PUSH
52237: LD_INT 1
52239: NEG
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 1
52247: PUSH
52248: LD_INT 0
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 1
52257: PUSH
52258: LD_INT 1
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 0
52267: PUSH
52268: LD_INT 1
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 1
52277: NEG
52278: PUSH
52279: LD_INT 0
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 1
52288: NEG
52289: PUSH
52290: LD_INT 1
52292: NEG
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 1
52300: NEG
52301: PUSH
52302: LD_INT 2
52304: NEG
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 0
52312: PUSH
52313: LD_INT 2
52315: NEG
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 1
52323: PUSH
52324: LD_INT 1
52326: NEG
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 2
52334: PUSH
52335: LD_INT 0
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 2
52344: PUSH
52345: LD_INT 1
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52366: LD_ADDR_VAR 0 49
52370: PUSH
52371: LD_INT 0
52373: PUSH
52374: LD_INT 0
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 0
52383: PUSH
52384: LD_INT 1
52386: NEG
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 1
52394: PUSH
52395: LD_INT 0
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 1
52404: PUSH
52405: LD_INT 1
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 0
52414: PUSH
52415: LD_INT 1
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 1
52424: NEG
52425: PUSH
52426: LD_INT 0
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 1
52435: NEG
52436: PUSH
52437: LD_INT 1
52439: NEG
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 1
52447: PUSH
52448: LD_INT 1
52450: NEG
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 2
52458: PUSH
52459: LD_INT 0
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 2
52468: PUSH
52469: LD_INT 1
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 2
52478: PUSH
52479: LD_INT 2
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 1
52488: PUSH
52489: LD_INT 2
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52510: LD_ADDR_VAR 0 50
52514: PUSH
52515: LD_INT 0
52517: PUSH
52518: LD_INT 0
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 0
52527: PUSH
52528: LD_INT 1
52530: NEG
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 1
52538: PUSH
52539: LD_INT 0
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 1
52548: PUSH
52549: LD_INT 1
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 0
52558: PUSH
52559: LD_INT 1
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 1
52568: NEG
52569: PUSH
52570: LD_INT 0
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 1
52579: NEG
52580: PUSH
52581: LD_INT 1
52583: NEG
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 2
52591: PUSH
52592: LD_INT 1
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 2
52601: PUSH
52602: LD_INT 2
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 1
52611: PUSH
52612: LD_INT 2
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 0
52621: PUSH
52622: LD_INT 2
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 1
52631: NEG
52632: PUSH
52633: LD_INT 1
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52654: LD_ADDR_VAR 0 51
52658: PUSH
52659: LD_INT 0
52661: PUSH
52662: LD_INT 0
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 0
52671: PUSH
52672: LD_INT 1
52674: NEG
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 1
52682: PUSH
52683: LD_INT 0
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 1
52692: PUSH
52693: LD_INT 1
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 0
52702: PUSH
52703: LD_INT 1
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 1
52712: NEG
52713: PUSH
52714: LD_INT 0
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 1
52723: NEG
52724: PUSH
52725: LD_INT 1
52727: NEG
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 1
52735: PUSH
52736: LD_INT 2
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 0
52745: PUSH
52746: LD_INT 2
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 1
52755: NEG
52756: PUSH
52757: LD_INT 1
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 2
52766: NEG
52767: PUSH
52768: LD_INT 0
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 2
52777: NEG
52778: PUSH
52779: LD_INT 1
52781: NEG
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52801: LD_ADDR_VAR 0 52
52805: PUSH
52806: LD_INT 0
52808: PUSH
52809: LD_INT 0
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 0
52818: PUSH
52819: LD_INT 1
52821: NEG
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 1
52829: PUSH
52830: LD_INT 0
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 1
52839: PUSH
52840: LD_INT 1
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 0
52849: PUSH
52850: LD_INT 1
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 1
52859: NEG
52860: PUSH
52861: LD_INT 0
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 1
52870: NEG
52871: PUSH
52872: LD_INT 1
52874: NEG
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 1
52882: NEG
52883: PUSH
52884: LD_INT 2
52886: NEG
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 1
52894: NEG
52895: PUSH
52896: LD_INT 1
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 2
52905: NEG
52906: PUSH
52907: LD_INT 0
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 2
52916: NEG
52917: PUSH
52918: LD_INT 1
52920: NEG
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 2
52928: NEG
52929: PUSH
52930: LD_INT 2
52932: NEG
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52952: LD_ADDR_VAR 0 53
52956: PUSH
52957: LD_INT 0
52959: PUSH
52960: LD_INT 0
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 0
52969: PUSH
52970: LD_INT 1
52972: NEG
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 1
52980: PUSH
52981: LD_INT 0
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 1
52990: PUSH
52991: LD_INT 1
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 0
53000: PUSH
53001: LD_INT 1
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 1
53010: NEG
53011: PUSH
53012: LD_INT 0
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 1
53021: NEG
53022: PUSH
53023: LD_INT 1
53025: NEG
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 1
53033: NEG
53034: PUSH
53035: LD_INT 2
53037: NEG
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 0
53045: PUSH
53046: LD_INT 2
53048: NEG
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 1
53056: PUSH
53057: LD_INT 1
53059: NEG
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 2
53067: PUSH
53068: LD_INT 0
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 2
53077: PUSH
53078: LD_INT 1
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 2
53087: PUSH
53088: LD_INT 2
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 1
53097: PUSH
53098: LD_INT 2
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 0
53107: PUSH
53108: LD_INT 2
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 1
53117: NEG
53118: PUSH
53119: LD_INT 1
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 2
53128: NEG
53129: PUSH
53130: LD_INT 0
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 2
53139: NEG
53140: PUSH
53141: LD_INT 1
53143: NEG
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 2
53151: NEG
53152: PUSH
53153: LD_INT 2
53155: NEG
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53182: LD_ADDR_VAR 0 54
53186: PUSH
53187: LD_INT 0
53189: PUSH
53190: LD_INT 0
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 0
53199: PUSH
53200: LD_INT 1
53202: NEG
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 1
53210: PUSH
53211: LD_INT 0
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 1
53220: PUSH
53221: LD_INT 1
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 0
53230: PUSH
53231: LD_INT 1
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 1
53240: NEG
53241: PUSH
53242: LD_INT 0
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 1
53251: NEG
53252: PUSH
53253: LD_INT 1
53255: NEG
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 1
53263: NEG
53264: PUSH
53265: LD_INT 2
53267: NEG
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 0
53275: PUSH
53276: LD_INT 2
53278: NEG
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 1
53286: PUSH
53287: LD_INT 1
53289: NEG
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 2
53297: PUSH
53298: LD_INT 0
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 2
53307: PUSH
53308: LD_INT 1
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 2
53317: PUSH
53318: LD_INT 2
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 1
53327: PUSH
53328: LD_INT 2
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 0
53337: PUSH
53338: LD_INT 2
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 1
53347: NEG
53348: PUSH
53349: LD_INT 1
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 2
53358: NEG
53359: PUSH
53360: LD_INT 0
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 2
53369: NEG
53370: PUSH
53371: LD_INT 1
53373: NEG
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 2
53381: NEG
53382: PUSH
53383: LD_INT 2
53385: NEG
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53412: LD_ADDR_VAR 0 55
53416: PUSH
53417: LD_INT 0
53419: PUSH
53420: LD_INT 0
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 0
53429: PUSH
53430: LD_INT 1
53432: NEG
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 1
53440: PUSH
53441: LD_INT 0
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 1
53450: PUSH
53451: LD_INT 1
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 0
53460: PUSH
53461: LD_INT 1
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 1
53470: NEG
53471: PUSH
53472: LD_INT 0
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 1
53481: NEG
53482: PUSH
53483: LD_INT 1
53485: NEG
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 1
53493: NEG
53494: PUSH
53495: LD_INT 2
53497: NEG
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 0
53505: PUSH
53506: LD_INT 2
53508: NEG
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 1
53516: PUSH
53517: LD_INT 1
53519: NEG
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 2
53527: PUSH
53528: LD_INT 0
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 2
53537: PUSH
53538: LD_INT 1
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 2
53547: PUSH
53548: LD_INT 2
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 1
53557: PUSH
53558: LD_INT 2
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 0
53567: PUSH
53568: LD_INT 2
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 1
53577: NEG
53578: PUSH
53579: LD_INT 1
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 2
53588: NEG
53589: PUSH
53590: LD_INT 0
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 2
53599: NEG
53600: PUSH
53601: LD_INT 1
53603: NEG
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 2
53611: NEG
53612: PUSH
53613: LD_INT 2
53615: NEG
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53642: LD_ADDR_VAR 0 56
53646: PUSH
53647: LD_INT 0
53649: PUSH
53650: LD_INT 0
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 0
53659: PUSH
53660: LD_INT 1
53662: NEG
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 1
53670: PUSH
53671: LD_INT 0
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 1
53680: PUSH
53681: LD_INT 1
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 0
53690: PUSH
53691: LD_INT 1
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 1
53700: NEG
53701: PUSH
53702: LD_INT 0
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 1
53711: NEG
53712: PUSH
53713: LD_INT 1
53715: NEG
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 1
53723: NEG
53724: PUSH
53725: LD_INT 2
53727: NEG
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 0
53735: PUSH
53736: LD_INT 2
53738: NEG
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 1
53746: PUSH
53747: LD_INT 1
53749: NEG
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 2
53757: PUSH
53758: LD_INT 0
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 2
53767: PUSH
53768: LD_INT 1
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 2
53777: PUSH
53778: LD_INT 2
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 1
53787: PUSH
53788: LD_INT 2
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 0
53797: PUSH
53798: LD_INT 2
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 1
53807: NEG
53808: PUSH
53809: LD_INT 1
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 2
53818: NEG
53819: PUSH
53820: LD_INT 0
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 2
53829: NEG
53830: PUSH
53831: LD_INT 1
53833: NEG
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 2
53841: NEG
53842: PUSH
53843: LD_INT 2
53845: NEG
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53872: LD_ADDR_VAR 0 57
53876: PUSH
53877: LD_INT 0
53879: PUSH
53880: LD_INT 0
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 0
53889: PUSH
53890: LD_INT 1
53892: NEG
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 1
53900: PUSH
53901: LD_INT 0
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 1
53910: PUSH
53911: LD_INT 1
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 0
53920: PUSH
53921: LD_INT 1
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 1
53930: NEG
53931: PUSH
53932: LD_INT 0
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 1
53941: NEG
53942: PUSH
53943: LD_INT 1
53945: NEG
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 1
53953: NEG
53954: PUSH
53955: LD_INT 2
53957: NEG
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 0
53965: PUSH
53966: LD_INT 2
53968: NEG
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 1
53976: PUSH
53977: LD_INT 1
53979: NEG
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 2
53987: PUSH
53988: LD_INT 0
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 2
53997: PUSH
53998: LD_INT 1
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 2
54007: PUSH
54008: LD_INT 2
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 1
54017: PUSH
54018: LD_INT 2
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 0
54027: PUSH
54028: LD_INT 2
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 1
54037: NEG
54038: PUSH
54039: LD_INT 1
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 2
54048: NEG
54049: PUSH
54050: LD_INT 0
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 2
54059: NEG
54060: PUSH
54061: LD_INT 1
54063: NEG
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 2
54071: NEG
54072: PUSH
54073: LD_INT 2
54075: NEG
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54102: LD_ADDR_VAR 0 58
54106: PUSH
54107: LD_INT 0
54109: PUSH
54110: LD_INT 0
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 0
54119: PUSH
54120: LD_INT 1
54122: NEG
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 1
54130: PUSH
54131: LD_INT 0
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 1
54140: PUSH
54141: LD_INT 1
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 0
54150: PUSH
54151: LD_INT 1
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 1
54160: NEG
54161: PUSH
54162: LD_INT 0
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 1
54171: NEG
54172: PUSH
54173: LD_INT 1
54175: NEG
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 1
54183: NEG
54184: PUSH
54185: LD_INT 2
54187: NEG
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 0
54195: PUSH
54196: LD_INT 2
54198: NEG
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 1
54206: PUSH
54207: LD_INT 1
54209: NEG
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 2
54217: PUSH
54218: LD_INT 0
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 2
54227: PUSH
54228: LD_INT 1
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 2
54237: PUSH
54238: LD_INT 2
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 1
54247: PUSH
54248: LD_INT 2
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 0
54257: PUSH
54258: LD_INT 2
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 1
54267: NEG
54268: PUSH
54269: LD_INT 1
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 2
54278: NEG
54279: PUSH
54280: LD_INT 0
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 2
54289: NEG
54290: PUSH
54291: LD_INT 1
54293: NEG
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 2
54301: NEG
54302: PUSH
54303: LD_INT 2
54305: NEG
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54332: LD_ADDR_VAR 0 59
54336: PUSH
54337: LD_INT 0
54339: PUSH
54340: LD_INT 0
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 0
54349: PUSH
54350: LD_INT 1
54352: NEG
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 1
54360: PUSH
54361: LD_INT 0
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 1
54370: PUSH
54371: LD_INT 1
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 0
54380: PUSH
54381: LD_INT 1
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 1
54390: NEG
54391: PUSH
54392: LD_INT 0
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 1
54401: NEG
54402: PUSH
54403: LD_INT 1
54405: NEG
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54420: LD_ADDR_VAR 0 60
54424: PUSH
54425: LD_INT 0
54427: PUSH
54428: LD_INT 0
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 0
54437: PUSH
54438: LD_INT 1
54440: NEG
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 1
54448: PUSH
54449: LD_INT 0
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 1
54458: PUSH
54459: LD_INT 1
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 0
54468: PUSH
54469: LD_INT 1
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 1
54478: NEG
54479: PUSH
54480: LD_INT 0
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 1
54489: NEG
54490: PUSH
54491: LD_INT 1
54493: NEG
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54508: LD_ADDR_VAR 0 61
54512: PUSH
54513: LD_INT 0
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 0
54525: PUSH
54526: LD_INT 1
54528: NEG
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 1
54536: PUSH
54537: LD_INT 0
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 1
54546: PUSH
54547: LD_INT 1
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 0
54556: PUSH
54557: LD_INT 1
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 1
54566: NEG
54567: PUSH
54568: LD_INT 0
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 1
54577: NEG
54578: PUSH
54579: LD_INT 1
54581: NEG
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54596: LD_ADDR_VAR 0 62
54600: PUSH
54601: LD_INT 0
54603: PUSH
54604: LD_INT 0
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 0
54613: PUSH
54614: LD_INT 1
54616: NEG
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 1
54624: PUSH
54625: LD_INT 0
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 1
54634: PUSH
54635: LD_INT 1
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 0
54644: PUSH
54645: LD_INT 1
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 1
54654: NEG
54655: PUSH
54656: LD_INT 0
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 1
54665: NEG
54666: PUSH
54667: LD_INT 1
54669: NEG
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54684: LD_ADDR_VAR 0 63
54688: PUSH
54689: LD_INT 0
54691: PUSH
54692: LD_INT 0
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 0
54701: PUSH
54702: LD_INT 1
54704: NEG
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 1
54712: PUSH
54713: LD_INT 0
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 1
54722: PUSH
54723: LD_INT 1
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 0
54732: PUSH
54733: LD_INT 1
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 1
54742: NEG
54743: PUSH
54744: LD_INT 0
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 1
54753: NEG
54754: PUSH
54755: LD_INT 1
54757: NEG
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54772: LD_ADDR_VAR 0 64
54776: PUSH
54777: LD_INT 0
54779: PUSH
54780: LD_INT 0
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 0
54789: PUSH
54790: LD_INT 1
54792: NEG
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 1
54800: PUSH
54801: LD_INT 0
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 1
54810: PUSH
54811: LD_INT 1
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 0
54820: PUSH
54821: LD_INT 1
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 1
54830: NEG
54831: PUSH
54832: LD_INT 0
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 1
54841: NEG
54842: PUSH
54843: LD_INT 1
54845: NEG
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: ST_TO_ADDR
// end ; 1 :
54860: GO 60757
54862: LD_INT 1
54864: DOUBLE
54865: EQUAL
54866: IFTRUE 54870
54868: GO 57493
54870: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54871: LD_ADDR_VAR 0 11
54875: PUSH
54876: LD_INT 1
54878: NEG
54879: PUSH
54880: LD_INT 3
54882: NEG
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 0
54890: PUSH
54891: LD_INT 3
54893: NEG
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 1
54901: PUSH
54902: LD_INT 2
54904: NEG
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: LIST
54914: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54915: LD_ADDR_VAR 0 12
54919: PUSH
54920: LD_INT 2
54922: PUSH
54923: LD_INT 1
54925: NEG
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 3
54933: PUSH
54934: LD_INT 0
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 3
54943: PUSH
54944: LD_INT 1
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: LIST
54955: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54956: LD_ADDR_VAR 0 13
54960: PUSH
54961: LD_INT 3
54963: PUSH
54964: LD_INT 2
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 3
54973: PUSH
54974: LD_INT 3
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 2
54983: PUSH
54984: LD_INT 3
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: LIST
54995: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54996: LD_ADDR_VAR 0 14
55000: PUSH
55001: LD_INT 1
55003: PUSH
55004: LD_INT 3
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 0
55013: PUSH
55014: LD_INT 3
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 1
55023: NEG
55024: PUSH
55025: LD_INT 2
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: LIST
55036: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55037: LD_ADDR_VAR 0 15
55041: PUSH
55042: LD_INT 2
55044: NEG
55045: PUSH
55046: LD_INT 1
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 3
55055: NEG
55056: PUSH
55057: LD_INT 0
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 3
55066: NEG
55067: PUSH
55068: LD_INT 1
55070: NEG
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: LIST
55080: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55081: LD_ADDR_VAR 0 16
55085: PUSH
55086: LD_INT 2
55088: NEG
55089: PUSH
55090: LD_INT 3
55092: NEG
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 3
55100: NEG
55101: PUSH
55102: LD_INT 2
55104: NEG
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 3
55112: NEG
55113: PUSH
55114: LD_INT 3
55116: NEG
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: LIST
55126: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55127: LD_ADDR_VAR 0 17
55131: PUSH
55132: LD_INT 1
55134: NEG
55135: PUSH
55136: LD_INT 3
55138: NEG
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 0
55146: PUSH
55147: LD_INT 3
55149: NEG
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 1
55157: PUSH
55158: LD_INT 2
55160: NEG
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: LIST
55170: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55171: LD_ADDR_VAR 0 18
55175: PUSH
55176: LD_INT 2
55178: PUSH
55179: LD_INT 1
55181: NEG
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 3
55189: PUSH
55190: LD_INT 0
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 3
55199: PUSH
55200: LD_INT 1
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: LIST
55211: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55212: LD_ADDR_VAR 0 19
55216: PUSH
55217: LD_INT 3
55219: PUSH
55220: LD_INT 2
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 3
55229: PUSH
55230: LD_INT 3
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 2
55239: PUSH
55240: LD_INT 3
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: LIST
55251: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55252: LD_ADDR_VAR 0 20
55256: PUSH
55257: LD_INT 1
55259: PUSH
55260: LD_INT 3
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 0
55269: PUSH
55270: LD_INT 3
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 1
55279: NEG
55280: PUSH
55281: LD_INT 2
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: LIST
55292: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55293: LD_ADDR_VAR 0 21
55297: PUSH
55298: LD_INT 2
55300: NEG
55301: PUSH
55302: LD_INT 1
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 3
55311: NEG
55312: PUSH
55313: LD_INT 0
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 3
55322: NEG
55323: PUSH
55324: LD_INT 1
55326: NEG
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: LIST
55336: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55337: LD_ADDR_VAR 0 22
55341: PUSH
55342: LD_INT 2
55344: NEG
55345: PUSH
55346: LD_INT 3
55348: NEG
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 3
55356: NEG
55357: PUSH
55358: LD_INT 2
55360: NEG
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 3
55368: NEG
55369: PUSH
55370: LD_INT 3
55372: NEG
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: LIST
55382: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55383: LD_ADDR_VAR 0 23
55387: PUSH
55388: LD_INT 0
55390: PUSH
55391: LD_INT 3
55393: NEG
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 1
55401: NEG
55402: PUSH
55403: LD_INT 4
55405: NEG
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 1
55413: PUSH
55414: LD_INT 3
55416: NEG
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: LIST
55426: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55427: LD_ADDR_VAR 0 24
55431: PUSH
55432: LD_INT 3
55434: PUSH
55435: LD_INT 0
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 3
55444: PUSH
55445: LD_INT 1
55447: NEG
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 4
55455: PUSH
55456: LD_INT 1
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: LIST
55467: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55468: LD_ADDR_VAR 0 25
55472: PUSH
55473: LD_INT 3
55475: PUSH
55476: LD_INT 3
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 4
55485: PUSH
55486: LD_INT 3
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 3
55495: PUSH
55496: LD_INT 4
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: LIST
55507: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55508: LD_ADDR_VAR 0 26
55512: PUSH
55513: LD_INT 0
55515: PUSH
55516: LD_INT 3
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 1
55525: PUSH
55526: LD_INT 4
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 1
55535: NEG
55536: PUSH
55537: LD_INT 3
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: LIST
55548: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55549: LD_ADDR_VAR 0 27
55553: PUSH
55554: LD_INT 3
55556: NEG
55557: PUSH
55558: LD_INT 0
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 3
55567: NEG
55568: PUSH
55569: LD_INT 1
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 4
55578: NEG
55579: PUSH
55580: LD_INT 1
55582: NEG
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: LIST
55592: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55593: LD_ADDR_VAR 0 28
55597: PUSH
55598: LD_INT 3
55600: NEG
55601: PUSH
55602: LD_INT 3
55604: NEG
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 3
55612: NEG
55613: PUSH
55614: LD_INT 4
55616: NEG
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 4
55624: NEG
55625: PUSH
55626: LD_INT 3
55628: NEG
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: LIST
55638: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55639: LD_ADDR_VAR 0 29
55643: PUSH
55644: LD_INT 1
55646: NEG
55647: PUSH
55648: LD_INT 3
55650: NEG
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 0
55658: PUSH
55659: LD_INT 3
55661: NEG
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 1
55669: PUSH
55670: LD_INT 2
55672: NEG
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 1
55680: NEG
55681: PUSH
55682: LD_INT 4
55684: NEG
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 0
55692: PUSH
55693: LD_INT 4
55695: NEG
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 1
55703: PUSH
55704: LD_INT 3
55706: NEG
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 1
55714: NEG
55715: PUSH
55716: LD_INT 5
55718: NEG
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 0
55726: PUSH
55727: LD_INT 5
55729: NEG
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 1
55737: PUSH
55738: LD_INT 4
55740: NEG
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 1
55748: NEG
55749: PUSH
55750: LD_INT 6
55752: NEG
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 0
55760: PUSH
55761: LD_INT 6
55763: NEG
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 1
55771: PUSH
55772: LD_INT 5
55774: NEG
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55794: LD_ADDR_VAR 0 30
55798: PUSH
55799: LD_INT 2
55801: PUSH
55802: LD_INT 1
55804: NEG
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 3
55812: PUSH
55813: LD_INT 0
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 3
55822: PUSH
55823: LD_INT 1
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 3
55832: PUSH
55833: LD_INT 1
55835: NEG
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 4
55843: PUSH
55844: LD_INT 0
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 4
55853: PUSH
55854: LD_INT 1
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 4
55863: PUSH
55864: LD_INT 1
55866: NEG
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 5
55874: PUSH
55875: LD_INT 0
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 5
55884: PUSH
55885: LD_INT 1
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 5
55894: PUSH
55895: LD_INT 1
55897: NEG
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 6
55905: PUSH
55906: LD_INT 0
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 6
55915: PUSH
55916: LD_INT 1
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55937: LD_ADDR_VAR 0 31
55941: PUSH
55942: LD_INT 3
55944: PUSH
55945: LD_INT 2
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 3
55954: PUSH
55955: LD_INT 3
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 2
55964: PUSH
55965: LD_INT 3
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 4
55974: PUSH
55975: LD_INT 3
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 4
55984: PUSH
55985: LD_INT 4
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 3
55994: PUSH
55995: LD_INT 4
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 5
56004: PUSH
56005: LD_INT 4
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 5
56014: PUSH
56015: LD_INT 5
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 4
56024: PUSH
56025: LD_INT 5
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 6
56034: PUSH
56035: LD_INT 5
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 6
56044: PUSH
56045: LD_INT 6
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 5
56054: PUSH
56055: LD_INT 6
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56076: LD_ADDR_VAR 0 32
56080: PUSH
56081: LD_INT 1
56083: PUSH
56084: LD_INT 3
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 0
56093: PUSH
56094: LD_INT 3
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 1
56103: NEG
56104: PUSH
56105: LD_INT 2
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 1
56114: PUSH
56115: LD_INT 4
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 0
56124: PUSH
56125: LD_INT 4
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 1
56134: NEG
56135: PUSH
56136: LD_INT 3
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 1
56145: PUSH
56146: LD_INT 5
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 0
56155: PUSH
56156: LD_INT 5
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 1
56165: NEG
56166: PUSH
56167: LD_INT 4
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 1
56176: PUSH
56177: LD_INT 6
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 0
56186: PUSH
56187: LD_INT 6
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 1
56196: NEG
56197: PUSH
56198: LD_INT 5
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56219: LD_ADDR_VAR 0 33
56223: PUSH
56224: LD_INT 2
56226: NEG
56227: PUSH
56228: LD_INT 1
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 3
56237: NEG
56238: PUSH
56239: LD_INT 0
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 3
56248: NEG
56249: PUSH
56250: LD_INT 1
56252: NEG
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 3
56260: NEG
56261: PUSH
56262: LD_INT 1
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 4
56271: NEG
56272: PUSH
56273: LD_INT 0
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 4
56282: NEG
56283: PUSH
56284: LD_INT 1
56286: NEG
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 4
56294: NEG
56295: PUSH
56296: LD_INT 1
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 5
56305: NEG
56306: PUSH
56307: LD_INT 0
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 5
56316: NEG
56317: PUSH
56318: LD_INT 1
56320: NEG
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 5
56328: NEG
56329: PUSH
56330: LD_INT 1
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 6
56339: NEG
56340: PUSH
56341: LD_INT 0
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 6
56350: NEG
56351: PUSH
56352: LD_INT 1
56354: NEG
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56374: LD_ADDR_VAR 0 34
56378: PUSH
56379: LD_INT 2
56381: NEG
56382: PUSH
56383: LD_INT 3
56385: NEG
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 3
56393: NEG
56394: PUSH
56395: LD_INT 2
56397: NEG
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 3
56405: NEG
56406: PUSH
56407: LD_INT 3
56409: NEG
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 3
56417: NEG
56418: PUSH
56419: LD_INT 4
56421: NEG
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 4
56429: NEG
56430: PUSH
56431: LD_INT 3
56433: NEG
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 4
56441: NEG
56442: PUSH
56443: LD_INT 4
56445: NEG
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 4
56453: NEG
56454: PUSH
56455: LD_INT 5
56457: NEG
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 5
56465: NEG
56466: PUSH
56467: LD_INT 4
56469: NEG
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 5
56477: NEG
56478: PUSH
56479: LD_INT 5
56481: NEG
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 5
56489: NEG
56490: PUSH
56491: LD_INT 6
56493: NEG
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 6
56501: NEG
56502: PUSH
56503: LD_INT 5
56505: NEG
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 6
56513: NEG
56514: PUSH
56515: LD_INT 6
56517: NEG
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56537: LD_ADDR_VAR 0 41
56541: PUSH
56542: LD_INT 0
56544: PUSH
56545: LD_INT 2
56547: NEG
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 1
56555: NEG
56556: PUSH
56557: LD_INT 3
56559: NEG
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 1
56567: PUSH
56568: LD_INT 2
56570: NEG
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: LIST
56580: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56581: LD_ADDR_VAR 0 42
56585: PUSH
56586: LD_INT 2
56588: PUSH
56589: LD_INT 0
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 2
56598: PUSH
56599: LD_INT 1
56601: NEG
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 3
56609: PUSH
56610: LD_INT 1
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: LIST
56621: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56622: LD_ADDR_VAR 0 43
56626: PUSH
56627: LD_INT 2
56629: PUSH
56630: LD_INT 2
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 3
56639: PUSH
56640: LD_INT 2
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 2
56649: PUSH
56650: LD_INT 3
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: LIST
56661: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56662: LD_ADDR_VAR 0 44
56666: PUSH
56667: LD_INT 0
56669: PUSH
56670: LD_INT 2
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 1
56679: PUSH
56680: LD_INT 3
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 1
56689: NEG
56690: PUSH
56691: LD_INT 2
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: LIST
56702: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56703: LD_ADDR_VAR 0 45
56707: PUSH
56708: LD_INT 2
56710: NEG
56711: PUSH
56712: LD_INT 0
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 2
56721: NEG
56722: PUSH
56723: LD_INT 1
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 3
56732: NEG
56733: PUSH
56734: LD_INT 1
56736: NEG
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: LIST
56746: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56747: LD_ADDR_VAR 0 46
56751: PUSH
56752: LD_INT 2
56754: NEG
56755: PUSH
56756: LD_INT 2
56758: NEG
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 2
56766: NEG
56767: PUSH
56768: LD_INT 3
56770: NEG
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 3
56778: NEG
56779: PUSH
56780: LD_INT 2
56782: NEG
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: LIST
56792: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56793: LD_ADDR_VAR 0 47
56797: PUSH
56798: LD_INT 2
56800: NEG
56801: PUSH
56802: LD_INT 3
56804: NEG
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 1
56812: NEG
56813: PUSH
56814: LD_INT 3
56816: NEG
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56826: LD_ADDR_VAR 0 48
56830: PUSH
56831: LD_INT 1
56833: PUSH
56834: LD_INT 2
56836: NEG
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 2
56844: PUSH
56845: LD_INT 1
56847: NEG
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56857: LD_ADDR_VAR 0 49
56861: PUSH
56862: LD_INT 3
56864: PUSH
56865: LD_INT 1
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 3
56874: PUSH
56875: LD_INT 2
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56886: LD_ADDR_VAR 0 50
56890: PUSH
56891: LD_INT 2
56893: PUSH
56894: LD_INT 3
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 1
56903: PUSH
56904: LD_INT 3
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56915: LD_ADDR_VAR 0 51
56919: PUSH
56920: LD_INT 1
56922: NEG
56923: PUSH
56924: LD_INT 2
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 2
56933: NEG
56934: PUSH
56935: LD_INT 1
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56946: LD_ADDR_VAR 0 52
56950: PUSH
56951: LD_INT 3
56953: NEG
56954: PUSH
56955: LD_INT 1
56957: NEG
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 3
56965: NEG
56966: PUSH
56967: LD_INT 2
56969: NEG
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56979: LD_ADDR_VAR 0 53
56983: PUSH
56984: LD_INT 1
56986: NEG
56987: PUSH
56988: LD_INT 3
56990: NEG
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 0
56998: PUSH
56999: LD_INT 3
57001: NEG
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 1
57009: PUSH
57010: LD_INT 2
57012: NEG
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: LIST
57022: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57023: LD_ADDR_VAR 0 54
57027: PUSH
57028: LD_INT 2
57030: PUSH
57031: LD_INT 1
57033: NEG
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 3
57041: PUSH
57042: LD_INT 0
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 3
57051: PUSH
57052: LD_INT 1
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: LIST
57063: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57064: LD_ADDR_VAR 0 55
57068: PUSH
57069: LD_INT 3
57071: PUSH
57072: LD_INT 2
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 3
57081: PUSH
57082: LD_INT 3
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 2
57091: PUSH
57092: LD_INT 3
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: LIST
57103: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57104: LD_ADDR_VAR 0 56
57108: PUSH
57109: LD_INT 1
57111: PUSH
57112: LD_INT 3
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 0
57121: PUSH
57122: LD_INT 3
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 1
57131: NEG
57132: PUSH
57133: LD_INT 2
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: LIST
57144: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57145: LD_ADDR_VAR 0 57
57149: PUSH
57150: LD_INT 2
57152: NEG
57153: PUSH
57154: LD_INT 1
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 3
57163: NEG
57164: PUSH
57165: LD_INT 0
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 3
57174: NEG
57175: PUSH
57176: LD_INT 1
57178: NEG
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: LIST
57188: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57189: LD_ADDR_VAR 0 58
57193: PUSH
57194: LD_INT 2
57196: NEG
57197: PUSH
57198: LD_INT 3
57200: NEG
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 3
57208: NEG
57209: PUSH
57210: LD_INT 2
57212: NEG
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 3
57220: NEG
57221: PUSH
57222: LD_INT 3
57224: NEG
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: LIST
57234: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57235: LD_ADDR_VAR 0 59
57239: PUSH
57240: LD_INT 1
57242: NEG
57243: PUSH
57244: LD_INT 2
57246: NEG
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 0
57254: PUSH
57255: LD_INT 2
57257: NEG
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 1
57265: PUSH
57266: LD_INT 1
57268: NEG
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: LIST
57278: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57279: LD_ADDR_VAR 0 60
57283: PUSH
57284: LD_INT 1
57286: PUSH
57287: LD_INT 1
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 2
57297: PUSH
57298: LD_INT 0
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 2
57307: PUSH
57308: LD_INT 1
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: LIST
57319: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57320: LD_ADDR_VAR 0 61
57324: PUSH
57325: LD_INT 2
57327: PUSH
57328: LD_INT 1
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 2
57337: PUSH
57338: LD_INT 2
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 1
57347: PUSH
57348: LD_INT 2
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: LIST
57359: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57360: LD_ADDR_VAR 0 62
57364: PUSH
57365: LD_INT 1
57367: PUSH
57368: LD_INT 2
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 0
57377: PUSH
57378: LD_INT 2
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 1
57387: NEG
57388: PUSH
57389: LD_INT 1
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: LIST
57400: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57401: LD_ADDR_VAR 0 63
57405: PUSH
57406: LD_INT 1
57408: NEG
57409: PUSH
57410: LD_INT 1
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 2
57419: NEG
57420: PUSH
57421: LD_INT 0
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 2
57430: NEG
57431: PUSH
57432: LD_INT 1
57434: NEG
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: LIST
57444: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57445: LD_ADDR_VAR 0 64
57449: PUSH
57450: LD_INT 1
57452: NEG
57453: PUSH
57454: LD_INT 2
57456: NEG
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 2
57464: NEG
57465: PUSH
57466: LD_INT 1
57468: NEG
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 2
57476: NEG
57477: PUSH
57478: LD_INT 2
57480: NEG
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: LIST
57490: ST_TO_ADDR
// end ; 2 :
57491: GO 60757
57493: LD_INT 2
57495: DOUBLE
57496: EQUAL
57497: IFTRUE 57501
57499: GO 60756
57501: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57502: LD_ADDR_VAR 0 29
57506: PUSH
57507: LD_INT 4
57509: PUSH
57510: LD_INT 0
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 4
57519: PUSH
57520: LD_INT 1
57522: NEG
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 5
57530: PUSH
57531: LD_INT 0
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 5
57540: PUSH
57541: LD_INT 1
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 4
57550: PUSH
57551: LD_INT 1
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 3
57560: PUSH
57561: LD_INT 0
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 3
57570: PUSH
57571: LD_INT 1
57573: NEG
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 3
57581: PUSH
57582: LD_INT 2
57584: NEG
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 5
57592: PUSH
57593: LD_INT 2
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 3
57602: PUSH
57603: LD_INT 3
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 3
57612: PUSH
57613: LD_INT 2
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 4
57622: PUSH
57623: LD_INT 3
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 4
57632: PUSH
57633: LD_INT 4
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 3
57642: PUSH
57643: LD_INT 4
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 2
57652: PUSH
57653: LD_INT 3
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 2
57662: PUSH
57663: LD_INT 2
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 4
57672: PUSH
57673: LD_INT 2
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 2
57682: PUSH
57683: LD_INT 4
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 0
57692: PUSH
57693: LD_INT 4
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 0
57702: PUSH
57703: LD_INT 3
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 1
57712: PUSH
57713: LD_INT 4
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 1
57722: PUSH
57723: LD_INT 5
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 0
57732: PUSH
57733: LD_INT 5
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 1
57742: NEG
57743: PUSH
57744: LD_INT 4
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 1
57753: NEG
57754: PUSH
57755: LD_INT 3
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 2
57764: PUSH
57765: LD_INT 5
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 2
57774: NEG
57775: PUSH
57776: LD_INT 3
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 3
57785: NEG
57786: PUSH
57787: LD_INT 0
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 3
57796: NEG
57797: PUSH
57798: LD_INT 1
57800: NEG
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 2
57808: NEG
57809: PUSH
57810: LD_INT 0
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 2
57819: NEG
57820: PUSH
57821: LD_INT 1
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 3
57830: NEG
57831: PUSH
57832: LD_INT 1
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 4
57841: NEG
57842: PUSH
57843: LD_INT 0
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 4
57852: NEG
57853: PUSH
57854: LD_INT 1
57856: NEG
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 4
57864: NEG
57865: PUSH
57866: LD_INT 2
57868: NEG
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 2
57876: NEG
57877: PUSH
57878: LD_INT 2
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 4
57887: NEG
57888: PUSH
57889: LD_INT 4
57891: NEG
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 4
57899: NEG
57900: PUSH
57901: LD_INT 5
57903: NEG
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 3
57911: NEG
57912: PUSH
57913: LD_INT 4
57915: NEG
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 3
57923: NEG
57924: PUSH
57925: LD_INT 3
57927: NEG
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 4
57935: NEG
57936: PUSH
57937: LD_INT 3
57939: NEG
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 5
57947: NEG
57948: PUSH
57949: LD_INT 4
57951: NEG
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 5
57959: NEG
57960: PUSH
57961: LD_INT 5
57963: NEG
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 3
57971: NEG
57972: PUSH
57973: LD_INT 5
57975: NEG
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 5
57983: NEG
57984: PUSH
57985: LD_INT 3
57987: NEG
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58040: LD_ADDR_VAR 0 30
58044: PUSH
58045: LD_INT 4
58047: PUSH
58048: LD_INT 4
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 4
58057: PUSH
58058: LD_INT 3
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 5
58067: PUSH
58068: LD_INT 4
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 5
58077: PUSH
58078: LD_INT 5
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 4
58087: PUSH
58088: LD_INT 5
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 3
58097: PUSH
58098: LD_INT 4
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 3
58107: PUSH
58108: LD_INT 3
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: LD_INT 5
58117: PUSH
58118: LD_INT 3
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 3
58127: PUSH
58128: LD_INT 5
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 0
58137: PUSH
58138: LD_INT 3
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 0
58147: PUSH
58148: LD_INT 2
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 1
58157: PUSH
58158: LD_INT 3
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 1
58167: PUSH
58168: LD_INT 4
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 0
58177: PUSH
58178: LD_INT 4
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 1
58187: NEG
58188: PUSH
58189: LD_INT 3
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 1
58198: NEG
58199: PUSH
58200: LD_INT 2
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 2
58209: PUSH
58210: LD_INT 4
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 2
58219: NEG
58220: PUSH
58221: LD_INT 2
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 4
58230: NEG
58231: PUSH
58232: LD_INT 0
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 4
58241: NEG
58242: PUSH
58243: LD_INT 1
58245: NEG
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 3
58253: NEG
58254: PUSH
58255: LD_INT 0
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 3
58264: NEG
58265: PUSH
58266: LD_INT 1
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 4
58275: NEG
58276: PUSH
58277: LD_INT 1
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 5
58286: NEG
58287: PUSH
58288: LD_INT 0
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 5
58297: NEG
58298: PUSH
58299: LD_INT 1
58301: NEG
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 5
58309: NEG
58310: PUSH
58311: LD_INT 2
58313: NEG
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 3
58321: NEG
58322: PUSH
58323: LD_INT 2
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 3
58332: NEG
58333: PUSH
58334: LD_INT 3
58336: NEG
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 3
58344: NEG
58345: PUSH
58346: LD_INT 4
58348: NEG
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 2
58356: NEG
58357: PUSH
58358: LD_INT 3
58360: NEG
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 2
58368: NEG
58369: PUSH
58370: LD_INT 2
58372: NEG
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 3
58380: NEG
58381: PUSH
58382: LD_INT 2
58384: NEG
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 4
58392: NEG
58393: PUSH
58394: LD_INT 3
58396: NEG
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 4
58404: NEG
58405: PUSH
58406: LD_INT 4
58408: NEG
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 2
58416: NEG
58417: PUSH
58418: LD_INT 4
58420: NEG
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 4
58428: NEG
58429: PUSH
58430: LD_INT 2
58432: NEG
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 0
58440: PUSH
58441: LD_INT 4
58443: NEG
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 0
58451: PUSH
58452: LD_INT 5
58454: NEG
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 1
58462: PUSH
58463: LD_INT 4
58465: NEG
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 1
58473: PUSH
58474: LD_INT 3
58476: NEG
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 0
58484: PUSH
58485: LD_INT 3
58487: NEG
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 1
58495: NEG
58496: PUSH
58497: LD_INT 4
58499: NEG
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 1
58507: NEG
58508: PUSH
58509: LD_INT 5
58511: NEG
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 2
58519: PUSH
58520: LD_INT 3
58522: NEG
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 2
58530: NEG
58531: PUSH
58532: LD_INT 5
58534: NEG
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58587: LD_ADDR_VAR 0 31
58591: PUSH
58592: LD_INT 0
58594: PUSH
58595: LD_INT 4
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 0
58604: PUSH
58605: LD_INT 3
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 1
58614: PUSH
58615: LD_INT 4
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 1
58624: PUSH
58625: LD_INT 5
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 0
58634: PUSH
58635: LD_INT 5
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 1
58644: NEG
58645: PUSH
58646: LD_INT 4
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 1
58655: NEG
58656: PUSH
58657: LD_INT 3
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 2
58666: PUSH
58667: LD_INT 5
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 2
58676: NEG
58677: PUSH
58678: LD_INT 3
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 3
58687: NEG
58688: PUSH
58689: LD_INT 0
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 3
58698: NEG
58699: PUSH
58700: LD_INT 1
58702: NEG
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 2
58710: NEG
58711: PUSH
58712: LD_INT 0
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 2
58721: NEG
58722: PUSH
58723: LD_INT 1
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 3
58732: NEG
58733: PUSH
58734: LD_INT 1
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 4
58743: NEG
58744: PUSH
58745: LD_INT 0
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 4
58754: NEG
58755: PUSH
58756: LD_INT 1
58758: NEG
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 4
58766: NEG
58767: PUSH
58768: LD_INT 2
58770: NEG
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 2
58778: NEG
58779: PUSH
58780: LD_INT 2
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 4
58789: NEG
58790: PUSH
58791: LD_INT 4
58793: NEG
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 4
58801: NEG
58802: PUSH
58803: LD_INT 5
58805: NEG
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 3
58813: NEG
58814: PUSH
58815: LD_INT 4
58817: NEG
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 3
58825: NEG
58826: PUSH
58827: LD_INT 3
58829: NEG
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 4
58837: NEG
58838: PUSH
58839: LD_INT 3
58841: NEG
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 5
58849: NEG
58850: PUSH
58851: LD_INT 4
58853: NEG
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 5
58861: NEG
58862: PUSH
58863: LD_INT 5
58865: NEG
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 3
58873: NEG
58874: PUSH
58875: LD_INT 5
58877: NEG
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 5
58885: NEG
58886: PUSH
58887: LD_INT 3
58889: NEG
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 0
58897: PUSH
58898: LD_INT 3
58900: NEG
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 0
58908: PUSH
58909: LD_INT 4
58911: NEG
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 1
58919: PUSH
58920: LD_INT 3
58922: NEG
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 1
58930: PUSH
58931: LD_INT 2
58933: NEG
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 0
58941: PUSH
58942: LD_INT 2
58944: NEG
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 1
58952: NEG
58953: PUSH
58954: LD_INT 3
58956: NEG
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 1
58964: NEG
58965: PUSH
58966: LD_INT 4
58968: NEG
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 2
58976: PUSH
58977: LD_INT 2
58979: NEG
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 2
58987: NEG
58988: PUSH
58989: LD_INT 4
58991: NEG
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 4
58999: PUSH
59000: LD_INT 0
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PUSH
59007: LD_INT 4
59009: PUSH
59010: LD_INT 1
59012: NEG
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 5
59020: PUSH
59021: LD_INT 0
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 5
59030: PUSH
59031: LD_INT 1
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 4
59040: PUSH
59041: LD_INT 1
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 3
59050: PUSH
59051: LD_INT 0
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 3
59060: PUSH
59061: LD_INT 1
59063: NEG
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 3
59071: PUSH
59072: LD_INT 2
59074: NEG
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 5
59082: PUSH
59083: LD_INT 2
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59137: LD_ADDR_VAR 0 32
59141: PUSH
59142: LD_INT 4
59144: NEG
59145: PUSH
59146: LD_INT 0
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: LD_INT 4
59155: NEG
59156: PUSH
59157: LD_INT 1
59159: NEG
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 3
59167: NEG
59168: PUSH
59169: LD_INT 0
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 3
59178: NEG
59179: PUSH
59180: LD_INT 1
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 4
59189: NEG
59190: PUSH
59191: LD_INT 1
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 5
59200: NEG
59201: PUSH
59202: LD_INT 0
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 5
59211: NEG
59212: PUSH
59213: LD_INT 1
59215: NEG
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 5
59223: NEG
59224: PUSH
59225: LD_INT 2
59227: NEG
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 3
59235: NEG
59236: PUSH
59237: LD_INT 2
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 3
59246: NEG
59247: PUSH
59248: LD_INT 3
59250: NEG
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 3
59258: NEG
59259: PUSH
59260: LD_INT 4
59262: NEG
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 2
59270: NEG
59271: PUSH
59272: LD_INT 3
59274: NEG
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 2
59282: NEG
59283: PUSH
59284: LD_INT 2
59286: NEG
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 3
59294: NEG
59295: PUSH
59296: LD_INT 2
59298: NEG
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 4
59306: NEG
59307: PUSH
59308: LD_INT 3
59310: NEG
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: LD_INT 4
59318: NEG
59319: PUSH
59320: LD_INT 4
59322: NEG
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 2
59330: NEG
59331: PUSH
59332: LD_INT 4
59334: NEG
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 4
59342: NEG
59343: PUSH
59344: LD_INT 2
59346: NEG
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 0
59354: PUSH
59355: LD_INT 4
59357: NEG
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 0
59365: PUSH
59366: LD_INT 5
59368: NEG
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 1
59376: PUSH
59377: LD_INT 4
59379: NEG
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 1
59387: PUSH
59388: LD_INT 3
59390: NEG
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 0
59398: PUSH
59399: LD_INT 3
59401: NEG
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: LD_INT 1
59409: NEG
59410: PUSH
59411: LD_INT 4
59413: NEG
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 1
59421: NEG
59422: PUSH
59423: LD_INT 5
59425: NEG
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 2
59433: PUSH
59434: LD_INT 3
59436: NEG
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 2
59444: NEG
59445: PUSH
59446: LD_INT 5
59448: NEG
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 3
59456: PUSH
59457: LD_INT 0
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 3
59466: PUSH
59467: LD_INT 1
59469: NEG
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: LD_INT 4
59477: PUSH
59478: LD_INT 0
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PUSH
59485: LD_INT 4
59487: PUSH
59488: LD_INT 1
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 3
59497: PUSH
59498: LD_INT 1
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 2
59507: PUSH
59508: LD_INT 0
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 2
59517: PUSH
59518: LD_INT 1
59520: NEG
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 2
59528: PUSH
59529: LD_INT 2
59531: NEG
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 4
59539: PUSH
59540: LD_INT 2
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 4
59549: PUSH
59550: LD_INT 4
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: LD_INT 4
59559: PUSH
59560: LD_INT 3
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 5
59569: PUSH
59570: LD_INT 4
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 5
59579: PUSH
59580: LD_INT 5
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 4
59589: PUSH
59590: LD_INT 5
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 3
59599: PUSH
59600: LD_INT 4
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 3
59609: PUSH
59610: LD_INT 3
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 5
59619: PUSH
59620: LD_INT 3
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 3
59629: PUSH
59630: LD_INT 5
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59684: LD_ADDR_VAR 0 33
59688: PUSH
59689: LD_INT 4
59691: NEG
59692: PUSH
59693: LD_INT 4
59695: NEG
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 4
59703: NEG
59704: PUSH
59705: LD_INT 5
59707: NEG
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 3
59715: NEG
59716: PUSH
59717: LD_INT 4
59719: NEG
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 3
59727: NEG
59728: PUSH
59729: LD_INT 3
59731: NEG
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 4
59739: NEG
59740: PUSH
59741: LD_INT 3
59743: NEG
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 5
59751: NEG
59752: PUSH
59753: LD_INT 4
59755: NEG
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 5
59763: NEG
59764: PUSH
59765: LD_INT 5
59767: NEG
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 3
59775: NEG
59776: PUSH
59777: LD_INT 5
59779: NEG
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 5
59787: NEG
59788: PUSH
59789: LD_INT 3
59791: NEG
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 0
59799: PUSH
59800: LD_INT 3
59802: NEG
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 0
59810: PUSH
59811: LD_INT 4
59813: NEG
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 1
59821: PUSH
59822: LD_INT 3
59824: NEG
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 1
59832: PUSH
59833: LD_INT 2
59835: NEG
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 0
59843: PUSH
59844: LD_INT 2
59846: NEG
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 1
59854: NEG
59855: PUSH
59856: LD_INT 3
59858: NEG
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 1
59866: NEG
59867: PUSH
59868: LD_INT 4
59870: NEG
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 2
59878: PUSH
59879: LD_INT 2
59881: NEG
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 2
59889: NEG
59890: PUSH
59891: LD_INT 4
59893: NEG
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 4
59901: PUSH
59902: LD_INT 0
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 4
59911: PUSH
59912: LD_INT 1
59914: NEG
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 5
59922: PUSH
59923: LD_INT 0
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: LD_INT 5
59932: PUSH
59933: LD_INT 1
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 4
59942: PUSH
59943: LD_INT 1
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 3
59952: PUSH
59953: LD_INT 0
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 3
59962: PUSH
59963: LD_INT 1
59965: NEG
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 3
59973: PUSH
59974: LD_INT 2
59976: NEG
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 5
59984: PUSH
59985: LD_INT 2
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 3
59994: PUSH
59995: LD_INT 3
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 3
60004: PUSH
60005: LD_INT 2
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 4
60014: PUSH
60015: LD_INT 3
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 4
60024: PUSH
60025: LD_INT 4
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 3
60034: PUSH
60035: LD_INT 4
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 2
60044: PUSH
60045: LD_INT 3
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 2
60054: PUSH
60055: LD_INT 2
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 4
60064: PUSH
60065: LD_INT 2
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 2
60074: PUSH
60075: LD_INT 4
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 0
60084: PUSH
60085: LD_INT 4
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 0
60094: PUSH
60095: LD_INT 3
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 1
60104: PUSH
60105: LD_INT 4
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 1
60114: PUSH
60115: LD_INT 5
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 0
60124: PUSH
60125: LD_INT 5
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 1
60134: NEG
60135: PUSH
60136: LD_INT 4
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 1
60145: NEG
60146: PUSH
60147: LD_INT 3
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 2
60156: PUSH
60157: LD_INT 5
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 2
60166: NEG
60167: PUSH
60168: LD_INT 3
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60222: LD_ADDR_VAR 0 34
60226: PUSH
60227: LD_INT 0
60229: PUSH
60230: LD_INT 4
60232: NEG
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 0
60240: PUSH
60241: LD_INT 5
60243: NEG
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 1
60251: PUSH
60252: LD_INT 4
60254: NEG
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 1
60262: PUSH
60263: LD_INT 3
60265: NEG
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 0
60273: PUSH
60274: LD_INT 3
60276: NEG
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 1
60284: NEG
60285: PUSH
60286: LD_INT 4
60288: NEG
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 1
60296: NEG
60297: PUSH
60298: LD_INT 5
60300: NEG
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 2
60308: PUSH
60309: LD_INT 3
60311: NEG
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 2
60319: NEG
60320: PUSH
60321: LD_INT 5
60323: NEG
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 3
60331: PUSH
60332: LD_INT 0
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 3
60341: PUSH
60342: LD_INT 1
60344: NEG
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 4
60352: PUSH
60353: LD_INT 0
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 4
60362: PUSH
60363: LD_INT 1
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: LD_INT 3
60372: PUSH
60373: LD_INT 1
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 2
60382: PUSH
60383: LD_INT 0
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PUSH
60390: LD_INT 2
60392: PUSH
60393: LD_INT 1
60395: NEG
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: LD_INT 2
60403: PUSH
60404: LD_INT 2
60406: NEG
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 4
60414: PUSH
60415: LD_INT 2
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 4
60424: PUSH
60425: LD_INT 4
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 4
60434: PUSH
60435: LD_INT 3
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 5
60444: PUSH
60445: LD_INT 4
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 5
60454: PUSH
60455: LD_INT 5
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: LD_INT 4
60464: PUSH
60465: LD_INT 5
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 3
60474: PUSH
60475: LD_INT 4
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: LD_INT 3
60484: PUSH
60485: LD_INT 3
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 5
60494: PUSH
60495: LD_INT 3
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 3
60504: PUSH
60505: LD_INT 5
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 0
60514: PUSH
60515: LD_INT 3
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 0
60524: PUSH
60525: LD_INT 2
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 1
60534: PUSH
60535: LD_INT 3
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 1
60544: PUSH
60545: LD_INT 4
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 0
60554: PUSH
60555: LD_INT 4
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 1
60564: NEG
60565: PUSH
60566: LD_INT 3
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PUSH
60573: LD_INT 1
60575: NEG
60576: PUSH
60577: LD_INT 2
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PUSH
60584: LD_INT 2
60586: PUSH
60587: LD_INT 4
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: LD_INT 2
60596: NEG
60597: PUSH
60598: LD_INT 2
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 4
60607: NEG
60608: PUSH
60609: LD_INT 0
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 4
60618: NEG
60619: PUSH
60620: LD_INT 1
60622: NEG
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 3
60630: NEG
60631: PUSH
60632: LD_INT 0
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 3
60641: NEG
60642: PUSH
60643: LD_INT 1
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 4
60652: NEG
60653: PUSH
60654: LD_INT 1
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 5
60663: NEG
60664: PUSH
60665: LD_INT 0
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 5
60674: NEG
60675: PUSH
60676: LD_INT 1
60678: NEG
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 5
60686: NEG
60687: PUSH
60688: LD_INT 2
60690: NEG
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 3
60698: NEG
60699: PUSH
60700: LD_INT 2
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: ST_TO_ADDR
// end ; end ;
60754: GO 60757
60756: POP
// case btype of b_depot , b_warehouse :
60757: LD_VAR 0 1
60761: PUSH
60762: LD_INT 0
60764: DOUBLE
60765: EQUAL
60766: IFTRUE 60776
60768: LD_INT 1
60770: DOUBLE
60771: EQUAL
60772: IFTRUE 60776
60774: GO 60977
60776: POP
// case nation of nation_american :
60777: LD_VAR 0 5
60781: PUSH
60782: LD_INT 1
60784: DOUBLE
60785: EQUAL
60786: IFTRUE 60790
60788: GO 60846
60790: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60791: LD_ADDR_VAR 0 9
60795: PUSH
60796: LD_VAR 0 11
60800: PUSH
60801: LD_VAR 0 12
60805: PUSH
60806: LD_VAR 0 13
60810: PUSH
60811: LD_VAR 0 14
60815: PUSH
60816: LD_VAR 0 15
60820: PUSH
60821: LD_VAR 0 16
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: PUSH
60834: LD_VAR 0 4
60838: PUSH
60839: LD_INT 1
60841: PLUS
60842: ARRAY
60843: ST_TO_ADDR
60844: GO 60975
60846: LD_INT 2
60848: DOUBLE
60849: EQUAL
60850: IFTRUE 60854
60852: GO 60910
60854: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60855: LD_ADDR_VAR 0 9
60859: PUSH
60860: LD_VAR 0 17
60864: PUSH
60865: LD_VAR 0 18
60869: PUSH
60870: LD_VAR 0 19
60874: PUSH
60875: LD_VAR 0 20
60879: PUSH
60880: LD_VAR 0 21
60884: PUSH
60885: LD_VAR 0 22
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: PUSH
60898: LD_VAR 0 4
60902: PUSH
60903: LD_INT 1
60905: PLUS
60906: ARRAY
60907: ST_TO_ADDR
60908: GO 60975
60910: LD_INT 3
60912: DOUBLE
60913: EQUAL
60914: IFTRUE 60918
60916: GO 60974
60918: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60919: LD_ADDR_VAR 0 9
60923: PUSH
60924: LD_VAR 0 23
60928: PUSH
60929: LD_VAR 0 24
60933: PUSH
60934: LD_VAR 0 25
60938: PUSH
60939: LD_VAR 0 26
60943: PUSH
60944: LD_VAR 0 27
60948: PUSH
60949: LD_VAR 0 28
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: LIST
60960: LIST
60961: PUSH
60962: LD_VAR 0 4
60966: PUSH
60967: LD_INT 1
60969: PLUS
60970: ARRAY
60971: ST_TO_ADDR
60972: GO 60975
60974: POP
60975: GO 61530
60977: LD_INT 2
60979: DOUBLE
60980: EQUAL
60981: IFTRUE 60991
60983: LD_INT 3
60985: DOUBLE
60986: EQUAL
60987: IFTRUE 60991
60989: GO 61047
60991: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60992: LD_ADDR_VAR 0 9
60996: PUSH
60997: LD_VAR 0 29
61001: PUSH
61002: LD_VAR 0 30
61006: PUSH
61007: LD_VAR 0 31
61011: PUSH
61012: LD_VAR 0 32
61016: PUSH
61017: LD_VAR 0 33
61021: PUSH
61022: LD_VAR 0 34
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: PUSH
61035: LD_VAR 0 4
61039: PUSH
61040: LD_INT 1
61042: PLUS
61043: ARRAY
61044: ST_TO_ADDR
61045: GO 61530
61047: LD_INT 16
61049: DOUBLE
61050: EQUAL
61051: IFTRUE 61109
61053: LD_INT 17
61055: DOUBLE
61056: EQUAL
61057: IFTRUE 61109
61059: LD_INT 18
61061: DOUBLE
61062: EQUAL
61063: IFTRUE 61109
61065: LD_INT 19
61067: DOUBLE
61068: EQUAL
61069: IFTRUE 61109
61071: LD_INT 22
61073: DOUBLE
61074: EQUAL
61075: IFTRUE 61109
61077: LD_INT 20
61079: DOUBLE
61080: EQUAL
61081: IFTRUE 61109
61083: LD_INT 21
61085: DOUBLE
61086: EQUAL
61087: IFTRUE 61109
61089: LD_INT 23
61091: DOUBLE
61092: EQUAL
61093: IFTRUE 61109
61095: LD_INT 24
61097: DOUBLE
61098: EQUAL
61099: IFTRUE 61109
61101: LD_INT 25
61103: DOUBLE
61104: EQUAL
61105: IFTRUE 61109
61107: GO 61165
61109: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61110: LD_ADDR_VAR 0 9
61114: PUSH
61115: LD_VAR 0 35
61119: PUSH
61120: LD_VAR 0 36
61124: PUSH
61125: LD_VAR 0 37
61129: PUSH
61130: LD_VAR 0 38
61134: PUSH
61135: LD_VAR 0 39
61139: PUSH
61140: LD_VAR 0 40
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: PUSH
61153: LD_VAR 0 4
61157: PUSH
61158: LD_INT 1
61160: PLUS
61161: ARRAY
61162: ST_TO_ADDR
61163: GO 61530
61165: LD_INT 6
61167: DOUBLE
61168: EQUAL
61169: IFTRUE 61221
61171: LD_INT 7
61173: DOUBLE
61174: EQUAL
61175: IFTRUE 61221
61177: LD_INT 8
61179: DOUBLE
61180: EQUAL
61181: IFTRUE 61221
61183: LD_INT 13
61185: DOUBLE
61186: EQUAL
61187: IFTRUE 61221
61189: LD_INT 12
61191: DOUBLE
61192: EQUAL
61193: IFTRUE 61221
61195: LD_INT 15
61197: DOUBLE
61198: EQUAL
61199: IFTRUE 61221
61201: LD_INT 11
61203: DOUBLE
61204: EQUAL
61205: IFTRUE 61221
61207: LD_INT 14
61209: DOUBLE
61210: EQUAL
61211: IFTRUE 61221
61213: LD_INT 10
61215: DOUBLE
61216: EQUAL
61217: IFTRUE 61221
61219: GO 61277
61221: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61222: LD_ADDR_VAR 0 9
61226: PUSH
61227: LD_VAR 0 41
61231: PUSH
61232: LD_VAR 0 42
61236: PUSH
61237: LD_VAR 0 43
61241: PUSH
61242: LD_VAR 0 44
61246: PUSH
61247: LD_VAR 0 45
61251: PUSH
61252: LD_VAR 0 46
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: PUSH
61265: LD_VAR 0 4
61269: PUSH
61270: LD_INT 1
61272: PLUS
61273: ARRAY
61274: ST_TO_ADDR
61275: GO 61530
61277: LD_INT 36
61279: DOUBLE
61280: EQUAL
61281: IFTRUE 61285
61283: GO 61341
61285: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61286: LD_ADDR_VAR 0 9
61290: PUSH
61291: LD_VAR 0 47
61295: PUSH
61296: LD_VAR 0 48
61300: PUSH
61301: LD_VAR 0 49
61305: PUSH
61306: LD_VAR 0 50
61310: PUSH
61311: LD_VAR 0 51
61315: PUSH
61316: LD_VAR 0 52
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: PUSH
61329: LD_VAR 0 4
61333: PUSH
61334: LD_INT 1
61336: PLUS
61337: ARRAY
61338: ST_TO_ADDR
61339: GO 61530
61341: LD_INT 4
61343: DOUBLE
61344: EQUAL
61345: IFTRUE 61367
61347: LD_INT 5
61349: DOUBLE
61350: EQUAL
61351: IFTRUE 61367
61353: LD_INT 34
61355: DOUBLE
61356: EQUAL
61357: IFTRUE 61367
61359: LD_INT 37
61361: DOUBLE
61362: EQUAL
61363: IFTRUE 61367
61365: GO 61423
61367: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61368: LD_ADDR_VAR 0 9
61372: PUSH
61373: LD_VAR 0 53
61377: PUSH
61378: LD_VAR 0 54
61382: PUSH
61383: LD_VAR 0 55
61387: PUSH
61388: LD_VAR 0 56
61392: PUSH
61393: LD_VAR 0 57
61397: PUSH
61398: LD_VAR 0 58
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: PUSH
61411: LD_VAR 0 4
61415: PUSH
61416: LD_INT 1
61418: PLUS
61419: ARRAY
61420: ST_TO_ADDR
61421: GO 61530
61423: LD_INT 31
61425: DOUBLE
61426: EQUAL
61427: IFTRUE 61473
61429: LD_INT 32
61431: DOUBLE
61432: EQUAL
61433: IFTRUE 61473
61435: LD_INT 33
61437: DOUBLE
61438: EQUAL
61439: IFTRUE 61473
61441: LD_INT 27
61443: DOUBLE
61444: EQUAL
61445: IFTRUE 61473
61447: LD_INT 26
61449: DOUBLE
61450: EQUAL
61451: IFTRUE 61473
61453: LD_INT 28
61455: DOUBLE
61456: EQUAL
61457: IFTRUE 61473
61459: LD_INT 29
61461: DOUBLE
61462: EQUAL
61463: IFTRUE 61473
61465: LD_INT 30
61467: DOUBLE
61468: EQUAL
61469: IFTRUE 61473
61471: GO 61529
61473: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61474: LD_ADDR_VAR 0 9
61478: PUSH
61479: LD_VAR 0 59
61483: PUSH
61484: LD_VAR 0 60
61488: PUSH
61489: LD_VAR 0 61
61493: PUSH
61494: LD_VAR 0 62
61498: PUSH
61499: LD_VAR 0 63
61503: PUSH
61504: LD_VAR 0 64
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: PUSH
61517: LD_VAR 0 4
61521: PUSH
61522: LD_INT 1
61524: PLUS
61525: ARRAY
61526: ST_TO_ADDR
61527: GO 61530
61529: POP
// temp_list2 = [ ] ;
61530: LD_ADDR_VAR 0 10
61534: PUSH
61535: EMPTY
61536: ST_TO_ADDR
// for i in temp_list do
61537: LD_ADDR_VAR 0 8
61541: PUSH
61542: LD_VAR 0 9
61546: PUSH
61547: FOR_IN
61548: IFFALSE 61600
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61550: LD_ADDR_VAR 0 10
61554: PUSH
61555: LD_VAR 0 10
61559: PUSH
61560: LD_VAR 0 8
61564: PUSH
61565: LD_INT 1
61567: ARRAY
61568: PUSH
61569: LD_VAR 0 2
61573: PLUS
61574: PUSH
61575: LD_VAR 0 8
61579: PUSH
61580: LD_INT 2
61582: ARRAY
61583: PUSH
61584: LD_VAR 0 3
61588: PLUS
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: EMPTY
61595: LIST
61596: ADD
61597: ST_TO_ADDR
61598: GO 61547
61600: POP
61601: POP
// result = temp_list2 ;
61602: LD_ADDR_VAR 0 7
61606: PUSH
61607: LD_VAR 0 10
61611: ST_TO_ADDR
// end ;
61612: LD_VAR 0 7
61616: RET
// export function EnemyInRange ( unit , dist ) ; begin
61617: LD_INT 0
61619: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61620: LD_ADDR_VAR 0 3
61624: PUSH
61625: LD_VAR 0 1
61629: PPUSH
61630: CALL_OW 255
61634: PPUSH
61635: LD_VAR 0 1
61639: PPUSH
61640: CALL_OW 250
61644: PPUSH
61645: LD_VAR 0 1
61649: PPUSH
61650: CALL_OW 251
61654: PPUSH
61655: LD_VAR 0 2
61659: PPUSH
61660: CALL 35401 0 4
61664: PUSH
61665: LD_INT 4
61667: ARRAY
61668: ST_TO_ADDR
// end ;
61669: LD_VAR 0 3
61673: RET
// export function PlayerSeeMe ( unit ) ; begin
61674: LD_INT 0
61676: PPUSH
// result := See ( your_side , unit ) ;
61677: LD_ADDR_VAR 0 2
61681: PUSH
61682: LD_OWVAR 2
61686: PPUSH
61687: LD_VAR 0 1
61691: PPUSH
61692: CALL_OW 292
61696: ST_TO_ADDR
// end ;
61697: LD_VAR 0 2
61701: RET
// export function ReverseDir ( unit ) ; begin
61702: LD_INT 0
61704: PPUSH
// if not unit then
61705: LD_VAR 0 1
61709: NOT
61710: IFFALSE 61714
// exit ;
61712: GO 61737
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61714: LD_ADDR_VAR 0 2
61718: PUSH
61719: LD_VAR 0 1
61723: PPUSH
61724: CALL_OW 254
61728: PUSH
61729: LD_INT 3
61731: PLUS
61732: PUSH
61733: LD_INT 6
61735: MOD
61736: ST_TO_ADDR
// end ;
61737: LD_VAR 0 2
61741: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
61742: LD_INT 0
61744: PPUSH
61745: PPUSH
61746: PPUSH
61747: PPUSH
61748: PPUSH
// if not hexes then
61749: LD_VAR 0 2
61753: NOT
61754: IFFALSE 61758
// exit ;
61756: GO 61906
// dist := 9999 ;
61758: LD_ADDR_VAR 0 5
61762: PUSH
61763: LD_INT 9999
61765: ST_TO_ADDR
// for i = 1 to hexes do
61766: LD_ADDR_VAR 0 4
61770: PUSH
61771: DOUBLE
61772: LD_INT 1
61774: DEC
61775: ST_TO_ADDR
61776: LD_VAR 0 2
61780: PUSH
61781: FOR_TO
61782: IFFALSE 61894
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
61784: LD_VAR 0 1
61788: PPUSH
61789: LD_VAR 0 2
61793: PUSH
61794: LD_VAR 0 4
61798: ARRAY
61799: PUSH
61800: LD_INT 1
61802: ARRAY
61803: PPUSH
61804: LD_VAR 0 2
61808: PUSH
61809: LD_VAR 0 4
61813: ARRAY
61814: PUSH
61815: LD_INT 2
61817: ARRAY
61818: PPUSH
61819: CALL_OW 297
61823: PUSH
61824: LD_VAR 0 5
61828: LESS
61829: IFFALSE 61892
// begin hex := hexes [ i ] ;
61831: LD_ADDR_VAR 0 7
61835: PUSH
61836: LD_VAR 0 2
61840: PUSH
61841: LD_VAR 0 4
61845: ARRAY
61846: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61847: LD_ADDR_VAR 0 5
61851: PUSH
61852: LD_VAR 0 1
61856: PPUSH
61857: LD_VAR 0 2
61861: PUSH
61862: LD_VAR 0 4
61866: ARRAY
61867: PUSH
61868: LD_INT 1
61870: ARRAY
61871: PPUSH
61872: LD_VAR 0 2
61876: PUSH
61877: LD_VAR 0 4
61881: ARRAY
61882: PUSH
61883: LD_INT 2
61885: ARRAY
61886: PPUSH
61887: CALL_OW 297
61891: ST_TO_ADDR
// end ; end ;
61892: GO 61781
61894: POP
61895: POP
// result := hex ;
61896: LD_ADDR_VAR 0 3
61900: PUSH
61901: LD_VAR 0 7
61905: ST_TO_ADDR
// end ;
61906: LD_VAR 0 3
61910: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61911: LD_INT 0
61913: PPUSH
61914: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61915: LD_VAR 0 1
61919: NOT
61920: PUSH
61921: LD_VAR 0 1
61925: PUSH
61926: LD_INT 21
61928: PUSH
61929: LD_INT 2
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 23
61938: PUSH
61939: LD_INT 2
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PPUSH
61950: CALL_OW 69
61954: IN
61955: NOT
61956: OR
61957: IFFALSE 61961
// exit ;
61959: GO 62008
// for i = 1 to 3 do
61961: LD_ADDR_VAR 0 3
61965: PUSH
61966: DOUBLE
61967: LD_INT 1
61969: DEC
61970: ST_TO_ADDR
61971: LD_INT 3
61973: PUSH
61974: FOR_TO
61975: IFFALSE 62006
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61977: LD_VAR 0 1
61981: PPUSH
61982: CALL_OW 250
61986: PPUSH
61987: LD_VAR 0 1
61991: PPUSH
61992: CALL_OW 251
61996: PPUSH
61997: LD_INT 1
61999: PPUSH
62000: CALL_OW 453
62004: GO 61974
62006: POP
62007: POP
// end ;
62008: LD_VAR 0 2
62012: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62013: LD_INT 0
62015: PPUSH
62016: PPUSH
62017: PPUSH
62018: PPUSH
62019: PPUSH
62020: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62021: LD_VAR 0 1
62025: NOT
62026: PUSH
62027: LD_VAR 0 2
62031: NOT
62032: OR
62033: PUSH
62034: LD_VAR 0 1
62038: PPUSH
62039: CALL_OW 314
62043: OR
62044: IFFALSE 62048
// exit ;
62046: GO 62489
// x := GetX ( enemy_unit ) ;
62048: LD_ADDR_VAR 0 7
62052: PUSH
62053: LD_VAR 0 2
62057: PPUSH
62058: CALL_OW 250
62062: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62063: LD_ADDR_VAR 0 8
62067: PUSH
62068: LD_VAR 0 2
62072: PPUSH
62073: CALL_OW 251
62077: ST_TO_ADDR
// if not x or not y then
62078: LD_VAR 0 7
62082: NOT
62083: PUSH
62084: LD_VAR 0 8
62088: NOT
62089: OR
62090: IFFALSE 62094
// exit ;
62092: GO 62489
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62094: LD_ADDR_VAR 0 6
62098: PUSH
62099: LD_VAR 0 7
62103: PPUSH
62104: LD_INT 0
62106: PPUSH
62107: LD_INT 4
62109: PPUSH
62110: CALL_OW 272
62114: PUSH
62115: LD_VAR 0 8
62119: PPUSH
62120: LD_INT 0
62122: PPUSH
62123: LD_INT 4
62125: PPUSH
62126: CALL_OW 273
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_VAR 0 7
62139: PPUSH
62140: LD_INT 1
62142: PPUSH
62143: LD_INT 4
62145: PPUSH
62146: CALL_OW 272
62150: PUSH
62151: LD_VAR 0 8
62155: PPUSH
62156: LD_INT 1
62158: PPUSH
62159: LD_INT 4
62161: PPUSH
62162: CALL_OW 273
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_VAR 0 7
62175: PPUSH
62176: LD_INT 2
62178: PPUSH
62179: LD_INT 4
62181: PPUSH
62182: CALL_OW 272
62186: PUSH
62187: LD_VAR 0 8
62191: PPUSH
62192: LD_INT 2
62194: PPUSH
62195: LD_INT 4
62197: PPUSH
62198: CALL_OW 273
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: LD_VAR 0 7
62211: PPUSH
62212: LD_INT 3
62214: PPUSH
62215: LD_INT 4
62217: PPUSH
62218: CALL_OW 272
62222: PUSH
62223: LD_VAR 0 8
62227: PPUSH
62228: LD_INT 3
62230: PPUSH
62231: LD_INT 4
62233: PPUSH
62234: CALL_OW 273
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_VAR 0 7
62247: PPUSH
62248: LD_INT 4
62250: PPUSH
62251: LD_INT 4
62253: PPUSH
62254: CALL_OW 272
62258: PUSH
62259: LD_VAR 0 8
62263: PPUSH
62264: LD_INT 4
62266: PPUSH
62267: LD_INT 4
62269: PPUSH
62270: CALL_OW 273
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_VAR 0 7
62283: PPUSH
62284: LD_INT 5
62286: PPUSH
62287: LD_INT 4
62289: PPUSH
62290: CALL_OW 272
62294: PUSH
62295: LD_VAR 0 8
62299: PPUSH
62300: LD_INT 5
62302: PPUSH
62303: LD_INT 4
62305: PPUSH
62306: CALL_OW 273
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: ST_TO_ADDR
// for i = tmp downto 1 do
62323: LD_ADDR_VAR 0 4
62327: PUSH
62328: DOUBLE
62329: LD_VAR 0 6
62333: INC
62334: ST_TO_ADDR
62335: LD_INT 1
62337: PUSH
62338: FOR_DOWNTO
62339: IFFALSE 62440
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62341: LD_VAR 0 6
62345: PUSH
62346: LD_VAR 0 4
62350: ARRAY
62351: PUSH
62352: LD_INT 1
62354: ARRAY
62355: PPUSH
62356: LD_VAR 0 6
62360: PUSH
62361: LD_VAR 0 4
62365: ARRAY
62366: PUSH
62367: LD_INT 2
62369: ARRAY
62370: PPUSH
62371: CALL_OW 488
62375: NOT
62376: PUSH
62377: LD_VAR 0 6
62381: PUSH
62382: LD_VAR 0 4
62386: ARRAY
62387: PUSH
62388: LD_INT 1
62390: ARRAY
62391: PPUSH
62392: LD_VAR 0 6
62396: PUSH
62397: LD_VAR 0 4
62401: ARRAY
62402: PUSH
62403: LD_INT 2
62405: ARRAY
62406: PPUSH
62407: CALL_OW 428
62411: PUSH
62412: LD_INT 0
62414: NONEQUAL
62415: OR
62416: IFFALSE 62438
// tmp := Delete ( tmp , i ) ;
62418: LD_ADDR_VAR 0 6
62422: PUSH
62423: LD_VAR 0 6
62427: PPUSH
62428: LD_VAR 0 4
62432: PPUSH
62433: CALL_OW 3
62437: ST_TO_ADDR
62438: GO 62338
62440: POP
62441: POP
// j := GetClosestHex ( unit , tmp ) ;
62442: LD_ADDR_VAR 0 5
62446: PUSH
62447: LD_VAR 0 1
62451: PPUSH
62452: LD_VAR 0 6
62456: PPUSH
62457: CALL 61742 0 2
62461: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62462: LD_VAR 0 1
62466: PPUSH
62467: LD_VAR 0 5
62471: PUSH
62472: LD_INT 1
62474: ARRAY
62475: PPUSH
62476: LD_VAR 0 5
62480: PUSH
62481: LD_INT 2
62483: ARRAY
62484: PPUSH
62485: CALL_OW 111
// end ;
62489: LD_VAR 0 3
62493: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62494: LD_INT 0
62496: PPUSH
62497: PPUSH
62498: PPUSH
// uc_side = 0 ;
62499: LD_ADDR_OWVAR 20
62503: PUSH
62504: LD_INT 0
62506: ST_TO_ADDR
// uc_nation = 0 ;
62507: LD_ADDR_OWVAR 21
62511: PUSH
62512: LD_INT 0
62514: ST_TO_ADDR
// InitHc_All ( ) ;
62515: CALL_OW 584
// InitVc ;
62519: CALL_OW 20
// if mastodonts then
62523: LD_VAR 0 6
62527: IFFALSE 62594
// for i = 1 to mastodonts do
62529: LD_ADDR_VAR 0 11
62533: PUSH
62534: DOUBLE
62535: LD_INT 1
62537: DEC
62538: ST_TO_ADDR
62539: LD_VAR 0 6
62543: PUSH
62544: FOR_TO
62545: IFFALSE 62592
// begin vc_chassis := 31 ;
62547: LD_ADDR_OWVAR 37
62551: PUSH
62552: LD_INT 31
62554: ST_TO_ADDR
// vc_control := control_rider ;
62555: LD_ADDR_OWVAR 38
62559: PUSH
62560: LD_INT 4
62562: ST_TO_ADDR
// animal := CreateVehicle ;
62563: LD_ADDR_VAR 0 12
62567: PUSH
62568: CALL_OW 45
62572: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62573: LD_VAR 0 12
62577: PPUSH
62578: LD_VAR 0 8
62582: PPUSH
62583: LD_INT 0
62585: PPUSH
62586: CALL 64782 0 3
// end ;
62590: GO 62544
62592: POP
62593: POP
// if horses then
62594: LD_VAR 0 5
62598: IFFALSE 62665
// for i = 1 to horses do
62600: LD_ADDR_VAR 0 11
62604: PUSH
62605: DOUBLE
62606: LD_INT 1
62608: DEC
62609: ST_TO_ADDR
62610: LD_VAR 0 5
62614: PUSH
62615: FOR_TO
62616: IFFALSE 62663
// begin hc_class := 21 ;
62618: LD_ADDR_OWVAR 28
62622: PUSH
62623: LD_INT 21
62625: ST_TO_ADDR
// hc_gallery :=  ;
62626: LD_ADDR_OWVAR 33
62630: PUSH
62631: LD_STRING 
62633: ST_TO_ADDR
// animal := CreateHuman ;
62634: LD_ADDR_VAR 0 12
62638: PUSH
62639: CALL_OW 44
62643: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62644: LD_VAR 0 12
62648: PPUSH
62649: LD_VAR 0 8
62653: PPUSH
62654: LD_INT 0
62656: PPUSH
62657: CALL 64782 0 3
// end ;
62661: GO 62615
62663: POP
62664: POP
// if birds then
62665: LD_VAR 0 1
62669: IFFALSE 62736
// for i = 1 to birds do
62671: LD_ADDR_VAR 0 11
62675: PUSH
62676: DOUBLE
62677: LD_INT 1
62679: DEC
62680: ST_TO_ADDR
62681: LD_VAR 0 1
62685: PUSH
62686: FOR_TO
62687: IFFALSE 62734
// begin hc_class = 18 ;
62689: LD_ADDR_OWVAR 28
62693: PUSH
62694: LD_INT 18
62696: ST_TO_ADDR
// hc_gallery =  ;
62697: LD_ADDR_OWVAR 33
62701: PUSH
62702: LD_STRING 
62704: ST_TO_ADDR
// animal := CreateHuman ;
62705: LD_ADDR_VAR 0 12
62709: PUSH
62710: CALL_OW 44
62714: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62715: LD_VAR 0 12
62719: PPUSH
62720: LD_VAR 0 8
62724: PPUSH
62725: LD_INT 0
62727: PPUSH
62728: CALL 64782 0 3
// end ;
62732: GO 62686
62734: POP
62735: POP
// if tigers then
62736: LD_VAR 0 2
62740: IFFALSE 62824
// for i = 1 to tigers do
62742: LD_ADDR_VAR 0 11
62746: PUSH
62747: DOUBLE
62748: LD_INT 1
62750: DEC
62751: ST_TO_ADDR
62752: LD_VAR 0 2
62756: PUSH
62757: FOR_TO
62758: IFFALSE 62822
// begin hc_class = class_tiger ;
62760: LD_ADDR_OWVAR 28
62764: PUSH
62765: LD_INT 14
62767: ST_TO_ADDR
// hc_gallery =  ;
62768: LD_ADDR_OWVAR 33
62772: PUSH
62773: LD_STRING 
62775: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62776: LD_ADDR_OWVAR 35
62780: PUSH
62781: LD_INT 7
62783: NEG
62784: PPUSH
62785: LD_INT 7
62787: PPUSH
62788: CALL_OW 12
62792: ST_TO_ADDR
// animal := CreateHuman ;
62793: LD_ADDR_VAR 0 12
62797: PUSH
62798: CALL_OW 44
62802: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62803: LD_VAR 0 12
62807: PPUSH
62808: LD_VAR 0 8
62812: PPUSH
62813: LD_INT 0
62815: PPUSH
62816: CALL 64782 0 3
// end ;
62820: GO 62757
62822: POP
62823: POP
// if apemans then
62824: LD_VAR 0 3
62828: IFFALSE 62951
// for i = 1 to apemans do
62830: LD_ADDR_VAR 0 11
62834: PUSH
62835: DOUBLE
62836: LD_INT 1
62838: DEC
62839: ST_TO_ADDR
62840: LD_VAR 0 3
62844: PUSH
62845: FOR_TO
62846: IFFALSE 62949
// begin hc_class = class_apeman ;
62848: LD_ADDR_OWVAR 28
62852: PUSH
62853: LD_INT 12
62855: ST_TO_ADDR
// hc_gallery =  ;
62856: LD_ADDR_OWVAR 33
62860: PUSH
62861: LD_STRING 
62863: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
62864: LD_ADDR_OWVAR 35
62868: PUSH
62869: LD_INT 5
62871: NEG
62872: PPUSH
62873: LD_INT 5
62875: PPUSH
62876: CALL_OW 12
62880: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62881: LD_ADDR_OWVAR 31
62885: PUSH
62886: LD_INT 1
62888: PPUSH
62889: LD_INT 3
62891: PPUSH
62892: CALL_OW 12
62896: PUSH
62897: LD_INT 1
62899: PPUSH
62900: LD_INT 3
62902: PPUSH
62903: CALL_OW 12
62907: PUSH
62908: LD_INT 0
62910: PUSH
62911: LD_INT 0
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: ST_TO_ADDR
// animal := CreateHuman ;
62920: LD_ADDR_VAR 0 12
62924: PUSH
62925: CALL_OW 44
62929: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62930: LD_VAR 0 12
62934: PPUSH
62935: LD_VAR 0 8
62939: PPUSH
62940: LD_INT 0
62942: PPUSH
62943: CALL 64782 0 3
// end ;
62947: GO 62845
62949: POP
62950: POP
// if enchidnas then
62951: LD_VAR 0 4
62955: IFFALSE 63022
// for i = 1 to enchidnas do
62957: LD_ADDR_VAR 0 11
62961: PUSH
62962: DOUBLE
62963: LD_INT 1
62965: DEC
62966: ST_TO_ADDR
62967: LD_VAR 0 4
62971: PUSH
62972: FOR_TO
62973: IFFALSE 63020
// begin hc_class = 13 ;
62975: LD_ADDR_OWVAR 28
62979: PUSH
62980: LD_INT 13
62982: ST_TO_ADDR
// hc_gallery =  ;
62983: LD_ADDR_OWVAR 33
62987: PUSH
62988: LD_STRING 
62990: ST_TO_ADDR
// animal := CreateHuman ;
62991: LD_ADDR_VAR 0 12
62995: PUSH
62996: CALL_OW 44
63000: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63001: LD_VAR 0 12
63005: PPUSH
63006: LD_VAR 0 8
63010: PPUSH
63011: LD_INT 0
63013: PPUSH
63014: CALL 64782 0 3
// end ;
63018: GO 62972
63020: POP
63021: POP
// if fishes then
63022: LD_VAR 0 7
63026: IFFALSE 63093
// for i = 1 to fishes do
63028: LD_ADDR_VAR 0 11
63032: PUSH
63033: DOUBLE
63034: LD_INT 1
63036: DEC
63037: ST_TO_ADDR
63038: LD_VAR 0 7
63042: PUSH
63043: FOR_TO
63044: IFFALSE 63091
// begin hc_class = 20 ;
63046: LD_ADDR_OWVAR 28
63050: PUSH
63051: LD_INT 20
63053: ST_TO_ADDR
// hc_gallery =  ;
63054: LD_ADDR_OWVAR 33
63058: PUSH
63059: LD_STRING 
63061: ST_TO_ADDR
// animal := CreateHuman ;
63062: LD_ADDR_VAR 0 12
63066: PUSH
63067: CALL_OW 44
63071: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63072: LD_VAR 0 12
63076: PPUSH
63077: LD_VAR 0 9
63081: PPUSH
63082: LD_INT 0
63084: PPUSH
63085: CALL 64782 0 3
// end ;
63089: GO 63043
63091: POP
63092: POP
// end ;
63093: LD_VAR 0 10
63097: RET
// export function WantHeal ( sci , unit ) ; begin
63098: LD_INT 0
63100: PPUSH
// if GetTaskList ( sci ) > 0 then
63101: LD_VAR 0 1
63105: PPUSH
63106: CALL_OW 437
63110: PUSH
63111: LD_INT 0
63113: GREATER
63114: IFFALSE 63184
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63116: LD_VAR 0 1
63120: PPUSH
63121: CALL_OW 437
63125: PUSH
63126: LD_INT 1
63128: ARRAY
63129: PUSH
63130: LD_INT 1
63132: ARRAY
63133: PUSH
63134: LD_STRING l
63136: EQUAL
63137: PUSH
63138: LD_VAR 0 1
63142: PPUSH
63143: CALL_OW 437
63147: PUSH
63148: LD_INT 1
63150: ARRAY
63151: PUSH
63152: LD_INT 4
63154: ARRAY
63155: PUSH
63156: LD_VAR 0 2
63160: EQUAL
63161: AND
63162: IFFALSE 63174
// result := true else
63164: LD_ADDR_VAR 0 3
63168: PUSH
63169: LD_INT 1
63171: ST_TO_ADDR
63172: GO 63182
// result := false ;
63174: LD_ADDR_VAR 0 3
63178: PUSH
63179: LD_INT 0
63181: ST_TO_ADDR
// end else
63182: GO 63192
// result := false ;
63184: LD_ADDR_VAR 0 3
63188: PUSH
63189: LD_INT 0
63191: ST_TO_ADDR
// end ;
63192: LD_VAR 0 3
63196: RET
// export function HealTarget ( sci ) ; begin
63197: LD_INT 0
63199: PPUSH
// if not sci then
63200: LD_VAR 0 1
63204: NOT
63205: IFFALSE 63209
// exit ;
63207: GO 63274
// result := 0 ;
63209: LD_ADDR_VAR 0 2
63213: PUSH
63214: LD_INT 0
63216: ST_TO_ADDR
// if GetTaskList ( sci ) then
63217: LD_VAR 0 1
63221: PPUSH
63222: CALL_OW 437
63226: IFFALSE 63274
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63228: LD_VAR 0 1
63232: PPUSH
63233: CALL_OW 437
63237: PUSH
63238: LD_INT 1
63240: ARRAY
63241: PUSH
63242: LD_INT 1
63244: ARRAY
63245: PUSH
63246: LD_STRING l
63248: EQUAL
63249: IFFALSE 63274
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63251: LD_ADDR_VAR 0 2
63255: PUSH
63256: LD_VAR 0 1
63260: PPUSH
63261: CALL_OW 437
63265: PUSH
63266: LD_INT 1
63268: ARRAY
63269: PUSH
63270: LD_INT 4
63272: ARRAY
63273: ST_TO_ADDR
// end ;
63274: LD_VAR 0 2
63278: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63279: LD_INT 0
63281: PPUSH
63282: PPUSH
63283: PPUSH
63284: PPUSH
// if not base_units then
63285: LD_VAR 0 1
63289: NOT
63290: IFFALSE 63294
// exit ;
63292: GO 63381
// result := false ;
63294: LD_ADDR_VAR 0 2
63298: PUSH
63299: LD_INT 0
63301: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63302: LD_ADDR_VAR 0 5
63306: PUSH
63307: LD_VAR 0 1
63311: PPUSH
63312: LD_INT 21
63314: PUSH
63315: LD_INT 3
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: PPUSH
63322: CALL_OW 72
63326: ST_TO_ADDR
// if not tmp then
63327: LD_VAR 0 5
63331: NOT
63332: IFFALSE 63336
// exit ;
63334: GO 63381
// for i in tmp do
63336: LD_ADDR_VAR 0 3
63340: PUSH
63341: LD_VAR 0 5
63345: PUSH
63346: FOR_IN
63347: IFFALSE 63379
// begin result := EnemyInRange ( i , 22 ) ;
63349: LD_ADDR_VAR 0 2
63353: PUSH
63354: LD_VAR 0 3
63358: PPUSH
63359: LD_INT 22
63361: PPUSH
63362: CALL 61617 0 2
63366: ST_TO_ADDR
// if result then
63367: LD_VAR 0 2
63371: IFFALSE 63377
// exit ;
63373: POP
63374: POP
63375: GO 63381
// end ;
63377: GO 63346
63379: POP
63380: POP
// end ;
63381: LD_VAR 0 2
63385: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
63386: LD_INT 0
63388: PPUSH
63389: PPUSH
// if not units then
63390: LD_VAR 0 1
63394: NOT
63395: IFFALSE 63399
// exit ;
63397: GO 63469
// result := [ ] ;
63399: LD_ADDR_VAR 0 3
63403: PUSH
63404: EMPTY
63405: ST_TO_ADDR
// for i in units do
63406: LD_ADDR_VAR 0 4
63410: PUSH
63411: LD_VAR 0 1
63415: PUSH
63416: FOR_IN
63417: IFFALSE 63467
// if GetTag ( i ) = tag then
63419: LD_VAR 0 4
63423: PPUSH
63424: CALL_OW 110
63428: PUSH
63429: LD_VAR 0 2
63433: EQUAL
63434: IFFALSE 63465
// result := Insert ( result , result + 1 , i ) ;
63436: LD_ADDR_VAR 0 3
63440: PUSH
63441: LD_VAR 0 3
63445: PPUSH
63446: LD_VAR 0 3
63450: PUSH
63451: LD_INT 1
63453: PLUS
63454: PPUSH
63455: LD_VAR 0 4
63459: PPUSH
63460: CALL_OW 2
63464: ST_TO_ADDR
63465: GO 63416
63467: POP
63468: POP
// end ;
63469: LD_VAR 0 3
63473: RET
// export function IsDriver ( un ) ; begin
63474: LD_INT 0
63476: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63477: LD_ADDR_VAR 0 2
63481: PUSH
63482: LD_VAR 0 1
63486: PUSH
63487: LD_INT 55
63489: PUSH
63490: EMPTY
63491: LIST
63492: PPUSH
63493: CALL_OW 69
63497: IN
63498: ST_TO_ADDR
// end ;
63499: LD_VAR 0 2
63503: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63504: LD_INT 0
63506: PPUSH
63507: PPUSH
// list := [ ] ;
63508: LD_ADDR_VAR 0 5
63512: PUSH
63513: EMPTY
63514: ST_TO_ADDR
// case d of 0 :
63515: LD_VAR 0 3
63519: PUSH
63520: LD_INT 0
63522: DOUBLE
63523: EQUAL
63524: IFTRUE 63528
63526: GO 63661
63528: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63529: LD_ADDR_VAR 0 5
63533: PUSH
63534: LD_VAR 0 1
63538: PUSH
63539: LD_INT 4
63541: MINUS
63542: PUSH
63543: LD_VAR 0 2
63547: PUSH
63548: LD_INT 4
63550: MINUS
63551: PUSH
63552: LD_INT 2
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: LIST
63559: PUSH
63560: LD_VAR 0 1
63564: PUSH
63565: LD_INT 3
63567: MINUS
63568: PUSH
63569: LD_VAR 0 2
63573: PUSH
63574: LD_INT 1
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: LIST
63581: PUSH
63582: LD_VAR 0 1
63586: PUSH
63587: LD_INT 4
63589: PLUS
63590: PUSH
63591: LD_VAR 0 2
63595: PUSH
63596: LD_INT 4
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: LIST
63603: PUSH
63604: LD_VAR 0 1
63608: PUSH
63609: LD_INT 3
63611: PLUS
63612: PUSH
63613: LD_VAR 0 2
63617: PUSH
63618: LD_INT 3
63620: PLUS
63621: PUSH
63622: LD_INT 5
63624: PUSH
63625: EMPTY
63626: LIST
63627: LIST
63628: LIST
63629: PUSH
63630: LD_VAR 0 1
63634: PUSH
63635: LD_VAR 0 2
63639: PUSH
63640: LD_INT 4
63642: PLUS
63643: PUSH
63644: LD_INT 0
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: LIST
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: LIST
63656: LIST
63657: LIST
63658: ST_TO_ADDR
// end ; 1 :
63659: GO 64359
63661: LD_INT 1
63663: DOUBLE
63664: EQUAL
63665: IFTRUE 63669
63667: GO 63802
63669: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63670: LD_ADDR_VAR 0 5
63674: PUSH
63675: LD_VAR 0 1
63679: PUSH
63680: LD_VAR 0 2
63684: PUSH
63685: LD_INT 4
63687: MINUS
63688: PUSH
63689: LD_INT 3
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: LIST
63696: PUSH
63697: LD_VAR 0 1
63701: PUSH
63702: LD_INT 3
63704: MINUS
63705: PUSH
63706: LD_VAR 0 2
63710: PUSH
63711: LD_INT 3
63713: MINUS
63714: PUSH
63715: LD_INT 2
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: LIST
63722: PUSH
63723: LD_VAR 0 1
63727: PUSH
63728: LD_INT 4
63730: MINUS
63731: PUSH
63732: LD_VAR 0 2
63736: PUSH
63737: LD_INT 1
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: LIST
63744: PUSH
63745: LD_VAR 0 1
63749: PUSH
63750: LD_VAR 0 2
63754: PUSH
63755: LD_INT 3
63757: PLUS
63758: PUSH
63759: LD_INT 0
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: LIST
63766: PUSH
63767: LD_VAR 0 1
63771: PUSH
63772: LD_INT 4
63774: PLUS
63775: PUSH
63776: LD_VAR 0 2
63780: PUSH
63781: LD_INT 4
63783: PLUS
63784: PUSH
63785: LD_INT 5
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: LIST
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: LIST
63797: LIST
63798: LIST
63799: ST_TO_ADDR
// end ; 2 :
63800: GO 64359
63802: LD_INT 2
63804: DOUBLE
63805: EQUAL
63806: IFTRUE 63810
63808: GO 63939
63810: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63811: LD_ADDR_VAR 0 5
63815: PUSH
63816: LD_VAR 0 1
63820: PUSH
63821: LD_VAR 0 2
63825: PUSH
63826: LD_INT 3
63828: MINUS
63829: PUSH
63830: LD_INT 3
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: LIST
63837: PUSH
63838: LD_VAR 0 1
63842: PUSH
63843: LD_INT 4
63845: PLUS
63846: PUSH
63847: LD_VAR 0 2
63851: PUSH
63852: LD_INT 4
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: LIST
63859: PUSH
63860: LD_VAR 0 1
63864: PUSH
63865: LD_VAR 0 2
63869: PUSH
63870: LD_INT 4
63872: PLUS
63873: PUSH
63874: LD_INT 0
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: LIST
63881: PUSH
63882: LD_VAR 0 1
63886: PUSH
63887: LD_INT 3
63889: MINUS
63890: PUSH
63891: LD_VAR 0 2
63895: PUSH
63896: LD_INT 1
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: LIST
63903: PUSH
63904: LD_VAR 0 1
63908: PUSH
63909: LD_INT 4
63911: MINUS
63912: PUSH
63913: LD_VAR 0 2
63917: PUSH
63918: LD_INT 4
63920: MINUS
63921: PUSH
63922: LD_INT 2
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: LIST
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: LIST
63934: LIST
63935: LIST
63936: ST_TO_ADDR
// end ; 3 :
63937: GO 64359
63939: LD_INT 3
63941: DOUBLE
63942: EQUAL
63943: IFTRUE 63947
63945: GO 64080
63947: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63948: LD_ADDR_VAR 0 5
63952: PUSH
63953: LD_VAR 0 1
63957: PUSH
63958: LD_INT 3
63960: PLUS
63961: PUSH
63962: LD_VAR 0 2
63966: PUSH
63967: LD_INT 4
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: LIST
63974: PUSH
63975: LD_VAR 0 1
63979: PUSH
63980: LD_INT 4
63982: PLUS
63983: PUSH
63984: LD_VAR 0 2
63988: PUSH
63989: LD_INT 4
63991: PLUS
63992: PUSH
63993: LD_INT 5
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: LIST
64000: PUSH
64001: LD_VAR 0 1
64005: PUSH
64006: LD_INT 4
64008: MINUS
64009: PUSH
64010: LD_VAR 0 2
64014: PUSH
64015: LD_INT 1
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: LIST
64022: PUSH
64023: LD_VAR 0 1
64027: PUSH
64028: LD_VAR 0 2
64032: PUSH
64033: LD_INT 4
64035: MINUS
64036: PUSH
64037: LD_INT 3
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: LIST
64044: PUSH
64045: LD_VAR 0 1
64049: PUSH
64050: LD_INT 3
64052: MINUS
64053: PUSH
64054: LD_VAR 0 2
64058: PUSH
64059: LD_INT 3
64061: MINUS
64062: PUSH
64063: LD_INT 2
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: LIST
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: LIST
64075: LIST
64076: LIST
64077: ST_TO_ADDR
// end ; 4 :
64078: GO 64359
64080: LD_INT 4
64082: DOUBLE
64083: EQUAL
64084: IFTRUE 64088
64086: GO 64221
64088: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64089: LD_ADDR_VAR 0 5
64093: PUSH
64094: LD_VAR 0 1
64098: PUSH
64099: LD_VAR 0 2
64103: PUSH
64104: LD_INT 4
64106: PLUS
64107: PUSH
64108: LD_INT 0
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: LIST
64115: PUSH
64116: LD_VAR 0 1
64120: PUSH
64121: LD_INT 3
64123: PLUS
64124: PUSH
64125: LD_VAR 0 2
64129: PUSH
64130: LD_INT 3
64132: PLUS
64133: PUSH
64134: LD_INT 5
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: LIST
64141: PUSH
64142: LD_VAR 0 1
64146: PUSH
64147: LD_INT 4
64149: PLUS
64150: PUSH
64151: LD_VAR 0 2
64155: PUSH
64156: LD_INT 4
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: LIST
64163: PUSH
64164: LD_VAR 0 1
64168: PUSH
64169: LD_VAR 0 2
64173: PUSH
64174: LD_INT 3
64176: MINUS
64177: PUSH
64178: LD_INT 3
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: LIST
64185: PUSH
64186: LD_VAR 0 1
64190: PUSH
64191: LD_INT 4
64193: MINUS
64194: PUSH
64195: LD_VAR 0 2
64199: PUSH
64200: LD_INT 4
64202: MINUS
64203: PUSH
64204: LD_INT 2
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: LIST
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: LIST
64218: ST_TO_ADDR
// end ; 5 :
64219: GO 64359
64221: LD_INT 5
64223: DOUBLE
64224: EQUAL
64225: IFTRUE 64229
64227: GO 64358
64229: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64230: LD_ADDR_VAR 0 5
64234: PUSH
64235: LD_VAR 0 1
64239: PUSH
64240: LD_INT 4
64242: MINUS
64243: PUSH
64244: LD_VAR 0 2
64248: PUSH
64249: LD_INT 1
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: LIST
64256: PUSH
64257: LD_VAR 0 1
64261: PUSH
64262: LD_VAR 0 2
64266: PUSH
64267: LD_INT 4
64269: MINUS
64270: PUSH
64271: LD_INT 3
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: LIST
64278: PUSH
64279: LD_VAR 0 1
64283: PUSH
64284: LD_INT 4
64286: PLUS
64287: PUSH
64288: LD_VAR 0 2
64292: PUSH
64293: LD_INT 4
64295: PLUS
64296: PUSH
64297: LD_INT 5
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: LIST
64304: PUSH
64305: LD_VAR 0 1
64309: PUSH
64310: LD_INT 3
64312: PLUS
64313: PUSH
64314: LD_VAR 0 2
64318: PUSH
64319: LD_INT 4
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: LIST
64326: PUSH
64327: LD_VAR 0 1
64331: PUSH
64332: LD_VAR 0 2
64336: PUSH
64337: LD_INT 3
64339: PLUS
64340: PUSH
64341: LD_INT 0
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: LIST
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: LIST
64353: LIST
64354: LIST
64355: ST_TO_ADDR
// end ; end ;
64356: GO 64359
64358: POP
// result := list ;
64359: LD_ADDR_VAR 0 4
64363: PUSH
64364: LD_VAR 0 5
64368: ST_TO_ADDR
// end ;
64369: LD_VAR 0 4
64373: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64374: LD_INT 0
64376: PPUSH
64377: PPUSH
64378: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64379: LD_VAR 0 1
64383: NOT
64384: PUSH
64385: LD_VAR 0 2
64389: PUSH
64390: LD_INT 1
64392: PUSH
64393: LD_INT 2
64395: PUSH
64396: LD_INT 3
64398: PUSH
64399: LD_INT 4
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: LIST
64406: LIST
64407: IN
64408: NOT
64409: OR
64410: IFFALSE 64414
// exit ;
64412: GO 64506
// tmp := [ ] ;
64414: LD_ADDR_VAR 0 5
64418: PUSH
64419: EMPTY
64420: ST_TO_ADDR
// for i in units do
64421: LD_ADDR_VAR 0 4
64425: PUSH
64426: LD_VAR 0 1
64430: PUSH
64431: FOR_IN
64432: IFFALSE 64475
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
64434: LD_ADDR_VAR 0 5
64438: PUSH
64439: LD_VAR 0 5
64443: PPUSH
64444: LD_VAR 0 5
64448: PUSH
64449: LD_INT 1
64451: PLUS
64452: PPUSH
64453: LD_VAR 0 4
64457: PPUSH
64458: LD_VAR 0 2
64462: PPUSH
64463: CALL_OW 259
64467: PPUSH
64468: CALL_OW 2
64472: ST_TO_ADDR
64473: GO 64431
64475: POP
64476: POP
// if not tmp then
64477: LD_VAR 0 5
64481: NOT
64482: IFFALSE 64486
// exit ;
64484: GO 64506
// result := SortListByListDesc ( units , tmp ) ;
64486: LD_ADDR_VAR 0 3
64490: PUSH
64491: LD_VAR 0 1
64495: PPUSH
64496: LD_VAR 0 5
64500: PPUSH
64501: CALL_OW 77
64505: ST_TO_ADDR
// end ;
64506: LD_VAR 0 3
64510: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64511: LD_INT 0
64513: PPUSH
64514: PPUSH
64515: PPUSH
// result := false ;
64516: LD_ADDR_VAR 0 3
64520: PUSH
64521: LD_INT 0
64523: ST_TO_ADDR
// x := GetX ( building ) ;
64524: LD_ADDR_VAR 0 4
64528: PUSH
64529: LD_VAR 0 2
64533: PPUSH
64534: CALL_OW 250
64538: ST_TO_ADDR
// y := GetY ( building ) ;
64539: LD_ADDR_VAR 0 5
64543: PUSH
64544: LD_VAR 0 2
64548: PPUSH
64549: CALL_OW 251
64553: ST_TO_ADDR
// if not building or not x or not y then
64554: LD_VAR 0 2
64558: NOT
64559: PUSH
64560: LD_VAR 0 4
64564: NOT
64565: OR
64566: PUSH
64567: LD_VAR 0 5
64571: NOT
64572: OR
64573: IFFALSE 64577
// exit ;
64575: GO 64669
// if GetTaskList ( unit ) then
64577: LD_VAR 0 1
64581: PPUSH
64582: CALL_OW 437
64586: IFFALSE 64669
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64588: LD_STRING e
64590: PUSH
64591: LD_VAR 0 1
64595: PPUSH
64596: CALL_OW 437
64600: PUSH
64601: LD_INT 1
64603: ARRAY
64604: PUSH
64605: LD_INT 1
64607: ARRAY
64608: EQUAL
64609: PUSH
64610: LD_VAR 0 4
64614: PUSH
64615: LD_VAR 0 1
64619: PPUSH
64620: CALL_OW 437
64624: PUSH
64625: LD_INT 1
64627: ARRAY
64628: PUSH
64629: LD_INT 2
64631: ARRAY
64632: EQUAL
64633: AND
64634: PUSH
64635: LD_VAR 0 5
64639: PUSH
64640: LD_VAR 0 1
64644: PPUSH
64645: CALL_OW 437
64649: PUSH
64650: LD_INT 1
64652: ARRAY
64653: PUSH
64654: LD_INT 3
64656: ARRAY
64657: EQUAL
64658: AND
64659: IFFALSE 64669
// result := true end ;
64661: LD_ADDR_VAR 0 3
64665: PUSH
64666: LD_INT 1
64668: ST_TO_ADDR
// end ;
64669: LD_VAR 0 3
64673: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64674: LD_INT 0
64676: PPUSH
// result := false ;
64677: LD_ADDR_VAR 0 4
64681: PUSH
64682: LD_INT 0
64684: ST_TO_ADDR
// if GetTaskList ( unit ) then
64685: LD_VAR 0 1
64689: PPUSH
64690: CALL_OW 437
64694: IFFALSE 64777
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64696: LD_STRING M
64698: PUSH
64699: LD_VAR 0 1
64703: PPUSH
64704: CALL_OW 437
64708: PUSH
64709: LD_INT 1
64711: ARRAY
64712: PUSH
64713: LD_INT 1
64715: ARRAY
64716: EQUAL
64717: PUSH
64718: LD_VAR 0 2
64722: PUSH
64723: LD_VAR 0 1
64727: PPUSH
64728: CALL_OW 437
64732: PUSH
64733: LD_INT 1
64735: ARRAY
64736: PUSH
64737: LD_INT 2
64739: ARRAY
64740: EQUAL
64741: AND
64742: PUSH
64743: LD_VAR 0 3
64747: PUSH
64748: LD_VAR 0 1
64752: PPUSH
64753: CALL_OW 437
64757: PUSH
64758: LD_INT 1
64760: ARRAY
64761: PUSH
64762: LD_INT 3
64764: ARRAY
64765: EQUAL
64766: AND
64767: IFFALSE 64777
// result := true ;
64769: LD_ADDR_VAR 0 4
64773: PUSH
64774: LD_INT 1
64776: ST_TO_ADDR
// end ; end ;
64777: LD_VAR 0 4
64781: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64782: LD_INT 0
64784: PPUSH
64785: PPUSH
64786: PPUSH
64787: PPUSH
// if not unit or not area then
64788: LD_VAR 0 1
64792: NOT
64793: PUSH
64794: LD_VAR 0 2
64798: NOT
64799: OR
64800: IFFALSE 64804
// exit ;
64802: GO 64968
// tmp := AreaToList ( area , i ) ;
64804: LD_ADDR_VAR 0 6
64808: PUSH
64809: LD_VAR 0 2
64813: PPUSH
64814: LD_VAR 0 5
64818: PPUSH
64819: CALL_OW 517
64823: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64824: LD_ADDR_VAR 0 5
64828: PUSH
64829: DOUBLE
64830: LD_INT 1
64832: DEC
64833: ST_TO_ADDR
64834: LD_VAR 0 6
64838: PUSH
64839: LD_INT 1
64841: ARRAY
64842: PUSH
64843: FOR_TO
64844: IFFALSE 64966
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64846: LD_ADDR_VAR 0 7
64850: PUSH
64851: LD_VAR 0 6
64855: PUSH
64856: LD_INT 1
64858: ARRAY
64859: PUSH
64860: LD_VAR 0 5
64864: ARRAY
64865: PUSH
64866: LD_VAR 0 6
64870: PUSH
64871: LD_INT 2
64873: ARRAY
64874: PUSH
64875: LD_VAR 0 5
64879: ARRAY
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
64885: LD_VAR 0 7
64889: PUSH
64890: LD_INT 1
64892: ARRAY
64893: PPUSH
64894: LD_VAR 0 7
64898: PUSH
64899: LD_INT 2
64901: ARRAY
64902: PPUSH
64903: CALL_OW 428
64907: PUSH
64908: LD_INT 0
64910: EQUAL
64911: IFFALSE 64964
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64913: LD_VAR 0 1
64917: PPUSH
64918: LD_VAR 0 7
64922: PUSH
64923: LD_INT 1
64925: ARRAY
64926: PPUSH
64927: LD_VAR 0 7
64931: PUSH
64932: LD_INT 2
64934: ARRAY
64935: PPUSH
64936: LD_VAR 0 3
64940: PPUSH
64941: CALL_OW 48
// result := IsPlaced ( unit ) ;
64945: LD_ADDR_VAR 0 4
64949: PUSH
64950: LD_VAR 0 1
64954: PPUSH
64955: CALL_OW 305
64959: ST_TO_ADDR
// exit ;
64960: POP
64961: POP
64962: GO 64968
// end ; end ;
64964: GO 64843
64966: POP
64967: POP
// end ;
64968: LD_VAR 0 4
64972: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64973: LD_INT 0
64975: PPUSH
64976: PPUSH
64977: PPUSH
// if not side or side > 8 then
64978: LD_VAR 0 1
64982: NOT
64983: PUSH
64984: LD_VAR 0 1
64988: PUSH
64989: LD_INT 8
64991: GREATER
64992: OR
64993: IFFALSE 64997
// exit ;
64995: GO 65184
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64997: LD_ADDR_VAR 0 4
65001: PUSH
65002: LD_INT 22
65004: PUSH
65005: LD_VAR 0 1
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: PUSH
65014: LD_INT 21
65016: PUSH
65017: LD_INT 3
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: PUSH
65024: EMPTY
65025: LIST
65026: LIST
65027: PPUSH
65028: CALL_OW 69
65032: ST_TO_ADDR
// if not tmp then
65033: LD_VAR 0 4
65037: NOT
65038: IFFALSE 65042
// exit ;
65040: GO 65184
// enable_addtolog := true ;
65042: LD_ADDR_OWVAR 81
65046: PUSH
65047: LD_INT 1
65049: ST_TO_ADDR
// AddToLog ( [ ) ;
65050: LD_STRING [
65052: PPUSH
65053: CALL_OW 561
// for i in tmp do
65057: LD_ADDR_VAR 0 3
65061: PUSH
65062: LD_VAR 0 4
65066: PUSH
65067: FOR_IN
65068: IFFALSE 65175
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65070: LD_STRING [
65072: PUSH
65073: LD_VAR 0 3
65077: PPUSH
65078: CALL_OW 266
65082: STR
65083: PUSH
65084: LD_STRING , 
65086: STR
65087: PUSH
65088: LD_VAR 0 3
65092: PPUSH
65093: CALL_OW 250
65097: STR
65098: PUSH
65099: LD_STRING , 
65101: STR
65102: PUSH
65103: LD_VAR 0 3
65107: PPUSH
65108: CALL_OW 251
65112: STR
65113: PUSH
65114: LD_STRING , 
65116: STR
65117: PUSH
65118: LD_VAR 0 3
65122: PPUSH
65123: CALL_OW 254
65127: STR
65128: PUSH
65129: LD_STRING , 
65131: STR
65132: PUSH
65133: LD_VAR 0 3
65137: PPUSH
65138: LD_INT 1
65140: PPUSH
65141: CALL_OW 268
65145: STR
65146: PUSH
65147: LD_STRING , 
65149: STR
65150: PUSH
65151: LD_VAR 0 3
65155: PPUSH
65156: LD_INT 2
65158: PPUSH
65159: CALL_OW 268
65163: STR
65164: PUSH
65165: LD_STRING ],
65167: STR
65168: PPUSH
65169: CALL_OW 561
// end ;
65173: GO 65067
65175: POP
65176: POP
// AddToLog ( ]; ) ;
65177: LD_STRING ];
65179: PPUSH
65180: CALL_OW 561
// end ;
65184: LD_VAR 0 2
65188: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65189: LD_INT 0
65191: PPUSH
65192: PPUSH
65193: PPUSH
65194: PPUSH
65195: PPUSH
// if not area or not rate or not max then
65196: LD_VAR 0 1
65200: NOT
65201: PUSH
65202: LD_VAR 0 2
65206: NOT
65207: OR
65208: PUSH
65209: LD_VAR 0 4
65213: NOT
65214: OR
65215: IFFALSE 65219
// exit ;
65217: GO 65411
// while 1 do
65219: LD_INT 1
65221: IFFALSE 65411
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65223: LD_ADDR_VAR 0 9
65227: PUSH
65228: LD_VAR 0 1
65232: PPUSH
65233: LD_INT 1
65235: PPUSH
65236: CALL_OW 287
65240: PUSH
65241: LD_INT 10
65243: MUL
65244: ST_TO_ADDR
// r := rate / 10 ;
65245: LD_ADDR_VAR 0 7
65249: PUSH
65250: LD_VAR 0 2
65254: PUSH
65255: LD_INT 10
65257: DIVREAL
65258: ST_TO_ADDR
// time := 1 1$00 ;
65259: LD_ADDR_VAR 0 8
65263: PUSH
65264: LD_INT 2100
65266: ST_TO_ADDR
// if amount < min then
65267: LD_VAR 0 9
65271: PUSH
65272: LD_VAR 0 3
65276: LESS
65277: IFFALSE 65295
// r := r * 2 else
65279: LD_ADDR_VAR 0 7
65283: PUSH
65284: LD_VAR 0 7
65288: PUSH
65289: LD_INT 2
65291: MUL
65292: ST_TO_ADDR
65293: GO 65321
// if amount > max then
65295: LD_VAR 0 9
65299: PUSH
65300: LD_VAR 0 4
65304: GREATER
65305: IFFALSE 65321
// r := r / 2 ;
65307: LD_ADDR_VAR 0 7
65311: PUSH
65312: LD_VAR 0 7
65316: PUSH
65317: LD_INT 2
65319: DIVREAL
65320: ST_TO_ADDR
// time := time / r ;
65321: LD_ADDR_VAR 0 8
65325: PUSH
65326: LD_VAR 0 8
65330: PUSH
65331: LD_VAR 0 7
65335: DIVREAL
65336: ST_TO_ADDR
// if time < 0 then
65337: LD_VAR 0 8
65341: PUSH
65342: LD_INT 0
65344: LESS
65345: IFFALSE 65362
// time := time * - 1 ;
65347: LD_ADDR_VAR 0 8
65351: PUSH
65352: LD_VAR 0 8
65356: PUSH
65357: LD_INT 1
65359: NEG
65360: MUL
65361: ST_TO_ADDR
// wait ( time ) ;
65362: LD_VAR 0 8
65366: PPUSH
65367: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
65371: LD_INT 35
65373: PPUSH
65374: LD_INT 875
65376: PPUSH
65377: CALL_OW 12
65381: PPUSH
65382: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65386: LD_INT 1
65388: PPUSH
65389: LD_INT 5
65391: PPUSH
65392: CALL_OW 12
65396: PPUSH
65397: LD_VAR 0 1
65401: PPUSH
65402: LD_INT 1
65404: PPUSH
65405: CALL_OW 55
// end ;
65409: GO 65219
// end ;
65411: LD_VAR 0 5
65415: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65416: LD_INT 0
65418: PPUSH
65419: PPUSH
65420: PPUSH
65421: PPUSH
65422: PPUSH
65423: PPUSH
65424: PPUSH
65425: PPUSH
// if not turrets or not factories then
65426: LD_VAR 0 1
65430: NOT
65431: PUSH
65432: LD_VAR 0 2
65436: NOT
65437: OR
65438: IFFALSE 65442
// exit ;
65440: GO 65749
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65442: LD_ADDR_VAR 0 10
65446: PUSH
65447: LD_INT 5
65449: PUSH
65450: LD_INT 6
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: PUSH
65457: LD_INT 2
65459: PUSH
65460: LD_INT 4
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: PUSH
65467: LD_INT 3
65469: PUSH
65470: LD_INT 5
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: LIST
65481: PUSH
65482: LD_INT 24
65484: PUSH
65485: LD_INT 25
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: PUSH
65492: LD_INT 23
65494: PUSH
65495: LD_INT 27
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: PUSH
65502: EMPTY
65503: LIST
65504: LIST
65505: PUSH
65506: LD_INT 42
65508: PUSH
65509: LD_INT 43
65511: PUSH
65512: EMPTY
65513: LIST
65514: LIST
65515: PUSH
65516: LD_INT 44
65518: PUSH
65519: LD_INT 46
65521: PUSH
65522: EMPTY
65523: LIST
65524: LIST
65525: PUSH
65526: LD_INT 45
65528: PUSH
65529: LD_INT 47
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: LIST
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: LIST
65545: ST_TO_ADDR
// result := [ ] ;
65546: LD_ADDR_VAR 0 3
65550: PUSH
65551: EMPTY
65552: ST_TO_ADDR
// for i in turrets do
65553: LD_ADDR_VAR 0 4
65557: PUSH
65558: LD_VAR 0 1
65562: PUSH
65563: FOR_IN
65564: IFFALSE 65747
// begin nat := GetNation ( i ) ;
65566: LD_ADDR_VAR 0 7
65570: PUSH
65571: LD_VAR 0 4
65575: PPUSH
65576: CALL_OW 248
65580: ST_TO_ADDR
// weapon := 0 ;
65581: LD_ADDR_VAR 0 8
65585: PUSH
65586: LD_INT 0
65588: ST_TO_ADDR
// if not nat then
65589: LD_VAR 0 7
65593: NOT
65594: IFFALSE 65598
// continue ;
65596: GO 65563
// for j in list [ nat ] do
65598: LD_ADDR_VAR 0 5
65602: PUSH
65603: LD_VAR 0 10
65607: PUSH
65608: LD_VAR 0 7
65612: ARRAY
65613: PUSH
65614: FOR_IN
65615: IFFALSE 65656
// if GetBWeapon ( i ) = j [ 1 ] then
65617: LD_VAR 0 4
65621: PPUSH
65622: CALL_OW 269
65626: PUSH
65627: LD_VAR 0 5
65631: PUSH
65632: LD_INT 1
65634: ARRAY
65635: EQUAL
65636: IFFALSE 65654
// begin weapon := j [ 2 ] ;
65638: LD_ADDR_VAR 0 8
65642: PUSH
65643: LD_VAR 0 5
65647: PUSH
65648: LD_INT 2
65650: ARRAY
65651: ST_TO_ADDR
// break ;
65652: GO 65656
// end ;
65654: GO 65614
65656: POP
65657: POP
// if not weapon then
65658: LD_VAR 0 8
65662: NOT
65663: IFFALSE 65667
// continue ;
65665: GO 65563
// for k in factories do
65667: LD_ADDR_VAR 0 6
65671: PUSH
65672: LD_VAR 0 2
65676: PUSH
65677: FOR_IN
65678: IFFALSE 65743
// begin weapons := AvailableWeaponList ( k ) ;
65680: LD_ADDR_VAR 0 9
65684: PUSH
65685: LD_VAR 0 6
65689: PPUSH
65690: CALL_OW 478
65694: ST_TO_ADDR
// if not weapons then
65695: LD_VAR 0 9
65699: NOT
65700: IFFALSE 65704
// continue ;
65702: GO 65677
// if weapon in weapons then
65704: LD_VAR 0 8
65708: PUSH
65709: LD_VAR 0 9
65713: IN
65714: IFFALSE 65741
// begin result := [ i , weapon ] ;
65716: LD_ADDR_VAR 0 3
65720: PUSH
65721: LD_VAR 0 4
65725: PUSH
65726: LD_VAR 0 8
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: ST_TO_ADDR
// exit ;
65735: POP
65736: POP
65737: POP
65738: POP
65739: GO 65749
// end ; end ;
65741: GO 65677
65743: POP
65744: POP
// end ;
65745: GO 65563
65747: POP
65748: POP
// end ;
65749: LD_VAR 0 3
65753: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65754: LD_INT 0
65756: PPUSH
// if not side or side > 8 then
65757: LD_VAR 0 3
65761: NOT
65762: PUSH
65763: LD_VAR 0 3
65767: PUSH
65768: LD_INT 8
65770: GREATER
65771: OR
65772: IFFALSE 65776
// exit ;
65774: GO 65835
// if not range then
65776: LD_VAR 0 4
65780: NOT
65781: IFFALSE 65792
// range := - 12 ;
65783: LD_ADDR_VAR 0 4
65787: PUSH
65788: LD_INT 12
65790: NEG
65791: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65792: LD_VAR 0 1
65796: PPUSH
65797: LD_VAR 0 2
65801: PPUSH
65802: LD_VAR 0 3
65806: PPUSH
65807: LD_VAR 0 4
65811: PPUSH
65812: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65816: LD_VAR 0 1
65820: PPUSH
65821: LD_VAR 0 2
65825: PPUSH
65826: LD_VAR 0 3
65830: PPUSH
65831: CALL_OW 331
// end ;
65835: LD_VAR 0 5
65839: RET
// export function Video ( mode ) ; begin
65840: LD_INT 0
65842: PPUSH
// ingame_video = mode ;
65843: LD_ADDR_OWVAR 52
65847: PUSH
65848: LD_VAR 0 1
65852: ST_TO_ADDR
// interface_hidden = mode ;
65853: LD_ADDR_OWVAR 54
65857: PUSH
65858: LD_VAR 0 1
65862: ST_TO_ADDR
// end ;
65863: LD_VAR 0 2
65867: RET
// export function Join ( array , element ) ; begin
65868: LD_INT 0
65870: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65871: LD_ADDR_VAR 0 3
65875: PUSH
65876: LD_VAR 0 1
65880: PPUSH
65881: LD_VAR 0 1
65885: PUSH
65886: LD_INT 1
65888: PLUS
65889: PPUSH
65890: LD_VAR 0 2
65894: PPUSH
65895: CALL_OW 1
65899: ST_TO_ADDR
// end ;
65900: LD_VAR 0 3
65904: RET
// export function JoinUnion ( array , element ) ; begin
65905: LD_INT 0
65907: PPUSH
// result := array union element ;
65908: LD_ADDR_VAR 0 3
65912: PUSH
65913: LD_VAR 0 1
65917: PUSH
65918: LD_VAR 0 2
65922: UNION
65923: ST_TO_ADDR
// end ;
65924: LD_VAR 0 3
65928: RET
// export function GetBehemoths ( side ) ; begin
65929: LD_INT 0
65931: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
65932: LD_ADDR_VAR 0 2
65936: PUSH
65937: LD_INT 22
65939: PUSH
65940: LD_VAR 0 1
65944: PUSH
65945: EMPTY
65946: LIST
65947: LIST
65948: PUSH
65949: LD_INT 31
65951: PUSH
65952: LD_INT 25
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: PPUSH
65963: CALL_OW 69
65967: ST_TO_ADDR
// end ;
65968: LD_VAR 0 2
65972: RET
// export function Shuffle ( array ) ; var i , index ; begin
65973: LD_INT 0
65975: PPUSH
65976: PPUSH
65977: PPUSH
// result := [ ] ;
65978: LD_ADDR_VAR 0 2
65982: PUSH
65983: EMPTY
65984: ST_TO_ADDR
// if not array then
65985: LD_VAR 0 1
65989: NOT
65990: IFFALSE 65994
// exit ;
65992: GO 66093
// Randomize ;
65994: CALL_OW 10
// for i = array downto 1 do
65998: LD_ADDR_VAR 0 3
66002: PUSH
66003: DOUBLE
66004: LD_VAR 0 1
66008: INC
66009: ST_TO_ADDR
66010: LD_INT 1
66012: PUSH
66013: FOR_DOWNTO
66014: IFFALSE 66091
// begin index := rand ( 1 , array ) ;
66016: LD_ADDR_VAR 0 4
66020: PUSH
66021: LD_INT 1
66023: PPUSH
66024: LD_VAR 0 1
66028: PPUSH
66029: CALL_OW 12
66033: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66034: LD_ADDR_VAR 0 2
66038: PUSH
66039: LD_VAR 0 2
66043: PPUSH
66044: LD_VAR 0 2
66048: PUSH
66049: LD_INT 1
66051: PLUS
66052: PPUSH
66053: LD_VAR 0 1
66057: PUSH
66058: LD_VAR 0 4
66062: ARRAY
66063: PPUSH
66064: CALL_OW 2
66068: ST_TO_ADDR
// array := Delete ( array , index ) ;
66069: LD_ADDR_VAR 0 1
66073: PUSH
66074: LD_VAR 0 1
66078: PPUSH
66079: LD_VAR 0 4
66083: PPUSH
66084: CALL_OW 3
66088: ST_TO_ADDR
// end ;
66089: GO 66013
66091: POP
66092: POP
// end ;
66093: LD_VAR 0 2
66097: RET
// export function GetBaseMaterials ( base ) ; begin
66098: LD_INT 0
66100: PPUSH
// result := [ 0 , 0 , 0 ] ;
66101: LD_ADDR_VAR 0 2
66105: PUSH
66106: LD_INT 0
66108: PUSH
66109: LD_INT 0
66111: PUSH
66112: LD_INT 0
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: LIST
66119: ST_TO_ADDR
// if not base then
66120: LD_VAR 0 1
66124: NOT
66125: IFFALSE 66129
// exit ;
66127: GO 66178
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66129: LD_ADDR_VAR 0 2
66133: PUSH
66134: LD_VAR 0 1
66138: PPUSH
66139: LD_INT 1
66141: PPUSH
66142: CALL_OW 275
66146: PUSH
66147: LD_VAR 0 1
66151: PPUSH
66152: LD_INT 2
66154: PPUSH
66155: CALL_OW 275
66159: PUSH
66160: LD_VAR 0 1
66164: PPUSH
66165: LD_INT 3
66167: PPUSH
66168: CALL_OW 275
66172: PUSH
66173: EMPTY
66174: LIST
66175: LIST
66176: LIST
66177: ST_TO_ADDR
// end ;
66178: LD_VAR 0 2
66182: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66183: LD_INT 0
66185: PPUSH
66186: PPUSH
// result := array ;
66187: LD_ADDR_VAR 0 3
66191: PUSH
66192: LD_VAR 0 1
66196: ST_TO_ADDR
// if size > 0 then
66197: LD_VAR 0 2
66201: PUSH
66202: LD_INT 0
66204: GREATER
66205: IFFALSE 66251
// for i := array downto size do
66207: LD_ADDR_VAR 0 4
66211: PUSH
66212: DOUBLE
66213: LD_VAR 0 1
66217: INC
66218: ST_TO_ADDR
66219: LD_VAR 0 2
66223: PUSH
66224: FOR_DOWNTO
66225: IFFALSE 66249
// result := Delete ( result , result ) ;
66227: LD_ADDR_VAR 0 3
66231: PUSH
66232: LD_VAR 0 3
66236: PPUSH
66237: LD_VAR 0 3
66241: PPUSH
66242: CALL_OW 3
66246: ST_TO_ADDR
66247: GO 66224
66249: POP
66250: POP
// end ;
66251: LD_VAR 0 3
66255: RET
// export function ComExit ( unit ) ; var tmp ; begin
66256: LD_INT 0
66258: PPUSH
66259: PPUSH
// if not IsInUnit ( unit ) then
66260: LD_VAR 0 1
66264: PPUSH
66265: CALL_OW 310
66269: NOT
66270: IFFALSE 66274
// exit ;
66272: GO 66334
// tmp := IsInUnit ( unit ) ;
66274: LD_ADDR_VAR 0 3
66278: PUSH
66279: LD_VAR 0 1
66283: PPUSH
66284: CALL_OW 310
66288: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66289: LD_VAR 0 3
66293: PPUSH
66294: CALL_OW 247
66298: PUSH
66299: LD_INT 2
66301: EQUAL
66302: IFFALSE 66315
// ComExitVehicle ( unit ) else
66304: LD_VAR 0 1
66308: PPUSH
66309: CALL_OW 121
66313: GO 66324
// ComExitBuilding ( unit ) ;
66315: LD_VAR 0 1
66319: PPUSH
66320: CALL_OW 122
// result := tmp ;
66324: LD_ADDR_VAR 0 2
66328: PUSH
66329: LD_VAR 0 3
66333: ST_TO_ADDR
// end ;
66334: LD_VAR 0 2
66338: RET
// export function ComExitAll ( units ) ; var i ; begin
66339: LD_INT 0
66341: PPUSH
66342: PPUSH
// if not units then
66343: LD_VAR 0 1
66347: NOT
66348: IFFALSE 66352
// exit ;
66350: GO 66378
// for i in units do
66352: LD_ADDR_VAR 0 3
66356: PUSH
66357: LD_VAR 0 1
66361: PUSH
66362: FOR_IN
66363: IFFALSE 66376
// ComExit ( i ) ;
66365: LD_VAR 0 3
66369: PPUSH
66370: CALL 66256 0 1
66374: GO 66362
66376: POP
66377: POP
// end ;
66378: LD_VAR 0 2
66382: RET
// export function ResetHc ; begin
66383: LD_INT 0
66385: PPUSH
// InitHc ;
66386: CALL_OW 19
// hc_importance := 0 ;
66390: LD_ADDR_OWVAR 32
66394: PUSH
66395: LD_INT 0
66397: ST_TO_ADDR
// end ;
66398: LD_VAR 0 1
66402: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66403: LD_INT 0
66405: PPUSH
66406: PPUSH
66407: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66408: LD_ADDR_VAR 0 6
66412: PUSH
66413: LD_VAR 0 1
66417: PUSH
66418: LD_VAR 0 3
66422: PLUS
66423: PUSH
66424: LD_INT 2
66426: DIV
66427: ST_TO_ADDR
// if _x < 0 then
66428: LD_VAR 0 6
66432: PUSH
66433: LD_INT 0
66435: LESS
66436: IFFALSE 66453
// _x := _x * - 1 ;
66438: LD_ADDR_VAR 0 6
66442: PUSH
66443: LD_VAR 0 6
66447: PUSH
66448: LD_INT 1
66450: NEG
66451: MUL
66452: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66453: LD_ADDR_VAR 0 7
66457: PUSH
66458: LD_VAR 0 2
66462: PUSH
66463: LD_VAR 0 4
66467: PLUS
66468: PUSH
66469: LD_INT 2
66471: DIV
66472: ST_TO_ADDR
// if _y < 0 then
66473: LD_VAR 0 7
66477: PUSH
66478: LD_INT 0
66480: LESS
66481: IFFALSE 66498
// _y := _y * - 1 ;
66483: LD_ADDR_VAR 0 7
66487: PUSH
66488: LD_VAR 0 7
66492: PUSH
66493: LD_INT 1
66495: NEG
66496: MUL
66497: ST_TO_ADDR
// result := [ _x , _y ] ;
66498: LD_ADDR_VAR 0 5
66502: PUSH
66503: LD_VAR 0 6
66507: PUSH
66508: LD_VAR 0 7
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: ST_TO_ADDR
// end ;
66517: LD_VAR 0 5
66521: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66522: LD_INT 0
66524: PPUSH
66525: PPUSH
66526: PPUSH
66527: PPUSH
// task := GetTaskList ( unit ) ;
66528: LD_ADDR_VAR 0 7
66532: PUSH
66533: LD_VAR 0 1
66537: PPUSH
66538: CALL_OW 437
66542: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66543: LD_VAR 0 7
66547: NOT
66548: PUSH
66549: LD_VAR 0 1
66553: PPUSH
66554: LD_VAR 0 2
66558: PPUSH
66559: CALL_OW 308
66563: NOT
66564: AND
66565: IFFALSE 66569
// exit ;
66567: GO 66687
// if IsInArea ( unit , area ) then
66569: LD_VAR 0 1
66573: PPUSH
66574: LD_VAR 0 2
66578: PPUSH
66579: CALL_OW 308
66583: IFFALSE 66601
// begin ComMoveToArea ( unit , goAway ) ;
66585: LD_VAR 0 1
66589: PPUSH
66590: LD_VAR 0 3
66594: PPUSH
66595: CALL_OW 113
// exit ;
66599: GO 66687
// end ; if task [ 1 ] [ 1 ] <> M then
66601: LD_VAR 0 7
66605: PUSH
66606: LD_INT 1
66608: ARRAY
66609: PUSH
66610: LD_INT 1
66612: ARRAY
66613: PUSH
66614: LD_STRING M
66616: NONEQUAL
66617: IFFALSE 66621
// exit ;
66619: GO 66687
// x := task [ 1 ] [ 2 ] ;
66621: LD_ADDR_VAR 0 5
66625: PUSH
66626: LD_VAR 0 7
66630: PUSH
66631: LD_INT 1
66633: ARRAY
66634: PUSH
66635: LD_INT 2
66637: ARRAY
66638: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66639: LD_ADDR_VAR 0 6
66643: PUSH
66644: LD_VAR 0 7
66648: PUSH
66649: LD_INT 1
66651: ARRAY
66652: PUSH
66653: LD_INT 3
66655: ARRAY
66656: ST_TO_ADDR
// if InArea ( x , y , area ) then
66657: LD_VAR 0 5
66661: PPUSH
66662: LD_VAR 0 6
66666: PPUSH
66667: LD_VAR 0 2
66671: PPUSH
66672: CALL_OW 309
66676: IFFALSE 66687
// ComStop ( unit ) ;
66678: LD_VAR 0 1
66682: PPUSH
66683: CALL_OW 141
// end ;
66687: LD_VAR 0 4
66691: RET
// export function Abs ( value ) ; begin
66692: LD_INT 0
66694: PPUSH
// result := value ;
66695: LD_ADDR_VAR 0 2
66699: PUSH
66700: LD_VAR 0 1
66704: ST_TO_ADDR
// if value < 0 then
66705: LD_VAR 0 1
66709: PUSH
66710: LD_INT 0
66712: LESS
66713: IFFALSE 66730
// result := value * - 1 ;
66715: LD_ADDR_VAR 0 2
66719: PUSH
66720: LD_VAR 0 1
66724: PUSH
66725: LD_INT 1
66727: NEG
66728: MUL
66729: ST_TO_ADDR
// end ;
66730: LD_VAR 0 2
66734: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66735: LD_INT 0
66737: PPUSH
66738: PPUSH
66739: PPUSH
66740: PPUSH
66741: PPUSH
66742: PPUSH
66743: PPUSH
66744: PPUSH
// if not unit or not building then
66745: LD_VAR 0 1
66749: NOT
66750: PUSH
66751: LD_VAR 0 2
66755: NOT
66756: OR
66757: IFFALSE 66761
// exit ;
66759: GO 66987
// x := GetX ( building ) ;
66761: LD_ADDR_VAR 0 4
66765: PUSH
66766: LD_VAR 0 2
66770: PPUSH
66771: CALL_OW 250
66775: ST_TO_ADDR
// y := GetY ( building ) ;
66776: LD_ADDR_VAR 0 6
66780: PUSH
66781: LD_VAR 0 2
66785: PPUSH
66786: CALL_OW 251
66790: ST_TO_ADDR
// d := GetDir ( building ) ;
66791: LD_ADDR_VAR 0 8
66795: PUSH
66796: LD_VAR 0 2
66800: PPUSH
66801: CALL_OW 254
66805: ST_TO_ADDR
// r := 4 ;
66806: LD_ADDR_VAR 0 9
66810: PUSH
66811: LD_INT 4
66813: ST_TO_ADDR
// for i := 1 to 5 do
66814: LD_ADDR_VAR 0 10
66818: PUSH
66819: DOUBLE
66820: LD_INT 1
66822: DEC
66823: ST_TO_ADDR
66824: LD_INT 5
66826: PUSH
66827: FOR_TO
66828: IFFALSE 66985
// begin _x := ShiftX ( x , d , r + i ) ;
66830: LD_ADDR_VAR 0 5
66834: PUSH
66835: LD_VAR 0 4
66839: PPUSH
66840: LD_VAR 0 8
66844: PPUSH
66845: LD_VAR 0 9
66849: PUSH
66850: LD_VAR 0 10
66854: PLUS
66855: PPUSH
66856: CALL_OW 272
66860: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66861: LD_ADDR_VAR 0 7
66865: PUSH
66866: LD_VAR 0 6
66870: PPUSH
66871: LD_VAR 0 8
66875: PPUSH
66876: LD_VAR 0 9
66880: PUSH
66881: LD_VAR 0 10
66885: PLUS
66886: PPUSH
66887: CALL_OW 273
66891: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66892: LD_VAR 0 5
66896: PPUSH
66897: LD_VAR 0 7
66901: PPUSH
66902: CALL_OW 488
66906: PUSH
66907: LD_VAR 0 5
66911: PPUSH
66912: LD_VAR 0 7
66916: PPUSH
66917: CALL_OW 428
66921: PPUSH
66922: CALL_OW 247
66926: PUSH
66927: LD_INT 3
66929: PUSH
66930: LD_INT 2
66932: PUSH
66933: EMPTY
66934: LIST
66935: LIST
66936: IN
66937: NOT
66938: AND
66939: IFFALSE 66983
// begin ComMoveXY ( unit , _x , _y ) ;
66941: LD_VAR 0 1
66945: PPUSH
66946: LD_VAR 0 5
66950: PPUSH
66951: LD_VAR 0 7
66955: PPUSH
66956: CALL_OW 111
// result := [ _x , _y ] ;
66960: LD_ADDR_VAR 0 3
66964: PUSH
66965: LD_VAR 0 5
66969: PUSH
66970: LD_VAR 0 7
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: ST_TO_ADDR
// exit ;
66979: POP
66980: POP
66981: GO 66987
// end ; end ;
66983: GO 66827
66985: POP
66986: POP
// end ;
66987: LD_VAR 0 3
66991: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66992: LD_INT 0
66994: PPUSH
66995: PPUSH
66996: PPUSH
// result := 0 ;
66997: LD_ADDR_VAR 0 3
67001: PUSH
67002: LD_INT 0
67004: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67005: LD_VAR 0 1
67009: PUSH
67010: LD_INT 0
67012: LESS
67013: PUSH
67014: LD_VAR 0 1
67018: PUSH
67019: LD_INT 8
67021: GREATER
67022: OR
67023: PUSH
67024: LD_VAR 0 2
67028: PUSH
67029: LD_INT 0
67031: LESS
67032: OR
67033: PUSH
67034: LD_VAR 0 2
67038: PUSH
67039: LD_INT 8
67041: GREATER
67042: OR
67043: IFFALSE 67047
// exit ;
67045: GO 67122
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67047: LD_ADDR_VAR 0 4
67051: PUSH
67052: LD_INT 22
67054: PUSH
67055: LD_VAR 0 2
67059: PUSH
67060: EMPTY
67061: LIST
67062: LIST
67063: PPUSH
67064: CALL_OW 69
67068: PUSH
67069: FOR_IN
67070: IFFALSE 67120
// begin un := UnitShoot ( i ) ;
67072: LD_ADDR_VAR 0 5
67076: PUSH
67077: LD_VAR 0 4
67081: PPUSH
67082: CALL_OW 504
67086: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67087: LD_VAR 0 5
67091: PPUSH
67092: CALL_OW 255
67096: PUSH
67097: LD_VAR 0 1
67101: EQUAL
67102: IFFALSE 67118
// begin result := un ;
67104: LD_ADDR_VAR 0 3
67108: PUSH
67109: LD_VAR 0 5
67113: ST_TO_ADDR
// exit ;
67114: POP
67115: POP
67116: GO 67122
// end ; end ;
67118: GO 67069
67120: POP
67121: POP
// end ;
67122: LD_VAR 0 3
67126: RET
// export function GetCargoBay ( units ) ; begin
67127: LD_INT 0
67129: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67130: LD_ADDR_VAR 0 2
67134: PUSH
67135: LD_VAR 0 1
67139: PPUSH
67140: LD_INT 2
67142: PUSH
67143: LD_INT 34
67145: PUSH
67146: LD_INT 12
67148: PUSH
67149: EMPTY
67150: LIST
67151: LIST
67152: PUSH
67153: LD_INT 34
67155: PUSH
67156: LD_INT 51
67158: PUSH
67159: EMPTY
67160: LIST
67161: LIST
67162: PUSH
67163: LD_INT 34
67165: PUSH
67166: LD_INT 32
67168: PUSH
67169: EMPTY
67170: LIST
67171: LIST
67172: PUSH
67173: LD_INT 34
67175: PUSH
67176: LD_EXP 33
67180: PUSH
67181: EMPTY
67182: LIST
67183: LIST
67184: PUSH
67185: EMPTY
67186: LIST
67187: LIST
67188: LIST
67189: LIST
67190: LIST
67191: PPUSH
67192: CALL_OW 72
67196: ST_TO_ADDR
// end ; end_of_file
67197: LD_VAR 0 2
67201: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
67202: LD_VAR 0 1
67206: PUSH
67207: LD_INT 200
67209: DOUBLE
67210: GREATEREQUAL
67211: IFFALSE 67219
67213: LD_INT 299
67215: DOUBLE
67216: LESSEQUAL
67217: IFTRUE 67221
67219: GO 67253
67221: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; end ;
67222: LD_VAR 0 1
67226: PPUSH
67227: LD_VAR 0 2
67231: PPUSH
67232: LD_VAR 0 3
67236: PPUSH
67237: LD_VAR 0 4
67241: PPUSH
67242: LD_VAR 0 5
67246: PPUSH
67247: CALL 25676 0 5
67251: GO 67254
67253: POP
// end ;
67254: PPOPN 11
67256: END
