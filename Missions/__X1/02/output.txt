// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 46 0 0
// CreateNature ;
  19: CALL 533 0 0
// PrepareAmericans ;
  23: CALL 830 0 0
// PrepareArabian ;
  27: CALL 11141 0 0
// if debug then
  31: LD_EXP 1
  35: IFFALSE 41
// DebugMode ;
  37: CALL 214 0 0
// Action ;
  41: CALL 4657 0 0
// end ;
  45: END
// export debug , prefix , missionStart , aviradzeSpotted , deltaSpotted , spottedBeforeRadio , sciSpotted , aviradzeQuestDone , sciCounterKill , usAlert , usActiveDefend , gladstoneEscaped , timeUntilFarmer , attackDeltaAllowed , trickyMove , usPatrol , trap , lostCounter ; function Init ; begin
  46: LD_INT 0
  48: PPUSH
// debug := false ;
  49: LD_ADDR_EXP 1
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// missionStart := false ;
  57: LD_ADDR_EXP 3
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// aviradzeSpotted := false ;
  65: LD_ADDR_EXP 4
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// deltaSpotted := false ;
  73: LD_ADDR_EXP 5
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// sciSpotted := false ;
  81: LD_ADDR_EXP 7
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// sciCounterKill := 0 ;
  89: LD_ADDR_EXP 9
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// aviradzeQuestDone := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// attackDeltaAllowed := false ;
 105: LD_ADDR_EXP 14
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usAlert := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// usActiveDefend := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// usPatrol := [ ] ;
 129: LD_ADDR_EXP 16
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// timeUntilFarmer := [ 40 40$00 , 30 30$00 , 20 20$00 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 13
 140: PUSH
 141: LD_INT 84000
 143: PUSH
 144: LD_INT 63000
 146: PUSH
 147: LD_INT 42000
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: PUSH
 155: LD_OWVAR 67
 159: ARRAY
 160: ST_TO_ADDR
// trickyMove := false ;
 161: LD_ADDR_EXP 15
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// gladstoneEscaped := false ;
 169: LD_ADDR_EXP 12
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// prefix := 01_ ;
 177: LD_ADDR_EXP 2
 181: PUSH
 182: LD_STRING 01_
 184: ST_TO_ADDR
// trap := 0 ;
 185: LD_ADDR_EXP 17
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// lostCounter := false ;
 193: LD_ADDR_EXP 18
 197: PUSH
 198: LD_INT 0
 200: ST_TO_ADDR
// spottedBeforeRadio := false ;
 201: LD_ADDR_EXP 6
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// end ;
 209: LD_VAR 0 1
 213: RET
// function DebugMode ; begin
 214: LD_INT 0
 216: PPUSH
// FogOff ( 1 ) ;
 217: LD_INT 1
 219: PPUSH
 220: CALL_OW 344
// Difficulty := 2 ;
 224: LD_ADDR_OWVAR 67
 228: PUSH
 229: LD_INT 2
 231: ST_TO_ADDR
// end ; end_of_file
 232: LD_VAR 0 1
 236: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 237: LD_INT 0
 239: PPUSH
// uc_side := side ;
 240: LD_ADDR_OWVAR 20
 244: PUSH
 245: LD_VAR 0 1
 249: ST_TO_ADDR
// uc_nation := nation ;
 250: LD_ADDR_OWVAR 21
 254: PUSH
 255: LD_VAR 0 2
 259: ST_TO_ADDR
// vc_chassis := chassis ;
 260: LD_ADDR_OWVAR 37
 264: PUSH
 265: LD_VAR 0 3
 269: ST_TO_ADDR
// vc_engine := engine ;
 270: LD_ADDR_OWVAR 39
 274: PUSH
 275: LD_VAR 0 4
 279: ST_TO_ADDR
// vc_control := control ;
 280: LD_ADDR_OWVAR 38
 284: PUSH
 285: LD_VAR 0 5
 289: ST_TO_ADDR
// vc_weapon := weapon ;
 290: LD_ADDR_OWVAR 40
 294: PUSH
 295: LD_VAR 0 6
 299: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 300: LD_ADDR_OWVAR 41
 304: PUSH
 305: LD_VAR 0 7
 309: ST_TO_ADDR
// result := CreateVehicle ;
 310: LD_ADDR_VAR 0 8
 314: PUSH
 315: CALL_OW 45
 319: ST_TO_ADDR
// end ;
 320: LD_VAR 0 8
 324: RET
// export function SayX ( units , ident ) ; var i ; begin
 325: LD_INT 0
 327: PPUSH
 328: PPUSH
// result := false ;
 329: LD_ADDR_VAR 0 3
 333: PUSH
 334: LD_INT 0
 336: ST_TO_ADDR
// if not units then
 337: LD_VAR 0 1
 341: NOT
 342: IFFALSE 346
// exit ;
 344: GO 400
// for i in units do
 346: LD_ADDR_VAR 0 4
 350: PUSH
 351: LD_VAR 0 1
 355: PUSH
 356: FOR_IN
 357: IFFALSE 398
// if IsOk ( i ) then
 359: LD_VAR 0 4
 363: PPUSH
 364: CALL_OW 302
 368: IFFALSE 396
// begin Say ( i , ident ) ;
 370: LD_VAR 0 4
 374: PPUSH
 375: LD_VAR 0 2
 379: PPUSH
 380: CALL_OW 88
// result := i ;
 384: LD_ADDR_VAR 0 3
 388: PUSH
 389: LD_VAR 0 4
 393: ST_TO_ADDR
// break ;
 394: GO 398
// end ;
 396: GO 356
 398: POP
 399: POP
// end ;
 400: LD_VAR 0 3
 404: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 405: LD_INT 0
 407: PPUSH
 408: PPUSH
// InitUc ;
 409: CALL_OW 18
// InitHc ;
 413: CALL_OW 19
// uc_side := 0 ;
 417: LD_ADDR_OWVAR 20
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// uc_nation := 0 ;
 425: LD_ADDR_OWVAR 21
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// for i = 1 to amount do
 433: LD_ADDR_VAR 0 4
 437: PUSH
 438: DOUBLE
 439: LD_INT 1
 441: DEC
 442: ST_TO_ADDR
 443: LD_VAR 0 2
 447: PUSH
 448: FOR_TO
 449: IFFALSE 522
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 451: LD_ADDR_OWVAR 29
 455: PUSH
 456: LD_INT 9
 458: PPUSH
 459: LD_INT 12
 461: PPUSH
 462: CALL_OW 12
 466: PUSH
 467: LD_INT 9
 469: PPUSH
 470: LD_INT 12
 472: PPUSH
 473: CALL_OW 12
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: ST_TO_ADDR
// hc_agressivity := 0 ;
 482: LD_ADDR_OWVAR 35
 486: PUSH
 487: LD_INT 0
 489: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 490: LD_INT 0
 492: PPUSH
 493: LD_INT 12
 495: PPUSH
 496: LD_INT 1
 498: PPUSH
 499: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 503: CALL_OW 44
 507: PPUSH
 508: LD_VAR 0 1
 512: PPUSH
 513: LD_INT 0
 515: PPUSH
 516: CALL_OW 49
// end ;
 520: GO 448
 522: POP
 523: POP
// InitHc ;
 524: CALL_OW 19
// end ;
 528: LD_VAR 0 3
 532: RET
// export function CreateNature ; var i ; begin
 533: LD_INT 0
 535: PPUSH
 536: PPUSH
// SpawnApeman ( forest , 9 ) ;
 537: LD_INT 1
 539: PPUSH
 540: LD_INT 9
 542: PPUSH
 543: CALL 405 0 2
// for i := 1 to 4 do
 547: LD_ADDR_VAR 0 2
 551: PUSH
 552: DOUBLE
 553: LD_INT 1
 555: DEC
 556: ST_TO_ADDR
 557: LD_INT 4
 559: PUSH
 560: FOR_TO
 561: IFFALSE 596
// begin hc_class := 21 ;
 563: LD_ADDR_OWVAR 28
 567: PUSH
 568: LD_INT 21
 570: ST_TO_ADDR
// hc_gallery :=  ;
 571: LD_ADDR_OWVAR 33
 575: PUSH
 576: LD_STRING 
 578: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 579: CALL_OW 44
 583: PPUSH
 584: LD_INT 1
 586: PPUSH
 587: LD_INT 0
 589: PPUSH
 590: CALL_OW 49
// end ;
 594: GO 560
 596: POP
 597: POP
// for i := 1 to 2 do
 598: LD_ADDR_VAR 0 2
 602: PUSH
 603: DOUBLE
 604: LD_INT 1
 606: DEC
 607: ST_TO_ADDR
 608: LD_INT 2
 610: PUSH
 611: FOR_TO
 612: IFFALSE 647
// begin hc_class := 18 ;
 614: LD_ADDR_OWVAR 28
 618: PUSH
 619: LD_INT 18
 621: ST_TO_ADDR
// hc_gallery :=  ;
 622: LD_ADDR_OWVAR 33
 626: PUSH
 627: LD_STRING 
 629: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 630: CALL_OW 44
 634: PPUSH
 635: LD_INT 1
 637: PPUSH
 638: LD_INT 0
 640: PPUSH
 641: CALL_OW 49
// end ;
 645: GO 611
 647: POP
 648: POP
// for i := 1 to 3 do
 649: LD_ADDR_VAR 0 2
 653: PUSH
 654: DOUBLE
 655: LD_INT 1
 657: DEC
 658: ST_TO_ADDR
 659: LD_INT 3
 661: PUSH
 662: FOR_TO
 663: IFFALSE 698
// begin hc_class := 13 ;
 665: LD_ADDR_OWVAR 28
 669: PUSH
 670: LD_INT 13
 672: ST_TO_ADDR
// hc_gallery :=  ;
 673: LD_ADDR_OWVAR 33
 677: PUSH
 678: LD_STRING 
 680: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 681: CALL_OW 44
 685: PPUSH
 686: LD_INT 1
 688: PPUSH
 689: LD_INT 0
 691: PPUSH
 692: CALL_OW 49
// end ;
 696: GO 662
 698: POP
 699: POP
// for i := 1 to 4 do
 700: LD_ADDR_VAR 0 2
 704: PUSH
 705: DOUBLE
 706: LD_INT 1
 708: DEC
 709: ST_TO_ADDR
 710: LD_INT 4
 712: PUSH
 713: FOR_TO
 714: IFFALSE 749
// begin hc_class := class_frog ;
 716: LD_ADDR_OWVAR 28
 720: PUSH
 721: LD_INT 19
 723: ST_TO_ADDR
// hc_gallery :=  ;
 724: LD_ADDR_OWVAR 33
 728: PUSH
 729: LD_STRING 
 731: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 732: CALL_OW 44
 736: PPUSH
 737: LD_INT 8
 739: PPUSH
 740: LD_INT 0
 742: PPUSH
 743: CALL_OW 49
// end ;
 747: GO 713
 749: POP
 750: POP
// end ;
 751: LD_VAR 0 1
 755: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 756: LD_INT 0
 758: PPUSH
 759: PPUSH
 760: PPUSH
// if not observer or not unit then
 761: LD_VAR 0 1
 765: NOT
 766: PUSH
 767: LD_VAR 0 2
 771: NOT
 772: OR
 773: IFFALSE 777
// exit ;
 775: GO 825
// if not See ( GetSide ( observer ) , unit ) then
 777: LD_VAR 0 1
 781: PPUSH
 782: CALL_OW 255
 786: PPUSH
 787: LD_VAR 0 2
 791: PPUSH
 792: CALL_OW 292
 796: NOT
 797: IFFALSE 801
// exit ;
 799: GO 825
// result := GetDistUnits ( observer , unit ) < 12 ;
 801: LD_ADDR_VAR 0 3
 805: PUSH
 806: LD_VAR 0 1
 810: PPUSH
 811: LD_VAR 0 2
 815: PPUSH
 816: CALL_OW 296
 820: PUSH
 821: LD_INT 12
 823: LESS
 824: ST_TO_ADDR
// end ; end_of_file
 825: LD_VAR 0 3
 829: RET
// export Gladstone , Lynch ; export usForces , usSci ; export function PrepareAmericans ; var i , un , veh , tmp , arm ; begin
 830: LD_INT 0
 832: PPUSH
 833: PPUSH
 834: PPUSH
 835: PPUSH
 836: PPUSH
 837: PPUSH
// usForces := [ ] ;
 838: LD_ADDR_EXP 21
 842: PUSH
 843: EMPTY
 844: ST_TO_ADDR
// usSci := [ ] ;
 845: LD_ADDR_EXP 22
 849: PUSH
 850: EMPTY
 851: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
 852: LD_INT 1
 854: PPUSH
 855: LD_STRING Delta
 857: PPUSH
 858: CALL_OW 500
// SetResourceType ( GetBase ( Delta ) , mat_cans , 400 ) ;
 862: LD_INT 1
 864: PPUSH
 865: CALL_OW 274
 869: PPUSH
 870: LD_INT 1
 872: PPUSH
 873: LD_INT 400
 875: PPUSH
 876: CALL_OW 277
// SetResourceType ( GetBase ( Delta ) , mat_oil , 80 ) ;
 880: LD_INT 1
 882: PPUSH
 883: CALL_OW 274
 887: PPUSH
 888: LD_INT 2
 890: PPUSH
 891: LD_INT 80
 893: PPUSH
 894: CALL_OW 277
// uc_side := 1 ;
 898: LD_ADDR_OWVAR 20
 902: PUSH
 903: LD_INT 1
 905: ST_TO_ADDR
// uc_nation := 1 ;
 906: LD_ADDR_OWVAR 21
 910: PUSH
 911: LD_INT 1
 913: ST_TO_ADDR
// InitHc ;
 914: CALL_OW 19
// hc_importance := 0 ;
 918: LD_ADDR_OWVAR 32
 922: PUSH
 923: LD_INT 0
 925: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
 926: LD_ADDR_EXP 20
 930: PUSH
 931: LD_STRING Lynch
 933: PPUSH
 934: LD_INT 0
 936: PPUSH
 937: LD_STRING 
 939: PPUSH
 940: CALL 27309 0 3
 944: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false ,  ) ;
 945: LD_ADDR_EXP 19
 949: PUSH
 950: LD_STRING Gladstone
 952: PPUSH
 953: LD_INT 0
 955: PPUSH
 956: LD_STRING 
 958: PPUSH
 959: CALL 27309 0 3
 963: ST_TO_ADDR
// PlaceHumanInUnit ( Lynch , Delta ) ;
 964: LD_EXP 20
 968: PPUSH
 969: LD_INT 1
 971: PPUSH
 972: CALL_OW 52
// PlaceHumanInUnit ( Gladstone , usLab ) ;
 976: LD_EXP 19
 980: PPUSH
 981: LD_INT 3
 983: PPUSH
 984: CALL_OW 52
// for i := 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
 988: LD_ADDR_VAR 0 2
 992: PUSH
 993: DOUBLE
 994: LD_INT 1
 996: DEC
 997: ST_TO_ADDR
 998: LD_INT 1
1000: PUSH
1001: LD_INT 2
1003: PUSH
1004: LD_INT 2
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: LIST
1011: PUSH
1012: LD_OWVAR 67
1016: ARRAY
1017: PUSH
1018: FOR_TO
1019: IFFALSE 1065
// begin PrepareHuman ( false , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
1021: LD_INT 0
1023: PPUSH
1024: LD_INT 2
1026: PPUSH
1027: LD_INT 1
1029: PUSH
1030: LD_INT 2
1032: PUSH
1033: LD_INT 2
1035: PUSH
1036: EMPTY
1037: LIST
1038: LIST
1039: LIST
1040: PUSH
1041: LD_OWVAR 67
1045: ARRAY
1046: PPUSH
1047: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , Delta ) ;
1051: CALL_OW 44
1055: PPUSH
1056: LD_INT 1
1058: PPUSH
1059: CALL_OW 52
// end ;
1063: GO 1018
1065: POP
1066: POP
// for i := 1 to 7 - Difficulty do
1067: LD_ADDR_VAR 0 2
1071: PUSH
1072: DOUBLE
1073: LD_INT 1
1075: DEC
1076: ST_TO_ADDR
1077: LD_INT 7
1079: PUSH
1080: LD_OWVAR 67
1084: MINUS
1085: PUSH
1086: FOR_TO
1087: IFFALSE 1172
// begin PrepareHuman ( false , 4 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
1089: LD_INT 0
1091: PPUSH
1092: LD_INT 4
1094: PPUSH
1095: LD_INT 1
1097: PUSH
1098: LD_INT 2
1100: PUSH
1101: LD_INT 2
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: LIST
1108: PUSH
1109: LD_OWVAR 67
1113: ARRAY
1114: PPUSH
1115: CALL_OW 380
// un := CreateHuman ;
1119: LD_ADDR_VAR 0 3
1123: PUSH
1124: CALL_OW 44
1128: ST_TO_ADDR
// PlaceHumanInUnit ( un , usLab ) ;
1129: LD_VAR 0 3
1133: PPUSH
1134: LD_INT 3
1136: PPUSH
1137: CALL_OW 52
// usSci := Replace ( usSci , usSci + 1 , un ) ;
1141: LD_ADDR_EXP 22
1145: PUSH
1146: LD_EXP 22
1150: PPUSH
1151: LD_EXP 22
1155: PUSH
1156: LD_INT 1
1158: PLUS
1159: PPUSH
1160: LD_VAR 0 3
1164: PPUSH
1165: CALL_OW 1
1169: ST_TO_ADDR
// end ;
1170: GO 1086
1172: POP
1173: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
1174: LD_ADDR_VAR 0 6
1178: PUSH
1179: LD_INT 22
1181: PUSH
1182: LD_INT 1
1184: PUSH
1185: EMPTY
1186: LIST
1187: LIST
1188: PUSH
1189: LD_INT 30
1191: PUSH
1192: LD_INT 4
1194: PUSH
1195: EMPTY
1196: LIST
1197: LIST
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: PPUSH
1203: CALL_OW 69
1207: ST_TO_ADDR
// for i := 1 to 3 + [ 1 , 2 , 2 ] [ Difficulty ] do
1208: LD_ADDR_VAR 0 2
1212: PUSH
1213: DOUBLE
1214: LD_INT 1
1216: DEC
1217: ST_TO_ADDR
1218: LD_INT 3
1220: PUSH
1221: LD_INT 1
1223: PUSH
1224: LD_INT 2
1226: PUSH
1227: LD_INT 2
1229: PUSH
1230: EMPTY
1231: LIST
1232: LIST
1233: LIST
1234: PUSH
1235: LD_OWVAR 67
1239: ARRAY
1240: PLUS
1241: PUSH
1242: FOR_TO
1243: IFFALSE 1321
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
1245: LD_INT 0
1247: PPUSH
1248: LD_INT 1
1250: PPUSH
1251: LD_INT 1
1253: PUSH
1254: LD_INT 2
1256: PUSH
1257: LD_INT 3
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: LIST
1264: PUSH
1265: LD_OWVAR 67
1269: ARRAY
1270: PPUSH
1271: CALL_OW 380
// un := CreateHuman ;
1275: LD_ADDR_VAR 0 3
1279: PUSH
1280: CALL_OW 44
1284: ST_TO_ADDR
// usForces := usForces ^ un ;
1285: LD_ADDR_EXP 21
1289: PUSH
1290: LD_EXP 21
1294: PUSH
1295: LD_VAR 0 3
1299: ADD
1300: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm [ 1 ] ) ;
1301: LD_VAR 0 3
1305: PPUSH
1306: LD_VAR 0 6
1310: PUSH
1311: LD_INT 1
1313: ARRAY
1314: PPUSH
1315: CALL_OW 52
// end ;
1319: GO 1242
1321: POP
1322: POP
// if Difficulty > 1 then
1323: LD_OWVAR 67
1327: PUSH
1328: LD_INT 1
1330: GREATER
1331: IFFALSE 1426
// begin for i := 1 to Difficulty do
1333: LD_ADDR_VAR 0 2
1337: PUSH
1338: DOUBLE
1339: LD_INT 1
1341: DEC
1342: ST_TO_ADDR
1343: LD_OWVAR 67
1347: PUSH
1348: FOR_TO
1349: IFFALSE 1424
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
1351: LD_INT 0
1353: PPUSH
1354: LD_INT 1
1356: PPUSH
1357: LD_INT 1
1359: PUSH
1360: LD_INT 2
1362: PUSH
1363: LD_INT 2
1365: PUSH
1366: EMPTY
1367: LIST
1368: LIST
1369: LIST
1370: PUSH
1371: LD_OWVAR 67
1375: ARRAY
1376: PPUSH
1377: CALL_OW 380
// un := CreateHuman ;
1381: LD_ADDR_VAR 0 3
1385: PUSH
1386: CALL_OW 44
1390: ST_TO_ADDR
// usForces := usForces ^ un ;
1391: LD_ADDR_EXP 21
1395: PUSH
1396: LD_EXP 21
1400: PUSH
1401: LD_VAR 0 3
1405: ADD
1406: ST_TO_ADDR
// PlaceUnitArea ( un , usAdditionalDefenceArea , false ) ;
1407: LD_VAR 0 3
1411: PPUSH
1412: LD_INT 9
1414: PPUSH
1415: LD_INT 0
1417: PPUSH
1418: CALL_OW 49
// end ;
1422: GO 1348
1424: POP
1425: POP
// end ; PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 100 ) ;
1426: LD_INT 1
1428: PPUSH
1429: LD_INT 1
1431: PPUSH
1432: LD_INT 1
1434: PPUSH
1435: LD_INT 2
1437: PPUSH
1438: LD_INT 1
1440: PPUSH
1441: LD_INT 2
1443: PPUSH
1444: LD_INT 100
1446: PPUSH
1447: CALL 237 0 7
// veh := CreateVehicle ;
1451: LD_ADDR_VAR 0 4
1455: PUSH
1456: CALL_OW 45
1460: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1461: LD_VAR 0 4
1465: PPUSH
1466: LD_INT 2
1468: PPUSH
1469: CALL_OW 233
// PlaceUnitXY ( veh , 43 , 24 , false ) ;
1473: LD_VAR 0 4
1477: PPUSH
1478: LD_INT 43
1480: PPUSH
1481: LD_INT 24
1483: PPUSH
1484: LD_INT 0
1486: PPUSH
1487: CALL_OW 48
// end ;
1491: LD_VAR 0 1
1495: RET
// export function SendSciToForest ; var i , j , k , tmp , xy ; begin
1496: LD_INT 0
1498: PPUSH
1499: PPUSH
1500: PPUSH
1501: PPUSH
1502: PPUSH
1503: PPUSH
// if not usSci then
1504: LD_EXP 22
1508: NOT
1509: IFFALSE 1513
// exit ;
1511: GO 1687
// xy := AreaToList ( tameArea , 0 ) ;
1513: LD_ADDR_VAR 0 6
1517: PUSH
1518: LD_INT 5
1520: PPUSH
1521: LD_INT 0
1523: PPUSH
1524: CALL_OW 517
1528: ST_TO_ADDR
// for i in usSci do
1529: LD_ADDR_VAR 0 2
1533: PUSH
1534: LD_EXP 22
1538: PUSH
1539: FOR_IN
1540: IFFALSE 1685
// begin k := rand ( 1 , xy [ 1 ] ) ;
1542: LD_ADDR_VAR 0 4
1546: PUSH
1547: LD_INT 1
1549: PPUSH
1550: LD_VAR 0 6
1554: PUSH
1555: LD_INT 1
1557: ARRAY
1558: PPUSH
1559: CALL_OW 12
1563: ST_TO_ADDR
// ComExitBuilding ( i ) ;
1564: LD_VAR 0 2
1568: PPUSH
1569: CALL_OW 122
// AddComMoveXY ( i , xy [ 1 ] [ k ] , xy [ 2 ] [ k ] ) ;
1573: LD_VAR 0 2
1577: PPUSH
1578: LD_VAR 0 6
1582: PUSH
1583: LD_INT 1
1585: ARRAY
1586: PUSH
1587: LD_VAR 0 4
1591: ARRAY
1592: PPUSH
1593: LD_VAR 0 6
1597: PUSH
1598: LD_INT 2
1600: ARRAY
1601: PUSH
1602: LD_VAR 0 4
1606: ARRAY
1607: PPUSH
1608: CALL_OW 171
// for j := 1 to 2 do
1612: LD_ADDR_VAR 0 3
1616: PUSH
1617: DOUBLE
1618: LD_INT 1
1620: DEC
1621: ST_TO_ADDR
1622: LD_INT 2
1624: PUSH
1625: FOR_TO
1626: IFFALSE 1681
// begin tmp := Delete ( xy [ j ] , k ) ;
1628: LD_ADDR_VAR 0 5
1632: PUSH
1633: LD_VAR 0 6
1637: PUSH
1638: LD_VAR 0 3
1642: ARRAY
1643: PPUSH
1644: LD_VAR 0 4
1648: PPUSH
1649: CALL_OW 3
1653: ST_TO_ADDR
// xy := Replace ( xy , j , tmp ) ;
1654: LD_ADDR_VAR 0 6
1658: PUSH
1659: LD_VAR 0 6
1663: PPUSH
1664: LD_VAR 0 3
1668: PPUSH
1669: LD_VAR 0 5
1673: PPUSH
1674: CALL_OW 1
1678: ST_TO_ADDR
// end ;
1679: GO 1625
1681: POP
1682: POP
// end ;
1683: GO 1539
1685: POP
1686: POP
// end ;
1687: LD_VAR 0 1
1691: RET
// every 0 0$5 + 0 0$10 trigger aviradzeSpotted and usSci and not usAlert and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do var i , x , y , d , ape ;
1692: LD_EXP 4
1696: PUSH
1697: LD_EXP 22
1701: AND
1702: PUSH
1703: LD_EXP 10
1707: NOT
1708: AND
1709: PUSH
1710: LD_INT 22
1712: PUSH
1713: LD_INT 0
1715: PUSH
1716: EMPTY
1717: LIST
1718: LIST
1719: PUSH
1720: LD_INT 25
1722: PUSH
1723: LD_INT 12
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: PPUSH
1734: CALL_OW 69
1738: AND
1739: IFFALSE 2231
1741: GO 1743
1743: DISABLE
1744: LD_INT 0
1746: PPUSH
1747: PPUSH
1748: PPUSH
1749: PPUSH
1750: PPUSH
// begin enable ;
1751: ENABLE
// if UnitFilter ( usSci , [ f_or , [ f_hastask ] , [ f_inside ] ] ) then
1752: LD_EXP 22
1756: PPUSH
1757: LD_INT 2
1759: PUSH
1760: LD_INT 60
1762: PUSH
1763: EMPTY
1764: LIST
1765: PUSH
1766: LD_INT 54
1768: PUSH
1769: EMPTY
1770: LIST
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: LIST
1776: PPUSH
1777: CALL_OW 72
1781: IFFALSE 1785
// exit ;
1783: GO 2231
// for i in usSci do
1785: LD_ADDR_VAR 0 1
1789: PUSH
1790: LD_EXP 22
1794: PUSH
1795: FOR_IN
1796: IFFALSE 2229
// begin if not HasTask ( i ) and GetLives ( i ) = 1000 then
1798: LD_VAR 0 1
1802: PPUSH
1803: CALL_OW 314
1807: NOT
1808: PUSH
1809: LD_VAR 0 1
1813: PPUSH
1814: CALL_OW 256
1818: PUSH
1819: LD_INT 1000
1821: EQUAL
1822: AND
1823: IFFALSE 2030
// begin ape := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) , i ) ;
1825: LD_ADDR_VAR 0 5
1829: PUSH
1830: LD_INT 22
1832: PUSH
1833: LD_INT 0
1835: PUSH
1836: EMPTY
1837: LIST
1838: LIST
1839: PUSH
1840: LD_INT 25
1842: PUSH
1843: LD_INT 12
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: PPUSH
1854: CALL_OW 69
1858: PPUSH
1859: LD_VAR 0 1
1863: PPUSH
1864: CALL_OW 74
1868: ST_TO_ADDR
// if GetDistUnits ( i , ape ) < 10 then
1869: LD_VAR 0 1
1873: PPUSH
1874: LD_VAR 0 5
1878: PPUSH
1879: CALL_OW 296
1883: PUSH
1884: LD_INT 10
1886: LESS
1887: IFFALSE 1920
// ComTameXY ( i , GetX ( ape ) , GetY ( ape ) ) else
1889: LD_VAR 0 1
1893: PPUSH
1894: LD_VAR 0 5
1898: PPUSH
1899: CALL_OW 250
1903: PPUSH
1904: LD_VAR 0 5
1908: PPUSH
1909: CALL_OW 251
1913: PPUSH
1914: CALL_OW 131
1918: GO 2030
// begin d := rand ( 0 , 5 ) ;
1920: LD_ADDR_VAR 0 4
1924: PUSH
1925: LD_INT 0
1927: PPUSH
1928: LD_INT 5
1930: PPUSH
1931: CALL_OW 12
1935: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 3 ) ;
1936: LD_ADDR_VAR 0 2
1940: PUSH
1941: LD_VAR 0 1
1945: PPUSH
1946: CALL_OW 250
1950: PPUSH
1951: LD_VAR 0 4
1955: PPUSH
1956: LD_INT 3
1958: PPUSH
1959: CALL_OW 272
1963: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 3 ) ;
1964: LD_ADDR_VAR 0 3
1968: PUSH
1969: LD_VAR 0 1
1973: PPUSH
1974: CALL_OW 251
1978: PPUSH
1979: LD_VAR 0 4
1983: PPUSH
1984: LD_INT 3
1986: PPUSH
1987: CALL_OW 273
1991: ST_TO_ADDR
// if not ValidHex ( x , y ) then
1992: LD_VAR 0 2
1996: PPUSH
1997: LD_VAR 0 3
2001: PPUSH
2002: CALL_OW 488
2006: NOT
2007: IFFALSE 2011
// continue ;
2009: GO 1795
// ComMoveXY ( i , x , y ) ;
2011: LD_VAR 0 1
2015: PPUSH
2016: LD_VAR 0 2
2020: PPUSH
2021: LD_VAR 0 3
2025: PPUSH
2026: CALL_OW 111
// end ; end ; if GetLives ( i ) < 900 and GetDistUnitXY ( i , 37 , 23 ) > 10 then
2030: LD_VAR 0 1
2034: PPUSH
2035: CALL_OW 256
2039: PUSH
2040: LD_INT 900
2042: LESS
2043: PUSH
2044: LD_VAR 0 1
2048: PPUSH
2049: LD_INT 37
2051: PPUSH
2052: LD_INT 23
2054: PPUSH
2055: CALL_OW 297
2059: PUSH
2060: LD_INT 10
2062: GREATER
2063: AND
2064: IFFALSE 2140
// begin if IsOk ( Gladstone ) and IsInUnit ( Gladstone ) then
2066: LD_EXP 19
2070: PPUSH
2071: CALL_OW 302
2075: PUSH
2076: LD_EXP 19
2080: PPUSH
2081: CALL_OW 310
2085: AND
2086: IFFALSE 2097
// ComExitBuilding ( Gladstone ) ;
2088: LD_EXP 19
2092: PPUSH
2093: CALL_OW 122
// AddComHeal ( Gladstone , i ) ;
2097: LD_EXP 19
2101: PPUSH
2102: LD_VAR 0 1
2106: PPUSH
2107: CALL_OW 188
// AddComEnterUnit ( Gladstone , usLab ) ;
2111: LD_EXP 19
2115: PPUSH
2116: LD_INT 3
2118: PPUSH
2119: CALL_OW 180
// ComMoveXY ( i , 37 , 23 ) ;
2123: LD_VAR 0 1
2127: PPUSH
2128: LD_INT 37
2130: PPUSH
2131: LD_INT 23
2133: PPUSH
2134: CALL_OW 111
// end else
2138: GO 2227
// if GetLives ( i ) = 1000 then
2140: LD_VAR 0 1
2144: PPUSH
2145: CALL_OW 256
2149: PUSH
2150: LD_INT 1000
2152: EQUAL
2153: IFFALSE 2227
// begin if SideShoot ( i ) = 2 then
2155: LD_VAR 0 1
2159: PPUSH
2160: CALL_OW 503
2164: PUSH
2165: LD_INT 2
2167: EQUAL
2168: IFFALSE 2215
// begin if not usAlert then
2170: LD_EXP 10
2174: NOT
2175: IFFALSE 2185
// usAlert := true ;
2177: LD_ADDR_EXP 10
2181: PUSH
2182: LD_INT 1
2184: ST_TO_ADDR
// AddComEnterUnit ( i , usLab ) ;
2185: LD_VAR 0 1
2189: PPUSH
2190: LD_INT 3
2192: PPUSH
2193: CALL_OW 180
// usSci := usSci diff i ;
2197: LD_ADDR_EXP 22
2201: PUSH
2202: LD_EXP 22
2206: PUSH
2207: LD_VAR 0 1
2211: DIFF
2212: ST_TO_ADDR
// end else
2213: GO 2227
// ComMoveToArea ( i , tameArea ) ;
2215: LD_VAR 0 1
2219: PPUSH
2220: LD_INT 5
2222: PPUSH
2223: CALL_OW 113
// end ; end ;
2227: GO 1795
2229: POP
2230: POP
// end ;
2231: PPOPN 5
2233: END
// every 0 0$1 trigger not usAlert and ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 999 ] ] ] ) or FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) ) do
2234: LD_EXP 10
2238: NOT
2239: PUSH
2240: LD_INT 22
2242: PUSH
2243: LD_INT 1
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: PUSH
2250: LD_INT 21
2252: PUSH
2253: LD_INT 3
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: PUSH
2260: LD_INT 3
2262: PUSH
2263: LD_INT 57
2265: PUSH
2266: EMPTY
2267: LIST
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PUSH
2273: LD_INT 3
2275: PUSH
2276: LD_INT 24
2278: PUSH
2279: LD_INT 999
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: PUSH
2290: EMPTY
2291: LIST
2292: LIST
2293: LIST
2294: LIST
2295: PPUSH
2296: CALL_OW 69
2300: PUSH
2301: LD_INT 7
2303: PPUSH
2304: LD_INT 22
2306: PUSH
2307: LD_INT 2
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: PPUSH
2314: CALL_OW 70
2318: OR
2319: AND
2320: IFFALSE 2333
2322: GO 2324
2324: DISABLE
// usAlert := true ;
2325: LD_ADDR_EXP 10
2329: PUSH
2330: LD_INT 1
2332: ST_TO_ADDR
2333: END
// every 0 0$1 trigger usAlert do var i , b , arm ;
2334: LD_EXP 10
2338: IFFALSE 2685
2340: GO 2342
2342: DISABLE
2343: LD_INT 0
2345: PPUSH
2346: PPUSH
2347: PPUSH
// begin usActiveDefend := true ;
2348: LD_ADDR_EXP 11
2352: PUSH
2353: LD_INT 1
2355: ST_TO_ADDR
// if not usForces then
2356: LD_EXP 21
2360: NOT
2361: IFFALSE 2365
// exit ;
2363: GO 2685
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
2365: LD_ADDR_VAR 0 3
2369: PUSH
2370: LD_INT 22
2372: PUSH
2373: LD_INT 1
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: PUSH
2380: LD_INT 30
2382: PUSH
2383: LD_INT 4
2385: PUSH
2386: EMPTY
2387: LIST
2388: LIST
2389: PUSH
2390: EMPTY
2391: LIST
2392: LIST
2393: PPUSH
2394: CALL_OW 69
2398: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
2399: LD_ADDR_VAR 0 2
2403: PUSH
2404: LD_INT 22
2406: PUSH
2407: LD_INT 1
2409: PUSH
2410: EMPTY
2411: LIST
2412: LIST
2413: PUSH
2414: LD_INT 30
2416: PUSH
2417: LD_INT 31
2419: PUSH
2420: EMPTY
2421: LIST
2422: LIST
2423: PUSH
2424: EMPTY
2425: LIST
2426: LIST
2427: PPUSH
2428: CALL_OW 69
2432: ST_TO_ADDR
// ComExitBuilding ( Lynch ) ;
2433: LD_EXP 20
2437: PPUSH
2438: CALL_OW 122
// AddComEnterUnit ( Lynch , arm [ 1 ] ) ;
2442: LD_EXP 20
2446: PPUSH
2447: LD_VAR 0 3
2451: PUSH
2452: LD_INT 1
2454: ARRAY
2455: PPUSH
2456: CALL_OW 180
// if IsOk ( Gladstone ) then
2460: LD_EXP 19
2464: PPUSH
2465: CALL_OW 302
2469: IFFALSE 2510
// begin ComExitBuilding ( Gladstone ) ;
2471: LD_EXP 19
2475: PPUSH
2476: CALL_OW 122
// AddComEnterUnit ( Gladstone , arm [ 1 ] ) ;
2480: LD_EXP 19
2484: PPUSH
2485: LD_VAR 0 3
2489: PUSH
2490: LD_INT 1
2492: ARRAY
2493: PPUSH
2494: CALL_OW 180
// AddComChangeProfession ( Gladstone , class_soldier ) ;
2498: LD_EXP 19
2502: PPUSH
2503: LD_INT 1
2505: PPUSH
2506: CALL_OW 183
// end ; ComExitBuilding ( usForces [ 1 ] ) ;
2510: LD_EXP 21
2514: PUSH
2515: LD_INT 1
2517: ARRAY
2518: PPUSH
2519: CALL_OW 122
// AddComEnterUnit ( usForces [ 1 ] , b [ 1 ] ) ;
2523: LD_EXP 21
2527: PUSH
2528: LD_INT 1
2530: ARRAY
2531: PPUSH
2532: LD_VAR 0 2
2536: PUSH
2537: LD_INT 1
2539: ARRAY
2540: PPUSH
2541: CALL_OW 180
// ComExitBuilding ( usForces [ 2 ] ) ;
2545: LD_EXP 21
2549: PUSH
2550: LD_INT 2
2552: ARRAY
2553: PPUSH
2554: CALL_OW 122
// AddComEnterUnit ( usForces [ 2 ] , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
2558: LD_EXP 21
2562: PUSH
2563: LD_INT 2
2565: ARRAY
2566: PPUSH
2567: LD_INT 22
2569: PUSH
2570: LD_INT 1
2572: PUSH
2573: EMPTY
2574: LIST
2575: LIST
2576: PUSH
2577: LD_INT 30
2579: PUSH
2580: LD_INT 32
2582: PUSH
2583: EMPTY
2584: LIST
2585: LIST
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: PPUSH
2591: CALL_OW 69
2595: PUSH
2596: LD_INT 1
2598: ARRAY
2599: PPUSH
2600: CALL_OW 180
// if b > 1 and usForces > 2 then
2604: LD_VAR 0 2
2608: PUSH
2609: LD_INT 1
2611: GREATER
2612: PUSH
2613: LD_EXP 21
2617: PUSH
2618: LD_INT 2
2620: GREATER
2621: AND
2622: IFFALSE 2685
// begin repeat wait ( 0 0$1 ) ;
2624: LD_INT 35
2626: PPUSH
2627: CALL_OW 67
// until BuildingStatus ( b [ 2 ] ) <> bs_build ;
2631: LD_VAR 0 2
2635: PUSH
2636: LD_INT 2
2638: ARRAY
2639: PPUSH
2640: CALL_OW 461
2644: PUSH
2645: LD_INT 1
2647: NONEQUAL
2648: IFFALSE 2624
// ComExitBuilding ( usForces [ 3 ] ) ;
2650: LD_EXP 21
2654: PUSH
2655: LD_INT 3
2657: ARRAY
2658: PPUSH
2659: CALL_OW 122
// AddComEnterUnit ( usForces [ 3 ] , b [ 2 ] ) ;
2663: LD_EXP 21
2667: PUSH
2668: LD_INT 3
2670: ARRAY
2671: PPUSH
2672: LD_VAR 0 2
2676: PUSH
2677: LD_INT 2
2679: ARRAY
2680: PPUSH
2681: CALL_OW 180
// end ; end ;
2685: PPOPN 3
2687: END
// every 0 0$1 trigger GetLives ( usLab ) < 999 and usAlert and usForces do var i ;
2688: LD_INT 3
2690: PPUSH
2691: CALL_OW 256
2695: PUSH
2696: LD_INT 999
2698: LESS
2699: PUSH
2700: LD_EXP 10
2704: AND
2705: PUSH
2706: LD_EXP 21
2710: AND
2711: IFFALSE 2882
2713: GO 2715
2715: DISABLE
2716: LD_INT 0
2718: PPUSH
// begin for i in usForces do
2719: LD_ADDR_VAR 0 1
2723: PUSH
2724: LD_EXP 21
2728: PUSH
2729: FOR_IN
2730: IFFALSE 2769
// begin if IsInUnit ( i ) then
2732: LD_VAR 0 1
2736: PPUSH
2737: CALL_OW 310
2741: IFFALSE 2752
// ComExitBuilding ( i ) ;
2743: LD_VAR 0 1
2747: PPUSH
2748: CALL_OW 122
// AddComAgressiveMove ( i , 31 , 8 ) ;
2752: LD_VAR 0 1
2756: PPUSH
2757: LD_INT 31
2759: PPUSH
2760: LD_INT 8
2762: PPUSH
2763: CALL_OW 174
// end ;
2767: GO 2729
2769: POP
2770: POP
// wait ( 0 0$8 ) ;
2771: LD_INT 280
2773: PPUSH
2774: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) then
2778: LD_INT 22
2780: PUSH
2781: LD_INT 2
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: PUSH
2788: LD_INT 91
2790: PUSH
2791: LD_INT 3
2793: PUSH
2794: LD_INT 14
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: LIST
2801: PUSH
2802: EMPTY
2803: LIST
2804: LIST
2805: PPUSH
2806: CALL_OW 69
2810: IFFALSE 2860
// ComAttackUnit ( usForces , FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) [ 1 ] ) else
2812: LD_EXP 21
2816: PPUSH
2817: LD_INT 22
2819: PUSH
2820: LD_INT 2
2822: PUSH
2823: EMPTY
2824: LIST
2825: LIST
2826: PUSH
2827: LD_INT 91
2829: PUSH
2830: LD_INT 3
2832: PUSH
2833: LD_INT 14
2835: PUSH
2836: EMPTY
2837: LIST
2838: LIST
2839: LIST
2840: PUSH
2841: EMPTY
2842: LIST
2843: LIST
2844: PPUSH
2845: CALL_OW 69
2849: PUSH
2850: LD_INT 1
2852: ARRAY
2853: PPUSH
2854: CALL_OW 115
2858: GO 2882
// begin wait ( 0 0$20 ) ;
2860: LD_INT 700
2862: PPUSH
2863: CALL_OW 67
// AddComMoveXY ( usForces , 39 , 19 ) ;
2867: LD_EXP 21
2871: PPUSH
2872: LD_INT 39
2874: PPUSH
2875: LD_INT 19
2877: PPUSH
2878: CALL_OW 171
// end ; end ;
2882: PPOPN 1
2884: END
// every 0 0$3 trigger ( GetDistUnits ( Heike , Delta ) < 10 or GetLives ( usLab ) < 999 ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do var tmp , veh ;
2885: LD_EXP 23
2889: PPUSH
2890: LD_INT 1
2892: PPUSH
2893: CALL_OW 296
2897: PUSH
2898: LD_INT 10
2900: LESS
2901: PUSH
2902: LD_INT 3
2904: PPUSH
2905: CALL_OW 256
2909: PUSH
2910: LD_INT 999
2912: LESS
2913: OR
2914: PUSH
2915: LD_INT 22
2917: PUSH
2918: LD_INT 1
2920: PUSH
2921: EMPTY
2922: LIST
2923: LIST
2924: PUSH
2925: LD_INT 25
2927: PUSH
2928: LD_INT 2
2930: PUSH
2931: EMPTY
2932: LIST
2933: LIST
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: PPUSH
2939: CALL_OW 69
2943: AND
2944: IFFALSE 3058
2946: GO 2948
2948: DISABLE
2949: LD_INT 0
2951: PPUSH
2952: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
2953: LD_ADDR_VAR 0 1
2957: PUSH
2958: LD_INT 22
2960: PUSH
2961: LD_INT 1
2963: PUSH
2964: EMPTY
2965: LIST
2966: LIST
2967: PUSH
2968: LD_INT 25
2970: PUSH
2971: LD_INT 2
2973: PUSH
2974: EMPTY
2975: LIST
2976: LIST
2977: PUSH
2978: EMPTY
2979: LIST
2980: LIST
2981: PPUSH
2982: CALL_OW 69
2986: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2987: LD_ADDR_VAR 0 2
2991: PUSH
2992: LD_INT 22
2994: PUSH
2995: LD_INT 1
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: PUSH
3002: LD_INT 21
3004: PUSH
3005: LD_INT 2
3007: PUSH
3008: EMPTY
3009: LIST
3010: LIST
3011: PUSH
3012: LD_INT 58
3014: PUSH
3015: EMPTY
3016: LIST
3017: PUSH
3018: EMPTY
3019: LIST
3020: LIST
3021: LIST
3022: PPUSH
3023: CALL_OW 69
3027: ST_TO_ADDR
// if not tmp then
3028: LD_VAR 0 1
3032: NOT
3033: IFFALSE 3037
// exit ;
3035: GO 3058
// ComExitBuilding ( tmp ) ;
3037: LD_VAR 0 1
3041: PPUSH
3042: CALL_OW 122
// AddComDismantle ( tmp , usLab ) ;
3046: LD_VAR 0 1
3050: PPUSH
3051: LD_INT 3
3053: PPUSH
3054: CALL_OW 227
// end ;
3058: PPOPN 2
3060: END
// every 0 0$1 trigger usAlert and FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) do var i , tmp ;
3061: LD_EXP 10
3065: PUSH
3066: LD_INT 7
3068: PPUSH
3069: LD_INT 22
3071: PUSH
3072: LD_INT 1
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: PUSH
3079: LD_INT 21
3081: PUSH
3082: LD_INT 1
3084: PUSH
3085: EMPTY
3086: LIST
3087: LIST
3088: PUSH
3089: LD_INT 3
3091: PUSH
3092: LD_INT 24
3094: PUSH
3095: LD_INT 600
3097: PUSH
3098: EMPTY
3099: LIST
3100: LIST
3101: PUSH
3102: EMPTY
3103: LIST
3104: LIST
3105: PUSH
3106: EMPTY
3107: LIST
3108: LIST
3109: LIST
3110: PPUSH
3111: CALL_OW 70
3115: AND
3116: IFFALSE 3244
3118: GO 3120
3120: DISABLE
3121: LD_INT 0
3123: PPUSH
3124: PPUSH
// begin enable ;
3125: ENABLE
// tmp := FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) ;
3126: LD_ADDR_VAR 0 2
3130: PUSH
3131: LD_INT 7
3133: PPUSH
3134: LD_INT 22
3136: PUSH
3137: LD_INT 1
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: PUSH
3144: LD_INT 21
3146: PUSH
3147: LD_INT 1
3149: PUSH
3150: EMPTY
3151: LIST
3152: LIST
3153: PUSH
3154: LD_INT 3
3156: PUSH
3157: LD_INT 24
3159: PUSH
3160: LD_INT 600
3162: PUSH
3163: EMPTY
3164: LIST
3165: LIST
3166: PUSH
3167: EMPTY
3168: LIST
3169: LIST
3170: PUSH
3171: EMPTY
3172: LIST
3173: LIST
3174: LIST
3175: PPUSH
3176: CALL_OW 70
3180: ST_TO_ADDR
// if not tmp then
3181: LD_VAR 0 2
3185: NOT
3186: IFFALSE 3190
// exit ;
3188: GO 3244
// for i in tmp do
3190: LD_ADDR_VAR 0 1
3194: PUSH
3195: LD_VAR 0 2
3199: PUSH
3200: FOR_IN
3201: IFFALSE 3242
// if IsInUnit ( i ) then
3203: LD_VAR 0 1
3207: PPUSH
3208: CALL_OW 310
3212: IFFALSE 3225
// ComExitBuilding ( i ) else
3214: LD_VAR 0 1
3218: PPUSH
3219: CALL_OW 122
3223: GO 3240
// ComMoveXY ( i , 48 , 74 ) ;
3225: LD_VAR 0 1
3229: PPUSH
3230: LD_INT 48
3232: PPUSH
3233: LD_INT 74
3235: PPUSH
3236: CALL_OW 111
3240: GO 3200
3242: POP
3243: POP
// end ;
3244: PPOPN 2
3246: END
// every 12 12$00 do var i , un , tmp ;
3247: GO 3249
3249: DISABLE
3250: LD_INT 0
3252: PPUSH
3253: PPUSH
3254: PPUSH
// begin tmp := [ ] ;
3255: LD_ADDR_VAR 0 3
3259: PUSH
3260: EMPTY
3261: ST_TO_ADDR
// uc_side := 1 ;
3262: LD_ADDR_OWVAR 20
3266: PUSH
3267: LD_INT 1
3269: ST_TO_ADDR
// uc_nation := 1 ;
3270: LD_ADDR_OWVAR 21
3274: PUSH
3275: LD_INT 1
3277: ST_TO_ADDR
// case Difficulty of 1 :
3278: LD_OWVAR 67
3282: PUSH
3283: LD_INT 1
3285: DOUBLE
3286: EQUAL
3287: IFTRUE 3291
3289: GO 3394
3291: POP
// begin wait ( 1 1$00 ) ;
3292: LD_INT 2100
3294: PPUSH
3295: CALL_OW 67
// for i := 1 to 2 do
3299: LD_ADDR_VAR 0 1
3303: PUSH
3304: DOUBLE
3305: LD_INT 1
3307: DEC
3308: ST_TO_ADDR
3309: LD_INT 2
3311: PUSH
3312: FOR_TO
3313: IFFALSE 3390
// begin PrepareHuman ( false , [ 1 , 4 ] [ i mod 2 + 1 ] , 1 ) ;
3315: LD_INT 0
3317: PPUSH
3318: LD_INT 1
3320: PUSH
3321: LD_INT 4
3323: PUSH
3324: EMPTY
3325: LIST
3326: LIST
3327: PUSH
3328: LD_VAR 0 1
3332: PUSH
3333: LD_INT 2
3335: MOD
3336: PUSH
3337: LD_INT 1
3339: PLUS
3340: ARRAY
3341: PPUSH
3342: LD_INT 1
3344: PPUSH
3345: CALL_OW 380
// un := CreateHuman ;
3349: LD_ADDR_VAR 0 2
3353: PUSH
3354: CALL_OW 44
3358: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3359: LD_ADDR_VAR 0 3
3363: PUSH
3364: LD_VAR 0 3
3368: PPUSH
3369: LD_VAR 0 3
3373: PUSH
3374: LD_INT 1
3376: PLUS
3377: PPUSH
3378: LD_VAR 0 2
3382: PPUSH
3383: CALL_OW 1
3387: ST_TO_ADDR
// end ;
3388: GO 3312
3390: POP
3391: POP
// end ; 2 :
3392: GO 3788
3394: LD_INT 2
3396: DOUBLE
3397: EQUAL
3398: IFTRUE 3402
3400: GO 3536
3402: POP
// begin wait ( 0 0$30 ) ;
3403: LD_INT 1050
3405: PPUSH
3406: CALL_OW 67
// for i := 1 to 2 do
3410: LD_ADDR_VAR 0 1
3414: PUSH
3415: DOUBLE
3416: LD_INT 1
3418: DEC
3419: ST_TO_ADDR
3420: LD_INT 2
3422: PUSH
3423: FOR_TO
3424: IFFALSE 3480
// begin PrepareHuman ( false , 1 , 2 ) ;
3426: LD_INT 0
3428: PPUSH
3429: LD_INT 1
3431: PPUSH
3432: LD_INT 2
3434: PPUSH
3435: CALL_OW 380
// un := CreateHuman ;
3439: LD_ADDR_VAR 0 2
3443: PUSH
3444: CALL_OW 44
3448: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3449: LD_ADDR_VAR 0 3
3453: PUSH
3454: LD_VAR 0 3
3458: PPUSH
3459: LD_VAR 0 3
3463: PUSH
3464: LD_INT 1
3466: PLUS
3467: PPUSH
3468: LD_VAR 0 2
3472: PPUSH
3473: CALL_OW 1
3477: ST_TO_ADDR
// end ;
3478: GO 3423
3480: POP
3481: POP
// PrepareHuman ( false , 4 , 2 ) ;
3482: LD_INT 0
3484: PPUSH
3485: LD_INT 4
3487: PPUSH
3488: LD_INT 2
3490: PPUSH
3491: CALL_OW 380
// un := CreateHuman ;
3495: LD_ADDR_VAR 0 2
3499: PUSH
3500: CALL_OW 44
3504: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3505: LD_ADDR_VAR 0 3
3509: PUSH
3510: LD_VAR 0 3
3514: PPUSH
3515: LD_VAR 0 3
3519: PUSH
3520: LD_INT 1
3522: PLUS
3523: PPUSH
3524: LD_VAR 0 2
3528: PPUSH
3529: CALL_OW 1
3533: ST_TO_ADDR
// end ; 3 :
3534: GO 3788
3536: LD_INT 3
3538: DOUBLE
3539: EQUAL
3540: IFTRUE 3544
3542: GO 3787
3544: POP
// begin for i := 1 to 2 do
3545: LD_ADDR_VAR 0 1
3549: PUSH
3550: DOUBLE
3551: LD_INT 1
3553: DEC
3554: ST_TO_ADDR
3555: LD_INT 2
3557: PUSH
3558: FOR_TO
3559: IFFALSE 3615
// begin PrepareHuman ( false , 1 , 2 ) ;
3561: LD_INT 0
3563: PPUSH
3564: LD_INT 1
3566: PPUSH
3567: LD_INT 2
3569: PPUSH
3570: CALL_OW 380
// un := CreateHuman ;
3574: LD_ADDR_VAR 0 2
3578: PUSH
3579: CALL_OW 44
3583: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3584: LD_ADDR_VAR 0 3
3588: PUSH
3589: LD_VAR 0 3
3593: PPUSH
3594: LD_VAR 0 3
3598: PUSH
3599: LD_INT 1
3601: PLUS
3602: PPUSH
3603: LD_VAR 0 2
3607: PPUSH
3608: CALL_OW 1
3612: ST_TO_ADDR
// end ;
3613: GO 3558
3615: POP
3616: POP
// PrepareHuman ( false , 4 , 2 ) ;
3617: LD_INT 0
3619: PPUSH
3620: LD_INT 4
3622: PPUSH
3623: LD_INT 2
3625: PPUSH
3626: CALL_OW 380
// un := CreateHuman ;
3630: LD_ADDR_VAR 0 2
3634: PUSH
3635: CALL_OW 44
3639: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3640: LD_ADDR_VAR 0 3
3644: PUSH
3645: LD_VAR 0 3
3649: PPUSH
3650: LD_VAR 0 3
3654: PUSH
3655: LD_INT 1
3657: PLUS
3658: PPUSH
3659: LD_VAR 0 2
3663: PPUSH
3664: CALL_OW 1
3668: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_machine_gun , 90 ) ;
3669: LD_INT 1
3671: PPUSH
3672: LD_INT 1
3674: PPUSH
3675: LD_INT 2
3677: PPUSH
3678: LD_INT 2
3680: PPUSH
3681: LD_INT 1
3683: PPUSH
3684: LD_INT 2
3686: PPUSH
3687: LD_INT 90
3689: PPUSH
3690: CALL 237 0 7
// un := CreateVehicle ;
3694: LD_ADDR_VAR 0 2
3698: PUSH
3699: CALL_OW 45
3703: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3704: LD_ADDR_VAR 0 3
3708: PUSH
3709: LD_VAR 0 3
3713: PPUSH
3714: LD_VAR 0 3
3718: PUSH
3719: LD_INT 1
3721: PLUS
3722: PPUSH
3723: LD_VAR 0 2
3727: PPUSH
3728: CALL_OW 1
3732: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
3733: LD_INT 0
3735: PPUSH
3736: LD_INT 1
3738: PPUSH
3739: LD_INT 2
3741: PPUSH
3742: CALL_OW 380
// un := CreateHuman ;
3746: LD_ADDR_VAR 0 2
3750: PUSH
3751: CALL_OW 44
3755: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3756: LD_ADDR_VAR 0 3
3760: PUSH
3761: LD_VAR 0 3
3765: PPUSH
3766: LD_VAR 0 3
3770: PUSH
3771: LD_INT 1
3773: PLUS
3774: PPUSH
3775: LD_VAR 0 2
3779: PPUSH
3780: CALL_OW 1
3784: ST_TO_ADDR
// end ; end ;
3785: GO 3788
3787: POP
// for i := 1 to tmp do
3788: LD_ADDR_VAR 0 1
3792: PUSH
3793: DOUBLE
3794: LD_INT 1
3796: DEC
3797: ST_TO_ADDR
3798: LD_VAR 0 3
3802: PUSH
3803: FOR_TO
3804: IFFALSE 3969
// begin SetDir ( tmp [ i ] , 1 ) ;
3806: LD_VAR 0 3
3810: PUSH
3811: LD_VAR 0 1
3815: ARRAY
3816: PPUSH
3817: LD_INT 1
3819: PPUSH
3820: CALL_OW 233
// if GetType ( tmp [ i ] ) = unit_human then
3824: LD_VAR 0 3
3828: PUSH
3829: LD_VAR 0 1
3833: ARRAY
3834: PPUSH
3835: CALL_OW 247
3839: PUSH
3840: LD_INT 1
3842: EQUAL
3843: IFFALSE 3871
// PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) else
3845: LD_VAR 0 3
3849: PUSH
3850: LD_VAR 0 1
3854: ARRAY
3855: PPUSH
3856: LD_INT 28
3858: PPUSH
3859: LD_INT 52
3861: PPUSH
3862: LD_INT 0
3864: PPUSH
3865: CALL_OW 48
3869: GO 3939
// begin PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) ;
3871: LD_VAR 0 3
3875: PUSH
3876: LD_VAR 0 1
3880: ARRAY
3881: PPUSH
3882: LD_INT 28
3884: PPUSH
3885: LD_INT 52
3887: PPUSH
3888: LD_INT 0
3890: PPUSH
3891: CALL_OW 48
// i := i + 1 ;
3895: LD_ADDR_VAR 0 1
3899: PUSH
3900: LD_VAR 0 1
3904: PUSH
3905: LD_INT 1
3907: PLUS
3908: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ i ] , tmp [ i - 1 ] ) ;
3909: LD_VAR 0 3
3913: PUSH
3914: LD_VAR 0 1
3918: ARRAY
3919: PPUSH
3920: LD_VAR 0 3
3924: PUSH
3925: LD_VAR 0 1
3929: PUSH
3930: LD_INT 1
3932: MINUS
3933: ARRAY
3934: PPUSH
3935: CALL_OW 52
// end ; ComMoveXY ( tmp [ i ] , 43 , 56 ) ;
3939: LD_VAR 0 3
3943: PUSH
3944: LD_VAR 0 1
3948: ARRAY
3949: PPUSH
3950: LD_INT 43
3952: PPUSH
3953: LD_INT 56
3955: PPUSH
3956: CALL_OW 111
// wait ( 0 0$2 ) ;
3960: LD_INT 70
3962: PPUSH
3963: CALL_OW 67
// end ;
3967: GO 3803
3969: POP
3970: POP
// wait ( 0 0$2 ) ;
3971: LD_INT 70
3973: PPUSH
3974: CALL_OW 67
// if not FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) then
3978: LD_INT 7
3980: PPUSH
3981: LD_INT 22
3983: PUSH
3984: LD_INT 2
3986: PUSH
3987: EMPTY
3988: LIST
3989: LIST
3990: PPUSH
3991: CALL_OW 70
3995: NOT
3996: IFFALSE 4194
// begin AddComAgressiveMove ( tmp , 35 , 24 ) ;
3998: LD_VAR 0 3
4002: PPUSH
4003: LD_INT 35
4005: PPUSH
4006: LD_INT 24
4008: PPUSH
4009: CALL_OW 174
// usForces := usForces union UnitFilter ( tmp , [ f_class , 1 ] ) ;
4013: LD_ADDR_EXP 21
4017: PUSH
4018: LD_EXP 21
4022: PUSH
4023: LD_VAR 0 3
4027: PPUSH
4028: LD_INT 25
4030: PUSH
4031: LD_INT 1
4033: PUSH
4034: EMPTY
4035: LIST
4036: LIST
4037: PPUSH
4038: CALL_OW 72
4042: UNION
4043: ST_TO_ADDR
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
4044: LD_INT 22
4046: PUSH
4047: LD_INT 1
4049: PUSH
4050: EMPTY
4051: LIST
4052: LIST
4053: PUSH
4054: LD_INT 30
4056: PUSH
4057: LD_INT 4
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: PUSH
4064: EMPTY
4065: LIST
4066: LIST
4067: PPUSH
4068: CALL_OW 69
4072: PUSH
4073: LD_INT 1
4075: ARRAY
4076: PPUSH
4077: CALL_OW 313
4081: PUSH
4082: LD_INT 6
4084: LESS
4085: IFFALSE 4144
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 1 ] ) , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
4087: LD_VAR 0 3
4091: PPUSH
4092: LD_INT 25
4094: PUSH
4095: LD_INT 1
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PPUSH
4102: CALL_OW 72
4106: PPUSH
4107: LD_INT 22
4109: PUSH
4110: LD_INT 1
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: PUSH
4117: LD_INT 30
4119: PUSH
4120: LD_INT 4
4122: PUSH
4123: EMPTY
4124: LIST
4125: LIST
4126: PUSH
4127: EMPTY
4128: LIST
4129: LIST
4130: PPUSH
4131: CALL_OW 69
4135: PUSH
4136: LD_INT 1
4138: ARRAY
4139: PPUSH
4140: CALL_OW 180
// if UnitFilter ( tmp , [ f_class , 4 ] ) then
4144: LD_VAR 0 3
4148: PPUSH
4149: LD_INT 25
4151: PUSH
4152: LD_INT 4
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: PPUSH
4159: CALL_OW 72
4163: IFFALSE 4192
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 4 ] ) , usLab ) ;
4165: LD_VAR 0 3
4169: PPUSH
4170: LD_INT 25
4172: PUSH
4173: LD_INT 4
4175: PUSH
4176: EMPTY
4177: LIST
4178: LIST
4179: PPUSH
4180: CALL_OW 72
4184: PPUSH
4185: LD_INT 3
4187: PPUSH
4188: CALL_OW 180
// end else
4192: GO 4469
// begin tmp := tmp union FilterUnitsInArea ( retreatArea , [ f_side , 1 ] ) ;
4194: LD_ADDR_VAR 0 3
4198: PUSH
4199: LD_VAR 0 3
4203: PUSH
4204: LD_INT 6
4206: PPUSH
4207: LD_INT 22
4209: PUSH
4210: LD_INT 1
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: PPUSH
4217: CALL_OW 70
4221: UNION
4222: ST_TO_ADDR
// ComMoveXY ( tmp , 45 , 54 ) ;
4223: LD_VAR 0 3
4227: PPUSH
4228: LD_INT 45
4230: PPUSH
4231: LD_INT 54
4233: PPUSH
4234: CALL_OW 111
// wait ( 0 0$3 ) ;
4238: LD_INT 105
4240: PPUSH
4241: CALL_OW 67
// AddComAgressiveMove ( tmp diff UnitFilter ( tmp , [ f_class , 4 ] ) , 35 , 24 ) ;
4245: LD_VAR 0 3
4249: PUSH
4250: LD_VAR 0 3
4254: PPUSH
4255: LD_INT 25
4257: PUSH
4258: LD_INT 4
4260: PUSH
4261: EMPTY
4262: LIST
4263: LIST
4264: PPUSH
4265: CALL_OW 72
4269: DIFF
4270: PPUSH
4271: LD_INT 35
4273: PPUSH
4274: LD_INT 24
4276: PPUSH
4277: CALL_OW 174
// AddComMoveXY ( UnitFilter ( tmp , [ f_class , 4 ] ) , 42 , 49 ) ;
4281: LD_VAR 0 3
4285: PPUSH
4286: LD_INT 25
4288: PUSH
4289: LD_INT 4
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: PPUSH
4296: CALL_OW 72
4300: PPUSH
4301: LD_INT 42
4303: PPUSH
4304: LD_INT 49
4306: PPUSH
4307: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4311: LD_INT 35
4313: PPUSH
4314: CALL_OW 67
// for i in tmp do
4318: LD_ADDR_VAR 0 1
4322: PUSH
4323: LD_VAR 0 3
4327: PUSH
4328: FOR_IN
4329: IFFALSE 4460
// if IsDead ( i ) then
4331: LD_VAR 0 1
4335: PPUSH
4336: CALL_OW 301
4340: IFFALSE 4360
// tmp := tmp diff i else
4342: LD_ADDR_VAR 0 3
4346: PUSH
4347: LD_VAR 0 3
4351: PUSH
4352: LD_VAR 0 1
4356: DIFF
4357: ST_TO_ADDR
4358: GO 4458
// if GetClass ( i ) = 1 then
4360: LD_VAR 0 1
4364: PPUSH
4365: CALL_OW 257
4369: PUSH
4370: LD_INT 1
4372: EQUAL
4373: IFFALSE 4458
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 42 , 49 ) > 6 then
4375: LD_VAR 0 1
4379: PPUSH
4380: CALL_OW 256
4384: PUSH
4385: LD_INT 600
4387: LESS
4388: PUSH
4389: LD_VAR 0 1
4393: PPUSH
4394: LD_INT 42
4396: PPUSH
4397: LD_INT 49
4399: PPUSH
4400: CALL_OW 297
4404: PUSH
4405: LD_INT 6
4407: GREATER
4408: AND
4409: IFFALSE 4428
// ComMoveXY ( i , 42 , 49 ) else
4411: LD_VAR 0 1
4415: PPUSH
4416: LD_INT 42
4418: PPUSH
4419: LD_INT 49
4421: PPUSH
4422: CALL_OW 111
4426: GO 4458
// if GetLives ( i ) = 1000 then
4428: LD_VAR 0 1
4432: PPUSH
4433: CALL_OW 256
4437: PUSH
4438: LD_INT 1000
4440: EQUAL
4441: IFFALSE 4458
// ComAgressiveMove ( i , 36 , 25 ) ;
4443: LD_VAR 0 1
4447: PPUSH
4448: LD_INT 36
4450: PPUSH
4451: LD_INT 25
4453: PPUSH
4454: CALL_OW 114
// end ;
4458: GO 4328
4460: POP
4461: POP
// until not tmp ;
4462: LD_VAR 0 3
4466: NOT
4467: IFFALSE 4311
// end ; end ;
4469: PPOPN 3
4471: END
// every 1 1$30 trigger FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) and not attackDeltaAllowed do var i , un , veh ;
4472: LD_INT 7
4474: PPUSH
4475: LD_INT 22
4477: PUSH
4478: LD_INT 2
4480: PUSH
4481: EMPTY
4482: LIST
4483: LIST
4484: PPUSH
4485: CALL_OW 70
4489: PUSH
4490: LD_EXP 14
4494: NOT
4495: AND
4496: IFFALSE 4654
4498: GO 4500
4500: DISABLE
4501: LD_INT 0
4503: PPUSH
4504: PPUSH
4505: PPUSH
// begin for i := 1 to 2 do
4506: LD_ADDR_VAR 0 1
4510: PUSH
4511: DOUBLE
4512: LD_INT 1
4514: DEC
4515: ST_TO_ADDR
4516: LD_INT 2
4518: PUSH
4519: FOR_TO
4520: IFFALSE 4652
// begin wait ( 0 0$3 ) ;
4522: LD_INT 105
4524: PPUSH
4525: CALL_OW 67
// uc_side := 1 ;
4529: LD_ADDR_OWVAR 20
4533: PUSH
4534: LD_INT 1
4536: ST_TO_ADDR
// uc_nation := 1 ;
4537: LD_ADDR_OWVAR 21
4541: PUSH
4542: LD_INT 1
4544: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 90 ) ;
4545: LD_INT 1
4547: PPUSH
4548: LD_INT 1
4550: PPUSH
4551: LD_INT 2
4553: PPUSH
4554: LD_INT 1
4556: PPUSH
4557: LD_INT 1
4559: PPUSH
4560: LD_INT 4
4562: PPUSH
4563: LD_INT 90
4565: PPUSH
4566: CALL 237 0 7
// veh := CreateVehicle ;
4570: LD_ADDR_VAR 0 3
4574: PUSH
4575: CALL_OW 45
4579: ST_TO_ADDR
// PlaceUnitXY ( veh , 29 , 52 , false ) ;
4580: LD_VAR 0 3
4584: PPUSH
4585: LD_INT 29
4587: PPUSH
4588: LD_INT 52
4590: PPUSH
4591: LD_INT 0
4593: PPUSH
4594: CALL_OW 48
// PrepareHuman ( false , 3 , 3 ) ;
4598: LD_INT 0
4600: PPUSH
4601: LD_INT 3
4603: PPUSH
4604: LD_INT 3
4606: PPUSH
4607: CALL_OW 380
// un := CreateHuman ;
4611: LD_ADDR_VAR 0 2
4615: PUSH
4616: CALL_OW 44
4620: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4621: LD_VAR 0 2
4625: PPUSH
4626: LD_VAR 0 3
4630: PPUSH
4631: CALL_OW 52
// ComAgressiveMove ( veh , 36 , 25 ) ;
4635: LD_VAR 0 3
4639: PPUSH
4640: LD_INT 36
4642: PPUSH
4643: LD_INT 25
4645: PPUSH
4646: CALL_OW 114
// end ;
4650: GO 4519
4652: POP
4653: POP
// end ; end_of_file
4654: PPOPN 3
4656: END
// export function Action ; var i , tmp ; begin
4657: LD_INT 0
4659: PPUSH
4660: PPUSH
4661: PPUSH
// InGameOn ;
4662: CALL_OW 8
// DoNotAttack ( 2 , usLab ) ;
4666: LD_INT 2
4668: PPUSH
4669: LD_INT 3
4671: PPUSH
4672: CALL_OW 471
// ComMoveXY ( Heike , 78 , 61 ) ;
4676: LD_EXP 23
4680: PPUSH
4681: LD_INT 78
4683: PPUSH
4684: LD_INT 61
4686: PPUSH
4687: CALL_OW 111
// if Mike then
4691: LD_EXP 25
4695: IFFALSE 4712
// ComMoveXY ( Mike , 80 , 66 ) ;
4697: LD_EXP 25
4701: PPUSH
4702: LD_INT 80
4704: PPUSH
4705: LD_INT 66
4707: PPUSH
4708: CALL_OW 111
// if Givi then
4712: LD_EXP 24
4716: IFFALSE 4733
// ComMoveXY ( Givi , 82 , 66 ) ;
4718: LD_EXP 24
4722: PPUSH
4723: LD_INT 82
4725: PPUSH
4726: LD_INT 66
4728: PPUSH
4729: CALL_OW 111
// if Kamil then
4733: LD_EXP 26
4737: IFFALSE 4754
// ComMoveXY ( Kamil , 82 , 67 ) ;
4739: LD_EXP 26
4743: PPUSH
4744: LD_INT 82
4746: PPUSH
4747: LD_INT 67
4749: PPUSH
4750: CALL_OW 111
// CenterNowOnUnits ( Heike ) ;
4754: LD_EXP 23
4758: PPUSH
4759: CALL_OW 87
// wait ( 0 0$2 ) ;
4763: LD_INT 70
4765: PPUSH
4766: CALL_OW 67
// if Givi and Mike then
4770: LD_EXP 24
4774: PUSH
4775: LD_EXP 25
4779: AND
4780: IFFALSE 5314
// begin AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
4782: LD_EXP 24
4786: PUSH
4787: LD_EXP 25
4791: PUSH
4792: LD_EXP 26
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: LIST
4801: PPUSH
4802: LD_EXP 23
4806: PPUSH
4807: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
4811: LD_EXP 23
4815: PPUSH
4816: LD_EXP 24
4820: PPUSH
4821: CALL_OW 179
// Say ( Givi , DG-1-start ) ;
4825: LD_EXP 24
4829: PPUSH
4830: LD_STRING DG-1-start
4832: PPUSH
4833: CALL_OW 88
// Say ( Heike , DH-1-start ) ;
4837: LD_EXP 23
4841: PPUSH
4842: LD_STRING DH-1-start
4844: PPUSH
4845: CALL_OW 88
// AddComTurnUnit ( Mike , Heike ) ;
4849: LD_EXP 25
4853: PPUSH
4854: LD_EXP 23
4858: PPUSH
4859: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
4863: LD_EXP 23
4867: PPUSH
4868: LD_EXP 25
4872: PPUSH
4873: CALL_OW 179
// Say ( Mike , DM-1-start ) ;
4877: LD_EXP 25
4881: PPUSH
4882: LD_STRING DM-1-start
4884: PPUSH
4885: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
4889: LD_EXP 23
4893: PPUSH
4894: LD_STRING DH-2-start
4896: PPUSH
4897: CALL_OW 88
// Say ( Mike , DM-2-start ) ;
4901: LD_EXP 25
4905: PPUSH
4906: LD_STRING DM-2-start
4908: PPUSH
4909: CALL_OW 88
// Say ( Givi , DG-2-start ) ;
4913: LD_EXP 24
4917: PPUSH
4918: LD_STRING DG-2-start
4920: PPUSH
4921: CALL_OW 88
// ComTurnUnit ( Mike , Givi ) ;
4925: LD_EXP 25
4929: PPUSH
4930: LD_EXP 24
4934: PPUSH
4935: CALL_OW 119
// ComTurnUnit ( Heike , Mike ) ;
4939: LD_EXP 23
4943: PPUSH
4944: LD_EXP 25
4948: PPUSH
4949: CALL_OW 119
// Say ( Mike , DM-3-start ) ;
4953: LD_EXP 25
4957: PPUSH
4958: LD_STRING DM-3-start
4960: PPUSH
4961: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
4965: LD_EXP 23
4969: PPUSH
4970: LD_STRING DH-3-start
4972: PPUSH
4973: CALL_OW 88
// ComMoveXY ( [ Heike , Mike , Givi , Kamil ] , 84 , 51 ) ;
4977: LD_EXP 23
4981: PUSH
4982: LD_EXP 25
4986: PUSH
4987: LD_EXP 24
4991: PUSH
4992: LD_EXP 26
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: PPUSH
5003: LD_INT 84
5005: PPUSH
5006: LD_INT 51
5008: PPUSH
5009: CALL_OW 111
// wait ( 0 0$2 ) ;
5013: LD_INT 70
5015: PPUSH
5016: CALL_OW 67
// Say ( Givi , DG-3-start ) ;
5020: LD_EXP 24
5024: PPUSH
5025: LD_STRING DG-3-start
5027: PPUSH
5028: CALL_OW 88
// ComHold ( [ Heike , Mike , Givi , Kamil ] ) ;
5032: LD_EXP 23
5036: PUSH
5037: LD_EXP 25
5041: PUSH
5042: LD_EXP 24
5046: PUSH
5047: LD_EXP 26
5051: PUSH
5052: EMPTY
5053: LIST
5054: LIST
5055: LIST
5056: LIST
5057: PPUSH
5058: CALL_OW 140
// AddComTurnUnit ( Heike , Givi ) ;
5062: LD_EXP 23
5066: PPUSH
5067: LD_EXP 24
5071: PPUSH
5072: CALL_OW 179
// AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
5076: LD_EXP 24
5080: PUSH
5081: LD_EXP 25
5085: PUSH
5086: LD_EXP 26
5090: PUSH
5091: EMPTY
5092: LIST
5093: LIST
5094: LIST
5095: PPUSH
5096: LD_EXP 23
5100: PPUSH
5101: CALL_OW 179
// Say ( Heike , DH-4-start ) ;
5105: LD_EXP 23
5109: PPUSH
5110: LD_STRING DH-4-start
5112: PPUSH
5113: CALL_OW 88
// Say ( Givi , DG-4-start ) ;
5117: LD_EXP 24
5121: PPUSH
5122: LD_STRING DG-4-start
5124: PPUSH
5125: CALL_OW 88
// Say ( Heike , DH-5-start ) ;
5129: LD_EXP 23
5133: PPUSH
5134: LD_STRING DH-5-start
5136: PPUSH
5137: CALL_OW 88
// Say ( Givi , DG-5-start ) ;
5141: LD_EXP 24
5145: PPUSH
5146: LD_STRING DG-5-start
5148: PPUSH
5149: CALL_OW 88
// Say ( Heike , DH-6-start ) ;
5153: LD_EXP 23
5157: PPUSH
5158: LD_STRING DH-6-start
5160: PPUSH
5161: CALL_OW 88
// if not Kamil then
5165: LD_EXP 26
5169: NOT
5170: IFFALSE 5221
// begin Say ( Mike , DM-6-start ) ;
5172: LD_EXP 25
5176: PPUSH
5177: LD_STRING DM-6-start
5179: PPUSH
5180: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi ] , Mike ) ;
5184: LD_EXP 23
5188: PUSH
5189: LD_EXP 24
5193: PUSH
5194: EMPTY
5195: LIST
5196: LIST
5197: PPUSH
5198: LD_EXP 25
5202: PPUSH
5203: CALL_OW 119
// Say ( Givi , DG-6-start ) ;
5207: LD_EXP 24
5211: PPUSH
5212: LD_STRING DG-6-start
5214: PPUSH
5215: CALL_OW 88
// end else
5219: GO 5300
// begin Say ( Mike , DM-6-start-a ) ;
5221: LD_EXP 25
5225: PPUSH
5226: LD_STRING DM-6-start-a
5228: PPUSH
5229: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi , Mike ] , Kamil ) ;
5233: LD_EXP 23
5237: PUSH
5238: LD_EXP 24
5242: PUSH
5243: LD_EXP 25
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: LIST
5252: PPUSH
5253: LD_EXP 26
5257: PPUSH
5258: CALL_OW 119
// ComTurnUnit ( Kamil , Mike ) ;
5262: LD_EXP 26
5266: PPUSH
5267: LD_EXP 25
5271: PPUSH
5272: CALL_OW 119
// Say ( Kamil , DKam-7-start-a ) ;
5276: LD_EXP 26
5280: PPUSH
5281: LD_STRING DKam-7-start-a
5283: PPUSH
5284: CALL_OW 88
// Say ( Givi , DG-6-start-a ) ;
5288: LD_EXP 24
5292: PPUSH
5293: LD_STRING DG-6-start-a
5295: PPUSH
5296: CALL_OW 88
// end ; Say ( Heike , DH-7-start ) ;
5300: LD_EXP 23
5304: PPUSH
5305: LD_STRING DH-7-start
5307: PPUSH
5308: CALL_OW 88
// end else
5312: GO 6036
// if not Mike and Givi then
5314: LD_EXP 25
5318: NOT
5319: PUSH
5320: LD_EXP 24
5324: AND
5325: IFFALSE 5670
// begin AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5327: LD_EXP 24
5331: PUSH
5332: LD_EXP 26
5336: PUSH
5337: EMPTY
5338: LIST
5339: LIST
5340: PPUSH
5341: LD_EXP 23
5345: PPUSH
5346: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
5350: LD_EXP 23
5354: PPUSH
5355: LD_EXP 24
5359: PPUSH
5360: CALL_OW 179
// Say ( Givi , DG-1-start-c ) ;
5364: LD_EXP 24
5368: PPUSH
5369: LD_STRING DG-1-start-c
5371: PPUSH
5372: CALL_OW 88
// Say ( Heike , DH-1-start-c ) ;
5376: LD_EXP 23
5380: PPUSH
5381: LD_STRING DH-1-start-c
5383: PPUSH
5384: CALL_OW 88
// Say ( Givi , DG-2-start-c ) ;
5388: LD_EXP 24
5392: PPUSH
5393: LD_STRING DG-2-start-c
5395: PPUSH
5396: CALL_OW 88
// Say ( Heike , DH-2-start-c ) ;
5400: LD_EXP 23
5404: PPUSH
5405: LD_STRING DH-2-start-c
5407: PPUSH
5408: CALL_OW 88
// Say ( Givi , DG-3-start-c ) ;
5412: LD_EXP 24
5416: PPUSH
5417: LD_STRING DG-3-start-c
5419: PPUSH
5420: CALL_OW 88
// ComMoveXY ( Heike , 83 , 56 ) ;
5424: LD_EXP 23
5428: PPUSH
5429: LD_INT 83
5431: PPUSH
5432: LD_INT 56
5434: PPUSH
5435: CALL_OW 111
// ComMoveXY ( Givi , 83 , 59 ) ;
5439: LD_EXP 24
5443: PPUSH
5444: LD_INT 83
5446: PPUSH
5447: LD_INT 59
5449: PPUSH
5450: CALL_OW 111
// if Kamil then
5454: LD_EXP 26
5458: IFFALSE 5475
// ComMoveXY ( Kamil , 80 , 58 ) ;
5460: LD_EXP 26
5464: PPUSH
5465: LD_INT 80
5467: PPUSH
5468: LD_INT 58
5470: PPUSH
5471: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5475: LD_EXP 23
5479: PPUSH
5480: LD_EXP 24
5484: PPUSH
5485: CALL_OW 179
// AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5489: LD_EXP 24
5493: PUSH
5494: LD_EXP 26
5498: PUSH
5499: EMPTY
5500: LIST
5501: LIST
5502: PPUSH
5503: LD_EXP 23
5507: PPUSH
5508: CALL_OW 179
// Say ( Heike , DH-3-start-c ) ;
5512: LD_EXP 23
5516: PPUSH
5517: LD_STRING DH-3-start-c
5519: PPUSH
5520: CALL_OW 88
// Say ( Givi , DG-4-start-c ) ;
5524: LD_EXP 24
5528: PPUSH
5529: LD_STRING DG-4-start-c
5531: PPUSH
5532: CALL_OW 88
// Say ( Heike , DH-5-start-c ) ;
5536: LD_EXP 23
5540: PPUSH
5541: LD_STRING DH-5-start-c
5543: PPUSH
5544: CALL_OW 88
// Say ( Givi , DG-5-start-c ) ;
5548: LD_EXP 24
5552: PPUSH
5553: LD_STRING DG-5-start-c
5555: PPUSH
5556: CALL_OW 88
// Say ( Heike , DH-6-start-c ) ;
5560: LD_EXP 23
5564: PPUSH
5565: LD_STRING DH-6-start-c
5567: PPUSH
5568: CALL_OW 88
// Say ( Givi , DG-6-start-c ) ;
5572: LD_EXP 24
5576: PPUSH
5577: LD_STRING DG-6-start-c
5579: PPUSH
5580: CALL_OW 88
// if Kamil then
5584: LD_EXP 26
5588: IFFALSE 5644
// begin ComTurnUnit ( Kamil , Heike ) ;
5590: LD_EXP 26
5594: PPUSH
5595: LD_EXP 23
5599: PPUSH
5600: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5604: LD_EXP 26
5608: PPUSH
5609: LD_STRING DKam-1-start-c
5611: PPUSH
5612: CALL_OW 88
// ComTurnUnit ( Givi , Kamil ) ;
5616: LD_EXP 24
5620: PPUSH
5621: LD_EXP 26
5625: PPUSH
5626: CALL_OW 119
// Say ( Givi , DG-7-start-c ) ;
5630: LD_EXP 24
5634: PPUSH
5635: LD_STRING DG-7-start-c
5637: PPUSH
5638: CALL_OW 88
// end else
5642: GO 5668
// begin Say ( Givi , DG-8-start-c ) ;
5644: LD_EXP 24
5648: PPUSH
5649: LD_STRING DG-8-start-c
5651: PPUSH
5652: CALL_OW 88
// Say ( Heike , DH-7-start-c ) ;
5656: LD_EXP 23
5660: PPUSH
5661: LD_STRING DH-7-start-c
5663: PPUSH
5664: CALL_OW 88
// end ; end else
5668: GO 6036
// if not Givi and Mike then
5670: LD_EXP 24
5674: NOT
5675: PUSH
5676: LD_EXP 25
5680: AND
5681: IFFALSE 5940
// begin AddComTurnUnit ( [ Mike , Kamil ] , Heike ) ;
5683: LD_EXP 25
5687: PUSH
5688: LD_EXP 26
5692: PUSH
5693: EMPTY
5694: LIST
5695: LIST
5696: PPUSH
5697: LD_EXP 23
5701: PPUSH
5702: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
5706: LD_EXP 23
5710: PPUSH
5711: LD_EXP 25
5715: PPUSH
5716: CALL_OW 179
// Say ( Mike , DM-1-start-b ) ;
5720: LD_EXP 25
5724: PPUSH
5725: LD_STRING DM-1-start-b
5727: PPUSH
5728: CALL_OW 88
// Say ( Heike , DH-1-start-b ) ;
5732: LD_EXP 23
5736: PPUSH
5737: LD_STRING DH-1-start-b
5739: PPUSH
5740: CALL_OW 88
// Say ( Mike , DM-2-start-b ) ;
5744: LD_EXP 25
5748: PPUSH
5749: LD_STRING DM-2-start-b
5751: PPUSH
5752: CALL_OW 88
// Say ( Heike , DH-2-start-b ) ;
5756: LD_EXP 23
5760: PPUSH
5761: LD_STRING DH-2-start-b
5763: PPUSH
5764: CALL_OW 88
// Say ( Mike , DM-3-start-b ) ;
5768: LD_EXP 25
5772: PPUSH
5773: LD_STRING DM-3-start-b
5775: PPUSH
5776: CALL_OW 88
// if Kamil then
5780: LD_EXP 26
5784: IFFALSE 5801
// ComMoveXY ( Kamil , 80 , 58 ) ;
5786: LD_EXP 26
5790: PPUSH
5791: LD_INT 80
5793: PPUSH
5794: LD_INT 58
5796: PPUSH
5797: CALL_OW 111
// ComMoveXY ( Heike , 83 , 56 ) ;
5801: LD_EXP 23
5805: PPUSH
5806: LD_INT 83
5808: PPUSH
5809: LD_INT 56
5811: PPUSH
5812: CALL_OW 111
// ComMoveXY ( Mike , 83 , 59 ) ;
5816: LD_EXP 25
5820: PPUSH
5821: LD_INT 83
5823: PPUSH
5824: LD_INT 59
5826: PPUSH
5827: CALL_OW 111
// AddComTurnUnit ( Heike , Mike ) ;
5831: LD_EXP 23
5835: PPUSH
5836: LD_EXP 25
5840: PPUSH
5841: CALL_OW 179
// AddComTurnUnit ( [ Kamil , Mike ] , Heike ) ;
5845: LD_EXP 26
5849: PUSH
5850: LD_EXP 25
5854: PUSH
5855: EMPTY
5856: LIST
5857: LIST
5858: PPUSH
5859: LD_EXP 23
5863: PPUSH
5864: CALL_OW 179
// Say ( Heike , DH-3-start-b ) ;
5868: LD_EXP 23
5872: PPUSH
5873: LD_STRING DH-3-start-b
5875: PPUSH
5876: CALL_OW 88
// Say ( Mike , DM-4-start-b ) ;
5880: LD_EXP 25
5884: PPUSH
5885: LD_STRING DM-4-start-b
5887: PPUSH
5888: CALL_OW 88
// if Kamil then
5892: LD_EXP 26
5896: IFFALSE 5926
// begin ComTurnUnit ( Kamil , Heike ) ;
5898: LD_EXP 26
5902: PPUSH
5903: LD_EXP 23
5907: PPUSH
5908: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5912: LD_EXP 26
5916: PPUSH
5917: LD_STRING DKam-1-start-c
5919: PPUSH
5920: CALL_OW 88
// end else
5924: GO 5938
// begin Say ( Mike , DM-5-start-b ) ;
5926: LD_EXP 25
5930: PPUSH
5931: LD_STRING DM-5-start-b
5933: PPUSH
5934: CALL_OW 88
// end ; end else
5938: GO 6036
// if Kamil then
5940: LD_EXP 26
5944: IFFALSE 6024
// begin AddComTurnUnit ( Heike , Kamil ) ;
5946: LD_EXP 23
5950: PPUSH
5951: LD_EXP 26
5955: PPUSH
5956: CALL_OW 179
// AddComTurnUnit ( Kamil , Heike ) ;
5960: LD_EXP 26
5964: PPUSH
5965: LD_EXP 23
5969: PPUSH
5970: CALL_OW 179
// Say ( Heike , DH-1-start-f ) ;
5974: LD_EXP 23
5978: PPUSH
5979: LD_STRING DH-1-start-f
5981: PPUSH
5982: CALL_OW 88
// Say ( Kamil , DKam-1-start-f ) ;
5986: LD_EXP 26
5990: PPUSH
5991: LD_STRING DKam-1-start-f
5993: PPUSH
5994: CALL_OW 88
// Say ( Heike , DH-2-start-f ) ;
5998: LD_EXP 23
6002: PPUSH
6003: LD_STRING DH-2-start-f
6005: PPUSH
6006: CALL_OW 88
// Say ( Kamil , DKam-2-start-f ) ;
6010: LD_EXP 26
6014: PPUSH
6015: LD_STRING DKam-2-start-f
6017: PPUSH
6018: CALL_OW 88
// end else
6022: GO 6036
// begin Say ( Heike , DH-1-start-d ) ;
6024: LD_EXP 23
6028: PPUSH
6029: LD_STRING DH-1-start-d
6031: PPUSH
6032: CALL_OW 88
// end ; ComFree ( [ Heike , Givi , Mike , Kamil ] ) ;
6036: LD_EXP 23
6040: PUSH
6041: LD_EXP 24
6045: PUSH
6046: LD_EXP 25
6050: PUSH
6051: LD_EXP 26
6055: PUSH
6056: EMPTY
6057: LIST
6058: LIST
6059: LIST
6060: LIST
6061: PPUSH
6062: CALL_OW 139
// InGameOff ;
6066: CALL_OW 9
// ChangeMissionObjectives ( OEast ) ;
6070: LD_STRING OEast
6072: PPUSH
6073: CALL_OW 337
// SaveForQuickRestart ;
6077: CALL_OW 22
// wait ( 0 0$20 ) ;
6081: LD_INT 700
6083: PPUSH
6084: CALL_OW 67
// SendSciToForest ;
6088: CALL 1496 0 0
// if Difficulty = 1 then
6092: LD_OWVAR 67
6096: PUSH
6097: LD_INT 1
6099: EQUAL
6100: IFFALSE 6104
// exit ;
6102: GO 6221
// wait ( [ 5 5$00 , 2 2$30 ] [ Difficulty - 1 ] ) ;
6104: LD_INT 10500
6106: PUSH
6107: LD_INT 5250
6109: PUSH
6110: EMPTY
6111: LIST
6112: LIST
6113: PUSH
6114: LD_OWVAR 67
6118: PUSH
6119: LD_INT 1
6121: MINUS
6122: ARRAY
6123: PPUSH
6124: CALL_OW 67
// if usAlert then
6128: LD_EXP 10
6132: IFFALSE 6136
// exit ;
6134: GO 6221
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
6136: LD_ADDR_VAR 0 3
6140: PUSH
6141: LD_INT 22
6143: PUSH
6144: LD_INT 1
6146: PUSH
6147: EMPTY
6148: LIST
6149: LIST
6150: PUSH
6151: LD_INT 25
6153: PUSH
6154: LD_INT 2
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: PUSH
6161: EMPTY
6162: LIST
6163: LIST
6164: PPUSH
6165: CALL_OW 69
6169: ST_TO_ADDR
// if not tmp then
6170: LD_VAR 0 3
6174: NOT
6175: IFFALSE 6179
// exit ;
6177: GO 6221
// ComExitBuilding ( tmp ) ;
6179: LD_VAR 0 3
6183: PPUSH
6184: CALL_OW 122
// AddComBuild ( tmp , b_breastwork , 40 , 13 , 3 ) ;
6188: LD_VAR 0 3
6192: PPUSH
6193: LD_INT 31
6195: PPUSH
6196: LD_INT 40
6198: PPUSH
6199: LD_INT 13
6201: PPUSH
6202: LD_INT 3
6204: PPUSH
6205: CALL_OW 205
// AddComEnterUnit ( tmp , Delta ) ;
6209: LD_VAR 0 3
6213: PPUSH
6214: LD_INT 1
6216: PPUSH
6217: CALL_OW 180
// end ;
6221: LD_VAR 0 1
6225: RET
// every 3 3$00 do
6226: GO 6228
6228: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
6229: LD_INT 1
6231: PPUSH
6232: LD_INT 570
6234: PPUSH
6235: LD_INT 350
6237: PPUSH
6238: CALL_OW 550
// wait ( 2 2$40 ) ;
6242: LD_INT 5600
6244: PPUSH
6245: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
6249: LD_INT 0
6251: PPUSH
6252: LD_INT 570
6254: PPUSH
6255: LD_INT 350
6257: PPUSH
6258: CALL_OW 550
// end ;
6262: END
// every 0 0$1 trigger not aviradzeSpotted and See ( 2 , Aviradze ) do var i , pepAmount ;
6263: LD_EXP 4
6267: NOT
6268: PUSH
6269: LD_INT 2
6271: PPUSH
6272: LD_EXP 27
6276: PPUSH
6277: CALL_OW 292
6281: AND
6282: IFFALSE 7188
6284: GO 6286
6286: DISABLE
6287: LD_INT 0
6289: PPUSH
6290: PPUSH
// begin aviradzeSpotted := true ;
6291: LD_ADDR_EXP 4
6295: PUSH
6296: LD_INT 1
6298: ST_TO_ADDR
// pepAmount := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ;
6299: LD_ADDR_VAR 0 2
6303: PUSH
6304: LD_INT 22
6306: PUSH
6307: LD_INT 2
6309: PUSH
6310: EMPTY
6311: LIST
6312: LIST
6313: PUSH
6314: LD_INT 21
6316: PUSH
6317: LD_INT 1
6319: PUSH
6320: EMPTY
6321: LIST
6322: LIST
6323: PUSH
6324: EMPTY
6325: LIST
6326: LIST
6327: PPUSH
6328: CALL_OW 69
6332: ST_TO_ADDR
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6333: LD_EXP 23
6337: PPUSH
6338: LD_EXP 27
6342: PPUSH
6343: CALL_OW 250
6347: PPUSH
6348: LD_EXP 27
6352: PPUSH
6353: CALL_OW 251
6357: PPUSH
6358: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6362: LD_INT 35
6364: PPUSH
6365: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 16 ;
6369: LD_EXP 23
6373: PPUSH
6374: LD_EXP 27
6378: PPUSH
6379: CALL_OW 296
6383: PUSH
6384: LD_INT 16
6386: LESS
6387: IFFALSE 6362
// InGameOn ;
6389: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
6393: LD_INT 5
6395: PPUSH
6396: LD_INT 2
6398: PPUSH
6399: CALL_OW 343
// if pepAmount > 2 then
6403: LD_VAR 0 2
6407: PUSH
6408: LD_INT 2
6410: GREATER
6411: IFFALSE 6427
// Say ( Heike , DH-1-spot ) else
6413: LD_EXP 23
6417: PPUSH
6418: LD_STRING DH-1-spot
6420: PPUSH
6421: CALL_OW 88
6425: GO 6439
// Say ( Heike , DH-1-spot-d ) ;
6427: LD_EXP 23
6431: PPUSH
6432: LD_STRING DH-1-spot-d
6434: PPUSH
6435: CALL_OW 88
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6439: LD_EXP 23
6443: PPUSH
6444: LD_EXP 27
6448: PPUSH
6449: CALL_OW 250
6453: PPUSH
6454: LD_EXP 27
6458: PPUSH
6459: CALL_OW 251
6463: PPUSH
6464: CALL_OW 111
// for i in [ Kamil , Mike , Givi ] do
6468: LD_ADDR_VAR 0 1
6472: PUSH
6473: LD_EXP 26
6477: PUSH
6478: LD_EXP 25
6482: PUSH
6483: LD_EXP 24
6487: PUSH
6488: EMPTY
6489: LIST
6490: LIST
6491: LIST
6492: PUSH
6493: FOR_IN
6494: IFFALSE 6533
// if GetDistUnits ( i , Aviradze ) > 7 then
6496: LD_VAR 0 1
6500: PPUSH
6501: LD_EXP 27
6505: PPUSH
6506: CALL_OW 296
6510: PUSH
6511: LD_INT 7
6513: GREATER
6514: IFFALSE 6531
// ComMoveXY ( i , 102 , 40 ) ;
6516: LD_VAR 0 1
6520: PPUSH
6521: LD_INT 102
6523: PPUSH
6524: LD_INT 40
6526: PPUSH
6527: CALL_OW 111
6531: GO 6493
6533: POP
6534: POP
// repeat wait ( 0 0$1 ) ;
6535: LD_INT 35
6537: PPUSH
6538: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 6 ;
6542: LD_EXP 23
6546: PPUSH
6547: LD_EXP 27
6551: PPUSH
6552: CALL_OW 296
6556: PUSH
6557: LD_INT 6
6559: LESS
6560: IFFALSE 6535
// ComTurnUnit ( Heike , Aviradze ) ;
6562: LD_EXP 23
6566: PPUSH
6567: LD_EXP 27
6571: PPUSH
6572: CALL_OW 119
// ComTurnUnit ( [ Aviradze , Sophia , Kaia ] , Heike ) ;
6576: LD_EXP 27
6580: PUSH
6581: LD_EXP 29
6585: PUSH
6586: LD_EXP 28
6590: PUSH
6591: EMPTY
6592: LIST
6593: LIST
6594: LIST
6595: PPUSH
6596: LD_EXP 23
6600: PPUSH
6601: CALL_OW 119
// if pepAmount > 1 then
6605: LD_VAR 0 2
6609: PUSH
6610: LD_INT 1
6612: GREATER
6613: IFFALSE 6665
// begin wait ( 0 0$2 ) ;
6615: LD_INT 70
6617: PPUSH
6618: CALL_OW 67
// ComTurnUnit ( [ Kamil , Mike , Givi ] , Aviradze ) ;
6622: LD_EXP 26
6626: PUSH
6627: LD_EXP 25
6631: PUSH
6632: LD_EXP 24
6636: PUSH
6637: EMPTY
6638: LIST
6639: LIST
6640: LIST
6641: PPUSH
6642: LD_EXP 27
6646: PPUSH
6647: CALL_OW 119
// Say ( Heike , DH-2-spot ) ;
6651: LD_EXP 23
6655: PPUSH
6656: LD_STRING DH-2-spot
6658: PPUSH
6659: CALL_OW 88
// end else
6663: GO 6677
// Say ( Heike , DH-2-spot-d ) ;
6665: LD_EXP 23
6669: PPUSH
6670: LD_STRING DH-2-spot-d
6672: PPUSH
6673: CALL_OW 88
// Say ( Aviradze , DA-2-spot ) ;
6677: LD_EXP 27
6681: PPUSH
6682: LD_STRING DA-2-spot
6684: PPUSH
6685: CALL_OW 88
// Say ( Heike , DH-3-spot ) ;
6689: LD_EXP 23
6693: PPUSH
6694: LD_STRING DH-3-spot
6696: PPUSH
6697: CALL_OW 88
// ComMoveUnit ( Kaia , Heike ) ;
6701: LD_EXP 28
6705: PPUSH
6706: LD_EXP 23
6710: PPUSH
6711: CALL_OW 112
// ComTurnUnit ( Heike , Kaia ) ;
6715: LD_EXP 23
6719: PPUSH
6720: LD_EXP 28
6724: PPUSH
6725: CALL_OW 119
// wait ( 0 0$0.3 ) ;
6729: LD_INT 10
6731: PPUSH
6732: CALL_OW 67
// Say ( Kaia , DK-3-spot ) ;
6736: LD_EXP 28
6740: PPUSH
6741: LD_STRING DK-3-spot
6743: PPUSH
6744: CALL_OW 88
// ComTurnUnit ( Kaia , Heike ) ;
6748: LD_EXP 28
6752: PPUSH
6753: LD_EXP 23
6757: PPUSH
6758: CALL_OW 119
// Say ( Heike , DH-4-spot ) ;
6762: LD_EXP 23
6766: PPUSH
6767: LD_STRING DH-4-spot
6769: PPUSH
6770: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6774: LD_INT 10
6776: PPUSH
6777: CALL_OW 67
// ComTurnUnit ( Heike , Aviradze ) ;
6781: LD_EXP 23
6785: PPUSH
6786: LD_EXP 27
6790: PPUSH
6791: CALL_OW 119
// Say ( Aviradze , DA-4-spot ) ;
6795: LD_EXP 27
6799: PPUSH
6800: LD_STRING DA-4-spot
6802: PPUSH
6803: CALL_OW 88
// ComTurnUnit ( Kaia , Aviradze ) ;
6807: LD_EXP 28
6811: PPUSH
6812: LD_EXP 27
6816: PPUSH
6817: CALL_OW 119
// Say ( Kaia , DK-4-spot ) ;
6821: LD_EXP 28
6825: PPUSH
6826: LD_STRING DK-4-spot
6828: PPUSH
6829: CALL_OW 88
// ComTurnUnit ( Aviradze , Kaia ) ;
6833: LD_EXP 27
6837: PPUSH
6838: LD_EXP 28
6842: PPUSH
6843: CALL_OW 119
// Say ( Aviradze , DA-5-spot ) ;
6847: LD_EXP 27
6851: PPUSH
6852: LD_STRING DA-5-spot
6854: PPUSH
6855: CALL_OW 88
// Say ( Kaia , DK-5-spot ) ;
6859: LD_EXP 28
6863: PPUSH
6864: LD_STRING DK-5-spot
6866: PPUSH
6867: CALL_OW 88
// if pepAmount = 1 then
6871: LD_VAR 0 2
6875: PUSH
6876: LD_INT 1
6878: EQUAL
6879: IFFALSE 6893
// Say ( Heike , DH-5-spot-f ) ;
6881: LD_EXP 23
6885: PPUSH
6886: LD_STRING DH-5-spot-f
6888: PPUSH
6889: CALL_OW 88
// if pepAmount < 3 then
6893: LD_VAR 0 2
6897: PUSH
6898: LD_INT 3
6900: LESS
6901: IFFALSE 6917
// Say ( Aviradze , DA-6-spot-f ) else
6903: LD_EXP 27
6907: PPUSH
6908: LD_STRING DA-6-spot-f
6910: PPUSH
6911: CALL_OW 88
6915: GO 6953
// if pepAmount < 4 then
6917: LD_VAR 0 2
6921: PUSH
6922: LD_INT 4
6924: LESS
6925: IFFALSE 6941
// Say ( Aviradze , DA-6-spot-c ) else
6927: LD_EXP 27
6931: PPUSH
6932: LD_STRING DA-6-spot-c
6934: PPUSH
6935: CALL_OW 88
6939: GO 6953
// Say ( Aviradze , DA-6-spot ) ;
6941: LD_EXP 27
6945: PPUSH
6946: LD_STRING DA-6-spot
6948: PPUSH
6949: CALL_OW 88
// if Kamil then
6953: LD_EXP 26
6957: IFFALSE 6971
// Say ( Kamil , DKam-6-spot ) ;
6959: LD_EXP 26
6963: PPUSH
6964: LD_STRING DKam-6-spot
6966: PPUSH
6967: CALL_OW 88
// Say ( Kaia , DK-6-spot ) ;
6971: LD_EXP 28
6975: PPUSH
6976: LD_STRING DK-6-spot
6978: PPUSH
6979: CALL_OW 88
// ComTurnUnit ( Aviradze , Heike ) ;
6983: LD_EXP 27
6987: PPUSH
6988: LD_EXP 23
6992: PPUSH
6993: CALL_OW 119
// Say ( Aviradze , DA-7-spot ) ;
6997: LD_EXP 27
7001: PPUSH
7002: LD_STRING DA-7-spot
7004: PPUSH
7005: CALL_OW 88
// Say ( Heike , DH-7-spot ) ;
7009: LD_EXP 23
7013: PPUSH
7014: LD_STRING DH-7-spot
7016: PPUSH
7017: CALL_OW 88
// if sciCounterKill >= 3 then
7021: LD_EXP 9
7025: PUSH
7026: LD_INT 3
7028: GREATEREQUAL
7029: IFFALSE 7055
// begin Say ( Heike , DH-7-spot-a ) ;
7031: LD_EXP 23
7035: PPUSH
7036: LD_STRING DH-7-spot-a
7038: PPUSH
7039: CALL_OW 88
// Say ( Aviradze , DA-8-spot-a ) ;
7043: LD_EXP 27
7047: PPUSH
7048: LD_STRING DA-8-spot-a
7050: PPUSH
7051: CALL_OW 88
// end ; InGameOff ;
7055: CALL_OW 9
// if sciCounterKill < 3 then
7059: LD_EXP 9
7063: PUSH
7064: LD_INT 3
7066: LESS
7067: IFFALSE 7126
// begin SetSide ( Kaia , 2 ) ;
7069: LD_EXP 28
7073: PPUSH
7074: LD_INT 2
7076: PPUSH
7077: CALL_OW 235
// ComFree ( Kaia ) ;
7081: LD_EXP 28
7085: PPUSH
7086: CALL_OW 139
// if Kamil then
7090: LD_EXP 26
7094: IFFALSE 7117
// begin ComHold ( Kamil ) ;
7096: LD_EXP 26
7100: PPUSH
7101: CALL_OW 140
// SetSide ( Kamil , 5 ) ;
7105: LD_EXP 26
7109: PPUSH
7110: LD_INT 5
7112: PPUSH
7113: CALL_OW 235
// end ; ChangeMissionObjectives ( OSci ) ;
7117: LD_STRING OSci
7119: PPUSH
7120: CALL_OW 337
// end else
7124: GO 7188
// begin aviradzeQuestDone := true ;
7126: LD_ADDR_EXP 8
7130: PUSH
7131: LD_INT 1
7133: ST_TO_ADDR
// attackDeltaAllowed := true ;
7134: LD_ADDR_EXP 14
7138: PUSH
7139: LD_INT 1
7141: ST_TO_ADDR
// ChangeMissionObjectives ( ODelta2 ) ;
7142: LD_STRING ODelta2
7144: PPUSH
7145: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
7149: LD_ADDR_VAR 0 1
7153: PUSH
7154: LD_INT 22
7156: PUSH
7157: LD_INT 5
7159: PUSH
7160: EMPTY
7161: LIST
7162: LIST
7163: PPUSH
7164: CALL_OW 69
7168: PUSH
7169: FOR_IN
7170: IFFALSE 7186
// SetSide ( i , 2 ) ;
7172: LD_VAR 0 1
7176: PPUSH
7177: LD_INT 2
7179: PPUSH
7180: CALL_OW 235
7184: GO 7169
7186: POP
7187: POP
// end ; end ;
7188: PPOPN 2
7190: END
// every 0 0$1 trigger not sciSpotted and GetDistUnits ( NearestUnitToUnit ( usSci , Heike ) , Heike ) < 8 and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and not aviradzeSpotted do
7191: LD_EXP 7
7195: NOT
7196: PUSH
7197: LD_EXP 22
7201: PPUSH
7202: LD_EXP 23
7206: PPUSH
7207: CALL_OW 74
7211: PPUSH
7212: LD_EXP 23
7216: PPUSH
7217: CALL_OW 296
7221: PUSH
7222: LD_INT 8
7224: LESS
7225: AND
7226: PUSH
7227: LD_INT 2
7229: PPUSH
7230: LD_EXP 22
7234: PPUSH
7235: LD_EXP 23
7239: PPUSH
7240: CALL_OW 74
7244: PPUSH
7245: CALL_OW 292
7249: AND
7250: PUSH
7251: LD_INT 22
7253: PUSH
7254: LD_INT 2
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: PUSH
7261: LD_INT 21
7263: PUSH
7264: LD_INT 1
7266: PUSH
7267: EMPTY
7268: LIST
7269: LIST
7270: PUSH
7271: EMPTY
7272: LIST
7273: LIST
7274: PPUSH
7275: CALL_OW 69
7279: PUSH
7280: LD_INT 1
7282: GREATER
7283: AND
7284: PUSH
7285: LD_EXP 4
7289: NOT
7290: AND
7291: IFFALSE 7335
7293: GO 7295
7295: DISABLE
// begin sciSpotted := true ;
7296: LD_ADDR_EXP 7
7300: PUSH
7301: LD_INT 1
7303: ST_TO_ADDR
// CenterNowOnUnits ( NearestUnitToUnit ( usSci , Heike ) ) ;
7304: LD_EXP 22
7308: PPUSH
7309: LD_EXP 23
7313: PPUSH
7314: CALL_OW 74
7318: PPUSH
7319: CALL_OW 87
// Say ( Heike , DH-1-sci ) ;
7323: LD_EXP 23
7327: PPUSH
7328: LD_STRING DH-1-sci
7330: PPUSH
7331: CALL_OW 88
// end ;
7335: END
// every 0 0$1 trigger aviradzeSpotted and not sciSpotted and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and aviradzeSpotted and not aviradzeQuestDone do var un ;
7336: LD_EXP 4
7340: PUSH
7341: LD_EXP 7
7345: NOT
7346: AND
7347: PUSH
7348: LD_INT 2
7350: PPUSH
7351: LD_EXP 22
7355: PPUSH
7356: LD_EXP 23
7360: PPUSH
7361: CALL_OW 74
7365: PPUSH
7366: CALL_OW 292
7370: AND
7371: PUSH
7372: LD_INT 22
7374: PUSH
7375: LD_INT 2
7377: PUSH
7378: EMPTY
7379: LIST
7380: LIST
7381: PUSH
7382: LD_INT 21
7384: PUSH
7385: LD_INT 1
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: PUSH
7392: EMPTY
7393: LIST
7394: LIST
7395: PPUSH
7396: CALL_OW 69
7400: PUSH
7401: LD_INT 1
7403: GREATER
7404: AND
7405: PUSH
7406: LD_EXP 4
7410: AND
7411: PUSH
7412: LD_EXP 8
7416: NOT
7417: AND
7418: IFFALSE 7559
7420: GO 7422
7422: DISABLE
7423: LD_INT 0
7425: PPUSH
// begin sciSpotted := true ;
7426: LD_ADDR_EXP 7
7430: PUSH
7431: LD_INT 1
7433: ST_TO_ADDR
// un := NearestUnitToUnit ( usSci , Heike ) ;
7434: LD_ADDR_VAR 0 1
7438: PUSH
7439: LD_EXP 22
7443: PPUSH
7444: LD_EXP 23
7448: PPUSH
7449: CALL_OW 74
7453: ST_TO_ADDR
// DialogueOn ;
7454: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 2 , - 3 ) ;
7458: LD_VAR 0 1
7462: PPUSH
7463: CALL_OW 250
7467: PPUSH
7468: LD_VAR 0 1
7472: PPUSH
7473: CALL_OW 251
7477: PPUSH
7478: LD_INT 2
7480: PPUSH
7481: LD_INT 3
7483: NEG
7484: PPUSH
7485: CALL_OW 330
// CenterNowOnUnits ( un ) ;
7489: LD_VAR 0 1
7493: PPUSH
7494: CALL_OW 87
// Say ( Heike , DH-1-sci-a ) ;
7498: LD_EXP 23
7502: PPUSH
7503: LD_STRING DH-1-sci-a
7505: PPUSH
7506: CALL_OW 88
// if Mike then
7510: LD_EXP 25
7514: IFFALSE 7528
// Say ( Mike , DM-1-sci-a ) ;
7516: LD_EXP 25
7520: PPUSH
7521: LD_STRING DM-1-sci-a
7523: PPUSH
7524: CALL_OW 88
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 2 ) ;
7528: LD_VAR 0 1
7532: PPUSH
7533: CALL_OW 250
7537: PPUSH
7538: LD_VAR 0 1
7542: PPUSH
7543: CALL_OW 251
7547: PPUSH
7548: LD_INT 2
7550: PPUSH
7551: CALL_OW 331
// DialogueOff ;
7555: CALL_OW 7
// end ;
7559: PPOPN 1
7561: END
// every 0 0$1 trigger usAlert and ( GetLives ( Gladstone ) < 1000 or GetLives ( usLab ) < 999 ) do var veh ;
7562: LD_EXP 10
7566: PUSH
7567: LD_EXP 19
7571: PPUSH
7572: CALL_OW 256
7576: PUSH
7577: LD_INT 1000
7579: LESS
7580: PUSH
7581: LD_INT 3
7583: PPUSH
7584: CALL_OW 256
7588: PUSH
7589: LD_INT 999
7591: LESS
7592: OR
7593: AND
7594: IFFALSE 7850
7596: GO 7598
7598: DISABLE
7599: LD_INT 0
7601: PPUSH
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
7602: LD_ADDR_VAR 0 1
7606: PUSH
7607: LD_INT 22
7609: PUSH
7610: LD_INT 1
7612: PUSH
7613: EMPTY
7614: LIST
7615: LIST
7616: PUSH
7617: LD_INT 21
7619: PUSH
7620: LD_INT 2
7622: PUSH
7623: EMPTY
7624: LIST
7625: LIST
7626: PUSH
7627: LD_INT 58
7629: PUSH
7630: EMPTY
7631: LIST
7632: PUSH
7633: EMPTY
7634: LIST
7635: LIST
7636: LIST
7637: PPUSH
7638: CALL_OW 69
7642: ST_TO_ADDR
// if veh and IsOk ( Gladstone ) then
7643: LD_VAR 0 1
7647: PUSH
7648: LD_EXP 19
7652: PPUSH
7653: CALL_OW 302
7657: AND
7658: IFFALSE 7700
// begin if IsInUnit ( Gladstone ) then
7660: LD_EXP 19
7664: PPUSH
7665: CALL_OW 310
7669: IFFALSE 7680
// ComExitBuilding ( Gladstone ) ;
7671: LD_EXP 19
7675: PPUSH
7676: CALL_OW 122
// AddComEnterUnit ( Gladstone , veh [ 1 ] ) ;
7680: LD_EXP 19
7684: PPUSH
7685: LD_VAR 0 1
7689: PUSH
7690: LD_INT 1
7692: ARRAY
7693: PPUSH
7694: CALL_OW 180
// end else
7698: GO 7720
// if IsInUnit ( Gladstone ) then
7700: LD_EXP 19
7704: PPUSH
7705: CALL_OW 310
7709: IFFALSE 7720
// ComExitBuilding ( Gladstone ) ;
7711: LD_EXP 19
7715: PPUSH
7716: CALL_OW 122
// AddComMoveXY ( Gladstone , 27 , 51 ) ;
7720: LD_EXP 19
7724: PPUSH
7725: LD_INT 27
7727: PPUSH
7728: LD_INT 51
7730: PPUSH
7731: CALL_OW 171
// Say ( Gladstone , D8-Glad-2 ) ;
7735: LD_EXP 19
7739: PPUSH
7740: LD_STRING D8-Glad-2
7742: PPUSH
7743: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7747: LD_INT 35
7749: PPUSH
7750: CALL_OW 67
// until IsAt ( Gladstone , 27 , 51 ) or IsAt ( IsInUnit ( Gladstone ) , 27 , 51 ) or IsDead ( Gladstone ) ;
7754: LD_EXP 19
7758: PPUSH
7759: LD_INT 27
7761: PPUSH
7762: LD_INT 51
7764: PPUSH
7765: CALL_OW 307
7769: PUSH
7770: LD_EXP 19
7774: PPUSH
7775: CALL_OW 310
7779: PPUSH
7780: LD_INT 27
7782: PPUSH
7783: LD_INT 51
7785: PPUSH
7786: CALL_OW 307
7790: OR
7791: PUSH
7792: LD_EXP 19
7796: PPUSH
7797: CALL_OW 301
7801: OR
7802: IFFALSE 7747
// if IsDead ( Gladstone ) then
7804: LD_EXP 19
7808: PPUSH
7809: CALL_OW 301
7813: IFFALSE 7817
// exit ;
7815: GO 7850
// RemoveUnit ( HexInfo ( 27 , 51 ) ) ;
7817: LD_INT 27
7819: PPUSH
7820: LD_INT 51
7822: PPUSH
7823: CALL_OW 428
7827: PPUSH
7828: CALL_OW 64
// gladstoneEscaped := true ;
7832: LD_ADDR_EXP 12
7836: PUSH
7837: LD_INT 1
7839: ST_TO_ADDR
// SaveVariable ( true , 02_GladstoneEscaped ) ;
7840: LD_INT 1
7842: PPUSH
7843: LD_STRING 02_GladstoneEscaped
7845: PPUSH
7846: CALL_OW 39
// end ;
7850: PPOPN 1
7852: END
// every 0 0$1 trigger aviradzeSpotted and ( sciCounterKill >= 3 or not usSci ) and not aviradzeQuestDone do
7853: LD_EXP 4
7857: PUSH
7858: LD_EXP 9
7862: PUSH
7863: LD_INT 3
7865: GREATEREQUAL
7866: PUSH
7867: LD_EXP 22
7871: NOT
7872: OR
7873: AND
7874: PUSH
7875: LD_EXP 8
7879: NOT
7880: AND
7881: IFFALSE 7924
7883: GO 7885
7885: DISABLE
// begin aviradzeQuestDone := true ;
7886: LD_ADDR_EXP 8
7890: PUSH
7891: LD_INT 1
7893: ST_TO_ADDR
// Say ( Heike , DH-1-quest-done ) ;
7894: LD_EXP 23
7898: PPUSH
7899: LD_STRING DH-1-quest-done
7901: PPUSH
7902: CALL_OW 88
// if Givi then
7906: LD_EXP 24
7910: IFFALSE 7924
// Say ( Givi , DG-1-quest-done ) ;
7912: LD_EXP 24
7916: PPUSH
7917: LD_STRING DG-1-quest-done
7919: PPUSH
7920: CALL_OW 88
// end ;
7924: END
// every 0 0$1 trigger See ( 5 , Heike ) and GetDistUnits ( Heike , Aviradze ) < 6 and aviradzeQuestDone and not attackDeltaAllowed do var i ;
7925: LD_INT 5
7927: PPUSH
7928: LD_EXP 23
7932: PPUSH
7933: CALL_OW 292
7937: PUSH
7938: LD_EXP 23
7942: PPUSH
7943: LD_EXP 27
7947: PPUSH
7948: CALL_OW 296
7952: PUSH
7953: LD_INT 6
7955: LESS
7956: AND
7957: PUSH
7958: LD_EXP 8
7962: AND
7963: PUSH
7964: LD_EXP 14
7968: NOT
7969: AND
7970: IFFALSE 8108
7972: GO 7974
7974: DISABLE
7975: LD_INT 0
7977: PPUSH
// begin attackDeltaAllowed := true ;
7978: LD_ADDR_EXP 14
7982: PUSH
7983: LD_INT 1
7985: ST_TO_ADDR
// InGameOn ;
7986: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
7990: LD_EXP 23
7994: PPUSH
7995: CALL_OW 87
// wait ( 0 0$0.3 ) ;
7999: LD_INT 10
8001: PPUSH
8002: CALL_OW 67
// ComTurnUnit ( Aviradze , Heike ) ;
8006: LD_EXP 27
8010: PPUSH
8011: LD_EXP 23
8015: PPUSH
8016: CALL_OW 119
// ComTurnUnit ( Heike , Aviradze ) ;
8020: LD_EXP 23
8024: PPUSH
8025: LD_EXP 27
8029: PPUSH
8030: CALL_OW 119
// Say ( Heike , DH-1-return ) ;
8034: LD_EXP 23
8038: PPUSH
8039: LD_STRING DH-1-return
8041: PPUSH
8042: CALL_OW 88
// Say ( Aviradze , DA-1-return ) ;
8046: LD_EXP 27
8050: PPUSH
8051: LD_STRING DA-1-return
8053: PPUSH
8054: CALL_OW 88
// InGameOff ;
8058: CALL_OW 9
// ChangeMissionObjectives ( ODelta ) ;
8062: LD_STRING ODelta
8064: PPUSH
8065: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
8069: LD_ADDR_VAR 0 1
8073: PUSH
8074: LD_INT 22
8076: PUSH
8077: LD_INT 5
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: PPUSH
8084: CALL_OW 69
8088: PUSH
8089: FOR_IN
8090: IFFALSE 8106
// SetSide ( i , 2 ) ;
8092: LD_VAR 0 1
8096: PPUSH
8097: LD_INT 2
8099: PPUSH
8100: CALL_OW 235
8104: GO 8089
8106: POP
8107: POP
// end ;
8108: PPOPN 1
8110: END
// every 0 0$1 trigger usAlert and not attackDeltaAllowed do
8111: LD_EXP 10
8115: PUSH
8116: LD_EXP 14
8120: NOT
8121: AND
8122: IFFALSE 8135
8124: GO 8126
8126: DISABLE
// spottedBeforeRadio := true ;
8127: LD_ADDR_EXP 6
8131: PUSH
8132: LD_INT 1
8134: ST_TO_ADDR
8135: END
// every 0 0$1 trigger attackDeltaAllowed and IsOk ( Markov ) and GetSide ( Delta ) = 1 and IsOk ( Lynch ) and not usAlert do var i , k , tmp ;
8136: LD_EXP 14
8140: PUSH
8141: LD_EXP 30
8145: PPUSH
8146: CALL_OW 302
8150: AND
8151: PUSH
8152: LD_INT 1
8154: PPUSH
8155: CALL_OW 255
8159: PUSH
8160: LD_INT 1
8162: EQUAL
8163: AND
8164: PUSH
8165: LD_EXP 20
8169: PPUSH
8170: CALL_OW 302
8174: AND
8175: PUSH
8176: LD_EXP 10
8180: NOT
8181: AND
8182: IFFALSE 9398
8184: GO 8186
8186: DISABLE
8187: LD_INT 0
8189: PPUSH
8190: PPUSH
8191: PPUSH
// begin trap := 0 ;
8192: LD_ADDR_EXP 17
8196: PUSH
8197: LD_INT 0
8199: ST_TO_ADDR
// wait ( 0 0$12 ) ;
8200: LD_INT 420
8202: PPUSH
8203: CALL_OW 67
// DialogueOn ;
8207: CALL_OW 6
// Say ( Markov , DMar-1-radio ) ;
8211: LD_EXP 30
8215: PPUSH
8216: LD_STRING DMar-1-radio
8218: PPUSH
8219: CALL_OW 88
// Say ( Heike , DH-1-radio ) ;
8223: LD_EXP 23
8227: PPUSH
8228: LD_STRING DH-1-radio
8230: PPUSH
8231: CALL_OW 88
// Say ( Markov , DMar-2-radio ) ;
8235: LD_EXP 30
8239: PPUSH
8240: LD_STRING DMar-2-radio
8242: PPUSH
8243: CALL_OW 88
// Say ( Heike , DH-2-radio ) ;
8247: LD_EXP 23
8251: PPUSH
8252: LD_STRING DH-2-radio
8254: PPUSH
8255: CALL_OW 88
// if IsOk ( Kamil ) or IsOk ( Sophia ) then
8259: LD_EXP 26
8263: PPUSH
8264: CALL_OW 302
8268: PUSH
8269: LD_EXP 29
8273: PPUSH
8274: CALL_OW 302
8278: OR
8279: IFFALSE 9398
// begin case Query ( Q1Trap ) of 1 :
8281: LD_STRING Q1Trap
8283: PPUSH
8284: CALL_OW 97
8288: PUSH
8289: LD_INT 1
8291: DOUBLE
8292: EQUAL
8293: IFTRUE 8297
8295: GO 8491
8297: POP
// begin if IsOk ( Kamil ) then
8298: LD_EXP 26
8302: PPUSH
8303: CALL_OW 302
8307: IFFALSE 8386
// begin Say ( Kamil , DKam-2-radio ) ;
8309: LD_EXP 26
8313: PPUSH
8314: LD_STRING DKam-2-radio
8316: PPUSH
8317: CALL_OW 88
// Say ( Kamil , DKam-3-radio ) ;
8321: LD_EXP 26
8325: PPUSH
8326: LD_STRING DKam-3-radio
8328: PPUSH
8329: CALL_OW 88
// SayRadio ( Lynch , DDelta-3-radio ) ;
8333: LD_EXP 20
8337: PPUSH
8338: LD_STRING DDelta-3-radio
8340: PPUSH
8341: CALL_OW 94
// dwait ( 0 0$01 ) ;
8345: LD_INT 35
8347: PPUSH
8348: CALL_OW 68
// Say ( Heike , DH-3-radio ) ;
8352: LD_EXP 23
8356: PPUSH
8357: LD_STRING DH-3-radio
8359: PPUSH
8360: CALL_OW 88
// Say ( Kamil , DKam-4-radio ) ;
8364: LD_EXP 26
8368: PPUSH
8369: LD_STRING DKam-4-radio
8371: PPUSH
8372: CALL_OW 88
// trap := 1 ;
8376: LD_ADDR_EXP 17
8380: PUSH
8381: LD_INT 1
8383: ST_TO_ADDR
// end else
8384: GO 8485
// begin Say ( Sophia , DS-1-radio ) ;
8386: LD_EXP 29
8390: PPUSH
8391: LD_STRING DS-1-radio
8393: PPUSH
8394: CALL_OW 88
// Say ( Sophia , DS-2-radio ) ;
8398: LD_EXP 29
8402: PPUSH
8403: LD_STRING DS-2-radio
8405: PPUSH
8406: CALL_OW 88
// SayRadio ( Lynch , DDelta-2-radio-s ) ;
8410: LD_EXP 20
8414: PPUSH
8415: LD_STRING DDelta-2-radio-s
8417: PPUSH
8418: CALL_OW 94
// Say ( Sophia , DS-3-radio ) ;
8422: LD_EXP 29
8426: PPUSH
8427: LD_STRING DS-3-radio
8429: PPUSH
8430: CALL_OW 88
// SayRadio ( Lynch , DDelta-3-radio-s ) ;
8434: LD_EXP 20
8438: PPUSH
8439: LD_STRING DDelta-3-radio-s
8441: PPUSH
8442: CALL_OW 94
// Say ( Sophia , DS-4-radio-s ) ;
8446: LD_EXP 29
8450: PPUSH
8451: LD_STRING DS-4-radio-s
8453: PPUSH
8454: CALL_OW 88
// dwait ( 0 0$01 ) ;
8458: LD_INT 35
8460: PPUSH
8461: CALL_OW 68
// Say ( Heike , DH-1-trap ) ;
8465: LD_EXP 23
8469: PPUSH
8470: LD_STRING DH-1-trap
8472: PPUSH
8473: CALL_OW 88
// trap := 0 ;
8477: LD_ADDR_EXP 17
8481: PUSH
8482: LD_INT 0
8484: ST_TO_ADDR
// end ; DialogueOff ;
8485: CALL_OW 7
// end ; 2 :
8489: GO 8509
8491: LD_INT 2
8493: DOUBLE
8494: EQUAL
8495: IFTRUE 8499
8497: GO 8508
8499: POP
// begin DialogueOff ;
8500: CALL_OW 7
// exit ;
8504: GO 9398
// end ; end ;
8506: GO 8509
8508: POP
// if trap = 1 then
8509: LD_EXP 17
8513: PUSH
8514: LD_INT 1
8516: EQUAL
8517: IFFALSE 8969
// begin PlaceSeeing ( 64 , 32 , 2 , 8 ) ;
8519: LD_INT 64
8521: PPUSH
8522: LD_INT 32
8524: PPUSH
8525: LD_INT 2
8527: PPUSH
8528: LD_INT 8
8530: PPUSH
8531: CALL_OW 330
// CenterOnXY ( 64 , 32 ) ;
8535: LD_INT 64
8537: PPUSH
8538: LD_INT 32
8540: PPUSH
8541: CALL_OW 84
// tmp := [ ] ;
8545: LD_ADDR_VAR 0 3
8549: PUSH
8550: EMPTY
8551: ST_TO_ADDR
// k := 3 ;
8552: LD_ADDR_VAR 0 2
8556: PUSH
8557: LD_INT 3
8559: ST_TO_ADDR
// if usForces < 3 then
8560: LD_EXP 21
8564: PUSH
8565: LD_INT 3
8567: LESS
8568: IFFALSE 8580
// k := usForces ;
8570: LD_ADDR_VAR 0 2
8574: PUSH
8575: LD_EXP 21
8579: ST_TO_ADDR
// for i := 1 to k do
8580: LD_ADDR_VAR 0 1
8584: PUSH
8585: DOUBLE
8586: LD_INT 1
8588: DEC
8589: ST_TO_ADDR
8590: LD_VAR 0 2
8594: PUSH
8595: FOR_TO
8596: IFFALSE 8651
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
8598: LD_ADDR_VAR 0 3
8602: PUSH
8603: LD_VAR 0 3
8607: PPUSH
8608: LD_VAR 0 3
8612: PUSH
8613: LD_INT 1
8615: PLUS
8616: PPUSH
8617: LD_EXP 21
8621: PUSH
8622: LD_INT 1
8624: ARRAY
8625: PPUSH
8626: CALL_OW 1
8630: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
8631: LD_ADDR_EXP 21
8635: PUSH
8636: LD_EXP 21
8640: PPUSH
8641: LD_INT 1
8643: PPUSH
8644: CALL_OW 3
8648: ST_TO_ADDR
// end ;
8649: GO 8595
8651: POP
8652: POP
// usPatrol := tmp ;
8653: LD_ADDR_EXP 16
8657: PUSH
8658: LD_VAR 0 3
8662: ST_TO_ADDR
// for i in tmp do
8663: LD_ADDR_VAR 0 1
8667: PUSH
8668: LD_VAR 0 3
8672: PUSH
8673: FOR_IN
8674: IFFALSE 8804
// begin if IsInUnit ( i ) then
8676: LD_VAR 0 1
8680: PPUSH
8681: CALL_OW 310
8685: IFFALSE 8696
// ComExitBuilding ( i ) ;
8687: LD_VAR 0 1
8691: PPUSH
8692: CALL_OW 122
// AddComAgressiveMove ( i , 63 , 31 ) ;
8696: LD_VAR 0 1
8700: PPUSH
8701: LD_INT 63
8703: PPUSH
8704: LD_INT 31
8706: PPUSH
8707: CALL_OW 174
// AddComWait ( i , 0 0$2 ) ;
8711: LD_VAR 0 1
8715: PPUSH
8716: LD_INT 70
8718: PPUSH
8719: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 43 ) ;
8723: LD_VAR 0 1
8727: PPUSH
8728: LD_INT 103
8730: PPUSH
8731: LD_INT 43
8733: PPUSH
8734: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
8738: LD_VAR 0 1
8742: PPUSH
8743: LD_INT 105
8745: PPUSH
8746: CALL_OW 202
// if Difficulty > 1 then
8750: LD_OWVAR 67
8754: PUSH
8755: LD_INT 1
8757: GREATER
8758: IFFALSE 8775
// AddComAgressiveMove ( i , 114 , 69 ) ;
8760: LD_VAR 0 1
8764: PPUSH
8765: LD_INT 114
8767: PPUSH
8768: LD_INT 69
8770: PPUSH
8771: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
8775: LD_VAR 0 1
8779: PPUSH
8780: LD_INT 105
8782: PPUSH
8783: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
8787: LD_VAR 0 1
8791: PPUSH
8792: LD_INT 42
8794: PPUSH
8795: LD_INT 20
8797: PPUSH
8798: CALL_OW 174
// end ;
8802: GO 8673
8804: POP
8805: POP
// wait ( 0 0$8 ) ;
8806: LD_INT 280
8808: PPUSH
8809: CALL_OW 67
// RemoveSeeing ( 64 , 32 , 2 ) ;
8813: LD_INT 64
8815: PPUSH
8816: LD_INT 32
8818: PPUSH
8819: LD_INT 2
8821: PPUSH
8822: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
8826: LD_INT 35
8828: PPUSH
8829: CALL_OW 67
// for i in tmp do
8833: LD_ADDR_VAR 0 1
8837: PUSH
8838: LD_VAR 0 3
8842: PUSH
8843: FOR_IN
8844: IFFALSE 8875
// if IsDead ( i ) then
8846: LD_VAR 0 1
8850: PPUSH
8851: CALL_OW 301
8855: IFFALSE 8873
// tmp := tmp diff i ;
8857: LD_ADDR_VAR 0 3
8861: PUSH
8862: LD_VAR 0 3
8866: PUSH
8867: LD_VAR 0 1
8871: DIFF
8872: ST_TO_ADDR
8873: GO 8843
8875: POP
8876: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
8877: LD_VAR 0 3
8881: NOT
8882: PUSH
8883: LD_VAR 0 3
8887: PPUSH
8888: LD_INT 95
8890: PUSH
8891: LD_INT 7
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: PUSH
8898: LD_INT 3
8900: PUSH
8901: LD_INT 60
8903: PUSH
8904: EMPTY
8905: LIST
8906: PUSH
8907: EMPTY
8908: LIST
8909: LIST
8910: PUSH
8911: EMPTY
8912: LIST
8913: LIST
8914: PPUSH
8915: CALL_OW 72
8919: PUSH
8920: LD_VAR 0 3
8924: EQUAL
8925: OR
8926: IFFALSE 8826
// if tmp then
8928: LD_VAR 0 3
8932: IFFALSE 8959
// begin usPatrol := [ ] ;
8934: LD_ADDR_EXP 16
8938: PUSH
8939: EMPTY
8940: ST_TO_ADDR
// usForces := usForces union tmp ;
8941: LD_ADDR_EXP 21
8945: PUSH
8946: LD_EXP 21
8950: PUSH
8951: LD_VAR 0 3
8955: UNION
8956: ST_TO_ADDR
// end else
8957: GO 8967
// trickyMove := true ;
8959: LD_ADDR_EXP 15
8963: PUSH
8964: LD_INT 1
8966: ST_TO_ADDR
// end else
8967: GO 9398
// begin tmp := [ ] ;
8969: LD_ADDR_VAR 0 3
8973: PUSH
8974: EMPTY
8975: ST_TO_ADDR
// k := 4 ;
8976: LD_ADDR_VAR 0 2
8980: PUSH
8981: LD_INT 4
8983: ST_TO_ADDR
// if usForces < 4 then
8984: LD_EXP 21
8988: PUSH
8989: LD_INT 4
8991: LESS
8992: IFFALSE 9004
// k := usForces ;
8994: LD_ADDR_VAR 0 2
8998: PUSH
8999: LD_EXP 21
9003: ST_TO_ADDR
// for i := 1 to k do
9004: LD_ADDR_VAR 0 1
9008: PUSH
9009: DOUBLE
9010: LD_INT 1
9012: DEC
9013: ST_TO_ADDR
9014: LD_VAR 0 2
9018: PUSH
9019: FOR_TO
9020: IFFALSE 9075
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
9022: LD_ADDR_VAR 0 3
9026: PUSH
9027: LD_VAR 0 3
9031: PPUSH
9032: LD_VAR 0 3
9036: PUSH
9037: LD_INT 1
9039: PLUS
9040: PPUSH
9041: LD_EXP 21
9045: PUSH
9046: LD_INT 1
9048: ARRAY
9049: PPUSH
9050: CALL_OW 1
9054: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
9055: LD_ADDR_EXP 21
9059: PUSH
9060: LD_EXP 21
9064: PPUSH
9065: LD_INT 1
9067: PPUSH
9068: CALL_OW 3
9072: ST_TO_ADDR
// end ;
9073: GO 9019
9075: POP
9076: POP
// if Lynch then
9077: LD_EXP 20
9081: IFFALSE 9099
// tmp := tmp ^ Lynch ;
9083: LD_ADDR_VAR 0 3
9087: PUSH
9088: LD_VAR 0 3
9092: PUSH
9093: LD_EXP 20
9097: ADD
9098: ST_TO_ADDR
// usPatrol := tmp ;
9099: LD_ADDR_EXP 16
9103: PUSH
9104: LD_VAR 0 3
9108: ST_TO_ADDR
// for i in tmp do
9109: LD_ADDR_VAR 0 1
9113: PUSH
9114: LD_VAR 0 3
9118: PUSH
9119: FOR_IN
9120: IFFALSE 9213
// begin if IsInUnit ( i ) then
9122: LD_VAR 0 1
9126: PPUSH
9127: CALL_OW 310
9131: IFFALSE 9142
// ComExitBuilding ( i ) ;
9133: LD_VAR 0 1
9137: PPUSH
9138: CALL_OW 122
// AddComAgressiveMove ( i , 69 , 15 ) ;
9142: LD_VAR 0 1
9146: PPUSH
9147: LD_INT 69
9149: PPUSH
9150: LD_INT 15
9152: PPUSH
9153: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9157: LD_VAR 0 1
9161: PPUSH
9162: LD_INT 700
9164: PPUSH
9165: CALL_OW 202
// AddComAgressiveMove ( i , 55 , 43 ) ;
9169: LD_VAR 0 1
9173: PPUSH
9174: LD_INT 55
9176: PPUSH
9177: LD_INT 43
9179: PPUSH
9180: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9184: LD_VAR 0 1
9188: PPUSH
9189: LD_INT 700
9191: PPUSH
9192: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9196: LD_VAR 0 1
9200: PPUSH
9201: LD_INT 42
9203: PPUSH
9204: LD_INT 20
9206: PPUSH
9207: CALL_OW 174
// end ;
9211: GO 9119
9213: POP
9214: POP
// repeat wait ( 0 0$1 ) ;
9215: LD_INT 35
9217: PPUSH
9218: CALL_OW 67
// for i in tmp do
9222: LD_ADDR_VAR 0 1
9226: PUSH
9227: LD_VAR 0 3
9231: PUSH
9232: FOR_IN
9233: IFFALSE 9264
// if IsDead ( i ) then
9235: LD_VAR 0 1
9239: PPUSH
9240: CALL_OW 301
9244: IFFALSE 9262
// tmp := tmp diff i ;
9246: LD_ADDR_VAR 0 3
9250: PUSH
9251: LD_VAR 0 3
9255: PUSH
9256: LD_VAR 0 1
9260: DIFF
9261: ST_TO_ADDR
9262: GO 9232
9264: POP
9265: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9266: LD_VAR 0 3
9270: NOT
9271: PUSH
9272: LD_VAR 0 3
9276: PPUSH
9277: LD_INT 95
9279: PUSH
9280: LD_INT 7
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: PUSH
9287: LD_INT 3
9289: PUSH
9290: LD_INT 60
9292: PUSH
9293: EMPTY
9294: LIST
9295: PUSH
9296: EMPTY
9297: LIST
9298: LIST
9299: PUSH
9300: EMPTY
9301: LIST
9302: LIST
9303: PPUSH
9304: CALL_OW 72
9308: PUSH
9309: LD_VAR 0 3
9313: EQUAL
9314: OR
9315: IFFALSE 9215
// if not tmp then
9317: LD_VAR 0 3
9321: NOT
9322: IFFALSE 9334
// trickyMove := true else
9324: LD_ADDR_EXP 15
9328: PUSH
9329: LD_INT 1
9331: ST_TO_ADDR
9332: GO 9341
// usPatrol := [ ] ;
9334: LD_ADDR_EXP 16
9338: PUSH
9339: EMPTY
9340: ST_TO_ADDR
// if tmp diff Lynch then
9341: LD_VAR 0 3
9345: PUSH
9346: LD_EXP 20
9350: DIFF
9351: IFFALSE 9375
// usForces := usForces union ( tmp diff Lynch ) ;
9353: LD_ADDR_EXP 21
9357: PUSH
9358: LD_EXP 21
9362: PUSH
9363: LD_VAR 0 3
9367: PUSH
9368: LD_EXP 20
9372: DIFF
9373: UNION
9374: ST_TO_ADDR
// if IsOk ( Lynch ) then
9375: LD_EXP 20
9379: PPUSH
9380: CALL_OW 302
9384: IFFALSE 9398
// ComEnterUnit ( Lynch , Delta ) ;
9386: LD_EXP 20
9390: PPUSH
9391: LD_INT 1
9393: PPUSH
9394: CALL_OW 120
// end ; end ; end ;
9398: PPOPN 3
9400: END
// every 0 0$1 trigger trickyMove do
9401: LD_EXP 15
9405: IFFALSE 9417
9407: GO 9409
9409: DISABLE
// SetAchievement ( ACH_TRAP ) ;
9410: LD_STRING ACH_TRAP
9412: PPUSH
9413: CALL_OW 543
9417: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ) do
9418: LD_INT 22
9420: PUSH
9421: LD_INT 2
9423: PUSH
9424: EMPTY
9425: LIST
9426: LIST
9427: PUSH
9428: LD_INT 23
9430: PUSH
9431: LD_INT 1
9433: PUSH
9434: EMPTY
9435: LIST
9436: LIST
9437: PUSH
9438: LD_INT 21
9440: PUSH
9441: LD_INT 2
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: LIST
9452: PPUSH
9453: CALL_OW 69
9457: IFFALSE 9469
9459: GO 9461
9461: DISABLE
// SetAchievement ( ACH_SCRAP ) ;
9462: LD_STRING ACH_SCRAP
9464: PPUSH
9465: CALL_OW 543
9469: END
// every 0 0$1 trigger UnitFilter ( usPatrol , [ f_see , 2 ] ) and See ( 1 , Heike ) do
9470: LD_EXP 16
9474: PPUSH
9475: LD_INT 101
9477: PUSH
9478: LD_INT 2
9480: PUSH
9481: EMPTY
9482: LIST
9483: LIST
9484: PPUSH
9485: CALL_OW 72
9489: PUSH
9490: LD_INT 1
9492: PPUSH
9493: LD_EXP 23
9497: PPUSH
9498: CALL_OW 292
9502: AND
9503: IFFALSE 9636
9505: GO 9507
9507: DISABLE
// begin if not trap then
9508: LD_EXP 17
9512: NOT
9513: IFFALSE 9541
// begin Say ( Heike , DH-2-trap ) ;
9515: LD_EXP 23
9519: PPUSH
9520: LD_STRING DH-2-trap
9522: PPUSH
9523: CALL_OW 88
// Say ( Mike , DM-2-trap ) ;
9527: LD_EXP 25
9531: PPUSH
9532: LD_STRING DM-2-trap
9534: PPUSH
9535: CALL_OW 88
// end else
9539: GO 9553
// begin Say ( Heike , DH-1-trap-a ) ;
9541: LD_EXP 23
9545: PPUSH
9546: LD_STRING DH-1-trap-a
9548: PPUSH
9549: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
9553: LD_INT 35
9555: PPUSH
9556: CALL_OW 67
// until trickyMove ;
9560: LD_EXP 15
9564: IFFALSE 9553
// Say ( Heike , DH-3-trap ) ;
9566: LD_EXP 23
9570: PPUSH
9571: LD_STRING DH-3-trap
9573: PPUSH
9574: CALL_OW 88
// if IsOk ( Givi ) and IsOk ( Kaia ) then
9578: LD_EXP 24
9582: PPUSH
9583: CALL_OW 302
9587: PUSH
9588: LD_EXP 28
9592: PPUSH
9593: CALL_OW 302
9597: AND
9598: IFFALSE 9636
// begin Say ( Givi , DG-3-trap ) ;
9600: LD_EXP 24
9604: PPUSH
9605: LD_STRING DG-3-trap
9607: PPUSH
9608: CALL_OW 88
// Say ( Kaia , DK-3-trap ) ;
9612: LD_EXP 28
9616: PPUSH
9617: LD_STRING DK-3-trap
9619: PPUSH
9620: CALL_OW 88
// Say ( Givi , DG-4-trap ) ;
9624: LD_EXP 24
9628: PPUSH
9629: LD_STRING DG-4-trap
9631: PPUSH
9632: CALL_OW 88
// end ; end ;
9636: END
// every 0 0$1 trigger GetSide ( Delta ) = 2 and attackDeltaAllowed do var i , tmp ;
9637: LD_INT 1
9639: PPUSH
9640: CALL_OW 255
9644: PUSH
9645: LD_INT 2
9647: EQUAL
9648: PUSH
9649: LD_EXP 14
9653: AND
9654: IFFALSE 9813
9656: GO 9658
9658: DISABLE
9659: LD_INT 0
9661: PPUSH
9662: PPUSH
// begin if not IsOk ( Kaia ) then
9663: LD_EXP 28
9667: PPUSH
9668: CALL_OW 302
9672: NOT
9673: IFFALSE 9677
// exit ;
9675: GO 9813
// if tick < 5 5$00 then
9677: LD_OWVAR 1
9681: PUSH
9682: LD_INT 10500
9684: LESS
9685: IFFALSE 9694
// SetAchievement ( ACH_DELTA ) ;
9687: LD_STRING ACH_DELTA
9689: PPUSH
9690: CALL_OW 543
// Say ( Kaia , DK-1-capture ) ;
9694: LD_EXP 28
9698: PPUSH
9699: LD_STRING DK-1-capture
9701: PPUSH
9702: CALL_OW 88
// Say ( Heike , DH-1-capture ) ;
9706: LD_EXP 23
9710: PPUSH
9711: LD_STRING DH-1-capture
9713: PPUSH
9714: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
9718: LD_ADDR_VAR 0 2
9722: PUSH
9723: LD_INT 22
9725: PUSH
9726: LD_INT 1
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: PUSH
9733: LD_INT 25
9735: PUSH
9736: LD_INT 1
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: PUSH
9743: EMPTY
9744: LIST
9745: LIST
9746: PPUSH
9747: CALL_OW 69
9751: ST_TO_ADDR
// if not tmp then
9752: LD_VAR 0 2
9756: NOT
9757: IFFALSE 9761
// exit ;
9759: GO 9813
// for i in tmp do
9761: LD_ADDR_VAR 0 1
9765: PUSH
9766: LD_VAR 0 2
9770: PUSH
9771: FOR_IN
9772: IFFALSE 9811
// begin if IsInUnit ( i ) then
9774: LD_VAR 0 1
9778: PPUSH
9779: CALL_OW 310
9783: IFFALSE 9794
// ComExitBuilding ( i ) ;
9785: LD_VAR 0 1
9789: PPUSH
9790: CALL_OW 122
// AddComAgressiveMove ( i , 38 , 23 ) ;
9794: LD_VAR 0 1
9798: PPUSH
9799: LD_INT 38
9801: PPUSH
9802: LD_INT 23
9804: PPUSH
9805: CALL_OW 174
// end ;
9809: GO 9771
9811: POP
9812: POP
// end ;
9813: PPOPN 2
9815: END
// every 0 0$1 trigger GetSide ( usLab ) = 2 and attackDeltaAllowed do
9816: LD_INT 3
9818: PPUSH
9819: CALL_OW 255
9823: PUSH
9824: LD_INT 2
9826: EQUAL
9827: PUSH
9828: LD_EXP 14
9832: AND
9833: IFFALSE 9865
9835: GO 9837
9837: DISABLE
// begin DialogueOn ;
9838: CALL_OW 6
// Say ( Aviradze , DA-1-capture ) ;
9842: LD_EXP 27
9846: PPUSH
9847: LD_STRING DA-1-capture
9849: PPUSH
9850: CALL_OW 88
// DialogueOff ;
9854: CALL_OW 7
// ChangeMissionObjectives ( OTame ) ;
9858: LD_STRING OTame
9860: PPUSH
9861: CALL_OW 337
// end ;
9865: END
// every 0 0$1 trigger GetTech ( tech_ApeLang , 2 ) = state_researched and attackDeltaAllowed do
9866: LD_INT 1
9868: PPUSH
9869: LD_INT 2
9871: PPUSH
9872: CALL_OW 321
9876: PUSH
9877: LD_INT 2
9879: EQUAL
9880: PUSH
9881: LD_EXP 14
9885: AND
9886: IFFALSE 10037
9888: GO 9890
9890: DISABLE
// begin DialogueOn ;
9891: CALL_OW 6
// Say ( Aviradze , DA-1-ape ) ;
9895: LD_EXP 27
9899: PPUSH
9900: LD_STRING DA-1-ape
9902: PPUSH
9903: CALL_OW 88
// Say ( Heike , DH-1-ape ) ;
9907: LD_EXP 23
9911: PPUSH
9912: LD_STRING DH-1-ape
9914: PPUSH
9915: CALL_OW 88
// Say ( Aviradze , DA-2-ape ) ;
9919: LD_EXP 27
9923: PPUSH
9924: LD_STRING DA-2-ape
9926: PPUSH
9927: CALL_OW 88
// Say ( Aviradze , DA-3-ape ) ;
9931: LD_EXP 27
9935: PPUSH
9936: LD_STRING DA-3-ape
9938: PPUSH
9939: CALL_OW 88
// Say ( Heike , DH-3-ape ) ;
9943: LD_EXP 23
9947: PPUSH
9948: LD_STRING DH-3-ape
9950: PPUSH
9951: CALL_OW 88
// DialogueOff ;
9955: CALL_OW 7
// if FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 then
9959: LD_INT 22
9961: PUSH
9962: LD_INT 0
9964: PUSH
9965: EMPTY
9966: LIST
9967: LIST
9968: PUSH
9969: LD_INT 25
9971: PUSH
9972: LD_INT 12
9974: PUSH
9975: EMPTY
9976: LIST
9977: LIST
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: PPUSH
9983: CALL_OW 69
9987: PUSH
9988: LD_INT 0
9990: EQUAL
9991: IFFALSE 10003
// SpawnApeman ( forest , 2 ) ;
9993: LD_INT 1
9995: PPUSH
9996: LD_INT 2
9998: PPUSH
9999: CALL 405 0 2
// repeat wait ( 0 0$1 ) ;
10003: LD_INT 35
10005: PPUSH
10006: CALL_OW 67
// until FilterAllUnits ( [ f_class , class_apeman ] ) = 0 ;
10010: LD_INT 25
10012: PUSH
10013: LD_INT 12
10015: PUSH
10016: EMPTY
10017: LIST
10018: LIST
10019: PPUSH
10020: CALL_OW 69
10024: PUSH
10025: LD_INT 0
10027: EQUAL
10028: IFFALSE 10003
// YouLost ( Ape ) ;
10030: LD_STRING Ape
10032: PPUSH
10033: CALL_OW 104
// end ;
10037: END
// every 0 0$5 trigger lostCounter >= [ 3 , 2 , 2 ] [ Difficulty ] do
10038: LD_EXP 18
10042: PUSH
10043: LD_INT 3
10045: PUSH
10046: LD_INT 2
10048: PUSH
10049: LD_INT 2
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: LIST
10056: PUSH
10057: LD_OWVAR 67
10061: ARRAY
10062: GREATEREQUAL
10063: IFFALSE 10107
10065: GO 10067
10067: DISABLE
// begin DialogueOn ;
10068: CALL_OW 6
// Say ( Aviradze , DA-1-failure ) ;
10072: LD_EXP 27
10076: PPUSH
10077: LD_STRING DA-1-failure
10079: PPUSH
10080: CALL_OW 88
// Say ( Aviradze , DA-2-failure ) ;
10084: LD_EXP 27
10088: PPUSH
10089: LD_STRING DA-2-failure
10091: PPUSH
10092: CALL_OW 88
// YouLost ( Failure ) ;
10096: LD_STRING Failure
10098: PPUSH
10099: CALL_OW 104
// DialogueOff ;
10103: CALL_OW 7
// end ;
10107: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
10108: LD_EXP 28
10112: PPUSH
10113: CALL_OW 256
10117: PUSH
10118: LD_INT 3
10120: LESS
10121: IFFALSE 10254
10123: GO 10125
10125: DISABLE
// begin DialogueOn ;
10126: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
10130: LD_EXP 28
10134: PPUSH
10135: CALL_OW 87
// ForceSay ( Kaia , DK-Kaiaout-1 ) ;
10139: LD_EXP 28
10143: PPUSH
10144: LD_STRING DK-Kaiaout-1
10146: PPUSH
10147: CALL_OW 91
// Say ( Heike , DH-Kaiaout-2 ) ;
10151: LD_EXP 23
10155: PPUSH
10156: LD_STRING DH-Kaiaout-2
10158: PPUSH
10159: CALL_OW 88
// Say ( Givi , DG-Kaiaout-3 ) ;
10163: LD_EXP 24
10167: PPUSH
10168: LD_STRING DG-Kaiaout-3
10170: PPUSH
10171: CALL_OW 88
// Say ( Heike , DH-Kaiaout-4 ) ;
10175: LD_EXP 23
10179: PPUSH
10180: LD_STRING DH-Kaiaout-4
10182: PPUSH
10183: CALL_OW 88
// if Givi then
10187: LD_EXP 24
10191: IFFALSE 10241
// begin Say ( Givi , DG-Kaiaout-5 ) ;
10193: LD_EXP 24
10197: PPUSH
10198: LD_STRING DG-Kaiaout-5
10200: PPUSH
10201: CALL_OW 88
// Say ( Heike , DH-Kaiaout-6 ) ;
10205: LD_EXP 23
10209: PPUSH
10210: LD_STRING DH-Kaiaout-6
10212: PPUSH
10213: CALL_OW 88
// Say ( Givi , DG-Kaiaout-7 ) ;
10217: LD_EXP 24
10221: PPUSH
10222: LD_STRING DG-Kaiaout-7
10224: PPUSH
10225: CALL_OW 88
// Say ( Heike , DH-Kaiaout-8 ) ;
10229: LD_EXP 23
10233: PPUSH
10234: LD_STRING DH-Kaiaout-8
10236: PPUSH
10237: CALL_OW 88
// end ; DialogueOff ;
10241: CALL_OW 7
// KillUnit ( Kaia ) ;
10245: LD_EXP 28
10249: PPUSH
10250: CALL_OW 66
// end ;
10254: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) and IsOk ( Aviradze ) and GetSide ( Aviradze ) = 2 do var tmp ;
10255: LD_INT 22
10257: PUSH
10258: LD_INT 2
10260: PUSH
10261: EMPTY
10262: LIST
10263: LIST
10264: PUSH
10265: LD_INT 23
10267: PUSH
10268: LD_INT 0
10270: PUSH
10271: EMPTY
10272: LIST
10273: LIST
10274: PUSH
10275: EMPTY
10276: LIST
10277: LIST
10278: PPUSH
10279: CALL_OW 69
10283: PUSH
10284: LD_EXP 27
10288: PPUSH
10289: CALL_OW 302
10293: AND
10294: PUSH
10295: LD_EXP 27
10299: PPUSH
10300: CALL_OW 255
10304: PUSH
10305: LD_INT 2
10307: EQUAL
10308: AND
10309: IFFALSE 11081
10311: GO 10313
10313: DISABLE
10314: LD_INT 0
10316: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10317: LD_ADDR_VAR 0 1
10321: PUSH
10322: LD_INT 22
10324: PUSH
10325: LD_INT 2
10327: PUSH
10328: EMPTY
10329: LIST
10330: LIST
10331: PUSH
10332: LD_INT 23
10334: PUSH
10335: LD_INT 0
10337: PUSH
10338: EMPTY
10339: LIST
10340: LIST
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: PPUSH
10346: CALL_OW 69
10350: ST_TO_ADDR
// InGameOn ;
10351: CALL_OW 8
// CenterNowOnUnits ( tmp ) ;
10355: LD_VAR 0 1
10359: PPUSH
10360: CALL_OW 87
// ComMoveUnit ( tmp , Aviradze ) ;
10364: LD_VAR 0 1
10368: PPUSH
10369: LD_EXP 27
10373: PPUSH
10374: CALL_OW 112
// ComTurnUnit ( Aviradze , tmp ) ;
10378: LD_EXP 27
10382: PPUSH
10383: LD_VAR 0 1
10387: PPUSH
10388: CALL_OW 119
// wait ( 0 0$1 ) ;
10392: LD_INT 35
10394: PPUSH
10395: CALL_OW 67
// Say ( Aviradze , DA-1-tame-a ) ;
10399: LD_EXP 27
10403: PPUSH
10404: LD_STRING DA-1-tame-a
10406: PPUSH
10407: CALL_OW 88
// if IsOk ( Mike ) then
10411: LD_EXP 25
10415: PPUSH
10416: CALL_OW 302
10420: IFFALSE 10458
// begin Say ( Mike , DM-1-tame-a ) ;
10422: LD_EXP 25
10426: PPUSH
10427: LD_STRING DM-1-tame-a
10429: PPUSH
10430: CALL_OW 88
// Say ( Sophia , DS-1-tame-a ) ;
10434: LD_EXP 29
10438: PPUSH
10439: LD_STRING DS-1-tame-a
10441: PPUSH
10442: CALL_OW 88
// Say ( Mike , DM-2-tame-a ) ;
10446: LD_EXP 25
10450: PPUSH
10451: LD_STRING DM-2-tame-a
10453: PPUSH
10454: CALL_OW 88
// end ; wait ( 0 0$3 ) ;
10458: LD_INT 105
10460: PPUSH
10461: CALL_OW 67
// PrepareFarmer ;
10465: CALL 11756 0 0
// CenterOnUnits ( Farmer ) ;
10469: LD_EXP 31
10473: PPUSH
10474: CALL_OW 85
// ComMoveXY ( Farmer , 105 , 59 ) ;
10478: LD_EXP 31
10482: PPUSH
10483: LD_INT 105
10485: PPUSH
10486: LD_INT 59
10488: PPUSH
10489: CALL_OW 111
// AddComHold ( Farmer ) ;
10493: LD_EXP 31
10497: PPUSH
10498: CALL_OW 200
// SayRadio ( Farmer , DF-1-end ) ;
10502: LD_EXP 31
10506: PPUSH
10507: LD_STRING DF-1-end
10509: PPUSH
10510: CALL_OW 94
// Say ( Aviradze , DA-1-end ) ;
10514: LD_EXP 27
10518: PPUSH
10519: LD_STRING DA-1-end
10521: PPUSH
10522: CALL_OW 88
// SayRadio ( Farmer , DF-2-end ) ;
10526: LD_EXP 31
10530: PPUSH
10531: LD_STRING DF-2-end
10533: PPUSH
10534: CALL_OW 94
// Say ( Aviradze , DA-2-end ) ;
10538: LD_EXP 27
10542: PPUSH
10543: LD_STRING DA-2-end
10545: PPUSH
10546: CALL_OW 88
// SayRadio ( Farmer , DF-3-end ) ;
10550: LD_EXP 31
10554: PPUSH
10555: LD_STRING DF-3-end
10557: PPUSH
10558: CALL_OW 94
// Say ( Heike , DH-3-end ) ;
10562: LD_EXP 23
10566: PPUSH
10567: LD_STRING DH-3-end
10569: PPUSH
10570: CALL_OW 88
// SayRadio ( Farmer , DF-4-end ) ;
10574: LD_EXP 31
10578: PPUSH
10579: LD_STRING DF-4-end
10581: PPUSH
10582: CALL_OW 94
// if tick <= [ 25 25$00 , 22 22$30 , 20 20$00 ] [ Difficulty ] then
10586: LD_OWVAR 1
10590: PUSH
10591: LD_INT 52500
10593: PUSH
10594: LD_INT 47250
10596: PUSH
10597: LD_INT 42000
10599: PUSH
10600: EMPTY
10601: LIST
10602: LIST
10603: LIST
10604: PUSH
10605: LD_OWVAR 67
10609: ARRAY
10610: LESSEQUAL
10611: IFFALSE 10625
// AddMedal ( med1 , 1 ) else
10613: LD_STRING med1
10615: PPUSH
10616: LD_INT 1
10618: PPUSH
10619: CALL_OW 101
10623: GO 10636
// AddMedal ( med1 , - 1 ) ;
10625: LD_STRING med1
10627: PPUSH
10628: LD_INT 1
10630: NEG
10631: PPUSH
10632: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) = 0 and not gladstoneEscaped then
10636: LD_INT 22
10638: PUSH
10639: LD_INT 1
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: PUSH
10646: LD_INT 25
10648: PUSH
10649: LD_INT 4
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PPUSH
10660: CALL_OW 69
10664: PUSH
10665: LD_INT 0
10667: EQUAL
10668: PUSH
10669: LD_EXP 12
10673: NOT
10674: AND
10675: IFFALSE 10689
// AddMedal ( med2 , 1 ) else
10677: LD_STRING med2
10679: PPUSH
10680: LD_INT 1
10682: PPUSH
10683: CALL_OW 101
10687: GO 10700
// AddMedal ( med2 , - 1 ) ;
10689: LD_STRING med2
10691: PPUSH
10692: LD_INT 1
10694: NEG
10695: PPUSH
10696: CALL_OW 101
// if trickyMove then
10700: LD_EXP 15
10704: IFFALSE 10718
// AddMedal ( med3 , 1 ) else
10706: LD_STRING med3
10708: PPUSH
10709: LD_INT 1
10711: PPUSH
10712: CALL_OW 101
10716: GO 10748
// if spottedBeforeRadio then
10718: LD_EXP 6
10722: IFFALSE 10737
// AddMedal ( med3 , - 2 ) else
10724: LD_STRING med3
10726: PPUSH
10727: LD_INT 2
10729: NEG
10730: PPUSH
10731: CALL_OW 101
10735: GO 10748
// AddMedal ( med3 , - 1 ) ;
10737: LD_STRING med3
10739: PPUSH
10740: LD_INT 1
10742: NEG
10743: PPUSH
10744: CALL_OW 101
// GiveMedals ( MAIN ) ;
10748: LD_STRING MAIN
10750: PPUSH
10751: CALL_OW 102
// SaveCharacters ( tmp , 02_ape ) ;
10755: LD_VAR 0 1
10759: PPUSH
10760: LD_STRING 02_ape
10762: PPUSH
10763: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
10767: LD_ADDR_VAR 0 1
10771: PUSH
10772: LD_INT 22
10774: PUSH
10775: LD_INT 2
10777: PUSH
10778: EMPTY
10779: LIST
10780: LIST
10781: PUSH
10782: LD_INT 23
10784: PUSH
10785: LD_INT 2
10787: PUSH
10788: EMPTY
10789: LIST
10790: LIST
10791: PUSH
10792: LD_INT 21
10794: PUSH
10795: LD_INT 1
10797: PUSH
10798: EMPTY
10799: LIST
10800: LIST
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: LIST
10806: PPUSH
10807: CALL_OW 69
10811: ST_TO_ADDR
// RewardPeople ( tmp ) ;
10812: LD_VAR 0 1
10816: PPUSH
10817: CALL_OW 43
// SaveCharacters ( Heike , 02_Heike ) ;
10821: LD_EXP 23
10825: PPUSH
10826: LD_STRING 02_Heike
10828: PPUSH
10829: CALL_OW 38
// SaveCharacters ( Aviradze , 02_Aviradze ) ;
10833: LD_EXP 27
10837: PPUSH
10838: LD_STRING 02_Aviradze
10840: PPUSH
10841: CALL_OW 38
// if Givi then
10845: LD_EXP 24
10849: IFFALSE 10863
// SaveCharacters ( Givi , 02_Givi ) ;
10851: LD_EXP 24
10855: PPUSH
10856: LD_STRING 02_Givi
10858: PPUSH
10859: CALL_OW 38
// if Mike then
10863: LD_EXP 25
10867: IFFALSE 10881
// SaveCharacters ( Mike , 02_Mike ) ;
10869: LD_EXP 25
10873: PPUSH
10874: LD_STRING 02_Mike
10876: PPUSH
10877: CALL_OW 38
// if Kamil then
10881: LD_EXP 26
10885: IFFALSE 10899
// SaveCharacters ( Kamil , 02_Kamil ) ;
10887: LD_EXP 26
10891: PPUSH
10892: LD_STRING 02_Kamil
10894: PPUSH
10895: CALL_OW 38
// if Kaia then
10899: LD_EXP 28
10903: IFFALSE 10917
// SaveCharacters ( Kaia , 02_Kaia ) ;
10905: LD_EXP 28
10909: PPUSH
10910: LD_STRING 02_Kaia
10912: PPUSH
10913: CALL_OW 38
// if Sophia then
10917: LD_EXP 29
10921: IFFALSE 10935
// SaveCharacters ( Sophia , 02_Sophia ) ;
10923: LD_EXP 29
10927: PPUSH
10928: LD_STRING 02_Sophia
10930: PPUSH
10931: CALL_OW 38
// if Markov then
10935: LD_EXP 30
10939: IFFALSE 10953
// SaveCharacters ( Markov , 02_Markov ) ;
10941: LD_EXP 30
10945: PPUSH
10946: LD_STRING 02_Markov
10948: PPUSH
10949: CALL_OW 38
// if tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] then
10953: LD_VAR 0 1
10957: PUSH
10958: LD_EXP 23
10962: PUSH
10963: LD_EXP 27
10967: PUSH
10968: LD_EXP 24
10972: PUSH
10973: LD_EXP 25
10977: PUSH
10978: LD_EXP 26
10982: PUSH
10983: LD_EXP 29
10987: PUSH
10988: LD_EXP 28
10992: PUSH
10993: LD_EXP 30
10997: PUSH
10998: EMPTY
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: DIFF
11008: IFFALSE 11073
// SaveCharacters ( tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] , 02_others ) ;
11010: LD_VAR 0 1
11014: PUSH
11015: LD_EXP 23
11019: PUSH
11020: LD_EXP 27
11024: PUSH
11025: LD_EXP 24
11029: PUSH
11030: LD_EXP 25
11034: PUSH
11035: LD_EXP 26
11039: PUSH
11040: LD_EXP 29
11044: PUSH
11045: LD_EXP 28
11049: PUSH
11050: LD_EXP 30
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: DIFF
11065: PPUSH
11066: LD_STRING 02_others
11068: PPUSH
11069: CALL_OW 38
// YouWin ;
11073: CALL_OW 103
// InGameOff ;
11077: CALL_OW 9
// end ;
11081: PPOPN 1
11083: END
// every 0 0$1 trigger tick > timeUntilFarmer and aviradzeSpotted do
11084: LD_OWVAR 1
11088: PUSH
11089: LD_EXP 13
11093: GREATER
11094: PUSH
11095: LD_EXP 4
11099: AND
11100: IFFALSE 11140
11102: GO 11104
11104: DISABLE
// begin InGameOn ;
11105: CALL_OW 8
// PrepareFarmer ;
11109: CALL 11756 0 0
// CenterNowOnUnits ( Farmer ) ;
11113: LD_EXP 31
11117: PPUSH
11118: CALL_OW 87
// wait ( 0 0$2 ) ;
11122: LD_INT 70
11124: PPUSH
11125: CALL_OW 67
// YouLost ( Farmer ) ;
11129: LD_STRING Farmer
11131: PPUSH
11132: CALL_OW 104
// InGameOff ;
11136: CALL_OW 9
// end ; end_of_file
11140: END
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer ; export function PrepareArabian ; var un , veh ; begin
11141: LD_INT 0
11143: PPUSH
11144: PPUSH
11145: PPUSH
// uc_side := 2 ;
11146: LD_ADDR_OWVAR 20
11150: PUSH
11151: LD_INT 2
11153: ST_TO_ADDR
// uc_nation := 2 ;
11154: LD_ADDR_OWVAR 21
11158: PUSH
11159: LD_INT 2
11161: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
11162: LD_ADDR_EXP 23
11166: PUSH
11167: LD_STRING Heike
11169: PPUSH
11170: LD_EXP 1
11174: NOT
11175: PPUSH
11176: LD_EXP 2
11180: PPUSH
11181: CALL 27309 0 3
11185: ST_TO_ADDR
// PlaceUnitXY ( Heike , 83 , 72 , false ) ;
11186: LD_EXP 23
11190: PPUSH
11191: LD_INT 83
11193: PPUSH
11194: LD_INT 72
11196: PPUSH
11197: LD_INT 0
11199: PPUSH
11200: CALL_OW 48
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
11204: LD_ADDR_EXP 24
11208: PUSH
11209: LD_STRING Givi
11211: PPUSH
11212: LD_EXP 1
11216: NOT
11217: PPUSH
11218: LD_EXP 2
11222: PPUSH
11223: CALL 27309 0 3
11227: ST_TO_ADDR
// if Givi then
11228: LD_EXP 24
11232: IFFALSE 11252
// PlaceUnitXY ( Givi , 87 , 76 , false ) ;
11234: LD_EXP 24
11238: PPUSH
11239: LD_INT 87
11241: PPUSH
11242: LD_INT 76
11244: PPUSH
11245: LD_INT 0
11247: PPUSH
11248: CALL_OW 48
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
11252: LD_ADDR_EXP 25
11256: PUSH
11257: LD_STRING Mike
11259: PPUSH
11260: LD_EXP 1
11264: NOT
11265: PPUSH
11266: LD_EXP 2
11270: PPUSH
11271: CALL 27309 0 3
11275: ST_TO_ADDR
// if Mike then
11276: LD_EXP 25
11280: IFFALSE 11300
// PlaceUnitXY ( Mike , 84 , 76 , false ) ;
11282: LD_EXP 25
11286: PPUSH
11287: LD_INT 84
11289: PPUSH
11290: LD_INT 76
11292: PPUSH
11293: LD_INT 0
11295: PPUSH
11296: CALL_OW 48
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
11300: LD_ADDR_EXP 26
11304: PUSH
11305: LD_STRING Kamil
11307: PPUSH
11308: LD_EXP 1
11312: NOT
11313: PPUSH
11314: LD_EXP 2
11318: PPUSH
11319: CALL 27309 0 3
11323: ST_TO_ADDR
// if Kamil then
11324: LD_EXP 26
11328: IFFALSE 11348
// PlaceUnitXY ( Kamil , 85 , 78 , false ) ;
11330: LD_EXP 26
11334: PPUSH
11335: LD_INT 85
11337: PPUSH
11338: LD_INT 78
11340: PPUSH
11341: LD_INT 0
11343: PPUSH
11344: CALL_OW 48
// uc_side := 5 ;
11348: LD_ADDR_OWVAR 20
11352: PUSH
11353: LD_INT 5
11355: ST_TO_ADDR
// uc_nation := 2 ;
11356: LD_ADDR_OWVAR 21
11360: PUSH
11361: LD_INT 2
11363: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , false ,  ) ;
11364: LD_ADDR_EXP 27
11368: PUSH
11369: LD_STRING Aviradze
11371: PPUSH
11372: LD_INT 0
11374: PPUSH
11375: LD_STRING 
11377: PPUSH
11378: CALL 27309 0 3
11382: ST_TO_ADDR
// PlaceUnitXY ( Aviradze , 106 , 38 , false ) ;
11383: LD_EXP 27
11387: PPUSH
11388: LD_INT 106
11390: PPUSH
11391: LD_INT 38
11393: PPUSH
11394: LD_INT 0
11396: PPUSH
11397: CALL_OW 48
// ComTurnXY ( Aviradze , 103 , 38 ) ;
11401: LD_EXP 27
11405: PPUSH
11406: LD_INT 103
11408: PPUSH
11409: LD_INT 38
11411: PPUSH
11412: CALL_OW 118
// Kaia := PrepareUnit ( Kaia , false ,  ) ;
11416: LD_ADDR_EXP 28
11420: PUSH
11421: LD_STRING Kaia
11423: PPUSH
11424: LD_INT 0
11426: PPUSH
11427: LD_STRING 
11429: PPUSH
11430: CALL 27309 0 3
11434: ST_TO_ADDR
// PlaceUnitXY ( Kaia , 100 , 34 , false ) ;
11435: LD_EXP 28
11439: PPUSH
11440: LD_INT 100
11442: PPUSH
11443: LD_INT 34
11445: PPUSH
11446: LD_INT 0
11448: PPUSH
11449: CALL_OW 48
// ComTurnXY ( Kaia , 100 , 39 ) ;
11453: LD_EXP 28
11457: PPUSH
11458: LD_INT 100
11460: PPUSH
11461: LD_INT 39
11463: PPUSH
11464: CALL_OW 118
// Sophia := PrepareUnit ( Sophia , false ,  ) ;
11468: LD_ADDR_EXP 29
11472: PUSH
11473: LD_STRING Sophia
11475: PPUSH
11476: LD_INT 0
11478: PPUSH
11479: LD_STRING 
11481: PPUSH
11482: CALL 27309 0 3
11486: ST_TO_ADDR
// PlaceUnitXY ( Sophia , 109 , 50 , false ) ;
11487: LD_EXP 29
11491: PPUSH
11492: LD_INT 109
11494: PPUSH
11495: LD_INT 50
11497: PPUSH
11498: LD_INT 0
11500: PPUSH
11501: CALL_OW 48
// ComTurnXY ( Sophia , 100 , 39 ) ;
11505: LD_EXP 29
11509: PPUSH
11510: LD_INT 100
11512: PPUSH
11513: LD_INT 39
11515: PPUSH
11516: CALL_OW 118
// Markov := PrepareUnit ( Markov , false ,  ) ;
11520: LD_ADDR_EXP 30
11524: PUSH
11525: LD_STRING Markov
11527: PPUSH
11528: LD_INT 0
11530: PPUSH
11531: LD_STRING 
11533: PPUSH
11534: CALL 27309 0 3
11538: ST_TO_ADDR
// PrepareTank ( 5 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , [ 90 , 70 , 60 ] [ Difficulty ] ) ;
11539: LD_INT 5
11541: PPUSH
11542: LD_INT 3
11544: PPUSH
11545: LD_INT 21
11547: PPUSH
11548: LD_INT 1
11550: PPUSH
11551: LD_INT 1
11553: PPUSH
11554: LD_INT 42
11556: PPUSH
11557: LD_INT 90
11559: PUSH
11560: LD_INT 70
11562: PUSH
11563: LD_INT 60
11565: PUSH
11566: EMPTY
11567: LIST
11568: LIST
11569: LIST
11570: PUSH
11571: LD_OWVAR 67
11575: ARRAY
11576: PPUSH
11577: CALL 237 0 7
// veh := CreateVehicle ;
11581: LD_ADDR_VAR 0 3
11585: PUSH
11586: CALL_OW 45
11590: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
11591: LD_VAR 0 3
11595: PPUSH
11596: LD_INT 4
11598: PPUSH
11599: CALL_OW 233
// PlaceUnitXY ( veh , 109 , 38 , false ) ;
11603: LD_VAR 0 3
11607: PPUSH
11608: LD_INT 109
11610: PPUSH
11611: LD_INT 38
11613: PPUSH
11614: LD_INT 0
11616: PPUSH
11617: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
11621: LD_EXP 30
11625: PPUSH
11626: LD_VAR 0 3
11630: PPUSH
11631: CALL_OW 52
// ComTurnUnit ( Kaia , Aviradze ) ;
11635: LD_EXP 28
11639: PPUSH
11640: LD_EXP 27
11644: PPUSH
11645: CALL_OW 119
// ComTurnUnit ( Aviradze , Kaia ) ;
11649: LD_EXP 27
11653: PPUSH
11654: LD_EXP 28
11658: PPUSH
11659: CALL_OW 119
// if not Givi or not Mike then
11663: LD_EXP 24
11667: NOT
11668: PUSH
11669: LD_EXP 25
11673: NOT
11674: OR
11675: IFFALSE 11751
// begin uc_nation := 2 ;
11677: LD_ADDR_OWVAR 21
11681: PUSH
11682: LD_INT 2
11684: ST_TO_ADDR
// uc_side := 5 ;
11685: LD_ADDR_OWVAR 20
11689: PUSH
11690: LD_INT 5
11692: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 1 ) ;
11693: LD_INT 1
11695: PPUSH
11696: LD_INT 1
11698: PPUSH
11699: LD_INT 1
11701: PPUSH
11702: CALL_OW 380
// un := CreateHuman ;
11706: LD_ADDR_VAR 0 2
11710: PUSH
11711: CALL_OW 44
11715: ST_TO_ADDR
// PlaceUnitXYR ( un , 112 , 40 , 3 , false ) ;
11716: LD_VAR 0 2
11720: PPUSH
11721: LD_INT 112
11723: PPUSH
11724: LD_INT 40
11726: PPUSH
11727: LD_INT 3
11729: PPUSH
11730: LD_INT 0
11732: PPUSH
11733: CALL_OW 50
// ComTurnUnit ( un , Aviradze ) ;
11737: LD_VAR 0 2
11741: PPUSH
11742: LD_EXP 27
11746: PPUSH
11747: CALL_OW 119
// end ; end ;
11751: LD_VAR 0 1
11755: RET
// export function PrepareFarmer ; var i ; begin
11756: LD_INT 0
11758: PPUSH
11759: PPUSH
// uc_side := 5 ;
11760: LD_ADDR_OWVAR 20
11764: PUSH
11765: LD_INT 5
11767: ST_TO_ADDR
// uc_nation := 2 ;
11768: LD_ADDR_OWVAR 21
11772: PUSH
11773: LD_INT 2
11775: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
11776: LD_ADDR_EXP 31
11780: PUSH
11781: LD_STRING Farmer
11783: PPUSH
11784: LD_INT 0
11786: PPUSH
11787: LD_STRING 
11789: PPUSH
11790: CALL 27309 0 3
11794: ST_TO_ADDR
// PlaceUnitXY ( Farmer , 106 , 62 , false ) ;
11795: LD_EXP 31
11799: PPUSH
11800: LD_INT 106
11802: PPUSH
11803: LD_INT 62
11805: PPUSH
11806: LD_INT 0
11808: PPUSH
11809: CALL_OW 48
// for i := 1 to 5 do
11813: LD_ADDR_VAR 0 2
11817: PUSH
11818: DOUBLE
11819: LD_INT 1
11821: DEC
11822: ST_TO_ADDR
11823: LD_INT 5
11825: PUSH
11826: FOR_TO
11827: IFFALSE 11865
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
11829: LD_INT 1
11831: PPUSH
11832: LD_INT 1
11834: PPUSH
11835: LD_INT 1
11837: PPUSH
11838: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 105 , 64 , 3 , false ) ;
11842: CALL_OW 44
11846: PPUSH
11847: LD_INT 105
11849: PPUSH
11850: LD_INT 64
11852: PPUSH
11853: LD_INT 3
11855: PPUSH
11856: LD_INT 0
11858: PPUSH
11859: CALL_OW 50
// end ;
11863: GO 11826
11865: POP
11866: POP
// end ; end_of_file
11867: LD_VAR 0 1
11871: RET
// every 2 2$20 + 0 0$10 do
11872: GO 11874
11874: DISABLE
// begin enable ;
11875: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , forest , true ) ;
11876: LD_INT 1
11878: PPUSH
11879: LD_INT 5
11881: PPUSH
11882: CALL_OW 12
11886: PPUSH
11887: LD_INT 1
11889: PPUSH
11890: LD_INT 1
11892: PPUSH
11893: CALL_OW 55
// if tick > 6 6$00 then
11897: LD_OWVAR 1
11901: PUSH
11902: LD_INT 12600
11904: GREATER
11905: IFFALSE 11908
// disable ;
11907: DISABLE
// end ; end_of_file
11908: END
// on UnitDestroyed ( un ) do begin if un = Heike then
11909: LD_VAR 0 1
11913: PUSH
11914: LD_EXP 23
11918: EQUAL
11919: IFFALSE 11928
// YouLost ( Heike ) ;
11921: LD_STRING Heike
11923: PPUSH
11924: CALL_OW 104
// if un = Aviradze then
11928: LD_VAR 0 1
11932: PUSH
11933: LD_EXP 27
11937: EQUAL
11938: IFFALSE 11947
// YouLost ( Aviradze ) ;
11940: LD_STRING Aviradze
11942: PPUSH
11943: CALL_OW 104
// if un = usLab then
11947: LD_VAR 0 1
11951: PUSH
11952: LD_INT 3
11954: EQUAL
11955: IFFALSE 11964
// YouLost ( Lab ) ;
11957: LD_STRING Lab
11959: PPUSH
11960: CALL_OW 104
// if ( un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) diff [ Heike , Aviradze ] ) and aviradzeSpotted then
11964: LD_VAR 0 1
11968: PUSH
11969: LD_INT 22
11971: PUSH
11972: LD_INT 2
11974: PUSH
11975: EMPTY
11976: LIST
11977: LIST
11978: PUSH
11979: LD_INT 21
11981: PUSH
11982: LD_INT 1
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: PUSH
11989: LD_INT 23
11991: PUSH
11992: LD_INT 2
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: PUSH
11999: EMPTY
12000: LIST
12001: LIST
12002: LIST
12003: PPUSH
12004: CALL_OW 69
12008: PUSH
12009: LD_EXP 23
12013: PUSH
12014: LD_EXP 27
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: DIFF
12023: IN
12024: PUSH
12025: LD_EXP 4
12029: AND
12030: IFFALSE 12046
// lostCounter := lostCounter + 1 ;
12032: LD_ADDR_EXP 18
12036: PUSH
12037: LD_EXP 18
12041: PUSH
12042: LD_INT 1
12044: PLUS
12045: ST_TO_ADDR
// end ;
12046: PPOPN 1
12048: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 2 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) = 0 do
12049: LD_INT 23
12051: PUSH
12052: LD_INT 2
12054: PUSH
12055: EMPTY
12056: LIST
12057: LIST
12058: PUSH
12059: LD_INT 25
12061: PUSH
12062: LD_INT 2
12064: PUSH
12065: EMPTY
12066: LIST
12067: LIST
12068: PUSH
12069: EMPTY
12070: LIST
12071: LIST
12072: PPUSH
12073: CALL_OW 69
12077: PUSH
12078: LD_INT 0
12080: EQUAL
12081: PUSH
12082: LD_INT 22
12084: PUSH
12085: LD_INT 2
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: PUSH
12092: LD_INT 21
12094: PUSH
12095: LD_INT 3
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: PUSH
12102: EMPTY
12103: LIST
12104: LIST
12105: PPUSH
12106: CALL_OW 69
12110: PUSH
12111: LD_INT 0
12113: EQUAL
12114: AND
12115: IFFALSE 12127
12117: GO 12119
12119: DISABLE
// YouLost ( Eng ) ;
12120: LD_STRING Eng
12122: PPUSH
12123: CALL_OW 104
12127: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in usSci and killerSide = 2 then
12128: LD_VAR 0 1
12132: PUSH
12133: LD_EXP 22
12137: IN
12138: PUSH
12139: LD_VAR 0 2
12143: PUSH
12144: LD_INT 2
12146: EQUAL
12147: AND
12148: IFFALSE 12180
// begin usSci := usSci diff un ;
12150: LD_ADDR_EXP 22
12154: PUSH
12155: LD_EXP 22
12159: PUSH
12160: LD_VAR 0 1
12164: DIFF
12165: ST_TO_ADDR
// sciCounterKill := sciCounterKill + 1 ;
12166: LD_ADDR_EXP 9
12170: PUSH
12171: LD_EXP 9
12175: PUSH
12176: LD_INT 1
12178: PLUS
12179: ST_TO_ADDR
// end ; end ;
12180: PPOPN 3
12182: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
12183: LD_VAR 0 1
12187: PUSH
12188: LD_INT 2
12190: EQUAL
12191: PUSH
12192: LD_VAR 0 2
12196: PUSH
12197: LD_INT 5
12199: EQUAL
12200: AND
12201: IFFALSE 12210
// YouLost ( FriendlyFire ) ;
12203: LD_STRING FriendlyFire
12205: PPUSH
12206: CALL_OW 104
// end ; end_of_file
12210: PPOPN 2
12212: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
12213: LD_INT 0
12215: PPUSH
// ar_crane := 88 ;
12216: LD_ADDR_EXP 38
12220: PUSH
12221: LD_INT 88
12223: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
12224: LD_ADDR_EXP 33
12228: PUSH
12229: LD_INT 89
12231: ST_TO_ADDR
// us_hack := 99 ;
12232: LD_ADDR_EXP 34
12236: PUSH
12237: LD_INT 99
12239: ST_TO_ADDR
// us_artillery := 97 ;
12240: LD_ADDR_EXP 35
12244: PUSH
12245: LD_INT 97
12247: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12248: LD_ADDR_EXP 36
12252: PUSH
12253: LD_INT 91
12255: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
12256: LD_ADDR_EXP 37
12260: PUSH
12261: LD_INT 92
12263: ST_TO_ADDR
// ru_radar := 98 ;
12264: LD_ADDR_EXP 32
12268: PUSH
12269: LD_INT 98
12271: ST_TO_ADDR
// tech_Artillery := 80 ;
12272: LD_ADDR_EXP 39
12276: PUSH
12277: LD_INT 80
12279: ST_TO_ADDR
// tech_RadMat := 81 ;
12280: LD_ADDR_EXP 40
12284: PUSH
12285: LD_INT 81
12287: ST_TO_ADDR
// tech_BasicTools := 82 ;
12288: LD_ADDR_EXP 41
12292: PUSH
12293: LD_INT 82
12295: ST_TO_ADDR
// tech_Cargo := 83 ;
12296: LD_ADDR_EXP 42
12300: PUSH
12301: LD_INT 83
12303: ST_TO_ADDR
// tech_Track := 84 ;
12304: LD_ADDR_EXP 43
12308: PUSH
12309: LD_INT 84
12311: ST_TO_ADDR
// tech_Crane := 85 ;
12312: LD_ADDR_EXP 44
12316: PUSH
12317: LD_INT 85
12319: ST_TO_ADDR
// tech_Bulldozer := 86 ;
12320: LD_ADDR_EXP 45
12324: PUSH
12325: LD_INT 86
12327: ST_TO_ADDR
// tech_Hovercraft := 87 ;
12328: LD_ADDR_EXP 46
12332: PUSH
12333: LD_INT 87
12335: ST_TO_ADDR
// end ;
12336: LD_VAR 0 1
12340: RET
// every 1 do
12341: GO 12343
12343: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
12344: CALL 12213 0 0
12348: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
12349: LD_VAR 0 2
12353: PUSH
12354: LD_INT 100
12356: EQUAL
12357: IFFALSE 13306
// begin if not StreamModeActive then
12359: LD_EXP 47
12363: NOT
12364: IFFALSE 12374
// StreamModeActive := true ;
12366: LD_ADDR_EXP 47
12370: PUSH
12371: LD_INT 1
12373: ST_TO_ADDR
// if p3 = 0 then
12374: LD_VAR 0 3
12378: PUSH
12379: LD_INT 0
12381: EQUAL
12382: IFFALSE 12388
// InitStreamMode ;
12384: CALL 13464 0 0
// if p3 = 1 then
12388: LD_VAR 0 3
12392: PUSH
12393: LD_INT 1
12395: EQUAL
12396: IFFALSE 12406
// sRocket := true ;
12398: LD_ADDR_EXP 52
12402: PUSH
12403: LD_INT 1
12405: ST_TO_ADDR
// if p3 = 2 then
12406: LD_VAR 0 3
12410: PUSH
12411: LD_INT 2
12413: EQUAL
12414: IFFALSE 12424
// sSpeed := true ;
12416: LD_ADDR_EXP 51
12420: PUSH
12421: LD_INT 1
12423: ST_TO_ADDR
// if p3 = 3 then
12424: LD_VAR 0 3
12428: PUSH
12429: LD_INT 3
12431: EQUAL
12432: IFFALSE 12442
// sEngine := true ;
12434: LD_ADDR_EXP 53
12438: PUSH
12439: LD_INT 1
12441: ST_TO_ADDR
// if p3 = 4 then
12442: LD_VAR 0 3
12446: PUSH
12447: LD_INT 4
12449: EQUAL
12450: IFFALSE 12460
// sSpec := true ;
12452: LD_ADDR_EXP 50
12456: PUSH
12457: LD_INT 1
12459: ST_TO_ADDR
// if p3 = 5 then
12460: LD_VAR 0 3
12464: PUSH
12465: LD_INT 5
12467: EQUAL
12468: IFFALSE 12478
// sLevel := true ;
12470: LD_ADDR_EXP 54
12474: PUSH
12475: LD_INT 1
12477: ST_TO_ADDR
// if p3 = 6 then
12478: LD_VAR 0 3
12482: PUSH
12483: LD_INT 6
12485: EQUAL
12486: IFFALSE 12496
// sArmoury := true ;
12488: LD_ADDR_EXP 55
12492: PUSH
12493: LD_INT 1
12495: ST_TO_ADDR
// if p3 = 7 then
12496: LD_VAR 0 3
12500: PUSH
12501: LD_INT 7
12503: EQUAL
12504: IFFALSE 12514
// sRadar := true ;
12506: LD_ADDR_EXP 56
12510: PUSH
12511: LD_INT 1
12513: ST_TO_ADDR
// if p3 = 8 then
12514: LD_VAR 0 3
12518: PUSH
12519: LD_INT 8
12521: EQUAL
12522: IFFALSE 12532
// sBunker := true ;
12524: LD_ADDR_EXP 57
12528: PUSH
12529: LD_INT 1
12531: ST_TO_ADDR
// if p3 = 9 then
12532: LD_VAR 0 3
12536: PUSH
12537: LD_INT 9
12539: EQUAL
12540: IFFALSE 12550
// sHack := true ;
12542: LD_ADDR_EXP 58
12546: PUSH
12547: LD_INT 1
12549: ST_TO_ADDR
// if p3 = 10 then
12550: LD_VAR 0 3
12554: PUSH
12555: LD_INT 10
12557: EQUAL
12558: IFFALSE 12568
// sFire := true ;
12560: LD_ADDR_EXP 59
12564: PUSH
12565: LD_INT 1
12567: ST_TO_ADDR
// if p3 = 11 then
12568: LD_VAR 0 3
12572: PUSH
12573: LD_INT 11
12575: EQUAL
12576: IFFALSE 12586
// sRefresh := true ;
12578: LD_ADDR_EXP 60
12582: PUSH
12583: LD_INT 1
12585: ST_TO_ADDR
// if p3 = 12 then
12586: LD_VAR 0 3
12590: PUSH
12591: LD_INT 12
12593: EQUAL
12594: IFFALSE 12604
// sExp := true ;
12596: LD_ADDR_EXP 61
12600: PUSH
12601: LD_INT 1
12603: ST_TO_ADDR
// if p3 = 13 then
12604: LD_VAR 0 3
12608: PUSH
12609: LD_INT 13
12611: EQUAL
12612: IFFALSE 12622
// sDepot := true ;
12614: LD_ADDR_EXP 62
12618: PUSH
12619: LD_INT 1
12621: ST_TO_ADDR
// if p3 = 14 then
12622: LD_VAR 0 3
12626: PUSH
12627: LD_INT 14
12629: EQUAL
12630: IFFALSE 12640
// sFlag := true ;
12632: LD_ADDR_EXP 63
12636: PUSH
12637: LD_INT 1
12639: ST_TO_ADDR
// if p3 = 15 then
12640: LD_VAR 0 3
12644: PUSH
12645: LD_INT 15
12647: EQUAL
12648: IFFALSE 12658
// sKamikadze := true ;
12650: LD_ADDR_EXP 71
12654: PUSH
12655: LD_INT 1
12657: ST_TO_ADDR
// if p3 = 16 then
12658: LD_VAR 0 3
12662: PUSH
12663: LD_INT 16
12665: EQUAL
12666: IFFALSE 12676
// sTroll := true ;
12668: LD_ADDR_EXP 72
12672: PUSH
12673: LD_INT 1
12675: ST_TO_ADDR
// if p3 = 17 then
12676: LD_VAR 0 3
12680: PUSH
12681: LD_INT 17
12683: EQUAL
12684: IFFALSE 12694
// sSlow := true ;
12686: LD_ADDR_EXP 73
12690: PUSH
12691: LD_INT 1
12693: ST_TO_ADDR
// if p3 = 18 then
12694: LD_VAR 0 3
12698: PUSH
12699: LD_INT 18
12701: EQUAL
12702: IFFALSE 12712
// sLack := true ;
12704: LD_ADDR_EXP 74
12708: PUSH
12709: LD_INT 1
12711: ST_TO_ADDR
// if p3 = 19 then
12712: LD_VAR 0 3
12716: PUSH
12717: LD_INT 19
12719: EQUAL
12720: IFFALSE 12730
// sTank := true ;
12722: LD_ADDR_EXP 76
12726: PUSH
12727: LD_INT 1
12729: ST_TO_ADDR
// if p3 = 20 then
12730: LD_VAR 0 3
12734: PUSH
12735: LD_INT 20
12737: EQUAL
12738: IFFALSE 12748
// sRemote := true ;
12740: LD_ADDR_EXP 77
12744: PUSH
12745: LD_INT 1
12747: ST_TO_ADDR
// if p3 = 21 then
12748: LD_VAR 0 3
12752: PUSH
12753: LD_INT 21
12755: EQUAL
12756: IFFALSE 12766
// sPowell := true ;
12758: LD_ADDR_EXP 78
12762: PUSH
12763: LD_INT 1
12765: ST_TO_ADDR
// if p3 = 22 then
12766: LD_VAR 0 3
12770: PUSH
12771: LD_INT 22
12773: EQUAL
12774: IFFALSE 12784
// sTeleport := true ;
12776: LD_ADDR_EXP 81
12780: PUSH
12781: LD_INT 1
12783: ST_TO_ADDR
// if p3 = 23 then
12784: LD_VAR 0 3
12788: PUSH
12789: LD_INT 23
12791: EQUAL
12792: IFFALSE 12802
// sOilTower := true ;
12794: LD_ADDR_EXP 83
12798: PUSH
12799: LD_INT 1
12801: ST_TO_ADDR
// if p3 = 24 then
12802: LD_VAR 0 3
12806: PUSH
12807: LD_INT 24
12809: EQUAL
12810: IFFALSE 12820
// sShovel := true ;
12812: LD_ADDR_EXP 84
12816: PUSH
12817: LD_INT 1
12819: ST_TO_ADDR
// if p3 = 25 then
12820: LD_VAR 0 3
12824: PUSH
12825: LD_INT 25
12827: EQUAL
12828: IFFALSE 12838
// sSheik := true ;
12830: LD_ADDR_EXP 85
12834: PUSH
12835: LD_INT 1
12837: ST_TO_ADDR
// if p3 = 26 then
12838: LD_VAR 0 3
12842: PUSH
12843: LD_INT 26
12845: EQUAL
12846: IFFALSE 12856
// sEarthquake := true ;
12848: LD_ADDR_EXP 87
12852: PUSH
12853: LD_INT 1
12855: ST_TO_ADDR
// if p3 = 27 then
12856: LD_VAR 0 3
12860: PUSH
12861: LD_INT 27
12863: EQUAL
12864: IFFALSE 12874
// sAI := true ;
12866: LD_ADDR_EXP 88
12870: PUSH
12871: LD_INT 1
12873: ST_TO_ADDR
// if p3 = 28 then
12874: LD_VAR 0 3
12878: PUSH
12879: LD_INT 28
12881: EQUAL
12882: IFFALSE 12892
// sCargo := true ;
12884: LD_ADDR_EXP 91
12888: PUSH
12889: LD_INT 1
12891: ST_TO_ADDR
// if p3 = 29 then
12892: LD_VAR 0 3
12896: PUSH
12897: LD_INT 29
12899: EQUAL
12900: IFFALSE 12910
// sDLaser := true ;
12902: LD_ADDR_EXP 92
12906: PUSH
12907: LD_INT 1
12909: ST_TO_ADDR
// if p3 = 30 then
12910: LD_VAR 0 3
12914: PUSH
12915: LD_INT 30
12917: EQUAL
12918: IFFALSE 12928
// sExchange := true ;
12920: LD_ADDR_EXP 93
12924: PUSH
12925: LD_INT 1
12927: ST_TO_ADDR
// if p3 = 31 then
12928: LD_VAR 0 3
12932: PUSH
12933: LD_INT 31
12935: EQUAL
12936: IFFALSE 12946
// sFac := true ;
12938: LD_ADDR_EXP 94
12942: PUSH
12943: LD_INT 1
12945: ST_TO_ADDR
// if p3 = 32 then
12946: LD_VAR 0 3
12950: PUSH
12951: LD_INT 32
12953: EQUAL
12954: IFFALSE 12964
// sPower := true ;
12956: LD_ADDR_EXP 95
12960: PUSH
12961: LD_INT 1
12963: ST_TO_ADDR
// if p3 = 33 then
12964: LD_VAR 0 3
12968: PUSH
12969: LD_INT 33
12971: EQUAL
12972: IFFALSE 12982
// sRandom := true ;
12974: LD_ADDR_EXP 96
12978: PUSH
12979: LD_INT 1
12981: ST_TO_ADDR
// if p3 = 34 then
12982: LD_VAR 0 3
12986: PUSH
12987: LD_INT 34
12989: EQUAL
12990: IFFALSE 13000
// sShield := true ;
12992: LD_ADDR_EXP 97
12996: PUSH
12997: LD_INT 1
12999: ST_TO_ADDR
// if p3 = 35 then
13000: LD_VAR 0 3
13004: PUSH
13005: LD_INT 35
13007: EQUAL
13008: IFFALSE 13018
// sTime := true ;
13010: LD_ADDR_EXP 98
13014: PUSH
13015: LD_INT 1
13017: ST_TO_ADDR
// if p3 = 36 then
13018: LD_VAR 0 3
13022: PUSH
13023: LD_INT 36
13025: EQUAL
13026: IFFALSE 13036
// sTools := true ;
13028: LD_ADDR_EXP 99
13032: PUSH
13033: LD_INT 1
13035: ST_TO_ADDR
// if p3 = 101 then
13036: LD_VAR 0 3
13040: PUSH
13041: LD_INT 101
13043: EQUAL
13044: IFFALSE 13054
// sSold := true ;
13046: LD_ADDR_EXP 64
13050: PUSH
13051: LD_INT 1
13053: ST_TO_ADDR
// if p3 = 102 then
13054: LD_VAR 0 3
13058: PUSH
13059: LD_INT 102
13061: EQUAL
13062: IFFALSE 13072
// sDiff := true ;
13064: LD_ADDR_EXP 65
13068: PUSH
13069: LD_INT 1
13071: ST_TO_ADDR
// if p3 = 103 then
13072: LD_VAR 0 3
13076: PUSH
13077: LD_INT 103
13079: EQUAL
13080: IFFALSE 13090
// sFog := true ;
13082: LD_ADDR_EXP 68
13086: PUSH
13087: LD_INT 1
13089: ST_TO_ADDR
// if p3 = 104 then
13090: LD_VAR 0 3
13094: PUSH
13095: LD_INT 104
13097: EQUAL
13098: IFFALSE 13108
// sReset := true ;
13100: LD_ADDR_EXP 69
13104: PUSH
13105: LD_INT 1
13107: ST_TO_ADDR
// if p3 = 105 then
13108: LD_VAR 0 3
13112: PUSH
13113: LD_INT 105
13115: EQUAL
13116: IFFALSE 13126
// sSun := true ;
13118: LD_ADDR_EXP 70
13122: PUSH
13123: LD_INT 1
13125: ST_TO_ADDR
// if p3 = 106 then
13126: LD_VAR 0 3
13130: PUSH
13131: LD_INT 106
13133: EQUAL
13134: IFFALSE 13144
// sTiger := true ;
13136: LD_ADDR_EXP 66
13140: PUSH
13141: LD_INT 1
13143: ST_TO_ADDR
// if p3 = 107 then
13144: LD_VAR 0 3
13148: PUSH
13149: LD_INT 107
13151: EQUAL
13152: IFFALSE 13162
// sBomb := true ;
13154: LD_ADDR_EXP 67
13158: PUSH
13159: LD_INT 1
13161: ST_TO_ADDR
// if p3 = 108 then
13162: LD_VAR 0 3
13166: PUSH
13167: LD_INT 108
13169: EQUAL
13170: IFFALSE 13180
// sWound := true ;
13172: LD_ADDR_EXP 75
13176: PUSH
13177: LD_INT 1
13179: ST_TO_ADDR
// if p3 = 109 then
13180: LD_VAR 0 3
13184: PUSH
13185: LD_INT 109
13187: EQUAL
13188: IFFALSE 13198
// sBetray := true ;
13190: LD_ADDR_EXP 79
13194: PUSH
13195: LD_INT 1
13197: ST_TO_ADDR
// if p3 = 110 then
13198: LD_VAR 0 3
13202: PUSH
13203: LD_INT 110
13205: EQUAL
13206: IFFALSE 13216
// sContamin := true ;
13208: LD_ADDR_EXP 80
13212: PUSH
13213: LD_INT 1
13215: ST_TO_ADDR
// if p3 = 111 then
13216: LD_VAR 0 3
13220: PUSH
13221: LD_INT 111
13223: EQUAL
13224: IFFALSE 13234
// sOil := true ;
13226: LD_ADDR_EXP 82
13230: PUSH
13231: LD_INT 1
13233: ST_TO_ADDR
// if p3 = 112 then
13234: LD_VAR 0 3
13238: PUSH
13239: LD_INT 112
13241: EQUAL
13242: IFFALSE 13252
// sStu := true ;
13244: LD_ADDR_EXP 86
13248: PUSH
13249: LD_INT 1
13251: ST_TO_ADDR
// if p3 = 113 then
13252: LD_VAR 0 3
13256: PUSH
13257: LD_INT 113
13259: EQUAL
13260: IFFALSE 13270
// sBazooka := true ;
13262: LD_ADDR_EXP 89
13266: PUSH
13267: LD_INT 1
13269: ST_TO_ADDR
// if p3 = 114 then
13270: LD_VAR 0 3
13274: PUSH
13275: LD_INT 114
13277: EQUAL
13278: IFFALSE 13288
// sMortar := true ;
13280: LD_ADDR_EXP 90
13284: PUSH
13285: LD_INT 1
13287: ST_TO_ADDR
// if p3 = 115 then
13288: LD_VAR 0 3
13292: PUSH
13293: LD_INT 115
13295: EQUAL
13296: IFFALSE 13306
// sRanger := true ;
13298: LD_ADDR_EXP 100
13302: PUSH
13303: LD_INT 1
13305: ST_TO_ADDR
// end ; if p2 = 101 then
13306: LD_VAR 0 2
13310: PUSH
13311: LD_INT 101
13313: EQUAL
13314: IFFALSE 13442
// begin case p3 of 1 :
13316: LD_VAR 0 3
13320: PUSH
13321: LD_INT 1
13323: DOUBLE
13324: EQUAL
13325: IFTRUE 13329
13327: GO 13336
13329: POP
// hHackUnlimitedResources ; 2 :
13330: CALL 24477 0 0
13334: GO 13442
13336: LD_INT 2
13338: DOUBLE
13339: EQUAL
13340: IFTRUE 13344
13342: GO 13351
13344: POP
// hHackSetLevel10 ; 3 :
13345: CALL 24610 0 0
13349: GO 13442
13351: LD_INT 3
13353: DOUBLE
13354: EQUAL
13355: IFTRUE 13359
13357: GO 13366
13359: POP
// hHackSetLevel10YourUnits ; 4 :
13360: CALL 24695 0 0
13364: GO 13442
13366: LD_INT 4
13368: DOUBLE
13369: EQUAL
13370: IFTRUE 13374
13372: GO 13381
13374: POP
// hHackInvincible ; 5 :
13375: CALL 25143 0 0
13379: GO 13442
13381: LD_INT 5
13383: DOUBLE
13384: EQUAL
13385: IFTRUE 13389
13387: GO 13396
13389: POP
// hHackInvisible ; 6 :
13390: CALL 25254 0 0
13394: GO 13442
13396: LD_INT 6
13398: DOUBLE
13399: EQUAL
13400: IFTRUE 13404
13402: GO 13411
13404: POP
// hHackChangeYourSide ; 7 :
13405: CALL 25311 0 0
13409: GO 13442
13411: LD_INT 7
13413: DOUBLE
13414: EQUAL
13415: IFTRUE 13419
13417: GO 13426
13419: POP
// hHackChangeUnitSide ; 8 :
13420: CALL 25353 0 0
13424: GO 13442
13426: LD_INT 8
13428: DOUBLE
13429: EQUAL
13430: IFTRUE 13434
13432: GO 13441
13434: POP
// hHackFog ; end ;
13435: CALL 25454 0 0
13439: GO 13442
13441: POP
// end ; end ;
13442: PPOPN 6
13444: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
13445: GO 13447
13447: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
13448: LD_STRING initStreamRollete();
13450: PPUSH
13451: CALL_OW 559
// InitStreamMode ;
13455: CALL 13464 0 0
// DefineStreamItems ( ) ;
13459: CALL 13904 0 0
// end ;
13463: END
// function InitStreamMode ; begin
13464: LD_INT 0
13466: PPUSH
// streamModeActive := false ;
13467: LD_ADDR_EXP 47
13471: PUSH
13472: LD_INT 0
13474: ST_TO_ADDR
// normalCounter := 36 ;
13475: LD_ADDR_EXP 48
13479: PUSH
13480: LD_INT 36
13482: ST_TO_ADDR
// hardcoreCounter := 16 ;
13483: LD_ADDR_EXP 49
13487: PUSH
13488: LD_INT 16
13490: ST_TO_ADDR
// sRocket := false ;
13491: LD_ADDR_EXP 52
13495: PUSH
13496: LD_INT 0
13498: ST_TO_ADDR
// sSpeed := false ;
13499: LD_ADDR_EXP 51
13503: PUSH
13504: LD_INT 0
13506: ST_TO_ADDR
// sEngine := false ;
13507: LD_ADDR_EXP 53
13511: PUSH
13512: LD_INT 0
13514: ST_TO_ADDR
// sSpec := false ;
13515: LD_ADDR_EXP 50
13519: PUSH
13520: LD_INT 0
13522: ST_TO_ADDR
// sLevel := false ;
13523: LD_ADDR_EXP 54
13527: PUSH
13528: LD_INT 0
13530: ST_TO_ADDR
// sArmoury := false ;
13531: LD_ADDR_EXP 55
13535: PUSH
13536: LD_INT 0
13538: ST_TO_ADDR
// sRadar := false ;
13539: LD_ADDR_EXP 56
13543: PUSH
13544: LD_INT 0
13546: ST_TO_ADDR
// sBunker := false ;
13547: LD_ADDR_EXP 57
13551: PUSH
13552: LD_INT 0
13554: ST_TO_ADDR
// sHack := false ;
13555: LD_ADDR_EXP 58
13559: PUSH
13560: LD_INT 0
13562: ST_TO_ADDR
// sFire := false ;
13563: LD_ADDR_EXP 59
13567: PUSH
13568: LD_INT 0
13570: ST_TO_ADDR
// sRefresh := false ;
13571: LD_ADDR_EXP 60
13575: PUSH
13576: LD_INT 0
13578: ST_TO_ADDR
// sExp := false ;
13579: LD_ADDR_EXP 61
13583: PUSH
13584: LD_INT 0
13586: ST_TO_ADDR
// sDepot := false ;
13587: LD_ADDR_EXP 62
13591: PUSH
13592: LD_INT 0
13594: ST_TO_ADDR
// sFlag := false ;
13595: LD_ADDR_EXP 63
13599: PUSH
13600: LD_INT 0
13602: ST_TO_ADDR
// sKamikadze := false ;
13603: LD_ADDR_EXP 71
13607: PUSH
13608: LD_INT 0
13610: ST_TO_ADDR
// sTroll := false ;
13611: LD_ADDR_EXP 72
13615: PUSH
13616: LD_INT 0
13618: ST_TO_ADDR
// sSlow := false ;
13619: LD_ADDR_EXP 73
13623: PUSH
13624: LD_INT 0
13626: ST_TO_ADDR
// sLack := false ;
13627: LD_ADDR_EXP 74
13631: PUSH
13632: LD_INT 0
13634: ST_TO_ADDR
// sTank := false ;
13635: LD_ADDR_EXP 76
13639: PUSH
13640: LD_INT 0
13642: ST_TO_ADDR
// sRemote := false ;
13643: LD_ADDR_EXP 77
13647: PUSH
13648: LD_INT 0
13650: ST_TO_ADDR
// sPowell := false ;
13651: LD_ADDR_EXP 78
13655: PUSH
13656: LD_INT 0
13658: ST_TO_ADDR
// sTeleport := false ;
13659: LD_ADDR_EXP 81
13663: PUSH
13664: LD_INT 0
13666: ST_TO_ADDR
// sOilTower := false ;
13667: LD_ADDR_EXP 83
13671: PUSH
13672: LD_INT 0
13674: ST_TO_ADDR
// sShovel := false ;
13675: LD_ADDR_EXP 84
13679: PUSH
13680: LD_INT 0
13682: ST_TO_ADDR
// sSheik := false ;
13683: LD_ADDR_EXP 85
13687: PUSH
13688: LD_INT 0
13690: ST_TO_ADDR
// sEarthquake := false ;
13691: LD_ADDR_EXP 87
13695: PUSH
13696: LD_INT 0
13698: ST_TO_ADDR
// sAI := false ;
13699: LD_ADDR_EXP 88
13703: PUSH
13704: LD_INT 0
13706: ST_TO_ADDR
// sCargo := false ;
13707: LD_ADDR_EXP 91
13711: PUSH
13712: LD_INT 0
13714: ST_TO_ADDR
// sDLaser := false ;
13715: LD_ADDR_EXP 92
13719: PUSH
13720: LD_INT 0
13722: ST_TO_ADDR
// sExchange := false ;
13723: LD_ADDR_EXP 93
13727: PUSH
13728: LD_INT 0
13730: ST_TO_ADDR
// sFac := false ;
13731: LD_ADDR_EXP 94
13735: PUSH
13736: LD_INT 0
13738: ST_TO_ADDR
// sPower := false ;
13739: LD_ADDR_EXP 95
13743: PUSH
13744: LD_INT 0
13746: ST_TO_ADDR
// sRandom := false ;
13747: LD_ADDR_EXP 96
13751: PUSH
13752: LD_INT 0
13754: ST_TO_ADDR
// sShield := false ;
13755: LD_ADDR_EXP 97
13759: PUSH
13760: LD_INT 0
13762: ST_TO_ADDR
// sTime := false ;
13763: LD_ADDR_EXP 98
13767: PUSH
13768: LD_INT 0
13770: ST_TO_ADDR
// sTools := false ;
13771: LD_ADDR_EXP 99
13775: PUSH
13776: LD_INT 0
13778: ST_TO_ADDR
// sSold := false ;
13779: LD_ADDR_EXP 64
13783: PUSH
13784: LD_INT 0
13786: ST_TO_ADDR
// sDiff := false ;
13787: LD_ADDR_EXP 65
13791: PUSH
13792: LD_INT 0
13794: ST_TO_ADDR
// sFog := false ;
13795: LD_ADDR_EXP 68
13799: PUSH
13800: LD_INT 0
13802: ST_TO_ADDR
// sReset := false ;
13803: LD_ADDR_EXP 69
13807: PUSH
13808: LD_INT 0
13810: ST_TO_ADDR
// sSun := false ;
13811: LD_ADDR_EXP 70
13815: PUSH
13816: LD_INT 0
13818: ST_TO_ADDR
// sTiger := false ;
13819: LD_ADDR_EXP 66
13823: PUSH
13824: LD_INT 0
13826: ST_TO_ADDR
// sBomb := false ;
13827: LD_ADDR_EXP 67
13831: PUSH
13832: LD_INT 0
13834: ST_TO_ADDR
// sWound := false ;
13835: LD_ADDR_EXP 75
13839: PUSH
13840: LD_INT 0
13842: ST_TO_ADDR
// sBetray := false ;
13843: LD_ADDR_EXP 79
13847: PUSH
13848: LD_INT 0
13850: ST_TO_ADDR
// sContamin := false ;
13851: LD_ADDR_EXP 80
13855: PUSH
13856: LD_INT 0
13858: ST_TO_ADDR
// sOil := false ;
13859: LD_ADDR_EXP 82
13863: PUSH
13864: LD_INT 0
13866: ST_TO_ADDR
// sStu := false ;
13867: LD_ADDR_EXP 86
13871: PUSH
13872: LD_INT 0
13874: ST_TO_ADDR
// sBazooka := false ;
13875: LD_ADDR_EXP 89
13879: PUSH
13880: LD_INT 0
13882: ST_TO_ADDR
// sMortar := false ;
13883: LD_ADDR_EXP 90
13887: PUSH
13888: LD_INT 0
13890: ST_TO_ADDR
// sRanger := false ;
13891: LD_ADDR_EXP 100
13895: PUSH
13896: LD_INT 0
13898: ST_TO_ADDR
// end ;
13899: LD_VAR 0 1
13903: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
13904: LD_INT 0
13906: PPUSH
13907: PPUSH
13908: PPUSH
13909: PPUSH
13910: PPUSH
// result := [ ] ;
13911: LD_ADDR_VAR 0 1
13915: PUSH
13916: EMPTY
13917: ST_TO_ADDR
// if campaign_id = 1 then
13918: LD_OWVAR 69
13922: PUSH
13923: LD_INT 1
13925: EQUAL
13926: IFFALSE 16864
// begin case mission_number of 1 :
13928: LD_OWVAR 70
13932: PUSH
13933: LD_INT 1
13935: DOUBLE
13936: EQUAL
13937: IFTRUE 13941
13939: GO 14005
13941: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
13942: LD_ADDR_VAR 0 1
13946: PUSH
13947: LD_INT 2
13949: PUSH
13950: LD_INT 4
13952: PUSH
13953: LD_INT 11
13955: PUSH
13956: LD_INT 12
13958: PUSH
13959: LD_INT 15
13961: PUSH
13962: LD_INT 16
13964: PUSH
13965: LD_INT 22
13967: PUSH
13968: LD_INT 23
13970: PUSH
13971: LD_INT 26
13973: PUSH
13974: EMPTY
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: LIST
13982: LIST
13983: LIST
13984: PUSH
13985: LD_INT 101
13987: PUSH
13988: LD_INT 102
13990: PUSH
13991: LD_INT 106
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: LIST
13998: PUSH
13999: EMPTY
14000: LIST
14001: LIST
14002: ST_TO_ADDR
14003: GO 16862
14005: LD_INT 2
14007: DOUBLE
14008: EQUAL
14009: IFTRUE 14013
14011: GO 14085
14013: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
14014: LD_ADDR_VAR 0 1
14018: PUSH
14019: LD_INT 2
14021: PUSH
14022: LD_INT 4
14024: PUSH
14025: LD_INT 11
14027: PUSH
14028: LD_INT 12
14030: PUSH
14031: LD_INT 15
14033: PUSH
14034: LD_INT 16
14036: PUSH
14037: LD_INT 22
14039: PUSH
14040: LD_INT 23
14042: PUSH
14043: LD_INT 26
14045: PUSH
14046: EMPTY
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: PUSH
14057: LD_INT 101
14059: PUSH
14060: LD_INT 102
14062: PUSH
14063: LD_INT 105
14065: PUSH
14066: LD_INT 106
14068: PUSH
14069: LD_INT 108
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: PUSH
14079: EMPTY
14080: LIST
14081: LIST
14082: ST_TO_ADDR
14083: GO 16862
14085: LD_INT 3
14087: DOUBLE
14088: EQUAL
14089: IFTRUE 14093
14091: GO 14169
14093: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
14094: LD_ADDR_VAR 0 1
14098: PUSH
14099: LD_INT 2
14101: PUSH
14102: LD_INT 4
14104: PUSH
14105: LD_INT 5
14107: PUSH
14108: LD_INT 11
14110: PUSH
14111: LD_INT 12
14113: PUSH
14114: LD_INT 15
14116: PUSH
14117: LD_INT 16
14119: PUSH
14120: LD_INT 22
14122: PUSH
14123: LD_INT 26
14125: PUSH
14126: LD_INT 36
14128: PUSH
14129: EMPTY
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: PUSH
14141: LD_INT 101
14143: PUSH
14144: LD_INT 102
14146: PUSH
14147: LD_INT 105
14149: PUSH
14150: LD_INT 106
14152: PUSH
14153: LD_INT 108
14155: PUSH
14156: EMPTY
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: PUSH
14163: EMPTY
14164: LIST
14165: LIST
14166: ST_TO_ADDR
14167: GO 16862
14169: LD_INT 4
14171: DOUBLE
14172: EQUAL
14173: IFTRUE 14177
14175: GO 14261
14177: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
14178: LD_ADDR_VAR 0 1
14182: PUSH
14183: LD_INT 2
14185: PUSH
14186: LD_INT 4
14188: PUSH
14189: LD_INT 5
14191: PUSH
14192: LD_INT 8
14194: PUSH
14195: LD_INT 11
14197: PUSH
14198: LD_INT 12
14200: PUSH
14201: LD_INT 15
14203: PUSH
14204: LD_INT 16
14206: PUSH
14207: LD_INT 22
14209: PUSH
14210: LD_INT 23
14212: PUSH
14213: LD_INT 26
14215: PUSH
14216: LD_INT 36
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: PUSH
14233: LD_INT 101
14235: PUSH
14236: LD_INT 102
14238: PUSH
14239: LD_INT 105
14241: PUSH
14242: LD_INT 106
14244: PUSH
14245: LD_INT 108
14247: PUSH
14248: EMPTY
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: PUSH
14255: EMPTY
14256: LIST
14257: LIST
14258: ST_TO_ADDR
14259: GO 16862
14261: LD_INT 5
14263: DOUBLE
14264: EQUAL
14265: IFTRUE 14269
14267: GO 14369
14269: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
14270: LD_ADDR_VAR 0 1
14274: PUSH
14275: LD_INT 2
14277: PUSH
14278: LD_INT 4
14280: PUSH
14281: LD_INT 5
14283: PUSH
14284: LD_INT 6
14286: PUSH
14287: LD_INT 8
14289: PUSH
14290: LD_INT 11
14292: PUSH
14293: LD_INT 12
14295: PUSH
14296: LD_INT 15
14298: PUSH
14299: LD_INT 16
14301: PUSH
14302: LD_INT 22
14304: PUSH
14305: LD_INT 23
14307: PUSH
14308: LD_INT 25
14310: PUSH
14311: LD_INT 26
14313: PUSH
14314: LD_INT 36
14316: PUSH
14317: EMPTY
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: PUSH
14333: LD_INT 101
14335: PUSH
14336: LD_INT 102
14338: PUSH
14339: LD_INT 105
14341: PUSH
14342: LD_INT 106
14344: PUSH
14345: LD_INT 108
14347: PUSH
14348: LD_INT 109
14350: PUSH
14351: LD_INT 112
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: PUSH
14363: EMPTY
14364: LIST
14365: LIST
14366: ST_TO_ADDR
14367: GO 16862
14369: LD_INT 6
14371: DOUBLE
14372: EQUAL
14373: IFTRUE 14377
14375: GO 14497
14377: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
14378: LD_ADDR_VAR 0 1
14382: PUSH
14383: LD_INT 2
14385: PUSH
14386: LD_INT 4
14388: PUSH
14389: LD_INT 5
14391: PUSH
14392: LD_INT 6
14394: PUSH
14395: LD_INT 8
14397: PUSH
14398: LD_INT 11
14400: PUSH
14401: LD_INT 12
14403: PUSH
14404: LD_INT 15
14406: PUSH
14407: LD_INT 16
14409: PUSH
14410: LD_INT 20
14412: PUSH
14413: LD_INT 21
14415: PUSH
14416: LD_INT 22
14418: PUSH
14419: LD_INT 23
14421: PUSH
14422: LD_INT 25
14424: PUSH
14425: LD_INT 26
14427: PUSH
14428: LD_INT 30
14430: PUSH
14431: LD_INT 31
14433: PUSH
14434: LD_INT 32
14436: PUSH
14437: LD_INT 36
14439: PUSH
14440: EMPTY
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: PUSH
14461: LD_INT 101
14463: PUSH
14464: LD_INT 102
14466: PUSH
14467: LD_INT 105
14469: PUSH
14470: LD_INT 106
14472: PUSH
14473: LD_INT 108
14475: PUSH
14476: LD_INT 109
14478: PUSH
14479: LD_INT 112
14481: PUSH
14482: EMPTY
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: PUSH
14491: EMPTY
14492: LIST
14493: LIST
14494: ST_TO_ADDR
14495: GO 16862
14497: LD_INT 7
14499: DOUBLE
14500: EQUAL
14501: IFTRUE 14505
14503: GO 14605
14505: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
14506: LD_ADDR_VAR 0 1
14510: PUSH
14511: LD_INT 2
14513: PUSH
14514: LD_INT 4
14516: PUSH
14517: LD_INT 5
14519: PUSH
14520: LD_INT 7
14522: PUSH
14523: LD_INT 11
14525: PUSH
14526: LD_INT 12
14528: PUSH
14529: LD_INT 15
14531: PUSH
14532: LD_INT 16
14534: PUSH
14535: LD_INT 20
14537: PUSH
14538: LD_INT 21
14540: PUSH
14541: LD_INT 22
14543: PUSH
14544: LD_INT 23
14546: PUSH
14547: LD_INT 25
14549: PUSH
14550: LD_INT 26
14552: PUSH
14553: EMPTY
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: PUSH
14569: LD_INT 101
14571: PUSH
14572: LD_INT 102
14574: PUSH
14575: LD_INT 103
14577: PUSH
14578: LD_INT 105
14580: PUSH
14581: LD_INT 106
14583: PUSH
14584: LD_INT 108
14586: PUSH
14587: LD_INT 112
14589: PUSH
14590: EMPTY
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: PUSH
14599: EMPTY
14600: LIST
14601: LIST
14602: ST_TO_ADDR
14603: GO 16862
14605: LD_INT 8
14607: DOUBLE
14608: EQUAL
14609: IFTRUE 14613
14611: GO 14741
14613: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
14614: LD_ADDR_VAR 0 1
14618: PUSH
14619: LD_INT 2
14621: PUSH
14622: LD_INT 4
14624: PUSH
14625: LD_INT 5
14627: PUSH
14628: LD_INT 6
14630: PUSH
14631: LD_INT 7
14633: PUSH
14634: LD_INT 8
14636: PUSH
14637: LD_INT 11
14639: PUSH
14640: LD_INT 12
14642: PUSH
14643: LD_INT 15
14645: PUSH
14646: LD_INT 16
14648: PUSH
14649: LD_INT 20
14651: PUSH
14652: LD_INT 21
14654: PUSH
14655: LD_INT 22
14657: PUSH
14658: LD_INT 23
14660: PUSH
14661: LD_INT 25
14663: PUSH
14664: LD_INT 26
14666: PUSH
14667: LD_INT 30
14669: PUSH
14670: LD_INT 31
14672: PUSH
14673: LD_INT 32
14675: PUSH
14676: LD_INT 36
14678: PUSH
14679: EMPTY
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: PUSH
14701: LD_INT 101
14703: PUSH
14704: LD_INT 102
14706: PUSH
14707: LD_INT 103
14709: PUSH
14710: LD_INT 105
14712: PUSH
14713: LD_INT 106
14715: PUSH
14716: LD_INT 108
14718: PUSH
14719: LD_INT 109
14721: PUSH
14722: LD_INT 112
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: ST_TO_ADDR
14739: GO 16862
14741: LD_INT 9
14743: DOUBLE
14744: EQUAL
14745: IFTRUE 14749
14747: GO 14885
14749: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
14750: LD_ADDR_VAR 0 1
14754: PUSH
14755: LD_INT 2
14757: PUSH
14758: LD_INT 4
14760: PUSH
14761: LD_INT 5
14763: PUSH
14764: LD_INT 6
14766: PUSH
14767: LD_INT 7
14769: PUSH
14770: LD_INT 8
14772: PUSH
14773: LD_INT 11
14775: PUSH
14776: LD_INT 12
14778: PUSH
14779: LD_INT 15
14781: PUSH
14782: LD_INT 16
14784: PUSH
14785: LD_INT 20
14787: PUSH
14788: LD_INT 21
14790: PUSH
14791: LD_INT 22
14793: PUSH
14794: LD_INT 23
14796: PUSH
14797: LD_INT 25
14799: PUSH
14800: LD_INT 26
14802: PUSH
14803: LD_INT 28
14805: PUSH
14806: LD_INT 30
14808: PUSH
14809: LD_INT 31
14811: PUSH
14812: LD_INT 32
14814: PUSH
14815: LD_INT 36
14817: PUSH
14818: EMPTY
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: LIST
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: LIST
14839: LIST
14840: PUSH
14841: LD_INT 101
14843: PUSH
14844: LD_INT 102
14846: PUSH
14847: LD_INT 103
14849: PUSH
14850: LD_INT 105
14852: PUSH
14853: LD_INT 106
14855: PUSH
14856: LD_INT 108
14858: PUSH
14859: LD_INT 109
14861: PUSH
14862: LD_INT 112
14864: PUSH
14865: LD_INT 114
14867: PUSH
14868: EMPTY
14869: LIST
14870: LIST
14871: LIST
14872: LIST
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: ST_TO_ADDR
14883: GO 16862
14885: LD_INT 10
14887: DOUBLE
14888: EQUAL
14889: IFTRUE 14893
14891: GO 15077
14893: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
14894: LD_ADDR_VAR 0 1
14898: PUSH
14899: LD_INT 2
14901: PUSH
14902: LD_INT 4
14904: PUSH
14905: LD_INT 5
14907: PUSH
14908: LD_INT 6
14910: PUSH
14911: LD_INT 7
14913: PUSH
14914: LD_INT 8
14916: PUSH
14917: LD_INT 9
14919: PUSH
14920: LD_INT 10
14922: PUSH
14923: LD_INT 11
14925: PUSH
14926: LD_INT 12
14928: PUSH
14929: LD_INT 13
14931: PUSH
14932: LD_INT 14
14934: PUSH
14935: LD_INT 15
14937: PUSH
14938: LD_INT 16
14940: PUSH
14941: LD_INT 17
14943: PUSH
14944: LD_INT 18
14946: PUSH
14947: LD_INT 19
14949: PUSH
14950: LD_INT 20
14952: PUSH
14953: LD_INT 21
14955: PUSH
14956: LD_INT 22
14958: PUSH
14959: LD_INT 23
14961: PUSH
14962: LD_INT 24
14964: PUSH
14965: LD_INT 25
14967: PUSH
14968: LD_INT 26
14970: PUSH
14971: LD_INT 28
14973: PUSH
14974: LD_INT 30
14976: PUSH
14977: LD_INT 31
14979: PUSH
14980: LD_INT 32
14982: PUSH
14983: LD_INT 36
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: PUSH
15017: LD_INT 101
15019: PUSH
15020: LD_INT 102
15022: PUSH
15023: LD_INT 103
15025: PUSH
15026: LD_INT 104
15028: PUSH
15029: LD_INT 105
15031: PUSH
15032: LD_INT 106
15034: PUSH
15035: LD_INT 107
15037: PUSH
15038: LD_INT 108
15040: PUSH
15041: LD_INT 109
15043: PUSH
15044: LD_INT 110
15046: PUSH
15047: LD_INT 111
15049: PUSH
15050: LD_INT 112
15052: PUSH
15053: LD_INT 114
15055: PUSH
15056: EMPTY
15057: LIST
15058: LIST
15059: LIST
15060: LIST
15061: LIST
15062: LIST
15063: LIST
15064: LIST
15065: LIST
15066: LIST
15067: LIST
15068: LIST
15069: LIST
15070: PUSH
15071: EMPTY
15072: LIST
15073: LIST
15074: ST_TO_ADDR
15075: GO 16862
15077: LD_INT 11
15079: DOUBLE
15080: EQUAL
15081: IFTRUE 15085
15083: GO 15277
15085: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
15086: LD_ADDR_VAR 0 1
15090: PUSH
15091: LD_INT 2
15093: PUSH
15094: LD_INT 3
15096: PUSH
15097: LD_INT 4
15099: PUSH
15100: LD_INT 5
15102: PUSH
15103: LD_INT 6
15105: PUSH
15106: LD_INT 7
15108: PUSH
15109: LD_INT 8
15111: PUSH
15112: LD_INT 9
15114: PUSH
15115: LD_INT 10
15117: PUSH
15118: LD_INT 11
15120: PUSH
15121: LD_INT 12
15123: PUSH
15124: LD_INT 13
15126: PUSH
15127: LD_INT 14
15129: PUSH
15130: LD_INT 15
15132: PUSH
15133: LD_INT 16
15135: PUSH
15136: LD_INT 17
15138: PUSH
15139: LD_INT 18
15141: PUSH
15142: LD_INT 19
15144: PUSH
15145: LD_INT 20
15147: PUSH
15148: LD_INT 21
15150: PUSH
15151: LD_INT 22
15153: PUSH
15154: LD_INT 23
15156: PUSH
15157: LD_INT 24
15159: PUSH
15160: LD_INT 25
15162: PUSH
15163: LD_INT 26
15165: PUSH
15166: LD_INT 28
15168: PUSH
15169: LD_INT 30
15171: PUSH
15172: LD_INT 31
15174: PUSH
15175: LD_INT 32
15177: PUSH
15178: LD_INT 34
15180: PUSH
15181: LD_INT 36
15183: PUSH
15184: EMPTY
15185: LIST
15186: LIST
15187: LIST
15188: LIST
15189: LIST
15190: LIST
15191: LIST
15192: LIST
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: PUSH
15217: LD_INT 101
15219: PUSH
15220: LD_INT 102
15222: PUSH
15223: LD_INT 103
15225: PUSH
15226: LD_INT 104
15228: PUSH
15229: LD_INT 105
15231: PUSH
15232: LD_INT 106
15234: PUSH
15235: LD_INT 107
15237: PUSH
15238: LD_INT 108
15240: PUSH
15241: LD_INT 109
15243: PUSH
15244: LD_INT 110
15246: PUSH
15247: LD_INT 111
15249: PUSH
15250: LD_INT 112
15252: PUSH
15253: LD_INT 114
15255: PUSH
15256: EMPTY
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: LIST
15263: LIST
15264: LIST
15265: LIST
15266: LIST
15267: LIST
15268: LIST
15269: LIST
15270: PUSH
15271: EMPTY
15272: LIST
15273: LIST
15274: ST_TO_ADDR
15275: GO 16862
15277: LD_INT 12
15279: DOUBLE
15280: EQUAL
15281: IFTRUE 15285
15283: GO 15493
15285: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
15286: LD_ADDR_VAR 0 1
15290: PUSH
15291: LD_INT 1
15293: PUSH
15294: LD_INT 2
15296: PUSH
15297: LD_INT 3
15299: PUSH
15300: LD_INT 4
15302: PUSH
15303: LD_INT 5
15305: PUSH
15306: LD_INT 6
15308: PUSH
15309: LD_INT 7
15311: PUSH
15312: LD_INT 8
15314: PUSH
15315: LD_INT 9
15317: PUSH
15318: LD_INT 10
15320: PUSH
15321: LD_INT 11
15323: PUSH
15324: LD_INT 12
15326: PUSH
15327: LD_INT 13
15329: PUSH
15330: LD_INT 14
15332: PUSH
15333: LD_INT 15
15335: PUSH
15336: LD_INT 16
15338: PUSH
15339: LD_INT 17
15341: PUSH
15342: LD_INT 18
15344: PUSH
15345: LD_INT 19
15347: PUSH
15348: LD_INT 20
15350: PUSH
15351: LD_INT 21
15353: PUSH
15354: LD_INT 22
15356: PUSH
15357: LD_INT 23
15359: PUSH
15360: LD_INT 24
15362: PUSH
15363: LD_INT 25
15365: PUSH
15366: LD_INT 26
15368: PUSH
15369: LD_INT 27
15371: PUSH
15372: LD_INT 28
15374: PUSH
15375: LD_INT 30
15377: PUSH
15378: LD_INT 31
15380: PUSH
15381: LD_INT 32
15383: PUSH
15384: LD_INT 33
15386: PUSH
15387: LD_INT 34
15389: PUSH
15390: LD_INT 36
15392: PUSH
15393: EMPTY
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: LIST
15401: LIST
15402: LIST
15403: LIST
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: PUSH
15429: LD_INT 101
15431: PUSH
15432: LD_INT 102
15434: PUSH
15435: LD_INT 103
15437: PUSH
15438: LD_INT 104
15440: PUSH
15441: LD_INT 105
15443: PUSH
15444: LD_INT 106
15446: PUSH
15447: LD_INT 107
15449: PUSH
15450: LD_INT 108
15452: PUSH
15453: LD_INT 109
15455: PUSH
15456: LD_INT 110
15458: PUSH
15459: LD_INT 111
15461: PUSH
15462: LD_INT 112
15464: PUSH
15465: LD_INT 113
15467: PUSH
15468: LD_INT 114
15470: PUSH
15471: EMPTY
15472: LIST
15473: LIST
15474: LIST
15475: LIST
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: ST_TO_ADDR
15491: GO 16862
15493: LD_INT 13
15495: DOUBLE
15496: EQUAL
15497: IFTRUE 15501
15499: GO 15697
15501: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
15502: LD_ADDR_VAR 0 1
15506: PUSH
15507: LD_INT 1
15509: PUSH
15510: LD_INT 2
15512: PUSH
15513: LD_INT 3
15515: PUSH
15516: LD_INT 4
15518: PUSH
15519: LD_INT 5
15521: PUSH
15522: LD_INT 8
15524: PUSH
15525: LD_INT 9
15527: PUSH
15528: LD_INT 10
15530: PUSH
15531: LD_INT 11
15533: PUSH
15534: LD_INT 12
15536: PUSH
15537: LD_INT 14
15539: PUSH
15540: LD_INT 15
15542: PUSH
15543: LD_INT 16
15545: PUSH
15546: LD_INT 17
15548: PUSH
15549: LD_INT 18
15551: PUSH
15552: LD_INT 19
15554: PUSH
15555: LD_INT 20
15557: PUSH
15558: LD_INT 21
15560: PUSH
15561: LD_INT 22
15563: PUSH
15564: LD_INT 23
15566: PUSH
15567: LD_INT 24
15569: PUSH
15570: LD_INT 25
15572: PUSH
15573: LD_INT 26
15575: PUSH
15576: LD_INT 27
15578: PUSH
15579: LD_INT 28
15581: PUSH
15582: LD_INT 30
15584: PUSH
15585: LD_INT 31
15587: PUSH
15588: LD_INT 32
15590: PUSH
15591: LD_INT 33
15593: PUSH
15594: LD_INT 34
15596: PUSH
15597: LD_INT 36
15599: PUSH
15600: EMPTY
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: PUSH
15633: LD_INT 101
15635: PUSH
15636: LD_INT 102
15638: PUSH
15639: LD_INT 103
15641: PUSH
15642: LD_INT 104
15644: PUSH
15645: LD_INT 105
15647: PUSH
15648: LD_INT 106
15650: PUSH
15651: LD_INT 107
15653: PUSH
15654: LD_INT 108
15656: PUSH
15657: LD_INT 109
15659: PUSH
15660: LD_INT 110
15662: PUSH
15663: LD_INT 111
15665: PUSH
15666: LD_INT 112
15668: PUSH
15669: LD_INT 113
15671: PUSH
15672: LD_INT 114
15674: PUSH
15675: EMPTY
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: LIST
15686: LIST
15687: LIST
15688: LIST
15689: LIST
15690: PUSH
15691: EMPTY
15692: LIST
15693: LIST
15694: ST_TO_ADDR
15695: GO 16862
15697: LD_INT 14
15699: DOUBLE
15700: EQUAL
15701: IFTRUE 15705
15703: GO 15917
15705: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
15706: LD_ADDR_VAR 0 1
15710: PUSH
15711: LD_INT 1
15713: PUSH
15714: LD_INT 2
15716: PUSH
15717: LD_INT 3
15719: PUSH
15720: LD_INT 4
15722: PUSH
15723: LD_INT 5
15725: PUSH
15726: LD_INT 6
15728: PUSH
15729: LD_INT 7
15731: PUSH
15732: LD_INT 8
15734: PUSH
15735: LD_INT 9
15737: PUSH
15738: LD_INT 10
15740: PUSH
15741: LD_INT 11
15743: PUSH
15744: LD_INT 12
15746: PUSH
15747: LD_INT 13
15749: PUSH
15750: LD_INT 14
15752: PUSH
15753: LD_INT 15
15755: PUSH
15756: LD_INT 16
15758: PUSH
15759: LD_INT 17
15761: PUSH
15762: LD_INT 18
15764: PUSH
15765: LD_INT 19
15767: PUSH
15768: LD_INT 20
15770: PUSH
15771: LD_INT 21
15773: PUSH
15774: LD_INT 22
15776: PUSH
15777: LD_INT 23
15779: PUSH
15780: LD_INT 24
15782: PUSH
15783: LD_INT 25
15785: PUSH
15786: LD_INT 26
15788: PUSH
15789: LD_INT 27
15791: PUSH
15792: LD_INT 28
15794: PUSH
15795: LD_INT 29
15797: PUSH
15798: LD_INT 30
15800: PUSH
15801: LD_INT 31
15803: PUSH
15804: LD_INT 32
15806: PUSH
15807: LD_INT 33
15809: PUSH
15810: LD_INT 34
15812: PUSH
15813: LD_INT 36
15815: PUSH
15816: EMPTY
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: PUSH
15853: LD_INT 101
15855: PUSH
15856: LD_INT 102
15858: PUSH
15859: LD_INT 103
15861: PUSH
15862: LD_INT 104
15864: PUSH
15865: LD_INT 105
15867: PUSH
15868: LD_INT 106
15870: PUSH
15871: LD_INT 107
15873: PUSH
15874: LD_INT 108
15876: PUSH
15877: LD_INT 109
15879: PUSH
15880: LD_INT 110
15882: PUSH
15883: LD_INT 111
15885: PUSH
15886: LD_INT 112
15888: PUSH
15889: LD_INT 113
15891: PUSH
15892: LD_INT 114
15894: PUSH
15895: EMPTY
15896: LIST
15897: LIST
15898: LIST
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: PUSH
15911: EMPTY
15912: LIST
15913: LIST
15914: ST_TO_ADDR
15915: GO 16862
15917: LD_INT 15
15919: DOUBLE
15920: EQUAL
15921: IFTRUE 15925
15923: GO 16137
15925: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
15926: LD_ADDR_VAR 0 1
15930: PUSH
15931: LD_INT 1
15933: PUSH
15934: LD_INT 2
15936: PUSH
15937: LD_INT 3
15939: PUSH
15940: LD_INT 4
15942: PUSH
15943: LD_INT 5
15945: PUSH
15946: LD_INT 6
15948: PUSH
15949: LD_INT 7
15951: PUSH
15952: LD_INT 8
15954: PUSH
15955: LD_INT 9
15957: PUSH
15958: LD_INT 10
15960: PUSH
15961: LD_INT 11
15963: PUSH
15964: LD_INT 12
15966: PUSH
15967: LD_INT 13
15969: PUSH
15970: LD_INT 14
15972: PUSH
15973: LD_INT 15
15975: PUSH
15976: LD_INT 16
15978: PUSH
15979: LD_INT 17
15981: PUSH
15982: LD_INT 18
15984: PUSH
15985: LD_INT 19
15987: PUSH
15988: LD_INT 20
15990: PUSH
15991: LD_INT 21
15993: PUSH
15994: LD_INT 22
15996: PUSH
15997: LD_INT 23
15999: PUSH
16000: LD_INT 24
16002: PUSH
16003: LD_INT 25
16005: PUSH
16006: LD_INT 26
16008: PUSH
16009: LD_INT 27
16011: PUSH
16012: LD_INT 28
16014: PUSH
16015: LD_INT 29
16017: PUSH
16018: LD_INT 30
16020: PUSH
16021: LD_INT 31
16023: PUSH
16024: LD_INT 32
16026: PUSH
16027: LD_INT 33
16029: PUSH
16030: LD_INT 34
16032: PUSH
16033: LD_INT 36
16035: PUSH
16036: EMPTY
16037: LIST
16038: LIST
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: LIST
16053: LIST
16054: LIST
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: PUSH
16073: LD_INT 101
16075: PUSH
16076: LD_INT 102
16078: PUSH
16079: LD_INT 103
16081: PUSH
16082: LD_INT 104
16084: PUSH
16085: LD_INT 105
16087: PUSH
16088: LD_INT 106
16090: PUSH
16091: LD_INT 107
16093: PUSH
16094: LD_INT 108
16096: PUSH
16097: LD_INT 109
16099: PUSH
16100: LD_INT 110
16102: PUSH
16103: LD_INT 111
16105: PUSH
16106: LD_INT 112
16108: PUSH
16109: LD_INT 113
16111: PUSH
16112: LD_INT 114
16114: PUSH
16115: EMPTY
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: PUSH
16131: EMPTY
16132: LIST
16133: LIST
16134: ST_TO_ADDR
16135: GO 16862
16137: LD_INT 16
16139: DOUBLE
16140: EQUAL
16141: IFTRUE 16145
16143: GO 16269
16145: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
16146: LD_ADDR_VAR 0 1
16150: PUSH
16151: LD_INT 2
16153: PUSH
16154: LD_INT 4
16156: PUSH
16157: LD_INT 5
16159: PUSH
16160: LD_INT 7
16162: PUSH
16163: LD_INT 11
16165: PUSH
16166: LD_INT 12
16168: PUSH
16169: LD_INT 15
16171: PUSH
16172: LD_INT 16
16174: PUSH
16175: LD_INT 20
16177: PUSH
16178: LD_INT 21
16180: PUSH
16181: LD_INT 22
16183: PUSH
16184: LD_INT 23
16186: PUSH
16187: LD_INT 25
16189: PUSH
16190: LD_INT 26
16192: PUSH
16193: LD_INT 30
16195: PUSH
16196: LD_INT 31
16198: PUSH
16199: LD_INT 32
16201: PUSH
16202: LD_INT 33
16204: PUSH
16205: LD_INT 34
16207: PUSH
16208: EMPTY
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: LIST
16228: PUSH
16229: LD_INT 101
16231: PUSH
16232: LD_INT 102
16234: PUSH
16235: LD_INT 103
16237: PUSH
16238: LD_INT 106
16240: PUSH
16241: LD_INT 108
16243: PUSH
16244: LD_INT 112
16246: PUSH
16247: LD_INT 113
16249: PUSH
16250: LD_INT 114
16252: PUSH
16253: EMPTY
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: PUSH
16263: EMPTY
16264: LIST
16265: LIST
16266: ST_TO_ADDR
16267: GO 16862
16269: LD_INT 17
16271: DOUBLE
16272: EQUAL
16273: IFTRUE 16277
16275: GO 16489
16277: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
16278: LD_ADDR_VAR 0 1
16282: PUSH
16283: LD_INT 1
16285: PUSH
16286: LD_INT 2
16288: PUSH
16289: LD_INT 3
16291: PUSH
16292: LD_INT 4
16294: PUSH
16295: LD_INT 5
16297: PUSH
16298: LD_INT 6
16300: PUSH
16301: LD_INT 7
16303: PUSH
16304: LD_INT 8
16306: PUSH
16307: LD_INT 9
16309: PUSH
16310: LD_INT 10
16312: PUSH
16313: LD_INT 11
16315: PUSH
16316: LD_INT 12
16318: PUSH
16319: LD_INT 13
16321: PUSH
16322: LD_INT 14
16324: PUSH
16325: LD_INT 15
16327: PUSH
16328: LD_INT 16
16330: PUSH
16331: LD_INT 17
16333: PUSH
16334: LD_INT 18
16336: PUSH
16337: LD_INT 19
16339: PUSH
16340: LD_INT 20
16342: PUSH
16343: LD_INT 21
16345: PUSH
16346: LD_INT 22
16348: PUSH
16349: LD_INT 23
16351: PUSH
16352: LD_INT 24
16354: PUSH
16355: LD_INT 25
16357: PUSH
16358: LD_INT 26
16360: PUSH
16361: LD_INT 27
16363: PUSH
16364: LD_INT 28
16366: PUSH
16367: LD_INT 29
16369: PUSH
16370: LD_INT 30
16372: PUSH
16373: LD_INT 31
16375: PUSH
16376: LD_INT 32
16378: PUSH
16379: LD_INT 33
16381: PUSH
16382: LD_INT 34
16384: PUSH
16385: LD_INT 36
16387: PUSH
16388: EMPTY
16389: LIST
16390: LIST
16391: LIST
16392: LIST
16393: LIST
16394: LIST
16395: LIST
16396: LIST
16397: LIST
16398: LIST
16399: LIST
16400: LIST
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: LIST
16406: LIST
16407: LIST
16408: LIST
16409: LIST
16410: LIST
16411: LIST
16412: LIST
16413: LIST
16414: LIST
16415: LIST
16416: LIST
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: PUSH
16425: LD_INT 101
16427: PUSH
16428: LD_INT 102
16430: PUSH
16431: LD_INT 103
16433: PUSH
16434: LD_INT 104
16436: PUSH
16437: LD_INT 105
16439: PUSH
16440: LD_INT 106
16442: PUSH
16443: LD_INT 107
16445: PUSH
16446: LD_INT 108
16448: PUSH
16449: LD_INT 109
16451: PUSH
16452: LD_INT 110
16454: PUSH
16455: LD_INT 111
16457: PUSH
16458: LD_INT 112
16460: PUSH
16461: LD_INT 113
16463: PUSH
16464: LD_INT 114
16466: PUSH
16467: EMPTY
16468: LIST
16469: LIST
16470: LIST
16471: LIST
16472: LIST
16473: LIST
16474: LIST
16475: LIST
16476: LIST
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: ST_TO_ADDR
16487: GO 16862
16489: LD_INT 18
16491: DOUBLE
16492: EQUAL
16493: IFTRUE 16497
16495: GO 16633
16497: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
16498: LD_ADDR_VAR 0 1
16502: PUSH
16503: LD_INT 2
16505: PUSH
16506: LD_INT 4
16508: PUSH
16509: LD_INT 5
16511: PUSH
16512: LD_INT 7
16514: PUSH
16515: LD_INT 11
16517: PUSH
16518: LD_INT 12
16520: PUSH
16521: LD_INT 15
16523: PUSH
16524: LD_INT 16
16526: PUSH
16527: LD_INT 20
16529: PUSH
16530: LD_INT 21
16532: PUSH
16533: LD_INT 22
16535: PUSH
16536: LD_INT 23
16538: PUSH
16539: LD_INT 25
16541: PUSH
16542: LD_INT 26
16544: PUSH
16545: LD_INT 30
16547: PUSH
16548: LD_INT 31
16550: PUSH
16551: LD_INT 32
16553: PUSH
16554: LD_INT 33
16556: PUSH
16557: LD_INT 34
16559: PUSH
16560: LD_INT 35
16562: PUSH
16563: LD_INT 36
16565: PUSH
16566: EMPTY
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: PUSH
16589: LD_INT 101
16591: PUSH
16592: LD_INT 102
16594: PUSH
16595: LD_INT 103
16597: PUSH
16598: LD_INT 106
16600: PUSH
16601: LD_INT 108
16603: PUSH
16604: LD_INT 112
16606: PUSH
16607: LD_INT 113
16609: PUSH
16610: LD_INT 114
16612: PUSH
16613: LD_INT 115
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: LIST
16623: LIST
16624: LIST
16625: LIST
16626: PUSH
16627: EMPTY
16628: LIST
16629: LIST
16630: ST_TO_ADDR
16631: GO 16862
16633: LD_INT 19
16635: DOUBLE
16636: EQUAL
16637: IFTRUE 16641
16639: GO 16861
16641: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
16642: LD_ADDR_VAR 0 1
16646: PUSH
16647: LD_INT 1
16649: PUSH
16650: LD_INT 2
16652: PUSH
16653: LD_INT 3
16655: PUSH
16656: LD_INT 4
16658: PUSH
16659: LD_INT 5
16661: PUSH
16662: LD_INT 6
16664: PUSH
16665: LD_INT 7
16667: PUSH
16668: LD_INT 8
16670: PUSH
16671: LD_INT 9
16673: PUSH
16674: LD_INT 10
16676: PUSH
16677: LD_INT 11
16679: PUSH
16680: LD_INT 12
16682: PUSH
16683: LD_INT 13
16685: PUSH
16686: LD_INT 14
16688: PUSH
16689: LD_INT 15
16691: PUSH
16692: LD_INT 16
16694: PUSH
16695: LD_INT 17
16697: PUSH
16698: LD_INT 18
16700: PUSH
16701: LD_INT 19
16703: PUSH
16704: LD_INT 20
16706: PUSH
16707: LD_INT 21
16709: PUSH
16710: LD_INT 22
16712: PUSH
16713: LD_INT 23
16715: PUSH
16716: LD_INT 24
16718: PUSH
16719: LD_INT 25
16721: PUSH
16722: LD_INT 26
16724: PUSH
16725: LD_INT 27
16727: PUSH
16728: LD_INT 28
16730: PUSH
16731: LD_INT 29
16733: PUSH
16734: LD_INT 30
16736: PUSH
16737: LD_INT 31
16739: PUSH
16740: LD_INT 32
16742: PUSH
16743: LD_INT 33
16745: PUSH
16746: LD_INT 34
16748: PUSH
16749: LD_INT 35
16751: PUSH
16752: LD_INT 36
16754: PUSH
16755: EMPTY
16756: LIST
16757: LIST
16758: LIST
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: LIST
16765: LIST
16766: LIST
16767: LIST
16768: LIST
16769: LIST
16770: LIST
16771: LIST
16772: LIST
16773: LIST
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: PUSH
16793: LD_INT 101
16795: PUSH
16796: LD_INT 102
16798: PUSH
16799: LD_INT 103
16801: PUSH
16802: LD_INT 104
16804: PUSH
16805: LD_INT 105
16807: PUSH
16808: LD_INT 106
16810: PUSH
16811: LD_INT 107
16813: PUSH
16814: LD_INT 108
16816: PUSH
16817: LD_INT 109
16819: PUSH
16820: LD_INT 110
16822: PUSH
16823: LD_INT 111
16825: PUSH
16826: LD_INT 112
16828: PUSH
16829: LD_INT 113
16831: PUSH
16832: LD_INT 114
16834: PUSH
16835: LD_INT 115
16837: PUSH
16838: EMPTY
16839: LIST
16840: LIST
16841: LIST
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: LIST
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: PUSH
16855: EMPTY
16856: LIST
16857: LIST
16858: ST_TO_ADDR
16859: GO 16862
16861: POP
// end else
16862: GO 17081
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
16864: LD_ADDR_VAR 0 1
16868: PUSH
16869: LD_INT 1
16871: PUSH
16872: LD_INT 2
16874: PUSH
16875: LD_INT 3
16877: PUSH
16878: LD_INT 4
16880: PUSH
16881: LD_INT 5
16883: PUSH
16884: LD_INT 6
16886: PUSH
16887: LD_INT 7
16889: PUSH
16890: LD_INT 8
16892: PUSH
16893: LD_INT 9
16895: PUSH
16896: LD_INT 10
16898: PUSH
16899: LD_INT 11
16901: PUSH
16902: LD_INT 12
16904: PUSH
16905: LD_INT 13
16907: PUSH
16908: LD_INT 14
16910: PUSH
16911: LD_INT 15
16913: PUSH
16914: LD_INT 16
16916: PUSH
16917: LD_INT 17
16919: PUSH
16920: LD_INT 18
16922: PUSH
16923: LD_INT 19
16925: PUSH
16926: LD_INT 20
16928: PUSH
16929: LD_INT 21
16931: PUSH
16932: LD_INT 22
16934: PUSH
16935: LD_INT 23
16937: PUSH
16938: LD_INT 24
16940: PUSH
16941: LD_INT 25
16943: PUSH
16944: LD_INT 26
16946: PUSH
16947: LD_INT 27
16949: PUSH
16950: LD_INT 28
16952: PUSH
16953: LD_INT 29
16955: PUSH
16956: LD_INT 30
16958: PUSH
16959: LD_INT 31
16961: PUSH
16962: LD_INT 32
16964: PUSH
16965: LD_INT 33
16967: PUSH
16968: LD_INT 34
16970: PUSH
16971: LD_INT 35
16973: PUSH
16974: LD_INT 36
16976: PUSH
16977: EMPTY
16978: LIST
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: LIST
16984: LIST
16985: LIST
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: LIST
16997: LIST
16998: LIST
16999: LIST
17000: LIST
17001: LIST
17002: LIST
17003: LIST
17004: LIST
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: PUSH
17015: LD_INT 101
17017: PUSH
17018: LD_INT 102
17020: PUSH
17021: LD_INT 103
17023: PUSH
17024: LD_INT 104
17026: PUSH
17027: LD_INT 105
17029: PUSH
17030: LD_INT 106
17032: PUSH
17033: LD_INT 107
17035: PUSH
17036: LD_INT 108
17038: PUSH
17039: LD_INT 109
17041: PUSH
17042: LD_INT 110
17044: PUSH
17045: LD_INT 111
17047: PUSH
17048: LD_INT 112
17050: PUSH
17051: LD_INT 113
17053: PUSH
17054: LD_INT 114
17056: PUSH
17057: LD_INT 115
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: LIST
17064: LIST
17065: LIST
17066: LIST
17067: LIST
17068: LIST
17069: LIST
17070: LIST
17071: LIST
17072: LIST
17073: LIST
17074: LIST
17075: LIST
17076: PUSH
17077: EMPTY
17078: LIST
17079: LIST
17080: ST_TO_ADDR
// if result then
17081: LD_VAR 0 1
17085: IFFALSE 17374
// begin normal :=  ;
17087: LD_ADDR_VAR 0 3
17091: PUSH
17092: LD_STRING 
17094: ST_TO_ADDR
// hardcore :=  ;
17095: LD_ADDR_VAR 0 4
17099: PUSH
17100: LD_STRING 
17102: ST_TO_ADDR
// for i = 1 to normalCounter do
17103: LD_ADDR_VAR 0 5
17107: PUSH
17108: DOUBLE
17109: LD_INT 1
17111: DEC
17112: ST_TO_ADDR
17113: LD_EXP 48
17117: PUSH
17118: FOR_TO
17119: IFFALSE 17220
// begin tmp := 0 ;
17121: LD_ADDR_VAR 0 2
17125: PUSH
17126: LD_STRING 0
17128: ST_TO_ADDR
// if result [ 1 ] then
17129: LD_VAR 0 1
17133: PUSH
17134: LD_INT 1
17136: ARRAY
17137: IFFALSE 17202
// if result [ 1 ] [ 1 ] = i then
17139: LD_VAR 0 1
17143: PUSH
17144: LD_INT 1
17146: ARRAY
17147: PUSH
17148: LD_INT 1
17150: ARRAY
17151: PUSH
17152: LD_VAR 0 5
17156: EQUAL
17157: IFFALSE 17202
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
17159: LD_ADDR_VAR 0 1
17163: PUSH
17164: LD_VAR 0 1
17168: PPUSH
17169: LD_INT 1
17171: PPUSH
17172: LD_VAR 0 1
17176: PUSH
17177: LD_INT 1
17179: ARRAY
17180: PPUSH
17181: LD_INT 1
17183: PPUSH
17184: CALL_OW 3
17188: PPUSH
17189: CALL_OW 1
17193: ST_TO_ADDR
// tmp := 1 ;
17194: LD_ADDR_VAR 0 2
17198: PUSH
17199: LD_STRING 1
17201: ST_TO_ADDR
// end ; normal := normal & tmp ;
17202: LD_ADDR_VAR 0 3
17206: PUSH
17207: LD_VAR 0 3
17211: PUSH
17212: LD_VAR 0 2
17216: STR
17217: ST_TO_ADDR
// end ;
17218: GO 17118
17220: POP
17221: POP
// for i = 1 to hardcoreCounter do
17222: LD_ADDR_VAR 0 5
17226: PUSH
17227: DOUBLE
17228: LD_INT 1
17230: DEC
17231: ST_TO_ADDR
17232: LD_EXP 49
17236: PUSH
17237: FOR_TO
17238: IFFALSE 17343
// begin tmp := 0 ;
17240: LD_ADDR_VAR 0 2
17244: PUSH
17245: LD_STRING 0
17247: ST_TO_ADDR
// if result [ 2 ] then
17248: LD_VAR 0 1
17252: PUSH
17253: LD_INT 2
17255: ARRAY
17256: IFFALSE 17325
// if result [ 2 ] [ 1 ] = 100 + i then
17258: LD_VAR 0 1
17262: PUSH
17263: LD_INT 2
17265: ARRAY
17266: PUSH
17267: LD_INT 1
17269: ARRAY
17270: PUSH
17271: LD_INT 100
17273: PUSH
17274: LD_VAR 0 5
17278: PLUS
17279: EQUAL
17280: IFFALSE 17325
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17282: LD_ADDR_VAR 0 1
17286: PUSH
17287: LD_VAR 0 1
17291: PPUSH
17292: LD_INT 2
17294: PPUSH
17295: LD_VAR 0 1
17299: PUSH
17300: LD_INT 2
17302: ARRAY
17303: PPUSH
17304: LD_INT 1
17306: PPUSH
17307: CALL_OW 3
17311: PPUSH
17312: CALL_OW 1
17316: ST_TO_ADDR
// tmp := 1 ;
17317: LD_ADDR_VAR 0 2
17321: PUSH
17322: LD_STRING 1
17324: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17325: LD_ADDR_VAR 0 4
17329: PUSH
17330: LD_VAR 0 4
17334: PUSH
17335: LD_VAR 0 2
17339: STR
17340: ST_TO_ADDR
// end ;
17341: GO 17237
17343: POP
17344: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
17345: LD_STRING getStreamItemsFromMission("
17347: PUSH
17348: LD_VAR 0 3
17352: STR
17353: PUSH
17354: LD_STRING ","
17356: STR
17357: PUSH
17358: LD_VAR 0 4
17362: STR
17363: PUSH
17364: LD_STRING ")
17366: STR
17367: PPUSH
17368: CALL_OW 559
// end else
17372: GO 17381
// ToLua ( getStreamItemsFromMission("","") ) ;
17374: LD_STRING getStreamItemsFromMission("","")
17376: PPUSH
17377: CALL_OW 559
// end ;
17381: LD_VAR 0 1
17385: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17386: LD_EXP 47
17390: PUSH
17391: LD_EXP 52
17395: AND
17396: IFFALSE 17520
17398: GO 17400
17400: DISABLE
17401: LD_INT 0
17403: PPUSH
17404: PPUSH
// begin enable ;
17405: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17406: LD_ADDR_VAR 0 2
17410: PUSH
17411: LD_INT 22
17413: PUSH
17414: LD_OWVAR 2
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: PUSH
17423: LD_INT 2
17425: PUSH
17426: LD_INT 34
17428: PUSH
17429: LD_INT 7
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: PUSH
17436: LD_INT 34
17438: PUSH
17439: LD_INT 45
17441: PUSH
17442: EMPTY
17443: LIST
17444: LIST
17445: PUSH
17446: LD_INT 34
17448: PUSH
17449: LD_INT 28
17451: PUSH
17452: EMPTY
17453: LIST
17454: LIST
17455: PUSH
17456: LD_INT 34
17458: PUSH
17459: LD_INT 47
17461: PUSH
17462: EMPTY
17463: LIST
17464: LIST
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: PUSH
17473: EMPTY
17474: LIST
17475: LIST
17476: PPUSH
17477: CALL_OW 69
17481: ST_TO_ADDR
// if not tmp then
17482: LD_VAR 0 2
17486: NOT
17487: IFFALSE 17491
// exit ;
17489: GO 17520
// for i in tmp do
17491: LD_ADDR_VAR 0 1
17495: PUSH
17496: LD_VAR 0 2
17500: PUSH
17501: FOR_IN
17502: IFFALSE 17518
// begin SetLives ( i , 0 ) ;
17504: LD_VAR 0 1
17508: PPUSH
17509: LD_INT 0
17511: PPUSH
17512: CALL_OW 234
// end ;
17516: GO 17501
17518: POP
17519: POP
// end ;
17520: PPOPN 2
17522: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17523: LD_EXP 47
17527: PUSH
17528: LD_EXP 53
17532: AND
17533: IFFALSE 17617
17535: GO 17537
17537: DISABLE
17538: LD_INT 0
17540: PPUSH
17541: PPUSH
// begin enable ;
17542: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17543: LD_ADDR_VAR 0 2
17547: PUSH
17548: LD_INT 22
17550: PUSH
17551: LD_OWVAR 2
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PUSH
17560: LD_INT 32
17562: PUSH
17563: LD_INT 3
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: PPUSH
17574: CALL_OW 69
17578: ST_TO_ADDR
// if not tmp then
17579: LD_VAR 0 2
17583: NOT
17584: IFFALSE 17588
// exit ;
17586: GO 17617
// for i in tmp do
17588: LD_ADDR_VAR 0 1
17592: PUSH
17593: LD_VAR 0 2
17597: PUSH
17598: FOR_IN
17599: IFFALSE 17615
// begin SetLives ( i , 0 ) ;
17601: LD_VAR 0 1
17605: PPUSH
17606: LD_INT 0
17608: PPUSH
17609: CALL_OW 234
// end ;
17613: GO 17598
17615: POP
17616: POP
// end ;
17617: PPOPN 2
17619: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17620: LD_EXP 47
17624: PUSH
17625: LD_EXP 50
17629: AND
17630: IFFALSE 17723
17632: GO 17634
17634: DISABLE
17635: LD_INT 0
17637: PPUSH
// begin enable ;
17638: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17639: LD_ADDR_VAR 0 1
17643: PUSH
17644: LD_INT 22
17646: PUSH
17647: LD_OWVAR 2
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: PUSH
17656: LD_INT 2
17658: PUSH
17659: LD_INT 25
17661: PUSH
17662: LD_INT 5
17664: PUSH
17665: EMPTY
17666: LIST
17667: LIST
17668: PUSH
17669: LD_INT 25
17671: PUSH
17672: LD_INT 9
17674: PUSH
17675: EMPTY
17676: LIST
17677: LIST
17678: PUSH
17679: LD_INT 25
17681: PUSH
17682: LD_INT 8
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: LIST
17693: LIST
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: PPUSH
17699: CALL_OW 69
17703: PUSH
17704: FOR_IN
17705: IFFALSE 17721
// begin SetClass ( i , 1 ) ;
17707: LD_VAR 0 1
17711: PPUSH
17712: LD_INT 1
17714: PPUSH
17715: CALL_OW 336
// end ;
17719: GO 17704
17721: POP
17722: POP
// end ;
17723: PPOPN 1
17725: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17726: LD_EXP 47
17730: PUSH
17731: LD_EXP 51
17735: AND
17736: PUSH
17737: LD_OWVAR 65
17741: PUSH
17742: LD_INT 7
17744: LESS
17745: AND
17746: IFFALSE 17760
17748: GO 17750
17750: DISABLE
// begin enable ;
17751: ENABLE
// game_speed := 7 ;
17752: LD_ADDR_OWVAR 65
17756: PUSH
17757: LD_INT 7
17759: ST_TO_ADDR
// end ;
17760: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17761: LD_EXP 47
17765: PUSH
17766: LD_EXP 54
17770: AND
17771: IFFALSE 17973
17773: GO 17775
17775: DISABLE
17776: LD_INT 0
17778: PPUSH
17779: PPUSH
17780: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17781: LD_ADDR_VAR 0 3
17785: PUSH
17786: LD_INT 81
17788: PUSH
17789: LD_OWVAR 2
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: PUSH
17798: LD_INT 21
17800: PUSH
17801: LD_INT 1
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: PUSH
17808: EMPTY
17809: LIST
17810: LIST
17811: PPUSH
17812: CALL_OW 69
17816: ST_TO_ADDR
// if not tmp then
17817: LD_VAR 0 3
17821: NOT
17822: IFFALSE 17826
// exit ;
17824: GO 17973
// if tmp > 5 then
17826: LD_VAR 0 3
17830: PUSH
17831: LD_INT 5
17833: GREATER
17834: IFFALSE 17846
// k := 5 else
17836: LD_ADDR_VAR 0 2
17840: PUSH
17841: LD_INT 5
17843: ST_TO_ADDR
17844: GO 17856
// k := tmp ;
17846: LD_ADDR_VAR 0 2
17850: PUSH
17851: LD_VAR 0 3
17855: ST_TO_ADDR
// for i := 1 to k do
17856: LD_ADDR_VAR 0 1
17860: PUSH
17861: DOUBLE
17862: LD_INT 1
17864: DEC
17865: ST_TO_ADDR
17866: LD_VAR 0 2
17870: PUSH
17871: FOR_TO
17872: IFFALSE 17971
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17874: LD_VAR 0 3
17878: PUSH
17879: LD_VAR 0 1
17883: ARRAY
17884: PPUSH
17885: LD_VAR 0 1
17889: PUSH
17890: LD_INT 4
17892: MOD
17893: PUSH
17894: LD_INT 1
17896: PLUS
17897: PPUSH
17898: CALL_OW 259
17902: PUSH
17903: LD_INT 10
17905: LESS
17906: IFFALSE 17969
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17908: LD_VAR 0 3
17912: PUSH
17913: LD_VAR 0 1
17917: ARRAY
17918: PPUSH
17919: LD_VAR 0 1
17923: PUSH
17924: LD_INT 4
17926: MOD
17927: PUSH
17928: LD_INT 1
17930: PLUS
17931: PPUSH
17932: LD_VAR 0 3
17936: PUSH
17937: LD_VAR 0 1
17941: ARRAY
17942: PPUSH
17943: LD_VAR 0 1
17947: PUSH
17948: LD_INT 4
17950: MOD
17951: PUSH
17952: LD_INT 1
17954: PLUS
17955: PPUSH
17956: CALL_OW 259
17960: PUSH
17961: LD_INT 1
17963: PLUS
17964: PPUSH
17965: CALL_OW 237
17969: GO 17871
17971: POP
17972: POP
// end ;
17973: PPOPN 3
17975: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17976: LD_EXP 47
17980: PUSH
17981: LD_EXP 55
17985: AND
17986: IFFALSE 18006
17988: GO 17990
17990: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17991: LD_INT 4
17993: PPUSH
17994: LD_OWVAR 2
17998: PPUSH
17999: LD_INT 0
18001: PPUSH
18002: CALL_OW 324
18006: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18007: LD_EXP 47
18011: PUSH
18012: LD_EXP 84
18016: AND
18017: IFFALSE 18037
18019: GO 18021
18021: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18022: LD_INT 19
18024: PPUSH
18025: LD_OWVAR 2
18029: PPUSH
18030: LD_INT 0
18032: PPUSH
18033: CALL_OW 324
18037: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18038: LD_EXP 47
18042: PUSH
18043: LD_EXP 56
18047: AND
18048: IFFALSE 18150
18050: GO 18052
18052: DISABLE
18053: LD_INT 0
18055: PPUSH
18056: PPUSH
// begin enable ;
18057: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18058: LD_ADDR_VAR 0 2
18062: PUSH
18063: LD_INT 22
18065: PUSH
18066: LD_OWVAR 2
18070: PUSH
18071: EMPTY
18072: LIST
18073: LIST
18074: PUSH
18075: LD_INT 2
18077: PUSH
18078: LD_INT 34
18080: PUSH
18081: LD_INT 11
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PUSH
18088: LD_INT 34
18090: PUSH
18091: LD_INT 30
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: PUSH
18098: EMPTY
18099: LIST
18100: LIST
18101: LIST
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: PPUSH
18107: CALL_OW 69
18111: ST_TO_ADDR
// if not tmp then
18112: LD_VAR 0 2
18116: NOT
18117: IFFALSE 18121
// exit ;
18119: GO 18150
// for i in tmp do
18121: LD_ADDR_VAR 0 1
18125: PUSH
18126: LD_VAR 0 2
18130: PUSH
18131: FOR_IN
18132: IFFALSE 18148
// begin SetLives ( i , 0 ) ;
18134: LD_VAR 0 1
18138: PPUSH
18139: LD_INT 0
18141: PPUSH
18142: CALL_OW 234
// end ;
18146: GO 18131
18148: POP
18149: POP
// end ;
18150: PPOPN 2
18152: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18153: LD_EXP 47
18157: PUSH
18158: LD_EXP 57
18162: AND
18163: IFFALSE 18183
18165: GO 18167
18167: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18168: LD_INT 32
18170: PPUSH
18171: LD_OWVAR 2
18175: PPUSH
18176: LD_INT 0
18178: PPUSH
18179: CALL_OW 324
18183: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18184: LD_EXP 47
18188: PUSH
18189: LD_EXP 58
18193: AND
18194: IFFALSE 18375
18196: GO 18198
18198: DISABLE
18199: LD_INT 0
18201: PPUSH
18202: PPUSH
18203: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18204: LD_ADDR_VAR 0 2
18208: PUSH
18209: LD_INT 22
18211: PUSH
18212: LD_OWVAR 2
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: PUSH
18221: LD_INT 33
18223: PUSH
18224: LD_INT 3
18226: PUSH
18227: EMPTY
18228: LIST
18229: LIST
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: PPUSH
18235: CALL_OW 69
18239: ST_TO_ADDR
// if not tmp then
18240: LD_VAR 0 2
18244: NOT
18245: IFFALSE 18249
// exit ;
18247: GO 18375
// side := 0 ;
18249: LD_ADDR_VAR 0 3
18253: PUSH
18254: LD_INT 0
18256: ST_TO_ADDR
// for i := 1 to 8 do
18257: LD_ADDR_VAR 0 1
18261: PUSH
18262: DOUBLE
18263: LD_INT 1
18265: DEC
18266: ST_TO_ADDR
18267: LD_INT 8
18269: PUSH
18270: FOR_TO
18271: IFFALSE 18319
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18273: LD_OWVAR 2
18277: PUSH
18278: LD_VAR 0 1
18282: NONEQUAL
18283: PUSH
18284: LD_OWVAR 2
18288: PPUSH
18289: LD_VAR 0 1
18293: PPUSH
18294: CALL_OW 81
18298: PUSH
18299: LD_INT 2
18301: EQUAL
18302: AND
18303: IFFALSE 18317
// begin side := i ;
18305: LD_ADDR_VAR 0 3
18309: PUSH
18310: LD_VAR 0 1
18314: ST_TO_ADDR
// break ;
18315: GO 18319
// end ;
18317: GO 18270
18319: POP
18320: POP
// if not side then
18321: LD_VAR 0 3
18325: NOT
18326: IFFALSE 18330
// exit ;
18328: GO 18375
// for i := 1 to tmp do
18330: LD_ADDR_VAR 0 1
18334: PUSH
18335: DOUBLE
18336: LD_INT 1
18338: DEC
18339: ST_TO_ADDR
18340: LD_VAR 0 2
18344: PUSH
18345: FOR_TO
18346: IFFALSE 18373
// if Prob ( 60 ) then
18348: LD_INT 60
18350: PPUSH
18351: CALL_OW 13
18355: IFFALSE 18371
// SetSide ( i , side ) ;
18357: LD_VAR 0 1
18361: PPUSH
18362: LD_VAR 0 3
18366: PPUSH
18367: CALL_OW 235
18371: GO 18345
18373: POP
18374: POP
// end ;
18375: PPOPN 3
18377: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18378: LD_EXP 47
18382: PUSH
18383: LD_EXP 60
18387: AND
18388: IFFALSE 18507
18390: GO 18392
18392: DISABLE
18393: LD_INT 0
18395: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18396: LD_ADDR_VAR 0 1
18400: PUSH
18401: LD_INT 22
18403: PUSH
18404: LD_OWVAR 2
18408: PUSH
18409: EMPTY
18410: LIST
18411: LIST
18412: PUSH
18413: LD_INT 21
18415: PUSH
18416: LD_INT 1
18418: PUSH
18419: EMPTY
18420: LIST
18421: LIST
18422: PUSH
18423: LD_INT 3
18425: PUSH
18426: LD_INT 23
18428: PUSH
18429: LD_INT 0
18431: PUSH
18432: EMPTY
18433: LIST
18434: LIST
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: LIST
18444: PPUSH
18445: CALL_OW 69
18449: PUSH
18450: FOR_IN
18451: IFFALSE 18505
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18453: LD_VAR 0 1
18457: PPUSH
18458: CALL_OW 257
18462: PUSH
18463: LD_INT 1
18465: PUSH
18466: LD_INT 2
18468: PUSH
18469: LD_INT 3
18471: PUSH
18472: LD_INT 4
18474: PUSH
18475: EMPTY
18476: LIST
18477: LIST
18478: LIST
18479: LIST
18480: IN
18481: IFFALSE 18503
// SetClass ( un , rand ( 1 , 4 ) ) ;
18483: LD_VAR 0 1
18487: PPUSH
18488: LD_INT 1
18490: PPUSH
18491: LD_INT 4
18493: PPUSH
18494: CALL_OW 12
18498: PPUSH
18499: CALL_OW 336
18503: GO 18450
18505: POP
18506: POP
// end ;
18507: PPOPN 1
18509: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18510: LD_EXP 47
18514: PUSH
18515: LD_EXP 59
18519: AND
18520: IFFALSE 18599
18522: GO 18524
18524: DISABLE
18525: LD_INT 0
18527: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18528: LD_ADDR_VAR 0 1
18532: PUSH
18533: LD_INT 22
18535: PUSH
18536: LD_OWVAR 2
18540: PUSH
18541: EMPTY
18542: LIST
18543: LIST
18544: PUSH
18545: LD_INT 21
18547: PUSH
18548: LD_INT 3
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: PPUSH
18559: CALL_OW 69
18563: ST_TO_ADDR
// if not tmp then
18564: LD_VAR 0 1
18568: NOT
18569: IFFALSE 18573
// exit ;
18571: GO 18599
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18573: LD_VAR 0 1
18577: PUSH
18578: LD_INT 1
18580: PPUSH
18581: LD_VAR 0 1
18585: PPUSH
18586: CALL_OW 12
18590: ARRAY
18591: PPUSH
18592: LD_INT 100
18594: PPUSH
18595: CALL_OW 234
// end ;
18599: PPOPN 1
18601: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18602: LD_EXP 47
18606: PUSH
18607: LD_EXP 61
18611: AND
18612: IFFALSE 18710
18614: GO 18616
18616: DISABLE
18617: LD_INT 0
18619: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18620: LD_ADDR_VAR 0 1
18624: PUSH
18625: LD_INT 22
18627: PUSH
18628: LD_OWVAR 2
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: PUSH
18637: LD_INT 21
18639: PUSH
18640: LD_INT 1
18642: PUSH
18643: EMPTY
18644: LIST
18645: LIST
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: PPUSH
18651: CALL_OW 69
18655: ST_TO_ADDR
// if not tmp then
18656: LD_VAR 0 1
18660: NOT
18661: IFFALSE 18665
// exit ;
18663: GO 18710
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18665: LD_VAR 0 1
18669: PUSH
18670: LD_INT 1
18672: PPUSH
18673: LD_VAR 0 1
18677: PPUSH
18678: CALL_OW 12
18682: ARRAY
18683: PPUSH
18684: LD_INT 1
18686: PPUSH
18687: LD_INT 4
18689: PPUSH
18690: CALL_OW 12
18694: PPUSH
18695: LD_INT 3000
18697: PPUSH
18698: LD_INT 9000
18700: PPUSH
18701: CALL_OW 12
18705: PPUSH
18706: CALL_OW 492
// end ;
18710: PPOPN 1
18712: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18713: LD_EXP 47
18717: PUSH
18718: LD_EXP 62
18722: AND
18723: IFFALSE 18743
18725: GO 18727
18727: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18728: LD_INT 1
18730: PPUSH
18731: LD_OWVAR 2
18735: PPUSH
18736: LD_INT 0
18738: PPUSH
18739: CALL_OW 324
18743: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18744: LD_EXP 47
18748: PUSH
18749: LD_EXP 63
18753: AND
18754: IFFALSE 18837
18756: GO 18758
18758: DISABLE
18759: LD_INT 0
18761: PPUSH
18762: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18763: LD_ADDR_VAR 0 2
18767: PUSH
18768: LD_INT 22
18770: PUSH
18771: LD_OWVAR 2
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: PUSH
18780: LD_INT 21
18782: PUSH
18783: LD_INT 3
18785: PUSH
18786: EMPTY
18787: LIST
18788: LIST
18789: PUSH
18790: EMPTY
18791: LIST
18792: LIST
18793: PPUSH
18794: CALL_OW 69
18798: ST_TO_ADDR
// if not tmp then
18799: LD_VAR 0 2
18803: NOT
18804: IFFALSE 18808
// exit ;
18806: GO 18837
// for i in tmp do
18808: LD_ADDR_VAR 0 1
18812: PUSH
18813: LD_VAR 0 2
18817: PUSH
18818: FOR_IN
18819: IFFALSE 18835
// SetBLevel ( i , 10 ) ;
18821: LD_VAR 0 1
18825: PPUSH
18826: LD_INT 10
18828: PPUSH
18829: CALL_OW 241
18833: GO 18818
18835: POP
18836: POP
// end ;
18837: PPOPN 2
18839: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18840: LD_EXP 47
18844: PUSH
18845: LD_EXP 64
18849: AND
18850: IFFALSE 18961
18852: GO 18854
18854: DISABLE
18855: LD_INT 0
18857: PPUSH
18858: PPUSH
18859: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18860: LD_ADDR_VAR 0 3
18864: PUSH
18865: LD_INT 22
18867: PUSH
18868: LD_OWVAR 2
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: PUSH
18877: LD_INT 25
18879: PUSH
18880: LD_INT 1
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: PPUSH
18891: CALL_OW 69
18895: ST_TO_ADDR
// if not tmp then
18896: LD_VAR 0 3
18900: NOT
18901: IFFALSE 18905
// exit ;
18903: GO 18961
// un := tmp [ rand ( 1 , tmp ) ] ;
18905: LD_ADDR_VAR 0 2
18909: PUSH
18910: LD_VAR 0 3
18914: PUSH
18915: LD_INT 1
18917: PPUSH
18918: LD_VAR 0 3
18922: PPUSH
18923: CALL_OW 12
18927: ARRAY
18928: ST_TO_ADDR
// if Crawls ( un ) then
18929: LD_VAR 0 2
18933: PPUSH
18934: CALL_OW 318
18938: IFFALSE 18949
// ComWalk ( un ) ;
18940: LD_VAR 0 2
18944: PPUSH
18945: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18949: LD_VAR 0 2
18953: PPUSH
18954: LD_INT 5
18956: PPUSH
18957: CALL_OW 336
// end ;
18961: PPOPN 3
18963: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
18964: LD_EXP 47
18968: PUSH
18969: LD_EXP 65
18973: AND
18974: PUSH
18975: LD_OWVAR 67
18979: PUSH
18980: LD_INT 3
18982: LESS
18983: AND
18984: IFFALSE 19003
18986: GO 18988
18988: DISABLE
// Difficulty := Difficulty + 1 ;
18989: LD_ADDR_OWVAR 67
18993: PUSH
18994: LD_OWVAR 67
18998: PUSH
18999: LD_INT 1
19001: PLUS
19002: ST_TO_ADDR
19003: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19004: LD_EXP 47
19008: PUSH
19009: LD_EXP 66
19013: AND
19014: IFFALSE 19117
19016: GO 19018
19018: DISABLE
19019: LD_INT 0
19021: PPUSH
// begin for i := 1 to 5 do
19022: LD_ADDR_VAR 0 1
19026: PUSH
19027: DOUBLE
19028: LD_INT 1
19030: DEC
19031: ST_TO_ADDR
19032: LD_INT 5
19034: PUSH
19035: FOR_TO
19036: IFFALSE 19115
// begin uc_nation := nation_nature ;
19038: LD_ADDR_OWVAR 21
19042: PUSH
19043: LD_INT 0
19045: ST_TO_ADDR
// uc_side := 0 ;
19046: LD_ADDR_OWVAR 20
19050: PUSH
19051: LD_INT 0
19053: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19054: LD_ADDR_OWVAR 29
19058: PUSH
19059: LD_INT 12
19061: PUSH
19062: LD_INT 12
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: ST_TO_ADDR
// hc_agressivity := 20 ;
19069: LD_ADDR_OWVAR 35
19073: PUSH
19074: LD_INT 20
19076: ST_TO_ADDR
// hc_class := class_tiger ;
19077: LD_ADDR_OWVAR 28
19081: PUSH
19082: LD_INT 14
19084: ST_TO_ADDR
// hc_gallery :=  ;
19085: LD_ADDR_OWVAR 33
19089: PUSH
19090: LD_STRING 
19092: ST_TO_ADDR
// hc_name :=  ;
19093: LD_ADDR_OWVAR 26
19097: PUSH
19098: LD_STRING 
19100: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19101: CALL_OW 44
19105: PPUSH
19106: LD_INT 0
19108: PPUSH
19109: CALL_OW 51
// end ;
19113: GO 19035
19115: POP
19116: POP
// end ;
19117: PPOPN 1
19119: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19120: LD_EXP 47
19124: PUSH
19125: LD_EXP 67
19129: AND
19130: IFFALSE 19139
19132: GO 19134
19134: DISABLE
// StreamSibBomb ;
19135: CALL 19140 0 0
19139: END
// export function StreamSibBomb ; var i , x , y ; begin
19140: LD_INT 0
19142: PPUSH
19143: PPUSH
19144: PPUSH
19145: PPUSH
// result := false ;
19146: LD_ADDR_VAR 0 1
19150: PUSH
19151: LD_INT 0
19153: ST_TO_ADDR
// for i := 1 to 16 do
19154: LD_ADDR_VAR 0 2
19158: PUSH
19159: DOUBLE
19160: LD_INT 1
19162: DEC
19163: ST_TO_ADDR
19164: LD_INT 16
19166: PUSH
19167: FOR_TO
19168: IFFALSE 19367
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19170: LD_ADDR_VAR 0 3
19174: PUSH
19175: LD_INT 10
19177: PUSH
19178: LD_INT 20
19180: PUSH
19181: LD_INT 30
19183: PUSH
19184: LD_INT 40
19186: PUSH
19187: LD_INT 50
19189: PUSH
19190: LD_INT 60
19192: PUSH
19193: LD_INT 70
19195: PUSH
19196: LD_INT 80
19198: PUSH
19199: LD_INT 90
19201: PUSH
19202: LD_INT 100
19204: PUSH
19205: LD_INT 110
19207: PUSH
19208: LD_INT 120
19210: PUSH
19211: LD_INT 130
19213: PUSH
19214: LD_INT 140
19216: PUSH
19217: LD_INT 150
19219: PUSH
19220: EMPTY
19221: LIST
19222: LIST
19223: LIST
19224: LIST
19225: LIST
19226: LIST
19227: LIST
19228: LIST
19229: LIST
19230: LIST
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: PUSH
19237: LD_INT 1
19239: PPUSH
19240: LD_INT 15
19242: PPUSH
19243: CALL_OW 12
19247: ARRAY
19248: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19249: LD_ADDR_VAR 0 4
19253: PUSH
19254: LD_INT 10
19256: PUSH
19257: LD_INT 20
19259: PUSH
19260: LD_INT 30
19262: PUSH
19263: LD_INT 40
19265: PUSH
19266: LD_INT 50
19268: PUSH
19269: LD_INT 60
19271: PUSH
19272: LD_INT 70
19274: PUSH
19275: LD_INT 80
19277: PUSH
19278: LD_INT 90
19280: PUSH
19281: LD_INT 100
19283: PUSH
19284: LD_INT 110
19286: PUSH
19287: LD_INT 120
19289: PUSH
19290: LD_INT 130
19292: PUSH
19293: LD_INT 140
19295: PUSH
19296: LD_INT 150
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: LIST
19303: LIST
19304: LIST
19305: LIST
19306: LIST
19307: LIST
19308: LIST
19309: LIST
19310: LIST
19311: LIST
19312: LIST
19313: LIST
19314: LIST
19315: PUSH
19316: LD_INT 1
19318: PPUSH
19319: LD_INT 15
19321: PPUSH
19322: CALL_OW 12
19326: ARRAY
19327: ST_TO_ADDR
// if ValidHex ( x , y ) then
19328: LD_VAR 0 3
19332: PPUSH
19333: LD_VAR 0 4
19337: PPUSH
19338: CALL_OW 488
19342: IFFALSE 19365
// begin result := [ x , y ] ;
19344: LD_ADDR_VAR 0 1
19348: PUSH
19349: LD_VAR 0 3
19353: PUSH
19354: LD_VAR 0 4
19358: PUSH
19359: EMPTY
19360: LIST
19361: LIST
19362: ST_TO_ADDR
// break ;
19363: GO 19367
// end ; end ;
19365: GO 19167
19367: POP
19368: POP
// if result then
19369: LD_VAR 0 1
19373: IFFALSE 19433
// begin ToLua ( playSibBomb() ) ;
19375: LD_STRING playSibBomb()
19377: PPUSH
19378: CALL_OW 559
// wait ( 0 0$14 ) ;
19382: LD_INT 490
19384: PPUSH
19385: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19389: LD_VAR 0 1
19393: PUSH
19394: LD_INT 1
19396: ARRAY
19397: PPUSH
19398: LD_VAR 0 1
19402: PUSH
19403: LD_INT 2
19405: ARRAY
19406: PPUSH
19407: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19411: LD_VAR 0 1
19415: PUSH
19416: LD_INT 1
19418: ARRAY
19419: PPUSH
19420: LD_VAR 0 1
19424: PUSH
19425: LD_INT 2
19427: ARRAY
19428: PPUSH
19429: CALL_OW 429
// end ; end ;
19433: LD_VAR 0 1
19437: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19438: LD_EXP 47
19442: PUSH
19443: LD_EXP 69
19447: AND
19448: IFFALSE 19460
19450: GO 19452
19452: DISABLE
// YouLost (  ) ;
19453: LD_STRING 
19455: PPUSH
19456: CALL_OW 104
19460: END
// every 0 0$1 trigger StreamModeActive and sFog do
19461: LD_EXP 47
19465: PUSH
19466: LD_EXP 68
19470: AND
19471: IFFALSE 19485
19473: GO 19475
19475: DISABLE
// FogOff ( your_side ) ;
19476: LD_OWVAR 2
19480: PPUSH
19481: CALL_OW 344
19485: END
// every 0 0$1 trigger StreamModeActive and sSun do
19486: LD_EXP 47
19490: PUSH
19491: LD_EXP 70
19495: AND
19496: IFFALSE 19524
19498: GO 19500
19500: DISABLE
// begin solar_recharge_percent := 0 ;
19501: LD_ADDR_OWVAR 79
19505: PUSH
19506: LD_INT 0
19508: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19509: LD_INT 10500
19511: PPUSH
19512: CALL_OW 67
// solar_recharge_percent := 100 ;
19516: LD_ADDR_OWVAR 79
19520: PUSH
19521: LD_INT 100
19523: ST_TO_ADDR
// end ;
19524: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19525: LD_EXP 47
19529: PUSH
19530: LD_EXP 71
19534: AND
19535: IFFALSE 19774
19537: GO 19539
19539: DISABLE
19540: LD_INT 0
19542: PPUSH
19543: PPUSH
19544: PPUSH
// begin tmp := [ ] ;
19545: LD_ADDR_VAR 0 3
19549: PUSH
19550: EMPTY
19551: ST_TO_ADDR
// for i := 1 to 6 do
19552: LD_ADDR_VAR 0 1
19556: PUSH
19557: DOUBLE
19558: LD_INT 1
19560: DEC
19561: ST_TO_ADDR
19562: LD_INT 6
19564: PUSH
19565: FOR_TO
19566: IFFALSE 19671
// begin uc_nation := nation_nature ;
19568: LD_ADDR_OWVAR 21
19572: PUSH
19573: LD_INT 0
19575: ST_TO_ADDR
// uc_side := 0 ;
19576: LD_ADDR_OWVAR 20
19580: PUSH
19581: LD_INT 0
19583: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19584: LD_ADDR_OWVAR 29
19588: PUSH
19589: LD_INT 12
19591: PUSH
19592: LD_INT 12
19594: PUSH
19595: EMPTY
19596: LIST
19597: LIST
19598: ST_TO_ADDR
// hc_agressivity := 20 ;
19599: LD_ADDR_OWVAR 35
19603: PUSH
19604: LD_INT 20
19606: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19607: LD_ADDR_OWVAR 28
19611: PUSH
19612: LD_INT 17
19614: ST_TO_ADDR
// hc_gallery :=  ;
19615: LD_ADDR_OWVAR 33
19619: PUSH
19620: LD_STRING 
19622: ST_TO_ADDR
// hc_name :=  ;
19623: LD_ADDR_OWVAR 26
19627: PUSH
19628: LD_STRING 
19630: ST_TO_ADDR
// un := CreateHuman ;
19631: LD_ADDR_VAR 0 2
19635: PUSH
19636: CALL_OW 44
19640: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19641: LD_VAR 0 2
19645: PPUSH
19646: LD_INT 1
19648: PPUSH
19649: CALL_OW 51
// tmp := tmp ^ un ;
19653: LD_ADDR_VAR 0 3
19657: PUSH
19658: LD_VAR 0 3
19662: PUSH
19663: LD_VAR 0 2
19667: ADD
19668: ST_TO_ADDR
// end ;
19669: GO 19565
19671: POP
19672: POP
// repeat wait ( 0 0$1 ) ;
19673: LD_INT 35
19675: PPUSH
19676: CALL_OW 67
// for un in tmp do
19680: LD_ADDR_VAR 0 2
19684: PUSH
19685: LD_VAR 0 3
19689: PUSH
19690: FOR_IN
19691: IFFALSE 19765
// begin if IsDead ( un ) then
19693: LD_VAR 0 2
19697: PPUSH
19698: CALL_OW 301
19702: IFFALSE 19722
// begin tmp := tmp diff un ;
19704: LD_ADDR_VAR 0 3
19708: PUSH
19709: LD_VAR 0 3
19713: PUSH
19714: LD_VAR 0 2
19718: DIFF
19719: ST_TO_ADDR
// continue ;
19720: GO 19690
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19722: LD_VAR 0 2
19726: PPUSH
19727: LD_INT 3
19729: PUSH
19730: LD_INT 22
19732: PUSH
19733: LD_INT 0
19735: PUSH
19736: EMPTY
19737: LIST
19738: LIST
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: PPUSH
19744: CALL_OW 69
19748: PPUSH
19749: LD_VAR 0 2
19753: PPUSH
19754: CALL_OW 74
19758: PPUSH
19759: CALL_OW 115
// end ;
19763: GO 19690
19765: POP
19766: POP
// until not tmp ;
19767: LD_VAR 0 3
19771: NOT
19772: IFFALSE 19673
// end ;
19774: PPOPN 3
19776: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19777: LD_EXP 47
19781: PUSH
19782: LD_EXP 72
19786: AND
19787: IFFALSE 19841
19789: GO 19791
19791: DISABLE
// begin ToLua ( displayTroll(); ) ;
19792: LD_STRING displayTroll();
19794: PPUSH
19795: CALL_OW 559
// wait ( 3 3$00 ) ;
19799: LD_INT 6300
19801: PPUSH
19802: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19806: LD_STRING hideTroll();
19808: PPUSH
19809: CALL_OW 559
// wait ( 1 1$00 ) ;
19813: LD_INT 2100
19815: PPUSH
19816: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19820: LD_STRING displayTroll();
19822: PPUSH
19823: CALL_OW 559
// wait ( 1 1$00 ) ;
19827: LD_INT 2100
19829: PPUSH
19830: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19834: LD_STRING hideTroll();
19836: PPUSH
19837: CALL_OW 559
// end ;
19841: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19842: LD_EXP 47
19846: PUSH
19847: LD_EXP 73
19851: AND
19852: IFFALSE 19915
19854: GO 19856
19856: DISABLE
19857: LD_INT 0
19859: PPUSH
// begin p := 0 ;
19860: LD_ADDR_VAR 0 1
19864: PUSH
19865: LD_INT 0
19867: ST_TO_ADDR
// repeat game_speed := 1 ;
19868: LD_ADDR_OWVAR 65
19872: PUSH
19873: LD_INT 1
19875: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19876: LD_INT 35
19878: PPUSH
19879: CALL_OW 67
// p := p + 1 ;
19883: LD_ADDR_VAR 0 1
19887: PUSH
19888: LD_VAR 0 1
19892: PUSH
19893: LD_INT 1
19895: PLUS
19896: ST_TO_ADDR
// until p >= 60 ;
19897: LD_VAR 0 1
19901: PUSH
19902: LD_INT 60
19904: GREATEREQUAL
19905: IFFALSE 19868
// game_speed := 4 ;
19907: LD_ADDR_OWVAR 65
19911: PUSH
19912: LD_INT 4
19914: ST_TO_ADDR
// end ;
19915: PPOPN 1
19917: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19918: LD_EXP 47
19922: PUSH
19923: LD_EXP 74
19927: AND
19928: IFFALSE 20074
19930: GO 19932
19932: DISABLE
19933: LD_INT 0
19935: PPUSH
19936: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19937: LD_ADDR_VAR 0 1
19941: PUSH
19942: LD_INT 22
19944: PUSH
19945: LD_OWVAR 2
19949: PUSH
19950: EMPTY
19951: LIST
19952: LIST
19953: PUSH
19954: LD_INT 2
19956: PUSH
19957: LD_INT 30
19959: PUSH
19960: LD_INT 0
19962: PUSH
19963: EMPTY
19964: LIST
19965: LIST
19966: PUSH
19967: LD_INT 30
19969: PUSH
19970: LD_INT 1
19972: PUSH
19973: EMPTY
19974: LIST
19975: LIST
19976: PUSH
19977: EMPTY
19978: LIST
19979: LIST
19980: LIST
19981: PUSH
19982: EMPTY
19983: LIST
19984: LIST
19985: PPUSH
19986: CALL_OW 69
19990: ST_TO_ADDR
// if not depot then
19991: LD_VAR 0 1
19995: NOT
19996: IFFALSE 20000
// exit ;
19998: GO 20074
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20000: LD_ADDR_VAR 0 2
20004: PUSH
20005: LD_VAR 0 1
20009: PUSH
20010: LD_INT 1
20012: PPUSH
20013: LD_VAR 0 1
20017: PPUSH
20018: CALL_OW 12
20022: ARRAY
20023: PPUSH
20024: CALL_OW 274
20028: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20029: LD_VAR 0 2
20033: PPUSH
20034: LD_INT 1
20036: PPUSH
20037: LD_INT 0
20039: PPUSH
20040: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20044: LD_VAR 0 2
20048: PPUSH
20049: LD_INT 2
20051: PPUSH
20052: LD_INT 0
20054: PPUSH
20055: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20059: LD_VAR 0 2
20063: PPUSH
20064: LD_INT 3
20066: PPUSH
20067: LD_INT 0
20069: PPUSH
20070: CALL_OW 277
// end ;
20074: PPOPN 2
20076: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20077: LD_EXP 47
20081: PUSH
20082: LD_EXP 75
20086: AND
20087: IFFALSE 20184
20089: GO 20091
20091: DISABLE
20092: LD_INT 0
20094: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20095: LD_ADDR_VAR 0 1
20099: PUSH
20100: LD_INT 22
20102: PUSH
20103: LD_OWVAR 2
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: PUSH
20112: LD_INT 21
20114: PUSH
20115: LD_INT 1
20117: PUSH
20118: EMPTY
20119: LIST
20120: LIST
20121: PUSH
20122: LD_INT 3
20124: PUSH
20125: LD_INT 23
20127: PUSH
20128: LD_INT 0
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: PUSH
20135: EMPTY
20136: LIST
20137: LIST
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: LIST
20143: PPUSH
20144: CALL_OW 69
20148: ST_TO_ADDR
// if not tmp then
20149: LD_VAR 0 1
20153: NOT
20154: IFFALSE 20158
// exit ;
20156: GO 20184
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20158: LD_VAR 0 1
20162: PUSH
20163: LD_INT 1
20165: PPUSH
20166: LD_VAR 0 1
20170: PPUSH
20171: CALL_OW 12
20175: ARRAY
20176: PPUSH
20177: LD_INT 200
20179: PPUSH
20180: CALL_OW 234
// end ;
20184: PPOPN 1
20186: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20187: LD_EXP 47
20191: PUSH
20192: LD_EXP 76
20196: AND
20197: IFFALSE 20276
20199: GO 20201
20201: DISABLE
20202: LD_INT 0
20204: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20205: LD_ADDR_VAR 0 1
20209: PUSH
20210: LD_INT 22
20212: PUSH
20213: LD_OWVAR 2
20217: PUSH
20218: EMPTY
20219: LIST
20220: LIST
20221: PUSH
20222: LD_INT 21
20224: PUSH
20225: LD_INT 2
20227: PUSH
20228: EMPTY
20229: LIST
20230: LIST
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: PPUSH
20236: CALL_OW 69
20240: ST_TO_ADDR
// if not tmp then
20241: LD_VAR 0 1
20245: NOT
20246: IFFALSE 20250
// exit ;
20248: GO 20276
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20250: LD_VAR 0 1
20254: PUSH
20255: LD_INT 1
20257: PPUSH
20258: LD_VAR 0 1
20262: PPUSH
20263: CALL_OW 12
20267: ARRAY
20268: PPUSH
20269: LD_INT 60
20271: PPUSH
20272: CALL_OW 234
// end ;
20276: PPOPN 1
20278: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20279: LD_EXP 47
20283: PUSH
20284: LD_EXP 77
20288: AND
20289: IFFALSE 20388
20291: GO 20293
20293: DISABLE
20294: LD_INT 0
20296: PPUSH
20297: PPUSH
// begin enable ;
20298: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20299: LD_ADDR_VAR 0 1
20303: PUSH
20304: LD_INT 22
20306: PUSH
20307: LD_OWVAR 2
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: PUSH
20316: LD_INT 61
20318: PUSH
20319: EMPTY
20320: LIST
20321: PUSH
20322: LD_INT 33
20324: PUSH
20325: LD_INT 2
20327: PUSH
20328: EMPTY
20329: LIST
20330: LIST
20331: PUSH
20332: EMPTY
20333: LIST
20334: LIST
20335: LIST
20336: PPUSH
20337: CALL_OW 69
20341: ST_TO_ADDR
// if not tmp then
20342: LD_VAR 0 1
20346: NOT
20347: IFFALSE 20351
// exit ;
20349: GO 20388
// for i in tmp do
20351: LD_ADDR_VAR 0 2
20355: PUSH
20356: LD_VAR 0 1
20360: PUSH
20361: FOR_IN
20362: IFFALSE 20386
// if IsControledBy ( i ) then
20364: LD_VAR 0 2
20368: PPUSH
20369: CALL_OW 312
20373: IFFALSE 20384
// ComUnlink ( i ) ;
20375: LD_VAR 0 2
20379: PPUSH
20380: CALL_OW 136
20384: GO 20361
20386: POP
20387: POP
// end ;
20388: PPOPN 2
20390: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20391: LD_EXP 47
20395: PUSH
20396: LD_EXP 78
20400: AND
20401: IFFALSE 20541
20403: GO 20405
20405: DISABLE
20406: LD_INT 0
20408: PPUSH
20409: PPUSH
// begin ToLua ( displayPowell(); ) ;
20410: LD_STRING displayPowell();
20412: PPUSH
20413: CALL_OW 559
// uc_side := 0 ;
20417: LD_ADDR_OWVAR 20
20421: PUSH
20422: LD_INT 0
20424: ST_TO_ADDR
// uc_nation := 2 ;
20425: LD_ADDR_OWVAR 21
20429: PUSH
20430: LD_INT 2
20432: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20433: LD_ADDR_OWVAR 37
20437: PUSH
20438: LD_INT 14
20440: ST_TO_ADDR
// vc_engine := engine_siberite ;
20441: LD_ADDR_OWVAR 39
20445: PUSH
20446: LD_INT 3
20448: ST_TO_ADDR
// vc_control := control_apeman ;
20449: LD_ADDR_OWVAR 38
20453: PUSH
20454: LD_INT 5
20456: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20457: LD_ADDR_OWVAR 40
20461: PUSH
20462: LD_INT 29
20464: ST_TO_ADDR
// un := CreateVehicle ;
20465: LD_ADDR_VAR 0 2
20469: PUSH
20470: CALL_OW 45
20474: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20475: LD_VAR 0 2
20479: PPUSH
20480: LD_INT 1
20482: PPUSH
20483: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20487: LD_INT 35
20489: PPUSH
20490: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20494: LD_VAR 0 2
20498: PPUSH
20499: LD_INT 22
20501: PUSH
20502: LD_OWVAR 2
20506: PUSH
20507: EMPTY
20508: LIST
20509: LIST
20510: PPUSH
20511: CALL_OW 69
20515: PPUSH
20516: LD_VAR 0 2
20520: PPUSH
20521: CALL_OW 74
20525: PPUSH
20526: CALL_OW 115
// until IsDead ( un ) ;
20530: LD_VAR 0 2
20534: PPUSH
20535: CALL_OW 301
20539: IFFALSE 20487
// end ;
20541: PPOPN 2
20543: END
// every 0 0$1 trigger StreamModeActive and sStu do
20544: LD_EXP 47
20548: PUSH
20549: LD_EXP 86
20553: AND
20554: IFFALSE 20570
20556: GO 20558
20558: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20559: LD_STRING displayStucuk();
20561: PPUSH
20562: CALL_OW 559
// ResetFog ;
20566: CALL_OW 335
// end ;
20570: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20571: LD_EXP 47
20575: PUSH
20576: LD_EXP 79
20580: AND
20581: IFFALSE 20722
20583: GO 20585
20585: DISABLE
20586: LD_INT 0
20588: PPUSH
20589: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20590: LD_ADDR_VAR 0 2
20594: PUSH
20595: LD_INT 22
20597: PUSH
20598: LD_OWVAR 2
20602: PUSH
20603: EMPTY
20604: LIST
20605: LIST
20606: PUSH
20607: LD_INT 21
20609: PUSH
20610: LD_INT 1
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: PUSH
20617: EMPTY
20618: LIST
20619: LIST
20620: PPUSH
20621: CALL_OW 69
20625: ST_TO_ADDR
// if not tmp then
20626: LD_VAR 0 2
20630: NOT
20631: IFFALSE 20635
// exit ;
20633: GO 20722
// un := tmp [ rand ( 1 , tmp ) ] ;
20635: LD_ADDR_VAR 0 1
20639: PUSH
20640: LD_VAR 0 2
20644: PUSH
20645: LD_INT 1
20647: PPUSH
20648: LD_VAR 0 2
20652: PPUSH
20653: CALL_OW 12
20657: ARRAY
20658: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20659: LD_VAR 0 1
20663: PPUSH
20664: LD_INT 0
20666: PPUSH
20667: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20671: LD_VAR 0 1
20675: PPUSH
20676: LD_OWVAR 3
20680: PUSH
20681: LD_VAR 0 1
20685: DIFF
20686: PPUSH
20687: LD_VAR 0 1
20691: PPUSH
20692: CALL_OW 74
20696: PPUSH
20697: CALL_OW 115
// wait ( 0 0$20 ) ;
20701: LD_INT 700
20703: PPUSH
20704: CALL_OW 67
// SetSide ( un , your_side ) ;
20708: LD_VAR 0 1
20712: PPUSH
20713: LD_OWVAR 2
20717: PPUSH
20718: CALL_OW 235
// end ;
20722: PPOPN 2
20724: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20725: LD_EXP 47
20729: PUSH
20730: LD_EXP 80
20734: AND
20735: IFFALSE 20841
20737: GO 20739
20739: DISABLE
20740: LD_INT 0
20742: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20743: LD_ADDR_VAR 0 1
20747: PUSH
20748: LD_INT 22
20750: PUSH
20751: LD_OWVAR 2
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: PUSH
20760: LD_INT 2
20762: PUSH
20763: LD_INT 30
20765: PUSH
20766: LD_INT 0
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: PUSH
20773: LD_INT 30
20775: PUSH
20776: LD_INT 1
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: LIST
20787: PUSH
20788: EMPTY
20789: LIST
20790: LIST
20791: PPUSH
20792: CALL_OW 69
20796: ST_TO_ADDR
// if not depot then
20797: LD_VAR 0 1
20801: NOT
20802: IFFALSE 20806
// exit ;
20804: GO 20841
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20806: LD_VAR 0 1
20810: PUSH
20811: LD_INT 1
20813: ARRAY
20814: PPUSH
20815: CALL_OW 250
20819: PPUSH
20820: LD_VAR 0 1
20824: PUSH
20825: LD_INT 1
20827: ARRAY
20828: PPUSH
20829: CALL_OW 251
20833: PPUSH
20834: LD_INT 70
20836: PPUSH
20837: CALL_OW 495
// end ;
20841: PPOPN 1
20843: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20844: LD_EXP 47
20848: PUSH
20849: LD_EXP 81
20853: AND
20854: IFFALSE 21065
20856: GO 20858
20858: DISABLE
20859: LD_INT 0
20861: PPUSH
20862: PPUSH
20863: PPUSH
20864: PPUSH
20865: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20866: LD_ADDR_VAR 0 5
20870: PUSH
20871: LD_INT 22
20873: PUSH
20874: LD_OWVAR 2
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PUSH
20883: LD_INT 21
20885: PUSH
20886: LD_INT 1
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PUSH
20893: EMPTY
20894: LIST
20895: LIST
20896: PPUSH
20897: CALL_OW 69
20901: ST_TO_ADDR
// if not tmp then
20902: LD_VAR 0 5
20906: NOT
20907: IFFALSE 20911
// exit ;
20909: GO 21065
// for i in tmp do
20911: LD_ADDR_VAR 0 1
20915: PUSH
20916: LD_VAR 0 5
20920: PUSH
20921: FOR_IN
20922: IFFALSE 21063
// begin d := rand ( 0 , 5 ) ;
20924: LD_ADDR_VAR 0 4
20928: PUSH
20929: LD_INT 0
20931: PPUSH
20932: LD_INT 5
20934: PPUSH
20935: CALL_OW 12
20939: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20940: LD_ADDR_VAR 0 2
20944: PUSH
20945: LD_VAR 0 1
20949: PPUSH
20950: CALL_OW 250
20954: PPUSH
20955: LD_VAR 0 4
20959: PPUSH
20960: LD_INT 3
20962: PPUSH
20963: LD_INT 12
20965: PPUSH
20966: CALL_OW 12
20970: PPUSH
20971: CALL_OW 272
20975: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20976: LD_ADDR_VAR 0 3
20980: PUSH
20981: LD_VAR 0 1
20985: PPUSH
20986: CALL_OW 251
20990: PPUSH
20991: LD_VAR 0 4
20995: PPUSH
20996: LD_INT 3
20998: PPUSH
20999: LD_INT 12
21001: PPUSH
21002: CALL_OW 12
21006: PPUSH
21007: CALL_OW 273
21011: ST_TO_ADDR
// if ValidHex ( x , y ) then
21012: LD_VAR 0 2
21016: PPUSH
21017: LD_VAR 0 3
21021: PPUSH
21022: CALL_OW 488
21026: IFFALSE 21061
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21028: LD_VAR 0 1
21032: PPUSH
21033: LD_VAR 0 2
21037: PPUSH
21038: LD_VAR 0 3
21042: PPUSH
21043: LD_INT 3
21045: PPUSH
21046: LD_INT 6
21048: PPUSH
21049: CALL_OW 12
21053: PPUSH
21054: LD_INT 1
21056: PPUSH
21057: CALL_OW 483
// end ;
21061: GO 20921
21063: POP
21064: POP
// end ;
21065: PPOPN 5
21067: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21068: LD_EXP 47
21072: PUSH
21073: LD_EXP 82
21077: AND
21078: IFFALSE 21172
21080: GO 21082
21082: DISABLE
21083: LD_INT 0
21085: PPUSH
21086: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21087: LD_ADDR_VAR 0 2
21091: PUSH
21092: LD_INT 22
21094: PUSH
21095: LD_OWVAR 2
21099: PUSH
21100: EMPTY
21101: LIST
21102: LIST
21103: PUSH
21104: LD_INT 32
21106: PUSH
21107: LD_INT 1
21109: PUSH
21110: EMPTY
21111: LIST
21112: LIST
21113: PUSH
21114: LD_INT 21
21116: PUSH
21117: LD_INT 2
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: LIST
21128: PPUSH
21129: CALL_OW 69
21133: ST_TO_ADDR
// if not tmp then
21134: LD_VAR 0 2
21138: NOT
21139: IFFALSE 21143
// exit ;
21141: GO 21172
// for i in tmp do
21143: LD_ADDR_VAR 0 1
21147: PUSH
21148: LD_VAR 0 2
21152: PUSH
21153: FOR_IN
21154: IFFALSE 21170
// SetFuel ( i , 0 ) ;
21156: LD_VAR 0 1
21160: PPUSH
21161: LD_INT 0
21163: PPUSH
21164: CALL_OW 240
21168: GO 21153
21170: POP
21171: POP
// end ;
21172: PPOPN 2
21174: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21175: LD_EXP 47
21179: PUSH
21180: LD_EXP 83
21184: AND
21185: IFFALSE 21251
21187: GO 21189
21189: DISABLE
21190: LD_INT 0
21192: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21193: LD_ADDR_VAR 0 1
21197: PUSH
21198: LD_INT 22
21200: PUSH
21201: LD_OWVAR 2
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: PUSH
21210: LD_INT 30
21212: PUSH
21213: LD_INT 29
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: PUSH
21220: EMPTY
21221: LIST
21222: LIST
21223: PPUSH
21224: CALL_OW 69
21228: ST_TO_ADDR
// if not tmp then
21229: LD_VAR 0 1
21233: NOT
21234: IFFALSE 21238
// exit ;
21236: GO 21251
// DestroyUnit ( tmp [ 1 ] ) ;
21238: LD_VAR 0 1
21242: PUSH
21243: LD_INT 1
21245: ARRAY
21246: PPUSH
21247: CALL_OW 65
// end ;
21251: PPOPN 1
21253: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21254: LD_EXP 47
21258: PUSH
21259: LD_EXP 85
21263: AND
21264: IFFALSE 21393
21266: GO 21268
21268: DISABLE
21269: LD_INT 0
21271: PPUSH
// begin uc_side := 0 ;
21272: LD_ADDR_OWVAR 20
21276: PUSH
21277: LD_INT 0
21279: ST_TO_ADDR
// uc_nation := nation_arabian ;
21280: LD_ADDR_OWVAR 21
21284: PUSH
21285: LD_INT 2
21287: ST_TO_ADDR
// hc_gallery :=  ;
21288: LD_ADDR_OWVAR 33
21292: PUSH
21293: LD_STRING 
21295: ST_TO_ADDR
// hc_name :=  ;
21296: LD_ADDR_OWVAR 26
21300: PUSH
21301: LD_STRING 
21303: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21304: LD_INT 1
21306: PPUSH
21307: LD_INT 11
21309: PPUSH
21310: LD_INT 10
21312: PPUSH
21313: CALL_OW 380
// un := CreateHuman ;
21317: LD_ADDR_VAR 0 1
21321: PUSH
21322: CALL_OW 44
21326: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21327: LD_VAR 0 1
21331: PPUSH
21332: LD_INT 1
21334: PPUSH
21335: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21339: LD_INT 35
21341: PPUSH
21342: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21346: LD_VAR 0 1
21350: PPUSH
21351: LD_INT 22
21353: PUSH
21354: LD_OWVAR 2
21358: PUSH
21359: EMPTY
21360: LIST
21361: LIST
21362: PPUSH
21363: CALL_OW 69
21367: PPUSH
21368: LD_VAR 0 1
21372: PPUSH
21373: CALL_OW 74
21377: PPUSH
21378: CALL_OW 115
// until IsDead ( un ) ;
21382: LD_VAR 0 1
21386: PPUSH
21387: CALL_OW 301
21391: IFFALSE 21339
// end ;
21393: PPOPN 1
21395: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21396: LD_EXP 47
21400: PUSH
21401: LD_EXP 87
21405: AND
21406: IFFALSE 21418
21408: GO 21410
21410: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21411: LD_STRING earthquake(getX(game), 0, 32)
21413: PPUSH
21414: CALL_OW 559
21418: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21419: LD_EXP 47
21423: PUSH
21424: LD_EXP 88
21428: AND
21429: IFFALSE 21520
21431: GO 21433
21433: DISABLE
21434: LD_INT 0
21436: PPUSH
// begin enable ;
21437: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21438: LD_ADDR_VAR 0 1
21442: PUSH
21443: LD_INT 22
21445: PUSH
21446: LD_OWVAR 2
21450: PUSH
21451: EMPTY
21452: LIST
21453: LIST
21454: PUSH
21455: LD_INT 21
21457: PUSH
21458: LD_INT 2
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: PUSH
21465: LD_INT 33
21467: PUSH
21468: LD_INT 3
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: LIST
21479: PPUSH
21480: CALL_OW 69
21484: ST_TO_ADDR
// if not tmp then
21485: LD_VAR 0 1
21489: NOT
21490: IFFALSE 21494
// exit ;
21492: GO 21520
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21494: LD_VAR 0 1
21498: PUSH
21499: LD_INT 1
21501: PPUSH
21502: LD_VAR 0 1
21506: PPUSH
21507: CALL_OW 12
21511: ARRAY
21512: PPUSH
21513: LD_INT 1
21515: PPUSH
21516: CALL_OW 234
// end ;
21520: PPOPN 1
21522: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21523: LD_EXP 47
21527: PUSH
21528: LD_EXP 89
21532: AND
21533: IFFALSE 21674
21535: GO 21537
21537: DISABLE
21538: LD_INT 0
21540: PPUSH
21541: PPUSH
21542: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21543: LD_ADDR_VAR 0 3
21547: PUSH
21548: LD_INT 22
21550: PUSH
21551: LD_OWVAR 2
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: PUSH
21560: LD_INT 25
21562: PUSH
21563: LD_INT 1
21565: PUSH
21566: EMPTY
21567: LIST
21568: LIST
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: PPUSH
21574: CALL_OW 69
21578: ST_TO_ADDR
// if not tmp then
21579: LD_VAR 0 3
21583: NOT
21584: IFFALSE 21588
// exit ;
21586: GO 21674
// un := tmp [ rand ( 1 , tmp ) ] ;
21588: LD_ADDR_VAR 0 2
21592: PUSH
21593: LD_VAR 0 3
21597: PUSH
21598: LD_INT 1
21600: PPUSH
21601: LD_VAR 0 3
21605: PPUSH
21606: CALL_OW 12
21610: ARRAY
21611: ST_TO_ADDR
// if Crawls ( un ) then
21612: LD_VAR 0 2
21616: PPUSH
21617: CALL_OW 318
21621: IFFALSE 21632
// ComWalk ( un ) ;
21623: LD_VAR 0 2
21627: PPUSH
21628: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21632: LD_VAR 0 2
21636: PPUSH
21637: LD_INT 9
21639: PPUSH
21640: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21644: LD_INT 28
21646: PPUSH
21647: LD_OWVAR 2
21651: PPUSH
21652: LD_INT 2
21654: PPUSH
21655: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21659: LD_INT 29
21661: PPUSH
21662: LD_OWVAR 2
21666: PPUSH
21667: LD_INT 2
21669: PPUSH
21670: CALL_OW 322
// end ;
21674: PPOPN 3
21676: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21677: LD_EXP 47
21681: PUSH
21682: LD_EXP 90
21686: AND
21687: IFFALSE 21798
21689: GO 21691
21691: DISABLE
21692: LD_INT 0
21694: PPUSH
21695: PPUSH
21696: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21697: LD_ADDR_VAR 0 3
21701: PUSH
21702: LD_INT 22
21704: PUSH
21705: LD_OWVAR 2
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: PUSH
21714: LD_INT 25
21716: PUSH
21717: LD_INT 1
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: PPUSH
21728: CALL_OW 69
21732: ST_TO_ADDR
// if not tmp then
21733: LD_VAR 0 3
21737: NOT
21738: IFFALSE 21742
// exit ;
21740: GO 21798
// un := tmp [ rand ( 1 , tmp ) ] ;
21742: LD_ADDR_VAR 0 2
21746: PUSH
21747: LD_VAR 0 3
21751: PUSH
21752: LD_INT 1
21754: PPUSH
21755: LD_VAR 0 3
21759: PPUSH
21760: CALL_OW 12
21764: ARRAY
21765: ST_TO_ADDR
// if Crawls ( un ) then
21766: LD_VAR 0 2
21770: PPUSH
21771: CALL_OW 318
21775: IFFALSE 21786
// ComWalk ( un ) ;
21777: LD_VAR 0 2
21781: PPUSH
21782: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21786: LD_VAR 0 2
21790: PPUSH
21791: LD_INT 8
21793: PPUSH
21794: CALL_OW 336
// end ;
21798: PPOPN 3
21800: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21801: LD_EXP 47
21805: PUSH
21806: LD_EXP 91
21810: AND
21811: IFFALSE 21955
21813: GO 21815
21815: DISABLE
21816: LD_INT 0
21818: PPUSH
21819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21820: LD_ADDR_VAR 0 2
21824: PUSH
21825: LD_INT 22
21827: PUSH
21828: LD_OWVAR 2
21832: PUSH
21833: EMPTY
21834: LIST
21835: LIST
21836: PUSH
21837: LD_INT 21
21839: PUSH
21840: LD_INT 2
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: PUSH
21847: LD_INT 2
21849: PUSH
21850: LD_INT 34
21852: PUSH
21853: LD_INT 12
21855: PUSH
21856: EMPTY
21857: LIST
21858: LIST
21859: PUSH
21860: LD_INT 34
21862: PUSH
21863: LD_INT 51
21865: PUSH
21866: EMPTY
21867: LIST
21868: LIST
21869: PUSH
21870: LD_INT 34
21872: PUSH
21873: LD_INT 32
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: LIST
21890: PPUSH
21891: CALL_OW 69
21895: ST_TO_ADDR
// if not tmp then
21896: LD_VAR 0 2
21900: NOT
21901: IFFALSE 21905
// exit ;
21903: GO 21955
// for i in tmp do
21905: LD_ADDR_VAR 0 1
21909: PUSH
21910: LD_VAR 0 2
21914: PUSH
21915: FOR_IN
21916: IFFALSE 21953
// if GetCargo ( i , mat_artifact ) = 0 then
21918: LD_VAR 0 1
21922: PPUSH
21923: LD_INT 4
21925: PPUSH
21926: CALL_OW 289
21930: PUSH
21931: LD_INT 0
21933: EQUAL
21934: IFFALSE 21951
// SetCargo ( i , mat_siberit , 100 ) ;
21936: LD_VAR 0 1
21940: PPUSH
21941: LD_INT 3
21943: PPUSH
21944: LD_INT 100
21946: PPUSH
21947: CALL_OW 290
21951: GO 21915
21953: POP
21954: POP
// end ;
21955: PPOPN 2
21957: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21958: LD_EXP 47
21962: PUSH
21963: LD_EXP 92
21967: AND
21968: IFFALSE 22151
21970: GO 21972
21972: DISABLE
21973: LD_INT 0
21975: PPUSH
21976: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21977: LD_ADDR_VAR 0 2
21981: PUSH
21982: LD_INT 22
21984: PUSH
21985: LD_OWVAR 2
21989: PUSH
21990: EMPTY
21991: LIST
21992: LIST
21993: PPUSH
21994: CALL_OW 69
21998: ST_TO_ADDR
// if not tmp then
21999: LD_VAR 0 2
22003: NOT
22004: IFFALSE 22008
// exit ;
22006: GO 22151
// for i := 1 to 2 do
22008: LD_ADDR_VAR 0 1
22012: PUSH
22013: DOUBLE
22014: LD_INT 1
22016: DEC
22017: ST_TO_ADDR
22018: LD_INT 2
22020: PUSH
22021: FOR_TO
22022: IFFALSE 22149
// begin uc_side := your_side ;
22024: LD_ADDR_OWVAR 20
22028: PUSH
22029: LD_OWVAR 2
22033: ST_TO_ADDR
// uc_nation := nation_american ;
22034: LD_ADDR_OWVAR 21
22038: PUSH
22039: LD_INT 1
22041: ST_TO_ADDR
// vc_chassis := us_morphling ;
22042: LD_ADDR_OWVAR 37
22046: PUSH
22047: LD_INT 5
22049: ST_TO_ADDR
// vc_engine := engine_siberite ;
22050: LD_ADDR_OWVAR 39
22054: PUSH
22055: LD_INT 3
22057: ST_TO_ADDR
// vc_control := control_computer ;
22058: LD_ADDR_OWVAR 38
22062: PUSH
22063: LD_INT 3
22065: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22066: LD_ADDR_OWVAR 40
22070: PUSH
22071: LD_INT 10
22073: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22074: LD_VAR 0 2
22078: PUSH
22079: LD_INT 1
22081: ARRAY
22082: PPUSH
22083: CALL_OW 310
22087: NOT
22088: IFFALSE 22135
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22090: CALL_OW 45
22094: PPUSH
22095: LD_VAR 0 2
22099: PUSH
22100: LD_INT 1
22102: ARRAY
22103: PPUSH
22104: CALL_OW 250
22108: PPUSH
22109: LD_VAR 0 2
22113: PUSH
22114: LD_INT 1
22116: ARRAY
22117: PPUSH
22118: CALL_OW 251
22122: PPUSH
22123: LD_INT 12
22125: PPUSH
22126: LD_INT 1
22128: PPUSH
22129: CALL_OW 50
22133: GO 22147
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22135: CALL_OW 45
22139: PPUSH
22140: LD_INT 1
22142: PPUSH
22143: CALL_OW 51
// end ;
22147: GO 22021
22149: POP
22150: POP
// end ;
22151: PPOPN 2
22153: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22154: LD_EXP 47
22158: PUSH
22159: LD_EXP 93
22163: AND
22164: IFFALSE 22386
22166: GO 22168
22168: DISABLE
22169: LD_INT 0
22171: PPUSH
22172: PPUSH
22173: PPUSH
22174: PPUSH
22175: PPUSH
22176: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22177: LD_ADDR_VAR 0 6
22181: PUSH
22182: LD_INT 22
22184: PUSH
22185: LD_OWVAR 2
22189: PUSH
22190: EMPTY
22191: LIST
22192: LIST
22193: PUSH
22194: LD_INT 21
22196: PUSH
22197: LD_INT 1
22199: PUSH
22200: EMPTY
22201: LIST
22202: LIST
22203: PUSH
22204: LD_INT 3
22206: PUSH
22207: LD_INT 23
22209: PUSH
22210: LD_INT 0
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: LIST
22225: PPUSH
22226: CALL_OW 69
22230: ST_TO_ADDR
// if not tmp then
22231: LD_VAR 0 6
22235: NOT
22236: IFFALSE 22240
// exit ;
22238: GO 22386
// s1 := rand ( 1 , 4 ) ;
22240: LD_ADDR_VAR 0 2
22244: PUSH
22245: LD_INT 1
22247: PPUSH
22248: LD_INT 4
22250: PPUSH
22251: CALL_OW 12
22255: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22256: LD_ADDR_VAR 0 4
22260: PUSH
22261: LD_VAR 0 6
22265: PUSH
22266: LD_INT 1
22268: ARRAY
22269: PPUSH
22270: LD_VAR 0 2
22274: PPUSH
22275: CALL_OW 259
22279: ST_TO_ADDR
// if s1 = 1 then
22280: LD_VAR 0 2
22284: PUSH
22285: LD_INT 1
22287: EQUAL
22288: IFFALSE 22308
// s2 := rand ( 2 , 4 ) else
22290: LD_ADDR_VAR 0 3
22294: PUSH
22295: LD_INT 2
22297: PPUSH
22298: LD_INT 4
22300: PPUSH
22301: CALL_OW 12
22305: ST_TO_ADDR
22306: GO 22316
// s2 := 1 ;
22308: LD_ADDR_VAR 0 3
22312: PUSH
22313: LD_INT 1
22315: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22316: LD_ADDR_VAR 0 5
22320: PUSH
22321: LD_VAR 0 6
22325: PUSH
22326: LD_INT 1
22328: ARRAY
22329: PPUSH
22330: LD_VAR 0 3
22334: PPUSH
22335: CALL_OW 259
22339: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22340: LD_VAR 0 6
22344: PUSH
22345: LD_INT 1
22347: ARRAY
22348: PPUSH
22349: LD_VAR 0 2
22353: PPUSH
22354: LD_VAR 0 5
22358: PPUSH
22359: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22363: LD_VAR 0 6
22367: PUSH
22368: LD_INT 1
22370: ARRAY
22371: PPUSH
22372: LD_VAR 0 3
22376: PPUSH
22377: LD_VAR 0 4
22381: PPUSH
22382: CALL_OW 237
// end ;
22386: PPOPN 6
22388: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22389: LD_EXP 47
22393: PUSH
22394: LD_EXP 94
22398: AND
22399: IFFALSE 22478
22401: GO 22403
22403: DISABLE
22404: LD_INT 0
22406: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22407: LD_ADDR_VAR 0 1
22411: PUSH
22412: LD_INT 22
22414: PUSH
22415: LD_OWVAR 2
22419: PUSH
22420: EMPTY
22421: LIST
22422: LIST
22423: PUSH
22424: LD_INT 30
22426: PUSH
22427: LD_INT 3
22429: PUSH
22430: EMPTY
22431: LIST
22432: LIST
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: PPUSH
22438: CALL_OW 69
22442: ST_TO_ADDR
// if not tmp then
22443: LD_VAR 0 1
22447: NOT
22448: IFFALSE 22452
// exit ;
22450: GO 22478
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22452: LD_VAR 0 1
22456: PUSH
22457: LD_INT 1
22459: PPUSH
22460: LD_VAR 0 1
22464: PPUSH
22465: CALL_OW 12
22469: ARRAY
22470: PPUSH
22471: LD_INT 1
22473: PPUSH
22474: CALL_OW 234
// end ;
22478: PPOPN 1
22480: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22481: LD_EXP 47
22485: PUSH
22486: LD_EXP 95
22490: AND
22491: IFFALSE 22603
22493: GO 22495
22495: DISABLE
22496: LD_INT 0
22498: PPUSH
22499: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22500: LD_ADDR_VAR 0 2
22504: PUSH
22505: LD_INT 22
22507: PUSH
22508: LD_OWVAR 2
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: PUSH
22517: LD_INT 2
22519: PUSH
22520: LD_INT 30
22522: PUSH
22523: LD_INT 27
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: PUSH
22530: LD_INT 30
22532: PUSH
22533: LD_INT 26
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: PUSH
22540: LD_INT 30
22542: PUSH
22543: LD_INT 28
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: EMPTY
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PPUSH
22560: CALL_OW 69
22564: ST_TO_ADDR
// if not tmp then
22565: LD_VAR 0 2
22569: NOT
22570: IFFALSE 22574
// exit ;
22572: GO 22603
// for i in tmp do
22574: LD_ADDR_VAR 0 1
22578: PUSH
22579: LD_VAR 0 2
22583: PUSH
22584: FOR_IN
22585: IFFALSE 22601
// SetLives ( i , 1 ) ;
22587: LD_VAR 0 1
22591: PPUSH
22592: LD_INT 1
22594: PPUSH
22595: CALL_OW 234
22599: GO 22584
22601: POP
22602: POP
// end ;
22603: PPOPN 2
22605: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22606: LD_EXP 47
22610: PUSH
22611: LD_EXP 96
22615: AND
22616: IFFALSE 22890
22618: GO 22620
22620: DISABLE
22621: LD_INT 0
22623: PPUSH
22624: PPUSH
22625: PPUSH
// begin i := rand ( 1 , 7 ) ;
22626: LD_ADDR_VAR 0 1
22630: PUSH
22631: LD_INT 1
22633: PPUSH
22634: LD_INT 7
22636: PPUSH
22637: CALL_OW 12
22641: ST_TO_ADDR
// case i of 1 :
22642: LD_VAR 0 1
22646: PUSH
22647: LD_INT 1
22649: DOUBLE
22650: EQUAL
22651: IFTRUE 22655
22653: GO 22665
22655: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22656: LD_STRING earthquake(getX(game), 0, 32)
22658: PPUSH
22659: CALL_OW 559
22663: GO 22890
22665: LD_INT 2
22667: DOUBLE
22668: EQUAL
22669: IFTRUE 22673
22671: GO 22687
22673: POP
// begin ToLua ( displayStucuk(); ) ;
22674: LD_STRING displayStucuk();
22676: PPUSH
22677: CALL_OW 559
// ResetFog ;
22681: CALL_OW 335
// end ; 3 :
22685: GO 22890
22687: LD_INT 3
22689: DOUBLE
22690: EQUAL
22691: IFTRUE 22695
22693: GO 22799
22695: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22696: LD_ADDR_VAR 0 2
22700: PUSH
22701: LD_INT 22
22703: PUSH
22704: LD_OWVAR 2
22708: PUSH
22709: EMPTY
22710: LIST
22711: LIST
22712: PUSH
22713: LD_INT 25
22715: PUSH
22716: LD_INT 1
22718: PUSH
22719: EMPTY
22720: LIST
22721: LIST
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: PPUSH
22727: CALL_OW 69
22731: ST_TO_ADDR
// if not tmp then
22732: LD_VAR 0 2
22736: NOT
22737: IFFALSE 22741
// exit ;
22739: GO 22890
// un := tmp [ rand ( 1 , tmp ) ] ;
22741: LD_ADDR_VAR 0 3
22745: PUSH
22746: LD_VAR 0 2
22750: PUSH
22751: LD_INT 1
22753: PPUSH
22754: LD_VAR 0 2
22758: PPUSH
22759: CALL_OW 12
22763: ARRAY
22764: ST_TO_ADDR
// if Crawls ( un ) then
22765: LD_VAR 0 3
22769: PPUSH
22770: CALL_OW 318
22774: IFFALSE 22785
// ComWalk ( un ) ;
22776: LD_VAR 0 3
22780: PPUSH
22781: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22785: LD_VAR 0 3
22789: PPUSH
22790: LD_INT 8
22792: PPUSH
22793: CALL_OW 336
// end ; 4 :
22797: GO 22890
22799: LD_INT 4
22801: DOUBLE
22802: EQUAL
22803: IFTRUE 22807
22805: GO 22868
22807: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22808: LD_ADDR_VAR 0 2
22812: PUSH
22813: LD_INT 22
22815: PUSH
22816: LD_OWVAR 2
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: PUSH
22825: LD_INT 30
22827: PUSH
22828: LD_INT 29
22830: PUSH
22831: EMPTY
22832: LIST
22833: LIST
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: PPUSH
22839: CALL_OW 69
22843: ST_TO_ADDR
// if not tmp then
22844: LD_VAR 0 2
22848: NOT
22849: IFFALSE 22853
// exit ;
22851: GO 22890
// DestroyUnit ( tmp [ 1 ] ) ;
22853: LD_VAR 0 2
22857: PUSH
22858: LD_INT 1
22860: ARRAY
22861: PPUSH
22862: CALL_OW 65
// end ; 5 .. 7 :
22866: GO 22890
22868: LD_INT 5
22870: DOUBLE
22871: GREATEREQUAL
22872: IFFALSE 22880
22874: LD_INT 7
22876: DOUBLE
22877: LESSEQUAL
22878: IFTRUE 22882
22880: GO 22889
22882: POP
// StreamSibBomb ; end ;
22883: CALL 19140 0 0
22887: GO 22890
22889: POP
// end ;
22890: PPOPN 3
22892: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22893: LD_EXP 47
22897: PUSH
22898: LD_EXP 97
22902: AND
22903: IFFALSE 23059
22905: GO 22907
22907: DISABLE
22908: LD_INT 0
22910: PPUSH
22911: PPUSH
22912: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22913: LD_ADDR_VAR 0 2
22917: PUSH
22918: LD_INT 81
22920: PUSH
22921: LD_OWVAR 2
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: PUSH
22930: LD_INT 2
22932: PUSH
22933: LD_INT 21
22935: PUSH
22936: LD_INT 1
22938: PUSH
22939: EMPTY
22940: LIST
22941: LIST
22942: PUSH
22943: LD_INT 21
22945: PUSH
22946: LD_INT 2
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: LIST
22957: PUSH
22958: EMPTY
22959: LIST
22960: LIST
22961: PPUSH
22962: CALL_OW 69
22966: ST_TO_ADDR
// if not tmp then
22967: LD_VAR 0 2
22971: NOT
22972: IFFALSE 22976
// exit ;
22974: GO 23059
// p := 0 ;
22976: LD_ADDR_VAR 0 3
22980: PUSH
22981: LD_INT 0
22983: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22984: LD_INT 35
22986: PPUSH
22987: CALL_OW 67
// p := p + 1 ;
22991: LD_ADDR_VAR 0 3
22995: PUSH
22996: LD_VAR 0 3
23000: PUSH
23001: LD_INT 1
23003: PLUS
23004: ST_TO_ADDR
// for i in tmp do
23005: LD_ADDR_VAR 0 1
23009: PUSH
23010: LD_VAR 0 2
23014: PUSH
23015: FOR_IN
23016: IFFALSE 23047
// if GetLives ( i ) < 1000 then
23018: LD_VAR 0 1
23022: PPUSH
23023: CALL_OW 256
23027: PUSH
23028: LD_INT 1000
23030: LESS
23031: IFFALSE 23045
// SetLives ( i , 1000 ) ;
23033: LD_VAR 0 1
23037: PPUSH
23038: LD_INT 1000
23040: PPUSH
23041: CALL_OW 234
23045: GO 23015
23047: POP
23048: POP
// until p > 20 ;
23049: LD_VAR 0 3
23053: PUSH
23054: LD_INT 20
23056: GREATER
23057: IFFALSE 22984
// end ;
23059: PPOPN 3
23061: END
// every 0 0$1 trigger StreamModeActive and sTime do
23062: LD_EXP 47
23066: PUSH
23067: LD_EXP 98
23071: AND
23072: IFFALSE 23107
23074: GO 23076
23076: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23077: LD_INT 28
23079: PPUSH
23080: LD_OWVAR 2
23084: PPUSH
23085: LD_INT 2
23087: PPUSH
23088: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23092: LD_INT 30
23094: PPUSH
23095: LD_OWVAR 2
23099: PPUSH
23100: LD_INT 2
23102: PPUSH
23103: CALL_OW 322
// end ;
23107: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23108: LD_EXP 47
23112: PUSH
23113: LD_EXP 99
23117: AND
23118: IFFALSE 23239
23120: GO 23122
23122: DISABLE
23123: LD_INT 0
23125: PPUSH
23126: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23127: LD_ADDR_VAR 0 2
23131: PUSH
23132: LD_INT 22
23134: PUSH
23135: LD_OWVAR 2
23139: PUSH
23140: EMPTY
23141: LIST
23142: LIST
23143: PUSH
23144: LD_INT 21
23146: PUSH
23147: LD_INT 1
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: PUSH
23154: LD_INT 3
23156: PUSH
23157: LD_INT 23
23159: PUSH
23160: LD_INT 0
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: LIST
23175: PPUSH
23176: CALL_OW 69
23180: ST_TO_ADDR
// if not tmp then
23181: LD_VAR 0 2
23185: NOT
23186: IFFALSE 23190
// exit ;
23188: GO 23239
// for i in tmp do
23190: LD_ADDR_VAR 0 1
23194: PUSH
23195: LD_VAR 0 2
23199: PUSH
23200: FOR_IN
23201: IFFALSE 23237
// begin if Crawls ( i ) then
23203: LD_VAR 0 1
23207: PPUSH
23208: CALL_OW 318
23212: IFFALSE 23223
// ComWalk ( i ) ;
23214: LD_VAR 0 1
23218: PPUSH
23219: CALL_OW 138
// SetClass ( i , 2 ) ;
23223: LD_VAR 0 1
23227: PPUSH
23228: LD_INT 2
23230: PPUSH
23231: CALL_OW 336
// end ;
23235: GO 23200
23237: POP
23238: POP
// end ;
23239: PPOPN 2
23241: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23242: LD_EXP 47
23246: PUSH
23247: LD_EXP 100
23251: AND
23252: IFFALSE 23533
23254: GO 23256
23256: DISABLE
23257: LD_INT 0
23259: PPUSH
23260: PPUSH
23261: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23262: LD_OWVAR 2
23266: PPUSH
23267: LD_INT 9
23269: PPUSH
23270: LD_INT 1
23272: PPUSH
23273: LD_INT 1
23275: PPUSH
23276: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23280: LD_INT 9
23282: PPUSH
23283: LD_OWVAR 2
23287: PPUSH
23288: CALL_OW 343
// uc_side := 9 ;
23292: LD_ADDR_OWVAR 20
23296: PUSH
23297: LD_INT 9
23299: ST_TO_ADDR
// uc_nation := 2 ;
23300: LD_ADDR_OWVAR 21
23304: PUSH
23305: LD_INT 2
23307: ST_TO_ADDR
// hc_name := Dark Warrior ;
23308: LD_ADDR_OWVAR 26
23312: PUSH
23313: LD_STRING Dark Warrior
23315: ST_TO_ADDR
// hc_gallery :=  ;
23316: LD_ADDR_OWVAR 33
23320: PUSH
23321: LD_STRING 
23323: ST_TO_ADDR
// hc_noskilllimit := true ;
23324: LD_ADDR_OWVAR 76
23328: PUSH
23329: LD_INT 1
23331: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23332: LD_ADDR_OWVAR 31
23336: PUSH
23337: LD_INT 30
23339: PUSH
23340: LD_INT 30
23342: PUSH
23343: LD_INT 30
23345: PUSH
23346: LD_INT 30
23348: PUSH
23349: EMPTY
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: ST_TO_ADDR
// un := CreateHuman ;
23355: LD_ADDR_VAR 0 3
23359: PUSH
23360: CALL_OW 44
23364: ST_TO_ADDR
// hc_noskilllimit := false ;
23365: LD_ADDR_OWVAR 76
23369: PUSH
23370: LD_INT 0
23372: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23373: LD_VAR 0 3
23377: PPUSH
23378: LD_INT 1
23380: PPUSH
23381: CALL_OW 51
// p := 0 ;
23385: LD_ADDR_VAR 0 2
23389: PUSH
23390: LD_INT 0
23392: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23393: LD_INT 35
23395: PPUSH
23396: CALL_OW 67
// p := p + 1 ;
23400: LD_ADDR_VAR 0 2
23404: PUSH
23405: LD_VAR 0 2
23409: PUSH
23410: LD_INT 1
23412: PLUS
23413: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23414: LD_VAR 0 3
23418: PPUSH
23419: CALL_OW 256
23423: PUSH
23424: LD_INT 1000
23426: LESS
23427: IFFALSE 23441
// SetLives ( un , 1000 ) ;
23429: LD_VAR 0 3
23433: PPUSH
23434: LD_INT 1000
23436: PPUSH
23437: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23441: LD_VAR 0 3
23445: PPUSH
23446: LD_INT 81
23448: PUSH
23449: LD_OWVAR 2
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: PUSH
23458: LD_INT 91
23460: PUSH
23461: LD_VAR 0 3
23465: PUSH
23466: LD_INT 30
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: LIST
23473: PUSH
23474: EMPTY
23475: LIST
23476: LIST
23477: PPUSH
23478: CALL_OW 69
23482: PPUSH
23483: LD_VAR 0 3
23487: PPUSH
23488: CALL_OW 74
23492: PPUSH
23493: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
23497: LD_VAR 0 2
23501: PUSH
23502: LD_INT 60
23504: GREATER
23505: PUSH
23506: LD_VAR 0 3
23510: PPUSH
23511: CALL_OW 301
23515: OR
23516: IFFALSE 23393
// if un then
23518: LD_VAR 0 3
23522: IFFALSE 23533
// RemoveUnit ( un ) ;
23524: LD_VAR 0 3
23528: PPUSH
23529: CALL_OW 64
// end ;
23533: PPOPN 3
23535: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23536: LD_INT 0
23538: PPUSH
// case cmd of 301 :
23539: LD_VAR 0 1
23543: PUSH
23544: LD_INT 301
23546: DOUBLE
23547: EQUAL
23548: IFTRUE 23552
23550: GO 23584
23552: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23553: LD_VAR 0 6
23557: PPUSH
23558: LD_VAR 0 7
23562: PPUSH
23563: LD_VAR 0 8
23567: PPUSH
23568: LD_VAR 0 4
23572: PPUSH
23573: LD_VAR 0 5
23577: PPUSH
23578: CALL 24785 0 5
23582: GO 23705
23584: LD_INT 302
23586: DOUBLE
23587: EQUAL
23588: IFTRUE 23592
23590: GO 23629
23592: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23593: LD_VAR 0 6
23597: PPUSH
23598: LD_VAR 0 7
23602: PPUSH
23603: LD_VAR 0 8
23607: PPUSH
23608: LD_VAR 0 9
23612: PPUSH
23613: LD_VAR 0 4
23617: PPUSH
23618: LD_VAR 0 5
23622: PPUSH
23623: CALL 24876 0 6
23627: GO 23705
23629: LD_INT 303
23631: DOUBLE
23632: EQUAL
23633: IFTRUE 23637
23635: GO 23674
23637: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23638: LD_VAR 0 6
23642: PPUSH
23643: LD_VAR 0 7
23647: PPUSH
23648: LD_VAR 0 8
23652: PPUSH
23653: LD_VAR 0 9
23657: PPUSH
23658: LD_VAR 0 4
23662: PPUSH
23663: LD_VAR 0 5
23667: PPUSH
23668: CALL 23710 0 6
23672: GO 23705
23674: LD_INT 304
23676: DOUBLE
23677: EQUAL
23678: IFTRUE 23682
23680: GO 23704
23682: POP
// hHackTeleport ( unit , x , y ) ; end ;
23683: LD_VAR 0 2
23687: PPUSH
23688: LD_VAR 0 4
23692: PPUSH
23693: LD_VAR 0 5
23697: PPUSH
23698: CALL 25469 0 3
23702: GO 23705
23704: POP
// end ;
23705: LD_VAR 0 12
23709: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23710: LD_INT 0
23712: PPUSH
23713: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23714: LD_VAR 0 1
23718: PUSH
23719: LD_INT 1
23721: LESS
23722: PUSH
23723: LD_VAR 0 1
23727: PUSH
23728: LD_INT 3
23730: GREATER
23731: OR
23732: PUSH
23733: LD_VAR 0 5
23737: PPUSH
23738: LD_VAR 0 6
23742: PPUSH
23743: CALL_OW 428
23747: OR
23748: IFFALSE 23752
// exit ;
23750: GO 24472
// uc_side := your_side ;
23752: LD_ADDR_OWVAR 20
23756: PUSH
23757: LD_OWVAR 2
23761: ST_TO_ADDR
// uc_nation := nation ;
23762: LD_ADDR_OWVAR 21
23766: PUSH
23767: LD_VAR 0 1
23771: ST_TO_ADDR
// bc_level = 1 ;
23772: LD_ADDR_OWVAR 43
23776: PUSH
23777: LD_INT 1
23779: ST_TO_ADDR
// case btype of 1 :
23780: LD_VAR 0 2
23784: PUSH
23785: LD_INT 1
23787: DOUBLE
23788: EQUAL
23789: IFTRUE 23793
23791: GO 23804
23793: POP
// bc_type := b_depot ; 2 :
23794: LD_ADDR_OWVAR 42
23798: PUSH
23799: LD_INT 0
23801: ST_TO_ADDR
23802: GO 24416
23804: LD_INT 2
23806: DOUBLE
23807: EQUAL
23808: IFTRUE 23812
23810: GO 23823
23812: POP
// bc_type := b_warehouse ; 3 :
23813: LD_ADDR_OWVAR 42
23817: PUSH
23818: LD_INT 1
23820: ST_TO_ADDR
23821: GO 24416
23823: LD_INT 3
23825: DOUBLE
23826: EQUAL
23827: IFTRUE 23831
23829: GO 23842
23831: POP
// bc_type := b_lab ; 4 .. 9 :
23832: LD_ADDR_OWVAR 42
23836: PUSH
23837: LD_INT 6
23839: ST_TO_ADDR
23840: GO 24416
23842: LD_INT 4
23844: DOUBLE
23845: GREATEREQUAL
23846: IFFALSE 23854
23848: LD_INT 9
23850: DOUBLE
23851: LESSEQUAL
23852: IFTRUE 23856
23854: GO 23908
23856: POP
// begin bc_type := b_lab_half ;
23857: LD_ADDR_OWVAR 42
23861: PUSH
23862: LD_INT 7
23864: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23865: LD_ADDR_OWVAR 44
23869: PUSH
23870: LD_INT 10
23872: PUSH
23873: LD_INT 11
23875: PUSH
23876: LD_INT 12
23878: PUSH
23879: LD_INT 15
23881: PUSH
23882: LD_INT 14
23884: PUSH
23885: LD_INT 13
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: PUSH
23896: LD_VAR 0 2
23900: PUSH
23901: LD_INT 3
23903: MINUS
23904: ARRAY
23905: ST_TO_ADDR
// end ; 10 .. 13 :
23906: GO 24416
23908: LD_INT 10
23910: DOUBLE
23911: GREATEREQUAL
23912: IFFALSE 23920
23914: LD_INT 13
23916: DOUBLE
23917: LESSEQUAL
23918: IFTRUE 23922
23920: GO 23999
23922: POP
// begin bc_type := b_lab_full ;
23923: LD_ADDR_OWVAR 42
23927: PUSH
23928: LD_INT 8
23930: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23931: LD_ADDR_OWVAR 44
23935: PUSH
23936: LD_INT 10
23938: PUSH
23939: LD_INT 12
23941: PUSH
23942: LD_INT 14
23944: PUSH
23945: LD_INT 13
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: PUSH
23954: LD_VAR 0 2
23958: PUSH
23959: LD_INT 9
23961: MINUS
23962: ARRAY
23963: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23964: LD_ADDR_OWVAR 45
23968: PUSH
23969: LD_INT 11
23971: PUSH
23972: LD_INT 15
23974: PUSH
23975: LD_INT 12
23977: PUSH
23978: LD_INT 15
23980: PUSH
23981: EMPTY
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: PUSH
23987: LD_VAR 0 2
23991: PUSH
23992: LD_INT 9
23994: MINUS
23995: ARRAY
23996: ST_TO_ADDR
// end ; 14 :
23997: GO 24416
23999: LD_INT 14
24001: DOUBLE
24002: EQUAL
24003: IFTRUE 24007
24005: GO 24018
24007: POP
// bc_type := b_workshop ; 15 :
24008: LD_ADDR_OWVAR 42
24012: PUSH
24013: LD_INT 2
24015: ST_TO_ADDR
24016: GO 24416
24018: LD_INT 15
24020: DOUBLE
24021: EQUAL
24022: IFTRUE 24026
24024: GO 24037
24026: POP
// bc_type := b_factory ; 16 :
24027: LD_ADDR_OWVAR 42
24031: PUSH
24032: LD_INT 3
24034: ST_TO_ADDR
24035: GO 24416
24037: LD_INT 16
24039: DOUBLE
24040: EQUAL
24041: IFTRUE 24045
24043: GO 24056
24045: POP
// bc_type := b_ext_gun ; 17 :
24046: LD_ADDR_OWVAR 42
24050: PUSH
24051: LD_INT 17
24053: ST_TO_ADDR
24054: GO 24416
24056: LD_INT 17
24058: DOUBLE
24059: EQUAL
24060: IFTRUE 24064
24062: GO 24092
24064: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24065: LD_ADDR_OWVAR 42
24069: PUSH
24070: LD_INT 19
24072: PUSH
24073: LD_INT 23
24075: PUSH
24076: LD_INT 19
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: LIST
24083: PUSH
24084: LD_VAR 0 1
24088: ARRAY
24089: ST_TO_ADDR
24090: GO 24416
24092: LD_INT 18
24094: DOUBLE
24095: EQUAL
24096: IFTRUE 24100
24098: GO 24111
24100: POP
// bc_type := b_ext_radar ; 19 :
24101: LD_ADDR_OWVAR 42
24105: PUSH
24106: LD_INT 20
24108: ST_TO_ADDR
24109: GO 24416
24111: LD_INT 19
24113: DOUBLE
24114: EQUAL
24115: IFTRUE 24119
24117: GO 24130
24119: POP
// bc_type := b_ext_radio ; 20 :
24120: LD_ADDR_OWVAR 42
24124: PUSH
24125: LD_INT 22
24127: ST_TO_ADDR
24128: GO 24416
24130: LD_INT 20
24132: DOUBLE
24133: EQUAL
24134: IFTRUE 24138
24136: GO 24149
24138: POP
// bc_type := b_ext_siberium ; 21 :
24139: LD_ADDR_OWVAR 42
24143: PUSH
24144: LD_INT 21
24146: ST_TO_ADDR
24147: GO 24416
24149: LD_INT 21
24151: DOUBLE
24152: EQUAL
24153: IFTRUE 24157
24155: GO 24168
24157: POP
// bc_type := b_ext_computer ; 22 :
24158: LD_ADDR_OWVAR 42
24162: PUSH
24163: LD_INT 24
24165: ST_TO_ADDR
24166: GO 24416
24168: LD_INT 22
24170: DOUBLE
24171: EQUAL
24172: IFTRUE 24176
24174: GO 24187
24176: POP
// bc_type := b_ext_track ; 23 :
24177: LD_ADDR_OWVAR 42
24181: PUSH
24182: LD_INT 16
24184: ST_TO_ADDR
24185: GO 24416
24187: LD_INT 23
24189: DOUBLE
24190: EQUAL
24191: IFTRUE 24195
24193: GO 24206
24195: POP
// bc_type := b_ext_laser ; 24 :
24196: LD_ADDR_OWVAR 42
24200: PUSH
24201: LD_INT 25
24203: ST_TO_ADDR
24204: GO 24416
24206: LD_INT 24
24208: DOUBLE
24209: EQUAL
24210: IFTRUE 24214
24212: GO 24225
24214: POP
// bc_type := b_control_tower ; 25 :
24215: LD_ADDR_OWVAR 42
24219: PUSH
24220: LD_INT 36
24222: ST_TO_ADDR
24223: GO 24416
24225: LD_INT 25
24227: DOUBLE
24228: EQUAL
24229: IFTRUE 24233
24231: GO 24244
24233: POP
// bc_type := b_breastwork ; 26 :
24234: LD_ADDR_OWVAR 42
24238: PUSH
24239: LD_INT 31
24241: ST_TO_ADDR
24242: GO 24416
24244: LD_INT 26
24246: DOUBLE
24247: EQUAL
24248: IFTRUE 24252
24250: GO 24263
24252: POP
// bc_type := b_bunker ; 27 :
24253: LD_ADDR_OWVAR 42
24257: PUSH
24258: LD_INT 32
24260: ST_TO_ADDR
24261: GO 24416
24263: LD_INT 27
24265: DOUBLE
24266: EQUAL
24267: IFTRUE 24271
24269: GO 24282
24271: POP
// bc_type := b_turret ; 28 :
24272: LD_ADDR_OWVAR 42
24276: PUSH
24277: LD_INT 33
24279: ST_TO_ADDR
24280: GO 24416
24282: LD_INT 28
24284: DOUBLE
24285: EQUAL
24286: IFTRUE 24290
24288: GO 24301
24290: POP
// bc_type := b_armoury ; 29 :
24291: LD_ADDR_OWVAR 42
24295: PUSH
24296: LD_INT 4
24298: ST_TO_ADDR
24299: GO 24416
24301: LD_INT 29
24303: DOUBLE
24304: EQUAL
24305: IFTRUE 24309
24307: GO 24320
24309: POP
// bc_type := b_barracks ; 30 :
24310: LD_ADDR_OWVAR 42
24314: PUSH
24315: LD_INT 5
24317: ST_TO_ADDR
24318: GO 24416
24320: LD_INT 30
24322: DOUBLE
24323: EQUAL
24324: IFTRUE 24328
24326: GO 24339
24328: POP
// bc_type := b_solar_power ; 31 :
24329: LD_ADDR_OWVAR 42
24333: PUSH
24334: LD_INT 27
24336: ST_TO_ADDR
24337: GO 24416
24339: LD_INT 31
24341: DOUBLE
24342: EQUAL
24343: IFTRUE 24347
24345: GO 24358
24347: POP
// bc_type := b_oil_power ; 32 :
24348: LD_ADDR_OWVAR 42
24352: PUSH
24353: LD_INT 26
24355: ST_TO_ADDR
24356: GO 24416
24358: LD_INT 32
24360: DOUBLE
24361: EQUAL
24362: IFTRUE 24366
24364: GO 24377
24366: POP
// bc_type := b_siberite_power ; 33 :
24367: LD_ADDR_OWVAR 42
24371: PUSH
24372: LD_INT 28
24374: ST_TO_ADDR
24375: GO 24416
24377: LD_INT 33
24379: DOUBLE
24380: EQUAL
24381: IFTRUE 24385
24383: GO 24396
24385: POP
// bc_type := b_oil_mine ; 34 :
24386: LD_ADDR_OWVAR 42
24390: PUSH
24391: LD_INT 29
24393: ST_TO_ADDR
24394: GO 24416
24396: LD_INT 34
24398: DOUBLE
24399: EQUAL
24400: IFTRUE 24404
24402: GO 24415
24404: POP
// bc_type := b_siberite_mine ; end ;
24405: LD_ADDR_OWVAR 42
24409: PUSH
24410: LD_INT 30
24412: ST_TO_ADDR
24413: GO 24416
24415: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24416: LD_ADDR_VAR 0 8
24420: PUSH
24421: LD_VAR 0 5
24425: PPUSH
24426: LD_VAR 0 6
24430: PPUSH
24431: LD_VAR 0 3
24435: PPUSH
24436: CALL_OW 47
24440: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24441: LD_OWVAR 42
24445: PUSH
24446: LD_INT 32
24448: PUSH
24449: LD_INT 33
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: IN
24456: IFFALSE 24472
// PlaceWeaponTurret ( b , weapon ) ;
24458: LD_VAR 0 8
24462: PPUSH
24463: LD_VAR 0 4
24467: PPUSH
24468: CALL_OW 431
// end ;
24472: LD_VAR 0 7
24476: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24477: LD_INT 0
24479: PPUSH
24480: PPUSH
24481: PPUSH
24482: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24483: LD_ADDR_VAR 0 4
24487: PUSH
24488: LD_INT 22
24490: PUSH
24491: LD_OWVAR 2
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: PUSH
24500: LD_INT 2
24502: PUSH
24503: LD_INT 30
24505: PUSH
24506: LD_INT 0
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: PUSH
24513: LD_INT 30
24515: PUSH
24516: LD_INT 1
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: LIST
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: PPUSH
24532: CALL_OW 69
24536: ST_TO_ADDR
// if not tmp then
24537: LD_VAR 0 4
24541: NOT
24542: IFFALSE 24546
// exit ;
24544: GO 24605
// for i in tmp do
24546: LD_ADDR_VAR 0 2
24550: PUSH
24551: LD_VAR 0 4
24555: PUSH
24556: FOR_IN
24557: IFFALSE 24603
// for j = 1 to 3 do
24559: LD_ADDR_VAR 0 3
24563: PUSH
24564: DOUBLE
24565: LD_INT 1
24567: DEC
24568: ST_TO_ADDR
24569: LD_INT 3
24571: PUSH
24572: FOR_TO
24573: IFFALSE 24599
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24575: LD_VAR 0 2
24579: PPUSH
24580: CALL_OW 274
24584: PPUSH
24585: LD_VAR 0 3
24589: PPUSH
24590: LD_INT 99999
24592: PPUSH
24593: CALL_OW 277
24597: GO 24572
24599: POP
24600: POP
24601: GO 24556
24603: POP
24604: POP
// end ;
24605: LD_VAR 0 1
24609: RET
// export function hHackSetLevel10 ; var i , j ; begin
24610: LD_INT 0
24612: PPUSH
24613: PPUSH
24614: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24615: LD_ADDR_VAR 0 2
24619: PUSH
24620: LD_INT 21
24622: PUSH
24623: LD_INT 1
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PPUSH
24630: CALL_OW 69
24634: PUSH
24635: FOR_IN
24636: IFFALSE 24688
// if IsSelected ( i ) then
24638: LD_VAR 0 2
24642: PPUSH
24643: CALL_OW 306
24647: IFFALSE 24686
// begin for j := 1 to 4 do
24649: LD_ADDR_VAR 0 3
24653: PUSH
24654: DOUBLE
24655: LD_INT 1
24657: DEC
24658: ST_TO_ADDR
24659: LD_INT 4
24661: PUSH
24662: FOR_TO
24663: IFFALSE 24684
// SetSkill ( i , j , 10 ) ;
24665: LD_VAR 0 2
24669: PPUSH
24670: LD_VAR 0 3
24674: PPUSH
24675: LD_INT 10
24677: PPUSH
24678: CALL_OW 237
24682: GO 24662
24684: POP
24685: POP
// end ;
24686: GO 24635
24688: POP
24689: POP
// end ;
24690: LD_VAR 0 1
24694: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24695: LD_INT 0
24697: PPUSH
24698: PPUSH
24699: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24700: LD_ADDR_VAR 0 2
24704: PUSH
24705: LD_INT 22
24707: PUSH
24708: LD_OWVAR 2
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: PUSH
24717: LD_INT 21
24719: PUSH
24720: LD_INT 1
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: PPUSH
24731: CALL_OW 69
24735: PUSH
24736: FOR_IN
24737: IFFALSE 24778
// begin for j := 1 to 4 do
24739: LD_ADDR_VAR 0 3
24743: PUSH
24744: DOUBLE
24745: LD_INT 1
24747: DEC
24748: ST_TO_ADDR
24749: LD_INT 4
24751: PUSH
24752: FOR_TO
24753: IFFALSE 24774
// SetSkill ( i , j , 10 ) ;
24755: LD_VAR 0 2
24759: PPUSH
24760: LD_VAR 0 3
24764: PPUSH
24765: LD_INT 10
24767: PPUSH
24768: CALL_OW 237
24772: GO 24752
24774: POP
24775: POP
// end ;
24776: GO 24736
24778: POP
24779: POP
// end ;
24780: LD_VAR 0 1
24784: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24785: LD_INT 0
24787: PPUSH
// uc_side := your_side ;
24788: LD_ADDR_OWVAR 20
24792: PUSH
24793: LD_OWVAR 2
24797: ST_TO_ADDR
// uc_nation := nation ;
24798: LD_ADDR_OWVAR 21
24802: PUSH
24803: LD_VAR 0 1
24807: ST_TO_ADDR
// InitHc ;
24808: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24812: LD_INT 0
24814: PPUSH
24815: LD_VAR 0 2
24819: PPUSH
24820: LD_VAR 0 3
24824: PPUSH
24825: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24829: LD_VAR 0 4
24833: PPUSH
24834: LD_VAR 0 5
24838: PPUSH
24839: CALL_OW 428
24843: PUSH
24844: LD_INT 0
24846: EQUAL
24847: IFFALSE 24871
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24849: CALL_OW 44
24853: PPUSH
24854: LD_VAR 0 4
24858: PPUSH
24859: LD_VAR 0 5
24863: PPUSH
24864: LD_INT 1
24866: PPUSH
24867: CALL_OW 48
// end ;
24871: LD_VAR 0 6
24875: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24876: LD_INT 0
24878: PPUSH
24879: PPUSH
// uc_side := your_side ;
24880: LD_ADDR_OWVAR 20
24884: PUSH
24885: LD_OWVAR 2
24889: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24890: LD_VAR 0 1
24894: PUSH
24895: LD_INT 1
24897: PUSH
24898: LD_INT 2
24900: PUSH
24901: LD_INT 3
24903: PUSH
24904: LD_INT 4
24906: PUSH
24907: LD_INT 5
24909: PUSH
24910: EMPTY
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: IN
24917: IFFALSE 24929
// uc_nation := nation_american else
24919: LD_ADDR_OWVAR 21
24923: PUSH
24924: LD_INT 1
24926: ST_TO_ADDR
24927: GO 24972
// if chassis in [ 11 , 12 , 13 , 14 ] then
24929: LD_VAR 0 1
24933: PUSH
24934: LD_INT 11
24936: PUSH
24937: LD_INT 12
24939: PUSH
24940: LD_INT 13
24942: PUSH
24943: LD_INT 14
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: IN
24952: IFFALSE 24964
// uc_nation := nation_arabian else
24954: LD_ADDR_OWVAR 21
24958: PUSH
24959: LD_INT 2
24961: ST_TO_ADDR
24962: GO 24972
// uc_nation := nation_russian ;
24964: LD_ADDR_OWVAR 21
24968: PUSH
24969: LD_INT 3
24971: ST_TO_ADDR
// vc_chassis := chassis ;
24972: LD_ADDR_OWVAR 37
24976: PUSH
24977: LD_VAR 0 1
24981: ST_TO_ADDR
// vc_engine := engine ;
24982: LD_ADDR_OWVAR 39
24986: PUSH
24987: LD_VAR 0 2
24991: ST_TO_ADDR
// vc_control := control ;
24992: LD_ADDR_OWVAR 38
24996: PUSH
24997: LD_VAR 0 3
25001: ST_TO_ADDR
// vc_weapon := weapon ;
25002: LD_ADDR_OWVAR 40
25006: PUSH
25007: LD_VAR 0 4
25011: ST_TO_ADDR
// un := CreateVehicle ;
25012: LD_ADDR_VAR 0 8
25016: PUSH
25017: CALL_OW 45
25021: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25022: LD_VAR 0 8
25026: PPUSH
25027: LD_INT 0
25029: PPUSH
25030: LD_INT 5
25032: PPUSH
25033: CALL_OW 12
25037: PPUSH
25038: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25042: LD_VAR 0 8
25046: PPUSH
25047: LD_VAR 0 5
25051: PPUSH
25052: LD_VAR 0 6
25056: PPUSH
25057: LD_INT 1
25059: PPUSH
25060: CALL_OW 48
// end ;
25064: LD_VAR 0 7
25068: RET
// export hInvincible ; every 1 do
25069: GO 25071
25071: DISABLE
// hInvincible := [ ] ;
25072: LD_ADDR_EXP 101
25076: PUSH
25077: EMPTY
25078: ST_TO_ADDR
25079: END
// every 10 do var i ;
25080: GO 25082
25082: DISABLE
25083: LD_INT 0
25085: PPUSH
// begin enable ;
25086: ENABLE
// if not hInvincible then
25087: LD_EXP 101
25091: NOT
25092: IFFALSE 25096
// exit ;
25094: GO 25140
// for i in hInvincible do
25096: LD_ADDR_VAR 0 1
25100: PUSH
25101: LD_EXP 101
25105: PUSH
25106: FOR_IN
25107: IFFALSE 25138
// if GetLives ( i ) < 1000 then
25109: LD_VAR 0 1
25113: PPUSH
25114: CALL_OW 256
25118: PUSH
25119: LD_INT 1000
25121: LESS
25122: IFFALSE 25136
// SetLives ( i , 1000 ) ;
25124: LD_VAR 0 1
25128: PPUSH
25129: LD_INT 1000
25131: PPUSH
25132: CALL_OW 234
25136: GO 25106
25138: POP
25139: POP
// end ;
25140: PPOPN 1
25142: END
// export function hHackInvincible ; var i ; begin
25143: LD_INT 0
25145: PPUSH
25146: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25147: LD_ADDR_VAR 0 2
25151: PUSH
25152: LD_INT 2
25154: PUSH
25155: LD_INT 21
25157: PUSH
25158: LD_INT 1
25160: PUSH
25161: EMPTY
25162: LIST
25163: LIST
25164: PUSH
25165: LD_INT 21
25167: PUSH
25168: LD_INT 2
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: LIST
25179: PPUSH
25180: CALL_OW 69
25184: PUSH
25185: FOR_IN
25186: IFFALSE 25247
// if IsSelected ( i ) then
25188: LD_VAR 0 2
25192: PPUSH
25193: CALL_OW 306
25197: IFFALSE 25245
// begin if i in hInvincible then
25199: LD_VAR 0 2
25203: PUSH
25204: LD_EXP 101
25208: IN
25209: IFFALSE 25229
// hInvincible := hInvincible diff i else
25211: LD_ADDR_EXP 101
25215: PUSH
25216: LD_EXP 101
25220: PUSH
25221: LD_VAR 0 2
25225: DIFF
25226: ST_TO_ADDR
25227: GO 25245
// hInvincible := hInvincible union i ;
25229: LD_ADDR_EXP 101
25233: PUSH
25234: LD_EXP 101
25238: PUSH
25239: LD_VAR 0 2
25243: UNION
25244: ST_TO_ADDR
// end ;
25245: GO 25185
25247: POP
25248: POP
// end ;
25249: LD_VAR 0 1
25253: RET
// export function hHackInvisible ; var i , j ; begin
25254: LD_INT 0
25256: PPUSH
25257: PPUSH
25258: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25259: LD_ADDR_VAR 0 2
25263: PUSH
25264: LD_INT 21
25266: PUSH
25267: LD_INT 1
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: PPUSH
25274: CALL_OW 69
25278: PUSH
25279: FOR_IN
25280: IFFALSE 25304
// if IsSelected ( i ) then
25282: LD_VAR 0 2
25286: PPUSH
25287: CALL_OW 306
25291: IFFALSE 25302
// ComForceInvisible ( i ) ;
25293: LD_VAR 0 2
25297: PPUSH
25298: CALL_OW 496
25302: GO 25279
25304: POP
25305: POP
// end ;
25306: LD_VAR 0 1
25310: RET
// export function hHackChangeYourSide ; begin
25311: LD_INT 0
25313: PPUSH
// if your_side = 8 then
25314: LD_OWVAR 2
25318: PUSH
25319: LD_INT 8
25321: EQUAL
25322: IFFALSE 25334
// your_side := 0 else
25324: LD_ADDR_OWVAR 2
25328: PUSH
25329: LD_INT 0
25331: ST_TO_ADDR
25332: GO 25348
// your_side := your_side + 1 ;
25334: LD_ADDR_OWVAR 2
25338: PUSH
25339: LD_OWVAR 2
25343: PUSH
25344: LD_INT 1
25346: PLUS
25347: ST_TO_ADDR
// end ;
25348: LD_VAR 0 1
25352: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25353: LD_INT 0
25355: PPUSH
25356: PPUSH
25357: PPUSH
// for i in all_units do
25358: LD_ADDR_VAR 0 2
25362: PUSH
25363: LD_OWVAR 3
25367: PUSH
25368: FOR_IN
25369: IFFALSE 25447
// if IsSelected ( i ) then
25371: LD_VAR 0 2
25375: PPUSH
25376: CALL_OW 306
25380: IFFALSE 25445
// begin j := GetSide ( i ) ;
25382: LD_ADDR_VAR 0 3
25386: PUSH
25387: LD_VAR 0 2
25391: PPUSH
25392: CALL_OW 255
25396: ST_TO_ADDR
// if j = 8 then
25397: LD_VAR 0 3
25401: PUSH
25402: LD_INT 8
25404: EQUAL
25405: IFFALSE 25417
// j := 0 else
25407: LD_ADDR_VAR 0 3
25411: PUSH
25412: LD_INT 0
25414: ST_TO_ADDR
25415: GO 25431
// j := j + 1 ;
25417: LD_ADDR_VAR 0 3
25421: PUSH
25422: LD_VAR 0 3
25426: PUSH
25427: LD_INT 1
25429: PLUS
25430: ST_TO_ADDR
// SetSide ( i , j ) ;
25431: LD_VAR 0 2
25435: PPUSH
25436: LD_VAR 0 3
25440: PPUSH
25441: CALL_OW 235
// end ;
25445: GO 25368
25447: POP
25448: POP
// end ;
25449: LD_VAR 0 1
25453: RET
// export function hHackFog ; begin
25454: LD_INT 0
25456: PPUSH
// FogOff ( true ) ;
25457: LD_INT 1
25459: PPUSH
25460: CALL_OW 344
// end ;
25464: LD_VAR 0 1
25468: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25469: LD_INT 0
25471: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25472: LD_VAR 0 1
25476: PPUSH
25477: LD_VAR 0 2
25481: PPUSH
25482: LD_VAR 0 3
25486: PPUSH
25487: LD_INT 1
25489: PPUSH
25490: LD_INT 1
25492: PPUSH
25493: CALL_OW 483
// CenterOnXY ( x , y ) ;
25497: LD_VAR 0 2
25501: PPUSH
25502: LD_VAR 0 3
25506: PPUSH
25507: CALL_OW 84
// end ; end_of_file
25511: LD_VAR 0 4
25515: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25516: LD_INT 0
25518: PPUSH
25519: PPUSH
25520: PPUSH
25521: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25522: LD_VAR 0 1
25526: PPUSH
25527: CALL_OW 264
25531: PUSH
25532: LD_EXP 36
25536: EQUAL
25537: IFFALSE 25609
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25539: LD_INT 68
25541: PPUSH
25542: LD_VAR 0 1
25546: PPUSH
25547: CALL_OW 255
25551: PPUSH
25552: CALL_OW 321
25556: PUSH
25557: LD_INT 2
25559: EQUAL
25560: IFFALSE 25572
// eff := 70 else
25562: LD_ADDR_VAR 0 4
25566: PUSH
25567: LD_INT 70
25569: ST_TO_ADDR
25570: GO 25580
// eff := 30 ;
25572: LD_ADDR_VAR 0 4
25576: PUSH
25577: LD_INT 30
25579: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25580: LD_VAR 0 1
25584: PPUSH
25585: CALL_OW 250
25589: PPUSH
25590: LD_VAR 0 1
25594: PPUSH
25595: CALL_OW 251
25599: PPUSH
25600: LD_VAR 0 4
25604: PPUSH
25605: CALL_OW 495
// end ; end ;
25609: LD_VAR 0 2
25613: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25614: LD_INT 0
25616: PPUSH
// end ;
25617: LD_VAR 0 4
25621: RET
// export function SOS_Command ( cmd ) ; begin
25622: LD_INT 0
25624: PPUSH
// end ;
25625: LD_VAR 0 2
25629: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25630: LD_INT 0
25632: PPUSH
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25633: LD_VAR 0 1
25637: PUSH
25638: LD_INT 254
25640: EQUAL
25641: PUSH
25642: LD_VAR 0 2
25646: PPUSH
25647: CALL_OW 264
25651: PUSH
25652: LD_EXP 34
25656: EQUAL
25657: AND
25658: PUSH
25659: LD_VAR 0 3
25663: PPUSH
25664: CALL_OW 263
25668: PUSH
25669: LD_INT 3
25671: EQUAL
25672: AND
25673: IFFALSE 25689
// HackDestroyVehicle ( unit , selectedUnit ) ;
25675: LD_VAR 0 2
25679: PPUSH
25680: LD_VAR 0 3
25684: PPUSH
25685: CALL 27198 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25689: LD_VAR 0 1
25693: PUSH
25694: LD_INT 255
25696: EQUAL
25697: PUSH
25698: LD_VAR 0 2
25702: PPUSH
25703: CALL_OW 264
25707: PUSH
25708: LD_INT 14
25710: PUSH
25711: LD_INT 53
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: IN
25718: AND
25719: PUSH
25720: LD_VAR 0 4
25724: PPUSH
25725: LD_VAR 0 5
25729: PPUSH
25730: CALL_OW 488
25734: AND
25735: IFFALSE 25759
// CutTreeXYR ( unit , x , y , 12 ) ;
25737: LD_VAR 0 2
25741: PPUSH
25742: LD_VAR 0 4
25746: PPUSH
25747: LD_VAR 0 5
25751: PPUSH
25752: LD_INT 12
25754: PPUSH
25755: CALL 25764 0 4
// end ;
25759: LD_VAR 0 6
25763: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25764: LD_INT 0
25766: PPUSH
25767: PPUSH
25768: PPUSH
25769: PPUSH
25770: PPUSH
25771: PPUSH
25772: PPUSH
25773: PPUSH
25774: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
25775: LD_VAR 0 1
25779: NOT
25780: PUSH
25781: LD_VAR 0 2
25785: PPUSH
25786: LD_VAR 0 3
25790: PPUSH
25791: CALL_OW 488
25795: NOT
25796: OR
25797: PUSH
25798: LD_VAR 0 4
25802: NOT
25803: OR
25804: IFFALSE 25808
// exit ;
25806: GO 26148
// list := [ ] ;
25808: LD_ADDR_VAR 0 13
25812: PUSH
25813: EMPTY
25814: ST_TO_ADDR
// if x - r < 0 then
25815: LD_VAR 0 2
25819: PUSH
25820: LD_VAR 0 4
25824: MINUS
25825: PUSH
25826: LD_INT 0
25828: LESS
25829: IFFALSE 25841
// min_x := 0 else
25831: LD_ADDR_VAR 0 7
25835: PUSH
25836: LD_INT 0
25838: ST_TO_ADDR
25839: GO 25857
// min_x := x - r ;
25841: LD_ADDR_VAR 0 7
25845: PUSH
25846: LD_VAR 0 2
25850: PUSH
25851: LD_VAR 0 4
25855: MINUS
25856: ST_TO_ADDR
// if y - r < 0 then
25857: LD_VAR 0 3
25861: PUSH
25862: LD_VAR 0 4
25866: MINUS
25867: PUSH
25868: LD_INT 0
25870: LESS
25871: IFFALSE 25883
// min_y := 0 else
25873: LD_ADDR_VAR 0 8
25877: PUSH
25878: LD_INT 0
25880: ST_TO_ADDR
25881: GO 25899
// min_y := y - r ;
25883: LD_ADDR_VAR 0 8
25887: PUSH
25888: LD_VAR 0 3
25892: PUSH
25893: LD_VAR 0 4
25897: MINUS
25898: ST_TO_ADDR
// max_x := x + r ;
25899: LD_ADDR_VAR 0 9
25903: PUSH
25904: LD_VAR 0 2
25908: PUSH
25909: LD_VAR 0 4
25913: PLUS
25914: ST_TO_ADDR
// max_y := y + r ;
25915: LD_ADDR_VAR 0 10
25919: PUSH
25920: LD_VAR 0 3
25924: PUSH
25925: LD_VAR 0 4
25929: PLUS
25930: ST_TO_ADDR
// for _x = min_x to max_x do
25931: LD_ADDR_VAR 0 11
25935: PUSH
25936: DOUBLE
25937: LD_VAR 0 7
25941: DEC
25942: ST_TO_ADDR
25943: LD_VAR 0 9
25947: PUSH
25948: FOR_TO
25949: IFFALSE 26066
// for _y = min_y to max_y do
25951: LD_ADDR_VAR 0 12
25955: PUSH
25956: DOUBLE
25957: LD_VAR 0 8
25961: DEC
25962: ST_TO_ADDR
25963: LD_VAR 0 10
25967: PUSH
25968: FOR_TO
25969: IFFALSE 26062
// begin if not ValidHex ( _x , _y ) then
25971: LD_VAR 0 11
25975: PPUSH
25976: LD_VAR 0 12
25980: PPUSH
25981: CALL_OW 488
25985: NOT
25986: IFFALSE 25990
// continue ;
25988: GO 25968
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25990: LD_VAR 0 11
25994: PPUSH
25995: LD_VAR 0 12
25999: PPUSH
26000: CALL_OW 351
26004: PUSH
26005: LD_VAR 0 11
26009: PPUSH
26010: LD_VAR 0 12
26014: PPUSH
26015: CALL_OW 554
26019: AND
26020: IFFALSE 26060
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26022: LD_ADDR_VAR 0 13
26026: PUSH
26027: LD_VAR 0 13
26031: PPUSH
26032: LD_VAR 0 13
26036: PUSH
26037: LD_INT 1
26039: PLUS
26040: PPUSH
26041: LD_VAR 0 11
26045: PUSH
26046: LD_VAR 0 12
26050: PUSH
26051: EMPTY
26052: LIST
26053: LIST
26054: PPUSH
26055: CALL_OW 2
26059: ST_TO_ADDR
// end ;
26060: GO 25968
26062: POP
26063: POP
26064: GO 25948
26066: POP
26067: POP
// if not list then
26068: LD_VAR 0 13
26072: NOT
26073: IFFALSE 26077
// exit ;
26075: GO 26148
// for i in list do
26077: LD_ADDR_VAR 0 6
26081: PUSH
26082: LD_VAR 0 13
26086: PUSH
26087: FOR_IN
26088: IFFALSE 26146
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26090: LD_VAR 0 1
26094: PPUSH
26095: LD_STRING M
26097: PUSH
26098: LD_VAR 0 6
26102: PUSH
26103: LD_INT 1
26105: ARRAY
26106: PUSH
26107: LD_VAR 0 6
26111: PUSH
26112: LD_INT 2
26114: ARRAY
26115: PUSH
26116: LD_INT 0
26118: PUSH
26119: LD_INT 0
26121: PUSH
26122: LD_INT 0
26124: PUSH
26125: LD_INT 0
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: PUSH
26137: EMPTY
26138: LIST
26139: PPUSH
26140: CALL_OW 447
26144: GO 26087
26146: POP
26147: POP
// end ;
26148: LD_VAR 0 5
26152: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26153: LD_EXP 102
26157: NOT
26158: IFFALSE 26208
26160: GO 26162
26162: DISABLE
// begin initHack := true ;
26163: LD_ADDR_EXP 102
26167: PUSH
26168: LD_INT 1
26170: ST_TO_ADDR
// hackTanks := [ ] ;
26171: LD_ADDR_EXP 103
26175: PUSH
26176: EMPTY
26177: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26178: LD_ADDR_EXP 104
26182: PUSH
26183: EMPTY
26184: ST_TO_ADDR
// hackLimit := 3 ;
26185: LD_ADDR_EXP 105
26189: PUSH
26190: LD_INT 3
26192: ST_TO_ADDR
// hackDist := 12 ;
26193: LD_ADDR_EXP 106
26197: PUSH
26198: LD_INT 12
26200: ST_TO_ADDR
// hackCounter := [ ] ;
26201: LD_ADDR_EXP 107
26205: PUSH
26206: EMPTY
26207: ST_TO_ADDR
// end ;
26208: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26209: LD_EXP 102
26213: PUSH
26214: LD_INT 34
26216: PUSH
26217: LD_EXP 34
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: PPUSH
26226: CALL_OW 69
26230: AND
26231: IFFALSE 26486
26233: GO 26235
26235: DISABLE
26236: LD_INT 0
26238: PPUSH
26239: PPUSH
// begin enable ;
26240: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26241: LD_ADDR_VAR 0 1
26245: PUSH
26246: LD_INT 34
26248: PUSH
26249: LD_EXP 34
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: PPUSH
26258: CALL_OW 69
26262: PUSH
26263: FOR_IN
26264: IFFALSE 26484
// begin if not i in hackTanks then
26266: LD_VAR 0 1
26270: PUSH
26271: LD_EXP 103
26275: IN
26276: NOT
26277: IFFALSE 26360
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26279: LD_ADDR_EXP 103
26283: PUSH
26284: LD_EXP 103
26288: PPUSH
26289: LD_EXP 103
26293: PUSH
26294: LD_INT 1
26296: PLUS
26297: PPUSH
26298: LD_VAR 0 1
26302: PPUSH
26303: CALL_OW 1
26307: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26308: LD_ADDR_EXP 104
26312: PUSH
26313: LD_EXP 104
26317: PPUSH
26318: LD_EXP 104
26322: PUSH
26323: LD_INT 1
26325: PLUS
26326: PPUSH
26327: EMPTY
26328: PPUSH
26329: CALL_OW 1
26333: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26334: LD_ADDR_EXP 107
26338: PUSH
26339: LD_EXP 107
26343: PPUSH
26344: LD_EXP 107
26348: PUSH
26349: LD_INT 1
26351: PLUS
26352: PPUSH
26353: EMPTY
26354: PPUSH
26355: CALL_OW 1
26359: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26360: LD_VAR 0 1
26364: PPUSH
26365: CALL_OW 302
26369: NOT
26370: IFFALSE 26383
// begin HackUnlinkAll ( i ) ;
26372: LD_VAR 0 1
26376: PPUSH
26377: CALL 26489 0 1
// continue ;
26381: GO 26263
// end ; HackCheckCapturedStatus ( i ) ;
26383: LD_VAR 0 1
26387: PPUSH
26388: CALL 26932 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26392: LD_ADDR_VAR 0 2
26396: PUSH
26397: LD_INT 81
26399: PUSH
26400: LD_VAR 0 1
26404: PPUSH
26405: CALL_OW 255
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: PUSH
26414: LD_INT 33
26416: PUSH
26417: LD_INT 3
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: PUSH
26424: LD_INT 91
26426: PUSH
26427: LD_VAR 0 1
26431: PUSH
26432: LD_EXP 106
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: LIST
26441: PUSH
26442: LD_INT 50
26444: PUSH
26445: EMPTY
26446: LIST
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: LIST
26452: LIST
26453: PPUSH
26454: CALL_OW 69
26458: ST_TO_ADDR
// if not tmp then
26459: LD_VAR 0 2
26463: NOT
26464: IFFALSE 26468
// continue ;
26466: GO 26263
// HackLink ( i , tmp ) ;
26468: LD_VAR 0 1
26472: PPUSH
26473: LD_VAR 0 2
26477: PPUSH
26478: CALL 26625 0 2
// end ;
26482: GO 26263
26484: POP
26485: POP
// end ;
26486: PPOPN 2
26488: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
26489: LD_INT 0
26491: PPUSH
26492: PPUSH
26493: PPUSH
// if not hack in hackTanks then
26494: LD_VAR 0 1
26498: PUSH
26499: LD_EXP 103
26503: IN
26504: NOT
26505: IFFALSE 26509
// exit ;
26507: GO 26620
// index := GetElementIndex ( hackTanks , hack ) ;
26509: LD_ADDR_VAR 0 4
26513: PUSH
26514: LD_EXP 103
26518: PPUSH
26519: LD_VAR 0 1
26523: PPUSH
26524: CALL 32040 0 2
26528: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
26529: LD_EXP 104
26533: PUSH
26534: LD_VAR 0 4
26538: ARRAY
26539: IFFALSE 26620
// begin for i in hackTanksCaptured [ index ] do
26541: LD_ADDR_VAR 0 3
26545: PUSH
26546: LD_EXP 104
26550: PUSH
26551: LD_VAR 0 4
26555: ARRAY
26556: PUSH
26557: FOR_IN
26558: IFFALSE 26584
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26560: LD_VAR 0 3
26564: PUSH
26565: LD_INT 1
26567: ARRAY
26568: PPUSH
26569: LD_VAR 0 3
26573: PUSH
26574: LD_INT 2
26576: ARRAY
26577: PPUSH
26578: CALL_OW 235
26582: GO 26557
26584: POP
26585: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26586: LD_ADDR_EXP 104
26590: PUSH
26591: LD_EXP 104
26595: PPUSH
26596: LD_VAR 0 4
26600: PPUSH
26601: EMPTY
26602: PPUSH
26603: CALL_OW 1
26607: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26608: LD_VAR 0 1
26612: PPUSH
26613: LD_INT 0
26615: PPUSH
26616: CALL_OW 505
// end ; end ;
26620: LD_VAR 0 2
26624: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26625: LD_INT 0
26627: PPUSH
26628: PPUSH
26629: PPUSH
// if not hack in hackTanks or not vehicles then
26630: LD_VAR 0 1
26634: PUSH
26635: LD_EXP 103
26639: IN
26640: NOT
26641: PUSH
26642: LD_VAR 0 2
26646: NOT
26647: OR
26648: IFFALSE 26652
// exit ;
26650: GO 26927
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26652: LD_ADDR_VAR 0 2
26656: PUSH
26657: LD_VAR 0 1
26661: PPUSH
26662: LD_VAR 0 2
26666: PPUSH
26667: LD_INT 1
26669: PPUSH
26670: LD_INT 1
26672: PPUSH
26673: CALL 32690 0 4
26677: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26678: LD_ADDR_VAR 0 5
26682: PUSH
26683: LD_EXP 103
26687: PPUSH
26688: LD_VAR 0 1
26692: PPUSH
26693: CALL 32040 0 2
26697: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26698: LD_EXP 104
26702: PUSH
26703: LD_VAR 0 5
26707: ARRAY
26708: PUSH
26709: LD_EXP 105
26713: LESS
26714: IFFALSE 26903
// begin for i := 1 to vehicles do
26716: LD_ADDR_VAR 0 4
26720: PUSH
26721: DOUBLE
26722: LD_INT 1
26724: DEC
26725: ST_TO_ADDR
26726: LD_VAR 0 2
26730: PUSH
26731: FOR_TO
26732: IFFALSE 26901
// begin if hackTanksCaptured [ index ] = hackLimit then
26734: LD_EXP 104
26738: PUSH
26739: LD_VAR 0 5
26743: ARRAY
26744: PUSH
26745: LD_EXP 105
26749: EQUAL
26750: IFFALSE 26754
// break ;
26752: GO 26901
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26754: LD_ADDR_EXP 107
26758: PUSH
26759: LD_EXP 107
26763: PPUSH
26764: LD_VAR 0 5
26768: PPUSH
26769: LD_EXP 107
26773: PUSH
26774: LD_VAR 0 5
26778: ARRAY
26779: PUSH
26780: LD_INT 1
26782: PLUS
26783: PPUSH
26784: CALL_OW 1
26788: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26789: LD_ADDR_EXP 104
26793: PUSH
26794: LD_EXP 104
26798: PPUSH
26799: LD_VAR 0 5
26803: PUSH
26804: LD_EXP 104
26808: PUSH
26809: LD_VAR 0 5
26813: ARRAY
26814: PUSH
26815: LD_INT 1
26817: PLUS
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PPUSH
26823: LD_VAR 0 2
26827: PUSH
26828: LD_VAR 0 4
26832: ARRAY
26833: PUSH
26834: LD_VAR 0 2
26838: PUSH
26839: LD_VAR 0 4
26843: ARRAY
26844: PPUSH
26845: CALL_OW 255
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PPUSH
26854: CALL 32255 0 3
26858: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26859: LD_VAR 0 2
26863: PUSH
26864: LD_VAR 0 4
26868: ARRAY
26869: PPUSH
26870: LD_VAR 0 1
26874: PPUSH
26875: CALL_OW 255
26879: PPUSH
26880: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26884: LD_VAR 0 2
26888: PUSH
26889: LD_VAR 0 4
26893: ARRAY
26894: PPUSH
26895: CALL_OW 141
// end ;
26899: GO 26731
26901: POP
26902: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26903: LD_VAR 0 1
26907: PPUSH
26908: LD_EXP 104
26912: PUSH
26913: LD_VAR 0 5
26917: ARRAY
26918: PUSH
26919: LD_INT 0
26921: PLUS
26922: PPUSH
26923: CALL_OW 505
// end ;
26927: LD_VAR 0 3
26931: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26932: LD_INT 0
26934: PPUSH
26935: PPUSH
26936: PPUSH
26937: PPUSH
// if not hack in hackTanks then
26938: LD_VAR 0 1
26942: PUSH
26943: LD_EXP 103
26947: IN
26948: NOT
26949: IFFALSE 26953
// exit ;
26951: GO 27193
// index := GetElementIndex ( hackTanks , hack ) ;
26953: LD_ADDR_VAR 0 4
26957: PUSH
26958: LD_EXP 103
26962: PPUSH
26963: LD_VAR 0 1
26967: PPUSH
26968: CALL 32040 0 2
26972: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26973: LD_ADDR_VAR 0 3
26977: PUSH
26978: DOUBLE
26979: LD_EXP 104
26983: PUSH
26984: LD_VAR 0 4
26988: ARRAY
26989: INC
26990: ST_TO_ADDR
26991: LD_INT 1
26993: PUSH
26994: FOR_DOWNTO
26995: IFFALSE 27167
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26997: LD_ADDR_VAR 0 5
27001: PUSH
27002: LD_EXP 104
27006: PUSH
27007: LD_VAR 0 4
27011: ARRAY
27012: PUSH
27013: LD_VAR 0 3
27017: ARRAY
27018: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27019: LD_VAR 0 5
27023: PUSH
27024: LD_INT 1
27026: ARRAY
27027: PPUSH
27028: CALL_OW 302
27032: NOT
27033: PUSH
27034: LD_VAR 0 5
27038: PUSH
27039: LD_INT 1
27041: ARRAY
27042: PPUSH
27043: CALL_OW 255
27047: PUSH
27048: LD_VAR 0 1
27052: PPUSH
27053: CALL_OW 255
27057: NONEQUAL
27058: OR
27059: IFFALSE 27165
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27061: LD_VAR 0 5
27065: PUSH
27066: LD_INT 1
27068: ARRAY
27069: PPUSH
27070: CALL_OW 305
27074: PUSH
27075: LD_VAR 0 5
27079: PUSH
27080: LD_INT 1
27082: ARRAY
27083: PPUSH
27084: CALL_OW 255
27088: PUSH
27089: LD_VAR 0 1
27093: PPUSH
27094: CALL_OW 255
27098: EQUAL
27099: AND
27100: IFFALSE 27124
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27102: LD_VAR 0 5
27106: PUSH
27107: LD_INT 1
27109: ARRAY
27110: PPUSH
27111: LD_VAR 0 5
27115: PUSH
27116: LD_INT 2
27118: ARRAY
27119: PPUSH
27120: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27124: LD_ADDR_EXP 104
27128: PUSH
27129: LD_EXP 104
27133: PPUSH
27134: LD_VAR 0 4
27138: PPUSH
27139: LD_EXP 104
27143: PUSH
27144: LD_VAR 0 4
27148: ARRAY
27149: PPUSH
27150: LD_VAR 0 3
27154: PPUSH
27155: CALL_OW 3
27159: PPUSH
27160: CALL_OW 1
27164: ST_TO_ADDR
// end ; end ;
27165: GO 26994
27167: POP
27168: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27169: LD_VAR 0 1
27173: PPUSH
27174: LD_EXP 104
27178: PUSH
27179: LD_VAR 0 4
27183: ARRAY
27184: PUSH
27185: LD_INT 0
27187: PLUS
27188: PPUSH
27189: CALL_OW 505
// end ;
27193: LD_VAR 0 2
27197: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27198: LD_INT 0
27200: PPUSH
27201: PPUSH
27202: PPUSH
27203: PPUSH
// if not hack in hackTanks then
27204: LD_VAR 0 1
27208: PUSH
27209: LD_EXP 103
27213: IN
27214: NOT
27215: IFFALSE 27219
// exit ;
27217: GO 27304
// index := GetElementIndex ( hackTanks , hack ) ;
27219: LD_ADDR_VAR 0 5
27223: PUSH
27224: LD_EXP 103
27228: PPUSH
27229: LD_VAR 0 1
27233: PPUSH
27234: CALL 32040 0 2
27238: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27239: LD_ADDR_VAR 0 4
27243: PUSH
27244: DOUBLE
27245: LD_INT 1
27247: DEC
27248: ST_TO_ADDR
27249: LD_EXP 104
27253: PUSH
27254: LD_VAR 0 5
27258: ARRAY
27259: PUSH
27260: FOR_TO
27261: IFFALSE 27302
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27263: LD_EXP 104
27267: PUSH
27268: LD_VAR 0 5
27272: ARRAY
27273: PUSH
27274: LD_VAR 0 4
27278: ARRAY
27279: PUSH
27280: LD_INT 1
27282: ARRAY
27283: PUSH
27284: LD_VAR 0 2
27288: EQUAL
27289: IFFALSE 27300
// KillUnit ( vehicle ) ;
27291: LD_VAR 0 2
27295: PPUSH
27296: CALL_OW 66
27300: GO 27260
27302: POP
27303: POP
// end ; end_of_file
27304: LD_VAR 0 3
27308: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27309: LD_INT 0
27311: PPUSH
27312: PPUSH
// if exist_mode then
27313: LD_VAR 0 2
27317: IFFALSE 27342
// unit := CreateCharacter ( prefix & ident ) else
27319: LD_ADDR_VAR 0 5
27323: PUSH
27324: LD_VAR 0 3
27328: PUSH
27329: LD_VAR 0 1
27333: STR
27334: PPUSH
27335: CALL_OW 34
27339: ST_TO_ADDR
27340: GO 27357
// unit := NewCharacter ( ident ) ;
27342: LD_ADDR_VAR 0 5
27346: PUSH
27347: LD_VAR 0 1
27351: PPUSH
27352: CALL_OW 25
27356: ST_TO_ADDR
// result := unit ;
27357: LD_ADDR_VAR 0 4
27361: PUSH
27362: LD_VAR 0 5
27366: ST_TO_ADDR
// end ;
27367: LD_VAR 0 4
27371: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27372: LD_INT 0
27374: PPUSH
27375: PPUSH
// if not side or not nation then
27376: LD_VAR 0 1
27380: NOT
27381: PUSH
27382: LD_VAR 0 2
27386: NOT
27387: OR
27388: IFFALSE 27392
// exit ;
27390: GO 28156
// case nation of nation_american :
27392: LD_VAR 0 2
27396: PUSH
27397: LD_INT 1
27399: DOUBLE
27400: EQUAL
27401: IFTRUE 27405
27403: GO 27619
27405: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27406: LD_ADDR_VAR 0 4
27410: PUSH
27411: LD_INT 35
27413: PUSH
27414: LD_INT 45
27416: PUSH
27417: LD_INT 46
27419: PUSH
27420: LD_INT 47
27422: PUSH
27423: LD_INT 82
27425: PUSH
27426: LD_INT 83
27428: PUSH
27429: LD_INT 84
27431: PUSH
27432: LD_INT 85
27434: PUSH
27435: LD_INT 86
27437: PUSH
27438: LD_INT 1
27440: PUSH
27441: LD_INT 2
27443: PUSH
27444: LD_INT 6
27446: PUSH
27447: LD_INT 15
27449: PUSH
27450: LD_INT 16
27452: PUSH
27453: LD_INT 7
27455: PUSH
27456: LD_INT 12
27458: PUSH
27459: LD_INT 13
27461: PUSH
27462: LD_INT 10
27464: PUSH
27465: LD_INT 14
27467: PUSH
27468: LD_INT 20
27470: PUSH
27471: LD_INT 21
27473: PUSH
27474: LD_INT 22
27476: PUSH
27477: LD_INT 25
27479: PUSH
27480: LD_INT 32
27482: PUSH
27483: LD_INT 27
27485: PUSH
27486: LD_INT 36
27488: PUSH
27489: LD_INT 69
27491: PUSH
27492: LD_INT 39
27494: PUSH
27495: LD_INT 34
27497: PUSH
27498: LD_INT 40
27500: PUSH
27501: LD_INT 48
27503: PUSH
27504: LD_INT 49
27506: PUSH
27507: LD_INT 50
27509: PUSH
27510: LD_INT 51
27512: PUSH
27513: LD_INT 52
27515: PUSH
27516: LD_INT 53
27518: PUSH
27519: LD_INT 54
27521: PUSH
27522: LD_INT 55
27524: PUSH
27525: LD_INT 56
27527: PUSH
27528: LD_INT 57
27530: PUSH
27531: LD_INT 58
27533: PUSH
27534: LD_INT 59
27536: PUSH
27537: LD_INT 60
27539: PUSH
27540: LD_INT 61
27542: PUSH
27543: LD_INT 62
27545: PUSH
27546: LD_INT 80
27548: PUSH
27549: LD_INT 82
27551: PUSH
27552: LD_INT 83
27554: PUSH
27555: LD_INT 84
27557: PUSH
27558: LD_INT 85
27560: PUSH
27561: LD_INT 86
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: LIST
27568: LIST
27569: LIST
27570: LIST
27571: LIST
27572: LIST
27573: LIST
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: LIST
27587: LIST
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: LIST
27594: LIST
27595: LIST
27596: LIST
27597: LIST
27598: LIST
27599: LIST
27600: LIST
27601: LIST
27602: LIST
27603: LIST
27604: LIST
27605: LIST
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: LIST
27616: ST_TO_ADDR
27617: GO 28080
27619: LD_INT 2
27621: DOUBLE
27622: EQUAL
27623: IFTRUE 27627
27625: GO 27849
27627: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
27628: LD_ADDR_VAR 0 4
27632: PUSH
27633: LD_INT 35
27635: PUSH
27636: LD_INT 45
27638: PUSH
27639: LD_INT 46
27641: PUSH
27642: LD_INT 47
27644: PUSH
27645: LD_INT 82
27647: PUSH
27648: LD_INT 83
27650: PUSH
27651: LD_INT 84
27653: PUSH
27654: LD_INT 85
27656: PUSH
27657: LD_INT 87
27659: PUSH
27660: LD_INT 70
27662: PUSH
27663: LD_INT 1
27665: PUSH
27666: LD_INT 11
27668: PUSH
27669: LD_INT 3
27671: PUSH
27672: LD_INT 4
27674: PUSH
27675: LD_INT 5
27677: PUSH
27678: LD_INT 6
27680: PUSH
27681: LD_INT 15
27683: PUSH
27684: LD_INT 18
27686: PUSH
27687: LD_INT 7
27689: PUSH
27690: LD_INT 17
27692: PUSH
27693: LD_INT 8
27695: PUSH
27696: LD_INT 20
27698: PUSH
27699: LD_INT 21
27701: PUSH
27702: LD_INT 22
27704: PUSH
27705: LD_INT 72
27707: PUSH
27708: LD_INT 26
27710: PUSH
27711: LD_INT 69
27713: PUSH
27714: LD_INT 39
27716: PUSH
27717: LD_INT 40
27719: PUSH
27720: LD_INT 41
27722: PUSH
27723: LD_INT 42
27725: PUSH
27726: LD_INT 43
27728: PUSH
27729: LD_INT 48
27731: PUSH
27732: LD_INT 49
27734: PUSH
27735: LD_INT 50
27737: PUSH
27738: LD_INT 51
27740: PUSH
27741: LD_INT 52
27743: PUSH
27744: LD_INT 53
27746: PUSH
27747: LD_INT 54
27749: PUSH
27750: LD_INT 55
27752: PUSH
27753: LD_INT 56
27755: PUSH
27756: LD_INT 60
27758: PUSH
27759: LD_INT 61
27761: PUSH
27762: LD_INT 62
27764: PUSH
27765: LD_INT 66
27767: PUSH
27768: LD_INT 67
27770: PUSH
27771: LD_INT 68
27773: PUSH
27774: LD_INT 81
27776: PUSH
27777: LD_INT 82
27779: PUSH
27780: LD_INT 83
27782: PUSH
27783: LD_INT 84
27785: PUSH
27786: LD_INT 85
27788: PUSH
27789: LD_INT 87
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: LIST
27796: LIST
27797: LIST
27798: LIST
27799: LIST
27800: LIST
27801: LIST
27802: LIST
27803: LIST
27804: LIST
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: LIST
27820: LIST
27821: LIST
27822: LIST
27823: LIST
27824: LIST
27825: LIST
27826: LIST
27827: LIST
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: LIST
27834: LIST
27835: LIST
27836: LIST
27837: LIST
27838: LIST
27839: LIST
27840: LIST
27841: LIST
27842: LIST
27843: LIST
27844: LIST
27845: LIST
27846: ST_TO_ADDR
27847: GO 28080
27849: LD_INT 3
27851: DOUBLE
27852: EQUAL
27853: IFTRUE 27857
27855: GO 28079
27857: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27858: LD_ADDR_VAR 0 4
27862: PUSH
27863: LD_INT 46
27865: PUSH
27866: LD_INT 47
27868: PUSH
27869: LD_INT 1
27871: PUSH
27872: LD_INT 2
27874: PUSH
27875: LD_INT 82
27877: PUSH
27878: LD_INT 83
27880: PUSH
27881: LD_INT 84
27883: PUSH
27884: LD_INT 85
27886: PUSH
27887: LD_INT 86
27889: PUSH
27890: LD_INT 11
27892: PUSH
27893: LD_INT 9
27895: PUSH
27896: LD_INT 20
27898: PUSH
27899: LD_INT 19
27901: PUSH
27902: LD_INT 21
27904: PUSH
27905: LD_INT 24
27907: PUSH
27908: LD_INT 22
27910: PUSH
27911: LD_INT 25
27913: PUSH
27914: LD_INT 28
27916: PUSH
27917: LD_INT 29
27919: PUSH
27920: LD_INT 30
27922: PUSH
27923: LD_INT 31
27925: PUSH
27926: LD_INT 37
27928: PUSH
27929: LD_INT 38
27931: PUSH
27932: LD_INT 32
27934: PUSH
27935: LD_INT 27
27937: PUSH
27938: LD_INT 33
27940: PUSH
27941: LD_INT 69
27943: PUSH
27944: LD_INT 39
27946: PUSH
27947: LD_INT 34
27949: PUSH
27950: LD_INT 40
27952: PUSH
27953: LD_INT 71
27955: PUSH
27956: LD_INT 23
27958: PUSH
27959: LD_INT 44
27961: PUSH
27962: LD_INT 48
27964: PUSH
27965: LD_INT 49
27967: PUSH
27968: LD_INT 50
27970: PUSH
27971: LD_INT 51
27973: PUSH
27974: LD_INT 52
27976: PUSH
27977: LD_INT 53
27979: PUSH
27980: LD_INT 54
27982: PUSH
27983: LD_INT 55
27985: PUSH
27986: LD_INT 56
27988: PUSH
27989: LD_INT 57
27991: PUSH
27992: LD_INT 58
27994: PUSH
27995: LD_INT 59
27997: PUSH
27998: LD_INT 63
28000: PUSH
28001: LD_INT 64
28003: PUSH
28004: LD_INT 65
28006: PUSH
28007: LD_INT 82
28009: PUSH
28010: LD_INT 83
28012: PUSH
28013: LD_INT 84
28015: PUSH
28016: LD_INT 85
28018: PUSH
28019: LD_INT 86
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: LIST
28033: LIST
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: LIST
28049: LIST
28050: LIST
28051: LIST
28052: LIST
28053: LIST
28054: LIST
28055: LIST
28056: LIST
28057: LIST
28058: LIST
28059: LIST
28060: LIST
28061: LIST
28062: LIST
28063: LIST
28064: LIST
28065: LIST
28066: LIST
28067: LIST
28068: LIST
28069: LIST
28070: LIST
28071: LIST
28072: LIST
28073: LIST
28074: LIST
28075: LIST
28076: ST_TO_ADDR
28077: GO 28080
28079: POP
// if state > - 1 and state < 3 then
28080: LD_VAR 0 3
28084: PUSH
28085: LD_INT 1
28087: NEG
28088: GREATER
28089: PUSH
28090: LD_VAR 0 3
28094: PUSH
28095: LD_INT 3
28097: LESS
28098: AND
28099: IFFALSE 28156
// for i in result do
28101: LD_ADDR_VAR 0 5
28105: PUSH
28106: LD_VAR 0 4
28110: PUSH
28111: FOR_IN
28112: IFFALSE 28154
// if GetTech ( i , side ) <> state then
28114: LD_VAR 0 5
28118: PPUSH
28119: LD_VAR 0 1
28123: PPUSH
28124: CALL_OW 321
28128: PUSH
28129: LD_VAR 0 3
28133: NONEQUAL
28134: IFFALSE 28152
// result := result diff i ;
28136: LD_ADDR_VAR 0 4
28140: PUSH
28141: LD_VAR 0 4
28145: PUSH
28146: LD_VAR 0 5
28150: DIFF
28151: ST_TO_ADDR
28152: GO 28111
28154: POP
28155: POP
// end ;
28156: LD_VAR 0 4
28160: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28161: LD_INT 0
28163: PPUSH
28164: PPUSH
28165: PPUSH
// result := true ;
28166: LD_ADDR_VAR 0 3
28170: PUSH
28171: LD_INT 1
28173: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28174: LD_ADDR_VAR 0 5
28178: PUSH
28179: LD_VAR 0 2
28183: PPUSH
28184: CALL_OW 480
28188: ST_TO_ADDR
// if not tmp then
28189: LD_VAR 0 5
28193: NOT
28194: IFFALSE 28198
// exit ;
28196: GO 28247
// for i in tmp do
28198: LD_ADDR_VAR 0 4
28202: PUSH
28203: LD_VAR 0 5
28207: PUSH
28208: FOR_IN
28209: IFFALSE 28245
// if GetTech ( i , side ) <> state_researched then
28211: LD_VAR 0 4
28215: PPUSH
28216: LD_VAR 0 1
28220: PPUSH
28221: CALL_OW 321
28225: PUSH
28226: LD_INT 2
28228: NONEQUAL
28229: IFFALSE 28243
// begin result := false ;
28231: LD_ADDR_VAR 0 3
28235: PUSH
28236: LD_INT 0
28238: ST_TO_ADDR
// exit ;
28239: POP
28240: POP
28241: GO 28247
// end ;
28243: GO 28208
28245: POP
28246: POP
// end ;
28247: LD_VAR 0 3
28251: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28252: LD_INT 0
28254: PPUSH
28255: PPUSH
28256: PPUSH
28257: PPUSH
28258: PPUSH
28259: PPUSH
28260: PPUSH
28261: PPUSH
28262: PPUSH
28263: PPUSH
28264: PPUSH
28265: PPUSH
28266: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28267: LD_VAR 0 1
28271: NOT
28272: PUSH
28273: LD_VAR 0 1
28277: PPUSH
28278: CALL_OW 257
28282: PUSH
28283: LD_INT 9
28285: NONEQUAL
28286: OR
28287: IFFALSE 28291
// exit ;
28289: GO 28864
// side := GetSide ( unit ) ;
28291: LD_ADDR_VAR 0 9
28295: PUSH
28296: LD_VAR 0 1
28300: PPUSH
28301: CALL_OW 255
28305: ST_TO_ADDR
// tech_space := tech_spacanom ;
28306: LD_ADDR_VAR 0 12
28310: PUSH
28311: LD_INT 29
28313: ST_TO_ADDR
// tech_time := tech_taurad ;
28314: LD_ADDR_VAR 0 13
28318: PUSH
28319: LD_INT 28
28321: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28322: LD_ADDR_VAR 0 11
28326: PUSH
28327: LD_VAR 0 1
28331: PPUSH
28332: CALL_OW 310
28336: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28337: LD_VAR 0 11
28341: PPUSH
28342: CALL_OW 247
28346: PUSH
28347: LD_INT 2
28349: EQUAL
28350: IFFALSE 28354
// exit ;
28352: GO 28864
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28354: LD_ADDR_VAR 0 8
28358: PUSH
28359: LD_INT 81
28361: PUSH
28362: LD_VAR 0 9
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: PUSH
28371: LD_INT 3
28373: PUSH
28374: LD_INT 21
28376: PUSH
28377: LD_INT 3
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: PPUSH
28392: CALL_OW 69
28396: ST_TO_ADDR
// if not tmp then
28397: LD_VAR 0 8
28401: NOT
28402: IFFALSE 28406
// exit ;
28404: GO 28864
// if in_unit then
28406: LD_VAR 0 11
28410: IFFALSE 28434
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28412: LD_ADDR_VAR 0 10
28416: PUSH
28417: LD_VAR 0 8
28421: PPUSH
28422: LD_VAR 0 11
28426: PPUSH
28427: CALL_OW 74
28431: ST_TO_ADDR
28432: GO 28454
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28434: LD_ADDR_VAR 0 10
28438: PUSH
28439: LD_VAR 0 8
28443: PPUSH
28444: LD_VAR 0 1
28448: PPUSH
28449: CALL_OW 74
28453: ST_TO_ADDR
// if not enemy then
28454: LD_VAR 0 10
28458: NOT
28459: IFFALSE 28463
// exit ;
28461: GO 28864
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28463: LD_VAR 0 11
28467: PUSH
28468: LD_VAR 0 11
28472: PPUSH
28473: LD_VAR 0 10
28477: PPUSH
28478: CALL_OW 296
28482: PUSH
28483: LD_INT 13
28485: GREATER
28486: AND
28487: PUSH
28488: LD_VAR 0 1
28492: PPUSH
28493: LD_VAR 0 10
28497: PPUSH
28498: CALL_OW 296
28502: PUSH
28503: LD_INT 12
28505: GREATER
28506: OR
28507: IFFALSE 28511
// exit ;
28509: GO 28864
// missile := [ 1 ] ;
28511: LD_ADDR_VAR 0 14
28515: PUSH
28516: LD_INT 1
28518: PUSH
28519: EMPTY
28520: LIST
28521: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28522: LD_VAR 0 9
28526: PPUSH
28527: LD_VAR 0 12
28531: PPUSH
28532: CALL_OW 325
28536: IFFALSE 28565
// missile := Insert ( missile , missile + 1 , 2 ) ;
28538: LD_ADDR_VAR 0 14
28542: PUSH
28543: LD_VAR 0 14
28547: PPUSH
28548: LD_VAR 0 14
28552: PUSH
28553: LD_INT 1
28555: PLUS
28556: PPUSH
28557: LD_INT 2
28559: PPUSH
28560: CALL_OW 2
28564: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28565: LD_VAR 0 9
28569: PPUSH
28570: LD_VAR 0 13
28574: PPUSH
28575: CALL_OW 325
28579: PUSH
28580: LD_VAR 0 10
28584: PPUSH
28585: CALL_OW 255
28589: PPUSH
28590: LD_VAR 0 13
28594: PPUSH
28595: CALL_OW 325
28599: NOT
28600: AND
28601: IFFALSE 28630
// missile := Insert ( missile , missile + 1 , 3 ) ;
28603: LD_ADDR_VAR 0 14
28607: PUSH
28608: LD_VAR 0 14
28612: PPUSH
28613: LD_VAR 0 14
28617: PUSH
28618: LD_INT 1
28620: PLUS
28621: PPUSH
28622: LD_INT 3
28624: PPUSH
28625: CALL_OW 2
28629: ST_TO_ADDR
// if missile < 2 then
28630: LD_VAR 0 14
28634: PUSH
28635: LD_INT 2
28637: LESS
28638: IFFALSE 28642
// exit ;
28640: GO 28864
// x := GetX ( enemy ) ;
28642: LD_ADDR_VAR 0 4
28646: PUSH
28647: LD_VAR 0 10
28651: PPUSH
28652: CALL_OW 250
28656: ST_TO_ADDR
// y := GetY ( enemy ) ;
28657: LD_ADDR_VAR 0 5
28661: PUSH
28662: LD_VAR 0 10
28666: PPUSH
28667: CALL_OW 251
28671: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28672: LD_ADDR_VAR 0 6
28676: PUSH
28677: LD_VAR 0 4
28681: PUSH
28682: LD_INT 1
28684: NEG
28685: PPUSH
28686: LD_INT 1
28688: PPUSH
28689: CALL_OW 12
28693: PLUS
28694: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28695: LD_ADDR_VAR 0 7
28699: PUSH
28700: LD_VAR 0 5
28704: PUSH
28705: LD_INT 1
28707: NEG
28708: PPUSH
28709: LD_INT 1
28711: PPUSH
28712: CALL_OW 12
28716: PLUS
28717: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28718: LD_VAR 0 6
28722: PPUSH
28723: LD_VAR 0 7
28727: PPUSH
28728: CALL_OW 488
28732: NOT
28733: IFFALSE 28755
// begin _x := x ;
28735: LD_ADDR_VAR 0 6
28739: PUSH
28740: LD_VAR 0 4
28744: ST_TO_ADDR
// _y := y ;
28745: LD_ADDR_VAR 0 7
28749: PUSH
28750: LD_VAR 0 5
28754: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28755: LD_ADDR_VAR 0 3
28759: PUSH
28760: LD_INT 1
28762: PPUSH
28763: LD_VAR 0 14
28767: PPUSH
28768: CALL_OW 12
28772: ST_TO_ADDR
// case i of 1 :
28773: LD_VAR 0 3
28777: PUSH
28778: LD_INT 1
28780: DOUBLE
28781: EQUAL
28782: IFTRUE 28786
28784: GO 28803
28786: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28787: LD_VAR 0 1
28791: PPUSH
28792: LD_VAR 0 10
28796: PPUSH
28797: CALL_OW 115
28801: GO 28864
28803: LD_INT 2
28805: DOUBLE
28806: EQUAL
28807: IFTRUE 28811
28809: GO 28833
28811: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28812: LD_VAR 0 1
28816: PPUSH
28817: LD_VAR 0 6
28821: PPUSH
28822: LD_VAR 0 7
28826: PPUSH
28827: CALL_OW 153
28831: GO 28864
28833: LD_INT 3
28835: DOUBLE
28836: EQUAL
28837: IFTRUE 28841
28839: GO 28863
28841: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28842: LD_VAR 0 1
28846: PPUSH
28847: LD_VAR 0 6
28851: PPUSH
28852: LD_VAR 0 7
28856: PPUSH
28857: CALL_OW 154
28861: GO 28864
28863: POP
// end ;
28864: LD_VAR 0 2
28868: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28869: LD_INT 0
28871: PPUSH
28872: PPUSH
28873: PPUSH
28874: PPUSH
28875: PPUSH
28876: PPUSH
// if not unit or not building then
28877: LD_VAR 0 1
28881: NOT
28882: PUSH
28883: LD_VAR 0 2
28887: NOT
28888: OR
28889: IFFALSE 28893
// exit ;
28891: GO 29051
// x := GetX ( building ) ;
28893: LD_ADDR_VAR 0 5
28897: PUSH
28898: LD_VAR 0 2
28902: PPUSH
28903: CALL_OW 250
28907: ST_TO_ADDR
// y := GetY ( building ) ;
28908: LD_ADDR_VAR 0 6
28912: PUSH
28913: LD_VAR 0 2
28917: PPUSH
28918: CALL_OW 251
28922: ST_TO_ADDR
// for i = 0 to 5 do
28923: LD_ADDR_VAR 0 4
28927: PUSH
28928: DOUBLE
28929: LD_INT 0
28931: DEC
28932: ST_TO_ADDR
28933: LD_INT 5
28935: PUSH
28936: FOR_TO
28937: IFFALSE 29049
// begin _x := ShiftX ( x , i , 3 ) ;
28939: LD_ADDR_VAR 0 7
28943: PUSH
28944: LD_VAR 0 5
28948: PPUSH
28949: LD_VAR 0 4
28953: PPUSH
28954: LD_INT 3
28956: PPUSH
28957: CALL_OW 272
28961: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28962: LD_ADDR_VAR 0 8
28966: PUSH
28967: LD_VAR 0 6
28971: PPUSH
28972: LD_VAR 0 4
28976: PPUSH
28977: LD_INT 3
28979: PPUSH
28980: CALL_OW 273
28984: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28985: LD_VAR 0 7
28989: PPUSH
28990: LD_VAR 0 8
28994: PPUSH
28995: CALL_OW 488
28999: NOT
29000: IFFALSE 29004
// continue ;
29002: GO 28936
// if HexInfo ( _x , _y ) = 0 then
29004: LD_VAR 0 7
29008: PPUSH
29009: LD_VAR 0 8
29013: PPUSH
29014: CALL_OW 428
29018: PUSH
29019: LD_INT 0
29021: EQUAL
29022: IFFALSE 29047
// begin ComMoveXY ( unit , _x , _y ) ;
29024: LD_VAR 0 1
29028: PPUSH
29029: LD_VAR 0 7
29033: PPUSH
29034: LD_VAR 0 8
29038: PPUSH
29039: CALL_OW 111
// exit ;
29043: POP
29044: POP
29045: GO 29051
// end ; end ;
29047: GO 28936
29049: POP
29050: POP
// end ;
29051: LD_VAR 0 3
29055: RET
// export function ScanBase ( side , base_area ) ; begin
29056: LD_INT 0
29058: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29059: LD_ADDR_VAR 0 3
29063: PUSH
29064: LD_VAR 0 2
29068: PPUSH
29069: LD_INT 81
29071: PUSH
29072: LD_VAR 0 1
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: PPUSH
29081: CALL_OW 70
29085: ST_TO_ADDR
// end ;
29086: LD_VAR 0 3
29090: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29091: LD_INT 0
29093: PPUSH
29094: PPUSH
29095: PPUSH
29096: PPUSH
// result := false ;
29097: LD_ADDR_VAR 0 2
29101: PUSH
29102: LD_INT 0
29104: ST_TO_ADDR
// side := GetSide ( unit ) ;
29105: LD_ADDR_VAR 0 3
29109: PUSH
29110: LD_VAR 0 1
29114: PPUSH
29115: CALL_OW 255
29119: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29120: LD_ADDR_VAR 0 4
29124: PUSH
29125: LD_VAR 0 1
29129: PPUSH
29130: CALL_OW 248
29134: ST_TO_ADDR
// case nat of 1 :
29135: LD_VAR 0 4
29139: PUSH
29140: LD_INT 1
29142: DOUBLE
29143: EQUAL
29144: IFTRUE 29148
29146: GO 29159
29148: POP
// tech := tech_lassight ; 2 :
29149: LD_ADDR_VAR 0 5
29153: PUSH
29154: LD_INT 12
29156: ST_TO_ADDR
29157: GO 29198
29159: LD_INT 2
29161: DOUBLE
29162: EQUAL
29163: IFTRUE 29167
29165: GO 29178
29167: POP
// tech := tech_mortar ; 3 :
29168: LD_ADDR_VAR 0 5
29172: PUSH
29173: LD_INT 41
29175: ST_TO_ADDR
29176: GO 29198
29178: LD_INT 3
29180: DOUBLE
29181: EQUAL
29182: IFTRUE 29186
29184: GO 29197
29186: POP
// tech := tech_bazooka ; end ;
29187: LD_ADDR_VAR 0 5
29191: PUSH
29192: LD_INT 44
29194: ST_TO_ADDR
29195: GO 29198
29197: POP
// if Researched ( side , tech ) then
29198: LD_VAR 0 3
29202: PPUSH
29203: LD_VAR 0 5
29207: PPUSH
29208: CALL_OW 325
29212: IFFALSE 29239
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29214: LD_ADDR_VAR 0 2
29218: PUSH
29219: LD_INT 5
29221: PUSH
29222: LD_INT 8
29224: PUSH
29225: LD_INT 9
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: LIST
29232: PUSH
29233: LD_VAR 0 4
29237: ARRAY
29238: ST_TO_ADDR
// end ;
29239: LD_VAR 0 2
29243: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29244: LD_INT 0
29246: PPUSH
29247: PPUSH
29248: PPUSH
// if not mines then
29249: LD_VAR 0 2
29253: NOT
29254: IFFALSE 29258
// exit ;
29256: GO 29402
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29258: LD_ADDR_VAR 0 5
29262: PUSH
29263: LD_INT 81
29265: PUSH
29266: LD_VAR 0 1
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: PUSH
29275: LD_INT 3
29277: PUSH
29278: LD_INT 21
29280: PUSH
29281: LD_INT 3
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PPUSH
29296: CALL_OW 69
29300: ST_TO_ADDR
// for i in mines do
29301: LD_ADDR_VAR 0 4
29305: PUSH
29306: LD_VAR 0 2
29310: PUSH
29311: FOR_IN
29312: IFFALSE 29400
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29314: LD_VAR 0 4
29318: PUSH
29319: LD_INT 1
29321: ARRAY
29322: PPUSH
29323: LD_VAR 0 4
29327: PUSH
29328: LD_INT 2
29330: ARRAY
29331: PPUSH
29332: CALL_OW 458
29336: NOT
29337: IFFALSE 29341
// continue ;
29339: GO 29311
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29341: LD_VAR 0 4
29345: PUSH
29346: LD_INT 1
29348: ARRAY
29349: PPUSH
29350: LD_VAR 0 4
29354: PUSH
29355: LD_INT 2
29357: ARRAY
29358: PPUSH
29359: CALL_OW 428
29363: PUSH
29364: LD_VAR 0 5
29368: IN
29369: IFFALSE 29398
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29371: LD_VAR 0 4
29375: PUSH
29376: LD_INT 1
29378: ARRAY
29379: PPUSH
29380: LD_VAR 0 4
29384: PUSH
29385: LD_INT 2
29387: ARRAY
29388: PPUSH
29389: LD_VAR 0 1
29393: PPUSH
29394: CALL_OW 456
// end ;
29398: GO 29311
29400: POP
29401: POP
// end ;
29402: LD_VAR 0 3
29406: RET
// export function Count ( array ) ; var i ; begin
29407: LD_INT 0
29409: PPUSH
29410: PPUSH
// result := 0 ;
29411: LD_ADDR_VAR 0 2
29415: PUSH
29416: LD_INT 0
29418: ST_TO_ADDR
// for i in array do
29419: LD_ADDR_VAR 0 3
29423: PUSH
29424: LD_VAR 0 1
29428: PUSH
29429: FOR_IN
29430: IFFALSE 29454
// if i then
29432: LD_VAR 0 3
29436: IFFALSE 29452
// result := result + 1 ;
29438: LD_ADDR_VAR 0 2
29442: PUSH
29443: LD_VAR 0 2
29447: PUSH
29448: LD_INT 1
29450: PLUS
29451: ST_TO_ADDR
29452: GO 29429
29454: POP
29455: POP
// end ;
29456: LD_VAR 0 2
29460: RET
// export function IsEmpty ( building ) ; begin
29461: LD_INT 0
29463: PPUSH
// if not building then
29464: LD_VAR 0 1
29468: NOT
29469: IFFALSE 29473
// exit ;
29471: GO 29516
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29473: LD_ADDR_VAR 0 2
29477: PUSH
29478: LD_VAR 0 1
29482: PUSH
29483: LD_INT 22
29485: PUSH
29486: LD_VAR 0 1
29490: PPUSH
29491: CALL_OW 255
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: PUSH
29500: LD_INT 58
29502: PUSH
29503: EMPTY
29504: LIST
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: PPUSH
29510: CALL_OW 69
29514: IN
29515: ST_TO_ADDR
// end ;
29516: LD_VAR 0 2
29520: RET
// export function IsNotFull ( building ) ; begin
29521: LD_INT 0
29523: PPUSH
// if not building then
29524: LD_VAR 0 1
29528: NOT
29529: IFFALSE 29533
// exit ;
29531: GO 29552
// result := UnitsInside ( building ) < 6 ;
29533: LD_ADDR_VAR 0 2
29537: PUSH
29538: LD_VAR 0 1
29542: PPUSH
29543: CALL_OW 313
29547: PUSH
29548: LD_INT 6
29550: LESS
29551: ST_TO_ADDR
// end ;
29552: LD_VAR 0 2
29556: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29557: LD_INT 0
29559: PPUSH
29560: PPUSH
29561: PPUSH
29562: PPUSH
// tmp := [ ] ;
29563: LD_ADDR_VAR 0 3
29567: PUSH
29568: EMPTY
29569: ST_TO_ADDR
// list := [ ] ;
29570: LD_ADDR_VAR 0 5
29574: PUSH
29575: EMPTY
29576: ST_TO_ADDR
// for i = 16 to 25 do
29577: LD_ADDR_VAR 0 4
29581: PUSH
29582: DOUBLE
29583: LD_INT 16
29585: DEC
29586: ST_TO_ADDR
29587: LD_INT 25
29589: PUSH
29590: FOR_TO
29591: IFFALSE 29664
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29593: LD_ADDR_VAR 0 3
29597: PUSH
29598: LD_VAR 0 3
29602: PUSH
29603: LD_INT 22
29605: PUSH
29606: LD_VAR 0 1
29610: PPUSH
29611: CALL_OW 255
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: LD_INT 91
29622: PUSH
29623: LD_VAR 0 1
29627: PUSH
29628: LD_INT 6
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: LIST
29635: PUSH
29636: LD_INT 30
29638: PUSH
29639: LD_VAR 0 4
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: PUSH
29648: EMPTY
29649: LIST
29650: LIST
29651: LIST
29652: PUSH
29653: EMPTY
29654: LIST
29655: PPUSH
29656: CALL_OW 69
29660: ADD
29661: ST_TO_ADDR
29662: GO 29590
29664: POP
29665: POP
// for i = 1 to tmp do
29666: LD_ADDR_VAR 0 4
29670: PUSH
29671: DOUBLE
29672: LD_INT 1
29674: DEC
29675: ST_TO_ADDR
29676: LD_VAR 0 3
29680: PUSH
29681: FOR_TO
29682: IFFALSE 29770
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29684: LD_ADDR_VAR 0 5
29688: PUSH
29689: LD_VAR 0 5
29693: PUSH
29694: LD_VAR 0 3
29698: PUSH
29699: LD_VAR 0 4
29703: ARRAY
29704: PPUSH
29705: CALL_OW 266
29709: PUSH
29710: LD_VAR 0 3
29714: PUSH
29715: LD_VAR 0 4
29719: ARRAY
29720: PPUSH
29721: CALL_OW 250
29725: PUSH
29726: LD_VAR 0 3
29730: PUSH
29731: LD_VAR 0 4
29735: ARRAY
29736: PPUSH
29737: CALL_OW 251
29741: PUSH
29742: LD_VAR 0 3
29746: PUSH
29747: LD_VAR 0 4
29751: ARRAY
29752: PPUSH
29753: CALL_OW 254
29757: PUSH
29758: EMPTY
29759: LIST
29760: LIST
29761: LIST
29762: LIST
29763: PUSH
29764: EMPTY
29765: LIST
29766: ADD
29767: ST_TO_ADDR
29768: GO 29681
29770: POP
29771: POP
// result := list ;
29772: LD_ADDR_VAR 0 2
29776: PUSH
29777: LD_VAR 0 5
29781: ST_TO_ADDR
// end ;
29782: LD_VAR 0 2
29786: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29787: LD_INT 0
29789: PPUSH
29790: PPUSH
29791: PPUSH
29792: PPUSH
29793: PPUSH
29794: PPUSH
29795: PPUSH
// if not factory then
29796: LD_VAR 0 1
29800: NOT
29801: IFFALSE 29805
// exit ;
29803: GO 30398
// if control = control_apeman then
29805: LD_VAR 0 4
29809: PUSH
29810: LD_INT 5
29812: EQUAL
29813: IFFALSE 29922
// begin tmp := UnitsInside ( factory ) ;
29815: LD_ADDR_VAR 0 8
29819: PUSH
29820: LD_VAR 0 1
29824: PPUSH
29825: CALL_OW 313
29829: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29830: LD_VAR 0 8
29834: PPUSH
29835: LD_INT 25
29837: PUSH
29838: LD_INT 12
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: PPUSH
29845: CALL_OW 72
29849: NOT
29850: IFFALSE 29860
// control := control_manual ;
29852: LD_ADDR_VAR 0 4
29856: PUSH
29857: LD_INT 1
29859: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29860: LD_ADDR_VAR 0 8
29864: PUSH
29865: LD_VAR 0 1
29869: PPUSH
29870: CALL 29557 0 1
29874: ST_TO_ADDR
// if tmp then
29875: LD_VAR 0 8
29879: IFFALSE 29922
// begin for i in tmp do
29881: LD_ADDR_VAR 0 7
29885: PUSH
29886: LD_VAR 0 8
29890: PUSH
29891: FOR_IN
29892: IFFALSE 29920
// if i [ 1 ] = b_ext_radio then
29894: LD_VAR 0 7
29898: PUSH
29899: LD_INT 1
29901: ARRAY
29902: PUSH
29903: LD_INT 22
29905: EQUAL
29906: IFFALSE 29918
// begin control := control_remote ;
29908: LD_ADDR_VAR 0 4
29912: PUSH
29913: LD_INT 2
29915: ST_TO_ADDR
// break ;
29916: GO 29920
// end ;
29918: GO 29891
29920: POP
29921: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29922: LD_VAR 0 1
29926: PPUSH
29927: LD_VAR 0 2
29931: PPUSH
29932: LD_VAR 0 3
29936: PPUSH
29937: LD_VAR 0 4
29941: PPUSH
29942: LD_VAR 0 5
29946: PPUSH
29947: CALL_OW 448
29951: IFFALSE 29986
// begin result := [ chassis , engine , control , weapon ] ;
29953: LD_ADDR_VAR 0 6
29957: PUSH
29958: LD_VAR 0 2
29962: PUSH
29963: LD_VAR 0 3
29967: PUSH
29968: LD_VAR 0 4
29972: PUSH
29973: LD_VAR 0 5
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: LIST
29982: LIST
29983: ST_TO_ADDR
// exit ;
29984: GO 30398
// end ; _chassis := AvailableChassisList ( factory ) ;
29986: LD_ADDR_VAR 0 9
29990: PUSH
29991: LD_VAR 0 1
29995: PPUSH
29996: CALL_OW 475
30000: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30001: LD_ADDR_VAR 0 11
30005: PUSH
30006: LD_VAR 0 1
30010: PPUSH
30011: CALL_OW 476
30015: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30016: LD_ADDR_VAR 0 12
30020: PUSH
30021: LD_VAR 0 1
30025: PPUSH
30026: CALL_OW 477
30030: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30031: LD_ADDR_VAR 0 10
30035: PUSH
30036: LD_VAR 0 1
30040: PPUSH
30041: CALL_OW 478
30045: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30046: LD_VAR 0 9
30050: NOT
30051: PUSH
30052: LD_VAR 0 11
30056: NOT
30057: OR
30058: PUSH
30059: LD_VAR 0 12
30063: NOT
30064: OR
30065: PUSH
30066: LD_VAR 0 10
30070: NOT
30071: OR
30072: IFFALSE 30107
// begin result := [ chassis , engine , control , weapon ] ;
30074: LD_ADDR_VAR 0 6
30078: PUSH
30079: LD_VAR 0 2
30083: PUSH
30084: LD_VAR 0 3
30088: PUSH
30089: LD_VAR 0 4
30093: PUSH
30094: LD_VAR 0 5
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: LIST
30103: LIST
30104: ST_TO_ADDR
// exit ;
30105: GO 30398
// end ; if not chassis in _chassis then
30107: LD_VAR 0 2
30111: PUSH
30112: LD_VAR 0 9
30116: IN
30117: NOT
30118: IFFALSE 30144
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30120: LD_ADDR_VAR 0 2
30124: PUSH
30125: LD_VAR 0 9
30129: PUSH
30130: LD_INT 1
30132: PPUSH
30133: LD_VAR 0 9
30137: PPUSH
30138: CALL_OW 12
30142: ARRAY
30143: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30144: LD_VAR 0 2
30148: PPUSH
30149: LD_VAR 0 3
30153: PPUSH
30154: CALL 30403 0 2
30158: NOT
30159: IFFALSE 30218
// repeat engine := _engine [ 1 ] ;
30161: LD_ADDR_VAR 0 3
30165: PUSH
30166: LD_VAR 0 11
30170: PUSH
30171: LD_INT 1
30173: ARRAY
30174: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30175: LD_ADDR_VAR 0 11
30179: PUSH
30180: LD_VAR 0 11
30184: PPUSH
30185: LD_INT 1
30187: PPUSH
30188: CALL_OW 3
30192: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30193: LD_VAR 0 2
30197: PPUSH
30198: LD_VAR 0 3
30202: PPUSH
30203: CALL 30403 0 2
30207: PUSH
30208: LD_VAR 0 11
30212: PUSH
30213: EMPTY
30214: EQUAL
30215: OR
30216: IFFALSE 30161
// if not control in _control then
30218: LD_VAR 0 4
30222: PUSH
30223: LD_VAR 0 12
30227: IN
30228: NOT
30229: IFFALSE 30255
// control := _control [ rand ( 1 , _control ) ] ;
30231: LD_ADDR_VAR 0 4
30235: PUSH
30236: LD_VAR 0 12
30240: PUSH
30241: LD_INT 1
30243: PPUSH
30244: LD_VAR 0 12
30248: PPUSH
30249: CALL_OW 12
30253: ARRAY
30254: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30255: LD_VAR 0 2
30259: PPUSH
30260: LD_VAR 0 5
30264: PPUSH
30265: CALL 30623 0 2
30269: NOT
30270: IFFALSE 30329
// repeat weapon := _weapon [ 1 ] ;
30272: LD_ADDR_VAR 0 5
30276: PUSH
30277: LD_VAR 0 10
30281: PUSH
30282: LD_INT 1
30284: ARRAY
30285: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30286: LD_ADDR_VAR 0 10
30290: PUSH
30291: LD_VAR 0 10
30295: PPUSH
30296: LD_INT 1
30298: PPUSH
30299: CALL_OW 3
30303: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30304: LD_VAR 0 2
30308: PPUSH
30309: LD_VAR 0 5
30313: PPUSH
30314: CALL 30623 0 2
30318: PUSH
30319: LD_VAR 0 10
30323: PUSH
30324: EMPTY
30325: EQUAL
30326: OR
30327: IFFALSE 30272
// result := [ ] ;
30329: LD_ADDR_VAR 0 6
30333: PUSH
30334: EMPTY
30335: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30336: LD_VAR 0 1
30340: PPUSH
30341: LD_VAR 0 2
30345: PPUSH
30346: LD_VAR 0 3
30350: PPUSH
30351: LD_VAR 0 4
30355: PPUSH
30356: LD_VAR 0 5
30360: PPUSH
30361: CALL_OW 448
30365: IFFALSE 30398
// result := [ chassis , engine , control , weapon ] ;
30367: LD_ADDR_VAR 0 6
30371: PUSH
30372: LD_VAR 0 2
30376: PUSH
30377: LD_VAR 0 3
30381: PUSH
30382: LD_VAR 0 4
30386: PUSH
30387: LD_VAR 0 5
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: LIST
30396: LIST
30397: ST_TO_ADDR
// end ;
30398: LD_VAR 0 6
30402: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30403: LD_INT 0
30405: PPUSH
// if not chassis or not engine then
30406: LD_VAR 0 1
30410: NOT
30411: PUSH
30412: LD_VAR 0 2
30416: NOT
30417: OR
30418: IFFALSE 30422
// exit ;
30420: GO 30618
// case engine of engine_solar :
30422: LD_VAR 0 2
30426: PUSH
30427: LD_INT 2
30429: DOUBLE
30430: EQUAL
30431: IFTRUE 30435
30433: GO 30473
30435: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30436: LD_ADDR_VAR 0 3
30440: PUSH
30441: LD_INT 11
30443: PUSH
30444: LD_INT 12
30446: PUSH
30447: LD_INT 13
30449: PUSH
30450: LD_INT 14
30452: PUSH
30453: LD_INT 1
30455: PUSH
30456: LD_INT 2
30458: PUSH
30459: LD_INT 3
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: LIST
30466: LIST
30467: LIST
30468: LIST
30469: LIST
30470: ST_TO_ADDR
30471: GO 30602
30473: LD_INT 1
30475: DOUBLE
30476: EQUAL
30477: IFTRUE 30481
30479: GO 30543
30481: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30482: LD_ADDR_VAR 0 3
30486: PUSH
30487: LD_INT 11
30489: PUSH
30490: LD_INT 12
30492: PUSH
30493: LD_INT 13
30495: PUSH
30496: LD_INT 14
30498: PUSH
30499: LD_INT 1
30501: PUSH
30502: LD_INT 2
30504: PUSH
30505: LD_INT 3
30507: PUSH
30508: LD_INT 4
30510: PUSH
30511: LD_INT 5
30513: PUSH
30514: LD_INT 21
30516: PUSH
30517: LD_INT 23
30519: PUSH
30520: LD_INT 22
30522: PUSH
30523: LD_INT 24
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: ST_TO_ADDR
30541: GO 30602
30543: LD_INT 3
30545: DOUBLE
30546: EQUAL
30547: IFTRUE 30551
30549: GO 30601
30551: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30552: LD_ADDR_VAR 0 3
30556: PUSH
30557: LD_INT 13
30559: PUSH
30560: LD_INT 14
30562: PUSH
30563: LD_INT 2
30565: PUSH
30566: LD_INT 3
30568: PUSH
30569: LD_INT 4
30571: PUSH
30572: LD_INT 5
30574: PUSH
30575: LD_INT 21
30577: PUSH
30578: LD_INT 22
30580: PUSH
30581: LD_INT 23
30583: PUSH
30584: LD_INT 24
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: ST_TO_ADDR
30599: GO 30602
30601: POP
// result := ( chassis in result ) ;
30602: LD_ADDR_VAR 0 3
30606: PUSH
30607: LD_VAR 0 1
30611: PUSH
30612: LD_VAR 0 3
30616: IN
30617: ST_TO_ADDR
// end ;
30618: LD_VAR 0 3
30622: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30623: LD_INT 0
30625: PPUSH
// if not chassis or not weapon then
30626: LD_VAR 0 1
30630: NOT
30631: PUSH
30632: LD_VAR 0 2
30636: NOT
30637: OR
30638: IFFALSE 30642
// exit ;
30640: GO 31668
// case weapon of us_machine_gun :
30642: LD_VAR 0 2
30646: PUSH
30647: LD_INT 2
30649: DOUBLE
30650: EQUAL
30651: IFTRUE 30655
30653: GO 30685
30655: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30656: LD_ADDR_VAR 0 3
30660: PUSH
30661: LD_INT 1
30663: PUSH
30664: LD_INT 2
30666: PUSH
30667: LD_INT 3
30669: PUSH
30670: LD_INT 4
30672: PUSH
30673: LD_INT 5
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: ST_TO_ADDR
30683: GO 31652
30685: LD_INT 3
30687: DOUBLE
30688: EQUAL
30689: IFTRUE 30693
30691: GO 30723
30693: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30694: LD_ADDR_VAR 0 3
30698: PUSH
30699: LD_INT 1
30701: PUSH
30702: LD_INT 2
30704: PUSH
30705: LD_INT 3
30707: PUSH
30708: LD_INT 4
30710: PUSH
30711: LD_INT 5
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: LIST
30720: ST_TO_ADDR
30721: GO 31652
30723: LD_INT 11
30725: DOUBLE
30726: EQUAL
30727: IFTRUE 30731
30729: GO 30761
30731: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30732: LD_ADDR_VAR 0 3
30736: PUSH
30737: LD_INT 1
30739: PUSH
30740: LD_INT 2
30742: PUSH
30743: LD_INT 3
30745: PUSH
30746: LD_INT 4
30748: PUSH
30749: LD_INT 5
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: ST_TO_ADDR
30759: GO 31652
30761: LD_INT 4
30763: DOUBLE
30764: EQUAL
30765: IFTRUE 30769
30767: GO 30795
30769: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30770: LD_ADDR_VAR 0 3
30774: PUSH
30775: LD_INT 2
30777: PUSH
30778: LD_INT 3
30780: PUSH
30781: LD_INT 4
30783: PUSH
30784: LD_INT 5
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: ST_TO_ADDR
30793: GO 31652
30795: LD_INT 5
30797: DOUBLE
30798: EQUAL
30799: IFTRUE 30803
30801: GO 30829
30803: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30804: LD_ADDR_VAR 0 3
30808: PUSH
30809: LD_INT 2
30811: PUSH
30812: LD_INT 3
30814: PUSH
30815: LD_INT 4
30817: PUSH
30818: LD_INT 5
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: ST_TO_ADDR
30827: GO 31652
30829: LD_INT 9
30831: DOUBLE
30832: EQUAL
30833: IFTRUE 30837
30835: GO 30863
30837: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30838: LD_ADDR_VAR 0 3
30842: PUSH
30843: LD_INT 2
30845: PUSH
30846: LD_INT 3
30848: PUSH
30849: LD_INT 4
30851: PUSH
30852: LD_INT 5
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: ST_TO_ADDR
30861: GO 31652
30863: LD_INT 7
30865: DOUBLE
30866: EQUAL
30867: IFTRUE 30871
30869: GO 30897
30871: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30872: LD_ADDR_VAR 0 3
30876: PUSH
30877: LD_INT 2
30879: PUSH
30880: LD_INT 3
30882: PUSH
30883: LD_INT 4
30885: PUSH
30886: LD_INT 5
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: LIST
30893: LIST
30894: ST_TO_ADDR
30895: GO 31652
30897: LD_INT 12
30899: DOUBLE
30900: EQUAL
30901: IFTRUE 30905
30903: GO 30931
30905: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30906: LD_ADDR_VAR 0 3
30910: PUSH
30911: LD_INT 2
30913: PUSH
30914: LD_INT 3
30916: PUSH
30917: LD_INT 4
30919: PUSH
30920: LD_INT 5
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: ST_TO_ADDR
30929: GO 31652
30931: LD_INT 13
30933: DOUBLE
30934: EQUAL
30935: IFTRUE 30939
30937: GO 30965
30939: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30940: LD_ADDR_VAR 0 3
30944: PUSH
30945: LD_INT 2
30947: PUSH
30948: LD_INT 3
30950: PUSH
30951: LD_INT 4
30953: PUSH
30954: LD_INT 5
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: LIST
30961: LIST
30962: ST_TO_ADDR
30963: GO 31652
30965: LD_INT 14
30967: DOUBLE
30968: EQUAL
30969: IFTRUE 30973
30971: GO 30991
30973: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30974: LD_ADDR_VAR 0 3
30978: PUSH
30979: LD_INT 4
30981: PUSH
30982: LD_INT 5
30984: PUSH
30985: EMPTY
30986: LIST
30987: LIST
30988: ST_TO_ADDR
30989: GO 31652
30991: LD_INT 6
30993: DOUBLE
30994: EQUAL
30995: IFTRUE 30999
30997: GO 31017
30999: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31000: LD_ADDR_VAR 0 3
31004: PUSH
31005: LD_INT 4
31007: PUSH
31008: LD_INT 5
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: ST_TO_ADDR
31015: GO 31652
31017: LD_INT 10
31019: DOUBLE
31020: EQUAL
31021: IFTRUE 31025
31023: GO 31043
31025: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31026: LD_ADDR_VAR 0 3
31030: PUSH
31031: LD_INT 4
31033: PUSH
31034: LD_INT 5
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: ST_TO_ADDR
31041: GO 31652
31043: LD_INT 22
31045: DOUBLE
31046: EQUAL
31047: IFTRUE 31051
31049: GO 31077
31051: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31052: LD_ADDR_VAR 0 3
31056: PUSH
31057: LD_INT 11
31059: PUSH
31060: LD_INT 12
31062: PUSH
31063: LD_INT 13
31065: PUSH
31066: LD_INT 14
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: ST_TO_ADDR
31075: GO 31652
31077: LD_INT 23
31079: DOUBLE
31080: EQUAL
31081: IFTRUE 31085
31083: GO 31111
31085: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31086: LD_ADDR_VAR 0 3
31090: PUSH
31091: LD_INT 11
31093: PUSH
31094: LD_INT 12
31096: PUSH
31097: LD_INT 13
31099: PUSH
31100: LD_INT 14
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: LIST
31107: LIST
31108: ST_TO_ADDR
31109: GO 31652
31111: LD_INT 24
31113: DOUBLE
31114: EQUAL
31115: IFTRUE 31119
31117: GO 31145
31119: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31120: LD_ADDR_VAR 0 3
31124: PUSH
31125: LD_INT 11
31127: PUSH
31128: LD_INT 12
31130: PUSH
31131: LD_INT 13
31133: PUSH
31134: LD_INT 14
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: LIST
31141: LIST
31142: ST_TO_ADDR
31143: GO 31652
31145: LD_INT 30
31147: DOUBLE
31148: EQUAL
31149: IFTRUE 31153
31151: GO 31179
31153: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31154: LD_ADDR_VAR 0 3
31158: PUSH
31159: LD_INT 11
31161: PUSH
31162: LD_INT 12
31164: PUSH
31165: LD_INT 13
31167: PUSH
31168: LD_INT 14
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: ST_TO_ADDR
31177: GO 31652
31179: LD_INT 25
31181: DOUBLE
31182: EQUAL
31183: IFTRUE 31187
31185: GO 31205
31187: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31188: LD_ADDR_VAR 0 3
31192: PUSH
31193: LD_INT 13
31195: PUSH
31196: LD_INT 14
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: ST_TO_ADDR
31203: GO 31652
31205: LD_INT 27
31207: DOUBLE
31208: EQUAL
31209: IFTRUE 31213
31211: GO 31231
31213: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31214: LD_ADDR_VAR 0 3
31218: PUSH
31219: LD_INT 13
31221: PUSH
31222: LD_INT 14
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: ST_TO_ADDR
31229: GO 31652
31231: LD_INT 28
31233: DOUBLE
31234: EQUAL
31235: IFTRUE 31239
31237: GO 31257
31239: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31240: LD_ADDR_VAR 0 3
31244: PUSH
31245: LD_INT 13
31247: PUSH
31248: LD_INT 14
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: ST_TO_ADDR
31255: GO 31652
31257: LD_INT 29
31259: DOUBLE
31260: EQUAL
31261: IFTRUE 31265
31263: GO 31283
31265: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31266: LD_ADDR_VAR 0 3
31270: PUSH
31271: LD_INT 13
31273: PUSH
31274: LD_INT 14
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: ST_TO_ADDR
31281: GO 31652
31283: LD_INT 31
31285: DOUBLE
31286: EQUAL
31287: IFTRUE 31291
31289: GO 31309
31291: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31292: LD_ADDR_VAR 0 3
31296: PUSH
31297: LD_INT 13
31299: PUSH
31300: LD_INT 14
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: ST_TO_ADDR
31307: GO 31652
31309: LD_INT 26
31311: DOUBLE
31312: EQUAL
31313: IFTRUE 31317
31315: GO 31335
31317: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31318: LD_ADDR_VAR 0 3
31322: PUSH
31323: LD_INT 13
31325: PUSH
31326: LD_INT 14
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: ST_TO_ADDR
31333: GO 31652
31335: LD_INT 42
31337: DOUBLE
31338: EQUAL
31339: IFTRUE 31343
31341: GO 31369
31343: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31344: LD_ADDR_VAR 0 3
31348: PUSH
31349: LD_INT 21
31351: PUSH
31352: LD_INT 22
31354: PUSH
31355: LD_INT 23
31357: PUSH
31358: LD_INT 24
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: ST_TO_ADDR
31367: GO 31652
31369: LD_INT 43
31371: DOUBLE
31372: EQUAL
31373: IFTRUE 31377
31375: GO 31403
31377: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31378: LD_ADDR_VAR 0 3
31382: PUSH
31383: LD_INT 21
31385: PUSH
31386: LD_INT 22
31388: PUSH
31389: LD_INT 23
31391: PUSH
31392: LD_INT 24
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: ST_TO_ADDR
31401: GO 31652
31403: LD_INT 44
31405: DOUBLE
31406: EQUAL
31407: IFTRUE 31411
31409: GO 31437
31411: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31412: LD_ADDR_VAR 0 3
31416: PUSH
31417: LD_INT 21
31419: PUSH
31420: LD_INT 22
31422: PUSH
31423: LD_INT 23
31425: PUSH
31426: LD_INT 24
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: LIST
31433: LIST
31434: ST_TO_ADDR
31435: GO 31652
31437: LD_INT 45
31439: DOUBLE
31440: EQUAL
31441: IFTRUE 31445
31443: GO 31471
31445: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31446: LD_ADDR_VAR 0 3
31450: PUSH
31451: LD_INT 21
31453: PUSH
31454: LD_INT 22
31456: PUSH
31457: LD_INT 23
31459: PUSH
31460: LD_INT 24
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: ST_TO_ADDR
31469: GO 31652
31471: LD_INT 49
31473: DOUBLE
31474: EQUAL
31475: IFTRUE 31479
31477: GO 31505
31479: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31480: LD_ADDR_VAR 0 3
31484: PUSH
31485: LD_INT 21
31487: PUSH
31488: LD_INT 22
31490: PUSH
31491: LD_INT 23
31493: PUSH
31494: LD_INT 24
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: ST_TO_ADDR
31503: GO 31652
31505: LD_INT 51
31507: DOUBLE
31508: EQUAL
31509: IFTRUE 31513
31511: GO 31539
31513: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31514: LD_ADDR_VAR 0 3
31518: PUSH
31519: LD_INT 21
31521: PUSH
31522: LD_INT 22
31524: PUSH
31525: LD_INT 23
31527: PUSH
31528: LD_INT 24
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: LIST
31535: LIST
31536: ST_TO_ADDR
31537: GO 31652
31539: LD_INT 52
31541: DOUBLE
31542: EQUAL
31543: IFTRUE 31547
31545: GO 31573
31547: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31548: LD_ADDR_VAR 0 3
31552: PUSH
31553: LD_INT 21
31555: PUSH
31556: LD_INT 22
31558: PUSH
31559: LD_INT 23
31561: PUSH
31562: LD_INT 24
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: ST_TO_ADDR
31571: GO 31652
31573: LD_INT 53
31575: DOUBLE
31576: EQUAL
31577: IFTRUE 31581
31579: GO 31599
31581: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31582: LD_ADDR_VAR 0 3
31586: PUSH
31587: LD_INT 23
31589: PUSH
31590: LD_INT 24
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: ST_TO_ADDR
31597: GO 31652
31599: LD_INT 46
31601: DOUBLE
31602: EQUAL
31603: IFTRUE 31607
31605: GO 31625
31607: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31608: LD_ADDR_VAR 0 3
31612: PUSH
31613: LD_INT 23
31615: PUSH
31616: LD_INT 24
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: ST_TO_ADDR
31623: GO 31652
31625: LD_INT 47
31627: DOUBLE
31628: EQUAL
31629: IFTRUE 31633
31631: GO 31651
31633: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31634: LD_ADDR_VAR 0 3
31638: PUSH
31639: LD_INT 23
31641: PUSH
31642: LD_INT 24
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: ST_TO_ADDR
31649: GO 31652
31651: POP
// result := ( chassis in result ) ;
31652: LD_ADDR_VAR 0 3
31656: PUSH
31657: LD_VAR 0 1
31661: PUSH
31662: LD_VAR 0 3
31666: IN
31667: ST_TO_ADDR
// end ;
31668: LD_VAR 0 3
31672: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31673: LD_INT 0
31675: PPUSH
31676: PPUSH
31677: PPUSH
31678: PPUSH
31679: PPUSH
31680: PPUSH
31681: PPUSH
// result := array ;
31682: LD_ADDR_VAR 0 5
31686: PUSH
31687: LD_VAR 0 1
31691: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31692: LD_VAR 0 1
31696: NOT
31697: PUSH
31698: LD_VAR 0 2
31702: NOT
31703: OR
31704: PUSH
31705: LD_VAR 0 3
31709: NOT
31710: OR
31711: PUSH
31712: LD_VAR 0 2
31716: PUSH
31717: LD_VAR 0 1
31721: GREATER
31722: OR
31723: PUSH
31724: LD_VAR 0 3
31728: PUSH
31729: LD_VAR 0 1
31733: GREATER
31734: OR
31735: IFFALSE 31739
// exit ;
31737: GO 32035
// if direction then
31739: LD_VAR 0 4
31743: IFFALSE 31807
// begin d := 1 ;
31745: LD_ADDR_VAR 0 9
31749: PUSH
31750: LD_INT 1
31752: ST_TO_ADDR
// if i_from > i_to then
31753: LD_VAR 0 2
31757: PUSH
31758: LD_VAR 0 3
31762: GREATER
31763: IFFALSE 31789
// length := ( array - i_from ) + i_to else
31765: LD_ADDR_VAR 0 11
31769: PUSH
31770: LD_VAR 0 1
31774: PUSH
31775: LD_VAR 0 2
31779: MINUS
31780: PUSH
31781: LD_VAR 0 3
31785: PLUS
31786: ST_TO_ADDR
31787: GO 31805
// length := i_to - i_from ;
31789: LD_ADDR_VAR 0 11
31793: PUSH
31794: LD_VAR 0 3
31798: PUSH
31799: LD_VAR 0 2
31803: MINUS
31804: ST_TO_ADDR
// end else
31805: GO 31868
// begin d := - 1 ;
31807: LD_ADDR_VAR 0 9
31811: PUSH
31812: LD_INT 1
31814: NEG
31815: ST_TO_ADDR
// if i_from > i_to then
31816: LD_VAR 0 2
31820: PUSH
31821: LD_VAR 0 3
31825: GREATER
31826: IFFALSE 31846
// length := i_from - i_to else
31828: LD_ADDR_VAR 0 11
31832: PUSH
31833: LD_VAR 0 2
31837: PUSH
31838: LD_VAR 0 3
31842: MINUS
31843: ST_TO_ADDR
31844: GO 31868
// length := ( array - i_to ) + i_from ;
31846: LD_ADDR_VAR 0 11
31850: PUSH
31851: LD_VAR 0 1
31855: PUSH
31856: LD_VAR 0 3
31860: MINUS
31861: PUSH
31862: LD_VAR 0 2
31866: PLUS
31867: ST_TO_ADDR
// end ; if not length then
31868: LD_VAR 0 11
31872: NOT
31873: IFFALSE 31877
// exit ;
31875: GO 32035
// tmp := array ;
31877: LD_ADDR_VAR 0 10
31881: PUSH
31882: LD_VAR 0 1
31886: ST_TO_ADDR
// for i = 1 to length do
31887: LD_ADDR_VAR 0 6
31891: PUSH
31892: DOUBLE
31893: LD_INT 1
31895: DEC
31896: ST_TO_ADDR
31897: LD_VAR 0 11
31901: PUSH
31902: FOR_TO
31903: IFFALSE 32023
// begin for j = 1 to array do
31905: LD_ADDR_VAR 0 7
31909: PUSH
31910: DOUBLE
31911: LD_INT 1
31913: DEC
31914: ST_TO_ADDR
31915: LD_VAR 0 1
31919: PUSH
31920: FOR_TO
31921: IFFALSE 32009
// begin k := j + d ;
31923: LD_ADDR_VAR 0 8
31927: PUSH
31928: LD_VAR 0 7
31932: PUSH
31933: LD_VAR 0 9
31937: PLUS
31938: ST_TO_ADDR
// if k > array then
31939: LD_VAR 0 8
31943: PUSH
31944: LD_VAR 0 1
31948: GREATER
31949: IFFALSE 31959
// k := 1 ;
31951: LD_ADDR_VAR 0 8
31955: PUSH
31956: LD_INT 1
31958: ST_TO_ADDR
// if not k then
31959: LD_VAR 0 8
31963: NOT
31964: IFFALSE 31976
// k := array ;
31966: LD_ADDR_VAR 0 8
31970: PUSH
31971: LD_VAR 0 1
31975: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31976: LD_ADDR_VAR 0 10
31980: PUSH
31981: LD_VAR 0 10
31985: PPUSH
31986: LD_VAR 0 8
31990: PPUSH
31991: LD_VAR 0 1
31995: PUSH
31996: LD_VAR 0 7
32000: ARRAY
32001: PPUSH
32002: CALL_OW 1
32006: ST_TO_ADDR
// end ;
32007: GO 31920
32009: POP
32010: POP
// array := tmp ;
32011: LD_ADDR_VAR 0 1
32015: PUSH
32016: LD_VAR 0 10
32020: ST_TO_ADDR
// end ;
32021: GO 31902
32023: POP
32024: POP
// result := array ;
32025: LD_ADDR_VAR 0 5
32029: PUSH
32030: LD_VAR 0 1
32034: ST_TO_ADDR
// end ;
32035: LD_VAR 0 5
32039: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32040: LD_INT 0
32042: PPUSH
32043: PPUSH
// result := 0 ;
32044: LD_ADDR_VAR 0 3
32048: PUSH
32049: LD_INT 0
32051: ST_TO_ADDR
// if not array or not value in array then
32052: LD_VAR 0 1
32056: NOT
32057: PUSH
32058: LD_VAR 0 2
32062: PUSH
32063: LD_VAR 0 1
32067: IN
32068: NOT
32069: OR
32070: IFFALSE 32074
// exit ;
32072: GO 32128
// for i = 1 to array do
32074: LD_ADDR_VAR 0 4
32078: PUSH
32079: DOUBLE
32080: LD_INT 1
32082: DEC
32083: ST_TO_ADDR
32084: LD_VAR 0 1
32088: PUSH
32089: FOR_TO
32090: IFFALSE 32126
// if value = array [ i ] then
32092: LD_VAR 0 2
32096: PUSH
32097: LD_VAR 0 1
32101: PUSH
32102: LD_VAR 0 4
32106: ARRAY
32107: EQUAL
32108: IFFALSE 32124
// begin result := i ;
32110: LD_ADDR_VAR 0 3
32114: PUSH
32115: LD_VAR 0 4
32119: ST_TO_ADDR
// exit ;
32120: POP
32121: POP
32122: GO 32128
// end ;
32124: GO 32089
32126: POP
32127: POP
// end ;
32128: LD_VAR 0 3
32132: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32133: LD_INT 0
32135: PPUSH
// vc_chassis := chassis ;
32136: LD_ADDR_OWVAR 37
32140: PUSH
32141: LD_VAR 0 1
32145: ST_TO_ADDR
// vc_engine := engine ;
32146: LD_ADDR_OWVAR 39
32150: PUSH
32151: LD_VAR 0 2
32155: ST_TO_ADDR
// vc_control := control ;
32156: LD_ADDR_OWVAR 38
32160: PUSH
32161: LD_VAR 0 3
32165: ST_TO_ADDR
// vc_weapon := weapon ;
32166: LD_ADDR_OWVAR 40
32170: PUSH
32171: LD_VAR 0 4
32175: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32176: LD_ADDR_OWVAR 41
32180: PUSH
32181: LD_VAR 0 5
32185: ST_TO_ADDR
// end ;
32186: LD_VAR 0 6
32190: RET
// export function WantPlant ( unit ) ; var task ; begin
32191: LD_INT 0
32193: PPUSH
32194: PPUSH
// result := false ;
32195: LD_ADDR_VAR 0 2
32199: PUSH
32200: LD_INT 0
32202: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32203: LD_ADDR_VAR 0 3
32207: PUSH
32208: LD_VAR 0 1
32212: PPUSH
32213: CALL_OW 437
32217: ST_TO_ADDR
// if task then
32218: LD_VAR 0 3
32222: IFFALSE 32250
// if task [ 1 ] [ 1 ] = p then
32224: LD_VAR 0 3
32228: PUSH
32229: LD_INT 1
32231: ARRAY
32232: PUSH
32233: LD_INT 1
32235: ARRAY
32236: PUSH
32237: LD_STRING p
32239: EQUAL
32240: IFFALSE 32250
// result := true ;
32242: LD_ADDR_VAR 0 2
32246: PUSH
32247: LD_INT 1
32249: ST_TO_ADDR
// end ;
32250: LD_VAR 0 2
32254: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32255: LD_INT 0
32257: PPUSH
32258: PPUSH
32259: PPUSH
32260: PPUSH
// if pos < 1 then
32261: LD_VAR 0 2
32265: PUSH
32266: LD_INT 1
32268: LESS
32269: IFFALSE 32273
// exit ;
32271: GO 32576
// if pos = 1 then
32273: LD_VAR 0 2
32277: PUSH
32278: LD_INT 1
32280: EQUAL
32281: IFFALSE 32314
// result := Replace ( arr , pos [ 1 ] , value ) else
32283: LD_ADDR_VAR 0 4
32287: PUSH
32288: LD_VAR 0 1
32292: PPUSH
32293: LD_VAR 0 2
32297: PUSH
32298: LD_INT 1
32300: ARRAY
32301: PPUSH
32302: LD_VAR 0 3
32306: PPUSH
32307: CALL_OW 1
32311: ST_TO_ADDR
32312: GO 32576
// begin tmp := arr ;
32314: LD_ADDR_VAR 0 6
32318: PUSH
32319: LD_VAR 0 1
32323: ST_TO_ADDR
// s_arr := [ tmp ] ;
32324: LD_ADDR_VAR 0 7
32328: PUSH
32329: LD_VAR 0 6
32333: PUSH
32334: EMPTY
32335: LIST
32336: ST_TO_ADDR
// for i = 1 to pos - 1 do
32337: LD_ADDR_VAR 0 5
32341: PUSH
32342: DOUBLE
32343: LD_INT 1
32345: DEC
32346: ST_TO_ADDR
32347: LD_VAR 0 2
32351: PUSH
32352: LD_INT 1
32354: MINUS
32355: PUSH
32356: FOR_TO
32357: IFFALSE 32402
// begin tmp := tmp [ pos [ i ] ] ;
32359: LD_ADDR_VAR 0 6
32363: PUSH
32364: LD_VAR 0 6
32368: PUSH
32369: LD_VAR 0 2
32373: PUSH
32374: LD_VAR 0 5
32378: ARRAY
32379: ARRAY
32380: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32381: LD_ADDR_VAR 0 7
32385: PUSH
32386: LD_VAR 0 7
32390: PUSH
32391: LD_VAR 0 6
32395: PUSH
32396: EMPTY
32397: LIST
32398: ADD
32399: ST_TO_ADDR
// end ;
32400: GO 32356
32402: POP
32403: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32404: LD_ADDR_VAR 0 6
32408: PUSH
32409: LD_VAR 0 6
32413: PPUSH
32414: LD_VAR 0 2
32418: PUSH
32419: LD_VAR 0 2
32423: ARRAY
32424: PPUSH
32425: LD_VAR 0 3
32429: PPUSH
32430: CALL_OW 1
32434: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32435: LD_ADDR_VAR 0 7
32439: PUSH
32440: LD_VAR 0 7
32444: PPUSH
32445: LD_VAR 0 7
32449: PPUSH
32450: LD_VAR 0 6
32454: PPUSH
32455: CALL_OW 1
32459: ST_TO_ADDR
// for i = s_arr downto 2 do
32460: LD_ADDR_VAR 0 5
32464: PUSH
32465: DOUBLE
32466: LD_VAR 0 7
32470: INC
32471: ST_TO_ADDR
32472: LD_INT 2
32474: PUSH
32475: FOR_DOWNTO
32476: IFFALSE 32560
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32478: LD_ADDR_VAR 0 6
32482: PUSH
32483: LD_VAR 0 7
32487: PUSH
32488: LD_VAR 0 5
32492: PUSH
32493: LD_INT 1
32495: MINUS
32496: ARRAY
32497: PPUSH
32498: LD_VAR 0 2
32502: PUSH
32503: LD_VAR 0 5
32507: PUSH
32508: LD_INT 1
32510: MINUS
32511: ARRAY
32512: PPUSH
32513: LD_VAR 0 7
32517: PUSH
32518: LD_VAR 0 5
32522: ARRAY
32523: PPUSH
32524: CALL_OW 1
32528: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32529: LD_ADDR_VAR 0 7
32533: PUSH
32534: LD_VAR 0 7
32538: PPUSH
32539: LD_VAR 0 5
32543: PUSH
32544: LD_INT 1
32546: MINUS
32547: PPUSH
32548: LD_VAR 0 6
32552: PPUSH
32553: CALL_OW 1
32557: ST_TO_ADDR
// end ;
32558: GO 32475
32560: POP
32561: POP
// result := s_arr [ 1 ] ;
32562: LD_ADDR_VAR 0 4
32566: PUSH
32567: LD_VAR 0 7
32571: PUSH
32572: LD_INT 1
32574: ARRAY
32575: ST_TO_ADDR
// end ; end ;
32576: LD_VAR 0 4
32580: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32581: LD_INT 0
32583: PPUSH
32584: PPUSH
// if not list then
32585: LD_VAR 0 1
32589: NOT
32590: IFFALSE 32594
// exit ;
32592: GO 32685
// i := list [ pos1 ] ;
32594: LD_ADDR_VAR 0 5
32598: PUSH
32599: LD_VAR 0 1
32603: PUSH
32604: LD_VAR 0 2
32608: ARRAY
32609: ST_TO_ADDR
// if not i then
32610: LD_VAR 0 5
32614: NOT
32615: IFFALSE 32619
// exit ;
32617: GO 32685
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32619: LD_ADDR_VAR 0 1
32623: PUSH
32624: LD_VAR 0 1
32628: PPUSH
32629: LD_VAR 0 2
32633: PPUSH
32634: LD_VAR 0 1
32638: PUSH
32639: LD_VAR 0 3
32643: ARRAY
32644: PPUSH
32645: CALL_OW 1
32649: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32650: LD_ADDR_VAR 0 1
32654: PUSH
32655: LD_VAR 0 1
32659: PPUSH
32660: LD_VAR 0 3
32664: PPUSH
32665: LD_VAR 0 5
32669: PPUSH
32670: CALL_OW 1
32674: ST_TO_ADDR
// result := list ;
32675: LD_ADDR_VAR 0 4
32679: PUSH
32680: LD_VAR 0 1
32684: ST_TO_ADDR
// end ;
32685: LD_VAR 0 4
32689: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32690: LD_INT 0
32692: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32693: LD_ADDR_VAR 0 5
32697: PUSH
32698: LD_VAR 0 1
32702: PPUSH
32703: CALL_OW 250
32707: PPUSH
32708: LD_VAR 0 1
32712: PPUSH
32713: CALL_OW 251
32717: PPUSH
32718: LD_VAR 0 2
32722: PPUSH
32723: LD_VAR 0 3
32727: PPUSH
32728: LD_VAR 0 4
32732: PPUSH
32733: CALL 32743 0 5
32737: ST_TO_ADDR
// end ;
32738: LD_VAR 0 5
32742: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32743: LD_INT 0
32745: PPUSH
32746: PPUSH
32747: PPUSH
32748: PPUSH
// if not list then
32749: LD_VAR 0 3
32753: NOT
32754: IFFALSE 32758
// exit ;
32756: GO 33146
// result := [ ] ;
32758: LD_ADDR_VAR 0 6
32762: PUSH
32763: EMPTY
32764: ST_TO_ADDR
// for i in list do
32765: LD_ADDR_VAR 0 7
32769: PUSH
32770: LD_VAR 0 3
32774: PUSH
32775: FOR_IN
32776: IFFALSE 32978
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32778: LD_ADDR_VAR 0 9
32782: PUSH
32783: LD_VAR 0 7
32787: PPUSH
32788: LD_VAR 0 1
32792: PPUSH
32793: LD_VAR 0 2
32797: PPUSH
32798: CALL_OW 297
32802: ST_TO_ADDR
// if not result then
32803: LD_VAR 0 6
32807: NOT
32808: IFFALSE 32834
// result := [ [ i , tmp ] ] else
32810: LD_ADDR_VAR 0 6
32814: PUSH
32815: LD_VAR 0 7
32819: PUSH
32820: LD_VAR 0 9
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PUSH
32829: EMPTY
32830: LIST
32831: ST_TO_ADDR
32832: GO 32976
// begin if result [ result ] [ 2 ] < tmp then
32834: LD_VAR 0 6
32838: PUSH
32839: LD_VAR 0 6
32843: ARRAY
32844: PUSH
32845: LD_INT 2
32847: ARRAY
32848: PUSH
32849: LD_VAR 0 9
32853: LESS
32854: IFFALSE 32896
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32856: LD_ADDR_VAR 0 6
32860: PUSH
32861: LD_VAR 0 6
32865: PPUSH
32866: LD_VAR 0 6
32870: PUSH
32871: LD_INT 1
32873: PLUS
32874: PPUSH
32875: LD_VAR 0 7
32879: PUSH
32880: LD_VAR 0 9
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: PPUSH
32889: CALL_OW 2
32893: ST_TO_ADDR
32894: GO 32976
// for j = 1 to result do
32896: LD_ADDR_VAR 0 8
32900: PUSH
32901: DOUBLE
32902: LD_INT 1
32904: DEC
32905: ST_TO_ADDR
32906: LD_VAR 0 6
32910: PUSH
32911: FOR_TO
32912: IFFALSE 32974
// begin if tmp < result [ j ] [ 2 ] then
32914: LD_VAR 0 9
32918: PUSH
32919: LD_VAR 0 6
32923: PUSH
32924: LD_VAR 0 8
32928: ARRAY
32929: PUSH
32930: LD_INT 2
32932: ARRAY
32933: LESS
32934: IFFALSE 32972
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32936: LD_ADDR_VAR 0 6
32940: PUSH
32941: LD_VAR 0 6
32945: PPUSH
32946: LD_VAR 0 8
32950: PPUSH
32951: LD_VAR 0 7
32955: PUSH
32956: LD_VAR 0 9
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PPUSH
32965: CALL_OW 2
32969: ST_TO_ADDR
// break ;
32970: GO 32974
// end ; end ;
32972: GO 32911
32974: POP
32975: POP
// end ; end ;
32976: GO 32775
32978: POP
32979: POP
// if result and not asc then
32980: LD_VAR 0 6
32984: PUSH
32985: LD_VAR 0 4
32989: NOT
32990: AND
32991: IFFALSE 33066
// begin tmp := result ;
32993: LD_ADDR_VAR 0 9
32997: PUSH
32998: LD_VAR 0 6
33002: ST_TO_ADDR
// for i = tmp downto 1 do
33003: LD_ADDR_VAR 0 7
33007: PUSH
33008: DOUBLE
33009: LD_VAR 0 9
33013: INC
33014: ST_TO_ADDR
33015: LD_INT 1
33017: PUSH
33018: FOR_DOWNTO
33019: IFFALSE 33064
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33021: LD_ADDR_VAR 0 6
33025: PUSH
33026: LD_VAR 0 6
33030: PPUSH
33031: LD_VAR 0 9
33035: PUSH
33036: LD_VAR 0 7
33040: MINUS
33041: PUSH
33042: LD_INT 1
33044: PLUS
33045: PPUSH
33046: LD_VAR 0 9
33050: PUSH
33051: LD_VAR 0 7
33055: ARRAY
33056: PPUSH
33057: CALL_OW 1
33061: ST_TO_ADDR
33062: GO 33018
33064: POP
33065: POP
// end ; tmp := [ ] ;
33066: LD_ADDR_VAR 0 9
33070: PUSH
33071: EMPTY
33072: ST_TO_ADDR
// if mode then
33073: LD_VAR 0 5
33077: IFFALSE 33146
// begin for i = 1 to result do
33079: LD_ADDR_VAR 0 7
33083: PUSH
33084: DOUBLE
33085: LD_INT 1
33087: DEC
33088: ST_TO_ADDR
33089: LD_VAR 0 6
33093: PUSH
33094: FOR_TO
33095: IFFALSE 33134
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33097: LD_ADDR_VAR 0 9
33101: PUSH
33102: LD_VAR 0 9
33106: PPUSH
33107: LD_VAR 0 7
33111: PPUSH
33112: LD_VAR 0 6
33116: PUSH
33117: LD_VAR 0 7
33121: ARRAY
33122: PUSH
33123: LD_INT 1
33125: ARRAY
33126: PPUSH
33127: CALL_OW 1
33131: ST_TO_ADDR
33132: GO 33094
33134: POP
33135: POP
// result := tmp ;
33136: LD_ADDR_VAR 0 6
33140: PUSH
33141: LD_VAR 0 9
33145: ST_TO_ADDR
// end ; end ;
33146: LD_VAR 0 6
33150: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33151: LD_INT 0
33153: PPUSH
33154: PPUSH
33155: PPUSH
33156: PPUSH
33157: PPUSH
33158: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33159: LD_ADDR_VAR 0 5
33163: PUSH
33164: LD_INT 0
33166: PUSH
33167: LD_INT 0
33169: PUSH
33170: LD_INT 0
33172: PUSH
33173: EMPTY
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: ST_TO_ADDR
// if not x or not y then
33181: LD_VAR 0 2
33185: NOT
33186: PUSH
33187: LD_VAR 0 3
33191: NOT
33192: OR
33193: IFFALSE 33197
// exit ;
33195: GO 34843
// if not range then
33197: LD_VAR 0 4
33201: NOT
33202: IFFALSE 33212
// range := 10 ;
33204: LD_ADDR_VAR 0 4
33208: PUSH
33209: LD_INT 10
33211: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33212: LD_ADDR_VAR 0 8
33216: PUSH
33217: LD_INT 81
33219: PUSH
33220: LD_VAR 0 1
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: LD_INT 92
33231: PUSH
33232: LD_VAR 0 2
33236: PUSH
33237: LD_VAR 0 3
33241: PUSH
33242: LD_VAR 0 4
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: PUSH
33253: LD_INT 3
33255: PUSH
33256: LD_INT 21
33258: PUSH
33259: LD_INT 3
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: LIST
33274: PPUSH
33275: CALL_OW 69
33279: ST_TO_ADDR
// if not tmp then
33280: LD_VAR 0 8
33284: NOT
33285: IFFALSE 33289
// exit ;
33287: GO 34843
// for i in tmp do
33289: LD_ADDR_VAR 0 6
33293: PUSH
33294: LD_VAR 0 8
33298: PUSH
33299: FOR_IN
33300: IFFALSE 34818
// begin points := [ 0 , 0 , 0 ] ;
33302: LD_ADDR_VAR 0 9
33306: PUSH
33307: LD_INT 0
33309: PUSH
33310: LD_INT 0
33312: PUSH
33313: LD_INT 0
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: LIST
33320: ST_TO_ADDR
// bpoints := 1 ;
33321: LD_ADDR_VAR 0 10
33325: PUSH
33326: LD_INT 1
33328: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33329: LD_VAR 0 6
33333: PPUSH
33334: CALL_OW 247
33338: PUSH
33339: LD_INT 1
33341: DOUBLE
33342: EQUAL
33343: IFTRUE 33347
33345: GO 33925
33347: POP
// begin if GetClass ( i ) = 1 then
33348: LD_VAR 0 6
33352: PPUSH
33353: CALL_OW 257
33357: PUSH
33358: LD_INT 1
33360: EQUAL
33361: IFFALSE 33382
// points := [ 10 , 5 , 3 ] ;
33363: LD_ADDR_VAR 0 9
33367: PUSH
33368: LD_INT 10
33370: PUSH
33371: LD_INT 5
33373: PUSH
33374: LD_INT 3
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: LIST
33381: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33382: LD_VAR 0 6
33386: PPUSH
33387: CALL_OW 257
33391: PUSH
33392: LD_INT 2
33394: PUSH
33395: LD_INT 3
33397: PUSH
33398: LD_INT 4
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: LIST
33405: IN
33406: IFFALSE 33427
// points := [ 3 , 2 , 1 ] ;
33408: LD_ADDR_VAR 0 9
33412: PUSH
33413: LD_INT 3
33415: PUSH
33416: LD_INT 2
33418: PUSH
33419: LD_INT 1
33421: PUSH
33422: EMPTY
33423: LIST
33424: LIST
33425: LIST
33426: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33427: LD_VAR 0 6
33431: PPUSH
33432: CALL_OW 257
33436: PUSH
33437: LD_INT 5
33439: EQUAL
33440: IFFALSE 33461
// points := [ 130 , 5 , 2 ] ;
33442: LD_ADDR_VAR 0 9
33446: PUSH
33447: LD_INT 130
33449: PUSH
33450: LD_INT 5
33452: PUSH
33453: LD_INT 2
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: LIST
33460: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33461: LD_VAR 0 6
33465: PPUSH
33466: CALL_OW 257
33470: PUSH
33471: LD_INT 8
33473: EQUAL
33474: IFFALSE 33495
// points := [ 35 , 35 , 30 ] ;
33476: LD_ADDR_VAR 0 9
33480: PUSH
33481: LD_INT 35
33483: PUSH
33484: LD_INT 35
33486: PUSH
33487: LD_INT 30
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: LIST
33494: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33495: LD_VAR 0 6
33499: PPUSH
33500: CALL_OW 257
33504: PUSH
33505: LD_INT 9
33507: EQUAL
33508: IFFALSE 33529
// points := [ 20 , 55 , 40 ] ;
33510: LD_ADDR_VAR 0 9
33514: PUSH
33515: LD_INT 20
33517: PUSH
33518: LD_INT 55
33520: PUSH
33521: LD_INT 40
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: LIST
33528: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33529: LD_VAR 0 6
33533: PPUSH
33534: CALL_OW 257
33538: PUSH
33539: LD_INT 12
33541: PUSH
33542: LD_INT 16
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: IN
33549: IFFALSE 33570
// points := [ 5 , 3 , 2 ] ;
33551: LD_ADDR_VAR 0 9
33555: PUSH
33556: LD_INT 5
33558: PUSH
33559: LD_INT 3
33561: PUSH
33562: LD_INT 2
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: LIST
33569: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33570: LD_VAR 0 6
33574: PPUSH
33575: CALL_OW 257
33579: PUSH
33580: LD_INT 17
33582: EQUAL
33583: IFFALSE 33604
// points := [ 100 , 50 , 75 ] ;
33585: LD_ADDR_VAR 0 9
33589: PUSH
33590: LD_INT 100
33592: PUSH
33593: LD_INT 50
33595: PUSH
33596: LD_INT 75
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: LIST
33603: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33604: LD_VAR 0 6
33608: PPUSH
33609: CALL_OW 257
33613: PUSH
33614: LD_INT 15
33616: EQUAL
33617: IFFALSE 33638
// points := [ 10 , 5 , 3 ] ;
33619: LD_ADDR_VAR 0 9
33623: PUSH
33624: LD_INT 10
33626: PUSH
33627: LD_INT 5
33629: PUSH
33630: LD_INT 3
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: LIST
33637: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33638: LD_VAR 0 6
33642: PPUSH
33643: CALL_OW 257
33647: PUSH
33648: LD_INT 14
33650: EQUAL
33651: IFFALSE 33672
// points := [ 10 , 0 , 0 ] ;
33653: LD_ADDR_VAR 0 9
33657: PUSH
33658: LD_INT 10
33660: PUSH
33661: LD_INT 0
33663: PUSH
33664: LD_INT 0
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: LIST
33671: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33672: LD_VAR 0 6
33676: PPUSH
33677: CALL_OW 257
33681: PUSH
33682: LD_INT 11
33684: EQUAL
33685: IFFALSE 33706
// points := [ 30 , 10 , 5 ] ;
33687: LD_ADDR_VAR 0 9
33691: PUSH
33692: LD_INT 30
33694: PUSH
33695: LD_INT 10
33697: PUSH
33698: LD_INT 5
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: LIST
33705: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33706: LD_VAR 0 1
33710: PPUSH
33711: LD_INT 5
33713: PPUSH
33714: CALL_OW 321
33718: PUSH
33719: LD_INT 2
33721: EQUAL
33722: IFFALSE 33739
// bpoints := bpoints * 1.8 ;
33724: LD_ADDR_VAR 0 10
33728: PUSH
33729: LD_VAR 0 10
33733: PUSH
33734: LD_REAL  1.80000000000000E+0000
33737: MUL
33738: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33739: LD_VAR 0 6
33743: PPUSH
33744: CALL_OW 257
33748: PUSH
33749: LD_INT 1
33751: PUSH
33752: LD_INT 2
33754: PUSH
33755: LD_INT 3
33757: PUSH
33758: LD_INT 4
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: IN
33767: PUSH
33768: LD_VAR 0 1
33772: PPUSH
33773: LD_INT 51
33775: PPUSH
33776: CALL_OW 321
33780: PUSH
33781: LD_INT 2
33783: EQUAL
33784: AND
33785: IFFALSE 33802
// bpoints := bpoints * 1.2 ;
33787: LD_ADDR_VAR 0 10
33791: PUSH
33792: LD_VAR 0 10
33796: PUSH
33797: LD_REAL  1.20000000000000E+0000
33800: MUL
33801: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33802: LD_VAR 0 6
33806: PPUSH
33807: CALL_OW 257
33811: PUSH
33812: LD_INT 5
33814: PUSH
33815: LD_INT 7
33817: PUSH
33818: LD_INT 9
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: LIST
33825: IN
33826: PUSH
33827: LD_VAR 0 1
33831: PPUSH
33832: LD_INT 52
33834: PPUSH
33835: CALL_OW 321
33839: PUSH
33840: LD_INT 2
33842: EQUAL
33843: AND
33844: IFFALSE 33861
// bpoints := bpoints * 1.5 ;
33846: LD_ADDR_VAR 0 10
33850: PUSH
33851: LD_VAR 0 10
33855: PUSH
33856: LD_REAL  1.50000000000000E+0000
33859: MUL
33860: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33861: LD_VAR 0 1
33865: PPUSH
33866: LD_INT 66
33868: PPUSH
33869: CALL_OW 321
33873: PUSH
33874: LD_INT 2
33876: EQUAL
33877: IFFALSE 33894
// bpoints := bpoints * 1.1 ;
33879: LD_ADDR_VAR 0 10
33883: PUSH
33884: LD_VAR 0 10
33888: PUSH
33889: LD_REAL  1.10000000000000E+0000
33892: MUL
33893: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33894: LD_ADDR_VAR 0 10
33898: PUSH
33899: LD_VAR 0 10
33903: PUSH
33904: LD_VAR 0 6
33908: PPUSH
33909: LD_INT 1
33911: PPUSH
33912: CALL_OW 259
33916: PUSH
33917: LD_REAL  1.15000000000000E+0000
33920: MUL
33921: MUL
33922: ST_TO_ADDR
// end ; unit_vehicle :
33923: GO 34747
33925: LD_INT 2
33927: DOUBLE
33928: EQUAL
33929: IFTRUE 33933
33931: GO 34735
33933: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33934: LD_VAR 0 6
33938: PPUSH
33939: CALL_OW 264
33943: PUSH
33944: LD_INT 2
33946: PUSH
33947: LD_INT 42
33949: PUSH
33950: LD_INT 24
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: LIST
33957: IN
33958: IFFALSE 33979
// points := [ 25 , 5 , 3 ] ;
33960: LD_ADDR_VAR 0 9
33964: PUSH
33965: LD_INT 25
33967: PUSH
33968: LD_INT 5
33970: PUSH
33971: LD_INT 3
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: LIST
33978: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33979: LD_VAR 0 6
33983: PPUSH
33984: CALL_OW 264
33988: PUSH
33989: LD_INT 4
33991: PUSH
33992: LD_INT 43
33994: PUSH
33995: LD_INT 25
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: LIST
34002: IN
34003: IFFALSE 34024
// points := [ 40 , 15 , 5 ] ;
34005: LD_ADDR_VAR 0 9
34009: PUSH
34010: LD_INT 40
34012: PUSH
34013: LD_INT 15
34015: PUSH
34016: LD_INT 5
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: LIST
34023: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34024: LD_VAR 0 6
34028: PPUSH
34029: CALL_OW 264
34033: PUSH
34034: LD_INT 3
34036: PUSH
34037: LD_INT 23
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: IN
34044: IFFALSE 34065
// points := [ 7 , 25 , 8 ] ;
34046: LD_ADDR_VAR 0 9
34050: PUSH
34051: LD_INT 7
34053: PUSH
34054: LD_INT 25
34056: PUSH
34057: LD_INT 8
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: LIST
34064: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34065: LD_VAR 0 6
34069: PPUSH
34070: CALL_OW 264
34074: PUSH
34075: LD_INT 5
34077: PUSH
34078: LD_INT 27
34080: PUSH
34081: LD_INT 44
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: LIST
34088: IN
34089: IFFALSE 34110
// points := [ 14 , 50 , 16 ] ;
34091: LD_ADDR_VAR 0 9
34095: PUSH
34096: LD_INT 14
34098: PUSH
34099: LD_INT 50
34101: PUSH
34102: LD_INT 16
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: LIST
34109: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34110: LD_VAR 0 6
34114: PPUSH
34115: CALL_OW 264
34119: PUSH
34120: LD_INT 6
34122: PUSH
34123: LD_INT 46
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: IN
34130: IFFALSE 34151
// points := [ 32 , 120 , 70 ] ;
34132: LD_ADDR_VAR 0 9
34136: PUSH
34137: LD_INT 32
34139: PUSH
34140: LD_INT 120
34142: PUSH
34143: LD_INT 70
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: LIST
34150: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
34151: LD_VAR 0 6
34155: PPUSH
34156: CALL_OW 264
34160: PUSH
34161: LD_INT 7
34163: PUSH
34164: LD_INT 28
34166: PUSH
34167: LD_INT 45
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: LIST
34174: IN
34175: IFFALSE 34196
// points := [ 35 , 20 , 45 ] ;
34177: LD_ADDR_VAR 0 9
34181: PUSH
34182: LD_INT 35
34184: PUSH
34185: LD_INT 20
34187: PUSH
34188: LD_INT 45
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: LIST
34195: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34196: LD_VAR 0 6
34200: PPUSH
34201: CALL_OW 264
34205: PUSH
34206: LD_INT 47
34208: PUSH
34209: EMPTY
34210: LIST
34211: IN
34212: IFFALSE 34233
// points := [ 67 , 45 , 75 ] ;
34214: LD_ADDR_VAR 0 9
34218: PUSH
34219: LD_INT 67
34221: PUSH
34222: LD_INT 45
34224: PUSH
34225: LD_INT 75
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: LIST
34232: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34233: LD_VAR 0 6
34237: PPUSH
34238: CALL_OW 264
34242: PUSH
34243: LD_INT 26
34245: PUSH
34246: EMPTY
34247: LIST
34248: IN
34249: IFFALSE 34270
// points := [ 120 , 30 , 80 ] ;
34251: LD_ADDR_VAR 0 9
34255: PUSH
34256: LD_INT 120
34258: PUSH
34259: LD_INT 30
34261: PUSH
34262: LD_INT 80
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: LIST
34269: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34270: LD_VAR 0 6
34274: PPUSH
34275: CALL_OW 264
34279: PUSH
34280: LD_INT 22
34282: PUSH
34283: EMPTY
34284: LIST
34285: IN
34286: IFFALSE 34307
// points := [ 40 , 1 , 1 ] ;
34288: LD_ADDR_VAR 0 9
34292: PUSH
34293: LD_INT 40
34295: PUSH
34296: LD_INT 1
34298: PUSH
34299: LD_INT 1
34301: PUSH
34302: EMPTY
34303: LIST
34304: LIST
34305: LIST
34306: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34307: LD_VAR 0 6
34311: PPUSH
34312: CALL_OW 264
34316: PUSH
34317: LD_INT 29
34319: PUSH
34320: EMPTY
34321: LIST
34322: IN
34323: IFFALSE 34344
// points := [ 70 , 200 , 400 ] ;
34325: LD_ADDR_VAR 0 9
34329: PUSH
34330: LD_INT 70
34332: PUSH
34333: LD_INT 200
34335: PUSH
34336: LD_INT 400
34338: PUSH
34339: EMPTY
34340: LIST
34341: LIST
34342: LIST
34343: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34344: LD_VAR 0 6
34348: PPUSH
34349: CALL_OW 264
34353: PUSH
34354: LD_INT 14
34356: PUSH
34357: LD_INT 53
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: IN
34364: IFFALSE 34385
// points := [ 40 , 10 , 20 ] ;
34366: LD_ADDR_VAR 0 9
34370: PUSH
34371: LD_INT 40
34373: PUSH
34374: LD_INT 10
34376: PUSH
34377: LD_INT 20
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: LIST
34384: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34385: LD_VAR 0 6
34389: PPUSH
34390: CALL_OW 264
34394: PUSH
34395: LD_INT 9
34397: PUSH
34398: EMPTY
34399: LIST
34400: IN
34401: IFFALSE 34422
// points := [ 5 , 70 , 20 ] ;
34403: LD_ADDR_VAR 0 9
34407: PUSH
34408: LD_INT 5
34410: PUSH
34411: LD_INT 70
34413: PUSH
34414: LD_INT 20
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: LIST
34421: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34422: LD_VAR 0 6
34426: PPUSH
34427: CALL_OW 264
34431: PUSH
34432: LD_INT 10
34434: PUSH
34435: EMPTY
34436: LIST
34437: IN
34438: IFFALSE 34459
// points := [ 35 , 110 , 70 ] ;
34440: LD_ADDR_VAR 0 9
34444: PUSH
34445: LD_INT 35
34447: PUSH
34448: LD_INT 110
34450: PUSH
34451: LD_INT 70
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: LIST
34458: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34459: LD_VAR 0 6
34463: PPUSH
34464: CALL_OW 265
34468: PUSH
34469: LD_INT 25
34471: EQUAL
34472: IFFALSE 34493
// points := [ 80 , 65 , 100 ] ;
34474: LD_ADDR_VAR 0 9
34478: PUSH
34479: LD_INT 80
34481: PUSH
34482: LD_INT 65
34484: PUSH
34485: LD_INT 100
34487: PUSH
34488: EMPTY
34489: LIST
34490: LIST
34491: LIST
34492: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34493: LD_VAR 0 6
34497: PPUSH
34498: CALL_OW 263
34502: PUSH
34503: LD_INT 1
34505: EQUAL
34506: IFFALSE 34541
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34508: LD_ADDR_VAR 0 10
34512: PUSH
34513: LD_VAR 0 10
34517: PUSH
34518: LD_VAR 0 6
34522: PPUSH
34523: CALL_OW 311
34527: PPUSH
34528: LD_INT 3
34530: PPUSH
34531: CALL_OW 259
34535: PUSH
34536: LD_INT 4
34538: MUL
34539: MUL
34540: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34541: LD_VAR 0 6
34545: PPUSH
34546: CALL_OW 263
34550: PUSH
34551: LD_INT 2
34553: EQUAL
34554: IFFALSE 34605
// begin j := IsControledBy ( i ) ;
34556: LD_ADDR_VAR 0 7
34560: PUSH
34561: LD_VAR 0 6
34565: PPUSH
34566: CALL_OW 312
34570: ST_TO_ADDR
// if j then
34571: LD_VAR 0 7
34575: IFFALSE 34605
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34577: LD_ADDR_VAR 0 10
34581: PUSH
34582: LD_VAR 0 10
34586: PUSH
34587: LD_VAR 0 7
34591: PPUSH
34592: LD_INT 3
34594: PPUSH
34595: CALL_OW 259
34599: PUSH
34600: LD_INT 3
34602: MUL
34603: MUL
34604: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34605: LD_VAR 0 6
34609: PPUSH
34610: CALL_OW 264
34614: PUSH
34615: LD_INT 5
34617: PUSH
34618: LD_INT 6
34620: PUSH
34621: LD_INT 46
34623: PUSH
34624: LD_INT 44
34626: PUSH
34627: LD_INT 47
34629: PUSH
34630: LD_INT 45
34632: PUSH
34633: LD_INT 28
34635: PUSH
34636: LD_INT 7
34638: PUSH
34639: LD_INT 27
34641: PUSH
34642: LD_INT 29
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: LIST
34649: LIST
34650: LIST
34651: LIST
34652: LIST
34653: LIST
34654: LIST
34655: LIST
34656: IN
34657: PUSH
34658: LD_VAR 0 1
34662: PPUSH
34663: LD_INT 52
34665: PPUSH
34666: CALL_OW 321
34670: PUSH
34671: LD_INT 2
34673: EQUAL
34674: AND
34675: IFFALSE 34692
// bpoints := bpoints * 1.2 ;
34677: LD_ADDR_VAR 0 10
34681: PUSH
34682: LD_VAR 0 10
34686: PUSH
34687: LD_REAL  1.20000000000000E+0000
34690: MUL
34691: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34692: LD_VAR 0 6
34696: PPUSH
34697: CALL_OW 264
34701: PUSH
34702: LD_INT 6
34704: PUSH
34705: LD_INT 46
34707: PUSH
34708: LD_INT 47
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: LIST
34715: IN
34716: IFFALSE 34733
// bpoints := bpoints * 1.2 ;
34718: LD_ADDR_VAR 0 10
34722: PUSH
34723: LD_VAR 0 10
34727: PUSH
34728: LD_REAL  1.20000000000000E+0000
34731: MUL
34732: ST_TO_ADDR
// end ; unit_building :
34733: GO 34747
34735: LD_INT 3
34737: DOUBLE
34738: EQUAL
34739: IFTRUE 34743
34741: GO 34746
34743: POP
// ; end ;
34744: GO 34747
34746: POP
// for j = 1 to 3 do
34747: LD_ADDR_VAR 0 7
34751: PUSH
34752: DOUBLE
34753: LD_INT 1
34755: DEC
34756: ST_TO_ADDR
34757: LD_INT 3
34759: PUSH
34760: FOR_TO
34761: IFFALSE 34814
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34763: LD_ADDR_VAR 0 5
34767: PUSH
34768: LD_VAR 0 5
34772: PPUSH
34773: LD_VAR 0 7
34777: PPUSH
34778: LD_VAR 0 5
34782: PUSH
34783: LD_VAR 0 7
34787: ARRAY
34788: PUSH
34789: LD_VAR 0 9
34793: PUSH
34794: LD_VAR 0 7
34798: ARRAY
34799: PUSH
34800: LD_VAR 0 10
34804: MUL
34805: PLUS
34806: PPUSH
34807: CALL_OW 1
34811: ST_TO_ADDR
34812: GO 34760
34814: POP
34815: POP
// end ;
34816: GO 33299
34818: POP
34819: POP
// result := Replace ( result , 4 , tmp ) ;
34820: LD_ADDR_VAR 0 5
34824: PUSH
34825: LD_VAR 0 5
34829: PPUSH
34830: LD_INT 4
34832: PPUSH
34833: LD_VAR 0 8
34837: PPUSH
34838: CALL_OW 1
34842: ST_TO_ADDR
// end ;
34843: LD_VAR 0 5
34847: RET
// export function DangerAtRange ( unit , range ) ; begin
34848: LD_INT 0
34850: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34851: LD_ADDR_VAR 0 3
34855: PUSH
34856: LD_VAR 0 1
34860: PPUSH
34861: CALL_OW 255
34865: PPUSH
34866: LD_VAR 0 1
34870: PPUSH
34871: CALL_OW 250
34875: PPUSH
34876: LD_VAR 0 1
34880: PPUSH
34881: CALL_OW 251
34885: PPUSH
34886: LD_VAR 0 2
34890: PPUSH
34891: CALL 33151 0 4
34895: ST_TO_ADDR
// end ;
34896: LD_VAR 0 3
34900: RET
// export function DangerInArea ( side , area ) ; begin
34901: LD_INT 0
34903: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34904: LD_ADDR_VAR 0 3
34908: PUSH
34909: LD_VAR 0 2
34913: PPUSH
34914: LD_INT 81
34916: PUSH
34917: LD_VAR 0 1
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: PPUSH
34926: CALL_OW 70
34930: ST_TO_ADDR
// end ;
34931: LD_VAR 0 3
34935: RET
// export function IsExtension ( b ) ; begin
34936: LD_INT 0
34938: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34939: LD_ADDR_VAR 0 2
34943: PUSH
34944: LD_VAR 0 1
34948: PUSH
34949: LD_INT 23
34951: PUSH
34952: LD_INT 20
34954: PUSH
34955: LD_INT 22
34957: PUSH
34958: LD_INT 17
34960: PUSH
34961: LD_INT 24
34963: PUSH
34964: LD_INT 21
34966: PUSH
34967: LD_INT 19
34969: PUSH
34970: LD_INT 16
34972: PUSH
34973: LD_INT 25
34975: PUSH
34976: LD_INT 18
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: LIST
34983: LIST
34984: LIST
34985: LIST
34986: LIST
34987: LIST
34988: LIST
34989: LIST
34990: IN
34991: ST_TO_ADDR
// end ;
34992: LD_VAR 0 2
34996: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
34997: LD_INT 0
34999: PPUSH
35000: PPUSH
35001: PPUSH
// result := [ ] ;
35002: LD_ADDR_VAR 0 3
35006: PUSH
35007: EMPTY
35008: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35009: LD_ADDR_VAR 0 4
35013: PUSH
35014: LD_VAR 0 2
35018: PPUSH
35019: LD_INT 21
35021: PUSH
35022: LD_INT 3
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: PPUSH
35029: CALL_OW 70
35033: ST_TO_ADDR
// if not tmp then
35034: LD_VAR 0 4
35038: NOT
35039: IFFALSE 35043
// exit ;
35041: GO 35101
// for i in tmp do
35043: LD_ADDR_VAR 0 5
35047: PUSH
35048: LD_VAR 0 4
35052: PUSH
35053: FOR_IN
35054: IFFALSE 35089
// if GetBase ( i ) <> base then
35056: LD_VAR 0 5
35060: PPUSH
35061: CALL_OW 274
35065: PUSH
35066: LD_VAR 0 1
35070: NONEQUAL
35071: IFFALSE 35087
// ComLinkToBase ( base , i ) ;
35073: LD_VAR 0 1
35077: PPUSH
35078: LD_VAR 0 5
35082: PPUSH
35083: CALL_OW 169
35087: GO 35053
35089: POP
35090: POP
// result := tmp ;
35091: LD_ADDR_VAR 0 3
35095: PUSH
35096: LD_VAR 0 4
35100: ST_TO_ADDR
// end ;
35101: LD_VAR 0 3
35105: RET
// export function ComComplete ( unit , b ) ; var i ; begin
35106: LD_INT 0
35108: PPUSH
35109: PPUSH
// if BuildingStatus ( b ) = bs_build then
35110: LD_VAR 0 2
35114: PPUSH
35115: CALL_OW 461
35119: PUSH
35120: LD_INT 1
35122: EQUAL
35123: IFFALSE 35183
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35125: LD_VAR 0 1
35129: PPUSH
35130: LD_STRING h
35132: PUSH
35133: LD_VAR 0 2
35137: PPUSH
35138: CALL_OW 250
35142: PUSH
35143: LD_VAR 0 2
35147: PPUSH
35148: CALL_OW 251
35152: PUSH
35153: LD_VAR 0 2
35157: PUSH
35158: LD_INT 0
35160: PUSH
35161: LD_INT 0
35163: PUSH
35164: LD_INT 0
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: PUSH
35176: EMPTY
35177: LIST
35178: PPUSH
35179: CALL_OW 446
// end ;
35183: LD_VAR 0 3
35187: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35188: LD_INT 0
35190: PPUSH
35191: PPUSH
35192: PPUSH
35193: PPUSH
35194: PPUSH
35195: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
35196: LD_VAR 0 1
35200: NOT
35201: PUSH
35202: LD_VAR 0 1
35206: PPUSH
35207: CALL_OW 263
35211: PUSH
35212: LD_INT 2
35214: EQUAL
35215: NOT
35216: OR
35217: IFFALSE 35221
// exit ;
35219: GO 35537
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35221: LD_ADDR_VAR 0 6
35225: PUSH
35226: LD_INT 22
35228: PUSH
35229: LD_VAR 0 1
35233: PPUSH
35234: CALL_OW 255
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PUSH
35243: LD_INT 2
35245: PUSH
35246: LD_INT 30
35248: PUSH
35249: LD_INT 36
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: PUSH
35256: LD_INT 34
35258: PUSH
35259: LD_INT 31
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: LIST
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: PPUSH
35275: CALL_OW 69
35279: ST_TO_ADDR
// if not tmp then
35280: LD_VAR 0 6
35284: NOT
35285: IFFALSE 35289
// exit ;
35287: GO 35537
// result := [ ] ;
35289: LD_ADDR_VAR 0 2
35293: PUSH
35294: EMPTY
35295: ST_TO_ADDR
// for i in tmp do
35296: LD_ADDR_VAR 0 3
35300: PUSH
35301: LD_VAR 0 6
35305: PUSH
35306: FOR_IN
35307: IFFALSE 35378
// begin t := UnitsInside ( i ) ;
35309: LD_ADDR_VAR 0 4
35313: PUSH
35314: LD_VAR 0 3
35318: PPUSH
35319: CALL_OW 313
35323: ST_TO_ADDR
// if t then
35324: LD_VAR 0 4
35328: IFFALSE 35376
// for j in t do
35330: LD_ADDR_VAR 0 7
35334: PUSH
35335: LD_VAR 0 4
35339: PUSH
35340: FOR_IN
35341: IFFALSE 35374
// result := Insert ( result , result + 1 , j ) ;
35343: LD_ADDR_VAR 0 2
35347: PUSH
35348: LD_VAR 0 2
35352: PPUSH
35353: LD_VAR 0 2
35357: PUSH
35358: LD_INT 1
35360: PLUS
35361: PPUSH
35362: LD_VAR 0 7
35366: PPUSH
35367: CALL_OW 2
35371: ST_TO_ADDR
35372: GO 35340
35374: POP
35375: POP
// end ;
35376: GO 35306
35378: POP
35379: POP
// if not result then
35380: LD_VAR 0 2
35384: NOT
35385: IFFALSE 35389
// exit ;
35387: GO 35537
// mech := result [ 1 ] ;
35389: LD_ADDR_VAR 0 5
35393: PUSH
35394: LD_VAR 0 2
35398: PUSH
35399: LD_INT 1
35401: ARRAY
35402: ST_TO_ADDR
// if result > 1 then
35403: LD_VAR 0 2
35407: PUSH
35408: LD_INT 1
35410: GREATER
35411: IFFALSE 35523
// for i = 2 to result do
35413: LD_ADDR_VAR 0 3
35417: PUSH
35418: DOUBLE
35419: LD_INT 2
35421: DEC
35422: ST_TO_ADDR
35423: LD_VAR 0 2
35427: PUSH
35428: FOR_TO
35429: IFFALSE 35521
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35431: LD_ADDR_VAR 0 4
35435: PUSH
35436: LD_VAR 0 2
35440: PUSH
35441: LD_VAR 0 3
35445: ARRAY
35446: PPUSH
35447: LD_INT 3
35449: PPUSH
35450: CALL_OW 259
35454: PUSH
35455: LD_VAR 0 2
35459: PUSH
35460: LD_VAR 0 3
35464: ARRAY
35465: PPUSH
35466: CALL_OW 432
35470: MINUS
35471: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35472: LD_VAR 0 4
35476: PUSH
35477: LD_VAR 0 5
35481: PPUSH
35482: LD_INT 3
35484: PPUSH
35485: CALL_OW 259
35489: PUSH
35490: LD_VAR 0 5
35494: PPUSH
35495: CALL_OW 432
35499: MINUS
35500: GREATEREQUAL
35501: IFFALSE 35519
// mech := result [ i ] ;
35503: LD_ADDR_VAR 0 5
35507: PUSH
35508: LD_VAR 0 2
35512: PUSH
35513: LD_VAR 0 3
35517: ARRAY
35518: ST_TO_ADDR
// end ;
35519: GO 35428
35521: POP
35522: POP
// ComLinkTo ( vehicle , mech ) ;
35523: LD_VAR 0 1
35527: PPUSH
35528: LD_VAR 0 5
35532: PPUSH
35533: CALL_OW 135
// end ;
35537: LD_VAR 0 2
35541: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35542: LD_INT 0
35544: PPUSH
35545: PPUSH
35546: PPUSH
35547: PPUSH
35548: PPUSH
35549: PPUSH
35550: PPUSH
35551: PPUSH
35552: PPUSH
35553: PPUSH
35554: PPUSH
35555: PPUSH
35556: PPUSH
// result := [ ] ;
35557: LD_ADDR_VAR 0 7
35561: PUSH
35562: EMPTY
35563: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35564: LD_VAR 0 1
35568: PPUSH
35569: CALL_OW 266
35573: PUSH
35574: LD_INT 0
35576: PUSH
35577: LD_INT 1
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: IN
35584: NOT
35585: IFFALSE 35589
// exit ;
35587: GO 37220
// if name then
35589: LD_VAR 0 3
35593: IFFALSE 35609
// SetBName ( base_dep , name ) ;
35595: LD_VAR 0 1
35599: PPUSH
35600: LD_VAR 0 3
35604: PPUSH
35605: CALL_OW 500
// base := GetBase ( base_dep ) ;
35609: LD_ADDR_VAR 0 15
35613: PUSH
35614: LD_VAR 0 1
35618: PPUSH
35619: CALL_OW 274
35623: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35624: LD_ADDR_VAR 0 16
35628: PUSH
35629: LD_VAR 0 1
35633: PPUSH
35634: CALL_OW 255
35638: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35639: LD_ADDR_VAR 0 17
35643: PUSH
35644: LD_VAR 0 1
35648: PPUSH
35649: CALL_OW 248
35653: ST_TO_ADDR
// if sources then
35654: LD_VAR 0 5
35658: IFFALSE 35705
// for i = 1 to 3 do
35660: LD_ADDR_VAR 0 8
35664: PUSH
35665: DOUBLE
35666: LD_INT 1
35668: DEC
35669: ST_TO_ADDR
35670: LD_INT 3
35672: PUSH
35673: FOR_TO
35674: IFFALSE 35703
// AddResourceType ( base , i , sources [ i ] ) ;
35676: LD_VAR 0 15
35680: PPUSH
35681: LD_VAR 0 8
35685: PPUSH
35686: LD_VAR 0 5
35690: PUSH
35691: LD_VAR 0 8
35695: ARRAY
35696: PPUSH
35697: CALL_OW 276
35701: GO 35673
35703: POP
35704: POP
// buildings := GetBaseBuildings ( base , area ) ;
35705: LD_ADDR_VAR 0 18
35709: PUSH
35710: LD_VAR 0 15
35714: PPUSH
35715: LD_VAR 0 2
35719: PPUSH
35720: CALL 34997 0 2
35724: ST_TO_ADDR
// InitHc ;
35725: CALL_OW 19
// InitUc ;
35729: CALL_OW 18
// uc_side := side ;
35733: LD_ADDR_OWVAR 20
35737: PUSH
35738: LD_VAR 0 16
35742: ST_TO_ADDR
// uc_nation := nation ;
35743: LD_ADDR_OWVAR 21
35747: PUSH
35748: LD_VAR 0 17
35752: ST_TO_ADDR
// if buildings then
35753: LD_VAR 0 18
35757: IFFALSE 37079
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35759: LD_ADDR_VAR 0 19
35763: PUSH
35764: LD_VAR 0 18
35768: PPUSH
35769: LD_INT 2
35771: PUSH
35772: LD_INT 30
35774: PUSH
35775: LD_INT 29
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PUSH
35782: LD_INT 30
35784: PUSH
35785: LD_INT 30
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: LIST
35796: PPUSH
35797: CALL_OW 72
35801: ST_TO_ADDR
// if tmp then
35802: LD_VAR 0 19
35806: IFFALSE 35854
// for i in tmp do
35808: LD_ADDR_VAR 0 8
35812: PUSH
35813: LD_VAR 0 19
35817: PUSH
35818: FOR_IN
35819: IFFALSE 35852
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35821: LD_VAR 0 8
35825: PPUSH
35826: CALL_OW 250
35830: PPUSH
35831: LD_VAR 0 8
35835: PPUSH
35836: CALL_OW 251
35840: PPUSH
35841: LD_VAR 0 16
35845: PPUSH
35846: CALL_OW 441
35850: GO 35818
35852: POP
35853: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35854: LD_VAR 0 18
35858: PPUSH
35859: LD_INT 2
35861: PUSH
35862: LD_INT 30
35864: PUSH
35865: LD_INT 32
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: LD_INT 30
35874: PUSH
35875: LD_INT 33
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: LIST
35886: PPUSH
35887: CALL_OW 72
35891: IFFALSE 35979
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35893: LD_ADDR_VAR 0 8
35897: PUSH
35898: LD_VAR 0 18
35902: PPUSH
35903: LD_INT 2
35905: PUSH
35906: LD_INT 30
35908: PUSH
35909: LD_INT 32
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 30
35918: PUSH
35919: LD_INT 33
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: LIST
35930: PPUSH
35931: CALL_OW 72
35935: PUSH
35936: FOR_IN
35937: IFFALSE 35977
// begin if not GetBWeapon ( i ) then
35939: LD_VAR 0 8
35943: PPUSH
35944: CALL_OW 269
35948: NOT
35949: IFFALSE 35975
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35951: LD_VAR 0 8
35955: PPUSH
35956: LD_VAR 0 8
35960: PPUSH
35961: LD_VAR 0 2
35965: PPUSH
35966: CALL 37225 0 2
35970: PPUSH
35971: CALL_OW 431
// end ;
35975: GO 35936
35977: POP
35978: POP
// end ; for i = 1 to personel do
35979: LD_ADDR_VAR 0 8
35983: PUSH
35984: DOUBLE
35985: LD_INT 1
35987: DEC
35988: ST_TO_ADDR
35989: LD_VAR 0 6
35993: PUSH
35994: FOR_TO
35995: IFFALSE 37059
// begin if i > 4 then
35997: LD_VAR 0 8
36001: PUSH
36002: LD_INT 4
36004: GREATER
36005: IFFALSE 36009
// break ;
36007: GO 37059
// case i of 1 :
36009: LD_VAR 0 8
36013: PUSH
36014: LD_INT 1
36016: DOUBLE
36017: EQUAL
36018: IFTRUE 36022
36020: GO 36102
36022: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36023: LD_ADDR_VAR 0 12
36027: PUSH
36028: LD_VAR 0 18
36032: PPUSH
36033: LD_INT 22
36035: PUSH
36036: LD_VAR 0 16
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: LD_INT 58
36047: PUSH
36048: EMPTY
36049: LIST
36050: PUSH
36051: LD_INT 2
36053: PUSH
36054: LD_INT 30
36056: PUSH
36057: LD_INT 32
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: PUSH
36064: LD_INT 30
36066: PUSH
36067: LD_INT 4
36069: PUSH
36070: EMPTY
36071: LIST
36072: LIST
36073: PUSH
36074: LD_INT 30
36076: PUSH
36077: LD_INT 5
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: PUSH
36084: EMPTY
36085: LIST
36086: LIST
36087: LIST
36088: LIST
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: LIST
36094: PPUSH
36095: CALL_OW 72
36099: ST_TO_ADDR
36100: GO 36324
36102: LD_INT 2
36104: DOUBLE
36105: EQUAL
36106: IFTRUE 36110
36108: GO 36172
36110: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36111: LD_ADDR_VAR 0 12
36115: PUSH
36116: LD_VAR 0 18
36120: PPUSH
36121: LD_INT 22
36123: PUSH
36124: LD_VAR 0 16
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: LD_INT 2
36135: PUSH
36136: LD_INT 30
36138: PUSH
36139: LD_INT 0
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: PUSH
36146: LD_INT 30
36148: PUSH
36149: LD_INT 1
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: LIST
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: PPUSH
36165: CALL_OW 72
36169: ST_TO_ADDR
36170: GO 36324
36172: LD_INT 3
36174: DOUBLE
36175: EQUAL
36176: IFTRUE 36180
36178: GO 36242
36180: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36181: LD_ADDR_VAR 0 12
36185: PUSH
36186: LD_VAR 0 18
36190: PPUSH
36191: LD_INT 22
36193: PUSH
36194: LD_VAR 0 16
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: LD_INT 2
36205: PUSH
36206: LD_INT 30
36208: PUSH
36209: LD_INT 2
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: PUSH
36216: LD_INT 30
36218: PUSH
36219: LD_INT 3
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: LIST
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: PPUSH
36235: CALL_OW 72
36239: ST_TO_ADDR
36240: GO 36324
36242: LD_INT 4
36244: DOUBLE
36245: EQUAL
36246: IFTRUE 36250
36248: GO 36323
36250: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36251: LD_ADDR_VAR 0 12
36255: PUSH
36256: LD_VAR 0 18
36260: PPUSH
36261: LD_INT 22
36263: PUSH
36264: LD_VAR 0 16
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: PUSH
36273: LD_INT 2
36275: PUSH
36276: LD_INT 30
36278: PUSH
36279: LD_INT 6
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: LD_INT 30
36288: PUSH
36289: LD_INT 7
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: PUSH
36296: LD_INT 30
36298: PUSH
36299: LD_INT 8
36301: PUSH
36302: EMPTY
36303: LIST
36304: LIST
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: LIST
36310: LIST
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: PPUSH
36316: CALL_OW 72
36320: ST_TO_ADDR
36321: GO 36324
36323: POP
// if i = 1 then
36324: LD_VAR 0 8
36328: PUSH
36329: LD_INT 1
36331: EQUAL
36332: IFFALSE 36443
// begin tmp := [ ] ;
36334: LD_ADDR_VAR 0 19
36338: PUSH
36339: EMPTY
36340: ST_TO_ADDR
// for j in f do
36341: LD_ADDR_VAR 0 9
36345: PUSH
36346: LD_VAR 0 12
36350: PUSH
36351: FOR_IN
36352: IFFALSE 36425
// if GetBType ( j ) = b_bunker then
36354: LD_VAR 0 9
36358: PPUSH
36359: CALL_OW 266
36363: PUSH
36364: LD_INT 32
36366: EQUAL
36367: IFFALSE 36394
// tmp := Insert ( tmp , 1 , j ) else
36369: LD_ADDR_VAR 0 19
36373: PUSH
36374: LD_VAR 0 19
36378: PPUSH
36379: LD_INT 1
36381: PPUSH
36382: LD_VAR 0 9
36386: PPUSH
36387: CALL_OW 2
36391: ST_TO_ADDR
36392: GO 36423
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36394: LD_ADDR_VAR 0 19
36398: PUSH
36399: LD_VAR 0 19
36403: PPUSH
36404: LD_VAR 0 19
36408: PUSH
36409: LD_INT 1
36411: PLUS
36412: PPUSH
36413: LD_VAR 0 9
36417: PPUSH
36418: CALL_OW 2
36422: ST_TO_ADDR
36423: GO 36351
36425: POP
36426: POP
// if tmp then
36427: LD_VAR 0 19
36431: IFFALSE 36443
// f := tmp ;
36433: LD_ADDR_VAR 0 12
36437: PUSH
36438: LD_VAR 0 19
36442: ST_TO_ADDR
// end ; x := personel [ i ] ;
36443: LD_ADDR_VAR 0 13
36447: PUSH
36448: LD_VAR 0 6
36452: PUSH
36453: LD_VAR 0 8
36457: ARRAY
36458: ST_TO_ADDR
// if x = - 1 then
36459: LD_VAR 0 13
36463: PUSH
36464: LD_INT 1
36466: NEG
36467: EQUAL
36468: IFFALSE 36677
// begin for j in f do
36470: LD_ADDR_VAR 0 9
36474: PUSH
36475: LD_VAR 0 12
36479: PUSH
36480: FOR_IN
36481: IFFALSE 36673
// repeat InitHc ;
36483: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36487: LD_VAR 0 9
36491: PPUSH
36492: CALL_OW 266
36496: PUSH
36497: LD_INT 5
36499: EQUAL
36500: IFFALSE 36570
// begin if UnitsInside ( j ) < 3 then
36502: LD_VAR 0 9
36506: PPUSH
36507: CALL_OW 313
36511: PUSH
36512: LD_INT 3
36514: LESS
36515: IFFALSE 36551
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36517: LD_INT 0
36519: PPUSH
36520: LD_INT 5
36522: PUSH
36523: LD_INT 8
36525: PUSH
36526: LD_INT 9
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: LIST
36533: PUSH
36534: LD_VAR 0 17
36538: ARRAY
36539: PPUSH
36540: LD_VAR 0 4
36544: PPUSH
36545: CALL_OW 380
36549: GO 36568
// PrepareHuman ( false , i , skill ) ;
36551: LD_INT 0
36553: PPUSH
36554: LD_VAR 0 8
36558: PPUSH
36559: LD_VAR 0 4
36563: PPUSH
36564: CALL_OW 380
// end else
36568: GO 36587
// PrepareHuman ( false , i , skill ) ;
36570: LD_INT 0
36572: PPUSH
36573: LD_VAR 0 8
36577: PPUSH
36578: LD_VAR 0 4
36582: PPUSH
36583: CALL_OW 380
// un := CreateHuman ;
36587: LD_ADDR_VAR 0 14
36591: PUSH
36592: CALL_OW 44
36596: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36597: LD_ADDR_VAR 0 7
36601: PUSH
36602: LD_VAR 0 7
36606: PPUSH
36607: LD_INT 1
36609: PPUSH
36610: LD_VAR 0 14
36614: PPUSH
36615: CALL_OW 2
36619: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36620: LD_VAR 0 14
36624: PPUSH
36625: LD_VAR 0 9
36629: PPUSH
36630: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36634: LD_VAR 0 9
36638: PPUSH
36639: CALL_OW 313
36643: PUSH
36644: LD_INT 6
36646: EQUAL
36647: PUSH
36648: LD_VAR 0 9
36652: PPUSH
36653: CALL_OW 266
36657: PUSH
36658: LD_INT 32
36660: PUSH
36661: LD_INT 31
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: IN
36668: OR
36669: IFFALSE 36483
36671: GO 36480
36673: POP
36674: POP
// end else
36675: GO 37057
// for j = 1 to x do
36677: LD_ADDR_VAR 0 9
36681: PUSH
36682: DOUBLE
36683: LD_INT 1
36685: DEC
36686: ST_TO_ADDR
36687: LD_VAR 0 13
36691: PUSH
36692: FOR_TO
36693: IFFALSE 37055
// begin InitHc ;
36695: CALL_OW 19
// if not f then
36699: LD_VAR 0 12
36703: NOT
36704: IFFALSE 36793
// begin PrepareHuman ( false , i , skill ) ;
36706: LD_INT 0
36708: PPUSH
36709: LD_VAR 0 8
36713: PPUSH
36714: LD_VAR 0 4
36718: PPUSH
36719: CALL_OW 380
// un := CreateHuman ;
36723: LD_ADDR_VAR 0 14
36727: PUSH
36728: CALL_OW 44
36732: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36733: LD_ADDR_VAR 0 7
36737: PUSH
36738: LD_VAR 0 7
36742: PPUSH
36743: LD_INT 1
36745: PPUSH
36746: LD_VAR 0 14
36750: PPUSH
36751: CALL_OW 2
36755: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36756: LD_VAR 0 14
36760: PPUSH
36761: LD_VAR 0 1
36765: PPUSH
36766: CALL_OW 250
36770: PPUSH
36771: LD_VAR 0 1
36775: PPUSH
36776: CALL_OW 251
36780: PPUSH
36781: LD_INT 10
36783: PPUSH
36784: LD_INT 0
36786: PPUSH
36787: CALL_OW 50
// continue ;
36791: GO 36692
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36793: LD_VAR 0 12
36797: PUSH
36798: LD_INT 1
36800: ARRAY
36801: PPUSH
36802: CALL_OW 313
36806: PUSH
36807: LD_VAR 0 12
36811: PUSH
36812: LD_INT 1
36814: ARRAY
36815: PPUSH
36816: CALL_OW 266
36820: PUSH
36821: LD_INT 32
36823: PUSH
36824: LD_INT 31
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: IN
36831: AND
36832: PUSH
36833: LD_VAR 0 12
36837: PUSH
36838: LD_INT 1
36840: ARRAY
36841: PPUSH
36842: CALL_OW 313
36846: PUSH
36847: LD_INT 6
36849: EQUAL
36850: OR
36851: IFFALSE 36871
// f := Delete ( f , 1 ) ;
36853: LD_ADDR_VAR 0 12
36857: PUSH
36858: LD_VAR 0 12
36862: PPUSH
36863: LD_INT 1
36865: PPUSH
36866: CALL_OW 3
36870: ST_TO_ADDR
// if not f then
36871: LD_VAR 0 12
36875: NOT
36876: IFFALSE 36894
// begin x := x + 2 ;
36878: LD_ADDR_VAR 0 13
36882: PUSH
36883: LD_VAR 0 13
36887: PUSH
36888: LD_INT 2
36890: PLUS
36891: ST_TO_ADDR
// continue ;
36892: GO 36692
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36894: LD_VAR 0 12
36898: PUSH
36899: LD_INT 1
36901: ARRAY
36902: PPUSH
36903: CALL_OW 266
36907: PUSH
36908: LD_INT 5
36910: EQUAL
36911: IFFALSE 36985
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36913: LD_VAR 0 12
36917: PUSH
36918: LD_INT 1
36920: ARRAY
36921: PPUSH
36922: CALL_OW 313
36926: PUSH
36927: LD_INT 3
36929: LESS
36930: IFFALSE 36966
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36932: LD_INT 0
36934: PPUSH
36935: LD_INT 5
36937: PUSH
36938: LD_INT 8
36940: PUSH
36941: LD_INT 9
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: LIST
36948: PUSH
36949: LD_VAR 0 17
36953: ARRAY
36954: PPUSH
36955: LD_VAR 0 4
36959: PPUSH
36960: CALL_OW 380
36964: GO 36983
// PrepareHuman ( false , i , skill ) ;
36966: LD_INT 0
36968: PPUSH
36969: LD_VAR 0 8
36973: PPUSH
36974: LD_VAR 0 4
36978: PPUSH
36979: CALL_OW 380
// end else
36983: GO 37002
// PrepareHuman ( false , i , skill ) ;
36985: LD_INT 0
36987: PPUSH
36988: LD_VAR 0 8
36992: PPUSH
36993: LD_VAR 0 4
36997: PPUSH
36998: CALL_OW 380
// un := CreateHuman ;
37002: LD_ADDR_VAR 0 14
37006: PUSH
37007: CALL_OW 44
37011: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37012: LD_ADDR_VAR 0 7
37016: PUSH
37017: LD_VAR 0 7
37021: PPUSH
37022: LD_INT 1
37024: PPUSH
37025: LD_VAR 0 14
37029: PPUSH
37030: CALL_OW 2
37034: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37035: LD_VAR 0 14
37039: PPUSH
37040: LD_VAR 0 12
37044: PUSH
37045: LD_INT 1
37047: ARRAY
37048: PPUSH
37049: CALL_OW 52
// end ;
37053: GO 36692
37055: POP
37056: POP
// end ;
37057: GO 35994
37059: POP
37060: POP
// result := result ^ buildings ;
37061: LD_ADDR_VAR 0 7
37065: PUSH
37066: LD_VAR 0 7
37070: PUSH
37071: LD_VAR 0 18
37075: ADD
37076: ST_TO_ADDR
// end else
37077: GO 37220
// begin for i = 1 to personel do
37079: LD_ADDR_VAR 0 8
37083: PUSH
37084: DOUBLE
37085: LD_INT 1
37087: DEC
37088: ST_TO_ADDR
37089: LD_VAR 0 6
37093: PUSH
37094: FOR_TO
37095: IFFALSE 37218
// begin if i > 4 then
37097: LD_VAR 0 8
37101: PUSH
37102: LD_INT 4
37104: GREATER
37105: IFFALSE 37109
// break ;
37107: GO 37218
// x := personel [ i ] ;
37109: LD_ADDR_VAR 0 13
37113: PUSH
37114: LD_VAR 0 6
37118: PUSH
37119: LD_VAR 0 8
37123: ARRAY
37124: ST_TO_ADDR
// if x = - 1 then
37125: LD_VAR 0 13
37129: PUSH
37130: LD_INT 1
37132: NEG
37133: EQUAL
37134: IFFALSE 37138
// continue ;
37136: GO 37094
// PrepareHuman ( false , i , skill ) ;
37138: LD_INT 0
37140: PPUSH
37141: LD_VAR 0 8
37145: PPUSH
37146: LD_VAR 0 4
37150: PPUSH
37151: CALL_OW 380
// un := CreateHuman ;
37155: LD_ADDR_VAR 0 14
37159: PUSH
37160: CALL_OW 44
37164: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37165: LD_VAR 0 14
37169: PPUSH
37170: LD_VAR 0 1
37174: PPUSH
37175: CALL_OW 250
37179: PPUSH
37180: LD_VAR 0 1
37184: PPUSH
37185: CALL_OW 251
37189: PPUSH
37190: LD_INT 10
37192: PPUSH
37193: LD_INT 0
37195: PPUSH
37196: CALL_OW 50
// result := result ^ un ;
37200: LD_ADDR_VAR 0 7
37204: PUSH
37205: LD_VAR 0 7
37209: PUSH
37210: LD_VAR 0 14
37214: ADD
37215: ST_TO_ADDR
// end ;
37216: GO 37094
37218: POP
37219: POP
// end ; end ;
37220: LD_VAR 0 7
37224: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37225: LD_INT 0
37227: PPUSH
37228: PPUSH
37229: PPUSH
37230: PPUSH
37231: PPUSH
37232: PPUSH
37233: PPUSH
37234: PPUSH
37235: PPUSH
37236: PPUSH
37237: PPUSH
37238: PPUSH
37239: PPUSH
37240: PPUSH
37241: PPUSH
37242: PPUSH
// result := false ;
37243: LD_ADDR_VAR 0 3
37247: PUSH
37248: LD_INT 0
37250: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37251: LD_VAR 0 1
37255: NOT
37256: PUSH
37257: LD_VAR 0 1
37261: PPUSH
37262: CALL_OW 266
37266: PUSH
37267: LD_INT 32
37269: PUSH
37270: LD_INT 33
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: IN
37277: NOT
37278: OR
37279: IFFALSE 37283
// exit ;
37281: GO 38419
// nat := GetNation ( tower ) ;
37283: LD_ADDR_VAR 0 12
37287: PUSH
37288: LD_VAR 0 1
37292: PPUSH
37293: CALL_OW 248
37297: ST_TO_ADDR
// side := GetSide ( tower ) ;
37298: LD_ADDR_VAR 0 16
37302: PUSH
37303: LD_VAR 0 1
37307: PPUSH
37308: CALL_OW 255
37312: ST_TO_ADDR
// x := GetX ( tower ) ;
37313: LD_ADDR_VAR 0 10
37317: PUSH
37318: LD_VAR 0 1
37322: PPUSH
37323: CALL_OW 250
37327: ST_TO_ADDR
// y := GetY ( tower ) ;
37328: LD_ADDR_VAR 0 11
37332: PUSH
37333: LD_VAR 0 1
37337: PPUSH
37338: CALL_OW 251
37342: ST_TO_ADDR
// if not x or not y then
37343: LD_VAR 0 10
37347: NOT
37348: PUSH
37349: LD_VAR 0 11
37353: NOT
37354: OR
37355: IFFALSE 37359
// exit ;
37357: GO 38419
// weapon := 0 ;
37359: LD_ADDR_VAR 0 18
37363: PUSH
37364: LD_INT 0
37366: ST_TO_ADDR
// fac_list := [ ] ;
37367: LD_ADDR_VAR 0 17
37371: PUSH
37372: EMPTY
37373: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
37374: LD_ADDR_VAR 0 6
37378: PUSH
37379: LD_VAR 0 1
37383: PPUSH
37384: CALL_OW 274
37388: PPUSH
37389: LD_VAR 0 2
37393: PPUSH
37394: CALL 34997 0 2
37398: PPUSH
37399: LD_INT 30
37401: PUSH
37402: LD_INT 3
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PPUSH
37409: CALL_OW 72
37413: ST_TO_ADDR
// if not factories then
37414: LD_VAR 0 6
37418: NOT
37419: IFFALSE 37423
// exit ;
37421: GO 38419
// for i in factories do
37423: LD_ADDR_VAR 0 8
37427: PUSH
37428: LD_VAR 0 6
37432: PUSH
37433: FOR_IN
37434: IFFALSE 37459
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37436: LD_ADDR_VAR 0 17
37440: PUSH
37441: LD_VAR 0 17
37445: PUSH
37446: LD_VAR 0 8
37450: PPUSH
37451: CALL_OW 478
37455: UNION
37456: ST_TO_ADDR
37457: GO 37433
37459: POP
37460: POP
// if not fac_list then
37461: LD_VAR 0 17
37465: NOT
37466: IFFALSE 37470
// exit ;
37468: GO 38419
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37470: LD_ADDR_VAR 0 5
37474: PUSH
37475: LD_INT 4
37477: PUSH
37478: LD_INT 5
37480: PUSH
37481: LD_INT 9
37483: PUSH
37484: LD_INT 10
37486: PUSH
37487: LD_INT 6
37489: PUSH
37490: LD_INT 7
37492: PUSH
37493: LD_INT 11
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: LIST
37500: LIST
37501: LIST
37502: LIST
37503: LIST
37504: PUSH
37505: LD_INT 27
37507: PUSH
37508: LD_INT 28
37510: PUSH
37511: LD_INT 26
37513: PUSH
37514: LD_INT 30
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: LIST
37521: LIST
37522: PUSH
37523: LD_INT 43
37525: PUSH
37526: LD_INT 44
37528: PUSH
37529: LD_INT 46
37531: PUSH
37532: LD_INT 45
37534: PUSH
37535: LD_INT 47
37537: PUSH
37538: LD_INT 49
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: LIST
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: LIST
37553: PUSH
37554: LD_VAR 0 12
37558: ARRAY
37559: ST_TO_ADDR
// for i in list do
37560: LD_ADDR_VAR 0 8
37564: PUSH
37565: LD_VAR 0 5
37569: PUSH
37570: FOR_IN
37571: IFFALSE 37604
// if not i in fac_list then
37573: LD_VAR 0 8
37577: PUSH
37578: LD_VAR 0 17
37582: IN
37583: NOT
37584: IFFALSE 37602
// list := list diff i ;
37586: LD_ADDR_VAR 0 5
37590: PUSH
37591: LD_VAR 0 5
37595: PUSH
37596: LD_VAR 0 8
37600: DIFF
37601: ST_TO_ADDR
37602: GO 37570
37604: POP
37605: POP
// if not list then
37606: LD_VAR 0 5
37610: NOT
37611: IFFALSE 37615
// exit ;
37613: GO 38419
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37615: LD_VAR 0 12
37619: PUSH
37620: LD_INT 3
37622: EQUAL
37623: PUSH
37624: LD_INT 49
37626: PUSH
37627: LD_VAR 0 5
37631: IN
37632: AND
37633: PUSH
37634: LD_INT 31
37636: PPUSH
37637: LD_VAR 0 16
37641: PPUSH
37642: CALL_OW 321
37646: PUSH
37647: LD_INT 2
37649: EQUAL
37650: AND
37651: IFFALSE 37711
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37653: LD_INT 22
37655: PUSH
37656: LD_VAR 0 16
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: PUSH
37665: LD_INT 35
37667: PUSH
37668: LD_INT 49
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: PUSH
37675: LD_INT 91
37677: PUSH
37678: LD_VAR 0 1
37682: PUSH
37683: LD_INT 10
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: LIST
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: LIST
37695: PPUSH
37696: CALL_OW 69
37700: NOT
37701: IFFALSE 37711
// weapon := ru_time_lapser ;
37703: LD_ADDR_VAR 0 18
37707: PUSH
37708: LD_INT 49
37710: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37711: LD_VAR 0 12
37715: PUSH
37716: LD_INT 1
37718: PUSH
37719: LD_INT 2
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: IN
37726: PUSH
37727: LD_INT 11
37729: PUSH
37730: LD_VAR 0 5
37734: IN
37735: PUSH
37736: LD_INT 30
37738: PUSH
37739: LD_VAR 0 5
37743: IN
37744: OR
37745: AND
37746: PUSH
37747: LD_INT 6
37749: PPUSH
37750: LD_VAR 0 16
37754: PPUSH
37755: CALL_OW 321
37759: PUSH
37760: LD_INT 2
37762: EQUAL
37763: AND
37764: IFFALSE 37929
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37766: LD_INT 22
37768: PUSH
37769: LD_VAR 0 16
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 2
37780: PUSH
37781: LD_INT 35
37783: PUSH
37784: LD_INT 11
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: PUSH
37791: LD_INT 35
37793: PUSH
37794: LD_INT 30
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: PUSH
37801: EMPTY
37802: LIST
37803: LIST
37804: LIST
37805: PUSH
37806: LD_INT 91
37808: PUSH
37809: LD_VAR 0 1
37813: PUSH
37814: LD_INT 18
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: LIST
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: LIST
37826: PPUSH
37827: CALL_OW 69
37831: NOT
37832: PUSH
37833: LD_INT 22
37835: PUSH
37836: LD_VAR 0 16
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: PUSH
37845: LD_INT 2
37847: PUSH
37848: LD_INT 30
37850: PUSH
37851: LD_INT 32
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: PUSH
37858: LD_INT 30
37860: PUSH
37861: LD_INT 33
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: LIST
37872: PUSH
37873: LD_INT 91
37875: PUSH
37876: LD_VAR 0 1
37880: PUSH
37881: LD_INT 12
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: LIST
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: LIST
37893: PUSH
37894: EMPTY
37895: LIST
37896: PPUSH
37897: CALL_OW 69
37901: PUSH
37902: LD_INT 2
37904: GREATER
37905: AND
37906: IFFALSE 37929
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37908: LD_ADDR_VAR 0 18
37912: PUSH
37913: LD_INT 11
37915: PUSH
37916: LD_INT 30
37918: PUSH
37919: EMPTY
37920: LIST
37921: LIST
37922: PUSH
37923: LD_VAR 0 12
37927: ARRAY
37928: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37929: LD_VAR 0 18
37933: NOT
37934: PUSH
37935: LD_INT 40
37937: PPUSH
37938: LD_VAR 0 16
37942: PPUSH
37943: CALL_OW 321
37947: PUSH
37948: LD_INT 2
37950: EQUAL
37951: AND
37952: PUSH
37953: LD_INT 7
37955: PUSH
37956: LD_VAR 0 5
37960: IN
37961: PUSH
37962: LD_INT 28
37964: PUSH
37965: LD_VAR 0 5
37969: IN
37970: OR
37971: PUSH
37972: LD_INT 45
37974: PUSH
37975: LD_VAR 0 5
37979: IN
37980: OR
37981: AND
37982: IFFALSE 38236
// begin hex := GetHexInfo ( x , y ) ;
37984: LD_ADDR_VAR 0 4
37988: PUSH
37989: LD_VAR 0 10
37993: PPUSH
37994: LD_VAR 0 11
37998: PPUSH
37999: CALL_OW 546
38003: ST_TO_ADDR
// if hex [ 1 ] then
38004: LD_VAR 0 4
38008: PUSH
38009: LD_INT 1
38011: ARRAY
38012: IFFALSE 38016
// exit ;
38014: GO 38419
// height := hex [ 2 ] ;
38016: LD_ADDR_VAR 0 15
38020: PUSH
38021: LD_VAR 0 4
38025: PUSH
38026: LD_INT 2
38028: ARRAY
38029: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38030: LD_ADDR_VAR 0 14
38034: PUSH
38035: LD_INT 0
38037: PUSH
38038: LD_INT 2
38040: PUSH
38041: LD_INT 3
38043: PUSH
38044: LD_INT 5
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: LIST
38051: LIST
38052: ST_TO_ADDR
// for i in tmp do
38053: LD_ADDR_VAR 0 8
38057: PUSH
38058: LD_VAR 0 14
38062: PUSH
38063: FOR_IN
38064: IFFALSE 38234
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38066: LD_ADDR_VAR 0 9
38070: PUSH
38071: LD_VAR 0 10
38075: PPUSH
38076: LD_VAR 0 8
38080: PPUSH
38081: LD_INT 5
38083: PPUSH
38084: CALL_OW 272
38088: PUSH
38089: LD_VAR 0 11
38093: PPUSH
38094: LD_VAR 0 8
38098: PPUSH
38099: LD_INT 5
38101: PPUSH
38102: CALL_OW 273
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38111: LD_VAR 0 9
38115: PUSH
38116: LD_INT 1
38118: ARRAY
38119: PPUSH
38120: LD_VAR 0 9
38124: PUSH
38125: LD_INT 2
38127: ARRAY
38128: PPUSH
38129: CALL_OW 488
38133: IFFALSE 38232
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38135: LD_ADDR_VAR 0 4
38139: PUSH
38140: LD_VAR 0 9
38144: PUSH
38145: LD_INT 1
38147: ARRAY
38148: PPUSH
38149: LD_VAR 0 9
38153: PUSH
38154: LD_INT 2
38156: ARRAY
38157: PPUSH
38158: CALL_OW 546
38162: ST_TO_ADDR
// if hex [ 1 ] then
38163: LD_VAR 0 4
38167: PUSH
38168: LD_INT 1
38170: ARRAY
38171: IFFALSE 38175
// continue ;
38173: GO 38063
// h := hex [ 2 ] ;
38175: LD_ADDR_VAR 0 13
38179: PUSH
38180: LD_VAR 0 4
38184: PUSH
38185: LD_INT 2
38187: ARRAY
38188: ST_TO_ADDR
// if h + 7 < height then
38189: LD_VAR 0 13
38193: PUSH
38194: LD_INT 7
38196: PLUS
38197: PUSH
38198: LD_VAR 0 15
38202: LESS
38203: IFFALSE 38232
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38205: LD_ADDR_VAR 0 18
38209: PUSH
38210: LD_INT 7
38212: PUSH
38213: LD_INT 28
38215: PUSH
38216: LD_INT 45
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: LIST
38223: PUSH
38224: LD_VAR 0 12
38228: ARRAY
38229: ST_TO_ADDR
// break ;
38230: GO 38234
// end ; end ; end ;
38232: GO 38063
38234: POP
38235: POP
// end ; if not weapon then
38236: LD_VAR 0 18
38240: NOT
38241: IFFALSE 38301
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38243: LD_ADDR_VAR 0 5
38247: PUSH
38248: LD_VAR 0 5
38252: PUSH
38253: LD_INT 11
38255: PUSH
38256: LD_INT 30
38258: PUSH
38259: LD_INT 49
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: LIST
38266: DIFF
38267: ST_TO_ADDR
// if not list then
38268: LD_VAR 0 5
38272: NOT
38273: IFFALSE 38277
// exit ;
38275: GO 38419
// weapon := list [ rand ( 1 , list ) ] ;
38277: LD_ADDR_VAR 0 18
38281: PUSH
38282: LD_VAR 0 5
38286: PUSH
38287: LD_INT 1
38289: PPUSH
38290: LD_VAR 0 5
38294: PPUSH
38295: CALL_OW 12
38299: ARRAY
38300: ST_TO_ADDR
// end ; if weapon then
38301: LD_VAR 0 18
38305: IFFALSE 38419
// begin tmp := CostOfWeapon ( weapon ) ;
38307: LD_ADDR_VAR 0 14
38311: PUSH
38312: LD_VAR 0 18
38316: PPUSH
38317: CALL_OW 451
38321: ST_TO_ADDR
// j := GetBase ( tower ) ;
38322: LD_ADDR_VAR 0 9
38326: PUSH
38327: LD_VAR 0 1
38331: PPUSH
38332: CALL_OW 274
38336: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38337: LD_VAR 0 9
38341: PPUSH
38342: LD_INT 1
38344: PPUSH
38345: CALL_OW 275
38349: PUSH
38350: LD_VAR 0 14
38354: PUSH
38355: LD_INT 1
38357: ARRAY
38358: GREATEREQUAL
38359: PUSH
38360: LD_VAR 0 9
38364: PPUSH
38365: LD_INT 2
38367: PPUSH
38368: CALL_OW 275
38372: PUSH
38373: LD_VAR 0 14
38377: PUSH
38378: LD_INT 2
38380: ARRAY
38381: GREATEREQUAL
38382: AND
38383: PUSH
38384: LD_VAR 0 9
38388: PPUSH
38389: LD_INT 3
38391: PPUSH
38392: CALL_OW 275
38396: PUSH
38397: LD_VAR 0 14
38401: PUSH
38402: LD_INT 3
38404: ARRAY
38405: GREATEREQUAL
38406: AND
38407: IFFALSE 38419
// result := weapon ;
38409: LD_ADDR_VAR 0 3
38413: PUSH
38414: LD_VAR 0 18
38418: ST_TO_ADDR
// end ; end ;
38419: LD_VAR 0 3
38423: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38424: LD_INT 0
38426: PPUSH
38427: PPUSH
// result := true ;
38428: LD_ADDR_VAR 0 3
38432: PUSH
38433: LD_INT 1
38435: ST_TO_ADDR
// if array1 = array2 then
38436: LD_VAR 0 1
38440: PUSH
38441: LD_VAR 0 2
38445: EQUAL
38446: IFFALSE 38506
// begin for i = 1 to array1 do
38448: LD_ADDR_VAR 0 4
38452: PUSH
38453: DOUBLE
38454: LD_INT 1
38456: DEC
38457: ST_TO_ADDR
38458: LD_VAR 0 1
38462: PUSH
38463: FOR_TO
38464: IFFALSE 38502
// if array1 [ i ] <> array2 [ i ] then
38466: LD_VAR 0 1
38470: PUSH
38471: LD_VAR 0 4
38475: ARRAY
38476: PUSH
38477: LD_VAR 0 2
38481: PUSH
38482: LD_VAR 0 4
38486: ARRAY
38487: NONEQUAL
38488: IFFALSE 38500
// begin result := false ;
38490: LD_ADDR_VAR 0 3
38494: PUSH
38495: LD_INT 0
38497: ST_TO_ADDR
// break ;
38498: GO 38502
// end ;
38500: GO 38463
38502: POP
38503: POP
// end else
38504: GO 38514
// result := false ;
38506: LD_ADDR_VAR 0 3
38510: PUSH
38511: LD_INT 0
38513: ST_TO_ADDR
// end ;
38514: LD_VAR 0 3
38518: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38519: LD_INT 0
38521: PPUSH
38522: PPUSH
38523: PPUSH
// pom := GetBase ( fac ) ;
38524: LD_ADDR_VAR 0 5
38528: PUSH
38529: LD_VAR 0 1
38533: PPUSH
38534: CALL_OW 274
38538: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38539: LD_ADDR_VAR 0 4
38543: PUSH
38544: LD_VAR 0 2
38548: PUSH
38549: LD_INT 1
38551: ARRAY
38552: PPUSH
38553: LD_VAR 0 2
38557: PUSH
38558: LD_INT 2
38560: ARRAY
38561: PPUSH
38562: LD_VAR 0 2
38566: PUSH
38567: LD_INT 3
38569: ARRAY
38570: PPUSH
38571: LD_VAR 0 2
38575: PUSH
38576: LD_INT 4
38578: ARRAY
38579: PPUSH
38580: CALL_OW 449
38584: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38585: LD_ADDR_VAR 0 3
38589: PUSH
38590: LD_VAR 0 5
38594: PPUSH
38595: LD_INT 1
38597: PPUSH
38598: CALL_OW 275
38602: PUSH
38603: LD_VAR 0 4
38607: PUSH
38608: LD_INT 1
38610: ARRAY
38611: GREATEREQUAL
38612: PUSH
38613: LD_VAR 0 5
38617: PPUSH
38618: LD_INT 2
38620: PPUSH
38621: CALL_OW 275
38625: PUSH
38626: LD_VAR 0 4
38630: PUSH
38631: LD_INT 2
38633: ARRAY
38634: GREATEREQUAL
38635: AND
38636: PUSH
38637: LD_VAR 0 5
38641: PPUSH
38642: LD_INT 3
38644: PPUSH
38645: CALL_OW 275
38649: PUSH
38650: LD_VAR 0 4
38654: PUSH
38655: LD_INT 3
38657: ARRAY
38658: GREATEREQUAL
38659: AND
38660: ST_TO_ADDR
// end ;
38661: LD_VAR 0 3
38665: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38666: LD_INT 0
38668: PPUSH
38669: PPUSH
38670: PPUSH
38671: PPUSH
// pom := GetBase ( building ) ;
38672: LD_ADDR_VAR 0 3
38676: PUSH
38677: LD_VAR 0 1
38681: PPUSH
38682: CALL_OW 274
38686: ST_TO_ADDR
// if not pom then
38687: LD_VAR 0 3
38691: NOT
38692: IFFALSE 38696
// exit ;
38694: GO 38866
// btype := GetBType ( building ) ;
38696: LD_ADDR_VAR 0 5
38700: PUSH
38701: LD_VAR 0 1
38705: PPUSH
38706: CALL_OW 266
38710: ST_TO_ADDR
// if btype = b_armoury then
38711: LD_VAR 0 5
38715: PUSH
38716: LD_INT 4
38718: EQUAL
38719: IFFALSE 38729
// btype := b_barracks ;
38721: LD_ADDR_VAR 0 5
38725: PUSH
38726: LD_INT 5
38728: ST_TO_ADDR
// if btype = b_depot then
38729: LD_VAR 0 5
38733: PUSH
38734: LD_INT 0
38736: EQUAL
38737: IFFALSE 38747
// btype := b_warehouse ;
38739: LD_ADDR_VAR 0 5
38743: PUSH
38744: LD_INT 1
38746: ST_TO_ADDR
// if btype = b_workshop then
38747: LD_VAR 0 5
38751: PUSH
38752: LD_INT 2
38754: EQUAL
38755: IFFALSE 38765
// btype := b_factory ;
38757: LD_ADDR_VAR 0 5
38761: PUSH
38762: LD_INT 3
38764: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38765: LD_ADDR_VAR 0 4
38769: PUSH
38770: LD_VAR 0 5
38774: PPUSH
38775: LD_VAR 0 1
38779: PPUSH
38780: CALL_OW 248
38784: PPUSH
38785: CALL_OW 450
38789: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38790: LD_ADDR_VAR 0 2
38794: PUSH
38795: LD_VAR 0 3
38799: PPUSH
38800: LD_INT 1
38802: PPUSH
38803: CALL_OW 275
38807: PUSH
38808: LD_VAR 0 4
38812: PUSH
38813: LD_INT 1
38815: ARRAY
38816: GREATEREQUAL
38817: PUSH
38818: LD_VAR 0 3
38822: PPUSH
38823: LD_INT 2
38825: PPUSH
38826: CALL_OW 275
38830: PUSH
38831: LD_VAR 0 4
38835: PUSH
38836: LD_INT 2
38838: ARRAY
38839: GREATEREQUAL
38840: AND
38841: PUSH
38842: LD_VAR 0 3
38846: PPUSH
38847: LD_INT 3
38849: PPUSH
38850: CALL_OW 275
38854: PUSH
38855: LD_VAR 0 4
38859: PUSH
38860: LD_INT 3
38862: ARRAY
38863: GREATEREQUAL
38864: AND
38865: ST_TO_ADDR
// end ;
38866: LD_VAR 0 2
38870: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38871: LD_INT 0
38873: PPUSH
38874: PPUSH
38875: PPUSH
// pom := GetBase ( building ) ;
38876: LD_ADDR_VAR 0 4
38880: PUSH
38881: LD_VAR 0 1
38885: PPUSH
38886: CALL_OW 274
38890: ST_TO_ADDR
// if not pom then
38891: LD_VAR 0 4
38895: NOT
38896: IFFALSE 38900
// exit ;
38898: GO 39001
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38900: LD_ADDR_VAR 0 5
38904: PUSH
38905: LD_VAR 0 2
38909: PPUSH
38910: LD_VAR 0 1
38914: PPUSH
38915: CALL_OW 248
38919: PPUSH
38920: CALL_OW 450
38924: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38925: LD_ADDR_VAR 0 3
38929: PUSH
38930: LD_VAR 0 4
38934: PPUSH
38935: LD_INT 1
38937: PPUSH
38938: CALL_OW 275
38942: PUSH
38943: LD_VAR 0 5
38947: PUSH
38948: LD_INT 1
38950: ARRAY
38951: GREATEREQUAL
38952: PUSH
38953: LD_VAR 0 4
38957: PPUSH
38958: LD_INT 2
38960: PPUSH
38961: CALL_OW 275
38965: PUSH
38966: LD_VAR 0 5
38970: PUSH
38971: LD_INT 2
38973: ARRAY
38974: GREATEREQUAL
38975: AND
38976: PUSH
38977: LD_VAR 0 4
38981: PPUSH
38982: LD_INT 3
38984: PPUSH
38985: CALL_OW 275
38989: PUSH
38990: LD_VAR 0 5
38994: PUSH
38995: LD_INT 3
38997: ARRAY
38998: GREATEREQUAL
38999: AND
39000: ST_TO_ADDR
// end ;
39001: LD_VAR 0 3
39005: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
39006: LD_INT 0
39008: PPUSH
39009: PPUSH
39010: PPUSH
39011: PPUSH
39012: PPUSH
39013: PPUSH
39014: PPUSH
39015: PPUSH
39016: PPUSH
39017: PPUSH
// result := false ;
39018: LD_ADDR_VAR 0 6
39022: PUSH
39023: LD_INT 0
39025: ST_TO_ADDR
// if not base or not btype or not x or not y then
39026: LD_VAR 0 1
39030: NOT
39031: PUSH
39032: LD_VAR 0 2
39036: NOT
39037: OR
39038: PUSH
39039: LD_VAR 0 3
39043: NOT
39044: OR
39045: PUSH
39046: LD_VAR 0 4
39050: NOT
39051: OR
39052: IFFALSE 39056
// exit ;
39054: GO 39665
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
39056: LD_ADDR_VAR 0 12
39060: PUSH
39061: LD_VAR 0 2
39065: PPUSH
39066: LD_VAR 0 3
39070: PPUSH
39071: LD_VAR 0 4
39075: PPUSH
39076: LD_VAR 0 5
39080: PPUSH
39081: LD_VAR 0 1
39085: PUSH
39086: LD_INT 1
39088: ARRAY
39089: PPUSH
39090: CALL_OW 248
39094: PPUSH
39095: LD_INT 0
39097: PPUSH
39098: CALL 40502 0 6
39102: ST_TO_ADDR
// if not hexes then
39103: LD_VAR 0 12
39107: NOT
39108: IFFALSE 39112
// exit ;
39110: GO 39665
// for i = 1 to hexes do
39112: LD_ADDR_VAR 0 7
39116: PUSH
39117: DOUBLE
39118: LD_INT 1
39120: DEC
39121: ST_TO_ADDR
39122: LD_VAR 0 12
39126: PUSH
39127: FOR_TO
39128: IFFALSE 39663
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39130: LD_ADDR_VAR 0 11
39134: PUSH
39135: LD_VAR 0 12
39139: PUSH
39140: LD_VAR 0 7
39144: ARRAY
39145: PUSH
39146: LD_INT 1
39148: ARRAY
39149: PPUSH
39150: LD_VAR 0 12
39154: PUSH
39155: LD_VAR 0 7
39159: ARRAY
39160: PUSH
39161: LD_INT 2
39163: ARRAY
39164: PPUSH
39165: CALL_OW 428
39169: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39170: LD_VAR 0 12
39174: PUSH
39175: LD_VAR 0 7
39179: ARRAY
39180: PUSH
39181: LD_INT 1
39183: ARRAY
39184: PPUSH
39185: LD_VAR 0 12
39189: PUSH
39190: LD_VAR 0 7
39194: ARRAY
39195: PUSH
39196: LD_INT 2
39198: ARRAY
39199: PPUSH
39200: CALL_OW 351
39204: PUSH
39205: LD_VAR 0 12
39209: PUSH
39210: LD_VAR 0 7
39214: ARRAY
39215: PUSH
39216: LD_INT 1
39218: ARRAY
39219: PPUSH
39220: LD_VAR 0 12
39224: PUSH
39225: LD_VAR 0 7
39229: ARRAY
39230: PUSH
39231: LD_INT 2
39233: ARRAY
39234: PPUSH
39235: CALL_OW 488
39239: NOT
39240: OR
39241: PUSH
39242: LD_VAR 0 11
39246: PPUSH
39247: CALL_OW 247
39251: PUSH
39252: LD_INT 3
39254: EQUAL
39255: OR
39256: IFFALSE 39262
// exit ;
39258: POP
39259: POP
39260: GO 39665
// if not tmp or not tmp in base then
39262: LD_VAR 0 11
39266: NOT
39267: PUSH
39268: LD_VAR 0 11
39272: PUSH
39273: LD_VAR 0 1
39277: IN
39278: NOT
39279: OR
39280: IFFALSE 39284
// continue ;
39282: GO 39127
// result := true ;
39284: LD_ADDR_VAR 0 6
39288: PUSH
39289: LD_INT 1
39291: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39292: LD_ADDR_VAR 0 15
39296: PUSH
39297: LD_VAR 0 1
39301: PPUSH
39302: LD_INT 22
39304: PUSH
39305: LD_VAR 0 11
39309: PPUSH
39310: CALL_OW 255
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 2
39321: PUSH
39322: LD_INT 30
39324: PUSH
39325: LD_INT 0
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 30
39334: PUSH
39335: LD_INT 1
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: LIST
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PPUSH
39351: CALL_OW 72
39355: ST_TO_ADDR
// if dep then
39356: LD_VAR 0 15
39360: IFFALSE 39496
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39362: LD_ADDR_VAR 0 14
39366: PUSH
39367: LD_VAR 0 15
39371: PUSH
39372: LD_INT 1
39374: ARRAY
39375: PPUSH
39376: CALL_OW 250
39380: PPUSH
39381: LD_VAR 0 15
39385: PUSH
39386: LD_INT 1
39388: ARRAY
39389: PPUSH
39390: CALL_OW 254
39394: PPUSH
39395: LD_INT 5
39397: PPUSH
39398: CALL_OW 272
39402: PUSH
39403: LD_VAR 0 15
39407: PUSH
39408: LD_INT 1
39410: ARRAY
39411: PPUSH
39412: CALL_OW 251
39416: PPUSH
39417: LD_VAR 0 15
39421: PUSH
39422: LD_INT 1
39424: ARRAY
39425: PPUSH
39426: CALL_OW 254
39430: PPUSH
39431: LD_INT 5
39433: PPUSH
39434: CALL_OW 273
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39443: LD_VAR 0 14
39447: PUSH
39448: LD_INT 1
39450: ARRAY
39451: PPUSH
39452: LD_VAR 0 14
39456: PUSH
39457: LD_INT 2
39459: ARRAY
39460: PPUSH
39461: CALL_OW 488
39465: IFFALSE 39496
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39467: LD_VAR 0 11
39471: PPUSH
39472: LD_VAR 0 14
39476: PUSH
39477: LD_INT 1
39479: ARRAY
39480: PPUSH
39481: LD_VAR 0 14
39485: PUSH
39486: LD_INT 2
39488: ARRAY
39489: PPUSH
39490: CALL_OW 111
// continue ;
39494: GO 39127
// end ; end ; r := GetDir ( tmp ) ;
39496: LD_ADDR_VAR 0 13
39500: PUSH
39501: LD_VAR 0 11
39505: PPUSH
39506: CALL_OW 254
39510: ST_TO_ADDR
// if r = 5 then
39511: LD_VAR 0 13
39515: PUSH
39516: LD_INT 5
39518: EQUAL
39519: IFFALSE 39529
// r := 0 ;
39521: LD_ADDR_VAR 0 13
39525: PUSH
39526: LD_INT 0
39528: ST_TO_ADDR
// for j = r to 5 do
39529: LD_ADDR_VAR 0 8
39533: PUSH
39534: DOUBLE
39535: LD_VAR 0 13
39539: DEC
39540: ST_TO_ADDR
39541: LD_INT 5
39543: PUSH
39544: FOR_TO
39545: IFFALSE 39659
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39547: LD_ADDR_VAR 0 9
39551: PUSH
39552: LD_VAR 0 11
39556: PPUSH
39557: CALL_OW 250
39561: PPUSH
39562: LD_VAR 0 8
39566: PPUSH
39567: LD_INT 2
39569: PPUSH
39570: CALL_OW 272
39574: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39575: LD_ADDR_VAR 0 10
39579: PUSH
39580: LD_VAR 0 11
39584: PPUSH
39585: CALL_OW 251
39589: PPUSH
39590: LD_VAR 0 8
39594: PPUSH
39595: LD_INT 2
39597: PPUSH
39598: CALL_OW 273
39602: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39603: LD_VAR 0 9
39607: PPUSH
39608: LD_VAR 0 10
39612: PPUSH
39613: CALL_OW 488
39617: PUSH
39618: LD_VAR 0 9
39622: PPUSH
39623: LD_VAR 0 10
39627: PPUSH
39628: CALL_OW 428
39632: NOT
39633: AND
39634: IFFALSE 39657
// begin ComMoveXY ( tmp , _x , _y ) ;
39636: LD_VAR 0 11
39640: PPUSH
39641: LD_VAR 0 9
39645: PPUSH
39646: LD_VAR 0 10
39650: PPUSH
39651: CALL_OW 111
// break ;
39655: GO 39659
// end ; end ;
39657: GO 39544
39659: POP
39660: POP
// end ;
39661: GO 39127
39663: POP
39664: POP
// end ;
39665: LD_VAR 0 6
39669: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
39670: LD_INT 0
39672: PPUSH
39673: PPUSH
39674: PPUSH
39675: PPUSH
39676: PPUSH
39677: PPUSH
39678: PPUSH
39679: PPUSH
39680: PPUSH
39681: PPUSH
// result := false ;
39682: LD_ADDR_VAR 0 6
39686: PUSH
39687: LD_INT 0
39689: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39690: LD_VAR 0 1
39694: NOT
39695: PUSH
39696: LD_VAR 0 1
39700: PPUSH
39701: CALL_OW 266
39705: PUSH
39706: LD_INT 0
39708: PUSH
39709: LD_INT 1
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: IN
39716: NOT
39717: OR
39718: PUSH
39719: LD_VAR 0 2
39723: NOT
39724: OR
39725: PUSH
39726: LD_VAR 0 5
39730: PUSH
39731: LD_INT 0
39733: PUSH
39734: LD_INT 1
39736: PUSH
39737: LD_INT 2
39739: PUSH
39740: LD_INT 3
39742: PUSH
39743: LD_INT 4
39745: PUSH
39746: LD_INT 5
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: IN
39757: NOT
39758: OR
39759: PUSH
39760: LD_VAR 0 3
39764: PPUSH
39765: LD_VAR 0 4
39769: PPUSH
39770: CALL_OW 488
39774: NOT
39775: OR
39776: IFFALSE 39780
// exit ;
39778: GO 40497
// pom := GetBase ( depot ) ;
39780: LD_ADDR_VAR 0 10
39784: PUSH
39785: LD_VAR 0 1
39789: PPUSH
39790: CALL_OW 274
39794: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39795: LD_ADDR_VAR 0 11
39799: PUSH
39800: LD_VAR 0 2
39804: PPUSH
39805: LD_VAR 0 1
39809: PPUSH
39810: CALL_OW 248
39814: PPUSH
39815: CALL_OW 450
39819: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39820: LD_VAR 0 10
39824: PPUSH
39825: LD_INT 1
39827: PPUSH
39828: CALL_OW 275
39832: PUSH
39833: LD_VAR 0 11
39837: PUSH
39838: LD_INT 1
39840: ARRAY
39841: GREATEREQUAL
39842: PUSH
39843: LD_VAR 0 10
39847: PPUSH
39848: LD_INT 2
39850: PPUSH
39851: CALL_OW 275
39855: PUSH
39856: LD_VAR 0 11
39860: PUSH
39861: LD_INT 2
39863: ARRAY
39864: GREATEREQUAL
39865: AND
39866: PUSH
39867: LD_VAR 0 10
39871: PPUSH
39872: LD_INT 3
39874: PPUSH
39875: CALL_OW 275
39879: PUSH
39880: LD_VAR 0 11
39884: PUSH
39885: LD_INT 3
39887: ARRAY
39888: GREATEREQUAL
39889: AND
39890: NOT
39891: IFFALSE 39895
// exit ;
39893: GO 40497
// if GetBType ( depot ) = b_depot then
39895: LD_VAR 0 1
39899: PPUSH
39900: CALL_OW 266
39904: PUSH
39905: LD_INT 0
39907: EQUAL
39908: IFFALSE 39920
// dist := 28 else
39910: LD_ADDR_VAR 0 14
39914: PUSH
39915: LD_INT 28
39917: ST_TO_ADDR
39918: GO 39928
// dist := 36 ;
39920: LD_ADDR_VAR 0 14
39924: PUSH
39925: LD_INT 36
39927: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39928: LD_VAR 0 1
39932: PPUSH
39933: LD_VAR 0 3
39937: PPUSH
39938: LD_VAR 0 4
39942: PPUSH
39943: CALL_OW 297
39947: PUSH
39948: LD_VAR 0 14
39952: GREATER
39953: IFFALSE 39957
// exit ;
39955: GO 40497
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39957: LD_ADDR_VAR 0 12
39961: PUSH
39962: LD_VAR 0 2
39966: PPUSH
39967: LD_VAR 0 3
39971: PPUSH
39972: LD_VAR 0 4
39976: PPUSH
39977: LD_VAR 0 5
39981: PPUSH
39982: LD_VAR 0 1
39986: PPUSH
39987: CALL_OW 248
39991: PPUSH
39992: LD_INT 0
39994: PPUSH
39995: CALL 40502 0 6
39999: ST_TO_ADDR
// if not hexes then
40000: LD_VAR 0 12
40004: NOT
40005: IFFALSE 40009
// exit ;
40007: GO 40497
// hex := GetHexInfo ( x , y ) ;
40009: LD_ADDR_VAR 0 15
40013: PUSH
40014: LD_VAR 0 3
40018: PPUSH
40019: LD_VAR 0 4
40023: PPUSH
40024: CALL_OW 546
40028: ST_TO_ADDR
// if hex [ 1 ] then
40029: LD_VAR 0 15
40033: PUSH
40034: LD_INT 1
40036: ARRAY
40037: IFFALSE 40041
// exit ;
40039: GO 40497
// height := hex [ 2 ] ;
40041: LD_ADDR_VAR 0 13
40045: PUSH
40046: LD_VAR 0 15
40050: PUSH
40051: LD_INT 2
40053: ARRAY
40054: ST_TO_ADDR
// for i = 1 to hexes do
40055: LD_ADDR_VAR 0 7
40059: PUSH
40060: DOUBLE
40061: LD_INT 1
40063: DEC
40064: ST_TO_ADDR
40065: LD_VAR 0 12
40069: PUSH
40070: FOR_TO
40071: IFFALSE 40401
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40073: LD_VAR 0 12
40077: PUSH
40078: LD_VAR 0 7
40082: ARRAY
40083: PUSH
40084: LD_INT 1
40086: ARRAY
40087: PPUSH
40088: LD_VAR 0 12
40092: PUSH
40093: LD_VAR 0 7
40097: ARRAY
40098: PUSH
40099: LD_INT 2
40101: ARRAY
40102: PPUSH
40103: CALL_OW 488
40107: NOT
40108: PUSH
40109: LD_VAR 0 12
40113: PUSH
40114: LD_VAR 0 7
40118: ARRAY
40119: PUSH
40120: LD_INT 1
40122: ARRAY
40123: PPUSH
40124: LD_VAR 0 12
40128: PUSH
40129: LD_VAR 0 7
40133: ARRAY
40134: PUSH
40135: LD_INT 2
40137: ARRAY
40138: PPUSH
40139: CALL_OW 428
40143: PUSH
40144: LD_INT 0
40146: GREATER
40147: OR
40148: PUSH
40149: LD_VAR 0 12
40153: PUSH
40154: LD_VAR 0 7
40158: ARRAY
40159: PUSH
40160: LD_INT 1
40162: ARRAY
40163: PPUSH
40164: LD_VAR 0 12
40168: PUSH
40169: LD_VAR 0 7
40173: ARRAY
40174: PUSH
40175: LD_INT 2
40177: ARRAY
40178: PPUSH
40179: CALL_OW 351
40183: OR
40184: IFFALSE 40190
// exit ;
40186: POP
40187: POP
40188: GO 40497
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40190: LD_ADDR_VAR 0 8
40194: PUSH
40195: LD_VAR 0 12
40199: PUSH
40200: LD_VAR 0 7
40204: ARRAY
40205: PUSH
40206: LD_INT 1
40208: ARRAY
40209: PPUSH
40210: LD_VAR 0 12
40214: PUSH
40215: LD_VAR 0 7
40219: ARRAY
40220: PUSH
40221: LD_INT 2
40223: ARRAY
40224: PPUSH
40225: CALL_OW 546
40229: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40230: LD_VAR 0 8
40234: PUSH
40235: LD_INT 1
40237: ARRAY
40238: PUSH
40239: LD_VAR 0 8
40243: PUSH
40244: LD_INT 2
40246: ARRAY
40247: PUSH
40248: LD_VAR 0 13
40252: PUSH
40253: LD_INT 2
40255: PLUS
40256: GREATER
40257: OR
40258: PUSH
40259: LD_VAR 0 8
40263: PUSH
40264: LD_INT 2
40266: ARRAY
40267: PUSH
40268: LD_VAR 0 13
40272: PUSH
40273: LD_INT 2
40275: MINUS
40276: LESS
40277: OR
40278: PUSH
40279: LD_VAR 0 8
40283: PUSH
40284: LD_INT 3
40286: ARRAY
40287: PUSH
40288: LD_INT 0
40290: PUSH
40291: LD_INT 8
40293: PUSH
40294: LD_INT 9
40296: PUSH
40297: LD_INT 10
40299: PUSH
40300: LD_INT 11
40302: PUSH
40303: LD_INT 12
40305: PUSH
40306: LD_INT 13
40308: PUSH
40309: LD_INT 16
40311: PUSH
40312: LD_INT 17
40314: PUSH
40315: LD_INT 18
40317: PUSH
40318: LD_INT 19
40320: PUSH
40321: LD_INT 20
40323: PUSH
40324: LD_INT 21
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: LIST
40337: LIST
40338: LIST
40339: LIST
40340: LIST
40341: IN
40342: NOT
40343: OR
40344: PUSH
40345: LD_VAR 0 8
40349: PUSH
40350: LD_INT 5
40352: ARRAY
40353: NOT
40354: OR
40355: PUSH
40356: LD_VAR 0 8
40360: PUSH
40361: LD_INT 6
40363: ARRAY
40364: PUSH
40365: LD_INT 1
40367: PUSH
40368: LD_INT 2
40370: PUSH
40371: LD_INT 7
40373: PUSH
40374: LD_INT 9
40376: PUSH
40377: LD_INT 10
40379: PUSH
40380: LD_INT 11
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: IN
40391: NOT
40392: OR
40393: IFFALSE 40399
// exit ;
40395: POP
40396: POP
40397: GO 40497
// end ;
40399: GO 40070
40401: POP
40402: POP
// side := GetSide ( depot ) ;
40403: LD_ADDR_VAR 0 9
40407: PUSH
40408: LD_VAR 0 1
40412: PPUSH
40413: CALL_OW 255
40417: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40418: LD_VAR 0 9
40422: PPUSH
40423: LD_VAR 0 3
40427: PPUSH
40428: LD_VAR 0 4
40432: PPUSH
40433: LD_INT 20
40435: PPUSH
40436: CALL 33151 0 4
40440: PUSH
40441: LD_INT 4
40443: ARRAY
40444: IFFALSE 40448
// exit ;
40446: GO 40497
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40448: LD_VAR 0 2
40452: PUSH
40453: LD_INT 29
40455: PUSH
40456: LD_INT 30
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: IN
40463: PUSH
40464: LD_VAR 0 3
40468: PPUSH
40469: LD_VAR 0 4
40473: PPUSH
40474: LD_VAR 0 9
40478: PPUSH
40479: CALL_OW 440
40483: NOT
40484: AND
40485: IFFALSE 40489
// exit ;
40487: GO 40497
// result := true ;
40489: LD_ADDR_VAR 0 6
40493: PUSH
40494: LD_INT 1
40496: ST_TO_ADDR
// end ;
40497: LD_VAR 0 6
40501: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40502: LD_INT 0
40504: PPUSH
40505: PPUSH
40506: PPUSH
40507: PPUSH
40508: PPUSH
40509: PPUSH
40510: PPUSH
40511: PPUSH
40512: PPUSH
40513: PPUSH
40514: PPUSH
40515: PPUSH
40516: PPUSH
40517: PPUSH
40518: PPUSH
40519: PPUSH
40520: PPUSH
40521: PPUSH
40522: PPUSH
40523: PPUSH
40524: PPUSH
40525: PPUSH
40526: PPUSH
40527: PPUSH
40528: PPUSH
40529: PPUSH
40530: PPUSH
40531: PPUSH
40532: PPUSH
40533: PPUSH
40534: PPUSH
40535: PPUSH
40536: PPUSH
40537: PPUSH
40538: PPUSH
40539: PPUSH
40540: PPUSH
40541: PPUSH
40542: PPUSH
40543: PPUSH
40544: PPUSH
40545: PPUSH
40546: PPUSH
40547: PPUSH
40548: PPUSH
40549: PPUSH
40550: PPUSH
40551: PPUSH
40552: PPUSH
40553: PPUSH
40554: PPUSH
40555: PPUSH
40556: PPUSH
40557: PPUSH
40558: PPUSH
40559: PPUSH
40560: PPUSH
40561: PPUSH
// result = [ ] ;
40562: LD_ADDR_VAR 0 7
40566: PUSH
40567: EMPTY
40568: ST_TO_ADDR
// temp_list = [ ] ;
40569: LD_ADDR_VAR 0 9
40573: PUSH
40574: EMPTY
40575: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40576: LD_VAR 0 4
40580: PUSH
40581: LD_INT 0
40583: PUSH
40584: LD_INT 1
40586: PUSH
40587: LD_INT 2
40589: PUSH
40590: LD_INT 3
40592: PUSH
40593: LD_INT 4
40595: PUSH
40596: LD_INT 5
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: IN
40607: NOT
40608: PUSH
40609: LD_VAR 0 1
40613: PUSH
40614: LD_INT 0
40616: PUSH
40617: LD_INT 1
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: IN
40624: PUSH
40625: LD_VAR 0 5
40629: PUSH
40630: LD_INT 1
40632: PUSH
40633: LD_INT 2
40635: PUSH
40636: LD_INT 3
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: LIST
40643: IN
40644: NOT
40645: AND
40646: OR
40647: IFFALSE 40651
// exit ;
40649: GO 59042
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40651: LD_VAR 0 1
40655: PUSH
40656: LD_INT 6
40658: PUSH
40659: LD_INT 7
40661: PUSH
40662: LD_INT 8
40664: PUSH
40665: LD_INT 13
40667: PUSH
40668: LD_INT 12
40670: PUSH
40671: LD_INT 15
40673: PUSH
40674: LD_INT 11
40676: PUSH
40677: LD_INT 14
40679: PUSH
40680: LD_INT 10
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: LIST
40687: LIST
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: IN
40694: IFFALSE 40704
// btype = b_lab ;
40696: LD_ADDR_VAR 0 1
40700: PUSH
40701: LD_INT 6
40703: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40704: LD_VAR 0 6
40708: PUSH
40709: LD_INT 0
40711: PUSH
40712: LD_INT 1
40714: PUSH
40715: LD_INT 2
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: LIST
40722: IN
40723: NOT
40724: PUSH
40725: LD_VAR 0 1
40729: PUSH
40730: LD_INT 0
40732: PUSH
40733: LD_INT 1
40735: PUSH
40736: LD_INT 2
40738: PUSH
40739: LD_INT 3
40741: PUSH
40742: LD_INT 6
40744: PUSH
40745: LD_INT 36
40747: PUSH
40748: LD_INT 4
40750: PUSH
40751: LD_INT 5
40753: PUSH
40754: LD_INT 31
40756: PUSH
40757: LD_INT 32
40759: PUSH
40760: LD_INT 33
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: IN
40776: NOT
40777: PUSH
40778: LD_VAR 0 6
40782: PUSH
40783: LD_INT 1
40785: EQUAL
40786: AND
40787: OR
40788: PUSH
40789: LD_VAR 0 1
40793: PUSH
40794: LD_INT 2
40796: PUSH
40797: LD_INT 3
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: IN
40804: NOT
40805: PUSH
40806: LD_VAR 0 6
40810: PUSH
40811: LD_INT 2
40813: EQUAL
40814: AND
40815: OR
40816: IFFALSE 40826
// mode = 0 ;
40818: LD_ADDR_VAR 0 6
40822: PUSH
40823: LD_INT 0
40825: ST_TO_ADDR
// case mode of 0 :
40826: LD_VAR 0 6
40830: PUSH
40831: LD_INT 0
40833: DOUBLE
40834: EQUAL
40835: IFTRUE 40839
40837: GO 52292
40839: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40840: LD_ADDR_VAR 0 11
40844: PUSH
40845: LD_INT 0
40847: PUSH
40848: LD_INT 0
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: LD_INT 0
40857: PUSH
40858: LD_INT 1
40860: NEG
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: LD_INT 1
40868: PUSH
40869: LD_INT 0
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 1
40878: PUSH
40879: LD_INT 1
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 0
40888: PUSH
40889: LD_INT 1
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 1
40898: NEG
40899: PUSH
40900: LD_INT 0
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 1
40909: NEG
40910: PUSH
40911: LD_INT 1
40913: NEG
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: LD_INT 1
40921: NEG
40922: PUSH
40923: LD_INT 2
40925: NEG
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 0
40933: PUSH
40934: LD_INT 2
40936: NEG
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: PUSH
40942: LD_INT 1
40944: PUSH
40945: LD_INT 1
40947: NEG
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: LD_INT 1
40955: PUSH
40956: LD_INT 2
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: LD_INT 0
40965: PUSH
40966: LD_INT 2
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: LD_INT 1
40975: NEG
40976: PUSH
40977: LD_INT 1
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: PUSH
40984: LD_INT 1
40986: PUSH
40987: LD_INT 3
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 0
40996: PUSH
40997: LD_INT 3
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 1
41006: NEG
41007: PUSH
41008: LD_INT 2
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41033: LD_ADDR_VAR 0 12
41037: PUSH
41038: LD_INT 0
41040: PUSH
41041: LD_INT 0
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 0
41050: PUSH
41051: LD_INT 1
41053: NEG
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: LD_INT 1
41061: PUSH
41062: LD_INT 0
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: LD_INT 1
41071: PUSH
41072: LD_INT 1
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 0
41081: PUSH
41082: LD_INT 1
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 1
41091: NEG
41092: PUSH
41093: LD_INT 0
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 1
41102: NEG
41103: PUSH
41104: LD_INT 1
41106: NEG
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 1
41114: PUSH
41115: LD_INT 1
41117: NEG
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PUSH
41123: LD_INT 2
41125: PUSH
41126: LD_INT 0
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 2
41135: PUSH
41136: LD_INT 1
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: LD_INT 1
41145: NEG
41146: PUSH
41147: LD_INT 1
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: LD_INT 2
41156: NEG
41157: PUSH
41158: LD_INT 0
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: LD_INT 2
41167: NEG
41168: PUSH
41169: LD_INT 1
41171: NEG
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: PUSH
41177: LD_INT 2
41179: NEG
41180: PUSH
41181: LD_INT 1
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: PUSH
41188: LD_INT 3
41190: NEG
41191: PUSH
41192: LD_INT 0
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 3
41201: NEG
41202: PUSH
41203: LD_INT 1
41205: NEG
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41229: LD_ADDR_VAR 0 13
41233: PUSH
41234: LD_INT 0
41236: PUSH
41237: LD_INT 0
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 0
41246: PUSH
41247: LD_INT 1
41249: NEG
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PUSH
41255: LD_INT 1
41257: PUSH
41258: LD_INT 0
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: PUSH
41265: LD_INT 1
41267: PUSH
41268: LD_INT 1
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 0
41277: PUSH
41278: LD_INT 1
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 1
41287: NEG
41288: PUSH
41289: LD_INT 0
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 1
41298: NEG
41299: PUSH
41300: LD_INT 1
41302: NEG
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 1
41310: NEG
41311: PUSH
41312: LD_INT 2
41314: NEG
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 2
41322: PUSH
41323: LD_INT 1
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 2
41332: PUSH
41333: LD_INT 2
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 1
41342: PUSH
41343: LD_INT 2
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 2
41352: NEG
41353: PUSH
41354: LD_INT 1
41356: NEG
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 2
41364: NEG
41365: PUSH
41366: LD_INT 2
41368: NEG
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 2
41376: NEG
41377: PUSH
41378: LD_INT 3
41380: NEG
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 3
41388: NEG
41389: PUSH
41390: LD_INT 2
41392: NEG
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 3
41400: NEG
41401: PUSH
41402: LD_INT 3
41404: NEG
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41428: LD_ADDR_VAR 0 14
41432: PUSH
41433: LD_INT 0
41435: PUSH
41436: LD_INT 0
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 0
41445: PUSH
41446: LD_INT 1
41448: NEG
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 1
41456: PUSH
41457: LD_INT 0
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 1
41466: PUSH
41467: LD_INT 1
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 0
41476: PUSH
41477: LD_INT 1
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 1
41486: NEG
41487: PUSH
41488: LD_INT 0
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PUSH
41495: LD_INT 1
41497: NEG
41498: PUSH
41499: LD_INT 1
41501: NEG
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: LD_INT 1
41509: NEG
41510: PUSH
41511: LD_INT 2
41513: NEG
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PUSH
41519: LD_INT 0
41521: PUSH
41522: LD_INT 2
41524: NEG
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: PUSH
41530: LD_INT 1
41532: PUSH
41533: LD_INT 1
41535: NEG
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: PUSH
41541: LD_INT 1
41543: PUSH
41544: LD_INT 2
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: PUSH
41551: LD_INT 0
41553: PUSH
41554: LD_INT 2
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 1
41563: NEG
41564: PUSH
41565: LD_INT 1
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: LD_INT 1
41574: NEG
41575: PUSH
41576: LD_INT 3
41578: NEG
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 0
41586: PUSH
41587: LD_INT 3
41589: NEG
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 1
41597: PUSH
41598: LD_INT 2
41600: NEG
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: LIST
41619: LIST
41620: LIST
41621: LIST
41622: LIST
41623: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41624: LD_ADDR_VAR 0 15
41628: PUSH
41629: LD_INT 0
41631: PUSH
41632: LD_INT 0
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: LD_INT 0
41641: PUSH
41642: LD_INT 1
41644: NEG
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 1
41652: PUSH
41653: LD_INT 0
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 1
41662: PUSH
41663: LD_INT 1
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 0
41672: PUSH
41673: LD_INT 1
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 1
41682: NEG
41683: PUSH
41684: LD_INT 0
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 1
41693: NEG
41694: PUSH
41695: LD_INT 1
41697: NEG
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 1
41705: PUSH
41706: LD_INT 1
41708: NEG
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 2
41716: PUSH
41717: LD_INT 0
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 2
41726: PUSH
41727: LD_INT 1
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 1
41736: NEG
41737: PUSH
41738: LD_INT 1
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 2
41747: NEG
41748: PUSH
41749: LD_INT 0
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: LD_INT 2
41758: NEG
41759: PUSH
41760: LD_INT 1
41762: NEG
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 2
41770: PUSH
41771: LD_INT 1
41773: NEG
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 3
41781: PUSH
41782: LD_INT 0
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 3
41791: PUSH
41792: LD_INT 1
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41817: LD_ADDR_VAR 0 16
41821: PUSH
41822: LD_INT 0
41824: PUSH
41825: LD_INT 0
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 0
41834: PUSH
41835: LD_INT 1
41837: NEG
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: PUSH
41843: LD_INT 1
41845: PUSH
41846: LD_INT 0
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 1
41855: PUSH
41856: LD_INT 1
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_INT 0
41865: PUSH
41866: LD_INT 1
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 1
41875: NEG
41876: PUSH
41877: LD_INT 0
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: PUSH
41884: LD_INT 1
41886: NEG
41887: PUSH
41888: LD_INT 1
41890: NEG
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: PUSH
41896: LD_INT 1
41898: NEG
41899: PUSH
41900: LD_INT 2
41902: NEG
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 2
41910: PUSH
41911: LD_INT 1
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 2
41920: PUSH
41921: LD_INT 2
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 1
41930: PUSH
41931: LD_INT 2
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 2
41940: NEG
41941: PUSH
41942: LD_INT 1
41944: NEG
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 2
41952: NEG
41953: PUSH
41954: LD_INT 2
41956: NEG
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 3
41964: PUSH
41965: LD_INT 2
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 3
41974: PUSH
41975: LD_INT 3
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 2
41984: PUSH
41985: LD_INT 3
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42010: LD_ADDR_VAR 0 17
42014: PUSH
42015: LD_INT 0
42017: PUSH
42018: LD_INT 0
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 0
42027: PUSH
42028: LD_INT 1
42030: NEG
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 1
42038: PUSH
42039: LD_INT 0
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 1
42048: PUSH
42049: LD_INT 1
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: LD_INT 0
42058: PUSH
42059: LD_INT 1
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: PUSH
42066: LD_INT 1
42068: NEG
42069: PUSH
42070: LD_INT 0
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: LD_INT 1
42079: NEG
42080: PUSH
42081: LD_INT 1
42083: NEG
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 1
42091: NEG
42092: PUSH
42093: LD_INT 2
42095: NEG
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 0
42103: PUSH
42104: LD_INT 2
42106: NEG
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: PUSH
42112: LD_INT 1
42114: PUSH
42115: LD_INT 1
42117: NEG
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: LD_INT 2
42125: PUSH
42126: LD_INT 0
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: LD_INT 2
42135: PUSH
42136: LD_INT 1
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: LD_INT 2
42145: PUSH
42146: LD_INT 2
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 1
42155: PUSH
42156: LD_INT 2
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: LD_INT 0
42165: PUSH
42166: LD_INT 2
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PUSH
42173: LD_INT 1
42175: NEG
42176: PUSH
42177: LD_INT 1
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 2
42186: NEG
42187: PUSH
42188: LD_INT 0
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 2
42197: NEG
42198: PUSH
42199: LD_INT 1
42201: NEG
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: LD_INT 2
42209: NEG
42210: PUSH
42211: LD_INT 2
42213: NEG
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42240: LD_ADDR_VAR 0 18
42244: PUSH
42245: LD_INT 0
42247: PUSH
42248: LD_INT 0
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: LD_INT 0
42257: PUSH
42258: LD_INT 1
42260: NEG
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 1
42268: PUSH
42269: LD_INT 0
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 1
42278: PUSH
42279: LD_INT 1
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: LD_INT 0
42288: PUSH
42289: LD_INT 1
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 1
42298: NEG
42299: PUSH
42300: LD_INT 0
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: LD_INT 1
42309: NEG
42310: PUSH
42311: LD_INT 1
42313: NEG
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 1
42321: NEG
42322: PUSH
42323: LD_INT 2
42325: NEG
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 0
42333: PUSH
42334: LD_INT 2
42336: NEG
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 1
42344: PUSH
42345: LD_INT 1
42347: NEG
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: LD_INT 2
42355: PUSH
42356: LD_INT 0
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 2
42365: PUSH
42366: LD_INT 1
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 2
42375: PUSH
42376: LD_INT 2
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 1
42385: PUSH
42386: LD_INT 2
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 0
42395: PUSH
42396: LD_INT 2
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 1
42405: NEG
42406: PUSH
42407: LD_INT 1
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 2
42416: NEG
42417: PUSH
42418: LD_INT 0
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 2
42427: NEG
42428: PUSH
42429: LD_INT 1
42431: NEG
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 2
42439: NEG
42440: PUSH
42441: LD_INT 2
42443: NEG
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42470: LD_ADDR_VAR 0 19
42474: PUSH
42475: LD_INT 0
42477: PUSH
42478: LD_INT 0
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 0
42487: PUSH
42488: LD_INT 1
42490: NEG
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: PUSH
42496: LD_INT 1
42498: PUSH
42499: LD_INT 0
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 1
42508: PUSH
42509: LD_INT 1
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 0
42518: PUSH
42519: LD_INT 1
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 1
42528: NEG
42529: PUSH
42530: LD_INT 0
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: PUSH
42537: LD_INT 1
42539: NEG
42540: PUSH
42541: LD_INT 1
42543: NEG
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 1
42551: NEG
42552: PUSH
42553: LD_INT 2
42555: NEG
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 0
42563: PUSH
42564: LD_INT 2
42566: NEG
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: PUSH
42572: LD_INT 1
42574: PUSH
42575: LD_INT 1
42577: NEG
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 2
42585: PUSH
42586: LD_INT 0
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 2
42595: PUSH
42596: LD_INT 1
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 2
42605: PUSH
42606: LD_INT 2
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 1
42615: PUSH
42616: LD_INT 2
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 0
42625: PUSH
42626: LD_INT 2
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 1
42635: NEG
42636: PUSH
42637: LD_INT 1
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 2
42646: NEG
42647: PUSH
42648: LD_INT 0
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 2
42657: NEG
42658: PUSH
42659: LD_INT 1
42661: NEG
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 2
42669: NEG
42670: PUSH
42671: LD_INT 2
42673: NEG
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42700: LD_ADDR_VAR 0 20
42704: PUSH
42705: LD_INT 0
42707: PUSH
42708: LD_INT 0
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 0
42717: PUSH
42718: LD_INT 1
42720: NEG
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_INT 1
42728: PUSH
42729: LD_INT 0
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 1
42738: PUSH
42739: LD_INT 1
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 0
42748: PUSH
42749: LD_INT 1
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 1
42758: NEG
42759: PUSH
42760: LD_INT 0
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 1
42769: NEG
42770: PUSH
42771: LD_INT 1
42773: NEG
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 1
42781: NEG
42782: PUSH
42783: LD_INT 2
42785: NEG
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 0
42793: PUSH
42794: LD_INT 2
42796: NEG
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: LD_INT 1
42804: PUSH
42805: LD_INT 1
42807: NEG
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 2
42815: PUSH
42816: LD_INT 0
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 2
42825: PUSH
42826: LD_INT 1
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 2
42835: PUSH
42836: LD_INT 2
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 1
42845: PUSH
42846: LD_INT 2
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 0
42855: PUSH
42856: LD_INT 2
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 1
42865: NEG
42866: PUSH
42867: LD_INT 1
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 2
42876: NEG
42877: PUSH
42878: LD_INT 0
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 2
42887: NEG
42888: PUSH
42889: LD_INT 1
42891: NEG
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 2
42899: NEG
42900: PUSH
42901: LD_INT 2
42903: NEG
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42930: LD_ADDR_VAR 0 21
42934: PUSH
42935: LD_INT 0
42937: PUSH
42938: LD_INT 0
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 0
42947: PUSH
42948: LD_INT 1
42950: NEG
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 1
42958: PUSH
42959: LD_INT 0
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 1
42968: PUSH
42969: LD_INT 1
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 0
42978: PUSH
42979: LD_INT 1
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 1
42988: NEG
42989: PUSH
42990: LD_INT 0
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 1
42999: NEG
43000: PUSH
43001: LD_INT 1
43003: NEG
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 1
43011: NEG
43012: PUSH
43013: LD_INT 2
43015: NEG
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 0
43023: PUSH
43024: LD_INT 2
43026: NEG
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 1
43034: PUSH
43035: LD_INT 1
43037: NEG
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: LD_INT 2
43045: PUSH
43046: LD_INT 0
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 2
43055: PUSH
43056: LD_INT 1
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 2
43065: PUSH
43066: LD_INT 2
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 1
43075: PUSH
43076: LD_INT 2
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 0
43085: PUSH
43086: LD_INT 2
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 1
43095: NEG
43096: PUSH
43097: LD_INT 1
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 2
43106: NEG
43107: PUSH
43108: LD_INT 0
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 2
43117: NEG
43118: PUSH
43119: LD_INT 1
43121: NEG
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 2
43129: NEG
43130: PUSH
43131: LD_INT 2
43133: NEG
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: LIST
43143: LIST
43144: LIST
43145: LIST
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: LIST
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43160: LD_ADDR_VAR 0 22
43164: PUSH
43165: LD_INT 0
43167: PUSH
43168: LD_INT 0
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 0
43177: PUSH
43178: LD_INT 1
43180: NEG
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 1
43188: PUSH
43189: LD_INT 0
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 1
43198: PUSH
43199: LD_INT 1
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 0
43208: PUSH
43209: LD_INT 1
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 1
43218: NEG
43219: PUSH
43220: LD_INT 0
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 1
43229: NEG
43230: PUSH
43231: LD_INT 1
43233: NEG
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 1
43241: NEG
43242: PUSH
43243: LD_INT 2
43245: NEG
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 0
43253: PUSH
43254: LD_INT 2
43256: NEG
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 1
43264: PUSH
43265: LD_INT 1
43267: NEG
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 2
43275: PUSH
43276: LD_INT 0
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 2
43285: PUSH
43286: LD_INT 1
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 2
43295: PUSH
43296: LD_INT 2
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 1
43305: PUSH
43306: LD_INT 2
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 0
43315: PUSH
43316: LD_INT 2
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 1
43325: NEG
43326: PUSH
43327: LD_INT 1
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 2
43336: NEG
43337: PUSH
43338: LD_INT 0
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 2
43347: NEG
43348: PUSH
43349: LD_INT 1
43351: NEG
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 2
43359: NEG
43360: PUSH
43361: LD_INT 2
43363: NEG
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43390: LD_ADDR_VAR 0 23
43394: PUSH
43395: LD_INT 0
43397: PUSH
43398: LD_INT 0
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 0
43407: PUSH
43408: LD_INT 1
43410: NEG
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 1
43418: PUSH
43419: LD_INT 0
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 1
43428: PUSH
43429: LD_INT 1
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 0
43438: PUSH
43439: LD_INT 1
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 1
43448: NEG
43449: PUSH
43450: LD_INT 0
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 1
43459: NEG
43460: PUSH
43461: LD_INT 1
43463: NEG
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 1
43471: NEG
43472: PUSH
43473: LD_INT 2
43475: NEG
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 0
43483: PUSH
43484: LD_INT 2
43486: NEG
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 1
43494: PUSH
43495: LD_INT 1
43497: NEG
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 2
43505: PUSH
43506: LD_INT 0
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 2
43515: PUSH
43516: LD_INT 1
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 2
43525: PUSH
43526: LD_INT 2
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 1
43535: PUSH
43536: LD_INT 2
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 0
43545: PUSH
43546: LD_INT 2
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 1
43555: NEG
43556: PUSH
43557: LD_INT 1
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 2
43566: NEG
43567: PUSH
43568: LD_INT 0
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 2
43577: NEG
43578: PUSH
43579: LD_INT 1
43581: NEG
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 2
43589: NEG
43590: PUSH
43591: LD_INT 2
43593: NEG
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 2
43601: NEG
43602: PUSH
43603: LD_INT 3
43605: NEG
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 1
43613: NEG
43614: PUSH
43615: LD_INT 3
43617: NEG
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 1
43625: PUSH
43626: LD_INT 2
43628: NEG
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 2
43636: PUSH
43637: LD_INT 1
43639: NEG
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43670: LD_ADDR_VAR 0 24
43674: PUSH
43675: LD_INT 0
43677: PUSH
43678: LD_INT 0
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: LD_INT 0
43687: PUSH
43688: LD_INT 1
43690: NEG
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PUSH
43696: LD_INT 1
43698: PUSH
43699: LD_INT 0
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: LD_INT 1
43708: PUSH
43709: LD_INT 1
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 0
43718: PUSH
43719: LD_INT 1
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 1
43728: NEG
43729: PUSH
43730: LD_INT 0
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 1
43739: NEG
43740: PUSH
43741: LD_INT 1
43743: NEG
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 1
43751: NEG
43752: PUSH
43753: LD_INT 2
43755: NEG
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 0
43763: PUSH
43764: LD_INT 2
43766: NEG
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 1
43774: PUSH
43775: LD_INT 1
43777: NEG
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 2
43785: PUSH
43786: LD_INT 0
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 2
43795: PUSH
43796: LD_INT 1
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 2
43805: PUSH
43806: LD_INT 2
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: LD_INT 1
43815: PUSH
43816: LD_INT 2
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 0
43825: PUSH
43826: LD_INT 2
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 1
43835: NEG
43836: PUSH
43837: LD_INT 1
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 2
43846: NEG
43847: PUSH
43848: LD_INT 0
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 2
43857: NEG
43858: PUSH
43859: LD_INT 1
43861: NEG
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 2
43869: NEG
43870: PUSH
43871: LD_INT 2
43873: NEG
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 1
43881: PUSH
43882: LD_INT 2
43884: NEG
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 2
43892: PUSH
43893: LD_INT 1
43895: NEG
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 3
43903: PUSH
43904: LD_INT 1
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 3
43913: PUSH
43914: LD_INT 2
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43946: LD_ADDR_VAR 0 25
43950: PUSH
43951: LD_INT 0
43953: PUSH
43954: LD_INT 0
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 0
43963: PUSH
43964: LD_INT 1
43966: NEG
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: LD_INT 1
43974: PUSH
43975: LD_INT 0
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 1
43984: PUSH
43985: LD_INT 1
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 0
43994: PUSH
43995: LD_INT 1
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 1
44004: NEG
44005: PUSH
44006: LD_INT 0
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 1
44015: NEG
44016: PUSH
44017: LD_INT 1
44019: NEG
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 1
44027: NEG
44028: PUSH
44029: LD_INT 2
44031: NEG
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 0
44039: PUSH
44040: LD_INT 2
44042: NEG
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: LD_INT 1
44050: PUSH
44051: LD_INT 1
44053: NEG
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 2
44061: PUSH
44062: LD_INT 0
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 2
44071: PUSH
44072: LD_INT 1
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 2
44081: PUSH
44082: LD_INT 2
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 1
44091: PUSH
44092: LD_INT 2
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 0
44101: PUSH
44102: LD_INT 2
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 1
44111: NEG
44112: PUSH
44113: LD_INT 1
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 2
44122: NEG
44123: PUSH
44124: LD_INT 0
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 2
44133: NEG
44134: PUSH
44135: LD_INT 1
44137: NEG
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 2
44145: NEG
44146: PUSH
44147: LD_INT 2
44149: NEG
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: LD_INT 3
44157: PUSH
44158: LD_INT 1
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PUSH
44165: LD_INT 3
44167: PUSH
44168: LD_INT 2
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: LD_INT 2
44177: PUSH
44178: LD_INT 3
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 1
44187: PUSH
44188: LD_INT 3
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44220: LD_ADDR_VAR 0 26
44224: PUSH
44225: LD_INT 0
44227: PUSH
44228: LD_INT 0
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 0
44237: PUSH
44238: LD_INT 1
44240: NEG
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 1
44248: PUSH
44249: LD_INT 0
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 1
44258: PUSH
44259: LD_INT 1
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 0
44268: PUSH
44269: LD_INT 1
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 1
44278: NEG
44279: PUSH
44280: LD_INT 0
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 1
44289: NEG
44290: PUSH
44291: LD_INT 1
44293: NEG
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 1
44301: NEG
44302: PUSH
44303: LD_INT 2
44305: NEG
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 0
44313: PUSH
44314: LD_INT 2
44316: NEG
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 1
44324: PUSH
44325: LD_INT 1
44327: NEG
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 2
44335: PUSH
44336: LD_INT 0
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 2
44345: PUSH
44346: LD_INT 1
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 2
44355: PUSH
44356: LD_INT 2
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 1
44365: PUSH
44366: LD_INT 2
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 0
44375: PUSH
44376: LD_INT 2
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 1
44385: NEG
44386: PUSH
44387: LD_INT 1
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: LD_INT 2
44396: NEG
44397: PUSH
44398: LD_INT 0
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: LD_INT 2
44407: NEG
44408: PUSH
44409: LD_INT 1
44411: NEG
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 2
44419: NEG
44420: PUSH
44421: LD_INT 2
44423: NEG
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 2
44431: PUSH
44432: LD_INT 3
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 1
44441: PUSH
44442: LD_INT 3
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 1
44451: NEG
44452: PUSH
44453: LD_INT 2
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 2
44462: NEG
44463: PUSH
44464: LD_INT 1
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44496: LD_ADDR_VAR 0 27
44500: PUSH
44501: LD_INT 0
44503: PUSH
44504: LD_INT 0
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 0
44513: PUSH
44514: LD_INT 1
44516: NEG
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 1
44524: PUSH
44525: LD_INT 0
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 1
44534: PUSH
44535: LD_INT 1
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 0
44544: PUSH
44545: LD_INT 1
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: LD_INT 1
44554: NEG
44555: PUSH
44556: LD_INT 0
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 1
44565: NEG
44566: PUSH
44567: LD_INT 1
44569: NEG
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 1
44577: NEG
44578: PUSH
44579: LD_INT 2
44581: NEG
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 0
44589: PUSH
44590: LD_INT 2
44592: NEG
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 1
44600: PUSH
44601: LD_INT 1
44603: NEG
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 2
44611: PUSH
44612: LD_INT 0
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 2
44621: PUSH
44622: LD_INT 1
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 2
44631: PUSH
44632: LD_INT 2
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 1
44641: PUSH
44642: LD_INT 2
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 0
44651: PUSH
44652: LD_INT 2
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 1
44661: NEG
44662: PUSH
44663: LD_INT 1
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 2
44672: NEG
44673: PUSH
44674: LD_INT 0
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 2
44683: NEG
44684: PUSH
44685: LD_INT 1
44687: NEG
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 2
44695: NEG
44696: PUSH
44697: LD_INT 2
44699: NEG
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 1
44707: NEG
44708: PUSH
44709: LD_INT 2
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 2
44718: NEG
44719: PUSH
44720: LD_INT 1
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 3
44729: NEG
44730: PUSH
44731: LD_INT 1
44733: NEG
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 3
44741: NEG
44742: PUSH
44743: LD_INT 2
44745: NEG
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44776: LD_ADDR_VAR 0 28
44780: PUSH
44781: LD_INT 0
44783: PUSH
44784: LD_INT 0
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: LD_INT 1
44796: NEG
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: LD_INT 1
44804: PUSH
44805: LD_INT 0
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 1
44814: PUSH
44815: LD_INT 1
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 0
44824: PUSH
44825: LD_INT 1
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 1
44834: NEG
44835: PUSH
44836: LD_INT 0
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 1
44845: NEG
44846: PUSH
44847: LD_INT 1
44849: NEG
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 1
44857: NEG
44858: PUSH
44859: LD_INT 2
44861: NEG
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 0
44869: PUSH
44870: LD_INT 2
44872: NEG
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 1
44880: PUSH
44881: LD_INT 1
44883: NEG
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 2
44891: PUSH
44892: LD_INT 0
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 2
44901: PUSH
44902: LD_INT 1
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 2
44911: PUSH
44912: LD_INT 2
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 1
44921: PUSH
44922: LD_INT 2
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 0
44931: PUSH
44932: LD_INT 2
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 1
44941: NEG
44942: PUSH
44943: LD_INT 1
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 2
44952: NEG
44953: PUSH
44954: LD_INT 0
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 2
44963: NEG
44964: PUSH
44965: LD_INT 1
44967: NEG
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 2
44975: NEG
44976: PUSH
44977: LD_INT 2
44979: NEG
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: LD_INT 2
44987: NEG
44988: PUSH
44989: LD_INT 3
44991: NEG
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 1
44999: NEG
45000: PUSH
45001: LD_INT 3
45003: NEG
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 3
45011: NEG
45012: PUSH
45013: LD_INT 1
45015: NEG
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 3
45023: NEG
45024: PUSH
45025: LD_INT 2
45027: NEG
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45058: LD_ADDR_VAR 0 29
45062: PUSH
45063: LD_INT 0
45065: PUSH
45066: LD_INT 0
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 0
45075: PUSH
45076: LD_INT 1
45078: NEG
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 1
45086: PUSH
45087: LD_INT 0
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 1
45096: PUSH
45097: LD_INT 1
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 0
45106: PUSH
45107: LD_INT 1
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 1
45116: NEG
45117: PUSH
45118: LD_INT 0
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 1
45127: NEG
45128: PUSH
45129: LD_INT 1
45131: NEG
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 1
45139: NEG
45140: PUSH
45141: LD_INT 2
45143: NEG
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 0
45151: PUSH
45152: LD_INT 2
45154: NEG
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 1
45162: PUSH
45163: LD_INT 1
45165: NEG
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 2
45173: PUSH
45174: LD_INT 0
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 2
45183: PUSH
45184: LD_INT 1
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 1
45193: PUSH
45194: LD_INT 2
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 0
45203: PUSH
45204: LD_INT 2
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 1
45213: NEG
45214: PUSH
45215: LD_INT 1
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 2
45224: NEG
45225: PUSH
45226: LD_INT 1
45228: NEG
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 2
45236: NEG
45237: PUSH
45238: LD_INT 2
45240: NEG
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 2
45248: NEG
45249: PUSH
45250: LD_INT 3
45252: NEG
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 2
45260: PUSH
45261: LD_INT 1
45263: NEG
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 3
45271: PUSH
45272: LD_INT 1
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 1
45281: PUSH
45282: LD_INT 3
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 1
45291: NEG
45292: PUSH
45293: LD_INT 2
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 3
45302: NEG
45303: PUSH
45304: LD_INT 2
45306: NEG
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45337: LD_ADDR_VAR 0 30
45341: PUSH
45342: LD_INT 0
45344: PUSH
45345: LD_INT 0
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 0
45354: PUSH
45355: LD_INT 1
45357: NEG
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 1
45365: PUSH
45366: LD_INT 0
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 1
45375: PUSH
45376: LD_INT 1
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 0
45385: PUSH
45386: LD_INT 1
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PUSH
45393: LD_INT 1
45395: NEG
45396: PUSH
45397: LD_INT 0
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 1
45406: NEG
45407: PUSH
45408: LD_INT 1
45410: NEG
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 1
45418: NEG
45419: PUSH
45420: LD_INT 2
45422: NEG
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 0
45430: PUSH
45431: LD_INT 2
45433: NEG
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 1
45441: PUSH
45442: LD_INT 1
45444: NEG
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 2
45452: PUSH
45453: LD_INT 0
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 2
45462: PUSH
45463: LD_INT 1
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 2
45472: PUSH
45473: LD_INT 2
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 1
45482: PUSH
45483: LD_INT 2
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 1
45492: NEG
45493: PUSH
45494: LD_INT 1
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 2
45503: NEG
45504: PUSH
45505: LD_INT 0
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 2
45514: NEG
45515: PUSH
45516: LD_INT 1
45518: NEG
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 1
45526: NEG
45527: PUSH
45528: LD_INT 3
45530: NEG
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 1
45538: PUSH
45539: LD_INT 2
45541: NEG
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 3
45549: PUSH
45550: LD_INT 2
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 2
45559: PUSH
45560: LD_INT 3
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 2
45569: NEG
45570: PUSH
45571: LD_INT 1
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 3
45580: NEG
45581: PUSH
45582: LD_INT 1
45584: NEG
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45615: LD_ADDR_VAR 0 31
45619: PUSH
45620: LD_INT 0
45622: PUSH
45623: LD_INT 0
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 0
45632: PUSH
45633: LD_INT 1
45635: NEG
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 1
45643: PUSH
45644: LD_INT 0
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 1
45653: PUSH
45654: LD_INT 1
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 0
45663: PUSH
45664: LD_INT 1
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 1
45673: NEG
45674: PUSH
45675: LD_INT 0
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 1
45684: NEG
45685: PUSH
45686: LD_INT 1
45688: NEG
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 1
45696: NEG
45697: PUSH
45698: LD_INT 2
45700: NEG
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 1
45708: PUSH
45709: LD_INT 1
45711: NEG
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 2
45719: PUSH
45720: LD_INT 0
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 2
45729: PUSH
45730: LD_INT 1
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 2
45739: PUSH
45740: LD_INT 2
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 1
45749: PUSH
45750: LD_INT 2
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 0
45759: PUSH
45760: LD_INT 2
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 1
45769: NEG
45770: PUSH
45771: LD_INT 1
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 2
45780: NEG
45781: PUSH
45782: LD_INT 1
45784: NEG
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 2
45792: NEG
45793: PUSH
45794: LD_INT 2
45796: NEG
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 2
45804: NEG
45805: PUSH
45806: LD_INT 3
45808: NEG
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 2
45816: PUSH
45817: LD_INT 1
45819: NEG
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 3
45827: PUSH
45828: LD_INT 1
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 1
45837: PUSH
45838: LD_INT 3
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 1
45847: NEG
45848: PUSH
45849: LD_INT 2
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 3
45858: NEG
45859: PUSH
45860: LD_INT 2
45862: NEG
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45893: LD_ADDR_VAR 0 32
45897: PUSH
45898: LD_INT 0
45900: PUSH
45901: LD_INT 0
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 0
45910: PUSH
45911: LD_INT 1
45913: NEG
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 1
45921: PUSH
45922: LD_INT 0
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 1
45931: PUSH
45932: LD_INT 1
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 0
45941: PUSH
45942: LD_INT 1
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 1
45951: NEG
45952: PUSH
45953: LD_INT 0
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 1
45962: NEG
45963: PUSH
45964: LD_INT 1
45966: NEG
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 1
45974: NEG
45975: PUSH
45976: LD_INT 2
45978: NEG
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 0
45986: PUSH
45987: LD_INT 2
45989: NEG
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 1
45997: PUSH
45998: LD_INT 1
46000: NEG
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 2
46008: PUSH
46009: LD_INT 1
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 2
46018: PUSH
46019: LD_INT 2
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 1
46028: PUSH
46029: LD_INT 2
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 0
46038: PUSH
46039: LD_INT 2
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 1
46048: NEG
46049: PUSH
46050: LD_INT 1
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 2
46059: NEG
46060: PUSH
46061: LD_INT 0
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 2
46070: NEG
46071: PUSH
46072: LD_INT 1
46074: NEG
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 1
46082: NEG
46083: PUSH
46084: LD_INT 3
46086: NEG
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 1
46094: PUSH
46095: LD_INT 2
46097: NEG
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 3
46105: PUSH
46106: LD_INT 2
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 2
46115: PUSH
46116: LD_INT 3
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 2
46125: NEG
46126: PUSH
46127: LD_INT 1
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 3
46136: NEG
46137: PUSH
46138: LD_INT 1
46140: NEG
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46171: LD_ADDR_VAR 0 33
46175: PUSH
46176: LD_INT 0
46178: PUSH
46179: LD_INT 0
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 0
46188: PUSH
46189: LD_INT 1
46191: NEG
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 1
46199: PUSH
46200: LD_INT 0
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 1
46209: PUSH
46210: LD_INT 1
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 0
46219: PUSH
46220: LD_INT 1
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 1
46229: NEG
46230: PUSH
46231: LD_INT 0
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 1
46240: NEG
46241: PUSH
46242: LD_INT 1
46244: NEG
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 1
46252: NEG
46253: PUSH
46254: LD_INT 2
46256: NEG
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 1
46264: PUSH
46265: LD_INT 1
46267: NEG
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 2
46275: PUSH
46276: LD_INT 0
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 2
46285: PUSH
46286: LD_INT 1
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 1
46295: PUSH
46296: LD_INT 2
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 0
46305: PUSH
46306: LD_INT 2
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 1
46315: NEG
46316: PUSH
46317: LD_INT 1
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 2
46326: NEG
46327: PUSH
46328: LD_INT 0
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 2
46337: NEG
46338: PUSH
46339: LD_INT 1
46341: NEG
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 2
46349: NEG
46350: PUSH
46351: LD_INT 2
46353: NEG
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 2
46361: NEG
46362: PUSH
46363: LD_INT 3
46365: NEG
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 2
46373: PUSH
46374: LD_INT 1
46376: NEG
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 3
46384: PUSH
46385: LD_INT 1
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 1
46394: PUSH
46395: LD_INT 3
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 1
46404: NEG
46405: PUSH
46406: LD_INT 2
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 3
46415: NEG
46416: PUSH
46417: LD_INT 2
46419: NEG
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46450: LD_ADDR_VAR 0 34
46454: PUSH
46455: LD_INT 0
46457: PUSH
46458: LD_INT 0
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 0
46467: PUSH
46468: LD_INT 1
46470: NEG
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 1
46478: PUSH
46479: LD_INT 0
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 1
46488: PUSH
46489: LD_INT 1
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 0
46498: PUSH
46499: LD_INT 1
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 1
46508: NEG
46509: PUSH
46510: LD_INT 0
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 1
46519: NEG
46520: PUSH
46521: LD_INT 1
46523: NEG
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 1
46531: NEG
46532: PUSH
46533: LD_INT 2
46535: NEG
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 0
46543: PUSH
46544: LD_INT 2
46546: NEG
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 1
46554: PUSH
46555: LD_INT 1
46557: NEG
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 2
46565: PUSH
46566: LD_INT 1
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 2
46575: PUSH
46576: LD_INT 2
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 1
46585: PUSH
46586: LD_INT 2
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 1
46595: NEG
46596: PUSH
46597: LD_INT 1
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 2
46606: NEG
46607: PUSH
46608: LD_INT 0
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 2
46617: NEG
46618: PUSH
46619: LD_INT 1
46621: NEG
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 2
46629: NEG
46630: PUSH
46631: LD_INT 2
46633: NEG
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 1
46641: NEG
46642: PUSH
46643: LD_INT 3
46645: NEG
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 1
46653: PUSH
46654: LD_INT 2
46656: NEG
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 3
46664: PUSH
46665: LD_INT 2
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 2
46674: PUSH
46675: LD_INT 3
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 2
46684: NEG
46685: PUSH
46686: LD_INT 1
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 3
46695: NEG
46696: PUSH
46697: LD_INT 1
46699: NEG
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46730: LD_ADDR_VAR 0 35
46734: PUSH
46735: LD_INT 0
46737: PUSH
46738: LD_INT 0
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 0
46747: PUSH
46748: LD_INT 1
46750: NEG
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 1
46758: PUSH
46759: LD_INT 0
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 1
46768: PUSH
46769: LD_INT 1
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 0
46778: PUSH
46779: LD_INT 1
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 1
46788: NEG
46789: PUSH
46790: LD_INT 0
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 1
46799: NEG
46800: PUSH
46801: LD_INT 1
46803: NEG
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 2
46811: PUSH
46812: LD_INT 1
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 2
46821: NEG
46822: PUSH
46823: LD_INT 1
46825: NEG
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46842: LD_ADDR_VAR 0 36
46846: PUSH
46847: LD_INT 0
46849: PUSH
46850: LD_INT 0
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 0
46859: PUSH
46860: LD_INT 1
46862: NEG
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 1
46870: PUSH
46871: LD_INT 0
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 1
46880: PUSH
46881: LD_INT 1
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 0
46890: PUSH
46891: LD_INT 1
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 1
46900: NEG
46901: PUSH
46902: LD_INT 0
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 1
46911: NEG
46912: PUSH
46913: LD_INT 1
46915: NEG
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 1
46923: NEG
46924: PUSH
46925: LD_INT 2
46927: NEG
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 1
46935: PUSH
46936: LD_INT 2
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46954: LD_ADDR_VAR 0 37
46958: PUSH
46959: LD_INT 0
46961: PUSH
46962: LD_INT 0
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 0
46971: PUSH
46972: LD_INT 1
46974: NEG
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: LD_INT 1
46982: PUSH
46983: LD_INT 0
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 1
46992: PUSH
46993: LD_INT 1
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 0
47002: PUSH
47003: LD_INT 1
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 1
47012: NEG
47013: PUSH
47014: LD_INT 0
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 1
47023: NEG
47024: PUSH
47025: LD_INT 1
47027: NEG
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 1
47035: PUSH
47036: LD_INT 1
47038: NEG
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 1
47046: NEG
47047: PUSH
47048: LD_INT 1
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47066: LD_ADDR_VAR 0 38
47070: PUSH
47071: LD_INT 0
47073: PUSH
47074: LD_INT 0
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 0
47083: PUSH
47084: LD_INT 1
47086: NEG
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 1
47094: PUSH
47095: LD_INT 0
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 1
47104: PUSH
47105: LD_INT 1
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 0
47114: PUSH
47115: LD_INT 1
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 1
47124: NEG
47125: PUSH
47126: LD_INT 0
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 1
47135: NEG
47136: PUSH
47137: LD_INT 1
47139: NEG
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 2
47147: PUSH
47148: LD_INT 1
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 2
47157: NEG
47158: PUSH
47159: LD_INT 1
47161: NEG
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47178: LD_ADDR_VAR 0 39
47182: PUSH
47183: LD_INT 0
47185: PUSH
47186: LD_INT 0
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 0
47195: PUSH
47196: LD_INT 1
47198: NEG
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 1
47206: PUSH
47207: LD_INT 0
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 1
47216: PUSH
47217: LD_INT 1
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 0
47226: PUSH
47227: LD_INT 1
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 1
47236: NEG
47237: PUSH
47238: LD_INT 0
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 1
47247: NEG
47248: PUSH
47249: LD_INT 1
47251: NEG
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 1
47259: NEG
47260: PUSH
47261: LD_INT 2
47263: NEG
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 1
47271: PUSH
47272: LD_INT 2
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47290: LD_ADDR_VAR 0 40
47294: PUSH
47295: LD_INT 0
47297: PUSH
47298: LD_INT 0
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 0
47307: PUSH
47308: LD_INT 1
47310: NEG
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 1
47318: PUSH
47319: LD_INT 0
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 1
47328: PUSH
47329: LD_INT 1
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 0
47338: PUSH
47339: LD_INT 1
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 1
47348: NEG
47349: PUSH
47350: LD_INT 0
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 1
47359: NEG
47360: PUSH
47361: LD_INT 1
47363: NEG
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 1
47371: PUSH
47372: LD_INT 1
47374: NEG
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 1
47382: NEG
47383: PUSH
47384: LD_INT 1
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47402: LD_ADDR_VAR 0 41
47406: PUSH
47407: LD_INT 0
47409: PUSH
47410: LD_INT 0
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 0
47419: PUSH
47420: LD_INT 1
47422: NEG
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 1
47430: PUSH
47431: LD_INT 0
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 1
47440: PUSH
47441: LD_INT 1
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 0
47450: PUSH
47451: LD_INT 1
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 1
47460: NEG
47461: PUSH
47462: LD_INT 0
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 1
47471: NEG
47472: PUSH
47473: LD_INT 1
47475: NEG
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 1
47483: NEG
47484: PUSH
47485: LD_INT 2
47487: NEG
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 1
47495: PUSH
47496: LD_INT 1
47498: NEG
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 2
47506: PUSH
47507: LD_INT 0
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 2
47516: PUSH
47517: LD_INT 1
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 2
47526: PUSH
47527: LD_INT 2
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 1
47536: PUSH
47537: LD_INT 2
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 1
47546: NEG
47547: PUSH
47548: LD_INT 1
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 2
47557: NEG
47558: PUSH
47559: LD_INT 0
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 2
47568: NEG
47569: PUSH
47570: LD_INT 1
47572: NEG
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 2
47580: NEG
47581: PUSH
47582: LD_INT 2
47584: NEG
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 2
47592: NEG
47593: PUSH
47594: LD_INT 3
47596: NEG
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 2
47604: PUSH
47605: LD_INT 1
47607: NEG
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 3
47615: PUSH
47616: LD_INT 0
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 3
47625: PUSH
47626: LD_INT 1
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 3
47635: PUSH
47636: LD_INT 2
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 3
47645: PUSH
47646: LD_INT 3
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 2
47655: PUSH
47656: LD_INT 3
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 2
47665: NEG
47666: PUSH
47667: LD_INT 1
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 3
47676: NEG
47677: PUSH
47678: LD_INT 0
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 3
47687: NEG
47688: PUSH
47689: LD_INT 1
47691: NEG
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 3
47699: NEG
47700: PUSH
47701: LD_INT 2
47703: NEG
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 3
47711: NEG
47712: PUSH
47713: LD_INT 3
47715: NEG
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47752: LD_ADDR_VAR 0 42
47756: PUSH
47757: LD_INT 0
47759: PUSH
47760: LD_INT 0
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 0
47769: PUSH
47770: LD_INT 1
47772: NEG
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 1
47780: PUSH
47781: LD_INT 0
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 1
47790: PUSH
47791: LD_INT 1
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 0
47800: PUSH
47801: LD_INT 1
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 1
47810: NEG
47811: PUSH
47812: LD_INT 0
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 1
47821: NEG
47822: PUSH
47823: LD_INT 1
47825: NEG
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 1
47833: NEG
47834: PUSH
47835: LD_INT 2
47837: NEG
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 0
47845: PUSH
47846: LD_INT 2
47848: NEG
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 1
47856: PUSH
47857: LD_INT 1
47859: NEG
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 2
47867: PUSH
47868: LD_INT 1
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 2
47877: PUSH
47878: LD_INT 2
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 1
47887: PUSH
47888: LD_INT 2
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 0
47897: PUSH
47898: LD_INT 2
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 1
47907: NEG
47908: PUSH
47909: LD_INT 1
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 2
47918: NEG
47919: PUSH
47920: LD_INT 1
47922: NEG
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 2
47930: NEG
47931: PUSH
47932: LD_INT 2
47934: NEG
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 2
47942: NEG
47943: PUSH
47944: LD_INT 3
47946: NEG
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 1
47954: NEG
47955: PUSH
47956: LD_INT 3
47958: NEG
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 0
47966: PUSH
47967: LD_INT 3
47969: NEG
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 1
47977: PUSH
47978: LD_INT 2
47980: NEG
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 3
47988: PUSH
47989: LD_INT 2
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 3
47998: PUSH
47999: LD_INT 3
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 2
48008: PUSH
48009: LD_INT 3
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 1
48018: PUSH
48019: LD_INT 3
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 0
48028: PUSH
48029: LD_INT 3
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 1
48038: NEG
48039: PUSH
48040: LD_INT 2
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 3
48049: NEG
48050: PUSH
48051: LD_INT 2
48053: NEG
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 3
48061: NEG
48062: PUSH
48063: LD_INT 3
48065: NEG
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48102: LD_ADDR_VAR 0 43
48106: PUSH
48107: LD_INT 0
48109: PUSH
48110: LD_INT 0
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 0
48119: PUSH
48120: LD_INT 1
48122: NEG
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 1
48130: PUSH
48131: LD_INT 0
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 1
48140: PUSH
48141: LD_INT 1
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 0
48150: PUSH
48151: LD_INT 1
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 1
48160: NEG
48161: PUSH
48162: LD_INT 0
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 1
48171: NEG
48172: PUSH
48173: LD_INT 1
48175: NEG
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 1
48183: NEG
48184: PUSH
48185: LD_INT 2
48187: NEG
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 0
48195: PUSH
48196: LD_INT 2
48198: NEG
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 1
48206: PUSH
48207: LD_INT 1
48209: NEG
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 2
48217: PUSH
48218: LD_INT 0
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 2
48227: PUSH
48228: LD_INT 1
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 1
48237: PUSH
48238: LD_INT 2
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 0
48247: PUSH
48248: LD_INT 2
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 1
48257: NEG
48258: PUSH
48259: LD_INT 1
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 2
48268: NEG
48269: PUSH
48270: LD_INT 0
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 2
48279: NEG
48280: PUSH
48281: LD_INT 1
48283: NEG
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 1
48291: NEG
48292: PUSH
48293: LD_INT 3
48295: NEG
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 0
48303: PUSH
48304: LD_INT 3
48306: NEG
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 1
48314: PUSH
48315: LD_INT 2
48317: NEG
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 2
48325: PUSH
48326: LD_INT 1
48328: NEG
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 3
48336: PUSH
48337: LD_INT 0
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 3
48346: PUSH
48347: LD_INT 1
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 1
48356: PUSH
48357: LD_INT 3
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 0
48366: PUSH
48367: LD_INT 3
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 1
48376: NEG
48377: PUSH
48378: LD_INT 2
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 2
48387: NEG
48388: PUSH
48389: LD_INT 1
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 3
48398: NEG
48399: PUSH
48400: LD_INT 0
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 3
48409: NEG
48410: PUSH
48411: LD_INT 1
48413: NEG
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48450: LD_ADDR_VAR 0 44
48454: PUSH
48455: LD_INT 0
48457: PUSH
48458: LD_INT 0
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 0
48467: PUSH
48468: LD_INT 1
48470: NEG
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 1
48478: PUSH
48479: LD_INT 0
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 1
48488: PUSH
48489: LD_INT 1
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 0
48498: PUSH
48499: LD_INT 1
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 1
48508: NEG
48509: PUSH
48510: LD_INT 0
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 1
48519: NEG
48520: PUSH
48521: LD_INT 1
48523: NEG
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 1
48531: NEG
48532: PUSH
48533: LD_INT 2
48535: NEG
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 1
48543: PUSH
48544: LD_INT 1
48546: NEG
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 2
48554: PUSH
48555: LD_INT 0
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 2
48564: PUSH
48565: LD_INT 1
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 2
48574: PUSH
48575: LD_INT 2
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 1
48584: PUSH
48585: LD_INT 2
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 1
48594: NEG
48595: PUSH
48596: LD_INT 1
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 2
48605: NEG
48606: PUSH
48607: LD_INT 0
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 2
48616: NEG
48617: PUSH
48618: LD_INT 1
48620: NEG
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 2
48628: NEG
48629: PUSH
48630: LD_INT 2
48632: NEG
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 2
48640: NEG
48641: PUSH
48642: LD_INT 3
48644: NEG
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 2
48652: PUSH
48653: LD_INT 1
48655: NEG
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 3
48663: PUSH
48664: LD_INT 0
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 3
48673: PUSH
48674: LD_INT 1
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 3
48683: PUSH
48684: LD_INT 2
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 3
48693: PUSH
48694: LD_INT 3
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 2
48703: PUSH
48704: LD_INT 3
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 2
48713: NEG
48714: PUSH
48715: LD_INT 1
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 3
48724: NEG
48725: PUSH
48726: LD_INT 0
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 3
48735: NEG
48736: PUSH
48737: LD_INT 1
48739: NEG
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 3
48747: NEG
48748: PUSH
48749: LD_INT 2
48751: NEG
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 3
48759: NEG
48760: PUSH
48761: LD_INT 3
48763: NEG
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48800: LD_ADDR_VAR 0 45
48804: PUSH
48805: LD_INT 0
48807: PUSH
48808: LD_INT 0
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 0
48817: PUSH
48818: LD_INT 1
48820: NEG
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 1
48828: PUSH
48829: LD_INT 0
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 1
48838: PUSH
48839: LD_INT 1
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 0
48848: PUSH
48849: LD_INT 1
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 1
48858: NEG
48859: PUSH
48860: LD_INT 0
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 1
48869: NEG
48870: PUSH
48871: LD_INT 1
48873: NEG
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 1
48881: NEG
48882: PUSH
48883: LD_INT 2
48885: NEG
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 0
48893: PUSH
48894: LD_INT 2
48896: NEG
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 1
48904: PUSH
48905: LD_INT 1
48907: NEG
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 2
48915: PUSH
48916: LD_INT 1
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 2
48925: PUSH
48926: LD_INT 2
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 1
48935: PUSH
48936: LD_INT 2
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 0
48945: PUSH
48946: LD_INT 2
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 1
48955: NEG
48956: PUSH
48957: LD_INT 1
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 2
48966: NEG
48967: PUSH
48968: LD_INT 1
48970: NEG
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 2
48978: NEG
48979: PUSH
48980: LD_INT 2
48982: NEG
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 2
48990: NEG
48991: PUSH
48992: LD_INT 3
48994: NEG
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 1
49002: NEG
49003: PUSH
49004: LD_INT 3
49006: NEG
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 0
49014: PUSH
49015: LD_INT 3
49017: NEG
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 1
49025: PUSH
49026: LD_INT 2
49028: NEG
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 3
49036: PUSH
49037: LD_INT 2
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 3
49046: PUSH
49047: LD_INT 3
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 2
49056: PUSH
49057: LD_INT 3
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 1
49066: PUSH
49067: LD_INT 3
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 0
49076: PUSH
49077: LD_INT 3
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 1
49086: NEG
49087: PUSH
49088: LD_INT 2
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 3
49097: NEG
49098: PUSH
49099: LD_INT 2
49101: NEG
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 3
49109: NEG
49110: PUSH
49111: LD_INT 3
49113: NEG
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49150: LD_ADDR_VAR 0 46
49154: PUSH
49155: LD_INT 0
49157: PUSH
49158: LD_INT 0
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 0
49167: PUSH
49168: LD_INT 1
49170: NEG
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 1
49178: PUSH
49179: LD_INT 0
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 1
49188: PUSH
49189: LD_INT 1
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 0
49198: PUSH
49199: LD_INT 1
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 1
49208: NEG
49209: PUSH
49210: LD_INT 0
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 1
49219: NEG
49220: PUSH
49221: LD_INT 1
49223: NEG
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 1
49231: NEG
49232: PUSH
49233: LD_INT 2
49235: NEG
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 0
49243: PUSH
49244: LD_INT 2
49246: NEG
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 1
49254: PUSH
49255: LD_INT 1
49257: NEG
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 2
49265: PUSH
49266: LD_INT 0
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 2
49275: PUSH
49276: LD_INT 1
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 1
49285: PUSH
49286: LD_INT 2
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 0
49295: PUSH
49296: LD_INT 2
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 1
49305: NEG
49306: PUSH
49307: LD_INT 1
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 2
49316: NEG
49317: PUSH
49318: LD_INT 0
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 2
49327: NEG
49328: PUSH
49329: LD_INT 1
49331: NEG
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 1
49339: NEG
49340: PUSH
49341: LD_INT 3
49343: NEG
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 0
49351: PUSH
49352: LD_INT 3
49354: NEG
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 1
49362: PUSH
49363: LD_INT 2
49365: NEG
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 2
49373: PUSH
49374: LD_INT 1
49376: NEG
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 3
49384: PUSH
49385: LD_INT 0
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 3
49394: PUSH
49395: LD_INT 1
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 1
49404: PUSH
49405: LD_INT 3
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 0
49414: PUSH
49415: LD_INT 3
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 1
49424: NEG
49425: PUSH
49426: LD_INT 2
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 2
49435: NEG
49436: PUSH
49437: LD_INT 1
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 3
49446: NEG
49447: PUSH
49448: LD_INT 0
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 3
49457: NEG
49458: PUSH
49459: LD_INT 1
49461: NEG
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49498: LD_ADDR_VAR 0 47
49502: PUSH
49503: LD_INT 0
49505: PUSH
49506: LD_INT 0
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 0
49515: PUSH
49516: LD_INT 1
49518: NEG
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 1
49526: PUSH
49527: LD_INT 0
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 1
49536: PUSH
49537: LD_INT 1
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 0
49546: PUSH
49547: LD_INT 1
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 1
49556: NEG
49557: PUSH
49558: LD_INT 0
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 1
49567: NEG
49568: PUSH
49569: LD_INT 1
49571: NEG
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 1
49579: NEG
49580: PUSH
49581: LD_INT 2
49583: NEG
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 0
49591: PUSH
49592: LD_INT 2
49594: NEG
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 1
49602: PUSH
49603: LD_INT 1
49605: NEG
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 2
49613: NEG
49614: PUSH
49615: LD_INT 1
49617: NEG
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 2
49625: NEG
49626: PUSH
49627: LD_INT 2
49629: NEG
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49649: LD_ADDR_VAR 0 48
49653: PUSH
49654: LD_INT 0
49656: PUSH
49657: LD_INT 0
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 0
49666: PUSH
49667: LD_INT 1
49669: NEG
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 1
49677: PUSH
49678: LD_INT 0
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 1
49687: PUSH
49688: LD_INT 1
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 0
49697: PUSH
49698: LD_INT 1
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 1
49707: NEG
49708: PUSH
49709: LD_INT 0
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 1
49718: NEG
49719: PUSH
49720: LD_INT 1
49722: NEG
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 1
49730: NEG
49731: PUSH
49732: LD_INT 2
49734: NEG
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 0
49742: PUSH
49743: LD_INT 2
49745: NEG
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 1
49753: PUSH
49754: LD_INT 1
49756: NEG
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 2
49764: PUSH
49765: LD_INT 0
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 2
49774: PUSH
49775: LD_INT 1
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49796: LD_ADDR_VAR 0 49
49800: PUSH
49801: LD_INT 0
49803: PUSH
49804: LD_INT 0
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 0
49813: PUSH
49814: LD_INT 1
49816: NEG
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 1
49824: PUSH
49825: LD_INT 0
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 1
49834: PUSH
49835: LD_INT 1
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 0
49844: PUSH
49845: LD_INT 1
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 1
49854: NEG
49855: PUSH
49856: LD_INT 0
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 1
49865: NEG
49866: PUSH
49867: LD_INT 1
49869: NEG
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 1
49877: PUSH
49878: LD_INT 1
49880: NEG
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 2
49888: PUSH
49889: LD_INT 0
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 2
49898: PUSH
49899: LD_INT 1
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 2
49908: PUSH
49909: LD_INT 2
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 1
49918: PUSH
49919: LD_INT 2
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49940: LD_ADDR_VAR 0 50
49944: PUSH
49945: LD_INT 0
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 0
49957: PUSH
49958: LD_INT 1
49960: NEG
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 1
49968: PUSH
49969: LD_INT 0
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 1
49978: PUSH
49979: LD_INT 1
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 0
49988: PUSH
49989: LD_INT 1
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 1
49998: NEG
49999: PUSH
50000: LD_INT 0
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 1
50009: NEG
50010: PUSH
50011: LD_INT 1
50013: NEG
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 2
50021: PUSH
50022: LD_INT 1
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 2
50031: PUSH
50032: LD_INT 2
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 1
50041: PUSH
50042: LD_INT 2
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 0
50051: PUSH
50052: LD_INT 2
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 1
50061: NEG
50062: PUSH
50063: LD_INT 1
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50084: LD_ADDR_VAR 0 51
50088: PUSH
50089: LD_INT 0
50091: PUSH
50092: LD_INT 0
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 0
50101: PUSH
50102: LD_INT 1
50104: NEG
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 1
50112: PUSH
50113: LD_INT 0
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 1
50122: PUSH
50123: LD_INT 1
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 0
50132: PUSH
50133: LD_INT 1
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 1
50142: NEG
50143: PUSH
50144: LD_INT 0
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 1
50153: NEG
50154: PUSH
50155: LD_INT 1
50157: NEG
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 1
50165: PUSH
50166: LD_INT 2
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 0
50175: PUSH
50176: LD_INT 2
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 1
50185: NEG
50186: PUSH
50187: LD_INT 1
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 2
50196: NEG
50197: PUSH
50198: LD_INT 0
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 2
50207: NEG
50208: PUSH
50209: LD_INT 1
50211: NEG
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50231: LD_ADDR_VAR 0 52
50235: PUSH
50236: LD_INT 0
50238: PUSH
50239: LD_INT 0
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 0
50248: PUSH
50249: LD_INT 1
50251: NEG
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 1
50259: PUSH
50260: LD_INT 0
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 1
50269: PUSH
50270: LD_INT 1
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 0
50279: PUSH
50280: LD_INT 1
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 1
50289: NEG
50290: PUSH
50291: LD_INT 0
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 1
50300: NEG
50301: PUSH
50302: LD_INT 1
50304: NEG
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 1
50312: NEG
50313: PUSH
50314: LD_INT 2
50316: NEG
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 1
50324: NEG
50325: PUSH
50326: LD_INT 1
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 2
50335: NEG
50336: PUSH
50337: LD_INT 0
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 2
50346: NEG
50347: PUSH
50348: LD_INT 1
50350: NEG
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 2
50358: NEG
50359: PUSH
50360: LD_INT 2
50362: NEG
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50382: LD_ADDR_VAR 0 53
50386: PUSH
50387: LD_INT 0
50389: PUSH
50390: LD_INT 0
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 0
50399: PUSH
50400: LD_INT 1
50402: NEG
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 1
50410: PUSH
50411: LD_INT 0
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 1
50420: PUSH
50421: LD_INT 1
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 0
50430: PUSH
50431: LD_INT 1
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 1
50440: NEG
50441: PUSH
50442: LD_INT 0
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 1
50451: NEG
50452: PUSH
50453: LD_INT 1
50455: NEG
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 1
50463: NEG
50464: PUSH
50465: LD_INT 2
50467: NEG
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 0
50475: PUSH
50476: LD_INT 2
50478: NEG
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 1
50486: PUSH
50487: LD_INT 1
50489: NEG
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 2
50497: PUSH
50498: LD_INT 0
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 2
50507: PUSH
50508: LD_INT 1
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 2
50517: PUSH
50518: LD_INT 2
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 1
50527: PUSH
50528: LD_INT 2
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 0
50537: PUSH
50538: LD_INT 2
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 1
50547: NEG
50548: PUSH
50549: LD_INT 1
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 2
50558: NEG
50559: PUSH
50560: LD_INT 0
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 2
50569: NEG
50570: PUSH
50571: LD_INT 1
50573: NEG
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 2
50581: NEG
50582: PUSH
50583: LD_INT 2
50585: NEG
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50612: LD_ADDR_VAR 0 54
50616: PUSH
50617: LD_INT 0
50619: PUSH
50620: LD_INT 0
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 0
50629: PUSH
50630: LD_INT 1
50632: NEG
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 1
50640: PUSH
50641: LD_INT 0
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 1
50650: PUSH
50651: LD_INT 1
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 0
50660: PUSH
50661: LD_INT 1
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 1
50670: NEG
50671: PUSH
50672: LD_INT 0
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 1
50681: NEG
50682: PUSH
50683: LD_INT 1
50685: NEG
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 1
50693: NEG
50694: PUSH
50695: LD_INT 2
50697: NEG
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 0
50705: PUSH
50706: LD_INT 2
50708: NEG
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 1
50716: PUSH
50717: LD_INT 1
50719: NEG
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 2
50727: PUSH
50728: LD_INT 0
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 2
50737: PUSH
50738: LD_INT 1
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 2
50747: PUSH
50748: LD_INT 2
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 1
50757: PUSH
50758: LD_INT 2
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 0
50767: PUSH
50768: LD_INT 2
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 1
50777: NEG
50778: PUSH
50779: LD_INT 1
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 2
50788: NEG
50789: PUSH
50790: LD_INT 0
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 2
50799: NEG
50800: PUSH
50801: LD_INT 1
50803: NEG
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 2
50811: NEG
50812: PUSH
50813: LD_INT 2
50815: NEG
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50842: LD_ADDR_VAR 0 55
50846: PUSH
50847: LD_INT 0
50849: PUSH
50850: LD_INT 0
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 0
50859: PUSH
50860: LD_INT 1
50862: NEG
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 1
50870: PUSH
50871: LD_INT 0
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 1
50880: PUSH
50881: LD_INT 1
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 0
50890: PUSH
50891: LD_INT 1
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 1
50900: NEG
50901: PUSH
50902: LD_INT 0
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 1
50911: NEG
50912: PUSH
50913: LD_INT 1
50915: NEG
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 1
50923: NEG
50924: PUSH
50925: LD_INT 2
50927: NEG
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 0
50935: PUSH
50936: LD_INT 2
50938: NEG
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 1
50946: PUSH
50947: LD_INT 1
50949: NEG
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 2
50957: PUSH
50958: LD_INT 0
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 2
50967: PUSH
50968: LD_INT 1
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 2
50977: PUSH
50978: LD_INT 2
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 1
50987: PUSH
50988: LD_INT 2
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 0
50997: PUSH
50998: LD_INT 2
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 1
51007: NEG
51008: PUSH
51009: LD_INT 1
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 2
51018: NEG
51019: PUSH
51020: LD_INT 0
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 2
51029: NEG
51030: PUSH
51031: LD_INT 1
51033: NEG
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 2
51041: NEG
51042: PUSH
51043: LD_INT 2
51045: NEG
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51072: LD_ADDR_VAR 0 56
51076: PUSH
51077: LD_INT 0
51079: PUSH
51080: LD_INT 0
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 0
51089: PUSH
51090: LD_INT 1
51092: NEG
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 1
51100: PUSH
51101: LD_INT 0
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 1
51110: PUSH
51111: LD_INT 1
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 0
51120: PUSH
51121: LD_INT 1
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 1
51130: NEG
51131: PUSH
51132: LD_INT 0
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 1
51141: NEG
51142: PUSH
51143: LD_INT 1
51145: NEG
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 1
51153: NEG
51154: PUSH
51155: LD_INT 2
51157: NEG
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 0
51165: PUSH
51166: LD_INT 2
51168: NEG
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 1
51176: PUSH
51177: LD_INT 1
51179: NEG
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 2
51187: PUSH
51188: LD_INT 0
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 2
51197: PUSH
51198: LD_INT 1
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 2
51207: PUSH
51208: LD_INT 2
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 1
51217: PUSH
51218: LD_INT 2
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 0
51227: PUSH
51228: LD_INT 2
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 1
51237: NEG
51238: PUSH
51239: LD_INT 1
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 2
51248: NEG
51249: PUSH
51250: LD_INT 0
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 2
51259: NEG
51260: PUSH
51261: LD_INT 1
51263: NEG
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 2
51271: NEG
51272: PUSH
51273: LD_INT 2
51275: NEG
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51302: LD_ADDR_VAR 0 57
51306: PUSH
51307: LD_INT 0
51309: PUSH
51310: LD_INT 0
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 0
51319: PUSH
51320: LD_INT 1
51322: NEG
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 1
51330: PUSH
51331: LD_INT 0
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 1
51340: PUSH
51341: LD_INT 1
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 0
51350: PUSH
51351: LD_INT 1
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 1
51360: NEG
51361: PUSH
51362: LD_INT 0
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 1
51371: NEG
51372: PUSH
51373: LD_INT 1
51375: NEG
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 1
51383: NEG
51384: PUSH
51385: LD_INT 2
51387: NEG
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 0
51395: PUSH
51396: LD_INT 2
51398: NEG
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 1
51406: PUSH
51407: LD_INT 1
51409: NEG
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 2
51417: PUSH
51418: LD_INT 0
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 2
51427: PUSH
51428: LD_INT 1
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 2
51437: PUSH
51438: LD_INT 2
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 1
51447: PUSH
51448: LD_INT 2
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 0
51457: PUSH
51458: LD_INT 2
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 1
51467: NEG
51468: PUSH
51469: LD_INT 1
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 2
51478: NEG
51479: PUSH
51480: LD_INT 0
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 2
51489: NEG
51490: PUSH
51491: LD_INT 1
51493: NEG
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 2
51501: NEG
51502: PUSH
51503: LD_INT 2
51505: NEG
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51532: LD_ADDR_VAR 0 58
51536: PUSH
51537: LD_INT 0
51539: PUSH
51540: LD_INT 0
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 0
51549: PUSH
51550: LD_INT 1
51552: NEG
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 1
51560: PUSH
51561: LD_INT 0
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 1
51570: PUSH
51571: LD_INT 1
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 0
51580: PUSH
51581: LD_INT 1
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 1
51590: NEG
51591: PUSH
51592: LD_INT 0
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 1
51601: NEG
51602: PUSH
51603: LD_INT 1
51605: NEG
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 1
51613: NEG
51614: PUSH
51615: LD_INT 2
51617: NEG
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 0
51625: PUSH
51626: LD_INT 2
51628: NEG
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 1
51636: PUSH
51637: LD_INT 1
51639: NEG
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 2
51647: PUSH
51648: LD_INT 0
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 2
51657: PUSH
51658: LD_INT 1
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 2
51667: PUSH
51668: LD_INT 2
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 1
51677: PUSH
51678: LD_INT 2
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 0
51687: PUSH
51688: LD_INT 2
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 1
51697: NEG
51698: PUSH
51699: LD_INT 1
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 2
51708: NEG
51709: PUSH
51710: LD_INT 0
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 2
51719: NEG
51720: PUSH
51721: LD_INT 1
51723: NEG
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 2
51731: NEG
51732: PUSH
51733: LD_INT 2
51735: NEG
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51762: LD_ADDR_VAR 0 59
51766: PUSH
51767: LD_INT 0
51769: PUSH
51770: LD_INT 0
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 0
51779: PUSH
51780: LD_INT 1
51782: NEG
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 1
51790: PUSH
51791: LD_INT 0
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 1
51800: PUSH
51801: LD_INT 1
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 0
51810: PUSH
51811: LD_INT 1
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 1
51820: NEG
51821: PUSH
51822: LD_INT 0
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 1
51831: NEG
51832: PUSH
51833: LD_INT 1
51835: NEG
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51850: LD_ADDR_VAR 0 60
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: LD_INT 0
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 0
51867: PUSH
51868: LD_INT 1
51870: NEG
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 1
51878: PUSH
51879: LD_INT 0
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 1
51888: PUSH
51889: LD_INT 1
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 0
51898: PUSH
51899: LD_INT 1
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 1
51908: NEG
51909: PUSH
51910: LD_INT 0
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 1
51919: NEG
51920: PUSH
51921: LD_INT 1
51923: NEG
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51938: LD_ADDR_VAR 0 61
51942: PUSH
51943: LD_INT 0
51945: PUSH
51946: LD_INT 0
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 0
51955: PUSH
51956: LD_INT 1
51958: NEG
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 1
51966: PUSH
51967: LD_INT 0
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 1
51976: PUSH
51977: LD_INT 1
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 0
51986: PUSH
51987: LD_INT 1
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 1
51996: NEG
51997: PUSH
51998: LD_INT 0
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 1
52007: NEG
52008: PUSH
52009: LD_INT 1
52011: NEG
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52026: LD_ADDR_VAR 0 62
52030: PUSH
52031: LD_INT 0
52033: PUSH
52034: LD_INT 0
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 0
52043: PUSH
52044: LD_INT 1
52046: NEG
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 1
52054: PUSH
52055: LD_INT 0
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 1
52064: PUSH
52065: LD_INT 1
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 0
52074: PUSH
52075: LD_INT 1
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 1
52084: NEG
52085: PUSH
52086: LD_INT 0
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 1
52095: NEG
52096: PUSH
52097: LD_INT 1
52099: NEG
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52114: LD_ADDR_VAR 0 63
52118: PUSH
52119: LD_INT 0
52121: PUSH
52122: LD_INT 0
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 0
52131: PUSH
52132: LD_INT 1
52134: NEG
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 1
52142: PUSH
52143: LD_INT 0
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 1
52152: PUSH
52153: LD_INT 1
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 0
52162: PUSH
52163: LD_INT 1
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 1
52172: NEG
52173: PUSH
52174: LD_INT 0
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 1
52183: NEG
52184: PUSH
52185: LD_INT 1
52187: NEG
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52202: LD_ADDR_VAR 0 64
52206: PUSH
52207: LD_INT 0
52209: PUSH
52210: LD_INT 0
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 0
52219: PUSH
52220: LD_INT 1
52222: NEG
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 1
52230: PUSH
52231: LD_INT 0
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 1
52240: PUSH
52241: LD_INT 1
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 0
52250: PUSH
52251: LD_INT 1
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 1
52260: NEG
52261: PUSH
52262: LD_INT 0
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 1
52271: NEG
52272: PUSH
52273: LD_INT 1
52275: NEG
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: ST_TO_ADDR
// end ; 1 :
52290: GO 58187
52292: LD_INT 1
52294: DOUBLE
52295: EQUAL
52296: IFTRUE 52300
52298: GO 54923
52300: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52301: LD_ADDR_VAR 0 11
52305: PUSH
52306: LD_INT 1
52308: NEG
52309: PUSH
52310: LD_INT 3
52312: NEG
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 0
52320: PUSH
52321: LD_INT 3
52323: NEG
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 1
52331: PUSH
52332: LD_INT 2
52334: NEG
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: LIST
52344: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52345: LD_ADDR_VAR 0 12
52349: PUSH
52350: LD_INT 2
52352: PUSH
52353: LD_INT 1
52355: NEG
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 3
52363: PUSH
52364: LD_INT 0
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 3
52373: PUSH
52374: LD_INT 1
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: LIST
52385: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52386: LD_ADDR_VAR 0 13
52390: PUSH
52391: LD_INT 3
52393: PUSH
52394: LD_INT 2
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 3
52403: PUSH
52404: LD_INT 3
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 2
52413: PUSH
52414: LD_INT 3
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: LIST
52425: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52426: LD_ADDR_VAR 0 14
52430: PUSH
52431: LD_INT 1
52433: PUSH
52434: LD_INT 3
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 0
52443: PUSH
52444: LD_INT 3
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 1
52453: NEG
52454: PUSH
52455: LD_INT 2
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: LIST
52466: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52467: LD_ADDR_VAR 0 15
52471: PUSH
52472: LD_INT 2
52474: NEG
52475: PUSH
52476: LD_INT 1
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 3
52485: NEG
52486: PUSH
52487: LD_INT 0
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 3
52496: NEG
52497: PUSH
52498: LD_INT 1
52500: NEG
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: LIST
52510: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52511: LD_ADDR_VAR 0 16
52515: PUSH
52516: LD_INT 2
52518: NEG
52519: PUSH
52520: LD_INT 3
52522: NEG
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 3
52530: NEG
52531: PUSH
52532: LD_INT 2
52534: NEG
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 3
52542: NEG
52543: PUSH
52544: LD_INT 3
52546: NEG
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: LIST
52556: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52557: LD_ADDR_VAR 0 17
52561: PUSH
52562: LD_INT 1
52564: NEG
52565: PUSH
52566: LD_INT 3
52568: NEG
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 0
52576: PUSH
52577: LD_INT 3
52579: NEG
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 1
52587: PUSH
52588: LD_INT 2
52590: NEG
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: LIST
52600: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52601: LD_ADDR_VAR 0 18
52605: PUSH
52606: LD_INT 2
52608: PUSH
52609: LD_INT 1
52611: NEG
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 3
52619: PUSH
52620: LD_INT 0
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 3
52629: PUSH
52630: LD_INT 1
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: LIST
52641: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52642: LD_ADDR_VAR 0 19
52646: PUSH
52647: LD_INT 3
52649: PUSH
52650: LD_INT 2
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 3
52659: PUSH
52660: LD_INT 3
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 2
52669: PUSH
52670: LD_INT 3
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: LIST
52681: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52682: LD_ADDR_VAR 0 20
52686: PUSH
52687: LD_INT 1
52689: PUSH
52690: LD_INT 3
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 0
52699: PUSH
52700: LD_INT 3
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 1
52709: NEG
52710: PUSH
52711: LD_INT 2
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: LIST
52722: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52723: LD_ADDR_VAR 0 21
52727: PUSH
52728: LD_INT 2
52730: NEG
52731: PUSH
52732: LD_INT 1
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 3
52741: NEG
52742: PUSH
52743: LD_INT 0
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 3
52752: NEG
52753: PUSH
52754: LD_INT 1
52756: NEG
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: LIST
52766: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52767: LD_ADDR_VAR 0 22
52771: PUSH
52772: LD_INT 2
52774: NEG
52775: PUSH
52776: LD_INT 3
52778: NEG
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 3
52786: NEG
52787: PUSH
52788: LD_INT 2
52790: NEG
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 3
52798: NEG
52799: PUSH
52800: LD_INT 3
52802: NEG
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: LIST
52812: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52813: LD_ADDR_VAR 0 23
52817: PUSH
52818: LD_INT 0
52820: PUSH
52821: LD_INT 3
52823: NEG
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 1
52831: NEG
52832: PUSH
52833: LD_INT 4
52835: NEG
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 1
52843: PUSH
52844: LD_INT 3
52846: NEG
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: LIST
52856: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52857: LD_ADDR_VAR 0 24
52861: PUSH
52862: LD_INT 3
52864: PUSH
52865: LD_INT 0
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 3
52874: PUSH
52875: LD_INT 1
52877: NEG
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 4
52885: PUSH
52886: LD_INT 1
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: LIST
52897: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52898: LD_ADDR_VAR 0 25
52902: PUSH
52903: LD_INT 3
52905: PUSH
52906: LD_INT 3
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 4
52915: PUSH
52916: LD_INT 3
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 3
52925: PUSH
52926: LD_INT 4
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: LIST
52937: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52938: LD_ADDR_VAR 0 26
52942: PUSH
52943: LD_INT 0
52945: PUSH
52946: LD_INT 3
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 1
52955: PUSH
52956: LD_INT 4
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 1
52965: NEG
52966: PUSH
52967: LD_INT 3
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: LIST
52978: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52979: LD_ADDR_VAR 0 27
52983: PUSH
52984: LD_INT 3
52986: NEG
52987: PUSH
52988: LD_INT 0
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 3
52997: NEG
52998: PUSH
52999: LD_INT 1
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 4
53008: NEG
53009: PUSH
53010: LD_INT 1
53012: NEG
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: LIST
53022: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53023: LD_ADDR_VAR 0 28
53027: PUSH
53028: LD_INT 3
53030: NEG
53031: PUSH
53032: LD_INT 3
53034: NEG
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 3
53042: NEG
53043: PUSH
53044: LD_INT 4
53046: NEG
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 4
53054: NEG
53055: PUSH
53056: LD_INT 3
53058: NEG
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: LIST
53068: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53069: LD_ADDR_VAR 0 29
53073: PUSH
53074: LD_INT 1
53076: NEG
53077: PUSH
53078: LD_INT 3
53080: NEG
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 0
53088: PUSH
53089: LD_INT 3
53091: NEG
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 1
53099: PUSH
53100: LD_INT 2
53102: NEG
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 1
53110: NEG
53111: PUSH
53112: LD_INT 4
53114: NEG
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 0
53122: PUSH
53123: LD_INT 4
53125: NEG
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 1
53133: PUSH
53134: LD_INT 3
53136: NEG
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 1
53144: NEG
53145: PUSH
53146: LD_INT 5
53148: NEG
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 0
53156: PUSH
53157: LD_INT 5
53159: NEG
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 1
53167: PUSH
53168: LD_INT 4
53170: NEG
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 1
53178: NEG
53179: PUSH
53180: LD_INT 6
53182: NEG
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 0
53190: PUSH
53191: LD_INT 6
53193: NEG
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 1
53201: PUSH
53202: LD_INT 5
53204: NEG
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53224: LD_ADDR_VAR 0 30
53228: PUSH
53229: LD_INT 2
53231: PUSH
53232: LD_INT 1
53234: NEG
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 3
53242: PUSH
53243: LD_INT 0
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 3
53252: PUSH
53253: LD_INT 1
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 3
53262: PUSH
53263: LD_INT 1
53265: NEG
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 4
53273: PUSH
53274: LD_INT 0
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 4
53283: PUSH
53284: LD_INT 1
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 4
53293: PUSH
53294: LD_INT 1
53296: NEG
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 5
53304: PUSH
53305: LD_INT 0
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 5
53314: PUSH
53315: LD_INT 1
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 5
53324: PUSH
53325: LD_INT 1
53327: NEG
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 6
53335: PUSH
53336: LD_INT 0
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 6
53345: PUSH
53346: LD_INT 1
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53367: LD_ADDR_VAR 0 31
53371: PUSH
53372: LD_INT 3
53374: PUSH
53375: LD_INT 2
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 3
53384: PUSH
53385: LD_INT 3
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 2
53394: PUSH
53395: LD_INT 3
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 4
53404: PUSH
53405: LD_INT 3
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 4
53414: PUSH
53415: LD_INT 4
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 3
53424: PUSH
53425: LD_INT 4
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 5
53434: PUSH
53435: LD_INT 4
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 5
53444: PUSH
53445: LD_INT 5
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 4
53454: PUSH
53455: LD_INT 5
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 6
53464: PUSH
53465: LD_INT 5
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 6
53474: PUSH
53475: LD_INT 6
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 5
53484: PUSH
53485: LD_INT 6
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53506: LD_ADDR_VAR 0 32
53510: PUSH
53511: LD_INT 1
53513: PUSH
53514: LD_INT 3
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 0
53523: PUSH
53524: LD_INT 3
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 1
53533: NEG
53534: PUSH
53535: LD_INT 2
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 1
53544: PUSH
53545: LD_INT 4
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 0
53554: PUSH
53555: LD_INT 4
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 1
53564: NEG
53565: PUSH
53566: LD_INT 3
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 1
53575: PUSH
53576: LD_INT 5
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 0
53585: PUSH
53586: LD_INT 5
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 1
53595: NEG
53596: PUSH
53597: LD_INT 4
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 1
53606: PUSH
53607: LD_INT 6
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 0
53616: PUSH
53617: LD_INT 6
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 1
53626: NEG
53627: PUSH
53628: LD_INT 5
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53649: LD_ADDR_VAR 0 33
53653: PUSH
53654: LD_INT 2
53656: NEG
53657: PUSH
53658: LD_INT 1
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 3
53667: NEG
53668: PUSH
53669: LD_INT 0
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 3
53678: NEG
53679: PUSH
53680: LD_INT 1
53682: NEG
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 3
53690: NEG
53691: PUSH
53692: LD_INT 1
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 4
53701: NEG
53702: PUSH
53703: LD_INT 0
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 4
53712: NEG
53713: PUSH
53714: LD_INT 1
53716: NEG
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 4
53724: NEG
53725: PUSH
53726: LD_INT 1
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 5
53735: NEG
53736: PUSH
53737: LD_INT 0
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 5
53746: NEG
53747: PUSH
53748: LD_INT 1
53750: NEG
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 5
53758: NEG
53759: PUSH
53760: LD_INT 1
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 6
53769: NEG
53770: PUSH
53771: LD_INT 0
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 6
53780: NEG
53781: PUSH
53782: LD_INT 1
53784: NEG
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53804: LD_ADDR_VAR 0 34
53808: PUSH
53809: LD_INT 2
53811: NEG
53812: PUSH
53813: LD_INT 3
53815: NEG
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 3
53823: NEG
53824: PUSH
53825: LD_INT 2
53827: NEG
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 3
53835: NEG
53836: PUSH
53837: LD_INT 3
53839: NEG
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 3
53847: NEG
53848: PUSH
53849: LD_INT 4
53851: NEG
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 4
53859: NEG
53860: PUSH
53861: LD_INT 3
53863: NEG
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 4
53871: NEG
53872: PUSH
53873: LD_INT 4
53875: NEG
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 4
53883: NEG
53884: PUSH
53885: LD_INT 5
53887: NEG
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 5
53895: NEG
53896: PUSH
53897: LD_INT 4
53899: NEG
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 5
53907: NEG
53908: PUSH
53909: LD_INT 5
53911: NEG
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 5
53919: NEG
53920: PUSH
53921: LD_INT 6
53923: NEG
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 6
53931: NEG
53932: PUSH
53933: LD_INT 5
53935: NEG
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 6
53943: NEG
53944: PUSH
53945: LD_INT 6
53947: NEG
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53967: LD_ADDR_VAR 0 41
53971: PUSH
53972: LD_INT 0
53974: PUSH
53975: LD_INT 2
53977: NEG
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 1
53985: NEG
53986: PUSH
53987: LD_INT 3
53989: NEG
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 1
53997: PUSH
53998: LD_INT 2
54000: NEG
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: LIST
54010: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54011: LD_ADDR_VAR 0 42
54015: PUSH
54016: LD_INT 2
54018: PUSH
54019: LD_INT 0
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 2
54028: PUSH
54029: LD_INT 1
54031: NEG
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 3
54039: PUSH
54040: LD_INT 1
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: LIST
54051: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54052: LD_ADDR_VAR 0 43
54056: PUSH
54057: LD_INT 2
54059: PUSH
54060: LD_INT 2
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 3
54069: PUSH
54070: LD_INT 2
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 2
54079: PUSH
54080: LD_INT 3
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: LIST
54091: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54092: LD_ADDR_VAR 0 44
54096: PUSH
54097: LD_INT 0
54099: PUSH
54100: LD_INT 2
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 1
54109: PUSH
54110: LD_INT 3
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 1
54119: NEG
54120: PUSH
54121: LD_INT 2
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: LIST
54132: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54133: LD_ADDR_VAR 0 45
54137: PUSH
54138: LD_INT 2
54140: NEG
54141: PUSH
54142: LD_INT 0
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 2
54151: NEG
54152: PUSH
54153: LD_INT 1
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 3
54162: NEG
54163: PUSH
54164: LD_INT 1
54166: NEG
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: LIST
54176: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54177: LD_ADDR_VAR 0 46
54181: PUSH
54182: LD_INT 2
54184: NEG
54185: PUSH
54186: LD_INT 2
54188: NEG
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 2
54196: NEG
54197: PUSH
54198: LD_INT 3
54200: NEG
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 3
54208: NEG
54209: PUSH
54210: LD_INT 2
54212: NEG
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: LIST
54222: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54223: LD_ADDR_VAR 0 47
54227: PUSH
54228: LD_INT 2
54230: NEG
54231: PUSH
54232: LD_INT 3
54234: NEG
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 1
54242: NEG
54243: PUSH
54244: LD_INT 3
54246: NEG
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54256: LD_ADDR_VAR 0 48
54260: PUSH
54261: LD_INT 1
54263: PUSH
54264: LD_INT 2
54266: NEG
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 2
54274: PUSH
54275: LD_INT 1
54277: NEG
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54287: LD_ADDR_VAR 0 49
54291: PUSH
54292: LD_INT 3
54294: PUSH
54295: LD_INT 1
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 3
54304: PUSH
54305: LD_INT 2
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54316: LD_ADDR_VAR 0 50
54320: PUSH
54321: LD_INT 2
54323: PUSH
54324: LD_INT 3
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 1
54333: PUSH
54334: LD_INT 3
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54345: LD_ADDR_VAR 0 51
54349: PUSH
54350: LD_INT 1
54352: NEG
54353: PUSH
54354: LD_INT 2
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 2
54363: NEG
54364: PUSH
54365: LD_INT 1
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54376: LD_ADDR_VAR 0 52
54380: PUSH
54381: LD_INT 3
54383: NEG
54384: PUSH
54385: LD_INT 1
54387: NEG
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 3
54395: NEG
54396: PUSH
54397: LD_INT 2
54399: NEG
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54409: LD_ADDR_VAR 0 53
54413: PUSH
54414: LD_INT 1
54416: NEG
54417: PUSH
54418: LD_INT 3
54420: NEG
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 0
54428: PUSH
54429: LD_INT 3
54431: NEG
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 1
54439: PUSH
54440: LD_INT 2
54442: NEG
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: LIST
54452: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54453: LD_ADDR_VAR 0 54
54457: PUSH
54458: LD_INT 2
54460: PUSH
54461: LD_INT 1
54463: NEG
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 3
54471: PUSH
54472: LD_INT 0
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 3
54481: PUSH
54482: LD_INT 1
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: LIST
54493: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54494: LD_ADDR_VAR 0 55
54498: PUSH
54499: LD_INT 3
54501: PUSH
54502: LD_INT 2
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 3
54511: PUSH
54512: LD_INT 3
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 2
54521: PUSH
54522: LD_INT 3
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: LIST
54533: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54534: LD_ADDR_VAR 0 56
54538: PUSH
54539: LD_INT 1
54541: PUSH
54542: LD_INT 3
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 0
54551: PUSH
54552: LD_INT 3
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 1
54561: NEG
54562: PUSH
54563: LD_INT 2
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: LIST
54574: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54575: LD_ADDR_VAR 0 57
54579: PUSH
54580: LD_INT 2
54582: NEG
54583: PUSH
54584: LD_INT 1
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 3
54593: NEG
54594: PUSH
54595: LD_INT 0
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 3
54604: NEG
54605: PUSH
54606: LD_INT 1
54608: NEG
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: LIST
54618: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54619: LD_ADDR_VAR 0 58
54623: PUSH
54624: LD_INT 2
54626: NEG
54627: PUSH
54628: LD_INT 3
54630: NEG
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 3
54638: NEG
54639: PUSH
54640: LD_INT 2
54642: NEG
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 3
54650: NEG
54651: PUSH
54652: LD_INT 3
54654: NEG
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: LIST
54664: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54665: LD_ADDR_VAR 0 59
54669: PUSH
54670: LD_INT 1
54672: NEG
54673: PUSH
54674: LD_INT 2
54676: NEG
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 0
54684: PUSH
54685: LD_INT 2
54687: NEG
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 1
54695: PUSH
54696: LD_INT 1
54698: NEG
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: LIST
54708: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54709: LD_ADDR_VAR 0 60
54713: PUSH
54714: LD_INT 1
54716: PUSH
54717: LD_INT 1
54719: NEG
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 2
54727: PUSH
54728: LD_INT 0
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 2
54737: PUSH
54738: LD_INT 1
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: LIST
54749: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54750: LD_ADDR_VAR 0 61
54754: PUSH
54755: LD_INT 2
54757: PUSH
54758: LD_INT 1
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 2
54767: PUSH
54768: LD_INT 2
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 1
54777: PUSH
54778: LD_INT 2
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: LIST
54789: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54790: LD_ADDR_VAR 0 62
54794: PUSH
54795: LD_INT 1
54797: PUSH
54798: LD_INT 2
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 0
54807: PUSH
54808: LD_INT 2
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 1
54817: NEG
54818: PUSH
54819: LD_INT 1
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: LIST
54830: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54831: LD_ADDR_VAR 0 63
54835: PUSH
54836: LD_INT 1
54838: NEG
54839: PUSH
54840: LD_INT 1
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 2
54849: NEG
54850: PUSH
54851: LD_INT 0
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 2
54860: NEG
54861: PUSH
54862: LD_INT 1
54864: NEG
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: LIST
54874: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54875: LD_ADDR_VAR 0 64
54879: PUSH
54880: LD_INT 1
54882: NEG
54883: PUSH
54884: LD_INT 2
54886: NEG
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 2
54894: NEG
54895: PUSH
54896: LD_INT 1
54898: NEG
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 2
54906: NEG
54907: PUSH
54908: LD_INT 2
54910: NEG
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: LIST
54920: ST_TO_ADDR
// end ; 2 :
54921: GO 58187
54923: LD_INT 2
54925: DOUBLE
54926: EQUAL
54927: IFTRUE 54931
54929: GO 58186
54931: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54932: LD_ADDR_VAR 0 29
54936: PUSH
54937: LD_INT 4
54939: PUSH
54940: LD_INT 0
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 4
54949: PUSH
54950: LD_INT 1
54952: NEG
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 5
54960: PUSH
54961: LD_INT 0
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 5
54970: PUSH
54971: LD_INT 1
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 4
54980: PUSH
54981: LD_INT 1
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 3
54990: PUSH
54991: LD_INT 0
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 3
55000: PUSH
55001: LD_INT 1
55003: NEG
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 3
55011: PUSH
55012: LD_INT 2
55014: NEG
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 5
55022: PUSH
55023: LD_INT 2
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 3
55032: PUSH
55033: LD_INT 3
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 3
55042: PUSH
55043: LD_INT 2
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 4
55052: PUSH
55053: LD_INT 3
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 4
55062: PUSH
55063: LD_INT 4
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 3
55072: PUSH
55073: LD_INT 4
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 2
55082: PUSH
55083: LD_INT 3
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 2
55092: PUSH
55093: LD_INT 2
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 4
55102: PUSH
55103: LD_INT 2
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 2
55112: PUSH
55113: LD_INT 4
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 0
55122: PUSH
55123: LD_INT 4
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 0
55132: PUSH
55133: LD_INT 3
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 1
55142: PUSH
55143: LD_INT 4
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 1
55152: PUSH
55153: LD_INT 5
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 0
55162: PUSH
55163: LD_INT 5
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 1
55172: NEG
55173: PUSH
55174: LD_INT 4
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 1
55183: NEG
55184: PUSH
55185: LD_INT 3
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 2
55194: PUSH
55195: LD_INT 5
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 2
55204: NEG
55205: PUSH
55206: LD_INT 3
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 3
55215: NEG
55216: PUSH
55217: LD_INT 0
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 3
55226: NEG
55227: PUSH
55228: LD_INT 1
55230: NEG
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 2
55238: NEG
55239: PUSH
55240: LD_INT 0
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 2
55249: NEG
55250: PUSH
55251: LD_INT 1
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 3
55260: NEG
55261: PUSH
55262: LD_INT 1
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 4
55271: NEG
55272: PUSH
55273: LD_INT 0
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 4
55282: NEG
55283: PUSH
55284: LD_INT 1
55286: NEG
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 4
55294: NEG
55295: PUSH
55296: LD_INT 2
55298: NEG
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 2
55306: NEG
55307: PUSH
55308: LD_INT 2
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 4
55317: NEG
55318: PUSH
55319: LD_INT 4
55321: NEG
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 4
55329: NEG
55330: PUSH
55331: LD_INT 5
55333: NEG
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 3
55341: NEG
55342: PUSH
55343: LD_INT 4
55345: NEG
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 3
55353: NEG
55354: PUSH
55355: LD_INT 3
55357: NEG
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 4
55365: NEG
55366: PUSH
55367: LD_INT 3
55369: NEG
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 5
55377: NEG
55378: PUSH
55379: LD_INT 4
55381: NEG
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 5
55389: NEG
55390: PUSH
55391: LD_INT 5
55393: NEG
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 3
55401: NEG
55402: PUSH
55403: LD_INT 5
55405: NEG
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 5
55413: NEG
55414: PUSH
55415: LD_INT 3
55417: NEG
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55470: LD_ADDR_VAR 0 30
55474: PUSH
55475: LD_INT 4
55477: PUSH
55478: LD_INT 4
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 4
55487: PUSH
55488: LD_INT 3
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 5
55497: PUSH
55498: LD_INT 4
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 5
55507: PUSH
55508: LD_INT 5
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 4
55517: PUSH
55518: LD_INT 5
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 3
55527: PUSH
55528: LD_INT 4
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 3
55537: PUSH
55538: LD_INT 3
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 5
55547: PUSH
55548: LD_INT 3
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 3
55557: PUSH
55558: LD_INT 5
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 0
55567: PUSH
55568: LD_INT 3
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 0
55577: PUSH
55578: LD_INT 2
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 1
55587: PUSH
55588: LD_INT 3
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 1
55597: PUSH
55598: LD_INT 4
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 0
55607: PUSH
55608: LD_INT 4
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 1
55617: NEG
55618: PUSH
55619: LD_INT 3
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 1
55628: NEG
55629: PUSH
55630: LD_INT 2
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 2
55639: PUSH
55640: LD_INT 4
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 2
55649: NEG
55650: PUSH
55651: LD_INT 2
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 4
55660: NEG
55661: PUSH
55662: LD_INT 0
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 4
55671: NEG
55672: PUSH
55673: LD_INT 1
55675: NEG
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 3
55683: NEG
55684: PUSH
55685: LD_INT 0
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 3
55694: NEG
55695: PUSH
55696: LD_INT 1
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 4
55705: NEG
55706: PUSH
55707: LD_INT 1
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 5
55716: NEG
55717: PUSH
55718: LD_INT 0
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 5
55727: NEG
55728: PUSH
55729: LD_INT 1
55731: NEG
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 5
55739: NEG
55740: PUSH
55741: LD_INT 2
55743: NEG
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 3
55751: NEG
55752: PUSH
55753: LD_INT 2
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 3
55762: NEG
55763: PUSH
55764: LD_INT 3
55766: NEG
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 3
55774: NEG
55775: PUSH
55776: LD_INT 4
55778: NEG
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 2
55786: NEG
55787: PUSH
55788: LD_INT 3
55790: NEG
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 2
55798: NEG
55799: PUSH
55800: LD_INT 2
55802: NEG
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 3
55810: NEG
55811: PUSH
55812: LD_INT 2
55814: NEG
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 4
55822: NEG
55823: PUSH
55824: LD_INT 3
55826: NEG
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 4
55834: NEG
55835: PUSH
55836: LD_INT 4
55838: NEG
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 2
55846: NEG
55847: PUSH
55848: LD_INT 4
55850: NEG
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 4
55858: NEG
55859: PUSH
55860: LD_INT 2
55862: NEG
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 0
55870: PUSH
55871: LD_INT 4
55873: NEG
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 0
55881: PUSH
55882: LD_INT 5
55884: NEG
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 1
55892: PUSH
55893: LD_INT 4
55895: NEG
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 1
55903: PUSH
55904: LD_INT 3
55906: NEG
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 0
55914: PUSH
55915: LD_INT 3
55917: NEG
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 1
55925: NEG
55926: PUSH
55927: LD_INT 4
55929: NEG
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 1
55937: NEG
55938: PUSH
55939: LD_INT 5
55941: NEG
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 2
55949: PUSH
55950: LD_INT 3
55952: NEG
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 2
55960: NEG
55961: PUSH
55962: LD_INT 5
55964: NEG
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56017: LD_ADDR_VAR 0 31
56021: PUSH
56022: LD_INT 0
56024: PUSH
56025: LD_INT 4
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 0
56034: PUSH
56035: LD_INT 3
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 1
56044: PUSH
56045: LD_INT 4
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 1
56054: PUSH
56055: LD_INT 5
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 0
56064: PUSH
56065: LD_INT 5
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 1
56074: NEG
56075: PUSH
56076: LD_INT 4
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 1
56085: NEG
56086: PUSH
56087: LD_INT 3
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 2
56096: PUSH
56097: LD_INT 5
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 2
56106: NEG
56107: PUSH
56108: LD_INT 3
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 3
56117: NEG
56118: PUSH
56119: LD_INT 0
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 3
56128: NEG
56129: PUSH
56130: LD_INT 1
56132: NEG
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 2
56140: NEG
56141: PUSH
56142: LD_INT 0
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 2
56151: NEG
56152: PUSH
56153: LD_INT 1
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 3
56162: NEG
56163: PUSH
56164: LD_INT 1
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 4
56173: NEG
56174: PUSH
56175: LD_INT 0
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 4
56184: NEG
56185: PUSH
56186: LD_INT 1
56188: NEG
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 4
56196: NEG
56197: PUSH
56198: LD_INT 2
56200: NEG
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 2
56208: NEG
56209: PUSH
56210: LD_INT 2
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 4
56219: NEG
56220: PUSH
56221: LD_INT 4
56223: NEG
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 4
56231: NEG
56232: PUSH
56233: LD_INT 5
56235: NEG
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 3
56243: NEG
56244: PUSH
56245: LD_INT 4
56247: NEG
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 3
56255: NEG
56256: PUSH
56257: LD_INT 3
56259: NEG
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 4
56267: NEG
56268: PUSH
56269: LD_INT 3
56271: NEG
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 5
56279: NEG
56280: PUSH
56281: LD_INT 4
56283: NEG
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 5
56291: NEG
56292: PUSH
56293: LD_INT 5
56295: NEG
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 3
56303: NEG
56304: PUSH
56305: LD_INT 5
56307: NEG
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 5
56315: NEG
56316: PUSH
56317: LD_INT 3
56319: NEG
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 0
56327: PUSH
56328: LD_INT 3
56330: NEG
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 0
56338: PUSH
56339: LD_INT 4
56341: NEG
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 1
56349: PUSH
56350: LD_INT 3
56352: NEG
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 1
56360: PUSH
56361: LD_INT 2
56363: NEG
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 0
56371: PUSH
56372: LD_INT 2
56374: NEG
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 1
56382: NEG
56383: PUSH
56384: LD_INT 3
56386: NEG
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 1
56394: NEG
56395: PUSH
56396: LD_INT 4
56398: NEG
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 2
56406: PUSH
56407: LD_INT 2
56409: NEG
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 2
56417: NEG
56418: PUSH
56419: LD_INT 4
56421: NEG
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 4
56429: PUSH
56430: LD_INT 0
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 4
56439: PUSH
56440: LD_INT 1
56442: NEG
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 5
56450: PUSH
56451: LD_INT 0
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 5
56460: PUSH
56461: LD_INT 1
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 4
56470: PUSH
56471: LD_INT 1
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 3
56480: PUSH
56481: LD_INT 0
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 3
56490: PUSH
56491: LD_INT 1
56493: NEG
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 3
56501: PUSH
56502: LD_INT 2
56504: NEG
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 5
56512: PUSH
56513: LD_INT 2
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56567: LD_ADDR_VAR 0 32
56571: PUSH
56572: LD_INT 4
56574: NEG
56575: PUSH
56576: LD_INT 0
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 4
56585: NEG
56586: PUSH
56587: LD_INT 1
56589: NEG
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 3
56597: NEG
56598: PUSH
56599: LD_INT 0
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 3
56608: NEG
56609: PUSH
56610: LD_INT 1
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 4
56619: NEG
56620: PUSH
56621: LD_INT 1
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 5
56630: NEG
56631: PUSH
56632: LD_INT 0
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 5
56641: NEG
56642: PUSH
56643: LD_INT 1
56645: NEG
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 5
56653: NEG
56654: PUSH
56655: LD_INT 2
56657: NEG
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 3
56665: NEG
56666: PUSH
56667: LD_INT 2
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 3
56676: NEG
56677: PUSH
56678: LD_INT 3
56680: NEG
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 3
56688: NEG
56689: PUSH
56690: LD_INT 4
56692: NEG
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 2
56700: NEG
56701: PUSH
56702: LD_INT 3
56704: NEG
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 2
56712: NEG
56713: PUSH
56714: LD_INT 2
56716: NEG
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 3
56724: NEG
56725: PUSH
56726: LD_INT 2
56728: NEG
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 4
56736: NEG
56737: PUSH
56738: LD_INT 3
56740: NEG
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 4
56748: NEG
56749: PUSH
56750: LD_INT 4
56752: NEG
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 2
56760: NEG
56761: PUSH
56762: LD_INT 4
56764: NEG
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 4
56772: NEG
56773: PUSH
56774: LD_INT 2
56776: NEG
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 0
56784: PUSH
56785: LD_INT 4
56787: NEG
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 0
56795: PUSH
56796: LD_INT 5
56798: NEG
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 1
56806: PUSH
56807: LD_INT 4
56809: NEG
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 1
56817: PUSH
56818: LD_INT 3
56820: NEG
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 0
56828: PUSH
56829: LD_INT 3
56831: NEG
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 1
56839: NEG
56840: PUSH
56841: LD_INT 4
56843: NEG
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 1
56851: NEG
56852: PUSH
56853: LD_INT 5
56855: NEG
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 2
56863: PUSH
56864: LD_INT 3
56866: NEG
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 2
56874: NEG
56875: PUSH
56876: LD_INT 5
56878: NEG
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 3
56886: PUSH
56887: LD_INT 0
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 3
56896: PUSH
56897: LD_INT 1
56899: NEG
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 4
56907: PUSH
56908: LD_INT 0
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 4
56917: PUSH
56918: LD_INT 1
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 3
56927: PUSH
56928: LD_INT 1
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 2
56937: PUSH
56938: LD_INT 0
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 2
56947: PUSH
56948: LD_INT 1
56950: NEG
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 2
56958: PUSH
56959: LD_INT 2
56961: NEG
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 4
56969: PUSH
56970: LD_INT 2
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 4
56979: PUSH
56980: LD_INT 4
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 4
56989: PUSH
56990: LD_INT 3
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 5
56999: PUSH
57000: LD_INT 4
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 5
57009: PUSH
57010: LD_INT 5
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 4
57019: PUSH
57020: LD_INT 5
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 3
57029: PUSH
57030: LD_INT 4
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 3
57039: PUSH
57040: LD_INT 3
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 5
57049: PUSH
57050: LD_INT 3
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 3
57059: PUSH
57060: LD_INT 5
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57114: LD_ADDR_VAR 0 33
57118: PUSH
57119: LD_INT 4
57121: NEG
57122: PUSH
57123: LD_INT 4
57125: NEG
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 4
57133: NEG
57134: PUSH
57135: LD_INT 5
57137: NEG
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 3
57145: NEG
57146: PUSH
57147: LD_INT 4
57149: NEG
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 3
57157: NEG
57158: PUSH
57159: LD_INT 3
57161: NEG
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 4
57169: NEG
57170: PUSH
57171: LD_INT 3
57173: NEG
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 5
57181: NEG
57182: PUSH
57183: LD_INT 4
57185: NEG
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 5
57193: NEG
57194: PUSH
57195: LD_INT 5
57197: NEG
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 3
57205: NEG
57206: PUSH
57207: LD_INT 5
57209: NEG
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 5
57217: NEG
57218: PUSH
57219: LD_INT 3
57221: NEG
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 0
57229: PUSH
57230: LD_INT 3
57232: NEG
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 0
57240: PUSH
57241: LD_INT 4
57243: NEG
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 1
57251: PUSH
57252: LD_INT 3
57254: NEG
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 1
57262: PUSH
57263: LD_INT 2
57265: NEG
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 0
57273: PUSH
57274: LD_INT 2
57276: NEG
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 1
57284: NEG
57285: PUSH
57286: LD_INT 3
57288: NEG
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 1
57296: NEG
57297: PUSH
57298: LD_INT 4
57300: NEG
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 2
57308: PUSH
57309: LD_INT 2
57311: NEG
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 2
57319: NEG
57320: PUSH
57321: LD_INT 4
57323: NEG
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 4
57331: PUSH
57332: LD_INT 0
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 4
57341: PUSH
57342: LD_INT 1
57344: NEG
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 5
57352: PUSH
57353: LD_INT 0
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 5
57362: PUSH
57363: LD_INT 1
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 4
57372: PUSH
57373: LD_INT 1
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 3
57382: PUSH
57383: LD_INT 0
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 3
57392: PUSH
57393: LD_INT 1
57395: NEG
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 3
57403: PUSH
57404: LD_INT 2
57406: NEG
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 5
57414: PUSH
57415: LD_INT 2
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 3
57424: PUSH
57425: LD_INT 3
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 3
57434: PUSH
57435: LD_INT 2
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 4
57444: PUSH
57445: LD_INT 3
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 4
57454: PUSH
57455: LD_INT 4
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 3
57464: PUSH
57465: LD_INT 4
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 2
57474: PUSH
57475: LD_INT 3
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 2
57484: PUSH
57485: LD_INT 2
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 4
57494: PUSH
57495: LD_INT 2
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 2
57504: PUSH
57505: LD_INT 4
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 0
57514: PUSH
57515: LD_INT 4
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: PUSH
57522: LD_INT 0
57524: PUSH
57525: LD_INT 3
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 1
57534: PUSH
57535: LD_INT 4
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 1
57544: PUSH
57545: LD_INT 5
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 0
57554: PUSH
57555: LD_INT 5
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 1
57564: NEG
57565: PUSH
57566: LD_INT 4
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 1
57575: NEG
57576: PUSH
57577: LD_INT 3
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 2
57586: PUSH
57587: LD_INT 5
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 2
57596: NEG
57597: PUSH
57598: LD_INT 3
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57652: LD_ADDR_VAR 0 34
57656: PUSH
57657: LD_INT 0
57659: PUSH
57660: LD_INT 4
57662: NEG
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 0
57670: PUSH
57671: LD_INT 5
57673: NEG
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 1
57681: PUSH
57682: LD_INT 4
57684: NEG
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 1
57692: PUSH
57693: LD_INT 3
57695: NEG
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 0
57703: PUSH
57704: LD_INT 3
57706: NEG
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 1
57714: NEG
57715: PUSH
57716: LD_INT 4
57718: NEG
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 1
57726: NEG
57727: PUSH
57728: LD_INT 5
57730: NEG
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 2
57738: PUSH
57739: LD_INT 3
57741: NEG
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 2
57749: NEG
57750: PUSH
57751: LD_INT 5
57753: NEG
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 3
57761: PUSH
57762: LD_INT 0
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 3
57771: PUSH
57772: LD_INT 1
57774: NEG
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 4
57782: PUSH
57783: LD_INT 0
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 4
57792: PUSH
57793: LD_INT 1
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 3
57802: PUSH
57803: LD_INT 1
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 2
57812: PUSH
57813: LD_INT 0
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 2
57822: PUSH
57823: LD_INT 1
57825: NEG
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 2
57833: PUSH
57834: LD_INT 2
57836: NEG
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 4
57844: PUSH
57845: LD_INT 2
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 4
57854: PUSH
57855: LD_INT 4
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 4
57864: PUSH
57865: LD_INT 3
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 5
57874: PUSH
57875: LD_INT 4
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 5
57884: PUSH
57885: LD_INT 5
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 4
57894: PUSH
57895: LD_INT 5
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 3
57904: PUSH
57905: LD_INT 4
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 3
57914: PUSH
57915: LD_INT 3
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 5
57924: PUSH
57925: LD_INT 3
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 3
57934: PUSH
57935: LD_INT 5
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 0
57944: PUSH
57945: LD_INT 3
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 0
57954: PUSH
57955: LD_INT 2
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 1
57964: PUSH
57965: LD_INT 3
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 1
57974: PUSH
57975: LD_INT 4
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 0
57984: PUSH
57985: LD_INT 4
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 1
57994: NEG
57995: PUSH
57996: LD_INT 3
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 1
58005: NEG
58006: PUSH
58007: LD_INT 2
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 2
58016: PUSH
58017: LD_INT 4
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 2
58026: NEG
58027: PUSH
58028: LD_INT 2
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 4
58037: NEG
58038: PUSH
58039: LD_INT 0
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 4
58048: NEG
58049: PUSH
58050: LD_INT 1
58052: NEG
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 3
58060: NEG
58061: PUSH
58062: LD_INT 0
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 3
58071: NEG
58072: PUSH
58073: LD_INT 1
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: LD_INT 4
58082: NEG
58083: PUSH
58084: LD_INT 1
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: LD_INT 5
58093: NEG
58094: PUSH
58095: LD_INT 0
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 5
58104: NEG
58105: PUSH
58106: LD_INT 1
58108: NEG
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 5
58116: NEG
58117: PUSH
58118: LD_INT 2
58120: NEG
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 3
58128: NEG
58129: PUSH
58130: LD_INT 2
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: ST_TO_ADDR
// end ; end ;
58184: GO 58187
58186: POP
// case btype of b_depot , b_warehouse :
58187: LD_VAR 0 1
58191: PUSH
58192: LD_INT 0
58194: DOUBLE
58195: EQUAL
58196: IFTRUE 58206
58198: LD_INT 1
58200: DOUBLE
58201: EQUAL
58202: IFTRUE 58206
58204: GO 58407
58206: POP
// case nation of nation_american :
58207: LD_VAR 0 5
58211: PUSH
58212: LD_INT 1
58214: DOUBLE
58215: EQUAL
58216: IFTRUE 58220
58218: GO 58276
58220: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58221: LD_ADDR_VAR 0 9
58225: PUSH
58226: LD_VAR 0 11
58230: PUSH
58231: LD_VAR 0 12
58235: PUSH
58236: LD_VAR 0 13
58240: PUSH
58241: LD_VAR 0 14
58245: PUSH
58246: LD_VAR 0 15
58250: PUSH
58251: LD_VAR 0 16
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: PUSH
58264: LD_VAR 0 4
58268: PUSH
58269: LD_INT 1
58271: PLUS
58272: ARRAY
58273: ST_TO_ADDR
58274: GO 58405
58276: LD_INT 2
58278: DOUBLE
58279: EQUAL
58280: IFTRUE 58284
58282: GO 58340
58284: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58285: LD_ADDR_VAR 0 9
58289: PUSH
58290: LD_VAR 0 17
58294: PUSH
58295: LD_VAR 0 18
58299: PUSH
58300: LD_VAR 0 19
58304: PUSH
58305: LD_VAR 0 20
58309: PUSH
58310: LD_VAR 0 21
58314: PUSH
58315: LD_VAR 0 22
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: PUSH
58328: LD_VAR 0 4
58332: PUSH
58333: LD_INT 1
58335: PLUS
58336: ARRAY
58337: ST_TO_ADDR
58338: GO 58405
58340: LD_INT 3
58342: DOUBLE
58343: EQUAL
58344: IFTRUE 58348
58346: GO 58404
58348: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58349: LD_ADDR_VAR 0 9
58353: PUSH
58354: LD_VAR 0 23
58358: PUSH
58359: LD_VAR 0 24
58363: PUSH
58364: LD_VAR 0 25
58368: PUSH
58369: LD_VAR 0 26
58373: PUSH
58374: LD_VAR 0 27
58378: PUSH
58379: LD_VAR 0 28
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: PUSH
58392: LD_VAR 0 4
58396: PUSH
58397: LD_INT 1
58399: PLUS
58400: ARRAY
58401: ST_TO_ADDR
58402: GO 58405
58404: POP
58405: GO 58960
58407: LD_INT 2
58409: DOUBLE
58410: EQUAL
58411: IFTRUE 58421
58413: LD_INT 3
58415: DOUBLE
58416: EQUAL
58417: IFTRUE 58421
58419: GO 58477
58421: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58422: LD_ADDR_VAR 0 9
58426: PUSH
58427: LD_VAR 0 29
58431: PUSH
58432: LD_VAR 0 30
58436: PUSH
58437: LD_VAR 0 31
58441: PUSH
58442: LD_VAR 0 32
58446: PUSH
58447: LD_VAR 0 33
58451: PUSH
58452: LD_VAR 0 34
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: PUSH
58465: LD_VAR 0 4
58469: PUSH
58470: LD_INT 1
58472: PLUS
58473: ARRAY
58474: ST_TO_ADDR
58475: GO 58960
58477: LD_INT 16
58479: DOUBLE
58480: EQUAL
58481: IFTRUE 58539
58483: LD_INT 17
58485: DOUBLE
58486: EQUAL
58487: IFTRUE 58539
58489: LD_INT 18
58491: DOUBLE
58492: EQUAL
58493: IFTRUE 58539
58495: LD_INT 19
58497: DOUBLE
58498: EQUAL
58499: IFTRUE 58539
58501: LD_INT 22
58503: DOUBLE
58504: EQUAL
58505: IFTRUE 58539
58507: LD_INT 20
58509: DOUBLE
58510: EQUAL
58511: IFTRUE 58539
58513: LD_INT 21
58515: DOUBLE
58516: EQUAL
58517: IFTRUE 58539
58519: LD_INT 23
58521: DOUBLE
58522: EQUAL
58523: IFTRUE 58539
58525: LD_INT 24
58527: DOUBLE
58528: EQUAL
58529: IFTRUE 58539
58531: LD_INT 25
58533: DOUBLE
58534: EQUAL
58535: IFTRUE 58539
58537: GO 58595
58539: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58540: LD_ADDR_VAR 0 9
58544: PUSH
58545: LD_VAR 0 35
58549: PUSH
58550: LD_VAR 0 36
58554: PUSH
58555: LD_VAR 0 37
58559: PUSH
58560: LD_VAR 0 38
58564: PUSH
58565: LD_VAR 0 39
58569: PUSH
58570: LD_VAR 0 40
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: PUSH
58583: LD_VAR 0 4
58587: PUSH
58588: LD_INT 1
58590: PLUS
58591: ARRAY
58592: ST_TO_ADDR
58593: GO 58960
58595: LD_INT 6
58597: DOUBLE
58598: EQUAL
58599: IFTRUE 58651
58601: LD_INT 7
58603: DOUBLE
58604: EQUAL
58605: IFTRUE 58651
58607: LD_INT 8
58609: DOUBLE
58610: EQUAL
58611: IFTRUE 58651
58613: LD_INT 13
58615: DOUBLE
58616: EQUAL
58617: IFTRUE 58651
58619: LD_INT 12
58621: DOUBLE
58622: EQUAL
58623: IFTRUE 58651
58625: LD_INT 15
58627: DOUBLE
58628: EQUAL
58629: IFTRUE 58651
58631: LD_INT 11
58633: DOUBLE
58634: EQUAL
58635: IFTRUE 58651
58637: LD_INT 14
58639: DOUBLE
58640: EQUAL
58641: IFTRUE 58651
58643: LD_INT 10
58645: DOUBLE
58646: EQUAL
58647: IFTRUE 58651
58649: GO 58707
58651: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58652: LD_ADDR_VAR 0 9
58656: PUSH
58657: LD_VAR 0 41
58661: PUSH
58662: LD_VAR 0 42
58666: PUSH
58667: LD_VAR 0 43
58671: PUSH
58672: LD_VAR 0 44
58676: PUSH
58677: LD_VAR 0 45
58681: PUSH
58682: LD_VAR 0 46
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: PUSH
58695: LD_VAR 0 4
58699: PUSH
58700: LD_INT 1
58702: PLUS
58703: ARRAY
58704: ST_TO_ADDR
58705: GO 58960
58707: LD_INT 36
58709: DOUBLE
58710: EQUAL
58711: IFTRUE 58715
58713: GO 58771
58715: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58716: LD_ADDR_VAR 0 9
58720: PUSH
58721: LD_VAR 0 47
58725: PUSH
58726: LD_VAR 0 48
58730: PUSH
58731: LD_VAR 0 49
58735: PUSH
58736: LD_VAR 0 50
58740: PUSH
58741: LD_VAR 0 51
58745: PUSH
58746: LD_VAR 0 52
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: PUSH
58759: LD_VAR 0 4
58763: PUSH
58764: LD_INT 1
58766: PLUS
58767: ARRAY
58768: ST_TO_ADDR
58769: GO 58960
58771: LD_INT 4
58773: DOUBLE
58774: EQUAL
58775: IFTRUE 58797
58777: LD_INT 5
58779: DOUBLE
58780: EQUAL
58781: IFTRUE 58797
58783: LD_INT 34
58785: DOUBLE
58786: EQUAL
58787: IFTRUE 58797
58789: LD_INT 37
58791: DOUBLE
58792: EQUAL
58793: IFTRUE 58797
58795: GO 58853
58797: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58798: LD_ADDR_VAR 0 9
58802: PUSH
58803: LD_VAR 0 53
58807: PUSH
58808: LD_VAR 0 54
58812: PUSH
58813: LD_VAR 0 55
58817: PUSH
58818: LD_VAR 0 56
58822: PUSH
58823: LD_VAR 0 57
58827: PUSH
58828: LD_VAR 0 58
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: PUSH
58841: LD_VAR 0 4
58845: PUSH
58846: LD_INT 1
58848: PLUS
58849: ARRAY
58850: ST_TO_ADDR
58851: GO 58960
58853: LD_INT 31
58855: DOUBLE
58856: EQUAL
58857: IFTRUE 58903
58859: LD_INT 32
58861: DOUBLE
58862: EQUAL
58863: IFTRUE 58903
58865: LD_INT 33
58867: DOUBLE
58868: EQUAL
58869: IFTRUE 58903
58871: LD_INT 27
58873: DOUBLE
58874: EQUAL
58875: IFTRUE 58903
58877: LD_INT 26
58879: DOUBLE
58880: EQUAL
58881: IFTRUE 58903
58883: LD_INT 28
58885: DOUBLE
58886: EQUAL
58887: IFTRUE 58903
58889: LD_INT 29
58891: DOUBLE
58892: EQUAL
58893: IFTRUE 58903
58895: LD_INT 30
58897: DOUBLE
58898: EQUAL
58899: IFTRUE 58903
58901: GO 58959
58903: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58904: LD_ADDR_VAR 0 9
58908: PUSH
58909: LD_VAR 0 59
58913: PUSH
58914: LD_VAR 0 60
58918: PUSH
58919: LD_VAR 0 61
58923: PUSH
58924: LD_VAR 0 62
58928: PUSH
58929: LD_VAR 0 63
58933: PUSH
58934: LD_VAR 0 64
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: PUSH
58947: LD_VAR 0 4
58951: PUSH
58952: LD_INT 1
58954: PLUS
58955: ARRAY
58956: ST_TO_ADDR
58957: GO 58960
58959: POP
// temp_list2 = [ ] ;
58960: LD_ADDR_VAR 0 10
58964: PUSH
58965: EMPTY
58966: ST_TO_ADDR
// for i in temp_list do
58967: LD_ADDR_VAR 0 8
58971: PUSH
58972: LD_VAR 0 9
58976: PUSH
58977: FOR_IN
58978: IFFALSE 59030
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58980: LD_ADDR_VAR 0 10
58984: PUSH
58985: LD_VAR 0 10
58989: PUSH
58990: LD_VAR 0 8
58994: PUSH
58995: LD_INT 1
58997: ARRAY
58998: PUSH
58999: LD_VAR 0 2
59003: PLUS
59004: PUSH
59005: LD_VAR 0 8
59009: PUSH
59010: LD_INT 2
59012: ARRAY
59013: PUSH
59014: LD_VAR 0 3
59018: PLUS
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: EMPTY
59025: LIST
59026: ADD
59027: ST_TO_ADDR
59028: GO 58977
59030: POP
59031: POP
// result = temp_list2 ;
59032: LD_ADDR_VAR 0 7
59036: PUSH
59037: LD_VAR 0 10
59041: ST_TO_ADDR
// end ;
59042: LD_VAR 0 7
59046: RET
// export function EnemyInRange ( unit , dist ) ; begin
59047: LD_INT 0
59049: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59050: LD_ADDR_VAR 0 3
59054: PUSH
59055: LD_VAR 0 1
59059: PPUSH
59060: CALL_OW 255
59064: PPUSH
59065: LD_VAR 0 1
59069: PPUSH
59070: CALL_OW 250
59074: PPUSH
59075: LD_VAR 0 1
59079: PPUSH
59080: CALL_OW 251
59084: PPUSH
59085: LD_VAR 0 2
59089: PPUSH
59090: CALL 33151 0 4
59094: PUSH
59095: LD_INT 4
59097: ARRAY
59098: ST_TO_ADDR
// end ;
59099: LD_VAR 0 3
59103: RET
// export function PlayerSeeMe ( unit ) ; begin
59104: LD_INT 0
59106: PPUSH
// result := See ( your_side , unit ) ;
59107: LD_ADDR_VAR 0 2
59111: PUSH
59112: LD_OWVAR 2
59116: PPUSH
59117: LD_VAR 0 1
59121: PPUSH
59122: CALL_OW 292
59126: ST_TO_ADDR
// end ;
59127: LD_VAR 0 2
59131: RET
// export function ReverseDir ( unit ) ; begin
59132: LD_INT 0
59134: PPUSH
// if not unit then
59135: LD_VAR 0 1
59139: NOT
59140: IFFALSE 59144
// exit ;
59142: GO 59167
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59144: LD_ADDR_VAR 0 2
59148: PUSH
59149: LD_VAR 0 1
59153: PPUSH
59154: CALL_OW 254
59158: PUSH
59159: LD_INT 3
59161: PLUS
59162: PUSH
59163: LD_INT 6
59165: MOD
59166: ST_TO_ADDR
// end ;
59167: LD_VAR 0 2
59171: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
59172: LD_INT 0
59174: PPUSH
59175: PPUSH
59176: PPUSH
59177: PPUSH
59178: PPUSH
// if not hexes then
59179: LD_VAR 0 2
59183: NOT
59184: IFFALSE 59188
// exit ;
59186: GO 59336
// dist := 9999 ;
59188: LD_ADDR_VAR 0 5
59192: PUSH
59193: LD_INT 9999
59195: ST_TO_ADDR
// for i = 1 to hexes do
59196: LD_ADDR_VAR 0 4
59200: PUSH
59201: DOUBLE
59202: LD_INT 1
59204: DEC
59205: ST_TO_ADDR
59206: LD_VAR 0 2
59210: PUSH
59211: FOR_TO
59212: IFFALSE 59324
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
59214: LD_VAR 0 1
59218: PPUSH
59219: LD_VAR 0 2
59223: PUSH
59224: LD_VAR 0 4
59228: ARRAY
59229: PUSH
59230: LD_INT 1
59232: ARRAY
59233: PPUSH
59234: LD_VAR 0 2
59238: PUSH
59239: LD_VAR 0 4
59243: ARRAY
59244: PUSH
59245: LD_INT 2
59247: ARRAY
59248: PPUSH
59249: CALL_OW 297
59253: PUSH
59254: LD_VAR 0 5
59258: LESS
59259: IFFALSE 59322
// begin hex := hexes [ i ] ;
59261: LD_ADDR_VAR 0 7
59265: PUSH
59266: LD_VAR 0 2
59270: PUSH
59271: LD_VAR 0 4
59275: ARRAY
59276: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59277: LD_ADDR_VAR 0 5
59281: PUSH
59282: LD_VAR 0 1
59286: PPUSH
59287: LD_VAR 0 2
59291: PUSH
59292: LD_VAR 0 4
59296: ARRAY
59297: PUSH
59298: LD_INT 1
59300: ARRAY
59301: PPUSH
59302: LD_VAR 0 2
59306: PUSH
59307: LD_VAR 0 4
59311: ARRAY
59312: PUSH
59313: LD_INT 2
59315: ARRAY
59316: PPUSH
59317: CALL_OW 297
59321: ST_TO_ADDR
// end ; end ;
59322: GO 59211
59324: POP
59325: POP
// result := hex ;
59326: LD_ADDR_VAR 0 3
59330: PUSH
59331: LD_VAR 0 7
59335: ST_TO_ADDR
// end ;
59336: LD_VAR 0 3
59340: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59341: LD_INT 0
59343: PPUSH
59344: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59345: LD_VAR 0 1
59349: NOT
59350: PUSH
59351: LD_VAR 0 1
59355: PUSH
59356: LD_INT 21
59358: PUSH
59359: LD_INT 2
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 23
59368: PUSH
59369: LD_INT 2
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PPUSH
59380: CALL_OW 69
59384: IN
59385: NOT
59386: OR
59387: IFFALSE 59391
// exit ;
59389: GO 59438
// for i = 1 to 3 do
59391: LD_ADDR_VAR 0 3
59395: PUSH
59396: DOUBLE
59397: LD_INT 1
59399: DEC
59400: ST_TO_ADDR
59401: LD_INT 3
59403: PUSH
59404: FOR_TO
59405: IFFALSE 59436
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59407: LD_VAR 0 1
59411: PPUSH
59412: CALL_OW 250
59416: PPUSH
59417: LD_VAR 0 1
59421: PPUSH
59422: CALL_OW 251
59426: PPUSH
59427: LD_INT 1
59429: PPUSH
59430: CALL_OW 453
59434: GO 59404
59436: POP
59437: POP
// end ;
59438: LD_VAR 0 2
59442: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59443: LD_INT 0
59445: PPUSH
59446: PPUSH
59447: PPUSH
59448: PPUSH
59449: PPUSH
59450: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
59451: LD_VAR 0 1
59455: NOT
59456: PUSH
59457: LD_VAR 0 2
59461: NOT
59462: OR
59463: PUSH
59464: LD_VAR 0 1
59468: PPUSH
59469: CALL_OW 314
59473: OR
59474: IFFALSE 59478
// exit ;
59476: GO 59919
// x := GetX ( enemy_unit ) ;
59478: LD_ADDR_VAR 0 7
59482: PUSH
59483: LD_VAR 0 2
59487: PPUSH
59488: CALL_OW 250
59492: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59493: LD_ADDR_VAR 0 8
59497: PUSH
59498: LD_VAR 0 2
59502: PPUSH
59503: CALL_OW 251
59507: ST_TO_ADDR
// if not x or not y then
59508: LD_VAR 0 7
59512: NOT
59513: PUSH
59514: LD_VAR 0 8
59518: NOT
59519: OR
59520: IFFALSE 59524
// exit ;
59522: GO 59919
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59524: LD_ADDR_VAR 0 6
59528: PUSH
59529: LD_VAR 0 7
59533: PPUSH
59534: LD_INT 0
59536: PPUSH
59537: LD_INT 4
59539: PPUSH
59540: CALL_OW 272
59544: PUSH
59545: LD_VAR 0 8
59549: PPUSH
59550: LD_INT 0
59552: PPUSH
59553: LD_INT 4
59555: PPUSH
59556: CALL_OW 273
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_VAR 0 7
59569: PPUSH
59570: LD_INT 1
59572: PPUSH
59573: LD_INT 4
59575: PPUSH
59576: CALL_OW 272
59580: PUSH
59581: LD_VAR 0 8
59585: PPUSH
59586: LD_INT 1
59588: PPUSH
59589: LD_INT 4
59591: PPUSH
59592: CALL_OW 273
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_VAR 0 7
59605: PPUSH
59606: LD_INT 2
59608: PPUSH
59609: LD_INT 4
59611: PPUSH
59612: CALL_OW 272
59616: PUSH
59617: LD_VAR 0 8
59621: PPUSH
59622: LD_INT 2
59624: PPUSH
59625: LD_INT 4
59627: PPUSH
59628: CALL_OW 273
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_VAR 0 7
59641: PPUSH
59642: LD_INT 3
59644: PPUSH
59645: LD_INT 4
59647: PPUSH
59648: CALL_OW 272
59652: PUSH
59653: LD_VAR 0 8
59657: PPUSH
59658: LD_INT 3
59660: PPUSH
59661: LD_INT 4
59663: PPUSH
59664: CALL_OW 273
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_VAR 0 7
59677: PPUSH
59678: LD_INT 4
59680: PPUSH
59681: LD_INT 4
59683: PPUSH
59684: CALL_OW 272
59688: PUSH
59689: LD_VAR 0 8
59693: PPUSH
59694: LD_INT 4
59696: PPUSH
59697: LD_INT 4
59699: PPUSH
59700: CALL_OW 273
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_VAR 0 7
59713: PPUSH
59714: LD_INT 5
59716: PPUSH
59717: LD_INT 4
59719: PPUSH
59720: CALL_OW 272
59724: PUSH
59725: LD_VAR 0 8
59729: PPUSH
59730: LD_INT 5
59732: PPUSH
59733: LD_INT 4
59735: PPUSH
59736: CALL_OW 273
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: ST_TO_ADDR
// for i = tmp downto 1 do
59753: LD_ADDR_VAR 0 4
59757: PUSH
59758: DOUBLE
59759: LD_VAR 0 6
59763: INC
59764: ST_TO_ADDR
59765: LD_INT 1
59767: PUSH
59768: FOR_DOWNTO
59769: IFFALSE 59870
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59771: LD_VAR 0 6
59775: PUSH
59776: LD_VAR 0 4
59780: ARRAY
59781: PUSH
59782: LD_INT 1
59784: ARRAY
59785: PPUSH
59786: LD_VAR 0 6
59790: PUSH
59791: LD_VAR 0 4
59795: ARRAY
59796: PUSH
59797: LD_INT 2
59799: ARRAY
59800: PPUSH
59801: CALL_OW 488
59805: NOT
59806: PUSH
59807: LD_VAR 0 6
59811: PUSH
59812: LD_VAR 0 4
59816: ARRAY
59817: PUSH
59818: LD_INT 1
59820: ARRAY
59821: PPUSH
59822: LD_VAR 0 6
59826: PUSH
59827: LD_VAR 0 4
59831: ARRAY
59832: PUSH
59833: LD_INT 2
59835: ARRAY
59836: PPUSH
59837: CALL_OW 428
59841: PUSH
59842: LD_INT 0
59844: NONEQUAL
59845: OR
59846: IFFALSE 59868
// tmp := Delete ( tmp , i ) ;
59848: LD_ADDR_VAR 0 6
59852: PUSH
59853: LD_VAR 0 6
59857: PPUSH
59858: LD_VAR 0 4
59862: PPUSH
59863: CALL_OW 3
59867: ST_TO_ADDR
59868: GO 59768
59870: POP
59871: POP
// j := GetClosestHex ( unit , tmp ) ;
59872: LD_ADDR_VAR 0 5
59876: PUSH
59877: LD_VAR 0 1
59881: PPUSH
59882: LD_VAR 0 6
59886: PPUSH
59887: CALL 59172 0 2
59891: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59892: LD_VAR 0 1
59896: PPUSH
59897: LD_VAR 0 5
59901: PUSH
59902: LD_INT 1
59904: ARRAY
59905: PPUSH
59906: LD_VAR 0 5
59910: PUSH
59911: LD_INT 2
59913: ARRAY
59914: PPUSH
59915: CALL_OW 111
// end ;
59919: LD_VAR 0 3
59923: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59924: LD_INT 0
59926: PPUSH
59927: PPUSH
59928: PPUSH
// uc_side = 0 ;
59929: LD_ADDR_OWVAR 20
59933: PUSH
59934: LD_INT 0
59936: ST_TO_ADDR
// uc_nation = 0 ;
59937: LD_ADDR_OWVAR 21
59941: PUSH
59942: LD_INT 0
59944: ST_TO_ADDR
// InitHc ;
59945: CALL_OW 19
// InitVc ;
59949: CALL_OW 20
// if mastodonts then
59953: LD_VAR 0 6
59957: IFFALSE 60024
// for i = 1 to mastodonts do
59959: LD_ADDR_VAR 0 11
59963: PUSH
59964: DOUBLE
59965: LD_INT 1
59967: DEC
59968: ST_TO_ADDR
59969: LD_VAR 0 6
59973: PUSH
59974: FOR_TO
59975: IFFALSE 60022
// begin vc_chassis := 31 ;
59977: LD_ADDR_OWVAR 37
59981: PUSH
59982: LD_INT 31
59984: ST_TO_ADDR
// vc_control := control_rider ;
59985: LD_ADDR_OWVAR 38
59989: PUSH
59990: LD_INT 4
59992: ST_TO_ADDR
// animal := CreateVehicle ;
59993: LD_ADDR_VAR 0 12
59997: PUSH
59998: CALL_OW 45
60002: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60003: LD_VAR 0 12
60007: PPUSH
60008: LD_VAR 0 8
60012: PPUSH
60013: LD_INT 0
60015: PPUSH
60016: CALL 62093 0 3
// end ;
60020: GO 59974
60022: POP
60023: POP
// if horses then
60024: LD_VAR 0 5
60028: IFFALSE 60095
// for i = 1 to horses do
60030: LD_ADDR_VAR 0 11
60034: PUSH
60035: DOUBLE
60036: LD_INT 1
60038: DEC
60039: ST_TO_ADDR
60040: LD_VAR 0 5
60044: PUSH
60045: FOR_TO
60046: IFFALSE 60093
// begin hc_class := 21 ;
60048: LD_ADDR_OWVAR 28
60052: PUSH
60053: LD_INT 21
60055: ST_TO_ADDR
// hc_gallery :=  ;
60056: LD_ADDR_OWVAR 33
60060: PUSH
60061: LD_STRING 
60063: ST_TO_ADDR
// animal := CreateHuman ;
60064: LD_ADDR_VAR 0 12
60068: PUSH
60069: CALL_OW 44
60073: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60074: LD_VAR 0 12
60078: PPUSH
60079: LD_VAR 0 8
60083: PPUSH
60084: LD_INT 0
60086: PPUSH
60087: CALL 62093 0 3
// end ;
60091: GO 60045
60093: POP
60094: POP
// if birds then
60095: LD_VAR 0 1
60099: IFFALSE 60166
// for i = 1 to birds do
60101: LD_ADDR_VAR 0 11
60105: PUSH
60106: DOUBLE
60107: LD_INT 1
60109: DEC
60110: ST_TO_ADDR
60111: LD_VAR 0 1
60115: PUSH
60116: FOR_TO
60117: IFFALSE 60164
// begin hc_class = 18 ;
60119: LD_ADDR_OWVAR 28
60123: PUSH
60124: LD_INT 18
60126: ST_TO_ADDR
// hc_gallery =  ;
60127: LD_ADDR_OWVAR 33
60131: PUSH
60132: LD_STRING 
60134: ST_TO_ADDR
// animal := CreateHuman ;
60135: LD_ADDR_VAR 0 12
60139: PUSH
60140: CALL_OW 44
60144: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60145: LD_VAR 0 12
60149: PPUSH
60150: LD_VAR 0 8
60154: PPUSH
60155: LD_INT 0
60157: PPUSH
60158: CALL 62093 0 3
// end ;
60162: GO 60116
60164: POP
60165: POP
// if tigers then
60166: LD_VAR 0 2
60170: IFFALSE 60254
// for i = 1 to tigers do
60172: LD_ADDR_VAR 0 11
60176: PUSH
60177: DOUBLE
60178: LD_INT 1
60180: DEC
60181: ST_TO_ADDR
60182: LD_VAR 0 2
60186: PUSH
60187: FOR_TO
60188: IFFALSE 60252
// begin hc_class = class_tiger ;
60190: LD_ADDR_OWVAR 28
60194: PUSH
60195: LD_INT 14
60197: ST_TO_ADDR
// hc_gallery =  ;
60198: LD_ADDR_OWVAR 33
60202: PUSH
60203: LD_STRING 
60205: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60206: LD_ADDR_OWVAR 35
60210: PUSH
60211: LD_INT 7
60213: NEG
60214: PPUSH
60215: LD_INT 7
60217: PPUSH
60218: CALL_OW 12
60222: ST_TO_ADDR
// animal := CreateHuman ;
60223: LD_ADDR_VAR 0 12
60227: PUSH
60228: CALL_OW 44
60232: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60233: LD_VAR 0 12
60237: PPUSH
60238: LD_VAR 0 8
60242: PPUSH
60243: LD_INT 0
60245: PPUSH
60246: CALL 62093 0 3
// end ;
60250: GO 60187
60252: POP
60253: POP
// if apemans then
60254: LD_VAR 0 3
60258: IFFALSE 60381
// for i = 1 to apemans do
60260: LD_ADDR_VAR 0 11
60264: PUSH
60265: DOUBLE
60266: LD_INT 1
60268: DEC
60269: ST_TO_ADDR
60270: LD_VAR 0 3
60274: PUSH
60275: FOR_TO
60276: IFFALSE 60379
// begin hc_class = class_apeman ;
60278: LD_ADDR_OWVAR 28
60282: PUSH
60283: LD_INT 12
60285: ST_TO_ADDR
// hc_gallery =  ;
60286: LD_ADDR_OWVAR 33
60290: PUSH
60291: LD_STRING 
60293: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
60294: LD_ADDR_OWVAR 35
60298: PUSH
60299: LD_INT 5
60301: NEG
60302: PPUSH
60303: LD_INT 5
60305: PPUSH
60306: CALL_OW 12
60310: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60311: LD_ADDR_OWVAR 31
60315: PUSH
60316: LD_INT 1
60318: PPUSH
60319: LD_INT 3
60321: PPUSH
60322: CALL_OW 12
60326: PUSH
60327: LD_INT 1
60329: PPUSH
60330: LD_INT 3
60332: PPUSH
60333: CALL_OW 12
60337: PUSH
60338: LD_INT 0
60340: PUSH
60341: LD_INT 0
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: ST_TO_ADDR
// animal := CreateHuman ;
60350: LD_ADDR_VAR 0 12
60354: PUSH
60355: CALL_OW 44
60359: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60360: LD_VAR 0 12
60364: PPUSH
60365: LD_VAR 0 8
60369: PPUSH
60370: LD_INT 0
60372: PPUSH
60373: CALL 62093 0 3
// end ;
60377: GO 60275
60379: POP
60380: POP
// if enchidnas then
60381: LD_VAR 0 4
60385: IFFALSE 60452
// for i = 1 to enchidnas do
60387: LD_ADDR_VAR 0 11
60391: PUSH
60392: DOUBLE
60393: LD_INT 1
60395: DEC
60396: ST_TO_ADDR
60397: LD_VAR 0 4
60401: PUSH
60402: FOR_TO
60403: IFFALSE 60450
// begin hc_class = 13 ;
60405: LD_ADDR_OWVAR 28
60409: PUSH
60410: LD_INT 13
60412: ST_TO_ADDR
// hc_gallery =  ;
60413: LD_ADDR_OWVAR 33
60417: PUSH
60418: LD_STRING 
60420: ST_TO_ADDR
// animal := CreateHuman ;
60421: LD_ADDR_VAR 0 12
60425: PUSH
60426: CALL_OW 44
60430: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60431: LD_VAR 0 12
60435: PPUSH
60436: LD_VAR 0 8
60440: PPUSH
60441: LD_INT 0
60443: PPUSH
60444: CALL 62093 0 3
// end ;
60448: GO 60402
60450: POP
60451: POP
// if fishes then
60452: LD_VAR 0 7
60456: IFFALSE 60523
// for i = 1 to fishes do
60458: LD_ADDR_VAR 0 11
60462: PUSH
60463: DOUBLE
60464: LD_INT 1
60466: DEC
60467: ST_TO_ADDR
60468: LD_VAR 0 7
60472: PUSH
60473: FOR_TO
60474: IFFALSE 60521
// begin hc_class = 20 ;
60476: LD_ADDR_OWVAR 28
60480: PUSH
60481: LD_INT 20
60483: ST_TO_ADDR
// hc_gallery =  ;
60484: LD_ADDR_OWVAR 33
60488: PUSH
60489: LD_STRING 
60491: ST_TO_ADDR
// animal := CreateHuman ;
60492: LD_ADDR_VAR 0 12
60496: PUSH
60497: CALL_OW 44
60501: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60502: LD_VAR 0 12
60506: PPUSH
60507: LD_VAR 0 9
60511: PPUSH
60512: LD_INT 0
60514: PPUSH
60515: CALL 62093 0 3
// end ;
60519: GO 60473
60521: POP
60522: POP
// end ;
60523: LD_VAR 0 10
60527: RET
// export function WantHeal ( sci , unit ) ; begin
60528: LD_INT 0
60530: PPUSH
// if GetTaskList ( sci ) > 0 then
60531: LD_VAR 0 1
60535: PPUSH
60536: CALL_OW 437
60540: PUSH
60541: LD_INT 0
60543: GREATER
60544: IFFALSE 60614
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60546: LD_VAR 0 1
60550: PPUSH
60551: CALL_OW 437
60555: PUSH
60556: LD_INT 1
60558: ARRAY
60559: PUSH
60560: LD_INT 1
60562: ARRAY
60563: PUSH
60564: LD_STRING l
60566: EQUAL
60567: PUSH
60568: LD_VAR 0 1
60572: PPUSH
60573: CALL_OW 437
60577: PUSH
60578: LD_INT 1
60580: ARRAY
60581: PUSH
60582: LD_INT 4
60584: ARRAY
60585: PUSH
60586: LD_VAR 0 2
60590: EQUAL
60591: AND
60592: IFFALSE 60604
// result := true else
60594: LD_ADDR_VAR 0 3
60598: PUSH
60599: LD_INT 1
60601: ST_TO_ADDR
60602: GO 60612
// result := false ;
60604: LD_ADDR_VAR 0 3
60608: PUSH
60609: LD_INT 0
60611: ST_TO_ADDR
// end else
60612: GO 60622
// result := false ;
60614: LD_ADDR_VAR 0 3
60618: PUSH
60619: LD_INT 0
60621: ST_TO_ADDR
// end ;
60622: LD_VAR 0 3
60626: RET
// export function HealTarget ( sci ) ; begin
60627: LD_INT 0
60629: PPUSH
// if not sci then
60630: LD_VAR 0 1
60634: NOT
60635: IFFALSE 60639
// exit ;
60637: GO 60704
// result := 0 ;
60639: LD_ADDR_VAR 0 2
60643: PUSH
60644: LD_INT 0
60646: ST_TO_ADDR
// if GetTaskList ( sci ) then
60647: LD_VAR 0 1
60651: PPUSH
60652: CALL_OW 437
60656: IFFALSE 60704
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60658: LD_VAR 0 1
60662: PPUSH
60663: CALL_OW 437
60667: PUSH
60668: LD_INT 1
60670: ARRAY
60671: PUSH
60672: LD_INT 1
60674: ARRAY
60675: PUSH
60676: LD_STRING l
60678: EQUAL
60679: IFFALSE 60704
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60681: LD_ADDR_VAR 0 2
60685: PUSH
60686: LD_VAR 0 1
60690: PPUSH
60691: CALL_OW 437
60695: PUSH
60696: LD_INT 1
60698: ARRAY
60699: PUSH
60700: LD_INT 4
60702: ARRAY
60703: ST_TO_ADDR
// end ;
60704: LD_VAR 0 2
60708: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60709: LD_INT 0
60711: PPUSH
60712: PPUSH
60713: PPUSH
60714: PPUSH
// if not base_units then
60715: LD_VAR 0 1
60719: NOT
60720: IFFALSE 60724
// exit ;
60722: GO 60811
// result := false ;
60724: LD_ADDR_VAR 0 2
60728: PUSH
60729: LD_INT 0
60731: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60732: LD_ADDR_VAR 0 5
60736: PUSH
60737: LD_VAR 0 1
60741: PPUSH
60742: LD_INT 21
60744: PUSH
60745: LD_INT 3
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PPUSH
60752: CALL_OW 72
60756: ST_TO_ADDR
// if not tmp then
60757: LD_VAR 0 5
60761: NOT
60762: IFFALSE 60766
// exit ;
60764: GO 60811
// for i in tmp do
60766: LD_ADDR_VAR 0 3
60770: PUSH
60771: LD_VAR 0 5
60775: PUSH
60776: FOR_IN
60777: IFFALSE 60809
// begin result := EnemyInRange ( i , 22 ) ;
60779: LD_ADDR_VAR 0 2
60783: PUSH
60784: LD_VAR 0 3
60788: PPUSH
60789: LD_INT 22
60791: PPUSH
60792: CALL 59047 0 2
60796: ST_TO_ADDR
// if result then
60797: LD_VAR 0 2
60801: IFFALSE 60807
// exit ;
60803: POP
60804: POP
60805: GO 60811
// end ;
60807: GO 60776
60809: POP
60810: POP
// end ;
60811: LD_VAR 0 2
60815: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
60816: LD_INT 0
60818: PPUSH
60819: PPUSH
// if not units then
60820: LD_VAR 0 1
60824: NOT
60825: IFFALSE 60829
// exit ;
60827: GO 60899
// result := [ ] ;
60829: LD_ADDR_VAR 0 3
60833: PUSH
60834: EMPTY
60835: ST_TO_ADDR
// for i in units do
60836: LD_ADDR_VAR 0 4
60840: PUSH
60841: LD_VAR 0 1
60845: PUSH
60846: FOR_IN
60847: IFFALSE 60897
// if GetTag ( i ) = tag then
60849: LD_VAR 0 4
60853: PPUSH
60854: CALL_OW 110
60858: PUSH
60859: LD_VAR 0 2
60863: EQUAL
60864: IFFALSE 60895
// result := Insert ( result , result + 1 , i ) ;
60866: LD_ADDR_VAR 0 3
60870: PUSH
60871: LD_VAR 0 3
60875: PPUSH
60876: LD_VAR 0 3
60880: PUSH
60881: LD_INT 1
60883: PLUS
60884: PPUSH
60885: LD_VAR 0 4
60889: PPUSH
60890: CALL_OW 2
60894: ST_TO_ADDR
60895: GO 60846
60897: POP
60898: POP
// end ;
60899: LD_VAR 0 3
60903: RET
// export function IsDriver ( un ) ; begin
60904: LD_INT 0
60906: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60907: LD_ADDR_VAR 0 2
60911: PUSH
60912: LD_VAR 0 1
60916: PUSH
60917: LD_INT 55
60919: PUSH
60920: EMPTY
60921: LIST
60922: PPUSH
60923: CALL_OW 69
60927: IN
60928: ST_TO_ADDR
// end ;
60929: LD_VAR 0 2
60933: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60934: LD_INT 0
60936: PPUSH
60937: PPUSH
// list := [ ] ;
60938: LD_ADDR_VAR 0 5
60942: PUSH
60943: EMPTY
60944: ST_TO_ADDR
// case d of 0 :
60945: LD_VAR 0 3
60949: PUSH
60950: LD_INT 0
60952: DOUBLE
60953: EQUAL
60954: IFTRUE 60958
60956: GO 61091
60958: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60959: LD_ADDR_VAR 0 5
60963: PUSH
60964: LD_VAR 0 1
60968: PUSH
60969: LD_INT 4
60971: MINUS
60972: PUSH
60973: LD_VAR 0 2
60977: PUSH
60978: LD_INT 4
60980: MINUS
60981: PUSH
60982: LD_INT 2
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: LIST
60989: PUSH
60990: LD_VAR 0 1
60994: PUSH
60995: LD_INT 3
60997: MINUS
60998: PUSH
60999: LD_VAR 0 2
61003: PUSH
61004: LD_INT 1
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: LIST
61011: PUSH
61012: LD_VAR 0 1
61016: PUSH
61017: LD_INT 4
61019: PLUS
61020: PUSH
61021: LD_VAR 0 2
61025: PUSH
61026: LD_INT 4
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: LIST
61033: PUSH
61034: LD_VAR 0 1
61038: PUSH
61039: LD_INT 3
61041: PLUS
61042: PUSH
61043: LD_VAR 0 2
61047: PUSH
61048: LD_INT 3
61050: PLUS
61051: PUSH
61052: LD_INT 5
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: LIST
61059: PUSH
61060: LD_VAR 0 1
61064: PUSH
61065: LD_VAR 0 2
61069: PUSH
61070: LD_INT 4
61072: PLUS
61073: PUSH
61074: LD_INT 0
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: LIST
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: ST_TO_ADDR
// end ; 1 :
61089: GO 61789
61091: LD_INT 1
61093: DOUBLE
61094: EQUAL
61095: IFTRUE 61099
61097: GO 61232
61099: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61100: LD_ADDR_VAR 0 5
61104: PUSH
61105: LD_VAR 0 1
61109: PUSH
61110: LD_VAR 0 2
61114: PUSH
61115: LD_INT 4
61117: MINUS
61118: PUSH
61119: LD_INT 3
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: LIST
61126: PUSH
61127: LD_VAR 0 1
61131: PUSH
61132: LD_INT 3
61134: MINUS
61135: PUSH
61136: LD_VAR 0 2
61140: PUSH
61141: LD_INT 3
61143: MINUS
61144: PUSH
61145: LD_INT 2
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: LIST
61152: PUSH
61153: LD_VAR 0 1
61157: PUSH
61158: LD_INT 4
61160: MINUS
61161: PUSH
61162: LD_VAR 0 2
61166: PUSH
61167: LD_INT 1
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: LIST
61174: PUSH
61175: LD_VAR 0 1
61179: PUSH
61180: LD_VAR 0 2
61184: PUSH
61185: LD_INT 3
61187: PLUS
61188: PUSH
61189: LD_INT 0
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: LIST
61196: PUSH
61197: LD_VAR 0 1
61201: PUSH
61202: LD_INT 4
61204: PLUS
61205: PUSH
61206: LD_VAR 0 2
61210: PUSH
61211: LD_INT 4
61213: PLUS
61214: PUSH
61215: LD_INT 5
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: LIST
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: ST_TO_ADDR
// end ; 2 :
61230: GO 61789
61232: LD_INT 2
61234: DOUBLE
61235: EQUAL
61236: IFTRUE 61240
61238: GO 61369
61240: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61241: LD_ADDR_VAR 0 5
61245: PUSH
61246: LD_VAR 0 1
61250: PUSH
61251: LD_VAR 0 2
61255: PUSH
61256: LD_INT 3
61258: MINUS
61259: PUSH
61260: LD_INT 3
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: LIST
61267: PUSH
61268: LD_VAR 0 1
61272: PUSH
61273: LD_INT 4
61275: PLUS
61276: PUSH
61277: LD_VAR 0 2
61281: PUSH
61282: LD_INT 4
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: LIST
61289: PUSH
61290: LD_VAR 0 1
61294: PUSH
61295: LD_VAR 0 2
61299: PUSH
61300: LD_INT 4
61302: PLUS
61303: PUSH
61304: LD_INT 0
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: LIST
61311: PUSH
61312: LD_VAR 0 1
61316: PUSH
61317: LD_INT 3
61319: MINUS
61320: PUSH
61321: LD_VAR 0 2
61325: PUSH
61326: LD_INT 1
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: LIST
61333: PUSH
61334: LD_VAR 0 1
61338: PUSH
61339: LD_INT 4
61341: MINUS
61342: PUSH
61343: LD_VAR 0 2
61347: PUSH
61348: LD_INT 4
61350: MINUS
61351: PUSH
61352: LD_INT 2
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: LIST
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: ST_TO_ADDR
// end ; 3 :
61367: GO 61789
61369: LD_INT 3
61371: DOUBLE
61372: EQUAL
61373: IFTRUE 61377
61375: GO 61510
61377: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61378: LD_ADDR_VAR 0 5
61382: PUSH
61383: LD_VAR 0 1
61387: PUSH
61388: LD_INT 3
61390: PLUS
61391: PUSH
61392: LD_VAR 0 2
61396: PUSH
61397: LD_INT 4
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: LIST
61404: PUSH
61405: LD_VAR 0 1
61409: PUSH
61410: LD_INT 4
61412: PLUS
61413: PUSH
61414: LD_VAR 0 2
61418: PUSH
61419: LD_INT 4
61421: PLUS
61422: PUSH
61423: LD_INT 5
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: LIST
61430: PUSH
61431: LD_VAR 0 1
61435: PUSH
61436: LD_INT 4
61438: MINUS
61439: PUSH
61440: LD_VAR 0 2
61444: PUSH
61445: LD_INT 1
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: LIST
61452: PUSH
61453: LD_VAR 0 1
61457: PUSH
61458: LD_VAR 0 2
61462: PUSH
61463: LD_INT 4
61465: MINUS
61466: PUSH
61467: LD_INT 3
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: LIST
61474: PUSH
61475: LD_VAR 0 1
61479: PUSH
61480: LD_INT 3
61482: MINUS
61483: PUSH
61484: LD_VAR 0 2
61488: PUSH
61489: LD_INT 3
61491: MINUS
61492: PUSH
61493: LD_INT 2
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: LIST
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: ST_TO_ADDR
// end ; 4 :
61508: GO 61789
61510: LD_INT 4
61512: DOUBLE
61513: EQUAL
61514: IFTRUE 61518
61516: GO 61651
61518: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61519: LD_ADDR_VAR 0 5
61523: PUSH
61524: LD_VAR 0 1
61528: PUSH
61529: LD_VAR 0 2
61533: PUSH
61534: LD_INT 4
61536: PLUS
61537: PUSH
61538: LD_INT 0
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: LIST
61545: PUSH
61546: LD_VAR 0 1
61550: PUSH
61551: LD_INT 3
61553: PLUS
61554: PUSH
61555: LD_VAR 0 2
61559: PUSH
61560: LD_INT 3
61562: PLUS
61563: PUSH
61564: LD_INT 5
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: LIST
61571: PUSH
61572: LD_VAR 0 1
61576: PUSH
61577: LD_INT 4
61579: PLUS
61580: PUSH
61581: LD_VAR 0 2
61585: PUSH
61586: LD_INT 4
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: LIST
61593: PUSH
61594: LD_VAR 0 1
61598: PUSH
61599: LD_VAR 0 2
61603: PUSH
61604: LD_INT 3
61606: MINUS
61607: PUSH
61608: LD_INT 3
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: LIST
61615: PUSH
61616: LD_VAR 0 1
61620: PUSH
61621: LD_INT 4
61623: MINUS
61624: PUSH
61625: LD_VAR 0 2
61629: PUSH
61630: LD_INT 4
61632: MINUS
61633: PUSH
61634: LD_INT 2
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: LIST
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: ST_TO_ADDR
// end ; 5 :
61649: GO 61789
61651: LD_INT 5
61653: DOUBLE
61654: EQUAL
61655: IFTRUE 61659
61657: GO 61788
61659: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61660: LD_ADDR_VAR 0 5
61664: PUSH
61665: LD_VAR 0 1
61669: PUSH
61670: LD_INT 4
61672: MINUS
61673: PUSH
61674: LD_VAR 0 2
61678: PUSH
61679: LD_INT 1
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: LIST
61686: PUSH
61687: LD_VAR 0 1
61691: PUSH
61692: LD_VAR 0 2
61696: PUSH
61697: LD_INT 4
61699: MINUS
61700: PUSH
61701: LD_INT 3
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: LIST
61708: PUSH
61709: LD_VAR 0 1
61713: PUSH
61714: LD_INT 4
61716: PLUS
61717: PUSH
61718: LD_VAR 0 2
61722: PUSH
61723: LD_INT 4
61725: PLUS
61726: PUSH
61727: LD_INT 5
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: LIST
61734: PUSH
61735: LD_VAR 0 1
61739: PUSH
61740: LD_INT 3
61742: PLUS
61743: PUSH
61744: LD_VAR 0 2
61748: PUSH
61749: LD_INT 4
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: LIST
61756: PUSH
61757: LD_VAR 0 1
61761: PUSH
61762: LD_VAR 0 2
61766: PUSH
61767: LD_INT 3
61769: PLUS
61770: PUSH
61771: LD_INT 0
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: LIST
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: ST_TO_ADDR
// end ; end ;
61786: GO 61789
61788: POP
// result := list ;
61789: LD_ADDR_VAR 0 4
61793: PUSH
61794: LD_VAR 0 5
61798: ST_TO_ADDR
// end ;
61799: LD_VAR 0 4
61803: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61804: LD_INT 0
61806: PPUSH
61807: PPUSH
61808: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61809: LD_VAR 0 1
61813: NOT
61814: PUSH
61815: LD_VAR 0 2
61819: PUSH
61820: LD_INT 1
61822: PUSH
61823: LD_INT 2
61825: PUSH
61826: LD_INT 3
61828: PUSH
61829: LD_INT 4
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: IN
61838: NOT
61839: OR
61840: IFFALSE 61844
// exit ;
61842: GO 61936
// tmp := [ ] ;
61844: LD_ADDR_VAR 0 5
61848: PUSH
61849: EMPTY
61850: ST_TO_ADDR
// for i in units do
61851: LD_ADDR_VAR 0 4
61855: PUSH
61856: LD_VAR 0 1
61860: PUSH
61861: FOR_IN
61862: IFFALSE 61905
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
61864: LD_ADDR_VAR 0 5
61868: PUSH
61869: LD_VAR 0 5
61873: PPUSH
61874: LD_VAR 0 5
61878: PUSH
61879: LD_INT 1
61881: PLUS
61882: PPUSH
61883: LD_VAR 0 4
61887: PPUSH
61888: LD_VAR 0 2
61892: PPUSH
61893: CALL_OW 259
61897: PPUSH
61898: CALL_OW 2
61902: ST_TO_ADDR
61903: GO 61861
61905: POP
61906: POP
// if not tmp then
61907: LD_VAR 0 5
61911: NOT
61912: IFFALSE 61916
// exit ;
61914: GO 61936
// result := SortListByListDesc ( units , tmp ) ;
61916: LD_ADDR_VAR 0 3
61920: PUSH
61921: LD_VAR 0 1
61925: PPUSH
61926: LD_VAR 0 5
61930: PPUSH
61931: CALL_OW 77
61935: ST_TO_ADDR
// end ;
61936: LD_VAR 0 3
61940: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61941: LD_INT 0
61943: PPUSH
61944: PPUSH
61945: PPUSH
// x := GetX ( building ) ;
61946: LD_ADDR_VAR 0 4
61950: PUSH
61951: LD_VAR 0 2
61955: PPUSH
61956: CALL_OW 250
61960: ST_TO_ADDR
// y := GetY ( building ) ;
61961: LD_ADDR_VAR 0 5
61965: PUSH
61966: LD_VAR 0 2
61970: PPUSH
61971: CALL_OW 251
61975: ST_TO_ADDR
// if GetTaskList ( unit ) then
61976: LD_VAR 0 1
61980: PPUSH
61981: CALL_OW 437
61985: IFFALSE 62080
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61987: LD_STRING e
61989: PUSH
61990: LD_VAR 0 1
61994: PPUSH
61995: CALL_OW 437
61999: PUSH
62000: LD_INT 1
62002: ARRAY
62003: PUSH
62004: LD_INT 1
62006: ARRAY
62007: EQUAL
62008: PUSH
62009: LD_VAR 0 4
62013: PUSH
62014: LD_VAR 0 1
62018: PPUSH
62019: CALL_OW 437
62023: PUSH
62024: LD_INT 1
62026: ARRAY
62027: PUSH
62028: LD_INT 2
62030: ARRAY
62031: EQUAL
62032: AND
62033: PUSH
62034: LD_VAR 0 5
62038: PUSH
62039: LD_VAR 0 1
62043: PPUSH
62044: CALL_OW 437
62048: PUSH
62049: LD_INT 1
62051: ARRAY
62052: PUSH
62053: LD_INT 3
62055: ARRAY
62056: EQUAL
62057: AND
62058: IFFALSE 62070
// result := true else
62060: LD_ADDR_VAR 0 3
62064: PUSH
62065: LD_INT 1
62067: ST_TO_ADDR
62068: GO 62078
// result := false ;
62070: LD_ADDR_VAR 0 3
62074: PUSH
62075: LD_INT 0
62077: ST_TO_ADDR
// end else
62078: GO 62088
// result := false ;
62080: LD_ADDR_VAR 0 3
62084: PUSH
62085: LD_INT 0
62087: ST_TO_ADDR
// end ;
62088: LD_VAR 0 3
62092: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62093: LD_INT 0
62095: PPUSH
62096: PPUSH
62097: PPUSH
62098: PPUSH
// if not unit or not area then
62099: LD_VAR 0 1
62103: NOT
62104: PUSH
62105: LD_VAR 0 2
62109: NOT
62110: OR
62111: IFFALSE 62115
// exit ;
62113: GO 62279
// tmp := AreaToList ( area , i ) ;
62115: LD_ADDR_VAR 0 6
62119: PUSH
62120: LD_VAR 0 2
62124: PPUSH
62125: LD_VAR 0 5
62129: PPUSH
62130: CALL_OW 517
62134: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62135: LD_ADDR_VAR 0 5
62139: PUSH
62140: DOUBLE
62141: LD_INT 1
62143: DEC
62144: ST_TO_ADDR
62145: LD_VAR 0 6
62149: PUSH
62150: LD_INT 1
62152: ARRAY
62153: PUSH
62154: FOR_TO
62155: IFFALSE 62277
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62157: LD_ADDR_VAR 0 7
62161: PUSH
62162: LD_VAR 0 6
62166: PUSH
62167: LD_INT 1
62169: ARRAY
62170: PUSH
62171: LD_VAR 0 5
62175: ARRAY
62176: PUSH
62177: LD_VAR 0 6
62181: PUSH
62182: LD_INT 2
62184: ARRAY
62185: PUSH
62186: LD_VAR 0 5
62190: ARRAY
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
62196: LD_VAR 0 7
62200: PUSH
62201: LD_INT 1
62203: ARRAY
62204: PPUSH
62205: LD_VAR 0 7
62209: PUSH
62210: LD_INT 2
62212: ARRAY
62213: PPUSH
62214: CALL_OW 428
62218: PUSH
62219: LD_INT 0
62221: EQUAL
62222: IFFALSE 62275
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
62224: LD_VAR 0 1
62228: PPUSH
62229: LD_VAR 0 7
62233: PUSH
62234: LD_INT 1
62236: ARRAY
62237: PPUSH
62238: LD_VAR 0 7
62242: PUSH
62243: LD_INT 2
62245: ARRAY
62246: PPUSH
62247: LD_VAR 0 3
62251: PPUSH
62252: CALL_OW 48
// result := IsPlaced ( unit ) ;
62256: LD_ADDR_VAR 0 4
62260: PUSH
62261: LD_VAR 0 1
62265: PPUSH
62266: CALL_OW 305
62270: ST_TO_ADDR
// exit ;
62271: POP
62272: POP
62273: GO 62279
// end ; end ;
62275: GO 62154
62277: POP
62278: POP
// end ;
62279: LD_VAR 0 4
62283: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62284: LD_INT 0
62286: PPUSH
62287: PPUSH
62288: PPUSH
// if not side or side > 8 then
62289: LD_VAR 0 1
62293: NOT
62294: PUSH
62295: LD_VAR 0 1
62299: PUSH
62300: LD_INT 8
62302: GREATER
62303: OR
62304: IFFALSE 62308
// exit ;
62306: GO 62495
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62308: LD_ADDR_VAR 0 4
62312: PUSH
62313: LD_INT 22
62315: PUSH
62316: LD_VAR 0 1
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 21
62327: PUSH
62328: LD_INT 3
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: EMPTY
62336: LIST
62337: LIST
62338: PPUSH
62339: CALL_OW 69
62343: ST_TO_ADDR
// if not tmp then
62344: LD_VAR 0 4
62348: NOT
62349: IFFALSE 62353
// exit ;
62351: GO 62495
// enable_addtolog := true ;
62353: LD_ADDR_OWVAR 81
62357: PUSH
62358: LD_INT 1
62360: ST_TO_ADDR
// AddToLog ( [ ) ;
62361: LD_STRING [
62363: PPUSH
62364: CALL_OW 561
// for i in tmp do
62368: LD_ADDR_VAR 0 3
62372: PUSH
62373: LD_VAR 0 4
62377: PUSH
62378: FOR_IN
62379: IFFALSE 62486
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62381: LD_STRING [
62383: PUSH
62384: LD_VAR 0 3
62388: PPUSH
62389: CALL_OW 266
62393: STR
62394: PUSH
62395: LD_STRING , 
62397: STR
62398: PUSH
62399: LD_VAR 0 3
62403: PPUSH
62404: CALL_OW 250
62408: STR
62409: PUSH
62410: LD_STRING , 
62412: STR
62413: PUSH
62414: LD_VAR 0 3
62418: PPUSH
62419: CALL_OW 251
62423: STR
62424: PUSH
62425: LD_STRING , 
62427: STR
62428: PUSH
62429: LD_VAR 0 3
62433: PPUSH
62434: CALL_OW 254
62438: STR
62439: PUSH
62440: LD_STRING , 
62442: STR
62443: PUSH
62444: LD_VAR 0 3
62448: PPUSH
62449: LD_INT 1
62451: PPUSH
62452: CALL_OW 268
62456: STR
62457: PUSH
62458: LD_STRING , 
62460: STR
62461: PUSH
62462: LD_VAR 0 3
62466: PPUSH
62467: LD_INT 2
62469: PPUSH
62470: CALL_OW 268
62474: STR
62475: PUSH
62476: LD_STRING ],
62478: STR
62479: PPUSH
62480: CALL_OW 561
// end ;
62484: GO 62378
62486: POP
62487: POP
// AddToLog ( ]; ) ;
62488: LD_STRING ];
62490: PPUSH
62491: CALL_OW 561
// end ;
62495: LD_VAR 0 2
62499: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62500: LD_INT 0
62502: PPUSH
62503: PPUSH
62504: PPUSH
62505: PPUSH
62506: PPUSH
// if not area or not rate or not max then
62507: LD_VAR 0 1
62511: NOT
62512: PUSH
62513: LD_VAR 0 2
62517: NOT
62518: OR
62519: PUSH
62520: LD_VAR 0 4
62524: NOT
62525: OR
62526: IFFALSE 62530
// exit ;
62528: GO 62722
// while 1 do
62530: LD_INT 1
62532: IFFALSE 62722
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62534: LD_ADDR_VAR 0 9
62538: PUSH
62539: LD_VAR 0 1
62543: PPUSH
62544: LD_INT 1
62546: PPUSH
62547: CALL_OW 287
62551: PUSH
62552: LD_INT 10
62554: MUL
62555: ST_TO_ADDR
// r := rate / 10 ;
62556: LD_ADDR_VAR 0 7
62560: PUSH
62561: LD_VAR 0 2
62565: PUSH
62566: LD_INT 10
62568: DIVREAL
62569: ST_TO_ADDR
// time := 1 1$00 ;
62570: LD_ADDR_VAR 0 8
62574: PUSH
62575: LD_INT 2100
62577: ST_TO_ADDR
// if amount < min then
62578: LD_VAR 0 9
62582: PUSH
62583: LD_VAR 0 3
62587: LESS
62588: IFFALSE 62606
// r := r * 2 else
62590: LD_ADDR_VAR 0 7
62594: PUSH
62595: LD_VAR 0 7
62599: PUSH
62600: LD_INT 2
62602: MUL
62603: ST_TO_ADDR
62604: GO 62632
// if amount > max then
62606: LD_VAR 0 9
62610: PUSH
62611: LD_VAR 0 4
62615: GREATER
62616: IFFALSE 62632
// r := r / 2 ;
62618: LD_ADDR_VAR 0 7
62622: PUSH
62623: LD_VAR 0 7
62627: PUSH
62628: LD_INT 2
62630: DIVREAL
62631: ST_TO_ADDR
// time := time / r ;
62632: LD_ADDR_VAR 0 8
62636: PUSH
62637: LD_VAR 0 8
62641: PUSH
62642: LD_VAR 0 7
62646: DIVREAL
62647: ST_TO_ADDR
// if time < 0 then
62648: LD_VAR 0 8
62652: PUSH
62653: LD_INT 0
62655: LESS
62656: IFFALSE 62673
// time := time * - 1 ;
62658: LD_ADDR_VAR 0 8
62662: PUSH
62663: LD_VAR 0 8
62667: PUSH
62668: LD_INT 1
62670: NEG
62671: MUL
62672: ST_TO_ADDR
// wait ( time ) ;
62673: LD_VAR 0 8
62677: PPUSH
62678: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
62682: LD_INT 35
62684: PPUSH
62685: LD_INT 875
62687: PPUSH
62688: CALL_OW 12
62692: PPUSH
62693: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62697: LD_INT 1
62699: PPUSH
62700: LD_INT 5
62702: PPUSH
62703: CALL_OW 12
62707: PPUSH
62708: LD_VAR 0 1
62712: PPUSH
62713: LD_INT 1
62715: PPUSH
62716: CALL_OW 55
// end ;
62720: GO 62530
// end ;
62722: LD_VAR 0 5
62726: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62727: LD_INT 0
62729: PPUSH
62730: PPUSH
62731: PPUSH
62732: PPUSH
62733: PPUSH
62734: PPUSH
62735: PPUSH
62736: PPUSH
// if not turrets or not factories then
62737: LD_VAR 0 1
62741: NOT
62742: PUSH
62743: LD_VAR 0 2
62747: NOT
62748: OR
62749: IFFALSE 62753
// exit ;
62751: GO 63060
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62753: LD_ADDR_VAR 0 10
62757: PUSH
62758: LD_INT 5
62760: PUSH
62761: LD_INT 6
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: LD_INT 2
62770: PUSH
62771: LD_INT 4
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: PUSH
62778: LD_INT 3
62780: PUSH
62781: LD_INT 5
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: LIST
62792: PUSH
62793: LD_INT 24
62795: PUSH
62796: LD_INT 25
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: LD_INT 23
62805: PUSH
62806: LD_INT 27
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: LD_INT 42
62819: PUSH
62820: LD_INT 43
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: PUSH
62827: LD_INT 44
62829: PUSH
62830: LD_INT 46
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: PUSH
62837: LD_INT 45
62839: PUSH
62840: LD_INT 47
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: LIST
62851: PUSH
62852: EMPTY
62853: LIST
62854: LIST
62855: LIST
62856: ST_TO_ADDR
// result := [ ] ;
62857: LD_ADDR_VAR 0 3
62861: PUSH
62862: EMPTY
62863: ST_TO_ADDR
// for i in turrets do
62864: LD_ADDR_VAR 0 4
62868: PUSH
62869: LD_VAR 0 1
62873: PUSH
62874: FOR_IN
62875: IFFALSE 63058
// begin nat := GetNation ( i ) ;
62877: LD_ADDR_VAR 0 7
62881: PUSH
62882: LD_VAR 0 4
62886: PPUSH
62887: CALL_OW 248
62891: ST_TO_ADDR
// weapon := 0 ;
62892: LD_ADDR_VAR 0 8
62896: PUSH
62897: LD_INT 0
62899: ST_TO_ADDR
// if not nat then
62900: LD_VAR 0 7
62904: NOT
62905: IFFALSE 62909
// continue ;
62907: GO 62874
// for j in list [ nat ] do
62909: LD_ADDR_VAR 0 5
62913: PUSH
62914: LD_VAR 0 10
62918: PUSH
62919: LD_VAR 0 7
62923: ARRAY
62924: PUSH
62925: FOR_IN
62926: IFFALSE 62967
// if GetBWeapon ( i ) = j [ 1 ] then
62928: LD_VAR 0 4
62932: PPUSH
62933: CALL_OW 269
62937: PUSH
62938: LD_VAR 0 5
62942: PUSH
62943: LD_INT 1
62945: ARRAY
62946: EQUAL
62947: IFFALSE 62965
// begin weapon := j [ 2 ] ;
62949: LD_ADDR_VAR 0 8
62953: PUSH
62954: LD_VAR 0 5
62958: PUSH
62959: LD_INT 2
62961: ARRAY
62962: ST_TO_ADDR
// break ;
62963: GO 62967
// end ;
62965: GO 62925
62967: POP
62968: POP
// if not weapon then
62969: LD_VAR 0 8
62973: NOT
62974: IFFALSE 62978
// continue ;
62976: GO 62874
// for k in factories do
62978: LD_ADDR_VAR 0 6
62982: PUSH
62983: LD_VAR 0 2
62987: PUSH
62988: FOR_IN
62989: IFFALSE 63054
// begin weapons := AvailableWeaponList ( k ) ;
62991: LD_ADDR_VAR 0 9
62995: PUSH
62996: LD_VAR 0 6
63000: PPUSH
63001: CALL_OW 478
63005: ST_TO_ADDR
// if not weapons then
63006: LD_VAR 0 9
63010: NOT
63011: IFFALSE 63015
// continue ;
63013: GO 62988
// if weapon in weapons then
63015: LD_VAR 0 8
63019: PUSH
63020: LD_VAR 0 9
63024: IN
63025: IFFALSE 63052
// begin result := [ i , weapon ] ;
63027: LD_ADDR_VAR 0 3
63031: PUSH
63032: LD_VAR 0 4
63036: PUSH
63037: LD_VAR 0 8
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: ST_TO_ADDR
// exit ;
63046: POP
63047: POP
63048: POP
63049: POP
63050: GO 63060
// end ; end ;
63052: GO 62988
63054: POP
63055: POP
// end ;
63056: GO 62874
63058: POP
63059: POP
// end ;
63060: LD_VAR 0 3
63064: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63065: LD_INT 0
63067: PPUSH
// if not side or side > 8 then
63068: LD_VAR 0 3
63072: NOT
63073: PUSH
63074: LD_VAR 0 3
63078: PUSH
63079: LD_INT 8
63081: GREATER
63082: OR
63083: IFFALSE 63087
// exit ;
63085: GO 63146
// if not range then
63087: LD_VAR 0 4
63091: NOT
63092: IFFALSE 63103
// range := - 12 ;
63094: LD_ADDR_VAR 0 4
63098: PUSH
63099: LD_INT 12
63101: NEG
63102: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63103: LD_VAR 0 1
63107: PPUSH
63108: LD_VAR 0 2
63112: PPUSH
63113: LD_VAR 0 3
63117: PPUSH
63118: LD_VAR 0 4
63122: PPUSH
63123: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63127: LD_VAR 0 1
63131: PPUSH
63132: LD_VAR 0 2
63136: PPUSH
63137: LD_VAR 0 3
63141: PPUSH
63142: CALL_OW 331
// end ;
63146: LD_VAR 0 5
63150: RET
// export function Video ( mode ) ; begin
63151: LD_INT 0
63153: PPUSH
// ingame_video = mode ;
63154: LD_ADDR_OWVAR 52
63158: PUSH
63159: LD_VAR 0 1
63163: ST_TO_ADDR
// interface_hidden = mode ;
63164: LD_ADDR_OWVAR 54
63168: PUSH
63169: LD_VAR 0 1
63173: ST_TO_ADDR
// end ;
63174: LD_VAR 0 2
63178: RET
// export function Join ( array , element ) ; begin
63179: LD_INT 0
63181: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63182: LD_ADDR_VAR 0 3
63186: PUSH
63187: LD_VAR 0 1
63191: PPUSH
63192: LD_VAR 0 1
63196: PUSH
63197: LD_INT 1
63199: PLUS
63200: PPUSH
63201: LD_VAR 0 2
63205: PPUSH
63206: CALL_OW 1
63210: ST_TO_ADDR
// end ;
63211: LD_VAR 0 3
63215: RET
// export function JoinUnion ( array , element ) ; begin
63216: LD_INT 0
63218: PPUSH
// result := array union element ;
63219: LD_ADDR_VAR 0 3
63223: PUSH
63224: LD_VAR 0 1
63228: PUSH
63229: LD_VAR 0 2
63233: UNION
63234: ST_TO_ADDR
// end ;
63235: LD_VAR 0 3
63239: RET
// export function GetBehemoths ( side ) ; begin
63240: LD_INT 0
63242: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
63243: LD_ADDR_VAR 0 2
63247: PUSH
63248: LD_INT 22
63250: PUSH
63251: LD_VAR 0 1
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PUSH
63260: LD_INT 31
63262: PUSH
63263: LD_INT 25
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PPUSH
63274: CALL_OW 69
63278: ST_TO_ADDR
// end ;
63279: LD_VAR 0 2
63283: RET
// export function Shuffle ( array ) ; var i , index ; begin
63284: LD_INT 0
63286: PPUSH
63287: PPUSH
63288: PPUSH
// result := [ ] ;
63289: LD_ADDR_VAR 0 2
63293: PUSH
63294: EMPTY
63295: ST_TO_ADDR
// if not array then
63296: LD_VAR 0 1
63300: NOT
63301: IFFALSE 63305
// exit ;
63303: GO 63404
// Randomize ;
63305: CALL_OW 10
// for i = array downto 1 do
63309: LD_ADDR_VAR 0 3
63313: PUSH
63314: DOUBLE
63315: LD_VAR 0 1
63319: INC
63320: ST_TO_ADDR
63321: LD_INT 1
63323: PUSH
63324: FOR_DOWNTO
63325: IFFALSE 63402
// begin index := rand ( 1 , array ) ;
63327: LD_ADDR_VAR 0 4
63331: PUSH
63332: LD_INT 1
63334: PPUSH
63335: LD_VAR 0 1
63339: PPUSH
63340: CALL_OW 12
63344: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63345: LD_ADDR_VAR 0 2
63349: PUSH
63350: LD_VAR 0 2
63354: PPUSH
63355: LD_VAR 0 2
63359: PUSH
63360: LD_INT 1
63362: PLUS
63363: PPUSH
63364: LD_VAR 0 1
63368: PUSH
63369: LD_VAR 0 4
63373: ARRAY
63374: PPUSH
63375: CALL_OW 2
63379: ST_TO_ADDR
// array := Delete ( array , index ) ;
63380: LD_ADDR_VAR 0 1
63384: PUSH
63385: LD_VAR 0 1
63389: PPUSH
63390: LD_VAR 0 4
63394: PPUSH
63395: CALL_OW 3
63399: ST_TO_ADDR
// end ;
63400: GO 63324
63402: POP
63403: POP
// end ;
63404: LD_VAR 0 2
63408: RET
// export function GetBaseMaterials ( base ) ; begin
63409: LD_INT 0
63411: PPUSH
// result := [ 0 , 0 , 0 ] ;
63412: LD_ADDR_VAR 0 2
63416: PUSH
63417: LD_INT 0
63419: PUSH
63420: LD_INT 0
63422: PUSH
63423: LD_INT 0
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: LIST
63430: ST_TO_ADDR
// if not base then
63431: LD_VAR 0 1
63435: NOT
63436: IFFALSE 63440
// exit ;
63438: GO 63489
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63440: LD_ADDR_VAR 0 2
63444: PUSH
63445: LD_VAR 0 1
63449: PPUSH
63450: LD_INT 1
63452: PPUSH
63453: CALL_OW 275
63457: PUSH
63458: LD_VAR 0 1
63462: PPUSH
63463: LD_INT 2
63465: PPUSH
63466: CALL_OW 275
63470: PUSH
63471: LD_VAR 0 1
63475: PPUSH
63476: LD_INT 3
63478: PPUSH
63479: CALL_OW 275
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: LIST
63488: ST_TO_ADDR
// end ;
63489: LD_VAR 0 2
63493: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63494: LD_INT 0
63496: PPUSH
63497: PPUSH
// result := array ;
63498: LD_ADDR_VAR 0 3
63502: PUSH
63503: LD_VAR 0 1
63507: ST_TO_ADDR
// if size > 0 then
63508: LD_VAR 0 2
63512: PUSH
63513: LD_INT 0
63515: GREATER
63516: IFFALSE 63562
// for i := array downto size do
63518: LD_ADDR_VAR 0 4
63522: PUSH
63523: DOUBLE
63524: LD_VAR 0 1
63528: INC
63529: ST_TO_ADDR
63530: LD_VAR 0 2
63534: PUSH
63535: FOR_DOWNTO
63536: IFFALSE 63560
// result := Delete ( result , result ) ;
63538: LD_ADDR_VAR 0 3
63542: PUSH
63543: LD_VAR 0 3
63547: PPUSH
63548: LD_VAR 0 3
63552: PPUSH
63553: CALL_OW 3
63557: ST_TO_ADDR
63558: GO 63535
63560: POP
63561: POP
// end ;
63562: LD_VAR 0 3
63566: RET
// export function ComExit ( unit ) ; var tmp ; begin
63567: LD_INT 0
63569: PPUSH
63570: PPUSH
// if not IsInUnit ( unit ) then
63571: LD_VAR 0 1
63575: PPUSH
63576: CALL_OW 310
63580: NOT
63581: IFFALSE 63585
// exit ;
63583: GO 63645
// tmp := IsInUnit ( unit ) ;
63585: LD_ADDR_VAR 0 3
63589: PUSH
63590: LD_VAR 0 1
63594: PPUSH
63595: CALL_OW 310
63599: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63600: LD_VAR 0 3
63604: PPUSH
63605: CALL_OW 247
63609: PUSH
63610: LD_INT 2
63612: EQUAL
63613: IFFALSE 63626
// ComExitVehicle ( unit ) else
63615: LD_VAR 0 1
63619: PPUSH
63620: CALL_OW 121
63624: GO 63635
// ComExitBuilding ( unit ) ;
63626: LD_VAR 0 1
63630: PPUSH
63631: CALL_OW 122
// result := tmp ;
63635: LD_ADDR_VAR 0 2
63639: PUSH
63640: LD_VAR 0 3
63644: ST_TO_ADDR
// end ;
63645: LD_VAR 0 2
63649: RET
// export function ResetHc ; begin
63650: LD_INT 0
63652: PPUSH
// InitHc ;
63653: CALL_OW 19
// hc_importance := 0 ;
63657: LD_ADDR_OWVAR 32
63661: PUSH
63662: LD_INT 0
63664: ST_TO_ADDR
// end ;
63665: LD_VAR 0 1
63669: RET
