// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 46 0 0
// PrepareNature ;
  19: CALL 580 0 0
// PrepareAmericans ;
  23: CALL 826 0 0
// PrepareArabian ;
  27: CALL 10150 0 0
// if debug then
  31: LD_EXP 1
  35: IFFALSE 41
// DebugMode ;
  37: CALL 198 0 0
// Action ;
  41: CALL 4599 0 0
// end ;
  45: END
// export debug , prefix , missionStart , aviradzeSpotted , deltaSpotted , sciSpotted , aviradzeQuestDone , sciCounterKill , usAlert , usActiveDefend , timeUntilFarmer , attackDeltaAllowed , trickyMove , usPatrol , trap , lostCounter ; function Init ; begin
  46: LD_INT 0
  48: PPUSH
// debug := false ;
  49: LD_ADDR_EXP 1
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// missionStart := false ;
  57: LD_ADDR_EXP 3
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// aviradzeSpotted := false ;
  65: LD_ADDR_EXP 4
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// deltaSpotted := false ;
  73: LD_ADDR_EXP 5
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// sciSpotted := false ;
  81: LD_ADDR_EXP 6
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// sciCounterKill := 0 ;
  89: LD_ADDR_EXP 8
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// aviradzeQuestDone := false ;
  97: LD_ADDR_EXP 7
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// attackDeltaAllowed := false ;
 105: LD_ADDR_EXP 12
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usAlert := false ;
 113: LD_ADDR_EXP 9
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// usActiveDefend := false ;
 121: LD_ADDR_EXP 10
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// usPatrol := [ ] ;
 129: LD_ADDR_EXP 14
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// timeUntilFarmer := [ 40 40$00 , 30 30$00 , 20 20$00 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 11
 140: PUSH
 141: LD_INT 84000
 143: PUSH
 144: LD_INT 63000
 146: PUSH
 147: LD_INT 42000
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: PUSH
 155: LD_OWVAR 67
 159: ARRAY
 160: ST_TO_ADDR
// trickyMove := false ;
 161: LD_ADDR_EXP 13
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// prefix := 01_ ;
 169: LD_ADDR_EXP 2
 173: PUSH
 174: LD_STRING 01_
 176: ST_TO_ADDR
// trap := 0 ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// lostCounter := false ;
 185: LD_ADDR_EXP 16
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// end ;
 193: LD_VAR 0 1
 197: RET
// function DebugMode ; begin
 198: LD_INT 0
 200: PPUSH
// FogOff ( 1 ) ;
 201: LD_INT 1
 203: PPUSH
 204: CALL_OW 344
// Difficulty := 2 ;
 208: LD_ADDR_OWVAR 67
 212: PUSH
 213: LD_INT 2
 215: ST_TO_ADDR
// end ; end_of_file
 216: LD_VAR 0 1
 220: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 221: LD_INT 0
 223: PPUSH
 224: PPUSH
// if exist_mode then
 225: LD_VAR 0 2
 229: IFFALSE 254
// unit := CreateCharacter ( prefix & ident ) else
 231: LD_ADDR_VAR 0 5
 235: PUSH
 236: LD_VAR 0 3
 240: PUSH
 241: LD_VAR 0 1
 245: STR
 246: PPUSH
 247: CALL_OW 34
 251: ST_TO_ADDR
 252: GO 269
// unit := NewCharacter ( ident ) ;
 254: LD_ADDR_VAR 0 5
 258: PUSH
 259: LD_VAR 0 1
 263: PPUSH
 264: CALL_OW 25
 268: ST_TO_ADDR
// result := unit ;
 269: LD_ADDR_VAR 0 4
 273: PUSH
 274: LD_VAR 0 5
 278: ST_TO_ADDR
// end ;
 279: LD_VAR 0 4
 283: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 284: LD_INT 0
 286: PPUSH
// uc_side := side ;
 287: LD_ADDR_OWVAR 20
 291: PUSH
 292: LD_VAR 0 1
 296: ST_TO_ADDR
// uc_nation := nation ;
 297: LD_ADDR_OWVAR 21
 301: PUSH
 302: LD_VAR 0 2
 306: ST_TO_ADDR
// vc_chassis := chassis ;
 307: LD_ADDR_OWVAR 37
 311: PUSH
 312: LD_VAR 0 3
 316: ST_TO_ADDR
// vc_engine := engine ;
 317: LD_ADDR_OWVAR 39
 321: PUSH
 322: LD_VAR 0 4
 326: ST_TO_ADDR
// vc_control := control ;
 327: LD_ADDR_OWVAR 38
 331: PUSH
 332: LD_VAR 0 5
 336: ST_TO_ADDR
// vc_weapon := weapon ;
 337: LD_ADDR_OWVAR 40
 341: PUSH
 342: LD_VAR 0 6
 346: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 347: LD_ADDR_OWVAR 41
 351: PUSH
 352: LD_VAR 0 7
 356: ST_TO_ADDR
// result := CreateVehicle ;
 357: LD_ADDR_VAR 0 8
 361: PUSH
 362: CALL_OW 45
 366: ST_TO_ADDR
// end ;
 367: LD_VAR 0 8
 371: RET
// export function SayX ( units , ident ) ; var i ; begin
 372: LD_INT 0
 374: PPUSH
 375: PPUSH
// result := false ;
 376: LD_ADDR_VAR 0 3
 380: PUSH
 381: LD_INT 0
 383: ST_TO_ADDR
// if not units then
 384: LD_VAR 0 1
 388: NOT
 389: IFFALSE 393
// exit ;
 391: GO 447
// for i in units do
 393: LD_ADDR_VAR 0 4
 397: PUSH
 398: LD_VAR 0 1
 402: PUSH
 403: FOR_IN
 404: IFFALSE 445
// if IsOk ( i ) then
 406: LD_VAR 0 4
 410: PPUSH
 411: CALL_OW 302
 415: IFFALSE 443
// begin Say ( i , ident ) ;
 417: LD_VAR 0 4
 421: PPUSH
 422: LD_VAR 0 2
 426: PPUSH
 427: CALL_OW 88
// result := i ;
 431: LD_ADDR_VAR 0 3
 435: PUSH
 436: LD_VAR 0 4
 440: ST_TO_ADDR
// break ;
 441: GO 445
// end ;
 443: GO 403
 445: POP
 446: POP
// end ;
 447: LD_VAR 0 3
 451: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 452: LD_INT 0
 454: PPUSH
 455: PPUSH
// InitUc ;
 456: CALL_OW 18
// InitHc ;
 460: CALL_OW 19
// uc_side := 0 ;
 464: LD_ADDR_OWVAR 20
 468: PUSH
 469: LD_INT 0
 471: ST_TO_ADDR
// uc_nation := 0 ;
 472: LD_ADDR_OWVAR 21
 476: PUSH
 477: LD_INT 0
 479: ST_TO_ADDR
// for i = 1 to amount do
 480: LD_ADDR_VAR 0 4
 484: PUSH
 485: DOUBLE
 486: LD_INT 1
 488: DEC
 489: ST_TO_ADDR
 490: LD_VAR 0 2
 494: PUSH
 495: FOR_TO
 496: IFFALSE 569
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 498: LD_ADDR_OWVAR 29
 502: PUSH
 503: LD_INT 9
 505: PPUSH
 506: LD_INT 12
 508: PPUSH
 509: CALL_OW 12
 513: PUSH
 514: LD_INT 9
 516: PPUSH
 517: LD_INT 12
 519: PPUSH
 520: CALL_OW 12
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: ST_TO_ADDR
// hc_agressivity := 0 ;
 529: LD_ADDR_OWVAR 35
 533: PUSH
 534: LD_INT 0
 536: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 537: LD_INT 0
 539: PPUSH
 540: LD_INT 12
 542: PPUSH
 543: LD_INT 1
 545: PPUSH
 546: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 550: CALL_OW 44
 554: PPUSH
 555: LD_VAR 0 1
 559: PPUSH
 560: LD_INT 0
 562: PPUSH
 563: CALL_OW 49
// end ;
 567: GO 495
 569: POP
 570: POP
// InitHc ;
 571: CALL_OW 19
// end ;
 575: LD_VAR 0 3
 579: RET
// export function PrepareNature ; var i ; begin
 580: LD_INT 0
 582: PPUSH
 583: PPUSH
// SpawnApeman ( forest , 9 ) ;
 584: LD_INT 1
 586: PPUSH
 587: LD_INT 9
 589: PPUSH
 590: CALL 452 0 2
// for i := 1 to 4 do
 594: LD_ADDR_VAR 0 2
 598: PUSH
 599: DOUBLE
 600: LD_INT 1
 602: DEC
 603: ST_TO_ADDR
 604: LD_INT 4
 606: PUSH
 607: FOR_TO
 608: IFFALSE 643
// begin hc_class := 21 ;
 610: LD_ADDR_OWVAR 28
 614: PUSH
 615: LD_INT 21
 617: ST_TO_ADDR
// hc_gallery :=  ;
 618: LD_ADDR_OWVAR 33
 622: PUSH
 623: LD_STRING 
 625: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 626: CALL_OW 44
 630: PPUSH
 631: LD_INT 1
 633: PPUSH
 634: LD_INT 0
 636: PPUSH
 637: CALL_OW 49
// end ;
 641: GO 607
 643: POP
 644: POP
// for i := 1 to 2 do
 645: LD_ADDR_VAR 0 2
 649: PUSH
 650: DOUBLE
 651: LD_INT 1
 653: DEC
 654: ST_TO_ADDR
 655: LD_INT 2
 657: PUSH
 658: FOR_TO
 659: IFFALSE 694
// begin hc_class := 18 ;
 661: LD_ADDR_OWVAR 28
 665: PUSH
 666: LD_INT 18
 668: ST_TO_ADDR
// hc_gallery :=  ;
 669: LD_ADDR_OWVAR 33
 673: PUSH
 674: LD_STRING 
 676: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 677: CALL_OW 44
 681: PPUSH
 682: LD_INT 1
 684: PPUSH
 685: LD_INT 0
 687: PPUSH
 688: CALL_OW 49
// end ;
 692: GO 658
 694: POP
 695: POP
// for i := 1 to 3 do
 696: LD_ADDR_VAR 0 2
 700: PUSH
 701: DOUBLE
 702: LD_INT 1
 704: DEC
 705: ST_TO_ADDR
 706: LD_INT 3
 708: PUSH
 709: FOR_TO
 710: IFFALSE 745
// begin hc_class := 13 ;
 712: LD_ADDR_OWVAR 28
 716: PUSH
 717: LD_INT 13
 719: ST_TO_ADDR
// hc_gallery :=  ;
 720: LD_ADDR_OWVAR 33
 724: PUSH
 725: LD_STRING 
 727: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 728: CALL_OW 44
 732: PPUSH
 733: LD_INT 1
 735: PPUSH
 736: LD_INT 0
 738: PPUSH
 739: CALL_OW 49
// end ;
 743: GO 709
 745: POP
 746: POP
// end ;
 747: LD_VAR 0 1
 751: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 752: LD_INT 0
 754: PPUSH
 755: PPUSH
 756: PPUSH
// if not observer or not unit then
 757: LD_VAR 0 1
 761: NOT
 762: PUSH
 763: LD_VAR 0 2
 767: NOT
 768: OR
 769: IFFALSE 773
// exit ;
 771: GO 821
// if not See ( GetSide ( observer ) , unit ) then
 773: LD_VAR 0 1
 777: PPUSH
 778: CALL_OW 255
 782: PPUSH
 783: LD_VAR 0 2
 787: PPUSH
 788: CALL_OW 292
 792: NOT
 793: IFFALSE 797
// exit ;
 795: GO 821
// result := GetDistUnits ( observer , unit ) < 12 ;
 797: LD_ADDR_VAR 0 3
 801: PUSH
 802: LD_VAR 0 1
 806: PPUSH
 807: LD_VAR 0 2
 811: PPUSH
 812: CALL_OW 296
 816: PUSH
 817: LD_INT 12
 819: LESS
 820: ST_TO_ADDR
// end ; end_of_file
 821: LD_VAR 0 3
 825: RET
// export Gladstone , Lynch ; export usForces , usSci ; export function PrepareAmericans ; var i , un , veh , tmp , arm ; begin
 826: LD_INT 0
 828: PPUSH
 829: PPUSH
 830: PPUSH
 831: PPUSH
 832: PPUSH
 833: PPUSH
// usForces := [ ] ;
 834: LD_ADDR_EXP 19
 838: PUSH
 839: EMPTY
 840: ST_TO_ADDR
// usSci := [ ] ;
 841: LD_ADDR_EXP 20
 845: PUSH
 846: EMPTY
 847: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
 848: LD_INT 1
 850: PPUSH
 851: LD_STRING Delta
 853: PPUSH
 854: CALL_OW 500
// SetResourceType ( GetBase ( Delta ) , mat_cans , 400 ) ;
 858: LD_INT 1
 860: PPUSH
 861: CALL_OW 274
 865: PPUSH
 866: LD_INT 1
 868: PPUSH
 869: LD_INT 400
 871: PPUSH
 872: CALL_OW 277
// SetResourceType ( GetBase ( Delta ) , mat_oil , 80 ) ;
 876: LD_INT 1
 878: PPUSH
 879: CALL_OW 274
 883: PPUSH
 884: LD_INT 2
 886: PPUSH
 887: LD_INT 80
 889: PPUSH
 890: CALL_OW 277
// uc_side := 1 ;
 894: LD_ADDR_OWVAR 20
 898: PUSH
 899: LD_INT 1
 901: ST_TO_ADDR
// uc_nation := 1 ;
 902: LD_ADDR_OWVAR 21
 906: PUSH
 907: LD_INT 1
 909: ST_TO_ADDR
// InitHc ;
 910: CALL_OW 19
// hc_importance := 0 ;
 914: LD_ADDR_OWVAR 32
 918: PUSH
 919: LD_INT 0
 921: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
 922: LD_ADDR_EXP 18
 926: PUSH
 927: LD_STRING Lynch
 929: PPUSH
 930: LD_INT 0
 932: PPUSH
 933: LD_STRING 
 935: PPUSH
 936: CALL 221 0 3
 940: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false ,  ) ;
 941: LD_ADDR_EXP 17
 945: PUSH
 946: LD_STRING Gladstone
 948: PPUSH
 949: LD_INT 0
 951: PPUSH
 952: LD_STRING 
 954: PPUSH
 955: CALL 221 0 3
 959: ST_TO_ADDR
// PlaceHumanInUnit ( Lynch , Delta ) ;
 960: LD_EXP 18
 964: PPUSH
 965: LD_INT 1
 967: PPUSH
 968: CALL_OW 52
// PlaceHumanInUnit ( Gladstone , usLab ) ;
 972: LD_EXP 17
 976: PPUSH
 977: LD_INT 3
 979: PPUSH
 980: CALL_OW 52
// for i := 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
 984: LD_ADDR_VAR 0 2
 988: PUSH
 989: DOUBLE
 990: LD_INT 1
 992: DEC
 993: ST_TO_ADDR
 994: LD_INT 1
 996: PUSH
 997: LD_INT 2
 999: PUSH
1000: LD_INT 2
1002: PUSH
1003: EMPTY
1004: LIST
1005: LIST
1006: LIST
1007: PUSH
1008: LD_OWVAR 67
1012: ARRAY
1013: PUSH
1014: FOR_TO
1015: IFFALSE 1061
// begin PrepareHuman ( false , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
1017: LD_INT 0
1019: PPUSH
1020: LD_INT 2
1022: PPUSH
1023: LD_INT 1
1025: PUSH
1026: LD_INT 2
1028: PUSH
1029: LD_INT 2
1031: PUSH
1032: EMPTY
1033: LIST
1034: LIST
1035: LIST
1036: PUSH
1037: LD_OWVAR 67
1041: ARRAY
1042: PPUSH
1043: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , Delta ) ;
1047: CALL_OW 44
1051: PPUSH
1052: LD_INT 1
1054: PPUSH
1055: CALL_OW 52
// end ;
1059: GO 1014
1061: POP
1062: POP
// for i := 1 to 2 + Difficulty do
1063: LD_ADDR_VAR 0 2
1067: PUSH
1068: DOUBLE
1069: LD_INT 1
1071: DEC
1072: ST_TO_ADDR
1073: LD_INT 2
1075: PUSH
1076: LD_OWVAR 67
1080: PLUS
1081: PUSH
1082: FOR_TO
1083: IFFALSE 1168
// begin PrepareHuman ( false , 4 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
1085: LD_INT 0
1087: PPUSH
1088: LD_INT 4
1090: PPUSH
1091: LD_INT 1
1093: PUSH
1094: LD_INT 2
1096: PUSH
1097: LD_INT 2
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: LIST
1104: PUSH
1105: LD_OWVAR 67
1109: ARRAY
1110: PPUSH
1111: CALL_OW 380
// un := CreateHuman ;
1115: LD_ADDR_VAR 0 3
1119: PUSH
1120: CALL_OW 44
1124: ST_TO_ADDR
// PlaceHumanInUnit ( un , usLab ) ;
1125: LD_VAR 0 3
1129: PPUSH
1130: LD_INT 3
1132: PPUSH
1133: CALL_OW 52
// usSci := Replace ( usSci , usSci + 1 , un ) ;
1137: LD_ADDR_EXP 20
1141: PUSH
1142: LD_EXP 20
1146: PPUSH
1147: LD_EXP 20
1151: PUSH
1152: LD_INT 1
1154: PLUS
1155: PPUSH
1156: LD_VAR 0 3
1160: PPUSH
1161: CALL_OW 1
1165: ST_TO_ADDR
// end ;
1166: GO 1082
1168: POP
1169: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
1170: LD_ADDR_VAR 0 6
1174: PUSH
1175: LD_INT 22
1177: PUSH
1178: LD_INT 1
1180: PUSH
1181: EMPTY
1182: LIST
1183: LIST
1184: PUSH
1185: LD_INT 30
1187: PUSH
1188: LD_INT 4
1190: PUSH
1191: EMPTY
1192: LIST
1193: LIST
1194: PUSH
1195: EMPTY
1196: LIST
1197: LIST
1198: PPUSH
1199: CALL_OW 69
1203: ST_TO_ADDR
// for i := 1 to 3 + Difficulty do
1204: LD_ADDR_VAR 0 2
1208: PUSH
1209: DOUBLE
1210: LD_INT 1
1212: DEC
1213: ST_TO_ADDR
1214: LD_INT 3
1216: PUSH
1217: LD_OWVAR 67
1221: PLUS
1222: PUSH
1223: FOR_TO
1224: IFFALSE 1302
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
1226: LD_INT 0
1228: PPUSH
1229: LD_INT 1
1231: PPUSH
1232: LD_INT 1
1234: PUSH
1235: LD_INT 2
1237: PUSH
1238: LD_INT 3
1240: PUSH
1241: EMPTY
1242: LIST
1243: LIST
1244: LIST
1245: PUSH
1246: LD_OWVAR 67
1250: ARRAY
1251: PPUSH
1252: CALL_OW 380
// un := CreateHuman ;
1256: LD_ADDR_VAR 0 3
1260: PUSH
1261: CALL_OW 44
1265: ST_TO_ADDR
// usForces := usForces ^ un ;
1266: LD_ADDR_EXP 19
1270: PUSH
1271: LD_EXP 19
1275: PUSH
1276: LD_VAR 0 3
1280: ADD
1281: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm [ 1 ] ) ;
1282: LD_VAR 0 3
1286: PPUSH
1287: LD_VAR 0 6
1291: PUSH
1292: LD_INT 1
1294: ARRAY
1295: PPUSH
1296: CALL_OW 52
// end ;
1300: GO 1223
1302: POP
1303: POP
// PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 100 ) ;
1304: LD_INT 1
1306: PPUSH
1307: LD_INT 1
1309: PPUSH
1310: LD_INT 1
1312: PPUSH
1313: LD_INT 2
1315: PPUSH
1316: LD_INT 1
1318: PPUSH
1319: LD_INT 2
1321: PPUSH
1322: LD_INT 100
1324: PPUSH
1325: CALL 284 0 7
// veh := CreateVehicle ;
1329: LD_ADDR_VAR 0 4
1333: PUSH
1334: CALL_OW 45
1338: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1339: LD_VAR 0 4
1343: PPUSH
1344: LD_INT 2
1346: PPUSH
1347: CALL_OW 233
// PlaceUnitXY ( veh , 43 , 24 , false ) ;
1351: LD_VAR 0 4
1355: PPUSH
1356: LD_INT 43
1358: PPUSH
1359: LD_INT 24
1361: PPUSH
1362: LD_INT 0
1364: PPUSH
1365: CALL_OW 48
// end ;
1369: LD_VAR 0 1
1373: RET
// export function SendSciToForest ; var i , j , k , tmp , xy ; begin
1374: LD_INT 0
1376: PPUSH
1377: PPUSH
1378: PPUSH
1379: PPUSH
1380: PPUSH
1381: PPUSH
// if not usSci then
1382: LD_EXP 20
1386: NOT
1387: IFFALSE 1391
// exit ;
1389: GO 1565
// xy := AreaToList ( tameArea , 0 ) ;
1391: LD_ADDR_VAR 0 6
1395: PUSH
1396: LD_INT 5
1398: PPUSH
1399: LD_INT 0
1401: PPUSH
1402: CALL_OW 517
1406: ST_TO_ADDR
// for i in usSci do
1407: LD_ADDR_VAR 0 2
1411: PUSH
1412: LD_EXP 20
1416: PUSH
1417: FOR_IN
1418: IFFALSE 1563
// begin k := rand ( 1 , xy [ 1 ] ) ;
1420: LD_ADDR_VAR 0 4
1424: PUSH
1425: LD_INT 1
1427: PPUSH
1428: LD_VAR 0 6
1432: PUSH
1433: LD_INT 1
1435: ARRAY
1436: PPUSH
1437: CALL_OW 12
1441: ST_TO_ADDR
// ComExitBuilding ( i ) ;
1442: LD_VAR 0 2
1446: PPUSH
1447: CALL_OW 122
// AddComMoveXY ( i , xy [ 1 ] [ k ] , xy [ 2 ] [ k ] ) ;
1451: LD_VAR 0 2
1455: PPUSH
1456: LD_VAR 0 6
1460: PUSH
1461: LD_INT 1
1463: ARRAY
1464: PUSH
1465: LD_VAR 0 4
1469: ARRAY
1470: PPUSH
1471: LD_VAR 0 6
1475: PUSH
1476: LD_INT 2
1478: ARRAY
1479: PUSH
1480: LD_VAR 0 4
1484: ARRAY
1485: PPUSH
1486: CALL_OW 171
// for j := 1 to 2 do
1490: LD_ADDR_VAR 0 3
1494: PUSH
1495: DOUBLE
1496: LD_INT 1
1498: DEC
1499: ST_TO_ADDR
1500: LD_INT 2
1502: PUSH
1503: FOR_TO
1504: IFFALSE 1559
// begin tmp := Delete ( xy [ j ] , k ) ;
1506: LD_ADDR_VAR 0 5
1510: PUSH
1511: LD_VAR 0 6
1515: PUSH
1516: LD_VAR 0 3
1520: ARRAY
1521: PPUSH
1522: LD_VAR 0 4
1526: PPUSH
1527: CALL_OW 3
1531: ST_TO_ADDR
// xy := Replace ( xy , j , tmp ) ;
1532: LD_ADDR_VAR 0 6
1536: PUSH
1537: LD_VAR 0 6
1541: PPUSH
1542: LD_VAR 0 3
1546: PPUSH
1547: LD_VAR 0 5
1551: PPUSH
1552: CALL_OW 1
1556: ST_TO_ADDR
// end ;
1557: GO 1503
1559: POP
1560: POP
// end ;
1561: GO 1417
1563: POP
1564: POP
// end ;
1565: LD_VAR 0 1
1569: RET
// every 0 0$5 + 0 0$10 trigger usSci and not usAlert and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do var i , x , y , d , ape ;
1570: LD_EXP 20
1574: PUSH
1575: LD_EXP 9
1579: NOT
1580: AND
1581: PUSH
1582: LD_INT 22
1584: PUSH
1585: LD_INT 0
1587: PUSH
1588: EMPTY
1589: LIST
1590: LIST
1591: PUSH
1592: LD_INT 25
1594: PUSH
1595: LD_INT 12
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: PUSH
1602: EMPTY
1603: LIST
1604: LIST
1605: PPUSH
1606: CALL_OW 69
1610: AND
1611: IFFALSE 2103
1613: GO 1615
1615: DISABLE
1616: LD_INT 0
1618: PPUSH
1619: PPUSH
1620: PPUSH
1621: PPUSH
1622: PPUSH
// begin enable ;
1623: ENABLE
// if UnitFilter ( usSci , [ f_or , [ f_hastask ] , [ f_inside ] ] ) then
1624: LD_EXP 20
1628: PPUSH
1629: LD_INT 2
1631: PUSH
1632: LD_INT 60
1634: PUSH
1635: EMPTY
1636: LIST
1637: PUSH
1638: LD_INT 54
1640: PUSH
1641: EMPTY
1642: LIST
1643: PUSH
1644: EMPTY
1645: LIST
1646: LIST
1647: LIST
1648: PPUSH
1649: CALL_OW 72
1653: IFFALSE 1657
// exit ;
1655: GO 2103
// for i in usSci do
1657: LD_ADDR_VAR 0 1
1661: PUSH
1662: LD_EXP 20
1666: PUSH
1667: FOR_IN
1668: IFFALSE 2101
// begin if not HasTask ( i ) and GetLives ( i ) = 1000 then
1670: LD_VAR 0 1
1674: PPUSH
1675: CALL_OW 314
1679: NOT
1680: PUSH
1681: LD_VAR 0 1
1685: PPUSH
1686: CALL_OW 256
1690: PUSH
1691: LD_INT 1000
1693: EQUAL
1694: AND
1695: IFFALSE 1902
// begin ape := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) , i ) ;
1697: LD_ADDR_VAR 0 5
1701: PUSH
1702: LD_INT 22
1704: PUSH
1705: LD_INT 0
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: PUSH
1712: LD_INT 25
1714: PUSH
1715: LD_INT 12
1717: PUSH
1718: EMPTY
1719: LIST
1720: LIST
1721: PUSH
1722: EMPTY
1723: LIST
1724: LIST
1725: PPUSH
1726: CALL_OW 69
1730: PPUSH
1731: LD_VAR 0 1
1735: PPUSH
1736: CALL_OW 74
1740: ST_TO_ADDR
// if GetDistUnits ( i , ape ) < 10 then
1741: LD_VAR 0 1
1745: PPUSH
1746: LD_VAR 0 5
1750: PPUSH
1751: CALL_OW 296
1755: PUSH
1756: LD_INT 10
1758: LESS
1759: IFFALSE 1792
// ComTameXY ( i , GetX ( ape ) , GetY ( ape ) ) else
1761: LD_VAR 0 1
1765: PPUSH
1766: LD_VAR 0 5
1770: PPUSH
1771: CALL_OW 250
1775: PPUSH
1776: LD_VAR 0 5
1780: PPUSH
1781: CALL_OW 251
1785: PPUSH
1786: CALL_OW 131
1790: GO 1902
// begin d := rand ( 0 , 5 ) ;
1792: LD_ADDR_VAR 0 4
1796: PUSH
1797: LD_INT 0
1799: PPUSH
1800: LD_INT 5
1802: PPUSH
1803: CALL_OW 12
1807: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 3 ) ;
1808: LD_ADDR_VAR 0 2
1812: PUSH
1813: LD_VAR 0 1
1817: PPUSH
1818: CALL_OW 250
1822: PPUSH
1823: LD_VAR 0 4
1827: PPUSH
1828: LD_INT 3
1830: PPUSH
1831: CALL_OW 272
1835: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 3 ) ;
1836: LD_ADDR_VAR 0 3
1840: PUSH
1841: LD_VAR 0 1
1845: PPUSH
1846: CALL_OW 251
1850: PPUSH
1851: LD_VAR 0 4
1855: PPUSH
1856: LD_INT 3
1858: PPUSH
1859: CALL_OW 273
1863: ST_TO_ADDR
// if not ValidHex ( x , y ) then
1864: LD_VAR 0 2
1868: PPUSH
1869: LD_VAR 0 3
1873: PPUSH
1874: CALL_OW 488
1878: NOT
1879: IFFALSE 1883
// continue ;
1881: GO 1667
// ComMoveXY ( i , x , y ) ;
1883: LD_VAR 0 1
1887: PPUSH
1888: LD_VAR 0 2
1892: PPUSH
1893: LD_VAR 0 3
1897: PPUSH
1898: CALL_OW 111
// end ; end ; if GetLives ( i ) < 900 and GetDistUnitXY ( i , 37 , 23 ) > 10 then
1902: LD_VAR 0 1
1906: PPUSH
1907: CALL_OW 256
1911: PUSH
1912: LD_INT 900
1914: LESS
1915: PUSH
1916: LD_VAR 0 1
1920: PPUSH
1921: LD_INT 37
1923: PPUSH
1924: LD_INT 23
1926: PPUSH
1927: CALL_OW 297
1931: PUSH
1932: LD_INT 10
1934: GREATER
1935: AND
1936: IFFALSE 2012
// begin if IsOk ( Gladstone ) and IsInUnit ( Gladstone ) then
1938: LD_EXP 17
1942: PPUSH
1943: CALL_OW 302
1947: PUSH
1948: LD_EXP 17
1952: PPUSH
1953: CALL_OW 310
1957: AND
1958: IFFALSE 1969
// ComExitBuilding ( Gladstone ) ;
1960: LD_EXP 17
1964: PPUSH
1965: CALL_OW 122
// AddComHeal ( Gladstone , i ) ;
1969: LD_EXP 17
1973: PPUSH
1974: LD_VAR 0 1
1978: PPUSH
1979: CALL_OW 188
// AddComEnterUnit ( Gladstone , usLab ) ;
1983: LD_EXP 17
1987: PPUSH
1988: LD_INT 3
1990: PPUSH
1991: CALL_OW 180
// ComMoveXY ( i , 37 , 23 ) ;
1995: LD_VAR 0 1
1999: PPUSH
2000: LD_INT 37
2002: PPUSH
2003: LD_INT 23
2005: PPUSH
2006: CALL_OW 111
// end else
2010: GO 2099
// if GetLives ( i ) = 1000 then
2012: LD_VAR 0 1
2016: PPUSH
2017: CALL_OW 256
2021: PUSH
2022: LD_INT 1000
2024: EQUAL
2025: IFFALSE 2099
// begin if SideShoot ( i ) = 2 then
2027: LD_VAR 0 1
2031: PPUSH
2032: CALL_OW 503
2036: PUSH
2037: LD_INT 2
2039: EQUAL
2040: IFFALSE 2087
// begin if not usAlert then
2042: LD_EXP 9
2046: NOT
2047: IFFALSE 2057
// usAlert := true ;
2049: LD_ADDR_EXP 9
2053: PUSH
2054: LD_INT 1
2056: ST_TO_ADDR
// AddComEnterUnit ( i , usLab ) ;
2057: LD_VAR 0 1
2061: PPUSH
2062: LD_INT 3
2064: PPUSH
2065: CALL_OW 180
// usSci := usSci diff i ;
2069: LD_ADDR_EXP 20
2073: PUSH
2074: LD_EXP 20
2078: PUSH
2079: LD_VAR 0 1
2083: DIFF
2084: ST_TO_ADDR
// end else
2085: GO 2099
// ComMoveToArea ( i , tameArea ) ;
2087: LD_VAR 0 1
2091: PPUSH
2092: LD_INT 5
2094: PPUSH
2095: CALL_OW 113
// end ; end ;
2099: GO 1667
2101: POP
2102: POP
// end ;
2103: PPOPN 5
2105: END
// every 0 0$1 trigger not usAlert and ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 999 ] ] ] ) or FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) ) do
2106: LD_EXP 9
2110: NOT
2111: PUSH
2112: LD_INT 22
2114: PUSH
2115: LD_INT 1
2117: PUSH
2118: EMPTY
2119: LIST
2120: LIST
2121: PUSH
2122: LD_INT 21
2124: PUSH
2125: LD_INT 3
2127: PUSH
2128: EMPTY
2129: LIST
2130: LIST
2131: PUSH
2132: LD_INT 3
2134: PUSH
2135: LD_INT 57
2137: PUSH
2138: EMPTY
2139: LIST
2140: PUSH
2141: EMPTY
2142: LIST
2143: LIST
2144: PUSH
2145: LD_INT 3
2147: PUSH
2148: LD_INT 24
2150: PUSH
2151: LD_INT 999
2153: PUSH
2154: EMPTY
2155: LIST
2156: LIST
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: LIST
2166: LIST
2167: PPUSH
2168: CALL_OW 69
2172: PUSH
2173: LD_INT 7
2175: PPUSH
2176: LD_INT 22
2178: PUSH
2179: LD_INT 2
2181: PUSH
2182: EMPTY
2183: LIST
2184: LIST
2185: PPUSH
2186: CALL_OW 70
2190: OR
2191: AND
2192: IFFALSE 2205
2194: GO 2196
2196: DISABLE
// usAlert := true ;
2197: LD_ADDR_EXP 9
2201: PUSH
2202: LD_INT 1
2204: ST_TO_ADDR
2205: END
// every 0 0$1 trigger usAlert do var i , b , arm ;
2206: LD_EXP 9
2210: IFFALSE 2557
2212: GO 2214
2214: DISABLE
2215: LD_INT 0
2217: PPUSH
2218: PPUSH
2219: PPUSH
// begin usActiveDefend := true ;
2220: LD_ADDR_EXP 10
2224: PUSH
2225: LD_INT 1
2227: ST_TO_ADDR
// if not usForces then
2228: LD_EXP 19
2232: NOT
2233: IFFALSE 2237
// exit ;
2235: GO 2557
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
2237: LD_ADDR_VAR 0 3
2241: PUSH
2242: LD_INT 22
2244: PUSH
2245: LD_INT 1
2247: PUSH
2248: EMPTY
2249: LIST
2250: LIST
2251: PUSH
2252: LD_INT 30
2254: PUSH
2255: LD_INT 4
2257: PUSH
2258: EMPTY
2259: LIST
2260: LIST
2261: PUSH
2262: EMPTY
2263: LIST
2264: LIST
2265: PPUSH
2266: CALL_OW 69
2270: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
2271: LD_ADDR_VAR 0 2
2275: PUSH
2276: LD_INT 22
2278: PUSH
2279: LD_INT 1
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: PUSH
2286: LD_INT 30
2288: PUSH
2289: LD_INT 31
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: PPUSH
2300: CALL_OW 69
2304: ST_TO_ADDR
// ComExitBuilding ( Lynch ) ;
2305: LD_EXP 18
2309: PPUSH
2310: CALL_OW 122
// AddComEnterUnit ( Lynch , arm [ 1 ] ) ;
2314: LD_EXP 18
2318: PPUSH
2319: LD_VAR 0 3
2323: PUSH
2324: LD_INT 1
2326: ARRAY
2327: PPUSH
2328: CALL_OW 180
// if IsOk ( Gladstone ) then
2332: LD_EXP 17
2336: PPUSH
2337: CALL_OW 302
2341: IFFALSE 2382
// begin ComExitBuilding ( Gladstone ) ;
2343: LD_EXP 17
2347: PPUSH
2348: CALL_OW 122
// AddComEnterUnit ( Gladstone , arm [ 1 ] ) ;
2352: LD_EXP 17
2356: PPUSH
2357: LD_VAR 0 3
2361: PUSH
2362: LD_INT 1
2364: ARRAY
2365: PPUSH
2366: CALL_OW 180
// AddComChangeProfession ( Gladstone , class_soldier ) ;
2370: LD_EXP 17
2374: PPUSH
2375: LD_INT 1
2377: PPUSH
2378: CALL_OW 183
// end ; ComExitBuilding ( usForces [ 1 ] ) ;
2382: LD_EXP 19
2386: PUSH
2387: LD_INT 1
2389: ARRAY
2390: PPUSH
2391: CALL_OW 122
// AddComEnterUnit ( usForces [ 1 ] , b [ 1 ] ) ;
2395: LD_EXP 19
2399: PUSH
2400: LD_INT 1
2402: ARRAY
2403: PPUSH
2404: LD_VAR 0 2
2408: PUSH
2409: LD_INT 1
2411: ARRAY
2412: PPUSH
2413: CALL_OW 180
// ComExitBuilding ( usForces [ 2 ] ) ;
2417: LD_EXP 19
2421: PUSH
2422: LD_INT 2
2424: ARRAY
2425: PPUSH
2426: CALL_OW 122
// AddComEnterUnit ( usForces [ 2 ] , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
2430: LD_EXP 19
2434: PUSH
2435: LD_INT 2
2437: ARRAY
2438: PPUSH
2439: LD_INT 22
2441: PUSH
2442: LD_INT 1
2444: PUSH
2445: EMPTY
2446: LIST
2447: LIST
2448: PUSH
2449: LD_INT 30
2451: PUSH
2452: LD_INT 32
2454: PUSH
2455: EMPTY
2456: LIST
2457: LIST
2458: PUSH
2459: EMPTY
2460: LIST
2461: LIST
2462: PPUSH
2463: CALL_OW 69
2467: PUSH
2468: LD_INT 1
2470: ARRAY
2471: PPUSH
2472: CALL_OW 180
// if b > 1 and usForces > 2 then
2476: LD_VAR 0 2
2480: PUSH
2481: LD_INT 1
2483: GREATER
2484: PUSH
2485: LD_EXP 19
2489: PUSH
2490: LD_INT 2
2492: GREATER
2493: AND
2494: IFFALSE 2557
// begin repeat wait ( 0 0$1 ) ;
2496: LD_INT 35
2498: PPUSH
2499: CALL_OW 67
// until BuildingStatus ( b [ 2 ] ) <> bs_build ;
2503: LD_VAR 0 2
2507: PUSH
2508: LD_INT 2
2510: ARRAY
2511: PPUSH
2512: CALL_OW 461
2516: PUSH
2517: LD_INT 1
2519: NONEQUAL
2520: IFFALSE 2496
// ComExitBuilding ( usForces [ 3 ] ) ;
2522: LD_EXP 19
2526: PUSH
2527: LD_INT 3
2529: ARRAY
2530: PPUSH
2531: CALL_OW 122
// AddComEnterUnit ( usForces [ 3 ] , b [ 2 ] ) ;
2535: LD_EXP 19
2539: PUSH
2540: LD_INT 3
2542: ARRAY
2543: PPUSH
2544: LD_VAR 0 2
2548: PUSH
2549: LD_INT 2
2551: ARRAY
2552: PPUSH
2553: CALL_OW 180
// end ; end ;
2557: PPOPN 3
2559: END
// every 0 0$1 trigger GetLives ( usLab ) < 999 and usAlert and usForces do var i ;
2560: LD_INT 3
2562: PPUSH
2563: CALL_OW 256
2567: PUSH
2568: LD_INT 999
2570: LESS
2571: PUSH
2572: LD_EXP 9
2576: AND
2577: PUSH
2578: LD_EXP 19
2582: AND
2583: IFFALSE 2754
2585: GO 2587
2587: DISABLE
2588: LD_INT 0
2590: PPUSH
// begin for i in usForces do
2591: LD_ADDR_VAR 0 1
2595: PUSH
2596: LD_EXP 19
2600: PUSH
2601: FOR_IN
2602: IFFALSE 2641
// begin if IsInUnit ( i ) then
2604: LD_VAR 0 1
2608: PPUSH
2609: CALL_OW 310
2613: IFFALSE 2624
// ComExitBuilding ( i ) ;
2615: LD_VAR 0 1
2619: PPUSH
2620: CALL_OW 122
// AddComAgressiveMove ( i , 31 , 8 ) ;
2624: LD_VAR 0 1
2628: PPUSH
2629: LD_INT 31
2631: PPUSH
2632: LD_INT 8
2634: PPUSH
2635: CALL_OW 174
// end ;
2639: GO 2601
2641: POP
2642: POP
// wait ( 0 0$8 ) ;
2643: LD_INT 280
2645: PPUSH
2646: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) then
2650: LD_INT 22
2652: PUSH
2653: LD_INT 2
2655: PUSH
2656: EMPTY
2657: LIST
2658: LIST
2659: PUSH
2660: LD_INT 91
2662: PUSH
2663: LD_INT 3
2665: PUSH
2666: LD_INT 14
2668: PUSH
2669: EMPTY
2670: LIST
2671: LIST
2672: LIST
2673: PUSH
2674: EMPTY
2675: LIST
2676: LIST
2677: PPUSH
2678: CALL_OW 69
2682: IFFALSE 2732
// ComAttackUnit ( usForces , FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) [ 1 ] ) else
2684: LD_EXP 19
2688: PPUSH
2689: LD_INT 22
2691: PUSH
2692: LD_INT 2
2694: PUSH
2695: EMPTY
2696: LIST
2697: LIST
2698: PUSH
2699: LD_INT 91
2701: PUSH
2702: LD_INT 3
2704: PUSH
2705: LD_INT 14
2707: PUSH
2708: EMPTY
2709: LIST
2710: LIST
2711: LIST
2712: PUSH
2713: EMPTY
2714: LIST
2715: LIST
2716: PPUSH
2717: CALL_OW 69
2721: PUSH
2722: LD_INT 1
2724: ARRAY
2725: PPUSH
2726: CALL_OW 115
2730: GO 2754
// begin wait ( 0 0$20 ) ;
2732: LD_INT 700
2734: PPUSH
2735: CALL_OW 67
// AddComMoveXY ( usForces , 39 , 19 ) ;
2739: LD_EXP 19
2743: PPUSH
2744: LD_INT 39
2746: PPUSH
2747: LD_INT 19
2749: PPUSH
2750: CALL_OW 171
// end ; end ;
2754: PPOPN 1
2756: END
// every 0 0$3 trigger ( GetDistUnits ( Heike , Delta ) < 10 or GetLives ( usLab ) < 999 ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do var tmp , veh ;
2757: LD_EXP 21
2761: PPUSH
2762: LD_INT 1
2764: PPUSH
2765: CALL_OW 296
2769: PUSH
2770: LD_INT 10
2772: LESS
2773: PUSH
2774: LD_INT 3
2776: PPUSH
2777: CALL_OW 256
2781: PUSH
2782: LD_INT 999
2784: LESS
2785: OR
2786: PUSH
2787: LD_INT 22
2789: PUSH
2790: LD_INT 1
2792: PUSH
2793: EMPTY
2794: LIST
2795: LIST
2796: PUSH
2797: LD_INT 25
2799: PUSH
2800: LD_INT 2
2802: PUSH
2803: EMPTY
2804: LIST
2805: LIST
2806: PUSH
2807: EMPTY
2808: LIST
2809: LIST
2810: PPUSH
2811: CALL_OW 69
2815: AND
2816: IFFALSE 3000
2818: GO 2820
2820: DISABLE
2821: LD_INT 0
2823: PPUSH
2824: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
2825: LD_ADDR_VAR 0 1
2829: PUSH
2830: LD_INT 22
2832: PUSH
2833: LD_INT 1
2835: PUSH
2836: EMPTY
2837: LIST
2838: LIST
2839: PUSH
2840: LD_INT 25
2842: PUSH
2843: LD_INT 2
2845: PUSH
2846: EMPTY
2847: LIST
2848: LIST
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: PPUSH
2854: CALL_OW 69
2858: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2859: LD_ADDR_VAR 0 2
2863: PUSH
2864: LD_INT 22
2866: PUSH
2867: LD_INT 1
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: PUSH
2874: LD_INT 21
2876: PUSH
2877: LD_INT 2
2879: PUSH
2880: EMPTY
2881: LIST
2882: LIST
2883: PUSH
2884: LD_INT 58
2886: PUSH
2887: EMPTY
2888: LIST
2889: PUSH
2890: EMPTY
2891: LIST
2892: LIST
2893: LIST
2894: PPUSH
2895: CALL_OW 69
2899: ST_TO_ADDR
// if not tmp then
2900: LD_VAR 0 1
2904: NOT
2905: IFFALSE 2909
// exit ;
2907: GO 3000
// ComExitBuilding ( tmp ) ;
2909: LD_VAR 0 1
2913: PPUSH
2914: CALL_OW 122
// AddComDismantle ( tmp , usLab ) ;
2918: LD_VAR 0 1
2922: PPUSH
2923: LD_INT 3
2925: PPUSH
2926: CALL_OW 227
// if veh and IsOk ( Gladstone ) then
2930: LD_VAR 0 2
2934: PUSH
2935: LD_EXP 17
2939: PPUSH
2940: CALL_OW 302
2944: AND
2945: IFFALSE 3000
// begin if IsInUnit ( Gladstone ) then
2947: LD_EXP 17
2951: PPUSH
2952: CALL_OW 310
2956: IFFALSE 2967
// ComExitBuilding ( Gladstone ) ;
2958: LD_EXP 17
2962: PPUSH
2963: CALL_OW 122
// AddComEnterUnit ( Gladstone , veh [ 1 ] ) ;
2967: LD_EXP 17
2971: PPUSH
2972: LD_VAR 0 2
2976: PUSH
2977: LD_INT 1
2979: ARRAY
2980: PPUSH
2981: CALL_OW 180
// AddComAgressiveMove ( Gladstone , 39 , 14 ) ;
2985: LD_EXP 17
2989: PPUSH
2990: LD_INT 39
2992: PPUSH
2993: LD_INT 14
2995: PPUSH
2996: CALL_OW 174
// end ; end ;
3000: PPOPN 2
3002: END
// every 0 0$1 trigger usAlert and FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) do var i , tmp ;
3003: LD_EXP 9
3007: PUSH
3008: LD_INT 7
3010: PPUSH
3011: LD_INT 22
3013: PUSH
3014: LD_INT 1
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: PUSH
3021: LD_INT 21
3023: PUSH
3024: LD_INT 1
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: PUSH
3031: LD_INT 3
3033: PUSH
3034: LD_INT 24
3036: PUSH
3037: LD_INT 600
3039: PUSH
3040: EMPTY
3041: LIST
3042: LIST
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: PUSH
3048: EMPTY
3049: LIST
3050: LIST
3051: LIST
3052: PPUSH
3053: CALL_OW 70
3057: AND
3058: IFFALSE 3186
3060: GO 3062
3062: DISABLE
3063: LD_INT 0
3065: PPUSH
3066: PPUSH
// begin enable ;
3067: ENABLE
// tmp := FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) ;
3068: LD_ADDR_VAR 0 2
3072: PUSH
3073: LD_INT 7
3075: PPUSH
3076: LD_INT 22
3078: PUSH
3079: LD_INT 1
3081: PUSH
3082: EMPTY
3083: LIST
3084: LIST
3085: PUSH
3086: LD_INT 21
3088: PUSH
3089: LD_INT 1
3091: PUSH
3092: EMPTY
3093: LIST
3094: LIST
3095: PUSH
3096: LD_INT 3
3098: PUSH
3099: LD_INT 24
3101: PUSH
3102: LD_INT 600
3104: PUSH
3105: EMPTY
3106: LIST
3107: LIST
3108: PUSH
3109: EMPTY
3110: LIST
3111: LIST
3112: PUSH
3113: EMPTY
3114: LIST
3115: LIST
3116: LIST
3117: PPUSH
3118: CALL_OW 70
3122: ST_TO_ADDR
// if not tmp then
3123: LD_VAR 0 2
3127: NOT
3128: IFFALSE 3132
// exit ;
3130: GO 3186
// for i in tmp do
3132: LD_ADDR_VAR 0 1
3136: PUSH
3137: LD_VAR 0 2
3141: PUSH
3142: FOR_IN
3143: IFFALSE 3184
// if IsInUnit ( i ) then
3145: LD_VAR 0 1
3149: PPUSH
3150: CALL_OW 310
3154: IFFALSE 3167
// ComExitBuilding ( i ) else
3156: LD_VAR 0 1
3160: PPUSH
3161: CALL_OW 122
3165: GO 3182
// ComMoveXY ( i , 48 , 74 ) ;
3167: LD_VAR 0 1
3171: PPUSH
3172: LD_INT 48
3174: PPUSH
3175: LD_INT 74
3177: PPUSH
3178: CALL_OW 111
3182: GO 3142
3184: POP
3185: POP
// end ;
3186: PPOPN 2
3188: END
// every 5 5$00 do var i , un , tmp ;
3189: GO 3191
3191: DISABLE
3192: LD_INT 0
3194: PPUSH
3195: PPUSH
3196: PPUSH
// begin tmp := [ ] ;
3197: LD_ADDR_VAR 0 3
3201: PUSH
3202: EMPTY
3203: ST_TO_ADDR
// uc_side := 1 ;
3204: LD_ADDR_OWVAR 20
3208: PUSH
3209: LD_INT 1
3211: ST_TO_ADDR
// uc_nation := 1 ;
3212: LD_ADDR_OWVAR 21
3216: PUSH
3217: LD_INT 1
3219: ST_TO_ADDR
// case Difficulty of 1 :
3220: LD_OWVAR 67
3224: PUSH
3225: LD_INT 1
3227: DOUBLE
3228: EQUAL
3229: IFTRUE 3233
3231: GO 3336
3233: POP
// begin wait ( 1 1$00 ) ;
3234: LD_INT 2100
3236: PPUSH
3237: CALL_OW 67
// for i := 1 to 2 do
3241: LD_ADDR_VAR 0 1
3245: PUSH
3246: DOUBLE
3247: LD_INT 1
3249: DEC
3250: ST_TO_ADDR
3251: LD_INT 2
3253: PUSH
3254: FOR_TO
3255: IFFALSE 3332
// begin PrepareHuman ( false , [ 1 , 4 ] [ i mod 2 + 1 ] , 1 ) ;
3257: LD_INT 0
3259: PPUSH
3260: LD_INT 1
3262: PUSH
3263: LD_INT 4
3265: PUSH
3266: EMPTY
3267: LIST
3268: LIST
3269: PUSH
3270: LD_VAR 0 1
3274: PUSH
3275: LD_INT 2
3277: MOD
3278: PUSH
3279: LD_INT 1
3281: PLUS
3282: ARRAY
3283: PPUSH
3284: LD_INT 1
3286: PPUSH
3287: CALL_OW 380
// un := CreateHuman ;
3291: LD_ADDR_VAR 0 2
3295: PUSH
3296: CALL_OW 44
3300: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3301: LD_ADDR_VAR 0 3
3305: PUSH
3306: LD_VAR 0 3
3310: PPUSH
3311: LD_VAR 0 3
3315: PUSH
3316: LD_INT 1
3318: PLUS
3319: PPUSH
3320: LD_VAR 0 2
3324: PPUSH
3325: CALL_OW 1
3329: ST_TO_ADDR
// end ;
3330: GO 3254
3332: POP
3333: POP
// end ; 2 :
3334: GO 3730
3336: LD_INT 2
3338: DOUBLE
3339: EQUAL
3340: IFTRUE 3344
3342: GO 3478
3344: POP
// begin wait ( 0 0$30 ) ;
3345: LD_INT 1050
3347: PPUSH
3348: CALL_OW 67
// for i := 1 to 2 do
3352: LD_ADDR_VAR 0 1
3356: PUSH
3357: DOUBLE
3358: LD_INT 1
3360: DEC
3361: ST_TO_ADDR
3362: LD_INT 2
3364: PUSH
3365: FOR_TO
3366: IFFALSE 3422
// begin PrepareHuman ( false , 1 , 2 ) ;
3368: LD_INT 0
3370: PPUSH
3371: LD_INT 1
3373: PPUSH
3374: LD_INT 2
3376: PPUSH
3377: CALL_OW 380
// un := CreateHuman ;
3381: LD_ADDR_VAR 0 2
3385: PUSH
3386: CALL_OW 44
3390: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3391: LD_ADDR_VAR 0 3
3395: PUSH
3396: LD_VAR 0 3
3400: PPUSH
3401: LD_VAR 0 3
3405: PUSH
3406: LD_INT 1
3408: PLUS
3409: PPUSH
3410: LD_VAR 0 2
3414: PPUSH
3415: CALL_OW 1
3419: ST_TO_ADDR
// end ;
3420: GO 3365
3422: POP
3423: POP
// PrepareHuman ( false , 4 , 2 ) ;
3424: LD_INT 0
3426: PPUSH
3427: LD_INT 4
3429: PPUSH
3430: LD_INT 2
3432: PPUSH
3433: CALL_OW 380
// un := CreateHuman ;
3437: LD_ADDR_VAR 0 2
3441: PUSH
3442: CALL_OW 44
3446: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3447: LD_ADDR_VAR 0 3
3451: PUSH
3452: LD_VAR 0 3
3456: PPUSH
3457: LD_VAR 0 3
3461: PUSH
3462: LD_INT 1
3464: PLUS
3465: PPUSH
3466: LD_VAR 0 2
3470: PPUSH
3471: CALL_OW 1
3475: ST_TO_ADDR
// end ; 3 :
3476: GO 3730
3478: LD_INT 3
3480: DOUBLE
3481: EQUAL
3482: IFTRUE 3486
3484: GO 3729
3486: POP
// begin for i := 1 to 2 do
3487: LD_ADDR_VAR 0 1
3491: PUSH
3492: DOUBLE
3493: LD_INT 1
3495: DEC
3496: ST_TO_ADDR
3497: LD_INT 2
3499: PUSH
3500: FOR_TO
3501: IFFALSE 3557
// begin PrepareHuman ( false , 1 , 2 ) ;
3503: LD_INT 0
3505: PPUSH
3506: LD_INT 1
3508: PPUSH
3509: LD_INT 2
3511: PPUSH
3512: CALL_OW 380
// un := CreateHuman ;
3516: LD_ADDR_VAR 0 2
3520: PUSH
3521: CALL_OW 44
3525: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3526: LD_ADDR_VAR 0 3
3530: PUSH
3531: LD_VAR 0 3
3535: PPUSH
3536: LD_VAR 0 3
3540: PUSH
3541: LD_INT 1
3543: PLUS
3544: PPUSH
3545: LD_VAR 0 2
3549: PPUSH
3550: CALL_OW 1
3554: ST_TO_ADDR
// end ;
3555: GO 3500
3557: POP
3558: POP
// PrepareHuman ( false , 4 , 2 ) ;
3559: LD_INT 0
3561: PPUSH
3562: LD_INT 4
3564: PPUSH
3565: LD_INT 2
3567: PPUSH
3568: CALL_OW 380
// un := CreateHuman ;
3572: LD_ADDR_VAR 0 2
3576: PUSH
3577: CALL_OW 44
3581: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3582: LD_ADDR_VAR 0 3
3586: PUSH
3587: LD_VAR 0 3
3591: PPUSH
3592: LD_VAR 0 3
3596: PUSH
3597: LD_INT 1
3599: PLUS
3600: PPUSH
3601: LD_VAR 0 2
3605: PPUSH
3606: CALL_OW 1
3610: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_machine_gun , 90 ) ;
3611: LD_INT 1
3613: PPUSH
3614: LD_INT 1
3616: PPUSH
3617: LD_INT 2
3619: PPUSH
3620: LD_INT 2
3622: PPUSH
3623: LD_INT 1
3625: PPUSH
3626: LD_INT 2
3628: PPUSH
3629: LD_INT 90
3631: PPUSH
3632: CALL 284 0 7
// un := CreateVehicle ;
3636: LD_ADDR_VAR 0 2
3640: PUSH
3641: CALL_OW 45
3645: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3646: LD_ADDR_VAR 0 3
3650: PUSH
3651: LD_VAR 0 3
3655: PPUSH
3656: LD_VAR 0 3
3660: PUSH
3661: LD_INT 1
3663: PLUS
3664: PPUSH
3665: LD_VAR 0 2
3669: PPUSH
3670: CALL_OW 1
3674: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
3675: LD_INT 0
3677: PPUSH
3678: LD_INT 1
3680: PPUSH
3681: LD_INT 2
3683: PPUSH
3684: CALL_OW 380
// un := CreateHuman ;
3688: LD_ADDR_VAR 0 2
3692: PUSH
3693: CALL_OW 44
3697: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3698: LD_ADDR_VAR 0 3
3702: PUSH
3703: LD_VAR 0 3
3707: PPUSH
3708: LD_VAR 0 3
3712: PUSH
3713: LD_INT 1
3715: PLUS
3716: PPUSH
3717: LD_VAR 0 2
3721: PPUSH
3722: CALL_OW 1
3726: ST_TO_ADDR
// end ; end ;
3727: GO 3730
3729: POP
// for i := 1 to tmp do
3730: LD_ADDR_VAR 0 1
3734: PUSH
3735: DOUBLE
3736: LD_INT 1
3738: DEC
3739: ST_TO_ADDR
3740: LD_VAR 0 3
3744: PUSH
3745: FOR_TO
3746: IFFALSE 3911
// begin SetDir ( tmp [ i ] , 1 ) ;
3748: LD_VAR 0 3
3752: PUSH
3753: LD_VAR 0 1
3757: ARRAY
3758: PPUSH
3759: LD_INT 1
3761: PPUSH
3762: CALL_OW 233
// if GetType ( tmp [ i ] ) = unit_human then
3766: LD_VAR 0 3
3770: PUSH
3771: LD_VAR 0 1
3775: ARRAY
3776: PPUSH
3777: CALL_OW 247
3781: PUSH
3782: LD_INT 1
3784: EQUAL
3785: IFFALSE 3813
// PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) else
3787: LD_VAR 0 3
3791: PUSH
3792: LD_VAR 0 1
3796: ARRAY
3797: PPUSH
3798: LD_INT 28
3800: PPUSH
3801: LD_INT 52
3803: PPUSH
3804: LD_INT 0
3806: PPUSH
3807: CALL_OW 48
3811: GO 3881
// begin PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) ;
3813: LD_VAR 0 3
3817: PUSH
3818: LD_VAR 0 1
3822: ARRAY
3823: PPUSH
3824: LD_INT 28
3826: PPUSH
3827: LD_INT 52
3829: PPUSH
3830: LD_INT 0
3832: PPUSH
3833: CALL_OW 48
// i := i + 1 ;
3837: LD_ADDR_VAR 0 1
3841: PUSH
3842: LD_VAR 0 1
3846: PUSH
3847: LD_INT 1
3849: PLUS
3850: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ i ] , tmp [ i - 1 ] ) ;
3851: LD_VAR 0 3
3855: PUSH
3856: LD_VAR 0 1
3860: ARRAY
3861: PPUSH
3862: LD_VAR 0 3
3866: PUSH
3867: LD_VAR 0 1
3871: PUSH
3872: LD_INT 1
3874: MINUS
3875: ARRAY
3876: PPUSH
3877: CALL_OW 52
// end ; ComMoveXY ( tmp [ i ] , 43 , 56 ) ;
3881: LD_VAR 0 3
3885: PUSH
3886: LD_VAR 0 1
3890: ARRAY
3891: PPUSH
3892: LD_INT 43
3894: PPUSH
3895: LD_INT 56
3897: PPUSH
3898: CALL_OW 111
// wait ( 0 0$2 ) ;
3902: LD_INT 70
3904: PPUSH
3905: CALL_OW 67
// end ;
3909: GO 3745
3911: POP
3912: POP
// wait ( 0 0$2 ) ;
3913: LD_INT 70
3915: PPUSH
3916: CALL_OW 67
// if not FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) then
3920: LD_INT 7
3922: PPUSH
3923: LD_INT 22
3925: PUSH
3926: LD_INT 2
3928: PUSH
3929: EMPTY
3930: LIST
3931: LIST
3932: PPUSH
3933: CALL_OW 70
3937: NOT
3938: IFFALSE 4136
// begin AddComAgressiveMove ( tmp , 35 , 24 ) ;
3940: LD_VAR 0 3
3944: PPUSH
3945: LD_INT 35
3947: PPUSH
3948: LD_INT 24
3950: PPUSH
3951: CALL_OW 174
// usForces := usForces union UnitFilter ( tmp , [ f_class , 1 ] ) ;
3955: LD_ADDR_EXP 19
3959: PUSH
3960: LD_EXP 19
3964: PUSH
3965: LD_VAR 0 3
3969: PPUSH
3970: LD_INT 25
3972: PUSH
3973: LD_INT 1
3975: PUSH
3976: EMPTY
3977: LIST
3978: LIST
3979: PPUSH
3980: CALL_OW 72
3984: UNION
3985: ST_TO_ADDR
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
3986: LD_INT 22
3988: PUSH
3989: LD_INT 1
3991: PUSH
3992: EMPTY
3993: LIST
3994: LIST
3995: PUSH
3996: LD_INT 30
3998: PUSH
3999: LD_INT 4
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: PUSH
4006: EMPTY
4007: LIST
4008: LIST
4009: PPUSH
4010: CALL_OW 69
4014: PUSH
4015: LD_INT 1
4017: ARRAY
4018: PPUSH
4019: CALL_OW 313
4023: PUSH
4024: LD_INT 6
4026: LESS
4027: IFFALSE 4086
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 1 ] ) , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
4029: LD_VAR 0 3
4033: PPUSH
4034: LD_INT 25
4036: PUSH
4037: LD_INT 1
4039: PUSH
4040: EMPTY
4041: LIST
4042: LIST
4043: PPUSH
4044: CALL_OW 72
4048: PPUSH
4049: LD_INT 22
4051: PUSH
4052: LD_INT 1
4054: PUSH
4055: EMPTY
4056: LIST
4057: LIST
4058: PUSH
4059: LD_INT 30
4061: PUSH
4062: LD_INT 4
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: PUSH
4069: EMPTY
4070: LIST
4071: LIST
4072: PPUSH
4073: CALL_OW 69
4077: PUSH
4078: LD_INT 1
4080: ARRAY
4081: PPUSH
4082: CALL_OW 180
// if UnitFilter ( tmp , [ f_class , 4 ] ) then
4086: LD_VAR 0 3
4090: PPUSH
4091: LD_INT 25
4093: PUSH
4094: LD_INT 4
4096: PUSH
4097: EMPTY
4098: LIST
4099: LIST
4100: PPUSH
4101: CALL_OW 72
4105: IFFALSE 4134
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 4 ] ) , usLab ) ;
4107: LD_VAR 0 3
4111: PPUSH
4112: LD_INT 25
4114: PUSH
4115: LD_INT 4
4117: PUSH
4118: EMPTY
4119: LIST
4120: LIST
4121: PPUSH
4122: CALL_OW 72
4126: PPUSH
4127: LD_INT 3
4129: PPUSH
4130: CALL_OW 180
// end else
4134: GO 4411
// begin tmp := tmp union FilterUnitsInArea ( retreatArea , [ f_side , 1 ] ) ;
4136: LD_ADDR_VAR 0 3
4140: PUSH
4141: LD_VAR 0 3
4145: PUSH
4146: LD_INT 6
4148: PPUSH
4149: LD_INT 22
4151: PUSH
4152: LD_INT 1
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: PPUSH
4159: CALL_OW 70
4163: UNION
4164: ST_TO_ADDR
// ComMoveXY ( tmp , 45 , 54 ) ;
4165: LD_VAR 0 3
4169: PPUSH
4170: LD_INT 45
4172: PPUSH
4173: LD_INT 54
4175: PPUSH
4176: CALL_OW 111
// wait ( 0 0$3 ) ;
4180: LD_INT 105
4182: PPUSH
4183: CALL_OW 67
// AddComAgressiveMove ( tmp diff UnitFilter ( tmp , [ f_class , 4 ] ) , 35 , 24 ) ;
4187: LD_VAR 0 3
4191: PUSH
4192: LD_VAR 0 3
4196: PPUSH
4197: LD_INT 25
4199: PUSH
4200: LD_INT 4
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: PPUSH
4207: CALL_OW 72
4211: DIFF
4212: PPUSH
4213: LD_INT 35
4215: PPUSH
4216: LD_INT 24
4218: PPUSH
4219: CALL_OW 174
// AddComMoveXY ( UnitFilter ( tmp , [ f_class , 4 ] ) , 42 , 49 ) ;
4223: LD_VAR 0 3
4227: PPUSH
4228: LD_INT 25
4230: PUSH
4231: LD_INT 4
4233: PUSH
4234: EMPTY
4235: LIST
4236: LIST
4237: PPUSH
4238: CALL_OW 72
4242: PPUSH
4243: LD_INT 42
4245: PPUSH
4246: LD_INT 49
4248: PPUSH
4249: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4253: LD_INT 35
4255: PPUSH
4256: CALL_OW 67
// for i in tmp do
4260: LD_ADDR_VAR 0 1
4264: PUSH
4265: LD_VAR 0 3
4269: PUSH
4270: FOR_IN
4271: IFFALSE 4402
// if IsDead ( i ) then
4273: LD_VAR 0 1
4277: PPUSH
4278: CALL_OW 301
4282: IFFALSE 4302
// tmp := tmp diff i else
4284: LD_ADDR_VAR 0 3
4288: PUSH
4289: LD_VAR 0 3
4293: PUSH
4294: LD_VAR 0 1
4298: DIFF
4299: ST_TO_ADDR
4300: GO 4400
// if GetClass ( i ) = 1 then
4302: LD_VAR 0 1
4306: PPUSH
4307: CALL_OW 257
4311: PUSH
4312: LD_INT 1
4314: EQUAL
4315: IFFALSE 4400
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 42 , 49 ) > 6 then
4317: LD_VAR 0 1
4321: PPUSH
4322: CALL_OW 256
4326: PUSH
4327: LD_INT 600
4329: LESS
4330: PUSH
4331: LD_VAR 0 1
4335: PPUSH
4336: LD_INT 42
4338: PPUSH
4339: LD_INT 49
4341: PPUSH
4342: CALL_OW 297
4346: PUSH
4347: LD_INT 6
4349: GREATER
4350: AND
4351: IFFALSE 4370
// ComMoveXY ( i , 42 , 49 ) else
4353: LD_VAR 0 1
4357: PPUSH
4358: LD_INT 42
4360: PPUSH
4361: LD_INT 49
4363: PPUSH
4364: CALL_OW 111
4368: GO 4400
// if GetLives ( i ) = 1000 then
4370: LD_VAR 0 1
4374: PPUSH
4375: CALL_OW 256
4379: PUSH
4380: LD_INT 1000
4382: EQUAL
4383: IFFALSE 4400
// ComAgressiveMove ( i , 36 , 25 ) ;
4385: LD_VAR 0 1
4389: PPUSH
4390: LD_INT 36
4392: PPUSH
4393: LD_INT 25
4395: PPUSH
4396: CALL_OW 114
// end ;
4400: GO 4270
4402: POP
4403: POP
// until not tmp ;
4404: LD_VAR 0 3
4408: NOT
4409: IFFALSE 4253
// end ; end ;
4411: PPOPN 3
4413: END
// every 0 0$1 trigger FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) and not attackDeltaAllowed do var i , un , veh ;
4414: LD_INT 7
4416: PPUSH
4417: LD_INT 22
4419: PUSH
4420: LD_INT 2
4422: PUSH
4423: EMPTY
4424: LIST
4425: LIST
4426: PPUSH
4427: CALL_OW 70
4431: PUSH
4432: LD_EXP 12
4436: NOT
4437: AND
4438: IFFALSE 4596
4440: GO 4442
4442: DISABLE
4443: LD_INT 0
4445: PPUSH
4446: PPUSH
4447: PPUSH
// begin for i := 1 to 2 do
4448: LD_ADDR_VAR 0 1
4452: PUSH
4453: DOUBLE
4454: LD_INT 1
4456: DEC
4457: ST_TO_ADDR
4458: LD_INT 2
4460: PUSH
4461: FOR_TO
4462: IFFALSE 4594
// begin wait ( 0 0$3 ) ;
4464: LD_INT 105
4466: PPUSH
4467: CALL_OW 67
// uc_side := 1 ;
4471: LD_ADDR_OWVAR 20
4475: PUSH
4476: LD_INT 1
4478: ST_TO_ADDR
// uc_nation := 1 ;
4479: LD_ADDR_OWVAR 21
4483: PUSH
4484: LD_INT 1
4486: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 90 ) ;
4487: LD_INT 1
4489: PPUSH
4490: LD_INT 1
4492: PPUSH
4493: LD_INT 2
4495: PPUSH
4496: LD_INT 1
4498: PPUSH
4499: LD_INT 1
4501: PPUSH
4502: LD_INT 4
4504: PPUSH
4505: LD_INT 90
4507: PPUSH
4508: CALL 284 0 7
// veh := CreateVehicle ;
4512: LD_ADDR_VAR 0 3
4516: PUSH
4517: CALL_OW 45
4521: ST_TO_ADDR
// PlaceUnitXY ( veh , 29 , 52 , false ) ;
4522: LD_VAR 0 3
4526: PPUSH
4527: LD_INT 29
4529: PPUSH
4530: LD_INT 52
4532: PPUSH
4533: LD_INT 0
4535: PPUSH
4536: CALL_OW 48
// PrepareHuman ( false , 3 , 3 ) ;
4540: LD_INT 0
4542: PPUSH
4543: LD_INT 3
4545: PPUSH
4546: LD_INT 3
4548: PPUSH
4549: CALL_OW 380
// un := CreateHuman ;
4553: LD_ADDR_VAR 0 2
4557: PUSH
4558: CALL_OW 44
4562: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4563: LD_VAR 0 2
4567: PPUSH
4568: LD_VAR 0 3
4572: PPUSH
4573: CALL_OW 52
// ComAgressiveMove ( veh , 36 , 25 ) ;
4577: LD_VAR 0 3
4581: PPUSH
4582: LD_INT 36
4584: PPUSH
4585: LD_INT 25
4587: PPUSH
4588: CALL_OW 114
// end ;
4592: GO 4461
4594: POP
4595: POP
// end ; end_of_file
4596: PPOPN 3
4598: END
// export function Action ; var i , tmp ; begin
4599: LD_INT 0
4601: PPUSH
4602: PPUSH
4603: PPUSH
// InGameOn ;
4604: CALL_OW 8
// DoNotAttack ( 2 , usLab ) ;
4608: LD_INT 2
4610: PPUSH
4611: LD_INT 3
4613: PPUSH
4614: CALL_OW 471
// ComMoveXY ( Heike , 78 , 61 ) ;
4618: LD_EXP 21
4622: PPUSH
4623: LD_INT 78
4625: PPUSH
4626: LD_INT 61
4628: PPUSH
4629: CALL_OW 111
// if Mike then
4633: LD_EXP 23
4637: IFFALSE 4654
// ComMoveXY ( Mike , 80 , 66 ) ;
4639: LD_EXP 23
4643: PPUSH
4644: LD_INT 80
4646: PPUSH
4647: LD_INT 66
4649: PPUSH
4650: CALL_OW 111
// if Givi then
4654: LD_EXP 22
4658: IFFALSE 4675
// ComMoveXY ( Givi , 82 , 66 ) ;
4660: LD_EXP 22
4664: PPUSH
4665: LD_INT 82
4667: PPUSH
4668: LD_INT 66
4670: PPUSH
4671: CALL_OW 111
// if Kamil then
4675: LD_EXP 24
4679: IFFALSE 4696
// ComMoveXY ( Kamil , 82 , 67 ) ;
4681: LD_EXP 24
4685: PPUSH
4686: LD_INT 82
4688: PPUSH
4689: LD_INT 67
4691: PPUSH
4692: CALL_OW 111
// CenterNowOnUnits ( Heike ) ;
4696: LD_EXP 21
4700: PPUSH
4701: CALL_OW 87
// wait ( 0 0$2 ) ;
4705: LD_INT 70
4707: PPUSH
4708: CALL_OW 67
// if Givi and Mike then
4712: LD_EXP 22
4716: PUSH
4717: LD_EXP 23
4721: AND
4722: IFFALSE 5168
// begin AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
4724: LD_EXP 22
4728: PUSH
4729: LD_EXP 23
4733: PUSH
4734: LD_EXP 24
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: LIST
4743: PPUSH
4744: LD_EXP 21
4748: PPUSH
4749: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
4753: LD_EXP 21
4757: PPUSH
4758: LD_EXP 22
4762: PPUSH
4763: CALL_OW 179
// Say ( Givi , DG-1-start ) ;
4767: LD_EXP 22
4771: PPUSH
4772: LD_STRING DG-1-start
4774: PPUSH
4775: CALL_OW 88
// Say ( Heike , DH-1-start ) ;
4779: LD_EXP 21
4783: PPUSH
4784: LD_STRING DH-1-start
4786: PPUSH
4787: CALL_OW 88
// AddComTurnUnit ( Mike , Heike ) ;
4791: LD_EXP 23
4795: PPUSH
4796: LD_EXP 21
4800: PPUSH
4801: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
4805: LD_EXP 21
4809: PPUSH
4810: LD_EXP 23
4814: PPUSH
4815: CALL_OW 179
// Say ( Mike , DM-1-start ) ;
4819: LD_EXP 23
4823: PPUSH
4824: LD_STRING DM-1-start
4826: PPUSH
4827: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
4831: LD_EXP 21
4835: PPUSH
4836: LD_STRING DH-2-start
4838: PPUSH
4839: CALL_OW 88
// Say ( Mike , DM-2-start ) ;
4843: LD_EXP 23
4847: PPUSH
4848: LD_STRING DM-2-start
4850: PPUSH
4851: CALL_OW 88
// Say ( Givi , DG-2-start ) ;
4855: LD_EXP 22
4859: PPUSH
4860: LD_STRING DG-2-start
4862: PPUSH
4863: CALL_OW 88
// ComTurnUnit ( Mike , Givi ) ;
4867: LD_EXP 23
4871: PPUSH
4872: LD_EXP 22
4876: PPUSH
4877: CALL_OW 119
// ComTurnUnit ( Heike , Mike ) ;
4881: LD_EXP 21
4885: PPUSH
4886: LD_EXP 23
4890: PPUSH
4891: CALL_OW 119
// Say ( Mike , DM-3-start ) ;
4895: LD_EXP 23
4899: PPUSH
4900: LD_STRING DM-3-start
4902: PPUSH
4903: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
4907: LD_EXP 21
4911: PPUSH
4912: LD_STRING DH-3-start
4914: PPUSH
4915: CALL_OW 88
// ComMoveXY ( [ Heike , Mike , Givi , Kamil ] , 84 , 51 ) ;
4919: LD_EXP 21
4923: PUSH
4924: LD_EXP 23
4928: PUSH
4929: LD_EXP 22
4933: PUSH
4934: LD_EXP 24
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: LIST
4943: LIST
4944: PPUSH
4945: LD_INT 84
4947: PPUSH
4948: LD_INT 51
4950: PPUSH
4951: CALL_OW 111
// wait ( 0 0$2 ) ;
4955: LD_INT 70
4957: PPUSH
4958: CALL_OW 67
// Say ( Givi , DG-3-start ) ;
4962: LD_EXP 22
4966: PPUSH
4967: LD_STRING DG-3-start
4969: PPUSH
4970: CALL_OW 88
// ComHold ( [ Heike , Mike , Givi , Kamil ] ) ;
4974: LD_EXP 21
4978: PUSH
4979: LD_EXP 23
4983: PUSH
4984: LD_EXP 22
4988: PUSH
4989: LD_EXP 24
4993: PUSH
4994: EMPTY
4995: LIST
4996: LIST
4997: LIST
4998: LIST
4999: PPUSH
5000: CALL_OW 140
// AddComTurnUnit ( Heike , Givi ) ;
5004: LD_EXP 21
5008: PPUSH
5009: LD_EXP 22
5013: PPUSH
5014: CALL_OW 179
// AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
5018: LD_EXP 22
5022: PUSH
5023: LD_EXP 23
5027: PUSH
5028: LD_EXP 24
5032: PUSH
5033: EMPTY
5034: LIST
5035: LIST
5036: LIST
5037: PPUSH
5038: LD_EXP 21
5042: PPUSH
5043: CALL_OW 179
// Say ( Heike , DH-4-start ) ;
5047: LD_EXP 21
5051: PPUSH
5052: LD_STRING DH-4-start
5054: PPUSH
5055: CALL_OW 88
// Say ( Givi , DG-4-start ) ;
5059: LD_EXP 22
5063: PPUSH
5064: LD_STRING DG-4-start
5066: PPUSH
5067: CALL_OW 88
// Say ( Heike , DH-5-start ) ;
5071: LD_EXP 21
5075: PPUSH
5076: LD_STRING DH-5-start
5078: PPUSH
5079: CALL_OW 88
// Say ( Givi , DG-5-start ) ;
5083: LD_EXP 22
5087: PPUSH
5088: LD_STRING DG-5-start
5090: PPUSH
5091: CALL_OW 88
// Say ( Heike , DH-6-start ) ;
5095: LD_EXP 21
5099: PPUSH
5100: LD_STRING DH-6-start
5102: PPUSH
5103: CALL_OW 88
// Say ( Mike , DM-6-start ) ;
5107: LD_EXP 23
5111: PPUSH
5112: LD_STRING DM-6-start
5114: PPUSH
5115: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi ] , Mike ) ;
5119: LD_EXP 21
5123: PUSH
5124: LD_EXP 22
5128: PUSH
5129: EMPTY
5130: LIST
5131: LIST
5132: PPUSH
5133: LD_EXP 23
5137: PPUSH
5138: CALL_OW 119
// Say ( Givi , DG-6-start ) ;
5142: LD_EXP 22
5146: PPUSH
5147: LD_STRING DG-6-start
5149: PPUSH
5150: CALL_OW 88
// Say ( Heike , DH-7-start ) ;
5154: LD_EXP 21
5158: PPUSH
5159: LD_STRING DH-7-start
5161: PPUSH
5162: CALL_OW 88
// end else
5166: GO 5890
// if not Mike and Givi then
5168: LD_EXP 23
5172: NOT
5173: PUSH
5174: LD_EXP 22
5178: AND
5179: IFFALSE 5524
// begin AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5181: LD_EXP 22
5185: PUSH
5186: LD_EXP 24
5190: PUSH
5191: EMPTY
5192: LIST
5193: LIST
5194: PPUSH
5195: LD_EXP 21
5199: PPUSH
5200: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
5204: LD_EXP 21
5208: PPUSH
5209: LD_EXP 22
5213: PPUSH
5214: CALL_OW 179
// Say ( Givi , DG-1-start-c ) ;
5218: LD_EXP 22
5222: PPUSH
5223: LD_STRING DG-1-start-c
5225: PPUSH
5226: CALL_OW 88
// Say ( Heike , DH-1-start-c ) ;
5230: LD_EXP 21
5234: PPUSH
5235: LD_STRING DH-1-start-c
5237: PPUSH
5238: CALL_OW 88
// Say ( Givi , DG-2-start-c ) ;
5242: LD_EXP 22
5246: PPUSH
5247: LD_STRING DG-2-start-c
5249: PPUSH
5250: CALL_OW 88
// Say ( Heike , DH-2-start-c ) ;
5254: LD_EXP 21
5258: PPUSH
5259: LD_STRING DH-2-start-c
5261: PPUSH
5262: CALL_OW 88
// Say ( Givi , DG-3-start-c ) ;
5266: LD_EXP 22
5270: PPUSH
5271: LD_STRING DG-3-start-c
5273: PPUSH
5274: CALL_OW 88
// ComMoveXY ( Heike , 83 , 56 ) ;
5278: LD_EXP 21
5282: PPUSH
5283: LD_INT 83
5285: PPUSH
5286: LD_INT 56
5288: PPUSH
5289: CALL_OW 111
// ComMoveXY ( Givi , 83 , 59 ) ;
5293: LD_EXP 22
5297: PPUSH
5298: LD_INT 83
5300: PPUSH
5301: LD_INT 59
5303: PPUSH
5304: CALL_OW 111
// if Kamil then
5308: LD_EXP 24
5312: IFFALSE 5329
// ComMoveXY ( Kamil , 80 , 58 ) ;
5314: LD_EXP 24
5318: PPUSH
5319: LD_INT 80
5321: PPUSH
5322: LD_INT 58
5324: PPUSH
5325: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5329: LD_EXP 21
5333: PPUSH
5334: LD_EXP 22
5338: PPUSH
5339: CALL_OW 179
// AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5343: LD_EXP 22
5347: PUSH
5348: LD_EXP 24
5352: PUSH
5353: EMPTY
5354: LIST
5355: LIST
5356: PPUSH
5357: LD_EXP 21
5361: PPUSH
5362: CALL_OW 179
// Say ( Heike , DH-3-start-c ) ;
5366: LD_EXP 21
5370: PPUSH
5371: LD_STRING DH-3-start-c
5373: PPUSH
5374: CALL_OW 88
// Say ( Givi , DG-4-start-c ) ;
5378: LD_EXP 22
5382: PPUSH
5383: LD_STRING DG-4-start-c
5385: PPUSH
5386: CALL_OW 88
// Say ( Heike , DH-5-start-c ) ;
5390: LD_EXP 21
5394: PPUSH
5395: LD_STRING DH-5-start-c
5397: PPUSH
5398: CALL_OW 88
// Say ( Givi , DG-5-start-c ) ;
5402: LD_EXP 22
5406: PPUSH
5407: LD_STRING DG-5-start-c
5409: PPUSH
5410: CALL_OW 88
// Say ( Heike , DH-6-start-c ) ;
5414: LD_EXP 21
5418: PPUSH
5419: LD_STRING DH-6-start-c
5421: PPUSH
5422: CALL_OW 88
// Say ( Givi , DG-6-start-c ) ;
5426: LD_EXP 22
5430: PPUSH
5431: LD_STRING DG-6-start-c
5433: PPUSH
5434: CALL_OW 88
// if Kamil then
5438: LD_EXP 24
5442: IFFALSE 5498
// begin ComTurnUnit ( Kamil , Heike ) ;
5444: LD_EXP 24
5448: PPUSH
5449: LD_EXP 21
5453: PPUSH
5454: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5458: LD_EXP 24
5462: PPUSH
5463: LD_STRING DKam-1-start-c
5465: PPUSH
5466: CALL_OW 88
// ComTurnUnit ( Givi , Kamil ) ;
5470: LD_EXP 22
5474: PPUSH
5475: LD_EXP 24
5479: PPUSH
5480: CALL_OW 119
// Say ( Givi , DG-7-start-c ) ;
5484: LD_EXP 22
5488: PPUSH
5489: LD_STRING DG-7-start-c
5491: PPUSH
5492: CALL_OW 88
// end else
5496: GO 5522
// begin Say ( Givi , DG-8-start-c ) ;
5498: LD_EXP 22
5502: PPUSH
5503: LD_STRING DG-8-start-c
5505: PPUSH
5506: CALL_OW 88
// Say ( Heike , DH-7-start-c ) ;
5510: LD_EXP 21
5514: PPUSH
5515: LD_STRING DH-7-start-c
5517: PPUSH
5518: CALL_OW 88
// end ; end else
5522: GO 5890
// if not Givi and Mike then
5524: LD_EXP 22
5528: NOT
5529: PUSH
5530: LD_EXP 23
5534: AND
5535: IFFALSE 5794
// begin AddComTurnUnit ( [ Mike , Kamil ] , Heike ) ;
5537: LD_EXP 23
5541: PUSH
5542: LD_EXP 24
5546: PUSH
5547: EMPTY
5548: LIST
5549: LIST
5550: PPUSH
5551: LD_EXP 21
5555: PPUSH
5556: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
5560: LD_EXP 21
5564: PPUSH
5565: LD_EXP 23
5569: PPUSH
5570: CALL_OW 179
// Say ( Mike , DM-1-start-b ) ;
5574: LD_EXP 23
5578: PPUSH
5579: LD_STRING DM-1-start-b
5581: PPUSH
5582: CALL_OW 88
// Say ( Heike , DH-1-start-b ) ;
5586: LD_EXP 21
5590: PPUSH
5591: LD_STRING DH-1-start-b
5593: PPUSH
5594: CALL_OW 88
// Say ( Mike , DM-2-start-b ) ;
5598: LD_EXP 23
5602: PPUSH
5603: LD_STRING DM-2-start-b
5605: PPUSH
5606: CALL_OW 88
// Say ( Heike , DH-2-start-b ) ;
5610: LD_EXP 21
5614: PPUSH
5615: LD_STRING DH-2-start-b
5617: PPUSH
5618: CALL_OW 88
// Say ( Mike , DM-3-start-b ) ;
5622: LD_EXP 23
5626: PPUSH
5627: LD_STRING DM-3-start-b
5629: PPUSH
5630: CALL_OW 88
// if Kamil then
5634: LD_EXP 24
5638: IFFALSE 5655
// ComMoveXY ( Kamil , 80 , 58 ) ;
5640: LD_EXP 24
5644: PPUSH
5645: LD_INT 80
5647: PPUSH
5648: LD_INT 58
5650: PPUSH
5651: CALL_OW 111
// ComMoveXY ( Heike , 83 , 56 ) ;
5655: LD_EXP 21
5659: PPUSH
5660: LD_INT 83
5662: PPUSH
5663: LD_INT 56
5665: PPUSH
5666: CALL_OW 111
// ComMoveXY ( Mike , 83 , 59 ) ;
5670: LD_EXP 23
5674: PPUSH
5675: LD_INT 83
5677: PPUSH
5678: LD_INT 59
5680: PPUSH
5681: CALL_OW 111
// AddComTurnUnit ( Heike , Mike ) ;
5685: LD_EXP 21
5689: PPUSH
5690: LD_EXP 23
5694: PPUSH
5695: CALL_OW 179
// AddComTurnUnit ( [ Kamil , Mike ] , Heike ) ;
5699: LD_EXP 24
5703: PUSH
5704: LD_EXP 23
5708: PUSH
5709: EMPTY
5710: LIST
5711: LIST
5712: PPUSH
5713: LD_EXP 21
5717: PPUSH
5718: CALL_OW 179
// Say ( Heike , DH-3-start-b ) ;
5722: LD_EXP 21
5726: PPUSH
5727: LD_STRING DH-3-start-b
5729: PPUSH
5730: CALL_OW 88
// Say ( Mike , DM-4-start-b ) ;
5734: LD_EXP 23
5738: PPUSH
5739: LD_STRING DM-4-start-b
5741: PPUSH
5742: CALL_OW 88
// if Kamil then
5746: LD_EXP 24
5750: IFFALSE 5780
// begin ComTurnUnit ( Kamil , Heike ) ;
5752: LD_EXP 24
5756: PPUSH
5757: LD_EXP 21
5761: PPUSH
5762: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5766: LD_EXP 24
5770: PPUSH
5771: LD_STRING DKam-1-start-c
5773: PPUSH
5774: CALL_OW 88
// end else
5778: GO 5792
// begin Say ( Mike , DM-5-start-b ) ;
5780: LD_EXP 23
5784: PPUSH
5785: LD_STRING DM-5-start-b
5787: PPUSH
5788: CALL_OW 88
// end ; end else
5792: GO 5890
// if Kamil then
5794: LD_EXP 24
5798: IFFALSE 5878
// begin AddComTurnUnit ( Heike , Kamil ) ;
5800: LD_EXP 21
5804: PPUSH
5805: LD_EXP 24
5809: PPUSH
5810: CALL_OW 179
// AddComTurnUnit ( Kamil , Heike ) ;
5814: LD_EXP 24
5818: PPUSH
5819: LD_EXP 21
5823: PPUSH
5824: CALL_OW 179
// Say ( Heike , DH-1-start-f ) ;
5828: LD_EXP 21
5832: PPUSH
5833: LD_STRING DH-1-start-f
5835: PPUSH
5836: CALL_OW 88
// Say ( Kamil , DKam-1-start-f ) ;
5840: LD_EXP 24
5844: PPUSH
5845: LD_STRING DKam-1-start-f
5847: PPUSH
5848: CALL_OW 88
// Say ( Heike , DH-2-start-f ) ;
5852: LD_EXP 21
5856: PPUSH
5857: LD_STRING DH-2-start-f
5859: PPUSH
5860: CALL_OW 88
// Say ( Kamil , DKam-2-start-f ) ;
5864: LD_EXP 24
5868: PPUSH
5869: LD_STRING DKam-2-start-f
5871: PPUSH
5872: CALL_OW 88
// end else
5876: GO 5890
// begin Say ( Heike , DH-1-start-d ) ;
5878: LD_EXP 21
5882: PPUSH
5883: LD_STRING DH-1-start-d
5885: PPUSH
5886: CALL_OW 88
// end ; ComFree ( [ Heike , Givi , Mike , Kamil ] ) ;
5890: LD_EXP 21
5894: PUSH
5895: LD_EXP 22
5899: PUSH
5900: LD_EXP 23
5904: PUSH
5905: LD_EXP 24
5909: PUSH
5910: EMPTY
5911: LIST
5912: LIST
5913: LIST
5914: LIST
5915: PPUSH
5916: CALL_OW 139
// InGameOff ;
5920: CALL_OW 9
// ChangeMissionObjectives ( OEast ) ;
5924: LD_STRING OEast
5926: PPUSH
5927: CALL_OW 337
// SaveForQuickRestart ;
5931: CALL_OW 22
// wait ( 0 0$20 ) ;
5935: LD_INT 700
5937: PPUSH
5938: CALL_OW 67
// SendSciToForest ;
5942: CALL 1374 0 0
// if Difficulty = 1 then
5946: LD_OWVAR 67
5950: PUSH
5951: LD_INT 1
5953: EQUAL
5954: IFFALSE 5958
// exit ;
5956: GO 6075
// wait ( [ 5 5$00 , 2 2$30 ] [ Difficulty - 1 ] ) ;
5958: LD_INT 10500
5960: PUSH
5961: LD_INT 5250
5963: PUSH
5964: EMPTY
5965: LIST
5966: LIST
5967: PUSH
5968: LD_OWVAR 67
5972: PUSH
5973: LD_INT 1
5975: MINUS
5976: ARRAY
5977: PPUSH
5978: CALL_OW 67
// if usAlert then
5982: LD_EXP 9
5986: IFFALSE 5990
// exit ;
5988: GO 6075
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
5990: LD_ADDR_VAR 0 3
5994: PUSH
5995: LD_INT 22
5997: PUSH
5998: LD_INT 1
6000: PUSH
6001: EMPTY
6002: LIST
6003: LIST
6004: PUSH
6005: LD_INT 25
6007: PUSH
6008: LD_INT 2
6010: PUSH
6011: EMPTY
6012: LIST
6013: LIST
6014: PUSH
6015: EMPTY
6016: LIST
6017: LIST
6018: PPUSH
6019: CALL_OW 69
6023: ST_TO_ADDR
// if not tmp then
6024: LD_VAR 0 3
6028: NOT
6029: IFFALSE 6033
// exit ;
6031: GO 6075
// ComExitBuilding ( tmp ) ;
6033: LD_VAR 0 3
6037: PPUSH
6038: CALL_OW 122
// AddComBuild ( tmp , b_breastwork , 40 , 13 , 3 ) ;
6042: LD_VAR 0 3
6046: PPUSH
6047: LD_INT 31
6049: PPUSH
6050: LD_INT 40
6052: PPUSH
6053: LD_INT 13
6055: PPUSH
6056: LD_INT 3
6058: PPUSH
6059: CALL_OW 205
// AddComEnterUnit ( tmp , Delta ) ;
6063: LD_VAR 0 3
6067: PPUSH
6068: LD_INT 1
6070: PPUSH
6071: CALL_OW 180
// end ;
6075: LD_VAR 0 1
6079: RET
// every 3 3$00 do
6080: GO 6082
6082: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
6083: LD_INT 1
6085: PPUSH
6086: LD_INT 570
6088: PPUSH
6089: LD_INT 350
6091: PPUSH
6092: CALL_OW 550
// wait ( 2 2$40 ) ;
6096: LD_INT 5600
6098: PPUSH
6099: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
6103: LD_INT 0
6105: PPUSH
6106: LD_INT 570
6108: PPUSH
6109: LD_INT 350
6111: PPUSH
6112: CALL_OW 550
// end ;
6116: END
// every 0 0$1 trigger not aviradzeSpotted and See ( 2 , Aviradze ) do var i , pepAmount ;
6117: LD_EXP 4
6121: NOT
6122: PUSH
6123: LD_INT 2
6125: PPUSH
6126: LD_EXP 25
6130: PPUSH
6131: CALL_OW 292
6135: AND
6136: IFFALSE 7071
6138: GO 6140
6140: DISABLE
6141: LD_INT 0
6143: PPUSH
6144: PPUSH
// begin aviradzeSpotted := true ;
6145: LD_ADDR_EXP 4
6149: PUSH
6150: LD_INT 1
6152: ST_TO_ADDR
// pepAmount := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ;
6153: LD_ADDR_VAR 0 2
6157: PUSH
6158: LD_INT 22
6160: PUSH
6161: LD_INT 2
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: PUSH
6168: LD_INT 21
6170: PUSH
6171: LD_INT 1
6173: PUSH
6174: EMPTY
6175: LIST
6176: LIST
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PPUSH
6182: CALL_OW 69
6186: ST_TO_ADDR
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6187: LD_EXP 21
6191: PPUSH
6192: LD_EXP 25
6196: PPUSH
6197: CALL_OW 250
6201: PPUSH
6202: LD_EXP 25
6206: PPUSH
6207: CALL_OW 251
6211: PPUSH
6212: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6216: LD_INT 35
6218: PPUSH
6219: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 16 ;
6223: LD_EXP 21
6227: PPUSH
6228: LD_EXP 25
6232: PPUSH
6233: CALL_OW 296
6237: PUSH
6238: LD_INT 16
6240: LESS
6241: IFFALSE 6216
// InGameOn ;
6243: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
6247: LD_INT 5
6249: PPUSH
6250: LD_INT 2
6252: PPUSH
6253: CALL_OW 343
// if pepAmount > 2 then
6257: LD_VAR 0 2
6261: PUSH
6262: LD_INT 2
6264: GREATER
6265: IFFALSE 6281
// Say ( Heike , DH-1-spot ) else
6267: LD_EXP 21
6271: PPUSH
6272: LD_STRING DH-1-spot
6274: PPUSH
6275: CALL_OW 88
6279: GO 6293
// Say ( Heike , DH-1-spot-d ) ;
6281: LD_EXP 21
6285: PPUSH
6286: LD_STRING DH-1-spot-d
6288: PPUSH
6289: CALL_OW 88
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6293: LD_EXP 21
6297: PPUSH
6298: LD_EXP 25
6302: PPUSH
6303: CALL_OW 250
6307: PPUSH
6308: LD_EXP 25
6312: PPUSH
6313: CALL_OW 251
6317: PPUSH
6318: CALL_OW 111
// for i in [ Kamil , Mike , Givi ] do
6322: LD_ADDR_VAR 0 1
6326: PUSH
6327: LD_EXP 24
6331: PUSH
6332: LD_EXP 23
6336: PUSH
6337: LD_EXP 22
6341: PUSH
6342: EMPTY
6343: LIST
6344: LIST
6345: LIST
6346: PUSH
6347: FOR_IN
6348: IFFALSE 6387
// if GetDistUnits ( i , Aviradze ) > 7 then
6350: LD_VAR 0 1
6354: PPUSH
6355: LD_EXP 25
6359: PPUSH
6360: CALL_OW 296
6364: PUSH
6365: LD_INT 7
6367: GREATER
6368: IFFALSE 6385
// ComMoveXY ( i , 102 , 40 ) ;
6370: LD_VAR 0 1
6374: PPUSH
6375: LD_INT 102
6377: PPUSH
6378: LD_INT 40
6380: PPUSH
6381: CALL_OW 111
6385: GO 6347
6387: POP
6388: POP
// repeat wait ( 0 0$1 ) ;
6389: LD_INT 35
6391: PPUSH
6392: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 6 ;
6396: LD_EXP 21
6400: PPUSH
6401: LD_EXP 25
6405: PPUSH
6406: CALL_OW 296
6410: PUSH
6411: LD_INT 6
6413: LESS
6414: IFFALSE 6389
// ComTurnUnit ( Heike , Aviradze ) ;
6416: LD_EXP 21
6420: PPUSH
6421: LD_EXP 25
6425: PPUSH
6426: CALL_OW 119
// ComTurnUnit ( [ Aviradze , Sophia , Kaia ] , Heike ) ;
6430: LD_EXP 25
6434: PUSH
6435: LD_EXP 27
6439: PUSH
6440: LD_EXP 26
6444: PUSH
6445: EMPTY
6446: LIST
6447: LIST
6448: LIST
6449: PPUSH
6450: LD_EXP 21
6454: PPUSH
6455: CALL_OW 119
// if pepAmount > 1 then
6459: LD_VAR 0 2
6463: PUSH
6464: LD_INT 1
6466: GREATER
6467: IFFALSE 6519
// begin wait ( 0 0$2 ) ;
6469: LD_INT 70
6471: PPUSH
6472: CALL_OW 67
// ComTurnUnit ( [ Kamil , Mike , Givi ] , Aviradze ) ;
6476: LD_EXP 24
6480: PUSH
6481: LD_EXP 23
6485: PUSH
6486: LD_EXP 22
6490: PUSH
6491: EMPTY
6492: LIST
6493: LIST
6494: LIST
6495: PPUSH
6496: LD_EXP 25
6500: PPUSH
6501: CALL_OW 119
// Say ( Heike , DH-2-spot ) ;
6505: LD_EXP 21
6509: PPUSH
6510: LD_STRING DH-2-spot
6512: PPUSH
6513: CALL_OW 88
// end else
6517: GO 6531
// Say ( Heike , DH-2-spot-d ) ;
6519: LD_EXP 21
6523: PPUSH
6524: LD_STRING DH-2-spot-d
6526: PPUSH
6527: CALL_OW 88
// Say ( Aviradze , DA-2-spot ) ;
6531: LD_EXP 25
6535: PPUSH
6536: LD_STRING DA-2-spot
6538: PPUSH
6539: CALL_OW 88
// Say ( Heike , DH-3-spot ) ;
6543: LD_EXP 21
6547: PPUSH
6548: LD_STRING DH-3-spot
6550: PPUSH
6551: CALL_OW 88
// ComMoveUnit ( Kaia , Heike ) ;
6555: LD_EXP 26
6559: PPUSH
6560: LD_EXP 21
6564: PPUSH
6565: CALL_OW 112
// ComTurnUNit ( Heike , Kaia ) ;
6569: LD_EXP 21
6573: PPUSH
6574: LD_EXP 26
6578: PPUSH
6579: CALL_OW 119
// wait ( 0 0$0.3 ) ;
6583: LD_INT 10
6585: PPUSH
6586: CALL_OW 67
// async ;
6590: ASYNC
// Say ( Kaia , DK-3-spot ) ;
6591: LD_EXP 26
6595: PPUSH
6596: LD_STRING DK-3-spot
6598: PPUSH
6599: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
6603: LD_INT 35
6605: PPUSH
6606: CALL_OW 67
// until GetDistUnits ( Heike , Kaia ) < 4 ;
6610: LD_EXP 21
6614: PPUSH
6615: LD_EXP 26
6619: PPUSH
6620: CALL_OW 296
6624: PUSH
6625: LD_INT 4
6627: LESS
6628: IFFALSE 6603
// ComTurnUnit ( Kaia , Heike ) ;
6630: LD_EXP 26
6634: PPUSH
6635: LD_EXP 21
6639: PPUSH
6640: CALL_OW 119
// sync ;
6644: SYNC
// Say ( Heike , DH-4-spot ) ;
6645: LD_EXP 21
6649: PPUSH
6650: LD_STRING DH-4-spot
6652: PPUSH
6653: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6657: LD_INT 10
6659: PPUSH
6660: CALL_OW 67
// ComTurnUnit ( Heike , Aviradze ) ;
6664: LD_EXP 21
6668: PPUSH
6669: LD_EXP 25
6673: PPUSH
6674: CALL_OW 119
// Say ( Aviradze , DA-4-spot ) ;
6678: LD_EXP 25
6682: PPUSH
6683: LD_STRING DA-4-spot
6685: PPUSH
6686: CALL_OW 88
// ComTurnUnit ( Kaia , Aviradze ) ;
6690: LD_EXP 26
6694: PPUSH
6695: LD_EXP 25
6699: PPUSH
6700: CALL_OW 119
// Say ( Kaia , DK-4-spot ) ;
6704: LD_EXP 26
6708: PPUSH
6709: LD_STRING DK-4-spot
6711: PPUSH
6712: CALL_OW 88
// ComTurnUnit ( Aviradze , Kaia ) ;
6716: LD_EXP 25
6720: PPUSH
6721: LD_EXP 26
6725: PPUSH
6726: CALL_OW 119
// Say ( Aviradze , DA-5-spot ) ;
6730: LD_EXP 25
6734: PPUSH
6735: LD_STRING DA-5-spot
6737: PPUSH
6738: CALL_OW 88
// Say ( Kaia , DK-5-spot ) ;
6742: LD_EXP 26
6746: PPUSH
6747: LD_STRING DK-5-spot
6749: PPUSH
6750: CALL_OW 88
// if pepAmount = 1 then
6754: LD_VAR 0 2
6758: PUSH
6759: LD_INT 1
6761: EQUAL
6762: IFFALSE 6776
// Say ( Heike , DH-5-spot-f ) ;
6764: LD_EXP 21
6768: PPUSH
6769: LD_STRING DH-5-spot-f
6771: PPUSH
6772: CALL_OW 88
// if pepAmount < 3 then
6776: LD_VAR 0 2
6780: PUSH
6781: LD_INT 3
6783: LESS
6784: IFFALSE 6800
// Say ( Aviradze , DA-6-spot-f ) else
6786: LD_EXP 25
6790: PPUSH
6791: LD_STRING DA-6-spot-f
6793: PPUSH
6794: CALL_OW 88
6798: GO 6836
// if pepAmount < 4 then
6800: LD_VAR 0 2
6804: PUSH
6805: LD_INT 4
6807: LESS
6808: IFFALSE 6824
// Say ( Aviradze , DA-6-spot-c ) else
6810: LD_EXP 25
6814: PPUSH
6815: LD_STRING DA-6-spot-c
6817: PPUSH
6818: CALL_OW 88
6822: GO 6836
// Say ( Aviradze , DA-6-spot ) ;
6824: LD_EXP 25
6828: PPUSH
6829: LD_STRING DA-6-spot
6831: PPUSH
6832: CALL_OW 88
// if Kamil then
6836: LD_EXP 24
6840: IFFALSE 6854
// Say ( Kamil , DKam-6-spot ) ;
6842: LD_EXP 24
6846: PPUSH
6847: LD_STRING DKam-6-spot
6849: PPUSH
6850: CALL_OW 88
// Say ( Kaia , DK-6-spot ) ;
6854: LD_EXP 26
6858: PPUSH
6859: LD_STRING DK-6-spot
6861: PPUSH
6862: CALL_OW 88
// ComTurnUnit ( Aviradze , Heike ) ;
6866: LD_EXP 25
6870: PPUSH
6871: LD_EXP 21
6875: PPUSH
6876: CALL_OW 119
// Say ( Aviradze , DA-7-spot ) ;
6880: LD_EXP 25
6884: PPUSH
6885: LD_STRING DA-7-spot
6887: PPUSH
6888: CALL_OW 88
// Say ( Heike , DH-7-spot ) ;
6892: LD_EXP 21
6896: PPUSH
6897: LD_STRING DH-7-spot
6899: PPUSH
6900: CALL_OW 88
// if sciCounterKill >= 3 then
6904: LD_EXP 8
6908: PUSH
6909: LD_INT 3
6911: GREATEREQUAL
6912: IFFALSE 6938
// begin Say ( Heike , DH-7-spot-a ) ;
6914: LD_EXP 21
6918: PPUSH
6919: LD_STRING DH-7-spot-a
6921: PPUSH
6922: CALL_OW 88
// Say ( Aviradze , DA-8-spot-a ) ;
6926: LD_EXP 25
6930: PPUSH
6931: LD_STRING DA-8-spot-a
6933: PPUSH
6934: CALL_OW 88
// end ; InGameOff ;
6938: CALL_OW 9
// if sciCounterKill < 3 then
6942: LD_EXP 8
6946: PUSH
6947: LD_INT 3
6949: LESS
6950: IFFALSE 7009
// begin SetSide ( Kaia , 2 ) ;
6952: LD_EXP 26
6956: PPUSH
6957: LD_INT 2
6959: PPUSH
6960: CALL_OW 235
// ComFree ( Kaia ) ;
6964: LD_EXP 26
6968: PPUSH
6969: CALL_OW 139
// if Kamil then
6973: LD_EXP 24
6977: IFFALSE 7000
// begin ComHold ( Kamil ) ;
6979: LD_EXP 24
6983: PPUSH
6984: CALL_OW 140
// SetSide ( Kamil , 5 ) ;
6988: LD_EXP 24
6992: PPUSH
6993: LD_INT 5
6995: PPUSH
6996: CALL_OW 235
// end ; ChangeMissionObjectives ( OSci ) ;
7000: LD_STRING OSci
7002: PPUSH
7003: CALL_OW 337
// end else
7007: GO 7071
// begin aviradzeQuestDone := true ;
7009: LD_ADDR_EXP 7
7013: PUSH
7014: LD_INT 1
7016: ST_TO_ADDR
// attackDeltaAllowed := true ;
7017: LD_ADDR_EXP 12
7021: PUSH
7022: LD_INT 1
7024: ST_TO_ADDR
// ChangeMissionObjectives ( ODelta2 ) ;
7025: LD_STRING ODelta2
7027: PPUSH
7028: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
7032: LD_ADDR_VAR 0 1
7036: PUSH
7037: LD_INT 22
7039: PUSH
7040: LD_INT 5
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: PPUSH
7047: CALL_OW 69
7051: PUSH
7052: FOR_IN
7053: IFFALSE 7069
// SetSide ( i , 2 ) ;
7055: LD_VAR 0 1
7059: PPUSH
7060: LD_INT 2
7062: PPUSH
7063: CALL_OW 235
7067: GO 7052
7069: POP
7070: POP
// end ; end ;
7071: PPOPN 2
7073: END
// every 0 0$1 trigger not sciSpotted and GetDistUnits ( NearestUnitToUnit ( usSci , Heike ) , Heike ) < 8 and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and not aviradzeSpotted do
7074: LD_EXP 6
7078: NOT
7079: PUSH
7080: LD_EXP 20
7084: PPUSH
7085: LD_EXP 21
7089: PPUSH
7090: CALL_OW 74
7094: PPUSH
7095: LD_EXP 21
7099: PPUSH
7100: CALL_OW 296
7104: PUSH
7105: LD_INT 8
7107: LESS
7108: AND
7109: PUSH
7110: LD_INT 2
7112: PPUSH
7113: LD_EXP 20
7117: PPUSH
7118: LD_EXP 21
7122: PPUSH
7123: CALL_OW 74
7127: PPUSH
7128: CALL_OW 292
7132: AND
7133: PUSH
7134: LD_INT 22
7136: PUSH
7137: LD_INT 2
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: PUSH
7144: LD_INT 21
7146: PUSH
7147: LD_INT 1
7149: PUSH
7150: EMPTY
7151: LIST
7152: LIST
7153: PUSH
7154: EMPTY
7155: LIST
7156: LIST
7157: PPUSH
7158: CALL_OW 69
7162: PUSH
7163: LD_INT 1
7165: GREATER
7166: AND
7167: PUSH
7168: LD_EXP 4
7172: NOT
7173: AND
7174: IFFALSE 7218
7176: GO 7178
7178: DISABLE
// begin sciSpotted := true ;
7179: LD_ADDR_EXP 6
7183: PUSH
7184: LD_INT 1
7186: ST_TO_ADDR
// CenterNowOnUnits ( NearestUnitToUnit ( usSci , Heike ) ) ;
7187: LD_EXP 20
7191: PPUSH
7192: LD_EXP 21
7196: PPUSH
7197: CALL_OW 74
7201: PPUSH
7202: CALL_OW 87
// Say ( Heike , DH-1-sci ) ;
7206: LD_EXP 21
7210: PPUSH
7211: LD_STRING DH-1-sci
7213: PPUSH
7214: CALL_OW 88
// end ;
7218: END
// every 0 0$1 trigger not sciSpotted and GetDistUnits ( NearestUnitToUnit ( usSci , Heike ) , Heike ) < 8 and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and aviradzeSpotted and not aviradzeQuestDone do
7219: LD_EXP 6
7223: NOT
7224: PUSH
7225: LD_EXP 20
7229: PPUSH
7230: LD_EXP 21
7234: PPUSH
7235: CALL_OW 74
7239: PPUSH
7240: LD_EXP 21
7244: PPUSH
7245: CALL_OW 296
7249: PUSH
7250: LD_INT 8
7252: LESS
7253: AND
7254: PUSH
7255: LD_INT 2
7257: PPUSH
7258: LD_EXP 20
7262: PPUSH
7263: LD_EXP 21
7267: PPUSH
7268: CALL_OW 74
7272: PPUSH
7273: CALL_OW 292
7277: AND
7278: PUSH
7279: LD_INT 22
7281: PUSH
7282: LD_INT 2
7284: PUSH
7285: EMPTY
7286: LIST
7287: LIST
7288: PUSH
7289: LD_INT 21
7291: PUSH
7292: LD_INT 1
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: PUSH
7299: EMPTY
7300: LIST
7301: LIST
7302: PPUSH
7303: CALL_OW 69
7307: PUSH
7308: LD_INT 1
7310: GREATER
7311: AND
7312: PUSH
7313: LD_EXP 4
7317: AND
7318: PUSH
7319: LD_EXP 7
7323: NOT
7324: AND
7325: IFFALSE 7387
7327: GO 7329
7329: DISABLE
// begin sciSpotted := true ;
7330: LD_ADDR_EXP 6
7334: PUSH
7335: LD_INT 1
7337: ST_TO_ADDR
// CenterNowOnUnits ( NearestUnitToUnit ( usSci , Heike ) ) ;
7338: LD_EXP 20
7342: PPUSH
7343: LD_EXP 21
7347: PPUSH
7348: CALL_OW 74
7352: PPUSH
7353: CALL_OW 87
// Say ( Heike , DH-1-sci-a ) ;
7357: LD_EXP 21
7361: PPUSH
7362: LD_STRING DH-1-sci-a
7364: PPUSH
7365: CALL_OW 88
// if Mike then
7369: LD_EXP 23
7373: IFFALSE 7387
// Say ( Mike , DM-1-sci-a ) ;
7375: LD_EXP 23
7379: PPUSH
7380: LD_STRING DM-1-sci-a
7382: PPUSH
7383: CALL_OW 88
// end ;
7387: END
// every 0 0$1 trigger aviradzeSpotted and sciCounterKill >= 3 and not aviradzeQuestDone do
7388: LD_EXP 4
7392: PUSH
7393: LD_EXP 8
7397: PUSH
7398: LD_INT 3
7400: GREATEREQUAL
7401: AND
7402: PUSH
7403: LD_EXP 7
7407: NOT
7408: AND
7409: IFFALSE 7452
7411: GO 7413
7413: DISABLE
// begin aviradzeQuestDone := true ;
7414: LD_ADDR_EXP 7
7418: PUSH
7419: LD_INT 1
7421: ST_TO_ADDR
// Say ( Heike , DH-1-quest-done ) ;
7422: LD_EXP 21
7426: PPUSH
7427: LD_STRING DH-1-quest-done
7429: PPUSH
7430: CALL_OW 88
// if Givi then
7434: LD_EXP 22
7438: IFFALSE 7452
// Say ( Givi , DG-1-quest-done ) ;
7440: LD_EXP 22
7444: PPUSH
7445: LD_STRING DG-1-quest-done
7447: PPUSH
7448: CALL_OW 88
// end ;
7452: END
// every 0 0$1 trigger See ( 5 , Heike ) and GetDistUnits ( Heike , Aviradze ) < 6 and aviradzeQuestDone and not attackDeltaAllowed do var i ;
7453: LD_INT 5
7455: PPUSH
7456: LD_EXP 21
7460: PPUSH
7461: CALL_OW 292
7465: PUSH
7466: LD_EXP 21
7470: PPUSH
7471: LD_EXP 25
7475: PPUSH
7476: CALL_OW 296
7480: PUSH
7481: LD_INT 6
7483: LESS
7484: AND
7485: PUSH
7486: LD_EXP 7
7490: AND
7491: PUSH
7492: LD_EXP 12
7496: NOT
7497: AND
7498: IFFALSE 7636
7500: GO 7502
7502: DISABLE
7503: LD_INT 0
7505: PPUSH
// begin attackDeltaAllowed := true ;
7506: LD_ADDR_EXP 12
7510: PUSH
7511: LD_INT 1
7513: ST_TO_ADDR
// InGameOn ;
7514: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
7518: LD_EXP 21
7522: PPUSH
7523: CALL_OW 87
// wait ( 0 0$0.3 ) ;
7527: LD_INT 10
7529: PPUSH
7530: CALL_OW 67
// ComTurnUnit ( Aviradze , Heike ) ;
7534: LD_EXP 25
7538: PPUSH
7539: LD_EXP 21
7543: PPUSH
7544: CALL_OW 119
// ComTurnUnit ( Heike , Aviradze ) ;
7548: LD_EXP 21
7552: PPUSH
7553: LD_EXP 25
7557: PPUSH
7558: CALL_OW 119
// Say ( Heike , DH-1-return ) ;
7562: LD_EXP 21
7566: PPUSH
7567: LD_STRING DH-1-return
7569: PPUSH
7570: CALL_OW 88
// Say ( Aviradze , DA-1-return ) ;
7574: LD_EXP 25
7578: PPUSH
7579: LD_STRING DA-1-return
7581: PPUSH
7582: CALL_OW 88
// InGameOff ;
7586: CALL_OW 9
// ChangeMissionObjectives ( ODelta ) ;
7590: LD_STRING ODelta
7592: PPUSH
7593: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
7597: LD_ADDR_VAR 0 1
7601: PUSH
7602: LD_INT 22
7604: PUSH
7605: LD_INT 5
7607: PUSH
7608: EMPTY
7609: LIST
7610: LIST
7611: PPUSH
7612: CALL_OW 69
7616: PUSH
7617: FOR_IN
7618: IFFALSE 7634
// SetSide ( i , 2 ) ;
7620: LD_VAR 0 1
7624: PPUSH
7625: LD_INT 2
7627: PPUSH
7628: CALL_OW 235
7632: GO 7617
7634: POP
7635: POP
// end ;
7636: PPOPN 1
7638: END
// every 0 0$1 trigger attackDeltaAllowed and IsOk ( Markov ) and GetSide ( Delta ) = 1 and IsOk ( Lynch ) and not usAlert do var i , k , tmp ;
7639: LD_EXP 12
7643: PUSH
7644: LD_EXP 28
7648: PPUSH
7649: CALL_OW 302
7653: AND
7654: PUSH
7655: LD_INT 1
7657: PPUSH
7658: CALL_OW 255
7662: PUSH
7663: LD_INT 1
7665: EQUAL
7666: AND
7667: PUSH
7668: LD_EXP 18
7672: PPUSH
7673: CALL_OW 302
7677: AND
7678: PUSH
7679: LD_EXP 9
7683: NOT
7684: AND
7685: IFFALSE 8855
7687: GO 7689
7689: DISABLE
7690: LD_INT 0
7692: PPUSH
7693: PPUSH
7694: PPUSH
// begin trap := 0 ;
7695: LD_ADDR_EXP 15
7699: PUSH
7700: LD_INT 0
7702: ST_TO_ADDR
// wait ( 0 0$15 ) ;
7703: LD_INT 525
7705: PPUSH
7706: CALL_OW 67
// DialogueOn ;
7710: CALL_OW 6
// Say ( Markov , DMar-1-radio ) ;
7714: LD_EXP 28
7718: PPUSH
7719: LD_STRING DMar-1-radio
7721: PPUSH
7722: CALL_OW 88
// Say ( Heike , DH-1-radio ) ;
7726: LD_EXP 21
7730: PPUSH
7731: LD_STRING DH-1-radio
7733: PPUSH
7734: CALL_OW 88
// Say ( Markov , DMar-2-radio ) ;
7738: LD_EXP 28
7742: PPUSH
7743: LD_STRING DMar-2-radio
7745: PPUSH
7746: CALL_OW 88
// Say ( Heike , DH-2-radio ) ;
7750: LD_EXP 21
7754: PPUSH
7755: LD_STRING DH-2-radio
7757: PPUSH
7758: CALL_OW 88
// if IsOk ( Kamil ) or IsOk ( Sophia ) then
7762: LD_EXP 24
7766: PPUSH
7767: CALL_OW 302
7771: PUSH
7772: LD_EXP 27
7776: PPUSH
7777: CALL_OW 302
7781: OR
7782: IFFALSE 8855
// begin case Query ( Q1Trap ) of 1 :
7784: LD_STRING Q1Trap
7786: PPUSH
7787: CALL_OW 97
7791: PUSH
7792: LD_INT 1
7794: DOUBLE
7795: EQUAL
7796: IFTRUE 7800
7798: GO 7994
7800: POP
// begin if IsOk ( Kamil ) then
7801: LD_EXP 24
7805: PPUSH
7806: CALL_OW 302
7810: IFFALSE 7889
// begin Say ( Kamil , DKam-2-radio ) ;
7812: LD_EXP 24
7816: PPUSH
7817: LD_STRING DKam-2-radio
7819: PPUSH
7820: CALL_OW 88
// Say ( Kamil , DKam-3-radio ) ;
7824: LD_EXP 24
7828: PPUSH
7829: LD_STRING DKam-3-radio
7831: PPUSH
7832: CALL_OW 88
// SayRadio ( Lynch , DDelta-3-radio ) ;
7836: LD_EXP 18
7840: PPUSH
7841: LD_STRING DDelta-3-radio
7843: PPUSH
7844: CALL_OW 94
// dwait ( 0 0$01 ) ;
7848: LD_INT 35
7850: PPUSH
7851: CALL_OW 68
// Say ( Heike , DH-3-radio ) ;
7855: LD_EXP 21
7859: PPUSH
7860: LD_STRING DH-3-radio
7862: PPUSH
7863: CALL_OW 88
// Say ( Kamil , DKam-4-radio ) ;
7867: LD_EXP 24
7871: PPUSH
7872: LD_STRING DKam-4-radio
7874: PPUSH
7875: CALL_OW 88
// trap := 1 ;
7879: LD_ADDR_EXP 15
7883: PUSH
7884: LD_INT 1
7886: ST_TO_ADDR
// end else
7887: GO 7988
// begin Say ( Sophia , DS-1-radio ) ;
7889: LD_EXP 27
7893: PPUSH
7894: LD_STRING DS-1-radio
7896: PPUSH
7897: CALL_OW 88
// Say ( Sophia , DS-2-radio ) ;
7901: LD_EXP 27
7905: PPUSH
7906: LD_STRING DS-2-radio
7908: PPUSH
7909: CALL_OW 88
// SayRadio ( Lynch , DDelta-2-radio-s ) ;
7913: LD_EXP 18
7917: PPUSH
7918: LD_STRING DDelta-2-radio-s
7920: PPUSH
7921: CALL_OW 94
// Say ( Sophia , DS-3-radio ) ;
7925: LD_EXP 27
7929: PPUSH
7930: LD_STRING DS-3-radio
7932: PPUSH
7933: CALL_OW 88
// SayRadio ( Lynch , DDelta-3-radio-s ) ;
7937: LD_EXP 18
7941: PPUSH
7942: LD_STRING DDelta-3-radio-s
7944: PPUSH
7945: CALL_OW 94
// Say ( Sophia , DS-4-radio-s ) ;
7949: LD_EXP 27
7953: PPUSH
7954: LD_STRING DS-4-radio-s
7956: PPUSH
7957: CALL_OW 88
// dwait ( 0 0$01 ) ;
7961: LD_INT 35
7963: PPUSH
7964: CALL_OW 68
// Say ( Heike , DH-1-trap ) ;
7968: LD_EXP 21
7972: PPUSH
7973: LD_STRING DH-1-trap
7975: PPUSH
7976: CALL_OW 88
// trap := 0 ;
7980: LD_ADDR_EXP 15
7984: PUSH
7985: LD_INT 0
7987: ST_TO_ADDR
// end ; DialogueOff ;
7988: CALL_OW 7
// end ; 2 :
7992: GO 8012
7994: LD_INT 2
7996: DOUBLE
7997: EQUAL
7998: IFTRUE 8002
8000: GO 8011
8002: POP
// begin DialogueOff ;
8003: CALL_OW 7
// exit ;
8007: GO 8855
// end ; end ;
8009: GO 8012
8011: POP
// if trap = 1 then
8012: LD_EXP 15
8016: PUSH
8017: LD_INT 1
8019: EQUAL
8020: IFFALSE 8426
// begin tmp := [ ] ;
8022: LD_ADDR_VAR 0 3
8026: PUSH
8027: EMPTY
8028: ST_TO_ADDR
// k := 3 ;
8029: LD_ADDR_VAR 0 2
8033: PUSH
8034: LD_INT 3
8036: ST_TO_ADDR
// if usForces < 3 then
8037: LD_EXP 19
8041: PUSH
8042: LD_INT 3
8044: LESS
8045: IFFALSE 8057
// k := usForces ;
8047: LD_ADDR_VAR 0 2
8051: PUSH
8052: LD_EXP 19
8056: ST_TO_ADDR
// for i := 1 to k do
8057: LD_ADDR_VAR 0 1
8061: PUSH
8062: DOUBLE
8063: LD_INT 1
8065: DEC
8066: ST_TO_ADDR
8067: LD_VAR 0 2
8071: PUSH
8072: FOR_TO
8073: IFFALSE 8128
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
8075: LD_ADDR_VAR 0 3
8079: PUSH
8080: LD_VAR 0 3
8084: PPUSH
8085: LD_VAR 0 3
8089: PUSH
8090: LD_INT 1
8092: PLUS
8093: PPUSH
8094: LD_EXP 19
8098: PUSH
8099: LD_INT 1
8101: ARRAY
8102: PPUSH
8103: CALL_OW 1
8107: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
8108: LD_ADDR_EXP 19
8112: PUSH
8113: LD_EXP 19
8117: PPUSH
8118: LD_INT 1
8120: PPUSH
8121: CALL_OW 3
8125: ST_TO_ADDR
// end ;
8126: GO 8072
8128: POP
8129: POP
// usPatrol := tmp ;
8130: LD_ADDR_EXP 14
8134: PUSH
8135: LD_VAR 0 3
8139: ST_TO_ADDR
// for i in tmp do
8140: LD_ADDR_VAR 0 1
8144: PUSH
8145: LD_VAR 0 3
8149: PUSH
8150: FOR_IN
8151: IFFALSE 8281
// begin if IsInUnit ( i ) then
8153: LD_VAR 0 1
8157: PPUSH
8158: CALL_OW 310
8162: IFFALSE 8173
// ComExitBuilding ( i ) ;
8164: LD_VAR 0 1
8168: PPUSH
8169: CALL_OW 122
// AddComAgressiveMove ( i , 63 , 31 ) ;
8173: LD_VAR 0 1
8177: PPUSH
8178: LD_INT 63
8180: PPUSH
8181: LD_INT 31
8183: PPUSH
8184: CALL_OW 174
// AddComWait ( i , 0 0$2 ) ;
8188: LD_VAR 0 1
8192: PPUSH
8193: LD_INT 70
8195: PPUSH
8196: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 43 ) ;
8200: LD_VAR 0 1
8204: PPUSH
8205: LD_INT 103
8207: PPUSH
8208: LD_INT 43
8210: PPUSH
8211: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
8215: LD_VAR 0 1
8219: PPUSH
8220: LD_INT 105
8222: PPUSH
8223: CALL_OW 202
// if Difficulty > 1 then
8227: LD_OWVAR 67
8231: PUSH
8232: LD_INT 1
8234: GREATER
8235: IFFALSE 8252
// AddComAgressiveMove ( i , 114 , 69 ) ;
8237: LD_VAR 0 1
8241: PPUSH
8242: LD_INT 114
8244: PPUSH
8245: LD_INT 69
8247: PPUSH
8248: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
8252: LD_VAR 0 1
8256: PPUSH
8257: LD_INT 105
8259: PPUSH
8260: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
8264: LD_VAR 0 1
8268: PPUSH
8269: LD_INT 42
8271: PPUSH
8272: LD_INT 20
8274: PPUSH
8275: CALL_OW 174
// end ;
8279: GO 8150
8281: POP
8282: POP
// repeat wait ( 0 0$1 ) ;
8283: LD_INT 35
8285: PPUSH
8286: CALL_OW 67
// for i in tmp do
8290: LD_ADDR_VAR 0 1
8294: PUSH
8295: LD_VAR 0 3
8299: PUSH
8300: FOR_IN
8301: IFFALSE 8332
// if IsDead ( i ) then
8303: LD_VAR 0 1
8307: PPUSH
8308: CALL_OW 301
8312: IFFALSE 8330
// tmp := tmp diff i ;
8314: LD_ADDR_VAR 0 3
8318: PUSH
8319: LD_VAR 0 3
8323: PUSH
8324: LD_VAR 0 1
8328: DIFF
8329: ST_TO_ADDR
8330: GO 8300
8332: POP
8333: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
8334: LD_VAR 0 3
8338: NOT
8339: PUSH
8340: LD_VAR 0 3
8344: PPUSH
8345: LD_INT 95
8347: PUSH
8348: LD_INT 7
8350: PUSH
8351: EMPTY
8352: LIST
8353: LIST
8354: PUSH
8355: LD_INT 3
8357: PUSH
8358: LD_INT 60
8360: PUSH
8361: EMPTY
8362: LIST
8363: PUSH
8364: EMPTY
8365: LIST
8366: LIST
8367: PUSH
8368: EMPTY
8369: LIST
8370: LIST
8371: PPUSH
8372: CALL_OW 72
8376: PUSH
8377: LD_VAR 0 3
8381: EQUAL
8382: OR
8383: IFFALSE 8283
// if tmp then
8385: LD_VAR 0 3
8389: IFFALSE 8416
// begin usPatrol := [ ] ;
8391: LD_ADDR_EXP 14
8395: PUSH
8396: EMPTY
8397: ST_TO_ADDR
// usForces := usForces union tmp ;
8398: LD_ADDR_EXP 19
8402: PUSH
8403: LD_EXP 19
8407: PUSH
8408: LD_VAR 0 3
8412: UNION
8413: ST_TO_ADDR
// end else
8414: GO 8424
// trickyMove := true ;
8416: LD_ADDR_EXP 13
8420: PUSH
8421: LD_INT 1
8423: ST_TO_ADDR
// end else
8424: GO 8855
// begin tmp := [ ] ;
8426: LD_ADDR_VAR 0 3
8430: PUSH
8431: EMPTY
8432: ST_TO_ADDR
// k := 4 ;
8433: LD_ADDR_VAR 0 2
8437: PUSH
8438: LD_INT 4
8440: ST_TO_ADDR
// if usForces < 4 then
8441: LD_EXP 19
8445: PUSH
8446: LD_INT 4
8448: LESS
8449: IFFALSE 8461
// k := usForces ;
8451: LD_ADDR_VAR 0 2
8455: PUSH
8456: LD_EXP 19
8460: ST_TO_ADDR
// for i := 1 to k do
8461: LD_ADDR_VAR 0 1
8465: PUSH
8466: DOUBLE
8467: LD_INT 1
8469: DEC
8470: ST_TO_ADDR
8471: LD_VAR 0 2
8475: PUSH
8476: FOR_TO
8477: IFFALSE 8532
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
8479: LD_ADDR_VAR 0 3
8483: PUSH
8484: LD_VAR 0 3
8488: PPUSH
8489: LD_VAR 0 3
8493: PUSH
8494: LD_INT 1
8496: PLUS
8497: PPUSH
8498: LD_EXP 19
8502: PUSH
8503: LD_INT 1
8505: ARRAY
8506: PPUSH
8507: CALL_OW 1
8511: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
8512: LD_ADDR_EXP 19
8516: PUSH
8517: LD_EXP 19
8521: PPUSH
8522: LD_INT 1
8524: PPUSH
8525: CALL_OW 3
8529: ST_TO_ADDR
// end ;
8530: GO 8476
8532: POP
8533: POP
// if Lynch then
8534: LD_EXP 18
8538: IFFALSE 8556
// tmp := tmp ^ Lynch ;
8540: LD_ADDR_VAR 0 3
8544: PUSH
8545: LD_VAR 0 3
8549: PUSH
8550: LD_EXP 18
8554: ADD
8555: ST_TO_ADDR
// usPatrol := tmp ;
8556: LD_ADDR_EXP 14
8560: PUSH
8561: LD_VAR 0 3
8565: ST_TO_ADDR
// for i in tmp do
8566: LD_ADDR_VAR 0 1
8570: PUSH
8571: LD_VAR 0 3
8575: PUSH
8576: FOR_IN
8577: IFFALSE 8670
// begin if IsInUnit ( i ) then
8579: LD_VAR 0 1
8583: PPUSH
8584: CALL_OW 310
8588: IFFALSE 8599
// ComExitBuilding ( i ) ;
8590: LD_VAR 0 1
8594: PPUSH
8595: CALL_OW 122
// AddComAgressiveMove ( i , 69 , 15 ) ;
8599: LD_VAR 0 1
8603: PPUSH
8604: LD_INT 69
8606: PPUSH
8607: LD_INT 15
8609: PPUSH
8610: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
8614: LD_VAR 0 1
8618: PPUSH
8619: LD_INT 700
8621: PPUSH
8622: CALL_OW 202
// AddComAgressiveMove ( i , 55 , 43 ) ;
8626: LD_VAR 0 1
8630: PPUSH
8631: LD_INT 55
8633: PPUSH
8634: LD_INT 43
8636: PPUSH
8637: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
8641: LD_VAR 0 1
8645: PPUSH
8646: LD_INT 700
8648: PPUSH
8649: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
8653: LD_VAR 0 1
8657: PPUSH
8658: LD_INT 42
8660: PPUSH
8661: LD_INT 20
8663: PPUSH
8664: CALL_OW 174
// end ;
8668: GO 8576
8670: POP
8671: POP
// repeat wait ( 0 0$1 ) ;
8672: LD_INT 35
8674: PPUSH
8675: CALL_OW 67
// for i in tmp do
8679: LD_ADDR_VAR 0 1
8683: PUSH
8684: LD_VAR 0 3
8688: PUSH
8689: FOR_IN
8690: IFFALSE 8721
// if IsDead ( i ) then
8692: LD_VAR 0 1
8696: PPUSH
8697: CALL_OW 301
8701: IFFALSE 8719
// tmp := tmp diff i ;
8703: LD_ADDR_VAR 0 3
8707: PUSH
8708: LD_VAR 0 3
8712: PUSH
8713: LD_VAR 0 1
8717: DIFF
8718: ST_TO_ADDR
8719: GO 8689
8721: POP
8722: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
8723: LD_VAR 0 3
8727: NOT
8728: PUSH
8729: LD_VAR 0 3
8733: PPUSH
8734: LD_INT 95
8736: PUSH
8737: LD_INT 7
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: PUSH
8744: LD_INT 3
8746: PUSH
8747: LD_INT 60
8749: PUSH
8750: EMPTY
8751: LIST
8752: PUSH
8753: EMPTY
8754: LIST
8755: LIST
8756: PUSH
8757: EMPTY
8758: LIST
8759: LIST
8760: PPUSH
8761: CALL_OW 72
8765: PUSH
8766: LD_VAR 0 3
8770: EQUAL
8771: OR
8772: IFFALSE 8672
// if not tmp then
8774: LD_VAR 0 3
8778: NOT
8779: IFFALSE 8791
// trickyMove := true else
8781: LD_ADDR_EXP 13
8785: PUSH
8786: LD_INT 1
8788: ST_TO_ADDR
8789: GO 8798
// usPatrol := [ ] ;
8791: LD_ADDR_EXP 14
8795: PUSH
8796: EMPTY
8797: ST_TO_ADDR
// if tmp diff Lynch then
8798: LD_VAR 0 3
8802: PUSH
8803: LD_EXP 18
8807: DIFF
8808: IFFALSE 8832
// usForces := usForces union ( tmp diff Lynch ) ;
8810: LD_ADDR_EXP 19
8814: PUSH
8815: LD_EXP 19
8819: PUSH
8820: LD_VAR 0 3
8824: PUSH
8825: LD_EXP 18
8829: DIFF
8830: UNION
8831: ST_TO_ADDR
// if IsOk ( Lynch ) then
8832: LD_EXP 18
8836: PPUSH
8837: CALL_OW 302
8841: IFFALSE 8855
// ComEnterUnit ( Lynch , Delta ) ;
8843: LD_EXP 18
8847: PPUSH
8848: LD_INT 1
8850: PPUSH
8851: CALL_OW 120
// end ; end ; end ;
8855: PPOPN 3
8857: END
// every 0 0$1 trigger UnitFilter ( usPatrol , [ f_see , 2 ] ) do
8858: LD_EXP 14
8862: PPUSH
8863: LD_INT 101
8865: PUSH
8866: LD_INT 2
8868: PUSH
8869: EMPTY
8870: LIST
8871: LIST
8872: PPUSH
8873: CALL_OW 72
8877: IFFALSE 9010
8879: GO 8881
8881: DISABLE
// begin if not trap then
8882: LD_EXP 15
8886: NOT
8887: IFFALSE 8915
// begin Say ( Heike , DH-2-trap ) ;
8889: LD_EXP 21
8893: PPUSH
8894: LD_STRING DH-2-trap
8896: PPUSH
8897: CALL_OW 88
// Say ( Mike , DM-2-trap ) ;
8901: LD_EXP 23
8905: PPUSH
8906: LD_STRING DM-2-trap
8908: PPUSH
8909: CALL_OW 88
// end else
8913: GO 8927
// begin Say ( Heike , DH-1-trap-a ) ;
8915: LD_EXP 21
8919: PPUSH
8920: LD_STRING DH-1-trap-a
8922: PPUSH
8923: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
8927: LD_INT 35
8929: PPUSH
8930: CALL_OW 67
// until trickyMove ;
8934: LD_EXP 13
8938: IFFALSE 8927
// Say ( Heike , DH-3-trap ) ;
8940: LD_EXP 21
8944: PPUSH
8945: LD_STRING DH-3-trap
8947: PPUSH
8948: CALL_OW 88
// if IsOk ( Givi ) and IsOk ( Kaia ) then
8952: LD_EXP 22
8956: PPUSH
8957: CALL_OW 302
8961: PUSH
8962: LD_EXP 26
8966: PPUSH
8967: CALL_OW 302
8971: AND
8972: IFFALSE 9010
// begin Say ( Givi , DG-3-trap ) ;
8974: LD_EXP 22
8978: PPUSH
8979: LD_STRING DG-3-trap
8981: PPUSH
8982: CALL_OW 88
// Say ( Kaia , DK-3-trap ) ;
8986: LD_EXP 26
8990: PPUSH
8991: LD_STRING DK-3-trap
8993: PPUSH
8994: CALL_OW 88
// Say ( Givi , DG-4-trap ) ;
8998: LD_EXP 22
9002: PPUSH
9003: LD_STRING DG-4-trap
9005: PPUSH
9006: CALL_OW 88
// end ; end ;
9010: END
// every 0 0$1 trigger GetSide ( Delta ) = 2 and attackDeltaAllowed do
9011: LD_INT 1
9013: PPUSH
9014: CALL_OW 255
9018: PUSH
9019: LD_INT 2
9021: EQUAL
9022: PUSH
9023: LD_EXP 12
9027: AND
9028: IFFALSE 9071
9030: GO 9032
9032: DISABLE
// begin if not IsOk ( Kaia ) then
9033: LD_EXP 26
9037: PPUSH
9038: CALL_OW 302
9042: NOT
9043: IFFALSE 9047
// exit ;
9045: GO 9071
// Say ( Kaia , DK-1-capture ) ;
9047: LD_EXP 26
9051: PPUSH
9052: LD_STRING DK-1-capture
9054: PPUSH
9055: CALL_OW 88
// Say ( Heike , DH-1-capture ) ;
9059: LD_EXP 21
9063: PPUSH
9064: LD_STRING DH-1-capture
9066: PPUSH
9067: CALL_OW 88
// end ;
9071: END
// every 0 0$1 trigger GetSide ( usLab ) = 2 and attackDeltaAllowed do
9072: LD_INT 3
9074: PPUSH
9075: CALL_OW 255
9079: PUSH
9080: LD_INT 2
9082: EQUAL
9083: PUSH
9084: LD_EXP 12
9088: AND
9089: IFFALSE 9121
9091: GO 9093
9093: DISABLE
// begin DialogueOn ;
9094: CALL_OW 6
// Say ( Aviradze , DA-1-capture ) ;
9098: LD_EXP 25
9102: PPUSH
9103: LD_STRING DA-1-capture
9105: PPUSH
9106: CALL_OW 88
// DialogueOff ;
9110: CALL_OW 7
// ChangeMissionObjectives ( OTame ) ;
9114: LD_STRING OTame
9116: PPUSH
9117: CALL_OW 337
// end ;
9121: END
// every 0 0$1 trigger GetTech ( tech_ApeLang , 2 ) = state_researched and attackDeltaAllowed do
9122: LD_INT 1
9124: PPUSH
9125: LD_INT 2
9127: PPUSH
9128: CALL_OW 321
9132: PUSH
9133: LD_INT 2
9135: EQUAL
9136: PUSH
9137: LD_EXP 12
9141: AND
9142: IFFALSE 9215
9144: GO 9146
9146: DISABLE
// begin DialogueOn ;
9147: CALL_OW 6
// Say ( Aviradze , DA-1-ape ) ;
9151: LD_EXP 25
9155: PPUSH
9156: LD_STRING DA-1-ape
9158: PPUSH
9159: CALL_OW 88
// Say ( Heike , DH-1-ape ) ;
9163: LD_EXP 21
9167: PPUSH
9168: LD_STRING DH-1-ape
9170: PPUSH
9171: CALL_OW 88
// Say ( Aviradze , DA-2-ape ) ;
9175: LD_EXP 25
9179: PPUSH
9180: LD_STRING DA-2-ape
9182: PPUSH
9183: CALL_OW 88
// Say ( Aviradze , DA-3-ape ) ;
9187: LD_EXP 25
9191: PPUSH
9192: LD_STRING DA-3-ape
9194: PPUSH
9195: CALL_OW 88
// Say ( Heike , DH-3-ape ) ;
9199: LD_EXP 21
9203: PPUSH
9204: LD_STRING DH-3-ape
9206: PPUSH
9207: CALL_OW 88
// DialogueOff ;
9211: CALL_OW 7
// end ;
9215: END
// every 0 0$5 trigger lostCounter >= [ 3 , 2 , 2 ] [ Difficulty ] do
9216: LD_EXP 16
9220: PUSH
9221: LD_INT 3
9223: PUSH
9224: LD_INT 2
9226: PUSH
9227: LD_INT 2
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: LIST
9234: PUSH
9235: LD_OWVAR 67
9239: ARRAY
9240: GREATEREQUAL
9241: IFFALSE 9285
9243: GO 9245
9245: DISABLE
// begin DialogueOn ;
9246: CALL_OW 6
// Say ( Aviradze , DA-1-failure ) ;
9250: LD_EXP 25
9254: PPUSH
9255: LD_STRING DA-1-failure
9257: PPUSH
9258: CALL_OW 88
// Say ( Aviradze , DA-2-failure ) ;
9262: LD_EXP 25
9266: PPUSH
9267: LD_STRING DA-2-failure
9269: PPUSH
9270: CALL_OW 88
// YouLost ( Failure ) ;
9274: LD_STRING Failure
9276: PPUSH
9277: CALL_OW 104
// DialogueOff ;
9281: CALL_OW 7
// end ;
9285: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) and IsOk ( Aviradze ) and GetSide ( Aviradze ) = 2 do var tmp ;
9286: LD_INT 22
9288: PUSH
9289: LD_INT 2
9291: PUSH
9292: EMPTY
9293: LIST
9294: LIST
9295: PUSH
9296: LD_INT 23
9298: PUSH
9299: LD_INT 0
9301: PUSH
9302: EMPTY
9303: LIST
9304: LIST
9305: PUSH
9306: EMPTY
9307: LIST
9308: LIST
9309: PPUSH
9310: CALL_OW 69
9314: PUSH
9315: LD_EXP 25
9319: PPUSH
9320: CALL_OW 302
9324: AND
9325: PUSH
9326: LD_EXP 25
9330: PPUSH
9331: CALL_OW 255
9335: PUSH
9336: LD_INT 2
9338: EQUAL
9339: AND
9340: IFFALSE 10090
9342: GO 9344
9344: DISABLE
9345: LD_INT 0
9347: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) [ 1 ] ;
9348: LD_ADDR_VAR 0 1
9352: PUSH
9353: LD_INT 22
9355: PUSH
9356: LD_INT 2
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: PUSH
9363: LD_INT 23
9365: PUSH
9366: LD_INT 0
9368: PUSH
9369: EMPTY
9370: LIST
9371: LIST
9372: PUSH
9373: EMPTY
9374: LIST
9375: LIST
9376: PPUSH
9377: CALL_OW 69
9381: PUSH
9382: LD_INT 1
9384: ARRAY
9385: ST_TO_ADDR
// InGameOn ;
9386: CALL_OW 8
// CenterNowOnUnits ( tmp ) ;
9390: LD_VAR 0 1
9394: PPUSH
9395: CALL_OW 87
// ComMoveUnit ( tmp , Aviradze ) ;
9399: LD_VAR 0 1
9403: PPUSH
9404: LD_EXP 25
9408: PPUSH
9409: CALL_OW 112
// ComTurnUnit ( Aviradze , tmp ) ;
9413: LD_EXP 25
9417: PPUSH
9418: LD_VAR 0 1
9422: PPUSH
9423: CALL_OW 119
// wait ( 0 0$1 ) ;
9427: LD_INT 35
9429: PPUSH
9430: CALL_OW 67
// Say ( Aviradze , DA-1-tame-a ) ;
9434: LD_EXP 25
9438: PPUSH
9439: LD_STRING DA-1-tame-a
9441: PPUSH
9442: CALL_OW 88
// if IsOk ( Mike ) then
9446: LD_EXP 23
9450: PPUSH
9451: CALL_OW 302
9455: IFFALSE 9493
// begin Say ( Mike , DM-1-tame-a ) ;
9457: LD_EXP 23
9461: PPUSH
9462: LD_STRING DM-1-tame-a
9464: PPUSH
9465: CALL_OW 88
// Say ( Sophia , DS-1-tame-a ) ;
9469: LD_EXP 27
9473: PPUSH
9474: LD_STRING DS-1-tame-a
9476: PPUSH
9477: CALL_OW 88
// Say ( Mike , DM-2-tame-a ) ;
9481: LD_EXP 23
9485: PPUSH
9486: LD_STRING DM-2-tame-a
9488: PPUSH
9489: CALL_OW 88
// end ; wait ( 0 0$3 ) ;
9493: LD_INT 105
9495: PPUSH
9496: CALL_OW 67
// PrepareFarmer ;
9500: CALL 10749 0 0
// CenterOnUnits ( Farmer ) ;
9504: LD_EXP 29
9508: PPUSH
9509: CALL_OW 85
// ComMoveXY ( Farmer , 105 , 59 ) ;
9513: LD_EXP 29
9517: PPUSH
9518: LD_INT 105
9520: PPUSH
9521: LD_INT 59
9523: PPUSH
9524: CALL_OW 111
// AddComHold ( Farmer ) ;
9528: LD_EXP 29
9532: PPUSH
9533: CALL_OW 200
// SayRadio ( Farmer , DF-1-end ) ;
9537: LD_EXP 29
9541: PPUSH
9542: LD_STRING DF-1-end
9544: PPUSH
9545: CALL_OW 94
// Say ( Aviradze , DA-1-end ) ;
9549: LD_EXP 25
9553: PPUSH
9554: LD_STRING DA-1-end
9556: PPUSH
9557: CALL_OW 88
// SayRadio ( Farmer , DF-2-end ) ;
9561: LD_EXP 29
9565: PPUSH
9566: LD_STRING DF-2-end
9568: PPUSH
9569: CALL_OW 94
// Say ( Aviradze , DA-2-end ) ;
9573: LD_EXP 25
9577: PPUSH
9578: LD_STRING DA-2-end
9580: PPUSH
9581: CALL_OW 88
// SayRadio ( Farmer , DF-3-end ) ;
9585: LD_EXP 29
9589: PPUSH
9590: LD_STRING DF-3-end
9592: PPUSH
9593: CALL_OW 94
// Say ( Heike , DH-3-end ) ;
9597: LD_EXP 21
9601: PPUSH
9602: LD_STRING DH-3-end
9604: PPUSH
9605: CALL_OW 88
// SayRadio ( Farmer , DF-4-end ) ;
9609: LD_EXP 29
9613: PPUSH
9614: LD_STRING DF-4-end
9616: PPUSH
9617: CALL_OW 94
// if tick <= [ 20 20$00 , 15 15$00 , 10 10$00 ] [ Difficulty ] then
9621: LD_OWVAR 1
9625: PUSH
9626: LD_INT 42000
9628: PUSH
9629: LD_INT 31500
9631: PUSH
9632: LD_INT 21000
9634: PUSH
9635: EMPTY
9636: LIST
9637: LIST
9638: LIST
9639: PUSH
9640: LD_OWVAR 67
9644: ARRAY
9645: LESSEQUAL
9646: IFFALSE 9660
// AddMedal ( med1 , 1 ) else
9648: LD_STRING med1
9650: PPUSH
9651: LD_INT 1
9653: PPUSH
9654: CALL_OW 101
9658: GO 9671
// AddMedal ( med1 , - 1 ) ;
9660: LD_STRING med1
9662: PPUSH
9663: LD_INT 1
9665: NEG
9666: PPUSH
9667: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) = 0 then
9671: LD_INT 22
9673: PUSH
9674: LD_INT 1
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: PUSH
9681: LD_INT 25
9683: PUSH
9684: LD_INT 4
9686: PUSH
9687: EMPTY
9688: LIST
9689: LIST
9690: PUSH
9691: EMPTY
9692: LIST
9693: LIST
9694: PPUSH
9695: CALL_OW 69
9699: PUSH
9700: LD_INT 0
9702: EQUAL
9703: IFFALSE 9717
// AddMedal ( med2 , 1 ) else
9705: LD_STRING med2
9707: PPUSH
9708: LD_INT 1
9710: PPUSH
9711: CALL_OW 101
9715: GO 9728
// AddMedal ( med2 , - 1 ) ;
9717: LD_STRING med2
9719: PPUSH
9720: LD_INT 1
9722: NEG
9723: PPUSH
9724: CALL_OW 101
// if trickyMove then
9728: LD_EXP 13
9732: IFFALSE 9746
// AddMedal ( med3 , 1 ) else
9734: LD_STRING med3
9736: PPUSH
9737: LD_INT 1
9739: PPUSH
9740: CALL_OW 101
9744: GO 9757
// AddMedal ( med3 , - 1 ) ;
9746: LD_STRING med3
9748: PPUSH
9749: LD_INT 1
9751: NEG
9752: PPUSH
9753: CALL_OW 101
// GiveMedals ( MAIN ) ;
9757: LD_STRING MAIN
9759: PPUSH
9760: CALL_OW 102
// SaveCharacters ( tmp , 02_ape ) ;
9764: LD_VAR 0 1
9768: PPUSH
9769: LD_STRING 02_ape
9771: PPUSH
9772: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
9776: LD_ADDR_VAR 0 1
9780: PUSH
9781: LD_INT 22
9783: PUSH
9784: LD_INT 2
9786: PUSH
9787: EMPTY
9788: LIST
9789: LIST
9790: PUSH
9791: LD_INT 23
9793: PUSH
9794: LD_INT 2
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: PUSH
9801: LD_INT 21
9803: PUSH
9804: LD_INT 1
9806: PUSH
9807: EMPTY
9808: LIST
9809: LIST
9810: PUSH
9811: EMPTY
9812: LIST
9813: LIST
9814: LIST
9815: PPUSH
9816: CALL_OW 69
9820: ST_TO_ADDR
// RewardPeople ( tmp ) ;
9821: LD_VAR 0 1
9825: PPUSH
9826: CALL_OW 43
// SaveCharacters ( Heike , 02_Heike ) ;
9830: LD_EXP 21
9834: PPUSH
9835: LD_STRING 02_Heike
9837: PPUSH
9838: CALL_OW 38
// SaveCharacters ( Aviradze , 02_Aviradze ) ;
9842: LD_EXP 25
9846: PPUSH
9847: LD_STRING 02_Aviradze
9849: PPUSH
9850: CALL_OW 38
// if Givi then
9854: LD_EXP 22
9858: IFFALSE 9872
// SaveCharacters ( Givi , 02_Givi ) ;
9860: LD_EXP 22
9864: PPUSH
9865: LD_STRING 02_Givi
9867: PPUSH
9868: CALL_OW 38
// if Mike then
9872: LD_EXP 23
9876: IFFALSE 9890
// SaveCharacters ( Mike , 02_Mike ) ;
9878: LD_EXP 23
9882: PPUSH
9883: LD_STRING 02_Mike
9885: PPUSH
9886: CALL_OW 38
// if Kamil then
9890: LD_EXP 24
9894: IFFALSE 9908
// SaveCharacters ( Kamil , 02_Kamil ) ;
9896: LD_EXP 24
9900: PPUSH
9901: LD_STRING 02_Kamil
9903: PPUSH
9904: CALL_OW 38
// if Kaia then
9908: LD_EXP 26
9912: IFFALSE 9926
// SaveCharacters ( Kaia , 02_Kaia ) ;
9914: LD_EXP 26
9918: PPUSH
9919: LD_STRING 02_Kaia
9921: PPUSH
9922: CALL_OW 38
// if Sophia then
9926: LD_EXP 27
9930: IFFALSE 9944
// SaveCharacters ( Sophia , 02_Sophia ) ;
9932: LD_EXP 27
9936: PPUSH
9937: LD_STRING 02_Sophia
9939: PPUSH
9940: CALL_OW 38
// if Markov then
9944: LD_EXP 28
9948: IFFALSE 9962
// SaveCharacters ( Markov , 02_Markov ) ;
9950: LD_EXP 28
9954: PPUSH
9955: LD_STRING 02_Markov
9957: PPUSH
9958: CALL_OW 38
// if tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] then
9962: LD_VAR 0 1
9966: PUSH
9967: LD_EXP 21
9971: PUSH
9972: LD_EXP 25
9976: PUSH
9977: LD_EXP 22
9981: PUSH
9982: LD_EXP 23
9986: PUSH
9987: LD_EXP 24
9991: PUSH
9992: LD_EXP 27
9996: PUSH
9997: LD_EXP 26
10001: PUSH
10002: LD_EXP 28
10006: PUSH
10007: EMPTY
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: DIFF
10017: IFFALSE 10082
// SaveCharacters ( tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] , 02_others ) ;
10019: LD_VAR 0 1
10023: PUSH
10024: LD_EXP 21
10028: PUSH
10029: LD_EXP 25
10033: PUSH
10034: LD_EXP 22
10038: PUSH
10039: LD_EXP 23
10043: PUSH
10044: LD_EXP 24
10048: PUSH
10049: LD_EXP 27
10053: PUSH
10054: LD_EXP 26
10058: PUSH
10059: LD_EXP 28
10063: PUSH
10064: EMPTY
10065: LIST
10066: LIST
10067: LIST
10068: LIST
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: DIFF
10074: PPUSH
10075: LD_STRING 02_others
10077: PPUSH
10078: CALL_OW 38
// YouWin ;
10082: CALL_OW 103
// InGameOff ;
10086: CALL_OW 9
// end ;
10090: PPOPN 1
10092: END
// every 0 0$1 trigger tick > timeUntilFarmer and aviradzeSpotted do
10093: LD_OWVAR 1
10097: PUSH
10098: LD_EXP 11
10102: GREATER
10103: PUSH
10104: LD_EXP 4
10108: AND
10109: IFFALSE 10149
10111: GO 10113
10113: DISABLE
// begin InGameOn ;
10114: CALL_OW 8
// PrepareFarmer ;
10118: CALL 10749 0 0
// CenterNowOnUnits ( Farmer ) ;
10122: LD_EXP 29
10126: PPUSH
10127: CALL_OW 87
// wait ( 0 0$2 ) ;
10131: LD_INT 70
10133: PPUSH
10134: CALL_OW 67
// YouLost ( Farmer ) ;
10138: LD_STRING Farmer
10140: PPUSH
10141: CALL_OW 104
// InGameOff ;
10145: CALL_OW 9
// end ; end_of_file
10149: END
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer ; export function PrepareArabian ; var un , veh ; begin
10150: LD_INT 0
10152: PPUSH
10153: PPUSH
10154: PPUSH
// uc_side := 2 ;
10155: LD_ADDR_OWVAR 20
10159: PUSH
10160: LD_INT 2
10162: ST_TO_ADDR
// uc_nation := 2 ;
10163: LD_ADDR_OWVAR 21
10167: PUSH
10168: LD_INT 2
10170: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
10171: LD_ADDR_EXP 21
10175: PUSH
10176: LD_STRING Heike
10178: PPUSH
10179: LD_EXP 1
10183: NOT
10184: PPUSH
10185: LD_EXP 2
10189: PPUSH
10190: CALL 221 0 3
10194: ST_TO_ADDR
// PlaceUnitXY ( Heike , 83 , 72 , false ) ;
10195: LD_EXP 21
10199: PPUSH
10200: LD_INT 83
10202: PPUSH
10203: LD_INT 72
10205: PPUSH
10206: LD_INT 0
10208: PPUSH
10209: CALL_OW 48
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
10213: LD_ADDR_EXP 22
10217: PUSH
10218: LD_STRING Givi
10220: PPUSH
10221: LD_EXP 1
10225: NOT
10226: PPUSH
10227: LD_EXP 2
10231: PPUSH
10232: CALL 221 0 3
10236: ST_TO_ADDR
// if Givi then
10237: LD_EXP 22
10241: IFFALSE 10261
// PlaceUnitXY ( Givi , 87 , 76 , false ) ;
10243: LD_EXP 22
10247: PPUSH
10248: LD_INT 87
10250: PPUSH
10251: LD_INT 76
10253: PPUSH
10254: LD_INT 0
10256: PPUSH
10257: CALL_OW 48
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
10261: LD_ADDR_EXP 23
10265: PUSH
10266: LD_STRING Mike
10268: PPUSH
10269: LD_EXP 1
10273: NOT
10274: PPUSH
10275: LD_EXP 2
10279: PPUSH
10280: CALL 221 0 3
10284: ST_TO_ADDR
// if Mike then
10285: LD_EXP 23
10289: IFFALSE 10309
// PlaceUnitXY ( Mike , 84 , 76 , false ) ;
10291: LD_EXP 23
10295: PPUSH
10296: LD_INT 84
10298: PPUSH
10299: LD_INT 76
10301: PPUSH
10302: LD_INT 0
10304: PPUSH
10305: CALL_OW 48
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
10309: LD_ADDR_EXP 24
10313: PUSH
10314: LD_STRING Kamil
10316: PPUSH
10317: LD_EXP 1
10321: NOT
10322: PPUSH
10323: LD_EXP 2
10327: PPUSH
10328: CALL 221 0 3
10332: ST_TO_ADDR
// if Kamil then
10333: LD_EXP 24
10337: IFFALSE 10357
// PlaceUnitXY ( Kamil , 85 , 78 , false ) ;
10339: LD_EXP 24
10343: PPUSH
10344: LD_INT 85
10346: PPUSH
10347: LD_INT 78
10349: PPUSH
10350: LD_INT 0
10352: PPUSH
10353: CALL_OW 48
// uc_side := 5 ;
10357: LD_ADDR_OWVAR 20
10361: PUSH
10362: LD_INT 5
10364: ST_TO_ADDR
// uc_nation := 2 ;
10365: LD_ADDR_OWVAR 21
10369: PUSH
10370: LD_INT 2
10372: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , false ,  ) ;
10373: LD_ADDR_EXP 25
10377: PUSH
10378: LD_STRING Aviradze
10380: PPUSH
10381: LD_INT 0
10383: PPUSH
10384: LD_STRING 
10386: PPUSH
10387: CALL 221 0 3
10391: ST_TO_ADDR
// PlaceUnitXY ( Aviradze , 106 , 38 , false ) ;
10392: LD_EXP 25
10396: PPUSH
10397: LD_INT 106
10399: PPUSH
10400: LD_INT 38
10402: PPUSH
10403: LD_INT 0
10405: PPUSH
10406: CALL_OW 48
// ComTurnXY ( Aviradze , 103 , 38 ) ;
10410: LD_EXP 25
10414: PPUSH
10415: LD_INT 103
10417: PPUSH
10418: LD_INT 38
10420: PPUSH
10421: CALL_OW 118
// Kaia := PrepareUnit ( Kaia , false ,  ) ;
10425: LD_ADDR_EXP 26
10429: PUSH
10430: LD_STRING Kaia
10432: PPUSH
10433: LD_INT 0
10435: PPUSH
10436: LD_STRING 
10438: PPUSH
10439: CALL 221 0 3
10443: ST_TO_ADDR
// PlaceUnitXY ( Kaia , 100 , 34 , false ) ;
10444: LD_EXP 26
10448: PPUSH
10449: LD_INT 100
10451: PPUSH
10452: LD_INT 34
10454: PPUSH
10455: LD_INT 0
10457: PPUSH
10458: CALL_OW 48
// ComTurnXY ( Kaia , 100 , 39 ) ;
10462: LD_EXP 26
10466: PPUSH
10467: LD_INT 100
10469: PPUSH
10470: LD_INT 39
10472: PPUSH
10473: CALL_OW 118
// Sophia := PrepareUnit ( Sophia , false ,  ) ;
10477: LD_ADDR_EXP 27
10481: PUSH
10482: LD_STRING Sophia
10484: PPUSH
10485: LD_INT 0
10487: PPUSH
10488: LD_STRING 
10490: PPUSH
10491: CALL 221 0 3
10495: ST_TO_ADDR
// PlaceUnitXY ( Sophia , 109 , 50 , false ) ;
10496: LD_EXP 27
10500: PPUSH
10501: LD_INT 109
10503: PPUSH
10504: LD_INT 50
10506: PPUSH
10507: LD_INT 0
10509: PPUSH
10510: CALL_OW 48
// ComTurnXY ( Sophia , 100 , 39 ) ;
10514: LD_EXP 27
10518: PPUSH
10519: LD_INT 100
10521: PPUSH
10522: LD_INT 39
10524: PPUSH
10525: CALL_OW 118
// Markov := PrepareUnit ( Markov , false ,  ) ;
10529: LD_ADDR_EXP 28
10533: PUSH
10534: LD_STRING Markov
10536: PPUSH
10537: LD_INT 0
10539: PPUSH
10540: LD_STRING 
10542: PPUSH
10543: CALL 221 0 3
10547: ST_TO_ADDR
// PrepareTank ( 5 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , [ 90 , 70 , 60 ] [ Difficulty ] ) ;
10548: LD_INT 5
10550: PPUSH
10551: LD_INT 3
10553: PPUSH
10554: LD_INT 21
10556: PPUSH
10557: LD_INT 1
10559: PPUSH
10560: LD_INT 1
10562: PPUSH
10563: LD_INT 42
10565: PPUSH
10566: LD_INT 90
10568: PUSH
10569: LD_INT 70
10571: PUSH
10572: LD_INT 60
10574: PUSH
10575: EMPTY
10576: LIST
10577: LIST
10578: LIST
10579: PUSH
10580: LD_OWVAR 67
10584: ARRAY
10585: PPUSH
10586: CALL 284 0 7
// veh := CreateVehicle ;
10590: LD_ADDR_VAR 0 3
10594: PUSH
10595: CALL_OW 45
10599: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
10600: LD_VAR 0 3
10604: PPUSH
10605: LD_INT 4
10607: PPUSH
10608: CALL_OW 233
// PlaceUnitXY ( veh , 109 , 38 , false ) ;
10612: LD_VAR 0 3
10616: PPUSH
10617: LD_INT 109
10619: PPUSH
10620: LD_INT 38
10622: PPUSH
10623: LD_INT 0
10625: PPUSH
10626: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
10630: LD_EXP 28
10634: PPUSH
10635: LD_VAR 0 3
10639: PPUSH
10640: CALL_OW 52
// ComTurnUnit ( Kaia , Aviradze ) ;
10644: LD_EXP 26
10648: PPUSH
10649: LD_EXP 25
10653: PPUSH
10654: CALL_OW 119
// ComTurnUnit ( Aviradze , Kaia ) ;
10658: LD_EXP 25
10662: PPUSH
10663: LD_EXP 26
10667: PPUSH
10668: CALL_OW 119
// if not Givi or not Mike then
10672: LD_EXP 22
10676: NOT
10677: PUSH
10678: LD_EXP 23
10682: NOT
10683: OR
10684: IFFALSE 10744
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
10686: LD_INT 1
10688: PPUSH
10689: LD_INT 1
10691: PPUSH
10692: LD_INT 1
10694: PPUSH
10695: CALL_OW 380
// un := CreateHuman ;
10699: LD_ADDR_VAR 0 2
10703: PUSH
10704: CALL_OW 44
10708: ST_TO_ADDR
// PlaceUnitXYR ( un , 112 , 40 , 3 , false ) ;
10709: LD_VAR 0 2
10713: PPUSH
10714: LD_INT 112
10716: PPUSH
10717: LD_INT 40
10719: PPUSH
10720: LD_INT 3
10722: PPUSH
10723: LD_INT 0
10725: PPUSH
10726: CALL_OW 50
// ComTurnUnit ( un , Aviradze ) ;
10730: LD_VAR 0 2
10734: PPUSH
10735: LD_EXP 25
10739: PPUSH
10740: CALL_OW 119
// end ; end ;
10744: LD_VAR 0 1
10748: RET
// export function PrepareFarmer ; var i ; begin
10749: LD_INT 0
10751: PPUSH
10752: PPUSH
// uc_side := 5 ;
10753: LD_ADDR_OWVAR 20
10757: PUSH
10758: LD_INT 5
10760: ST_TO_ADDR
// uc_nation := 2 ;
10761: LD_ADDR_OWVAR 21
10765: PUSH
10766: LD_INT 2
10768: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
10769: LD_ADDR_EXP 29
10773: PUSH
10774: LD_STRING Farmer
10776: PPUSH
10777: LD_INT 0
10779: PPUSH
10780: LD_STRING 
10782: PPUSH
10783: CALL 221 0 3
10787: ST_TO_ADDR
// PlaceUnitXY ( Farmer , 106 , 62 , false ) ;
10788: LD_EXP 29
10792: PPUSH
10793: LD_INT 106
10795: PPUSH
10796: LD_INT 62
10798: PPUSH
10799: LD_INT 0
10801: PPUSH
10802: CALL_OW 48
// for i := 1 to 2 do
10806: LD_ADDR_VAR 0 2
10810: PUSH
10811: DOUBLE
10812: LD_INT 1
10814: DEC
10815: ST_TO_ADDR
10816: LD_INT 2
10818: PUSH
10819: FOR_TO
10820: IFFALSE 10858
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
10822: LD_INT 1
10824: PPUSH
10825: LD_INT 1
10827: PPUSH
10828: LD_INT 1
10830: PPUSH
10831: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 105 , 64 , 2 , false ) ;
10835: CALL_OW 44
10839: PPUSH
10840: LD_INT 105
10842: PPUSH
10843: LD_INT 64
10845: PPUSH
10846: LD_INT 2
10848: PPUSH
10849: LD_INT 0
10851: PPUSH
10852: CALL_OW 50
// end ;
10856: GO 10819
10858: POP
10859: POP
// end ; end_of_file
10860: LD_VAR 0 1
10864: RET
// every 2 2$20 + 0 0$10 do
10865: GO 10867
10867: DISABLE
// begin enable ;
10868: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , forest , true ) ;
10869: LD_INT 1
10871: PPUSH
10872: LD_INT 5
10874: PPUSH
10875: CALL_OW 12
10879: PPUSH
10880: LD_INT 1
10882: PPUSH
10883: LD_INT 1
10885: PPUSH
10886: CALL_OW 55
// end ; end_of_file
10890: END
// on UnitDestroyed ( un ) do begin if un = Heike then
10891: LD_VAR 0 1
10895: PUSH
10896: LD_EXP 21
10900: EQUAL
10901: IFFALSE 10910
// YouLost ( Heike ) ;
10903: LD_STRING Heike
10905: PPUSH
10906: CALL_OW 104
// if un = Aviradze then
10910: LD_VAR 0 1
10914: PUSH
10915: LD_EXP 25
10919: EQUAL
10920: IFFALSE 10929
// YouLost ( Aviradze ) ;
10922: LD_STRING Aviradze
10924: PPUSH
10925: CALL_OW 104
// if un = usLab then
10929: LD_VAR 0 1
10933: PUSH
10934: LD_INT 3
10936: EQUAL
10937: IFFALSE 10946
// YouLost ( Lab ) ;
10939: LD_STRING Lab
10941: PPUSH
10942: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) diff [ Heike , Aviradze ] and aviradzeSpotted then
10946: LD_VAR 0 1
10950: PUSH
10951: LD_INT 22
10953: PUSH
10954: LD_INT 2
10956: PUSH
10957: EMPTY
10958: LIST
10959: LIST
10960: PUSH
10961: LD_INT 21
10963: PUSH
10964: LD_INT 1
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: PUSH
10971: LD_INT 23
10973: PUSH
10974: LD_INT 2
10976: PUSH
10977: EMPTY
10978: LIST
10979: LIST
10980: PUSH
10981: EMPTY
10982: LIST
10983: LIST
10984: LIST
10985: PPUSH
10986: CALL_OW 69
10990: PUSH
10991: LD_EXP 21
10995: PUSH
10996: LD_EXP 25
11000: PUSH
11001: EMPTY
11002: LIST
11003: LIST
11004: DIFF
11005: IN
11006: PUSH
11007: LD_EXP 4
11011: AND
11012: IFFALSE 11028
// lostCounter := lostCounter + 1 ;
11014: LD_ADDR_EXP 16
11018: PUSH
11019: LD_EXP 16
11023: PUSH
11024: LD_INT 1
11026: PLUS
11027: ST_TO_ADDR
// end ;
11028: PPOPN 1
11030: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in usSci and killerSide = 2 then
11031: LD_VAR 0 1
11035: PUSH
11036: LD_EXP 20
11040: IN
11041: PUSH
11042: LD_VAR 0 2
11046: PUSH
11047: LD_INT 2
11049: EQUAL
11050: AND
11051: IFFALSE 11083
// begin usSci := usSci diff un ;
11053: LD_ADDR_EXP 20
11057: PUSH
11058: LD_EXP 20
11062: PUSH
11063: LD_VAR 0 1
11067: DIFF
11068: ST_TO_ADDR
// sciCounterKill := sciCounterKill + 1 ;
11069: LD_ADDR_EXP 8
11073: PUSH
11074: LD_EXP 8
11078: PUSH
11079: LD_INT 1
11081: PLUS
11082: ST_TO_ADDR
// end ; end ;
11083: PPOPN 3
11085: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
11086: LD_VAR 0 1
11090: PUSH
11091: LD_INT 2
11093: EQUAL
11094: PUSH
11095: LD_VAR 0 2
11099: PUSH
11100: LD_INT 5
11102: EQUAL
11103: AND
11104: IFFALSE 11113
// YouLost ( FriendlyFire ) ;
11106: LD_STRING FriendlyFire
11108: PPUSH
11109: CALL_OW 104
// end ; end_of_file
11113: PPOPN 2
11115: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
11116: GO 11118
11118: DISABLE
// begin ru_radar := 98 ;
11119: LD_ADDR_EXP 30
11123: PUSH
11124: LD_INT 98
11126: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
11127: LD_ADDR_EXP 31
11131: PUSH
11132: LD_INT 89
11134: ST_TO_ADDR
// us_hack := 99 ;
11135: LD_ADDR_EXP 32
11139: PUSH
11140: LD_INT 99
11142: ST_TO_ADDR
// us_artillery := 97 ;
11143: LD_ADDR_EXP 33
11147: PUSH
11148: LD_INT 97
11150: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11151: LD_ADDR_EXP 34
11155: PUSH
11156: LD_INT 91
11158: ST_TO_ADDR
// tech_Artillery := 80 ;
11159: LD_ADDR_EXP 35
11163: PUSH
11164: LD_INT 80
11166: ST_TO_ADDR
// tech_RadMat := 81 ;
11167: LD_ADDR_EXP 36
11171: PUSH
11172: LD_INT 81
11174: ST_TO_ADDR
// tech_BasicTools := 82 ;
11175: LD_ADDR_EXP 37
11179: PUSH
11180: LD_INT 82
11182: ST_TO_ADDR
// tech_Cargo := 83 ;
11183: LD_ADDR_EXP 38
11187: PUSH
11188: LD_INT 83
11190: ST_TO_ADDR
// tech_Track := 84 ;
11191: LD_ADDR_EXP 39
11195: PUSH
11196: LD_INT 84
11198: ST_TO_ADDR
// tech_Crane := 85 ;
11199: LD_ADDR_EXP 40
11203: PUSH
11204: LD_INT 85
11206: ST_TO_ADDR
// tech_Bulldozer := 86 ;
11207: LD_ADDR_EXP 41
11211: PUSH
11212: LD_INT 86
11214: ST_TO_ADDR
// tech_Hovercraft := 87 ;
11215: LD_ADDR_EXP 42
11219: PUSH
11220: LD_INT 87
11222: ST_TO_ADDR
// end ; end_of_file end_of_file
11223: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
11224: GO 11226
11226: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
11227: LD_STRING initStreamRollete();
11229: PPUSH
11230: CALL_OW 559
// InitStreamMode ;
11234: CALL 11243 0 0
// DefineStreamItems ( ) ;
11238: CALL 11683 0 0
// end ;
11242: END
// function InitStreamMode ; begin
11243: LD_INT 0
11245: PPUSH
// streamModeActive := false ;
11246: LD_ADDR_EXP 43
11250: PUSH
11251: LD_INT 0
11253: ST_TO_ADDR
// normalCounter := 36 ;
11254: LD_ADDR_EXP 44
11258: PUSH
11259: LD_INT 36
11261: ST_TO_ADDR
// hardcoreCounter := 16 ;
11262: LD_ADDR_EXP 45
11266: PUSH
11267: LD_INT 16
11269: ST_TO_ADDR
// sRocket := false ;
11270: LD_ADDR_EXP 48
11274: PUSH
11275: LD_INT 0
11277: ST_TO_ADDR
// sSpeed := false ;
11278: LD_ADDR_EXP 47
11282: PUSH
11283: LD_INT 0
11285: ST_TO_ADDR
// sEngine := false ;
11286: LD_ADDR_EXP 49
11290: PUSH
11291: LD_INT 0
11293: ST_TO_ADDR
// sSpec := false ;
11294: LD_ADDR_EXP 46
11298: PUSH
11299: LD_INT 0
11301: ST_TO_ADDR
// sLevel := false ;
11302: LD_ADDR_EXP 50
11306: PUSH
11307: LD_INT 0
11309: ST_TO_ADDR
// sArmoury := false ;
11310: LD_ADDR_EXP 51
11314: PUSH
11315: LD_INT 0
11317: ST_TO_ADDR
// sRadar := false ;
11318: LD_ADDR_EXP 52
11322: PUSH
11323: LD_INT 0
11325: ST_TO_ADDR
// sBunker := false ;
11326: LD_ADDR_EXP 53
11330: PUSH
11331: LD_INT 0
11333: ST_TO_ADDR
// sHack := false ;
11334: LD_ADDR_EXP 54
11338: PUSH
11339: LD_INT 0
11341: ST_TO_ADDR
// sFire := false ;
11342: LD_ADDR_EXP 55
11346: PUSH
11347: LD_INT 0
11349: ST_TO_ADDR
// sRefresh := false ;
11350: LD_ADDR_EXP 56
11354: PUSH
11355: LD_INT 0
11357: ST_TO_ADDR
// sExp := false ;
11358: LD_ADDR_EXP 57
11362: PUSH
11363: LD_INT 0
11365: ST_TO_ADDR
// sDepot := false ;
11366: LD_ADDR_EXP 58
11370: PUSH
11371: LD_INT 0
11373: ST_TO_ADDR
// sFlag := false ;
11374: LD_ADDR_EXP 59
11378: PUSH
11379: LD_INT 0
11381: ST_TO_ADDR
// sKamikadze := false ;
11382: LD_ADDR_EXP 67
11386: PUSH
11387: LD_INT 0
11389: ST_TO_ADDR
// sTroll := false ;
11390: LD_ADDR_EXP 68
11394: PUSH
11395: LD_INT 0
11397: ST_TO_ADDR
// sSlow := false ;
11398: LD_ADDR_EXP 69
11402: PUSH
11403: LD_INT 0
11405: ST_TO_ADDR
// sLack := false ;
11406: LD_ADDR_EXP 70
11410: PUSH
11411: LD_INT 0
11413: ST_TO_ADDR
// sTank := false ;
11414: LD_ADDR_EXP 72
11418: PUSH
11419: LD_INT 0
11421: ST_TO_ADDR
// sRemote := false ;
11422: LD_ADDR_EXP 73
11426: PUSH
11427: LD_INT 0
11429: ST_TO_ADDR
// sPowell := false ;
11430: LD_ADDR_EXP 74
11434: PUSH
11435: LD_INT 0
11437: ST_TO_ADDR
// sTeleport := false ;
11438: LD_ADDR_EXP 77
11442: PUSH
11443: LD_INT 0
11445: ST_TO_ADDR
// sOilTower := false ;
11446: LD_ADDR_EXP 79
11450: PUSH
11451: LD_INT 0
11453: ST_TO_ADDR
// sShovel := false ;
11454: LD_ADDR_EXP 80
11458: PUSH
11459: LD_INT 0
11461: ST_TO_ADDR
// sSheik := false ;
11462: LD_ADDR_EXP 81
11466: PUSH
11467: LD_INT 0
11469: ST_TO_ADDR
// sEarthquake := false ;
11470: LD_ADDR_EXP 83
11474: PUSH
11475: LD_INT 0
11477: ST_TO_ADDR
// sAI := false ;
11478: LD_ADDR_EXP 84
11482: PUSH
11483: LD_INT 0
11485: ST_TO_ADDR
// sCargo := false ;
11486: LD_ADDR_EXP 87
11490: PUSH
11491: LD_INT 0
11493: ST_TO_ADDR
// sDLaser := false ;
11494: LD_ADDR_EXP 88
11498: PUSH
11499: LD_INT 0
11501: ST_TO_ADDR
// sExchange := false ;
11502: LD_ADDR_EXP 89
11506: PUSH
11507: LD_INT 0
11509: ST_TO_ADDR
// sFac := false ;
11510: LD_ADDR_EXP 90
11514: PUSH
11515: LD_INT 0
11517: ST_TO_ADDR
// sPower := false ;
11518: LD_ADDR_EXP 91
11522: PUSH
11523: LD_INT 0
11525: ST_TO_ADDR
// sRandom := false ;
11526: LD_ADDR_EXP 92
11530: PUSH
11531: LD_INT 0
11533: ST_TO_ADDR
// sShield := false ;
11534: LD_ADDR_EXP 93
11538: PUSH
11539: LD_INT 0
11541: ST_TO_ADDR
// sTime := false ;
11542: LD_ADDR_EXP 94
11546: PUSH
11547: LD_INT 0
11549: ST_TO_ADDR
// sTools := false ;
11550: LD_ADDR_EXP 95
11554: PUSH
11555: LD_INT 0
11557: ST_TO_ADDR
// sSold := false ;
11558: LD_ADDR_EXP 60
11562: PUSH
11563: LD_INT 0
11565: ST_TO_ADDR
// sDiff := false ;
11566: LD_ADDR_EXP 61
11570: PUSH
11571: LD_INT 0
11573: ST_TO_ADDR
// sFog := false ;
11574: LD_ADDR_EXP 64
11578: PUSH
11579: LD_INT 0
11581: ST_TO_ADDR
// sReset := false ;
11582: LD_ADDR_EXP 65
11586: PUSH
11587: LD_INT 0
11589: ST_TO_ADDR
// sSun := false ;
11590: LD_ADDR_EXP 66
11594: PUSH
11595: LD_INT 0
11597: ST_TO_ADDR
// sTiger := false ;
11598: LD_ADDR_EXP 62
11602: PUSH
11603: LD_INT 0
11605: ST_TO_ADDR
// sBomb := false ;
11606: LD_ADDR_EXP 63
11610: PUSH
11611: LD_INT 0
11613: ST_TO_ADDR
// sWound := false ;
11614: LD_ADDR_EXP 71
11618: PUSH
11619: LD_INT 0
11621: ST_TO_ADDR
// sBetray := false ;
11622: LD_ADDR_EXP 75
11626: PUSH
11627: LD_INT 0
11629: ST_TO_ADDR
// sContamin := false ;
11630: LD_ADDR_EXP 76
11634: PUSH
11635: LD_INT 0
11637: ST_TO_ADDR
// sOil := false ;
11638: LD_ADDR_EXP 78
11642: PUSH
11643: LD_INT 0
11645: ST_TO_ADDR
// sStu := false ;
11646: LD_ADDR_EXP 82
11650: PUSH
11651: LD_INT 0
11653: ST_TO_ADDR
// sBazooka := false ;
11654: LD_ADDR_EXP 85
11658: PUSH
11659: LD_INT 0
11661: ST_TO_ADDR
// sMortar := false ;
11662: LD_ADDR_EXP 86
11666: PUSH
11667: LD_INT 0
11669: ST_TO_ADDR
// sRanger := false ;
11670: LD_ADDR_EXP 96
11674: PUSH
11675: LD_INT 0
11677: ST_TO_ADDR
// end ;
11678: LD_VAR 0 1
11682: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
11683: LD_INT 0
11685: PPUSH
11686: PPUSH
11687: PPUSH
11688: PPUSH
11689: PPUSH
// result := [ ] ;
11690: LD_ADDR_VAR 0 1
11694: PUSH
11695: EMPTY
11696: ST_TO_ADDR
// if campaign_id = 1 then
11697: LD_OWVAR 69
11701: PUSH
11702: LD_INT 1
11704: EQUAL
11705: IFFALSE 14643
// begin case mission_number of 1 :
11707: LD_OWVAR 70
11711: PUSH
11712: LD_INT 1
11714: DOUBLE
11715: EQUAL
11716: IFTRUE 11720
11718: GO 11784
11720: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
11721: LD_ADDR_VAR 0 1
11725: PUSH
11726: LD_INT 2
11728: PUSH
11729: LD_INT 4
11731: PUSH
11732: LD_INT 11
11734: PUSH
11735: LD_INT 12
11737: PUSH
11738: LD_INT 15
11740: PUSH
11741: LD_INT 16
11743: PUSH
11744: LD_INT 22
11746: PUSH
11747: LD_INT 23
11749: PUSH
11750: LD_INT 26
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: PUSH
11764: LD_INT 101
11766: PUSH
11767: LD_INT 102
11769: PUSH
11770: LD_INT 106
11772: PUSH
11773: EMPTY
11774: LIST
11775: LIST
11776: LIST
11777: PUSH
11778: EMPTY
11779: LIST
11780: LIST
11781: ST_TO_ADDR
11782: GO 14641
11784: LD_INT 2
11786: DOUBLE
11787: EQUAL
11788: IFTRUE 11792
11790: GO 11864
11792: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
11793: LD_ADDR_VAR 0 1
11797: PUSH
11798: LD_INT 2
11800: PUSH
11801: LD_INT 4
11803: PUSH
11804: LD_INT 11
11806: PUSH
11807: LD_INT 12
11809: PUSH
11810: LD_INT 15
11812: PUSH
11813: LD_INT 16
11815: PUSH
11816: LD_INT 22
11818: PUSH
11819: LD_INT 23
11821: PUSH
11822: LD_INT 26
11824: PUSH
11825: EMPTY
11826: LIST
11827: LIST
11828: LIST
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: PUSH
11836: LD_INT 101
11838: PUSH
11839: LD_INT 102
11841: PUSH
11842: LD_INT 105
11844: PUSH
11845: LD_INT 106
11847: PUSH
11848: LD_INT 108
11850: PUSH
11851: EMPTY
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: ST_TO_ADDR
11862: GO 14641
11864: LD_INT 3
11866: DOUBLE
11867: EQUAL
11868: IFTRUE 11872
11870: GO 11948
11872: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
11873: LD_ADDR_VAR 0 1
11877: PUSH
11878: LD_INT 2
11880: PUSH
11881: LD_INT 4
11883: PUSH
11884: LD_INT 5
11886: PUSH
11887: LD_INT 11
11889: PUSH
11890: LD_INT 12
11892: PUSH
11893: LD_INT 15
11895: PUSH
11896: LD_INT 16
11898: PUSH
11899: LD_INT 22
11901: PUSH
11902: LD_INT 26
11904: PUSH
11905: LD_INT 36
11907: PUSH
11908: EMPTY
11909: LIST
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: PUSH
11920: LD_INT 101
11922: PUSH
11923: LD_INT 102
11925: PUSH
11926: LD_INT 105
11928: PUSH
11929: LD_INT 106
11931: PUSH
11932: LD_INT 108
11934: PUSH
11935: EMPTY
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: ST_TO_ADDR
11946: GO 14641
11948: LD_INT 4
11950: DOUBLE
11951: EQUAL
11952: IFTRUE 11956
11954: GO 12040
11956: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
11957: LD_ADDR_VAR 0 1
11961: PUSH
11962: LD_INT 2
11964: PUSH
11965: LD_INT 4
11967: PUSH
11968: LD_INT 5
11970: PUSH
11971: LD_INT 8
11973: PUSH
11974: LD_INT 11
11976: PUSH
11977: LD_INT 12
11979: PUSH
11980: LD_INT 15
11982: PUSH
11983: LD_INT 16
11985: PUSH
11986: LD_INT 22
11988: PUSH
11989: LD_INT 23
11991: PUSH
11992: LD_INT 26
11994: PUSH
11995: LD_INT 36
11997: PUSH
11998: EMPTY
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: LIST
12009: LIST
12010: LIST
12011: PUSH
12012: LD_INT 101
12014: PUSH
12015: LD_INT 102
12017: PUSH
12018: LD_INT 105
12020: PUSH
12021: LD_INT 106
12023: PUSH
12024: LD_INT 108
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: PUSH
12034: EMPTY
12035: LIST
12036: LIST
12037: ST_TO_ADDR
12038: GO 14641
12040: LD_INT 5
12042: DOUBLE
12043: EQUAL
12044: IFTRUE 12048
12046: GO 12148
12048: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
12049: LD_ADDR_VAR 0 1
12053: PUSH
12054: LD_INT 2
12056: PUSH
12057: LD_INT 4
12059: PUSH
12060: LD_INT 5
12062: PUSH
12063: LD_INT 6
12065: PUSH
12066: LD_INT 8
12068: PUSH
12069: LD_INT 11
12071: PUSH
12072: LD_INT 12
12074: PUSH
12075: LD_INT 15
12077: PUSH
12078: LD_INT 16
12080: PUSH
12081: LD_INT 22
12083: PUSH
12084: LD_INT 23
12086: PUSH
12087: LD_INT 25
12089: PUSH
12090: LD_INT 26
12092: PUSH
12093: LD_INT 36
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: PUSH
12112: LD_INT 101
12114: PUSH
12115: LD_INT 102
12117: PUSH
12118: LD_INT 105
12120: PUSH
12121: LD_INT 106
12123: PUSH
12124: LD_INT 108
12126: PUSH
12127: LD_INT 109
12129: PUSH
12130: LD_INT 112
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: ST_TO_ADDR
12146: GO 14641
12148: LD_INT 6
12150: DOUBLE
12151: EQUAL
12152: IFTRUE 12156
12154: GO 12276
12156: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
12157: LD_ADDR_VAR 0 1
12161: PUSH
12162: LD_INT 2
12164: PUSH
12165: LD_INT 4
12167: PUSH
12168: LD_INT 5
12170: PUSH
12171: LD_INT 6
12173: PUSH
12174: LD_INT 8
12176: PUSH
12177: LD_INT 11
12179: PUSH
12180: LD_INT 12
12182: PUSH
12183: LD_INT 15
12185: PUSH
12186: LD_INT 16
12188: PUSH
12189: LD_INT 20
12191: PUSH
12192: LD_INT 21
12194: PUSH
12195: LD_INT 22
12197: PUSH
12198: LD_INT 23
12200: PUSH
12201: LD_INT 25
12203: PUSH
12204: LD_INT 26
12206: PUSH
12207: LD_INT 30
12209: PUSH
12210: LD_INT 31
12212: PUSH
12213: LD_INT 32
12215: PUSH
12216: LD_INT 36
12218: PUSH
12219: EMPTY
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: PUSH
12240: LD_INT 101
12242: PUSH
12243: LD_INT 102
12245: PUSH
12246: LD_INT 105
12248: PUSH
12249: LD_INT 106
12251: PUSH
12252: LD_INT 108
12254: PUSH
12255: LD_INT 109
12257: PUSH
12258: LD_INT 112
12260: PUSH
12261: EMPTY
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: LIST
12269: PUSH
12270: EMPTY
12271: LIST
12272: LIST
12273: ST_TO_ADDR
12274: GO 14641
12276: LD_INT 7
12278: DOUBLE
12279: EQUAL
12280: IFTRUE 12284
12282: GO 12384
12284: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
12285: LD_ADDR_VAR 0 1
12289: PUSH
12290: LD_INT 2
12292: PUSH
12293: LD_INT 4
12295: PUSH
12296: LD_INT 5
12298: PUSH
12299: LD_INT 7
12301: PUSH
12302: LD_INT 11
12304: PUSH
12305: LD_INT 12
12307: PUSH
12308: LD_INT 15
12310: PUSH
12311: LD_INT 16
12313: PUSH
12314: LD_INT 20
12316: PUSH
12317: LD_INT 21
12319: PUSH
12320: LD_INT 22
12322: PUSH
12323: LD_INT 23
12325: PUSH
12326: LD_INT 25
12328: PUSH
12329: LD_INT 26
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: LIST
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: PUSH
12348: LD_INT 101
12350: PUSH
12351: LD_INT 102
12353: PUSH
12354: LD_INT 103
12356: PUSH
12357: LD_INT 105
12359: PUSH
12360: LD_INT 106
12362: PUSH
12363: LD_INT 108
12365: PUSH
12366: LD_INT 112
12368: PUSH
12369: EMPTY
12370: LIST
12371: LIST
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: PUSH
12378: EMPTY
12379: LIST
12380: LIST
12381: ST_TO_ADDR
12382: GO 14641
12384: LD_INT 8
12386: DOUBLE
12387: EQUAL
12388: IFTRUE 12392
12390: GO 12520
12392: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
12393: LD_ADDR_VAR 0 1
12397: PUSH
12398: LD_INT 2
12400: PUSH
12401: LD_INT 4
12403: PUSH
12404: LD_INT 5
12406: PUSH
12407: LD_INT 6
12409: PUSH
12410: LD_INT 7
12412: PUSH
12413: LD_INT 8
12415: PUSH
12416: LD_INT 11
12418: PUSH
12419: LD_INT 12
12421: PUSH
12422: LD_INT 15
12424: PUSH
12425: LD_INT 16
12427: PUSH
12428: LD_INT 20
12430: PUSH
12431: LD_INT 21
12433: PUSH
12434: LD_INT 22
12436: PUSH
12437: LD_INT 23
12439: PUSH
12440: LD_INT 25
12442: PUSH
12443: LD_INT 26
12445: PUSH
12446: LD_INT 30
12448: PUSH
12449: LD_INT 31
12451: PUSH
12452: LD_INT 32
12454: PUSH
12455: LD_INT 36
12457: PUSH
12458: EMPTY
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: PUSH
12480: LD_INT 101
12482: PUSH
12483: LD_INT 102
12485: PUSH
12486: LD_INT 103
12488: PUSH
12489: LD_INT 105
12491: PUSH
12492: LD_INT 106
12494: PUSH
12495: LD_INT 108
12497: PUSH
12498: LD_INT 109
12500: PUSH
12501: LD_INT 112
12503: PUSH
12504: EMPTY
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: PUSH
12514: EMPTY
12515: LIST
12516: LIST
12517: ST_TO_ADDR
12518: GO 14641
12520: LD_INT 9
12522: DOUBLE
12523: EQUAL
12524: IFTRUE 12528
12526: GO 12664
12528: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
12529: LD_ADDR_VAR 0 1
12533: PUSH
12534: LD_INT 2
12536: PUSH
12537: LD_INT 4
12539: PUSH
12540: LD_INT 5
12542: PUSH
12543: LD_INT 6
12545: PUSH
12546: LD_INT 7
12548: PUSH
12549: LD_INT 8
12551: PUSH
12552: LD_INT 11
12554: PUSH
12555: LD_INT 12
12557: PUSH
12558: LD_INT 15
12560: PUSH
12561: LD_INT 16
12563: PUSH
12564: LD_INT 20
12566: PUSH
12567: LD_INT 21
12569: PUSH
12570: LD_INT 22
12572: PUSH
12573: LD_INT 23
12575: PUSH
12576: LD_INT 25
12578: PUSH
12579: LD_INT 26
12581: PUSH
12582: LD_INT 28
12584: PUSH
12585: LD_INT 30
12587: PUSH
12588: LD_INT 31
12590: PUSH
12591: LD_INT 32
12593: PUSH
12594: LD_INT 36
12596: PUSH
12597: EMPTY
12598: LIST
12599: LIST
12600: LIST
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: LIST
12606: LIST
12607: LIST
12608: LIST
12609: LIST
12610: LIST
12611: LIST
12612: LIST
12613: LIST
12614: LIST
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: PUSH
12620: LD_INT 101
12622: PUSH
12623: LD_INT 102
12625: PUSH
12626: LD_INT 103
12628: PUSH
12629: LD_INT 105
12631: PUSH
12632: LD_INT 106
12634: PUSH
12635: LD_INT 108
12637: PUSH
12638: LD_INT 109
12640: PUSH
12641: LD_INT 112
12643: PUSH
12644: LD_INT 114
12646: PUSH
12647: EMPTY
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: PUSH
12658: EMPTY
12659: LIST
12660: LIST
12661: ST_TO_ADDR
12662: GO 14641
12664: LD_INT 10
12666: DOUBLE
12667: EQUAL
12668: IFTRUE 12672
12670: GO 12856
12672: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
12673: LD_ADDR_VAR 0 1
12677: PUSH
12678: LD_INT 2
12680: PUSH
12681: LD_INT 4
12683: PUSH
12684: LD_INT 5
12686: PUSH
12687: LD_INT 6
12689: PUSH
12690: LD_INT 7
12692: PUSH
12693: LD_INT 8
12695: PUSH
12696: LD_INT 9
12698: PUSH
12699: LD_INT 10
12701: PUSH
12702: LD_INT 11
12704: PUSH
12705: LD_INT 12
12707: PUSH
12708: LD_INT 13
12710: PUSH
12711: LD_INT 14
12713: PUSH
12714: LD_INT 15
12716: PUSH
12717: LD_INT 16
12719: PUSH
12720: LD_INT 17
12722: PUSH
12723: LD_INT 18
12725: PUSH
12726: LD_INT 19
12728: PUSH
12729: LD_INT 20
12731: PUSH
12732: LD_INT 21
12734: PUSH
12735: LD_INT 22
12737: PUSH
12738: LD_INT 23
12740: PUSH
12741: LD_INT 24
12743: PUSH
12744: LD_INT 25
12746: PUSH
12747: LD_INT 26
12749: PUSH
12750: LD_INT 28
12752: PUSH
12753: LD_INT 30
12755: PUSH
12756: LD_INT 31
12758: PUSH
12759: LD_INT 32
12761: PUSH
12762: LD_INT 36
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: LIST
12769: LIST
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: LIST
12775: LIST
12776: LIST
12777: LIST
12778: LIST
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: PUSH
12796: LD_INT 101
12798: PUSH
12799: LD_INT 102
12801: PUSH
12802: LD_INT 103
12804: PUSH
12805: LD_INT 104
12807: PUSH
12808: LD_INT 105
12810: PUSH
12811: LD_INT 106
12813: PUSH
12814: LD_INT 107
12816: PUSH
12817: LD_INT 108
12819: PUSH
12820: LD_INT 109
12822: PUSH
12823: LD_INT 110
12825: PUSH
12826: LD_INT 111
12828: PUSH
12829: LD_INT 112
12831: PUSH
12832: LD_INT 114
12834: PUSH
12835: EMPTY
12836: LIST
12837: LIST
12838: LIST
12839: LIST
12840: LIST
12841: LIST
12842: LIST
12843: LIST
12844: LIST
12845: LIST
12846: LIST
12847: LIST
12848: LIST
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: ST_TO_ADDR
12854: GO 14641
12856: LD_INT 11
12858: DOUBLE
12859: EQUAL
12860: IFTRUE 12864
12862: GO 13056
12864: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
12865: LD_ADDR_VAR 0 1
12869: PUSH
12870: LD_INT 2
12872: PUSH
12873: LD_INT 3
12875: PUSH
12876: LD_INT 4
12878: PUSH
12879: LD_INT 5
12881: PUSH
12882: LD_INT 6
12884: PUSH
12885: LD_INT 7
12887: PUSH
12888: LD_INT 8
12890: PUSH
12891: LD_INT 9
12893: PUSH
12894: LD_INT 10
12896: PUSH
12897: LD_INT 11
12899: PUSH
12900: LD_INT 12
12902: PUSH
12903: LD_INT 13
12905: PUSH
12906: LD_INT 14
12908: PUSH
12909: LD_INT 15
12911: PUSH
12912: LD_INT 16
12914: PUSH
12915: LD_INT 17
12917: PUSH
12918: LD_INT 18
12920: PUSH
12921: LD_INT 19
12923: PUSH
12924: LD_INT 20
12926: PUSH
12927: LD_INT 21
12929: PUSH
12930: LD_INT 22
12932: PUSH
12933: LD_INT 23
12935: PUSH
12936: LD_INT 24
12938: PUSH
12939: LD_INT 25
12941: PUSH
12942: LD_INT 26
12944: PUSH
12945: LD_INT 28
12947: PUSH
12948: LD_INT 30
12950: PUSH
12951: LD_INT 31
12953: PUSH
12954: LD_INT 32
12956: PUSH
12957: LD_INT 34
12959: PUSH
12960: LD_INT 36
12962: PUSH
12963: EMPTY
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: LIST
12987: LIST
12988: LIST
12989: LIST
12990: LIST
12991: LIST
12992: LIST
12993: LIST
12994: LIST
12995: PUSH
12996: LD_INT 101
12998: PUSH
12999: LD_INT 102
13001: PUSH
13002: LD_INT 103
13004: PUSH
13005: LD_INT 104
13007: PUSH
13008: LD_INT 105
13010: PUSH
13011: LD_INT 106
13013: PUSH
13014: LD_INT 107
13016: PUSH
13017: LD_INT 108
13019: PUSH
13020: LD_INT 109
13022: PUSH
13023: LD_INT 110
13025: PUSH
13026: LD_INT 111
13028: PUSH
13029: LD_INT 112
13031: PUSH
13032: LD_INT 114
13034: PUSH
13035: EMPTY
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: LIST
13048: LIST
13049: PUSH
13050: EMPTY
13051: LIST
13052: LIST
13053: ST_TO_ADDR
13054: GO 14641
13056: LD_INT 12
13058: DOUBLE
13059: EQUAL
13060: IFTRUE 13064
13062: GO 13272
13064: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
13065: LD_ADDR_VAR 0 1
13069: PUSH
13070: LD_INT 1
13072: PUSH
13073: LD_INT 2
13075: PUSH
13076: LD_INT 3
13078: PUSH
13079: LD_INT 4
13081: PUSH
13082: LD_INT 5
13084: PUSH
13085: LD_INT 6
13087: PUSH
13088: LD_INT 7
13090: PUSH
13091: LD_INT 8
13093: PUSH
13094: LD_INT 9
13096: PUSH
13097: LD_INT 10
13099: PUSH
13100: LD_INT 11
13102: PUSH
13103: LD_INT 12
13105: PUSH
13106: LD_INT 13
13108: PUSH
13109: LD_INT 14
13111: PUSH
13112: LD_INT 15
13114: PUSH
13115: LD_INT 16
13117: PUSH
13118: LD_INT 17
13120: PUSH
13121: LD_INT 18
13123: PUSH
13124: LD_INT 19
13126: PUSH
13127: LD_INT 20
13129: PUSH
13130: LD_INT 21
13132: PUSH
13133: LD_INT 22
13135: PUSH
13136: LD_INT 23
13138: PUSH
13139: LD_INT 24
13141: PUSH
13142: LD_INT 25
13144: PUSH
13145: LD_INT 26
13147: PUSH
13148: LD_INT 27
13150: PUSH
13151: LD_INT 28
13153: PUSH
13154: LD_INT 30
13156: PUSH
13157: LD_INT 31
13159: PUSH
13160: LD_INT 32
13162: PUSH
13163: LD_INT 33
13165: PUSH
13166: LD_INT 34
13168: PUSH
13169: LD_INT 36
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: LIST
13207: PUSH
13208: LD_INT 101
13210: PUSH
13211: LD_INT 102
13213: PUSH
13214: LD_INT 103
13216: PUSH
13217: LD_INT 104
13219: PUSH
13220: LD_INT 105
13222: PUSH
13223: LD_INT 106
13225: PUSH
13226: LD_INT 107
13228: PUSH
13229: LD_INT 108
13231: PUSH
13232: LD_INT 109
13234: PUSH
13235: LD_INT 110
13237: PUSH
13238: LD_INT 111
13240: PUSH
13241: LD_INT 112
13243: PUSH
13244: LD_INT 113
13246: PUSH
13247: LD_INT 114
13249: PUSH
13250: EMPTY
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: PUSH
13266: EMPTY
13267: LIST
13268: LIST
13269: ST_TO_ADDR
13270: GO 14641
13272: LD_INT 13
13274: DOUBLE
13275: EQUAL
13276: IFTRUE 13280
13278: GO 13476
13280: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
13281: LD_ADDR_VAR 0 1
13285: PUSH
13286: LD_INT 1
13288: PUSH
13289: LD_INT 2
13291: PUSH
13292: LD_INT 3
13294: PUSH
13295: LD_INT 4
13297: PUSH
13298: LD_INT 5
13300: PUSH
13301: LD_INT 8
13303: PUSH
13304: LD_INT 9
13306: PUSH
13307: LD_INT 10
13309: PUSH
13310: LD_INT 11
13312: PUSH
13313: LD_INT 12
13315: PUSH
13316: LD_INT 14
13318: PUSH
13319: LD_INT 15
13321: PUSH
13322: LD_INT 16
13324: PUSH
13325: LD_INT 17
13327: PUSH
13328: LD_INT 18
13330: PUSH
13331: LD_INT 19
13333: PUSH
13334: LD_INT 20
13336: PUSH
13337: LD_INT 21
13339: PUSH
13340: LD_INT 22
13342: PUSH
13343: LD_INT 23
13345: PUSH
13346: LD_INT 24
13348: PUSH
13349: LD_INT 25
13351: PUSH
13352: LD_INT 26
13354: PUSH
13355: LD_INT 27
13357: PUSH
13358: LD_INT 28
13360: PUSH
13361: LD_INT 30
13363: PUSH
13364: LD_INT 31
13366: PUSH
13367: LD_INT 32
13369: PUSH
13370: LD_INT 33
13372: PUSH
13373: LD_INT 34
13375: PUSH
13376: LD_INT 36
13378: PUSH
13379: EMPTY
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: PUSH
13412: LD_INT 101
13414: PUSH
13415: LD_INT 102
13417: PUSH
13418: LD_INT 103
13420: PUSH
13421: LD_INT 104
13423: PUSH
13424: LD_INT 105
13426: PUSH
13427: LD_INT 106
13429: PUSH
13430: LD_INT 107
13432: PUSH
13433: LD_INT 108
13435: PUSH
13436: LD_INT 109
13438: PUSH
13439: LD_INT 110
13441: PUSH
13442: LD_INT 111
13444: PUSH
13445: LD_INT 112
13447: PUSH
13448: LD_INT 113
13450: PUSH
13451: LD_INT 114
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: ST_TO_ADDR
13474: GO 14641
13476: LD_INT 14
13478: DOUBLE
13479: EQUAL
13480: IFTRUE 13484
13482: GO 13696
13484: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
13485: LD_ADDR_VAR 0 1
13489: PUSH
13490: LD_INT 1
13492: PUSH
13493: LD_INT 2
13495: PUSH
13496: LD_INT 3
13498: PUSH
13499: LD_INT 4
13501: PUSH
13502: LD_INT 5
13504: PUSH
13505: LD_INT 6
13507: PUSH
13508: LD_INT 7
13510: PUSH
13511: LD_INT 8
13513: PUSH
13514: LD_INT 9
13516: PUSH
13517: LD_INT 10
13519: PUSH
13520: LD_INT 11
13522: PUSH
13523: LD_INT 12
13525: PUSH
13526: LD_INT 13
13528: PUSH
13529: LD_INT 14
13531: PUSH
13532: LD_INT 15
13534: PUSH
13535: LD_INT 16
13537: PUSH
13538: LD_INT 17
13540: PUSH
13541: LD_INT 18
13543: PUSH
13544: LD_INT 19
13546: PUSH
13547: LD_INT 20
13549: PUSH
13550: LD_INT 21
13552: PUSH
13553: LD_INT 22
13555: PUSH
13556: LD_INT 23
13558: PUSH
13559: LD_INT 24
13561: PUSH
13562: LD_INT 25
13564: PUSH
13565: LD_INT 26
13567: PUSH
13568: LD_INT 27
13570: PUSH
13571: LD_INT 28
13573: PUSH
13574: LD_INT 29
13576: PUSH
13577: LD_INT 30
13579: PUSH
13580: LD_INT 31
13582: PUSH
13583: LD_INT 32
13585: PUSH
13586: LD_INT 33
13588: PUSH
13589: LD_INT 34
13591: PUSH
13592: LD_INT 36
13594: PUSH
13595: EMPTY
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: PUSH
13632: LD_INT 101
13634: PUSH
13635: LD_INT 102
13637: PUSH
13638: LD_INT 103
13640: PUSH
13641: LD_INT 104
13643: PUSH
13644: LD_INT 105
13646: PUSH
13647: LD_INT 106
13649: PUSH
13650: LD_INT 107
13652: PUSH
13653: LD_INT 108
13655: PUSH
13656: LD_INT 109
13658: PUSH
13659: LD_INT 110
13661: PUSH
13662: LD_INT 111
13664: PUSH
13665: LD_INT 112
13667: PUSH
13668: LD_INT 113
13670: PUSH
13671: LD_INT 114
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: PUSH
13690: EMPTY
13691: LIST
13692: LIST
13693: ST_TO_ADDR
13694: GO 14641
13696: LD_INT 15
13698: DOUBLE
13699: EQUAL
13700: IFTRUE 13704
13702: GO 13916
13704: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
13705: LD_ADDR_VAR 0 1
13709: PUSH
13710: LD_INT 1
13712: PUSH
13713: LD_INT 2
13715: PUSH
13716: LD_INT 3
13718: PUSH
13719: LD_INT 4
13721: PUSH
13722: LD_INT 5
13724: PUSH
13725: LD_INT 6
13727: PUSH
13728: LD_INT 7
13730: PUSH
13731: LD_INT 8
13733: PUSH
13734: LD_INT 9
13736: PUSH
13737: LD_INT 10
13739: PUSH
13740: LD_INT 11
13742: PUSH
13743: LD_INT 12
13745: PUSH
13746: LD_INT 13
13748: PUSH
13749: LD_INT 14
13751: PUSH
13752: LD_INT 15
13754: PUSH
13755: LD_INT 16
13757: PUSH
13758: LD_INT 17
13760: PUSH
13761: LD_INT 18
13763: PUSH
13764: LD_INT 19
13766: PUSH
13767: LD_INT 20
13769: PUSH
13770: LD_INT 21
13772: PUSH
13773: LD_INT 22
13775: PUSH
13776: LD_INT 23
13778: PUSH
13779: LD_INT 24
13781: PUSH
13782: LD_INT 25
13784: PUSH
13785: LD_INT 26
13787: PUSH
13788: LD_INT 27
13790: PUSH
13791: LD_INT 28
13793: PUSH
13794: LD_INT 29
13796: PUSH
13797: LD_INT 30
13799: PUSH
13800: LD_INT 31
13802: PUSH
13803: LD_INT 32
13805: PUSH
13806: LD_INT 33
13808: PUSH
13809: LD_INT 34
13811: PUSH
13812: LD_INT 36
13814: PUSH
13815: EMPTY
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: LIST
13841: LIST
13842: LIST
13843: LIST
13844: LIST
13845: LIST
13846: LIST
13847: LIST
13848: LIST
13849: LIST
13850: LIST
13851: PUSH
13852: LD_INT 101
13854: PUSH
13855: LD_INT 102
13857: PUSH
13858: LD_INT 103
13860: PUSH
13861: LD_INT 104
13863: PUSH
13864: LD_INT 105
13866: PUSH
13867: LD_INT 106
13869: PUSH
13870: LD_INT 107
13872: PUSH
13873: LD_INT 108
13875: PUSH
13876: LD_INT 109
13878: PUSH
13879: LD_INT 110
13881: PUSH
13882: LD_INT 111
13884: PUSH
13885: LD_INT 112
13887: PUSH
13888: LD_INT 113
13890: PUSH
13891: LD_INT 114
13893: PUSH
13894: EMPTY
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: PUSH
13910: EMPTY
13911: LIST
13912: LIST
13913: ST_TO_ADDR
13914: GO 14641
13916: LD_INT 16
13918: DOUBLE
13919: EQUAL
13920: IFTRUE 13924
13922: GO 14048
13924: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
13925: LD_ADDR_VAR 0 1
13929: PUSH
13930: LD_INT 2
13932: PUSH
13933: LD_INT 4
13935: PUSH
13936: LD_INT 5
13938: PUSH
13939: LD_INT 7
13941: PUSH
13942: LD_INT 11
13944: PUSH
13945: LD_INT 12
13947: PUSH
13948: LD_INT 15
13950: PUSH
13951: LD_INT 16
13953: PUSH
13954: LD_INT 20
13956: PUSH
13957: LD_INT 21
13959: PUSH
13960: LD_INT 22
13962: PUSH
13963: LD_INT 23
13965: PUSH
13966: LD_INT 25
13968: PUSH
13969: LD_INT 26
13971: PUSH
13972: LD_INT 30
13974: PUSH
13975: LD_INT 31
13977: PUSH
13978: LD_INT 32
13980: PUSH
13981: LD_INT 33
13983: PUSH
13984: LD_INT 34
13986: PUSH
13987: EMPTY
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: PUSH
14008: LD_INT 101
14010: PUSH
14011: LD_INT 102
14013: PUSH
14014: LD_INT 103
14016: PUSH
14017: LD_INT 106
14019: PUSH
14020: LD_INT 108
14022: PUSH
14023: LD_INT 112
14025: PUSH
14026: LD_INT 113
14028: PUSH
14029: LD_INT 114
14031: PUSH
14032: EMPTY
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: PUSH
14042: EMPTY
14043: LIST
14044: LIST
14045: ST_TO_ADDR
14046: GO 14641
14048: LD_INT 17
14050: DOUBLE
14051: EQUAL
14052: IFTRUE 14056
14054: GO 14268
14056: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
14057: LD_ADDR_VAR 0 1
14061: PUSH
14062: LD_INT 1
14064: PUSH
14065: LD_INT 2
14067: PUSH
14068: LD_INT 3
14070: PUSH
14071: LD_INT 4
14073: PUSH
14074: LD_INT 5
14076: PUSH
14077: LD_INT 6
14079: PUSH
14080: LD_INT 7
14082: PUSH
14083: LD_INT 8
14085: PUSH
14086: LD_INT 9
14088: PUSH
14089: LD_INT 10
14091: PUSH
14092: LD_INT 11
14094: PUSH
14095: LD_INT 12
14097: PUSH
14098: LD_INT 13
14100: PUSH
14101: LD_INT 14
14103: PUSH
14104: LD_INT 15
14106: PUSH
14107: LD_INT 16
14109: PUSH
14110: LD_INT 17
14112: PUSH
14113: LD_INT 18
14115: PUSH
14116: LD_INT 19
14118: PUSH
14119: LD_INT 20
14121: PUSH
14122: LD_INT 21
14124: PUSH
14125: LD_INT 22
14127: PUSH
14128: LD_INT 23
14130: PUSH
14131: LD_INT 24
14133: PUSH
14134: LD_INT 25
14136: PUSH
14137: LD_INT 26
14139: PUSH
14140: LD_INT 27
14142: PUSH
14143: LD_INT 28
14145: PUSH
14146: LD_INT 29
14148: PUSH
14149: LD_INT 30
14151: PUSH
14152: LD_INT 31
14154: PUSH
14155: LD_INT 32
14157: PUSH
14158: LD_INT 33
14160: PUSH
14161: LD_INT 34
14163: PUSH
14164: LD_INT 36
14166: PUSH
14167: EMPTY
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: PUSH
14204: LD_INT 101
14206: PUSH
14207: LD_INT 102
14209: PUSH
14210: LD_INT 103
14212: PUSH
14213: LD_INT 104
14215: PUSH
14216: LD_INT 105
14218: PUSH
14219: LD_INT 106
14221: PUSH
14222: LD_INT 107
14224: PUSH
14225: LD_INT 108
14227: PUSH
14228: LD_INT 109
14230: PUSH
14231: LD_INT 110
14233: PUSH
14234: LD_INT 111
14236: PUSH
14237: LD_INT 112
14239: PUSH
14240: LD_INT 113
14242: PUSH
14243: LD_INT 114
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: PUSH
14262: EMPTY
14263: LIST
14264: LIST
14265: ST_TO_ADDR
14266: GO 14641
14268: LD_INT 18
14270: DOUBLE
14271: EQUAL
14272: IFTRUE 14276
14274: GO 14412
14276: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
14277: LD_ADDR_VAR 0 1
14281: PUSH
14282: LD_INT 2
14284: PUSH
14285: LD_INT 4
14287: PUSH
14288: LD_INT 5
14290: PUSH
14291: LD_INT 7
14293: PUSH
14294: LD_INT 11
14296: PUSH
14297: LD_INT 12
14299: PUSH
14300: LD_INT 15
14302: PUSH
14303: LD_INT 16
14305: PUSH
14306: LD_INT 20
14308: PUSH
14309: LD_INT 21
14311: PUSH
14312: LD_INT 22
14314: PUSH
14315: LD_INT 23
14317: PUSH
14318: LD_INT 25
14320: PUSH
14321: LD_INT 26
14323: PUSH
14324: LD_INT 30
14326: PUSH
14327: LD_INT 31
14329: PUSH
14330: LD_INT 32
14332: PUSH
14333: LD_INT 33
14335: PUSH
14336: LD_INT 34
14338: PUSH
14339: LD_INT 35
14341: PUSH
14342: LD_INT 36
14344: PUSH
14345: EMPTY
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: PUSH
14368: LD_INT 101
14370: PUSH
14371: LD_INT 102
14373: PUSH
14374: LD_INT 103
14376: PUSH
14377: LD_INT 106
14379: PUSH
14380: LD_INT 108
14382: PUSH
14383: LD_INT 112
14385: PUSH
14386: LD_INT 113
14388: PUSH
14389: LD_INT 114
14391: PUSH
14392: LD_INT 115
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: PUSH
14406: EMPTY
14407: LIST
14408: LIST
14409: ST_TO_ADDR
14410: GO 14641
14412: LD_INT 19
14414: DOUBLE
14415: EQUAL
14416: IFTRUE 14420
14418: GO 14640
14420: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
14421: LD_ADDR_VAR 0 1
14425: PUSH
14426: LD_INT 1
14428: PUSH
14429: LD_INT 2
14431: PUSH
14432: LD_INT 3
14434: PUSH
14435: LD_INT 4
14437: PUSH
14438: LD_INT 5
14440: PUSH
14441: LD_INT 6
14443: PUSH
14444: LD_INT 7
14446: PUSH
14447: LD_INT 8
14449: PUSH
14450: LD_INT 9
14452: PUSH
14453: LD_INT 10
14455: PUSH
14456: LD_INT 11
14458: PUSH
14459: LD_INT 12
14461: PUSH
14462: LD_INT 13
14464: PUSH
14465: LD_INT 14
14467: PUSH
14468: LD_INT 15
14470: PUSH
14471: LD_INT 16
14473: PUSH
14474: LD_INT 17
14476: PUSH
14477: LD_INT 18
14479: PUSH
14480: LD_INT 19
14482: PUSH
14483: LD_INT 20
14485: PUSH
14486: LD_INT 21
14488: PUSH
14489: LD_INT 22
14491: PUSH
14492: LD_INT 23
14494: PUSH
14495: LD_INT 24
14497: PUSH
14498: LD_INT 25
14500: PUSH
14501: LD_INT 26
14503: PUSH
14504: LD_INT 27
14506: PUSH
14507: LD_INT 28
14509: PUSH
14510: LD_INT 29
14512: PUSH
14513: LD_INT 30
14515: PUSH
14516: LD_INT 31
14518: PUSH
14519: LD_INT 32
14521: PUSH
14522: LD_INT 33
14524: PUSH
14525: LD_INT 34
14527: PUSH
14528: LD_INT 35
14530: PUSH
14531: LD_INT 36
14533: PUSH
14534: EMPTY
14535: LIST
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: PUSH
14572: LD_INT 101
14574: PUSH
14575: LD_INT 102
14577: PUSH
14578: LD_INT 103
14580: PUSH
14581: LD_INT 104
14583: PUSH
14584: LD_INT 105
14586: PUSH
14587: LD_INT 106
14589: PUSH
14590: LD_INT 107
14592: PUSH
14593: LD_INT 108
14595: PUSH
14596: LD_INT 109
14598: PUSH
14599: LD_INT 110
14601: PUSH
14602: LD_INT 111
14604: PUSH
14605: LD_INT 112
14607: PUSH
14608: LD_INT 113
14610: PUSH
14611: LD_INT 114
14613: PUSH
14614: LD_INT 115
14616: PUSH
14617: EMPTY
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: PUSH
14634: EMPTY
14635: LIST
14636: LIST
14637: ST_TO_ADDR
14638: GO 14641
14640: POP
// end else
14641: GO 14860
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
14643: LD_ADDR_VAR 0 1
14647: PUSH
14648: LD_INT 1
14650: PUSH
14651: LD_INT 2
14653: PUSH
14654: LD_INT 3
14656: PUSH
14657: LD_INT 4
14659: PUSH
14660: LD_INT 5
14662: PUSH
14663: LD_INT 6
14665: PUSH
14666: LD_INT 7
14668: PUSH
14669: LD_INT 8
14671: PUSH
14672: LD_INT 9
14674: PUSH
14675: LD_INT 10
14677: PUSH
14678: LD_INT 11
14680: PUSH
14681: LD_INT 12
14683: PUSH
14684: LD_INT 13
14686: PUSH
14687: LD_INT 14
14689: PUSH
14690: LD_INT 15
14692: PUSH
14693: LD_INT 16
14695: PUSH
14696: LD_INT 17
14698: PUSH
14699: LD_INT 18
14701: PUSH
14702: LD_INT 19
14704: PUSH
14705: LD_INT 20
14707: PUSH
14708: LD_INT 21
14710: PUSH
14711: LD_INT 22
14713: PUSH
14714: LD_INT 23
14716: PUSH
14717: LD_INT 24
14719: PUSH
14720: LD_INT 25
14722: PUSH
14723: LD_INT 26
14725: PUSH
14726: LD_INT 27
14728: PUSH
14729: LD_INT 28
14731: PUSH
14732: LD_INT 29
14734: PUSH
14735: LD_INT 30
14737: PUSH
14738: LD_INT 31
14740: PUSH
14741: LD_INT 32
14743: PUSH
14744: LD_INT 33
14746: PUSH
14747: LD_INT 34
14749: PUSH
14750: LD_INT 35
14752: PUSH
14753: LD_INT 36
14755: PUSH
14756: EMPTY
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: LIST
14786: LIST
14787: LIST
14788: LIST
14789: LIST
14790: LIST
14791: LIST
14792: LIST
14793: PUSH
14794: LD_INT 101
14796: PUSH
14797: LD_INT 102
14799: PUSH
14800: LD_INT 103
14802: PUSH
14803: LD_INT 104
14805: PUSH
14806: LD_INT 105
14808: PUSH
14809: LD_INT 106
14811: PUSH
14812: LD_INT 107
14814: PUSH
14815: LD_INT 108
14817: PUSH
14818: LD_INT 109
14820: PUSH
14821: LD_INT 110
14823: PUSH
14824: LD_INT 111
14826: PUSH
14827: LD_INT 112
14829: PUSH
14830: LD_INT 113
14832: PUSH
14833: LD_INT 114
14835: PUSH
14836: LD_INT 115
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: LIST
14843: LIST
14844: LIST
14845: LIST
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: PUSH
14856: EMPTY
14857: LIST
14858: LIST
14859: ST_TO_ADDR
// if result then
14860: LD_VAR 0 1
14864: IFFALSE 15153
// begin normal :=  ;
14866: LD_ADDR_VAR 0 3
14870: PUSH
14871: LD_STRING 
14873: ST_TO_ADDR
// hardcore :=  ;
14874: LD_ADDR_VAR 0 4
14878: PUSH
14879: LD_STRING 
14881: ST_TO_ADDR
// for i = 1 to normalCounter do
14882: LD_ADDR_VAR 0 5
14886: PUSH
14887: DOUBLE
14888: LD_INT 1
14890: DEC
14891: ST_TO_ADDR
14892: LD_EXP 44
14896: PUSH
14897: FOR_TO
14898: IFFALSE 14999
// begin tmp := 0 ;
14900: LD_ADDR_VAR 0 2
14904: PUSH
14905: LD_STRING 0
14907: ST_TO_ADDR
// if result [ 1 ] then
14908: LD_VAR 0 1
14912: PUSH
14913: LD_INT 1
14915: ARRAY
14916: IFFALSE 14981
// if result [ 1 ] [ 1 ] = i then
14918: LD_VAR 0 1
14922: PUSH
14923: LD_INT 1
14925: ARRAY
14926: PUSH
14927: LD_INT 1
14929: ARRAY
14930: PUSH
14931: LD_VAR 0 5
14935: EQUAL
14936: IFFALSE 14981
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14938: LD_ADDR_VAR 0 1
14942: PUSH
14943: LD_VAR 0 1
14947: PPUSH
14948: LD_INT 1
14950: PPUSH
14951: LD_VAR 0 1
14955: PUSH
14956: LD_INT 1
14958: ARRAY
14959: PPUSH
14960: LD_INT 1
14962: PPUSH
14963: CALL_OW 3
14967: PPUSH
14968: CALL_OW 1
14972: ST_TO_ADDR
// tmp := 1 ;
14973: LD_ADDR_VAR 0 2
14977: PUSH
14978: LD_STRING 1
14980: ST_TO_ADDR
// end ; normal := normal & tmp ;
14981: LD_ADDR_VAR 0 3
14985: PUSH
14986: LD_VAR 0 3
14990: PUSH
14991: LD_VAR 0 2
14995: STR
14996: ST_TO_ADDR
// end ;
14997: GO 14897
14999: POP
15000: POP
// for i = 1 to hardcoreCounter do
15001: LD_ADDR_VAR 0 5
15005: PUSH
15006: DOUBLE
15007: LD_INT 1
15009: DEC
15010: ST_TO_ADDR
15011: LD_EXP 45
15015: PUSH
15016: FOR_TO
15017: IFFALSE 15122
// begin tmp := 0 ;
15019: LD_ADDR_VAR 0 2
15023: PUSH
15024: LD_STRING 0
15026: ST_TO_ADDR
// if result [ 2 ] then
15027: LD_VAR 0 1
15031: PUSH
15032: LD_INT 2
15034: ARRAY
15035: IFFALSE 15104
// if result [ 2 ] [ 1 ] = 100 + i then
15037: LD_VAR 0 1
15041: PUSH
15042: LD_INT 2
15044: ARRAY
15045: PUSH
15046: LD_INT 1
15048: ARRAY
15049: PUSH
15050: LD_INT 100
15052: PUSH
15053: LD_VAR 0 5
15057: PLUS
15058: EQUAL
15059: IFFALSE 15104
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15061: LD_ADDR_VAR 0 1
15065: PUSH
15066: LD_VAR 0 1
15070: PPUSH
15071: LD_INT 2
15073: PPUSH
15074: LD_VAR 0 1
15078: PUSH
15079: LD_INT 2
15081: ARRAY
15082: PPUSH
15083: LD_INT 1
15085: PPUSH
15086: CALL_OW 3
15090: PPUSH
15091: CALL_OW 1
15095: ST_TO_ADDR
// tmp := 1 ;
15096: LD_ADDR_VAR 0 2
15100: PUSH
15101: LD_STRING 1
15103: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15104: LD_ADDR_VAR 0 4
15108: PUSH
15109: LD_VAR 0 4
15113: PUSH
15114: LD_VAR 0 2
15118: STR
15119: ST_TO_ADDR
// end ;
15120: GO 15016
15122: POP
15123: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
15124: LD_STRING getStreamItemsFromMission("
15126: PUSH
15127: LD_VAR 0 3
15131: STR
15132: PUSH
15133: LD_STRING ","
15135: STR
15136: PUSH
15137: LD_VAR 0 4
15141: STR
15142: PUSH
15143: LD_STRING ")
15145: STR
15146: PPUSH
15147: CALL_OW 559
// end else
15151: GO 15160
// ToLua ( getStreamItemsFromMission("","") ) ;
15153: LD_STRING getStreamItemsFromMission("","")
15155: PPUSH
15156: CALL_OW 559
// end ;
15160: LD_VAR 0 1
15164: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
15165: LD_VAR 0 2
15169: PUSH
15170: LD_INT 100
15172: EQUAL
15173: IFFALSE 16122
// begin if not StreamModeActive then
15175: LD_EXP 43
15179: NOT
15180: IFFALSE 15190
// StreamModeActive := true ;
15182: LD_ADDR_EXP 43
15186: PUSH
15187: LD_INT 1
15189: ST_TO_ADDR
// if p3 = 0 then
15190: LD_VAR 0 3
15194: PUSH
15195: LD_INT 0
15197: EQUAL
15198: IFFALSE 15204
// InitStreamMode ;
15200: CALL 11243 0 0
// if p3 = 1 then
15204: LD_VAR 0 3
15208: PUSH
15209: LD_INT 1
15211: EQUAL
15212: IFFALSE 15222
// sRocket := true ;
15214: LD_ADDR_EXP 48
15218: PUSH
15219: LD_INT 1
15221: ST_TO_ADDR
// if p3 = 2 then
15222: LD_VAR 0 3
15226: PUSH
15227: LD_INT 2
15229: EQUAL
15230: IFFALSE 15240
// sSpeed := true ;
15232: LD_ADDR_EXP 47
15236: PUSH
15237: LD_INT 1
15239: ST_TO_ADDR
// if p3 = 3 then
15240: LD_VAR 0 3
15244: PUSH
15245: LD_INT 3
15247: EQUAL
15248: IFFALSE 15258
// sEngine := true ;
15250: LD_ADDR_EXP 49
15254: PUSH
15255: LD_INT 1
15257: ST_TO_ADDR
// if p3 = 4 then
15258: LD_VAR 0 3
15262: PUSH
15263: LD_INT 4
15265: EQUAL
15266: IFFALSE 15276
// sSpec := true ;
15268: LD_ADDR_EXP 46
15272: PUSH
15273: LD_INT 1
15275: ST_TO_ADDR
// if p3 = 5 then
15276: LD_VAR 0 3
15280: PUSH
15281: LD_INT 5
15283: EQUAL
15284: IFFALSE 15294
// sLevel := true ;
15286: LD_ADDR_EXP 50
15290: PUSH
15291: LD_INT 1
15293: ST_TO_ADDR
// if p3 = 6 then
15294: LD_VAR 0 3
15298: PUSH
15299: LD_INT 6
15301: EQUAL
15302: IFFALSE 15312
// sArmoury := true ;
15304: LD_ADDR_EXP 51
15308: PUSH
15309: LD_INT 1
15311: ST_TO_ADDR
// if p3 = 7 then
15312: LD_VAR 0 3
15316: PUSH
15317: LD_INT 7
15319: EQUAL
15320: IFFALSE 15330
// sRadar := true ;
15322: LD_ADDR_EXP 52
15326: PUSH
15327: LD_INT 1
15329: ST_TO_ADDR
// if p3 = 8 then
15330: LD_VAR 0 3
15334: PUSH
15335: LD_INT 8
15337: EQUAL
15338: IFFALSE 15348
// sBunker := true ;
15340: LD_ADDR_EXP 53
15344: PUSH
15345: LD_INT 1
15347: ST_TO_ADDR
// if p3 = 9 then
15348: LD_VAR 0 3
15352: PUSH
15353: LD_INT 9
15355: EQUAL
15356: IFFALSE 15366
// sHack := true ;
15358: LD_ADDR_EXP 54
15362: PUSH
15363: LD_INT 1
15365: ST_TO_ADDR
// if p3 = 10 then
15366: LD_VAR 0 3
15370: PUSH
15371: LD_INT 10
15373: EQUAL
15374: IFFALSE 15384
// sFire := true ;
15376: LD_ADDR_EXP 55
15380: PUSH
15381: LD_INT 1
15383: ST_TO_ADDR
// if p3 = 11 then
15384: LD_VAR 0 3
15388: PUSH
15389: LD_INT 11
15391: EQUAL
15392: IFFALSE 15402
// sRefresh := true ;
15394: LD_ADDR_EXP 56
15398: PUSH
15399: LD_INT 1
15401: ST_TO_ADDR
// if p3 = 12 then
15402: LD_VAR 0 3
15406: PUSH
15407: LD_INT 12
15409: EQUAL
15410: IFFALSE 15420
// sExp := true ;
15412: LD_ADDR_EXP 57
15416: PUSH
15417: LD_INT 1
15419: ST_TO_ADDR
// if p3 = 13 then
15420: LD_VAR 0 3
15424: PUSH
15425: LD_INT 13
15427: EQUAL
15428: IFFALSE 15438
// sDepot := true ;
15430: LD_ADDR_EXP 58
15434: PUSH
15435: LD_INT 1
15437: ST_TO_ADDR
// if p3 = 14 then
15438: LD_VAR 0 3
15442: PUSH
15443: LD_INT 14
15445: EQUAL
15446: IFFALSE 15456
// sFlag := true ;
15448: LD_ADDR_EXP 59
15452: PUSH
15453: LD_INT 1
15455: ST_TO_ADDR
// if p3 = 15 then
15456: LD_VAR 0 3
15460: PUSH
15461: LD_INT 15
15463: EQUAL
15464: IFFALSE 15474
// sKamikadze := true ;
15466: LD_ADDR_EXP 67
15470: PUSH
15471: LD_INT 1
15473: ST_TO_ADDR
// if p3 = 16 then
15474: LD_VAR 0 3
15478: PUSH
15479: LD_INT 16
15481: EQUAL
15482: IFFALSE 15492
// sTroll := true ;
15484: LD_ADDR_EXP 68
15488: PUSH
15489: LD_INT 1
15491: ST_TO_ADDR
// if p3 = 17 then
15492: LD_VAR 0 3
15496: PUSH
15497: LD_INT 17
15499: EQUAL
15500: IFFALSE 15510
// sSlow := true ;
15502: LD_ADDR_EXP 69
15506: PUSH
15507: LD_INT 1
15509: ST_TO_ADDR
// if p3 = 18 then
15510: LD_VAR 0 3
15514: PUSH
15515: LD_INT 18
15517: EQUAL
15518: IFFALSE 15528
// sLack := true ;
15520: LD_ADDR_EXP 70
15524: PUSH
15525: LD_INT 1
15527: ST_TO_ADDR
// if p3 = 19 then
15528: LD_VAR 0 3
15532: PUSH
15533: LD_INT 19
15535: EQUAL
15536: IFFALSE 15546
// sTank := true ;
15538: LD_ADDR_EXP 72
15542: PUSH
15543: LD_INT 1
15545: ST_TO_ADDR
// if p3 = 20 then
15546: LD_VAR 0 3
15550: PUSH
15551: LD_INT 20
15553: EQUAL
15554: IFFALSE 15564
// sRemote := true ;
15556: LD_ADDR_EXP 73
15560: PUSH
15561: LD_INT 1
15563: ST_TO_ADDR
// if p3 = 21 then
15564: LD_VAR 0 3
15568: PUSH
15569: LD_INT 21
15571: EQUAL
15572: IFFALSE 15582
// sPowell := true ;
15574: LD_ADDR_EXP 74
15578: PUSH
15579: LD_INT 1
15581: ST_TO_ADDR
// if p3 = 22 then
15582: LD_VAR 0 3
15586: PUSH
15587: LD_INT 22
15589: EQUAL
15590: IFFALSE 15600
// sTeleport := true ;
15592: LD_ADDR_EXP 77
15596: PUSH
15597: LD_INT 1
15599: ST_TO_ADDR
// if p3 = 23 then
15600: LD_VAR 0 3
15604: PUSH
15605: LD_INT 23
15607: EQUAL
15608: IFFALSE 15618
// sOilTower := true ;
15610: LD_ADDR_EXP 79
15614: PUSH
15615: LD_INT 1
15617: ST_TO_ADDR
// if p3 = 24 then
15618: LD_VAR 0 3
15622: PUSH
15623: LD_INT 24
15625: EQUAL
15626: IFFALSE 15636
// sShovel := true ;
15628: LD_ADDR_EXP 80
15632: PUSH
15633: LD_INT 1
15635: ST_TO_ADDR
// if p3 = 25 then
15636: LD_VAR 0 3
15640: PUSH
15641: LD_INT 25
15643: EQUAL
15644: IFFALSE 15654
// sSheik := true ;
15646: LD_ADDR_EXP 81
15650: PUSH
15651: LD_INT 1
15653: ST_TO_ADDR
// if p3 = 26 then
15654: LD_VAR 0 3
15658: PUSH
15659: LD_INT 26
15661: EQUAL
15662: IFFALSE 15672
// sEarthquake := true ;
15664: LD_ADDR_EXP 83
15668: PUSH
15669: LD_INT 1
15671: ST_TO_ADDR
// if p3 = 27 then
15672: LD_VAR 0 3
15676: PUSH
15677: LD_INT 27
15679: EQUAL
15680: IFFALSE 15690
// sAI := true ;
15682: LD_ADDR_EXP 84
15686: PUSH
15687: LD_INT 1
15689: ST_TO_ADDR
// if p3 = 28 then
15690: LD_VAR 0 3
15694: PUSH
15695: LD_INT 28
15697: EQUAL
15698: IFFALSE 15708
// sCargo := true ;
15700: LD_ADDR_EXP 87
15704: PUSH
15705: LD_INT 1
15707: ST_TO_ADDR
// if p3 = 29 then
15708: LD_VAR 0 3
15712: PUSH
15713: LD_INT 29
15715: EQUAL
15716: IFFALSE 15726
// sDLaser := true ;
15718: LD_ADDR_EXP 88
15722: PUSH
15723: LD_INT 1
15725: ST_TO_ADDR
// if p3 = 30 then
15726: LD_VAR 0 3
15730: PUSH
15731: LD_INT 30
15733: EQUAL
15734: IFFALSE 15744
// sExchange := true ;
15736: LD_ADDR_EXP 89
15740: PUSH
15741: LD_INT 1
15743: ST_TO_ADDR
// if p3 = 31 then
15744: LD_VAR 0 3
15748: PUSH
15749: LD_INT 31
15751: EQUAL
15752: IFFALSE 15762
// sFac := true ;
15754: LD_ADDR_EXP 90
15758: PUSH
15759: LD_INT 1
15761: ST_TO_ADDR
// if p3 = 32 then
15762: LD_VAR 0 3
15766: PUSH
15767: LD_INT 32
15769: EQUAL
15770: IFFALSE 15780
// sPower := true ;
15772: LD_ADDR_EXP 91
15776: PUSH
15777: LD_INT 1
15779: ST_TO_ADDR
// if p3 = 33 then
15780: LD_VAR 0 3
15784: PUSH
15785: LD_INT 33
15787: EQUAL
15788: IFFALSE 15798
// sRandom := true ;
15790: LD_ADDR_EXP 92
15794: PUSH
15795: LD_INT 1
15797: ST_TO_ADDR
// if p3 = 34 then
15798: LD_VAR 0 3
15802: PUSH
15803: LD_INT 34
15805: EQUAL
15806: IFFALSE 15816
// sShield := true ;
15808: LD_ADDR_EXP 93
15812: PUSH
15813: LD_INT 1
15815: ST_TO_ADDR
// if p3 = 35 then
15816: LD_VAR 0 3
15820: PUSH
15821: LD_INT 35
15823: EQUAL
15824: IFFALSE 15834
// sTime := true ;
15826: LD_ADDR_EXP 94
15830: PUSH
15831: LD_INT 1
15833: ST_TO_ADDR
// if p3 = 36 then
15834: LD_VAR 0 3
15838: PUSH
15839: LD_INT 36
15841: EQUAL
15842: IFFALSE 15852
// sTools := true ;
15844: LD_ADDR_EXP 95
15848: PUSH
15849: LD_INT 1
15851: ST_TO_ADDR
// if p3 = 101 then
15852: LD_VAR 0 3
15856: PUSH
15857: LD_INT 101
15859: EQUAL
15860: IFFALSE 15870
// sSold := true ;
15862: LD_ADDR_EXP 60
15866: PUSH
15867: LD_INT 1
15869: ST_TO_ADDR
// if p3 = 102 then
15870: LD_VAR 0 3
15874: PUSH
15875: LD_INT 102
15877: EQUAL
15878: IFFALSE 15888
// sDiff := true ;
15880: LD_ADDR_EXP 61
15884: PUSH
15885: LD_INT 1
15887: ST_TO_ADDR
// if p3 = 103 then
15888: LD_VAR 0 3
15892: PUSH
15893: LD_INT 103
15895: EQUAL
15896: IFFALSE 15906
// sFog := true ;
15898: LD_ADDR_EXP 64
15902: PUSH
15903: LD_INT 1
15905: ST_TO_ADDR
// if p3 = 104 then
15906: LD_VAR 0 3
15910: PUSH
15911: LD_INT 104
15913: EQUAL
15914: IFFALSE 15924
// sReset := true ;
15916: LD_ADDR_EXP 65
15920: PUSH
15921: LD_INT 1
15923: ST_TO_ADDR
// if p3 = 105 then
15924: LD_VAR 0 3
15928: PUSH
15929: LD_INT 105
15931: EQUAL
15932: IFFALSE 15942
// sSun := true ;
15934: LD_ADDR_EXP 66
15938: PUSH
15939: LD_INT 1
15941: ST_TO_ADDR
// if p3 = 106 then
15942: LD_VAR 0 3
15946: PUSH
15947: LD_INT 106
15949: EQUAL
15950: IFFALSE 15960
// sTiger := true ;
15952: LD_ADDR_EXP 62
15956: PUSH
15957: LD_INT 1
15959: ST_TO_ADDR
// if p3 = 107 then
15960: LD_VAR 0 3
15964: PUSH
15965: LD_INT 107
15967: EQUAL
15968: IFFALSE 15978
// sBomb := true ;
15970: LD_ADDR_EXP 63
15974: PUSH
15975: LD_INT 1
15977: ST_TO_ADDR
// if p3 = 108 then
15978: LD_VAR 0 3
15982: PUSH
15983: LD_INT 108
15985: EQUAL
15986: IFFALSE 15996
// sWound := true ;
15988: LD_ADDR_EXP 71
15992: PUSH
15993: LD_INT 1
15995: ST_TO_ADDR
// if p3 = 109 then
15996: LD_VAR 0 3
16000: PUSH
16001: LD_INT 109
16003: EQUAL
16004: IFFALSE 16014
// sBetray := true ;
16006: LD_ADDR_EXP 75
16010: PUSH
16011: LD_INT 1
16013: ST_TO_ADDR
// if p3 = 110 then
16014: LD_VAR 0 3
16018: PUSH
16019: LD_INT 110
16021: EQUAL
16022: IFFALSE 16032
// sContamin := true ;
16024: LD_ADDR_EXP 76
16028: PUSH
16029: LD_INT 1
16031: ST_TO_ADDR
// if p3 = 111 then
16032: LD_VAR 0 3
16036: PUSH
16037: LD_INT 111
16039: EQUAL
16040: IFFALSE 16050
// sOil := true ;
16042: LD_ADDR_EXP 78
16046: PUSH
16047: LD_INT 1
16049: ST_TO_ADDR
// if p3 = 112 then
16050: LD_VAR 0 3
16054: PUSH
16055: LD_INT 112
16057: EQUAL
16058: IFFALSE 16068
// sStu := true ;
16060: LD_ADDR_EXP 82
16064: PUSH
16065: LD_INT 1
16067: ST_TO_ADDR
// if p3 = 113 then
16068: LD_VAR 0 3
16072: PUSH
16073: LD_INT 113
16075: EQUAL
16076: IFFALSE 16086
// sBazooka := true ;
16078: LD_ADDR_EXP 85
16082: PUSH
16083: LD_INT 1
16085: ST_TO_ADDR
// if p3 = 114 then
16086: LD_VAR 0 3
16090: PUSH
16091: LD_INT 114
16093: EQUAL
16094: IFFALSE 16104
// sMortar := true ;
16096: LD_ADDR_EXP 86
16100: PUSH
16101: LD_INT 1
16103: ST_TO_ADDR
// if p3 = 115 then
16104: LD_VAR 0 3
16108: PUSH
16109: LD_INT 115
16111: EQUAL
16112: IFFALSE 16122
// sRanger := true ;
16114: LD_ADDR_EXP 96
16118: PUSH
16119: LD_INT 1
16121: ST_TO_ADDR
// end ; end ;
16122: PPOPN 6
16124: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16125: LD_EXP 43
16129: PUSH
16130: LD_EXP 48
16134: AND
16135: IFFALSE 16259
16137: GO 16139
16139: DISABLE
16140: LD_INT 0
16142: PPUSH
16143: PPUSH
// begin enable ;
16144: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16145: LD_ADDR_VAR 0 2
16149: PUSH
16150: LD_INT 22
16152: PUSH
16153: LD_OWVAR 2
16157: PUSH
16158: EMPTY
16159: LIST
16160: LIST
16161: PUSH
16162: LD_INT 2
16164: PUSH
16165: LD_INT 34
16167: PUSH
16168: LD_INT 7
16170: PUSH
16171: EMPTY
16172: LIST
16173: LIST
16174: PUSH
16175: LD_INT 34
16177: PUSH
16178: LD_INT 45
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: PUSH
16185: LD_INT 34
16187: PUSH
16188: LD_INT 28
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: PUSH
16195: LD_INT 34
16197: PUSH
16198: LD_INT 47
16200: PUSH
16201: EMPTY
16202: LIST
16203: LIST
16204: PUSH
16205: EMPTY
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: PUSH
16212: EMPTY
16213: LIST
16214: LIST
16215: PPUSH
16216: CALL_OW 69
16220: ST_TO_ADDR
// if not tmp then
16221: LD_VAR 0 2
16225: NOT
16226: IFFALSE 16230
// exit ;
16228: GO 16259
// for i in tmp do
16230: LD_ADDR_VAR 0 1
16234: PUSH
16235: LD_VAR 0 2
16239: PUSH
16240: FOR_IN
16241: IFFALSE 16257
// begin SetLives ( i , 0 ) ;
16243: LD_VAR 0 1
16247: PPUSH
16248: LD_INT 0
16250: PPUSH
16251: CALL_OW 234
// end ;
16255: GO 16240
16257: POP
16258: POP
// end ;
16259: PPOPN 2
16261: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16262: LD_EXP 43
16266: PUSH
16267: LD_EXP 49
16271: AND
16272: IFFALSE 16356
16274: GO 16276
16276: DISABLE
16277: LD_INT 0
16279: PPUSH
16280: PPUSH
// begin enable ;
16281: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16282: LD_ADDR_VAR 0 2
16286: PUSH
16287: LD_INT 22
16289: PUSH
16290: LD_OWVAR 2
16294: PUSH
16295: EMPTY
16296: LIST
16297: LIST
16298: PUSH
16299: LD_INT 32
16301: PUSH
16302: LD_INT 3
16304: PUSH
16305: EMPTY
16306: LIST
16307: LIST
16308: PUSH
16309: EMPTY
16310: LIST
16311: LIST
16312: PPUSH
16313: CALL_OW 69
16317: ST_TO_ADDR
// if not tmp then
16318: LD_VAR 0 2
16322: NOT
16323: IFFALSE 16327
// exit ;
16325: GO 16356
// for i in tmp do
16327: LD_ADDR_VAR 0 1
16331: PUSH
16332: LD_VAR 0 2
16336: PUSH
16337: FOR_IN
16338: IFFALSE 16354
// begin SetLives ( i , 0 ) ;
16340: LD_VAR 0 1
16344: PPUSH
16345: LD_INT 0
16347: PPUSH
16348: CALL_OW 234
// end ;
16352: GO 16337
16354: POP
16355: POP
// end ;
16356: PPOPN 2
16358: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16359: LD_EXP 43
16363: PUSH
16364: LD_EXP 46
16368: AND
16369: IFFALSE 16462
16371: GO 16373
16373: DISABLE
16374: LD_INT 0
16376: PPUSH
// begin enable ;
16377: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16378: LD_ADDR_VAR 0 1
16382: PUSH
16383: LD_INT 22
16385: PUSH
16386: LD_OWVAR 2
16390: PUSH
16391: EMPTY
16392: LIST
16393: LIST
16394: PUSH
16395: LD_INT 2
16397: PUSH
16398: LD_INT 25
16400: PUSH
16401: LD_INT 5
16403: PUSH
16404: EMPTY
16405: LIST
16406: LIST
16407: PUSH
16408: LD_INT 25
16410: PUSH
16411: LD_INT 9
16413: PUSH
16414: EMPTY
16415: LIST
16416: LIST
16417: PUSH
16418: LD_INT 25
16420: PUSH
16421: LD_INT 8
16423: PUSH
16424: EMPTY
16425: LIST
16426: LIST
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: PPUSH
16438: CALL_OW 69
16442: PUSH
16443: FOR_IN
16444: IFFALSE 16460
// begin SetClass ( i , 1 ) ;
16446: LD_VAR 0 1
16450: PPUSH
16451: LD_INT 1
16453: PPUSH
16454: CALL_OW 336
// end ;
16458: GO 16443
16460: POP
16461: POP
// end ;
16462: PPOPN 1
16464: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16465: LD_EXP 43
16469: PUSH
16470: LD_EXP 47
16474: AND
16475: PUSH
16476: LD_OWVAR 65
16480: PUSH
16481: LD_INT 7
16483: LESS
16484: AND
16485: IFFALSE 16499
16487: GO 16489
16489: DISABLE
// begin enable ;
16490: ENABLE
// game_speed := 7 ;
16491: LD_ADDR_OWVAR 65
16495: PUSH
16496: LD_INT 7
16498: ST_TO_ADDR
// end ;
16499: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16500: LD_EXP 43
16504: PUSH
16505: LD_EXP 50
16509: AND
16510: IFFALSE 16712
16512: GO 16514
16514: DISABLE
16515: LD_INT 0
16517: PPUSH
16518: PPUSH
16519: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16520: LD_ADDR_VAR 0 3
16524: PUSH
16525: LD_INT 81
16527: PUSH
16528: LD_OWVAR 2
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: PUSH
16537: LD_INT 21
16539: PUSH
16540: LD_INT 1
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: PUSH
16547: EMPTY
16548: LIST
16549: LIST
16550: PPUSH
16551: CALL_OW 69
16555: ST_TO_ADDR
// if not tmp then
16556: LD_VAR 0 3
16560: NOT
16561: IFFALSE 16565
// exit ;
16563: GO 16712
// if tmp > 5 then
16565: LD_VAR 0 3
16569: PUSH
16570: LD_INT 5
16572: GREATER
16573: IFFALSE 16585
// k := 5 else
16575: LD_ADDR_VAR 0 2
16579: PUSH
16580: LD_INT 5
16582: ST_TO_ADDR
16583: GO 16595
// k := tmp ;
16585: LD_ADDR_VAR 0 2
16589: PUSH
16590: LD_VAR 0 3
16594: ST_TO_ADDR
// for i := 1 to k do
16595: LD_ADDR_VAR 0 1
16599: PUSH
16600: DOUBLE
16601: LD_INT 1
16603: DEC
16604: ST_TO_ADDR
16605: LD_VAR 0 2
16609: PUSH
16610: FOR_TO
16611: IFFALSE 16710
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16613: LD_VAR 0 3
16617: PUSH
16618: LD_VAR 0 1
16622: ARRAY
16623: PPUSH
16624: LD_VAR 0 1
16628: PUSH
16629: LD_INT 4
16631: MOD
16632: PUSH
16633: LD_INT 1
16635: PLUS
16636: PPUSH
16637: CALL_OW 259
16641: PUSH
16642: LD_INT 10
16644: LESS
16645: IFFALSE 16708
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16647: LD_VAR 0 3
16651: PUSH
16652: LD_VAR 0 1
16656: ARRAY
16657: PPUSH
16658: LD_VAR 0 1
16662: PUSH
16663: LD_INT 4
16665: MOD
16666: PUSH
16667: LD_INT 1
16669: PLUS
16670: PPUSH
16671: LD_VAR 0 3
16675: PUSH
16676: LD_VAR 0 1
16680: ARRAY
16681: PPUSH
16682: LD_VAR 0 1
16686: PUSH
16687: LD_INT 4
16689: MOD
16690: PUSH
16691: LD_INT 1
16693: PLUS
16694: PPUSH
16695: CALL_OW 259
16699: PUSH
16700: LD_INT 1
16702: PLUS
16703: PPUSH
16704: CALL_OW 237
16708: GO 16610
16710: POP
16711: POP
// end ;
16712: PPOPN 3
16714: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16715: LD_EXP 43
16719: PUSH
16720: LD_EXP 51
16724: AND
16725: IFFALSE 16745
16727: GO 16729
16729: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16730: LD_INT 4
16732: PPUSH
16733: LD_OWVAR 2
16737: PPUSH
16738: LD_INT 0
16740: PPUSH
16741: CALL_OW 324
16745: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16746: LD_EXP 43
16750: PUSH
16751: LD_EXP 80
16755: AND
16756: IFFALSE 16776
16758: GO 16760
16760: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16761: LD_INT 19
16763: PPUSH
16764: LD_OWVAR 2
16768: PPUSH
16769: LD_INT 0
16771: PPUSH
16772: CALL_OW 324
16776: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16777: LD_EXP 43
16781: PUSH
16782: LD_EXP 52
16786: AND
16787: IFFALSE 16889
16789: GO 16791
16791: DISABLE
16792: LD_INT 0
16794: PPUSH
16795: PPUSH
// begin enable ;
16796: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16797: LD_ADDR_VAR 0 2
16801: PUSH
16802: LD_INT 22
16804: PUSH
16805: LD_OWVAR 2
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: PUSH
16814: LD_INT 2
16816: PUSH
16817: LD_INT 34
16819: PUSH
16820: LD_INT 11
16822: PUSH
16823: EMPTY
16824: LIST
16825: LIST
16826: PUSH
16827: LD_INT 34
16829: PUSH
16830: LD_INT 30
16832: PUSH
16833: EMPTY
16834: LIST
16835: LIST
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: LIST
16841: PUSH
16842: EMPTY
16843: LIST
16844: LIST
16845: PPUSH
16846: CALL_OW 69
16850: ST_TO_ADDR
// if not tmp then
16851: LD_VAR 0 2
16855: NOT
16856: IFFALSE 16860
// exit ;
16858: GO 16889
// for i in tmp do
16860: LD_ADDR_VAR 0 1
16864: PUSH
16865: LD_VAR 0 2
16869: PUSH
16870: FOR_IN
16871: IFFALSE 16887
// begin SetLives ( i , 0 ) ;
16873: LD_VAR 0 1
16877: PPUSH
16878: LD_INT 0
16880: PPUSH
16881: CALL_OW 234
// end ;
16885: GO 16870
16887: POP
16888: POP
// end ;
16889: PPOPN 2
16891: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16892: LD_EXP 43
16896: PUSH
16897: LD_EXP 53
16901: AND
16902: IFFALSE 16922
16904: GO 16906
16906: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16907: LD_INT 32
16909: PPUSH
16910: LD_OWVAR 2
16914: PPUSH
16915: LD_INT 0
16917: PPUSH
16918: CALL_OW 324
16922: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16923: LD_EXP 43
16927: PUSH
16928: LD_EXP 54
16932: AND
16933: IFFALSE 17114
16935: GO 16937
16937: DISABLE
16938: LD_INT 0
16940: PPUSH
16941: PPUSH
16942: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16943: LD_ADDR_VAR 0 2
16947: PUSH
16948: LD_INT 22
16950: PUSH
16951: LD_OWVAR 2
16955: PUSH
16956: EMPTY
16957: LIST
16958: LIST
16959: PUSH
16960: LD_INT 33
16962: PUSH
16963: LD_INT 3
16965: PUSH
16966: EMPTY
16967: LIST
16968: LIST
16969: PUSH
16970: EMPTY
16971: LIST
16972: LIST
16973: PPUSH
16974: CALL_OW 69
16978: ST_TO_ADDR
// if not tmp then
16979: LD_VAR 0 2
16983: NOT
16984: IFFALSE 16988
// exit ;
16986: GO 17114
// side := 0 ;
16988: LD_ADDR_VAR 0 3
16992: PUSH
16993: LD_INT 0
16995: ST_TO_ADDR
// for i := 1 to 8 do
16996: LD_ADDR_VAR 0 1
17000: PUSH
17001: DOUBLE
17002: LD_INT 1
17004: DEC
17005: ST_TO_ADDR
17006: LD_INT 8
17008: PUSH
17009: FOR_TO
17010: IFFALSE 17058
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17012: LD_OWVAR 2
17016: PUSH
17017: LD_VAR 0 1
17021: NONEQUAL
17022: PUSH
17023: LD_OWVAR 2
17027: PPUSH
17028: LD_VAR 0 1
17032: PPUSH
17033: CALL_OW 81
17037: PUSH
17038: LD_INT 2
17040: EQUAL
17041: AND
17042: IFFALSE 17056
// begin side := i ;
17044: LD_ADDR_VAR 0 3
17048: PUSH
17049: LD_VAR 0 1
17053: ST_TO_ADDR
// break ;
17054: GO 17058
// end ;
17056: GO 17009
17058: POP
17059: POP
// if not side then
17060: LD_VAR 0 3
17064: NOT
17065: IFFALSE 17069
// exit ;
17067: GO 17114
// for i := 1 to tmp do
17069: LD_ADDR_VAR 0 1
17073: PUSH
17074: DOUBLE
17075: LD_INT 1
17077: DEC
17078: ST_TO_ADDR
17079: LD_VAR 0 2
17083: PUSH
17084: FOR_TO
17085: IFFALSE 17112
// if Prob ( 60 ) then
17087: LD_INT 60
17089: PPUSH
17090: CALL_OW 13
17094: IFFALSE 17110
// SetSide ( i , side ) ;
17096: LD_VAR 0 1
17100: PPUSH
17101: LD_VAR 0 3
17105: PPUSH
17106: CALL_OW 235
17110: GO 17084
17112: POP
17113: POP
// end ;
17114: PPOPN 3
17116: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17117: LD_EXP 43
17121: PUSH
17122: LD_EXP 56
17126: AND
17127: IFFALSE 17246
17129: GO 17131
17131: DISABLE
17132: LD_INT 0
17134: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17135: LD_ADDR_VAR 0 1
17139: PUSH
17140: LD_INT 22
17142: PUSH
17143: LD_OWVAR 2
17147: PUSH
17148: EMPTY
17149: LIST
17150: LIST
17151: PUSH
17152: LD_INT 21
17154: PUSH
17155: LD_INT 1
17157: PUSH
17158: EMPTY
17159: LIST
17160: LIST
17161: PUSH
17162: LD_INT 3
17164: PUSH
17165: LD_INT 23
17167: PUSH
17168: LD_INT 0
17170: PUSH
17171: EMPTY
17172: LIST
17173: LIST
17174: PUSH
17175: EMPTY
17176: LIST
17177: LIST
17178: PUSH
17179: EMPTY
17180: LIST
17181: LIST
17182: LIST
17183: PPUSH
17184: CALL_OW 69
17188: PUSH
17189: FOR_IN
17190: IFFALSE 17244
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17192: LD_VAR 0 1
17196: PPUSH
17197: CALL_OW 257
17201: PUSH
17202: LD_INT 1
17204: PUSH
17205: LD_INT 2
17207: PUSH
17208: LD_INT 3
17210: PUSH
17211: LD_INT 4
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: IN
17220: IFFALSE 17242
// SetClass ( un , rand ( 1 , 4 ) ) ;
17222: LD_VAR 0 1
17226: PPUSH
17227: LD_INT 1
17229: PPUSH
17230: LD_INT 4
17232: PPUSH
17233: CALL_OW 12
17237: PPUSH
17238: CALL_OW 336
17242: GO 17189
17244: POP
17245: POP
// end ;
17246: PPOPN 1
17248: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17249: LD_EXP 43
17253: PUSH
17254: LD_EXP 55
17258: AND
17259: IFFALSE 17338
17261: GO 17263
17263: DISABLE
17264: LD_INT 0
17266: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17267: LD_ADDR_VAR 0 1
17271: PUSH
17272: LD_INT 22
17274: PUSH
17275: LD_OWVAR 2
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: PUSH
17284: LD_INT 21
17286: PUSH
17287: LD_INT 3
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PPUSH
17298: CALL_OW 69
17302: ST_TO_ADDR
// if not tmp then
17303: LD_VAR 0 1
17307: NOT
17308: IFFALSE 17312
// exit ;
17310: GO 17338
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17312: LD_VAR 0 1
17316: PUSH
17317: LD_INT 1
17319: PPUSH
17320: LD_VAR 0 1
17324: PPUSH
17325: CALL_OW 12
17329: ARRAY
17330: PPUSH
17331: LD_INT 100
17333: PPUSH
17334: CALL_OW 234
// end ;
17338: PPOPN 1
17340: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17341: LD_EXP 43
17345: PUSH
17346: LD_EXP 57
17350: AND
17351: IFFALSE 17449
17353: GO 17355
17355: DISABLE
17356: LD_INT 0
17358: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17359: LD_ADDR_VAR 0 1
17363: PUSH
17364: LD_INT 22
17366: PUSH
17367: LD_OWVAR 2
17371: PUSH
17372: EMPTY
17373: LIST
17374: LIST
17375: PUSH
17376: LD_INT 21
17378: PUSH
17379: LD_INT 1
17381: PUSH
17382: EMPTY
17383: LIST
17384: LIST
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: PPUSH
17390: CALL_OW 69
17394: ST_TO_ADDR
// if not tmp then
17395: LD_VAR 0 1
17399: NOT
17400: IFFALSE 17404
// exit ;
17402: GO 17449
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17404: LD_VAR 0 1
17408: PUSH
17409: LD_INT 1
17411: PPUSH
17412: LD_VAR 0 1
17416: PPUSH
17417: CALL_OW 12
17421: ARRAY
17422: PPUSH
17423: LD_INT 1
17425: PPUSH
17426: LD_INT 4
17428: PPUSH
17429: CALL_OW 12
17433: PPUSH
17434: LD_INT 3000
17436: PPUSH
17437: LD_INT 9000
17439: PPUSH
17440: CALL_OW 12
17444: PPUSH
17445: CALL_OW 492
// end ;
17449: PPOPN 1
17451: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17452: LD_EXP 43
17456: PUSH
17457: LD_EXP 58
17461: AND
17462: IFFALSE 17482
17464: GO 17466
17466: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17467: LD_INT 1
17469: PPUSH
17470: LD_OWVAR 2
17474: PPUSH
17475: LD_INT 0
17477: PPUSH
17478: CALL_OW 324
17482: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17483: LD_EXP 43
17487: PUSH
17488: LD_EXP 59
17492: AND
17493: IFFALSE 17576
17495: GO 17497
17497: DISABLE
17498: LD_INT 0
17500: PPUSH
17501: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17502: LD_ADDR_VAR 0 2
17506: PUSH
17507: LD_INT 22
17509: PUSH
17510: LD_OWVAR 2
17514: PUSH
17515: EMPTY
17516: LIST
17517: LIST
17518: PUSH
17519: LD_INT 21
17521: PUSH
17522: LD_INT 3
17524: PUSH
17525: EMPTY
17526: LIST
17527: LIST
17528: PUSH
17529: EMPTY
17530: LIST
17531: LIST
17532: PPUSH
17533: CALL_OW 69
17537: ST_TO_ADDR
// if not tmp then
17538: LD_VAR 0 2
17542: NOT
17543: IFFALSE 17547
// exit ;
17545: GO 17576
// for i in tmp do
17547: LD_ADDR_VAR 0 1
17551: PUSH
17552: LD_VAR 0 2
17556: PUSH
17557: FOR_IN
17558: IFFALSE 17574
// SetBLevel ( i , 10 ) ;
17560: LD_VAR 0 1
17564: PPUSH
17565: LD_INT 10
17567: PPUSH
17568: CALL_OW 241
17572: GO 17557
17574: POP
17575: POP
// end ;
17576: PPOPN 2
17578: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17579: LD_EXP 43
17583: PUSH
17584: LD_EXP 60
17588: AND
17589: IFFALSE 17700
17591: GO 17593
17593: DISABLE
17594: LD_INT 0
17596: PPUSH
17597: PPUSH
17598: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17599: LD_ADDR_VAR 0 3
17603: PUSH
17604: LD_INT 22
17606: PUSH
17607: LD_OWVAR 2
17611: PUSH
17612: EMPTY
17613: LIST
17614: LIST
17615: PUSH
17616: LD_INT 25
17618: PUSH
17619: LD_INT 1
17621: PUSH
17622: EMPTY
17623: LIST
17624: LIST
17625: PUSH
17626: EMPTY
17627: LIST
17628: LIST
17629: PPUSH
17630: CALL_OW 69
17634: ST_TO_ADDR
// if not tmp then
17635: LD_VAR 0 3
17639: NOT
17640: IFFALSE 17644
// exit ;
17642: GO 17700
// un := tmp [ rand ( 1 , tmp ) ] ;
17644: LD_ADDR_VAR 0 2
17648: PUSH
17649: LD_VAR 0 3
17653: PUSH
17654: LD_INT 1
17656: PPUSH
17657: LD_VAR 0 3
17661: PPUSH
17662: CALL_OW 12
17666: ARRAY
17667: ST_TO_ADDR
// if Crawls ( un ) then
17668: LD_VAR 0 2
17672: PPUSH
17673: CALL_OW 318
17677: IFFALSE 17688
// ComWalk ( un ) ;
17679: LD_VAR 0 2
17683: PPUSH
17684: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17688: LD_VAR 0 2
17692: PPUSH
17693: LD_INT 5
17695: PPUSH
17696: CALL_OW 336
// end ;
17700: PPOPN 3
17702: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
17703: LD_EXP 43
17707: PUSH
17708: LD_EXP 61
17712: AND
17713: PUSH
17714: LD_OWVAR 67
17718: PUSH
17719: LD_INT 3
17721: LESS
17722: AND
17723: IFFALSE 17742
17725: GO 17727
17727: DISABLE
// Difficulty := Difficulty + 1 ;
17728: LD_ADDR_OWVAR 67
17732: PUSH
17733: LD_OWVAR 67
17737: PUSH
17738: LD_INT 1
17740: PLUS
17741: ST_TO_ADDR
17742: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17743: LD_EXP 43
17747: PUSH
17748: LD_EXP 62
17752: AND
17753: IFFALSE 17856
17755: GO 17757
17757: DISABLE
17758: LD_INT 0
17760: PPUSH
// begin for i := 1 to 5 do
17761: LD_ADDR_VAR 0 1
17765: PUSH
17766: DOUBLE
17767: LD_INT 1
17769: DEC
17770: ST_TO_ADDR
17771: LD_INT 5
17773: PUSH
17774: FOR_TO
17775: IFFALSE 17854
// begin uc_nation := nation_nature ;
17777: LD_ADDR_OWVAR 21
17781: PUSH
17782: LD_INT 0
17784: ST_TO_ADDR
// uc_side := 0 ;
17785: LD_ADDR_OWVAR 20
17789: PUSH
17790: LD_INT 0
17792: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17793: LD_ADDR_OWVAR 29
17797: PUSH
17798: LD_INT 12
17800: PUSH
17801: LD_INT 12
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: ST_TO_ADDR
// hc_agressivity := 20 ;
17808: LD_ADDR_OWVAR 35
17812: PUSH
17813: LD_INT 20
17815: ST_TO_ADDR
// hc_class := class_tiger ;
17816: LD_ADDR_OWVAR 28
17820: PUSH
17821: LD_INT 14
17823: ST_TO_ADDR
// hc_gallery :=  ;
17824: LD_ADDR_OWVAR 33
17828: PUSH
17829: LD_STRING 
17831: ST_TO_ADDR
// hc_name :=  ;
17832: LD_ADDR_OWVAR 26
17836: PUSH
17837: LD_STRING 
17839: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17840: CALL_OW 44
17844: PPUSH
17845: LD_INT 0
17847: PPUSH
17848: CALL_OW 51
// end ;
17852: GO 17774
17854: POP
17855: POP
// end ;
17856: PPOPN 1
17858: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17859: LD_EXP 43
17863: PUSH
17864: LD_EXP 63
17868: AND
17869: IFFALSE 17878
17871: GO 17873
17873: DISABLE
// StreamSibBomb ;
17874: CALL 17879 0 0
17878: END
// export function StreamSibBomb ; var i , x , y ; begin
17879: LD_INT 0
17881: PPUSH
17882: PPUSH
17883: PPUSH
17884: PPUSH
// result := false ;
17885: LD_ADDR_VAR 0 1
17889: PUSH
17890: LD_INT 0
17892: ST_TO_ADDR
// for i := 1 to 16 do
17893: LD_ADDR_VAR 0 2
17897: PUSH
17898: DOUBLE
17899: LD_INT 1
17901: DEC
17902: ST_TO_ADDR
17903: LD_INT 16
17905: PUSH
17906: FOR_TO
17907: IFFALSE 18106
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17909: LD_ADDR_VAR 0 3
17913: PUSH
17914: LD_INT 10
17916: PUSH
17917: LD_INT 20
17919: PUSH
17920: LD_INT 30
17922: PUSH
17923: LD_INT 40
17925: PUSH
17926: LD_INT 50
17928: PUSH
17929: LD_INT 60
17931: PUSH
17932: LD_INT 70
17934: PUSH
17935: LD_INT 80
17937: PUSH
17938: LD_INT 90
17940: PUSH
17941: LD_INT 100
17943: PUSH
17944: LD_INT 110
17946: PUSH
17947: LD_INT 120
17949: PUSH
17950: LD_INT 130
17952: PUSH
17953: LD_INT 140
17955: PUSH
17956: LD_INT 150
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: PUSH
17976: LD_INT 1
17978: PPUSH
17979: LD_INT 15
17981: PPUSH
17982: CALL_OW 12
17986: ARRAY
17987: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17988: LD_ADDR_VAR 0 4
17992: PUSH
17993: LD_INT 10
17995: PUSH
17996: LD_INT 20
17998: PUSH
17999: LD_INT 30
18001: PUSH
18002: LD_INT 40
18004: PUSH
18005: LD_INT 50
18007: PUSH
18008: LD_INT 60
18010: PUSH
18011: LD_INT 70
18013: PUSH
18014: LD_INT 80
18016: PUSH
18017: LD_INT 90
18019: PUSH
18020: LD_INT 100
18022: PUSH
18023: LD_INT 110
18025: PUSH
18026: LD_INT 120
18028: PUSH
18029: LD_INT 130
18031: PUSH
18032: LD_INT 140
18034: PUSH
18035: LD_INT 150
18037: PUSH
18038: EMPTY
18039: LIST
18040: LIST
18041: LIST
18042: LIST
18043: LIST
18044: LIST
18045: LIST
18046: LIST
18047: LIST
18048: LIST
18049: LIST
18050: LIST
18051: LIST
18052: LIST
18053: LIST
18054: PUSH
18055: LD_INT 1
18057: PPUSH
18058: LD_INT 15
18060: PPUSH
18061: CALL_OW 12
18065: ARRAY
18066: ST_TO_ADDR
// if ValidHex ( x , y ) then
18067: LD_VAR 0 3
18071: PPUSH
18072: LD_VAR 0 4
18076: PPUSH
18077: CALL_OW 488
18081: IFFALSE 18104
// begin result := [ x , y ] ;
18083: LD_ADDR_VAR 0 1
18087: PUSH
18088: LD_VAR 0 3
18092: PUSH
18093: LD_VAR 0 4
18097: PUSH
18098: EMPTY
18099: LIST
18100: LIST
18101: ST_TO_ADDR
// break ;
18102: GO 18106
// end ; end ;
18104: GO 17906
18106: POP
18107: POP
// if result then
18108: LD_VAR 0 1
18112: IFFALSE 18172
// begin ToLua ( playSibBomb() ) ;
18114: LD_STRING playSibBomb()
18116: PPUSH
18117: CALL_OW 559
// wait ( 0 0$14 ) ;
18121: LD_INT 490
18123: PPUSH
18124: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18128: LD_VAR 0 1
18132: PUSH
18133: LD_INT 1
18135: ARRAY
18136: PPUSH
18137: LD_VAR 0 1
18141: PUSH
18142: LD_INT 2
18144: ARRAY
18145: PPUSH
18146: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18150: LD_VAR 0 1
18154: PUSH
18155: LD_INT 1
18157: ARRAY
18158: PPUSH
18159: LD_VAR 0 1
18163: PUSH
18164: LD_INT 2
18166: ARRAY
18167: PPUSH
18168: CALL_OW 429
// end ; end ;
18172: LD_VAR 0 1
18176: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18177: LD_EXP 43
18181: PUSH
18182: LD_EXP 65
18186: AND
18187: IFFALSE 18199
18189: GO 18191
18191: DISABLE
// YouLost (  ) ;
18192: LD_STRING 
18194: PPUSH
18195: CALL_OW 104
18199: END
// every 0 0$1 trigger StreamModeActive and sFog do
18200: LD_EXP 43
18204: PUSH
18205: LD_EXP 64
18209: AND
18210: IFFALSE 18224
18212: GO 18214
18214: DISABLE
// FogOff ( your_side ) ;
18215: LD_OWVAR 2
18219: PPUSH
18220: CALL_OW 344
18224: END
// every 0 0$1 trigger StreamModeActive and sSun do
18225: LD_EXP 43
18229: PUSH
18230: LD_EXP 66
18234: AND
18235: IFFALSE 18263
18237: GO 18239
18239: DISABLE
// begin solar_recharge_percent := 0 ;
18240: LD_ADDR_OWVAR 79
18244: PUSH
18245: LD_INT 0
18247: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18248: LD_INT 10500
18250: PPUSH
18251: CALL_OW 67
// solar_recharge_percent := 100 ;
18255: LD_ADDR_OWVAR 79
18259: PUSH
18260: LD_INT 100
18262: ST_TO_ADDR
// end ;
18263: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18264: LD_EXP 43
18268: PUSH
18269: LD_EXP 67
18273: AND
18274: IFFALSE 18513
18276: GO 18278
18278: DISABLE
18279: LD_INT 0
18281: PPUSH
18282: PPUSH
18283: PPUSH
// begin tmp := [ ] ;
18284: LD_ADDR_VAR 0 3
18288: PUSH
18289: EMPTY
18290: ST_TO_ADDR
// for i := 1 to 6 do
18291: LD_ADDR_VAR 0 1
18295: PUSH
18296: DOUBLE
18297: LD_INT 1
18299: DEC
18300: ST_TO_ADDR
18301: LD_INT 6
18303: PUSH
18304: FOR_TO
18305: IFFALSE 18410
// begin uc_nation := nation_nature ;
18307: LD_ADDR_OWVAR 21
18311: PUSH
18312: LD_INT 0
18314: ST_TO_ADDR
// uc_side := 0 ;
18315: LD_ADDR_OWVAR 20
18319: PUSH
18320: LD_INT 0
18322: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18323: LD_ADDR_OWVAR 29
18327: PUSH
18328: LD_INT 12
18330: PUSH
18331: LD_INT 12
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: ST_TO_ADDR
// hc_agressivity := 20 ;
18338: LD_ADDR_OWVAR 35
18342: PUSH
18343: LD_INT 20
18345: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18346: LD_ADDR_OWVAR 28
18350: PUSH
18351: LD_INT 17
18353: ST_TO_ADDR
// hc_gallery :=  ;
18354: LD_ADDR_OWVAR 33
18358: PUSH
18359: LD_STRING 
18361: ST_TO_ADDR
// hc_name :=  ;
18362: LD_ADDR_OWVAR 26
18366: PUSH
18367: LD_STRING 
18369: ST_TO_ADDR
// un := CreateHuman ;
18370: LD_ADDR_VAR 0 2
18374: PUSH
18375: CALL_OW 44
18379: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18380: LD_VAR 0 2
18384: PPUSH
18385: LD_INT 1
18387: PPUSH
18388: CALL_OW 51
// tmp := tmp ^ un ;
18392: LD_ADDR_VAR 0 3
18396: PUSH
18397: LD_VAR 0 3
18401: PUSH
18402: LD_VAR 0 2
18406: ADD
18407: ST_TO_ADDR
// end ;
18408: GO 18304
18410: POP
18411: POP
// repeat wait ( 0 0$1 ) ;
18412: LD_INT 35
18414: PPUSH
18415: CALL_OW 67
// for un in tmp do
18419: LD_ADDR_VAR 0 2
18423: PUSH
18424: LD_VAR 0 3
18428: PUSH
18429: FOR_IN
18430: IFFALSE 18504
// begin if IsDead ( un ) then
18432: LD_VAR 0 2
18436: PPUSH
18437: CALL_OW 301
18441: IFFALSE 18461
// begin tmp := tmp diff un ;
18443: LD_ADDR_VAR 0 3
18447: PUSH
18448: LD_VAR 0 3
18452: PUSH
18453: LD_VAR 0 2
18457: DIFF
18458: ST_TO_ADDR
// continue ;
18459: GO 18429
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18461: LD_VAR 0 2
18465: PPUSH
18466: LD_INT 3
18468: PUSH
18469: LD_INT 22
18471: PUSH
18472: LD_INT 0
18474: PUSH
18475: EMPTY
18476: LIST
18477: LIST
18478: PUSH
18479: EMPTY
18480: LIST
18481: LIST
18482: PPUSH
18483: CALL_OW 69
18487: PPUSH
18488: LD_VAR 0 2
18492: PPUSH
18493: CALL_OW 74
18497: PPUSH
18498: CALL_OW 115
// end ;
18502: GO 18429
18504: POP
18505: POP
// until not tmp ;
18506: LD_VAR 0 3
18510: NOT
18511: IFFALSE 18412
// end ;
18513: PPOPN 3
18515: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18516: LD_EXP 43
18520: PUSH
18521: LD_EXP 68
18525: AND
18526: IFFALSE 18580
18528: GO 18530
18530: DISABLE
// begin ToLua ( displayTroll(); ) ;
18531: LD_STRING displayTroll();
18533: PPUSH
18534: CALL_OW 559
// wait ( 3 3$00 ) ;
18538: LD_INT 6300
18540: PPUSH
18541: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18545: LD_STRING hideTroll();
18547: PPUSH
18548: CALL_OW 559
// wait ( 1 1$00 ) ;
18552: LD_INT 2100
18554: PPUSH
18555: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18559: LD_STRING displayTroll();
18561: PPUSH
18562: CALL_OW 559
// wait ( 1 1$00 ) ;
18566: LD_INT 2100
18568: PPUSH
18569: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18573: LD_STRING hideTroll();
18575: PPUSH
18576: CALL_OW 559
// end ;
18580: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18581: LD_EXP 43
18585: PUSH
18586: LD_EXP 69
18590: AND
18591: IFFALSE 18654
18593: GO 18595
18595: DISABLE
18596: LD_INT 0
18598: PPUSH
// begin p := 0 ;
18599: LD_ADDR_VAR 0 1
18603: PUSH
18604: LD_INT 0
18606: ST_TO_ADDR
// repeat game_speed := 1 ;
18607: LD_ADDR_OWVAR 65
18611: PUSH
18612: LD_INT 1
18614: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18615: LD_INT 35
18617: PPUSH
18618: CALL_OW 67
// p := p + 1 ;
18622: LD_ADDR_VAR 0 1
18626: PUSH
18627: LD_VAR 0 1
18631: PUSH
18632: LD_INT 1
18634: PLUS
18635: ST_TO_ADDR
// until p >= 60 ;
18636: LD_VAR 0 1
18640: PUSH
18641: LD_INT 60
18643: GREATEREQUAL
18644: IFFALSE 18607
// game_speed := 4 ;
18646: LD_ADDR_OWVAR 65
18650: PUSH
18651: LD_INT 4
18653: ST_TO_ADDR
// end ;
18654: PPOPN 1
18656: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18657: LD_EXP 43
18661: PUSH
18662: LD_EXP 70
18666: AND
18667: IFFALSE 18813
18669: GO 18671
18671: DISABLE
18672: LD_INT 0
18674: PPUSH
18675: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18676: LD_ADDR_VAR 0 1
18680: PUSH
18681: LD_INT 22
18683: PUSH
18684: LD_OWVAR 2
18688: PUSH
18689: EMPTY
18690: LIST
18691: LIST
18692: PUSH
18693: LD_INT 2
18695: PUSH
18696: LD_INT 30
18698: PUSH
18699: LD_INT 0
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: PUSH
18706: LD_INT 30
18708: PUSH
18709: LD_INT 1
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PUSH
18716: EMPTY
18717: LIST
18718: LIST
18719: LIST
18720: PUSH
18721: EMPTY
18722: LIST
18723: LIST
18724: PPUSH
18725: CALL_OW 69
18729: ST_TO_ADDR
// if not depot then
18730: LD_VAR 0 1
18734: NOT
18735: IFFALSE 18739
// exit ;
18737: GO 18813
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18739: LD_ADDR_VAR 0 2
18743: PUSH
18744: LD_VAR 0 1
18748: PUSH
18749: LD_INT 1
18751: PPUSH
18752: LD_VAR 0 1
18756: PPUSH
18757: CALL_OW 12
18761: ARRAY
18762: PPUSH
18763: CALL_OW 274
18767: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18768: LD_VAR 0 2
18772: PPUSH
18773: LD_INT 1
18775: PPUSH
18776: LD_INT 0
18778: PPUSH
18779: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18783: LD_VAR 0 2
18787: PPUSH
18788: LD_INT 2
18790: PPUSH
18791: LD_INT 0
18793: PPUSH
18794: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18798: LD_VAR 0 2
18802: PPUSH
18803: LD_INT 3
18805: PPUSH
18806: LD_INT 0
18808: PPUSH
18809: CALL_OW 277
// end ;
18813: PPOPN 2
18815: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18816: LD_EXP 43
18820: PUSH
18821: LD_EXP 71
18825: AND
18826: IFFALSE 18923
18828: GO 18830
18830: DISABLE
18831: LD_INT 0
18833: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18834: LD_ADDR_VAR 0 1
18838: PUSH
18839: LD_INT 22
18841: PUSH
18842: LD_OWVAR 2
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: PUSH
18851: LD_INT 21
18853: PUSH
18854: LD_INT 1
18856: PUSH
18857: EMPTY
18858: LIST
18859: LIST
18860: PUSH
18861: LD_INT 3
18863: PUSH
18864: LD_INT 23
18866: PUSH
18867: LD_INT 0
18869: PUSH
18870: EMPTY
18871: LIST
18872: LIST
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: LIST
18882: PPUSH
18883: CALL_OW 69
18887: ST_TO_ADDR
// if not tmp then
18888: LD_VAR 0 1
18892: NOT
18893: IFFALSE 18897
// exit ;
18895: GO 18923
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18897: LD_VAR 0 1
18901: PUSH
18902: LD_INT 1
18904: PPUSH
18905: LD_VAR 0 1
18909: PPUSH
18910: CALL_OW 12
18914: ARRAY
18915: PPUSH
18916: LD_INT 200
18918: PPUSH
18919: CALL_OW 234
// end ;
18923: PPOPN 1
18925: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18926: LD_EXP 43
18930: PUSH
18931: LD_EXP 72
18935: AND
18936: IFFALSE 19015
18938: GO 18940
18940: DISABLE
18941: LD_INT 0
18943: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18944: LD_ADDR_VAR 0 1
18948: PUSH
18949: LD_INT 22
18951: PUSH
18952: LD_OWVAR 2
18956: PUSH
18957: EMPTY
18958: LIST
18959: LIST
18960: PUSH
18961: LD_INT 21
18963: PUSH
18964: LD_INT 2
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: PUSH
18971: EMPTY
18972: LIST
18973: LIST
18974: PPUSH
18975: CALL_OW 69
18979: ST_TO_ADDR
// if not tmp then
18980: LD_VAR 0 1
18984: NOT
18985: IFFALSE 18989
// exit ;
18987: GO 19015
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18989: LD_VAR 0 1
18993: PUSH
18994: LD_INT 1
18996: PPUSH
18997: LD_VAR 0 1
19001: PPUSH
19002: CALL_OW 12
19006: ARRAY
19007: PPUSH
19008: LD_INT 60
19010: PPUSH
19011: CALL_OW 234
// end ;
19015: PPOPN 1
19017: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19018: LD_EXP 43
19022: PUSH
19023: LD_EXP 73
19027: AND
19028: IFFALSE 19127
19030: GO 19032
19032: DISABLE
19033: LD_INT 0
19035: PPUSH
19036: PPUSH
// begin enable ;
19037: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19038: LD_ADDR_VAR 0 1
19042: PUSH
19043: LD_INT 22
19045: PUSH
19046: LD_OWVAR 2
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: PUSH
19055: LD_INT 61
19057: PUSH
19058: EMPTY
19059: LIST
19060: PUSH
19061: LD_INT 33
19063: PUSH
19064: LD_INT 2
19066: PUSH
19067: EMPTY
19068: LIST
19069: LIST
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: LIST
19075: PPUSH
19076: CALL_OW 69
19080: ST_TO_ADDR
// if not tmp then
19081: LD_VAR 0 1
19085: NOT
19086: IFFALSE 19090
// exit ;
19088: GO 19127
// for i in tmp do
19090: LD_ADDR_VAR 0 2
19094: PUSH
19095: LD_VAR 0 1
19099: PUSH
19100: FOR_IN
19101: IFFALSE 19125
// if IsControledBy ( i ) then
19103: LD_VAR 0 2
19107: PPUSH
19108: CALL_OW 312
19112: IFFALSE 19123
// ComUnlink ( i ) ;
19114: LD_VAR 0 2
19118: PPUSH
19119: CALL_OW 136
19123: GO 19100
19125: POP
19126: POP
// end ;
19127: PPOPN 2
19129: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19130: LD_EXP 43
19134: PUSH
19135: LD_EXP 74
19139: AND
19140: IFFALSE 19280
19142: GO 19144
19144: DISABLE
19145: LD_INT 0
19147: PPUSH
19148: PPUSH
// begin ToLua ( displayPowell(); ) ;
19149: LD_STRING displayPowell();
19151: PPUSH
19152: CALL_OW 559
// uc_side := 0 ;
19156: LD_ADDR_OWVAR 20
19160: PUSH
19161: LD_INT 0
19163: ST_TO_ADDR
// uc_nation := 2 ;
19164: LD_ADDR_OWVAR 21
19168: PUSH
19169: LD_INT 2
19171: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19172: LD_ADDR_OWVAR 37
19176: PUSH
19177: LD_INT 14
19179: ST_TO_ADDR
// vc_engine := engine_siberite ;
19180: LD_ADDR_OWVAR 39
19184: PUSH
19185: LD_INT 3
19187: ST_TO_ADDR
// vc_control := control_apeman ;
19188: LD_ADDR_OWVAR 38
19192: PUSH
19193: LD_INT 5
19195: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19196: LD_ADDR_OWVAR 40
19200: PUSH
19201: LD_INT 29
19203: ST_TO_ADDR
// un := CreateVehicle ;
19204: LD_ADDR_VAR 0 2
19208: PUSH
19209: CALL_OW 45
19213: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19214: LD_VAR 0 2
19218: PPUSH
19219: LD_INT 1
19221: PPUSH
19222: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19226: LD_INT 35
19228: PPUSH
19229: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19233: LD_VAR 0 2
19237: PPUSH
19238: LD_INT 22
19240: PUSH
19241: LD_OWVAR 2
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: PPUSH
19250: CALL_OW 69
19254: PPUSH
19255: LD_VAR 0 2
19259: PPUSH
19260: CALL_OW 74
19264: PPUSH
19265: CALL_OW 115
// until IsDead ( un ) ;
19269: LD_VAR 0 2
19273: PPUSH
19274: CALL_OW 301
19278: IFFALSE 19226
// end ;
19280: PPOPN 2
19282: END
// every 0 0$1 trigger StreamModeActive and sStu do
19283: LD_EXP 43
19287: PUSH
19288: LD_EXP 82
19292: AND
19293: IFFALSE 19309
19295: GO 19297
19297: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19298: LD_STRING displayStucuk();
19300: PPUSH
19301: CALL_OW 559
// ResetFog ;
19305: CALL_OW 335
// end ;
19309: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19310: LD_EXP 43
19314: PUSH
19315: LD_EXP 75
19319: AND
19320: IFFALSE 19461
19322: GO 19324
19324: DISABLE
19325: LD_INT 0
19327: PPUSH
19328: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19329: LD_ADDR_VAR 0 2
19333: PUSH
19334: LD_INT 22
19336: PUSH
19337: LD_OWVAR 2
19341: PUSH
19342: EMPTY
19343: LIST
19344: LIST
19345: PUSH
19346: LD_INT 21
19348: PUSH
19349: LD_INT 1
19351: PUSH
19352: EMPTY
19353: LIST
19354: LIST
19355: PUSH
19356: EMPTY
19357: LIST
19358: LIST
19359: PPUSH
19360: CALL_OW 69
19364: ST_TO_ADDR
// if not tmp then
19365: LD_VAR 0 2
19369: NOT
19370: IFFALSE 19374
// exit ;
19372: GO 19461
// un := tmp [ rand ( 1 , tmp ) ] ;
19374: LD_ADDR_VAR 0 1
19378: PUSH
19379: LD_VAR 0 2
19383: PUSH
19384: LD_INT 1
19386: PPUSH
19387: LD_VAR 0 2
19391: PPUSH
19392: CALL_OW 12
19396: ARRAY
19397: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19398: LD_VAR 0 1
19402: PPUSH
19403: LD_INT 0
19405: PPUSH
19406: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19410: LD_VAR 0 1
19414: PPUSH
19415: LD_OWVAR 3
19419: PUSH
19420: LD_VAR 0 1
19424: DIFF
19425: PPUSH
19426: LD_VAR 0 1
19430: PPUSH
19431: CALL_OW 74
19435: PPUSH
19436: CALL_OW 115
// wait ( 0 0$20 ) ;
19440: LD_INT 700
19442: PPUSH
19443: CALL_OW 67
// SetSide ( un , your_side ) ;
19447: LD_VAR 0 1
19451: PPUSH
19452: LD_OWVAR 2
19456: PPUSH
19457: CALL_OW 235
// end ;
19461: PPOPN 2
19463: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19464: LD_EXP 43
19468: PUSH
19469: LD_EXP 76
19473: AND
19474: IFFALSE 19580
19476: GO 19478
19478: DISABLE
19479: LD_INT 0
19481: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19482: LD_ADDR_VAR 0 1
19486: PUSH
19487: LD_INT 22
19489: PUSH
19490: LD_OWVAR 2
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: PUSH
19499: LD_INT 2
19501: PUSH
19502: LD_INT 30
19504: PUSH
19505: LD_INT 0
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: LD_INT 30
19514: PUSH
19515: LD_INT 1
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: LIST
19526: PUSH
19527: EMPTY
19528: LIST
19529: LIST
19530: PPUSH
19531: CALL_OW 69
19535: ST_TO_ADDR
// if not depot then
19536: LD_VAR 0 1
19540: NOT
19541: IFFALSE 19545
// exit ;
19543: GO 19580
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19545: LD_VAR 0 1
19549: PUSH
19550: LD_INT 1
19552: ARRAY
19553: PPUSH
19554: CALL_OW 250
19558: PPUSH
19559: LD_VAR 0 1
19563: PUSH
19564: LD_INT 1
19566: ARRAY
19567: PPUSH
19568: CALL_OW 251
19572: PPUSH
19573: LD_INT 70
19575: PPUSH
19576: CALL_OW 495
// end ;
19580: PPOPN 1
19582: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19583: LD_EXP 43
19587: PUSH
19588: LD_EXP 77
19592: AND
19593: IFFALSE 19804
19595: GO 19597
19597: DISABLE
19598: LD_INT 0
19600: PPUSH
19601: PPUSH
19602: PPUSH
19603: PPUSH
19604: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19605: LD_ADDR_VAR 0 5
19609: PUSH
19610: LD_INT 22
19612: PUSH
19613: LD_OWVAR 2
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: PUSH
19622: LD_INT 21
19624: PUSH
19625: LD_INT 1
19627: PUSH
19628: EMPTY
19629: LIST
19630: LIST
19631: PUSH
19632: EMPTY
19633: LIST
19634: LIST
19635: PPUSH
19636: CALL_OW 69
19640: ST_TO_ADDR
// if not tmp then
19641: LD_VAR 0 5
19645: NOT
19646: IFFALSE 19650
// exit ;
19648: GO 19804
// for i in tmp do
19650: LD_ADDR_VAR 0 1
19654: PUSH
19655: LD_VAR 0 5
19659: PUSH
19660: FOR_IN
19661: IFFALSE 19802
// begin d := rand ( 0 , 5 ) ;
19663: LD_ADDR_VAR 0 4
19667: PUSH
19668: LD_INT 0
19670: PPUSH
19671: LD_INT 5
19673: PPUSH
19674: CALL_OW 12
19678: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19679: LD_ADDR_VAR 0 2
19683: PUSH
19684: LD_VAR 0 1
19688: PPUSH
19689: CALL_OW 250
19693: PPUSH
19694: LD_VAR 0 4
19698: PPUSH
19699: LD_INT 3
19701: PPUSH
19702: LD_INT 12
19704: PPUSH
19705: CALL_OW 12
19709: PPUSH
19710: CALL_OW 272
19714: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19715: LD_ADDR_VAR 0 3
19719: PUSH
19720: LD_VAR 0 1
19724: PPUSH
19725: CALL_OW 251
19729: PPUSH
19730: LD_VAR 0 4
19734: PPUSH
19735: LD_INT 3
19737: PPUSH
19738: LD_INT 12
19740: PPUSH
19741: CALL_OW 12
19745: PPUSH
19746: CALL_OW 273
19750: ST_TO_ADDR
// if ValidHex ( x , y ) then
19751: LD_VAR 0 2
19755: PPUSH
19756: LD_VAR 0 3
19760: PPUSH
19761: CALL_OW 488
19765: IFFALSE 19800
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19767: LD_VAR 0 1
19771: PPUSH
19772: LD_VAR 0 2
19776: PPUSH
19777: LD_VAR 0 3
19781: PPUSH
19782: LD_INT 3
19784: PPUSH
19785: LD_INT 6
19787: PPUSH
19788: CALL_OW 12
19792: PPUSH
19793: LD_INT 1
19795: PPUSH
19796: CALL_OW 483
// end ;
19800: GO 19660
19802: POP
19803: POP
// end ;
19804: PPOPN 5
19806: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19807: LD_EXP 43
19811: PUSH
19812: LD_EXP 78
19816: AND
19817: IFFALSE 19911
19819: GO 19821
19821: DISABLE
19822: LD_INT 0
19824: PPUSH
19825: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19826: LD_ADDR_VAR 0 2
19830: PUSH
19831: LD_INT 22
19833: PUSH
19834: LD_OWVAR 2
19838: PUSH
19839: EMPTY
19840: LIST
19841: LIST
19842: PUSH
19843: LD_INT 32
19845: PUSH
19846: LD_INT 1
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: PUSH
19853: LD_INT 21
19855: PUSH
19856: LD_INT 2
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: LIST
19867: PPUSH
19868: CALL_OW 69
19872: ST_TO_ADDR
// if not tmp then
19873: LD_VAR 0 2
19877: NOT
19878: IFFALSE 19882
// exit ;
19880: GO 19911
// for i in tmp do
19882: LD_ADDR_VAR 0 1
19886: PUSH
19887: LD_VAR 0 2
19891: PUSH
19892: FOR_IN
19893: IFFALSE 19909
// SetFuel ( i , 0 ) ;
19895: LD_VAR 0 1
19899: PPUSH
19900: LD_INT 0
19902: PPUSH
19903: CALL_OW 240
19907: GO 19892
19909: POP
19910: POP
// end ;
19911: PPOPN 2
19913: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19914: LD_EXP 43
19918: PUSH
19919: LD_EXP 79
19923: AND
19924: IFFALSE 19990
19926: GO 19928
19928: DISABLE
19929: LD_INT 0
19931: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19932: LD_ADDR_VAR 0 1
19936: PUSH
19937: LD_INT 22
19939: PUSH
19940: LD_OWVAR 2
19944: PUSH
19945: EMPTY
19946: LIST
19947: LIST
19948: PUSH
19949: LD_INT 30
19951: PUSH
19952: LD_INT 29
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: PUSH
19959: EMPTY
19960: LIST
19961: LIST
19962: PPUSH
19963: CALL_OW 69
19967: ST_TO_ADDR
// if not tmp then
19968: LD_VAR 0 1
19972: NOT
19973: IFFALSE 19977
// exit ;
19975: GO 19990
// DestroyUnit ( tmp [ 1 ] ) ;
19977: LD_VAR 0 1
19981: PUSH
19982: LD_INT 1
19984: ARRAY
19985: PPUSH
19986: CALL_OW 65
// end ;
19990: PPOPN 1
19992: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19993: LD_EXP 43
19997: PUSH
19998: LD_EXP 81
20002: AND
20003: IFFALSE 20132
20005: GO 20007
20007: DISABLE
20008: LD_INT 0
20010: PPUSH
// begin uc_side := 0 ;
20011: LD_ADDR_OWVAR 20
20015: PUSH
20016: LD_INT 0
20018: ST_TO_ADDR
// uc_nation := nation_arabian ;
20019: LD_ADDR_OWVAR 21
20023: PUSH
20024: LD_INT 2
20026: ST_TO_ADDR
// hc_gallery :=  ;
20027: LD_ADDR_OWVAR 33
20031: PUSH
20032: LD_STRING 
20034: ST_TO_ADDR
// hc_name :=  ;
20035: LD_ADDR_OWVAR 26
20039: PUSH
20040: LD_STRING 
20042: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20043: LD_INT 1
20045: PPUSH
20046: LD_INT 11
20048: PPUSH
20049: LD_INT 10
20051: PPUSH
20052: CALL_OW 380
// un := CreateHuman ;
20056: LD_ADDR_VAR 0 1
20060: PUSH
20061: CALL_OW 44
20065: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20066: LD_VAR 0 1
20070: PPUSH
20071: LD_INT 1
20073: PPUSH
20074: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20078: LD_INT 35
20080: PPUSH
20081: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20085: LD_VAR 0 1
20089: PPUSH
20090: LD_INT 22
20092: PUSH
20093: LD_OWVAR 2
20097: PUSH
20098: EMPTY
20099: LIST
20100: LIST
20101: PPUSH
20102: CALL_OW 69
20106: PPUSH
20107: LD_VAR 0 1
20111: PPUSH
20112: CALL_OW 74
20116: PPUSH
20117: CALL_OW 115
// until IsDead ( un ) ;
20121: LD_VAR 0 1
20125: PPUSH
20126: CALL_OW 301
20130: IFFALSE 20078
// end ;
20132: PPOPN 1
20134: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20135: LD_EXP 43
20139: PUSH
20140: LD_EXP 83
20144: AND
20145: IFFALSE 20157
20147: GO 20149
20149: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20150: LD_STRING earthquake(getX(game), 0, 32)
20152: PPUSH
20153: CALL_OW 559
20157: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20158: LD_EXP 43
20162: PUSH
20163: LD_EXP 84
20167: AND
20168: IFFALSE 20259
20170: GO 20172
20172: DISABLE
20173: LD_INT 0
20175: PPUSH
// begin enable ;
20176: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20177: LD_ADDR_VAR 0 1
20181: PUSH
20182: LD_INT 22
20184: PUSH
20185: LD_OWVAR 2
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: PUSH
20194: LD_INT 21
20196: PUSH
20197: LD_INT 2
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: LD_INT 33
20206: PUSH
20207: LD_INT 3
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: PUSH
20214: EMPTY
20215: LIST
20216: LIST
20217: LIST
20218: PPUSH
20219: CALL_OW 69
20223: ST_TO_ADDR
// if not tmp then
20224: LD_VAR 0 1
20228: NOT
20229: IFFALSE 20233
// exit ;
20231: GO 20259
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20233: LD_VAR 0 1
20237: PUSH
20238: LD_INT 1
20240: PPUSH
20241: LD_VAR 0 1
20245: PPUSH
20246: CALL_OW 12
20250: ARRAY
20251: PPUSH
20252: LD_INT 1
20254: PPUSH
20255: CALL_OW 234
// end ;
20259: PPOPN 1
20261: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20262: LD_EXP 43
20266: PUSH
20267: LD_EXP 85
20271: AND
20272: IFFALSE 20413
20274: GO 20276
20276: DISABLE
20277: LD_INT 0
20279: PPUSH
20280: PPUSH
20281: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20282: LD_ADDR_VAR 0 3
20286: PUSH
20287: LD_INT 22
20289: PUSH
20290: LD_OWVAR 2
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: PUSH
20299: LD_INT 25
20301: PUSH
20302: LD_INT 1
20304: PUSH
20305: EMPTY
20306: LIST
20307: LIST
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: PPUSH
20313: CALL_OW 69
20317: ST_TO_ADDR
// if not tmp then
20318: LD_VAR 0 3
20322: NOT
20323: IFFALSE 20327
// exit ;
20325: GO 20413
// un := tmp [ rand ( 1 , tmp ) ] ;
20327: LD_ADDR_VAR 0 2
20331: PUSH
20332: LD_VAR 0 3
20336: PUSH
20337: LD_INT 1
20339: PPUSH
20340: LD_VAR 0 3
20344: PPUSH
20345: CALL_OW 12
20349: ARRAY
20350: ST_TO_ADDR
// if Crawls ( un ) then
20351: LD_VAR 0 2
20355: PPUSH
20356: CALL_OW 318
20360: IFFALSE 20371
// ComWalk ( un ) ;
20362: LD_VAR 0 2
20366: PPUSH
20367: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20371: LD_VAR 0 2
20375: PPUSH
20376: LD_INT 9
20378: PPUSH
20379: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20383: LD_INT 28
20385: PPUSH
20386: LD_OWVAR 2
20390: PPUSH
20391: LD_INT 2
20393: PPUSH
20394: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20398: LD_INT 29
20400: PPUSH
20401: LD_OWVAR 2
20405: PPUSH
20406: LD_INT 2
20408: PPUSH
20409: CALL_OW 322
// end ;
20413: PPOPN 3
20415: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20416: LD_EXP 43
20420: PUSH
20421: LD_EXP 86
20425: AND
20426: IFFALSE 20537
20428: GO 20430
20430: DISABLE
20431: LD_INT 0
20433: PPUSH
20434: PPUSH
20435: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20436: LD_ADDR_VAR 0 3
20440: PUSH
20441: LD_INT 22
20443: PUSH
20444: LD_OWVAR 2
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: LD_INT 25
20455: PUSH
20456: LD_INT 1
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: PUSH
20463: EMPTY
20464: LIST
20465: LIST
20466: PPUSH
20467: CALL_OW 69
20471: ST_TO_ADDR
// if not tmp then
20472: LD_VAR 0 3
20476: NOT
20477: IFFALSE 20481
// exit ;
20479: GO 20537
// un := tmp [ rand ( 1 , tmp ) ] ;
20481: LD_ADDR_VAR 0 2
20485: PUSH
20486: LD_VAR 0 3
20490: PUSH
20491: LD_INT 1
20493: PPUSH
20494: LD_VAR 0 3
20498: PPUSH
20499: CALL_OW 12
20503: ARRAY
20504: ST_TO_ADDR
// if Crawls ( un ) then
20505: LD_VAR 0 2
20509: PPUSH
20510: CALL_OW 318
20514: IFFALSE 20525
// ComWalk ( un ) ;
20516: LD_VAR 0 2
20520: PPUSH
20521: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20525: LD_VAR 0 2
20529: PPUSH
20530: LD_INT 8
20532: PPUSH
20533: CALL_OW 336
// end ;
20537: PPOPN 3
20539: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20540: LD_EXP 43
20544: PUSH
20545: LD_EXP 87
20549: AND
20550: IFFALSE 20694
20552: GO 20554
20554: DISABLE
20555: LD_INT 0
20557: PPUSH
20558: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20559: LD_ADDR_VAR 0 2
20563: PUSH
20564: LD_INT 22
20566: PUSH
20567: LD_OWVAR 2
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: PUSH
20576: LD_INT 21
20578: PUSH
20579: LD_INT 2
20581: PUSH
20582: EMPTY
20583: LIST
20584: LIST
20585: PUSH
20586: LD_INT 2
20588: PUSH
20589: LD_INT 34
20591: PUSH
20592: LD_INT 12
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: PUSH
20599: LD_INT 34
20601: PUSH
20602: LD_INT 51
20604: PUSH
20605: EMPTY
20606: LIST
20607: LIST
20608: PUSH
20609: LD_INT 34
20611: PUSH
20612: LD_INT 32
20614: PUSH
20615: EMPTY
20616: LIST
20617: LIST
20618: PUSH
20619: EMPTY
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: PUSH
20625: EMPTY
20626: LIST
20627: LIST
20628: LIST
20629: PPUSH
20630: CALL_OW 69
20634: ST_TO_ADDR
// if not tmp then
20635: LD_VAR 0 2
20639: NOT
20640: IFFALSE 20644
// exit ;
20642: GO 20694
// for i in tmp do
20644: LD_ADDR_VAR 0 1
20648: PUSH
20649: LD_VAR 0 2
20653: PUSH
20654: FOR_IN
20655: IFFALSE 20692
// if GetCargo ( i , mat_artifact ) = 0 then
20657: LD_VAR 0 1
20661: PPUSH
20662: LD_INT 4
20664: PPUSH
20665: CALL_OW 289
20669: PUSH
20670: LD_INT 0
20672: EQUAL
20673: IFFALSE 20690
// SetCargo ( i , mat_siberit , 100 ) ;
20675: LD_VAR 0 1
20679: PPUSH
20680: LD_INT 3
20682: PPUSH
20683: LD_INT 100
20685: PPUSH
20686: CALL_OW 290
20690: GO 20654
20692: POP
20693: POP
// end ;
20694: PPOPN 2
20696: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20697: LD_EXP 43
20701: PUSH
20702: LD_EXP 88
20706: AND
20707: IFFALSE 20860
20709: GO 20711
20711: DISABLE
20712: LD_INT 0
20714: PPUSH
20715: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20716: LD_ADDR_VAR 0 2
20720: PUSH
20721: LD_INT 22
20723: PUSH
20724: LD_OWVAR 2
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: PPUSH
20733: CALL_OW 69
20737: ST_TO_ADDR
// if not tmp then
20738: LD_VAR 0 2
20742: NOT
20743: IFFALSE 20747
// exit ;
20745: GO 20860
// for i := 1 to 2 do
20747: LD_ADDR_VAR 0 1
20751: PUSH
20752: DOUBLE
20753: LD_INT 1
20755: DEC
20756: ST_TO_ADDR
20757: LD_INT 2
20759: PUSH
20760: FOR_TO
20761: IFFALSE 20858
// begin uc_side := your_side ;
20763: LD_ADDR_OWVAR 20
20767: PUSH
20768: LD_OWVAR 2
20772: ST_TO_ADDR
// uc_nation := nation_american ;
20773: LD_ADDR_OWVAR 21
20777: PUSH
20778: LD_INT 1
20780: ST_TO_ADDR
// vc_chassis := us_morphling ;
20781: LD_ADDR_OWVAR 37
20785: PUSH
20786: LD_INT 5
20788: ST_TO_ADDR
// vc_engine := engine_siberite ;
20789: LD_ADDR_OWVAR 39
20793: PUSH
20794: LD_INT 3
20796: ST_TO_ADDR
// vc_control := control_computer ;
20797: LD_ADDR_OWVAR 38
20801: PUSH
20802: LD_INT 3
20804: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20805: LD_ADDR_OWVAR 40
20809: PUSH
20810: LD_INT 10
20812: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
20813: CALL_OW 45
20817: PPUSH
20818: LD_VAR 0 2
20822: PUSH
20823: LD_INT 1
20825: ARRAY
20826: PPUSH
20827: CALL_OW 250
20831: PPUSH
20832: LD_VAR 0 2
20836: PUSH
20837: LD_INT 1
20839: ARRAY
20840: PPUSH
20841: CALL_OW 251
20845: PPUSH
20846: LD_INT 12
20848: PPUSH
20849: LD_INT 1
20851: PPUSH
20852: CALL_OW 50
// end ;
20856: GO 20760
20858: POP
20859: POP
// end ;
20860: PPOPN 2
20862: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20863: LD_EXP 43
20867: PUSH
20868: LD_EXP 89
20872: AND
20873: IFFALSE 21095
20875: GO 20877
20877: DISABLE
20878: LD_INT 0
20880: PPUSH
20881: PPUSH
20882: PPUSH
20883: PPUSH
20884: PPUSH
20885: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20886: LD_ADDR_VAR 0 6
20890: PUSH
20891: LD_INT 22
20893: PUSH
20894: LD_OWVAR 2
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: PUSH
20903: LD_INT 21
20905: PUSH
20906: LD_INT 1
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: LD_INT 3
20915: PUSH
20916: LD_INT 23
20918: PUSH
20919: LD_INT 0
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: PUSH
20926: EMPTY
20927: LIST
20928: LIST
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: LIST
20934: PPUSH
20935: CALL_OW 69
20939: ST_TO_ADDR
// if not tmp then
20940: LD_VAR 0 6
20944: NOT
20945: IFFALSE 20949
// exit ;
20947: GO 21095
// s1 := rand ( 1 , 4 ) ;
20949: LD_ADDR_VAR 0 2
20953: PUSH
20954: LD_INT 1
20956: PPUSH
20957: LD_INT 4
20959: PPUSH
20960: CALL_OW 12
20964: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20965: LD_ADDR_VAR 0 4
20969: PUSH
20970: LD_VAR 0 6
20974: PUSH
20975: LD_INT 1
20977: ARRAY
20978: PPUSH
20979: LD_VAR 0 2
20983: PPUSH
20984: CALL_OW 259
20988: ST_TO_ADDR
// if s1 = 1 then
20989: LD_VAR 0 2
20993: PUSH
20994: LD_INT 1
20996: EQUAL
20997: IFFALSE 21017
// s2 := rand ( 2 , 4 ) else
20999: LD_ADDR_VAR 0 3
21003: PUSH
21004: LD_INT 2
21006: PPUSH
21007: LD_INT 4
21009: PPUSH
21010: CALL_OW 12
21014: ST_TO_ADDR
21015: GO 21025
// s2 := 1 ;
21017: LD_ADDR_VAR 0 3
21021: PUSH
21022: LD_INT 1
21024: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21025: LD_ADDR_VAR 0 5
21029: PUSH
21030: LD_VAR 0 6
21034: PUSH
21035: LD_INT 1
21037: ARRAY
21038: PPUSH
21039: LD_VAR 0 3
21043: PPUSH
21044: CALL_OW 259
21048: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21049: LD_VAR 0 6
21053: PUSH
21054: LD_INT 1
21056: ARRAY
21057: PPUSH
21058: LD_VAR 0 2
21062: PPUSH
21063: LD_VAR 0 5
21067: PPUSH
21068: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21072: LD_VAR 0 6
21076: PUSH
21077: LD_INT 1
21079: ARRAY
21080: PPUSH
21081: LD_VAR 0 3
21085: PPUSH
21086: LD_VAR 0 4
21090: PPUSH
21091: CALL_OW 237
// end ;
21095: PPOPN 6
21097: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21098: LD_EXP 43
21102: PUSH
21103: LD_EXP 90
21107: AND
21108: IFFALSE 21187
21110: GO 21112
21112: DISABLE
21113: LD_INT 0
21115: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21116: LD_ADDR_VAR 0 1
21120: PUSH
21121: LD_INT 22
21123: PUSH
21124: LD_OWVAR 2
21128: PUSH
21129: EMPTY
21130: LIST
21131: LIST
21132: PUSH
21133: LD_INT 30
21135: PUSH
21136: LD_INT 3
21138: PUSH
21139: EMPTY
21140: LIST
21141: LIST
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: PPUSH
21147: CALL_OW 69
21151: ST_TO_ADDR
// if not tmp then
21152: LD_VAR 0 1
21156: NOT
21157: IFFALSE 21161
// exit ;
21159: GO 21187
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21161: LD_VAR 0 1
21165: PUSH
21166: LD_INT 1
21168: PPUSH
21169: LD_VAR 0 1
21173: PPUSH
21174: CALL_OW 12
21178: ARRAY
21179: PPUSH
21180: LD_INT 1
21182: PPUSH
21183: CALL_OW 234
// end ;
21187: PPOPN 1
21189: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21190: LD_EXP 43
21194: PUSH
21195: LD_EXP 91
21199: AND
21200: IFFALSE 21312
21202: GO 21204
21204: DISABLE
21205: LD_INT 0
21207: PPUSH
21208: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21209: LD_ADDR_VAR 0 2
21213: PUSH
21214: LD_INT 22
21216: PUSH
21217: LD_OWVAR 2
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PUSH
21226: LD_INT 2
21228: PUSH
21229: LD_INT 30
21231: PUSH
21232: LD_INT 27
21234: PUSH
21235: EMPTY
21236: LIST
21237: LIST
21238: PUSH
21239: LD_INT 30
21241: PUSH
21242: LD_INT 26
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: PUSH
21249: LD_INT 30
21251: PUSH
21252: LD_INT 28
21254: PUSH
21255: EMPTY
21256: LIST
21257: LIST
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: PPUSH
21269: CALL_OW 69
21273: ST_TO_ADDR
// if not tmp then
21274: LD_VAR 0 2
21278: NOT
21279: IFFALSE 21283
// exit ;
21281: GO 21312
// for i in tmp do
21283: LD_ADDR_VAR 0 1
21287: PUSH
21288: LD_VAR 0 2
21292: PUSH
21293: FOR_IN
21294: IFFALSE 21310
// SetLives ( i , 1 ) ;
21296: LD_VAR 0 1
21300: PPUSH
21301: LD_INT 1
21303: PPUSH
21304: CALL_OW 234
21308: GO 21293
21310: POP
21311: POP
// end ;
21312: PPOPN 2
21314: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21315: LD_EXP 43
21319: PUSH
21320: LD_EXP 92
21324: AND
21325: IFFALSE 21599
21327: GO 21329
21329: DISABLE
21330: LD_INT 0
21332: PPUSH
21333: PPUSH
21334: PPUSH
// begin i := rand ( 1 , 7 ) ;
21335: LD_ADDR_VAR 0 1
21339: PUSH
21340: LD_INT 1
21342: PPUSH
21343: LD_INT 7
21345: PPUSH
21346: CALL_OW 12
21350: ST_TO_ADDR
// case i of 1 :
21351: LD_VAR 0 1
21355: PUSH
21356: LD_INT 1
21358: DOUBLE
21359: EQUAL
21360: IFTRUE 21364
21362: GO 21374
21364: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21365: LD_STRING earthquake(getX(game), 0, 32)
21367: PPUSH
21368: CALL_OW 559
21372: GO 21599
21374: LD_INT 2
21376: DOUBLE
21377: EQUAL
21378: IFTRUE 21382
21380: GO 21396
21382: POP
// begin ToLua ( displayStucuk(); ) ;
21383: LD_STRING displayStucuk();
21385: PPUSH
21386: CALL_OW 559
// ResetFog ;
21390: CALL_OW 335
// end ; 3 :
21394: GO 21599
21396: LD_INT 3
21398: DOUBLE
21399: EQUAL
21400: IFTRUE 21404
21402: GO 21508
21404: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21405: LD_ADDR_VAR 0 2
21409: PUSH
21410: LD_INT 22
21412: PUSH
21413: LD_OWVAR 2
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PUSH
21422: LD_INT 25
21424: PUSH
21425: LD_INT 1
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PUSH
21432: EMPTY
21433: LIST
21434: LIST
21435: PPUSH
21436: CALL_OW 69
21440: ST_TO_ADDR
// if not tmp then
21441: LD_VAR 0 2
21445: NOT
21446: IFFALSE 21450
// exit ;
21448: GO 21599
// un := tmp [ rand ( 1 , tmp ) ] ;
21450: LD_ADDR_VAR 0 3
21454: PUSH
21455: LD_VAR 0 2
21459: PUSH
21460: LD_INT 1
21462: PPUSH
21463: LD_VAR 0 2
21467: PPUSH
21468: CALL_OW 12
21472: ARRAY
21473: ST_TO_ADDR
// if Crawls ( un ) then
21474: LD_VAR 0 3
21478: PPUSH
21479: CALL_OW 318
21483: IFFALSE 21494
// ComWalk ( un ) ;
21485: LD_VAR 0 3
21489: PPUSH
21490: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21494: LD_VAR 0 3
21498: PPUSH
21499: LD_INT 8
21501: PPUSH
21502: CALL_OW 336
// end ; 4 :
21506: GO 21599
21508: LD_INT 4
21510: DOUBLE
21511: EQUAL
21512: IFTRUE 21516
21514: GO 21577
21516: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21517: LD_ADDR_VAR 0 2
21521: PUSH
21522: LD_INT 22
21524: PUSH
21525: LD_OWVAR 2
21529: PUSH
21530: EMPTY
21531: LIST
21532: LIST
21533: PUSH
21534: LD_INT 30
21536: PUSH
21537: LD_INT 29
21539: PUSH
21540: EMPTY
21541: LIST
21542: LIST
21543: PUSH
21544: EMPTY
21545: LIST
21546: LIST
21547: PPUSH
21548: CALL_OW 69
21552: ST_TO_ADDR
// if not tmp then
21553: LD_VAR 0 2
21557: NOT
21558: IFFALSE 21562
// exit ;
21560: GO 21599
// DestroyUnit ( tmp [ 1 ] ) ;
21562: LD_VAR 0 2
21566: PUSH
21567: LD_INT 1
21569: ARRAY
21570: PPUSH
21571: CALL_OW 65
// end ; 5 .. 7 :
21575: GO 21599
21577: LD_INT 5
21579: DOUBLE
21580: GREATEREQUAL
21581: IFFALSE 21589
21583: LD_INT 7
21585: DOUBLE
21586: LESSEQUAL
21587: IFTRUE 21591
21589: GO 21598
21591: POP
// StreamSibBomb ; end ;
21592: CALL 17879 0 0
21596: GO 21599
21598: POP
// end ;
21599: PPOPN 3
21601: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21602: LD_EXP 43
21606: PUSH
21607: LD_EXP 93
21611: AND
21612: IFFALSE 21768
21614: GO 21616
21616: DISABLE
21617: LD_INT 0
21619: PPUSH
21620: PPUSH
21621: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21622: LD_ADDR_VAR 0 2
21626: PUSH
21627: LD_INT 81
21629: PUSH
21630: LD_OWVAR 2
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: PUSH
21639: LD_INT 2
21641: PUSH
21642: LD_INT 21
21644: PUSH
21645: LD_INT 1
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: PUSH
21652: LD_INT 21
21654: PUSH
21655: LD_INT 2
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: LIST
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: PPUSH
21671: CALL_OW 69
21675: ST_TO_ADDR
// if not tmp then
21676: LD_VAR 0 2
21680: NOT
21681: IFFALSE 21685
// exit ;
21683: GO 21768
// p := 0 ;
21685: LD_ADDR_VAR 0 3
21689: PUSH
21690: LD_INT 0
21692: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21693: LD_INT 35
21695: PPUSH
21696: CALL_OW 67
// p := p + 1 ;
21700: LD_ADDR_VAR 0 3
21704: PUSH
21705: LD_VAR 0 3
21709: PUSH
21710: LD_INT 1
21712: PLUS
21713: ST_TO_ADDR
// for i in tmp do
21714: LD_ADDR_VAR 0 1
21718: PUSH
21719: LD_VAR 0 2
21723: PUSH
21724: FOR_IN
21725: IFFALSE 21756
// if GetLives ( i ) < 1000 then
21727: LD_VAR 0 1
21731: PPUSH
21732: CALL_OW 256
21736: PUSH
21737: LD_INT 1000
21739: LESS
21740: IFFALSE 21754
// SetLives ( i , 1000 ) ;
21742: LD_VAR 0 1
21746: PPUSH
21747: LD_INT 1000
21749: PPUSH
21750: CALL_OW 234
21754: GO 21724
21756: POP
21757: POP
// until p > 20 ;
21758: LD_VAR 0 3
21762: PUSH
21763: LD_INT 20
21765: GREATER
21766: IFFALSE 21693
// end ;
21768: PPOPN 3
21770: END
// every 0 0$1 trigger StreamModeActive and sTime do
21771: LD_EXP 43
21775: PUSH
21776: LD_EXP 94
21780: AND
21781: IFFALSE 21816
21783: GO 21785
21785: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21786: LD_INT 28
21788: PPUSH
21789: LD_OWVAR 2
21793: PPUSH
21794: LD_INT 2
21796: PPUSH
21797: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21801: LD_INT 30
21803: PPUSH
21804: LD_OWVAR 2
21808: PPUSH
21809: LD_INT 2
21811: PPUSH
21812: CALL_OW 322
// end ;
21816: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21817: LD_EXP 43
21821: PUSH
21822: LD_EXP 95
21826: AND
21827: IFFALSE 21948
21829: GO 21831
21831: DISABLE
21832: LD_INT 0
21834: PPUSH
21835: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21836: LD_ADDR_VAR 0 2
21840: PUSH
21841: LD_INT 22
21843: PUSH
21844: LD_OWVAR 2
21848: PUSH
21849: EMPTY
21850: LIST
21851: LIST
21852: PUSH
21853: LD_INT 21
21855: PUSH
21856: LD_INT 1
21858: PUSH
21859: EMPTY
21860: LIST
21861: LIST
21862: PUSH
21863: LD_INT 3
21865: PUSH
21866: LD_INT 23
21868: PUSH
21869: LD_INT 0
21871: PUSH
21872: EMPTY
21873: LIST
21874: LIST
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: LIST
21884: PPUSH
21885: CALL_OW 69
21889: ST_TO_ADDR
// if not tmp then
21890: LD_VAR 0 2
21894: NOT
21895: IFFALSE 21899
// exit ;
21897: GO 21948
// for i in tmp do
21899: LD_ADDR_VAR 0 1
21903: PUSH
21904: LD_VAR 0 2
21908: PUSH
21909: FOR_IN
21910: IFFALSE 21946
// begin if Crawls ( i ) then
21912: LD_VAR 0 1
21916: PPUSH
21917: CALL_OW 318
21921: IFFALSE 21932
// ComWalk ( i ) ;
21923: LD_VAR 0 1
21927: PPUSH
21928: CALL_OW 138
// SetClass ( i , 2 ) ;
21932: LD_VAR 0 1
21936: PPUSH
21937: LD_INT 2
21939: PPUSH
21940: CALL_OW 336
// end ;
21944: GO 21909
21946: POP
21947: POP
// end ;
21948: PPOPN 2
21950: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21951: LD_EXP 43
21955: PUSH
21956: LD_EXP 96
21960: AND
21961: IFFALSE 22242
21963: GO 21965
21965: DISABLE
21966: LD_INT 0
21968: PPUSH
21969: PPUSH
21970: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21971: LD_OWVAR 2
21975: PPUSH
21976: LD_INT 9
21978: PPUSH
21979: LD_INT 1
21981: PPUSH
21982: LD_INT 1
21984: PPUSH
21985: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21989: LD_INT 9
21991: PPUSH
21992: LD_OWVAR 2
21996: PPUSH
21997: CALL_OW 343
// uc_side := 9 ;
22001: LD_ADDR_OWVAR 20
22005: PUSH
22006: LD_INT 9
22008: ST_TO_ADDR
// uc_nation := 2 ;
22009: LD_ADDR_OWVAR 21
22013: PUSH
22014: LD_INT 2
22016: ST_TO_ADDR
// hc_name := Dark Warrior ;
22017: LD_ADDR_OWVAR 26
22021: PUSH
22022: LD_STRING Dark Warrior
22024: ST_TO_ADDR
// hc_gallery :=  ;
22025: LD_ADDR_OWVAR 33
22029: PUSH
22030: LD_STRING 
22032: ST_TO_ADDR
// hc_noskilllimit := true ;
22033: LD_ADDR_OWVAR 76
22037: PUSH
22038: LD_INT 1
22040: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22041: LD_ADDR_OWVAR 31
22045: PUSH
22046: LD_INT 30
22048: PUSH
22049: LD_INT 30
22051: PUSH
22052: LD_INT 30
22054: PUSH
22055: LD_INT 30
22057: PUSH
22058: EMPTY
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: ST_TO_ADDR
// un := CreateHuman ;
22064: LD_ADDR_VAR 0 3
22068: PUSH
22069: CALL_OW 44
22073: ST_TO_ADDR
// hc_noskilllimit := false ;
22074: LD_ADDR_OWVAR 76
22078: PUSH
22079: LD_INT 0
22081: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22082: LD_VAR 0 3
22086: PPUSH
22087: LD_INT 1
22089: PPUSH
22090: CALL_OW 51
// p := 0 ;
22094: LD_ADDR_VAR 0 2
22098: PUSH
22099: LD_INT 0
22101: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22102: LD_INT 35
22104: PPUSH
22105: CALL_OW 67
// p := p + 1 ;
22109: LD_ADDR_VAR 0 2
22113: PUSH
22114: LD_VAR 0 2
22118: PUSH
22119: LD_INT 1
22121: PLUS
22122: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22123: LD_VAR 0 3
22127: PPUSH
22128: CALL_OW 256
22132: PUSH
22133: LD_INT 1000
22135: LESS
22136: IFFALSE 22150
// SetLives ( un , 1000 ) ;
22138: LD_VAR 0 3
22142: PPUSH
22143: LD_INT 1000
22145: PPUSH
22146: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22150: LD_VAR 0 3
22154: PPUSH
22155: LD_INT 81
22157: PUSH
22158: LD_OWVAR 2
22162: PUSH
22163: EMPTY
22164: LIST
22165: LIST
22166: PUSH
22167: LD_INT 91
22169: PUSH
22170: LD_VAR 0 3
22174: PUSH
22175: LD_INT 30
22177: PUSH
22178: EMPTY
22179: LIST
22180: LIST
22181: LIST
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: PPUSH
22187: CALL_OW 69
22191: PPUSH
22192: LD_VAR 0 3
22196: PPUSH
22197: CALL_OW 74
22201: PPUSH
22202: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
22206: LD_VAR 0 2
22210: PUSH
22211: LD_INT 60
22213: GREATER
22214: PUSH
22215: LD_VAR 0 3
22219: PPUSH
22220: CALL_OW 301
22224: OR
22225: IFFALSE 22102
// if un then
22227: LD_VAR 0 3
22231: IFFALSE 22242
// RemoveUnit ( un ) ;
22233: LD_VAR 0 3
22237: PPUSH
22238: CALL_OW 64
// end ; end_of_file
22242: PPOPN 3
22244: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
22245: LD_INT 0
22247: PPUSH
22248: PPUSH
22249: PPUSH
22250: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22251: LD_VAR 0 1
22255: PPUSH
22256: CALL_OW 264
22260: PUSH
22261: LD_EXP 34
22265: EQUAL
22266: IFFALSE 22338
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22268: LD_INT 68
22270: PPUSH
22271: LD_VAR 0 1
22275: PPUSH
22276: CALL_OW 255
22280: PPUSH
22281: CALL_OW 321
22285: PUSH
22286: LD_INT 2
22288: EQUAL
22289: IFFALSE 22301
// eff := 70 else
22291: LD_ADDR_VAR 0 4
22295: PUSH
22296: LD_INT 70
22298: ST_TO_ADDR
22299: GO 22309
// eff := 30 ;
22301: LD_ADDR_VAR 0 4
22305: PUSH
22306: LD_INT 30
22308: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22309: LD_VAR 0 1
22313: PPUSH
22314: CALL_OW 250
22318: PPUSH
22319: LD_VAR 0 1
22323: PPUSH
22324: CALL_OW 251
22328: PPUSH
22329: LD_VAR 0 4
22333: PPUSH
22334: CALL_OW 495
// end ; end ;
22338: LD_VAR 0 2
22342: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22343: LD_INT 0
22345: PPUSH
// end ;
22346: LD_VAR 0 4
22350: RET
// export function SOS_Command ( cmd ) ; begin
22351: LD_INT 0
22353: PPUSH
// end ;
22354: LD_VAR 0 2
22358: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22359: LD_VAR 0 1
22363: PUSH
22364: LD_INT 255
22366: EQUAL
22367: PUSH
22368: LD_VAR 0 2
22372: PPUSH
22373: CALL_OW 264
22377: PUSH
22378: LD_INT 14
22380: PUSH
22381: LD_INT 53
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: IN
22388: AND
22389: PUSH
22390: LD_VAR 0 4
22394: PPUSH
22395: LD_VAR 0 5
22399: PPUSH
22400: CALL_OW 488
22404: AND
22405: IFFALSE 22429
// CutTreeXYR ( unit , x , y , 12 ) ;
22407: LD_VAR 0 2
22411: PPUSH
22412: LD_VAR 0 4
22416: PPUSH
22417: LD_VAR 0 5
22421: PPUSH
22422: LD_INT 12
22424: PPUSH
22425: CALL 22432 0 4
// end ;
22429: PPOPN 5
22431: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22432: LD_INT 0
22434: PPUSH
22435: PPUSH
22436: PPUSH
22437: PPUSH
22438: PPUSH
22439: PPUSH
22440: PPUSH
22441: PPUSH
22442: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
22443: LD_VAR 0 1
22447: NOT
22448: PUSH
22449: LD_VAR 0 2
22453: PPUSH
22454: LD_VAR 0 3
22458: PPUSH
22459: CALL_OW 488
22463: NOT
22464: OR
22465: PUSH
22466: LD_VAR 0 4
22470: NOT
22471: OR
22472: IFFALSE 22476
// exit ;
22474: GO 22816
// list := [ ] ;
22476: LD_ADDR_VAR 0 13
22480: PUSH
22481: EMPTY
22482: ST_TO_ADDR
// if x - r < 0 then
22483: LD_VAR 0 2
22487: PUSH
22488: LD_VAR 0 4
22492: MINUS
22493: PUSH
22494: LD_INT 0
22496: LESS
22497: IFFALSE 22509
// min_x := 0 else
22499: LD_ADDR_VAR 0 7
22503: PUSH
22504: LD_INT 0
22506: ST_TO_ADDR
22507: GO 22525
// min_x := x - r ;
22509: LD_ADDR_VAR 0 7
22513: PUSH
22514: LD_VAR 0 2
22518: PUSH
22519: LD_VAR 0 4
22523: MINUS
22524: ST_TO_ADDR
// if y - r < 0 then
22525: LD_VAR 0 3
22529: PUSH
22530: LD_VAR 0 4
22534: MINUS
22535: PUSH
22536: LD_INT 0
22538: LESS
22539: IFFALSE 22551
// min_y := 0 else
22541: LD_ADDR_VAR 0 8
22545: PUSH
22546: LD_INT 0
22548: ST_TO_ADDR
22549: GO 22567
// min_y := y - r ;
22551: LD_ADDR_VAR 0 8
22555: PUSH
22556: LD_VAR 0 3
22560: PUSH
22561: LD_VAR 0 4
22565: MINUS
22566: ST_TO_ADDR
// max_x := x + r ;
22567: LD_ADDR_VAR 0 9
22571: PUSH
22572: LD_VAR 0 2
22576: PUSH
22577: LD_VAR 0 4
22581: PLUS
22582: ST_TO_ADDR
// max_y := y + r ;
22583: LD_ADDR_VAR 0 10
22587: PUSH
22588: LD_VAR 0 3
22592: PUSH
22593: LD_VAR 0 4
22597: PLUS
22598: ST_TO_ADDR
// for _x = min_x to max_x do
22599: LD_ADDR_VAR 0 11
22603: PUSH
22604: DOUBLE
22605: LD_VAR 0 7
22609: DEC
22610: ST_TO_ADDR
22611: LD_VAR 0 9
22615: PUSH
22616: FOR_TO
22617: IFFALSE 22734
// for _y = min_y to max_y do
22619: LD_ADDR_VAR 0 12
22623: PUSH
22624: DOUBLE
22625: LD_VAR 0 8
22629: DEC
22630: ST_TO_ADDR
22631: LD_VAR 0 10
22635: PUSH
22636: FOR_TO
22637: IFFALSE 22730
// begin if not ValidHex ( _x , _y ) then
22639: LD_VAR 0 11
22643: PPUSH
22644: LD_VAR 0 12
22648: PPUSH
22649: CALL_OW 488
22653: NOT
22654: IFFALSE 22658
// continue ;
22656: GO 22636
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22658: LD_VAR 0 11
22662: PPUSH
22663: LD_VAR 0 12
22667: PPUSH
22668: CALL_OW 351
22672: PUSH
22673: LD_VAR 0 11
22677: PPUSH
22678: LD_VAR 0 12
22682: PPUSH
22683: CALL_OW 554
22687: AND
22688: IFFALSE 22728
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22690: LD_ADDR_VAR 0 13
22694: PUSH
22695: LD_VAR 0 13
22699: PPUSH
22700: LD_VAR 0 13
22704: PUSH
22705: LD_INT 1
22707: PLUS
22708: PPUSH
22709: LD_VAR 0 11
22713: PUSH
22714: LD_VAR 0 12
22718: PUSH
22719: EMPTY
22720: LIST
22721: LIST
22722: PPUSH
22723: CALL_OW 2
22727: ST_TO_ADDR
// end ;
22728: GO 22636
22730: POP
22731: POP
22732: GO 22616
22734: POP
22735: POP
// if not list then
22736: LD_VAR 0 13
22740: NOT
22741: IFFALSE 22745
// exit ;
22743: GO 22816
// for i in list do
22745: LD_ADDR_VAR 0 6
22749: PUSH
22750: LD_VAR 0 13
22754: PUSH
22755: FOR_IN
22756: IFFALSE 22814
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22758: LD_VAR 0 1
22762: PPUSH
22763: LD_STRING M
22765: PUSH
22766: LD_VAR 0 6
22770: PUSH
22771: LD_INT 1
22773: ARRAY
22774: PUSH
22775: LD_VAR 0 6
22779: PUSH
22780: LD_INT 2
22782: ARRAY
22783: PUSH
22784: LD_INT 0
22786: PUSH
22787: LD_INT 0
22789: PUSH
22790: LD_INT 0
22792: PUSH
22793: LD_INT 0
22795: PUSH
22796: EMPTY
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: PUSH
22805: EMPTY
22806: LIST
22807: PPUSH
22808: CALL_OW 447
22812: GO 22755
22814: POP
22815: POP
// end ;
22816: LD_VAR 0 5
22820: RET
