// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 46 0 0
// CreateNature ;
  19: CALL 537 0 0
// PrepareAmericans ;
  23: CALL 834 0 0
// PrepareArabian ;
  27: CALL 11922 0 0
// if debug then
  31: LD_EXP 1
  35: IFFALSE 41
// DebugMode ;
  37: CALL 218 0 0
// Action ;
  41: CALL 4753 0 0
// end ;
  45: END
// export debug , prefix , missionStart , aviradzeSpotted , deltaSpotted , spottedBeforeRadio , sciSpotted , aviradzeQuestDone , sciCounterKill , usAlert , usActiveDefend , gladstoneEscaped , timeUntilFarmer , attackDeltaAllowed , trickyMove , usPatrol , trap , lostCounter ; function Init ; begin
  46: LD_INT 0
  48: PPUSH
// debug := false ;
  49: LD_ADDR_EXP 1
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// missionStart := false ;
  57: LD_ADDR_EXP 3
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// aviradzeSpotted := false ;
  65: LD_ADDR_EXP 4
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// deltaSpotted := false ;
  73: LD_ADDR_EXP 5
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// sciSpotted := false ;
  81: LD_ADDR_EXP 7
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// sciCounterKill := 0 ;
  89: LD_ADDR_EXP 9
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// aviradzeQuestDone := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// attackDeltaAllowed := false ;
 105: LD_ADDR_EXP 14
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usAlert := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// usActiveDefend := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// usPatrol := [ ] ;
 129: LD_ADDR_EXP 16
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// timeUntilFarmer := [ 40 40$00 , 30 30$00 , 20 20$00 , 15 15$00 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 13
 140: PUSH
 141: LD_INT 84000
 143: PUSH
 144: LD_INT 63000
 146: PUSH
 147: LD_INT 42000
 149: PUSH
 150: LD_INT 31500
 152: PUSH
 153: EMPTY
 154: LIST
 155: LIST
 156: LIST
 157: LIST
 158: PUSH
 159: LD_OWVAR 67
 163: ARRAY
 164: ST_TO_ADDR
// trickyMove := false ;
 165: LD_ADDR_EXP 15
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// gladstoneEscaped := false ;
 173: LD_ADDR_EXP 12
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// prefix := 01_ ;
 181: LD_ADDR_EXP 2
 185: PUSH
 186: LD_STRING 01_
 188: ST_TO_ADDR
// trap := 0 ;
 189: LD_ADDR_EXP 17
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// lostCounter := false ;
 197: LD_ADDR_EXP 18
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// spottedBeforeRadio := false ;
 205: LD_ADDR_EXP 6
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// end ;
 213: LD_VAR 0 1
 217: RET
// function DebugMode ; begin
 218: LD_INT 0
 220: PPUSH
// FogOff ( 1 ) ;
 221: LD_INT 1
 223: PPUSH
 224: CALL_OW 344
// Difficulty := 2 ;
 228: LD_ADDR_OWVAR 67
 232: PUSH
 233: LD_INT 2
 235: ST_TO_ADDR
// end ; end_of_file
 236: LD_VAR 0 1
 240: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 241: LD_INT 0
 243: PPUSH
// uc_side := side ;
 244: LD_ADDR_OWVAR 20
 248: PUSH
 249: LD_VAR 0 1
 253: ST_TO_ADDR
// uc_nation := nation ;
 254: LD_ADDR_OWVAR 21
 258: PUSH
 259: LD_VAR 0 2
 263: ST_TO_ADDR
// vc_chassis := chassis ;
 264: LD_ADDR_OWVAR 37
 268: PUSH
 269: LD_VAR 0 3
 273: ST_TO_ADDR
// vc_engine := engine ;
 274: LD_ADDR_OWVAR 39
 278: PUSH
 279: LD_VAR 0 4
 283: ST_TO_ADDR
// vc_control := control ;
 284: LD_ADDR_OWVAR 38
 288: PUSH
 289: LD_VAR 0 5
 293: ST_TO_ADDR
// vc_weapon := weapon ;
 294: LD_ADDR_OWVAR 40
 298: PUSH
 299: LD_VAR 0 6
 303: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 304: LD_ADDR_OWVAR 41
 308: PUSH
 309: LD_VAR 0 7
 313: ST_TO_ADDR
// result := CreateVehicle ;
 314: LD_ADDR_VAR 0 8
 318: PUSH
 319: CALL_OW 45
 323: ST_TO_ADDR
// end ;
 324: LD_VAR 0 8
 328: RET
// export function SayX ( units , ident ) ; var i ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
// result := false ;
 333: LD_ADDR_VAR 0 3
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// if not units then
 341: LD_VAR 0 1
 345: NOT
 346: IFFALSE 350
// exit ;
 348: GO 404
// for i in units do
 350: LD_ADDR_VAR 0 4
 354: PUSH
 355: LD_VAR 0 1
 359: PUSH
 360: FOR_IN
 361: IFFALSE 402
// if IsOk ( i ) then
 363: LD_VAR 0 4
 367: PPUSH
 368: CALL_OW 302
 372: IFFALSE 400
// begin Say ( i , ident ) ;
 374: LD_VAR 0 4
 378: PPUSH
 379: LD_VAR 0 2
 383: PPUSH
 384: CALL_OW 88
// result := i ;
 388: LD_ADDR_VAR 0 3
 392: PUSH
 393: LD_VAR 0 4
 397: ST_TO_ADDR
// break ;
 398: GO 402
// end ;
 400: GO 360
 402: POP
 403: POP
// end ;
 404: LD_VAR 0 3
 408: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 409: LD_INT 0
 411: PPUSH
 412: PPUSH
// InitUc ;
 413: CALL_OW 18
// InitHc ;
 417: CALL_OW 19
// uc_side := 0 ;
 421: LD_ADDR_OWVAR 20
 425: PUSH
 426: LD_INT 0
 428: ST_TO_ADDR
// uc_nation := 0 ;
 429: LD_ADDR_OWVAR 21
 433: PUSH
 434: LD_INT 0
 436: ST_TO_ADDR
// for i = 1 to amount do
 437: LD_ADDR_VAR 0 4
 441: PUSH
 442: DOUBLE
 443: LD_INT 1
 445: DEC
 446: ST_TO_ADDR
 447: LD_VAR 0 2
 451: PUSH
 452: FOR_TO
 453: IFFALSE 526
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 455: LD_ADDR_OWVAR 29
 459: PUSH
 460: LD_INT 9
 462: PPUSH
 463: LD_INT 12
 465: PPUSH
 466: CALL_OW 12
 470: PUSH
 471: LD_INT 9
 473: PPUSH
 474: LD_INT 12
 476: PPUSH
 477: CALL_OW 12
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: ST_TO_ADDR
// hc_agressivity := 0 ;
 486: LD_ADDR_OWVAR 35
 490: PUSH
 491: LD_INT 0
 493: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 494: LD_INT 0
 496: PPUSH
 497: LD_INT 12
 499: PPUSH
 500: LD_INT 1
 502: PPUSH
 503: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 507: CALL_OW 44
 511: PPUSH
 512: LD_VAR 0 1
 516: PPUSH
 517: LD_INT 0
 519: PPUSH
 520: CALL_OW 49
// end ;
 524: GO 452
 526: POP
 527: POP
// InitHc ;
 528: CALL_OW 19
// end ;
 532: LD_VAR 0 3
 536: RET
// export function CreateNature ; var i ; begin
 537: LD_INT 0
 539: PPUSH
 540: PPUSH
// SpawnApeman ( forest , 9 ) ;
 541: LD_INT 1
 543: PPUSH
 544: LD_INT 9
 546: PPUSH
 547: CALL 409 0 2
// for i := 1 to 4 do
 551: LD_ADDR_VAR 0 2
 555: PUSH
 556: DOUBLE
 557: LD_INT 1
 559: DEC
 560: ST_TO_ADDR
 561: LD_INT 4
 563: PUSH
 564: FOR_TO
 565: IFFALSE 600
// begin hc_class := 21 ;
 567: LD_ADDR_OWVAR 28
 571: PUSH
 572: LD_INT 21
 574: ST_TO_ADDR
// hc_gallery :=  ;
 575: LD_ADDR_OWVAR 33
 579: PUSH
 580: LD_STRING 
 582: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 583: CALL_OW 44
 587: PPUSH
 588: LD_INT 1
 590: PPUSH
 591: LD_INT 0
 593: PPUSH
 594: CALL_OW 49
// end ;
 598: GO 564
 600: POP
 601: POP
// for i := 1 to 2 do
 602: LD_ADDR_VAR 0 2
 606: PUSH
 607: DOUBLE
 608: LD_INT 1
 610: DEC
 611: ST_TO_ADDR
 612: LD_INT 2
 614: PUSH
 615: FOR_TO
 616: IFFALSE 651
// begin hc_class := 18 ;
 618: LD_ADDR_OWVAR 28
 622: PUSH
 623: LD_INT 18
 625: ST_TO_ADDR
// hc_gallery :=  ;
 626: LD_ADDR_OWVAR 33
 630: PUSH
 631: LD_STRING 
 633: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 634: CALL_OW 44
 638: PPUSH
 639: LD_INT 1
 641: PPUSH
 642: LD_INT 0
 644: PPUSH
 645: CALL_OW 49
// end ;
 649: GO 615
 651: POP
 652: POP
// for i := 1 to 3 do
 653: LD_ADDR_VAR 0 2
 657: PUSH
 658: DOUBLE
 659: LD_INT 1
 661: DEC
 662: ST_TO_ADDR
 663: LD_INT 3
 665: PUSH
 666: FOR_TO
 667: IFFALSE 702
// begin hc_class := 13 ;
 669: LD_ADDR_OWVAR 28
 673: PUSH
 674: LD_INT 13
 676: ST_TO_ADDR
// hc_gallery :=  ;
 677: LD_ADDR_OWVAR 33
 681: PUSH
 682: LD_STRING 
 684: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 685: CALL_OW 44
 689: PPUSH
 690: LD_INT 1
 692: PPUSH
 693: LD_INT 0
 695: PPUSH
 696: CALL_OW 49
// end ;
 700: GO 666
 702: POP
 703: POP
// for i := 1 to 4 do
 704: LD_ADDR_VAR 0 2
 708: PUSH
 709: DOUBLE
 710: LD_INT 1
 712: DEC
 713: ST_TO_ADDR
 714: LD_INT 4
 716: PUSH
 717: FOR_TO
 718: IFFALSE 753
// begin hc_class := class_frog ;
 720: LD_ADDR_OWVAR 28
 724: PUSH
 725: LD_INT 19
 727: ST_TO_ADDR
// hc_gallery :=  ;
 728: LD_ADDR_OWVAR 33
 732: PUSH
 733: LD_STRING 
 735: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 736: CALL_OW 44
 740: PPUSH
 741: LD_INT 8
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: CALL_OW 49
// end ;
 751: GO 717
 753: POP
 754: POP
// end ;
 755: LD_VAR 0 1
 759: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 760: LD_INT 0
 762: PPUSH
 763: PPUSH
 764: PPUSH
// if not observer or not unit then
 765: LD_VAR 0 1
 769: NOT
 770: PUSH
 771: LD_VAR 0 2
 775: NOT
 776: OR
 777: IFFALSE 781
// exit ;
 779: GO 829
// if not See ( GetSide ( observer ) , unit ) then
 781: LD_VAR 0 1
 785: PPUSH
 786: CALL_OW 255
 790: PPUSH
 791: LD_VAR 0 2
 795: PPUSH
 796: CALL_OW 292
 800: NOT
 801: IFFALSE 805
// exit ;
 803: GO 829
// result := GetDistUnits ( observer , unit ) < 12 ;
 805: LD_ADDR_VAR 0 3
 809: PUSH
 810: LD_VAR 0 1
 814: PPUSH
 815: LD_VAR 0 2
 819: PPUSH
 820: CALL_OW 296
 824: PUSH
 825: LD_INT 12
 827: LESS
 828: ST_TO_ADDR
// end ; end_of_file
 829: LD_VAR 0 3
 833: RET
// export Gladstone , Lynch ; export usForces , usSci ; export function PrepareAmericans ; var i , un , veh , tmp , arm ; begin
 834: LD_INT 0
 836: PPUSH
 837: PPUSH
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
// usForces := [ ] ;
 842: LD_ADDR_EXP 21
 846: PUSH
 847: EMPTY
 848: ST_TO_ADDR
// usSci := [ ] ;
 849: LD_ADDR_EXP 22
 853: PUSH
 854: EMPTY
 855: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
 856: LD_INT 1
 858: PPUSH
 859: LD_STRING Delta
 861: PPUSH
 862: CALL_OW 500
// SetResourceType ( GetBase ( Delta ) , mat_cans , 400 ) ;
 866: LD_INT 1
 868: PPUSH
 869: CALL_OW 274
 873: PPUSH
 874: LD_INT 1
 876: PPUSH
 877: LD_INT 400
 879: PPUSH
 880: CALL_OW 277
// SetResourceType ( GetBase ( Delta ) , mat_oil , 80 ) ;
 884: LD_INT 1
 886: PPUSH
 887: CALL_OW 274
 891: PPUSH
 892: LD_INT 2
 894: PPUSH
 895: LD_INT 80
 897: PPUSH
 898: CALL_OW 277
// uc_side := 1 ;
 902: LD_ADDR_OWVAR 20
 906: PUSH
 907: LD_INT 1
 909: ST_TO_ADDR
// uc_nation := 1 ;
 910: LD_ADDR_OWVAR 21
 914: PUSH
 915: LD_INT 1
 917: ST_TO_ADDR
// InitHc ;
 918: CALL_OW 19
// hc_importance := 0 ;
 922: LD_ADDR_OWVAR 32
 926: PUSH
 927: LD_INT 0
 929: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
 930: LD_ADDR_EXP 20
 934: PUSH
 935: LD_STRING Lynch
 937: PPUSH
 938: LD_INT 0
 940: PPUSH
 941: LD_STRING 
 943: PPUSH
 944: CALL 33738 0 3
 948: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false ,  ) ;
 949: LD_ADDR_EXP 19
 953: PUSH
 954: LD_STRING Gladstone
 956: PPUSH
 957: LD_INT 0
 959: PPUSH
 960: LD_STRING 
 962: PPUSH
 963: CALL 33738 0 3
 967: ST_TO_ADDR
// PlaceHumanInUnit ( Lynch , Delta ) ;
 968: LD_EXP 20
 972: PPUSH
 973: LD_INT 1
 975: PPUSH
 976: CALL_OW 52
// PlaceHumanInUnit ( Gladstone , usLab ) ;
 980: LD_EXP 19
 984: PPUSH
 985: LD_INT 3
 987: PPUSH
 988: CALL_OW 52
// for i := 1 to [ 1 , 2 , 2 , 2 ] [ Difficulty ] do
 992: LD_ADDR_VAR 0 2
 996: PUSH
 997: DOUBLE
 998: LD_INT 1
1000: DEC
1001: ST_TO_ADDR
1002: LD_INT 1
1004: PUSH
1005: LD_INT 2
1007: PUSH
1008: LD_INT 2
1010: PUSH
1011: LD_INT 2
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: LIST
1018: LIST
1019: PUSH
1020: LD_OWVAR 67
1024: ARRAY
1025: PUSH
1026: FOR_TO
1027: IFFALSE 1077
// begin PrepareHuman ( false , 2 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
1029: LD_INT 0
1031: PPUSH
1032: LD_INT 2
1034: PPUSH
1035: LD_INT 1
1037: PUSH
1038: LD_INT 2
1040: PUSH
1041: LD_INT 2
1043: PUSH
1044: LD_INT 3
1046: PUSH
1047: EMPTY
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: LD_OWVAR 67
1057: ARRAY
1058: PPUSH
1059: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , Delta ) ;
1063: CALL_OW 44
1067: PPUSH
1068: LD_INT 1
1070: PPUSH
1071: CALL_OW 52
// end ;
1075: GO 1026
1077: POP
1078: POP
// for i := 1 to 7 - Difficulty do
1079: LD_ADDR_VAR 0 2
1083: PUSH
1084: DOUBLE
1085: LD_INT 1
1087: DEC
1088: ST_TO_ADDR
1089: LD_INT 7
1091: PUSH
1092: LD_OWVAR 67
1096: MINUS
1097: PUSH
1098: FOR_TO
1099: IFFALSE 1188
// begin PrepareHuman ( false , 4 , [ 1 , 2 , 2 , 2 ] [ Difficulty ] ) ;
1101: LD_INT 0
1103: PPUSH
1104: LD_INT 4
1106: PPUSH
1107: LD_INT 1
1109: PUSH
1110: LD_INT 2
1112: PUSH
1113: LD_INT 2
1115: PUSH
1116: LD_INT 2
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: LIST
1123: LIST
1124: PUSH
1125: LD_OWVAR 67
1129: ARRAY
1130: PPUSH
1131: CALL_OW 380
// un := CreateHuman ;
1135: LD_ADDR_VAR 0 3
1139: PUSH
1140: CALL_OW 44
1144: ST_TO_ADDR
// PlaceHumanInUnit ( un , usLab ) ;
1145: LD_VAR 0 3
1149: PPUSH
1150: LD_INT 3
1152: PPUSH
1153: CALL_OW 52
// usSci := Replace ( usSci , usSci + 1 , un ) ;
1157: LD_ADDR_EXP 22
1161: PUSH
1162: LD_EXP 22
1166: PPUSH
1167: LD_EXP 22
1171: PUSH
1172: LD_INT 1
1174: PLUS
1175: PPUSH
1176: LD_VAR 0 3
1180: PPUSH
1181: CALL_OW 1
1185: ST_TO_ADDR
// end ;
1186: GO 1098
1188: POP
1189: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
1190: LD_ADDR_VAR 0 6
1194: PUSH
1195: LD_INT 22
1197: PUSH
1198: LD_INT 1
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: PUSH
1205: LD_INT 30
1207: PUSH
1208: LD_INT 4
1210: PUSH
1211: EMPTY
1212: LIST
1213: LIST
1214: PUSH
1215: EMPTY
1216: LIST
1217: LIST
1218: PPUSH
1219: CALL_OW 69
1223: ST_TO_ADDR
// for i := 1 to 3 + [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
1224: LD_ADDR_VAR 0 2
1228: PUSH
1229: DOUBLE
1230: LD_INT 1
1232: DEC
1233: ST_TO_ADDR
1234: LD_INT 3
1236: PUSH
1237: LD_INT 1
1239: PUSH
1240: LD_INT 2
1242: PUSH
1243: LD_INT 2
1245: PUSH
1246: LD_INT 3
1248: PUSH
1249: EMPTY
1250: LIST
1251: LIST
1252: LIST
1253: LIST
1254: PUSH
1255: LD_OWVAR 67
1259: ARRAY
1260: PLUS
1261: PUSH
1262: FOR_TO
1263: IFFALSE 1345
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
1265: LD_INT 0
1267: PPUSH
1268: LD_INT 1
1270: PPUSH
1271: LD_INT 1
1273: PUSH
1274: LD_INT 2
1276: PUSH
1277: LD_INT 3
1279: PUSH
1280: LD_INT 3
1282: PUSH
1283: EMPTY
1284: LIST
1285: LIST
1286: LIST
1287: LIST
1288: PUSH
1289: LD_OWVAR 67
1293: ARRAY
1294: PPUSH
1295: CALL_OW 380
// un := CreateHuman ;
1299: LD_ADDR_VAR 0 3
1303: PUSH
1304: CALL_OW 44
1308: ST_TO_ADDR
// usForces := usForces ^ un ;
1309: LD_ADDR_EXP 21
1313: PUSH
1314: LD_EXP 21
1318: PUSH
1319: LD_VAR 0 3
1323: ADD
1324: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm [ 1 ] ) ;
1325: LD_VAR 0 3
1329: PPUSH
1330: LD_VAR 0 6
1334: PUSH
1335: LD_INT 1
1337: ARRAY
1338: PPUSH
1339: CALL_OW 52
// end ;
1343: GO 1262
1345: POP
1346: POP
// if Difficulty > 1 then
1347: LD_OWVAR 67
1351: PUSH
1352: LD_INT 1
1354: GREATER
1355: IFFALSE 1454
// begin for i := 1 to Difficulty do
1357: LD_ADDR_VAR 0 2
1361: PUSH
1362: DOUBLE
1363: LD_INT 1
1365: DEC
1366: ST_TO_ADDR
1367: LD_OWVAR 67
1371: PUSH
1372: FOR_TO
1373: IFFALSE 1452
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
1375: LD_INT 0
1377: PPUSH
1378: LD_INT 1
1380: PPUSH
1381: LD_INT 1
1383: PUSH
1384: LD_INT 2
1386: PUSH
1387: LD_INT 2
1389: PUSH
1390: LD_INT 3
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: PUSH
1399: LD_OWVAR 67
1403: ARRAY
1404: PPUSH
1405: CALL_OW 380
// un := CreateHuman ;
1409: LD_ADDR_VAR 0 3
1413: PUSH
1414: CALL_OW 44
1418: ST_TO_ADDR
// usForces := usForces ^ un ;
1419: LD_ADDR_EXP 21
1423: PUSH
1424: LD_EXP 21
1428: PUSH
1429: LD_VAR 0 3
1433: ADD
1434: ST_TO_ADDR
// PlaceUnitArea ( un , usAdditionalDefenceArea , false ) ;
1435: LD_VAR 0 3
1439: PPUSH
1440: LD_INT 9
1442: PPUSH
1443: LD_INT 0
1445: PPUSH
1446: CALL_OW 49
// end ;
1450: GO 1372
1452: POP
1453: POP
// end ; PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 100 ) ;
1454: LD_INT 1
1456: PPUSH
1457: LD_INT 1
1459: PPUSH
1460: LD_INT 1
1462: PPUSH
1463: LD_INT 2
1465: PPUSH
1466: LD_INT 1
1468: PPUSH
1469: LD_INT 2
1471: PPUSH
1472: LD_INT 100
1474: PPUSH
1475: CALL 241 0 7
// veh := CreateVehicle ;
1479: LD_ADDR_VAR 0 4
1483: PUSH
1484: CALL_OW 45
1488: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1489: LD_VAR 0 4
1493: PPUSH
1494: LD_INT 2
1496: PPUSH
1497: CALL_OW 233
// PlaceUnitXY ( veh , 43 , 24 , false ) ;
1501: LD_VAR 0 4
1505: PPUSH
1506: LD_INT 43
1508: PPUSH
1509: LD_INT 24
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: CALL_OW 48
// end ;
1519: LD_VAR 0 1
1523: RET
// export function SendSciToForest ; var i , j , k , tmp , xy ; begin
1524: LD_INT 0
1526: PPUSH
1527: PPUSH
1528: PPUSH
1529: PPUSH
1530: PPUSH
1531: PPUSH
// if not usSci then
1532: LD_EXP 22
1536: NOT
1537: IFFALSE 1541
// exit ;
1539: GO 1715
// xy := AreaToList ( tameArea , 0 ) ;
1541: LD_ADDR_VAR 0 6
1545: PUSH
1546: LD_INT 5
1548: PPUSH
1549: LD_INT 0
1551: PPUSH
1552: CALL_OW 517
1556: ST_TO_ADDR
// for i in usSci do
1557: LD_ADDR_VAR 0 2
1561: PUSH
1562: LD_EXP 22
1566: PUSH
1567: FOR_IN
1568: IFFALSE 1713
// begin k := rand ( 1 , xy [ 1 ] ) ;
1570: LD_ADDR_VAR 0 4
1574: PUSH
1575: LD_INT 1
1577: PPUSH
1578: LD_VAR 0 6
1582: PUSH
1583: LD_INT 1
1585: ARRAY
1586: PPUSH
1587: CALL_OW 12
1591: ST_TO_ADDR
// ComExitBuilding ( i ) ;
1592: LD_VAR 0 2
1596: PPUSH
1597: CALL_OW 122
// AddComMoveXY ( i , xy [ 1 ] [ k ] , xy [ 2 ] [ k ] ) ;
1601: LD_VAR 0 2
1605: PPUSH
1606: LD_VAR 0 6
1610: PUSH
1611: LD_INT 1
1613: ARRAY
1614: PUSH
1615: LD_VAR 0 4
1619: ARRAY
1620: PPUSH
1621: LD_VAR 0 6
1625: PUSH
1626: LD_INT 2
1628: ARRAY
1629: PUSH
1630: LD_VAR 0 4
1634: ARRAY
1635: PPUSH
1636: CALL_OW 171
// for j := 1 to 2 do
1640: LD_ADDR_VAR 0 3
1644: PUSH
1645: DOUBLE
1646: LD_INT 1
1648: DEC
1649: ST_TO_ADDR
1650: LD_INT 2
1652: PUSH
1653: FOR_TO
1654: IFFALSE 1709
// begin tmp := Delete ( xy [ j ] , k ) ;
1656: LD_ADDR_VAR 0 5
1660: PUSH
1661: LD_VAR 0 6
1665: PUSH
1666: LD_VAR 0 3
1670: ARRAY
1671: PPUSH
1672: LD_VAR 0 4
1676: PPUSH
1677: CALL_OW 3
1681: ST_TO_ADDR
// xy := Replace ( xy , j , tmp ) ;
1682: LD_ADDR_VAR 0 6
1686: PUSH
1687: LD_VAR 0 6
1691: PPUSH
1692: LD_VAR 0 3
1696: PPUSH
1697: LD_VAR 0 5
1701: PPUSH
1702: CALL_OW 1
1706: ST_TO_ADDR
// end ;
1707: GO 1653
1709: POP
1710: POP
// end ;
1711: GO 1567
1713: POP
1714: POP
// end ;
1715: LD_VAR 0 1
1719: RET
// every 0 0$5 + 0 0$10 trigger aviradzeSpotted and usSci and not usAlert and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do var i , x , y , d , ape ;
1720: LD_EXP 4
1724: PUSH
1725: LD_EXP 22
1729: AND
1730: PUSH
1731: LD_EXP 10
1735: NOT
1736: AND
1737: PUSH
1738: LD_INT 22
1740: PUSH
1741: LD_INT 0
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: LD_INT 25
1750: PUSH
1751: LD_INT 12
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: PPUSH
1762: CALL_OW 69
1766: AND
1767: IFFALSE 2271
1769: GO 1771
1771: DISABLE
1772: LD_INT 0
1774: PPUSH
1775: PPUSH
1776: PPUSH
1777: PPUSH
1778: PPUSH
// begin enable ;
1779: ENABLE
// if UnitFilter ( usSci , [ f_or , [ f_hastask ] , [ f_inside ] ] ) then
1780: LD_EXP 22
1784: PPUSH
1785: LD_INT 2
1787: PUSH
1788: LD_INT 60
1790: PUSH
1791: EMPTY
1792: LIST
1793: PUSH
1794: LD_INT 54
1796: PUSH
1797: EMPTY
1798: LIST
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: LIST
1804: PPUSH
1805: CALL_OW 72
1809: IFFALSE 1813
// exit ;
1811: GO 2271
// for i in usSci do
1813: LD_ADDR_VAR 0 1
1817: PUSH
1818: LD_EXP 22
1822: PUSH
1823: FOR_IN
1824: IFFALSE 2269
// begin if not HasTask ( i ) and GetLives ( i ) = 1000 then
1826: LD_VAR 0 1
1830: PPUSH
1831: CALL_OW 314
1835: NOT
1836: PUSH
1837: LD_VAR 0 1
1841: PPUSH
1842: CALL_OW 256
1846: PUSH
1847: LD_INT 1000
1849: EQUAL
1850: AND
1851: IFFALSE 2058
// begin ape := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) , i ) ;
1853: LD_ADDR_VAR 0 5
1857: PUSH
1858: LD_INT 22
1860: PUSH
1861: LD_INT 0
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: LD_INT 25
1870: PUSH
1871: LD_INT 12
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: PPUSH
1882: CALL_OW 69
1886: PPUSH
1887: LD_VAR 0 1
1891: PPUSH
1892: CALL_OW 74
1896: ST_TO_ADDR
// if GetDistUnits ( i , ape ) < 10 then
1897: LD_VAR 0 1
1901: PPUSH
1902: LD_VAR 0 5
1906: PPUSH
1907: CALL_OW 296
1911: PUSH
1912: LD_INT 10
1914: LESS
1915: IFFALSE 1948
// ComTameXY ( i , GetX ( ape ) , GetY ( ape ) ) else
1917: LD_VAR 0 1
1921: PPUSH
1922: LD_VAR 0 5
1926: PPUSH
1927: CALL_OW 250
1931: PPUSH
1932: LD_VAR 0 5
1936: PPUSH
1937: CALL_OW 251
1941: PPUSH
1942: CALL_OW 131
1946: GO 2058
// begin d := rand ( 0 , 5 ) ;
1948: LD_ADDR_VAR 0 4
1952: PUSH
1953: LD_INT 0
1955: PPUSH
1956: LD_INT 5
1958: PPUSH
1959: CALL_OW 12
1963: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 3 ) ;
1964: LD_ADDR_VAR 0 2
1968: PUSH
1969: LD_VAR 0 1
1973: PPUSH
1974: CALL_OW 250
1978: PPUSH
1979: LD_VAR 0 4
1983: PPUSH
1984: LD_INT 3
1986: PPUSH
1987: CALL_OW 272
1991: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 3 ) ;
1992: LD_ADDR_VAR 0 3
1996: PUSH
1997: LD_VAR 0 1
2001: PPUSH
2002: CALL_OW 251
2006: PPUSH
2007: LD_VAR 0 4
2011: PPUSH
2012: LD_INT 3
2014: PPUSH
2015: CALL_OW 273
2019: ST_TO_ADDR
// if not ValidHex ( x , y ) then
2020: LD_VAR 0 2
2024: PPUSH
2025: LD_VAR 0 3
2029: PPUSH
2030: CALL_OW 488
2034: NOT
2035: IFFALSE 2039
// continue ;
2037: GO 1823
// ComMoveXY ( i , x , y ) ;
2039: LD_VAR 0 1
2043: PPUSH
2044: LD_VAR 0 2
2048: PPUSH
2049: LD_VAR 0 3
2053: PPUSH
2054: CALL_OW 111
// end ; end ; if GetLives ( i ) < 900 and GetDistUnitXY ( i , 37 , 23 ) > 10 then
2058: LD_VAR 0 1
2062: PPUSH
2063: CALL_OW 256
2067: PUSH
2068: LD_INT 900
2070: LESS
2071: PUSH
2072: LD_VAR 0 1
2076: PPUSH
2077: LD_INT 37
2079: PPUSH
2080: LD_INT 23
2082: PPUSH
2083: CALL_OW 297
2087: PUSH
2088: LD_INT 10
2090: GREATER
2091: AND
2092: IFFALSE 2180
// begin SetTag ( Gladstone , 1 ) ;
2094: LD_EXP 19
2098: PPUSH
2099: LD_INT 1
2101: PPUSH
2102: CALL_OW 109
// if IsOk ( Gladstone ) and IsInUnit ( Gladstone ) then
2106: LD_EXP 19
2110: PPUSH
2111: CALL_OW 302
2115: PUSH
2116: LD_EXP 19
2120: PPUSH
2121: CALL_OW 310
2125: AND
2126: IFFALSE 2137
// ComExitBuilding ( Gladstone ) ;
2128: LD_EXP 19
2132: PPUSH
2133: CALL_OW 122
// AddComHeal ( Gladstone , i ) ;
2137: LD_EXP 19
2141: PPUSH
2142: LD_VAR 0 1
2146: PPUSH
2147: CALL_OW 188
// AddComEnterUnit ( Gladstone , usLab ) ;
2151: LD_EXP 19
2155: PPUSH
2156: LD_INT 3
2158: PPUSH
2159: CALL_OW 180
// ComMoveXY ( i , 37 , 23 ) ;
2163: LD_VAR 0 1
2167: PPUSH
2168: LD_INT 37
2170: PPUSH
2171: LD_INT 23
2173: PPUSH
2174: CALL_OW 111
// end else
2178: GO 2267
// if GetLives ( i ) = 1000 then
2180: LD_VAR 0 1
2184: PPUSH
2185: CALL_OW 256
2189: PUSH
2190: LD_INT 1000
2192: EQUAL
2193: IFFALSE 2267
// begin if SideShoot ( i ) = 2 then
2195: LD_VAR 0 1
2199: PPUSH
2200: CALL_OW 503
2204: PUSH
2205: LD_INT 2
2207: EQUAL
2208: IFFALSE 2255
// begin if not usAlert then
2210: LD_EXP 10
2214: NOT
2215: IFFALSE 2225
// usAlert := true ;
2217: LD_ADDR_EXP 10
2221: PUSH
2222: LD_INT 1
2224: ST_TO_ADDR
// AddComEnterUnit ( i , usLab ) ;
2225: LD_VAR 0 1
2229: PPUSH
2230: LD_INT 3
2232: PPUSH
2233: CALL_OW 180
// usSci := usSci diff i ;
2237: LD_ADDR_EXP 22
2241: PUSH
2242: LD_EXP 22
2246: PUSH
2247: LD_VAR 0 1
2251: DIFF
2252: ST_TO_ADDR
// end else
2253: GO 2267
// ComMoveToArea ( i , tameArea ) ;
2255: LD_VAR 0 1
2259: PPUSH
2260: LD_INT 5
2262: PPUSH
2263: CALL_OW 113
// end ; end ;
2267: GO 1823
2269: POP
2270: POP
// end ;
2271: PPOPN 5
2273: END
// every 0 0$1 trigger GetTag ( Gladstone ) = 1 and not IsInUnit ( Gladstone ) and not usAlert do
2274: LD_EXP 19
2278: PPUSH
2279: CALL_OW 110
2283: PUSH
2284: LD_INT 1
2286: EQUAL
2287: PUSH
2288: LD_EXP 19
2292: PPUSH
2293: CALL_OW 310
2297: NOT
2298: AND
2299: PUSH
2300: LD_EXP 10
2304: NOT
2305: AND
2306: IFFALSE 2323
2308: GO 2310
2310: DISABLE
// ComEnterUnit ( Gladstone , usLab ) ;
2311: LD_EXP 19
2315: PPUSH
2316: LD_INT 3
2318: PPUSH
2319: CALL_OW 120
2323: END
// every 0 0$1 trigger not usAlert and ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 999 ] ] ] ) or FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) ) do
2324: LD_EXP 10
2328: NOT
2329: PUSH
2330: LD_INT 22
2332: PUSH
2333: LD_INT 1
2335: PUSH
2336: EMPTY
2337: LIST
2338: LIST
2339: PUSH
2340: LD_INT 21
2342: PUSH
2343: LD_INT 3
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: PUSH
2350: LD_INT 3
2352: PUSH
2353: LD_INT 57
2355: PUSH
2356: EMPTY
2357: LIST
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: PUSH
2363: LD_INT 3
2365: PUSH
2366: LD_INT 24
2368: PUSH
2369: LD_INT 999
2371: PUSH
2372: EMPTY
2373: LIST
2374: LIST
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: PUSH
2380: EMPTY
2381: LIST
2382: LIST
2383: LIST
2384: LIST
2385: PPUSH
2386: CALL_OW 69
2390: PUSH
2391: LD_INT 7
2393: PPUSH
2394: LD_INT 22
2396: PUSH
2397: LD_INT 2
2399: PUSH
2400: EMPTY
2401: LIST
2402: LIST
2403: PPUSH
2404: CALL_OW 70
2408: OR
2409: AND
2410: IFFALSE 2423
2412: GO 2414
2414: DISABLE
// usAlert := true ;
2415: LD_ADDR_EXP 10
2419: PUSH
2420: LD_INT 1
2422: ST_TO_ADDR
2423: END
// every 0 0$1 trigger usAlert do var i , b , arm ;
2424: LD_EXP 10
2428: IFFALSE 2775
2430: GO 2432
2432: DISABLE
2433: LD_INT 0
2435: PPUSH
2436: PPUSH
2437: PPUSH
// begin usActiveDefend := true ;
2438: LD_ADDR_EXP 11
2442: PUSH
2443: LD_INT 1
2445: ST_TO_ADDR
// if not usForces then
2446: LD_EXP 21
2450: NOT
2451: IFFALSE 2455
// exit ;
2453: GO 2775
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
2455: LD_ADDR_VAR 0 3
2459: PUSH
2460: LD_INT 22
2462: PUSH
2463: LD_INT 1
2465: PUSH
2466: EMPTY
2467: LIST
2468: LIST
2469: PUSH
2470: LD_INT 30
2472: PUSH
2473: LD_INT 4
2475: PUSH
2476: EMPTY
2477: LIST
2478: LIST
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: PPUSH
2484: CALL_OW 69
2488: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
2489: LD_ADDR_VAR 0 2
2493: PUSH
2494: LD_INT 22
2496: PUSH
2497: LD_INT 1
2499: PUSH
2500: EMPTY
2501: LIST
2502: LIST
2503: PUSH
2504: LD_INT 30
2506: PUSH
2507: LD_INT 31
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: PUSH
2514: EMPTY
2515: LIST
2516: LIST
2517: PPUSH
2518: CALL_OW 69
2522: ST_TO_ADDR
// ComExitBuilding ( Lynch ) ;
2523: LD_EXP 20
2527: PPUSH
2528: CALL_OW 122
// AddComEnterUnit ( Lynch , arm [ 1 ] ) ;
2532: LD_EXP 20
2536: PPUSH
2537: LD_VAR 0 3
2541: PUSH
2542: LD_INT 1
2544: ARRAY
2545: PPUSH
2546: CALL_OW 180
// if IsOk ( Gladstone ) then
2550: LD_EXP 19
2554: PPUSH
2555: CALL_OW 302
2559: IFFALSE 2600
// begin ComExitBuilding ( Gladstone ) ;
2561: LD_EXP 19
2565: PPUSH
2566: CALL_OW 122
// AddComEnterUnit ( Gladstone , arm [ 1 ] ) ;
2570: LD_EXP 19
2574: PPUSH
2575: LD_VAR 0 3
2579: PUSH
2580: LD_INT 1
2582: ARRAY
2583: PPUSH
2584: CALL_OW 180
// AddComChangeProfession ( Gladstone , class_soldier ) ;
2588: LD_EXP 19
2592: PPUSH
2593: LD_INT 1
2595: PPUSH
2596: CALL_OW 183
// end ; ComExitBuilding ( usForces [ 1 ] ) ;
2600: LD_EXP 21
2604: PUSH
2605: LD_INT 1
2607: ARRAY
2608: PPUSH
2609: CALL_OW 122
// AddComEnterUnit ( usForces [ 1 ] , b [ 1 ] ) ;
2613: LD_EXP 21
2617: PUSH
2618: LD_INT 1
2620: ARRAY
2621: PPUSH
2622: LD_VAR 0 2
2626: PUSH
2627: LD_INT 1
2629: ARRAY
2630: PPUSH
2631: CALL_OW 180
// ComExitBuilding ( usForces [ 2 ] ) ;
2635: LD_EXP 21
2639: PUSH
2640: LD_INT 2
2642: ARRAY
2643: PPUSH
2644: CALL_OW 122
// AddComEnterUnit ( usForces [ 2 ] , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
2648: LD_EXP 21
2652: PUSH
2653: LD_INT 2
2655: ARRAY
2656: PPUSH
2657: LD_INT 22
2659: PUSH
2660: LD_INT 1
2662: PUSH
2663: EMPTY
2664: LIST
2665: LIST
2666: PUSH
2667: LD_INT 30
2669: PUSH
2670: LD_INT 32
2672: PUSH
2673: EMPTY
2674: LIST
2675: LIST
2676: PUSH
2677: EMPTY
2678: LIST
2679: LIST
2680: PPUSH
2681: CALL_OW 69
2685: PUSH
2686: LD_INT 1
2688: ARRAY
2689: PPUSH
2690: CALL_OW 180
// if b > 1 and usForces > 2 then
2694: LD_VAR 0 2
2698: PUSH
2699: LD_INT 1
2701: GREATER
2702: PUSH
2703: LD_EXP 21
2707: PUSH
2708: LD_INT 2
2710: GREATER
2711: AND
2712: IFFALSE 2775
// begin repeat wait ( 0 0$1 ) ;
2714: LD_INT 35
2716: PPUSH
2717: CALL_OW 67
// until BuildingStatus ( b [ 2 ] ) <> bs_build ;
2721: LD_VAR 0 2
2725: PUSH
2726: LD_INT 2
2728: ARRAY
2729: PPUSH
2730: CALL_OW 461
2734: PUSH
2735: LD_INT 1
2737: NONEQUAL
2738: IFFALSE 2714
// ComExitBuilding ( usForces [ 3 ] ) ;
2740: LD_EXP 21
2744: PUSH
2745: LD_INT 3
2747: ARRAY
2748: PPUSH
2749: CALL_OW 122
// AddComEnterUnit ( usForces [ 3 ] , b [ 2 ] ) ;
2753: LD_EXP 21
2757: PUSH
2758: LD_INT 3
2760: ARRAY
2761: PPUSH
2762: LD_VAR 0 2
2766: PUSH
2767: LD_INT 2
2769: ARRAY
2770: PPUSH
2771: CALL_OW 180
// end ; end ;
2775: PPOPN 3
2777: END
// every 0 0$1 trigger GetLives ( usLab ) < 999 and usAlert and usForces do var i ;
2778: LD_INT 3
2780: PPUSH
2781: CALL_OW 256
2785: PUSH
2786: LD_INT 999
2788: LESS
2789: PUSH
2790: LD_EXP 10
2794: AND
2795: PUSH
2796: LD_EXP 21
2800: AND
2801: IFFALSE 2972
2803: GO 2805
2805: DISABLE
2806: LD_INT 0
2808: PPUSH
// begin for i in usForces do
2809: LD_ADDR_VAR 0 1
2813: PUSH
2814: LD_EXP 21
2818: PUSH
2819: FOR_IN
2820: IFFALSE 2859
// begin if IsInUnit ( i ) then
2822: LD_VAR 0 1
2826: PPUSH
2827: CALL_OW 310
2831: IFFALSE 2842
// ComExitBuilding ( i ) ;
2833: LD_VAR 0 1
2837: PPUSH
2838: CALL_OW 122
// AddComAgressiveMove ( i , 31 , 8 ) ;
2842: LD_VAR 0 1
2846: PPUSH
2847: LD_INT 31
2849: PPUSH
2850: LD_INT 8
2852: PPUSH
2853: CALL_OW 174
// end ;
2857: GO 2819
2859: POP
2860: POP
// wait ( 0 0$8 ) ;
2861: LD_INT 280
2863: PPUSH
2864: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) then
2868: LD_INT 22
2870: PUSH
2871: LD_INT 2
2873: PUSH
2874: EMPTY
2875: LIST
2876: LIST
2877: PUSH
2878: LD_INT 91
2880: PUSH
2881: LD_INT 3
2883: PUSH
2884: LD_INT 14
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: LIST
2891: PUSH
2892: EMPTY
2893: LIST
2894: LIST
2895: PPUSH
2896: CALL_OW 69
2900: IFFALSE 2950
// ComAttackUnit ( usForces , FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) [ 1 ] ) else
2902: LD_EXP 21
2906: PPUSH
2907: LD_INT 22
2909: PUSH
2910: LD_INT 2
2912: PUSH
2913: EMPTY
2914: LIST
2915: LIST
2916: PUSH
2917: LD_INT 91
2919: PUSH
2920: LD_INT 3
2922: PUSH
2923: LD_INT 14
2925: PUSH
2926: EMPTY
2927: LIST
2928: LIST
2929: LIST
2930: PUSH
2931: EMPTY
2932: LIST
2933: LIST
2934: PPUSH
2935: CALL_OW 69
2939: PUSH
2940: LD_INT 1
2942: ARRAY
2943: PPUSH
2944: CALL_OW 115
2948: GO 2972
// begin wait ( 0 0$20 ) ;
2950: LD_INT 700
2952: PPUSH
2953: CALL_OW 67
// AddComMoveXY ( usForces , 39 , 19 ) ;
2957: LD_EXP 21
2961: PPUSH
2962: LD_INT 39
2964: PPUSH
2965: LD_INT 19
2967: PPUSH
2968: CALL_OW 171
// end ; end ;
2972: PPOPN 1
2974: END
// every 0 0$3 trigger ( GetDistUnits ( Heike , Delta ) < 10 or GetLives ( usLab ) < 999 ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do var tmp , veh ;
2975: LD_EXP 23
2979: PPUSH
2980: LD_INT 1
2982: PPUSH
2983: CALL_OW 296
2987: PUSH
2988: LD_INT 10
2990: LESS
2991: PUSH
2992: LD_INT 3
2994: PPUSH
2995: CALL_OW 256
2999: PUSH
3000: LD_INT 999
3002: LESS
3003: OR
3004: PUSH
3005: LD_INT 22
3007: PUSH
3008: LD_INT 1
3010: PUSH
3011: EMPTY
3012: LIST
3013: LIST
3014: PUSH
3015: LD_INT 25
3017: PUSH
3018: LD_INT 2
3020: PUSH
3021: EMPTY
3022: LIST
3023: LIST
3024: PUSH
3025: EMPTY
3026: LIST
3027: LIST
3028: PPUSH
3029: CALL_OW 69
3033: AND
3034: IFFALSE 3148
3036: GO 3038
3038: DISABLE
3039: LD_INT 0
3041: PPUSH
3042: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
3043: LD_ADDR_VAR 0 1
3047: PUSH
3048: LD_INT 22
3050: PUSH
3051: LD_INT 1
3053: PUSH
3054: EMPTY
3055: LIST
3056: LIST
3057: PUSH
3058: LD_INT 25
3060: PUSH
3061: LD_INT 2
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: PPUSH
3072: CALL_OW 69
3076: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3077: LD_ADDR_VAR 0 2
3081: PUSH
3082: LD_INT 22
3084: PUSH
3085: LD_INT 1
3087: PUSH
3088: EMPTY
3089: LIST
3090: LIST
3091: PUSH
3092: LD_INT 21
3094: PUSH
3095: LD_INT 2
3097: PUSH
3098: EMPTY
3099: LIST
3100: LIST
3101: PUSH
3102: LD_INT 58
3104: PUSH
3105: EMPTY
3106: LIST
3107: PUSH
3108: EMPTY
3109: LIST
3110: LIST
3111: LIST
3112: PPUSH
3113: CALL_OW 69
3117: ST_TO_ADDR
// if not tmp then
3118: LD_VAR 0 1
3122: NOT
3123: IFFALSE 3127
// exit ;
3125: GO 3148
// ComExitBuilding ( tmp ) ;
3127: LD_VAR 0 1
3131: PPUSH
3132: CALL_OW 122
// AddComDismantle ( tmp , usLab ) ;
3136: LD_VAR 0 1
3140: PPUSH
3141: LD_INT 3
3143: PPUSH
3144: CALL_OW 227
// end ;
3148: PPOPN 2
3150: END
// every 0 0$1 trigger usAlert and FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) do var i , tmp ;
3151: LD_EXP 10
3155: PUSH
3156: LD_INT 7
3158: PPUSH
3159: LD_INT 22
3161: PUSH
3162: LD_INT 1
3164: PUSH
3165: EMPTY
3166: LIST
3167: LIST
3168: PUSH
3169: LD_INT 21
3171: PUSH
3172: LD_INT 1
3174: PUSH
3175: EMPTY
3176: LIST
3177: LIST
3178: PUSH
3179: LD_INT 3
3181: PUSH
3182: LD_INT 24
3184: PUSH
3185: LD_INT 600
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: PUSH
3192: EMPTY
3193: LIST
3194: LIST
3195: PUSH
3196: EMPTY
3197: LIST
3198: LIST
3199: LIST
3200: PPUSH
3201: CALL_OW 70
3205: AND
3206: IFFALSE 3334
3208: GO 3210
3210: DISABLE
3211: LD_INT 0
3213: PPUSH
3214: PPUSH
// begin enable ;
3215: ENABLE
// tmp := FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) ;
3216: LD_ADDR_VAR 0 2
3220: PUSH
3221: LD_INT 7
3223: PPUSH
3224: LD_INT 22
3226: PUSH
3227: LD_INT 1
3229: PUSH
3230: EMPTY
3231: LIST
3232: LIST
3233: PUSH
3234: LD_INT 21
3236: PUSH
3237: LD_INT 1
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PUSH
3244: LD_INT 3
3246: PUSH
3247: LD_INT 24
3249: PUSH
3250: LD_INT 600
3252: PUSH
3253: EMPTY
3254: LIST
3255: LIST
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: PUSH
3261: EMPTY
3262: LIST
3263: LIST
3264: LIST
3265: PPUSH
3266: CALL_OW 70
3270: ST_TO_ADDR
// if not tmp then
3271: LD_VAR 0 2
3275: NOT
3276: IFFALSE 3280
// exit ;
3278: GO 3334
// for i in tmp do
3280: LD_ADDR_VAR 0 1
3284: PUSH
3285: LD_VAR 0 2
3289: PUSH
3290: FOR_IN
3291: IFFALSE 3332
// if IsInUnit ( i ) then
3293: LD_VAR 0 1
3297: PPUSH
3298: CALL_OW 310
3302: IFFALSE 3315
// ComExitBuilding ( i ) else
3304: LD_VAR 0 1
3308: PPUSH
3309: CALL_OW 122
3313: GO 3330
// ComMoveXY ( i , 48 , 74 ) ;
3315: LD_VAR 0 1
3319: PPUSH
3320: LD_INT 48
3322: PPUSH
3323: LD_INT 74
3325: PPUSH
3326: CALL_OW 111
3330: GO 3290
3332: POP
3333: POP
// end ;
3334: PPOPN 2
3336: END
// every 12 12$00 do var i , un , tmp ;
3337: GO 3339
3339: DISABLE
3340: LD_INT 0
3342: PPUSH
3343: PPUSH
3344: PPUSH
// begin tmp := [ ] ;
3345: LD_ADDR_VAR 0 3
3349: PUSH
3350: EMPTY
3351: ST_TO_ADDR
// uc_side := 1 ;
3352: LD_ADDR_OWVAR 20
3356: PUSH
3357: LD_INT 1
3359: ST_TO_ADDR
// uc_nation := 1 ;
3360: LD_ADDR_OWVAR 21
3364: PUSH
3365: LD_INT 1
3367: ST_TO_ADDR
// case Difficulty of 1 :
3368: LD_OWVAR 67
3372: PUSH
3373: LD_INT 1
3375: DOUBLE
3376: EQUAL
3377: IFTRUE 3381
3379: GO 3484
3381: POP
// begin wait ( 1 1$00 ) ;
3382: LD_INT 2100
3384: PPUSH
3385: CALL_OW 67
// for i := 1 to 2 do
3389: LD_ADDR_VAR 0 1
3393: PUSH
3394: DOUBLE
3395: LD_INT 1
3397: DEC
3398: ST_TO_ADDR
3399: LD_INT 2
3401: PUSH
3402: FOR_TO
3403: IFFALSE 3480
// begin PrepareHuman ( false , [ 1 , 4 ] [ i mod 2 + 1 ] , 1 ) ;
3405: LD_INT 0
3407: PPUSH
3408: LD_INT 1
3410: PUSH
3411: LD_INT 4
3413: PUSH
3414: EMPTY
3415: LIST
3416: LIST
3417: PUSH
3418: LD_VAR 0 1
3422: PUSH
3423: LD_INT 2
3425: MOD
3426: PUSH
3427: LD_INT 1
3429: PLUS
3430: ARRAY
3431: PPUSH
3432: LD_INT 1
3434: PPUSH
3435: CALL_OW 380
// un := CreateHuman ;
3439: LD_ADDR_VAR 0 2
3443: PUSH
3444: CALL_OW 44
3448: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3449: LD_ADDR_VAR 0 3
3453: PUSH
3454: LD_VAR 0 3
3458: PPUSH
3459: LD_VAR 0 3
3463: PUSH
3464: LD_INT 1
3466: PLUS
3467: PPUSH
3468: LD_VAR 0 2
3472: PPUSH
3473: CALL_OW 1
3477: ST_TO_ADDR
// end ;
3478: GO 3402
3480: POP
3481: POP
// end ; 2 :
3482: GO 3884
3484: LD_INT 2
3486: DOUBLE
3487: EQUAL
3488: IFTRUE 3492
3490: GO 3626
3492: POP
// begin wait ( 0 0$30 ) ;
3493: LD_INT 1050
3495: PPUSH
3496: CALL_OW 67
// for i := 1 to 2 do
3500: LD_ADDR_VAR 0 1
3504: PUSH
3505: DOUBLE
3506: LD_INT 1
3508: DEC
3509: ST_TO_ADDR
3510: LD_INT 2
3512: PUSH
3513: FOR_TO
3514: IFFALSE 3570
// begin PrepareHuman ( false , 1 , 2 ) ;
3516: LD_INT 0
3518: PPUSH
3519: LD_INT 1
3521: PPUSH
3522: LD_INT 2
3524: PPUSH
3525: CALL_OW 380
// un := CreateHuman ;
3529: LD_ADDR_VAR 0 2
3533: PUSH
3534: CALL_OW 44
3538: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3539: LD_ADDR_VAR 0 3
3543: PUSH
3544: LD_VAR 0 3
3548: PPUSH
3549: LD_VAR 0 3
3553: PUSH
3554: LD_INT 1
3556: PLUS
3557: PPUSH
3558: LD_VAR 0 2
3562: PPUSH
3563: CALL_OW 1
3567: ST_TO_ADDR
// end ;
3568: GO 3513
3570: POP
3571: POP
// PrepareHuman ( false , 4 , 2 ) ;
3572: LD_INT 0
3574: PPUSH
3575: LD_INT 4
3577: PPUSH
3578: LD_INT 2
3580: PPUSH
3581: CALL_OW 380
// un := CreateHuman ;
3585: LD_ADDR_VAR 0 2
3589: PUSH
3590: CALL_OW 44
3594: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3595: LD_ADDR_VAR 0 3
3599: PUSH
3600: LD_VAR 0 3
3604: PPUSH
3605: LD_VAR 0 3
3609: PUSH
3610: LD_INT 1
3612: PLUS
3613: PPUSH
3614: LD_VAR 0 2
3618: PPUSH
3619: CALL_OW 1
3623: ST_TO_ADDR
// end ; 3 .. 4 :
3624: GO 3884
3626: LD_INT 3
3628: DOUBLE
3629: GREATEREQUAL
3630: IFFALSE 3638
3632: LD_INT 4
3634: DOUBLE
3635: LESSEQUAL
3636: IFTRUE 3640
3638: GO 3883
3640: POP
// begin for i := 1 to 2 do
3641: LD_ADDR_VAR 0 1
3645: PUSH
3646: DOUBLE
3647: LD_INT 1
3649: DEC
3650: ST_TO_ADDR
3651: LD_INT 2
3653: PUSH
3654: FOR_TO
3655: IFFALSE 3711
// begin PrepareHuman ( false , 1 , 2 ) ;
3657: LD_INT 0
3659: PPUSH
3660: LD_INT 1
3662: PPUSH
3663: LD_INT 2
3665: PPUSH
3666: CALL_OW 380
// un := CreateHuman ;
3670: LD_ADDR_VAR 0 2
3674: PUSH
3675: CALL_OW 44
3679: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3680: LD_ADDR_VAR 0 3
3684: PUSH
3685: LD_VAR 0 3
3689: PPUSH
3690: LD_VAR 0 3
3694: PUSH
3695: LD_INT 1
3697: PLUS
3698: PPUSH
3699: LD_VAR 0 2
3703: PPUSH
3704: CALL_OW 1
3708: ST_TO_ADDR
// end ;
3709: GO 3654
3711: POP
3712: POP
// PrepareHuman ( false , 4 , 2 ) ;
3713: LD_INT 0
3715: PPUSH
3716: LD_INT 4
3718: PPUSH
3719: LD_INT 2
3721: PPUSH
3722: CALL_OW 380
// un := CreateHuman ;
3726: LD_ADDR_VAR 0 2
3730: PUSH
3731: CALL_OW 44
3735: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3736: LD_ADDR_VAR 0 3
3740: PUSH
3741: LD_VAR 0 3
3745: PPUSH
3746: LD_VAR 0 3
3750: PUSH
3751: LD_INT 1
3753: PLUS
3754: PPUSH
3755: LD_VAR 0 2
3759: PPUSH
3760: CALL_OW 1
3764: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_machine_gun , 90 ) ;
3765: LD_INT 1
3767: PPUSH
3768: LD_INT 1
3770: PPUSH
3771: LD_INT 2
3773: PPUSH
3774: LD_INT 2
3776: PPUSH
3777: LD_INT 1
3779: PPUSH
3780: LD_INT 2
3782: PPUSH
3783: LD_INT 90
3785: PPUSH
3786: CALL 241 0 7
// un := CreateVehicle ;
3790: LD_ADDR_VAR 0 2
3794: PUSH
3795: CALL_OW 45
3799: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3800: LD_ADDR_VAR 0 3
3804: PUSH
3805: LD_VAR 0 3
3809: PPUSH
3810: LD_VAR 0 3
3814: PUSH
3815: LD_INT 1
3817: PLUS
3818: PPUSH
3819: LD_VAR 0 2
3823: PPUSH
3824: CALL_OW 1
3828: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
3829: LD_INT 0
3831: PPUSH
3832: LD_INT 1
3834: PPUSH
3835: LD_INT 2
3837: PPUSH
3838: CALL_OW 380
// un := CreateHuman ;
3842: LD_ADDR_VAR 0 2
3846: PUSH
3847: CALL_OW 44
3851: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3852: LD_ADDR_VAR 0 3
3856: PUSH
3857: LD_VAR 0 3
3861: PPUSH
3862: LD_VAR 0 3
3866: PUSH
3867: LD_INT 1
3869: PLUS
3870: PPUSH
3871: LD_VAR 0 2
3875: PPUSH
3876: CALL_OW 1
3880: ST_TO_ADDR
// end ; end ;
3881: GO 3884
3883: POP
// for i := 1 to tmp do
3884: LD_ADDR_VAR 0 1
3888: PUSH
3889: DOUBLE
3890: LD_INT 1
3892: DEC
3893: ST_TO_ADDR
3894: LD_VAR 0 3
3898: PUSH
3899: FOR_TO
3900: IFFALSE 4065
// begin SetDir ( tmp [ i ] , 1 ) ;
3902: LD_VAR 0 3
3906: PUSH
3907: LD_VAR 0 1
3911: ARRAY
3912: PPUSH
3913: LD_INT 1
3915: PPUSH
3916: CALL_OW 233
// if GetType ( tmp [ i ] ) = unit_human then
3920: LD_VAR 0 3
3924: PUSH
3925: LD_VAR 0 1
3929: ARRAY
3930: PPUSH
3931: CALL_OW 247
3935: PUSH
3936: LD_INT 1
3938: EQUAL
3939: IFFALSE 3967
// PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) else
3941: LD_VAR 0 3
3945: PUSH
3946: LD_VAR 0 1
3950: ARRAY
3951: PPUSH
3952: LD_INT 28
3954: PPUSH
3955: LD_INT 52
3957: PPUSH
3958: LD_INT 0
3960: PPUSH
3961: CALL_OW 48
3965: GO 4035
// begin PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) ;
3967: LD_VAR 0 3
3971: PUSH
3972: LD_VAR 0 1
3976: ARRAY
3977: PPUSH
3978: LD_INT 28
3980: PPUSH
3981: LD_INT 52
3983: PPUSH
3984: LD_INT 0
3986: PPUSH
3987: CALL_OW 48
// i := i + 1 ;
3991: LD_ADDR_VAR 0 1
3995: PUSH
3996: LD_VAR 0 1
4000: PUSH
4001: LD_INT 1
4003: PLUS
4004: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ i ] , tmp [ i - 1 ] ) ;
4005: LD_VAR 0 3
4009: PUSH
4010: LD_VAR 0 1
4014: ARRAY
4015: PPUSH
4016: LD_VAR 0 3
4020: PUSH
4021: LD_VAR 0 1
4025: PUSH
4026: LD_INT 1
4028: MINUS
4029: ARRAY
4030: PPUSH
4031: CALL_OW 52
// end ; ComMoveXY ( tmp [ i ] , 43 , 56 ) ;
4035: LD_VAR 0 3
4039: PUSH
4040: LD_VAR 0 1
4044: ARRAY
4045: PPUSH
4046: LD_INT 43
4048: PPUSH
4049: LD_INT 56
4051: PPUSH
4052: CALL_OW 111
// wait ( 0 0$2 ) ;
4056: LD_INT 70
4058: PPUSH
4059: CALL_OW 67
// end ;
4063: GO 3899
4065: POP
4066: POP
// wait ( 0 0$2 ) ;
4067: LD_INT 70
4069: PPUSH
4070: CALL_OW 67
// if not FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) then
4074: LD_INT 7
4076: PPUSH
4077: LD_INT 22
4079: PUSH
4080: LD_INT 2
4082: PUSH
4083: EMPTY
4084: LIST
4085: LIST
4086: PPUSH
4087: CALL_OW 70
4091: NOT
4092: IFFALSE 4290
// begin AddComAgressiveMove ( tmp , 35 , 24 ) ;
4094: LD_VAR 0 3
4098: PPUSH
4099: LD_INT 35
4101: PPUSH
4102: LD_INT 24
4104: PPUSH
4105: CALL_OW 174
// usForces := usForces union UnitFilter ( tmp , [ f_class , 1 ] ) ;
4109: LD_ADDR_EXP 21
4113: PUSH
4114: LD_EXP 21
4118: PUSH
4119: LD_VAR 0 3
4123: PPUSH
4124: LD_INT 25
4126: PUSH
4127: LD_INT 1
4129: PUSH
4130: EMPTY
4131: LIST
4132: LIST
4133: PPUSH
4134: CALL_OW 72
4138: UNION
4139: ST_TO_ADDR
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
4140: LD_INT 22
4142: PUSH
4143: LD_INT 1
4145: PUSH
4146: EMPTY
4147: LIST
4148: LIST
4149: PUSH
4150: LD_INT 30
4152: PUSH
4153: LD_INT 4
4155: PUSH
4156: EMPTY
4157: LIST
4158: LIST
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: PPUSH
4164: CALL_OW 69
4168: PUSH
4169: LD_INT 1
4171: ARRAY
4172: PPUSH
4173: CALL_OW 313
4177: PUSH
4178: LD_INT 6
4180: LESS
4181: IFFALSE 4240
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 1 ] ) , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
4183: LD_VAR 0 3
4187: PPUSH
4188: LD_INT 25
4190: PUSH
4191: LD_INT 1
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PPUSH
4198: CALL_OW 72
4202: PPUSH
4203: LD_INT 22
4205: PUSH
4206: LD_INT 1
4208: PUSH
4209: EMPTY
4210: LIST
4211: LIST
4212: PUSH
4213: LD_INT 30
4215: PUSH
4216: LD_INT 4
4218: PUSH
4219: EMPTY
4220: LIST
4221: LIST
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: PPUSH
4227: CALL_OW 69
4231: PUSH
4232: LD_INT 1
4234: ARRAY
4235: PPUSH
4236: CALL_OW 180
// if UnitFilter ( tmp , [ f_class , 4 ] ) then
4240: LD_VAR 0 3
4244: PPUSH
4245: LD_INT 25
4247: PUSH
4248: LD_INT 4
4250: PUSH
4251: EMPTY
4252: LIST
4253: LIST
4254: PPUSH
4255: CALL_OW 72
4259: IFFALSE 4288
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 4 ] ) , usLab ) ;
4261: LD_VAR 0 3
4265: PPUSH
4266: LD_INT 25
4268: PUSH
4269: LD_INT 4
4271: PUSH
4272: EMPTY
4273: LIST
4274: LIST
4275: PPUSH
4276: CALL_OW 72
4280: PPUSH
4281: LD_INT 3
4283: PPUSH
4284: CALL_OW 180
// end else
4288: GO 4565
// begin tmp := tmp union FilterUnitsInArea ( retreatArea , [ f_side , 1 ] ) ;
4290: LD_ADDR_VAR 0 3
4294: PUSH
4295: LD_VAR 0 3
4299: PUSH
4300: LD_INT 6
4302: PPUSH
4303: LD_INT 22
4305: PUSH
4306: LD_INT 1
4308: PUSH
4309: EMPTY
4310: LIST
4311: LIST
4312: PPUSH
4313: CALL_OW 70
4317: UNION
4318: ST_TO_ADDR
// ComMoveXY ( tmp , 45 , 54 ) ;
4319: LD_VAR 0 3
4323: PPUSH
4324: LD_INT 45
4326: PPUSH
4327: LD_INT 54
4329: PPUSH
4330: CALL_OW 111
// wait ( 0 0$3 ) ;
4334: LD_INT 105
4336: PPUSH
4337: CALL_OW 67
// AddComAgressiveMove ( tmp diff UnitFilter ( tmp , [ f_class , 4 ] ) , 35 , 24 ) ;
4341: LD_VAR 0 3
4345: PUSH
4346: LD_VAR 0 3
4350: PPUSH
4351: LD_INT 25
4353: PUSH
4354: LD_INT 4
4356: PUSH
4357: EMPTY
4358: LIST
4359: LIST
4360: PPUSH
4361: CALL_OW 72
4365: DIFF
4366: PPUSH
4367: LD_INT 35
4369: PPUSH
4370: LD_INT 24
4372: PPUSH
4373: CALL_OW 174
// AddComMoveXY ( UnitFilter ( tmp , [ f_class , 4 ] ) , 42 , 49 ) ;
4377: LD_VAR 0 3
4381: PPUSH
4382: LD_INT 25
4384: PUSH
4385: LD_INT 4
4387: PUSH
4388: EMPTY
4389: LIST
4390: LIST
4391: PPUSH
4392: CALL_OW 72
4396: PPUSH
4397: LD_INT 42
4399: PPUSH
4400: LD_INT 49
4402: PPUSH
4403: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4407: LD_INT 35
4409: PPUSH
4410: CALL_OW 67
// for i in tmp do
4414: LD_ADDR_VAR 0 1
4418: PUSH
4419: LD_VAR 0 3
4423: PUSH
4424: FOR_IN
4425: IFFALSE 4556
// if IsDead ( i ) then
4427: LD_VAR 0 1
4431: PPUSH
4432: CALL_OW 301
4436: IFFALSE 4456
// tmp := tmp diff i else
4438: LD_ADDR_VAR 0 3
4442: PUSH
4443: LD_VAR 0 3
4447: PUSH
4448: LD_VAR 0 1
4452: DIFF
4453: ST_TO_ADDR
4454: GO 4554
// if GetClass ( i ) = 1 then
4456: LD_VAR 0 1
4460: PPUSH
4461: CALL_OW 257
4465: PUSH
4466: LD_INT 1
4468: EQUAL
4469: IFFALSE 4554
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 42 , 49 ) > 6 then
4471: LD_VAR 0 1
4475: PPUSH
4476: CALL_OW 256
4480: PUSH
4481: LD_INT 600
4483: LESS
4484: PUSH
4485: LD_VAR 0 1
4489: PPUSH
4490: LD_INT 42
4492: PPUSH
4493: LD_INT 49
4495: PPUSH
4496: CALL_OW 297
4500: PUSH
4501: LD_INT 6
4503: GREATER
4504: AND
4505: IFFALSE 4524
// ComMoveXY ( i , 42 , 49 ) else
4507: LD_VAR 0 1
4511: PPUSH
4512: LD_INT 42
4514: PPUSH
4515: LD_INT 49
4517: PPUSH
4518: CALL_OW 111
4522: GO 4554
// if GetLives ( i ) = 1000 then
4524: LD_VAR 0 1
4528: PPUSH
4529: CALL_OW 256
4533: PUSH
4534: LD_INT 1000
4536: EQUAL
4537: IFFALSE 4554
// ComAgressiveMove ( i , 36 , 25 ) ;
4539: LD_VAR 0 1
4543: PPUSH
4544: LD_INT 36
4546: PPUSH
4547: LD_INT 25
4549: PPUSH
4550: CALL_OW 114
// end ;
4554: GO 4424
4556: POP
4557: POP
// until not tmp ;
4558: LD_VAR 0 3
4562: NOT
4563: IFFALSE 4407
// end ; end ;
4565: PPOPN 3
4567: END
// every 1 1$30 trigger FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) and not attackDeltaAllowed do var i , un , veh ;
4568: LD_INT 7
4570: PPUSH
4571: LD_INT 22
4573: PUSH
4574: LD_INT 2
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PPUSH
4581: CALL_OW 70
4585: PUSH
4586: LD_EXP 14
4590: NOT
4591: AND
4592: IFFALSE 4750
4594: GO 4596
4596: DISABLE
4597: LD_INT 0
4599: PPUSH
4600: PPUSH
4601: PPUSH
// begin for i := 1 to 2 do
4602: LD_ADDR_VAR 0 1
4606: PUSH
4607: DOUBLE
4608: LD_INT 1
4610: DEC
4611: ST_TO_ADDR
4612: LD_INT 2
4614: PUSH
4615: FOR_TO
4616: IFFALSE 4748
// begin wait ( 0 0$3 ) ;
4618: LD_INT 105
4620: PPUSH
4621: CALL_OW 67
// uc_side := 1 ;
4625: LD_ADDR_OWVAR 20
4629: PUSH
4630: LD_INT 1
4632: ST_TO_ADDR
// uc_nation := 1 ;
4633: LD_ADDR_OWVAR 21
4637: PUSH
4638: LD_INT 1
4640: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 90 ) ;
4641: LD_INT 1
4643: PPUSH
4644: LD_INT 1
4646: PPUSH
4647: LD_INT 2
4649: PPUSH
4650: LD_INT 1
4652: PPUSH
4653: LD_INT 1
4655: PPUSH
4656: LD_INT 4
4658: PPUSH
4659: LD_INT 90
4661: PPUSH
4662: CALL 241 0 7
// veh := CreateVehicle ;
4666: LD_ADDR_VAR 0 3
4670: PUSH
4671: CALL_OW 45
4675: ST_TO_ADDR
// PlaceUnitXY ( veh , 29 , 52 , false ) ;
4676: LD_VAR 0 3
4680: PPUSH
4681: LD_INT 29
4683: PPUSH
4684: LD_INT 52
4686: PPUSH
4687: LD_INT 0
4689: PPUSH
4690: CALL_OW 48
// PrepareHuman ( false , 3 , 3 ) ;
4694: LD_INT 0
4696: PPUSH
4697: LD_INT 3
4699: PPUSH
4700: LD_INT 3
4702: PPUSH
4703: CALL_OW 380
// un := CreateHuman ;
4707: LD_ADDR_VAR 0 2
4711: PUSH
4712: CALL_OW 44
4716: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4717: LD_VAR 0 2
4721: PPUSH
4722: LD_VAR 0 3
4726: PPUSH
4727: CALL_OW 52
// ComAgressiveMove ( veh , 36 , 25 ) ;
4731: LD_VAR 0 3
4735: PPUSH
4736: LD_INT 36
4738: PPUSH
4739: LD_INT 25
4741: PPUSH
4742: CALL_OW 114
// end ;
4746: GO 4615
4748: POP
4749: POP
// end ; end_of_file
4750: PPOPN 3
4752: END
// export function Action ; var i , tmp ; begin
4753: LD_INT 0
4755: PPUSH
4756: PPUSH
4757: PPUSH
// InGameOn ;
4758: CALL_OW 8
// DoNotAttack ( 2 , usLab ) ;
4762: LD_INT 2
4764: PPUSH
4765: LD_INT 3
4767: PPUSH
4768: CALL_OW 471
// ComMoveXY ( Heike , 78 , 61 ) ;
4772: LD_EXP 23
4776: PPUSH
4777: LD_INT 78
4779: PPUSH
4780: LD_INT 61
4782: PPUSH
4783: CALL_OW 111
// if Mike then
4787: LD_EXP 25
4791: IFFALSE 4808
// ComMoveXY ( Mike , 80 , 66 ) ;
4793: LD_EXP 25
4797: PPUSH
4798: LD_INT 80
4800: PPUSH
4801: LD_INT 66
4803: PPUSH
4804: CALL_OW 111
// if Givi then
4808: LD_EXP 24
4812: IFFALSE 4829
// ComMoveXY ( Givi , 82 , 66 ) ;
4814: LD_EXP 24
4818: PPUSH
4819: LD_INT 82
4821: PPUSH
4822: LD_INT 66
4824: PPUSH
4825: CALL_OW 111
// if Kamil then
4829: LD_EXP 26
4833: IFFALSE 4850
// ComMoveXY ( Kamil , 82 , 67 ) ;
4835: LD_EXP 26
4839: PPUSH
4840: LD_INT 82
4842: PPUSH
4843: LD_INT 67
4845: PPUSH
4846: CALL_OW 111
// CenterNowOnUnits ( Heike ) ;
4850: LD_EXP 23
4854: PPUSH
4855: CALL_OW 87
// wait ( 0 0$2 ) ;
4859: LD_INT 70
4861: PPUSH
4862: CALL_OW 67
// if Givi and Mike then
4866: LD_EXP 24
4870: PUSH
4871: LD_EXP 25
4875: AND
4876: IFFALSE 5410
// begin AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
4878: LD_EXP 24
4882: PUSH
4883: LD_EXP 25
4887: PUSH
4888: LD_EXP 26
4892: PUSH
4893: EMPTY
4894: LIST
4895: LIST
4896: LIST
4897: PPUSH
4898: LD_EXP 23
4902: PPUSH
4903: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
4907: LD_EXP 23
4911: PPUSH
4912: LD_EXP 24
4916: PPUSH
4917: CALL_OW 179
// Say ( Givi , DG-1-start ) ;
4921: LD_EXP 24
4925: PPUSH
4926: LD_STRING DG-1-start
4928: PPUSH
4929: CALL_OW 88
// Say ( Heike , DH-1-start ) ;
4933: LD_EXP 23
4937: PPUSH
4938: LD_STRING DH-1-start
4940: PPUSH
4941: CALL_OW 88
// AddComTurnUnit ( Mike , Heike ) ;
4945: LD_EXP 25
4949: PPUSH
4950: LD_EXP 23
4954: PPUSH
4955: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
4959: LD_EXP 23
4963: PPUSH
4964: LD_EXP 25
4968: PPUSH
4969: CALL_OW 179
// Say ( Mike , DM-1-start ) ;
4973: LD_EXP 25
4977: PPUSH
4978: LD_STRING DM-1-start
4980: PPUSH
4981: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
4985: LD_EXP 23
4989: PPUSH
4990: LD_STRING DH-2-start
4992: PPUSH
4993: CALL_OW 88
// Say ( Mike , DM-2-start ) ;
4997: LD_EXP 25
5001: PPUSH
5002: LD_STRING DM-2-start
5004: PPUSH
5005: CALL_OW 88
// Say ( Givi , DG-2-start ) ;
5009: LD_EXP 24
5013: PPUSH
5014: LD_STRING DG-2-start
5016: PPUSH
5017: CALL_OW 88
// ComTurnUnit ( Mike , Givi ) ;
5021: LD_EXP 25
5025: PPUSH
5026: LD_EXP 24
5030: PPUSH
5031: CALL_OW 119
// ComTurnUnit ( Heike , Mike ) ;
5035: LD_EXP 23
5039: PPUSH
5040: LD_EXP 25
5044: PPUSH
5045: CALL_OW 119
// Say ( Mike , DM-3-start ) ;
5049: LD_EXP 25
5053: PPUSH
5054: LD_STRING DM-3-start
5056: PPUSH
5057: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
5061: LD_EXP 23
5065: PPUSH
5066: LD_STRING DH-3-start
5068: PPUSH
5069: CALL_OW 88
// ComMoveXY ( [ Heike , Mike , Givi , Kamil ] , 84 , 51 ) ;
5073: LD_EXP 23
5077: PUSH
5078: LD_EXP 25
5082: PUSH
5083: LD_EXP 24
5087: PUSH
5088: LD_EXP 26
5092: PUSH
5093: EMPTY
5094: LIST
5095: LIST
5096: LIST
5097: LIST
5098: PPUSH
5099: LD_INT 84
5101: PPUSH
5102: LD_INT 51
5104: PPUSH
5105: CALL_OW 111
// wait ( 0 0$2 ) ;
5109: LD_INT 70
5111: PPUSH
5112: CALL_OW 67
// Say ( Givi , DG-3-start ) ;
5116: LD_EXP 24
5120: PPUSH
5121: LD_STRING DG-3-start
5123: PPUSH
5124: CALL_OW 88
// ComHold ( [ Heike , Mike , Givi , Kamil ] ) ;
5128: LD_EXP 23
5132: PUSH
5133: LD_EXP 25
5137: PUSH
5138: LD_EXP 24
5142: PUSH
5143: LD_EXP 26
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: LIST
5152: LIST
5153: PPUSH
5154: CALL_OW 140
// AddComTurnUnit ( Heike , Givi ) ;
5158: LD_EXP 23
5162: PPUSH
5163: LD_EXP 24
5167: PPUSH
5168: CALL_OW 179
// AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
5172: LD_EXP 24
5176: PUSH
5177: LD_EXP 25
5181: PUSH
5182: LD_EXP 26
5186: PUSH
5187: EMPTY
5188: LIST
5189: LIST
5190: LIST
5191: PPUSH
5192: LD_EXP 23
5196: PPUSH
5197: CALL_OW 179
// Say ( Heike , DH-4-start ) ;
5201: LD_EXP 23
5205: PPUSH
5206: LD_STRING DH-4-start
5208: PPUSH
5209: CALL_OW 88
// Say ( Givi , DG-4-start ) ;
5213: LD_EXP 24
5217: PPUSH
5218: LD_STRING DG-4-start
5220: PPUSH
5221: CALL_OW 88
// Say ( Heike , DH-5-start ) ;
5225: LD_EXP 23
5229: PPUSH
5230: LD_STRING DH-5-start
5232: PPUSH
5233: CALL_OW 88
// Say ( Givi , DG-5-start ) ;
5237: LD_EXP 24
5241: PPUSH
5242: LD_STRING DG-5-start
5244: PPUSH
5245: CALL_OW 88
// Say ( Heike , DH-6-start ) ;
5249: LD_EXP 23
5253: PPUSH
5254: LD_STRING DH-6-start
5256: PPUSH
5257: CALL_OW 88
// if not Kamil then
5261: LD_EXP 26
5265: NOT
5266: IFFALSE 5317
// begin Say ( Mike , DM-6-start ) ;
5268: LD_EXP 25
5272: PPUSH
5273: LD_STRING DM-6-start
5275: PPUSH
5276: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi ] , Mike ) ;
5280: LD_EXP 23
5284: PUSH
5285: LD_EXP 24
5289: PUSH
5290: EMPTY
5291: LIST
5292: LIST
5293: PPUSH
5294: LD_EXP 25
5298: PPUSH
5299: CALL_OW 119
// Say ( Givi , DG-6-start ) ;
5303: LD_EXP 24
5307: PPUSH
5308: LD_STRING DG-6-start
5310: PPUSH
5311: CALL_OW 88
// end else
5315: GO 5396
// begin Say ( Mike , DM-6-start-a ) ;
5317: LD_EXP 25
5321: PPUSH
5322: LD_STRING DM-6-start-a
5324: PPUSH
5325: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi , Mike ] , Kamil ) ;
5329: LD_EXP 23
5333: PUSH
5334: LD_EXP 24
5338: PUSH
5339: LD_EXP 25
5343: PUSH
5344: EMPTY
5345: LIST
5346: LIST
5347: LIST
5348: PPUSH
5349: LD_EXP 26
5353: PPUSH
5354: CALL_OW 119
// ComTurnUnit ( Kamil , Mike ) ;
5358: LD_EXP 26
5362: PPUSH
5363: LD_EXP 25
5367: PPUSH
5368: CALL_OW 119
// Say ( Kamil , DKam-7-start-a ) ;
5372: LD_EXP 26
5376: PPUSH
5377: LD_STRING DKam-7-start-a
5379: PPUSH
5380: CALL_OW 88
// Say ( Givi , DG-6-start-a ) ;
5384: LD_EXP 24
5388: PPUSH
5389: LD_STRING DG-6-start-a
5391: PPUSH
5392: CALL_OW 88
// end ; Say ( Heike , DH-7-start ) ;
5396: LD_EXP 23
5400: PPUSH
5401: LD_STRING DH-7-start
5403: PPUSH
5404: CALL_OW 88
// end else
5408: GO 6132
// if not Mike and Givi then
5410: LD_EXP 25
5414: NOT
5415: PUSH
5416: LD_EXP 24
5420: AND
5421: IFFALSE 5766
// begin AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5423: LD_EXP 24
5427: PUSH
5428: LD_EXP 26
5432: PUSH
5433: EMPTY
5434: LIST
5435: LIST
5436: PPUSH
5437: LD_EXP 23
5441: PPUSH
5442: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
5446: LD_EXP 23
5450: PPUSH
5451: LD_EXP 24
5455: PPUSH
5456: CALL_OW 179
// Say ( Givi , DG-1-start-c ) ;
5460: LD_EXP 24
5464: PPUSH
5465: LD_STRING DG-1-start-c
5467: PPUSH
5468: CALL_OW 88
// Say ( Heike , DH-1-start-c ) ;
5472: LD_EXP 23
5476: PPUSH
5477: LD_STRING DH-1-start-c
5479: PPUSH
5480: CALL_OW 88
// Say ( Givi , DG-2-start-c ) ;
5484: LD_EXP 24
5488: PPUSH
5489: LD_STRING DG-2-start-c
5491: PPUSH
5492: CALL_OW 88
// Say ( Heike , DH-2-start-c ) ;
5496: LD_EXP 23
5500: PPUSH
5501: LD_STRING DH-2-start-c
5503: PPUSH
5504: CALL_OW 88
// Say ( Givi , DG-3-start-c ) ;
5508: LD_EXP 24
5512: PPUSH
5513: LD_STRING DG-3-start-c
5515: PPUSH
5516: CALL_OW 88
// ComMoveXY ( Heike , 83 , 56 ) ;
5520: LD_EXP 23
5524: PPUSH
5525: LD_INT 83
5527: PPUSH
5528: LD_INT 56
5530: PPUSH
5531: CALL_OW 111
// ComMoveXY ( Givi , 83 , 59 ) ;
5535: LD_EXP 24
5539: PPUSH
5540: LD_INT 83
5542: PPUSH
5543: LD_INT 59
5545: PPUSH
5546: CALL_OW 111
// if Kamil then
5550: LD_EXP 26
5554: IFFALSE 5571
// ComMoveXY ( Kamil , 80 , 58 ) ;
5556: LD_EXP 26
5560: PPUSH
5561: LD_INT 80
5563: PPUSH
5564: LD_INT 58
5566: PPUSH
5567: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5571: LD_EXP 23
5575: PPUSH
5576: LD_EXP 24
5580: PPUSH
5581: CALL_OW 179
// AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5585: LD_EXP 24
5589: PUSH
5590: LD_EXP 26
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: PPUSH
5599: LD_EXP 23
5603: PPUSH
5604: CALL_OW 179
// Say ( Heike , DH-3-start-c ) ;
5608: LD_EXP 23
5612: PPUSH
5613: LD_STRING DH-3-start-c
5615: PPUSH
5616: CALL_OW 88
// Say ( Givi , DG-4-start-c ) ;
5620: LD_EXP 24
5624: PPUSH
5625: LD_STRING DG-4-start-c
5627: PPUSH
5628: CALL_OW 88
// Say ( Heike , DH-5-start-c ) ;
5632: LD_EXP 23
5636: PPUSH
5637: LD_STRING DH-5-start-c
5639: PPUSH
5640: CALL_OW 88
// Say ( Givi , DG-5-start-c ) ;
5644: LD_EXP 24
5648: PPUSH
5649: LD_STRING DG-5-start-c
5651: PPUSH
5652: CALL_OW 88
// Say ( Heike , DH-6-start-c ) ;
5656: LD_EXP 23
5660: PPUSH
5661: LD_STRING DH-6-start-c
5663: PPUSH
5664: CALL_OW 88
// Say ( Givi , DG-6-start-c ) ;
5668: LD_EXP 24
5672: PPUSH
5673: LD_STRING DG-6-start-c
5675: PPUSH
5676: CALL_OW 88
// if Kamil then
5680: LD_EXP 26
5684: IFFALSE 5740
// begin ComTurnUnit ( Kamil , Heike ) ;
5686: LD_EXP 26
5690: PPUSH
5691: LD_EXP 23
5695: PPUSH
5696: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5700: LD_EXP 26
5704: PPUSH
5705: LD_STRING DKam-1-start-c
5707: PPUSH
5708: CALL_OW 88
// ComTurnUnit ( Givi , Kamil ) ;
5712: LD_EXP 24
5716: PPUSH
5717: LD_EXP 26
5721: PPUSH
5722: CALL_OW 119
// Say ( Givi , DG-7-start-c ) ;
5726: LD_EXP 24
5730: PPUSH
5731: LD_STRING DG-7-start-c
5733: PPUSH
5734: CALL_OW 88
// end else
5738: GO 5764
// begin Say ( Givi , DG-8-start-c ) ;
5740: LD_EXP 24
5744: PPUSH
5745: LD_STRING DG-8-start-c
5747: PPUSH
5748: CALL_OW 88
// Say ( Heike , DH-7-start-c ) ;
5752: LD_EXP 23
5756: PPUSH
5757: LD_STRING DH-7-start-c
5759: PPUSH
5760: CALL_OW 88
// end ; end else
5764: GO 6132
// if not Givi and Mike then
5766: LD_EXP 24
5770: NOT
5771: PUSH
5772: LD_EXP 25
5776: AND
5777: IFFALSE 6036
// begin AddComTurnUnit ( [ Mike , Kamil ] , Heike ) ;
5779: LD_EXP 25
5783: PUSH
5784: LD_EXP 26
5788: PUSH
5789: EMPTY
5790: LIST
5791: LIST
5792: PPUSH
5793: LD_EXP 23
5797: PPUSH
5798: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
5802: LD_EXP 23
5806: PPUSH
5807: LD_EXP 25
5811: PPUSH
5812: CALL_OW 179
// Say ( Mike , DM-1-start-b ) ;
5816: LD_EXP 25
5820: PPUSH
5821: LD_STRING DM-1-start-b
5823: PPUSH
5824: CALL_OW 88
// Say ( Heike , DH-1-start-b ) ;
5828: LD_EXP 23
5832: PPUSH
5833: LD_STRING DH-1-start-b
5835: PPUSH
5836: CALL_OW 88
// Say ( Mike , DM-2-start-b ) ;
5840: LD_EXP 25
5844: PPUSH
5845: LD_STRING DM-2-start-b
5847: PPUSH
5848: CALL_OW 88
// Say ( Heike , DH-2-start-b ) ;
5852: LD_EXP 23
5856: PPUSH
5857: LD_STRING DH-2-start-b
5859: PPUSH
5860: CALL_OW 88
// Say ( Mike , DM-3-start-b ) ;
5864: LD_EXP 25
5868: PPUSH
5869: LD_STRING DM-3-start-b
5871: PPUSH
5872: CALL_OW 88
// if Kamil then
5876: LD_EXP 26
5880: IFFALSE 5897
// ComMoveXY ( Kamil , 80 , 58 ) ;
5882: LD_EXP 26
5886: PPUSH
5887: LD_INT 80
5889: PPUSH
5890: LD_INT 58
5892: PPUSH
5893: CALL_OW 111
// ComMoveXY ( Heike , 83 , 56 ) ;
5897: LD_EXP 23
5901: PPUSH
5902: LD_INT 83
5904: PPUSH
5905: LD_INT 56
5907: PPUSH
5908: CALL_OW 111
// ComMoveXY ( Mike , 83 , 59 ) ;
5912: LD_EXP 25
5916: PPUSH
5917: LD_INT 83
5919: PPUSH
5920: LD_INT 59
5922: PPUSH
5923: CALL_OW 111
// AddComTurnUnit ( Heike , Mike ) ;
5927: LD_EXP 23
5931: PPUSH
5932: LD_EXP 25
5936: PPUSH
5937: CALL_OW 179
// AddComTurnUnit ( [ Kamil , Mike ] , Heike ) ;
5941: LD_EXP 26
5945: PUSH
5946: LD_EXP 25
5950: PUSH
5951: EMPTY
5952: LIST
5953: LIST
5954: PPUSH
5955: LD_EXP 23
5959: PPUSH
5960: CALL_OW 179
// Say ( Heike , DH-3-start-b ) ;
5964: LD_EXP 23
5968: PPUSH
5969: LD_STRING DH-3-start-b
5971: PPUSH
5972: CALL_OW 88
// Say ( Mike , DM-4-start-b ) ;
5976: LD_EXP 25
5980: PPUSH
5981: LD_STRING DM-4-start-b
5983: PPUSH
5984: CALL_OW 88
// if Kamil then
5988: LD_EXP 26
5992: IFFALSE 6022
// begin ComTurnUnit ( Kamil , Heike ) ;
5994: LD_EXP 26
5998: PPUSH
5999: LD_EXP 23
6003: PPUSH
6004: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
6008: LD_EXP 26
6012: PPUSH
6013: LD_STRING DKam-1-start-c
6015: PPUSH
6016: CALL_OW 88
// end else
6020: GO 6034
// begin Say ( Mike , DM-5-start-b ) ;
6022: LD_EXP 25
6026: PPUSH
6027: LD_STRING DM-5-start-b
6029: PPUSH
6030: CALL_OW 88
// end ; end else
6034: GO 6132
// if Kamil then
6036: LD_EXP 26
6040: IFFALSE 6120
// begin AddComTurnUnit ( Heike , Kamil ) ;
6042: LD_EXP 23
6046: PPUSH
6047: LD_EXP 26
6051: PPUSH
6052: CALL_OW 179
// AddComTurnUnit ( Kamil , Heike ) ;
6056: LD_EXP 26
6060: PPUSH
6061: LD_EXP 23
6065: PPUSH
6066: CALL_OW 179
// Say ( Heike , DH-1-start-f ) ;
6070: LD_EXP 23
6074: PPUSH
6075: LD_STRING DH-1-start-f
6077: PPUSH
6078: CALL_OW 88
// Say ( Kamil , DKam-1-start-f ) ;
6082: LD_EXP 26
6086: PPUSH
6087: LD_STRING DKam-1-start-f
6089: PPUSH
6090: CALL_OW 88
// Say ( Heike , DH-2-start-f ) ;
6094: LD_EXP 23
6098: PPUSH
6099: LD_STRING DH-2-start-f
6101: PPUSH
6102: CALL_OW 88
// Say ( Kamil , DKam-2-start-f ) ;
6106: LD_EXP 26
6110: PPUSH
6111: LD_STRING DKam-2-start-f
6113: PPUSH
6114: CALL_OW 88
// end else
6118: GO 6132
// begin Say ( Heike , DH-1-start-d ) ;
6120: LD_EXP 23
6124: PPUSH
6125: LD_STRING DH-1-start-d
6127: PPUSH
6128: CALL_OW 88
// end ; ComFree ( [ Heike , Givi , Mike , Kamil ] ) ;
6132: LD_EXP 23
6136: PUSH
6137: LD_EXP 24
6141: PUSH
6142: LD_EXP 25
6146: PUSH
6147: LD_EXP 26
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: PPUSH
6158: CALL_OW 139
// InGameOff ;
6162: CALL_OW 9
// ChangeMissionObjectives ( OEast ) ;
6166: LD_STRING OEast
6168: PPUSH
6169: CALL_OW 337
// SetAreaMapShow ( eastExitArea , 1 ) ;
6173: LD_INT 10
6175: PPUSH
6176: LD_INT 1
6178: PPUSH
6179: CALL_OW 424
// SaveForQuickRestart ;
6183: CALL_OW 22
// wait ( 0 0$20 ) ;
6187: LD_INT 700
6189: PPUSH
6190: CALL_OW 67
// SendSciToForest ;
6194: CALL 1524 0 0
// if Difficulty = 1 then
6198: LD_OWVAR 67
6202: PUSH
6203: LD_INT 1
6205: EQUAL
6206: IFFALSE 6210
// exit ;
6208: GO 6331
// wait ( [ 5 5$00 , 2 2$30 , 2 2$00 ] [ Difficulty - 1 ] ) ;
6210: LD_INT 10500
6212: PUSH
6213: LD_INT 5250
6215: PUSH
6216: LD_INT 4200
6218: PUSH
6219: EMPTY
6220: LIST
6221: LIST
6222: LIST
6223: PUSH
6224: LD_OWVAR 67
6228: PUSH
6229: LD_INT 1
6231: MINUS
6232: ARRAY
6233: PPUSH
6234: CALL_OW 67
// if usAlert then
6238: LD_EXP 10
6242: IFFALSE 6246
// exit ;
6244: GO 6331
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
6246: LD_ADDR_VAR 0 3
6250: PUSH
6251: LD_INT 22
6253: PUSH
6254: LD_INT 1
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PUSH
6261: LD_INT 25
6263: PUSH
6264: LD_INT 2
6266: PUSH
6267: EMPTY
6268: LIST
6269: LIST
6270: PUSH
6271: EMPTY
6272: LIST
6273: LIST
6274: PPUSH
6275: CALL_OW 69
6279: ST_TO_ADDR
// if not tmp then
6280: LD_VAR 0 3
6284: NOT
6285: IFFALSE 6289
// exit ;
6287: GO 6331
// ComExitBuilding ( tmp ) ;
6289: LD_VAR 0 3
6293: PPUSH
6294: CALL_OW 122
// AddComBuild ( tmp , b_breastwork , 40 , 13 , 3 ) ;
6298: LD_VAR 0 3
6302: PPUSH
6303: LD_INT 31
6305: PPUSH
6306: LD_INT 40
6308: PPUSH
6309: LD_INT 13
6311: PPUSH
6312: LD_INT 3
6314: PPUSH
6315: CALL_OW 205
// AddComEnterUnit ( tmp , Delta ) ;
6319: LD_VAR 0 3
6323: PPUSH
6324: LD_INT 1
6326: PPUSH
6327: CALL_OW 180
// end ;
6331: LD_VAR 0 1
6335: RET
// every 3 3$00 do
6336: GO 6338
6338: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
6339: LD_INT 1
6341: PPUSH
6342: LD_INT 570
6344: PPUSH
6345: LD_INT 350
6347: PPUSH
6348: CALL_OW 550
// wait ( 2 2$40 ) ;
6352: LD_INT 5600
6354: PPUSH
6355: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
6359: LD_INT 0
6361: PPUSH
6362: LD_INT 570
6364: PPUSH
6365: LD_INT 350
6367: PPUSH
6368: CALL_OW 550
// end ;
6372: END
// every 0 0$1 trigger not aviradzeSpotted and See ( 2 , Aviradze ) do var i , pepAmount ;
6373: LD_EXP 4
6377: NOT
6378: PUSH
6379: LD_INT 2
6381: PPUSH
6382: LD_EXP 27
6386: PPUSH
6387: CALL_OW 292
6391: AND
6392: IFFALSE 7317
6394: GO 6396
6396: DISABLE
6397: LD_INT 0
6399: PPUSH
6400: PPUSH
// begin SetAreaMapShow ( eastExitArea , 0 ) ;
6401: LD_INT 10
6403: PPUSH
6404: LD_INT 0
6406: PPUSH
6407: CALL_OW 424
// aviradzeSpotted := true ;
6411: LD_ADDR_EXP 4
6415: PUSH
6416: LD_INT 1
6418: ST_TO_ADDR
// pepAmount := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ;
6419: LD_ADDR_VAR 0 2
6423: PUSH
6424: LD_INT 22
6426: PUSH
6427: LD_INT 2
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: PUSH
6434: LD_INT 21
6436: PUSH
6437: LD_INT 1
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: PUSH
6444: EMPTY
6445: LIST
6446: LIST
6447: PPUSH
6448: CALL_OW 69
6452: ST_TO_ADDR
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6453: LD_EXP 23
6457: PPUSH
6458: LD_EXP 27
6462: PPUSH
6463: CALL_OW 250
6467: PPUSH
6468: LD_EXP 27
6472: PPUSH
6473: CALL_OW 251
6477: PPUSH
6478: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6482: LD_INT 35
6484: PPUSH
6485: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 16 ;
6489: LD_EXP 23
6493: PPUSH
6494: LD_EXP 27
6498: PPUSH
6499: CALL_OW 296
6503: PUSH
6504: LD_INT 16
6506: LESS
6507: IFFALSE 6482
// InGameOn ;
6509: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
6513: LD_INT 5
6515: PPUSH
6516: LD_INT 2
6518: PPUSH
6519: CALL_OW 343
// if pepAmount > 2 then
6523: LD_VAR 0 2
6527: PUSH
6528: LD_INT 2
6530: GREATER
6531: IFFALSE 6547
// Say ( Heike , DH-1-spot ) else
6533: LD_EXP 23
6537: PPUSH
6538: LD_STRING DH-1-spot
6540: PPUSH
6541: CALL_OW 88
6545: GO 6559
// Say ( Heike , DH-1-spot-d ) ;
6547: LD_EXP 23
6551: PPUSH
6552: LD_STRING DH-1-spot-d
6554: PPUSH
6555: CALL_OW 88
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6559: LD_EXP 23
6563: PPUSH
6564: LD_EXP 27
6568: PPUSH
6569: CALL_OW 250
6573: PPUSH
6574: LD_EXP 27
6578: PPUSH
6579: CALL_OW 251
6583: PPUSH
6584: CALL_OW 111
// for i in [ Kamil , Mike , Givi ] do
6588: LD_ADDR_VAR 0 1
6592: PUSH
6593: LD_EXP 26
6597: PUSH
6598: LD_EXP 25
6602: PUSH
6603: LD_EXP 24
6607: PUSH
6608: EMPTY
6609: LIST
6610: LIST
6611: LIST
6612: PUSH
6613: FOR_IN
6614: IFFALSE 6653
// if GetDistUnits ( i , Aviradze ) > 7 then
6616: LD_VAR 0 1
6620: PPUSH
6621: LD_EXP 27
6625: PPUSH
6626: CALL_OW 296
6630: PUSH
6631: LD_INT 7
6633: GREATER
6634: IFFALSE 6651
// ComMoveXY ( i , 102 , 40 ) ;
6636: LD_VAR 0 1
6640: PPUSH
6641: LD_INT 102
6643: PPUSH
6644: LD_INT 40
6646: PPUSH
6647: CALL_OW 111
6651: GO 6613
6653: POP
6654: POP
// repeat wait ( 0 0$1 ) ;
6655: LD_INT 35
6657: PPUSH
6658: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 6 ;
6662: LD_EXP 23
6666: PPUSH
6667: LD_EXP 27
6671: PPUSH
6672: CALL_OW 296
6676: PUSH
6677: LD_INT 6
6679: LESS
6680: IFFALSE 6655
// ComTurnUnit ( Heike , Aviradze ) ;
6682: LD_EXP 23
6686: PPUSH
6687: LD_EXP 27
6691: PPUSH
6692: CALL_OW 119
// ComTurnUnit ( [ Aviradze , Sophia , Kaia ] , Heike ) ;
6696: LD_EXP 27
6700: PUSH
6701: LD_EXP 29
6705: PUSH
6706: LD_EXP 28
6710: PUSH
6711: EMPTY
6712: LIST
6713: LIST
6714: LIST
6715: PPUSH
6716: LD_EXP 23
6720: PPUSH
6721: CALL_OW 119
// if pepAmount > 1 then
6725: LD_VAR 0 2
6729: PUSH
6730: LD_INT 1
6732: GREATER
6733: IFFALSE 6785
// begin wait ( 0 0$2 ) ;
6735: LD_INT 70
6737: PPUSH
6738: CALL_OW 67
// ComTurnUnit ( [ Kamil , Mike , Givi ] , Aviradze ) ;
6742: LD_EXP 26
6746: PUSH
6747: LD_EXP 25
6751: PUSH
6752: LD_EXP 24
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: LIST
6761: PPUSH
6762: LD_EXP 27
6766: PPUSH
6767: CALL_OW 119
// Say ( Heike , DH-2-spot ) ;
6771: LD_EXP 23
6775: PPUSH
6776: LD_STRING DH-2-spot
6778: PPUSH
6779: CALL_OW 88
// end else
6783: GO 6797
// Say ( Heike , DH-2-spot-d ) ;
6785: LD_EXP 23
6789: PPUSH
6790: LD_STRING DH-2-spot-d
6792: PPUSH
6793: CALL_OW 88
// Say ( Aviradze , DA-2-spot ) ;
6797: LD_EXP 27
6801: PPUSH
6802: LD_STRING DA-2-spot
6804: PPUSH
6805: CALL_OW 88
// Say ( Heike , DH-3-spot ) ;
6809: LD_EXP 23
6813: PPUSH
6814: LD_STRING DH-3-spot
6816: PPUSH
6817: CALL_OW 88
// ComMoveUnit ( Kaia , Heike ) ;
6821: LD_EXP 28
6825: PPUSH
6826: LD_EXP 23
6830: PPUSH
6831: CALL_OW 112
// ComTurnUnit ( Heike , Kaia ) ;
6835: LD_EXP 23
6839: PPUSH
6840: LD_EXP 28
6844: PPUSH
6845: CALL_OW 119
// wait ( 0 0$0.3 ) ;
6849: LD_INT 10
6851: PPUSH
6852: CALL_OW 67
// Say ( Kaia , DK-3-spot ) ;
6856: LD_EXP 28
6860: PPUSH
6861: LD_STRING DK-3-spot
6863: PPUSH
6864: CALL_OW 88
// ComTurnUnit ( Kaia , Heike ) ;
6868: LD_EXP 28
6872: PPUSH
6873: LD_EXP 23
6877: PPUSH
6878: CALL_OW 119
// Say ( Heike , DH-4-spot ) ;
6882: LD_EXP 23
6886: PPUSH
6887: LD_STRING DH-4-spot
6889: PPUSH
6890: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6894: LD_INT 10
6896: PPUSH
6897: CALL_OW 67
// ComTurnUnit ( Heike , Aviradze ) ;
6901: LD_EXP 23
6905: PPUSH
6906: LD_EXP 27
6910: PPUSH
6911: CALL_OW 119
// Say ( Aviradze , DA-4-spot ) ;
6915: LD_EXP 27
6919: PPUSH
6920: LD_STRING DA-4-spot
6922: PPUSH
6923: CALL_OW 88
// ComTurnUnit ( Kaia , Aviradze ) ;
6927: LD_EXP 28
6931: PPUSH
6932: LD_EXP 27
6936: PPUSH
6937: CALL_OW 119
// Say ( Kaia , DK-4-spot ) ;
6941: LD_EXP 28
6945: PPUSH
6946: LD_STRING DK-4-spot
6948: PPUSH
6949: CALL_OW 88
// ComTurnUnit ( Aviradze , Kaia ) ;
6953: LD_EXP 27
6957: PPUSH
6958: LD_EXP 28
6962: PPUSH
6963: CALL_OW 119
// Say ( Aviradze , DA-5-spot ) ;
6967: LD_EXP 27
6971: PPUSH
6972: LD_STRING DA-5-spot
6974: PPUSH
6975: CALL_OW 88
// Say ( Kaia , DK-5-spot ) ;
6979: LD_EXP 28
6983: PPUSH
6984: LD_STRING DK-5-spot
6986: PPUSH
6987: CALL_OW 88
// if pepAmount = 1 then
6991: LD_VAR 0 2
6995: PUSH
6996: LD_INT 1
6998: EQUAL
6999: IFFALSE 7013
// Say ( Heike , DH-5-spot-f ) ;
7001: LD_EXP 23
7005: PPUSH
7006: LD_STRING DH-5-spot-f
7008: PPUSH
7009: CALL_OW 88
// if pepAmount < 3 then
7013: LD_VAR 0 2
7017: PUSH
7018: LD_INT 3
7020: LESS
7021: IFFALSE 7037
// Say ( Aviradze , DA-6-spot-f ) else
7023: LD_EXP 27
7027: PPUSH
7028: LD_STRING DA-6-spot-f
7030: PPUSH
7031: CALL_OW 88
7035: GO 7073
// if pepAmount < 4 then
7037: LD_VAR 0 2
7041: PUSH
7042: LD_INT 4
7044: LESS
7045: IFFALSE 7061
// Say ( Aviradze , DA-6-spot-c ) else
7047: LD_EXP 27
7051: PPUSH
7052: LD_STRING DA-6-spot-c
7054: PPUSH
7055: CALL_OW 88
7059: GO 7073
// Say ( Aviradze , DA-6-spot ) ;
7061: LD_EXP 27
7065: PPUSH
7066: LD_STRING DA-6-spot
7068: PPUSH
7069: CALL_OW 88
// if Kamil then
7073: LD_EXP 26
7077: IFFALSE 7091
// Say ( Kamil , DKam-6-spot ) ;
7079: LD_EXP 26
7083: PPUSH
7084: LD_STRING DKam-6-spot
7086: PPUSH
7087: CALL_OW 88
// Say ( Kaia , DK-6-spot ) ;
7091: LD_EXP 28
7095: PPUSH
7096: LD_STRING DK-6-spot
7098: PPUSH
7099: CALL_OW 88
// ComTurnUnit ( Aviradze , Heike ) ;
7103: LD_EXP 27
7107: PPUSH
7108: LD_EXP 23
7112: PPUSH
7113: CALL_OW 119
// Say ( Aviradze , DA-7-spot ) ;
7117: LD_EXP 27
7121: PPUSH
7122: LD_STRING DA-7-spot
7124: PPUSH
7125: CALL_OW 88
// Say ( Heike , DH-7-spot ) ;
7129: LD_EXP 23
7133: PPUSH
7134: LD_STRING DH-7-spot
7136: PPUSH
7137: CALL_OW 88
// if sciCounterKill >= 3 then
7141: LD_EXP 9
7145: PUSH
7146: LD_INT 3
7148: GREATEREQUAL
7149: IFFALSE 7175
// begin Say ( Heike , DH-7-spot-a ) ;
7151: LD_EXP 23
7155: PPUSH
7156: LD_STRING DH-7-spot-a
7158: PPUSH
7159: CALL_OW 88
// Say ( Aviradze , DA-8-spot-a ) ;
7163: LD_EXP 27
7167: PPUSH
7168: LD_STRING DA-8-spot-a
7170: PPUSH
7171: CALL_OW 88
// end ; InGameOff ;
7175: CALL_OW 9
// if sciCounterKill < 3 then
7179: LD_EXP 9
7183: PUSH
7184: LD_INT 3
7186: LESS
7187: IFFALSE 7255
// begin SetSide ( Kaia , 2 ) ;
7189: LD_EXP 28
7193: PPUSH
7194: LD_INT 2
7196: PPUSH
7197: CALL_OW 235
// ComFree ( Kaia ) ;
7201: LD_EXP 28
7205: PPUSH
7206: CALL_OW 139
// if Kamil then
7210: LD_EXP 26
7214: IFFALSE 7237
// begin ComHold ( Kamil ) ;
7216: LD_EXP 26
7220: PPUSH
7221: CALL_OW 140
// SetSide ( Kamil , 5 ) ;
7225: LD_EXP 26
7229: PPUSH
7230: LD_INT 5
7232: PPUSH
7233: CALL_OW 235
// end ; ChangeMissionObjectives ( OSci ) ;
7237: LD_STRING OSci
7239: PPUSH
7240: CALL_OW 337
// ComFree ( Aviradze ) ;
7244: LD_EXP 27
7248: PPUSH
7249: CALL_OW 139
// end else
7253: GO 7317
// begin for i in FilterAllUnits ( [ f_side , 5 ] ) do
7255: LD_ADDR_VAR 0 1
7259: PUSH
7260: LD_INT 22
7262: PUSH
7263: LD_INT 5
7265: PUSH
7266: EMPTY
7267: LIST
7268: LIST
7269: PPUSH
7270: CALL_OW 69
7274: PUSH
7275: FOR_IN
7276: IFFALSE 7292
// SetSide ( i , 2 ) ;
7278: LD_VAR 0 1
7282: PPUSH
7283: LD_INT 2
7285: PPUSH
7286: CALL_OW 235
7290: GO 7275
7292: POP
7293: POP
// aviradzeQuestDone := true ;
7294: LD_ADDR_EXP 8
7298: PUSH
7299: LD_INT 1
7301: ST_TO_ADDR
// attackDeltaAllowed := true ;
7302: LD_ADDR_EXP 14
7306: PUSH
7307: LD_INT 1
7309: ST_TO_ADDR
// ChangeMissionObjectives ( ODelta2 ) ;
7310: LD_STRING ODelta2
7312: PPUSH
7313: CALL_OW 337
// end ; end ;
7317: PPOPN 2
7319: END
// every 0 0$2 trigger GetDistUnitXY ( Aviradze , 106 , 38 ) > 8 and GetSide ( Aviradze ) = 5 do
7320: LD_EXP 27
7324: PPUSH
7325: LD_INT 106
7327: PPUSH
7328: LD_INT 38
7330: PPUSH
7331: CALL_OW 297
7335: PUSH
7336: LD_INT 8
7338: GREATER
7339: PUSH
7340: LD_EXP 27
7344: PPUSH
7345: CALL_OW 255
7349: PUSH
7350: LD_INT 5
7352: EQUAL
7353: AND
7354: IFFALSE 7375
7356: GO 7358
7358: DISABLE
// begin enable ;
7359: ENABLE
// ComMoveXY ( Aviradze , 106 , 38 ) ;
7360: LD_EXP 27
7364: PPUSH
7365: LD_INT 106
7367: PPUSH
7368: LD_INT 38
7370: PPUSH
7371: CALL_OW 111
// end ;
7375: END
// every 0 0$2 trigger usAlert and not aviradzeQuestDone do
7376: LD_EXP 10
7380: PUSH
7381: LD_EXP 8
7385: NOT
7386: AND
7387: IFFALSE 7404
7389: GO 7391
7391: DISABLE
// SayRadioNoFaceNoName ( Lynch , DDelta-Alarm-1 ) ;
7392: LD_EXP 20
7396: PPUSH
7397: LD_STRING DDelta-Alarm-1
7399: PPUSH
7400: CALL 75348 0 2
7404: END
// every 0 0$1 trigger not sciSpotted and GetDistUnits ( NearestUnitToUnit ( usSci , Heike ) , Heike ) < 8 and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and not aviradzeSpotted do
7405: LD_EXP 7
7409: NOT
7410: PUSH
7411: LD_EXP 22
7415: PPUSH
7416: LD_EXP 23
7420: PPUSH
7421: CALL_OW 74
7425: PPUSH
7426: LD_EXP 23
7430: PPUSH
7431: CALL_OW 296
7435: PUSH
7436: LD_INT 8
7438: LESS
7439: AND
7440: PUSH
7441: LD_INT 2
7443: PPUSH
7444: LD_EXP 22
7448: PPUSH
7449: LD_EXP 23
7453: PPUSH
7454: CALL_OW 74
7458: PPUSH
7459: CALL_OW 292
7463: AND
7464: PUSH
7465: LD_INT 22
7467: PUSH
7468: LD_INT 2
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: PUSH
7475: LD_INT 21
7477: PUSH
7478: LD_INT 1
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: PUSH
7485: EMPTY
7486: LIST
7487: LIST
7488: PPUSH
7489: CALL_OW 69
7493: PUSH
7494: LD_INT 1
7496: GREATER
7497: AND
7498: PUSH
7499: LD_EXP 4
7503: NOT
7504: AND
7505: IFFALSE 7549
7507: GO 7509
7509: DISABLE
// begin sciSpotted := true ;
7510: LD_ADDR_EXP 7
7514: PUSH
7515: LD_INT 1
7517: ST_TO_ADDR
// CenterNowOnUnits ( NearestUnitToUnit ( usSci , Heike ) ) ;
7518: LD_EXP 22
7522: PPUSH
7523: LD_EXP 23
7527: PPUSH
7528: CALL_OW 74
7532: PPUSH
7533: CALL_OW 87
// Say ( Heike , DH-1-sci ) ;
7537: LD_EXP 23
7541: PPUSH
7542: LD_STRING DH-1-sci
7544: PPUSH
7545: CALL_OW 88
// end ;
7549: END
// every 0 0$1 trigger aviradzeSpotted and not sciSpotted and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and aviradzeSpotted and not aviradzeQuestDone do var un ;
7550: LD_EXP 4
7554: PUSH
7555: LD_EXP 7
7559: NOT
7560: AND
7561: PUSH
7562: LD_INT 2
7564: PPUSH
7565: LD_EXP 22
7569: PPUSH
7570: LD_EXP 23
7574: PPUSH
7575: CALL_OW 74
7579: PPUSH
7580: CALL_OW 292
7584: AND
7585: PUSH
7586: LD_INT 22
7588: PUSH
7589: LD_INT 2
7591: PUSH
7592: EMPTY
7593: LIST
7594: LIST
7595: PUSH
7596: LD_INT 21
7598: PUSH
7599: LD_INT 1
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: PPUSH
7610: CALL_OW 69
7614: PUSH
7615: LD_INT 1
7617: GREATER
7618: AND
7619: PUSH
7620: LD_EXP 4
7624: AND
7625: PUSH
7626: LD_EXP 8
7630: NOT
7631: AND
7632: IFFALSE 7773
7634: GO 7636
7636: DISABLE
7637: LD_INT 0
7639: PPUSH
// begin sciSpotted := true ;
7640: LD_ADDR_EXP 7
7644: PUSH
7645: LD_INT 1
7647: ST_TO_ADDR
// un := NearestUnitToUnit ( usSci , Heike ) ;
7648: LD_ADDR_VAR 0 1
7652: PUSH
7653: LD_EXP 22
7657: PPUSH
7658: LD_EXP 23
7662: PPUSH
7663: CALL_OW 74
7667: ST_TO_ADDR
// DialogueOn ;
7668: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 2 , - 3 ) ;
7672: LD_VAR 0 1
7676: PPUSH
7677: CALL_OW 250
7681: PPUSH
7682: LD_VAR 0 1
7686: PPUSH
7687: CALL_OW 251
7691: PPUSH
7692: LD_INT 2
7694: PPUSH
7695: LD_INT 3
7697: NEG
7698: PPUSH
7699: CALL_OW 330
// CenterNowOnUnits ( un ) ;
7703: LD_VAR 0 1
7707: PPUSH
7708: CALL_OW 87
// Say ( Heike , DH-1-sci-a ) ;
7712: LD_EXP 23
7716: PPUSH
7717: LD_STRING DH-1-sci-a
7719: PPUSH
7720: CALL_OW 88
// if Mike then
7724: LD_EXP 25
7728: IFFALSE 7742
// Say ( Mike , DM-1-sci-a ) ;
7730: LD_EXP 25
7734: PPUSH
7735: LD_STRING DM-1-sci-a
7737: PPUSH
7738: CALL_OW 88
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 2 ) ;
7742: LD_VAR 0 1
7746: PPUSH
7747: CALL_OW 250
7751: PPUSH
7752: LD_VAR 0 1
7756: PPUSH
7757: CALL_OW 251
7761: PPUSH
7762: LD_INT 2
7764: PPUSH
7765: CALL_OW 331
// DialogueOff ;
7769: CALL_OW 7
// end ;
7773: PPOPN 1
7775: END
// every 0 0$1 trigger usAlert and ( GetLives ( Gladstone ) < 1000 or GetLives ( usLab ) < 999 ) do var veh ;
7776: LD_EXP 10
7780: PUSH
7781: LD_EXP 19
7785: PPUSH
7786: CALL_OW 256
7790: PUSH
7791: LD_INT 1000
7793: LESS
7794: PUSH
7795: LD_INT 3
7797: PPUSH
7798: CALL_OW 256
7802: PUSH
7803: LD_INT 999
7805: LESS
7806: OR
7807: AND
7808: IFFALSE 8064
7810: GO 7812
7812: DISABLE
7813: LD_INT 0
7815: PPUSH
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
7816: LD_ADDR_VAR 0 1
7820: PUSH
7821: LD_INT 22
7823: PUSH
7824: LD_INT 1
7826: PUSH
7827: EMPTY
7828: LIST
7829: LIST
7830: PUSH
7831: LD_INT 21
7833: PUSH
7834: LD_INT 2
7836: PUSH
7837: EMPTY
7838: LIST
7839: LIST
7840: PUSH
7841: LD_INT 58
7843: PUSH
7844: EMPTY
7845: LIST
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: LIST
7851: PPUSH
7852: CALL_OW 69
7856: ST_TO_ADDR
// if veh and IsOk ( Gladstone ) then
7857: LD_VAR 0 1
7861: PUSH
7862: LD_EXP 19
7866: PPUSH
7867: CALL_OW 302
7871: AND
7872: IFFALSE 7914
// begin if IsInUnit ( Gladstone ) then
7874: LD_EXP 19
7878: PPUSH
7879: CALL_OW 310
7883: IFFALSE 7894
// ComExitBuilding ( Gladstone ) ;
7885: LD_EXP 19
7889: PPUSH
7890: CALL_OW 122
// AddComEnterUnit ( Gladstone , veh [ 1 ] ) ;
7894: LD_EXP 19
7898: PPUSH
7899: LD_VAR 0 1
7903: PUSH
7904: LD_INT 1
7906: ARRAY
7907: PPUSH
7908: CALL_OW 180
// end else
7912: GO 7934
// if IsInUnit ( Gladstone ) then
7914: LD_EXP 19
7918: PPUSH
7919: CALL_OW 310
7923: IFFALSE 7934
// ComExitBuilding ( Gladstone ) ;
7925: LD_EXP 19
7929: PPUSH
7930: CALL_OW 122
// AddComMoveXY ( Gladstone , 27 , 51 ) ;
7934: LD_EXP 19
7938: PPUSH
7939: LD_INT 27
7941: PPUSH
7942: LD_INT 51
7944: PPUSH
7945: CALL_OW 171
// Say ( Gladstone , D8-Glad-2 ) ;
7949: LD_EXP 19
7953: PPUSH
7954: LD_STRING D8-Glad-2
7956: PPUSH
7957: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7961: LD_INT 35
7963: PPUSH
7964: CALL_OW 67
// until IsAt ( Gladstone , 27 , 51 ) or IsAt ( IsInUnit ( Gladstone ) , 27 , 51 ) or IsDead ( Gladstone ) ;
7968: LD_EXP 19
7972: PPUSH
7973: LD_INT 27
7975: PPUSH
7976: LD_INT 51
7978: PPUSH
7979: CALL_OW 307
7983: PUSH
7984: LD_EXP 19
7988: PPUSH
7989: CALL_OW 310
7993: PPUSH
7994: LD_INT 27
7996: PPUSH
7997: LD_INT 51
7999: PPUSH
8000: CALL_OW 307
8004: OR
8005: PUSH
8006: LD_EXP 19
8010: PPUSH
8011: CALL_OW 301
8015: OR
8016: IFFALSE 7961
// if IsDead ( Gladstone ) then
8018: LD_EXP 19
8022: PPUSH
8023: CALL_OW 301
8027: IFFALSE 8031
// exit ;
8029: GO 8064
// RemoveUnit ( HexInfo ( 27 , 51 ) ) ;
8031: LD_INT 27
8033: PPUSH
8034: LD_INT 51
8036: PPUSH
8037: CALL_OW 428
8041: PPUSH
8042: CALL_OW 64
// gladstoneEscaped := true ;
8046: LD_ADDR_EXP 12
8050: PUSH
8051: LD_INT 1
8053: ST_TO_ADDR
// SaveVariable ( true , 02_GladstoneEscaped ) ;
8054: LD_INT 1
8056: PPUSH
8057: LD_STRING 02_GladstoneEscaped
8059: PPUSH
8060: CALL_OW 39
// end ;
8064: PPOPN 1
8066: END
// every 0 0$1 trigger aviradzeSpotted and ( sciCounterKill >= 3 or not usSci ) and not aviradzeQuestDone and GetSide ( Aviradze ) = 5 do
8067: LD_EXP 4
8071: PUSH
8072: LD_EXP 9
8076: PUSH
8077: LD_INT 3
8079: GREATEREQUAL
8080: PUSH
8081: LD_EXP 22
8085: NOT
8086: OR
8087: AND
8088: PUSH
8089: LD_EXP 8
8093: NOT
8094: AND
8095: PUSH
8096: LD_EXP 27
8100: PPUSH
8101: CALL_OW 255
8105: PUSH
8106: LD_INT 5
8108: EQUAL
8109: AND
8110: IFFALSE 8161
8112: GO 8114
8114: DISABLE
// begin DialogueOn ;
8115: CALL_OW 6
// Say ( Heike , DH-1-quest-done ) ;
8119: LD_EXP 23
8123: PPUSH
8124: LD_STRING DH-1-quest-done
8126: PPUSH
8127: CALL_OW 88
// if Givi then
8131: LD_EXP 24
8135: IFFALSE 8149
// Say ( Givi , DG-1-quest-done ) ;
8137: LD_EXP 24
8141: PPUSH
8142: LD_STRING DG-1-quest-done
8144: PPUSH
8145: CALL_OW 88
// DialogueOff ;
8149: CALL_OW 7
// aviradzeQuestDone := true ;
8153: LD_ADDR_EXP 8
8157: PUSH
8158: LD_INT 1
8160: ST_TO_ADDR
// end ;
8161: END
// every 0 0$1 trigger FilterUnitsInArea ( frontlineAttack , [ f_side , 2 ] ) > 1 and not aviradzeQuestDone and GetSide ( Delta ) <> 2 and IsOk ( Mike ) and IsOk ( Heike ) do
8162: LD_INT 11
8164: PPUSH
8165: LD_INT 22
8167: PUSH
8168: LD_INT 2
8170: PUSH
8171: EMPTY
8172: LIST
8173: LIST
8174: PPUSH
8175: CALL_OW 70
8179: PUSH
8180: LD_INT 1
8182: GREATER
8183: PUSH
8184: LD_EXP 8
8188: NOT
8189: AND
8190: PUSH
8191: LD_INT 1
8193: PPUSH
8194: CALL_OW 255
8198: PUSH
8199: LD_INT 2
8201: NONEQUAL
8202: AND
8203: PUSH
8204: LD_EXP 25
8208: PPUSH
8209: CALL_OW 302
8213: AND
8214: PUSH
8215: LD_EXP 23
8219: PPUSH
8220: CALL_OW 302
8224: AND
8225: IFFALSE 8370
8227: GO 8229
8229: DISABLE
// begin DialogueOn ;
8230: CALL_OW 6
// PlaceSeeing ( 47 , 19 , 2 , - 6 ) ;
8234: LD_INT 47
8236: PPUSH
8237: LD_INT 19
8239: PPUSH
8240: LD_INT 2
8242: PPUSH
8243: LD_INT 6
8245: NEG
8246: PPUSH
8247: CALL_OW 330
// RemoveSeeing ( 47 , 19 , 2 ) ;
8251: LD_INT 47
8253: PPUSH
8254: LD_INT 19
8256: PPUSH
8257: LD_INT 2
8259: PPUSH
8260: CALL_OW 331
// PlaceSeeing ( 34 , 32 , 2 , - 6 ) ;
8264: LD_INT 34
8266: PPUSH
8267: LD_INT 32
8269: PPUSH
8270: LD_INT 2
8272: PPUSH
8273: LD_INT 6
8275: NEG
8276: PPUSH
8277: CALL_OW 330
// RemoveSeeing ( 34 , 32 , 2 ) ;
8281: LD_INT 34
8283: PPUSH
8284: LD_INT 32
8286: PPUSH
8287: LD_INT 2
8289: PPUSH
8290: CALL_OW 331
// Say ( Mike , DM-Prem-1 ) ;
8294: LD_EXP 25
8298: PPUSH
8299: LD_STRING DM-Prem-1
8301: PPUSH
8302: CALL_OW 88
// Say ( Heike , DH-Prem-2 ) ;
8306: LD_EXP 23
8310: PPUSH
8311: LD_STRING DH-Prem-2
8313: PPUSH
8314: CALL_OW 88
// Say ( Heike , DH-Prem-3 ) ;
8318: LD_EXP 23
8322: PPUSH
8323: LD_STRING DH-Prem-3
8325: PPUSH
8326: CALL_OW 88
// Say ( Mike , DM-Prem-4 ) ;
8330: LD_EXP 25
8334: PPUSH
8335: LD_STRING DM-Prem-4
8337: PPUSH
8338: CALL_OW 88
// Say ( Mike , DM-Prem-5 ) ;
8342: LD_EXP 25
8346: PPUSH
8347: LD_STRING DM-Prem-5
8349: PPUSH
8350: CALL_OW 88
// Say ( Givi , DG-Prem-6 ) ;
8354: LD_EXP 24
8358: PPUSH
8359: LD_STRING DG-Prem-6
8361: PPUSH
8362: CALL_OW 88
// DialogueOff ;
8366: CALL_OW 7
// end ;
8370: END
// every 0 0$1 trigger See ( 5 , Heike ) and GetDistUnits ( Heike , Aviradze ) < 6 and aviradzeQuestDone and not attackDeltaAllowed do var i ;
8371: LD_INT 5
8373: PPUSH
8374: LD_EXP 23
8378: PPUSH
8379: CALL_OW 292
8383: PUSH
8384: LD_EXP 23
8388: PPUSH
8389: LD_EXP 27
8393: PPUSH
8394: CALL_OW 296
8398: PUSH
8399: LD_INT 6
8401: LESS
8402: AND
8403: PUSH
8404: LD_EXP 8
8408: AND
8409: PUSH
8410: LD_EXP 14
8414: NOT
8415: AND
8416: IFFALSE 8554
8418: GO 8420
8420: DISABLE
8421: LD_INT 0
8423: PPUSH
// begin attackDeltaAllowed := true ;
8424: LD_ADDR_EXP 14
8428: PUSH
8429: LD_INT 1
8431: ST_TO_ADDR
// InGameOn ;
8432: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
8436: LD_EXP 23
8440: PPUSH
8441: CALL_OW 87
// wait ( 0 0$0.3 ) ;
8445: LD_INT 10
8447: PPUSH
8448: CALL_OW 67
// ComTurnUnit ( Aviradze , Heike ) ;
8452: LD_EXP 27
8456: PPUSH
8457: LD_EXP 23
8461: PPUSH
8462: CALL_OW 119
// ComTurnUnit ( Heike , Aviradze ) ;
8466: LD_EXP 23
8470: PPUSH
8471: LD_EXP 27
8475: PPUSH
8476: CALL_OW 119
// Say ( Heike , DH-1-return ) ;
8480: LD_EXP 23
8484: PPUSH
8485: LD_STRING DH-1-return
8487: PPUSH
8488: CALL_OW 88
// Say ( Aviradze , DA-1-return ) ;
8492: LD_EXP 27
8496: PPUSH
8497: LD_STRING DA-1-return
8499: PPUSH
8500: CALL_OW 88
// InGameOff ;
8504: CALL_OW 9
// ChangeMissionObjectives ( ODelta ) ;
8508: LD_STRING ODelta
8510: PPUSH
8511: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
8515: LD_ADDR_VAR 0 1
8519: PUSH
8520: LD_INT 22
8522: PUSH
8523: LD_INT 5
8525: PUSH
8526: EMPTY
8527: LIST
8528: LIST
8529: PPUSH
8530: CALL_OW 69
8534: PUSH
8535: FOR_IN
8536: IFFALSE 8552
// SetSide ( i , 2 ) ;
8538: LD_VAR 0 1
8542: PPUSH
8543: LD_INT 2
8545: PPUSH
8546: CALL_OW 235
8550: GO 8535
8552: POP
8553: POP
// end ;
8554: PPOPN 1
8556: END
// every 0 0$1 trigger usAlert and not attackDeltaAllowed do
8557: LD_EXP 10
8561: PUSH
8562: LD_EXP 14
8566: NOT
8567: AND
8568: IFFALSE 8581
8570: GO 8572
8572: DISABLE
// spottedBeforeRadio := true ;
8573: LD_ADDR_EXP 6
8577: PUSH
8578: LD_INT 1
8580: ST_TO_ADDR
8581: END
// every 0 0$1 trigger attackDeltaAllowed and IsOk ( Markov ) and GetSide ( Delta ) = 1 and IsOk ( Lynch ) and not usAlert do var i , k , tmp ;
8582: LD_EXP 14
8586: PUSH
8587: LD_EXP 30
8591: PPUSH
8592: CALL_OW 302
8596: AND
8597: PUSH
8598: LD_INT 1
8600: PPUSH
8601: CALL_OW 255
8605: PUSH
8606: LD_INT 1
8608: EQUAL
8609: AND
8610: PUSH
8611: LD_EXP 20
8615: PPUSH
8616: CALL_OW 302
8620: AND
8621: PUSH
8622: LD_EXP 10
8626: NOT
8627: AND
8628: IFFALSE 9856
8630: GO 8632
8632: DISABLE
8633: LD_INT 0
8635: PPUSH
8636: PPUSH
8637: PPUSH
// begin trap := 0 ;
8638: LD_ADDR_EXP 17
8642: PUSH
8643: LD_INT 0
8645: ST_TO_ADDR
// wait ( 0 0$12 ) ;
8646: LD_INT 420
8648: PPUSH
8649: CALL_OW 67
// DialogueOn ;
8653: CALL_OW 6
// Say ( Markov , DMar-1-radio ) ;
8657: LD_EXP 30
8661: PPUSH
8662: LD_STRING DMar-1-radio
8664: PPUSH
8665: CALL_OW 88
// Say ( Heike , DH-1-radio ) ;
8669: LD_EXP 23
8673: PPUSH
8674: LD_STRING DH-1-radio
8676: PPUSH
8677: CALL_OW 88
// Say ( Markov , DMar-2-radio ) ;
8681: LD_EXP 30
8685: PPUSH
8686: LD_STRING DMar-2-radio
8688: PPUSH
8689: CALL_OW 88
// Say ( Heike , DH-2-radio ) ;
8693: LD_EXP 23
8697: PPUSH
8698: LD_STRING DH-2-radio
8700: PPUSH
8701: CALL_OW 88
// if IsOk ( Kamil ) or IsOk ( Sophia ) then
8705: LD_EXP 26
8709: PPUSH
8710: CALL_OW 302
8714: PUSH
8715: LD_EXP 29
8719: PPUSH
8720: CALL_OW 302
8724: OR
8725: IFFALSE 9856
// begin case Query ( Q1Trap ) of 1 :
8727: LD_STRING Q1Trap
8729: PPUSH
8730: CALL_OW 97
8734: PUSH
8735: LD_INT 1
8737: DOUBLE
8738: EQUAL
8739: IFTRUE 8743
8741: GO 8949
8743: POP
// begin if IsOk ( Kamil ) then
8744: LD_EXP 26
8748: PPUSH
8749: CALL_OW 302
8753: IFFALSE 8832
// begin Say ( Kamil , DKam-2-radio ) ;
8755: LD_EXP 26
8759: PPUSH
8760: LD_STRING DKam-2-radio
8762: PPUSH
8763: CALL_OW 88
// Say ( Kamil , DKam-3-radio ) ;
8767: LD_EXP 26
8771: PPUSH
8772: LD_STRING DKam-3-radio
8774: PPUSH
8775: CALL_OW 88
// SayRadioNoFaceNoName ( Lynch , DDelta-3-radio ) ;
8779: LD_EXP 20
8783: PPUSH
8784: LD_STRING DDelta-3-radio
8786: PPUSH
8787: CALL 75348 0 2
// dwait ( 0 0$01 ) ;
8791: LD_INT 35
8793: PPUSH
8794: CALL_OW 68
// Say ( Heike , DH-3-radio ) ;
8798: LD_EXP 23
8802: PPUSH
8803: LD_STRING DH-3-radio
8805: PPUSH
8806: CALL_OW 88
// Say ( Kamil , DKam-4-radio ) ;
8810: LD_EXP 26
8814: PPUSH
8815: LD_STRING DKam-4-radio
8817: PPUSH
8818: CALL_OW 88
// trap := 1 ;
8822: LD_ADDR_EXP 17
8826: PUSH
8827: LD_INT 1
8829: ST_TO_ADDR
// end else
8830: GO 8943
// begin Say ( Sophia , DS-1-radio ) ;
8832: LD_EXP 29
8836: PPUSH
8837: LD_STRING DS-1-radio
8839: PPUSH
8840: CALL_OW 88
// Say ( Sophia , DS-2-radio ) ;
8844: LD_EXP 29
8848: PPUSH
8849: LD_STRING DS-2-radio
8851: PPUSH
8852: CALL_OW 88
// SayRadioNoFaceNoName ( Lynch , DDelta-2-radio-s ) ;
8856: LD_EXP 20
8860: PPUSH
8861: LD_STRING DDelta-2-radio-s
8863: PPUSH
8864: CALL 75348 0 2
// Say ( Sophia , DS-3-radio ) ;
8868: LD_EXP 29
8872: PPUSH
8873: LD_STRING DS-3-radio
8875: PPUSH
8876: CALL_OW 88
// SayRadioNoFaceNoName ( Lynch , DDelta-3-radio-s ) ;
8880: LD_EXP 20
8884: PPUSH
8885: LD_STRING DDelta-3-radio-s
8887: PPUSH
8888: CALL 75348 0 2
// Say ( Sophia , DS-4-radio-s ) ;
8892: LD_EXP 29
8896: PPUSH
8897: LD_STRING DS-4-radio-s
8899: PPUSH
8900: CALL_OW 88
// SayRadioNoFaceNoName ( Lynch , DDelta-4-radio-s ) ;
8904: LD_EXP 20
8908: PPUSH
8909: LD_STRING DDelta-4-radio-s
8911: PPUSH
8912: CALL 75348 0 2
// dwait ( 0 0$01 ) ;
8916: LD_INT 35
8918: PPUSH
8919: CALL_OW 68
// Say ( Heike , DH-1-trap ) ;
8923: LD_EXP 23
8927: PPUSH
8928: LD_STRING DH-1-trap
8930: PPUSH
8931: CALL_OW 88
// trap := 0 ;
8935: LD_ADDR_EXP 17
8939: PUSH
8940: LD_INT 0
8942: ST_TO_ADDR
// end ; DialogueOff ;
8943: CALL_OW 7
// end ; 2 :
8947: GO 8967
8949: LD_INT 2
8951: DOUBLE
8952: EQUAL
8953: IFTRUE 8957
8955: GO 8966
8957: POP
// begin DialogueOff ;
8958: CALL_OW 7
// exit ;
8962: GO 9856
// end ; end ;
8964: GO 8967
8966: POP
// if trap = 1 then
8967: LD_EXP 17
8971: PUSH
8972: LD_INT 1
8974: EQUAL
8975: IFFALSE 9427
// begin PlaceSeeing ( 64 , 32 , 2 , 8 ) ;
8977: LD_INT 64
8979: PPUSH
8980: LD_INT 32
8982: PPUSH
8983: LD_INT 2
8985: PPUSH
8986: LD_INT 8
8988: PPUSH
8989: CALL_OW 330
// CenterOnXY ( 64 , 32 ) ;
8993: LD_INT 64
8995: PPUSH
8996: LD_INT 32
8998: PPUSH
8999: CALL_OW 84
// tmp := [ ] ;
9003: LD_ADDR_VAR 0 3
9007: PUSH
9008: EMPTY
9009: ST_TO_ADDR
// k := 3 ;
9010: LD_ADDR_VAR 0 2
9014: PUSH
9015: LD_INT 3
9017: ST_TO_ADDR
// if usForces < 3 then
9018: LD_EXP 21
9022: PUSH
9023: LD_INT 3
9025: LESS
9026: IFFALSE 9038
// k := usForces ;
9028: LD_ADDR_VAR 0 2
9032: PUSH
9033: LD_EXP 21
9037: ST_TO_ADDR
// for i := 1 to k do
9038: LD_ADDR_VAR 0 1
9042: PUSH
9043: DOUBLE
9044: LD_INT 1
9046: DEC
9047: ST_TO_ADDR
9048: LD_VAR 0 2
9052: PUSH
9053: FOR_TO
9054: IFFALSE 9109
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
9056: LD_ADDR_VAR 0 3
9060: PUSH
9061: LD_VAR 0 3
9065: PPUSH
9066: LD_VAR 0 3
9070: PUSH
9071: LD_INT 1
9073: PLUS
9074: PPUSH
9075: LD_EXP 21
9079: PUSH
9080: LD_INT 1
9082: ARRAY
9083: PPUSH
9084: CALL_OW 1
9088: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
9089: LD_ADDR_EXP 21
9093: PUSH
9094: LD_EXP 21
9098: PPUSH
9099: LD_INT 1
9101: PPUSH
9102: CALL_OW 3
9106: ST_TO_ADDR
// end ;
9107: GO 9053
9109: POP
9110: POP
// usPatrol := tmp ;
9111: LD_ADDR_EXP 16
9115: PUSH
9116: LD_VAR 0 3
9120: ST_TO_ADDR
// for i in tmp do
9121: LD_ADDR_VAR 0 1
9125: PUSH
9126: LD_VAR 0 3
9130: PUSH
9131: FOR_IN
9132: IFFALSE 9262
// begin if IsInUnit ( i ) then
9134: LD_VAR 0 1
9138: PPUSH
9139: CALL_OW 310
9143: IFFALSE 9154
// ComExitBuilding ( i ) ;
9145: LD_VAR 0 1
9149: PPUSH
9150: CALL_OW 122
// AddComAgressiveMove ( i , 63 , 31 ) ;
9154: LD_VAR 0 1
9158: PPUSH
9159: LD_INT 63
9161: PPUSH
9162: LD_INT 31
9164: PPUSH
9165: CALL_OW 174
// AddComWait ( i , 0 0$2 ) ;
9169: LD_VAR 0 1
9173: PPUSH
9174: LD_INT 70
9176: PPUSH
9177: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 43 ) ;
9181: LD_VAR 0 1
9185: PPUSH
9186: LD_INT 103
9188: PPUSH
9189: LD_INT 43
9191: PPUSH
9192: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
9196: LD_VAR 0 1
9200: PPUSH
9201: LD_INT 105
9203: PPUSH
9204: CALL_OW 202
// if Difficulty > 1 then
9208: LD_OWVAR 67
9212: PUSH
9213: LD_INT 1
9215: GREATER
9216: IFFALSE 9233
// AddComAgressiveMove ( i , 114 , 69 ) ;
9218: LD_VAR 0 1
9222: PPUSH
9223: LD_INT 114
9225: PPUSH
9226: LD_INT 69
9228: PPUSH
9229: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
9233: LD_VAR 0 1
9237: PPUSH
9238: LD_INT 105
9240: PPUSH
9241: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9245: LD_VAR 0 1
9249: PPUSH
9250: LD_INT 42
9252: PPUSH
9253: LD_INT 20
9255: PPUSH
9256: CALL_OW 174
// end ;
9260: GO 9131
9262: POP
9263: POP
// wait ( 0 0$8 ) ;
9264: LD_INT 280
9266: PPUSH
9267: CALL_OW 67
// RemoveSeeing ( 64 , 32 , 2 ) ;
9271: LD_INT 64
9273: PPUSH
9274: LD_INT 32
9276: PPUSH
9277: LD_INT 2
9279: PPUSH
9280: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
9284: LD_INT 35
9286: PPUSH
9287: CALL_OW 67
// for i in tmp do
9291: LD_ADDR_VAR 0 1
9295: PUSH
9296: LD_VAR 0 3
9300: PUSH
9301: FOR_IN
9302: IFFALSE 9333
// if IsDead ( i ) then
9304: LD_VAR 0 1
9308: PPUSH
9309: CALL_OW 301
9313: IFFALSE 9331
// tmp := tmp diff i ;
9315: LD_ADDR_VAR 0 3
9319: PUSH
9320: LD_VAR 0 3
9324: PUSH
9325: LD_VAR 0 1
9329: DIFF
9330: ST_TO_ADDR
9331: GO 9301
9333: POP
9334: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9335: LD_VAR 0 3
9339: NOT
9340: PUSH
9341: LD_VAR 0 3
9345: PPUSH
9346: LD_INT 95
9348: PUSH
9349: LD_INT 7
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: PUSH
9356: LD_INT 3
9358: PUSH
9359: LD_INT 60
9361: PUSH
9362: EMPTY
9363: LIST
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: PUSH
9369: EMPTY
9370: LIST
9371: LIST
9372: PPUSH
9373: CALL_OW 72
9377: PUSH
9378: LD_VAR 0 3
9382: EQUAL
9383: OR
9384: IFFALSE 9284
// if tmp then
9386: LD_VAR 0 3
9390: IFFALSE 9417
// begin usPatrol := [ ] ;
9392: LD_ADDR_EXP 16
9396: PUSH
9397: EMPTY
9398: ST_TO_ADDR
// usForces := usForces union tmp ;
9399: LD_ADDR_EXP 21
9403: PUSH
9404: LD_EXP 21
9408: PUSH
9409: LD_VAR 0 3
9413: UNION
9414: ST_TO_ADDR
// end else
9415: GO 9425
// trickyMove := true ;
9417: LD_ADDR_EXP 15
9421: PUSH
9422: LD_INT 1
9424: ST_TO_ADDR
// end else
9425: GO 9856
// begin tmp := [ ] ;
9427: LD_ADDR_VAR 0 3
9431: PUSH
9432: EMPTY
9433: ST_TO_ADDR
// k := 4 ;
9434: LD_ADDR_VAR 0 2
9438: PUSH
9439: LD_INT 4
9441: ST_TO_ADDR
// if usForces < 4 then
9442: LD_EXP 21
9446: PUSH
9447: LD_INT 4
9449: LESS
9450: IFFALSE 9462
// k := usForces ;
9452: LD_ADDR_VAR 0 2
9456: PUSH
9457: LD_EXP 21
9461: ST_TO_ADDR
// for i := 1 to k do
9462: LD_ADDR_VAR 0 1
9466: PUSH
9467: DOUBLE
9468: LD_INT 1
9470: DEC
9471: ST_TO_ADDR
9472: LD_VAR 0 2
9476: PUSH
9477: FOR_TO
9478: IFFALSE 9533
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
9480: LD_ADDR_VAR 0 3
9484: PUSH
9485: LD_VAR 0 3
9489: PPUSH
9490: LD_VAR 0 3
9494: PUSH
9495: LD_INT 1
9497: PLUS
9498: PPUSH
9499: LD_EXP 21
9503: PUSH
9504: LD_INT 1
9506: ARRAY
9507: PPUSH
9508: CALL_OW 1
9512: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
9513: LD_ADDR_EXP 21
9517: PUSH
9518: LD_EXP 21
9522: PPUSH
9523: LD_INT 1
9525: PPUSH
9526: CALL_OW 3
9530: ST_TO_ADDR
// end ;
9531: GO 9477
9533: POP
9534: POP
// if Lynch then
9535: LD_EXP 20
9539: IFFALSE 9557
// tmp := tmp ^ Lynch ;
9541: LD_ADDR_VAR 0 3
9545: PUSH
9546: LD_VAR 0 3
9550: PUSH
9551: LD_EXP 20
9555: ADD
9556: ST_TO_ADDR
// usPatrol := tmp ;
9557: LD_ADDR_EXP 16
9561: PUSH
9562: LD_VAR 0 3
9566: ST_TO_ADDR
// for i in tmp do
9567: LD_ADDR_VAR 0 1
9571: PUSH
9572: LD_VAR 0 3
9576: PUSH
9577: FOR_IN
9578: IFFALSE 9671
// begin if IsInUnit ( i ) then
9580: LD_VAR 0 1
9584: PPUSH
9585: CALL_OW 310
9589: IFFALSE 9600
// ComExitBuilding ( i ) ;
9591: LD_VAR 0 1
9595: PPUSH
9596: CALL_OW 122
// AddComAgressiveMove ( i , 69 , 15 ) ;
9600: LD_VAR 0 1
9604: PPUSH
9605: LD_INT 69
9607: PPUSH
9608: LD_INT 15
9610: PPUSH
9611: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9615: LD_VAR 0 1
9619: PPUSH
9620: LD_INT 700
9622: PPUSH
9623: CALL_OW 202
// AddComAgressiveMove ( i , 55 , 43 ) ;
9627: LD_VAR 0 1
9631: PPUSH
9632: LD_INT 55
9634: PPUSH
9635: LD_INT 43
9637: PPUSH
9638: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9642: LD_VAR 0 1
9646: PPUSH
9647: LD_INT 700
9649: PPUSH
9650: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9654: LD_VAR 0 1
9658: PPUSH
9659: LD_INT 42
9661: PPUSH
9662: LD_INT 20
9664: PPUSH
9665: CALL_OW 174
// end ;
9669: GO 9577
9671: POP
9672: POP
// repeat wait ( 0 0$1 ) ;
9673: LD_INT 35
9675: PPUSH
9676: CALL_OW 67
// for i in tmp do
9680: LD_ADDR_VAR 0 1
9684: PUSH
9685: LD_VAR 0 3
9689: PUSH
9690: FOR_IN
9691: IFFALSE 9722
// if IsDead ( i ) then
9693: LD_VAR 0 1
9697: PPUSH
9698: CALL_OW 301
9702: IFFALSE 9720
// tmp := tmp diff i ;
9704: LD_ADDR_VAR 0 3
9708: PUSH
9709: LD_VAR 0 3
9713: PUSH
9714: LD_VAR 0 1
9718: DIFF
9719: ST_TO_ADDR
9720: GO 9690
9722: POP
9723: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9724: LD_VAR 0 3
9728: NOT
9729: PUSH
9730: LD_VAR 0 3
9734: PPUSH
9735: LD_INT 95
9737: PUSH
9738: LD_INT 7
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: PUSH
9745: LD_INT 3
9747: PUSH
9748: LD_INT 60
9750: PUSH
9751: EMPTY
9752: LIST
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: PUSH
9758: EMPTY
9759: LIST
9760: LIST
9761: PPUSH
9762: CALL_OW 72
9766: PUSH
9767: LD_VAR 0 3
9771: EQUAL
9772: OR
9773: IFFALSE 9673
// if not tmp then
9775: LD_VAR 0 3
9779: NOT
9780: IFFALSE 9792
// trickyMove := true else
9782: LD_ADDR_EXP 15
9786: PUSH
9787: LD_INT 1
9789: ST_TO_ADDR
9790: GO 9799
// usPatrol := [ ] ;
9792: LD_ADDR_EXP 16
9796: PUSH
9797: EMPTY
9798: ST_TO_ADDR
// if tmp diff Lynch then
9799: LD_VAR 0 3
9803: PUSH
9804: LD_EXP 20
9808: DIFF
9809: IFFALSE 9833
// usForces := usForces union ( tmp diff Lynch ) ;
9811: LD_ADDR_EXP 21
9815: PUSH
9816: LD_EXP 21
9820: PUSH
9821: LD_VAR 0 3
9825: PUSH
9826: LD_EXP 20
9830: DIFF
9831: UNION
9832: ST_TO_ADDR
// if IsOk ( Lynch ) then
9833: LD_EXP 20
9837: PPUSH
9838: CALL_OW 302
9842: IFFALSE 9856
// ComEnterUnit ( Lynch , Delta ) ;
9844: LD_EXP 20
9848: PPUSH
9849: LD_INT 1
9851: PPUSH
9852: CALL_OW 120
// end ; end ; end ;
9856: PPOPN 3
9858: END
// every 0 0$1 trigger trickyMove do
9859: LD_EXP 15
9863: IFFALSE 9875
9865: GO 9867
9867: DISABLE
// SetAchievement ( ACH_TRAP ) ;
9868: LD_STRING ACH_TRAP
9870: PPUSH
9871: CALL_OW 543
9875: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ) do
9876: LD_INT 22
9878: PUSH
9879: LD_INT 2
9881: PUSH
9882: EMPTY
9883: LIST
9884: LIST
9885: PUSH
9886: LD_INT 23
9888: PUSH
9889: LD_INT 1
9891: PUSH
9892: EMPTY
9893: LIST
9894: LIST
9895: PUSH
9896: LD_INT 21
9898: PUSH
9899: LD_INT 2
9901: PUSH
9902: EMPTY
9903: LIST
9904: LIST
9905: PUSH
9906: EMPTY
9907: LIST
9908: LIST
9909: LIST
9910: PPUSH
9911: CALL_OW 69
9915: IFFALSE 9927
9917: GO 9919
9919: DISABLE
// SetAchievement ( ACH_SCRAP ) ;
9920: LD_STRING ACH_SCRAP
9922: PPUSH
9923: CALL_OW 543
9927: END
// every 0 0$1 trigger UnitFilter ( usPatrol , [ f_see , 2 ] ) and See ( 1 , Heike ) do
9928: LD_EXP 16
9932: PPUSH
9933: LD_INT 101
9935: PUSH
9936: LD_INT 2
9938: PUSH
9939: EMPTY
9940: LIST
9941: LIST
9942: PPUSH
9943: CALL_OW 72
9947: PUSH
9948: LD_INT 1
9950: PPUSH
9951: LD_EXP 23
9955: PPUSH
9956: CALL_OW 292
9960: AND
9961: IFFALSE 10094
9963: GO 9965
9965: DISABLE
// begin if not trap then
9966: LD_EXP 17
9970: NOT
9971: IFFALSE 9999
// begin Say ( Heike , DH-2-trap ) ;
9973: LD_EXP 23
9977: PPUSH
9978: LD_STRING DH-2-trap
9980: PPUSH
9981: CALL_OW 88
// Say ( Mike , DM-2-trap ) ;
9985: LD_EXP 25
9989: PPUSH
9990: LD_STRING DM-2-trap
9992: PPUSH
9993: CALL_OW 88
// end else
9997: GO 10011
// begin Say ( Heike , DH-1-trap-a ) ;
9999: LD_EXP 23
10003: PPUSH
10004: LD_STRING DH-1-trap-a
10006: PPUSH
10007: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
10011: LD_INT 35
10013: PPUSH
10014: CALL_OW 67
// until trickyMove ;
10018: LD_EXP 15
10022: IFFALSE 10011
// Say ( Heike , DH-3-trap ) ;
10024: LD_EXP 23
10028: PPUSH
10029: LD_STRING DH-3-trap
10031: PPUSH
10032: CALL_OW 88
// if IsOk ( Givi ) and IsOk ( Kaia ) then
10036: LD_EXP 24
10040: PPUSH
10041: CALL_OW 302
10045: PUSH
10046: LD_EXP 28
10050: PPUSH
10051: CALL_OW 302
10055: AND
10056: IFFALSE 10094
// begin Say ( Givi , DG-3-trap ) ;
10058: LD_EXP 24
10062: PPUSH
10063: LD_STRING DG-3-trap
10065: PPUSH
10066: CALL_OW 88
// Say ( Kaia , DK-3-trap ) ;
10070: LD_EXP 28
10074: PPUSH
10075: LD_STRING DK-3-trap
10077: PPUSH
10078: CALL_OW 88
// Say ( Givi , DG-4-trap ) ;
10082: LD_EXP 24
10086: PPUSH
10087: LD_STRING DG-4-trap
10089: PPUSH
10090: CALL_OW 88
// end ; end ;
10094: END
// every 0 0$1 trigger GetSide ( Delta ) = 2 and attackDeltaAllowed do var i , tmp ;
10095: LD_INT 1
10097: PPUSH
10098: CALL_OW 255
10102: PUSH
10103: LD_INT 2
10105: EQUAL
10106: PUSH
10107: LD_EXP 14
10111: AND
10112: IFFALSE 10271
10114: GO 10116
10116: DISABLE
10117: LD_INT 0
10119: PPUSH
10120: PPUSH
// begin if not IsOk ( Kaia ) then
10121: LD_EXP 28
10125: PPUSH
10126: CALL_OW 302
10130: NOT
10131: IFFALSE 10135
// exit ;
10133: GO 10271
// if tick < 5 5$00 then
10135: LD_OWVAR 1
10139: PUSH
10140: LD_INT 10500
10142: LESS
10143: IFFALSE 10152
// SetAchievement ( ACH_DELTA ) ;
10145: LD_STRING ACH_DELTA
10147: PPUSH
10148: CALL_OW 543
// Say ( Kaia , DK-1-capture ) ;
10152: LD_EXP 28
10156: PPUSH
10157: LD_STRING DK-1-capture
10159: PPUSH
10160: CALL_OW 88
// Say ( Heike , DH-1-capture ) ;
10164: LD_EXP 23
10168: PPUSH
10169: LD_STRING DH-1-capture
10171: PPUSH
10172: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
10176: LD_ADDR_VAR 0 2
10180: PUSH
10181: LD_INT 22
10183: PUSH
10184: LD_INT 1
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: PUSH
10191: LD_INT 25
10193: PUSH
10194: LD_INT 1
10196: PUSH
10197: EMPTY
10198: LIST
10199: LIST
10200: PUSH
10201: EMPTY
10202: LIST
10203: LIST
10204: PPUSH
10205: CALL_OW 69
10209: ST_TO_ADDR
// if not tmp then
10210: LD_VAR 0 2
10214: NOT
10215: IFFALSE 10219
// exit ;
10217: GO 10271
// for i in tmp do
10219: LD_ADDR_VAR 0 1
10223: PUSH
10224: LD_VAR 0 2
10228: PUSH
10229: FOR_IN
10230: IFFALSE 10269
// begin if IsInUnit ( i ) then
10232: LD_VAR 0 1
10236: PPUSH
10237: CALL_OW 310
10241: IFFALSE 10252
// ComExitBuilding ( i ) ;
10243: LD_VAR 0 1
10247: PPUSH
10248: CALL_OW 122
// AddComAgressiveMove ( i , 38 , 23 ) ;
10252: LD_VAR 0 1
10256: PPUSH
10257: LD_INT 38
10259: PPUSH
10260: LD_INT 23
10262: PPUSH
10263: CALL_OW 174
// end ;
10267: GO 10229
10269: POP
10270: POP
// end ;
10271: PPOPN 2
10273: END
// every 0 0$1 trigger GetSide ( usLab ) = 2 and attackDeltaAllowed do
10274: LD_INT 3
10276: PPUSH
10277: CALL_OW 255
10281: PUSH
10282: LD_INT 2
10284: EQUAL
10285: PUSH
10286: LD_EXP 14
10290: AND
10291: IFFALSE 10336
10293: GO 10295
10295: DISABLE
// begin SetTech ( tech_ApeLang , 2 , state_enabled ) ;
10296: LD_INT 1
10298: PPUSH
10299: LD_INT 2
10301: PPUSH
10302: LD_INT 1
10304: PPUSH
10305: CALL_OW 322
// DialogueOn ;
10309: CALL_OW 6
// Say ( Aviradze , DA-1-capture ) ;
10313: LD_EXP 27
10317: PPUSH
10318: LD_STRING DA-1-capture
10320: PPUSH
10321: CALL_OW 88
// DialogueOff ;
10325: CALL_OW 7
// ChangeMissionObjectives ( OTame ) ;
10329: LD_STRING OTame
10331: PPUSH
10332: CALL_OW 337
// end ;
10336: END
// every 0 0$1 trigger GetTech ( tech_ApeLang , 2 ) = state_researched and attackDeltaAllowed do
10337: LD_INT 1
10339: PPUSH
10340: LD_INT 2
10342: PPUSH
10343: CALL_OW 321
10347: PUSH
10348: LD_INT 2
10350: EQUAL
10351: PUSH
10352: LD_EXP 14
10356: AND
10357: IFFALSE 10508
10359: GO 10361
10361: DISABLE
// begin DialogueOn ;
10362: CALL_OW 6
// Say ( Aviradze , DA-1-ape ) ;
10366: LD_EXP 27
10370: PPUSH
10371: LD_STRING DA-1-ape
10373: PPUSH
10374: CALL_OW 88
// Say ( Heike , DH-1-ape ) ;
10378: LD_EXP 23
10382: PPUSH
10383: LD_STRING DH-1-ape
10385: PPUSH
10386: CALL_OW 88
// Say ( Aviradze , DA-2-ape ) ;
10390: LD_EXP 27
10394: PPUSH
10395: LD_STRING DA-2-ape
10397: PPUSH
10398: CALL_OW 88
// Say ( Aviradze , DA-3-ape ) ;
10402: LD_EXP 27
10406: PPUSH
10407: LD_STRING DA-3-ape
10409: PPUSH
10410: CALL_OW 88
// Say ( Heike , DH-3-ape ) ;
10414: LD_EXP 23
10418: PPUSH
10419: LD_STRING DH-3-ape
10421: PPUSH
10422: CALL_OW 88
// DialogueOff ;
10426: CALL_OW 7
// if FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 then
10430: LD_INT 22
10432: PUSH
10433: LD_INT 0
10435: PUSH
10436: EMPTY
10437: LIST
10438: LIST
10439: PUSH
10440: LD_INT 25
10442: PUSH
10443: LD_INT 12
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: PUSH
10450: EMPTY
10451: LIST
10452: LIST
10453: PPUSH
10454: CALL_OW 69
10458: PUSH
10459: LD_INT 0
10461: EQUAL
10462: IFFALSE 10474
// SpawnApeman ( forest , 2 ) ;
10464: LD_INT 1
10466: PPUSH
10467: LD_INT 2
10469: PPUSH
10470: CALL 409 0 2
// repeat wait ( 0 0$1 ) ;
10474: LD_INT 35
10476: PPUSH
10477: CALL_OW 67
// until FilterAllUnits ( [ f_class , class_apeman ] ) = 0 ;
10481: LD_INT 25
10483: PUSH
10484: LD_INT 12
10486: PUSH
10487: EMPTY
10488: LIST
10489: LIST
10490: PPUSH
10491: CALL_OW 69
10495: PUSH
10496: LD_INT 0
10498: EQUAL
10499: IFFALSE 10474
// YouLost ( Ape ) ;
10501: LD_STRING Ape
10503: PPUSH
10504: CALL_OW 104
// end ;
10508: END
// every 0 0$5 trigger lostCounter >= [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
10509: LD_EXP 18
10513: PUSH
10514: LD_INT 3
10516: PUSH
10517: LD_INT 2
10519: PUSH
10520: LD_INT 2
10522: PUSH
10523: LD_INT 2
10525: PUSH
10526: EMPTY
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: PUSH
10532: LD_OWVAR 67
10536: ARRAY
10537: GREATEREQUAL
10538: IFFALSE 10589
10540: GO 10542
10542: DISABLE
// begin wait ( 0 0$5 ) ;
10543: LD_INT 175
10545: PPUSH
10546: CALL_OW 67
// DialogueOn ;
10550: CALL_OW 6
// Say ( Aviradze , DA-1-failure ) ;
10554: LD_EXP 27
10558: PPUSH
10559: LD_STRING DA-1-failure
10561: PPUSH
10562: CALL_OW 88
// Say ( Aviradze , DA-2-failure ) ;
10566: LD_EXP 27
10570: PPUSH
10571: LD_STRING DA-2-failure
10573: PPUSH
10574: CALL_OW 88
// YouLost ( Failure ) ;
10578: LD_STRING Failure
10580: PPUSH
10581: CALL_OW 104
// DialogueOff ;
10585: CALL_OW 7
// end ;
10589: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
10590: LD_EXP 28
10594: PPUSH
10595: CALL_OW 256
10599: PUSH
10600: LD_INT 3
10602: LESS
10603: IFFALSE 10736
10605: GO 10607
10607: DISABLE
// begin DialogueOn ;
10608: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
10612: LD_EXP 28
10616: PPUSH
10617: CALL_OW 87
// ForceSay ( Kaia , DK-Kaiaout-1 ) ;
10621: LD_EXP 28
10625: PPUSH
10626: LD_STRING DK-Kaiaout-1
10628: PPUSH
10629: CALL_OW 91
// Say ( Heike , DH-Kaiaout-2 ) ;
10633: LD_EXP 23
10637: PPUSH
10638: LD_STRING DH-Kaiaout-2
10640: PPUSH
10641: CALL_OW 88
// Say ( Givi , DG-Kaiaout-3 ) ;
10645: LD_EXP 24
10649: PPUSH
10650: LD_STRING DG-Kaiaout-3
10652: PPUSH
10653: CALL_OW 88
// Say ( Heike , DH-Kaiaout-4 ) ;
10657: LD_EXP 23
10661: PPUSH
10662: LD_STRING DH-Kaiaout-4
10664: PPUSH
10665: CALL_OW 88
// if Givi then
10669: LD_EXP 24
10673: IFFALSE 10723
// begin Say ( Givi , DG-Kaiaout-5 ) ;
10675: LD_EXP 24
10679: PPUSH
10680: LD_STRING DG-Kaiaout-5
10682: PPUSH
10683: CALL_OW 88
// Say ( Heike , DH-Kaiaout-6 ) ;
10687: LD_EXP 23
10691: PPUSH
10692: LD_STRING DH-Kaiaout-6
10694: PPUSH
10695: CALL_OW 88
// Say ( Givi , DG-Kaiaout-7 ) ;
10699: LD_EXP 24
10703: PPUSH
10704: LD_STRING DG-Kaiaout-7
10706: PPUSH
10707: CALL_OW 88
// Say ( Heike , DH-Kaiaout-8 ) ;
10711: LD_EXP 23
10715: PPUSH
10716: LD_STRING DH-Kaiaout-8
10718: PPUSH
10719: CALL_OW 88
// end ; DialogueOff ;
10723: CALL_OW 7
// KillUnit ( Kaia ) ;
10727: LD_EXP 28
10731: PPUSH
10732: CALL_OW 66
// end ;
10736: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) and IsOk ( Aviradze ) and GetSide ( Aviradze ) = 2 do var i , tmp ;
10737: LD_INT 22
10739: PUSH
10740: LD_INT 2
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: PUSH
10747: LD_INT 23
10749: PUSH
10750: LD_INT 0
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: PUSH
10757: EMPTY
10758: LIST
10759: LIST
10760: PPUSH
10761: CALL_OW 69
10765: PUSH
10766: LD_EXP 27
10770: PPUSH
10771: CALL_OW 302
10775: AND
10776: PUSH
10777: LD_EXP 27
10781: PPUSH
10782: CALL_OW 255
10786: PUSH
10787: LD_INT 2
10789: EQUAL
10790: AND
10791: IFFALSE 11862
10793: GO 10795
10795: DISABLE
10796: LD_INT 0
10798: PPUSH
10799: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) then
10800: LD_INT 22
10802: PUSH
10803: LD_INT 1
10805: PUSH
10806: EMPTY
10807: LIST
10808: LIST
10809: PUSH
10810: LD_INT 2
10812: PUSH
10813: LD_INT 25
10815: PUSH
10816: LD_INT 1
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: PUSH
10823: LD_INT 34
10825: PUSH
10826: LD_INT 4
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: LIST
10837: PUSH
10838: EMPTY
10839: LIST
10840: LIST
10841: PPUSH
10842: CALL_OW 69
10846: IFFALSE 11025
// begin Query ( QEnemyInSight ) ;
10848: LD_STRING QEnemyInSight
10850: PPUSH
10851: CALL_OW 97
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) ;
10855: LD_ADDR_VAR 0 2
10859: PUSH
10860: LD_INT 22
10862: PUSH
10863: LD_INT 1
10865: PUSH
10866: EMPTY
10867: LIST
10868: LIST
10869: PUSH
10870: LD_INT 2
10872: PUSH
10873: LD_INT 25
10875: PUSH
10876: LD_INT 1
10878: PUSH
10879: EMPTY
10880: LIST
10881: LIST
10882: PUSH
10883: LD_INT 34
10885: PUSH
10886: LD_INT 4
10888: PUSH
10889: EMPTY
10890: LIST
10891: LIST
10892: PUSH
10893: EMPTY
10894: LIST
10895: LIST
10896: LIST
10897: PUSH
10898: EMPTY
10899: LIST
10900: LIST
10901: PPUSH
10902: CALL_OW 69
10906: ST_TO_ADDR
// for i in tmp do
10907: LD_ADDR_VAR 0 1
10911: PUSH
10912: LD_VAR 0 2
10916: PUSH
10917: FOR_IN
10918: IFFALSE 10937
// ComAgressiveMove ( i , 36 , 22 ) ;
10920: LD_VAR 0 1
10924: PPUSH
10925: LD_INT 36
10927: PPUSH
10928: LD_INT 22
10930: PPUSH
10931: CALL_OW 114
10935: GO 10917
10937: POP
10938: POP
// repeat wait ( 0 0$1 ) ;
10939: LD_INT 35
10941: PPUSH
10942: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10946: LD_INT 22
10948: PUSH
10949: LD_INT 1
10951: PUSH
10952: EMPTY
10953: LIST
10954: LIST
10955: PUSH
10956: LD_INT 2
10958: PUSH
10959: LD_INT 25
10961: PUSH
10962: LD_INT 1
10964: PUSH
10965: EMPTY
10966: LIST
10967: LIST
10968: PUSH
10969: LD_INT 34
10971: PUSH
10972: LD_INT 4
10974: PUSH
10975: EMPTY
10976: LIST
10977: LIST
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: LIST
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: PPUSH
10988: CALL_OW 69
10992: NOT
10993: PUSH
10994: LD_INT 22
10996: PUSH
10997: LD_INT 2
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: PUSH
11004: LD_INT 23
11006: PUSH
11007: LD_INT 0
11009: PUSH
11010: EMPTY
11011: LIST
11012: LIST
11013: PUSH
11014: EMPTY
11015: LIST
11016: LIST
11017: PPUSH
11018: CALL_OW 69
11022: AND
11023: IFFALSE 10939
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
11025: LD_ADDR_VAR 0 2
11029: PUSH
11030: LD_INT 22
11032: PUSH
11033: LD_INT 2
11035: PUSH
11036: EMPTY
11037: LIST
11038: LIST
11039: PUSH
11040: LD_INT 23
11042: PUSH
11043: LD_INT 0
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: PPUSH
11054: CALL_OW 69
11058: ST_TO_ADDR
// InGameOn ;
11059: CALL_OW 8
// if tick <= 10 10$00 then
11063: LD_OWVAR 1
11067: PUSH
11068: LD_INT 21000
11070: LESSEQUAL
11071: IFFALSE 11080
// SetAchievement ( ACH_HSPEED_2 ) ;
11073: LD_STRING ACH_HSPEED_2
11075: PPUSH
11076: CALL_OW 543
// CenterNowOnUnits ( tmp ) ;
11080: LD_VAR 0 2
11084: PPUSH
11085: CALL_OW 87
// ComMoveUnit ( tmp , Aviradze ) ;
11089: LD_VAR 0 2
11093: PPUSH
11094: LD_EXP 27
11098: PPUSH
11099: CALL_OW 112
// ComTurnUnit ( Aviradze , tmp ) ;
11103: LD_EXP 27
11107: PPUSH
11108: LD_VAR 0 2
11112: PPUSH
11113: CALL_OW 119
// wait ( 0 0$1 ) ;
11117: LD_INT 35
11119: PPUSH
11120: CALL_OW 67
// Say ( Aviradze , DA-1-tame-a ) ;
11124: LD_EXP 27
11128: PPUSH
11129: LD_STRING DA-1-tame-a
11131: PPUSH
11132: CALL_OW 88
// if IsOk ( Mike ) then
11136: LD_EXP 25
11140: PPUSH
11141: CALL_OW 302
11145: IFFALSE 11183
// begin Say ( Mike , DM-1-tame-a ) ;
11147: LD_EXP 25
11151: PPUSH
11152: LD_STRING DM-1-tame-a
11154: PPUSH
11155: CALL_OW 88
// Say ( Sophia , DS-1-tame-a ) ;
11159: LD_EXP 29
11163: PPUSH
11164: LD_STRING DS-1-tame-a
11166: PPUSH
11167: CALL_OW 88
// Say ( Mike , DM-2-tame-a ) ;
11171: LD_EXP 25
11175: PPUSH
11176: LD_STRING DM-2-tame-a
11178: PPUSH
11179: CALL_OW 88
// end ; wait ( 0 0$3 ) ;
11183: LD_INT 105
11185: PPUSH
11186: CALL_OW 67
// PrepareFarmer ;
11190: CALL 12541 0 0
// CenterOnUnits ( Farmer ) ;
11194: LD_EXP 31
11198: PPUSH
11199: CALL_OW 85
// ComMoveXY ( Farmer , 105 , 59 ) ;
11203: LD_EXP 31
11207: PPUSH
11208: LD_INT 105
11210: PPUSH
11211: LD_INT 59
11213: PPUSH
11214: CALL_OW 111
// AddComHold ( Farmer ) ;
11218: LD_EXP 31
11222: PPUSH
11223: CALL_OW 200
// SayRadio ( Farmer , DF-1-end ) ;
11227: LD_EXP 31
11231: PPUSH
11232: LD_STRING DF-1-end
11234: PPUSH
11235: CALL_OW 94
// Say ( Aviradze , DA-1-end ) ;
11239: LD_EXP 27
11243: PPUSH
11244: LD_STRING DA-1-end
11246: PPUSH
11247: CALL_OW 88
// SayRadio ( Farmer , DF-2-end ) ;
11251: LD_EXP 31
11255: PPUSH
11256: LD_STRING DF-2-end
11258: PPUSH
11259: CALL_OW 94
// Say ( Aviradze , DA-2-end ) ;
11263: LD_EXP 27
11267: PPUSH
11268: LD_STRING DA-2-end
11270: PPUSH
11271: CALL_OW 88
// SayRadio ( Farmer , DF-3-end ) ;
11275: LD_EXP 31
11279: PPUSH
11280: LD_STRING DF-3-end
11282: PPUSH
11283: CALL_OW 94
// Say ( Heike , DH-3-end ) ;
11287: LD_EXP 23
11291: PPUSH
11292: LD_STRING DH-3-end
11294: PPUSH
11295: CALL_OW 88
// SayRadio ( Farmer , DF-4-end ) ;
11299: LD_EXP 31
11303: PPUSH
11304: LD_STRING DF-4-end
11306: PPUSH
11307: CALL_OW 94
// if tick <= [ 25 25$00 , 22 22$30 , 20 20$00 , 15 15$00 ] [ Difficulty ] then
11311: LD_OWVAR 1
11315: PUSH
11316: LD_INT 52500
11318: PUSH
11319: LD_INT 47250
11321: PUSH
11322: LD_INT 42000
11324: PUSH
11325: LD_INT 31500
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: PUSH
11334: LD_OWVAR 67
11338: ARRAY
11339: LESSEQUAL
11340: IFFALSE 11354
// AddMedal ( med1 , 1 ) else
11342: LD_STRING med1
11344: PPUSH
11345: LD_INT 1
11347: PPUSH
11348: CALL_OW 101
11352: GO 11365
// AddMedal ( med1 , - 1 ) ;
11354: LD_STRING med1
11356: PPUSH
11357: LD_INT 1
11359: NEG
11360: PPUSH
11361: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) = 0 and not gladstoneEscaped then
11365: LD_INT 22
11367: PUSH
11368: LD_INT 1
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: PUSH
11375: LD_INT 25
11377: PUSH
11378: LD_INT 4
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: PUSH
11385: EMPTY
11386: LIST
11387: LIST
11388: PPUSH
11389: CALL_OW 69
11393: PUSH
11394: LD_INT 0
11396: EQUAL
11397: PUSH
11398: LD_EXP 12
11402: NOT
11403: AND
11404: IFFALSE 11418
// AddMedal ( med2 , 1 ) else
11406: LD_STRING med2
11408: PPUSH
11409: LD_INT 1
11411: PPUSH
11412: CALL_OW 101
11416: GO 11429
// AddMedal ( med2 , - 1 ) ;
11418: LD_STRING med2
11420: PPUSH
11421: LD_INT 1
11423: NEG
11424: PPUSH
11425: CALL_OW 101
// if trickyMove then
11429: LD_EXP 15
11433: IFFALSE 11447
// AddMedal ( med3 , 1 ) else
11435: LD_STRING med3
11437: PPUSH
11438: LD_INT 1
11440: PPUSH
11441: CALL_OW 101
11445: GO 11477
// if spottedBeforeRadio then
11447: LD_EXP 6
11451: IFFALSE 11466
// AddMedal ( med3 , - 2 ) else
11453: LD_STRING med3
11455: PPUSH
11456: LD_INT 2
11458: NEG
11459: PPUSH
11460: CALL_OW 101
11464: GO 11477
// AddMedal ( med3 , - 1 ) ;
11466: LD_STRING med3
11468: PPUSH
11469: LD_INT 1
11471: NEG
11472: PPUSH
11473: CALL_OW 101
// GiveMedals ( MAIN ) ;
11477: LD_STRING MAIN
11479: PPUSH
11480: CALL_OW 102
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) , 02_ape ) ;
11484: LD_INT 22
11486: PUSH
11487: LD_INT 2
11489: PUSH
11490: EMPTY
11491: LIST
11492: LIST
11493: PUSH
11494: LD_INT 23
11496: PUSH
11497: LD_INT 0
11499: PUSH
11500: EMPTY
11501: LIST
11502: LIST
11503: PUSH
11504: EMPTY
11505: LIST
11506: LIST
11507: PPUSH
11508: CALL_OW 69
11512: PPUSH
11513: LD_STRING 02_ape
11515: PPUSH
11516: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
11520: LD_ADDR_VAR 0 2
11524: PUSH
11525: LD_INT 22
11527: PUSH
11528: LD_INT 2
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: PUSH
11535: LD_INT 23
11537: PUSH
11538: LD_INT 2
11540: PUSH
11541: EMPTY
11542: LIST
11543: LIST
11544: PUSH
11545: LD_INT 21
11547: PUSH
11548: LD_INT 1
11550: PUSH
11551: EMPTY
11552: LIST
11553: LIST
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: LIST
11559: PPUSH
11560: CALL_OW 69
11564: ST_TO_ADDR
// RewardPeople ( tmp ) ;
11565: LD_VAR 0 2
11569: PPUSH
11570: CALL_OW 43
// SaveCharacters ( Heike , 02_Heike ) ;
11574: LD_EXP 23
11578: PPUSH
11579: LD_STRING 02_Heike
11581: PPUSH
11582: CALL_OW 38
// SaveCharacters ( Aviradze , 02_Aviradze ) ;
11586: LD_EXP 27
11590: PPUSH
11591: LD_STRING 02_Aviradze
11593: PPUSH
11594: CALL_OW 38
// if Givi then
11598: LD_EXP 24
11602: IFFALSE 11616
// SaveCharacters ( Givi , 02_Givi ) ;
11604: LD_EXP 24
11608: PPUSH
11609: LD_STRING 02_Givi
11611: PPUSH
11612: CALL_OW 38
// if Mike then
11616: LD_EXP 25
11620: IFFALSE 11634
// SaveCharacters ( Mike , 02_Mike ) ;
11622: LD_EXP 25
11626: PPUSH
11627: LD_STRING 02_Mike
11629: PPUSH
11630: CALL_OW 38
// if Kamil then
11634: LD_EXP 26
11638: IFFALSE 11652
// SaveCharacters ( Kamil , 02_Kamil ) ;
11640: LD_EXP 26
11644: PPUSH
11645: LD_STRING 02_Kamil
11647: PPUSH
11648: CALL_OW 38
// if Kaia then
11652: LD_EXP 28
11656: IFFALSE 11670
// SaveCharacters ( Kaia , 02_Kaia ) ;
11658: LD_EXP 28
11662: PPUSH
11663: LD_STRING 02_Kaia
11665: PPUSH
11666: CALL_OW 38
// if Sophia then
11670: LD_EXP 29
11674: IFFALSE 11688
// SaveCharacters ( Sophia , 02_Sophia ) ;
11676: LD_EXP 29
11680: PPUSH
11681: LD_STRING 02_Sophia
11683: PPUSH
11684: CALL_OW 38
// if Markov then
11688: LD_EXP 30
11692: IFFALSE 11706
// SaveCharacters ( Markov , 02_Markov ) ;
11694: LD_EXP 30
11698: PPUSH
11699: LD_STRING 02_Markov
11701: PPUSH
11702: CALL_OW 38
// if tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] then
11706: LD_VAR 0 2
11710: PUSH
11711: LD_EXP 23
11715: PUSH
11716: LD_EXP 27
11720: PUSH
11721: LD_EXP 24
11725: PUSH
11726: LD_EXP 25
11730: PUSH
11731: LD_EXP 26
11735: PUSH
11736: LD_EXP 29
11740: PUSH
11741: LD_EXP 28
11745: PUSH
11746: LD_EXP 30
11750: PUSH
11751: EMPTY
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: DIFF
11761: IFFALSE 11826
// SaveCharacters ( tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] , 02_others ) ;
11763: LD_VAR 0 2
11767: PUSH
11768: LD_EXP 23
11772: PUSH
11773: LD_EXP 27
11777: PUSH
11778: LD_EXP 24
11782: PUSH
11783: LD_EXP 25
11787: PUSH
11788: LD_EXP 26
11792: PUSH
11793: LD_EXP 29
11797: PUSH
11798: LD_EXP 28
11802: PUSH
11803: LD_EXP 30
11807: PUSH
11808: EMPTY
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: DIFF
11818: PPUSH
11819: LD_STRING 02_others
11821: PPUSH
11822: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_KRAY) ) ;
11826: LD_STRING enableBioCharacter(BIO_KRAY)
11828: PPUSH
11829: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_AVIR) ) ;
11833: LD_STRING enableBioCharacter(BIO_AVIR)
11835: PPUSH
11836: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_SOPH) ) ;
11840: LD_STRING enableBioCharacter(BIO_SOPH)
11842: PPUSH
11843: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_KAMI) ) ;
11847: LD_STRING enableBioCharacter(BIO_KAMI)
11849: PPUSH
11850: CALL_OW 559
// YouWin ;
11854: CALL_OW 103
// InGameOff ;
11858: CALL_OW 9
// end ;
11862: PPOPN 2
11864: END
// every 0 0$1 trigger tick > timeUntilFarmer and aviradzeSpotted do
11865: LD_OWVAR 1
11869: PUSH
11870: LD_EXP 13
11874: GREATER
11875: PUSH
11876: LD_EXP 4
11880: AND
11881: IFFALSE 11921
11883: GO 11885
11885: DISABLE
// begin InGameOn ;
11886: CALL_OW 8
// PrepareFarmer ;
11890: CALL 12541 0 0
// CenterNowOnUnits ( Farmer ) ;
11894: LD_EXP 31
11898: PPUSH
11899: CALL_OW 87
// wait ( 0 0$2 ) ;
11903: LD_INT 70
11905: PPUSH
11906: CALL_OW 67
// YouLost ( Farmer ) ;
11910: LD_STRING Farmer
11912: PPUSH
11913: CALL_OW 104
// InGameOff ;
11917: CALL_OW 9
// end ; end_of_file
11921: END
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer ; export function PrepareArabian ; var un , veh ; begin
11922: LD_INT 0
11924: PPUSH
11925: PPUSH
11926: PPUSH
// uc_side := 2 ;
11927: LD_ADDR_OWVAR 20
11931: PUSH
11932: LD_INT 2
11934: ST_TO_ADDR
// uc_nation := 2 ;
11935: LD_ADDR_OWVAR 21
11939: PUSH
11940: LD_INT 2
11942: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
11943: LD_ADDR_EXP 23
11947: PUSH
11948: LD_STRING Heike
11950: PPUSH
11951: LD_EXP 1
11955: NOT
11956: PPUSH
11957: LD_EXP 2
11961: PPUSH
11962: CALL 33738 0 3
11966: ST_TO_ADDR
// PlaceUnitXY ( Heike , 83 , 72 , false ) ;
11967: LD_EXP 23
11971: PPUSH
11972: LD_INT 83
11974: PPUSH
11975: LD_INT 72
11977: PPUSH
11978: LD_INT 0
11980: PPUSH
11981: CALL_OW 48
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
11985: LD_ADDR_EXP 24
11989: PUSH
11990: LD_STRING Givi
11992: PPUSH
11993: LD_EXP 1
11997: NOT
11998: PPUSH
11999: LD_EXP 2
12003: PPUSH
12004: CALL 33738 0 3
12008: ST_TO_ADDR
// if Givi then
12009: LD_EXP 24
12013: IFFALSE 12033
// PlaceUnitXY ( Givi , 87 , 76 , false ) ;
12015: LD_EXP 24
12019: PPUSH
12020: LD_INT 87
12022: PPUSH
12023: LD_INT 76
12025: PPUSH
12026: LD_INT 0
12028: PPUSH
12029: CALL_OW 48
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
12033: LD_ADDR_EXP 25
12037: PUSH
12038: LD_STRING Mike
12040: PPUSH
12041: LD_EXP 1
12045: NOT
12046: PPUSH
12047: LD_EXP 2
12051: PPUSH
12052: CALL 33738 0 3
12056: ST_TO_ADDR
// if Mike then
12057: LD_EXP 25
12061: IFFALSE 12081
// PlaceUnitXY ( Mike , 84 , 76 , false ) ;
12063: LD_EXP 25
12067: PPUSH
12068: LD_INT 84
12070: PPUSH
12071: LD_INT 76
12073: PPUSH
12074: LD_INT 0
12076: PPUSH
12077: CALL_OW 48
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
12081: LD_ADDR_EXP 26
12085: PUSH
12086: LD_STRING Kamil
12088: PPUSH
12089: LD_EXP 1
12093: NOT
12094: PPUSH
12095: LD_EXP 2
12099: PPUSH
12100: CALL 33738 0 3
12104: ST_TO_ADDR
// if Kamil then
12105: LD_EXP 26
12109: IFFALSE 12129
// PlaceUnitXY ( Kamil , 85 , 78 , false ) ;
12111: LD_EXP 26
12115: PPUSH
12116: LD_INT 85
12118: PPUSH
12119: LD_INT 78
12121: PPUSH
12122: LD_INT 0
12124: PPUSH
12125: CALL_OW 48
// uc_side := 5 ;
12129: LD_ADDR_OWVAR 20
12133: PUSH
12134: LD_INT 5
12136: ST_TO_ADDR
// uc_nation := 2 ;
12137: LD_ADDR_OWVAR 21
12141: PUSH
12142: LD_INT 2
12144: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , false ,  ) ;
12145: LD_ADDR_EXP 27
12149: PUSH
12150: LD_STRING Aviradze
12152: PPUSH
12153: LD_INT 0
12155: PPUSH
12156: LD_STRING 
12158: PPUSH
12159: CALL 33738 0 3
12163: ST_TO_ADDR
// PlaceUnitXY ( Aviradze , 106 , 38 , false ) ;
12164: LD_EXP 27
12168: PPUSH
12169: LD_INT 106
12171: PPUSH
12172: LD_INT 38
12174: PPUSH
12175: LD_INT 0
12177: PPUSH
12178: CALL_OW 48
// ComTurnXY ( Aviradze , 103 , 38 ) ;
12182: LD_EXP 27
12186: PPUSH
12187: LD_INT 103
12189: PPUSH
12190: LD_INT 38
12192: PPUSH
12193: CALL_OW 118
// Kaia := PrepareUnit ( Kaia , false ,  ) ;
12197: LD_ADDR_EXP 28
12201: PUSH
12202: LD_STRING Kaia
12204: PPUSH
12205: LD_INT 0
12207: PPUSH
12208: LD_STRING 
12210: PPUSH
12211: CALL 33738 0 3
12215: ST_TO_ADDR
// PlaceUnitXY ( Kaia , 100 , 34 , false ) ;
12216: LD_EXP 28
12220: PPUSH
12221: LD_INT 100
12223: PPUSH
12224: LD_INT 34
12226: PPUSH
12227: LD_INT 0
12229: PPUSH
12230: CALL_OW 48
// ComTurnXY ( Kaia , 100 , 39 ) ;
12234: LD_EXP 28
12238: PPUSH
12239: LD_INT 100
12241: PPUSH
12242: LD_INT 39
12244: PPUSH
12245: CALL_OW 118
// Sophia := PrepareUnit ( Sophia , false ,  ) ;
12249: LD_ADDR_EXP 29
12253: PUSH
12254: LD_STRING Sophia
12256: PPUSH
12257: LD_INT 0
12259: PPUSH
12260: LD_STRING 
12262: PPUSH
12263: CALL 33738 0 3
12267: ST_TO_ADDR
// PlaceUnitXY ( Sophia , 109 , 50 , false ) ;
12268: LD_EXP 29
12272: PPUSH
12273: LD_INT 109
12275: PPUSH
12276: LD_INT 50
12278: PPUSH
12279: LD_INT 0
12281: PPUSH
12282: CALL_OW 48
// ComTurnXY ( Sophia , 100 , 39 ) ;
12286: LD_EXP 29
12290: PPUSH
12291: LD_INT 100
12293: PPUSH
12294: LD_INT 39
12296: PPUSH
12297: CALL_OW 118
// Markov := PrepareUnit ( Markov , false ,  ) ;
12301: LD_ADDR_EXP 30
12305: PUSH
12306: LD_STRING Markov
12308: PPUSH
12309: LD_INT 0
12311: PPUSH
12312: LD_STRING 
12314: PPUSH
12315: CALL 33738 0 3
12319: ST_TO_ADDR
// PrepareTank ( 5 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , [ 90 , 70 , 60 , 50 ] [ Difficulty ] ) ;
12320: LD_INT 5
12322: PPUSH
12323: LD_INT 3
12325: PPUSH
12326: LD_INT 21
12328: PPUSH
12329: LD_INT 1
12331: PPUSH
12332: LD_INT 1
12334: PPUSH
12335: LD_INT 42
12337: PPUSH
12338: LD_INT 90
12340: PUSH
12341: LD_INT 70
12343: PUSH
12344: LD_INT 60
12346: PUSH
12347: LD_INT 50
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: PUSH
12356: LD_OWVAR 67
12360: ARRAY
12361: PPUSH
12362: CALL 241 0 7
// veh := CreateVehicle ;
12366: LD_ADDR_VAR 0 3
12370: PUSH
12371: CALL_OW 45
12375: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
12376: LD_VAR 0 3
12380: PPUSH
12381: LD_INT 4
12383: PPUSH
12384: CALL_OW 233
// PlaceUnitXY ( veh , 109 , 38 , false ) ;
12388: LD_VAR 0 3
12392: PPUSH
12393: LD_INT 109
12395: PPUSH
12396: LD_INT 38
12398: PPUSH
12399: LD_INT 0
12401: PPUSH
12402: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
12406: LD_EXP 30
12410: PPUSH
12411: LD_VAR 0 3
12415: PPUSH
12416: CALL_OW 52
// ComTurnUnit ( Kaia , Aviradze ) ;
12420: LD_EXP 28
12424: PPUSH
12425: LD_EXP 27
12429: PPUSH
12430: CALL_OW 119
// ComTurnUnit ( Aviradze , Kaia ) ;
12434: LD_EXP 27
12438: PPUSH
12439: LD_EXP 28
12443: PPUSH
12444: CALL_OW 119
// if not Givi or not Mike then
12448: LD_EXP 24
12452: NOT
12453: PUSH
12454: LD_EXP 25
12458: NOT
12459: OR
12460: IFFALSE 12536
// begin uc_nation := 2 ;
12462: LD_ADDR_OWVAR 21
12466: PUSH
12467: LD_INT 2
12469: ST_TO_ADDR
// uc_side := 5 ;
12470: LD_ADDR_OWVAR 20
12474: PUSH
12475: LD_INT 5
12477: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 1 ) ;
12478: LD_INT 1
12480: PPUSH
12481: LD_INT 1
12483: PPUSH
12484: LD_INT 1
12486: PPUSH
12487: CALL_OW 380
// un := CreateHuman ;
12491: LD_ADDR_VAR 0 2
12495: PUSH
12496: CALL_OW 44
12500: ST_TO_ADDR
// PlaceUnitXYR ( un , 112 , 40 , 3 , false ) ;
12501: LD_VAR 0 2
12505: PPUSH
12506: LD_INT 112
12508: PPUSH
12509: LD_INT 40
12511: PPUSH
12512: LD_INT 3
12514: PPUSH
12515: LD_INT 0
12517: PPUSH
12518: CALL_OW 50
// ComTurnUnit ( un , Aviradze ) ;
12522: LD_VAR 0 2
12526: PPUSH
12527: LD_EXP 27
12531: PPUSH
12532: CALL_OW 119
// end ; end ;
12536: LD_VAR 0 1
12540: RET
// export function PrepareFarmer ; var i ; begin
12541: LD_INT 0
12543: PPUSH
12544: PPUSH
// uc_side := 5 ;
12545: LD_ADDR_OWVAR 20
12549: PUSH
12550: LD_INT 5
12552: ST_TO_ADDR
// uc_nation := 2 ;
12553: LD_ADDR_OWVAR 21
12557: PUSH
12558: LD_INT 2
12560: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
12561: LD_ADDR_EXP 31
12565: PUSH
12566: LD_STRING Farmer
12568: PPUSH
12569: LD_INT 0
12571: PPUSH
12572: LD_STRING 
12574: PPUSH
12575: CALL 33738 0 3
12579: ST_TO_ADDR
// PlaceUnitXY ( Farmer , 106 , 62 , false ) ;
12580: LD_EXP 31
12584: PPUSH
12585: LD_INT 106
12587: PPUSH
12588: LD_INT 62
12590: PPUSH
12591: LD_INT 0
12593: PPUSH
12594: CALL_OW 48
// for i := 1 to 5 do
12598: LD_ADDR_VAR 0 2
12602: PUSH
12603: DOUBLE
12604: LD_INT 1
12606: DEC
12607: ST_TO_ADDR
12608: LD_INT 5
12610: PUSH
12611: FOR_TO
12612: IFFALSE 12650
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
12614: LD_INT 1
12616: PPUSH
12617: LD_INT 1
12619: PPUSH
12620: LD_INT 1
12622: PPUSH
12623: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 105 , 64 , 3 , false ) ;
12627: CALL_OW 44
12631: PPUSH
12632: LD_INT 105
12634: PPUSH
12635: LD_INT 64
12637: PPUSH
12638: LD_INT 3
12640: PPUSH
12641: LD_INT 0
12643: PPUSH
12644: CALL_OW 50
// end ;
12648: GO 12611
12650: POP
12651: POP
// end ; end_of_file
12652: LD_VAR 0 1
12656: RET
// every 2 2$20 + 0 0$10 do
12657: GO 12659
12659: DISABLE
// begin enable ;
12660: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , forest , true ) ;
12661: LD_INT 1
12663: PPUSH
12664: LD_INT 5
12666: PPUSH
12667: CALL_OW 12
12671: PPUSH
12672: LD_INT 1
12674: PPUSH
12675: LD_INT 1
12677: PPUSH
12678: CALL_OW 55
// if tick > 6 6$00 then
12682: LD_OWVAR 1
12686: PUSH
12687: LD_INT 12600
12689: GREATER
12690: IFFALSE 12693
// disable ;
12692: DISABLE
// end ; end_of_file
12693: END
// on UnitDestroyed ( un ) do begin if un = Heike then
12694: LD_VAR 0 1
12698: PUSH
12699: LD_EXP 23
12703: EQUAL
12704: IFFALSE 12713
// YouLost ( Heike ) ;
12706: LD_STRING Heike
12708: PPUSH
12709: CALL_OW 104
// if un = Aviradze then
12713: LD_VAR 0 1
12717: PUSH
12718: LD_EXP 27
12722: EQUAL
12723: IFFALSE 12732
// YouLost ( Aviradze ) ;
12725: LD_STRING Aviradze
12727: PPUSH
12728: CALL_OW 104
// if un = usLab then
12732: LD_VAR 0 1
12736: PUSH
12737: LD_INT 3
12739: EQUAL
12740: IFFALSE 12749
// YouLost ( Lab ) ;
12742: LD_STRING Lab
12744: PPUSH
12745: CALL_OW 104
// if ( un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) diff [ Heike , Aviradze ] ) and aviradzeSpotted then
12749: LD_VAR 0 1
12753: PUSH
12754: LD_INT 22
12756: PUSH
12757: LD_INT 2
12759: PUSH
12760: EMPTY
12761: LIST
12762: LIST
12763: PUSH
12764: LD_INT 21
12766: PUSH
12767: LD_INT 1
12769: PUSH
12770: EMPTY
12771: LIST
12772: LIST
12773: PUSH
12774: LD_INT 23
12776: PUSH
12777: LD_INT 2
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: PUSH
12784: EMPTY
12785: LIST
12786: LIST
12787: LIST
12788: PPUSH
12789: CALL_OW 69
12793: PUSH
12794: LD_EXP 23
12798: PUSH
12799: LD_EXP 27
12803: PUSH
12804: EMPTY
12805: LIST
12806: LIST
12807: DIFF
12808: IN
12809: PUSH
12810: LD_EXP 4
12814: AND
12815: IFFALSE 12831
// lostCounter := lostCounter + 1 ;
12817: LD_ADDR_EXP 18
12821: PUSH
12822: LD_EXP 18
12826: PUSH
12827: LD_INT 1
12829: PLUS
12830: ST_TO_ADDR
// end ;
12831: PPOPN 1
12833: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 2 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) = 0 do
12834: LD_INT 23
12836: PUSH
12837: LD_INT 2
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: PUSH
12844: LD_INT 25
12846: PUSH
12847: LD_INT 2
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: PUSH
12854: EMPTY
12855: LIST
12856: LIST
12857: PPUSH
12858: CALL_OW 69
12862: PUSH
12863: LD_INT 0
12865: EQUAL
12866: PUSH
12867: LD_INT 22
12869: PUSH
12870: LD_INT 2
12872: PUSH
12873: EMPTY
12874: LIST
12875: LIST
12876: PUSH
12877: LD_INT 21
12879: PUSH
12880: LD_INT 3
12882: PUSH
12883: EMPTY
12884: LIST
12885: LIST
12886: PUSH
12887: EMPTY
12888: LIST
12889: LIST
12890: PPUSH
12891: CALL_OW 69
12895: PUSH
12896: LD_INT 0
12898: EQUAL
12899: AND
12900: IFFALSE 12912
12902: GO 12904
12904: DISABLE
// YouLost ( Eng ) ;
12905: LD_STRING Eng
12907: PPUSH
12908: CALL_OW 104
12912: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in usSci and killerSide = 2 then
12913: LD_VAR 0 1
12917: PUSH
12918: LD_EXP 22
12922: IN
12923: PUSH
12924: LD_VAR 0 2
12928: PUSH
12929: LD_INT 2
12931: EQUAL
12932: AND
12933: IFFALSE 12965
// begin usSci := usSci diff un ;
12935: LD_ADDR_EXP 22
12939: PUSH
12940: LD_EXP 22
12944: PUSH
12945: LD_VAR 0 1
12949: DIFF
12950: ST_TO_ADDR
// sciCounterKill := sciCounterKill + 1 ;
12951: LD_ADDR_EXP 9
12955: PUSH
12956: LD_EXP 9
12960: PUSH
12961: LD_INT 1
12963: PLUS
12964: ST_TO_ADDR
// end ; end ;
12965: PPOPN 3
12967: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
12968: LD_VAR 0 1
12972: PUSH
12973: LD_INT 2
12975: EQUAL
12976: PUSH
12977: LD_VAR 0 2
12981: PUSH
12982: LD_INT 5
12984: EQUAL
12985: AND
12986: IFFALSE 12995
// YouLost ( FriendlyFire ) ;
12988: LD_STRING FriendlyFire
12990: PPUSH
12991: CALL_OW 104
// end ;
12995: PPOPN 2
12997: END
// on EnterBuilding ( b , un ) do begin if un = Gladstone then
12998: LD_VAR 0 2
13002: PUSH
13003: LD_EXP 19
13007: EQUAL
13008: IFFALSE 13022
// SetTag ( Gladstone , 0 ) ;
13010: LD_EXP 19
13014: PPUSH
13015: LD_INT 0
13017: PPUSH
13018: CALL_OW 109
// end ; end_of_file end_of_file
13022: PPOPN 2
13024: END
// export globalGameSaveCounter ; every 0 0$1 do
13025: GO 13027
13027: DISABLE
// begin enable ;
13028: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
13029: LD_STRING updateTimer(
13031: PUSH
13032: LD_OWVAR 1
13036: STR
13037: PUSH
13038: LD_STRING );
13040: STR
13041: PPUSH
13042: CALL_OW 559
// end ;
13046: END
// every 0 0$1 do
13047: GO 13049
13049: DISABLE
// begin globalGameSaveCounter := 0 ;
13050: LD_ADDR_EXP 32
13054: PUSH
13055: LD_INT 0
13057: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
13058: LD_STRING setGameSaveCounter(0)
13060: PPUSH
13061: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
13065: LD_STRING initStreamRollete();
13067: PPUSH
13068: CALL_OW 559
// InitStreamMode ;
13072: CALL 14415 0 0
// DefineStreamItems ( false ) ;
13076: LD_INT 0
13078: PPUSH
13079: CALL 14879 0 1
// end ;
13083: END
// export function SOS_MapStart ( ) ; begin
13084: LD_INT 0
13086: PPUSH
// if streamModeActive then
13087: LD_EXP 33
13091: IFFALSE 13100
// DefineStreamItems ( true ) ;
13093: LD_INT 1
13095: PPUSH
13096: CALL 14879 0 1
// UpdateLuaVariables ( ) ;
13100: CALL 13117 0 0
// UpdateFactoryWaypoints ( ) ;
13104: CALL 27748 0 0
// UpdateWarehouseGatheringPoints ( ) ;
13108: CALL 28005 0 0
// end ;
13112: LD_VAR 0 1
13116: RET
// function UpdateLuaVariables ( ) ; begin
13117: LD_INT 0
13119: PPUSH
// if globalGameSaveCounter then
13120: LD_EXP 32
13124: IFFALSE 13158
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
13126: LD_ADDR_EXP 32
13130: PUSH
13131: LD_EXP 32
13135: PPUSH
13136: CALL 72790 0 1
13140: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
13141: LD_STRING setGameSaveCounter(
13143: PUSH
13144: LD_EXP 32
13148: STR
13149: PUSH
13150: LD_STRING )
13152: STR
13153: PPUSH
13154: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
13158: LD_STRING setGameDifficulty(
13160: PUSH
13161: LD_OWVAR 67
13165: STR
13166: PUSH
13167: LD_STRING )
13169: STR
13170: PPUSH
13171: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
13175: LD_STRING displayDifficulty(
13177: PUSH
13178: LD_OWVAR 67
13182: STR
13183: PUSH
13184: LD_STRING )
13186: STR
13187: PPUSH
13188: CALL_OW 559
// end ;
13192: LD_VAR 0 1
13196: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
13197: LD_INT 0
13199: PPUSH
// if p2 = stream_mode then
13200: LD_VAR 0 2
13204: PUSH
13205: LD_INT 100
13207: EQUAL
13208: IFFALSE 14211
// begin if not StreamModeActive then
13210: LD_EXP 33
13214: NOT
13215: IFFALSE 13225
// StreamModeActive := true ;
13217: LD_ADDR_EXP 33
13221: PUSH
13222: LD_INT 1
13224: ST_TO_ADDR
// if p3 = 0 then
13225: LD_VAR 0 3
13229: PUSH
13230: LD_INT 0
13232: EQUAL
13233: IFFALSE 13239
// InitStreamMode ;
13235: CALL 14415 0 0
// if p3 = 1 then
13239: LD_VAR 0 3
13243: PUSH
13244: LD_INT 1
13246: EQUAL
13247: IFFALSE 13257
// sRocket := true ;
13249: LD_ADDR_EXP 38
13253: PUSH
13254: LD_INT 1
13256: ST_TO_ADDR
// if p3 = 2 then
13257: LD_VAR 0 3
13261: PUSH
13262: LD_INT 2
13264: EQUAL
13265: IFFALSE 13275
// sSpeed := true ;
13267: LD_ADDR_EXP 37
13271: PUSH
13272: LD_INT 1
13274: ST_TO_ADDR
// if p3 = 3 then
13275: LD_VAR 0 3
13279: PUSH
13280: LD_INT 3
13282: EQUAL
13283: IFFALSE 13293
// sEngine := true ;
13285: LD_ADDR_EXP 39
13289: PUSH
13290: LD_INT 1
13292: ST_TO_ADDR
// if p3 = 4 then
13293: LD_VAR 0 3
13297: PUSH
13298: LD_INT 4
13300: EQUAL
13301: IFFALSE 13311
// sSpec := true ;
13303: LD_ADDR_EXP 36
13307: PUSH
13308: LD_INT 1
13310: ST_TO_ADDR
// if p3 = 5 then
13311: LD_VAR 0 3
13315: PUSH
13316: LD_INT 5
13318: EQUAL
13319: IFFALSE 13329
// sLevel := true ;
13321: LD_ADDR_EXP 40
13325: PUSH
13326: LD_INT 1
13328: ST_TO_ADDR
// if p3 = 6 then
13329: LD_VAR 0 3
13333: PUSH
13334: LD_INT 6
13336: EQUAL
13337: IFFALSE 13347
// sArmoury := true ;
13339: LD_ADDR_EXP 41
13343: PUSH
13344: LD_INT 1
13346: ST_TO_ADDR
// if p3 = 7 then
13347: LD_VAR 0 3
13351: PUSH
13352: LD_INT 7
13354: EQUAL
13355: IFFALSE 13365
// sRadar := true ;
13357: LD_ADDR_EXP 42
13361: PUSH
13362: LD_INT 1
13364: ST_TO_ADDR
// if p3 = 8 then
13365: LD_VAR 0 3
13369: PUSH
13370: LD_INT 8
13372: EQUAL
13373: IFFALSE 13383
// sBunker := true ;
13375: LD_ADDR_EXP 43
13379: PUSH
13380: LD_INT 1
13382: ST_TO_ADDR
// if p3 = 9 then
13383: LD_VAR 0 3
13387: PUSH
13388: LD_INT 9
13390: EQUAL
13391: IFFALSE 13401
// sHack := true ;
13393: LD_ADDR_EXP 44
13397: PUSH
13398: LD_INT 1
13400: ST_TO_ADDR
// if p3 = 10 then
13401: LD_VAR 0 3
13405: PUSH
13406: LD_INT 10
13408: EQUAL
13409: IFFALSE 13419
// sFire := true ;
13411: LD_ADDR_EXP 45
13415: PUSH
13416: LD_INT 1
13418: ST_TO_ADDR
// if p3 = 11 then
13419: LD_VAR 0 3
13423: PUSH
13424: LD_INT 11
13426: EQUAL
13427: IFFALSE 13437
// sRefresh := true ;
13429: LD_ADDR_EXP 46
13433: PUSH
13434: LD_INT 1
13436: ST_TO_ADDR
// if p3 = 12 then
13437: LD_VAR 0 3
13441: PUSH
13442: LD_INT 12
13444: EQUAL
13445: IFFALSE 13455
// sExp := true ;
13447: LD_ADDR_EXP 47
13451: PUSH
13452: LD_INT 1
13454: ST_TO_ADDR
// if p3 = 13 then
13455: LD_VAR 0 3
13459: PUSH
13460: LD_INT 13
13462: EQUAL
13463: IFFALSE 13473
// sDepot := true ;
13465: LD_ADDR_EXP 48
13469: PUSH
13470: LD_INT 1
13472: ST_TO_ADDR
// if p3 = 14 then
13473: LD_VAR 0 3
13477: PUSH
13478: LD_INT 14
13480: EQUAL
13481: IFFALSE 13491
// sFlag := true ;
13483: LD_ADDR_EXP 49
13487: PUSH
13488: LD_INT 1
13490: ST_TO_ADDR
// if p3 = 15 then
13491: LD_VAR 0 3
13495: PUSH
13496: LD_INT 15
13498: EQUAL
13499: IFFALSE 13509
// sKamikadze := true ;
13501: LD_ADDR_EXP 57
13505: PUSH
13506: LD_INT 1
13508: ST_TO_ADDR
// if p3 = 16 then
13509: LD_VAR 0 3
13513: PUSH
13514: LD_INT 16
13516: EQUAL
13517: IFFALSE 13527
// sTroll := true ;
13519: LD_ADDR_EXP 58
13523: PUSH
13524: LD_INT 1
13526: ST_TO_ADDR
// if p3 = 17 then
13527: LD_VAR 0 3
13531: PUSH
13532: LD_INT 17
13534: EQUAL
13535: IFFALSE 13545
// sSlow := true ;
13537: LD_ADDR_EXP 59
13541: PUSH
13542: LD_INT 1
13544: ST_TO_ADDR
// if p3 = 18 then
13545: LD_VAR 0 3
13549: PUSH
13550: LD_INT 18
13552: EQUAL
13553: IFFALSE 13563
// sLack := true ;
13555: LD_ADDR_EXP 60
13559: PUSH
13560: LD_INT 1
13562: ST_TO_ADDR
// if p3 = 19 then
13563: LD_VAR 0 3
13567: PUSH
13568: LD_INT 19
13570: EQUAL
13571: IFFALSE 13581
// sTank := true ;
13573: LD_ADDR_EXP 62
13577: PUSH
13578: LD_INT 1
13580: ST_TO_ADDR
// if p3 = 20 then
13581: LD_VAR 0 3
13585: PUSH
13586: LD_INT 20
13588: EQUAL
13589: IFFALSE 13599
// sRemote := true ;
13591: LD_ADDR_EXP 63
13595: PUSH
13596: LD_INT 1
13598: ST_TO_ADDR
// if p3 = 21 then
13599: LD_VAR 0 3
13603: PUSH
13604: LD_INT 21
13606: EQUAL
13607: IFFALSE 13617
// sPowell := true ;
13609: LD_ADDR_EXP 64
13613: PUSH
13614: LD_INT 1
13616: ST_TO_ADDR
// if p3 = 22 then
13617: LD_VAR 0 3
13621: PUSH
13622: LD_INT 22
13624: EQUAL
13625: IFFALSE 13635
// sTeleport := true ;
13627: LD_ADDR_EXP 67
13631: PUSH
13632: LD_INT 1
13634: ST_TO_ADDR
// if p3 = 23 then
13635: LD_VAR 0 3
13639: PUSH
13640: LD_INT 23
13642: EQUAL
13643: IFFALSE 13653
// sOilTower := true ;
13645: LD_ADDR_EXP 69
13649: PUSH
13650: LD_INT 1
13652: ST_TO_ADDR
// if p3 = 24 then
13653: LD_VAR 0 3
13657: PUSH
13658: LD_INT 24
13660: EQUAL
13661: IFFALSE 13671
// sShovel := true ;
13663: LD_ADDR_EXP 70
13667: PUSH
13668: LD_INT 1
13670: ST_TO_ADDR
// if p3 = 25 then
13671: LD_VAR 0 3
13675: PUSH
13676: LD_INT 25
13678: EQUAL
13679: IFFALSE 13689
// sSheik := true ;
13681: LD_ADDR_EXP 71
13685: PUSH
13686: LD_INT 1
13688: ST_TO_ADDR
// if p3 = 26 then
13689: LD_VAR 0 3
13693: PUSH
13694: LD_INT 26
13696: EQUAL
13697: IFFALSE 13707
// sEarthquake := true ;
13699: LD_ADDR_EXP 73
13703: PUSH
13704: LD_INT 1
13706: ST_TO_ADDR
// if p3 = 27 then
13707: LD_VAR 0 3
13711: PUSH
13712: LD_INT 27
13714: EQUAL
13715: IFFALSE 13725
// sAI := true ;
13717: LD_ADDR_EXP 74
13721: PUSH
13722: LD_INT 1
13724: ST_TO_ADDR
// if p3 = 28 then
13725: LD_VAR 0 3
13729: PUSH
13730: LD_INT 28
13732: EQUAL
13733: IFFALSE 13743
// sCargo := true ;
13735: LD_ADDR_EXP 77
13739: PUSH
13740: LD_INT 1
13742: ST_TO_ADDR
// if p3 = 29 then
13743: LD_VAR 0 3
13747: PUSH
13748: LD_INT 29
13750: EQUAL
13751: IFFALSE 13761
// sDLaser := true ;
13753: LD_ADDR_EXP 78
13757: PUSH
13758: LD_INT 1
13760: ST_TO_ADDR
// if p3 = 30 then
13761: LD_VAR 0 3
13765: PUSH
13766: LD_INT 30
13768: EQUAL
13769: IFFALSE 13779
// sExchange := true ;
13771: LD_ADDR_EXP 79
13775: PUSH
13776: LD_INT 1
13778: ST_TO_ADDR
// if p3 = 31 then
13779: LD_VAR 0 3
13783: PUSH
13784: LD_INT 31
13786: EQUAL
13787: IFFALSE 13797
// sFac := true ;
13789: LD_ADDR_EXP 80
13793: PUSH
13794: LD_INT 1
13796: ST_TO_ADDR
// if p3 = 32 then
13797: LD_VAR 0 3
13801: PUSH
13802: LD_INT 32
13804: EQUAL
13805: IFFALSE 13815
// sPower := true ;
13807: LD_ADDR_EXP 81
13811: PUSH
13812: LD_INT 1
13814: ST_TO_ADDR
// if p3 = 33 then
13815: LD_VAR 0 3
13819: PUSH
13820: LD_INT 33
13822: EQUAL
13823: IFFALSE 13833
// sRandom := true ;
13825: LD_ADDR_EXP 82
13829: PUSH
13830: LD_INT 1
13832: ST_TO_ADDR
// if p3 = 34 then
13833: LD_VAR 0 3
13837: PUSH
13838: LD_INT 34
13840: EQUAL
13841: IFFALSE 13851
// sShield := true ;
13843: LD_ADDR_EXP 83
13847: PUSH
13848: LD_INT 1
13850: ST_TO_ADDR
// if p3 = 35 then
13851: LD_VAR 0 3
13855: PUSH
13856: LD_INT 35
13858: EQUAL
13859: IFFALSE 13869
// sTime := true ;
13861: LD_ADDR_EXP 84
13865: PUSH
13866: LD_INT 1
13868: ST_TO_ADDR
// if p3 = 36 then
13869: LD_VAR 0 3
13873: PUSH
13874: LD_INT 36
13876: EQUAL
13877: IFFALSE 13887
// sTools := true ;
13879: LD_ADDR_EXP 85
13883: PUSH
13884: LD_INT 1
13886: ST_TO_ADDR
// if p3 = 101 then
13887: LD_VAR 0 3
13891: PUSH
13892: LD_INT 101
13894: EQUAL
13895: IFFALSE 13905
// sSold := true ;
13897: LD_ADDR_EXP 50
13901: PUSH
13902: LD_INT 1
13904: ST_TO_ADDR
// if p3 = 102 then
13905: LD_VAR 0 3
13909: PUSH
13910: LD_INT 102
13912: EQUAL
13913: IFFALSE 13923
// sDiff := true ;
13915: LD_ADDR_EXP 51
13919: PUSH
13920: LD_INT 1
13922: ST_TO_ADDR
// if p3 = 103 then
13923: LD_VAR 0 3
13927: PUSH
13928: LD_INT 103
13930: EQUAL
13931: IFFALSE 13941
// sFog := true ;
13933: LD_ADDR_EXP 54
13937: PUSH
13938: LD_INT 1
13940: ST_TO_ADDR
// if p3 = 104 then
13941: LD_VAR 0 3
13945: PUSH
13946: LD_INT 104
13948: EQUAL
13949: IFFALSE 13959
// sReset := true ;
13951: LD_ADDR_EXP 55
13955: PUSH
13956: LD_INT 1
13958: ST_TO_ADDR
// if p3 = 105 then
13959: LD_VAR 0 3
13963: PUSH
13964: LD_INT 105
13966: EQUAL
13967: IFFALSE 13977
// sSun := true ;
13969: LD_ADDR_EXP 56
13973: PUSH
13974: LD_INT 1
13976: ST_TO_ADDR
// if p3 = 106 then
13977: LD_VAR 0 3
13981: PUSH
13982: LD_INT 106
13984: EQUAL
13985: IFFALSE 13995
// sTiger := true ;
13987: LD_ADDR_EXP 52
13991: PUSH
13992: LD_INT 1
13994: ST_TO_ADDR
// if p3 = 107 then
13995: LD_VAR 0 3
13999: PUSH
14000: LD_INT 107
14002: EQUAL
14003: IFFALSE 14013
// sBomb := true ;
14005: LD_ADDR_EXP 53
14009: PUSH
14010: LD_INT 1
14012: ST_TO_ADDR
// if p3 = 108 then
14013: LD_VAR 0 3
14017: PUSH
14018: LD_INT 108
14020: EQUAL
14021: IFFALSE 14031
// sWound := true ;
14023: LD_ADDR_EXP 61
14027: PUSH
14028: LD_INT 1
14030: ST_TO_ADDR
// if p3 = 109 then
14031: LD_VAR 0 3
14035: PUSH
14036: LD_INT 109
14038: EQUAL
14039: IFFALSE 14049
// sBetray := true ;
14041: LD_ADDR_EXP 65
14045: PUSH
14046: LD_INT 1
14048: ST_TO_ADDR
// if p3 = 110 then
14049: LD_VAR 0 3
14053: PUSH
14054: LD_INT 110
14056: EQUAL
14057: IFFALSE 14067
// sContamin := true ;
14059: LD_ADDR_EXP 66
14063: PUSH
14064: LD_INT 1
14066: ST_TO_ADDR
// if p3 = 111 then
14067: LD_VAR 0 3
14071: PUSH
14072: LD_INT 111
14074: EQUAL
14075: IFFALSE 14085
// sOil := true ;
14077: LD_ADDR_EXP 68
14081: PUSH
14082: LD_INT 1
14084: ST_TO_ADDR
// if p3 = 112 then
14085: LD_VAR 0 3
14089: PUSH
14090: LD_INT 112
14092: EQUAL
14093: IFFALSE 14103
// sStu := true ;
14095: LD_ADDR_EXP 72
14099: PUSH
14100: LD_INT 1
14102: ST_TO_ADDR
// if p3 = 113 then
14103: LD_VAR 0 3
14107: PUSH
14108: LD_INT 113
14110: EQUAL
14111: IFFALSE 14121
// sBazooka := true ;
14113: LD_ADDR_EXP 75
14117: PUSH
14118: LD_INT 1
14120: ST_TO_ADDR
// if p3 = 114 then
14121: LD_VAR 0 3
14125: PUSH
14126: LD_INT 114
14128: EQUAL
14129: IFFALSE 14139
// sMortar := true ;
14131: LD_ADDR_EXP 76
14135: PUSH
14136: LD_INT 1
14138: ST_TO_ADDR
// if p3 = 115 then
14139: LD_VAR 0 3
14143: PUSH
14144: LD_INT 115
14146: EQUAL
14147: IFFALSE 14157
// sRanger := true ;
14149: LD_ADDR_EXP 86
14153: PUSH
14154: LD_INT 1
14156: ST_TO_ADDR
// if p3 = 116 then
14157: LD_VAR 0 3
14161: PUSH
14162: LD_INT 116
14164: EQUAL
14165: IFFALSE 14175
// sComputer := true ;
14167: LD_ADDR_EXP 87
14171: PUSH
14172: LD_INT 1
14174: ST_TO_ADDR
// if p3 = 117 then
14175: LD_VAR 0 3
14179: PUSH
14180: LD_INT 117
14182: EQUAL
14183: IFFALSE 14193
// s30 := true ;
14185: LD_ADDR_EXP 88
14189: PUSH
14190: LD_INT 1
14192: ST_TO_ADDR
// if p3 = 118 then
14193: LD_VAR 0 3
14197: PUSH
14198: LD_INT 118
14200: EQUAL
14201: IFFALSE 14211
// s60 := true ;
14203: LD_ADDR_EXP 89
14207: PUSH
14208: LD_INT 1
14210: ST_TO_ADDR
// end ; if p2 = hack_mode then
14211: LD_VAR 0 2
14215: PUSH
14216: LD_INT 101
14218: EQUAL
14219: IFFALSE 14347
// begin case p3 of 1 :
14221: LD_VAR 0 3
14225: PUSH
14226: LD_INT 1
14228: DOUBLE
14229: EQUAL
14230: IFTRUE 14234
14232: GO 14241
14234: POP
// hHackUnlimitedResources ; 2 :
14235: CALL 26494 0 0
14239: GO 14347
14241: LD_INT 2
14243: DOUBLE
14244: EQUAL
14245: IFTRUE 14249
14247: GO 14256
14249: POP
// hHackSetLevel10 ; 3 :
14250: CALL 26627 0 0
14254: GO 14347
14256: LD_INT 3
14258: DOUBLE
14259: EQUAL
14260: IFTRUE 14264
14262: GO 14271
14264: POP
// hHackSetLevel10YourUnits ; 4 :
14265: CALL 26712 0 0
14269: GO 14347
14271: LD_INT 4
14273: DOUBLE
14274: EQUAL
14275: IFTRUE 14279
14277: GO 14286
14279: POP
// hHackInvincible ; 5 :
14280: CALL 27160 0 0
14284: GO 14347
14286: LD_INT 5
14288: DOUBLE
14289: EQUAL
14290: IFTRUE 14294
14292: GO 14301
14294: POP
// hHackInvisible ; 6 :
14295: CALL 27271 0 0
14299: GO 14347
14301: LD_INT 6
14303: DOUBLE
14304: EQUAL
14305: IFTRUE 14309
14307: GO 14316
14309: POP
// hHackChangeYourSide ; 7 :
14310: CALL 27328 0 0
14314: GO 14347
14316: LD_INT 7
14318: DOUBLE
14319: EQUAL
14320: IFTRUE 14324
14322: GO 14331
14324: POP
// hHackChangeUnitSide ; 8 :
14325: CALL 27370 0 0
14329: GO 14347
14331: LD_INT 8
14333: DOUBLE
14334: EQUAL
14335: IFTRUE 14339
14337: GO 14346
14339: POP
// hHackFog ; end ;
14340: CALL 27471 0 0
14344: GO 14347
14346: POP
// end ; if p2 = game_save_mode then
14347: LD_VAR 0 2
14351: PUSH
14352: LD_INT 102
14354: EQUAL
14355: IFFALSE 14410
// begin if p3 = 1 then
14357: LD_VAR 0 3
14361: PUSH
14362: LD_INT 1
14364: EQUAL
14365: IFFALSE 14377
// globalGameSaveCounter := p4 ;
14367: LD_ADDR_EXP 32
14371: PUSH
14372: LD_VAR 0 4
14376: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
14377: LD_VAR 0 3
14381: PUSH
14382: LD_INT 2
14384: EQUAL
14385: PUSH
14386: LD_EXP 32
14390: AND
14391: IFFALSE 14410
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
14393: LD_STRING setGameSaveCounter(
14395: PUSH
14396: LD_EXP 32
14400: STR
14401: PUSH
14402: LD_STRING )
14404: STR
14405: PPUSH
14406: CALL_OW 559
// end ; end ;
14410: LD_VAR 0 7
14414: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
14415: LD_INT 0
14417: PPUSH
// streamModeActive := false ;
14418: LD_ADDR_EXP 33
14422: PUSH
14423: LD_INT 0
14425: ST_TO_ADDR
// normalCounter := 36 ;
14426: LD_ADDR_EXP 34
14430: PUSH
14431: LD_INT 36
14433: ST_TO_ADDR
// hardcoreCounter := 18 ;
14434: LD_ADDR_EXP 35
14438: PUSH
14439: LD_INT 18
14441: ST_TO_ADDR
// sRocket := false ;
14442: LD_ADDR_EXP 38
14446: PUSH
14447: LD_INT 0
14449: ST_TO_ADDR
// sSpeed := false ;
14450: LD_ADDR_EXP 37
14454: PUSH
14455: LD_INT 0
14457: ST_TO_ADDR
// sEngine := false ;
14458: LD_ADDR_EXP 39
14462: PUSH
14463: LD_INT 0
14465: ST_TO_ADDR
// sSpec := false ;
14466: LD_ADDR_EXP 36
14470: PUSH
14471: LD_INT 0
14473: ST_TO_ADDR
// sLevel := false ;
14474: LD_ADDR_EXP 40
14478: PUSH
14479: LD_INT 0
14481: ST_TO_ADDR
// sArmoury := false ;
14482: LD_ADDR_EXP 41
14486: PUSH
14487: LD_INT 0
14489: ST_TO_ADDR
// sRadar := false ;
14490: LD_ADDR_EXP 42
14494: PUSH
14495: LD_INT 0
14497: ST_TO_ADDR
// sBunker := false ;
14498: LD_ADDR_EXP 43
14502: PUSH
14503: LD_INT 0
14505: ST_TO_ADDR
// sHack := false ;
14506: LD_ADDR_EXP 44
14510: PUSH
14511: LD_INT 0
14513: ST_TO_ADDR
// sFire := false ;
14514: LD_ADDR_EXP 45
14518: PUSH
14519: LD_INT 0
14521: ST_TO_ADDR
// sRefresh := false ;
14522: LD_ADDR_EXP 46
14526: PUSH
14527: LD_INT 0
14529: ST_TO_ADDR
// sExp := false ;
14530: LD_ADDR_EXP 47
14534: PUSH
14535: LD_INT 0
14537: ST_TO_ADDR
// sDepot := false ;
14538: LD_ADDR_EXP 48
14542: PUSH
14543: LD_INT 0
14545: ST_TO_ADDR
// sFlag := false ;
14546: LD_ADDR_EXP 49
14550: PUSH
14551: LD_INT 0
14553: ST_TO_ADDR
// sKamikadze := false ;
14554: LD_ADDR_EXP 57
14558: PUSH
14559: LD_INT 0
14561: ST_TO_ADDR
// sTroll := false ;
14562: LD_ADDR_EXP 58
14566: PUSH
14567: LD_INT 0
14569: ST_TO_ADDR
// sSlow := false ;
14570: LD_ADDR_EXP 59
14574: PUSH
14575: LD_INT 0
14577: ST_TO_ADDR
// sLack := false ;
14578: LD_ADDR_EXP 60
14582: PUSH
14583: LD_INT 0
14585: ST_TO_ADDR
// sTank := false ;
14586: LD_ADDR_EXP 62
14590: PUSH
14591: LD_INT 0
14593: ST_TO_ADDR
// sRemote := false ;
14594: LD_ADDR_EXP 63
14598: PUSH
14599: LD_INT 0
14601: ST_TO_ADDR
// sPowell := false ;
14602: LD_ADDR_EXP 64
14606: PUSH
14607: LD_INT 0
14609: ST_TO_ADDR
// sTeleport := false ;
14610: LD_ADDR_EXP 67
14614: PUSH
14615: LD_INT 0
14617: ST_TO_ADDR
// sOilTower := false ;
14618: LD_ADDR_EXP 69
14622: PUSH
14623: LD_INT 0
14625: ST_TO_ADDR
// sShovel := false ;
14626: LD_ADDR_EXP 70
14630: PUSH
14631: LD_INT 0
14633: ST_TO_ADDR
// sSheik := false ;
14634: LD_ADDR_EXP 71
14638: PUSH
14639: LD_INT 0
14641: ST_TO_ADDR
// sEarthquake := false ;
14642: LD_ADDR_EXP 73
14646: PUSH
14647: LD_INT 0
14649: ST_TO_ADDR
// sAI := false ;
14650: LD_ADDR_EXP 74
14654: PUSH
14655: LD_INT 0
14657: ST_TO_ADDR
// sCargo := false ;
14658: LD_ADDR_EXP 77
14662: PUSH
14663: LD_INT 0
14665: ST_TO_ADDR
// sDLaser := false ;
14666: LD_ADDR_EXP 78
14670: PUSH
14671: LD_INT 0
14673: ST_TO_ADDR
// sExchange := false ;
14674: LD_ADDR_EXP 79
14678: PUSH
14679: LD_INT 0
14681: ST_TO_ADDR
// sFac := false ;
14682: LD_ADDR_EXP 80
14686: PUSH
14687: LD_INT 0
14689: ST_TO_ADDR
// sPower := false ;
14690: LD_ADDR_EXP 81
14694: PUSH
14695: LD_INT 0
14697: ST_TO_ADDR
// sRandom := false ;
14698: LD_ADDR_EXP 82
14702: PUSH
14703: LD_INT 0
14705: ST_TO_ADDR
// sShield := false ;
14706: LD_ADDR_EXP 83
14710: PUSH
14711: LD_INT 0
14713: ST_TO_ADDR
// sTime := false ;
14714: LD_ADDR_EXP 84
14718: PUSH
14719: LD_INT 0
14721: ST_TO_ADDR
// sTools := false ;
14722: LD_ADDR_EXP 85
14726: PUSH
14727: LD_INT 0
14729: ST_TO_ADDR
// sSold := false ;
14730: LD_ADDR_EXP 50
14734: PUSH
14735: LD_INT 0
14737: ST_TO_ADDR
// sDiff := false ;
14738: LD_ADDR_EXP 51
14742: PUSH
14743: LD_INT 0
14745: ST_TO_ADDR
// sFog := false ;
14746: LD_ADDR_EXP 54
14750: PUSH
14751: LD_INT 0
14753: ST_TO_ADDR
// sReset := false ;
14754: LD_ADDR_EXP 55
14758: PUSH
14759: LD_INT 0
14761: ST_TO_ADDR
// sSun := false ;
14762: LD_ADDR_EXP 56
14766: PUSH
14767: LD_INT 0
14769: ST_TO_ADDR
// sTiger := false ;
14770: LD_ADDR_EXP 52
14774: PUSH
14775: LD_INT 0
14777: ST_TO_ADDR
// sBomb := false ;
14778: LD_ADDR_EXP 53
14782: PUSH
14783: LD_INT 0
14785: ST_TO_ADDR
// sWound := false ;
14786: LD_ADDR_EXP 61
14790: PUSH
14791: LD_INT 0
14793: ST_TO_ADDR
// sBetray := false ;
14794: LD_ADDR_EXP 65
14798: PUSH
14799: LD_INT 0
14801: ST_TO_ADDR
// sContamin := false ;
14802: LD_ADDR_EXP 66
14806: PUSH
14807: LD_INT 0
14809: ST_TO_ADDR
// sOil := false ;
14810: LD_ADDR_EXP 68
14814: PUSH
14815: LD_INT 0
14817: ST_TO_ADDR
// sStu := false ;
14818: LD_ADDR_EXP 72
14822: PUSH
14823: LD_INT 0
14825: ST_TO_ADDR
// sBazooka := false ;
14826: LD_ADDR_EXP 75
14830: PUSH
14831: LD_INT 0
14833: ST_TO_ADDR
// sMortar := false ;
14834: LD_ADDR_EXP 76
14838: PUSH
14839: LD_INT 0
14841: ST_TO_ADDR
// sRanger := false ;
14842: LD_ADDR_EXP 86
14846: PUSH
14847: LD_INT 0
14849: ST_TO_ADDR
// sComputer := false ;
14850: LD_ADDR_EXP 87
14854: PUSH
14855: LD_INT 0
14857: ST_TO_ADDR
// s30 := false ;
14858: LD_ADDR_EXP 88
14862: PUSH
14863: LD_INT 0
14865: ST_TO_ADDR
// s60 := false ;
14866: LD_ADDR_EXP 89
14870: PUSH
14871: LD_INT 0
14873: ST_TO_ADDR
// end ;
14874: LD_VAR 0 1
14878: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
14879: LD_INT 0
14881: PPUSH
14882: PPUSH
14883: PPUSH
14884: PPUSH
14885: PPUSH
14886: PPUSH
14887: PPUSH
// result := [ ] ;
14888: LD_ADDR_VAR 0 2
14892: PUSH
14893: EMPTY
14894: ST_TO_ADDR
// if campaign_id = 1 then
14895: LD_OWVAR 69
14899: PUSH
14900: LD_INT 1
14902: EQUAL
14903: IFFALSE 18069
// begin case mission_number of 1 :
14905: LD_OWVAR 70
14909: PUSH
14910: LD_INT 1
14912: DOUBLE
14913: EQUAL
14914: IFTRUE 14918
14916: GO 14994
14918: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
14919: LD_ADDR_VAR 0 2
14923: PUSH
14924: LD_INT 2
14926: PUSH
14927: LD_INT 4
14929: PUSH
14930: LD_INT 11
14932: PUSH
14933: LD_INT 12
14935: PUSH
14936: LD_INT 15
14938: PUSH
14939: LD_INT 16
14941: PUSH
14942: LD_INT 22
14944: PUSH
14945: LD_INT 23
14947: PUSH
14948: LD_INT 26
14950: PUSH
14951: EMPTY
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: PUSH
14962: LD_INT 101
14964: PUSH
14965: LD_INT 102
14967: PUSH
14968: LD_INT 106
14970: PUSH
14971: LD_INT 116
14973: PUSH
14974: LD_INT 117
14976: PUSH
14977: LD_INT 118
14979: PUSH
14980: EMPTY
14981: LIST
14982: LIST
14983: LIST
14984: LIST
14985: LIST
14986: LIST
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: ST_TO_ADDR
14992: GO 18067
14994: LD_INT 2
14996: DOUBLE
14997: EQUAL
14998: IFTRUE 15002
15000: GO 15086
15002: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
15003: LD_ADDR_VAR 0 2
15007: PUSH
15008: LD_INT 2
15010: PUSH
15011: LD_INT 4
15013: PUSH
15014: LD_INT 11
15016: PUSH
15017: LD_INT 12
15019: PUSH
15020: LD_INT 15
15022: PUSH
15023: LD_INT 16
15025: PUSH
15026: LD_INT 22
15028: PUSH
15029: LD_INT 23
15031: PUSH
15032: LD_INT 26
15034: PUSH
15035: EMPTY
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: LIST
15045: PUSH
15046: LD_INT 101
15048: PUSH
15049: LD_INT 102
15051: PUSH
15052: LD_INT 105
15054: PUSH
15055: LD_INT 106
15057: PUSH
15058: LD_INT 108
15060: PUSH
15061: LD_INT 116
15063: PUSH
15064: LD_INT 117
15066: PUSH
15067: LD_INT 118
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: LIST
15074: LIST
15075: LIST
15076: LIST
15077: LIST
15078: LIST
15079: PUSH
15080: EMPTY
15081: LIST
15082: LIST
15083: ST_TO_ADDR
15084: GO 18067
15086: LD_INT 3
15088: DOUBLE
15089: EQUAL
15090: IFTRUE 15094
15092: GO 15182
15094: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
15095: LD_ADDR_VAR 0 2
15099: PUSH
15100: LD_INT 2
15102: PUSH
15103: LD_INT 4
15105: PUSH
15106: LD_INT 5
15108: PUSH
15109: LD_INT 11
15111: PUSH
15112: LD_INT 12
15114: PUSH
15115: LD_INT 15
15117: PUSH
15118: LD_INT 16
15120: PUSH
15121: LD_INT 22
15123: PUSH
15124: LD_INT 26
15126: PUSH
15127: LD_INT 36
15129: PUSH
15130: EMPTY
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: PUSH
15142: LD_INT 101
15144: PUSH
15145: LD_INT 102
15147: PUSH
15148: LD_INT 105
15150: PUSH
15151: LD_INT 106
15153: PUSH
15154: LD_INT 108
15156: PUSH
15157: LD_INT 116
15159: PUSH
15160: LD_INT 117
15162: PUSH
15163: LD_INT 118
15165: PUSH
15166: EMPTY
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: ST_TO_ADDR
15180: GO 18067
15182: LD_INT 4
15184: DOUBLE
15185: EQUAL
15186: IFTRUE 15190
15188: GO 15286
15190: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
15191: LD_ADDR_VAR 0 2
15195: PUSH
15196: LD_INT 2
15198: PUSH
15199: LD_INT 4
15201: PUSH
15202: LD_INT 5
15204: PUSH
15205: LD_INT 8
15207: PUSH
15208: LD_INT 11
15210: PUSH
15211: LD_INT 12
15213: PUSH
15214: LD_INT 15
15216: PUSH
15217: LD_INT 16
15219: PUSH
15220: LD_INT 22
15222: PUSH
15223: LD_INT 23
15225: PUSH
15226: LD_INT 26
15228: PUSH
15229: LD_INT 36
15231: PUSH
15232: EMPTY
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: PUSH
15246: LD_INT 101
15248: PUSH
15249: LD_INT 102
15251: PUSH
15252: LD_INT 105
15254: PUSH
15255: LD_INT 106
15257: PUSH
15258: LD_INT 108
15260: PUSH
15261: LD_INT 116
15263: PUSH
15264: LD_INT 117
15266: PUSH
15267: LD_INT 118
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: ST_TO_ADDR
15284: GO 18067
15286: LD_INT 5
15288: DOUBLE
15289: EQUAL
15290: IFTRUE 15294
15292: GO 15406
15294: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
15295: LD_ADDR_VAR 0 2
15299: PUSH
15300: LD_INT 2
15302: PUSH
15303: LD_INT 4
15305: PUSH
15306: LD_INT 5
15308: PUSH
15309: LD_INT 6
15311: PUSH
15312: LD_INT 8
15314: PUSH
15315: LD_INT 11
15317: PUSH
15318: LD_INT 12
15320: PUSH
15321: LD_INT 15
15323: PUSH
15324: LD_INT 16
15326: PUSH
15327: LD_INT 22
15329: PUSH
15330: LD_INT 23
15332: PUSH
15333: LD_INT 25
15335: PUSH
15336: LD_INT 26
15338: PUSH
15339: LD_INT 36
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: PUSH
15358: LD_INT 101
15360: PUSH
15361: LD_INT 102
15363: PUSH
15364: LD_INT 105
15366: PUSH
15367: LD_INT 106
15369: PUSH
15370: LD_INT 108
15372: PUSH
15373: LD_INT 109
15375: PUSH
15376: LD_INT 112
15378: PUSH
15379: LD_INT 116
15381: PUSH
15382: LD_INT 117
15384: PUSH
15385: LD_INT 118
15387: PUSH
15388: EMPTY
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: PUSH
15400: EMPTY
15401: LIST
15402: LIST
15403: ST_TO_ADDR
15404: GO 18067
15406: LD_INT 6
15408: DOUBLE
15409: EQUAL
15410: IFTRUE 15414
15412: GO 15546
15414: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
15415: LD_ADDR_VAR 0 2
15419: PUSH
15420: LD_INT 2
15422: PUSH
15423: LD_INT 4
15425: PUSH
15426: LD_INT 5
15428: PUSH
15429: LD_INT 6
15431: PUSH
15432: LD_INT 8
15434: PUSH
15435: LD_INT 11
15437: PUSH
15438: LD_INT 12
15440: PUSH
15441: LD_INT 15
15443: PUSH
15444: LD_INT 16
15446: PUSH
15447: LD_INT 20
15449: PUSH
15450: LD_INT 21
15452: PUSH
15453: LD_INT 22
15455: PUSH
15456: LD_INT 23
15458: PUSH
15459: LD_INT 25
15461: PUSH
15462: LD_INT 26
15464: PUSH
15465: LD_INT 30
15467: PUSH
15468: LD_INT 31
15470: PUSH
15471: LD_INT 32
15473: PUSH
15474: LD_INT 36
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: PUSH
15498: LD_INT 101
15500: PUSH
15501: LD_INT 102
15503: PUSH
15504: LD_INT 105
15506: PUSH
15507: LD_INT 106
15509: PUSH
15510: LD_INT 108
15512: PUSH
15513: LD_INT 109
15515: PUSH
15516: LD_INT 112
15518: PUSH
15519: LD_INT 116
15521: PUSH
15522: LD_INT 117
15524: PUSH
15525: LD_INT 118
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: PUSH
15540: EMPTY
15541: LIST
15542: LIST
15543: ST_TO_ADDR
15544: GO 18067
15546: LD_INT 7
15548: DOUBLE
15549: EQUAL
15550: IFTRUE 15554
15552: GO 15666
15554: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
15555: LD_ADDR_VAR 0 2
15559: PUSH
15560: LD_INT 2
15562: PUSH
15563: LD_INT 4
15565: PUSH
15566: LD_INT 5
15568: PUSH
15569: LD_INT 7
15571: PUSH
15572: LD_INT 11
15574: PUSH
15575: LD_INT 12
15577: PUSH
15578: LD_INT 15
15580: PUSH
15581: LD_INT 16
15583: PUSH
15584: LD_INT 20
15586: PUSH
15587: LD_INT 21
15589: PUSH
15590: LD_INT 22
15592: PUSH
15593: LD_INT 23
15595: PUSH
15596: LD_INT 25
15598: PUSH
15599: LD_INT 26
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: PUSH
15618: LD_INT 101
15620: PUSH
15621: LD_INT 102
15623: PUSH
15624: LD_INT 103
15626: PUSH
15627: LD_INT 105
15629: PUSH
15630: LD_INT 106
15632: PUSH
15633: LD_INT 108
15635: PUSH
15636: LD_INT 112
15638: PUSH
15639: LD_INT 116
15641: PUSH
15642: LD_INT 117
15644: PUSH
15645: LD_INT 118
15647: PUSH
15648: EMPTY
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: PUSH
15660: EMPTY
15661: LIST
15662: LIST
15663: ST_TO_ADDR
15664: GO 18067
15666: LD_INT 8
15668: DOUBLE
15669: EQUAL
15670: IFTRUE 15674
15672: GO 15814
15674: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
15675: LD_ADDR_VAR 0 2
15679: PUSH
15680: LD_INT 2
15682: PUSH
15683: LD_INT 4
15685: PUSH
15686: LD_INT 5
15688: PUSH
15689: LD_INT 6
15691: PUSH
15692: LD_INT 7
15694: PUSH
15695: LD_INT 8
15697: PUSH
15698: LD_INT 11
15700: PUSH
15701: LD_INT 12
15703: PUSH
15704: LD_INT 15
15706: PUSH
15707: LD_INT 16
15709: PUSH
15710: LD_INT 20
15712: PUSH
15713: LD_INT 21
15715: PUSH
15716: LD_INT 22
15718: PUSH
15719: LD_INT 23
15721: PUSH
15722: LD_INT 25
15724: PUSH
15725: LD_INT 26
15727: PUSH
15728: LD_INT 30
15730: PUSH
15731: LD_INT 31
15733: PUSH
15734: LD_INT 32
15736: PUSH
15737: LD_INT 36
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: PUSH
15762: LD_INT 101
15764: PUSH
15765: LD_INT 102
15767: PUSH
15768: LD_INT 103
15770: PUSH
15771: LD_INT 105
15773: PUSH
15774: LD_INT 106
15776: PUSH
15777: LD_INT 108
15779: PUSH
15780: LD_INT 109
15782: PUSH
15783: LD_INT 112
15785: PUSH
15786: LD_INT 116
15788: PUSH
15789: LD_INT 117
15791: PUSH
15792: LD_INT 118
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: PUSH
15808: EMPTY
15809: LIST
15810: LIST
15811: ST_TO_ADDR
15812: GO 18067
15814: LD_INT 9
15816: DOUBLE
15817: EQUAL
15818: IFTRUE 15822
15820: GO 15970
15822: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
15823: LD_ADDR_VAR 0 2
15827: PUSH
15828: LD_INT 2
15830: PUSH
15831: LD_INT 4
15833: PUSH
15834: LD_INT 5
15836: PUSH
15837: LD_INT 6
15839: PUSH
15840: LD_INT 7
15842: PUSH
15843: LD_INT 8
15845: PUSH
15846: LD_INT 11
15848: PUSH
15849: LD_INT 12
15851: PUSH
15852: LD_INT 15
15854: PUSH
15855: LD_INT 16
15857: PUSH
15858: LD_INT 20
15860: PUSH
15861: LD_INT 21
15863: PUSH
15864: LD_INT 22
15866: PUSH
15867: LD_INT 23
15869: PUSH
15870: LD_INT 25
15872: PUSH
15873: LD_INT 26
15875: PUSH
15876: LD_INT 28
15878: PUSH
15879: LD_INT 30
15881: PUSH
15882: LD_INT 31
15884: PUSH
15885: LD_INT 32
15887: PUSH
15888: LD_INT 36
15890: PUSH
15891: EMPTY
15892: LIST
15893: LIST
15894: LIST
15895: LIST
15896: LIST
15897: LIST
15898: LIST
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: PUSH
15914: LD_INT 101
15916: PUSH
15917: LD_INT 102
15919: PUSH
15920: LD_INT 103
15922: PUSH
15923: LD_INT 105
15925: PUSH
15926: LD_INT 106
15928: PUSH
15929: LD_INT 108
15931: PUSH
15932: LD_INT 109
15934: PUSH
15935: LD_INT 112
15937: PUSH
15938: LD_INT 114
15940: PUSH
15941: LD_INT 116
15943: PUSH
15944: LD_INT 117
15946: PUSH
15947: LD_INT 118
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: ST_TO_ADDR
15968: GO 18067
15970: LD_INT 10
15972: DOUBLE
15973: EQUAL
15974: IFTRUE 15978
15976: GO 16174
15978: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
15979: LD_ADDR_VAR 0 2
15983: PUSH
15984: LD_INT 2
15986: PUSH
15987: LD_INT 4
15989: PUSH
15990: LD_INT 5
15992: PUSH
15993: LD_INT 6
15995: PUSH
15996: LD_INT 7
15998: PUSH
15999: LD_INT 8
16001: PUSH
16002: LD_INT 9
16004: PUSH
16005: LD_INT 10
16007: PUSH
16008: LD_INT 11
16010: PUSH
16011: LD_INT 12
16013: PUSH
16014: LD_INT 13
16016: PUSH
16017: LD_INT 14
16019: PUSH
16020: LD_INT 15
16022: PUSH
16023: LD_INT 16
16025: PUSH
16026: LD_INT 17
16028: PUSH
16029: LD_INT 18
16031: PUSH
16032: LD_INT 19
16034: PUSH
16035: LD_INT 20
16037: PUSH
16038: LD_INT 21
16040: PUSH
16041: LD_INT 22
16043: PUSH
16044: LD_INT 23
16046: PUSH
16047: LD_INT 24
16049: PUSH
16050: LD_INT 25
16052: PUSH
16053: LD_INT 26
16055: PUSH
16056: LD_INT 28
16058: PUSH
16059: LD_INT 30
16061: PUSH
16062: LD_INT 31
16064: PUSH
16065: LD_INT 32
16067: PUSH
16068: LD_INT 36
16070: PUSH
16071: EMPTY
16072: LIST
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: PUSH
16102: LD_INT 101
16104: PUSH
16105: LD_INT 102
16107: PUSH
16108: LD_INT 103
16110: PUSH
16111: LD_INT 104
16113: PUSH
16114: LD_INT 105
16116: PUSH
16117: LD_INT 106
16119: PUSH
16120: LD_INT 107
16122: PUSH
16123: LD_INT 108
16125: PUSH
16126: LD_INT 109
16128: PUSH
16129: LD_INT 110
16131: PUSH
16132: LD_INT 111
16134: PUSH
16135: LD_INT 112
16137: PUSH
16138: LD_INT 114
16140: PUSH
16141: LD_INT 116
16143: PUSH
16144: LD_INT 117
16146: PUSH
16147: LD_INT 118
16149: PUSH
16150: EMPTY
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: LIST
16159: LIST
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: PUSH
16168: EMPTY
16169: LIST
16170: LIST
16171: ST_TO_ADDR
16172: GO 18067
16174: LD_INT 11
16176: DOUBLE
16177: EQUAL
16178: IFTRUE 16182
16180: GO 16386
16182: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
16183: LD_ADDR_VAR 0 2
16187: PUSH
16188: LD_INT 2
16190: PUSH
16191: LD_INT 3
16193: PUSH
16194: LD_INT 4
16196: PUSH
16197: LD_INT 5
16199: PUSH
16200: LD_INT 6
16202: PUSH
16203: LD_INT 7
16205: PUSH
16206: LD_INT 8
16208: PUSH
16209: LD_INT 9
16211: PUSH
16212: LD_INT 10
16214: PUSH
16215: LD_INT 11
16217: PUSH
16218: LD_INT 12
16220: PUSH
16221: LD_INT 13
16223: PUSH
16224: LD_INT 14
16226: PUSH
16227: LD_INT 15
16229: PUSH
16230: LD_INT 16
16232: PUSH
16233: LD_INT 17
16235: PUSH
16236: LD_INT 18
16238: PUSH
16239: LD_INT 19
16241: PUSH
16242: LD_INT 20
16244: PUSH
16245: LD_INT 21
16247: PUSH
16248: LD_INT 22
16250: PUSH
16251: LD_INT 23
16253: PUSH
16254: LD_INT 24
16256: PUSH
16257: LD_INT 25
16259: PUSH
16260: LD_INT 26
16262: PUSH
16263: LD_INT 28
16265: PUSH
16266: LD_INT 30
16268: PUSH
16269: LD_INT 31
16271: PUSH
16272: LD_INT 32
16274: PUSH
16275: LD_INT 34
16277: PUSH
16278: LD_INT 36
16280: PUSH
16281: EMPTY
16282: LIST
16283: LIST
16284: LIST
16285: LIST
16286: LIST
16287: LIST
16288: LIST
16289: LIST
16290: LIST
16291: LIST
16292: LIST
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: PUSH
16314: LD_INT 101
16316: PUSH
16317: LD_INT 102
16319: PUSH
16320: LD_INT 103
16322: PUSH
16323: LD_INT 104
16325: PUSH
16326: LD_INT 105
16328: PUSH
16329: LD_INT 106
16331: PUSH
16332: LD_INT 107
16334: PUSH
16335: LD_INT 108
16337: PUSH
16338: LD_INT 109
16340: PUSH
16341: LD_INT 110
16343: PUSH
16344: LD_INT 111
16346: PUSH
16347: LD_INT 112
16349: PUSH
16350: LD_INT 114
16352: PUSH
16353: LD_INT 116
16355: PUSH
16356: LD_INT 117
16358: PUSH
16359: LD_INT 118
16361: PUSH
16362: EMPTY
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: LIST
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: ST_TO_ADDR
16384: GO 18067
16386: LD_INT 12
16388: DOUBLE
16389: EQUAL
16390: IFTRUE 16394
16392: GO 16614
16394: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
16395: LD_ADDR_VAR 0 2
16399: PUSH
16400: LD_INT 1
16402: PUSH
16403: LD_INT 2
16405: PUSH
16406: LD_INT 3
16408: PUSH
16409: LD_INT 4
16411: PUSH
16412: LD_INT 5
16414: PUSH
16415: LD_INT 6
16417: PUSH
16418: LD_INT 7
16420: PUSH
16421: LD_INT 8
16423: PUSH
16424: LD_INT 9
16426: PUSH
16427: LD_INT 10
16429: PUSH
16430: LD_INT 11
16432: PUSH
16433: LD_INT 12
16435: PUSH
16436: LD_INT 13
16438: PUSH
16439: LD_INT 14
16441: PUSH
16442: LD_INT 15
16444: PUSH
16445: LD_INT 16
16447: PUSH
16448: LD_INT 17
16450: PUSH
16451: LD_INT 18
16453: PUSH
16454: LD_INT 19
16456: PUSH
16457: LD_INT 20
16459: PUSH
16460: LD_INT 21
16462: PUSH
16463: LD_INT 22
16465: PUSH
16466: LD_INT 23
16468: PUSH
16469: LD_INT 24
16471: PUSH
16472: LD_INT 25
16474: PUSH
16475: LD_INT 26
16477: PUSH
16478: LD_INT 27
16480: PUSH
16481: LD_INT 28
16483: PUSH
16484: LD_INT 30
16486: PUSH
16487: LD_INT 31
16489: PUSH
16490: LD_INT 32
16492: PUSH
16493: LD_INT 33
16495: PUSH
16496: LD_INT 34
16498: PUSH
16499: LD_INT 36
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: PUSH
16538: LD_INT 101
16540: PUSH
16541: LD_INT 102
16543: PUSH
16544: LD_INT 103
16546: PUSH
16547: LD_INT 104
16549: PUSH
16550: LD_INT 105
16552: PUSH
16553: LD_INT 106
16555: PUSH
16556: LD_INT 107
16558: PUSH
16559: LD_INT 108
16561: PUSH
16562: LD_INT 109
16564: PUSH
16565: LD_INT 110
16567: PUSH
16568: LD_INT 111
16570: PUSH
16571: LD_INT 112
16573: PUSH
16574: LD_INT 113
16576: PUSH
16577: LD_INT 114
16579: PUSH
16580: LD_INT 116
16582: PUSH
16583: LD_INT 117
16585: PUSH
16586: LD_INT 118
16588: PUSH
16589: EMPTY
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: LIST
16606: LIST
16607: PUSH
16608: EMPTY
16609: LIST
16610: LIST
16611: ST_TO_ADDR
16612: GO 18067
16614: LD_INT 13
16616: DOUBLE
16617: EQUAL
16618: IFTRUE 16622
16620: GO 16830
16622: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
16623: LD_ADDR_VAR 0 2
16627: PUSH
16628: LD_INT 1
16630: PUSH
16631: LD_INT 2
16633: PUSH
16634: LD_INT 3
16636: PUSH
16637: LD_INT 4
16639: PUSH
16640: LD_INT 5
16642: PUSH
16643: LD_INT 8
16645: PUSH
16646: LD_INT 9
16648: PUSH
16649: LD_INT 10
16651: PUSH
16652: LD_INT 11
16654: PUSH
16655: LD_INT 12
16657: PUSH
16658: LD_INT 14
16660: PUSH
16661: LD_INT 15
16663: PUSH
16664: LD_INT 16
16666: PUSH
16667: LD_INT 17
16669: PUSH
16670: LD_INT 18
16672: PUSH
16673: LD_INT 19
16675: PUSH
16676: LD_INT 20
16678: PUSH
16679: LD_INT 21
16681: PUSH
16682: LD_INT 22
16684: PUSH
16685: LD_INT 23
16687: PUSH
16688: LD_INT 24
16690: PUSH
16691: LD_INT 25
16693: PUSH
16694: LD_INT 26
16696: PUSH
16697: LD_INT 27
16699: PUSH
16700: LD_INT 28
16702: PUSH
16703: LD_INT 30
16705: PUSH
16706: LD_INT 31
16708: PUSH
16709: LD_INT 32
16711: PUSH
16712: LD_INT 33
16714: PUSH
16715: LD_INT 34
16717: PUSH
16718: LD_INT 36
16720: PUSH
16721: EMPTY
16722: LIST
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: LIST
16734: LIST
16735: LIST
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: LIST
16744: LIST
16745: LIST
16746: LIST
16747: LIST
16748: LIST
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: PUSH
16754: LD_INT 101
16756: PUSH
16757: LD_INT 102
16759: PUSH
16760: LD_INT 103
16762: PUSH
16763: LD_INT 104
16765: PUSH
16766: LD_INT 105
16768: PUSH
16769: LD_INT 106
16771: PUSH
16772: LD_INT 107
16774: PUSH
16775: LD_INT 108
16777: PUSH
16778: LD_INT 109
16780: PUSH
16781: LD_INT 110
16783: PUSH
16784: LD_INT 111
16786: PUSH
16787: LD_INT 112
16789: PUSH
16790: LD_INT 113
16792: PUSH
16793: LD_INT 114
16795: PUSH
16796: LD_INT 116
16798: PUSH
16799: LD_INT 117
16801: PUSH
16802: LD_INT 118
16804: PUSH
16805: EMPTY
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: PUSH
16824: EMPTY
16825: LIST
16826: LIST
16827: ST_TO_ADDR
16828: GO 18067
16830: LD_INT 14
16832: DOUBLE
16833: EQUAL
16834: IFTRUE 16838
16836: GO 17062
16838: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
16839: LD_ADDR_VAR 0 2
16843: PUSH
16844: LD_INT 1
16846: PUSH
16847: LD_INT 2
16849: PUSH
16850: LD_INT 3
16852: PUSH
16853: LD_INT 4
16855: PUSH
16856: LD_INT 5
16858: PUSH
16859: LD_INT 6
16861: PUSH
16862: LD_INT 7
16864: PUSH
16865: LD_INT 8
16867: PUSH
16868: LD_INT 9
16870: PUSH
16871: LD_INT 10
16873: PUSH
16874: LD_INT 11
16876: PUSH
16877: LD_INT 12
16879: PUSH
16880: LD_INT 13
16882: PUSH
16883: LD_INT 14
16885: PUSH
16886: LD_INT 15
16888: PUSH
16889: LD_INT 16
16891: PUSH
16892: LD_INT 17
16894: PUSH
16895: LD_INT 18
16897: PUSH
16898: LD_INT 19
16900: PUSH
16901: LD_INT 20
16903: PUSH
16904: LD_INT 21
16906: PUSH
16907: LD_INT 22
16909: PUSH
16910: LD_INT 23
16912: PUSH
16913: LD_INT 24
16915: PUSH
16916: LD_INT 25
16918: PUSH
16919: LD_INT 26
16921: PUSH
16922: LD_INT 27
16924: PUSH
16925: LD_INT 28
16927: PUSH
16928: LD_INT 29
16930: PUSH
16931: LD_INT 30
16933: PUSH
16934: LD_INT 31
16936: PUSH
16937: LD_INT 32
16939: PUSH
16940: LD_INT 33
16942: PUSH
16943: LD_INT 34
16945: PUSH
16946: LD_INT 36
16948: PUSH
16949: EMPTY
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: LIST
16984: LIST
16985: PUSH
16986: LD_INT 101
16988: PUSH
16989: LD_INT 102
16991: PUSH
16992: LD_INT 103
16994: PUSH
16995: LD_INT 104
16997: PUSH
16998: LD_INT 105
17000: PUSH
17001: LD_INT 106
17003: PUSH
17004: LD_INT 107
17006: PUSH
17007: LD_INT 108
17009: PUSH
17010: LD_INT 109
17012: PUSH
17013: LD_INT 110
17015: PUSH
17016: LD_INT 111
17018: PUSH
17019: LD_INT 112
17021: PUSH
17022: LD_INT 113
17024: PUSH
17025: LD_INT 114
17027: PUSH
17028: LD_INT 116
17030: PUSH
17031: LD_INT 117
17033: PUSH
17034: LD_INT 118
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: ST_TO_ADDR
17060: GO 18067
17062: LD_INT 15
17064: DOUBLE
17065: EQUAL
17066: IFTRUE 17070
17068: GO 17294
17070: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
17071: LD_ADDR_VAR 0 2
17075: PUSH
17076: LD_INT 1
17078: PUSH
17079: LD_INT 2
17081: PUSH
17082: LD_INT 3
17084: PUSH
17085: LD_INT 4
17087: PUSH
17088: LD_INT 5
17090: PUSH
17091: LD_INT 6
17093: PUSH
17094: LD_INT 7
17096: PUSH
17097: LD_INT 8
17099: PUSH
17100: LD_INT 9
17102: PUSH
17103: LD_INT 10
17105: PUSH
17106: LD_INT 11
17108: PUSH
17109: LD_INT 12
17111: PUSH
17112: LD_INT 13
17114: PUSH
17115: LD_INT 14
17117: PUSH
17118: LD_INT 15
17120: PUSH
17121: LD_INT 16
17123: PUSH
17124: LD_INT 17
17126: PUSH
17127: LD_INT 18
17129: PUSH
17130: LD_INT 19
17132: PUSH
17133: LD_INT 20
17135: PUSH
17136: LD_INT 21
17138: PUSH
17139: LD_INT 22
17141: PUSH
17142: LD_INT 23
17144: PUSH
17145: LD_INT 24
17147: PUSH
17148: LD_INT 25
17150: PUSH
17151: LD_INT 26
17153: PUSH
17154: LD_INT 27
17156: PUSH
17157: LD_INT 28
17159: PUSH
17160: LD_INT 29
17162: PUSH
17163: LD_INT 30
17165: PUSH
17166: LD_INT 31
17168: PUSH
17169: LD_INT 32
17171: PUSH
17172: LD_INT 33
17174: PUSH
17175: LD_INT 34
17177: PUSH
17178: LD_INT 36
17180: PUSH
17181: EMPTY
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: PUSH
17218: LD_INT 101
17220: PUSH
17221: LD_INT 102
17223: PUSH
17224: LD_INT 103
17226: PUSH
17227: LD_INT 104
17229: PUSH
17230: LD_INT 105
17232: PUSH
17233: LD_INT 106
17235: PUSH
17236: LD_INT 107
17238: PUSH
17239: LD_INT 108
17241: PUSH
17242: LD_INT 109
17244: PUSH
17245: LD_INT 110
17247: PUSH
17248: LD_INT 111
17250: PUSH
17251: LD_INT 112
17253: PUSH
17254: LD_INT 113
17256: PUSH
17257: LD_INT 114
17259: PUSH
17260: LD_INT 116
17262: PUSH
17263: LD_INT 117
17265: PUSH
17266: LD_INT 118
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: PUSH
17288: EMPTY
17289: LIST
17290: LIST
17291: ST_TO_ADDR
17292: GO 18067
17294: LD_INT 16
17296: DOUBLE
17297: EQUAL
17298: IFTRUE 17302
17300: GO 17438
17302: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
17303: LD_ADDR_VAR 0 2
17307: PUSH
17308: LD_INT 2
17310: PUSH
17311: LD_INT 4
17313: PUSH
17314: LD_INT 5
17316: PUSH
17317: LD_INT 7
17319: PUSH
17320: LD_INT 11
17322: PUSH
17323: LD_INT 12
17325: PUSH
17326: LD_INT 15
17328: PUSH
17329: LD_INT 16
17331: PUSH
17332: LD_INT 20
17334: PUSH
17335: LD_INT 21
17337: PUSH
17338: LD_INT 22
17340: PUSH
17341: LD_INT 23
17343: PUSH
17344: LD_INT 25
17346: PUSH
17347: LD_INT 26
17349: PUSH
17350: LD_INT 30
17352: PUSH
17353: LD_INT 31
17355: PUSH
17356: LD_INT 32
17358: PUSH
17359: LD_INT 33
17361: PUSH
17362: LD_INT 34
17364: PUSH
17365: EMPTY
17366: LIST
17367: LIST
17368: LIST
17369: LIST
17370: LIST
17371: LIST
17372: LIST
17373: LIST
17374: LIST
17375: LIST
17376: LIST
17377: LIST
17378: LIST
17379: LIST
17380: LIST
17381: LIST
17382: LIST
17383: LIST
17384: LIST
17385: PUSH
17386: LD_INT 101
17388: PUSH
17389: LD_INT 102
17391: PUSH
17392: LD_INT 103
17394: PUSH
17395: LD_INT 106
17397: PUSH
17398: LD_INT 108
17400: PUSH
17401: LD_INT 112
17403: PUSH
17404: LD_INT 113
17406: PUSH
17407: LD_INT 114
17409: PUSH
17410: LD_INT 116
17412: PUSH
17413: LD_INT 117
17415: PUSH
17416: LD_INT 118
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: ST_TO_ADDR
17436: GO 18067
17438: LD_INT 17
17440: DOUBLE
17441: EQUAL
17442: IFTRUE 17446
17444: GO 17670
17446: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
17447: LD_ADDR_VAR 0 2
17451: PUSH
17452: LD_INT 1
17454: PUSH
17455: LD_INT 2
17457: PUSH
17458: LD_INT 3
17460: PUSH
17461: LD_INT 4
17463: PUSH
17464: LD_INT 5
17466: PUSH
17467: LD_INT 6
17469: PUSH
17470: LD_INT 7
17472: PUSH
17473: LD_INT 8
17475: PUSH
17476: LD_INT 9
17478: PUSH
17479: LD_INT 10
17481: PUSH
17482: LD_INT 11
17484: PUSH
17485: LD_INT 12
17487: PUSH
17488: LD_INT 13
17490: PUSH
17491: LD_INT 14
17493: PUSH
17494: LD_INT 15
17496: PUSH
17497: LD_INT 16
17499: PUSH
17500: LD_INT 17
17502: PUSH
17503: LD_INT 18
17505: PUSH
17506: LD_INT 19
17508: PUSH
17509: LD_INT 20
17511: PUSH
17512: LD_INT 21
17514: PUSH
17515: LD_INT 22
17517: PUSH
17518: LD_INT 23
17520: PUSH
17521: LD_INT 24
17523: PUSH
17524: LD_INT 25
17526: PUSH
17527: LD_INT 26
17529: PUSH
17530: LD_INT 27
17532: PUSH
17533: LD_INT 28
17535: PUSH
17536: LD_INT 29
17538: PUSH
17539: LD_INT 30
17541: PUSH
17542: LD_INT 31
17544: PUSH
17545: LD_INT 32
17547: PUSH
17548: LD_INT 33
17550: PUSH
17551: LD_INT 34
17553: PUSH
17554: LD_INT 36
17556: PUSH
17557: EMPTY
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: LIST
17582: LIST
17583: LIST
17584: LIST
17585: LIST
17586: LIST
17587: LIST
17588: LIST
17589: LIST
17590: LIST
17591: LIST
17592: LIST
17593: PUSH
17594: LD_INT 101
17596: PUSH
17597: LD_INT 102
17599: PUSH
17600: LD_INT 103
17602: PUSH
17603: LD_INT 104
17605: PUSH
17606: LD_INT 105
17608: PUSH
17609: LD_INT 106
17611: PUSH
17612: LD_INT 107
17614: PUSH
17615: LD_INT 108
17617: PUSH
17618: LD_INT 109
17620: PUSH
17621: LD_INT 110
17623: PUSH
17624: LD_INT 111
17626: PUSH
17627: LD_INT 112
17629: PUSH
17630: LD_INT 113
17632: PUSH
17633: LD_INT 114
17635: PUSH
17636: LD_INT 116
17638: PUSH
17639: LD_INT 117
17641: PUSH
17642: LD_INT 118
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: LIST
17649: LIST
17650: LIST
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: PUSH
17664: EMPTY
17665: LIST
17666: LIST
17667: ST_TO_ADDR
17668: GO 18067
17670: LD_INT 18
17672: DOUBLE
17673: EQUAL
17674: IFTRUE 17678
17676: GO 17826
17678: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
17679: LD_ADDR_VAR 0 2
17683: PUSH
17684: LD_INT 2
17686: PUSH
17687: LD_INT 4
17689: PUSH
17690: LD_INT 5
17692: PUSH
17693: LD_INT 7
17695: PUSH
17696: LD_INT 11
17698: PUSH
17699: LD_INT 12
17701: PUSH
17702: LD_INT 15
17704: PUSH
17705: LD_INT 16
17707: PUSH
17708: LD_INT 20
17710: PUSH
17711: LD_INT 21
17713: PUSH
17714: LD_INT 22
17716: PUSH
17717: LD_INT 23
17719: PUSH
17720: LD_INT 25
17722: PUSH
17723: LD_INT 26
17725: PUSH
17726: LD_INT 30
17728: PUSH
17729: LD_INT 31
17731: PUSH
17732: LD_INT 32
17734: PUSH
17735: LD_INT 33
17737: PUSH
17738: LD_INT 34
17740: PUSH
17741: LD_INT 35
17743: PUSH
17744: LD_INT 36
17746: PUSH
17747: EMPTY
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: LIST
17768: LIST
17769: PUSH
17770: LD_INT 101
17772: PUSH
17773: LD_INT 102
17775: PUSH
17776: LD_INT 103
17778: PUSH
17779: LD_INT 106
17781: PUSH
17782: LD_INT 108
17784: PUSH
17785: LD_INT 112
17787: PUSH
17788: LD_INT 113
17790: PUSH
17791: LD_INT 114
17793: PUSH
17794: LD_INT 115
17796: PUSH
17797: LD_INT 116
17799: PUSH
17800: LD_INT 117
17802: PUSH
17803: LD_INT 118
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: LIST
17810: LIST
17811: LIST
17812: LIST
17813: LIST
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: ST_TO_ADDR
17824: GO 18067
17826: LD_INT 19
17828: DOUBLE
17829: EQUAL
17830: IFTRUE 17834
17832: GO 18066
17834: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
17835: LD_ADDR_VAR 0 2
17839: PUSH
17840: LD_INT 1
17842: PUSH
17843: LD_INT 2
17845: PUSH
17846: LD_INT 3
17848: PUSH
17849: LD_INT 4
17851: PUSH
17852: LD_INT 5
17854: PUSH
17855: LD_INT 6
17857: PUSH
17858: LD_INT 7
17860: PUSH
17861: LD_INT 8
17863: PUSH
17864: LD_INT 9
17866: PUSH
17867: LD_INT 10
17869: PUSH
17870: LD_INT 11
17872: PUSH
17873: LD_INT 12
17875: PUSH
17876: LD_INT 13
17878: PUSH
17879: LD_INT 14
17881: PUSH
17882: LD_INT 15
17884: PUSH
17885: LD_INT 16
17887: PUSH
17888: LD_INT 17
17890: PUSH
17891: LD_INT 18
17893: PUSH
17894: LD_INT 19
17896: PUSH
17897: LD_INT 20
17899: PUSH
17900: LD_INT 21
17902: PUSH
17903: LD_INT 22
17905: PUSH
17906: LD_INT 23
17908: PUSH
17909: LD_INT 24
17911: PUSH
17912: LD_INT 25
17914: PUSH
17915: LD_INT 26
17917: PUSH
17918: LD_INT 27
17920: PUSH
17921: LD_INT 28
17923: PUSH
17924: LD_INT 29
17926: PUSH
17927: LD_INT 30
17929: PUSH
17930: LD_INT 31
17932: PUSH
17933: LD_INT 32
17935: PUSH
17936: LD_INT 33
17938: PUSH
17939: LD_INT 34
17941: PUSH
17942: LD_INT 35
17944: PUSH
17945: LD_INT 36
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: LIST
17952: LIST
17953: LIST
17954: LIST
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: LIST
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: PUSH
17986: LD_INT 101
17988: PUSH
17989: LD_INT 102
17991: PUSH
17992: LD_INT 103
17994: PUSH
17995: LD_INT 104
17997: PUSH
17998: LD_INT 105
18000: PUSH
18001: LD_INT 106
18003: PUSH
18004: LD_INT 107
18006: PUSH
18007: LD_INT 108
18009: PUSH
18010: LD_INT 109
18012: PUSH
18013: LD_INT 110
18015: PUSH
18016: LD_INT 111
18018: PUSH
18019: LD_INT 112
18021: PUSH
18022: LD_INT 113
18024: PUSH
18025: LD_INT 114
18027: PUSH
18028: LD_INT 115
18030: PUSH
18031: LD_INT 116
18033: PUSH
18034: LD_INT 117
18036: PUSH
18037: LD_INT 118
18039: PUSH
18040: EMPTY
18041: LIST
18042: LIST
18043: LIST
18044: LIST
18045: LIST
18046: LIST
18047: LIST
18048: LIST
18049: LIST
18050: LIST
18051: LIST
18052: LIST
18053: LIST
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: ST_TO_ADDR
18064: GO 18067
18066: POP
// end else
18067: GO 18298
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
18069: LD_ADDR_VAR 0 2
18073: PUSH
18074: LD_INT 1
18076: PUSH
18077: LD_INT 2
18079: PUSH
18080: LD_INT 3
18082: PUSH
18083: LD_INT 4
18085: PUSH
18086: LD_INT 5
18088: PUSH
18089: LD_INT 6
18091: PUSH
18092: LD_INT 7
18094: PUSH
18095: LD_INT 8
18097: PUSH
18098: LD_INT 9
18100: PUSH
18101: LD_INT 10
18103: PUSH
18104: LD_INT 11
18106: PUSH
18107: LD_INT 12
18109: PUSH
18110: LD_INT 13
18112: PUSH
18113: LD_INT 14
18115: PUSH
18116: LD_INT 15
18118: PUSH
18119: LD_INT 16
18121: PUSH
18122: LD_INT 17
18124: PUSH
18125: LD_INT 18
18127: PUSH
18128: LD_INT 19
18130: PUSH
18131: LD_INT 20
18133: PUSH
18134: LD_INT 21
18136: PUSH
18137: LD_INT 22
18139: PUSH
18140: LD_INT 23
18142: PUSH
18143: LD_INT 24
18145: PUSH
18146: LD_INT 25
18148: PUSH
18149: LD_INT 26
18151: PUSH
18152: LD_INT 27
18154: PUSH
18155: LD_INT 28
18157: PUSH
18158: LD_INT 29
18160: PUSH
18161: LD_INT 30
18163: PUSH
18164: LD_INT 31
18166: PUSH
18167: LD_INT 32
18169: PUSH
18170: LD_INT 33
18172: PUSH
18173: LD_INT 34
18175: PUSH
18176: LD_INT 35
18178: PUSH
18179: LD_INT 36
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: LIST
18205: LIST
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: LIST
18219: PUSH
18220: LD_INT 101
18222: PUSH
18223: LD_INT 102
18225: PUSH
18226: LD_INT 103
18228: PUSH
18229: LD_INT 104
18231: PUSH
18232: LD_INT 105
18234: PUSH
18235: LD_INT 106
18237: PUSH
18238: LD_INT 107
18240: PUSH
18241: LD_INT 108
18243: PUSH
18244: LD_INT 109
18246: PUSH
18247: LD_INT 110
18249: PUSH
18250: LD_INT 111
18252: PUSH
18253: LD_INT 112
18255: PUSH
18256: LD_INT 113
18258: PUSH
18259: LD_INT 114
18261: PUSH
18262: LD_INT 115
18264: PUSH
18265: LD_INT 116
18267: PUSH
18268: LD_INT 117
18270: PUSH
18271: LD_INT 118
18273: PUSH
18274: EMPTY
18275: LIST
18276: LIST
18277: LIST
18278: LIST
18279: LIST
18280: LIST
18281: LIST
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: ST_TO_ADDR
// if result then
18298: LD_VAR 0 2
18302: IFFALSE 19088
// begin normal :=  ;
18304: LD_ADDR_VAR 0 5
18308: PUSH
18309: LD_STRING 
18311: ST_TO_ADDR
// hardcore :=  ;
18312: LD_ADDR_VAR 0 6
18316: PUSH
18317: LD_STRING 
18319: ST_TO_ADDR
// active :=  ;
18320: LD_ADDR_VAR 0 7
18324: PUSH
18325: LD_STRING 
18327: ST_TO_ADDR
// for i = 1 to normalCounter do
18328: LD_ADDR_VAR 0 8
18332: PUSH
18333: DOUBLE
18334: LD_INT 1
18336: DEC
18337: ST_TO_ADDR
18338: LD_EXP 34
18342: PUSH
18343: FOR_TO
18344: IFFALSE 18445
// begin tmp := 0 ;
18346: LD_ADDR_VAR 0 3
18350: PUSH
18351: LD_STRING 0
18353: ST_TO_ADDR
// if result [ 1 ] then
18354: LD_VAR 0 2
18358: PUSH
18359: LD_INT 1
18361: ARRAY
18362: IFFALSE 18427
// if result [ 1 ] [ 1 ] = i then
18364: LD_VAR 0 2
18368: PUSH
18369: LD_INT 1
18371: ARRAY
18372: PUSH
18373: LD_INT 1
18375: ARRAY
18376: PUSH
18377: LD_VAR 0 8
18381: EQUAL
18382: IFFALSE 18427
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
18384: LD_ADDR_VAR 0 2
18388: PUSH
18389: LD_VAR 0 2
18393: PPUSH
18394: LD_INT 1
18396: PPUSH
18397: LD_VAR 0 2
18401: PUSH
18402: LD_INT 1
18404: ARRAY
18405: PPUSH
18406: LD_INT 1
18408: PPUSH
18409: CALL_OW 3
18413: PPUSH
18414: CALL_OW 1
18418: ST_TO_ADDR
// tmp := 1 ;
18419: LD_ADDR_VAR 0 3
18423: PUSH
18424: LD_STRING 1
18426: ST_TO_ADDR
// end ; normal := normal & tmp ;
18427: LD_ADDR_VAR 0 5
18431: PUSH
18432: LD_VAR 0 5
18436: PUSH
18437: LD_VAR 0 3
18441: STR
18442: ST_TO_ADDR
// end ;
18443: GO 18343
18445: POP
18446: POP
// for i = 1 to hardcoreCounter do
18447: LD_ADDR_VAR 0 8
18451: PUSH
18452: DOUBLE
18453: LD_INT 1
18455: DEC
18456: ST_TO_ADDR
18457: LD_EXP 35
18461: PUSH
18462: FOR_TO
18463: IFFALSE 18568
// begin tmp := 0 ;
18465: LD_ADDR_VAR 0 3
18469: PUSH
18470: LD_STRING 0
18472: ST_TO_ADDR
// if result [ 2 ] then
18473: LD_VAR 0 2
18477: PUSH
18478: LD_INT 2
18480: ARRAY
18481: IFFALSE 18550
// if result [ 2 ] [ 1 ] = 100 + i then
18483: LD_VAR 0 2
18487: PUSH
18488: LD_INT 2
18490: ARRAY
18491: PUSH
18492: LD_INT 1
18494: ARRAY
18495: PUSH
18496: LD_INT 100
18498: PUSH
18499: LD_VAR 0 8
18503: PLUS
18504: EQUAL
18505: IFFALSE 18550
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
18507: LD_ADDR_VAR 0 2
18511: PUSH
18512: LD_VAR 0 2
18516: PPUSH
18517: LD_INT 2
18519: PPUSH
18520: LD_VAR 0 2
18524: PUSH
18525: LD_INT 2
18527: ARRAY
18528: PPUSH
18529: LD_INT 1
18531: PPUSH
18532: CALL_OW 3
18536: PPUSH
18537: CALL_OW 1
18541: ST_TO_ADDR
// tmp := 1 ;
18542: LD_ADDR_VAR 0 3
18546: PUSH
18547: LD_STRING 1
18549: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
18550: LD_ADDR_VAR 0 6
18554: PUSH
18555: LD_VAR 0 6
18559: PUSH
18560: LD_VAR 0 3
18564: STR
18565: ST_TO_ADDR
// end ;
18566: GO 18462
18568: POP
18569: POP
// if isGameLoad then
18570: LD_VAR 0 1
18574: IFFALSE 19049
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
18576: LD_ADDR_VAR 0 4
18580: PUSH
18581: LD_EXP 38
18585: PUSH
18586: LD_EXP 37
18590: PUSH
18591: LD_EXP 39
18595: PUSH
18596: LD_EXP 36
18600: PUSH
18601: LD_EXP 40
18605: PUSH
18606: LD_EXP 41
18610: PUSH
18611: LD_EXP 42
18615: PUSH
18616: LD_EXP 43
18620: PUSH
18621: LD_EXP 44
18625: PUSH
18626: LD_EXP 45
18630: PUSH
18631: LD_EXP 46
18635: PUSH
18636: LD_EXP 47
18640: PUSH
18641: LD_EXP 48
18645: PUSH
18646: LD_EXP 49
18650: PUSH
18651: LD_EXP 57
18655: PUSH
18656: LD_EXP 58
18660: PUSH
18661: LD_EXP 59
18665: PUSH
18666: LD_EXP 60
18670: PUSH
18671: LD_EXP 62
18675: PUSH
18676: LD_EXP 63
18680: PUSH
18681: LD_EXP 64
18685: PUSH
18686: LD_EXP 67
18690: PUSH
18691: LD_EXP 69
18695: PUSH
18696: LD_EXP 70
18700: PUSH
18701: LD_EXP 71
18705: PUSH
18706: LD_EXP 73
18710: PUSH
18711: LD_EXP 74
18715: PUSH
18716: LD_EXP 77
18720: PUSH
18721: LD_EXP 78
18725: PUSH
18726: LD_EXP 79
18730: PUSH
18731: LD_EXP 80
18735: PUSH
18736: LD_EXP 81
18740: PUSH
18741: LD_EXP 82
18745: PUSH
18746: LD_EXP 83
18750: PUSH
18751: LD_EXP 84
18755: PUSH
18756: LD_EXP 85
18760: PUSH
18761: LD_EXP 50
18765: PUSH
18766: LD_EXP 51
18770: PUSH
18771: LD_EXP 54
18775: PUSH
18776: LD_EXP 55
18780: PUSH
18781: LD_EXP 56
18785: PUSH
18786: LD_EXP 52
18790: PUSH
18791: LD_EXP 53
18795: PUSH
18796: LD_EXP 61
18800: PUSH
18801: LD_EXP 65
18805: PUSH
18806: LD_EXP 66
18810: PUSH
18811: LD_EXP 68
18815: PUSH
18816: LD_EXP 72
18820: PUSH
18821: LD_EXP 75
18825: PUSH
18826: LD_EXP 76
18830: PUSH
18831: LD_EXP 86
18835: PUSH
18836: LD_EXP 87
18840: PUSH
18841: LD_EXP 88
18845: PUSH
18846: LD_EXP 89
18850: PUSH
18851: EMPTY
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: ST_TO_ADDR
// tmp :=  ;
18907: LD_ADDR_VAR 0 3
18911: PUSH
18912: LD_STRING 
18914: ST_TO_ADDR
// for i = 1 to normalCounter do
18915: LD_ADDR_VAR 0 8
18919: PUSH
18920: DOUBLE
18921: LD_INT 1
18923: DEC
18924: ST_TO_ADDR
18925: LD_EXP 34
18929: PUSH
18930: FOR_TO
18931: IFFALSE 18967
// begin if flags [ i ] then
18933: LD_VAR 0 4
18937: PUSH
18938: LD_VAR 0 8
18942: ARRAY
18943: IFFALSE 18965
// tmp := tmp & i & ; ;
18945: LD_ADDR_VAR 0 3
18949: PUSH
18950: LD_VAR 0 3
18954: PUSH
18955: LD_VAR 0 8
18959: STR
18960: PUSH
18961: LD_STRING ;
18963: STR
18964: ST_TO_ADDR
// end ;
18965: GO 18930
18967: POP
18968: POP
// for i = 1 to hardcoreCounter do
18969: LD_ADDR_VAR 0 8
18973: PUSH
18974: DOUBLE
18975: LD_INT 1
18977: DEC
18978: ST_TO_ADDR
18979: LD_EXP 35
18983: PUSH
18984: FOR_TO
18985: IFFALSE 19031
// begin if flags [ normalCounter + i ] then
18987: LD_VAR 0 4
18991: PUSH
18992: LD_EXP 34
18996: PUSH
18997: LD_VAR 0 8
19001: PLUS
19002: ARRAY
19003: IFFALSE 19029
// tmp := tmp & ( 100 + i ) & ; ;
19005: LD_ADDR_VAR 0 3
19009: PUSH
19010: LD_VAR 0 3
19014: PUSH
19015: LD_INT 100
19017: PUSH
19018: LD_VAR 0 8
19022: PLUS
19023: STR
19024: PUSH
19025: LD_STRING ;
19027: STR
19028: ST_TO_ADDR
// end ;
19029: GO 18984
19031: POP
19032: POP
// if tmp then
19033: LD_VAR 0 3
19037: IFFALSE 19049
// active := tmp ;
19039: LD_ADDR_VAR 0 7
19043: PUSH
19044: LD_VAR 0 3
19048: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
19049: LD_STRING getStreamItemsFromMission("
19051: PUSH
19052: LD_VAR 0 5
19056: STR
19057: PUSH
19058: LD_STRING ","
19060: STR
19061: PUSH
19062: LD_VAR 0 6
19066: STR
19067: PUSH
19068: LD_STRING ","
19070: STR
19071: PUSH
19072: LD_VAR 0 7
19076: STR
19077: PUSH
19078: LD_STRING ")
19080: STR
19081: PPUSH
19082: CALL_OW 559
// end else
19086: GO 19095
// ToLua ( getStreamItemsFromMission("","","") ) ;
19088: LD_STRING getStreamItemsFromMission("","","")
19090: PPUSH
19091: CALL_OW 559
// end ;
19095: LD_VAR 0 2
19099: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
19100: LD_EXP 33
19104: PUSH
19105: LD_EXP 38
19109: AND
19110: IFFALSE 19234
19112: GO 19114
19114: DISABLE
19115: LD_INT 0
19117: PPUSH
19118: PPUSH
// begin enable ;
19119: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
19120: LD_ADDR_VAR 0 2
19124: PUSH
19125: LD_INT 22
19127: PUSH
19128: LD_OWVAR 2
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: PUSH
19137: LD_INT 2
19139: PUSH
19140: LD_INT 34
19142: PUSH
19143: LD_INT 7
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: PUSH
19150: LD_INT 34
19152: PUSH
19153: LD_INT 45
19155: PUSH
19156: EMPTY
19157: LIST
19158: LIST
19159: PUSH
19160: LD_INT 34
19162: PUSH
19163: LD_INT 28
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: LD_INT 34
19172: PUSH
19173: LD_INT 47
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PPUSH
19191: CALL_OW 69
19195: ST_TO_ADDR
// if not tmp then
19196: LD_VAR 0 2
19200: NOT
19201: IFFALSE 19205
// exit ;
19203: GO 19234
// for i in tmp do
19205: LD_ADDR_VAR 0 1
19209: PUSH
19210: LD_VAR 0 2
19214: PUSH
19215: FOR_IN
19216: IFFALSE 19232
// begin SetLives ( i , 0 ) ;
19218: LD_VAR 0 1
19222: PPUSH
19223: LD_INT 0
19225: PPUSH
19226: CALL_OW 234
// end ;
19230: GO 19215
19232: POP
19233: POP
// end ;
19234: PPOPN 2
19236: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
19237: LD_EXP 33
19241: PUSH
19242: LD_EXP 39
19246: AND
19247: IFFALSE 19331
19249: GO 19251
19251: DISABLE
19252: LD_INT 0
19254: PPUSH
19255: PPUSH
// begin enable ;
19256: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
19257: LD_ADDR_VAR 0 2
19261: PUSH
19262: LD_INT 22
19264: PUSH
19265: LD_OWVAR 2
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: PUSH
19274: LD_INT 32
19276: PUSH
19277: LD_INT 3
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: PPUSH
19288: CALL_OW 69
19292: ST_TO_ADDR
// if not tmp then
19293: LD_VAR 0 2
19297: NOT
19298: IFFALSE 19302
// exit ;
19300: GO 19331
// for i in tmp do
19302: LD_ADDR_VAR 0 1
19306: PUSH
19307: LD_VAR 0 2
19311: PUSH
19312: FOR_IN
19313: IFFALSE 19329
// begin SetLives ( i , 0 ) ;
19315: LD_VAR 0 1
19319: PPUSH
19320: LD_INT 0
19322: PPUSH
19323: CALL_OW 234
// end ;
19327: GO 19312
19329: POP
19330: POP
// end ;
19331: PPOPN 2
19333: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
19334: LD_EXP 33
19338: PUSH
19339: LD_EXP 36
19343: AND
19344: IFFALSE 19437
19346: GO 19348
19348: DISABLE
19349: LD_INT 0
19351: PPUSH
// begin enable ;
19352: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
19353: LD_ADDR_VAR 0 1
19357: PUSH
19358: LD_INT 22
19360: PUSH
19361: LD_OWVAR 2
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: PUSH
19370: LD_INT 2
19372: PUSH
19373: LD_INT 25
19375: PUSH
19376: LD_INT 5
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: PUSH
19383: LD_INT 25
19385: PUSH
19386: LD_INT 9
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: PUSH
19393: LD_INT 25
19395: PUSH
19396: LD_INT 8
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PPUSH
19413: CALL_OW 69
19417: PUSH
19418: FOR_IN
19419: IFFALSE 19435
// begin SetClass ( i , 1 ) ;
19421: LD_VAR 0 1
19425: PPUSH
19426: LD_INT 1
19428: PPUSH
19429: CALL_OW 336
// end ;
19433: GO 19418
19435: POP
19436: POP
// end ;
19437: PPOPN 1
19439: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
19440: LD_EXP 33
19444: PUSH
19445: LD_EXP 37
19449: AND
19450: PUSH
19451: LD_OWVAR 65
19455: PUSH
19456: LD_INT 7
19458: LESS
19459: AND
19460: IFFALSE 19474
19462: GO 19464
19464: DISABLE
// begin enable ;
19465: ENABLE
// game_speed := 7 ;
19466: LD_ADDR_OWVAR 65
19470: PUSH
19471: LD_INT 7
19473: ST_TO_ADDR
// end ;
19474: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
19475: LD_EXP 33
19479: PUSH
19480: LD_EXP 40
19484: AND
19485: IFFALSE 19687
19487: GO 19489
19489: DISABLE
19490: LD_INT 0
19492: PPUSH
19493: PPUSH
19494: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19495: LD_ADDR_VAR 0 3
19499: PUSH
19500: LD_INT 81
19502: PUSH
19503: LD_OWVAR 2
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: LD_INT 21
19514: PUSH
19515: LD_INT 1
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: PPUSH
19526: CALL_OW 69
19530: ST_TO_ADDR
// if not tmp then
19531: LD_VAR 0 3
19535: NOT
19536: IFFALSE 19540
// exit ;
19538: GO 19687
// if tmp > 5 then
19540: LD_VAR 0 3
19544: PUSH
19545: LD_INT 5
19547: GREATER
19548: IFFALSE 19560
// k := 5 else
19550: LD_ADDR_VAR 0 2
19554: PUSH
19555: LD_INT 5
19557: ST_TO_ADDR
19558: GO 19570
// k := tmp ;
19560: LD_ADDR_VAR 0 2
19564: PUSH
19565: LD_VAR 0 3
19569: ST_TO_ADDR
// for i := 1 to k do
19570: LD_ADDR_VAR 0 1
19574: PUSH
19575: DOUBLE
19576: LD_INT 1
19578: DEC
19579: ST_TO_ADDR
19580: LD_VAR 0 2
19584: PUSH
19585: FOR_TO
19586: IFFALSE 19685
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
19588: LD_VAR 0 3
19592: PUSH
19593: LD_VAR 0 1
19597: ARRAY
19598: PPUSH
19599: LD_VAR 0 1
19603: PUSH
19604: LD_INT 4
19606: MOD
19607: PUSH
19608: LD_INT 1
19610: PLUS
19611: PPUSH
19612: CALL_OW 259
19616: PUSH
19617: LD_INT 10
19619: LESS
19620: IFFALSE 19683
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
19622: LD_VAR 0 3
19626: PUSH
19627: LD_VAR 0 1
19631: ARRAY
19632: PPUSH
19633: LD_VAR 0 1
19637: PUSH
19638: LD_INT 4
19640: MOD
19641: PUSH
19642: LD_INT 1
19644: PLUS
19645: PPUSH
19646: LD_VAR 0 3
19650: PUSH
19651: LD_VAR 0 1
19655: ARRAY
19656: PPUSH
19657: LD_VAR 0 1
19661: PUSH
19662: LD_INT 4
19664: MOD
19665: PUSH
19666: LD_INT 1
19668: PLUS
19669: PPUSH
19670: CALL_OW 259
19674: PUSH
19675: LD_INT 1
19677: PLUS
19678: PPUSH
19679: CALL_OW 237
19683: GO 19585
19685: POP
19686: POP
// end ;
19687: PPOPN 3
19689: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
19690: LD_EXP 33
19694: PUSH
19695: LD_EXP 41
19699: AND
19700: IFFALSE 19720
19702: GO 19704
19704: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
19705: LD_INT 4
19707: PPUSH
19708: LD_OWVAR 2
19712: PPUSH
19713: LD_INT 0
19715: PPUSH
19716: CALL_OW 324
19720: END
// every 0 0$1 trigger StreamModeActive and sShovel do
19721: LD_EXP 33
19725: PUSH
19726: LD_EXP 70
19730: AND
19731: IFFALSE 19751
19733: GO 19735
19735: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
19736: LD_INT 19
19738: PPUSH
19739: LD_OWVAR 2
19743: PPUSH
19744: LD_INT 0
19746: PPUSH
19747: CALL_OW 324
19751: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
19752: LD_EXP 33
19756: PUSH
19757: LD_EXP 42
19761: AND
19762: IFFALSE 19864
19764: GO 19766
19766: DISABLE
19767: LD_INT 0
19769: PPUSH
19770: PPUSH
// begin enable ;
19771: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
19772: LD_ADDR_VAR 0 2
19776: PUSH
19777: LD_INT 22
19779: PUSH
19780: LD_OWVAR 2
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: PUSH
19789: LD_INT 2
19791: PUSH
19792: LD_INT 34
19794: PUSH
19795: LD_INT 11
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PUSH
19802: LD_INT 34
19804: PUSH
19805: LD_INT 30
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: LIST
19816: PUSH
19817: EMPTY
19818: LIST
19819: LIST
19820: PPUSH
19821: CALL_OW 69
19825: ST_TO_ADDR
// if not tmp then
19826: LD_VAR 0 2
19830: NOT
19831: IFFALSE 19835
// exit ;
19833: GO 19864
// for i in tmp do
19835: LD_ADDR_VAR 0 1
19839: PUSH
19840: LD_VAR 0 2
19844: PUSH
19845: FOR_IN
19846: IFFALSE 19862
// begin SetLives ( i , 0 ) ;
19848: LD_VAR 0 1
19852: PPUSH
19853: LD_INT 0
19855: PPUSH
19856: CALL_OW 234
// end ;
19860: GO 19845
19862: POP
19863: POP
// end ;
19864: PPOPN 2
19866: END
// every 0 0$1 trigger StreamModeActive and sBunker do
19867: LD_EXP 33
19871: PUSH
19872: LD_EXP 43
19876: AND
19877: IFFALSE 19897
19879: GO 19881
19881: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
19882: LD_INT 32
19884: PPUSH
19885: LD_OWVAR 2
19889: PPUSH
19890: LD_INT 0
19892: PPUSH
19893: CALL_OW 324
19897: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
19898: LD_EXP 33
19902: PUSH
19903: LD_EXP 44
19907: AND
19908: IFFALSE 20089
19910: GO 19912
19912: DISABLE
19913: LD_INT 0
19915: PPUSH
19916: PPUSH
19917: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
19918: LD_ADDR_VAR 0 2
19922: PUSH
19923: LD_INT 22
19925: PUSH
19926: LD_OWVAR 2
19930: PUSH
19931: EMPTY
19932: LIST
19933: LIST
19934: PUSH
19935: LD_INT 33
19937: PUSH
19938: LD_INT 3
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: PUSH
19945: EMPTY
19946: LIST
19947: LIST
19948: PPUSH
19949: CALL_OW 69
19953: ST_TO_ADDR
// if not tmp then
19954: LD_VAR 0 2
19958: NOT
19959: IFFALSE 19963
// exit ;
19961: GO 20089
// side := 0 ;
19963: LD_ADDR_VAR 0 3
19967: PUSH
19968: LD_INT 0
19970: ST_TO_ADDR
// for i := 1 to 8 do
19971: LD_ADDR_VAR 0 1
19975: PUSH
19976: DOUBLE
19977: LD_INT 1
19979: DEC
19980: ST_TO_ADDR
19981: LD_INT 8
19983: PUSH
19984: FOR_TO
19985: IFFALSE 20033
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
19987: LD_OWVAR 2
19991: PUSH
19992: LD_VAR 0 1
19996: NONEQUAL
19997: PUSH
19998: LD_OWVAR 2
20002: PPUSH
20003: LD_VAR 0 1
20007: PPUSH
20008: CALL_OW 81
20012: PUSH
20013: LD_INT 2
20015: EQUAL
20016: AND
20017: IFFALSE 20031
// begin side := i ;
20019: LD_ADDR_VAR 0 3
20023: PUSH
20024: LD_VAR 0 1
20028: ST_TO_ADDR
// break ;
20029: GO 20033
// end ;
20031: GO 19984
20033: POP
20034: POP
// if not side then
20035: LD_VAR 0 3
20039: NOT
20040: IFFALSE 20044
// exit ;
20042: GO 20089
// for i := 1 to tmp do
20044: LD_ADDR_VAR 0 1
20048: PUSH
20049: DOUBLE
20050: LD_INT 1
20052: DEC
20053: ST_TO_ADDR
20054: LD_VAR 0 2
20058: PUSH
20059: FOR_TO
20060: IFFALSE 20087
// if Prob ( 60 ) then
20062: LD_INT 60
20064: PPUSH
20065: CALL_OW 13
20069: IFFALSE 20085
// SetSide ( i , side ) ;
20071: LD_VAR 0 1
20075: PPUSH
20076: LD_VAR 0 3
20080: PPUSH
20081: CALL_OW 235
20085: GO 20059
20087: POP
20088: POP
// end ;
20089: PPOPN 3
20091: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
20092: LD_EXP 33
20096: PUSH
20097: LD_EXP 46
20101: AND
20102: IFFALSE 20221
20104: GO 20106
20106: DISABLE
20107: LD_INT 0
20109: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
20110: LD_ADDR_VAR 0 1
20114: PUSH
20115: LD_INT 22
20117: PUSH
20118: LD_OWVAR 2
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: PUSH
20127: LD_INT 21
20129: PUSH
20130: LD_INT 1
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: PUSH
20137: LD_INT 3
20139: PUSH
20140: LD_INT 23
20142: PUSH
20143: LD_INT 0
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: PUSH
20150: EMPTY
20151: LIST
20152: LIST
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: LIST
20158: PPUSH
20159: CALL_OW 69
20163: PUSH
20164: FOR_IN
20165: IFFALSE 20219
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
20167: LD_VAR 0 1
20171: PPUSH
20172: CALL_OW 257
20176: PUSH
20177: LD_INT 1
20179: PUSH
20180: LD_INT 2
20182: PUSH
20183: LD_INT 3
20185: PUSH
20186: LD_INT 4
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: LIST
20193: LIST
20194: IN
20195: IFFALSE 20217
// SetClass ( un , rand ( 1 , 4 ) ) ;
20197: LD_VAR 0 1
20201: PPUSH
20202: LD_INT 1
20204: PPUSH
20205: LD_INT 4
20207: PPUSH
20208: CALL_OW 12
20212: PPUSH
20213: CALL_OW 336
20217: GO 20164
20219: POP
20220: POP
// end ;
20221: PPOPN 1
20223: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
20224: LD_EXP 33
20228: PUSH
20229: LD_EXP 45
20233: AND
20234: IFFALSE 20313
20236: GO 20238
20238: DISABLE
20239: LD_INT 0
20241: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20242: LD_ADDR_VAR 0 1
20246: PUSH
20247: LD_INT 22
20249: PUSH
20250: LD_OWVAR 2
20254: PUSH
20255: EMPTY
20256: LIST
20257: LIST
20258: PUSH
20259: LD_INT 21
20261: PUSH
20262: LD_INT 3
20264: PUSH
20265: EMPTY
20266: LIST
20267: LIST
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: PPUSH
20273: CALL_OW 69
20277: ST_TO_ADDR
// if not tmp then
20278: LD_VAR 0 1
20282: NOT
20283: IFFALSE 20287
// exit ;
20285: GO 20313
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
20287: LD_VAR 0 1
20291: PUSH
20292: LD_INT 1
20294: PPUSH
20295: LD_VAR 0 1
20299: PPUSH
20300: CALL_OW 12
20304: ARRAY
20305: PPUSH
20306: LD_INT 100
20308: PPUSH
20309: CALL_OW 234
// end ;
20313: PPOPN 1
20315: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
20316: LD_EXP 33
20320: PUSH
20321: LD_EXP 47
20325: AND
20326: IFFALSE 20424
20328: GO 20330
20330: DISABLE
20331: LD_INT 0
20333: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20334: LD_ADDR_VAR 0 1
20338: PUSH
20339: LD_INT 22
20341: PUSH
20342: LD_OWVAR 2
20346: PUSH
20347: EMPTY
20348: LIST
20349: LIST
20350: PUSH
20351: LD_INT 21
20353: PUSH
20354: LD_INT 1
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: PUSH
20361: EMPTY
20362: LIST
20363: LIST
20364: PPUSH
20365: CALL_OW 69
20369: ST_TO_ADDR
// if not tmp then
20370: LD_VAR 0 1
20374: NOT
20375: IFFALSE 20379
// exit ;
20377: GO 20424
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
20379: LD_VAR 0 1
20383: PUSH
20384: LD_INT 1
20386: PPUSH
20387: LD_VAR 0 1
20391: PPUSH
20392: CALL_OW 12
20396: ARRAY
20397: PPUSH
20398: LD_INT 1
20400: PPUSH
20401: LD_INT 4
20403: PPUSH
20404: CALL_OW 12
20408: PPUSH
20409: LD_INT 3000
20411: PPUSH
20412: LD_INT 9000
20414: PPUSH
20415: CALL_OW 12
20419: PPUSH
20420: CALL_OW 492
// end ;
20424: PPOPN 1
20426: END
// every 0 0$1 trigger StreamModeActive and sDepot do
20427: LD_EXP 33
20431: PUSH
20432: LD_EXP 48
20436: AND
20437: IFFALSE 20457
20439: GO 20441
20441: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
20442: LD_INT 1
20444: PPUSH
20445: LD_OWVAR 2
20449: PPUSH
20450: LD_INT 0
20452: PPUSH
20453: CALL_OW 324
20457: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
20458: LD_EXP 33
20462: PUSH
20463: LD_EXP 49
20467: AND
20468: IFFALSE 20551
20470: GO 20472
20472: DISABLE
20473: LD_INT 0
20475: PPUSH
20476: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20477: LD_ADDR_VAR 0 2
20481: PUSH
20482: LD_INT 22
20484: PUSH
20485: LD_OWVAR 2
20489: PUSH
20490: EMPTY
20491: LIST
20492: LIST
20493: PUSH
20494: LD_INT 21
20496: PUSH
20497: LD_INT 3
20499: PUSH
20500: EMPTY
20501: LIST
20502: LIST
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: PPUSH
20508: CALL_OW 69
20512: ST_TO_ADDR
// if not tmp then
20513: LD_VAR 0 2
20517: NOT
20518: IFFALSE 20522
// exit ;
20520: GO 20551
// for i in tmp do
20522: LD_ADDR_VAR 0 1
20526: PUSH
20527: LD_VAR 0 2
20531: PUSH
20532: FOR_IN
20533: IFFALSE 20549
// SetBLevel ( i , 10 ) ;
20535: LD_VAR 0 1
20539: PPUSH
20540: LD_INT 10
20542: PPUSH
20543: CALL_OW 241
20547: GO 20532
20549: POP
20550: POP
// end ;
20551: PPOPN 2
20553: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
20554: LD_EXP 33
20558: PUSH
20559: LD_EXP 50
20563: AND
20564: IFFALSE 20675
20566: GO 20568
20568: DISABLE
20569: LD_INT 0
20571: PPUSH
20572: PPUSH
20573: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20574: LD_ADDR_VAR 0 3
20578: PUSH
20579: LD_INT 22
20581: PUSH
20582: LD_OWVAR 2
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: PUSH
20591: LD_INT 25
20593: PUSH
20594: LD_INT 1
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: PUSH
20601: EMPTY
20602: LIST
20603: LIST
20604: PPUSH
20605: CALL_OW 69
20609: ST_TO_ADDR
// if not tmp then
20610: LD_VAR 0 3
20614: NOT
20615: IFFALSE 20619
// exit ;
20617: GO 20675
// un := tmp [ rand ( 1 , tmp ) ] ;
20619: LD_ADDR_VAR 0 2
20623: PUSH
20624: LD_VAR 0 3
20628: PUSH
20629: LD_INT 1
20631: PPUSH
20632: LD_VAR 0 3
20636: PPUSH
20637: CALL_OW 12
20641: ARRAY
20642: ST_TO_ADDR
// if Crawls ( un ) then
20643: LD_VAR 0 2
20647: PPUSH
20648: CALL_OW 318
20652: IFFALSE 20663
// ComWalk ( un ) ;
20654: LD_VAR 0 2
20658: PPUSH
20659: CALL_OW 138
// SetClass ( un , class_sniper ) ;
20663: LD_VAR 0 2
20667: PPUSH
20668: LD_INT 5
20670: PPUSH
20671: CALL_OW 336
// end ;
20675: PPOPN 3
20677: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
20678: LD_EXP 33
20682: PUSH
20683: LD_EXP 51
20687: AND
20688: PUSH
20689: LD_OWVAR 67
20693: PUSH
20694: LD_INT 4
20696: LESS
20697: AND
20698: IFFALSE 20717
20700: GO 20702
20702: DISABLE
// begin Difficulty := Difficulty + 1 ;
20703: LD_ADDR_OWVAR 67
20707: PUSH
20708: LD_OWVAR 67
20712: PUSH
20713: LD_INT 1
20715: PLUS
20716: ST_TO_ADDR
// end ;
20717: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
20718: LD_EXP 33
20722: PUSH
20723: LD_EXP 52
20727: AND
20728: IFFALSE 20831
20730: GO 20732
20732: DISABLE
20733: LD_INT 0
20735: PPUSH
// begin for i := 1 to 5 do
20736: LD_ADDR_VAR 0 1
20740: PUSH
20741: DOUBLE
20742: LD_INT 1
20744: DEC
20745: ST_TO_ADDR
20746: LD_INT 5
20748: PUSH
20749: FOR_TO
20750: IFFALSE 20829
// begin uc_nation := nation_nature ;
20752: LD_ADDR_OWVAR 21
20756: PUSH
20757: LD_INT 0
20759: ST_TO_ADDR
// uc_side := 0 ;
20760: LD_ADDR_OWVAR 20
20764: PUSH
20765: LD_INT 0
20767: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20768: LD_ADDR_OWVAR 29
20772: PUSH
20773: LD_INT 12
20775: PUSH
20776: LD_INT 12
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: ST_TO_ADDR
// hc_agressivity := 20 ;
20783: LD_ADDR_OWVAR 35
20787: PUSH
20788: LD_INT 20
20790: ST_TO_ADDR
// hc_class := class_tiger ;
20791: LD_ADDR_OWVAR 28
20795: PUSH
20796: LD_INT 14
20798: ST_TO_ADDR
// hc_gallery :=  ;
20799: LD_ADDR_OWVAR 33
20803: PUSH
20804: LD_STRING 
20806: ST_TO_ADDR
// hc_name :=  ;
20807: LD_ADDR_OWVAR 26
20811: PUSH
20812: LD_STRING 
20814: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
20815: CALL_OW 44
20819: PPUSH
20820: LD_INT 0
20822: PPUSH
20823: CALL_OW 51
// end ;
20827: GO 20749
20829: POP
20830: POP
// end ;
20831: PPOPN 1
20833: END
// every 0 0$1 trigger StreamModeActive and sBomb do
20834: LD_EXP 33
20838: PUSH
20839: LD_EXP 53
20843: AND
20844: IFFALSE 20853
20846: GO 20848
20848: DISABLE
// StreamSibBomb ;
20849: CALL 20854 0 0
20853: END
// export function StreamSibBomb ; var i , x , y ; begin
20854: LD_INT 0
20856: PPUSH
20857: PPUSH
20858: PPUSH
20859: PPUSH
// result := false ;
20860: LD_ADDR_VAR 0 1
20864: PUSH
20865: LD_INT 0
20867: ST_TO_ADDR
// for i := 1 to 16 do
20868: LD_ADDR_VAR 0 2
20872: PUSH
20873: DOUBLE
20874: LD_INT 1
20876: DEC
20877: ST_TO_ADDR
20878: LD_INT 16
20880: PUSH
20881: FOR_TO
20882: IFFALSE 21081
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20884: LD_ADDR_VAR 0 3
20888: PUSH
20889: LD_INT 10
20891: PUSH
20892: LD_INT 20
20894: PUSH
20895: LD_INT 30
20897: PUSH
20898: LD_INT 40
20900: PUSH
20901: LD_INT 50
20903: PUSH
20904: LD_INT 60
20906: PUSH
20907: LD_INT 70
20909: PUSH
20910: LD_INT 80
20912: PUSH
20913: LD_INT 90
20915: PUSH
20916: LD_INT 100
20918: PUSH
20919: LD_INT 110
20921: PUSH
20922: LD_INT 120
20924: PUSH
20925: LD_INT 130
20927: PUSH
20928: LD_INT 140
20930: PUSH
20931: LD_INT 150
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: PUSH
20951: LD_INT 1
20953: PPUSH
20954: LD_INT 15
20956: PPUSH
20957: CALL_OW 12
20961: ARRAY
20962: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20963: LD_ADDR_VAR 0 4
20967: PUSH
20968: LD_INT 10
20970: PUSH
20971: LD_INT 20
20973: PUSH
20974: LD_INT 30
20976: PUSH
20977: LD_INT 40
20979: PUSH
20980: LD_INT 50
20982: PUSH
20983: LD_INT 60
20985: PUSH
20986: LD_INT 70
20988: PUSH
20989: LD_INT 80
20991: PUSH
20992: LD_INT 90
20994: PUSH
20995: LD_INT 100
20997: PUSH
20998: LD_INT 110
21000: PUSH
21001: LD_INT 120
21003: PUSH
21004: LD_INT 130
21006: PUSH
21007: LD_INT 140
21009: PUSH
21010: LD_INT 150
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: PUSH
21030: LD_INT 1
21032: PPUSH
21033: LD_INT 15
21035: PPUSH
21036: CALL_OW 12
21040: ARRAY
21041: ST_TO_ADDR
// if ValidHex ( x , y ) then
21042: LD_VAR 0 3
21046: PPUSH
21047: LD_VAR 0 4
21051: PPUSH
21052: CALL_OW 488
21056: IFFALSE 21079
// begin result := [ x , y ] ;
21058: LD_ADDR_VAR 0 1
21062: PUSH
21063: LD_VAR 0 3
21067: PUSH
21068: LD_VAR 0 4
21072: PUSH
21073: EMPTY
21074: LIST
21075: LIST
21076: ST_TO_ADDR
// break ;
21077: GO 21081
// end ; end ;
21079: GO 20881
21081: POP
21082: POP
// if result then
21083: LD_VAR 0 1
21087: IFFALSE 21147
// begin ToLua ( playSibBomb() ) ;
21089: LD_STRING playSibBomb()
21091: PPUSH
21092: CALL_OW 559
// wait ( 0 0$14 ) ;
21096: LD_INT 490
21098: PPUSH
21099: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
21103: LD_VAR 0 1
21107: PUSH
21108: LD_INT 1
21110: ARRAY
21111: PPUSH
21112: LD_VAR 0 1
21116: PUSH
21117: LD_INT 2
21119: ARRAY
21120: PPUSH
21121: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
21125: LD_VAR 0 1
21129: PUSH
21130: LD_INT 1
21132: ARRAY
21133: PPUSH
21134: LD_VAR 0 1
21138: PUSH
21139: LD_INT 2
21141: ARRAY
21142: PPUSH
21143: CALL_OW 429
// end ; end ;
21147: LD_VAR 0 1
21151: RET
// every 0 0$1 trigger StreamModeActive and sReset do
21152: LD_EXP 33
21156: PUSH
21157: LD_EXP 55
21161: AND
21162: IFFALSE 21174
21164: GO 21166
21166: DISABLE
// YouLost (  ) ;
21167: LD_STRING 
21169: PPUSH
21170: CALL_OW 104
21174: END
// every 0 0$1 trigger StreamModeActive and sFog do
21175: LD_EXP 33
21179: PUSH
21180: LD_EXP 54
21184: AND
21185: IFFALSE 21199
21187: GO 21189
21189: DISABLE
// FogOff ( your_side ) ;
21190: LD_OWVAR 2
21194: PPUSH
21195: CALL_OW 344
21199: END
// every 0 0$1 trigger StreamModeActive and sSun do
21200: LD_EXP 33
21204: PUSH
21205: LD_EXP 56
21209: AND
21210: IFFALSE 21238
21212: GO 21214
21214: DISABLE
// begin solar_recharge_percent := 0 ;
21215: LD_ADDR_OWVAR 79
21219: PUSH
21220: LD_INT 0
21222: ST_TO_ADDR
// wait ( 5 5$00 ) ;
21223: LD_INT 10500
21225: PPUSH
21226: CALL_OW 67
// solar_recharge_percent := 100 ;
21230: LD_ADDR_OWVAR 79
21234: PUSH
21235: LD_INT 100
21237: ST_TO_ADDR
// end ;
21238: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
21239: LD_EXP 33
21243: PUSH
21244: LD_EXP 57
21248: AND
21249: IFFALSE 21488
21251: GO 21253
21253: DISABLE
21254: LD_INT 0
21256: PPUSH
21257: PPUSH
21258: PPUSH
// begin tmp := [ ] ;
21259: LD_ADDR_VAR 0 3
21263: PUSH
21264: EMPTY
21265: ST_TO_ADDR
// for i := 1 to 6 do
21266: LD_ADDR_VAR 0 1
21270: PUSH
21271: DOUBLE
21272: LD_INT 1
21274: DEC
21275: ST_TO_ADDR
21276: LD_INT 6
21278: PUSH
21279: FOR_TO
21280: IFFALSE 21385
// begin uc_nation := nation_nature ;
21282: LD_ADDR_OWVAR 21
21286: PUSH
21287: LD_INT 0
21289: ST_TO_ADDR
// uc_side := 0 ;
21290: LD_ADDR_OWVAR 20
21294: PUSH
21295: LD_INT 0
21297: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21298: LD_ADDR_OWVAR 29
21302: PUSH
21303: LD_INT 12
21305: PUSH
21306: LD_INT 12
21308: PUSH
21309: EMPTY
21310: LIST
21311: LIST
21312: ST_TO_ADDR
// hc_agressivity := 20 ;
21313: LD_ADDR_OWVAR 35
21317: PUSH
21318: LD_INT 20
21320: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
21321: LD_ADDR_OWVAR 28
21325: PUSH
21326: LD_INT 17
21328: ST_TO_ADDR
// hc_gallery :=  ;
21329: LD_ADDR_OWVAR 33
21333: PUSH
21334: LD_STRING 
21336: ST_TO_ADDR
// hc_name :=  ;
21337: LD_ADDR_OWVAR 26
21341: PUSH
21342: LD_STRING 
21344: ST_TO_ADDR
// un := CreateHuman ;
21345: LD_ADDR_VAR 0 2
21349: PUSH
21350: CALL_OW 44
21354: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
21355: LD_VAR 0 2
21359: PPUSH
21360: LD_INT 1
21362: PPUSH
21363: CALL_OW 51
// tmp := tmp ^ un ;
21367: LD_ADDR_VAR 0 3
21371: PUSH
21372: LD_VAR 0 3
21376: PUSH
21377: LD_VAR 0 2
21381: ADD
21382: ST_TO_ADDR
// end ;
21383: GO 21279
21385: POP
21386: POP
// repeat wait ( 0 0$1 ) ;
21387: LD_INT 35
21389: PPUSH
21390: CALL_OW 67
// for un in tmp do
21394: LD_ADDR_VAR 0 2
21398: PUSH
21399: LD_VAR 0 3
21403: PUSH
21404: FOR_IN
21405: IFFALSE 21479
// begin if IsDead ( un ) then
21407: LD_VAR 0 2
21411: PPUSH
21412: CALL_OW 301
21416: IFFALSE 21436
// begin tmp := tmp diff un ;
21418: LD_ADDR_VAR 0 3
21422: PUSH
21423: LD_VAR 0 3
21427: PUSH
21428: LD_VAR 0 2
21432: DIFF
21433: ST_TO_ADDR
// continue ;
21434: GO 21404
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
21436: LD_VAR 0 2
21440: PPUSH
21441: LD_INT 3
21443: PUSH
21444: LD_INT 22
21446: PUSH
21447: LD_INT 0
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: PPUSH
21458: CALL_OW 69
21462: PPUSH
21463: LD_VAR 0 2
21467: PPUSH
21468: CALL_OW 74
21472: PPUSH
21473: CALL_OW 115
// end ;
21477: GO 21404
21479: POP
21480: POP
// until not tmp ;
21481: LD_VAR 0 3
21485: NOT
21486: IFFALSE 21387
// end ;
21488: PPOPN 3
21490: END
// every 0 0$1 trigger StreamModeActive and sTroll do
21491: LD_EXP 33
21495: PUSH
21496: LD_EXP 58
21500: AND
21501: IFFALSE 21555
21503: GO 21505
21505: DISABLE
// begin ToLua ( displayTroll(); ) ;
21506: LD_STRING displayTroll();
21508: PPUSH
21509: CALL_OW 559
// wait ( 3 3$00 ) ;
21513: LD_INT 6300
21515: PPUSH
21516: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21520: LD_STRING hideTroll();
21522: PPUSH
21523: CALL_OW 559
// wait ( 1 1$00 ) ;
21527: LD_INT 2100
21529: PPUSH
21530: CALL_OW 67
// ToLua ( displayTroll(); ) ;
21534: LD_STRING displayTroll();
21536: PPUSH
21537: CALL_OW 559
// wait ( 1 1$00 ) ;
21541: LD_INT 2100
21543: PPUSH
21544: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21548: LD_STRING hideTroll();
21550: PPUSH
21551: CALL_OW 559
// end ;
21555: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
21556: LD_EXP 33
21560: PUSH
21561: LD_EXP 59
21565: AND
21566: IFFALSE 21629
21568: GO 21570
21570: DISABLE
21571: LD_INT 0
21573: PPUSH
// begin p := 0 ;
21574: LD_ADDR_VAR 0 1
21578: PUSH
21579: LD_INT 0
21581: ST_TO_ADDR
// repeat game_speed := 1 ;
21582: LD_ADDR_OWVAR 65
21586: PUSH
21587: LD_INT 1
21589: ST_TO_ADDR
// wait ( 0 0$1 ) ;
21590: LD_INT 35
21592: PPUSH
21593: CALL_OW 67
// p := p + 1 ;
21597: LD_ADDR_VAR 0 1
21601: PUSH
21602: LD_VAR 0 1
21606: PUSH
21607: LD_INT 1
21609: PLUS
21610: ST_TO_ADDR
// until p >= 60 ;
21611: LD_VAR 0 1
21615: PUSH
21616: LD_INT 60
21618: GREATEREQUAL
21619: IFFALSE 21582
// game_speed := 4 ;
21621: LD_ADDR_OWVAR 65
21625: PUSH
21626: LD_INT 4
21628: ST_TO_ADDR
// end ;
21629: PPOPN 1
21631: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
21632: LD_EXP 33
21636: PUSH
21637: LD_EXP 60
21641: AND
21642: IFFALSE 21788
21644: GO 21646
21646: DISABLE
21647: LD_INT 0
21649: PPUSH
21650: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21651: LD_ADDR_VAR 0 1
21655: PUSH
21656: LD_INT 22
21658: PUSH
21659: LD_OWVAR 2
21663: PUSH
21664: EMPTY
21665: LIST
21666: LIST
21667: PUSH
21668: LD_INT 2
21670: PUSH
21671: LD_INT 30
21673: PUSH
21674: LD_INT 0
21676: PUSH
21677: EMPTY
21678: LIST
21679: LIST
21680: PUSH
21681: LD_INT 30
21683: PUSH
21684: LD_INT 1
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: PUSH
21691: EMPTY
21692: LIST
21693: LIST
21694: LIST
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: PPUSH
21700: CALL_OW 69
21704: ST_TO_ADDR
// if not depot then
21705: LD_VAR 0 1
21709: NOT
21710: IFFALSE 21714
// exit ;
21712: GO 21788
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
21714: LD_ADDR_VAR 0 2
21718: PUSH
21719: LD_VAR 0 1
21723: PUSH
21724: LD_INT 1
21726: PPUSH
21727: LD_VAR 0 1
21731: PPUSH
21732: CALL_OW 12
21736: ARRAY
21737: PPUSH
21738: CALL_OW 274
21742: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
21743: LD_VAR 0 2
21747: PPUSH
21748: LD_INT 1
21750: PPUSH
21751: LD_INT 0
21753: PPUSH
21754: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
21758: LD_VAR 0 2
21762: PPUSH
21763: LD_INT 2
21765: PPUSH
21766: LD_INT 0
21768: PPUSH
21769: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
21773: LD_VAR 0 2
21777: PPUSH
21778: LD_INT 3
21780: PPUSH
21781: LD_INT 0
21783: PPUSH
21784: CALL_OW 277
// end ;
21788: PPOPN 2
21790: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
21791: LD_EXP 33
21795: PUSH
21796: LD_EXP 61
21800: AND
21801: IFFALSE 21898
21803: GO 21805
21805: DISABLE
21806: LD_INT 0
21808: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21809: LD_ADDR_VAR 0 1
21813: PUSH
21814: LD_INT 22
21816: PUSH
21817: LD_OWVAR 2
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: PUSH
21826: LD_INT 21
21828: PUSH
21829: LD_INT 1
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: PUSH
21836: LD_INT 3
21838: PUSH
21839: LD_INT 23
21841: PUSH
21842: LD_INT 0
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: PUSH
21849: EMPTY
21850: LIST
21851: LIST
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: LIST
21857: PPUSH
21858: CALL_OW 69
21862: ST_TO_ADDR
// if not tmp then
21863: LD_VAR 0 1
21867: NOT
21868: IFFALSE 21872
// exit ;
21870: GO 21898
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
21872: LD_VAR 0 1
21876: PUSH
21877: LD_INT 1
21879: PPUSH
21880: LD_VAR 0 1
21884: PPUSH
21885: CALL_OW 12
21889: ARRAY
21890: PPUSH
21891: LD_INT 200
21893: PPUSH
21894: CALL_OW 234
// end ;
21898: PPOPN 1
21900: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
21901: LD_EXP 33
21905: PUSH
21906: LD_EXP 62
21910: AND
21911: IFFALSE 21990
21913: GO 21915
21915: DISABLE
21916: LD_INT 0
21918: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
21919: LD_ADDR_VAR 0 1
21923: PUSH
21924: LD_INT 22
21926: PUSH
21927: LD_OWVAR 2
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: PUSH
21936: LD_INT 21
21938: PUSH
21939: LD_INT 2
21941: PUSH
21942: EMPTY
21943: LIST
21944: LIST
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: PPUSH
21950: CALL_OW 69
21954: ST_TO_ADDR
// if not tmp then
21955: LD_VAR 0 1
21959: NOT
21960: IFFALSE 21964
// exit ;
21962: GO 21990
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
21964: LD_VAR 0 1
21968: PUSH
21969: LD_INT 1
21971: PPUSH
21972: LD_VAR 0 1
21976: PPUSH
21977: CALL_OW 12
21981: ARRAY
21982: PPUSH
21983: LD_INT 60
21985: PPUSH
21986: CALL_OW 234
// end ;
21990: PPOPN 1
21992: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
21993: LD_EXP 33
21997: PUSH
21998: LD_EXP 63
22002: AND
22003: IFFALSE 22102
22005: GO 22007
22007: DISABLE
22008: LD_INT 0
22010: PPUSH
22011: PPUSH
// begin enable ;
22012: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
22013: LD_ADDR_VAR 0 1
22017: PUSH
22018: LD_INT 22
22020: PUSH
22021: LD_OWVAR 2
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: PUSH
22030: LD_INT 61
22032: PUSH
22033: EMPTY
22034: LIST
22035: PUSH
22036: LD_INT 33
22038: PUSH
22039: LD_INT 2
22041: PUSH
22042: EMPTY
22043: LIST
22044: LIST
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: LIST
22050: PPUSH
22051: CALL_OW 69
22055: ST_TO_ADDR
// if not tmp then
22056: LD_VAR 0 1
22060: NOT
22061: IFFALSE 22065
// exit ;
22063: GO 22102
// for i in tmp do
22065: LD_ADDR_VAR 0 2
22069: PUSH
22070: LD_VAR 0 1
22074: PUSH
22075: FOR_IN
22076: IFFALSE 22100
// if IsControledBy ( i ) then
22078: LD_VAR 0 2
22082: PPUSH
22083: CALL_OW 312
22087: IFFALSE 22098
// ComUnlink ( i ) ;
22089: LD_VAR 0 2
22093: PPUSH
22094: CALL_OW 136
22098: GO 22075
22100: POP
22101: POP
// end ;
22102: PPOPN 2
22104: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
22105: LD_EXP 33
22109: PUSH
22110: LD_EXP 64
22114: AND
22115: IFFALSE 22255
22117: GO 22119
22119: DISABLE
22120: LD_INT 0
22122: PPUSH
22123: PPUSH
// begin ToLua ( displayPowell(); ) ;
22124: LD_STRING displayPowell();
22126: PPUSH
22127: CALL_OW 559
// uc_side := 0 ;
22131: LD_ADDR_OWVAR 20
22135: PUSH
22136: LD_INT 0
22138: ST_TO_ADDR
// uc_nation := 2 ;
22139: LD_ADDR_OWVAR 21
22143: PUSH
22144: LD_INT 2
22146: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
22147: LD_ADDR_OWVAR 37
22151: PUSH
22152: LD_INT 14
22154: ST_TO_ADDR
// vc_engine := engine_siberite ;
22155: LD_ADDR_OWVAR 39
22159: PUSH
22160: LD_INT 3
22162: ST_TO_ADDR
// vc_control := control_apeman ;
22163: LD_ADDR_OWVAR 38
22167: PUSH
22168: LD_INT 5
22170: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
22171: LD_ADDR_OWVAR 40
22175: PUSH
22176: LD_INT 29
22178: ST_TO_ADDR
// un := CreateVehicle ;
22179: LD_ADDR_VAR 0 2
22183: PUSH
22184: CALL_OW 45
22188: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22189: LD_VAR 0 2
22193: PPUSH
22194: LD_INT 1
22196: PPUSH
22197: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22201: LD_INT 35
22203: PPUSH
22204: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22208: LD_VAR 0 2
22212: PPUSH
22213: LD_INT 22
22215: PUSH
22216: LD_OWVAR 2
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: PPUSH
22225: CALL_OW 69
22229: PPUSH
22230: LD_VAR 0 2
22234: PPUSH
22235: CALL_OW 74
22239: PPUSH
22240: CALL_OW 115
// until IsDead ( un ) ;
22244: LD_VAR 0 2
22248: PPUSH
22249: CALL_OW 301
22253: IFFALSE 22201
// end ;
22255: PPOPN 2
22257: END
// every 0 0$1 trigger StreamModeActive and sStu do
22258: LD_EXP 33
22262: PUSH
22263: LD_EXP 72
22267: AND
22268: IFFALSE 22284
22270: GO 22272
22272: DISABLE
// begin ToLua ( displayStucuk(); ) ;
22273: LD_STRING displayStucuk();
22275: PPUSH
22276: CALL_OW 559
// ResetFog ;
22280: CALL_OW 335
// end ;
22284: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
22285: LD_EXP 33
22289: PUSH
22290: LD_EXP 65
22294: AND
22295: IFFALSE 22436
22297: GO 22299
22299: DISABLE
22300: LD_INT 0
22302: PPUSH
22303: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22304: LD_ADDR_VAR 0 2
22308: PUSH
22309: LD_INT 22
22311: PUSH
22312: LD_OWVAR 2
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: PUSH
22321: LD_INT 21
22323: PUSH
22324: LD_INT 1
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: PUSH
22331: EMPTY
22332: LIST
22333: LIST
22334: PPUSH
22335: CALL_OW 69
22339: ST_TO_ADDR
// if not tmp then
22340: LD_VAR 0 2
22344: NOT
22345: IFFALSE 22349
// exit ;
22347: GO 22436
// un := tmp [ rand ( 1 , tmp ) ] ;
22349: LD_ADDR_VAR 0 1
22353: PUSH
22354: LD_VAR 0 2
22358: PUSH
22359: LD_INT 1
22361: PPUSH
22362: LD_VAR 0 2
22366: PPUSH
22367: CALL_OW 12
22371: ARRAY
22372: ST_TO_ADDR
// SetSide ( un , 0 ) ;
22373: LD_VAR 0 1
22377: PPUSH
22378: LD_INT 0
22380: PPUSH
22381: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
22385: LD_VAR 0 1
22389: PPUSH
22390: LD_OWVAR 3
22394: PUSH
22395: LD_VAR 0 1
22399: DIFF
22400: PPUSH
22401: LD_VAR 0 1
22405: PPUSH
22406: CALL_OW 74
22410: PPUSH
22411: CALL_OW 115
// wait ( 0 0$20 ) ;
22415: LD_INT 700
22417: PPUSH
22418: CALL_OW 67
// SetSide ( un , your_side ) ;
22422: LD_VAR 0 1
22426: PPUSH
22427: LD_OWVAR 2
22431: PPUSH
22432: CALL_OW 235
// end ;
22436: PPOPN 2
22438: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
22439: LD_EXP 33
22443: PUSH
22444: LD_EXP 66
22448: AND
22449: IFFALSE 22555
22451: GO 22453
22453: DISABLE
22454: LD_INT 0
22456: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22457: LD_ADDR_VAR 0 1
22461: PUSH
22462: LD_INT 22
22464: PUSH
22465: LD_OWVAR 2
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: PUSH
22474: LD_INT 2
22476: PUSH
22477: LD_INT 30
22479: PUSH
22480: LD_INT 0
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: PUSH
22487: LD_INT 30
22489: PUSH
22490: LD_INT 1
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: LIST
22501: PUSH
22502: EMPTY
22503: LIST
22504: LIST
22505: PPUSH
22506: CALL_OW 69
22510: ST_TO_ADDR
// if not depot then
22511: LD_VAR 0 1
22515: NOT
22516: IFFALSE 22520
// exit ;
22518: GO 22555
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
22520: LD_VAR 0 1
22524: PUSH
22525: LD_INT 1
22527: ARRAY
22528: PPUSH
22529: CALL_OW 250
22533: PPUSH
22534: LD_VAR 0 1
22538: PUSH
22539: LD_INT 1
22541: ARRAY
22542: PPUSH
22543: CALL_OW 251
22547: PPUSH
22548: LD_INT 70
22550: PPUSH
22551: CALL_OW 495
// end ;
22555: PPOPN 1
22557: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
22558: LD_EXP 33
22562: PUSH
22563: LD_EXP 67
22567: AND
22568: IFFALSE 22779
22570: GO 22572
22572: DISABLE
22573: LD_INT 0
22575: PPUSH
22576: PPUSH
22577: PPUSH
22578: PPUSH
22579: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22580: LD_ADDR_VAR 0 5
22584: PUSH
22585: LD_INT 22
22587: PUSH
22588: LD_OWVAR 2
22592: PUSH
22593: EMPTY
22594: LIST
22595: LIST
22596: PUSH
22597: LD_INT 21
22599: PUSH
22600: LD_INT 1
22602: PUSH
22603: EMPTY
22604: LIST
22605: LIST
22606: PUSH
22607: EMPTY
22608: LIST
22609: LIST
22610: PPUSH
22611: CALL_OW 69
22615: ST_TO_ADDR
// if not tmp then
22616: LD_VAR 0 5
22620: NOT
22621: IFFALSE 22625
// exit ;
22623: GO 22779
// for i in tmp do
22625: LD_ADDR_VAR 0 1
22629: PUSH
22630: LD_VAR 0 5
22634: PUSH
22635: FOR_IN
22636: IFFALSE 22777
// begin d := rand ( 0 , 5 ) ;
22638: LD_ADDR_VAR 0 4
22642: PUSH
22643: LD_INT 0
22645: PPUSH
22646: LD_INT 5
22648: PPUSH
22649: CALL_OW 12
22653: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
22654: LD_ADDR_VAR 0 2
22658: PUSH
22659: LD_VAR 0 1
22663: PPUSH
22664: CALL_OW 250
22668: PPUSH
22669: LD_VAR 0 4
22673: PPUSH
22674: LD_INT 3
22676: PPUSH
22677: LD_INT 12
22679: PPUSH
22680: CALL_OW 12
22684: PPUSH
22685: CALL_OW 272
22689: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
22690: LD_ADDR_VAR 0 3
22694: PUSH
22695: LD_VAR 0 1
22699: PPUSH
22700: CALL_OW 251
22704: PPUSH
22705: LD_VAR 0 4
22709: PPUSH
22710: LD_INT 3
22712: PPUSH
22713: LD_INT 12
22715: PPUSH
22716: CALL_OW 12
22720: PPUSH
22721: CALL_OW 273
22725: ST_TO_ADDR
// if ValidHex ( x , y ) then
22726: LD_VAR 0 2
22730: PPUSH
22731: LD_VAR 0 3
22735: PPUSH
22736: CALL_OW 488
22740: IFFALSE 22775
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
22742: LD_VAR 0 1
22746: PPUSH
22747: LD_VAR 0 2
22751: PPUSH
22752: LD_VAR 0 3
22756: PPUSH
22757: LD_INT 3
22759: PPUSH
22760: LD_INT 6
22762: PPUSH
22763: CALL_OW 12
22767: PPUSH
22768: LD_INT 1
22770: PPUSH
22771: CALL_OW 483
// end ;
22775: GO 22635
22777: POP
22778: POP
// end ;
22779: PPOPN 5
22781: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
22782: LD_EXP 33
22786: PUSH
22787: LD_EXP 68
22791: AND
22792: IFFALSE 22886
22794: GO 22796
22796: DISABLE
22797: LD_INT 0
22799: PPUSH
22800: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
22801: LD_ADDR_VAR 0 2
22805: PUSH
22806: LD_INT 22
22808: PUSH
22809: LD_OWVAR 2
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PUSH
22818: LD_INT 32
22820: PUSH
22821: LD_INT 1
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: PUSH
22828: LD_INT 21
22830: PUSH
22831: LD_INT 2
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PUSH
22838: EMPTY
22839: LIST
22840: LIST
22841: LIST
22842: PPUSH
22843: CALL_OW 69
22847: ST_TO_ADDR
// if not tmp then
22848: LD_VAR 0 2
22852: NOT
22853: IFFALSE 22857
// exit ;
22855: GO 22886
// for i in tmp do
22857: LD_ADDR_VAR 0 1
22861: PUSH
22862: LD_VAR 0 2
22866: PUSH
22867: FOR_IN
22868: IFFALSE 22884
// SetFuel ( i , 0 ) ;
22870: LD_VAR 0 1
22874: PPUSH
22875: LD_INT 0
22877: PPUSH
22878: CALL_OW 240
22882: GO 22867
22884: POP
22885: POP
// end ;
22886: PPOPN 2
22888: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
22889: LD_EXP 33
22893: PUSH
22894: LD_EXP 69
22898: AND
22899: IFFALSE 22965
22901: GO 22903
22903: DISABLE
22904: LD_INT 0
22906: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22907: LD_ADDR_VAR 0 1
22911: PUSH
22912: LD_INT 22
22914: PUSH
22915: LD_OWVAR 2
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PUSH
22924: LD_INT 30
22926: PUSH
22927: LD_INT 29
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: PPUSH
22938: CALL_OW 69
22942: ST_TO_ADDR
// if not tmp then
22943: LD_VAR 0 1
22947: NOT
22948: IFFALSE 22952
// exit ;
22950: GO 22965
// DestroyUnit ( tmp [ 1 ] ) ;
22952: LD_VAR 0 1
22956: PUSH
22957: LD_INT 1
22959: ARRAY
22960: PPUSH
22961: CALL_OW 65
// end ;
22965: PPOPN 1
22967: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
22968: LD_EXP 33
22972: PUSH
22973: LD_EXP 71
22977: AND
22978: IFFALSE 23107
22980: GO 22982
22982: DISABLE
22983: LD_INT 0
22985: PPUSH
// begin uc_side := 0 ;
22986: LD_ADDR_OWVAR 20
22990: PUSH
22991: LD_INT 0
22993: ST_TO_ADDR
// uc_nation := nation_arabian ;
22994: LD_ADDR_OWVAR 21
22998: PUSH
22999: LD_INT 2
23001: ST_TO_ADDR
// hc_gallery :=  ;
23002: LD_ADDR_OWVAR 33
23006: PUSH
23007: LD_STRING 
23009: ST_TO_ADDR
// hc_name :=  ;
23010: LD_ADDR_OWVAR 26
23014: PUSH
23015: LD_STRING 
23017: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
23018: LD_INT 1
23020: PPUSH
23021: LD_INT 11
23023: PPUSH
23024: LD_INT 10
23026: PPUSH
23027: CALL_OW 380
// un := CreateHuman ;
23031: LD_ADDR_VAR 0 1
23035: PUSH
23036: CALL_OW 44
23040: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23041: LD_VAR 0 1
23045: PPUSH
23046: LD_INT 1
23048: PPUSH
23049: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23053: LD_INT 35
23055: PPUSH
23056: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23060: LD_VAR 0 1
23064: PPUSH
23065: LD_INT 22
23067: PUSH
23068: LD_OWVAR 2
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: PPUSH
23077: CALL_OW 69
23081: PPUSH
23082: LD_VAR 0 1
23086: PPUSH
23087: CALL_OW 74
23091: PPUSH
23092: CALL_OW 115
// until IsDead ( un ) ;
23096: LD_VAR 0 1
23100: PPUSH
23101: CALL_OW 301
23105: IFFALSE 23053
// end ;
23107: PPOPN 1
23109: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
23110: LD_EXP 33
23114: PUSH
23115: LD_EXP 73
23119: AND
23120: IFFALSE 23132
23122: GO 23124
23124: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
23125: LD_STRING earthquake(getX(game), 0, 32)
23127: PPUSH
23128: CALL_OW 559
23132: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
23133: LD_EXP 33
23137: PUSH
23138: LD_EXP 74
23142: AND
23143: IFFALSE 23234
23145: GO 23147
23147: DISABLE
23148: LD_INT 0
23150: PPUSH
// begin enable ;
23151: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
23152: LD_ADDR_VAR 0 1
23156: PUSH
23157: LD_INT 22
23159: PUSH
23160: LD_OWVAR 2
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PUSH
23169: LD_INT 21
23171: PUSH
23172: LD_INT 2
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: PUSH
23179: LD_INT 33
23181: PUSH
23182: LD_INT 3
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: LIST
23193: PPUSH
23194: CALL_OW 69
23198: ST_TO_ADDR
// if not tmp then
23199: LD_VAR 0 1
23203: NOT
23204: IFFALSE 23208
// exit ;
23206: GO 23234
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23208: LD_VAR 0 1
23212: PUSH
23213: LD_INT 1
23215: PPUSH
23216: LD_VAR 0 1
23220: PPUSH
23221: CALL_OW 12
23225: ARRAY
23226: PPUSH
23227: LD_INT 1
23229: PPUSH
23230: CALL_OW 234
// end ;
23234: PPOPN 1
23236: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
23237: LD_EXP 33
23241: PUSH
23242: LD_EXP 75
23246: AND
23247: IFFALSE 23388
23249: GO 23251
23251: DISABLE
23252: LD_INT 0
23254: PPUSH
23255: PPUSH
23256: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23257: LD_ADDR_VAR 0 3
23261: PUSH
23262: LD_INT 22
23264: PUSH
23265: LD_OWVAR 2
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: PUSH
23274: LD_INT 25
23276: PUSH
23277: LD_INT 1
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PPUSH
23288: CALL_OW 69
23292: ST_TO_ADDR
// if not tmp then
23293: LD_VAR 0 3
23297: NOT
23298: IFFALSE 23302
// exit ;
23300: GO 23388
// un := tmp [ rand ( 1 , tmp ) ] ;
23302: LD_ADDR_VAR 0 2
23306: PUSH
23307: LD_VAR 0 3
23311: PUSH
23312: LD_INT 1
23314: PPUSH
23315: LD_VAR 0 3
23319: PPUSH
23320: CALL_OW 12
23324: ARRAY
23325: ST_TO_ADDR
// if Crawls ( un ) then
23326: LD_VAR 0 2
23330: PPUSH
23331: CALL_OW 318
23335: IFFALSE 23346
// ComWalk ( un ) ;
23337: LD_VAR 0 2
23341: PPUSH
23342: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
23346: LD_VAR 0 2
23350: PPUSH
23351: LD_INT 9
23353: PPUSH
23354: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
23358: LD_INT 28
23360: PPUSH
23361: LD_OWVAR 2
23365: PPUSH
23366: LD_INT 2
23368: PPUSH
23369: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
23373: LD_INT 29
23375: PPUSH
23376: LD_OWVAR 2
23380: PPUSH
23381: LD_INT 2
23383: PPUSH
23384: CALL_OW 322
// end ;
23388: PPOPN 3
23390: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
23391: LD_EXP 33
23395: PUSH
23396: LD_EXP 76
23400: AND
23401: IFFALSE 23512
23403: GO 23405
23405: DISABLE
23406: LD_INT 0
23408: PPUSH
23409: PPUSH
23410: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23411: LD_ADDR_VAR 0 3
23415: PUSH
23416: LD_INT 22
23418: PUSH
23419: LD_OWVAR 2
23423: PUSH
23424: EMPTY
23425: LIST
23426: LIST
23427: PUSH
23428: LD_INT 25
23430: PUSH
23431: LD_INT 1
23433: PUSH
23434: EMPTY
23435: LIST
23436: LIST
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: PPUSH
23442: CALL_OW 69
23446: ST_TO_ADDR
// if not tmp then
23447: LD_VAR 0 3
23451: NOT
23452: IFFALSE 23456
// exit ;
23454: GO 23512
// un := tmp [ rand ( 1 , tmp ) ] ;
23456: LD_ADDR_VAR 0 2
23460: PUSH
23461: LD_VAR 0 3
23465: PUSH
23466: LD_INT 1
23468: PPUSH
23469: LD_VAR 0 3
23473: PPUSH
23474: CALL_OW 12
23478: ARRAY
23479: ST_TO_ADDR
// if Crawls ( un ) then
23480: LD_VAR 0 2
23484: PPUSH
23485: CALL_OW 318
23489: IFFALSE 23500
// ComWalk ( un ) ;
23491: LD_VAR 0 2
23495: PPUSH
23496: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23500: LD_VAR 0 2
23504: PPUSH
23505: LD_INT 8
23507: PPUSH
23508: CALL_OW 336
// end ;
23512: PPOPN 3
23514: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
23515: LD_EXP 33
23519: PUSH
23520: LD_EXP 77
23524: AND
23525: IFFALSE 23669
23527: GO 23529
23529: DISABLE
23530: LD_INT 0
23532: PPUSH
23533: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
23534: LD_ADDR_VAR 0 2
23538: PUSH
23539: LD_INT 22
23541: PUSH
23542: LD_OWVAR 2
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: PUSH
23551: LD_INT 21
23553: PUSH
23554: LD_INT 2
23556: PUSH
23557: EMPTY
23558: LIST
23559: LIST
23560: PUSH
23561: LD_INT 2
23563: PUSH
23564: LD_INT 34
23566: PUSH
23567: LD_INT 12
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: PUSH
23574: LD_INT 34
23576: PUSH
23577: LD_INT 51
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: PUSH
23584: LD_INT 34
23586: PUSH
23587: LD_INT 32
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: PUSH
23600: EMPTY
23601: LIST
23602: LIST
23603: LIST
23604: PPUSH
23605: CALL_OW 69
23609: ST_TO_ADDR
// if not tmp then
23610: LD_VAR 0 2
23614: NOT
23615: IFFALSE 23619
// exit ;
23617: GO 23669
// for i in tmp do
23619: LD_ADDR_VAR 0 1
23623: PUSH
23624: LD_VAR 0 2
23628: PUSH
23629: FOR_IN
23630: IFFALSE 23667
// if GetCargo ( i , mat_artifact ) = 0 then
23632: LD_VAR 0 1
23636: PPUSH
23637: LD_INT 4
23639: PPUSH
23640: CALL_OW 289
23644: PUSH
23645: LD_INT 0
23647: EQUAL
23648: IFFALSE 23665
// SetCargo ( i , mat_siberit , 100 ) ;
23650: LD_VAR 0 1
23654: PPUSH
23655: LD_INT 3
23657: PPUSH
23658: LD_INT 100
23660: PPUSH
23661: CALL_OW 290
23665: GO 23629
23667: POP
23668: POP
// end ;
23669: PPOPN 2
23671: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
23672: LD_EXP 33
23676: PUSH
23677: LD_EXP 78
23681: AND
23682: IFFALSE 23865
23684: GO 23686
23686: DISABLE
23687: LD_INT 0
23689: PPUSH
23690: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23691: LD_ADDR_VAR 0 2
23695: PUSH
23696: LD_INT 22
23698: PUSH
23699: LD_OWVAR 2
23703: PUSH
23704: EMPTY
23705: LIST
23706: LIST
23707: PPUSH
23708: CALL_OW 69
23712: ST_TO_ADDR
// if not tmp then
23713: LD_VAR 0 2
23717: NOT
23718: IFFALSE 23722
// exit ;
23720: GO 23865
// for i := 1 to 2 do
23722: LD_ADDR_VAR 0 1
23726: PUSH
23727: DOUBLE
23728: LD_INT 1
23730: DEC
23731: ST_TO_ADDR
23732: LD_INT 2
23734: PUSH
23735: FOR_TO
23736: IFFALSE 23863
// begin uc_side := your_side ;
23738: LD_ADDR_OWVAR 20
23742: PUSH
23743: LD_OWVAR 2
23747: ST_TO_ADDR
// uc_nation := nation_american ;
23748: LD_ADDR_OWVAR 21
23752: PUSH
23753: LD_INT 1
23755: ST_TO_ADDR
// vc_chassis := us_morphling ;
23756: LD_ADDR_OWVAR 37
23760: PUSH
23761: LD_INT 5
23763: ST_TO_ADDR
// vc_engine := engine_siberite ;
23764: LD_ADDR_OWVAR 39
23768: PUSH
23769: LD_INT 3
23771: ST_TO_ADDR
// vc_control := control_computer ;
23772: LD_ADDR_OWVAR 38
23776: PUSH
23777: LD_INT 3
23779: ST_TO_ADDR
// vc_weapon := us_double_laser ;
23780: LD_ADDR_OWVAR 40
23784: PUSH
23785: LD_INT 10
23787: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
23788: LD_VAR 0 2
23792: PUSH
23793: LD_INT 1
23795: ARRAY
23796: PPUSH
23797: CALL_OW 310
23801: NOT
23802: IFFALSE 23849
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
23804: CALL_OW 45
23808: PPUSH
23809: LD_VAR 0 2
23813: PUSH
23814: LD_INT 1
23816: ARRAY
23817: PPUSH
23818: CALL_OW 250
23822: PPUSH
23823: LD_VAR 0 2
23827: PUSH
23828: LD_INT 1
23830: ARRAY
23831: PPUSH
23832: CALL_OW 251
23836: PPUSH
23837: LD_INT 12
23839: PPUSH
23840: LD_INT 1
23842: PPUSH
23843: CALL_OW 50
23847: GO 23861
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
23849: CALL_OW 45
23853: PPUSH
23854: LD_INT 1
23856: PPUSH
23857: CALL_OW 51
// end ;
23861: GO 23735
23863: POP
23864: POP
// end ;
23865: PPOPN 2
23867: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
23868: LD_EXP 33
23872: PUSH
23873: LD_EXP 79
23877: AND
23878: IFFALSE 24100
23880: GO 23882
23882: DISABLE
23883: LD_INT 0
23885: PPUSH
23886: PPUSH
23887: PPUSH
23888: PPUSH
23889: PPUSH
23890: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23891: LD_ADDR_VAR 0 6
23895: PUSH
23896: LD_INT 22
23898: PUSH
23899: LD_OWVAR 2
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: PUSH
23908: LD_INT 21
23910: PUSH
23911: LD_INT 1
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: LD_INT 3
23920: PUSH
23921: LD_INT 23
23923: PUSH
23924: LD_INT 0
23926: PUSH
23927: EMPTY
23928: LIST
23929: LIST
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: LIST
23939: PPUSH
23940: CALL_OW 69
23944: ST_TO_ADDR
// if not tmp then
23945: LD_VAR 0 6
23949: NOT
23950: IFFALSE 23954
// exit ;
23952: GO 24100
// s1 := rand ( 1 , 4 ) ;
23954: LD_ADDR_VAR 0 2
23958: PUSH
23959: LD_INT 1
23961: PPUSH
23962: LD_INT 4
23964: PPUSH
23965: CALL_OW 12
23969: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
23970: LD_ADDR_VAR 0 4
23974: PUSH
23975: LD_VAR 0 6
23979: PUSH
23980: LD_INT 1
23982: ARRAY
23983: PPUSH
23984: LD_VAR 0 2
23988: PPUSH
23989: CALL_OW 259
23993: ST_TO_ADDR
// if s1 = 1 then
23994: LD_VAR 0 2
23998: PUSH
23999: LD_INT 1
24001: EQUAL
24002: IFFALSE 24022
// s2 := rand ( 2 , 4 ) else
24004: LD_ADDR_VAR 0 3
24008: PUSH
24009: LD_INT 2
24011: PPUSH
24012: LD_INT 4
24014: PPUSH
24015: CALL_OW 12
24019: ST_TO_ADDR
24020: GO 24030
// s2 := 1 ;
24022: LD_ADDR_VAR 0 3
24026: PUSH
24027: LD_INT 1
24029: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
24030: LD_ADDR_VAR 0 5
24034: PUSH
24035: LD_VAR 0 6
24039: PUSH
24040: LD_INT 1
24042: ARRAY
24043: PPUSH
24044: LD_VAR 0 3
24048: PPUSH
24049: CALL_OW 259
24053: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
24054: LD_VAR 0 6
24058: PUSH
24059: LD_INT 1
24061: ARRAY
24062: PPUSH
24063: LD_VAR 0 2
24067: PPUSH
24068: LD_VAR 0 5
24072: PPUSH
24073: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
24077: LD_VAR 0 6
24081: PUSH
24082: LD_INT 1
24084: ARRAY
24085: PPUSH
24086: LD_VAR 0 3
24090: PPUSH
24091: LD_VAR 0 4
24095: PPUSH
24096: CALL_OW 237
// end ;
24100: PPOPN 6
24102: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
24103: LD_EXP 33
24107: PUSH
24108: LD_EXP 80
24112: AND
24113: IFFALSE 24192
24115: GO 24117
24117: DISABLE
24118: LD_INT 0
24120: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
24121: LD_ADDR_VAR 0 1
24125: PUSH
24126: LD_INT 22
24128: PUSH
24129: LD_OWVAR 2
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: PUSH
24138: LD_INT 30
24140: PUSH
24141: LD_INT 3
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: PPUSH
24152: CALL_OW 69
24156: ST_TO_ADDR
// if not tmp then
24157: LD_VAR 0 1
24161: NOT
24162: IFFALSE 24166
// exit ;
24164: GO 24192
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24166: LD_VAR 0 1
24170: PUSH
24171: LD_INT 1
24173: PPUSH
24174: LD_VAR 0 1
24178: PPUSH
24179: CALL_OW 12
24183: ARRAY
24184: PPUSH
24185: LD_INT 1
24187: PPUSH
24188: CALL_OW 234
// end ;
24192: PPOPN 1
24194: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
24195: LD_EXP 33
24199: PUSH
24200: LD_EXP 81
24204: AND
24205: IFFALSE 24317
24207: GO 24209
24209: DISABLE
24210: LD_INT 0
24212: PPUSH
24213: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
24214: LD_ADDR_VAR 0 2
24218: PUSH
24219: LD_INT 22
24221: PUSH
24222: LD_OWVAR 2
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: PUSH
24231: LD_INT 2
24233: PUSH
24234: LD_INT 30
24236: PUSH
24237: LD_INT 27
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: PUSH
24244: LD_INT 30
24246: PUSH
24247: LD_INT 26
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: PUSH
24254: LD_INT 30
24256: PUSH
24257: LD_INT 28
24259: PUSH
24260: EMPTY
24261: LIST
24262: LIST
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: PPUSH
24274: CALL_OW 69
24278: ST_TO_ADDR
// if not tmp then
24279: LD_VAR 0 2
24283: NOT
24284: IFFALSE 24288
// exit ;
24286: GO 24317
// for i in tmp do
24288: LD_ADDR_VAR 0 1
24292: PUSH
24293: LD_VAR 0 2
24297: PUSH
24298: FOR_IN
24299: IFFALSE 24315
// SetLives ( i , 1 ) ;
24301: LD_VAR 0 1
24305: PPUSH
24306: LD_INT 1
24308: PPUSH
24309: CALL_OW 234
24313: GO 24298
24315: POP
24316: POP
// end ;
24317: PPOPN 2
24319: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
24320: LD_EXP 33
24324: PUSH
24325: LD_EXP 82
24329: AND
24330: IFFALSE 24617
24332: GO 24334
24334: DISABLE
24335: LD_INT 0
24337: PPUSH
24338: PPUSH
24339: PPUSH
// begin i := rand ( 1 , 7 ) ;
24340: LD_ADDR_VAR 0 1
24344: PUSH
24345: LD_INT 1
24347: PPUSH
24348: LD_INT 7
24350: PPUSH
24351: CALL_OW 12
24355: ST_TO_ADDR
// case i of 1 :
24356: LD_VAR 0 1
24360: PUSH
24361: LD_INT 1
24363: DOUBLE
24364: EQUAL
24365: IFTRUE 24369
24367: GO 24379
24369: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
24370: LD_STRING earthquake(getX(game), 0, 32)
24372: PPUSH
24373: CALL_OW 559
24377: GO 24617
24379: LD_INT 2
24381: DOUBLE
24382: EQUAL
24383: IFTRUE 24387
24385: GO 24401
24387: POP
// begin ToLua ( displayStucuk(); ) ;
24388: LD_STRING displayStucuk();
24390: PPUSH
24391: CALL_OW 559
// ResetFog ;
24395: CALL_OW 335
// end ; 3 :
24399: GO 24617
24401: LD_INT 3
24403: DOUBLE
24404: EQUAL
24405: IFTRUE 24409
24407: GO 24513
24409: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24410: LD_ADDR_VAR 0 2
24414: PUSH
24415: LD_INT 22
24417: PUSH
24418: LD_OWVAR 2
24422: PUSH
24423: EMPTY
24424: LIST
24425: LIST
24426: PUSH
24427: LD_INT 25
24429: PUSH
24430: LD_INT 1
24432: PUSH
24433: EMPTY
24434: LIST
24435: LIST
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: PPUSH
24441: CALL_OW 69
24445: ST_TO_ADDR
// if not tmp then
24446: LD_VAR 0 2
24450: NOT
24451: IFFALSE 24455
// exit ;
24453: GO 24617
// un := tmp [ rand ( 1 , tmp ) ] ;
24455: LD_ADDR_VAR 0 3
24459: PUSH
24460: LD_VAR 0 2
24464: PUSH
24465: LD_INT 1
24467: PPUSH
24468: LD_VAR 0 2
24472: PPUSH
24473: CALL_OW 12
24477: ARRAY
24478: ST_TO_ADDR
// if Crawls ( un ) then
24479: LD_VAR 0 3
24483: PPUSH
24484: CALL_OW 318
24488: IFFALSE 24499
// ComWalk ( un ) ;
24490: LD_VAR 0 3
24494: PPUSH
24495: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24499: LD_VAR 0 3
24503: PPUSH
24504: LD_INT 8
24506: PPUSH
24507: CALL_OW 336
// end ; 4 :
24511: GO 24617
24513: LD_INT 4
24515: DOUBLE
24516: EQUAL
24517: IFTRUE 24521
24519: GO 24595
24521: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24522: LD_ADDR_VAR 0 2
24526: PUSH
24527: LD_INT 22
24529: PUSH
24530: LD_OWVAR 2
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: PUSH
24539: LD_INT 30
24541: PUSH
24542: LD_INT 29
24544: PUSH
24545: EMPTY
24546: LIST
24547: LIST
24548: PUSH
24549: EMPTY
24550: LIST
24551: LIST
24552: PPUSH
24553: CALL_OW 69
24557: ST_TO_ADDR
// if not tmp then
24558: LD_VAR 0 2
24562: NOT
24563: IFFALSE 24567
// exit ;
24565: GO 24617
// CenterNowOnUnits ( tmp [ 1 ] ) ;
24567: LD_VAR 0 2
24571: PUSH
24572: LD_INT 1
24574: ARRAY
24575: PPUSH
24576: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
24580: LD_VAR 0 2
24584: PUSH
24585: LD_INT 1
24587: ARRAY
24588: PPUSH
24589: CALL_OW 65
// end ; 5 .. 7 :
24593: GO 24617
24595: LD_INT 5
24597: DOUBLE
24598: GREATEREQUAL
24599: IFFALSE 24607
24601: LD_INT 7
24603: DOUBLE
24604: LESSEQUAL
24605: IFTRUE 24609
24607: GO 24616
24609: POP
// StreamSibBomb ; end ;
24610: CALL 20854 0 0
24614: GO 24617
24616: POP
// end ;
24617: PPOPN 3
24619: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
24620: LD_EXP 33
24624: PUSH
24625: LD_EXP 83
24629: AND
24630: IFFALSE 24786
24632: GO 24634
24634: DISABLE
24635: LD_INT 0
24637: PPUSH
24638: PPUSH
24639: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
24640: LD_ADDR_VAR 0 2
24644: PUSH
24645: LD_INT 81
24647: PUSH
24648: LD_OWVAR 2
24652: PUSH
24653: EMPTY
24654: LIST
24655: LIST
24656: PUSH
24657: LD_INT 2
24659: PUSH
24660: LD_INT 21
24662: PUSH
24663: LD_INT 1
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: PUSH
24670: LD_INT 21
24672: PUSH
24673: LD_INT 2
24675: PUSH
24676: EMPTY
24677: LIST
24678: LIST
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: LIST
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: PPUSH
24689: CALL_OW 69
24693: ST_TO_ADDR
// if not tmp then
24694: LD_VAR 0 2
24698: NOT
24699: IFFALSE 24703
// exit ;
24701: GO 24786
// p := 0 ;
24703: LD_ADDR_VAR 0 3
24707: PUSH
24708: LD_INT 0
24710: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24711: LD_INT 35
24713: PPUSH
24714: CALL_OW 67
// p := p + 1 ;
24718: LD_ADDR_VAR 0 3
24722: PUSH
24723: LD_VAR 0 3
24727: PUSH
24728: LD_INT 1
24730: PLUS
24731: ST_TO_ADDR
// for i in tmp do
24732: LD_ADDR_VAR 0 1
24736: PUSH
24737: LD_VAR 0 2
24741: PUSH
24742: FOR_IN
24743: IFFALSE 24774
// if GetLives ( i ) < 1000 then
24745: LD_VAR 0 1
24749: PPUSH
24750: CALL_OW 256
24754: PUSH
24755: LD_INT 1000
24757: LESS
24758: IFFALSE 24772
// SetLives ( i , 1000 ) ;
24760: LD_VAR 0 1
24764: PPUSH
24765: LD_INT 1000
24767: PPUSH
24768: CALL_OW 234
24772: GO 24742
24774: POP
24775: POP
// until p > 20 ;
24776: LD_VAR 0 3
24780: PUSH
24781: LD_INT 20
24783: GREATER
24784: IFFALSE 24711
// end ;
24786: PPOPN 3
24788: END
// every 0 0$1 trigger StreamModeActive and sTime do
24789: LD_EXP 33
24793: PUSH
24794: LD_EXP 84
24798: AND
24799: IFFALSE 24834
24801: GO 24803
24803: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
24804: LD_INT 28
24806: PPUSH
24807: LD_OWVAR 2
24811: PPUSH
24812: LD_INT 2
24814: PPUSH
24815: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
24819: LD_INT 30
24821: PPUSH
24822: LD_OWVAR 2
24826: PPUSH
24827: LD_INT 2
24829: PPUSH
24830: CALL_OW 322
// end ;
24834: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
24835: LD_EXP 33
24839: PUSH
24840: LD_EXP 85
24844: AND
24845: IFFALSE 24966
24847: GO 24849
24849: DISABLE
24850: LD_INT 0
24852: PPUSH
24853: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24854: LD_ADDR_VAR 0 2
24858: PUSH
24859: LD_INT 22
24861: PUSH
24862: LD_OWVAR 2
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: PUSH
24871: LD_INT 21
24873: PUSH
24874: LD_INT 1
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: PUSH
24881: LD_INT 3
24883: PUSH
24884: LD_INT 23
24886: PUSH
24887: LD_INT 0
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: LIST
24902: PPUSH
24903: CALL_OW 69
24907: ST_TO_ADDR
// if not tmp then
24908: LD_VAR 0 2
24912: NOT
24913: IFFALSE 24917
// exit ;
24915: GO 24966
// for i in tmp do
24917: LD_ADDR_VAR 0 1
24921: PUSH
24922: LD_VAR 0 2
24926: PUSH
24927: FOR_IN
24928: IFFALSE 24964
// begin if Crawls ( i ) then
24930: LD_VAR 0 1
24934: PPUSH
24935: CALL_OW 318
24939: IFFALSE 24950
// ComWalk ( i ) ;
24941: LD_VAR 0 1
24945: PPUSH
24946: CALL_OW 138
// SetClass ( i , 2 ) ;
24950: LD_VAR 0 1
24954: PPUSH
24955: LD_INT 2
24957: PPUSH
24958: CALL_OW 336
// end ;
24962: GO 24927
24964: POP
24965: POP
// end ;
24966: PPOPN 2
24968: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
24969: LD_EXP 33
24973: PUSH
24974: LD_EXP 86
24978: AND
24979: IFFALSE 25267
24981: GO 24983
24983: DISABLE
24984: LD_INT 0
24986: PPUSH
24987: PPUSH
24988: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
24989: LD_OWVAR 2
24993: PPUSH
24994: LD_INT 9
24996: PPUSH
24997: LD_INT 1
24999: PPUSH
25000: LD_INT 1
25002: PPUSH
25003: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
25007: LD_INT 9
25009: PPUSH
25010: LD_OWVAR 2
25014: PPUSH
25015: CALL_OW 343
// uc_side := 9 ;
25019: LD_ADDR_OWVAR 20
25023: PUSH
25024: LD_INT 9
25026: ST_TO_ADDR
// uc_nation := 2 ;
25027: LD_ADDR_OWVAR 21
25031: PUSH
25032: LD_INT 2
25034: ST_TO_ADDR
// hc_name := Dark Warrior ;
25035: LD_ADDR_OWVAR 26
25039: PUSH
25040: LD_STRING Dark Warrior
25042: ST_TO_ADDR
// hc_gallery :=  ;
25043: LD_ADDR_OWVAR 33
25047: PUSH
25048: LD_STRING 
25050: ST_TO_ADDR
// hc_noskilllimit := true ;
25051: LD_ADDR_OWVAR 76
25055: PUSH
25056: LD_INT 1
25058: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
25059: LD_ADDR_OWVAR 31
25063: PUSH
25064: LD_INT 30
25066: PUSH
25067: LD_INT 30
25069: PUSH
25070: LD_INT 30
25072: PUSH
25073: LD_INT 30
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: ST_TO_ADDR
// un := CreateHuman ;
25082: LD_ADDR_VAR 0 3
25086: PUSH
25087: CALL_OW 44
25091: ST_TO_ADDR
// hc_noskilllimit := false ;
25092: LD_ADDR_OWVAR 76
25096: PUSH
25097: LD_INT 0
25099: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25100: LD_VAR 0 3
25104: PPUSH
25105: LD_INT 1
25107: PPUSH
25108: CALL_OW 51
// ToLua ( playRanger() ) ;
25112: LD_STRING playRanger()
25114: PPUSH
25115: CALL_OW 559
// p := 0 ;
25119: LD_ADDR_VAR 0 2
25123: PUSH
25124: LD_INT 0
25126: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25127: LD_INT 35
25129: PPUSH
25130: CALL_OW 67
// p := p + 1 ;
25134: LD_ADDR_VAR 0 2
25138: PUSH
25139: LD_VAR 0 2
25143: PUSH
25144: LD_INT 1
25146: PLUS
25147: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
25148: LD_VAR 0 3
25152: PPUSH
25153: CALL_OW 256
25157: PUSH
25158: LD_INT 1000
25160: LESS
25161: IFFALSE 25175
// SetLives ( un , 1000 ) ;
25163: LD_VAR 0 3
25167: PPUSH
25168: LD_INT 1000
25170: PPUSH
25171: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
25175: LD_VAR 0 3
25179: PPUSH
25180: LD_INT 81
25182: PUSH
25183: LD_OWVAR 2
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: PUSH
25192: LD_INT 91
25194: PUSH
25195: LD_VAR 0 3
25199: PUSH
25200: LD_INT 30
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: LIST
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: PPUSH
25212: CALL_OW 69
25216: PPUSH
25217: LD_VAR 0 3
25221: PPUSH
25222: CALL_OW 74
25226: PPUSH
25227: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
25231: LD_VAR 0 2
25235: PUSH
25236: LD_INT 80
25238: GREATER
25239: PUSH
25240: LD_VAR 0 3
25244: PPUSH
25245: CALL_OW 301
25249: OR
25250: IFFALSE 25127
// if un then
25252: LD_VAR 0 3
25256: IFFALSE 25267
// RemoveUnit ( un ) ;
25258: LD_VAR 0 3
25262: PPUSH
25263: CALL_OW 64
// end ;
25267: PPOPN 3
25269: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
25270: LD_EXP 87
25274: IFFALSE 25390
25276: GO 25278
25278: DISABLE
25279: LD_INT 0
25281: PPUSH
25282: PPUSH
25283: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25284: LD_ADDR_VAR 0 2
25288: PUSH
25289: LD_INT 81
25291: PUSH
25292: LD_OWVAR 2
25296: PUSH
25297: EMPTY
25298: LIST
25299: LIST
25300: PUSH
25301: LD_INT 21
25303: PUSH
25304: LD_INT 1
25306: PUSH
25307: EMPTY
25308: LIST
25309: LIST
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PPUSH
25315: CALL_OW 69
25319: ST_TO_ADDR
// ToLua ( playComputer() ) ;
25320: LD_STRING playComputer()
25322: PPUSH
25323: CALL_OW 559
// if not tmp then
25327: LD_VAR 0 2
25331: NOT
25332: IFFALSE 25336
// exit ;
25334: GO 25390
// for i in tmp do
25336: LD_ADDR_VAR 0 1
25340: PUSH
25341: LD_VAR 0 2
25345: PUSH
25346: FOR_IN
25347: IFFALSE 25388
// for j := 1 to 4 do
25349: LD_ADDR_VAR 0 3
25353: PUSH
25354: DOUBLE
25355: LD_INT 1
25357: DEC
25358: ST_TO_ADDR
25359: LD_INT 4
25361: PUSH
25362: FOR_TO
25363: IFFALSE 25384
// SetSkill ( i , j , 10 ) ;
25365: LD_VAR 0 1
25369: PPUSH
25370: LD_VAR 0 3
25374: PPUSH
25375: LD_INT 10
25377: PPUSH
25378: CALL_OW 237
25382: GO 25362
25384: POP
25385: POP
25386: GO 25346
25388: POP
25389: POP
// end ;
25390: PPOPN 3
25392: END
// every 0 0$1 trigger s30 do var i , tmp ;
25393: LD_EXP 88
25397: IFFALSE 25466
25399: GO 25401
25401: DISABLE
25402: LD_INT 0
25404: PPUSH
25405: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25406: LD_ADDR_VAR 0 2
25410: PUSH
25411: LD_INT 22
25413: PUSH
25414: LD_OWVAR 2
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: PPUSH
25423: CALL_OW 69
25427: ST_TO_ADDR
// if not tmp then
25428: LD_VAR 0 2
25432: NOT
25433: IFFALSE 25437
// exit ;
25435: GO 25466
// for i in tmp do
25437: LD_ADDR_VAR 0 1
25441: PUSH
25442: LD_VAR 0 2
25446: PUSH
25447: FOR_IN
25448: IFFALSE 25464
// SetLives ( i , 300 ) ;
25450: LD_VAR 0 1
25454: PPUSH
25455: LD_INT 300
25457: PPUSH
25458: CALL_OW 234
25462: GO 25447
25464: POP
25465: POP
// end ;
25466: PPOPN 2
25468: END
// every 0 0$1 trigger s60 do var i , tmp ;
25469: LD_EXP 89
25473: IFFALSE 25542
25475: GO 25477
25477: DISABLE
25478: LD_INT 0
25480: PPUSH
25481: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25482: LD_ADDR_VAR 0 2
25486: PUSH
25487: LD_INT 22
25489: PUSH
25490: LD_OWVAR 2
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PPUSH
25499: CALL_OW 69
25503: ST_TO_ADDR
// if not tmp then
25504: LD_VAR 0 2
25508: NOT
25509: IFFALSE 25513
// exit ;
25511: GO 25542
// for i in tmp do
25513: LD_ADDR_VAR 0 1
25517: PUSH
25518: LD_VAR 0 2
25522: PUSH
25523: FOR_IN
25524: IFFALSE 25540
// SetLives ( i , 600 ) ;
25526: LD_VAR 0 1
25530: PPUSH
25531: LD_INT 600
25533: PPUSH
25534: CALL_OW 234
25538: GO 25523
25540: POP
25541: POP
// end ;
25542: PPOPN 2
25544: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
25545: LD_INT 0
25547: PPUSH
// case cmd of 301 :
25548: LD_VAR 0 1
25552: PUSH
25553: LD_INT 301
25555: DOUBLE
25556: EQUAL
25557: IFTRUE 25561
25559: GO 25593
25561: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
25562: LD_VAR 0 6
25566: PPUSH
25567: LD_VAR 0 7
25571: PPUSH
25572: LD_VAR 0 8
25576: PPUSH
25577: LD_VAR 0 4
25581: PPUSH
25582: LD_VAR 0 5
25586: PPUSH
25587: CALL 26802 0 5
25591: GO 25714
25593: LD_INT 302
25595: DOUBLE
25596: EQUAL
25597: IFTRUE 25601
25599: GO 25638
25601: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
25602: LD_VAR 0 6
25606: PPUSH
25607: LD_VAR 0 7
25611: PPUSH
25612: LD_VAR 0 8
25616: PPUSH
25617: LD_VAR 0 9
25621: PPUSH
25622: LD_VAR 0 4
25626: PPUSH
25627: LD_VAR 0 5
25631: PPUSH
25632: CALL 26893 0 6
25636: GO 25714
25638: LD_INT 303
25640: DOUBLE
25641: EQUAL
25642: IFTRUE 25646
25644: GO 25683
25646: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
25647: LD_VAR 0 6
25651: PPUSH
25652: LD_VAR 0 7
25656: PPUSH
25657: LD_VAR 0 8
25661: PPUSH
25662: LD_VAR 0 9
25666: PPUSH
25667: LD_VAR 0 4
25671: PPUSH
25672: LD_VAR 0 5
25676: PPUSH
25677: CALL 25719 0 6
25681: GO 25714
25683: LD_INT 304
25685: DOUBLE
25686: EQUAL
25687: IFTRUE 25691
25689: GO 25713
25691: POP
// hHackTeleport ( unit , x , y ) ; end ;
25692: LD_VAR 0 2
25696: PPUSH
25697: LD_VAR 0 4
25701: PPUSH
25702: LD_VAR 0 5
25706: PPUSH
25707: CALL 27486 0 3
25711: GO 25714
25713: POP
// end ;
25714: LD_VAR 0 12
25718: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
25719: LD_INT 0
25721: PPUSH
25722: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
25723: LD_VAR 0 1
25727: PUSH
25728: LD_INT 1
25730: LESS
25731: PUSH
25732: LD_VAR 0 1
25736: PUSH
25737: LD_INT 3
25739: GREATER
25740: OR
25741: PUSH
25742: LD_VAR 0 5
25746: PPUSH
25747: LD_VAR 0 6
25751: PPUSH
25752: CALL_OW 428
25756: OR
25757: IFFALSE 25761
// exit ;
25759: GO 26489
// uc_side := your_side ;
25761: LD_ADDR_OWVAR 20
25765: PUSH
25766: LD_OWVAR 2
25770: ST_TO_ADDR
// uc_nation := nation ;
25771: LD_ADDR_OWVAR 21
25775: PUSH
25776: LD_VAR 0 1
25780: ST_TO_ADDR
// bc_level = 1 ;
25781: LD_ADDR_OWVAR 43
25785: PUSH
25786: LD_INT 1
25788: ST_TO_ADDR
// case btype of 1 :
25789: LD_VAR 0 2
25793: PUSH
25794: LD_INT 1
25796: DOUBLE
25797: EQUAL
25798: IFTRUE 25802
25800: GO 25813
25802: POP
// bc_type := b_depot ; 2 :
25803: LD_ADDR_OWVAR 42
25807: PUSH
25808: LD_INT 0
25810: ST_TO_ADDR
25811: GO 26433
25813: LD_INT 2
25815: DOUBLE
25816: EQUAL
25817: IFTRUE 25821
25819: GO 25832
25821: POP
// bc_type := b_warehouse ; 3 :
25822: LD_ADDR_OWVAR 42
25826: PUSH
25827: LD_INT 1
25829: ST_TO_ADDR
25830: GO 26433
25832: LD_INT 3
25834: DOUBLE
25835: EQUAL
25836: IFTRUE 25840
25838: GO 25851
25840: POP
// bc_type := b_lab ; 4 .. 9 :
25841: LD_ADDR_OWVAR 42
25845: PUSH
25846: LD_INT 6
25848: ST_TO_ADDR
25849: GO 26433
25851: LD_INT 4
25853: DOUBLE
25854: GREATEREQUAL
25855: IFFALSE 25863
25857: LD_INT 9
25859: DOUBLE
25860: LESSEQUAL
25861: IFTRUE 25865
25863: GO 25925
25865: POP
// begin bc_type := b_lab_half ;
25866: LD_ADDR_OWVAR 42
25870: PUSH
25871: LD_INT 7
25873: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
25874: LD_ADDR_OWVAR 44
25878: PUSH
25879: LD_INT 10
25881: PUSH
25882: LD_INT 11
25884: PUSH
25885: LD_INT 12
25887: PUSH
25888: LD_INT 15
25890: PUSH
25891: LD_INT 14
25893: PUSH
25894: LD_INT 13
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: LIST
25903: LIST
25904: PUSH
25905: LD_VAR 0 2
25909: PUSH
25910: LD_INT 3
25912: MINUS
25913: ARRAY
25914: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
25915: LD_ADDR_OWVAR 45
25919: PUSH
25920: LD_INT 9
25922: ST_TO_ADDR
// end ; 10 .. 13 :
25923: GO 26433
25925: LD_INT 10
25927: DOUBLE
25928: GREATEREQUAL
25929: IFFALSE 25937
25931: LD_INT 13
25933: DOUBLE
25934: LESSEQUAL
25935: IFTRUE 25939
25937: GO 26016
25939: POP
// begin bc_type := b_lab_full ;
25940: LD_ADDR_OWVAR 42
25944: PUSH
25945: LD_INT 8
25947: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
25948: LD_ADDR_OWVAR 44
25952: PUSH
25953: LD_INT 10
25955: PUSH
25956: LD_INT 12
25958: PUSH
25959: LD_INT 14
25961: PUSH
25962: LD_INT 13
25964: PUSH
25965: EMPTY
25966: LIST
25967: LIST
25968: LIST
25969: LIST
25970: PUSH
25971: LD_VAR 0 2
25975: PUSH
25976: LD_INT 9
25978: MINUS
25979: ARRAY
25980: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
25981: LD_ADDR_OWVAR 45
25985: PUSH
25986: LD_INT 11
25988: PUSH
25989: LD_INT 15
25991: PUSH
25992: LD_INT 12
25994: PUSH
25995: LD_INT 15
25997: PUSH
25998: EMPTY
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: PUSH
26004: LD_VAR 0 2
26008: PUSH
26009: LD_INT 9
26011: MINUS
26012: ARRAY
26013: ST_TO_ADDR
// end ; 14 :
26014: GO 26433
26016: LD_INT 14
26018: DOUBLE
26019: EQUAL
26020: IFTRUE 26024
26022: GO 26035
26024: POP
// bc_type := b_workshop ; 15 :
26025: LD_ADDR_OWVAR 42
26029: PUSH
26030: LD_INT 2
26032: ST_TO_ADDR
26033: GO 26433
26035: LD_INT 15
26037: DOUBLE
26038: EQUAL
26039: IFTRUE 26043
26041: GO 26054
26043: POP
// bc_type := b_factory ; 16 :
26044: LD_ADDR_OWVAR 42
26048: PUSH
26049: LD_INT 3
26051: ST_TO_ADDR
26052: GO 26433
26054: LD_INT 16
26056: DOUBLE
26057: EQUAL
26058: IFTRUE 26062
26060: GO 26073
26062: POP
// bc_type := b_ext_gun ; 17 :
26063: LD_ADDR_OWVAR 42
26067: PUSH
26068: LD_INT 17
26070: ST_TO_ADDR
26071: GO 26433
26073: LD_INT 17
26075: DOUBLE
26076: EQUAL
26077: IFTRUE 26081
26079: GO 26109
26081: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
26082: LD_ADDR_OWVAR 42
26086: PUSH
26087: LD_INT 19
26089: PUSH
26090: LD_INT 23
26092: PUSH
26093: LD_INT 19
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: LIST
26100: PUSH
26101: LD_VAR 0 1
26105: ARRAY
26106: ST_TO_ADDR
26107: GO 26433
26109: LD_INT 18
26111: DOUBLE
26112: EQUAL
26113: IFTRUE 26117
26115: GO 26128
26117: POP
// bc_type := b_ext_radar ; 19 :
26118: LD_ADDR_OWVAR 42
26122: PUSH
26123: LD_INT 20
26125: ST_TO_ADDR
26126: GO 26433
26128: LD_INT 19
26130: DOUBLE
26131: EQUAL
26132: IFTRUE 26136
26134: GO 26147
26136: POP
// bc_type := b_ext_radio ; 20 :
26137: LD_ADDR_OWVAR 42
26141: PUSH
26142: LD_INT 22
26144: ST_TO_ADDR
26145: GO 26433
26147: LD_INT 20
26149: DOUBLE
26150: EQUAL
26151: IFTRUE 26155
26153: GO 26166
26155: POP
// bc_type := b_ext_siberium ; 21 :
26156: LD_ADDR_OWVAR 42
26160: PUSH
26161: LD_INT 21
26163: ST_TO_ADDR
26164: GO 26433
26166: LD_INT 21
26168: DOUBLE
26169: EQUAL
26170: IFTRUE 26174
26172: GO 26185
26174: POP
// bc_type := b_ext_computer ; 22 :
26175: LD_ADDR_OWVAR 42
26179: PUSH
26180: LD_INT 24
26182: ST_TO_ADDR
26183: GO 26433
26185: LD_INT 22
26187: DOUBLE
26188: EQUAL
26189: IFTRUE 26193
26191: GO 26204
26193: POP
// bc_type := b_ext_track ; 23 :
26194: LD_ADDR_OWVAR 42
26198: PUSH
26199: LD_INT 16
26201: ST_TO_ADDR
26202: GO 26433
26204: LD_INT 23
26206: DOUBLE
26207: EQUAL
26208: IFTRUE 26212
26210: GO 26223
26212: POP
// bc_type := b_ext_laser ; 24 :
26213: LD_ADDR_OWVAR 42
26217: PUSH
26218: LD_INT 25
26220: ST_TO_ADDR
26221: GO 26433
26223: LD_INT 24
26225: DOUBLE
26226: EQUAL
26227: IFTRUE 26231
26229: GO 26242
26231: POP
// bc_type := b_control_tower ; 25 :
26232: LD_ADDR_OWVAR 42
26236: PUSH
26237: LD_INT 36
26239: ST_TO_ADDR
26240: GO 26433
26242: LD_INT 25
26244: DOUBLE
26245: EQUAL
26246: IFTRUE 26250
26248: GO 26261
26250: POP
// bc_type := b_breastwork ; 26 :
26251: LD_ADDR_OWVAR 42
26255: PUSH
26256: LD_INT 31
26258: ST_TO_ADDR
26259: GO 26433
26261: LD_INT 26
26263: DOUBLE
26264: EQUAL
26265: IFTRUE 26269
26267: GO 26280
26269: POP
// bc_type := b_bunker ; 27 :
26270: LD_ADDR_OWVAR 42
26274: PUSH
26275: LD_INT 32
26277: ST_TO_ADDR
26278: GO 26433
26280: LD_INT 27
26282: DOUBLE
26283: EQUAL
26284: IFTRUE 26288
26286: GO 26299
26288: POP
// bc_type := b_turret ; 28 :
26289: LD_ADDR_OWVAR 42
26293: PUSH
26294: LD_INT 33
26296: ST_TO_ADDR
26297: GO 26433
26299: LD_INT 28
26301: DOUBLE
26302: EQUAL
26303: IFTRUE 26307
26305: GO 26318
26307: POP
// bc_type := b_armoury ; 29 :
26308: LD_ADDR_OWVAR 42
26312: PUSH
26313: LD_INT 4
26315: ST_TO_ADDR
26316: GO 26433
26318: LD_INT 29
26320: DOUBLE
26321: EQUAL
26322: IFTRUE 26326
26324: GO 26337
26326: POP
// bc_type := b_barracks ; 30 :
26327: LD_ADDR_OWVAR 42
26331: PUSH
26332: LD_INT 5
26334: ST_TO_ADDR
26335: GO 26433
26337: LD_INT 30
26339: DOUBLE
26340: EQUAL
26341: IFTRUE 26345
26343: GO 26356
26345: POP
// bc_type := b_solar_power ; 31 :
26346: LD_ADDR_OWVAR 42
26350: PUSH
26351: LD_INT 27
26353: ST_TO_ADDR
26354: GO 26433
26356: LD_INT 31
26358: DOUBLE
26359: EQUAL
26360: IFTRUE 26364
26362: GO 26375
26364: POP
// bc_type := b_oil_power ; 32 :
26365: LD_ADDR_OWVAR 42
26369: PUSH
26370: LD_INT 26
26372: ST_TO_ADDR
26373: GO 26433
26375: LD_INT 32
26377: DOUBLE
26378: EQUAL
26379: IFTRUE 26383
26381: GO 26394
26383: POP
// bc_type := b_siberite_power ; 33 :
26384: LD_ADDR_OWVAR 42
26388: PUSH
26389: LD_INT 28
26391: ST_TO_ADDR
26392: GO 26433
26394: LD_INT 33
26396: DOUBLE
26397: EQUAL
26398: IFTRUE 26402
26400: GO 26413
26402: POP
// bc_type := b_oil_mine ; 34 :
26403: LD_ADDR_OWVAR 42
26407: PUSH
26408: LD_INT 29
26410: ST_TO_ADDR
26411: GO 26433
26413: LD_INT 34
26415: DOUBLE
26416: EQUAL
26417: IFTRUE 26421
26419: GO 26432
26421: POP
// bc_type := b_siberite_mine ; end ;
26422: LD_ADDR_OWVAR 42
26426: PUSH
26427: LD_INT 30
26429: ST_TO_ADDR
26430: GO 26433
26432: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
26433: LD_ADDR_VAR 0 8
26437: PUSH
26438: LD_VAR 0 5
26442: PPUSH
26443: LD_VAR 0 6
26447: PPUSH
26448: LD_VAR 0 3
26452: PPUSH
26453: CALL_OW 47
26457: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
26458: LD_OWVAR 42
26462: PUSH
26463: LD_INT 32
26465: PUSH
26466: LD_INT 33
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: IN
26473: IFFALSE 26489
// PlaceWeaponTurret ( b , weapon ) ;
26475: LD_VAR 0 8
26479: PPUSH
26480: LD_VAR 0 4
26484: PPUSH
26485: CALL_OW 431
// end ;
26489: LD_VAR 0 7
26493: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
26494: LD_INT 0
26496: PPUSH
26497: PPUSH
26498: PPUSH
26499: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26500: LD_ADDR_VAR 0 4
26504: PUSH
26505: LD_INT 22
26507: PUSH
26508: LD_OWVAR 2
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 2
26519: PUSH
26520: LD_INT 30
26522: PUSH
26523: LD_INT 0
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PUSH
26530: LD_INT 30
26532: PUSH
26533: LD_INT 1
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: LIST
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: PPUSH
26549: CALL_OW 69
26553: ST_TO_ADDR
// if not tmp then
26554: LD_VAR 0 4
26558: NOT
26559: IFFALSE 26563
// exit ;
26561: GO 26622
// for i in tmp do
26563: LD_ADDR_VAR 0 2
26567: PUSH
26568: LD_VAR 0 4
26572: PUSH
26573: FOR_IN
26574: IFFALSE 26620
// for j = 1 to 3 do
26576: LD_ADDR_VAR 0 3
26580: PUSH
26581: DOUBLE
26582: LD_INT 1
26584: DEC
26585: ST_TO_ADDR
26586: LD_INT 3
26588: PUSH
26589: FOR_TO
26590: IFFALSE 26616
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
26592: LD_VAR 0 2
26596: PPUSH
26597: CALL_OW 274
26601: PPUSH
26602: LD_VAR 0 3
26606: PPUSH
26607: LD_INT 99999
26609: PPUSH
26610: CALL_OW 277
26614: GO 26589
26616: POP
26617: POP
26618: GO 26573
26620: POP
26621: POP
// end ;
26622: LD_VAR 0 1
26626: RET
// export function hHackSetLevel10 ; var i , j ; begin
26627: LD_INT 0
26629: PPUSH
26630: PPUSH
26631: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26632: LD_ADDR_VAR 0 2
26636: PUSH
26637: LD_INT 21
26639: PUSH
26640: LD_INT 1
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PPUSH
26647: CALL_OW 69
26651: PUSH
26652: FOR_IN
26653: IFFALSE 26705
// if IsSelected ( i ) then
26655: LD_VAR 0 2
26659: PPUSH
26660: CALL_OW 306
26664: IFFALSE 26703
// begin for j := 1 to 4 do
26666: LD_ADDR_VAR 0 3
26670: PUSH
26671: DOUBLE
26672: LD_INT 1
26674: DEC
26675: ST_TO_ADDR
26676: LD_INT 4
26678: PUSH
26679: FOR_TO
26680: IFFALSE 26701
// SetSkill ( i , j , 10 ) ;
26682: LD_VAR 0 2
26686: PPUSH
26687: LD_VAR 0 3
26691: PPUSH
26692: LD_INT 10
26694: PPUSH
26695: CALL_OW 237
26699: GO 26679
26701: POP
26702: POP
// end ;
26703: GO 26652
26705: POP
26706: POP
// end ;
26707: LD_VAR 0 1
26711: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
26712: LD_INT 0
26714: PPUSH
26715: PPUSH
26716: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
26717: LD_ADDR_VAR 0 2
26721: PUSH
26722: LD_INT 22
26724: PUSH
26725: LD_OWVAR 2
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: PUSH
26734: LD_INT 21
26736: PUSH
26737: LD_INT 1
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: PPUSH
26748: CALL_OW 69
26752: PUSH
26753: FOR_IN
26754: IFFALSE 26795
// begin for j := 1 to 4 do
26756: LD_ADDR_VAR 0 3
26760: PUSH
26761: DOUBLE
26762: LD_INT 1
26764: DEC
26765: ST_TO_ADDR
26766: LD_INT 4
26768: PUSH
26769: FOR_TO
26770: IFFALSE 26791
// SetSkill ( i , j , 10 ) ;
26772: LD_VAR 0 2
26776: PPUSH
26777: LD_VAR 0 3
26781: PPUSH
26782: LD_INT 10
26784: PPUSH
26785: CALL_OW 237
26789: GO 26769
26791: POP
26792: POP
// end ;
26793: GO 26753
26795: POP
26796: POP
// end ;
26797: LD_VAR 0 1
26801: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
26802: LD_INT 0
26804: PPUSH
// uc_side := your_side ;
26805: LD_ADDR_OWVAR 20
26809: PUSH
26810: LD_OWVAR 2
26814: ST_TO_ADDR
// uc_nation := nation ;
26815: LD_ADDR_OWVAR 21
26819: PUSH
26820: LD_VAR 0 1
26824: ST_TO_ADDR
// InitHc ;
26825: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
26829: LD_INT 0
26831: PPUSH
26832: LD_VAR 0 2
26836: PPUSH
26837: LD_VAR 0 3
26841: PPUSH
26842: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
26846: LD_VAR 0 4
26850: PPUSH
26851: LD_VAR 0 5
26855: PPUSH
26856: CALL_OW 428
26860: PUSH
26861: LD_INT 0
26863: EQUAL
26864: IFFALSE 26888
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
26866: CALL_OW 44
26870: PPUSH
26871: LD_VAR 0 4
26875: PPUSH
26876: LD_VAR 0 5
26880: PPUSH
26881: LD_INT 1
26883: PPUSH
26884: CALL_OW 48
// end ;
26888: LD_VAR 0 6
26892: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
26893: LD_INT 0
26895: PPUSH
26896: PPUSH
// uc_side := your_side ;
26897: LD_ADDR_OWVAR 20
26901: PUSH
26902: LD_OWVAR 2
26906: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
26907: LD_VAR 0 1
26911: PUSH
26912: LD_INT 1
26914: PUSH
26915: LD_INT 2
26917: PUSH
26918: LD_INT 3
26920: PUSH
26921: LD_INT 4
26923: PUSH
26924: LD_INT 5
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: IN
26934: IFFALSE 26946
// uc_nation := nation_american else
26936: LD_ADDR_OWVAR 21
26940: PUSH
26941: LD_INT 1
26943: ST_TO_ADDR
26944: GO 26989
// if chassis in [ 11 , 12 , 13 , 14 ] then
26946: LD_VAR 0 1
26950: PUSH
26951: LD_INT 11
26953: PUSH
26954: LD_INT 12
26956: PUSH
26957: LD_INT 13
26959: PUSH
26960: LD_INT 14
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: IN
26969: IFFALSE 26981
// uc_nation := nation_arabian else
26971: LD_ADDR_OWVAR 21
26975: PUSH
26976: LD_INT 2
26978: ST_TO_ADDR
26979: GO 26989
// uc_nation := nation_russian ;
26981: LD_ADDR_OWVAR 21
26985: PUSH
26986: LD_INT 3
26988: ST_TO_ADDR
// vc_chassis := chassis ;
26989: LD_ADDR_OWVAR 37
26993: PUSH
26994: LD_VAR 0 1
26998: ST_TO_ADDR
// vc_engine := engine ;
26999: LD_ADDR_OWVAR 39
27003: PUSH
27004: LD_VAR 0 2
27008: ST_TO_ADDR
// vc_control := control ;
27009: LD_ADDR_OWVAR 38
27013: PUSH
27014: LD_VAR 0 3
27018: ST_TO_ADDR
// vc_weapon := weapon ;
27019: LD_ADDR_OWVAR 40
27023: PUSH
27024: LD_VAR 0 4
27028: ST_TO_ADDR
// un := CreateVehicle ;
27029: LD_ADDR_VAR 0 8
27033: PUSH
27034: CALL_OW 45
27038: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
27039: LD_VAR 0 8
27043: PPUSH
27044: LD_INT 0
27046: PPUSH
27047: LD_INT 5
27049: PPUSH
27050: CALL_OW 12
27054: PPUSH
27055: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
27059: LD_VAR 0 8
27063: PPUSH
27064: LD_VAR 0 5
27068: PPUSH
27069: LD_VAR 0 6
27073: PPUSH
27074: LD_INT 1
27076: PPUSH
27077: CALL_OW 48
// end ;
27081: LD_VAR 0 7
27085: RET
// export hInvincible ; every 1 do
27086: GO 27088
27088: DISABLE
// hInvincible := [ ] ;
27089: LD_ADDR_EXP 90
27093: PUSH
27094: EMPTY
27095: ST_TO_ADDR
27096: END
// every 10 do var i ;
27097: GO 27099
27099: DISABLE
27100: LD_INT 0
27102: PPUSH
// begin enable ;
27103: ENABLE
// if not hInvincible then
27104: LD_EXP 90
27108: NOT
27109: IFFALSE 27113
// exit ;
27111: GO 27157
// for i in hInvincible do
27113: LD_ADDR_VAR 0 1
27117: PUSH
27118: LD_EXP 90
27122: PUSH
27123: FOR_IN
27124: IFFALSE 27155
// if GetLives ( i ) < 1000 then
27126: LD_VAR 0 1
27130: PPUSH
27131: CALL_OW 256
27135: PUSH
27136: LD_INT 1000
27138: LESS
27139: IFFALSE 27153
// SetLives ( i , 1000 ) ;
27141: LD_VAR 0 1
27145: PPUSH
27146: LD_INT 1000
27148: PPUSH
27149: CALL_OW 234
27153: GO 27123
27155: POP
27156: POP
// end ;
27157: PPOPN 1
27159: END
// export function hHackInvincible ; var i ; begin
27160: LD_INT 0
27162: PPUSH
27163: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
27164: LD_ADDR_VAR 0 2
27168: PUSH
27169: LD_INT 2
27171: PUSH
27172: LD_INT 21
27174: PUSH
27175: LD_INT 1
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: PUSH
27182: LD_INT 21
27184: PUSH
27185: LD_INT 2
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: LIST
27196: PPUSH
27197: CALL_OW 69
27201: PUSH
27202: FOR_IN
27203: IFFALSE 27264
// if IsSelected ( i ) then
27205: LD_VAR 0 2
27209: PPUSH
27210: CALL_OW 306
27214: IFFALSE 27262
// begin if i in hInvincible then
27216: LD_VAR 0 2
27220: PUSH
27221: LD_EXP 90
27225: IN
27226: IFFALSE 27246
// hInvincible := hInvincible diff i else
27228: LD_ADDR_EXP 90
27232: PUSH
27233: LD_EXP 90
27237: PUSH
27238: LD_VAR 0 2
27242: DIFF
27243: ST_TO_ADDR
27244: GO 27262
// hInvincible := hInvincible union i ;
27246: LD_ADDR_EXP 90
27250: PUSH
27251: LD_EXP 90
27255: PUSH
27256: LD_VAR 0 2
27260: UNION
27261: ST_TO_ADDR
// end ;
27262: GO 27202
27264: POP
27265: POP
// end ;
27266: LD_VAR 0 1
27270: RET
// export function hHackInvisible ; var i , j ; begin
27271: LD_INT 0
27273: PPUSH
27274: PPUSH
27275: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27276: LD_ADDR_VAR 0 2
27280: PUSH
27281: LD_INT 21
27283: PUSH
27284: LD_INT 1
27286: PUSH
27287: EMPTY
27288: LIST
27289: LIST
27290: PPUSH
27291: CALL_OW 69
27295: PUSH
27296: FOR_IN
27297: IFFALSE 27321
// if IsSelected ( i ) then
27299: LD_VAR 0 2
27303: PPUSH
27304: CALL_OW 306
27308: IFFALSE 27319
// ComForceInvisible ( i ) ;
27310: LD_VAR 0 2
27314: PPUSH
27315: CALL_OW 496
27319: GO 27296
27321: POP
27322: POP
// end ;
27323: LD_VAR 0 1
27327: RET
// export function hHackChangeYourSide ; begin
27328: LD_INT 0
27330: PPUSH
// if your_side = 8 then
27331: LD_OWVAR 2
27335: PUSH
27336: LD_INT 8
27338: EQUAL
27339: IFFALSE 27351
// your_side := 0 else
27341: LD_ADDR_OWVAR 2
27345: PUSH
27346: LD_INT 0
27348: ST_TO_ADDR
27349: GO 27365
// your_side := your_side + 1 ;
27351: LD_ADDR_OWVAR 2
27355: PUSH
27356: LD_OWVAR 2
27360: PUSH
27361: LD_INT 1
27363: PLUS
27364: ST_TO_ADDR
// end ;
27365: LD_VAR 0 1
27369: RET
// export function hHackChangeUnitSide ; var i , j ; begin
27370: LD_INT 0
27372: PPUSH
27373: PPUSH
27374: PPUSH
// for i in all_units do
27375: LD_ADDR_VAR 0 2
27379: PUSH
27380: LD_OWVAR 3
27384: PUSH
27385: FOR_IN
27386: IFFALSE 27464
// if IsSelected ( i ) then
27388: LD_VAR 0 2
27392: PPUSH
27393: CALL_OW 306
27397: IFFALSE 27462
// begin j := GetSide ( i ) ;
27399: LD_ADDR_VAR 0 3
27403: PUSH
27404: LD_VAR 0 2
27408: PPUSH
27409: CALL_OW 255
27413: ST_TO_ADDR
// if j = 8 then
27414: LD_VAR 0 3
27418: PUSH
27419: LD_INT 8
27421: EQUAL
27422: IFFALSE 27434
// j := 0 else
27424: LD_ADDR_VAR 0 3
27428: PUSH
27429: LD_INT 0
27431: ST_TO_ADDR
27432: GO 27448
// j := j + 1 ;
27434: LD_ADDR_VAR 0 3
27438: PUSH
27439: LD_VAR 0 3
27443: PUSH
27444: LD_INT 1
27446: PLUS
27447: ST_TO_ADDR
// SetSide ( i , j ) ;
27448: LD_VAR 0 2
27452: PPUSH
27453: LD_VAR 0 3
27457: PPUSH
27458: CALL_OW 235
// end ;
27462: GO 27385
27464: POP
27465: POP
// end ;
27466: LD_VAR 0 1
27470: RET
// export function hHackFog ; begin
27471: LD_INT 0
27473: PPUSH
// FogOff ( true ) ;
27474: LD_INT 1
27476: PPUSH
27477: CALL_OW 344
// end ;
27481: LD_VAR 0 1
27485: RET
// export function hHackTeleport ( unit , x , y ) ; begin
27486: LD_INT 0
27488: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
27489: LD_VAR 0 1
27493: PPUSH
27494: LD_VAR 0 2
27498: PPUSH
27499: LD_VAR 0 3
27503: PPUSH
27504: LD_INT 1
27506: PPUSH
27507: LD_INT 1
27509: PPUSH
27510: CALL_OW 483
// CenterOnXY ( x , y ) ;
27514: LD_VAR 0 2
27518: PPUSH
27519: LD_VAR 0 3
27523: PPUSH
27524: CALL_OW 84
// end ;
27528: LD_VAR 0 4
27532: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
27533: LD_INT 0
27535: PPUSH
27536: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
27537: LD_VAR 0 1
27541: NOT
27542: PUSH
27543: LD_VAR 0 2
27547: PPUSH
27548: LD_VAR 0 3
27552: PPUSH
27553: CALL_OW 488
27557: NOT
27558: OR
27559: PUSH
27560: LD_VAR 0 1
27564: PPUSH
27565: CALL_OW 266
27569: PUSH
27570: LD_INT 3
27572: NONEQUAL
27573: PUSH
27574: LD_VAR 0 1
27578: PPUSH
27579: CALL_OW 247
27583: PUSH
27584: LD_INT 1
27586: EQUAL
27587: NOT
27588: AND
27589: OR
27590: IFFALSE 27594
// exit ;
27592: GO 27743
// if GetType ( factory ) = unit_human then
27594: LD_VAR 0 1
27598: PPUSH
27599: CALL_OW 247
27603: PUSH
27604: LD_INT 1
27606: EQUAL
27607: IFFALSE 27624
// factory := IsInUnit ( factory ) ;
27609: LD_ADDR_VAR 0 1
27613: PUSH
27614: LD_VAR 0 1
27618: PPUSH
27619: CALL_OW 310
27623: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
27624: LD_VAR 0 1
27628: PPUSH
27629: CALL_OW 266
27633: PUSH
27634: LD_INT 3
27636: NONEQUAL
27637: IFFALSE 27641
// exit ;
27639: GO 27743
// if HexInfo ( x , y ) = factory then
27641: LD_VAR 0 2
27645: PPUSH
27646: LD_VAR 0 3
27650: PPUSH
27651: CALL_OW 428
27655: PUSH
27656: LD_VAR 0 1
27660: EQUAL
27661: IFFALSE 27688
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
27663: LD_ADDR_EXP 91
27667: PUSH
27668: LD_EXP 91
27672: PPUSH
27673: LD_VAR 0 1
27677: PPUSH
27678: LD_INT 0
27680: PPUSH
27681: CALL_OW 1
27685: ST_TO_ADDR
27686: GO 27739
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
27688: LD_ADDR_EXP 91
27692: PUSH
27693: LD_EXP 91
27697: PPUSH
27698: LD_VAR 0 1
27702: PPUSH
27703: LD_VAR 0 1
27707: PPUSH
27708: CALL_OW 255
27712: PUSH
27713: LD_VAR 0 1
27717: PUSH
27718: LD_VAR 0 2
27722: PUSH
27723: LD_VAR 0 3
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: PPUSH
27734: CALL_OW 1
27738: ST_TO_ADDR
// UpdateFactoryWaypoints ;
27739: CALL 27748 0 0
// end ;
27743: LD_VAR 0 4
27747: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
27748: LD_INT 0
27750: PPUSH
27751: PPUSH
27752: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
27753: LD_STRING resetFactoryWaypoint();
27755: PPUSH
27756: CALL_OW 559
// if factoryWaypoints then
27760: LD_EXP 91
27764: IFFALSE 27890
// begin list := PrepareArray ( factoryWaypoints ) ;
27766: LD_ADDR_VAR 0 3
27770: PUSH
27771: LD_EXP 91
27775: PPUSH
27776: CALL 75187 0 1
27780: ST_TO_ADDR
// for i := 1 to list do
27781: LD_ADDR_VAR 0 2
27785: PUSH
27786: DOUBLE
27787: LD_INT 1
27789: DEC
27790: ST_TO_ADDR
27791: LD_VAR 0 3
27795: PUSH
27796: FOR_TO
27797: IFFALSE 27888
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27799: LD_STRING setFactoryWaypointXY(
27801: PUSH
27802: LD_VAR 0 3
27806: PUSH
27807: LD_VAR 0 2
27811: ARRAY
27812: PUSH
27813: LD_INT 1
27815: ARRAY
27816: STR
27817: PUSH
27818: LD_STRING ,
27820: STR
27821: PUSH
27822: LD_VAR 0 3
27826: PUSH
27827: LD_VAR 0 2
27831: ARRAY
27832: PUSH
27833: LD_INT 2
27835: ARRAY
27836: STR
27837: PUSH
27838: LD_STRING ,
27840: STR
27841: PUSH
27842: LD_VAR 0 3
27846: PUSH
27847: LD_VAR 0 2
27851: ARRAY
27852: PUSH
27853: LD_INT 3
27855: ARRAY
27856: STR
27857: PUSH
27858: LD_STRING ,
27860: STR
27861: PUSH
27862: LD_VAR 0 3
27866: PUSH
27867: LD_VAR 0 2
27871: ARRAY
27872: PUSH
27873: LD_INT 4
27875: ARRAY
27876: STR
27877: PUSH
27878: LD_STRING )
27880: STR
27881: PPUSH
27882: CALL_OW 559
27886: GO 27796
27888: POP
27889: POP
// end ; end ;
27890: LD_VAR 0 1
27894: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
27895: LD_INT 0
27897: PPUSH
// if HexInfo ( x , y ) = warehouse then
27898: LD_VAR 0 2
27902: PPUSH
27903: LD_VAR 0 3
27907: PPUSH
27908: CALL_OW 428
27912: PUSH
27913: LD_VAR 0 1
27917: EQUAL
27918: IFFALSE 27945
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
27920: LD_ADDR_EXP 92
27924: PUSH
27925: LD_EXP 92
27929: PPUSH
27930: LD_VAR 0 1
27934: PPUSH
27935: LD_INT 0
27937: PPUSH
27938: CALL_OW 1
27942: ST_TO_ADDR
27943: GO 27996
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
27945: LD_ADDR_EXP 92
27949: PUSH
27950: LD_EXP 92
27954: PPUSH
27955: LD_VAR 0 1
27959: PPUSH
27960: LD_VAR 0 1
27964: PPUSH
27965: CALL_OW 255
27969: PUSH
27970: LD_VAR 0 1
27974: PUSH
27975: LD_VAR 0 2
27979: PUSH
27980: LD_VAR 0 3
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: LIST
27989: LIST
27990: PPUSH
27991: CALL_OW 1
27995: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
27996: CALL 28005 0 0
// end ;
28000: LD_VAR 0 4
28004: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
28005: LD_INT 0
28007: PPUSH
28008: PPUSH
28009: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
28010: LD_STRING resetWarehouseGatheringPoints();
28012: PPUSH
28013: CALL_OW 559
// if warehouseGatheringPoints then
28017: LD_EXP 92
28021: IFFALSE 28147
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
28023: LD_ADDR_VAR 0 3
28027: PUSH
28028: LD_EXP 92
28032: PPUSH
28033: CALL 75187 0 1
28037: ST_TO_ADDR
// for i := 1 to list do
28038: LD_ADDR_VAR 0 2
28042: PUSH
28043: DOUBLE
28044: LD_INT 1
28046: DEC
28047: ST_TO_ADDR
28048: LD_VAR 0 3
28052: PUSH
28053: FOR_TO
28054: IFFALSE 28145
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
28056: LD_STRING setWarehouseGatheringPointXY(
28058: PUSH
28059: LD_VAR 0 3
28063: PUSH
28064: LD_VAR 0 2
28068: ARRAY
28069: PUSH
28070: LD_INT 1
28072: ARRAY
28073: STR
28074: PUSH
28075: LD_STRING ,
28077: STR
28078: PUSH
28079: LD_VAR 0 3
28083: PUSH
28084: LD_VAR 0 2
28088: ARRAY
28089: PUSH
28090: LD_INT 2
28092: ARRAY
28093: STR
28094: PUSH
28095: LD_STRING ,
28097: STR
28098: PUSH
28099: LD_VAR 0 3
28103: PUSH
28104: LD_VAR 0 2
28108: ARRAY
28109: PUSH
28110: LD_INT 3
28112: ARRAY
28113: STR
28114: PUSH
28115: LD_STRING ,
28117: STR
28118: PUSH
28119: LD_VAR 0 3
28123: PUSH
28124: LD_VAR 0 2
28128: ARRAY
28129: PUSH
28130: LD_INT 4
28132: ARRAY
28133: STR
28134: PUSH
28135: LD_STRING )
28137: STR
28138: PPUSH
28139: CALL_OW 559
28143: GO 28053
28145: POP
28146: POP
// end ; end ;
28147: LD_VAR 0 1
28151: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
28152: LD_EXP 92
28156: IFFALSE 28841
28158: GO 28160
28160: DISABLE
28161: LD_INT 0
28163: PPUSH
28164: PPUSH
28165: PPUSH
28166: PPUSH
28167: PPUSH
28168: PPUSH
28169: PPUSH
28170: PPUSH
28171: PPUSH
// begin enable ;
28172: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
28173: LD_ADDR_VAR 0 3
28177: PUSH
28178: LD_EXP 92
28182: PPUSH
28183: CALL 75187 0 1
28187: ST_TO_ADDR
// if not list then
28188: LD_VAR 0 3
28192: NOT
28193: IFFALSE 28197
// exit ;
28195: GO 28841
// for i := 1 to list do
28197: LD_ADDR_VAR 0 1
28201: PUSH
28202: DOUBLE
28203: LD_INT 1
28205: DEC
28206: ST_TO_ADDR
28207: LD_VAR 0 3
28211: PUSH
28212: FOR_TO
28213: IFFALSE 28839
// begin depot := list [ i ] [ 2 ] ;
28215: LD_ADDR_VAR 0 8
28219: PUSH
28220: LD_VAR 0 3
28224: PUSH
28225: LD_VAR 0 1
28229: ARRAY
28230: PUSH
28231: LD_INT 2
28233: ARRAY
28234: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
28235: LD_ADDR_VAR 0 5
28239: PUSH
28240: LD_VAR 0 3
28244: PUSH
28245: LD_VAR 0 1
28249: ARRAY
28250: PUSH
28251: LD_INT 1
28253: ARRAY
28254: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
28255: LD_VAR 0 8
28259: PPUSH
28260: CALL_OW 301
28264: PUSH
28265: LD_VAR 0 5
28269: PUSH
28270: LD_VAR 0 8
28274: PPUSH
28275: CALL_OW 255
28279: NONEQUAL
28280: OR
28281: IFFALSE 28310
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
28283: LD_ADDR_EXP 92
28287: PUSH
28288: LD_EXP 92
28292: PPUSH
28293: LD_VAR 0 8
28297: PPUSH
28298: LD_INT 0
28300: PPUSH
28301: CALL_OW 1
28305: ST_TO_ADDR
// exit ;
28306: POP
28307: POP
28308: GO 28841
// end ; x := list [ i ] [ 3 ] ;
28310: LD_ADDR_VAR 0 6
28314: PUSH
28315: LD_VAR 0 3
28319: PUSH
28320: LD_VAR 0 1
28324: ARRAY
28325: PUSH
28326: LD_INT 3
28328: ARRAY
28329: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
28330: LD_ADDR_VAR 0 7
28334: PUSH
28335: LD_VAR 0 3
28339: PUSH
28340: LD_VAR 0 1
28344: ARRAY
28345: PUSH
28346: LD_INT 4
28348: ARRAY
28349: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
28350: LD_ADDR_VAR 0 9
28354: PUSH
28355: LD_VAR 0 6
28359: PPUSH
28360: LD_VAR 0 7
28364: PPUSH
28365: LD_INT 16
28367: PPUSH
28368: CALL 73775 0 3
28372: ST_TO_ADDR
// if not cratesNearbyPoint then
28373: LD_VAR 0 9
28377: NOT
28378: IFFALSE 28384
// exit ;
28380: POP
28381: POP
28382: GO 28841
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
28384: LD_ADDR_VAR 0 4
28388: PUSH
28389: LD_INT 22
28391: PUSH
28392: LD_VAR 0 5
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: LD_INT 3
28403: PUSH
28404: LD_INT 60
28406: PUSH
28407: EMPTY
28408: LIST
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: PUSH
28414: LD_INT 91
28416: PUSH
28417: LD_VAR 0 8
28421: PUSH
28422: LD_INT 6
28424: PUSH
28425: EMPTY
28426: LIST
28427: LIST
28428: LIST
28429: PUSH
28430: LD_INT 2
28432: PUSH
28433: LD_INT 25
28435: PUSH
28436: LD_INT 2
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: LD_INT 25
28445: PUSH
28446: LD_INT 16
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: LIST
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: PPUSH
28464: CALL_OW 69
28468: PUSH
28469: LD_VAR 0 8
28473: PPUSH
28474: CALL_OW 313
28478: PPUSH
28479: LD_INT 3
28481: PUSH
28482: LD_INT 60
28484: PUSH
28485: EMPTY
28486: LIST
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: LD_INT 2
28494: PUSH
28495: LD_INT 25
28497: PUSH
28498: LD_INT 2
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: PUSH
28505: LD_INT 25
28507: PUSH
28508: LD_INT 16
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: LIST
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: PPUSH
28524: CALL_OW 72
28528: UNION
28529: ST_TO_ADDR
// if tmp then
28530: LD_VAR 0 4
28534: IFFALSE 28614
// begin tmp := ShrinkArray ( tmp , 3 ) ;
28536: LD_ADDR_VAR 0 4
28540: PUSH
28541: LD_VAR 0 4
28545: PPUSH
28546: LD_INT 3
28548: PPUSH
28549: CALL 71744 0 2
28553: ST_TO_ADDR
// for j in tmp do
28554: LD_ADDR_VAR 0 2
28558: PUSH
28559: LD_VAR 0 4
28563: PUSH
28564: FOR_IN
28565: IFFALSE 28608
// begin if IsInUnit ( j ) then
28567: LD_VAR 0 2
28571: PPUSH
28572: CALL_OW 310
28576: IFFALSE 28587
// ComExit ( j ) ;
28578: LD_VAR 0 2
28582: PPUSH
28583: CALL 71827 0 1
// AddComCollect ( j , x , y ) ;
28587: LD_VAR 0 2
28591: PPUSH
28592: LD_VAR 0 6
28596: PPUSH
28597: LD_VAR 0 7
28601: PPUSH
28602: CALL_OW 177
// end ;
28606: GO 28564
28608: POP
28609: POP
// exit ;
28610: POP
28611: POP
28612: GO 28841
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
28614: LD_ADDR_VAR 0 4
28618: PUSH
28619: LD_INT 22
28621: PUSH
28622: LD_VAR 0 5
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: PUSH
28631: LD_INT 91
28633: PUSH
28634: LD_VAR 0 8
28638: PUSH
28639: LD_INT 8
28641: PUSH
28642: EMPTY
28643: LIST
28644: LIST
28645: LIST
28646: PUSH
28647: LD_INT 2
28649: PUSH
28650: LD_INT 34
28652: PUSH
28653: LD_INT 12
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: PUSH
28660: LD_INT 34
28662: PUSH
28663: LD_INT 51
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PUSH
28670: LD_INT 34
28672: PUSH
28673: LD_INT 32
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: PUSH
28680: LD_INT 34
28682: PUSH
28683: LD_INT 89
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: LIST
28694: LIST
28695: LIST
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: LIST
28701: PPUSH
28702: CALL_OW 69
28706: ST_TO_ADDR
// if tmp then
28707: LD_VAR 0 4
28711: IFFALSE 28837
// begin for j in tmp do
28713: LD_ADDR_VAR 0 2
28717: PUSH
28718: LD_VAR 0 4
28722: PUSH
28723: FOR_IN
28724: IFFALSE 28835
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
28726: LD_VAR 0 2
28730: PPUSH
28731: CALL_OW 262
28735: PUSH
28736: LD_INT 3
28738: EQUAL
28739: PUSH
28740: LD_VAR 0 2
28744: PPUSH
28745: CALL_OW 261
28749: PUSH
28750: LD_INT 20
28752: GREATER
28753: OR
28754: PUSH
28755: LD_VAR 0 2
28759: PPUSH
28760: CALL_OW 314
28764: NOT
28765: AND
28766: PUSH
28767: LD_VAR 0 2
28771: PPUSH
28772: CALL_OW 263
28776: PUSH
28777: LD_INT 1
28779: NONEQUAL
28780: PUSH
28781: LD_VAR 0 2
28785: PPUSH
28786: CALL_OW 311
28790: OR
28791: AND
28792: IFFALSE 28833
// begin ComCollect ( j , x , y ) ;
28794: LD_VAR 0 2
28798: PPUSH
28799: LD_VAR 0 6
28803: PPUSH
28804: LD_VAR 0 7
28808: PPUSH
28809: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
28813: LD_VAR 0 2
28817: PPUSH
28818: LD_VAR 0 8
28822: PPUSH
28823: CALL_OW 172
// exit ;
28827: POP
28828: POP
28829: POP
28830: POP
28831: GO 28841
// end ;
28833: GO 28723
28835: POP
28836: POP
// end ; end ;
28837: GO 28212
28839: POP
28840: POP
// end ; end_of_file
28841: PPOPN 9
28843: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
28844: LD_INT 0
28846: PPUSH
28847: PPUSH
28848: PPUSH
28849: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
28850: LD_VAR 0 1
28854: PPUSH
28855: CALL_OW 264
28859: PUSH
28860: LD_INT 91
28862: EQUAL
28863: IFFALSE 28935
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28865: LD_INT 68
28867: PPUSH
28868: LD_VAR 0 1
28872: PPUSH
28873: CALL_OW 255
28877: PPUSH
28878: CALL_OW 321
28882: PUSH
28883: LD_INT 2
28885: EQUAL
28886: IFFALSE 28898
// eff := 70 else
28888: LD_ADDR_VAR 0 4
28892: PUSH
28893: LD_INT 70
28895: ST_TO_ADDR
28896: GO 28906
// eff := 30 ;
28898: LD_ADDR_VAR 0 4
28902: PUSH
28903: LD_INT 30
28905: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28906: LD_VAR 0 1
28910: PPUSH
28911: CALL_OW 250
28915: PPUSH
28916: LD_VAR 0 1
28920: PPUSH
28921: CALL_OW 251
28925: PPUSH
28926: LD_VAR 0 4
28930: PPUSH
28931: CALL_OW 495
// end ; end ;
28935: LD_VAR 0 2
28939: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
28940: LD_INT 0
28942: PPUSH
// end ;
28943: LD_VAR 0 4
28947: RET
// export function SOS_Command ( cmd ) ; begin
28948: LD_INT 0
28950: PPUSH
// end ;
28951: LD_VAR 0 2
28955: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
28956: LD_INT 0
28958: PPUSH
// end ;
28959: LD_VAR 0 6
28963: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
28964: LD_INT 0
28966: PPUSH
28967: PPUSH
// if not vehicle or not factory then
28968: LD_VAR 0 1
28972: NOT
28973: PUSH
28974: LD_VAR 0 2
28978: NOT
28979: OR
28980: IFFALSE 28984
// exit ;
28982: GO 29215
// if factoryWaypoints >= factory then
28984: LD_EXP 91
28988: PUSH
28989: LD_VAR 0 2
28993: GREATEREQUAL
28994: IFFALSE 29215
// if factoryWaypoints [ factory ] then
28996: LD_EXP 91
29000: PUSH
29001: LD_VAR 0 2
29005: ARRAY
29006: IFFALSE 29215
// begin if GetControl ( vehicle ) = control_manual then
29008: LD_VAR 0 1
29012: PPUSH
29013: CALL_OW 263
29017: PUSH
29018: LD_INT 1
29020: EQUAL
29021: IFFALSE 29102
// begin driver := IsDrivenBy ( vehicle ) ;
29023: LD_ADDR_VAR 0 4
29027: PUSH
29028: LD_VAR 0 1
29032: PPUSH
29033: CALL_OW 311
29037: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
29038: LD_VAR 0 4
29042: PPUSH
29043: LD_EXP 91
29047: PUSH
29048: LD_VAR 0 2
29052: ARRAY
29053: PUSH
29054: LD_INT 3
29056: ARRAY
29057: PPUSH
29058: LD_EXP 91
29062: PUSH
29063: LD_VAR 0 2
29067: ARRAY
29068: PUSH
29069: LD_INT 4
29071: ARRAY
29072: PPUSH
29073: CALL_OW 171
// AddComExitVehicle ( driver ) ;
29077: LD_VAR 0 4
29081: PPUSH
29082: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
29086: LD_VAR 0 4
29090: PPUSH
29091: LD_VAR 0 2
29095: PPUSH
29096: CALL_OW 180
// end else
29100: GO 29215
// if GetControl ( vehicle ) = control_remote then
29102: LD_VAR 0 1
29106: PPUSH
29107: CALL_OW 263
29111: PUSH
29112: LD_INT 2
29114: EQUAL
29115: IFFALSE 29176
// begin wait ( 0 0$2 ) ;
29117: LD_INT 70
29119: PPUSH
29120: CALL_OW 67
// if Connect ( vehicle ) then
29124: LD_VAR 0 1
29128: PPUSH
29129: CALL 42046 0 1
29133: IFFALSE 29174
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
29135: LD_VAR 0 1
29139: PPUSH
29140: LD_EXP 91
29144: PUSH
29145: LD_VAR 0 2
29149: ARRAY
29150: PUSH
29151: LD_INT 3
29153: ARRAY
29154: PPUSH
29155: LD_EXP 91
29159: PUSH
29160: LD_VAR 0 2
29164: ARRAY
29165: PUSH
29166: LD_INT 4
29168: ARRAY
29169: PPUSH
29170: CALL_OW 171
// end else
29174: GO 29215
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
29176: LD_VAR 0 1
29180: PPUSH
29181: LD_EXP 91
29185: PUSH
29186: LD_VAR 0 2
29190: ARRAY
29191: PUSH
29192: LD_INT 3
29194: ARRAY
29195: PPUSH
29196: LD_EXP 91
29200: PUSH
29201: LD_VAR 0 2
29205: ARRAY
29206: PUSH
29207: LD_INT 4
29209: ARRAY
29210: PPUSH
29211: CALL_OW 171
// end ; end ;
29215: LD_VAR 0 3
29219: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
29220: LD_INT 0
29222: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
29223: LD_VAR 0 1
29227: PUSH
29228: LD_INT 250
29230: EQUAL
29231: PUSH
29232: LD_VAR 0 2
29236: PPUSH
29237: CALL_OW 264
29241: PUSH
29242: LD_INT 81
29244: EQUAL
29245: AND
29246: IFFALSE 29267
// MinerPlaceMine ( unit , x , y ) ;
29248: LD_VAR 0 2
29252: PPUSH
29253: LD_VAR 0 4
29257: PPUSH
29258: LD_VAR 0 5
29262: PPUSH
29263: CALL 32257 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
29267: LD_VAR 0 1
29271: PUSH
29272: LD_INT 251
29274: EQUAL
29275: PUSH
29276: LD_VAR 0 2
29280: PPUSH
29281: CALL_OW 264
29285: PUSH
29286: LD_INT 81
29288: EQUAL
29289: AND
29290: IFFALSE 29311
// MinerDetonateMine ( unit , x , y ) ;
29292: LD_VAR 0 2
29296: PPUSH
29297: LD_VAR 0 4
29301: PPUSH
29302: LD_VAR 0 5
29306: PPUSH
29307: CALL 32532 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
29311: LD_VAR 0 1
29315: PUSH
29316: LD_INT 252
29318: EQUAL
29319: PUSH
29320: LD_VAR 0 2
29324: PPUSH
29325: CALL_OW 264
29329: PUSH
29330: LD_INT 81
29332: EQUAL
29333: AND
29334: IFFALSE 29355
// MinerCreateMinefield ( unit , x , y ) ;
29336: LD_VAR 0 2
29340: PPUSH
29341: LD_VAR 0 4
29345: PPUSH
29346: LD_VAR 0 5
29350: PPUSH
29351: CALL 32949 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
29355: LD_VAR 0 1
29359: PUSH
29360: LD_INT 253
29362: EQUAL
29363: PUSH
29364: LD_VAR 0 2
29368: PPUSH
29369: CALL_OW 257
29373: PUSH
29374: LD_INT 5
29376: EQUAL
29377: AND
29378: IFFALSE 29399
// ComBinocular ( unit , x , y ) ;
29380: LD_VAR 0 2
29384: PPUSH
29385: LD_VAR 0 4
29389: PPUSH
29390: LD_VAR 0 5
29394: PPUSH
29395: CALL 33318 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
29399: LD_VAR 0 1
29403: PUSH
29404: LD_INT 254
29406: EQUAL
29407: PUSH
29408: LD_VAR 0 2
29412: PPUSH
29413: CALL_OW 264
29417: PUSH
29418: LD_INT 99
29420: EQUAL
29421: AND
29422: PUSH
29423: LD_VAR 0 3
29427: PPUSH
29428: CALL_OW 263
29432: PUSH
29433: LD_INT 3
29435: EQUAL
29436: AND
29437: IFFALSE 29453
// HackDestroyVehicle ( unit , selectedUnit ) ;
29439: LD_VAR 0 2
29443: PPUSH
29444: LD_VAR 0 3
29448: PPUSH
29449: CALL 31621 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
29453: LD_VAR 0 1
29457: PUSH
29458: LD_INT 255
29460: EQUAL
29461: PUSH
29462: LD_VAR 0 2
29466: PPUSH
29467: CALL_OW 264
29471: PUSH
29472: LD_INT 14
29474: PUSH
29475: LD_INT 53
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: IN
29482: AND
29483: PUSH
29484: LD_VAR 0 4
29488: PPUSH
29489: LD_VAR 0 5
29493: PPUSH
29494: CALL_OW 488
29498: AND
29499: IFFALSE 29523
// CutTreeXYR ( unit , x , y , 12 ) ;
29501: LD_VAR 0 2
29505: PPUSH
29506: LD_VAR 0 4
29510: PPUSH
29511: LD_VAR 0 5
29515: PPUSH
29516: LD_INT 12
29518: PPUSH
29519: CALL 29618 0 4
// if cmd = 256 then
29523: LD_VAR 0 1
29527: PUSH
29528: LD_INT 256
29530: EQUAL
29531: IFFALSE 29552
// SetFactoryWaypoint ( unit , x , y ) ;
29533: LD_VAR 0 2
29537: PPUSH
29538: LD_VAR 0 4
29542: PPUSH
29543: LD_VAR 0 5
29547: PPUSH
29548: CALL 27533 0 3
// if cmd = 257 then
29552: LD_VAR 0 1
29556: PUSH
29557: LD_INT 257
29559: EQUAL
29560: IFFALSE 29581
// SetWarehouseGatheringPoint ( unit , x , y ) ;
29562: LD_VAR 0 2
29566: PPUSH
29567: LD_VAR 0 4
29571: PPUSH
29572: LD_VAR 0 5
29576: PPUSH
29577: CALL 27895 0 3
// if cmd = 258 then
29581: LD_VAR 0 1
29585: PUSH
29586: LD_INT 258
29588: EQUAL
29589: IFFALSE 29613
// BurnTreeXYR ( unit , x , y , 8 ) ;
29591: LD_VAR 0 2
29595: PPUSH
29596: LD_VAR 0 4
29600: PPUSH
29601: LD_VAR 0 5
29605: PPUSH
29606: LD_INT 8
29608: PPUSH
29609: CALL 30012 0 4
// end ;
29613: LD_VAR 0 6
29617: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
29618: LD_INT 0
29620: PPUSH
29621: PPUSH
29622: PPUSH
29623: PPUSH
29624: PPUSH
29625: PPUSH
29626: PPUSH
29627: PPUSH
29628: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
29629: LD_VAR 0 1
29633: PPUSH
29634: CALL_OW 302
29638: NOT
29639: PUSH
29640: LD_VAR 0 2
29644: PPUSH
29645: LD_VAR 0 3
29649: PPUSH
29650: CALL_OW 488
29654: NOT
29655: OR
29656: PUSH
29657: LD_VAR 0 4
29661: NOT
29662: OR
29663: IFFALSE 29667
// exit ;
29665: GO 30007
// list := [ ] ;
29667: LD_ADDR_VAR 0 13
29671: PUSH
29672: EMPTY
29673: ST_TO_ADDR
// if x - r < 0 then
29674: LD_VAR 0 2
29678: PUSH
29679: LD_VAR 0 4
29683: MINUS
29684: PUSH
29685: LD_INT 0
29687: LESS
29688: IFFALSE 29700
// min_x := 0 else
29690: LD_ADDR_VAR 0 7
29694: PUSH
29695: LD_INT 0
29697: ST_TO_ADDR
29698: GO 29716
// min_x := x - r ;
29700: LD_ADDR_VAR 0 7
29704: PUSH
29705: LD_VAR 0 2
29709: PUSH
29710: LD_VAR 0 4
29714: MINUS
29715: ST_TO_ADDR
// if y - r < 0 then
29716: LD_VAR 0 3
29720: PUSH
29721: LD_VAR 0 4
29725: MINUS
29726: PUSH
29727: LD_INT 0
29729: LESS
29730: IFFALSE 29742
// min_y := 0 else
29732: LD_ADDR_VAR 0 8
29736: PUSH
29737: LD_INT 0
29739: ST_TO_ADDR
29740: GO 29758
// min_y := y - r ;
29742: LD_ADDR_VAR 0 8
29746: PUSH
29747: LD_VAR 0 3
29751: PUSH
29752: LD_VAR 0 4
29756: MINUS
29757: ST_TO_ADDR
// max_x := x + r ;
29758: LD_ADDR_VAR 0 9
29762: PUSH
29763: LD_VAR 0 2
29767: PUSH
29768: LD_VAR 0 4
29772: PLUS
29773: ST_TO_ADDR
// max_y := y + r ;
29774: LD_ADDR_VAR 0 10
29778: PUSH
29779: LD_VAR 0 3
29783: PUSH
29784: LD_VAR 0 4
29788: PLUS
29789: ST_TO_ADDR
// for _x = min_x to max_x do
29790: LD_ADDR_VAR 0 11
29794: PUSH
29795: DOUBLE
29796: LD_VAR 0 7
29800: DEC
29801: ST_TO_ADDR
29802: LD_VAR 0 9
29806: PUSH
29807: FOR_TO
29808: IFFALSE 29925
// for _y = min_y to max_y do
29810: LD_ADDR_VAR 0 12
29814: PUSH
29815: DOUBLE
29816: LD_VAR 0 8
29820: DEC
29821: ST_TO_ADDR
29822: LD_VAR 0 10
29826: PUSH
29827: FOR_TO
29828: IFFALSE 29921
// begin if not ValidHex ( _x , _y ) then
29830: LD_VAR 0 11
29834: PPUSH
29835: LD_VAR 0 12
29839: PPUSH
29840: CALL_OW 488
29844: NOT
29845: IFFALSE 29849
// continue ;
29847: GO 29827
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29849: LD_VAR 0 11
29853: PPUSH
29854: LD_VAR 0 12
29858: PPUSH
29859: CALL_OW 351
29863: PUSH
29864: LD_VAR 0 11
29868: PPUSH
29869: LD_VAR 0 12
29873: PPUSH
29874: CALL_OW 554
29878: AND
29879: IFFALSE 29919
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29881: LD_ADDR_VAR 0 13
29885: PUSH
29886: LD_VAR 0 13
29890: PPUSH
29891: LD_VAR 0 13
29895: PUSH
29896: LD_INT 1
29898: PLUS
29899: PPUSH
29900: LD_VAR 0 11
29904: PUSH
29905: LD_VAR 0 12
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: PPUSH
29914: CALL_OW 2
29918: ST_TO_ADDR
// end ;
29919: GO 29827
29921: POP
29922: POP
29923: GO 29807
29925: POP
29926: POP
// if not list then
29927: LD_VAR 0 13
29931: NOT
29932: IFFALSE 29936
// exit ;
29934: GO 30007
// for i in list do
29936: LD_ADDR_VAR 0 6
29940: PUSH
29941: LD_VAR 0 13
29945: PUSH
29946: FOR_IN
29947: IFFALSE 30005
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
29949: LD_VAR 0 1
29953: PPUSH
29954: LD_STRING M
29956: PUSH
29957: LD_VAR 0 6
29961: PUSH
29962: LD_INT 1
29964: ARRAY
29965: PUSH
29966: LD_VAR 0 6
29970: PUSH
29971: LD_INT 2
29973: ARRAY
29974: PUSH
29975: LD_INT 0
29977: PUSH
29978: LD_INT 0
29980: PUSH
29981: LD_INT 0
29983: PUSH
29984: LD_INT 0
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: PUSH
29996: EMPTY
29997: LIST
29998: PPUSH
29999: CALL_OW 447
30003: GO 29946
30005: POP
30006: POP
// end ;
30007: LD_VAR 0 5
30011: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
30012: LD_INT 0
30014: PPUSH
30015: PPUSH
30016: PPUSH
30017: PPUSH
30018: PPUSH
30019: PPUSH
30020: PPUSH
30021: PPUSH
30022: PPUSH
30023: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
30024: LD_VAR 0 1
30028: PPUSH
30029: CALL_OW 302
30033: NOT
30034: PUSH
30035: LD_VAR 0 2
30039: PPUSH
30040: LD_VAR 0 3
30044: PPUSH
30045: CALL_OW 488
30049: NOT
30050: OR
30051: PUSH
30052: LD_VAR 0 4
30056: NOT
30057: OR
30058: IFFALSE 30062
// exit ;
30060: GO 30575
// list := [ ] ;
30062: LD_ADDR_VAR 0 13
30066: PUSH
30067: EMPTY
30068: ST_TO_ADDR
// if x - r < 0 then
30069: LD_VAR 0 2
30073: PUSH
30074: LD_VAR 0 4
30078: MINUS
30079: PUSH
30080: LD_INT 0
30082: LESS
30083: IFFALSE 30095
// min_x := 0 else
30085: LD_ADDR_VAR 0 7
30089: PUSH
30090: LD_INT 0
30092: ST_TO_ADDR
30093: GO 30111
// min_x := x - r ;
30095: LD_ADDR_VAR 0 7
30099: PUSH
30100: LD_VAR 0 2
30104: PUSH
30105: LD_VAR 0 4
30109: MINUS
30110: ST_TO_ADDR
// if y - r < 0 then
30111: LD_VAR 0 3
30115: PUSH
30116: LD_VAR 0 4
30120: MINUS
30121: PUSH
30122: LD_INT 0
30124: LESS
30125: IFFALSE 30137
// min_y := 0 else
30127: LD_ADDR_VAR 0 8
30131: PUSH
30132: LD_INT 0
30134: ST_TO_ADDR
30135: GO 30153
// min_y := y - r ;
30137: LD_ADDR_VAR 0 8
30141: PUSH
30142: LD_VAR 0 3
30146: PUSH
30147: LD_VAR 0 4
30151: MINUS
30152: ST_TO_ADDR
// max_x := x + r ;
30153: LD_ADDR_VAR 0 9
30157: PUSH
30158: LD_VAR 0 2
30162: PUSH
30163: LD_VAR 0 4
30167: PLUS
30168: ST_TO_ADDR
// max_y := y + r ;
30169: LD_ADDR_VAR 0 10
30173: PUSH
30174: LD_VAR 0 3
30178: PUSH
30179: LD_VAR 0 4
30183: PLUS
30184: ST_TO_ADDR
// for _x = min_x to max_x do
30185: LD_ADDR_VAR 0 11
30189: PUSH
30190: DOUBLE
30191: LD_VAR 0 7
30195: DEC
30196: ST_TO_ADDR
30197: LD_VAR 0 9
30201: PUSH
30202: FOR_TO
30203: IFFALSE 30320
// for _y = min_y to max_y do
30205: LD_ADDR_VAR 0 12
30209: PUSH
30210: DOUBLE
30211: LD_VAR 0 8
30215: DEC
30216: ST_TO_ADDR
30217: LD_VAR 0 10
30221: PUSH
30222: FOR_TO
30223: IFFALSE 30316
// begin if not ValidHex ( _x , _y ) then
30225: LD_VAR 0 11
30229: PPUSH
30230: LD_VAR 0 12
30234: PPUSH
30235: CALL_OW 488
30239: NOT
30240: IFFALSE 30244
// continue ;
30242: GO 30222
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
30244: LD_VAR 0 11
30248: PPUSH
30249: LD_VAR 0 12
30253: PPUSH
30254: CALL_OW 351
30258: PUSH
30259: LD_VAR 0 11
30263: PPUSH
30264: LD_VAR 0 12
30268: PPUSH
30269: CALL_OW 554
30273: AND
30274: IFFALSE 30314
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
30276: LD_ADDR_VAR 0 13
30280: PUSH
30281: LD_VAR 0 13
30285: PPUSH
30286: LD_VAR 0 13
30290: PUSH
30291: LD_INT 1
30293: PLUS
30294: PPUSH
30295: LD_VAR 0 11
30299: PUSH
30300: LD_VAR 0 12
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PPUSH
30309: CALL_OW 2
30313: ST_TO_ADDR
// end ;
30314: GO 30222
30316: POP
30317: POP
30318: GO 30202
30320: POP
30321: POP
// if not list then
30322: LD_VAR 0 13
30326: NOT
30327: IFFALSE 30331
// exit ;
30329: GO 30575
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
30331: LD_ADDR_VAR 0 13
30335: PUSH
30336: LD_VAR 0 1
30340: PPUSH
30341: LD_VAR 0 13
30345: PPUSH
30346: LD_INT 1
30348: PPUSH
30349: LD_INT 1
30351: PPUSH
30352: CALL 39188 0 4
30356: ST_TO_ADDR
// ComStop ( flame ) ;
30357: LD_VAR 0 1
30361: PPUSH
30362: CALL_OW 141
// for i in list do
30366: LD_ADDR_VAR 0 6
30370: PUSH
30371: LD_VAR 0 13
30375: PUSH
30376: FOR_IN
30377: IFFALSE 30408
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
30379: LD_VAR 0 1
30383: PPUSH
30384: LD_VAR 0 6
30388: PUSH
30389: LD_INT 1
30391: ARRAY
30392: PPUSH
30393: LD_VAR 0 6
30397: PUSH
30398: LD_INT 2
30400: ARRAY
30401: PPUSH
30402: CALL_OW 176
30406: GO 30376
30408: POP
30409: POP
// repeat wait ( 0 0$1 ) ;
30410: LD_INT 35
30412: PPUSH
30413: CALL_OW 67
// task := GetTaskList ( flame ) ;
30417: LD_ADDR_VAR 0 14
30421: PUSH
30422: LD_VAR 0 1
30426: PPUSH
30427: CALL_OW 437
30431: ST_TO_ADDR
// if not task then
30432: LD_VAR 0 14
30436: NOT
30437: IFFALSE 30441
// exit ;
30439: GO 30575
// if task [ 1 ] [ 1 ] <> | then
30441: LD_VAR 0 14
30445: PUSH
30446: LD_INT 1
30448: ARRAY
30449: PUSH
30450: LD_INT 1
30452: ARRAY
30453: PUSH
30454: LD_STRING |
30456: NONEQUAL
30457: IFFALSE 30461
// exit ;
30459: GO 30575
// _x := task [ 1 ] [ 2 ] ;
30461: LD_ADDR_VAR 0 11
30465: PUSH
30466: LD_VAR 0 14
30470: PUSH
30471: LD_INT 1
30473: ARRAY
30474: PUSH
30475: LD_INT 2
30477: ARRAY
30478: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
30479: LD_ADDR_VAR 0 12
30483: PUSH
30484: LD_VAR 0 14
30488: PUSH
30489: LD_INT 1
30491: ARRAY
30492: PUSH
30493: LD_INT 3
30495: ARRAY
30496: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
30497: LD_VAR 0 11
30501: PPUSH
30502: LD_VAR 0 12
30506: PPUSH
30507: CALL_OW 351
30511: NOT
30512: PUSH
30513: LD_VAR 0 11
30517: PPUSH
30518: LD_VAR 0 12
30522: PPUSH
30523: CALL_OW 554
30527: NOT
30528: OR
30529: IFFALSE 30563
// begin task := Delete ( task , 1 ) ;
30531: LD_ADDR_VAR 0 14
30535: PUSH
30536: LD_VAR 0 14
30540: PPUSH
30541: LD_INT 1
30543: PPUSH
30544: CALL_OW 3
30548: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
30549: LD_VAR 0 1
30553: PPUSH
30554: LD_VAR 0 14
30558: PPUSH
30559: CALL_OW 446
// end ; until not HasTask ( flame ) ;
30563: LD_VAR 0 1
30567: PPUSH
30568: CALL_OW 314
30572: NOT
30573: IFFALSE 30410
// end ;
30575: LD_VAR 0 5
30579: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
30580: LD_EXP 94
30584: NOT
30585: IFFALSE 30635
30587: GO 30589
30589: DISABLE
// begin initHack := true ;
30590: LD_ADDR_EXP 94
30594: PUSH
30595: LD_INT 1
30597: ST_TO_ADDR
// hackTanks := [ ] ;
30598: LD_ADDR_EXP 95
30602: PUSH
30603: EMPTY
30604: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
30605: LD_ADDR_EXP 96
30609: PUSH
30610: EMPTY
30611: ST_TO_ADDR
// hackLimit := 3 ;
30612: LD_ADDR_EXP 97
30616: PUSH
30617: LD_INT 3
30619: ST_TO_ADDR
// hackDist := 12 ;
30620: LD_ADDR_EXP 98
30624: PUSH
30625: LD_INT 12
30627: ST_TO_ADDR
// hackCounter := [ ] ;
30628: LD_ADDR_EXP 99
30632: PUSH
30633: EMPTY
30634: ST_TO_ADDR
// end ;
30635: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
30636: LD_EXP 94
30640: PUSH
30641: LD_INT 34
30643: PUSH
30644: LD_INT 99
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PPUSH
30651: CALL_OW 69
30655: AND
30656: IFFALSE 30909
30658: GO 30660
30660: DISABLE
30661: LD_INT 0
30663: PPUSH
30664: PPUSH
// begin enable ;
30665: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
30666: LD_ADDR_VAR 0 1
30670: PUSH
30671: LD_INT 34
30673: PUSH
30674: LD_INT 99
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PPUSH
30681: CALL_OW 69
30685: PUSH
30686: FOR_IN
30687: IFFALSE 30907
// begin if not i in hackTanks then
30689: LD_VAR 0 1
30693: PUSH
30694: LD_EXP 95
30698: IN
30699: NOT
30700: IFFALSE 30783
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
30702: LD_ADDR_EXP 95
30706: PUSH
30707: LD_EXP 95
30711: PPUSH
30712: LD_EXP 95
30716: PUSH
30717: LD_INT 1
30719: PLUS
30720: PPUSH
30721: LD_VAR 0 1
30725: PPUSH
30726: CALL_OW 1
30730: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
30731: LD_ADDR_EXP 96
30735: PUSH
30736: LD_EXP 96
30740: PPUSH
30741: LD_EXP 96
30745: PUSH
30746: LD_INT 1
30748: PLUS
30749: PPUSH
30750: EMPTY
30751: PPUSH
30752: CALL_OW 1
30756: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
30757: LD_ADDR_EXP 99
30761: PUSH
30762: LD_EXP 99
30766: PPUSH
30767: LD_EXP 99
30771: PUSH
30772: LD_INT 1
30774: PLUS
30775: PPUSH
30776: EMPTY
30777: PPUSH
30778: CALL_OW 1
30782: ST_TO_ADDR
// end ; if not IsOk ( i ) then
30783: LD_VAR 0 1
30787: PPUSH
30788: CALL_OW 302
30792: NOT
30793: IFFALSE 30806
// begin HackUnlinkAll ( i ) ;
30795: LD_VAR 0 1
30799: PPUSH
30800: CALL 30912 0 1
// continue ;
30804: GO 30686
// end ; HackCheckCapturedStatus ( i ) ;
30806: LD_VAR 0 1
30810: PPUSH
30811: CALL 31355 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
30815: LD_ADDR_VAR 0 2
30819: PUSH
30820: LD_INT 81
30822: PUSH
30823: LD_VAR 0 1
30827: PPUSH
30828: CALL_OW 255
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: PUSH
30837: LD_INT 33
30839: PUSH
30840: LD_INT 3
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: PUSH
30847: LD_INT 91
30849: PUSH
30850: LD_VAR 0 1
30854: PUSH
30855: LD_EXP 98
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 50
30867: PUSH
30868: EMPTY
30869: LIST
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: LIST
30875: LIST
30876: PPUSH
30877: CALL_OW 69
30881: ST_TO_ADDR
// if not tmp then
30882: LD_VAR 0 2
30886: NOT
30887: IFFALSE 30891
// continue ;
30889: GO 30686
// HackLink ( i , tmp ) ;
30891: LD_VAR 0 1
30895: PPUSH
30896: LD_VAR 0 2
30900: PPUSH
30901: CALL 31048 0 2
// end ;
30905: GO 30686
30907: POP
30908: POP
// end ;
30909: PPOPN 2
30911: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
30912: LD_INT 0
30914: PPUSH
30915: PPUSH
30916: PPUSH
// if not hack in hackTanks then
30917: LD_VAR 0 1
30921: PUSH
30922: LD_EXP 95
30926: IN
30927: NOT
30928: IFFALSE 30932
// exit ;
30930: GO 31043
// index := GetElementIndex ( hackTanks , hack ) ;
30932: LD_ADDR_VAR 0 4
30936: PUSH
30937: LD_EXP 95
30941: PPUSH
30942: LD_VAR 0 1
30946: PPUSH
30947: CALL 38485 0 2
30951: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
30952: LD_EXP 96
30956: PUSH
30957: LD_VAR 0 4
30961: ARRAY
30962: IFFALSE 31043
// begin for i in hackTanksCaptured [ index ] do
30964: LD_ADDR_VAR 0 3
30968: PUSH
30969: LD_EXP 96
30973: PUSH
30974: LD_VAR 0 4
30978: ARRAY
30979: PUSH
30980: FOR_IN
30981: IFFALSE 31007
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
30983: LD_VAR 0 3
30987: PUSH
30988: LD_INT 1
30990: ARRAY
30991: PPUSH
30992: LD_VAR 0 3
30996: PUSH
30997: LD_INT 2
30999: ARRAY
31000: PPUSH
31001: CALL_OW 235
31005: GO 30980
31007: POP
31008: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
31009: LD_ADDR_EXP 96
31013: PUSH
31014: LD_EXP 96
31018: PPUSH
31019: LD_VAR 0 4
31023: PPUSH
31024: EMPTY
31025: PPUSH
31026: CALL_OW 1
31030: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
31031: LD_VAR 0 1
31035: PPUSH
31036: LD_INT 0
31038: PPUSH
31039: CALL_OW 505
// end ; end ;
31043: LD_VAR 0 2
31047: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
31048: LD_INT 0
31050: PPUSH
31051: PPUSH
31052: PPUSH
// if not hack in hackTanks or not vehicles then
31053: LD_VAR 0 1
31057: PUSH
31058: LD_EXP 95
31062: IN
31063: NOT
31064: PUSH
31065: LD_VAR 0 2
31069: NOT
31070: OR
31071: IFFALSE 31075
// exit ;
31073: GO 31350
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
31075: LD_ADDR_VAR 0 2
31079: PUSH
31080: LD_VAR 0 1
31084: PPUSH
31085: LD_VAR 0 2
31089: PPUSH
31090: LD_INT 1
31092: PPUSH
31093: LD_INT 1
31095: PPUSH
31096: CALL 39135 0 4
31100: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
31101: LD_ADDR_VAR 0 5
31105: PUSH
31106: LD_EXP 95
31110: PPUSH
31111: LD_VAR 0 1
31115: PPUSH
31116: CALL 38485 0 2
31120: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
31121: LD_EXP 96
31125: PUSH
31126: LD_VAR 0 5
31130: ARRAY
31131: PUSH
31132: LD_EXP 97
31136: LESS
31137: IFFALSE 31326
// begin for i := 1 to vehicles do
31139: LD_ADDR_VAR 0 4
31143: PUSH
31144: DOUBLE
31145: LD_INT 1
31147: DEC
31148: ST_TO_ADDR
31149: LD_VAR 0 2
31153: PUSH
31154: FOR_TO
31155: IFFALSE 31324
// begin if hackTanksCaptured [ index ] = hackLimit then
31157: LD_EXP 96
31161: PUSH
31162: LD_VAR 0 5
31166: ARRAY
31167: PUSH
31168: LD_EXP 97
31172: EQUAL
31173: IFFALSE 31177
// break ;
31175: GO 31324
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
31177: LD_ADDR_EXP 99
31181: PUSH
31182: LD_EXP 99
31186: PPUSH
31187: LD_VAR 0 5
31191: PPUSH
31192: LD_EXP 99
31196: PUSH
31197: LD_VAR 0 5
31201: ARRAY
31202: PUSH
31203: LD_INT 1
31205: PLUS
31206: PPUSH
31207: CALL_OW 1
31211: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
31212: LD_ADDR_EXP 96
31216: PUSH
31217: LD_EXP 96
31221: PPUSH
31222: LD_VAR 0 5
31226: PUSH
31227: LD_EXP 96
31231: PUSH
31232: LD_VAR 0 5
31236: ARRAY
31237: PUSH
31238: LD_INT 1
31240: PLUS
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PPUSH
31246: LD_VAR 0 2
31250: PUSH
31251: LD_VAR 0 4
31255: ARRAY
31256: PUSH
31257: LD_VAR 0 2
31261: PUSH
31262: LD_VAR 0 4
31266: ARRAY
31267: PPUSH
31268: CALL_OW 255
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: PPUSH
31277: CALL 38700 0 3
31281: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
31282: LD_VAR 0 2
31286: PUSH
31287: LD_VAR 0 4
31291: ARRAY
31292: PPUSH
31293: LD_VAR 0 1
31297: PPUSH
31298: CALL_OW 255
31302: PPUSH
31303: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
31307: LD_VAR 0 2
31311: PUSH
31312: LD_VAR 0 4
31316: ARRAY
31317: PPUSH
31318: CALL_OW 141
// end ;
31322: GO 31154
31324: POP
31325: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
31326: LD_VAR 0 1
31330: PPUSH
31331: LD_EXP 96
31335: PUSH
31336: LD_VAR 0 5
31340: ARRAY
31341: PUSH
31342: LD_INT 0
31344: PLUS
31345: PPUSH
31346: CALL_OW 505
// end ;
31350: LD_VAR 0 3
31354: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
31355: LD_INT 0
31357: PPUSH
31358: PPUSH
31359: PPUSH
31360: PPUSH
// if not hack in hackTanks then
31361: LD_VAR 0 1
31365: PUSH
31366: LD_EXP 95
31370: IN
31371: NOT
31372: IFFALSE 31376
// exit ;
31374: GO 31616
// index := GetElementIndex ( hackTanks , hack ) ;
31376: LD_ADDR_VAR 0 4
31380: PUSH
31381: LD_EXP 95
31385: PPUSH
31386: LD_VAR 0 1
31390: PPUSH
31391: CALL 38485 0 2
31395: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
31396: LD_ADDR_VAR 0 3
31400: PUSH
31401: DOUBLE
31402: LD_EXP 96
31406: PUSH
31407: LD_VAR 0 4
31411: ARRAY
31412: INC
31413: ST_TO_ADDR
31414: LD_INT 1
31416: PUSH
31417: FOR_DOWNTO
31418: IFFALSE 31590
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
31420: LD_ADDR_VAR 0 5
31424: PUSH
31425: LD_EXP 96
31429: PUSH
31430: LD_VAR 0 4
31434: ARRAY
31435: PUSH
31436: LD_VAR 0 3
31440: ARRAY
31441: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
31442: LD_VAR 0 5
31446: PUSH
31447: LD_INT 1
31449: ARRAY
31450: PPUSH
31451: CALL_OW 302
31455: NOT
31456: PUSH
31457: LD_VAR 0 5
31461: PUSH
31462: LD_INT 1
31464: ARRAY
31465: PPUSH
31466: CALL_OW 255
31470: PUSH
31471: LD_VAR 0 1
31475: PPUSH
31476: CALL_OW 255
31480: NONEQUAL
31481: OR
31482: IFFALSE 31588
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
31484: LD_VAR 0 5
31488: PUSH
31489: LD_INT 1
31491: ARRAY
31492: PPUSH
31493: CALL_OW 305
31497: PUSH
31498: LD_VAR 0 5
31502: PUSH
31503: LD_INT 1
31505: ARRAY
31506: PPUSH
31507: CALL_OW 255
31511: PUSH
31512: LD_VAR 0 1
31516: PPUSH
31517: CALL_OW 255
31521: EQUAL
31522: AND
31523: IFFALSE 31547
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
31525: LD_VAR 0 5
31529: PUSH
31530: LD_INT 1
31532: ARRAY
31533: PPUSH
31534: LD_VAR 0 5
31538: PUSH
31539: LD_INT 2
31541: ARRAY
31542: PPUSH
31543: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
31547: LD_ADDR_EXP 96
31551: PUSH
31552: LD_EXP 96
31556: PPUSH
31557: LD_VAR 0 4
31561: PPUSH
31562: LD_EXP 96
31566: PUSH
31567: LD_VAR 0 4
31571: ARRAY
31572: PPUSH
31573: LD_VAR 0 3
31577: PPUSH
31578: CALL_OW 3
31582: PPUSH
31583: CALL_OW 1
31587: ST_TO_ADDR
// end ; end ;
31588: GO 31417
31590: POP
31591: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
31592: LD_VAR 0 1
31596: PPUSH
31597: LD_EXP 96
31601: PUSH
31602: LD_VAR 0 4
31606: ARRAY
31607: PUSH
31608: LD_INT 0
31610: PLUS
31611: PPUSH
31612: CALL_OW 505
// end ;
31616: LD_VAR 0 2
31620: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
31621: LD_INT 0
31623: PPUSH
31624: PPUSH
31625: PPUSH
31626: PPUSH
// if not hack in hackTanks then
31627: LD_VAR 0 1
31631: PUSH
31632: LD_EXP 95
31636: IN
31637: NOT
31638: IFFALSE 31642
// exit ;
31640: GO 31727
// index := GetElementIndex ( hackTanks , hack ) ;
31642: LD_ADDR_VAR 0 5
31646: PUSH
31647: LD_EXP 95
31651: PPUSH
31652: LD_VAR 0 1
31656: PPUSH
31657: CALL 38485 0 2
31661: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
31662: LD_ADDR_VAR 0 4
31666: PUSH
31667: DOUBLE
31668: LD_INT 1
31670: DEC
31671: ST_TO_ADDR
31672: LD_EXP 96
31676: PUSH
31677: LD_VAR 0 5
31681: ARRAY
31682: PUSH
31683: FOR_TO
31684: IFFALSE 31725
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
31686: LD_EXP 96
31690: PUSH
31691: LD_VAR 0 5
31695: ARRAY
31696: PUSH
31697: LD_VAR 0 4
31701: ARRAY
31702: PUSH
31703: LD_INT 1
31705: ARRAY
31706: PUSH
31707: LD_VAR 0 2
31711: EQUAL
31712: IFFALSE 31723
// KillUnit ( vehicle ) ;
31714: LD_VAR 0 2
31718: PPUSH
31719: CALL_OW 66
31723: GO 31683
31725: POP
31726: POP
// end ;
31727: LD_VAR 0 3
31731: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
31732: LD_EXP 100
31736: NOT
31737: IFFALSE 31772
31739: GO 31741
31741: DISABLE
// begin initMiner := true ;
31742: LD_ADDR_EXP 100
31746: PUSH
31747: LD_INT 1
31749: ST_TO_ADDR
// minersList := [ ] ;
31750: LD_ADDR_EXP 101
31754: PUSH
31755: EMPTY
31756: ST_TO_ADDR
// minerMinesList := [ ] ;
31757: LD_ADDR_EXP 102
31761: PUSH
31762: EMPTY
31763: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
31764: LD_ADDR_EXP 103
31768: PUSH
31769: LD_INT 5
31771: ST_TO_ADDR
// end ;
31772: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
31773: LD_EXP 100
31777: PUSH
31778: LD_INT 34
31780: PUSH
31781: LD_INT 81
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: PPUSH
31788: CALL_OW 69
31792: AND
31793: IFFALSE 32254
31795: GO 31797
31797: DISABLE
31798: LD_INT 0
31800: PPUSH
31801: PPUSH
31802: PPUSH
31803: PPUSH
// begin enable ;
31804: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
31805: LD_ADDR_VAR 0 1
31809: PUSH
31810: LD_INT 34
31812: PUSH
31813: LD_INT 81
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PPUSH
31820: CALL_OW 69
31824: PUSH
31825: FOR_IN
31826: IFFALSE 31898
// begin if not i in minersList then
31828: LD_VAR 0 1
31832: PUSH
31833: LD_EXP 101
31837: IN
31838: NOT
31839: IFFALSE 31896
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
31841: LD_ADDR_EXP 101
31845: PUSH
31846: LD_EXP 101
31850: PPUSH
31851: LD_EXP 101
31855: PUSH
31856: LD_INT 1
31858: PLUS
31859: PPUSH
31860: LD_VAR 0 1
31864: PPUSH
31865: CALL_OW 1
31869: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
31870: LD_ADDR_EXP 102
31874: PUSH
31875: LD_EXP 102
31879: PPUSH
31880: LD_EXP 102
31884: PUSH
31885: LD_INT 1
31887: PLUS
31888: PPUSH
31889: EMPTY
31890: PPUSH
31891: CALL_OW 1
31895: ST_TO_ADDR
// end end ;
31896: GO 31825
31898: POP
31899: POP
// for i := minerMinesList downto 1 do
31900: LD_ADDR_VAR 0 1
31904: PUSH
31905: DOUBLE
31906: LD_EXP 102
31910: INC
31911: ST_TO_ADDR
31912: LD_INT 1
31914: PUSH
31915: FOR_DOWNTO
31916: IFFALSE 32252
// begin if IsLive ( minersList [ i ] ) then
31918: LD_EXP 101
31922: PUSH
31923: LD_VAR 0 1
31927: ARRAY
31928: PPUSH
31929: CALL_OW 300
31933: IFFALSE 31961
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
31935: LD_EXP 101
31939: PUSH
31940: LD_VAR 0 1
31944: ARRAY
31945: PPUSH
31946: LD_EXP 102
31950: PUSH
31951: LD_VAR 0 1
31955: ARRAY
31956: PPUSH
31957: CALL_OW 505
// if not minerMinesList [ i ] then
31961: LD_EXP 102
31965: PUSH
31966: LD_VAR 0 1
31970: ARRAY
31971: NOT
31972: IFFALSE 31976
// continue ;
31974: GO 31915
// for j := minerMinesList [ i ] downto 1 do
31976: LD_ADDR_VAR 0 2
31980: PUSH
31981: DOUBLE
31982: LD_EXP 102
31986: PUSH
31987: LD_VAR 0 1
31991: ARRAY
31992: INC
31993: ST_TO_ADDR
31994: LD_INT 1
31996: PUSH
31997: FOR_DOWNTO
31998: IFFALSE 32248
// begin side := GetSide ( minersList [ i ] ) ;
32000: LD_ADDR_VAR 0 3
32004: PUSH
32005: LD_EXP 101
32009: PUSH
32010: LD_VAR 0 1
32014: ARRAY
32015: PPUSH
32016: CALL_OW 255
32020: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
32021: LD_ADDR_VAR 0 4
32025: PUSH
32026: LD_EXP 102
32030: PUSH
32031: LD_VAR 0 1
32035: ARRAY
32036: PUSH
32037: LD_VAR 0 2
32041: ARRAY
32042: PUSH
32043: LD_INT 1
32045: ARRAY
32046: PPUSH
32047: LD_EXP 102
32051: PUSH
32052: LD_VAR 0 1
32056: ARRAY
32057: PUSH
32058: LD_VAR 0 2
32062: ARRAY
32063: PUSH
32064: LD_INT 2
32066: ARRAY
32067: PPUSH
32068: CALL_OW 428
32072: ST_TO_ADDR
// if not tmp then
32073: LD_VAR 0 4
32077: NOT
32078: IFFALSE 32082
// continue ;
32080: GO 31997
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
32082: LD_VAR 0 4
32086: PUSH
32087: LD_INT 81
32089: PUSH
32090: LD_VAR 0 3
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PPUSH
32099: CALL_OW 69
32103: IN
32104: PUSH
32105: LD_EXP 102
32109: PUSH
32110: LD_VAR 0 1
32114: ARRAY
32115: PUSH
32116: LD_VAR 0 2
32120: ARRAY
32121: PUSH
32122: LD_INT 1
32124: ARRAY
32125: PPUSH
32126: LD_EXP 102
32130: PUSH
32131: LD_VAR 0 1
32135: ARRAY
32136: PUSH
32137: LD_VAR 0 2
32141: ARRAY
32142: PUSH
32143: LD_INT 2
32145: ARRAY
32146: PPUSH
32147: CALL_OW 458
32151: AND
32152: IFFALSE 32246
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
32154: LD_EXP 102
32158: PUSH
32159: LD_VAR 0 1
32163: ARRAY
32164: PUSH
32165: LD_VAR 0 2
32169: ARRAY
32170: PUSH
32171: LD_INT 1
32173: ARRAY
32174: PPUSH
32175: LD_EXP 102
32179: PUSH
32180: LD_VAR 0 1
32184: ARRAY
32185: PUSH
32186: LD_VAR 0 2
32190: ARRAY
32191: PUSH
32192: LD_INT 2
32194: ARRAY
32195: PPUSH
32196: LD_VAR 0 3
32200: PPUSH
32201: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
32205: LD_ADDR_EXP 102
32209: PUSH
32210: LD_EXP 102
32214: PPUSH
32215: LD_VAR 0 1
32219: PPUSH
32220: LD_EXP 102
32224: PUSH
32225: LD_VAR 0 1
32229: ARRAY
32230: PPUSH
32231: LD_VAR 0 2
32235: PPUSH
32236: CALL_OW 3
32240: PPUSH
32241: CALL_OW 1
32245: ST_TO_ADDR
// end ; end ;
32246: GO 31997
32248: POP
32249: POP
// end ;
32250: GO 31915
32252: POP
32253: POP
// end ;
32254: PPOPN 4
32256: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
32257: LD_INT 0
32259: PPUSH
32260: PPUSH
// result := false ;
32261: LD_ADDR_VAR 0 4
32265: PUSH
32266: LD_INT 0
32268: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
32269: LD_VAR 0 1
32273: PPUSH
32274: CALL_OW 264
32278: PUSH
32279: LD_INT 81
32281: EQUAL
32282: NOT
32283: IFFALSE 32287
// exit ;
32285: GO 32527
// index := GetElementIndex ( minersList , unit ) ;
32287: LD_ADDR_VAR 0 5
32291: PUSH
32292: LD_EXP 101
32296: PPUSH
32297: LD_VAR 0 1
32301: PPUSH
32302: CALL 38485 0 2
32306: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
32307: LD_EXP 102
32311: PUSH
32312: LD_VAR 0 5
32316: ARRAY
32317: PUSH
32318: LD_EXP 103
32322: GREATEREQUAL
32323: IFFALSE 32327
// exit ;
32325: GO 32527
// ComMoveXY ( unit , x , y ) ;
32327: LD_VAR 0 1
32331: PPUSH
32332: LD_VAR 0 2
32336: PPUSH
32337: LD_VAR 0 3
32341: PPUSH
32342: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32346: LD_INT 35
32348: PPUSH
32349: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
32353: LD_VAR 0 1
32357: PPUSH
32358: LD_VAR 0 2
32362: PPUSH
32363: LD_VAR 0 3
32367: PPUSH
32368: CALL 70226 0 3
32372: NOT
32373: PUSH
32374: LD_VAR 0 1
32378: PPUSH
32379: CALL_OW 314
32383: AND
32384: IFFALSE 32388
// exit ;
32386: GO 32527
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
32388: LD_VAR 0 2
32392: PPUSH
32393: LD_VAR 0 3
32397: PPUSH
32398: CALL_OW 428
32402: PUSH
32403: LD_VAR 0 1
32407: EQUAL
32408: PUSH
32409: LD_VAR 0 1
32413: PPUSH
32414: CALL_OW 314
32418: NOT
32419: AND
32420: IFFALSE 32346
// PlaySoundXY ( x , y , PlantMine ) ;
32422: LD_VAR 0 2
32426: PPUSH
32427: LD_VAR 0 3
32431: PPUSH
32432: LD_STRING PlantMine
32434: PPUSH
32435: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
32439: LD_VAR 0 2
32443: PPUSH
32444: LD_VAR 0 3
32448: PPUSH
32449: LD_VAR 0 1
32453: PPUSH
32454: CALL_OW 255
32458: PPUSH
32459: LD_INT 0
32461: PPUSH
32462: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
32466: LD_ADDR_EXP 102
32470: PUSH
32471: LD_EXP 102
32475: PPUSH
32476: LD_VAR 0 5
32480: PUSH
32481: LD_EXP 102
32485: PUSH
32486: LD_VAR 0 5
32490: ARRAY
32491: PUSH
32492: LD_INT 1
32494: PLUS
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: PPUSH
32500: LD_VAR 0 2
32504: PUSH
32505: LD_VAR 0 3
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PPUSH
32514: CALL 38700 0 3
32518: ST_TO_ADDR
// result := true ;
32519: LD_ADDR_VAR 0 4
32523: PUSH
32524: LD_INT 1
32526: ST_TO_ADDR
// end ;
32527: LD_VAR 0 4
32531: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
32532: LD_INT 0
32534: PPUSH
32535: PPUSH
32536: PPUSH
// if not unit in minersList then
32537: LD_VAR 0 1
32541: PUSH
32542: LD_EXP 101
32546: IN
32547: NOT
32548: IFFALSE 32552
// exit ;
32550: GO 32944
// index := GetElementIndex ( minersList , unit ) ;
32552: LD_ADDR_VAR 0 6
32556: PUSH
32557: LD_EXP 101
32561: PPUSH
32562: LD_VAR 0 1
32566: PPUSH
32567: CALL 38485 0 2
32571: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
32572: LD_ADDR_VAR 0 5
32576: PUSH
32577: DOUBLE
32578: LD_EXP 102
32582: PUSH
32583: LD_VAR 0 6
32587: ARRAY
32588: INC
32589: ST_TO_ADDR
32590: LD_INT 1
32592: PUSH
32593: FOR_DOWNTO
32594: IFFALSE 32755
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
32596: LD_EXP 102
32600: PUSH
32601: LD_VAR 0 6
32605: ARRAY
32606: PUSH
32607: LD_VAR 0 5
32611: ARRAY
32612: PUSH
32613: LD_INT 1
32615: ARRAY
32616: PUSH
32617: LD_VAR 0 2
32621: EQUAL
32622: PUSH
32623: LD_EXP 102
32627: PUSH
32628: LD_VAR 0 6
32632: ARRAY
32633: PUSH
32634: LD_VAR 0 5
32638: ARRAY
32639: PUSH
32640: LD_INT 2
32642: ARRAY
32643: PUSH
32644: LD_VAR 0 3
32648: EQUAL
32649: AND
32650: IFFALSE 32753
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
32652: LD_EXP 102
32656: PUSH
32657: LD_VAR 0 6
32661: ARRAY
32662: PUSH
32663: LD_VAR 0 5
32667: ARRAY
32668: PUSH
32669: LD_INT 1
32671: ARRAY
32672: PPUSH
32673: LD_EXP 102
32677: PUSH
32678: LD_VAR 0 6
32682: ARRAY
32683: PUSH
32684: LD_VAR 0 5
32688: ARRAY
32689: PUSH
32690: LD_INT 2
32692: ARRAY
32693: PPUSH
32694: LD_VAR 0 1
32698: PPUSH
32699: CALL_OW 255
32703: PPUSH
32704: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32708: LD_ADDR_EXP 102
32712: PUSH
32713: LD_EXP 102
32717: PPUSH
32718: LD_VAR 0 6
32722: PPUSH
32723: LD_EXP 102
32727: PUSH
32728: LD_VAR 0 6
32732: ARRAY
32733: PPUSH
32734: LD_VAR 0 5
32738: PPUSH
32739: CALL_OW 3
32743: PPUSH
32744: CALL_OW 1
32748: ST_TO_ADDR
// exit ;
32749: POP
32750: POP
32751: GO 32944
// end ; end ;
32753: GO 32593
32755: POP
32756: POP
// for i := minerMinesList [ index ] downto 1 do
32757: LD_ADDR_VAR 0 5
32761: PUSH
32762: DOUBLE
32763: LD_EXP 102
32767: PUSH
32768: LD_VAR 0 6
32772: ARRAY
32773: INC
32774: ST_TO_ADDR
32775: LD_INT 1
32777: PUSH
32778: FOR_DOWNTO
32779: IFFALSE 32942
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
32781: LD_EXP 102
32785: PUSH
32786: LD_VAR 0 6
32790: ARRAY
32791: PUSH
32792: LD_VAR 0 5
32796: ARRAY
32797: PUSH
32798: LD_INT 1
32800: ARRAY
32801: PPUSH
32802: LD_EXP 102
32806: PUSH
32807: LD_VAR 0 6
32811: ARRAY
32812: PUSH
32813: LD_VAR 0 5
32817: ARRAY
32818: PUSH
32819: LD_INT 2
32821: ARRAY
32822: PPUSH
32823: LD_VAR 0 2
32827: PPUSH
32828: LD_VAR 0 3
32832: PPUSH
32833: CALL_OW 298
32837: PUSH
32838: LD_INT 6
32840: LESS
32841: IFFALSE 32940
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
32843: LD_EXP 102
32847: PUSH
32848: LD_VAR 0 6
32852: ARRAY
32853: PUSH
32854: LD_VAR 0 5
32858: ARRAY
32859: PUSH
32860: LD_INT 1
32862: ARRAY
32863: PPUSH
32864: LD_EXP 102
32868: PUSH
32869: LD_VAR 0 6
32873: ARRAY
32874: PUSH
32875: LD_VAR 0 5
32879: ARRAY
32880: PUSH
32881: LD_INT 2
32883: ARRAY
32884: PPUSH
32885: LD_VAR 0 1
32889: PPUSH
32890: CALL_OW 255
32894: PPUSH
32895: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32899: LD_ADDR_EXP 102
32903: PUSH
32904: LD_EXP 102
32908: PPUSH
32909: LD_VAR 0 6
32913: PPUSH
32914: LD_EXP 102
32918: PUSH
32919: LD_VAR 0 6
32923: ARRAY
32924: PPUSH
32925: LD_VAR 0 5
32929: PPUSH
32930: CALL_OW 3
32934: PPUSH
32935: CALL_OW 1
32939: ST_TO_ADDR
// end ; end ;
32940: GO 32778
32942: POP
32943: POP
// end ;
32944: LD_VAR 0 4
32948: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
32949: LD_INT 0
32951: PPUSH
32952: PPUSH
32953: PPUSH
32954: PPUSH
32955: PPUSH
32956: PPUSH
32957: PPUSH
32958: PPUSH
32959: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
32960: LD_VAR 0 1
32964: PPUSH
32965: CALL_OW 264
32969: PUSH
32970: LD_INT 81
32972: EQUAL
32973: NOT
32974: PUSH
32975: LD_VAR 0 1
32979: PUSH
32980: LD_EXP 101
32984: IN
32985: NOT
32986: OR
32987: IFFALSE 32991
// exit ;
32989: GO 33313
// index := GetElementIndex ( minersList , unit ) ;
32991: LD_ADDR_VAR 0 6
32995: PUSH
32996: LD_EXP 101
33000: PPUSH
33001: LD_VAR 0 1
33005: PPUSH
33006: CALL 38485 0 2
33010: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
33011: LD_ADDR_VAR 0 8
33015: PUSH
33016: LD_EXP 103
33020: PUSH
33021: LD_EXP 102
33025: PUSH
33026: LD_VAR 0 6
33030: ARRAY
33031: MINUS
33032: ST_TO_ADDR
// if not minesFreeAmount then
33033: LD_VAR 0 8
33037: NOT
33038: IFFALSE 33042
// exit ;
33040: GO 33313
// tmp := [ ] ;
33042: LD_ADDR_VAR 0 7
33046: PUSH
33047: EMPTY
33048: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
33049: LD_ADDR_VAR 0 5
33053: PUSH
33054: DOUBLE
33055: LD_INT 1
33057: DEC
33058: ST_TO_ADDR
33059: LD_VAR 0 8
33063: PUSH
33064: FOR_TO
33065: IFFALSE 33260
// begin _d := rand ( 0 , 5 ) ;
33067: LD_ADDR_VAR 0 11
33071: PUSH
33072: LD_INT 0
33074: PPUSH
33075: LD_INT 5
33077: PPUSH
33078: CALL_OW 12
33082: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
33083: LD_ADDR_VAR 0 12
33087: PUSH
33088: LD_INT 2
33090: PPUSH
33091: LD_INT 6
33093: PPUSH
33094: CALL_OW 12
33098: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
33099: LD_ADDR_VAR 0 9
33103: PUSH
33104: LD_VAR 0 2
33108: PPUSH
33109: LD_VAR 0 11
33113: PPUSH
33114: LD_VAR 0 12
33118: PPUSH
33119: CALL_OW 272
33123: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
33124: LD_ADDR_VAR 0 10
33128: PUSH
33129: LD_VAR 0 3
33133: PPUSH
33134: LD_VAR 0 11
33138: PPUSH
33139: LD_VAR 0 12
33143: PPUSH
33144: CALL_OW 273
33148: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
33149: LD_VAR 0 9
33153: PPUSH
33154: LD_VAR 0 10
33158: PPUSH
33159: CALL_OW 488
33163: PUSH
33164: LD_VAR 0 9
33168: PUSH
33169: LD_VAR 0 10
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: PUSH
33178: LD_VAR 0 7
33182: IN
33183: NOT
33184: AND
33185: PUSH
33186: LD_VAR 0 9
33190: PPUSH
33191: LD_VAR 0 10
33195: PPUSH
33196: CALL_OW 458
33200: NOT
33201: AND
33202: IFFALSE 33244
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
33204: LD_ADDR_VAR 0 7
33208: PUSH
33209: LD_VAR 0 7
33213: PPUSH
33214: LD_VAR 0 7
33218: PUSH
33219: LD_INT 1
33221: PLUS
33222: PPUSH
33223: LD_VAR 0 9
33227: PUSH
33228: LD_VAR 0 10
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PPUSH
33237: CALL_OW 1
33241: ST_TO_ADDR
33242: GO 33258
// i := i - 1 ;
33244: LD_ADDR_VAR 0 5
33248: PUSH
33249: LD_VAR 0 5
33253: PUSH
33254: LD_INT 1
33256: MINUS
33257: ST_TO_ADDR
// end ;
33258: GO 33064
33260: POP
33261: POP
// for i in tmp do
33262: LD_ADDR_VAR 0 5
33266: PUSH
33267: LD_VAR 0 7
33271: PUSH
33272: FOR_IN
33273: IFFALSE 33311
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
33275: LD_VAR 0 1
33279: PPUSH
33280: LD_VAR 0 5
33284: PUSH
33285: LD_INT 1
33287: ARRAY
33288: PPUSH
33289: LD_VAR 0 5
33293: PUSH
33294: LD_INT 2
33296: ARRAY
33297: PPUSH
33298: CALL 32257 0 3
33302: NOT
33303: IFFALSE 33309
// exit ;
33305: POP
33306: POP
33307: GO 33313
33309: GO 33272
33311: POP
33312: POP
// end ;
33313: LD_VAR 0 4
33317: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
33318: LD_INT 0
33320: PPUSH
33321: PPUSH
33322: PPUSH
33323: PPUSH
33324: PPUSH
33325: PPUSH
33326: PPUSH
// if not GetClass ( unit ) = class_sniper then
33327: LD_VAR 0 1
33331: PPUSH
33332: CALL_OW 257
33336: PUSH
33337: LD_INT 5
33339: EQUAL
33340: NOT
33341: IFFALSE 33345
// exit ;
33343: GO 33733
// dist := 8 ;
33345: LD_ADDR_VAR 0 5
33349: PUSH
33350: LD_INT 8
33352: ST_TO_ADDR
// viewRange := 12 ;
33353: LD_ADDR_VAR 0 7
33357: PUSH
33358: LD_INT 12
33360: ST_TO_ADDR
// side := GetSide ( unit ) ;
33361: LD_ADDR_VAR 0 6
33365: PUSH
33366: LD_VAR 0 1
33370: PPUSH
33371: CALL_OW 255
33375: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
33376: LD_INT 61
33378: PPUSH
33379: LD_VAR 0 6
33383: PPUSH
33384: CALL_OW 321
33388: PUSH
33389: LD_INT 2
33391: EQUAL
33392: IFFALSE 33402
// viewRange := 16 ;
33394: LD_ADDR_VAR 0 7
33398: PUSH
33399: LD_INT 16
33401: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
33402: LD_VAR 0 1
33406: PPUSH
33407: LD_VAR 0 2
33411: PPUSH
33412: LD_VAR 0 3
33416: PPUSH
33417: CALL_OW 297
33421: PUSH
33422: LD_VAR 0 5
33426: GREATER
33427: IFFALSE 33506
// begin ComMoveXY ( unit , x , y ) ;
33429: LD_VAR 0 1
33433: PPUSH
33434: LD_VAR 0 2
33438: PPUSH
33439: LD_VAR 0 3
33443: PPUSH
33444: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
33448: LD_INT 35
33450: PPUSH
33451: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
33455: LD_VAR 0 1
33459: PPUSH
33460: LD_VAR 0 2
33464: PPUSH
33465: LD_VAR 0 3
33469: PPUSH
33470: CALL 70226 0 3
33474: NOT
33475: IFFALSE 33479
// exit ;
33477: GO 33733
// until GetDistUnitXY ( unit , x , y ) < dist ;
33479: LD_VAR 0 1
33483: PPUSH
33484: LD_VAR 0 2
33488: PPUSH
33489: LD_VAR 0 3
33493: PPUSH
33494: CALL_OW 297
33498: PUSH
33499: LD_VAR 0 5
33503: LESS
33504: IFFALSE 33448
// end ; ComTurnXY ( unit , x , y ) ;
33506: LD_VAR 0 1
33510: PPUSH
33511: LD_VAR 0 2
33515: PPUSH
33516: LD_VAR 0 3
33520: PPUSH
33521: CALL_OW 118
// wait ( 5 ) ;
33525: LD_INT 5
33527: PPUSH
33528: CALL_OW 67
// _d := GetDir ( unit ) ;
33532: LD_ADDR_VAR 0 10
33536: PUSH
33537: LD_VAR 0 1
33541: PPUSH
33542: CALL_OW 254
33546: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
33547: LD_ADDR_VAR 0 8
33551: PUSH
33552: LD_VAR 0 1
33556: PPUSH
33557: CALL_OW 250
33561: PPUSH
33562: LD_VAR 0 10
33566: PPUSH
33567: LD_VAR 0 5
33571: PPUSH
33572: CALL_OW 272
33576: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
33577: LD_ADDR_VAR 0 9
33581: PUSH
33582: LD_VAR 0 1
33586: PPUSH
33587: CALL_OW 251
33591: PPUSH
33592: LD_VAR 0 10
33596: PPUSH
33597: LD_VAR 0 5
33601: PPUSH
33602: CALL_OW 273
33606: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33607: LD_VAR 0 8
33611: PPUSH
33612: LD_VAR 0 9
33616: PPUSH
33617: CALL_OW 488
33621: NOT
33622: IFFALSE 33626
// exit ;
33624: GO 33733
// ComAnimCustom ( unit , 1 ) ;
33626: LD_VAR 0 1
33630: PPUSH
33631: LD_INT 1
33633: PPUSH
33634: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
33638: LD_VAR 0 8
33642: PPUSH
33643: LD_VAR 0 9
33647: PPUSH
33648: LD_VAR 0 6
33652: PPUSH
33653: LD_VAR 0 7
33657: PPUSH
33658: CALL_OW 330
// repeat wait ( 1 ) ;
33662: LD_INT 1
33664: PPUSH
33665: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
33669: LD_VAR 0 1
33673: PPUSH
33674: CALL_OW 316
33678: PUSH
33679: LD_VAR 0 1
33683: PPUSH
33684: CALL_OW 314
33688: OR
33689: PUSH
33690: LD_VAR 0 1
33694: PPUSH
33695: CALL_OW 302
33699: NOT
33700: OR
33701: PUSH
33702: LD_VAR 0 1
33706: PPUSH
33707: CALL_OW 301
33711: OR
33712: IFFALSE 33662
// RemoveSeeing ( _x , _y , side ) ;
33714: LD_VAR 0 8
33718: PPUSH
33719: LD_VAR 0 9
33723: PPUSH
33724: LD_VAR 0 6
33728: PPUSH
33729: CALL_OW 331
// end ; end_of_file
33733: LD_VAR 0 4
33737: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
33738: LD_INT 0
33740: PPUSH
33741: PPUSH
// if exist_mode then
33742: LD_VAR 0 2
33746: IFFALSE 33771
// unit := CreateCharacter ( prefix & ident ) else
33748: LD_ADDR_VAR 0 5
33752: PUSH
33753: LD_VAR 0 3
33757: PUSH
33758: LD_VAR 0 1
33762: STR
33763: PPUSH
33764: CALL_OW 34
33768: ST_TO_ADDR
33769: GO 33786
// unit := NewCharacter ( ident ) ;
33771: LD_ADDR_VAR 0 5
33775: PUSH
33776: LD_VAR 0 1
33780: PPUSH
33781: CALL_OW 25
33785: ST_TO_ADDR
// result := unit ;
33786: LD_ADDR_VAR 0 4
33790: PUSH
33791: LD_VAR 0 5
33795: ST_TO_ADDR
// end ;
33796: LD_VAR 0 4
33800: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
33801: LD_INT 0
33803: PPUSH
33804: PPUSH
// if not side or not nation then
33805: LD_VAR 0 1
33809: NOT
33810: PUSH
33811: LD_VAR 0 2
33815: NOT
33816: OR
33817: IFFALSE 33821
// exit ;
33819: GO 34589
// case nation of nation_american :
33821: LD_VAR 0 2
33825: PUSH
33826: LD_INT 1
33828: DOUBLE
33829: EQUAL
33830: IFTRUE 33834
33832: GO 34048
33834: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
33835: LD_ADDR_VAR 0 4
33839: PUSH
33840: LD_INT 35
33842: PUSH
33843: LD_INT 45
33845: PUSH
33846: LD_INT 46
33848: PUSH
33849: LD_INT 47
33851: PUSH
33852: LD_INT 82
33854: PUSH
33855: LD_INT 83
33857: PUSH
33858: LD_INT 84
33860: PUSH
33861: LD_INT 85
33863: PUSH
33864: LD_INT 86
33866: PUSH
33867: LD_INT 1
33869: PUSH
33870: LD_INT 2
33872: PUSH
33873: LD_INT 6
33875: PUSH
33876: LD_INT 15
33878: PUSH
33879: LD_INT 16
33881: PUSH
33882: LD_INT 7
33884: PUSH
33885: LD_INT 12
33887: PUSH
33888: LD_INT 13
33890: PUSH
33891: LD_INT 10
33893: PUSH
33894: LD_INT 14
33896: PUSH
33897: LD_INT 20
33899: PUSH
33900: LD_INT 21
33902: PUSH
33903: LD_INT 22
33905: PUSH
33906: LD_INT 25
33908: PUSH
33909: LD_INT 32
33911: PUSH
33912: LD_INT 27
33914: PUSH
33915: LD_INT 36
33917: PUSH
33918: LD_INT 69
33920: PUSH
33921: LD_INT 39
33923: PUSH
33924: LD_INT 34
33926: PUSH
33927: LD_INT 40
33929: PUSH
33930: LD_INT 48
33932: PUSH
33933: LD_INT 49
33935: PUSH
33936: LD_INT 50
33938: PUSH
33939: LD_INT 51
33941: PUSH
33942: LD_INT 52
33944: PUSH
33945: LD_INT 53
33947: PUSH
33948: LD_INT 54
33950: PUSH
33951: LD_INT 55
33953: PUSH
33954: LD_INT 56
33956: PUSH
33957: LD_INT 57
33959: PUSH
33960: LD_INT 58
33962: PUSH
33963: LD_INT 59
33965: PUSH
33966: LD_INT 60
33968: PUSH
33969: LD_INT 61
33971: PUSH
33972: LD_INT 62
33974: PUSH
33975: LD_INT 80
33977: PUSH
33978: LD_INT 82
33980: PUSH
33981: LD_INT 83
33983: PUSH
33984: LD_INT 84
33986: PUSH
33987: LD_INT 85
33989: PUSH
33990: LD_INT 86
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: LIST
34035: LIST
34036: LIST
34037: LIST
34038: LIST
34039: LIST
34040: LIST
34041: LIST
34042: LIST
34043: LIST
34044: LIST
34045: ST_TO_ADDR
34046: GO 34513
34048: LD_INT 2
34050: DOUBLE
34051: EQUAL
34052: IFTRUE 34056
34054: GO 34282
34056: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
34057: LD_ADDR_VAR 0 4
34061: PUSH
34062: LD_INT 35
34064: PUSH
34065: LD_INT 45
34067: PUSH
34068: LD_INT 46
34070: PUSH
34071: LD_INT 47
34073: PUSH
34074: LD_INT 82
34076: PUSH
34077: LD_INT 83
34079: PUSH
34080: LD_INT 84
34082: PUSH
34083: LD_INT 85
34085: PUSH
34086: LD_INT 87
34088: PUSH
34089: LD_INT 70
34091: PUSH
34092: LD_INT 1
34094: PUSH
34095: LD_INT 11
34097: PUSH
34098: LD_INT 3
34100: PUSH
34101: LD_INT 4
34103: PUSH
34104: LD_INT 5
34106: PUSH
34107: LD_INT 6
34109: PUSH
34110: LD_INT 15
34112: PUSH
34113: LD_INT 18
34115: PUSH
34116: LD_INT 7
34118: PUSH
34119: LD_INT 17
34121: PUSH
34122: LD_INT 8
34124: PUSH
34125: LD_INT 20
34127: PUSH
34128: LD_INT 21
34130: PUSH
34131: LD_INT 22
34133: PUSH
34134: LD_INT 72
34136: PUSH
34137: LD_INT 26
34139: PUSH
34140: LD_INT 69
34142: PUSH
34143: LD_INT 39
34145: PUSH
34146: LD_INT 40
34148: PUSH
34149: LD_INT 41
34151: PUSH
34152: LD_INT 42
34154: PUSH
34155: LD_INT 43
34157: PUSH
34158: LD_INT 48
34160: PUSH
34161: LD_INT 49
34163: PUSH
34164: LD_INT 50
34166: PUSH
34167: LD_INT 51
34169: PUSH
34170: LD_INT 52
34172: PUSH
34173: LD_INT 53
34175: PUSH
34176: LD_INT 54
34178: PUSH
34179: LD_INT 55
34181: PUSH
34182: LD_INT 56
34184: PUSH
34185: LD_INT 60
34187: PUSH
34188: LD_INT 61
34190: PUSH
34191: LD_INT 62
34193: PUSH
34194: LD_INT 66
34196: PUSH
34197: LD_INT 67
34199: PUSH
34200: LD_INT 68
34202: PUSH
34203: LD_INT 81
34205: PUSH
34206: LD_INT 82
34208: PUSH
34209: LD_INT 83
34211: PUSH
34212: LD_INT 84
34214: PUSH
34215: LD_INT 85
34217: PUSH
34218: LD_INT 87
34220: PUSH
34221: LD_INT 88
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: ST_TO_ADDR
34280: GO 34513
34282: LD_INT 3
34284: DOUBLE
34285: EQUAL
34286: IFTRUE 34290
34288: GO 34512
34290: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
34291: LD_ADDR_VAR 0 4
34295: PUSH
34296: LD_INT 46
34298: PUSH
34299: LD_INT 47
34301: PUSH
34302: LD_INT 1
34304: PUSH
34305: LD_INT 2
34307: PUSH
34308: LD_INT 82
34310: PUSH
34311: LD_INT 83
34313: PUSH
34314: LD_INT 84
34316: PUSH
34317: LD_INT 85
34319: PUSH
34320: LD_INT 86
34322: PUSH
34323: LD_INT 11
34325: PUSH
34326: LD_INT 9
34328: PUSH
34329: LD_INT 20
34331: PUSH
34332: LD_INT 19
34334: PUSH
34335: LD_INT 21
34337: PUSH
34338: LD_INT 24
34340: PUSH
34341: LD_INT 22
34343: PUSH
34344: LD_INT 25
34346: PUSH
34347: LD_INT 28
34349: PUSH
34350: LD_INT 29
34352: PUSH
34353: LD_INT 30
34355: PUSH
34356: LD_INT 31
34358: PUSH
34359: LD_INT 37
34361: PUSH
34362: LD_INT 38
34364: PUSH
34365: LD_INT 32
34367: PUSH
34368: LD_INT 27
34370: PUSH
34371: LD_INT 33
34373: PUSH
34374: LD_INT 69
34376: PUSH
34377: LD_INT 39
34379: PUSH
34380: LD_INT 34
34382: PUSH
34383: LD_INT 40
34385: PUSH
34386: LD_INT 71
34388: PUSH
34389: LD_INT 23
34391: PUSH
34392: LD_INT 44
34394: PUSH
34395: LD_INT 48
34397: PUSH
34398: LD_INT 49
34400: PUSH
34401: LD_INT 50
34403: PUSH
34404: LD_INT 51
34406: PUSH
34407: LD_INT 52
34409: PUSH
34410: LD_INT 53
34412: PUSH
34413: LD_INT 54
34415: PUSH
34416: LD_INT 55
34418: PUSH
34419: LD_INT 56
34421: PUSH
34422: LD_INT 57
34424: PUSH
34425: LD_INT 58
34427: PUSH
34428: LD_INT 59
34430: PUSH
34431: LD_INT 63
34433: PUSH
34434: LD_INT 64
34436: PUSH
34437: LD_INT 65
34439: PUSH
34440: LD_INT 82
34442: PUSH
34443: LD_INT 83
34445: PUSH
34446: LD_INT 84
34448: PUSH
34449: LD_INT 85
34451: PUSH
34452: LD_INT 86
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: ST_TO_ADDR
34510: GO 34513
34512: POP
// if state > - 1 and state < 3 then
34513: LD_VAR 0 3
34517: PUSH
34518: LD_INT 1
34520: NEG
34521: GREATER
34522: PUSH
34523: LD_VAR 0 3
34527: PUSH
34528: LD_INT 3
34530: LESS
34531: AND
34532: IFFALSE 34589
// for i in result do
34534: LD_ADDR_VAR 0 5
34538: PUSH
34539: LD_VAR 0 4
34543: PUSH
34544: FOR_IN
34545: IFFALSE 34587
// if GetTech ( i , side ) <> state then
34547: LD_VAR 0 5
34551: PPUSH
34552: LD_VAR 0 1
34556: PPUSH
34557: CALL_OW 321
34561: PUSH
34562: LD_VAR 0 3
34566: NONEQUAL
34567: IFFALSE 34585
// result := result diff i ;
34569: LD_ADDR_VAR 0 4
34573: PUSH
34574: LD_VAR 0 4
34578: PUSH
34579: LD_VAR 0 5
34583: DIFF
34584: ST_TO_ADDR
34585: GO 34544
34587: POP
34588: POP
// end ;
34589: LD_VAR 0 4
34593: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
34594: LD_INT 0
34596: PPUSH
34597: PPUSH
34598: PPUSH
// result := true ;
34599: LD_ADDR_VAR 0 3
34603: PUSH
34604: LD_INT 1
34606: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
34607: LD_ADDR_VAR 0 5
34611: PUSH
34612: LD_VAR 0 2
34616: PPUSH
34617: CALL_OW 480
34621: ST_TO_ADDR
// if not tmp then
34622: LD_VAR 0 5
34626: NOT
34627: IFFALSE 34631
// exit ;
34629: GO 34680
// for i in tmp do
34631: LD_ADDR_VAR 0 4
34635: PUSH
34636: LD_VAR 0 5
34640: PUSH
34641: FOR_IN
34642: IFFALSE 34678
// if GetTech ( i , side ) <> state_researched then
34644: LD_VAR 0 4
34648: PPUSH
34649: LD_VAR 0 1
34653: PPUSH
34654: CALL_OW 321
34658: PUSH
34659: LD_INT 2
34661: NONEQUAL
34662: IFFALSE 34676
// begin result := false ;
34664: LD_ADDR_VAR 0 3
34668: PUSH
34669: LD_INT 0
34671: ST_TO_ADDR
// exit ;
34672: POP
34673: POP
34674: GO 34680
// end ;
34676: GO 34641
34678: POP
34679: POP
// end ;
34680: LD_VAR 0 3
34684: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
34685: LD_INT 0
34687: PPUSH
34688: PPUSH
34689: PPUSH
34690: PPUSH
34691: PPUSH
34692: PPUSH
34693: PPUSH
34694: PPUSH
34695: PPUSH
34696: PPUSH
34697: PPUSH
34698: PPUSH
34699: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
34700: LD_VAR 0 1
34704: NOT
34705: PUSH
34706: LD_VAR 0 1
34710: PPUSH
34711: CALL_OW 257
34715: PUSH
34716: LD_INT 9
34718: NONEQUAL
34719: OR
34720: IFFALSE 34724
// exit ;
34722: GO 35297
// side := GetSide ( unit ) ;
34724: LD_ADDR_VAR 0 9
34728: PUSH
34729: LD_VAR 0 1
34733: PPUSH
34734: CALL_OW 255
34738: ST_TO_ADDR
// tech_space := tech_spacanom ;
34739: LD_ADDR_VAR 0 12
34743: PUSH
34744: LD_INT 29
34746: ST_TO_ADDR
// tech_time := tech_taurad ;
34747: LD_ADDR_VAR 0 13
34751: PUSH
34752: LD_INT 28
34754: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
34755: LD_ADDR_VAR 0 11
34759: PUSH
34760: LD_VAR 0 1
34764: PPUSH
34765: CALL_OW 310
34769: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
34770: LD_VAR 0 11
34774: PPUSH
34775: CALL_OW 247
34779: PUSH
34780: LD_INT 2
34782: EQUAL
34783: IFFALSE 34787
// exit ;
34785: GO 35297
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34787: LD_ADDR_VAR 0 8
34791: PUSH
34792: LD_INT 81
34794: PUSH
34795: LD_VAR 0 9
34799: PUSH
34800: EMPTY
34801: LIST
34802: LIST
34803: PUSH
34804: LD_INT 3
34806: PUSH
34807: LD_INT 21
34809: PUSH
34810: LD_INT 3
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PPUSH
34825: CALL_OW 69
34829: ST_TO_ADDR
// if not tmp then
34830: LD_VAR 0 8
34834: NOT
34835: IFFALSE 34839
// exit ;
34837: GO 35297
// if in_unit then
34839: LD_VAR 0 11
34843: IFFALSE 34867
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
34845: LD_ADDR_VAR 0 10
34849: PUSH
34850: LD_VAR 0 8
34854: PPUSH
34855: LD_VAR 0 11
34859: PPUSH
34860: CALL_OW 74
34864: ST_TO_ADDR
34865: GO 34887
// enemy := NearestUnitToUnit ( tmp , unit ) ;
34867: LD_ADDR_VAR 0 10
34871: PUSH
34872: LD_VAR 0 8
34876: PPUSH
34877: LD_VAR 0 1
34881: PPUSH
34882: CALL_OW 74
34886: ST_TO_ADDR
// if not enemy then
34887: LD_VAR 0 10
34891: NOT
34892: IFFALSE 34896
// exit ;
34894: GO 35297
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
34896: LD_VAR 0 11
34900: PUSH
34901: LD_VAR 0 11
34905: PPUSH
34906: LD_VAR 0 10
34910: PPUSH
34911: CALL_OW 296
34915: PUSH
34916: LD_INT 13
34918: GREATER
34919: AND
34920: PUSH
34921: LD_VAR 0 1
34925: PPUSH
34926: LD_VAR 0 10
34930: PPUSH
34931: CALL_OW 296
34935: PUSH
34936: LD_INT 12
34938: GREATER
34939: OR
34940: IFFALSE 34944
// exit ;
34942: GO 35297
// missile := [ 1 ] ;
34944: LD_ADDR_VAR 0 14
34948: PUSH
34949: LD_INT 1
34951: PUSH
34952: EMPTY
34953: LIST
34954: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34955: LD_VAR 0 9
34959: PPUSH
34960: LD_VAR 0 12
34964: PPUSH
34965: CALL_OW 325
34969: IFFALSE 34998
// missile := Replace ( missile , missile + 1 , 2 ) ;
34971: LD_ADDR_VAR 0 14
34975: PUSH
34976: LD_VAR 0 14
34980: PPUSH
34981: LD_VAR 0 14
34985: PUSH
34986: LD_INT 1
34988: PLUS
34989: PPUSH
34990: LD_INT 2
34992: PPUSH
34993: CALL_OW 1
34997: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34998: LD_VAR 0 9
35002: PPUSH
35003: LD_VAR 0 13
35007: PPUSH
35008: CALL_OW 325
35012: PUSH
35013: LD_VAR 0 10
35017: PPUSH
35018: CALL_OW 255
35022: PPUSH
35023: LD_VAR 0 13
35027: PPUSH
35028: CALL_OW 325
35032: NOT
35033: AND
35034: IFFALSE 35063
// missile := Replace ( missile , missile + 1 , 3 ) ;
35036: LD_ADDR_VAR 0 14
35040: PUSH
35041: LD_VAR 0 14
35045: PPUSH
35046: LD_VAR 0 14
35050: PUSH
35051: LD_INT 1
35053: PLUS
35054: PPUSH
35055: LD_INT 3
35057: PPUSH
35058: CALL_OW 1
35062: ST_TO_ADDR
// if missile < 2 then
35063: LD_VAR 0 14
35067: PUSH
35068: LD_INT 2
35070: LESS
35071: IFFALSE 35075
// exit ;
35073: GO 35297
// x := GetX ( enemy ) ;
35075: LD_ADDR_VAR 0 4
35079: PUSH
35080: LD_VAR 0 10
35084: PPUSH
35085: CALL_OW 250
35089: ST_TO_ADDR
// y := GetY ( enemy ) ;
35090: LD_ADDR_VAR 0 5
35094: PUSH
35095: LD_VAR 0 10
35099: PPUSH
35100: CALL_OW 251
35104: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
35105: LD_ADDR_VAR 0 6
35109: PUSH
35110: LD_VAR 0 4
35114: PUSH
35115: LD_INT 1
35117: NEG
35118: PPUSH
35119: LD_INT 1
35121: PPUSH
35122: CALL_OW 12
35126: PLUS
35127: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
35128: LD_ADDR_VAR 0 7
35132: PUSH
35133: LD_VAR 0 5
35137: PUSH
35138: LD_INT 1
35140: NEG
35141: PPUSH
35142: LD_INT 1
35144: PPUSH
35145: CALL_OW 12
35149: PLUS
35150: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35151: LD_VAR 0 6
35155: PPUSH
35156: LD_VAR 0 7
35160: PPUSH
35161: CALL_OW 488
35165: NOT
35166: IFFALSE 35188
// begin _x := x ;
35168: LD_ADDR_VAR 0 6
35172: PUSH
35173: LD_VAR 0 4
35177: ST_TO_ADDR
// _y := y ;
35178: LD_ADDR_VAR 0 7
35182: PUSH
35183: LD_VAR 0 5
35187: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
35188: LD_ADDR_VAR 0 3
35192: PUSH
35193: LD_INT 1
35195: PPUSH
35196: LD_VAR 0 14
35200: PPUSH
35201: CALL_OW 12
35205: ST_TO_ADDR
// case i of 1 :
35206: LD_VAR 0 3
35210: PUSH
35211: LD_INT 1
35213: DOUBLE
35214: EQUAL
35215: IFTRUE 35219
35217: GO 35236
35219: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
35220: LD_VAR 0 1
35224: PPUSH
35225: LD_VAR 0 10
35229: PPUSH
35230: CALL_OW 115
35234: GO 35297
35236: LD_INT 2
35238: DOUBLE
35239: EQUAL
35240: IFTRUE 35244
35242: GO 35266
35244: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
35245: LD_VAR 0 1
35249: PPUSH
35250: LD_VAR 0 6
35254: PPUSH
35255: LD_VAR 0 7
35259: PPUSH
35260: CALL_OW 153
35264: GO 35297
35266: LD_INT 3
35268: DOUBLE
35269: EQUAL
35270: IFTRUE 35274
35272: GO 35296
35274: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
35275: LD_VAR 0 1
35279: PPUSH
35280: LD_VAR 0 6
35284: PPUSH
35285: LD_VAR 0 7
35289: PPUSH
35290: CALL_OW 154
35294: GO 35297
35296: POP
// end ;
35297: LD_VAR 0 2
35301: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
35302: LD_INT 0
35304: PPUSH
35305: PPUSH
35306: PPUSH
35307: PPUSH
35308: PPUSH
35309: PPUSH
// if not unit or not building then
35310: LD_VAR 0 1
35314: NOT
35315: PUSH
35316: LD_VAR 0 2
35320: NOT
35321: OR
35322: IFFALSE 35326
// exit ;
35324: GO 35484
// x := GetX ( building ) ;
35326: LD_ADDR_VAR 0 5
35330: PUSH
35331: LD_VAR 0 2
35335: PPUSH
35336: CALL_OW 250
35340: ST_TO_ADDR
// y := GetY ( building ) ;
35341: LD_ADDR_VAR 0 6
35345: PUSH
35346: LD_VAR 0 2
35350: PPUSH
35351: CALL_OW 251
35355: ST_TO_ADDR
// for i = 0 to 5 do
35356: LD_ADDR_VAR 0 4
35360: PUSH
35361: DOUBLE
35362: LD_INT 0
35364: DEC
35365: ST_TO_ADDR
35366: LD_INT 5
35368: PUSH
35369: FOR_TO
35370: IFFALSE 35482
// begin _x := ShiftX ( x , i , 3 ) ;
35372: LD_ADDR_VAR 0 7
35376: PUSH
35377: LD_VAR 0 5
35381: PPUSH
35382: LD_VAR 0 4
35386: PPUSH
35387: LD_INT 3
35389: PPUSH
35390: CALL_OW 272
35394: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
35395: LD_ADDR_VAR 0 8
35399: PUSH
35400: LD_VAR 0 6
35404: PPUSH
35405: LD_VAR 0 4
35409: PPUSH
35410: LD_INT 3
35412: PPUSH
35413: CALL_OW 273
35417: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35418: LD_VAR 0 7
35422: PPUSH
35423: LD_VAR 0 8
35427: PPUSH
35428: CALL_OW 488
35432: NOT
35433: IFFALSE 35437
// continue ;
35435: GO 35369
// if HexInfo ( _x , _y ) = 0 then
35437: LD_VAR 0 7
35441: PPUSH
35442: LD_VAR 0 8
35446: PPUSH
35447: CALL_OW 428
35451: PUSH
35452: LD_INT 0
35454: EQUAL
35455: IFFALSE 35480
// begin ComMoveXY ( unit , _x , _y ) ;
35457: LD_VAR 0 1
35461: PPUSH
35462: LD_VAR 0 7
35466: PPUSH
35467: LD_VAR 0 8
35471: PPUSH
35472: CALL_OW 111
// exit ;
35476: POP
35477: POP
35478: GO 35484
// end ; end ;
35480: GO 35369
35482: POP
35483: POP
// end ;
35484: LD_VAR 0 3
35488: RET
// export function ScanBase ( side , base_area ) ; begin
35489: LD_INT 0
35491: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
35492: LD_ADDR_VAR 0 3
35496: PUSH
35497: LD_VAR 0 2
35501: PPUSH
35502: LD_INT 81
35504: PUSH
35505: LD_VAR 0 1
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: PPUSH
35514: CALL_OW 70
35518: ST_TO_ADDR
// end ;
35519: LD_VAR 0 3
35523: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
35524: LD_INT 0
35526: PPUSH
35527: PPUSH
35528: PPUSH
35529: PPUSH
// result := false ;
35530: LD_ADDR_VAR 0 2
35534: PUSH
35535: LD_INT 0
35537: ST_TO_ADDR
// side := GetSide ( unit ) ;
35538: LD_ADDR_VAR 0 3
35542: PUSH
35543: LD_VAR 0 1
35547: PPUSH
35548: CALL_OW 255
35552: ST_TO_ADDR
// nat := GetNation ( unit ) ;
35553: LD_ADDR_VAR 0 4
35557: PUSH
35558: LD_VAR 0 1
35562: PPUSH
35563: CALL_OW 248
35567: ST_TO_ADDR
// case nat of 1 :
35568: LD_VAR 0 4
35572: PUSH
35573: LD_INT 1
35575: DOUBLE
35576: EQUAL
35577: IFTRUE 35581
35579: GO 35592
35581: POP
// tech := tech_lassight ; 2 :
35582: LD_ADDR_VAR 0 5
35586: PUSH
35587: LD_INT 12
35589: ST_TO_ADDR
35590: GO 35631
35592: LD_INT 2
35594: DOUBLE
35595: EQUAL
35596: IFTRUE 35600
35598: GO 35611
35600: POP
// tech := tech_mortar ; 3 :
35601: LD_ADDR_VAR 0 5
35605: PUSH
35606: LD_INT 41
35608: ST_TO_ADDR
35609: GO 35631
35611: LD_INT 3
35613: DOUBLE
35614: EQUAL
35615: IFTRUE 35619
35617: GO 35630
35619: POP
// tech := tech_bazooka ; end ;
35620: LD_ADDR_VAR 0 5
35624: PUSH
35625: LD_INT 44
35627: ST_TO_ADDR
35628: GO 35631
35630: POP
// if Researched ( side , tech ) then
35631: LD_VAR 0 3
35635: PPUSH
35636: LD_VAR 0 5
35640: PPUSH
35641: CALL_OW 325
35645: IFFALSE 35672
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
35647: LD_ADDR_VAR 0 2
35651: PUSH
35652: LD_INT 5
35654: PUSH
35655: LD_INT 8
35657: PUSH
35658: LD_INT 9
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: LIST
35665: PUSH
35666: LD_VAR 0 4
35670: ARRAY
35671: ST_TO_ADDR
// end ;
35672: LD_VAR 0 2
35676: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
35677: LD_INT 0
35679: PPUSH
35680: PPUSH
35681: PPUSH
// if not mines then
35682: LD_VAR 0 2
35686: NOT
35687: IFFALSE 35691
// exit ;
35689: GO 35835
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35691: LD_ADDR_VAR 0 5
35695: PUSH
35696: LD_INT 81
35698: PUSH
35699: LD_VAR 0 1
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: PUSH
35708: LD_INT 3
35710: PUSH
35711: LD_INT 21
35713: PUSH
35714: LD_INT 3
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: PPUSH
35729: CALL_OW 69
35733: ST_TO_ADDR
// for i in mines do
35734: LD_ADDR_VAR 0 4
35738: PUSH
35739: LD_VAR 0 2
35743: PUSH
35744: FOR_IN
35745: IFFALSE 35833
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
35747: LD_VAR 0 4
35751: PUSH
35752: LD_INT 1
35754: ARRAY
35755: PPUSH
35756: LD_VAR 0 4
35760: PUSH
35761: LD_INT 2
35763: ARRAY
35764: PPUSH
35765: CALL_OW 458
35769: NOT
35770: IFFALSE 35774
// continue ;
35772: GO 35744
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
35774: LD_VAR 0 4
35778: PUSH
35779: LD_INT 1
35781: ARRAY
35782: PPUSH
35783: LD_VAR 0 4
35787: PUSH
35788: LD_INT 2
35790: ARRAY
35791: PPUSH
35792: CALL_OW 428
35796: PUSH
35797: LD_VAR 0 5
35801: IN
35802: IFFALSE 35831
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
35804: LD_VAR 0 4
35808: PUSH
35809: LD_INT 1
35811: ARRAY
35812: PPUSH
35813: LD_VAR 0 4
35817: PUSH
35818: LD_INT 2
35820: ARRAY
35821: PPUSH
35822: LD_VAR 0 1
35826: PPUSH
35827: CALL_OW 456
// end ;
35831: GO 35744
35833: POP
35834: POP
// end ;
35835: LD_VAR 0 3
35839: RET
// export function Count ( array ) ; begin
35840: LD_INT 0
35842: PPUSH
// result := array + 0 ;
35843: LD_ADDR_VAR 0 2
35847: PUSH
35848: LD_VAR 0 1
35852: PUSH
35853: LD_INT 0
35855: PLUS
35856: ST_TO_ADDR
// end ;
35857: LD_VAR 0 2
35861: RET
// export function IsEmpty ( building ) ; begin
35862: LD_INT 0
35864: PPUSH
// if not building then
35865: LD_VAR 0 1
35869: NOT
35870: IFFALSE 35874
// exit ;
35872: GO 35917
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
35874: LD_ADDR_VAR 0 2
35878: PUSH
35879: LD_VAR 0 1
35883: PUSH
35884: LD_INT 22
35886: PUSH
35887: LD_VAR 0 1
35891: PPUSH
35892: CALL_OW 255
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: PUSH
35901: LD_INT 58
35903: PUSH
35904: EMPTY
35905: LIST
35906: PUSH
35907: EMPTY
35908: LIST
35909: LIST
35910: PPUSH
35911: CALL_OW 69
35915: IN
35916: ST_TO_ADDR
// end ;
35917: LD_VAR 0 2
35921: RET
// export function IsNotFull ( building ) ; var places ; begin
35922: LD_INT 0
35924: PPUSH
35925: PPUSH
// if not building then
35926: LD_VAR 0 1
35930: NOT
35931: IFFALSE 35935
// exit ;
35933: GO 35963
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
35935: LD_ADDR_VAR 0 2
35939: PUSH
35940: LD_VAR 0 1
35944: PPUSH
35945: LD_INT 3
35947: PUSH
35948: LD_INT 62
35950: PUSH
35951: EMPTY
35952: LIST
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PPUSH
35958: CALL_OW 72
35962: ST_TO_ADDR
// end ;
35963: LD_VAR 0 2
35967: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35968: LD_INT 0
35970: PPUSH
35971: PPUSH
35972: PPUSH
35973: PPUSH
// tmp := [ ] ;
35974: LD_ADDR_VAR 0 3
35978: PUSH
35979: EMPTY
35980: ST_TO_ADDR
// list := [ ] ;
35981: LD_ADDR_VAR 0 5
35985: PUSH
35986: EMPTY
35987: ST_TO_ADDR
// for i = 16 to 25 do
35988: LD_ADDR_VAR 0 4
35992: PUSH
35993: DOUBLE
35994: LD_INT 16
35996: DEC
35997: ST_TO_ADDR
35998: LD_INT 25
36000: PUSH
36001: FOR_TO
36002: IFFALSE 36075
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
36004: LD_ADDR_VAR 0 3
36008: PUSH
36009: LD_VAR 0 3
36013: PUSH
36014: LD_INT 22
36016: PUSH
36017: LD_VAR 0 1
36021: PPUSH
36022: CALL_OW 255
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: LD_INT 91
36033: PUSH
36034: LD_VAR 0 1
36038: PUSH
36039: LD_INT 6
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: LIST
36046: PUSH
36047: LD_INT 30
36049: PUSH
36050: LD_VAR 0 4
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: LIST
36063: PUSH
36064: EMPTY
36065: LIST
36066: PPUSH
36067: CALL_OW 69
36071: ADD
36072: ST_TO_ADDR
36073: GO 36001
36075: POP
36076: POP
// for i = 1 to tmp do
36077: LD_ADDR_VAR 0 4
36081: PUSH
36082: DOUBLE
36083: LD_INT 1
36085: DEC
36086: ST_TO_ADDR
36087: LD_VAR 0 3
36091: PUSH
36092: FOR_TO
36093: IFFALSE 36181
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
36095: LD_ADDR_VAR 0 5
36099: PUSH
36100: LD_VAR 0 5
36104: PUSH
36105: LD_VAR 0 3
36109: PUSH
36110: LD_VAR 0 4
36114: ARRAY
36115: PPUSH
36116: CALL_OW 266
36120: PUSH
36121: LD_VAR 0 3
36125: PUSH
36126: LD_VAR 0 4
36130: ARRAY
36131: PPUSH
36132: CALL_OW 250
36136: PUSH
36137: LD_VAR 0 3
36141: PUSH
36142: LD_VAR 0 4
36146: ARRAY
36147: PPUSH
36148: CALL_OW 251
36152: PUSH
36153: LD_VAR 0 3
36157: PUSH
36158: LD_VAR 0 4
36162: ARRAY
36163: PPUSH
36164: CALL_OW 254
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: LIST
36173: LIST
36174: PUSH
36175: EMPTY
36176: LIST
36177: ADD
36178: ST_TO_ADDR
36179: GO 36092
36181: POP
36182: POP
// result := list ;
36183: LD_ADDR_VAR 0 2
36187: PUSH
36188: LD_VAR 0 5
36192: ST_TO_ADDR
// end ;
36193: LD_VAR 0 2
36197: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
36198: LD_INT 0
36200: PPUSH
36201: PPUSH
36202: PPUSH
36203: PPUSH
36204: PPUSH
36205: PPUSH
36206: PPUSH
// if not factory then
36207: LD_VAR 0 1
36211: NOT
36212: IFFALSE 36216
// exit ;
36214: GO 36809
// if control = control_apeman then
36216: LD_VAR 0 4
36220: PUSH
36221: LD_INT 5
36223: EQUAL
36224: IFFALSE 36333
// begin tmp := UnitsInside ( factory ) ;
36226: LD_ADDR_VAR 0 8
36230: PUSH
36231: LD_VAR 0 1
36235: PPUSH
36236: CALL_OW 313
36240: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
36241: LD_VAR 0 8
36245: PPUSH
36246: LD_INT 25
36248: PUSH
36249: LD_INT 12
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PPUSH
36256: CALL_OW 72
36260: NOT
36261: IFFALSE 36271
// control := control_manual ;
36263: LD_ADDR_VAR 0 4
36267: PUSH
36268: LD_INT 1
36270: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
36271: LD_ADDR_VAR 0 8
36275: PUSH
36276: LD_VAR 0 1
36280: PPUSH
36281: CALL 35968 0 1
36285: ST_TO_ADDR
// if tmp then
36286: LD_VAR 0 8
36290: IFFALSE 36333
// begin for i in tmp do
36292: LD_ADDR_VAR 0 7
36296: PUSH
36297: LD_VAR 0 8
36301: PUSH
36302: FOR_IN
36303: IFFALSE 36331
// if i [ 1 ] = b_ext_radio then
36305: LD_VAR 0 7
36309: PUSH
36310: LD_INT 1
36312: ARRAY
36313: PUSH
36314: LD_INT 22
36316: EQUAL
36317: IFFALSE 36329
// begin control := control_remote ;
36319: LD_ADDR_VAR 0 4
36323: PUSH
36324: LD_INT 2
36326: ST_TO_ADDR
// break ;
36327: GO 36331
// end ;
36329: GO 36302
36331: POP
36332: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36333: LD_VAR 0 1
36337: PPUSH
36338: LD_VAR 0 2
36342: PPUSH
36343: LD_VAR 0 3
36347: PPUSH
36348: LD_VAR 0 4
36352: PPUSH
36353: LD_VAR 0 5
36357: PPUSH
36358: CALL_OW 448
36362: IFFALSE 36397
// begin result := [ chassis , engine , control , weapon ] ;
36364: LD_ADDR_VAR 0 6
36368: PUSH
36369: LD_VAR 0 2
36373: PUSH
36374: LD_VAR 0 3
36378: PUSH
36379: LD_VAR 0 4
36383: PUSH
36384: LD_VAR 0 5
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: ST_TO_ADDR
// exit ;
36395: GO 36809
// end ; _chassis := AvailableChassisList ( factory ) ;
36397: LD_ADDR_VAR 0 9
36401: PUSH
36402: LD_VAR 0 1
36406: PPUSH
36407: CALL_OW 475
36411: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
36412: LD_ADDR_VAR 0 11
36416: PUSH
36417: LD_VAR 0 1
36421: PPUSH
36422: CALL_OW 476
36426: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
36427: LD_ADDR_VAR 0 12
36431: PUSH
36432: LD_VAR 0 1
36436: PPUSH
36437: CALL_OW 477
36441: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
36442: LD_ADDR_VAR 0 10
36446: PUSH
36447: LD_VAR 0 1
36451: PPUSH
36452: CALL_OW 478
36456: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
36457: LD_VAR 0 9
36461: NOT
36462: PUSH
36463: LD_VAR 0 11
36467: NOT
36468: OR
36469: PUSH
36470: LD_VAR 0 12
36474: NOT
36475: OR
36476: PUSH
36477: LD_VAR 0 10
36481: NOT
36482: OR
36483: IFFALSE 36518
// begin result := [ chassis , engine , control , weapon ] ;
36485: LD_ADDR_VAR 0 6
36489: PUSH
36490: LD_VAR 0 2
36494: PUSH
36495: LD_VAR 0 3
36499: PUSH
36500: LD_VAR 0 4
36504: PUSH
36505: LD_VAR 0 5
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: LIST
36514: LIST
36515: ST_TO_ADDR
// exit ;
36516: GO 36809
// end ; if not chassis in _chassis then
36518: LD_VAR 0 2
36522: PUSH
36523: LD_VAR 0 9
36527: IN
36528: NOT
36529: IFFALSE 36555
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
36531: LD_ADDR_VAR 0 2
36535: PUSH
36536: LD_VAR 0 9
36540: PUSH
36541: LD_INT 1
36543: PPUSH
36544: LD_VAR 0 9
36548: PPUSH
36549: CALL_OW 12
36553: ARRAY
36554: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
36555: LD_VAR 0 2
36559: PPUSH
36560: LD_VAR 0 3
36564: PPUSH
36565: CALL 36814 0 2
36569: NOT
36570: IFFALSE 36629
// repeat engine := _engine [ 1 ] ;
36572: LD_ADDR_VAR 0 3
36576: PUSH
36577: LD_VAR 0 11
36581: PUSH
36582: LD_INT 1
36584: ARRAY
36585: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
36586: LD_ADDR_VAR 0 11
36590: PUSH
36591: LD_VAR 0 11
36595: PPUSH
36596: LD_INT 1
36598: PPUSH
36599: CALL_OW 3
36603: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
36604: LD_VAR 0 2
36608: PPUSH
36609: LD_VAR 0 3
36613: PPUSH
36614: CALL 36814 0 2
36618: PUSH
36619: LD_VAR 0 11
36623: PUSH
36624: EMPTY
36625: EQUAL
36626: OR
36627: IFFALSE 36572
// if not control in _control then
36629: LD_VAR 0 4
36633: PUSH
36634: LD_VAR 0 12
36638: IN
36639: NOT
36640: IFFALSE 36666
// control := _control [ rand ( 1 , _control ) ] ;
36642: LD_ADDR_VAR 0 4
36646: PUSH
36647: LD_VAR 0 12
36651: PUSH
36652: LD_INT 1
36654: PPUSH
36655: LD_VAR 0 12
36659: PPUSH
36660: CALL_OW 12
36664: ARRAY
36665: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
36666: LD_VAR 0 2
36670: PPUSH
36671: LD_VAR 0 5
36675: PPUSH
36676: CALL 37034 0 2
36680: NOT
36681: IFFALSE 36740
// repeat weapon := _weapon [ 1 ] ;
36683: LD_ADDR_VAR 0 5
36687: PUSH
36688: LD_VAR 0 10
36692: PUSH
36693: LD_INT 1
36695: ARRAY
36696: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
36697: LD_ADDR_VAR 0 10
36701: PUSH
36702: LD_VAR 0 10
36706: PPUSH
36707: LD_INT 1
36709: PPUSH
36710: CALL_OW 3
36714: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
36715: LD_VAR 0 2
36719: PPUSH
36720: LD_VAR 0 5
36724: PPUSH
36725: CALL 37034 0 2
36729: PUSH
36730: LD_VAR 0 10
36734: PUSH
36735: EMPTY
36736: EQUAL
36737: OR
36738: IFFALSE 36683
// result := [ ] ;
36740: LD_ADDR_VAR 0 6
36744: PUSH
36745: EMPTY
36746: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36747: LD_VAR 0 1
36751: PPUSH
36752: LD_VAR 0 2
36756: PPUSH
36757: LD_VAR 0 3
36761: PPUSH
36762: LD_VAR 0 4
36766: PPUSH
36767: LD_VAR 0 5
36771: PPUSH
36772: CALL_OW 448
36776: IFFALSE 36809
// result := [ chassis , engine , control , weapon ] ;
36778: LD_ADDR_VAR 0 6
36782: PUSH
36783: LD_VAR 0 2
36787: PUSH
36788: LD_VAR 0 3
36792: PUSH
36793: LD_VAR 0 4
36797: PUSH
36798: LD_VAR 0 5
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: ST_TO_ADDR
// end ;
36809: LD_VAR 0 6
36813: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
36814: LD_INT 0
36816: PPUSH
// if not chassis or not engine then
36817: LD_VAR 0 1
36821: NOT
36822: PUSH
36823: LD_VAR 0 2
36827: NOT
36828: OR
36829: IFFALSE 36833
// exit ;
36831: GO 37029
// case engine of engine_solar :
36833: LD_VAR 0 2
36837: PUSH
36838: LD_INT 2
36840: DOUBLE
36841: EQUAL
36842: IFTRUE 36846
36844: GO 36884
36846: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
36847: LD_ADDR_VAR 0 3
36851: PUSH
36852: LD_INT 11
36854: PUSH
36855: LD_INT 12
36857: PUSH
36858: LD_INT 13
36860: PUSH
36861: LD_INT 14
36863: PUSH
36864: LD_INT 1
36866: PUSH
36867: LD_INT 2
36869: PUSH
36870: LD_INT 3
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: LIST
36877: LIST
36878: LIST
36879: LIST
36880: LIST
36881: ST_TO_ADDR
36882: GO 37013
36884: LD_INT 1
36886: DOUBLE
36887: EQUAL
36888: IFTRUE 36892
36890: GO 36954
36892: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36893: LD_ADDR_VAR 0 3
36897: PUSH
36898: LD_INT 11
36900: PUSH
36901: LD_INT 12
36903: PUSH
36904: LD_INT 13
36906: PUSH
36907: LD_INT 14
36909: PUSH
36910: LD_INT 1
36912: PUSH
36913: LD_INT 2
36915: PUSH
36916: LD_INT 3
36918: PUSH
36919: LD_INT 4
36921: PUSH
36922: LD_INT 5
36924: PUSH
36925: LD_INT 21
36927: PUSH
36928: LD_INT 23
36930: PUSH
36931: LD_INT 22
36933: PUSH
36934: LD_INT 24
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: LIST
36950: LIST
36951: ST_TO_ADDR
36952: GO 37013
36954: LD_INT 3
36956: DOUBLE
36957: EQUAL
36958: IFTRUE 36962
36960: GO 37012
36962: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36963: LD_ADDR_VAR 0 3
36967: PUSH
36968: LD_INT 13
36970: PUSH
36971: LD_INT 14
36973: PUSH
36974: LD_INT 2
36976: PUSH
36977: LD_INT 3
36979: PUSH
36980: LD_INT 4
36982: PUSH
36983: LD_INT 5
36985: PUSH
36986: LD_INT 21
36988: PUSH
36989: LD_INT 22
36991: PUSH
36992: LD_INT 23
36994: PUSH
36995: LD_INT 24
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: LIST
37009: ST_TO_ADDR
37010: GO 37013
37012: POP
// result := ( chassis in result ) ;
37013: LD_ADDR_VAR 0 3
37017: PUSH
37018: LD_VAR 0 1
37022: PUSH
37023: LD_VAR 0 3
37027: IN
37028: ST_TO_ADDR
// end ;
37029: LD_VAR 0 3
37033: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
37034: LD_INT 0
37036: PPUSH
// if not chassis or not weapon then
37037: LD_VAR 0 1
37041: NOT
37042: PUSH
37043: LD_VAR 0 2
37047: NOT
37048: OR
37049: IFFALSE 37053
// exit ;
37051: GO 38113
// case weapon of us_machine_gun :
37053: LD_VAR 0 2
37057: PUSH
37058: LD_INT 2
37060: DOUBLE
37061: EQUAL
37062: IFTRUE 37066
37064: GO 37096
37066: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
37067: LD_ADDR_VAR 0 3
37071: PUSH
37072: LD_INT 1
37074: PUSH
37075: LD_INT 2
37077: PUSH
37078: LD_INT 3
37080: PUSH
37081: LD_INT 4
37083: PUSH
37084: LD_INT 5
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: ST_TO_ADDR
37094: GO 38097
37096: LD_INT 3
37098: DOUBLE
37099: EQUAL
37100: IFTRUE 37104
37102: GO 37134
37104: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
37105: LD_ADDR_VAR 0 3
37109: PUSH
37110: LD_INT 1
37112: PUSH
37113: LD_INT 2
37115: PUSH
37116: LD_INT 3
37118: PUSH
37119: LD_INT 4
37121: PUSH
37122: LD_INT 5
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: LIST
37129: LIST
37130: LIST
37131: ST_TO_ADDR
37132: GO 38097
37134: LD_INT 11
37136: DOUBLE
37137: EQUAL
37138: IFTRUE 37142
37140: GO 37172
37142: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
37143: LD_ADDR_VAR 0 3
37147: PUSH
37148: LD_INT 1
37150: PUSH
37151: LD_INT 2
37153: PUSH
37154: LD_INT 3
37156: PUSH
37157: LD_INT 4
37159: PUSH
37160: LD_INT 5
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: ST_TO_ADDR
37170: GO 38097
37172: LD_INT 4
37174: DOUBLE
37175: EQUAL
37176: IFTRUE 37180
37178: GO 37206
37180: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
37181: LD_ADDR_VAR 0 3
37185: PUSH
37186: LD_INT 2
37188: PUSH
37189: LD_INT 3
37191: PUSH
37192: LD_INT 4
37194: PUSH
37195: LD_INT 5
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: LIST
37202: LIST
37203: ST_TO_ADDR
37204: GO 38097
37206: LD_INT 5
37208: DOUBLE
37209: EQUAL
37210: IFTRUE 37214
37212: GO 37240
37214: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
37215: LD_ADDR_VAR 0 3
37219: PUSH
37220: LD_INT 2
37222: PUSH
37223: LD_INT 3
37225: PUSH
37226: LD_INT 4
37228: PUSH
37229: LD_INT 5
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: ST_TO_ADDR
37238: GO 38097
37240: LD_INT 9
37242: DOUBLE
37243: EQUAL
37244: IFTRUE 37248
37246: GO 37274
37248: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
37249: LD_ADDR_VAR 0 3
37253: PUSH
37254: LD_INT 2
37256: PUSH
37257: LD_INT 3
37259: PUSH
37260: LD_INT 4
37262: PUSH
37263: LD_INT 5
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: LIST
37270: LIST
37271: ST_TO_ADDR
37272: GO 38097
37274: LD_INT 7
37276: DOUBLE
37277: EQUAL
37278: IFTRUE 37282
37280: GO 37308
37282: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
37283: LD_ADDR_VAR 0 3
37287: PUSH
37288: LD_INT 2
37290: PUSH
37291: LD_INT 3
37293: PUSH
37294: LD_INT 4
37296: PUSH
37297: LD_INT 5
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: LIST
37304: LIST
37305: ST_TO_ADDR
37306: GO 38097
37308: LD_INT 12
37310: DOUBLE
37311: EQUAL
37312: IFTRUE 37316
37314: GO 37342
37316: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
37317: LD_ADDR_VAR 0 3
37321: PUSH
37322: LD_INT 2
37324: PUSH
37325: LD_INT 3
37327: PUSH
37328: LD_INT 4
37330: PUSH
37331: LD_INT 5
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: LIST
37338: LIST
37339: ST_TO_ADDR
37340: GO 38097
37342: LD_INT 13
37344: DOUBLE
37345: EQUAL
37346: IFTRUE 37350
37348: GO 37376
37350: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
37351: LD_ADDR_VAR 0 3
37355: PUSH
37356: LD_INT 2
37358: PUSH
37359: LD_INT 3
37361: PUSH
37362: LD_INT 4
37364: PUSH
37365: LD_INT 5
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: ST_TO_ADDR
37374: GO 38097
37376: LD_INT 14
37378: DOUBLE
37379: EQUAL
37380: IFTRUE 37384
37382: GO 37402
37384: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
37385: LD_ADDR_VAR 0 3
37389: PUSH
37390: LD_INT 4
37392: PUSH
37393: LD_INT 5
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: ST_TO_ADDR
37400: GO 38097
37402: LD_INT 6
37404: DOUBLE
37405: EQUAL
37406: IFTRUE 37410
37408: GO 37428
37410: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
37411: LD_ADDR_VAR 0 3
37415: PUSH
37416: LD_INT 4
37418: PUSH
37419: LD_INT 5
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: ST_TO_ADDR
37426: GO 38097
37428: LD_INT 10
37430: DOUBLE
37431: EQUAL
37432: IFTRUE 37436
37434: GO 37454
37436: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
37437: LD_ADDR_VAR 0 3
37441: PUSH
37442: LD_INT 4
37444: PUSH
37445: LD_INT 5
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: ST_TO_ADDR
37452: GO 38097
37454: LD_INT 22
37456: DOUBLE
37457: EQUAL
37458: IFTRUE 37462
37460: GO 37488
37462: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
37463: LD_ADDR_VAR 0 3
37467: PUSH
37468: LD_INT 11
37470: PUSH
37471: LD_INT 12
37473: PUSH
37474: LD_INT 13
37476: PUSH
37477: LD_INT 14
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: ST_TO_ADDR
37486: GO 38097
37488: LD_INT 23
37490: DOUBLE
37491: EQUAL
37492: IFTRUE 37496
37494: GO 37522
37496: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
37497: LD_ADDR_VAR 0 3
37501: PUSH
37502: LD_INT 11
37504: PUSH
37505: LD_INT 12
37507: PUSH
37508: LD_INT 13
37510: PUSH
37511: LD_INT 14
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: LIST
37518: LIST
37519: ST_TO_ADDR
37520: GO 38097
37522: LD_INT 24
37524: DOUBLE
37525: EQUAL
37526: IFTRUE 37530
37528: GO 37556
37530: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
37531: LD_ADDR_VAR 0 3
37535: PUSH
37536: LD_INT 11
37538: PUSH
37539: LD_INT 12
37541: PUSH
37542: LD_INT 13
37544: PUSH
37545: LD_INT 14
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: ST_TO_ADDR
37554: GO 38097
37556: LD_INT 30
37558: DOUBLE
37559: EQUAL
37560: IFTRUE 37564
37562: GO 37590
37564: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
37565: LD_ADDR_VAR 0 3
37569: PUSH
37570: LD_INT 11
37572: PUSH
37573: LD_INT 12
37575: PUSH
37576: LD_INT 13
37578: PUSH
37579: LD_INT 14
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: ST_TO_ADDR
37588: GO 38097
37590: LD_INT 25
37592: DOUBLE
37593: EQUAL
37594: IFTRUE 37598
37596: GO 37616
37598: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
37599: LD_ADDR_VAR 0 3
37603: PUSH
37604: LD_INT 13
37606: PUSH
37607: LD_INT 14
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: ST_TO_ADDR
37614: GO 38097
37616: LD_INT 27
37618: DOUBLE
37619: EQUAL
37620: IFTRUE 37624
37622: GO 37642
37624: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
37625: LD_ADDR_VAR 0 3
37629: PUSH
37630: LD_INT 13
37632: PUSH
37633: LD_INT 14
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: ST_TO_ADDR
37640: GO 38097
37642: LD_INT 92
37644: DOUBLE
37645: EQUAL
37646: IFTRUE 37650
37648: GO 37676
37650: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
37651: LD_ADDR_VAR 0 3
37655: PUSH
37656: LD_INT 11
37658: PUSH
37659: LD_INT 12
37661: PUSH
37662: LD_INT 13
37664: PUSH
37665: LD_INT 14
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: ST_TO_ADDR
37674: GO 38097
37676: LD_INT 28
37678: DOUBLE
37679: EQUAL
37680: IFTRUE 37684
37682: GO 37702
37684: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
37685: LD_ADDR_VAR 0 3
37689: PUSH
37690: LD_INT 13
37692: PUSH
37693: LD_INT 14
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: ST_TO_ADDR
37700: GO 38097
37702: LD_INT 29
37704: DOUBLE
37705: EQUAL
37706: IFTRUE 37710
37708: GO 37728
37710: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
37711: LD_ADDR_VAR 0 3
37715: PUSH
37716: LD_INT 13
37718: PUSH
37719: LD_INT 14
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: ST_TO_ADDR
37726: GO 38097
37728: LD_INT 31
37730: DOUBLE
37731: EQUAL
37732: IFTRUE 37736
37734: GO 37754
37736: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
37737: LD_ADDR_VAR 0 3
37741: PUSH
37742: LD_INT 13
37744: PUSH
37745: LD_INT 14
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: ST_TO_ADDR
37752: GO 38097
37754: LD_INT 26
37756: DOUBLE
37757: EQUAL
37758: IFTRUE 37762
37760: GO 37780
37762: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
37763: LD_ADDR_VAR 0 3
37767: PUSH
37768: LD_INT 13
37770: PUSH
37771: LD_INT 14
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: ST_TO_ADDR
37778: GO 38097
37780: LD_INT 42
37782: DOUBLE
37783: EQUAL
37784: IFTRUE 37788
37786: GO 37814
37788: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
37789: LD_ADDR_VAR 0 3
37793: PUSH
37794: LD_INT 21
37796: PUSH
37797: LD_INT 22
37799: PUSH
37800: LD_INT 23
37802: PUSH
37803: LD_INT 24
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: LIST
37810: LIST
37811: ST_TO_ADDR
37812: GO 38097
37814: LD_INT 43
37816: DOUBLE
37817: EQUAL
37818: IFTRUE 37822
37820: GO 37848
37822: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
37823: LD_ADDR_VAR 0 3
37827: PUSH
37828: LD_INT 21
37830: PUSH
37831: LD_INT 22
37833: PUSH
37834: LD_INT 23
37836: PUSH
37837: LD_INT 24
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: ST_TO_ADDR
37846: GO 38097
37848: LD_INT 44
37850: DOUBLE
37851: EQUAL
37852: IFTRUE 37856
37854: GO 37882
37856: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
37857: LD_ADDR_VAR 0 3
37861: PUSH
37862: LD_INT 21
37864: PUSH
37865: LD_INT 22
37867: PUSH
37868: LD_INT 23
37870: PUSH
37871: LD_INT 24
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: LIST
37878: LIST
37879: ST_TO_ADDR
37880: GO 38097
37882: LD_INT 45
37884: DOUBLE
37885: EQUAL
37886: IFTRUE 37890
37888: GO 37916
37890: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37891: LD_ADDR_VAR 0 3
37895: PUSH
37896: LD_INT 21
37898: PUSH
37899: LD_INT 22
37901: PUSH
37902: LD_INT 23
37904: PUSH
37905: LD_INT 24
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: ST_TO_ADDR
37914: GO 38097
37916: LD_INT 49
37918: DOUBLE
37919: EQUAL
37920: IFTRUE 37924
37922: GO 37950
37924: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37925: LD_ADDR_VAR 0 3
37929: PUSH
37930: LD_INT 21
37932: PUSH
37933: LD_INT 22
37935: PUSH
37936: LD_INT 23
37938: PUSH
37939: LD_INT 24
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: LIST
37946: LIST
37947: ST_TO_ADDR
37948: GO 38097
37950: LD_INT 51
37952: DOUBLE
37953: EQUAL
37954: IFTRUE 37958
37956: GO 37984
37958: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37959: LD_ADDR_VAR 0 3
37963: PUSH
37964: LD_INT 21
37966: PUSH
37967: LD_INT 22
37969: PUSH
37970: LD_INT 23
37972: PUSH
37973: LD_INT 24
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: LIST
37980: LIST
37981: ST_TO_ADDR
37982: GO 38097
37984: LD_INT 52
37986: DOUBLE
37987: EQUAL
37988: IFTRUE 37992
37990: GO 38018
37992: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37993: LD_ADDR_VAR 0 3
37997: PUSH
37998: LD_INT 21
38000: PUSH
38001: LD_INT 22
38003: PUSH
38004: LD_INT 23
38006: PUSH
38007: LD_INT 24
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: ST_TO_ADDR
38016: GO 38097
38018: LD_INT 53
38020: DOUBLE
38021: EQUAL
38022: IFTRUE 38026
38024: GO 38044
38026: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
38027: LD_ADDR_VAR 0 3
38031: PUSH
38032: LD_INT 23
38034: PUSH
38035: LD_INT 24
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: ST_TO_ADDR
38042: GO 38097
38044: LD_INT 46
38046: DOUBLE
38047: EQUAL
38048: IFTRUE 38052
38050: GO 38070
38052: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
38053: LD_ADDR_VAR 0 3
38057: PUSH
38058: LD_INT 23
38060: PUSH
38061: LD_INT 24
38063: PUSH
38064: EMPTY
38065: LIST
38066: LIST
38067: ST_TO_ADDR
38068: GO 38097
38070: LD_INT 47
38072: DOUBLE
38073: EQUAL
38074: IFTRUE 38078
38076: GO 38096
38078: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38079: LD_ADDR_VAR 0 3
38083: PUSH
38084: LD_INT 23
38086: PUSH
38087: LD_INT 24
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: ST_TO_ADDR
38094: GO 38097
38096: POP
// result := ( chassis in result ) ;
38097: LD_ADDR_VAR 0 3
38101: PUSH
38102: LD_VAR 0 1
38106: PUSH
38107: LD_VAR 0 3
38111: IN
38112: ST_TO_ADDR
// end ;
38113: LD_VAR 0 3
38117: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
38118: LD_INT 0
38120: PPUSH
38121: PPUSH
38122: PPUSH
38123: PPUSH
38124: PPUSH
38125: PPUSH
38126: PPUSH
// result := array ;
38127: LD_ADDR_VAR 0 5
38131: PUSH
38132: LD_VAR 0 1
38136: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
38137: LD_VAR 0 1
38141: NOT
38142: PUSH
38143: LD_VAR 0 2
38147: NOT
38148: OR
38149: PUSH
38150: LD_VAR 0 3
38154: NOT
38155: OR
38156: PUSH
38157: LD_VAR 0 2
38161: PUSH
38162: LD_VAR 0 1
38166: GREATER
38167: OR
38168: PUSH
38169: LD_VAR 0 3
38173: PUSH
38174: LD_VAR 0 1
38178: GREATER
38179: OR
38180: IFFALSE 38184
// exit ;
38182: GO 38480
// if direction then
38184: LD_VAR 0 4
38188: IFFALSE 38252
// begin d := 1 ;
38190: LD_ADDR_VAR 0 9
38194: PUSH
38195: LD_INT 1
38197: ST_TO_ADDR
// if i_from > i_to then
38198: LD_VAR 0 2
38202: PUSH
38203: LD_VAR 0 3
38207: GREATER
38208: IFFALSE 38234
// length := ( array - i_from ) + i_to else
38210: LD_ADDR_VAR 0 11
38214: PUSH
38215: LD_VAR 0 1
38219: PUSH
38220: LD_VAR 0 2
38224: MINUS
38225: PUSH
38226: LD_VAR 0 3
38230: PLUS
38231: ST_TO_ADDR
38232: GO 38250
// length := i_to - i_from ;
38234: LD_ADDR_VAR 0 11
38238: PUSH
38239: LD_VAR 0 3
38243: PUSH
38244: LD_VAR 0 2
38248: MINUS
38249: ST_TO_ADDR
// end else
38250: GO 38313
// begin d := - 1 ;
38252: LD_ADDR_VAR 0 9
38256: PUSH
38257: LD_INT 1
38259: NEG
38260: ST_TO_ADDR
// if i_from > i_to then
38261: LD_VAR 0 2
38265: PUSH
38266: LD_VAR 0 3
38270: GREATER
38271: IFFALSE 38291
// length := i_from - i_to else
38273: LD_ADDR_VAR 0 11
38277: PUSH
38278: LD_VAR 0 2
38282: PUSH
38283: LD_VAR 0 3
38287: MINUS
38288: ST_TO_ADDR
38289: GO 38313
// length := ( array - i_to ) + i_from ;
38291: LD_ADDR_VAR 0 11
38295: PUSH
38296: LD_VAR 0 1
38300: PUSH
38301: LD_VAR 0 3
38305: MINUS
38306: PUSH
38307: LD_VAR 0 2
38311: PLUS
38312: ST_TO_ADDR
// end ; if not length then
38313: LD_VAR 0 11
38317: NOT
38318: IFFALSE 38322
// exit ;
38320: GO 38480
// tmp := array ;
38322: LD_ADDR_VAR 0 10
38326: PUSH
38327: LD_VAR 0 1
38331: ST_TO_ADDR
// for i = 1 to length do
38332: LD_ADDR_VAR 0 6
38336: PUSH
38337: DOUBLE
38338: LD_INT 1
38340: DEC
38341: ST_TO_ADDR
38342: LD_VAR 0 11
38346: PUSH
38347: FOR_TO
38348: IFFALSE 38468
// begin for j = 1 to array do
38350: LD_ADDR_VAR 0 7
38354: PUSH
38355: DOUBLE
38356: LD_INT 1
38358: DEC
38359: ST_TO_ADDR
38360: LD_VAR 0 1
38364: PUSH
38365: FOR_TO
38366: IFFALSE 38454
// begin k := j + d ;
38368: LD_ADDR_VAR 0 8
38372: PUSH
38373: LD_VAR 0 7
38377: PUSH
38378: LD_VAR 0 9
38382: PLUS
38383: ST_TO_ADDR
// if k > array then
38384: LD_VAR 0 8
38388: PUSH
38389: LD_VAR 0 1
38393: GREATER
38394: IFFALSE 38404
// k := 1 ;
38396: LD_ADDR_VAR 0 8
38400: PUSH
38401: LD_INT 1
38403: ST_TO_ADDR
// if not k then
38404: LD_VAR 0 8
38408: NOT
38409: IFFALSE 38421
// k := array ;
38411: LD_ADDR_VAR 0 8
38415: PUSH
38416: LD_VAR 0 1
38420: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
38421: LD_ADDR_VAR 0 10
38425: PUSH
38426: LD_VAR 0 10
38430: PPUSH
38431: LD_VAR 0 8
38435: PPUSH
38436: LD_VAR 0 1
38440: PUSH
38441: LD_VAR 0 7
38445: ARRAY
38446: PPUSH
38447: CALL_OW 1
38451: ST_TO_ADDR
// end ;
38452: GO 38365
38454: POP
38455: POP
// array := tmp ;
38456: LD_ADDR_VAR 0 1
38460: PUSH
38461: LD_VAR 0 10
38465: ST_TO_ADDR
// end ;
38466: GO 38347
38468: POP
38469: POP
// result := array ;
38470: LD_ADDR_VAR 0 5
38474: PUSH
38475: LD_VAR 0 1
38479: ST_TO_ADDR
// end ;
38480: LD_VAR 0 5
38484: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
38485: LD_INT 0
38487: PPUSH
38488: PPUSH
// result := 0 ;
38489: LD_ADDR_VAR 0 3
38493: PUSH
38494: LD_INT 0
38496: ST_TO_ADDR
// if not array or not value in array then
38497: LD_VAR 0 1
38501: NOT
38502: PUSH
38503: LD_VAR 0 2
38507: PUSH
38508: LD_VAR 0 1
38512: IN
38513: NOT
38514: OR
38515: IFFALSE 38519
// exit ;
38517: GO 38573
// for i = 1 to array do
38519: LD_ADDR_VAR 0 4
38523: PUSH
38524: DOUBLE
38525: LD_INT 1
38527: DEC
38528: ST_TO_ADDR
38529: LD_VAR 0 1
38533: PUSH
38534: FOR_TO
38535: IFFALSE 38571
// if value = array [ i ] then
38537: LD_VAR 0 2
38541: PUSH
38542: LD_VAR 0 1
38546: PUSH
38547: LD_VAR 0 4
38551: ARRAY
38552: EQUAL
38553: IFFALSE 38569
// begin result := i ;
38555: LD_ADDR_VAR 0 3
38559: PUSH
38560: LD_VAR 0 4
38564: ST_TO_ADDR
// exit ;
38565: POP
38566: POP
38567: GO 38573
// end ;
38569: GO 38534
38571: POP
38572: POP
// end ;
38573: LD_VAR 0 3
38577: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
38578: LD_INT 0
38580: PPUSH
// vc_chassis := chassis ;
38581: LD_ADDR_OWVAR 37
38585: PUSH
38586: LD_VAR 0 1
38590: ST_TO_ADDR
// vc_engine := engine ;
38591: LD_ADDR_OWVAR 39
38595: PUSH
38596: LD_VAR 0 2
38600: ST_TO_ADDR
// vc_control := control ;
38601: LD_ADDR_OWVAR 38
38605: PUSH
38606: LD_VAR 0 3
38610: ST_TO_ADDR
// vc_weapon := weapon ;
38611: LD_ADDR_OWVAR 40
38615: PUSH
38616: LD_VAR 0 4
38620: ST_TO_ADDR
// vc_fuel_battery := fuel ;
38621: LD_ADDR_OWVAR 41
38625: PUSH
38626: LD_VAR 0 5
38630: ST_TO_ADDR
// end ;
38631: LD_VAR 0 6
38635: RET
// export function WantPlant ( unit ) ; var task ; begin
38636: LD_INT 0
38638: PPUSH
38639: PPUSH
// result := false ;
38640: LD_ADDR_VAR 0 2
38644: PUSH
38645: LD_INT 0
38647: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
38648: LD_ADDR_VAR 0 3
38652: PUSH
38653: LD_VAR 0 1
38657: PPUSH
38658: CALL_OW 437
38662: ST_TO_ADDR
// if task then
38663: LD_VAR 0 3
38667: IFFALSE 38695
// if task [ 1 ] [ 1 ] = p then
38669: LD_VAR 0 3
38673: PUSH
38674: LD_INT 1
38676: ARRAY
38677: PUSH
38678: LD_INT 1
38680: ARRAY
38681: PUSH
38682: LD_STRING p
38684: EQUAL
38685: IFFALSE 38695
// result := true ;
38687: LD_ADDR_VAR 0 2
38691: PUSH
38692: LD_INT 1
38694: ST_TO_ADDR
// end ;
38695: LD_VAR 0 2
38699: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
38700: LD_INT 0
38702: PPUSH
38703: PPUSH
38704: PPUSH
38705: PPUSH
// if pos < 1 then
38706: LD_VAR 0 2
38710: PUSH
38711: LD_INT 1
38713: LESS
38714: IFFALSE 38718
// exit ;
38716: GO 39021
// if pos = 1 then
38718: LD_VAR 0 2
38722: PUSH
38723: LD_INT 1
38725: EQUAL
38726: IFFALSE 38759
// result := Replace ( arr , pos [ 1 ] , value ) else
38728: LD_ADDR_VAR 0 4
38732: PUSH
38733: LD_VAR 0 1
38737: PPUSH
38738: LD_VAR 0 2
38742: PUSH
38743: LD_INT 1
38745: ARRAY
38746: PPUSH
38747: LD_VAR 0 3
38751: PPUSH
38752: CALL_OW 1
38756: ST_TO_ADDR
38757: GO 39021
// begin tmp := arr ;
38759: LD_ADDR_VAR 0 6
38763: PUSH
38764: LD_VAR 0 1
38768: ST_TO_ADDR
// s_arr := [ tmp ] ;
38769: LD_ADDR_VAR 0 7
38773: PUSH
38774: LD_VAR 0 6
38778: PUSH
38779: EMPTY
38780: LIST
38781: ST_TO_ADDR
// for i = 1 to pos - 1 do
38782: LD_ADDR_VAR 0 5
38786: PUSH
38787: DOUBLE
38788: LD_INT 1
38790: DEC
38791: ST_TO_ADDR
38792: LD_VAR 0 2
38796: PUSH
38797: LD_INT 1
38799: MINUS
38800: PUSH
38801: FOR_TO
38802: IFFALSE 38847
// begin tmp := tmp [ pos [ i ] ] ;
38804: LD_ADDR_VAR 0 6
38808: PUSH
38809: LD_VAR 0 6
38813: PUSH
38814: LD_VAR 0 2
38818: PUSH
38819: LD_VAR 0 5
38823: ARRAY
38824: ARRAY
38825: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
38826: LD_ADDR_VAR 0 7
38830: PUSH
38831: LD_VAR 0 7
38835: PUSH
38836: LD_VAR 0 6
38840: PUSH
38841: EMPTY
38842: LIST
38843: ADD
38844: ST_TO_ADDR
// end ;
38845: GO 38801
38847: POP
38848: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
38849: LD_ADDR_VAR 0 6
38853: PUSH
38854: LD_VAR 0 6
38858: PPUSH
38859: LD_VAR 0 2
38863: PUSH
38864: LD_VAR 0 2
38868: ARRAY
38869: PPUSH
38870: LD_VAR 0 3
38874: PPUSH
38875: CALL_OW 1
38879: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38880: LD_ADDR_VAR 0 7
38884: PUSH
38885: LD_VAR 0 7
38889: PPUSH
38890: LD_VAR 0 7
38894: PPUSH
38895: LD_VAR 0 6
38899: PPUSH
38900: CALL_OW 1
38904: ST_TO_ADDR
// for i = s_arr downto 2 do
38905: LD_ADDR_VAR 0 5
38909: PUSH
38910: DOUBLE
38911: LD_VAR 0 7
38915: INC
38916: ST_TO_ADDR
38917: LD_INT 2
38919: PUSH
38920: FOR_DOWNTO
38921: IFFALSE 39005
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38923: LD_ADDR_VAR 0 6
38927: PUSH
38928: LD_VAR 0 7
38932: PUSH
38933: LD_VAR 0 5
38937: PUSH
38938: LD_INT 1
38940: MINUS
38941: ARRAY
38942: PPUSH
38943: LD_VAR 0 2
38947: PUSH
38948: LD_VAR 0 5
38952: PUSH
38953: LD_INT 1
38955: MINUS
38956: ARRAY
38957: PPUSH
38958: LD_VAR 0 7
38962: PUSH
38963: LD_VAR 0 5
38967: ARRAY
38968: PPUSH
38969: CALL_OW 1
38973: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38974: LD_ADDR_VAR 0 7
38978: PUSH
38979: LD_VAR 0 7
38983: PPUSH
38984: LD_VAR 0 5
38988: PUSH
38989: LD_INT 1
38991: MINUS
38992: PPUSH
38993: LD_VAR 0 6
38997: PPUSH
38998: CALL_OW 1
39002: ST_TO_ADDR
// end ;
39003: GO 38920
39005: POP
39006: POP
// result := s_arr [ 1 ] ;
39007: LD_ADDR_VAR 0 4
39011: PUSH
39012: LD_VAR 0 7
39016: PUSH
39017: LD_INT 1
39019: ARRAY
39020: ST_TO_ADDR
// end ; end ;
39021: LD_VAR 0 4
39025: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
39026: LD_INT 0
39028: PPUSH
39029: PPUSH
// if not list then
39030: LD_VAR 0 1
39034: NOT
39035: IFFALSE 39039
// exit ;
39037: GO 39130
// i := list [ pos1 ] ;
39039: LD_ADDR_VAR 0 5
39043: PUSH
39044: LD_VAR 0 1
39048: PUSH
39049: LD_VAR 0 2
39053: ARRAY
39054: ST_TO_ADDR
// if not i then
39055: LD_VAR 0 5
39059: NOT
39060: IFFALSE 39064
// exit ;
39062: GO 39130
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
39064: LD_ADDR_VAR 0 1
39068: PUSH
39069: LD_VAR 0 1
39073: PPUSH
39074: LD_VAR 0 2
39078: PPUSH
39079: LD_VAR 0 1
39083: PUSH
39084: LD_VAR 0 3
39088: ARRAY
39089: PPUSH
39090: CALL_OW 1
39094: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
39095: LD_ADDR_VAR 0 1
39099: PUSH
39100: LD_VAR 0 1
39104: PPUSH
39105: LD_VAR 0 3
39109: PPUSH
39110: LD_VAR 0 5
39114: PPUSH
39115: CALL_OW 1
39119: ST_TO_ADDR
// result := list ;
39120: LD_ADDR_VAR 0 4
39124: PUSH
39125: LD_VAR 0 1
39129: ST_TO_ADDR
// end ;
39130: LD_VAR 0 4
39134: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
39135: LD_INT 0
39137: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
39138: LD_ADDR_VAR 0 5
39142: PUSH
39143: LD_VAR 0 1
39147: PPUSH
39148: CALL_OW 250
39152: PPUSH
39153: LD_VAR 0 1
39157: PPUSH
39158: CALL_OW 251
39162: PPUSH
39163: LD_VAR 0 2
39167: PPUSH
39168: LD_VAR 0 3
39172: PPUSH
39173: LD_VAR 0 4
39177: PPUSH
39178: CALL 39556 0 5
39182: ST_TO_ADDR
// end ;
39183: LD_VAR 0 5
39187: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
39188: LD_INT 0
39190: PPUSH
39191: PPUSH
39192: PPUSH
39193: PPUSH
// if not list or not unit then
39194: LD_VAR 0 2
39198: NOT
39199: PUSH
39200: LD_VAR 0 1
39204: NOT
39205: OR
39206: IFFALSE 39210
// exit ;
39208: GO 39551
// result := [ ] ;
39210: LD_ADDR_VAR 0 5
39214: PUSH
39215: EMPTY
39216: ST_TO_ADDR
// for i in list do
39217: LD_ADDR_VAR 0 6
39221: PUSH
39222: LD_VAR 0 2
39226: PUSH
39227: FOR_IN
39228: IFFALSE 39446
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
39230: LD_ADDR_VAR 0 8
39234: PUSH
39235: LD_VAR 0 1
39239: PPUSH
39240: LD_VAR 0 6
39244: PUSH
39245: LD_INT 1
39247: ARRAY
39248: PPUSH
39249: LD_VAR 0 6
39253: PUSH
39254: LD_INT 2
39256: ARRAY
39257: PPUSH
39258: CALL_OW 297
39262: ST_TO_ADDR
// if not Count ( result ) then
39263: LD_VAR 0 5
39267: PPUSH
39268: CALL 35840 0 1
39272: NOT
39273: IFFALSE 39306
// begin result := Join ( result , [ i , tmp ] ) ;
39275: LD_ADDR_VAR 0 5
39279: PUSH
39280: LD_VAR 0 5
39284: PPUSH
39285: LD_VAR 0 6
39289: PUSH
39290: LD_VAR 0 8
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PPUSH
39299: CALL 71429 0 2
39303: ST_TO_ADDR
// continue ;
39304: GO 39227
// end ; if result [ result ] [ 2 ] <= tmp then
39306: LD_VAR 0 5
39310: PUSH
39311: LD_VAR 0 5
39315: ARRAY
39316: PUSH
39317: LD_INT 2
39319: ARRAY
39320: PUSH
39321: LD_VAR 0 8
39325: LESSEQUAL
39326: IFFALSE 39359
// result := Join ( result , [ i , tmp ] ) else
39328: LD_ADDR_VAR 0 5
39332: PUSH
39333: LD_VAR 0 5
39337: PPUSH
39338: LD_VAR 0 6
39342: PUSH
39343: LD_VAR 0 8
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PPUSH
39352: CALL 71429 0 2
39356: ST_TO_ADDR
39357: GO 39444
// begin for j := 1 to Count ( result ) do
39359: LD_ADDR_VAR 0 7
39363: PUSH
39364: DOUBLE
39365: LD_INT 1
39367: DEC
39368: ST_TO_ADDR
39369: LD_VAR 0 5
39373: PPUSH
39374: CALL 35840 0 1
39378: PUSH
39379: FOR_TO
39380: IFFALSE 39442
// begin if tmp < result [ j ] [ 2 ] then
39382: LD_VAR 0 8
39386: PUSH
39387: LD_VAR 0 5
39391: PUSH
39392: LD_VAR 0 7
39396: ARRAY
39397: PUSH
39398: LD_INT 2
39400: ARRAY
39401: LESS
39402: IFFALSE 39440
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39404: LD_ADDR_VAR 0 5
39408: PUSH
39409: LD_VAR 0 5
39413: PPUSH
39414: LD_VAR 0 7
39418: PPUSH
39419: LD_VAR 0 6
39423: PUSH
39424: LD_VAR 0 8
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PPUSH
39433: CALL_OW 2
39437: ST_TO_ADDR
// break ;
39438: GO 39442
// end ; end ;
39440: GO 39379
39442: POP
39443: POP
// end ; end ;
39444: GO 39227
39446: POP
39447: POP
// if result and not asc then
39448: LD_VAR 0 5
39452: PUSH
39453: LD_VAR 0 3
39457: NOT
39458: AND
39459: IFFALSE 39476
// result := ReverseArray ( result ) ;
39461: LD_ADDR_VAR 0 5
39465: PUSH
39466: LD_VAR 0 5
39470: PPUSH
39471: CALL 66716 0 1
39475: ST_TO_ADDR
// tmp := [ ] ;
39476: LD_ADDR_VAR 0 8
39480: PUSH
39481: EMPTY
39482: ST_TO_ADDR
// if mode then
39483: LD_VAR 0 4
39487: IFFALSE 39551
// begin for i := 1 to result do
39489: LD_ADDR_VAR 0 6
39493: PUSH
39494: DOUBLE
39495: LD_INT 1
39497: DEC
39498: ST_TO_ADDR
39499: LD_VAR 0 5
39503: PUSH
39504: FOR_TO
39505: IFFALSE 39539
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
39507: LD_ADDR_VAR 0 8
39511: PUSH
39512: LD_VAR 0 8
39516: PPUSH
39517: LD_VAR 0 5
39521: PUSH
39522: LD_VAR 0 6
39526: ARRAY
39527: PUSH
39528: LD_INT 1
39530: ARRAY
39531: PPUSH
39532: CALL 71429 0 2
39536: ST_TO_ADDR
39537: GO 39504
39539: POP
39540: POP
// result := tmp ;
39541: LD_ADDR_VAR 0 5
39545: PUSH
39546: LD_VAR 0 8
39550: ST_TO_ADDR
// end ; end ;
39551: LD_VAR 0 5
39555: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
39556: LD_INT 0
39558: PPUSH
39559: PPUSH
39560: PPUSH
39561: PPUSH
// if not list then
39562: LD_VAR 0 3
39566: NOT
39567: IFFALSE 39571
// exit ;
39569: GO 39959
// result := [ ] ;
39571: LD_ADDR_VAR 0 6
39575: PUSH
39576: EMPTY
39577: ST_TO_ADDR
// for i in list do
39578: LD_ADDR_VAR 0 7
39582: PUSH
39583: LD_VAR 0 3
39587: PUSH
39588: FOR_IN
39589: IFFALSE 39791
// begin tmp := GetDistUnitXY ( i , x , y ) ;
39591: LD_ADDR_VAR 0 9
39595: PUSH
39596: LD_VAR 0 7
39600: PPUSH
39601: LD_VAR 0 1
39605: PPUSH
39606: LD_VAR 0 2
39610: PPUSH
39611: CALL_OW 297
39615: ST_TO_ADDR
// if not result then
39616: LD_VAR 0 6
39620: NOT
39621: IFFALSE 39647
// result := [ [ i , tmp ] ] else
39623: LD_ADDR_VAR 0 6
39627: PUSH
39628: LD_VAR 0 7
39632: PUSH
39633: LD_VAR 0 9
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: EMPTY
39643: LIST
39644: ST_TO_ADDR
39645: GO 39789
// begin if result [ result ] [ 2 ] < tmp then
39647: LD_VAR 0 6
39651: PUSH
39652: LD_VAR 0 6
39656: ARRAY
39657: PUSH
39658: LD_INT 2
39660: ARRAY
39661: PUSH
39662: LD_VAR 0 9
39666: LESS
39667: IFFALSE 39709
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
39669: LD_ADDR_VAR 0 6
39673: PUSH
39674: LD_VAR 0 6
39678: PPUSH
39679: LD_VAR 0 6
39683: PUSH
39684: LD_INT 1
39686: PLUS
39687: PPUSH
39688: LD_VAR 0 7
39692: PUSH
39693: LD_VAR 0 9
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PPUSH
39702: CALL_OW 2
39706: ST_TO_ADDR
39707: GO 39789
// for j = 1 to result do
39709: LD_ADDR_VAR 0 8
39713: PUSH
39714: DOUBLE
39715: LD_INT 1
39717: DEC
39718: ST_TO_ADDR
39719: LD_VAR 0 6
39723: PUSH
39724: FOR_TO
39725: IFFALSE 39787
// begin if tmp < result [ j ] [ 2 ] then
39727: LD_VAR 0 9
39731: PUSH
39732: LD_VAR 0 6
39736: PUSH
39737: LD_VAR 0 8
39741: ARRAY
39742: PUSH
39743: LD_INT 2
39745: ARRAY
39746: LESS
39747: IFFALSE 39785
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39749: LD_ADDR_VAR 0 6
39753: PUSH
39754: LD_VAR 0 6
39758: PPUSH
39759: LD_VAR 0 8
39763: PPUSH
39764: LD_VAR 0 7
39768: PUSH
39769: LD_VAR 0 9
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PPUSH
39778: CALL_OW 2
39782: ST_TO_ADDR
// break ;
39783: GO 39787
// end ; end ;
39785: GO 39724
39787: POP
39788: POP
// end ; end ;
39789: GO 39588
39791: POP
39792: POP
// if result and not asc then
39793: LD_VAR 0 6
39797: PUSH
39798: LD_VAR 0 4
39802: NOT
39803: AND
39804: IFFALSE 39879
// begin tmp := result ;
39806: LD_ADDR_VAR 0 9
39810: PUSH
39811: LD_VAR 0 6
39815: ST_TO_ADDR
// for i = tmp downto 1 do
39816: LD_ADDR_VAR 0 7
39820: PUSH
39821: DOUBLE
39822: LD_VAR 0 9
39826: INC
39827: ST_TO_ADDR
39828: LD_INT 1
39830: PUSH
39831: FOR_DOWNTO
39832: IFFALSE 39877
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
39834: LD_ADDR_VAR 0 6
39838: PUSH
39839: LD_VAR 0 6
39843: PPUSH
39844: LD_VAR 0 9
39848: PUSH
39849: LD_VAR 0 7
39853: MINUS
39854: PUSH
39855: LD_INT 1
39857: PLUS
39858: PPUSH
39859: LD_VAR 0 9
39863: PUSH
39864: LD_VAR 0 7
39868: ARRAY
39869: PPUSH
39870: CALL_OW 1
39874: ST_TO_ADDR
39875: GO 39831
39877: POP
39878: POP
// end ; tmp := [ ] ;
39879: LD_ADDR_VAR 0 9
39883: PUSH
39884: EMPTY
39885: ST_TO_ADDR
// if mode then
39886: LD_VAR 0 5
39890: IFFALSE 39959
// begin for i = 1 to result do
39892: LD_ADDR_VAR 0 7
39896: PUSH
39897: DOUBLE
39898: LD_INT 1
39900: DEC
39901: ST_TO_ADDR
39902: LD_VAR 0 6
39906: PUSH
39907: FOR_TO
39908: IFFALSE 39947
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
39910: LD_ADDR_VAR 0 9
39914: PUSH
39915: LD_VAR 0 9
39919: PPUSH
39920: LD_VAR 0 7
39924: PPUSH
39925: LD_VAR 0 6
39929: PUSH
39930: LD_VAR 0 7
39934: ARRAY
39935: PUSH
39936: LD_INT 1
39938: ARRAY
39939: PPUSH
39940: CALL_OW 1
39944: ST_TO_ADDR
39945: GO 39907
39947: POP
39948: POP
// result := tmp ;
39949: LD_ADDR_VAR 0 6
39953: PUSH
39954: LD_VAR 0 9
39958: ST_TO_ADDR
// end ; end ;
39959: LD_VAR 0 6
39963: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
39964: LD_INT 0
39966: PPUSH
39967: PPUSH
39968: PPUSH
39969: PPUSH
39970: PPUSH
39971: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
39972: LD_ADDR_VAR 0 5
39976: PUSH
39977: LD_INT 0
39979: PUSH
39980: LD_INT 0
39982: PUSH
39983: LD_INT 0
39985: PUSH
39986: EMPTY
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: ST_TO_ADDR
// if not x or not y then
39994: LD_VAR 0 2
39998: NOT
39999: PUSH
40000: LD_VAR 0 3
40004: NOT
40005: OR
40006: IFFALSE 40010
// exit ;
40008: GO 41660
// if not range then
40010: LD_VAR 0 4
40014: NOT
40015: IFFALSE 40025
// range := 10 ;
40017: LD_ADDR_VAR 0 4
40021: PUSH
40022: LD_INT 10
40024: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40025: LD_ADDR_VAR 0 8
40029: PUSH
40030: LD_INT 81
40032: PUSH
40033: LD_VAR 0 1
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: PUSH
40042: LD_INT 92
40044: PUSH
40045: LD_VAR 0 2
40049: PUSH
40050: LD_VAR 0 3
40054: PUSH
40055: LD_VAR 0 4
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 3
40068: PUSH
40069: LD_INT 21
40071: PUSH
40072: LD_INT 3
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: LIST
40087: PPUSH
40088: CALL_OW 69
40092: ST_TO_ADDR
// if not tmp then
40093: LD_VAR 0 8
40097: NOT
40098: IFFALSE 40102
// exit ;
40100: GO 41660
// for i in tmp do
40102: LD_ADDR_VAR 0 6
40106: PUSH
40107: LD_VAR 0 8
40111: PUSH
40112: FOR_IN
40113: IFFALSE 41635
// begin points := [ 0 , 0 , 0 ] ;
40115: LD_ADDR_VAR 0 9
40119: PUSH
40120: LD_INT 0
40122: PUSH
40123: LD_INT 0
40125: PUSH
40126: LD_INT 0
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: LIST
40133: ST_TO_ADDR
// bpoints := 1 ;
40134: LD_ADDR_VAR 0 10
40138: PUSH
40139: LD_INT 1
40141: ST_TO_ADDR
// case GetType ( i ) of unit_human :
40142: LD_VAR 0 6
40146: PPUSH
40147: CALL_OW 247
40151: PUSH
40152: LD_INT 1
40154: DOUBLE
40155: EQUAL
40156: IFTRUE 40160
40158: GO 40738
40160: POP
// begin if GetClass ( i ) = 1 then
40161: LD_VAR 0 6
40165: PPUSH
40166: CALL_OW 257
40170: PUSH
40171: LD_INT 1
40173: EQUAL
40174: IFFALSE 40195
// points := [ 10 , 5 , 3 ] ;
40176: LD_ADDR_VAR 0 9
40180: PUSH
40181: LD_INT 10
40183: PUSH
40184: LD_INT 5
40186: PUSH
40187: LD_INT 3
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: LIST
40194: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
40195: LD_VAR 0 6
40199: PPUSH
40200: CALL_OW 257
40204: PUSH
40205: LD_INT 2
40207: PUSH
40208: LD_INT 3
40210: PUSH
40211: LD_INT 4
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: LIST
40218: IN
40219: IFFALSE 40240
// points := [ 3 , 2 , 1 ] ;
40221: LD_ADDR_VAR 0 9
40225: PUSH
40226: LD_INT 3
40228: PUSH
40229: LD_INT 2
40231: PUSH
40232: LD_INT 1
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: LIST
40239: ST_TO_ADDR
// if GetClass ( i ) = 5 then
40240: LD_VAR 0 6
40244: PPUSH
40245: CALL_OW 257
40249: PUSH
40250: LD_INT 5
40252: EQUAL
40253: IFFALSE 40274
// points := [ 130 , 5 , 2 ] ;
40255: LD_ADDR_VAR 0 9
40259: PUSH
40260: LD_INT 130
40262: PUSH
40263: LD_INT 5
40265: PUSH
40266: LD_INT 2
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: LIST
40273: ST_TO_ADDR
// if GetClass ( i ) = 8 then
40274: LD_VAR 0 6
40278: PPUSH
40279: CALL_OW 257
40283: PUSH
40284: LD_INT 8
40286: EQUAL
40287: IFFALSE 40308
// points := [ 35 , 35 , 30 ] ;
40289: LD_ADDR_VAR 0 9
40293: PUSH
40294: LD_INT 35
40296: PUSH
40297: LD_INT 35
40299: PUSH
40300: LD_INT 30
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: LIST
40307: ST_TO_ADDR
// if GetClass ( i ) = 9 then
40308: LD_VAR 0 6
40312: PPUSH
40313: CALL_OW 257
40317: PUSH
40318: LD_INT 9
40320: EQUAL
40321: IFFALSE 40342
// points := [ 20 , 55 , 40 ] ;
40323: LD_ADDR_VAR 0 9
40327: PUSH
40328: LD_INT 20
40330: PUSH
40331: LD_INT 55
40333: PUSH
40334: LD_INT 40
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: LIST
40341: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
40342: LD_VAR 0 6
40346: PPUSH
40347: CALL_OW 257
40351: PUSH
40352: LD_INT 12
40354: PUSH
40355: LD_INT 16
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: IN
40362: IFFALSE 40383
// points := [ 5 , 3 , 2 ] ;
40364: LD_ADDR_VAR 0 9
40368: PUSH
40369: LD_INT 5
40371: PUSH
40372: LD_INT 3
40374: PUSH
40375: LD_INT 2
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: LIST
40382: ST_TO_ADDR
// if GetClass ( i ) = 17 then
40383: LD_VAR 0 6
40387: PPUSH
40388: CALL_OW 257
40392: PUSH
40393: LD_INT 17
40395: EQUAL
40396: IFFALSE 40417
// points := [ 100 , 50 , 75 ] ;
40398: LD_ADDR_VAR 0 9
40402: PUSH
40403: LD_INT 100
40405: PUSH
40406: LD_INT 50
40408: PUSH
40409: LD_INT 75
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: LIST
40416: ST_TO_ADDR
// if GetClass ( i ) = 15 then
40417: LD_VAR 0 6
40421: PPUSH
40422: CALL_OW 257
40426: PUSH
40427: LD_INT 15
40429: EQUAL
40430: IFFALSE 40451
// points := [ 10 , 5 , 3 ] ;
40432: LD_ADDR_VAR 0 9
40436: PUSH
40437: LD_INT 10
40439: PUSH
40440: LD_INT 5
40442: PUSH
40443: LD_INT 3
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: LIST
40450: ST_TO_ADDR
// if GetClass ( i ) = 14 then
40451: LD_VAR 0 6
40455: PPUSH
40456: CALL_OW 257
40460: PUSH
40461: LD_INT 14
40463: EQUAL
40464: IFFALSE 40485
// points := [ 10 , 0 , 0 ] ;
40466: LD_ADDR_VAR 0 9
40470: PUSH
40471: LD_INT 10
40473: PUSH
40474: LD_INT 0
40476: PUSH
40477: LD_INT 0
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: LIST
40484: ST_TO_ADDR
// if GetClass ( i ) = 11 then
40485: LD_VAR 0 6
40489: PPUSH
40490: CALL_OW 257
40494: PUSH
40495: LD_INT 11
40497: EQUAL
40498: IFFALSE 40519
// points := [ 30 , 10 , 5 ] ;
40500: LD_ADDR_VAR 0 9
40504: PUSH
40505: LD_INT 30
40507: PUSH
40508: LD_INT 10
40510: PUSH
40511: LD_INT 5
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: LIST
40518: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
40519: LD_VAR 0 1
40523: PPUSH
40524: LD_INT 5
40526: PPUSH
40527: CALL_OW 321
40531: PUSH
40532: LD_INT 2
40534: EQUAL
40535: IFFALSE 40552
// bpoints := bpoints * 1.8 ;
40537: LD_ADDR_VAR 0 10
40541: PUSH
40542: LD_VAR 0 10
40546: PUSH
40547: LD_REAL  1.80000000000000E+0000
40550: MUL
40551: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
40552: LD_VAR 0 6
40556: PPUSH
40557: CALL_OW 257
40561: PUSH
40562: LD_INT 1
40564: PUSH
40565: LD_INT 2
40567: PUSH
40568: LD_INT 3
40570: PUSH
40571: LD_INT 4
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: IN
40580: PUSH
40581: LD_VAR 0 1
40585: PPUSH
40586: LD_INT 51
40588: PPUSH
40589: CALL_OW 321
40593: PUSH
40594: LD_INT 2
40596: EQUAL
40597: AND
40598: IFFALSE 40615
// bpoints := bpoints * 1.2 ;
40600: LD_ADDR_VAR 0 10
40604: PUSH
40605: LD_VAR 0 10
40609: PUSH
40610: LD_REAL  1.20000000000000E+0000
40613: MUL
40614: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
40615: LD_VAR 0 6
40619: PPUSH
40620: CALL_OW 257
40624: PUSH
40625: LD_INT 5
40627: PUSH
40628: LD_INT 7
40630: PUSH
40631: LD_INT 9
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: LIST
40638: IN
40639: PUSH
40640: LD_VAR 0 1
40644: PPUSH
40645: LD_INT 52
40647: PPUSH
40648: CALL_OW 321
40652: PUSH
40653: LD_INT 2
40655: EQUAL
40656: AND
40657: IFFALSE 40674
// bpoints := bpoints * 1.5 ;
40659: LD_ADDR_VAR 0 10
40663: PUSH
40664: LD_VAR 0 10
40668: PUSH
40669: LD_REAL  1.50000000000000E+0000
40672: MUL
40673: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
40674: LD_VAR 0 1
40678: PPUSH
40679: LD_INT 66
40681: PPUSH
40682: CALL_OW 321
40686: PUSH
40687: LD_INT 2
40689: EQUAL
40690: IFFALSE 40707
// bpoints := bpoints * 1.1 ;
40692: LD_ADDR_VAR 0 10
40696: PUSH
40697: LD_VAR 0 10
40701: PUSH
40702: LD_REAL  1.10000000000000E+0000
40705: MUL
40706: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
40707: LD_ADDR_VAR 0 10
40711: PUSH
40712: LD_VAR 0 10
40716: PUSH
40717: LD_VAR 0 6
40721: PPUSH
40722: LD_INT 1
40724: PPUSH
40725: CALL_OW 259
40729: PUSH
40730: LD_REAL  1.15000000000000E+0000
40733: MUL
40734: MUL
40735: ST_TO_ADDR
// end ; unit_vehicle :
40736: GO 41564
40738: LD_INT 2
40740: DOUBLE
40741: EQUAL
40742: IFTRUE 40746
40744: GO 41552
40746: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
40747: LD_VAR 0 6
40751: PPUSH
40752: CALL_OW 264
40756: PUSH
40757: LD_INT 2
40759: PUSH
40760: LD_INT 42
40762: PUSH
40763: LD_INT 24
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: LIST
40770: IN
40771: IFFALSE 40792
// points := [ 25 , 5 , 3 ] ;
40773: LD_ADDR_VAR 0 9
40777: PUSH
40778: LD_INT 25
40780: PUSH
40781: LD_INT 5
40783: PUSH
40784: LD_INT 3
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: LIST
40791: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
40792: LD_VAR 0 6
40796: PPUSH
40797: CALL_OW 264
40801: PUSH
40802: LD_INT 4
40804: PUSH
40805: LD_INT 43
40807: PUSH
40808: LD_INT 25
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: LIST
40815: IN
40816: IFFALSE 40837
// points := [ 40 , 15 , 5 ] ;
40818: LD_ADDR_VAR 0 9
40822: PUSH
40823: LD_INT 40
40825: PUSH
40826: LD_INT 15
40828: PUSH
40829: LD_INT 5
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: LIST
40836: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
40837: LD_VAR 0 6
40841: PPUSH
40842: CALL_OW 264
40846: PUSH
40847: LD_INT 3
40849: PUSH
40850: LD_INT 23
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: IN
40857: IFFALSE 40878
// points := [ 7 , 25 , 8 ] ;
40859: LD_ADDR_VAR 0 9
40863: PUSH
40864: LD_INT 7
40866: PUSH
40867: LD_INT 25
40869: PUSH
40870: LD_INT 8
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: LIST
40877: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
40878: LD_VAR 0 6
40882: PPUSH
40883: CALL_OW 264
40887: PUSH
40888: LD_INT 5
40890: PUSH
40891: LD_INT 27
40893: PUSH
40894: LD_INT 44
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: LIST
40901: IN
40902: IFFALSE 40923
// points := [ 14 , 50 , 16 ] ;
40904: LD_ADDR_VAR 0 9
40908: PUSH
40909: LD_INT 14
40911: PUSH
40912: LD_INT 50
40914: PUSH
40915: LD_INT 16
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: LIST
40922: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
40923: LD_VAR 0 6
40927: PPUSH
40928: CALL_OW 264
40932: PUSH
40933: LD_INT 6
40935: PUSH
40936: LD_INT 46
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: IN
40943: IFFALSE 40964
// points := [ 32 , 120 , 70 ] ;
40945: LD_ADDR_VAR 0 9
40949: PUSH
40950: LD_INT 32
40952: PUSH
40953: LD_INT 120
40955: PUSH
40956: LD_INT 70
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: LIST
40963: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
40964: LD_VAR 0 6
40968: PPUSH
40969: CALL_OW 264
40973: PUSH
40974: LD_INT 7
40976: PUSH
40977: LD_INT 28
40979: PUSH
40980: LD_INT 45
40982: PUSH
40983: LD_INT 92
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: IN
40992: IFFALSE 41013
// points := [ 35 , 20 , 45 ] ;
40994: LD_ADDR_VAR 0 9
40998: PUSH
40999: LD_INT 35
41001: PUSH
41002: LD_INT 20
41004: PUSH
41005: LD_INT 45
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: LIST
41012: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
41013: LD_VAR 0 6
41017: PPUSH
41018: CALL_OW 264
41022: PUSH
41023: LD_INT 47
41025: PUSH
41026: EMPTY
41027: LIST
41028: IN
41029: IFFALSE 41050
// points := [ 67 , 45 , 75 ] ;
41031: LD_ADDR_VAR 0 9
41035: PUSH
41036: LD_INT 67
41038: PUSH
41039: LD_INT 45
41041: PUSH
41042: LD_INT 75
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: LIST
41049: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
41050: LD_VAR 0 6
41054: PPUSH
41055: CALL_OW 264
41059: PUSH
41060: LD_INT 26
41062: PUSH
41063: EMPTY
41064: LIST
41065: IN
41066: IFFALSE 41087
// points := [ 120 , 30 , 80 ] ;
41068: LD_ADDR_VAR 0 9
41072: PUSH
41073: LD_INT 120
41075: PUSH
41076: LD_INT 30
41078: PUSH
41079: LD_INT 80
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: LIST
41086: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
41087: LD_VAR 0 6
41091: PPUSH
41092: CALL_OW 264
41096: PUSH
41097: LD_INT 22
41099: PUSH
41100: EMPTY
41101: LIST
41102: IN
41103: IFFALSE 41124
// points := [ 40 , 1 , 1 ] ;
41105: LD_ADDR_VAR 0 9
41109: PUSH
41110: LD_INT 40
41112: PUSH
41113: LD_INT 1
41115: PUSH
41116: LD_INT 1
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: LIST
41123: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
41124: LD_VAR 0 6
41128: PPUSH
41129: CALL_OW 264
41133: PUSH
41134: LD_INT 29
41136: PUSH
41137: EMPTY
41138: LIST
41139: IN
41140: IFFALSE 41161
// points := [ 70 , 200 , 400 ] ;
41142: LD_ADDR_VAR 0 9
41146: PUSH
41147: LD_INT 70
41149: PUSH
41150: LD_INT 200
41152: PUSH
41153: LD_INT 400
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: LIST
41160: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
41161: LD_VAR 0 6
41165: PPUSH
41166: CALL_OW 264
41170: PUSH
41171: LD_INT 14
41173: PUSH
41174: LD_INT 53
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: IN
41181: IFFALSE 41202
// points := [ 40 , 10 , 20 ] ;
41183: LD_ADDR_VAR 0 9
41187: PUSH
41188: LD_INT 40
41190: PUSH
41191: LD_INT 10
41193: PUSH
41194: LD_INT 20
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: LIST
41201: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
41202: LD_VAR 0 6
41206: PPUSH
41207: CALL_OW 264
41211: PUSH
41212: LD_INT 9
41214: PUSH
41215: EMPTY
41216: LIST
41217: IN
41218: IFFALSE 41239
// points := [ 5 , 70 , 20 ] ;
41220: LD_ADDR_VAR 0 9
41224: PUSH
41225: LD_INT 5
41227: PUSH
41228: LD_INT 70
41230: PUSH
41231: LD_INT 20
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: LIST
41238: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
41239: LD_VAR 0 6
41243: PPUSH
41244: CALL_OW 264
41248: PUSH
41249: LD_INT 10
41251: PUSH
41252: EMPTY
41253: LIST
41254: IN
41255: IFFALSE 41276
// points := [ 35 , 110 , 70 ] ;
41257: LD_ADDR_VAR 0 9
41261: PUSH
41262: LD_INT 35
41264: PUSH
41265: LD_INT 110
41267: PUSH
41268: LD_INT 70
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: LIST
41275: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
41276: LD_VAR 0 6
41280: PPUSH
41281: CALL_OW 265
41285: PUSH
41286: LD_INT 25
41288: EQUAL
41289: IFFALSE 41310
// points := [ 80 , 65 , 100 ] ;
41291: LD_ADDR_VAR 0 9
41295: PUSH
41296: LD_INT 80
41298: PUSH
41299: LD_INT 65
41301: PUSH
41302: LD_INT 100
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: LIST
41309: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
41310: LD_VAR 0 6
41314: PPUSH
41315: CALL_OW 263
41319: PUSH
41320: LD_INT 1
41322: EQUAL
41323: IFFALSE 41358
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
41325: LD_ADDR_VAR 0 10
41329: PUSH
41330: LD_VAR 0 10
41334: PUSH
41335: LD_VAR 0 6
41339: PPUSH
41340: CALL_OW 311
41344: PPUSH
41345: LD_INT 3
41347: PPUSH
41348: CALL_OW 259
41352: PUSH
41353: LD_INT 4
41355: MUL
41356: MUL
41357: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
41358: LD_VAR 0 6
41362: PPUSH
41363: CALL_OW 263
41367: PUSH
41368: LD_INT 2
41370: EQUAL
41371: IFFALSE 41422
// begin j := IsControledBy ( i ) ;
41373: LD_ADDR_VAR 0 7
41377: PUSH
41378: LD_VAR 0 6
41382: PPUSH
41383: CALL_OW 312
41387: ST_TO_ADDR
// if j then
41388: LD_VAR 0 7
41392: IFFALSE 41422
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
41394: LD_ADDR_VAR 0 10
41398: PUSH
41399: LD_VAR 0 10
41403: PUSH
41404: LD_VAR 0 7
41408: PPUSH
41409: LD_INT 3
41411: PPUSH
41412: CALL_OW 259
41416: PUSH
41417: LD_INT 3
41419: MUL
41420: MUL
41421: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
41422: LD_VAR 0 6
41426: PPUSH
41427: CALL_OW 264
41431: PUSH
41432: LD_INT 5
41434: PUSH
41435: LD_INT 6
41437: PUSH
41438: LD_INT 46
41440: PUSH
41441: LD_INT 44
41443: PUSH
41444: LD_INT 47
41446: PUSH
41447: LD_INT 45
41449: PUSH
41450: LD_INT 28
41452: PUSH
41453: LD_INT 7
41455: PUSH
41456: LD_INT 27
41458: PUSH
41459: LD_INT 29
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: IN
41474: PUSH
41475: LD_VAR 0 1
41479: PPUSH
41480: LD_INT 52
41482: PPUSH
41483: CALL_OW 321
41487: PUSH
41488: LD_INT 2
41490: EQUAL
41491: AND
41492: IFFALSE 41509
// bpoints := bpoints * 1.2 ;
41494: LD_ADDR_VAR 0 10
41498: PUSH
41499: LD_VAR 0 10
41503: PUSH
41504: LD_REAL  1.20000000000000E+0000
41507: MUL
41508: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
41509: LD_VAR 0 6
41513: PPUSH
41514: CALL_OW 264
41518: PUSH
41519: LD_INT 6
41521: PUSH
41522: LD_INT 46
41524: PUSH
41525: LD_INT 47
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: LIST
41532: IN
41533: IFFALSE 41550
// bpoints := bpoints * 1.2 ;
41535: LD_ADDR_VAR 0 10
41539: PUSH
41540: LD_VAR 0 10
41544: PUSH
41545: LD_REAL  1.20000000000000E+0000
41548: MUL
41549: ST_TO_ADDR
// end ; unit_building :
41550: GO 41564
41552: LD_INT 3
41554: DOUBLE
41555: EQUAL
41556: IFTRUE 41560
41558: GO 41563
41560: POP
// ; end ;
41561: GO 41564
41563: POP
// for j = 1 to 3 do
41564: LD_ADDR_VAR 0 7
41568: PUSH
41569: DOUBLE
41570: LD_INT 1
41572: DEC
41573: ST_TO_ADDR
41574: LD_INT 3
41576: PUSH
41577: FOR_TO
41578: IFFALSE 41631
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
41580: LD_ADDR_VAR 0 5
41584: PUSH
41585: LD_VAR 0 5
41589: PPUSH
41590: LD_VAR 0 7
41594: PPUSH
41595: LD_VAR 0 5
41599: PUSH
41600: LD_VAR 0 7
41604: ARRAY
41605: PUSH
41606: LD_VAR 0 9
41610: PUSH
41611: LD_VAR 0 7
41615: ARRAY
41616: PUSH
41617: LD_VAR 0 10
41621: MUL
41622: PLUS
41623: PPUSH
41624: CALL_OW 1
41628: ST_TO_ADDR
41629: GO 41577
41631: POP
41632: POP
// end ;
41633: GO 40112
41635: POP
41636: POP
// result := Replace ( result , 4 , tmp ) ;
41637: LD_ADDR_VAR 0 5
41641: PUSH
41642: LD_VAR 0 5
41646: PPUSH
41647: LD_INT 4
41649: PPUSH
41650: LD_VAR 0 8
41654: PPUSH
41655: CALL_OW 1
41659: ST_TO_ADDR
// end ;
41660: LD_VAR 0 5
41664: RET
// export function DangerAtRange ( unit , range ) ; begin
41665: LD_INT 0
41667: PPUSH
// if not unit then
41668: LD_VAR 0 1
41672: NOT
41673: IFFALSE 41677
// exit ;
41675: GO 41722
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
41677: LD_ADDR_VAR 0 3
41681: PUSH
41682: LD_VAR 0 1
41686: PPUSH
41687: CALL_OW 255
41691: PPUSH
41692: LD_VAR 0 1
41696: PPUSH
41697: CALL_OW 250
41701: PPUSH
41702: LD_VAR 0 1
41706: PPUSH
41707: CALL_OW 251
41711: PPUSH
41712: LD_VAR 0 2
41716: PPUSH
41717: CALL 39964 0 4
41721: ST_TO_ADDR
// end ;
41722: LD_VAR 0 3
41726: RET
// export function DangerInArea ( side , area ) ; begin
41727: LD_INT 0
41729: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
41730: LD_ADDR_VAR 0 3
41734: PUSH
41735: LD_VAR 0 2
41739: PPUSH
41740: LD_INT 81
41742: PUSH
41743: LD_VAR 0 1
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PPUSH
41752: CALL_OW 70
41756: ST_TO_ADDR
// end ;
41757: LD_VAR 0 3
41761: RET
// export function IsExtension ( b ) ; begin
41762: LD_INT 0
41764: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
41765: LD_ADDR_VAR 0 2
41769: PUSH
41770: LD_VAR 0 1
41774: PUSH
41775: LD_INT 23
41777: PUSH
41778: LD_INT 20
41780: PUSH
41781: LD_INT 22
41783: PUSH
41784: LD_INT 17
41786: PUSH
41787: LD_INT 24
41789: PUSH
41790: LD_INT 21
41792: PUSH
41793: LD_INT 19
41795: PUSH
41796: LD_INT 16
41798: PUSH
41799: LD_INT 25
41801: PUSH
41802: LD_INT 18
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: IN
41817: ST_TO_ADDR
// end ;
41818: LD_VAR 0 2
41822: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
41823: LD_INT 0
41825: PPUSH
41826: PPUSH
41827: PPUSH
// result := [ ] ;
41828: LD_ADDR_VAR 0 4
41832: PUSH
41833: EMPTY
41834: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
41835: LD_ADDR_VAR 0 5
41839: PUSH
41840: LD_VAR 0 2
41844: PPUSH
41845: LD_INT 21
41847: PUSH
41848: LD_INT 3
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PPUSH
41855: CALL_OW 70
41859: ST_TO_ADDR
// if not tmp then
41860: LD_VAR 0 5
41864: NOT
41865: IFFALSE 41869
// exit ;
41867: GO 41933
// if checkLink then
41869: LD_VAR 0 3
41873: IFFALSE 41923
// begin for i in tmp do
41875: LD_ADDR_VAR 0 6
41879: PUSH
41880: LD_VAR 0 5
41884: PUSH
41885: FOR_IN
41886: IFFALSE 41921
// if GetBase ( i ) <> base then
41888: LD_VAR 0 6
41892: PPUSH
41893: CALL_OW 274
41897: PUSH
41898: LD_VAR 0 1
41902: NONEQUAL
41903: IFFALSE 41919
// ComLinkToBase ( base , i ) ;
41905: LD_VAR 0 1
41909: PPUSH
41910: LD_VAR 0 6
41914: PPUSH
41915: CALL_OW 169
41919: GO 41885
41921: POP
41922: POP
// end ; result := tmp ;
41923: LD_ADDR_VAR 0 4
41927: PUSH
41928: LD_VAR 0 5
41932: ST_TO_ADDR
// end ;
41933: LD_VAR 0 4
41937: RET
// export function ComComplete ( units , b ) ; var i ; begin
41938: LD_INT 0
41940: PPUSH
41941: PPUSH
// if not units then
41942: LD_VAR 0 1
41946: NOT
41947: IFFALSE 41951
// exit ;
41949: GO 42041
// for i in units do
41951: LD_ADDR_VAR 0 4
41955: PUSH
41956: LD_VAR 0 1
41960: PUSH
41961: FOR_IN
41962: IFFALSE 42039
// if BuildingStatus ( b ) = bs_build then
41964: LD_VAR 0 2
41968: PPUSH
41969: CALL_OW 461
41973: PUSH
41974: LD_INT 1
41976: EQUAL
41977: IFFALSE 42037
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
41979: LD_VAR 0 4
41983: PPUSH
41984: LD_STRING h
41986: PUSH
41987: LD_VAR 0 2
41991: PPUSH
41992: CALL_OW 250
41996: PUSH
41997: LD_VAR 0 2
42001: PPUSH
42002: CALL_OW 251
42006: PUSH
42007: LD_VAR 0 2
42011: PUSH
42012: LD_INT 0
42014: PUSH
42015: LD_INT 0
42017: PUSH
42018: LD_INT 0
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: PUSH
42030: EMPTY
42031: LIST
42032: PPUSH
42033: CALL_OW 446
42037: GO 41961
42039: POP
42040: POP
// end ;
42041: LD_VAR 0 3
42045: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
42046: LD_INT 0
42048: PPUSH
42049: PPUSH
42050: PPUSH
42051: PPUSH
42052: PPUSH
42053: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
42054: LD_VAR 0 1
42058: NOT
42059: PUSH
42060: LD_VAR 0 1
42064: PPUSH
42065: CALL_OW 263
42069: PUSH
42070: LD_INT 2
42072: NONEQUAL
42073: OR
42074: IFFALSE 42078
// exit ;
42076: GO 42394
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
42078: LD_ADDR_VAR 0 6
42082: PUSH
42083: LD_INT 22
42085: PUSH
42086: LD_VAR 0 1
42090: PPUSH
42091: CALL_OW 255
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: LD_INT 2
42102: PUSH
42103: LD_INT 30
42105: PUSH
42106: LD_INT 36
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 34
42115: PUSH
42116: LD_INT 31
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: LIST
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PPUSH
42132: CALL_OW 69
42136: ST_TO_ADDR
// if not tmp then
42137: LD_VAR 0 6
42141: NOT
42142: IFFALSE 42146
// exit ;
42144: GO 42394
// result := [ ] ;
42146: LD_ADDR_VAR 0 2
42150: PUSH
42151: EMPTY
42152: ST_TO_ADDR
// for i in tmp do
42153: LD_ADDR_VAR 0 3
42157: PUSH
42158: LD_VAR 0 6
42162: PUSH
42163: FOR_IN
42164: IFFALSE 42235
// begin t := UnitsInside ( i ) ;
42166: LD_ADDR_VAR 0 4
42170: PUSH
42171: LD_VAR 0 3
42175: PPUSH
42176: CALL_OW 313
42180: ST_TO_ADDR
// if t then
42181: LD_VAR 0 4
42185: IFFALSE 42233
// for j in t do
42187: LD_ADDR_VAR 0 7
42191: PUSH
42192: LD_VAR 0 4
42196: PUSH
42197: FOR_IN
42198: IFFALSE 42231
// result := Replace ( result , result + 1 , j ) ;
42200: LD_ADDR_VAR 0 2
42204: PUSH
42205: LD_VAR 0 2
42209: PPUSH
42210: LD_VAR 0 2
42214: PUSH
42215: LD_INT 1
42217: PLUS
42218: PPUSH
42219: LD_VAR 0 7
42223: PPUSH
42224: CALL_OW 1
42228: ST_TO_ADDR
42229: GO 42197
42231: POP
42232: POP
// end ;
42233: GO 42163
42235: POP
42236: POP
// if not result then
42237: LD_VAR 0 2
42241: NOT
42242: IFFALSE 42246
// exit ;
42244: GO 42394
// mech := result [ 1 ] ;
42246: LD_ADDR_VAR 0 5
42250: PUSH
42251: LD_VAR 0 2
42255: PUSH
42256: LD_INT 1
42258: ARRAY
42259: ST_TO_ADDR
// if result > 1 then
42260: LD_VAR 0 2
42264: PUSH
42265: LD_INT 1
42267: GREATER
42268: IFFALSE 42380
// begin for i = 2 to result do
42270: LD_ADDR_VAR 0 3
42274: PUSH
42275: DOUBLE
42276: LD_INT 2
42278: DEC
42279: ST_TO_ADDR
42280: LD_VAR 0 2
42284: PUSH
42285: FOR_TO
42286: IFFALSE 42378
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
42288: LD_ADDR_VAR 0 4
42292: PUSH
42293: LD_VAR 0 2
42297: PUSH
42298: LD_VAR 0 3
42302: ARRAY
42303: PPUSH
42304: LD_INT 3
42306: PPUSH
42307: CALL_OW 259
42311: PUSH
42312: LD_VAR 0 2
42316: PUSH
42317: LD_VAR 0 3
42321: ARRAY
42322: PPUSH
42323: CALL_OW 432
42327: MINUS
42328: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
42329: LD_VAR 0 4
42333: PUSH
42334: LD_VAR 0 5
42338: PPUSH
42339: LD_INT 3
42341: PPUSH
42342: CALL_OW 259
42346: PUSH
42347: LD_VAR 0 5
42351: PPUSH
42352: CALL_OW 432
42356: MINUS
42357: GREATEREQUAL
42358: IFFALSE 42376
// mech := result [ i ] ;
42360: LD_ADDR_VAR 0 5
42364: PUSH
42365: LD_VAR 0 2
42369: PUSH
42370: LD_VAR 0 3
42374: ARRAY
42375: ST_TO_ADDR
// end ;
42376: GO 42285
42378: POP
42379: POP
// end ; ComLinkTo ( vehicle , mech ) ;
42380: LD_VAR 0 1
42384: PPUSH
42385: LD_VAR 0 5
42389: PPUSH
42390: CALL_OW 135
// end ;
42394: LD_VAR 0 2
42398: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
42399: LD_INT 0
42401: PPUSH
42402: PPUSH
42403: PPUSH
42404: PPUSH
42405: PPUSH
42406: PPUSH
42407: PPUSH
42408: PPUSH
42409: PPUSH
42410: PPUSH
42411: PPUSH
42412: PPUSH
42413: PPUSH
// result := [ ] ;
42414: LD_ADDR_VAR 0 7
42418: PUSH
42419: EMPTY
42420: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
42421: LD_VAR 0 1
42425: PPUSH
42426: CALL_OW 266
42430: PUSH
42431: LD_INT 0
42433: PUSH
42434: LD_INT 1
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: IN
42441: NOT
42442: IFFALSE 42446
// exit ;
42444: GO 44080
// if name then
42446: LD_VAR 0 3
42450: IFFALSE 42466
// SetBName ( base_dep , name ) ;
42452: LD_VAR 0 1
42456: PPUSH
42457: LD_VAR 0 3
42461: PPUSH
42462: CALL_OW 500
// base := GetBase ( base_dep ) ;
42466: LD_ADDR_VAR 0 15
42470: PUSH
42471: LD_VAR 0 1
42475: PPUSH
42476: CALL_OW 274
42480: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
42481: LD_ADDR_VAR 0 16
42485: PUSH
42486: LD_VAR 0 1
42490: PPUSH
42491: CALL_OW 255
42495: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
42496: LD_ADDR_VAR 0 17
42500: PUSH
42501: LD_VAR 0 1
42505: PPUSH
42506: CALL_OW 248
42510: ST_TO_ADDR
// if sources then
42511: LD_VAR 0 5
42515: IFFALSE 42562
// for i = 1 to 3 do
42517: LD_ADDR_VAR 0 8
42521: PUSH
42522: DOUBLE
42523: LD_INT 1
42525: DEC
42526: ST_TO_ADDR
42527: LD_INT 3
42529: PUSH
42530: FOR_TO
42531: IFFALSE 42560
// AddResourceType ( base , i , sources [ i ] ) ;
42533: LD_VAR 0 15
42537: PPUSH
42538: LD_VAR 0 8
42542: PPUSH
42543: LD_VAR 0 5
42547: PUSH
42548: LD_VAR 0 8
42552: ARRAY
42553: PPUSH
42554: CALL_OW 276
42558: GO 42530
42560: POP
42561: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
42562: LD_ADDR_VAR 0 18
42566: PUSH
42567: LD_VAR 0 15
42571: PPUSH
42572: LD_VAR 0 2
42576: PPUSH
42577: LD_INT 1
42579: PPUSH
42580: CALL 41823 0 3
42584: ST_TO_ADDR
// InitHc ;
42585: CALL_OW 19
// InitUc ;
42589: CALL_OW 18
// uc_side := side ;
42593: LD_ADDR_OWVAR 20
42597: PUSH
42598: LD_VAR 0 16
42602: ST_TO_ADDR
// uc_nation := nation ;
42603: LD_ADDR_OWVAR 21
42607: PUSH
42608: LD_VAR 0 17
42612: ST_TO_ADDR
// if buildings then
42613: LD_VAR 0 18
42617: IFFALSE 43939
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
42619: LD_ADDR_VAR 0 19
42623: PUSH
42624: LD_VAR 0 18
42628: PPUSH
42629: LD_INT 2
42631: PUSH
42632: LD_INT 30
42634: PUSH
42635: LD_INT 29
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 30
42644: PUSH
42645: LD_INT 30
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: LIST
42656: PPUSH
42657: CALL_OW 72
42661: ST_TO_ADDR
// if tmp then
42662: LD_VAR 0 19
42666: IFFALSE 42714
// for i in tmp do
42668: LD_ADDR_VAR 0 8
42672: PUSH
42673: LD_VAR 0 19
42677: PUSH
42678: FOR_IN
42679: IFFALSE 42712
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
42681: LD_VAR 0 8
42685: PPUSH
42686: CALL_OW 250
42690: PPUSH
42691: LD_VAR 0 8
42695: PPUSH
42696: CALL_OW 251
42700: PPUSH
42701: LD_VAR 0 16
42705: PPUSH
42706: CALL_OW 441
42710: GO 42678
42712: POP
42713: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
42714: LD_VAR 0 18
42718: PPUSH
42719: LD_INT 2
42721: PUSH
42722: LD_INT 30
42724: PUSH
42725: LD_INT 32
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 30
42734: PUSH
42735: LD_INT 33
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: LIST
42746: PPUSH
42747: CALL_OW 72
42751: IFFALSE 42839
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
42753: LD_ADDR_VAR 0 8
42757: PUSH
42758: LD_VAR 0 18
42762: PPUSH
42763: LD_INT 2
42765: PUSH
42766: LD_INT 30
42768: PUSH
42769: LD_INT 32
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 30
42778: PUSH
42779: LD_INT 33
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: LIST
42790: PPUSH
42791: CALL_OW 72
42795: PUSH
42796: FOR_IN
42797: IFFALSE 42837
// begin if not GetBWeapon ( i ) then
42799: LD_VAR 0 8
42803: PPUSH
42804: CALL_OW 269
42808: NOT
42809: IFFALSE 42835
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
42811: LD_VAR 0 8
42815: PPUSH
42816: LD_VAR 0 8
42820: PPUSH
42821: LD_VAR 0 2
42825: PPUSH
42826: CALL 44085 0 2
42830: PPUSH
42831: CALL_OW 431
// end ;
42835: GO 42796
42837: POP
42838: POP
// end ; for i = 1 to personel do
42839: LD_ADDR_VAR 0 8
42843: PUSH
42844: DOUBLE
42845: LD_INT 1
42847: DEC
42848: ST_TO_ADDR
42849: LD_VAR 0 6
42853: PUSH
42854: FOR_TO
42855: IFFALSE 43919
// begin if i > 4 then
42857: LD_VAR 0 8
42861: PUSH
42862: LD_INT 4
42864: GREATER
42865: IFFALSE 42869
// break ;
42867: GO 43919
// case i of 1 :
42869: LD_VAR 0 8
42873: PUSH
42874: LD_INT 1
42876: DOUBLE
42877: EQUAL
42878: IFTRUE 42882
42880: GO 42962
42882: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
42883: LD_ADDR_VAR 0 12
42887: PUSH
42888: LD_VAR 0 18
42892: PPUSH
42893: LD_INT 22
42895: PUSH
42896: LD_VAR 0 16
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 58
42907: PUSH
42908: EMPTY
42909: LIST
42910: PUSH
42911: LD_INT 2
42913: PUSH
42914: LD_INT 30
42916: PUSH
42917: LD_INT 32
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: LD_INT 30
42926: PUSH
42927: LD_INT 4
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 30
42936: PUSH
42937: LD_INT 5
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: LIST
42954: PPUSH
42955: CALL_OW 72
42959: ST_TO_ADDR
42960: GO 43184
42962: LD_INT 2
42964: DOUBLE
42965: EQUAL
42966: IFTRUE 42970
42968: GO 43032
42970: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
42971: LD_ADDR_VAR 0 12
42975: PUSH
42976: LD_VAR 0 18
42980: PPUSH
42981: LD_INT 22
42983: PUSH
42984: LD_VAR 0 16
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 2
42995: PUSH
42996: LD_INT 30
42998: PUSH
42999: LD_INT 0
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 30
43008: PUSH
43009: LD_INT 1
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: LIST
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PPUSH
43025: CALL_OW 72
43029: ST_TO_ADDR
43030: GO 43184
43032: LD_INT 3
43034: DOUBLE
43035: EQUAL
43036: IFTRUE 43040
43038: GO 43102
43040: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
43041: LD_ADDR_VAR 0 12
43045: PUSH
43046: LD_VAR 0 18
43050: PPUSH
43051: LD_INT 22
43053: PUSH
43054: LD_VAR 0 16
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 2
43065: PUSH
43066: LD_INT 30
43068: PUSH
43069: LD_INT 2
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 30
43078: PUSH
43079: LD_INT 3
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: LIST
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PPUSH
43095: CALL_OW 72
43099: ST_TO_ADDR
43100: GO 43184
43102: LD_INT 4
43104: DOUBLE
43105: EQUAL
43106: IFTRUE 43110
43108: GO 43183
43110: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
43111: LD_ADDR_VAR 0 12
43115: PUSH
43116: LD_VAR 0 18
43120: PPUSH
43121: LD_INT 22
43123: PUSH
43124: LD_VAR 0 16
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 2
43135: PUSH
43136: LD_INT 30
43138: PUSH
43139: LD_INT 6
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 30
43148: PUSH
43149: LD_INT 7
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 30
43158: PUSH
43159: LD_INT 8
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PPUSH
43176: CALL_OW 72
43180: ST_TO_ADDR
43181: GO 43184
43183: POP
// if i = 1 then
43184: LD_VAR 0 8
43188: PUSH
43189: LD_INT 1
43191: EQUAL
43192: IFFALSE 43303
// begin tmp := [ ] ;
43194: LD_ADDR_VAR 0 19
43198: PUSH
43199: EMPTY
43200: ST_TO_ADDR
// for j in f do
43201: LD_ADDR_VAR 0 9
43205: PUSH
43206: LD_VAR 0 12
43210: PUSH
43211: FOR_IN
43212: IFFALSE 43285
// if GetBType ( j ) = b_bunker then
43214: LD_VAR 0 9
43218: PPUSH
43219: CALL_OW 266
43223: PUSH
43224: LD_INT 32
43226: EQUAL
43227: IFFALSE 43254
// tmp := Insert ( tmp , 1 , j ) else
43229: LD_ADDR_VAR 0 19
43233: PUSH
43234: LD_VAR 0 19
43238: PPUSH
43239: LD_INT 1
43241: PPUSH
43242: LD_VAR 0 9
43246: PPUSH
43247: CALL_OW 2
43251: ST_TO_ADDR
43252: GO 43283
// tmp := Insert ( tmp , tmp + 1 , j ) ;
43254: LD_ADDR_VAR 0 19
43258: PUSH
43259: LD_VAR 0 19
43263: PPUSH
43264: LD_VAR 0 19
43268: PUSH
43269: LD_INT 1
43271: PLUS
43272: PPUSH
43273: LD_VAR 0 9
43277: PPUSH
43278: CALL_OW 2
43282: ST_TO_ADDR
43283: GO 43211
43285: POP
43286: POP
// if tmp then
43287: LD_VAR 0 19
43291: IFFALSE 43303
// f := tmp ;
43293: LD_ADDR_VAR 0 12
43297: PUSH
43298: LD_VAR 0 19
43302: ST_TO_ADDR
// end ; x := personel [ i ] ;
43303: LD_ADDR_VAR 0 13
43307: PUSH
43308: LD_VAR 0 6
43312: PUSH
43313: LD_VAR 0 8
43317: ARRAY
43318: ST_TO_ADDR
// if x = - 1 then
43319: LD_VAR 0 13
43323: PUSH
43324: LD_INT 1
43326: NEG
43327: EQUAL
43328: IFFALSE 43537
// begin for j in f do
43330: LD_ADDR_VAR 0 9
43334: PUSH
43335: LD_VAR 0 12
43339: PUSH
43340: FOR_IN
43341: IFFALSE 43533
// repeat InitHc ;
43343: CALL_OW 19
// if GetBType ( j ) = b_barracks then
43347: LD_VAR 0 9
43351: PPUSH
43352: CALL_OW 266
43356: PUSH
43357: LD_INT 5
43359: EQUAL
43360: IFFALSE 43430
// begin if UnitsInside ( j ) < 3 then
43362: LD_VAR 0 9
43366: PPUSH
43367: CALL_OW 313
43371: PUSH
43372: LD_INT 3
43374: LESS
43375: IFFALSE 43411
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43377: LD_INT 0
43379: PPUSH
43380: LD_INT 5
43382: PUSH
43383: LD_INT 8
43385: PUSH
43386: LD_INT 9
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: LIST
43393: PUSH
43394: LD_VAR 0 17
43398: ARRAY
43399: PPUSH
43400: LD_VAR 0 4
43404: PPUSH
43405: CALL_OW 380
43409: GO 43428
// PrepareHuman ( false , i , skill ) ;
43411: LD_INT 0
43413: PPUSH
43414: LD_VAR 0 8
43418: PPUSH
43419: LD_VAR 0 4
43423: PPUSH
43424: CALL_OW 380
// end else
43428: GO 43447
// PrepareHuman ( false , i , skill ) ;
43430: LD_INT 0
43432: PPUSH
43433: LD_VAR 0 8
43437: PPUSH
43438: LD_VAR 0 4
43442: PPUSH
43443: CALL_OW 380
// un := CreateHuman ;
43447: LD_ADDR_VAR 0 14
43451: PUSH
43452: CALL_OW 44
43456: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43457: LD_ADDR_VAR 0 7
43461: PUSH
43462: LD_VAR 0 7
43466: PPUSH
43467: LD_INT 1
43469: PPUSH
43470: LD_VAR 0 14
43474: PPUSH
43475: CALL_OW 2
43479: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
43480: LD_VAR 0 14
43484: PPUSH
43485: LD_VAR 0 9
43489: PPUSH
43490: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
43494: LD_VAR 0 9
43498: PPUSH
43499: CALL_OW 313
43503: PUSH
43504: LD_INT 6
43506: EQUAL
43507: PUSH
43508: LD_VAR 0 9
43512: PPUSH
43513: CALL_OW 266
43517: PUSH
43518: LD_INT 32
43520: PUSH
43521: LD_INT 31
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: IN
43528: OR
43529: IFFALSE 43343
43531: GO 43340
43533: POP
43534: POP
// end else
43535: GO 43917
// for j = 1 to x do
43537: LD_ADDR_VAR 0 9
43541: PUSH
43542: DOUBLE
43543: LD_INT 1
43545: DEC
43546: ST_TO_ADDR
43547: LD_VAR 0 13
43551: PUSH
43552: FOR_TO
43553: IFFALSE 43915
// begin InitHc ;
43555: CALL_OW 19
// if not f then
43559: LD_VAR 0 12
43563: NOT
43564: IFFALSE 43653
// begin PrepareHuman ( false , i , skill ) ;
43566: LD_INT 0
43568: PPUSH
43569: LD_VAR 0 8
43573: PPUSH
43574: LD_VAR 0 4
43578: PPUSH
43579: CALL_OW 380
// un := CreateHuman ;
43583: LD_ADDR_VAR 0 14
43587: PUSH
43588: CALL_OW 44
43592: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43593: LD_ADDR_VAR 0 7
43597: PUSH
43598: LD_VAR 0 7
43602: PPUSH
43603: LD_INT 1
43605: PPUSH
43606: LD_VAR 0 14
43610: PPUSH
43611: CALL_OW 2
43615: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43616: LD_VAR 0 14
43620: PPUSH
43621: LD_VAR 0 1
43625: PPUSH
43626: CALL_OW 250
43630: PPUSH
43631: LD_VAR 0 1
43635: PPUSH
43636: CALL_OW 251
43640: PPUSH
43641: LD_INT 10
43643: PPUSH
43644: LD_INT 0
43646: PPUSH
43647: CALL_OW 50
// continue ;
43651: GO 43552
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
43653: LD_VAR 0 12
43657: PUSH
43658: LD_INT 1
43660: ARRAY
43661: PPUSH
43662: CALL_OW 313
43666: PUSH
43667: LD_VAR 0 12
43671: PUSH
43672: LD_INT 1
43674: ARRAY
43675: PPUSH
43676: CALL_OW 266
43680: PUSH
43681: LD_INT 32
43683: PUSH
43684: LD_INT 31
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: IN
43691: AND
43692: PUSH
43693: LD_VAR 0 12
43697: PUSH
43698: LD_INT 1
43700: ARRAY
43701: PPUSH
43702: CALL_OW 313
43706: PUSH
43707: LD_INT 6
43709: EQUAL
43710: OR
43711: IFFALSE 43731
// f := Delete ( f , 1 ) ;
43713: LD_ADDR_VAR 0 12
43717: PUSH
43718: LD_VAR 0 12
43722: PPUSH
43723: LD_INT 1
43725: PPUSH
43726: CALL_OW 3
43730: ST_TO_ADDR
// if not f then
43731: LD_VAR 0 12
43735: NOT
43736: IFFALSE 43754
// begin x := x + 2 ;
43738: LD_ADDR_VAR 0 13
43742: PUSH
43743: LD_VAR 0 13
43747: PUSH
43748: LD_INT 2
43750: PLUS
43751: ST_TO_ADDR
// continue ;
43752: GO 43552
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
43754: LD_VAR 0 12
43758: PUSH
43759: LD_INT 1
43761: ARRAY
43762: PPUSH
43763: CALL_OW 266
43767: PUSH
43768: LD_INT 5
43770: EQUAL
43771: IFFALSE 43845
// begin if UnitsInside ( f [ 1 ] ) < 3 then
43773: LD_VAR 0 12
43777: PUSH
43778: LD_INT 1
43780: ARRAY
43781: PPUSH
43782: CALL_OW 313
43786: PUSH
43787: LD_INT 3
43789: LESS
43790: IFFALSE 43826
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43792: LD_INT 0
43794: PPUSH
43795: LD_INT 5
43797: PUSH
43798: LD_INT 8
43800: PUSH
43801: LD_INT 9
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: LIST
43808: PUSH
43809: LD_VAR 0 17
43813: ARRAY
43814: PPUSH
43815: LD_VAR 0 4
43819: PPUSH
43820: CALL_OW 380
43824: GO 43843
// PrepareHuman ( false , i , skill ) ;
43826: LD_INT 0
43828: PPUSH
43829: LD_VAR 0 8
43833: PPUSH
43834: LD_VAR 0 4
43838: PPUSH
43839: CALL_OW 380
// end else
43843: GO 43862
// PrepareHuman ( false , i , skill ) ;
43845: LD_INT 0
43847: PPUSH
43848: LD_VAR 0 8
43852: PPUSH
43853: LD_VAR 0 4
43857: PPUSH
43858: CALL_OW 380
// un := CreateHuman ;
43862: LD_ADDR_VAR 0 14
43866: PUSH
43867: CALL_OW 44
43871: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43872: LD_ADDR_VAR 0 7
43876: PUSH
43877: LD_VAR 0 7
43881: PPUSH
43882: LD_INT 1
43884: PPUSH
43885: LD_VAR 0 14
43889: PPUSH
43890: CALL_OW 2
43894: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
43895: LD_VAR 0 14
43899: PPUSH
43900: LD_VAR 0 12
43904: PUSH
43905: LD_INT 1
43907: ARRAY
43908: PPUSH
43909: CALL_OW 52
// end ;
43913: GO 43552
43915: POP
43916: POP
// end ;
43917: GO 42854
43919: POP
43920: POP
// result := result ^ buildings ;
43921: LD_ADDR_VAR 0 7
43925: PUSH
43926: LD_VAR 0 7
43930: PUSH
43931: LD_VAR 0 18
43935: ADD
43936: ST_TO_ADDR
// end else
43937: GO 44080
// begin for i = 1 to personel do
43939: LD_ADDR_VAR 0 8
43943: PUSH
43944: DOUBLE
43945: LD_INT 1
43947: DEC
43948: ST_TO_ADDR
43949: LD_VAR 0 6
43953: PUSH
43954: FOR_TO
43955: IFFALSE 44078
// begin if i > 4 then
43957: LD_VAR 0 8
43961: PUSH
43962: LD_INT 4
43964: GREATER
43965: IFFALSE 43969
// break ;
43967: GO 44078
// x := personel [ i ] ;
43969: LD_ADDR_VAR 0 13
43973: PUSH
43974: LD_VAR 0 6
43978: PUSH
43979: LD_VAR 0 8
43983: ARRAY
43984: ST_TO_ADDR
// if x = - 1 then
43985: LD_VAR 0 13
43989: PUSH
43990: LD_INT 1
43992: NEG
43993: EQUAL
43994: IFFALSE 43998
// continue ;
43996: GO 43954
// PrepareHuman ( false , i , skill ) ;
43998: LD_INT 0
44000: PPUSH
44001: LD_VAR 0 8
44005: PPUSH
44006: LD_VAR 0 4
44010: PPUSH
44011: CALL_OW 380
// un := CreateHuman ;
44015: LD_ADDR_VAR 0 14
44019: PUSH
44020: CALL_OW 44
44024: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44025: LD_VAR 0 14
44029: PPUSH
44030: LD_VAR 0 1
44034: PPUSH
44035: CALL_OW 250
44039: PPUSH
44040: LD_VAR 0 1
44044: PPUSH
44045: CALL_OW 251
44049: PPUSH
44050: LD_INT 10
44052: PPUSH
44053: LD_INT 0
44055: PPUSH
44056: CALL_OW 50
// result := result ^ un ;
44060: LD_ADDR_VAR 0 7
44064: PUSH
44065: LD_VAR 0 7
44069: PUSH
44070: LD_VAR 0 14
44074: ADD
44075: ST_TO_ADDR
// end ;
44076: GO 43954
44078: POP
44079: POP
// end ; end ;
44080: LD_VAR 0 7
44084: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
44085: LD_INT 0
44087: PPUSH
44088: PPUSH
44089: PPUSH
44090: PPUSH
44091: PPUSH
44092: PPUSH
44093: PPUSH
44094: PPUSH
44095: PPUSH
44096: PPUSH
44097: PPUSH
44098: PPUSH
44099: PPUSH
44100: PPUSH
44101: PPUSH
44102: PPUSH
// result := false ;
44103: LD_ADDR_VAR 0 3
44107: PUSH
44108: LD_INT 0
44110: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
44111: LD_VAR 0 1
44115: NOT
44116: PUSH
44117: LD_VAR 0 1
44121: PPUSH
44122: CALL_OW 266
44126: PUSH
44127: LD_INT 32
44129: PUSH
44130: LD_INT 33
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: IN
44137: NOT
44138: OR
44139: IFFALSE 44143
// exit ;
44141: GO 45252
// nat := GetNation ( tower ) ;
44143: LD_ADDR_VAR 0 12
44147: PUSH
44148: LD_VAR 0 1
44152: PPUSH
44153: CALL_OW 248
44157: ST_TO_ADDR
// side := GetSide ( tower ) ;
44158: LD_ADDR_VAR 0 16
44162: PUSH
44163: LD_VAR 0 1
44167: PPUSH
44168: CALL_OW 255
44172: ST_TO_ADDR
// x := GetX ( tower ) ;
44173: LD_ADDR_VAR 0 10
44177: PUSH
44178: LD_VAR 0 1
44182: PPUSH
44183: CALL_OW 250
44187: ST_TO_ADDR
// y := GetY ( tower ) ;
44188: LD_ADDR_VAR 0 11
44192: PUSH
44193: LD_VAR 0 1
44197: PPUSH
44198: CALL_OW 251
44202: ST_TO_ADDR
// if not x or not y then
44203: LD_VAR 0 10
44207: NOT
44208: PUSH
44209: LD_VAR 0 11
44213: NOT
44214: OR
44215: IFFALSE 44219
// exit ;
44217: GO 45252
// weapon := 0 ;
44219: LD_ADDR_VAR 0 18
44223: PUSH
44224: LD_INT 0
44226: ST_TO_ADDR
// fac_list := [ ] ;
44227: LD_ADDR_VAR 0 17
44231: PUSH
44232: EMPTY
44233: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
44234: LD_ADDR_VAR 0 6
44238: PUSH
44239: LD_VAR 0 1
44243: PPUSH
44244: CALL_OW 274
44248: PPUSH
44249: LD_VAR 0 2
44253: PPUSH
44254: LD_INT 0
44256: PPUSH
44257: CALL 41823 0 3
44261: PPUSH
44262: LD_INT 30
44264: PUSH
44265: LD_INT 3
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PPUSH
44272: CALL_OW 72
44276: ST_TO_ADDR
// if not factories then
44277: LD_VAR 0 6
44281: NOT
44282: IFFALSE 44286
// exit ;
44284: GO 45252
// for i in factories do
44286: LD_ADDR_VAR 0 8
44290: PUSH
44291: LD_VAR 0 6
44295: PUSH
44296: FOR_IN
44297: IFFALSE 44322
// fac_list := fac_list union AvailableWeaponList ( i ) ;
44299: LD_ADDR_VAR 0 17
44303: PUSH
44304: LD_VAR 0 17
44308: PUSH
44309: LD_VAR 0 8
44313: PPUSH
44314: CALL_OW 478
44318: UNION
44319: ST_TO_ADDR
44320: GO 44296
44322: POP
44323: POP
// if not fac_list then
44324: LD_VAR 0 17
44328: NOT
44329: IFFALSE 44333
// exit ;
44331: GO 45252
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
44333: LD_ADDR_VAR 0 5
44337: PUSH
44338: LD_INT 4
44340: PUSH
44341: LD_INT 5
44343: PUSH
44344: LD_INT 9
44346: PUSH
44347: LD_INT 10
44349: PUSH
44350: LD_INT 6
44352: PUSH
44353: LD_INT 7
44355: PUSH
44356: LD_INT 11
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 27
44370: PUSH
44371: LD_INT 28
44373: PUSH
44374: LD_INT 26
44376: PUSH
44377: LD_INT 30
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 43
44388: PUSH
44389: LD_INT 44
44391: PUSH
44392: LD_INT 46
44394: PUSH
44395: LD_INT 45
44397: PUSH
44398: LD_INT 47
44400: PUSH
44401: LD_INT 49
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: LIST
44416: PUSH
44417: LD_VAR 0 12
44421: ARRAY
44422: ST_TO_ADDR
// list := list isect fac_list ;
44423: LD_ADDR_VAR 0 5
44427: PUSH
44428: LD_VAR 0 5
44432: PUSH
44433: LD_VAR 0 17
44437: ISECT
44438: ST_TO_ADDR
// if not list then
44439: LD_VAR 0 5
44443: NOT
44444: IFFALSE 44448
// exit ;
44446: GO 45252
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
44448: LD_VAR 0 12
44452: PUSH
44453: LD_INT 3
44455: EQUAL
44456: PUSH
44457: LD_INT 49
44459: PUSH
44460: LD_VAR 0 5
44464: IN
44465: AND
44466: PUSH
44467: LD_INT 31
44469: PPUSH
44470: LD_VAR 0 16
44474: PPUSH
44475: CALL_OW 321
44479: PUSH
44480: LD_INT 2
44482: EQUAL
44483: AND
44484: IFFALSE 44544
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
44486: LD_INT 22
44488: PUSH
44489: LD_VAR 0 16
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 35
44500: PUSH
44501: LD_INT 49
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 91
44510: PUSH
44511: LD_VAR 0 1
44515: PUSH
44516: LD_INT 10
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: LIST
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: LIST
44528: PPUSH
44529: CALL_OW 69
44533: NOT
44534: IFFALSE 44544
// weapon := ru_time_lapser ;
44536: LD_ADDR_VAR 0 18
44540: PUSH
44541: LD_INT 49
44543: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
44544: LD_VAR 0 12
44548: PUSH
44549: LD_INT 1
44551: PUSH
44552: LD_INT 2
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: IN
44559: PUSH
44560: LD_INT 11
44562: PUSH
44563: LD_VAR 0 5
44567: IN
44568: PUSH
44569: LD_INT 30
44571: PUSH
44572: LD_VAR 0 5
44576: IN
44577: OR
44578: AND
44579: PUSH
44580: LD_INT 6
44582: PPUSH
44583: LD_VAR 0 16
44587: PPUSH
44588: CALL_OW 321
44592: PUSH
44593: LD_INT 2
44595: EQUAL
44596: AND
44597: IFFALSE 44762
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
44599: LD_INT 22
44601: PUSH
44602: LD_VAR 0 16
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 2
44613: PUSH
44614: LD_INT 35
44616: PUSH
44617: LD_INT 11
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 35
44626: PUSH
44627: LD_INT 30
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 91
44641: PUSH
44642: LD_VAR 0 1
44646: PUSH
44647: LD_INT 18
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: LIST
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: LIST
44659: PPUSH
44660: CALL_OW 69
44664: NOT
44665: PUSH
44666: LD_INT 22
44668: PUSH
44669: LD_VAR 0 16
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 2
44680: PUSH
44681: LD_INT 30
44683: PUSH
44684: LD_INT 32
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 30
44693: PUSH
44694: LD_INT 33
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 91
44708: PUSH
44709: LD_VAR 0 1
44713: PUSH
44714: LD_INT 12
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: LIST
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: LIST
44726: PUSH
44727: EMPTY
44728: LIST
44729: PPUSH
44730: CALL_OW 69
44734: PUSH
44735: LD_INT 2
44737: GREATER
44738: AND
44739: IFFALSE 44762
// weapon := [ us_radar , ar_radar ] [ nat ] ;
44741: LD_ADDR_VAR 0 18
44745: PUSH
44746: LD_INT 11
44748: PUSH
44749: LD_INT 30
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_VAR 0 12
44760: ARRAY
44761: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
44762: LD_VAR 0 18
44766: NOT
44767: PUSH
44768: LD_INT 40
44770: PPUSH
44771: LD_VAR 0 16
44775: PPUSH
44776: CALL_OW 321
44780: PUSH
44781: LD_INT 2
44783: EQUAL
44784: AND
44785: PUSH
44786: LD_INT 7
44788: PUSH
44789: LD_VAR 0 5
44793: IN
44794: PUSH
44795: LD_INT 28
44797: PUSH
44798: LD_VAR 0 5
44802: IN
44803: OR
44804: PUSH
44805: LD_INT 45
44807: PUSH
44808: LD_VAR 0 5
44812: IN
44813: OR
44814: AND
44815: IFFALSE 45069
// begin hex := GetHexInfo ( x , y ) ;
44817: LD_ADDR_VAR 0 4
44821: PUSH
44822: LD_VAR 0 10
44826: PPUSH
44827: LD_VAR 0 11
44831: PPUSH
44832: CALL_OW 546
44836: ST_TO_ADDR
// if hex [ 1 ] then
44837: LD_VAR 0 4
44841: PUSH
44842: LD_INT 1
44844: ARRAY
44845: IFFALSE 44849
// exit ;
44847: GO 45252
// height := hex [ 2 ] ;
44849: LD_ADDR_VAR 0 15
44853: PUSH
44854: LD_VAR 0 4
44858: PUSH
44859: LD_INT 2
44861: ARRAY
44862: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
44863: LD_ADDR_VAR 0 14
44867: PUSH
44868: LD_INT 0
44870: PUSH
44871: LD_INT 2
44873: PUSH
44874: LD_INT 3
44876: PUSH
44877: LD_INT 5
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: ST_TO_ADDR
// for i in tmp do
44886: LD_ADDR_VAR 0 8
44890: PUSH
44891: LD_VAR 0 14
44895: PUSH
44896: FOR_IN
44897: IFFALSE 45067
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
44899: LD_ADDR_VAR 0 9
44903: PUSH
44904: LD_VAR 0 10
44908: PPUSH
44909: LD_VAR 0 8
44913: PPUSH
44914: LD_INT 5
44916: PPUSH
44917: CALL_OW 272
44921: PUSH
44922: LD_VAR 0 11
44926: PPUSH
44927: LD_VAR 0 8
44931: PPUSH
44932: LD_INT 5
44934: PPUSH
44935: CALL_OW 273
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
44944: LD_VAR 0 9
44948: PUSH
44949: LD_INT 1
44951: ARRAY
44952: PPUSH
44953: LD_VAR 0 9
44957: PUSH
44958: LD_INT 2
44960: ARRAY
44961: PPUSH
44962: CALL_OW 488
44966: IFFALSE 45065
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
44968: LD_ADDR_VAR 0 4
44972: PUSH
44973: LD_VAR 0 9
44977: PUSH
44978: LD_INT 1
44980: ARRAY
44981: PPUSH
44982: LD_VAR 0 9
44986: PUSH
44987: LD_INT 2
44989: ARRAY
44990: PPUSH
44991: CALL_OW 546
44995: ST_TO_ADDR
// if hex [ 1 ] then
44996: LD_VAR 0 4
45000: PUSH
45001: LD_INT 1
45003: ARRAY
45004: IFFALSE 45008
// continue ;
45006: GO 44896
// h := hex [ 2 ] ;
45008: LD_ADDR_VAR 0 13
45012: PUSH
45013: LD_VAR 0 4
45017: PUSH
45018: LD_INT 2
45020: ARRAY
45021: ST_TO_ADDR
// if h + 7 < height then
45022: LD_VAR 0 13
45026: PUSH
45027: LD_INT 7
45029: PLUS
45030: PUSH
45031: LD_VAR 0 15
45035: LESS
45036: IFFALSE 45065
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
45038: LD_ADDR_VAR 0 18
45042: PUSH
45043: LD_INT 7
45045: PUSH
45046: LD_INT 28
45048: PUSH
45049: LD_INT 45
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: LIST
45056: PUSH
45057: LD_VAR 0 12
45061: ARRAY
45062: ST_TO_ADDR
// break ;
45063: GO 45067
// end ; end ; end ;
45065: GO 44896
45067: POP
45068: POP
// end ; if not weapon then
45069: LD_VAR 0 18
45073: NOT
45074: IFFALSE 45134
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
45076: LD_ADDR_VAR 0 5
45080: PUSH
45081: LD_VAR 0 5
45085: PUSH
45086: LD_INT 11
45088: PUSH
45089: LD_INT 30
45091: PUSH
45092: LD_INT 49
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: LIST
45099: DIFF
45100: ST_TO_ADDR
// if not list then
45101: LD_VAR 0 5
45105: NOT
45106: IFFALSE 45110
// exit ;
45108: GO 45252
// weapon := list [ rand ( 1 , list ) ] ;
45110: LD_ADDR_VAR 0 18
45114: PUSH
45115: LD_VAR 0 5
45119: PUSH
45120: LD_INT 1
45122: PPUSH
45123: LD_VAR 0 5
45127: PPUSH
45128: CALL_OW 12
45132: ARRAY
45133: ST_TO_ADDR
// end ; if weapon then
45134: LD_VAR 0 18
45138: IFFALSE 45252
// begin tmp := CostOfWeapon ( weapon ) ;
45140: LD_ADDR_VAR 0 14
45144: PUSH
45145: LD_VAR 0 18
45149: PPUSH
45150: CALL_OW 451
45154: ST_TO_ADDR
// j := GetBase ( tower ) ;
45155: LD_ADDR_VAR 0 9
45159: PUSH
45160: LD_VAR 0 1
45164: PPUSH
45165: CALL_OW 274
45169: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
45170: LD_VAR 0 9
45174: PPUSH
45175: LD_INT 1
45177: PPUSH
45178: CALL_OW 275
45182: PUSH
45183: LD_VAR 0 14
45187: PUSH
45188: LD_INT 1
45190: ARRAY
45191: GREATEREQUAL
45192: PUSH
45193: LD_VAR 0 9
45197: PPUSH
45198: LD_INT 2
45200: PPUSH
45201: CALL_OW 275
45205: PUSH
45206: LD_VAR 0 14
45210: PUSH
45211: LD_INT 2
45213: ARRAY
45214: GREATEREQUAL
45215: AND
45216: PUSH
45217: LD_VAR 0 9
45221: PPUSH
45222: LD_INT 3
45224: PPUSH
45225: CALL_OW 275
45229: PUSH
45230: LD_VAR 0 14
45234: PUSH
45235: LD_INT 3
45237: ARRAY
45238: GREATEREQUAL
45239: AND
45240: IFFALSE 45252
// result := weapon ;
45242: LD_ADDR_VAR 0 3
45246: PUSH
45247: LD_VAR 0 18
45251: ST_TO_ADDR
// end ; end ;
45252: LD_VAR 0 3
45256: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
45257: LD_INT 0
45259: PPUSH
45260: PPUSH
// result := true ;
45261: LD_ADDR_VAR 0 3
45265: PUSH
45266: LD_INT 1
45268: ST_TO_ADDR
// if array1 = array2 then
45269: LD_VAR 0 1
45273: PUSH
45274: LD_VAR 0 2
45278: EQUAL
45279: IFFALSE 45339
// begin for i = 1 to array1 do
45281: LD_ADDR_VAR 0 4
45285: PUSH
45286: DOUBLE
45287: LD_INT 1
45289: DEC
45290: ST_TO_ADDR
45291: LD_VAR 0 1
45295: PUSH
45296: FOR_TO
45297: IFFALSE 45335
// if array1 [ i ] <> array2 [ i ] then
45299: LD_VAR 0 1
45303: PUSH
45304: LD_VAR 0 4
45308: ARRAY
45309: PUSH
45310: LD_VAR 0 2
45314: PUSH
45315: LD_VAR 0 4
45319: ARRAY
45320: NONEQUAL
45321: IFFALSE 45333
// begin result := false ;
45323: LD_ADDR_VAR 0 3
45327: PUSH
45328: LD_INT 0
45330: ST_TO_ADDR
// break ;
45331: GO 45335
// end ;
45333: GO 45296
45335: POP
45336: POP
// end else
45337: GO 45347
// result := false ;
45339: LD_ADDR_VAR 0 3
45343: PUSH
45344: LD_INT 0
45346: ST_TO_ADDR
// end ;
45347: LD_VAR 0 3
45351: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
45352: LD_INT 0
45354: PPUSH
45355: PPUSH
// if not array1 or not array2 then
45356: LD_VAR 0 1
45360: NOT
45361: PUSH
45362: LD_VAR 0 2
45366: NOT
45367: OR
45368: IFFALSE 45372
// exit ;
45370: GO 45436
// result := true ;
45372: LD_ADDR_VAR 0 3
45376: PUSH
45377: LD_INT 1
45379: ST_TO_ADDR
// for i = 1 to array1 do
45380: LD_ADDR_VAR 0 4
45384: PUSH
45385: DOUBLE
45386: LD_INT 1
45388: DEC
45389: ST_TO_ADDR
45390: LD_VAR 0 1
45394: PUSH
45395: FOR_TO
45396: IFFALSE 45434
// if array1 [ i ] <> array2 [ i ] then
45398: LD_VAR 0 1
45402: PUSH
45403: LD_VAR 0 4
45407: ARRAY
45408: PUSH
45409: LD_VAR 0 2
45413: PUSH
45414: LD_VAR 0 4
45418: ARRAY
45419: NONEQUAL
45420: IFFALSE 45432
// begin result := false ;
45422: LD_ADDR_VAR 0 3
45426: PUSH
45427: LD_INT 0
45429: ST_TO_ADDR
// break ;
45430: GO 45434
// end ;
45432: GO 45395
45434: POP
45435: POP
// end ;
45436: LD_VAR 0 3
45440: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
45441: LD_INT 0
45443: PPUSH
45444: PPUSH
45445: PPUSH
// pom := GetBase ( fac ) ;
45446: LD_ADDR_VAR 0 5
45450: PUSH
45451: LD_VAR 0 1
45455: PPUSH
45456: CALL_OW 274
45460: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
45461: LD_ADDR_VAR 0 4
45465: PUSH
45466: LD_VAR 0 2
45470: PUSH
45471: LD_INT 1
45473: ARRAY
45474: PPUSH
45475: LD_VAR 0 2
45479: PUSH
45480: LD_INT 2
45482: ARRAY
45483: PPUSH
45484: LD_VAR 0 2
45488: PUSH
45489: LD_INT 3
45491: ARRAY
45492: PPUSH
45493: LD_VAR 0 2
45497: PUSH
45498: LD_INT 4
45500: ARRAY
45501: PPUSH
45502: CALL_OW 449
45506: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45507: LD_ADDR_VAR 0 3
45511: PUSH
45512: LD_VAR 0 5
45516: PPUSH
45517: LD_INT 1
45519: PPUSH
45520: CALL_OW 275
45524: PUSH
45525: LD_VAR 0 4
45529: PUSH
45530: LD_INT 1
45532: ARRAY
45533: GREATEREQUAL
45534: PUSH
45535: LD_VAR 0 5
45539: PPUSH
45540: LD_INT 2
45542: PPUSH
45543: CALL_OW 275
45547: PUSH
45548: LD_VAR 0 4
45552: PUSH
45553: LD_INT 2
45555: ARRAY
45556: GREATEREQUAL
45557: AND
45558: PUSH
45559: LD_VAR 0 5
45563: PPUSH
45564: LD_INT 3
45566: PPUSH
45567: CALL_OW 275
45571: PUSH
45572: LD_VAR 0 4
45576: PUSH
45577: LD_INT 3
45579: ARRAY
45580: GREATEREQUAL
45581: AND
45582: ST_TO_ADDR
// end ;
45583: LD_VAR 0 3
45587: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
45588: LD_INT 0
45590: PPUSH
45591: PPUSH
45592: PPUSH
45593: PPUSH
// pom := GetBase ( building ) ;
45594: LD_ADDR_VAR 0 3
45598: PUSH
45599: LD_VAR 0 1
45603: PPUSH
45604: CALL_OW 274
45608: ST_TO_ADDR
// if not pom then
45609: LD_VAR 0 3
45613: NOT
45614: IFFALSE 45618
// exit ;
45616: GO 45788
// btype := GetBType ( building ) ;
45618: LD_ADDR_VAR 0 5
45622: PUSH
45623: LD_VAR 0 1
45627: PPUSH
45628: CALL_OW 266
45632: ST_TO_ADDR
// if btype = b_armoury then
45633: LD_VAR 0 5
45637: PUSH
45638: LD_INT 4
45640: EQUAL
45641: IFFALSE 45651
// btype := b_barracks ;
45643: LD_ADDR_VAR 0 5
45647: PUSH
45648: LD_INT 5
45650: ST_TO_ADDR
// if btype = b_depot then
45651: LD_VAR 0 5
45655: PUSH
45656: LD_INT 0
45658: EQUAL
45659: IFFALSE 45669
// btype := b_warehouse ;
45661: LD_ADDR_VAR 0 5
45665: PUSH
45666: LD_INT 1
45668: ST_TO_ADDR
// if btype = b_workshop then
45669: LD_VAR 0 5
45673: PUSH
45674: LD_INT 2
45676: EQUAL
45677: IFFALSE 45687
// btype := b_factory ;
45679: LD_ADDR_VAR 0 5
45683: PUSH
45684: LD_INT 3
45686: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45687: LD_ADDR_VAR 0 4
45691: PUSH
45692: LD_VAR 0 5
45696: PPUSH
45697: LD_VAR 0 1
45701: PPUSH
45702: CALL_OW 248
45706: PPUSH
45707: CALL_OW 450
45711: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45712: LD_ADDR_VAR 0 2
45716: PUSH
45717: LD_VAR 0 3
45721: PPUSH
45722: LD_INT 1
45724: PPUSH
45725: CALL_OW 275
45729: PUSH
45730: LD_VAR 0 4
45734: PUSH
45735: LD_INT 1
45737: ARRAY
45738: GREATEREQUAL
45739: PUSH
45740: LD_VAR 0 3
45744: PPUSH
45745: LD_INT 2
45747: PPUSH
45748: CALL_OW 275
45752: PUSH
45753: LD_VAR 0 4
45757: PUSH
45758: LD_INT 2
45760: ARRAY
45761: GREATEREQUAL
45762: AND
45763: PUSH
45764: LD_VAR 0 3
45768: PPUSH
45769: LD_INT 3
45771: PPUSH
45772: CALL_OW 275
45776: PUSH
45777: LD_VAR 0 4
45781: PUSH
45782: LD_INT 3
45784: ARRAY
45785: GREATEREQUAL
45786: AND
45787: ST_TO_ADDR
// end ;
45788: LD_VAR 0 2
45792: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
45793: LD_INT 0
45795: PPUSH
45796: PPUSH
45797: PPUSH
// pom := GetBase ( building ) ;
45798: LD_ADDR_VAR 0 4
45802: PUSH
45803: LD_VAR 0 1
45807: PPUSH
45808: CALL_OW 274
45812: ST_TO_ADDR
// if not pom then
45813: LD_VAR 0 4
45817: NOT
45818: IFFALSE 45822
// exit ;
45820: GO 45923
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45822: LD_ADDR_VAR 0 5
45826: PUSH
45827: LD_VAR 0 2
45831: PPUSH
45832: LD_VAR 0 1
45836: PPUSH
45837: CALL_OW 248
45841: PPUSH
45842: CALL_OW 450
45846: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45847: LD_ADDR_VAR 0 3
45851: PUSH
45852: LD_VAR 0 4
45856: PPUSH
45857: LD_INT 1
45859: PPUSH
45860: CALL_OW 275
45864: PUSH
45865: LD_VAR 0 5
45869: PUSH
45870: LD_INT 1
45872: ARRAY
45873: GREATEREQUAL
45874: PUSH
45875: LD_VAR 0 4
45879: PPUSH
45880: LD_INT 2
45882: PPUSH
45883: CALL_OW 275
45887: PUSH
45888: LD_VAR 0 5
45892: PUSH
45893: LD_INT 2
45895: ARRAY
45896: GREATEREQUAL
45897: AND
45898: PUSH
45899: LD_VAR 0 4
45903: PPUSH
45904: LD_INT 3
45906: PPUSH
45907: CALL_OW 275
45911: PUSH
45912: LD_VAR 0 5
45916: PUSH
45917: LD_INT 3
45919: ARRAY
45920: GREATEREQUAL
45921: AND
45922: ST_TO_ADDR
// end ;
45923: LD_VAR 0 3
45927: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
45928: LD_INT 0
45930: PPUSH
45931: PPUSH
45932: PPUSH
45933: PPUSH
45934: PPUSH
45935: PPUSH
45936: PPUSH
45937: PPUSH
45938: PPUSH
45939: PPUSH
45940: PPUSH
// result := false ;
45941: LD_ADDR_VAR 0 8
45945: PUSH
45946: LD_INT 0
45948: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
45949: LD_VAR 0 5
45953: NOT
45954: PUSH
45955: LD_VAR 0 1
45959: NOT
45960: OR
45961: PUSH
45962: LD_VAR 0 2
45966: NOT
45967: OR
45968: PUSH
45969: LD_VAR 0 3
45973: NOT
45974: OR
45975: IFFALSE 45979
// exit ;
45977: GO 46793
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
45979: LD_ADDR_VAR 0 14
45983: PUSH
45984: LD_VAR 0 1
45988: PPUSH
45989: LD_VAR 0 2
45993: PPUSH
45994: LD_VAR 0 3
45998: PPUSH
45999: LD_VAR 0 4
46003: PPUSH
46004: LD_VAR 0 5
46008: PUSH
46009: LD_INT 1
46011: ARRAY
46012: PPUSH
46013: CALL_OW 248
46017: PPUSH
46018: LD_INT 0
46020: PPUSH
46021: CALL 48046 0 6
46025: ST_TO_ADDR
// if not hexes then
46026: LD_VAR 0 14
46030: NOT
46031: IFFALSE 46035
// exit ;
46033: GO 46793
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
46035: LD_ADDR_VAR 0 17
46039: PUSH
46040: LD_VAR 0 5
46044: PPUSH
46045: LD_INT 22
46047: PUSH
46048: LD_VAR 0 13
46052: PPUSH
46053: CALL_OW 255
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 2
46064: PUSH
46065: LD_INT 30
46067: PUSH
46068: LD_INT 0
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 30
46077: PUSH
46078: LD_INT 1
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: LIST
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PPUSH
46094: CALL_OW 72
46098: ST_TO_ADDR
// for i = 1 to hexes do
46099: LD_ADDR_VAR 0 9
46103: PUSH
46104: DOUBLE
46105: LD_INT 1
46107: DEC
46108: ST_TO_ADDR
46109: LD_VAR 0 14
46113: PUSH
46114: FOR_TO
46115: IFFALSE 46791
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46117: LD_ADDR_VAR 0 13
46121: PUSH
46122: LD_VAR 0 14
46126: PUSH
46127: LD_VAR 0 9
46131: ARRAY
46132: PUSH
46133: LD_INT 1
46135: ARRAY
46136: PPUSH
46137: LD_VAR 0 14
46141: PUSH
46142: LD_VAR 0 9
46146: ARRAY
46147: PUSH
46148: LD_INT 2
46150: ARRAY
46151: PPUSH
46152: CALL_OW 428
46156: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
46157: LD_VAR 0 14
46161: PUSH
46162: LD_VAR 0 9
46166: ARRAY
46167: PUSH
46168: LD_INT 1
46170: ARRAY
46171: PPUSH
46172: LD_VAR 0 14
46176: PUSH
46177: LD_VAR 0 9
46181: ARRAY
46182: PUSH
46183: LD_INT 2
46185: ARRAY
46186: PPUSH
46187: CALL_OW 351
46191: PUSH
46192: LD_VAR 0 14
46196: PUSH
46197: LD_VAR 0 9
46201: ARRAY
46202: PUSH
46203: LD_INT 1
46205: ARRAY
46206: PPUSH
46207: LD_VAR 0 14
46211: PUSH
46212: LD_VAR 0 9
46216: ARRAY
46217: PUSH
46218: LD_INT 2
46220: ARRAY
46221: PPUSH
46222: CALL_OW 488
46226: NOT
46227: OR
46228: PUSH
46229: LD_VAR 0 13
46233: PPUSH
46234: CALL_OW 247
46238: PUSH
46239: LD_INT 3
46241: EQUAL
46242: OR
46243: IFFALSE 46249
// exit ;
46245: POP
46246: POP
46247: GO 46793
// if not tmp then
46249: LD_VAR 0 13
46253: NOT
46254: IFFALSE 46258
// continue ;
46256: GO 46114
// result := true ;
46258: LD_ADDR_VAR 0 8
46262: PUSH
46263: LD_INT 1
46265: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
46266: LD_VAR 0 6
46270: PUSH
46271: LD_VAR 0 13
46275: PPUSH
46276: CALL_OW 247
46280: PUSH
46281: LD_INT 2
46283: EQUAL
46284: AND
46285: PUSH
46286: LD_VAR 0 13
46290: PPUSH
46291: CALL_OW 263
46295: PUSH
46296: LD_INT 1
46298: EQUAL
46299: AND
46300: IFFALSE 46464
// begin if IsDrivenBy ( tmp ) then
46302: LD_VAR 0 13
46306: PPUSH
46307: CALL_OW 311
46311: IFFALSE 46315
// continue ;
46313: GO 46114
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
46315: LD_VAR 0 6
46319: PPUSH
46320: LD_INT 3
46322: PUSH
46323: LD_INT 60
46325: PUSH
46326: EMPTY
46327: LIST
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 3
46335: PUSH
46336: LD_INT 55
46338: PUSH
46339: EMPTY
46340: LIST
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PPUSH
46350: CALL_OW 72
46354: IFFALSE 46462
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
46356: LD_ADDR_VAR 0 18
46360: PUSH
46361: LD_VAR 0 6
46365: PPUSH
46366: LD_INT 3
46368: PUSH
46369: LD_INT 60
46371: PUSH
46372: EMPTY
46373: LIST
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 3
46381: PUSH
46382: LD_INT 55
46384: PUSH
46385: EMPTY
46386: LIST
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PPUSH
46396: CALL_OW 72
46400: PUSH
46401: LD_INT 1
46403: ARRAY
46404: ST_TO_ADDR
// if IsInUnit ( driver ) then
46405: LD_VAR 0 18
46409: PPUSH
46410: CALL_OW 310
46414: IFFALSE 46425
// ComExit ( driver ) ;
46416: LD_VAR 0 18
46420: PPUSH
46421: CALL 71827 0 1
// AddComEnterUnit ( driver , tmp ) ;
46425: LD_VAR 0 18
46429: PPUSH
46430: LD_VAR 0 13
46434: PPUSH
46435: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
46439: LD_VAR 0 18
46443: PPUSH
46444: LD_VAR 0 7
46448: PPUSH
46449: CALL_OW 173
// AddComExitVehicle ( driver ) ;
46453: LD_VAR 0 18
46457: PPUSH
46458: CALL_OW 181
// end ; continue ;
46462: GO 46114
// end ; if not cleaners or not tmp in cleaners then
46464: LD_VAR 0 6
46468: NOT
46469: PUSH
46470: LD_VAR 0 13
46474: PUSH
46475: LD_VAR 0 6
46479: IN
46480: NOT
46481: OR
46482: IFFALSE 46789
// begin if dep then
46484: LD_VAR 0 17
46488: IFFALSE 46624
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
46490: LD_ADDR_VAR 0 16
46494: PUSH
46495: LD_VAR 0 17
46499: PUSH
46500: LD_INT 1
46502: ARRAY
46503: PPUSH
46504: CALL_OW 250
46508: PPUSH
46509: LD_VAR 0 17
46513: PUSH
46514: LD_INT 1
46516: ARRAY
46517: PPUSH
46518: CALL_OW 254
46522: PPUSH
46523: LD_INT 5
46525: PPUSH
46526: CALL_OW 272
46530: PUSH
46531: LD_VAR 0 17
46535: PUSH
46536: LD_INT 1
46538: ARRAY
46539: PPUSH
46540: CALL_OW 251
46544: PPUSH
46545: LD_VAR 0 17
46549: PUSH
46550: LD_INT 1
46552: ARRAY
46553: PPUSH
46554: CALL_OW 254
46558: PPUSH
46559: LD_INT 5
46561: PPUSH
46562: CALL_OW 273
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
46571: LD_VAR 0 16
46575: PUSH
46576: LD_INT 1
46578: ARRAY
46579: PPUSH
46580: LD_VAR 0 16
46584: PUSH
46585: LD_INT 2
46587: ARRAY
46588: PPUSH
46589: CALL_OW 488
46593: IFFALSE 46624
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
46595: LD_VAR 0 13
46599: PPUSH
46600: LD_VAR 0 16
46604: PUSH
46605: LD_INT 1
46607: ARRAY
46608: PPUSH
46609: LD_VAR 0 16
46613: PUSH
46614: LD_INT 2
46616: ARRAY
46617: PPUSH
46618: CALL_OW 111
// continue ;
46622: GO 46114
// end ; end ; r := GetDir ( tmp ) ;
46624: LD_ADDR_VAR 0 15
46628: PUSH
46629: LD_VAR 0 13
46633: PPUSH
46634: CALL_OW 254
46638: ST_TO_ADDR
// if r = 5 then
46639: LD_VAR 0 15
46643: PUSH
46644: LD_INT 5
46646: EQUAL
46647: IFFALSE 46657
// r := 0 ;
46649: LD_ADDR_VAR 0 15
46653: PUSH
46654: LD_INT 0
46656: ST_TO_ADDR
// for j = r to 5 do
46657: LD_ADDR_VAR 0 10
46661: PUSH
46662: DOUBLE
46663: LD_VAR 0 15
46667: DEC
46668: ST_TO_ADDR
46669: LD_INT 5
46671: PUSH
46672: FOR_TO
46673: IFFALSE 46787
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
46675: LD_ADDR_VAR 0 11
46679: PUSH
46680: LD_VAR 0 13
46684: PPUSH
46685: CALL_OW 250
46689: PPUSH
46690: LD_VAR 0 10
46694: PPUSH
46695: LD_INT 2
46697: PPUSH
46698: CALL_OW 272
46702: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
46703: LD_ADDR_VAR 0 12
46707: PUSH
46708: LD_VAR 0 13
46712: PPUSH
46713: CALL_OW 251
46717: PPUSH
46718: LD_VAR 0 10
46722: PPUSH
46723: LD_INT 2
46725: PPUSH
46726: CALL_OW 273
46730: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
46731: LD_VAR 0 11
46735: PPUSH
46736: LD_VAR 0 12
46740: PPUSH
46741: CALL_OW 488
46745: PUSH
46746: LD_VAR 0 11
46750: PPUSH
46751: LD_VAR 0 12
46755: PPUSH
46756: CALL_OW 428
46760: NOT
46761: AND
46762: IFFALSE 46785
// begin ComMoveXY ( tmp , _x , _y ) ;
46764: LD_VAR 0 13
46768: PPUSH
46769: LD_VAR 0 11
46773: PPUSH
46774: LD_VAR 0 12
46778: PPUSH
46779: CALL_OW 111
// break ;
46783: GO 46787
// end ; end ;
46785: GO 46672
46787: POP
46788: POP
// end ; end ;
46789: GO 46114
46791: POP
46792: POP
// end ;
46793: LD_VAR 0 8
46797: RET
// export function BuildingTechInvented ( side , btype ) ; begin
46798: LD_INT 0
46800: PPUSH
// result := true ;
46801: LD_ADDR_VAR 0 3
46805: PUSH
46806: LD_INT 1
46808: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
46809: LD_VAR 0 2
46813: PUSH
46814: LD_INT 24
46816: DOUBLE
46817: EQUAL
46818: IFTRUE 46828
46820: LD_INT 33
46822: DOUBLE
46823: EQUAL
46824: IFTRUE 46828
46826: GO 46853
46828: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
46829: LD_ADDR_VAR 0 3
46833: PUSH
46834: LD_INT 32
46836: PPUSH
46837: LD_VAR 0 1
46841: PPUSH
46842: CALL_OW 321
46846: PUSH
46847: LD_INT 2
46849: EQUAL
46850: ST_TO_ADDR
46851: GO 47169
46853: LD_INT 20
46855: DOUBLE
46856: EQUAL
46857: IFTRUE 46861
46859: GO 46886
46861: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
46862: LD_ADDR_VAR 0 3
46866: PUSH
46867: LD_INT 6
46869: PPUSH
46870: LD_VAR 0 1
46874: PPUSH
46875: CALL_OW 321
46879: PUSH
46880: LD_INT 2
46882: EQUAL
46883: ST_TO_ADDR
46884: GO 47169
46886: LD_INT 22
46888: DOUBLE
46889: EQUAL
46890: IFTRUE 46900
46892: LD_INT 36
46894: DOUBLE
46895: EQUAL
46896: IFTRUE 46900
46898: GO 46925
46900: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
46901: LD_ADDR_VAR 0 3
46905: PUSH
46906: LD_INT 15
46908: PPUSH
46909: LD_VAR 0 1
46913: PPUSH
46914: CALL_OW 321
46918: PUSH
46919: LD_INT 2
46921: EQUAL
46922: ST_TO_ADDR
46923: GO 47169
46925: LD_INT 30
46927: DOUBLE
46928: EQUAL
46929: IFTRUE 46933
46931: GO 46958
46933: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
46934: LD_ADDR_VAR 0 3
46938: PUSH
46939: LD_INT 20
46941: PPUSH
46942: LD_VAR 0 1
46946: PPUSH
46947: CALL_OW 321
46951: PUSH
46952: LD_INT 2
46954: EQUAL
46955: ST_TO_ADDR
46956: GO 47169
46958: LD_INT 28
46960: DOUBLE
46961: EQUAL
46962: IFTRUE 46972
46964: LD_INT 21
46966: DOUBLE
46967: EQUAL
46968: IFTRUE 46972
46970: GO 46997
46972: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
46973: LD_ADDR_VAR 0 3
46977: PUSH
46978: LD_INT 21
46980: PPUSH
46981: LD_VAR 0 1
46985: PPUSH
46986: CALL_OW 321
46990: PUSH
46991: LD_INT 2
46993: EQUAL
46994: ST_TO_ADDR
46995: GO 47169
46997: LD_INT 16
46999: DOUBLE
47000: EQUAL
47001: IFTRUE 47005
47003: GO 47030
47005: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
47006: LD_ADDR_VAR 0 3
47010: PUSH
47011: LD_INT 84
47013: PPUSH
47014: LD_VAR 0 1
47018: PPUSH
47019: CALL_OW 321
47023: PUSH
47024: LD_INT 2
47026: EQUAL
47027: ST_TO_ADDR
47028: GO 47169
47030: LD_INT 19
47032: DOUBLE
47033: EQUAL
47034: IFTRUE 47044
47036: LD_INT 23
47038: DOUBLE
47039: EQUAL
47040: IFTRUE 47044
47042: GO 47069
47044: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
47045: LD_ADDR_VAR 0 3
47049: PUSH
47050: LD_INT 83
47052: PPUSH
47053: LD_VAR 0 1
47057: PPUSH
47058: CALL_OW 321
47062: PUSH
47063: LD_INT 2
47065: EQUAL
47066: ST_TO_ADDR
47067: GO 47169
47069: LD_INT 17
47071: DOUBLE
47072: EQUAL
47073: IFTRUE 47077
47075: GO 47102
47077: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
47078: LD_ADDR_VAR 0 3
47082: PUSH
47083: LD_INT 39
47085: PPUSH
47086: LD_VAR 0 1
47090: PPUSH
47091: CALL_OW 321
47095: PUSH
47096: LD_INT 2
47098: EQUAL
47099: ST_TO_ADDR
47100: GO 47169
47102: LD_INT 18
47104: DOUBLE
47105: EQUAL
47106: IFTRUE 47110
47108: GO 47135
47110: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
47111: LD_ADDR_VAR 0 3
47115: PUSH
47116: LD_INT 40
47118: PPUSH
47119: LD_VAR 0 1
47123: PPUSH
47124: CALL_OW 321
47128: PUSH
47129: LD_INT 2
47131: EQUAL
47132: ST_TO_ADDR
47133: GO 47169
47135: LD_INT 27
47137: DOUBLE
47138: EQUAL
47139: IFTRUE 47143
47141: GO 47168
47143: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
47144: LD_ADDR_VAR 0 3
47148: PUSH
47149: LD_INT 35
47151: PPUSH
47152: LD_VAR 0 1
47156: PPUSH
47157: CALL_OW 321
47161: PUSH
47162: LD_INT 2
47164: EQUAL
47165: ST_TO_ADDR
47166: GO 47169
47168: POP
// end ;
47169: LD_VAR 0 3
47173: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
47174: LD_INT 0
47176: PPUSH
47177: PPUSH
47178: PPUSH
47179: PPUSH
47180: PPUSH
47181: PPUSH
47182: PPUSH
47183: PPUSH
47184: PPUSH
47185: PPUSH
47186: PPUSH
// result := false ;
47187: LD_ADDR_VAR 0 6
47191: PUSH
47192: LD_INT 0
47194: ST_TO_ADDR
// if btype = b_depot then
47195: LD_VAR 0 2
47199: PUSH
47200: LD_INT 0
47202: EQUAL
47203: IFFALSE 47215
// begin result := true ;
47205: LD_ADDR_VAR 0 6
47209: PUSH
47210: LD_INT 1
47212: ST_TO_ADDR
// exit ;
47213: GO 48041
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
47215: LD_VAR 0 1
47219: NOT
47220: PUSH
47221: LD_VAR 0 1
47225: PPUSH
47226: CALL_OW 266
47230: PUSH
47231: LD_INT 0
47233: PUSH
47234: LD_INT 1
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: IN
47241: NOT
47242: OR
47243: PUSH
47244: LD_VAR 0 2
47248: NOT
47249: OR
47250: PUSH
47251: LD_VAR 0 5
47255: PUSH
47256: LD_INT 0
47258: PUSH
47259: LD_INT 1
47261: PUSH
47262: LD_INT 2
47264: PUSH
47265: LD_INT 3
47267: PUSH
47268: LD_INT 4
47270: PUSH
47271: LD_INT 5
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: IN
47282: NOT
47283: OR
47284: PUSH
47285: LD_VAR 0 3
47289: PPUSH
47290: LD_VAR 0 4
47294: PPUSH
47295: CALL_OW 488
47299: NOT
47300: OR
47301: IFFALSE 47305
// exit ;
47303: GO 48041
// side := GetSide ( depot ) ;
47305: LD_ADDR_VAR 0 9
47309: PUSH
47310: LD_VAR 0 1
47314: PPUSH
47315: CALL_OW 255
47319: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
47320: LD_VAR 0 9
47324: PPUSH
47325: LD_VAR 0 2
47329: PPUSH
47330: CALL 46798 0 2
47334: NOT
47335: IFFALSE 47339
// exit ;
47337: GO 48041
// pom := GetBase ( depot ) ;
47339: LD_ADDR_VAR 0 10
47343: PUSH
47344: LD_VAR 0 1
47348: PPUSH
47349: CALL_OW 274
47353: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
47354: LD_ADDR_VAR 0 11
47358: PUSH
47359: LD_VAR 0 2
47363: PPUSH
47364: LD_VAR 0 1
47368: PPUSH
47369: CALL_OW 248
47373: PPUSH
47374: CALL_OW 450
47378: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
47379: LD_VAR 0 10
47383: PPUSH
47384: LD_INT 1
47386: PPUSH
47387: CALL_OW 275
47391: PUSH
47392: LD_VAR 0 11
47396: PUSH
47397: LD_INT 1
47399: ARRAY
47400: GREATEREQUAL
47401: PUSH
47402: LD_VAR 0 10
47406: PPUSH
47407: LD_INT 2
47409: PPUSH
47410: CALL_OW 275
47414: PUSH
47415: LD_VAR 0 11
47419: PUSH
47420: LD_INT 2
47422: ARRAY
47423: GREATEREQUAL
47424: AND
47425: PUSH
47426: LD_VAR 0 10
47430: PPUSH
47431: LD_INT 3
47433: PPUSH
47434: CALL_OW 275
47438: PUSH
47439: LD_VAR 0 11
47443: PUSH
47444: LD_INT 3
47446: ARRAY
47447: GREATEREQUAL
47448: AND
47449: NOT
47450: IFFALSE 47454
// exit ;
47452: GO 48041
// if GetBType ( depot ) = b_depot then
47454: LD_VAR 0 1
47458: PPUSH
47459: CALL_OW 266
47463: PUSH
47464: LD_INT 0
47466: EQUAL
47467: IFFALSE 47479
// dist := 28 else
47469: LD_ADDR_VAR 0 14
47473: PUSH
47474: LD_INT 28
47476: ST_TO_ADDR
47477: GO 47487
// dist := 36 ;
47479: LD_ADDR_VAR 0 14
47483: PUSH
47484: LD_INT 36
47486: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
47487: LD_VAR 0 1
47491: PPUSH
47492: LD_VAR 0 3
47496: PPUSH
47497: LD_VAR 0 4
47501: PPUSH
47502: CALL_OW 297
47506: PUSH
47507: LD_VAR 0 14
47511: GREATER
47512: IFFALSE 47516
// exit ;
47514: GO 48041
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
47516: LD_ADDR_VAR 0 12
47520: PUSH
47521: LD_VAR 0 2
47525: PPUSH
47526: LD_VAR 0 3
47530: PPUSH
47531: LD_VAR 0 4
47535: PPUSH
47536: LD_VAR 0 5
47540: PPUSH
47541: LD_VAR 0 1
47545: PPUSH
47546: CALL_OW 248
47550: PPUSH
47551: LD_INT 0
47553: PPUSH
47554: CALL 48046 0 6
47558: ST_TO_ADDR
// if not hexes then
47559: LD_VAR 0 12
47563: NOT
47564: IFFALSE 47568
// exit ;
47566: GO 48041
// hex := GetHexInfo ( x , y ) ;
47568: LD_ADDR_VAR 0 15
47572: PUSH
47573: LD_VAR 0 3
47577: PPUSH
47578: LD_VAR 0 4
47582: PPUSH
47583: CALL_OW 546
47587: ST_TO_ADDR
// if hex [ 1 ] then
47588: LD_VAR 0 15
47592: PUSH
47593: LD_INT 1
47595: ARRAY
47596: IFFALSE 47600
// exit ;
47598: GO 48041
// height := hex [ 2 ] ;
47600: LD_ADDR_VAR 0 13
47604: PUSH
47605: LD_VAR 0 15
47609: PUSH
47610: LD_INT 2
47612: ARRAY
47613: ST_TO_ADDR
// for i = 1 to hexes do
47614: LD_ADDR_VAR 0 7
47618: PUSH
47619: DOUBLE
47620: LD_INT 1
47622: DEC
47623: ST_TO_ADDR
47624: LD_VAR 0 12
47628: PUSH
47629: FOR_TO
47630: IFFALSE 47960
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
47632: LD_VAR 0 12
47636: PUSH
47637: LD_VAR 0 7
47641: ARRAY
47642: PUSH
47643: LD_INT 1
47645: ARRAY
47646: PPUSH
47647: LD_VAR 0 12
47651: PUSH
47652: LD_VAR 0 7
47656: ARRAY
47657: PUSH
47658: LD_INT 2
47660: ARRAY
47661: PPUSH
47662: CALL_OW 488
47666: NOT
47667: PUSH
47668: LD_VAR 0 12
47672: PUSH
47673: LD_VAR 0 7
47677: ARRAY
47678: PUSH
47679: LD_INT 1
47681: ARRAY
47682: PPUSH
47683: LD_VAR 0 12
47687: PUSH
47688: LD_VAR 0 7
47692: ARRAY
47693: PUSH
47694: LD_INT 2
47696: ARRAY
47697: PPUSH
47698: CALL_OW 428
47702: PUSH
47703: LD_INT 0
47705: GREATER
47706: OR
47707: PUSH
47708: LD_VAR 0 12
47712: PUSH
47713: LD_VAR 0 7
47717: ARRAY
47718: PUSH
47719: LD_INT 1
47721: ARRAY
47722: PPUSH
47723: LD_VAR 0 12
47727: PUSH
47728: LD_VAR 0 7
47732: ARRAY
47733: PUSH
47734: LD_INT 2
47736: ARRAY
47737: PPUSH
47738: CALL_OW 351
47742: OR
47743: IFFALSE 47749
// exit ;
47745: POP
47746: POP
47747: GO 48041
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47749: LD_ADDR_VAR 0 8
47753: PUSH
47754: LD_VAR 0 12
47758: PUSH
47759: LD_VAR 0 7
47763: ARRAY
47764: PUSH
47765: LD_INT 1
47767: ARRAY
47768: PPUSH
47769: LD_VAR 0 12
47773: PUSH
47774: LD_VAR 0 7
47778: ARRAY
47779: PUSH
47780: LD_INT 2
47782: ARRAY
47783: PPUSH
47784: CALL_OW 546
47788: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
47789: LD_VAR 0 8
47793: PUSH
47794: LD_INT 1
47796: ARRAY
47797: PUSH
47798: LD_VAR 0 8
47802: PUSH
47803: LD_INT 2
47805: ARRAY
47806: PUSH
47807: LD_VAR 0 13
47811: PUSH
47812: LD_INT 2
47814: PLUS
47815: GREATER
47816: OR
47817: PUSH
47818: LD_VAR 0 8
47822: PUSH
47823: LD_INT 2
47825: ARRAY
47826: PUSH
47827: LD_VAR 0 13
47831: PUSH
47832: LD_INT 2
47834: MINUS
47835: LESS
47836: OR
47837: PUSH
47838: LD_VAR 0 8
47842: PUSH
47843: LD_INT 3
47845: ARRAY
47846: PUSH
47847: LD_INT 0
47849: PUSH
47850: LD_INT 8
47852: PUSH
47853: LD_INT 9
47855: PUSH
47856: LD_INT 10
47858: PUSH
47859: LD_INT 11
47861: PUSH
47862: LD_INT 12
47864: PUSH
47865: LD_INT 13
47867: PUSH
47868: LD_INT 16
47870: PUSH
47871: LD_INT 17
47873: PUSH
47874: LD_INT 18
47876: PUSH
47877: LD_INT 19
47879: PUSH
47880: LD_INT 20
47882: PUSH
47883: LD_INT 21
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: IN
47901: NOT
47902: OR
47903: PUSH
47904: LD_VAR 0 8
47908: PUSH
47909: LD_INT 5
47911: ARRAY
47912: NOT
47913: OR
47914: PUSH
47915: LD_VAR 0 8
47919: PUSH
47920: LD_INT 6
47922: ARRAY
47923: PUSH
47924: LD_INT 1
47926: PUSH
47927: LD_INT 2
47929: PUSH
47930: LD_INT 7
47932: PUSH
47933: LD_INT 9
47935: PUSH
47936: LD_INT 10
47938: PUSH
47939: LD_INT 11
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: IN
47950: NOT
47951: OR
47952: IFFALSE 47958
// exit ;
47954: POP
47955: POP
47956: GO 48041
// end ;
47958: GO 47629
47960: POP
47961: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
47962: LD_VAR 0 9
47966: PPUSH
47967: LD_VAR 0 3
47971: PPUSH
47972: LD_VAR 0 4
47976: PPUSH
47977: LD_INT 20
47979: PPUSH
47980: CALL 39964 0 4
47984: PUSH
47985: LD_INT 4
47987: ARRAY
47988: IFFALSE 47992
// exit ;
47990: GO 48041
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
47992: LD_VAR 0 2
47996: PUSH
47997: LD_INT 29
47999: PUSH
48000: LD_INT 30
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: IN
48007: PUSH
48008: LD_VAR 0 3
48012: PPUSH
48013: LD_VAR 0 4
48017: PPUSH
48018: LD_VAR 0 9
48022: PPUSH
48023: CALL_OW 440
48027: NOT
48028: AND
48029: IFFALSE 48033
// exit ;
48031: GO 48041
// result := true ;
48033: LD_ADDR_VAR 0 6
48037: PUSH
48038: LD_INT 1
48040: ST_TO_ADDR
// end ;
48041: LD_VAR 0 6
48045: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
48046: LD_INT 0
48048: PPUSH
48049: PPUSH
48050: PPUSH
48051: PPUSH
48052: PPUSH
48053: PPUSH
48054: PPUSH
48055: PPUSH
48056: PPUSH
48057: PPUSH
48058: PPUSH
48059: PPUSH
48060: PPUSH
48061: PPUSH
48062: PPUSH
48063: PPUSH
48064: PPUSH
48065: PPUSH
48066: PPUSH
48067: PPUSH
48068: PPUSH
48069: PPUSH
48070: PPUSH
48071: PPUSH
48072: PPUSH
48073: PPUSH
48074: PPUSH
48075: PPUSH
48076: PPUSH
48077: PPUSH
48078: PPUSH
48079: PPUSH
48080: PPUSH
48081: PPUSH
48082: PPUSH
48083: PPUSH
48084: PPUSH
48085: PPUSH
48086: PPUSH
48087: PPUSH
48088: PPUSH
48089: PPUSH
48090: PPUSH
48091: PPUSH
48092: PPUSH
48093: PPUSH
48094: PPUSH
48095: PPUSH
48096: PPUSH
48097: PPUSH
48098: PPUSH
48099: PPUSH
48100: PPUSH
48101: PPUSH
48102: PPUSH
48103: PPUSH
48104: PPUSH
48105: PPUSH
// result = [ ] ;
48106: LD_ADDR_VAR 0 7
48110: PUSH
48111: EMPTY
48112: ST_TO_ADDR
// temp_list = [ ] ;
48113: LD_ADDR_VAR 0 9
48117: PUSH
48118: EMPTY
48119: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
48120: LD_VAR 0 4
48124: PUSH
48125: LD_INT 0
48127: PUSH
48128: LD_INT 1
48130: PUSH
48131: LD_INT 2
48133: PUSH
48134: LD_INT 3
48136: PUSH
48137: LD_INT 4
48139: PUSH
48140: LD_INT 5
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: IN
48151: NOT
48152: PUSH
48153: LD_VAR 0 1
48157: PUSH
48158: LD_INT 0
48160: PUSH
48161: LD_INT 1
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: IN
48168: PUSH
48169: LD_VAR 0 5
48173: PUSH
48174: LD_INT 1
48176: PUSH
48177: LD_INT 2
48179: PUSH
48180: LD_INT 3
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: LIST
48187: IN
48188: NOT
48189: AND
48190: OR
48191: IFFALSE 48195
// exit ;
48193: GO 66586
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
48195: LD_VAR 0 1
48199: PUSH
48200: LD_INT 6
48202: PUSH
48203: LD_INT 7
48205: PUSH
48206: LD_INT 8
48208: PUSH
48209: LD_INT 13
48211: PUSH
48212: LD_INT 12
48214: PUSH
48215: LD_INT 15
48217: PUSH
48218: LD_INT 11
48220: PUSH
48221: LD_INT 14
48223: PUSH
48224: LD_INT 10
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: IN
48238: IFFALSE 48248
// btype = b_lab ;
48240: LD_ADDR_VAR 0 1
48244: PUSH
48245: LD_INT 6
48247: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
48248: LD_VAR 0 6
48252: PUSH
48253: LD_INT 0
48255: PUSH
48256: LD_INT 1
48258: PUSH
48259: LD_INT 2
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: LIST
48266: IN
48267: NOT
48268: PUSH
48269: LD_VAR 0 1
48273: PUSH
48274: LD_INT 0
48276: PUSH
48277: LD_INT 1
48279: PUSH
48280: LD_INT 2
48282: PUSH
48283: LD_INT 3
48285: PUSH
48286: LD_INT 6
48288: PUSH
48289: LD_INT 36
48291: PUSH
48292: LD_INT 4
48294: PUSH
48295: LD_INT 5
48297: PUSH
48298: LD_INT 31
48300: PUSH
48301: LD_INT 32
48303: PUSH
48304: LD_INT 33
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: IN
48320: NOT
48321: PUSH
48322: LD_VAR 0 6
48326: PUSH
48327: LD_INT 1
48329: EQUAL
48330: AND
48331: OR
48332: PUSH
48333: LD_VAR 0 1
48337: PUSH
48338: LD_INT 2
48340: PUSH
48341: LD_INT 3
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: IN
48348: NOT
48349: PUSH
48350: LD_VAR 0 6
48354: PUSH
48355: LD_INT 2
48357: EQUAL
48358: AND
48359: OR
48360: IFFALSE 48370
// mode = 0 ;
48362: LD_ADDR_VAR 0 6
48366: PUSH
48367: LD_INT 0
48369: ST_TO_ADDR
// case mode of 0 :
48370: LD_VAR 0 6
48374: PUSH
48375: LD_INT 0
48377: DOUBLE
48378: EQUAL
48379: IFTRUE 48383
48381: GO 59836
48383: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48384: LD_ADDR_VAR 0 11
48388: PUSH
48389: LD_INT 0
48391: PUSH
48392: LD_INT 0
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 0
48401: PUSH
48402: LD_INT 1
48404: NEG
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 1
48412: PUSH
48413: LD_INT 0
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 1
48422: PUSH
48423: LD_INT 1
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 0
48432: PUSH
48433: LD_INT 1
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 1
48442: NEG
48443: PUSH
48444: LD_INT 0
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 1
48453: NEG
48454: PUSH
48455: LD_INT 1
48457: NEG
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 1
48465: NEG
48466: PUSH
48467: LD_INT 2
48469: NEG
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 0
48477: PUSH
48478: LD_INT 2
48480: NEG
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 1
48488: PUSH
48489: LD_INT 1
48491: NEG
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 1
48499: PUSH
48500: LD_INT 2
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 0
48509: PUSH
48510: LD_INT 2
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 1
48519: NEG
48520: PUSH
48521: LD_INT 1
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 1
48530: PUSH
48531: LD_INT 3
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 0
48540: PUSH
48541: LD_INT 3
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 1
48550: NEG
48551: PUSH
48552: LD_INT 2
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48577: LD_ADDR_VAR 0 12
48581: PUSH
48582: LD_INT 0
48584: PUSH
48585: LD_INT 0
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 0
48594: PUSH
48595: LD_INT 1
48597: NEG
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 1
48605: PUSH
48606: LD_INT 0
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 1
48615: PUSH
48616: LD_INT 1
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 0
48625: PUSH
48626: LD_INT 1
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 1
48635: NEG
48636: PUSH
48637: LD_INT 0
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 1
48646: NEG
48647: PUSH
48648: LD_INT 1
48650: NEG
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: PUSH
48656: LD_INT 1
48658: PUSH
48659: LD_INT 1
48661: NEG
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 2
48669: PUSH
48670: LD_INT 0
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 2
48679: PUSH
48680: LD_INT 1
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 1
48689: NEG
48690: PUSH
48691: LD_INT 1
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 2
48700: NEG
48701: PUSH
48702: LD_INT 0
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 2
48711: NEG
48712: PUSH
48713: LD_INT 1
48715: NEG
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 2
48723: NEG
48724: PUSH
48725: LD_INT 1
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 3
48734: NEG
48735: PUSH
48736: LD_INT 0
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 3
48745: NEG
48746: PUSH
48747: LD_INT 1
48749: NEG
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48773: LD_ADDR_VAR 0 13
48777: PUSH
48778: LD_INT 0
48780: PUSH
48781: LD_INT 0
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 0
48790: PUSH
48791: LD_INT 1
48793: NEG
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 1
48801: PUSH
48802: LD_INT 0
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 1
48811: PUSH
48812: LD_INT 1
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 0
48821: PUSH
48822: LD_INT 1
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 1
48831: NEG
48832: PUSH
48833: LD_INT 0
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 1
48842: NEG
48843: PUSH
48844: LD_INT 1
48846: NEG
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 1
48854: NEG
48855: PUSH
48856: LD_INT 2
48858: NEG
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 2
48866: PUSH
48867: LD_INT 1
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 2
48876: PUSH
48877: LD_INT 2
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 1
48886: PUSH
48887: LD_INT 2
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 2
48896: NEG
48897: PUSH
48898: LD_INT 1
48900: NEG
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 2
48908: NEG
48909: PUSH
48910: LD_INT 2
48912: NEG
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 2
48920: NEG
48921: PUSH
48922: LD_INT 3
48924: NEG
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 3
48932: NEG
48933: PUSH
48934: LD_INT 2
48936: NEG
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 3
48944: NEG
48945: PUSH
48946: LD_INT 3
48948: NEG
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48972: LD_ADDR_VAR 0 14
48976: PUSH
48977: LD_INT 0
48979: PUSH
48980: LD_INT 0
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 0
48989: PUSH
48990: LD_INT 1
48992: NEG
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 1
49000: PUSH
49001: LD_INT 0
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 1
49010: PUSH
49011: LD_INT 1
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 0
49020: PUSH
49021: LD_INT 1
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 1
49030: NEG
49031: PUSH
49032: LD_INT 0
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 1
49041: NEG
49042: PUSH
49043: LD_INT 1
49045: NEG
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 1
49053: NEG
49054: PUSH
49055: LD_INT 2
49057: NEG
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 0
49065: PUSH
49066: LD_INT 2
49068: NEG
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 1
49076: PUSH
49077: LD_INT 1
49079: NEG
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 1
49087: PUSH
49088: LD_INT 2
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 0
49097: PUSH
49098: LD_INT 2
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 1
49107: NEG
49108: PUSH
49109: LD_INT 1
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 1
49118: NEG
49119: PUSH
49120: LD_INT 3
49122: NEG
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 0
49130: PUSH
49131: LD_INT 3
49133: NEG
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 1
49141: PUSH
49142: LD_INT 2
49144: NEG
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49168: LD_ADDR_VAR 0 15
49172: PUSH
49173: LD_INT 0
49175: PUSH
49176: LD_INT 0
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 0
49185: PUSH
49186: LD_INT 1
49188: NEG
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 1
49196: PUSH
49197: LD_INT 0
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 1
49206: PUSH
49207: LD_INT 1
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 0
49216: PUSH
49217: LD_INT 1
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 1
49226: NEG
49227: PUSH
49228: LD_INT 0
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 1
49237: NEG
49238: PUSH
49239: LD_INT 1
49241: NEG
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 1
49249: PUSH
49250: LD_INT 1
49252: NEG
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 2
49260: PUSH
49261: LD_INT 0
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 2
49270: PUSH
49271: LD_INT 1
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 1
49280: NEG
49281: PUSH
49282: LD_INT 1
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 2
49291: NEG
49292: PUSH
49293: LD_INT 0
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 2
49302: NEG
49303: PUSH
49304: LD_INT 1
49306: NEG
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 2
49314: PUSH
49315: LD_INT 1
49317: NEG
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 3
49325: PUSH
49326: LD_INT 0
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 3
49335: PUSH
49336: LD_INT 1
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49361: LD_ADDR_VAR 0 16
49365: PUSH
49366: LD_INT 0
49368: PUSH
49369: LD_INT 0
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 0
49378: PUSH
49379: LD_INT 1
49381: NEG
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 1
49389: PUSH
49390: LD_INT 0
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 1
49399: PUSH
49400: LD_INT 1
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 0
49409: PUSH
49410: LD_INT 1
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 1
49419: NEG
49420: PUSH
49421: LD_INT 0
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 1
49430: NEG
49431: PUSH
49432: LD_INT 1
49434: NEG
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 1
49442: NEG
49443: PUSH
49444: LD_INT 2
49446: NEG
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 2
49454: PUSH
49455: LD_INT 1
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 2
49464: PUSH
49465: LD_INT 2
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 1
49474: PUSH
49475: LD_INT 2
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 2
49484: NEG
49485: PUSH
49486: LD_INT 1
49488: NEG
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 2
49496: NEG
49497: PUSH
49498: LD_INT 2
49500: NEG
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 3
49508: PUSH
49509: LD_INT 2
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 3
49518: PUSH
49519: LD_INT 3
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 2
49528: PUSH
49529: LD_INT 3
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49554: LD_ADDR_VAR 0 17
49558: PUSH
49559: LD_INT 0
49561: PUSH
49562: LD_INT 0
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 0
49571: PUSH
49572: LD_INT 1
49574: NEG
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 1
49582: PUSH
49583: LD_INT 0
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 1
49592: PUSH
49593: LD_INT 1
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 0
49602: PUSH
49603: LD_INT 1
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 1
49612: NEG
49613: PUSH
49614: LD_INT 0
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 1
49623: NEG
49624: PUSH
49625: LD_INT 1
49627: NEG
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 1
49635: NEG
49636: PUSH
49637: LD_INT 2
49639: NEG
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 0
49647: PUSH
49648: LD_INT 2
49650: NEG
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 1
49658: PUSH
49659: LD_INT 1
49661: NEG
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 2
49669: PUSH
49670: LD_INT 0
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 2
49679: PUSH
49680: LD_INT 1
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 2
49689: PUSH
49690: LD_INT 2
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 1
49699: PUSH
49700: LD_INT 2
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 0
49709: PUSH
49710: LD_INT 2
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 1
49719: NEG
49720: PUSH
49721: LD_INT 1
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 2
49730: NEG
49731: PUSH
49732: LD_INT 0
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 2
49741: NEG
49742: PUSH
49743: LD_INT 1
49745: NEG
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 2
49753: NEG
49754: PUSH
49755: LD_INT 2
49757: NEG
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49784: LD_ADDR_VAR 0 18
49788: PUSH
49789: LD_INT 0
49791: PUSH
49792: LD_INT 0
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 0
49801: PUSH
49802: LD_INT 1
49804: NEG
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 1
49812: PUSH
49813: LD_INT 0
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 1
49822: PUSH
49823: LD_INT 1
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 0
49832: PUSH
49833: LD_INT 1
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 1
49842: NEG
49843: PUSH
49844: LD_INT 0
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 1
49853: NEG
49854: PUSH
49855: LD_INT 1
49857: NEG
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 1
49865: NEG
49866: PUSH
49867: LD_INT 2
49869: NEG
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 0
49877: PUSH
49878: LD_INT 2
49880: NEG
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 1
49888: PUSH
49889: LD_INT 1
49891: NEG
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 2
49899: PUSH
49900: LD_INT 0
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 2
49909: PUSH
49910: LD_INT 1
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 2
49919: PUSH
49920: LD_INT 2
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 1
49929: PUSH
49930: LD_INT 2
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 0
49939: PUSH
49940: LD_INT 2
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 1
49949: NEG
49950: PUSH
49951: LD_INT 1
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 2
49960: NEG
49961: PUSH
49962: LD_INT 0
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 2
49971: NEG
49972: PUSH
49973: LD_INT 1
49975: NEG
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 2
49983: NEG
49984: PUSH
49985: LD_INT 2
49987: NEG
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50014: LD_ADDR_VAR 0 19
50018: PUSH
50019: LD_INT 0
50021: PUSH
50022: LD_INT 0
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 0
50031: PUSH
50032: LD_INT 1
50034: NEG
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 1
50042: PUSH
50043: LD_INT 0
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 1
50052: PUSH
50053: LD_INT 1
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 0
50062: PUSH
50063: LD_INT 1
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 1
50072: NEG
50073: PUSH
50074: LD_INT 0
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 1
50083: NEG
50084: PUSH
50085: LD_INT 1
50087: NEG
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 1
50095: NEG
50096: PUSH
50097: LD_INT 2
50099: NEG
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 0
50107: PUSH
50108: LD_INT 2
50110: NEG
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 1
50118: PUSH
50119: LD_INT 1
50121: NEG
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 2
50129: PUSH
50130: LD_INT 0
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 2
50139: PUSH
50140: LD_INT 1
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 2
50149: PUSH
50150: LD_INT 2
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 1
50159: PUSH
50160: LD_INT 2
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 0
50169: PUSH
50170: LD_INT 2
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 1
50179: NEG
50180: PUSH
50181: LD_INT 1
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 2
50190: NEG
50191: PUSH
50192: LD_INT 0
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 2
50201: NEG
50202: PUSH
50203: LD_INT 1
50205: NEG
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 2
50213: NEG
50214: PUSH
50215: LD_INT 2
50217: NEG
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50244: LD_ADDR_VAR 0 20
50248: PUSH
50249: LD_INT 0
50251: PUSH
50252: LD_INT 0
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 0
50261: PUSH
50262: LD_INT 1
50264: NEG
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 1
50272: PUSH
50273: LD_INT 0
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 1
50282: PUSH
50283: LD_INT 1
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 0
50292: PUSH
50293: LD_INT 1
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 1
50302: NEG
50303: PUSH
50304: LD_INT 0
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 1
50313: NEG
50314: PUSH
50315: LD_INT 1
50317: NEG
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 1
50325: NEG
50326: PUSH
50327: LD_INT 2
50329: NEG
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 0
50337: PUSH
50338: LD_INT 2
50340: NEG
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 1
50348: PUSH
50349: LD_INT 1
50351: NEG
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 2
50359: PUSH
50360: LD_INT 0
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 2
50369: PUSH
50370: LD_INT 1
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 2
50379: PUSH
50380: LD_INT 2
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 1
50389: PUSH
50390: LD_INT 2
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 0
50399: PUSH
50400: LD_INT 2
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 1
50409: NEG
50410: PUSH
50411: LD_INT 1
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 2
50420: NEG
50421: PUSH
50422: LD_INT 0
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 2
50431: NEG
50432: PUSH
50433: LD_INT 1
50435: NEG
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 2
50443: NEG
50444: PUSH
50445: LD_INT 2
50447: NEG
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50474: LD_ADDR_VAR 0 21
50478: PUSH
50479: LD_INT 0
50481: PUSH
50482: LD_INT 0
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 0
50491: PUSH
50492: LD_INT 1
50494: NEG
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 1
50502: PUSH
50503: LD_INT 0
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 1
50512: PUSH
50513: LD_INT 1
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 0
50522: PUSH
50523: LD_INT 1
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 1
50532: NEG
50533: PUSH
50534: LD_INT 0
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 1
50543: NEG
50544: PUSH
50545: LD_INT 1
50547: NEG
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 1
50555: NEG
50556: PUSH
50557: LD_INT 2
50559: NEG
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 0
50567: PUSH
50568: LD_INT 2
50570: NEG
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 1
50578: PUSH
50579: LD_INT 1
50581: NEG
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 2
50589: PUSH
50590: LD_INT 0
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 2
50599: PUSH
50600: LD_INT 1
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 2
50609: PUSH
50610: LD_INT 2
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 1
50619: PUSH
50620: LD_INT 2
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 0
50629: PUSH
50630: LD_INT 2
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 1
50639: NEG
50640: PUSH
50641: LD_INT 1
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 2
50650: NEG
50651: PUSH
50652: LD_INT 0
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 2
50661: NEG
50662: PUSH
50663: LD_INT 1
50665: NEG
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 2
50673: NEG
50674: PUSH
50675: LD_INT 2
50677: NEG
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50704: LD_ADDR_VAR 0 22
50708: PUSH
50709: LD_INT 0
50711: PUSH
50712: LD_INT 0
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 0
50721: PUSH
50722: LD_INT 1
50724: NEG
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 1
50732: PUSH
50733: LD_INT 0
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 1
50742: PUSH
50743: LD_INT 1
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 0
50752: PUSH
50753: LD_INT 1
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 1
50762: NEG
50763: PUSH
50764: LD_INT 0
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 1
50773: NEG
50774: PUSH
50775: LD_INT 1
50777: NEG
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 1
50785: NEG
50786: PUSH
50787: LD_INT 2
50789: NEG
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 0
50797: PUSH
50798: LD_INT 2
50800: NEG
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 1
50808: PUSH
50809: LD_INT 1
50811: NEG
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 2
50819: PUSH
50820: LD_INT 0
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 2
50829: PUSH
50830: LD_INT 1
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 2
50839: PUSH
50840: LD_INT 2
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 1
50849: PUSH
50850: LD_INT 2
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 0
50859: PUSH
50860: LD_INT 2
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 1
50869: NEG
50870: PUSH
50871: LD_INT 1
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 2
50880: NEG
50881: PUSH
50882: LD_INT 0
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 2
50891: NEG
50892: PUSH
50893: LD_INT 1
50895: NEG
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 2
50903: NEG
50904: PUSH
50905: LD_INT 2
50907: NEG
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50934: LD_ADDR_VAR 0 23
50938: PUSH
50939: LD_INT 0
50941: PUSH
50942: LD_INT 0
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 0
50951: PUSH
50952: LD_INT 1
50954: NEG
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 1
50962: PUSH
50963: LD_INT 0
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 1
50972: PUSH
50973: LD_INT 1
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 0
50982: PUSH
50983: LD_INT 1
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 1
50992: NEG
50993: PUSH
50994: LD_INT 0
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 1
51003: NEG
51004: PUSH
51005: LD_INT 1
51007: NEG
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 1
51015: NEG
51016: PUSH
51017: LD_INT 2
51019: NEG
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 0
51027: PUSH
51028: LD_INT 2
51030: NEG
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 1
51038: PUSH
51039: LD_INT 1
51041: NEG
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 2
51049: PUSH
51050: LD_INT 0
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 2
51059: PUSH
51060: LD_INT 1
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 2
51069: PUSH
51070: LD_INT 2
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 1
51079: PUSH
51080: LD_INT 2
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 0
51089: PUSH
51090: LD_INT 2
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 1
51099: NEG
51100: PUSH
51101: LD_INT 1
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 2
51110: NEG
51111: PUSH
51112: LD_INT 0
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 2
51121: NEG
51122: PUSH
51123: LD_INT 1
51125: NEG
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 2
51133: NEG
51134: PUSH
51135: LD_INT 2
51137: NEG
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 2
51145: NEG
51146: PUSH
51147: LD_INT 3
51149: NEG
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 1
51157: NEG
51158: PUSH
51159: LD_INT 3
51161: NEG
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 1
51169: PUSH
51170: LD_INT 2
51172: NEG
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 2
51180: PUSH
51181: LD_INT 1
51183: NEG
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
51214: LD_ADDR_VAR 0 24
51218: PUSH
51219: LD_INT 0
51221: PUSH
51222: LD_INT 0
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 0
51231: PUSH
51232: LD_INT 1
51234: NEG
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 1
51242: PUSH
51243: LD_INT 0
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 1
51252: PUSH
51253: LD_INT 1
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 0
51262: PUSH
51263: LD_INT 1
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 1
51272: NEG
51273: PUSH
51274: LD_INT 0
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 1
51283: NEG
51284: PUSH
51285: LD_INT 1
51287: NEG
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 1
51295: NEG
51296: PUSH
51297: LD_INT 2
51299: NEG
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 0
51307: PUSH
51308: LD_INT 2
51310: NEG
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 1
51318: PUSH
51319: LD_INT 1
51321: NEG
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 2
51329: PUSH
51330: LD_INT 0
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 2
51339: PUSH
51340: LD_INT 1
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 2
51349: PUSH
51350: LD_INT 2
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 1
51359: PUSH
51360: LD_INT 2
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 0
51369: PUSH
51370: LD_INT 2
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 1
51379: NEG
51380: PUSH
51381: LD_INT 1
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 2
51390: NEG
51391: PUSH
51392: LD_INT 0
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 2
51401: NEG
51402: PUSH
51403: LD_INT 1
51405: NEG
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 2
51413: NEG
51414: PUSH
51415: LD_INT 2
51417: NEG
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 1
51425: PUSH
51426: LD_INT 2
51428: NEG
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 2
51436: PUSH
51437: LD_INT 1
51439: NEG
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 3
51447: PUSH
51448: LD_INT 1
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 3
51457: PUSH
51458: LD_INT 2
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
51490: LD_ADDR_VAR 0 25
51494: PUSH
51495: LD_INT 0
51497: PUSH
51498: LD_INT 0
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 0
51507: PUSH
51508: LD_INT 1
51510: NEG
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 1
51518: PUSH
51519: LD_INT 0
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 1
51528: PUSH
51529: LD_INT 1
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 0
51538: PUSH
51539: LD_INT 1
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 1
51548: NEG
51549: PUSH
51550: LD_INT 0
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 1
51559: NEG
51560: PUSH
51561: LD_INT 1
51563: NEG
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 1
51571: NEG
51572: PUSH
51573: LD_INT 2
51575: NEG
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 0
51583: PUSH
51584: LD_INT 2
51586: NEG
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 1
51594: PUSH
51595: LD_INT 1
51597: NEG
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 2
51605: PUSH
51606: LD_INT 0
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 2
51615: PUSH
51616: LD_INT 1
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 2
51625: PUSH
51626: LD_INT 2
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 1
51635: PUSH
51636: LD_INT 2
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 0
51645: PUSH
51646: LD_INT 2
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 1
51655: NEG
51656: PUSH
51657: LD_INT 1
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 2
51666: NEG
51667: PUSH
51668: LD_INT 0
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 2
51677: NEG
51678: PUSH
51679: LD_INT 1
51681: NEG
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 2
51689: NEG
51690: PUSH
51691: LD_INT 2
51693: NEG
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 3
51701: PUSH
51702: LD_INT 1
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 3
51711: PUSH
51712: LD_INT 2
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 2
51721: PUSH
51722: LD_INT 3
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 1
51731: PUSH
51732: LD_INT 3
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51764: LD_ADDR_VAR 0 26
51768: PUSH
51769: LD_INT 0
51771: PUSH
51772: LD_INT 0
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 0
51781: PUSH
51782: LD_INT 1
51784: NEG
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 1
51792: PUSH
51793: LD_INT 0
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 1
51802: PUSH
51803: LD_INT 1
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 0
51812: PUSH
51813: LD_INT 1
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 1
51822: NEG
51823: PUSH
51824: LD_INT 0
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 1
51833: NEG
51834: PUSH
51835: LD_INT 1
51837: NEG
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 1
51845: NEG
51846: PUSH
51847: LD_INT 2
51849: NEG
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: LD_INT 2
51860: NEG
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 1
51868: PUSH
51869: LD_INT 1
51871: NEG
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 2
51879: PUSH
51880: LD_INT 0
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 2
51889: PUSH
51890: LD_INT 1
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 2
51899: PUSH
51900: LD_INT 2
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 1
51909: PUSH
51910: LD_INT 2
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 0
51919: PUSH
51920: LD_INT 2
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 1
51929: NEG
51930: PUSH
51931: LD_INT 1
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 2
51940: NEG
51941: PUSH
51942: LD_INT 0
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 2
51951: NEG
51952: PUSH
51953: LD_INT 1
51955: NEG
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 2
51963: NEG
51964: PUSH
51965: LD_INT 2
51967: NEG
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 2
51975: PUSH
51976: LD_INT 3
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 1
51985: PUSH
51986: LD_INT 3
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 1
51995: NEG
51996: PUSH
51997: LD_INT 2
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 2
52006: NEG
52007: PUSH
52008: LD_INT 1
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52040: LD_ADDR_VAR 0 27
52044: PUSH
52045: LD_INT 0
52047: PUSH
52048: LD_INT 0
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 0
52057: PUSH
52058: LD_INT 1
52060: NEG
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 1
52068: PUSH
52069: LD_INT 0
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 1
52078: PUSH
52079: LD_INT 1
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 0
52088: PUSH
52089: LD_INT 1
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 1
52098: NEG
52099: PUSH
52100: LD_INT 0
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 1
52109: NEG
52110: PUSH
52111: LD_INT 1
52113: NEG
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 1
52121: NEG
52122: PUSH
52123: LD_INT 2
52125: NEG
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 0
52133: PUSH
52134: LD_INT 2
52136: NEG
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 1
52144: PUSH
52145: LD_INT 1
52147: NEG
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 2
52155: PUSH
52156: LD_INT 0
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 2
52165: PUSH
52166: LD_INT 1
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 2
52175: PUSH
52176: LD_INT 2
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 1
52185: PUSH
52186: LD_INT 2
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 0
52195: PUSH
52196: LD_INT 2
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 1
52205: NEG
52206: PUSH
52207: LD_INT 1
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 2
52216: NEG
52217: PUSH
52218: LD_INT 0
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 2
52227: NEG
52228: PUSH
52229: LD_INT 1
52231: NEG
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 2
52239: NEG
52240: PUSH
52241: LD_INT 2
52243: NEG
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 1
52251: NEG
52252: PUSH
52253: LD_INT 2
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 2
52262: NEG
52263: PUSH
52264: LD_INT 1
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 3
52273: NEG
52274: PUSH
52275: LD_INT 1
52277: NEG
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 3
52285: NEG
52286: PUSH
52287: LD_INT 2
52289: NEG
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52320: LD_ADDR_VAR 0 28
52324: PUSH
52325: LD_INT 0
52327: PUSH
52328: LD_INT 0
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 0
52337: PUSH
52338: LD_INT 1
52340: NEG
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 1
52348: PUSH
52349: LD_INT 0
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 1
52358: PUSH
52359: LD_INT 1
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 0
52368: PUSH
52369: LD_INT 1
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 1
52378: NEG
52379: PUSH
52380: LD_INT 0
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 1
52389: NEG
52390: PUSH
52391: LD_INT 1
52393: NEG
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 1
52401: NEG
52402: PUSH
52403: LD_INT 2
52405: NEG
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 0
52413: PUSH
52414: LD_INT 2
52416: NEG
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 1
52424: PUSH
52425: LD_INT 1
52427: NEG
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 2
52435: PUSH
52436: LD_INT 0
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 2
52445: PUSH
52446: LD_INT 1
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 2
52455: PUSH
52456: LD_INT 2
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 1
52465: PUSH
52466: LD_INT 2
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 0
52475: PUSH
52476: LD_INT 2
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 1
52485: NEG
52486: PUSH
52487: LD_INT 1
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 2
52496: NEG
52497: PUSH
52498: LD_INT 0
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 2
52507: NEG
52508: PUSH
52509: LD_INT 1
52511: NEG
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 2
52519: NEG
52520: PUSH
52521: LD_INT 2
52523: NEG
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 2
52531: NEG
52532: PUSH
52533: LD_INT 3
52535: NEG
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 1
52543: NEG
52544: PUSH
52545: LD_INT 3
52547: NEG
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 3
52555: NEG
52556: PUSH
52557: LD_INT 1
52559: NEG
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 3
52567: NEG
52568: PUSH
52569: LD_INT 2
52571: NEG
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52602: LD_ADDR_VAR 0 29
52606: PUSH
52607: LD_INT 0
52609: PUSH
52610: LD_INT 0
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 0
52619: PUSH
52620: LD_INT 1
52622: NEG
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 1
52630: PUSH
52631: LD_INT 0
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 1
52640: PUSH
52641: LD_INT 1
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 0
52650: PUSH
52651: LD_INT 1
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 1
52660: NEG
52661: PUSH
52662: LD_INT 0
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 1
52671: NEG
52672: PUSH
52673: LD_INT 1
52675: NEG
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 1
52683: NEG
52684: PUSH
52685: LD_INT 2
52687: NEG
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 0
52695: PUSH
52696: LD_INT 2
52698: NEG
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 1
52706: PUSH
52707: LD_INT 1
52709: NEG
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 2
52717: PUSH
52718: LD_INT 0
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 2
52727: PUSH
52728: LD_INT 1
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 1
52737: PUSH
52738: LD_INT 2
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 0
52747: PUSH
52748: LD_INT 2
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 1
52757: NEG
52758: PUSH
52759: LD_INT 1
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 2
52768: NEG
52769: PUSH
52770: LD_INT 1
52772: NEG
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 2
52780: NEG
52781: PUSH
52782: LD_INT 2
52784: NEG
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 2
52792: NEG
52793: PUSH
52794: LD_INT 3
52796: NEG
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 2
52804: PUSH
52805: LD_INT 1
52807: NEG
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 3
52815: PUSH
52816: LD_INT 1
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 1
52825: PUSH
52826: LD_INT 3
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 1
52835: NEG
52836: PUSH
52837: LD_INT 2
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 3
52846: NEG
52847: PUSH
52848: LD_INT 2
52850: NEG
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52881: LD_ADDR_VAR 0 30
52885: PUSH
52886: LD_INT 0
52888: PUSH
52889: LD_INT 0
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 0
52898: PUSH
52899: LD_INT 1
52901: NEG
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 1
52909: PUSH
52910: LD_INT 0
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 1
52919: PUSH
52920: LD_INT 1
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 0
52929: PUSH
52930: LD_INT 1
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 1
52939: NEG
52940: PUSH
52941: LD_INT 0
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 1
52950: NEG
52951: PUSH
52952: LD_INT 1
52954: NEG
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 1
52962: NEG
52963: PUSH
52964: LD_INT 2
52966: NEG
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 0
52974: PUSH
52975: LD_INT 2
52977: NEG
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 1
52985: PUSH
52986: LD_INT 1
52988: NEG
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 2
52996: PUSH
52997: LD_INT 0
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 2
53006: PUSH
53007: LD_INT 1
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 2
53016: PUSH
53017: LD_INT 2
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 1
53026: PUSH
53027: LD_INT 2
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 1
53036: NEG
53037: PUSH
53038: LD_INT 1
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 2
53047: NEG
53048: PUSH
53049: LD_INT 0
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 2
53058: NEG
53059: PUSH
53060: LD_INT 1
53062: NEG
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 1
53070: NEG
53071: PUSH
53072: LD_INT 3
53074: NEG
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 1
53082: PUSH
53083: LD_INT 2
53085: NEG
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 3
53093: PUSH
53094: LD_INT 2
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 2
53103: PUSH
53104: LD_INT 3
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 2
53113: NEG
53114: PUSH
53115: LD_INT 1
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 3
53124: NEG
53125: PUSH
53126: LD_INT 1
53128: NEG
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53159: LD_ADDR_VAR 0 31
53163: PUSH
53164: LD_INT 0
53166: PUSH
53167: LD_INT 0
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 0
53176: PUSH
53177: LD_INT 1
53179: NEG
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 1
53187: PUSH
53188: LD_INT 0
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 1
53197: PUSH
53198: LD_INT 1
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 0
53207: PUSH
53208: LD_INT 1
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 1
53217: NEG
53218: PUSH
53219: LD_INT 0
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 1
53228: NEG
53229: PUSH
53230: LD_INT 1
53232: NEG
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 1
53240: NEG
53241: PUSH
53242: LD_INT 2
53244: NEG
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 1
53252: PUSH
53253: LD_INT 1
53255: NEG
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 2
53263: PUSH
53264: LD_INT 0
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 2
53273: PUSH
53274: LD_INT 1
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 2
53283: PUSH
53284: LD_INT 2
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 1
53293: PUSH
53294: LD_INT 2
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 0
53303: PUSH
53304: LD_INT 2
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 1
53313: NEG
53314: PUSH
53315: LD_INT 1
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 2
53324: NEG
53325: PUSH
53326: LD_INT 1
53328: NEG
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 2
53336: NEG
53337: PUSH
53338: LD_INT 2
53340: NEG
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 2
53348: NEG
53349: PUSH
53350: LD_INT 3
53352: NEG
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 2
53360: PUSH
53361: LD_INT 1
53363: NEG
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 3
53371: PUSH
53372: LD_INT 1
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 1
53381: PUSH
53382: LD_INT 3
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 1
53391: NEG
53392: PUSH
53393: LD_INT 2
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 3
53402: NEG
53403: PUSH
53404: LD_INT 2
53406: NEG
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53437: LD_ADDR_VAR 0 32
53441: PUSH
53442: LD_INT 0
53444: PUSH
53445: LD_INT 0
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 0
53454: PUSH
53455: LD_INT 1
53457: NEG
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 1
53465: PUSH
53466: LD_INT 0
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 1
53475: PUSH
53476: LD_INT 1
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 0
53485: PUSH
53486: LD_INT 1
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 1
53495: NEG
53496: PUSH
53497: LD_INT 0
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 1
53506: NEG
53507: PUSH
53508: LD_INT 1
53510: NEG
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 1
53518: NEG
53519: PUSH
53520: LD_INT 2
53522: NEG
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 0
53530: PUSH
53531: LD_INT 2
53533: NEG
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 1
53541: PUSH
53542: LD_INT 1
53544: NEG
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 2
53552: PUSH
53553: LD_INT 1
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 2
53562: PUSH
53563: LD_INT 2
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 1
53572: PUSH
53573: LD_INT 2
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 0
53582: PUSH
53583: LD_INT 2
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 1
53592: NEG
53593: PUSH
53594: LD_INT 1
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 2
53603: NEG
53604: PUSH
53605: LD_INT 0
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 2
53614: NEG
53615: PUSH
53616: LD_INT 1
53618: NEG
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 1
53626: NEG
53627: PUSH
53628: LD_INT 3
53630: NEG
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 1
53638: PUSH
53639: LD_INT 2
53641: NEG
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 3
53649: PUSH
53650: LD_INT 2
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 2
53659: PUSH
53660: LD_INT 3
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 2
53669: NEG
53670: PUSH
53671: LD_INT 1
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 3
53680: NEG
53681: PUSH
53682: LD_INT 1
53684: NEG
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53715: LD_ADDR_VAR 0 33
53719: PUSH
53720: LD_INT 0
53722: PUSH
53723: LD_INT 0
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 0
53732: PUSH
53733: LD_INT 1
53735: NEG
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 1
53743: PUSH
53744: LD_INT 0
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 1
53753: PUSH
53754: LD_INT 1
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 0
53763: PUSH
53764: LD_INT 1
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 1
53773: NEG
53774: PUSH
53775: LD_INT 0
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 1
53784: NEG
53785: PUSH
53786: LD_INT 1
53788: NEG
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 1
53796: NEG
53797: PUSH
53798: LD_INT 2
53800: NEG
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 1
53808: PUSH
53809: LD_INT 1
53811: NEG
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 2
53819: PUSH
53820: LD_INT 0
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 2
53829: PUSH
53830: LD_INT 1
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 1
53839: PUSH
53840: LD_INT 2
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 0
53849: PUSH
53850: LD_INT 2
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 1
53859: NEG
53860: PUSH
53861: LD_INT 1
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 2
53870: NEG
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 2
53881: NEG
53882: PUSH
53883: LD_INT 1
53885: NEG
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 2
53893: NEG
53894: PUSH
53895: LD_INT 2
53897: NEG
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 2
53905: NEG
53906: PUSH
53907: LD_INT 3
53909: NEG
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 2
53917: PUSH
53918: LD_INT 1
53920: NEG
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 3
53928: PUSH
53929: LD_INT 1
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 1
53938: PUSH
53939: LD_INT 3
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 1
53948: NEG
53949: PUSH
53950: LD_INT 2
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 3
53959: NEG
53960: PUSH
53961: LD_INT 2
53963: NEG
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53994: LD_ADDR_VAR 0 34
53998: PUSH
53999: LD_INT 0
54001: PUSH
54002: LD_INT 0
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 0
54011: PUSH
54012: LD_INT 1
54014: NEG
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 1
54022: PUSH
54023: LD_INT 0
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 1
54032: PUSH
54033: LD_INT 1
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 0
54042: PUSH
54043: LD_INT 1
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 1
54052: NEG
54053: PUSH
54054: LD_INT 0
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 1
54063: NEG
54064: PUSH
54065: LD_INT 1
54067: NEG
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 1
54075: NEG
54076: PUSH
54077: LD_INT 2
54079: NEG
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 0
54087: PUSH
54088: LD_INT 2
54090: NEG
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 1
54098: PUSH
54099: LD_INT 1
54101: NEG
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 2
54109: PUSH
54110: LD_INT 1
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 2
54119: PUSH
54120: LD_INT 2
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 1
54129: PUSH
54130: LD_INT 2
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 1
54139: NEG
54140: PUSH
54141: LD_INT 1
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 2
54150: NEG
54151: PUSH
54152: LD_INT 0
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 2
54161: NEG
54162: PUSH
54163: LD_INT 1
54165: NEG
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 2
54173: NEG
54174: PUSH
54175: LD_INT 2
54177: NEG
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 1
54185: NEG
54186: PUSH
54187: LD_INT 3
54189: NEG
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 1
54197: PUSH
54198: LD_INT 2
54200: NEG
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 3
54208: PUSH
54209: LD_INT 2
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 2
54218: PUSH
54219: LD_INT 3
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 2
54228: NEG
54229: PUSH
54230: LD_INT 1
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 3
54239: NEG
54240: PUSH
54241: LD_INT 1
54243: NEG
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54274: LD_ADDR_VAR 0 35
54278: PUSH
54279: LD_INT 0
54281: PUSH
54282: LD_INT 0
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 0
54291: PUSH
54292: LD_INT 1
54294: NEG
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 1
54302: PUSH
54303: LD_INT 0
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 1
54312: PUSH
54313: LD_INT 1
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 0
54322: PUSH
54323: LD_INT 1
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 1
54332: NEG
54333: PUSH
54334: LD_INT 0
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 1
54343: NEG
54344: PUSH
54345: LD_INT 1
54347: NEG
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 2
54355: PUSH
54356: LD_INT 1
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 2
54365: NEG
54366: PUSH
54367: LD_INT 1
54369: NEG
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54386: LD_ADDR_VAR 0 36
54390: PUSH
54391: LD_INT 0
54393: PUSH
54394: LD_INT 0
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 0
54403: PUSH
54404: LD_INT 1
54406: NEG
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 1
54414: PUSH
54415: LD_INT 0
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 1
54424: PUSH
54425: LD_INT 1
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 0
54434: PUSH
54435: LD_INT 1
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 1
54444: NEG
54445: PUSH
54446: LD_INT 0
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 1
54455: NEG
54456: PUSH
54457: LD_INT 1
54459: NEG
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 1
54467: NEG
54468: PUSH
54469: LD_INT 2
54471: NEG
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 1
54479: PUSH
54480: LD_INT 2
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54498: LD_ADDR_VAR 0 37
54502: PUSH
54503: LD_INT 0
54505: PUSH
54506: LD_INT 0
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 0
54515: PUSH
54516: LD_INT 1
54518: NEG
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 1
54526: PUSH
54527: LD_INT 0
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 1
54536: PUSH
54537: LD_INT 1
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 0
54546: PUSH
54547: LD_INT 1
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 1
54556: NEG
54557: PUSH
54558: LD_INT 0
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 1
54567: NEG
54568: PUSH
54569: LD_INT 1
54571: NEG
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 1
54579: PUSH
54580: LD_INT 1
54582: NEG
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 1
54590: NEG
54591: PUSH
54592: LD_INT 1
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54610: LD_ADDR_VAR 0 38
54614: PUSH
54615: LD_INT 0
54617: PUSH
54618: LD_INT 0
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 0
54627: PUSH
54628: LD_INT 1
54630: NEG
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 1
54638: PUSH
54639: LD_INT 0
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 1
54648: PUSH
54649: LD_INT 1
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 0
54658: PUSH
54659: LD_INT 1
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 1
54668: NEG
54669: PUSH
54670: LD_INT 0
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 1
54679: NEG
54680: PUSH
54681: LD_INT 1
54683: NEG
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 2
54691: PUSH
54692: LD_INT 1
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 2
54701: NEG
54702: PUSH
54703: LD_INT 1
54705: NEG
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54722: LD_ADDR_VAR 0 39
54726: PUSH
54727: LD_INT 0
54729: PUSH
54730: LD_INT 0
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 0
54739: PUSH
54740: LD_INT 1
54742: NEG
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 1
54750: PUSH
54751: LD_INT 0
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 1
54760: PUSH
54761: LD_INT 1
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 0
54770: PUSH
54771: LD_INT 1
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 1
54780: NEG
54781: PUSH
54782: LD_INT 0
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 1
54791: NEG
54792: PUSH
54793: LD_INT 1
54795: NEG
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 1
54803: NEG
54804: PUSH
54805: LD_INT 2
54807: NEG
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 1
54815: PUSH
54816: LD_INT 2
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54834: LD_ADDR_VAR 0 40
54838: PUSH
54839: LD_INT 0
54841: PUSH
54842: LD_INT 0
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 0
54851: PUSH
54852: LD_INT 1
54854: NEG
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 1
54862: PUSH
54863: LD_INT 0
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 1
54872: PUSH
54873: LD_INT 1
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 0
54882: PUSH
54883: LD_INT 1
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 1
54892: NEG
54893: PUSH
54894: LD_INT 0
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 1
54903: NEG
54904: PUSH
54905: LD_INT 1
54907: NEG
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 1
54915: PUSH
54916: LD_INT 1
54918: NEG
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 1
54926: NEG
54927: PUSH
54928: LD_INT 1
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54946: LD_ADDR_VAR 0 41
54950: PUSH
54951: LD_INT 0
54953: PUSH
54954: LD_INT 0
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 0
54963: PUSH
54964: LD_INT 1
54966: NEG
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 1
54974: PUSH
54975: LD_INT 0
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 1
54984: PUSH
54985: LD_INT 1
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 0
54994: PUSH
54995: LD_INT 1
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 1
55004: NEG
55005: PUSH
55006: LD_INT 0
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 1
55015: NEG
55016: PUSH
55017: LD_INT 1
55019: NEG
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 1
55027: NEG
55028: PUSH
55029: LD_INT 2
55031: NEG
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 1
55039: PUSH
55040: LD_INT 1
55042: NEG
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 2
55050: PUSH
55051: LD_INT 0
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 2
55060: PUSH
55061: LD_INT 1
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 2
55070: PUSH
55071: LD_INT 2
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 1
55080: PUSH
55081: LD_INT 2
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 1
55090: NEG
55091: PUSH
55092: LD_INT 1
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 2
55101: NEG
55102: PUSH
55103: LD_INT 0
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 2
55112: NEG
55113: PUSH
55114: LD_INT 1
55116: NEG
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 2
55124: NEG
55125: PUSH
55126: LD_INT 2
55128: NEG
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 2
55136: NEG
55137: PUSH
55138: LD_INT 3
55140: NEG
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 2
55148: PUSH
55149: LD_INT 1
55151: NEG
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 3
55159: PUSH
55160: LD_INT 0
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 3
55169: PUSH
55170: LD_INT 1
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 3
55179: PUSH
55180: LD_INT 2
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 3
55189: PUSH
55190: LD_INT 3
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 2
55199: PUSH
55200: LD_INT 3
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 2
55209: NEG
55210: PUSH
55211: LD_INT 1
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 3
55220: NEG
55221: PUSH
55222: LD_INT 0
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 3
55231: NEG
55232: PUSH
55233: LD_INT 1
55235: NEG
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 3
55243: NEG
55244: PUSH
55245: LD_INT 2
55247: NEG
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 3
55255: NEG
55256: PUSH
55257: LD_INT 3
55259: NEG
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55296: LD_ADDR_VAR 0 42
55300: PUSH
55301: LD_INT 0
55303: PUSH
55304: LD_INT 0
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 0
55313: PUSH
55314: LD_INT 1
55316: NEG
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 1
55324: PUSH
55325: LD_INT 0
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 1
55334: PUSH
55335: LD_INT 1
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 0
55344: PUSH
55345: LD_INT 1
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 1
55354: NEG
55355: PUSH
55356: LD_INT 0
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 1
55365: NEG
55366: PUSH
55367: LD_INT 1
55369: NEG
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 1
55377: NEG
55378: PUSH
55379: LD_INT 2
55381: NEG
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 0
55389: PUSH
55390: LD_INT 2
55392: NEG
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 1
55400: PUSH
55401: LD_INT 1
55403: NEG
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 2
55411: PUSH
55412: LD_INT 1
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 2
55421: PUSH
55422: LD_INT 2
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 1
55431: PUSH
55432: LD_INT 2
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 0
55441: PUSH
55442: LD_INT 2
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 1
55451: NEG
55452: PUSH
55453: LD_INT 1
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 2
55462: NEG
55463: PUSH
55464: LD_INT 1
55466: NEG
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 2
55474: NEG
55475: PUSH
55476: LD_INT 2
55478: NEG
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 2
55486: NEG
55487: PUSH
55488: LD_INT 3
55490: NEG
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 1
55498: NEG
55499: PUSH
55500: LD_INT 3
55502: NEG
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 0
55510: PUSH
55511: LD_INT 3
55513: NEG
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 1
55521: PUSH
55522: LD_INT 2
55524: NEG
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 3
55532: PUSH
55533: LD_INT 2
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 3
55542: PUSH
55543: LD_INT 3
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 2
55552: PUSH
55553: LD_INT 3
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 1
55562: PUSH
55563: LD_INT 3
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 0
55572: PUSH
55573: LD_INT 3
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 1
55582: NEG
55583: PUSH
55584: LD_INT 2
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 3
55593: NEG
55594: PUSH
55595: LD_INT 2
55597: NEG
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 3
55605: NEG
55606: PUSH
55607: LD_INT 3
55609: NEG
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55646: LD_ADDR_VAR 0 43
55650: PUSH
55651: LD_INT 0
55653: PUSH
55654: LD_INT 0
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 0
55663: PUSH
55664: LD_INT 1
55666: NEG
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 1
55674: PUSH
55675: LD_INT 0
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 1
55684: PUSH
55685: LD_INT 1
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 0
55694: PUSH
55695: LD_INT 1
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 1
55704: NEG
55705: PUSH
55706: LD_INT 0
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 1
55715: NEG
55716: PUSH
55717: LD_INT 1
55719: NEG
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 1
55727: NEG
55728: PUSH
55729: LD_INT 2
55731: NEG
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 0
55739: PUSH
55740: LD_INT 2
55742: NEG
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 1
55750: PUSH
55751: LD_INT 1
55753: NEG
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 2
55761: PUSH
55762: LD_INT 0
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 2
55771: PUSH
55772: LD_INT 1
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 1
55781: PUSH
55782: LD_INT 2
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 0
55791: PUSH
55792: LD_INT 2
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 1
55801: NEG
55802: PUSH
55803: LD_INT 1
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 2
55812: NEG
55813: PUSH
55814: LD_INT 0
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 2
55823: NEG
55824: PUSH
55825: LD_INT 1
55827: NEG
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 1
55835: NEG
55836: PUSH
55837: LD_INT 3
55839: NEG
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 0
55847: PUSH
55848: LD_INT 3
55850: NEG
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 1
55858: PUSH
55859: LD_INT 2
55861: NEG
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 2
55869: PUSH
55870: LD_INT 1
55872: NEG
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 3
55880: PUSH
55881: LD_INT 0
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 3
55890: PUSH
55891: LD_INT 1
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 1
55900: PUSH
55901: LD_INT 3
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 0
55910: PUSH
55911: LD_INT 3
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 1
55920: NEG
55921: PUSH
55922: LD_INT 2
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 2
55931: NEG
55932: PUSH
55933: LD_INT 1
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 3
55942: NEG
55943: PUSH
55944: LD_INT 0
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 3
55953: NEG
55954: PUSH
55955: LD_INT 1
55957: NEG
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55994: LD_ADDR_VAR 0 44
55998: PUSH
55999: LD_INT 0
56001: PUSH
56002: LD_INT 0
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 0
56011: PUSH
56012: LD_INT 1
56014: NEG
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 1
56022: PUSH
56023: LD_INT 0
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 1
56032: PUSH
56033: LD_INT 1
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 0
56042: PUSH
56043: LD_INT 1
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 1
56052: NEG
56053: PUSH
56054: LD_INT 0
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 1
56063: NEG
56064: PUSH
56065: LD_INT 1
56067: NEG
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 1
56075: NEG
56076: PUSH
56077: LD_INT 2
56079: NEG
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 1
56087: PUSH
56088: LD_INT 1
56090: NEG
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 2
56098: PUSH
56099: LD_INT 0
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 2
56108: PUSH
56109: LD_INT 1
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 2
56118: PUSH
56119: LD_INT 2
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 1
56128: PUSH
56129: LD_INT 2
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 1
56138: NEG
56139: PUSH
56140: LD_INT 1
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 2
56149: NEG
56150: PUSH
56151: LD_INT 0
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 2
56160: NEG
56161: PUSH
56162: LD_INT 1
56164: NEG
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 2
56172: NEG
56173: PUSH
56174: LD_INT 2
56176: NEG
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 2
56184: NEG
56185: PUSH
56186: LD_INT 3
56188: NEG
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 2
56196: PUSH
56197: LD_INT 1
56199: NEG
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 3
56207: PUSH
56208: LD_INT 0
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 3
56217: PUSH
56218: LD_INT 1
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 3
56227: PUSH
56228: LD_INT 2
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 3
56237: PUSH
56238: LD_INT 3
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 2
56247: PUSH
56248: LD_INT 3
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 2
56257: NEG
56258: PUSH
56259: LD_INT 1
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 3
56268: NEG
56269: PUSH
56270: LD_INT 0
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 3
56279: NEG
56280: PUSH
56281: LD_INT 1
56283: NEG
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 3
56291: NEG
56292: PUSH
56293: LD_INT 2
56295: NEG
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 3
56303: NEG
56304: PUSH
56305: LD_INT 3
56307: NEG
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56344: LD_ADDR_VAR 0 45
56348: PUSH
56349: LD_INT 0
56351: PUSH
56352: LD_INT 0
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 0
56361: PUSH
56362: LD_INT 1
56364: NEG
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 1
56372: PUSH
56373: LD_INT 0
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 1
56382: PUSH
56383: LD_INT 1
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 0
56392: PUSH
56393: LD_INT 1
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 1
56402: NEG
56403: PUSH
56404: LD_INT 0
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 1
56413: NEG
56414: PUSH
56415: LD_INT 1
56417: NEG
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 1
56425: NEG
56426: PUSH
56427: LD_INT 2
56429: NEG
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 0
56437: PUSH
56438: LD_INT 2
56440: NEG
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 1
56448: PUSH
56449: LD_INT 1
56451: NEG
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 2
56459: PUSH
56460: LD_INT 1
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 2
56469: PUSH
56470: LD_INT 2
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 1
56479: PUSH
56480: LD_INT 2
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 0
56489: PUSH
56490: LD_INT 2
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 1
56499: NEG
56500: PUSH
56501: LD_INT 1
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 2
56510: NEG
56511: PUSH
56512: LD_INT 1
56514: NEG
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 2
56522: NEG
56523: PUSH
56524: LD_INT 2
56526: NEG
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 2
56534: NEG
56535: PUSH
56536: LD_INT 3
56538: NEG
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 1
56546: NEG
56547: PUSH
56548: LD_INT 3
56550: NEG
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 0
56558: PUSH
56559: LD_INT 3
56561: NEG
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 1
56569: PUSH
56570: LD_INT 2
56572: NEG
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 3
56580: PUSH
56581: LD_INT 2
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 3
56590: PUSH
56591: LD_INT 3
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 2
56600: PUSH
56601: LD_INT 3
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 1
56610: PUSH
56611: LD_INT 3
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 0
56620: PUSH
56621: LD_INT 3
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 1
56630: NEG
56631: PUSH
56632: LD_INT 2
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 3
56641: NEG
56642: PUSH
56643: LD_INT 2
56645: NEG
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 3
56653: NEG
56654: PUSH
56655: LD_INT 3
56657: NEG
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56694: LD_ADDR_VAR 0 46
56698: PUSH
56699: LD_INT 0
56701: PUSH
56702: LD_INT 0
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 0
56711: PUSH
56712: LD_INT 1
56714: NEG
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 1
56722: PUSH
56723: LD_INT 0
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 1
56732: PUSH
56733: LD_INT 1
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 0
56742: PUSH
56743: LD_INT 1
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 1
56752: NEG
56753: PUSH
56754: LD_INT 0
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 1
56763: NEG
56764: PUSH
56765: LD_INT 1
56767: NEG
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 1
56775: NEG
56776: PUSH
56777: LD_INT 2
56779: NEG
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 0
56787: PUSH
56788: LD_INT 2
56790: NEG
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 1
56798: PUSH
56799: LD_INT 1
56801: NEG
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 2
56809: PUSH
56810: LD_INT 0
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 2
56819: PUSH
56820: LD_INT 1
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 1
56829: PUSH
56830: LD_INT 2
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 0
56839: PUSH
56840: LD_INT 2
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 1
56849: NEG
56850: PUSH
56851: LD_INT 1
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 2
56860: NEG
56861: PUSH
56862: LD_INT 0
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 2
56871: NEG
56872: PUSH
56873: LD_INT 1
56875: NEG
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 1
56883: NEG
56884: PUSH
56885: LD_INT 3
56887: NEG
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 0
56895: PUSH
56896: LD_INT 3
56898: NEG
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 1
56906: PUSH
56907: LD_INT 2
56909: NEG
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 2
56917: PUSH
56918: LD_INT 1
56920: NEG
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 3
56928: PUSH
56929: LD_INT 0
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 3
56938: PUSH
56939: LD_INT 1
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 1
56948: PUSH
56949: LD_INT 3
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 0
56958: PUSH
56959: LD_INT 3
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 1
56968: NEG
56969: PUSH
56970: LD_INT 2
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 2
56979: NEG
56980: PUSH
56981: LD_INT 1
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 3
56990: NEG
56991: PUSH
56992: LD_INT 0
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 3
57001: NEG
57002: PUSH
57003: LD_INT 1
57005: NEG
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: LIST
57027: LIST
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57042: LD_ADDR_VAR 0 47
57046: PUSH
57047: LD_INT 0
57049: PUSH
57050: LD_INT 0
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 0
57059: PUSH
57060: LD_INT 1
57062: NEG
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 1
57070: PUSH
57071: LD_INT 0
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 1
57080: PUSH
57081: LD_INT 1
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 0
57090: PUSH
57091: LD_INT 1
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 1
57100: NEG
57101: PUSH
57102: LD_INT 0
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 1
57111: NEG
57112: PUSH
57113: LD_INT 1
57115: NEG
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 1
57123: NEG
57124: PUSH
57125: LD_INT 2
57127: NEG
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 0
57135: PUSH
57136: LD_INT 2
57138: NEG
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 1
57146: PUSH
57147: LD_INT 1
57149: NEG
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 2
57157: NEG
57158: PUSH
57159: LD_INT 1
57161: NEG
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 2
57169: NEG
57170: PUSH
57171: LD_INT 2
57173: NEG
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57193: LD_ADDR_VAR 0 48
57197: PUSH
57198: LD_INT 0
57200: PUSH
57201: LD_INT 0
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 0
57210: PUSH
57211: LD_INT 1
57213: NEG
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 1
57221: PUSH
57222: LD_INT 0
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 1
57231: PUSH
57232: LD_INT 1
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 0
57241: PUSH
57242: LD_INT 1
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 1
57251: NEG
57252: PUSH
57253: LD_INT 0
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 1
57262: NEG
57263: PUSH
57264: LD_INT 1
57266: NEG
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 1
57274: NEG
57275: PUSH
57276: LD_INT 2
57278: NEG
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 0
57286: PUSH
57287: LD_INT 2
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 1
57297: PUSH
57298: LD_INT 1
57300: NEG
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 2
57308: PUSH
57309: LD_INT 0
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 2
57318: PUSH
57319: LD_INT 1
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57340: LD_ADDR_VAR 0 49
57344: PUSH
57345: LD_INT 0
57347: PUSH
57348: LD_INT 0
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 0
57357: PUSH
57358: LD_INT 1
57360: NEG
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 1
57368: PUSH
57369: LD_INT 0
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 1
57378: PUSH
57379: LD_INT 1
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 0
57388: PUSH
57389: LD_INT 1
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 1
57398: NEG
57399: PUSH
57400: LD_INT 0
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 1
57409: NEG
57410: PUSH
57411: LD_INT 1
57413: NEG
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 1
57421: PUSH
57422: LD_INT 1
57424: NEG
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 2
57432: PUSH
57433: LD_INT 0
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 2
57442: PUSH
57443: LD_INT 1
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 2
57452: PUSH
57453: LD_INT 2
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 1
57462: PUSH
57463: LD_INT 2
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57484: LD_ADDR_VAR 0 50
57488: PUSH
57489: LD_INT 0
57491: PUSH
57492: LD_INT 0
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 0
57501: PUSH
57502: LD_INT 1
57504: NEG
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 1
57512: PUSH
57513: LD_INT 0
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 1
57522: PUSH
57523: LD_INT 1
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 0
57532: PUSH
57533: LD_INT 1
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 1
57542: NEG
57543: PUSH
57544: LD_INT 0
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 1
57553: NEG
57554: PUSH
57555: LD_INT 1
57557: NEG
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 2
57565: PUSH
57566: LD_INT 1
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 2
57575: PUSH
57576: LD_INT 2
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 1
57585: PUSH
57586: LD_INT 2
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 0
57595: PUSH
57596: LD_INT 2
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 1
57605: NEG
57606: PUSH
57607: LD_INT 1
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57628: LD_ADDR_VAR 0 51
57632: PUSH
57633: LD_INT 0
57635: PUSH
57636: LD_INT 0
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 0
57645: PUSH
57646: LD_INT 1
57648: NEG
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 1
57656: PUSH
57657: LD_INT 0
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 1
57666: PUSH
57667: LD_INT 1
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 0
57676: PUSH
57677: LD_INT 1
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 1
57686: NEG
57687: PUSH
57688: LD_INT 0
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 1
57697: NEG
57698: PUSH
57699: LD_INT 1
57701: NEG
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 1
57709: PUSH
57710: LD_INT 2
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 0
57719: PUSH
57720: LD_INT 2
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 1
57729: NEG
57730: PUSH
57731: LD_INT 1
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 2
57740: NEG
57741: PUSH
57742: LD_INT 0
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 2
57751: NEG
57752: PUSH
57753: LD_INT 1
57755: NEG
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: LIST
57773: LIST
57774: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57775: LD_ADDR_VAR 0 52
57779: PUSH
57780: LD_INT 0
57782: PUSH
57783: LD_INT 0
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 0
57792: PUSH
57793: LD_INT 1
57795: NEG
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 1
57803: PUSH
57804: LD_INT 0
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 1
57813: PUSH
57814: LD_INT 1
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 0
57823: PUSH
57824: LD_INT 1
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 1
57833: NEG
57834: PUSH
57835: LD_INT 0
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 1
57844: NEG
57845: PUSH
57846: LD_INT 1
57848: NEG
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 1
57856: NEG
57857: PUSH
57858: LD_INT 2
57860: NEG
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 1
57868: NEG
57869: PUSH
57870: LD_INT 1
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 2
57879: NEG
57880: PUSH
57881: LD_INT 0
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 2
57890: NEG
57891: PUSH
57892: LD_INT 1
57894: NEG
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 2
57902: NEG
57903: PUSH
57904: LD_INT 2
57906: NEG
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57926: LD_ADDR_VAR 0 53
57930: PUSH
57931: LD_INT 0
57933: PUSH
57934: LD_INT 0
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 0
57943: PUSH
57944: LD_INT 1
57946: NEG
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 1
57954: PUSH
57955: LD_INT 0
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 1
57964: PUSH
57965: LD_INT 1
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 0
57974: PUSH
57975: LD_INT 1
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 1
57984: NEG
57985: PUSH
57986: LD_INT 0
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 1
57995: NEG
57996: PUSH
57997: LD_INT 1
57999: NEG
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 1
58007: NEG
58008: PUSH
58009: LD_INT 2
58011: NEG
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 0
58019: PUSH
58020: LD_INT 2
58022: NEG
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 1
58030: PUSH
58031: LD_INT 1
58033: NEG
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 2
58041: PUSH
58042: LD_INT 0
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 2
58051: PUSH
58052: LD_INT 1
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 2
58061: PUSH
58062: LD_INT 2
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 1
58071: PUSH
58072: LD_INT 2
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 0
58081: PUSH
58082: LD_INT 2
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 1
58091: NEG
58092: PUSH
58093: LD_INT 1
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 2
58102: NEG
58103: PUSH
58104: LD_INT 0
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 2
58113: NEG
58114: PUSH
58115: LD_INT 1
58117: NEG
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 2
58125: NEG
58126: PUSH
58127: LD_INT 2
58129: NEG
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58156: LD_ADDR_VAR 0 54
58160: PUSH
58161: LD_INT 0
58163: PUSH
58164: LD_INT 0
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 0
58173: PUSH
58174: LD_INT 1
58176: NEG
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 1
58184: PUSH
58185: LD_INT 0
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 1
58194: PUSH
58195: LD_INT 1
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 0
58204: PUSH
58205: LD_INT 1
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 1
58214: NEG
58215: PUSH
58216: LD_INT 0
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 1
58225: NEG
58226: PUSH
58227: LD_INT 1
58229: NEG
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 1
58237: NEG
58238: PUSH
58239: LD_INT 2
58241: NEG
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 0
58249: PUSH
58250: LD_INT 2
58252: NEG
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 1
58260: PUSH
58261: LD_INT 1
58263: NEG
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 2
58271: PUSH
58272: LD_INT 0
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 2
58281: PUSH
58282: LD_INT 1
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 2
58291: PUSH
58292: LD_INT 2
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 1
58301: PUSH
58302: LD_INT 2
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 0
58311: PUSH
58312: LD_INT 2
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 1
58321: NEG
58322: PUSH
58323: LD_INT 1
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 2
58332: NEG
58333: PUSH
58334: LD_INT 0
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 2
58343: NEG
58344: PUSH
58345: LD_INT 1
58347: NEG
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 2
58355: NEG
58356: PUSH
58357: LD_INT 2
58359: NEG
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: LIST
58376: LIST
58377: LIST
58378: LIST
58379: LIST
58380: LIST
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58386: LD_ADDR_VAR 0 55
58390: PUSH
58391: LD_INT 0
58393: PUSH
58394: LD_INT 0
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 0
58403: PUSH
58404: LD_INT 1
58406: NEG
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 1
58414: PUSH
58415: LD_INT 0
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 1
58424: PUSH
58425: LD_INT 1
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 0
58434: PUSH
58435: LD_INT 1
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 1
58444: NEG
58445: PUSH
58446: LD_INT 0
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 1
58455: NEG
58456: PUSH
58457: LD_INT 1
58459: NEG
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 1
58467: NEG
58468: PUSH
58469: LD_INT 2
58471: NEG
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 0
58479: PUSH
58480: LD_INT 2
58482: NEG
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 1
58490: PUSH
58491: LD_INT 1
58493: NEG
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 2
58501: PUSH
58502: LD_INT 0
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 2
58511: PUSH
58512: LD_INT 1
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 2
58521: PUSH
58522: LD_INT 2
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 1
58531: PUSH
58532: LD_INT 2
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 0
58541: PUSH
58542: LD_INT 2
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 1
58551: NEG
58552: PUSH
58553: LD_INT 1
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 2
58562: NEG
58563: PUSH
58564: LD_INT 0
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 2
58573: NEG
58574: PUSH
58575: LD_INT 1
58577: NEG
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 2
58585: NEG
58586: PUSH
58587: LD_INT 2
58589: NEG
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: LIST
58603: LIST
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58616: LD_ADDR_VAR 0 56
58620: PUSH
58621: LD_INT 0
58623: PUSH
58624: LD_INT 0
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 0
58633: PUSH
58634: LD_INT 1
58636: NEG
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 1
58644: PUSH
58645: LD_INT 0
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 1
58654: PUSH
58655: LD_INT 1
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 0
58664: PUSH
58665: LD_INT 1
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 1
58674: NEG
58675: PUSH
58676: LD_INT 0
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 1
58685: NEG
58686: PUSH
58687: LD_INT 1
58689: NEG
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 1
58697: NEG
58698: PUSH
58699: LD_INT 2
58701: NEG
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 0
58709: PUSH
58710: LD_INT 2
58712: NEG
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 1
58720: PUSH
58721: LD_INT 1
58723: NEG
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 2
58731: PUSH
58732: LD_INT 0
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 2
58741: PUSH
58742: LD_INT 1
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 2
58751: PUSH
58752: LD_INT 2
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 1
58761: PUSH
58762: LD_INT 2
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 0
58771: PUSH
58772: LD_INT 2
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 1
58781: NEG
58782: PUSH
58783: LD_INT 1
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 2
58792: NEG
58793: PUSH
58794: LD_INT 0
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 2
58803: NEG
58804: PUSH
58805: LD_INT 1
58807: NEG
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 2
58815: NEG
58816: PUSH
58817: LD_INT 2
58819: NEG
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58846: LD_ADDR_VAR 0 57
58850: PUSH
58851: LD_INT 0
58853: PUSH
58854: LD_INT 0
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 0
58863: PUSH
58864: LD_INT 1
58866: NEG
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 1
58874: PUSH
58875: LD_INT 0
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 1
58884: PUSH
58885: LD_INT 1
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 0
58894: PUSH
58895: LD_INT 1
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 1
58904: NEG
58905: PUSH
58906: LD_INT 0
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 1
58915: NEG
58916: PUSH
58917: LD_INT 1
58919: NEG
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 1
58927: NEG
58928: PUSH
58929: LD_INT 2
58931: NEG
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 0
58939: PUSH
58940: LD_INT 2
58942: NEG
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 1
58950: PUSH
58951: LD_INT 1
58953: NEG
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 2
58961: PUSH
58962: LD_INT 0
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 2
58971: PUSH
58972: LD_INT 1
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 2
58981: PUSH
58982: LD_INT 2
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 1
58991: PUSH
58992: LD_INT 2
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 0
59001: PUSH
59002: LD_INT 2
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 1
59011: NEG
59012: PUSH
59013: LD_INT 1
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 2
59022: NEG
59023: PUSH
59024: LD_INT 0
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 2
59033: NEG
59034: PUSH
59035: LD_INT 1
59037: NEG
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 2
59045: NEG
59046: PUSH
59047: LD_INT 2
59049: NEG
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: LIST
59063: LIST
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59076: LD_ADDR_VAR 0 58
59080: PUSH
59081: LD_INT 0
59083: PUSH
59084: LD_INT 0
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 0
59093: PUSH
59094: LD_INT 1
59096: NEG
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 1
59104: PUSH
59105: LD_INT 0
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 1
59114: PUSH
59115: LD_INT 1
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 0
59124: PUSH
59125: LD_INT 1
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 1
59134: NEG
59135: PUSH
59136: LD_INT 0
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 1
59145: NEG
59146: PUSH
59147: LD_INT 1
59149: NEG
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 1
59157: NEG
59158: PUSH
59159: LD_INT 2
59161: NEG
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 0
59169: PUSH
59170: LD_INT 2
59172: NEG
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 1
59180: PUSH
59181: LD_INT 1
59183: NEG
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 2
59191: PUSH
59192: LD_INT 0
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 2
59201: PUSH
59202: LD_INT 1
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 2
59211: PUSH
59212: LD_INT 2
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 1
59221: PUSH
59222: LD_INT 2
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 0
59231: PUSH
59232: LD_INT 2
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 1
59241: NEG
59242: PUSH
59243: LD_INT 1
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 2
59252: NEG
59253: PUSH
59254: LD_INT 0
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 2
59263: NEG
59264: PUSH
59265: LD_INT 1
59267: NEG
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 2
59275: NEG
59276: PUSH
59277: LD_INT 2
59279: NEG
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59306: LD_ADDR_VAR 0 59
59310: PUSH
59311: LD_INT 0
59313: PUSH
59314: LD_INT 0
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 0
59323: PUSH
59324: LD_INT 1
59326: NEG
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 1
59334: PUSH
59335: LD_INT 0
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 1
59344: PUSH
59345: LD_INT 1
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 0
59354: PUSH
59355: LD_INT 1
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 1
59364: NEG
59365: PUSH
59366: LD_INT 0
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 1
59375: NEG
59376: PUSH
59377: LD_INT 1
59379: NEG
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59394: LD_ADDR_VAR 0 60
59398: PUSH
59399: LD_INT 0
59401: PUSH
59402: LD_INT 0
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 0
59411: PUSH
59412: LD_INT 1
59414: NEG
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 1
59422: PUSH
59423: LD_INT 0
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 1
59432: PUSH
59433: LD_INT 1
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 0
59442: PUSH
59443: LD_INT 1
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 1
59452: NEG
59453: PUSH
59454: LD_INT 0
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 1
59463: NEG
59464: PUSH
59465: LD_INT 1
59467: NEG
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: LIST
59480: LIST
59481: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59482: LD_ADDR_VAR 0 61
59486: PUSH
59487: LD_INT 0
59489: PUSH
59490: LD_INT 0
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 0
59499: PUSH
59500: LD_INT 1
59502: NEG
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 1
59510: PUSH
59511: LD_INT 0
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 1
59520: PUSH
59521: LD_INT 1
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 0
59530: PUSH
59531: LD_INT 1
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 1
59540: NEG
59541: PUSH
59542: LD_INT 0
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 1
59551: NEG
59552: PUSH
59553: LD_INT 1
59555: NEG
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59570: LD_ADDR_VAR 0 62
59574: PUSH
59575: LD_INT 0
59577: PUSH
59578: LD_INT 0
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 0
59587: PUSH
59588: LD_INT 1
59590: NEG
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 1
59598: PUSH
59599: LD_INT 0
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 1
59608: PUSH
59609: LD_INT 1
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 0
59618: PUSH
59619: LD_INT 1
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 1
59628: NEG
59629: PUSH
59630: LD_INT 0
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 1
59639: NEG
59640: PUSH
59641: LD_INT 1
59643: NEG
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59658: LD_ADDR_VAR 0 63
59662: PUSH
59663: LD_INT 0
59665: PUSH
59666: LD_INT 0
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 0
59675: PUSH
59676: LD_INT 1
59678: NEG
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 1
59686: PUSH
59687: LD_INT 0
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 1
59696: PUSH
59697: LD_INT 1
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 0
59706: PUSH
59707: LD_INT 1
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 1
59716: NEG
59717: PUSH
59718: LD_INT 0
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 1
59727: NEG
59728: PUSH
59729: LD_INT 1
59731: NEG
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59746: LD_ADDR_VAR 0 64
59750: PUSH
59751: LD_INT 0
59753: PUSH
59754: LD_INT 0
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 0
59763: PUSH
59764: LD_INT 1
59766: NEG
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 1
59774: PUSH
59775: LD_INT 0
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 1
59784: PUSH
59785: LD_INT 1
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 0
59794: PUSH
59795: LD_INT 1
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 1
59804: NEG
59805: PUSH
59806: LD_INT 0
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 1
59815: NEG
59816: PUSH
59817: LD_INT 1
59819: NEG
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: ST_TO_ADDR
// end ; 1 :
59834: GO 65731
59836: LD_INT 1
59838: DOUBLE
59839: EQUAL
59840: IFTRUE 59844
59842: GO 62467
59844: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59845: LD_ADDR_VAR 0 11
59849: PUSH
59850: LD_INT 1
59852: NEG
59853: PUSH
59854: LD_INT 3
59856: NEG
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 0
59864: PUSH
59865: LD_INT 3
59867: NEG
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 1
59875: PUSH
59876: LD_INT 2
59878: NEG
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: LIST
59888: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59889: LD_ADDR_VAR 0 12
59893: PUSH
59894: LD_INT 2
59896: PUSH
59897: LD_INT 1
59899: NEG
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 3
59907: PUSH
59908: LD_INT 0
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 3
59917: PUSH
59918: LD_INT 1
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: LIST
59929: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59930: LD_ADDR_VAR 0 13
59934: PUSH
59935: LD_INT 3
59937: PUSH
59938: LD_INT 2
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 3
59947: PUSH
59948: LD_INT 3
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 2
59957: PUSH
59958: LD_INT 3
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: LIST
59969: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59970: LD_ADDR_VAR 0 14
59974: PUSH
59975: LD_INT 1
59977: PUSH
59978: LD_INT 3
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 0
59987: PUSH
59988: LD_INT 3
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 1
59997: NEG
59998: PUSH
59999: LD_INT 2
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: LIST
60010: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60011: LD_ADDR_VAR 0 15
60015: PUSH
60016: LD_INT 2
60018: NEG
60019: PUSH
60020: LD_INT 1
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 3
60029: NEG
60030: PUSH
60031: LD_INT 0
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 3
60040: NEG
60041: PUSH
60042: LD_INT 1
60044: NEG
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: LIST
60054: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60055: LD_ADDR_VAR 0 16
60059: PUSH
60060: LD_INT 2
60062: NEG
60063: PUSH
60064: LD_INT 3
60066: NEG
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 3
60074: NEG
60075: PUSH
60076: LD_INT 2
60078: NEG
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 3
60086: NEG
60087: PUSH
60088: LD_INT 3
60090: NEG
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: LIST
60100: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60101: LD_ADDR_VAR 0 17
60105: PUSH
60106: LD_INT 1
60108: NEG
60109: PUSH
60110: LD_INT 3
60112: NEG
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 0
60120: PUSH
60121: LD_INT 3
60123: NEG
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 1
60131: PUSH
60132: LD_INT 2
60134: NEG
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: LIST
60144: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60145: LD_ADDR_VAR 0 18
60149: PUSH
60150: LD_INT 2
60152: PUSH
60153: LD_INT 1
60155: NEG
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 3
60163: PUSH
60164: LD_INT 0
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 3
60173: PUSH
60174: LD_INT 1
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: LIST
60185: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60186: LD_ADDR_VAR 0 19
60190: PUSH
60191: LD_INT 3
60193: PUSH
60194: LD_INT 2
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 3
60203: PUSH
60204: LD_INT 3
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 2
60213: PUSH
60214: LD_INT 3
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: LIST
60225: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60226: LD_ADDR_VAR 0 20
60230: PUSH
60231: LD_INT 1
60233: PUSH
60234: LD_INT 3
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 0
60243: PUSH
60244: LD_INT 3
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 1
60253: NEG
60254: PUSH
60255: LD_INT 2
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: LIST
60266: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60267: LD_ADDR_VAR 0 21
60271: PUSH
60272: LD_INT 2
60274: NEG
60275: PUSH
60276: LD_INT 1
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 3
60285: NEG
60286: PUSH
60287: LD_INT 0
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 3
60296: NEG
60297: PUSH
60298: LD_INT 1
60300: NEG
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: LIST
60310: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60311: LD_ADDR_VAR 0 22
60315: PUSH
60316: LD_INT 2
60318: NEG
60319: PUSH
60320: LD_INT 3
60322: NEG
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 3
60330: NEG
60331: PUSH
60332: LD_INT 2
60334: NEG
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 3
60342: NEG
60343: PUSH
60344: LD_INT 3
60346: NEG
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: LIST
60356: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
60357: LD_ADDR_VAR 0 23
60361: PUSH
60362: LD_INT 0
60364: PUSH
60365: LD_INT 3
60367: NEG
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 1
60375: NEG
60376: PUSH
60377: LD_INT 4
60379: NEG
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 1
60387: PUSH
60388: LD_INT 3
60390: NEG
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: LIST
60400: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
60401: LD_ADDR_VAR 0 24
60405: PUSH
60406: LD_INT 3
60408: PUSH
60409: LD_INT 0
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: LD_INT 3
60418: PUSH
60419: LD_INT 1
60421: NEG
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 4
60429: PUSH
60430: LD_INT 1
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: LIST
60441: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
60442: LD_ADDR_VAR 0 25
60446: PUSH
60447: LD_INT 3
60449: PUSH
60450: LD_INT 3
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 4
60459: PUSH
60460: LD_INT 3
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 3
60469: PUSH
60470: LD_INT 4
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: LIST
60481: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
60482: LD_ADDR_VAR 0 26
60486: PUSH
60487: LD_INT 0
60489: PUSH
60490: LD_INT 3
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: PUSH
60497: LD_INT 1
60499: PUSH
60500: LD_INT 4
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 1
60509: NEG
60510: PUSH
60511: LD_INT 3
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: LIST
60522: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
60523: LD_ADDR_VAR 0 27
60527: PUSH
60528: LD_INT 3
60530: NEG
60531: PUSH
60532: LD_INT 0
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 3
60541: NEG
60542: PUSH
60543: LD_INT 1
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 4
60552: NEG
60553: PUSH
60554: LD_INT 1
60556: NEG
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: LIST
60566: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
60567: LD_ADDR_VAR 0 28
60571: PUSH
60572: LD_INT 3
60574: NEG
60575: PUSH
60576: LD_INT 3
60578: NEG
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PUSH
60584: LD_INT 3
60586: NEG
60587: PUSH
60588: LD_INT 4
60590: NEG
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: LD_INT 4
60598: NEG
60599: PUSH
60600: LD_INT 3
60602: NEG
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: LIST
60612: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
60613: LD_ADDR_VAR 0 29
60617: PUSH
60618: LD_INT 1
60620: NEG
60621: PUSH
60622: LD_INT 3
60624: NEG
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 0
60632: PUSH
60633: LD_INT 3
60635: NEG
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 1
60643: PUSH
60644: LD_INT 2
60646: NEG
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 1
60654: NEG
60655: PUSH
60656: LD_INT 4
60658: NEG
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 0
60666: PUSH
60667: LD_INT 4
60669: NEG
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 1
60677: PUSH
60678: LD_INT 3
60680: NEG
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 1
60688: NEG
60689: PUSH
60690: LD_INT 5
60692: NEG
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: LD_INT 0
60700: PUSH
60701: LD_INT 5
60703: NEG
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 1
60711: PUSH
60712: LD_INT 4
60714: NEG
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 1
60722: NEG
60723: PUSH
60724: LD_INT 6
60726: NEG
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 0
60734: PUSH
60735: LD_INT 6
60737: NEG
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 1
60745: PUSH
60746: LD_INT 5
60748: NEG
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
60768: LD_ADDR_VAR 0 30
60772: PUSH
60773: LD_INT 2
60775: PUSH
60776: LD_INT 1
60778: NEG
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 3
60786: PUSH
60787: LD_INT 0
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 3
60796: PUSH
60797: LD_INT 1
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: LD_INT 3
60806: PUSH
60807: LD_INT 1
60809: NEG
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 4
60817: PUSH
60818: LD_INT 0
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: LD_INT 4
60827: PUSH
60828: LD_INT 1
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: PUSH
60835: LD_INT 4
60837: PUSH
60838: LD_INT 1
60840: NEG
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 5
60848: PUSH
60849: LD_INT 0
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 5
60858: PUSH
60859: LD_INT 1
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 5
60868: PUSH
60869: LD_INT 1
60871: NEG
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 6
60879: PUSH
60880: LD_INT 0
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 6
60889: PUSH
60890: LD_INT 1
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
60911: LD_ADDR_VAR 0 31
60915: PUSH
60916: LD_INT 3
60918: PUSH
60919: LD_INT 2
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 3
60928: PUSH
60929: LD_INT 3
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 2
60938: PUSH
60939: LD_INT 3
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: LD_INT 4
60948: PUSH
60949: LD_INT 3
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 4
60958: PUSH
60959: LD_INT 4
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 3
60968: PUSH
60969: LD_INT 4
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 5
60978: PUSH
60979: LD_INT 4
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 5
60988: PUSH
60989: LD_INT 5
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 4
60998: PUSH
60999: LD_INT 5
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 6
61008: PUSH
61009: LD_INT 5
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 6
61018: PUSH
61019: LD_INT 6
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 5
61028: PUSH
61029: LD_INT 6
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
61050: LD_ADDR_VAR 0 32
61054: PUSH
61055: LD_INT 1
61057: PUSH
61058: LD_INT 3
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 0
61067: PUSH
61068: LD_INT 3
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 1
61077: NEG
61078: PUSH
61079: LD_INT 2
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 1
61088: PUSH
61089: LD_INT 4
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 0
61098: PUSH
61099: LD_INT 4
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 1
61108: NEG
61109: PUSH
61110: LD_INT 3
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 1
61119: PUSH
61120: LD_INT 5
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 0
61129: PUSH
61130: LD_INT 5
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 1
61139: NEG
61140: PUSH
61141: LD_INT 4
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 1
61150: PUSH
61151: LD_INT 6
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 0
61160: PUSH
61161: LD_INT 6
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 1
61170: NEG
61171: PUSH
61172: LD_INT 5
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
61193: LD_ADDR_VAR 0 33
61197: PUSH
61198: LD_INT 2
61200: NEG
61201: PUSH
61202: LD_INT 1
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 3
61211: NEG
61212: PUSH
61213: LD_INT 0
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 3
61222: NEG
61223: PUSH
61224: LD_INT 1
61226: NEG
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 3
61234: NEG
61235: PUSH
61236: LD_INT 1
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 4
61245: NEG
61246: PUSH
61247: LD_INT 0
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 4
61256: NEG
61257: PUSH
61258: LD_INT 1
61260: NEG
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 4
61268: NEG
61269: PUSH
61270: LD_INT 1
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 5
61279: NEG
61280: PUSH
61281: LD_INT 0
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 5
61290: NEG
61291: PUSH
61292: LD_INT 1
61294: NEG
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 5
61302: NEG
61303: PUSH
61304: LD_INT 1
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 6
61313: NEG
61314: PUSH
61315: LD_INT 0
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 6
61324: NEG
61325: PUSH
61326: LD_INT 1
61328: NEG
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
61348: LD_ADDR_VAR 0 34
61352: PUSH
61353: LD_INT 2
61355: NEG
61356: PUSH
61357: LD_INT 3
61359: NEG
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 3
61367: NEG
61368: PUSH
61369: LD_INT 2
61371: NEG
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 3
61379: NEG
61380: PUSH
61381: LD_INT 3
61383: NEG
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 3
61391: NEG
61392: PUSH
61393: LD_INT 4
61395: NEG
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: LD_INT 4
61403: NEG
61404: PUSH
61405: LD_INT 3
61407: NEG
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: LD_INT 4
61415: NEG
61416: PUSH
61417: LD_INT 4
61419: NEG
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: PUSH
61425: LD_INT 4
61427: NEG
61428: PUSH
61429: LD_INT 5
61431: NEG
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: PUSH
61437: LD_INT 5
61439: NEG
61440: PUSH
61441: LD_INT 4
61443: NEG
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 5
61451: NEG
61452: PUSH
61453: LD_INT 5
61455: NEG
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: LD_INT 5
61463: NEG
61464: PUSH
61465: LD_INT 6
61467: NEG
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: LD_INT 6
61475: NEG
61476: PUSH
61477: LD_INT 5
61479: NEG
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: LD_INT 6
61487: NEG
61488: PUSH
61489: LD_INT 6
61491: NEG
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: LIST
61510: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
61511: LD_ADDR_VAR 0 41
61515: PUSH
61516: LD_INT 0
61518: PUSH
61519: LD_INT 2
61521: NEG
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 1
61529: NEG
61530: PUSH
61531: LD_INT 3
61533: NEG
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: LD_INT 1
61541: PUSH
61542: LD_INT 2
61544: NEG
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: LIST
61554: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
61555: LD_ADDR_VAR 0 42
61559: PUSH
61560: LD_INT 2
61562: PUSH
61563: LD_INT 0
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 2
61572: PUSH
61573: LD_INT 1
61575: NEG
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 3
61583: PUSH
61584: LD_INT 1
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: LIST
61595: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
61596: LD_ADDR_VAR 0 43
61600: PUSH
61601: LD_INT 2
61603: PUSH
61604: LD_INT 2
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 3
61613: PUSH
61614: LD_INT 2
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 2
61623: PUSH
61624: LD_INT 3
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: LIST
61635: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
61636: LD_ADDR_VAR 0 44
61640: PUSH
61641: LD_INT 0
61643: PUSH
61644: LD_INT 2
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 1
61653: PUSH
61654: LD_INT 3
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: LD_INT 1
61663: NEG
61664: PUSH
61665: LD_INT 2
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: LIST
61676: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61677: LD_ADDR_VAR 0 45
61681: PUSH
61682: LD_INT 2
61684: NEG
61685: PUSH
61686: LD_INT 0
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: PUSH
61693: LD_INT 2
61695: NEG
61696: PUSH
61697: LD_INT 1
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 3
61706: NEG
61707: PUSH
61708: LD_INT 1
61710: NEG
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: LIST
61720: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
61721: LD_ADDR_VAR 0 46
61725: PUSH
61726: LD_INT 2
61728: NEG
61729: PUSH
61730: LD_INT 2
61732: NEG
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 2
61740: NEG
61741: PUSH
61742: LD_INT 3
61744: NEG
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: LD_INT 3
61752: NEG
61753: PUSH
61754: LD_INT 2
61756: NEG
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: LIST
61766: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
61767: LD_ADDR_VAR 0 47
61771: PUSH
61772: LD_INT 2
61774: NEG
61775: PUSH
61776: LD_INT 3
61778: NEG
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: PUSH
61784: LD_INT 1
61786: NEG
61787: PUSH
61788: LD_INT 3
61790: NEG
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
61800: LD_ADDR_VAR 0 48
61804: PUSH
61805: LD_INT 1
61807: PUSH
61808: LD_INT 2
61810: NEG
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 2
61818: PUSH
61819: LD_INT 1
61821: NEG
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
61831: LD_ADDR_VAR 0 49
61835: PUSH
61836: LD_INT 3
61838: PUSH
61839: LD_INT 1
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 3
61848: PUSH
61849: LD_INT 2
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
61860: LD_ADDR_VAR 0 50
61864: PUSH
61865: LD_INT 2
61867: PUSH
61868: LD_INT 3
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: LD_INT 1
61877: PUSH
61878: LD_INT 3
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61889: LD_ADDR_VAR 0 51
61893: PUSH
61894: LD_INT 1
61896: NEG
61897: PUSH
61898: LD_INT 2
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 2
61907: NEG
61908: PUSH
61909: LD_INT 1
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61920: LD_ADDR_VAR 0 52
61924: PUSH
61925: LD_INT 3
61927: NEG
61928: PUSH
61929: LD_INT 1
61931: NEG
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 3
61939: NEG
61940: PUSH
61941: LD_INT 2
61943: NEG
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61953: LD_ADDR_VAR 0 53
61957: PUSH
61958: LD_INT 1
61960: NEG
61961: PUSH
61962: LD_INT 3
61964: NEG
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 0
61972: PUSH
61973: LD_INT 3
61975: NEG
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: LD_INT 1
61983: PUSH
61984: LD_INT 2
61986: NEG
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: LIST
61996: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61997: LD_ADDR_VAR 0 54
62001: PUSH
62002: LD_INT 2
62004: PUSH
62005: LD_INT 1
62007: NEG
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: LD_INT 3
62015: PUSH
62016: LD_INT 0
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 3
62025: PUSH
62026: LD_INT 1
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: LIST
62037: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62038: LD_ADDR_VAR 0 55
62042: PUSH
62043: LD_INT 3
62045: PUSH
62046: LD_INT 2
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 3
62055: PUSH
62056: LD_INT 3
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: LD_INT 2
62065: PUSH
62066: LD_INT 3
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: LIST
62077: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62078: LD_ADDR_VAR 0 56
62082: PUSH
62083: LD_INT 1
62085: PUSH
62086: LD_INT 3
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PUSH
62093: LD_INT 0
62095: PUSH
62096: LD_INT 3
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 1
62105: NEG
62106: PUSH
62107: LD_INT 2
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: LIST
62118: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62119: LD_ADDR_VAR 0 57
62123: PUSH
62124: LD_INT 2
62126: NEG
62127: PUSH
62128: LD_INT 1
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 3
62137: NEG
62138: PUSH
62139: LD_INT 0
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: PUSH
62146: LD_INT 3
62148: NEG
62149: PUSH
62150: LD_INT 1
62152: NEG
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: LIST
62162: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62163: LD_ADDR_VAR 0 58
62167: PUSH
62168: LD_INT 2
62170: NEG
62171: PUSH
62172: LD_INT 3
62174: NEG
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: LD_INT 3
62182: NEG
62183: PUSH
62184: LD_INT 2
62186: NEG
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 3
62194: NEG
62195: PUSH
62196: LD_INT 3
62198: NEG
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: LIST
62208: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
62209: LD_ADDR_VAR 0 59
62213: PUSH
62214: LD_INT 1
62216: NEG
62217: PUSH
62218: LD_INT 2
62220: NEG
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: LD_INT 0
62228: PUSH
62229: LD_INT 2
62231: NEG
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 1
62239: PUSH
62240: LD_INT 1
62242: NEG
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: LIST
62252: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62253: LD_ADDR_VAR 0 60
62257: PUSH
62258: LD_INT 1
62260: PUSH
62261: LD_INT 1
62263: NEG
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: PUSH
62269: LD_INT 2
62271: PUSH
62272: LD_INT 0
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 2
62281: PUSH
62282: LD_INT 1
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: LIST
62293: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62294: LD_ADDR_VAR 0 61
62298: PUSH
62299: LD_INT 2
62301: PUSH
62302: LD_INT 1
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PUSH
62309: LD_INT 2
62311: PUSH
62312: LD_INT 2
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 1
62321: PUSH
62322: LD_INT 2
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: LIST
62333: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62334: LD_ADDR_VAR 0 62
62338: PUSH
62339: LD_INT 1
62341: PUSH
62342: LD_INT 2
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 0
62351: PUSH
62352: LD_INT 2
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 1
62361: NEG
62362: PUSH
62363: LD_INT 1
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: LIST
62374: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62375: LD_ADDR_VAR 0 63
62379: PUSH
62380: LD_INT 1
62382: NEG
62383: PUSH
62384: LD_INT 1
62386: PUSH
62387: EMPTY
62388: LIST
62389: LIST
62390: PUSH
62391: LD_INT 2
62393: NEG
62394: PUSH
62395: LD_INT 0
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 2
62404: NEG
62405: PUSH
62406: LD_INT 1
62408: NEG
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: LIST
62418: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62419: LD_ADDR_VAR 0 64
62423: PUSH
62424: LD_INT 1
62426: NEG
62427: PUSH
62428: LD_INT 2
62430: NEG
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: LD_INT 2
62438: NEG
62439: PUSH
62440: LD_INT 1
62442: NEG
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 2
62450: NEG
62451: PUSH
62452: LD_INT 2
62454: NEG
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: LIST
62464: ST_TO_ADDR
// end ; 2 :
62465: GO 65731
62467: LD_INT 2
62469: DOUBLE
62470: EQUAL
62471: IFTRUE 62475
62473: GO 65730
62475: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
62476: LD_ADDR_VAR 0 29
62480: PUSH
62481: LD_INT 4
62483: PUSH
62484: LD_INT 0
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: LD_INT 4
62493: PUSH
62494: LD_INT 1
62496: NEG
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 5
62504: PUSH
62505: LD_INT 0
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 5
62514: PUSH
62515: LD_INT 1
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 4
62524: PUSH
62525: LD_INT 1
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 3
62534: PUSH
62535: LD_INT 0
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 3
62544: PUSH
62545: LD_INT 1
62547: NEG
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PUSH
62553: LD_INT 3
62555: PUSH
62556: LD_INT 2
62558: NEG
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: PUSH
62564: LD_INT 5
62566: PUSH
62567: LD_INT 2
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: PUSH
62574: LD_INT 3
62576: PUSH
62577: LD_INT 3
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 3
62586: PUSH
62587: LD_INT 2
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: PUSH
62594: LD_INT 4
62596: PUSH
62597: LD_INT 3
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: PUSH
62604: LD_INT 4
62606: PUSH
62607: LD_INT 4
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 3
62616: PUSH
62617: LD_INT 4
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 2
62626: PUSH
62627: LD_INT 3
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: PUSH
62634: LD_INT 2
62636: PUSH
62637: LD_INT 2
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: PUSH
62644: LD_INT 4
62646: PUSH
62647: LD_INT 2
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: LD_INT 2
62656: PUSH
62657: LD_INT 4
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 0
62666: PUSH
62667: LD_INT 4
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 0
62676: PUSH
62677: LD_INT 3
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: LD_INT 1
62686: PUSH
62687: LD_INT 4
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: PUSH
62694: LD_INT 1
62696: PUSH
62697: LD_INT 5
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 0
62706: PUSH
62707: LD_INT 5
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PUSH
62714: LD_INT 1
62716: NEG
62717: PUSH
62718: LD_INT 4
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: PUSH
62725: LD_INT 1
62727: NEG
62728: PUSH
62729: LD_INT 3
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: PUSH
62736: LD_INT 2
62738: PUSH
62739: LD_INT 5
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: LD_INT 2
62748: NEG
62749: PUSH
62750: LD_INT 3
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: LD_INT 3
62759: NEG
62760: PUSH
62761: LD_INT 0
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: LD_INT 3
62770: NEG
62771: PUSH
62772: LD_INT 1
62774: NEG
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PUSH
62780: LD_INT 2
62782: NEG
62783: PUSH
62784: LD_INT 0
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: PUSH
62791: LD_INT 2
62793: NEG
62794: PUSH
62795: LD_INT 1
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 3
62804: NEG
62805: PUSH
62806: LD_INT 1
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: LD_INT 4
62815: NEG
62816: PUSH
62817: LD_INT 0
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 4
62826: NEG
62827: PUSH
62828: LD_INT 1
62830: NEG
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: LD_INT 4
62838: NEG
62839: PUSH
62840: LD_INT 2
62842: NEG
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: LD_INT 2
62850: NEG
62851: PUSH
62852: LD_INT 2
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 4
62861: NEG
62862: PUSH
62863: LD_INT 4
62865: NEG
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: PUSH
62871: LD_INT 4
62873: NEG
62874: PUSH
62875: LD_INT 5
62877: NEG
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PUSH
62883: LD_INT 3
62885: NEG
62886: PUSH
62887: LD_INT 4
62889: NEG
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: PUSH
62895: LD_INT 3
62897: NEG
62898: PUSH
62899: LD_INT 3
62901: NEG
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: PUSH
62907: LD_INT 4
62909: NEG
62910: PUSH
62911: LD_INT 3
62913: NEG
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PUSH
62919: LD_INT 5
62921: NEG
62922: PUSH
62923: LD_INT 4
62925: NEG
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 5
62933: NEG
62934: PUSH
62935: LD_INT 5
62937: NEG
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: PUSH
62943: LD_INT 3
62945: NEG
62946: PUSH
62947: LD_INT 5
62949: NEG
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: PUSH
62955: LD_INT 5
62957: NEG
62958: PUSH
62959: LD_INT 3
62961: NEG
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: LIST
62971: LIST
62972: LIST
62973: LIST
62974: LIST
62975: LIST
62976: LIST
62977: LIST
62978: LIST
62979: LIST
62980: LIST
62981: LIST
62982: LIST
62983: LIST
62984: LIST
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
63014: LD_ADDR_VAR 0 30
63018: PUSH
63019: LD_INT 4
63021: PUSH
63022: LD_INT 4
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PUSH
63029: LD_INT 4
63031: PUSH
63032: LD_INT 3
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: PUSH
63039: LD_INT 5
63041: PUSH
63042: LD_INT 4
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: LD_INT 5
63051: PUSH
63052: LD_INT 5
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: PUSH
63059: LD_INT 4
63061: PUSH
63062: LD_INT 5
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 3
63071: PUSH
63072: LD_INT 4
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: PUSH
63079: LD_INT 3
63081: PUSH
63082: LD_INT 3
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 5
63091: PUSH
63092: LD_INT 3
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 3
63101: PUSH
63102: LD_INT 5
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 0
63111: PUSH
63112: LD_INT 3
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: LD_INT 0
63121: PUSH
63122: LD_INT 2
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PUSH
63129: LD_INT 1
63131: PUSH
63132: LD_INT 3
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PUSH
63139: LD_INT 1
63141: PUSH
63142: LD_INT 4
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: LD_INT 0
63151: PUSH
63152: LD_INT 4
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 1
63161: NEG
63162: PUSH
63163: LD_INT 3
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: PUSH
63170: LD_INT 1
63172: NEG
63173: PUSH
63174: LD_INT 2
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 2
63183: PUSH
63184: LD_INT 4
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: PUSH
63191: LD_INT 2
63193: NEG
63194: PUSH
63195: LD_INT 2
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 4
63204: NEG
63205: PUSH
63206: LD_INT 0
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: LD_INT 4
63215: NEG
63216: PUSH
63217: LD_INT 1
63219: NEG
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 3
63227: NEG
63228: PUSH
63229: LD_INT 0
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: LD_INT 3
63238: NEG
63239: PUSH
63240: LD_INT 1
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PUSH
63247: LD_INT 4
63249: NEG
63250: PUSH
63251: LD_INT 1
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 5
63260: NEG
63261: PUSH
63262: LD_INT 0
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 5
63271: NEG
63272: PUSH
63273: LD_INT 1
63275: NEG
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: LD_INT 5
63283: NEG
63284: PUSH
63285: LD_INT 2
63287: NEG
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: LD_INT 3
63295: NEG
63296: PUSH
63297: LD_INT 2
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: PUSH
63304: LD_INT 3
63306: NEG
63307: PUSH
63308: LD_INT 3
63310: NEG
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: LD_INT 3
63318: NEG
63319: PUSH
63320: LD_INT 4
63322: NEG
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: PUSH
63328: LD_INT 2
63330: NEG
63331: PUSH
63332: LD_INT 3
63334: NEG
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PUSH
63340: LD_INT 2
63342: NEG
63343: PUSH
63344: LD_INT 2
63346: NEG
63347: PUSH
63348: EMPTY
63349: LIST
63350: LIST
63351: PUSH
63352: LD_INT 3
63354: NEG
63355: PUSH
63356: LD_INT 2
63358: NEG
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 4
63366: NEG
63367: PUSH
63368: LD_INT 3
63370: NEG
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 4
63378: NEG
63379: PUSH
63380: LD_INT 4
63382: NEG
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 2
63390: NEG
63391: PUSH
63392: LD_INT 4
63394: NEG
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 4
63402: NEG
63403: PUSH
63404: LD_INT 2
63406: NEG
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: LD_INT 0
63414: PUSH
63415: LD_INT 4
63417: NEG
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: PUSH
63423: LD_INT 0
63425: PUSH
63426: LD_INT 5
63428: NEG
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: PUSH
63434: LD_INT 1
63436: PUSH
63437: LD_INT 4
63439: NEG
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 1
63447: PUSH
63448: LD_INT 3
63450: NEG
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: LD_INT 0
63458: PUSH
63459: LD_INT 3
63461: NEG
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: PUSH
63467: LD_INT 1
63469: NEG
63470: PUSH
63471: LD_INT 4
63473: NEG
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: PUSH
63479: LD_INT 1
63481: NEG
63482: PUSH
63483: LD_INT 5
63485: NEG
63486: PUSH
63487: EMPTY
63488: LIST
63489: LIST
63490: PUSH
63491: LD_INT 2
63493: PUSH
63494: LD_INT 3
63496: NEG
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: PUSH
63502: LD_INT 2
63504: NEG
63505: PUSH
63506: LD_INT 5
63508: NEG
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: LIST
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
63561: LD_ADDR_VAR 0 31
63565: PUSH
63566: LD_INT 0
63568: PUSH
63569: LD_INT 4
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: LD_INT 0
63578: PUSH
63579: LD_INT 3
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: LD_INT 1
63588: PUSH
63589: LD_INT 4
63591: PUSH
63592: EMPTY
63593: LIST
63594: LIST
63595: PUSH
63596: LD_INT 1
63598: PUSH
63599: LD_INT 5
63601: PUSH
63602: EMPTY
63603: LIST
63604: LIST
63605: PUSH
63606: LD_INT 0
63608: PUSH
63609: LD_INT 5
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: PUSH
63616: LD_INT 1
63618: NEG
63619: PUSH
63620: LD_INT 4
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: PUSH
63627: LD_INT 1
63629: NEG
63630: PUSH
63631: LD_INT 3
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PUSH
63638: LD_INT 2
63640: PUSH
63641: LD_INT 5
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: LD_INT 2
63650: NEG
63651: PUSH
63652: LD_INT 3
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: PUSH
63659: LD_INT 3
63661: NEG
63662: PUSH
63663: LD_INT 0
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: LD_INT 3
63672: NEG
63673: PUSH
63674: LD_INT 1
63676: NEG
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: LD_INT 2
63684: NEG
63685: PUSH
63686: LD_INT 0
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: LD_INT 2
63695: NEG
63696: PUSH
63697: LD_INT 1
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: LD_INT 3
63706: NEG
63707: PUSH
63708: LD_INT 1
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_INT 4
63717: NEG
63718: PUSH
63719: LD_INT 0
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: LD_INT 4
63728: NEG
63729: PUSH
63730: LD_INT 1
63732: NEG
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: PUSH
63738: LD_INT 4
63740: NEG
63741: PUSH
63742: LD_INT 2
63744: NEG
63745: PUSH
63746: EMPTY
63747: LIST
63748: LIST
63749: PUSH
63750: LD_INT 2
63752: NEG
63753: PUSH
63754: LD_INT 2
63756: PUSH
63757: EMPTY
63758: LIST
63759: LIST
63760: PUSH
63761: LD_INT 4
63763: NEG
63764: PUSH
63765: LD_INT 4
63767: NEG
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: PUSH
63773: LD_INT 4
63775: NEG
63776: PUSH
63777: LD_INT 5
63779: NEG
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: LD_INT 3
63787: NEG
63788: PUSH
63789: LD_INT 4
63791: NEG
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 3
63799: NEG
63800: PUSH
63801: LD_INT 3
63803: NEG
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: PUSH
63809: LD_INT 4
63811: NEG
63812: PUSH
63813: LD_INT 3
63815: NEG
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: LD_INT 5
63823: NEG
63824: PUSH
63825: LD_INT 4
63827: NEG
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: LD_INT 5
63835: NEG
63836: PUSH
63837: LD_INT 5
63839: NEG
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 3
63847: NEG
63848: PUSH
63849: LD_INT 5
63851: NEG
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: PUSH
63857: LD_INT 5
63859: NEG
63860: PUSH
63861: LD_INT 3
63863: NEG
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: PUSH
63869: LD_INT 0
63871: PUSH
63872: LD_INT 3
63874: NEG
63875: PUSH
63876: EMPTY
63877: LIST
63878: LIST
63879: PUSH
63880: LD_INT 0
63882: PUSH
63883: LD_INT 4
63885: NEG
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: PUSH
63891: LD_INT 1
63893: PUSH
63894: LD_INT 3
63896: NEG
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: PUSH
63902: LD_INT 1
63904: PUSH
63905: LD_INT 2
63907: NEG
63908: PUSH
63909: EMPTY
63910: LIST
63911: LIST
63912: PUSH
63913: LD_INT 0
63915: PUSH
63916: LD_INT 2
63918: NEG
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PUSH
63924: LD_INT 1
63926: NEG
63927: PUSH
63928: LD_INT 3
63930: NEG
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: LD_INT 1
63938: NEG
63939: PUSH
63940: LD_INT 4
63942: NEG
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: PUSH
63948: LD_INT 2
63950: PUSH
63951: LD_INT 2
63953: NEG
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PUSH
63959: LD_INT 2
63961: NEG
63962: PUSH
63963: LD_INT 4
63965: NEG
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: PUSH
63971: LD_INT 4
63973: PUSH
63974: LD_INT 0
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 4
63983: PUSH
63984: LD_INT 1
63986: NEG
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: LD_INT 5
63994: PUSH
63995: LD_INT 0
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: PUSH
64002: LD_INT 5
64004: PUSH
64005: LD_INT 1
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: PUSH
64012: LD_INT 4
64014: PUSH
64015: LD_INT 1
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: PUSH
64022: LD_INT 3
64024: PUSH
64025: LD_INT 0
64027: PUSH
64028: EMPTY
64029: LIST
64030: LIST
64031: PUSH
64032: LD_INT 3
64034: PUSH
64035: LD_INT 1
64037: NEG
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: PUSH
64043: LD_INT 3
64045: PUSH
64046: LD_INT 2
64048: NEG
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: PUSH
64054: LD_INT 5
64056: PUSH
64057: LD_INT 2
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: LIST
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: LIST
64073: LIST
64074: LIST
64075: LIST
64076: LIST
64077: LIST
64078: LIST
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: LIST
64091: LIST
64092: LIST
64093: LIST
64094: LIST
64095: LIST
64096: LIST
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: LIST
64102: LIST
64103: LIST
64104: LIST
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
64111: LD_ADDR_VAR 0 32
64115: PUSH
64116: LD_INT 4
64118: NEG
64119: PUSH
64120: LD_INT 0
64122: PUSH
64123: EMPTY
64124: LIST
64125: LIST
64126: PUSH
64127: LD_INT 4
64129: NEG
64130: PUSH
64131: LD_INT 1
64133: NEG
64134: PUSH
64135: EMPTY
64136: LIST
64137: LIST
64138: PUSH
64139: LD_INT 3
64141: NEG
64142: PUSH
64143: LD_INT 0
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: PUSH
64150: LD_INT 3
64152: NEG
64153: PUSH
64154: LD_INT 1
64156: PUSH
64157: EMPTY
64158: LIST
64159: LIST
64160: PUSH
64161: LD_INT 4
64163: NEG
64164: PUSH
64165: LD_INT 1
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: PUSH
64172: LD_INT 5
64174: NEG
64175: PUSH
64176: LD_INT 0
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: PUSH
64183: LD_INT 5
64185: NEG
64186: PUSH
64187: LD_INT 1
64189: NEG
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: PUSH
64195: LD_INT 5
64197: NEG
64198: PUSH
64199: LD_INT 2
64201: NEG
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: PUSH
64207: LD_INT 3
64209: NEG
64210: PUSH
64211: LD_INT 2
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PUSH
64218: LD_INT 3
64220: NEG
64221: PUSH
64222: LD_INT 3
64224: NEG
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: LD_INT 3
64232: NEG
64233: PUSH
64234: LD_INT 4
64236: NEG
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: PUSH
64242: LD_INT 2
64244: NEG
64245: PUSH
64246: LD_INT 3
64248: NEG
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: PUSH
64254: LD_INT 2
64256: NEG
64257: PUSH
64258: LD_INT 2
64260: NEG
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: PUSH
64266: LD_INT 3
64268: NEG
64269: PUSH
64270: LD_INT 2
64272: NEG
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: PUSH
64278: LD_INT 4
64280: NEG
64281: PUSH
64282: LD_INT 3
64284: NEG
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: LD_INT 4
64292: NEG
64293: PUSH
64294: LD_INT 4
64296: NEG
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: LD_INT 2
64304: NEG
64305: PUSH
64306: LD_INT 4
64308: NEG
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 4
64316: NEG
64317: PUSH
64318: LD_INT 2
64320: NEG
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: LD_INT 0
64328: PUSH
64329: LD_INT 4
64331: NEG
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: LD_INT 0
64339: PUSH
64340: LD_INT 5
64342: NEG
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: PUSH
64348: LD_INT 1
64350: PUSH
64351: LD_INT 4
64353: NEG
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: PUSH
64359: LD_INT 1
64361: PUSH
64362: LD_INT 3
64364: NEG
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: LD_INT 0
64372: PUSH
64373: LD_INT 3
64375: NEG
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: LD_INT 1
64383: NEG
64384: PUSH
64385: LD_INT 4
64387: NEG
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: LD_INT 1
64395: NEG
64396: PUSH
64397: LD_INT 5
64399: NEG
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: LD_INT 2
64407: PUSH
64408: LD_INT 3
64410: NEG
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: PUSH
64416: LD_INT 2
64418: NEG
64419: PUSH
64420: LD_INT 5
64422: NEG
64423: PUSH
64424: EMPTY
64425: LIST
64426: LIST
64427: PUSH
64428: LD_INT 3
64430: PUSH
64431: LD_INT 0
64433: PUSH
64434: EMPTY
64435: LIST
64436: LIST
64437: PUSH
64438: LD_INT 3
64440: PUSH
64441: LD_INT 1
64443: NEG
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: PUSH
64449: LD_INT 4
64451: PUSH
64452: LD_INT 0
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: PUSH
64459: LD_INT 4
64461: PUSH
64462: LD_INT 1
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: PUSH
64469: LD_INT 3
64471: PUSH
64472: LD_INT 1
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: PUSH
64479: LD_INT 2
64481: PUSH
64482: LD_INT 0
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: LD_INT 2
64491: PUSH
64492: LD_INT 1
64494: NEG
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: PUSH
64500: LD_INT 2
64502: PUSH
64503: LD_INT 2
64505: NEG
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: PUSH
64511: LD_INT 4
64513: PUSH
64514: LD_INT 2
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 4
64523: PUSH
64524: LD_INT 4
64526: PUSH
64527: EMPTY
64528: LIST
64529: LIST
64530: PUSH
64531: LD_INT 4
64533: PUSH
64534: LD_INT 3
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: PUSH
64541: LD_INT 5
64543: PUSH
64544: LD_INT 4
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PUSH
64551: LD_INT 5
64553: PUSH
64554: LD_INT 5
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: PUSH
64561: LD_INT 4
64563: PUSH
64564: LD_INT 5
64566: PUSH
64567: EMPTY
64568: LIST
64569: LIST
64570: PUSH
64571: LD_INT 3
64573: PUSH
64574: LD_INT 4
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: PUSH
64581: LD_INT 3
64583: PUSH
64584: LD_INT 3
64586: PUSH
64587: EMPTY
64588: LIST
64589: LIST
64590: PUSH
64591: LD_INT 5
64593: PUSH
64594: LD_INT 3
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: PUSH
64601: LD_INT 3
64603: PUSH
64604: LD_INT 5
64606: PUSH
64607: EMPTY
64608: LIST
64609: LIST
64610: PUSH
64611: EMPTY
64612: LIST
64613: LIST
64614: LIST
64615: LIST
64616: LIST
64617: LIST
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: LIST
64623: LIST
64624: LIST
64625: LIST
64626: LIST
64627: LIST
64628: LIST
64629: LIST
64630: LIST
64631: LIST
64632: LIST
64633: LIST
64634: LIST
64635: LIST
64636: LIST
64637: LIST
64638: LIST
64639: LIST
64640: LIST
64641: LIST
64642: LIST
64643: LIST
64644: LIST
64645: LIST
64646: LIST
64647: LIST
64648: LIST
64649: LIST
64650: LIST
64651: LIST
64652: LIST
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
64658: LD_ADDR_VAR 0 33
64662: PUSH
64663: LD_INT 4
64665: NEG
64666: PUSH
64667: LD_INT 4
64669: NEG
64670: PUSH
64671: EMPTY
64672: LIST
64673: LIST
64674: PUSH
64675: LD_INT 4
64677: NEG
64678: PUSH
64679: LD_INT 5
64681: NEG
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PUSH
64687: LD_INT 3
64689: NEG
64690: PUSH
64691: LD_INT 4
64693: NEG
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 3
64701: NEG
64702: PUSH
64703: LD_INT 3
64705: NEG
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: PUSH
64711: LD_INT 4
64713: NEG
64714: PUSH
64715: LD_INT 3
64717: NEG
64718: PUSH
64719: EMPTY
64720: LIST
64721: LIST
64722: PUSH
64723: LD_INT 5
64725: NEG
64726: PUSH
64727: LD_INT 4
64729: NEG
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: PUSH
64735: LD_INT 5
64737: NEG
64738: PUSH
64739: LD_INT 5
64741: NEG
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: PUSH
64747: LD_INT 3
64749: NEG
64750: PUSH
64751: LD_INT 5
64753: NEG
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: PUSH
64759: LD_INT 5
64761: NEG
64762: PUSH
64763: LD_INT 3
64765: NEG
64766: PUSH
64767: EMPTY
64768: LIST
64769: LIST
64770: PUSH
64771: LD_INT 0
64773: PUSH
64774: LD_INT 3
64776: NEG
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: LD_INT 0
64784: PUSH
64785: LD_INT 4
64787: NEG
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: PUSH
64793: LD_INT 1
64795: PUSH
64796: LD_INT 3
64798: NEG
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: PUSH
64804: LD_INT 1
64806: PUSH
64807: LD_INT 2
64809: NEG
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: PUSH
64815: LD_INT 0
64817: PUSH
64818: LD_INT 2
64820: NEG
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: PUSH
64826: LD_INT 1
64828: NEG
64829: PUSH
64830: LD_INT 3
64832: NEG
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: PUSH
64838: LD_INT 1
64840: NEG
64841: PUSH
64842: LD_INT 4
64844: NEG
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: LD_INT 2
64852: PUSH
64853: LD_INT 2
64855: NEG
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: PUSH
64861: LD_INT 2
64863: NEG
64864: PUSH
64865: LD_INT 4
64867: NEG
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: PUSH
64873: LD_INT 4
64875: PUSH
64876: LD_INT 0
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: PUSH
64883: LD_INT 4
64885: PUSH
64886: LD_INT 1
64888: NEG
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: LD_INT 5
64896: PUSH
64897: LD_INT 0
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: LD_INT 5
64906: PUSH
64907: LD_INT 1
64909: PUSH
64910: EMPTY
64911: LIST
64912: LIST
64913: PUSH
64914: LD_INT 4
64916: PUSH
64917: LD_INT 1
64919: PUSH
64920: EMPTY
64921: LIST
64922: LIST
64923: PUSH
64924: LD_INT 3
64926: PUSH
64927: LD_INT 0
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: PUSH
64934: LD_INT 3
64936: PUSH
64937: LD_INT 1
64939: NEG
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: PUSH
64945: LD_INT 3
64947: PUSH
64948: LD_INT 2
64950: NEG
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: PUSH
64956: LD_INT 5
64958: PUSH
64959: LD_INT 2
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: PUSH
64966: LD_INT 3
64968: PUSH
64969: LD_INT 3
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: PUSH
64976: LD_INT 3
64978: PUSH
64979: LD_INT 2
64981: PUSH
64982: EMPTY
64983: LIST
64984: LIST
64985: PUSH
64986: LD_INT 4
64988: PUSH
64989: LD_INT 3
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: PUSH
64996: LD_INT 4
64998: PUSH
64999: LD_INT 4
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: PUSH
65006: LD_INT 3
65008: PUSH
65009: LD_INT 4
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: PUSH
65016: LD_INT 2
65018: PUSH
65019: LD_INT 3
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: PUSH
65026: LD_INT 2
65028: PUSH
65029: LD_INT 2
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: PUSH
65036: LD_INT 4
65038: PUSH
65039: LD_INT 2
65041: PUSH
65042: EMPTY
65043: LIST
65044: LIST
65045: PUSH
65046: LD_INT 2
65048: PUSH
65049: LD_INT 4
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: PUSH
65056: LD_INT 0
65058: PUSH
65059: LD_INT 4
65061: PUSH
65062: EMPTY
65063: LIST
65064: LIST
65065: PUSH
65066: LD_INT 0
65068: PUSH
65069: LD_INT 3
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: PUSH
65076: LD_INT 1
65078: PUSH
65079: LD_INT 4
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: PUSH
65086: LD_INT 1
65088: PUSH
65089: LD_INT 5
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: PUSH
65096: LD_INT 0
65098: PUSH
65099: LD_INT 5
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: PUSH
65106: LD_INT 1
65108: NEG
65109: PUSH
65110: LD_INT 4
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: PUSH
65117: LD_INT 1
65119: NEG
65120: PUSH
65121: LD_INT 3
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: PUSH
65128: LD_INT 2
65130: PUSH
65131: LD_INT 5
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: PUSH
65138: LD_INT 2
65140: NEG
65141: PUSH
65142: LD_INT 3
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: PUSH
65149: EMPTY
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: LIST
65157: LIST
65158: LIST
65159: LIST
65160: LIST
65161: LIST
65162: LIST
65163: LIST
65164: LIST
65165: LIST
65166: LIST
65167: LIST
65168: LIST
65169: LIST
65170: LIST
65171: LIST
65172: LIST
65173: LIST
65174: LIST
65175: LIST
65176: LIST
65177: LIST
65178: LIST
65179: LIST
65180: LIST
65181: LIST
65182: LIST
65183: LIST
65184: LIST
65185: LIST
65186: LIST
65187: LIST
65188: LIST
65189: LIST
65190: LIST
65191: LIST
65192: LIST
65193: LIST
65194: LIST
65195: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
65196: LD_ADDR_VAR 0 34
65200: PUSH
65201: LD_INT 0
65203: PUSH
65204: LD_INT 4
65206: NEG
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: PUSH
65212: LD_INT 0
65214: PUSH
65215: LD_INT 5
65217: NEG
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: PUSH
65223: LD_INT 1
65225: PUSH
65226: LD_INT 4
65228: NEG
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: PUSH
65234: LD_INT 1
65236: PUSH
65237: LD_INT 3
65239: NEG
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: LD_INT 0
65247: PUSH
65248: LD_INT 3
65250: NEG
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: PUSH
65256: LD_INT 1
65258: NEG
65259: PUSH
65260: LD_INT 4
65262: NEG
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: PUSH
65268: LD_INT 1
65270: NEG
65271: PUSH
65272: LD_INT 5
65274: NEG
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: PUSH
65280: LD_INT 2
65282: PUSH
65283: LD_INT 3
65285: NEG
65286: PUSH
65287: EMPTY
65288: LIST
65289: LIST
65290: PUSH
65291: LD_INT 2
65293: NEG
65294: PUSH
65295: LD_INT 5
65297: NEG
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: PUSH
65303: LD_INT 3
65305: PUSH
65306: LD_INT 0
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: PUSH
65313: LD_INT 3
65315: PUSH
65316: LD_INT 1
65318: NEG
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: PUSH
65324: LD_INT 4
65326: PUSH
65327: LD_INT 0
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: PUSH
65334: LD_INT 4
65336: PUSH
65337: LD_INT 1
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: PUSH
65344: LD_INT 3
65346: PUSH
65347: LD_INT 1
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: PUSH
65354: LD_INT 2
65356: PUSH
65357: LD_INT 0
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: PUSH
65364: LD_INT 2
65366: PUSH
65367: LD_INT 1
65369: NEG
65370: PUSH
65371: EMPTY
65372: LIST
65373: LIST
65374: PUSH
65375: LD_INT 2
65377: PUSH
65378: LD_INT 2
65380: NEG
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: PUSH
65386: LD_INT 4
65388: PUSH
65389: LD_INT 2
65391: PUSH
65392: EMPTY
65393: LIST
65394: LIST
65395: PUSH
65396: LD_INT 4
65398: PUSH
65399: LD_INT 4
65401: PUSH
65402: EMPTY
65403: LIST
65404: LIST
65405: PUSH
65406: LD_INT 4
65408: PUSH
65409: LD_INT 3
65411: PUSH
65412: EMPTY
65413: LIST
65414: LIST
65415: PUSH
65416: LD_INT 5
65418: PUSH
65419: LD_INT 4
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: PUSH
65426: LD_INT 5
65428: PUSH
65429: LD_INT 5
65431: PUSH
65432: EMPTY
65433: LIST
65434: LIST
65435: PUSH
65436: LD_INT 4
65438: PUSH
65439: LD_INT 5
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: LD_INT 3
65448: PUSH
65449: LD_INT 4
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: PUSH
65456: LD_INT 3
65458: PUSH
65459: LD_INT 3
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: PUSH
65466: LD_INT 5
65468: PUSH
65469: LD_INT 3
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: PUSH
65476: LD_INT 3
65478: PUSH
65479: LD_INT 5
65481: PUSH
65482: EMPTY
65483: LIST
65484: LIST
65485: PUSH
65486: LD_INT 0
65488: PUSH
65489: LD_INT 3
65491: PUSH
65492: EMPTY
65493: LIST
65494: LIST
65495: PUSH
65496: LD_INT 0
65498: PUSH
65499: LD_INT 2
65501: PUSH
65502: EMPTY
65503: LIST
65504: LIST
65505: PUSH
65506: LD_INT 1
65508: PUSH
65509: LD_INT 3
65511: PUSH
65512: EMPTY
65513: LIST
65514: LIST
65515: PUSH
65516: LD_INT 1
65518: PUSH
65519: LD_INT 4
65521: PUSH
65522: EMPTY
65523: LIST
65524: LIST
65525: PUSH
65526: LD_INT 0
65528: PUSH
65529: LD_INT 4
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: PUSH
65536: LD_INT 1
65538: NEG
65539: PUSH
65540: LD_INT 3
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PUSH
65547: LD_INT 1
65549: NEG
65550: PUSH
65551: LD_INT 2
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: PUSH
65558: LD_INT 2
65560: PUSH
65561: LD_INT 4
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: PUSH
65568: LD_INT 2
65570: NEG
65571: PUSH
65572: LD_INT 2
65574: PUSH
65575: EMPTY
65576: LIST
65577: LIST
65578: PUSH
65579: LD_INT 4
65581: NEG
65582: PUSH
65583: LD_INT 0
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: PUSH
65590: LD_INT 4
65592: NEG
65593: PUSH
65594: LD_INT 1
65596: NEG
65597: PUSH
65598: EMPTY
65599: LIST
65600: LIST
65601: PUSH
65602: LD_INT 3
65604: NEG
65605: PUSH
65606: LD_INT 0
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 3
65615: NEG
65616: PUSH
65617: LD_INT 1
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: PUSH
65624: LD_INT 4
65626: NEG
65627: PUSH
65628: LD_INT 1
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: LD_INT 5
65637: NEG
65638: PUSH
65639: LD_INT 0
65641: PUSH
65642: EMPTY
65643: LIST
65644: LIST
65645: PUSH
65646: LD_INT 5
65648: NEG
65649: PUSH
65650: LD_INT 1
65652: NEG
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: LD_INT 5
65660: NEG
65661: PUSH
65662: LD_INT 2
65664: NEG
65665: PUSH
65666: EMPTY
65667: LIST
65668: LIST
65669: PUSH
65670: LD_INT 3
65672: NEG
65673: PUSH
65674: LD_INT 2
65676: PUSH
65677: EMPTY
65678: LIST
65679: LIST
65680: PUSH
65681: EMPTY
65682: LIST
65683: LIST
65684: LIST
65685: LIST
65686: LIST
65687: LIST
65688: LIST
65689: LIST
65690: LIST
65691: LIST
65692: LIST
65693: LIST
65694: LIST
65695: LIST
65696: LIST
65697: LIST
65698: LIST
65699: LIST
65700: LIST
65701: LIST
65702: LIST
65703: LIST
65704: LIST
65705: LIST
65706: LIST
65707: LIST
65708: LIST
65709: LIST
65710: LIST
65711: LIST
65712: LIST
65713: LIST
65714: LIST
65715: LIST
65716: LIST
65717: LIST
65718: LIST
65719: LIST
65720: LIST
65721: LIST
65722: LIST
65723: LIST
65724: LIST
65725: LIST
65726: LIST
65727: ST_TO_ADDR
// end ; end ;
65728: GO 65731
65730: POP
// case btype of b_depot , b_warehouse :
65731: LD_VAR 0 1
65735: PUSH
65736: LD_INT 0
65738: DOUBLE
65739: EQUAL
65740: IFTRUE 65750
65742: LD_INT 1
65744: DOUBLE
65745: EQUAL
65746: IFTRUE 65750
65748: GO 65951
65750: POP
// case nation of nation_american :
65751: LD_VAR 0 5
65755: PUSH
65756: LD_INT 1
65758: DOUBLE
65759: EQUAL
65760: IFTRUE 65764
65762: GO 65820
65764: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
65765: LD_ADDR_VAR 0 9
65769: PUSH
65770: LD_VAR 0 11
65774: PUSH
65775: LD_VAR 0 12
65779: PUSH
65780: LD_VAR 0 13
65784: PUSH
65785: LD_VAR 0 14
65789: PUSH
65790: LD_VAR 0 15
65794: PUSH
65795: LD_VAR 0 16
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: LIST
65804: LIST
65805: LIST
65806: LIST
65807: PUSH
65808: LD_VAR 0 4
65812: PUSH
65813: LD_INT 1
65815: PLUS
65816: ARRAY
65817: ST_TO_ADDR
65818: GO 65949
65820: LD_INT 2
65822: DOUBLE
65823: EQUAL
65824: IFTRUE 65828
65826: GO 65884
65828: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
65829: LD_ADDR_VAR 0 9
65833: PUSH
65834: LD_VAR 0 17
65838: PUSH
65839: LD_VAR 0 18
65843: PUSH
65844: LD_VAR 0 19
65848: PUSH
65849: LD_VAR 0 20
65853: PUSH
65854: LD_VAR 0 21
65858: PUSH
65859: LD_VAR 0 22
65863: PUSH
65864: EMPTY
65865: LIST
65866: LIST
65867: LIST
65868: LIST
65869: LIST
65870: LIST
65871: PUSH
65872: LD_VAR 0 4
65876: PUSH
65877: LD_INT 1
65879: PLUS
65880: ARRAY
65881: ST_TO_ADDR
65882: GO 65949
65884: LD_INT 3
65886: DOUBLE
65887: EQUAL
65888: IFTRUE 65892
65890: GO 65948
65892: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
65893: LD_ADDR_VAR 0 9
65897: PUSH
65898: LD_VAR 0 23
65902: PUSH
65903: LD_VAR 0 24
65907: PUSH
65908: LD_VAR 0 25
65912: PUSH
65913: LD_VAR 0 26
65917: PUSH
65918: LD_VAR 0 27
65922: PUSH
65923: LD_VAR 0 28
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: LIST
65932: LIST
65933: LIST
65934: LIST
65935: PUSH
65936: LD_VAR 0 4
65940: PUSH
65941: LD_INT 1
65943: PLUS
65944: ARRAY
65945: ST_TO_ADDR
65946: GO 65949
65948: POP
65949: GO 66504
65951: LD_INT 2
65953: DOUBLE
65954: EQUAL
65955: IFTRUE 65965
65957: LD_INT 3
65959: DOUBLE
65960: EQUAL
65961: IFTRUE 65965
65963: GO 66021
65965: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
65966: LD_ADDR_VAR 0 9
65970: PUSH
65971: LD_VAR 0 29
65975: PUSH
65976: LD_VAR 0 30
65980: PUSH
65981: LD_VAR 0 31
65985: PUSH
65986: LD_VAR 0 32
65990: PUSH
65991: LD_VAR 0 33
65995: PUSH
65996: LD_VAR 0 34
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: LIST
66005: LIST
66006: LIST
66007: LIST
66008: PUSH
66009: LD_VAR 0 4
66013: PUSH
66014: LD_INT 1
66016: PLUS
66017: ARRAY
66018: ST_TO_ADDR
66019: GO 66504
66021: LD_INT 16
66023: DOUBLE
66024: EQUAL
66025: IFTRUE 66083
66027: LD_INT 17
66029: DOUBLE
66030: EQUAL
66031: IFTRUE 66083
66033: LD_INT 18
66035: DOUBLE
66036: EQUAL
66037: IFTRUE 66083
66039: LD_INT 19
66041: DOUBLE
66042: EQUAL
66043: IFTRUE 66083
66045: LD_INT 22
66047: DOUBLE
66048: EQUAL
66049: IFTRUE 66083
66051: LD_INT 20
66053: DOUBLE
66054: EQUAL
66055: IFTRUE 66083
66057: LD_INT 21
66059: DOUBLE
66060: EQUAL
66061: IFTRUE 66083
66063: LD_INT 23
66065: DOUBLE
66066: EQUAL
66067: IFTRUE 66083
66069: LD_INT 24
66071: DOUBLE
66072: EQUAL
66073: IFTRUE 66083
66075: LD_INT 25
66077: DOUBLE
66078: EQUAL
66079: IFTRUE 66083
66081: GO 66139
66083: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
66084: LD_ADDR_VAR 0 9
66088: PUSH
66089: LD_VAR 0 35
66093: PUSH
66094: LD_VAR 0 36
66098: PUSH
66099: LD_VAR 0 37
66103: PUSH
66104: LD_VAR 0 38
66108: PUSH
66109: LD_VAR 0 39
66113: PUSH
66114: LD_VAR 0 40
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: PUSH
66127: LD_VAR 0 4
66131: PUSH
66132: LD_INT 1
66134: PLUS
66135: ARRAY
66136: ST_TO_ADDR
66137: GO 66504
66139: LD_INT 6
66141: DOUBLE
66142: EQUAL
66143: IFTRUE 66195
66145: LD_INT 7
66147: DOUBLE
66148: EQUAL
66149: IFTRUE 66195
66151: LD_INT 8
66153: DOUBLE
66154: EQUAL
66155: IFTRUE 66195
66157: LD_INT 13
66159: DOUBLE
66160: EQUAL
66161: IFTRUE 66195
66163: LD_INT 12
66165: DOUBLE
66166: EQUAL
66167: IFTRUE 66195
66169: LD_INT 15
66171: DOUBLE
66172: EQUAL
66173: IFTRUE 66195
66175: LD_INT 11
66177: DOUBLE
66178: EQUAL
66179: IFTRUE 66195
66181: LD_INT 14
66183: DOUBLE
66184: EQUAL
66185: IFTRUE 66195
66187: LD_INT 10
66189: DOUBLE
66190: EQUAL
66191: IFTRUE 66195
66193: GO 66251
66195: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
66196: LD_ADDR_VAR 0 9
66200: PUSH
66201: LD_VAR 0 41
66205: PUSH
66206: LD_VAR 0 42
66210: PUSH
66211: LD_VAR 0 43
66215: PUSH
66216: LD_VAR 0 44
66220: PUSH
66221: LD_VAR 0 45
66225: PUSH
66226: LD_VAR 0 46
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: LIST
66235: LIST
66236: LIST
66237: LIST
66238: PUSH
66239: LD_VAR 0 4
66243: PUSH
66244: LD_INT 1
66246: PLUS
66247: ARRAY
66248: ST_TO_ADDR
66249: GO 66504
66251: LD_INT 36
66253: DOUBLE
66254: EQUAL
66255: IFTRUE 66259
66257: GO 66315
66259: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
66260: LD_ADDR_VAR 0 9
66264: PUSH
66265: LD_VAR 0 47
66269: PUSH
66270: LD_VAR 0 48
66274: PUSH
66275: LD_VAR 0 49
66279: PUSH
66280: LD_VAR 0 50
66284: PUSH
66285: LD_VAR 0 51
66289: PUSH
66290: LD_VAR 0 52
66294: PUSH
66295: EMPTY
66296: LIST
66297: LIST
66298: LIST
66299: LIST
66300: LIST
66301: LIST
66302: PUSH
66303: LD_VAR 0 4
66307: PUSH
66308: LD_INT 1
66310: PLUS
66311: ARRAY
66312: ST_TO_ADDR
66313: GO 66504
66315: LD_INT 4
66317: DOUBLE
66318: EQUAL
66319: IFTRUE 66341
66321: LD_INT 5
66323: DOUBLE
66324: EQUAL
66325: IFTRUE 66341
66327: LD_INT 34
66329: DOUBLE
66330: EQUAL
66331: IFTRUE 66341
66333: LD_INT 37
66335: DOUBLE
66336: EQUAL
66337: IFTRUE 66341
66339: GO 66397
66341: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
66342: LD_ADDR_VAR 0 9
66346: PUSH
66347: LD_VAR 0 53
66351: PUSH
66352: LD_VAR 0 54
66356: PUSH
66357: LD_VAR 0 55
66361: PUSH
66362: LD_VAR 0 56
66366: PUSH
66367: LD_VAR 0 57
66371: PUSH
66372: LD_VAR 0 58
66376: PUSH
66377: EMPTY
66378: LIST
66379: LIST
66380: LIST
66381: LIST
66382: LIST
66383: LIST
66384: PUSH
66385: LD_VAR 0 4
66389: PUSH
66390: LD_INT 1
66392: PLUS
66393: ARRAY
66394: ST_TO_ADDR
66395: GO 66504
66397: LD_INT 31
66399: DOUBLE
66400: EQUAL
66401: IFTRUE 66447
66403: LD_INT 32
66405: DOUBLE
66406: EQUAL
66407: IFTRUE 66447
66409: LD_INT 33
66411: DOUBLE
66412: EQUAL
66413: IFTRUE 66447
66415: LD_INT 27
66417: DOUBLE
66418: EQUAL
66419: IFTRUE 66447
66421: LD_INT 26
66423: DOUBLE
66424: EQUAL
66425: IFTRUE 66447
66427: LD_INT 28
66429: DOUBLE
66430: EQUAL
66431: IFTRUE 66447
66433: LD_INT 29
66435: DOUBLE
66436: EQUAL
66437: IFTRUE 66447
66439: LD_INT 30
66441: DOUBLE
66442: EQUAL
66443: IFTRUE 66447
66445: GO 66503
66447: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
66448: LD_ADDR_VAR 0 9
66452: PUSH
66453: LD_VAR 0 59
66457: PUSH
66458: LD_VAR 0 60
66462: PUSH
66463: LD_VAR 0 61
66467: PUSH
66468: LD_VAR 0 62
66472: PUSH
66473: LD_VAR 0 63
66477: PUSH
66478: LD_VAR 0 64
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: LIST
66487: LIST
66488: LIST
66489: LIST
66490: PUSH
66491: LD_VAR 0 4
66495: PUSH
66496: LD_INT 1
66498: PLUS
66499: ARRAY
66500: ST_TO_ADDR
66501: GO 66504
66503: POP
// temp_list2 = [ ] ;
66504: LD_ADDR_VAR 0 10
66508: PUSH
66509: EMPTY
66510: ST_TO_ADDR
// for i in temp_list do
66511: LD_ADDR_VAR 0 8
66515: PUSH
66516: LD_VAR 0 9
66520: PUSH
66521: FOR_IN
66522: IFFALSE 66574
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
66524: LD_ADDR_VAR 0 10
66528: PUSH
66529: LD_VAR 0 10
66533: PUSH
66534: LD_VAR 0 8
66538: PUSH
66539: LD_INT 1
66541: ARRAY
66542: PUSH
66543: LD_VAR 0 2
66547: PLUS
66548: PUSH
66549: LD_VAR 0 8
66553: PUSH
66554: LD_INT 2
66556: ARRAY
66557: PUSH
66558: LD_VAR 0 3
66562: PLUS
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: PUSH
66568: EMPTY
66569: LIST
66570: ADD
66571: ST_TO_ADDR
66572: GO 66521
66574: POP
66575: POP
// result = temp_list2 ;
66576: LD_ADDR_VAR 0 7
66580: PUSH
66581: LD_VAR 0 10
66585: ST_TO_ADDR
// end ;
66586: LD_VAR 0 7
66590: RET
// export function EnemyInRange ( unit , dist ) ; begin
66591: LD_INT 0
66593: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
66594: LD_ADDR_VAR 0 3
66598: PUSH
66599: LD_VAR 0 1
66603: PPUSH
66604: CALL_OW 255
66608: PPUSH
66609: LD_VAR 0 1
66613: PPUSH
66614: CALL_OW 250
66618: PPUSH
66619: LD_VAR 0 1
66623: PPUSH
66624: CALL_OW 251
66628: PPUSH
66629: LD_VAR 0 2
66633: PPUSH
66634: CALL 39964 0 4
66638: PUSH
66639: LD_INT 4
66641: ARRAY
66642: ST_TO_ADDR
// end ;
66643: LD_VAR 0 3
66647: RET
// export function PlayerSeeMe ( unit ) ; begin
66648: LD_INT 0
66650: PPUSH
// result := See ( your_side , unit ) ;
66651: LD_ADDR_VAR 0 2
66655: PUSH
66656: LD_OWVAR 2
66660: PPUSH
66661: LD_VAR 0 1
66665: PPUSH
66666: CALL_OW 292
66670: ST_TO_ADDR
// end ;
66671: LD_VAR 0 2
66675: RET
// export function ReverseDir ( unit ) ; begin
66676: LD_INT 0
66678: PPUSH
// if not unit then
66679: LD_VAR 0 1
66683: NOT
66684: IFFALSE 66688
// exit ;
66686: GO 66711
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
66688: LD_ADDR_VAR 0 2
66692: PUSH
66693: LD_VAR 0 1
66697: PPUSH
66698: CALL_OW 254
66702: PUSH
66703: LD_INT 3
66705: PLUS
66706: PUSH
66707: LD_INT 6
66709: MOD
66710: ST_TO_ADDR
// end ;
66711: LD_VAR 0 2
66715: RET
// export function ReverseArray ( array ) ; var i ; begin
66716: LD_INT 0
66718: PPUSH
66719: PPUSH
// if not array then
66720: LD_VAR 0 1
66724: NOT
66725: IFFALSE 66729
// exit ;
66727: GO 66784
// result := [ ] ;
66729: LD_ADDR_VAR 0 2
66733: PUSH
66734: EMPTY
66735: ST_TO_ADDR
// for i := array downto 1 do
66736: LD_ADDR_VAR 0 3
66740: PUSH
66741: DOUBLE
66742: LD_VAR 0 1
66746: INC
66747: ST_TO_ADDR
66748: LD_INT 1
66750: PUSH
66751: FOR_DOWNTO
66752: IFFALSE 66782
// result := Join ( result , array [ i ] ) ;
66754: LD_ADDR_VAR 0 2
66758: PUSH
66759: LD_VAR 0 2
66763: PPUSH
66764: LD_VAR 0 1
66768: PUSH
66769: LD_VAR 0 3
66773: ARRAY
66774: PPUSH
66775: CALL 71429 0 2
66779: ST_TO_ADDR
66780: GO 66751
66782: POP
66783: POP
// end ;
66784: LD_VAR 0 2
66788: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
66789: LD_INT 0
66791: PPUSH
66792: PPUSH
66793: PPUSH
66794: PPUSH
66795: PPUSH
66796: PPUSH
// if not unit or not hexes then
66797: LD_VAR 0 1
66801: NOT
66802: PUSH
66803: LD_VAR 0 2
66807: NOT
66808: OR
66809: IFFALSE 66813
// exit ;
66811: GO 66936
// dist := 9999 ;
66813: LD_ADDR_VAR 0 5
66817: PUSH
66818: LD_INT 9999
66820: ST_TO_ADDR
// for i = 1 to hexes do
66821: LD_ADDR_VAR 0 4
66825: PUSH
66826: DOUBLE
66827: LD_INT 1
66829: DEC
66830: ST_TO_ADDR
66831: LD_VAR 0 2
66835: PUSH
66836: FOR_TO
66837: IFFALSE 66924
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
66839: LD_ADDR_VAR 0 6
66843: PUSH
66844: LD_VAR 0 1
66848: PPUSH
66849: LD_VAR 0 2
66853: PUSH
66854: LD_VAR 0 4
66858: ARRAY
66859: PUSH
66860: LD_INT 1
66862: ARRAY
66863: PPUSH
66864: LD_VAR 0 2
66868: PUSH
66869: LD_VAR 0 4
66873: ARRAY
66874: PUSH
66875: LD_INT 2
66877: ARRAY
66878: PPUSH
66879: CALL_OW 297
66883: ST_TO_ADDR
// if tdist < dist then
66884: LD_VAR 0 6
66888: PUSH
66889: LD_VAR 0 5
66893: LESS
66894: IFFALSE 66922
// begin hex := hexes [ i ] ;
66896: LD_ADDR_VAR 0 8
66900: PUSH
66901: LD_VAR 0 2
66905: PUSH
66906: LD_VAR 0 4
66910: ARRAY
66911: ST_TO_ADDR
// dist := tdist ;
66912: LD_ADDR_VAR 0 5
66916: PUSH
66917: LD_VAR 0 6
66921: ST_TO_ADDR
// end ; end ;
66922: GO 66836
66924: POP
66925: POP
// result := hex ;
66926: LD_ADDR_VAR 0 3
66930: PUSH
66931: LD_VAR 0 8
66935: ST_TO_ADDR
// end ;
66936: LD_VAR 0 3
66940: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
66941: LD_INT 0
66943: PPUSH
66944: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
66945: LD_VAR 0 1
66949: NOT
66950: PUSH
66951: LD_VAR 0 1
66955: PUSH
66956: LD_INT 21
66958: PUSH
66959: LD_INT 2
66961: PUSH
66962: EMPTY
66963: LIST
66964: LIST
66965: PUSH
66966: LD_INT 23
66968: PUSH
66969: LD_INT 2
66971: PUSH
66972: EMPTY
66973: LIST
66974: LIST
66975: PUSH
66976: EMPTY
66977: LIST
66978: LIST
66979: PPUSH
66980: CALL_OW 69
66984: IN
66985: NOT
66986: OR
66987: IFFALSE 66991
// exit ;
66989: GO 67038
// for i = 1 to 3 do
66991: LD_ADDR_VAR 0 3
66995: PUSH
66996: DOUBLE
66997: LD_INT 1
66999: DEC
67000: ST_TO_ADDR
67001: LD_INT 3
67003: PUSH
67004: FOR_TO
67005: IFFALSE 67036
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
67007: LD_VAR 0 1
67011: PPUSH
67012: CALL_OW 250
67016: PPUSH
67017: LD_VAR 0 1
67021: PPUSH
67022: CALL_OW 251
67026: PPUSH
67027: LD_INT 1
67029: PPUSH
67030: CALL_OW 453
67034: GO 67004
67036: POP
67037: POP
// end ;
67038: LD_VAR 0 2
67042: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
67043: LD_INT 0
67045: PPUSH
67046: PPUSH
67047: PPUSH
67048: PPUSH
67049: PPUSH
67050: PPUSH
// if not unit or not enemy_unit then
67051: LD_VAR 0 1
67055: NOT
67056: PUSH
67057: LD_VAR 0 2
67061: NOT
67062: OR
67063: IFFALSE 67067
// exit ;
67065: GO 67534
// if GetLives ( i ) < 250 then
67067: LD_VAR 0 4
67071: PPUSH
67072: CALL_OW 256
67076: PUSH
67077: LD_INT 250
67079: LESS
67080: IFFALSE 67093
// begin ComAutodestruct ( i ) ;
67082: LD_VAR 0 4
67086: PPUSH
67087: CALL 66941 0 1
// exit ;
67091: GO 67534
// end ; x := GetX ( enemy_unit ) ;
67093: LD_ADDR_VAR 0 7
67097: PUSH
67098: LD_VAR 0 2
67102: PPUSH
67103: CALL_OW 250
67107: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
67108: LD_ADDR_VAR 0 8
67112: PUSH
67113: LD_VAR 0 2
67117: PPUSH
67118: CALL_OW 251
67122: ST_TO_ADDR
// if not x or not y then
67123: LD_VAR 0 7
67127: NOT
67128: PUSH
67129: LD_VAR 0 8
67133: NOT
67134: OR
67135: IFFALSE 67139
// exit ;
67137: GO 67534
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
67139: LD_ADDR_VAR 0 6
67143: PUSH
67144: LD_VAR 0 7
67148: PPUSH
67149: LD_INT 0
67151: PPUSH
67152: LD_INT 4
67154: PPUSH
67155: CALL_OW 272
67159: PUSH
67160: LD_VAR 0 8
67164: PPUSH
67165: LD_INT 0
67167: PPUSH
67168: LD_INT 4
67170: PPUSH
67171: CALL_OW 273
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: LD_VAR 0 7
67184: PPUSH
67185: LD_INT 1
67187: PPUSH
67188: LD_INT 4
67190: PPUSH
67191: CALL_OW 272
67195: PUSH
67196: LD_VAR 0 8
67200: PPUSH
67201: LD_INT 1
67203: PPUSH
67204: LD_INT 4
67206: PPUSH
67207: CALL_OW 273
67211: PUSH
67212: EMPTY
67213: LIST
67214: LIST
67215: PUSH
67216: LD_VAR 0 7
67220: PPUSH
67221: LD_INT 2
67223: PPUSH
67224: LD_INT 4
67226: PPUSH
67227: CALL_OW 272
67231: PUSH
67232: LD_VAR 0 8
67236: PPUSH
67237: LD_INT 2
67239: PPUSH
67240: LD_INT 4
67242: PPUSH
67243: CALL_OW 273
67247: PUSH
67248: EMPTY
67249: LIST
67250: LIST
67251: PUSH
67252: LD_VAR 0 7
67256: PPUSH
67257: LD_INT 3
67259: PPUSH
67260: LD_INT 4
67262: PPUSH
67263: CALL_OW 272
67267: PUSH
67268: LD_VAR 0 8
67272: PPUSH
67273: LD_INT 3
67275: PPUSH
67276: LD_INT 4
67278: PPUSH
67279: CALL_OW 273
67283: PUSH
67284: EMPTY
67285: LIST
67286: LIST
67287: PUSH
67288: LD_VAR 0 7
67292: PPUSH
67293: LD_INT 4
67295: PPUSH
67296: LD_INT 4
67298: PPUSH
67299: CALL_OW 272
67303: PUSH
67304: LD_VAR 0 8
67308: PPUSH
67309: LD_INT 4
67311: PPUSH
67312: LD_INT 4
67314: PPUSH
67315: CALL_OW 273
67319: PUSH
67320: EMPTY
67321: LIST
67322: LIST
67323: PUSH
67324: LD_VAR 0 7
67328: PPUSH
67329: LD_INT 5
67331: PPUSH
67332: LD_INT 4
67334: PPUSH
67335: CALL_OW 272
67339: PUSH
67340: LD_VAR 0 8
67344: PPUSH
67345: LD_INT 5
67347: PPUSH
67348: LD_INT 4
67350: PPUSH
67351: CALL_OW 273
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: PUSH
67360: EMPTY
67361: LIST
67362: LIST
67363: LIST
67364: LIST
67365: LIST
67366: LIST
67367: ST_TO_ADDR
// for i = tmp downto 1 do
67368: LD_ADDR_VAR 0 4
67372: PUSH
67373: DOUBLE
67374: LD_VAR 0 6
67378: INC
67379: ST_TO_ADDR
67380: LD_INT 1
67382: PUSH
67383: FOR_DOWNTO
67384: IFFALSE 67485
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
67386: LD_VAR 0 6
67390: PUSH
67391: LD_VAR 0 4
67395: ARRAY
67396: PUSH
67397: LD_INT 1
67399: ARRAY
67400: PPUSH
67401: LD_VAR 0 6
67405: PUSH
67406: LD_VAR 0 4
67410: ARRAY
67411: PUSH
67412: LD_INT 2
67414: ARRAY
67415: PPUSH
67416: CALL_OW 488
67420: NOT
67421: PUSH
67422: LD_VAR 0 6
67426: PUSH
67427: LD_VAR 0 4
67431: ARRAY
67432: PUSH
67433: LD_INT 1
67435: ARRAY
67436: PPUSH
67437: LD_VAR 0 6
67441: PUSH
67442: LD_VAR 0 4
67446: ARRAY
67447: PUSH
67448: LD_INT 2
67450: ARRAY
67451: PPUSH
67452: CALL_OW 428
67456: PUSH
67457: LD_INT 0
67459: NONEQUAL
67460: OR
67461: IFFALSE 67483
// tmp := Delete ( tmp , i ) ;
67463: LD_ADDR_VAR 0 6
67467: PUSH
67468: LD_VAR 0 6
67472: PPUSH
67473: LD_VAR 0 4
67477: PPUSH
67478: CALL_OW 3
67482: ST_TO_ADDR
67483: GO 67383
67485: POP
67486: POP
// j := GetClosestHex ( unit , tmp ) ;
67487: LD_ADDR_VAR 0 5
67491: PUSH
67492: LD_VAR 0 1
67496: PPUSH
67497: LD_VAR 0 6
67501: PPUSH
67502: CALL 66789 0 2
67506: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
67507: LD_VAR 0 1
67511: PPUSH
67512: LD_VAR 0 5
67516: PUSH
67517: LD_INT 1
67519: ARRAY
67520: PPUSH
67521: LD_VAR 0 5
67525: PUSH
67526: LD_INT 2
67528: ARRAY
67529: PPUSH
67530: CALL_OW 111
// end ;
67534: LD_VAR 0 3
67538: RET
// export function PrepareApemanSoldier ( ) ; begin
67539: LD_INT 0
67541: PPUSH
// uc_nation := 0 ;
67542: LD_ADDR_OWVAR 21
67546: PUSH
67547: LD_INT 0
67549: ST_TO_ADDR
// hc_sex := sex_male ;
67550: LD_ADDR_OWVAR 27
67554: PUSH
67555: LD_INT 1
67557: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
67558: LD_ADDR_OWVAR 28
67562: PUSH
67563: LD_INT 15
67565: ST_TO_ADDR
// hc_gallery :=  ;
67566: LD_ADDR_OWVAR 33
67570: PUSH
67571: LD_STRING 
67573: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67574: LD_ADDR_OWVAR 31
67578: PUSH
67579: LD_INT 0
67581: PPUSH
67582: LD_INT 3
67584: PPUSH
67585: CALL_OW 12
67589: PUSH
67590: LD_INT 0
67592: PPUSH
67593: LD_INT 3
67595: PPUSH
67596: CALL_OW 12
67600: PUSH
67601: LD_INT 0
67603: PUSH
67604: LD_INT 0
67606: PUSH
67607: EMPTY
67608: LIST
67609: LIST
67610: LIST
67611: LIST
67612: ST_TO_ADDR
// end ;
67613: LD_VAR 0 1
67617: RET
// export function PrepareApemanEngineer ( ) ; begin
67618: LD_INT 0
67620: PPUSH
// uc_nation := 0 ;
67621: LD_ADDR_OWVAR 21
67625: PUSH
67626: LD_INT 0
67628: ST_TO_ADDR
// hc_sex := sex_male ;
67629: LD_ADDR_OWVAR 27
67633: PUSH
67634: LD_INT 1
67636: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
67637: LD_ADDR_OWVAR 28
67641: PUSH
67642: LD_INT 16
67644: ST_TO_ADDR
// hc_gallery :=  ;
67645: LD_ADDR_OWVAR 33
67649: PUSH
67650: LD_STRING 
67652: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67653: LD_ADDR_OWVAR 31
67657: PUSH
67658: LD_INT 0
67660: PPUSH
67661: LD_INT 3
67663: PPUSH
67664: CALL_OW 12
67668: PUSH
67669: LD_INT 0
67671: PPUSH
67672: LD_INT 3
67674: PPUSH
67675: CALL_OW 12
67679: PUSH
67680: LD_INT 0
67682: PUSH
67683: LD_INT 0
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: LIST
67690: LIST
67691: ST_TO_ADDR
// end ;
67692: LD_VAR 0 1
67696: RET
// export function PrepareApeman ( agressivity ) ; begin
67697: LD_INT 0
67699: PPUSH
// uc_side := 0 ;
67700: LD_ADDR_OWVAR 20
67704: PUSH
67705: LD_INT 0
67707: ST_TO_ADDR
// uc_nation := 0 ;
67708: LD_ADDR_OWVAR 21
67712: PUSH
67713: LD_INT 0
67715: ST_TO_ADDR
// hc_sex := sex_male ;
67716: LD_ADDR_OWVAR 27
67720: PUSH
67721: LD_INT 1
67723: ST_TO_ADDR
// hc_class := class_apeman ;
67724: LD_ADDR_OWVAR 28
67728: PUSH
67729: LD_INT 12
67731: ST_TO_ADDR
// hc_gallery :=  ;
67732: LD_ADDR_OWVAR 33
67736: PUSH
67737: LD_STRING 
67739: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
67740: LD_ADDR_OWVAR 35
67744: PUSH
67745: LD_VAR 0 1
67749: NEG
67750: PPUSH
67751: LD_VAR 0 1
67755: PPUSH
67756: CALL_OW 12
67760: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67761: LD_ADDR_OWVAR 31
67765: PUSH
67766: LD_INT 0
67768: PPUSH
67769: LD_INT 3
67771: PPUSH
67772: CALL_OW 12
67776: PUSH
67777: LD_INT 0
67779: PPUSH
67780: LD_INT 3
67782: PPUSH
67783: CALL_OW 12
67787: PUSH
67788: LD_INT 0
67790: PUSH
67791: LD_INT 0
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: LIST
67798: LIST
67799: ST_TO_ADDR
// end ;
67800: LD_VAR 0 2
67804: RET
// export function PrepareTiger ( agressivity ) ; begin
67805: LD_INT 0
67807: PPUSH
// uc_side := 0 ;
67808: LD_ADDR_OWVAR 20
67812: PUSH
67813: LD_INT 0
67815: ST_TO_ADDR
// uc_nation := 0 ;
67816: LD_ADDR_OWVAR 21
67820: PUSH
67821: LD_INT 0
67823: ST_TO_ADDR
// hc_class := class_tiger ;
67824: LD_ADDR_OWVAR 28
67828: PUSH
67829: LD_INT 14
67831: ST_TO_ADDR
// hc_gallery :=  ;
67832: LD_ADDR_OWVAR 33
67836: PUSH
67837: LD_STRING 
67839: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
67840: LD_ADDR_OWVAR 35
67844: PUSH
67845: LD_VAR 0 1
67849: NEG
67850: PPUSH
67851: LD_VAR 0 1
67855: PPUSH
67856: CALL_OW 12
67860: ST_TO_ADDR
// end ;
67861: LD_VAR 0 2
67865: RET
// export function PrepareEnchidna ( ) ; begin
67866: LD_INT 0
67868: PPUSH
// uc_side := 0 ;
67869: LD_ADDR_OWVAR 20
67873: PUSH
67874: LD_INT 0
67876: ST_TO_ADDR
// uc_nation := 0 ;
67877: LD_ADDR_OWVAR 21
67881: PUSH
67882: LD_INT 0
67884: ST_TO_ADDR
// hc_class := class_baggie ;
67885: LD_ADDR_OWVAR 28
67889: PUSH
67890: LD_INT 13
67892: ST_TO_ADDR
// hc_gallery :=  ;
67893: LD_ADDR_OWVAR 33
67897: PUSH
67898: LD_STRING 
67900: ST_TO_ADDR
// end ;
67901: LD_VAR 0 1
67905: RET
// export function PrepareFrog ( ) ; begin
67906: LD_INT 0
67908: PPUSH
// uc_side := 0 ;
67909: LD_ADDR_OWVAR 20
67913: PUSH
67914: LD_INT 0
67916: ST_TO_ADDR
// uc_nation := 0 ;
67917: LD_ADDR_OWVAR 21
67921: PUSH
67922: LD_INT 0
67924: ST_TO_ADDR
// hc_class := class_frog ;
67925: LD_ADDR_OWVAR 28
67929: PUSH
67930: LD_INT 19
67932: ST_TO_ADDR
// hc_gallery :=  ;
67933: LD_ADDR_OWVAR 33
67937: PUSH
67938: LD_STRING 
67940: ST_TO_ADDR
// end ;
67941: LD_VAR 0 1
67945: RET
// export function PrepareFish ( ) ; begin
67946: LD_INT 0
67948: PPUSH
// uc_side := 0 ;
67949: LD_ADDR_OWVAR 20
67953: PUSH
67954: LD_INT 0
67956: ST_TO_ADDR
// uc_nation := 0 ;
67957: LD_ADDR_OWVAR 21
67961: PUSH
67962: LD_INT 0
67964: ST_TO_ADDR
// hc_class := class_fish ;
67965: LD_ADDR_OWVAR 28
67969: PUSH
67970: LD_INT 20
67972: ST_TO_ADDR
// hc_gallery :=  ;
67973: LD_ADDR_OWVAR 33
67977: PUSH
67978: LD_STRING 
67980: ST_TO_ADDR
// end ;
67981: LD_VAR 0 1
67985: RET
// export function PrepareBird ( ) ; begin
67986: LD_INT 0
67988: PPUSH
// uc_side := 0 ;
67989: LD_ADDR_OWVAR 20
67993: PUSH
67994: LD_INT 0
67996: ST_TO_ADDR
// uc_nation := 0 ;
67997: LD_ADDR_OWVAR 21
68001: PUSH
68002: LD_INT 0
68004: ST_TO_ADDR
// hc_class := class_phororhacos ;
68005: LD_ADDR_OWVAR 28
68009: PUSH
68010: LD_INT 18
68012: ST_TO_ADDR
// hc_gallery :=  ;
68013: LD_ADDR_OWVAR 33
68017: PUSH
68018: LD_STRING 
68020: ST_TO_ADDR
// end ;
68021: LD_VAR 0 1
68025: RET
// export function PrepareHorse ( ) ; begin
68026: LD_INT 0
68028: PPUSH
// uc_side := 0 ;
68029: LD_ADDR_OWVAR 20
68033: PUSH
68034: LD_INT 0
68036: ST_TO_ADDR
// uc_nation := 0 ;
68037: LD_ADDR_OWVAR 21
68041: PUSH
68042: LD_INT 0
68044: ST_TO_ADDR
// hc_class := class_horse ;
68045: LD_ADDR_OWVAR 28
68049: PUSH
68050: LD_INT 21
68052: ST_TO_ADDR
// hc_gallery :=  ;
68053: LD_ADDR_OWVAR 33
68057: PUSH
68058: LD_STRING 
68060: ST_TO_ADDR
// end ;
68061: LD_VAR 0 1
68065: RET
// export function PrepareMastodont ( ) ; begin
68066: LD_INT 0
68068: PPUSH
// uc_side := 0 ;
68069: LD_ADDR_OWVAR 20
68073: PUSH
68074: LD_INT 0
68076: ST_TO_ADDR
// uc_nation := 0 ;
68077: LD_ADDR_OWVAR 21
68081: PUSH
68082: LD_INT 0
68084: ST_TO_ADDR
// vc_chassis := class_mastodont ;
68085: LD_ADDR_OWVAR 37
68089: PUSH
68090: LD_INT 31
68092: ST_TO_ADDR
// vc_control := control_rider ;
68093: LD_ADDR_OWVAR 38
68097: PUSH
68098: LD_INT 4
68100: ST_TO_ADDR
// end ;
68101: LD_VAR 0 1
68105: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
68106: LD_INT 0
68108: PPUSH
68109: PPUSH
68110: PPUSH
// uc_side = 0 ;
68111: LD_ADDR_OWVAR 20
68115: PUSH
68116: LD_INT 0
68118: ST_TO_ADDR
// uc_nation = 0 ;
68119: LD_ADDR_OWVAR 21
68123: PUSH
68124: LD_INT 0
68126: ST_TO_ADDR
// InitHc_All ( ) ;
68127: CALL_OW 584
// InitVc ;
68131: CALL_OW 20
// if mastodonts then
68135: LD_VAR 0 6
68139: IFFALSE 68206
// for i = 1 to mastodonts do
68141: LD_ADDR_VAR 0 11
68145: PUSH
68146: DOUBLE
68147: LD_INT 1
68149: DEC
68150: ST_TO_ADDR
68151: LD_VAR 0 6
68155: PUSH
68156: FOR_TO
68157: IFFALSE 68204
// begin vc_chassis := 31 ;
68159: LD_ADDR_OWVAR 37
68163: PUSH
68164: LD_INT 31
68166: ST_TO_ADDR
// vc_control := control_rider ;
68167: LD_ADDR_OWVAR 38
68171: PUSH
68172: LD_INT 4
68174: ST_TO_ADDR
// animal := CreateVehicle ;
68175: LD_ADDR_VAR 0 12
68179: PUSH
68180: CALL_OW 45
68184: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68185: LD_VAR 0 12
68189: PPUSH
68190: LD_VAR 0 8
68194: PPUSH
68195: LD_INT 0
68197: PPUSH
68198: CALL 70334 0 3
// end ;
68202: GO 68156
68204: POP
68205: POP
// if horses then
68206: LD_VAR 0 5
68210: IFFALSE 68277
// for i = 1 to horses do
68212: LD_ADDR_VAR 0 11
68216: PUSH
68217: DOUBLE
68218: LD_INT 1
68220: DEC
68221: ST_TO_ADDR
68222: LD_VAR 0 5
68226: PUSH
68227: FOR_TO
68228: IFFALSE 68275
// begin hc_class := 21 ;
68230: LD_ADDR_OWVAR 28
68234: PUSH
68235: LD_INT 21
68237: ST_TO_ADDR
// hc_gallery :=  ;
68238: LD_ADDR_OWVAR 33
68242: PUSH
68243: LD_STRING 
68245: ST_TO_ADDR
// animal := CreateHuman ;
68246: LD_ADDR_VAR 0 12
68250: PUSH
68251: CALL_OW 44
68255: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68256: LD_VAR 0 12
68260: PPUSH
68261: LD_VAR 0 8
68265: PPUSH
68266: LD_INT 0
68268: PPUSH
68269: CALL 70334 0 3
// end ;
68273: GO 68227
68275: POP
68276: POP
// if birds then
68277: LD_VAR 0 1
68281: IFFALSE 68348
// for i = 1 to birds do
68283: LD_ADDR_VAR 0 11
68287: PUSH
68288: DOUBLE
68289: LD_INT 1
68291: DEC
68292: ST_TO_ADDR
68293: LD_VAR 0 1
68297: PUSH
68298: FOR_TO
68299: IFFALSE 68346
// begin hc_class := 18 ;
68301: LD_ADDR_OWVAR 28
68305: PUSH
68306: LD_INT 18
68308: ST_TO_ADDR
// hc_gallery =  ;
68309: LD_ADDR_OWVAR 33
68313: PUSH
68314: LD_STRING 
68316: ST_TO_ADDR
// animal := CreateHuman ;
68317: LD_ADDR_VAR 0 12
68321: PUSH
68322: CALL_OW 44
68326: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68327: LD_VAR 0 12
68331: PPUSH
68332: LD_VAR 0 8
68336: PPUSH
68337: LD_INT 0
68339: PPUSH
68340: CALL 70334 0 3
// end ;
68344: GO 68298
68346: POP
68347: POP
// if tigers then
68348: LD_VAR 0 2
68352: IFFALSE 68436
// for i = 1 to tigers do
68354: LD_ADDR_VAR 0 11
68358: PUSH
68359: DOUBLE
68360: LD_INT 1
68362: DEC
68363: ST_TO_ADDR
68364: LD_VAR 0 2
68368: PUSH
68369: FOR_TO
68370: IFFALSE 68434
// begin hc_class = class_tiger ;
68372: LD_ADDR_OWVAR 28
68376: PUSH
68377: LD_INT 14
68379: ST_TO_ADDR
// hc_gallery =  ;
68380: LD_ADDR_OWVAR 33
68384: PUSH
68385: LD_STRING 
68387: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
68388: LD_ADDR_OWVAR 35
68392: PUSH
68393: LD_INT 7
68395: NEG
68396: PPUSH
68397: LD_INT 7
68399: PPUSH
68400: CALL_OW 12
68404: ST_TO_ADDR
// animal := CreateHuman ;
68405: LD_ADDR_VAR 0 12
68409: PUSH
68410: CALL_OW 44
68414: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68415: LD_VAR 0 12
68419: PPUSH
68420: LD_VAR 0 8
68424: PPUSH
68425: LD_INT 0
68427: PPUSH
68428: CALL 70334 0 3
// end ;
68432: GO 68369
68434: POP
68435: POP
// if apemans then
68436: LD_VAR 0 3
68440: IFFALSE 68563
// for i = 1 to apemans do
68442: LD_ADDR_VAR 0 11
68446: PUSH
68447: DOUBLE
68448: LD_INT 1
68450: DEC
68451: ST_TO_ADDR
68452: LD_VAR 0 3
68456: PUSH
68457: FOR_TO
68458: IFFALSE 68561
// begin hc_class = class_apeman ;
68460: LD_ADDR_OWVAR 28
68464: PUSH
68465: LD_INT 12
68467: ST_TO_ADDR
// hc_gallery =  ;
68468: LD_ADDR_OWVAR 33
68472: PUSH
68473: LD_STRING 
68475: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
68476: LD_ADDR_OWVAR 35
68480: PUSH
68481: LD_INT 2
68483: NEG
68484: PPUSH
68485: LD_INT 2
68487: PPUSH
68488: CALL_OW 12
68492: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
68493: LD_ADDR_OWVAR 31
68497: PUSH
68498: LD_INT 1
68500: PPUSH
68501: LD_INT 3
68503: PPUSH
68504: CALL_OW 12
68508: PUSH
68509: LD_INT 1
68511: PPUSH
68512: LD_INT 3
68514: PPUSH
68515: CALL_OW 12
68519: PUSH
68520: LD_INT 0
68522: PUSH
68523: LD_INT 0
68525: PUSH
68526: EMPTY
68527: LIST
68528: LIST
68529: LIST
68530: LIST
68531: ST_TO_ADDR
// animal := CreateHuman ;
68532: LD_ADDR_VAR 0 12
68536: PUSH
68537: CALL_OW 44
68541: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68542: LD_VAR 0 12
68546: PPUSH
68547: LD_VAR 0 8
68551: PPUSH
68552: LD_INT 0
68554: PPUSH
68555: CALL 70334 0 3
// end ;
68559: GO 68457
68561: POP
68562: POP
// if enchidnas then
68563: LD_VAR 0 4
68567: IFFALSE 68634
// for i = 1 to enchidnas do
68569: LD_ADDR_VAR 0 11
68573: PUSH
68574: DOUBLE
68575: LD_INT 1
68577: DEC
68578: ST_TO_ADDR
68579: LD_VAR 0 4
68583: PUSH
68584: FOR_TO
68585: IFFALSE 68632
// begin hc_class = 13 ;
68587: LD_ADDR_OWVAR 28
68591: PUSH
68592: LD_INT 13
68594: ST_TO_ADDR
// hc_gallery =  ;
68595: LD_ADDR_OWVAR 33
68599: PUSH
68600: LD_STRING 
68602: ST_TO_ADDR
// animal := CreateHuman ;
68603: LD_ADDR_VAR 0 12
68607: PUSH
68608: CALL_OW 44
68612: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68613: LD_VAR 0 12
68617: PPUSH
68618: LD_VAR 0 8
68622: PPUSH
68623: LD_INT 0
68625: PPUSH
68626: CALL 70334 0 3
// end ;
68630: GO 68584
68632: POP
68633: POP
// if fishes then
68634: LD_VAR 0 7
68638: IFFALSE 68705
// for i = 1 to fishes do
68640: LD_ADDR_VAR 0 11
68644: PUSH
68645: DOUBLE
68646: LD_INT 1
68648: DEC
68649: ST_TO_ADDR
68650: LD_VAR 0 7
68654: PUSH
68655: FOR_TO
68656: IFFALSE 68703
// begin hc_class = 20 ;
68658: LD_ADDR_OWVAR 28
68662: PUSH
68663: LD_INT 20
68665: ST_TO_ADDR
// hc_gallery =  ;
68666: LD_ADDR_OWVAR 33
68670: PUSH
68671: LD_STRING 
68673: ST_TO_ADDR
// animal := CreateHuman ;
68674: LD_ADDR_VAR 0 12
68678: PUSH
68679: CALL_OW 44
68683: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
68684: LD_VAR 0 12
68688: PPUSH
68689: LD_VAR 0 9
68693: PPUSH
68694: LD_INT 0
68696: PPUSH
68697: CALL 70334 0 3
// end ;
68701: GO 68655
68703: POP
68704: POP
// end ;
68705: LD_VAR 0 10
68709: RET
// export function WantHeal ( sci , unit ) ; begin
68710: LD_INT 0
68712: PPUSH
// if GetTaskList ( sci ) > 0 then
68713: LD_VAR 0 1
68717: PPUSH
68718: CALL_OW 437
68722: PUSH
68723: LD_INT 0
68725: GREATER
68726: IFFALSE 68796
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
68728: LD_VAR 0 1
68732: PPUSH
68733: CALL_OW 437
68737: PUSH
68738: LD_INT 1
68740: ARRAY
68741: PUSH
68742: LD_INT 1
68744: ARRAY
68745: PUSH
68746: LD_STRING l
68748: EQUAL
68749: PUSH
68750: LD_VAR 0 1
68754: PPUSH
68755: CALL_OW 437
68759: PUSH
68760: LD_INT 1
68762: ARRAY
68763: PUSH
68764: LD_INT 4
68766: ARRAY
68767: PUSH
68768: LD_VAR 0 2
68772: EQUAL
68773: AND
68774: IFFALSE 68786
// result := true else
68776: LD_ADDR_VAR 0 3
68780: PUSH
68781: LD_INT 1
68783: ST_TO_ADDR
68784: GO 68794
// result := false ;
68786: LD_ADDR_VAR 0 3
68790: PUSH
68791: LD_INT 0
68793: ST_TO_ADDR
// end else
68794: GO 68804
// result := false ;
68796: LD_ADDR_VAR 0 3
68800: PUSH
68801: LD_INT 0
68803: ST_TO_ADDR
// end ;
68804: LD_VAR 0 3
68808: RET
// export function HealTarget ( sci ) ; begin
68809: LD_INT 0
68811: PPUSH
// if not sci then
68812: LD_VAR 0 1
68816: NOT
68817: IFFALSE 68821
// exit ;
68819: GO 68886
// result := 0 ;
68821: LD_ADDR_VAR 0 2
68825: PUSH
68826: LD_INT 0
68828: ST_TO_ADDR
// if GetTaskList ( sci ) then
68829: LD_VAR 0 1
68833: PPUSH
68834: CALL_OW 437
68838: IFFALSE 68886
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
68840: LD_VAR 0 1
68844: PPUSH
68845: CALL_OW 437
68849: PUSH
68850: LD_INT 1
68852: ARRAY
68853: PUSH
68854: LD_INT 1
68856: ARRAY
68857: PUSH
68858: LD_STRING l
68860: EQUAL
68861: IFFALSE 68886
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
68863: LD_ADDR_VAR 0 2
68867: PUSH
68868: LD_VAR 0 1
68872: PPUSH
68873: CALL_OW 437
68877: PUSH
68878: LD_INT 1
68880: ARRAY
68881: PUSH
68882: LD_INT 4
68884: ARRAY
68885: ST_TO_ADDR
// end ;
68886: LD_VAR 0 2
68890: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
68891: LD_INT 0
68893: PPUSH
68894: PPUSH
68895: PPUSH
68896: PPUSH
// if not base_units then
68897: LD_VAR 0 1
68901: NOT
68902: IFFALSE 68906
// exit ;
68904: GO 68993
// result := false ;
68906: LD_ADDR_VAR 0 2
68910: PUSH
68911: LD_INT 0
68913: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
68914: LD_ADDR_VAR 0 5
68918: PUSH
68919: LD_VAR 0 1
68923: PPUSH
68924: LD_INT 21
68926: PUSH
68927: LD_INT 3
68929: PUSH
68930: EMPTY
68931: LIST
68932: LIST
68933: PPUSH
68934: CALL_OW 72
68938: ST_TO_ADDR
// if not tmp then
68939: LD_VAR 0 5
68943: NOT
68944: IFFALSE 68948
// exit ;
68946: GO 68993
// for i in tmp do
68948: LD_ADDR_VAR 0 3
68952: PUSH
68953: LD_VAR 0 5
68957: PUSH
68958: FOR_IN
68959: IFFALSE 68991
// begin result := EnemyInRange ( i , 22 ) ;
68961: LD_ADDR_VAR 0 2
68965: PUSH
68966: LD_VAR 0 3
68970: PPUSH
68971: LD_INT 22
68973: PPUSH
68974: CALL 66591 0 2
68978: ST_TO_ADDR
// if result then
68979: LD_VAR 0 2
68983: IFFALSE 68989
// exit ;
68985: POP
68986: POP
68987: GO 68993
// end ;
68989: GO 68958
68991: POP
68992: POP
// end ;
68993: LD_VAR 0 2
68997: RET
// export function FilterByTag ( units , tag ) ; begin
68998: LD_INT 0
69000: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
69001: LD_ADDR_VAR 0 3
69005: PUSH
69006: LD_VAR 0 1
69010: PPUSH
69011: LD_INT 120
69013: PUSH
69014: LD_VAR 0 2
69018: PUSH
69019: EMPTY
69020: LIST
69021: LIST
69022: PPUSH
69023: CALL_OW 72
69027: ST_TO_ADDR
// end ;
69028: LD_VAR 0 3
69032: RET
// export function IsDriver ( un ) ; begin
69033: LD_INT 0
69035: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
69036: LD_ADDR_VAR 0 2
69040: PUSH
69041: LD_VAR 0 1
69045: PUSH
69046: LD_INT 55
69048: PUSH
69049: EMPTY
69050: LIST
69051: PPUSH
69052: CALL_OW 69
69056: IN
69057: ST_TO_ADDR
// end ;
69058: LD_VAR 0 2
69062: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
69063: LD_INT 0
69065: PPUSH
69066: PPUSH
// list := [ ] ;
69067: LD_ADDR_VAR 0 5
69071: PUSH
69072: EMPTY
69073: ST_TO_ADDR
// case d of 0 :
69074: LD_VAR 0 3
69078: PUSH
69079: LD_INT 0
69081: DOUBLE
69082: EQUAL
69083: IFTRUE 69087
69085: GO 69220
69087: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
69088: LD_ADDR_VAR 0 5
69092: PUSH
69093: LD_VAR 0 1
69097: PUSH
69098: LD_INT 4
69100: MINUS
69101: PUSH
69102: LD_VAR 0 2
69106: PUSH
69107: LD_INT 4
69109: MINUS
69110: PUSH
69111: LD_INT 2
69113: PUSH
69114: EMPTY
69115: LIST
69116: LIST
69117: LIST
69118: PUSH
69119: LD_VAR 0 1
69123: PUSH
69124: LD_INT 3
69126: MINUS
69127: PUSH
69128: LD_VAR 0 2
69132: PUSH
69133: LD_INT 1
69135: PUSH
69136: EMPTY
69137: LIST
69138: LIST
69139: LIST
69140: PUSH
69141: LD_VAR 0 1
69145: PUSH
69146: LD_INT 4
69148: PLUS
69149: PUSH
69150: LD_VAR 0 2
69154: PUSH
69155: LD_INT 4
69157: PUSH
69158: EMPTY
69159: LIST
69160: LIST
69161: LIST
69162: PUSH
69163: LD_VAR 0 1
69167: PUSH
69168: LD_INT 3
69170: PLUS
69171: PUSH
69172: LD_VAR 0 2
69176: PUSH
69177: LD_INT 3
69179: PLUS
69180: PUSH
69181: LD_INT 5
69183: PUSH
69184: EMPTY
69185: LIST
69186: LIST
69187: LIST
69188: PUSH
69189: LD_VAR 0 1
69193: PUSH
69194: LD_VAR 0 2
69198: PUSH
69199: LD_INT 4
69201: PLUS
69202: PUSH
69203: LD_INT 0
69205: PUSH
69206: EMPTY
69207: LIST
69208: LIST
69209: LIST
69210: PUSH
69211: EMPTY
69212: LIST
69213: LIST
69214: LIST
69215: LIST
69216: LIST
69217: ST_TO_ADDR
// end ; 1 :
69218: GO 69918
69220: LD_INT 1
69222: DOUBLE
69223: EQUAL
69224: IFTRUE 69228
69226: GO 69361
69228: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
69229: LD_ADDR_VAR 0 5
69233: PUSH
69234: LD_VAR 0 1
69238: PUSH
69239: LD_VAR 0 2
69243: PUSH
69244: LD_INT 4
69246: MINUS
69247: PUSH
69248: LD_INT 3
69250: PUSH
69251: EMPTY
69252: LIST
69253: LIST
69254: LIST
69255: PUSH
69256: LD_VAR 0 1
69260: PUSH
69261: LD_INT 3
69263: MINUS
69264: PUSH
69265: LD_VAR 0 2
69269: PUSH
69270: LD_INT 3
69272: MINUS
69273: PUSH
69274: LD_INT 2
69276: PUSH
69277: EMPTY
69278: LIST
69279: LIST
69280: LIST
69281: PUSH
69282: LD_VAR 0 1
69286: PUSH
69287: LD_INT 4
69289: MINUS
69290: PUSH
69291: LD_VAR 0 2
69295: PUSH
69296: LD_INT 1
69298: PUSH
69299: EMPTY
69300: LIST
69301: LIST
69302: LIST
69303: PUSH
69304: LD_VAR 0 1
69308: PUSH
69309: LD_VAR 0 2
69313: PUSH
69314: LD_INT 3
69316: PLUS
69317: PUSH
69318: LD_INT 0
69320: PUSH
69321: EMPTY
69322: LIST
69323: LIST
69324: LIST
69325: PUSH
69326: LD_VAR 0 1
69330: PUSH
69331: LD_INT 4
69333: PLUS
69334: PUSH
69335: LD_VAR 0 2
69339: PUSH
69340: LD_INT 4
69342: PLUS
69343: PUSH
69344: LD_INT 5
69346: PUSH
69347: EMPTY
69348: LIST
69349: LIST
69350: LIST
69351: PUSH
69352: EMPTY
69353: LIST
69354: LIST
69355: LIST
69356: LIST
69357: LIST
69358: ST_TO_ADDR
// end ; 2 :
69359: GO 69918
69361: LD_INT 2
69363: DOUBLE
69364: EQUAL
69365: IFTRUE 69369
69367: GO 69498
69369: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
69370: LD_ADDR_VAR 0 5
69374: PUSH
69375: LD_VAR 0 1
69379: PUSH
69380: LD_VAR 0 2
69384: PUSH
69385: LD_INT 3
69387: MINUS
69388: PUSH
69389: LD_INT 3
69391: PUSH
69392: EMPTY
69393: LIST
69394: LIST
69395: LIST
69396: PUSH
69397: LD_VAR 0 1
69401: PUSH
69402: LD_INT 4
69404: PLUS
69405: PUSH
69406: LD_VAR 0 2
69410: PUSH
69411: LD_INT 4
69413: PUSH
69414: EMPTY
69415: LIST
69416: LIST
69417: LIST
69418: PUSH
69419: LD_VAR 0 1
69423: PUSH
69424: LD_VAR 0 2
69428: PUSH
69429: LD_INT 4
69431: PLUS
69432: PUSH
69433: LD_INT 0
69435: PUSH
69436: EMPTY
69437: LIST
69438: LIST
69439: LIST
69440: PUSH
69441: LD_VAR 0 1
69445: PUSH
69446: LD_INT 3
69448: MINUS
69449: PUSH
69450: LD_VAR 0 2
69454: PUSH
69455: LD_INT 1
69457: PUSH
69458: EMPTY
69459: LIST
69460: LIST
69461: LIST
69462: PUSH
69463: LD_VAR 0 1
69467: PUSH
69468: LD_INT 4
69470: MINUS
69471: PUSH
69472: LD_VAR 0 2
69476: PUSH
69477: LD_INT 4
69479: MINUS
69480: PUSH
69481: LD_INT 2
69483: PUSH
69484: EMPTY
69485: LIST
69486: LIST
69487: LIST
69488: PUSH
69489: EMPTY
69490: LIST
69491: LIST
69492: LIST
69493: LIST
69494: LIST
69495: ST_TO_ADDR
// end ; 3 :
69496: GO 69918
69498: LD_INT 3
69500: DOUBLE
69501: EQUAL
69502: IFTRUE 69506
69504: GO 69639
69506: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
69507: LD_ADDR_VAR 0 5
69511: PUSH
69512: LD_VAR 0 1
69516: PUSH
69517: LD_INT 3
69519: PLUS
69520: PUSH
69521: LD_VAR 0 2
69525: PUSH
69526: LD_INT 4
69528: PUSH
69529: EMPTY
69530: LIST
69531: LIST
69532: LIST
69533: PUSH
69534: LD_VAR 0 1
69538: PUSH
69539: LD_INT 4
69541: PLUS
69542: PUSH
69543: LD_VAR 0 2
69547: PUSH
69548: LD_INT 4
69550: PLUS
69551: PUSH
69552: LD_INT 5
69554: PUSH
69555: EMPTY
69556: LIST
69557: LIST
69558: LIST
69559: PUSH
69560: LD_VAR 0 1
69564: PUSH
69565: LD_INT 4
69567: MINUS
69568: PUSH
69569: LD_VAR 0 2
69573: PUSH
69574: LD_INT 1
69576: PUSH
69577: EMPTY
69578: LIST
69579: LIST
69580: LIST
69581: PUSH
69582: LD_VAR 0 1
69586: PUSH
69587: LD_VAR 0 2
69591: PUSH
69592: LD_INT 4
69594: MINUS
69595: PUSH
69596: LD_INT 3
69598: PUSH
69599: EMPTY
69600: LIST
69601: LIST
69602: LIST
69603: PUSH
69604: LD_VAR 0 1
69608: PUSH
69609: LD_INT 3
69611: MINUS
69612: PUSH
69613: LD_VAR 0 2
69617: PUSH
69618: LD_INT 3
69620: MINUS
69621: PUSH
69622: LD_INT 2
69624: PUSH
69625: EMPTY
69626: LIST
69627: LIST
69628: LIST
69629: PUSH
69630: EMPTY
69631: LIST
69632: LIST
69633: LIST
69634: LIST
69635: LIST
69636: ST_TO_ADDR
// end ; 4 :
69637: GO 69918
69639: LD_INT 4
69641: DOUBLE
69642: EQUAL
69643: IFTRUE 69647
69645: GO 69780
69647: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
69648: LD_ADDR_VAR 0 5
69652: PUSH
69653: LD_VAR 0 1
69657: PUSH
69658: LD_VAR 0 2
69662: PUSH
69663: LD_INT 4
69665: PLUS
69666: PUSH
69667: LD_INT 0
69669: PUSH
69670: EMPTY
69671: LIST
69672: LIST
69673: LIST
69674: PUSH
69675: LD_VAR 0 1
69679: PUSH
69680: LD_INT 3
69682: PLUS
69683: PUSH
69684: LD_VAR 0 2
69688: PUSH
69689: LD_INT 3
69691: PLUS
69692: PUSH
69693: LD_INT 5
69695: PUSH
69696: EMPTY
69697: LIST
69698: LIST
69699: LIST
69700: PUSH
69701: LD_VAR 0 1
69705: PUSH
69706: LD_INT 4
69708: PLUS
69709: PUSH
69710: LD_VAR 0 2
69714: PUSH
69715: LD_INT 4
69717: PUSH
69718: EMPTY
69719: LIST
69720: LIST
69721: LIST
69722: PUSH
69723: LD_VAR 0 1
69727: PUSH
69728: LD_VAR 0 2
69732: PUSH
69733: LD_INT 3
69735: MINUS
69736: PUSH
69737: LD_INT 3
69739: PUSH
69740: EMPTY
69741: LIST
69742: LIST
69743: LIST
69744: PUSH
69745: LD_VAR 0 1
69749: PUSH
69750: LD_INT 4
69752: MINUS
69753: PUSH
69754: LD_VAR 0 2
69758: PUSH
69759: LD_INT 4
69761: MINUS
69762: PUSH
69763: LD_INT 2
69765: PUSH
69766: EMPTY
69767: LIST
69768: LIST
69769: LIST
69770: PUSH
69771: EMPTY
69772: LIST
69773: LIST
69774: LIST
69775: LIST
69776: LIST
69777: ST_TO_ADDR
// end ; 5 :
69778: GO 69918
69780: LD_INT 5
69782: DOUBLE
69783: EQUAL
69784: IFTRUE 69788
69786: GO 69917
69788: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
69789: LD_ADDR_VAR 0 5
69793: PUSH
69794: LD_VAR 0 1
69798: PUSH
69799: LD_INT 4
69801: MINUS
69802: PUSH
69803: LD_VAR 0 2
69807: PUSH
69808: LD_INT 1
69810: PUSH
69811: EMPTY
69812: LIST
69813: LIST
69814: LIST
69815: PUSH
69816: LD_VAR 0 1
69820: PUSH
69821: LD_VAR 0 2
69825: PUSH
69826: LD_INT 4
69828: MINUS
69829: PUSH
69830: LD_INT 3
69832: PUSH
69833: EMPTY
69834: LIST
69835: LIST
69836: LIST
69837: PUSH
69838: LD_VAR 0 1
69842: PUSH
69843: LD_INT 4
69845: PLUS
69846: PUSH
69847: LD_VAR 0 2
69851: PUSH
69852: LD_INT 4
69854: PLUS
69855: PUSH
69856: LD_INT 5
69858: PUSH
69859: EMPTY
69860: LIST
69861: LIST
69862: LIST
69863: PUSH
69864: LD_VAR 0 1
69868: PUSH
69869: LD_INT 3
69871: PLUS
69872: PUSH
69873: LD_VAR 0 2
69877: PUSH
69878: LD_INT 4
69880: PUSH
69881: EMPTY
69882: LIST
69883: LIST
69884: LIST
69885: PUSH
69886: LD_VAR 0 1
69890: PUSH
69891: LD_VAR 0 2
69895: PUSH
69896: LD_INT 3
69898: PLUS
69899: PUSH
69900: LD_INT 0
69902: PUSH
69903: EMPTY
69904: LIST
69905: LIST
69906: LIST
69907: PUSH
69908: EMPTY
69909: LIST
69910: LIST
69911: LIST
69912: LIST
69913: LIST
69914: ST_TO_ADDR
// end ; end ;
69915: GO 69918
69917: POP
// result := list ;
69918: LD_ADDR_VAR 0 4
69922: PUSH
69923: LD_VAR 0 5
69927: ST_TO_ADDR
// end ;
69928: LD_VAR 0 4
69932: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
69933: LD_INT 0
69935: PPUSH
69936: PPUSH
69937: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
69938: LD_VAR 0 1
69942: NOT
69943: PUSH
69944: LD_VAR 0 2
69948: PUSH
69949: LD_INT 1
69951: PUSH
69952: LD_INT 2
69954: PUSH
69955: LD_INT 3
69957: PUSH
69958: LD_INT 4
69960: PUSH
69961: EMPTY
69962: LIST
69963: LIST
69964: LIST
69965: LIST
69966: IN
69967: NOT
69968: OR
69969: IFFALSE 69973
// exit ;
69971: GO 70056
// tmp := [ ] ;
69973: LD_ADDR_VAR 0 5
69977: PUSH
69978: EMPTY
69979: ST_TO_ADDR
// for i in units do
69980: LD_ADDR_VAR 0 4
69984: PUSH
69985: LD_VAR 0 1
69989: PUSH
69990: FOR_IN
69991: IFFALSE 70025
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
69993: LD_ADDR_VAR 0 5
69997: PUSH
69998: LD_VAR 0 5
70002: PPUSH
70003: LD_VAR 0 4
70007: PPUSH
70008: LD_VAR 0 2
70012: PPUSH
70013: CALL_OW 259
70017: PPUSH
70018: CALL 71429 0 2
70022: ST_TO_ADDR
70023: GO 69990
70025: POP
70026: POP
// if not tmp then
70027: LD_VAR 0 5
70031: NOT
70032: IFFALSE 70036
// exit ;
70034: GO 70056
// result := SortListByListDesc ( units , tmp ) ;
70036: LD_ADDR_VAR 0 3
70040: PUSH
70041: LD_VAR 0 1
70045: PPUSH
70046: LD_VAR 0 5
70050: PPUSH
70051: CALL_OW 77
70055: ST_TO_ADDR
// end ;
70056: LD_VAR 0 3
70060: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
70061: LD_INT 0
70063: PPUSH
70064: PPUSH
70065: PPUSH
// result := false ;
70066: LD_ADDR_VAR 0 3
70070: PUSH
70071: LD_INT 0
70073: ST_TO_ADDR
// if not building then
70074: LD_VAR 0 2
70078: NOT
70079: IFFALSE 70083
// exit ;
70081: GO 70221
// x := GetX ( building ) ;
70083: LD_ADDR_VAR 0 4
70087: PUSH
70088: LD_VAR 0 2
70092: PPUSH
70093: CALL_OW 250
70097: ST_TO_ADDR
// y := GetY ( building ) ;
70098: LD_ADDR_VAR 0 5
70102: PUSH
70103: LD_VAR 0 2
70107: PPUSH
70108: CALL_OW 251
70112: ST_TO_ADDR
// if not x or not y then
70113: LD_VAR 0 4
70117: NOT
70118: PUSH
70119: LD_VAR 0 5
70123: NOT
70124: OR
70125: IFFALSE 70129
// exit ;
70127: GO 70221
// if GetTaskList ( unit ) then
70129: LD_VAR 0 1
70133: PPUSH
70134: CALL_OW 437
70138: IFFALSE 70221
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70140: LD_STRING e
70142: PUSH
70143: LD_VAR 0 1
70147: PPUSH
70148: CALL_OW 437
70152: PUSH
70153: LD_INT 1
70155: ARRAY
70156: PUSH
70157: LD_INT 1
70159: ARRAY
70160: EQUAL
70161: PUSH
70162: LD_VAR 0 4
70166: PUSH
70167: LD_VAR 0 1
70171: PPUSH
70172: CALL_OW 437
70176: PUSH
70177: LD_INT 1
70179: ARRAY
70180: PUSH
70181: LD_INT 2
70183: ARRAY
70184: EQUAL
70185: AND
70186: PUSH
70187: LD_VAR 0 5
70191: PUSH
70192: LD_VAR 0 1
70196: PPUSH
70197: CALL_OW 437
70201: PUSH
70202: LD_INT 1
70204: ARRAY
70205: PUSH
70206: LD_INT 3
70208: ARRAY
70209: EQUAL
70210: AND
70211: IFFALSE 70221
// result := true end ;
70213: LD_ADDR_VAR 0 3
70217: PUSH
70218: LD_INT 1
70220: ST_TO_ADDR
// end ;
70221: LD_VAR 0 3
70225: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
70226: LD_INT 0
70228: PPUSH
// result := false ;
70229: LD_ADDR_VAR 0 4
70233: PUSH
70234: LD_INT 0
70236: ST_TO_ADDR
// if GetTaskList ( unit ) then
70237: LD_VAR 0 1
70241: PPUSH
70242: CALL_OW 437
70246: IFFALSE 70329
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70248: LD_STRING M
70250: PUSH
70251: LD_VAR 0 1
70255: PPUSH
70256: CALL_OW 437
70260: PUSH
70261: LD_INT 1
70263: ARRAY
70264: PUSH
70265: LD_INT 1
70267: ARRAY
70268: EQUAL
70269: PUSH
70270: LD_VAR 0 2
70274: PUSH
70275: LD_VAR 0 1
70279: PPUSH
70280: CALL_OW 437
70284: PUSH
70285: LD_INT 1
70287: ARRAY
70288: PUSH
70289: LD_INT 2
70291: ARRAY
70292: EQUAL
70293: AND
70294: PUSH
70295: LD_VAR 0 3
70299: PUSH
70300: LD_VAR 0 1
70304: PPUSH
70305: CALL_OW 437
70309: PUSH
70310: LD_INT 1
70312: ARRAY
70313: PUSH
70314: LD_INT 3
70316: ARRAY
70317: EQUAL
70318: AND
70319: IFFALSE 70329
// result := true ;
70321: LD_ADDR_VAR 0 4
70325: PUSH
70326: LD_INT 1
70328: ST_TO_ADDR
// end ; end ;
70329: LD_VAR 0 4
70333: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
70334: LD_INT 0
70336: PPUSH
70337: PPUSH
70338: PPUSH
70339: PPUSH
// if not unit or not area then
70340: LD_VAR 0 1
70344: NOT
70345: PUSH
70346: LD_VAR 0 2
70350: NOT
70351: OR
70352: IFFALSE 70356
// exit ;
70354: GO 70532
// tmp := AreaToList ( area , i ) ;
70356: LD_ADDR_VAR 0 6
70360: PUSH
70361: LD_VAR 0 2
70365: PPUSH
70366: LD_VAR 0 5
70370: PPUSH
70371: CALL_OW 517
70375: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
70376: LD_ADDR_VAR 0 5
70380: PUSH
70381: DOUBLE
70382: LD_INT 1
70384: DEC
70385: ST_TO_ADDR
70386: LD_VAR 0 6
70390: PUSH
70391: LD_INT 1
70393: ARRAY
70394: PUSH
70395: FOR_TO
70396: IFFALSE 70530
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
70398: LD_ADDR_VAR 0 7
70402: PUSH
70403: LD_VAR 0 6
70407: PUSH
70408: LD_INT 1
70410: ARRAY
70411: PUSH
70412: LD_VAR 0 5
70416: ARRAY
70417: PUSH
70418: LD_VAR 0 6
70422: PUSH
70423: LD_INT 2
70425: ARRAY
70426: PUSH
70427: LD_VAR 0 5
70431: ARRAY
70432: PUSH
70433: EMPTY
70434: LIST
70435: LIST
70436: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
70437: LD_INT 92
70439: PUSH
70440: LD_VAR 0 7
70444: PUSH
70445: LD_INT 1
70447: ARRAY
70448: PUSH
70449: LD_VAR 0 7
70453: PUSH
70454: LD_INT 2
70456: ARRAY
70457: PUSH
70458: LD_INT 2
70460: PUSH
70461: EMPTY
70462: LIST
70463: LIST
70464: LIST
70465: LIST
70466: PPUSH
70467: CALL_OW 69
70471: PUSH
70472: LD_INT 0
70474: EQUAL
70475: IFFALSE 70528
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
70477: LD_VAR 0 1
70481: PPUSH
70482: LD_VAR 0 7
70486: PUSH
70487: LD_INT 1
70489: ARRAY
70490: PPUSH
70491: LD_VAR 0 7
70495: PUSH
70496: LD_INT 2
70498: ARRAY
70499: PPUSH
70500: LD_VAR 0 3
70504: PPUSH
70505: CALL_OW 48
// result := IsPlaced ( unit ) ;
70509: LD_ADDR_VAR 0 4
70513: PUSH
70514: LD_VAR 0 1
70518: PPUSH
70519: CALL_OW 305
70523: ST_TO_ADDR
// exit ;
70524: POP
70525: POP
70526: GO 70532
// end ; end ;
70528: GO 70395
70530: POP
70531: POP
// end ;
70532: LD_VAR 0 4
70536: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
70537: LD_INT 0
70539: PPUSH
70540: PPUSH
70541: PPUSH
// if not side or side > 8 then
70542: LD_VAR 0 1
70546: NOT
70547: PUSH
70548: LD_VAR 0 1
70552: PUSH
70553: LD_INT 8
70555: GREATER
70556: OR
70557: IFFALSE 70561
// exit ;
70559: GO 70748
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
70561: LD_ADDR_VAR 0 4
70565: PUSH
70566: LD_INT 22
70568: PUSH
70569: LD_VAR 0 1
70573: PUSH
70574: EMPTY
70575: LIST
70576: LIST
70577: PUSH
70578: LD_INT 21
70580: PUSH
70581: LD_INT 3
70583: PUSH
70584: EMPTY
70585: LIST
70586: LIST
70587: PUSH
70588: EMPTY
70589: LIST
70590: LIST
70591: PPUSH
70592: CALL_OW 69
70596: ST_TO_ADDR
// if not tmp then
70597: LD_VAR 0 4
70601: NOT
70602: IFFALSE 70606
// exit ;
70604: GO 70748
// enable_addtolog := true ;
70606: LD_ADDR_OWVAR 81
70610: PUSH
70611: LD_INT 1
70613: ST_TO_ADDR
// AddToLog ( [ ) ;
70614: LD_STRING [
70616: PPUSH
70617: CALL_OW 561
// for i in tmp do
70621: LD_ADDR_VAR 0 3
70625: PUSH
70626: LD_VAR 0 4
70630: PUSH
70631: FOR_IN
70632: IFFALSE 70739
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
70634: LD_STRING [
70636: PUSH
70637: LD_VAR 0 3
70641: PPUSH
70642: CALL_OW 266
70646: STR
70647: PUSH
70648: LD_STRING , 
70650: STR
70651: PUSH
70652: LD_VAR 0 3
70656: PPUSH
70657: CALL_OW 250
70661: STR
70662: PUSH
70663: LD_STRING , 
70665: STR
70666: PUSH
70667: LD_VAR 0 3
70671: PPUSH
70672: CALL_OW 251
70676: STR
70677: PUSH
70678: LD_STRING , 
70680: STR
70681: PUSH
70682: LD_VAR 0 3
70686: PPUSH
70687: CALL_OW 254
70691: STR
70692: PUSH
70693: LD_STRING , 
70695: STR
70696: PUSH
70697: LD_VAR 0 3
70701: PPUSH
70702: LD_INT 1
70704: PPUSH
70705: CALL_OW 268
70709: STR
70710: PUSH
70711: LD_STRING , 
70713: STR
70714: PUSH
70715: LD_VAR 0 3
70719: PPUSH
70720: LD_INT 2
70722: PPUSH
70723: CALL_OW 268
70727: STR
70728: PUSH
70729: LD_STRING ],
70731: STR
70732: PPUSH
70733: CALL_OW 561
// end ;
70737: GO 70631
70739: POP
70740: POP
// AddToLog ( ]; ) ;
70741: LD_STRING ];
70743: PPUSH
70744: CALL_OW 561
// end ;
70748: LD_VAR 0 2
70752: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
70753: LD_INT 0
70755: PPUSH
70756: PPUSH
70757: PPUSH
70758: PPUSH
70759: PPUSH
// if not area or not rate or not max then
70760: LD_VAR 0 1
70764: NOT
70765: PUSH
70766: LD_VAR 0 2
70770: NOT
70771: OR
70772: PUSH
70773: LD_VAR 0 4
70777: NOT
70778: OR
70779: IFFALSE 70783
// exit ;
70781: GO 70972
// while 1 do
70783: LD_INT 1
70785: IFFALSE 70972
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
70787: LD_ADDR_VAR 0 9
70791: PUSH
70792: LD_VAR 0 1
70796: PPUSH
70797: LD_INT 1
70799: PPUSH
70800: CALL_OW 287
70804: PUSH
70805: LD_INT 10
70807: MUL
70808: ST_TO_ADDR
// r := rate / 10 ;
70809: LD_ADDR_VAR 0 7
70813: PUSH
70814: LD_VAR 0 2
70818: PUSH
70819: LD_INT 10
70821: DIVREAL
70822: ST_TO_ADDR
// time := 1 1$00 ;
70823: LD_ADDR_VAR 0 8
70827: PUSH
70828: LD_INT 2100
70830: ST_TO_ADDR
// if amount < min then
70831: LD_VAR 0 9
70835: PUSH
70836: LD_VAR 0 3
70840: LESS
70841: IFFALSE 70859
// r := r * 2 else
70843: LD_ADDR_VAR 0 7
70847: PUSH
70848: LD_VAR 0 7
70852: PUSH
70853: LD_INT 2
70855: MUL
70856: ST_TO_ADDR
70857: GO 70885
// if amount > max then
70859: LD_VAR 0 9
70863: PUSH
70864: LD_VAR 0 4
70868: GREATER
70869: IFFALSE 70885
// r := r / 2 ;
70871: LD_ADDR_VAR 0 7
70875: PUSH
70876: LD_VAR 0 7
70880: PUSH
70881: LD_INT 2
70883: DIVREAL
70884: ST_TO_ADDR
// time := time / r ;
70885: LD_ADDR_VAR 0 8
70889: PUSH
70890: LD_VAR 0 8
70894: PUSH
70895: LD_VAR 0 7
70899: DIVREAL
70900: ST_TO_ADDR
// if time < 0 then
70901: LD_VAR 0 8
70905: PUSH
70906: LD_INT 0
70908: LESS
70909: IFFALSE 70926
// time := time * - 1 ;
70911: LD_ADDR_VAR 0 8
70915: PUSH
70916: LD_VAR 0 8
70920: PUSH
70921: LD_INT 1
70923: NEG
70924: MUL
70925: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
70926: LD_VAR 0 8
70930: PUSH
70931: LD_INT 35
70933: PPUSH
70934: LD_INT 875
70936: PPUSH
70937: CALL_OW 12
70941: PLUS
70942: PPUSH
70943: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
70947: LD_INT 1
70949: PPUSH
70950: LD_INT 5
70952: PPUSH
70953: CALL_OW 12
70957: PPUSH
70958: LD_VAR 0 1
70962: PPUSH
70963: LD_INT 1
70965: PPUSH
70966: CALL_OW 55
// end ;
70970: GO 70783
// end ;
70972: LD_VAR 0 5
70976: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
70977: LD_INT 0
70979: PPUSH
70980: PPUSH
70981: PPUSH
70982: PPUSH
70983: PPUSH
70984: PPUSH
70985: PPUSH
70986: PPUSH
// if not turrets or not factories then
70987: LD_VAR 0 1
70991: NOT
70992: PUSH
70993: LD_VAR 0 2
70997: NOT
70998: OR
70999: IFFALSE 71003
// exit ;
71001: GO 71310
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
71003: LD_ADDR_VAR 0 10
71007: PUSH
71008: LD_INT 5
71010: PUSH
71011: LD_INT 6
71013: PUSH
71014: EMPTY
71015: LIST
71016: LIST
71017: PUSH
71018: LD_INT 2
71020: PUSH
71021: LD_INT 4
71023: PUSH
71024: EMPTY
71025: LIST
71026: LIST
71027: PUSH
71028: LD_INT 3
71030: PUSH
71031: LD_INT 5
71033: PUSH
71034: EMPTY
71035: LIST
71036: LIST
71037: PUSH
71038: EMPTY
71039: LIST
71040: LIST
71041: LIST
71042: PUSH
71043: LD_INT 24
71045: PUSH
71046: LD_INT 25
71048: PUSH
71049: EMPTY
71050: LIST
71051: LIST
71052: PUSH
71053: LD_INT 23
71055: PUSH
71056: LD_INT 27
71058: PUSH
71059: EMPTY
71060: LIST
71061: LIST
71062: PUSH
71063: EMPTY
71064: LIST
71065: LIST
71066: PUSH
71067: LD_INT 42
71069: PUSH
71070: LD_INT 43
71072: PUSH
71073: EMPTY
71074: LIST
71075: LIST
71076: PUSH
71077: LD_INT 44
71079: PUSH
71080: LD_INT 46
71082: PUSH
71083: EMPTY
71084: LIST
71085: LIST
71086: PUSH
71087: LD_INT 45
71089: PUSH
71090: LD_INT 47
71092: PUSH
71093: EMPTY
71094: LIST
71095: LIST
71096: PUSH
71097: EMPTY
71098: LIST
71099: LIST
71100: LIST
71101: PUSH
71102: EMPTY
71103: LIST
71104: LIST
71105: LIST
71106: ST_TO_ADDR
// result := [ ] ;
71107: LD_ADDR_VAR 0 3
71111: PUSH
71112: EMPTY
71113: ST_TO_ADDR
// for i in turrets do
71114: LD_ADDR_VAR 0 4
71118: PUSH
71119: LD_VAR 0 1
71123: PUSH
71124: FOR_IN
71125: IFFALSE 71308
// begin nat := GetNation ( i ) ;
71127: LD_ADDR_VAR 0 7
71131: PUSH
71132: LD_VAR 0 4
71136: PPUSH
71137: CALL_OW 248
71141: ST_TO_ADDR
// weapon := 0 ;
71142: LD_ADDR_VAR 0 8
71146: PUSH
71147: LD_INT 0
71149: ST_TO_ADDR
// if not nat then
71150: LD_VAR 0 7
71154: NOT
71155: IFFALSE 71159
// continue ;
71157: GO 71124
// for j in list [ nat ] do
71159: LD_ADDR_VAR 0 5
71163: PUSH
71164: LD_VAR 0 10
71168: PUSH
71169: LD_VAR 0 7
71173: ARRAY
71174: PUSH
71175: FOR_IN
71176: IFFALSE 71217
// if GetBWeapon ( i ) = j [ 1 ] then
71178: LD_VAR 0 4
71182: PPUSH
71183: CALL_OW 269
71187: PUSH
71188: LD_VAR 0 5
71192: PUSH
71193: LD_INT 1
71195: ARRAY
71196: EQUAL
71197: IFFALSE 71215
// begin weapon := j [ 2 ] ;
71199: LD_ADDR_VAR 0 8
71203: PUSH
71204: LD_VAR 0 5
71208: PUSH
71209: LD_INT 2
71211: ARRAY
71212: ST_TO_ADDR
// break ;
71213: GO 71217
// end ;
71215: GO 71175
71217: POP
71218: POP
// if not weapon then
71219: LD_VAR 0 8
71223: NOT
71224: IFFALSE 71228
// continue ;
71226: GO 71124
// for k in factories do
71228: LD_ADDR_VAR 0 6
71232: PUSH
71233: LD_VAR 0 2
71237: PUSH
71238: FOR_IN
71239: IFFALSE 71304
// begin weapons := AvailableWeaponList ( k ) ;
71241: LD_ADDR_VAR 0 9
71245: PUSH
71246: LD_VAR 0 6
71250: PPUSH
71251: CALL_OW 478
71255: ST_TO_ADDR
// if not weapons then
71256: LD_VAR 0 9
71260: NOT
71261: IFFALSE 71265
// continue ;
71263: GO 71238
// if weapon in weapons then
71265: LD_VAR 0 8
71269: PUSH
71270: LD_VAR 0 9
71274: IN
71275: IFFALSE 71302
// begin result := [ i , weapon ] ;
71277: LD_ADDR_VAR 0 3
71281: PUSH
71282: LD_VAR 0 4
71286: PUSH
71287: LD_VAR 0 8
71291: PUSH
71292: EMPTY
71293: LIST
71294: LIST
71295: ST_TO_ADDR
// exit ;
71296: POP
71297: POP
71298: POP
71299: POP
71300: GO 71310
// end ; end ;
71302: GO 71238
71304: POP
71305: POP
// end ;
71306: GO 71124
71308: POP
71309: POP
// end ;
71310: LD_VAR 0 3
71314: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
71315: LD_INT 0
71317: PPUSH
// if not side or side > 8 then
71318: LD_VAR 0 3
71322: NOT
71323: PUSH
71324: LD_VAR 0 3
71328: PUSH
71329: LD_INT 8
71331: GREATER
71332: OR
71333: IFFALSE 71337
// exit ;
71335: GO 71396
// if not range then
71337: LD_VAR 0 4
71341: NOT
71342: IFFALSE 71353
// range := - 12 ;
71344: LD_ADDR_VAR 0 4
71348: PUSH
71349: LD_INT 12
71351: NEG
71352: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
71353: LD_VAR 0 1
71357: PPUSH
71358: LD_VAR 0 2
71362: PPUSH
71363: LD_VAR 0 3
71367: PPUSH
71368: LD_VAR 0 4
71372: PPUSH
71373: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
71377: LD_VAR 0 1
71381: PPUSH
71382: LD_VAR 0 2
71386: PPUSH
71387: LD_VAR 0 3
71391: PPUSH
71392: CALL_OW 331
// end ;
71396: LD_VAR 0 5
71400: RET
// export function Video ( mode ) ; begin
71401: LD_INT 0
71403: PPUSH
// ingame_video = mode ;
71404: LD_ADDR_OWVAR 52
71408: PUSH
71409: LD_VAR 0 1
71413: ST_TO_ADDR
// interface_hidden = mode ;
71414: LD_ADDR_OWVAR 54
71418: PUSH
71419: LD_VAR 0 1
71423: ST_TO_ADDR
// end ;
71424: LD_VAR 0 2
71428: RET
// export function Join ( array , element ) ; begin
71429: LD_INT 0
71431: PPUSH
// result := Replace ( array , array + 1 , element ) ;
71432: LD_ADDR_VAR 0 3
71436: PUSH
71437: LD_VAR 0 1
71441: PPUSH
71442: LD_VAR 0 1
71446: PUSH
71447: LD_INT 1
71449: PLUS
71450: PPUSH
71451: LD_VAR 0 2
71455: PPUSH
71456: CALL_OW 1
71460: ST_TO_ADDR
// end ;
71461: LD_VAR 0 3
71465: RET
// export function JoinUnion ( array , element ) ; begin
71466: LD_INT 0
71468: PPUSH
// result := array union element ;
71469: LD_ADDR_VAR 0 3
71473: PUSH
71474: LD_VAR 0 1
71478: PUSH
71479: LD_VAR 0 2
71483: UNION
71484: ST_TO_ADDR
// end ;
71485: LD_VAR 0 3
71489: RET
// export function GetBehemoths ( side ) ; begin
71490: LD_INT 0
71492: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
71493: LD_ADDR_VAR 0 2
71497: PUSH
71498: LD_INT 22
71500: PUSH
71501: LD_VAR 0 1
71505: PUSH
71506: EMPTY
71507: LIST
71508: LIST
71509: PUSH
71510: LD_INT 31
71512: PUSH
71513: LD_INT 25
71515: PUSH
71516: EMPTY
71517: LIST
71518: LIST
71519: PUSH
71520: EMPTY
71521: LIST
71522: LIST
71523: PPUSH
71524: CALL_OW 69
71528: ST_TO_ADDR
// end ;
71529: LD_VAR 0 2
71533: RET
// export function Shuffle ( array ) ; var i , index ; begin
71534: LD_INT 0
71536: PPUSH
71537: PPUSH
71538: PPUSH
// result := [ ] ;
71539: LD_ADDR_VAR 0 2
71543: PUSH
71544: EMPTY
71545: ST_TO_ADDR
// if not array then
71546: LD_VAR 0 1
71550: NOT
71551: IFFALSE 71555
// exit ;
71553: GO 71654
// Randomize ;
71555: CALL_OW 10
// for i = array downto 1 do
71559: LD_ADDR_VAR 0 3
71563: PUSH
71564: DOUBLE
71565: LD_VAR 0 1
71569: INC
71570: ST_TO_ADDR
71571: LD_INT 1
71573: PUSH
71574: FOR_DOWNTO
71575: IFFALSE 71652
// begin index := rand ( 1 , array ) ;
71577: LD_ADDR_VAR 0 4
71581: PUSH
71582: LD_INT 1
71584: PPUSH
71585: LD_VAR 0 1
71589: PPUSH
71590: CALL_OW 12
71594: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
71595: LD_ADDR_VAR 0 2
71599: PUSH
71600: LD_VAR 0 2
71604: PPUSH
71605: LD_VAR 0 2
71609: PUSH
71610: LD_INT 1
71612: PLUS
71613: PPUSH
71614: LD_VAR 0 1
71618: PUSH
71619: LD_VAR 0 4
71623: ARRAY
71624: PPUSH
71625: CALL_OW 2
71629: ST_TO_ADDR
// array := Delete ( array , index ) ;
71630: LD_ADDR_VAR 0 1
71634: PUSH
71635: LD_VAR 0 1
71639: PPUSH
71640: LD_VAR 0 4
71644: PPUSH
71645: CALL_OW 3
71649: ST_TO_ADDR
// end ;
71650: GO 71574
71652: POP
71653: POP
// end ;
71654: LD_VAR 0 2
71658: RET
// export function GetBaseMaterials ( base ) ; begin
71659: LD_INT 0
71661: PPUSH
// result := [ 0 , 0 , 0 ] ;
71662: LD_ADDR_VAR 0 2
71666: PUSH
71667: LD_INT 0
71669: PUSH
71670: LD_INT 0
71672: PUSH
71673: LD_INT 0
71675: PUSH
71676: EMPTY
71677: LIST
71678: LIST
71679: LIST
71680: ST_TO_ADDR
// if not base then
71681: LD_VAR 0 1
71685: NOT
71686: IFFALSE 71690
// exit ;
71688: GO 71739
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
71690: LD_ADDR_VAR 0 2
71694: PUSH
71695: LD_VAR 0 1
71699: PPUSH
71700: LD_INT 1
71702: PPUSH
71703: CALL_OW 275
71707: PUSH
71708: LD_VAR 0 1
71712: PPUSH
71713: LD_INT 2
71715: PPUSH
71716: CALL_OW 275
71720: PUSH
71721: LD_VAR 0 1
71725: PPUSH
71726: LD_INT 3
71728: PPUSH
71729: CALL_OW 275
71733: PUSH
71734: EMPTY
71735: LIST
71736: LIST
71737: LIST
71738: ST_TO_ADDR
// end ;
71739: LD_VAR 0 2
71743: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
71744: LD_INT 0
71746: PPUSH
71747: PPUSH
// result := array ;
71748: LD_ADDR_VAR 0 3
71752: PUSH
71753: LD_VAR 0 1
71757: ST_TO_ADDR
// if size >= result then
71758: LD_VAR 0 2
71762: PUSH
71763: LD_VAR 0 3
71767: GREATEREQUAL
71768: IFFALSE 71772
// exit ;
71770: GO 71822
// if size then
71772: LD_VAR 0 2
71776: IFFALSE 71822
// for i := array downto size do
71778: LD_ADDR_VAR 0 4
71782: PUSH
71783: DOUBLE
71784: LD_VAR 0 1
71788: INC
71789: ST_TO_ADDR
71790: LD_VAR 0 2
71794: PUSH
71795: FOR_DOWNTO
71796: IFFALSE 71820
// result := Delete ( result , result ) ;
71798: LD_ADDR_VAR 0 3
71802: PUSH
71803: LD_VAR 0 3
71807: PPUSH
71808: LD_VAR 0 3
71812: PPUSH
71813: CALL_OW 3
71817: ST_TO_ADDR
71818: GO 71795
71820: POP
71821: POP
// end ;
71822: LD_VAR 0 3
71826: RET
// export function ComExit ( unit ) ; var tmp ; begin
71827: LD_INT 0
71829: PPUSH
71830: PPUSH
// if not IsInUnit ( unit ) then
71831: LD_VAR 0 1
71835: PPUSH
71836: CALL_OW 310
71840: NOT
71841: IFFALSE 71845
// exit ;
71843: GO 71905
// tmp := IsInUnit ( unit ) ;
71845: LD_ADDR_VAR 0 3
71849: PUSH
71850: LD_VAR 0 1
71854: PPUSH
71855: CALL_OW 310
71859: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
71860: LD_VAR 0 3
71864: PPUSH
71865: CALL_OW 247
71869: PUSH
71870: LD_INT 2
71872: EQUAL
71873: IFFALSE 71886
// ComExitVehicle ( unit ) else
71875: LD_VAR 0 1
71879: PPUSH
71880: CALL_OW 121
71884: GO 71895
// ComExitBuilding ( unit ) ;
71886: LD_VAR 0 1
71890: PPUSH
71891: CALL_OW 122
// result := tmp ;
71895: LD_ADDR_VAR 0 2
71899: PUSH
71900: LD_VAR 0 3
71904: ST_TO_ADDR
// end ;
71905: LD_VAR 0 2
71909: RET
// export function ComExitAll ( units ) ; var i ; begin
71910: LD_INT 0
71912: PPUSH
71913: PPUSH
// if not units then
71914: LD_VAR 0 1
71918: NOT
71919: IFFALSE 71923
// exit ;
71921: GO 71949
// for i in units do
71923: LD_ADDR_VAR 0 3
71927: PUSH
71928: LD_VAR 0 1
71932: PUSH
71933: FOR_IN
71934: IFFALSE 71947
// ComExit ( i ) ;
71936: LD_VAR 0 3
71940: PPUSH
71941: CALL 71827 0 1
71945: GO 71933
71947: POP
71948: POP
// end ;
71949: LD_VAR 0 2
71953: RET
// export function ResetHc ; begin
71954: LD_INT 0
71956: PPUSH
// InitHc ;
71957: CALL_OW 19
// hc_importance := 0 ;
71961: LD_ADDR_OWVAR 32
71965: PUSH
71966: LD_INT 0
71968: ST_TO_ADDR
// end ;
71969: LD_VAR 0 1
71973: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
71974: LD_INT 0
71976: PPUSH
71977: PPUSH
71978: PPUSH
// _x := ( x1 + x2 ) div 2 ;
71979: LD_ADDR_VAR 0 6
71983: PUSH
71984: LD_VAR 0 1
71988: PUSH
71989: LD_VAR 0 3
71993: PLUS
71994: PUSH
71995: LD_INT 2
71997: DIV
71998: ST_TO_ADDR
// if _x < 0 then
71999: LD_VAR 0 6
72003: PUSH
72004: LD_INT 0
72006: LESS
72007: IFFALSE 72024
// _x := _x * - 1 ;
72009: LD_ADDR_VAR 0 6
72013: PUSH
72014: LD_VAR 0 6
72018: PUSH
72019: LD_INT 1
72021: NEG
72022: MUL
72023: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
72024: LD_ADDR_VAR 0 7
72028: PUSH
72029: LD_VAR 0 2
72033: PUSH
72034: LD_VAR 0 4
72038: PLUS
72039: PUSH
72040: LD_INT 2
72042: DIV
72043: ST_TO_ADDR
// if _y < 0 then
72044: LD_VAR 0 7
72048: PUSH
72049: LD_INT 0
72051: LESS
72052: IFFALSE 72069
// _y := _y * - 1 ;
72054: LD_ADDR_VAR 0 7
72058: PUSH
72059: LD_VAR 0 7
72063: PUSH
72064: LD_INT 1
72066: NEG
72067: MUL
72068: ST_TO_ADDR
// result := [ _x , _y ] ;
72069: LD_ADDR_VAR 0 5
72073: PUSH
72074: LD_VAR 0 6
72078: PUSH
72079: LD_VAR 0 7
72083: PUSH
72084: EMPTY
72085: LIST
72086: LIST
72087: ST_TO_ADDR
// end ;
72088: LD_VAR 0 5
72092: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
72093: LD_INT 0
72095: PPUSH
72096: PPUSH
72097: PPUSH
72098: PPUSH
// task := GetTaskList ( unit ) ;
72099: LD_ADDR_VAR 0 7
72103: PUSH
72104: LD_VAR 0 1
72108: PPUSH
72109: CALL_OW 437
72113: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
72114: LD_VAR 0 7
72118: NOT
72119: PUSH
72120: LD_VAR 0 1
72124: PPUSH
72125: LD_VAR 0 2
72129: PPUSH
72130: CALL_OW 308
72134: NOT
72135: AND
72136: IFFALSE 72140
// exit ;
72138: GO 72258
// if IsInArea ( unit , area ) then
72140: LD_VAR 0 1
72144: PPUSH
72145: LD_VAR 0 2
72149: PPUSH
72150: CALL_OW 308
72154: IFFALSE 72172
// begin ComMoveToArea ( unit , goAway ) ;
72156: LD_VAR 0 1
72160: PPUSH
72161: LD_VAR 0 3
72165: PPUSH
72166: CALL_OW 113
// exit ;
72170: GO 72258
// end ; if task [ 1 ] [ 1 ] <> M then
72172: LD_VAR 0 7
72176: PUSH
72177: LD_INT 1
72179: ARRAY
72180: PUSH
72181: LD_INT 1
72183: ARRAY
72184: PUSH
72185: LD_STRING M
72187: NONEQUAL
72188: IFFALSE 72192
// exit ;
72190: GO 72258
// x := task [ 1 ] [ 2 ] ;
72192: LD_ADDR_VAR 0 5
72196: PUSH
72197: LD_VAR 0 7
72201: PUSH
72202: LD_INT 1
72204: ARRAY
72205: PUSH
72206: LD_INT 2
72208: ARRAY
72209: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
72210: LD_ADDR_VAR 0 6
72214: PUSH
72215: LD_VAR 0 7
72219: PUSH
72220: LD_INT 1
72222: ARRAY
72223: PUSH
72224: LD_INT 3
72226: ARRAY
72227: ST_TO_ADDR
// if InArea ( x , y , area ) then
72228: LD_VAR 0 5
72232: PPUSH
72233: LD_VAR 0 6
72237: PPUSH
72238: LD_VAR 0 2
72242: PPUSH
72243: CALL_OW 309
72247: IFFALSE 72258
// ComStop ( unit ) ;
72249: LD_VAR 0 1
72253: PPUSH
72254: CALL_OW 141
// end ;
72258: LD_VAR 0 4
72262: RET
// export function Abs ( value ) ; begin
72263: LD_INT 0
72265: PPUSH
// result := value ;
72266: LD_ADDR_VAR 0 2
72270: PUSH
72271: LD_VAR 0 1
72275: ST_TO_ADDR
// if value < 0 then
72276: LD_VAR 0 1
72280: PUSH
72281: LD_INT 0
72283: LESS
72284: IFFALSE 72301
// result := value * - 1 ;
72286: LD_ADDR_VAR 0 2
72290: PUSH
72291: LD_VAR 0 1
72295: PUSH
72296: LD_INT 1
72298: NEG
72299: MUL
72300: ST_TO_ADDR
// end ;
72301: LD_VAR 0 2
72305: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
72306: LD_INT 0
72308: PPUSH
72309: PPUSH
72310: PPUSH
72311: PPUSH
72312: PPUSH
72313: PPUSH
72314: PPUSH
72315: PPUSH
// if not unit or not building then
72316: LD_VAR 0 1
72320: NOT
72321: PUSH
72322: LD_VAR 0 2
72326: NOT
72327: OR
72328: IFFALSE 72332
// exit ;
72330: GO 72558
// x := GetX ( building ) ;
72332: LD_ADDR_VAR 0 4
72336: PUSH
72337: LD_VAR 0 2
72341: PPUSH
72342: CALL_OW 250
72346: ST_TO_ADDR
// y := GetY ( building ) ;
72347: LD_ADDR_VAR 0 6
72351: PUSH
72352: LD_VAR 0 2
72356: PPUSH
72357: CALL_OW 251
72361: ST_TO_ADDR
// d := GetDir ( building ) ;
72362: LD_ADDR_VAR 0 8
72366: PUSH
72367: LD_VAR 0 2
72371: PPUSH
72372: CALL_OW 254
72376: ST_TO_ADDR
// r := 4 ;
72377: LD_ADDR_VAR 0 9
72381: PUSH
72382: LD_INT 4
72384: ST_TO_ADDR
// for i := 1 to 5 do
72385: LD_ADDR_VAR 0 10
72389: PUSH
72390: DOUBLE
72391: LD_INT 1
72393: DEC
72394: ST_TO_ADDR
72395: LD_INT 5
72397: PUSH
72398: FOR_TO
72399: IFFALSE 72556
// begin _x := ShiftX ( x , d , r + i ) ;
72401: LD_ADDR_VAR 0 5
72405: PUSH
72406: LD_VAR 0 4
72410: PPUSH
72411: LD_VAR 0 8
72415: PPUSH
72416: LD_VAR 0 9
72420: PUSH
72421: LD_VAR 0 10
72425: PLUS
72426: PPUSH
72427: CALL_OW 272
72431: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
72432: LD_ADDR_VAR 0 7
72436: PUSH
72437: LD_VAR 0 6
72441: PPUSH
72442: LD_VAR 0 8
72446: PPUSH
72447: LD_VAR 0 9
72451: PUSH
72452: LD_VAR 0 10
72456: PLUS
72457: PPUSH
72458: CALL_OW 273
72462: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
72463: LD_VAR 0 5
72467: PPUSH
72468: LD_VAR 0 7
72472: PPUSH
72473: CALL_OW 488
72477: PUSH
72478: LD_VAR 0 5
72482: PPUSH
72483: LD_VAR 0 7
72487: PPUSH
72488: CALL_OW 428
72492: PPUSH
72493: CALL_OW 247
72497: PUSH
72498: LD_INT 3
72500: PUSH
72501: LD_INT 2
72503: PUSH
72504: EMPTY
72505: LIST
72506: LIST
72507: IN
72508: NOT
72509: AND
72510: IFFALSE 72554
// begin ComMoveXY ( unit , _x , _y ) ;
72512: LD_VAR 0 1
72516: PPUSH
72517: LD_VAR 0 5
72521: PPUSH
72522: LD_VAR 0 7
72526: PPUSH
72527: CALL_OW 111
// result := [ _x , _y ] ;
72531: LD_ADDR_VAR 0 3
72535: PUSH
72536: LD_VAR 0 5
72540: PUSH
72541: LD_VAR 0 7
72545: PUSH
72546: EMPTY
72547: LIST
72548: LIST
72549: ST_TO_ADDR
// exit ;
72550: POP
72551: POP
72552: GO 72558
// end ; end ;
72554: GO 72398
72556: POP
72557: POP
// end ;
72558: LD_VAR 0 3
72562: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
72563: LD_INT 0
72565: PPUSH
72566: PPUSH
72567: PPUSH
// result := 0 ;
72568: LD_ADDR_VAR 0 3
72572: PUSH
72573: LD_INT 0
72575: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
72576: LD_VAR 0 1
72580: PUSH
72581: LD_INT 0
72583: LESS
72584: PUSH
72585: LD_VAR 0 1
72589: PUSH
72590: LD_INT 8
72592: GREATER
72593: OR
72594: PUSH
72595: LD_VAR 0 2
72599: PUSH
72600: LD_INT 0
72602: LESS
72603: OR
72604: PUSH
72605: LD_VAR 0 2
72609: PUSH
72610: LD_INT 8
72612: GREATER
72613: OR
72614: IFFALSE 72618
// exit ;
72616: GO 72693
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
72618: LD_ADDR_VAR 0 4
72622: PUSH
72623: LD_INT 22
72625: PUSH
72626: LD_VAR 0 2
72630: PUSH
72631: EMPTY
72632: LIST
72633: LIST
72634: PPUSH
72635: CALL_OW 69
72639: PUSH
72640: FOR_IN
72641: IFFALSE 72691
// begin un := UnitShoot ( i ) ;
72643: LD_ADDR_VAR 0 5
72647: PUSH
72648: LD_VAR 0 4
72652: PPUSH
72653: CALL_OW 504
72657: ST_TO_ADDR
// if GetSide ( un ) = side1 then
72658: LD_VAR 0 5
72662: PPUSH
72663: CALL_OW 255
72667: PUSH
72668: LD_VAR 0 1
72672: EQUAL
72673: IFFALSE 72689
// begin result := un ;
72675: LD_ADDR_VAR 0 3
72679: PUSH
72680: LD_VAR 0 5
72684: ST_TO_ADDR
// exit ;
72685: POP
72686: POP
72687: GO 72693
// end ; end ;
72689: GO 72640
72691: POP
72692: POP
// end ;
72693: LD_VAR 0 3
72697: RET
// export function GetCargoBay ( units ) ; begin
72698: LD_INT 0
72700: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
72701: LD_ADDR_VAR 0 2
72705: PUSH
72706: LD_VAR 0 1
72710: PPUSH
72711: LD_INT 2
72713: PUSH
72714: LD_INT 34
72716: PUSH
72717: LD_INT 12
72719: PUSH
72720: EMPTY
72721: LIST
72722: LIST
72723: PUSH
72724: LD_INT 34
72726: PUSH
72727: LD_INT 51
72729: PUSH
72730: EMPTY
72731: LIST
72732: LIST
72733: PUSH
72734: LD_INT 34
72736: PUSH
72737: LD_INT 32
72739: PUSH
72740: EMPTY
72741: LIST
72742: LIST
72743: PUSH
72744: LD_INT 34
72746: PUSH
72747: LD_INT 89
72749: PUSH
72750: EMPTY
72751: LIST
72752: LIST
72753: PUSH
72754: EMPTY
72755: LIST
72756: LIST
72757: LIST
72758: LIST
72759: LIST
72760: PPUSH
72761: CALL_OW 72
72765: ST_TO_ADDR
// end ;
72766: LD_VAR 0 2
72770: RET
// export function Negate ( value ) ; begin
72771: LD_INT 0
72773: PPUSH
// result := not value ;
72774: LD_ADDR_VAR 0 2
72778: PUSH
72779: LD_VAR 0 1
72783: NOT
72784: ST_TO_ADDR
// end ;
72785: LD_VAR 0 2
72789: RET
// export function Inc ( value ) ; begin
72790: LD_INT 0
72792: PPUSH
// result := value + 1 ;
72793: LD_ADDR_VAR 0 2
72797: PUSH
72798: LD_VAR 0 1
72802: PUSH
72803: LD_INT 1
72805: PLUS
72806: ST_TO_ADDR
// end ;
72807: LD_VAR 0 2
72811: RET
// export function Dec ( value ) ; begin
72812: LD_INT 0
72814: PPUSH
// result := value - 1 ;
72815: LD_ADDR_VAR 0 2
72819: PUSH
72820: LD_VAR 0 1
72824: PUSH
72825: LD_INT 1
72827: MINUS
72828: ST_TO_ADDR
// end ;
72829: LD_VAR 0 2
72833: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
72834: LD_INT 0
72836: PPUSH
72837: PPUSH
72838: PPUSH
72839: PPUSH
72840: PPUSH
72841: PPUSH
72842: PPUSH
72843: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
72844: LD_VAR 0 1
72848: PPUSH
72849: LD_VAR 0 2
72853: PPUSH
72854: CALL_OW 488
72858: NOT
72859: PUSH
72860: LD_VAR 0 3
72864: PPUSH
72865: LD_VAR 0 4
72869: PPUSH
72870: CALL_OW 488
72874: NOT
72875: OR
72876: IFFALSE 72889
// begin result := - 1 ;
72878: LD_ADDR_VAR 0 5
72882: PUSH
72883: LD_INT 1
72885: NEG
72886: ST_TO_ADDR
// exit ;
72887: GO 73124
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
72889: LD_ADDR_VAR 0 12
72893: PUSH
72894: LD_VAR 0 1
72898: PPUSH
72899: LD_VAR 0 2
72903: PPUSH
72904: LD_VAR 0 3
72908: PPUSH
72909: LD_VAR 0 4
72913: PPUSH
72914: CALL 71974 0 4
72918: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
72919: LD_ADDR_VAR 0 11
72923: PUSH
72924: LD_VAR 0 1
72928: PPUSH
72929: LD_VAR 0 2
72933: PPUSH
72934: LD_VAR 0 12
72938: PUSH
72939: LD_INT 1
72941: ARRAY
72942: PPUSH
72943: LD_VAR 0 12
72947: PUSH
72948: LD_INT 2
72950: ARRAY
72951: PPUSH
72952: CALL_OW 298
72956: ST_TO_ADDR
// distance := 9999 ;
72957: LD_ADDR_VAR 0 10
72961: PUSH
72962: LD_INT 9999
72964: ST_TO_ADDR
// for i := 0 to 5 do
72965: LD_ADDR_VAR 0 6
72969: PUSH
72970: DOUBLE
72971: LD_INT 0
72973: DEC
72974: ST_TO_ADDR
72975: LD_INT 5
72977: PUSH
72978: FOR_TO
72979: IFFALSE 73122
// begin _x := ShiftX ( x1 , i , centerDist ) ;
72981: LD_ADDR_VAR 0 7
72985: PUSH
72986: LD_VAR 0 1
72990: PPUSH
72991: LD_VAR 0 6
72995: PPUSH
72996: LD_VAR 0 11
73000: PPUSH
73001: CALL_OW 272
73005: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
73006: LD_ADDR_VAR 0 8
73010: PUSH
73011: LD_VAR 0 2
73015: PPUSH
73016: LD_VAR 0 6
73020: PPUSH
73021: LD_VAR 0 11
73025: PPUSH
73026: CALL_OW 273
73030: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
73031: LD_VAR 0 7
73035: PPUSH
73036: LD_VAR 0 8
73040: PPUSH
73041: CALL_OW 488
73045: NOT
73046: IFFALSE 73050
// continue ;
73048: GO 72978
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
73050: LD_ADDR_VAR 0 9
73054: PUSH
73055: LD_VAR 0 12
73059: PUSH
73060: LD_INT 1
73062: ARRAY
73063: PPUSH
73064: LD_VAR 0 12
73068: PUSH
73069: LD_INT 2
73071: ARRAY
73072: PPUSH
73073: LD_VAR 0 7
73077: PPUSH
73078: LD_VAR 0 8
73082: PPUSH
73083: CALL_OW 298
73087: ST_TO_ADDR
// if tmp < distance then
73088: LD_VAR 0 9
73092: PUSH
73093: LD_VAR 0 10
73097: LESS
73098: IFFALSE 73120
// begin result := i ;
73100: LD_ADDR_VAR 0 5
73104: PUSH
73105: LD_VAR 0 6
73109: ST_TO_ADDR
// distance := tmp ;
73110: LD_ADDR_VAR 0 10
73114: PUSH
73115: LD_VAR 0 9
73119: ST_TO_ADDR
// end ; end ;
73120: GO 72978
73122: POP
73123: POP
// end ;
73124: LD_VAR 0 5
73128: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73129: LD_INT 0
73131: PPUSH
73132: PPUSH
// if not driver or not IsInUnit ( driver ) then
73133: LD_VAR 0 1
73137: NOT
73138: PUSH
73139: LD_VAR 0 1
73143: PPUSH
73144: CALL_OW 310
73148: NOT
73149: OR
73150: IFFALSE 73154
// exit ;
73152: GO 73244
// vehicle := IsInUnit ( driver ) ;
73154: LD_ADDR_VAR 0 3
73158: PUSH
73159: LD_VAR 0 1
73163: PPUSH
73164: CALL_OW 310
73168: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73169: LD_VAR 0 1
73173: PPUSH
73174: LD_STRING \
73176: PUSH
73177: LD_INT 0
73179: PUSH
73180: LD_INT 0
73182: PUSH
73183: LD_INT 0
73185: PUSH
73186: LD_INT 0
73188: PUSH
73189: LD_INT 0
73191: PUSH
73192: LD_INT 0
73194: PUSH
73195: EMPTY
73196: LIST
73197: LIST
73198: LIST
73199: LIST
73200: LIST
73201: LIST
73202: LIST
73203: PUSH
73204: LD_STRING E
73206: PUSH
73207: LD_INT 0
73209: PUSH
73210: LD_INT 0
73212: PUSH
73213: LD_VAR 0 3
73217: PUSH
73218: LD_INT 0
73220: PUSH
73221: LD_INT 0
73223: PUSH
73224: LD_INT 0
73226: PUSH
73227: EMPTY
73228: LIST
73229: LIST
73230: LIST
73231: LIST
73232: LIST
73233: LIST
73234: LIST
73235: PUSH
73236: EMPTY
73237: LIST
73238: LIST
73239: PPUSH
73240: CALL_OW 446
// end ;
73244: LD_VAR 0 2
73248: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73249: LD_INT 0
73251: PPUSH
73252: PPUSH
// if not driver or not IsInUnit ( driver ) then
73253: LD_VAR 0 1
73257: NOT
73258: PUSH
73259: LD_VAR 0 1
73263: PPUSH
73264: CALL_OW 310
73268: NOT
73269: OR
73270: IFFALSE 73274
// exit ;
73272: GO 73364
// vehicle := IsInUnit ( driver ) ;
73274: LD_ADDR_VAR 0 3
73278: PUSH
73279: LD_VAR 0 1
73283: PPUSH
73284: CALL_OW 310
73288: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73289: LD_VAR 0 1
73293: PPUSH
73294: LD_STRING \
73296: PUSH
73297: LD_INT 0
73299: PUSH
73300: LD_INT 0
73302: PUSH
73303: LD_INT 0
73305: PUSH
73306: LD_INT 0
73308: PUSH
73309: LD_INT 0
73311: PUSH
73312: LD_INT 0
73314: PUSH
73315: EMPTY
73316: LIST
73317: LIST
73318: LIST
73319: LIST
73320: LIST
73321: LIST
73322: LIST
73323: PUSH
73324: LD_STRING E
73326: PUSH
73327: LD_INT 0
73329: PUSH
73330: LD_INT 0
73332: PUSH
73333: LD_VAR 0 3
73337: PUSH
73338: LD_INT 0
73340: PUSH
73341: LD_INT 0
73343: PUSH
73344: LD_INT 0
73346: PUSH
73347: EMPTY
73348: LIST
73349: LIST
73350: LIST
73351: LIST
73352: LIST
73353: LIST
73354: LIST
73355: PUSH
73356: EMPTY
73357: LIST
73358: LIST
73359: PPUSH
73360: CALL_OW 447
// end ;
73364: LD_VAR 0 2
73368: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
73369: LD_INT 0
73371: PPUSH
73372: PPUSH
73373: PPUSH
// tmp := [ ] ;
73374: LD_ADDR_VAR 0 5
73378: PUSH
73379: EMPTY
73380: ST_TO_ADDR
// for i in units do
73381: LD_ADDR_VAR 0 4
73385: PUSH
73386: LD_VAR 0 1
73390: PUSH
73391: FOR_IN
73392: IFFALSE 73430
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
73394: LD_ADDR_VAR 0 5
73398: PUSH
73399: LD_VAR 0 5
73403: PPUSH
73404: LD_VAR 0 5
73408: PUSH
73409: LD_INT 1
73411: PLUS
73412: PPUSH
73413: LD_VAR 0 4
73417: PPUSH
73418: CALL_OW 256
73422: PPUSH
73423: CALL_OW 2
73427: ST_TO_ADDR
73428: GO 73391
73430: POP
73431: POP
// if not tmp then
73432: LD_VAR 0 5
73436: NOT
73437: IFFALSE 73441
// exit ;
73439: GO 73489
// if asc then
73441: LD_VAR 0 2
73445: IFFALSE 73469
// result := SortListByListAsc ( units , tmp ) else
73447: LD_ADDR_VAR 0 3
73451: PUSH
73452: LD_VAR 0 1
73456: PPUSH
73457: LD_VAR 0 5
73461: PPUSH
73462: CALL_OW 76
73466: ST_TO_ADDR
73467: GO 73489
// result := SortListByListDesc ( units , tmp ) ;
73469: LD_ADDR_VAR 0 3
73473: PUSH
73474: LD_VAR 0 1
73478: PPUSH
73479: LD_VAR 0 5
73483: PPUSH
73484: CALL_OW 77
73488: ST_TO_ADDR
// end ;
73489: LD_VAR 0 3
73493: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
73494: LD_INT 0
73496: PPUSH
73497: PPUSH
// task := GetTaskList ( mech ) ;
73498: LD_ADDR_VAR 0 4
73502: PUSH
73503: LD_VAR 0 1
73507: PPUSH
73508: CALL_OW 437
73512: ST_TO_ADDR
// if not task then
73513: LD_VAR 0 4
73517: NOT
73518: IFFALSE 73522
// exit ;
73520: GO 73564
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
73522: LD_ADDR_VAR 0 3
73526: PUSH
73527: LD_VAR 0 4
73531: PUSH
73532: LD_INT 1
73534: ARRAY
73535: PUSH
73536: LD_INT 1
73538: ARRAY
73539: PUSH
73540: LD_STRING r
73542: EQUAL
73543: PUSH
73544: LD_VAR 0 4
73548: PUSH
73549: LD_INT 1
73551: ARRAY
73552: PUSH
73553: LD_INT 4
73555: ARRAY
73556: PUSH
73557: LD_VAR 0 2
73561: EQUAL
73562: AND
73563: ST_TO_ADDR
// end ;
73564: LD_VAR 0 3
73568: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
73569: LD_INT 0
73571: PPUSH
// SetDir ( unit , d ) ;
73572: LD_VAR 0 1
73576: PPUSH
73577: LD_VAR 0 4
73581: PPUSH
73582: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
73586: LD_VAR 0 1
73590: PPUSH
73591: LD_VAR 0 2
73595: PPUSH
73596: LD_VAR 0 3
73600: PPUSH
73601: LD_VAR 0 5
73605: PPUSH
73606: CALL_OW 48
// end ;
73610: LD_VAR 0 6
73614: RET
// export function ToNaturalNumber ( number ) ; begin
73615: LD_INT 0
73617: PPUSH
// result := number div 1 ;
73618: LD_ADDR_VAR 0 2
73622: PUSH
73623: LD_VAR 0 1
73627: PUSH
73628: LD_INT 1
73630: DIV
73631: ST_TO_ADDR
// if number < 0 then
73632: LD_VAR 0 1
73636: PUSH
73637: LD_INT 0
73639: LESS
73640: IFFALSE 73650
// result := 0 ;
73642: LD_ADDR_VAR 0 2
73646: PUSH
73647: LD_INT 0
73649: ST_TO_ADDR
// end ;
73650: LD_VAR 0 2
73654: RET
// export function SortByClass ( units , class ) ; var un ; begin
73655: LD_INT 0
73657: PPUSH
73658: PPUSH
// if not units or not class then
73659: LD_VAR 0 1
73663: NOT
73664: PUSH
73665: LD_VAR 0 2
73669: NOT
73670: OR
73671: IFFALSE 73675
// exit ;
73673: GO 73770
// result := [ ] ;
73675: LD_ADDR_VAR 0 3
73679: PUSH
73680: EMPTY
73681: ST_TO_ADDR
// for un in units do
73682: LD_ADDR_VAR 0 4
73686: PUSH
73687: LD_VAR 0 1
73691: PUSH
73692: FOR_IN
73693: IFFALSE 73768
// if GetClass ( un ) = class then
73695: LD_VAR 0 4
73699: PPUSH
73700: CALL_OW 257
73704: PUSH
73705: LD_VAR 0 2
73709: EQUAL
73710: IFFALSE 73737
// result := Insert ( result , 1 , un ) else
73712: LD_ADDR_VAR 0 3
73716: PUSH
73717: LD_VAR 0 3
73721: PPUSH
73722: LD_INT 1
73724: PPUSH
73725: LD_VAR 0 4
73729: PPUSH
73730: CALL_OW 2
73734: ST_TO_ADDR
73735: GO 73766
// result := Replace ( result , result + 1 , un ) ;
73737: LD_ADDR_VAR 0 3
73741: PUSH
73742: LD_VAR 0 3
73746: PPUSH
73747: LD_VAR 0 3
73751: PUSH
73752: LD_INT 1
73754: PLUS
73755: PPUSH
73756: LD_VAR 0 4
73760: PPUSH
73761: CALL_OW 1
73765: ST_TO_ADDR
73766: GO 73692
73768: POP
73769: POP
// end ;
73770: LD_VAR 0 3
73774: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
73775: LD_INT 0
73777: PPUSH
73778: PPUSH
73779: PPUSH
73780: PPUSH
73781: PPUSH
73782: PPUSH
73783: PPUSH
// result := [ ] ;
73784: LD_ADDR_VAR 0 4
73788: PUSH
73789: EMPTY
73790: ST_TO_ADDR
// if x - r < 0 then
73791: LD_VAR 0 1
73795: PUSH
73796: LD_VAR 0 3
73800: MINUS
73801: PUSH
73802: LD_INT 0
73804: LESS
73805: IFFALSE 73817
// min_x := 0 else
73807: LD_ADDR_VAR 0 8
73811: PUSH
73812: LD_INT 0
73814: ST_TO_ADDR
73815: GO 73833
// min_x := x - r ;
73817: LD_ADDR_VAR 0 8
73821: PUSH
73822: LD_VAR 0 1
73826: PUSH
73827: LD_VAR 0 3
73831: MINUS
73832: ST_TO_ADDR
// if y - r < 0 then
73833: LD_VAR 0 2
73837: PUSH
73838: LD_VAR 0 3
73842: MINUS
73843: PUSH
73844: LD_INT 0
73846: LESS
73847: IFFALSE 73859
// min_y := 0 else
73849: LD_ADDR_VAR 0 7
73853: PUSH
73854: LD_INT 0
73856: ST_TO_ADDR
73857: GO 73875
// min_y := y - r ;
73859: LD_ADDR_VAR 0 7
73863: PUSH
73864: LD_VAR 0 2
73868: PUSH
73869: LD_VAR 0 3
73873: MINUS
73874: ST_TO_ADDR
// max_x := x + r ;
73875: LD_ADDR_VAR 0 9
73879: PUSH
73880: LD_VAR 0 1
73884: PUSH
73885: LD_VAR 0 3
73889: PLUS
73890: ST_TO_ADDR
// max_y := y + r ;
73891: LD_ADDR_VAR 0 10
73895: PUSH
73896: LD_VAR 0 2
73900: PUSH
73901: LD_VAR 0 3
73905: PLUS
73906: ST_TO_ADDR
// for _x = min_x to max_x do
73907: LD_ADDR_VAR 0 5
73911: PUSH
73912: DOUBLE
73913: LD_VAR 0 8
73917: DEC
73918: ST_TO_ADDR
73919: LD_VAR 0 9
73923: PUSH
73924: FOR_TO
73925: IFFALSE 74026
// for _y = min_y to max_y do
73927: LD_ADDR_VAR 0 6
73931: PUSH
73932: DOUBLE
73933: LD_VAR 0 7
73937: DEC
73938: ST_TO_ADDR
73939: LD_VAR 0 10
73943: PUSH
73944: FOR_TO
73945: IFFALSE 74022
// begin if not ValidHex ( _x , _y ) then
73947: LD_VAR 0 5
73951: PPUSH
73952: LD_VAR 0 6
73956: PPUSH
73957: CALL_OW 488
73961: NOT
73962: IFFALSE 73966
// continue ;
73964: GO 73944
// if GetResourceTypeXY ( _x , _y ) then
73966: LD_VAR 0 5
73970: PPUSH
73971: LD_VAR 0 6
73975: PPUSH
73976: CALL_OW 283
73980: IFFALSE 74020
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
73982: LD_ADDR_VAR 0 4
73986: PUSH
73987: LD_VAR 0 4
73991: PPUSH
73992: LD_VAR 0 4
73996: PUSH
73997: LD_INT 1
73999: PLUS
74000: PPUSH
74001: LD_VAR 0 5
74005: PUSH
74006: LD_VAR 0 6
74010: PUSH
74011: EMPTY
74012: LIST
74013: LIST
74014: PPUSH
74015: CALL_OW 1
74019: ST_TO_ADDR
// end ;
74020: GO 73944
74022: POP
74023: POP
74024: GO 73924
74026: POP
74027: POP
// end ;
74028: LD_VAR 0 4
74032: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
74033: LD_INT 0
74035: PPUSH
74036: PPUSH
74037: PPUSH
74038: PPUSH
74039: PPUSH
74040: PPUSH
74041: PPUSH
74042: PPUSH
// if not units then
74043: LD_VAR 0 1
74047: NOT
74048: IFFALSE 74052
// exit ;
74050: GO 74576
// result := UnitFilter ( units , [ f_ok ] ) ;
74052: LD_ADDR_VAR 0 3
74056: PUSH
74057: LD_VAR 0 1
74061: PPUSH
74062: LD_INT 50
74064: PUSH
74065: EMPTY
74066: LIST
74067: PPUSH
74068: CALL_OW 72
74072: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
74073: LD_ADDR_VAR 0 8
74077: PUSH
74078: LD_VAR 0 1
74082: PUSH
74083: LD_INT 1
74085: ARRAY
74086: PPUSH
74087: CALL_OW 255
74091: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
74092: LD_ADDR_VAR 0 10
74096: PUSH
74097: LD_INT 29
74099: PUSH
74100: LD_INT 91
74102: PUSH
74103: LD_INT 49
74105: PUSH
74106: EMPTY
74107: LIST
74108: LIST
74109: LIST
74110: ST_TO_ADDR
// if not result then
74111: LD_VAR 0 3
74115: NOT
74116: IFFALSE 74120
// exit ;
74118: GO 74576
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
74120: LD_ADDR_VAR 0 5
74124: PUSH
74125: LD_INT 81
74127: PUSH
74128: LD_VAR 0 8
74132: PUSH
74133: EMPTY
74134: LIST
74135: LIST
74136: PPUSH
74137: CALL_OW 69
74141: ST_TO_ADDR
// for i in result do
74142: LD_ADDR_VAR 0 4
74146: PUSH
74147: LD_VAR 0 3
74151: PUSH
74152: FOR_IN
74153: IFFALSE 74574
// begin tag := GetTag ( i ) + 1 ;
74155: LD_ADDR_VAR 0 9
74159: PUSH
74160: LD_VAR 0 4
74164: PPUSH
74165: CALL_OW 110
74169: PUSH
74170: LD_INT 1
74172: PLUS
74173: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
74174: LD_ADDR_VAR 0 7
74178: PUSH
74179: LD_VAR 0 4
74183: PPUSH
74184: CALL_OW 250
74188: PPUSH
74189: LD_VAR 0 4
74193: PPUSH
74194: CALL_OW 251
74198: PPUSH
74199: LD_INT 6
74201: PPUSH
74202: CALL 73775 0 3
74206: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
74207: LD_VAR 0 4
74211: PPUSH
74212: CALL_OW 247
74216: PUSH
74217: LD_INT 2
74219: EQUAL
74220: PUSH
74221: LD_VAR 0 7
74225: AND
74226: PUSH
74227: LD_VAR 0 4
74231: PPUSH
74232: CALL_OW 264
74236: PUSH
74237: LD_VAR 0 10
74241: IN
74242: NOT
74243: AND
74244: IFFALSE 74283
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
74246: LD_VAR 0 4
74250: PPUSH
74251: LD_VAR 0 7
74255: PUSH
74256: LD_INT 1
74258: ARRAY
74259: PUSH
74260: LD_INT 1
74262: ARRAY
74263: PPUSH
74264: LD_VAR 0 7
74268: PUSH
74269: LD_INT 1
74271: ARRAY
74272: PUSH
74273: LD_INT 2
74275: ARRAY
74276: PPUSH
74277: CALL_OW 116
74281: GO 74572
// if path > tag then
74283: LD_VAR 0 2
74287: PUSH
74288: LD_VAR 0 9
74292: GREATER
74293: IFFALSE 74501
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
74295: LD_ADDR_VAR 0 6
74299: PUSH
74300: LD_VAR 0 5
74304: PPUSH
74305: LD_INT 91
74307: PUSH
74308: LD_VAR 0 4
74312: PUSH
74313: LD_INT 8
74315: PUSH
74316: EMPTY
74317: LIST
74318: LIST
74319: LIST
74320: PPUSH
74321: CALL_OW 72
74325: ST_TO_ADDR
// if nearEnemy then
74326: LD_VAR 0 6
74330: IFFALSE 74399
// begin if GetWeapon ( i ) = ru_time_lapser then
74332: LD_VAR 0 4
74336: PPUSH
74337: CALL_OW 264
74341: PUSH
74342: LD_INT 49
74344: EQUAL
74345: IFFALSE 74373
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
74347: LD_VAR 0 4
74351: PPUSH
74352: LD_VAR 0 6
74356: PPUSH
74357: LD_VAR 0 4
74361: PPUSH
74362: CALL_OW 74
74366: PPUSH
74367: CALL_OW 112
74371: GO 74397
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
74373: LD_VAR 0 4
74377: PPUSH
74378: LD_VAR 0 6
74382: PPUSH
74383: LD_VAR 0 4
74387: PPUSH
74388: CALL_OW 74
74392: PPUSH
74393: CALL 75501 0 2
// end else
74397: GO 74499
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
74399: LD_VAR 0 4
74403: PPUSH
74404: LD_VAR 0 2
74408: PUSH
74409: LD_VAR 0 9
74413: ARRAY
74414: PUSH
74415: LD_INT 1
74417: ARRAY
74418: PPUSH
74419: LD_VAR 0 2
74423: PUSH
74424: LD_VAR 0 9
74428: ARRAY
74429: PUSH
74430: LD_INT 2
74432: ARRAY
74433: PPUSH
74434: CALL_OW 297
74438: PUSH
74439: LD_INT 6
74441: GREATER
74442: IFFALSE 74485
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
74444: LD_VAR 0 4
74448: PPUSH
74449: LD_VAR 0 2
74453: PUSH
74454: LD_VAR 0 9
74458: ARRAY
74459: PUSH
74460: LD_INT 1
74462: ARRAY
74463: PPUSH
74464: LD_VAR 0 2
74468: PUSH
74469: LD_VAR 0 9
74473: ARRAY
74474: PUSH
74475: LD_INT 2
74477: ARRAY
74478: PPUSH
74479: CALL_OW 114
74483: GO 74499
// SetTag ( i , tag ) ;
74485: LD_VAR 0 4
74489: PPUSH
74490: LD_VAR 0 9
74494: PPUSH
74495: CALL_OW 109
// end else
74499: GO 74572
// if enemy then
74501: LD_VAR 0 5
74505: IFFALSE 74572
// begin if GetWeapon ( i ) = ru_time_lapser then
74507: LD_VAR 0 4
74511: PPUSH
74512: CALL_OW 264
74516: PUSH
74517: LD_INT 49
74519: EQUAL
74520: IFFALSE 74548
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
74522: LD_VAR 0 4
74526: PPUSH
74527: LD_VAR 0 5
74531: PPUSH
74532: LD_VAR 0 4
74536: PPUSH
74537: CALL_OW 74
74541: PPUSH
74542: CALL_OW 112
74546: GO 74572
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
74548: LD_VAR 0 4
74552: PPUSH
74553: LD_VAR 0 5
74557: PPUSH
74558: LD_VAR 0 4
74562: PPUSH
74563: CALL_OW 74
74567: PPUSH
74568: CALL 75501 0 2
// end ; end ;
74572: GO 74152
74574: POP
74575: POP
// end ;
74576: LD_VAR 0 3
74580: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
74581: LD_INT 0
74583: PPUSH
74584: PPUSH
74585: PPUSH
// if not unit or IsInUnit ( unit ) then
74586: LD_VAR 0 1
74590: NOT
74591: PUSH
74592: LD_VAR 0 1
74596: PPUSH
74597: CALL_OW 310
74601: OR
74602: IFFALSE 74606
// exit ;
74604: GO 74697
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
74606: LD_ADDR_VAR 0 4
74610: PUSH
74611: LD_VAR 0 1
74615: PPUSH
74616: CALL_OW 250
74620: PPUSH
74621: LD_VAR 0 2
74625: PPUSH
74626: LD_INT 1
74628: PPUSH
74629: CALL_OW 272
74633: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
74634: LD_ADDR_VAR 0 5
74638: PUSH
74639: LD_VAR 0 1
74643: PPUSH
74644: CALL_OW 251
74648: PPUSH
74649: LD_VAR 0 2
74653: PPUSH
74654: LD_INT 1
74656: PPUSH
74657: CALL_OW 273
74661: ST_TO_ADDR
// if ValidHex ( x , y ) then
74662: LD_VAR 0 4
74666: PPUSH
74667: LD_VAR 0 5
74671: PPUSH
74672: CALL_OW 488
74676: IFFALSE 74697
// ComTurnXY ( unit , x , y ) ;
74678: LD_VAR 0 1
74682: PPUSH
74683: LD_VAR 0 4
74687: PPUSH
74688: LD_VAR 0 5
74692: PPUSH
74693: CALL_OW 118
// end ;
74697: LD_VAR 0 3
74701: RET
// export function SeeUnits ( side , units ) ; var i ; begin
74702: LD_INT 0
74704: PPUSH
74705: PPUSH
// result := false ;
74706: LD_ADDR_VAR 0 3
74710: PUSH
74711: LD_INT 0
74713: ST_TO_ADDR
// if not units then
74714: LD_VAR 0 2
74718: NOT
74719: IFFALSE 74723
// exit ;
74721: GO 74768
// for i in units do
74723: LD_ADDR_VAR 0 4
74727: PUSH
74728: LD_VAR 0 2
74732: PUSH
74733: FOR_IN
74734: IFFALSE 74766
// if See ( side , i ) then
74736: LD_VAR 0 1
74740: PPUSH
74741: LD_VAR 0 4
74745: PPUSH
74746: CALL_OW 292
74750: IFFALSE 74764
// begin result := true ;
74752: LD_ADDR_VAR 0 3
74756: PUSH
74757: LD_INT 1
74759: ST_TO_ADDR
// exit ;
74760: POP
74761: POP
74762: GO 74768
// end ;
74764: GO 74733
74766: POP
74767: POP
// end ;
74768: LD_VAR 0 3
74772: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
74773: LD_INT 0
74775: PPUSH
74776: PPUSH
74777: PPUSH
74778: PPUSH
// if not unit or not points then
74779: LD_VAR 0 1
74783: NOT
74784: PUSH
74785: LD_VAR 0 2
74789: NOT
74790: OR
74791: IFFALSE 74795
// exit ;
74793: GO 74885
// dist := 99999 ;
74795: LD_ADDR_VAR 0 5
74799: PUSH
74800: LD_INT 99999
74802: ST_TO_ADDR
// for i in points do
74803: LD_ADDR_VAR 0 4
74807: PUSH
74808: LD_VAR 0 2
74812: PUSH
74813: FOR_IN
74814: IFFALSE 74883
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
74816: LD_ADDR_VAR 0 6
74820: PUSH
74821: LD_VAR 0 1
74825: PPUSH
74826: LD_VAR 0 4
74830: PUSH
74831: LD_INT 1
74833: ARRAY
74834: PPUSH
74835: LD_VAR 0 4
74839: PUSH
74840: LD_INT 2
74842: ARRAY
74843: PPUSH
74844: CALL_OW 297
74848: ST_TO_ADDR
// if tmpDist < dist then
74849: LD_VAR 0 6
74853: PUSH
74854: LD_VAR 0 5
74858: LESS
74859: IFFALSE 74881
// begin result := i ;
74861: LD_ADDR_VAR 0 3
74865: PUSH
74866: LD_VAR 0 4
74870: ST_TO_ADDR
// dist := tmpDist ;
74871: LD_ADDR_VAR 0 5
74875: PUSH
74876: LD_VAR 0 6
74880: ST_TO_ADDR
// end ; end ;
74881: GO 74813
74883: POP
74884: POP
// end ;
74885: LD_VAR 0 3
74889: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
74890: LD_INT 0
74892: PPUSH
// uc_side := side ;
74893: LD_ADDR_OWVAR 20
74897: PUSH
74898: LD_VAR 0 1
74902: ST_TO_ADDR
// uc_nation := 3 ;
74903: LD_ADDR_OWVAR 21
74907: PUSH
74908: LD_INT 3
74910: ST_TO_ADDR
// vc_chassis := 25 ;
74911: LD_ADDR_OWVAR 37
74915: PUSH
74916: LD_INT 25
74918: ST_TO_ADDR
// vc_engine := engine_siberite ;
74919: LD_ADDR_OWVAR 39
74923: PUSH
74924: LD_INT 3
74926: ST_TO_ADDR
// vc_control := control_computer ;
74927: LD_ADDR_OWVAR 38
74931: PUSH
74932: LD_INT 3
74934: ST_TO_ADDR
// vc_weapon := 59 ;
74935: LD_ADDR_OWVAR 40
74939: PUSH
74940: LD_INT 59
74942: ST_TO_ADDR
// result := CreateVehicle ;
74943: LD_ADDR_VAR 0 5
74947: PUSH
74948: CALL_OW 45
74952: ST_TO_ADDR
// SetDir ( result , d ) ;
74953: LD_VAR 0 5
74957: PPUSH
74958: LD_VAR 0 4
74962: PPUSH
74963: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
74967: LD_VAR 0 5
74971: PPUSH
74972: LD_VAR 0 2
74976: PPUSH
74977: LD_VAR 0 3
74981: PPUSH
74982: LD_INT 0
74984: PPUSH
74985: CALL_OW 48
// end ;
74989: LD_VAR 0 5
74993: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
74994: LD_INT 0
74996: PPUSH
74997: PPUSH
74998: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
74999: LD_ADDR_VAR 0 2
75003: PUSH
75004: LD_INT 0
75006: PUSH
75007: LD_INT 0
75009: PUSH
75010: LD_INT 0
75012: PUSH
75013: LD_INT 0
75015: PUSH
75016: EMPTY
75017: LIST
75018: LIST
75019: LIST
75020: LIST
75021: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
75022: LD_VAR 0 1
75026: NOT
75027: PUSH
75028: LD_VAR 0 1
75032: PPUSH
75033: CALL_OW 264
75037: PUSH
75038: LD_INT 12
75040: PUSH
75041: LD_INT 51
75043: PUSH
75044: LD_INT 32
75046: PUSH
75047: LD_INT 89
75049: PUSH
75050: EMPTY
75051: LIST
75052: LIST
75053: LIST
75054: LIST
75055: IN
75056: NOT
75057: OR
75058: IFFALSE 75062
// exit ;
75060: GO 75160
// for i := 1 to 3 do
75062: LD_ADDR_VAR 0 3
75066: PUSH
75067: DOUBLE
75068: LD_INT 1
75070: DEC
75071: ST_TO_ADDR
75072: LD_INT 3
75074: PUSH
75075: FOR_TO
75076: IFFALSE 75158
// begin tmp := GetCargo ( cargo , i ) ;
75078: LD_ADDR_VAR 0 4
75082: PUSH
75083: LD_VAR 0 1
75087: PPUSH
75088: LD_VAR 0 3
75092: PPUSH
75093: CALL_OW 289
75097: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
75098: LD_ADDR_VAR 0 2
75102: PUSH
75103: LD_VAR 0 2
75107: PPUSH
75108: LD_VAR 0 3
75112: PPUSH
75113: LD_VAR 0 4
75117: PPUSH
75118: CALL_OW 1
75122: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
75123: LD_ADDR_VAR 0 2
75127: PUSH
75128: LD_VAR 0 2
75132: PPUSH
75133: LD_INT 4
75135: PPUSH
75136: LD_VAR 0 2
75140: PUSH
75141: LD_INT 4
75143: ARRAY
75144: PUSH
75145: LD_VAR 0 4
75149: PLUS
75150: PPUSH
75151: CALL_OW 1
75155: ST_TO_ADDR
// end ;
75156: GO 75075
75158: POP
75159: POP
// end ;
75160: LD_VAR 0 2
75164: RET
// export function Length ( array ) ; begin
75165: LD_INT 0
75167: PPUSH
// result := array + 0 ;
75168: LD_ADDR_VAR 0 2
75172: PUSH
75173: LD_VAR 0 1
75177: PUSH
75178: LD_INT 0
75180: PLUS
75181: ST_TO_ADDR
// end ;
75182: LD_VAR 0 2
75186: RET
// export function PrepareArray ( array ) ; begin
75187: LD_INT 0
75189: PPUSH
// result := array diff 0 ;
75190: LD_ADDR_VAR 0 2
75194: PUSH
75195: LD_VAR 0 1
75199: PUSH
75200: LD_INT 0
75202: DIFF
75203: ST_TO_ADDR
// if not result [ 1 ] then
75204: LD_VAR 0 2
75208: PUSH
75209: LD_INT 1
75211: ARRAY
75212: NOT
75213: IFFALSE 75233
// result := Delete ( result , 1 ) ;
75215: LD_ADDR_VAR 0 2
75219: PUSH
75220: LD_VAR 0 2
75224: PPUSH
75225: LD_INT 1
75227: PPUSH
75228: CALL_OW 3
75232: ST_TO_ADDR
// end ;
75233: LD_VAR 0 2
75237: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
75238: LD_INT 0
75240: PPUSH
75241: PPUSH
75242: PPUSH
75243: PPUSH
// sibRocketRange := 25 ;
75244: LD_ADDR_VAR 0 6
75248: PUSH
75249: LD_INT 25
75251: ST_TO_ADDR
// result := false ;
75252: LD_ADDR_VAR 0 4
75256: PUSH
75257: LD_INT 0
75259: ST_TO_ADDR
// for i := 0 to 5 do
75260: LD_ADDR_VAR 0 5
75264: PUSH
75265: DOUBLE
75266: LD_INT 0
75268: DEC
75269: ST_TO_ADDR
75270: LD_INT 5
75272: PUSH
75273: FOR_TO
75274: IFFALSE 75341
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
75276: LD_VAR 0 1
75280: PPUSH
75281: LD_VAR 0 5
75285: PPUSH
75286: LD_VAR 0 6
75290: PPUSH
75291: CALL_OW 272
75295: PPUSH
75296: LD_VAR 0 2
75300: PPUSH
75301: LD_VAR 0 5
75305: PPUSH
75306: LD_VAR 0 6
75310: PPUSH
75311: CALL_OW 273
75315: PPUSH
75316: LD_VAR 0 3
75320: PPUSH
75321: CALL_OW 309
75325: IFFALSE 75339
// begin result := true ;
75327: LD_ADDR_VAR 0 4
75331: PUSH
75332: LD_INT 1
75334: ST_TO_ADDR
// exit ;
75335: POP
75336: POP
75337: GO 75343
// end ;
75339: GO 75273
75341: POP
75342: POP
// end ;
75343: LD_VAR 0 4
75347: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
75348: LD_INT 0
75350: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
75351: LD_VAR 0 1
75355: PPUSH
75356: LD_VAR 0 2
75360: PPUSH
75361: LD_INT 0
75363: PPUSH
75364: LD_INT 0
75366: PPUSH
75367: LD_INT 1
75369: PPUSH
75370: LD_INT 0
75372: PPUSH
75373: CALL_OW 587
// end ;
75377: LD_VAR 0 3
75381: RET
// export function CenterOnNow ( unit ) ; begin
75382: LD_INT 0
75384: PPUSH
// result := IsInUnit ( unit ) ;
75385: LD_ADDR_VAR 0 2
75389: PUSH
75390: LD_VAR 0 1
75394: PPUSH
75395: CALL_OW 310
75399: ST_TO_ADDR
// if not result then
75400: LD_VAR 0 2
75404: NOT
75405: IFFALSE 75417
// result := unit ;
75407: LD_ADDR_VAR 0 2
75411: PUSH
75412: LD_VAR 0 1
75416: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
75417: LD_VAR 0 1
75421: PPUSH
75422: CALL_OW 87
// end ;
75426: LD_VAR 0 2
75430: RET
// export function ComMoveHex ( unit , hex ) ; begin
75431: LD_INT 0
75433: PPUSH
// if not hex then
75434: LD_VAR 0 2
75438: NOT
75439: IFFALSE 75443
// exit ;
75441: GO 75496
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
75443: LD_VAR 0 2
75447: PUSH
75448: LD_INT 1
75450: ARRAY
75451: PPUSH
75452: LD_VAR 0 2
75456: PUSH
75457: LD_INT 2
75459: ARRAY
75460: PPUSH
75461: CALL_OW 428
75465: IFFALSE 75469
// exit ;
75467: GO 75496
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
75469: LD_VAR 0 1
75473: PPUSH
75474: LD_VAR 0 2
75478: PUSH
75479: LD_INT 1
75481: ARRAY
75482: PPUSH
75483: LD_VAR 0 2
75487: PUSH
75488: LD_INT 2
75490: ARRAY
75491: PPUSH
75492: CALL_OW 111
// end ;
75496: LD_VAR 0 3
75500: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
75501: LD_INT 0
75503: PPUSH
75504: PPUSH
75505: PPUSH
// if not unit or not enemy then
75506: LD_VAR 0 1
75510: NOT
75511: PUSH
75512: LD_VAR 0 2
75516: NOT
75517: OR
75518: IFFALSE 75522
// exit ;
75520: GO 75646
// x := GetX ( enemy ) ;
75522: LD_ADDR_VAR 0 4
75526: PUSH
75527: LD_VAR 0 2
75531: PPUSH
75532: CALL_OW 250
75536: ST_TO_ADDR
// y := GetY ( enemy ) ;
75537: LD_ADDR_VAR 0 5
75541: PUSH
75542: LD_VAR 0 2
75546: PPUSH
75547: CALL_OW 251
75551: ST_TO_ADDR
// if ValidHex ( x , y ) then
75552: LD_VAR 0 4
75556: PPUSH
75557: LD_VAR 0 5
75561: PPUSH
75562: CALL_OW 488
75566: IFFALSE 75646
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
75568: LD_VAR 0 2
75572: PPUSH
75573: CALL_OW 247
75577: PUSH
75578: LD_INT 3
75580: PUSH
75581: LD_INT 2
75583: PUSH
75584: EMPTY
75585: LIST
75586: LIST
75587: IN
75588: PUSH
75589: LD_VAR 0 1
75593: PPUSH
75594: CALL_OW 255
75598: PPUSH
75599: LD_VAR 0 2
75603: PPUSH
75604: CALL_OW 292
75608: OR
75609: IFFALSE 75627
// ComAttackUnit ( unit , enemy ) else
75611: LD_VAR 0 1
75615: PPUSH
75616: LD_VAR 0 2
75620: PPUSH
75621: CALL_OW 115
75625: GO 75646
// ComAgressiveMove ( unit , x , y ) ;
75627: LD_VAR 0 1
75631: PPUSH
75632: LD_VAR 0 4
75636: PPUSH
75637: LD_VAR 0 5
75641: PPUSH
75642: CALL_OW 114
// end ;
75646: LD_VAR 0 3
75650: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
75651: LD_INT 0
75653: PPUSH
75654: PPUSH
75655: PPUSH
// list := AreaToList ( area , 0 ) ;
75656: LD_ADDR_VAR 0 5
75660: PUSH
75661: LD_VAR 0 1
75665: PPUSH
75666: LD_INT 0
75668: PPUSH
75669: CALL_OW 517
75673: ST_TO_ADDR
// if not list then
75674: LD_VAR 0 5
75678: NOT
75679: IFFALSE 75683
// exit ;
75681: GO 75813
// if all then
75683: LD_VAR 0 2
75687: IFFALSE 75775
// begin for i := 1 to list [ 1 ] do
75689: LD_ADDR_VAR 0 4
75693: PUSH
75694: DOUBLE
75695: LD_INT 1
75697: DEC
75698: ST_TO_ADDR
75699: LD_VAR 0 5
75703: PUSH
75704: LD_INT 1
75706: ARRAY
75707: PUSH
75708: FOR_TO
75709: IFFALSE 75771
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
75711: LD_ADDR_VAR 0 3
75715: PUSH
75716: LD_VAR 0 3
75720: PPUSH
75721: LD_VAR 0 3
75725: PUSH
75726: LD_INT 1
75728: PLUS
75729: PPUSH
75730: LD_VAR 0 5
75734: PUSH
75735: LD_INT 1
75737: ARRAY
75738: PUSH
75739: LD_VAR 0 4
75743: ARRAY
75744: PUSH
75745: LD_VAR 0 5
75749: PUSH
75750: LD_INT 2
75752: ARRAY
75753: PUSH
75754: LD_VAR 0 4
75758: ARRAY
75759: PUSH
75760: EMPTY
75761: LIST
75762: LIST
75763: PPUSH
75764: CALL_OW 1
75768: ST_TO_ADDR
75769: GO 75708
75771: POP
75772: POP
// exit ;
75773: GO 75813
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
75775: LD_ADDR_VAR 0 3
75779: PUSH
75780: LD_VAR 0 5
75784: PUSH
75785: LD_INT 1
75787: ARRAY
75788: PUSH
75789: LD_INT 1
75791: ARRAY
75792: PUSH
75793: LD_VAR 0 5
75797: PUSH
75798: LD_INT 2
75800: ARRAY
75801: PUSH
75802: LD_INT 1
75804: ARRAY
75805: PUSH
75806: EMPTY
75807: LIST
75808: LIST
75809: PUSH
75810: EMPTY
75811: LIST
75812: ST_TO_ADDR
// end ;
75813: LD_VAR 0 3
75817: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
75818: LD_INT 0
75820: PPUSH
75821: PPUSH
// list := AreaToList ( area , 0 ) ;
75822: LD_ADDR_VAR 0 4
75826: PUSH
75827: LD_VAR 0 1
75831: PPUSH
75832: LD_INT 0
75834: PPUSH
75835: CALL_OW 517
75839: ST_TO_ADDR
// if not list then
75840: LD_VAR 0 4
75844: NOT
75845: IFFALSE 75849
// exit ;
75847: GO 75890
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
75849: LD_ADDR_VAR 0 3
75853: PUSH
75854: LD_VAR 0 4
75858: PUSH
75859: LD_INT 1
75861: ARRAY
75862: PUSH
75863: LD_INT 1
75865: ARRAY
75866: PUSH
75867: LD_VAR 0 4
75871: PUSH
75872: LD_INT 2
75874: ARRAY
75875: PUSH
75876: LD_INT 1
75878: ARRAY
75879: PUSH
75880: LD_VAR 0 2
75884: PUSH
75885: EMPTY
75886: LIST
75887: LIST
75888: LIST
75889: ST_TO_ADDR
// end ;
75890: LD_VAR 0 3
75894: RET
// export function First ( array ) ; begin
75895: LD_INT 0
75897: PPUSH
// if not array then
75898: LD_VAR 0 1
75902: NOT
75903: IFFALSE 75907
// exit ;
75905: GO 75921
// result := array [ 1 ] ;
75907: LD_ADDR_VAR 0 2
75911: PUSH
75912: LD_VAR 0 1
75916: PUSH
75917: LD_INT 1
75919: ARRAY
75920: ST_TO_ADDR
// end ;
75921: LD_VAR 0 2
75925: RET
// export function Last ( array ) ; begin
75926: LD_INT 0
75928: PPUSH
// if not array then
75929: LD_VAR 0 1
75933: NOT
75934: IFFALSE 75938
// exit ;
75936: GO 75954
// result := array [ array ] ;
75938: LD_ADDR_VAR 0 2
75942: PUSH
75943: LD_VAR 0 1
75947: PUSH
75948: LD_VAR 0 1
75952: ARRAY
75953: ST_TO_ADDR
// end ;
75954: LD_VAR 0 2
75958: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
75959: LD_INT 0
75961: PPUSH
75962: PPUSH
// result := [ ] ;
75963: LD_ADDR_VAR 0 5
75967: PUSH
75968: EMPTY
75969: ST_TO_ADDR
// if not array then
75970: LD_VAR 0 1
75974: NOT
75975: IFFALSE 75979
// exit ;
75977: GO 76091
// for i := 1 to array do
75979: LD_ADDR_VAR 0 6
75983: PUSH
75984: DOUBLE
75985: LD_INT 1
75987: DEC
75988: ST_TO_ADDR
75989: LD_VAR 0 1
75993: PUSH
75994: FOR_TO
75995: IFFALSE 76089
// if array [ i ] [ index ] = value then
75997: LD_VAR 0 1
76001: PUSH
76002: LD_VAR 0 6
76006: ARRAY
76007: PUSH
76008: LD_VAR 0 2
76012: ARRAY
76013: PUSH
76014: LD_VAR 0 3
76018: EQUAL
76019: IFFALSE 76087
// begin if indexColumn then
76021: LD_VAR 0 4
76025: IFFALSE 76061
// result := Join ( result , array [ i ] [ indexColumn ] ) else
76027: LD_ADDR_VAR 0 5
76031: PUSH
76032: LD_VAR 0 5
76036: PPUSH
76037: LD_VAR 0 1
76041: PUSH
76042: LD_VAR 0 6
76046: ARRAY
76047: PUSH
76048: LD_VAR 0 4
76052: ARRAY
76053: PPUSH
76054: CALL 71429 0 2
76058: ST_TO_ADDR
76059: GO 76087
// result := Join ( result , array [ i ] ) ;
76061: LD_ADDR_VAR 0 5
76065: PUSH
76066: LD_VAR 0 5
76070: PPUSH
76071: LD_VAR 0 1
76075: PUSH
76076: LD_VAR 0 6
76080: ARRAY
76081: PPUSH
76082: CALL 71429 0 2
76086: ST_TO_ADDR
// end ;
76087: GO 75994
76089: POP
76090: POP
// end ;
76091: LD_VAR 0 5
76095: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
76096: LD_INT 0
76098: PPUSH
76099: PPUSH
76100: PPUSH
// if btype = b_depot then
76101: LD_VAR 0 2
76105: PUSH
76106: LD_INT 0
76108: EQUAL
76109: IFFALSE 76121
// begin result := true ;
76111: LD_ADDR_VAR 0 3
76115: PUSH
76116: LD_INT 1
76118: ST_TO_ADDR
// exit ;
76119: GO 76237
// end ; pom := GetBase ( depot ) ;
76121: LD_ADDR_VAR 0 4
76125: PUSH
76126: LD_VAR 0 1
76130: PPUSH
76131: CALL_OW 274
76135: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
76136: LD_ADDR_VAR 0 5
76140: PUSH
76141: LD_VAR 0 2
76145: PPUSH
76146: LD_VAR 0 1
76150: PPUSH
76151: CALL_OW 248
76155: PPUSH
76156: CALL_OW 450
76160: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
76161: LD_ADDR_VAR 0 3
76165: PUSH
76166: LD_VAR 0 4
76170: PPUSH
76171: LD_INT 1
76173: PPUSH
76174: CALL_OW 275
76178: PUSH
76179: LD_VAR 0 5
76183: PUSH
76184: LD_INT 1
76186: ARRAY
76187: GREATEREQUAL
76188: PUSH
76189: LD_VAR 0 4
76193: PPUSH
76194: LD_INT 2
76196: PPUSH
76197: CALL_OW 275
76201: PUSH
76202: LD_VAR 0 5
76206: PUSH
76207: LD_INT 2
76209: ARRAY
76210: GREATEREQUAL
76211: AND
76212: PUSH
76213: LD_VAR 0 4
76217: PPUSH
76218: LD_INT 3
76220: PPUSH
76221: CALL_OW 275
76225: PUSH
76226: LD_VAR 0 5
76230: PUSH
76231: LD_INT 3
76233: ARRAY
76234: GREATEREQUAL
76235: AND
76236: ST_TO_ADDR
// end ;
76237: LD_VAR 0 3
76241: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
76242: LD_INT 0
76244: PPUSH
// if not vehicles or not parkingPoint then
76245: LD_VAR 0 1
76249: NOT
76250: PUSH
76251: LD_VAR 0 2
76255: NOT
76256: OR
76257: IFFALSE 76261
// exit ;
76259: GO 76359
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
76261: LD_ADDR_VAR 0 1
76265: PUSH
76266: LD_VAR 0 1
76270: PPUSH
76271: LD_INT 50
76273: PUSH
76274: EMPTY
76275: LIST
76276: PUSH
76277: LD_INT 3
76279: PUSH
76280: LD_INT 92
76282: PUSH
76283: LD_VAR 0 2
76287: PUSH
76288: LD_INT 1
76290: ARRAY
76291: PUSH
76292: LD_VAR 0 2
76296: PUSH
76297: LD_INT 2
76299: ARRAY
76300: PUSH
76301: LD_INT 8
76303: PUSH
76304: EMPTY
76305: LIST
76306: LIST
76307: LIST
76308: LIST
76309: PUSH
76310: EMPTY
76311: LIST
76312: LIST
76313: PUSH
76314: EMPTY
76315: LIST
76316: LIST
76317: PPUSH
76318: CALL_OW 72
76322: ST_TO_ADDR
// if not vehicles then
76323: LD_VAR 0 1
76327: NOT
76328: IFFALSE 76332
// exit ;
76330: GO 76359
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
76332: LD_VAR 0 1
76336: PPUSH
76337: LD_VAR 0 2
76341: PUSH
76342: LD_INT 1
76344: ARRAY
76345: PPUSH
76346: LD_VAR 0 2
76350: PUSH
76351: LD_INT 2
76353: ARRAY
76354: PPUSH
76355: CALL_OW 111
// end ;
76359: LD_VAR 0 3
76363: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
76364: LD_INT 0
76366: PPUSH
76367: PPUSH
76368: PPUSH
// if not side or not area then
76369: LD_VAR 0 1
76373: NOT
76374: PUSH
76375: LD_VAR 0 2
76379: NOT
76380: OR
76381: IFFALSE 76385
// exit ;
76383: GO 76504
// tmp := AreaToList ( area , 0 ) ;
76385: LD_ADDR_VAR 0 5
76389: PUSH
76390: LD_VAR 0 2
76394: PPUSH
76395: LD_INT 0
76397: PPUSH
76398: CALL_OW 517
76402: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
76403: LD_ADDR_VAR 0 4
76407: PUSH
76408: DOUBLE
76409: LD_INT 1
76411: DEC
76412: ST_TO_ADDR
76413: LD_VAR 0 5
76417: PUSH
76418: LD_INT 1
76420: ARRAY
76421: PUSH
76422: FOR_TO
76423: IFFALSE 76502
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
76425: LD_VAR 0 5
76429: PUSH
76430: LD_INT 1
76432: ARRAY
76433: PUSH
76434: LD_VAR 0 4
76438: ARRAY
76439: PPUSH
76440: LD_VAR 0 5
76444: PUSH
76445: LD_INT 2
76447: ARRAY
76448: PUSH
76449: LD_VAR 0 4
76453: ARRAY
76454: PPUSH
76455: CALL_OW 351
76459: IFFALSE 76500
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
76461: LD_VAR 0 5
76465: PUSH
76466: LD_INT 1
76468: ARRAY
76469: PUSH
76470: LD_VAR 0 4
76474: ARRAY
76475: PPUSH
76476: LD_VAR 0 5
76480: PUSH
76481: LD_INT 2
76483: ARRAY
76484: PUSH
76485: LD_VAR 0 4
76489: ARRAY
76490: PPUSH
76491: LD_VAR 0 1
76495: PPUSH
76496: CALL_OW 244
// end ;
76500: GO 76422
76502: POP
76503: POP
// end ; end_of_file
76504: LD_VAR 0 3
76508: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
76509: LD_VAR 0 1
76513: PUSH
76514: LD_INT 200
76516: DOUBLE
76517: GREATEREQUAL
76518: IFFALSE 76526
76520: LD_INT 299
76522: DOUBLE
76523: LESSEQUAL
76524: IFTRUE 76528
76526: GO 76560
76528: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
76529: LD_VAR 0 1
76533: PPUSH
76534: LD_VAR 0 2
76538: PPUSH
76539: LD_VAR 0 3
76543: PPUSH
76544: LD_VAR 0 4
76548: PPUSH
76549: LD_VAR 0 5
76553: PPUSH
76554: CALL 29220 0 5
76558: GO 76637
76560: LD_INT 300
76562: DOUBLE
76563: GREATEREQUAL
76564: IFFALSE 76572
76566: LD_INT 399
76568: DOUBLE
76569: LESSEQUAL
76570: IFTRUE 76574
76572: GO 76636
76574: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
76575: LD_VAR 0 1
76579: PPUSH
76580: LD_VAR 0 2
76584: PPUSH
76585: LD_VAR 0 3
76589: PPUSH
76590: LD_VAR 0 4
76594: PPUSH
76595: LD_VAR 0 5
76599: PPUSH
76600: LD_VAR 0 6
76604: PPUSH
76605: LD_VAR 0 7
76609: PPUSH
76610: LD_VAR 0 8
76614: PPUSH
76615: LD_VAR 0 9
76619: PPUSH
76620: LD_VAR 0 10
76624: PPUSH
76625: LD_VAR 0 11
76629: PPUSH
76630: CALL 25545 0 11
76634: GO 76637
76636: POP
// end ;
76637: PPOPN 11
76639: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
76640: LD_VAR 0 1
76644: PPUSH
76645: LD_VAR 0 2
76649: PPUSH
76650: LD_VAR 0 3
76654: PPUSH
76655: LD_VAR 0 4
76659: PPUSH
76660: LD_VAR 0 5
76664: PPUSH
76665: CALL 28956 0 5
// end ; end_of_file
76669: PPOPN 5
76671: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76672: LD_VAR 0 1
76676: PPUSH
76677: LD_VAR 0 2
76681: PPUSH
76682: LD_VAR 0 3
76686: PPUSH
76687: LD_VAR 0 4
76691: PPUSH
76692: LD_VAR 0 5
76696: PPUSH
76697: LD_VAR 0 6
76701: PPUSH
76702: CALL 13197 0 6
// end ;
76706: PPOPN 6
76708: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
76709: LD_INT 0
76711: PPUSH
// begin if not units then
76712: LD_VAR 0 1
76716: NOT
76717: IFFALSE 76721
// exit ;
76719: GO 76721
// end ;
76721: PPOPN 7
76723: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
76724: CALL 13084 0 0
// end ;
76728: PPOPN 1
76730: END
