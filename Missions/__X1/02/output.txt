// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 46 0 0
// CreateNature ;
  19: CALL 537 0 0
// PrepareAmericans ;
  23: CALL 834 0 0
// PrepareArabian ;
  27: CALL 11732 0 0
// if debug then
  31: LD_EXP 1
  35: IFFALSE 41
// DebugMode ;
  37: CALL 218 0 0
// Action ;
  41: CALL 4691 0 0
// end ;
  45: END
// export debug , prefix , missionStart , aviradzeSpotted , deltaSpotted , spottedBeforeRadio , sciSpotted , aviradzeQuestDone , sciCounterKill , usAlert , usActiveDefend , gladstoneEscaped , timeUntilFarmer , attackDeltaAllowed , trickyMove , usPatrol , trap , lostCounter ; function Init ; begin
  46: LD_INT 0
  48: PPUSH
// debug := false ;
  49: LD_ADDR_EXP 1
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// missionStart := false ;
  57: LD_ADDR_EXP 3
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// aviradzeSpotted := false ;
  65: LD_ADDR_EXP 4
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// deltaSpotted := false ;
  73: LD_ADDR_EXP 5
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// sciSpotted := false ;
  81: LD_ADDR_EXP 7
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// sciCounterKill := 0 ;
  89: LD_ADDR_EXP 9
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// aviradzeQuestDone := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// attackDeltaAllowed := false ;
 105: LD_ADDR_EXP 14
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usAlert := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// usActiveDefend := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// usPatrol := [ ] ;
 129: LD_ADDR_EXP 16
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// timeUntilFarmer := [ 40 40$00 , 30 30$00 , 20 20$00 , 15 15$00 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 13
 140: PUSH
 141: LD_INT 84000
 143: PUSH
 144: LD_INT 63000
 146: PUSH
 147: LD_INT 42000
 149: PUSH
 150: LD_INT 31500
 152: PUSH
 153: EMPTY
 154: LIST
 155: LIST
 156: LIST
 157: LIST
 158: PUSH
 159: LD_OWVAR 67
 163: ARRAY
 164: ST_TO_ADDR
// trickyMove := false ;
 165: LD_ADDR_EXP 15
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// gladstoneEscaped := false ;
 173: LD_ADDR_EXP 12
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// prefix := 01_ ;
 181: LD_ADDR_EXP 2
 185: PUSH
 186: LD_STRING 01_
 188: ST_TO_ADDR
// trap := 0 ;
 189: LD_ADDR_EXP 17
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// lostCounter := false ;
 197: LD_ADDR_EXP 18
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// spottedBeforeRadio := false ;
 205: LD_ADDR_EXP 6
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// end ;
 213: LD_VAR 0 1
 217: RET
// function DebugMode ; begin
 218: LD_INT 0
 220: PPUSH
// FogOff ( 1 ) ;
 221: LD_INT 1
 223: PPUSH
 224: CALL_OW 344
// Difficulty := 2 ;
 228: LD_ADDR_OWVAR 67
 232: PUSH
 233: LD_INT 2
 235: ST_TO_ADDR
// end ; end_of_file
 236: LD_VAR 0 1
 240: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 241: LD_INT 0
 243: PPUSH
// uc_side := side ;
 244: LD_ADDR_OWVAR 20
 248: PUSH
 249: LD_VAR 0 1
 253: ST_TO_ADDR
// uc_nation := nation ;
 254: LD_ADDR_OWVAR 21
 258: PUSH
 259: LD_VAR 0 2
 263: ST_TO_ADDR
// vc_chassis := chassis ;
 264: LD_ADDR_OWVAR 37
 268: PUSH
 269: LD_VAR 0 3
 273: ST_TO_ADDR
// vc_engine := engine ;
 274: LD_ADDR_OWVAR 39
 278: PUSH
 279: LD_VAR 0 4
 283: ST_TO_ADDR
// vc_control := control ;
 284: LD_ADDR_OWVAR 38
 288: PUSH
 289: LD_VAR 0 5
 293: ST_TO_ADDR
// vc_weapon := weapon ;
 294: LD_ADDR_OWVAR 40
 298: PUSH
 299: LD_VAR 0 6
 303: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 304: LD_ADDR_OWVAR 41
 308: PUSH
 309: LD_VAR 0 7
 313: ST_TO_ADDR
// result := CreateVehicle ;
 314: LD_ADDR_VAR 0 8
 318: PUSH
 319: CALL_OW 45
 323: ST_TO_ADDR
// end ;
 324: LD_VAR 0 8
 328: RET
// export function SayX ( units , ident ) ; var i ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
// result := false ;
 333: LD_ADDR_VAR 0 3
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// if not units then
 341: LD_VAR 0 1
 345: NOT
 346: IFFALSE 350
// exit ;
 348: GO 404
// for i in units do
 350: LD_ADDR_VAR 0 4
 354: PUSH
 355: LD_VAR 0 1
 359: PUSH
 360: FOR_IN
 361: IFFALSE 402
// if IsOk ( i ) then
 363: LD_VAR 0 4
 367: PPUSH
 368: CALL_OW 302
 372: IFFALSE 400
// begin Say ( i , ident ) ;
 374: LD_VAR 0 4
 378: PPUSH
 379: LD_VAR 0 2
 383: PPUSH
 384: CALL_OW 88
// result := i ;
 388: LD_ADDR_VAR 0 3
 392: PUSH
 393: LD_VAR 0 4
 397: ST_TO_ADDR
// break ;
 398: GO 402
// end ;
 400: GO 360
 402: POP
 403: POP
// end ;
 404: LD_VAR 0 3
 408: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 409: LD_INT 0
 411: PPUSH
 412: PPUSH
// InitUc ;
 413: CALL_OW 18
// InitHc ;
 417: CALL_OW 19
// uc_side := 0 ;
 421: LD_ADDR_OWVAR 20
 425: PUSH
 426: LD_INT 0
 428: ST_TO_ADDR
// uc_nation := 0 ;
 429: LD_ADDR_OWVAR 21
 433: PUSH
 434: LD_INT 0
 436: ST_TO_ADDR
// for i = 1 to amount do
 437: LD_ADDR_VAR 0 4
 441: PUSH
 442: DOUBLE
 443: LD_INT 1
 445: DEC
 446: ST_TO_ADDR
 447: LD_VAR 0 2
 451: PUSH
 452: FOR_TO
 453: IFFALSE 526
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 455: LD_ADDR_OWVAR 29
 459: PUSH
 460: LD_INT 9
 462: PPUSH
 463: LD_INT 12
 465: PPUSH
 466: CALL_OW 12
 470: PUSH
 471: LD_INT 9
 473: PPUSH
 474: LD_INT 12
 476: PPUSH
 477: CALL_OW 12
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: ST_TO_ADDR
// hc_agressivity := 0 ;
 486: LD_ADDR_OWVAR 35
 490: PUSH
 491: LD_INT 0
 493: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 494: LD_INT 0
 496: PPUSH
 497: LD_INT 12
 499: PPUSH
 500: LD_INT 1
 502: PPUSH
 503: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 507: CALL_OW 44
 511: PPUSH
 512: LD_VAR 0 1
 516: PPUSH
 517: LD_INT 0
 519: PPUSH
 520: CALL_OW 49
// end ;
 524: GO 452
 526: POP
 527: POP
// InitHc ;
 528: CALL_OW 19
// end ;
 532: LD_VAR 0 3
 536: RET
// export function CreateNature ; var i ; begin
 537: LD_INT 0
 539: PPUSH
 540: PPUSH
// SpawnApeman ( forest , 9 ) ;
 541: LD_INT 1
 543: PPUSH
 544: LD_INT 9
 546: PPUSH
 547: CALL 409 0 2
// for i := 1 to 4 do
 551: LD_ADDR_VAR 0 2
 555: PUSH
 556: DOUBLE
 557: LD_INT 1
 559: DEC
 560: ST_TO_ADDR
 561: LD_INT 4
 563: PUSH
 564: FOR_TO
 565: IFFALSE 600
// begin hc_class := 21 ;
 567: LD_ADDR_OWVAR 28
 571: PUSH
 572: LD_INT 21
 574: ST_TO_ADDR
// hc_gallery :=  ;
 575: LD_ADDR_OWVAR 33
 579: PUSH
 580: LD_STRING 
 582: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 583: CALL_OW 44
 587: PPUSH
 588: LD_INT 1
 590: PPUSH
 591: LD_INT 0
 593: PPUSH
 594: CALL_OW 49
// end ;
 598: GO 564
 600: POP
 601: POP
// for i := 1 to 2 do
 602: LD_ADDR_VAR 0 2
 606: PUSH
 607: DOUBLE
 608: LD_INT 1
 610: DEC
 611: ST_TO_ADDR
 612: LD_INT 2
 614: PUSH
 615: FOR_TO
 616: IFFALSE 651
// begin hc_class := 18 ;
 618: LD_ADDR_OWVAR 28
 622: PUSH
 623: LD_INT 18
 625: ST_TO_ADDR
// hc_gallery :=  ;
 626: LD_ADDR_OWVAR 33
 630: PUSH
 631: LD_STRING 
 633: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 634: CALL_OW 44
 638: PPUSH
 639: LD_INT 1
 641: PPUSH
 642: LD_INT 0
 644: PPUSH
 645: CALL_OW 49
// end ;
 649: GO 615
 651: POP
 652: POP
// for i := 1 to 3 do
 653: LD_ADDR_VAR 0 2
 657: PUSH
 658: DOUBLE
 659: LD_INT 1
 661: DEC
 662: ST_TO_ADDR
 663: LD_INT 3
 665: PUSH
 666: FOR_TO
 667: IFFALSE 702
// begin hc_class := 13 ;
 669: LD_ADDR_OWVAR 28
 673: PUSH
 674: LD_INT 13
 676: ST_TO_ADDR
// hc_gallery :=  ;
 677: LD_ADDR_OWVAR 33
 681: PUSH
 682: LD_STRING 
 684: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 685: CALL_OW 44
 689: PPUSH
 690: LD_INT 1
 692: PPUSH
 693: LD_INT 0
 695: PPUSH
 696: CALL_OW 49
// end ;
 700: GO 666
 702: POP
 703: POP
// for i := 1 to 4 do
 704: LD_ADDR_VAR 0 2
 708: PUSH
 709: DOUBLE
 710: LD_INT 1
 712: DEC
 713: ST_TO_ADDR
 714: LD_INT 4
 716: PUSH
 717: FOR_TO
 718: IFFALSE 753
// begin hc_class := class_frog ;
 720: LD_ADDR_OWVAR 28
 724: PUSH
 725: LD_INT 19
 727: ST_TO_ADDR
// hc_gallery :=  ;
 728: LD_ADDR_OWVAR 33
 732: PUSH
 733: LD_STRING 
 735: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 736: CALL_OW 44
 740: PPUSH
 741: LD_INT 8
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: CALL_OW 49
// end ;
 751: GO 717
 753: POP
 754: POP
// end ;
 755: LD_VAR 0 1
 759: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 760: LD_INT 0
 762: PPUSH
 763: PPUSH
 764: PPUSH
// if not observer or not unit then
 765: LD_VAR 0 1
 769: NOT
 770: PUSH
 771: LD_VAR 0 2
 775: NOT
 776: OR
 777: IFFALSE 781
// exit ;
 779: GO 829
// if not See ( GetSide ( observer ) , unit ) then
 781: LD_VAR 0 1
 785: PPUSH
 786: CALL_OW 255
 790: PPUSH
 791: LD_VAR 0 2
 795: PPUSH
 796: CALL_OW 292
 800: NOT
 801: IFFALSE 805
// exit ;
 803: GO 829
// result := GetDistUnits ( observer , unit ) < 12 ;
 805: LD_ADDR_VAR 0 3
 809: PUSH
 810: LD_VAR 0 1
 814: PPUSH
 815: LD_VAR 0 2
 819: PPUSH
 820: CALL_OW 296
 824: PUSH
 825: LD_INT 12
 827: LESS
 828: ST_TO_ADDR
// end ; end_of_file
 829: LD_VAR 0 3
 833: RET
// export Gladstone , Lynch ; export usForces , usSci ; export function PrepareAmericans ; var i , un , veh , tmp , arm ; begin
 834: LD_INT 0
 836: PPUSH
 837: PPUSH
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
// usForces := [ ] ;
 842: LD_ADDR_EXP 21
 846: PUSH
 847: EMPTY
 848: ST_TO_ADDR
// usSci := [ ] ;
 849: LD_ADDR_EXP 22
 853: PUSH
 854: EMPTY
 855: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
 856: LD_INT 1
 858: PPUSH
 859: LD_STRING Delta
 861: PPUSH
 862: CALL_OW 500
// SetResourceType ( GetBase ( Delta ) , mat_cans , 400 ) ;
 866: LD_INT 1
 868: PPUSH
 869: CALL_OW 274
 873: PPUSH
 874: LD_INT 1
 876: PPUSH
 877: LD_INT 400
 879: PPUSH
 880: CALL_OW 277
// SetResourceType ( GetBase ( Delta ) , mat_oil , 80 ) ;
 884: LD_INT 1
 886: PPUSH
 887: CALL_OW 274
 891: PPUSH
 892: LD_INT 2
 894: PPUSH
 895: LD_INT 80
 897: PPUSH
 898: CALL_OW 277
// uc_side := 1 ;
 902: LD_ADDR_OWVAR 20
 906: PUSH
 907: LD_INT 1
 909: ST_TO_ADDR
// uc_nation := 1 ;
 910: LD_ADDR_OWVAR 21
 914: PUSH
 915: LD_INT 1
 917: ST_TO_ADDR
// InitHc ;
 918: CALL_OW 19
// hc_importance := 0 ;
 922: LD_ADDR_OWVAR 32
 926: PUSH
 927: LD_INT 0
 929: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
 930: LD_ADDR_EXP 20
 934: PUSH
 935: LD_STRING Lynch
 937: PPUSH
 938: LD_INT 0
 940: PPUSH
 941: LD_STRING 
 943: PPUSH
 944: CALL 32891 0 3
 948: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false ,  ) ;
 949: LD_ADDR_EXP 19
 953: PUSH
 954: LD_STRING Gladstone
 956: PPUSH
 957: LD_INT 0
 959: PPUSH
 960: LD_STRING 
 962: PPUSH
 963: CALL 32891 0 3
 967: ST_TO_ADDR
// PlaceHumanInUnit ( Lynch , Delta ) ;
 968: LD_EXP 20
 972: PPUSH
 973: LD_INT 1
 975: PPUSH
 976: CALL_OW 52
// PlaceHumanInUnit ( Gladstone , usLab ) ;
 980: LD_EXP 19
 984: PPUSH
 985: LD_INT 3
 987: PPUSH
 988: CALL_OW 52
// for i := 1 to [ 1 , 2 , 2 , 2 ] [ Difficulty ] do
 992: LD_ADDR_VAR 0 2
 996: PUSH
 997: DOUBLE
 998: LD_INT 1
1000: DEC
1001: ST_TO_ADDR
1002: LD_INT 1
1004: PUSH
1005: LD_INT 2
1007: PUSH
1008: LD_INT 2
1010: PUSH
1011: LD_INT 2
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: LIST
1018: LIST
1019: PUSH
1020: LD_OWVAR 67
1024: ARRAY
1025: PUSH
1026: FOR_TO
1027: IFFALSE 1077
// begin PrepareHuman ( false , 2 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
1029: LD_INT 0
1031: PPUSH
1032: LD_INT 2
1034: PPUSH
1035: LD_INT 1
1037: PUSH
1038: LD_INT 2
1040: PUSH
1041: LD_INT 2
1043: PUSH
1044: LD_INT 3
1046: PUSH
1047: EMPTY
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: LD_OWVAR 67
1057: ARRAY
1058: PPUSH
1059: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , Delta ) ;
1063: CALL_OW 44
1067: PPUSH
1068: LD_INT 1
1070: PPUSH
1071: CALL_OW 52
// end ;
1075: GO 1026
1077: POP
1078: POP
// for i := 1 to 7 - Difficulty do
1079: LD_ADDR_VAR 0 2
1083: PUSH
1084: DOUBLE
1085: LD_INT 1
1087: DEC
1088: ST_TO_ADDR
1089: LD_INT 7
1091: PUSH
1092: LD_OWVAR 67
1096: MINUS
1097: PUSH
1098: FOR_TO
1099: IFFALSE 1188
// begin PrepareHuman ( false , 4 , [ 1 , 2 , 2 , 2 ] [ Difficulty ] ) ;
1101: LD_INT 0
1103: PPUSH
1104: LD_INT 4
1106: PPUSH
1107: LD_INT 1
1109: PUSH
1110: LD_INT 2
1112: PUSH
1113: LD_INT 2
1115: PUSH
1116: LD_INT 2
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: LIST
1123: LIST
1124: PUSH
1125: LD_OWVAR 67
1129: ARRAY
1130: PPUSH
1131: CALL_OW 380
// un := CreateHuman ;
1135: LD_ADDR_VAR 0 3
1139: PUSH
1140: CALL_OW 44
1144: ST_TO_ADDR
// PlaceHumanInUnit ( un , usLab ) ;
1145: LD_VAR 0 3
1149: PPUSH
1150: LD_INT 3
1152: PPUSH
1153: CALL_OW 52
// usSci := Replace ( usSci , usSci + 1 , un ) ;
1157: LD_ADDR_EXP 22
1161: PUSH
1162: LD_EXP 22
1166: PPUSH
1167: LD_EXP 22
1171: PUSH
1172: LD_INT 1
1174: PLUS
1175: PPUSH
1176: LD_VAR 0 3
1180: PPUSH
1181: CALL_OW 1
1185: ST_TO_ADDR
// end ;
1186: GO 1098
1188: POP
1189: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
1190: LD_ADDR_VAR 0 6
1194: PUSH
1195: LD_INT 22
1197: PUSH
1198: LD_INT 1
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: PUSH
1205: LD_INT 30
1207: PUSH
1208: LD_INT 4
1210: PUSH
1211: EMPTY
1212: LIST
1213: LIST
1214: PUSH
1215: EMPTY
1216: LIST
1217: LIST
1218: PPUSH
1219: CALL_OW 69
1223: ST_TO_ADDR
// for i := 1 to 3 + [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
1224: LD_ADDR_VAR 0 2
1228: PUSH
1229: DOUBLE
1230: LD_INT 1
1232: DEC
1233: ST_TO_ADDR
1234: LD_INT 3
1236: PUSH
1237: LD_INT 1
1239: PUSH
1240: LD_INT 2
1242: PUSH
1243: LD_INT 2
1245: PUSH
1246: LD_INT 3
1248: PUSH
1249: EMPTY
1250: LIST
1251: LIST
1252: LIST
1253: LIST
1254: PUSH
1255: LD_OWVAR 67
1259: ARRAY
1260: PLUS
1261: PUSH
1262: FOR_TO
1263: IFFALSE 1345
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
1265: LD_INT 0
1267: PPUSH
1268: LD_INT 1
1270: PPUSH
1271: LD_INT 1
1273: PUSH
1274: LD_INT 2
1276: PUSH
1277: LD_INT 3
1279: PUSH
1280: LD_INT 3
1282: PUSH
1283: EMPTY
1284: LIST
1285: LIST
1286: LIST
1287: LIST
1288: PUSH
1289: LD_OWVAR 67
1293: ARRAY
1294: PPUSH
1295: CALL_OW 380
// un := CreateHuman ;
1299: LD_ADDR_VAR 0 3
1303: PUSH
1304: CALL_OW 44
1308: ST_TO_ADDR
// usForces := usForces ^ un ;
1309: LD_ADDR_EXP 21
1313: PUSH
1314: LD_EXP 21
1318: PUSH
1319: LD_VAR 0 3
1323: ADD
1324: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm [ 1 ] ) ;
1325: LD_VAR 0 3
1329: PPUSH
1330: LD_VAR 0 6
1334: PUSH
1335: LD_INT 1
1337: ARRAY
1338: PPUSH
1339: CALL_OW 52
// end ;
1343: GO 1262
1345: POP
1346: POP
// if Difficulty > 1 then
1347: LD_OWVAR 67
1351: PUSH
1352: LD_INT 1
1354: GREATER
1355: IFFALSE 1454
// begin for i := 1 to Difficulty do
1357: LD_ADDR_VAR 0 2
1361: PUSH
1362: DOUBLE
1363: LD_INT 1
1365: DEC
1366: ST_TO_ADDR
1367: LD_OWVAR 67
1371: PUSH
1372: FOR_TO
1373: IFFALSE 1452
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
1375: LD_INT 0
1377: PPUSH
1378: LD_INT 1
1380: PPUSH
1381: LD_INT 1
1383: PUSH
1384: LD_INT 2
1386: PUSH
1387: LD_INT 2
1389: PUSH
1390: LD_INT 3
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: PUSH
1399: LD_OWVAR 67
1403: ARRAY
1404: PPUSH
1405: CALL_OW 380
// un := CreateHuman ;
1409: LD_ADDR_VAR 0 3
1413: PUSH
1414: CALL_OW 44
1418: ST_TO_ADDR
// usForces := usForces ^ un ;
1419: LD_ADDR_EXP 21
1423: PUSH
1424: LD_EXP 21
1428: PUSH
1429: LD_VAR 0 3
1433: ADD
1434: ST_TO_ADDR
// PlaceUnitArea ( un , usAdditionalDefenceArea , false ) ;
1435: LD_VAR 0 3
1439: PPUSH
1440: LD_INT 9
1442: PPUSH
1443: LD_INT 0
1445: PPUSH
1446: CALL_OW 49
// end ;
1450: GO 1372
1452: POP
1453: POP
// end ; PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 100 ) ;
1454: LD_INT 1
1456: PPUSH
1457: LD_INT 1
1459: PPUSH
1460: LD_INT 1
1462: PPUSH
1463: LD_INT 2
1465: PPUSH
1466: LD_INT 1
1468: PPUSH
1469: LD_INT 2
1471: PPUSH
1472: LD_INT 100
1474: PPUSH
1475: CALL 241 0 7
// veh := CreateVehicle ;
1479: LD_ADDR_VAR 0 4
1483: PUSH
1484: CALL_OW 45
1488: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1489: LD_VAR 0 4
1493: PPUSH
1494: LD_INT 2
1496: PPUSH
1497: CALL_OW 233
// PlaceUnitXY ( veh , 43 , 24 , false ) ;
1501: LD_VAR 0 4
1505: PPUSH
1506: LD_INT 43
1508: PPUSH
1509: LD_INT 24
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: CALL_OW 48
// end ;
1519: LD_VAR 0 1
1523: RET
// export function SendSciToForest ; var i , j , k , tmp , xy ; begin
1524: LD_INT 0
1526: PPUSH
1527: PPUSH
1528: PPUSH
1529: PPUSH
1530: PPUSH
1531: PPUSH
// if not usSci then
1532: LD_EXP 22
1536: NOT
1537: IFFALSE 1541
// exit ;
1539: GO 1715
// xy := AreaToList ( tameArea , 0 ) ;
1541: LD_ADDR_VAR 0 6
1545: PUSH
1546: LD_INT 5
1548: PPUSH
1549: LD_INT 0
1551: PPUSH
1552: CALL_OW 517
1556: ST_TO_ADDR
// for i in usSci do
1557: LD_ADDR_VAR 0 2
1561: PUSH
1562: LD_EXP 22
1566: PUSH
1567: FOR_IN
1568: IFFALSE 1713
// begin k := rand ( 1 , xy [ 1 ] ) ;
1570: LD_ADDR_VAR 0 4
1574: PUSH
1575: LD_INT 1
1577: PPUSH
1578: LD_VAR 0 6
1582: PUSH
1583: LD_INT 1
1585: ARRAY
1586: PPUSH
1587: CALL_OW 12
1591: ST_TO_ADDR
// ComExitBuilding ( i ) ;
1592: LD_VAR 0 2
1596: PPUSH
1597: CALL_OW 122
// AddComMoveXY ( i , xy [ 1 ] [ k ] , xy [ 2 ] [ k ] ) ;
1601: LD_VAR 0 2
1605: PPUSH
1606: LD_VAR 0 6
1610: PUSH
1611: LD_INT 1
1613: ARRAY
1614: PUSH
1615: LD_VAR 0 4
1619: ARRAY
1620: PPUSH
1621: LD_VAR 0 6
1625: PUSH
1626: LD_INT 2
1628: ARRAY
1629: PUSH
1630: LD_VAR 0 4
1634: ARRAY
1635: PPUSH
1636: CALL_OW 171
// for j := 1 to 2 do
1640: LD_ADDR_VAR 0 3
1644: PUSH
1645: DOUBLE
1646: LD_INT 1
1648: DEC
1649: ST_TO_ADDR
1650: LD_INT 2
1652: PUSH
1653: FOR_TO
1654: IFFALSE 1709
// begin tmp := Delete ( xy [ j ] , k ) ;
1656: LD_ADDR_VAR 0 5
1660: PUSH
1661: LD_VAR 0 6
1665: PUSH
1666: LD_VAR 0 3
1670: ARRAY
1671: PPUSH
1672: LD_VAR 0 4
1676: PPUSH
1677: CALL_OW 3
1681: ST_TO_ADDR
// xy := Replace ( xy , j , tmp ) ;
1682: LD_ADDR_VAR 0 6
1686: PUSH
1687: LD_VAR 0 6
1691: PPUSH
1692: LD_VAR 0 3
1696: PPUSH
1697: LD_VAR 0 5
1701: PPUSH
1702: CALL_OW 1
1706: ST_TO_ADDR
// end ;
1707: GO 1653
1709: POP
1710: POP
// end ;
1711: GO 1567
1713: POP
1714: POP
// end ;
1715: LD_VAR 0 1
1719: RET
// every 0 0$5 + 0 0$10 trigger aviradzeSpotted and usSci and not usAlert and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do var i , x , y , d , ape ;
1720: LD_EXP 4
1724: PUSH
1725: LD_EXP 22
1729: AND
1730: PUSH
1731: LD_EXP 10
1735: NOT
1736: AND
1737: PUSH
1738: LD_INT 22
1740: PUSH
1741: LD_INT 0
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: LD_INT 25
1750: PUSH
1751: LD_INT 12
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: PPUSH
1762: CALL_OW 69
1766: AND
1767: IFFALSE 2259
1769: GO 1771
1771: DISABLE
1772: LD_INT 0
1774: PPUSH
1775: PPUSH
1776: PPUSH
1777: PPUSH
1778: PPUSH
// begin enable ;
1779: ENABLE
// if UnitFilter ( usSci , [ f_or , [ f_hastask ] , [ f_inside ] ] ) then
1780: LD_EXP 22
1784: PPUSH
1785: LD_INT 2
1787: PUSH
1788: LD_INT 60
1790: PUSH
1791: EMPTY
1792: LIST
1793: PUSH
1794: LD_INT 54
1796: PUSH
1797: EMPTY
1798: LIST
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: LIST
1804: PPUSH
1805: CALL_OW 72
1809: IFFALSE 1813
// exit ;
1811: GO 2259
// for i in usSci do
1813: LD_ADDR_VAR 0 1
1817: PUSH
1818: LD_EXP 22
1822: PUSH
1823: FOR_IN
1824: IFFALSE 2257
// begin if not HasTask ( i ) and GetLives ( i ) = 1000 then
1826: LD_VAR 0 1
1830: PPUSH
1831: CALL_OW 314
1835: NOT
1836: PUSH
1837: LD_VAR 0 1
1841: PPUSH
1842: CALL_OW 256
1846: PUSH
1847: LD_INT 1000
1849: EQUAL
1850: AND
1851: IFFALSE 2058
// begin ape := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) , i ) ;
1853: LD_ADDR_VAR 0 5
1857: PUSH
1858: LD_INT 22
1860: PUSH
1861: LD_INT 0
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: LD_INT 25
1870: PUSH
1871: LD_INT 12
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: PPUSH
1882: CALL_OW 69
1886: PPUSH
1887: LD_VAR 0 1
1891: PPUSH
1892: CALL_OW 74
1896: ST_TO_ADDR
// if GetDistUnits ( i , ape ) < 10 then
1897: LD_VAR 0 1
1901: PPUSH
1902: LD_VAR 0 5
1906: PPUSH
1907: CALL_OW 296
1911: PUSH
1912: LD_INT 10
1914: LESS
1915: IFFALSE 1948
// ComTameXY ( i , GetX ( ape ) , GetY ( ape ) ) else
1917: LD_VAR 0 1
1921: PPUSH
1922: LD_VAR 0 5
1926: PPUSH
1927: CALL_OW 250
1931: PPUSH
1932: LD_VAR 0 5
1936: PPUSH
1937: CALL_OW 251
1941: PPUSH
1942: CALL_OW 131
1946: GO 2058
// begin d := rand ( 0 , 5 ) ;
1948: LD_ADDR_VAR 0 4
1952: PUSH
1953: LD_INT 0
1955: PPUSH
1956: LD_INT 5
1958: PPUSH
1959: CALL_OW 12
1963: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 3 ) ;
1964: LD_ADDR_VAR 0 2
1968: PUSH
1969: LD_VAR 0 1
1973: PPUSH
1974: CALL_OW 250
1978: PPUSH
1979: LD_VAR 0 4
1983: PPUSH
1984: LD_INT 3
1986: PPUSH
1987: CALL_OW 272
1991: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 3 ) ;
1992: LD_ADDR_VAR 0 3
1996: PUSH
1997: LD_VAR 0 1
2001: PPUSH
2002: CALL_OW 251
2006: PPUSH
2007: LD_VAR 0 4
2011: PPUSH
2012: LD_INT 3
2014: PPUSH
2015: CALL_OW 273
2019: ST_TO_ADDR
// if not ValidHex ( x , y ) then
2020: LD_VAR 0 2
2024: PPUSH
2025: LD_VAR 0 3
2029: PPUSH
2030: CALL_OW 488
2034: NOT
2035: IFFALSE 2039
// continue ;
2037: GO 1823
// ComMoveXY ( i , x , y ) ;
2039: LD_VAR 0 1
2043: PPUSH
2044: LD_VAR 0 2
2048: PPUSH
2049: LD_VAR 0 3
2053: PPUSH
2054: CALL_OW 111
// end ; end ; if GetLives ( i ) < 900 and GetDistUnitXY ( i , 37 , 23 ) > 10 then
2058: LD_VAR 0 1
2062: PPUSH
2063: CALL_OW 256
2067: PUSH
2068: LD_INT 900
2070: LESS
2071: PUSH
2072: LD_VAR 0 1
2076: PPUSH
2077: LD_INT 37
2079: PPUSH
2080: LD_INT 23
2082: PPUSH
2083: CALL_OW 297
2087: PUSH
2088: LD_INT 10
2090: GREATER
2091: AND
2092: IFFALSE 2168
// begin if IsOk ( Gladstone ) and IsInUnit ( Gladstone ) then
2094: LD_EXP 19
2098: PPUSH
2099: CALL_OW 302
2103: PUSH
2104: LD_EXP 19
2108: PPUSH
2109: CALL_OW 310
2113: AND
2114: IFFALSE 2125
// ComExitBuilding ( Gladstone ) ;
2116: LD_EXP 19
2120: PPUSH
2121: CALL_OW 122
// AddComHeal ( Gladstone , i ) ;
2125: LD_EXP 19
2129: PPUSH
2130: LD_VAR 0 1
2134: PPUSH
2135: CALL_OW 188
// AddComEnterUnit ( Gladstone , usLab ) ;
2139: LD_EXP 19
2143: PPUSH
2144: LD_INT 3
2146: PPUSH
2147: CALL_OW 180
// ComMoveXY ( i , 37 , 23 ) ;
2151: LD_VAR 0 1
2155: PPUSH
2156: LD_INT 37
2158: PPUSH
2159: LD_INT 23
2161: PPUSH
2162: CALL_OW 111
// end else
2166: GO 2255
// if GetLives ( i ) = 1000 then
2168: LD_VAR 0 1
2172: PPUSH
2173: CALL_OW 256
2177: PUSH
2178: LD_INT 1000
2180: EQUAL
2181: IFFALSE 2255
// begin if SideShoot ( i ) = 2 then
2183: LD_VAR 0 1
2187: PPUSH
2188: CALL_OW 503
2192: PUSH
2193: LD_INT 2
2195: EQUAL
2196: IFFALSE 2243
// begin if not usAlert then
2198: LD_EXP 10
2202: NOT
2203: IFFALSE 2213
// usAlert := true ;
2205: LD_ADDR_EXP 10
2209: PUSH
2210: LD_INT 1
2212: ST_TO_ADDR
// AddComEnterUnit ( i , usLab ) ;
2213: LD_VAR 0 1
2217: PPUSH
2218: LD_INT 3
2220: PPUSH
2221: CALL_OW 180
// usSci := usSci diff i ;
2225: LD_ADDR_EXP 22
2229: PUSH
2230: LD_EXP 22
2234: PUSH
2235: LD_VAR 0 1
2239: DIFF
2240: ST_TO_ADDR
// end else
2241: GO 2255
// ComMoveToArea ( i , tameArea ) ;
2243: LD_VAR 0 1
2247: PPUSH
2248: LD_INT 5
2250: PPUSH
2251: CALL_OW 113
// end ; end ;
2255: GO 1823
2257: POP
2258: POP
// end ;
2259: PPOPN 5
2261: END
// every 0 0$1 trigger not usAlert and ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 999 ] ] ] ) or FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) ) do
2262: LD_EXP 10
2266: NOT
2267: PUSH
2268: LD_INT 22
2270: PUSH
2271: LD_INT 1
2273: PUSH
2274: EMPTY
2275: LIST
2276: LIST
2277: PUSH
2278: LD_INT 21
2280: PUSH
2281: LD_INT 3
2283: PUSH
2284: EMPTY
2285: LIST
2286: LIST
2287: PUSH
2288: LD_INT 3
2290: PUSH
2291: LD_INT 57
2293: PUSH
2294: EMPTY
2295: LIST
2296: PUSH
2297: EMPTY
2298: LIST
2299: LIST
2300: PUSH
2301: LD_INT 3
2303: PUSH
2304: LD_INT 24
2306: PUSH
2307: LD_INT 999
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: PUSH
2314: EMPTY
2315: LIST
2316: LIST
2317: PUSH
2318: EMPTY
2319: LIST
2320: LIST
2321: LIST
2322: LIST
2323: PPUSH
2324: CALL_OW 69
2328: PUSH
2329: LD_INT 7
2331: PPUSH
2332: LD_INT 22
2334: PUSH
2335: LD_INT 2
2337: PUSH
2338: EMPTY
2339: LIST
2340: LIST
2341: PPUSH
2342: CALL_OW 70
2346: OR
2347: AND
2348: IFFALSE 2361
2350: GO 2352
2352: DISABLE
// usAlert := true ;
2353: LD_ADDR_EXP 10
2357: PUSH
2358: LD_INT 1
2360: ST_TO_ADDR
2361: END
// every 0 0$1 trigger usAlert do var i , b , arm ;
2362: LD_EXP 10
2366: IFFALSE 2713
2368: GO 2370
2370: DISABLE
2371: LD_INT 0
2373: PPUSH
2374: PPUSH
2375: PPUSH
// begin usActiveDefend := true ;
2376: LD_ADDR_EXP 11
2380: PUSH
2381: LD_INT 1
2383: ST_TO_ADDR
// if not usForces then
2384: LD_EXP 21
2388: NOT
2389: IFFALSE 2393
// exit ;
2391: GO 2713
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
2393: LD_ADDR_VAR 0 3
2397: PUSH
2398: LD_INT 22
2400: PUSH
2401: LD_INT 1
2403: PUSH
2404: EMPTY
2405: LIST
2406: LIST
2407: PUSH
2408: LD_INT 30
2410: PUSH
2411: LD_INT 4
2413: PUSH
2414: EMPTY
2415: LIST
2416: LIST
2417: PUSH
2418: EMPTY
2419: LIST
2420: LIST
2421: PPUSH
2422: CALL_OW 69
2426: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
2427: LD_ADDR_VAR 0 2
2431: PUSH
2432: LD_INT 22
2434: PUSH
2435: LD_INT 1
2437: PUSH
2438: EMPTY
2439: LIST
2440: LIST
2441: PUSH
2442: LD_INT 30
2444: PUSH
2445: LD_INT 31
2447: PUSH
2448: EMPTY
2449: LIST
2450: LIST
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: PPUSH
2456: CALL_OW 69
2460: ST_TO_ADDR
// ComExitBuilding ( Lynch ) ;
2461: LD_EXP 20
2465: PPUSH
2466: CALL_OW 122
// AddComEnterUnit ( Lynch , arm [ 1 ] ) ;
2470: LD_EXP 20
2474: PPUSH
2475: LD_VAR 0 3
2479: PUSH
2480: LD_INT 1
2482: ARRAY
2483: PPUSH
2484: CALL_OW 180
// if IsOk ( Gladstone ) then
2488: LD_EXP 19
2492: PPUSH
2493: CALL_OW 302
2497: IFFALSE 2538
// begin ComExitBuilding ( Gladstone ) ;
2499: LD_EXP 19
2503: PPUSH
2504: CALL_OW 122
// AddComEnterUnit ( Gladstone , arm [ 1 ] ) ;
2508: LD_EXP 19
2512: PPUSH
2513: LD_VAR 0 3
2517: PUSH
2518: LD_INT 1
2520: ARRAY
2521: PPUSH
2522: CALL_OW 180
// AddComChangeProfession ( Gladstone , class_soldier ) ;
2526: LD_EXP 19
2530: PPUSH
2531: LD_INT 1
2533: PPUSH
2534: CALL_OW 183
// end ; ComExitBuilding ( usForces [ 1 ] ) ;
2538: LD_EXP 21
2542: PUSH
2543: LD_INT 1
2545: ARRAY
2546: PPUSH
2547: CALL_OW 122
// AddComEnterUnit ( usForces [ 1 ] , b [ 1 ] ) ;
2551: LD_EXP 21
2555: PUSH
2556: LD_INT 1
2558: ARRAY
2559: PPUSH
2560: LD_VAR 0 2
2564: PUSH
2565: LD_INT 1
2567: ARRAY
2568: PPUSH
2569: CALL_OW 180
// ComExitBuilding ( usForces [ 2 ] ) ;
2573: LD_EXP 21
2577: PUSH
2578: LD_INT 2
2580: ARRAY
2581: PPUSH
2582: CALL_OW 122
// AddComEnterUnit ( usForces [ 2 ] , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
2586: LD_EXP 21
2590: PUSH
2591: LD_INT 2
2593: ARRAY
2594: PPUSH
2595: LD_INT 22
2597: PUSH
2598: LD_INT 1
2600: PUSH
2601: EMPTY
2602: LIST
2603: LIST
2604: PUSH
2605: LD_INT 30
2607: PUSH
2608: LD_INT 32
2610: PUSH
2611: EMPTY
2612: LIST
2613: LIST
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: PPUSH
2619: CALL_OW 69
2623: PUSH
2624: LD_INT 1
2626: ARRAY
2627: PPUSH
2628: CALL_OW 180
// if b > 1 and usForces > 2 then
2632: LD_VAR 0 2
2636: PUSH
2637: LD_INT 1
2639: GREATER
2640: PUSH
2641: LD_EXP 21
2645: PUSH
2646: LD_INT 2
2648: GREATER
2649: AND
2650: IFFALSE 2713
// begin repeat wait ( 0 0$1 ) ;
2652: LD_INT 35
2654: PPUSH
2655: CALL_OW 67
// until BuildingStatus ( b [ 2 ] ) <> bs_build ;
2659: LD_VAR 0 2
2663: PUSH
2664: LD_INT 2
2666: ARRAY
2667: PPUSH
2668: CALL_OW 461
2672: PUSH
2673: LD_INT 1
2675: NONEQUAL
2676: IFFALSE 2652
// ComExitBuilding ( usForces [ 3 ] ) ;
2678: LD_EXP 21
2682: PUSH
2683: LD_INT 3
2685: ARRAY
2686: PPUSH
2687: CALL_OW 122
// AddComEnterUnit ( usForces [ 3 ] , b [ 2 ] ) ;
2691: LD_EXP 21
2695: PUSH
2696: LD_INT 3
2698: ARRAY
2699: PPUSH
2700: LD_VAR 0 2
2704: PUSH
2705: LD_INT 2
2707: ARRAY
2708: PPUSH
2709: CALL_OW 180
// end ; end ;
2713: PPOPN 3
2715: END
// every 0 0$1 trigger GetLives ( usLab ) < 999 and usAlert and usForces do var i ;
2716: LD_INT 3
2718: PPUSH
2719: CALL_OW 256
2723: PUSH
2724: LD_INT 999
2726: LESS
2727: PUSH
2728: LD_EXP 10
2732: AND
2733: PUSH
2734: LD_EXP 21
2738: AND
2739: IFFALSE 2910
2741: GO 2743
2743: DISABLE
2744: LD_INT 0
2746: PPUSH
// begin for i in usForces do
2747: LD_ADDR_VAR 0 1
2751: PUSH
2752: LD_EXP 21
2756: PUSH
2757: FOR_IN
2758: IFFALSE 2797
// begin if IsInUnit ( i ) then
2760: LD_VAR 0 1
2764: PPUSH
2765: CALL_OW 310
2769: IFFALSE 2780
// ComExitBuilding ( i ) ;
2771: LD_VAR 0 1
2775: PPUSH
2776: CALL_OW 122
// AddComAgressiveMove ( i , 31 , 8 ) ;
2780: LD_VAR 0 1
2784: PPUSH
2785: LD_INT 31
2787: PPUSH
2788: LD_INT 8
2790: PPUSH
2791: CALL_OW 174
// end ;
2795: GO 2757
2797: POP
2798: POP
// wait ( 0 0$8 ) ;
2799: LD_INT 280
2801: PPUSH
2802: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) then
2806: LD_INT 22
2808: PUSH
2809: LD_INT 2
2811: PUSH
2812: EMPTY
2813: LIST
2814: LIST
2815: PUSH
2816: LD_INT 91
2818: PUSH
2819: LD_INT 3
2821: PUSH
2822: LD_INT 14
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: LIST
2829: PUSH
2830: EMPTY
2831: LIST
2832: LIST
2833: PPUSH
2834: CALL_OW 69
2838: IFFALSE 2888
// ComAttackUnit ( usForces , FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) [ 1 ] ) else
2840: LD_EXP 21
2844: PPUSH
2845: LD_INT 22
2847: PUSH
2848: LD_INT 2
2850: PUSH
2851: EMPTY
2852: LIST
2853: LIST
2854: PUSH
2855: LD_INT 91
2857: PUSH
2858: LD_INT 3
2860: PUSH
2861: LD_INT 14
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: LIST
2868: PUSH
2869: EMPTY
2870: LIST
2871: LIST
2872: PPUSH
2873: CALL_OW 69
2877: PUSH
2878: LD_INT 1
2880: ARRAY
2881: PPUSH
2882: CALL_OW 115
2886: GO 2910
// begin wait ( 0 0$20 ) ;
2888: LD_INT 700
2890: PPUSH
2891: CALL_OW 67
// AddComMoveXY ( usForces , 39 , 19 ) ;
2895: LD_EXP 21
2899: PPUSH
2900: LD_INT 39
2902: PPUSH
2903: LD_INT 19
2905: PPUSH
2906: CALL_OW 171
// end ; end ;
2910: PPOPN 1
2912: END
// every 0 0$3 trigger ( GetDistUnits ( Heike , Delta ) < 10 or GetLives ( usLab ) < 999 ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do var tmp , veh ;
2913: LD_EXP 23
2917: PPUSH
2918: LD_INT 1
2920: PPUSH
2921: CALL_OW 296
2925: PUSH
2926: LD_INT 10
2928: LESS
2929: PUSH
2930: LD_INT 3
2932: PPUSH
2933: CALL_OW 256
2937: PUSH
2938: LD_INT 999
2940: LESS
2941: OR
2942: PUSH
2943: LD_INT 22
2945: PUSH
2946: LD_INT 1
2948: PUSH
2949: EMPTY
2950: LIST
2951: LIST
2952: PUSH
2953: LD_INT 25
2955: PUSH
2956: LD_INT 2
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: PPUSH
2967: CALL_OW 69
2971: AND
2972: IFFALSE 3086
2974: GO 2976
2976: DISABLE
2977: LD_INT 0
2979: PPUSH
2980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
2981: LD_ADDR_VAR 0 1
2985: PUSH
2986: LD_INT 22
2988: PUSH
2989: LD_INT 1
2991: PUSH
2992: EMPTY
2993: LIST
2994: LIST
2995: PUSH
2996: LD_INT 25
2998: PUSH
2999: LD_INT 2
3001: PUSH
3002: EMPTY
3003: LIST
3004: LIST
3005: PUSH
3006: EMPTY
3007: LIST
3008: LIST
3009: PPUSH
3010: CALL_OW 69
3014: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3015: LD_ADDR_VAR 0 2
3019: PUSH
3020: LD_INT 22
3022: PUSH
3023: LD_INT 1
3025: PUSH
3026: EMPTY
3027: LIST
3028: LIST
3029: PUSH
3030: LD_INT 21
3032: PUSH
3033: LD_INT 2
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: PUSH
3040: LD_INT 58
3042: PUSH
3043: EMPTY
3044: LIST
3045: PUSH
3046: EMPTY
3047: LIST
3048: LIST
3049: LIST
3050: PPUSH
3051: CALL_OW 69
3055: ST_TO_ADDR
// if not tmp then
3056: LD_VAR 0 1
3060: NOT
3061: IFFALSE 3065
// exit ;
3063: GO 3086
// ComExitBuilding ( tmp ) ;
3065: LD_VAR 0 1
3069: PPUSH
3070: CALL_OW 122
// AddComDismantle ( tmp , usLab ) ;
3074: LD_VAR 0 1
3078: PPUSH
3079: LD_INT 3
3081: PPUSH
3082: CALL_OW 227
// end ;
3086: PPOPN 2
3088: END
// every 0 0$1 trigger usAlert and FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) do var i , tmp ;
3089: LD_EXP 10
3093: PUSH
3094: LD_INT 7
3096: PPUSH
3097: LD_INT 22
3099: PUSH
3100: LD_INT 1
3102: PUSH
3103: EMPTY
3104: LIST
3105: LIST
3106: PUSH
3107: LD_INT 21
3109: PUSH
3110: LD_INT 1
3112: PUSH
3113: EMPTY
3114: LIST
3115: LIST
3116: PUSH
3117: LD_INT 3
3119: PUSH
3120: LD_INT 24
3122: PUSH
3123: LD_INT 600
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: PUSH
3130: EMPTY
3131: LIST
3132: LIST
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: LIST
3138: PPUSH
3139: CALL_OW 70
3143: AND
3144: IFFALSE 3272
3146: GO 3148
3148: DISABLE
3149: LD_INT 0
3151: PPUSH
3152: PPUSH
// begin enable ;
3153: ENABLE
// tmp := FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) ;
3154: LD_ADDR_VAR 0 2
3158: PUSH
3159: LD_INT 7
3161: PPUSH
3162: LD_INT 22
3164: PUSH
3165: LD_INT 1
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: PUSH
3172: LD_INT 21
3174: PUSH
3175: LD_INT 1
3177: PUSH
3178: EMPTY
3179: LIST
3180: LIST
3181: PUSH
3182: LD_INT 3
3184: PUSH
3185: LD_INT 24
3187: PUSH
3188: LD_INT 600
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: LIST
3203: PPUSH
3204: CALL_OW 70
3208: ST_TO_ADDR
// if not tmp then
3209: LD_VAR 0 2
3213: NOT
3214: IFFALSE 3218
// exit ;
3216: GO 3272
// for i in tmp do
3218: LD_ADDR_VAR 0 1
3222: PUSH
3223: LD_VAR 0 2
3227: PUSH
3228: FOR_IN
3229: IFFALSE 3270
// if IsInUnit ( i ) then
3231: LD_VAR 0 1
3235: PPUSH
3236: CALL_OW 310
3240: IFFALSE 3253
// ComExitBuilding ( i ) else
3242: LD_VAR 0 1
3246: PPUSH
3247: CALL_OW 122
3251: GO 3268
// ComMoveXY ( i , 48 , 74 ) ;
3253: LD_VAR 0 1
3257: PPUSH
3258: LD_INT 48
3260: PPUSH
3261: LD_INT 74
3263: PPUSH
3264: CALL_OW 111
3268: GO 3228
3270: POP
3271: POP
// end ;
3272: PPOPN 2
3274: END
// every 12 12$00 do var i , un , tmp ;
3275: GO 3277
3277: DISABLE
3278: LD_INT 0
3280: PPUSH
3281: PPUSH
3282: PPUSH
// begin tmp := [ ] ;
3283: LD_ADDR_VAR 0 3
3287: PUSH
3288: EMPTY
3289: ST_TO_ADDR
// uc_side := 1 ;
3290: LD_ADDR_OWVAR 20
3294: PUSH
3295: LD_INT 1
3297: ST_TO_ADDR
// uc_nation := 1 ;
3298: LD_ADDR_OWVAR 21
3302: PUSH
3303: LD_INT 1
3305: ST_TO_ADDR
// case Difficulty of 1 :
3306: LD_OWVAR 67
3310: PUSH
3311: LD_INT 1
3313: DOUBLE
3314: EQUAL
3315: IFTRUE 3319
3317: GO 3422
3319: POP
// begin wait ( 1 1$00 ) ;
3320: LD_INT 2100
3322: PPUSH
3323: CALL_OW 67
// for i := 1 to 2 do
3327: LD_ADDR_VAR 0 1
3331: PUSH
3332: DOUBLE
3333: LD_INT 1
3335: DEC
3336: ST_TO_ADDR
3337: LD_INT 2
3339: PUSH
3340: FOR_TO
3341: IFFALSE 3418
// begin PrepareHuman ( false , [ 1 , 4 ] [ i mod 2 + 1 ] , 1 ) ;
3343: LD_INT 0
3345: PPUSH
3346: LD_INT 1
3348: PUSH
3349: LD_INT 4
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PUSH
3356: LD_VAR 0 1
3360: PUSH
3361: LD_INT 2
3363: MOD
3364: PUSH
3365: LD_INT 1
3367: PLUS
3368: ARRAY
3369: PPUSH
3370: LD_INT 1
3372: PPUSH
3373: CALL_OW 380
// un := CreateHuman ;
3377: LD_ADDR_VAR 0 2
3381: PUSH
3382: CALL_OW 44
3386: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3387: LD_ADDR_VAR 0 3
3391: PUSH
3392: LD_VAR 0 3
3396: PPUSH
3397: LD_VAR 0 3
3401: PUSH
3402: LD_INT 1
3404: PLUS
3405: PPUSH
3406: LD_VAR 0 2
3410: PPUSH
3411: CALL_OW 1
3415: ST_TO_ADDR
// end ;
3416: GO 3340
3418: POP
3419: POP
// end ; 2 :
3420: GO 3822
3422: LD_INT 2
3424: DOUBLE
3425: EQUAL
3426: IFTRUE 3430
3428: GO 3564
3430: POP
// begin wait ( 0 0$30 ) ;
3431: LD_INT 1050
3433: PPUSH
3434: CALL_OW 67
// for i := 1 to 2 do
3438: LD_ADDR_VAR 0 1
3442: PUSH
3443: DOUBLE
3444: LD_INT 1
3446: DEC
3447: ST_TO_ADDR
3448: LD_INT 2
3450: PUSH
3451: FOR_TO
3452: IFFALSE 3508
// begin PrepareHuman ( false , 1 , 2 ) ;
3454: LD_INT 0
3456: PPUSH
3457: LD_INT 1
3459: PPUSH
3460: LD_INT 2
3462: PPUSH
3463: CALL_OW 380
// un := CreateHuman ;
3467: LD_ADDR_VAR 0 2
3471: PUSH
3472: CALL_OW 44
3476: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3477: LD_ADDR_VAR 0 3
3481: PUSH
3482: LD_VAR 0 3
3486: PPUSH
3487: LD_VAR 0 3
3491: PUSH
3492: LD_INT 1
3494: PLUS
3495: PPUSH
3496: LD_VAR 0 2
3500: PPUSH
3501: CALL_OW 1
3505: ST_TO_ADDR
// end ;
3506: GO 3451
3508: POP
3509: POP
// PrepareHuman ( false , 4 , 2 ) ;
3510: LD_INT 0
3512: PPUSH
3513: LD_INT 4
3515: PPUSH
3516: LD_INT 2
3518: PPUSH
3519: CALL_OW 380
// un := CreateHuman ;
3523: LD_ADDR_VAR 0 2
3527: PUSH
3528: CALL_OW 44
3532: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3533: LD_ADDR_VAR 0 3
3537: PUSH
3538: LD_VAR 0 3
3542: PPUSH
3543: LD_VAR 0 3
3547: PUSH
3548: LD_INT 1
3550: PLUS
3551: PPUSH
3552: LD_VAR 0 2
3556: PPUSH
3557: CALL_OW 1
3561: ST_TO_ADDR
// end ; 3 .. 4 :
3562: GO 3822
3564: LD_INT 3
3566: DOUBLE
3567: GREATEREQUAL
3568: IFFALSE 3576
3570: LD_INT 4
3572: DOUBLE
3573: LESSEQUAL
3574: IFTRUE 3578
3576: GO 3821
3578: POP
// begin for i := 1 to 2 do
3579: LD_ADDR_VAR 0 1
3583: PUSH
3584: DOUBLE
3585: LD_INT 1
3587: DEC
3588: ST_TO_ADDR
3589: LD_INT 2
3591: PUSH
3592: FOR_TO
3593: IFFALSE 3649
// begin PrepareHuman ( false , 1 , 2 ) ;
3595: LD_INT 0
3597: PPUSH
3598: LD_INT 1
3600: PPUSH
3601: LD_INT 2
3603: PPUSH
3604: CALL_OW 380
// un := CreateHuman ;
3608: LD_ADDR_VAR 0 2
3612: PUSH
3613: CALL_OW 44
3617: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3618: LD_ADDR_VAR 0 3
3622: PUSH
3623: LD_VAR 0 3
3627: PPUSH
3628: LD_VAR 0 3
3632: PUSH
3633: LD_INT 1
3635: PLUS
3636: PPUSH
3637: LD_VAR 0 2
3641: PPUSH
3642: CALL_OW 1
3646: ST_TO_ADDR
// end ;
3647: GO 3592
3649: POP
3650: POP
// PrepareHuman ( false , 4 , 2 ) ;
3651: LD_INT 0
3653: PPUSH
3654: LD_INT 4
3656: PPUSH
3657: LD_INT 2
3659: PPUSH
3660: CALL_OW 380
// un := CreateHuman ;
3664: LD_ADDR_VAR 0 2
3668: PUSH
3669: CALL_OW 44
3673: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3674: LD_ADDR_VAR 0 3
3678: PUSH
3679: LD_VAR 0 3
3683: PPUSH
3684: LD_VAR 0 3
3688: PUSH
3689: LD_INT 1
3691: PLUS
3692: PPUSH
3693: LD_VAR 0 2
3697: PPUSH
3698: CALL_OW 1
3702: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_machine_gun , 90 ) ;
3703: LD_INT 1
3705: PPUSH
3706: LD_INT 1
3708: PPUSH
3709: LD_INT 2
3711: PPUSH
3712: LD_INT 2
3714: PPUSH
3715: LD_INT 1
3717: PPUSH
3718: LD_INT 2
3720: PPUSH
3721: LD_INT 90
3723: PPUSH
3724: CALL 241 0 7
// un := CreateVehicle ;
3728: LD_ADDR_VAR 0 2
3732: PUSH
3733: CALL_OW 45
3737: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3738: LD_ADDR_VAR 0 3
3742: PUSH
3743: LD_VAR 0 3
3747: PPUSH
3748: LD_VAR 0 3
3752: PUSH
3753: LD_INT 1
3755: PLUS
3756: PPUSH
3757: LD_VAR 0 2
3761: PPUSH
3762: CALL_OW 1
3766: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
3767: LD_INT 0
3769: PPUSH
3770: LD_INT 1
3772: PPUSH
3773: LD_INT 2
3775: PPUSH
3776: CALL_OW 380
// un := CreateHuman ;
3780: LD_ADDR_VAR 0 2
3784: PUSH
3785: CALL_OW 44
3789: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3790: LD_ADDR_VAR 0 3
3794: PUSH
3795: LD_VAR 0 3
3799: PPUSH
3800: LD_VAR 0 3
3804: PUSH
3805: LD_INT 1
3807: PLUS
3808: PPUSH
3809: LD_VAR 0 2
3813: PPUSH
3814: CALL_OW 1
3818: ST_TO_ADDR
// end ; end ;
3819: GO 3822
3821: POP
// for i := 1 to tmp do
3822: LD_ADDR_VAR 0 1
3826: PUSH
3827: DOUBLE
3828: LD_INT 1
3830: DEC
3831: ST_TO_ADDR
3832: LD_VAR 0 3
3836: PUSH
3837: FOR_TO
3838: IFFALSE 4003
// begin SetDir ( tmp [ i ] , 1 ) ;
3840: LD_VAR 0 3
3844: PUSH
3845: LD_VAR 0 1
3849: ARRAY
3850: PPUSH
3851: LD_INT 1
3853: PPUSH
3854: CALL_OW 233
// if GetType ( tmp [ i ] ) = unit_human then
3858: LD_VAR 0 3
3862: PUSH
3863: LD_VAR 0 1
3867: ARRAY
3868: PPUSH
3869: CALL_OW 247
3873: PUSH
3874: LD_INT 1
3876: EQUAL
3877: IFFALSE 3905
// PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) else
3879: LD_VAR 0 3
3883: PUSH
3884: LD_VAR 0 1
3888: ARRAY
3889: PPUSH
3890: LD_INT 28
3892: PPUSH
3893: LD_INT 52
3895: PPUSH
3896: LD_INT 0
3898: PPUSH
3899: CALL_OW 48
3903: GO 3973
// begin PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) ;
3905: LD_VAR 0 3
3909: PUSH
3910: LD_VAR 0 1
3914: ARRAY
3915: PPUSH
3916: LD_INT 28
3918: PPUSH
3919: LD_INT 52
3921: PPUSH
3922: LD_INT 0
3924: PPUSH
3925: CALL_OW 48
// i := i + 1 ;
3929: LD_ADDR_VAR 0 1
3933: PUSH
3934: LD_VAR 0 1
3938: PUSH
3939: LD_INT 1
3941: PLUS
3942: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ i ] , tmp [ i - 1 ] ) ;
3943: LD_VAR 0 3
3947: PUSH
3948: LD_VAR 0 1
3952: ARRAY
3953: PPUSH
3954: LD_VAR 0 3
3958: PUSH
3959: LD_VAR 0 1
3963: PUSH
3964: LD_INT 1
3966: MINUS
3967: ARRAY
3968: PPUSH
3969: CALL_OW 52
// end ; ComMoveXY ( tmp [ i ] , 43 , 56 ) ;
3973: LD_VAR 0 3
3977: PUSH
3978: LD_VAR 0 1
3982: ARRAY
3983: PPUSH
3984: LD_INT 43
3986: PPUSH
3987: LD_INT 56
3989: PPUSH
3990: CALL_OW 111
// wait ( 0 0$2 ) ;
3994: LD_INT 70
3996: PPUSH
3997: CALL_OW 67
// end ;
4001: GO 3837
4003: POP
4004: POP
// wait ( 0 0$2 ) ;
4005: LD_INT 70
4007: PPUSH
4008: CALL_OW 67
// if not FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) then
4012: LD_INT 7
4014: PPUSH
4015: LD_INT 22
4017: PUSH
4018: LD_INT 2
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: PPUSH
4025: CALL_OW 70
4029: NOT
4030: IFFALSE 4228
// begin AddComAgressiveMove ( tmp , 35 , 24 ) ;
4032: LD_VAR 0 3
4036: PPUSH
4037: LD_INT 35
4039: PPUSH
4040: LD_INT 24
4042: PPUSH
4043: CALL_OW 174
// usForces := usForces union UnitFilter ( tmp , [ f_class , 1 ] ) ;
4047: LD_ADDR_EXP 21
4051: PUSH
4052: LD_EXP 21
4056: PUSH
4057: LD_VAR 0 3
4061: PPUSH
4062: LD_INT 25
4064: PUSH
4065: LD_INT 1
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PPUSH
4072: CALL_OW 72
4076: UNION
4077: ST_TO_ADDR
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
4078: LD_INT 22
4080: PUSH
4081: LD_INT 1
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: PUSH
4088: LD_INT 30
4090: PUSH
4091: LD_INT 4
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PPUSH
4102: CALL_OW 69
4106: PUSH
4107: LD_INT 1
4109: ARRAY
4110: PPUSH
4111: CALL_OW 313
4115: PUSH
4116: LD_INT 6
4118: LESS
4119: IFFALSE 4178
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 1 ] ) , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
4121: LD_VAR 0 3
4125: PPUSH
4126: LD_INT 25
4128: PUSH
4129: LD_INT 1
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: PPUSH
4136: CALL_OW 72
4140: PPUSH
4141: LD_INT 22
4143: PUSH
4144: LD_INT 1
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: PUSH
4151: LD_INT 30
4153: PUSH
4154: LD_INT 4
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: PUSH
4161: EMPTY
4162: LIST
4163: LIST
4164: PPUSH
4165: CALL_OW 69
4169: PUSH
4170: LD_INT 1
4172: ARRAY
4173: PPUSH
4174: CALL_OW 180
// if UnitFilter ( tmp , [ f_class , 4 ] ) then
4178: LD_VAR 0 3
4182: PPUSH
4183: LD_INT 25
4185: PUSH
4186: LD_INT 4
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PPUSH
4193: CALL_OW 72
4197: IFFALSE 4226
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 4 ] ) , usLab ) ;
4199: LD_VAR 0 3
4203: PPUSH
4204: LD_INT 25
4206: PUSH
4207: LD_INT 4
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: PPUSH
4214: CALL_OW 72
4218: PPUSH
4219: LD_INT 3
4221: PPUSH
4222: CALL_OW 180
// end else
4226: GO 4503
// begin tmp := tmp union FilterUnitsInArea ( retreatArea , [ f_side , 1 ] ) ;
4228: LD_ADDR_VAR 0 3
4232: PUSH
4233: LD_VAR 0 3
4237: PUSH
4238: LD_INT 6
4240: PPUSH
4241: LD_INT 22
4243: PUSH
4244: LD_INT 1
4246: PUSH
4247: EMPTY
4248: LIST
4249: LIST
4250: PPUSH
4251: CALL_OW 70
4255: UNION
4256: ST_TO_ADDR
// ComMoveXY ( tmp , 45 , 54 ) ;
4257: LD_VAR 0 3
4261: PPUSH
4262: LD_INT 45
4264: PPUSH
4265: LD_INT 54
4267: PPUSH
4268: CALL_OW 111
// wait ( 0 0$3 ) ;
4272: LD_INT 105
4274: PPUSH
4275: CALL_OW 67
// AddComAgressiveMove ( tmp diff UnitFilter ( tmp , [ f_class , 4 ] ) , 35 , 24 ) ;
4279: LD_VAR 0 3
4283: PUSH
4284: LD_VAR 0 3
4288: PPUSH
4289: LD_INT 25
4291: PUSH
4292: LD_INT 4
4294: PUSH
4295: EMPTY
4296: LIST
4297: LIST
4298: PPUSH
4299: CALL_OW 72
4303: DIFF
4304: PPUSH
4305: LD_INT 35
4307: PPUSH
4308: LD_INT 24
4310: PPUSH
4311: CALL_OW 174
// AddComMoveXY ( UnitFilter ( tmp , [ f_class , 4 ] ) , 42 , 49 ) ;
4315: LD_VAR 0 3
4319: PPUSH
4320: LD_INT 25
4322: PUSH
4323: LD_INT 4
4325: PUSH
4326: EMPTY
4327: LIST
4328: LIST
4329: PPUSH
4330: CALL_OW 72
4334: PPUSH
4335: LD_INT 42
4337: PPUSH
4338: LD_INT 49
4340: PPUSH
4341: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4345: LD_INT 35
4347: PPUSH
4348: CALL_OW 67
// for i in tmp do
4352: LD_ADDR_VAR 0 1
4356: PUSH
4357: LD_VAR 0 3
4361: PUSH
4362: FOR_IN
4363: IFFALSE 4494
// if IsDead ( i ) then
4365: LD_VAR 0 1
4369: PPUSH
4370: CALL_OW 301
4374: IFFALSE 4394
// tmp := tmp diff i else
4376: LD_ADDR_VAR 0 3
4380: PUSH
4381: LD_VAR 0 3
4385: PUSH
4386: LD_VAR 0 1
4390: DIFF
4391: ST_TO_ADDR
4392: GO 4492
// if GetClass ( i ) = 1 then
4394: LD_VAR 0 1
4398: PPUSH
4399: CALL_OW 257
4403: PUSH
4404: LD_INT 1
4406: EQUAL
4407: IFFALSE 4492
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 42 , 49 ) > 6 then
4409: LD_VAR 0 1
4413: PPUSH
4414: CALL_OW 256
4418: PUSH
4419: LD_INT 600
4421: LESS
4422: PUSH
4423: LD_VAR 0 1
4427: PPUSH
4428: LD_INT 42
4430: PPUSH
4431: LD_INT 49
4433: PPUSH
4434: CALL_OW 297
4438: PUSH
4439: LD_INT 6
4441: GREATER
4442: AND
4443: IFFALSE 4462
// ComMoveXY ( i , 42 , 49 ) else
4445: LD_VAR 0 1
4449: PPUSH
4450: LD_INT 42
4452: PPUSH
4453: LD_INT 49
4455: PPUSH
4456: CALL_OW 111
4460: GO 4492
// if GetLives ( i ) = 1000 then
4462: LD_VAR 0 1
4466: PPUSH
4467: CALL_OW 256
4471: PUSH
4472: LD_INT 1000
4474: EQUAL
4475: IFFALSE 4492
// ComAgressiveMove ( i , 36 , 25 ) ;
4477: LD_VAR 0 1
4481: PPUSH
4482: LD_INT 36
4484: PPUSH
4485: LD_INT 25
4487: PPUSH
4488: CALL_OW 114
// end ;
4492: GO 4362
4494: POP
4495: POP
// until not tmp ;
4496: LD_VAR 0 3
4500: NOT
4501: IFFALSE 4345
// end ; end ;
4503: PPOPN 3
4505: END
// every 1 1$30 trigger FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) and not attackDeltaAllowed do var i , un , veh ;
4506: LD_INT 7
4508: PPUSH
4509: LD_INT 22
4511: PUSH
4512: LD_INT 2
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: PPUSH
4519: CALL_OW 70
4523: PUSH
4524: LD_EXP 14
4528: NOT
4529: AND
4530: IFFALSE 4688
4532: GO 4534
4534: DISABLE
4535: LD_INT 0
4537: PPUSH
4538: PPUSH
4539: PPUSH
// begin for i := 1 to 2 do
4540: LD_ADDR_VAR 0 1
4544: PUSH
4545: DOUBLE
4546: LD_INT 1
4548: DEC
4549: ST_TO_ADDR
4550: LD_INT 2
4552: PUSH
4553: FOR_TO
4554: IFFALSE 4686
// begin wait ( 0 0$3 ) ;
4556: LD_INT 105
4558: PPUSH
4559: CALL_OW 67
// uc_side := 1 ;
4563: LD_ADDR_OWVAR 20
4567: PUSH
4568: LD_INT 1
4570: ST_TO_ADDR
// uc_nation := 1 ;
4571: LD_ADDR_OWVAR 21
4575: PUSH
4576: LD_INT 1
4578: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 90 ) ;
4579: LD_INT 1
4581: PPUSH
4582: LD_INT 1
4584: PPUSH
4585: LD_INT 2
4587: PPUSH
4588: LD_INT 1
4590: PPUSH
4591: LD_INT 1
4593: PPUSH
4594: LD_INT 4
4596: PPUSH
4597: LD_INT 90
4599: PPUSH
4600: CALL 241 0 7
// veh := CreateVehicle ;
4604: LD_ADDR_VAR 0 3
4608: PUSH
4609: CALL_OW 45
4613: ST_TO_ADDR
// PlaceUnitXY ( veh , 29 , 52 , false ) ;
4614: LD_VAR 0 3
4618: PPUSH
4619: LD_INT 29
4621: PPUSH
4622: LD_INT 52
4624: PPUSH
4625: LD_INT 0
4627: PPUSH
4628: CALL_OW 48
// PrepareHuman ( false , 3 , 3 ) ;
4632: LD_INT 0
4634: PPUSH
4635: LD_INT 3
4637: PPUSH
4638: LD_INT 3
4640: PPUSH
4641: CALL_OW 380
// un := CreateHuman ;
4645: LD_ADDR_VAR 0 2
4649: PUSH
4650: CALL_OW 44
4654: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4655: LD_VAR 0 2
4659: PPUSH
4660: LD_VAR 0 3
4664: PPUSH
4665: CALL_OW 52
// ComAgressiveMove ( veh , 36 , 25 ) ;
4669: LD_VAR 0 3
4673: PPUSH
4674: LD_INT 36
4676: PPUSH
4677: LD_INT 25
4679: PPUSH
4680: CALL_OW 114
// end ;
4684: GO 4553
4686: POP
4687: POP
// end ; end_of_file
4688: PPOPN 3
4690: END
// export function Action ; var i , tmp ; begin
4691: LD_INT 0
4693: PPUSH
4694: PPUSH
4695: PPUSH
// InGameOn ;
4696: CALL_OW 8
// DoNotAttack ( 2 , usLab ) ;
4700: LD_INT 2
4702: PPUSH
4703: LD_INT 3
4705: PPUSH
4706: CALL_OW 471
// ComMoveXY ( Heike , 78 , 61 ) ;
4710: LD_EXP 23
4714: PPUSH
4715: LD_INT 78
4717: PPUSH
4718: LD_INT 61
4720: PPUSH
4721: CALL_OW 111
// if Mike then
4725: LD_EXP 25
4729: IFFALSE 4746
// ComMoveXY ( Mike , 80 , 66 ) ;
4731: LD_EXP 25
4735: PPUSH
4736: LD_INT 80
4738: PPUSH
4739: LD_INT 66
4741: PPUSH
4742: CALL_OW 111
// if Givi then
4746: LD_EXP 24
4750: IFFALSE 4767
// ComMoveXY ( Givi , 82 , 66 ) ;
4752: LD_EXP 24
4756: PPUSH
4757: LD_INT 82
4759: PPUSH
4760: LD_INT 66
4762: PPUSH
4763: CALL_OW 111
// if Kamil then
4767: LD_EXP 26
4771: IFFALSE 4788
// ComMoveXY ( Kamil , 82 , 67 ) ;
4773: LD_EXP 26
4777: PPUSH
4778: LD_INT 82
4780: PPUSH
4781: LD_INT 67
4783: PPUSH
4784: CALL_OW 111
// CenterNowOnUnits ( Heike ) ;
4788: LD_EXP 23
4792: PPUSH
4793: CALL_OW 87
// wait ( 0 0$2 ) ;
4797: LD_INT 70
4799: PPUSH
4800: CALL_OW 67
// if Givi and Mike then
4804: LD_EXP 24
4808: PUSH
4809: LD_EXP 25
4813: AND
4814: IFFALSE 5348
// begin AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
4816: LD_EXP 24
4820: PUSH
4821: LD_EXP 25
4825: PUSH
4826: LD_EXP 26
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: LIST
4835: PPUSH
4836: LD_EXP 23
4840: PPUSH
4841: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
4845: LD_EXP 23
4849: PPUSH
4850: LD_EXP 24
4854: PPUSH
4855: CALL_OW 179
// Say ( Givi , DG-1-start ) ;
4859: LD_EXP 24
4863: PPUSH
4864: LD_STRING DG-1-start
4866: PPUSH
4867: CALL_OW 88
// Say ( Heike , DH-1-start ) ;
4871: LD_EXP 23
4875: PPUSH
4876: LD_STRING DH-1-start
4878: PPUSH
4879: CALL_OW 88
// AddComTurnUnit ( Mike , Heike ) ;
4883: LD_EXP 25
4887: PPUSH
4888: LD_EXP 23
4892: PPUSH
4893: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
4897: LD_EXP 23
4901: PPUSH
4902: LD_EXP 25
4906: PPUSH
4907: CALL_OW 179
// Say ( Mike , DM-1-start ) ;
4911: LD_EXP 25
4915: PPUSH
4916: LD_STRING DM-1-start
4918: PPUSH
4919: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
4923: LD_EXP 23
4927: PPUSH
4928: LD_STRING DH-2-start
4930: PPUSH
4931: CALL_OW 88
// Say ( Mike , DM-2-start ) ;
4935: LD_EXP 25
4939: PPUSH
4940: LD_STRING DM-2-start
4942: PPUSH
4943: CALL_OW 88
// Say ( Givi , DG-2-start ) ;
4947: LD_EXP 24
4951: PPUSH
4952: LD_STRING DG-2-start
4954: PPUSH
4955: CALL_OW 88
// ComTurnUnit ( Mike , Givi ) ;
4959: LD_EXP 25
4963: PPUSH
4964: LD_EXP 24
4968: PPUSH
4969: CALL_OW 119
// ComTurnUnit ( Heike , Mike ) ;
4973: LD_EXP 23
4977: PPUSH
4978: LD_EXP 25
4982: PPUSH
4983: CALL_OW 119
// Say ( Mike , DM-3-start ) ;
4987: LD_EXP 25
4991: PPUSH
4992: LD_STRING DM-3-start
4994: PPUSH
4995: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
4999: LD_EXP 23
5003: PPUSH
5004: LD_STRING DH-3-start
5006: PPUSH
5007: CALL_OW 88
// ComMoveXY ( [ Heike , Mike , Givi , Kamil ] , 84 , 51 ) ;
5011: LD_EXP 23
5015: PUSH
5016: LD_EXP 25
5020: PUSH
5021: LD_EXP 24
5025: PUSH
5026: LD_EXP 26
5030: PUSH
5031: EMPTY
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: PPUSH
5037: LD_INT 84
5039: PPUSH
5040: LD_INT 51
5042: PPUSH
5043: CALL_OW 111
// wait ( 0 0$2 ) ;
5047: LD_INT 70
5049: PPUSH
5050: CALL_OW 67
// Say ( Givi , DG-3-start ) ;
5054: LD_EXP 24
5058: PPUSH
5059: LD_STRING DG-3-start
5061: PPUSH
5062: CALL_OW 88
// ComHold ( [ Heike , Mike , Givi , Kamil ] ) ;
5066: LD_EXP 23
5070: PUSH
5071: LD_EXP 25
5075: PUSH
5076: LD_EXP 24
5080: PUSH
5081: LD_EXP 26
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: PPUSH
5092: CALL_OW 140
// AddComTurnUnit ( Heike , Givi ) ;
5096: LD_EXP 23
5100: PPUSH
5101: LD_EXP 24
5105: PPUSH
5106: CALL_OW 179
// AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
5110: LD_EXP 24
5114: PUSH
5115: LD_EXP 25
5119: PUSH
5120: LD_EXP 26
5124: PUSH
5125: EMPTY
5126: LIST
5127: LIST
5128: LIST
5129: PPUSH
5130: LD_EXP 23
5134: PPUSH
5135: CALL_OW 179
// Say ( Heike , DH-4-start ) ;
5139: LD_EXP 23
5143: PPUSH
5144: LD_STRING DH-4-start
5146: PPUSH
5147: CALL_OW 88
// Say ( Givi , DG-4-start ) ;
5151: LD_EXP 24
5155: PPUSH
5156: LD_STRING DG-4-start
5158: PPUSH
5159: CALL_OW 88
// Say ( Heike , DH-5-start ) ;
5163: LD_EXP 23
5167: PPUSH
5168: LD_STRING DH-5-start
5170: PPUSH
5171: CALL_OW 88
// Say ( Givi , DG-5-start ) ;
5175: LD_EXP 24
5179: PPUSH
5180: LD_STRING DG-5-start
5182: PPUSH
5183: CALL_OW 88
// Say ( Heike , DH-6-start ) ;
5187: LD_EXP 23
5191: PPUSH
5192: LD_STRING DH-6-start
5194: PPUSH
5195: CALL_OW 88
// if not Kamil then
5199: LD_EXP 26
5203: NOT
5204: IFFALSE 5255
// begin Say ( Mike , DM-6-start ) ;
5206: LD_EXP 25
5210: PPUSH
5211: LD_STRING DM-6-start
5213: PPUSH
5214: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi ] , Mike ) ;
5218: LD_EXP 23
5222: PUSH
5223: LD_EXP 24
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PPUSH
5232: LD_EXP 25
5236: PPUSH
5237: CALL_OW 119
// Say ( Givi , DG-6-start ) ;
5241: LD_EXP 24
5245: PPUSH
5246: LD_STRING DG-6-start
5248: PPUSH
5249: CALL_OW 88
// end else
5253: GO 5334
// begin Say ( Mike , DM-6-start-a ) ;
5255: LD_EXP 25
5259: PPUSH
5260: LD_STRING DM-6-start-a
5262: PPUSH
5263: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi , Mike ] , Kamil ) ;
5267: LD_EXP 23
5271: PUSH
5272: LD_EXP 24
5276: PUSH
5277: LD_EXP 25
5281: PUSH
5282: EMPTY
5283: LIST
5284: LIST
5285: LIST
5286: PPUSH
5287: LD_EXP 26
5291: PPUSH
5292: CALL_OW 119
// ComTurnUnit ( Kamil , Mike ) ;
5296: LD_EXP 26
5300: PPUSH
5301: LD_EXP 25
5305: PPUSH
5306: CALL_OW 119
// Say ( Kamil , DKam-7-start-a ) ;
5310: LD_EXP 26
5314: PPUSH
5315: LD_STRING DKam-7-start-a
5317: PPUSH
5318: CALL_OW 88
// Say ( Givi , DG-6-start-a ) ;
5322: LD_EXP 24
5326: PPUSH
5327: LD_STRING DG-6-start-a
5329: PPUSH
5330: CALL_OW 88
// end ; Say ( Heike , DH-7-start ) ;
5334: LD_EXP 23
5338: PPUSH
5339: LD_STRING DH-7-start
5341: PPUSH
5342: CALL_OW 88
// end else
5346: GO 6070
// if not Mike and Givi then
5348: LD_EXP 25
5352: NOT
5353: PUSH
5354: LD_EXP 24
5358: AND
5359: IFFALSE 5704
// begin AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5361: LD_EXP 24
5365: PUSH
5366: LD_EXP 26
5370: PUSH
5371: EMPTY
5372: LIST
5373: LIST
5374: PPUSH
5375: LD_EXP 23
5379: PPUSH
5380: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
5384: LD_EXP 23
5388: PPUSH
5389: LD_EXP 24
5393: PPUSH
5394: CALL_OW 179
// Say ( Givi , DG-1-start-c ) ;
5398: LD_EXP 24
5402: PPUSH
5403: LD_STRING DG-1-start-c
5405: PPUSH
5406: CALL_OW 88
// Say ( Heike , DH-1-start-c ) ;
5410: LD_EXP 23
5414: PPUSH
5415: LD_STRING DH-1-start-c
5417: PPUSH
5418: CALL_OW 88
// Say ( Givi , DG-2-start-c ) ;
5422: LD_EXP 24
5426: PPUSH
5427: LD_STRING DG-2-start-c
5429: PPUSH
5430: CALL_OW 88
// Say ( Heike , DH-2-start-c ) ;
5434: LD_EXP 23
5438: PPUSH
5439: LD_STRING DH-2-start-c
5441: PPUSH
5442: CALL_OW 88
// Say ( Givi , DG-3-start-c ) ;
5446: LD_EXP 24
5450: PPUSH
5451: LD_STRING DG-3-start-c
5453: PPUSH
5454: CALL_OW 88
// ComMoveXY ( Heike , 83 , 56 ) ;
5458: LD_EXP 23
5462: PPUSH
5463: LD_INT 83
5465: PPUSH
5466: LD_INT 56
5468: PPUSH
5469: CALL_OW 111
// ComMoveXY ( Givi , 83 , 59 ) ;
5473: LD_EXP 24
5477: PPUSH
5478: LD_INT 83
5480: PPUSH
5481: LD_INT 59
5483: PPUSH
5484: CALL_OW 111
// if Kamil then
5488: LD_EXP 26
5492: IFFALSE 5509
// ComMoveXY ( Kamil , 80 , 58 ) ;
5494: LD_EXP 26
5498: PPUSH
5499: LD_INT 80
5501: PPUSH
5502: LD_INT 58
5504: PPUSH
5505: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5509: LD_EXP 23
5513: PPUSH
5514: LD_EXP 24
5518: PPUSH
5519: CALL_OW 179
// AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5523: LD_EXP 24
5527: PUSH
5528: LD_EXP 26
5532: PUSH
5533: EMPTY
5534: LIST
5535: LIST
5536: PPUSH
5537: LD_EXP 23
5541: PPUSH
5542: CALL_OW 179
// Say ( Heike , DH-3-start-c ) ;
5546: LD_EXP 23
5550: PPUSH
5551: LD_STRING DH-3-start-c
5553: PPUSH
5554: CALL_OW 88
// Say ( Givi , DG-4-start-c ) ;
5558: LD_EXP 24
5562: PPUSH
5563: LD_STRING DG-4-start-c
5565: PPUSH
5566: CALL_OW 88
// Say ( Heike , DH-5-start-c ) ;
5570: LD_EXP 23
5574: PPUSH
5575: LD_STRING DH-5-start-c
5577: PPUSH
5578: CALL_OW 88
// Say ( Givi , DG-5-start-c ) ;
5582: LD_EXP 24
5586: PPUSH
5587: LD_STRING DG-5-start-c
5589: PPUSH
5590: CALL_OW 88
// Say ( Heike , DH-6-start-c ) ;
5594: LD_EXP 23
5598: PPUSH
5599: LD_STRING DH-6-start-c
5601: PPUSH
5602: CALL_OW 88
// Say ( Givi , DG-6-start-c ) ;
5606: LD_EXP 24
5610: PPUSH
5611: LD_STRING DG-6-start-c
5613: PPUSH
5614: CALL_OW 88
// if Kamil then
5618: LD_EXP 26
5622: IFFALSE 5678
// begin ComTurnUnit ( Kamil , Heike ) ;
5624: LD_EXP 26
5628: PPUSH
5629: LD_EXP 23
5633: PPUSH
5634: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5638: LD_EXP 26
5642: PPUSH
5643: LD_STRING DKam-1-start-c
5645: PPUSH
5646: CALL_OW 88
// ComTurnUnit ( Givi , Kamil ) ;
5650: LD_EXP 24
5654: PPUSH
5655: LD_EXP 26
5659: PPUSH
5660: CALL_OW 119
// Say ( Givi , DG-7-start-c ) ;
5664: LD_EXP 24
5668: PPUSH
5669: LD_STRING DG-7-start-c
5671: PPUSH
5672: CALL_OW 88
// end else
5676: GO 5702
// begin Say ( Givi , DG-8-start-c ) ;
5678: LD_EXP 24
5682: PPUSH
5683: LD_STRING DG-8-start-c
5685: PPUSH
5686: CALL_OW 88
// Say ( Heike , DH-7-start-c ) ;
5690: LD_EXP 23
5694: PPUSH
5695: LD_STRING DH-7-start-c
5697: PPUSH
5698: CALL_OW 88
// end ; end else
5702: GO 6070
// if not Givi and Mike then
5704: LD_EXP 24
5708: NOT
5709: PUSH
5710: LD_EXP 25
5714: AND
5715: IFFALSE 5974
// begin AddComTurnUnit ( [ Mike , Kamil ] , Heike ) ;
5717: LD_EXP 25
5721: PUSH
5722: LD_EXP 26
5726: PUSH
5727: EMPTY
5728: LIST
5729: LIST
5730: PPUSH
5731: LD_EXP 23
5735: PPUSH
5736: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
5740: LD_EXP 23
5744: PPUSH
5745: LD_EXP 25
5749: PPUSH
5750: CALL_OW 179
// Say ( Mike , DM-1-start-b ) ;
5754: LD_EXP 25
5758: PPUSH
5759: LD_STRING DM-1-start-b
5761: PPUSH
5762: CALL_OW 88
// Say ( Heike , DH-1-start-b ) ;
5766: LD_EXP 23
5770: PPUSH
5771: LD_STRING DH-1-start-b
5773: PPUSH
5774: CALL_OW 88
// Say ( Mike , DM-2-start-b ) ;
5778: LD_EXP 25
5782: PPUSH
5783: LD_STRING DM-2-start-b
5785: PPUSH
5786: CALL_OW 88
// Say ( Heike , DH-2-start-b ) ;
5790: LD_EXP 23
5794: PPUSH
5795: LD_STRING DH-2-start-b
5797: PPUSH
5798: CALL_OW 88
// Say ( Mike , DM-3-start-b ) ;
5802: LD_EXP 25
5806: PPUSH
5807: LD_STRING DM-3-start-b
5809: PPUSH
5810: CALL_OW 88
// if Kamil then
5814: LD_EXP 26
5818: IFFALSE 5835
// ComMoveXY ( Kamil , 80 , 58 ) ;
5820: LD_EXP 26
5824: PPUSH
5825: LD_INT 80
5827: PPUSH
5828: LD_INT 58
5830: PPUSH
5831: CALL_OW 111
// ComMoveXY ( Heike , 83 , 56 ) ;
5835: LD_EXP 23
5839: PPUSH
5840: LD_INT 83
5842: PPUSH
5843: LD_INT 56
5845: PPUSH
5846: CALL_OW 111
// ComMoveXY ( Mike , 83 , 59 ) ;
5850: LD_EXP 25
5854: PPUSH
5855: LD_INT 83
5857: PPUSH
5858: LD_INT 59
5860: PPUSH
5861: CALL_OW 111
// AddComTurnUnit ( Heike , Mike ) ;
5865: LD_EXP 23
5869: PPUSH
5870: LD_EXP 25
5874: PPUSH
5875: CALL_OW 179
// AddComTurnUnit ( [ Kamil , Mike ] , Heike ) ;
5879: LD_EXP 26
5883: PUSH
5884: LD_EXP 25
5888: PUSH
5889: EMPTY
5890: LIST
5891: LIST
5892: PPUSH
5893: LD_EXP 23
5897: PPUSH
5898: CALL_OW 179
// Say ( Heike , DH-3-start-b ) ;
5902: LD_EXP 23
5906: PPUSH
5907: LD_STRING DH-3-start-b
5909: PPUSH
5910: CALL_OW 88
// Say ( Mike , DM-4-start-b ) ;
5914: LD_EXP 25
5918: PPUSH
5919: LD_STRING DM-4-start-b
5921: PPUSH
5922: CALL_OW 88
// if Kamil then
5926: LD_EXP 26
5930: IFFALSE 5960
// begin ComTurnUnit ( Kamil , Heike ) ;
5932: LD_EXP 26
5936: PPUSH
5937: LD_EXP 23
5941: PPUSH
5942: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5946: LD_EXP 26
5950: PPUSH
5951: LD_STRING DKam-1-start-c
5953: PPUSH
5954: CALL_OW 88
// end else
5958: GO 5972
// begin Say ( Mike , DM-5-start-b ) ;
5960: LD_EXP 25
5964: PPUSH
5965: LD_STRING DM-5-start-b
5967: PPUSH
5968: CALL_OW 88
// end ; end else
5972: GO 6070
// if Kamil then
5974: LD_EXP 26
5978: IFFALSE 6058
// begin AddComTurnUnit ( Heike , Kamil ) ;
5980: LD_EXP 23
5984: PPUSH
5985: LD_EXP 26
5989: PPUSH
5990: CALL_OW 179
// AddComTurnUnit ( Kamil , Heike ) ;
5994: LD_EXP 26
5998: PPUSH
5999: LD_EXP 23
6003: PPUSH
6004: CALL_OW 179
// Say ( Heike , DH-1-start-f ) ;
6008: LD_EXP 23
6012: PPUSH
6013: LD_STRING DH-1-start-f
6015: PPUSH
6016: CALL_OW 88
// Say ( Kamil , DKam-1-start-f ) ;
6020: LD_EXP 26
6024: PPUSH
6025: LD_STRING DKam-1-start-f
6027: PPUSH
6028: CALL_OW 88
// Say ( Heike , DH-2-start-f ) ;
6032: LD_EXP 23
6036: PPUSH
6037: LD_STRING DH-2-start-f
6039: PPUSH
6040: CALL_OW 88
// Say ( Kamil , DKam-2-start-f ) ;
6044: LD_EXP 26
6048: PPUSH
6049: LD_STRING DKam-2-start-f
6051: PPUSH
6052: CALL_OW 88
// end else
6056: GO 6070
// begin Say ( Heike , DH-1-start-d ) ;
6058: LD_EXP 23
6062: PPUSH
6063: LD_STRING DH-1-start-d
6065: PPUSH
6066: CALL_OW 88
// end ; ComFree ( [ Heike , Givi , Mike , Kamil ] ) ;
6070: LD_EXP 23
6074: PUSH
6075: LD_EXP 24
6079: PUSH
6080: LD_EXP 25
6084: PUSH
6085: LD_EXP 26
6089: PUSH
6090: EMPTY
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: PPUSH
6096: CALL_OW 139
// InGameOff ;
6100: CALL_OW 9
// ChangeMissionObjectives ( OEast ) ;
6104: LD_STRING OEast
6106: PPUSH
6107: CALL_OW 337
// SetAreaMapShow ( eastExitArea , 1 ) ;
6111: LD_INT 10
6113: PPUSH
6114: LD_INT 1
6116: PPUSH
6117: CALL_OW 424
// SaveForQuickRestart ;
6121: CALL_OW 22
// wait ( 0 0$20 ) ;
6125: LD_INT 700
6127: PPUSH
6128: CALL_OW 67
// SendSciToForest ;
6132: CALL 1524 0 0
// if Difficulty = 1 then
6136: LD_OWVAR 67
6140: PUSH
6141: LD_INT 1
6143: EQUAL
6144: IFFALSE 6148
// exit ;
6146: GO 6269
// wait ( [ 5 5$00 , 2 2$30 , 2 2$00 ] [ Difficulty - 1 ] ) ;
6148: LD_INT 10500
6150: PUSH
6151: LD_INT 5250
6153: PUSH
6154: LD_INT 4200
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: LIST
6161: PUSH
6162: LD_OWVAR 67
6166: PUSH
6167: LD_INT 1
6169: MINUS
6170: ARRAY
6171: PPUSH
6172: CALL_OW 67
// if usAlert then
6176: LD_EXP 10
6180: IFFALSE 6184
// exit ;
6182: GO 6269
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
6184: LD_ADDR_VAR 0 3
6188: PUSH
6189: LD_INT 22
6191: PUSH
6192: LD_INT 1
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: PUSH
6199: LD_INT 25
6201: PUSH
6202: LD_INT 2
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: PPUSH
6213: CALL_OW 69
6217: ST_TO_ADDR
// if not tmp then
6218: LD_VAR 0 3
6222: NOT
6223: IFFALSE 6227
// exit ;
6225: GO 6269
// ComExitBuilding ( tmp ) ;
6227: LD_VAR 0 3
6231: PPUSH
6232: CALL_OW 122
// AddComBuild ( tmp , b_breastwork , 40 , 13 , 3 ) ;
6236: LD_VAR 0 3
6240: PPUSH
6241: LD_INT 31
6243: PPUSH
6244: LD_INT 40
6246: PPUSH
6247: LD_INT 13
6249: PPUSH
6250: LD_INT 3
6252: PPUSH
6253: CALL_OW 205
// AddComEnterUnit ( tmp , Delta ) ;
6257: LD_VAR 0 3
6261: PPUSH
6262: LD_INT 1
6264: PPUSH
6265: CALL_OW 180
// end ;
6269: LD_VAR 0 1
6273: RET
// every 3 3$00 do
6274: GO 6276
6276: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
6277: LD_INT 1
6279: PPUSH
6280: LD_INT 570
6282: PPUSH
6283: LD_INT 350
6285: PPUSH
6286: CALL_OW 550
// wait ( 2 2$40 ) ;
6290: LD_INT 5600
6292: PPUSH
6293: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
6297: LD_INT 0
6299: PPUSH
6300: LD_INT 570
6302: PPUSH
6303: LD_INT 350
6305: PPUSH
6306: CALL_OW 550
// end ;
6310: END
// every 0 0$1 trigger not aviradzeSpotted and See ( 2 , Aviradze ) do var i , pepAmount ;
6311: LD_EXP 4
6315: NOT
6316: PUSH
6317: LD_INT 2
6319: PPUSH
6320: LD_EXP 27
6324: PPUSH
6325: CALL_OW 292
6329: AND
6330: IFFALSE 7255
6332: GO 6334
6334: DISABLE
6335: LD_INT 0
6337: PPUSH
6338: PPUSH
// begin SetAreaMapShow ( eastExitArea , 0 ) ;
6339: LD_INT 10
6341: PPUSH
6342: LD_INT 0
6344: PPUSH
6345: CALL_OW 424
// aviradzeSpotted := true ;
6349: LD_ADDR_EXP 4
6353: PUSH
6354: LD_INT 1
6356: ST_TO_ADDR
// pepAmount := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ;
6357: LD_ADDR_VAR 0 2
6361: PUSH
6362: LD_INT 22
6364: PUSH
6365: LD_INT 2
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: PUSH
6372: LD_INT 21
6374: PUSH
6375: LD_INT 1
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: PPUSH
6386: CALL_OW 69
6390: ST_TO_ADDR
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6391: LD_EXP 23
6395: PPUSH
6396: LD_EXP 27
6400: PPUSH
6401: CALL_OW 250
6405: PPUSH
6406: LD_EXP 27
6410: PPUSH
6411: CALL_OW 251
6415: PPUSH
6416: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6420: LD_INT 35
6422: PPUSH
6423: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 16 ;
6427: LD_EXP 23
6431: PPUSH
6432: LD_EXP 27
6436: PPUSH
6437: CALL_OW 296
6441: PUSH
6442: LD_INT 16
6444: LESS
6445: IFFALSE 6420
// InGameOn ;
6447: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
6451: LD_INT 5
6453: PPUSH
6454: LD_INT 2
6456: PPUSH
6457: CALL_OW 343
// if pepAmount > 2 then
6461: LD_VAR 0 2
6465: PUSH
6466: LD_INT 2
6468: GREATER
6469: IFFALSE 6485
// Say ( Heike , DH-1-spot ) else
6471: LD_EXP 23
6475: PPUSH
6476: LD_STRING DH-1-spot
6478: PPUSH
6479: CALL_OW 88
6483: GO 6497
// Say ( Heike , DH-1-spot-d ) ;
6485: LD_EXP 23
6489: PPUSH
6490: LD_STRING DH-1-spot-d
6492: PPUSH
6493: CALL_OW 88
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6497: LD_EXP 23
6501: PPUSH
6502: LD_EXP 27
6506: PPUSH
6507: CALL_OW 250
6511: PPUSH
6512: LD_EXP 27
6516: PPUSH
6517: CALL_OW 251
6521: PPUSH
6522: CALL_OW 111
// for i in [ Kamil , Mike , Givi ] do
6526: LD_ADDR_VAR 0 1
6530: PUSH
6531: LD_EXP 26
6535: PUSH
6536: LD_EXP 25
6540: PUSH
6541: LD_EXP 24
6545: PUSH
6546: EMPTY
6547: LIST
6548: LIST
6549: LIST
6550: PUSH
6551: FOR_IN
6552: IFFALSE 6591
// if GetDistUnits ( i , Aviradze ) > 7 then
6554: LD_VAR 0 1
6558: PPUSH
6559: LD_EXP 27
6563: PPUSH
6564: CALL_OW 296
6568: PUSH
6569: LD_INT 7
6571: GREATER
6572: IFFALSE 6589
// ComMoveXY ( i , 102 , 40 ) ;
6574: LD_VAR 0 1
6578: PPUSH
6579: LD_INT 102
6581: PPUSH
6582: LD_INT 40
6584: PPUSH
6585: CALL_OW 111
6589: GO 6551
6591: POP
6592: POP
// repeat wait ( 0 0$1 ) ;
6593: LD_INT 35
6595: PPUSH
6596: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 6 ;
6600: LD_EXP 23
6604: PPUSH
6605: LD_EXP 27
6609: PPUSH
6610: CALL_OW 296
6614: PUSH
6615: LD_INT 6
6617: LESS
6618: IFFALSE 6593
// ComTurnUnit ( Heike , Aviradze ) ;
6620: LD_EXP 23
6624: PPUSH
6625: LD_EXP 27
6629: PPUSH
6630: CALL_OW 119
// ComTurnUnit ( [ Aviradze , Sophia , Kaia ] , Heike ) ;
6634: LD_EXP 27
6638: PUSH
6639: LD_EXP 29
6643: PUSH
6644: LD_EXP 28
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: LIST
6653: PPUSH
6654: LD_EXP 23
6658: PPUSH
6659: CALL_OW 119
// if pepAmount > 1 then
6663: LD_VAR 0 2
6667: PUSH
6668: LD_INT 1
6670: GREATER
6671: IFFALSE 6723
// begin wait ( 0 0$2 ) ;
6673: LD_INT 70
6675: PPUSH
6676: CALL_OW 67
// ComTurnUnit ( [ Kamil , Mike , Givi ] , Aviradze ) ;
6680: LD_EXP 26
6684: PUSH
6685: LD_EXP 25
6689: PUSH
6690: LD_EXP 24
6694: PUSH
6695: EMPTY
6696: LIST
6697: LIST
6698: LIST
6699: PPUSH
6700: LD_EXP 27
6704: PPUSH
6705: CALL_OW 119
// Say ( Heike , DH-2-spot ) ;
6709: LD_EXP 23
6713: PPUSH
6714: LD_STRING DH-2-spot
6716: PPUSH
6717: CALL_OW 88
// end else
6721: GO 6735
// Say ( Heike , DH-2-spot-d ) ;
6723: LD_EXP 23
6727: PPUSH
6728: LD_STRING DH-2-spot-d
6730: PPUSH
6731: CALL_OW 88
// Say ( Aviradze , DA-2-spot ) ;
6735: LD_EXP 27
6739: PPUSH
6740: LD_STRING DA-2-spot
6742: PPUSH
6743: CALL_OW 88
// Say ( Heike , DH-3-spot ) ;
6747: LD_EXP 23
6751: PPUSH
6752: LD_STRING DH-3-spot
6754: PPUSH
6755: CALL_OW 88
// ComMoveUnit ( Kaia , Heike ) ;
6759: LD_EXP 28
6763: PPUSH
6764: LD_EXP 23
6768: PPUSH
6769: CALL_OW 112
// ComTurnUnit ( Heike , Kaia ) ;
6773: LD_EXP 23
6777: PPUSH
6778: LD_EXP 28
6782: PPUSH
6783: CALL_OW 119
// wait ( 0 0$0.3 ) ;
6787: LD_INT 10
6789: PPUSH
6790: CALL_OW 67
// Say ( Kaia , DK-3-spot ) ;
6794: LD_EXP 28
6798: PPUSH
6799: LD_STRING DK-3-spot
6801: PPUSH
6802: CALL_OW 88
// ComTurnUnit ( Kaia , Heike ) ;
6806: LD_EXP 28
6810: PPUSH
6811: LD_EXP 23
6815: PPUSH
6816: CALL_OW 119
// Say ( Heike , DH-4-spot ) ;
6820: LD_EXP 23
6824: PPUSH
6825: LD_STRING DH-4-spot
6827: PPUSH
6828: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6832: LD_INT 10
6834: PPUSH
6835: CALL_OW 67
// ComTurnUnit ( Heike , Aviradze ) ;
6839: LD_EXP 23
6843: PPUSH
6844: LD_EXP 27
6848: PPUSH
6849: CALL_OW 119
// Say ( Aviradze , DA-4-spot ) ;
6853: LD_EXP 27
6857: PPUSH
6858: LD_STRING DA-4-spot
6860: PPUSH
6861: CALL_OW 88
// ComTurnUnit ( Kaia , Aviradze ) ;
6865: LD_EXP 28
6869: PPUSH
6870: LD_EXP 27
6874: PPUSH
6875: CALL_OW 119
// Say ( Kaia , DK-4-spot ) ;
6879: LD_EXP 28
6883: PPUSH
6884: LD_STRING DK-4-spot
6886: PPUSH
6887: CALL_OW 88
// ComTurnUnit ( Aviradze , Kaia ) ;
6891: LD_EXP 27
6895: PPUSH
6896: LD_EXP 28
6900: PPUSH
6901: CALL_OW 119
// Say ( Aviradze , DA-5-spot ) ;
6905: LD_EXP 27
6909: PPUSH
6910: LD_STRING DA-5-spot
6912: PPUSH
6913: CALL_OW 88
// Say ( Kaia , DK-5-spot ) ;
6917: LD_EXP 28
6921: PPUSH
6922: LD_STRING DK-5-spot
6924: PPUSH
6925: CALL_OW 88
// if pepAmount = 1 then
6929: LD_VAR 0 2
6933: PUSH
6934: LD_INT 1
6936: EQUAL
6937: IFFALSE 6951
// Say ( Heike , DH-5-spot-f ) ;
6939: LD_EXP 23
6943: PPUSH
6944: LD_STRING DH-5-spot-f
6946: PPUSH
6947: CALL_OW 88
// if pepAmount < 3 then
6951: LD_VAR 0 2
6955: PUSH
6956: LD_INT 3
6958: LESS
6959: IFFALSE 6975
// Say ( Aviradze , DA-6-spot-f ) else
6961: LD_EXP 27
6965: PPUSH
6966: LD_STRING DA-6-spot-f
6968: PPUSH
6969: CALL_OW 88
6973: GO 7011
// if pepAmount < 4 then
6975: LD_VAR 0 2
6979: PUSH
6980: LD_INT 4
6982: LESS
6983: IFFALSE 6999
// Say ( Aviradze , DA-6-spot-c ) else
6985: LD_EXP 27
6989: PPUSH
6990: LD_STRING DA-6-spot-c
6992: PPUSH
6993: CALL_OW 88
6997: GO 7011
// Say ( Aviradze , DA-6-spot ) ;
6999: LD_EXP 27
7003: PPUSH
7004: LD_STRING DA-6-spot
7006: PPUSH
7007: CALL_OW 88
// if Kamil then
7011: LD_EXP 26
7015: IFFALSE 7029
// Say ( Kamil , DKam-6-spot ) ;
7017: LD_EXP 26
7021: PPUSH
7022: LD_STRING DKam-6-spot
7024: PPUSH
7025: CALL_OW 88
// Say ( Kaia , DK-6-spot ) ;
7029: LD_EXP 28
7033: PPUSH
7034: LD_STRING DK-6-spot
7036: PPUSH
7037: CALL_OW 88
// ComTurnUnit ( Aviradze , Heike ) ;
7041: LD_EXP 27
7045: PPUSH
7046: LD_EXP 23
7050: PPUSH
7051: CALL_OW 119
// Say ( Aviradze , DA-7-spot ) ;
7055: LD_EXP 27
7059: PPUSH
7060: LD_STRING DA-7-spot
7062: PPUSH
7063: CALL_OW 88
// Say ( Heike , DH-7-spot ) ;
7067: LD_EXP 23
7071: PPUSH
7072: LD_STRING DH-7-spot
7074: PPUSH
7075: CALL_OW 88
// if sciCounterKill >= 3 then
7079: LD_EXP 9
7083: PUSH
7084: LD_INT 3
7086: GREATEREQUAL
7087: IFFALSE 7113
// begin Say ( Heike , DH-7-spot-a ) ;
7089: LD_EXP 23
7093: PPUSH
7094: LD_STRING DH-7-spot-a
7096: PPUSH
7097: CALL_OW 88
// Say ( Aviradze , DA-8-spot-a ) ;
7101: LD_EXP 27
7105: PPUSH
7106: LD_STRING DA-8-spot-a
7108: PPUSH
7109: CALL_OW 88
// end ; InGameOff ;
7113: CALL_OW 9
// if sciCounterKill < 3 then
7117: LD_EXP 9
7121: PUSH
7122: LD_INT 3
7124: LESS
7125: IFFALSE 7193
// begin SetSide ( Kaia , 2 ) ;
7127: LD_EXP 28
7131: PPUSH
7132: LD_INT 2
7134: PPUSH
7135: CALL_OW 235
// ComFree ( Kaia ) ;
7139: LD_EXP 28
7143: PPUSH
7144: CALL_OW 139
// if Kamil then
7148: LD_EXP 26
7152: IFFALSE 7175
// begin ComHold ( Kamil ) ;
7154: LD_EXP 26
7158: PPUSH
7159: CALL_OW 140
// SetSide ( Kamil , 5 ) ;
7163: LD_EXP 26
7167: PPUSH
7168: LD_INT 5
7170: PPUSH
7171: CALL_OW 235
// end ; ChangeMissionObjectives ( OSci ) ;
7175: LD_STRING OSci
7177: PPUSH
7178: CALL_OW 337
// ComFree ( Aviradze ) ;
7182: LD_EXP 27
7186: PPUSH
7187: CALL_OW 139
// end else
7191: GO 7255
// begin aviradzeQuestDone := true ;
7193: LD_ADDR_EXP 8
7197: PUSH
7198: LD_INT 1
7200: ST_TO_ADDR
// attackDeltaAllowed := true ;
7201: LD_ADDR_EXP 14
7205: PUSH
7206: LD_INT 1
7208: ST_TO_ADDR
// ChangeMissionObjectives ( ODelta2 ) ;
7209: LD_STRING ODelta2
7211: PPUSH
7212: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
7216: LD_ADDR_VAR 0 1
7220: PUSH
7221: LD_INT 22
7223: PUSH
7224: LD_INT 5
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: PPUSH
7231: CALL_OW 69
7235: PUSH
7236: FOR_IN
7237: IFFALSE 7253
// SetSide ( i , 2 ) ;
7239: LD_VAR 0 1
7243: PPUSH
7244: LD_INT 2
7246: PPUSH
7247: CALL_OW 235
7251: GO 7236
7253: POP
7254: POP
// end ; end ;
7255: PPOPN 2
7257: END
// every 0 0$2 trigger GetDistUnitXY ( Aviradze , 106 , 38 ) > 8 and GetSide ( Aviradze ) = 5 do
7258: LD_EXP 27
7262: PPUSH
7263: LD_INT 106
7265: PPUSH
7266: LD_INT 38
7268: PPUSH
7269: CALL_OW 297
7273: PUSH
7274: LD_INT 8
7276: GREATER
7277: PUSH
7278: LD_EXP 27
7282: PPUSH
7283: CALL_OW 255
7287: PUSH
7288: LD_INT 5
7290: EQUAL
7291: AND
7292: IFFALSE 7313
7294: GO 7296
7296: DISABLE
// begin enable ;
7297: ENABLE
// ComMoveXY ( Aviradze , 106 , 38 ) ;
7298: LD_EXP 27
7302: PPUSH
7303: LD_INT 106
7305: PPUSH
7306: LD_INT 38
7308: PPUSH
7309: CALL_OW 111
// end ;
7313: END
// every 0 0$2 trigger usAlert and not aviradzeQuestDone do
7314: LD_EXP 10
7318: PUSH
7319: LD_EXP 8
7323: NOT
7324: AND
7325: IFFALSE 7342
7327: GO 7329
7329: DISABLE
// SayRadioNoFaceNoName ( Lynch , DDelta-Alarm-1 ) ;
7330: LD_EXP 20
7334: PPUSH
7335: LD_STRING DDelta-Alarm-1
7337: PPUSH
7338: CALL 74278 0 2
7342: END
// every 0 0$1 trigger not sciSpotted and GetDistUnits ( NearestUnitToUnit ( usSci , Heike ) , Heike ) < 8 and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and not aviradzeSpotted do
7343: LD_EXP 7
7347: NOT
7348: PUSH
7349: LD_EXP 22
7353: PPUSH
7354: LD_EXP 23
7358: PPUSH
7359: CALL_OW 74
7363: PPUSH
7364: LD_EXP 23
7368: PPUSH
7369: CALL_OW 296
7373: PUSH
7374: LD_INT 8
7376: LESS
7377: AND
7378: PUSH
7379: LD_INT 2
7381: PPUSH
7382: LD_EXP 22
7386: PPUSH
7387: LD_EXP 23
7391: PPUSH
7392: CALL_OW 74
7396: PPUSH
7397: CALL_OW 292
7401: AND
7402: PUSH
7403: LD_INT 22
7405: PUSH
7406: LD_INT 2
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 21
7415: PUSH
7416: LD_INT 1
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: PPUSH
7427: CALL_OW 69
7431: PUSH
7432: LD_INT 1
7434: GREATER
7435: AND
7436: PUSH
7437: LD_EXP 4
7441: NOT
7442: AND
7443: IFFALSE 7487
7445: GO 7447
7447: DISABLE
// begin sciSpotted := true ;
7448: LD_ADDR_EXP 7
7452: PUSH
7453: LD_INT 1
7455: ST_TO_ADDR
// CenterNowOnUnits ( NearestUnitToUnit ( usSci , Heike ) ) ;
7456: LD_EXP 22
7460: PPUSH
7461: LD_EXP 23
7465: PPUSH
7466: CALL_OW 74
7470: PPUSH
7471: CALL_OW 87
// Say ( Heike , DH-1-sci ) ;
7475: LD_EXP 23
7479: PPUSH
7480: LD_STRING DH-1-sci
7482: PPUSH
7483: CALL_OW 88
// end ;
7487: END
// every 0 0$1 trigger aviradzeSpotted and not sciSpotted and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and aviradzeSpotted and not aviradzeQuestDone do var un ;
7488: LD_EXP 4
7492: PUSH
7493: LD_EXP 7
7497: NOT
7498: AND
7499: PUSH
7500: LD_INT 2
7502: PPUSH
7503: LD_EXP 22
7507: PPUSH
7508: LD_EXP 23
7512: PPUSH
7513: CALL_OW 74
7517: PPUSH
7518: CALL_OW 292
7522: AND
7523: PUSH
7524: LD_INT 22
7526: PUSH
7527: LD_INT 2
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: PUSH
7534: LD_INT 21
7536: PUSH
7537: LD_INT 1
7539: PUSH
7540: EMPTY
7541: LIST
7542: LIST
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: PPUSH
7548: CALL_OW 69
7552: PUSH
7553: LD_INT 1
7555: GREATER
7556: AND
7557: PUSH
7558: LD_EXP 4
7562: AND
7563: PUSH
7564: LD_EXP 8
7568: NOT
7569: AND
7570: IFFALSE 7711
7572: GO 7574
7574: DISABLE
7575: LD_INT 0
7577: PPUSH
// begin sciSpotted := true ;
7578: LD_ADDR_EXP 7
7582: PUSH
7583: LD_INT 1
7585: ST_TO_ADDR
// un := NearestUnitToUnit ( usSci , Heike ) ;
7586: LD_ADDR_VAR 0 1
7590: PUSH
7591: LD_EXP 22
7595: PPUSH
7596: LD_EXP 23
7600: PPUSH
7601: CALL_OW 74
7605: ST_TO_ADDR
// DialogueOn ;
7606: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 2 , - 3 ) ;
7610: LD_VAR 0 1
7614: PPUSH
7615: CALL_OW 250
7619: PPUSH
7620: LD_VAR 0 1
7624: PPUSH
7625: CALL_OW 251
7629: PPUSH
7630: LD_INT 2
7632: PPUSH
7633: LD_INT 3
7635: NEG
7636: PPUSH
7637: CALL_OW 330
// CenterNowOnUnits ( un ) ;
7641: LD_VAR 0 1
7645: PPUSH
7646: CALL_OW 87
// Say ( Heike , DH-1-sci-a ) ;
7650: LD_EXP 23
7654: PPUSH
7655: LD_STRING DH-1-sci-a
7657: PPUSH
7658: CALL_OW 88
// if Mike then
7662: LD_EXP 25
7666: IFFALSE 7680
// Say ( Mike , DM-1-sci-a ) ;
7668: LD_EXP 25
7672: PPUSH
7673: LD_STRING DM-1-sci-a
7675: PPUSH
7676: CALL_OW 88
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 2 ) ;
7680: LD_VAR 0 1
7684: PPUSH
7685: CALL_OW 250
7689: PPUSH
7690: LD_VAR 0 1
7694: PPUSH
7695: CALL_OW 251
7699: PPUSH
7700: LD_INT 2
7702: PPUSH
7703: CALL_OW 331
// DialogueOff ;
7707: CALL_OW 7
// end ;
7711: PPOPN 1
7713: END
// every 0 0$1 trigger usAlert and ( GetLives ( Gladstone ) < 1000 or GetLives ( usLab ) < 999 ) do var veh ;
7714: LD_EXP 10
7718: PUSH
7719: LD_EXP 19
7723: PPUSH
7724: CALL_OW 256
7728: PUSH
7729: LD_INT 1000
7731: LESS
7732: PUSH
7733: LD_INT 3
7735: PPUSH
7736: CALL_OW 256
7740: PUSH
7741: LD_INT 999
7743: LESS
7744: OR
7745: AND
7746: IFFALSE 8002
7748: GO 7750
7750: DISABLE
7751: LD_INT 0
7753: PPUSH
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
7754: LD_ADDR_VAR 0 1
7758: PUSH
7759: LD_INT 22
7761: PUSH
7762: LD_INT 1
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: PUSH
7769: LD_INT 21
7771: PUSH
7772: LD_INT 2
7774: PUSH
7775: EMPTY
7776: LIST
7777: LIST
7778: PUSH
7779: LD_INT 58
7781: PUSH
7782: EMPTY
7783: LIST
7784: PUSH
7785: EMPTY
7786: LIST
7787: LIST
7788: LIST
7789: PPUSH
7790: CALL_OW 69
7794: ST_TO_ADDR
// if veh and IsOk ( Gladstone ) then
7795: LD_VAR 0 1
7799: PUSH
7800: LD_EXP 19
7804: PPUSH
7805: CALL_OW 302
7809: AND
7810: IFFALSE 7852
// begin if IsInUnit ( Gladstone ) then
7812: LD_EXP 19
7816: PPUSH
7817: CALL_OW 310
7821: IFFALSE 7832
// ComExitBuilding ( Gladstone ) ;
7823: LD_EXP 19
7827: PPUSH
7828: CALL_OW 122
// AddComEnterUnit ( Gladstone , veh [ 1 ] ) ;
7832: LD_EXP 19
7836: PPUSH
7837: LD_VAR 0 1
7841: PUSH
7842: LD_INT 1
7844: ARRAY
7845: PPUSH
7846: CALL_OW 180
// end else
7850: GO 7872
// if IsInUnit ( Gladstone ) then
7852: LD_EXP 19
7856: PPUSH
7857: CALL_OW 310
7861: IFFALSE 7872
// ComExitBuilding ( Gladstone ) ;
7863: LD_EXP 19
7867: PPUSH
7868: CALL_OW 122
// AddComMoveXY ( Gladstone , 27 , 51 ) ;
7872: LD_EXP 19
7876: PPUSH
7877: LD_INT 27
7879: PPUSH
7880: LD_INT 51
7882: PPUSH
7883: CALL_OW 171
// Say ( Gladstone , D8-Glad-2 ) ;
7887: LD_EXP 19
7891: PPUSH
7892: LD_STRING D8-Glad-2
7894: PPUSH
7895: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7899: LD_INT 35
7901: PPUSH
7902: CALL_OW 67
// until IsAt ( Gladstone , 27 , 51 ) or IsAt ( IsInUnit ( Gladstone ) , 27 , 51 ) or IsDead ( Gladstone ) ;
7906: LD_EXP 19
7910: PPUSH
7911: LD_INT 27
7913: PPUSH
7914: LD_INT 51
7916: PPUSH
7917: CALL_OW 307
7921: PUSH
7922: LD_EXP 19
7926: PPUSH
7927: CALL_OW 310
7931: PPUSH
7932: LD_INT 27
7934: PPUSH
7935: LD_INT 51
7937: PPUSH
7938: CALL_OW 307
7942: OR
7943: PUSH
7944: LD_EXP 19
7948: PPUSH
7949: CALL_OW 301
7953: OR
7954: IFFALSE 7899
// if IsDead ( Gladstone ) then
7956: LD_EXP 19
7960: PPUSH
7961: CALL_OW 301
7965: IFFALSE 7969
// exit ;
7967: GO 8002
// RemoveUnit ( HexInfo ( 27 , 51 ) ) ;
7969: LD_INT 27
7971: PPUSH
7972: LD_INT 51
7974: PPUSH
7975: CALL_OW 428
7979: PPUSH
7980: CALL_OW 64
// gladstoneEscaped := true ;
7984: LD_ADDR_EXP 12
7988: PUSH
7989: LD_INT 1
7991: ST_TO_ADDR
// SaveVariable ( true , 02_GladstoneEscaped ) ;
7992: LD_INT 1
7994: PPUSH
7995: LD_STRING 02_GladstoneEscaped
7997: PPUSH
7998: CALL_OW 39
// end ;
8002: PPOPN 1
8004: END
// every 0 0$1 trigger aviradzeSpotted and ( sciCounterKill >= 3 or not usSci ) and not aviradzeQuestDone do
8005: LD_EXP 4
8009: PUSH
8010: LD_EXP 9
8014: PUSH
8015: LD_INT 3
8017: GREATEREQUAL
8018: PUSH
8019: LD_EXP 22
8023: NOT
8024: OR
8025: AND
8026: PUSH
8027: LD_EXP 8
8031: NOT
8032: AND
8033: IFFALSE 8076
8035: GO 8037
8037: DISABLE
// begin aviradzeQuestDone := true ;
8038: LD_ADDR_EXP 8
8042: PUSH
8043: LD_INT 1
8045: ST_TO_ADDR
// Say ( Heike , DH-1-quest-done ) ;
8046: LD_EXP 23
8050: PPUSH
8051: LD_STRING DH-1-quest-done
8053: PPUSH
8054: CALL_OW 88
// if Givi then
8058: LD_EXP 24
8062: IFFALSE 8076
// Say ( Givi , DG-1-quest-done ) ;
8064: LD_EXP 24
8068: PPUSH
8069: LD_STRING DG-1-quest-done
8071: PPUSH
8072: CALL_OW 88
// end ;
8076: END
// every 0 0$1 trigger FilterUnitsInArea ( frontlineAttack , [ f_side , 2 ] ) > 1 and not aviradzeQuestDone and GetSide ( Delta ) <> 2 and IsOk ( Mike ) and IsOk ( Heike ) do
8077: LD_INT 11
8079: PPUSH
8080: LD_INT 22
8082: PUSH
8083: LD_INT 2
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: PPUSH
8090: CALL_OW 70
8094: PUSH
8095: LD_INT 1
8097: GREATER
8098: PUSH
8099: LD_EXP 8
8103: NOT
8104: AND
8105: PUSH
8106: LD_INT 1
8108: PPUSH
8109: CALL_OW 255
8113: PUSH
8114: LD_INT 2
8116: NONEQUAL
8117: AND
8118: PUSH
8119: LD_EXP 25
8123: PPUSH
8124: CALL_OW 302
8128: AND
8129: PUSH
8130: LD_EXP 23
8134: PPUSH
8135: CALL_OW 302
8139: AND
8140: IFFALSE 8285
8142: GO 8144
8144: DISABLE
// begin DialogueOn ;
8145: CALL_OW 6
// PlaceSeeing ( 47 , 19 , 2 , - 6 ) ;
8149: LD_INT 47
8151: PPUSH
8152: LD_INT 19
8154: PPUSH
8155: LD_INT 2
8157: PPUSH
8158: LD_INT 6
8160: NEG
8161: PPUSH
8162: CALL_OW 330
// RemoveSeeing ( 47 , 19 , 2 ) ;
8166: LD_INT 47
8168: PPUSH
8169: LD_INT 19
8171: PPUSH
8172: LD_INT 2
8174: PPUSH
8175: CALL_OW 331
// PlaceSeeing ( 34 , 32 , 2 , - 6 ) ;
8179: LD_INT 34
8181: PPUSH
8182: LD_INT 32
8184: PPUSH
8185: LD_INT 2
8187: PPUSH
8188: LD_INT 6
8190: NEG
8191: PPUSH
8192: CALL_OW 330
// RemoveSeeing ( 34 , 32 , 2 ) ;
8196: LD_INT 34
8198: PPUSH
8199: LD_INT 32
8201: PPUSH
8202: LD_INT 2
8204: PPUSH
8205: CALL_OW 331
// Say ( Mike , DM-Prem-1 ) ;
8209: LD_EXP 25
8213: PPUSH
8214: LD_STRING DM-Prem-1
8216: PPUSH
8217: CALL_OW 88
// Say ( Heike , DH-Prem-2 ) ;
8221: LD_EXP 23
8225: PPUSH
8226: LD_STRING DH-Prem-2
8228: PPUSH
8229: CALL_OW 88
// Say ( Heike , DH-Prem-3 ) ;
8233: LD_EXP 23
8237: PPUSH
8238: LD_STRING DH-Prem-3
8240: PPUSH
8241: CALL_OW 88
// Say ( Mike , DM-Prem-4 ) ;
8245: LD_EXP 25
8249: PPUSH
8250: LD_STRING DM-Prem-4
8252: PPUSH
8253: CALL_OW 88
// Say ( Mike , DM-Prem-5 ) ;
8257: LD_EXP 25
8261: PPUSH
8262: LD_STRING DM-Prem-5
8264: PPUSH
8265: CALL_OW 88
// Say ( Givi , DG-Prem-6 ) ;
8269: LD_EXP 24
8273: PPUSH
8274: LD_STRING DG-Prem-6
8276: PPUSH
8277: CALL_OW 88
// DialogueOff ;
8281: CALL_OW 7
// end ;
8285: END
// every 0 0$1 trigger See ( 5 , Heike ) and GetDistUnits ( Heike , Aviradze ) < 6 and aviradzeQuestDone and not attackDeltaAllowed do var i ;
8286: LD_INT 5
8288: PPUSH
8289: LD_EXP 23
8293: PPUSH
8294: CALL_OW 292
8298: PUSH
8299: LD_EXP 23
8303: PPUSH
8304: LD_EXP 27
8308: PPUSH
8309: CALL_OW 296
8313: PUSH
8314: LD_INT 6
8316: LESS
8317: AND
8318: PUSH
8319: LD_EXP 8
8323: AND
8324: PUSH
8325: LD_EXP 14
8329: NOT
8330: AND
8331: IFFALSE 8469
8333: GO 8335
8335: DISABLE
8336: LD_INT 0
8338: PPUSH
// begin attackDeltaAllowed := true ;
8339: LD_ADDR_EXP 14
8343: PUSH
8344: LD_INT 1
8346: ST_TO_ADDR
// InGameOn ;
8347: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
8351: LD_EXP 23
8355: PPUSH
8356: CALL_OW 87
// wait ( 0 0$0.3 ) ;
8360: LD_INT 10
8362: PPUSH
8363: CALL_OW 67
// ComTurnUnit ( Aviradze , Heike ) ;
8367: LD_EXP 27
8371: PPUSH
8372: LD_EXP 23
8376: PPUSH
8377: CALL_OW 119
// ComTurnUnit ( Heike , Aviradze ) ;
8381: LD_EXP 23
8385: PPUSH
8386: LD_EXP 27
8390: PPUSH
8391: CALL_OW 119
// Say ( Heike , DH-1-return ) ;
8395: LD_EXP 23
8399: PPUSH
8400: LD_STRING DH-1-return
8402: PPUSH
8403: CALL_OW 88
// Say ( Aviradze , DA-1-return ) ;
8407: LD_EXP 27
8411: PPUSH
8412: LD_STRING DA-1-return
8414: PPUSH
8415: CALL_OW 88
// InGameOff ;
8419: CALL_OW 9
// ChangeMissionObjectives ( ODelta ) ;
8423: LD_STRING ODelta
8425: PPUSH
8426: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
8430: LD_ADDR_VAR 0 1
8434: PUSH
8435: LD_INT 22
8437: PUSH
8438: LD_INT 5
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: PPUSH
8445: CALL_OW 69
8449: PUSH
8450: FOR_IN
8451: IFFALSE 8467
// SetSide ( i , 2 ) ;
8453: LD_VAR 0 1
8457: PPUSH
8458: LD_INT 2
8460: PPUSH
8461: CALL_OW 235
8465: GO 8450
8467: POP
8468: POP
// end ;
8469: PPOPN 1
8471: END
// every 0 0$1 trigger usAlert and not attackDeltaAllowed do
8472: LD_EXP 10
8476: PUSH
8477: LD_EXP 14
8481: NOT
8482: AND
8483: IFFALSE 8496
8485: GO 8487
8487: DISABLE
// spottedBeforeRadio := true ;
8488: LD_ADDR_EXP 6
8492: PUSH
8493: LD_INT 1
8495: ST_TO_ADDR
8496: END
// every 0 0$1 trigger attackDeltaAllowed and IsOk ( Markov ) and GetSide ( Delta ) = 1 and IsOk ( Lynch ) and not usAlert do var i , k , tmp ;
8497: LD_EXP 14
8501: PUSH
8502: LD_EXP 30
8506: PPUSH
8507: CALL_OW 302
8511: AND
8512: PUSH
8513: LD_INT 1
8515: PPUSH
8516: CALL_OW 255
8520: PUSH
8521: LD_INT 1
8523: EQUAL
8524: AND
8525: PUSH
8526: LD_EXP 20
8530: PPUSH
8531: CALL_OW 302
8535: AND
8536: PUSH
8537: LD_EXP 10
8541: NOT
8542: AND
8543: IFFALSE 9771
8545: GO 8547
8547: DISABLE
8548: LD_INT 0
8550: PPUSH
8551: PPUSH
8552: PPUSH
// begin trap := 0 ;
8553: LD_ADDR_EXP 17
8557: PUSH
8558: LD_INT 0
8560: ST_TO_ADDR
// wait ( 0 0$12 ) ;
8561: LD_INT 420
8563: PPUSH
8564: CALL_OW 67
// DialogueOn ;
8568: CALL_OW 6
// Say ( Markov , DMar-1-radio ) ;
8572: LD_EXP 30
8576: PPUSH
8577: LD_STRING DMar-1-radio
8579: PPUSH
8580: CALL_OW 88
// Say ( Heike , DH-1-radio ) ;
8584: LD_EXP 23
8588: PPUSH
8589: LD_STRING DH-1-radio
8591: PPUSH
8592: CALL_OW 88
// Say ( Markov , DMar-2-radio ) ;
8596: LD_EXP 30
8600: PPUSH
8601: LD_STRING DMar-2-radio
8603: PPUSH
8604: CALL_OW 88
// Say ( Heike , DH-2-radio ) ;
8608: LD_EXP 23
8612: PPUSH
8613: LD_STRING DH-2-radio
8615: PPUSH
8616: CALL_OW 88
// if IsOk ( Kamil ) or IsOk ( Sophia ) then
8620: LD_EXP 26
8624: PPUSH
8625: CALL_OW 302
8629: PUSH
8630: LD_EXP 29
8634: PPUSH
8635: CALL_OW 302
8639: OR
8640: IFFALSE 9771
// begin case Query ( Q1Trap ) of 1 :
8642: LD_STRING Q1Trap
8644: PPUSH
8645: CALL_OW 97
8649: PUSH
8650: LD_INT 1
8652: DOUBLE
8653: EQUAL
8654: IFTRUE 8658
8656: GO 8864
8658: POP
// begin if IsOk ( Kamil ) then
8659: LD_EXP 26
8663: PPUSH
8664: CALL_OW 302
8668: IFFALSE 8747
// begin Say ( Kamil , DKam-2-radio ) ;
8670: LD_EXP 26
8674: PPUSH
8675: LD_STRING DKam-2-radio
8677: PPUSH
8678: CALL_OW 88
// Say ( Kamil , DKam-3-radio ) ;
8682: LD_EXP 26
8686: PPUSH
8687: LD_STRING DKam-3-radio
8689: PPUSH
8690: CALL_OW 88
// SayRadioNoFaceNoName ( Lynch , DDelta-3-radio ) ;
8694: LD_EXP 20
8698: PPUSH
8699: LD_STRING DDelta-3-radio
8701: PPUSH
8702: CALL 74278 0 2
// dwait ( 0 0$01 ) ;
8706: LD_INT 35
8708: PPUSH
8709: CALL_OW 68
// Say ( Heike , DH-3-radio ) ;
8713: LD_EXP 23
8717: PPUSH
8718: LD_STRING DH-3-radio
8720: PPUSH
8721: CALL_OW 88
// Say ( Kamil , DKam-4-radio ) ;
8725: LD_EXP 26
8729: PPUSH
8730: LD_STRING DKam-4-radio
8732: PPUSH
8733: CALL_OW 88
// trap := 1 ;
8737: LD_ADDR_EXP 17
8741: PUSH
8742: LD_INT 1
8744: ST_TO_ADDR
// end else
8745: GO 8858
// begin Say ( Sophia , DS-1-radio ) ;
8747: LD_EXP 29
8751: PPUSH
8752: LD_STRING DS-1-radio
8754: PPUSH
8755: CALL_OW 88
// Say ( Sophia , DS-2-radio ) ;
8759: LD_EXP 29
8763: PPUSH
8764: LD_STRING DS-2-radio
8766: PPUSH
8767: CALL_OW 88
// SayRadioNoFaceNoName ( Lynch , DDelta-2-radio-s ) ;
8771: LD_EXP 20
8775: PPUSH
8776: LD_STRING DDelta-2-radio-s
8778: PPUSH
8779: CALL 74278 0 2
// Say ( Sophia , DS-3-radio ) ;
8783: LD_EXP 29
8787: PPUSH
8788: LD_STRING DS-3-radio
8790: PPUSH
8791: CALL_OW 88
// SayRadioNoFaceNoName ( Lynch , DDelta-3-radio-s ) ;
8795: LD_EXP 20
8799: PPUSH
8800: LD_STRING DDelta-3-radio-s
8802: PPUSH
8803: CALL 74278 0 2
// Say ( Sophia , DS-4-radio-s ) ;
8807: LD_EXP 29
8811: PPUSH
8812: LD_STRING DS-4-radio-s
8814: PPUSH
8815: CALL_OW 88
// SayRadioNoFaceNoName ( Lynch , DDelta-4-radio-s ) ;
8819: LD_EXP 20
8823: PPUSH
8824: LD_STRING DDelta-4-radio-s
8826: PPUSH
8827: CALL 74278 0 2
// dwait ( 0 0$01 ) ;
8831: LD_INT 35
8833: PPUSH
8834: CALL_OW 68
// Say ( Heike , DH-1-trap ) ;
8838: LD_EXP 23
8842: PPUSH
8843: LD_STRING DH-1-trap
8845: PPUSH
8846: CALL_OW 88
// trap := 0 ;
8850: LD_ADDR_EXP 17
8854: PUSH
8855: LD_INT 0
8857: ST_TO_ADDR
// end ; DialogueOff ;
8858: CALL_OW 7
// end ; 2 :
8862: GO 8882
8864: LD_INT 2
8866: DOUBLE
8867: EQUAL
8868: IFTRUE 8872
8870: GO 8881
8872: POP
// begin DialogueOff ;
8873: CALL_OW 7
// exit ;
8877: GO 9771
// end ; end ;
8879: GO 8882
8881: POP
// if trap = 1 then
8882: LD_EXP 17
8886: PUSH
8887: LD_INT 1
8889: EQUAL
8890: IFFALSE 9342
// begin PlaceSeeing ( 64 , 32 , 2 , 8 ) ;
8892: LD_INT 64
8894: PPUSH
8895: LD_INT 32
8897: PPUSH
8898: LD_INT 2
8900: PPUSH
8901: LD_INT 8
8903: PPUSH
8904: CALL_OW 330
// CenterOnXY ( 64 , 32 ) ;
8908: LD_INT 64
8910: PPUSH
8911: LD_INT 32
8913: PPUSH
8914: CALL_OW 84
// tmp := [ ] ;
8918: LD_ADDR_VAR 0 3
8922: PUSH
8923: EMPTY
8924: ST_TO_ADDR
// k := 3 ;
8925: LD_ADDR_VAR 0 2
8929: PUSH
8930: LD_INT 3
8932: ST_TO_ADDR
// if usForces < 3 then
8933: LD_EXP 21
8937: PUSH
8938: LD_INT 3
8940: LESS
8941: IFFALSE 8953
// k := usForces ;
8943: LD_ADDR_VAR 0 2
8947: PUSH
8948: LD_EXP 21
8952: ST_TO_ADDR
// for i := 1 to k do
8953: LD_ADDR_VAR 0 1
8957: PUSH
8958: DOUBLE
8959: LD_INT 1
8961: DEC
8962: ST_TO_ADDR
8963: LD_VAR 0 2
8967: PUSH
8968: FOR_TO
8969: IFFALSE 9024
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
8971: LD_ADDR_VAR 0 3
8975: PUSH
8976: LD_VAR 0 3
8980: PPUSH
8981: LD_VAR 0 3
8985: PUSH
8986: LD_INT 1
8988: PLUS
8989: PPUSH
8990: LD_EXP 21
8994: PUSH
8995: LD_INT 1
8997: ARRAY
8998: PPUSH
8999: CALL_OW 1
9003: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
9004: LD_ADDR_EXP 21
9008: PUSH
9009: LD_EXP 21
9013: PPUSH
9014: LD_INT 1
9016: PPUSH
9017: CALL_OW 3
9021: ST_TO_ADDR
// end ;
9022: GO 8968
9024: POP
9025: POP
// usPatrol := tmp ;
9026: LD_ADDR_EXP 16
9030: PUSH
9031: LD_VAR 0 3
9035: ST_TO_ADDR
// for i in tmp do
9036: LD_ADDR_VAR 0 1
9040: PUSH
9041: LD_VAR 0 3
9045: PUSH
9046: FOR_IN
9047: IFFALSE 9177
// begin if IsInUnit ( i ) then
9049: LD_VAR 0 1
9053: PPUSH
9054: CALL_OW 310
9058: IFFALSE 9069
// ComExitBuilding ( i ) ;
9060: LD_VAR 0 1
9064: PPUSH
9065: CALL_OW 122
// AddComAgressiveMove ( i , 63 , 31 ) ;
9069: LD_VAR 0 1
9073: PPUSH
9074: LD_INT 63
9076: PPUSH
9077: LD_INT 31
9079: PPUSH
9080: CALL_OW 174
// AddComWait ( i , 0 0$2 ) ;
9084: LD_VAR 0 1
9088: PPUSH
9089: LD_INT 70
9091: PPUSH
9092: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 43 ) ;
9096: LD_VAR 0 1
9100: PPUSH
9101: LD_INT 103
9103: PPUSH
9104: LD_INT 43
9106: PPUSH
9107: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
9111: LD_VAR 0 1
9115: PPUSH
9116: LD_INT 105
9118: PPUSH
9119: CALL_OW 202
// if Difficulty > 1 then
9123: LD_OWVAR 67
9127: PUSH
9128: LD_INT 1
9130: GREATER
9131: IFFALSE 9148
// AddComAgressiveMove ( i , 114 , 69 ) ;
9133: LD_VAR 0 1
9137: PPUSH
9138: LD_INT 114
9140: PPUSH
9141: LD_INT 69
9143: PPUSH
9144: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
9148: LD_VAR 0 1
9152: PPUSH
9153: LD_INT 105
9155: PPUSH
9156: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9160: LD_VAR 0 1
9164: PPUSH
9165: LD_INT 42
9167: PPUSH
9168: LD_INT 20
9170: PPUSH
9171: CALL_OW 174
// end ;
9175: GO 9046
9177: POP
9178: POP
// wait ( 0 0$8 ) ;
9179: LD_INT 280
9181: PPUSH
9182: CALL_OW 67
// RemoveSeeing ( 64 , 32 , 2 ) ;
9186: LD_INT 64
9188: PPUSH
9189: LD_INT 32
9191: PPUSH
9192: LD_INT 2
9194: PPUSH
9195: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
9199: LD_INT 35
9201: PPUSH
9202: CALL_OW 67
// for i in tmp do
9206: LD_ADDR_VAR 0 1
9210: PUSH
9211: LD_VAR 0 3
9215: PUSH
9216: FOR_IN
9217: IFFALSE 9248
// if IsDead ( i ) then
9219: LD_VAR 0 1
9223: PPUSH
9224: CALL_OW 301
9228: IFFALSE 9246
// tmp := tmp diff i ;
9230: LD_ADDR_VAR 0 3
9234: PUSH
9235: LD_VAR 0 3
9239: PUSH
9240: LD_VAR 0 1
9244: DIFF
9245: ST_TO_ADDR
9246: GO 9216
9248: POP
9249: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9250: LD_VAR 0 3
9254: NOT
9255: PUSH
9256: LD_VAR 0 3
9260: PPUSH
9261: LD_INT 95
9263: PUSH
9264: LD_INT 7
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: PUSH
9271: LD_INT 3
9273: PUSH
9274: LD_INT 60
9276: PUSH
9277: EMPTY
9278: LIST
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: PUSH
9284: EMPTY
9285: LIST
9286: LIST
9287: PPUSH
9288: CALL_OW 72
9292: PUSH
9293: LD_VAR 0 3
9297: EQUAL
9298: OR
9299: IFFALSE 9199
// if tmp then
9301: LD_VAR 0 3
9305: IFFALSE 9332
// begin usPatrol := [ ] ;
9307: LD_ADDR_EXP 16
9311: PUSH
9312: EMPTY
9313: ST_TO_ADDR
// usForces := usForces union tmp ;
9314: LD_ADDR_EXP 21
9318: PUSH
9319: LD_EXP 21
9323: PUSH
9324: LD_VAR 0 3
9328: UNION
9329: ST_TO_ADDR
// end else
9330: GO 9340
// trickyMove := true ;
9332: LD_ADDR_EXP 15
9336: PUSH
9337: LD_INT 1
9339: ST_TO_ADDR
// end else
9340: GO 9771
// begin tmp := [ ] ;
9342: LD_ADDR_VAR 0 3
9346: PUSH
9347: EMPTY
9348: ST_TO_ADDR
// k := 4 ;
9349: LD_ADDR_VAR 0 2
9353: PUSH
9354: LD_INT 4
9356: ST_TO_ADDR
// if usForces < 4 then
9357: LD_EXP 21
9361: PUSH
9362: LD_INT 4
9364: LESS
9365: IFFALSE 9377
// k := usForces ;
9367: LD_ADDR_VAR 0 2
9371: PUSH
9372: LD_EXP 21
9376: ST_TO_ADDR
// for i := 1 to k do
9377: LD_ADDR_VAR 0 1
9381: PUSH
9382: DOUBLE
9383: LD_INT 1
9385: DEC
9386: ST_TO_ADDR
9387: LD_VAR 0 2
9391: PUSH
9392: FOR_TO
9393: IFFALSE 9448
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
9395: LD_ADDR_VAR 0 3
9399: PUSH
9400: LD_VAR 0 3
9404: PPUSH
9405: LD_VAR 0 3
9409: PUSH
9410: LD_INT 1
9412: PLUS
9413: PPUSH
9414: LD_EXP 21
9418: PUSH
9419: LD_INT 1
9421: ARRAY
9422: PPUSH
9423: CALL_OW 1
9427: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
9428: LD_ADDR_EXP 21
9432: PUSH
9433: LD_EXP 21
9437: PPUSH
9438: LD_INT 1
9440: PPUSH
9441: CALL_OW 3
9445: ST_TO_ADDR
// end ;
9446: GO 9392
9448: POP
9449: POP
// if Lynch then
9450: LD_EXP 20
9454: IFFALSE 9472
// tmp := tmp ^ Lynch ;
9456: LD_ADDR_VAR 0 3
9460: PUSH
9461: LD_VAR 0 3
9465: PUSH
9466: LD_EXP 20
9470: ADD
9471: ST_TO_ADDR
// usPatrol := tmp ;
9472: LD_ADDR_EXP 16
9476: PUSH
9477: LD_VAR 0 3
9481: ST_TO_ADDR
// for i in tmp do
9482: LD_ADDR_VAR 0 1
9486: PUSH
9487: LD_VAR 0 3
9491: PUSH
9492: FOR_IN
9493: IFFALSE 9586
// begin if IsInUnit ( i ) then
9495: LD_VAR 0 1
9499: PPUSH
9500: CALL_OW 310
9504: IFFALSE 9515
// ComExitBuilding ( i ) ;
9506: LD_VAR 0 1
9510: PPUSH
9511: CALL_OW 122
// AddComAgressiveMove ( i , 69 , 15 ) ;
9515: LD_VAR 0 1
9519: PPUSH
9520: LD_INT 69
9522: PPUSH
9523: LD_INT 15
9525: PPUSH
9526: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9530: LD_VAR 0 1
9534: PPUSH
9535: LD_INT 700
9537: PPUSH
9538: CALL_OW 202
// AddComAgressiveMove ( i , 55 , 43 ) ;
9542: LD_VAR 0 1
9546: PPUSH
9547: LD_INT 55
9549: PPUSH
9550: LD_INT 43
9552: PPUSH
9553: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9557: LD_VAR 0 1
9561: PPUSH
9562: LD_INT 700
9564: PPUSH
9565: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9569: LD_VAR 0 1
9573: PPUSH
9574: LD_INT 42
9576: PPUSH
9577: LD_INT 20
9579: PPUSH
9580: CALL_OW 174
// end ;
9584: GO 9492
9586: POP
9587: POP
// repeat wait ( 0 0$1 ) ;
9588: LD_INT 35
9590: PPUSH
9591: CALL_OW 67
// for i in tmp do
9595: LD_ADDR_VAR 0 1
9599: PUSH
9600: LD_VAR 0 3
9604: PUSH
9605: FOR_IN
9606: IFFALSE 9637
// if IsDead ( i ) then
9608: LD_VAR 0 1
9612: PPUSH
9613: CALL_OW 301
9617: IFFALSE 9635
// tmp := tmp diff i ;
9619: LD_ADDR_VAR 0 3
9623: PUSH
9624: LD_VAR 0 3
9628: PUSH
9629: LD_VAR 0 1
9633: DIFF
9634: ST_TO_ADDR
9635: GO 9605
9637: POP
9638: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9639: LD_VAR 0 3
9643: NOT
9644: PUSH
9645: LD_VAR 0 3
9649: PPUSH
9650: LD_INT 95
9652: PUSH
9653: LD_INT 7
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: PUSH
9660: LD_INT 3
9662: PUSH
9663: LD_INT 60
9665: PUSH
9666: EMPTY
9667: LIST
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: PPUSH
9677: CALL_OW 72
9681: PUSH
9682: LD_VAR 0 3
9686: EQUAL
9687: OR
9688: IFFALSE 9588
// if not tmp then
9690: LD_VAR 0 3
9694: NOT
9695: IFFALSE 9707
// trickyMove := true else
9697: LD_ADDR_EXP 15
9701: PUSH
9702: LD_INT 1
9704: ST_TO_ADDR
9705: GO 9714
// usPatrol := [ ] ;
9707: LD_ADDR_EXP 16
9711: PUSH
9712: EMPTY
9713: ST_TO_ADDR
// if tmp diff Lynch then
9714: LD_VAR 0 3
9718: PUSH
9719: LD_EXP 20
9723: DIFF
9724: IFFALSE 9748
// usForces := usForces union ( tmp diff Lynch ) ;
9726: LD_ADDR_EXP 21
9730: PUSH
9731: LD_EXP 21
9735: PUSH
9736: LD_VAR 0 3
9740: PUSH
9741: LD_EXP 20
9745: DIFF
9746: UNION
9747: ST_TO_ADDR
// if IsOk ( Lynch ) then
9748: LD_EXP 20
9752: PPUSH
9753: CALL_OW 302
9757: IFFALSE 9771
// ComEnterUnit ( Lynch , Delta ) ;
9759: LD_EXP 20
9763: PPUSH
9764: LD_INT 1
9766: PPUSH
9767: CALL_OW 120
// end ; end ; end ;
9771: PPOPN 3
9773: END
// every 0 0$1 trigger trickyMove do
9774: LD_EXP 15
9778: IFFALSE 9790
9780: GO 9782
9782: DISABLE
// SetAchievement ( ACH_TRAP ) ;
9783: LD_STRING ACH_TRAP
9785: PPUSH
9786: CALL_OW 543
9790: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ) do
9791: LD_INT 22
9793: PUSH
9794: LD_INT 2
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: PUSH
9801: LD_INT 23
9803: PUSH
9804: LD_INT 1
9806: PUSH
9807: EMPTY
9808: LIST
9809: LIST
9810: PUSH
9811: LD_INT 21
9813: PUSH
9814: LD_INT 2
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: PUSH
9821: EMPTY
9822: LIST
9823: LIST
9824: LIST
9825: PPUSH
9826: CALL_OW 69
9830: IFFALSE 9842
9832: GO 9834
9834: DISABLE
// SetAchievement ( ACH_SCRAP ) ;
9835: LD_STRING ACH_SCRAP
9837: PPUSH
9838: CALL_OW 543
9842: END
// every 0 0$1 trigger UnitFilter ( usPatrol , [ f_see , 2 ] ) and See ( 1 , Heike ) do
9843: LD_EXP 16
9847: PPUSH
9848: LD_INT 101
9850: PUSH
9851: LD_INT 2
9853: PUSH
9854: EMPTY
9855: LIST
9856: LIST
9857: PPUSH
9858: CALL_OW 72
9862: PUSH
9863: LD_INT 1
9865: PPUSH
9866: LD_EXP 23
9870: PPUSH
9871: CALL_OW 292
9875: AND
9876: IFFALSE 10009
9878: GO 9880
9880: DISABLE
// begin if not trap then
9881: LD_EXP 17
9885: NOT
9886: IFFALSE 9914
// begin Say ( Heike , DH-2-trap ) ;
9888: LD_EXP 23
9892: PPUSH
9893: LD_STRING DH-2-trap
9895: PPUSH
9896: CALL_OW 88
// Say ( Mike , DM-2-trap ) ;
9900: LD_EXP 25
9904: PPUSH
9905: LD_STRING DM-2-trap
9907: PPUSH
9908: CALL_OW 88
// end else
9912: GO 9926
// begin Say ( Heike , DH-1-trap-a ) ;
9914: LD_EXP 23
9918: PPUSH
9919: LD_STRING DH-1-trap-a
9921: PPUSH
9922: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
9926: LD_INT 35
9928: PPUSH
9929: CALL_OW 67
// until trickyMove ;
9933: LD_EXP 15
9937: IFFALSE 9926
// Say ( Heike , DH-3-trap ) ;
9939: LD_EXP 23
9943: PPUSH
9944: LD_STRING DH-3-trap
9946: PPUSH
9947: CALL_OW 88
// if IsOk ( Givi ) and IsOk ( Kaia ) then
9951: LD_EXP 24
9955: PPUSH
9956: CALL_OW 302
9960: PUSH
9961: LD_EXP 28
9965: PPUSH
9966: CALL_OW 302
9970: AND
9971: IFFALSE 10009
// begin Say ( Givi , DG-3-trap ) ;
9973: LD_EXP 24
9977: PPUSH
9978: LD_STRING DG-3-trap
9980: PPUSH
9981: CALL_OW 88
// Say ( Kaia , DK-3-trap ) ;
9985: LD_EXP 28
9989: PPUSH
9990: LD_STRING DK-3-trap
9992: PPUSH
9993: CALL_OW 88
// Say ( Givi , DG-4-trap ) ;
9997: LD_EXP 24
10001: PPUSH
10002: LD_STRING DG-4-trap
10004: PPUSH
10005: CALL_OW 88
// end ; end ;
10009: END
// every 0 0$1 trigger GetSide ( Delta ) = 2 and attackDeltaAllowed do var i , tmp ;
10010: LD_INT 1
10012: PPUSH
10013: CALL_OW 255
10017: PUSH
10018: LD_INT 2
10020: EQUAL
10021: PUSH
10022: LD_EXP 14
10026: AND
10027: IFFALSE 10186
10029: GO 10031
10031: DISABLE
10032: LD_INT 0
10034: PPUSH
10035: PPUSH
// begin if not IsOk ( Kaia ) then
10036: LD_EXP 28
10040: PPUSH
10041: CALL_OW 302
10045: NOT
10046: IFFALSE 10050
// exit ;
10048: GO 10186
// if tick < 5 5$00 then
10050: LD_OWVAR 1
10054: PUSH
10055: LD_INT 10500
10057: LESS
10058: IFFALSE 10067
// SetAchievement ( ACH_DELTA ) ;
10060: LD_STRING ACH_DELTA
10062: PPUSH
10063: CALL_OW 543
// Say ( Kaia , DK-1-capture ) ;
10067: LD_EXP 28
10071: PPUSH
10072: LD_STRING DK-1-capture
10074: PPUSH
10075: CALL_OW 88
// Say ( Heike , DH-1-capture ) ;
10079: LD_EXP 23
10083: PPUSH
10084: LD_STRING DH-1-capture
10086: PPUSH
10087: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
10091: LD_ADDR_VAR 0 2
10095: PUSH
10096: LD_INT 22
10098: PUSH
10099: LD_INT 1
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: PUSH
10106: LD_INT 25
10108: PUSH
10109: LD_INT 1
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: PUSH
10116: EMPTY
10117: LIST
10118: LIST
10119: PPUSH
10120: CALL_OW 69
10124: ST_TO_ADDR
// if not tmp then
10125: LD_VAR 0 2
10129: NOT
10130: IFFALSE 10134
// exit ;
10132: GO 10186
// for i in tmp do
10134: LD_ADDR_VAR 0 1
10138: PUSH
10139: LD_VAR 0 2
10143: PUSH
10144: FOR_IN
10145: IFFALSE 10184
// begin if IsInUnit ( i ) then
10147: LD_VAR 0 1
10151: PPUSH
10152: CALL_OW 310
10156: IFFALSE 10167
// ComExitBuilding ( i ) ;
10158: LD_VAR 0 1
10162: PPUSH
10163: CALL_OW 122
// AddComAgressiveMove ( i , 38 , 23 ) ;
10167: LD_VAR 0 1
10171: PPUSH
10172: LD_INT 38
10174: PPUSH
10175: LD_INT 23
10177: PPUSH
10178: CALL_OW 174
// end ;
10182: GO 10144
10184: POP
10185: POP
// end ;
10186: PPOPN 2
10188: END
// every 0 0$1 trigger GetSide ( usLab ) = 2 and attackDeltaAllowed do
10189: LD_INT 3
10191: PPUSH
10192: CALL_OW 255
10196: PUSH
10197: LD_INT 2
10199: EQUAL
10200: PUSH
10201: LD_EXP 14
10205: AND
10206: IFFALSE 10238
10208: GO 10210
10210: DISABLE
// begin DialogueOn ;
10211: CALL_OW 6
// Say ( Aviradze , DA-1-capture ) ;
10215: LD_EXP 27
10219: PPUSH
10220: LD_STRING DA-1-capture
10222: PPUSH
10223: CALL_OW 88
// DialogueOff ;
10227: CALL_OW 7
// ChangeMissionObjectives ( OTame ) ;
10231: LD_STRING OTame
10233: PPUSH
10234: CALL_OW 337
// end ;
10238: END
// every 0 0$1 trigger GetTech ( tech_ApeLang , 2 ) = state_researched and attackDeltaAllowed do
10239: LD_INT 1
10241: PPUSH
10242: LD_INT 2
10244: PPUSH
10245: CALL_OW 321
10249: PUSH
10250: LD_INT 2
10252: EQUAL
10253: PUSH
10254: LD_EXP 14
10258: AND
10259: IFFALSE 10410
10261: GO 10263
10263: DISABLE
// begin DialogueOn ;
10264: CALL_OW 6
// Say ( Aviradze , DA-1-ape ) ;
10268: LD_EXP 27
10272: PPUSH
10273: LD_STRING DA-1-ape
10275: PPUSH
10276: CALL_OW 88
// Say ( Heike , DH-1-ape ) ;
10280: LD_EXP 23
10284: PPUSH
10285: LD_STRING DH-1-ape
10287: PPUSH
10288: CALL_OW 88
// Say ( Aviradze , DA-2-ape ) ;
10292: LD_EXP 27
10296: PPUSH
10297: LD_STRING DA-2-ape
10299: PPUSH
10300: CALL_OW 88
// Say ( Aviradze , DA-3-ape ) ;
10304: LD_EXP 27
10308: PPUSH
10309: LD_STRING DA-3-ape
10311: PPUSH
10312: CALL_OW 88
// Say ( Heike , DH-3-ape ) ;
10316: LD_EXP 23
10320: PPUSH
10321: LD_STRING DH-3-ape
10323: PPUSH
10324: CALL_OW 88
// DialogueOff ;
10328: CALL_OW 7
// if FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 then
10332: LD_INT 22
10334: PUSH
10335: LD_INT 0
10337: PUSH
10338: EMPTY
10339: LIST
10340: LIST
10341: PUSH
10342: LD_INT 25
10344: PUSH
10345: LD_INT 12
10347: PUSH
10348: EMPTY
10349: LIST
10350: LIST
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: PPUSH
10356: CALL_OW 69
10360: PUSH
10361: LD_INT 0
10363: EQUAL
10364: IFFALSE 10376
// SpawnApeman ( forest , 2 ) ;
10366: LD_INT 1
10368: PPUSH
10369: LD_INT 2
10371: PPUSH
10372: CALL 409 0 2
// repeat wait ( 0 0$1 ) ;
10376: LD_INT 35
10378: PPUSH
10379: CALL_OW 67
// until FilterAllUnits ( [ f_class , class_apeman ] ) = 0 ;
10383: LD_INT 25
10385: PUSH
10386: LD_INT 12
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PPUSH
10393: CALL_OW 69
10397: PUSH
10398: LD_INT 0
10400: EQUAL
10401: IFFALSE 10376
// YouLost ( Ape ) ;
10403: LD_STRING Ape
10405: PPUSH
10406: CALL_OW 104
// end ;
10410: END
// every 0 0$5 trigger lostCounter >= [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
10411: LD_EXP 18
10415: PUSH
10416: LD_INT 3
10418: PUSH
10419: LD_INT 2
10421: PUSH
10422: LD_INT 2
10424: PUSH
10425: LD_INT 2
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: PUSH
10434: LD_OWVAR 67
10438: ARRAY
10439: GREATEREQUAL
10440: IFFALSE 10484
10442: GO 10444
10444: DISABLE
// begin DialogueOn ;
10445: CALL_OW 6
// Say ( Aviradze , DA-1-failure ) ;
10449: LD_EXP 27
10453: PPUSH
10454: LD_STRING DA-1-failure
10456: PPUSH
10457: CALL_OW 88
// Say ( Aviradze , DA-2-failure ) ;
10461: LD_EXP 27
10465: PPUSH
10466: LD_STRING DA-2-failure
10468: PPUSH
10469: CALL_OW 88
// YouLost ( Failure ) ;
10473: LD_STRING Failure
10475: PPUSH
10476: CALL_OW 104
// DialogueOff ;
10480: CALL_OW 7
// end ;
10484: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
10485: LD_EXP 28
10489: PPUSH
10490: CALL_OW 256
10494: PUSH
10495: LD_INT 3
10497: LESS
10498: IFFALSE 10631
10500: GO 10502
10502: DISABLE
// begin DialogueOn ;
10503: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
10507: LD_EXP 28
10511: PPUSH
10512: CALL_OW 87
// ForceSay ( Kaia , DK-Kaiaout-1 ) ;
10516: LD_EXP 28
10520: PPUSH
10521: LD_STRING DK-Kaiaout-1
10523: PPUSH
10524: CALL_OW 91
// Say ( Heike , DH-Kaiaout-2 ) ;
10528: LD_EXP 23
10532: PPUSH
10533: LD_STRING DH-Kaiaout-2
10535: PPUSH
10536: CALL_OW 88
// Say ( Givi , DG-Kaiaout-3 ) ;
10540: LD_EXP 24
10544: PPUSH
10545: LD_STRING DG-Kaiaout-3
10547: PPUSH
10548: CALL_OW 88
// Say ( Heike , DH-Kaiaout-4 ) ;
10552: LD_EXP 23
10556: PPUSH
10557: LD_STRING DH-Kaiaout-4
10559: PPUSH
10560: CALL_OW 88
// if Givi then
10564: LD_EXP 24
10568: IFFALSE 10618
// begin Say ( Givi , DG-Kaiaout-5 ) ;
10570: LD_EXP 24
10574: PPUSH
10575: LD_STRING DG-Kaiaout-5
10577: PPUSH
10578: CALL_OW 88
// Say ( Heike , DH-Kaiaout-6 ) ;
10582: LD_EXP 23
10586: PPUSH
10587: LD_STRING DH-Kaiaout-6
10589: PPUSH
10590: CALL_OW 88
// Say ( Givi , DG-Kaiaout-7 ) ;
10594: LD_EXP 24
10598: PPUSH
10599: LD_STRING DG-Kaiaout-7
10601: PPUSH
10602: CALL_OW 88
// Say ( Heike , DH-Kaiaout-8 ) ;
10606: LD_EXP 23
10610: PPUSH
10611: LD_STRING DH-Kaiaout-8
10613: PPUSH
10614: CALL_OW 88
// end ; DialogueOff ;
10618: CALL_OW 7
// KillUnit ( Kaia ) ;
10622: LD_EXP 28
10626: PPUSH
10627: CALL_OW 66
// end ;
10631: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) and IsOk ( Aviradze ) and GetSide ( Aviradze ) = 2 do var tmp ;
10632: LD_INT 22
10634: PUSH
10635: LD_INT 2
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: PUSH
10642: LD_INT 23
10644: PUSH
10645: LD_INT 0
10647: PUSH
10648: EMPTY
10649: LIST
10650: LIST
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PPUSH
10656: CALL_OW 69
10660: PUSH
10661: LD_EXP 27
10665: PPUSH
10666: CALL_OW 302
10670: AND
10671: PUSH
10672: LD_EXP 27
10676: PPUSH
10677: CALL_OW 255
10681: PUSH
10682: LD_INT 2
10684: EQUAL
10685: AND
10686: IFFALSE 11672
10688: GO 10690
10690: DISABLE
10691: LD_INT 0
10693: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) then
10694: LD_INT 22
10696: PUSH
10697: LD_INT 1
10699: PUSH
10700: EMPTY
10701: LIST
10702: LIST
10703: PUSH
10704: LD_INT 2
10706: PUSH
10707: LD_INT 25
10709: PUSH
10710: LD_INT 1
10712: PUSH
10713: EMPTY
10714: LIST
10715: LIST
10716: PUSH
10717: LD_INT 34
10719: PUSH
10720: LD_INT 4
10722: PUSH
10723: EMPTY
10724: LIST
10725: LIST
10726: PUSH
10727: EMPTY
10728: LIST
10729: LIST
10730: LIST
10731: PUSH
10732: EMPTY
10733: LIST
10734: LIST
10735: PPUSH
10736: CALL_OW 69
10740: IFFALSE 10835
// begin Query ( QEnemyInSight ) ;
10742: LD_STRING QEnemyInSight
10744: PPUSH
10745: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
10749: LD_INT 35
10751: PPUSH
10752: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10756: LD_INT 22
10758: PUSH
10759: LD_INT 1
10761: PUSH
10762: EMPTY
10763: LIST
10764: LIST
10765: PUSH
10766: LD_INT 2
10768: PUSH
10769: LD_INT 25
10771: PUSH
10772: LD_INT 1
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PUSH
10779: LD_INT 34
10781: PUSH
10782: LD_INT 4
10784: PUSH
10785: EMPTY
10786: LIST
10787: LIST
10788: PUSH
10789: EMPTY
10790: LIST
10791: LIST
10792: LIST
10793: PUSH
10794: EMPTY
10795: LIST
10796: LIST
10797: PPUSH
10798: CALL_OW 69
10802: NOT
10803: PUSH
10804: LD_INT 22
10806: PUSH
10807: LD_INT 2
10809: PUSH
10810: EMPTY
10811: LIST
10812: LIST
10813: PUSH
10814: LD_INT 23
10816: PUSH
10817: LD_INT 0
10819: PUSH
10820: EMPTY
10821: LIST
10822: LIST
10823: PUSH
10824: EMPTY
10825: LIST
10826: LIST
10827: PPUSH
10828: CALL_OW 69
10832: AND
10833: IFFALSE 10749
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10835: LD_ADDR_VAR 0 1
10839: PUSH
10840: LD_INT 22
10842: PUSH
10843: LD_INT 2
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: PUSH
10850: LD_INT 23
10852: PUSH
10853: LD_INT 0
10855: PUSH
10856: EMPTY
10857: LIST
10858: LIST
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: PPUSH
10864: CALL_OW 69
10868: ST_TO_ADDR
// InGameOn ;
10869: CALL_OW 8
// if tick <= 10 10$00 then
10873: LD_OWVAR 1
10877: PUSH
10878: LD_INT 21000
10880: LESSEQUAL
10881: IFFALSE 10890
// SetAchievement ( ACH_HSPEED_2 ) ;
10883: LD_STRING ACH_HSPEED_2
10885: PPUSH
10886: CALL_OW 543
// CenterNowOnUnits ( tmp ) ;
10890: LD_VAR 0 1
10894: PPUSH
10895: CALL_OW 87
// ComMoveUnit ( tmp , Aviradze ) ;
10899: LD_VAR 0 1
10903: PPUSH
10904: LD_EXP 27
10908: PPUSH
10909: CALL_OW 112
// ComTurnUnit ( Aviradze , tmp ) ;
10913: LD_EXP 27
10917: PPUSH
10918: LD_VAR 0 1
10922: PPUSH
10923: CALL_OW 119
// wait ( 0 0$1 ) ;
10927: LD_INT 35
10929: PPUSH
10930: CALL_OW 67
// Say ( Aviradze , DA-1-tame-a ) ;
10934: LD_EXP 27
10938: PPUSH
10939: LD_STRING DA-1-tame-a
10941: PPUSH
10942: CALL_OW 88
// if IsOk ( Mike ) then
10946: LD_EXP 25
10950: PPUSH
10951: CALL_OW 302
10955: IFFALSE 10993
// begin Say ( Mike , DM-1-tame-a ) ;
10957: LD_EXP 25
10961: PPUSH
10962: LD_STRING DM-1-tame-a
10964: PPUSH
10965: CALL_OW 88
// Say ( Sophia , DS-1-tame-a ) ;
10969: LD_EXP 29
10973: PPUSH
10974: LD_STRING DS-1-tame-a
10976: PPUSH
10977: CALL_OW 88
// Say ( Mike , DM-2-tame-a ) ;
10981: LD_EXP 25
10985: PPUSH
10986: LD_STRING DM-2-tame-a
10988: PPUSH
10989: CALL_OW 88
// end ; wait ( 0 0$3 ) ;
10993: LD_INT 105
10995: PPUSH
10996: CALL_OW 67
// PrepareFarmer ;
11000: CALL 12351 0 0
// CenterOnUnits ( Farmer ) ;
11004: LD_EXP 31
11008: PPUSH
11009: CALL_OW 85
// ComMoveXY ( Farmer , 105 , 59 ) ;
11013: LD_EXP 31
11017: PPUSH
11018: LD_INT 105
11020: PPUSH
11021: LD_INT 59
11023: PPUSH
11024: CALL_OW 111
// AddComHold ( Farmer ) ;
11028: LD_EXP 31
11032: PPUSH
11033: CALL_OW 200
// SayRadio ( Farmer , DF-1-end ) ;
11037: LD_EXP 31
11041: PPUSH
11042: LD_STRING DF-1-end
11044: PPUSH
11045: CALL_OW 94
// Say ( Aviradze , DA-1-end ) ;
11049: LD_EXP 27
11053: PPUSH
11054: LD_STRING DA-1-end
11056: PPUSH
11057: CALL_OW 88
// SayRadio ( Farmer , DF-2-end ) ;
11061: LD_EXP 31
11065: PPUSH
11066: LD_STRING DF-2-end
11068: PPUSH
11069: CALL_OW 94
// Say ( Aviradze , DA-2-end ) ;
11073: LD_EXP 27
11077: PPUSH
11078: LD_STRING DA-2-end
11080: PPUSH
11081: CALL_OW 88
// SayRadio ( Farmer , DF-3-end ) ;
11085: LD_EXP 31
11089: PPUSH
11090: LD_STRING DF-3-end
11092: PPUSH
11093: CALL_OW 94
// Say ( Heike , DH-3-end ) ;
11097: LD_EXP 23
11101: PPUSH
11102: LD_STRING DH-3-end
11104: PPUSH
11105: CALL_OW 88
// SayRadio ( Farmer , DF-4-end ) ;
11109: LD_EXP 31
11113: PPUSH
11114: LD_STRING DF-4-end
11116: PPUSH
11117: CALL_OW 94
// if tick <= [ 25 25$00 , 22 22$30 , 20 20$00 , 15 15$00 ] [ Difficulty ] then
11121: LD_OWVAR 1
11125: PUSH
11126: LD_INT 52500
11128: PUSH
11129: LD_INT 47250
11131: PUSH
11132: LD_INT 42000
11134: PUSH
11135: LD_INT 31500
11137: PUSH
11138: EMPTY
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: PUSH
11144: LD_OWVAR 67
11148: ARRAY
11149: LESSEQUAL
11150: IFFALSE 11164
// AddMedal ( med1 , 1 ) else
11152: LD_STRING med1
11154: PPUSH
11155: LD_INT 1
11157: PPUSH
11158: CALL_OW 101
11162: GO 11175
// AddMedal ( med1 , - 1 ) ;
11164: LD_STRING med1
11166: PPUSH
11167: LD_INT 1
11169: NEG
11170: PPUSH
11171: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) = 0 and not gladstoneEscaped then
11175: LD_INT 22
11177: PUSH
11178: LD_INT 1
11180: PUSH
11181: EMPTY
11182: LIST
11183: LIST
11184: PUSH
11185: LD_INT 25
11187: PUSH
11188: LD_INT 4
11190: PUSH
11191: EMPTY
11192: LIST
11193: LIST
11194: PUSH
11195: EMPTY
11196: LIST
11197: LIST
11198: PPUSH
11199: CALL_OW 69
11203: PUSH
11204: LD_INT 0
11206: EQUAL
11207: PUSH
11208: LD_EXP 12
11212: NOT
11213: AND
11214: IFFALSE 11228
// AddMedal ( med2 , 1 ) else
11216: LD_STRING med2
11218: PPUSH
11219: LD_INT 1
11221: PPUSH
11222: CALL_OW 101
11226: GO 11239
// AddMedal ( med2 , - 1 ) ;
11228: LD_STRING med2
11230: PPUSH
11231: LD_INT 1
11233: NEG
11234: PPUSH
11235: CALL_OW 101
// if trickyMove then
11239: LD_EXP 15
11243: IFFALSE 11257
// AddMedal ( med3 , 1 ) else
11245: LD_STRING med3
11247: PPUSH
11248: LD_INT 1
11250: PPUSH
11251: CALL_OW 101
11255: GO 11287
// if spottedBeforeRadio then
11257: LD_EXP 6
11261: IFFALSE 11276
// AddMedal ( med3 , - 2 ) else
11263: LD_STRING med3
11265: PPUSH
11266: LD_INT 2
11268: NEG
11269: PPUSH
11270: CALL_OW 101
11274: GO 11287
// AddMedal ( med3 , - 1 ) ;
11276: LD_STRING med3
11278: PPUSH
11279: LD_INT 1
11281: NEG
11282: PPUSH
11283: CALL_OW 101
// GiveMedals ( MAIN ) ;
11287: LD_STRING MAIN
11289: PPUSH
11290: CALL_OW 102
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) , 02_ape ) ;
11294: LD_INT 22
11296: PUSH
11297: LD_INT 2
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: PUSH
11304: LD_INT 23
11306: PUSH
11307: LD_INT 0
11309: PUSH
11310: EMPTY
11311: LIST
11312: LIST
11313: PUSH
11314: EMPTY
11315: LIST
11316: LIST
11317: PPUSH
11318: CALL_OW 69
11322: PPUSH
11323: LD_STRING 02_ape
11325: PPUSH
11326: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
11330: LD_ADDR_VAR 0 1
11334: PUSH
11335: LD_INT 22
11337: PUSH
11338: LD_INT 2
11340: PUSH
11341: EMPTY
11342: LIST
11343: LIST
11344: PUSH
11345: LD_INT 23
11347: PUSH
11348: LD_INT 2
11350: PUSH
11351: EMPTY
11352: LIST
11353: LIST
11354: PUSH
11355: LD_INT 21
11357: PUSH
11358: LD_INT 1
11360: PUSH
11361: EMPTY
11362: LIST
11363: LIST
11364: PUSH
11365: EMPTY
11366: LIST
11367: LIST
11368: LIST
11369: PPUSH
11370: CALL_OW 69
11374: ST_TO_ADDR
// RewardPeople ( tmp ) ;
11375: LD_VAR 0 1
11379: PPUSH
11380: CALL_OW 43
// SaveCharacters ( Heike , 02_Heike ) ;
11384: LD_EXP 23
11388: PPUSH
11389: LD_STRING 02_Heike
11391: PPUSH
11392: CALL_OW 38
// SaveCharacters ( Aviradze , 02_Aviradze ) ;
11396: LD_EXP 27
11400: PPUSH
11401: LD_STRING 02_Aviradze
11403: PPUSH
11404: CALL_OW 38
// if Givi then
11408: LD_EXP 24
11412: IFFALSE 11426
// SaveCharacters ( Givi , 02_Givi ) ;
11414: LD_EXP 24
11418: PPUSH
11419: LD_STRING 02_Givi
11421: PPUSH
11422: CALL_OW 38
// if Mike then
11426: LD_EXP 25
11430: IFFALSE 11444
// SaveCharacters ( Mike , 02_Mike ) ;
11432: LD_EXP 25
11436: PPUSH
11437: LD_STRING 02_Mike
11439: PPUSH
11440: CALL_OW 38
// if Kamil then
11444: LD_EXP 26
11448: IFFALSE 11462
// SaveCharacters ( Kamil , 02_Kamil ) ;
11450: LD_EXP 26
11454: PPUSH
11455: LD_STRING 02_Kamil
11457: PPUSH
11458: CALL_OW 38
// if Kaia then
11462: LD_EXP 28
11466: IFFALSE 11480
// SaveCharacters ( Kaia , 02_Kaia ) ;
11468: LD_EXP 28
11472: PPUSH
11473: LD_STRING 02_Kaia
11475: PPUSH
11476: CALL_OW 38
// if Sophia then
11480: LD_EXP 29
11484: IFFALSE 11498
// SaveCharacters ( Sophia , 02_Sophia ) ;
11486: LD_EXP 29
11490: PPUSH
11491: LD_STRING 02_Sophia
11493: PPUSH
11494: CALL_OW 38
// if Markov then
11498: LD_EXP 30
11502: IFFALSE 11516
// SaveCharacters ( Markov , 02_Markov ) ;
11504: LD_EXP 30
11508: PPUSH
11509: LD_STRING 02_Markov
11511: PPUSH
11512: CALL_OW 38
// if tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] then
11516: LD_VAR 0 1
11520: PUSH
11521: LD_EXP 23
11525: PUSH
11526: LD_EXP 27
11530: PUSH
11531: LD_EXP 24
11535: PUSH
11536: LD_EXP 25
11540: PUSH
11541: LD_EXP 26
11545: PUSH
11546: LD_EXP 29
11550: PUSH
11551: LD_EXP 28
11555: PUSH
11556: LD_EXP 30
11560: PUSH
11561: EMPTY
11562: LIST
11563: LIST
11564: LIST
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: DIFF
11571: IFFALSE 11636
// SaveCharacters ( tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] , 02_others ) ;
11573: LD_VAR 0 1
11577: PUSH
11578: LD_EXP 23
11582: PUSH
11583: LD_EXP 27
11587: PUSH
11588: LD_EXP 24
11592: PUSH
11593: LD_EXP 25
11597: PUSH
11598: LD_EXP 26
11602: PUSH
11603: LD_EXP 29
11607: PUSH
11608: LD_EXP 28
11612: PUSH
11613: LD_EXP 30
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: LIST
11624: LIST
11625: LIST
11626: LIST
11627: DIFF
11628: PPUSH
11629: LD_STRING 02_others
11631: PPUSH
11632: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_KRAY) ) ;
11636: LD_STRING enableBioCharacter(BIO_KRAY)
11638: PPUSH
11639: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_AVIR) ) ;
11643: LD_STRING enableBioCharacter(BIO_AVIR)
11645: PPUSH
11646: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_SOPH) ) ;
11650: LD_STRING enableBioCharacter(BIO_SOPH)
11652: PPUSH
11653: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_KAMI) ) ;
11657: LD_STRING enableBioCharacter(BIO_KAMI)
11659: PPUSH
11660: CALL_OW 559
// YouWin ;
11664: CALL_OW 103
// InGameOff ;
11668: CALL_OW 9
// end ;
11672: PPOPN 1
11674: END
// every 0 0$1 trigger tick > timeUntilFarmer and aviradzeSpotted do
11675: LD_OWVAR 1
11679: PUSH
11680: LD_EXP 13
11684: GREATER
11685: PUSH
11686: LD_EXP 4
11690: AND
11691: IFFALSE 11731
11693: GO 11695
11695: DISABLE
// begin InGameOn ;
11696: CALL_OW 8
// PrepareFarmer ;
11700: CALL 12351 0 0
// CenterNowOnUnits ( Farmer ) ;
11704: LD_EXP 31
11708: PPUSH
11709: CALL_OW 87
// wait ( 0 0$2 ) ;
11713: LD_INT 70
11715: PPUSH
11716: CALL_OW 67
// YouLost ( Farmer ) ;
11720: LD_STRING Farmer
11722: PPUSH
11723: CALL_OW 104
// InGameOff ;
11727: CALL_OW 9
// end ; end_of_file
11731: END
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer ; export function PrepareArabian ; var un , veh ; begin
11732: LD_INT 0
11734: PPUSH
11735: PPUSH
11736: PPUSH
// uc_side := 2 ;
11737: LD_ADDR_OWVAR 20
11741: PUSH
11742: LD_INT 2
11744: ST_TO_ADDR
// uc_nation := 2 ;
11745: LD_ADDR_OWVAR 21
11749: PUSH
11750: LD_INT 2
11752: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
11753: LD_ADDR_EXP 23
11757: PUSH
11758: LD_STRING Heike
11760: PPUSH
11761: LD_EXP 1
11765: NOT
11766: PPUSH
11767: LD_EXP 2
11771: PPUSH
11772: CALL 32891 0 3
11776: ST_TO_ADDR
// PlaceUnitXY ( Heike , 83 , 72 , false ) ;
11777: LD_EXP 23
11781: PPUSH
11782: LD_INT 83
11784: PPUSH
11785: LD_INT 72
11787: PPUSH
11788: LD_INT 0
11790: PPUSH
11791: CALL_OW 48
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
11795: LD_ADDR_EXP 24
11799: PUSH
11800: LD_STRING Givi
11802: PPUSH
11803: LD_EXP 1
11807: NOT
11808: PPUSH
11809: LD_EXP 2
11813: PPUSH
11814: CALL 32891 0 3
11818: ST_TO_ADDR
// if Givi then
11819: LD_EXP 24
11823: IFFALSE 11843
// PlaceUnitXY ( Givi , 87 , 76 , false ) ;
11825: LD_EXP 24
11829: PPUSH
11830: LD_INT 87
11832: PPUSH
11833: LD_INT 76
11835: PPUSH
11836: LD_INT 0
11838: PPUSH
11839: CALL_OW 48
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
11843: LD_ADDR_EXP 25
11847: PUSH
11848: LD_STRING Mike
11850: PPUSH
11851: LD_EXP 1
11855: NOT
11856: PPUSH
11857: LD_EXP 2
11861: PPUSH
11862: CALL 32891 0 3
11866: ST_TO_ADDR
// if Mike then
11867: LD_EXP 25
11871: IFFALSE 11891
// PlaceUnitXY ( Mike , 84 , 76 , false ) ;
11873: LD_EXP 25
11877: PPUSH
11878: LD_INT 84
11880: PPUSH
11881: LD_INT 76
11883: PPUSH
11884: LD_INT 0
11886: PPUSH
11887: CALL_OW 48
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
11891: LD_ADDR_EXP 26
11895: PUSH
11896: LD_STRING Kamil
11898: PPUSH
11899: LD_EXP 1
11903: NOT
11904: PPUSH
11905: LD_EXP 2
11909: PPUSH
11910: CALL 32891 0 3
11914: ST_TO_ADDR
// if Kamil then
11915: LD_EXP 26
11919: IFFALSE 11939
// PlaceUnitXY ( Kamil , 85 , 78 , false ) ;
11921: LD_EXP 26
11925: PPUSH
11926: LD_INT 85
11928: PPUSH
11929: LD_INT 78
11931: PPUSH
11932: LD_INT 0
11934: PPUSH
11935: CALL_OW 48
// uc_side := 5 ;
11939: LD_ADDR_OWVAR 20
11943: PUSH
11944: LD_INT 5
11946: ST_TO_ADDR
// uc_nation := 2 ;
11947: LD_ADDR_OWVAR 21
11951: PUSH
11952: LD_INT 2
11954: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , false ,  ) ;
11955: LD_ADDR_EXP 27
11959: PUSH
11960: LD_STRING Aviradze
11962: PPUSH
11963: LD_INT 0
11965: PPUSH
11966: LD_STRING 
11968: PPUSH
11969: CALL 32891 0 3
11973: ST_TO_ADDR
// PlaceUnitXY ( Aviradze , 106 , 38 , false ) ;
11974: LD_EXP 27
11978: PPUSH
11979: LD_INT 106
11981: PPUSH
11982: LD_INT 38
11984: PPUSH
11985: LD_INT 0
11987: PPUSH
11988: CALL_OW 48
// ComTurnXY ( Aviradze , 103 , 38 ) ;
11992: LD_EXP 27
11996: PPUSH
11997: LD_INT 103
11999: PPUSH
12000: LD_INT 38
12002: PPUSH
12003: CALL_OW 118
// Kaia := PrepareUnit ( Kaia , false ,  ) ;
12007: LD_ADDR_EXP 28
12011: PUSH
12012: LD_STRING Kaia
12014: PPUSH
12015: LD_INT 0
12017: PPUSH
12018: LD_STRING 
12020: PPUSH
12021: CALL 32891 0 3
12025: ST_TO_ADDR
// PlaceUnitXY ( Kaia , 100 , 34 , false ) ;
12026: LD_EXP 28
12030: PPUSH
12031: LD_INT 100
12033: PPUSH
12034: LD_INT 34
12036: PPUSH
12037: LD_INT 0
12039: PPUSH
12040: CALL_OW 48
// ComTurnXY ( Kaia , 100 , 39 ) ;
12044: LD_EXP 28
12048: PPUSH
12049: LD_INT 100
12051: PPUSH
12052: LD_INT 39
12054: PPUSH
12055: CALL_OW 118
// Sophia := PrepareUnit ( Sophia , false ,  ) ;
12059: LD_ADDR_EXP 29
12063: PUSH
12064: LD_STRING Sophia
12066: PPUSH
12067: LD_INT 0
12069: PPUSH
12070: LD_STRING 
12072: PPUSH
12073: CALL 32891 0 3
12077: ST_TO_ADDR
// PlaceUnitXY ( Sophia , 109 , 50 , false ) ;
12078: LD_EXP 29
12082: PPUSH
12083: LD_INT 109
12085: PPUSH
12086: LD_INT 50
12088: PPUSH
12089: LD_INT 0
12091: PPUSH
12092: CALL_OW 48
// ComTurnXY ( Sophia , 100 , 39 ) ;
12096: LD_EXP 29
12100: PPUSH
12101: LD_INT 100
12103: PPUSH
12104: LD_INT 39
12106: PPUSH
12107: CALL_OW 118
// Markov := PrepareUnit ( Markov , false ,  ) ;
12111: LD_ADDR_EXP 30
12115: PUSH
12116: LD_STRING Markov
12118: PPUSH
12119: LD_INT 0
12121: PPUSH
12122: LD_STRING 
12124: PPUSH
12125: CALL 32891 0 3
12129: ST_TO_ADDR
// PrepareTank ( 5 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , [ 90 , 70 , 60 , 50 ] [ Difficulty ] ) ;
12130: LD_INT 5
12132: PPUSH
12133: LD_INT 3
12135: PPUSH
12136: LD_INT 21
12138: PPUSH
12139: LD_INT 1
12141: PPUSH
12142: LD_INT 1
12144: PPUSH
12145: LD_INT 42
12147: PPUSH
12148: LD_INT 90
12150: PUSH
12151: LD_INT 70
12153: PUSH
12154: LD_INT 60
12156: PUSH
12157: LD_INT 50
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: PUSH
12166: LD_OWVAR 67
12170: ARRAY
12171: PPUSH
12172: CALL 241 0 7
// veh := CreateVehicle ;
12176: LD_ADDR_VAR 0 3
12180: PUSH
12181: CALL_OW 45
12185: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
12186: LD_VAR 0 3
12190: PPUSH
12191: LD_INT 4
12193: PPUSH
12194: CALL_OW 233
// PlaceUnitXY ( veh , 109 , 38 , false ) ;
12198: LD_VAR 0 3
12202: PPUSH
12203: LD_INT 109
12205: PPUSH
12206: LD_INT 38
12208: PPUSH
12209: LD_INT 0
12211: PPUSH
12212: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
12216: LD_EXP 30
12220: PPUSH
12221: LD_VAR 0 3
12225: PPUSH
12226: CALL_OW 52
// ComTurnUnit ( Kaia , Aviradze ) ;
12230: LD_EXP 28
12234: PPUSH
12235: LD_EXP 27
12239: PPUSH
12240: CALL_OW 119
// ComTurnUnit ( Aviradze , Kaia ) ;
12244: LD_EXP 27
12248: PPUSH
12249: LD_EXP 28
12253: PPUSH
12254: CALL_OW 119
// if not Givi or not Mike then
12258: LD_EXP 24
12262: NOT
12263: PUSH
12264: LD_EXP 25
12268: NOT
12269: OR
12270: IFFALSE 12346
// begin uc_nation := 2 ;
12272: LD_ADDR_OWVAR 21
12276: PUSH
12277: LD_INT 2
12279: ST_TO_ADDR
// uc_side := 5 ;
12280: LD_ADDR_OWVAR 20
12284: PUSH
12285: LD_INT 5
12287: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 1 ) ;
12288: LD_INT 1
12290: PPUSH
12291: LD_INT 1
12293: PPUSH
12294: LD_INT 1
12296: PPUSH
12297: CALL_OW 380
// un := CreateHuman ;
12301: LD_ADDR_VAR 0 2
12305: PUSH
12306: CALL_OW 44
12310: ST_TO_ADDR
// PlaceUnitXYR ( un , 112 , 40 , 3 , false ) ;
12311: LD_VAR 0 2
12315: PPUSH
12316: LD_INT 112
12318: PPUSH
12319: LD_INT 40
12321: PPUSH
12322: LD_INT 3
12324: PPUSH
12325: LD_INT 0
12327: PPUSH
12328: CALL_OW 50
// ComTurnUnit ( un , Aviradze ) ;
12332: LD_VAR 0 2
12336: PPUSH
12337: LD_EXP 27
12341: PPUSH
12342: CALL_OW 119
// end ; end ;
12346: LD_VAR 0 1
12350: RET
// export function PrepareFarmer ; var i ; begin
12351: LD_INT 0
12353: PPUSH
12354: PPUSH
// uc_side := 5 ;
12355: LD_ADDR_OWVAR 20
12359: PUSH
12360: LD_INT 5
12362: ST_TO_ADDR
// uc_nation := 2 ;
12363: LD_ADDR_OWVAR 21
12367: PUSH
12368: LD_INT 2
12370: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
12371: LD_ADDR_EXP 31
12375: PUSH
12376: LD_STRING Farmer
12378: PPUSH
12379: LD_INT 0
12381: PPUSH
12382: LD_STRING 
12384: PPUSH
12385: CALL 32891 0 3
12389: ST_TO_ADDR
// PlaceUnitXY ( Farmer , 106 , 62 , false ) ;
12390: LD_EXP 31
12394: PPUSH
12395: LD_INT 106
12397: PPUSH
12398: LD_INT 62
12400: PPUSH
12401: LD_INT 0
12403: PPUSH
12404: CALL_OW 48
// for i := 1 to 5 do
12408: LD_ADDR_VAR 0 2
12412: PUSH
12413: DOUBLE
12414: LD_INT 1
12416: DEC
12417: ST_TO_ADDR
12418: LD_INT 5
12420: PUSH
12421: FOR_TO
12422: IFFALSE 12460
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
12424: LD_INT 1
12426: PPUSH
12427: LD_INT 1
12429: PPUSH
12430: LD_INT 1
12432: PPUSH
12433: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 105 , 64 , 3 , false ) ;
12437: CALL_OW 44
12441: PPUSH
12442: LD_INT 105
12444: PPUSH
12445: LD_INT 64
12447: PPUSH
12448: LD_INT 3
12450: PPUSH
12451: LD_INT 0
12453: PPUSH
12454: CALL_OW 50
// end ;
12458: GO 12421
12460: POP
12461: POP
// end ; end_of_file
12462: LD_VAR 0 1
12466: RET
// every 2 2$20 + 0 0$10 do
12467: GO 12469
12469: DISABLE
// begin enable ;
12470: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , forest , true ) ;
12471: LD_INT 1
12473: PPUSH
12474: LD_INT 5
12476: PPUSH
12477: CALL_OW 12
12481: PPUSH
12482: LD_INT 1
12484: PPUSH
12485: LD_INT 1
12487: PPUSH
12488: CALL_OW 55
// if tick > 6 6$00 then
12492: LD_OWVAR 1
12496: PUSH
12497: LD_INT 12600
12499: GREATER
12500: IFFALSE 12503
// disable ;
12502: DISABLE
// end ; end_of_file
12503: END
// on UnitDestroyed ( un ) do begin if un = Heike then
12504: LD_VAR 0 1
12508: PUSH
12509: LD_EXP 23
12513: EQUAL
12514: IFFALSE 12523
// YouLost ( Heike ) ;
12516: LD_STRING Heike
12518: PPUSH
12519: CALL_OW 104
// if un = Aviradze then
12523: LD_VAR 0 1
12527: PUSH
12528: LD_EXP 27
12532: EQUAL
12533: IFFALSE 12542
// YouLost ( Aviradze ) ;
12535: LD_STRING Aviradze
12537: PPUSH
12538: CALL_OW 104
// if un = usLab then
12542: LD_VAR 0 1
12546: PUSH
12547: LD_INT 3
12549: EQUAL
12550: IFFALSE 12559
// YouLost ( Lab ) ;
12552: LD_STRING Lab
12554: PPUSH
12555: CALL_OW 104
// if ( un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) diff [ Heike , Aviradze ] ) and aviradzeSpotted then
12559: LD_VAR 0 1
12563: PUSH
12564: LD_INT 22
12566: PUSH
12567: LD_INT 2
12569: PUSH
12570: EMPTY
12571: LIST
12572: LIST
12573: PUSH
12574: LD_INT 21
12576: PUSH
12577: LD_INT 1
12579: PUSH
12580: EMPTY
12581: LIST
12582: LIST
12583: PUSH
12584: LD_INT 23
12586: PUSH
12587: LD_INT 2
12589: PUSH
12590: EMPTY
12591: LIST
12592: LIST
12593: PUSH
12594: EMPTY
12595: LIST
12596: LIST
12597: LIST
12598: PPUSH
12599: CALL_OW 69
12603: PUSH
12604: LD_EXP 23
12608: PUSH
12609: LD_EXP 27
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: DIFF
12618: IN
12619: PUSH
12620: LD_EXP 4
12624: AND
12625: IFFALSE 12641
// lostCounter := lostCounter + 1 ;
12627: LD_ADDR_EXP 18
12631: PUSH
12632: LD_EXP 18
12636: PUSH
12637: LD_INT 1
12639: PLUS
12640: ST_TO_ADDR
// end ;
12641: PPOPN 1
12643: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 2 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) = 0 do
12644: LD_INT 23
12646: PUSH
12647: LD_INT 2
12649: PUSH
12650: EMPTY
12651: LIST
12652: LIST
12653: PUSH
12654: LD_INT 25
12656: PUSH
12657: LD_INT 2
12659: PUSH
12660: EMPTY
12661: LIST
12662: LIST
12663: PUSH
12664: EMPTY
12665: LIST
12666: LIST
12667: PPUSH
12668: CALL_OW 69
12672: PUSH
12673: LD_INT 0
12675: EQUAL
12676: PUSH
12677: LD_INT 22
12679: PUSH
12680: LD_INT 2
12682: PUSH
12683: EMPTY
12684: LIST
12685: LIST
12686: PUSH
12687: LD_INT 21
12689: PUSH
12690: LD_INT 3
12692: PUSH
12693: EMPTY
12694: LIST
12695: LIST
12696: PUSH
12697: EMPTY
12698: LIST
12699: LIST
12700: PPUSH
12701: CALL_OW 69
12705: PUSH
12706: LD_INT 0
12708: EQUAL
12709: AND
12710: IFFALSE 12722
12712: GO 12714
12714: DISABLE
// YouLost ( Eng ) ;
12715: LD_STRING Eng
12717: PPUSH
12718: CALL_OW 104
12722: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in usSci and killerSide = 2 then
12723: LD_VAR 0 1
12727: PUSH
12728: LD_EXP 22
12732: IN
12733: PUSH
12734: LD_VAR 0 2
12738: PUSH
12739: LD_INT 2
12741: EQUAL
12742: AND
12743: IFFALSE 12775
// begin usSci := usSci diff un ;
12745: LD_ADDR_EXP 22
12749: PUSH
12750: LD_EXP 22
12754: PUSH
12755: LD_VAR 0 1
12759: DIFF
12760: ST_TO_ADDR
// sciCounterKill := sciCounterKill + 1 ;
12761: LD_ADDR_EXP 9
12765: PUSH
12766: LD_EXP 9
12770: PUSH
12771: LD_INT 1
12773: PLUS
12774: ST_TO_ADDR
// end ; end ;
12775: PPOPN 3
12777: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
12778: LD_VAR 0 1
12782: PUSH
12783: LD_INT 2
12785: EQUAL
12786: PUSH
12787: LD_VAR 0 2
12791: PUSH
12792: LD_INT 5
12794: EQUAL
12795: AND
12796: IFFALSE 12805
// YouLost ( FriendlyFire ) ;
12798: LD_STRING FriendlyFire
12800: PPUSH
12801: CALL_OW 104
// end ; end_of_file end_of_file
12805: PPOPN 2
12807: END
// export globalGameSaveCounter ; every 0 0$1 do
12808: GO 12810
12810: DISABLE
// begin enable ;
12811: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
12812: LD_STRING updateTimer(
12814: PUSH
12815: LD_OWVAR 1
12819: STR
12820: PUSH
12821: LD_STRING );
12823: STR
12824: PPUSH
12825: CALL_OW 559
// end ;
12829: END
// every 0 0$1 do
12830: GO 12832
12832: DISABLE
// begin globalGameSaveCounter := 0 ;
12833: LD_ADDR_EXP 32
12837: PUSH
12838: LD_INT 0
12840: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
12841: LD_STRING setGameSaveCounter(0)
12843: PPUSH
12844: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
12848: LD_STRING initStreamRollete();
12850: PPUSH
12851: CALL_OW 559
// InitStreamMode ;
12855: CALL 14181 0 0
// DefineStreamItems ( false ) ;
12859: LD_INT 0
12861: PPUSH
12862: CALL 14645 0 1
// end ;
12866: END
// export function SOS_MapStart ( ) ; begin
12867: LD_INT 0
12869: PPUSH
// if streamModeActive then
12870: LD_EXP 33
12874: IFFALSE 12883
// DefineStreamItems ( true ) ;
12876: LD_INT 1
12878: PPUSH
12879: CALL 14645 0 1
// UpdateLuaVariables ( ) ;
12883: CALL 12900 0 0
// UpdateFactoryWaypoints ( ) ;
12887: CALL 27506 0 0
// UpdateWarehouseGatheringPoints ( ) ;
12891: CALL 27763 0 0
// end ;
12895: LD_VAR 0 1
12899: RET
// function UpdateLuaVariables ( ) ; begin
12900: LD_INT 0
12902: PPUSH
// if globalGameSaveCounter then
12903: LD_EXP 32
12907: IFFALSE 12941
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
12909: LD_ADDR_EXP 32
12913: PUSH
12914: LD_EXP 32
12918: PPUSH
12919: CALL 71720 0 1
12923: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12924: LD_STRING setGameSaveCounter(
12926: PUSH
12927: LD_EXP 32
12931: STR
12932: PUSH
12933: LD_STRING )
12935: STR
12936: PPUSH
12937: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
12941: LD_STRING setGameDifficulty(
12943: PUSH
12944: LD_OWVAR 67
12948: STR
12949: PUSH
12950: LD_STRING )
12952: STR
12953: PPUSH
12954: CALL_OW 559
// end ;
12958: LD_VAR 0 1
12962: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12963: LD_INT 0
12965: PPUSH
// if p2 = stream_mode then
12966: LD_VAR 0 2
12970: PUSH
12971: LD_INT 100
12973: EQUAL
12974: IFFALSE 13977
// begin if not StreamModeActive then
12976: LD_EXP 33
12980: NOT
12981: IFFALSE 12991
// StreamModeActive := true ;
12983: LD_ADDR_EXP 33
12987: PUSH
12988: LD_INT 1
12990: ST_TO_ADDR
// if p3 = 0 then
12991: LD_VAR 0 3
12995: PUSH
12996: LD_INT 0
12998: EQUAL
12999: IFFALSE 13005
// InitStreamMode ;
13001: CALL 14181 0 0
// if p3 = 1 then
13005: LD_VAR 0 3
13009: PUSH
13010: LD_INT 1
13012: EQUAL
13013: IFFALSE 13023
// sRocket := true ;
13015: LD_ADDR_EXP 38
13019: PUSH
13020: LD_INT 1
13022: ST_TO_ADDR
// if p3 = 2 then
13023: LD_VAR 0 3
13027: PUSH
13028: LD_INT 2
13030: EQUAL
13031: IFFALSE 13041
// sSpeed := true ;
13033: LD_ADDR_EXP 37
13037: PUSH
13038: LD_INT 1
13040: ST_TO_ADDR
// if p3 = 3 then
13041: LD_VAR 0 3
13045: PUSH
13046: LD_INT 3
13048: EQUAL
13049: IFFALSE 13059
// sEngine := true ;
13051: LD_ADDR_EXP 39
13055: PUSH
13056: LD_INT 1
13058: ST_TO_ADDR
// if p3 = 4 then
13059: LD_VAR 0 3
13063: PUSH
13064: LD_INT 4
13066: EQUAL
13067: IFFALSE 13077
// sSpec := true ;
13069: LD_ADDR_EXP 36
13073: PUSH
13074: LD_INT 1
13076: ST_TO_ADDR
// if p3 = 5 then
13077: LD_VAR 0 3
13081: PUSH
13082: LD_INT 5
13084: EQUAL
13085: IFFALSE 13095
// sLevel := true ;
13087: LD_ADDR_EXP 40
13091: PUSH
13092: LD_INT 1
13094: ST_TO_ADDR
// if p3 = 6 then
13095: LD_VAR 0 3
13099: PUSH
13100: LD_INT 6
13102: EQUAL
13103: IFFALSE 13113
// sArmoury := true ;
13105: LD_ADDR_EXP 41
13109: PUSH
13110: LD_INT 1
13112: ST_TO_ADDR
// if p3 = 7 then
13113: LD_VAR 0 3
13117: PUSH
13118: LD_INT 7
13120: EQUAL
13121: IFFALSE 13131
// sRadar := true ;
13123: LD_ADDR_EXP 42
13127: PUSH
13128: LD_INT 1
13130: ST_TO_ADDR
// if p3 = 8 then
13131: LD_VAR 0 3
13135: PUSH
13136: LD_INT 8
13138: EQUAL
13139: IFFALSE 13149
// sBunker := true ;
13141: LD_ADDR_EXP 43
13145: PUSH
13146: LD_INT 1
13148: ST_TO_ADDR
// if p3 = 9 then
13149: LD_VAR 0 3
13153: PUSH
13154: LD_INT 9
13156: EQUAL
13157: IFFALSE 13167
// sHack := true ;
13159: LD_ADDR_EXP 44
13163: PUSH
13164: LD_INT 1
13166: ST_TO_ADDR
// if p3 = 10 then
13167: LD_VAR 0 3
13171: PUSH
13172: LD_INT 10
13174: EQUAL
13175: IFFALSE 13185
// sFire := true ;
13177: LD_ADDR_EXP 45
13181: PUSH
13182: LD_INT 1
13184: ST_TO_ADDR
// if p3 = 11 then
13185: LD_VAR 0 3
13189: PUSH
13190: LD_INT 11
13192: EQUAL
13193: IFFALSE 13203
// sRefresh := true ;
13195: LD_ADDR_EXP 46
13199: PUSH
13200: LD_INT 1
13202: ST_TO_ADDR
// if p3 = 12 then
13203: LD_VAR 0 3
13207: PUSH
13208: LD_INT 12
13210: EQUAL
13211: IFFALSE 13221
// sExp := true ;
13213: LD_ADDR_EXP 47
13217: PUSH
13218: LD_INT 1
13220: ST_TO_ADDR
// if p3 = 13 then
13221: LD_VAR 0 3
13225: PUSH
13226: LD_INT 13
13228: EQUAL
13229: IFFALSE 13239
// sDepot := true ;
13231: LD_ADDR_EXP 48
13235: PUSH
13236: LD_INT 1
13238: ST_TO_ADDR
// if p3 = 14 then
13239: LD_VAR 0 3
13243: PUSH
13244: LD_INT 14
13246: EQUAL
13247: IFFALSE 13257
// sFlag := true ;
13249: LD_ADDR_EXP 49
13253: PUSH
13254: LD_INT 1
13256: ST_TO_ADDR
// if p3 = 15 then
13257: LD_VAR 0 3
13261: PUSH
13262: LD_INT 15
13264: EQUAL
13265: IFFALSE 13275
// sKamikadze := true ;
13267: LD_ADDR_EXP 57
13271: PUSH
13272: LD_INT 1
13274: ST_TO_ADDR
// if p3 = 16 then
13275: LD_VAR 0 3
13279: PUSH
13280: LD_INT 16
13282: EQUAL
13283: IFFALSE 13293
// sTroll := true ;
13285: LD_ADDR_EXP 58
13289: PUSH
13290: LD_INT 1
13292: ST_TO_ADDR
// if p3 = 17 then
13293: LD_VAR 0 3
13297: PUSH
13298: LD_INT 17
13300: EQUAL
13301: IFFALSE 13311
// sSlow := true ;
13303: LD_ADDR_EXP 59
13307: PUSH
13308: LD_INT 1
13310: ST_TO_ADDR
// if p3 = 18 then
13311: LD_VAR 0 3
13315: PUSH
13316: LD_INT 18
13318: EQUAL
13319: IFFALSE 13329
// sLack := true ;
13321: LD_ADDR_EXP 60
13325: PUSH
13326: LD_INT 1
13328: ST_TO_ADDR
// if p3 = 19 then
13329: LD_VAR 0 3
13333: PUSH
13334: LD_INT 19
13336: EQUAL
13337: IFFALSE 13347
// sTank := true ;
13339: LD_ADDR_EXP 62
13343: PUSH
13344: LD_INT 1
13346: ST_TO_ADDR
// if p3 = 20 then
13347: LD_VAR 0 3
13351: PUSH
13352: LD_INT 20
13354: EQUAL
13355: IFFALSE 13365
// sRemote := true ;
13357: LD_ADDR_EXP 63
13361: PUSH
13362: LD_INT 1
13364: ST_TO_ADDR
// if p3 = 21 then
13365: LD_VAR 0 3
13369: PUSH
13370: LD_INT 21
13372: EQUAL
13373: IFFALSE 13383
// sPowell := true ;
13375: LD_ADDR_EXP 64
13379: PUSH
13380: LD_INT 1
13382: ST_TO_ADDR
// if p3 = 22 then
13383: LD_VAR 0 3
13387: PUSH
13388: LD_INT 22
13390: EQUAL
13391: IFFALSE 13401
// sTeleport := true ;
13393: LD_ADDR_EXP 67
13397: PUSH
13398: LD_INT 1
13400: ST_TO_ADDR
// if p3 = 23 then
13401: LD_VAR 0 3
13405: PUSH
13406: LD_INT 23
13408: EQUAL
13409: IFFALSE 13419
// sOilTower := true ;
13411: LD_ADDR_EXP 69
13415: PUSH
13416: LD_INT 1
13418: ST_TO_ADDR
// if p3 = 24 then
13419: LD_VAR 0 3
13423: PUSH
13424: LD_INT 24
13426: EQUAL
13427: IFFALSE 13437
// sShovel := true ;
13429: LD_ADDR_EXP 70
13433: PUSH
13434: LD_INT 1
13436: ST_TO_ADDR
// if p3 = 25 then
13437: LD_VAR 0 3
13441: PUSH
13442: LD_INT 25
13444: EQUAL
13445: IFFALSE 13455
// sSheik := true ;
13447: LD_ADDR_EXP 71
13451: PUSH
13452: LD_INT 1
13454: ST_TO_ADDR
// if p3 = 26 then
13455: LD_VAR 0 3
13459: PUSH
13460: LD_INT 26
13462: EQUAL
13463: IFFALSE 13473
// sEarthquake := true ;
13465: LD_ADDR_EXP 73
13469: PUSH
13470: LD_INT 1
13472: ST_TO_ADDR
// if p3 = 27 then
13473: LD_VAR 0 3
13477: PUSH
13478: LD_INT 27
13480: EQUAL
13481: IFFALSE 13491
// sAI := true ;
13483: LD_ADDR_EXP 74
13487: PUSH
13488: LD_INT 1
13490: ST_TO_ADDR
// if p3 = 28 then
13491: LD_VAR 0 3
13495: PUSH
13496: LD_INT 28
13498: EQUAL
13499: IFFALSE 13509
// sCargo := true ;
13501: LD_ADDR_EXP 77
13505: PUSH
13506: LD_INT 1
13508: ST_TO_ADDR
// if p3 = 29 then
13509: LD_VAR 0 3
13513: PUSH
13514: LD_INT 29
13516: EQUAL
13517: IFFALSE 13527
// sDLaser := true ;
13519: LD_ADDR_EXP 78
13523: PUSH
13524: LD_INT 1
13526: ST_TO_ADDR
// if p3 = 30 then
13527: LD_VAR 0 3
13531: PUSH
13532: LD_INT 30
13534: EQUAL
13535: IFFALSE 13545
// sExchange := true ;
13537: LD_ADDR_EXP 79
13541: PUSH
13542: LD_INT 1
13544: ST_TO_ADDR
// if p3 = 31 then
13545: LD_VAR 0 3
13549: PUSH
13550: LD_INT 31
13552: EQUAL
13553: IFFALSE 13563
// sFac := true ;
13555: LD_ADDR_EXP 80
13559: PUSH
13560: LD_INT 1
13562: ST_TO_ADDR
// if p3 = 32 then
13563: LD_VAR 0 3
13567: PUSH
13568: LD_INT 32
13570: EQUAL
13571: IFFALSE 13581
// sPower := true ;
13573: LD_ADDR_EXP 81
13577: PUSH
13578: LD_INT 1
13580: ST_TO_ADDR
// if p3 = 33 then
13581: LD_VAR 0 3
13585: PUSH
13586: LD_INT 33
13588: EQUAL
13589: IFFALSE 13599
// sRandom := true ;
13591: LD_ADDR_EXP 82
13595: PUSH
13596: LD_INT 1
13598: ST_TO_ADDR
// if p3 = 34 then
13599: LD_VAR 0 3
13603: PUSH
13604: LD_INT 34
13606: EQUAL
13607: IFFALSE 13617
// sShield := true ;
13609: LD_ADDR_EXP 83
13613: PUSH
13614: LD_INT 1
13616: ST_TO_ADDR
// if p3 = 35 then
13617: LD_VAR 0 3
13621: PUSH
13622: LD_INT 35
13624: EQUAL
13625: IFFALSE 13635
// sTime := true ;
13627: LD_ADDR_EXP 84
13631: PUSH
13632: LD_INT 1
13634: ST_TO_ADDR
// if p3 = 36 then
13635: LD_VAR 0 3
13639: PUSH
13640: LD_INT 36
13642: EQUAL
13643: IFFALSE 13653
// sTools := true ;
13645: LD_ADDR_EXP 85
13649: PUSH
13650: LD_INT 1
13652: ST_TO_ADDR
// if p3 = 101 then
13653: LD_VAR 0 3
13657: PUSH
13658: LD_INT 101
13660: EQUAL
13661: IFFALSE 13671
// sSold := true ;
13663: LD_ADDR_EXP 50
13667: PUSH
13668: LD_INT 1
13670: ST_TO_ADDR
// if p3 = 102 then
13671: LD_VAR 0 3
13675: PUSH
13676: LD_INT 102
13678: EQUAL
13679: IFFALSE 13689
// sDiff := true ;
13681: LD_ADDR_EXP 51
13685: PUSH
13686: LD_INT 1
13688: ST_TO_ADDR
// if p3 = 103 then
13689: LD_VAR 0 3
13693: PUSH
13694: LD_INT 103
13696: EQUAL
13697: IFFALSE 13707
// sFog := true ;
13699: LD_ADDR_EXP 54
13703: PUSH
13704: LD_INT 1
13706: ST_TO_ADDR
// if p3 = 104 then
13707: LD_VAR 0 3
13711: PUSH
13712: LD_INT 104
13714: EQUAL
13715: IFFALSE 13725
// sReset := true ;
13717: LD_ADDR_EXP 55
13721: PUSH
13722: LD_INT 1
13724: ST_TO_ADDR
// if p3 = 105 then
13725: LD_VAR 0 3
13729: PUSH
13730: LD_INT 105
13732: EQUAL
13733: IFFALSE 13743
// sSun := true ;
13735: LD_ADDR_EXP 56
13739: PUSH
13740: LD_INT 1
13742: ST_TO_ADDR
// if p3 = 106 then
13743: LD_VAR 0 3
13747: PUSH
13748: LD_INT 106
13750: EQUAL
13751: IFFALSE 13761
// sTiger := true ;
13753: LD_ADDR_EXP 52
13757: PUSH
13758: LD_INT 1
13760: ST_TO_ADDR
// if p3 = 107 then
13761: LD_VAR 0 3
13765: PUSH
13766: LD_INT 107
13768: EQUAL
13769: IFFALSE 13779
// sBomb := true ;
13771: LD_ADDR_EXP 53
13775: PUSH
13776: LD_INT 1
13778: ST_TO_ADDR
// if p3 = 108 then
13779: LD_VAR 0 3
13783: PUSH
13784: LD_INT 108
13786: EQUAL
13787: IFFALSE 13797
// sWound := true ;
13789: LD_ADDR_EXP 61
13793: PUSH
13794: LD_INT 1
13796: ST_TO_ADDR
// if p3 = 109 then
13797: LD_VAR 0 3
13801: PUSH
13802: LD_INT 109
13804: EQUAL
13805: IFFALSE 13815
// sBetray := true ;
13807: LD_ADDR_EXP 65
13811: PUSH
13812: LD_INT 1
13814: ST_TO_ADDR
// if p3 = 110 then
13815: LD_VAR 0 3
13819: PUSH
13820: LD_INT 110
13822: EQUAL
13823: IFFALSE 13833
// sContamin := true ;
13825: LD_ADDR_EXP 66
13829: PUSH
13830: LD_INT 1
13832: ST_TO_ADDR
// if p3 = 111 then
13833: LD_VAR 0 3
13837: PUSH
13838: LD_INT 111
13840: EQUAL
13841: IFFALSE 13851
// sOil := true ;
13843: LD_ADDR_EXP 68
13847: PUSH
13848: LD_INT 1
13850: ST_TO_ADDR
// if p3 = 112 then
13851: LD_VAR 0 3
13855: PUSH
13856: LD_INT 112
13858: EQUAL
13859: IFFALSE 13869
// sStu := true ;
13861: LD_ADDR_EXP 72
13865: PUSH
13866: LD_INT 1
13868: ST_TO_ADDR
// if p3 = 113 then
13869: LD_VAR 0 3
13873: PUSH
13874: LD_INT 113
13876: EQUAL
13877: IFFALSE 13887
// sBazooka := true ;
13879: LD_ADDR_EXP 75
13883: PUSH
13884: LD_INT 1
13886: ST_TO_ADDR
// if p3 = 114 then
13887: LD_VAR 0 3
13891: PUSH
13892: LD_INT 114
13894: EQUAL
13895: IFFALSE 13905
// sMortar := true ;
13897: LD_ADDR_EXP 76
13901: PUSH
13902: LD_INT 1
13904: ST_TO_ADDR
// if p3 = 115 then
13905: LD_VAR 0 3
13909: PUSH
13910: LD_INT 115
13912: EQUAL
13913: IFFALSE 13923
// sRanger := true ;
13915: LD_ADDR_EXP 86
13919: PUSH
13920: LD_INT 1
13922: ST_TO_ADDR
// if p3 = 116 then
13923: LD_VAR 0 3
13927: PUSH
13928: LD_INT 116
13930: EQUAL
13931: IFFALSE 13941
// sComputer := true ;
13933: LD_ADDR_EXP 87
13937: PUSH
13938: LD_INT 1
13940: ST_TO_ADDR
// if p3 = 117 then
13941: LD_VAR 0 3
13945: PUSH
13946: LD_INT 117
13948: EQUAL
13949: IFFALSE 13959
// s30 := true ;
13951: LD_ADDR_EXP 88
13955: PUSH
13956: LD_INT 1
13958: ST_TO_ADDR
// if p3 = 118 then
13959: LD_VAR 0 3
13963: PUSH
13964: LD_INT 118
13966: EQUAL
13967: IFFALSE 13977
// s60 := true ;
13969: LD_ADDR_EXP 89
13973: PUSH
13974: LD_INT 1
13976: ST_TO_ADDR
// end ; if p2 = hack_mode then
13977: LD_VAR 0 2
13981: PUSH
13982: LD_INT 101
13984: EQUAL
13985: IFFALSE 14113
// begin case p3 of 1 :
13987: LD_VAR 0 3
13991: PUSH
13992: LD_INT 1
13994: DOUBLE
13995: EQUAL
13996: IFTRUE 14000
13998: GO 14007
14000: POP
// hHackUnlimitedResources ; 2 :
14001: CALL 26252 0 0
14005: GO 14113
14007: LD_INT 2
14009: DOUBLE
14010: EQUAL
14011: IFTRUE 14015
14013: GO 14022
14015: POP
// hHackSetLevel10 ; 3 :
14016: CALL 26385 0 0
14020: GO 14113
14022: LD_INT 3
14024: DOUBLE
14025: EQUAL
14026: IFTRUE 14030
14028: GO 14037
14030: POP
// hHackSetLevel10YourUnits ; 4 :
14031: CALL 26470 0 0
14035: GO 14113
14037: LD_INT 4
14039: DOUBLE
14040: EQUAL
14041: IFTRUE 14045
14043: GO 14052
14045: POP
// hHackInvincible ; 5 :
14046: CALL 26918 0 0
14050: GO 14113
14052: LD_INT 5
14054: DOUBLE
14055: EQUAL
14056: IFTRUE 14060
14058: GO 14067
14060: POP
// hHackInvisible ; 6 :
14061: CALL 27029 0 0
14065: GO 14113
14067: LD_INT 6
14069: DOUBLE
14070: EQUAL
14071: IFTRUE 14075
14073: GO 14082
14075: POP
// hHackChangeYourSide ; 7 :
14076: CALL 27086 0 0
14080: GO 14113
14082: LD_INT 7
14084: DOUBLE
14085: EQUAL
14086: IFTRUE 14090
14088: GO 14097
14090: POP
// hHackChangeUnitSide ; 8 :
14091: CALL 27128 0 0
14095: GO 14113
14097: LD_INT 8
14099: DOUBLE
14100: EQUAL
14101: IFTRUE 14105
14103: GO 14112
14105: POP
// hHackFog ; end ;
14106: CALL 27229 0 0
14110: GO 14113
14112: POP
// end ; if p2 = game_save_mode then
14113: LD_VAR 0 2
14117: PUSH
14118: LD_INT 102
14120: EQUAL
14121: IFFALSE 14176
// begin if p3 = 1 then
14123: LD_VAR 0 3
14127: PUSH
14128: LD_INT 1
14130: EQUAL
14131: IFFALSE 14143
// globalGameSaveCounter := p4 ;
14133: LD_ADDR_EXP 32
14137: PUSH
14138: LD_VAR 0 4
14142: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
14143: LD_VAR 0 3
14147: PUSH
14148: LD_INT 2
14150: EQUAL
14151: PUSH
14152: LD_EXP 32
14156: AND
14157: IFFALSE 14176
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
14159: LD_STRING setGameSaveCounter(
14161: PUSH
14162: LD_EXP 32
14166: STR
14167: PUSH
14168: LD_STRING )
14170: STR
14171: PPUSH
14172: CALL_OW 559
// end ; end ;
14176: LD_VAR 0 7
14180: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
14181: LD_INT 0
14183: PPUSH
// streamModeActive := false ;
14184: LD_ADDR_EXP 33
14188: PUSH
14189: LD_INT 0
14191: ST_TO_ADDR
// normalCounter := 36 ;
14192: LD_ADDR_EXP 34
14196: PUSH
14197: LD_INT 36
14199: ST_TO_ADDR
// hardcoreCounter := 18 ;
14200: LD_ADDR_EXP 35
14204: PUSH
14205: LD_INT 18
14207: ST_TO_ADDR
// sRocket := false ;
14208: LD_ADDR_EXP 38
14212: PUSH
14213: LD_INT 0
14215: ST_TO_ADDR
// sSpeed := false ;
14216: LD_ADDR_EXP 37
14220: PUSH
14221: LD_INT 0
14223: ST_TO_ADDR
// sEngine := false ;
14224: LD_ADDR_EXP 39
14228: PUSH
14229: LD_INT 0
14231: ST_TO_ADDR
// sSpec := false ;
14232: LD_ADDR_EXP 36
14236: PUSH
14237: LD_INT 0
14239: ST_TO_ADDR
// sLevel := false ;
14240: LD_ADDR_EXP 40
14244: PUSH
14245: LD_INT 0
14247: ST_TO_ADDR
// sArmoury := false ;
14248: LD_ADDR_EXP 41
14252: PUSH
14253: LD_INT 0
14255: ST_TO_ADDR
// sRadar := false ;
14256: LD_ADDR_EXP 42
14260: PUSH
14261: LD_INT 0
14263: ST_TO_ADDR
// sBunker := false ;
14264: LD_ADDR_EXP 43
14268: PUSH
14269: LD_INT 0
14271: ST_TO_ADDR
// sHack := false ;
14272: LD_ADDR_EXP 44
14276: PUSH
14277: LD_INT 0
14279: ST_TO_ADDR
// sFire := false ;
14280: LD_ADDR_EXP 45
14284: PUSH
14285: LD_INT 0
14287: ST_TO_ADDR
// sRefresh := false ;
14288: LD_ADDR_EXP 46
14292: PUSH
14293: LD_INT 0
14295: ST_TO_ADDR
// sExp := false ;
14296: LD_ADDR_EXP 47
14300: PUSH
14301: LD_INT 0
14303: ST_TO_ADDR
// sDepot := false ;
14304: LD_ADDR_EXP 48
14308: PUSH
14309: LD_INT 0
14311: ST_TO_ADDR
// sFlag := false ;
14312: LD_ADDR_EXP 49
14316: PUSH
14317: LD_INT 0
14319: ST_TO_ADDR
// sKamikadze := false ;
14320: LD_ADDR_EXP 57
14324: PUSH
14325: LD_INT 0
14327: ST_TO_ADDR
// sTroll := false ;
14328: LD_ADDR_EXP 58
14332: PUSH
14333: LD_INT 0
14335: ST_TO_ADDR
// sSlow := false ;
14336: LD_ADDR_EXP 59
14340: PUSH
14341: LD_INT 0
14343: ST_TO_ADDR
// sLack := false ;
14344: LD_ADDR_EXP 60
14348: PUSH
14349: LD_INT 0
14351: ST_TO_ADDR
// sTank := false ;
14352: LD_ADDR_EXP 62
14356: PUSH
14357: LD_INT 0
14359: ST_TO_ADDR
// sRemote := false ;
14360: LD_ADDR_EXP 63
14364: PUSH
14365: LD_INT 0
14367: ST_TO_ADDR
// sPowell := false ;
14368: LD_ADDR_EXP 64
14372: PUSH
14373: LD_INT 0
14375: ST_TO_ADDR
// sTeleport := false ;
14376: LD_ADDR_EXP 67
14380: PUSH
14381: LD_INT 0
14383: ST_TO_ADDR
// sOilTower := false ;
14384: LD_ADDR_EXP 69
14388: PUSH
14389: LD_INT 0
14391: ST_TO_ADDR
// sShovel := false ;
14392: LD_ADDR_EXP 70
14396: PUSH
14397: LD_INT 0
14399: ST_TO_ADDR
// sSheik := false ;
14400: LD_ADDR_EXP 71
14404: PUSH
14405: LD_INT 0
14407: ST_TO_ADDR
// sEarthquake := false ;
14408: LD_ADDR_EXP 73
14412: PUSH
14413: LD_INT 0
14415: ST_TO_ADDR
// sAI := false ;
14416: LD_ADDR_EXP 74
14420: PUSH
14421: LD_INT 0
14423: ST_TO_ADDR
// sCargo := false ;
14424: LD_ADDR_EXP 77
14428: PUSH
14429: LD_INT 0
14431: ST_TO_ADDR
// sDLaser := false ;
14432: LD_ADDR_EXP 78
14436: PUSH
14437: LD_INT 0
14439: ST_TO_ADDR
// sExchange := false ;
14440: LD_ADDR_EXP 79
14444: PUSH
14445: LD_INT 0
14447: ST_TO_ADDR
// sFac := false ;
14448: LD_ADDR_EXP 80
14452: PUSH
14453: LD_INT 0
14455: ST_TO_ADDR
// sPower := false ;
14456: LD_ADDR_EXP 81
14460: PUSH
14461: LD_INT 0
14463: ST_TO_ADDR
// sRandom := false ;
14464: LD_ADDR_EXP 82
14468: PUSH
14469: LD_INT 0
14471: ST_TO_ADDR
// sShield := false ;
14472: LD_ADDR_EXP 83
14476: PUSH
14477: LD_INT 0
14479: ST_TO_ADDR
// sTime := false ;
14480: LD_ADDR_EXP 84
14484: PUSH
14485: LD_INT 0
14487: ST_TO_ADDR
// sTools := false ;
14488: LD_ADDR_EXP 85
14492: PUSH
14493: LD_INT 0
14495: ST_TO_ADDR
// sSold := false ;
14496: LD_ADDR_EXP 50
14500: PUSH
14501: LD_INT 0
14503: ST_TO_ADDR
// sDiff := false ;
14504: LD_ADDR_EXP 51
14508: PUSH
14509: LD_INT 0
14511: ST_TO_ADDR
// sFog := false ;
14512: LD_ADDR_EXP 54
14516: PUSH
14517: LD_INT 0
14519: ST_TO_ADDR
// sReset := false ;
14520: LD_ADDR_EXP 55
14524: PUSH
14525: LD_INT 0
14527: ST_TO_ADDR
// sSun := false ;
14528: LD_ADDR_EXP 56
14532: PUSH
14533: LD_INT 0
14535: ST_TO_ADDR
// sTiger := false ;
14536: LD_ADDR_EXP 52
14540: PUSH
14541: LD_INT 0
14543: ST_TO_ADDR
// sBomb := false ;
14544: LD_ADDR_EXP 53
14548: PUSH
14549: LD_INT 0
14551: ST_TO_ADDR
// sWound := false ;
14552: LD_ADDR_EXP 61
14556: PUSH
14557: LD_INT 0
14559: ST_TO_ADDR
// sBetray := false ;
14560: LD_ADDR_EXP 65
14564: PUSH
14565: LD_INT 0
14567: ST_TO_ADDR
// sContamin := false ;
14568: LD_ADDR_EXP 66
14572: PUSH
14573: LD_INT 0
14575: ST_TO_ADDR
// sOil := false ;
14576: LD_ADDR_EXP 68
14580: PUSH
14581: LD_INT 0
14583: ST_TO_ADDR
// sStu := false ;
14584: LD_ADDR_EXP 72
14588: PUSH
14589: LD_INT 0
14591: ST_TO_ADDR
// sBazooka := false ;
14592: LD_ADDR_EXP 75
14596: PUSH
14597: LD_INT 0
14599: ST_TO_ADDR
// sMortar := false ;
14600: LD_ADDR_EXP 76
14604: PUSH
14605: LD_INT 0
14607: ST_TO_ADDR
// sRanger := false ;
14608: LD_ADDR_EXP 86
14612: PUSH
14613: LD_INT 0
14615: ST_TO_ADDR
// sComputer := false ;
14616: LD_ADDR_EXP 87
14620: PUSH
14621: LD_INT 0
14623: ST_TO_ADDR
// s30 := false ;
14624: LD_ADDR_EXP 88
14628: PUSH
14629: LD_INT 0
14631: ST_TO_ADDR
// s60 := false ;
14632: LD_ADDR_EXP 89
14636: PUSH
14637: LD_INT 0
14639: ST_TO_ADDR
// end ;
14640: LD_VAR 0 1
14644: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
14645: LD_INT 0
14647: PPUSH
14648: PPUSH
14649: PPUSH
14650: PPUSH
14651: PPUSH
14652: PPUSH
14653: PPUSH
// result := [ ] ;
14654: LD_ADDR_VAR 0 2
14658: PUSH
14659: EMPTY
14660: ST_TO_ADDR
// if campaign_id = 1 then
14661: LD_OWVAR 69
14665: PUSH
14666: LD_INT 1
14668: EQUAL
14669: IFFALSE 17835
// begin case mission_number of 1 :
14671: LD_OWVAR 70
14675: PUSH
14676: LD_INT 1
14678: DOUBLE
14679: EQUAL
14680: IFTRUE 14684
14682: GO 14760
14684: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
14685: LD_ADDR_VAR 0 2
14689: PUSH
14690: LD_INT 2
14692: PUSH
14693: LD_INT 4
14695: PUSH
14696: LD_INT 11
14698: PUSH
14699: LD_INT 12
14701: PUSH
14702: LD_INT 15
14704: PUSH
14705: LD_INT 16
14707: PUSH
14708: LD_INT 22
14710: PUSH
14711: LD_INT 23
14713: PUSH
14714: LD_INT 26
14716: PUSH
14717: EMPTY
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: PUSH
14728: LD_INT 101
14730: PUSH
14731: LD_INT 102
14733: PUSH
14734: LD_INT 106
14736: PUSH
14737: LD_INT 116
14739: PUSH
14740: LD_INT 117
14742: PUSH
14743: LD_INT 118
14745: PUSH
14746: EMPTY
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: PUSH
14754: EMPTY
14755: LIST
14756: LIST
14757: ST_TO_ADDR
14758: GO 17833
14760: LD_INT 2
14762: DOUBLE
14763: EQUAL
14764: IFTRUE 14768
14766: GO 14852
14768: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
14769: LD_ADDR_VAR 0 2
14773: PUSH
14774: LD_INT 2
14776: PUSH
14777: LD_INT 4
14779: PUSH
14780: LD_INT 11
14782: PUSH
14783: LD_INT 12
14785: PUSH
14786: LD_INT 15
14788: PUSH
14789: LD_INT 16
14791: PUSH
14792: LD_INT 22
14794: PUSH
14795: LD_INT 23
14797: PUSH
14798: LD_INT 26
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: PUSH
14812: LD_INT 101
14814: PUSH
14815: LD_INT 102
14817: PUSH
14818: LD_INT 105
14820: PUSH
14821: LD_INT 106
14823: PUSH
14824: LD_INT 108
14826: PUSH
14827: LD_INT 116
14829: PUSH
14830: LD_INT 117
14832: PUSH
14833: LD_INT 118
14835: PUSH
14836: EMPTY
14837: LIST
14838: LIST
14839: LIST
14840: LIST
14841: LIST
14842: LIST
14843: LIST
14844: LIST
14845: PUSH
14846: EMPTY
14847: LIST
14848: LIST
14849: ST_TO_ADDR
14850: GO 17833
14852: LD_INT 3
14854: DOUBLE
14855: EQUAL
14856: IFTRUE 14860
14858: GO 14948
14860: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
14861: LD_ADDR_VAR 0 2
14865: PUSH
14866: LD_INT 2
14868: PUSH
14869: LD_INT 4
14871: PUSH
14872: LD_INT 5
14874: PUSH
14875: LD_INT 11
14877: PUSH
14878: LD_INT 12
14880: PUSH
14881: LD_INT 15
14883: PUSH
14884: LD_INT 16
14886: PUSH
14887: LD_INT 22
14889: PUSH
14890: LD_INT 26
14892: PUSH
14893: LD_INT 36
14895: PUSH
14896: EMPTY
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: PUSH
14908: LD_INT 101
14910: PUSH
14911: LD_INT 102
14913: PUSH
14914: LD_INT 105
14916: PUSH
14917: LD_INT 106
14919: PUSH
14920: LD_INT 108
14922: PUSH
14923: LD_INT 116
14925: PUSH
14926: LD_INT 117
14928: PUSH
14929: LD_INT 118
14931: PUSH
14932: EMPTY
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: ST_TO_ADDR
14946: GO 17833
14948: LD_INT 4
14950: DOUBLE
14951: EQUAL
14952: IFTRUE 14956
14954: GO 15052
14956: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
14957: LD_ADDR_VAR 0 2
14961: PUSH
14962: LD_INT 2
14964: PUSH
14965: LD_INT 4
14967: PUSH
14968: LD_INT 5
14970: PUSH
14971: LD_INT 8
14973: PUSH
14974: LD_INT 11
14976: PUSH
14977: LD_INT 12
14979: PUSH
14980: LD_INT 15
14982: PUSH
14983: LD_INT 16
14985: PUSH
14986: LD_INT 22
14988: PUSH
14989: LD_INT 23
14991: PUSH
14992: LD_INT 26
14994: PUSH
14995: LD_INT 36
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: PUSH
15012: LD_INT 101
15014: PUSH
15015: LD_INT 102
15017: PUSH
15018: LD_INT 105
15020: PUSH
15021: LD_INT 106
15023: PUSH
15024: LD_INT 108
15026: PUSH
15027: LD_INT 116
15029: PUSH
15030: LD_INT 117
15032: PUSH
15033: LD_INT 118
15035: PUSH
15036: EMPTY
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: LIST
15045: PUSH
15046: EMPTY
15047: LIST
15048: LIST
15049: ST_TO_ADDR
15050: GO 17833
15052: LD_INT 5
15054: DOUBLE
15055: EQUAL
15056: IFTRUE 15060
15058: GO 15172
15060: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
15061: LD_ADDR_VAR 0 2
15065: PUSH
15066: LD_INT 2
15068: PUSH
15069: LD_INT 4
15071: PUSH
15072: LD_INT 5
15074: PUSH
15075: LD_INT 6
15077: PUSH
15078: LD_INT 8
15080: PUSH
15081: LD_INT 11
15083: PUSH
15084: LD_INT 12
15086: PUSH
15087: LD_INT 15
15089: PUSH
15090: LD_INT 16
15092: PUSH
15093: LD_INT 22
15095: PUSH
15096: LD_INT 23
15098: PUSH
15099: LD_INT 25
15101: PUSH
15102: LD_INT 26
15104: PUSH
15105: LD_INT 36
15107: PUSH
15108: EMPTY
15109: LIST
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: PUSH
15124: LD_INT 101
15126: PUSH
15127: LD_INT 102
15129: PUSH
15130: LD_INT 105
15132: PUSH
15133: LD_INT 106
15135: PUSH
15136: LD_INT 108
15138: PUSH
15139: LD_INT 109
15141: PUSH
15142: LD_INT 112
15144: PUSH
15145: LD_INT 116
15147: PUSH
15148: LD_INT 117
15150: PUSH
15151: LD_INT 118
15153: PUSH
15154: EMPTY
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: PUSH
15166: EMPTY
15167: LIST
15168: LIST
15169: ST_TO_ADDR
15170: GO 17833
15172: LD_INT 6
15174: DOUBLE
15175: EQUAL
15176: IFTRUE 15180
15178: GO 15312
15180: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
15181: LD_ADDR_VAR 0 2
15185: PUSH
15186: LD_INT 2
15188: PUSH
15189: LD_INT 4
15191: PUSH
15192: LD_INT 5
15194: PUSH
15195: LD_INT 6
15197: PUSH
15198: LD_INT 8
15200: PUSH
15201: LD_INT 11
15203: PUSH
15204: LD_INT 12
15206: PUSH
15207: LD_INT 15
15209: PUSH
15210: LD_INT 16
15212: PUSH
15213: LD_INT 20
15215: PUSH
15216: LD_INT 21
15218: PUSH
15219: LD_INT 22
15221: PUSH
15222: LD_INT 23
15224: PUSH
15225: LD_INT 25
15227: PUSH
15228: LD_INT 26
15230: PUSH
15231: LD_INT 30
15233: PUSH
15234: LD_INT 31
15236: PUSH
15237: LD_INT 32
15239: PUSH
15240: LD_INT 36
15242: PUSH
15243: EMPTY
15244: LIST
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: LIST
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: LIST
15263: PUSH
15264: LD_INT 101
15266: PUSH
15267: LD_INT 102
15269: PUSH
15270: LD_INT 105
15272: PUSH
15273: LD_INT 106
15275: PUSH
15276: LD_INT 108
15278: PUSH
15279: LD_INT 109
15281: PUSH
15282: LD_INT 112
15284: PUSH
15285: LD_INT 116
15287: PUSH
15288: LD_INT 117
15290: PUSH
15291: LD_INT 118
15293: PUSH
15294: EMPTY
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: PUSH
15306: EMPTY
15307: LIST
15308: LIST
15309: ST_TO_ADDR
15310: GO 17833
15312: LD_INT 7
15314: DOUBLE
15315: EQUAL
15316: IFTRUE 15320
15318: GO 15432
15320: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
15321: LD_ADDR_VAR 0 2
15325: PUSH
15326: LD_INT 2
15328: PUSH
15329: LD_INT 4
15331: PUSH
15332: LD_INT 5
15334: PUSH
15335: LD_INT 7
15337: PUSH
15338: LD_INT 11
15340: PUSH
15341: LD_INT 12
15343: PUSH
15344: LD_INT 15
15346: PUSH
15347: LD_INT 16
15349: PUSH
15350: LD_INT 20
15352: PUSH
15353: LD_INT 21
15355: PUSH
15356: LD_INT 22
15358: PUSH
15359: LD_INT 23
15361: PUSH
15362: LD_INT 25
15364: PUSH
15365: LD_INT 26
15367: PUSH
15368: EMPTY
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: LIST
15380: LIST
15381: LIST
15382: LIST
15383: PUSH
15384: LD_INT 101
15386: PUSH
15387: LD_INT 102
15389: PUSH
15390: LD_INT 103
15392: PUSH
15393: LD_INT 105
15395: PUSH
15396: LD_INT 106
15398: PUSH
15399: LD_INT 108
15401: PUSH
15402: LD_INT 112
15404: PUSH
15405: LD_INT 116
15407: PUSH
15408: LD_INT 117
15410: PUSH
15411: LD_INT 118
15413: PUSH
15414: EMPTY
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: PUSH
15426: EMPTY
15427: LIST
15428: LIST
15429: ST_TO_ADDR
15430: GO 17833
15432: LD_INT 8
15434: DOUBLE
15435: EQUAL
15436: IFTRUE 15440
15438: GO 15580
15440: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
15441: LD_ADDR_VAR 0 2
15445: PUSH
15446: LD_INT 2
15448: PUSH
15449: LD_INT 4
15451: PUSH
15452: LD_INT 5
15454: PUSH
15455: LD_INT 6
15457: PUSH
15458: LD_INT 7
15460: PUSH
15461: LD_INT 8
15463: PUSH
15464: LD_INT 11
15466: PUSH
15467: LD_INT 12
15469: PUSH
15470: LD_INT 15
15472: PUSH
15473: LD_INT 16
15475: PUSH
15476: LD_INT 20
15478: PUSH
15479: LD_INT 21
15481: PUSH
15482: LD_INT 22
15484: PUSH
15485: LD_INT 23
15487: PUSH
15488: LD_INT 25
15490: PUSH
15491: LD_INT 26
15493: PUSH
15494: LD_INT 30
15496: PUSH
15497: LD_INT 31
15499: PUSH
15500: LD_INT 32
15502: PUSH
15503: LD_INT 36
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: PUSH
15528: LD_INT 101
15530: PUSH
15531: LD_INT 102
15533: PUSH
15534: LD_INT 103
15536: PUSH
15537: LD_INT 105
15539: PUSH
15540: LD_INT 106
15542: PUSH
15543: LD_INT 108
15545: PUSH
15546: LD_INT 109
15548: PUSH
15549: LD_INT 112
15551: PUSH
15552: LD_INT 116
15554: PUSH
15555: LD_INT 117
15557: PUSH
15558: LD_INT 118
15560: PUSH
15561: EMPTY
15562: LIST
15563: LIST
15564: LIST
15565: LIST
15566: LIST
15567: LIST
15568: LIST
15569: LIST
15570: LIST
15571: LIST
15572: LIST
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: ST_TO_ADDR
15578: GO 17833
15580: LD_INT 9
15582: DOUBLE
15583: EQUAL
15584: IFTRUE 15588
15586: GO 15736
15588: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
15589: LD_ADDR_VAR 0 2
15593: PUSH
15594: LD_INT 2
15596: PUSH
15597: LD_INT 4
15599: PUSH
15600: LD_INT 5
15602: PUSH
15603: LD_INT 6
15605: PUSH
15606: LD_INT 7
15608: PUSH
15609: LD_INT 8
15611: PUSH
15612: LD_INT 11
15614: PUSH
15615: LD_INT 12
15617: PUSH
15618: LD_INT 15
15620: PUSH
15621: LD_INT 16
15623: PUSH
15624: LD_INT 20
15626: PUSH
15627: LD_INT 21
15629: PUSH
15630: LD_INT 22
15632: PUSH
15633: LD_INT 23
15635: PUSH
15636: LD_INT 25
15638: PUSH
15639: LD_INT 26
15641: PUSH
15642: LD_INT 28
15644: PUSH
15645: LD_INT 30
15647: PUSH
15648: LD_INT 31
15650: PUSH
15651: LD_INT 32
15653: PUSH
15654: LD_INT 36
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: PUSH
15680: LD_INT 101
15682: PUSH
15683: LD_INT 102
15685: PUSH
15686: LD_INT 103
15688: PUSH
15689: LD_INT 105
15691: PUSH
15692: LD_INT 106
15694: PUSH
15695: LD_INT 108
15697: PUSH
15698: LD_INT 109
15700: PUSH
15701: LD_INT 112
15703: PUSH
15704: LD_INT 114
15706: PUSH
15707: LD_INT 116
15709: PUSH
15710: LD_INT 117
15712: PUSH
15713: LD_INT 118
15715: PUSH
15716: EMPTY
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: ST_TO_ADDR
15734: GO 17833
15736: LD_INT 10
15738: DOUBLE
15739: EQUAL
15740: IFTRUE 15744
15742: GO 15940
15744: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
15745: LD_ADDR_VAR 0 2
15749: PUSH
15750: LD_INT 2
15752: PUSH
15753: LD_INT 4
15755: PUSH
15756: LD_INT 5
15758: PUSH
15759: LD_INT 6
15761: PUSH
15762: LD_INT 7
15764: PUSH
15765: LD_INT 8
15767: PUSH
15768: LD_INT 9
15770: PUSH
15771: LD_INT 10
15773: PUSH
15774: LD_INT 11
15776: PUSH
15777: LD_INT 12
15779: PUSH
15780: LD_INT 13
15782: PUSH
15783: LD_INT 14
15785: PUSH
15786: LD_INT 15
15788: PUSH
15789: LD_INT 16
15791: PUSH
15792: LD_INT 17
15794: PUSH
15795: LD_INT 18
15797: PUSH
15798: LD_INT 19
15800: PUSH
15801: LD_INT 20
15803: PUSH
15804: LD_INT 21
15806: PUSH
15807: LD_INT 22
15809: PUSH
15810: LD_INT 23
15812: PUSH
15813: LD_INT 24
15815: PUSH
15816: LD_INT 25
15818: PUSH
15819: LD_INT 26
15821: PUSH
15822: LD_INT 28
15824: PUSH
15825: LD_INT 30
15827: PUSH
15828: LD_INT 31
15830: PUSH
15831: LD_INT 32
15833: PUSH
15834: LD_INT 36
15836: PUSH
15837: EMPTY
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: PUSH
15868: LD_INT 101
15870: PUSH
15871: LD_INT 102
15873: PUSH
15874: LD_INT 103
15876: PUSH
15877: LD_INT 104
15879: PUSH
15880: LD_INT 105
15882: PUSH
15883: LD_INT 106
15885: PUSH
15886: LD_INT 107
15888: PUSH
15889: LD_INT 108
15891: PUSH
15892: LD_INT 109
15894: PUSH
15895: LD_INT 110
15897: PUSH
15898: LD_INT 111
15900: PUSH
15901: LD_INT 112
15903: PUSH
15904: LD_INT 114
15906: PUSH
15907: LD_INT 116
15909: PUSH
15910: LD_INT 117
15912: PUSH
15913: LD_INT 118
15915: PUSH
15916: EMPTY
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: ST_TO_ADDR
15938: GO 17833
15940: LD_INT 11
15942: DOUBLE
15943: EQUAL
15944: IFTRUE 15948
15946: GO 16152
15948: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
15949: LD_ADDR_VAR 0 2
15953: PUSH
15954: LD_INT 2
15956: PUSH
15957: LD_INT 3
15959: PUSH
15960: LD_INT 4
15962: PUSH
15963: LD_INT 5
15965: PUSH
15966: LD_INT 6
15968: PUSH
15969: LD_INT 7
15971: PUSH
15972: LD_INT 8
15974: PUSH
15975: LD_INT 9
15977: PUSH
15978: LD_INT 10
15980: PUSH
15981: LD_INT 11
15983: PUSH
15984: LD_INT 12
15986: PUSH
15987: LD_INT 13
15989: PUSH
15990: LD_INT 14
15992: PUSH
15993: LD_INT 15
15995: PUSH
15996: LD_INT 16
15998: PUSH
15999: LD_INT 17
16001: PUSH
16002: LD_INT 18
16004: PUSH
16005: LD_INT 19
16007: PUSH
16008: LD_INT 20
16010: PUSH
16011: LD_INT 21
16013: PUSH
16014: LD_INT 22
16016: PUSH
16017: LD_INT 23
16019: PUSH
16020: LD_INT 24
16022: PUSH
16023: LD_INT 25
16025: PUSH
16026: LD_INT 26
16028: PUSH
16029: LD_INT 28
16031: PUSH
16032: LD_INT 30
16034: PUSH
16035: LD_INT 31
16037: PUSH
16038: LD_INT 32
16040: PUSH
16041: LD_INT 34
16043: PUSH
16044: LD_INT 36
16046: PUSH
16047: EMPTY
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: LIST
16053: LIST
16054: LIST
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: PUSH
16080: LD_INT 101
16082: PUSH
16083: LD_INT 102
16085: PUSH
16086: LD_INT 103
16088: PUSH
16089: LD_INT 104
16091: PUSH
16092: LD_INT 105
16094: PUSH
16095: LD_INT 106
16097: PUSH
16098: LD_INT 107
16100: PUSH
16101: LD_INT 108
16103: PUSH
16104: LD_INT 109
16106: PUSH
16107: LD_INT 110
16109: PUSH
16110: LD_INT 111
16112: PUSH
16113: LD_INT 112
16115: PUSH
16116: LD_INT 114
16118: PUSH
16119: LD_INT 116
16121: PUSH
16122: LD_INT 117
16124: PUSH
16125: LD_INT 118
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: PUSH
16146: EMPTY
16147: LIST
16148: LIST
16149: ST_TO_ADDR
16150: GO 17833
16152: LD_INT 12
16154: DOUBLE
16155: EQUAL
16156: IFTRUE 16160
16158: GO 16380
16160: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
16161: LD_ADDR_VAR 0 2
16165: PUSH
16166: LD_INT 1
16168: PUSH
16169: LD_INT 2
16171: PUSH
16172: LD_INT 3
16174: PUSH
16175: LD_INT 4
16177: PUSH
16178: LD_INT 5
16180: PUSH
16181: LD_INT 6
16183: PUSH
16184: LD_INT 7
16186: PUSH
16187: LD_INT 8
16189: PUSH
16190: LD_INT 9
16192: PUSH
16193: LD_INT 10
16195: PUSH
16196: LD_INT 11
16198: PUSH
16199: LD_INT 12
16201: PUSH
16202: LD_INT 13
16204: PUSH
16205: LD_INT 14
16207: PUSH
16208: LD_INT 15
16210: PUSH
16211: LD_INT 16
16213: PUSH
16214: LD_INT 17
16216: PUSH
16217: LD_INT 18
16219: PUSH
16220: LD_INT 19
16222: PUSH
16223: LD_INT 20
16225: PUSH
16226: LD_INT 21
16228: PUSH
16229: LD_INT 22
16231: PUSH
16232: LD_INT 23
16234: PUSH
16235: LD_INT 24
16237: PUSH
16238: LD_INT 25
16240: PUSH
16241: LD_INT 26
16243: PUSH
16244: LD_INT 27
16246: PUSH
16247: LD_INT 28
16249: PUSH
16250: LD_INT 30
16252: PUSH
16253: LD_INT 31
16255: PUSH
16256: LD_INT 32
16258: PUSH
16259: LD_INT 33
16261: PUSH
16262: LD_INT 34
16264: PUSH
16265: LD_INT 36
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: LIST
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: LIST
16282: LIST
16283: LIST
16284: LIST
16285: LIST
16286: LIST
16287: LIST
16288: LIST
16289: LIST
16290: LIST
16291: LIST
16292: LIST
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: PUSH
16304: LD_INT 101
16306: PUSH
16307: LD_INT 102
16309: PUSH
16310: LD_INT 103
16312: PUSH
16313: LD_INT 104
16315: PUSH
16316: LD_INT 105
16318: PUSH
16319: LD_INT 106
16321: PUSH
16322: LD_INT 107
16324: PUSH
16325: LD_INT 108
16327: PUSH
16328: LD_INT 109
16330: PUSH
16331: LD_INT 110
16333: PUSH
16334: LD_INT 111
16336: PUSH
16337: LD_INT 112
16339: PUSH
16340: LD_INT 113
16342: PUSH
16343: LD_INT 114
16345: PUSH
16346: LD_INT 116
16348: PUSH
16349: LD_INT 117
16351: PUSH
16352: LD_INT 118
16354: PUSH
16355: EMPTY
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: PUSH
16374: EMPTY
16375: LIST
16376: LIST
16377: ST_TO_ADDR
16378: GO 17833
16380: LD_INT 13
16382: DOUBLE
16383: EQUAL
16384: IFTRUE 16388
16386: GO 16596
16388: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
16389: LD_ADDR_VAR 0 2
16393: PUSH
16394: LD_INT 1
16396: PUSH
16397: LD_INT 2
16399: PUSH
16400: LD_INT 3
16402: PUSH
16403: LD_INT 4
16405: PUSH
16406: LD_INT 5
16408: PUSH
16409: LD_INT 8
16411: PUSH
16412: LD_INT 9
16414: PUSH
16415: LD_INT 10
16417: PUSH
16418: LD_INT 11
16420: PUSH
16421: LD_INT 12
16423: PUSH
16424: LD_INT 14
16426: PUSH
16427: LD_INT 15
16429: PUSH
16430: LD_INT 16
16432: PUSH
16433: LD_INT 17
16435: PUSH
16436: LD_INT 18
16438: PUSH
16439: LD_INT 19
16441: PUSH
16442: LD_INT 20
16444: PUSH
16445: LD_INT 21
16447: PUSH
16448: LD_INT 22
16450: PUSH
16451: LD_INT 23
16453: PUSH
16454: LD_INT 24
16456: PUSH
16457: LD_INT 25
16459: PUSH
16460: LD_INT 26
16462: PUSH
16463: LD_INT 27
16465: PUSH
16466: LD_INT 28
16468: PUSH
16469: LD_INT 30
16471: PUSH
16472: LD_INT 31
16474: PUSH
16475: LD_INT 32
16477: PUSH
16478: LD_INT 33
16480: PUSH
16481: LD_INT 34
16483: PUSH
16484: LD_INT 36
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: LIST
16491: LIST
16492: LIST
16493: LIST
16494: LIST
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: LIST
16500: LIST
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: PUSH
16520: LD_INT 101
16522: PUSH
16523: LD_INT 102
16525: PUSH
16526: LD_INT 103
16528: PUSH
16529: LD_INT 104
16531: PUSH
16532: LD_INT 105
16534: PUSH
16535: LD_INT 106
16537: PUSH
16538: LD_INT 107
16540: PUSH
16541: LD_INT 108
16543: PUSH
16544: LD_INT 109
16546: PUSH
16547: LD_INT 110
16549: PUSH
16550: LD_INT 111
16552: PUSH
16553: LD_INT 112
16555: PUSH
16556: LD_INT 113
16558: PUSH
16559: LD_INT 114
16561: PUSH
16562: LD_INT 116
16564: PUSH
16565: LD_INT 117
16567: PUSH
16568: LD_INT 118
16570: PUSH
16571: EMPTY
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: PUSH
16590: EMPTY
16591: LIST
16592: LIST
16593: ST_TO_ADDR
16594: GO 17833
16596: LD_INT 14
16598: DOUBLE
16599: EQUAL
16600: IFTRUE 16604
16602: GO 16828
16604: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
16605: LD_ADDR_VAR 0 2
16609: PUSH
16610: LD_INT 1
16612: PUSH
16613: LD_INT 2
16615: PUSH
16616: LD_INT 3
16618: PUSH
16619: LD_INT 4
16621: PUSH
16622: LD_INT 5
16624: PUSH
16625: LD_INT 6
16627: PUSH
16628: LD_INT 7
16630: PUSH
16631: LD_INT 8
16633: PUSH
16634: LD_INT 9
16636: PUSH
16637: LD_INT 10
16639: PUSH
16640: LD_INT 11
16642: PUSH
16643: LD_INT 12
16645: PUSH
16646: LD_INT 13
16648: PUSH
16649: LD_INT 14
16651: PUSH
16652: LD_INT 15
16654: PUSH
16655: LD_INT 16
16657: PUSH
16658: LD_INT 17
16660: PUSH
16661: LD_INT 18
16663: PUSH
16664: LD_INT 19
16666: PUSH
16667: LD_INT 20
16669: PUSH
16670: LD_INT 21
16672: PUSH
16673: LD_INT 22
16675: PUSH
16676: LD_INT 23
16678: PUSH
16679: LD_INT 24
16681: PUSH
16682: LD_INT 25
16684: PUSH
16685: LD_INT 26
16687: PUSH
16688: LD_INT 27
16690: PUSH
16691: LD_INT 28
16693: PUSH
16694: LD_INT 29
16696: PUSH
16697: LD_INT 30
16699: PUSH
16700: LD_INT 31
16702: PUSH
16703: LD_INT 32
16705: PUSH
16706: LD_INT 33
16708: PUSH
16709: LD_INT 34
16711: PUSH
16712: LD_INT 36
16714: PUSH
16715: EMPTY
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: LIST
16734: LIST
16735: LIST
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: LIST
16744: LIST
16745: LIST
16746: LIST
16747: LIST
16748: LIST
16749: LIST
16750: LIST
16751: PUSH
16752: LD_INT 101
16754: PUSH
16755: LD_INT 102
16757: PUSH
16758: LD_INT 103
16760: PUSH
16761: LD_INT 104
16763: PUSH
16764: LD_INT 105
16766: PUSH
16767: LD_INT 106
16769: PUSH
16770: LD_INT 107
16772: PUSH
16773: LD_INT 108
16775: PUSH
16776: LD_INT 109
16778: PUSH
16779: LD_INT 110
16781: PUSH
16782: LD_INT 111
16784: PUSH
16785: LD_INT 112
16787: PUSH
16788: LD_INT 113
16790: PUSH
16791: LD_INT 114
16793: PUSH
16794: LD_INT 116
16796: PUSH
16797: LD_INT 117
16799: PUSH
16800: LD_INT 118
16802: PUSH
16803: EMPTY
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: PUSH
16822: EMPTY
16823: LIST
16824: LIST
16825: ST_TO_ADDR
16826: GO 17833
16828: LD_INT 15
16830: DOUBLE
16831: EQUAL
16832: IFTRUE 16836
16834: GO 17060
16836: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
16837: LD_ADDR_VAR 0 2
16841: PUSH
16842: LD_INT 1
16844: PUSH
16845: LD_INT 2
16847: PUSH
16848: LD_INT 3
16850: PUSH
16851: LD_INT 4
16853: PUSH
16854: LD_INT 5
16856: PUSH
16857: LD_INT 6
16859: PUSH
16860: LD_INT 7
16862: PUSH
16863: LD_INT 8
16865: PUSH
16866: LD_INT 9
16868: PUSH
16869: LD_INT 10
16871: PUSH
16872: LD_INT 11
16874: PUSH
16875: LD_INT 12
16877: PUSH
16878: LD_INT 13
16880: PUSH
16881: LD_INT 14
16883: PUSH
16884: LD_INT 15
16886: PUSH
16887: LD_INT 16
16889: PUSH
16890: LD_INT 17
16892: PUSH
16893: LD_INT 18
16895: PUSH
16896: LD_INT 19
16898: PUSH
16899: LD_INT 20
16901: PUSH
16902: LD_INT 21
16904: PUSH
16905: LD_INT 22
16907: PUSH
16908: LD_INT 23
16910: PUSH
16911: LD_INT 24
16913: PUSH
16914: LD_INT 25
16916: PUSH
16917: LD_INT 26
16919: PUSH
16920: LD_INT 27
16922: PUSH
16923: LD_INT 28
16925: PUSH
16926: LD_INT 29
16928: PUSH
16929: LD_INT 30
16931: PUSH
16932: LD_INT 31
16934: PUSH
16935: LD_INT 32
16937: PUSH
16938: LD_INT 33
16940: PUSH
16941: LD_INT 34
16943: PUSH
16944: LD_INT 36
16946: PUSH
16947: EMPTY
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: PUSH
16984: LD_INT 101
16986: PUSH
16987: LD_INT 102
16989: PUSH
16990: LD_INT 103
16992: PUSH
16993: LD_INT 104
16995: PUSH
16996: LD_INT 105
16998: PUSH
16999: LD_INT 106
17001: PUSH
17002: LD_INT 107
17004: PUSH
17005: LD_INT 108
17007: PUSH
17008: LD_INT 109
17010: PUSH
17011: LD_INT 110
17013: PUSH
17014: LD_INT 111
17016: PUSH
17017: LD_INT 112
17019: PUSH
17020: LD_INT 113
17022: PUSH
17023: LD_INT 114
17025: PUSH
17026: LD_INT 116
17028: PUSH
17029: LD_INT 117
17031: PUSH
17032: LD_INT 118
17034: PUSH
17035: EMPTY
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: PUSH
17054: EMPTY
17055: LIST
17056: LIST
17057: ST_TO_ADDR
17058: GO 17833
17060: LD_INT 16
17062: DOUBLE
17063: EQUAL
17064: IFTRUE 17068
17066: GO 17204
17068: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
17069: LD_ADDR_VAR 0 2
17073: PUSH
17074: LD_INT 2
17076: PUSH
17077: LD_INT 4
17079: PUSH
17080: LD_INT 5
17082: PUSH
17083: LD_INT 7
17085: PUSH
17086: LD_INT 11
17088: PUSH
17089: LD_INT 12
17091: PUSH
17092: LD_INT 15
17094: PUSH
17095: LD_INT 16
17097: PUSH
17098: LD_INT 20
17100: PUSH
17101: LD_INT 21
17103: PUSH
17104: LD_INT 22
17106: PUSH
17107: LD_INT 23
17109: PUSH
17110: LD_INT 25
17112: PUSH
17113: LD_INT 26
17115: PUSH
17116: LD_INT 30
17118: PUSH
17119: LD_INT 31
17121: PUSH
17122: LD_INT 32
17124: PUSH
17125: LD_INT 33
17127: PUSH
17128: LD_INT 34
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: LIST
17137: LIST
17138: LIST
17139: LIST
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: LIST
17146: LIST
17147: LIST
17148: LIST
17149: LIST
17150: LIST
17151: PUSH
17152: LD_INT 101
17154: PUSH
17155: LD_INT 102
17157: PUSH
17158: LD_INT 103
17160: PUSH
17161: LD_INT 106
17163: PUSH
17164: LD_INT 108
17166: PUSH
17167: LD_INT 112
17169: PUSH
17170: LD_INT 113
17172: PUSH
17173: LD_INT 114
17175: PUSH
17176: LD_INT 116
17178: PUSH
17179: LD_INT 117
17181: PUSH
17182: LD_INT 118
17184: PUSH
17185: EMPTY
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: ST_TO_ADDR
17202: GO 17833
17204: LD_INT 17
17206: DOUBLE
17207: EQUAL
17208: IFTRUE 17212
17210: GO 17436
17212: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
17213: LD_ADDR_VAR 0 2
17217: PUSH
17218: LD_INT 1
17220: PUSH
17221: LD_INT 2
17223: PUSH
17224: LD_INT 3
17226: PUSH
17227: LD_INT 4
17229: PUSH
17230: LD_INT 5
17232: PUSH
17233: LD_INT 6
17235: PUSH
17236: LD_INT 7
17238: PUSH
17239: LD_INT 8
17241: PUSH
17242: LD_INT 9
17244: PUSH
17245: LD_INT 10
17247: PUSH
17248: LD_INT 11
17250: PUSH
17251: LD_INT 12
17253: PUSH
17254: LD_INT 13
17256: PUSH
17257: LD_INT 14
17259: PUSH
17260: LD_INT 15
17262: PUSH
17263: LD_INT 16
17265: PUSH
17266: LD_INT 17
17268: PUSH
17269: LD_INT 18
17271: PUSH
17272: LD_INT 19
17274: PUSH
17275: LD_INT 20
17277: PUSH
17278: LD_INT 21
17280: PUSH
17281: LD_INT 22
17283: PUSH
17284: LD_INT 23
17286: PUSH
17287: LD_INT 24
17289: PUSH
17290: LD_INT 25
17292: PUSH
17293: LD_INT 26
17295: PUSH
17296: LD_INT 27
17298: PUSH
17299: LD_INT 28
17301: PUSH
17302: LD_INT 29
17304: PUSH
17305: LD_INT 30
17307: PUSH
17308: LD_INT 31
17310: PUSH
17311: LD_INT 32
17313: PUSH
17314: LD_INT 33
17316: PUSH
17317: LD_INT 34
17319: PUSH
17320: LD_INT 36
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: LIST
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: LIST
17349: LIST
17350: LIST
17351: LIST
17352: LIST
17353: LIST
17354: LIST
17355: LIST
17356: LIST
17357: LIST
17358: LIST
17359: PUSH
17360: LD_INT 101
17362: PUSH
17363: LD_INT 102
17365: PUSH
17366: LD_INT 103
17368: PUSH
17369: LD_INT 104
17371: PUSH
17372: LD_INT 105
17374: PUSH
17375: LD_INT 106
17377: PUSH
17378: LD_INT 107
17380: PUSH
17381: LD_INT 108
17383: PUSH
17384: LD_INT 109
17386: PUSH
17387: LD_INT 110
17389: PUSH
17390: LD_INT 111
17392: PUSH
17393: LD_INT 112
17395: PUSH
17396: LD_INT 113
17398: PUSH
17399: LD_INT 114
17401: PUSH
17402: LD_INT 116
17404: PUSH
17405: LD_INT 117
17407: PUSH
17408: LD_INT 118
17410: PUSH
17411: EMPTY
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: ST_TO_ADDR
17434: GO 17833
17436: LD_INT 18
17438: DOUBLE
17439: EQUAL
17440: IFTRUE 17444
17442: GO 17592
17444: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
17445: LD_ADDR_VAR 0 2
17449: PUSH
17450: LD_INT 2
17452: PUSH
17453: LD_INT 4
17455: PUSH
17456: LD_INT 5
17458: PUSH
17459: LD_INT 7
17461: PUSH
17462: LD_INT 11
17464: PUSH
17465: LD_INT 12
17467: PUSH
17468: LD_INT 15
17470: PUSH
17471: LD_INT 16
17473: PUSH
17474: LD_INT 20
17476: PUSH
17477: LD_INT 21
17479: PUSH
17480: LD_INT 22
17482: PUSH
17483: LD_INT 23
17485: PUSH
17486: LD_INT 25
17488: PUSH
17489: LD_INT 26
17491: PUSH
17492: LD_INT 30
17494: PUSH
17495: LD_INT 31
17497: PUSH
17498: LD_INT 32
17500: PUSH
17501: LD_INT 33
17503: PUSH
17504: LD_INT 34
17506: PUSH
17507: LD_INT 35
17509: PUSH
17510: LD_INT 36
17512: PUSH
17513: EMPTY
17514: LIST
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: LIST
17534: LIST
17535: PUSH
17536: LD_INT 101
17538: PUSH
17539: LD_INT 102
17541: PUSH
17542: LD_INT 103
17544: PUSH
17545: LD_INT 106
17547: PUSH
17548: LD_INT 108
17550: PUSH
17551: LD_INT 112
17553: PUSH
17554: LD_INT 113
17556: PUSH
17557: LD_INT 114
17559: PUSH
17560: LD_INT 115
17562: PUSH
17563: LD_INT 116
17565: PUSH
17566: LD_INT 117
17568: PUSH
17569: LD_INT 118
17571: PUSH
17572: EMPTY
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: LIST
17582: LIST
17583: LIST
17584: LIST
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: ST_TO_ADDR
17590: GO 17833
17592: LD_INT 19
17594: DOUBLE
17595: EQUAL
17596: IFTRUE 17600
17598: GO 17832
17600: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
17601: LD_ADDR_VAR 0 2
17605: PUSH
17606: LD_INT 1
17608: PUSH
17609: LD_INT 2
17611: PUSH
17612: LD_INT 3
17614: PUSH
17615: LD_INT 4
17617: PUSH
17618: LD_INT 5
17620: PUSH
17621: LD_INT 6
17623: PUSH
17624: LD_INT 7
17626: PUSH
17627: LD_INT 8
17629: PUSH
17630: LD_INT 9
17632: PUSH
17633: LD_INT 10
17635: PUSH
17636: LD_INT 11
17638: PUSH
17639: LD_INT 12
17641: PUSH
17642: LD_INT 13
17644: PUSH
17645: LD_INT 14
17647: PUSH
17648: LD_INT 15
17650: PUSH
17651: LD_INT 16
17653: PUSH
17654: LD_INT 17
17656: PUSH
17657: LD_INT 18
17659: PUSH
17660: LD_INT 19
17662: PUSH
17663: LD_INT 20
17665: PUSH
17666: LD_INT 21
17668: PUSH
17669: LD_INT 22
17671: PUSH
17672: LD_INT 23
17674: PUSH
17675: LD_INT 24
17677: PUSH
17678: LD_INT 25
17680: PUSH
17681: LD_INT 26
17683: PUSH
17684: LD_INT 27
17686: PUSH
17687: LD_INT 28
17689: PUSH
17690: LD_INT 29
17692: PUSH
17693: LD_INT 30
17695: PUSH
17696: LD_INT 31
17698: PUSH
17699: LD_INT 32
17701: PUSH
17702: LD_INT 33
17704: PUSH
17705: LD_INT 34
17707: PUSH
17708: LD_INT 35
17710: PUSH
17711: LD_INT 36
17713: PUSH
17714: EMPTY
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: LIST
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: PUSH
17752: LD_INT 101
17754: PUSH
17755: LD_INT 102
17757: PUSH
17758: LD_INT 103
17760: PUSH
17761: LD_INT 104
17763: PUSH
17764: LD_INT 105
17766: PUSH
17767: LD_INT 106
17769: PUSH
17770: LD_INT 107
17772: PUSH
17773: LD_INT 108
17775: PUSH
17776: LD_INT 109
17778: PUSH
17779: LD_INT 110
17781: PUSH
17782: LD_INT 111
17784: PUSH
17785: LD_INT 112
17787: PUSH
17788: LD_INT 113
17790: PUSH
17791: LD_INT 114
17793: PUSH
17794: LD_INT 115
17796: PUSH
17797: LD_INT 116
17799: PUSH
17800: LD_INT 117
17802: PUSH
17803: LD_INT 118
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: LIST
17810: LIST
17811: LIST
17812: LIST
17813: LIST
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: LIST
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: ST_TO_ADDR
17830: GO 17833
17832: POP
// end else
17833: GO 18064
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
17835: LD_ADDR_VAR 0 2
17839: PUSH
17840: LD_INT 1
17842: PUSH
17843: LD_INT 2
17845: PUSH
17846: LD_INT 3
17848: PUSH
17849: LD_INT 4
17851: PUSH
17852: LD_INT 5
17854: PUSH
17855: LD_INT 6
17857: PUSH
17858: LD_INT 7
17860: PUSH
17861: LD_INT 8
17863: PUSH
17864: LD_INT 9
17866: PUSH
17867: LD_INT 10
17869: PUSH
17870: LD_INT 11
17872: PUSH
17873: LD_INT 12
17875: PUSH
17876: LD_INT 13
17878: PUSH
17879: LD_INT 14
17881: PUSH
17882: LD_INT 15
17884: PUSH
17885: LD_INT 16
17887: PUSH
17888: LD_INT 17
17890: PUSH
17891: LD_INT 18
17893: PUSH
17894: LD_INT 19
17896: PUSH
17897: LD_INT 20
17899: PUSH
17900: LD_INT 21
17902: PUSH
17903: LD_INT 22
17905: PUSH
17906: LD_INT 23
17908: PUSH
17909: LD_INT 24
17911: PUSH
17912: LD_INT 25
17914: PUSH
17915: LD_INT 26
17917: PUSH
17918: LD_INT 27
17920: PUSH
17921: LD_INT 28
17923: PUSH
17924: LD_INT 29
17926: PUSH
17927: LD_INT 30
17929: PUSH
17930: LD_INT 31
17932: PUSH
17933: LD_INT 32
17935: PUSH
17936: LD_INT 33
17938: PUSH
17939: LD_INT 34
17941: PUSH
17942: LD_INT 35
17944: PUSH
17945: LD_INT 36
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: LIST
17952: LIST
17953: LIST
17954: LIST
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: LIST
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: PUSH
17986: LD_INT 101
17988: PUSH
17989: LD_INT 102
17991: PUSH
17992: LD_INT 103
17994: PUSH
17995: LD_INT 104
17997: PUSH
17998: LD_INT 105
18000: PUSH
18001: LD_INT 106
18003: PUSH
18004: LD_INT 107
18006: PUSH
18007: LD_INT 108
18009: PUSH
18010: LD_INT 109
18012: PUSH
18013: LD_INT 110
18015: PUSH
18016: LD_INT 111
18018: PUSH
18019: LD_INT 112
18021: PUSH
18022: LD_INT 113
18024: PUSH
18025: LD_INT 114
18027: PUSH
18028: LD_INT 115
18030: PUSH
18031: LD_INT 116
18033: PUSH
18034: LD_INT 117
18036: PUSH
18037: LD_INT 118
18039: PUSH
18040: EMPTY
18041: LIST
18042: LIST
18043: LIST
18044: LIST
18045: LIST
18046: LIST
18047: LIST
18048: LIST
18049: LIST
18050: LIST
18051: LIST
18052: LIST
18053: LIST
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: ST_TO_ADDR
// if result then
18064: LD_VAR 0 2
18068: IFFALSE 18854
// begin normal :=  ;
18070: LD_ADDR_VAR 0 5
18074: PUSH
18075: LD_STRING 
18077: ST_TO_ADDR
// hardcore :=  ;
18078: LD_ADDR_VAR 0 6
18082: PUSH
18083: LD_STRING 
18085: ST_TO_ADDR
// active :=  ;
18086: LD_ADDR_VAR 0 7
18090: PUSH
18091: LD_STRING 
18093: ST_TO_ADDR
// for i = 1 to normalCounter do
18094: LD_ADDR_VAR 0 8
18098: PUSH
18099: DOUBLE
18100: LD_INT 1
18102: DEC
18103: ST_TO_ADDR
18104: LD_EXP 34
18108: PUSH
18109: FOR_TO
18110: IFFALSE 18211
// begin tmp := 0 ;
18112: LD_ADDR_VAR 0 3
18116: PUSH
18117: LD_STRING 0
18119: ST_TO_ADDR
// if result [ 1 ] then
18120: LD_VAR 0 2
18124: PUSH
18125: LD_INT 1
18127: ARRAY
18128: IFFALSE 18193
// if result [ 1 ] [ 1 ] = i then
18130: LD_VAR 0 2
18134: PUSH
18135: LD_INT 1
18137: ARRAY
18138: PUSH
18139: LD_INT 1
18141: ARRAY
18142: PUSH
18143: LD_VAR 0 8
18147: EQUAL
18148: IFFALSE 18193
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
18150: LD_ADDR_VAR 0 2
18154: PUSH
18155: LD_VAR 0 2
18159: PPUSH
18160: LD_INT 1
18162: PPUSH
18163: LD_VAR 0 2
18167: PUSH
18168: LD_INT 1
18170: ARRAY
18171: PPUSH
18172: LD_INT 1
18174: PPUSH
18175: CALL_OW 3
18179: PPUSH
18180: CALL_OW 1
18184: ST_TO_ADDR
// tmp := 1 ;
18185: LD_ADDR_VAR 0 3
18189: PUSH
18190: LD_STRING 1
18192: ST_TO_ADDR
// end ; normal := normal & tmp ;
18193: LD_ADDR_VAR 0 5
18197: PUSH
18198: LD_VAR 0 5
18202: PUSH
18203: LD_VAR 0 3
18207: STR
18208: ST_TO_ADDR
// end ;
18209: GO 18109
18211: POP
18212: POP
// for i = 1 to hardcoreCounter do
18213: LD_ADDR_VAR 0 8
18217: PUSH
18218: DOUBLE
18219: LD_INT 1
18221: DEC
18222: ST_TO_ADDR
18223: LD_EXP 35
18227: PUSH
18228: FOR_TO
18229: IFFALSE 18334
// begin tmp := 0 ;
18231: LD_ADDR_VAR 0 3
18235: PUSH
18236: LD_STRING 0
18238: ST_TO_ADDR
// if result [ 2 ] then
18239: LD_VAR 0 2
18243: PUSH
18244: LD_INT 2
18246: ARRAY
18247: IFFALSE 18316
// if result [ 2 ] [ 1 ] = 100 + i then
18249: LD_VAR 0 2
18253: PUSH
18254: LD_INT 2
18256: ARRAY
18257: PUSH
18258: LD_INT 1
18260: ARRAY
18261: PUSH
18262: LD_INT 100
18264: PUSH
18265: LD_VAR 0 8
18269: PLUS
18270: EQUAL
18271: IFFALSE 18316
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
18273: LD_ADDR_VAR 0 2
18277: PUSH
18278: LD_VAR 0 2
18282: PPUSH
18283: LD_INT 2
18285: PPUSH
18286: LD_VAR 0 2
18290: PUSH
18291: LD_INT 2
18293: ARRAY
18294: PPUSH
18295: LD_INT 1
18297: PPUSH
18298: CALL_OW 3
18302: PPUSH
18303: CALL_OW 1
18307: ST_TO_ADDR
// tmp := 1 ;
18308: LD_ADDR_VAR 0 3
18312: PUSH
18313: LD_STRING 1
18315: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
18316: LD_ADDR_VAR 0 6
18320: PUSH
18321: LD_VAR 0 6
18325: PUSH
18326: LD_VAR 0 3
18330: STR
18331: ST_TO_ADDR
// end ;
18332: GO 18228
18334: POP
18335: POP
// if isGameLoad then
18336: LD_VAR 0 1
18340: IFFALSE 18815
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
18342: LD_ADDR_VAR 0 4
18346: PUSH
18347: LD_EXP 38
18351: PUSH
18352: LD_EXP 37
18356: PUSH
18357: LD_EXP 39
18361: PUSH
18362: LD_EXP 36
18366: PUSH
18367: LD_EXP 40
18371: PUSH
18372: LD_EXP 41
18376: PUSH
18377: LD_EXP 42
18381: PUSH
18382: LD_EXP 43
18386: PUSH
18387: LD_EXP 44
18391: PUSH
18392: LD_EXP 45
18396: PUSH
18397: LD_EXP 46
18401: PUSH
18402: LD_EXP 47
18406: PUSH
18407: LD_EXP 48
18411: PUSH
18412: LD_EXP 49
18416: PUSH
18417: LD_EXP 57
18421: PUSH
18422: LD_EXP 58
18426: PUSH
18427: LD_EXP 59
18431: PUSH
18432: LD_EXP 60
18436: PUSH
18437: LD_EXP 62
18441: PUSH
18442: LD_EXP 63
18446: PUSH
18447: LD_EXP 64
18451: PUSH
18452: LD_EXP 67
18456: PUSH
18457: LD_EXP 69
18461: PUSH
18462: LD_EXP 70
18466: PUSH
18467: LD_EXP 71
18471: PUSH
18472: LD_EXP 73
18476: PUSH
18477: LD_EXP 74
18481: PUSH
18482: LD_EXP 77
18486: PUSH
18487: LD_EXP 78
18491: PUSH
18492: LD_EXP 79
18496: PUSH
18497: LD_EXP 80
18501: PUSH
18502: LD_EXP 81
18506: PUSH
18507: LD_EXP 82
18511: PUSH
18512: LD_EXP 83
18516: PUSH
18517: LD_EXP 84
18521: PUSH
18522: LD_EXP 85
18526: PUSH
18527: LD_EXP 50
18531: PUSH
18532: LD_EXP 51
18536: PUSH
18537: LD_EXP 54
18541: PUSH
18542: LD_EXP 55
18546: PUSH
18547: LD_EXP 56
18551: PUSH
18552: LD_EXP 52
18556: PUSH
18557: LD_EXP 53
18561: PUSH
18562: LD_EXP 61
18566: PUSH
18567: LD_EXP 65
18571: PUSH
18572: LD_EXP 66
18576: PUSH
18577: LD_EXP 68
18581: PUSH
18582: LD_EXP 72
18586: PUSH
18587: LD_EXP 75
18591: PUSH
18592: LD_EXP 76
18596: PUSH
18597: LD_EXP 86
18601: PUSH
18602: LD_EXP 87
18606: PUSH
18607: LD_EXP 88
18611: PUSH
18612: LD_EXP 89
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: LIST
18621: LIST
18622: LIST
18623: LIST
18624: LIST
18625: LIST
18626: LIST
18627: LIST
18628: LIST
18629: LIST
18630: LIST
18631: LIST
18632: LIST
18633: LIST
18634: LIST
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: LIST
18670: LIST
18671: LIST
18672: ST_TO_ADDR
// tmp :=  ;
18673: LD_ADDR_VAR 0 3
18677: PUSH
18678: LD_STRING 
18680: ST_TO_ADDR
// for i = 1 to normalCounter do
18681: LD_ADDR_VAR 0 8
18685: PUSH
18686: DOUBLE
18687: LD_INT 1
18689: DEC
18690: ST_TO_ADDR
18691: LD_EXP 34
18695: PUSH
18696: FOR_TO
18697: IFFALSE 18733
// begin if flags [ i ] then
18699: LD_VAR 0 4
18703: PUSH
18704: LD_VAR 0 8
18708: ARRAY
18709: IFFALSE 18731
// tmp := tmp & i & ; ;
18711: LD_ADDR_VAR 0 3
18715: PUSH
18716: LD_VAR 0 3
18720: PUSH
18721: LD_VAR 0 8
18725: STR
18726: PUSH
18727: LD_STRING ;
18729: STR
18730: ST_TO_ADDR
// end ;
18731: GO 18696
18733: POP
18734: POP
// for i = 1 to hardcoreCounter do
18735: LD_ADDR_VAR 0 8
18739: PUSH
18740: DOUBLE
18741: LD_INT 1
18743: DEC
18744: ST_TO_ADDR
18745: LD_EXP 35
18749: PUSH
18750: FOR_TO
18751: IFFALSE 18797
// begin if flags [ normalCounter + i ] then
18753: LD_VAR 0 4
18757: PUSH
18758: LD_EXP 34
18762: PUSH
18763: LD_VAR 0 8
18767: PLUS
18768: ARRAY
18769: IFFALSE 18795
// tmp := tmp & ( 100 + i ) & ; ;
18771: LD_ADDR_VAR 0 3
18775: PUSH
18776: LD_VAR 0 3
18780: PUSH
18781: LD_INT 100
18783: PUSH
18784: LD_VAR 0 8
18788: PLUS
18789: STR
18790: PUSH
18791: LD_STRING ;
18793: STR
18794: ST_TO_ADDR
// end ;
18795: GO 18750
18797: POP
18798: POP
// if tmp then
18799: LD_VAR 0 3
18803: IFFALSE 18815
// active := tmp ;
18805: LD_ADDR_VAR 0 7
18809: PUSH
18810: LD_VAR 0 3
18814: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
18815: LD_STRING getStreamItemsFromMission("
18817: PUSH
18818: LD_VAR 0 5
18822: STR
18823: PUSH
18824: LD_STRING ","
18826: STR
18827: PUSH
18828: LD_VAR 0 6
18832: STR
18833: PUSH
18834: LD_STRING ","
18836: STR
18837: PUSH
18838: LD_VAR 0 7
18842: STR
18843: PUSH
18844: LD_STRING ")
18846: STR
18847: PPUSH
18848: CALL_OW 559
// end else
18852: GO 18861
// ToLua ( getStreamItemsFromMission("","","") ) ;
18854: LD_STRING getStreamItemsFromMission("","","")
18856: PPUSH
18857: CALL_OW 559
// end ;
18861: LD_VAR 0 2
18865: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
18866: LD_EXP 33
18870: PUSH
18871: LD_EXP 38
18875: AND
18876: IFFALSE 19000
18878: GO 18880
18880: DISABLE
18881: LD_INT 0
18883: PPUSH
18884: PPUSH
// begin enable ;
18885: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
18886: LD_ADDR_VAR 0 2
18890: PUSH
18891: LD_INT 22
18893: PUSH
18894: LD_OWVAR 2
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: PUSH
18903: LD_INT 2
18905: PUSH
18906: LD_INT 34
18908: PUSH
18909: LD_INT 7
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: PUSH
18916: LD_INT 34
18918: PUSH
18919: LD_INT 45
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: PUSH
18926: LD_INT 34
18928: PUSH
18929: LD_INT 28
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: PUSH
18936: LD_INT 34
18938: PUSH
18939: LD_INT 47
18941: PUSH
18942: EMPTY
18943: LIST
18944: LIST
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: PUSH
18953: EMPTY
18954: LIST
18955: LIST
18956: PPUSH
18957: CALL_OW 69
18961: ST_TO_ADDR
// if not tmp then
18962: LD_VAR 0 2
18966: NOT
18967: IFFALSE 18971
// exit ;
18969: GO 19000
// for i in tmp do
18971: LD_ADDR_VAR 0 1
18975: PUSH
18976: LD_VAR 0 2
18980: PUSH
18981: FOR_IN
18982: IFFALSE 18998
// begin SetLives ( i , 0 ) ;
18984: LD_VAR 0 1
18988: PPUSH
18989: LD_INT 0
18991: PPUSH
18992: CALL_OW 234
// end ;
18996: GO 18981
18998: POP
18999: POP
// end ;
19000: PPOPN 2
19002: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
19003: LD_EXP 33
19007: PUSH
19008: LD_EXP 39
19012: AND
19013: IFFALSE 19097
19015: GO 19017
19017: DISABLE
19018: LD_INT 0
19020: PPUSH
19021: PPUSH
// begin enable ;
19022: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
19023: LD_ADDR_VAR 0 2
19027: PUSH
19028: LD_INT 22
19030: PUSH
19031: LD_OWVAR 2
19035: PUSH
19036: EMPTY
19037: LIST
19038: LIST
19039: PUSH
19040: LD_INT 32
19042: PUSH
19043: LD_INT 3
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PUSH
19050: EMPTY
19051: LIST
19052: LIST
19053: PPUSH
19054: CALL_OW 69
19058: ST_TO_ADDR
// if not tmp then
19059: LD_VAR 0 2
19063: NOT
19064: IFFALSE 19068
// exit ;
19066: GO 19097
// for i in tmp do
19068: LD_ADDR_VAR 0 1
19072: PUSH
19073: LD_VAR 0 2
19077: PUSH
19078: FOR_IN
19079: IFFALSE 19095
// begin SetLives ( i , 0 ) ;
19081: LD_VAR 0 1
19085: PPUSH
19086: LD_INT 0
19088: PPUSH
19089: CALL_OW 234
// end ;
19093: GO 19078
19095: POP
19096: POP
// end ;
19097: PPOPN 2
19099: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
19100: LD_EXP 33
19104: PUSH
19105: LD_EXP 36
19109: AND
19110: IFFALSE 19203
19112: GO 19114
19114: DISABLE
19115: LD_INT 0
19117: PPUSH
// begin enable ;
19118: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
19119: LD_ADDR_VAR 0 1
19123: PUSH
19124: LD_INT 22
19126: PUSH
19127: LD_OWVAR 2
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: LD_INT 2
19138: PUSH
19139: LD_INT 25
19141: PUSH
19142: LD_INT 5
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: PUSH
19149: LD_INT 25
19151: PUSH
19152: LD_INT 9
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: PUSH
19159: LD_INT 25
19161: PUSH
19162: LD_INT 8
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: PPUSH
19179: CALL_OW 69
19183: PUSH
19184: FOR_IN
19185: IFFALSE 19201
// begin SetClass ( i , 1 ) ;
19187: LD_VAR 0 1
19191: PPUSH
19192: LD_INT 1
19194: PPUSH
19195: CALL_OW 336
// end ;
19199: GO 19184
19201: POP
19202: POP
// end ;
19203: PPOPN 1
19205: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
19206: LD_EXP 33
19210: PUSH
19211: LD_EXP 37
19215: AND
19216: PUSH
19217: LD_OWVAR 65
19221: PUSH
19222: LD_INT 7
19224: LESS
19225: AND
19226: IFFALSE 19240
19228: GO 19230
19230: DISABLE
// begin enable ;
19231: ENABLE
// game_speed := 7 ;
19232: LD_ADDR_OWVAR 65
19236: PUSH
19237: LD_INT 7
19239: ST_TO_ADDR
// end ;
19240: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
19241: LD_EXP 33
19245: PUSH
19246: LD_EXP 40
19250: AND
19251: IFFALSE 19453
19253: GO 19255
19255: DISABLE
19256: LD_INT 0
19258: PPUSH
19259: PPUSH
19260: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19261: LD_ADDR_VAR 0 3
19265: PUSH
19266: LD_INT 81
19268: PUSH
19269: LD_OWVAR 2
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: PUSH
19278: LD_INT 21
19280: PUSH
19281: LD_INT 1
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: PUSH
19288: EMPTY
19289: LIST
19290: LIST
19291: PPUSH
19292: CALL_OW 69
19296: ST_TO_ADDR
// if not tmp then
19297: LD_VAR 0 3
19301: NOT
19302: IFFALSE 19306
// exit ;
19304: GO 19453
// if tmp > 5 then
19306: LD_VAR 0 3
19310: PUSH
19311: LD_INT 5
19313: GREATER
19314: IFFALSE 19326
// k := 5 else
19316: LD_ADDR_VAR 0 2
19320: PUSH
19321: LD_INT 5
19323: ST_TO_ADDR
19324: GO 19336
// k := tmp ;
19326: LD_ADDR_VAR 0 2
19330: PUSH
19331: LD_VAR 0 3
19335: ST_TO_ADDR
// for i := 1 to k do
19336: LD_ADDR_VAR 0 1
19340: PUSH
19341: DOUBLE
19342: LD_INT 1
19344: DEC
19345: ST_TO_ADDR
19346: LD_VAR 0 2
19350: PUSH
19351: FOR_TO
19352: IFFALSE 19451
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
19354: LD_VAR 0 3
19358: PUSH
19359: LD_VAR 0 1
19363: ARRAY
19364: PPUSH
19365: LD_VAR 0 1
19369: PUSH
19370: LD_INT 4
19372: MOD
19373: PUSH
19374: LD_INT 1
19376: PLUS
19377: PPUSH
19378: CALL_OW 259
19382: PUSH
19383: LD_INT 10
19385: LESS
19386: IFFALSE 19449
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
19388: LD_VAR 0 3
19392: PUSH
19393: LD_VAR 0 1
19397: ARRAY
19398: PPUSH
19399: LD_VAR 0 1
19403: PUSH
19404: LD_INT 4
19406: MOD
19407: PUSH
19408: LD_INT 1
19410: PLUS
19411: PPUSH
19412: LD_VAR 0 3
19416: PUSH
19417: LD_VAR 0 1
19421: ARRAY
19422: PPUSH
19423: LD_VAR 0 1
19427: PUSH
19428: LD_INT 4
19430: MOD
19431: PUSH
19432: LD_INT 1
19434: PLUS
19435: PPUSH
19436: CALL_OW 259
19440: PUSH
19441: LD_INT 1
19443: PLUS
19444: PPUSH
19445: CALL_OW 237
19449: GO 19351
19451: POP
19452: POP
// end ;
19453: PPOPN 3
19455: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
19456: LD_EXP 33
19460: PUSH
19461: LD_EXP 41
19465: AND
19466: IFFALSE 19486
19468: GO 19470
19470: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
19471: LD_INT 4
19473: PPUSH
19474: LD_OWVAR 2
19478: PPUSH
19479: LD_INT 0
19481: PPUSH
19482: CALL_OW 324
19486: END
// every 0 0$1 trigger StreamModeActive and sShovel do
19487: LD_EXP 33
19491: PUSH
19492: LD_EXP 70
19496: AND
19497: IFFALSE 19517
19499: GO 19501
19501: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
19502: LD_INT 19
19504: PPUSH
19505: LD_OWVAR 2
19509: PPUSH
19510: LD_INT 0
19512: PPUSH
19513: CALL_OW 324
19517: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
19518: LD_EXP 33
19522: PUSH
19523: LD_EXP 42
19527: AND
19528: IFFALSE 19630
19530: GO 19532
19532: DISABLE
19533: LD_INT 0
19535: PPUSH
19536: PPUSH
// begin enable ;
19537: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
19538: LD_ADDR_VAR 0 2
19542: PUSH
19543: LD_INT 22
19545: PUSH
19546: LD_OWVAR 2
19550: PUSH
19551: EMPTY
19552: LIST
19553: LIST
19554: PUSH
19555: LD_INT 2
19557: PUSH
19558: LD_INT 34
19560: PUSH
19561: LD_INT 11
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: PUSH
19568: LD_INT 34
19570: PUSH
19571: LD_INT 30
19573: PUSH
19574: EMPTY
19575: LIST
19576: LIST
19577: PUSH
19578: EMPTY
19579: LIST
19580: LIST
19581: LIST
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: PPUSH
19587: CALL_OW 69
19591: ST_TO_ADDR
// if not tmp then
19592: LD_VAR 0 2
19596: NOT
19597: IFFALSE 19601
// exit ;
19599: GO 19630
// for i in tmp do
19601: LD_ADDR_VAR 0 1
19605: PUSH
19606: LD_VAR 0 2
19610: PUSH
19611: FOR_IN
19612: IFFALSE 19628
// begin SetLives ( i , 0 ) ;
19614: LD_VAR 0 1
19618: PPUSH
19619: LD_INT 0
19621: PPUSH
19622: CALL_OW 234
// end ;
19626: GO 19611
19628: POP
19629: POP
// end ;
19630: PPOPN 2
19632: END
// every 0 0$1 trigger StreamModeActive and sBunker do
19633: LD_EXP 33
19637: PUSH
19638: LD_EXP 43
19642: AND
19643: IFFALSE 19663
19645: GO 19647
19647: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
19648: LD_INT 32
19650: PPUSH
19651: LD_OWVAR 2
19655: PPUSH
19656: LD_INT 0
19658: PPUSH
19659: CALL_OW 324
19663: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
19664: LD_EXP 33
19668: PUSH
19669: LD_EXP 44
19673: AND
19674: IFFALSE 19855
19676: GO 19678
19678: DISABLE
19679: LD_INT 0
19681: PPUSH
19682: PPUSH
19683: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
19684: LD_ADDR_VAR 0 2
19688: PUSH
19689: LD_INT 22
19691: PUSH
19692: LD_OWVAR 2
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: PUSH
19701: LD_INT 33
19703: PUSH
19704: LD_INT 3
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: PPUSH
19715: CALL_OW 69
19719: ST_TO_ADDR
// if not tmp then
19720: LD_VAR 0 2
19724: NOT
19725: IFFALSE 19729
// exit ;
19727: GO 19855
// side := 0 ;
19729: LD_ADDR_VAR 0 3
19733: PUSH
19734: LD_INT 0
19736: ST_TO_ADDR
// for i := 1 to 8 do
19737: LD_ADDR_VAR 0 1
19741: PUSH
19742: DOUBLE
19743: LD_INT 1
19745: DEC
19746: ST_TO_ADDR
19747: LD_INT 8
19749: PUSH
19750: FOR_TO
19751: IFFALSE 19799
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
19753: LD_OWVAR 2
19757: PUSH
19758: LD_VAR 0 1
19762: NONEQUAL
19763: PUSH
19764: LD_OWVAR 2
19768: PPUSH
19769: LD_VAR 0 1
19773: PPUSH
19774: CALL_OW 81
19778: PUSH
19779: LD_INT 2
19781: EQUAL
19782: AND
19783: IFFALSE 19797
// begin side := i ;
19785: LD_ADDR_VAR 0 3
19789: PUSH
19790: LD_VAR 0 1
19794: ST_TO_ADDR
// break ;
19795: GO 19799
// end ;
19797: GO 19750
19799: POP
19800: POP
// if not side then
19801: LD_VAR 0 3
19805: NOT
19806: IFFALSE 19810
// exit ;
19808: GO 19855
// for i := 1 to tmp do
19810: LD_ADDR_VAR 0 1
19814: PUSH
19815: DOUBLE
19816: LD_INT 1
19818: DEC
19819: ST_TO_ADDR
19820: LD_VAR 0 2
19824: PUSH
19825: FOR_TO
19826: IFFALSE 19853
// if Prob ( 60 ) then
19828: LD_INT 60
19830: PPUSH
19831: CALL_OW 13
19835: IFFALSE 19851
// SetSide ( i , side ) ;
19837: LD_VAR 0 1
19841: PPUSH
19842: LD_VAR 0 3
19846: PPUSH
19847: CALL_OW 235
19851: GO 19825
19853: POP
19854: POP
// end ;
19855: PPOPN 3
19857: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
19858: LD_EXP 33
19862: PUSH
19863: LD_EXP 46
19867: AND
19868: IFFALSE 19987
19870: GO 19872
19872: DISABLE
19873: LD_INT 0
19875: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
19876: LD_ADDR_VAR 0 1
19880: PUSH
19881: LD_INT 22
19883: PUSH
19884: LD_OWVAR 2
19888: PUSH
19889: EMPTY
19890: LIST
19891: LIST
19892: PUSH
19893: LD_INT 21
19895: PUSH
19896: LD_INT 1
19898: PUSH
19899: EMPTY
19900: LIST
19901: LIST
19902: PUSH
19903: LD_INT 3
19905: PUSH
19906: LD_INT 23
19908: PUSH
19909: LD_INT 0
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: PUSH
19916: EMPTY
19917: LIST
19918: LIST
19919: PUSH
19920: EMPTY
19921: LIST
19922: LIST
19923: LIST
19924: PPUSH
19925: CALL_OW 69
19929: PUSH
19930: FOR_IN
19931: IFFALSE 19985
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
19933: LD_VAR 0 1
19937: PPUSH
19938: CALL_OW 257
19942: PUSH
19943: LD_INT 1
19945: PUSH
19946: LD_INT 2
19948: PUSH
19949: LD_INT 3
19951: PUSH
19952: LD_INT 4
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: IN
19961: IFFALSE 19983
// SetClass ( un , rand ( 1 , 4 ) ) ;
19963: LD_VAR 0 1
19967: PPUSH
19968: LD_INT 1
19970: PPUSH
19971: LD_INT 4
19973: PPUSH
19974: CALL_OW 12
19978: PPUSH
19979: CALL_OW 336
19983: GO 19930
19985: POP
19986: POP
// end ;
19987: PPOPN 1
19989: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
19990: LD_EXP 33
19994: PUSH
19995: LD_EXP 45
19999: AND
20000: IFFALSE 20079
20002: GO 20004
20004: DISABLE
20005: LD_INT 0
20007: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20008: LD_ADDR_VAR 0 1
20012: PUSH
20013: LD_INT 22
20015: PUSH
20016: LD_OWVAR 2
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: PUSH
20025: LD_INT 21
20027: PUSH
20028: LD_INT 3
20030: PUSH
20031: EMPTY
20032: LIST
20033: LIST
20034: PUSH
20035: EMPTY
20036: LIST
20037: LIST
20038: PPUSH
20039: CALL_OW 69
20043: ST_TO_ADDR
// if not tmp then
20044: LD_VAR 0 1
20048: NOT
20049: IFFALSE 20053
// exit ;
20051: GO 20079
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
20053: LD_VAR 0 1
20057: PUSH
20058: LD_INT 1
20060: PPUSH
20061: LD_VAR 0 1
20065: PPUSH
20066: CALL_OW 12
20070: ARRAY
20071: PPUSH
20072: LD_INT 100
20074: PPUSH
20075: CALL_OW 234
// end ;
20079: PPOPN 1
20081: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
20082: LD_EXP 33
20086: PUSH
20087: LD_EXP 47
20091: AND
20092: IFFALSE 20190
20094: GO 20096
20096: DISABLE
20097: LD_INT 0
20099: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20100: LD_ADDR_VAR 0 1
20104: PUSH
20105: LD_INT 22
20107: PUSH
20108: LD_OWVAR 2
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: PUSH
20117: LD_INT 21
20119: PUSH
20120: LD_INT 1
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: PPUSH
20131: CALL_OW 69
20135: ST_TO_ADDR
// if not tmp then
20136: LD_VAR 0 1
20140: NOT
20141: IFFALSE 20145
// exit ;
20143: GO 20190
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
20145: LD_VAR 0 1
20149: PUSH
20150: LD_INT 1
20152: PPUSH
20153: LD_VAR 0 1
20157: PPUSH
20158: CALL_OW 12
20162: ARRAY
20163: PPUSH
20164: LD_INT 1
20166: PPUSH
20167: LD_INT 4
20169: PPUSH
20170: CALL_OW 12
20174: PPUSH
20175: LD_INT 3000
20177: PPUSH
20178: LD_INT 9000
20180: PPUSH
20181: CALL_OW 12
20185: PPUSH
20186: CALL_OW 492
// end ;
20190: PPOPN 1
20192: END
// every 0 0$1 trigger StreamModeActive and sDepot do
20193: LD_EXP 33
20197: PUSH
20198: LD_EXP 48
20202: AND
20203: IFFALSE 20223
20205: GO 20207
20207: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
20208: LD_INT 1
20210: PPUSH
20211: LD_OWVAR 2
20215: PPUSH
20216: LD_INT 0
20218: PPUSH
20219: CALL_OW 324
20223: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
20224: LD_EXP 33
20228: PUSH
20229: LD_EXP 49
20233: AND
20234: IFFALSE 20317
20236: GO 20238
20238: DISABLE
20239: LD_INT 0
20241: PPUSH
20242: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20243: LD_ADDR_VAR 0 2
20247: PUSH
20248: LD_INT 22
20250: PUSH
20251: LD_OWVAR 2
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: PUSH
20260: LD_INT 21
20262: PUSH
20263: LD_INT 3
20265: PUSH
20266: EMPTY
20267: LIST
20268: LIST
20269: PUSH
20270: EMPTY
20271: LIST
20272: LIST
20273: PPUSH
20274: CALL_OW 69
20278: ST_TO_ADDR
// if not tmp then
20279: LD_VAR 0 2
20283: NOT
20284: IFFALSE 20288
// exit ;
20286: GO 20317
// for i in tmp do
20288: LD_ADDR_VAR 0 1
20292: PUSH
20293: LD_VAR 0 2
20297: PUSH
20298: FOR_IN
20299: IFFALSE 20315
// SetBLevel ( i , 10 ) ;
20301: LD_VAR 0 1
20305: PPUSH
20306: LD_INT 10
20308: PPUSH
20309: CALL_OW 241
20313: GO 20298
20315: POP
20316: POP
// end ;
20317: PPOPN 2
20319: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
20320: LD_EXP 33
20324: PUSH
20325: LD_EXP 50
20329: AND
20330: IFFALSE 20441
20332: GO 20334
20334: DISABLE
20335: LD_INT 0
20337: PPUSH
20338: PPUSH
20339: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20340: LD_ADDR_VAR 0 3
20344: PUSH
20345: LD_INT 22
20347: PUSH
20348: LD_OWVAR 2
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: PUSH
20357: LD_INT 25
20359: PUSH
20360: LD_INT 1
20362: PUSH
20363: EMPTY
20364: LIST
20365: LIST
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: PPUSH
20371: CALL_OW 69
20375: ST_TO_ADDR
// if not tmp then
20376: LD_VAR 0 3
20380: NOT
20381: IFFALSE 20385
// exit ;
20383: GO 20441
// un := tmp [ rand ( 1 , tmp ) ] ;
20385: LD_ADDR_VAR 0 2
20389: PUSH
20390: LD_VAR 0 3
20394: PUSH
20395: LD_INT 1
20397: PPUSH
20398: LD_VAR 0 3
20402: PPUSH
20403: CALL_OW 12
20407: ARRAY
20408: ST_TO_ADDR
// if Crawls ( un ) then
20409: LD_VAR 0 2
20413: PPUSH
20414: CALL_OW 318
20418: IFFALSE 20429
// ComWalk ( un ) ;
20420: LD_VAR 0 2
20424: PPUSH
20425: CALL_OW 138
// SetClass ( un , class_sniper ) ;
20429: LD_VAR 0 2
20433: PPUSH
20434: LD_INT 5
20436: PPUSH
20437: CALL_OW 336
// end ;
20441: PPOPN 3
20443: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
20444: LD_EXP 33
20448: PUSH
20449: LD_EXP 51
20453: AND
20454: PUSH
20455: LD_OWVAR 67
20459: PUSH
20460: LD_INT 4
20462: LESS
20463: AND
20464: IFFALSE 20483
20466: GO 20468
20468: DISABLE
// begin Difficulty := Difficulty + 1 ;
20469: LD_ADDR_OWVAR 67
20473: PUSH
20474: LD_OWVAR 67
20478: PUSH
20479: LD_INT 1
20481: PLUS
20482: ST_TO_ADDR
// end ;
20483: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
20484: LD_EXP 33
20488: PUSH
20489: LD_EXP 52
20493: AND
20494: IFFALSE 20597
20496: GO 20498
20498: DISABLE
20499: LD_INT 0
20501: PPUSH
// begin for i := 1 to 5 do
20502: LD_ADDR_VAR 0 1
20506: PUSH
20507: DOUBLE
20508: LD_INT 1
20510: DEC
20511: ST_TO_ADDR
20512: LD_INT 5
20514: PUSH
20515: FOR_TO
20516: IFFALSE 20595
// begin uc_nation := nation_nature ;
20518: LD_ADDR_OWVAR 21
20522: PUSH
20523: LD_INT 0
20525: ST_TO_ADDR
// uc_side := 0 ;
20526: LD_ADDR_OWVAR 20
20530: PUSH
20531: LD_INT 0
20533: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20534: LD_ADDR_OWVAR 29
20538: PUSH
20539: LD_INT 12
20541: PUSH
20542: LD_INT 12
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: ST_TO_ADDR
// hc_agressivity := 20 ;
20549: LD_ADDR_OWVAR 35
20553: PUSH
20554: LD_INT 20
20556: ST_TO_ADDR
// hc_class := class_tiger ;
20557: LD_ADDR_OWVAR 28
20561: PUSH
20562: LD_INT 14
20564: ST_TO_ADDR
// hc_gallery :=  ;
20565: LD_ADDR_OWVAR 33
20569: PUSH
20570: LD_STRING 
20572: ST_TO_ADDR
// hc_name :=  ;
20573: LD_ADDR_OWVAR 26
20577: PUSH
20578: LD_STRING 
20580: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
20581: CALL_OW 44
20585: PPUSH
20586: LD_INT 0
20588: PPUSH
20589: CALL_OW 51
// end ;
20593: GO 20515
20595: POP
20596: POP
// end ;
20597: PPOPN 1
20599: END
// every 0 0$1 trigger StreamModeActive and sBomb do
20600: LD_EXP 33
20604: PUSH
20605: LD_EXP 53
20609: AND
20610: IFFALSE 20619
20612: GO 20614
20614: DISABLE
// StreamSibBomb ;
20615: CALL 20620 0 0
20619: END
// export function StreamSibBomb ; var i , x , y ; begin
20620: LD_INT 0
20622: PPUSH
20623: PPUSH
20624: PPUSH
20625: PPUSH
// result := false ;
20626: LD_ADDR_VAR 0 1
20630: PUSH
20631: LD_INT 0
20633: ST_TO_ADDR
// for i := 1 to 16 do
20634: LD_ADDR_VAR 0 2
20638: PUSH
20639: DOUBLE
20640: LD_INT 1
20642: DEC
20643: ST_TO_ADDR
20644: LD_INT 16
20646: PUSH
20647: FOR_TO
20648: IFFALSE 20847
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20650: LD_ADDR_VAR 0 3
20654: PUSH
20655: LD_INT 10
20657: PUSH
20658: LD_INT 20
20660: PUSH
20661: LD_INT 30
20663: PUSH
20664: LD_INT 40
20666: PUSH
20667: LD_INT 50
20669: PUSH
20670: LD_INT 60
20672: PUSH
20673: LD_INT 70
20675: PUSH
20676: LD_INT 80
20678: PUSH
20679: LD_INT 90
20681: PUSH
20682: LD_INT 100
20684: PUSH
20685: LD_INT 110
20687: PUSH
20688: LD_INT 120
20690: PUSH
20691: LD_INT 130
20693: PUSH
20694: LD_INT 140
20696: PUSH
20697: LD_INT 150
20699: PUSH
20700: EMPTY
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: PUSH
20717: LD_INT 1
20719: PPUSH
20720: LD_INT 15
20722: PPUSH
20723: CALL_OW 12
20727: ARRAY
20728: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20729: LD_ADDR_VAR 0 4
20733: PUSH
20734: LD_INT 10
20736: PUSH
20737: LD_INT 20
20739: PUSH
20740: LD_INT 30
20742: PUSH
20743: LD_INT 40
20745: PUSH
20746: LD_INT 50
20748: PUSH
20749: LD_INT 60
20751: PUSH
20752: LD_INT 70
20754: PUSH
20755: LD_INT 80
20757: PUSH
20758: LD_INT 90
20760: PUSH
20761: LD_INT 100
20763: PUSH
20764: LD_INT 110
20766: PUSH
20767: LD_INT 120
20769: PUSH
20770: LD_INT 130
20772: PUSH
20773: LD_INT 140
20775: PUSH
20776: LD_INT 150
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: PUSH
20796: LD_INT 1
20798: PPUSH
20799: LD_INT 15
20801: PPUSH
20802: CALL_OW 12
20806: ARRAY
20807: ST_TO_ADDR
// if ValidHex ( x , y ) then
20808: LD_VAR 0 3
20812: PPUSH
20813: LD_VAR 0 4
20817: PPUSH
20818: CALL_OW 488
20822: IFFALSE 20845
// begin result := [ x , y ] ;
20824: LD_ADDR_VAR 0 1
20828: PUSH
20829: LD_VAR 0 3
20833: PUSH
20834: LD_VAR 0 4
20838: PUSH
20839: EMPTY
20840: LIST
20841: LIST
20842: ST_TO_ADDR
// break ;
20843: GO 20847
// end ; end ;
20845: GO 20647
20847: POP
20848: POP
// if result then
20849: LD_VAR 0 1
20853: IFFALSE 20913
// begin ToLua ( playSibBomb() ) ;
20855: LD_STRING playSibBomb()
20857: PPUSH
20858: CALL_OW 559
// wait ( 0 0$14 ) ;
20862: LD_INT 490
20864: PPUSH
20865: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
20869: LD_VAR 0 1
20873: PUSH
20874: LD_INT 1
20876: ARRAY
20877: PPUSH
20878: LD_VAR 0 1
20882: PUSH
20883: LD_INT 2
20885: ARRAY
20886: PPUSH
20887: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
20891: LD_VAR 0 1
20895: PUSH
20896: LD_INT 1
20898: ARRAY
20899: PPUSH
20900: LD_VAR 0 1
20904: PUSH
20905: LD_INT 2
20907: ARRAY
20908: PPUSH
20909: CALL_OW 429
// end ; end ;
20913: LD_VAR 0 1
20917: RET
// every 0 0$1 trigger StreamModeActive and sReset do
20918: LD_EXP 33
20922: PUSH
20923: LD_EXP 55
20927: AND
20928: IFFALSE 20940
20930: GO 20932
20932: DISABLE
// YouLost (  ) ;
20933: LD_STRING 
20935: PPUSH
20936: CALL_OW 104
20940: END
// every 0 0$1 trigger StreamModeActive and sFog do
20941: LD_EXP 33
20945: PUSH
20946: LD_EXP 54
20950: AND
20951: IFFALSE 20965
20953: GO 20955
20955: DISABLE
// FogOff ( your_side ) ;
20956: LD_OWVAR 2
20960: PPUSH
20961: CALL_OW 344
20965: END
// every 0 0$1 trigger StreamModeActive and sSun do
20966: LD_EXP 33
20970: PUSH
20971: LD_EXP 56
20975: AND
20976: IFFALSE 21004
20978: GO 20980
20980: DISABLE
// begin solar_recharge_percent := 0 ;
20981: LD_ADDR_OWVAR 79
20985: PUSH
20986: LD_INT 0
20988: ST_TO_ADDR
// wait ( 5 5$00 ) ;
20989: LD_INT 10500
20991: PPUSH
20992: CALL_OW 67
// solar_recharge_percent := 100 ;
20996: LD_ADDR_OWVAR 79
21000: PUSH
21001: LD_INT 100
21003: ST_TO_ADDR
// end ;
21004: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
21005: LD_EXP 33
21009: PUSH
21010: LD_EXP 57
21014: AND
21015: IFFALSE 21254
21017: GO 21019
21019: DISABLE
21020: LD_INT 0
21022: PPUSH
21023: PPUSH
21024: PPUSH
// begin tmp := [ ] ;
21025: LD_ADDR_VAR 0 3
21029: PUSH
21030: EMPTY
21031: ST_TO_ADDR
// for i := 1 to 6 do
21032: LD_ADDR_VAR 0 1
21036: PUSH
21037: DOUBLE
21038: LD_INT 1
21040: DEC
21041: ST_TO_ADDR
21042: LD_INT 6
21044: PUSH
21045: FOR_TO
21046: IFFALSE 21151
// begin uc_nation := nation_nature ;
21048: LD_ADDR_OWVAR 21
21052: PUSH
21053: LD_INT 0
21055: ST_TO_ADDR
// uc_side := 0 ;
21056: LD_ADDR_OWVAR 20
21060: PUSH
21061: LD_INT 0
21063: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21064: LD_ADDR_OWVAR 29
21068: PUSH
21069: LD_INT 12
21071: PUSH
21072: LD_INT 12
21074: PUSH
21075: EMPTY
21076: LIST
21077: LIST
21078: ST_TO_ADDR
// hc_agressivity := 20 ;
21079: LD_ADDR_OWVAR 35
21083: PUSH
21084: LD_INT 20
21086: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
21087: LD_ADDR_OWVAR 28
21091: PUSH
21092: LD_INT 17
21094: ST_TO_ADDR
// hc_gallery :=  ;
21095: LD_ADDR_OWVAR 33
21099: PUSH
21100: LD_STRING 
21102: ST_TO_ADDR
// hc_name :=  ;
21103: LD_ADDR_OWVAR 26
21107: PUSH
21108: LD_STRING 
21110: ST_TO_ADDR
// un := CreateHuman ;
21111: LD_ADDR_VAR 0 2
21115: PUSH
21116: CALL_OW 44
21120: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
21121: LD_VAR 0 2
21125: PPUSH
21126: LD_INT 1
21128: PPUSH
21129: CALL_OW 51
// tmp := tmp ^ un ;
21133: LD_ADDR_VAR 0 3
21137: PUSH
21138: LD_VAR 0 3
21142: PUSH
21143: LD_VAR 0 2
21147: ADD
21148: ST_TO_ADDR
// end ;
21149: GO 21045
21151: POP
21152: POP
// repeat wait ( 0 0$1 ) ;
21153: LD_INT 35
21155: PPUSH
21156: CALL_OW 67
// for un in tmp do
21160: LD_ADDR_VAR 0 2
21164: PUSH
21165: LD_VAR 0 3
21169: PUSH
21170: FOR_IN
21171: IFFALSE 21245
// begin if IsDead ( un ) then
21173: LD_VAR 0 2
21177: PPUSH
21178: CALL_OW 301
21182: IFFALSE 21202
// begin tmp := tmp diff un ;
21184: LD_ADDR_VAR 0 3
21188: PUSH
21189: LD_VAR 0 3
21193: PUSH
21194: LD_VAR 0 2
21198: DIFF
21199: ST_TO_ADDR
// continue ;
21200: GO 21170
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
21202: LD_VAR 0 2
21206: PPUSH
21207: LD_INT 3
21209: PUSH
21210: LD_INT 22
21212: PUSH
21213: LD_INT 0
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: PUSH
21220: EMPTY
21221: LIST
21222: LIST
21223: PPUSH
21224: CALL_OW 69
21228: PPUSH
21229: LD_VAR 0 2
21233: PPUSH
21234: CALL_OW 74
21238: PPUSH
21239: CALL_OW 115
// end ;
21243: GO 21170
21245: POP
21246: POP
// until not tmp ;
21247: LD_VAR 0 3
21251: NOT
21252: IFFALSE 21153
// end ;
21254: PPOPN 3
21256: END
// every 0 0$1 trigger StreamModeActive and sTroll do
21257: LD_EXP 33
21261: PUSH
21262: LD_EXP 58
21266: AND
21267: IFFALSE 21321
21269: GO 21271
21271: DISABLE
// begin ToLua ( displayTroll(); ) ;
21272: LD_STRING displayTroll();
21274: PPUSH
21275: CALL_OW 559
// wait ( 3 3$00 ) ;
21279: LD_INT 6300
21281: PPUSH
21282: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21286: LD_STRING hideTroll();
21288: PPUSH
21289: CALL_OW 559
// wait ( 1 1$00 ) ;
21293: LD_INT 2100
21295: PPUSH
21296: CALL_OW 67
// ToLua ( displayTroll(); ) ;
21300: LD_STRING displayTroll();
21302: PPUSH
21303: CALL_OW 559
// wait ( 1 1$00 ) ;
21307: LD_INT 2100
21309: PPUSH
21310: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21314: LD_STRING hideTroll();
21316: PPUSH
21317: CALL_OW 559
// end ;
21321: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
21322: LD_EXP 33
21326: PUSH
21327: LD_EXP 59
21331: AND
21332: IFFALSE 21395
21334: GO 21336
21336: DISABLE
21337: LD_INT 0
21339: PPUSH
// begin p := 0 ;
21340: LD_ADDR_VAR 0 1
21344: PUSH
21345: LD_INT 0
21347: ST_TO_ADDR
// repeat game_speed := 1 ;
21348: LD_ADDR_OWVAR 65
21352: PUSH
21353: LD_INT 1
21355: ST_TO_ADDR
// wait ( 0 0$1 ) ;
21356: LD_INT 35
21358: PPUSH
21359: CALL_OW 67
// p := p + 1 ;
21363: LD_ADDR_VAR 0 1
21367: PUSH
21368: LD_VAR 0 1
21372: PUSH
21373: LD_INT 1
21375: PLUS
21376: ST_TO_ADDR
// until p >= 60 ;
21377: LD_VAR 0 1
21381: PUSH
21382: LD_INT 60
21384: GREATEREQUAL
21385: IFFALSE 21348
// game_speed := 4 ;
21387: LD_ADDR_OWVAR 65
21391: PUSH
21392: LD_INT 4
21394: ST_TO_ADDR
// end ;
21395: PPOPN 1
21397: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
21398: LD_EXP 33
21402: PUSH
21403: LD_EXP 60
21407: AND
21408: IFFALSE 21554
21410: GO 21412
21412: DISABLE
21413: LD_INT 0
21415: PPUSH
21416: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21417: LD_ADDR_VAR 0 1
21421: PUSH
21422: LD_INT 22
21424: PUSH
21425: LD_OWVAR 2
21429: PUSH
21430: EMPTY
21431: LIST
21432: LIST
21433: PUSH
21434: LD_INT 2
21436: PUSH
21437: LD_INT 30
21439: PUSH
21440: LD_INT 0
21442: PUSH
21443: EMPTY
21444: LIST
21445: LIST
21446: PUSH
21447: LD_INT 30
21449: PUSH
21450: LD_INT 1
21452: PUSH
21453: EMPTY
21454: LIST
21455: LIST
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: LIST
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: PPUSH
21466: CALL_OW 69
21470: ST_TO_ADDR
// if not depot then
21471: LD_VAR 0 1
21475: NOT
21476: IFFALSE 21480
// exit ;
21478: GO 21554
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
21480: LD_ADDR_VAR 0 2
21484: PUSH
21485: LD_VAR 0 1
21489: PUSH
21490: LD_INT 1
21492: PPUSH
21493: LD_VAR 0 1
21497: PPUSH
21498: CALL_OW 12
21502: ARRAY
21503: PPUSH
21504: CALL_OW 274
21508: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
21509: LD_VAR 0 2
21513: PPUSH
21514: LD_INT 1
21516: PPUSH
21517: LD_INT 0
21519: PPUSH
21520: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
21524: LD_VAR 0 2
21528: PPUSH
21529: LD_INT 2
21531: PPUSH
21532: LD_INT 0
21534: PPUSH
21535: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
21539: LD_VAR 0 2
21543: PPUSH
21544: LD_INT 3
21546: PPUSH
21547: LD_INT 0
21549: PPUSH
21550: CALL_OW 277
// end ;
21554: PPOPN 2
21556: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
21557: LD_EXP 33
21561: PUSH
21562: LD_EXP 61
21566: AND
21567: IFFALSE 21664
21569: GO 21571
21571: DISABLE
21572: LD_INT 0
21574: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21575: LD_ADDR_VAR 0 1
21579: PUSH
21580: LD_INT 22
21582: PUSH
21583: LD_OWVAR 2
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: PUSH
21592: LD_INT 21
21594: PUSH
21595: LD_INT 1
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: PUSH
21602: LD_INT 3
21604: PUSH
21605: LD_INT 23
21607: PUSH
21608: LD_INT 0
21610: PUSH
21611: EMPTY
21612: LIST
21613: LIST
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: LIST
21623: PPUSH
21624: CALL_OW 69
21628: ST_TO_ADDR
// if not tmp then
21629: LD_VAR 0 1
21633: NOT
21634: IFFALSE 21638
// exit ;
21636: GO 21664
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
21638: LD_VAR 0 1
21642: PUSH
21643: LD_INT 1
21645: PPUSH
21646: LD_VAR 0 1
21650: PPUSH
21651: CALL_OW 12
21655: ARRAY
21656: PPUSH
21657: LD_INT 200
21659: PPUSH
21660: CALL_OW 234
// end ;
21664: PPOPN 1
21666: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
21667: LD_EXP 33
21671: PUSH
21672: LD_EXP 62
21676: AND
21677: IFFALSE 21756
21679: GO 21681
21681: DISABLE
21682: LD_INT 0
21684: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
21685: LD_ADDR_VAR 0 1
21689: PUSH
21690: LD_INT 22
21692: PUSH
21693: LD_OWVAR 2
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: PUSH
21702: LD_INT 21
21704: PUSH
21705: LD_INT 2
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: PUSH
21712: EMPTY
21713: LIST
21714: LIST
21715: PPUSH
21716: CALL_OW 69
21720: ST_TO_ADDR
// if not tmp then
21721: LD_VAR 0 1
21725: NOT
21726: IFFALSE 21730
// exit ;
21728: GO 21756
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
21730: LD_VAR 0 1
21734: PUSH
21735: LD_INT 1
21737: PPUSH
21738: LD_VAR 0 1
21742: PPUSH
21743: CALL_OW 12
21747: ARRAY
21748: PPUSH
21749: LD_INT 60
21751: PPUSH
21752: CALL_OW 234
// end ;
21756: PPOPN 1
21758: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
21759: LD_EXP 33
21763: PUSH
21764: LD_EXP 63
21768: AND
21769: IFFALSE 21868
21771: GO 21773
21773: DISABLE
21774: LD_INT 0
21776: PPUSH
21777: PPUSH
// begin enable ;
21778: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
21779: LD_ADDR_VAR 0 1
21783: PUSH
21784: LD_INT 22
21786: PUSH
21787: LD_OWVAR 2
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: PUSH
21796: LD_INT 61
21798: PUSH
21799: EMPTY
21800: LIST
21801: PUSH
21802: LD_INT 33
21804: PUSH
21805: LD_INT 2
21807: PUSH
21808: EMPTY
21809: LIST
21810: LIST
21811: PUSH
21812: EMPTY
21813: LIST
21814: LIST
21815: LIST
21816: PPUSH
21817: CALL_OW 69
21821: ST_TO_ADDR
// if not tmp then
21822: LD_VAR 0 1
21826: NOT
21827: IFFALSE 21831
// exit ;
21829: GO 21868
// for i in tmp do
21831: LD_ADDR_VAR 0 2
21835: PUSH
21836: LD_VAR 0 1
21840: PUSH
21841: FOR_IN
21842: IFFALSE 21866
// if IsControledBy ( i ) then
21844: LD_VAR 0 2
21848: PPUSH
21849: CALL_OW 312
21853: IFFALSE 21864
// ComUnlink ( i ) ;
21855: LD_VAR 0 2
21859: PPUSH
21860: CALL_OW 136
21864: GO 21841
21866: POP
21867: POP
// end ;
21868: PPOPN 2
21870: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
21871: LD_EXP 33
21875: PUSH
21876: LD_EXP 64
21880: AND
21881: IFFALSE 22021
21883: GO 21885
21885: DISABLE
21886: LD_INT 0
21888: PPUSH
21889: PPUSH
// begin ToLua ( displayPowell(); ) ;
21890: LD_STRING displayPowell();
21892: PPUSH
21893: CALL_OW 559
// uc_side := 0 ;
21897: LD_ADDR_OWVAR 20
21901: PUSH
21902: LD_INT 0
21904: ST_TO_ADDR
// uc_nation := 2 ;
21905: LD_ADDR_OWVAR 21
21909: PUSH
21910: LD_INT 2
21912: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
21913: LD_ADDR_OWVAR 37
21917: PUSH
21918: LD_INT 14
21920: ST_TO_ADDR
// vc_engine := engine_siberite ;
21921: LD_ADDR_OWVAR 39
21925: PUSH
21926: LD_INT 3
21928: ST_TO_ADDR
// vc_control := control_apeman ;
21929: LD_ADDR_OWVAR 38
21933: PUSH
21934: LD_INT 5
21936: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
21937: LD_ADDR_OWVAR 40
21941: PUSH
21942: LD_INT 29
21944: ST_TO_ADDR
// un := CreateVehicle ;
21945: LD_ADDR_VAR 0 2
21949: PUSH
21950: CALL_OW 45
21954: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21955: LD_VAR 0 2
21959: PPUSH
21960: LD_INT 1
21962: PPUSH
21963: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21967: LD_INT 35
21969: PPUSH
21970: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21974: LD_VAR 0 2
21978: PPUSH
21979: LD_INT 22
21981: PUSH
21982: LD_OWVAR 2
21986: PUSH
21987: EMPTY
21988: LIST
21989: LIST
21990: PPUSH
21991: CALL_OW 69
21995: PPUSH
21996: LD_VAR 0 2
22000: PPUSH
22001: CALL_OW 74
22005: PPUSH
22006: CALL_OW 115
// until IsDead ( un ) ;
22010: LD_VAR 0 2
22014: PPUSH
22015: CALL_OW 301
22019: IFFALSE 21967
// end ;
22021: PPOPN 2
22023: END
// every 0 0$1 trigger StreamModeActive and sStu do
22024: LD_EXP 33
22028: PUSH
22029: LD_EXP 72
22033: AND
22034: IFFALSE 22050
22036: GO 22038
22038: DISABLE
// begin ToLua ( displayStucuk(); ) ;
22039: LD_STRING displayStucuk();
22041: PPUSH
22042: CALL_OW 559
// ResetFog ;
22046: CALL_OW 335
// end ;
22050: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
22051: LD_EXP 33
22055: PUSH
22056: LD_EXP 65
22060: AND
22061: IFFALSE 22202
22063: GO 22065
22065: DISABLE
22066: LD_INT 0
22068: PPUSH
22069: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22070: LD_ADDR_VAR 0 2
22074: PUSH
22075: LD_INT 22
22077: PUSH
22078: LD_OWVAR 2
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: PUSH
22087: LD_INT 21
22089: PUSH
22090: LD_INT 1
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PPUSH
22101: CALL_OW 69
22105: ST_TO_ADDR
// if not tmp then
22106: LD_VAR 0 2
22110: NOT
22111: IFFALSE 22115
// exit ;
22113: GO 22202
// un := tmp [ rand ( 1 , tmp ) ] ;
22115: LD_ADDR_VAR 0 1
22119: PUSH
22120: LD_VAR 0 2
22124: PUSH
22125: LD_INT 1
22127: PPUSH
22128: LD_VAR 0 2
22132: PPUSH
22133: CALL_OW 12
22137: ARRAY
22138: ST_TO_ADDR
// SetSide ( un , 0 ) ;
22139: LD_VAR 0 1
22143: PPUSH
22144: LD_INT 0
22146: PPUSH
22147: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
22151: LD_VAR 0 1
22155: PPUSH
22156: LD_OWVAR 3
22160: PUSH
22161: LD_VAR 0 1
22165: DIFF
22166: PPUSH
22167: LD_VAR 0 1
22171: PPUSH
22172: CALL_OW 74
22176: PPUSH
22177: CALL_OW 115
// wait ( 0 0$20 ) ;
22181: LD_INT 700
22183: PPUSH
22184: CALL_OW 67
// SetSide ( un , your_side ) ;
22188: LD_VAR 0 1
22192: PPUSH
22193: LD_OWVAR 2
22197: PPUSH
22198: CALL_OW 235
// end ;
22202: PPOPN 2
22204: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
22205: LD_EXP 33
22209: PUSH
22210: LD_EXP 66
22214: AND
22215: IFFALSE 22321
22217: GO 22219
22219: DISABLE
22220: LD_INT 0
22222: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22223: LD_ADDR_VAR 0 1
22227: PUSH
22228: LD_INT 22
22230: PUSH
22231: LD_OWVAR 2
22235: PUSH
22236: EMPTY
22237: LIST
22238: LIST
22239: PUSH
22240: LD_INT 2
22242: PUSH
22243: LD_INT 30
22245: PUSH
22246: LD_INT 0
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: PUSH
22253: LD_INT 30
22255: PUSH
22256: LD_INT 1
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: LIST
22267: PUSH
22268: EMPTY
22269: LIST
22270: LIST
22271: PPUSH
22272: CALL_OW 69
22276: ST_TO_ADDR
// if not depot then
22277: LD_VAR 0 1
22281: NOT
22282: IFFALSE 22286
// exit ;
22284: GO 22321
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
22286: LD_VAR 0 1
22290: PUSH
22291: LD_INT 1
22293: ARRAY
22294: PPUSH
22295: CALL_OW 250
22299: PPUSH
22300: LD_VAR 0 1
22304: PUSH
22305: LD_INT 1
22307: ARRAY
22308: PPUSH
22309: CALL_OW 251
22313: PPUSH
22314: LD_INT 70
22316: PPUSH
22317: CALL_OW 495
// end ;
22321: PPOPN 1
22323: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
22324: LD_EXP 33
22328: PUSH
22329: LD_EXP 67
22333: AND
22334: IFFALSE 22545
22336: GO 22338
22338: DISABLE
22339: LD_INT 0
22341: PPUSH
22342: PPUSH
22343: PPUSH
22344: PPUSH
22345: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22346: LD_ADDR_VAR 0 5
22350: PUSH
22351: LD_INT 22
22353: PUSH
22354: LD_OWVAR 2
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: PUSH
22363: LD_INT 21
22365: PUSH
22366: LD_INT 1
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: PPUSH
22377: CALL_OW 69
22381: ST_TO_ADDR
// if not tmp then
22382: LD_VAR 0 5
22386: NOT
22387: IFFALSE 22391
// exit ;
22389: GO 22545
// for i in tmp do
22391: LD_ADDR_VAR 0 1
22395: PUSH
22396: LD_VAR 0 5
22400: PUSH
22401: FOR_IN
22402: IFFALSE 22543
// begin d := rand ( 0 , 5 ) ;
22404: LD_ADDR_VAR 0 4
22408: PUSH
22409: LD_INT 0
22411: PPUSH
22412: LD_INT 5
22414: PPUSH
22415: CALL_OW 12
22419: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
22420: LD_ADDR_VAR 0 2
22424: PUSH
22425: LD_VAR 0 1
22429: PPUSH
22430: CALL_OW 250
22434: PPUSH
22435: LD_VAR 0 4
22439: PPUSH
22440: LD_INT 3
22442: PPUSH
22443: LD_INT 12
22445: PPUSH
22446: CALL_OW 12
22450: PPUSH
22451: CALL_OW 272
22455: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
22456: LD_ADDR_VAR 0 3
22460: PUSH
22461: LD_VAR 0 1
22465: PPUSH
22466: CALL_OW 251
22470: PPUSH
22471: LD_VAR 0 4
22475: PPUSH
22476: LD_INT 3
22478: PPUSH
22479: LD_INT 12
22481: PPUSH
22482: CALL_OW 12
22486: PPUSH
22487: CALL_OW 273
22491: ST_TO_ADDR
// if ValidHex ( x , y ) then
22492: LD_VAR 0 2
22496: PPUSH
22497: LD_VAR 0 3
22501: PPUSH
22502: CALL_OW 488
22506: IFFALSE 22541
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
22508: LD_VAR 0 1
22512: PPUSH
22513: LD_VAR 0 2
22517: PPUSH
22518: LD_VAR 0 3
22522: PPUSH
22523: LD_INT 3
22525: PPUSH
22526: LD_INT 6
22528: PPUSH
22529: CALL_OW 12
22533: PPUSH
22534: LD_INT 1
22536: PPUSH
22537: CALL_OW 483
// end ;
22541: GO 22401
22543: POP
22544: POP
// end ;
22545: PPOPN 5
22547: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
22548: LD_EXP 33
22552: PUSH
22553: LD_EXP 68
22557: AND
22558: IFFALSE 22652
22560: GO 22562
22562: DISABLE
22563: LD_INT 0
22565: PPUSH
22566: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
22567: LD_ADDR_VAR 0 2
22571: PUSH
22572: LD_INT 22
22574: PUSH
22575: LD_OWVAR 2
22579: PUSH
22580: EMPTY
22581: LIST
22582: LIST
22583: PUSH
22584: LD_INT 32
22586: PUSH
22587: LD_INT 1
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: PUSH
22594: LD_INT 21
22596: PUSH
22597: LD_INT 2
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: LIST
22608: PPUSH
22609: CALL_OW 69
22613: ST_TO_ADDR
// if not tmp then
22614: LD_VAR 0 2
22618: NOT
22619: IFFALSE 22623
// exit ;
22621: GO 22652
// for i in tmp do
22623: LD_ADDR_VAR 0 1
22627: PUSH
22628: LD_VAR 0 2
22632: PUSH
22633: FOR_IN
22634: IFFALSE 22650
// SetFuel ( i , 0 ) ;
22636: LD_VAR 0 1
22640: PPUSH
22641: LD_INT 0
22643: PPUSH
22644: CALL_OW 240
22648: GO 22633
22650: POP
22651: POP
// end ;
22652: PPOPN 2
22654: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
22655: LD_EXP 33
22659: PUSH
22660: LD_EXP 69
22664: AND
22665: IFFALSE 22731
22667: GO 22669
22669: DISABLE
22670: LD_INT 0
22672: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22673: LD_ADDR_VAR 0 1
22677: PUSH
22678: LD_INT 22
22680: PUSH
22681: LD_OWVAR 2
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: PUSH
22690: LD_INT 30
22692: PUSH
22693: LD_INT 29
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: PPUSH
22704: CALL_OW 69
22708: ST_TO_ADDR
// if not tmp then
22709: LD_VAR 0 1
22713: NOT
22714: IFFALSE 22718
// exit ;
22716: GO 22731
// DestroyUnit ( tmp [ 1 ] ) ;
22718: LD_VAR 0 1
22722: PUSH
22723: LD_INT 1
22725: ARRAY
22726: PPUSH
22727: CALL_OW 65
// end ;
22731: PPOPN 1
22733: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
22734: LD_EXP 33
22738: PUSH
22739: LD_EXP 71
22743: AND
22744: IFFALSE 22873
22746: GO 22748
22748: DISABLE
22749: LD_INT 0
22751: PPUSH
// begin uc_side := 0 ;
22752: LD_ADDR_OWVAR 20
22756: PUSH
22757: LD_INT 0
22759: ST_TO_ADDR
// uc_nation := nation_arabian ;
22760: LD_ADDR_OWVAR 21
22764: PUSH
22765: LD_INT 2
22767: ST_TO_ADDR
// hc_gallery :=  ;
22768: LD_ADDR_OWVAR 33
22772: PUSH
22773: LD_STRING 
22775: ST_TO_ADDR
// hc_name :=  ;
22776: LD_ADDR_OWVAR 26
22780: PUSH
22781: LD_STRING 
22783: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
22784: LD_INT 1
22786: PPUSH
22787: LD_INT 11
22789: PPUSH
22790: LD_INT 10
22792: PPUSH
22793: CALL_OW 380
// un := CreateHuman ;
22797: LD_ADDR_VAR 0 1
22801: PUSH
22802: CALL_OW 44
22806: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22807: LD_VAR 0 1
22811: PPUSH
22812: LD_INT 1
22814: PPUSH
22815: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22819: LD_INT 35
22821: PPUSH
22822: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22826: LD_VAR 0 1
22830: PPUSH
22831: LD_INT 22
22833: PUSH
22834: LD_OWVAR 2
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: PPUSH
22843: CALL_OW 69
22847: PPUSH
22848: LD_VAR 0 1
22852: PPUSH
22853: CALL_OW 74
22857: PPUSH
22858: CALL_OW 115
// until IsDead ( un ) ;
22862: LD_VAR 0 1
22866: PPUSH
22867: CALL_OW 301
22871: IFFALSE 22819
// end ;
22873: PPOPN 1
22875: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
22876: LD_EXP 33
22880: PUSH
22881: LD_EXP 73
22885: AND
22886: IFFALSE 22898
22888: GO 22890
22890: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
22891: LD_STRING earthquake(getX(game), 0, 32)
22893: PPUSH
22894: CALL_OW 559
22898: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
22899: LD_EXP 33
22903: PUSH
22904: LD_EXP 74
22908: AND
22909: IFFALSE 23000
22911: GO 22913
22913: DISABLE
22914: LD_INT 0
22916: PPUSH
// begin enable ;
22917: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
22918: LD_ADDR_VAR 0 1
22922: PUSH
22923: LD_INT 22
22925: PUSH
22926: LD_OWVAR 2
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: PUSH
22935: LD_INT 21
22937: PUSH
22938: LD_INT 2
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: PUSH
22945: LD_INT 33
22947: PUSH
22948: LD_INT 3
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: LIST
22959: PPUSH
22960: CALL_OW 69
22964: ST_TO_ADDR
// if not tmp then
22965: LD_VAR 0 1
22969: NOT
22970: IFFALSE 22974
// exit ;
22972: GO 23000
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22974: LD_VAR 0 1
22978: PUSH
22979: LD_INT 1
22981: PPUSH
22982: LD_VAR 0 1
22986: PPUSH
22987: CALL_OW 12
22991: ARRAY
22992: PPUSH
22993: LD_INT 1
22995: PPUSH
22996: CALL_OW 234
// end ;
23000: PPOPN 1
23002: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
23003: LD_EXP 33
23007: PUSH
23008: LD_EXP 75
23012: AND
23013: IFFALSE 23154
23015: GO 23017
23017: DISABLE
23018: LD_INT 0
23020: PPUSH
23021: PPUSH
23022: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23023: LD_ADDR_VAR 0 3
23027: PUSH
23028: LD_INT 22
23030: PUSH
23031: LD_OWVAR 2
23035: PUSH
23036: EMPTY
23037: LIST
23038: LIST
23039: PUSH
23040: LD_INT 25
23042: PUSH
23043: LD_INT 1
23045: PUSH
23046: EMPTY
23047: LIST
23048: LIST
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: PPUSH
23054: CALL_OW 69
23058: ST_TO_ADDR
// if not tmp then
23059: LD_VAR 0 3
23063: NOT
23064: IFFALSE 23068
// exit ;
23066: GO 23154
// un := tmp [ rand ( 1 , tmp ) ] ;
23068: LD_ADDR_VAR 0 2
23072: PUSH
23073: LD_VAR 0 3
23077: PUSH
23078: LD_INT 1
23080: PPUSH
23081: LD_VAR 0 3
23085: PPUSH
23086: CALL_OW 12
23090: ARRAY
23091: ST_TO_ADDR
// if Crawls ( un ) then
23092: LD_VAR 0 2
23096: PPUSH
23097: CALL_OW 318
23101: IFFALSE 23112
// ComWalk ( un ) ;
23103: LD_VAR 0 2
23107: PPUSH
23108: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
23112: LD_VAR 0 2
23116: PPUSH
23117: LD_INT 9
23119: PPUSH
23120: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
23124: LD_INT 28
23126: PPUSH
23127: LD_OWVAR 2
23131: PPUSH
23132: LD_INT 2
23134: PPUSH
23135: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
23139: LD_INT 29
23141: PPUSH
23142: LD_OWVAR 2
23146: PPUSH
23147: LD_INT 2
23149: PPUSH
23150: CALL_OW 322
// end ;
23154: PPOPN 3
23156: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
23157: LD_EXP 33
23161: PUSH
23162: LD_EXP 76
23166: AND
23167: IFFALSE 23278
23169: GO 23171
23171: DISABLE
23172: LD_INT 0
23174: PPUSH
23175: PPUSH
23176: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23177: LD_ADDR_VAR 0 3
23181: PUSH
23182: LD_INT 22
23184: PUSH
23185: LD_OWVAR 2
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PUSH
23194: LD_INT 25
23196: PUSH
23197: LD_INT 1
23199: PUSH
23200: EMPTY
23201: LIST
23202: LIST
23203: PUSH
23204: EMPTY
23205: LIST
23206: LIST
23207: PPUSH
23208: CALL_OW 69
23212: ST_TO_ADDR
// if not tmp then
23213: LD_VAR 0 3
23217: NOT
23218: IFFALSE 23222
// exit ;
23220: GO 23278
// un := tmp [ rand ( 1 , tmp ) ] ;
23222: LD_ADDR_VAR 0 2
23226: PUSH
23227: LD_VAR 0 3
23231: PUSH
23232: LD_INT 1
23234: PPUSH
23235: LD_VAR 0 3
23239: PPUSH
23240: CALL_OW 12
23244: ARRAY
23245: ST_TO_ADDR
// if Crawls ( un ) then
23246: LD_VAR 0 2
23250: PPUSH
23251: CALL_OW 318
23255: IFFALSE 23266
// ComWalk ( un ) ;
23257: LD_VAR 0 2
23261: PPUSH
23262: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23266: LD_VAR 0 2
23270: PPUSH
23271: LD_INT 8
23273: PPUSH
23274: CALL_OW 336
// end ;
23278: PPOPN 3
23280: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
23281: LD_EXP 33
23285: PUSH
23286: LD_EXP 77
23290: AND
23291: IFFALSE 23435
23293: GO 23295
23295: DISABLE
23296: LD_INT 0
23298: PPUSH
23299: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
23300: LD_ADDR_VAR 0 2
23304: PUSH
23305: LD_INT 22
23307: PUSH
23308: LD_OWVAR 2
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: PUSH
23317: LD_INT 21
23319: PUSH
23320: LD_INT 2
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: PUSH
23327: LD_INT 2
23329: PUSH
23330: LD_INT 34
23332: PUSH
23333: LD_INT 12
23335: PUSH
23336: EMPTY
23337: LIST
23338: LIST
23339: PUSH
23340: LD_INT 34
23342: PUSH
23343: LD_INT 51
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: PUSH
23350: LD_INT 34
23352: PUSH
23353: LD_INT 32
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: PUSH
23360: EMPTY
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: LIST
23370: PPUSH
23371: CALL_OW 69
23375: ST_TO_ADDR
// if not tmp then
23376: LD_VAR 0 2
23380: NOT
23381: IFFALSE 23385
// exit ;
23383: GO 23435
// for i in tmp do
23385: LD_ADDR_VAR 0 1
23389: PUSH
23390: LD_VAR 0 2
23394: PUSH
23395: FOR_IN
23396: IFFALSE 23433
// if GetCargo ( i , mat_artifact ) = 0 then
23398: LD_VAR 0 1
23402: PPUSH
23403: LD_INT 4
23405: PPUSH
23406: CALL_OW 289
23410: PUSH
23411: LD_INT 0
23413: EQUAL
23414: IFFALSE 23431
// SetCargo ( i , mat_siberit , 100 ) ;
23416: LD_VAR 0 1
23420: PPUSH
23421: LD_INT 3
23423: PPUSH
23424: LD_INT 100
23426: PPUSH
23427: CALL_OW 290
23431: GO 23395
23433: POP
23434: POP
// end ;
23435: PPOPN 2
23437: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
23438: LD_EXP 33
23442: PUSH
23443: LD_EXP 78
23447: AND
23448: IFFALSE 23631
23450: GO 23452
23452: DISABLE
23453: LD_INT 0
23455: PPUSH
23456: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23457: LD_ADDR_VAR 0 2
23461: PUSH
23462: LD_INT 22
23464: PUSH
23465: LD_OWVAR 2
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PPUSH
23474: CALL_OW 69
23478: ST_TO_ADDR
// if not tmp then
23479: LD_VAR 0 2
23483: NOT
23484: IFFALSE 23488
// exit ;
23486: GO 23631
// for i := 1 to 2 do
23488: LD_ADDR_VAR 0 1
23492: PUSH
23493: DOUBLE
23494: LD_INT 1
23496: DEC
23497: ST_TO_ADDR
23498: LD_INT 2
23500: PUSH
23501: FOR_TO
23502: IFFALSE 23629
// begin uc_side := your_side ;
23504: LD_ADDR_OWVAR 20
23508: PUSH
23509: LD_OWVAR 2
23513: ST_TO_ADDR
// uc_nation := nation_american ;
23514: LD_ADDR_OWVAR 21
23518: PUSH
23519: LD_INT 1
23521: ST_TO_ADDR
// vc_chassis := us_morphling ;
23522: LD_ADDR_OWVAR 37
23526: PUSH
23527: LD_INT 5
23529: ST_TO_ADDR
// vc_engine := engine_siberite ;
23530: LD_ADDR_OWVAR 39
23534: PUSH
23535: LD_INT 3
23537: ST_TO_ADDR
// vc_control := control_computer ;
23538: LD_ADDR_OWVAR 38
23542: PUSH
23543: LD_INT 3
23545: ST_TO_ADDR
// vc_weapon := us_double_laser ;
23546: LD_ADDR_OWVAR 40
23550: PUSH
23551: LD_INT 10
23553: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
23554: LD_VAR 0 2
23558: PUSH
23559: LD_INT 1
23561: ARRAY
23562: PPUSH
23563: CALL_OW 310
23567: NOT
23568: IFFALSE 23615
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
23570: CALL_OW 45
23574: PPUSH
23575: LD_VAR 0 2
23579: PUSH
23580: LD_INT 1
23582: ARRAY
23583: PPUSH
23584: CALL_OW 250
23588: PPUSH
23589: LD_VAR 0 2
23593: PUSH
23594: LD_INT 1
23596: ARRAY
23597: PPUSH
23598: CALL_OW 251
23602: PPUSH
23603: LD_INT 12
23605: PPUSH
23606: LD_INT 1
23608: PPUSH
23609: CALL_OW 50
23613: GO 23627
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
23615: CALL_OW 45
23619: PPUSH
23620: LD_INT 1
23622: PPUSH
23623: CALL_OW 51
// end ;
23627: GO 23501
23629: POP
23630: POP
// end ;
23631: PPOPN 2
23633: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
23634: LD_EXP 33
23638: PUSH
23639: LD_EXP 79
23643: AND
23644: IFFALSE 23866
23646: GO 23648
23648: DISABLE
23649: LD_INT 0
23651: PPUSH
23652: PPUSH
23653: PPUSH
23654: PPUSH
23655: PPUSH
23656: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23657: LD_ADDR_VAR 0 6
23661: PUSH
23662: LD_INT 22
23664: PUSH
23665: LD_OWVAR 2
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: PUSH
23674: LD_INT 21
23676: PUSH
23677: LD_INT 1
23679: PUSH
23680: EMPTY
23681: LIST
23682: LIST
23683: PUSH
23684: LD_INT 3
23686: PUSH
23687: LD_INT 23
23689: PUSH
23690: LD_INT 0
23692: PUSH
23693: EMPTY
23694: LIST
23695: LIST
23696: PUSH
23697: EMPTY
23698: LIST
23699: LIST
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: LIST
23705: PPUSH
23706: CALL_OW 69
23710: ST_TO_ADDR
// if not tmp then
23711: LD_VAR 0 6
23715: NOT
23716: IFFALSE 23720
// exit ;
23718: GO 23866
// s1 := rand ( 1 , 4 ) ;
23720: LD_ADDR_VAR 0 2
23724: PUSH
23725: LD_INT 1
23727: PPUSH
23728: LD_INT 4
23730: PPUSH
23731: CALL_OW 12
23735: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
23736: LD_ADDR_VAR 0 4
23740: PUSH
23741: LD_VAR 0 6
23745: PUSH
23746: LD_INT 1
23748: ARRAY
23749: PPUSH
23750: LD_VAR 0 2
23754: PPUSH
23755: CALL_OW 259
23759: ST_TO_ADDR
// if s1 = 1 then
23760: LD_VAR 0 2
23764: PUSH
23765: LD_INT 1
23767: EQUAL
23768: IFFALSE 23788
// s2 := rand ( 2 , 4 ) else
23770: LD_ADDR_VAR 0 3
23774: PUSH
23775: LD_INT 2
23777: PPUSH
23778: LD_INT 4
23780: PPUSH
23781: CALL_OW 12
23785: ST_TO_ADDR
23786: GO 23796
// s2 := 1 ;
23788: LD_ADDR_VAR 0 3
23792: PUSH
23793: LD_INT 1
23795: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
23796: LD_ADDR_VAR 0 5
23800: PUSH
23801: LD_VAR 0 6
23805: PUSH
23806: LD_INT 1
23808: ARRAY
23809: PPUSH
23810: LD_VAR 0 3
23814: PPUSH
23815: CALL_OW 259
23819: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
23820: LD_VAR 0 6
23824: PUSH
23825: LD_INT 1
23827: ARRAY
23828: PPUSH
23829: LD_VAR 0 2
23833: PPUSH
23834: LD_VAR 0 5
23838: PPUSH
23839: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
23843: LD_VAR 0 6
23847: PUSH
23848: LD_INT 1
23850: ARRAY
23851: PPUSH
23852: LD_VAR 0 3
23856: PPUSH
23857: LD_VAR 0 4
23861: PPUSH
23862: CALL_OW 237
// end ;
23866: PPOPN 6
23868: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
23869: LD_EXP 33
23873: PUSH
23874: LD_EXP 80
23878: AND
23879: IFFALSE 23958
23881: GO 23883
23883: DISABLE
23884: LD_INT 0
23886: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
23887: LD_ADDR_VAR 0 1
23891: PUSH
23892: LD_INT 22
23894: PUSH
23895: LD_OWVAR 2
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: PUSH
23904: LD_INT 30
23906: PUSH
23907: LD_INT 3
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PPUSH
23918: CALL_OW 69
23922: ST_TO_ADDR
// if not tmp then
23923: LD_VAR 0 1
23927: NOT
23928: IFFALSE 23932
// exit ;
23930: GO 23958
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23932: LD_VAR 0 1
23936: PUSH
23937: LD_INT 1
23939: PPUSH
23940: LD_VAR 0 1
23944: PPUSH
23945: CALL_OW 12
23949: ARRAY
23950: PPUSH
23951: LD_INT 1
23953: PPUSH
23954: CALL_OW 234
// end ;
23958: PPOPN 1
23960: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
23961: LD_EXP 33
23965: PUSH
23966: LD_EXP 81
23970: AND
23971: IFFALSE 24083
23973: GO 23975
23975: DISABLE
23976: LD_INT 0
23978: PPUSH
23979: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
23980: LD_ADDR_VAR 0 2
23984: PUSH
23985: LD_INT 22
23987: PUSH
23988: LD_OWVAR 2
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PUSH
23997: LD_INT 2
23999: PUSH
24000: LD_INT 30
24002: PUSH
24003: LD_INT 27
24005: PUSH
24006: EMPTY
24007: LIST
24008: LIST
24009: PUSH
24010: LD_INT 30
24012: PUSH
24013: LD_INT 26
24015: PUSH
24016: EMPTY
24017: LIST
24018: LIST
24019: PUSH
24020: LD_INT 30
24022: PUSH
24023: LD_INT 28
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: PPUSH
24040: CALL_OW 69
24044: ST_TO_ADDR
// if not tmp then
24045: LD_VAR 0 2
24049: NOT
24050: IFFALSE 24054
// exit ;
24052: GO 24083
// for i in tmp do
24054: LD_ADDR_VAR 0 1
24058: PUSH
24059: LD_VAR 0 2
24063: PUSH
24064: FOR_IN
24065: IFFALSE 24081
// SetLives ( i , 1 ) ;
24067: LD_VAR 0 1
24071: PPUSH
24072: LD_INT 1
24074: PPUSH
24075: CALL_OW 234
24079: GO 24064
24081: POP
24082: POP
// end ;
24083: PPOPN 2
24085: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
24086: LD_EXP 33
24090: PUSH
24091: LD_EXP 82
24095: AND
24096: IFFALSE 24383
24098: GO 24100
24100: DISABLE
24101: LD_INT 0
24103: PPUSH
24104: PPUSH
24105: PPUSH
// begin i := rand ( 1 , 7 ) ;
24106: LD_ADDR_VAR 0 1
24110: PUSH
24111: LD_INT 1
24113: PPUSH
24114: LD_INT 7
24116: PPUSH
24117: CALL_OW 12
24121: ST_TO_ADDR
// case i of 1 :
24122: LD_VAR 0 1
24126: PUSH
24127: LD_INT 1
24129: DOUBLE
24130: EQUAL
24131: IFTRUE 24135
24133: GO 24145
24135: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
24136: LD_STRING earthquake(getX(game), 0, 32)
24138: PPUSH
24139: CALL_OW 559
24143: GO 24383
24145: LD_INT 2
24147: DOUBLE
24148: EQUAL
24149: IFTRUE 24153
24151: GO 24167
24153: POP
// begin ToLua ( displayStucuk(); ) ;
24154: LD_STRING displayStucuk();
24156: PPUSH
24157: CALL_OW 559
// ResetFog ;
24161: CALL_OW 335
// end ; 3 :
24165: GO 24383
24167: LD_INT 3
24169: DOUBLE
24170: EQUAL
24171: IFTRUE 24175
24173: GO 24279
24175: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24176: LD_ADDR_VAR 0 2
24180: PUSH
24181: LD_INT 22
24183: PUSH
24184: LD_OWVAR 2
24188: PUSH
24189: EMPTY
24190: LIST
24191: LIST
24192: PUSH
24193: LD_INT 25
24195: PUSH
24196: LD_INT 1
24198: PUSH
24199: EMPTY
24200: LIST
24201: LIST
24202: PUSH
24203: EMPTY
24204: LIST
24205: LIST
24206: PPUSH
24207: CALL_OW 69
24211: ST_TO_ADDR
// if not tmp then
24212: LD_VAR 0 2
24216: NOT
24217: IFFALSE 24221
// exit ;
24219: GO 24383
// un := tmp [ rand ( 1 , tmp ) ] ;
24221: LD_ADDR_VAR 0 3
24225: PUSH
24226: LD_VAR 0 2
24230: PUSH
24231: LD_INT 1
24233: PPUSH
24234: LD_VAR 0 2
24238: PPUSH
24239: CALL_OW 12
24243: ARRAY
24244: ST_TO_ADDR
// if Crawls ( un ) then
24245: LD_VAR 0 3
24249: PPUSH
24250: CALL_OW 318
24254: IFFALSE 24265
// ComWalk ( un ) ;
24256: LD_VAR 0 3
24260: PPUSH
24261: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24265: LD_VAR 0 3
24269: PPUSH
24270: LD_INT 8
24272: PPUSH
24273: CALL_OW 336
// end ; 4 :
24277: GO 24383
24279: LD_INT 4
24281: DOUBLE
24282: EQUAL
24283: IFTRUE 24287
24285: GO 24361
24287: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24288: LD_ADDR_VAR 0 2
24292: PUSH
24293: LD_INT 22
24295: PUSH
24296: LD_OWVAR 2
24300: PUSH
24301: EMPTY
24302: LIST
24303: LIST
24304: PUSH
24305: LD_INT 30
24307: PUSH
24308: LD_INT 29
24310: PUSH
24311: EMPTY
24312: LIST
24313: LIST
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: PPUSH
24319: CALL_OW 69
24323: ST_TO_ADDR
// if not tmp then
24324: LD_VAR 0 2
24328: NOT
24329: IFFALSE 24333
// exit ;
24331: GO 24383
// CenterNowOnUnits ( tmp [ 1 ] ) ;
24333: LD_VAR 0 2
24337: PUSH
24338: LD_INT 1
24340: ARRAY
24341: PPUSH
24342: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
24346: LD_VAR 0 2
24350: PUSH
24351: LD_INT 1
24353: ARRAY
24354: PPUSH
24355: CALL_OW 65
// end ; 5 .. 7 :
24359: GO 24383
24361: LD_INT 5
24363: DOUBLE
24364: GREATEREQUAL
24365: IFFALSE 24373
24367: LD_INT 7
24369: DOUBLE
24370: LESSEQUAL
24371: IFTRUE 24375
24373: GO 24382
24375: POP
// StreamSibBomb ; end ;
24376: CALL 20620 0 0
24380: GO 24383
24382: POP
// end ;
24383: PPOPN 3
24385: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
24386: LD_EXP 33
24390: PUSH
24391: LD_EXP 83
24395: AND
24396: IFFALSE 24552
24398: GO 24400
24400: DISABLE
24401: LD_INT 0
24403: PPUSH
24404: PPUSH
24405: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
24406: LD_ADDR_VAR 0 2
24410: PUSH
24411: LD_INT 81
24413: PUSH
24414: LD_OWVAR 2
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: PUSH
24423: LD_INT 2
24425: PUSH
24426: LD_INT 21
24428: PUSH
24429: LD_INT 1
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: PUSH
24436: LD_INT 21
24438: PUSH
24439: LD_INT 2
24441: PUSH
24442: EMPTY
24443: LIST
24444: LIST
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: LIST
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: PPUSH
24455: CALL_OW 69
24459: ST_TO_ADDR
// if not tmp then
24460: LD_VAR 0 2
24464: NOT
24465: IFFALSE 24469
// exit ;
24467: GO 24552
// p := 0 ;
24469: LD_ADDR_VAR 0 3
24473: PUSH
24474: LD_INT 0
24476: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24477: LD_INT 35
24479: PPUSH
24480: CALL_OW 67
// p := p + 1 ;
24484: LD_ADDR_VAR 0 3
24488: PUSH
24489: LD_VAR 0 3
24493: PUSH
24494: LD_INT 1
24496: PLUS
24497: ST_TO_ADDR
// for i in tmp do
24498: LD_ADDR_VAR 0 1
24502: PUSH
24503: LD_VAR 0 2
24507: PUSH
24508: FOR_IN
24509: IFFALSE 24540
// if GetLives ( i ) < 1000 then
24511: LD_VAR 0 1
24515: PPUSH
24516: CALL_OW 256
24520: PUSH
24521: LD_INT 1000
24523: LESS
24524: IFFALSE 24538
// SetLives ( i , 1000 ) ;
24526: LD_VAR 0 1
24530: PPUSH
24531: LD_INT 1000
24533: PPUSH
24534: CALL_OW 234
24538: GO 24508
24540: POP
24541: POP
// until p > 20 ;
24542: LD_VAR 0 3
24546: PUSH
24547: LD_INT 20
24549: GREATER
24550: IFFALSE 24477
// end ;
24552: PPOPN 3
24554: END
// every 0 0$1 trigger StreamModeActive and sTime do
24555: LD_EXP 33
24559: PUSH
24560: LD_EXP 84
24564: AND
24565: IFFALSE 24600
24567: GO 24569
24569: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
24570: LD_INT 28
24572: PPUSH
24573: LD_OWVAR 2
24577: PPUSH
24578: LD_INT 2
24580: PPUSH
24581: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
24585: LD_INT 30
24587: PPUSH
24588: LD_OWVAR 2
24592: PPUSH
24593: LD_INT 2
24595: PPUSH
24596: CALL_OW 322
// end ;
24600: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
24601: LD_EXP 33
24605: PUSH
24606: LD_EXP 85
24610: AND
24611: IFFALSE 24732
24613: GO 24615
24615: DISABLE
24616: LD_INT 0
24618: PPUSH
24619: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24620: LD_ADDR_VAR 0 2
24624: PUSH
24625: LD_INT 22
24627: PUSH
24628: LD_OWVAR 2
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: PUSH
24637: LD_INT 21
24639: PUSH
24640: LD_INT 1
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: PUSH
24647: LD_INT 3
24649: PUSH
24650: LD_INT 23
24652: PUSH
24653: LD_INT 0
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: PUSH
24664: EMPTY
24665: LIST
24666: LIST
24667: LIST
24668: PPUSH
24669: CALL_OW 69
24673: ST_TO_ADDR
// if not tmp then
24674: LD_VAR 0 2
24678: NOT
24679: IFFALSE 24683
// exit ;
24681: GO 24732
// for i in tmp do
24683: LD_ADDR_VAR 0 1
24687: PUSH
24688: LD_VAR 0 2
24692: PUSH
24693: FOR_IN
24694: IFFALSE 24730
// begin if Crawls ( i ) then
24696: LD_VAR 0 1
24700: PPUSH
24701: CALL_OW 318
24705: IFFALSE 24716
// ComWalk ( i ) ;
24707: LD_VAR 0 1
24711: PPUSH
24712: CALL_OW 138
// SetClass ( i , 2 ) ;
24716: LD_VAR 0 1
24720: PPUSH
24721: LD_INT 2
24723: PPUSH
24724: CALL_OW 336
// end ;
24728: GO 24693
24730: POP
24731: POP
// end ;
24732: PPOPN 2
24734: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
24735: LD_EXP 33
24739: PUSH
24740: LD_EXP 86
24744: AND
24745: IFFALSE 25033
24747: GO 24749
24749: DISABLE
24750: LD_INT 0
24752: PPUSH
24753: PPUSH
24754: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
24755: LD_OWVAR 2
24759: PPUSH
24760: LD_INT 9
24762: PPUSH
24763: LD_INT 1
24765: PPUSH
24766: LD_INT 1
24768: PPUSH
24769: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
24773: LD_INT 9
24775: PPUSH
24776: LD_OWVAR 2
24780: PPUSH
24781: CALL_OW 343
// uc_side := 9 ;
24785: LD_ADDR_OWVAR 20
24789: PUSH
24790: LD_INT 9
24792: ST_TO_ADDR
// uc_nation := 2 ;
24793: LD_ADDR_OWVAR 21
24797: PUSH
24798: LD_INT 2
24800: ST_TO_ADDR
// hc_name := Dark Warrior ;
24801: LD_ADDR_OWVAR 26
24805: PUSH
24806: LD_STRING Dark Warrior
24808: ST_TO_ADDR
// hc_gallery :=  ;
24809: LD_ADDR_OWVAR 33
24813: PUSH
24814: LD_STRING 
24816: ST_TO_ADDR
// hc_noskilllimit := true ;
24817: LD_ADDR_OWVAR 76
24821: PUSH
24822: LD_INT 1
24824: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
24825: LD_ADDR_OWVAR 31
24829: PUSH
24830: LD_INT 30
24832: PUSH
24833: LD_INT 30
24835: PUSH
24836: LD_INT 30
24838: PUSH
24839: LD_INT 30
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: ST_TO_ADDR
// un := CreateHuman ;
24848: LD_ADDR_VAR 0 3
24852: PUSH
24853: CALL_OW 44
24857: ST_TO_ADDR
// hc_noskilllimit := false ;
24858: LD_ADDR_OWVAR 76
24862: PUSH
24863: LD_INT 0
24865: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24866: LD_VAR 0 3
24870: PPUSH
24871: LD_INT 1
24873: PPUSH
24874: CALL_OW 51
// ToLua ( playRanger() ) ;
24878: LD_STRING playRanger()
24880: PPUSH
24881: CALL_OW 559
// p := 0 ;
24885: LD_ADDR_VAR 0 2
24889: PUSH
24890: LD_INT 0
24892: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24893: LD_INT 35
24895: PPUSH
24896: CALL_OW 67
// p := p + 1 ;
24900: LD_ADDR_VAR 0 2
24904: PUSH
24905: LD_VAR 0 2
24909: PUSH
24910: LD_INT 1
24912: PLUS
24913: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
24914: LD_VAR 0 3
24918: PPUSH
24919: CALL_OW 256
24923: PUSH
24924: LD_INT 1000
24926: LESS
24927: IFFALSE 24941
// SetLives ( un , 1000 ) ;
24929: LD_VAR 0 3
24933: PPUSH
24934: LD_INT 1000
24936: PPUSH
24937: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
24941: LD_VAR 0 3
24945: PPUSH
24946: LD_INT 81
24948: PUSH
24949: LD_OWVAR 2
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PUSH
24958: LD_INT 91
24960: PUSH
24961: LD_VAR 0 3
24965: PUSH
24966: LD_INT 30
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: LIST
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PPUSH
24978: CALL_OW 69
24982: PPUSH
24983: LD_VAR 0 3
24987: PPUSH
24988: CALL_OW 74
24992: PPUSH
24993: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
24997: LD_VAR 0 2
25001: PUSH
25002: LD_INT 80
25004: GREATER
25005: PUSH
25006: LD_VAR 0 3
25010: PPUSH
25011: CALL_OW 301
25015: OR
25016: IFFALSE 24893
// if un then
25018: LD_VAR 0 3
25022: IFFALSE 25033
// RemoveUnit ( un ) ;
25024: LD_VAR 0 3
25028: PPUSH
25029: CALL_OW 64
// end ;
25033: PPOPN 3
25035: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
25036: LD_EXP 87
25040: IFFALSE 25156
25042: GO 25044
25044: DISABLE
25045: LD_INT 0
25047: PPUSH
25048: PPUSH
25049: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25050: LD_ADDR_VAR 0 2
25054: PUSH
25055: LD_INT 81
25057: PUSH
25058: LD_OWVAR 2
25062: PUSH
25063: EMPTY
25064: LIST
25065: LIST
25066: PUSH
25067: LD_INT 21
25069: PUSH
25070: LD_INT 1
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: PPUSH
25081: CALL_OW 69
25085: ST_TO_ADDR
// ToLua ( playComputer() ) ;
25086: LD_STRING playComputer()
25088: PPUSH
25089: CALL_OW 559
// if not tmp then
25093: LD_VAR 0 2
25097: NOT
25098: IFFALSE 25102
// exit ;
25100: GO 25156
// for i in tmp do
25102: LD_ADDR_VAR 0 1
25106: PUSH
25107: LD_VAR 0 2
25111: PUSH
25112: FOR_IN
25113: IFFALSE 25154
// for j := 1 to 4 do
25115: LD_ADDR_VAR 0 3
25119: PUSH
25120: DOUBLE
25121: LD_INT 1
25123: DEC
25124: ST_TO_ADDR
25125: LD_INT 4
25127: PUSH
25128: FOR_TO
25129: IFFALSE 25150
// SetSkill ( i , j , 10 ) ;
25131: LD_VAR 0 1
25135: PPUSH
25136: LD_VAR 0 3
25140: PPUSH
25141: LD_INT 10
25143: PPUSH
25144: CALL_OW 237
25148: GO 25128
25150: POP
25151: POP
25152: GO 25112
25154: POP
25155: POP
// end ;
25156: PPOPN 3
25158: END
// every 0 0$1 trigger s30 do var i , tmp ;
25159: LD_EXP 88
25163: IFFALSE 25232
25165: GO 25167
25167: DISABLE
25168: LD_INT 0
25170: PPUSH
25171: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25172: LD_ADDR_VAR 0 2
25176: PUSH
25177: LD_INT 22
25179: PUSH
25180: LD_OWVAR 2
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: PPUSH
25189: CALL_OW 69
25193: ST_TO_ADDR
// if not tmp then
25194: LD_VAR 0 2
25198: NOT
25199: IFFALSE 25203
// exit ;
25201: GO 25232
// for i in tmp do
25203: LD_ADDR_VAR 0 1
25207: PUSH
25208: LD_VAR 0 2
25212: PUSH
25213: FOR_IN
25214: IFFALSE 25230
// SetLives ( i , 300 ) ;
25216: LD_VAR 0 1
25220: PPUSH
25221: LD_INT 300
25223: PPUSH
25224: CALL_OW 234
25228: GO 25213
25230: POP
25231: POP
// end ;
25232: PPOPN 2
25234: END
// every 0 0$1 trigger s60 do var i , tmp ;
25235: LD_EXP 89
25239: IFFALSE 25308
25241: GO 25243
25243: DISABLE
25244: LD_INT 0
25246: PPUSH
25247: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25248: LD_ADDR_VAR 0 2
25252: PUSH
25253: LD_INT 22
25255: PUSH
25256: LD_OWVAR 2
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: PPUSH
25265: CALL_OW 69
25269: ST_TO_ADDR
// if not tmp then
25270: LD_VAR 0 2
25274: NOT
25275: IFFALSE 25279
// exit ;
25277: GO 25308
// for i in tmp do
25279: LD_ADDR_VAR 0 1
25283: PUSH
25284: LD_VAR 0 2
25288: PUSH
25289: FOR_IN
25290: IFFALSE 25306
// SetLives ( i , 600 ) ;
25292: LD_VAR 0 1
25296: PPUSH
25297: LD_INT 600
25299: PPUSH
25300: CALL_OW 234
25304: GO 25289
25306: POP
25307: POP
// end ;
25308: PPOPN 2
25310: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
25311: LD_INT 0
25313: PPUSH
// case cmd of 301 :
25314: LD_VAR 0 1
25318: PUSH
25319: LD_INT 301
25321: DOUBLE
25322: EQUAL
25323: IFTRUE 25327
25325: GO 25359
25327: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
25328: LD_VAR 0 6
25332: PPUSH
25333: LD_VAR 0 7
25337: PPUSH
25338: LD_VAR 0 8
25342: PPUSH
25343: LD_VAR 0 4
25347: PPUSH
25348: LD_VAR 0 5
25352: PPUSH
25353: CALL 26560 0 5
25357: GO 25480
25359: LD_INT 302
25361: DOUBLE
25362: EQUAL
25363: IFTRUE 25367
25365: GO 25404
25367: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
25368: LD_VAR 0 6
25372: PPUSH
25373: LD_VAR 0 7
25377: PPUSH
25378: LD_VAR 0 8
25382: PPUSH
25383: LD_VAR 0 9
25387: PPUSH
25388: LD_VAR 0 4
25392: PPUSH
25393: LD_VAR 0 5
25397: PPUSH
25398: CALL 26651 0 6
25402: GO 25480
25404: LD_INT 303
25406: DOUBLE
25407: EQUAL
25408: IFTRUE 25412
25410: GO 25449
25412: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
25413: LD_VAR 0 6
25417: PPUSH
25418: LD_VAR 0 7
25422: PPUSH
25423: LD_VAR 0 8
25427: PPUSH
25428: LD_VAR 0 9
25432: PPUSH
25433: LD_VAR 0 4
25437: PPUSH
25438: LD_VAR 0 5
25442: PPUSH
25443: CALL 25485 0 6
25447: GO 25480
25449: LD_INT 304
25451: DOUBLE
25452: EQUAL
25453: IFTRUE 25457
25455: GO 25479
25457: POP
// hHackTeleport ( unit , x , y ) ; end ;
25458: LD_VAR 0 2
25462: PPUSH
25463: LD_VAR 0 4
25467: PPUSH
25468: LD_VAR 0 5
25472: PPUSH
25473: CALL 27244 0 3
25477: GO 25480
25479: POP
// end ;
25480: LD_VAR 0 12
25484: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
25485: LD_INT 0
25487: PPUSH
25488: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
25489: LD_VAR 0 1
25493: PUSH
25494: LD_INT 1
25496: LESS
25497: PUSH
25498: LD_VAR 0 1
25502: PUSH
25503: LD_INT 3
25505: GREATER
25506: OR
25507: PUSH
25508: LD_VAR 0 5
25512: PPUSH
25513: LD_VAR 0 6
25517: PPUSH
25518: CALL_OW 428
25522: OR
25523: IFFALSE 25527
// exit ;
25525: GO 26247
// uc_side := your_side ;
25527: LD_ADDR_OWVAR 20
25531: PUSH
25532: LD_OWVAR 2
25536: ST_TO_ADDR
// uc_nation := nation ;
25537: LD_ADDR_OWVAR 21
25541: PUSH
25542: LD_VAR 0 1
25546: ST_TO_ADDR
// bc_level = 1 ;
25547: LD_ADDR_OWVAR 43
25551: PUSH
25552: LD_INT 1
25554: ST_TO_ADDR
// case btype of 1 :
25555: LD_VAR 0 2
25559: PUSH
25560: LD_INT 1
25562: DOUBLE
25563: EQUAL
25564: IFTRUE 25568
25566: GO 25579
25568: POP
// bc_type := b_depot ; 2 :
25569: LD_ADDR_OWVAR 42
25573: PUSH
25574: LD_INT 0
25576: ST_TO_ADDR
25577: GO 26191
25579: LD_INT 2
25581: DOUBLE
25582: EQUAL
25583: IFTRUE 25587
25585: GO 25598
25587: POP
// bc_type := b_warehouse ; 3 :
25588: LD_ADDR_OWVAR 42
25592: PUSH
25593: LD_INT 1
25595: ST_TO_ADDR
25596: GO 26191
25598: LD_INT 3
25600: DOUBLE
25601: EQUAL
25602: IFTRUE 25606
25604: GO 25617
25606: POP
// bc_type := b_lab ; 4 .. 9 :
25607: LD_ADDR_OWVAR 42
25611: PUSH
25612: LD_INT 6
25614: ST_TO_ADDR
25615: GO 26191
25617: LD_INT 4
25619: DOUBLE
25620: GREATEREQUAL
25621: IFFALSE 25629
25623: LD_INT 9
25625: DOUBLE
25626: LESSEQUAL
25627: IFTRUE 25631
25629: GO 25683
25631: POP
// begin bc_type := b_lab_half ;
25632: LD_ADDR_OWVAR 42
25636: PUSH
25637: LD_INT 7
25639: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
25640: LD_ADDR_OWVAR 44
25644: PUSH
25645: LD_INT 10
25647: PUSH
25648: LD_INT 11
25650: PUSH
25651: LD_INT 12
25653: PUSH
25654: LD_INT 15
25656: PUSH
25657: LD_INT 14
25659: PUSH
25660: LD_INT 13
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: LIST
25667: LIST
25668: LIST
25669: LIST
25670: PUSH
25671: LD_VAR 0 2
25675: PUSH
25676: LD_INT 3
25678: MINUS
25679: ARRAY
25680: ST_TO_ADDR
// end ; 10 .. 13 :
25681: GO 26191
25683: LD_INT 10
25685: DOUBLE
25686: GREATEREQUAL
25687: IFFALSE 25695
25689: LD_INT 13
25691: DOUBLE
25692: LESSEQUAL
25693: IFTRUE 25697
25695: GO 25774
25697: POP
// begin bc_type := b_lab_full ;
25698: LD_ADDR_OWVAR 42
25702: PUSH
25703: LD_INT 8
25705: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
25706: LD_ADDR_OWVAR 44
25710: PUSH
25711: LD_INT 10
25713: PUSH
25714: LD_INT 12
25716: PUSH
25717: LD_INT 14
25719: PUSH
25720: LD_INT 13
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: PUSH
25729: LD_VAR 0 2
25733: PUSH
25734: LD_INT 9
25736: MINUS
25737: ARRAY
25738: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
25739: LD_ADDR_OWVAR 45
25743: PUSH
25744: LD_INT 11
25746: PUSH
25747: LD_INT 15
25749: PUSH
25750: LD_INT 12
25752: PUSH
25753: LD_INT 15
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: LIST
25760: LIST
25761: PUSH
25762: LD_VAR 0 2
25766: PUSH
25767: LD_INT 9
25769: MINUS
25770: ARRAY
25771: ST_TO_ADDR
// end ; 14 :
25772: GO 26191
25774: LD_INT 14
25776: DOUBLE
25777: EQUAL
25778: IFTRUE 25782
25780: GO 25793
25782: POP
// bc_type := b_workshop ; 15 :
25783: LD_ADDR_OWVAR 42
25787: PUSH
25788: LD_INT 2
25790: ST_TO_ADDR
25791: GO 26191
25793: LD_INT 15
25795: DOUBLE
25796: EQUAL
25797: IFTRUE 25801
25799: GO 25812
25801: POP
// bc_type := b_factory ; 16 :
25802: LD_ADDR_OWVAR 42
25806: PUSH
25807: LD_INT 3
25809: ST_TO_ADDR
25810: GO 26191
25812: LD_INT 16
25814: DOUBLE
25815: EQUAL
25816: IFTRUE 25820
25818: GO 25831
25820: POP
// bc_type := b_ext_gun ; 17 :
25821: LD_ADDR_OWVAR 42
25825: PUSH
25826: LD_INT 17
25828: ST_TO_ADDR
25829: GO 26191
25831: LD_INT 17
25833: DOUBLE
25834: EQUAL
25835: IFTRUE 25839
25837: GO 25867
25839: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
25840: LD_ADDR_OWVAR 42
25844: PUSH
25845: LD_INT 19
25847: PUSH
25848: LD_INT 23
25850: PUSH
25851: LD_INT 19
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: LIST
25858: PUSH
25859: LD_VAR 0 1
25863: ARRAY
25864: ST_TO_ADDR
25865: GO 26191
25867: LD_INT 18
25869: DOUBLE
25870: EQUAL
25871: IFTRUE 25875
25873: GO 25886
25875: POP
// bc_type := b_ext_radar ; 19 :
25876: LD_ADDR_OWVAR 42
25880: PUSH
25881: LD_INT 20
25883: ST_TO_ADDR
25884: GO 26191
25886: LD_INT 19
25888: DOUBLE
25889: EQUAL
25890: IFTRUE 25894
25892: GO 25905
25894: POP
// bc_type := b_ext_radio ; 20 :
25895: LD_ADDR_OWVAR 42
25899: PUSH
25900: LD_INT 22
25902: ST_TO_ADDR
25903: GO 26191
25905: LD_INT 20
25907: DOUBLE
25908: EQUAL
25909: IFTRUE 25913
25911: GO 25924
25913: POP
// bc_type := b_ext_siberium ; 21 :
25914: LD_ADDR_OWVAR 42
25918: PUSH
25919: LD_INT 21
25921: ST_TO_ADDR
25922: GO 26191
25924: LD_INT 21
25926: DOUBLE
25927: EQUAL
25928: IFTRUE 25932
25930: GO 25943
25932: POP
// bc_type := b_ext_computer ; 22 :
25933: LD_ADDR_OWVAR 42
25937: PUSH
25938: LD_INT 24
25940: ST_TO_ADDR
25941: GO 26191
25943: LD_INT 22
25945: DOUBLE
25946: EQUAL
25947: IFTRUE 25951
25949: GO 25962
25951: POP
// bc_type := b_ext_track ; 23 :
25952: LD_ADDR_OWVAR 42
25956: PUSH
25957: LD_INT 16
25959: ST_TO_ADDR
25960: GO 26191
25962: LD_INT 23
25964: DOUBLE
25965: EQUAL
25966: IFTRUE 25970
25968: GO 25981
25970: POP
// bc_type := b_ext_laser ; 24 :
25971: LD_ADDR_OWVAR 42
25975: PUSH
25976: LD_INT 25
25978: ST_TO_ADDR
25979: GO 26191
25981: LD_INT 24
25983: DOUBLE
25984: EQUAL
25985: IFTRUE 25989
25987: GO 26000
25989: POP
// bc_type := b_control_tower ; 25 :
25990: LD_ADDR_OWVAR 42
25994: PUSH
25995: LD_INT 36
25997: ST_TO_ADDR
25998: GO 26191
26000: LD_INT 25
26002: DOUBLE
26003: EQUAL
26004: IFTRUE 26008
26006: GO 26019
26008: POP
// bc_type := b_breastwork ; 26 :
26009: LD_ADDR_OWVAR 42
26013: PUSH
26014: LD_INT 31
26016: ST_TO_ADDR
26017: GO 26191
26019: LD_INT 26
26021: DOUBLE
26022: EQUAL
26023: IFTRUE 26027
26025: GO 26038
26027: POP
// bc_type := b_bunker ; 27 :
26028: LD_ADDR_OWVAR 42
26032: PUSH
26033: LD_INT 32
26035: ST_TO_ADDR
26036: GO 26191
26038: LD_INT 27
26040: DOUBLE
26041: EQUAL
26042: IFTRUE 26046
26044: GO 26057
26046: POP
// bc_type := b_turret ; 28 :
26047: LD_ADDR_OWVAR 42
26051: PUSH
26052: LD_INT 33
26054: ST_TO_ADDR
26055: GO 26191
26057: LD_INT 28
26059: DOUBLE
26060: EQUAL
26061: IFTRUE 26065
26063: GO 26076
26065: POP
// bc_type := b_armoury ; 29 :
26066: LD_ADDR_OWVAR 42
26070: PUSH
26071: LD_INT 4
26073: ST_TO_ADDR
26074: GO 26191
26076: LD_INT 29
26078: DOUBLE
26079: EQUAL
26080: IFTRUE 26084
26082: GO 26095
26084: POP
// bc_type := b_barracks ; 30 :
26085: LD_ADDR_OWVAR 42
26089: PUSH
26090: LD_INT 5
26092: ST_TO_ADDR
26093: GO 26191
26095: LD_INT 30
26097: DOUBLE
26098: EQUAL
26099: IFTRUE 26103
26101: GO 26114
26103: POP
// bc_type := b_solar_power ; 31 :
26104: LD_ADDR_OWVAR 42
26108: PUSH
26109: LD_INT 27
26111: ST_TO_ADDR
26112: GO 26191
26114: LD_INT 31
26116: DOUBLE
26117: EQUAL
26118: IFTRUE 26122
26120: GO 26133
26122: POP
// bc_type := b_oil_power ; 32 :
26123: LD_ADDR_OWVAR 42
26127: PUSH
26128: LD_INT 26
26130: ST_TO_ADDR
26131: GO 26191
26133: LD_INT 32
26135: DOUBLE
26136: EQUAL
26137: IFTRUE 26141
26139: GO 26152
26141: POP
// bc_type := b_siberite_power ; 33 :
26142: LD_ADDR_OWVAR 42
26146: PUSH
26147: LD_INT 28
26149: ST_TO_ADDR
26150: GO 26191
26152: LD_INT 33
26154: DOUBLE
26155: EQUAL
26156: IFTRUE 26160
26158: GO 26171
26160: POP
// bc_type := b_oil_mine ; 34 :
26161: LD_ADDR_OWVAR 42
26165: PUSH
26166: LD_INT 29
26168: ST_TO_ADDR
26169: GO 26191
26171: LD_INT 34
26173: DOUBLE
26174: EQUAL
26175: IFTRUE 26179
26177: GO 26190
26179: POP
// bc_type := b_siberite_mine ; end ;
26180: LD_ADDR_OWVAR 42
26184: PUSH
26185: LD_INT 30
26187: ST_TO_ADDR
26188: GO 26191
26190: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
26191: LD_ADDR_VAR 0 8
26195: PUSH
26196: LD_VAR 0 5
26200: PPUSH
26201: LD_VAR 0 6
26205: PPUSH
26206: LD_VAR 0 3
26210: PPUSH
26211: CALL_OW 47
26215: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
26216: LD_OWVAR 42
26220: PUSH
26221: LD_INT 32
26223: PUSH
26224: LD_INT 33
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: IN
26231: IFFALSE 26247
// PlaceWeaponTurret ( b , weapon ) ;
26233: LD_VAR 0 8
26237: PPUSH
26238: LD_VAR 0 4
26242: PPUSH
26243: CALL_OW 431
// end ;
26247: LD_VAR 0 7
26251: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
26252: LD_INT 0
26254: PPUSH
26255: PPUSH
26256: PPUSH
26257: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26258: LD_ADDR_VAR 0 4
26262: PUSH
26263: LD_INT 22
26265: PUSH
26266: LD_OWVAR 2
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: PUSH
26275: LD_INT 2
26277: PUSH
26278: LD_INT 30
26280: PUSH
26281: LD_INT 0
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: PUSH
26288: LD_INT 30
26290: PUSH
26291: LD_INT 1
26293: PUSH
26294: EMPTY
26295: LIST
26296: LIST
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: LIST
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: PPUSH
26307: CALL_OW 69
26311: ST_TO_ADDR
// if not tmp then
26312: LD_VAR 0 4
26316: NOT
26317: IFFALSE 26321
// exit ;
26319: GO 26380
// for i in tmp do
26321: LD_ADDR_VAR 0 2
26325: PUSH
26326: LD_VAR 0 4
26330: PUSH
26331: FOR_IN
26332: IFFALSE 26378
// for j = 1 to 3 do
26334: LD_ADDR_VAR 0 3
26338: PUSH
26339: DOUBLE
26340: LD_INT 1
26342: DEC
26343: ST_TO_ADDR
26344: LD_INT 3
26346: PUSH
26347: FOR_TO
26348: IFFALSE 26374
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
26350: LD_VAR 0 2
26354: PPUSH
26355: CALL_OW 274
26359: PPUSH
26360: LD_VAR 0 3
26364: PPUSH
26365: LD_INT 99999
26367: PPUSH
26368: CALL_OW 277
26372: GO 26347
26374: POP
26375: POP
26376: GO 26331
26378: POP
26379: POP
// end ;
26380: LD_VAR 0 1
26384: RET
// export function hHackSetLevel10 ; var i , j ; begin
26385: LD_INT 0
26387: PPUSH
26388: PPUSH
26389: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26390: LD_ADDR_VAR 0 2
26394: PUSH
26395: LD_INT 21
26397: PUSH
26398: LD_INT 1
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: PPUSH
26405: CALL_OW 69
26409: PUSH
26410: FOR_IN
26411: IFFALSE 26463
// if IsSelected ( i ) then
26413: LD_VAR 0 2
26417: PPUSH
26418: CALL_OW 306
26422: IFFALSE 26461
// begin for j := 1 to 4 do
26424: LD_ADDR_VAR 0 3
26428: PUSH
26429: DOUBLE
26430: LD_INT 1
26432: DEC
26433: ST_TO_ADDR
26434: LD_INT 4
26436: PUSH
26437: FOR_TO
26438: IFFALSE 26459
// SetSkill ( i , j , 10 ) ;
26440: LD_VAR 0 2
26444: PPUSH
26445: LD_VAR 0 3
26449: PPUSH
26450: LD_INT 10
26452: PPUSH
26453: CALL_OW 237
26457: GO 26437
26459: POP
26460: POP
// end ;
26461: GO 26410
26463: POP
26464: POP
// end ;
26465: LD_VAR 0 1
26469: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
26470: LD_INT 0
26472: PPUSH
26473: PPUSH
26474: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
26475: LD_ADDR_VAR 0 2
26479: PUSH
26480: LD_INT 22
26482: PUSH
26483: LD_OWVAR 2
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PUSH
26492: LD_INT 21
26494: PUSH
26495: LD_INT 1
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: PUSH
26502: EMPTY
26503: LIST
26504: LIST
26505: PPUSH
26506: CALL_OW 69
26510: PUSH
26511: FOR_IN
26512: IFFALSE 26553
// begin for j := 1 to 4 do
26514: LD_ADDR_VAR 0 3
26518: PUSH
26519: DOUBLE
26520: LD_INT 1
26522: DEC
26523: ST_TO_ADDR
26524: LD_INT 4
26526: PUSH
26527: FOR_TO
26528: IFFALSE 26549
// SetSkill ( i , j , 10 ) ;
26530: LD_VAR 0 2
26534: PPUSH
26535: LD_VAR 0 3
26539: PPUSH
26540: LD_INT 10
26542: PPUSH
26543: CALL_OW 237
26547: GO 26527
26549: POP
26550: POP
// end ;
26551: GO 26511
26553: POP
26554: POP
// end ;
26555: LD_VAR 0 1
26559: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
26560: LD_INT 0
26562: PPUSH
// uc_side := your_side ;
26563: LD_ADDR_OWVAR 20
26567: PUSH
26568: LD_OWVAR 2
26572: ST_TO_ADDR
// uc_nation := nation ;
26573: LD_ADDR_OWVAR 21
26577: PUSH
26578: LD_VAR 0 1
26582: ST_TO_ADDR
// InitHc ;
26583: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
26587: LD_INT 0
26589: PPUSH
26590: LD_VAR 0 2
26594: PPUSH
26595: LD_VAR 0 3
26599: PPUSH
26600: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
26604: LD_VAR 0 4
26608: PPUSH
26609: LD_VAR 0 5
26613: PPUSH
26614: CALL_OW 428
26618: PUSH
26619: LD_INT 0
26621: EQUAL
26622: IFFALSE 26646
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
26624: CALL_OW 44
26628: PPUSH
26629: LD_VAR 0 4
26633: PPUSH
26634: LD_VAR 0 5
26638: PPUSH
26639: LD_INT 1
26641: PPUSH
26642: CALL_OW 48
// end ;
26646: LD_VAR 0 6
26650: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
26651: LD_INT 0
26653: PPUSH
26654: PPUSH
// uc_side := your_side ;
26655: LD_ADDR_OWVAR 20
26659: PUSH
26660: LD_OWVAR 2
26664: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
26665: LD_VAR 0 1
26669: PUSH
26670: LD_INT 1
26672: PUSH
26673: LD_INT 2
26675: PUSH
26676: LD_INT 3
26678: PUSH
26679: LD_INT 4
26681: PUSH
26682: LD_INT 5
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: IN
26692: IFFALSE 26704
// uc_nation := nation_american else
26694: LD_ADDR_OWVAR 21
26698: PUSH
26699: LD_INT 1
26701: ST_TO_ADDR
26702: GO 26747
// if chassis in [ 11 , 12 , 13 , 14 ] then
26704: LD_VAR 0 1
26708: PUSH
26709: LD_INT 11
26711: PUSH
26712: LD_INT 12
26714: PUSH
26715: LD_INT 13
26717: PUSH
26718: LD_INT 14
26720: PUSH
26721: EMPTY
26722: LIST
26723: LIST
26724: LIST
26725: LIST
26726: IN
26727: IFFALSE 26739
// uc_nation := nation_arabian else
26729: LD_ADDR_OWVAR 21
26733: PUSH
26734: LD_INT 2
26736: ST_TO_ADDR
26737: GO 26747
// uc_nation := nation_russian ;
26739: LD_ADDR_OWVAR 21
26743: PUSH
26744: LD_INT 3
26746: ST_TO_ADDR
// vc_chassis := chassis ;
26747: LD_ADDR_OWVAR 37
26751: PUSH
26752: LD_VAR 0 1
26756: ST_TO_ADDR
// vc_engine := engine ;
26757: LD_ADDR_OWVAR 39
26761: PUSH
26762: LD_VAR 0 2
26766: ST_TO_ADDR
// vc_control := control ;
26767: LD_ADDR_OWVAR 38
26771: PUSH
26772: LD_VAR 0 3
26776: ST_TO_ADDR
// vc_weapon := weapon ;
26777: LD_ADDR_OWVAR 40
26781: PUSH
26782: LD_VAR 0 4
26786: ST_TO_ADDR
// un := CreateVehicle ;
26787: LD_ADDR_VAR 0 8
26791: PUSH
26792: CALL_OW 45
26796: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
26797: LD_VAR 0 8
26801: PPUSH
26802: LD_INT 0
26804: PPUSH
26805: LD_INT 5
26807: PPUSH
26808: CALL_OW 12
26812: PPUSH
26813: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
26817: LD_VAR 0 8
26821: PPUSH
26822: LD_VAR 0 5
26826: PPUSH
26827: LD_VAR 0 6
26831: PPUSH
26832: LD_INT 1
26834: PPUSH
26835: CALL_OW 48
// end ;
26839: LD_VAR 0 7
26843: RET
// export hInvincible ; every 1 do
26844: GO 26846
26846: DISABLE
// hInvincible := [ ] ;
26847: LD_ADDR_EXP 90
26851: PUSH
26852: EMPTY
26853: ST_TO_ADDR
26854: END
// every 10 do var i ;
26855: GO 26857
26857: DISABLE
26858: LD_INT 0
26860: PPUSH
// begin enable ;
26861: ENABLE
// if not hInvincible then
26862: LD_EXP 90
26866: NOT
26867: IFFALSE 26871
// exit ;
26869: GO 26915
// for i in hInvincible do
26871: LD_ADDR_VAR 0 1
26875: PUSH
26876: LD_EXP 90
26880: PUSH
26881: FOR_IN
26882: IFFALSE 26913
// if GetLives ( i ) < 1000 then
26884: LD_VAR 0 1
26888: PPUSH
26889: CALL_OW 256
26893: PUSH
26894: LD_INT 1000
26896: LESS
26897: IFFALSE 26911
// SetLives ( i , 1000 ) ;
26899: LD_VAR 0 1
26903: PPUSH
26904: LD_INT 1000
26906: PPUSH
26907: CALL_OW 234
26911: GO 26881
26913: POP
26914: POP
// end ;
26915: PPOPN 1
26917: END
// export function hHackInvincible ; var i ; begin
26918: LD_INT 0
26920: PPUSH
26921: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
26922: LD_ADDR_VAR 0 2
26926: PUSH
26927: LD_INT 2
26929: PUSH
26930: LD_INT 21
26932: PUSH
26933: LD_INT 1
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: PUSH
26940: LD_INT 21
26942: PUSH
26943: LD_INT 2
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: PUSH
26950: EMPTY
26951: LIST
26952: LIST
26953: LIST
26954: PPUSH
26955: CALL_OW 69
26959: PUSH
26960: FOR_IN
26961: IFFALSE 27022
// if IsSelected ( i ) then
26963: LD_VAR 0 2
26967: PPUSH
26968: CALL_OW 306
26972: IFFALSE 27020
// begin if i in hInvincible then
26974: LD_VAR 0 2
26978: PUSH
26979: LD_EXP 90
26983: IN
26984: IFFALSE 27004
// hInvincible := hInvincible diff i else
26986: LD_ADDR_EXP 90
26990: PUSH
26991: LD_EXP 90
26995: PUSH
26996: LD_VAR 0 2
27000: DIFF
27001: ST_TO_ADDR
27002: GO 27020
// hInvincible := hInvincible union i ;
27004: LD_ADDR_EXP 90
27008: PUSH
27009: LD_EXP 90
27013: PUSH
27014: LD_VAR 0 2
27018: UNION
27019: ST_TO_ADDR
// end ;
27020: GO 26960
27022: POP
27023: POP
// end ;
27024: LD_VAR 0 1
27028: RET
// export function hHackInvisible ; var i , j ; begin
27029: LD_INT 0
27031: PPUSH
27032: PPUSH
27033: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27034: LD_ADDR_VAR 0 2
27038: PUSH
27039: LD_INT 21
27041: PUSH
27042: LD_INT 1
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: PPUSH
27049: CALL_OW 69
27053: PUSH
27054: FOR_IN
27055: IFFALSE 27079
// if IsSelected ( i ) then
27057: LD_VAR 0 2
27061: PPUSH
27062: CALL_OW 306
27066: IFFALSE 27077
// ComForceInvisible ( i ) ;
27068: LD_VAR 0 2
27072: PPUSH
27073: CALL_OW 496
27077: GO 27054
27079: POP
27080: POP
// end ;
27081: LD_VAR 0 1
27085: RET
// export function hHackChangeYourSide ; begin
27086: LD_INT 0
27088: PPUSH
// if your_side = 8 then
27089: LD_OWVAR 2
27093: PUSH
27094: LD_INT 8
27096: EQUAL
27097: IFFALSE 27109
// your_side := 0 else
27099: LD_ADDR_OWVAR 2
27103: PUSH
27104: LD_INT 0
27106: ST_TO_ADDR
27107: GO 27123
// your_side := your_side + 1 ;
27109: LD_ADDR_OWVAR 2
27113: PUSH
27114: LD_OWVAR 2
27118: PUSH
27119: LD_INT 1
27121: PLUS
27122: ST_TO_ADDR
// end ;
27123: LD_VAR 0 1
27127: RET
// export function hHackChangeUnitSide ; var i , j ; begin
27128: LD_INT 0
27130: PPUSH
27131: PPUSH
27132: PPUSH
// for i in all_units do
27133: LD_ADDR_VAR 0 2
27137: PUSH
27138: LD_OWVAR 3
27142: PUSH
27143: FOR_IN
27144: IFFALSE 27222
// if IsSelected ( i ) then
27146: LD_VAR 0 2
27150: PPUSH
27151: CALL_OW 306
27155: IFFALSE 27220
// begin j := GetSide ( i ) ;
27157: LD_ADDR_VAR 0 3
27161: PUSH
27162: LD_VAR 0 2
27166: PPUSH
27167: CALL_OW 255
27171: ST_TO_ADDR
// if j = 8 then
27172: LD_VAR 0 3
27176: PUSH
27177: LD_INT 8
27179: EQUAL
27180: IFFALSE 27192
// j := 0 else
27182: LD_ADDR_VAR 0 3
27186: PUSH
27187: LD_INT 0
27189: ST_TO_ADDR
27190: GO 27206
// j := j + 1 ;
27192: LD_ADDR_VAR 0 3
27196: PUSH
27197: LD_VAR 0 3
27201: PUSH
27202: LD_INT 1
27204: PLUS
27205: ST_TO_ADDR
// SetSide ( i , j ) ;
27206: LD_VAR 0 2
27210: PPUSH
27211: LD_VAR 0 3
27215: PPUSH
27216: CALL_OW 235
// end ;
27220: GO 27143
27222: POP
27223: POP
// end ;
27224: LD_VAR 0 1
27228: RET
// export function hHackFog ; begin
27229: LD_INT 0
27231: PPUSH
// FogOff ( true ) ;
27232: LD_INT 1
27234: PPUSH
27235: CALL_OW 344
// end ;
27239: LD_VAR 0 1
27243: RET
// export function hHackTeleport ( unit , x , y ) ; begin
27244: LD_INT 0
27246: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
27247: LD_VAR 0 1
27251: PPUSH
27252: LD_VAR 0 2
27256: PPUSH
27257: LD_VAR 0 3
27261: PPUSH
27262: LD_INT 1
27264: PPUSH
27265: LD_INT 1
27267: PPUSH
27268: CALL_OW 483
// CenterOnXY ( x , y ) ;
27272: LD_VAR 0 2
27276: PPUSH
27277: LD_VAR 0 3
27281: PPUSH
27282: CALL_OW 84
// end ;
27286: LD_VAR 0 4
27290: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
27291: LD_INT 0
27293: PPUSH
27294: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
27295: LD_VAR 0 1
27299: NOT
27300: PUSH
27301: LD_VAR 0 2
27305: PPUSH
27306: LD_VAR 0 3
27310: PPUSH
27311: CALL_OW 488
27315: NOT
27316: OR
27317: PUSH
27318: LD_VAR 0 1
27322: PPUSH
27323: CALL_OW 266
27327: PUSH
27328: LD_INT 3
27330: NONEQUAL
27331: PUSH
27332: LD_VAR 0 1
27336: PPUSH
27337: CALL_OW 247
27341: PUSH
27342: LD_INT 1
27344: EQUAL
27345: NOT
27346: AND
27347: OR
27348: IFFALSE 27352
// exit ;
27350: GO 27501
// if GetType ( factory ) = unit_human then
27352: LD_VAR 0 1
27356: PPUSH
27357: CALL_OW 247
27361: PUSH
27362: LD_INT 1
27364: EQUAL
27365: IFFALSE 27382
// factory := IsInUnit ( factory ) ;
27367: LD_ADDR_VAR 0 1
27371: PUSH
27372: LD_VAR 0 1
27376: PPUSH
27377: CALL_OW 310
27381: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
27382: LD_VAR 0 1
27386: PPUSH
27387: CALL_OW 266
27391: PUSH
27392: LD_INT 3
27394: NONEQUAL
27395: IFFALSE 27399
// exit ;
27397: GO 27501
// if HexInfo ( x , y ) = factory then
27399: LD_VAR 0 2
27403: PPUSH
27404: LD_VAR 0 3
27408: PPUSH
27409: CALL_OW 428
27413: PUSH
27414: LD_VAR 0 1
27418: EQUAL
27419: IFFALSE 27446
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
27421: LD_ADDR_EXP 91
27425: PUSH
27426: LD_EXP 91
27430: PPUSH
27431: LD_VAR 0 1
27435: PPUSH
27436: LD_INT 0
27438: PPUSH
27439: CALL_OW 1
27443: ST_TO_ADDR
27444: GO 27497
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
27446: LD_ADDR_EXP 91
27450: PUSH
27451: LD_EXP 91
27455: PPUSH
27456: LD_VAR 0 1
27460: PPUSH
27461: LD_VAR 0 1
27465: PPUSH
27466: CALL_OW 255
27470: PUSH
27471: LD_VAR 0 1
27475: PUSH
27476: LD_VAR 0 2
27480: PUSH
27481: LD_VAR 0 3
27485: PUSH
27486: EMPTY
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: PPUSH
27492: CALL_OW 1
27496: ST_TO_ADDR
// UpdateFactoryWaypoints ;
27497: CALL 27506 0 0
// end ;
27501: LD_VAR 0 4
27505: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
27506: LD_INT 0
27508: PPUSH
27509: PPUSH
27510: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
27511: LD_STRING resetFactoryWaypoint();
27513: PPUSH
27514: CALL_OW 559
// if factoryWaypoints then
27518: LD_EXP 91
27522: IFFALSE 27648
// begin list := PrepareArray ( factoryWaypoints ) ;
27524: LD_ADDR_VAR 0 3
27528: PUSH
27529: LD_EXP 91
27533: PPUSH
27534: CALL 74117 0 1
27538: ST_TO_ADDR
// for i := 1 to list do
27539: LD_ADDR_VAR 0 2
27543: PUSH
27544: DOUBLE
27545: LD_INT 1
27547: DEC
27548: ST_TO_ADDR
27549: LD_VAR 0 3
27553: PUSH
27554: FOR_TO
27555: IFFALSE 27646
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27557: LD_STRING setFactoryWaypointXY(
27559: PUSH
27560: LD_VAR 0 3
27564: PUSH
27565: LD_VAR 0 2
27569: ARRAY
27570: PUSH
27571: LD_INT 1
27573: ARRAY
27574: STR
27575: PUSH
27576: LD_STRING ,
27578: STR
27579: PUSH
27580: LD_VAR 0 3
27584: PUSH
27585: LD_VAR 0 2
27589: ARRAY
27590: PUSH
27591: LD_INT 2
27593: ARRAY
27594: STR
27595: PUSH
27596: LD_STRING ,
27598: STR
27599: PUSH
27600: LD_VAR 0 3
27604: PUSH
27605: LD_VAR 0 2
27609: ARRAY
27610: PUSH
27611: LD_INT 3
27613: ARRAY
27614: STR
27615: PUSH
27616: LD_STRING ,
27618: STR
27619: PUSH
27620: LD_VAR 0 3
27624: PUSH
27625: LD_VAR 0 2
27629: ARRAY
27630: PUSH
27631: LD_INT 4
27633: ARRAY
27634: STR
27635: PUSH
27636: LD_STRING )
27638: STR
27639: PPUSH
27640: CALL_OW 559
27644: GO 27554
27646: POP
27647: POP
// end ; end ;
27648: LD_VAR 0 1
27652: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
27653: LD_INT 0
27655: PPUSH
// if HexInfo ( x , y ) = warehouse then
27656: LD_VAR 0 2
27660: PPUSH
27661: LD_VAR 0 3
27665: PPUSH
27666: CALL_OW 428
27670: PUSH
27671: LD_VAR 0 1
27675: EQUAL
27676: IFFALSE 27703
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
27678: LD_ADDR_EXP 92
27682: PUSH
27683: LD_EXP 92
27687: PPUSH
27688: LD_VAR 0 1
27692: PPUSH
27693: LD_INT 0
27695: PPUSH
27696: CALL_OW 1
27700: ST_TO_ADDR
27701: GO 27754
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
27703: LD_ADDR_EXP 92
27707: PUSH
27708: LD_EXP 92
27712: PPUSH
27713: LD_VAR 0 1
27717: PPUSH
27718: LD_VAR 0 1
27722: PPUSH
27723: CALL_OW 255
27727: PUSH
27728: LD_VAR 0 1
27732: PUSH
27733: LD_VAR 0 2
27737: PUSH
27738: LD_VAR 0 3
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: LIST
27747: LIST
27748: PPUSH
27749: CALL_OW 1
27753: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
27754: CALL 27763 0 0
// end ;
27758: LD_VAR 0 4
27762: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
27763: LD_INT 0
27765: PPUSH
27766: PPUSH
27767: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
27768: LD_STRING resetWarehouseGatheringPoints();
27770: PPUSH
27771: CALL_OW 559
// if warehouseGatheringPoints then
27775: LD_EXP 92
27779: IFFALSE 27905
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
27781: LD_ADDR_VAR 0 3
27785: PUSH
27786: LD_EXP 92
27790: PPUSH
27791: CALL 74117 0 1
27795: ST_TO_ADDR
// for i := 1 to list do
27796: LD_ADDR_VAR 0 2
27800: PUSH
27801: DOUBLE
27802: LD_INT 1
27804: DEC
27805: ST_TO_ADDR
27806: LD_VAR 0 3
27810: PUSH
27811: FOR_TO
27812: IFFALSE 27903
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27814: LD_STRING setWarehouseGatheringPointXY(
27816: PUSH
27817: LD_VAR 0 3
27821: PUSH
27822: LD_VAR 0 2
27826: ARRAY
27827: PUSH
27828: LD_INT 1
27830: ARRAY
27831: STR
27832: PUSH
27833: LD_STRING ,
27835: STR
27836: PUSH
27837: LD_VAR 0 3
27841: PUSH
27842: LD_VAR 0 2
27846: ARRAY
27847: PUSH
27848: LD_INT 2
27850: ARRAY
27851: STR
27852: PUSH
27853: LD_STRING ,
27855: STR
27856: PUSH
27857: LD_VAR 0 3
27861: PUSH
27862: LD_VAR 0 2
27866: ARRAY
27867: PUSH
27868: LD_INT 3
27870: ARRAY
27871: STR
27872: PUSH
27873: LD_STRING ,
27875: STR
27876: PUSH
27877: LD_VAR 0 3
27881: PUSH
27882: LD_VAR 0 2
27886: ARRAY
27887: PUSH
27888: LD_INT 4
27890: ARRAY
27891: STR
27892: PUSH
27893: LD_STRING )
27895: STR
27896: PPUSH
27897: CALL_OW 559
27901: GO 27811
27903: POP
27904: POP
// end ; end ;
27905: LD_VAR 0 1
27909: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
27910: LD_EXP 92
27914: IFFALSE 28599
27916: GO 27918
27918: DISABLE
27919: LD_INT 0
27921: PPUSH
27922: PPUSH
27923: PPUSH
27924: PPUSH
27925: PPUSH
27926: PPUSH
27927: PPUSH
27928: PPUSH
27929: PPUSH
// begin enable ;
27930: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
27931: LD_ADDR_VAR 0 3
27935: PUSH
27936: LD_EXP 92
27940: PPUSH
27941: CALL 74117 0 1
27945: ST_TO_ADDR
// if not list then
27946: LD_VAR 0 3
27950: NOT
27951: IFFALSE 27955
// exit ;
27953: GO 28599
// for i := 1 to list do
27955: LD_ADDR_VAR 0 1
27959: PUSH
27960: DOUBLE
27961: LD_INT 1
27963: DEC
27964: ST_TO_ADDR
27965: LD_VAR 0 3
27969: PUSH
27970: FOR_TO
27971: IFFALSE 28597
// begin depot := list [ i ] [ 2 ] ;
27973: LD_ADDR_VAR 0 8
27977: PUSH
27978: LD_VAR 0 3
27982: PUSH
27983: LD_VAR 0 1
27987: ARRAY
27988: PUSH
27989: LD_INT 2
27991: ARRAY
27992: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
27993: LD_ADDR_VAR 0 5
27997: PUSH
27998: LD_VAR 0 3
28002: PUSH
28003: LD_VAR 0 1
28007: ARRAY
28008: PUSH
28009: LD_INT 1
28011: ARRAY
28012: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
28013: LD_VAR 0 8
28017: PPUSH
28018: CALL_OW 301
28022: PUSH
28023: LD_VAR 0 5
28027: PUSH
28028: LD_VAR 0 8
28032: PPUSH
28033: CALL_OW 255
28037: NONEQUAL
28038: OR
28039: IFFALSE 28068
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
28041: LD_ADDR_EXP 92
28045: PUSH
28046: LD_EXP 92
28050: PPUSH
28051: LD_VAR 0 8
28055: PPUSH
28056: LD_INT 0
28058: PPUSH
28059: CALL_OW 1
28063: ST_TO_ADDR
// exit ;
28064: POP
28065: POP
28066: GO 28599
// end ; x := list [ i ] [ 3 ] ;
28068: LD_ADDR_VAR 0 6
28072: PUSH
28073: LD_VAR 0 3
28077: PUSH
28078: LD_VAR 0 1
28082: ARRAY
28083: PUSH
28084: LD_INT 3
28086: ARRAY
28087: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
28088: LD_ADDR_VAR 0 7
28092: PUSH
28093: LD_VAR 0 3
28097: PUSH
28098: LD_VAR 0 1
28102: ARRAY
28103: PUSH
28104: LD_INT 4
28106: ARRAY
28107: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
28108: LD_ADDR_VAR 0 9
28112: PUSH
28113: LD_VAR 0 6
28117: PPUSH
28118: LD_VAR 0 7
28122: PPUSH
28123: LD_INT 16
28125: PPUSH
28126: CALL 72705 0 3
28130: ST_TO_ADDR
// if not cratesNearbyPoint then
28131: LD_VAR 0 9
28135: NOT
28136: IFFALSE 28142
// exit ;
28138: POP
28139: POP
28140: GO 28599
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
28142: LD_ADDR_VAR 0 4
28146: PUSH
28147: LD_INT 22
28149: PUSH
28150: LD_VAR 0 5
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: PUSH
28159: LD_INT 3
28161: PUSH
28162: LD_INT 60
28164: PUSH
28165: EMPTY
28166: LIST
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: LD_INT 91
28174: PUSH
28175: LD_VAR 0 8
28179: PUSH
28180: LD_INT 6
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: LIST
28187: PUSH
28188: LD_INT 2
28190: PUSH
28191: LD_INT 25
28193: PUSH
28194: LD_INT 2
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: PUSH
28201: LD_INT 25
28203: PUSH
28204: LD_INT 16
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: LIST
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: LIST
28220: LIST
28221: PPUSH
28222: CALL_OW 69
28226: PUSH
28227: LD_VAR 0 8
28231: PPUSH
28232: CALL_OW 313
28236: PPUSH
28237: LD_INT 3
28239: PUSH
28240: LD_INT 60
28242: PUSH
28243: EMPTY
28244: LIST
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: PUSH
28250: LD_INT 2
28252: PUSH
28253: LD_INT 25
28255: PUSH
28256: LD_INT 2
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: PUSH
28263: LD_INT 25
28265: PUSH
28266: LD_INT 16
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: LIST
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: PPUSH
28282: CALL_OW 72
28286: UNION
28287: ST_TO_ADDR
// if tmp then
28288: LD_VAR 0 4
28292: IFFALSE 28372
// begin tmp := ShrinkArray ( tmp , 3 ) ;
28294: LD_ADDR_VAR 0 4
28298: PUSH
28299: LD_VAR 0 4
28303: PPUSH
28304: LD_INT 3
28306: PPUSH
28307: CALL 70674 0 2
28311: ST_TO_ADDR
// for j in tmp do
28312: LD_ADDR_VAR 0 2
28316: PUSH
28317: LD_VAR 0 4
28321: PUSH
28322: FOR_IN
28323: IFFALSE 28366
// begin if IsInUnit ( j ) then
28325: LD_VAR 0 2
28329: PPUSH
28330: CALL_OW 310
28334: IFFALSE 28345
// ComExit ( j ) ;
28336: LD_VAR 0 2
28340: PPUSH
28341: CALL 70757 0 1
// AddComCollect ( j , x , y ) ;
28345: LD_VAR 0 2
28349: PPUSH
28350: LD_VAR 0 6
28354: PPUSH
28355: LD_VAR 0 7
28359: PPUSH
28360: CALL_OW 177
// end ;
28364: GO 28322
28366: POP
28367: POP
// exit ;
28368: POP
28369: POP
28370: GO 28599
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
28372: LD_ADDR_VAR 0 4
28376: PUSH
28377: LD_INT 22
28379: PUSH
28380: LD_VAR 0 5
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PUSH
28389: LD_INT 91
28391: PUSH
28392: LD_VAR 0 8
28396: PUSH
28397: LD_INT 8
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: LIST
28404: PUSH
28405: LD_INT 2
28407: PUSH
28408: LD_INT 34
28410: PUSH
28411: LD_INT 12
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: PUSH
28418: LD_INT 34
28420: PUSH
28421: LD_INT 51
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: PUSH
28428: LD_INT 34
28430: PUSH
28431: LD_INT 32
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: LD_INT 34
28440: PUSH
28441: LD_INT 89
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: LIST
28452: LIST
28453: LIST
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: LIST
28459: PPUSH
28460: CALL_OW 69
28464: ST_TO_ADDR
// if tmp then
28465: LD_VAR 0 4
28469: IFFALSE 28595
// begin for j in tmp do
28471: LD_ADDR_VAR 0 2
28475: PUSH
28476: LD_VAR 0 4
28480: PUSH
28481: FOR_IN
28482: IFFALSE 28593
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
28484: LD_VAR 0 2
28488: PPUSH
28489: CALL_OW 262
28493: PUSH
28494: LD_INT 3
28496: EQUAL
28497: PUSH
28498: LD_VAR 0 2
28502: PPUSH
28503: CALL_OW 261
28507: PUSH
28508: LD_INT 20
28510: GREATER
28511: OR
28512: PUSH
28513: LD_VAR 0 2
28517: PPUSH
28518: CALL_OW 314
28522: NOT
28523: AND
28524: PUSH
28525: LD_VAR 0 2
28529: PPUSH
28530: CALL_OW 263
28534: PUSH
28535: LD_INT 1
28537: NONEQUAL
28538: PUSH
28539: LD_VAR 0 2
28543: PPUSH
28544: CALL_OW 311
28548: OR
28549: AND
28550: IFFALSE 28591
// begin ComCollect ( j , x , y ) ;
28552: LD_VAR 0 2
28556: PPUSH
28557: LD_VAR 0 6
28561: PPUSH
28562: LD_VAR 0 7
28566: PPUSH
28567: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
28571: LD_VAR 0 2
28575: PPUSH
28576: LD_VAR 0 8
28580: PPUSH
28581: CALL_OW 172
// exit ;
28585: POP
28586: POP
28587: POP
28588: POP
28589: GO 28599
// end ;
28591: GO 28481
28593: POP
28594: POP
// end ; end ;
28595: GO 27970
28597: POP
28598: POP
// end ; end_of_file
28599: PPOPN 9
28601: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
28602: LD_INT 0
28604: PPUSH
28605: PPUSH
28606: PPUSH
28607: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
28608: LD_VAR 0 1
28612: PPUSH
28613: CALL_OW 264
28617: PUSH
28618: LD_INT 91
28620: EQUAL
28621: IFFALSE 28693
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28623: LD_INT 68
28625: PPUSH
28626: LD_VAR 0 1
28630: PPUSH
28631: CALL_OW 255
28635: PPUSH
28636: CALL_OW 321
28640: PUSH
28641: LD_INT 2
28643: EQUAL
28644: IFFALSE 28656
// eff := 70 else
28646: LD_ADDR_VAR 0 4
28650: PUSH
28651: LD_INT 70
28653: ST_TO_ADDR
28654: GO 28664
// eff := 30 ;
28656: LD_ADDR_VAR 0 4
28660: PUSH
28661: LD_INT 30
28663: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28664: LD_VAR 0 1
28668: PPUSH
28669: CALL_OW 250
28673: PPUSH
28674: LD_VAR 0 1
28678: PPUSH
28679: CALL_OW 251
28683: PPUSH
28684: LD_VAR 0 4
28688: PPUSH
28689: CALL_OW 495
// end ; end ;
28693: LD_VAR 0 2
28697: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
28698: LD_INT 0
28700: PPUSH
// end ;
28701: LD_VAR 0 4
28705: RET
// export function SOS_Command ( cmd ) ; begin
28706: LD_INT 0
28708: PPUSH
// end ;
28709: LD_VAR 0 2
28713: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
28714: LD_INT 0
28716: PPUSH
// end ;
28717: LD_VAR 0 6
28721: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
28722: LD_INT 0
28724: PPUSH
28725: PPUSH
// if not vehicle or not factory then
28726: LD_VAR 0 1
28730: NOT
28731: PUSH
28732: LD_VAR 0 2
28736: NOT
28737: OR
28738: IFFALSE 28742
// exit ;
28740: GO 28973
// if factoryWaypoints >= factory then
28742: LD_EXP 91
28746: PUSH
28747: LD_VAR 0 2
28751: GREATEREQUAL
28752: IFFALSE 28973
// if factoryWaypoints [ factory ] then
28754: LD_EXP 91
28758: PUSH
28759: LD_VAR 0 2
28763: ARRAY
28764: IFFALSE 28973
// begin if GetControl ( vehicle ) = control_manual then
28766: LD_VAR 0 1
28770: PPUSH
28771: CALL_OW 263
28775: PUSH
28776: LD_INT 1
28778: EQUAL
28779: IFFALSE 28860
// begin driver := IsDrivenBy ( vehicle ) ;
28781: LD_ADDR_VAR 0 4
28785: PUSH
28786: LD_VAR 0 1
28790: PPUSH
28791: CALL_OW 311
28795: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28796: LD_VAR 0 4
28800: PPUSH
28801: LD_EXP 91
28805: PUSH
28806: LD_VAR 0 2
28810: ARRAY
28811: PUSH
28812: LD_INT 3
28814: ARRAY
28815: PPUSH
28816: LD_EXP 91
28820: PUSH
28821: LD_VAR 0 2
28825: ARRAY
28826: PUSH
28827: LD_INT 4
28829: ARRAY
28830: PPUSH
28831: CALL_OW 171
// AddComExitVehicle ( driver ) ;
28835: LD_VAR 0 4
28839: PPUSH
28840: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
28844: LD_VAR 0 4
28848: PPUSH
28849: LD_VAR 0 2
28853: PPUSH
28854: CALL_OW 180
// end else
28858: GO 28973
// if GetControl ( vehicle ) = control_remote then
28860: LD_VAR 0 1
28864: PPUSH
28865: CALL_OW 263
28869: PUSH
28870: LD_INT 2
28872: EQUAL
28873: IFFALSE 28934
// begin wait ( 0 0$2 ) ;
28875: LD_INT 70
28877: PPUSH
28878: CALL_OW 67
// if Connect ( vehicle ) then
28882: LD_VAR 0 1
28886: PPUSH
28887: CALL 40997 0 1
28891: IFFALSE 28932
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28893: LD_VAR 0 1
28897: PPUSH
28898: LD_EXP 91
28902: PUSH
28903: LD_VAR 0 2
28907: ARRAY
28908: PUSH
28909: LD_INT 3
28911: ARRAY
28912: PPUSH
28913: LD_EXP 91
28917: PUSH
28918: LD_VAR 0 2
28922: ARRAY
28923: PUSH
28924: LD_INT 4
28926: ARRAY
28927: PPUSH
28928: CALL_OW 171
// end else
28932: GO 28973
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28934: LD_VAR 0 1
28938: PPUSH
28939: LD_EXP 91
28943: PUSH
28944: LD_VAR 0 2
28948: ARRAY
28949: PUSH
28950: LD_INT 3
28952: ARRAY
28953: PPUSH
28954: LD_EXP 91
28958: PUSH
28959: LD_VAR 0 2
28963: ARRAY
28964: PUSH
28965: LD_INT 4
28967: ARRAY
28968: PPUSH
28969: CALL_OW 171
// end ; end ;
28973: LD_VAR 0 3
28977: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
28978: LD_INT 0
28980: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
28981: LD_VAR 0 1
28985: PUSH
28986: LD_INT 250
28988: EQUAL
28989: PUSH
28990: LD_VAR 0 2
28994: PPUSH
28995: CALL_OW 264
28999: PUSH
29000: LD_INT 81
29002: EQUAL
29003: AND
29004: IFFALSE 29025
// MinerPlaceMine ( unit , x , y ) ;
29006: LD_VAR 0 2
29010: PPUSH
29011: LD_VAR 0 4
29015: PPUSH
29016: LD_VAR 0 5
29020: PPUSH
29021: CALL 31410 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
29025: LD_VAR 0 1
29029: PUSH
29030: LD_INT 251
29032: EQUAL
29033: PUSH
29034: LD_VAR 0 2
29038: PPUSH
29039: CALL_OW 264
29043: PUSH
29044: LD_INT 81
29046: EQUAL
29047: AND
29048: IFFALSE 29069
// MinerDetonateMine ( unit , x , y ) ;
29050: LD_VAR 0 2
29054: PPUSH
29055: LD_VAR 0 4
29059: PPUSH
29060: LD_VAR 0 5
29064: PPUSH
29065: CALL 31685 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
29069: LD_VAR 0 1
29073: PUSH
29074: LD_INT 252
29076: EQUAL
29077: PUSH
29078: LD_VAR 0 2
29082: PPUSH
29083: CALL_OW 264
29087: PUSH
29088: LD_INT 81
29090: EQUAL
29091: AND
29092: IFFALSE 29113
// MinerCreateMinefield ( unit , x , y ) ;
29094: LD_VAR 0 2
29098: PPUSH
29099: LD_VAR 0 4
29103: PPUSH
29104: LD_VAR 0 5
29108: PPUSH
29109: CALL 32102 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
29113: LD_VAR 0 1
29117: PUSH
29118: LD_INT 253
29120: EQUAL
29121: PUSH
29122: LD_VAR 0 2
29126: PPUSH
29127: CALL_OW 257
29131: PUSH
29132: LD_INT 5
29134: EQUAL
29135: AND
29136: IFFALSE 29157
// ComBinocular ( unit , x , y ) ;
29138: LD_VAR 0 2
29142: PPUSH
29143: LD_VAR 0 4
29147: PPUSH
29148: LD_VAR 0 5
29152: PPUSH
29153: CALL 32471 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
29157: LD_VAR 0 1
29161: PUSH
29162: LD_INT 254
29164: EQUAL
29165: PUSH
29166: LD_VAR 0 2
29170: PPUSH
29171: CALL_OW 264
29175: PUSH
29176: LD_INT 99
29178: EQUAL
29179: AND
29180: PUSH
29181: LD_VAR 0 3
29185: PPUSH
29186: CALL_OW 263
29190: PUSH
29191: LD_INT 3
29193: EQUAL
29194: AND
29195: IFFALSE 29211
// HackDestroyVehicle ( unit , selectedUnit ) ;
29197: LD_VAR 0 2
29201: PPUSH
29202: LD_VAR 0 3
29206: PPUSH
29207: CALL 30774 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
29211: LD_VAR 0 1
29215: PUSH
29216: LD_INT 255
29218: EQUAL
29219: PUSH
29220: LD_VAR 0 2
29224: PPUSH
29225: CALL_OW 264
29229: PUSH
29230: LD_INT 14
29232: PUSH
29233: LD_INT 53
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: IN
29240: AND
29241: PUSH
29242: LD_VAR 0 4
29246: PPUSH
29247: LD_VAR 0 5
29251: PPUSH
29252: CALL_OW 488
29256: AND
29257: IFFALSE 29281
// CutTreeXYR ( unit , x , y , 12 ) ;
29259: LD_VAR 0 2
29263: PPUSH
29264: LD_VAR 0 4
29268: PPUSH
29269: LD_VAR 0 5
29273: PPUSH
29274: LD_INT 12
29276: PPUSH
29277: CALL 29344 0 4
// if cmd = 256 then
29281: LD_VAR 0 1
29285: PUSH
29286: LD_INT 256
29288: EQUAL
29289: IFFALSE 29310
// SetFactoryWaypoint ( unit , x , y ) ;
29291: LD_VAR 0 2
29295: PPUSH
29296: LD_VAR 0 4
29300: PPUSH
29301: LD_VAR 0 5
29305: PPUSH
29306: CALL 27291 0 3
// if cmd = 257 then
29310: LD_VAR 0 1
29314: PUSH
29315: LD_INT 257
29317: EQUAL
29318: IFFALSE 29339
// SetWarehouseGatheringPoint ( unit , x , y ) ;
29320: LD_VAR 0 2
29324: PPUSH
29325: LD_VAR 0 4
29329: PPUSH
29330: LD_VAR 0 5
29334: PPUSH
29335: CALL 27653 0 3
// end ;
29339: LD_VAR 0 6
29343: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
29344: LD_INT 0
29346: PPUSH
29347: PPUSH
29348: PPUSH
29349: PPUSH
29350: PPUSH
29351: PPUSH
29352: PPUSH
29353: PPUSH
29354: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
29355: LD_VAR 0 1
29359: NOT
29360: PUSH
29361: LD_VAR 0 2
29365: PPUSH
29366: LD_VAR 0 3
29370: PPUSH
29371: CALL_OW 488
29375: NOT
29376: OR
29377: PUSH
29378: LD_VAR 0 4
29382: NOT
29383: OR
29384: IFFALSE 29388
// exit ;
29386: GO 29728
// list := [ ] ;
29388: LD_ADDR_VAR 0 13
29392: PUSH
29393: EMPTY
29394: ST_TO_ADDR
// if x - r < 0 then
29395: LD_VAR 0 2
29399: PUSH
29400: LD_VAR 0 4
29404: MINUS
29405: PUSH
29406: LD_INT 0
29408: LESS
29409: IFFALSE 29421
// min_x := 0 else
29411: LD_ADDR_VAR 0 7
29415: PUSH
29416: LD_INT 0
29418: ST_TO_ADDR
29419: GO 29437
// min_x := x - r ;
29421: LD_ADDR_VAR 0 7
29425: PUSH
29426: LD_VAR 0 2
29430: PUSH
29431: LD_VAR 0 4
29435: MINUS
29436: ST_TO_ADDR
// if y - r < 0 then
29437: LD_VAR 0 3
29441: PUSH
29442: LD_VAR 0 4
29446: MINUS
29447: PUSH
29448: LD_INT 0
29450: LESS
29451: IFFALSE 29463
// min_y := 0 else
29453: LD_ADDR_VAR 0 8
29457: PUSH
29458: LD_INT 0
29460: ST_TO_ADDR
29461: GO 29479
// min_y := y - r ;
29463: LD_ADDR_VAR 0 8
29467: PUSH
29468: LD_VAR 0 3
29472: PUSH
29473: LD_VAR 0 4
29477: MINUS
29478: ST_TO_ADDR
// max_x := x + r ;
29479: LD_ADDR_VAR 0 9
29483: PUSH
29484: LD_VAR 0 2
29488: PUSH
29489: LD_VAR 0 4
29493: PLUS
29494: ST_TO_ADDR
// max_y := y + r ;
29495: LD_ADDR_VAR 0 10
29499: PUSH
29500: LD_VAR 0 3
29504: PUSH
29505: LD_VAR 0 4
29509: PLUS
29510: ST_TO_ADDR
// for _x = min_x to max_x do
29511: LD_ADDR_VAR 0 11
29515: PUSH
29516: DOUBLE
29517: LD_VAR 0 7
29521: DEC
29522: ST_TO_ADDR
29523: LD_VAR 0 9
29527: PUSH
29528: FOR_TO
29529: IFFALSE 29646
// for _y = min_y to max_y do
29531: LD_ADDR_VAR 0 12
29535: PUSH
29536: DOUBLE
29537: LD_VAR 0 8
29541: DEC
29542: ST_TO_ADDR
29543: LD_VAR 0 10
29547: PUSH
29548: FOR_TO
29549: IFFALSE 29642
// begin if not ValidHex ( _x , _y ) then
29551: LD_VAR 0 11
29555: PPUSH
29556: LD_VAR 0 12
29560: PPUSH
29561: CALL_OW 488
29565: NOT
29566: IFFALSE 29570
// continue ;
29568: GO 29548
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29570: LD_VAR 0 11
29574: PPUSH
29575: LD_VAR 0 12
29579: PPUSH
29580: CALL_OW 351
29584: PUSH
29585: LD_VAR 0 11
29589: PPUSH
29590: LD_VAR 0 12
29594: PPUSH
29595: CALL_OW 554
29599: AND
29600: IFFALSE 29640
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29602: LD_ADDR_VAR 0 13
29606: PUSH
29607: LD_VAR 0 13
29611: PPUSH
29612: LD_VAR 0 13
29616: PUSH
29617: LD_INT 1
29619: PLUS
29620: PPUSH
29621: LD_VAR 0 11
29625: PUSH
29626: LD_VAR 0 12
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: PPUSH
29635: CALL_OW 2
29639: ST_TO_ADDR
// end ;
29640: GO 29548
29642: POP
29643: POP
29644: GO 29528
29646: POP
29647: POP
// if not list then
29648: LD_VAR 0 13
29652: NOT
29653: IFFALSE 29657
// exit ;
29655: GO 29728
// for i in list do
29657: LD_ADDR_VAR 0 6
29661: PUSH
29662: LD_VAR 0 13
29666: PUSH
29667: FOR_IN
29668: IFFALSE 29726
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
29670: LD_VAR 0 1
29674: PPUSH
29675: LD_STRING M
29677: PUSH
29678: LD_VAR 0 6
29682: PUSH
29683: LD_INT 1
29685: ARRAY
29686: PUSH
29687: LD_VAR 0 6
29691: PUSH
29692: LD_INT 2
29694: ARRAY
29695: PUSH
29696: LD_INT 0
29698: PUSH
29699: LD_INT 0
29701: PUSH
29702: LD_INT 0
29704: PUSH
29705: LD_INT 0
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: LIST
29712: LIST
29713: LIST
29714: LIST
29715: LIST
29716: PUSH
29717: EMPTY
29718: LIST
29719: PPUSH
29720: CALL_OW 447
29724: GO 29667
29726: POP
29727: POP
// end ;
29728: LD_VAR 0 5
29732: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29733: LD_EXP 94
29737: NOT
29738: IFFALSE 29788
29740: GO 29742
29742: DISABLE
// begin initHack := true ;
29743: LD_ADDR_EXP 94
29747: PUSH
29748: LD_INT 1
29750: ST_TO_ADDR
// hackTanks := [ ] ;
29751: LD_ADDR_EXP 95
29755: PUSH
29756: EMPTY
29757: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29758: LD_ADDR_EXP 96
29762: PUSH
29763: EMPTY
29764: ST_TO_ADDR
// hackLimit := 3 ;
29765: LD_ADDR_EXP 97
29769: PUSH
29770: LD_INT 3
29772: ST_TO_ADDR
// hackDist := 12 ;
29773: LD_ADDR_EXP 98
29777: PUSH
29778: LD_INT 12
29780: ST_TO_ADDR
// hackCounter := [ ] ;
29781: LD_ADDR_EXP 99
29785: PUSH
29786: EMPTY
29787: ST_TO_ADDR
// end ;
29788: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29789: LD_EXP 94
29793: PUSH
29794: LD_INT 34
29796: PUSH
29797: LD_INT 99
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: PPUSH
29804: CALL_OW 69
29808: AND
29809: IFFALSE 30062
29811: GO 29813
29813: DISABLE
29814: LD_INT 0
29816: PPUSH
29817: PPUSH
// begin enable ;
29818: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29819: LD_ADDR_VAR 0 1
29823: PUSH
29824: LD_INT 34
29826: PUSH
29827: LD_INT 99
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: PPUSH
29834: CALL_OW 69
29838: PUSH
29839: FOR_IN
29840: IFFALSE 30060
// begin if not i in hackTanks then
29842: LD_VAR 0 1
29846: PUSH
29847: LD_EXP 95
29851: IN
29852: NOT
29853: IFFALSE 29936
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29855: LD_ADDR_EXP 95
29859: PUSH
29860: LD_EXP 95
29864: PPUSH
29865: LD_EXP 95
29869: PUSH
29870: LD_INT 1
29872: PLUS
29873: PPUSH
29874: LD_VAR 0 1
29878: PPUSH
29879: CALL_OW 1
29883: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29884: LD_ADDR_EXP 96
29888: PUSH
29889: LD_EXP 96
29893: PPUSH
29894: LD_EXP 96
29898: PUSH
29899: LD_INT 1
29901: PLUS
29902: PPUSH
29903: EMPTY
29904: PPUSH
29905: CALL_OW 1
29909: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29910: LD_ADDR_EXP 99
29914: PUSH
29915: LD_EXP 99
29919: PPUSH
29920: LD_EXP 99
29924: PUSH
29925: LD_INT 1
29927: PLUS
29928: PPUSH
29929: EMPTY
29930: PPUSH
29931: CALL_OW 1
29935: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29936: LD_VAR 0 1
29940: PPUSH
29941: CALL_OW 302
29945: NOT
29946: IFFALSE 29959
// begin HackUnlinkAll ( i ) ;
29948: LD_VAR 0 1
29952: PPUSH
29953: CALL 30065 0 1
// continue ;
29957: GO 29839
// end ; HackCheckCapturedStatus ( i ) ;
29959: LD_VAR 0 1
29963: PPUSH
29964: CALL 30508 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29968: LD_ADDR_VAR 0 2
29972: PUSH
29973: LD_INT 81
29975: PUSH
29976: LD_VAR 0 1
29980: PPUSH
29981: CALL_OW 255
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: LD_INT 33
29992: PUSH
29993: LD_INT 3
29995: PUSH
29996: EMPTY
29997: LIST
29998: LIST
29999: PUSH
30000: LD_INT 91
30002: PUSH
30003: LD_VAR 0 1
30007: PUSH
30008: LD_EXP 98
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: LIST
30017: PUSH
30018: LD_INT 50
30020: PUSH
30021: EMPTY
30022: LIST
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: PPUSH
30030: CALL_OW 69
30034: ST_TO_ADDR
// if not tmp then
30035: LD_VAR 0 2
30039: NOT
30040: IFFALSE 30044
// continue ;
30042: GO 29839
// HackLink ( i , tmp ) ;
30044: LD_VAR 0 1
30048: PPUSH
30049: LD_VAR 0 2
30053: PPUSH
30054: CALL 30201 0 2
// end ;
30058: GO 29839
30060: POP
30061: POP
// end ;
30062: PPOPN 2
30064: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
30065: LD_INT 0
30067: PPUSH
30068: PPUSH
30069: PPUSH
// if not hack in hackTanks then
30070: LD_VAR 0 1
30074: PUSH
30075: LD_EXP 95
30079: IN
30080: NOT
30081: IFFALSE 30085
// exit ;
30083: GO 30196
// index := GetElementIndex ( hackTanks , hack ) ;
30085: LD_ADDR_VAR 0 4
30089: PUSH
30090: LD_EXP 95
30094: PPUSH
30095: LD_VAR 0 1
30099: PPUSH
30100: CALL 37813 0 2
30104: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
30105: LD_EXP 96
30109: PUSH
30110: LD_VAR 0 4
30114: ARRAY
30115: IFFALSE 30196
// begin for i in hackTanksCaptured [ index ] do
30117: LD_ADDR_VAR 0 3
30121: PUSH
30122: LD_EXP 96
30126: PUSH
30127: LD_VAR 0 4
30131: ARRAY
30132: PUSH
30133: FOR_IN
30134: IFFALSE 30160
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
30136: LD_VAR 0 3
30140: PUSH
30141: LD_INT 1
30143: ARRAY
30144: PPUSH
30145: LD_VAR 0 3
30149: PUSH
30150: LD_INT 2
30152: ARRAY
30153: PPUSH
30154: CALL_OW 235
30158: GO 30133
30160: POP
30161: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
30162: LD_ADDR_EXP 96
30166: PUSH
30167: LD_EXP 96
30171: PPUSH
30172: LD_VAR 0 4
30176: PPUSH
30177: EMPTY
30178: PPUSH
30179: CALL_OW 1
30183: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
30184: LD_VAR 0 1
30188: PPUSH
30189: LD_INT 0
30191: PPUSH
30192: CALL_OW 505
// end ; end ;
30196: LD_VAR 0 2
30200: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
30201: LD_INT 0
30203: PPUSH
30204: PPUSH
30205: PPUSH
// if not hack in hackTanks or not vehicles then
30206: LD_VAR 0 1
30210: PUSH
30211: LD_EXP 95
30215: IN
30216: NOT
30217: PUSH
30218: LD_VAR 0 2
30222: NOT
30223: OR
30224: IFFALSE 30228
// exit ;
30226: GO 30503
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
30228: LD_ADDR_VAR 0 2
30232: PUSH
30233: LD_VAR 0 1
30237: PPUSH
30238: LD_VAR 0 2
30242: PPUSH
30243: LD_INT 1
30245: PPUSH
30246: LD_INT 1
30248: PPUSH
30249: CALL 38463 0 4
30253: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
30254: LD_ADDR_VAR 0 5
30258: PUSH
30259: LD_EXP 95
30263: PPUSH
30264: LD_VAR 0 1
30268: PPUSH
30269: CALL 37813 0 2
30273: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
30274: LD_EXP 96
30278: PUSH
30279: LD_VAR 0 5
30283: ARRAY
30284: PUSH
30285: LD_EXP 97
30289: LESS
30290: IFFALSE 30479
// begin for i := 1 to vehicles do
30292: LD_ADDR_VAR 0 4
30296: PUSH
30297: DOUBLE
30298: LD_INT 1
30300: DEC
30301: ST_TO_ADDR
30302: LD_VAR 0 2
30306: PUSH
30307: FOR_TO
30308: IFFALSE 30477
// begin if hackTanksCaptured [ index ] = hackLimit then
30310: LD_EXP 96
30314: PUSH
30315: LD_VAR 0 5
30319: ARRAY
30320: PUSH
30321: LD_EXP 97
30325: EQUAL
30326: IFFALSE 30330
// break ;
30328: GO 30477
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
30330: LD_ADDR_EXP 99
30334: PUSH
30335: LD_EXP 99
30339: PPUSH
30340: LD_VAR 0 5
30344: PPUSH
30345: LD_EXP 99
30349: PUSH
30350: LD_VAR 0 5
30354: ARRAY
30355: PUSH
30356: LD_INT 1
30358: PLUS
30359: PPUSH
30360: CALL_OW 1
30364: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
30365: LD_ADDR_EXP 96
30369: PUSH
30370: LD_EXP 96
30374: PPUSH
30375: LD_VAR 0 5
30379: PUSH
30380: LD_EXP 96
30384: PUSH
30385: LD_VAR 0 5
30389: ARRAY
30390: PUSH
30391: LD_INT 1
30393: PLUS
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PPUSH
30399: LD_VAR 0 2
30403: PUSH
30404: LD_VAR 0 4
30408: ARRAY
30409: PUSH
30410: LD_VAR 0 2
30414: PUSH
30415: LD_VAR 0 4
30419: ARRAY
30420: PPUSH
30421: CALL_OW 255
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: PPUSH
30430: CALL 38028 0 3
30434: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
30435: LD_VAR 0 2
30439: PUSH
30440: LD_VAR 0 4
30444: ARRAY
30445: PPUSH
30446: LD_VAR 0 1
30450: PPUSH
30451: CALL_OW 255
30455: PPUSH
30456: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
30460: LD_VAR 0 2
30464: PUSH
30465: LD_VAR 0 4
30469: ARRAY
30470: PPUSH
30471: CALL_OW 141
// end ;
30475: GO 30307
30477: POP
30478: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30479: LD_VAR 0 1
30483: PPUSH
30484: LD_EXP 96
30488: PUSH
30489: LD_VAR 0 5
30493: ARRAY
30494: PUSH
30495: LD_INT 0
30497: PLUS
30498: PPUSH
30499: CALL_OW 505
// end ;
30503: LD_VAR 0 3
30507: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
30508: LD_INT 0
30510: PPUSH
30511: PPUSH
30512: PPUSH
30513: PPUSH
// if not hack in hackTanks then
30514: LD_VAR 0 1
30518: PUSH
30519: LD_EXP 95
30523: IN
30524: NOT
30525: IFFALSE 30529
// exit ;
30527: GO 30769
// index := GetElementIndex ( hackTanks , hack ) ;
30529: LD_ADDR_VAR 0 4
30533: PUSH
30534: LD_EXP 95
30538: PPUSH
30539: LD_VAR 0 1
30543: PPUSH
30544: CALL 37813 0 2
30548: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
30549: LD_ADDR_VAR 0 3
30553: PUSH
30554: DOUBLE
30555: LD_EXP 96
30559: PUSH
30560: LD_VAR 0 4
30564: ARRAY
30565: INC
30566: ST_TO_ADDR
30567: LD_INT 1
30569: PUSH
30570: FOR_DOWNTO
30571: IFFALSE 30743
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
30573: LD_ADDR_VAR 0 5
30577: PUSH
30578: LD_EXP 96
30582: PUSH
30583: LD_VAR 0 4
30587: ARRAY
30588: PUSH
30589: LD_VAR 0 3
30593: ARRAY
30594: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
30595: LD_VAR 0 5
30599: PUSH
30600: LD_INT 1
30602: ARRAY
30603: PPUSH
30604: CALL_OW 302
30608: NOT
30609: PUSH
30610: LD_VAR 0 5
30614: PUSH
30615: LD_INT 1
30617: ARRAY
30618: PPUSH
30619: CALL_OW 255
30623: PUSH
30624: LD_VAR 0 1
30628: PPUSH
30629: CALL_OW 255
30633: NONEQUAL
30634: OR
30635: IFFALSE 30741
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30637: LD_VAR 0 5
30641: PUSH
30642: LD_INT 1
30644: ARRAY
30645: PPUSH
30646: CALL_OW 305
30650: PUSH
30651: LD_VAR 0 5
30655: PUSH
30656: LD_INT 1
30658: ARRAY
30659: PPUSH
30660: CALL_OW 255
30664: PUSH
30665: LD_VAR 0 1
30669: PPUSH
30670: CALL_OW 255
30674: EQUAL
30675: AND
30676: IFFALSE 30700
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30678: LD_VAR 0 5
30682: PUSH
30683: LD_INT 1
30685: ARRAY
30686: PPUSH
30687: LD_VAR 0 5
30691: PUSH
30692: LD_INT 2
30694: ARRAY
30695: PPUSH
30696: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30700: LD_ADDR_EXP 96
30704: PUSH
30705: LD_EXP 96
30709: PPUSH
30710: LD_VAR 0 4
30714: PPUSH
30715: LD_EXP 96
30719: PUSH
30720: LD_VAR 0 4
30724: ARRAY
30725: PPUSH
30726: LD_VAR 0 3
30730: PPUSH
30731: CALL_OW 3
30735: PPUSH
30736: CALL_OW 1
30740: ST_TO_ADDR
// end ; end ;
30741: GO 30570
30743: POP
30744: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30745: LD_VAR 0 1
30749: PPUSH
30750: LD_EXP 96
30754: PUSH
30755: LD_VAR 0 4
30759: ARRAY
30760: PUSH
30761: LD_INT 0
30763: PLUS
30764: PPUSH
30765: CALL_OW 505
// end ;
30769: LD_VAR 0 2
30773: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30774: LD_INT 0
30776: PPUSH
30777: PPUSH
30778: PPUSH
30779: PPUSH
// if not hack in hackTanks then
30780: LD_VAR 0 1
30784: PUSH
30785: LD_EXP 95
30789: IN
30790: NOT
30791: IFFALSE 30795
// exit ;
30793: GO 30880
// index := GetElementIndex ( hackTanks , hack ) ;
30795: LD_ADDR_VAR 0 5
30799: PUSH
30800: LD_EXP 95
30804: PPUSH
30805: LD_VAR 0 1
30809: PPUSH
30810: CALL 37813 0 2
30814: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30815: LD_ADDR_VAR 0 4
30819: PUSH
30820: DOUBLE
30821: LD_INT 1
30823: DEC
30824: ST_TO_ADDR
30825: LD_EXP 96
30829: PUSH
30830: LD_VAR 0 5
30834: ARRAY
30835: PUSH
30836: FOR_TO
30837: IFFALSE 30878
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30839: LD_EXP 96
30843: PUSH
30844: LD_VAR 0 5
30848: ARRAY
30849: PUSH
30850: LD_VAR 0 4
30854: ARRAY
30855: PUSH
30856: LD_INT 1
30858: ARRAY
30859: PUSH
30860: LD_VAR 0 2
30864: EQUAL
30865: IFFALSE 30876
// KillUnit ( vehicle ) ;
30867: LD_VAR 0 2
30871: PPUSH
30872: CALL_OW 66
30876: GO 30836
30878: POP
30879: POP
// end ;
30880: LD_VAR 0 3
30884: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
30885: LD_EXP 100
30889: NOT
30890: IFFALSE 30925
30892: GO 30894
30894: DISABLE
// begin initMiner := true ;
30895: LD_ADDR_EXP 100
30899: PUSH
30900: LD_INT 1
30902: ST_TO_ADDR
// minersList := [ ] ;
30903: LD_ADDR_EXP 101
30907: PUSH
30908: EMPTY
30909: ST_TO_ADDR
// minerMinesList := [ ] ;
30910: LD_ADDR_EXP 102
30914: PUSH
30915: EMPTY
30916: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
30917: LD_ADDR_EXP 103
30921: PUSH
30922: LD_INT 5
30924: ST_TO_ADDR
// end ;
30925: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
30926: LD_EXP 100
30930: PUSH
30931: LD_INT 34
30933: PUSH
30934: LD_INT 81
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PPUSH
30941: CALL_OW 69
30945: AND
30946: IFFALSE 31407
30948: GO 30950
30950: DISABLE
30951: LD_INT 0
30953: PPUSH
30954: PPUSH
30955: PPUSH
30956: PPUSH
// begin enable ;
30957: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
30958: LD_ADDR_VAR 0 1
30962: PUSH
30963: LD_INT 34
30965: PUSH
30966: LD_INT 81
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: PPUSH
30973: CALL_OW 69
30977: PUSH
30978: FOR_IN
30979: IFFALSE 31051
// begin if not i in minersList then
30981: LD_VAR 0 1
30985: PUSH
30986: LD_EXP 101
30990: IN
30991: NOT
30992: IFFALSE 31049
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
30994: LD_ADDR_EXP 101
30998: PUSH
30999: LD_EXP 101
31003: PPUSH
31004: LD_EXP 101
31008: PUSH
31009: LD_INT 1
31011: PLUS
31012: PPUSH
31013: LD_VAR 0 1
31017: PPUSH
31018: CALL_OW 1
31022: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
31023: LD_ADDR_EXP 102
31027: PUSH
31028: LD_EXP 102
31032: PPUSH
31033: LD_EXP 102
31037: PUSH
31038: LD_INT 1
31040: PLUS
31041: PPUSH
31042: EMPTY
31043: PPUSH
31044: CALL_OW 1
31048: ST_TO_ADDR
// end end ;
31049: GO 30978
31051: POP
31052: POP
// for i := minerMinesList downto 1 do
31053: LD_ADDR_VAR 0 1
31057: PUSH
31058: DOUBLE
31059: LD_EXP 102
31063: INC
31064: ST_TO_ADDR
31065: LD_INT 1
31067: PUSH
31068: FOR_DOWNTO
31069: IFFALSE 31405
// begin if IsLive ( minersList [ i ] ) then
31071: LD_EXP 101
31075: PUSH
31076: LD_VAR 0 1
31080: ARRAY
31081: PPUSH
31082: CALL_OW 300
31086: IFFALSE 31114
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
31088: LD_EXP 101
31092: PUSH
31093: LD_VAR 0 1
31097: ARRAY
31098: PPUSH
31099: LD_EXP 102
31103: PUSH
31104: LD_VAR 0 1
31108: ARRAY
31109: PPUSH
31110: CALL_OW 505
// if not minerMinesList [ i ] then
31114: LD_EXP 102
31118: PUSH
31119: LD_VAR 0 1
31123: ARRAY
31124: NOT
31125: IFFALSE 31129
// continue ;
31127: GO 31068
// for j := minerMinesList [ i ] downto 1 do
31129: LD_ADDR_VAR 0 2
31133: PUSH
31134: DOUBLE
31135: LD_EXP 102
31139: PUSH
31140: LD_VAR 0 1
31144: ARRAY
31145: INC
31146: ST_TO_ADDR
31147: LD_INT 1
31149: PUSH
31150: FOR_DOWNTO
31151: IFFALSE 31401
// begin side := GetSide ( minersList [ i ] ) ;
31153: LD_ADDR_VAR 0 3
31157: PUSH
31158: LD_EXP 101
31162: PUSH
31163: LD_VAR 0 1
31167: ARRAY
31168: PPUSH
31169: CALL_OW 255
31173: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
31174: LD_ADDR_VAR 0 4
31178: PUSH
31179: LD_EXP 102
31183: PUSH
31184: LD_VAR 0 1
31188: ARRAY
31189: PUSH
31190: LD_VAR 0 2
31194: ARRAY
31195: PUSH
31196: LD_INT 1
31198: ARRAY
31199: PPUSH
31200: LD_EXP 102
31204: PUSH
31205: LD_VAR 0 1
31209: ARRAY
31210: PUSH
31211: LD_VAR 0 2
31215: ARRAY
31216: PUSH
31217: LD_INT 2
31219: ARRAY
31220: PPUSH
31221: CALL_OW 428
31225: ST_TO_ADDR
// if not tmp then
31226: LD_VAR 0 4
31230: NOT
31231: IFFALSE 31235
// continue ;
31233: GO 31150
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
31235: LD_VAR 0 4
31239: PUSH
31240: LD_INT 81
31242: PUSH
31243: LD_VAR 0 3
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: PPUSH
31252: CALL_OW 69
31256: IN
31257: PUSH
31258: LD_EXP 102
31262: PUSH
31263: LD_VAR 0 1
31267: ARRAY
31268: PUSH
31269: LD_VAR 0 2
31273: ARRAY
31274: PUSH
31275: LD_INT 1
31277: ARRAY
31278: PPUSH
31279: LD_EXP 102
31283: PUSH
31284: LD_VAR 0 1
31288: ARRAY
31289: PUSH
31290: LD_VAR 0 2
31294: ARRAY
31295: PUSH
31296: LD_INT 2
31298: ARRAY
31299: PPUSH
31300: CALL_OW 458
31304: AND
31305: IFFALSE 31399
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
31307: LD_EXP 102
31311: PUSH
31312: LD_VAR 0 1
31316: ARRAY
31317: PUSH
31318: LD_VAR 0 2
31322: ARRAY
31323: PUSH
31324: LD_INT 1
31326: ARRAY
31327: PPUSH
31328: LD_EXP 102
31332: PUSH
31333: LD_VAR 0 1
31337: ARRAY
31338: PUSH
31339: LD_VAR 0 2
31343: ARRAY
31344: PUSH
31345: LD_INT 2
31347: ARRAY
31348: PPUSH
31349: LD_VAR 0 3
31353: PPUSH
31354: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
31358: LD_ADDR_EXP 102
31362: PUSH
31363: LD_EXP 102
31367: PPUSH
31368: LD_VAR 0 1
31372: PPUSH
31373: LD_EXP 102
31377: PUSH
31378: LD_VAR 0 1
31382: ARRAY
31383: PPUSH
31384: LD_VAR 0 2
31388: PPUSH
31389: CALL_OW 3
31393: PPUSH
31394: CALL_OW 1
31398: ST_TO_ADDR
// end ; end ;
31399: GO 31150
31401: POP
31402: POP
// end ;
31403: GO 31068
31405: POP
31406: POP
// end ;
31407: PPOPN 4
31409: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
31410: LD_INT 0
31412: PPUSH
31413: PPUSH
// result := false ;
31414: LD_ADDR_VAR 0 4
31418: PUSH
31419: LD_INT 0
31421: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
31422: LD_VAR 0 1
31426: PPUSH
31427: CALL_OW 264
31431: PUSH
31432: LD_INT 81
31434: EQUAL
31435: NOT
31436: IFFALSE 31440
// exit ;
31438: GO 31680
// index := GetElementIndex ( minersList , unit ) ;
31440: LD_ADDR_VAR 0 5
31444: PUSH
31445: LD_EXP 101
31449: PPUSH
31450: LD_VAR 0 1
31454: PPUSH
31455: CALL 37813 0 2
31459: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
31460: LD_EXP 102
31464: PUSH
31465: LD_VAR 0 5
31469: ARRAY
31470: PUSH
31471: LD_EXP 103
31475: GREATEREQUAL
31476: IFFALSE 31480
// exit ;
31478: GO 31680
// ComMoveXY ( unit , x , y ) ;
31480: LD_VAR 0 1
31484: PPUSH
31485: LD_VAR 0 2
31489: PPUSH
31490: LD_VAR 0 3
31494: PPUSH
31495: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31499: LD_INT 35
31501: PPUSH
31502: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
31506: LD_VAR 0 1
31510: PPUSH
31511: LD_VAR 0 2
31515: PPUSH
31516: LD_VAR 0 3
31520: PPUSH
31521: CALL 69168 0 3
31525: NOT
31526: PUSH
31527: LD_VAR 0 1
31531: PPUSH
31532: CALL_OW 314
31536: AND
31537: IFFALSE 31541
// exit ;
31539: GO 31680
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
31541: LD_VAR 0 2
31545: PPUSH
31546: LD_VAR 0 3
31550: PPUSH
31551: CALL_OW 428
31555: PUSH
31556: LD_VAR 0 1
31560: EQUAL
31561: PUSH
31562: LD_VAR 0 1
31566: PPUSH
31567: CALL_OW 314
31571: NOT
31572: AND
31573: IFFALSE 31499
// PlaySoundXY ( x , y , PlantMine ) ;
31575: LD_VAR 0 2
31579: PPUSH
31580: LD_VAR 0 3
31584: PPUSH
31585: LD_STRING PlantMine
31587: PPUSH
31588: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
31592: LD_VAR 0 2
31596: PPUSH
31597: LD_VAR 0 3
31601: PPUSH
31602: LD_VAR 0 1
31606: PPUSH
31607: CALL_OW 255
31611: PPUSH
31612: LD_INT 0
31614: PPUSH
31615: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31619: LD_ADDR_EXP 102
31623: PUSH
31624: LD_EXP 102
31628: PPUSH
31629: LD_VAR 0 5
31633: PUSH
31634: LD_EXP 102
31638: PUSH
31639: LD_VAR 0 5
31643: ARRAY
31644: PUSH
31645: LD_INT 1
31647: PLUS
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PPUSH
31653: LD_VAR 0 2
31657: PUSH
31658: LD_VAR 0 3
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: PPUSH
31667: CALL 38028 0 3
31671: ST_TO_ADDR
// result := true ;
31672: LD_ADDR_VAR 0 4
31676: PUSH
31677: LD_INT 1
31679: ST_TO_ADDR
// end ;
31680: LD_VAR 0 4
31684: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31685: LD_INT 0
31687: PPUSH
31688: PPUSH
31689: PPUSH
// if not unit in minersList then
31690: LD_VAR 0 1
31694: PUSH
31695: LD_EXP 101
31699: IN
31700: NOT
31701: IFFALSE 31705
// exit ;
31703: GO 32097
// index := GetElementIndex ( minersList , unit ) ;
31705: LD_ADDR_VAR 0 6
31709: PUSH
31710: LD_EXP 101
31714: PPUSH
31715: LD_VAR 0 1
31719: PPUSH
31720: CALL 37813 0 2
31724: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31725: LD_ADDR_VAR 0 5
31729: PUSH
31730: DOUBLE
31731: LD_EXP 102
31735: PUSH
31736: LD_VAR 0 6
31740: ARRAY
31741: INC
31742: ST_TO_ADDR
31743: LD_INT 1
31745: PUSH
31746: FOR_DOWNTO
31747: IFFALSE 31908
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
31749: LD_EXP 102
31753: PUSH
31754: LD_VAR 0 6
31758: ARRAY
31759: PUSH
31760: LD_VAR 0 5
31764: ARRAY
31765: PUSH
31766: LD_INT 1
31768: ARRAY
31769: PUSH
31770: LD_VAR 0 2
31774: EQUAL
31775: PUSH
31776: LD_EXP 102
31780: PUSH
31781: LD_VAR 0 6
31785: ARRAY
31786: PUSH
31787: LD_VAR 0 5
31791: ARRAY
31792: PUSH
31793: LD_INT 2
31795: ARRAY
31796: PUSH
31797: LD_VAR 0 3
31801: EQUAL
31802: AND
31803: IFFALSE 31906
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31805: LD_EXP 102
31809: PUSH
31810: LD_VAR 0 6
31814: ARRAY
31815: PUSH
31816: LD_VAR 0 5
31820: ARRAY
31821: PUSH
31822: LD_INT 1
31824: ARRAY
31825: PPUSH
31826: LD_EXP 102
31830: PUSH
31831: LD_VAR 0 6
31835: ARRAY
31836: PUSH
31837: LD_VAR 0 5
31841: ARRAY
31842: PUSH
31843: LD_INT 2
31845: ARRAY
31846: PPUSH
31847: LD_VAR 0 1
31851: PPUSH
31852: CALL_OW 255
31856: PPUSH
31857: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31861: LD_ADDR_EXP 102
31865: PUSH
31866: LD_EXP 102
31870: PPUSH
31871: LD_VAR 0 6
31875: PPUSH
31876: LD_EXP 102
31880: PUSH
31881: LD_VAR 0 6
31885: ARRAY
31886: PPUSH
31887: LD_VAR 0 5
31891: PPUSH
31892: CALL_OW 3
31896: PPUSH
31897: CALL_OW 1
31901: ST_TO_ADDR
// exit ;
31902: POP
31903: POP
31904: GO 32097
// end ; end ;
31906: GO 31746
31908: POP
31909: POP
// for i := minerMinesList [ index ] downto 1 do
31910: LD_ADDR_VAR 0 5
31914: PUSH
31915: DOUBLE
31916: LD_EXP 102
31920: PUSH
31921: LD_VAR 0 6
31925: ARRAY
31926: INC
31927: ST_TO_ADDR
31928: LD_INT 1
31930: PUSH
31931: FOR_DOWNTO
31932: IFFALSE 32095
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
31934: LD_EXP 102
31938: PUSH
31939: LD_VAR 0 6
31943: ARRAY
31944: PUSH
31945: LD_VAR 0 5
31949: ARRAY
31950: PUSH
31951: LD_INT 1
31953: ARRAY
31954: PPUSH
31955: LD_EXP 102
31959: PUSH
31960: LD_VAR 0 6
31964: ARRAY
31965: PUSH
31966: LD_VAR 0 5
31970: ARRAY
31971: PUSH
31972: LD_INT 2
31974: ARRAY
31975: PPUSH
31976: LD_VAR 0 2
31980: PPUSH
31981: LD_VAR 0 3
31985: PPUSH
31986: CALL_OW 298
31990: PUSH
31991: LD_INT 6
31993: LESS
31994: IFFALSE 32093
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31996: LD_EXP 102
32000: PUSH
32001: LD_VAR 0 6
32005: ARRAY
32006: PUSH
32007: LD_VAR 0 5
32011: ARRAY
32012: PUSH
32013: LD_INT 1
32015: ARRAY
32016: PPUSH
32017: LD_EXP 102
32021: PUSH
32022: LD_VAR 0 6
32026: ARRAY
32027: PUSH
32028: LD_VAR 0 5
32032: ARRAY
32033: PUSH
32034: LD_INT 2
32036: ARRAY
32037: PPUSH
32038: LD_VAR 0 1
32042: PPUSH
32043: CALL_OW 255
32047: PPUSH
32048: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32052: LD_ADDR_EXP 102
32056: PUSH
32057: LD_EXP 102
32061: PPUSH
32062: LD_VAR 0 6
32066: PPUSH
32067: LD_EXP 102
32071: PUSH
32072: LD_VAR 0 6
32076: ARRAY
32077: PPUSH
32078: LD_VAR 0 5
32082: PPUSH
32083: CALL_OW 3
32087: PPUSH
32088: CALL_OW 1
32092: ST_TO_ADDR
// end ; end ;
32093: GO 31931
32095: POP
32096: POP
// end ;
32097: LD_VAR 0 4
32101: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
32102: LD_INT 0
32104: PPUSH
32105: PPUSH
32106: PPUSH
32107: PPUSH
32108: PPUSH
32109: PPUSH
32110: PPUSH
32111: PPUSH
32112: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
32113: LD_VAR 0 1
32117: PPUSH
32118: CALL_OW 264
32122: PUSH
32123: LD_INT 81
32125: EQUAL
32126: NOT
32127: PUSH
32128: LD_VAR 0 1
32132: PUSH
32133: LD_EXP 101
32137: IN
32138: NOT
32139: OR
32140: IFFALSE 32144
// exit ;
32142: GO 32466
// index := GetElementIndex ( minersList , unit ) ;
32144: LD_ADDR_VAR 0 6
32148: PUSH
32149: LD_EXP 101
32153: PPUSH
32154: LD_VAR 0 1
32158: PPUSH
32159: CALL 37813 0 2
32163: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
32164: LD_ADDR_VAR 0 8
32168: PUSH
32169: LD_EXP 103
32173: PUSH
32174: LD_EXP 102
32178: PUSH
32179: LD_VAR 0 6
32183: ARRAY
32184: MINUS
32185: ST_TO_ADDR
// if not minesFreeAmount then
32186: LD_VAR 0 8
32190: NOT
32191: IFFALSE 32195
// exit ;
32193: GO 32466
// tmp := [ ] ;
32195: LD_ADDR_VAR 0 7
32199: PUSH
32200: EMPTY
32201: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
32202: LD_ADDR_VAR 0 5
32206: PUSH
32207: DOUBLE
32208: LD_INT 1
32210: DEC
32211: ST_TO_ADDR
32212: LD_VAR 0 8
32216: PUSH
32217: FOR_TO
32218: IFFALSE 32413
// begin _d := rand ( 0 , 5 ) ;
32220: LD_ADDR_VAR 0 11
32224: PUSH
32225: LD_INT 0
32227: PPUSH
32228: LD_INT 5
32230: PPUSH
32231: CALL_OW 12
32235: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
32236: LD_ADDR_VAR 0 12
32240: PUSH
32241: LD_INT 2
32243: PPUSH
32244: LD_INT 6
32246: PPUSH
32247: CALL_OW 12
32251: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
32252: LD_ADDR_VAR 0 9
32256: PUSH
32257: LD_VAR 0 2
32261: PPUSH
32262: LD_VAR 0 11
32266: PPUSH
32267: LD_VAR 0 12
32271: PPUSH
32272: CALL_OW 272
32276: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
32277: LD_ADDR_VAR 0 10
32281: PUSH
32282: LD_VAR 0 3
32286: PPUSH
32287: LD_VAR 0 11
32291: PPUSH
32292: LD_VAR 0 12
32296: PPUSH
32297: CALL_OW 273
32301: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
32302: LD_VAR 0 9
32306: PPUSH
32307: LD_VAR 0 10
32311: PPUSH
32312: CALL_OW 488
32316: PUSH
32317: LD_VAR 0 9
32321: PUSH
32322: LD_VAR 0 10
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_VAR 0 7
32335: IN
32336: NOT
32337: AND
32338: PUSH
32339: LD_VAR 0 9
32343: PPUSH
32344: LD_VAR 0 10
32348: PPUSH
32349: CALL_OW 458
32353: NOT
32354: AND
32355: IFFALSE 32397
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
32357: LD_ADDR_VAR 0 7
32361: PUSH
32362: LD_VAR 0 7
32366: PPUSH
32367: LD_VAR 0 7
32371: PUSH
32372: LD_INT 1
32374: PLUS
32375: PPUSH
32376: LD_VAR 0 9
32380: PUSH
32381: LD_VAR 0 10
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: PPUSH
32390: CALL_OW 1
32394: ST_TO_ADDR
32395: GO 32411
// i := i - 1 ;
32397: LD_ADDR_VAR 0 5
32401: PUSH
32402: LD_VAR 0 5
32406: PUSH
32407: LD_INT 1
32409: MINUS
32410: ST_TO_ADDR
// end ;
32411: GO 32217
32413: POP
32414: POP
// for i in tmp do
32415: LD_ADDR_VAR 0 5
32419: PUSH
32420: LD_VAR 0 7
32424: PUSH
32425: FOR_IN
32426: IFFALSE 32464
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
32428: LD_VAR 0 1
32432: PPUSH
32433: LD_VAR 0 5
32437: PUSH
32438: LD_INT 1
32440: ARRAY
32441: PPUSH
32442: LD_VAR 0 5
32446: PUSH
32447: LD_INT 2
32449: ARRAY
32450: PPUSH
32451: CALL 31410 0 3
32455: NOT
32456: IFFALSE 32462
// exit ;
32458: POP
32459: POP
32460: GO 32466
32462: GO 32425
32464: POP
32465: POP
// end ;
32466: LD_VAR 0 4
32470: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
32471: LD_INT 0
32473: PPUSH
32474: PPUSH
32475: PPUSH
32476: PPUSH
32477: PPUSH
32478: PPUSH
32479: PPUSH
// if not GetClass ( unit ) = class_sniper then
32480: LD_VAR 0 1
32484: PPUSH
32485: CALL_OW 257
32489: PUSH
32490: LD_INT 5
32492: EQUAL
32493: NOT
32494: IFFALSE 32498
// exit ;
32496: GO 32886
// dist := 8 ;
32498: LD_ADDR_VAR 0 5
32502: PUSH
32503: LD_INT 8
32505: ST_TO_ADDR
// viewRange := 12 ;
32506: LD_ADDR_VAR 0 7
32510: PUSH
32511: LD_INT 12
32513: ST_TO_ADDR
// side := GetSide ( unit ) ;
32514: LD_ADDR_VAR 0 6
32518: PUSH
32519: LD_VAR 0 1
32523: PPUSH
32524: CALL_OW 255
32528: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
32529: LD_INT 61
32531: PPUSH
32532: LD_VAR 0 6
32536: PPUSH
32537: CALL_OW 321
32541: PUSH
32542: LD_INT 2
32544: EQUAL
32545: IFFALSE 32555
// viewRange := 16 ;
32547: LD_ADDR_VAR 0 7
32551: PUSH
32552: LD_INT 16
32554: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
32555: LD_VAR 0 1
32559: PPUSH
32560: LD_VAR 0 2
32564: PPUSH
32565: LD_VAR 0 3
32569: PPUSH
32570: CALL_OW 297
32574: PUSH
32575: LD_VAR 0 5
32579: GREATER
32580: IFFALSE 32659
// begin ComMoveXY ( unit , x , y ) ;
32582: LD_VAR 0 1
32586: PPUSH
32587: LD_VAR 0 2
32591: PPUSH
32592: LD_VAR 0 3
32596: PPUSH
32597: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32601: LD_INT 35
32603: PPUSH
32604: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32608: LD_VAR 0 1
32612: PPUSH
32613: LD_VAR 0 2
32617: PPUSH
32618: LD_VAR 0 3
32622: PPUSH
32623: CALL 69168 0 3
32627: NOT
32628: IFFALSE 32632
// exit ;
32630: GO 32886
// until GetDistUnitXY ( unit , x , y ) < dist ;
32632: LD_VAR 0 1
32636: PPUSH
32637: LD_VAR 0 2
32641: PPUSH
32642: LD_VAR 0 3
32646: PPUSH
32647: CALL_OW 297
32651: PUSH
32652: LD_VAR 0 5
32656: LESS
32657: IFFALSE 32601
// end ; ComTurnXY ( unit , x , y ) ;
32659: LD_VAR 0 1
32663: PPUSH
32664: LD_VAR 0 2
32668: PPUSH
32669: LD_VAR 0 3
32673: PPUSH
32674: CALL_OW 118
// wait ( 5 ) ;
32678: LD_INT 5
32680: PPUSH
32681: CALL_OW 67
// _d := GetDir ( unit ) ;
32685: LD_ADDR_VAR 0 10
32689: PUSH
32690: LD_VAR 0 1
32694: PPUSH
32695: CALL_OW 254
32699: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
32700: LD_ADDR_VAR 0 8
32704: PUSH
32705: LD_VAR 0 1
32709: PPUSH
32710: CALL_OW 250
32714: PPUSH
32715: LD_VAR 0 10
32719: PPUSH
32720: LD_VAR 0 5
32724: PPUSH
32725: CALL_OW 272
32729: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
32730: LD_ADDR_VAR 0 9
32734: PUSH
32735: LD_VAR 0 1
32739: PPUSH
32740: CALL_OW 251
32744: PPUSH
32745: LD_VAR 0 10
32749: PPUSH
32750: LD_VAR 0 5
32754: PPUSH
32755: CALL_OW 273
32759: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32760: LD_VAR 0 8
32764: PPUSH
32765: LD_VAR 0 9
32769: PPUSH
32770: CALL_OW 488
32774: NOT
32775: IFFALSE 32779
// exit ;
32777: GO 32886
// ComAnimCustom ( unit , 1 ) ;
32779: LD_VAR 0 1
32783: PPUSH
32784: LD_INT 1
32786: PPUSH
32787: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32791: LD_VAR 0 8
32795: PPUSH
32796: LD_VAR 0 9
32800: PPUSH
32801: LD_VAR 0 6
32805: PPUSH
32806: LD_VAR 0 7
32810: PPUSH
32811: CALL_OW 330
// repeat wait ( 1 ) ;
32815: LD_INT 1
32817: PPUSH
32818: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
32822: LD_VAR 0 1
32826: PPUSH
32827: CALL_OW 316
32831: PUSH
32832: LD_VAR 0 1
32836: PPUSH
32837: CALL_OW 314
32841: OR
32842: PUSH
32843: LD_VAR 0 1
32847: PPUSH
32848: CALL_OW 302
32852: NOT
32853: OR
32854: PUSH
32855: LD_VAR 0 1
32859: PPUSH
32860: CALL_OW 301
32864: OR
32865: IFFALSE 32815
// RemoveSeeing ( _x , _y , side ) ;
32867: LD_VAR 0 8
32871: PPUSH
32872: LD_VAR 0 9
32876: PPUSH
32877: LD_VAR 0 6
32881: PPUSH
32882: CALL_OW 331
// end ; end_of_file
32886: LD_VAR 0 4
32890: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32891: LD_INT 0
32893: PPUSH
32894: PPUSH
// if exist_mode then
32895: LD_VAR 0 2
32899: IFFALSE 32924
// unit := CreateCharacter ( prefix & ident ) else
32901: LD_ADDR_VAR 0 5
32905: PUSH
32906: LD_VAR 0 3
32910: PUSH
32911: LD_VAR 0 1
32915: STR
32916: PPUSH
32917: CALL_OW 34
32921: ST_TO_ADDR
32922: GO 32939
// unit := NewCharacter ( ident ) ;
32924: LD_ADDR_VAR 0 5
32928: PUSH
32929: LD_VAR 0 1
32933: PPUSH
32934: CALL_OW 25
32938: ST_TO_ADDR
// result := unit ;
32939: LD_ADDR_VAR 0 4
32943: PUSH
32944: LD_VAR 0 5
32948: ST_TO_ADDR
// end ;
32949: LD_VAR 0 4
32953: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
32954: LD_INT 0
32956: PPUSH
32957: PPUSH
// if not side or not nation then
32958: LD_VAR 0 1
32962: NOT
32963: PUSH
32964: LD_VAR 0 2
32968: NOT
32969: OR
32970: IFFALSE 32974
// exit ;
32972: GO 33742
// case nation of nation_american :
32974: LD_VAR 0 2
32978: PUSH
32979: LD_INT 1
32981: DOUBLE
32982: EQUAL
32983: IFTRUE 32987
32985: GO 33201
32987: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
32988: LD_ADDR_VAR 0 4
32992: PUSH
32993: LD_INT 35
32995: PUSH
32996: LD_INT 45
32998: PUSH
32999: LD_INT 46
33001: PUSH
33002: LD_INT 47
33004: PUSH
33005: LD_INT 82
33007: PUSH
33008: LD_INT 83
33010: PUSH
33011: LD_INT 84
33013: PUSH
33014: LD_INT 85
33016: PUSH
33017: LD_INT 86
33019: PUSH
33020: LD_INT 1
33022: PUSH
33023: LD_INT 2
33025: PUSH
33026: LD_INT 6
33028: PUSH
33029: LD_INT 15
33031: PUSH
33032: LD_INT 16
33034: PUSH
33035: LD_INT 7
33037: PUSH
33038: LD_INT 12
33040: PUSH
33041: LD_INT 13
33043: PUSH
33044: LD_INT 10
33046: PUSH
33047: LD_INT 14
33049: PUSH
33050: LD_INT 20
33052: PUSH
33053: LD_INT 21
33055: PUSH
33056: LD_INT 22
33058: PUSH
33059: LD_INT 25
33061: PUSH
33062: LD_INT 32
33064: PUSH
33065: LD_INT 27
33067: PUSH
33068: LD_INT 36
33070: PUSH
33071: LD_INT 69
33073: PUSH
33074: LD_INT 39
33076: PUSH
33077: LD_INT 34
33079: PUSH
33080: LD_INT 40
33082: PUSH
33083: LD_INT 48
33085: PUSH
33086: LD_INT 49
33088: PUSH
33089: LD_INT 50
33091: PUSH
33092: LD_INT 51
33094: PUSH
33095: LD_INT 52
33097: PUSH
33098: LD_INT 53
33100: PUSH
33101: LD_INT 54
33103: PUSH
33104: LD_INT 55
33106: PUSH
33107: LD_INT 56
33109: PUSH
33110: LD_INT 57
33112: PUSH
33113: LD_INT 58
33115: PUSH
33116: LD_INT 59
33118: PUSH
33119: LD_INT 60
33121: PUSH
33122: LD_INT 61
33124: PUSH
33125: LD_INT 62
33127: PUSH
33128: LD_INT 80
33130: PUSH
33131: LD_INT 82
33133: PUSH
33134: LD_INT 83
33136: PUSH
33137: LD_INT 84
33139: PUSH
33140: LD_INT 85
33142: PUSH
33143: LD_INT 86
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: ST_TO_ADDR
33199: GO 33666
33201: LD_INT 2
33203: DOUBLE
33204: EQUAL
33205: IFTRUE 33209
33207: GO 33435
33209: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
33210: LD_ADDR_VAR 0 4
33214: PUSH
33215: LD_INT 35
33217: PUSH
33218: LD_INT 45
33220: PUSH
33221: LD_INT 46
33223: PUSH
33224: LD_INT 47
33226: PUSH
33227: LD_INT 82
33229: PUSH
33230: LD_INT 83
33232: PUSH
33233: LD_INT 84
33235: PUSH
33236: LD_INT 85
33238: PUSH
33239: LD_INT 87
33241: PUSH
33242: LD_INT 70
33244: PUSH
33245: LD_INT 1
33247: PUSH
33248: LD_INT 11
33250: PUSH
33251: LD_INT 3
33253: PUSH
33254: LD_INT 4
33256: PUSH
33257: LD_INT 5
33259: PUSH
33260: LD_INT 6
33262: PUSH
33263: LD_INT 15
33265: PUSH
33266: LD_INT 18
33268: PUSH
33269: LD_INT 7
33271: PUSH
33272: LD_INT 17
33274: PUSH
33275: LD_INT 8
33277: PUSH
33278: LD_INT 20
33280: PUSH
33281: LD_INT 21
33283: PUSH
33284: LD_INT 22
33286: PUSH
33287: LD_INT 72
33289: PUSH
33290: LD_INT 26
33292: PUSH
33293: LD_INT 69
33295: PUSH
33296: LD_INT 39
33298: PUSH
33299: LD_INT 40
33301: PUSH
33302: LD_INT 41
33304: PUSH
33305: LD_INT 42
33307: PUSH
33308: LD_INT 43
33310: PUSH
33311: LD_INT 48
33313: PUSH
33314: LD_INT 49
33316: PUSH
33317: LD_INT 50
33319: PUSH
33320: LD_INT 51
33322: PUSH
33323: LD_INT 52
33325: PUSH
33326: LD_INT 53
33328: PUSH
33329: LD_INT 54
33331: PUSH
33332: LD_INT 55
33334: PUSH
33335: LD_INT 56
33337: PUSH
33338: LD_INT 60
33340: PUSH
33341: LD_INT 61
33343: PUSH
33344: LD_INT 62
33346: PUSH
33347: LD_INT 66
33349: PUSH
33350: LD_INT 67
33352: PUSH
33353: LD_INT 68
33355: PUSH
33356: LD_INT 81
33358: PUSH
33359: LD_INT 82
33361: PUSH
33362: LD_INT 83
33364: PUSH
33365: LD_INT 84
33367: PUSH
33368: LD_INT 85
33370: PUSH
33371: LD_INT 87
33373: PUSH
33374: LD_INT 88
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: LIST
33381: LIST
33382: LIST
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: ST_TO_ADDR
33433: GO 33666
33435: LD_INT 3
33437: DOUBLE
33438: EQUAL
33439: IFTRUE 33443
33441: GO 33665
33443: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
33444: LD_ADDR_VAR 0 4
33448: PUSH
33449: LD_INT 46
33451: PUSH
33452: LD_INT 47
33454: PUSH
33455: LD_INT 1
33457: PUSH
33458: LD_INT 2
33460: PUSH
33461: LD_INT 82
33463: PUSH
33464: LD_INT 83
33466: PUSH
33467: LD_INT 84
33469: PUSH
33470: LD_INT 85
33472: PUSH
33473: LD_INT 86
33475: PUSH
33476: LD_INT 11
33478: PUSH
33479: LD_INT 9
33481: PUSH
33482: LD_INT 20
33484: PUSH
33485: LD_INT 19
33487: PUSH
33488: LD_INT 21
33490: PUSH
33491: LD_INT 24
33493: PUSH
33494: LD_INT 22
33496: PUSH
33497: LD_INT 25
33499: PUSH
33500: LD_INT 28
33502: PUSH
33503: LD_INT 29
33505: PUSH
33506: LD_INT 30
33508: PUSH
33509: LD_INT 31
33511: PUSH
33512: LD_INT 37
33514: PUSH
33515: LD_INT 38
33517: PUSH
33518: LD_INT 32
33520: PUSH
33521: LD_INT 27
33523: PUSH
33524: LD_INT 33
33526: PUSH
33527: LD_INT 69
33529: PUSH
33530: LD_INT 39
33532: PUSH
33533: LD_INT 34
33535: PUSH
33536: LD_INT 40
33538: PUSH
33539: LD_INT 71
33541: PUSH
33542: LD_INT 23
33544: PUSH
33545: LD_INT 44
33547: PUSH
33548: LD_INT 48
33550: PUSH
33551: LD_INT 49
33553: PUSH
33554: LD_INT 50
33556: PUSH
33557: LD_INT 51
33559: PUSH
33560: LD_INT 52
33562: PUSH
33563: LD_INT 53
33565: PUSH
33566: LD_INT 54
33568: PUSH
33569: LD_INT 55
33571: PUSH
33572: LD_INT 56
33574: PUSH
33575: LD_INT 57
33577: PUSH
33578: LD_INT 58
33580: PUSH
33581: LD_INT 59
33583: PUSH
33584: LD_INT 63
33586: PUSH
33587: LD_INT 64
33589: PUSH
33590: LD_INT 65
33592: PUSH
33593: LD_INT 82
33595: PUSH
33596: LD_INT 83
33598: PUSH
33599: LD_INT 84
33601: PUSH
33602: LD_INT 85
33604: PUSH
33605: LD_INT 86
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: LIST
33632: LIST
33633: LIST
33634: LIST
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: LIST
33643: LIST
33644: LIST
33645: LIST
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: ST_TO_ADDR
33663: GO 33666
33665: POP
// if state > - 1 and state < 3 then
33666: LD_VAR 0 3
33670: PUSH
33671: LD_INT 1
33673: NEG
33674: GREATER
33675: PUSH
33676: LD_VAR 0 3
33680: PUSH
33681: LD_INT 3
33683: LESS
33684: AND
33685: IFFALSE 33742
// for i in result do
33687: LD_ADDR_VAR 0 5
33691: PUSH
33692: LD_VAR 0 4
33696: PUSH
33697: FOR_IN
33698: IFFALSE 33740
// if GetTech ( i , side ) <> state then
33700: LD_VAR 0 5
33704: PPUSH
33705: LD_VAR 0 1
33709: PPUSH
33710: CALL_OW 321
33714: PUSH
33715: LD_VAR 0 3
33719: NONEQUAL
33720: IFFALSE 33738
// result := result diff i ;
33722: LD_ADDR_VAR 0 4
33726: PUSH
33727: LD_VAR 0 4
33731: PUSH
33732: LD_VAR 0 5
33736: DIFF
33737: ST_TO_ADDR
33738: GO 33697
33740: POP
33741: POP
// end ;
33742: LD_VAR 0 4
33746: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33747: LD_INT 0
33749: PPUSH
33750: PPUSH
33751: PPUSH
// result := true ;
33752: LD_ADDR_VAR 0 3
33756: PUSH
33757: LD_INT 1
33759: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33760: LD_ADDR_VAR 0 5
33764: PUSH
33765: LD_VAR 0 2
33769: PPUSH
33770: CALL_OW 480
33774: ST_TO_ADDR
// if not tmp then
33775: LD_VAR 0 5
33779: NOT
33780: IFFALSE 33784
// exit ;
33782: GO 33833
// for i in tmp do
33784: LD_ADDR_VAR 0 4
33788: PUSH
33789: LD_VAR 0 5
33793: PUSH
33794: FOR_IN
33795: IFFALSE 33831
// if GetTech ( i , side ) <> state_researched then
33797: LD_VAR 0 4
33801: PPUSH
33802: LD_VAR 0 1
33806: PPUSH
33807: CALL_OW 321
33811: PUSH
33812: LD_INT 2
33814: NONEQUAL
33815: IFFALSE 33829
// begin result := false ;
33817: LD_ADDR_VAR 0 3
33821: PUSH
33822: LD_INT 0
33824: ST_TO_ADDR
// exit ;
33825: POP
33826: POP
33827: GO 33833
// end ;
33829: GO 33794
33831: POP
33832: POP
// end ;
33833: LD_VAR 0 3
33837: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33838: LD_INT 0
33840: PPUSH
33841: PPUSH
33842: PPUSH
33843: PPUSH
33844: PPUSH
33845: PPUSH
33846: PPUSH
33847: PPUSH
33848: PPUSH
33849: PPUSH
33850: PPUSH
33851: PPUSH
33852: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33853: LD_VAR 0 1
33857: NOT
33858: PUSH
33859: LD_VAR 0 1
33863: PPUSH
33864: CALL_OW 257
33868: PUSH
33869: LD_INT 9
33871: NONEQUAL
33872: OR
33873: IFFALSE 33877
// exit ;
33875: GO 34450
// side := GetSide ( unit ) ;
33877: LD_ADDR_VAR 0 9
33881: PUSH
33882: LD_VAR 0 1
33886: PPUSH
33887: CALL_OW 255
33891: ST_TO_ADDR
// tech_space := tech_spacanom ;
33892: LD_ADDR_VAR 0 12
33896: PUSH
33897: LD_INT 29
33899: ST_TO_ADDR
// tech_time := tech_taurad ;
33900: LD_ADDR_VAR 0 13
33904: PUSH
33905: LD_INT 28
33907: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33908: LD_ADDR_VAR 0 11
33912: PUSH
33913: LD_VAR 0 1
33917: PPUSH
33918: CALL_OW 310
33922: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
33923: LD_VAR 0 11
33927: PPUSH
33928: CALL_OW 247
33932: PUSH
33933: LD_INT 2
33935: EQUAL
33936: IFFALSE 33940
// exit ;
33938: GO 34450
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33940: LD_ADDR_VAR 0 8
33944: PUSH
33945: LD_INT 81
33947: PUSH
33948: LD_VAR 0 9
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: PUSH
33957: LD_INT 3
33959: PUSH
33960: LD_INT 21
33962: PUSH
33963: LD_INT 3
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: PPUSH
33978: CALL_OW 69
33982: ST_TO_ADDR
// if not tmp then
33983: LD_VAR 0 8
33987: NOT
33988: IFFALSE 33992
// exit ;
33990: GO 34450
// if in_unit then
33992: LD_VAR 0 11
33996: IFFALSE 34020
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33998: LD_ADDR_VAR 0 10
34002: PUSH
34003: LD_VAR 0 8
34007: PPUSH
34008: LD_VAR 0 11
34012: PPUSH
34013: CALL_OW 74
34017: ST_TO_ADDR
34018: GO 34040
// enemy := NearestUnitToUnit ( tmp , unit ) ;
34020: LD_ADDR_VAR 0 10
34024: PUSH
34025: LD_VAR 0 8
34029: PPUSH
34030: LD_VAR 0 1
34034: PPUSH
34035: CALL_OW 74
34039: ST_TO_ADDR
// if not enemy then
34040: LD_VAR 0 10
34044: NOT
34045: IFFALSE 34049
// exit ;
34047: GO 34450
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
34049: LD_VAR 0 11
34053: PUSH
34054: LD_VAR 0 11
34058: PPUSH
34059: LD_VAR 0 10
34063: PPUSH
34064: CALL_OW 296
34068: PUSH
34069: LD_INT 13
34071: GREATER
34072: AND
34073: PUSH
34074: LD_VAR 0 1
34078: PPUSH
34079: LD_VAR 0 10
34083: PPUSH
34084: CALL_OW 296
34088: PUSH
34089: LD_INT 12
34091: GREATER
34092: OR
34093: IFFALSE 34097
// exit ;
34095: GO 34450
// missile := [ 1 ] ;
34097: LD_ADDR_VAR 0 14
34101: PUSH
34102: LD_INT 1
34104: PUSH
34105: EMPTY
34106: LIST
34107: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34108: LD_VAR 0 9
34112: PPUSH
34113: LD_VAR 0 12
34117: PPUSH
34118: CALL_OW 325
34122: IFFALSE 34151
// missile := Replace ( missile , missile + 1 , 2 ) ;
34124: LD_ADDR_VAR 0 14
34128: PUSH
34129: LD_VAR 0 14
34133: PPUSH
34134: LD_VAR 0 14
34138: PUSH
34139: LD_INT 1
34141: PLUS
34142: PPUSH
34143: LD_INT 2
34145: PPUSH
34146: CALL_OW 1
34150: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34151: LD_VAR 0 9
34155: PPUSH
34156: LD_VAR 0 13
34160: PPUSH
34161: CALL_OW 325
34165: PUSH
34166: LD_VAR 0 10
34170: PPUSH
34171: CALL_OW 255
34175: PPUSH
34176: LD_VAR 0 13
34180: PPUSH
34181: CALL_OW 325
34185: NOT
34186: AND
34187: IFFALSE 34216
// missile := Replace ( missile , missile + 1 , 3 ) ;
34189: LD_ADDR_VAR 0 14
34193: PUSH
34194: LD_VAR 0 14
34198: PPUSH
34199: LD_VAR 0 14
34203: PUSH
34204: LD_INT 1
34206: PLUS
34207: PPUSH
34208: LD_INT 3
34210: PPUSH
34211: CALL_OW 1
34215: ST_TO_ADDR
// if missile < 2 then
34216: LD_VAR 0 14
34220: PUSH
34221: LD_INT 2
34223: LESS
34224: IFFALSE 34228
// exit ;
34226: GO 34450
// x := GetX ( enemy ) ;
34228: LD_ADDR_VAR 0 4
34232: PUSH
34233: LD_VAR 0 10
34237: PPUSH
34238: CALL_OW 250
34242: ST_TO_ADDR
// y := GetY ( enemy ) ;
34243: LD_ADDR_VAR 0 5
34247: PUSH
34248: LD_VAR 0 10
34252: PPUSH
34253: CALL_OW 251
34257: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34258: LD_ADDR_VAR 0 6
34262: PUSH
34263: LD_VAR 0 4
34267: PUSH
34268: LD_INT 1
34270: NEG
34271: PPUSH
34272: LD_INT 1
34274: PPUSH
34275: CALL_OW 12
34279: PLUS
34280: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
34281: LD_ADDR_VAR 0 7
34285: PUSH
34286: LD_VAR 0 5
34290: PUSH
34291: LD_INT 1
34293: NEG
34294: PPUSH
34295: LD_INT 1
34297: PPUSH
34298: CALL_OW 12
34302: PLUS
34303: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34304: LD_VAR 0 6
34308: PPUSH
34309: LD_VAR 0 7
34313: PPUSH
34314: CALL_OW 488
34318: NOT
34319: IFFALSE 34341
// begin _x := x ;
34321: LD_ADDR_VAR 0 6
34325: PUSH
34326: LD_VAR 0 4
34330: ST_TO_ADDR
// _y := y ;
34331: LD_ADDR_VAR 0 7
34335: PUSH
34336: LD_VAR 0 5
34340: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
34341: LD_ADDR_VAR 0 3
34345: PUSH
34346: LD_INT 1
34348: PPUSH
34349: LD_VAR 0 14
34353: PPUSH
34354: CALL_OW 12
34358: ST_TO_ADDR
// case i of 1 :
34359: LD_VAR 0 3
34363: PUSH
34364: LD_INT 1
34366: DOUBLE
34367: EQUAL
34368: IFTRUE 34372
34370: GO 34389
34372: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
34373: LD_VAR 0 1
34377: PPUSH
34378: LD_VAR 0 10
34382: PPUSH
34383: CALL_OW 115
34387: GO 34450
34389: LD_INT 2
34391: DOUBLE
34392: EQUAL
34393: IFTRUE 34397
34395: GO 34419
34397: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
34398: LD_VAR 0 1
34402: PPUSH
34403: LD_VAR 0 6
34407: PPUSH
34408: LD_VAR 0 7
34412: PPUSH
34413: CALL_OW 153
34417: GO 34450
34419: LD_INT 3
34421: DOUBLE
34422: EQUAL
34423: IFTRUE 34427
34425: GO 34449
34427: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
34428: LD_VAR 0 1
34432: PPUSH
34433: LD_VAR 0 6
34437: PPUSH
34438: LD_VAR 0 7
34442: PPUSH
34443: CALL_OW 154
34447: GO 34450
34449: POP
// end ;
34450: LD_VAR 0 2
34454: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
34455: LD_INT 0
34457: PPUSH
34458: PPUSH
34459: PPUSH
34460: PPUSH
34461: PPUSH
34462: PPUSH
// if not unit or not building then
34463: LD_VAR 0 1
34467: NOT
34468: PUSH
34469: LD_VAR 0 2
34473: NOT
34474: OR
34475: IFFALSE 34479
// exit ;
34477: GO 34637
// x := GetX ( building ) ;
34479: LD_ADDR_VAR 0 5
34483: PUSH
34484: LD_VAR 0 2
34488: PPUSH
34489: CALL_OW 250
34493: ST_TO_ADDR
// y := GetY ( building ) ;
34494: LD_ADDR_VAR 0 6
34498: PUSH
34499: LD_VAR 0 2
34503: PPUSH
34504: CALL_OW 251
34508: ST_TO_ADDR
// for i = 0 to 5 do
34509: LD_ADDR_VAR 0 4
34513: PUSH
34514: DOUBLE
34515: LD_INT 0
34517: DEC
34518: ST_TO_ADDR
34519: LD_INT 5
34521: PUSH
34522: FOR_TO
34523: IFFALSE 34635
// begin _x := ShiftX ( x , i , 3 ) ;
34525: LD_ADDR_VAR 0 7
34529: PUSH
34530: LD_VAR 0 5
34534: PPUSH
34535: LD_VAR 0 4
34539: PPUSH
34540: LD_INT 3
34542: PPUSH
34543: CALL_OW 272
34547: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
34548: LD_ADDR_VAR 0 8
34552: PUSH
34553: LD_VAR 0 6
34557: PPUSH
34558: LD_VAR 0 4
34562: PPUSH
34563: LD_INT 3
34565: PPUSH
34566: CALL_OW 273
34570: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34571: LD_VAR 0 7
34575: PPUSH
34576: LD_VAR 0 8
34580: PPUSH
34581: CALL_OW 488
34585: NOT
34586: IFFALSE 34590
// continue ;
34588: GO 34522
// if HexInfo ( _x , _y ) = 0 then
34590: LD_VAR 0 7
34594: PPUSH
34595: LD_VAR 0 8
34599: PPUSH
34600: CALL_OW 428
34604: PUSH
34605: LD_INT 0
34607: EQUAL
34608: IFFALSE 34633
// begin ComMoveXY ( unit , _x , _y ) ;
34610: LD_VAR 0 1
34614: PPUSH
34615: LD_VAR 0 7
34619: PPUSH
34620: LD_VAR 0 8
34624: PPUSH
34625: CALL_OW 111
// exit ;
34629: POP
34630: POP
34631: GO 34637
// end ; end ;
34633: GO 34522
34635: POP
34636: POP
// end ;
34637: LD_VAR 0 3
34641: RET
// export function ScanBase ( side , base_area ) ; begin
34642: LD_INT 0
34644: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34645: LD_ADDR_VAR 0 3
34649: PUSH
34650: LD_VAR 0 2
34654: PPUSH
34655: LD_INT 81
34657: PUSH
34658: LD_VAR 0 1
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PPUSH
34667: CALL_OW 70
34671: ST_TO_ADDR
// end ;
34672: LD_VAR 0 3
34676: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34677: LD_INT 0
34679: PPUSH
34680: PPUSH
34681: PPUSH
34682: PPUSH
// result := false ;
34683: LD_ADDR_VAR 0 2
34687: PUSH
34688: LD_INT 0
34690: ST_TO_ADDR
// side := GetSide ( unit ) ;
34691: LD_ADDR_VAR 0 3
34695: PUSH
34696: LD_VAR 0 1
34700: PPUSH
34701: CALL_OW 255
34705: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34706: LD_ADDR_VAR 0 4
34710: PUSH
34711: LD_VAR 0 1
34715: PPUSH
34716: CALL_OW 248
34720: ST_TO_ADDR
// case nat of 1 :
34721: LD_VAR 0 4
34725: PUSH
34726: LD_INT 1
34728: DOUBLE
34729: EQUAL
34730: IFTRUE 34734
34732: GO 34745
34734: POP
// tech := tech_lassight ; 2 :
34735: LD_ADDR_VAR 0 5
34739: PUSH
34740: LD_INT 12
34742: ST_TO_ADDR
34743: GO 34784
34745: LD_INT 2
34747: DOUBLE
34748: EQUAL
34749: IFTRUE 34753
34751: GO 34764
34753: POP
// tech := tech_mortar ; 3 :
34754: LD_ADDR_VAR 0 5
34758: PUSH
34759: LD_INT 41
34761: ST_TO_ADDR
34762: GO 34784
34764: LD_INT 3
34766: DOUBLE
34767: EQUAL
34768: IFTRUE 34772
34770: GO 34783
34772: POP
// tech := tech_bazooka ; end ;
34773: LD_ADDR_VAR 0 5
34777: PUSH
34778: LD_INT 44
34780: ST_TO_ADDR
34781: GO 34784
34783: POP
// if Researched ( side , tech ) then
34784: LD_VAR 0 3
34788: PPUSH
34789: LD_VAR 0 5
34793: PPUSH
34794: CALL_OW 325
34798: IFFALSE 34825
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34800: LD_ADDR_VAR 0 2
34804: PUSH
34805: LD_INT 5
34807: PUSH
34808: LD_INT 8
34810: PUSH
34811: LD_INT 9
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: LIST
34818: PUSH
34819: LD_VAR 0 4
34823: ARRAY
34824: ST_TO_ADDR
// end ;
34825: LD_VAR 0 2
34829: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34830: LD_INT 0
34832: PPUSH
34833: PPUSH
34834: PPUSH
// if not mines then
34835: LD_VAR 0 2
34839: NOT
34840: IFFALSE 34844
// exit ;
34842: GO 34988
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34844: LD_ADDR_VAR 0 5
34848: PUSH
34849: LD_INT 81
34851: PUSH
34852: LD_VAR 0 1
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: PUSH
34861: LD_INT 3
34863: PUSH
34864: LD_INT 21
34866: PUSH
34867: LD_INT 3
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PPUSH
34882: CALL_OW 69
34886: ST_TO_ADDR
// for i in mines do
34887: LD_ADDR_VAR 0 4
34891: PUSH
34892: LD_VAR 0 2
34896: PUSH
34897: FOR_IN
34898: IFFALSE 34986
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34900: LD_VAR 0 4
34904: PUSH
34905: LD_INT 1
34907: ARRAY
34908: PPUSH
34909: LD_VAR 0 4
34913: PUSH
34914: LD_INT 2
34916: ARRAY
34917: PPUSH
34918: CALL_OW 458
34922: NOT
34923: IFFALSE 34927
// continue ;
34925: GO 34897
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
34927: LD_VAR 0 4
34931: PUSH
34932: LD_INT 1
34934: ARRAY
34935: PPUSH
34936: LD_VAR 0 4
34940: PUSH
34941: LD_INT 2
34943: ARRAY
34944: PPUSH
34945: CALL_OW 428
34949: PUSH
34950: LD_VAR 0 5
34954: IN
34955: IFFALSE 34984
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
34957: LD_VAR 0 4
34961: PUSH
34962: LD_INT 1
34964: ARRAY
34965: PPUSH
34966: LD_VAR 0 4
34970: PUSH
34971: LD_INT 2
34973: ARRAY
34974: PPUSH
34975: LD_VAR 0 1
34979: PPUSH
34980: CALL_OW 456
// end ;
34984: GO 34897
34986: POP
34987: POP
// end ;
34988: LD_VAR 0 3
34992: RET
// export function Count ( array ) ; var i ; begin
34993: LD_INT 0
34995: PPUSH
34996: PPUSH
// result := 0 ;
34997: LD_ADDR_VAR 0 2
35001: PUSH
35002: LD_INT 0
35004: ST_TO_ADDR
// for i in array do
35005: LD_ADDR_VAR 0 3
35009: PUSH
35010: LD_VAR 0 1
35014: PUSH
35015: FOR_IN
35016: IFFALSE 35040
// if i then
35018: LD_VAR 0 3
35022: IFFALSE 35038
// result := result + 1 ;
35024: LD_ADDR_VAR 0 2
35028: PUSH
35029: LD_VAR 0 2
35033: PUSH
35034: LD_INT 1
35036: PLUS
35037: ST_TO_ADDR
35038: GO 35015
35040: POP
35041: POP
// end ;
35042: LD_VAR 0 2
35046: RET
// export function IsEmpty ( building ) ; begin
35047: LD_INT 0
35049: PPUSH
// if not building then
35050: LD_VAR 0 1
35054: NOT
35055: IFFALSE 35059
// exit ;
35057: GO 35102
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
35059: LD_ADDR_VAR 0 2
35063: PUSH
35064: LD_VAR 0 1
35068: PUSH
35069: LD_INT 22
35071: PUSH
35072: LD_VAR 0 1
35076: PPUSH
35077: CALL_OW 255
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: PUSH
35086: LD_INT 58
35088: PUSH
35089: EMPTY
35090: LIST
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: PPUSH
35096: CALL_OW 69
35100: IN
35101: ST_TO_ADDR
// end ;
35102: LD_VAR 0 2
35106: RET
// export function IsNotFull ( building ) ; var places ; begin
35107: LD_INT 0
35109: PPUSH
35110: PPUSH
// if not building then
35111: LD_VAR 0 1
35115: NOT
35116: IFFALSE 35120
// exit ;
35118: GO 35291
// result := false ;
35120: LD_ADDR_VAR 0 2
35124: PUSH
35125: LD_INT 0
35127: ST_TO_ADDR
// places := 0 ;
35128: LD_ADDR_VAR 0 3
35132: PUSH
35133: LD_INT 0
35135: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
35136: LD_VAR 0 1
35140: PPUSH
35141: CALL_OW 266
35145: PUSH
35146: LD_INT 0
35148: DOUBLE
35149: EQUAL
35150: IFTRUE 35208
35152: LD_INT 1
35154: DOUBLE
35155: EQUAL
35156: IFTRUE 35208
35158: LD_INT 6
35160: DOUBLE
35161: EQUAL
35162: IFTRUE 35208
35164: LD_INT 7
35166: DOUBLE
35167: EQUAL
35168: IFTRUE 35208
35170: LD_INT 8
35172: DOUBLE
35173: EQUAL
35174: IFTRUE 35208
35176: LD_INT 4
35178: DOUBLE
35179: EQUAL
35180: IFTRUE 35208
35182: LD_INT 5
35184: DOUBLE
35185: EQUAL
35186: IFTRUE 35208
35188: LD_INT 2
35190: DOUBLE
35191: EQUAL
35192: IFTRUE 35208
35194: LD_INT 3
35196: DOUBLE
35197: EQUAL
35198: IFTRUE 35208
35200: LD_INT 35
35202: DOUBLE
35203: EQUAL
35204: IFTRUE 35208
35206: GO 35219
35208: POP
// places := 6 ; b_bunker , b_breastwork :
35209: LD_ADDR_VAR 0 3
35213: PUSH
35214: LD_INT 6
35216: ST_TO_ADDR
35217: GO 35264
35219: LD_INT 32
35221: DOUBLE
35222: EQUAL
35223: IFTRUE 35233
35225: LD_INT 31
35227: DOUBLE
35228: EQUAL
35229: IFTRUE 35233
35231: GO 35244
35233: POP
// places := 1 ; b_control_tower :
35234: LD_ADDR_VAR 0 3
35238: PUSH
35239: LD_INT 1
35241: ST_TO_ADDR
35242: GO 35264
35244: LD_INT 36
35246: DOUBLE
35247: EQUAL
35248: IFTRUE 35252
35250: GO 35263
35252: POP
// places := 3 ; end ;
35253: LD_ADDR_VAR 0 3
35257: PUSH
35258: LD_INT 3
35260: ST_TO_ADDR
35261: GO 35264
35263: POP
// if places then
35264: LD_VAR 0 3
35268: IFFALSE 35291
// result := UnitsInside ( building ) < places ;
35270: LD_ADDR_VAR 0 2
35274: PUSH
35275: LD_VAR 0 1
35279: PPUSH
35280: CALL_OW 313
35284: PUSH
35285: LD_VAR 0 3
35289: LESS
35290: ST_TO_ADDR
// end ;
35291: LD_VAR 0 2
35295: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35296: LD_INT 0
35298: PPUSH
35299: PPUSH
35300: PPUSH
35301: PPUSH
// tmp := [ ] ;
35302: LD_ADDR_VAR 0 3
35306: PUSH
35307: EMPTY
35308: ST_TO_ADDR
// list := [ ] ;
35309: LD_ADDR_VAR 0 5
35313: PUSH
35314: EMPTY
35315: ST_TO_ADDR
// for i = 16 to 25 do
35316: LD_ADDR_VAR 0 4
35320: PUSH
35321: DOUBLE
35322: LD_INT 16
35324: DEC
35325: ST_TO_ADDR
35326: LD_INT 25
35328: PUSH
35329: FOR_TO
35330: IFFALSE 35403
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35332: LD_ADDR_VAR 0 3
35336: PUSH
35337: LD_VAR 0 3
35341: PUSH
35342: LD_INT 22
35344: PUSH
35345: LD_VAR 0 1
35349: PPUSH
35350: CALL_OW 255
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: PUSH
35359: LD_INT 91
35361: PUSH
35362: LD_VAR 0 1
35366: PUSH
35367: LD_INT 6
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: LIST
35374: PUSH
35375: LD_INT 30
35377: PUSH
35378: LD_VAR 0 4
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: LIST
35391: PUSH
35392: EMPTY
35393: LIST
35394: PPUSH
35395: CALL_OW 69
35399: ADD
35400: ST_TO_ADDR
35401: GO 35329
35403: POP
35404: POP
// for i = 1 to tmp do
35405: LD_ADDR_VAR 0 4
35409: PUSH
35410: DOUBLE
35411: LD_INT 1
35413: DEC
35414: ST_TO_ADDR
35415: LD_VAR 0 3
35419: PUSH
35420: FOR_TO
35421: IFFALSE 35509
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
35423: LD_ADDR_VAR 0 5
35427: PUSH
35428: LD_VAR 0 5
35432: PUSH
35433: LD_VAR 0 3
35437: PUSH
35438: LD_VAR 0 4
35442: ARRAY
35443: PPUSH
35444: CALL_OW 266
35448: PUSH
35449: LD_VAR 0 3
35453: PUSH
35454: LD_VAR 0 4
35458: ARRAY
35459: PPUSH
35460: CALL_OW 250
35464: PUSH
35465: LD_VAR 0 3
35469: PUSH
35470: LD_VAR 0 4
35474: ARRAY
35475: PPUSH
35476: CALL_OW 251
35480: PUSH
35481: LD_VAR 0 3
35485: PUSH
35486: LD_VAR 0 4
35490: ARRAY
35491: PPUSH
35492: CALL_OW 254
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: LIST
35501: LIST
35502: PUSH
35503: EMPTY
35504: LIST
35505: ADD
35506: ST_TO_ADDR
35507: GO 35420
35509: POP
35510: POP
// result := list ;
35511: LD_ADDR_VAR 0 2
35515: PUSH
35516: LD_VAR 0 5
35520: ST_TO_ADDR
// end ;
35521: LD_VAR 0 2
35525: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
35526: LD_INT 0
35528: PPUSH
35529: PPUSH
35530: PPUSH
35531: PPUSH
35532: PPUSH
35533: PPUSH
35534: PPUSH
// if not factory then
35535: LD_VAR 0 1
35539: NOT
35540: IFFALSE 35544
// exit ;
35542: GO 36137
// if control = control_apeman then
35544: LD_VAR 0 4
35548: PUSH
35549: LD_INT 5
35551: EQUAL
35552: IFFALSE 35661
// begin tmp := UnitsInside ( factory ) ;
35554: LD_ADDR_VAR 0 8
35558: PUSH
35559: LD_VAR 0 1
35563: PPUSH
35564: CALL_OW 313
35568: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
35569: LD_VAR 0 8
35573: PPUSH
35574: LD_INT 25
35576: PUSH
35577: LD_INT 12
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PPUSH
35584: CALL_OW 72
35588: NOT
35589: IFFALSE 35599
// control := control_manual ;
35591: LD_ADDR_VAR 0 4
35595: PUSH
35596: LD_INT 1
35598: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
35599: LD_ADDR_VAR 0 8
35603: PUSH
35604: LD_VAR 0 1
35608: PPUSH
35609: CALL 35296 0 1
35613: ST_TO_ADDR
// if tmp then
35614: LD_VAR 0 8
35618: IFFALSE 35661
// begin for i in tmp do
35620: LD_ADDR_VAR 0 7
35624: PUSH
35625: LD_VAR 0 8
35629: PUSH
35630: FOR_IN
35631: IFFALSE 35659
// if i [ 1 ] = b_ext_radio then
35633: LD_VAR 0 7
35637: PUSH
35638: LD_INT 1
35640: ARRAY
35641: PUSH
35642: LD_INT 22
35644: EQUAL
35645: IFFALSE 35657
// begin control := control_remote ;
35647: LD_ADDR_VAR 0 4
35651: PUSH
35652: LD_INT 2
35654: ST_TO_ADDR
// break ;
35655: GO 35659
// end ;
35657: GO 35630
35659: POP
35660: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35661: LD_VAR 0 1
35665: PPUSH
35666: LD_VAR 0 2
35670: PPUSH
35671: LD_VAR 0 3
35675: PPUSH
35676: LD_VAR 0 4
35680: PPUSH
35681: LD_VAR 0 5
35685: PPUSH
35686: CALL_OW 448
35690: IFFALSE 35725
// begin result := [ chassis , engine , control , weapon ] ;
35692: LD_ADDR_VAR 0 6
35696: PUSH
35697: LD_VAR 0 2
35701: PUSH
35702: LD_VAR 0 3
35706: PUSH
35707: LD_VAR 0 4
35711: PUSH
35712: LD_VAR 0 5
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: LIST
35721: LIST
35722: ST_TO_ADDR
// exit ;
35723: GO 36137
// end ; _chassis := AvailableChassisList ( factory ) ;
35725: LD_ADDR_VAR 0 9
35729: PUSH
35730: LD_VAR 0 1
35734: PPUSH
35735: CALL_OW 475
35739: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35740: LD_ADDR_VAR 0 11
35744: PUSH
35745: LD_VAR 0 1
35749: PPUSH
35750: CALL_OW 476
35754: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35755: LD_ADDR_VAR 0 12
35759: PUSH
35760: LD_VAR 0 1
35764: PPUSH
35765: CALL_OW 477
35769: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35770: LD_ADDR_VAR 0 10
35774: PUSH
35775: LD_VAR 0 1
35779: PPUSH
35780: CALL_OW 478
35784: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35785: LD_VAR 0 9
35789: NOT
35790: PUSH
35791: LD_VAR 0 11
35795: NOT
35796: OR
35797: PUSH
35798: LD_VAR 0 12
35802: NOT
35803: OR
35804: PUSH
35805: LD_VAR 0 10
35809: NOT
35810: OR
35811: IFFALSE 35846
// begin result := [ chassis , engine , control , weapon ] ;
35813: LD_ADDR_VAR 0 6
35817: PUSH
35818: LD_VAR 0 2
35822: PUSH
35823: LD_VAR 0 3
35827: PUSH
35828: LD_VAR 0 4
35832: PUSH
35833: LD_VAR 0 5
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: ST_TO_ADDR
// exit ;
35844: GO 36137
// end ; if not chassis in _chassis then
35846: LD_VAR 0 2
35850: PUSH
35851: LD_VAR 0 9
35855: IN
35856: NOT
35857: IFFALSE 35883
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35859: LD_ADDR_VAR 0 2
35863: PUSH
35864: LD_VAR 0 9
35868: PUSH
35869: LD_INT 1
35871: PPUSH
35872: LD_VAR 0 9
35876: PPUSH
35877: CALL_OW 12
35881: ARRAY
35882: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35883: LD_VAR 0 2
35887: PPUSH
35888: LD_VAR 0 3
35892: PPUSH
35893: CALL 36142 0 2
35897: NOT
35898: IFFALSE 35957
// repeat engine := _engine [ 1 ] ;
35900: LD_ADDR_VAR 0 3
35904: PUSH
35905: LD_VAR 0 11
35909: PUSH
35910: LD_INT 1
35912: ARRAY
35913: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35914: LD_ADDR_VAR 0 11
35918: PUSH
35919: LD_VAR 0 11
35923: PPUSH
35924: LD_INT 1
35926: PPUSH
35927: CALL_OW 3
35931: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35932: LD_VAR 0 2
35936: PPUSH
35937: LD_VAR 0 3
35941: PPUSH
35942: CALL 36142 0 2
35946: PUSH
35947: LD_VAR 0 11
35951: PUSH
35952: EMPTY
35953: EQUAL
35954: OR
35955: IFFALSE 35900
// if not control in _control then
35957: LD_VAR 0 4
35961: PUSH
35962: LD_VAR 0 12
35966: IN
35967: NOT
35968: IFFALSE 35994
// control := _control [ rand ( 1 , _control ) ] ;
35970: LD_ADDR_VAR 0 4
35974: PUSH
35975: LD_VAR 0 12
35979: PUSH
35980: LD_INT 1
35982: PPUSH
35983: LD_VAR 0 12
35987: PPUSH
35988: CALL_OW 12
35992: ARRAY
35993: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35994: LD_VAR 0 2
35998: PPUSH
35999: LD_VAR 0 5
36003: PPUSH
36004: CALL 36362 0 2
36008: NOT
36009: IFFALSE 36068
// repeat weapon := _weapon [ 1 ] ;
36011: LD_ADDR_VAR 0 5
36015: PUSH
36016: LD_VAR 0 10
36020: PUSH
36021: LD_INT 1
36023: ARRAY
36024: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
36025: LD_ADDR_VAR 0 10
36029: PUSH
36030: LD_VAR 0 10
36034: PPUSH
36035: LD_INT 1
36037: PPUSH
36038: CALL_OW 3
36042: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
36043: LD_VAR 0 2
36047: PPUSH
36048: LD_VAR 0 5
36052: PPUSH
36053: CALL 36362 0 2
36057: PUSH
36058: LD_VAR 0 10
36062: PUSH
36063: EMPTY
36064: EQUAL
36065: OR
36066: IFFALSE 36011
// result := [ ] ;
36068: LD_ADDR_VAR 0 6
36072: PUSH
36073: EMPTY
36074: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36075: LD_VAR 0 1
36079: PPUSH
36080: LD_VAR 0 2
36084: PPUSH
36085: LD_VAR 0 3
36089: PPUSH
36090: LD_VAR 0 4
36094: PPUSH
36095: LD_VAR 0 5
36099: PPUSH
36100: CALL_OW 448
36104: IFFALSE 36137
// result := [ chassis , engine , control , weapon ] ;
36106: LD_ADDR_VAR 0 6
36110: PUSH
36111: LD_VAR 0 2
36115: PUSH
36116: LD_VAR 0 3
36120: PUSH
36121: LD_VAR 0 4
36125: PUSH
36126: LD_VAR 0 5
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: ST_TO_ADDR
// end ;
36137: LD_VAR 0 6
36141: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
36142: LD_INT 0
36144: PPUSH
// if not chassis or not engine then
36145: LD_VAR 0 1
36149: NOT
36150: PUSH
36151: LD_VAR 0 2
36155: NOT
36156: OR
36157: IFFALSE 36161
// exit ;
36159: GO 36357
// case engine of engine_solar :
36161: LD_VAR 0 2
36165: PUSH
36166: LD_INT 2
36168: DOUBLE
36169: EQUAL
36170: IFTRUE 36174
36172: GO 36212
36174: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
36175: LD_ADDR_VAR 0 3
36179: PUSH
36180: LD_INT 11
36182: PUSH
36183: LD_INT 12
36185: PUSH
36186: LD_INT 13
36188: PUSH
36189: LD_INT 14
36191: PUSH
36192: LD_INT 1
36194: PUSH
36195: LD_INT 2
36197: PUSH
36198: LD_INT 3
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: LIST
36209: ST_TO_ADDR
36210: GO 36341
36212: LD_INT 1
36214: DOUBLE
36215: EQUAL
36216: IFTRUE 36220
36218: GO 36282
36220: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36221: LD_ADDR_VAR 0 3
36225: PUSH
36226: LD_INT 11
36228: PUSH
36229: LD_INT 12
36231: PUSH
36232: LD_INT 13
36234: PUSH
36235: LD_INT 14
36237: PUSH
36238: LD_INT 1
36240: PUSH
36241: LD_INT 2
36243: PUSH
36244: LD_INT 3
36246: PUSH
36247: LD_INT 4
36249: PUSH
36250: LD_INT 5
36252: PUSH
36253: LD_INT 21
36255: PUSH
36256: LD_INT 23
36258: PUSH
36259: LD_INT 22
36261: PUSH
36262: LD_INT 24
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: LIST
36273: LIST
36274: LIST
36275: LIST
36276: LIST
36277: LIST
36278: LIST
36279: ST_TO_ADDR
36280: GO 36341
36282: LD_INT 3
36284: DOUBLE
36285: EQUAL
36286: IFTRUE 36290
36288: GO 36340
36290: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36291: LD_ADDR_VAR 0 3
36295: PUSH
36296: LD_INT 13
36298: PUSH
36299: LD_INT 14
36301: PUSH
36302: LD_INT 2
36304: PUSH
36305: LD_INT 3
36307: PUSH
36308: LD_INT 4
36310: PUSH
36311: LD_INT 5
36313: PUSH
36314: LD_INT 21
36316: PUSH
36317: LD_INT 22
36319: PUSH
36320: LD_INT 23
36322: PUSH
36323: LD_INT 24
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: LIST
36330: LIST
36331: LIST
36332: LIST
36333: LIST
36334: LIST
36335: LIST
36336: LIST
36337: ST_TO_ADDR
36338: GO 36341
36340: POP
// result := ( chassis in result ) ;
36341: LD_ADDR_VAR 0 3
36345: PUSH
36346: LD_VAR 0 1
36350: PUSH
36351: LD_VAR 0 3
36355: IN
36356: ST_TO_ADDR
// end ;
36357: LD_VAR 0 3
36361: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36362: LD_INT 0
36364: PPUSH
// if not chassis or not weapon then
36365: LD_VAR 0 1
36369: NOT
36370: PUSH
36371: LD_VAR 0 2
36375: NOT
36376: OR
36377: IFFALSE 36381
// exit ;
36379: GO 37441
// case weapon of us_machine_gun :
36381: LD_VAR 0 2
36385: PUSH
36386: LD_INT 2
36388: DOUBLE
36389: EQUAL
36390: IFTRUE 36394
36392: GO 36424
36394: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36395: LD_ADDR_VAR 0 3
36399: PUSH
36400: LD_INT 1
36402: PUSH
36403: LD_INT 2
36405: PUSH
36406: LD_INT 3
36408: PUSH
36409: LD_INT 4
36411: PUSH
36412: LD_INT 5
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: LIST
36419: LIST
36420: LIST
36421: ST_TO_ADDR
36422: GO 37425
36424: LD_INT 3
36426: DOUBLE
36427: EQUAL
36428: IFTRUE 36432
36430: GO 36462
36432: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
36433: LD_ADDR_VAR 0 3
36437: PUSH
36438: LD_INT 1
36440: PUSH
36441: LD_INT 2
36443: PUSH
36444: LD_INT 3
36446: PUSH
36447: LD_INT 4
36449: PUSH
36450: LD_INT 5
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: LIST
36457: LIST
36458: LIST
36459: ST_TO_ADDR
36460: GO 37425
36462: LD_INT 11
36464: DOUBLE
36465: EQUAL
36466: IFTRUE 36470
36468: GO 36500
36470: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
36471: LD_ADDR_VAR 0 3
36475: PUSH
36476: LD_INT 1
36478: PUSH
36479: LD_INT 2
36481: PUSH
36482: LD_INT 3
36484: PUSH
36485: LD_INT 4
36487: PUSH
36488: LD_INT 5
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: LIST
36495: LIST
36496: LIST
36497: ST_TO_ADDR
36498: GO 37425
36500: LD_INT 4
36502: DOUBLE
36503: EQUAL
36504: IFTRUE 36508
36506: GO 36534
36508: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
36509: LD_ADDR_VAR 0 3
36513: PUSH
36514: LD_INT 2
36516: PUSH
36517: LD_INT 3
36519: PUSH
36520: LD_INT 4
36522: PUSH
36523: LD_INT 5
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: ST_TO_ADDR
36532: GO 37425
36534: LD_INT 5
36536: DOUBLE
36537: EQUAL
36538: IFTRUE 36542
36540: GO 36568
36542: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
36543: LD_ADDR_VAR 0 3
36547: PUSH
36548: LD_INT 2
36550: PUSH
36551: LD_INT 3
36553: PUSH
36554: LD_INT 4
36556: PUSH
36557: LD_INT 5
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: LIST
36564: LIST
36565: ST_TO_ADDR
36566: GO 37425
36568: LD_INT 9
36570: DOUBLE
36571: EQUAL
36572: IFTRUE 36576
36574: GO 36602
36576: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
36577: LD_ADDR_VAR 0 3
36581: PUSH
36582: LD_INT 2
36584: PUSH
36585: LD_INT 3
36587: PUSH
36588: LD_INT 4
36590: PUSH
36591: LD_INT 5
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: LIST
36598: LIST
36599: ST_TO_ADDR
36600: GO 37425
36602: LD_INT 7
36604: DOUBLE
36605: EQUAL
36606: IFTRUE 36610
36608: GO 36636
36610: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
36611: LD_ADDR_VAR 0 3
36615: PUSH
36616: LD_INT 2
36618: PUSH
36619: LD_INT 3
36621: PUSH
36622: LD_INT 4
36624: PUSH
36625: LD_INT 5
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: LIST
36632: LIST
36633: ST_TO_ADDR
36634: GO 37425
36636: LD_INT 12
36638: DOUBLE
36639: EQUAL
36640: IFTRUE 36644
36642: GO 36670
36644: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
36645: LD_ADDR_VAR 0 3
36649: PUSH
36650: LD_INT 2
36652: PUSH
36653: LD_INT 3
36655: PUSH
36656: LD_INT 4
36658: PUSH
36659: LD_INT 5
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: ST_TO_ADDR
36668: GO 37425
36670: LD_INT 13
36672: DOUBLE
36673: EQUAL
36674: IFTRUE 36678
36676: GO 36704
36678: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
36679: LD_ADDR_VAR 0 3
36683: PUSH
36684: LD_INT 2
36686: PUSH
36687: LD_INT 3
36689: PUSH
36690: LD_INT 4
36692: PUSH
36693: LD_INT 5
36695: PUSH
36696: EMPTY
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: ST_TO_ADDR
36702: GO 37425
36704: LD_INT 14
36706: DOUBLE
36707: EQUAL
36708: IFTRUE 36712
36710: GO 36730
36712: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
36713: LD_ADDR_VAR 0 3
36717: PUSH
36718: LD_INT 4
36720: PUSH
36721: LD_INT 5
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: ST_TO_ADDR
36728: GO 37425
36730: LD_INT 6
36732: DOUBLE
36733: EQUAL
36734: IFTRUE 36738
36736: GO 36756
36738: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36739: LD_ADDR_VAR 0 3
36743: PUSH
36744: LD_INT 4
36746: PUSH
36747: LD_INT 5
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: ST_TO_ADDR
36754: GO 37425
36756: LD_INT 10
36758: DOUBLE
36759: EQUAL
36760: IFTRUE 36764
36762: GO 36782
36764: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36765: LD_ADDR_VAR 0 3
36769: PUSH
36770: LD_INT 4
36772: PUSH
36773: LD_INT 5
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: ST_TO_ADDR
36780: GO 37425
36782: LD_INT 22
36784: DOUBLE
36785: EQUAL
36786: IFTRUE 36790
36788: GO 36816
36790: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36791: LD_ADDR_VAR 0 3
36795: PUSH
36796: LD_INT 11
36798: PUSH
36799: LD_INT 12
36801: PUSH
36802: LD_INT 13
36804: PUSH
36805: LD_INT 14
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: ST_TO_ADDR
36814: GO 37425
36816: LD_INT 23
36818: DOUBLE
36819: EQUAL
36820: IFTRUE 36824
36822: GO 36850
36824: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36825: LD_ADDR_VAR 0 3
36829: PUSH
36830: LD_INT 11
36832: PUSH
36833: LD_INT 12
36835: PUSH
36836: LD_INT 13
36838: PUSH
36839: LD_INT 14
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: LIST
36846: LIST
36847: ST_TO_ADDR
36848: GO 37425
36850: LD_INT 24
36852: DOUBLE
36853: EQUAL
36854: IFTRUE 36858
36856: GO 36884
36858: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36859: LD_ADDR_VAR 0 3
36863: PUSH
36864: LD_INT 11
36866: PUSH
36867: LD_INT 12
36869: PUSH
36870: LD_INT 13
36872: PUSH
36873: LD_INT 14
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: LIST
36880: LIST
36881: ST_TO_ADDR
36882: GO 37425
36884: LD_INT 30
36886: DOUBLE
36887: EQUAL
36888: IFTRUE 36892
36890: GO 36918
36892: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36893: LD_ADDR_VAR 0 3
36897: PUSH
36898: LD_INT 11
36900: PUSH
36901: LD_INT 12
36903: PUSH
36904: LD_INT 13
36906: PUSH
36907: LD_INT 14
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: ST_TO_ADDR
36916: GO 37425
36918: LD_INT 25
36920: DOUBLE
36921: EQUAL
36922: IFTRUE 36926
36924: GO 36944
36926: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36927: LD_ADDR_VAR 0 3
36931: PUSH
36932: LD_INT 13
36934: PUSH
36935: LD_INT 14
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: ST_TO_ADDR
36942: GO 37425
36944: LD_INT 27
36946: DOUBLE
36947: EQUAL
36948: IFTRUE 36952
36950: GO 36970
36952: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
36953: LD_ADDR_VAR 0 3
36957: PUSH
36958: LD_INT 13
36960: PUSH
36961: LD_INT 14
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: ST_TO_ADDR
36968: GO 37425
36970: LD_INT 92
36972: DOUBLE
36973: EQUAL
36974: IFTRUE 36978
36976: GO 37004
36978: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36979: LD_ADDR_VAR 0 3
36983: PUSH
36984: LD_INT 11
36986: PUSH
36987: LD_INT 12
36989: PUSH
36990: LD_INT 13
36992: PUSH
36993: LD_INT 14
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: ST_TO_ADDR
37002: GO 37425
37004: LD_INT 28
37006: DOUBLE
37007: EQUAL
37008: IFTRUE 37012
37010: GO 37030
37012: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
37013: LD_ADDR_VAR 0 3
37017: PUSH
37018: LD_INT 13
37020: PUSH
37021: LD_INT 14
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: ST_TO_ADDR
37028: GO 37425
37030: LD_INT 29
37032: DOUBLE
37033: EQUAL
37034: IFTRUE 37038
37036: GO 37056
37038: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
37039: LD_ADDR_VAR 0 3
37043: PUSH
37044: LD_INT 13
37046: PUSH
37047: LD_INT 14
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: ST_TO_ADDR
37054: GO 37425
37056: LD_INT 31
37058: DOUBLE
37059: EQUAL
37060: IFTRUE 37064
37062: GO 37082
37064: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
37065: LD_ADDR_VAR 0 3
37069: PUSH
37070: LD_INT 13
37072: PUSH
37073: LD_INT 14
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: ST_TO_ADDR
37080: GO 37425
37082: LD_INT 26
37084: DOUBLE
37085: EQUAL
37086: IFTRUE 37090
37088: GO 37108
37090: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
37091: LD_ADDR_VAR 0 3
37095: PUSH
37096: LD_INT 13
37098: PUSH
37099: LD_INT 14
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: ST_TO_ADDR
37106: GO 37425
37108: LD_INT 42
37110: DOUBLE
37111: EQUAL
37112: IFTRUE 37116
37114: GO 37142
37116: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
37117: LD_ADDR_VAR 0 3
37121: PUSH
37122: LD_INT 21
37124: PUSH
37125: LD_INT 22
37127: PUSH
37128: LD_INT 23
37130: PUSH
37131: LD_INT 24
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: LIST
37138: LIST
37139: ST_TO_ADDR
37140: GO 37425
37142: LD_INT 43
37144: DOUBLE
37145: EQUAL
37146: IFTRUE 37150
37148: GO 37176
37150: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
37151: LD_ADDR_VAR 0 3
37155: PUSH
37156: LD_INT 21
37158: PUSH
37159: LD_INT 22
37161: PUSH
37162: LD_INT 23
37164: PUSH
37165: LD_INT 24
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: ST_TO_ADDR
37174: GO 37425
37176: LD_INT 44
37178: DOUBLE
37179: EQUAL
37180: IFTRUE 37184
37182: GO 37210
37184: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
37185: LD_ADDR_VAR 0 3
37189: PUSH
37190: LD_INT 21
37192: PUSH
37193: LD_INT 22
37195: PUSH
37196: LD_INT 23
37198: PUSH
37199: LD_INT 24
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: LIST
37206: LIST
37207: ST_TO_ADDR
37208: GO 37425
37210: LD_INT 45
37212: DOUBLE
37213: EQUAL
37214: IFTRUE 37218
37216: GO 37244
37218: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37219: LD_ADDR_VAR 0 3
37223: PUSH
37224: LD_INT 21
37226: PUSH
37227: LD_INT 22
37229: PUSH
37230: LD_INT 23
37232: PUSH
37233: LD_INT 24
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: LIST
37240: LIST
37241: ST_TO_ADDR
37242: GO 37425
37244: LD_INT 49
37246: DOUBLE
37247: EQUAL
37248: IFTRUE 37252
37250: GO 37278
37252: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37253: LD_ADDR_VAR 0 3
37257: PUSH
37258: LD_INT 21
37260: PUSH
37261: LD_INT 22
37263: PUSH
37264: LD_INT 23
37266: PUSH
37267: LD_INT 24
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: LIST
37274: LIST
37275: ST_TO_ADDR
37276: GO 37425
37278: LD_INT 51
37280: DOUBLE
37281: EQUAL
37282: IFTRUE 37286
37284: GO 37312
37286: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37287: LD_ADDR_VAR 0 3
37291: PUSH
37292: LD_INT 21
37294: PUSH
37295: LD_INT 22
37297: PUSH
37298: LD_INT 23
37300: PUSH
37301: LD_INT 24
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: LIST
37308: LIST
37309: ST_TO_ADDR
37310: GO 37425
37312: LD_INT 52
37314: DOUBLE
37315: EQUAL
37316: IFTRUE 37320
37318: GO 37346
37320: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37321: LD_ADDR_VAR 0 3
37325: PUSH
37326: LD_INT 21
37328: PUSH
37329: LD_INT 22
37331: PUSH
37332: LD_INT 23
37334: PUSH
37335: LD_INT 24
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: ST_TO_ADDR
37344: GO 37425
37346: LD_INT 53
37348: DOUBLE
37349: EQUAL
37350: IFTRUE 37354
37352: GO 37372
37354: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37355: LD_ADDR_VAR 0 3
37359: PUSH
37360: LD_INT 23
37362: PUSH
37363: LD_INT 24
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: ST_TO_ADDR
37370: GO 37425
37372: LD_INT 46
37374: DOUBLE
37375: EQUAL
37376: IFTRUE 37380
37378: GO 37398
37380: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37381: LD_ADDR_VAR 0 3
37385: PUSH
37386: LD_INT 23
37388: PUSH
37389: LD_INT 24
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: ST_TO_ADDR
37396: GO 37425
37398: LD_INT 47
37400: DOUBLE
37401: EQUAL
37402: IFTRUE 37406
37404: GO 37424
37406: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37407: LD_ADDR_VAR 0 3
37411: PUSH
37412: LD_INT 23
37414: PUSH
37415: LD_INT 24
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: ST_TO_ADDR
37422: GO 37425
37424: POP
// result := ( chassis in result ) ;
37425: LD_ADDR_VAR 0 3
37429: PUSH
37430: LD_VAR 0 1
37434: PUSH
37435: LD_VAR 0 3
37439: IN
37440: ST_TO_ADDR
// end ;
37441: LD_VAR 0 3
37445: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
37446: LD_INT 0
37448: PPUSH
37449: PPUSH
37450: PPUSH
37451: PPUSH
37452: PPUSH
37453: PPUSH
37454: PPUSH
// result := array ;
37455: LD_ADDR_VAR 0 5
37459: PUSH
37460: LD_VAR 0 1
37464: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
37465: LD_VAR 0 1
37469: NOT
37470: PUSH
37471: LD_VAR 0 2
37475: NOT
37476: OR
37477: PUSH
37478: LD_VAR 0 3
37482: NOT
37483: OR
37484: PUSH
37485: LD_VAR 0 2
37489: PUSH
37490: LD_VAR 0 1
37494: GREATER
37495: OR
37496: PUSH
37497: LD_VAR 0 3
37501: PUSH
37502: LD_VAR 0 1
37506: GREATER
37507: OR
37508: IFFALSE 37512
// exit ;
37510: GO 37808
// if direction then
37512: LD_VAR 0 4
37516: IFFALSE 37580
// begin d := 1 ;
37518: LD_ADDR_VAR 0 9
37522: PUSH
37523: LD_INT 1
37525: ST_TO_ADDR
// if i_from > i_to then
37526: LD_VAR 0 2
37530: PUSH
37531: LD_VAR 0 3
37535: GREATER
37536: IFFALSE 37562
// length := ( array - i_from ) + i_to else
37538: LD_ADDR_VAR 0 11
37542: PUSH
37543: LD_VAR 0 1
37547: PUSH
37548: LD_VAR 0 2
37552: MINUS
37553: PUSH
37554: LD_VAR 0 3
37558: PLUS
37559: ST_TO_ADDR
37560: GO 37578
// length := i_to - i_from ;
37562: LD_ADDR_VAR 0 11
37566: PUSH
37567: LD_VAR 0 3
37571: PUSH
37572: LD_VAR 0 2
37576: MINUS
37577: ST_TO_ADDR
// end else
37578: GO 37641
// begin d := - 1 ;
37580: LD_ADDR_VAR 0 9
37584: PUSH
37585: LD_INT 1
37587: NEG
37588: ST_TO_ADDR
// if i_from > i_to then
37589: LD_VAR 0 2
37593: PUSH
37594: LD_VAR 0 3
37598: GREATER
37599: IFFALSE 37619
// length := i_from - i_to else
37601: LD_ADDR_VAR 0 11
37605: PUSH
37606: LD_VAR 0 2
37610: PUSH
37611: LD_VAR 0 3
37615: MINUS
37616: ST_TO_ADDR
37617: GO 37641
// length := ( array - i_to ) + i_from ;
37619: LD_ADDR_VAR 0 11
37623: PUSH
37624: LD_VAR 0 1
37628: PUSH
37629: LD_VAR 0 3
37633: MINUS
37634: PUSH
37635: LD_VAR 0 2
37639: PLUS
37640: ST_TO_ADDR
// end ; if not length then
37641: LD_VAR 0 11
37645: NOT
37646: IFFALSE 37650
// exit ;
37648: GO 37808
// tmp := array ;
37650: LD_ADDR_VAR 0 10
37654: PUSH
37655: LD_VAR 0 1
37659: ST_TO_ADDR
// for i = 1 to length do
37660: LD_ADDR_VAR 0 6
37664: PUSH
37665: DOUBLE
37666: LD_INT 1
37668: DEC
37669: ST_TO_ADDR
37670: LD_VAR 0 11
37674: PUSH
37675: FOR_TO
37676: IFFALSE 37796
// begin for j = 1 to array do
37678: LD_ADDR_VAR 0 7
37682: PUSH
37683: DOUBLE
37684: LD_INT 1
37686: DEC
37687: ST_TO_ADDR
37688: LD_VAR 0 1
37692: PUSH
37693: FOR_TO
37694: IFFALSE 37782
// begin k := j + d ;
37696: LD_ADDR_VAR 0 8
37700: PUSH
37701: LD_VAR 0 7
37705: PUSH
37706: LD_VAR 0 9
37710: PLUS
37711: ST_TO_ADDR
// if k > array then
37712: LD_VAR 0 8
37716: PUSH
37717: LD_VAR 0 1
37721: GREATER
37722: IFFALSE 37732
// k := 1 ;
37724: LD_ADDR_VAR 0 8
37728: PUSH
37729: LD_INT 1
37731: ST_TO_ADDR
// if not k then
37732: LD_VAR 0 8
37736: NOT
37737: IFFALSE 37749
// k := array ;
37739: LD_ADDR_VAR 0 8
37743: PUSH
37744: LD_VAR 0 1
37748: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
37749: LD_ADDR_VAR 0 10
37753: PUSH
37754: LD_VAR 0 10
37758: PPUSH
37759: LD_VAR 0 8
37763: PPUSH
37764: LD_VAR 0 1
37768: PUSH
37769: LD_VAR 0 7
37773: ARRAY
37774: PPUSH
37775: CALL_OW 1
37779: ST_TO_ADDR
// end ;
37780: GO 37693
37782: POP
37783: POP
// array := tmp ;
37784: LD_ADDR_VAR 0 1
37788: PUSH
37789: LD_VAR 0 10
37793: ST_TO_ADDR
// end ;
37794: GO 37675
37796: POP
37797: POP
// result := array ;
37798: LD_ADDR_VAR 0 5
37802: PUSH
37803: LD_VAR 0 1
37807: ST_TO_ADDR
// end ;
37808: LD_VAR 0 5
37812: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37813: LD_INT 0
37815: PPUSH
37816: PPUSH
// result := 0 ;
37817: LD_ADDR_VAR 0 3
37821: PUSH
37822: LD_INT 0
37824: ST_TO_ADDR
// if not array or not value in array then
37825: LD_VAR 0 1
37829: NOT
37830: PUSH
37831: LD_VAR 0 2
37835: PUSH
37836: LD_VAR 0 1
37840: IN
37841: NOT
37842: OR
37843: IFFALSE 37847
// exit ;
37845: GO 37901
// for i = 1 to array do
37847: LD_ADDR_VAR 0 4
37851: PUSH
37852: DOUBLE
37853: LD_INT 1
37855: DEC
37856: ST_TO_ADDR
37857: LD_VAR 0 1
37861: PUSH
37862: FOR_TO
37863: IFFALSE 37899
// if value = array [ i ] then
37865: LD_VAR 0 2
37869: PUSH
37870: LD_VAR 0 1
37874: PUSH
37875: LD_VAR 0 4
37879: ARRAY
37880: EQUAL
37881: IFFALSE 37897
// begin result := i ;
37883: LD_ADDR_VAR 0 3
37887: PUSH
37888: LD_VAR 0 4
37892: ST_TO_ADDR
// exit ;
37893: POP
37894: POP
37895: GO 37901
// end ;
37897: GO 37862
37899: POP
37900: POP
// end ;
37901: LD_VAR 0 3
37905: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37906: LD_INT 0
37908: PPUSH
// vc_chassis := chassis ;
37909: LD_ADDR_OWVAR 37
37913: PUSH
37914: LD_VAR 0 1
37918: ST_TO_ADDR
// vc_engine := engine ;
37919: LD_ADDR_OWVAR 39
37923: PUSH
37924: LD_VAR 0 2
37928: ST_TO_ADDR
// vc_control := control ;
37929: LD_ADDR_OWVAR 38
37933: PUSH
37934: LD_VAR 0 3
37938: ST_TO_ADDR
// vc_weapon := weapon ;
37939: LD_ADDR_OWVAR 40
37943: PUSH
37944: LD_VAR 0 4
37948: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37949: LD_ADDR_OWVAR 41
37953: PUSH
37954: LD_VAR 0 5
37958: ST_TO_ADDR
// end ;
37959: LD_VAR 0 6
37963: RET
// export function WantPlant ( unit ) ; var task ; begin
37964: LD_INT 0
37966: PPUSH
37967: PPUSH
// result := false ;
37968: LD_ADDR_VAR 0 2
37972: PUSH
37973: LD_INT 0
37975: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37976: LD_ADDR_VAR 0 3
37980: PUSH
37981: LD_VAR 0 1
37985: PPUSH
37986: CALL_OW 437
37990: ST_TO_ADDR
// if task then
37991: LD_VAR 0 3
37995: IFFALSE 38023
// if task [ 1 ] [ 1 ] = p then
37997: LD_VAR 0 3
38001: PUSH
38002: LD_INT 1
38004: ARRAY
38005: PUSH
38006: LD_INT 1
38008: ARRAY
38009: PUSH
38010: LD_STRING p
38012: EQUAL
38013: IFFALSE 38023
// result := true ;
38015: LD_ADDR_VAR 0 2
38019: PUSH
38020: LD_INT 1
38022: ST_TO_ADDR
// end ;
38023: LD_VAR 0 2
38027: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
38028: LD_INT 0
38030: PPUSH
38031: PPUSH
38032: PPUSH
38033: PPUSH
// if pos < 1 then
38034: LD_VAR 0 2
38038: PUSH
38039: LD_INT 1
38041: LESS
38042: IFFALSE 38046
// exit ;
38044: GO 38349
// if pos = 1 then
38046: LD_VAR 0 2
38050: PUSH
38051: LD_INT 1
38053: EQUAL
38054: IFFALSE 38087
// result := Replace ( arr , pos [ 1 ] , value ) else
38056: LD_ADDR_VAR 0 4
38060: PUSH
38061: LD_VAR 0 1
38065: PPUSH
38066: LD_VAR 0 2
38070: PUSH
38071: LD_INT 1
38073: ARRAY
38074: PPUSH
38075: LD_VAR 0 3
38079: PPUSH
38080: CALL_OW 1
38084: ST_TO_ADDR
38085: GO 38349
// begin tmp := arr ;
38087: LD_ADDR_VAR 0 6
38091: PUSH
38092: LD_VAR 0 1
38096: ST_TO_ADDR
// s_arr := [ tmp ] ;
38097: LD_ADDR_VAR 0 7
38101: PUSH
38102: LD_VAR 0 6
38106: PUSH
38107: EMPTY
38108: LIST
38109: ST_TO_ADDR
// for i = 1 to pos - 1 do
38110: LD_ADDR_VAR 0 5
38114: PUSH
38115: DOUBLE
38116: LD_INT 1
38118: DEC
38119: ST_TO_ADDR
38120: LD_VAR 0 2
38124: PUSH
38125: LD_INT 1
38127: MINUS
38128: PUSH
38129: FOR_TO
38130: IFFALSE 38175
// begin tmp := tmp [ pos [ i ] ] ;
38132: LD_ADDR_VAR 0 6
38136: PUSH
38137: LD_VAR 0 6
38141: PUSH
38142: LD_VAR 0 2
38146: PUSH
38147: LD_VAR 0 5
38151: ARRAY
38152: ARRAY
38153: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
38154: LD_ADDR_VAR 0 7
38158: PUSH
38159: LD_VAR 0 7
38163: PUSH
38164: LD_VAR 0 6
38168: PUSH
38169: EMPTY
38170: LIST
38171: ADD
38172: ST_TO_ADDR
// end ;
38173: GO 38129
38175: POP
38176: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
38177: LD_ADDR_VAR 0 6
38181: PUSH
38182: LD_VAR 0 6
38186: PPUSH
38187: LD_VAR 0 2
38191: PUSH
38192: LD_VAR 0 2
38196: ARRAY
38197: PPUSH
38198: LD_VAR 0 3
38202: PPUSH
38203: CALL_OW 1
38207: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38208: LD_ADDR_VAR 0 7
38212: PUSH
38213: LD_VAR 0 7
38217: PPUSH
38218: LD_VAR 0 7
38222: PPUSH
38223: LD_VAR 0 6
38227: PPUSH
38228: CALL_OW 1
38232: ST_TO_ADDR
// for i = s_arr downto 2 do
38233: LD_ADDR_VAR 0 5
38237: PUSH
38238: DOUBLE
38239: LD_VAR 0 7
38243: INC
38244: ST_TO_ADDR
38245: LD_INT 2
38247: PUSH
38248: FOR_DOWNTO
38249: IFFALSE 38333
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38251: LD_ADDR_VAR 0 6
38255: PUSH
38256: LD_VAR 0 7
38260: PUSH
38261: LD_VAR 0 5
38265: PUSH
38266: LD_INT 1
38268: MINUS
38269: ARRAY
38270: PPUSH
38271: LD_VAR 0 2
38275: PUSH
38276: LD_VAR 0 5
38280: PUSH
38281: LD_INT 1
38283: MINUS
38284: ARRAY
38285: PPUSH
38286: LD_VAR 0 7
38290: PUSH
38291: LD_VAR 0 5
38295: ARRAY
38296: PPUSH
38297: CALL_OW 1
38301: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38302: LD_ADDR_VAR 0 7
38306: PUSH
38307: LD_VAR 0 7
38311: PPUSH
38312: LD_VAR 0 5
38316: PUSH
38317: LD_INT 1
38319: MINUS
38320: PPUSH
38321: LD_VAR 0 6
38325: PPUSH
38326: CALL_OW 1
38330: ST_TO_ADDR
// end ;
38331: GO 38248
38333: POP
38334: POP
// result := s_arr [ 1 ] ;
38335: LD_ADDR_VAR 0 4
38339: PUSH
38340: LD_VAR 0 7
38344: PUSH
38345: LD_INT 1
38347: ARRAY
38348: ST_TO_ADDR
// end ; end ;
38349: LD_VAR 0 4
38353: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38354: LD_INT 0
38356: PPUSH
38357: PPUSH
// if not list then
38358: LD_VAR 0 1
38362: NOT
38363: IFFALSE 38367
// exit ;
38365: GO 38458
// i := list [ pos1 ] ;
38367: LD_ADDR_VAR 0 5
38371: PUSH
38372: LD_VAR 0 1
38376: PUSH
38377: LD_VAR 0 2
38381: ARRAY
38382: ST_TO_ADDR
// if not i then
38383: LD_VAR 0 5
38387: NOT
38388: IFFALSE 38392
// exit ;
38390: GO 38458
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
38392: LD_ADDR_VAR 0 1
38396: PUSH
38397: LD_VAR 0 1
38401: PPUSH
38402: LD_VAR 0 2
38406: PPUSH
38407: LD_VAR 0 1
38411: PUSH
38412: LD_VAR 0 3
38416: ARRAY
38417: PPUSH
38418: CALL_OW 1
38422: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38423: LD_ADDR_VAR 0 1
38427: PUSH
38428: LD_VAR 0 1
38432: PPUSH
38433: LD_VAR 0 3
38437: PPUSH
38438: LD_VAR 0 5
38442: PPUSH
38443: CALL_OW 1
38447: ST_TO_ADDR
// result := list ;
38448: LD_ADDR_VAR 0 4
38452: PUSH
38453: LD_VAR 0 1
38457: ST_TO_ADDR
// end ;
38458: LD_VAR 0 4
38462: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
38463: LD_INT 0
38465: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
38466: LD_ADDR_VAR 0 5
38470: PUSH
38471: LD_VAR 0 1
38475: PPUSH
38476: CALL_OW 250
38480: PPUSH
38481: LD_VAR 0 1
38485: PPUSH
38486: CALL_OW 251
38490: PPUSH
38491: LD_VAR 0 2
38495: PPUSH
38496: LD_VAR 0 3
38500: PPUSH
38501: LD_VAR 0 4
38505: PPUSH
38506: CALL 38516 0 5
38510: ST_TO_ADDR
// end ;
38511: LD_VAR 0 5
38515: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
38516: LD_INT 0
38518: PPUSH
38519: PPUSH
38520: PPUSH
38521: PPUSH
// if not list then
38522: LD_VAR 0 3
38526: NOT
38527: IFFALSE 38531
// exit ;
38529: GO 38919
// result := [ ] ;
38531: LD_ADDR_VAR 0 6
38535: PUSH
38536: EMPTY
38537: ST_TO_ADDR
// for i in list do
38538: LD_ADDR_VAR 0 7
38542: PUSH
38543: LD_VAR 0 3
38547: PUSH
38548: FOR_IN
38549: IFFALSE 38751
// begin tmp := GetDistUnitXY ( i , x , y ) ;
38551: LD_ADDR_VAR 0 9
38555: PUSH
38556: LD_VAR 0 7
38560: PPUSH
38561: LD_VAR 0 1
38565: PPUSH
38566: LD_VAR 0 2
38570: PPUSH
38571: CALL_OW 297
38575: ST_TO_ADDR
// if not result then
38576: LD_VAR 0 6
38580: NOT
38581: IFFALSE 38607
// result := [ [ i , tmp ] ] else
38583: LD_ADDR_VAR 0 6
38587: PUSH
38588: LD_VAR 0 7
38592: PUSH
38593: LD_VAR 0 9
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: PUSH
38602: EMPTY
38603: LIST
38604: ST_TO_ADDR
38605: GO 38749
// begin if result [ result ] [ 2 ] < tmp then
38607: LD_VAR 0 6
38611: PUSH
38612: LD_VAR 0 6
38616: ARRAY
38617: PUSH
38618: LD_INT 2
38620: ARRAY
38621: PUSH
38622: LD_VAR 0 9
38626: LESS
38627: IFFALSE 38669
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
38629: LD_ADDR_VAR 0 6
38633: PUSH
38634: LD_VAR 0 6
38638: PPUSH
38639: LD_VAR 0 6
38643: PUSH
38644: LD_INT 1
38646: PLUS
38647: PPUSH
38648: LD_VAR 0 7
38652: PUSH
38653: LD_VAR 0 9
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: PPUSH
38662: CALL_OW 2
38666: ST_TO_ADDR
38667: GO 38749
// for j = 1 to result do
38669: LD_ADDR_VAR 0 8
38673: PUSH
38674: DOUBLE
38675: LD_INT 1
38677: DEC
38678: ST_TO_ADDR
38679: LD_VAR 0 6
38683: PUSH
38684: FOR_TO
38685: IFFALSE 38747
// begin if tmp < result [ j ] [ 2 ] then
38687: LD_VAR 0 9
38691: PUSH
38692: LD_VAR 0 6
38696: PUSH
38697: LD_VAR 0 8
38701: ARRAY
38702: PUSH
38703: LD_INT 2
38705: ARRAY
38706: LESS
38707: IFFALSE 38745
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38709: LD_ADDR_VAR 0 6
38713: PUSH
38714: LD_VAR 0 6
38718: PPUSH
38719: LD_VAR 0 8
38723: PPUSH
38724: LD_VAR 0 7
38728: PUSH
38729: LD_VAR 0 9
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PPUSH
38738: CALL_OW 2
38742: ST_TO_ADDR
// break ;
38743: GO 38747
// end ; end ;
38745: GO 38684
38747: POP
38748: POP
// end ; end ;
38749: GO 38548
38751: POP
38752: POP
// if result and not asc then
38753: LD_VAR 0 6
38757: PUSH
38758: LD_VAR 0 4
38762: NOT
38763: AND
38764: IFFALSE 38839
// begin tmp := result ;
38766: LD_ADDR_VAR 0 9
38770: PUSH
38771: LD_VAR 0 6
38775: ST_TO_ADDR
// for i = tmp downto 1 do
38776: LD_ADDR_VAR 0 7
38780: PUSH
38781: DOUBLE
38782: LD_VAR 0 9
38786: INC
38787: ST_TO_ADDR
38788: LD_INT 1
38790: PUSH
38791: FOR_DOWNTO
38792: IFFALSE 38837
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38794: LD_ADDR_VAR 0 6
38798: PUSH
38799: LD_VAR 0 6
38803: PPUSH
38804: LD_VAR 0 9
38808: PUSH
38809: LD_VAR 0 7
38813: MINUS
38814: PUSH
38815: LD_INT 1
38817: PLUS
38818: PPUSH
38819: LD_VAR 0 9
38823: PUSH
38824: LD_VAR 0 7
38828: ARRAY
38829: PPUSH
38830: CALL_OW 1
38834: ST_TO_ADDR
38835: GO 38791
38837: POP
38838: POP
// end ; tmp := [ ] ;
38839: LD_ADDR_VAR 0 9
38843: PUSH
38844: EMPTY
38845: ST_TO_ADDR
// if mode then
38846: LD_VAR 0 5
38850: IFFALSE 38919
// begin for i = 1 to result do
38852: LD_ADDR_VAR 0 7
38856: PUSH
38857: DOUBLE
38858: LD_INT 1
38860: DEC
38861: ST_TO_ADDR
38862: LD_VAR 0 6
38866: PUSH
38867: FOR_TO
38868: IFFALSE 38907
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38870: LD_ADDR_VAR 0 9
38874: PUSH
38875: LD_VAR 0 9
38879: PPUSH
38880: LD_VAR 0 7
38884: PPUSH
38885: LD_VAR 0 6
38889: PUSH
38890: LD_VAR 0 7
38894: ARRAY
38895: PUSH
38896: LD_INT 1
38898: ARRAY
38899: PPUSH
38900: CALL_OW 1
38904: ST_TO_ADDR
38905: GO 38867
38907: POP
38908: POP
// result := tmp ;
38909: LD_ADDR_VAR 0 6
38913: PUSH
38914: LD_VAR 0 9
38918: ST_TO_ADDR
// end ; end ;
38919: LD_VAR 0 6
38923: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38924: LD_INT 0
38926: PPUSH
38927: PPUSH
38928: PPUSH
38929: PPUSH
38930: PPUSH
38931: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38932: LD_ADDR_VAR 0 5
38936: PUSH
38937: LD_INT 0
38939: PUSH
38940: LD_INT 0
38942: PUSH
38943: LD_INT 0
38945: PUSH
38946: EMPTY
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: ST_TO_ADDR
// if not x or not y then
38954: LD_VAR 0 2
38958: NOT
38959: PUSH
38960: LD_VAR 0 3
38964: NOT
38965: OR
38966: IFFALSE 38970
// exit ;
38968: GO 40620
// if not range then
38970: LD_VAR 0 4
38974: NOT
38975: IFFALSE 38985
// range := 10 ;
38977: LD_ADDR_VAR 0 4
38981: PUSH
38982: LD_INT 10
38984: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38985: LD_ADDR_VAR 0 8
38989: PUSH
38990: LD_INT 81
38992: PUSH
38993: LD_VAR 0 1
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: LD_INT 92
39004: PUSH
39005: LD_VAR 0 2
39009: PUSH
39010: LD_VAR 0 3
39014: PUSH
39015: LD_VAR 0 4
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: LIST
39024: LIST
39025: PUSH
39026: LD_INT 3
39028: PUSH
39029: LD_INT 21
39031: PUSH
39032: LD_INT 3
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: LIST
39047: PPUSH
39048: CALL_OW 69
39052: ST_TO_ADDR
// if not tmp then
39053: LD_VAR 0 8
39057: NOT
39058: IFFALSE 39062
// exit ;
39060: GO 40620
// for i in tmp do
39062: LD_ADDR_VAR 0 6
39066: PUSH
39067: LD_VAR 0 8
39071: PUSH
39072: FOR_IN
39073: IFFALSE 40595
// begin points := [ 0 , 0 , 0 ] ;
39075: LD_ADDR_VAR 0 9
39079: PUSH
39080: LD_INT 0
39082: PUSH
39083: LD_INT 0
39085: PUSH
39086: LD_INT 0
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: LIST
39093: ST_TO_ADDR
// bpoints := 1 ;
39094: LD_ADDR_VAR 0 10
39098: PUSH
39099: LD_INT 1
39101: ST_TO_ADDR
// case GetType ( i ) of unit_human :
39102: LD_VAR 0 6
39106: PPUSH
39107: CALL_OW 247
39111: PUSH
39112: LD_INT 1
39114: DOUBLE
39115: EQUAL
39116: IFTRUE 39120
39118: GO 39698
39120: POP
// begin if GetClass ( i ) = 1 then
39121: LD_VAR 0 6
39125: PPUSH
39126: CALL_OW 257
39130: PUSH
39131: LD_INT 1
39133: EQUAL
39134: IFFALSE 39155
// points := [ 10 , 5 , 3 ] ;
39136: LD_ADDR_VAR 0 9
39140: PUSH
39141: LD_INT 10
39143: PUSH
39144: LD_INT 5
39146: PUSH
39147: LD_INT 3
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: LIST
39154: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
39155: LD_VAR 0 6
39159: PPUSH
39160: CALL_OW 257
39164: PUSH
39165: LD_INT 2
39167: PUSH
39168: LD_INT 3
39170: PUSH
39171: LD_INT 4
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: LIST
39178: IN
39179: IFFALSE 39200
// points := [ 3 , 2 , 1 ] ;
39181: LD_ADDR_VAR 0 9
39185: PUSH
39186: LD_INT 3
39188: PUSH
39189: LD_INT 2
39191: PUSH
39192: LD_INT 1
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: LIST
39199: ST_TO_ADDR
// if GetClass ( i ) = 5 then
39200: LD_VAR 0 6
39204: PPUSH
39205: CALL_OW 257
39209: PUSH
39210: LD_INT 5
39212: EQUAL
39213: IFFALSE 39234
// points := [ 130 , 5 , 2 ] ;
39215: LD_ADDR_VAR 0 9
39219: PUSH
39220: LD_INT 130
39222: PUSH
39223: LD_INT 5
39225: PUSH
39226: LD_INT 2
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: LIST
39233: ST_TO_ADDR
// if GetClass ( i ) = 8 then
39234: LD_VAR 0 6
39238: PPUSH
39239: CALL_OW 257
39243: PUSH
39244: LD_INT 8
39246: EQUAL
39247: IFFALSE 39268
// points := [ 35 , 35 , 30 ] ;
39249: LD_ADDR_VAR 0 9
39253: PUSH
39254: LD_INT 35
39256: PUSH
39257: LD_INT 35
39259: PUSH
39260: LD_INT 30
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: LIST
39267: ST_TO_ADDR
// if GetClass ( i ) = 9 then
39268: LD_VAR 0 6
39272: PPUSH
39273: CALL_OW 257
39277: PUSH
39278: LD_INT 9
39280: EQUAL
39281: IFFALSE 39302
// points := [ 20 , 55 , 40 ] ;
39283: LD_ADDR_VAR 0 9
39287: PUSH
39288: LD_INT 20
39290: PUSH
39291: LD_INT 55
39293: PUSH
39294: LD_INT 40
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: LIST
39301: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
39302: LD_VAR 0 6
39306: PPUSH
39307: CALL_OW 257
39311: PUSH
39312: LD_INT 12
39314: PUSH
39315: LD_INT 16
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: IN
39322: IFFALSE 39343
// points := [ 5 , 3 , 2 ] ;
39324: LD_ADDR_VAR 0 9
39328: PUSH
39329: LD_INT 5
39331: PUSH
39332: LD_INT 3
39334: PUSH
39335: LD_INT 2
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: LIST
39342: ST_TO_ADDR
// if GetClass ( i ) = 17 then
39343: LD_VAR 0 6
39347: PPUSH
39348: CALL_OW 257
39352: PUSH
39353: LD_INT 17
39355: EQUAL
39356: IFFALSE 39377
// points := [ 100 , 50 , 75 ] ;
39358: LD_ADDR_VAR 0 9
39362: PUSH
39363: LD_INT 100
39365: PUSH
39366: LD_INT 50
39368: PUSH
39369: LD_INT 75
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: LIST
39376: ST_TO_ADDR
// if GetClass ( i ) = 15 then
39377: LD_VAR 0 6
39381: PPUSH
39382: CALL_OW 257
39386: PUSH
39387: LD_INT 15
39389: EQUAL
39390: IFFALSE 39411
// points := [ 10 , 5 , 3 ] ;
39392: LD_ADDR_VAR 0 9
39396: PUSH
39397: LD_INT 10
39399: PUSH
39400: LD_INT 5
39402: PUSH
39403: LD_INT 3
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: LIST
39410: ST_TO_ADDR
// if GetClass ( i ) = 14 then
39411: LD_VAR 0 6
39415: PPUSH
39416: CALL_OW 257
39420: PUSH
39421: LD_INT 14
39423: EQUAL
39424: IFFALSE 39445
// points := [ 10 , 0 , 0 ] ;
39426: LD_ADDR_VAR 0 9
39430: PUSH
39431: LD_INT 10
39433: PUSH
39434: LD_INT 0
39436: PUSH
39437: LD_INT 0
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: LIST
39444: ST_TO_ADDR
// if GetClass ( i ) = 11 then
39445: LD_VAR 0 6
39449: PPUSH
39450: CALL_OW 257
39454: PUSH
39455: LD_INT 11
39457: EQUAL
39458: IFFALSE 39479
// points := [ 30 , 10 , 5 ] ;
39460: LD_ADDR_VAR 0 9
39464: PUSH
39465: LD_INT 30
39467: PUSH
39468: LD_INT 10
39470: PUSH
39471: LD_INT 5
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: LIST
39478: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
39479: LD_VAR 0 1
39483: PPUSH
39484: LD_INT 5
39486: PPUSH
39487: CALL_OW 321
39491: PUSH
39492: LD_INT 2
39494: EQUAL
39495: IFFALSE 39512
// bpoints := bpoints * 1.8 ;
39497: LD_ADDR_VAR 0 10
39501: PUSH
39502: LD_VAR 0 10
39506: PUSH
39507: LD_REAL  1.80000000000000E+0000
39510: MUL
39511: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
39512: LD_VAR 0 6
39516: PPUSH
39517: CALL_OW 257
39521: PUSH
39522: LD_INT 1
39524: PUSH
39525: LD_INT 2
39527: PUSH
39528: LD_INT 3
39530: PUSH
39531: LD_INT 4
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: IN
39540: PUSH
39541: LD_VAR 0 1
39545: PPUSH
39546: LD_INT 51
39548: PPUSH
39549: CALL_OW 321
39553: PUSH
39554: LD_INT 2
39556: EQUAL
39557: AND
39558: IFFALSE 39575
// bpoints := bpoints * 1.2 ;
39560: LD_ADDR_VAR 0 10
39564: PUSH
39565: LD_VAR 0 10
39569: PUSH
39570: LD_REAL  1.20000000000000E+0000
39573: MUL
39574: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
39575: LD_VAR 0 6
39579: PPUSH
39580: CALL_OW 257
39584: PUSH
39585: LD_INT 5
39587: PUSH
39588: LD_INT 7
39590: PUSH
39591: LD_INT 9
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: LIST
39598: IN
39599: PUSH
39600: LD_VAR 0 1
39604: PPUSH
39605: LD_INT 52
39607: PPUSH
39608: CALL_OW 321
39612: PUSH
39613: LD_INT 2
39615: EQUAL
39616: AND
39617: IFFALSE 39634
// bpoints := bpoints * 1.5 ;
39619: LD_ADDR_VAR 0 10
39623: PUSH
39624: LD_VAR 0 10
39628: PUSH
39629: LD_REAL  1.50000000000000E+0000
39632: MUL
39633: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
39634: LD_VAR 0 1
39638: PPUSH
39639: LD_INT 66
39641: PPUSH
39642: CALL_OW 321
39646: PUSH
39647: LD_INT 2
39649: EQUAL
39650: IFFALSE 39667
// bpoints := bpoints * 1.1 ;
39652: LD_ADDR_VAR 0 10
39656: PUSH
39657: LD_VAR 0 10
39661: PUSH
39662: LD_REAL  1.10000000000000E+0000
39665: MUL
39666: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
39667: LD_ADDR_VAR 0 10
39671: PUSH
39672: LD_VAR 0 10
39676: PUSH
39677: LD_VAR 0 6
39681: PPUSH
39682: LD_INT 1
39684: PPUSH
39685: CALL_OW 259
39689: PUSH
39690: LD_REAL  1.15000000000000E+0000
39693: MUL
39694: MUL
39695: ST_TO_ADDR
// end ; unit_vehicle :
39696: GO 40524
39698: LD_INT 2
39700: DOUBLE
39701: EQUAL
39702: IFTRUE 39706
39704: GO 40512
39706: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
39707: LD_VAR 0 6
39711: PPUSH
39712: CALL_OW 264
39716: PUSH
39717: LD_INT 2
39719: PUSH
39720: LD_INT 42
39722: PUSH
39723: LD_INT 24
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: LIST
39730: IN
39731: IFFALSE 39752
// points := [ 25 , 5 , 3 ] ;
39733: LD_ADDR_VAR 0 9
39737: PUSH
39738: LD_INT 25
39740: PUSH
39741: LD_INT 5
39743: PUSH
39744: LD_INT 3
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: LIST
39751: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
39752: LD_VAR 0 6
39756: PPUSH
39757: CALL_OW 264
39761: PUSH
39762: LD_INT 4
39764: PUSH
39765: LD_INT 43
39767: PUSH
39768: LD_INT 25
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: LIST
39775: IN
39776: IFFALSE 39797
// points := [ 40 , 15 , 5 ] ;
39778: LD_ADDR_VAR 0 9
39782: PUSH
39783: LD_INT 40
39785: PUSH
39786: LD_INT 15
39788: PUSH
39789: LD_INT 5
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: LIST
39796: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39797: LD_VAR 0 6
39801: PPUSH
39802: CALL_OW 264
39806: PUSH
39807: LD_INT 3
39809: PUSH
39810: LD_INT 23
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: IN
39817: IFFALSE 39838
// points := [ 7 , 25 , 8 ] ;
39819: LD_ADDR_VAR 0 9
39823: PUSH
39824: LD_INT 7
39826: PUSH
39827: LD_INT 25
39829: PUSH
39830: LD_INT 8
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: LIST
39837: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39838: LD_VAR 0 6
39842: PPUSH
39843: CALL_OW 264
39847: PUSH
39848: LD_INT 5
39850: PUSH
39851: LD_INT 27
39853: PUSH
39854: LD_INT 44
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: LIST
39861: IN
39862: IFFALSE 39883
// points := [ 14 , 50 , 16 ] ;
39864: LD_ADDR_VAR 0 9
39868: PUSH
39869: LD_INT 14
39871: PUSH
39872: LD_INT 50
39874: PUSH
39875: LD_INT 16
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: LIST
39882: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39883: LD_VAR 0 6
39887: PPUSH
39888: CALL_OW 264
39892: PUSH
39893: LD_INT 6
39895: PUSH
39896: LD_INT 46
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: IN
39903: IFFALSE 39924
// points := [ 32 , 120 , 70 ] ;
39905: LD_ADDR_VAR 0 9
39909: PUSH
39910: LD_INT 32
39912: PUSH
39913: LD_INT 120
39915: PUSH
39916: LD_INT 70
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: LIST
39923: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
39924: LD_VAR 0 6
39928: PPUSH
39929: CALL_OW 264
39933: PUSH
39934: LD_INT 7
39936: PUSH
39937: LD_INT 28
39939: PUSH
39940: LD_INT 45
39942: PUSH
39943: LD_INT 92
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: LIST
39950: LIST
39951: IN
39952: IFFALSE 39973
// points := [ 35 , 20 , 45 ] ;
39954: LD_ADDR_VAR 0 9
39958: PUSH
39959: LD_INT 35
39961: PUSH
39962: LD_INT 20
39964: PUSH
39965: LD_INT 45
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: LIST
39972: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39973: LD_VAR 0 6
39977: PPUSH
39978: CALL_OW 264
39982: PUSH
39983: LD_INT 47
39985: PUSH
39986: EMPTY
39987: LIST
39988: IN
39989: IFFALSE 40010
// points := [ 67 , 45 , 75 ] ;
39991: LD_ADDR_VAR 0 9
39995: PUSH
39996: LD_INT 67
39998: PUSH
39999: LD_INT 45
40001: PUSH
40002: LD_INT 75
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: LIST
40009: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
40010: LD_VAR 0 6
40014: PPUSH
40015: CALL_OW 264
40019: PUSH
40020: LD_INT 26
40022: PUSH
40023: EMPTY
40024: LIST
40025: IN
40026: IFFALSE 40047
// points := [ 120 , 30 , 80 ] ;
40028: LD_ADDR_VAR 0 9
40032: PUSH
40033: LD_INT 120
40035: PUSH
40036: LD_INT 30
40038: PUSH
40039: LD_INT 80
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: LIST
40046: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
40047: LD_VAR 0 6
40051: PPUSH
40052: CALL_OW 264
40056: PUSH
40057: LD_INT 22
40059: PUSH
40060: EMPTY
40061: LIST
40062: IN
40063: IFFALSE 40084
// points := [ 40 , 1 , 1 ] ;
40065: LD_ADDR_VAR 0 9
40069: PUSH
40070: LD_INT 40
40072: PUSH
40073: LD_INT 1
40075: PUSH
40076: LD_INT 1
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: LIST
40083: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
40084: LD_VAR 0 6
40088: PPUSH
40089: CALL_OW 264
40093: PUSH
40094: LD_INT 29
40096: PUSH
40097: EMPTY
40098: LIST
40099: IN
40100: IFFALSE 40121
// points := [ 70 , 200 , 400 ] ;
40102: LD_ADDR_VAR 0 9
40106: PUSH
40107: LD_INT 70
40109: PUSH
40110: LD_INT 200
40112: PUSH
40113: LD_INT 400
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: LIST
40120: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
40121: LD_VAR 0 6
40125: PPUSH
40126: CALL_OW 264
40130: PUSH
40131: LD_INT 14
40133: PUSH
40134: LD_INT 53
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: IN
40141: IFFALSE 40162
// points := [ 40 , 10 , 20 ] ;
40143: LD_ADDR_VAR 0 9
40147: PUSH
40148: LD_INT 40
40150: PUSH
40151: LD_INT 10
40153: PUSH
40154: LD_INT 20
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: LIST
40161: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
40162: LD_VAR 0 6
40166: PPUSH
40167: CALL_OW 264
40171: PUSH
40172: LD_INT 9
40174: PUSH
40175: EMPTY
40176: LIST
40177: IN
40178: IFFALSE 40199
// points := [ 5 , 70 , 20 ] ;
40180: LD_ADDR_VAR 0 9
40184: PUSH
40185: LD_INT 5
40187: PUSH
40188: LD_INT 70
40190: PUSH
40191: LD_INT 20
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: LIST
40198: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
40199: LD_VAR 0 6
40203: PPUSH
40204: CALL_OW 264
40208: PUSH
40209: LD_INT 10
40211: PUSH
40212: EMPTY
40213: LIST
40214: IN
40215: IFFALSE 40236
// points := [ 35 , 110 , 70 ] ;
40217: LD_ADDR_VAR 0 9
40221: PUSH
40222: LD_INT 35
40224: PUSH
40225: LD_INT 110
40227: PUSH
40228: LD_INT 70
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: LIST
40235: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
40236: LD_VAR 0 6
40240: PPUSH
40241: CALL_OW 265
40245: PUSH
40246: LD_INT 25
40248: EQUAL
40249: IFFALSE 40270
// points := [ 80 , 65 , 100 ] ;
40251: LD_ADDR_VAR 0 9
40255: PUSH
40256: LD_INT 80
40258: PUSH
40259: LD_INT 65
40261: PUSH
40262: LD_INT 100
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: LIST
40269: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
40270: LD_VAR 0 6
40274: PPUSH
40275: CALL_OW 263
40279: PUSH
40280: LD_INT 1
40282: EQUAL
40283: IFFALSE 40318
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
40285: LD_ADDR_VAR 0 10
40289: PUSH
40290: LD_VAR 0 10
40294: PUSH
40295: LD_VAR 0 6
40299: PPUSH
40300: CALL_OW 311
40304: PPUSH
40305: LD_INT 3
40307: PPUSH
40308: CALL_OW 259
40312: PUSH
40313: LD_INT 4
40315: MUL
40316: MUL
40317: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
40318: LD_VAR 0 6
40322: PPUSH
40323: CALL_OW 263
40327: PUSH
40328: LD_INT 2
40330: EQUAL
40331: IFFALSE 40382
// begin j := IsControledBy ( i ) ;
40333: LD_ADDR_VAR 0 7
40337: PUSH
40338: LD_VAR 0 6
40342: PPUSH
40343: CALL_OW 312
40347: ST_TO_ADDR
// if j then
40348: LD_VAR 0 7
40352: IFFALSE 40382
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
40354: LD_ADDR_VAR 0 10
40358: PUSH
40359: LD_VAR 0 10
40363: PUSH
40364: LD_VAR 0 7
40368: PPUSH
40369: LD_INT 3
40371: PPUSH
40372: CALL_OW 259
40376: PUSH
40377: LD_INT 3
40379: MUL
40380: MUL
40381: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
40382: LD_VAR 0 6
40386: PPUSH
40387: CALL_OW 264
40391: PUSH
40392: LD_INT 5
40394: PUSH
40395: LD_INT 6
40397: PUSH
40398: LD_INT 46
40400: PUSH
40401: LD_INT 44
40403: PUSH
40404: LD_INT 47
40406: PUSH
40407: LD_INT 45
40409: PUSH
40410: LD_INT 28
40412: PUSH
40413: LD_INT 7
40415: PUSH
40416: LD_INT 27
40418: PUSH
40419: LD_INT 29
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: IN
40434: PUSH
40435: LD_VAR 0 1
40439: PPUSH
40440: LD_INT 52
40442: PPUSH
40443: CALL_OW 321
40447: PUSH
40448: LD_INT 2
40450: EQUAL
40451: AND
40452: IFFALSE 40469
// bpoints := bpoints * 1.2 ;
40454: LD_ADDR_VAR 0 10
40458: PUSH
40459: LD_VAR 0 10
40463: PUSH
40464: LD_REAL  1.20000000000000E+0000
40467: MUL
40468: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
40469: LD_VAR 0 6
40473: PPUSH
40474: CALL_OW 264
40478: PUSH
40479: LD_INT 6
40481: PUSH
40482: LD_INT 46
40484: PUSH
40485: LD_INT 47
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: LIST
40492: IN
40493: IFFALSE 40510
// bpoints := bpoints * 1.2 ;
40495: LD_ADDR_VAR 0 10
40499: PUSH
40500: LD_VAR 0 10
40504: PUSH
40505: LD_REAL  1.20000000000000E+0000
40508: MUL
40509: ST_TO_ADDR
// end ; unit_building :
40510: GO 40524
40512: LD_INT 3
40514: DOUBLE
40515: EQUAL
40516: IFTRUE 40520
40518: GO 40523
40520: POP
// ; end ;
40521: GO 40524
40523: POP
// for j = 1 to 3 do
40524: LD_ADDR_VAR 0 7
40528: PUSH
40529: DOUBLE
40530: LD_INT 1
40532: DEC
40533: ST_TO_ADDR
40534: LD_INT 3
40536: PUSH
40537: FOR_TO
40538: IFFALSE 40591
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
40540: LD_ADDR_VAR 0 5
40544: PUSH
40545: LD_VAR 0 5
40549: PPUSH
40550: LD_VAR 0 7
40554: PPUSH
40555: LD_VAR 0 5
40559: PUSH
40560: LD_VAR 0 7
40564: ARRAY
40565: PUSH
40566: LD_VAR 0 9
40570: PUSH
40571: LD_VAR 0 7
40575: ARRAY
40576: PUSH
40577: LD_VAR 0 10
40581: MUL
40582: PLUS
40583: PPUSH
40584: CALL_OW 1
40588: ST_TO_ADDR
40589: GO 40537
40591: POP
40592: POP
// end ;
40593: GO 39072
40595: POP
40596: POP
// result := Replace ( result , 4 , tmp ) ;
40597: LD_ADDR_VAR 0 5
40601: PUSH
40602: LD_VAR 0 5
40606: PPUSH
40607: LD_INT 4
40609: PPUSH
40610: LD_VAR 0 8
40614: PPUSH
40615: CALL_OW 1
40619: ST_TO_ADDR
// end ;
40620: LD_VAR 0 5
40624: RET
// export function DangerAtRange ( unit , range ) ; begin
40625: LD_INT 0
40627: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
40628: LD_ADDR_VAR 0 3
40632: PUSH
40633: LD_VAR 0 1
40637: PPUSH
40638: CALL_OW 255
40642: PPUSH
40643: LD_VAR 0 1
40647: PPUSH
40648: CALL_OW 250
40652: PPUSH
40653: LD_VAR 0 1
40657: PPUSH
40658: CALL_OW 251
40662: PPUSH
40663: LD_VAR 0 2
40667: PPUSH
40668: CALL 38924 0 4
40672: ST_TO_ADDR
// end ;
40673: LD_VAR 0 3
40677: RET
// export function DangerInArea ( side , area ) ; begin
40678: LD_INT 0
40680: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
40681: LD_ADDR_VAR 0 3
40685: PUSH
40686: LD_VAR 0 2
40690: PPUSH
40691: LD_INT 81
40693: PUSH
40694: LD_VAR 0 1
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PPUSH
40703: CALL_OW 70
40707: ST_TO_ADDR
// end ;
40708: LD_VAR 0 3
40712: RET
// export function IsExtension ( b ) ; begin
40713: LD_INT 0
40715: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
40716: LD_ADDR_VAR 0 2
40720: PUSH
40721: LD_VAR 0 1
40725: PUSH
40726: LD_INT 23
40728: PUSH
40729: LD_INT 20
40731: PUSH
40732: LD_INT 22
40734: PUSH
40735: LD_INT 17
40737: PUSH
40738: LD_INT 24
40740: PUSH
40741: LD_INT 21
40743: PUSH
40744: LD_INT 19
40746: PUSH
40747: LD_INT 16
40749: PUSH
40750: LD_INT 25
40752: PUSH
40753: LD_INT 18
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: IN
40768: ST_TO_ADDR
// end ;
40769: LD_VAR 0 2
40773: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
40774: LD_INT 0
40776: PPUSH
40777: PPUSH
40778: PPUSH
// result := [ ] ;
40779: LD_ADDR_VAR 0 4
40783: PUSH
40784: EMPTY
40785: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40786: LD_ADDR_VAR 0 5
40790: PUSH
40791: LD_VAR 0 2
40795: PPUSH
40796: LD_INT 21
40798: PUSH
40799: LD_INT 3
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PPUSH
40806: CALL_OW 70
40810: ST_TO_ADDR
// if not tmp then
40811: LD_VAR 0 5
40815: NOT
40816: IFFALSE 40820
// exit ;
40818: GO 40884
// if checkLink then
40820: LD_VAR 0 3
40824: IFFALSE 40874
// begin for i in tmp do
40826: LD_ADDR_VAR 0 6
40830: PUSH
40831: LD_VAR 0 5
40835: PUSH
40836: FOR_IN
40837: IFFALSE 40872
// if GetBase ( i ) <> base then
40839: LD_VAR 0 6
40843: PPUSH
40844: CALL_OW 274
40848: PUSH
40849: LD_VAR 0 1
40853: NONEQUAL
40854: IFFALSE 40870
// ComLinkToBase ( base , i ) ;
40856: LD_VAR 0 1
40860: PPUSH
40861: LD_VAR 0 6
40865: PPUSH
40866: CALL_OW 169
40870: GO 40836
40872: POP
40873: POP
// end ; result := tmp ;
40874: LD_ADDR_VAR 0 4
40878: PUSH
40879: LD_VAR 0 5
40883: ST_TO_ADDR
// end ;
40884: LD_VAR 0 4
40888: RET
// export function ComComplete ( units , b ) ; var i ; begin
40889: LD_INT 0
40891: PPUSH
40892: PPUSH
// if not units then
40893: LD_VAR 0 1
40897: NOT
40898: IFFALSE 40902
// exit ;
40900: GO 40992
// for i in units do
40902: LD_ADDR_VAR 0 4
40906: PUSH
40907: LD_VAR 0 1
40911: PUSH
40912: FOR_IN
40913: IFFALSE 40990
// if BuildingStatus ( b ) = bs_build then
40915: LD_VAR 0 2
40919: PPUSH
40920: CALL_OW 461
40924: PUSH
40925: LD_INT 1
40927: EQUAL
40928: IFFALSE 40988
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40930: LD_VAR 0 4
40934: PPUSH
40935: LD_STRING h
40937: PUSH
40938: LD_VAR 0 2
40942: PPUSH
40943: CALL_OW 250
40947: PUSH
40948: LD_VAR 0 2
40952: PPUSH
40953: CALL_OW 251
40957: PUSH
40958: LD_VAR 0 2
40962: PUSH
40963: LD_INT 0
40965: PUSH
40966: LD_INT 0
40968: PUSH
40969: LD_INT 0
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: PUSH
40981: EMPTY
40982: LIST
40983: PPUSH
40984: CALL_OW 446
40988: GO 40912
40990: POP
40991: POP
// end ;
40992: LD_VAR 0 3
40996: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40997: LD_INT 0
40999: PPUSH
41000: PPUSH
41001: PPUSH
41002: PPUSH
41003: PPUSH
41004: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
41005: LD_VAR 0 1
41009: NOT
41010: PUSH
41011: LD_VAR 0 1
41015: PPUSH
41016: CALL_OW 263
41020: PUSH
41021: LD_INT 2
41023: NONEQUAL
41024: OR
41025: IFFALSE 41029
// exit ;
41027: GO 41345
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
41029: LD_ADDR_VAR 0 6
41033: PUSH
41034: LD_INT 22
41036: PUSH
41037: LD_VAR 0 1
41041: PPUSH
41042: CALL_OW 255
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 2
41053: PUSH
41054: LD_INT 30
41056: PUSH
41057: LD_INT 36
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 34
41066: PUSH
41067: LD_INT 31
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: LIST
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PPUSH
41083: CALL_OW 69
41087: ST_TO_ADDR
// if not tmp then
41088: LD_VAR 0 6
41092: NOT
41093: IFFALSE 41097
// exit ;
41095: GO 41345
// result := [ ] ;
41097: LD_ADDR_VAR 0 2
41101: PUSH
41102: EMPTY
41103: ST_TO_ADDR
// for i in tmp do
41104: LD_ADDR_VAR 0 3
41108: PUSH
41109: LD_VAR 0 6
41113: PUSH
41114: FOR_IN
41115: IFFALSE 41186
// begin t := UnitsInside ( i ) ;
41117: LD_ADDR_VAR 0 4
41121: PUSH
41122: LD_VAR 0 3
41126: PPUSH
41127: CALL_OW 313
41131: ST_TO_ADDR
// if t then
41132: LD_VAR 0 4
41136: IFFALSE 41184
// for j in t do
41138: LD_ADDR_VAR 0 7
41142: PUSH
41143: LD_VAR 0 4
41147: PUSH
41148: FOR_IN
41149: IFFALSE 41182
// result := Replace ( result , result + 1 , j ) ;
41151: LD_ADDR_VAR 0 2
41155: PUSH
41156: LD_VAR 0 2
41160: PPUSH
41161: LD_VAR 0 2
41165: PUSH
41166: LD_INT 1
41168: PLUS
41169: PPUSH
41170: LD_VAR 0 7
41174: PPUSH
41175: CALL_OW 1
41179: ST_TO_ADDR
41180: GO 41148
41182: POP
41183: POP
// end ;
41184: GO 41114
41186: POP
41187: POP
// if not result then
41188: LD_VAR 0 2
41192: NOT
41193: IFFALSE 41197
// exit ;
41195: GO 41345
// mech := result [ 1 ] ;
41197: LD_ADDR_VAR 0 5
41201: PUSH
41202: LD_VAR 0 2
41206: PUSH
41207: LD_INT 1
41209: ARRAY
41210: ST_TO_ADDR
// if result > 1 then
41211: LD_VAR 0 2
41215: PUSH
41216: LD_INT 1
41218: GREATER
41219: IFFALSE 41331
// begin for i = 2 to result do
41221: LD_ADDR_VAR 0 3
41225: PUSH
41226: DOUBLE
41227: LD_INT 2
41229: DEC
41230: ST_TO_ADDR
41231: LD_VAR 0 2
41235: PUSH
41236: FOR_TO
41237: IFFALSE 41329
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
41239: LD_ADDR_VAR 0 4
41243: PUSH
41244: LD_VAR 0 2
41248: PUSH
41249: LD_VAR 0 3
41253: ARRAY
41254: PPUSH
41255: LD_INT 3
41257: PPUSH
41258: CALL_OW 259
41262: PUSH
41263: LD_VAR 0 2
41267: PUSH
41268: LD_VAR 0 3
41272: ARRAY
41273: PPUSH
41274: CALL_OW 432
41278: MINUS
41279: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
41280: LD_VAR 0 4
41284: PUSH
41285: LD_VAR 0 5
41289: PPUSH
41290: LD_INT 3
41292: PPUSH
41293: CALL_OW 259
41297: PUSH
41298: LD_VAR 0 5
41302: PPUSH
41303: CALL_OW 432
41307: MINUS
41308: GREATEREQUAL
41309: IFFALSE 41327
// mech := result [ i ] ;
41311: LD_ADDR_VAR 0 5
41315: PUSH
41316: LD_VAR 0 2
41320: PUSH
41321: LD_VAR 0 3
41325: ARRAY
41326: ST_TO_ADDR
// end ;
41327: GO 41236
41329: POP
41330: POP
// end ; ComLinkTo ( vehicle , mech ) ;
41331: LD_VAR 0 1
41335: PPUSH
41336: LD_VAR 0 5
41340: PPUSH
41341: CALL_OW 135
// end ;
41345: LD_VAR 0 2
41349: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
41350: LD_INT 0
41352: PPUSH
41353: PPUSH
41354: PPUSH
41355: PPUSH
41356: PPUSH
41357: PPUSH
41358: PPUSH
41359: PPUSH
41360: PPUSH
41361: PPUSH
41362: PPUSH
41363: PPUSH
41364: PPUSH
// result := [ ] ;
41365: LD_ADDR_VAR 0 7
41369: PUSH
41370: EMPTY
41371: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
41372: LD_VAR 0 1
41376: PPUSH
41377: CALL_OW 266
41381: PUSH
41382: LD_INT 0
41384: PUSH
41385: LD_INT 1
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: IN
41392: NOT
41393: IFFALSE 41397
// exit ;
41395: GO 43031
// if name then
41397: LD_VAR 0 3
41401: IFFALSE 41417
// SetBName ( base_dep , name ) ;
41403: LD_VAR 0 1
41407: PPUSH
41408: LD_VAR 0 3
41412: PPUSH
41413: CALL_OW 500
// base := GetBase ( base_dep ) ;
41417: LD_ADDR_VAR 0 15
41421: PUSH
41422: LD_VAR 0 1
41426: PPUSH
41427: CALL_OW 274
41431: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
41432: LD_ADDR_VAR 0 16
41436: PUSH
41437: LD_VAR 0 1
41441: PPUSH
41442: CALL_OW 255
41446: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
41447: LD_ADDR_VAR 0 17
41451: PUSH
41452: LD_VAR 0 1
41456: PPUSH
41457: CALL_OW 248
41461: ST_TO_ADDR
// if sources then
41462: LD_VAR 0 5
41466: IFFALSE 41513
// for i = 1 to 3 do
41468: LD_ADDR_VAR 0 8
41472: PUSH
41473: DOUBLE
41474: LD_INT 1
41476: DEC
41477: ST_TO_ADDR
41478: LD_INT 3
41480: PUSH
41481: FOR_TO
41482: IFFALSE 41511
// AddResourceType ( base , i , sources [ i ] ) ;
41484: LD_VAR 0 15
41488: PPUSH
41489: LD_VAR 0 8
41493: PPUSH
41494: LD_VAR 0 5
41498: PUSH
41499: LD_VAR 0 8
41503: ARRAY
41504: PPUSH
41505: CALL_OW 276
41509: GO 41481
41511: POP
41512: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
41513: LD_ADDR_VAR 0 18
41517: PUSH
41518: LD_VAR 0 15
41522: PPUSH
41523: LD_VAR 0 2
41527: PPUSH
41528: LD_INT 1
41530: PPUSH
41531: CALL 40774 0 3
41535: ST_TO_ADDR
// InitHc ;
41536: CALL_OW 19
// InitUc ;
41540: CALL_OW 18
// uc_side := side ;
41544: LD_ADDR_OWVAR 20
41548: PUSH
41549: LD_VAR 0 16
41553: ST_TO_ADDR
// uc_nation := nation ;
41554: LD_ADDR_OWVAR 21
41558: PUSH
41559: LD_VAR 0 17
41563: ST_TO_ADDR
// if buildings then
41564: LD_VAR 0 18
41568: IFFALSE 42890
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
41570: LD_ADDR_VAR 0 19
41574: PUSH
41575: LD_VAR 0 18
41579: PPUSH
41580: LD_INT 2
41582: PUSH
41583: LD_INT 30
41585: PUSH
41586: LD_INT 29
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: LD_INT 30
41595: PUSH
41596: LD_INT 30
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: LIST
41607: PPUSH
41608: CALL_OW 72
41612: ST_TO_ADDR
// if tmp then
41613: LD_VAR 0 19
41617: IFFALSE 41665
// for i in tmp do
41619: LD_ADDR_VAR 0 8
41623: PUSH
41624: LD_VAR 0 19
41628: PUSH
41629: FOR_IN
41630: IFFALSE 41663
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
41632: LD_VAR 0 8
41636: PPUSH
41637: CALL_OW 250
41641: PPUSH
41642: LD_VAR 0 8
41646: PPUSH
41647: CALL_OW 251
41651: PPUSH
41652: LD_VAR 0 16
41656: PPUSH
41657: CALL_OW 441
41661: GO 41629
41663: POP
41664: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
41665: LD_VAR 0 18
41669: PPUSH
41670: LD_INT 2
41672: PUSH
41673: LD_INT 30
41675: PUSH
41676: LD_INT 32
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 30
41685: PUSH
41686: LD_INT 33
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: LIST
41697: PPUSH
41698: CALL_OW 72
41702: IFFALSE 41790
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
41704: LD_ADDR_VAR 0 8
41708: PUSH
41709: LD_VAR 0 18
41713: PPUSH
41714: LD_INT 2
41716: PUSH
41717: LD_INT 30
41719: PUSH
41720: LD_INT 32
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 30
41729: PUSH
41730: LD_INT 33
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: LIST
41741: PPUSH
41742: CALL_OW 72
41746: PUSH
41747: FOR_IN
41748: IFFALSE 41788
// begin if not GetBWeapon ( i ) then
41750: LD_VAR 0 8
41754: PPUSH
41755: CALL_OW 269
41759: NOT
41760: IFFALSE 41786
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
41762: LD_VAR 0 8
41766: PPUSH
41767: LD_VAR 0 8
41771: PPUSH
41772: LD_VAR 0 2
41776: PPUSH
41777: CALL 43036 0 2
41781: PPUSH
41782: CALL_OW 431
// end ;
41786: GO 41747
41788: POP
41789: POP
// end ; for i = 1 to personel do
41790: LD_ADDR_VAR 0 8
41794: PUSH
41795: DOUBLE
41796: LD_INT 1
41798: DEC
41799: ST_TO_ADDR
41800: LD_VAR 0 6
41804: PUSH
41805: FOR_TO
41806: IFFALSE 42870
// begin if i > 4 then
41808: LD_VAR 0 8
41812: PUSH
41813: LD_INT 4
41815: GREATER
41816: IFFALSE 41820
// break ;
41818: GO 42870
// case i of 1 :
41820: LD_VAR 0 8
41824: PUSH
41825: LD_INT 1
41827: DOUBLE
41828: EQUAL
41829: IFTRUE 41833
41831: GO 41913
41833: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41834: LD_ADDR_VAR 0 12
41838: PUSH
41839: LD_VAR 0 18
41843: PPUSH
41844: LD_INT 22
41846: PUSH
41847: LD_VAR 0 16
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 58
41858: PUSH
41859: EMPTY
41860: LIST
41861: PUSH
41862: LD_INT 2
41864: PUSH
41865: LD_INT 30
41867: PUSH
41868: LD_INT 32
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 30
41877: PUSH
41878: LD_INT 4
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 30
41887: PUSH
41888: LD_INT 5
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: LIST
41905: PPUSH
41906: CALL_OW 72
41910: ST_TO_ADDR
41911: GO 42135
41913: LD_INT 2
41915: DOUBLE
41916: EQUAL
41917: IFTRUE 41921
41919: GO 41983
41921: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41922: LD_ADDR_VAR 0 12
41926: PUSH
41927: LD_VAR 0 18
41931: PPUSH
41932: LD_INT 22
41934: PUSH
41935: LD_VAR 0 16
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 2
41946: PUSH
41947: LD_INT 30
41949: PUSH
41950: LD_INT 0
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: PUSH
41957: LD_INT 30
41959: PUSH
41960: LD_INT 1
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: LIST
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PPUSH
41976: CALL_OW 72
41980: ST_TO_ADDR
41981: GO 42135
41983: LD_INT 3
41985: DOUBLE
41986: EQUAL
41987: IFTRUE 41991
41989: GO 42053
41991: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41992: LD_ADDR_VAR 0 12
41996: PUSH
41997: LD_VAR 0 18
42001: PPUSH
42002: LD_INT 22
42004: PUSH
42005: LD_VAR 0 16
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 2
42016: PUSH
42017: LD_INT 30
42019: PUSH
42020: LD_INT 2
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 30
42029: PUSH
42030: LD_INT 3
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: LIST
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PPUSH
42046: CALL_OW 72
42050: ST_TO_ADDR
42051: GO 42135
42053: LD_INT 4
42055: DOUBLE
42056: EQUAL
42057: IFTRUE 42061
42059: GO 42134
42061: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
42062: LD_ADDR_VAR 0 12
42066: PUSH
42067: LD_VAR 0 18
42071: PPUSH
42072: LD_INT 22
42074: PUSH
42075: LD_VAR 0 16
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 2
42086: PUSH
42087: LD_INT 30
42089: PUSH
42090: LD_INT 6
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_INT 30
42099: PUSH
42100: LD_INT 7
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 30
42109: PUSH
42110: LD_INT 8
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PPUSH
42127: CALL_OW 72
42131: ST_TO_ADDR
42132: GO 42135
42134: POP
// if i = 1 then
42135: LD_VAR 0 8
42139: PUSH
42140: LD_INT 1
42142: EQUAL
42143: IFFALSE 42254
// begin tmp := [ ] ;
42145: LD_ADDR_VAR 0 19
42149: PUSH
42150: EMPTY
42151: ST_TO_ADDR
// for j in f do
42152: LD_ADDR_VAR 0 9
42156: PUSH
42157: LD_VAR 0 12
42161: PUSH
42162: FOR_IN
42163: IFFALSE 42236
// if GetBType ( j ) = b_bunker then
42165: LD_VAR 0 9
42169: PPUSH
42170: CALL_OW 266
42174: PUSH
42175: LD_INT 32
42177: EQUAL
42178: IFFALSE 42205
// tmp := Insert ( tmp , 1 , j ) else
42180: LD_ADDR_VAR 0 19
42184: PUSH
42185: LD_VAR 0 19
42189: PPUSH
42190: LD_INT 1
42192: PPUSH
42193: LD_VAR 0 9
42197: PPUSH
42198: CALL_OW 2
42202: ST_TO_ADDR
42203: GO 42234
// tmp := Insert ( tmp , tmp + 1 , j ) ;
42205: LD_ADDR_VAR 0 19
42209: PUSH
42210: LD_VAR 0 19
42214: PPUSH
42215: LD_VAR 0 19
42219: PUSH
42220: LD_INT 1
42222: PLUS
42223: PPUSH
42224: LD_VAR 0 9
42228: PPUSH
42229: CALL_OW 2
42233: ST_TO_ADDR
42234: GO 42162
42236: POP
42237: POP
// if tmp then
42238: LD_VAR 0 19
42242: IFFALSE 42254
// f := tmp ;
42244: LD_ADDR_VAR 0 12
42248: PUSH
42249: LD_VAR 0 19
42253: ST_TO_ADDR
// end ; x := personel [ i ] ;
42254: LD_ADDR_VAR 0 13
42258: PUSH
42259: LD_VAR 0 6
42263: PUSH
42264: LD_VAR 0 8
42268: ARRAY
42269: ST_TO_ADDR
// if x = - 1 then
42270: LD_VAR 0 13
42274: PUSH
42275: LD_INT 1
42277: NEG
42278: EQUAL
42279: IFFALSE 42488
// begin for j in f do
42281: LD_ADDR_VAR 0 9
42285: PUSH
42286: LD_VAR 0 12
42290: PUSH
42291: FOR_IN
42292: IFFALSE 42484
// repeat InitHc ;
42294: CALL_OW 19
// if GetBType ( j ) = b_barracks then
42298: LD_VAR 0 9
42302: PPUSH
42303: CALL_OW 266
42307: PUSH
42308: LD_INT 5
42310: EQUAL
42311: IFFALSE 42381
// begin if UnitsInside ( j ) < 3 then
42313: LD_VAR 0 9
42317: PPUSH
42318: CALL_OW 313
42322: PUSH
42323: LD_INT 3
42325: LESS
42326: IFFALSE 42362
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42328: LD_INT 0
42330: PPUSH
42331: LD_INT 5
42333: PUSH
42334: LD_INT 8
42336: PUSH
42337: LD_INT 9
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: LIST
42344: PUSH
42345: LD_VAR 0 17
42349: ARRAY
42350: PPUSH
42351: LD_VAR 0 4
42355: PPUSH
42356: CALL_OW 380
42360: GO 42379
// PrepareHuman ( false , i , skill ) ;
42362: LD_INT 0
42364: PPUSH
42365: LD_VAR 0 8
42369: PPUSH
42370: LD_VAR 0 4
42374: PPUSH
42375: CALL_OW 380
// end else
42379: GO 42398
// PrepareHuman ( false , i , skill ) ;
42381: LD_INT 0
42383: PPUSH
42384: LD_VAR 0 8
42388: PPUSH
42389: LD_VAR 0 4
42393: PPUSH
42394: CALL_OW 380
// un := CreateHuman ;
42398: LD_ADDR_VAR 0 14
42402: PUSH
42403: CALL_OW 44
42407: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42408: LD_ADDR_VAR 0 7
42412: PUSH
42413: LD_VAR 0 7
42417: PPUSH
42418: LD_INT 1
42420: PPUSH
42421: LD_VAR 0 14
42425: PPUSH
42426: CALL_OW 2
42430: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
42431: LD_VAR 0 14
42435: PPUSH
42436: LD_VAR 0 9
42440: PPUSH
42441: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
42445: LD_VAR 0 9
42449: PPUSH
42450: CALL_OW 313
42454: PUSH
42455: LD_INT 6
42457: EQUAL
42458: PUSH
42459: LD_VAR 0 9
42463: PPUSH
42464: CALL_OW 266
42468: PUSH
42469: LD_INT 32
42471: PUSH
42472: LD_INT 31
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: IN
42479: OR
42480: IFFALSE 42294
42482: GO 42291
42484: POP
42485: POP
// end else
42486: GO 42868
// for j = 1 to x do
42488: LD_ADDR_VAR 0 9
42492: PUSH
42493: DOUBLE
42494: LD_INT 1
42496: DEC
42497: ST_TO_ADDR
42498: LD_VAR 0 13
42502: PUSH
42503: FOR_TO
42504: IFFALSE 42866
// begin InitHc ;
42506: CALL_OW 19
// if not f then
42510: LD_VAR 0 12
42514: NOT
42515: IFFALSE 42604
// begin PrepareHuman ( false , i , skill ) ;
42517: LD_INT 0
42519: PPUSH
42520: LD_VAR 0 8
42524: PPUSH
42525: LD_VAR 0 4
42529: PPUSH
42530: CALL_OW 380
// un := CreateHuman ;
42534: LD_ADDR_VAR 0 14
42538: PUSH
42539: CALL_OW 44
42543: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42544: LD_ADDR_VAR 0 7
42548: PUSH
42549: LD_VAR 0 7
42553: PPUSH
42554: LD_INT 1
42556: PPUSH
42557: LD_VAR 0 14
42561: PPUSH
42562: CALL_OW 2
42566: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42567: LD_VAR 0 14
42571: PPUSH
42572: LD_VAR 0 1
42576: PPUSH
42577: CALL_OW 250
42581: PPUSH
42582: LD_VAR 0 1
42586: PPUSH
42587: CALL_OW 251
42591: PPUSH
42592: LD_INT 10
42594: PPUSH
42595: LD_INT 0
42597: PPUSH
42598: CALL_OW 50
// continue ;
42602: GO 42503
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
42604: LD_VAR 0 12
42608: PUSH
42609: LD_INT 1
42611: ARRAY
42612: PPUSH
42613: CALL_OW 313
42617: PUSH
42618: LD_VAR 0 12
42622: PUSH
42623: LD_INT 1
42625: ARRAY
42626: PPUSH
42627: CALL_OW 266
42631: PUSH
42632: LD_INT 32
42634: PUSH
42635: LD_INT 31
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: IN
42642: AND
42643: PUSH
42644: LD_VAR 0 12
42648: PUSH
42649: LD_INT 1
42651: ARRAY
42652: PPUSH
42653: CALL_OW 313
42657: PUSH
42658: LD_INT 6
42660: EQUAL
42661: OR
42662: IFFALSE 42682
// f := Delete ( f , 1 ) ;
42664: LD_ADDR_VAR 0 12
42668: PUSH
42669: LD_VAR 0 12
42673: PPUSH
42674: LD_INT 1
42676: PPUSH
42677: CALL_OW 3
42681: ST_TO_ADDR
// if not f then
42682: LD_VAR 0 12
42686: NOT
42687: IFFALSE 42705
// begin x := x + 2 ;
42689: LD_ADDR_VAR 0 13
42693: PUSH
42694: LD_VAR 0 13
42698: PUSH
42699: LD_INT 2
42701: PLUS
42702: ST_TO_ADDR
// continue ;
42703: GO 42503
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
42705: LD_VAR 0 12
42709: PUSH
42710: LD_INT 1
42712: ARRAY
42713: PPUSH
42714: CALL_OW 266
42718: PUSH
42719: LD_INT 5
42721: EQUAL
42722: IFFALSE 42796
// begin if UnitsInside ( f [ 1 ] ) < 3 then
42724: LD_VAR 0 12
42728: PUSH
42729: LD_INT 1
42731: ARRAY
42732: PPUSH
42733: CALL_OW 313
42737: PUSH
42738: LD_INT 3
42740: LESS
42741: IFFALSE 42777
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42743: LD_INT 0
42745: PPUSH
42746: LD_INT 5
42748: PUSH
42749: LD_INT 8
42751: PUSH
42752: LD_INT 9
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: LIST
42759: PUSH
42760: LD_VAR 0 17
42764: ARRAY
42765: PPUSH
42766: LD_VAR 0 4
42770: PPUSH
42771: CALL_OW 380
42775: GO 42794
// PrepareHuman ( false , i , skill ) ;
42777: LD_INT 0
42779: PPUSH
42780: LD_VAR 0 8
42784: PPUSH
42785: LD_VAR 0 4
42789: PPUSH
42790: CALL_OW 380
// end else
42794: GO 42813
// PrepareHuman ( false , i , skill ) ;
42796: LD_INT 0
42798: PPUSH
42799: LD_VAR 0 8
42803: PPUSH
42804: LD_VAR 0 4
42808: PPUSH
42809: CALL_OW 380
// un := CreateHuman ;
42813: LD_ADDR_VAR 0 14
42817: PUSH
42818: CALL_OW 44
42822: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42823: LD_ADDR_VAR 0 7
42827: PUSH
42828: LD_VAR 0 7
42832: PPUSH
42833: LD_INT 1
42835: PPUSH
42836: LD_VAR 0 14
42840: PPUSH
42841: CALL_OW 2
42845: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42846: LD_VAR 0 14
42850: PPUSH
42851: LD_VAR 0 12
42855: PUSH
42856: LD_INT 1
42858: ARRAY
42859: PPUSH
42860: CALL_OW 52
// end ;
42864: GO 42503
42866: POP
42867: POP
// end ;
42868: GO 41805
42870: POP
42871: POP
// result := result ^ buildings ;
42872: LD_ADDR_VAR 0 7
42876: PUSH
42877: LD_VAR 0 7
42881: PUSH
42882: LD_VAR 0 18
42886: ADD
42887: ST_TO_ADDR
// end else
42888: GO 43031
// begin for i = 1 to personel do
42890: LD_ADDR_VAR 0 8
42894: PUSH
42895: DOUBLE
42896: LD_INT 1
42898: DEC
42899: ST_TO_ADDR
42900: LD_VAR 0 6
42904: PUSH
42905: FOR_TO
42906: IFFALSE 43029
// begin if i > 4 then
42908: LD_VAR 0 8
42912: PUSH
42913: LD_INT 4
42915: GREATER
42916: IFFALSE 42920
// break ;
42918: GO 43029
// x := personel [ i ] ;
42920: LD_ADDR_VAR 0 13
42924: PUSH
42925: LD_VAR 0 6
42929: PUSH
42930: LD_VAR 0 8
42934: ARRAY
42935: ST_TO_ADDR
// if x = - 1 then
42936: LD_VAR 0 13
42940: PUSH
42941: LD_INT 1
42943: NEG
42944: EQUAL
42945: IFFALSE 42949
// continue ;
42947: GO 42905
// PrepareHuman ( false , i , skill ) ;
42949: LD_INT 0
42951: PPUSH
42952: LD_VAR 0 8
42956: PPUSH
42957: LD_VAR 0 4
42961: PPUSH
42962: CALL_OW 380
// un := CreateHuman ;
42966: LD_ADDR_VAR 0 14
42970: PUSH
42971: CALL_OW 44
42975: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42976: LD_VAR 0 14
42980: PPUSH
42981: LD_VAR 0 1
42985: PPUSH
42986: CALL_OW 250
42990: PPUSH
42991: LD_VAR 0 1
42995: PPUSH
42996: CALL_OW 251
43000: PPUSH
43001: LD_INT 10
43003: PPUSH
43004: LD_INT 0
43006: PPUSH
43007: CALL_OW 50
// result := result ^ un ;
43011: LD_ADDR_VAR 0 7
43015: PUSH
43016: LD_VAR 0 7
43020: PUSH
43021: LD_VAR 0 14
43025: ADD
43026: ST_TO_ADDR
// end ;
43027: GO 42905
43029: POP
43030: POP
// end ; end ;
43031: LD_VAR 0 7
43035: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
43036: LD_INT 0
43038: PPUSH
43039: PPUSH
43040: PPUSH
43041: PPUSH
43042: PPUSH
43043: PPUSH
43044: PPUSH
43045: PPUSH
43046: PPUSH
43047: PPUSH
43048: PPUSH
43049: PPUSH
43050: PPUSH
43051: PPUSH
43052: PPUSH
43053: PPUSH
// result := false ;
43054: LD_ADDR_VAR 0 3
43058: PUSH
43059: LD_INT 0
43061: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
43062: LD_VAR 0 1
43066: NOT
43067: PUSH
43068: LD_VAR 0 1
43072: PPUSH
43073: CALL_OW 266
43077: PUSH
43078: LD_INT 32
43080: PUSH
43081: LD_INT 33
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: IN
43088: NOT
43089: OR
43090: IFFALSE 43094
// exit ;
43092: GO 44203
// nat := GetNation ( tower ) ;
43094: LD_ADDR_VAR 0 12
43098: PUSH
43099: LD_VAR 0 1
43103: PPUSH
43104: CALL_OW 248
43108: ST_TO_ADDR
// side := GetSide ( tower ) ;
43109: LD_ADDR_VAR 0 16
43113: PUSH
43114: LD_VAR 0 1
43118: PPUSH
43119: CALL_OW 255
43123: ST_TO_ADDR
// x := GetX ( tower ) ;
43124: LD_ADDR_VAR 0 10
43128: PUSH
43129: LD_VAR 0 1
43133: PPUSH
43134: CALL_OW 250
43138: ST_TO_ADDR
// y := GetY ( tower ) ;
43139: LD_ADDR_VAR 0 11
43143: PUSH
43144: LD_VAR 0 1
43148: PPUSH
43149: CALL_OW 251
43153: ST_TO_ADDR
// if not x or not y then
43154: LD_VAR 0 10
43158: NOT
43159: PUSH
43160: LD_VAR 0 11
43164: NOT
43165: OR
43166: IFFALSE 43170
// exit ;
43168: GO 44203
// weapon := 0 ;
43170: LD_ADDR_VAR 0 18
43174: PUSH
43175: LD_INT 0
43177: ST_TO_ADDR
// fac_list := [ ] ;
43178: LD_ADDR_VAR 0 17
43182: PUSH
43183: EMPTY
43184: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
43185: LD_ADDR_VAR 0 6
43189: PUSH
43190: LD_VAR 0 1
43194: PPUSH
43195: CALL_OW 274
43199: PPUSH
43200: LD_VAR 0 2
43204: PPUSH
43205: LD_INT 0
43207: PPUSH
43208: CALL 40774 0 3
43212: PPUSH
43213: LD_INT 30
43215: PUSH
43216: LD_INT 3
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PPUSH
43223: CALL_OW 72
43227: ST_TO_ADDR
// if not factories then
43228: LD_VAR 0 6
43232: NOT
43233: IFFALSE 43237
// exit ;
43235: GO 44203
// for i in factories do
43237: LD_ADDR_VAR 0 8
43241: PUSH
43242: LD_VAR 0 6
43246: PUSH
43247: FOR_IN
43248: IFFALSE 43273
// fac_list := fac_list union AvailableWeaponList ( i ) ;
43250: LD_ADDR_VAR 0 17
43254: PUSH
43255: LD_VAR 0 17
43259: PUSH
43260: LD_VAR 0 8
43264: PPUSH
43265: CALL_OW 478
43269: UNION
43270: ST_TO_ADDR
43271: GO 43247
43273: POP
43274: POP
// if not fac_list then
43275: LD_VAR 0 17
43279: NOT
43280: IFFALSE 43284
// exit ;
43282: GO 44203
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
43284: LD_ADDR_VAR 0 5
43288: PUSH
43289: LD_INT 4
43291: PUSH
43292: LD_INT 5
43294: PUSH
43295: LD_INT 9
43297: PUSH
43298: LD_INT 10
43300: PUSH
43301: LD_INT 6
43303: PUSH
43304: LD_INT 7
43306: PUSH
43307: LD_INT 11
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 27
43321: PUSH
43322: LD_INT 28
43324: PUSH
43325: LD_INT 26
43327: PUSH
43328: LD_INT 30
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 43
43339: PUSH
43340: LD_INT 44
43342: PUSH
43343: LD_INT 46
43345: PUSH
43346: LD_INT 45
43348: PUSH
43349: LD_INT 47
43351: PUSH
43352: LD_INT 49
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: LIST
43367: PUSH
43368: LD_VAR 0 12
43372: ARRAY
43373: ST_TO_ADDR
// list := list isect fac_list ;
43374: LD_ADDR_VAR 0 5
43378: PUSH
43379: LD_VAR 0 5
43383: PUSH
43384: LD_VAR 0 17
43388: ISECT
43389: ST_TO_ADDR
// if not list then
43390: LD_VAR 0 5
43394: NOT
43395: IFFALSE 43399
// exit ;
43397: GO 44203
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
43399: LD_VAR 0 12
43403: PUSH
43404: LD_INT 3
43406: EQUAL
43407: PUSH
43408: LD_INT 49
43410: PUSH
43411: LD_VAR 0 5
43415: IN
43416: AND
43417: PUSH
43418: LD_INT 31
43420: PPUSH
43421: LD_VAR 0 16
43425: PPUSH
43426: CALL_OW 321
43430: PUSH
43431: LD_INT 2
43433: EQUAL
43434: AND
43435: IFFALSE 43495
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
43437: LD_INT 22
43439: PUSH
43440: LD_VAR 0 16
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: LD_INT 35
43451: PUSH
43452: LD_INT 49
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 91
43461: PUSH
43462: LD_VAR 0 1
43466: PUSH
43467: LD_INT 10
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: LIST
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: LIST
43479: PPUSH
43480: CALL_OW 69
43484: NOT
43485: IFFALSE 43495
// weapon := ru_time_lapser ;
43487: LD_ADDR_VAR 0 18
43491: PUSH
43492: LD_INT 49
43494: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
43495: LD_VAR 0 12
43499: PUSH
43500: LD_INT 1
43502: PUSH
43503: LD_INT 2
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: IN
43510: PUSH
43511: LD_INT 11
43513: PUSH
43514: LD_VAR 0 5
43518: IN
43519: PUSH
43520: LD_INT 30
43522: PUSH
43523: LD_VAR 0 5
43527: IN
43528: OR
43529: AND
43530: PUSH
43531: LD_INT 6
43533: PPUSH
43534: LD_VAR 0 16
43538: PPUSH
43539: CALL_OW 321
43543: PUSH
43544: LD_INT 2
43546: EQUAL
43547: AND
43548: IFFALSE 43713
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
43550: LD_INT 22
43552: PUSH
43553: LD_VAR 0 16
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: PUSH
43562: LD_INT 2
43564: PUSH
43565: LD_INT 35
43567: PUSH
43568: LD_INT 11
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 35
43577: PUSH
43578: LD_INT 30
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: LIST
43589: PUSH
43590: LD_INT 91
43592: PUSH
43593: LD_VAR 0 1
43597: PUSH
43598: LD_INT 18
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: LIST
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: LIST
43610: PPUSH
43611: CALL_OW 69
43615: NOT
43616: PUSH
43617: LD_INT 22
43619: PUSH
43620: LD_VAR 0 16
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 2
43631: PUSH
43632: LD_INT 30
43634: PUSH
43635: LD_INT 32
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 30
43644: PUSH
43645: LD_INT 33
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 91
43659: PUSH
43660: LD_VAR 0 1
43664: PUSH
43665: LD_INT 12
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: LIST
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: LIST
43677: PUSH
43678: EMPTY
43679: LIST
43680: PPUSH
43681: CALL_OW 69
43685: PUSH
43686: LD_INT 2
43688: GREATER
43689: AND
43690: IFFALSE 43713
// weapon := [ us_radar , ar_radar ] [ nat ] ;
43692: LD_ADDR_VAR 0 18
43696: PUSH
43697: LD_INT 11
43699: PUSH
43700: LD_INT 30
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_VAR 0 12
43711: ARRAY
43712: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
43713: LD_VAR 0 18
43717: NOT
43718: PUSH
43719: LD_INT 40
43721: PPUSH
43722: LD_VAR 0 16
43726: PPUSH
43727: CALL_OW 321
43731: PUSH
43732: LD_INT 2
43734: EQUAL
43735: AND
43736: PUSH
43737: LD_INT 7
43739: PUSH
43740: LD_VAR 0 5
43744: IN
43745: PUSH
43746: LD_INT 28
43748: PUSH
43749: LD_VAR 0 5
43753: IN
43754: OR
43755: PUSH
43756: LD_INT 45
43758: PUSH
43759: LD_VAR 0 5
43763: IN
43764: OR
43765: AND
43766: IFFALSE 44020
// begin hex := GetHexInfo ( x , y ) ;
43768: LD_ADDR_VAR 0 4
43772: PUSH
43773: LD_VAR 0 10
43777: PPUSH
43778: LD_VAR 0 11
43782: PPUSH
43783: CALL_OW 546
43787: ST_TO_ADDR
// if hex [ 1 ] then
43788: LD_VAR 0 4
43792: PUSH
43793: LD_INT 1
43795: ARRAY
43796: IFFALSE 43800
// exit ;
43798: GO 44203
// height := hex [ 2 ] ;
43800: LD_ADDR_VAR 0 15
43804: PUSH
43805: LD_VAR 0 4
43809: PUSH
43810: LD_INT 2
43812: ARRAY
43813: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43814: LD_ADDR_VAR 0 14
43818: PUSH
43819: LD_INT 0
43821: PUSH
43822: LD_INT 2
43824: PUSH
43825: LD_INT 3
43827: PUSH
43828: LD_INT 5
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: ST_TO_ADDR
// for i in tmp do
43837: LD_ADDR_VAR 0 8
43841: PUSH
43842: LD_VAR 0 14
43846: PUSH
43847: FOR_IN
43848: IFFALSE 44018
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43850: LD_ADDR_VAR 0 9
43854: PUSH
43855: LD_VAR 0 10
43859: PPUSH
43860: LD_VAR 0 8
43864: PPUSH
43865: LD_INT 5
43867: PPUSH
43868: CALL_OW 272
43872: PUSH
43873: LD_VAR 0 11
43877: PPUSH
43878: LD_VAR 0 8
43882: PPUSH
43883: LD_INT 5
43885: PPUSH
43886: CALL_OW 273
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43895: LD_VAR 0 9
43899: PUSH
43900: LD_INT 1
43902: ARRAY
43903: PPUSH
43904: LD_VAR 0 9
43908: PUSH
43909: LD_INT 2
43911: ARRAY
43912: PPUSH
43913: CALL_OW 488
43917: IFFALSE 44016
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43919: LD_ADDR_VAR 0 4
43923: PUSH
43924: LD_VAR 0 9
43928: PUSH
43929: LD_INT 1
43931: ARRAY
43932: PPUSH
43933: LD_VAR 0 9
43937: PUSH
43938: LD_INT 2
43940: ARRAY
43941: PPUSH
43942: CALL_OW 546
43946: ST_TO_ADDR
// if hex [ 1 ] then
43947: LD_VAR 0 4
43951: PUSH
43952: LD_INT 1
43954: ARRAY
43955: IFFALSE 43959
// continue ;
43957: GO 43847
// h := hex [ 2 ] ;
43959: LD_ADDR_VAR 0 13
43963: PUSH
43964: LD_VAR 0 4
43968: PUSH
43969: LD_INT 2
43971: ARRAY
43972: ST_TO_ADDR
// if h + 7 < height then
43973: LD_VAR 0 13
43977: PUSH
43978: LD_INT 7
43980: PLUS
43981: PUSH
43982: LD_VAR 0 15
43986: LESS
43987: IFFALSE 44016
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43989: LD_ADDR_VAR 0 18
43993: PUSH
43994: LD_INT 7
43996: PUSH
43997: LD_INT 28
43999: PUSH
44000: LD_INT 45
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: LIST
44007: PUSH
44008: LD_VAR 0 12
44012: ARRAY
44013: ST_TO_ADDR
// break ;
44014: GO 44018
// end ; end ; end ;
44016: GO 43847
44018: POP
44019: POP
// end ; if not weapon then
44020: LD_VAR 0 18
44024: NOT
44025: IFFALSE 44085
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
44027: LD_ADDR_VAR 0 5
44031: PUSH
44032: LD_VAR 0 5
44036: PUSH
44037: LD_INT 11
44039: PUSH
44040: LD_INT 30
44042: PUSH
44043: LD_INT 49
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: LIST
44050: DIFF
44051: ST_TO_ADDR
// if not list then
44052: LD_VAR 0 5
44056: NOT
44057: IFFALSE 44061
// exit ;
44059: GO 44203
// weapon := list [ rand ( 1 , list ) ] ;
44061: LD_ADDR_VAR 0 18
44065: PUSH
44066: LD_VAR 0 5
44070: PUSH
44071: LD_INT 1
44073: PPUSH
44074: LD_VAR 0 5
44078: PPUSH
44079: CALL_OW 12
44083: ARRAY
44084: ST_TO_ADDR
// end ; if weapon then
44085: LD_VAR 0 18
44089: IFFALSE 44203
// begin tmp := CostOfWeapon ( weapon ) ;
44091: LD_ADDR_VAR 0 14
44095: PUSH
44096: LD_VAR 0 18
44100: PPUSH
44101: CALL_OW 451
44105: ST_TO_ADDR
// j := GetBase ( tower ) ;
44106: LD_ADDR_VAR 0 9
44110: PUSH
44111: LD_VAR 0 1
44115: PPUSH
44116: CALL_OW 274
44120: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
44121: LD_VAR 0 9
44125: PPUSH
44126: LD_INT 1
44128: PPUSH
44129: CALL_OW 275
44133: PUSH
44134: LD_VAR 0 14
44138: PUSH
44139: LD_INT 1
44141: ARRAY
44142: GREATEREQUAL
44143: PUSH
44144: LD_VAR 0 9
44148: PPUSH
44149: LD_INT 2
44151: PPUSH
44152: CALL_OW 275
44156: PUSH
44157: LD_VAR 0 14
44161: PUSH
44162: LD_INT 2
44164: ARRAY
44165: GREATEREQUAL
44166: AND
44167: PUSH
44168: LD_VAR 0 9
44172: PPUSH
44173: LD_INT 3
44175: PPUSH
44176: CALL_OW 275
44180: PUSH
44181: LD_VAR 0 14
44185: PUSH
44186: LD_INT 3
44188: ARRAY
44189: GREATEREQUAL
44190: AND
44191: IFFALSE 44203
// result := weapon ;
44193: LD_ADDR_VAR 0 3
44197: PUSH
44198: LD_VAR 0 18
44202: ST_TO_ADDR
// end ; end ;
44203: LD_VAR 0 3
44207: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
44208: LD_INT 0
44210: PPUSH
44211: PPUSH
// result := true ;
44212: LD_ADDR_VAR 0 3
44216: PUSH
44217: LD_INT 1
44219: ST_TO_ADDR
// if array1 = array2 then
44220: LD_VAR 0 1
44224: PUSH
44225: LD_VAR 0 2
44229: EQUAL
44230: IFFALSE 44290
// begin for i = 1 to array1 do
44232: LD_ADDR_VAR 0 4
44236: PUSH
44237: DOUBLE
44238: LD_INT 1
44240: DEC
44241: ST_TO_ADDR
44242: LD_VAR 0 1
44246: PUSH
44247: FOR_TO
44248: IFFALSE 44286
// if array1 [ i ] <> array2 [ i ] then
44250: LD_VAR 0 1
44254: PUSH
44255: LD_VAR 0 4
44259: ARRAY
44260: PUSH
44261: LD_VAR 0 2
44265: PUSH
44266: LD_VAR 0 4
44270: ARRAY
44271: NONEQUAL
44272: IFFALSE 44284
// begin result := false ;
44274: LD_ADDR_VAR 0 3
44278: PUSH
44279: LD_INT 0
44281: ST_TO_ADDR
// break ;
44282: GO 44286
// end ;
44284: GO 44247
44286: POP
44287: POP
// end else
44288: GO 44298
// result := false ;
44290: LD_ADDR_VAR 0 3
44294: PUSH
44295: LD_INT 0
44297: ST_TO_ADDR
// end ;
44298: LD_VAR 0 3
44302: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
44303: LD_INT 0
44305: PPUSH
44306: PPUSH
// if not array1 or not array2 then
44307: LD_VAR 0 1
44311: NOT
44312: PUSH
44313: LD_VAR 0 2
44317: NOT
44318: OR
44319: IFFALSE 44323
// exit ;
44321: GO 44387
// result := true ;
44323: LD_ADDR_VAR 0 3
44327: PUSH
44328: LD_INT 1
44330: ST_TO_ADDR
// for i = 1 to array1 do
44331: LD_ADDR_VAR 0 4
44335: PUSH
44336: DOUBLE
44337: LD_INT 1
44339: DEC
44340: ST_TO_ADDR
44341: LD_VAR 0 1
44345: PUSH
44346: FOR_TO
44347: IFFALSE 44385
// if array1 [ i ] <> array2 [ i ] then
44349: LD_VAR 0 1
44353: PUSH
44354: LD_VAR 0 4
44358: ARRAY
44359: PUSH
44360: LD_VAR 0 2
44364: PUSH
44365: LD_VAR 0 4
44369: ARRAY
44370: NONEQUAL
44371: IFFALSE 44383
// begin result := false ;
44373: LD_ADDR_VAR 0 3
44377: PUSH
44378: LD_INT 0
44380: ST_TO_ADDR
// break ;
44381: GO 44385
// end ;
44383: GO 44346
44385: POP
44386: POP
// end ;
44387: LD_VAR 0 3
44391: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
44392: LD_INT 0
44394: PPUSH
44395: PPUSH
44396: PPUSH
// pom := GetBase ( fac ) ;
44397: LD_ADDR_VAR 0 5
44401: PUSH
44402: LD_VAR 0 1
44406: PPUSH
44407: CALL_OW 274
44411: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
44412: LD_ADDR_VAR 0 4
44416: PUSH
44417: LD_VAR 0 2
44421: PUSH
44422: LD_INT 1
44424: ARRAY
44425: PPUSH
44426: LD_VAR 0 2
44430: PUSH
44431: LD_INT 2
44433: ARRAY
44434: PPUSH
44435: LD_VAR 0 2
44439: PUSH
44440: LD_INT 3
44442: ARRAY
44443: PPUSH
44444: LD_VAR 0 2
44448: PUSH
44449: LD_INT 4
44451: ARRAY
44452: PPUSH
44453: CALL_OW 449
44457: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44458: LD_ADDR_VAR 0 3
44462: PUSH
44463: LD_VAR 0 5
44467: PPUSH
44468: LD_INT 1
44470: PPUSH
44471: CALL_OW 275
44475: PUSH
44476: LD_VAR 0 4
44480: PUSH
44481: LD_INT 1
44483: ARRAY
44484: GREATEREQUAL
44485: PUSH
44486: LD_VAR 0 5
44490: PPUSH
44491: LD_INT 2
44493: PPUSH
44494: CALL_OW 275
44498: PUSH
44499: LD_VAR 0 4
44503: PUSH
44504: LD_INT 2
44506: ARRAY
44507: GREATEREQUAL
44508: AND
44509: PUSH
44510: LD_VAR 0 5
44514: PPUSH
44515: LD_INT 3
44517: PPUSH
44518: CALL_OW 275
44522: PUSH
44523: LD_VAR 0 4
44527: PUSH
44528: LD_INT 3
44530: ARRAY
44531: GREATEREQUAL
44532: AND
44533: ST_TO_ADDR
// end ;
44534: LD_VAR 0 3
44538: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
44539: LD_INT 0
44541: PPUSH
44542: PPUSH
44543: PPUSH
44544: PPUSH
// pom := GetBase ( building ) ;
44545: LD_ADDR_VAR 0 3
44549: PUSH
44550: LD_VAR 0 1
44554: PPUSH
44555: CALL_OW 274
44559: ST_TO_ADDR
// if not pom then
44560: LD_VAR 0 3
44564: NOT
44565: IFFALSE 44569
// exit ;
44567: GO 44739
// btype := GetBType ( building ) ;
44569: LD_ADDR_VAR 0 5
44573: PUSH
44574: LD_VAR 0 1
44578: PPUSH
44579: CALL_OW 266
44583: ST_TO_ADDR
// if btype = b_armoury then
44584: LD_VAR 0 5
44588: PUSH
44589: LD_INT 4
44591: EQUAL
44592: IFFALSE 44602
// btype := b_barracks ;
44594: LD_ADDR_VAR 0 5
44598: PUSH
44599: LD_INT 5
44601: ST_TO_ADDR
// if btype = b_depot then
44602: LD_VAR 0 5
44606: PUSH
44607: LD_INT 0
44609: EQUAL
44610: IFFALSE 44620
// btype := b_warehouse ;
44612: LD_ADDR_VAR 0 5
44616: PUSH
44617: LD_INT 1
44619: ST_TO_ADDR
// if btype = b_workshop then
44620: LD_VAR 0 5
44624: PUSH
44625: LD_INT 2
44627: EQUAL
44628: IFFALSE 44638
// btype := b_factory ;
44630: LD_ADDR_VAR 0 5
44634: PUSH
44635: LD_INT 3
44637: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44638: LD_ADDR_VAR 0 4
44642: PUSH
44643: LD_VAR 0 5
44647: PPUSH
44648: LD_VAR 0 1
44652: PPUSH
44653: CALL_OW 248
44657: PPUSH
44658: CALL_OW 450
44662: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44663: LD_ADDR_VAR 0 2
44667: PUSH
44668: LD_VAR 0 3
44672: PPUSH
44673: LD_INT 1
44675: PPUSH
44676: CALL_OW 275
44680: PUSH
44681: LD_VAR 0 4
44685: PUSH
44686: LD_INT 1
44688: ARRAY
44689: GREATEREQUAL
44690: PUSH
44691: LD_VAR 0 3
44695: PPUSH
44696: LD_INT 2
44698: PPUSH
44699: CALL_OW 275
44703: PUSH
44704: LD_VAR 0 4
44708: PUSH
44709: LD_INT 2
44711: ARRAY
44712: GREATEREQUAL
44713: AND
44714: PUSH
44715: LD_VAR 0 3
44719: PPUSH
44720: LD_INT 3
44722: PPUSH
44723: CALL_OW 275
44727: PUSH
44728: LD_VAR 0 4
44732: PUSH
44733: LD_INT 3
44735: ARRAY
44736: GREATEREQUAL
44737: AND
44738: ST_TO_ADDR
// end ;
44739: LD_VAR 0 2
44743: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
44744: LD_INT 0
44746: PPUSH
44747: PPUSH
44748: PPUSH
// pom := GetBase ( building ) ;
44749: LD_ADDR_VAR 0 4
44753: PUSH
44754: LD_VAR 0 1
44758: PPUSH
44759: CALL_OW 274
44763: ST_TO_ADDR
// if not pom then
44764: LD_VAR 0 4
44768: NOT
44769: IFFALSE 44773
// exit ;
44771: GO 44874
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44773: LD_ADDR_VAR 0 5
44777: PUSH
44778: LD_VAR 0 2
44782: PPUSH
44783: LD_VAR 0 1
44787: PPUSH
44788: CALL_OW 248
44792: PPUSH
44793: CALL_OW 450
44797: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44798: LD_ADDR_VAR 0 3
44802: PUSH
44803: LD_VAR 0 4
44807: PPUSH
44808: LD_INT 1
44810: PPUSH
44811: CALL_OW 275
44815: PUSH
44816: LD_VAR 0 5
44820: PUSH
44821: LD_INT 1
44823: ARRAY
44824: GREATEREQUAL
44825: PUSH
44826: LD_VAR 0 4
44830: PPUSH
44831: LD_INT 2
44833: PPUSH
44834: CALL_OW 275
44838: PUSH
44839: LD_VAR 0 5
44843: PUSH
44844: LD_INT 2
44846: ARRAY
44847: GREATEREQUAL
44848: AND
44849: PUSH
44850: LD_VAR 0 4
44854: PPUSH
44855: LD_INT 3
44857: PPUSH
44858: CALL_OW 275
44862: PUSH
44863: LD_VAR 0 5
44867: PUSH
44868: LD_INT 3
44870: ARRAY
44871: GREATEREQUAL
44872: AND
44873: ST_TO_ADDR
// end ;
44874: LD_VAR 0 3
44878: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
44879: LD_INT 0
44881: PPUSH
44882: PPUSH
44883: PPUSH
44884: PPUSH
44885: PPUSH
44886: PPUSH
44887: PPUSH
44888: PPUSH
44889: PPUSH
44890: PPUSH
44891: PPUSH
// result := false ;
44892: LD_ADDR_VAR 0 8
44896: PUSH
44897: LD_INT 0
44899: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
44900: LD_VAR 0 5
44904: NOT
44905: PUSH
44906: LD_VAR 0 1
44910: NOT
44911: OR
44912: PUSH
44913: LD_VAR 0 2
44917: NOT
44918: OR
44919: PUSH
44920: LD_VAR 0 3
44924: NOT
44925: OR
44926: IFFALSE 44930
// exit ;
44928: GO 45744
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
44930: LD_ADDR_VAR 0 14
44934: PUSH
44935: LD_VAR 0 1
44939: PPUSH
44940: LD_VAR 0 2
44944: PPUSH
44945: LD_VAR 0 3
44949: PPUSH
44950: LD_VAR 0 4
44954: PPUSH
44955: LD_VAR 0 5
44959: PUSH
44960: LD_INT 1
44962: ARRAY
44963: PPUSH
44964: CALL_OW 248
44968: PPUSH
44969: LD_INT 0
44971: PPUSH
44972: CALL 46977 0 6
44976: ST_TO_ADDR
// if not hexes then
44977: LD_VAR 0 14
44981: NOT
44982: IFFALSE 44986
// exit ;
44984: GO 45744
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44986: LD_ADDR_VAR 0 17
44990: PUSH
44991: LD_VAR 0 5
44995: PPUSH
44996: LD_INT 22
44998: PUSH
44999: LD_VAR 0 13
45003: PPUSH
45004: CALL_OW 255
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 2
45015: PUSH
45016: LD_INT 30
45018: PUSH
45019: LD_INT 0
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 30
45028: PUSH
45029: LD_INT 1
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: LIST
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PPUSH
45045: CALL_OW 72
45049: ST_TO_ADDR
// for i = 1 to hexes do
45050: LD_ADDR_VAR 0 9
45054: PUSH
45055: DOUBLE
45056: LD_INT 1
45058: DEC
45059: ST_TO_ADDR
45060: LD_VAR 0 14
45064: PUSH
45065: FOR_TO
45066: IFFALSE 45742
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45068: LD_ADDR_VAR 0 13
45072: PUSH
45073: LD_VAR 0 14
45077: PUSH
45078: LD_VAR 0 9
45082: ARRAY
45083: PUSH
45084: LD_INT 1
45086: ARRAY
45087: PPUSH
45088: LD_VAR 0 14
45092: PUSH
45093: LD_VAR 0 9
45097: ARRAY
45098: PUSH
45099: LD_INT 2
45101: ARRAY
45102: PPUSH
45103: CALL_OW 428
45107: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
45108: LD_VAR 0 14
45112: PUSH
45113: LD_VAR 0 9
45117: ARRAY
45118: PUSH
45119: LD_INT 1
45121: ARRAY
45122: PPUSH
45123: LD_VAR 0 14
45127: PUSH
45128: LD_VAR 0 9
45132: ARRAY
45133: PUSH
45134: LD_INT 2
45136: ARRAY
45137: PPUSH
45138: CALL_OW 351
45142: PUSH
45143: LD_VAR 0 14
45147: PUSH
45148: LD_VAR 0 9
45152: ARRAY
45153: PUSH
45154: LD_INT 1
45156: ARRAY
45157: PPUSH
45158: LD_VAR 0 14
45162: PUSH
45163: LD_VAR 0 9
45167: ARRAY
45168: PUSH
45169: LD_INT 2
45171: ARRAY
45172: PPUSH
45173: CALL_OW 488
45177: NOT
45178: OR
45179: PUSH
45180: LD_VAR 0 13
45184: PPUSH
45185: CALL_OW 247
45189: PUSH
45190: LD_INT 3
45192: EQUAL
45193: OR
45194: IFFALSE 45200
// exit ;
45196: POP
45197: POP
45198: GO 45744
// if not tmp then
45200: LD_VAR 0 13
45204: NOT
45205: IFFALSE 45209
// continue ;
45207: GO 45065
// result := true ;
45209: LD_ADDR_VAR 0 8
45213: PUSH
45214: LD_INT 1
45216: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
45217: LD_VAR 0 6
45221: PUSH
45222: LD_VAR 0 13
45226: PPUSH
45227: CALL_OW 247
45231: PUSH
45232: LD_INT 2
45234: EQUAL
45235: AND
45236: PUSH
45237: LD_VAR 0 13
45241: PPUSH
45242: CALL_OW 263
45246: PUSH
45247: LD_INT 1
45249: EQUAL
45250: AND
45251: IFFALSE 45415
// begin if IsDrivenBy ( tmp ) then
45253: LD_VAR 0 13
45257: PPUSH
45258: CALL_OW 311
45262: IFFALSE 45266
// continue ;
45264: GO 45065
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
45266: LD_VAR 0 6
45270: PPUSH
45271: LD_INT 3
45273: PUSH
45274: LD_INT 60
45276: PUSH
45277: EMPTY
45278: LIST
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 3
45286: PUSH
45287: LD_INT 55
45289: PUSH
45290: EMPTY
45291: LIST
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PPUSH
45301: CALL_OW 72
45305: IFFALSE 45413
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
45307: LD_ADDR_VAR 0 18
45311: PUSH
45312: LD_VAR 0 6
45316: PPUSH
45317: LD_INT 3
45319: PUSH
45320: LD_INT 60
45322: PUSH
45323: EMPTY
45324: LIST
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 3
45332: PUSH
45333: LD_INT 55
45335: PUSH
45336: EMPTY
45337: LIST
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PPUSH
45347: CALL_OW 72
45351: PUSH
45352: LD_INT 1
45354: ARRAY
45355: ST_TO_ADDR
// if IsInUnit ( driver ) then
45356: LD_VAR 0 18
45360: PPUSH
45361: CALL_OW 310
45365: IFFALSE 45376
// ComExit ( driver ) ;
45367: LD_VAR 0 18
45371: PPUSH
45372: CALL 70757 0 1
// AddComEnterUnit ( driver , tmp ) ;
45376: LD_VAR 0 18
45380: PPUSH
45381: LD_VAR 0 13
45385: PPUSH
45386: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
45390: LD_VAR 0 18
45394: PPUSH
45395: LD_VAR 0 7
45399: PPUSH
45400: CALL_OW 173
// AddComExitVehicle ( driver ) ;
45404: LD_VAR 0 18
45408: PPUSH
45409: CALL_OW 181
// end ; continue ;
45413: GO 45065
// end ; if not cleaners or not tmp in cleaners then
45415: LD_VAR 0 6
45419: NOT
45420: PUSH
45421: LD_VAR 0 13
45425: PUSH
45426: LD_VAR 0 6
45430: IN
45431: NOT
45432: OR
45433: IFFALSE 45740
// begin if dep then
45435: LD_VAR 0 17
45439: IFFALSE 45575
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
45441: LD_ADDR_VAR 0 16
45445: PUSH
45446: LD_VAR 0 17
45450: PUSH
45451: LD_INT 1
45453: ARRAY
45454: PPUSH
45455: CALL_OW 250
45459: PPUSH
45460: LD_VAR 0 17
45464: PUSH
45465: LD_INT 1
45467: ARRAY
45468: PPUSH
45469: CALL_OW 254
45473: PPUSH
45474: LD_INT 5
45476: PPUSH
45477: CALL_OW 272
45481: PUSH
45482: LD_VAR 0 17
45486: PUSH
45487: LD_INT 1
45489: ARRAY
45490: PPUSH
45491: CALL_OW 251
45495: PPUSH
45496: LD_VAR 0 17
45500: PUSH
45501: LD_INT 1
45503: ARRAY
45504: PPUSH
45505: CALL_OW 254
45509: PPUSH
45510: LD_INT 5
45512: PPUSH
45513: CALL_OW 273
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
45522: LD_VAR 0 16
45526: PUSH
45527: LD_INT 1
45529: ARRAY
45530: PPUSH
45531: LD_VAR 0 16
45535: PUSH
45536: LD_INT 2
45538: ARRAY
45539: PPUSH
45540: CALL_OW 488
45544: IFFALSE 45575
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
45546: LD_VAR 0 13
45550: PPUSH
45551: LD_VAR 0 16
45555: PUSH
45556: LD_INT 1
45558: ARRAY
45559: PPUSH
45560: LD_VAR 0 16
45564: PUSH
45565: LD_INT 2
45567: ARRAY
45568: PPUSH
45569: CALL_OW 111
// continue ;
45573: GO 45065
// end ; end ; r := GetDir ( tmp ) ;
45575: LD_ADDR_VAR 0 15
45579: PUSH
45580: LD_VAR 0 13
45584: PPUSH
45585: CALL_OW 254
45589: ST_TO_ADDR
// if r = 5 then
45590: LD_VAR 0 15
45594: PUSH
45595: LD_INT 5
45597: EQUAL
45598: IFFALSE 45608
// r := 0 ;
45600: LD_ADDR_VAR 0 15
45604: PUSH
45605: LD_INT 0
45607: ST_TO_ADDR
// for j = r to 5 do
45608: LD_ADDR_VAR 0 10
45612: PUSH
45613: DOUBLE
45614: LD_VAR 0 15
45618: DEC
45619: ST_TO_ADDR
45620: LD_INT 5
45622: PUSH
45623: FOR_TO
45624: IFFALSE 45738
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
45626: LD_ADDR_VAR 0 11
45630: PUSH
45631: LD_VAR 0 13
45635: PPUSH
45636: CALL_OW 250
45640: PPUSH
45641: LD_VAR 0 10
45645: PPUSH
45646: LD_INT 2
45648: PPUSH
45649: CALL_OW 272
45653: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
45654: LD_ADDR_VAR 0 12
45658: PUSH
45659: LD_VAR 0 13
45663: PPUSH
45664: CALL_OW 251
45668: PPUSH
45669: LD_VAR 0 10
45673: PPUSH
45674: LD_INT 2
45676: PPUSH
45677: CALL_OW 273
45681: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
45682: LD_VAR 0 11
45686: PPUSH
45687: LD_VAR 0 12
45691: PPUSH
45692: CALL_OW 488
45696: PUSH
45697: LD_VAR 0 11
45701: PPUSH
45702: LD_VAR 0 12
45706: PPUSH
45707: CALL_OW 428
45711: NOT
45712: AND
45713: IFFALSE 45736
// begin ComMoveXY ( tmp , _x , _y ) ;
45715: LD_VAR 0 13
45719: PPUSH
45720: LD_VAR 0 11
45724: PPUSH
45725: LD_VAR 0 12
45729: PPUSH
45730: CALL_OW 111
// break ;
45734: GO 45738
// end ; end ;
45736: GO 45623
45738: POP
45739: POP
// end ; end ;
45740: GO 45065
45742: POP
45743: POP
// end ;
45744: LD_VAR 0 8
45748: RET
// export function BuildingTechInvented ( side , btype ) ; begin
45749: LD_INT 0
45751: PPUSH
// result := true ;
45752: LD_ADDR_VAR 0 3
45756: PUSH
45757: LD_INT 1
45759: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
45760: LD_VAR 0 2
45764: PUSH
45765: LD_INT 24
45767: DOUBLE
45768: EQUAL
45769: IFTRUE 45779
45771: LD_INT 33
45773: DOUBLE
45774: EQUAL
45775: IFTRUE 45779
45777: GO 45804
45779: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
45780: LD_ADDR_VAR 0 3
45784: PUSH
45785: LD_INT 32
45787: PPUSH
45788: LD_VAR 0 1
45792: PPUSH
45793: CALL_OW 321
45797: PUSH
45798: LD_INT 2
45800: EQUAL
45801: ST_TO_ADDR
45802: GO 46120
45804: LD_INT 20
45806: DOUBLE
45807: EQUAL
45808: IFTRUE 45812
45810: GO 45837
45812: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
45813: LD_ADDR_VAR 0 3
45817: PUSH
45818: LD_INT 6
45820: PPUSH
45821: LD_VAR 0 1
45825: PPUSH
45826: CALL_OW 321
45830: PUSH
45831: LD_INT 2
45833: EQUAL
45834: ST_TO_ADDR
45835: GO 46120
45837: LD_INT 22
45839: DOUBLE
45840: EQUAL
45841: IFTRUE 45851
45843: LD_INT 36
45845: DOUBLE
45846: EQUAL
45847: IFTRUE 45851
45849: GO 45876
45851: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
45852: LD_ADDR_VAR 0 3
45856: PUSH
45857: LD_INT 15
45859: PPUSH
45860: LD_VAR 0 1
45864: PPUSH
45865: CALL_OW 321
45869: PUSH
45870: LD_INT 2
45872: EQUAL
45873: ST_TO_ADDR
45874: GO 46120
45876: LD_INT 30
45878: DOUBLE
45879: EQUAL
45880: IFTRUE 45884
45882: GO 45909
45884: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
45885: LD_ADDR_VAR 0 3
45889: PUSH
45890: LD_INT 20
45892: PPUSH
45893: LD_VAR 0 1
45897: PPUSH
45898: CALL_OW 321
45902: PUSH
45903: LD_INT 2
45905: EQUAL
45906: ST_TO_ADDR
45907: GO 46120
45909: LD_INT 28
45911: DOUBLE
45912: EQUAL
45913: IFTRUE 45923
45915: LD_INT 21
45917: DOUBLE
45918: EQUAL
45919: IFTRUE 45923
45921: GO 45948
45923: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
45924: LD_ADDR_VAR 0 3
45928: PUSH
45929: LD_INT 21
45931: PPUSH
45932: LD_VAR 0 1
45936: PPUSH
45937: CALL_OW 321
45941: PUSH
45942: LD_INT 2
45944: EQUAL
45945: ST_TO_ADDR
45946: GO 46120
45948: LD_INT 16
45950: DOUBLE
45951: EQUAL
45952: IFTRUE 45956
45954: GO 45981
45956: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
45957: LD_ADDR_VAR 0 3
45961: PUSH
45962: LD_INT 84
45964: PPUSH
45965: LD_VAR 0 1
45969: PPUSH
45970: CALL_OW 321
45974: PUSH
45975: LD_INT 2
45977: EQUAL
45978: ST_TO_ADDR
45979: GO 46120
45981: LD_INT 19
45983: DOUBLE
45984: EQUAL
45985: IFTRUE 45995
45987: LD_INT 23
45989: DOUBLE
45990: EQUAL
45991: IFTRUE 45995
45993: GO 46020
45995: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
45996: LD_ADDR_VAR 0 3
46000: PUSH
46001: LD_INT 83
46003: PPUSH
46004: LD_VAR 0 1
46008: PPUSH
46009: CALL_OW 321
46013: PUSH
46014: LD_INT 2
46016: EQUAL
46017: ST_TO_ADDR
46018: GO 46120
46020: LD_INT 17
46022: DOUBLE
46023: EQUAL
46024: IFTRUE 46028
46026: GO 46053
46028: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
46029: LD_ADDR_VAR 0 3
46033: PUSH
46034: LD_INT 39
46036: PPUSH
46037: LD_VAR 0 1
46041: PPUSH
46042: CALL_OW 321
46046: PUSH
46047: LD_INT 2
46049: EQUAL
46050: ST_TO_ADDR
46051: GO 46120
46053: LD_INT 18
46055: DOUBLE
46056: EQUAL
46057: IFTRUE 46061
46059: GO 46086
46061: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
46062: LD_ADDR_VAR 0 3
46066: PUSH
46067: LD_INT 40
46069: PPUSH
46070: LD_VAR 0 1
46074: PPUSH
46075: CALL_OW 321
46079: PUSH
46080: LD_INT 2
46082: EQUAL
46083: ST_TO_ADDR
46084: GO 46120
46086: LD_INT 27
46088: DOUBLE
46089: EQUAL
46090: IFTRUE 46094
46092: GO 46119
46094: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
46095: LD_ADDR_VAR 0 3
46099: PUSH
46100: LD_INT 35
46102: PPUSH
46103: LD_VAR 0 1
46107: PPUSH
46108: CALL_OW 321
46112: PUSH
46113: LD_INT 2
46115: EQUAL
46116: ST_TO_ADDR
46117: GO 46120
46119: POP
// end ;
46120: LD_VAR 0 3
46124: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
46125: LD_INT 0
46127: PPUSH
46128: PPUSH
46129: PPUSH
46130: PPUSH
46131: PPUSH
46132: PPUSH
46133: PPUSH
46134: PPUSH
46135: PPUSH
46136: PPUSH
46137: PPUSH
// result := false ;
46138: LD_ADDR_VAR 0 6
46142: PUSH
46143: LD_INT 0
46145: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
46146: LD_VAR 0 1
46150: NOT
46151: PUSH
46152: LD_VAR 0 1
46156: PPUSH
46157: CALL_OW 266
46161: PUSH
46162: LD_INT 0
46164: PUSH
46165: LD_INT 1
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: IN
46172: NOT
46173: OR
46174: PUSH
46175: LD_VAR 0 2
46179: NOT
46180: OR
46181: PUSH
46182: LD_VAR 0 5
46186: PUSH
46187: LD_INT 0
46189: PUSH
46190: LD_INT 1
46192: PUSH
46193: LD_INT 2
46195: PUSH
46196: LD_INT 3
46198: PUSH
46199: LD_INT 4
46201: PUSH
46202: LD_INT 5
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: IN
46213: NOT
46214: OR
46215: PUSH
46216: LD_VAR 0 3
46220: PPUSH
46221: LD_VAR 0 4
46225: PPUSH
46226: CALL_OW 488
46230: NOT
46231: OR
46232: IFFALSE 46236
// exit ;
46234: GO 46972
// side := GetSide ( depot ) ;
46236: LD_ADDR_VAR 0 9
46240: PUSH
46241: LD_VAR 0 1
46245: PPUSH
46246: CALL_OW 255
46250: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
46251: LD_VAR 0 9
46255: PPUSH
46256: LD_VAR 0 2
46260: PPUSH
46261: CALL 45749 0 2
46265: NOT
46266: IFFALSE 46270
// exit ;
46268: GO 46972
// pom := GetBase ( depot ) ;
46270: LD_ADDR_VAR 0 10
46274: PUSH
46275: LD_VAR 0 1
46279: PPUSH
46280: CALL_OW 274
46284: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
46285: LD_ADDR_VAR 0 11
46289: PUSH
46290: LD_VAR 0 2
46294: PPUSH
46295: LD_VAR 0 1
46299: PPUSH
46300: CALL_OW 248
46304: PPUSH
46305: CALL_OW 450
46309: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
46310: LD_VAR 0 10
46314: PPUSH
46315: LD_INT 1
46317: PPUSH
46318: CALL_OW 275
46322: PUSH
46323: LD_VAR 0 11
46327: PUSH
46328: LD_INT 1
46330: ARRAY
46331: GREATEREQUAL
46332: PUSH
46333: LD_VAR 0 10
46337: PPUSH
46338: LD_INT 2
46340: PPUSH
46341: CALL_OW 275
46345: PUSH
46346: LD_VAR 0 11
46350: PUSH
46351: LD_INT 2
46353: ARRAY
46354: GREATEREQUAL
46355: AND
46356: PUSH
46357: LD_VAR 0 10
46361: PPUSH
46362: LD_INT 3
46364: PPUSH
46365: CALL_OW 275
46369: PUSH
46370: LD_VAR 0 11
46374: PUSH
46375: LD_INT 3
46377: ARRAY
46378: GREATEREQUAL
46379: AND
46380: NOT
46381: IFFALSE 46385
// exit ;
46383: GO 46972
// if GetBType ( depot ) = b_depot then
46385: LD_VAR 0 1
46389: PPUSH
46390: CALL_OW 266
46394: PUSH
46395: LD_INT 0
46397: EQUAL
46398: IFFALSE 46410
// dist := 28 else
46400: LD_ADDR_VAR 0 14
46404: PUSH
46405: LD_INT 28
46407: ST_TO_ADDR
46408: GO 46418
// dist := 36 ;
46410: LD_ADDR_VAR 0 14
46414: PUSH
46415: LD_INT 36
46417: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
46418: LD_VAR 0 1
46422: PPUSH
46423: LD_VAR 0 3
46427: PPUSH
46428: LD_VAR 0 4
46432: PPUSH
46433: CALL_OW 297
46437: PUSH
46438: LD_VAR 0 14
46442: GREATER
46443: IFFALSE 46447
// exit ;
46445: GO 46972
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
46447: LD_ADDR_VAR 0 12
46451: PUSH
46452: LD_VAR 0 2
46456: PPUSH
46457: LD_VAR 0 3
46461: PPUSH
46462: LD_VAR 0 4
46466: PPUSH
46467: LD_VAR 0 5
46471: PPUSH
46472: LD_VAR 0 1
46476: PPUSH
46477: CALL_OW 248
46481: PPUSH
46482: LD_INT 0
46484: PPUSH
46485: CALL 46977 0 6
46489: ST_TO_ADDR
// if not hexes then
46490: LD_VAR 0 12
46494: NOT
46495: IFFALSE 46499
// exit ;
46497: GO 46972
// hex := GetHexInfo ( x , y ) ;
46499: LD_ADDR_VAR 0 15
46503: PUSH
46504: LD_VAR 0 3
46508: PPUSH
46509: LD_VAR 0 4
46513: PPUSH
46514: CALL_OW 546
46518: ST_TO_ADDR
// if hex [ 1 ] then
46519: LD_VAR 0 15
46523: PUSH
46524: LD_INT 1
46526: ARRAY
46527: IFFALSE 46531
// exit ;
46529: GO 46972
// height := hex [ 2 ] ;
46531: LD_ADDR_VAR 0 13
46535: PUSH
46536: LD_VAR 0 15
46540: PUSH
46541: LD_INT 2
46543: ARRAY
46544: ST_TO_ADDR
// for i = 1 to hexes do
46545: LD_ADDR_VAR 0 7
46549: PUSH
46550: DOUBLE
46551: LD_INT 1
46553: DEC
46554: ST_TO_ADDR
46555: LD_VAR 0 12
46559: PUSH
46560: FOR_TO
46561: IFFALSE 46891
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
46563: LD_VAR 0 12
46567: PUSH
46568: LD_VAR 0 7
46572: ARRAY
46573: PUSH
46574: LD_INT 1
46576: ARRAY
46577: PPUSH
46578: LD_VAR 0 12
46582: PUSH
46583: LD_VAR 0 7
46587: ARRAY
46588: PUSH
46589: LD_INT 2
46591: ARRAY
46592: PPUSH
46593: CALL_OW 488
46597: NOT
46598: PUSH
46599: LD_VAR 0 12
46603: PUSH
46604: LD_VAR 0 7
46608: ARRAY
46609: PUSH
46610: LD_INT 1
46612: ARRAY
46613: PPUSH
46614: LD_VAR 0 12
46618: PUSH
46619: LD_VAR 0 7
46623: ARRAY
46624: PUSH
46625: LD_INT 2
46627: ARRAY
46628: PPUSH
46629: CALL_OW 428
46633: PUSH
46634: LD_INT 0
46636: GREATER
46637: OR
46638: PUSH
46639: LD_VAR 0 12
46643: PUSH
46644: LD_VAR 0 7
46648: ARRAY
46649: PUSH
46650: LD_INT 1
46652: ARRAY
46653: PPUSH
46654: LD_VAR 0 12
46658: PUSH
46659: LD_VAR 0 7
46663: ARRAY
46664: PUSH
46665: LD_INT 2
46667: ARRAY
46668: PPUSH
46669: CALL_OW 351
46673: OR
46674: IFFALSE 46680
// exit ;
46676: POP
46677: POP
46678: GO 46972
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46680: LD_ADDR_VAR 0 8
46684: PUSH
46685: LD_VAR 0 12
46689: PUSH
46690: LD_VAR 0 7
46694: ARRAY
46695: PUSH
46696: LD_INT 1
46698: ARRAY
46699: PPUSH
46700: LD_VAR 0 12
46704: PUSH
46705: LD_VAR 0 7
46709: ARRAY
46710: PUSH
46711: LD_INT 2
46713: ARRAY
46714: PPUSH
46715: CALL_OW 546
46719: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
46720: LD_VAR 0 8
46724: PUSH
46725: LD_INT 1
46727: ARRAY
46728: PUSH
46729: LD_VAR 0 8
46733: PUSH
46734: LD_INT 2
46736: ARRAY
46737: PUSH
46738: LD_VAR 0 13
46742: PUSH
46743: LD_INT 2
46745: PLUS
46746: GREATER
46747: OR
46748: PUSH
46749: LD_VAR 0 8
46753: PUSH
46754: LD_INT 2
46756: ARRAY
46757: PUSH
46758: LD_VAR 0 13
46762: PUSH
46763: LD_INT 2
46765: MINUS
46766: LESS
46767: OR
46768: PUSH
46769: LD_VAR 0 8
46773: PUSH
46774: LD_INT 3
46776: ARRAY
46777: PUSH
46778: LD_INT 0
46780: PUSH
46781: LD_INT 8
46783: PUSH
46784: LD_INT 9
46786: PUSH
46787: LD_INT 10
46789: PUSH
46790: LD_INT 11
46792: PUSH
46793: LD_INT 12
46795: PUSH
46796: LD_INT 13
46798: PUSH
46799: LD_INT 16
46801: PUSH
46802: LD_INT 17
46804: PUSH
46805: LD_INT 18
46807: PUSH
46808: LD_INT 19
46810: PUSH
46811: LD_INT 20
46813: PUSH
46814: LD_INT 21
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: IN
46832: NOT
46833: OR
46834: PUSH
46835: LD_VAR 0 8
46839: PUSH
46840: LD_INT 5
46842: ARRAY
46843: NOT
46844: OR
46845: PUSH
46846: LD_VAR 0 8
46850: PUSH
46851: LD_INT 6
46853: ARRAY
46854: PUSH
46855: LD_INT 1
46857: PUSH
46858: LD_INT 2
46860: PUSH
46861: LD_INT 7
46863: PUSH
46864: LD_INT 9
46866: PUSH
46867: LD_INT 10
46869: PUSH
46870: LD_INT 11
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: IN
46881: NOT
46882: OR
46883: IFFALSE 46889
// exit ;
46885: POP
46886: POP
46887: GO 46972
// end ;
46889: GO 46560
46891: POP
46892: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46893: LD_VAR 0 9
46897: PPUSH
46898: LD_VAR 0 3
46902: PPUSH
46903: LD_VAR 0 4
46907: PPUSH
46908: LD_INT 20
46910: PPUSH
46911: CALL 38924 0 4
46915: PUSH
46916: LD_INT 4
46918: ARRAY
46919: IFFALSE 46923
// exit ;
46921: GO 46972
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46923: LD_VAR 0 2
46927: PUSH
46928: LD_INT 29
46930: PUSH
46931: LD_INT 30
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: IN
46938: PUSH
46939: LD_VAR 0 3
46943: PPUSH
46944: LD_VAR 0 4
46948: PPUSH
46949: LD_VAR 0 9
46953: PPUSH
46954: CALL_OW 440
46958: NOT
46959: AND
46960: IFFALSE 46964
// exit ;
46962: GO 46972
// result := true ;
46964: LD_ADDR_VAR 0 6
46968: PUSH
46969: LD_INT 1
46971: ST_TO_ADDR
// end ;
46972: LD_VAR 0 6
46976: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46977: LD_INT 0
46979: PPUSH
46980: PPUSH
46981: PPUSH
46982: PPUSH
46983: PPUSH
46984: PPUSH
46985: PPUSH
46986: PPUSH
46987: PPUSH
46988: PPUSH
46989: PPUSH
46990: PPUSH
46991: PPUSH
46992: PPUSH
46993: PPUSH
46994: PPUSH
46995: PPUSH
46996: PPUSH
46997: PPUSH
46998: PPUSH
46999: PPUSH
47000: PPUSH
47001: PPUSH
47002: PPUSH
47003: PPUSH
47004: PPUSH
47005: PPUSH
47006: PPUSH
47007: PPUSH
47008: PPUSH
47009: PPUSH
47010: PPUSH
47011: PPUSH
47012: PPUSH
47013: PPUSH
47014: PPUSH
47015: PPUSH
47016: PPUSH
47017: PPUSH
47018: PPUSH
47019: PPUSH
47020: PPUSH
47021: PPUSH
47022: PPUSH
47023: PPUSH
47024: PPUSH
47025: PPUSH
47026: PPUSH
47027: PPUSH
47028: PPUSH
47029: PPUSH
47030: PPUSH
47031: PPUSH
47032: PPUSH
47033: PPUSH
47034: PPUSH
47035: PPUSH
47036: PPUSH
// result = [ ] ;
47037: LD_ADDR_VAR 0 7
47041: PUSH
47042: EMPTY
47043: ST_TO_ADDR
// temp_list = [ ] ;
47044: LD_ADDR_VAR 0 9
47048: PUSH
47049: EMPTY
47050: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
47051: LD_VAR 0 4
47055: PUSH
47056: LD_INT 0
47058: PUSH
47059: LD_INT 1
47061: PUSH
47062: LD_INT 2
47064: PUSH
47065: LD_INT 3
47067: PUSH
47068: LD_INT 4
47070: PUSH
47071: LD_INT 5
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: IN
47082: NOT
47083: PUSH
47084: LD_VAR 0 1
47088: PUSH
47089: LD_INT 0
47091: PUSH
47092: LD_INT 1
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: IN
47099: PUSH
47100: LD_VAR 0 5
47104: PUSH
47105: LD_INT 1
47107: PUSH
47108: LD_INT 2
47110: PUSH
47111: LD_INT 3
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: LIST
47118: IN
47119: NOT
47120: AND
47121: OR
47122: IFFALSE 47126
// exit ;
47124: GO 65517
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
47126: LD_VAR 0 1
47130: PUSH
47131: LD_INT 6
47133: PUSH
47134: LD_INT 7
47136: PUSH
47137: LD_INT 8
47139: PUSH
47140: LD_INT 13
47142: PUSH
47143: LD_INT 12
47145: PUSH
47146: LD_INT 15
47148: PUSH
47149: LD_INT 11
47151: PUSH
47152: LD_INT 14
47154: PUSH
47155: LD_INT 10
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: IN
47169: IFFALSE 47179
// btype = b_lab ;
47171: LD_ADDR_VAR 0 1
47175: PUSH
47176: LD_INT 6
47178: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
47179: LD_VAR 0 6
47183: PUSH
47184: LD_INT 0
47186: PUSH
47187: LD_INT 1
47189: PUSH
47190: LD_INT 2
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: LIST
47197: IN
47198: NOT
47199: PUSH
47200: LD_VAR 0 1
47204: PUSH
47205: LD_INT 0
47207: PUSH
47208: LD_INT 1
47210: PUSH
47211: LD_INT 2
47213: PUSH
47214: LD_INT 3
47216: PUSH
47217: LD_INT 6
47219: PUSH
47220: LD_INT 36
47222: PUSH
47223: LD_INT 4
47225: PUSH
47226: LD_INT 5
47228: PUSH
47229: LD_INT 31
47231: PUSH
47232: LD_INT 32
47234: PUSH
47235: LD_INT 33
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: IN
47251: NOT
47252: PUSH
47253: LD_VAR 0 6
47257: PUSH
47258: LD_INT 1
47260: EQUAL
47261: AND
47262: OR
47263: PUSH
47264: LD_VAR 0 1
47268: PUSH
47269: LD_INT 2
47271: PUSH
47272: LD_INT 3
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: IN
47279: NOT
47280: PUSH
47281: LD_VAR 0 6
47285: PUSH
47286: LD_INT 2
47288: EQUAL
47289: AND
47290: OR
47291: IFFALSE 47301
// mode = 0 ;
47293: LD_ADDR_VAR 0 6
47297: PUSH
47298: LD_INT 0
47300: ST_TO_ADDR
// case mode of 0 :
47301: LD_VAR 0 6
47305: PUSH
47306: LD_INT 0
47308: DOUBLE
47309: EQUAL
47310: IFTRUE 47314
47312: GO 58767
47314: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47315: LD_ADDR_VAR 0 11
47319: PUSH
47320: LD_INT 0
47322: PUSH
47323: LD_INT 0
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 0
47332: PUSH
47333: LD_INT 1
47335: NEG
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 1
47343: PUSH
47344: LD_INT 0
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 1
47353: PUSH
47354: LD_INT 1
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 0
47363: PUSH
47364: LD_INT 1
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 1
47373: NEG
47374: PUSH
47375: LD_INT 0
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 1
47384: NEG
47385: PUSH
47386: LD_INT 1
47388: NEG
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 1
47396: NEG
47397: PUSH
47398: LD_INT 2
47400: NEG
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 0
47408: PUSH
47409: LD_INT 2
47411: NEG
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 1
47419: PUSH
47420: LD_INT 1
47422: NEG
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 1
47430: PUSH
47431: LD_INT 2
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 0
47440: PUSH
47441: LD_INT 2
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 1
47450: NEG
47451: PUSH
47452: LD_INT 1
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 1
47461: PUSH
47462: LD_INT 3
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 0
47471: PUSH
47472: LD_INT 3
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 1
47481: NEG
47482: PUSH
47483: LD_INT 2
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47508: LD_ADDR_VAR 0 12
47512: PUSH
47513: LD_INT 0
47515: PUSH
47516: LD_INT 0
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 0
47525: PUSH
47526: LD_INT 1
47528: NEG
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 1
47536: PUSH
47537: LD_INT 0
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 1
47546: PUSH
47547: LD_INT 1
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 0
47556: PUSH
47557: LD_INT 1
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 1
47566: NEG
47567: PUSH
47568: LD_INT 0
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 1
47577: NEG
47578: PUSH
47579: LD_INT 1
47581: NEG
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 1
47589: PUSH
47590: LD_INT 1
47592: NEG
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 2
47600: PUSH
47601: LD_INT 0
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 2
47610: PUSH
47611: LD_INT 1
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 1
47620: NEG
47621: PUSH
47622: LD_INT 1
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 2
47631: NEG
47632: PUSH
47633: LD_INT 0
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 2
47642: NEG
47643: PUSH
47644: LD_INT 1
47646: NEG
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 2
47654: NEG
47655: PUSH
47656: LD_INT 1
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 3
47665: NEG
47666: PUSH
47667: LD_INT 0
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 3
47676: NEG
47677: PUSH
47678: LD_INT 1
47680: NEG
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47704: LD_ADDR_VAR 0 13
47708: PUSH
47709: LD_INT 0
47711: PUSH
47712: LD_INT 0
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 0
47721: PUSH
47722: LD_INT 1
47724: NEG
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 1
47732: PUSH
47733: LD_INT 0
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 1
47742: PUSH
47743: LD_INT 1
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 0
47752: PUSH
47753: LD_INT 1
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 1
47762: NEG
47763: PUSH
47764: LD_INT 0
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 1
47773: NEG
47774: PUSH
47775: LD_INT 1
47777: NEG
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 1
47785: NEG
47786: PUSH
47787: LD_INT 2
47789: NEG
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 2
47797: PUSH
47798: LD_INT 1
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 2
47807: PUSH
47808: LD_INT 2
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 1
47817: PUSH
47818: LD_INT 2
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 2
47827: NEG
47828: PUSH
47829: LD_INT 1
47831: NEG
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 2
47839: NEG
47840: PUSH
47841: LD_INT 2
47843: NEG
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 2
47851: NEG
47852: PUSH
47853: LD_INT 3
47855: NEG
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 3
47863: NEG
47864: PUSH
47865: LD_INT 2
47867: NEG
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 3
47875: NEG
47876: PUSH
47877: LD_INT 3
47879: NEG
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47903: LD_ADDR_VAR 0 14
47907: PUSH
47908: LD_INT 0
47910: PUSH
47911: LD_INT 0
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 0
47920: PUSH
47921: LD_INT 1
47923: NEG
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 1
47931: PUSH
47932: LD_INT 0
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 1
47941: PUSH
47942: LD_INT 1
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 0
47951: PUSH
47952: LD_INT 1
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 1
47961: NEG
47962: PUSH
47963: LD_INT 0
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 1
47972: NEG
47973: PUSH
47974: LD_INT 1
47976: NEG
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 1
47984: NEG
47985: PUSH
47986: LD_INT 2
47988: NEG
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 0
47996: PUSH
47997: LD_INT 2
47999: NEG
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 1
48007: PUSH
48008: LD_INT 1
48010: NEG
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 1
48018: PUSH
48019: LD_INT 2
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 0
48028: PUSH
48029: LD_INT 2
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 1
48038: NEG
48039: PUSH
48040: LD_INT 1
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 1
48049: NEG
48050: PUSH
48051: LD_INT 3
48053: NEG
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 0
48061: PUSH
48062: LD_INT 3
48064: NEG
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 1
48072: PUSH
48073: LD_INT 2
48075: NEG
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48099: LD_ADDR_VAR 0 15
48103: PUSH
48104: LD_INT 0
48106: PUSH
48107: LD_INT 0
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 0
48116: PUSH
48117: LD_INT 1
48119: NEG
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 1
48127: PUSH
48128: LD_INT 0
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 1
48137: PUSH
48138: LD_INT 1
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 0
48147: PUSH
48148: LD_INT 1
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 1
48157: NEG
48158: PUSH
48159: LD_INT 0
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 1
48168: NEG
48169: PUSH
48170: LD_INT 1
48172: NEG
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 1
48180: PUSH
48181: LD_INT 1
48183: NEG
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 2
48191: PUSH
48192: LD_INT 0
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 2
48201: PUSH
48202: LD_INT 1
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 1
48211: NEG
48212: PUSH
48213: LD_INT 1
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 2
48222: NEG
48223: PUSH
48224: LD_INT 0
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 2
48233: NEG
48234: PUSH
48235: LD_INT 1
48237: NEG
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 2
48245: PUSH
48246: LD_INT 1
48248: NEG
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 3
48256: PUSH
48257: LD_INT 0
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 3
48266: PUSH
48267: LD_INT 1
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48292: LD_ADDR_VAR 0 16
48296: PUSH
48297: LD_INT 0
48299: PUSH
48300: LD_INT 0
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 0
48309: PUSH
48310: LD_INT 1
48312: NEG
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 1
48320: PUSH
48321: LD_INT 0
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 1
48330: PUSH
48331: LD_INT 1
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 0
48340: PUSH
48341: LD_INT 1
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 1
48350: NEG
48351: PUSH
48352: LD_INT 0
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 1
48361: NEG
48362: PUSH
48363: LD_INT 1
48365: NEG
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 1
48373: NEG
48374: PUSH
48375: LD_INT 2
48377: NEG
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 2
48385: PUSH
48386: LD_INT 1
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 2
48395: PUSH
48396: LD_INT 2
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 1
48405: PUSH
48406: LD_INT 2
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 2
48415: NEG
48416: PUSH
48417: LD_INT 1
48419: NEG
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 2
48427: NEG
48428: PUSH
48429: LD_INT 2
48431: NEG
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 3
48439: PUSH
48440: LD_INT 2
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 3
48449: PUSH
48450: LD_INT 3
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 2
48459: PUSH
48460: LD_INT 3
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48485: LD_ADDR_VAR 0 17
48489: PUSH
48490: LD_INT 0
48492: PUSH
48493: LD_INT 0
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 0
48502: PUSH
48503: LD_INT 1
48505: NEG
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 1
48513: PUSH
48514: LD_INT 0
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 1
48523: PUSH
48524: LD_INT 1
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 0
48533: PUSH
48534: LD_INT 1
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 1
48543: NEG
48544: PUSH
48545: LD_INT 0
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 1
48554: NEG
48555: PUSH
48556: LD_INT 1
48558: NEG
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 1
48566: NEG
48567: PUSH
48568: LD_INT 2
48570: NEG
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 0
48578: PUSH
48579: LD_INT 2
48581: NEG
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 1
48589: PUSH
48590: LD_INT 1
48592: NEG
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 2
48600: PUSH
48601: LD_INT 0
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 2
48610: PUSH
48611: LD_INT 1
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 2
48620: PUSH
48621: LD_INT 2
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 1
48630: PUSH
48631: LD_INT 2
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 0
48640: PUSH
48641: LD_INT 2
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 1
48650: NEG
48651: PUSH
48652: LD_INT 1
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 2
48661: NEG
48662: PUSH
48663: LD_INT 0
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 2
48672: NEG
48673: PUSH
48674: LD_INT 1
48676: NEG
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 2
48684: NEG
48685: PUSH
48686: LD_INT 2
48688: NEG
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48715: LD_ADDR_VAR 0 18
48719: PUSH
48720: LD_INT 0
48722: PUSH
48723: LD_INT 0
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 0
48732: PUSH
48733: LD_INT 1
48735: NEG
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 1
48743: PUSH
48744: LD_INT 0
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 1
48753: PUSH
48754: LD_INT 1
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 0
48763: PUSH
48764: LD_INT 1
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 1
48773: NEG
48774: PUSH
48775: LD_INT 0
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 1
48784: NEG
48785: PUSH
48786: LD_INT 1
48788: NEG
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 1
48796: NEG
48797: PUSH
48798: LD_INT 2
48800: NEG
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 0
48808: PUSH
48809: LD_INT 2
48811: NEG
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 1
48819: PUSH
48820: LD_INT 1
48822: NEG
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 2
48830: PUSH
48831: LD_INT 0
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 2
48840: PUSH
48841: LD_INT 1
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 2
48850: PUSH
48851: LD_INT 2
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: LD_INT 1
48860: PUSH
48861: LD_INT 2
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 0
48870: PUSH
48871: LD_INT 2
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 1
48880: NEG
48881: PUSH
48882: LD_INT 1
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 2
48891: NEG
48892: PUSH
48893: LD_INT 0
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 2
48902: NEG
48903: PUSH
48904: LD_INT 1
48906: NEG
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 2
48914: NEG
48915: PUSH
48916: LD_INT 2
48918: NEG
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48945: LD_ADDR_VAR 0 19
48949: PUSH
48950: LD_INT 0
48952: PUSH
48953: LD_INT 0
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 0
48962: PUSH
48963: LD_INT 1
48965: NEG
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 1
48973: PUSH
48974: LD_INT 0
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 1
48983: PUSH
48984: LD_INT 1
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 0
48993: PUSH
48994: LD_INT 1
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 1
49003: NEG
49004: PUSH
49005: LD_INT 0
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 1
49014: NEG
49015: PUSH
49016: LD_INT 1
49018: NEG
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: LD_INT 1
49026: NEG
49027: PUSH
49028: LD_INT 2
49030: NEG
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 0
49038: PUSH
49039: LD_INT 2
49041: NEG
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 1
49049: PUSH
49050: LD_INT 1
49052: NEG
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 2
49060: PUSH
49061: LD_INT 0
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 2
49070: PUSH
49071: LD_INT 1
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 2
49080: PUSH
49081: LD_INT 2
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 1
49090: PUSH
49091: LD_INT 2
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 0
49100: PUSH
49101: LD_INT 2
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 1
49110: NEG
49111: PUSH
49112: LD_INT 1
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 2
49121: NEG
49122: PUSH
49123: LD_INT 0
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 2
49132: NEG
49133: PUSH
49134: LD_INT 1
49136: NEG
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 2
49144: NEG
49145: PUSH
49146: LD_INT 2
49148: NEG
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49175: LD_ADDR_VAR 0 20
49179: PUSH
49180: LD_INT 0
49182: PUSH
49183: LD_INT 0
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 0
49192: PUSH
49193: LD_INT 1
49195: NEG
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 1
49203: PUSH
49204: LD_INT 0
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 1
49213: PUSH
49214: LD_INT 1
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 0
49223: PUSH
49224: LD_INT 1
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 1
49233: NEG
49234: PUSH
49235: LD_INT 0
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 1
49244: NEG
49245: PUSH
49246: LD_INT 1
49248: NEG
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 1
49256: NEG
49257: PUSH
49258: LD_INT 2
49260: NEG
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 0
49268: PUSH
49269: LD_INT 2
49271: NEG
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 1
49279: PUSH
49280: LD_INT 1
49282: NEG
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 2
49290: PUSH
49291: LD_INT 0
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 2
49300: PUSH
49301: LD_INT 1
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 2
49310: PUSH
49311: LD_INT 2
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 1
49320: PUSH
49321: LD_INT 2
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 0
49330: PUSH
49331: LD_INT 2
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 1
49340: NEG
49341: PUSH
49342: LD_INT 1
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 2
49351: NEG
49352: PUSH
49353: LD_INT 0
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 2
49362: NEG
49363: PUSH
49364: LD_INT 1
49366: NEG
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 2
49374: NEG
49375: PUSH
49376: LD_INT 2
49378: NEG
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49405: LD_ADDR_VAR 0 21
49409: PUSH
49410: LD_INT 0
49412: PUSH
49413: LD_INT 0
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 0
49422: PUSH
49423: LD_INT 1
49425: NEG
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 1
49433: PUSH
49434: LD_INT 0
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 1
49443: PUSH
49444: LD_INT 1
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 0
49453: PUSH
49454: LD_INT 1
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 1
49463: NEG
49464: PUSH
49465: LD_INT 0
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 1
49474: NEG
49475: PUSH
49476: LD_INT 1
49478: NEG
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 1
49486: NEG
49487: PUSH
49488: LD_INT 2
49490: NEG
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 0
49498: PUSH
49499: LD_INT 2
49501: NEG
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 1
49509: PUSH
49510: LD_INT 1
49512: NEG
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 2
49520: PUSH
49521: LD_INT 0
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 2
49530: PUSH
49531: LD_INT 1
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 2
49540: PUSH
49541: LD_INT 2
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 1
49550: PUSH
49551: LD_INT 2
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 0
49560: PUSH
49561: LD_INT 2
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 1
49570: NEG
49571: PUSH
49572: LD_INT 1
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 2
49581: NEG
49582: PUSH
49583: LD_INT 0
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 2
49592: NEG
49593: PUSH
49594: LD_INT 1
49596: NEG
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 2
49604: NEG
49605: PUSH
49606: LD_INT 2
49608: NEG
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49635: LD_ADDR_VAR 0 22
49639: PUSH
49640: LD_INT 0
49642: PUSH
49643: LD_INT 0
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 0
49652: PUSH
49653: LD_INT 1
49655: NEG
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 1
49663: PUSH
49664: LD_INT 0
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 1
49673: PUSH
49674: LD_INT 1
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 0
49683: PUSH
49684: LD_INT 1
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 1
49693: NEG
49694: PUSH
49695: LD_INT 0
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 1
49704: NEG
49705: PUSH
49706: LD_INT 1
49708: NEG
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 1
49716: NEG
49717: PUSH
49718: LD_INT 2
49720: NEG
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 0
49728: PUSH
49729: LD_INT 2
49731: NEG
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 1
49739: PUSH
49740: LD_INT 1
49742: NEG
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 2
49750: PUSH
49751: LD_INT 0
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 2
49760: PUSH
49761: LD_INT 1
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 2
49770: PUSH
49771: LD_INT 2
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 1
49780: PUSH
49781: LD_INT 2
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 0
49790: PUSH
49791: LD_INT 2
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 1
49800: NEG
49801: PUSH
49802: LD_INT 1
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 2
49811: NEG
49812: PUSH
49813: LD_INT 0
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 2
49822: NEG
49823: PUSH
49824: LD_INT 1
49826: NEG
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 2
49834: NEG
49835: PUSH
49836: LD_INT 2
49838: NEG
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49865: LD_ADDR_VAR 0 23
49869: PUSH
49870: LD_INT 0
49872: PUSH
49873: LD_INT 0
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 0
49882: PUSH
49883: LD_INT 1
49885: NEG
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 1
49893: PUSH
49894: LD_INT 0
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 1
49903: PUSH
49904: LD_INT 1
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 0
49913: PUSH
49914: LD_INT 1
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 1
49923: NEG
49924: PUSH
49925: LD_INT 0
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 1
49934: NEG
49935: PUSH
49936: LD_INT 1
49938: NEG
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 1
49946: NEG
49947: PUSH
49948: LD_INT 2
49950: NEG
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 0
49958: PUSH
49959: LD_INT 2
49961: NEG
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 1
49969: PUSH
49970: LD_INT 1
49972: NEG
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 2
49980: PUSH
49981: LD_INT 0
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 2
49990: PUSH
49991: LD_INT 1
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 2
50000: PUSH
50001: LD_INT 2
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 1
50010: PUSH
50011: LD_INT 2
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 0
50020: PUSH
50021: LD_INT 2
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 1
50030: NEG
50031: PUSH
50032: LD_INT 1
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 2
50041: NEG
50042: PUSH
50043: LD_INT 0
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 2
50052: NEG
50053: PUSH
50054: LD_INT 1
50056: NEG
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 2
50064: NEG
50065: PUSH
50066: LD_INT 2
50068: NEG
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 2
50076: NEG
50077: PUSH
50078: LD_INT 3
50080: NEG
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 1
50088: NEG
50089: PUSH
50090: LD_INT 3
50092: NEG
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 1
50100: PUSH
50101: LD_INT 2
50103: NEG
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 2
50111: PUSH
50112: LD_INT 1
50114: NEG
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
50145: LD_ADDR_VAR 0 24
50149: PUSH
50150: LD_INT 0
50152: PUSH
50153: LD_INT 0
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 0
50162: PUSH
50163: LD_INT 1
50165: NEG
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 1
50173: PUSH
50174: LD_INT 0
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 1
50183: PUSH
50184: LD_INT 1
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 0
50193: PUSH
50194: LD_INT 1
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 1
50203: NEG
50204: PUSH
50205: LD_INT 0
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 1
50214: NEG
50215: PUSH
50216: LD_INT 1
50218: NEG
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 1
50226: NEG
50227: PUSH
50228: LD_INT 2
50230: NEG
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 0
50238: PUSH
50239: LD_INT 2
50241: NEG
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 1
50249: PUSH
50250: LD_INT 1
50252: NEG
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 2
50260: PUSH
50261: LD_INT 0
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 2
50270: PUSH
50271: LD_INT 1
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 2
50280: PUSH
50281: LD_INT 2
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 1
50290: PUSH
50291: LD_INT 2
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 0
50300: PUSH
50301: LD_INT 2
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 1
50310: NEG
50311: PUSH
50312: LD_INT 1
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 2
50321: NEG
50322: PUSH
50323: LD_INT 0
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 2
50332: NEG
50333: PUSH
50334: LD_INT 1
50336: NEG
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 2
50344: NEG
50345: PUSH
50346: LD_INT 2
50348: NEG
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 1
50356: PUSH
50357: LD_INT 2
50359: NEG
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 2
50367: PUSH
50368: LD_INT 1
50370: NEG
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 3
50378: PUSH
50379: LD_INT 1
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 3
50388: PUSH
50389: LD_INT 2
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
50421: LD_ADDR_VAR 0 25
50425: PUSH
50426: LD_INT 0
50428: PUSH
50429: LD_INT 0
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 0
50438: PUSH
50439: LD_INT 1
50441: NEG
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 1
50449: PUSH
50450: LD_INT 0
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 1
50459: PUSH
50460: LD_INT 1
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 0
50469: PUSH
50470: LD_INT 1
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 1
50479: NEG
50480: PUSH
50481: LD_INT 0
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 1
50490: NEG
50491: PUSH
50492: LD_INT 1
50494: NEG
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 1
50502: NEG
50503: PUSH
50504: LD_INT 2
50506: NEG
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 0
50514: PUSH
50515: LD_INT 2
50517: NEG
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 1
50525: PUSH
50526: LD_INT 1
50528: NEG
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 2
50536: PUSH
50537: LD_INT 0
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 2
50546: PUSH
50547: LD_INT 1
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 2
50556: PUSH
50557: LD_INT 2
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 1
50566: PUSH
50567: LD_INT 2
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 0
50576: PUSH
50577: LD_INT 2
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 1
50586: NEG
50587: PUSH
50588: LD_INT 1
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 2
50597: NEG
50598: PUSH
50599: LD_INT 0
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 2
50608: NEG
50609: PUSH
50610: LD_INT 1
50612: NEG
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 2
50620: NEG
50621: PUSH
50622: LD_INT 2
50624: NEG
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 3
50632: PUSH
50633: LD_INT 1
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 3
50642: PUSH
50643: LD_INT 2
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 2
50652: PUSH
50653: LD_INT 3
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 1
50662: PUSH
50663: LD_INT 3
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50695: LD_ADDR_VAR 0 26
50699: PUSH
50700: LD_INT 0
50702: PUSH
50703: LD_INT 0
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 0
50712: PUSH
50713: LD_INT 1
50715: NEG
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 1
50723: PUSH
50724: LD_INT 0
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 1
50733: PUSH
50734: LD_INT 1
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 0
50743: PUSH
50744: LD_INT 1
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 1
50753: NEG
50754: PUSH
50755: LD_INT 0
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 1
50764: NEG
50765: PUSH
50766: LD_INT 1
50768: NEG
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 1
50776: NEG
50777: PUSH
50778: LD_INT 2
50780: NEG
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 0
50788: PUSH
50789: LD_INT 2
50791: NEG
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 1
50799: PUSH
50800: LD_INT 1
50802: NEG
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 2
50810: PUSH
50811: LD_INT 0
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 2
50820: PUSH
50821: LD_INT 1
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 2
50830: PUSH
50831: LD_INT 2
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 1
50840: PUSH
50841: LD_INT 2
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 0
50850: PUSH
50851: LD_INT 2
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 1
50860: NEG
50861: PUSH
50862: LD_INT 1
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 2
50871: NEG
50872: PUSH
50873: LD_INT 0
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 2
50882: NEG
50883: PUSH
50884: LD_INT 1
50886: NEG
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 2
50894: NEG
50895: PUSH
50896: LD_INT 2
50898: NEG
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 2
50906: PUSH
50907: LD_INT 3
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 1
50916: PUSH
50917: LD_INT 3
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 1
50926: NEG
50927: PUSH
50928: LD_INT 2
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 2
50937: NEG
50938: PUSH
50939: LD_INT 1
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50971: LD_ADDR_VAR 0 27
50975: PUSH
50976: LD_INT 0
50978: PUSH
50979: LD_INT 0
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 0
50988: PUSH
50989: LD_INT 1
50991: NEG
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 1
50999: PUSH
51000: LD_INT 0
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 1
51009: PUSH
51010: LD_INT 1
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 0
51019: PUSH
51020: LD_INT 1
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 1
51029: NEG
51030: PUSH
51031: LD_INT 0
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 1
51040: NEG
51041: PUSH
51042: LD_INT 1
51044: NEG
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 1
51052: NEG
51053: PUSH
51054: LD_INT 2
51056: NEG
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 0
51064: PUSH
51065: LD_INT 2
51067: NEG
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 1
51075: PUSH
51076: LD_INT 1
51078: NEG
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 2
51086: PUSH
51087: LD_INT 0
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 2
51096: PUSH
51097: LD_INT 1
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 2
51106: PUSH
51107: LD_INT 2
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 1
51116: PUSH
51117: LD_INT 2
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 0
51126: PUSH
51127: LD_INT 2
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 1
51136: NEG
51137: PUSH
51138: LD_INT 1
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 2
51147: NEG
51148: PUSH
51149: LD_INT 0
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 2
51158: NEG
51159: PUSH
51160: LD_INT 1
51162: NEG
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 2
51170: NEG
51171: PUSH
51172: LD_INT 2
51174: NEG
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 1
51182: NEG
51183: PUSH
51184: LD_INT 2
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 2
51193: NEG
51194: PUSH
51195: LD_INT 1
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 3
51204: NEG
51205: PUSH
51206: LD_INT 1
51208: NEG
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 3
51216: NEG
51217: PUSH
51218: LD_INT 2
51220: NEG
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51251: LD_ADDR_VAR 0 28
51255: PUSH
51256: LD_INT 0
51258: PUSH
51259: LD_INT 0
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 0
51268: PUSH
51269: LD_INT 1
51271: NEG
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 1
51279: PUSH
51280: LD_INT 0
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 1
51289: PUSH
51290: LD_INT 1
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 0
51299: PUSH
51300: LD_INT 1
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 1
51309: NEG
51310: PUSH
51311: LD_INT 0
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 1
51320: NEG
51321: PUSH
51322: LD_INT 1
51324: NEG
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 1
51332: NEG
51333: PUSH
51334: LD_INT 2
51336: NEG
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 0
51344: PUSH
51345: LD_INT 2
51347: NEG
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 1
51355: PUSH
51356: LD_INT 1
51358: NEG
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 2
51366: PUSH
51367: LD_INT 0
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 2
51376: PUSH
51377: LD_INT 1
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 2
51386: PUSH
51387: LD_INT 2
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 1
51396: PUSH
51397: LD_INT 2
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 0
51406: PUSH
51407: LD_INT 2
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 1
51416: NEG
51417: PUSH
51418: LD_INT 1
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 2
51427: NEG
51428: PUSH
51429: LD_INT 0
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 2
51438: NEG
51439: PUSH
51440: LD_INT 1
51442: NEG
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 2
51450: NEG
51451: PUSH
51452: LD_INT 2
51454: NEG
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 2
51462: NEG
51463: PUSH
51464: LD_INT 3
51466: NEG
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 1
51474: NEG
51475: PUSH
51476: LD_INT 3
51478: NEG
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 3
51486: NEG
51487: PUSH
51488: LD_INT 1
51490: NEG
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 3
51498: NEG
51499: PUSH
51500: LD_INT 2
51502: NEG
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51533: LD_ADDR_VAR 0 29
51537: PUSH
51538: LD_INT 0
51540: PUSH
51541: LD_INT 0
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 0
51550: PUSH
51551: LD_INT 1
51553: NEG
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 1
51561: PUSH
51562: LD_INT 0
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 1
51571: PUSH
51572: LD_INT 1
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: LD_INT 1
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 1
51591: NEG
51592: PUSH
51593: LD_INT 0
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 1
51602: NEG
51603: PUSH
51604: LD_INT 1
51606: NEG
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 1
51614: NEG
51615: PUSH
51616: LD_INT 2
51618: NEG
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 0
51626: PUSH
51627: LD_INT 2
51629: NEG
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 1
51637: PUSH
51638: LD_INT 1
51640: NEG
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 2
51648: PUSH
51649: LD_INT 0
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 2
51658: PUSH
51659: LD_INT 1
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 1
51668: PUSH
51669: LD_INT 2
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 0
51678: PUSH
51679: LD_INT 2
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 1
51688: NEG
51689: PUSH
51690: LD_INT 1
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 2
51699: NEG
51700: PUSH
51701: LD_INT 1
51703: NEG
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 2
51711: NEG
51712: PUSH
51713: LD_INT 2
51715: NEG
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 2
51723: NEG
51724: PUSH
51725: LD_INT 3
51727: NEG
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 2
51735: PUSH
51736: LD_INT 1
51738: NEG
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 3
51746: PUSH
51747: LD_INT 1
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 1
51756: PUSH
51757: LD_INT 3
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 1
51766: NEG
51767: PUSH
51768: LD_INT 2
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 3
51777: NEG
51778: PUSH
51779: LD_INT 2
51781: NEG
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51812: LD_ADDR_VAR 0 30
51816: PUSH
51817: LD_INT 0
51819: PUSH
51820: LD_INT 0
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 0
51829: PUSH
51830: LD_INT 1
51832: NEG
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 1
51840: PUSH
51841: LD_INT 0
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 1
51850: PUSH
51851: LD_INT 1
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 0
51860: PUSH
51861: LD_INT 1
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 1
51870: NEG
51871: PUSH
51872: LD_INT 0
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 1
51881: NEG
51882: PUSH
51883: LD_INT 1
51885: NEG
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 1
51893: NEG
51894: PUSH
51895: LD_INT 2
51897: NEG
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 0
51905: PUSH
51906: LD_INT 2
51908: NEG
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 1
51916: PUSH
51917: LD_INT 1
51919: NEG
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 2
51927: PUSH
51928: LD_INT 0
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 2
51937: PUSH
51938: LD_INT 1
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 2
51947: PUSH
51948: LD_INT 2
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 1
51957: PUSH
51958: LD_INT 2
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 1
51967: NEG
51968: PUSH
51969: LD_INT 1
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 2
51978: NEG
51979: PUSH
51980: LD_INT 0
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 2
51989: NEG
51990: PUSH
51991: LD_INT 1
51993: NEG
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 1
52001: NEG
52002: PUSH
52003: LD_INT 3
52005: NEG
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 1
52013: PUSH
52014: LD_INT 2
52016: NEG
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 3
52024: PUSH
52025: LD_INT 2
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 2
52034: PUSH
52035: LD_INT 3
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 2
52044: NEG
52045: PUSH
52046: LD_INT 1
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 3
52055: NEG
52056: PUSH
52057: LD_INT 1
52059: NEG
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52090: LD_ADDR_VAR 0 31
52094: PUSH
52095: LD_INT 0
52097: PUSH
52098: LD_INT 0
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 0
52107: PUSH
52108: LD_INT 1
52110: NEG
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 1
52118: PUSH
52119: LD_INT 0
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 1
52128: PUSH
52129: LD_INT 1
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 0
52138: PUSH
52139: LD_INT 1
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 1
52148: NEG
52149: PUSH
52150: LD_INT 0
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 1
52159: NEG
52160: PUSH
52161: LD_INT 1
52163: NEG
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 1
52171: NEG
52172: PUSH
52173: LD_INT 2
52175: NEG
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 1
52183: PUSH
52184: LD_INT 1
52186: NEG
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 2
52194: PUSH
52195: LD_INT 0
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 2
52204: PUSH
52205: LD_INT 1
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 2
52214: PUSH
52215: LD_INT 2
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 1
52224: PUSH
52225: LD_INT 2
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 0
52234: PUSH
52235: LD_INT 2
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 1
52244: NEG
52245: PUSH
52246: LD_INT 1
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 2
52255: NEG
52256: PUSH
52257: LD_INT 1
52259: NEG
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 2
52267: NEG
52268: PUSH
52269: LD_INT 2
52271: NEG
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 2
52279: NEG
52280: PUSH
52281: LD_INT 3
52283: NEG
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 2
52291: PUSH
52292: LD_INT 1
52294: NEG
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 3
52302: PUSH
52303: LD_INT 1
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 1
52312: PUSH
52313: LD_INT 3
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 1
52322: NEG
52323: PUSH
52324: LD_INT 2
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 3
52333: NEG
52334: PUSH
52335: LD_INT 2
52337: NEG
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52368: LD_ADDR_VAR 0 32
52372: PUSH
52373: LD_INT 0
52375: PUSH
52376: LD_INT 0
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 0
52385: PUSH
52386: LD_INT 1
52388: NEG
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 1
52396: PUSH
52397: LD_INT 0
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 1
52406: PUSH
52407: LD_INT 1
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 0
52416: PUSH
52417: LD_INT 1
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 1
52426: NEG
52427: PUSH
52428: LD_INT 0
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 1
52437: NEG
52438: PUSH
52439: LD_INT 1
52441: NEG
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: LD_INT 1
52449: NEG
52450: PUSH
52451: LD_INT 2
52453: NEG
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 0
52461: PUSH
52462: LD_INT 2
52464: NEG
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 1
52472: PUSH
52473: LD_INT 1
52475: NEG
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 2
52483: PUSH
52484: LD_INT 1
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 2
52493: PUSH
52494: LD_INT 2
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 1
52503: PUSH
52504: LD_INT 2
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 0
52513: PUSH
52514: LD_INT 2
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 1
52523: NEG
52524: PUSH
52525: LD_INT 1
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 2
52534: NEG
52535: PUSH
52536: LD_INT 0
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 2
52545: NEG
52546: PUSH
52547: LD_INT 1
52549: NEG
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 1
52557: NEG
52558: PUSH
52559: LD_INT 3
52561: NEG
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 1
52569: PUSH
52570: LD_INT 2
52572: NEG
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 3
52580: PUSH
52581: LD_INT 2
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 2
52590: PUSH
52591: LD_INT 3
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 2
52600: NEG
52601: PUSH
52602: LD_INT 1
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 3
52611: NEG
52612: PUSH
52613: LD_INT 1
52615: NEG
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52646: LD_ADDR_VAR 0 33
52650: PUSH
52651: LD_INT 0
52653: PUSH
52654: LD_INT 0
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 0
52663: PUSH
52664: LD_INT 1
52666: NEG
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 1
52674: PUSH
52675: LD_INT 0
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 1
52684: PUSH
52685: LD_INT 1
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 0
52694: PUSH
52695: LD_INT 1
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 1
52704: NEG
52705: PUSH
52706: LD_INT 0
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 1
52715: NEG
52716: PUSH
52717: LD_INT 1
52719: NEG
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 1
52727: NEG
52728: PUSH
52729: LD_INT 2
52731: NEG
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 1
52739: PUSH
52740: LD_INT 1
52742: NEG
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 2
52750: PUSH
52751: LD_INT 0
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 2
52760: PUSH
52761: LD_INT 1
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 1
52770: PUSH
52771: LD_INT 2
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 0
52780: PUSH
52781: LD_INT 2
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 1
52790: NEG
52791: PUSH
52792: LD_INT 1
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 2
52801: NEG
52802: PUSH
52803: LD_INT 0
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 2
52812: NEG
52813: PUSH
52814: LD_INT 1
52816: NEG
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 2
52824: NEG
52825: PUSH
52826: LD_INT 2
52828: NEG
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 2
52836: NEG
52837: PUSH
52838: LD_INT 3
52840: NEG
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 2
52848: PUSH
52849: LD_INT 1
52851: NEG
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 3
52859: PUSH
52860: LD_INT 1
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 1
52869: PUSH
52870: LD_INT 3
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 1
52879: NEG
52880: PUSH
52881: LD_INT 2
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 3
52890: NEG
52891: PUSH
52892: LD_INT 2
52894: NEG
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52925: LD_ADDR_VAR 0 34
52929: PUSH
52930: LD_INT 0
52932: PUSH
52933: LD_INT 0
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 0
52942: PUSH
52943: LD_INT 1
52945: NEG
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 1
52953: PUSH
52954: LD_INT 0
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 1
52963: PUSH
52964: LD_INT 1
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 0
52973: PUSH
52974: LD_INT 1
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 1
52983: NEG
52984: PUSH
52985: LD_INT 0
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 1
52994: NEG
52995: PUSH
52996: LD_INT 1
52998: NEG
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 1
53006: NEG
53007: PUSH
53008: LD_INT 2
53010: NEG
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 0
53018: PUSH
53019: LD_INT 2
53021: NEG
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 1
53029: PUSH
53030: LD_INT 1
53032: NEG
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 2
53040: PUSH
53041: LD_INT 1
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 2
53050: PUSH
53051: LD_INT 2
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 1
53060: PUSH
53061: LD_INT 2
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 1
53070: NEG
53071: PUSH
53072: LD_INT 1
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 2
53081: NEG
53082: PUSH
53083: LD_INT 0
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 2
53092: NEG
53093: PUSH
53094: LD_INT 1
53096: NEG
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 2
53104: NEG
53105: PUSH
53106: LD_INT 2
53108: NEG
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 1
53116: NEG
53117: PUSH
53118: LD_INT 3
53120: NEG
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 1
53128: PUSH
53129: LD_INT 2
53131: NEG
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 3
53139: PUSH
53140: LD_INT 2
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 2
53149: PUSH
53150: LD_INT 3
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 2
53159: NEG
53160: PUSH
53161: LD_INT 1
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 3
53170: NEG
53171: PUSH
53172: LD_INT 1
53174: NEG
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53205: LD_ADDR_VAR 0 35
53209: PUSH
53210: LD_INT 0
53212: PUSH
53213: LD_INT 0
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 0
53222: PUSH
53223: LD_INT 1
53225: NEG
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 1
53233: PUSH
53234: LD_INT 0
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 1
53243: PUSH
53244: LD_INT 1
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 0
53253: PUSH
53254: LD_INT 1
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 1
53263: NEG
53264: PUSH
53265: LD_INT 0
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 1
53274: NEG
53275: PUSH
53276: LD_INT 1
53278: NEG
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 2
53286: PUSH
53287: LD_INT 1
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 2
53296: NEG
53297: PUSH
53298: LD_INT 1
53300: NEG
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53317: LD_ADDR_VAR 0 36
53321: PUSH
53322: LD_INT 0
53324: PUSH
53325: LD_INT 0
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 0
53334: PUSH
53335: LD_INT 1
53337: NEG
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 1
53345: PUSH
53346: LD_INT 0
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 1
53355: PUSH
53356: LD_INT 1
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 0
53365: PUSH
53366: LD_INT 1
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 1
53375: NEG
53376: PUSH
53377: LD_INT 0
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 1
53386: NEG
53387: PUSH
53388: LD_INT 1
53390: NEG
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 1
53398: NEG
53399: PUSH
53400: LD_INT 2
53402: NEG
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 1
53410: PUSH
53411: LD_INT 2
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53429: LD_ADDR_VAR 0 37
53433: PUSH
53434: LD_INT 0
53436: PUSH
53437: LD_INT 0
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 0
53446: PUSH
53447: LD_INT 1
53449: NEG
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 1
53457: PUSH
53458: LD_INT 0
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 1
53467: PUSH
53468: LD_INT 1
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 0
53477: PUSH
53478: LD_INT 1
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 1
53487: NEG
53488: PUSH
53489: LD_INT 0
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 1
53498: NEG
53499: PUSH
53500: LD_INT 1
53502: NEG
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 1
53510: PUSH
53511: LD_INT 1
53513: NEG
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 1
53521: NEG
53522: PUSH
53523: LD_INT 1
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53541: LD_ADDR_VAR 0 38
53545: PUSH
53546: LD_INT 0
53548: PUSH
53549: LD_INT 0
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 0
53558: PUSH
53559: LD_INT 1
53561: NEG
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 1
53569: PUSH
53570: LD_INT 0
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 1
53579: PUSH
53580: LD_INT 1
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 0
53589: PUSH
53590: LD_INT 1
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 1
53599: NEG
53600: PUSH
53601: LD_INT 0
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 1
53610: NEG
53611: PUSH
53612: LD_INT 1
53614: NEG
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 2
53622: PUSH
53623: LD_INT 1
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 2
53632: NEG
53633: PUSH
53634: LD_INT 1
53636: NEG
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53653: LD_ADDR_VAR 0 39
53657: PUSH
53658: LD_INT 0
53660: PUSH
53661: LD_INT 0
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 0
53670: PUSH
53671: LD_INT 1
53673: NEG
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 1
53681: PUSH
53682: LD_INT 0
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 1
53691: PUSH
53692: LD_INT 1
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 0
53701: PUSH
53702: LD_INT 1
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 1
53711: NEG
53712: PUSH
53713: LD_INT 0
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 1
53722: NEG
53723: PUSH
53724: LD_INT 1
53726: NEG
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 1
53734: NEG
53735: PUSH
53736: LD_INT 2
53738: NEG
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 1
53746: PUSH
53747: LD_INT 2
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53765: LD_ADDR_VAR 0 40
53769: PUSH
53770: LD_INT 0
53772: PUSH
53773: LD_INT 0
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 0
53782: PUSH
53783: LD_INT 1
53785: NEG
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 1
53793: PUSH
53794: LD_INT 0
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 1
53803: PUSH
53804: LD_INT 1
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 0
53813: PUSH
53814: LD_INT 1
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 1
53823: NEG
53824: PUSH
53825: LD_INT 0
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 1
53834: NEG
53835: PUSH
53836: LD_INT 1
53838: NEG
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 1
53846: PUSH
53847: LD_INT 1
53849: NEG
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 1
53857: NEG
53858: PUSH
53859: LD_INT 1
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53877: LD_ADDR_VAR 0 41
53881: PUSH
53882: LD_INT 0
53884: PUSH
53885: LD_INT 0
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 0
53894: PUSH
53895: LD_INT 1
53897: NEG
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 1
53905: PUSH
53906: LD_INT 0
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 1
53915: PUSH
53916: LD_INT 1
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 0
53925: PUSH
53926: LD_INT 1
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 1
53935: NEG
53936: PUSH
53937: LD_INT 0
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 1
53946: NEG
53947: PUSH
53948: LD_INT 1
53950: NEG
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 1
53958: NEG
53959: PUSH
53960: LD_INT 2
53962: NEG
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 1
53970: PUSH
53971: LD_INT 1
53973: NEG
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 2
53981: PUSH
53982: LD_INT 0
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 2
53991: PUSH
53992: LD_INT 1
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 2
54001: PUSH
54002: LD_INT 2
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 1
54011: PUSH
54012: LD_INT 2
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 1
54021: NEG
54022: PUSH
54023: LD_INT 1
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 2
54032: NEG
54033: PUSH
54034: LD_INT 0
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 2
54043: NEG
54044: PUSH
54045: LD_INT 1
54047: NEG
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 2
54055: NEG
54056: PUSH
54057: LD_INT 2
54059: NEG
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 2
54067: NEG
54068: PUSH
54069: LD_INT 3
54071: NEG
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 2
54079: PUSH
54080: LD_INT 1
54082: NEG
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 3
54090: PUSH
54091: LD_INT 0
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 3
54100: PUSH
54101: LD_INT 1
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 3
54110: PUSH
54111: LD_INT 2
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 3
54120: PUSH
54121: LD_INT 3
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 2
54130: PUSH
54131: LD_INT 3
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 2
54140: NEG
54141: PUSH
54142: LD_INT 1
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 3
54151: NEG
54152: PUSH
54153: LD_INT 0
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 3
54162: NEG
54163: PUSH
54164: LD_INT 1
54166: NEG
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 3
54174: NEG
54175: PUSH
54176: LD_INT 2
54178: NEG
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 3
54186: NEG
54187: PUSH
54188: LD_INT 3
54190: NEG
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54227: LD_ADDR_VAR 0 42
54231: PUSH
54232: LD_INT 0
54234: PUSH
54235: LD_INT 0
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 0
54244: PUSH
54245: LD_INT 1
54247: NEG
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 1
54255: PUSH
54256: LD_INT 0
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 1
54265: PUSH
54266: LD_INT 1
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 0
54275: PUSH
54276: LD_INT 1
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 1
54285: NEG
54286: PUSH
54287: LD_INT 0
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 1
54296: NEG
54297: PUSH
54298: LD_INT 1
54300: NEG
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 1
54308: NEG
54309: PUSH
54310: LD_INT 2
54312: NEG
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 0
54320: PUSH
54321: LD_INT 2
54323: NEG
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 1
54331: PUSH
54332: LD_INT 1
54334: NEG
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 2
54342: PUSH
54343: LD_INT 1
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 2
54352: PUSH
54353: LD_INT 2
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 1
54362: PUSH
54363: LD_INT 2
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 0
54372: PUSH
54373: LD_INT 2
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 1
54382: NEG
54383: PUSH
54384: LD_INT 1
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 2
54393: NEG
54394: PUSH
54395: LD_INT 1
54397: NEG
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 2
54405: NEG
54406: PUSH
54407: LD_INT 2
54409: NEG
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 2
54417: NEG
54418: PUSH
54419: LD_INT 3
54421: NEG
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 1
54429: NEG
54430: PUSH
54431: LD_INT 3
54433: NEG
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 0
54441: PUSH
54442: LD_INT 3
54444: NEG
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 1
54452: PUSH
54453: LD_INT 2
54455: NEG
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 3
54463: PUSH
54464: LD_INT 2
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 3
54473: PUSH
54474: LD_INT 3
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 2
54483: PUSH
54484: LD_INT 3
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 1
54493: PUSH
54494: LD_INT 3
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 0
54503: PUSH
54504: LD_INT 3
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 1
54513: NEG
54514: PUSH
54515: LD_INT 2
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 3
54524: NEG
54525: PUSH
54526: LD_INT 2
54528: NEG
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 3
54536: NEG
54537: PUSH
54538: LD_INT 3
54540: NEG
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54577: LD_ADDR_VAR 0 43
54581: PUSH
54582: LD_INT 0
54584: PUSH
54585: LD_INT 0
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 0
54594: PUSH
54595: LD_INT 1
54597: NEG
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 1
54605: PUSH
54606: LD_INT 0
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 1
54615: PUSH
54616: LD_INT 1
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 0
54625: PUSH
54626: LD_INT 1
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 1
54635: NEG
54636: PUSH
54637: LD_INT 0
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 1
54646: NEG
54647: PUSH
54648: LD_INT 1
54650: NEG
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 1
54658: NEG
54659: PUSH
54660: LD_INT 2
54662: NEG
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 0
54670: PUSH
54671: LD_INT 2
54673: NEG
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 1
54681: PUSH
54682: LD_INT 1
54684: NEG
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 2
54692: PUSH
54693: LD_INT 0
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 2
54702: PUSH
54703: LD_INT 1
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 1
54712: PUSH
54713: LD_INT 2
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 0
54722: PUSH
54723: LD_INT 2
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 1
54732: NEG
54733: PUSH
54734: LD_INT 1
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 2
54743: NEG
54744: PUSH
54745: LD_INT 0
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 2
54754: NEG
54755: PUSH
54756: LD_INT 1
54758: NEG
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 1
54766: NEG
54767: PUSH
54768: LD_INT 3
54770: NEG
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 0
54778: PUSH
54779: LD_INT 3
54781: NEG
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 1
54789: PUSH
54790: LD_INT 2
54792: NEG
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 2
54800: PUSH
54801: LD_INT 1
54803: NEG
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 3
54811: PUSH
54812: LD_INT 0
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 3
54821: PUSH
54822: LD_INT 1
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 1
54831: PUSH
54832: LD_INT 3
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 0
54841: PUSH
54842: LD_INT 3
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 1
54851: NEG
54852: PUSH
54853: LD_INT 2
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 2
54862: NEG
54863: PUSH
54864: LD_INT 1
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 3
54873: NEG
54874: PUSH
54875: LD_INT 0
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 3
54884: NEG
54885: PUSH
54886: LD_INT 1
54888: NEG
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54925: LD_ADDR_VAR 0 44
54929: PUSH
54930: LD_INT 0
54932: PUSH
54933: LD_INT 0
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 0
54942: PUSH
54943: LD_INT 1
54945: NEG
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 1
54953: PUSH
54954: LD_INT 0
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 1
54963: PUSH
54964: LD_INT 1
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: LD_INT 1
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 1
54983: NEG
54984: PUSH
54985: LD_INT 0
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 1
54994: NEG
54995: PUSH
54996: LD_INT 1
54998: NEG
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 1
55006: NEG
55007: PUSH
55008: LD_INT 2
55010: NEG
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 1
55018: PUSH
55019: LD_INT 1
55021: NEG
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 2
55029: PUSH
55030: LD_INT 0
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 2
55039: PUSH
55040: LD_INT 1
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 2
55049: PUSH
55050: LD_INT 2
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 1
55059: PUSH
55060: LD_INT 2
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 1
55069: NEG
55070: PUSH
55071: LD_INT 1
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 2
55080: NEG
55081: PUSH
55082: LD_INT 0
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 2
55091: NEG
55092: PUSH
55093: LD_INT 1
55095: NEG
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 2
55103: NEG
55104: PUSH
55105: LD_INT 2
55107: NEG
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 2
55115: NEG
55116: PUSH
55117: LD_INT 3
55119: NEG
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 2
55127: PUSH
55128: LD_INT 1
55130: NEG
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 3
55138: PUSH
55139: LD_INT 0
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 3
55148: PUSH
55149: LD_INT 1
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 3
55158: PUSH
55159: LD_INT 2
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 3
55168: PUSH
55169: LD_INT 3
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 2
55178: PUSH
55179: LD_INT 3
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 2
55188: NEG
55189: PUSH
55190: LD_INT 1
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 3
55199: NEG
55200: PUSH
55201: LD_INT 0
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 3
55210: NEG
55211: PUSH
55212: LD_INT 1
55214: NEG
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 3
55222: NEG
55223: PUSH
55224: LD_INT 2
55226: NEG
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 3
55234: NEG
55235: PUSH
55236: LD_INT 3
55238: NEG
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55275: LD_ADDR_VAR 0 45
55279: PUSH
55280: LD_INT 0
55282: PUSH
55283: LD_INT 0
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 0
55292: PUSH
55293: LD_INT 1
55295: NEG
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 1
55303: PUSH
55304: LD_INT 0
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 1
55313: PUSH
55314: LD_INT 1
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 0
55323: PUSH
55324: LD_INT 1
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 1
55333: NEG
55334: PUSH
55335: LD_INT 0
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 1
55344: NEG
55345: PUSH
55346: LD_INT 1
55348: NEG
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 1
55356: NEG
55357: PUSH
55358: LD_INT 2
55360: NEG
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 0
55368: PUSH
55369: LD_INT 2
55371: NEG
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 1
55379: PUSH
55380: LD_INT 1
55382: NEG
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 2
55390: PUSH
55391: LD_INT 1
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 2
55400: PUSH
55401: LD_INT 2
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 1
55410: PUSH
55411: LD_INT 2
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 0
55420: PUSH
55421: LD_INT 2
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 1
55430: NEG
55431: PUSH
55432: LD_INT 1
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 2
55441: NEG
55442: PUSH
55443: LD_INT 1
55445: NEG
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 2
55453: NEG
55454: PUSH
55455: LD_INT 2
55457: NEG
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 2
55465: NEG
55466: PUSH
55467: LD_INT 3
55469: NEG
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 1
55477: NEG
55478: PUSH
55479: LD_INT 3
55481: NEG
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 0
55489: PUSH
55490: LD_INT 3
55492: NEG
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 1
55500: PUSH
55501: LD_INT 2
55503: NEG
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 3
55511: PUSH
55512: LD_INT 2
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 3
55521: PUSH
55522: LD_INT 3
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 2
55531: PUSH
55532: LD_INT 3
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 1
55541: PUSH
55542: LD_INT 3
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 0
55551: PUSH
55552: LD_INT 3
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 1
55561: NEG
55562: PUSH
55563: LD_INT 2
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 3
55572: NEG
55573: PUSH
55574: LD_INT 2
55576: NEG
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 3
55584: NEG
55585: PUSH
55586: LD_INT 3
55588: NEG
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55625: LD_ADDR_VAR 0 46
55629: PUSH
55630: LD_INT 0
55632: PUSH
55633: LD_INT 0
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 0
55642: PUSH
55643: LD_INT 1
55645: NEG
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 1
55653: PUSH
55654: LD_INT 0
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 1
55663: PUSH
55664: LD_INT 1
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 0
55673: PUSH
55674: LD_INT 1
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 1
55683: NEG
55684: PUSH
55685: LD_INT 0
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 1
55694: NEG
55695: PUSH
55696: LD_INT 1
55698: NEG
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 1
55706: NEG
55707: PUSH
55708: LD_INT 2
55710: NEG
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 0
55718: PUSH
55719: LD_INT 2
55721: NEG
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 1
55729: PUSH
55730: LD_INT 1
55732: NEG
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 2
55740: PUSH
55741: LD_INT 0
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 2
55750: PUSH
55751: LD_INT 1
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 1
55760: PUSH
55761: LD_INT 2
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 0
55770: PUSH
55771: LD_INT 2
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 1
55780: NEG
55781: PUSH
55782: LD_INT 1
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 2
55791: NEG
55792: PUSH
55793: LD_INT 0
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 2
55802: NEG
55803: PUSH
55804: LD_INT 1
55806: NEG
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 1
55814: NEG
55815: PUSH
55816: LD_INT 3
55818: NEG
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 0
55826: PUSH
55827: LD_INT 3
55829: NEG
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 1
55837: PUSH
55838: LD_INT 2
55840: NEG
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 2
55848: PUSH
55849: LD_INT 1
55851: NEG
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 3
55859: PUSH
55860: LD_INT 0
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 3
55869: PUSH
55870: LD_INT 1
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 1
55879: PUSH
55880: LD_INT 3
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 0
55889: PUSH
55890: LD_INT 3
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 1
55899: NEG
55900: PUSH
55901: LD_INT 2
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 2
55910: NEG
55911: PUSH
55912: LD_INT 1
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 3
55921: NEG
55922: PUSH
55923: LD_INT 0
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 3
55932: NEG
55933: PUSH
55934: LD_INT 1
55936: NEG
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55973: LD_ADDR_VAR 0 47
55977: PUSH
55978: LD_INT 0
55980: PUSH
55981: LD_INT 0
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 0
55990: PUSH
55991: LD_INT 1
55993: NEG
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 1
56001: PUSH
56002: LD_INT 0
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 1
56011: PUSH
56012: LD_INT 1
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 0
56021: PUSH
56022: LD_INT 1
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 1
56031: NEG
56032: PUSH
56033: LD_INT 0
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 1
56042: NEG
56043: PUSH
56044: LD_INT 1
56046: NEG
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 1
56054: NEG
56055: PUSH
56056: LD_INT 2
56058: NEG
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 0
56066: PUSH
56067: LD_INT 2
56069: NEG
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 1
56077: PUSH
56078: LD_INT 1
56080: NEG
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 2
56088: NEG
56089: PUSH
56090: LD_INT 1
56092: NEG
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 2
56100: NEG
56101: PUSH
56102: LD_INT 2
56104: NEG
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56124: LD_ADDR_VAR 0 48
56128: PUSH
56129: LD_INT 0
56131: PUSH
56132: LD_INT 0
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 0
56141: PUSH
56142: LD_INT 1
56144: NEG
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 1
56152: PUSH
56153: LD_INT 0
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 1
56162: PUSH
56163: LD_INT 1
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 0
56172: PUSH
56173: LD_INT 1
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 1
56182: NEG
56183: PUSH
56184: LD_INT 0
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 1
56193: NEG
56194: PUSH
56195: LD_INT 1
56197: NEG
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 1
56205: NEG
56206: PUSH
56207: LD_INT 2
56209: NEG
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 0
56217: PUSH
56218: LD_INT 2
56220: NEG
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 1
56228: PUSH
56229: LD_INT 1
56231: NEG
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 2
56239: PUSH
56240: LD_INT 0
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 2
56249: PUSH
56250: LD_INT 1
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56271: LD_ADDR_VAR 0 49
56275: PUSH
56276: LD_INT 0
56278: PUSH
56279: LD_INT 0
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 0
56288: PUSH
56289: LD_INT 1
56291: NEG
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 1
56299: PUSH
56300: LD_INT 0
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 1
56309: PUSH
56310: LD_INT 1
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 0
56319: PUSH
56320: LD_INT 1
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 1
56329: NEG
56330: PUSH
56331: LD_INT 0
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 1
56340: NEG
56341: PUSH
56342: LD_INT 1
56344: NEG
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 1
56352: PUSH
56353: LD_INT 1
56355: NEG
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 2
56363: PUSH
56364: LD_INT 0
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 2
56373: PUSH
56374: LD_INT 1
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 2
56383: PUSH
56384: LD_INT 2
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 1
56393: PUSH
56394: LD_INT 2
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56415: LD_ADDR_VAR 0 50
56419: PUSH
56420: LD_INT 0
56422: PUSH
56423: LD_INT 0
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 0
56432: PUSH
56433: LD_INT 1
56435: NEG
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 1
56443: PUSH
56444: LD_INT 0
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 1
56453: PUSH
56454: LD_INT 1
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 0
56463: PUSH
56464: LD_INT 1
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 1
56473: NEG
56474: PUSH
56475: LD_INT 0
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 1
56484: NEG
56485: PUSH
56486: LD_INT 1
56488: NEG
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 2
56496: PUSH
56497: LD_INT 1
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 2
56506: PUSH
56507: LD_INT 2
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 1
56516: PUSH
56517: LD_INT 2
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 0
56526: PUSH
56527: LD_INT 2
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 1
56536: NEG
56537: PUSH
56538: LD_INT 1
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56559: LD_ADDR_VAR 0 51
56563: PUSH
56564: LD_INT 0
56566: PUSH
56567: LD_INT 0
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 0
56576: PUSH
56577: LD_INT 1
56579: NEG
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 1
56587: PUSH
56588: LD_INT 0
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 1
56597: PUSH
56598: LD_INT 1
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 0
56607: PUSH
56608: LD_INT 1
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 1
56617: NEG
56618: PUSH
56619: LD_INT 0
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 1
56628: NEG
56629: PUSH
56630: LD_INT 1
56632: NEG
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 1
56640: PUSH
56641: LD_INT 2
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 0
56650: PUSH
56651: LD_INT 2
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 1
56660: NEG
56661: PUSH
56662: LD_INT 1
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 2
56671: NEG
56672: PUSH
56673: LD_INT 0
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 2
56682: NEG
56683: PUSH
56684: LD_INT 1
56686: NEG
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56706: LD_ADDR_VAR 0 52
56710: PUSH
56711: LD_INT 0
56713: PUSH
56714: LD_INT 0
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 0
56723: PUSH
56724: LD_INT 1
56726: NEG
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 1
56734: PUSH
56735: LD_INT 0
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 1
56744: PUSH
56745: LD_INT 1
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 0
56754: PUSH
56755: LD_INT 1
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 1
56764: NEG
56765: PUSH
56766: LD_INT 0
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 1
56775: NEG
56776: PUSH
56777: LD_INT 1
56779: NEG
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 1
56787: NEG
56788: PUSH
56789: LD_INT 2
56791: NEG
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 1
56799: NEG
56800: PUSH
56801: LD_INT 1
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 2
56810: NEG
56811: PUSH
56812: LD_INT 0
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 2
56821: NEG
56822: PUSH
56823: LD_INT 1
56825: NEG
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 2
56833: NEG
56834: PUSH
56835: LD_INT 2
56837: NEG
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56857: LD_ADDR_VAR 0 53
56861: PUSH
56862: LD_INT 0
56864: PUSH
56865: LD_INT 0
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 0
56874: PUSH
56875: LD_INT 1
56877: NEG
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 1
56885: PUSH
56886: LD_INT 0
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 1
56895: PUSH
56896: LD_INT 1
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 0
56905: PUSH
56906: LD_INT 1
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 1
56915: NEG
56916: PUSH
56917: LD_INT 0
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 1
56926: NEG
56927: PUSH
56928: LD_INT 1
56930: NEG
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 1
56938: NEG
56939: PUSH
56940: LD_INT 2
56942: NEG
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 0
56950: PUSH
56951: LD_INT 2
56953: NEG
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 1
56961: PUSH
56962: LD_INT 1
56964: NEG
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 2
56972: PUSH
56973: LD_INT 0
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 2
56982: PUSH
56983: LD_INT 1
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 2
56992: PUSH
56993: LD_INT 2
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 1
57002: PUSH
57003: LD_INT 2
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 0
57012: PUSH
57013: LD_INT 2
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 1
57022: NEG
57023: PUSH
57024: LD_INT 1
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 2
57033: NEG
57034: PUSH
57035: LD_INT 0
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 2
57044: NEG
57045: PUSH
57046: LD_INT 1
57048: NEG
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 2
57056: NEG
57057: PUSH
57058: LD_INT 2
57060: NEG
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57087: LD_ADDR_VAR 0 54
57091: PUSH
57092: LD_INT 0
57094: PUSH
57095: LD_INT 0
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 0
57104: PUSH
57105: LD_INT 1
57107: NEG
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 1
57115: PUSH
57116: LD_INT 0
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 1
57125: PUSH
57126: LD_INT 1
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 0
57135: PUSH
57136: LD_INT 1
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 1
57145: NEG
57146: PUSH
57147: LD_INT 0
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 1
57156: NEG
57157: PUSH
57158: LD_INT 1
57160: NEG
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 1
57168: NEG
57169: PUSH
57170: LD_INT 2
57172: NEG
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 0
57180: PUSH
57181: LD_INT 2
57183: NEG
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 1
57191: PUSH
57192: LD_INT 1
57194: NEG
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 2
57202: PUSH
57203: LD_INT 0
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 2
57212: PUSH
57213: LD_INT 1
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 2
57222: PUSH
57223: LD_INT 2
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 1
57232: PUSH
57233: LD_INT 2
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 0
57242: PUSH
57243: LD_INT 2
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 1
57252: NEG
57253: PUSH
57254: LD_INT 1
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 2
57263: NEG
57264: PUSH
57265: LD_INT 0
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 2
57274: NEG
57275: PUSH
57276: LD_INT 1
57278: NEG
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 2
57286: NEG
57287: PUSH
57288: LD_INT 2
57290: NEG
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57317: LD_ADDR_VAR 0 55
57321: PUSH
57322: LD_INT 0
57324: PUSH
57325: LD_INT 0
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 0
57334: PUSH
57335: LD_INT 1
57337: NEG
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 1
57345: PUSH
57346: LD_INT 0
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 1
57355: PUSH
57356: LD_INT 1
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 0
57365: PUSH
57366: LD_INT 1
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 1
57375: NEG
57376: PUSH
57377: LD_INT 0
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 1
57386: NEG
57387: PUSH
57388: LD_INT 1
57390: NEG
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 1
57398: NEG
57399: PUSH
57400: LD_INT 2
57402: NEG
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 0
57410: PUSH
57411: LD_INT 2
57413: NEG
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 1
57421: PUSH
57422: LD_INT 1
57424: NEG
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 2
57432: PUSH
57433: LD_INT 0
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 2
57442: PUSH
57443: LD_INT 1
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 2
57452: PUSH
57453: LD_INT 2
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 1
57462: PUSH
57463: LD_INT 2
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 0
57472: PUSH
57473: LD_INT 2
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 1
57482: NEG
57483: PUSH
57484: LD_INT 1
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 2
57493: NEG
57494: PUSH
57495: LD_INT 0
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 2
57504: NEG
57505: PUSH
57506: LD_INT 1
57508: NEG
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 2
57516: NEG
57517: PUSH
57518: LD_INT 2
57520: NEG
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57547: LD_ADDR_VAR 0 56
57551: PUSH
57552: LD_INT 0
57554: PUSH
57555: LD_INT 0
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 0
57564: PUSH
57565: LD_INT 1
57567: NEG
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 1
57575: PUSH
57576: LD_INT 0
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 1
57585: PUSH
57586: LD_INT 1
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 0
57595: PUSH
57596: LD_INT 1
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 1
57605: NEG
57606: PUSH
57607: LD_INT 0
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 1
57616: NEG
57617: PUSH
57618: LD_INT 1
57620: NEG
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 1
57628: NEG
57629: PUSH
57630: LD_INT 2
57632: NEG
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 0
57640: PUSH
57641: LD_INT 2
57643: NEG
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 1
57651: PUSH
57652: LD_INT 1
57654: NEG
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 2
57662: PUSH
57663: LD_INT 0
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 2
57672: PUSH
57673: LD_INT 1
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 2
57682: PUSH
57683: LD_INT 2
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 1
57692: PUSH
57693: LD_INT 2
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 0
57702: PUSH
57703: LD_INT 2
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 1
57712: NEG
57713: PUSH
57714: LD_INT 1
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 2
57723: NEG
57724: PUSH
57725: LD_INT 0
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 2
57734: NEG
57735: PUSH
57736: LD_INT 1
57738: NEG
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 2
57746: NEG
57747: PUSH
57748: LD_INT 2
57750: NEG
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57777: LD_ADDR_VAR 0 57
57781: PUSH
57782: LD_INT 0
57784: PUSH
57785: LD_INT 0
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 0
57794: PUSH
57795: LD_INT 1
57797: NEG
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 1
57805: PUSH
57806: LD_INT 0
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 1
57815: PUSH
57816: LD_INT 1
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 0
57825: PUSH
57826: LD_INT 1
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 1
57835: NEG
57836: PUSH
57837: LD_INT 0
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 1
57846: NEG
57847: PUSH
57848: LD_INT 1
57850: NEG
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 1
57858: NEG
57859: PUSH
57860: LD_INT 2
57862: NEG
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 0
57870: PUSH
57871: LD_INT 2
57873: NEG
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 1
57881: PUSH
57882: LD_INT 1
57884: NEG
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 2
57892: PUSH
57893: LD_INT 0
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 2
57902: PUSH
57903: LD_INT 1
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 2
57912: PUSH
57913: LD_INT 2
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 1
57922: PUSH
57923: LD_INT 2
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 0
57932: PUSH
57933: LD_INT 2
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 1
57942: NEG
57943: PUSH
57944: LD_INT 1
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 2
57953: NEG
57954: PUSH
57955: LD_INT 0
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 2
57964: NEG
57965: PUSH
57966: LD_INT 1
57968: NEG
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 2
57976: NEG
57977: PUSH
57978: LD_INT 2
57980: NEG
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58007: LD_ADDR_VAR 0 58
58011: PUSH
58012: LD_INT 0
58014: PUSH
58015: LD_INT 0
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 0
58024: PUSH
58025: LD_INT 1
58027: NEG
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 1
58035: PUSH
58036: LD_INT 0
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 1
58045: PUSH
58046: LD_INT 1
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 0
58055: PUSH
58056: LD_INT 1
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 1
58065: NEG
58066: PUSH
58067: LD_INT 0
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 1
58076: NEG
58077: PUSH
58078: LD_INT 1
58080: NEG
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 1
58088: NEG
58089: PUSH
58090: LD_INT 2
58092: NEG
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 0
58100: PUSH
58101: LD_INT 2
58103: NEG
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 1
58111: PUSH
58112: LD_INT 1
58114: NEG
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 2
58122: PUSH
58123: LD_INT 0
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 2
58132: PUSH
58133: LD_INT 1
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 2
58142: PUSH
58143: LD_INT 2
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 1
58152: PUSH
58153: LD_INT 2
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 0
58162: PUSH
58163: LD_INT 2
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 1
58172: NEG
58173: PUSH
58174: LD_INT 1
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 2
58183: NEG
58184: PUSH
58185: LD_INT 0
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 2
58194: NEG
58195: PUSH
58196: LD_INT 1
58198: NEG
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 2
58206: NEG
58207: PUSH
58208: LD_INT 2
58210: NEG
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58237: LD_ADDR_VAR 0 59
58241: PUSH
58242: LD_INT 0
58244: PUSH
58245: LD_INT 0
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 0
58254: PUSH
58255: LD_INT 1
58257: NEG
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 1
58265: PUSH
58266: LD_INT 0
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 1
58275: PUSH
58276: LD_INT 1
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 0
58285: PUSH
58286: LD_INT 1
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 1
58295: NEG
58296: PUSH
58297: LD_INT 0
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 1
58306: NEG
58307: PUSH
58308: LD_INT 1
58310: NEG
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58325: LD_ADDR_VAR 0 60
58329: PUSH
58330: LD_INT 0
58332: PUSH
58333: LD_INT 0
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 0
58342: PUSH
58343: LD_INT 1
58345: NEG
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 1
58353: PUSH
58354: LD_INT 0
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 1
58363: PUSH
58364: LD_INT 1
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 0
58373: PUSH
58374: LD_INT 1
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 1
58383: NEG
58384: PUSH
58385: LD_INT 0
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 1
58394: NEG
58395: PUSH
58396: LD_INT 1
58398: NEG
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58413: LD_ADDR_VAR 0 61
58417: PUSH
58418: LD_INT 0
58420: PUSH
58421: LD_INT 0
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 0
58430: PUSH
58431: LD_INT 1
58433: NEG
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 1
58441: PUSH
58442: LD_INT 0
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 1
58451: PUSH
58452: LD_INT 1
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 0
58461: PUSH
58462: LD_INT 1
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 1
58471: NEG
58472: PUSH
58473: LD_INT 0
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 1
58482: NEG
58483: PUSH
58484: LD_INT 1
58486: NEG
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58501: LD_ADDR_VAR 0 62
58505: PUSH
58506: LD_INT 0
58508: PUSH
58509: LD_INT 0
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 0
58518: PUSH
58519: LD_INT 1
58521: NEG
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 1
58529: PUSH
58530: LD_INT 0
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 1
58539: PUSH
58540: LD_INT 1
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 0
58549: PUSH
58550: LD_INT 1
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 1
58559: NEG
58560: PUSH
58561: LD_INT 0
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 1
58570: NEG
58571: PUSH
58572: LD_INT 1
58574: NEG
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58589: LD_ADDR_VAR 0 63
58593: PUSH
58594: LD_INT 0
58596: PUSH
58597: LD_INT 0
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 0
58606: PUSH
58607: LD_INT 1
58609: NEG
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 1
58617: PUSH
58618: LD_INT 0
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 1
58627: PUSH
58628: LD_INT 1
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 0
58637: PUSH
58638: LD_INT 1
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 1
58647: NEG
58648: PUSH
58649: LD_INT 0
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 1
58658: NEG
58659: PUSH
58660: LD_INT 1
58662: NEG
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58677: LD_ADDR_VAR 0 64
58681: PUSH
58682: LD_INT 0
58684: PUSH
58685: LD_INT 0
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 0
58694: PUSH
58695: LD_INT 1
58697: NEG
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 1
58705: PUSH
58706: LD_INT 0
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 1
58715: PUSH
58716: LD_INT 1
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 0
58725: PUSH
58726: LD_INT 1
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 1
58735: NEG
58736: PUSH
58737: LD_INT 0
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 1
58746: NEG
58747: PUSH
58748: LD_INT 1
58750: NEG
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: ST_TO_ADDR
// end ; 1 :
58765: GO 64662
58767: LD_INT 1
58769: DOUBLE
58770: EQUAL
58771: IFTRUE 58775
58773: GO 61398
58775: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58776: LD_ADDR_VAR 0 11
58780: PUSH
58781: LD_INT 1
58783: NEG
58784: PUSH
58785: LD_INT 3
58787: NEG
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 0
58795: PUSH
58796: LD_INT 3
58798: NEG
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 1
58806: PUSH
58807: LD_INT 2
58809: NEG
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: LIST
58819: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58820: LD_ADDR_VAR 0 12
58824: PUSH
58825: LD_INT 2
58827: PUSH
58828: LD_INT 1
58830: NEG
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 3
58838: PUSH
58839: LD_INT 0
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 3
58848: PUSH
58849: LD_INT 1
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: LIST
58860: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58861: LD_ADDR_VAR 0 13
58865: PUSH
58866: LD_INT 3
58868: PUSH
58869: LD_INT 2
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 3
58878: PUSH
58879: LD_INT 3
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 2
58888: PUSH
58889: LD_INT 3
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: LIST
58900: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58901: LD_ADDR_VAR 0 14
58905: PUSH
58906: LD_INT 1
58908: PUSH
58909: LD_INT 3
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: PUSH
58916: LD_INT 0
58918: PUSH
58919: LD_INT 3
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 1
58928: NEG
58929: PUSH
58930: LD_INT 2
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: LIST
58941: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58942: LD_ADDR_VAR 0 15
58946: PUSH
58947: LD_INT 2
58949: NEG
58950: PUSH
58951: LD_INT 1
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 3
58960: NEG
58961: PUSH
58962: LD_INT 0
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 3
58971: NEG
58972: PUSH
58973: LD_INT 1
58975: NEG
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: LIST
58985: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58986: LD_ADDR_VAR 0 16
58990: PUSH
58991: LD_INT 2
58993: NEG
58994: PUSH
58995: LD_INT 3
58997: NEG
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 3
59005: NEG
59006: PUSH
59007: LD_INT 2
59009: NEG
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 3
59017: NEG
59018: PUSH
59019: LD_INT 3
59021: NEG
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: LIST
59031: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59032: LD_ADDR_VAR 0 17
59036: PUSH
59037: LD_INT 1
59039: NEG
59040: PUSH
59041: LD_INT 3
59043: NEG
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 0
59051: PUSH
59052: LD_INT 3
59054: NEG
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 1
59062: PUSH
59063: LD_INT 2
59065: NEG
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: LIST
59075: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59076: LD_ADDR_VAR 0 18
59080: PUSH
59081: LD_INT 2
59083: PUSH
59084: LD_INT 1
59086: NEG
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 3
59094: PUSH
59095: LD_INT 0
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 3
59104: PUSH
59105: LD_INT 1
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: LIST
59116: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59117: LD_ADDR_VAR 0 19
59121: PUSH
59122: LD_INT 3
59124: PUSH
59125: LD_INT 2
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 3
59134: PUSH
59135: LD_INT 3
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 2
59144: PUSH
59145: LD_INT 3
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: LIST
59156: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59157: LD_ADDR_VAR 0 20
59161: PUSH
59162: LD_INT 1
59164: PUSH
59165: LD_INT 3
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 0
59174: PUSH
59175: LD_INT 3
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 1
59184: NEG
59185: PUSH
59186: LD_INT 2
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: LIST
59197: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59198: LD_ADDR_VAR 0 21
59202: PUSH
59203: LD_INT 2
59205: NEG
59206: PUSH
59207: LD_INT 1
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 3
59216: NEG
59217: PUSH
59218: LD_INT 0
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 3
59227: NEG
59228: PUSH
59229: LD_INT 1
59231: NEG
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: LIST
59241: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59242: LD_ADDR_VAR 0 22
59246: PUSH
59247: LD_INT 2
59249: NEG
59250: PUSH
59251: LD_INT 3
59253: NEG
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 3
59261: NEG
59262: PUSH
59263: LD_INT 2
59265: NEG
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 3
59273: NEG
59274: PUSH
59275: LD_INT 3
59277: NEG
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: LIST
59287: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
59288: LD_ADDR_VAR 0 23
59292: PUSH
59293: LD_INT 0
59295: PUSH
59296: LD_INT 3
59298: NEG
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 1
59306: NEG
59307: PUSH
59308: LD_INT 4
59310: NEG
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: LD_INT 1
59318: PUSH
59319: LD_INT 3
59321: NEG
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: LIST
59331: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
59332: LD_ADDR_VAR 0 24
59336: PUSH
59337: LD_INT 3
59339: PUSH
59340: LD_INT 0
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 3
59349: PUSH
59350: LD_INT 1
59352: NEG
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 4
59360: PUSH
59361: LD_INT 1
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: LIST
59372: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
59373: LD_ADDR_VAR 0 25
59377: PUSH
59378: LD_INT 3
59380: PUSH
59381: LD_INT 3
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 4
59390: PUSH
59391: LD_INT 3
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 3
59400: PUSH
59401: LD_INT 4
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: LIST
59412: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
59413: LD_ADDR_VAR 0 26
59417: PUSH
59418: LD_INT 0
59420: PUSH
59421: LD_INT 3
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 1
59430: PUSH
59431: LD_INT 4
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 1
59440: NEG
59441: PUSH
59442: LD_INT 3
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: LIST
59453: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
59454: LD_ADDR_VAR 0 27
59458: PUSH
59459: LD_INT 3
59461: NEG
59462: PUSH
59463: LD_INT 0
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 3
59472: NEG
59473: PUSH
59474: LD_INT 1
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 4
59483: NEG
59484: PUSH
59485: LD_INT 1
59487: NEG
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: LIST
59497: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
59498: LD_ADDR_VAR 0 28
59502: PUSH
59503: LD_INT 3
59505: NEG
59506: PUSH
59507: LD_INT 3
59509: NEG
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 3
59517: NEG
59518: PUSH
59519: LD_INT 4
59521: NEG
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 4
59529: NEG
59530: PUSH
59531: LD_INT 3
59533: NEG
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: LIST
59543: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
59544: LD_ADDR_VAR 0 29
59548: PUSH
59549: LD_INT 1
59551: NEG
59552: PUSH
59553: LD_INT 3
59555: NEG
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 0
59563: PUSH
59564: LD_INT 3
59566: NEG
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 1
59574: PUSH
59575: LD_INT 2
59577: NEG
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 1
59585: NEG
59586: PUSH
59587: LD_INT 4
59589: NEG
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 0
59597: PUSH
59598: LD_INT 4
59600: NEG
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 1
59608: PUSH
59609: LD_INT 3
59611: NEG
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 1
59619: NEG
59620: PUSH
59621: LD_INT 5
59623: NEG
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 0
59631: PUSH
59632: LD_INT 5
59634: NEG
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 1
59642: PUSH
59643: LD_INT 4
59645: NEG
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 1
59653: NEG
59654: PUSH
59655: LD_INT 6
59657: NEG
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 0
59665: PUSH
59666: LD_INT 6
59668: NEG
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 1
59676: PUSH
59677: LD_INT 5
59679: NEG
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
59699: LD_ADDR_VAR 0 30
59703: PUSH
59704: LD_INT 2
59706: PUSH
59707: LD_INT 1
59709: NEG
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 3
59717: PUSH
59718: LD_INT 0
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 3
59727: PUSH
59728: LD_INT 1
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 3
59737: PUSH
59738: LD_INT 1
59740: NEG
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 4
59748: PUSH
59749: LD_INT 0
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 4
59758: PUSH
59759: LD_INT 1
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 4
59768: PUSH
59769: LD_INT 1
59771: NEG
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 5
59779: PUSH
59780: LD_INT 0
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 5
59789: PUSH
59790: LD_INT 1
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 5
59799: PUSH
59800: LD_INT 1
59802: NEG
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 6
59810: PUSH
59811: LD_INT 0
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 6
59820: PUSH
59821: LD_INT 1
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59842: LD_ADDR_VAR 0 31
59846: PUSH
59847: LD_INT 3
59849: PUSH
59850: LD_INT 2
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 3
59859: PUSH
59860: LD_INT 3
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 2
59869: PUSH
59870: LD_INT 3
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 4
59879: PUSH
59880: LD_INT 3
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 4
59889: PUSH
59890: LD_INT 4
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 3
59899: PUSH
59900: LD_INT 4
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 5
59909: PUSH
59910: LD_INT 4
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 5
59919: PUSH
59920: LD_INT 5
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 4
59929: PUSH
59930: LD_INT 5
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 6
59939: PUSH
59940: LD_INT 5
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 6
59949: PUSH
59950: LD_INT 6
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 5
59959: PUSH
59960: LD_INT 6
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59981: LD_ADDR_VAR 0 32
59985: PUSH
59986: LD_INT 1
59988: PUSH
59989: LD_INT 3
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 0
59998: PUSH
59999: LD_INT 3
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 1
60008: NEG
60009: PUSH
60010: LD_INT 2
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 1
60019: PUSH
60020: LD_INT 4
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 0
60029: PUSH
60030: LD_INT 4
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 1
60039: NEG
60040: PUSH
60041: LD_INT 3
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 1
60050: PUSH
60051: LD_INT 5
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 0
60060: PUSH
60061: LD_INT 5
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 1
60070: NEG
60071: PUSH
60072: LD_INT 4
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 1
60081: PUSH
60082: LD_INT 6
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 0
60091: PUSH
60092: LD_INT 6
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 1
60101: NEG
60102: PUSH
60103: LD_INT 5
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
60124: LD_ADDR_VAR 0 33
60128: PUSH
60129: LD_INT 2
60131: NEG
60132: PUSH
60133: LD_INT 1
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 3
60142: NEG
60143: PUSH
60144: LD_INT 0
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 3
60153: NEG
60154: PUSH
60155: LD_INT 1
60157: NEG
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 3
60165: NEG
60166: PUSH
60167: LD_INT 1
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 4
60176: NEG
60177: PUSH
60178: LD_INT 0
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 4
60187: NEG
60188: PUSH
60189: LD_INT 1
60191: NEG
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 4
60199: NEG
60200: PUSH
60201: LD_INT 1
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 5
60210: NEG
60211: PUSH
60212: LD_INT 0
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 5
60221: NEG
60222: PUSH
60223: LD_INT 1
60225: NEG
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 5
60233: NEG
60234: PUSH
60235: LD_INT 1
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 6
60244: NEG
60245: PUSH
60246: LD_INT 0
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 6
60255: NEG
60256: PUSH
60257: LD_INT 1
60259: NEG
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
60279: LD_ADDR_VAR 0 34
60283: PUSH
60284: LD_INT 2
60286: NEG
60287: PUSH
60288: LD_INT 3
60290: NEG
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 3
60298: NEG
60299: PUSH
60300: LD_INT 2
60302: NEG
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 3
60310: NEG
60311: PUSH
60312: LD_INT 3
60314: NEG
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: LD_INT 3
60322: NEG
60323: PUSH
60324: LD_INT 4
60326: NEG
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 4
60334: NEG
60335: PUSH
60336: LD_INT 3
60338: NEG
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 4
60346: NEG
60347: PUSH
60348: LD_INT 4
60350: NEG
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 4
60358: NEG
60359: PUSH
60360: LD_INT 5
60362: NEG
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 5
60370: NEG
60371: PUSH
60372: LD_INT 4
60374: NEG
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 5
60382: NEG
60383: PUSH
60384: LD_INT 5
60386: NEG
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 5
60394: NEG
60395: PUSH
60396: LD_INT 6
60398: NEG
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 6
60406: NEG
60407: PUSH
60408: LD_INT 5
60410: NEG
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: LD_INT 6
60418: NEG
60419: PUSH
60420: LD_INT 6
60422: NEG
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
60442: LD_ADDR_VAR 0 41
60446: PUSH
60447: LD_INT 0
60449: PUSH
60450: LD_INT 2
60452: NEG
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 1
60460: NEG
60461: PUSH
60462: LD_INT 3
60464: NEG
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 1
60472: PUSH
60473: LD_INT 2
60475: NEG
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: LIST
60485: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
60486: LD_ADDR_VAR 0 42
60490: PUSH
60491: LD_INT 2
60493: PUSH
60494: LD_INT 0
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 2
60503: PUSH
60504: LD_INT 1
60506: NEG
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 3
60514: PUSH
60515: LD_INT 1
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: LIST
60526: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
60527: LD_ADDR_VAR 0 43
60531: PUSH
60532: LD_INT 2
60534: PUSH
60535: LD_INT 2
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 3
60544: PUSH
60545: LD_INT 2
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 2
60554: PUSH
60555: LD_INT 3
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: LIST
60566: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
60567: LD_ADDR_VAR 0 44
60571: PUSH
60572: LD_INT 0
60574: PUSH
60575: LD_INT 2
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 1
60584: PUSH
60585: LD_INT 3
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 1
60594: NEG
60595: PUSH
60596: LD_INT 2
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: LIST
60607: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60608: LD_ADDR_VAR 0 45
60612: PUSH
60613: LD_INT 2
60615: NEG
60616: PUSH
60617: LD_INT 0
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 2
60626: NEG
60627: PUSH
60628: LD_INT 1
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 3
60637: NEG
60638: PUSH
60639: LD_INT 1
60641: NEG
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: LIST
60651: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
60652: LD_ADDR_VAR 0 46
60656: PUSH
60657: LD_INT 2
60659: NEG
60660: PUSH
60661: LD_INT 2
60663: NEG
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: LD_INT 2
60671: NEG
60672: PUSH
60673: LD_INT 3
60675: NEG
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 3
60683: NEG
60684: PUSH
60685: LD_INT 2
60687: NEG
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: LIST
60697: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
60698: LD_ADDR_VAR 0 47
60702: PUSH
60703: LD_INT 2
60705: NEG
60706: PUSH
60707: LD_INT 3
60709: NEG
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 1
60717: NEG
60718: PUSH
60719: LD_INT 3
60721: NEG
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60731: LD_ADDR_VAR 0 48
60735: PUSH
60736: LD_INT 1
60738: PUSH
60739: LD_INT 2
60741: NEG
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 2
60749: PUSH
60750: LD_INT 1
60752: NEG
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60762: LD_ADDR_VAR 0 49
60766: PUSH
60767: LD_INT 3
60769: PUSH
60770: LD_INT 1
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 3
60779: PUSH
60780: LD_INT 2
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60791: LD_ADDR_VAR 0 50
60795: PUSH
60796: LD_INT 2
60798: PUSH
60799: LD_INT 3
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 1
60808: PUSH
60809: LD_INT 3
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60820: LD_ADDR_VAR 0 51
60824: PUSH
60825: LD_INT 1
60827: NEG
60828: PUSH
60829: LD_INT 2
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 2
60838: NEG
60839: PUSH
60840: LD_INT 1
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60851: LD_ADDR_VAR 0 52
60855: PUSH
60856: LD_INT 3
60858: NEG
60859: PUSH
60860: LD_INT 1
60862: NEG
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 3
60870: NEG
60871: PUSH
60872: LD_INT 2
60874: NEG
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60884: LD_ADDR_VAR 0 53
60888: PUSH
60889: LD_INT 1
60891: NEG
60892: PUSH
60893: LD_INT 3
60895: NEG
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 0
60903: PUSH
60904: LD_INT 3
60906: NEG
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 1
60914: PUSH
60915: LD_INT 2
60917: NEG
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: LIST
60927: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60928: LD_ADDR_VAR 0 54
60932: PUSH
60933: LD_INT 2
60935: PUSH
60936: LD_INT 1
60938: NEG
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 3
60946: PUSH
60947: LD_INT 0
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: LD_INT 3
60956: PUSH
60957: LD_INT 1
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: LIST
60968: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60969: LD_ADDR_VAR 0 55
60973: PUSH
60974: LD_INT 3
60976: PUSH
60977: LD_INT 2
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 3
60986: PUSH
60987: LD_INT 3
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 2
60996: PUSH
60997: LD_INT 3
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: LIST
61008: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61009: LD_ADDR_VAR 0 56
61013: PUSH
61014: LD_INT 1
61016: PUSH
61017: LD_INT 3
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 0
61026: PUSH
61027: LD_INT 3
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 1
61036: NEG
61037: PUSH
61038: LD_INT 2
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: LIST
61049: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61050: LD_ADDR_VAR 0 57
61054: PUSH
61055: LD_INT 2
61057: NEG
61058: PUSH
61059: LD_INT 1
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 3
61068: NEG
61069: PUSH
61070: LD_INT 0
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 3
61079: NEG
61080: PUSH
61081: LD_INT 1
61083: NEG
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: LIST
61093: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61094: LD_ADDR_VAR 0 58
61098: PUSH
61099: LD_INT 2
61101: NEG
61102: PUSH
61103: LD_INT 3
61105: NEG
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 3
61113: NEG
61114: PUSH
61115: LD_INT 2
61117: NEG
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 3
61125: NEG
61126: PUSH
61127: LD_INT 3
61129: NEG
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: LIST
61139: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
61140: LD_ADDR_VAR 0 59
61144: PUSH
61145: LD_INT 1
61147: NEG
61148: PUSH
61149: LD_INT 2
61151: NEG
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 0
61159: PUSH
61160: LD_INT 2
61162: NEG
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 1
61170: PUSH
61171: LD_INT 1
61173: NEG
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: LIST
61183: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61184: LD_ADDR_VAR 0 60
61188: PUSH
61189: LD_INT 1
61191: PUSH
61192: LD_INT 1
61194: NEG
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: LD_INT 2
61202: PUSH
61203: LD_INT 0
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 2
61212: PUSH
61213: LD_INT 1
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: LIST
61224: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61225: LD_ADDR_VAR 0 61
61229: PUSH
61230: LD_INT 2
61232: PUSH
61233: LD_INT 1
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 2
61242: PUSH
61243: LD_INT 2
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 1
61252: PUSH
61253: LD_INT 2
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: LIST
61264: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61265: LD_ADDR_VAR 0 62
61269: PUSH
61270: LD_INT 1
61272: PUSH
61273: LD_INT 2
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 0
61282: PUSH
61283: LD_INT 2
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 1
61292: NEG
61293: PUSH
61294: LD_INT 1
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: LIST
61305: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61306: LD_ADDR_VAR 0 63
61310: PUSH
61311: LD_INT 1
61313: NEG
61314: PUSH
61315: LD_INT 1
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 2
61324: NEG
61325: PUSH
61326: LD_INT 0
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 2
61335: NEG
61336: PUSH
61337: LD_INT 1
61339: NEG
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: LIST
61349: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61350: LD_ADDR_VAR 0 64
61354: PUSH
61355: LD_INT 1
61357: NEG
61358: PUSH
61359: LD_INT 2
61361: NEG
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: LD_INT 2
61369: NEG
61370: PUSH
61371: LD_INT 1
61373: NEG
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: LD_INT 2
61381: NEG
61382: PUSH
61383: LD_INT 2
61385: NEG
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: LIST
61395: ST_TO_ADDR
// end ; 2 :
61396: GO 64662
61398: LD_INT 2
61400: DOUBLE
61401: EQUAL
61402: IFTRUE 61406
61404: GO 64661
61406: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
61407: LD_ADDR_VAR 0 29
61411: PUSH
61412: LD_INT 4
61414: PUSH
61415: LD_INT 0
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 4
61424: PUSH
61425: LD_INT 1
61427: NEG
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 5
61435: PUSH
61436: LD_INT 0
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 5
61445: PUSH
61446: LD_INT 1
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 4
61455: PUSH
61456: LD_INT 1
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 3
61465: PUSH
61466: LD_INT 0
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: LD_INT 3
61475: PUSH
61476: LD_INT 1
61478: NEG
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 3
61486: PUSH
61487: LD_INT 2
61489: NEG
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 5
61497: PUSH
61498: LD_INT 2
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 3
61507: PUSH
61508: LD_INT 3
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 3
61517: PUSH
61518: LD_INT 2
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 4
61527: PUSH
61528: LD_INT 3
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 4
61537: PUSH
61538: LD_INT 4
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: PUSH
61545: LD_INT 3
61547: PUSH
61548: LD_INT 4
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 2
61557: PUSH
61558: LD_INT 3
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 2
61567: PUSH
61568: LD_INT 2
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: LD_INT 4
61577: PUSH
61578: LD_INT 2
61580: PUSH
61581: EMPTY
61582: LIST
61583: LIST
61584: PUSH
61585: LD_INT 2
61587: PUSH
61588: LD_INT 4
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: LD_INT 0
61597: PUSH
61598: LD_INT 4
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: LD_INT 0
61607: PUSH
61608: LD_INT 3
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 1
61617: PUSH
61618: LD_INT 4
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 1
61627: PUSH
61628: LD_INT 5
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: LD_INT 0
61637: PUSH
61638: LD_INT 5
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 1
61647: NEG
61648: PUSH
61649: LD_INT 4
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 1
61658: NEG
61659: PUSH
61660: LD_INT 3
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 2
61669: PUSH
61670: LD_INT 5
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 2
61679: NEG
61680: PUSH
61681: LD_INT 3
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 3
61690: NEG
61691: PUSH
61692: LD_INT 0
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 3
61701: NEG
61702: PUSH
61703: LD_INT 1
61705: NEG
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 2
61713: NEG
61714: PUSH
61715: LD_INT 0
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 2
61724: NEG
61725: PUSH
61726: LD_INT 1
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 3
61735: NEG
61736: PUSH
61737: LD_INT 1
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 4
61746: NEG
61747: PUSH
61748: LD_INT 0
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 4
61757: NEG
61758: PUSH
61759: LD_INT 1
61761: NEG
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 4
61769: NEG
61770: PUSH
61771: LD_INT 2
61773: NEG
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PUSH
61779: LD_INT 2
61781: NEG
61782: PUSH
61783: LD_INT 2
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: LD_INT 4
61792: NEG
61793: PUSH
61794: LD_INT 4
61796: NEG
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 4
61804: NEG
61805: PUSH
61806: LD_INT 5
61808: NEG
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: LD_INT 3
61816: NEG
61817: PUSH
61818: LD_INT 4
61820: NEG
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 3
61828: NEG
61829: PUSH
61830: LD_INT 3
61832: NEG
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: PUSH
61838: LD_INT 4
61840: NEG
61841: PUSH
61842: LD_INT 3
61844: NEG
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 5
61852: NEG
61853: PUSH
61854: LD_INT 4
61856: NEG
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 5
61864: NEG
61865: PUSH
61866: LD_INT 5
61868: NEG
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 3
61876: NEG
61877: PUSH
61878: LD_INT 5
61880: NEG
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 5
61888: NEG
61889: PUSH
61890: LD_INT 3
61892: NEG
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61945: LD_ADDR_VAR 0 30
61949: PUSH
61950: LD_INT 4
61952: PUSH
61953: LD_INT 4
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: LD_INT 4
61962: PUSH
61963: LD_INT 3
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 5
61972: PUSH
61973: LD_INT 4
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: LD_INT 5
61982: PUSH
61983: LD_INT 5
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 4
61992: PUSH
61993: LD_INT 5
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: LD_INT 3
62002: PUSH
62003: LD_INT 4
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: LD_INT 3
62012: PUSH
62013: LD_INT 3
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: PUSH
62020: LD_INT 5
62022: PUSH
62023: LD_INT 3
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: PUSH
62030: LD_INT 3
62032: PUSH
62033: LD_INT 5
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: PUSH
62040: LD_INT 0
62042: PUSH
62043: LD_INT 3
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: LD_INT 0
62052: PUSH
62053: LD_INT 2
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_INT 1
62062: PUSH
62063: LD_INT 3
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: LD_INT 1
62072: PUSH
62073: LD_INT 4
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PUSH
62080: LD_INT 0
62082: PUSH
62083: LD_INT 4
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 1
62092: NEG
62093: PUSH
62094: LD_INT 3
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 1
62103: NEG
62104: PUSH
62105: LD_INT 2
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 2
62114: PUSH
62115: LD_INT 4
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 2
62124: NEG
62125: PUSH
62126: LD_INT 2
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 4
62135: NEG
62136: PUSH
62137: LD_INT 0
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 4
62146: NEG
62147: PUSH
62148: LD_INT 1
62150: NEG
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: PUSH
62156: LD_INT 3
62158: NEG
62159: PUSH
62160: LD_INT 0
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 3
62169: NEG
62170: PUSH
62171: LD_INT 1
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PUSH
62178: LD_INT 4
62180: NEG
62181: PUSH
62182: LD_INT 1
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 5
62191: NEG
62192: PUSH
62193: LD_INT 0
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: LD_INT 5
62202: NEG
62203: PUSH
62204: LD_INT 1
62206: NEG
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: LD_INT 5
62214: NEG
62215: PUSH
62216: LD_INT 2
62218: NEG
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 3
62226: NEG
62227: PUSH
62228: LD_INT 2
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 3
62237: NEG
62238: PUSH
62239: LD_INT 3
62241: NEG
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 3
62249: NEG
62250: PUSH
62251: LD_INT 4
62253: NEG
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 2
62261: NEG
62262: PUSH
62263: LD_INT 3
62265: NEG
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 2
62273: NEG
62274: PUSH
62275: LD_INT 2
62277: NEG
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 3
62285: NEG
62286: PUSH
62287: LD_INT 2
62289: NEG
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: LD_INT 4
62297: NEG
62298: PUSH
62299: LD_INT 3
62301: NEG
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: PUSH
62307: LD_INT 4
62309: NEG
62310: PUSH
62311: LD_INT 4
62313: NEG
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 2
62321: NEG
62322: PUSH
62323: LD_INT 4
62325: NEG
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: PUSH
62331: LD_INT 4
62333: NEG
62334: PUSH
62335: LD_INT 2
62337: NEG
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PUSH
62343: LD_INT 0
62345: PUSH
62346: LD_INT 4
62348: NEG
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PUSH
62354: LD_INT 0
62356: PUSH
62357: LD_INT 5
62359: NEG
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: LD_INT 1
62367: PUSH
62368: LD_INT 4
62370: NEG
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 1
62378: PUSH
62379: LD_INT 3
62381: NEG
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: PUSH
62387: LD_INT 0
62389: PUSH
62390: LD_INT 3
62392: NEG
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: PUSH
62398: LD_INT 1
62400: NEG
62401: PUSH
62402: LD_INT 4
62404: NEG
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 1
62412: NEG
62413: PUSH
62414: LD_INT 5
62416: NEG
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 2
62424: PUSH
62425: LD_INT 3
62427: NEG
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 2
62435: NEG
62436: PUSH
62437: LD_INT 5
62439: NEG
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
62492: LD_ADDR_VAR 0 31
62496: PUSH
62497: LD_INT 0
62499: PUSH
62500: LD_INT 4
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: PUSH
62507: LD_INT 0
62509: PUSH
62510: LD_INT 3
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: LD_INT 1
62519: PUSH
62520: LD_INT 4
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: LD_INT 1
62529: PUSH
62530: LD_INT 5
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: PUSH
62537: LD_INT 0
62539: PUSH
62540: LD_INT 5
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: LD_INT 1
62549: NEG
62550: PUSH
62551: LD_INT 4
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: LD_INT 1
62560: NEG
62561: PUSH
62562: LD_INT 3
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: PUSH
62569: LD_INT 2
62571: PUSH
62572: LD_INT 5
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: LD_INT 2
62581: NEG
62582: PUSH
62583: LD_INT 3
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: PUSH
62590: LD_INT 3
62592: NEG
62593: PUSH
62594: LD_INT 0
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 3
62603: NEG
62604: PUSH
62605: LD_INT 1
62607: NEG
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 2
62615: NEG
62616: PUSH
62617: LD_INT 0
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 2
62626: NEG
62627: PUSH
62628: LD_INT 1
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: LD_INT 3
62637: NEG
62638: PUSH
62639: LD_INT 1
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: PUSH
62646: LD_INT 4
62648: NEG
62649: PUSH
62650: LD_INT 0
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: LD_INT 4
62659: NEG
62660: PUSH
62661: LD_INT 1
62663: NEG
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: PUSH
62669: LD_INT 4
62671: NEG
62672: PUSH
62673: LD_INT 2
62675: NEG
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: LD_INT 2
62683: NEG
62684: PUSH
62685: LD_INT 2
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 4
62694: NEG
62695: PUSH
62696: LD_INT 4
62698: NEG
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 4
62706: NEG
62707: PUSH
62708: LD_INT 5
62710: NEG
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 3
62718: NEG
62719: PUSH
62720: LD_INT 4
62722: NEG
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: LD_INT 3
62730: NEG
62731: PUSH
62732: LD_INT 3
62734: NEG
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 4
62742: NEG
62743: PUSH
62744: LD_INT 3
62746: NEG
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PUSH
62752: LD_INT 5
62754: NEG
62755: PUSH
62756: LD_INT 4
62758: NEG
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: LD_INT 5
62766: NEG
62767: PUSH
62768: LD_INT 5
62770: NEG
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 3
62778: NEG
62779: PUSH
62780: LD_INT 5
62782: NEG
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: PUSH
62788: LD_INT 5
62790: NEG
62791: PUSH
62792: LD_INT 3
62794: NEG
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 0
62802: PUSH
62803: LD_INT 3
62805: NEG
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: LD_INT 0
62813: PUSH
62814: LD_INT 4
62816: NEG
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PUSH
62822: LD_INT 1
62824: PUSH
62825: LD_INT 3
62827: NEG
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: LD_INT 1
62835: PUSH
62836: LD_INT 2
62838: NEG
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 0
62846: PUSH
62847: LD_INT 2
62849: NEG
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: LD_INT 1
62857: NEG
62858: PUSH
62859: LD_INT 3
62861: NEG
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: PUSH
62867: LD_INT 1
62869: NEG
62870: PUSH
62871: LD_INT 4
62873: NEG
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 2
62881: PUSH
62882: LD_INT 2
62884: NEG
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: LD_INT 2
62892: NEG
62893: PUSH
62894: LD_INT 4
62896: NEG
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 4
62904: PUSH
62905: LD_INT 0
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: PUSH
62912: LD_INT 4
62914: PUSH
62915: LD_INT 1
62917: NEG
62918: PUSH
62919: EMPTY
62920: LIST
62921: LIST
62922: PUSH
62923: LD_INT 5
62925: PUSH
62926: LD_INT 0
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 5
62935: PUSH
62936: LD_INT 1
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: PUSH
62943: LD_INT 4
62945: PUSH
62946: LD_INT 1
62948: PUSH
62949: EMPTY
62950: LIST
62951: LIST
62952: PUSH
62953: LD_INT 3
62955: PUSH
62956: LD_INT 0
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PUSH
62963: LD_INT 3
62965: PUSH
62966: LD_INT 1
62968: NEG
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: LD_INT 3
62976: PUSH
62977: LD_INT 2
62979: NEG
62980: PUSH
62981: EMPTY
62982: LIST
62983: LIST
62984: PUSH
62985: LD_INT 5
62987: PUSH
62988: LD_INT 2
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PUSH
62995: EMPTY
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
63042: LD_ADDR_VAR 0 32
63046: PUSH
63047: LD_INT 4
63049: NEG
63050: PUSH
63051: LD_INT 0
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: LD_INT 4
63060: NEG
63061: PUSH
63062: LD_INT 1
63064: NEG
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: LD_INT 3
63072: NEG
63073: PUSH
63074: LD_INT 0
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PUSH
63081: LD_INT 3
63083: NEG
63084: PUSH
63085: LD_INT 1
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: LD_INT 4
63094: NEG
63095: PUSH
63096: LD_INT 1
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 5
63105: NEG
63106: PUSH
63107: LD_INT 0
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 5
63116: NEG
63117: PUSH
63118: LD_INT 1
63120: NEG
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 5
63128: NEG
63129: PUSH
63130: LD_INT 2
63132: NEG
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: PUSH
63138: LD_INT 3
63140: NEG
63141: PUSH
63142: LD_INT 2
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: LD_INT 3
63151: NEG
63152: PUSH
63153: LD_INT 3
63155: NEG
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 3
63163: NEG
63164: PUSH
63165: LD_INT 4
63167: NEG
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: PUSH
63173: LD_INT 2
63175: NEG
63176: PUSH
63177: LD_INT 3
63179: NEG
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: PUSH
63185: LD_INT 2
63187: NEG
63188: PUSH
63189: LD_INT 2
63191: NEG
63192: PUSH
63193: EMPTY
63194: LIST
63195: LIST
63196: PUSH
63197: LD_INT 3
63199: NEG
63200: PUSH
63201: LD_INT 2
63203: NEG
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: PUSH
63209: LD_INT 4
63211: NEG
63212: PUSH
63213: LD_INT 3
63215: NEG
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: LD_INT 4
63223: NEG
63224: PUSH
63225: LD_INT 4
63227: NEG
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: PUSH
63233: LD_INT 2
63235: NEG
63236: PUSH
63237: LD_INT 4
63239: NEG
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: LD_INT 4
63247: NEG
63248: PUSH
63249: LD_INT 2
63251: NEG
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: PUSH
63257: LD_INT 0
63259: PUSH
63260: LD_INT 4
63262: NEG
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: PUSH
63268: LD_INT 0
63270: PUSH
63271: LD_INT 5
63273: NEG
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: LD_INT 1
63281: PUSH
63282: LD_INT 4
63284: NEG
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: PUSH
63290: LD_INT 1
63292: PUSH
63293: LD_INT 3
63295: NEG
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PUSH
63301: LD_INT 0
63303: PUSH
63304: LD_INT 3
63306: NEG
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: PUSH
63312: LD_INT 1
63314: NEG
63315: PUSH
63316: LD_INT 4
63318: NEG
63319: PUSH
63320: EMPTY
63321: LIST
63322: LIST
63323: PUSH
63324: LD_INT 1
63326: NEG
63327: PUSH
63328: LD_INT 5
63330: NEG
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 2
63338: PUSH
63339: LD_INT 3
63341: NEG
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: PUSH
63347: LD_INT 2
63349: NEG
63350: PUSH
63351: LD_INT 5
63353: NEG
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: PUSH
63359: LD_INT 3
63361: PUSH
63362: LD_INT 0
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: PUSH
63369: LD_INT 3
63371: PUSH
63372: LD_INT 1
63374: NEG
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: PUSH
63380: LD_INT 4
63382: PUSH
63383: LD_INT 0
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 4
63392: PUSH
63393: LD_INT 1
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 3
63402: PUSH
63403: LD_INT 1
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: LD_INT 2
63412: PUSH
63413: LD_INT 0
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: LD_INT 2
63422: PUSH
63423: LD_INT 1
63425: NEG
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: PUSH
63431: LD_INT 2
63433: PUSH
63434: LD_INT 2
63436: NEG
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: PUSH
63442: LD_INT 4
63444: PUSH
63445: LD_INT 2
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: LD_INT 4
63454: PUSH
63455: LD_INT 4
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: LD_INT 4
63464: PUSH
63465: LD_INT 3
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: LD_INT 5
63474: PUSH
63475: LD_INT 4
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 5
63484: PUSH
63485: LD_INT 5
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: LD_INT 4
63494: PUSH
63495: LD_INT 5
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: PUSH
63502: LD_INT 3
63504: PUSH
63505: LD_INT 4
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: PUSH
63512: LD_INT 3
63514: PUSH
63515: LD_INT 3
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 5
63524: PUSH
63525: LD_INT 3
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PUSH
63532: LD_INT 3
63534: PUSH
63535: LD_INT 5
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: LIST
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: LIST
63570: LIST
63571: LIST
63572: LIST
63573: LIST
63574: LIST
63575: LIST
63576: LIST
63577: LIST
63578: LIST
63579: LIST
63580: LIST
63581: LIST
63582: LIST
63583: LIST
63584: LIST
63585: LIST
63586: LIST
63587: LIST
63588: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
63589: LD_ADDR_VAR 0 33
63593: PUSH
63594: LD_INT 4
63596: NEG
63597: PUSH
63598: LD_INT 4
63600: NEG
63601: PUSH
63602: EMPTY
63603: LIST
63604: LIST
63605: PUSH
63606: LD_INT 4
63608: NEG
63609: PUSH
63610: LD_INT 5
63612: NEG
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: PUSH
63618: LD_INT 3
63620: NEG
63621: PUSH
63622: LD_INT 4
63624: NEG
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: PUSH
63630: LD_INT 3
63632: NEG
63633: PUSH
63634: LD_INT 3
63636: NEG
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: LD_INT 4
63644: NEG
63645: PUSH
63646: LD_INT 3
63648: NEG
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: PUSH
63654: LD_INT 5
63656: NEG
63657: PUSH
63658: LD_INT 4
63660: NEG
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: PUSH
63666: LD_INT 5
63668: NEG
63669: PUSH
63670: LD_INT 5
63672: NEG
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: LD_INT 3
63680: NEG
63681: PUSH
63682: LD_INT 5
63684: NEG
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PUSH
63690: LD_INT 5
63692: NEG
63693: PUSH
63694: LD_INT 3
63696: NEG
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 0
63704: PUSH
63705: LD_INT 3
63707: NEG
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PUSH
63713: LD_INT 0
63715: PUSH
63716: LD_INT 4
63718: NEG
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 1
63726: PUSH
63727: LD_INT 3
63729: NEG
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: LD_INT 1
63737: PUSH
63738: LD_INT 2
63740: NEG
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: PUSH
63746: LD_INT 0
63748: PUSH
63749: LD_INT 2
63751: NEG
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 1
63759: NEG
63760: PUSH
63761: LD_INT 3
63763: NEG
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: LD_INT 1
63771: NEG
63772: PUSH
63773: LD_INT 4
63775: NEG
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: LD_INT 2
63783: PUSH
63784: LD_INT 2
63786: NEG
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 2
63794: NEG
63795: PUSH
63796: LD_INT 4
63798: NEG
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PUSH
63804: LD_INT 4
63806: PUSH
63807: LD_INT 0
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: PUSH
63814: LD_INT 4
63816: PUSH
63817: LD_INT 1
63819: NEG
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: LD_INT 5
63827: PUSH
63828: LD_INT 0
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: LD_INT 5
63837: PUSH
63838: LD_INT 1
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 4
63847: PUSH
63848: LD_INT 1
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: LD_INT 3
63857: PUSH
63858: LD_INT 0
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PUSH
63865: LD_INT 3
63867: PUSH
63868: LD_INT 1
63870: NEG
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PUSH
63876: LD_INT 3
63878: PUSH
63879: LD_INT 2
63881: NEG
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: LD_INT 5
63889: PUSH
63890: LD_INT 2
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: LD_INT 3
63899: PUSH
63900: LD_INT 3
63902: PUSH
63903: EMPTY
63904: LIST
63905: LIST
63906: PUSH
63907: LD_INT 3
63909: PUSH
63910: LD_INT 2
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: PUSH
63917: LD_INT 4
63919: PUSH
63920: LD_INT 3
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PUSH
63927: LD_INT 4
63929: PUSH
63930: LD_INT 4
63932: PUSH
63933: EMPTY
63934: LIST
63935: LIST
63936: PUSH
63937: LD_INT 3
63939: PUSH
63940: LD_INT 4
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: PUSH
63947: LD_INT 2
63949: PUSH
63950: LD_INT 3
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: PUSH
63957: LD_INT 2
63959: PUSH
63960: LD_INT 2
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_INT 4
63969: PUSH
63970: LD_INT 2
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: PUSH
63977: LD_INT 2
63979: PUSH
63980: LD_INT 4
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: PUSH
63987: LD_INT 0
63989: PUSH
63990: LD_INT 4
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: LD_INT 0
63999: PUSH
64000: LD_INT 3
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: PUSH
64007: LD_INT 1
64009: PUSH
64010: LD_INT 4
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: LD_INT 1
64019: PUSH
64020: LD_INT 5
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: LD_INT 0
64029: PUSH
64030: LD_INT 5
64032: PUSH
64033: EMPTY
64034: LIST
64035: LIST
64036: PUSH
64037: LD_INT 1
64039: NEG
64040: PUSH
64041: LD_INT 4
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: PUSH
64048: LD_INT 1
64050: NEG
64051: PUSH
64052: LD_INT 3
64054: PUSH
64055: EMPTY
64056: LIST
64057: LIST
64058: PUSH
64059: LD_INT 2
64061: PUSH
64062: LD_INT 5
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: PUSH
64069: LD_INT 2
64071: NEG
64072: PUSH
64073: LD_INT 3
64075: PUSH
64076: EMPTY
64077: LIST
64078: LIST
64079: PUSH
64080: EMPTY
64081: LIST
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: LIST
64091: LIST
64092: LIST
64093: LIST
64094: LIST
64095: LIST
64096: LIST
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: LIST
64102: LIST
64103: LIST
64104: LIST
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: LIST
64111: LIST
64112: LIST
64113: LIST
64114: LIST
64115: LIST
64116: LIST
64117: LIST
64118: LIST
64119: LIST
64120: LIST
64121: LIST
64122: LIST
64123: LIST
64124: LIST
64125: LIST
64126: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
64127: LD_ADDR_VAR 0 34
64131: PUSH
64132: LD_INT 0
64134: PUSH
64135: LD_INT 4
64137: NEG
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: LD_INT 0
64145: PUSH
64146: LD_INT 5
64148: NEG
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: PUSH
64154: LD_INT 1
64156: PUSH
64157: LD_INT 4
64159: NEG
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PUSH
64165: LD_INT 1
64167: PUSH
64168: LD_INT 3
64170: NEG
64171: PUSH
64172: EMPTY
64173: LIST
64174: LIST
64175: PUSH
64176: LD_INT 0
64178: PUSH
64179: LD_INT 3
64181: NEG
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PUSH
64187: LD_INT 1
64189: NEG
64190: PUSH
64191: LD_INT 4
64193: NEG
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: LD_INT 1
64201: NEG
64202: PUSH
64203: LD_INT 5
64205: NEG
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: LD_INT 2
64213: PUSH
64214: LD_INT 3
64216: NEG
64217: PUSH
64218: EMPTY
64219: LIST
64220: LIST
64221: PUSH
64222: LD_INT 2
64224: NEG
64225: PUSH
64226: LD_INT 5
64228: NEG
64229: PUSH
64230: EMPTY
64231: LIST
64232: LIST
64233: PUSH
64234: LD_INT 3
64236: PUSH
64237: LD_INT 0
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: PUSH
64244: LD_INT 3
64246: PUSH
64247: LD_INT 1
64249: NEG
64250: PUSH
64251: EMPTY
64252: LIST
64253: LIST
64254: PUSH
64255: LD_INT 4
64257: PUSH
64258: LD_INT 0
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: PUSH
64265: LD_INT 4
64267: PUSH
64268: LD_INT 1
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: PUSH
64275: LD_INT 3
64277: PUSH
64278: LD_INT 1
64280: PUSH
64281: EMPTY
64282: LIST
64283: LIST
64284: PUSH
64285: LD_INT 2
64287: PUSH
64288: LD_INT 0
64290: PUSH
64291: EMPTY
64292: LIST
64293: LIST
64294: PUSH
64295: LD_INT 2
64297: PUSH
64298: LD_INT 1
64300: NEG
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: PUSH
64306: LD_INT 2
64308: PUSH
64309: LD_INT 2
64311: NEG
64312: PUSH
64313: EMPTY
64314: LIST
64315: LIST
64316: PUSH
64317: LD_INT 4
64319: PUSH
64320: LD_INT 2
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: PUSH
64327: LD_INT 4
64329: PUSH
64330: LD_INT 4
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: LD_INT 4
64339: PUSH
64340: LD_INT 3
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: PUSH
64347: LD_INT 5
64349: PUSH
64350: LD_INT 4
64352: PUSH
64353: EMPTY
64354: LIST
64355: LIST
64356: PUSH
64357: LD_INT 5
64359: PUSH
64360: LD_INT 5
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: PUSH
64367: LD_INT 4
64369: PUSH
64370: LD_INT 5
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PUSH
64377: LD_INT 3
64379: PUSH
64380: LD_INT 4
64382: PUSH
64383: EMPTY
64384: LIST
64385: LIST
64386: PUSH
64387: LD_INT 3
64389: PUSH
64390: LD_INT 3
64392: PUSH
64393: EMPTY
64394: LIST
64395: LIST
64396: PUSH
64397: LD_INT 5
64399: PUSH
64400: LD_INT 3
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: PUSH
64407: LD_INT 3
64409: PUSH
64410: LD_INT 5
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: PUSH
64417: LD_INT 0
64419: PUSH
64420: LD_INT 3
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: LD_INT 0
64429: PUSH
64430: LD_INT 2
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: LD_INT 1
64439: PUSH
64440: LD_INT 3
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: PUSH
64447: LD_INT 1
64449: PUSH
64450: LD_INT 4
64452: PUSH
64453: EMPTY
64454: LIST
64455: LIST
64456: PUSH
64457: LD_INT 0
64459: PUSH
64460: LD_INT 4
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: LD_INT 1
64469: NEG
64470: PUSH
64471: LD_INT 3
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PUSH
64478: LD_INT 1
64480: NEG
64481: PUSH
64482: LD_INT 2
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: LD_INT 2
64491: PUSH
64492: LD_INT 4
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PUSH
64499: LD_INT 2
64501: NEG
64502: PUSH
64503: LD_INT 2
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: PUSH
64510: LD_INT 4
64512: NEG
64513: PUSH
64514: LD_INT 0
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 4
64523: NEG
64524: PUSH
64525: LD_INT 1
64527: NEG
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: LD_INT 3
64535: NEG
64536: PUSH
64537: LD_INT 0
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 3
64546: NEG
64547: PUSH
64548: LD_INT 1
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: LD_INT 4
64557: NEG
64558: PUSH
64559: LD_INT 1
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: PUSH
64566: LD_INT 5
64568: NEG
64569: PUSH
64570: LD_INT 0
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 5
64579: NEG
64580: PUSH
64581: LD_INT 1
64583: NEG
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: PUSH
64589: LD_INT 5
64591: NEG
64592: PUSH
64593: LD_INT 2
64595: NEG
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: PUSH
64601: LD_INT 3
64603: NEG
64604: PUSH
64605: LD_INT 2
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: LIST
64616: LIST
64617: LIST
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: LIST
64623: LIST
64624: LIST
64625: LIST
64626: LIST
64627: LIST
64628: LIST
64629: LIST
64630: LIST
64631: LIST
64632: LIST
64633: LIST
64634: LIST
64635: LIST
64636: LIST
64637: LIST
64638: LIST
64639: LIST
64640: LIST
64641: LIST
64642: LIST
64643: LIST
64644: LIST
64645: LIST
64646: LIST
64647: LIST
64648: LIST
64649: LIST
64650: LIST
64651: LIST
64652: LIST
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: LIST
64658: ST_TO_ADDR
// end ; end ;
64659: GO 64662
64661: POP
// case btype of b_depot , b_warehouse :
64662: LD_VAR 0 1
64666: PUSH
64667: LD_INT 0
64669: DOUBLE
64670: EQUAL
64671: IFTRUE 64681
64673: LD_INT 1
64675: DOUBLE
64676: EQUAL
64677: IFTRUE 64681
64679: GO 64882
64681: POP
// case nation of nation_american :
64682: LD_VAR 0 5
64686: PUSH
64687: LD_INT 1
64689: DOUBLE
64690: EQUAL
64691: IFTRUE 64695
64693: GO 64751
64695: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
64696: LD_ADDR_VAR 0 9
64700: PUSH
64701: LD_VAR 0 11
64705: PUSH
64706: LD_VAR 0 12
64710: PUSH
64711: LD_VAR 0 13
64715: PUSH
64716: LD_VAR 0 14
64720: PUSH
64721: LD_VAR 0 15
64725: PUSH
64726: LD_VAR 0 16
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: LIST
64735: LIST
64736: LIST
64737: LIST
64738: PUSH
64739: LD_VAR 0 4
64743: PUSH
64744: LD_INT 1
64746: PLUS
64747: ARRAY
64748: ST_TO_ADDR
64749: GO 64880
64751: LD_INT 2
64753: DOUBLE
64754: EQUAL
64755: IFTRUE 64759
64757: GO 64815
64759: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
64760: LD_ADDR_VAR 0 9
64764: PUSH
64765: LD_VAR 0 17
64769: PUSH
64770: LD_VAR 0 18
64774: PUSH
64775: LD_VAR 0 19
64779: PUSH
64780: LD_VAR 0 20
64784: PUSH
64785: LD_VAR 0 21
64789: PUSH
64790: LD_VAR 0 22
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: LIST
64799: LIST
64800: LIST
64801: LIST
64802: PUSH
64803: LD_VAR 0 4
64807: PUSH
64808: LD_INT 1
64810: PLUS
64811: ARRAY
64812: ST_TO_ADDR
64813: GO 64880
64815: LD_INT 3
64817: DOUBLE
64818: EQUAL
64819: IFTRUE 64823
64821: GO 64879
64823: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64824: LD_ADDR_VAR 0 9
64828: PUSH
64829: LD_VAR 0 23
64833: PUSH
64834: LD_VAR 0 24
64838: PUSH
64839: LD_VAR 0 25
64843: PUSH
64844: LD_VAR 0 26
64848: PUSH
64849: LD_VAR 0 27
64853: PUSH
64854: LD_VAR 0 28
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: LIST
64863: LIST
64864: LIST
64865: LIST
64866: PUSH
64867: LD_VAR 0 4
64871: PUSH
64872: LD_INT 1
64874: PLUS
64875: ARRAY
64876: ST_TO_ADDR
64877: GO 64880
64879: POP
64880: GO 65435
64882: LD_INT 2
64884: DOUBLE
64885: EQUAL
64886: IFTRUE 64896
64888: LD_INT 3
64890: DOUBLE
64891: EQUAL
64892: IFTRUE 64896
64894: GO 64952
64896: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64897: LD_ADDR_VAR 0 9
64901: PUSH
64902: LD_VAR 0 29
64906: PUSH
64907: LD_VAR 0 30
64911: PUSH
64912: LD_VAR 0 31
64916: PUSH
64917: LD_VAR 0 32
64921: PUSH
64922: LD_VAR 0 33
64926: PUSH
64927: LD_VAR 0 34
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: LIST
64936: LIST
64937: LIST
64938: LIST
64939: PUSH
64940: LD_VAR 0 4
64944: PUSH
64945: LD_INT 1
64947: PLUS
64948: ARRAY
64949: ST_TO_ADDR
64950: GO 65435
64952: LD_INT 16
64954: DOUBLE
64955: EQUAL
64956: IFTRUE 65014
64958: LD_INT 17
64960: DOUBLE
64961: EQUAL
64962: IFTRUE 65014
64964: LD_INT 18
64966: DOUBLE
64967: EQUAL
64968: IFTRUE 65014
64970: LD_INT 19
64972: DOUBLE
64973: EQUAL
64974: IFTRUE 65014
64976: LD_INT 22
64978: DOUBLE
64979: EQUAL
64980: IFTRUE 65014
64982: LD_INT 20
64984: DOUBLE
64985: EQUAL
64986: IFTRUE 65014
64988: LD_INT 21
64990: DOUBLE
64991: EQUAL
64992: IFTRUE 65014
64994: LD_INT 23
64996: DOUBLE
64997: EQUAL
64998: IFTRUE 65014
65000: LD_INT 24
65002: DOUBLE
65003: EQUAL
65004: IFTRUE 65014
65006: LD_INT 25
65008: DOUBLE
65009: EQUAL
65010: IFTRUE 65014
65012: GO 65070
65014: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
65015: LD_ADDR_VAR 0 9
65019: PUSH
65020: LD_VAR 0 35
65024: PUSH
65025: LD_VAR 0 36
65029: PUSH
65030: LD_VAR 0 37
65034: PUSH
65035: LD_VAR 0 38
65039: PUSH
65040: LD_VAR 0 39
65044: PUSH
65045: LD_VAR 0 40
65049: PUSH
65050: EMPTY
65051: LIST
65052: LIST
65053: LIST
65054: LIST
65055: LIST
65056: LIST
65057: PUSH
65058: LD_VAR 0 4
65062: PUSH
65063: LD_INT 1
65065: PLUS
65066: ARRAY
65067: ST_TO_ADDR
65068: GO 65435
65070: LD_INT 6
65072: DOUBLE
65073: EQUAL
65074: IFTRUE 65126
65076: LD_INT 7
65078: DOUBLE
65079: EQUAL
65080: IFTRUE 65126
65082: LD_INT 8
65084: DOUBLE
65085: EQUAL
65086: IFTRUE 65126
65088: LD_INT 13
65090: DOUBLE
65091: EQUAL
65092: IFTRUE 65126
65094: LD_INT 12
65096: DOUBLE
65097: EQUAL
65098: IFTRUE 65126
65100: LD_INT 15
65102: DOUBLE
65103: EQUAL
65104: IFTRUE 65126
65106: LD_INT 11
65108: DOUBLE
65109: EQUAL
65110: IFTRUE 65126
65112: LD_INT 14
65114: DOUBLE
65115: EQUAL
65116: IFTRUE 65126
65118: LD_INT 10
65120: DOUBLE
65121: EQUAL
65122: IFTRUE 65126
65124: GO 65182
65126: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
65127: LD_ADDR_VAR 0 9
65131: PUSH
65132: LD_VAR 0 41
65136: PUSH
65137: LD_VAR 0 42
65141: PUSH
65142: LD_VAR 0 43
65146: PUSH
65147: LD_VAR 0 44
65151: PUSH
65152: LD_VAR 0 45
65156: PUSH
65157: LD_VAR 0 46
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: LIST
65166: LIST
65167: LIST
65168: LIST
65169: PUSH
65170: LD_VAR 0 4
65174: PUSH
65175: LD_INT 1
65177: PLUS
65178: ARRAY
65179: ST_TO_ADDR
65180: GO 65435
65182: LD_INT 36
65184: DOUBLE
65185: EQUAL
65186: IFTRUE 65190
65188: GO 65246
65190: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
65191: LD_ADDR_VAR 0 9
65195: PUSH
65196: LD_VAR 0 47
65200: PUSH
65201: LD_VAR 0 48
65205: PUSH
65206: LD_VAR 0 49
65210: PUSH
65211: LD_VAR 0 50
65215: PUSH
65216: LD_VAR 0 51
65220: PUSH
65221: LD_VAR 0 52
65225: PUSH
65226: EMPTY
65227: LIST
65228: LIST
65229: LIST
65230: LIST
65231: LIST
65232: LIST
65233: PUSH
65234: LD_VAR 0 4
65238: PUSH
65239: LD_INT 1
65241: PLUS
65242: ARRAY
65243: ST_TO_ADDR
65244: GO 65435
65246: LD_INT 4
65248: DOUBLE
65249: EQUAL
65250: IFTRUE 65272
65252: LD_INT 5
65254: DOUBLE
65255: EQUAL
65256: IFTRUE 65272
65258: LD_INT 34
65260: DOUBLE
65261: EQUAL
65262: IFTRUE 65272
65264: LD_INT 37
65266: DOUBLE
65267: EQUAL
65268: IFTRUE 65272
65270: GO 65328
65272: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
65273: LD_ADDR_VAR 0 9
65277: PUSH
65278: LD_VAR 0 53
65282: PUSH
65283: LD_VAR 0 54
65287: PUSH
65288: LD_VAR 0 55
65292: PUSH
65293: LD_VAR 0 56
65297: PUSH
65298: LD_VAR 0 57
65302: PUSH
65303: LD_VAR 0 58
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: LIST
65312: LIST
65313: LIST
65314: LIST
65315: PUSH
65316: LD_VAR 0 4
65320: PUSH
65321: LD_INT 1
65323: PLUS
65324: ARRAY
65325: ST_TO_ADDR
65326: GO 65435
65328: LD_INT 31
65330: DOUBLE
65331: EQUAL
65332: IFTRUE 65378
65334: LD_INT 32
65336: DOUBLE
65337: EQUAL
65338: IFTRUE 65378
65340: LD_INT 33
65342: DOUBLE
65343: EQUAL
65344: IFTRUE 65378
65346: LD_INT 27
65348: DOUBLE
65349: EQUAL
65350: IFTRUE 65378
65352: LD_INT 26
65354: DOUBLE
65355: EQUAL
65356: IFTRUE 65378
65358: LD_INT 28
65360: DOUBLE
65361: EQUAL
65362: IFTRUE 65378
65364: LD_INT 29
65366: DOUBLE
65367: EQUAL
65368: IFTRUE 65378
65370: LD_INT 30
65372: DOUBLE
65373: EQUAL
65374: IFTRUE 65378
65376: GO 65434
65378: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
65379: LD_ADDR_VAR 0 9
65383: PUSH
65384: LD_VAR 0 59
65388: PUSH
65389: LD_VAR 0 60
65393: PUSH
65394: LD_VAR 0 61
65398: PUSH
65399: LD_VAR 0 62
65403: PUSH
65404: LD_VAR 0 63
65408: PUSH
65409: LD_VAR 0 64
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: LIST
65418: LIST
65419: LIST
65420: LIST
65421: PUSH
65422: LD_VAR 0 4
65426: PUSH
65427: LD_INT 1
65429: PLUS
65430: ARRAY
65431: ST_TO_ADDR
65432: GO 65435
65434: POP
// temp_list2 = [ ] ;
65435: LD_ADDR_VAR 0 10
65439: PUSH
65440: EMPTY
65441: ST_TO_ADDR
// for i in temp_list do
65442: LD_ADDR_VAR 0 8
65446: PUSH
65447: LD_VAR 0 9
65451: PUSH
65452: FOR_IN
65453: IFFALSE 65505
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
65455: LD_ADDR_VAR 0 10
65459: PUSH
65460: LD_VAR 0 10
65464: PUSH
65465: LD_VAR 0 8
65469: PUSH
65470: LD_INT 1
65472: ARRAY
65473: PUSH
65474: LD_VAR 0 2
65478: PLUS
65479: PUSH
65480: LD_VAR 0 8
65484: PUSH
65485: LD_INT 2
65487: ARRAY
65488: PUSH
65489: LD_VAR 0 3
65493: PLUS
65494: PUSH
65495: EMPTY
65496: LIST
65497: LIST
65498: PUSH
65499: EMPTY
65500: LIST
65501: ADD
65502: ST_TO_ADDR
65503: GO 65452
65505: POP
65506: POP
// result = temp_list2 ;
65507: LD_ADDR_VAR 0 7
65511: PUSH
65512: LD_VAR 0 10
65516: ST_TO_ADDR
// end ;
65517: LD_VAR 0 7
65521: RET
// export function EnemyInRange ( unit , dist ) ; begin
65522: LD_INT 0
65524: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
65525: LD_ADDR_VAR 0 3
65529: PUSH
65530: LD_VAR 0 1
65534: PPUSH
65535: CALL_OW 255
65539: PPUSH
65540: LD_VAR 0 1
65544: PPUSH
65545: CALL_OW 250
65549: PPUSH
65550: LD_VAR 0 1
65554: PPUSH
65555: CALL_OW 251
65559: PPUSH
65560: LD_VAR 0 2
65564: PPUSH
65565: CALL 38924 0 4
65569: PUSH
65570: LD_INT 4
65572: ARRAY
65573: ST_TO_ADDR
// end ;
65574: LD_VAR 0 3
65578: RET
// export function PlayerSeeMe ( unit ) ; begin
65579: LD_INT 0
65581: PPUSH
// result := See ( your_side , unit ) ;
65582: LD_ADDR_VAR 0 2
65586: PUSH
65587: LD_OWVAR 2
65591: PPUSH
65592: LD_VAR 0 1
65596: PPUSH
65597: CALL_OW 292
65601: ST_TO_ADDR
// end ;
65602: LD_VAR 0 2
65606: RET
// export function ReverseDir ( unit ) ; begin
65607: LD_INT 0
65609: PPUSH
// if not unit then
65610: LD_VAR 0 1
65614: NOT
65615: IFFALSE 65619
// exit ;
65617: GO 65642
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
65619: LD_ADDR_VAR 0 2
65623: PUSH
65624: LD_VAR 0 1
65628: PPUSH
65629: CALL_OW 254
65633: PUSH
65634: LD_INT 3
65636: PLUS
65637: PUSH
65638: LD_INT 6
65640: MOD
65641: ST_TO_ADDR
// end ;
65642: LD_VAR 0 2
65646: RET
// export function ReverseArray ( array ) ; var i ; begin
65647: LD_INT 0
65649: PPUSH
65650: PPUSH
// if not array then
65651: LD_VAR 0 1
65655: NOT
65656: IFFALSE 65660
// exit ;
65658: GO 65715
// result := [ ] ;
65660: LD_ADDR_VAR 0 2
65664: PUSH
65665: EMPTY
65666: ST_TO_ADDR
// for i := array downto 1 do
65667: LD_ADDR_VAR 0 3
65671: PUSH
65672: DOUBLE
65673: LD_VAR 0 1
65677: INC
65678: ST_TO_ADDR
65679: LD_INT 1
65681: PUSH
65682: FOR_DOWNTO
65683: IFFALSE 65713
// result := Join ( result , array [ i ] ) ;
65685: LD_ADDR_VAR 0 2
65689: PUSH
65690: LD_VAR 0 2
65694: PPUSH
65695: LD_VAR 0 1
65699: PUSH
65700: LD_VAR 0 3
65704: ARRAY
65705: PPUSH
65706: CALL 70359 0 2
65710: ST_TO_ADDR
65711: GO 65682
65713: POP
65714: POP
// end ;
65715: LD_VAR 0 2
65719: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
65720: LD_INT 0
65722: PPUSH
65723: PPUSH
65724: PPUSH
65725: PPUSH
65726: PPUSH
65727: PPUSH
// if not unit or not hexes then
65728: LD_VAR 0 1
65732: NOT
65733: PUSH
65734: LD_VAR 0 2
65738: NOT
65739: OR
65740: IFFALSE 65744
// exit ;
65742: GO 65867
// dist := 9999 ;
65744: LD_ADDR_VAR 0 5
65748: PUSH
65749: LD_INT 9999
65751: ST_TO_ADDR
// for i = 1 to hexes do
65752: LD_ADDR_VAR 0 4
65756: PUSH
65757: DOUBLE
65758: LD_INT 1
65760: DEC
65761: ST_TO_ADDR
65762: LD_VAR 0 2
65766: PUSH
65767: FOR_TO
65768: IFFALSE 65855
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65770: LD_ADDR_VAR 0 6
65774: PUSH
65775: LD_VAR 0 1
65779: PPUSH
65780: LD_VAR 0 2
65784: PUSH
65785: LD_VAR 0 4
65789: ARRAY
65790: PUSH
65791: LD_INT 1
65793: ARRAY
65794: PPUSH
65795: LD_VAR 0 2
65799: PUSH
65800: LD_VAR 0 4
65804: ARRAY
65805: PUSH
65806: LD_INT 2
65808: ARRAY
65809: PPUSH
65810: CALL_OW 297
65814: ST_TO_ADDR
// if tdist < dist then
65815: LD_VAR 0 6
65819: PUSH
65820: LD_VAR 0 5
65824: LESS
65825: IFFALSE 65853
// begin hex := hexes [ i ] ;
65827: LD_ADDR_VAR 0 8
65831: PUSH
65832: LD_VAR 0 2
65836: PUSH
65837: LD_VAR 0 4
65841: ARRAY
65842: ST_TO_ADDR
// dist := tdist ;
65843: LD_ADDR_VAR 0 5
65847: PUSH
65848: LD_VAR 0 6
65852: ST_TO_ADDR
// end ; end ;
65853: GO 65767
65855: POP
65856: POP
// result := hex ;
65857: LD_ADDR_VAR 0 3
65861: PUSH
65862: LD_VAR 0 8
65866: ST_TO_ADDR
// end ;
65867: LD_VAR 0 3
65871: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65872: LD_INT 0
65874: PPUSH
65875: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65876: LD_VAR 0 1
65880: NOT
65881: PUSH
65882: LD_VAR 0 1
65886: PUSH
65887: LD_INT 21
65889: PUSH
65890: LD_INT 2
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: PUSH
65897: LD_INT 23
65899: PUSH
65900: LD_INT 2
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: EMPTY
65908: LIST
65909: LIST
65910: PPUSH
65911: CALL_OW 69
65915: IN
65916: NOT
65917: OR
65918: IFFALSE 65922
// exit ;
65920: GO 65969
// for i = 1 to 3 do
65922: LD_ADDR_VAR 0 3
65926: PUSH
65927: DOUBLE
65928: LD_INT 1
65930: DEC
65931: ST_TO_ADDR
65932: LD_INT 3
65934: PUSH
65935: FOR_TO
65936: IFFALSE 65967
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65938: LD_VAR 0 1
65942: PPUSH
65943: CALL_OW 250
65947: PPUSH
65948: LD_VAR 0 1
65952: PPUSH
65953: CALL_OW 251
65957: PPUSH
65958: LD_INT 1
65960: PPUSH
65961: CALL_OW 453
65965: GO 65935
65967: POP
65968: POP
// end ;
65969: LD_VAR 0 2
65973: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65974: LD_INT 0
65976: PPUSH
65977: PPUSH
65978: PPUSH
65979: PPUSH
65980: PPUSH
65981: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
65982: LD_VAR 0 1
65986: NOT
65987: PUSH
65988: LD_VAR 0 2
65992: NOT
65993: OR
65994: PUSH
65995: LD_VAR 0 1
65999: PPUSH
66000: CALL_OW 314
66004: OR
66005: IFFALSE 66009
// exit ;
66007: GO 66476
// if GetLives ( i ) < 250 then
66009: LD_VAR 0 4
66013: PPUSH
66014: CALL_OW 256
66018: PUSH
66019: LD_INT 250
66021: LESS
66022: IFFALSE 66035
// begin ComAutodestruct ( i ) ;
66024: LD_VAR 0 4
66028: PPUSH
66029: CALL 65872 0 1
// exit ;
66033: GO 66476
// end ; x := GetX ( enemy_unit ) ;
66035: LD_ADDR_VAR 0 7
66039: PUSH
66040: LD_VAR 0 2
66044: PPUSH
66045: CALL_OW 250
66049: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
66050: LD_ADDR_VAR 0 8
66054: PUSH
66055: LD_VAR 0 2
66059: PPUSH
66060: CALL_OW 251
66064: ST_TO_ADDR
// if not x or not y then
66065: LD_VAR 0 7
66069: NOT
66070: PUSH
66071: LD_VAR 0 8
66075: NOT
66076: OR
66077: IFFALSE 66081
// exit ;
66079: GO 66476
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
66081: LD_ADDR_VAR 0 6
66085: PUSH
66086: LD_VAR 0 7
66090: PPUSH
66091: LD_INT 0
66093: PPUSH
66094: LD_INT 4
66096: PPUSH
66097: CALL_OW 272
66101: PUSH
66102: LD_VAR 0 8
66106: PPUSH
66107: LD_INT 0
66109: PPUSH
66110: LD_INT 4
66112: PPUSH
66113: CALL_OW 273
66117: PUSH
66118: EMPTY
66119: LIST
66120: LIST
66121: PUSH
66122: LD_VAR 0 7
66126: PPUSH
66127: LD_INT 1
66129: PPUSH
66130: LD_INT 4
66132: PPUSH
66133: CALL_OW 272
66137: PUSH
66138: LD_VAR 0 8
66142: PPUSH
66143: LD_INT 1
66145: PPUSH
66146: LD_INT 4
66148: PPUSH
66149: CALL_OW 273
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: PUSH
66158: LD_VAR 0 7
66162: PPUSH
66163: LD_INT 2
66165: PPUSH
66166: LD_INT 4
66168: PPUSH
66169: CALL_OW 272
66173: PUSH
66174: LD_VAR 0 8
66178: PPUSH
66179: LD_INT 2
66181: PPUSH
66182: LD_INT 4
66184: PPUSH
66185: CALL_OW 273
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: PUSH
66194: LD_VAR 0 7
66198: PPUSH
66199: LD_INT 3
66201: PPUSH
66202: LD_INT 4
66204: PPUSH
66205: CALL_OW 272
66209: PUSH
66210: LD_VAR 0 8
66214: PPUSH
66215: LD_INT 3
66217: PPUSH
66218: LD_INT 4
66220: PPUSH
66221: CALL_OW 273
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: PUSH
66230: LD_VAR 0 7
66234: PPUSH
66235: LD_INT 4
66237: PPUSH
66238: LD_INT 4
66240: PPUSH
66241: CALL_OW 272
66245: PUSH
66246: LD_VAR 0 8
66250: PPUSH
66251: LD_INT 4
66253: PPUSH
66254: LD_INT 4
66256: PPUSH
66257: CALL_OW 273
66261: PUSH
66262: EMPTY
66263: LIST
66264: LIST
66265: PUSH
66266: LD_VAR 0 7
66270: PPUSH
66271: LD_INT 5
66273: PPUSH
66274: LD_INT 4
66276: PPUSH
66277: CALL_OW 272
66281: PUSH
66282: LD_VAR 0 8
66286: PPUSH
66287: LD_INT 5
66289: PPUSH
66290: LD_INT 4
66292: PPUSH
66293: CALL_OW 273
66297: PUSH
66298: EMPTY
66299: LIST
66300: LIST
66301: PUSH
66302: EMPTY
66303: LIST
66304: LIST
66305: LIST
66306: LIST
66307: LIST
66308: LIST
66309: ST_TO_ADDR
// for i = tmp downto 1 do
66310: LD_ADDR_VAR 0 4
66314: PUSH
66315: DOUBLE
66316: LD_VAR 0 6
66320: INC
66321: ST_TO_ADDR
66322: LD_INT 1
66324: PUSH
66325: FOR_DOWNTO
66326: IFFALSE 66427
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
66328: LD_VAR 0 6
66332: PUSH
66333: LD_VAR 0 4
66337: ARRAY
66338: PUSH
66339: LD_INT 1
66341: ARRAY
66342: PPUSH
66343: LD_VAR 0 6
66347: PUSH
66348: LD_VAR 0 4
66352: ARRAY
66353: PUSH
66354: LD_INT 2
66356: ARRAY
66357: PPUSH
66358: CALL_OW 488
66362: NOT
66363: PUSH
66364: LD_VAR 0 6
66368: PUSH
66369: LD_VAR 0 4
66373: ARRAY
66374: PUSH
66375: LD_INT 1
66377: ARRAY
66378: PPUSH
66379: LD_VAR 0 6
66383: PUSH
66384: LD_VAR 0 4
66388: ARRAY
66389: PUSH
66390: LD_INT 2
66392: ARRAY
66393: PPUSH
66394: CALL_OW 428
66398: PUSH
66399: LD_INT 0
66401: NONEQUAL
66402: OR
66403: IFFALSE 66425
// tmp := Delete ( tmp , i ) ;
66405: LD_ADDR_VAR 0 6
66409: PUSH
66410: LD_VAR 0 6
66414: PPUSH
66415: LD_VAR 0 4
66419: PPUSH
66420: CALL_OW 3
66424: ST_TO_ADDR
66425: GO 66325
66427: POP
66428: POP
// j := GetClosestHex ( unit , tmp ) ;
66429: LD_ADDR_VAR 0 5
66433: PUSH
66434: LD_VAR 0 1
66438: PPUSH
66439: LD_VAR 0 6
66443: PPUSH
66444: CALL 65720 0 2
66448: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
66449: LD_VAR 0 1
66453: PPUSH
66454: LD_VAR 0 5
66458: PUSH
66459: LD_INT 1
66461: ARRAY
66462: PPUSH
66463: LD_VAR 0 5
66467: PUSH
66468: LD_INT 2
66470: ARRAY
66471: PPUSH
66472: CALL_OW 111
// end ;
66476: LD_VAR 0 3
66480: RET
// export function PrepareApemanSoldier ( ) ; begin
66481: LD_INT 0
66483: PPUSH
// uc_nation := 0 ;
66484: LD_ADDR_OWVAR 21
66488: PUSH
66489: LD_INT 0
66491: ST_TO_ADDR
// hc_sex := sex_male ;
66492: LD_ADDR_OWVAR 27
66496: PUSH
66497: LD_INT 1
66499: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
66500: LD_ADDR_OWVAR 28
66504: PUSH
66505: LD_INT 15
66507: ST_TO_ADDR
// hc_gallery :=  ;
66508: LD_ADDR_OWVAR 33
66512: PUSH
66513: LD_STRING 
66515: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66516: LD_ADDR_OWVAR 31
66520: PUSH
66521: LD_INT 0
66523: PPUSH
66524: LD_INT 3
66526: PPUSH
66527: CALL_OW 12
66531: PUSH
66532: LD_INT 0
66534: PPUSH
66535: LD_INT 3
66537: PPUSH
66538: CALL_OW 12
66542: PUSH
66543: LD_INT 0
66545: PUSH
66546: LD_INT 0
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: LIST
66553: LIST
66554: ST_TO_ADDR
// end ;
66555: LD_VAR 0 1
66559: RET
// export function PrepareApemanEngineer ( ) ; begin
66560: LD_INT 0
66562: PPUSH
// uc_nation := 0 ;
66563: LD_ADDR_OWVAR 21
66567: PUSH
66568: LD_INT 0
66570: ST_TO_ADDR
// hc_sex := sex_male ;
66571: LD_ADDR_OWVAR 27
66575: PUSH
66576: LD_INT 1
66578: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
66579: LD_ADDR_OWVAR 28
66583: PUSH
66584: LD_INT 16
66586: ST_TO_ADDR
// hc_gallery :=  ;
66587: LD_ADDR_OWVAR 33
66591: PUSH
66592: LD_STRING 
66594: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66595: LD_ADDR_OWVAR 31
66599: PUSH
66600: LD_INT 0
66602: PPUSH
66603: LD_INT 3
66605: PPUSH
66606: CALL_OW 12
66610: PUSH
66611: LD_INT 0
66613: PPUSH
66614: LD_INT 3
66616: PPUSH
66617: CALL_OW 12
66621: PUSH
66622: LD_INT 0
66624: PUSH
66625: LD_INT 0
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: LIST
66632: LIST
66633: ST_TO_ADDR
// end ;
66634: LD_VAR 0 1
66638: RET
// export function PrepareApeman ( agressivity ) ; begin
66639: LD_INT 0
66641: PPUSH
// uc_side := 0 ;
66642: LD_ADDR_OWVAR 20
66646: PUSH
66647: LD_INT 0
66649: ST_TO_ADDR
// uc_nation := 0 ;
66650: LD_ADDR_OWVAR 21
66654: PUSH
66655: LD_INT 0
66657: ST_TO_ADDR
// hc_sex := sex_male ;
66658: LD_ADDR_OWVAR 27
66662: PUSH
66663: LD_INT 1
66665: ST_TO_ADDR
// hc_class := class_apeman ;
66666: LD_ADDR_OWVAR 28
66670: PUSH
66671: LD_INT 12
66673: ST_TO_ADDR
// hc_gallery :=  ;
66674: LD_ADDR_OWVAR 33
66678: PUSH
66679: LD_STRING 
66681: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66682: LD_ADDR_OWVAR 35
66686: PUSH
66687: LD_VAR 0 1
66691: NEG
66692: PPUSH
66693: LD_VAR 0 1
66697: PPUSH
66698: CALL_OW 12
66702: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66703: LD_ADDR_OWVAR 31
66707: PUSH
66708: LD_INT 0
66710: PPUSH
66711: LD_INT 3
66713: PPUSH
66714: CALL_OW 12
66718: PUSH
66719: LD_INT 0
66721: PPUSH
66722: LD_INT 3
66724: PPUSH
66725: CALL_OW 12
66729: PUSH
66730: LD_INT 0
66732: PUSH
66733: LD_INT 0
66735: PUSH
66736: EMPTY
66737: LIST
66738: LIST
66739: LIST
66740: LIST
66741: ST_TO_ADDR
// end ;
66742: LD_VAR 0 2
66746: RET
// export function PrepareTiger ( agressivity ) ; begin
66747: LD_INT 0
66749: PPUSH
// uc_side := 0 ;
66750: LD_ADDR_OWVAR 20
66754: PUSH
66755: LD_INT 0
66757: ST_TO_ADDR
// uc_nation := 0 ;
66758: LD_ADDR_OWVAR 21
66762: PUSH
66763: LD_INT 0
66765: ST_TO_ADDR
// hc_class := class_tiger ;
66766: LD_ADDR_OWVAR 28
66770: PUSH
66771: LD_INT 14
66773: ST_TO_ADDR
// hc_gallery :=  ;
66774: LD_ADDR_OWVAR 33
66778: PUSH
66779: LD_STRING 
66781: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66782: LD_ADDR_OWVAR 35
66786: PUSH
66787: LD_VAR 0 1
66791: NEG
66792: PPUSH
66793: LD_VAR 0 1
66797: PPUSH
66798: CALL_OW 12
66802: ST_TO_ADDR
// end ;
66803: LD_VAR 0 2
66807: RET
// export function PrepareEnchidna ( ) ; begin
66808: LD_INT 0
66810: PPUSH
// uc_side := 0 ;
66811: LD_ADDR_OWVAR 20
66815: PUSH
66816: LD_INT 0
66818: ST_TO_ADDR
// uc_nation := 0 ;
66819: LD_ADDR_OWVAR 21
66823: PUSH
66824: LD_INT 0
66826: ST_TO_ADDR
// hc_class := class_baggie ;
66827: LD_ADDR_OWVAR 28
66831: PUSH
66832: LD_INT 13
66834: ST_TO_ADDR
// hc_gallery :=  ;
66835: LD_ADDR_OWVAR 33
66839: PUSH
66840: LD_STRING 
66842: ST_TO_ADDR
// end ;
66843: LD_VAR 0 1
66847: RET
// export function PrepareFrog ( ) ; begin
66848: LD_INT 0
66850: PPUSH
// uc_side := 0 ;
66851: LD_ADDR_OWVAR 20
66855: PUSH
66856: LD_INT 0
66858: ST_TO_ADDR
// uc_nation := 0 ;
66859: LD_ADDR_OWVAR 21
66863: PUSH
66864: LD_INT 0
66866: ST_TO_ADDR
// hc_class := class_frog ;
66867: LD_ADDR_OWVAR 28
66871: PUSH
66872: LD_INT 19
66874: ST_TO_ADDR
// hc_gallery :=  ;
66875: LD_ADDR_OWVAR 33
66879: PUSH
66880: LD_STRING 
66882: ST_TO_ADDR
// end ;
66883: LD_VAR 0 1
66887: RET
// export function PrepareFish ( ) ; begin
66888: LD_INT 0
66890: PPUSH
// uc_side := 0 ;
66891: LD_ADDR_OWVAR 20
66895: PUSH
66896: LD_INT 0
66898: ST_TO_ADDR
// uc_nation := 0 ;
66899: LD_ADDR_OWVAR 21
66903: PUSH
66904: LD_INT 0
66906: ST_TO_ADDR
// hc_class := class_fish ;
66907: LD_ADDR_OWVAR 28
66911: PUSH
66912: LD_INT 20
66914: ST_TO_ADDR
// hc_gallery :=  ;
66915: LD_ADDR_OWVAR 33
66919: PUSH
66920: LD_STRING 
66922: ST_TO_ADDR
// end ;
66923: LD_VAR 0 1
66927: RET
// export function PrepareBird ( ) ; begin
66928: LD_INT 0
66930: PPUSH
// uc_side := 0 ;
66931: LD_ADDR_OWVAR 20
66935: PUSH
66936: LD_INT 0
66938: ST_TO_ADDR
// uc_nation := 0 ;
66939: LD_ADDR_OWVAR 21
66943: PUSH
66944: LD_INT 0
66946: ST_TO_ADDR
// hc_class := class_phororhacos ;
66947: LD_ADDR_OWVAR 28
66951: PUSH
66952: LD_INT 18
66954: ST_TO_ADDR
// hc_gallery :=  ;
66955: LD_ADDR_OWVAR 33
66959: PUSH
66960: LD_STRING 
66962: ST_TO_ADDR
// end ;
66963: LD_VAR 0 1
66967: RET
// export function PrepareHorse ( ) ; begin
66968: LD_INT 0
66970: PPUSH
// uc_side := 0 ;
66971: LD_ADDR_OWVAR 20
66975: PUSH
66976: LD_INT 0
66978: ST_TO_ADDR
// uc_nation := 0 ;
66979: LD_ADDR_OWVAR 21
66983: PUSH
66984: LD_INT 0
66986: ST_TO_ADDR
// hc_class := class_horse ;
66987: LD_ADDR_OWVAR 28
66991: PUSH
66992: LD_INT 21
66994: ST_TO_ADDR
// hc_gallery :=  ;
66995: LD_ADDR_OWVAR 33
66999: PUSH
67000: LD_STRING 
67002: ST_TO_ADDR
// end ;
67003: LD_VAR 0 1
67007: RET
// export function PrepareMastodont ( ) ; begin
67008: LD_INT 0
67010: PPUSH
// uc_side := 0 ;
67011: LD_ADDR_OWVAR 20
67015: PUSH
67016: LD_INT 0
67018: ST_TO_ADDR
// uc_nation := 0 ;
67019: LD_ADDR_OWVAR 21
67023: PUSH
67024: LD_INT 0
67026: ST_TO_ADDR
// vc_chassis := class_mastodont ;
67027: LD_ADDR_OWVAR 37
67031: PUSH
67032: LD_INT 31
67034: ST_TO_ADDR
// vc_control := control_rider ;
67035: LD_ADDR_OWVAR 38
67039: PUSH
67040: LD_INT 4
67042: ST_TO_ADDR
// end ;
67043: LD_VAR 0 1
67047: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
67048: LD_INT 0
67050: PPUSH
67051: PPUSH
67052: PPUSH
// uc_side = 0 ;
67053: LD_ADDR_OWVAR 20
67057: PUSH
67058: LD_INT 0
67060: ST_TO_ADDR
// uc_nation = 0 ;
67061: LD_ADDR_OWVAR 21
67065: PUSH
67066: LD_INT 0
67068: ST_TO_ADDR
// InitHc_All ( ) ;
67069: CALL_OW 584
// InitVc ;
67073: CALL_OW 20
// if mastodonts then
67077: LD_VAR 0 6
67081: IFFALSE 67148
// for i = 1 to mastodonts do
67083: LD_ADDR_VAR 0 11
67087: PUSH
67088: DOUBLE
67089: LD_INT 1
67091: DEC
67092: ST_TO_ADDR
67093: LD_VAR 0 6
67097: PUSH
67098: FOR_TO
67099: IFFALSE 67146
// begin vc_chassis := 31 ;
67101: LD_ADDR_OWVAR 37
67105: PUSH
67106: LD_INT 31
67108: ST_TO_ADDR
// vc_control := control_rider ;
67109: LD_ADDR_OWVAR 38
67113: PUSH
67114: LD_INT 4
67116: ST_TO_ADDR
// animal := CreateVehicle ;
67117: LD_ADDR_VAR 0 12
67121: PUSH
67122: CALL_OW 45
67126: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67127: LD_VAR 0 12
67131: PPUSH
67132: LD_VAR 0 8
67136: PPUSH
67137: LD_INT 0
67139: PPUSH
67140: CALL 69276 0 3
// end ;
67144: GO 67098
67146: POP
67147: POP
// if horses then
67148: LD_VAR 0 5
67152: IFFALSE 67219
// for i = 1 to horses do
67154: LD_ADDR_VAR 0 11
67158: PUSH
67159: DOUBLE
67160: LD_INT 1
67162: DEC
67163: ST_TO_ADDR
67164: LD_VAR 0 5
67168: PUSH
67169: FOR_TO
67170: IFFALSE 67217
// begin hc_class := 21 ;
67172: LD_ADDR_OWVAR 28
67176: PUSH
67177: LD_INT 21
67179: ST_TO_ADDR
// hc_gallery :=  ;
67180: LD_ADDR_OWVAR 33
67184: PUSH
67185: LD_STRING 
67187: ST_TO_ADDR
// animal := CreateHuman ;
67188: LD_ADDR_VAR 0 12
67192: PUSH
67193: CALL_OW 44
67197: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67198: LD_VAR 0 12
67202: PPUSH
67203: LD_VAR 0 8
67207: PPUSH
67208: LD_INT 0
67210: PPUSH
67211: CALL 69276 0 3
// end ;
67215: GO 67169
67217: POP
67218: POP
// if birds then
67219: LD_VAR 0 1
67223: IFFALSE 67290
// for i = 1 to birds do
67225: LD_ADDR_VAR 0 11
67229: PUSH
67230: DOUBLE
67231: LD_INT 1
67233: DEC
67234: ST_TO_ADDR
67235: LD_VAR 0 1
67239: PUSH
67240: FOR_TO
67241: IFFALSE 67288
// begin hc_class = 18 ;
67243: LD_ADDR_OWVAR 28
67247: PUSH
67248: LD_INT 18
67250: ST_TO_ADDR
// hc_gallery =  ;
67251: LD_ADDR_OWVAR 33
67255: PUSH
67256: LD_STRING 
67258: ST_TO_ADDR
// animal := CreateHuman ;
67259: LD_ADDR_VAR 0 12
67263: PUSH
67264: CALL_OW 44
67268: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67269: LD_VAR 0 12
67273: PPUSH
67274: LD_VAR 0 8
67278: PPUSH
67279: LD_INT 0
67281: PPUSH
67282: CALL 69276 0 3
// end ;
67286: GO 67240
67288: POP
67289: POP
// if tigers then
67290: LD_VAR 0 2
67294: IFFALSE 67378
// for i = 1 to tigers do
67296: LD_ADDR_VAR 0 11
67300: PUSH
67301: DOUBLE
67302: LD_INT 1
67304: DEC
67305: ST_TO_ADDR
67306: LD_VAR 0 2
67310: PUSH
67311: FOR_TO
67312: IFFALSE 67376
// begin hc_class = class_tiger ;
67314: LD_ADDR_OWVAR 28
67318: PUSH
67319: LD_INT 14
67321: ST_TO_ADDR
// hc_gallery =  ;
67322: LD_ADDR_OWVAR 33
67326: PUSH
67327: LD_STRING 
67329: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
67330: LD_ADDR_OWVAR 35
67334: PUSH
67335: LD_INT 7
67337: NEG
67338: PPUSH
67339: LD_INT 7
67341: PPUSH
67342: CALL_OW 12
67346: ST_TO_ADDR
// animal := CreateHuman ;
67347: LD_ADDR_VAR 0 12
67351: PUSH
67352: CALL_OW 44
67356: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67357: LD_VAR 0 12
67361: PPUSH
67362: LD_VAR 0 8
67366: PPUSH
67367: LD_INT 0
67369: PPUSH
67370: CALL 69276 0 3
// end ;
67374: GO 67311
67376: POP
67377: POP
// if apemans then
67378: LD_VAR 0 3
67382: IFFALSE 67505
// for i = 1 to apemans do
67384: LD_ADDR_VAR 0 11
67388: PUSH
67389: DOUBLE
67390: LD_INT 1
67392: DEC
67393: ST_TO_ADDR
67394: LD_VAR 0 3
67398: PUSH
67399: FOR_TO
67400: IFFALSE 67503
// begin hc_class = class_apeman ;
67402: LD_ADDR_OWVAR 28
67406: PUSH
67407: LD_INT 12
67409: ST_TO_ADDR
// hc_gallery =  ;
67410: LD_ADDR_OWVAR 33
67414: PUSH
67415: LD_STRING 
67417: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
67418: LD_ADDR_OWVAR 35
67422: PUSH
67423: LD_INT 2
67425: NEG
67426: PPUSH
67427: LD_INT 2
67429: PPUSH
67430: CALL_OW 12
67434: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
67435: LD_ADDR_OWVAR 31
67439: PUSH
67440: LD_INT 1
67442: PPUSH
67443: LD_INT 3
67445: PPUSH
67446: CALL_OW 12
67450: PUSH
67451: LD_INT 1
67453: PPUSH
67454: LD_INT 3
67456: PPUSH
67457: CALL_OW 12
67461: PUSH
67462: LD_INT 0
67464: PUSH
67465: LD_INT 0
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: LIST
67472: LIST
67473: ST_TO_ADDR
// animal := CreateHuman ;
67474: LD_ADDR_VAR 0 12
67478: PUSH
67479: CALL_OW 44
67483: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67484: LD_VAR 0 12
67488: PPUSH
67489: LD_VAR 0 8
67493: PPUSH
67494: LD_INT 0
67496: PPUSH
67497: CALL 69276 0 3
// end ;
67501: GO 67399
67503: POP
67504: POP
// if enchidnas then
67505: LD_VAR 0 4
67509: IFFALSE 67576
// for i = 1 to enchidnas do
67511: LD_ADDR_VAR 0 11
67515: PUSH
67516: DOUBLE
67517: LD_INT 1
67519: DEC
67520: ST_TO_ADDR
67521: LD_VAR 0 4
67525: PUSH
67526: FOR_TO
67527: IFFALSE 67574
// begin hc_class = 13 ;
67529: LD_ADDR_OWVAR 28
67533: PUSH
67534: LD_INT 13
67536: ST_TO_ADDR
// hc_gallery =  ;
67537: LD_ADDR_OWVAR 33
67541: PUSH
67542: LD_STRING 
67544: ST_TO_ADDR
// animal := CreateHuman ;
67545: LD_ADDR_VAR 0 12
67549: PUSH
67550: CALL_OW 44
67554: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67555: LD_VAR 0 12
67559: PPUSH
67560: LD_VAR 0 8
67564: PPUSH
67565: LD_INT 0
67567: PPUSH
67568: CALL 69276 0 3
// end ;
67572: GO 67526
67574: POP
67575: POP
// if fishes then
67576: LD_VAR 0 7
67580: IFFALSE 67647
// for i = 1 to fishes do
67582: LD_ADDR_VAR 0 11
67586: PUSH
67587: DOUBLE
67588: LD_INT 1
67590: DEC
67591: ST_TO_ADDR
67592: LD_VAR 0 7
67596: PUSH
67597: FOR_TO
67598: IFFALSE 67645
// begin hc_class = 20 ;
67600: LD_ADDR_OWVAR 28
67604: PUSH
67605: LD_INT 20
67607: ST_TO_ADDR
// hc_gallery =  ;
67608: LD_ADDR_OWVAR 33
67612: PUSH
67613: LD_STRING 
67615: ST_TO_ADDR
// animal := CreateHuman ;
67616: LD_ADDR_VAR 0 12
67620: PUSH
67621: CALL_OW 44
67625: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
67626: LD_VAR 0 12
67630: PPUSH
67631: LD_VAR 0 9
67635: PPUSH
67636: LD_INT 0
67638: PPUSH
67639: CALL 69276 0 3
// end ;
67643: GO 67597
67645: POP
67646: POP
// end ;
67647: LD_VAR 0 10
67651: RET
// export function WantHeal ( sci , unit ) ; begin
67652: LD_INT 0
67654: PPUSH
// if GetTaskList ( sci ) > 0 then
67655: LD_VAR 0 1
67659: PPUSH
67660: CALL_OW 437
67664: PUSH
67665: LD_INT 0
67667: GREATER
67668: IFFALSE 67738
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
67670: LD_VAR 0 1
67674: PPUSH
67675: CALL_OW 437
67679: PUSH
67680: LD_INT 1
67682: ARRAY
67683: PUSH
67684: LD_INT 1
67686: ARRAY
67687: PUSH
67688: LD_STRING l
67690: EQUAL
67691: PUSH
67692: LD_VAR 0 1
67696: PPUSH
67697: CALL_OW 437
67701: PUSH
67702: LD_INT 1
67704: ARRAY
67705: PUSH
67706: LD_INT 4
67708: ARRAY
67709: PUSH
67710: LD_VAR 0 2
67714: EQUAL
67715: AND
67716: IFFALSE 67728
// result := true else
67718: LD_ADDR_VAR 0 3
67722: PUSH
67723: LD_INT 1
67725: ST_TO_ADDR
67726: GO 67736
// result := false ;
67728: LD_ADDR_VAR 0 3
67732: PUSH
67733: LD_INT 0
67735: ST_TO_ADDR
// end else
67736: GO 67746
// result := false ;
67738: LD_ADDR_VAR 0 3
67742: PUSH
67743: LD_INT 0
67745: ST_TO_ADDR
// end ;
67746: LD_VAR 0 3
67750: RET
// export function HealTarget ( sci ) ; begin
67751: LD_INT 0
67753: PPUSH
// if not sci then
67754: LD_VAR 0 1
67758: NOT
67759: IFFALSE 67763
// exit ;
67761: GO 67828
// result := 0 ;
67763: LD_ADDR_VAR 0 2
67767: PUSH
67768: LD_INT 0
67770: ST_TO_ADDR
// if GetTaskList ( sci ) then
67771: LD_VAR 0 1
67775: PPUSH
67776: CALL_OW 437
67780: IFFALSE 67828
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
67782: LD_VAR 0 1
67786: PPUSH
67787: CALL_OW 437
67791: PUSH
67792: LD_INT 1
67794: ARRAY
67795: PUSH
67796: LD_INT 1
67798: ARRAY
67799: PUSH
67800: LD_STRING l
67802: EQUAL
67803: IFFALSE 67828
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
67805: LD_ADDR_VAR 0 2
67809: PUSH
67810: LD_VAR 0 1
67814: PPUSH
67815: CALL_OW 437
67819: PUSH
67820: LD_INT 1
67822: ARRAY
67823: PUSH
67824: LD_INT 4
67826: ARRAY
67827: ST_TO_ADDR
// end ;
67828: LD_VAR 0 2
67832: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
67833: LD_INT 0
67835: PPUSH
67836: PPUSH
67837: PPUSH
67838: PPUSH
// if not base_units then
67839: LD_VAR 0 1
67843: NOT
67844: IFFALSE 67848
// exit ;
67846: GO 67935
// result := false ;
67848: LD_ADDR_VAR 0 2
67852: PUSH
67853: LD_INT 0
67855: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
67856: LD_ADDR_VAR 0 5
67860: PUSH
67861: LD_VAR 0 1
67865: PPUSH
67866: LD_INT 21
67868: PUSH
67869: LD_INT 3
67871: PUSH
67872: EMPTY
67873: LIST
67874: LIST
67875: PPUSH
67876: CALL_OW 72
67880: ST_TO_ADDR
// if not tmp then
67881: LD_VAR 0 5
67885: NOT
67886: IFFALSE 67890
// exit ;
67888: GO 67935
// for i in tmp do
67890: LD_ADDR_VAR 0 3
67894: PUSH
67895: LD_VAR 0 5
67899: PUSH
67900: FOR_IN
67901: IFFALSE 67933
// begin result := EnemyInRange ( i , 22 ) ;
67903: LD_ADDR_VAR 0 2
67907: PUSH
67908: LD_VAR 0 3
67912: PPUSH
67913: LD_INT 22
67915: PPUSH
67916: CALL 65522 0 2
67920: ST_TO_ADDR
// if result then
67921: LD_VAR 0 2
67925: IFFALSE 67931
// exit ;
67927: POP
67928: POP
67929: GO 67935
// end ;
67931: GO 67900
67933: POP
67934: POP
// end ;
67935: LD_VAR 0 2
67939: RET
// export function FilterByTag ( units , tag ) ; begin
67940: LD_INT 0
67942: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
67943: LD_ADDR_VAR 0 3
67947: PUSH
67948: LD_VAR 0 1
67952: PPUSH
67953: LD_INT 120
67955: PUSH
67956: LD_VAR 0 2
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: PPUSH
67965: CALL_OW 72
67969: ST_TO_ADDR
// end ;
67970: LD_VAR 0 3
67974: RET
// export function IsDriver ( un ) ; begin
67975: LD_INT 0
67977: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67978: LD_ADDR_VAR 0 2
67982: PUSH
67983: LD_VAR 0 1
67987: PUSH
67988: LD_INT 55
67990: PUSH
67991: EMPTY
67992: LIST
67993: PPUSH
67994: CALL_OW 69
67998: IN
67999: ST_TO_ADDR
// end ;
68000: LD_VAR 0 2
68004: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
68005: LD_INT 0
68007: PPUSH
68008: PPUSH
// list := [ ] ;
68009: LD_ADDR_VAR 0 5
68013: PUSH
68014: EMPTY
68015: ST_TO_ADDR
// case d of 0 :
68016: LD_VAR 0 3
68020: PUSH
68021: LD_INT 0
68023: DOUBLE
68024: EQUAL
68025: IFTRUE 68029
68027: GO 68162
68029: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
68030: LD_ADDR_VAR 0 5
68034: PUSH
68035: LD_VAR 0 1
68039: PUSH
68040: LD_INT 4
68042: MINUS
68043: PUSH
68044: LD_VAR 0 2
68048: PUSH
68049: LD_INT 4
68051: MINUS
68052: PUSH
68053: LD_INT 2
68055: PUSH
68056: EMPTY
68057: LIST
68058: LIST
68059: LIST
68060: PUSH
68061: LD_VAR 0 1
68065: PUSH
68066: LD_INT 3
68068: MINUS
68069: PUSH
68070: LD_VAR 0 2
68074: PUSH
68075: LD_INT 1
68077: PUSH
68078: EMPTY
68079: LIST
68080: LIST
68081: LIST
68082: PUSH
68083: LD_VAR 0 1
68087: PUSH
68088: LD_INT 4
68090: PLUS
68091: PUSH
68092: LD_VAR 0 2
68096: PUSH
68097: LD_INT 4
68099: PUSH
68100: EMPTY
68101: LIST
68102: LIST
68103: LIST
68104: PUSH
68105: LD_VAR 0 1
68109: PUSH
68110: LD_INT 3
68112: PLUS
68113: PUSH
68114: LD_VAR 0 2
68118: PUSH
68119: LD_INT 3
68121: PLUS
68122: PUSH
68123: LD_INT 5
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: LIST
68130: PUSH
68131: LD_VAR 0 1
68135: PUSH
68136: LD_VAR 0 2
68140: PUSH
68141: LD_INT 4
68143: PLUS
68144: PUSH
68145: LD_INT 0
68147: PUSH
68148: EMPTY
68149: LIST
68150: LIST
68151: LIST
68152: PUSH
68153: EMPTY
68154: LIST
68155: LIST
68156: LIST
68157: LIST
68158: LIST
68159: ST_TO_ADDR
// end ; 1 :
68160: GO 68860
68162: LD_INT 1
68164: DOUBLE
68165: EQUAL
68166: IFTRUE 68170
68168: GO 68303
68170: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
68171: LD_ADDR_VAR 0 5
68175: PUSH
68176: LD_VAR 0 1
68180: PUSH
68181: LD_VAR 0 2
68185: PUSH
68186: LD_INT 4
68188: MINUS
68189: PUSH
68190: LD_INT 3
68192: PUSH
68193: EMPTY
68194: LIST
68195: LIST
68196: LIST
68197: PUSH
68198: LD_VAR 0 1
68202: PUSH
68203: LD_INT 3
68205: MINUS
68206: PUSH
68207: LD_VAR 0 2
68211: PUSH
68212: LD_INT 3
68214: MINUS
68215: PUSH
68216: LD_INT 2
68218: PUSH
68219: EMPTY
68220: LIST
68221: LIST
68222: LIST
68223: PUSH
68224: LD_VAR 0 1
68228: PUSH
68229: LD_INT 4
68231: MINUS
68232: PUSH
68233: LD_VAR 0 2
68237: PUSH
68238: LD_INT 1
68240: PUSH
68241: EMPTY
68242: LIST
68243: LIST
68244: LIST
68245: PUSH
68246: LD_VAR 0 1
68250: PUSH
68251: LD_VAR 0 2
68255: PUSH
68256: LD_INT 3
68258: PLUS
68259: PUSH
68260: LD_INT 0
68262: PUSH
68263: EMPTY
68264: LIST
68265: LIST
68266: LIST
68267: PUSH
68268: LD_VAR 0 1
68272: PUSH
68273: LD_INT 4
68275: PLUS
68276: PUSH
68277: LD_VAR 0 2
68281: PUSH
68282: LD_INT 4
68284: PLUS
68285: PUSH
68286: LD_INT 5
68288: PUSH
68289: EMPTY
68290: LIST
68291: LIST
68292: LIST
68293: PUSH
68294: EMPTY
68295: LIST
68296: LIST
68297: LIST
68298: LIST
68299: LIST
68300: ST_TO_ADDR
// end ; 2 :
68301: GO 68860
68303: LD_INT 2
68305: DOUBLE
68306: EQUAL
68307: IFTRUE 68311
68309: GO 68440
68311: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
68312: LD_ADDR_VAR 0 5
68316: PUSH
68317: LD_VAR 0 1
68321: PUSH
68322: LD_VAR 0 2
68326: PUSH
68327: LD_INT 3
68329: MINUS
68330: PUSH
68331: LD_INT 3
68333: PUSH
68334: EMPTY
68335: LIST
68336: LIST
68337: LIST
68338: PUSH
68339: LD_VAR 0 1
68343: PUSH
68344: LD_INT 4
68346: PLUS
68347: PUSH
68348: LD_VAR 0 2
68352: PUSH
68353: LD_INT 4
68355: PUSH
68356: EMPTY
68357: LIST
68358: LIST
68359: LIST
68360: PUSH
68361: LD_VAR 0 1
68365: PUSH
68366: LD_VAR 0 2
68370: PUSH
68371: LD_INT 4
68373: PLUS
68374: PUSH
68375: LD_INT 0
68377: PUSH
68378: EMPTY
68379: LIST
68380: LIST
68381: LIST
68382: PUSH
68383: LD_VAR 0 1
68387: PUSH
68388: LD_INT 3
68390: MINUS
68391: PUSH
68392: LD_VAR 0 2
68396: PUSH
68397: LD_INT 1
68399: PUSH
68400: EMPTY
68401: LIST
68402: LIST
68403: LIST
68404: PUSH
68405: LD_VAR 0 1
68409: PUSH
68410: LD_INT 4
68412: MINUS
68413: PUSH
68414: LD_VAR 0 2
68418: PUSH
68419: LD_INT 4
68421: MINUS
68422: PUSH
68423: LD_INT 2
68425: PUSH
68426: EMPTY
68427: LIST
68428: LIST
68429: LIST
68430: PUSH
68431: EMPTY
68432: LIST
68433: LIST
68434: LIST
68435: LIST
68436: LIST
68437: ST_TO_ADDR
// end ; 3 :
68438: GO 68860
68440: LD_INT 3
68442: DOUBLE
68443: EQUAL
68444: IFTRUE 68448
68446: GO 68581
68448: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
68449: LD_ADDR_VAR 0 5
68453: PUSH
68454: LD_VAR 0 1
68458: PUSH
68459: LD_INT 3
68461: PLUS
68462: PUSH
68463: LD_VAR 0 2
68467: PUSH
68468: LD_INT 4
68470: PUSH
68471: EMPTY
68472: LIST
68473: LIST
68474: LIST
68475: PUSH
68476: LD_VAR 0 1
68480: PUSH
68481: LD_INT 4
68483: PLUS
68484: PUSH
68485: LD_VAR 0 2
68489: PUSH
68490: LD_INT 4
68492: PLUS
68493: PUSH
68494: LD_INT 5
68496: PUSH
68497: EMPTY
68498: LIST
68499: LIST
68500: LIST
68501: PUSH
68502: LD_VAR 0 1
68506: PUSH
68507: LD_INT 4
68509: MINUS
68510: PUSH
68511: LD_VAR 0 2
68515: PUSH
68516: LD_INT 1
68518: PUSH
68519: EMPTY
68520: LIST
68521: LIST
68522: LIST
68523: PUSH
68524: LD_VAR 0 1
68528: PUSH
68529: LD_VAR 0 2
68533: PUSH
68534: LD_INT 4
68536: MINUS
68537: PUSH
68538: LD_INT 3
68540: PUSH
68541: EMPTY
68542: LIST
68543: LIST
68544: LIST
68545: PUSH
68546: LD_VAR 0 1
68550: PUSH
68551: LD_INT 3
68553: MINUS
68554: PUSH
68555: LD_VAR 0 2
68559: PUSH
68560: LD_INT 3
68562: MINUS
68563: PUSH
68564: LD_INT 2
68566: PUSH
68567: EMPTY
68568: LIST
68569: LIST
68570: LIST
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: LIST
68576: LIST
68577: LIST
68578: ST_TO_ADDR
// end ; 4 :
68579: GO 68860
68581: LD_INT 4
68583: DOUBLE
68584: EQUAL
68585: IFTRUE 68589
68587: GO 68722
68589: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
68590: LD_ADDR_VAR 0 5
68594: PUSH
68595: LD_VAR 0 1
68599: PUSH
68600: LD_VAR 0 2
68604: PUSH
68605: LD_INT 4
68607: PLUS
68608: PUSH
68609: LD_INT 0
68611: PUSH
68612: EMPTY
68613: LIST
68614: LIST
68615: LIST
68616: PUSH
68617: LD_VAR 0 1
68621: PUSH
68622: LD_INT 3
68624: PLUS
68625: PUSH
68626: LD_VAR 0 2
68630: PUSH
68631: LD_INT 3
68633: PLUS
68634: PUSH
68635: LD_INT 5
68637: PUSH
68638: EMPTY
68639: LIST
68640: LIST
68641: LIST
68642: PUSH
68643: LD_VAR 0 1
68647: PUSH
68648: LD_INT 4
68650: PLUS
68651: PUSH
68652: LD_VAR 0 2
68656: PUSH
68657: LD_INT 4
68659: PUSH
68660: EMPTY
68661: LIST
68662: LIST
68663: LIST
68664: PUSH
68665: LD_VAR 0 1
68669: PUSH
68670: LD_VAR 0 2
68674: PUSH
68675: LD_INT 3
68677: MINUS
68678: PUSH
68679: LD_INT 3
68681: PUSH
68682: EMPTY
68683: LIST
68684: LIST
68685: LIST
68686: PUSH
68687: LD_VAR 0 1
68691: PUSH
68692: LD_INT 4
68694: MINUS
68695: PUSH
68696: LD_VAR 0 2
68700: PUSH
68701: LD_INT 4
68703: MINUS
68704: PUSH
68705: LD_INT 2
68707: PUSH
68708: EMPTY
68709: LIST
68710: LIST
68711: LIST
68712: PUSH
68713: EMPTY
68714: LIST
68715: LIST
68716: LIST
68717: LIST
68718: LIST
68719: ST_TO_ADDR
// end ; 5 :
68720: GO 68860
68722: LD_INT 5
68724: DOUBLE
68725: EQUAL
68726: IFTRUE 68730
68728: GO 68859
68730: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
68731: LD_ADDR_VAR 0 5
68735: PUSH
68736: LD_VAR 0 1
68740: PUSH
68741: LD_INT 4
68743: MINUS
68744: PUSH
68745: LD_VAR 0 2
68749: PUSH
68750: LD_INT 1
68752: PUSH
68753: EMPTY
68754: LIST
68755: LIST
68756: LIST
68757: PUSH
68758: LD_VAR 0 1
68762: PUSH
68763: LD_VAR 0 2
68767: PUSH
68768: LD_INT 4
68770: MINUS
68771: PUSH
68772: LD_INT 3
68774: PUSH
68775: EMPTY
68776: LIST
68777: LIST
68778: LIST
68779: PUSH
68780: LD_VAR 0 1
68784: PUSH
68785: LD_INT 4
68787: PLUS
68788: PUSH
68789: LD_VAR 0 2
68793: PUSH
68794: LD_INT 4
68796: PLUS
68797: PUSH
68798: LD_INT 5
68800: PUSH
68801: EMPTY
68802: LIST
68803: LIST
68804: LIST
68805: PUSH
68806: LD_VAR 0 1
68810: PUSH
68811: LD_INT 3
68813: PLUS
68814: PUSH
68815: LD_VAR 0 2
68819: PUSH
68820: LD_INT 4
68822: PUSH
68823: EMPTY
68824: LIST
68825: LIST
68826: LIST
68827: PUSH
68828: LD_VAR 0 1
68832: PUSH
68833: LD_VAR 0 2
68837: PUSH
68838: LD_INT 3
68840: PLUS
68841: PUSH
68842: LD_INT 0
68844: PUSH
68845: EMPTY
68846: LIST
68847: LIST
68848: LIST
68849: PUSH
68850: EMPTY
68851: LIST
68852: LIST
68853: LIST
68854: LIST
68855: LIST
68856: ST_TO_ADDR
// end ; end ;
68857: GO 68860
68859: POP
// result := list ;
68860: LD_ADDR_VAR 0 4
68864: PUSH
68865: LD_VAR 0 5
68869: ST_TO_ADDR
// end ;
68870: LD_VAR 0 4
68874: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68875: LD_INT 0
68877: PPUSH
68878: PPUSH
68879: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68880: LD_VAR 0 1
68884: NOT
68885: PUSH
68886: LD_VAR 0 2
68890: PUSH
68891: LD_INT 1
68893: PUSH
68894: LD_INT 2
68896: PUSH
68897: LD_INT 3
68899: PUSH
68900: LD_INT 4
68902: PUSH
68903: EMPTY
68904: LIST
68905: LIST
68906: LIST
68907: LIST
68908: IN
68909: NOT
68910: OR
68911: IFFALSE 68915
// exit ;
68913: GO 68998
// tmp := [ ] ;
68915: LD_ADDR_VAR 0 5
68919: PUSH
68920: EMPTY
68921: ST_TO_ADDR
// for i in units do
68922: LD_ADDR_VAR 0 4
68926: PUSH
68927: LD_VAR 0 1
68931: PUSH
68932: FOR_IN
68933: IFFALSE 68967
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
68935: LD_ADDR_VAR 0 5
68939: PUSH
68940: LD_VAR 0 5
68944: PPUSH
68945: LD_VAR 0 4
68949: PPUSH
68950: LD_VAR 0 2
68954: PPUSH
68955: CALL_OW 259
68959: PPUSH
68960: CALL 70359 0 2
68964: ST_TO_ADDR
68965: GO 68932
68967: POP
68968: POP
// if not tmp then
68969: LD_VAR 0 5
68973: NOT
68974: IFFALSE 68978
// exit ;
68976: GO 68998
// result := SortListByListDesc ( units , tmp ) ;
68978: LD_ADDR_VAR 0 3
68982: PUSH
68983: LD_VAR 0 1
68987: PPUSH
68988: LD_VAR 0 5
68992: PPUSH
68993: CALL_OW 77
68997: ST_TO_ADDR
// end ;
68998: LD_VAR 0 3
69002: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
69003: LD_INT 0
69005: PPUSH
69006: PPUSH
69007: PPUSH
// result := false ;
69008: LD_ADDR_VAR 0 3
69012: PUSH
69013: LD_INT 0
69015: ST_TO_ADDR
// if not building then
69016: LD_VAR 0 2
69020: NOT
69021: IFFALSE 69025
// exit ;
69023: GO 69163
// x := GetX ( building ) ;
69025: LD_ADDR_VAR 0 4
69029: PUSH
69030: LD_VAR 0 2
69034: PPUSH
69035: CALL_OW 250
69039: ST_TO_ADDR
// y := GetY ( building ) ;
69040: LD_ADDR_VAR 0 5
69044: PUSH
69045: LD_VAR 0 2
69049: PPUSH
69050: CALL_OW 251
69054: ST_TO_ADDR
// if not x or not y then
69055: LD_VAR 0 4
69059: NOT
69060: PUSH
69061: LD_VAR 0 5
69065: NOT
69066: OR
69067: IFFALSE 69071
// exit ;
69069: GO 69163
// if GetTaskList ( unit ) then
69071: LD_VAR 0 1
69075: PPUSH
69076: CALL_OW 437
69080: IFFALSE 69163
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69082: LD_STRING e
69084: PUSH
69085: LD_VAR 0 1
69089: PPUSH
69090: CALL_OW 437
69094: PUSH
69095: LD_INT 1
69097: ARRAY
69098: PUSH
69099: LD_INT 1
69101: ARRAY
69102: EQUAL
69103: PUSH
69104: LD_VAR 0 4
69108: PUSH
69109: LD_VAR 0 1
69113: PPUSH
69114: CALL_OW 437
69118: PUSH
69119: LD_INT 1
69121: ARRAY
69122: PUSH
69123: LD_INT 2
69125: ARRAY
69126: EQUAL
69127: AND
69128: PUSH
69129: LD_VAR 0 5
69133: PUSH
69134: LD_VAR 0 1
69138: PPUSH
69139: CALL_OW 437
69143: PUSH
69144: LD_INT 1
69146: ARRAY
69147: PUSH
69148: LD_INT 3
69150: ARRAY
69151: EQUAL
69152: AND
69153: IFFALSE 69163
// result := true end ;
69155: LD_ADDR_VAR 0 3
69159: PUSH
69160: LD_INT 1
69162: ST_TO_ADDR
// end ;
69163: LD_VAR 0 3
69167: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
69168: LD_INT 0
69170: PPUSH
// result := false ;
69171: LD_ADDR_VAR 0 4
69175: PUSH
69176: LD_INT 0
69178: ST_TO_ADDR
// if GetTaskList ( unit ) then
69179: LD_VAR 0 1
69183: PPUSH
69184: CALL_OW 437
69188: IFFALSE 69271
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69190: LD_STRING M
69192: PUSH
69193: LD_VAR 0 1
69197: PPUSH
69198: CALL_OW 437
69202: PUSH
69203: LD_INT 1
69205: ARRAY
69206: PUSH
69207: LD_INT 1
69209: ARRAY
69210: EQUAL
69211: PUSH
69212: LD_VAR 0 2
69216: PUSH
69217: LD_VAR 0 1
69221: PPUSH
69222: CALL_OW 437
69226: PUSH
69227: LD_INT 1
69229: ARRAY
69230: PUSH
69231: LD_INT 2
69233: ARRAY
69234: EQUAL
69235: AND
69236: PUSH
69237: LD_VAR 0 3
69241: PUSH
69242: LD_VAR 0 1
69246: PPUSH
69247: CALL_OW 437
69251: PUSH
69252: LD_INT 1
69254: ARRAY
69255: PUSH
69256: LD_INT 3
69258: ARRAY
69259: EQUAL
69260: AND
69261: IFFALSE 69271
// result := true ;
69263: LD_ADDR_VAR 0 4
69267: PUSH
69268: LD_INT 1
69270: ST_TO_ADDR
// end ; end ;
69271: LD_VAR 0 4
69275: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
69276: LD_INT 0
69278: PPUSH
69279: PPUSH
69280: PPUSH
69281: PPUSH
// if not unit or not area then
69282: LD_VAR 0 1
69286: NOT
69287: PUSH
69288: LD_VAR 0 2
69292: NOT
69293: OR
69294: IFFALSE 69298
// exit ;
69296: GO 69462
// tmp := AreaToList ( area , i ) ;
69298: LD_ADDR_VAR 0 6
69302: PUSH
69303: LD_VAR 0 2
69307: PPUSH
69308: LD_VAR 0 5
69312: PPUSH
69313: CALL_OW 517
69317: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
69318: LD_ADDR_VAR 0 5
69322: PUSH
69323: DOUBLE
69324: LD_INT 1
69326: DEC
69327: ST_TO_ADDR
69328: LD_VAR 0 6
69332: PUSH
69333: LD_INT 1
69335: ARRAY
69336: PUSH
69337: FOR_TO
69338: IFFALSE 69460
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
69340: LD_ADDR_VAR 0 7
69344: PUSH
69345: LD_VAR 0 6
69349: PUSH
69350: LD_INT 1
69352: ARRAY
69353: PUSH
69354: LD_VAR 0 5
69358: ARRAY
69359: PUSH
69360: LD_VAR 0 6
69364: PUSH
69365: LD_INT 2
69367: ARRAY
69368: PUSH
69369: LD_VAR 0 5
69373: ARRAY
69374: PUSH
69375: EMPTY
69376: LIST
69377: LIST
69378: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
69379: LD_VAR 0 7
69383: PUSH
69384: LD_INT 1
69386: ARRAY
69387: PPUSH
69388: LD_VAR 0 7
69392: PUSH
69393: LD_INT 2
69395: ARRAY
69396: PPUSH
69397: CALL_OW 428
69401: PUSH
69402: LD_INT 0
69404: EQUAL
69405: IFFALSE 69458
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
69407: LD_VAR 0 1
69411: PPUSH
69412: LD_VAR 0 7
69416: PUSH
69417: LD_INT 1
69419: ARRAY
69420: PPUSH
69421: LD_VAR 0 7
69425: PUSH
69426: LD_INT 2
69428: ARRAY
69429: PPUSH
69430: LD_VAR 0 3
69434: PPUSH
69435: CALL_OW 48
// result := IsPlaced ( unit ) ;
69439: LD_ADDR_VAR 0 4
69443: PUSH
69444: LD_VAR 0 1
69448: PPUSH
69449: CALL_OW 305
69453: ST_TO_ADDR
// exit ;
69454: POP
69455: POP
69456: GO 69462
// end ; end ;
69458: GO 69337
69460: POP
69461: POP
// end ;
69462: LD_VAR 0 4
69466: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
69467: LD_INT 0
69469: PPUSH
69470: PPUSH
69471: PPUSH
// if not side or side > 8 then
69472: LD_VAR 0 1
69476: NOT
69477: PUSH
69478: LD_VAR 0 1
69482: PUSH
69483: LD_INT 8
69485: GREATER
69486: OR
69487: IFFALSE 69491
// exit ;
69489: GO 69678
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
69491: LD_ADDR_VAR 0 4
69495: PUSH
69496: LD_INT 22
69498: PUSH
69499: LD_VAR 0 1
69503: PUSH
69504: EMPTY
69505: LIST
69506: LIST
69507: PUSH
69508: LD_INT 21
69510: PUSH
69511: LD_INT 3
69513: PUSH
69514: EMPTY
69515: LIST
69516: LIST
69517: PUSH
69518: EMPTY
69519: LIST
69520: LIST
69521: PPUSH
69522: CALL_OW 69
69526: ST_TO_ADDR
// if not tmp then
69527: LD_VAR 0 4
69531: NOT
69532: IFFALSE 69536
// exit ;
69534: GO 69678
// enable_addtolog := true ;
69536: LD_ADDR_OWVAR 81
69540: PUSH
69541: LD_INT 1
69543: ST_TO_ADDR
// AddToLog ( [ ) ;
69544: LD_STRING [
69546: PPUSH
69547: CALL_OW 561
// for i in tmp do
69551: LD_ADDR_VAR 0 3
69555: PUSH
69556: LD_VAR 0 4
69560: PUSH
69561: FOR_IN
69562: IFFALSE 69669
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
69564: LD_STRING [
69566: PUSH
69567: LD_VAR 0 3
69571: PPUSH
69572: CALL_OW 266
69576: STR
69577: PUSH
69578: LD_STRING , 
69580: STR
69581: PUSH
69582: LD_VAR 0 3
69586: PPUSH
69587: CALL_OW 250
69591: STR
69592: PUSH
69593: LD_STRING , 
69595: STR
69596: PUSH
69597: LD_VAR 0 3
69601: PPUSH
69602: CALL_OW 251
69606: STR
69607: PUSH
69608: LD_STRING , 
69610: STR
69611: PUSH
69612: LD_VAR 0 3
69616: PPUSH
69617: CALL_OW 254
69621: STR
69622: PUSH
69623: LD_STRING , 
69625: STR
69626: PUSH
69627: LD_VAR 0 3
69631: PPUSH
69632: LD_INT 1
69634: PPUSH
69635: CALL_OW 268
69639: STR
69640: PUSH
69641: LD_STRING , 
69643: STR
69644: PUSH
69645: LD_VAR 0 3
69649: PPUSH
69650: LD_INT 2
69652: PPUSH
69653: CALL_OW 268
69657: STR
69658: PUSH
69659: LD_STRING ],
69661: STR
69662: PPUSH
69663: CALL_OW 561
// end ;
69667: GO 69561
69669: POP
69670: POP
// AddToLog ( ]; ) ;
69671: LD_STRING ];
69673: PPUSH
69674: CALL_OW 561
// end ;
69678: LD_VAR 0 2
69682: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
69683: LD_INT 0
69685: PPUSH
69686: PPUSH
69687: PPUSH
69688: PPUSH
69689: PPUSH
// if not area or not rate or not max then
69690: LD_VAR 0 1
69694: NOT
69695: PUSH
69696: LD_VAR 0 2
69700: NOT
69701: OR
69702: PUSH
69703: LD_VAR 0 4
69707: NOT
69708: OR
69709: IFFALSE 69713
// exit ;
69711: GO 69902
// while 1 do
69713: LD_INT 1
69715: IFFALSE 69902
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
69717: LD_ADDR_VAR 0 9
69721: PUSH
69722: LD_VAR 0 1
69726: PPUSH
69727: LD_INT 1
69729: PPUSH
69730: CALL_OW 287
69734: PUSH
69735: LD_INT 10
69737: MUL
69738: ST_TO_ADDR
// r := rate / 10 ;
69739: LD_ADDR_VAR 0 7
69743: PUSH
69744: LD_VAR 0 2
69748: PUSH
69749: LD_INT 10
69751: DIVREAL
69752: ST_TO_ADDR
// time := 1 1$00 ;
69753: LD_ADDR_VAR 0 8
69757: PUSH
69758: LD_INT 2100
69760: ST_TO_ADDR
// if amount < min then
69761: LD_VAR 0 9
69765: PUSH
69766: LD_VAR 0 3
69770: LESS
69771: IFFALSE 69789
// r := r * 2 else
69773: LD_ADDR_VAR 0 7
69777: PUSH
69778: LD_VAR 0 7
69782: PUSH
69783: LD_INT 2
69785: MUL
69786: ST_TO_ADDR
69787: GO 69815
// if amount > max then
69789: LD_VAR 0 9
69793: PUSH
69794: LD_VAR 0 4
69798: GREATER
69799: IFFALSE 69815
// r := r / 2 ;
69801: LD_ADDR_VAR 0 7
69805: PUSH
69806: LD_VAR 0 7
69810: PUSH
69811: LD_INT 2
69813: DIVREAL
69814: ST_TO_ADDR
// time := time / r ;
69815: LD_ADDR_VAR 0 8
69819: PUSH
69820: LD_VAR 0 8
69824: PUSH
69825: LD_VAR 0 7
69829: DIVREAL
69830: ST_TO_ADDR
// if time < 0 then
69831: LD_VAR 0 8
69835: PUSH
69836: LD_INT 0
69838: LESS
69839: IFFALSE 69856
// time := time * - 1 ;
69841: LD_ADDR_VAR 0 8
69845: PUSH
69846: LD_VAR 0 8
69850: PUSH
69851: LD_INT 1
69853: NEG
69854: MUL
69855: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
69856: LD_VAR 0 8
69860: PUSH
69861: LD_INT 35
69863: PPUSH
69864: LD_INT 875
69866: PPUSH
69867: CALL_OW 12
69871: PLUS
69872: PPUSH
69873: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69877: LD_INT 1
69879: PPUSH
69880: LD_INT 5
69882: PPUSH
69883: CALL_OW 12
69887: PPUSH
69888: LD_VAR 0 1
69892: PPUSH
69893: LD_INT 1
69895: PPUSH
69896: CALL_OW 55
// end ;
69900: GO 69713
// end ;
69902: LD_VAR 0 5
69906: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69907: LD_INT 0
69909: PPUSH
69910: PPUSH
69911: PPUSH
69912: PPUSH
69913: PPUSH
69914: PPUSH
69915: PPUSH
69916: PPUSH
// if not turrets or not factories then
69917: LD_VAR 0 1
69921: NOT
69922: PUSH
69923: LD_VAR 0 2
69927: NOT
69928: OR
69929: IFFALSE 69933
// exit ;
69931: GO 70240
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69933: LD_ADDR_VAR 0 10
69937: PUSH
69938: LD_INT 5
69940: PUSH
69941: LD_INT 6
69943: PUSH
69944: EMPTY
69945: LIST
69946: LIST
69947: PUSH
69948: LD_INT 2
69950: PUSH
69951: LD_INT 4
69953: PUSH
69954: EMPTY
69955: LIST
69956: LIST
69957: PUSH
69958: LD_INT 3
69960: PUSH
69961: LD_INT 5
69963: PUSH
69964: EMPTY
69965: LIST
69966: LIST
69967: PUSH
69968: EMPTY
69969: LIST
69970: LIST
69971: LIST
69972: PUSH
69973: LD_INT 24
69975: PUSH
69976: LD_INT 25
69978: PUSH
69979: EMPTY
69980: LIST
69981: LIST
69982: PUSH
69983: LD_INT 23
69985: PUSH
69986: LD_INT 27
69988: PUSH
69989: EMPTY
69990: LIST
69991: LIST
69992: PUSH
69993: EMPTY
69994: LIST
69995: LIST
69996: PUSH
69997: LD_INT 42
69999: PUSH
70000: LD_INT 43
70002: PUSH
70003: EMPTY
70004: LIST
70005: LIST
70006: PUSH
70007: LD_INT 44
70009: PUSH
70010: LD_INT 46
70012: PUSH
70013: EMPTY
70014: LIST
70015: LIST
70016: PUSH
70017: LD_INT 45
70019: PUSH
70020: LD_INT 47
70022: PUSH
70023: EMPTY
70024: LIST
70025: LIST
70026: PUSH
70027: EMPTY
70028: LIST
70029: LIST
70030: LIST
70031: PUSH
70032: EMPTY
70033: LIST
70034: LIST
70035: LIST
70036: ST_TO_ADDR
// result := [ ] ;
70037: LD_ADDR_VAR 0 3
70041: PUSH
70042: EMPTY
70043: ST_TO_ADDR
// for i in turrets do
70044: LD_ADDR_VAR 0 4
70048: PUSH
70049: LD_VAR 0 1
70053: PUSH
70054: FOR_IN
70055: IFFALSE 70238
// begin nat := GetNation ( i ) ;
70057: LD_ADDR_VAR 0 7
70061: PUSH
70062: LD_VAR 0 4
70066: PPUSH
70067: CALL_OW 248
70071: ST_TO_ADDR
// weapon := 0 ;
70072: LD_ADDR_VAR 0 8
70076: PUSH
70077: LD_INT 0
70079: ST_TO_ADDR
// if not nat then
70080: LD_VAR 0 7
70084: NOT
70085: IFFALSE 70089
// continue ;
70087: GO 70054
// for j in list [ nat ] do
70089: LD_ADDR_VAR 0 5
70093: PUSH
70094: LD_VAR 0 10
70098: PUSH
70099: LD_VAR 0 7
70103: ARRAY
70104: PUSH
70105: FOR_IN
70106: IFFALSE 70147
// if GetBWeapon ( i ) = j [ 1 ] then
70108: LD_VAR 0 4
70112: PPUSH
70113: CALL_OW 269
70117: PUSH
70118: LD_VAR 0 5
70122: PUSH
70123: LD_INT 1
70125: ARRAY
70126: EQUAL
70127: IFFALSE 70145
// begin weapon := j [ 2 ] ;
70129: LD_ADDR_VAR 0 8
70133: PUSH
70134: LD_VAR 0 5
70138: PUSH
70139: LD_INT 2
70141: ARRAY
70142: ST_TO_ADDR
// break ;
70143: GO 70147
// end ;
70145: GO 70105
70147: POP
70148: POP
// if not weapon then
70149: LD_VAR 0 8
70153: NOT
70154: IFFALSE 70158
// continue ;
70156: GO 70054
// for k in factories do
70158: LD_ADDR_VAR 0 6
70162: PUSH
70163: LD_VAR 0 2
70167: PUSH
70168: FOR_IN
70169: IFFALSE 70234
// begin weapons := AvailableWeaponList ( k ) ;
70171: LD_ADDR_VAR 0 9
70175: PUSH
70176: LD_VAR 0 6
70180: PPUSH
70181: CALL_OW 478
70185: ST_TO_ADDR
// if not weapons then
70186: LD_VAR 0 9
70190: NOT
70191: IFFALSE 70195
// continue ;
70193: GO 70168
// if weapon in weapons then
70195: LD_VAR 0 8
70199: PUSH
70200: LD_VAR 0 9
70204: IN
70205: IFFALSE 70232
// begin result := [ i , weapon ] ;
70207: LD_ADDR_VAR 0 3
70211: PUSH
70212: LD_VAR 0 4
70216: PUSH
70217: LD_VAR 0 8
70221: PUSH
70222: EMPTY
70223: LIST
70224: LIST
70225: ST_TO_ADDR
// exit ;
70226: POP
70227: POP
70228: POP
70229: POP
70230: GO 70240
// end ; end ;
70232: GO 70168
70234: POP
70235: POP
// end ;
70236: GO 70054
70238: POP
70239: POP
// end ;
70240: LD_VAR 0 3
70244: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
70245: LD_INT 0
70247: PPUSH
// if not side or side > 8 then
70248: LD_VAR 0 3
70252: NOT
70253: PUSH
70254: LD_VAR 0 3
70258: PUSH
70259: LD_INT 8
70261: GREATER
70262: OR
70263: IFFALSE 70267
// exit ;
70265: GO 70326
// if not range then
70267: LD_VAR 0 4
70271: NOT
70272: IFFALSE 70283
// range := - 12 ;
70274: LD_ADDR_VAR 0 4
70278: PUSH
70279: LD_INT 12
70281: NEG
70282: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
70283: LD_VAR 0 1
70287: PPUSH
70288: LD_VAR 0 2
70292: PPUSH
70293: LD_VAR 0 3
70297: PPUSH
70298: LD_VAR 0 4
70302: PPUSH
70303: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
70307: LD_VAR 0 1
70311: PPUSH
70312: LD_VAR 0 2
70316: PPUSH
70317: LD_VAR 0 3
70321: PPUSH
70322: CALL_OW 331
// end ;
70326: LD_VAR 0 5
70330: RET
// export function Video ( mode ) ; begin
70331: LD_INT 0
70333: PPUSH
// ingame_video = mode ;
70334: LD_ADDR_OWVAR 52
70338: PUSH
70339: LD_VAR 0 1
70343: ST_TO_ADDR
// interface_hidden = mode ;
70344: LD_ADDR_OWVAR 54
70348: PUSH
70349: LD_VAR 0 1
70353: ST_TO_ADDR
// end ;
70354: LD_VAR 0 2
70358: RET
// export function Join ( array , element ) ; begin
70359: LD_INT 0
70361: PPUSH
// result := Replace ( array , array + 1 , element ) ;
70362: LD_ADDR_VAR 0 3
70366: PUSH
70367: LD_VAR 0 1
70371: PPUSH
70372: LD_VAR 0 1
70376: PUSH
70377: LD_INT 1
70379: PLUS
70380: PPUSH
70381: LD_VAR 0 2
70385: PPUSH
70386: CALL_OW 1
70390: ST_TO_ADDR
// end ;
70391: LD_VAR 0 3
70395: RET
// export function JoinUnion ( array , element ) ; begin
70396: LD_INT 0
70398: PPUSH
// result := array union element ;
70399: LD_ADDR_VAR 0 3
70403: PUSH
70404: LD_VAR 0 1
70408: PUSH
70409: LD_VAR 0 2
70413: UNION
70414: ST_TO_ADDR
// end ;
70415: LD_VAR 0 3
70419: RET
// export function GetBehemoths ( side ) ; begin
70420: LD_INT 0
70422: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
70423: LD_ADDR_VAR 0 2
70427: PUSH
70428: LD_INT 22
70430: PUSH
70431: LD_VAR 0 1
70435: PUSH
70436: EMPTY
70437: LIST
70438: LIST
70439: PUSH
70440: LD_INT 31
70442: PUSH
70443: LD_INT 25
70445: PUSH
70446: EMPTY
70447: LIST
70448: LIST
70449: PUSH
70450: EMPTY
70451: LIST
70452: LIST
70453: PPUSH
70454: CALL_OW 69
70458: ST_TO_ADDR
// end ;
70459: LD_VAR 0 2
70463: RET
// export function Shuffle ( array ) ; var i , index ; begin
70464: LD_INT 0
70466: PPUSH
70467: PPUSH
70468: PPUSH
// result := [ ] ;
70469: LD_ADDR_VAR 0 2
70473: PUSH
70474: EMPTY
70475: ST_TO_ADDR
// if not array then
70476: LD_VAR 0 1
70480: NOT
70481: IFFALSE 70485
// exit ;
70483: GO 70584
// Randomize ;
70485: CALL_OW 10
// for i = array downto 1 do
70489: LD_ADDR_VAR 0 3
70493: PUSH
70494: DOUBLE
70495: LD_VAR 0 1
70499: INC
70500: ST_TO_ADDR
70501: LD_INT 1
70503: PUSH
70504: FOR_DOWNTO
70505: IFFALSE 70582
// begin index := rand ( 1 , array ) ;
70507: LD_ADDR_VAR 0 4
70511: PUSH
70512: LD_INT 1
70514: PPUSH
70515: LD_VAR 0 1
70519: PPUSH
70520: CALL_OW 12
70524: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
70525: LD_ADDR_VAR 0 2
70529: PUSH
70530: LD_VAR 0 2
70534: PPUSH
70535: LD_VAR 0 2
70539: PUSH
70540: LD_INT 1
70542: PLUS
70543: PPUSH
70544: LD_VAR 0 1
70548: PUSH
70549: LD_VAR 0 4
70553: ARRAY
70554: PPUSH
70555: CALL_OW 2
70559: ST_TO_ADDR
// array := Delete ( array , index ) ;
70560: LD_ADDR_VAR 0 1
70564: PUSH
70565: LD_VAR 0 1
70569: PPUSH
70570: LD_VAR 0 4
70574: PPUSH
70575: CALL_OW 3
70579: ST_TO_ADDR
// end ;
70580: GO 70504
70582: POP
70583: POP
// end ;
70584: LD_VAR 0 2
70588: RET
// export function GetBaseMaterials ( base ) ; begin
70589: LD_INT 0
70591: PPUSH
// result := [ 0 , 0 , 0 ] ;
70592: LD_ADDR_VAR 0 2
70596: PUSH
70597: LD_INT 0
70599: PUSH
70600: LD_INT 0
70602: PUSH
70603: LD_INT 0
70605: PUSH
70606: EMPTY
70607: LIST
70608: LIST
70609: LIST
70610: ST_TO_ADDR
// if not base then
70611: LD_VAR 0 1
70615: NOT
70616: IFFALSE 70620
// exit ;
70618: GO 70669
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
70620: LD_ADDR_VAR 0 2
70624: PUSH
70625: LD_VAR 0 1
70629: PPUSH
70630: LD_INT 1
70632: PPUSH
70633: CALL_OW 275
70637: PUSH
70638: LD_VAR 0 1
70642: PPUSH
70643: LD_INT 2
70645: PPUSH
70646: CALL_OW 275
70650: PUSH
70651: LD_VAR 0 1
70655: PPUSH
70656: LD_INT 3
70658: PPUSH
70659: CALL_OW 275
70663: PUSH
70664: EMPTY
70665: LIST
70666: LIST
70667: LIST
70668: ST_TO_ADDR
// end ;
70669: LD_VAR 0 2
70673: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
70674: LD_INT 0
70676: PPUSH
70677: PPUSH
// result := array ;
70678: LD_ADDR_VAR 0 3
70682: PUSH
70683: LD_VAR 0 1
70687: ST_TO_ADDR
// if size >= result then
70688: LD_VAR 0 2
70692: PUSH
70693: LD_VAR 0 3
70697: GREATEREQUAL
70698: IFFALSE 70702
// exit ;
70700: GO 70752
// if size then
70702: LD_VAR 0 2
70706: IFFALSE 70752
// for i := array downto size do
70708: LD_ADDR_VAR 0 4
70712: PUSH
70713: DOUBLE
70714: LD_VAR 0 1
70718: INC
70719: ST_TO_ADDR
70720: LD_VAR 0 2
70724: PUSH
70725: FOR_DOWNTO
70726: IFFALSE 70750
// result := Delete ( result , result ) ;
70728: LD_ADDR_VAR 0 3
70732: PUSH
70733: LD_VAR 0 3
70737: PPUSH
70738: LD_VAR 0 3
70742: PPUSH
70743: CALL_OW 3
70747: ST_TO_ADDR
70748: GO 70725
70750: POP
70751: POP
// end ;
70752: LD_VAR 0 3
70756: RET
// export function ComExit ( unit ) ; var tmp ; begin
70757: LD_INT 0
70759: PPUSH
70760: PPUSH
// if not IsInUnit ( unit ) then
70761: LD_VAR 0 1
70765: PPUSH
70766: CALL_OW 310
70770: NOT
70771: IFFALSE 70775
// exit ;
70773: GO 70835
// tmp := IsInUnit ( unit ) ;
70775: LD_ADDR_VAR 0 3
70779: PUSH
70780: LD_VAR 0 1
70784: PPUSH
70785: CALL_OW 310
70789: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
70790: LD_VAR 0 3
70794: PPUSH
70795: CALL_OW 247
70799: PUSH
70800: LD_INT 2
70802: EQUAL
70803: IFFALSE 70816
// ComExitVehicle ( unit ) else
70805: LD_VAR 0 1
70809: PPUSH
70810: CALL_OW 121
70814: GO 70825
// ComExitBuilding ( unit ) ;
70816: LD_VAR 0 1
70820: PPUSH
70821: CALL_OW 122
// result := tmp ;
70825: LD_ADDR_VAR 0 2
70829: PUSH
70830: LD_VAR 0 3
70834: ST_TO_ADDR
// end ;
70835: LD_VAR 0 2
70839: RET
// export function ComExitAll ( units ) ; var i ; begin
70840: LD_INT 0
70842: PPUSH
70843: PPUSH
// if not units then
70844: LD_VAR 0 1
70848: NOT
70849: IFFALSE 70853
// exit ;
70851: GO 70879
// for i in units do
70853: LD_ADDR_VAR 0 3
70857: PUSH
70858: LD_VAR 0 1
70862: PUSH
70863: FOR_IN
70864: IFFALSE 70877
// ComExit ( i ) ;
70866: LD_VAR 0 3
70870: PPUSH
70871: CALL 70757 0 1
70875: GO 70863
70877: POP
70878: POP
// end ;
70879: LD_VAR 0 2
70883: RET
// export function ResetHc ; begin
70884: LD_INT 0
70886: PPUSH
// InitHc ;
70887: CALL_OW 19
// hc_importance := 0 ;
70891: LD_ADDR_OWVAR 32
70895: PUSH
70896: LD_INT 0
70898: ST_TO_ADDR
// end ;
70899: LD_VAR 0 1
70903: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
70904: LD_INT 0
70906: PPUSH
70907: PPUSH
70908: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70909: LD_ADDR_VAR 0 6
70913: PUSH
70914: LD_VAR 0 1
70918: PUSH
70919: LD_VAR 0 3
70923: PLUS
70924: PUSH
70925: LD_INT 2
70927: DIV
70928: ST_TO_ADDR
// if _x < 0 then
70929: LD_VAR 0 6
70933: PUSH
70934: LD_INT 0
70936: LESS
70937: IFFALSE 70954
// _x := _x * - 1 ;
70939: LD_ADDR_VAR 0 6
70943: PUSH
70944: LD_VAR 0 6
70948: PUSH
70949: LD_INT 1
70951: NEG
70952: MUL
70953: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70954: LD_ADDR_VAR 0 7
70958: PUSH
70959: LD_VAR 0 2
70963: PUSH
70964: LD_VAR 0 4
70968: PLUS
70969: PUSH
70970: LD_INT 2
70972: DIV
70973: ST_TO_ADDR
// if _y < 0 then
70974: LD_VAR 0 7
70978: PUSH
70979: LD_INT 0
70981: LESS
70982: IFFALSE 70999
// _y := _y * - 1 ;
70984: LD_ADDR_VAR 0 7
70988: PUSH
70989: LD_VAR 0 7
70993: PUSH
70994: LD_INT 1
70996: NEG
70997: MUL
70998: ST_TO_ADDR
// result := [ _x , _y ] ;
70999: LD_ADDR_VAR 0 5
71003: PUSH
71004: LD_VAR 0 6
71008: PUSH
71009: LD_VAR 0 7
71013: PUSH
71014: EMPTY
71015: LIST
71016: LIST
71017: ST_TO_ADDR
// end ;
71018: LD_VAR 0 5
71022: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
71023: LD_INT 0
71025: PPUSH
71026: PPUSH
71027: PPUSH
71028: PPUSH
// task := GetTaskList ( unit ) ;
71029: LD_ADDR_VAR 0 7
71033: PUSH
71034: LD_VAR 0 1
71038: PPUSH
71039: CALL_OW 437
71043: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
71044: LD_VAR 0 7
71048: NOT
71049: PUSH
71050: LD_VAR 0 1
71054: PPUSH
71055: LD_VAR 0 2
71059: PPUSH
71060: CALL_OW 308
71064: NOT
71065: AND
71066: IFFALSE 71070
// exit ;
71068: GO 71188
// if IsInArea ( unit , area ) then
71070: LD_VAR 0 1
71074: PPUSH
71075: LD_VAR 0 2
71079: PPUSH
71080: CALL_OW 308
71084: IFFALSE 71102
// begin ComMoveToArea ( unit , goAway ) ;
71086: LD_VAR 0 1
71090: PPUSH
71091: LD_VAR 0 3
71095: PPUSH
71096: CALL_OW 113
// exit ;
71100: GO 71188
// end ; if task [ 1 ] [ 1 ] <> M then
71102: LD_VAR 0 7
71106: PUSH
71107: LD_INT 1
71109: ARRAY
71110: PUSH
71111: LD_INT 1
71113: ARRAY
71114: PUSH
71115: LD_STRING M
71117: NONEQUAL
71118: IFFALSE 71122
// exit ;
71120: GO 71188
// x := task [ 1 ] [ 2 ] ;
71122: LD_ADDR_VAR 0 5
71126: PUSH
71127: LD_VAR 0 7
71131: PUSH
71132: LD_INT 1
71134: ARRAY
71135: PUSH
71136: LD_INT 2
71138: ARRAY
71139: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
71140: LD_ADDR_VAR 0 6
71144: PUSH
71145: LD_VAR 0 7
71149: PUSH
71150: LD_INT 1
71152: ARRAY
71153: PUSH
71154: LD_INT 3
71156: ARRAY
71157: ST_TO_ADDR
// if InArea ( x , y , area ) then
71158: LD_VAR 0 5
71162: PPUSH
71163: LD_VAR 0 6
71167: PPUSH
71168: LD_VAR 0 2
71172: PPUSH
71173: CALL_OW 309
71177: IFFALSE 71188
// ComStop ( unit ) ;
71179: LD_VAR 0 1
71183: PPUSH
71184: CALL_OW 141
// end ;
71188: LD_VAR 0 4
71192: RET
// export function Abs ( value ) ; begin
71193: LD_INT 0
71195: PPUSH
// result := value ;
71196: LD_ADDR_VAR 0 2
71200: PUSH
71201: LD_VAR 0 1
71205: ST_TO_ADDR
// if value < 0 then
71206: LD_VAR 0 1
71210: PUSH
71211: LD_INT 0
71213: LESS
71214: IFFALSE 71231
// result := value * - 1 ;
71216: LD_ADDR_VAR 0 2
71220: PUSH
71221: LD_VAR 0 1
71225: PUSH
71226: LD_INT 1
71228: NEG
71229: MUL
71230: ST_TO_ADDR
// end ;
71231: LD_VAR 0 2
71235: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
71236: LD_INT 0
71238: PPUSH
71239: PPUSH
71240: PPUSH
71241: PPUSH
71242: PPUSH
71243: PPUSH
71244: PPUSH
71245: PPUSH
// if not unit or not building then
71246: LD_VAR 0 1
71250: NOT
71251: PUSH
71252: LD_VAR 0 2
71256: NOT
71257: OR
71258: IFFALSE 71262
// exit ;
71260: GO 71488
// x := GetX ( building ) ;
71262: LD_ADDR_VAR 0 4
71266: PUSH
71267: LD_VAR 0 2
71271: PPUSH
71272: CALL_OW 250
71276: ST_TO_ADDR
// y := GetY ( building ) ;
71277: LD_ADDR_VAR 0 6
71281: PUSH
71282: LD_VAR 0 2
71286: PPUSH
71287: CALL_OW 251
71291: ST_TO_ADDR
// d := GetDir ( building ) ;
71292: LD_ADDR_VAR 0 8
71296: PUSH
71297: LD_VAR 0 2
71301: PPUSH
71302: CALL_OW 254
71306: ST_TO_ADDR
// r := 4 ;
71307: LD_ADDR_VAR 0 9
71311: PUSH
71312: LD_INT 4
71314: ST_TO_ADDR
// for i := 1 to 5 do
71315: LD_ADDR_VAR 0 10
71319: PUSH
71320: DOUBLE
71321: LD_INT 1
71323: DEC
71324: ST_TO_ADDR
71325: LD_INT 5
71327: PUSH
71328: FOR_TO
71329: IFFALSE 71486
// begin _x := ShiftX ( x , d , r + i ) ;
71331: LD_ADDR_VAR 0 5
71335: PUSH
71336: LD_VAR 0 4
71340: PPUSH
71341: LD_VAR 0 8
71345: PPUSH
71346: LD_VAR 0 9
71350: PUSH
71351: LD_VAR 0 10
71355: PLUS
71356: PPUSH
71357: CALL_OW 272
71361: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
71362: LD_ADDR_VAR 0 7
71366: PUSH
71367: LD_VAR 0 6
71371: PPUSH
71372: LD_VAR 0 8
71376: PPUSH
71377: LD_VAR 0 9
71381: PUSH
71382: LD_VAR 0 10
71386: PLUS
71387: PPUSH
71388: CALL_OW 273
71392: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
71393: LD_VAR 0 5
71397: PPUSH
71398: LD_VAR 0 7
71402: PPUSH
71403: CALL_OW 488
71407: PUSH
71408: LD_VAR 0 5
71412: PPUSH
71413: LD_VAR 0 7
71417: PPUSH
71418: CALL_OW 428
71422: PPUSH
71423: CALL_OW 247
71427: PUSH
71428: LD_INT 3
71430: PUSH
71431: LD_INT 2
71433: PUSH
71434: EMPTY
71435: LIST
71436: LIST
71437: IN
71438: NOT
71439: AND
71440: IFFALSE 71484
// begin ComMoveXY ( unit , _x , _y ) ;
71442: LD_VAR 0 1
71446: PPUSH
71447: LD_VAR 0 5
71451: PPUSH
71452: LD_VAR 0 7
71456: PPUSH
71457: CALL_OW 111
// result := [ _x , _y ] ;
71461: LD_ADDR_VAR 0 3
71465: PUSH
71466: LD_VAR 0 5
71470: PUSH
71471: LD_VAR 0 7
71475: PUSH
71476: EMPTY
71477: LIST
71478: LIST
71479: ST_TO_ADDR
// exit ;
71480: POP
71481: POP
71482: GO 71488
// end ; end ;
71484: GO 71328
71486: POP
71487: POP
// end ;
71488: LD_VAR 0 3
71492: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
71493: LD_INT 0
71495: PPUSH
71496: PPUSH
71497: PPUSH
// result := 0 ;
71498: LD_ADDR_VAR 0 3
71502: PUSH
71503: LD_INT 0
71505: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
71506: LD_VAR 0 1
71510: PUSH
71511: LD_INT 0
71513: LESS
71514: PUSH
71515: LD_VAR 0 1
71519: PUSH
71520: LD_INT 8
71522: GREATER
71523: OR
71524: PUSH
71525: LD_VAR 0 2
71529: PUSH
71530: LD_INT 0
71532: LESS
71533: OR
71534: PUSH
71535: LD_VAR 0 2
71539: PUSH
71540: LD_INT 8
71542: GREATER
71543: OR
71544: IFFALSE 71548
// exit ;
71546: GO 71623
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
71548: LD_ADDR_VAR 0 4
71552: PUSH
71553: LD_INT 22
71555: PUSH
71556: LD_VAR 0 2
71560: PUSH
71561: EMPTY
71562: LIST
71563: LIST
71564: PPUSH
71565: CALL_OW 69
71569: PUSH
71570: FOR_IN
71571: IFFALSE 71621
// begin un := UnitShoot ( i ) ;
71573: LD_ADDR_VAR 0 5
71577: PUSH
71578: LD_VAR 0 4
71582: PPUSH
71583: CALL_OW 504
71587: ST_TO_ADDR
// if GetSide ( un ) = side1 then
71588: LD_VAR 0 5
71592: PPUSH
71593: CALL_OW 255
71597: PUSH
71598: LD_VAR 0 1
71602: EQUAL
71603: IFFALSE 71619
// begin result := un ;
71605: LD_ADDR_VAR 0 3
71609: PUSH
71610: LD_VAR 0 5
71614: ST_TO_ADDR
// exit ;
71615: POP
71616: POP
71617: GO 71623
// end ; end ;
71619: GO 71570
71621: POP
71622: POP
// end ;
71623: LD_VAR 0 3
71627: RET
// export function GetCargoBay ( units ) ; begin
71628: LD_INT 0
71630: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
71631: LD_ADDR_VAR 0 2
71635: PUSH
71636: LD_VAR 0 1
71640: PPUSH
71641: LD_INT 2
71643: PUSH
71644: LD_INT 34
71646: PUSH
71647: LD_INT 12
71649: PUSH
71650: EMPTY
71651: LIST
71652: LIST
71653: PUSH
71654: LD_INT 34
71656: PUSH
71657: LD_INT 51
71659: PUSH
71660: EMPTY
71661: LIST
71662: LIST
71663: PUSH
71664: LD_INT 34
71666: PUSH
71667: LD_INT 32
71669: PUSH
71670: EMPTY
71671: LIST
71672: LIST
71673: PUSH
71674: LD_INT 34
71676: PUSH
71677: LD_INT 89
71679: PUSH
71680: EMPTY
71681: LIST
71682: LIST
71683: PUSH
71684: EMPTY
71685: LIST
71686: LIST
71687: LIST
71688: LIST
71689: LIST
71690: PPUSH
71691: CALL_OW 72
71695: ST_TO_ADDR
// end ;
71696: LD_VAR 0 2
71700: RET
// export function Negate ( value ) ; begin
71701: LD_INT 0
71703: PPUSH
// result := not value ;
71704: LD_ADDR_VAR 0 2
71708: PUSH
71709: LD_VAR 0 1
71713: NOT
71714: ST_TO_ADDR
// end ;
71715: LD_VAR 0 2
71719: RET
// export function Inc ( value ) ; begin
71720: LD_INT 0
71722: PPUSH
// result := value + 1 ;
71723: LD_ADDR_VAR 0 2
71727: PUSH
71728: LD_VAR 0 1
71732: PUSH
71733: LD_INT 1
71735: PLUS
71736: ST_TO_ADDR
// end ;
71737: LD_VAR 0 2
71741: RET
// export function Dec ( value ) ; begin
71742: LD_INT 0
71744: PPUSH
// result := value - 1 ;
71745: LD_ADDR_VAR 0 2
71749: PUSH
71750: LD_VAR 0 1
71754: PUSH
71755: LD_INT 1
71757: MINUS
71758: ST_TO_ADDR
// end ;
71759: LD_VAR 0 2
71763: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
71764: LD_INT 0
71766: PPUSH
71767: PPUSH
71768: PPUSH
71769: PPUSH
71770: PPUSH
71771: PPUSH
71772: PPUSH
71773: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
71774: LD_VAR 0 1
71778: PPUSH
71779: LD_VAR 0 2
71783: PPUSH
71784: CALL_OW 488
71788: NOT
71789: PUSH
71790: LD_VAR 0 3
71794: PPUSH
71795: LD_VAR 0 4
71799: PPUSH
71800: CALL_OW 488
71804: NOT
71805: OR
71806: IFFALSE 71819
// begin result := - 1 ;
71808: LD_ADDR_VAR 0 5
71812: PUSH
71813: LD_INT 1
71815: NEG
71816: ST_TO_ADDR
// exit ;
71817: GO 72054
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
71819: LD_ADDR_VAR 0 12
71823: PUSH
71824: LD_VAR 0 1
71828: PPUSH
71829: LD_VAR 0 2
71833: PPUSH
71834: LD_VAR 0 3
71838: PPUSH
71839: LD_VAR 0 4
71843: PPUSH
71844: CALL 70904 0 4
71848: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
71849: LD_ADDR_VAR 0 11
71853: PUSH
71854: LD_VAR 0 1
71858: PPUSH
71859: LD_VAR 0 2
71863: PPUSH
71864: LD_VAR 0 12
71868: PUSH
71869: LD_INT 1
71871: ARRAY
71872: PPUSH
71873: LD_VAR 0 12
71877: PUSH
71878: LD_INT 2
71880: ARRAY
71881: PPUSH
71882: CALL_OW 298
71886: ST_TO_ADDR
// distance := 9999 ;
71887: LD_ADDR_VAR 0 10
71891: PUSH
71892: LD_INT 9999
71894: ST_TO_ADDR
// for i := 0 to 5 do
71895: LD_ADDR_VAR 0 6
71899: PUSH
71900: DOUBLE
71901: LD_INT 0
71903: DEC
71904: ST_TO_ADDR
71905: LD_INT 5
71907: PUSH
71908: FOR_TO
71909: IFFALSE 72052
// begin _x := ShiftX ( x1 , i , centerDist ) ;
71911: LD_ADDR_VAR 0 7
71915: PUSH
71916: LD_VAR 0 1
71920: PPUSH
71921: LD_VAR 0 6
71925: PPUSH
71926: LD_VAR 0 11
71930: PPUSH
71931: CALL_OW 272
71935: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
71936: LD_ADDR_VAR 0 8
71940: PUSH
71941: LD_VAR 0 2
71945: PPUSH
71946: LD_VAR 0 6
71950: PPUSH
71951: LD_VAR 0 11
71955: PPUSH
71956: CALL_OW 273
71960: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71961: LD_VAR 0 7
71965: PPUSH
71966: LD_VAR 0 8
71970: PPUSH
71971: CALL_OW 488
71975: NOT
71976: IFFALSE 71980
// continue ;
71978: GO 71908
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
71980: LD_ADDR_VAR 0 9
71984: PUSH
71985: LD_VAR 0 12
71989: PUSH
71990: LD_INT 1
71992: ARRAY
71993: PPUSH
71994: LD_VAR 0 12
71998: PUSH
71999: LD_INT 2
72001: ARRAY
72002: PPUSH
72003: LD_VAR 0 7
72007: PPUSH
72008: LD_VAR 0 8
72012: PPUSH
72013: CALL_OW 298
72017: ST_TO_ADDR
// if tmp < distance then
72018: LD_VAR 0 9
72022: PUSH
72023: LD_VAR 0 10
72027: LESS
72028: IFFALSE 72050
// begin result := i ;
72030: LD_ADDR_VAR 0 5
72034: PUSH
72035: LD_VAR 0 6
72039: ST_TO_ADDR
// distance := tmp ;
72040: LD_ADDR_VAR 0 10
72044: PUSH
72045: LD_VAR 0 9
72049: ST_TO_ADDR
// end ; end ;
72050: GO 71908
72052: POP
72053: POP
// end ;
72054: LD_VAR 0 5
72058: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72059: LD_INT 0
72061: PPUSH
72062: PPUSH
// if not driver or not IsInUnit ( driver ) then
72063: LD_VAR 0 1
72067: NOT
72068: PUSH
72069: LD_VAR 0 1
72073: PPUSH
72074: CALL_OW 310
72078: NOT
72079: OR
72080: IFFALSE 72084
// exit ;
72082: GO 72174
// vehicle := IsInUnit ( driver ) ;
72084: LD_ADDR_VAR 0 3
72088: PUSH
72089: LD_VAR 0 1
72093: PPUSH
72094: CALL_OW 310
72098: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72099: LD_VAR 0 1
72103: PPUSH
72104: LD_STRING \
72106: PUSH
72107: LD_INT 0
72109: PUSH
72110: LD_INT 0
72112: PUSH
72113: LD_INT 0
72115: PUSH
72116: LD_INT 0
72118: PUSH
72119: LD_INT 0
72121: PUSH
72122: LD_INT 0
72124: PUSH
72125: EMPTY
72126: LIST
72127: LIST
72128: LIST
72129: LIST
72130: LIST
72131: LIST
72132: LIST
72133: PUSH
72134: LD_STRING E
72136: PUSH
72137: LD_INT 0
72139: PUSH
72140: LD_INT 0
72142: PUSH
72143: LD_VAR 0 3
72147: PUSH
72148: LD_INT 0
72150: PUSH
72151: LD_INT 0
72153: PUSH
72154: LD_INT 0
72156: PUSH
72157: EMPTY
72158: LIST
72159: LIST
72160: LIST
72161: LIST
72162: LIST
72163: LIST
72164: LIST
72165: PUSH
72166: EMPTY
72167: LIST
72168: LIST
72169: PPUSH
72170: CALL_OW 446
// end ;
72174: LD_VAR 0 2
72178: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72179: LD_INT 0
72181: PPUSH
72182: PPUSH
// if not driver or not IsInUnit ( driver ) then
72183: LD_VAR 0 1
72187: NOT
72188: PUSH
72189: LD_VAR 0 1
72193: PPUSH
72194: CALL_OW 310
72198: NOT
72199: OR
72200: IFFALSE 72204
// exit ;
72202: GO 72294
// vehicle := IsInUnit ( driver ) ;
72204: LD_ADDR_VAR 0 3
72208: PUSH
72209: LD_VAR 0 1
72213: PPUSH
72214: CALL_OW 310
72218: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72219: LD_VAR 0 1
72223: PPUSH
72224: LD_STRING \
72226: PUSH
72227: LD_INT 0
72229: PUSH
72230: LD_INT 0
72232: PUSH
72233: LD_INT 0
72235: PUSH
72236: LD_INT 0
72238: PUSH
72239: LD_INT 0
72241: PUSH
72242: LD_INT 0
72244: PUSH
72245: EMPTY
72246: LIST
72247: LIST
72248: LIST
72249: LIST
72250: LIST
72251: LIST
72252: LIST
72253: PUSH
72254: LD_STRING E
72256: PUSH
72257: LD_INT 0
72259: PUSH
72260: LD_INT 0
72262: PUSH
72263: LD_VAR 0 3
72267: PUSH
72268: LD_INT 0
72270: PUSH
72271: LD_INT 0
72273: PUSH
72274: LD_INT 0
72276: PUSH
72277: EMPTY
72278: LIST
72279: LIST
72280: LIST
72281: LIST
72282: LIST
72283: LIST
72284: LIST
72285: PUSH
72286: EMPTY
72287: LIST
72288: LIST
72289: PPUSH
72290: CALL_OW 447
// end ;
72294: LD_VAR 0 2
72298: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
72299: LD_INT 0
72301: PPUSH
72302: PPUSH
72303: PPUSH
// tmp := [ ] ;
72304: LD_ADDR_VAR 0 5
72308: PUSH
72309: EMPTY
72310: ST_TO_ADDR
// for i in units do
72311: LD_ADDR_VAR 0 4
72315: PUSH
72316: LD_VAR 0 1
72320: PUSH
72321: FOR_IN
72322: IFFALSE 72360
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
72324: LD_ADDR_VAR 0 5
72328: PUSH
72329: LD_VAR 0 5
72333: PPUSH
72334: LD_VAR 0 5
72338: PUSH
72339: LD_INT 1
72341: PLUS
72342: PPUSH
72343: LD_VAR 0 4
72347: PPUSH
72348: CALL_OW 256
72352: PPUSH
72353: CALL_OW 2
72357: ST_TO_ADDR
72358: GO 72321
72360: POP
72361: POP
// if not tmp then
72362: LD_VAR 0 5
72366: NOT
72367: IFFALSE 72371
// exit ;
72369: GO 72419
// if asc then
72371: LD_VAR 0 2
72375: IFFALSE 72399
// result := SortListByListAsc ( units , tmp ) else
72377: LD_ADDR_VAR 0 3
72381: PUSH
72382: LD_VAR 0 1
72386: PPUSH
72387: LD_VAR 0 5
72391: PPUSH
72392: CALL_OW 76
72396: ST_TO_ADDR
72397: GO 72419
// result := SortListByListDesc ( units , tmp ) ;
72399: LD_ADDR_VAR 0 3
72403: PUSH
72404: LD_VAR 0 1
72408: PPUSH
72409: LD_VAR 0 5
72413: PPUSH
72414: CALL_OW 77
72418: ST_TO_ADDR
// end ;
72419: LD_VAR 0 3
72423: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
72424: LD_INT 0
72426: PPUSH
72427: PPUSH
// task := GetTaskList ( mech ) ;
72428: LD_ADDR_VAR 0 4
72432: PUSH
72433: LD_VAR 0 1
72437: PPUSH
72438: CALL_OW 437
72442: ST_TO_ADDR
// if not task then
72443: LD_VAR 0 4
72447: NOT
72448: IFFALSE 72452
// exit ;
72450: GO 72494
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
72452: LD_ADDR_VAR 0 3
72456: PUSH
72457: LD_VAR 0 4
72461: PUSH
72462: LD_INT 1
72464: ARRAY
72465: PUSH
72466: LD_INT 1
72468: ARRAY
72469: PUSH
72470: LD_STRING r
72472: EQUAL
72473: PUSH
72474: LD_VAR 0 4
72478: PUSH
72479: LD_INT 1
72481: ARRAY
72482: PUSH
72483: LD_INT 4
72485: ARRAY
72486: PUSH
72487: LD_VAR 0 2
72491: EQUAL
72492: AND
72493: ST_TO_ADDR
// end ;
72494: LD_VAR 0 3
72498: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
72499: LD_INT 0
72501: PPUSH
// SetDir ( unit , d ) ;
72502: LD_VAR 0 1
72506: PPUSH
72507: LD_VAR 0 4
72511: PPUSH
72512: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
72516: LD_VAR 0 1
72520: PPUSH
72521: LD_VAR 0 2
72525: PPUSH
72526: LD_VAR 0 3
72530: PPUSH
72531: LD_VAR 0 5
72535: PPUSH
72536: CALL_OW 48
// end ;
72540: LD_VAR 0 6
72544: RET
// export function ToNaturalNumber ( number ) ; begin
72545: LD_INT 0
72547: PPUSH
// result := number div 1 ;
72548: LD_ADDR_VAR 0 2
72552: PUSH
72553: LD_VAR 0 1
72557: PUSH
72558: LD_INT 1
72560: DIV
72561: ST_TO_ADDR
// if number < 0 then
72562: LD_VAR 0 1
72566: PUSH
72567: LD_INT 0
72569: LESS
72570: IFFALSE 72580
// result := 0 ;
72572: LD_ADDR_VAR 0 2
72576: PUSH
72577: LD_INT 0
72579: ST_TO_ADDR
// end ;
72580: LD_VAR 0 2
72584: RET
// export function SortByClass ( units , class ) ; var un ; begin
72585: LD_INT 0
72587: PPUSH
72588: PPUSH
// if not units or not class then
72589: LD_VAR 0 1
72593: NOT
72594: PUSH
72595: LD_VAR 0 2
72599: NOT
72600: OR
72601: IFFALSE 72605
// exit ;
72603: GO 72700
// result := [ ] ;
72605: LD_ADDR_VAR 0 3
72609: PUSH
72610: EMPTY
72611: ST_TO_ADDR
// for un in units do
72612: LD_ADDR_VAR 0 4
72616: PUSH
72617: LD_VAR 0 1
72621: PUSH
72622: FOR_IN
72623: IFFALSE 72698
// if GetClass ( un ) = class then
72625: LD_VAR 0 4
72629: PPUSH
72630: CALL_OW 257
72634: PUSH
72635: LD_VAR 0 2
72639: EQUAL
72640: IFFALSE 72667
// result := Insert ( result , 1 , un ) else
72642: LD_ADDR_VAR 0 3
72646: PUSH
72647: LD_VAR 0 3
72651: PPUSH
72652: LD_INT 1
72654: PPUSH
72655: LD_VAR 0 4
72659: PPUSH
72660: CALL_OW 2
72664: ST_TO_ADDR
72665: GO 72696
// result := Replace ( result , result + 1 , un ) ;
72667: LD_ADDR_VAR 0 3
72671: PUSH
72672: LD_VAR 0 3
72676: PPUSH
72677: LD_VAR 0 3
72681: PUSH
72682: LD_INT 1
72684: PLUS
72685: PPUSH
72686: LD_VAR 0 4
72690: PPUSH
72691: CALL_OW 1
72695: ST_TO_ADDR
72696: GO 72622
72698: POP
72699: POP
// end ;
72700: LD_VAR 0 3
72704: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
72705: LD_INT 0
72707: PPUSH
72708: PPUSH
72709: PPUSH
72710: PPUSH
72711: PPUSH
72712: PPUSH
72713: PPUSH
// result := [ ] ;
72714: LD_ADDR_VAR 0 4
72718: PUSH
72719: EMPTY
72720: ST_TO_ADDR
// if x - r < 0 then
72721: LD_VAR 0 1
72725: PUSH
72726: LD_VAR 0 3
72730: MINUS
72731: PUSH
72732: LD_INT 0
72734: LESS
72735: IFFALSE 72747
// min_x := 0 else
72737: LD_ADDR_VAR 0 8
72741: PUSH
72742: LD_INT 0
72744: ST_TO_ADDR
72745: GO 72763
// min_x := x - r ;
72747: LD_ADDR_VAR 0 8
72751: PUSH
72752: LD_VAR 0 1
72756: PUSH
72757: LD_VAR 0 3
72761: MINUS
72762: ST_TO_ADDR
// if y - r < 0 then
72763: LD_VAR 0 2
72767: PUSH
72768: LD_VAR 0 3
72772: MINUS
72773: PUSH
72774: LD_INT 0
72776: LESS
72777: IFFALSE 72789
// min_y := 0 else
72779: LD_ADDR_VAR 0 7
72783: PUSH
72784: LD_INT 0
72786: ST_TO_ADDR
72787: GO 72805
// min_y := y - r ;
72789: LD_ADDR_VAR 0 7
72793: PUSH
72794: LD_VAR 0 2
72798: PUSH
72799: LD_VAR 0 3
72803: MINUS
72804: ST_TO_ADDR
// max_x := x + r ;
72805: LD_ADDR_VAR 0 9
72809: PUSH
72810: LD_VAR 0 1
72814: PUSH
72815: LD_VAR 0 3
72819: PLUS
72820: ST_TO_ADDR
// max_y := y + r ;
72821: LD_ADDR_VAR 0 10
72825: PUSH
72826: LD_VAR 0 2
72830: PUSH
72831: LD_VAR 0 3
72835: PLUS
72836: ST_TO_ADDR
// for _x = min_x to max_x do
72837: LD_ADDR_VAR 0 5
72841: PUSH
72842: DOUBLE
72843: LD_VAR 0 8
72847: DEC
72848: ST_TO_ADDR
72849: LD_VAR 0 9
72853: PUSH
72854: FOR_TO
72855: IFFALSE 72956
// for _y = min_y to max_y do
72857: LD_ADDR_VAR 0 6
72861: PUSH
72862: DOUBLE
72863: LD_VAR 0 7
72867: DEC
72868: ST_TO_ADDR
72869: LD_VAR 0 10
72873: PUSH
72874: FOR_TO
72875: IFFALSE 72952
// begin if not ValidHex ( _x , _y ) then
72877: LD_VAR 0 5
72881: PPUSH
72882: LD_VAR 0 6
72886: PPUSH
72887: CALL_OW 488
72891: NOT
72892: IFFALSE 72896
// continue ;
72894: GO 72874
// if GetResourceTypeXY ( _x , _y ) then
72896: LD_VAR 0 5
72900: PPUSH
72901: LD_VAR 0 6
72905: PPUSH
72906: CALL_OW 283
72910: IFFALSE 72950
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
72912: LD_ADDR_VAR 0 4
72916: PUSH
72917: LD_VAR 0 4
72921: PPUSH
72922: LD_VAR 0 4
72926: PUSH
72927: LD_INT 1
72929: PLUS
72930: PPUSH
72931: LD_VAR 0 5
72935: PUSH
72936: LD_VAR 0 6
72940: PUSH
72941: EMPTY
72942: LIST
72943: LIST
72944: PPUSH
72945: CALL_OW 1
72949: ST_TO_ADDR
// end ;
72950: GO 72874
72952: POP
72953: POP
72954: GO 72854
72956: POP
72957: POP
// end ;
72958: LD_VAR 0 4
72962: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
72963: LD_INT 0
72965: PPUSH
72966: PPUSH
72967: PPUSH
72968: PPUSH
72969: PPUSH
72970: PPUSH
72971: PPUSH
72972: PPUSH
// if not units then
72973: LD_VAR 0 1
72977: NOT
72978: IFFALSE 72982
// exit ;
72980: GO 73506
// result := UnitFilter ( units , [ f_ok ] ) ;
72982: LD_ADDR_VAR 0 3
72986: PUSH
72987: LD_VAR 0 1
72991: PPUSH
72992: LD_INT 50
72994: PUSH
72995: EMPTY
72996: LIST
72997: PPUSH
72998: CALL_OW 72
73002: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
73003: LD_ADDR_VAR 0 8
73007: PUSH
73008: LD_VAR 0 1
73012: PUSH
73013: LD_INT 1
73015: ARRAY
73016: PPUSH
73017: CALL_OW 255
73021: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
73022: LD_ADDR_VAR 0 10
73026: PUSH
73027: LD_INT 29
73029: PUSH
73030: LD_INT 91
73032: PUSH
73033: LD_INT 49
73035: PUSH
73036: EMPTY
73037: LIST
73038: LIST
73039: LIST
73040: ST_TO_ADDR
// if not result then
73041: LD_VAR 0 3
73045: NOT
73046: IFFALSE 73050
// exit ;
73048: GO 73506
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
73050: LD_ADDR_VAR 0 5
73054: PUSH
73055: LD_INT 81
73057: PUSH
73058: LD_VAR 0 8
73062: PUSH
73063: EMPTY
73064: LIST
73065: LIST
73066: PPUSH
73067: CALL_OW 69
73071: ST_TO_ADDR
// for i in result do
73072: LD_ADDR_VAR 0 4
73076: PUSH
73077: LD_VAR 0 3
73081: PUSH
73082: FOR_IN
73083: IFFALSE 73504
// begin tag := GetTag ( i ) + 1 ;
73085: LD_ADDR_VAR 0 9
73089: PUSH
73090: LD_VAR 0 4
73094: PPUSH
73095: CALL_OW 110
73099: PUSH
73100: LD_INT 1
73102: PLUS
73103: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
73104: LD_ADDR_VAR 0 7
73108: PUSH
73109: LD_VAR 0 4
73113: PPUSH
73114: CALL_OW 250
73118: PPUSH
73119: LD_VAR 0 4
73123: PPUSH
73124: CALL_OW 251
73128: PPUSH
73129: LD_INT 6
73131: PPUSH
73132: CALL 72705 0 3
73136: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
73137: LD_VAR 0 4
73141: PPUSH
73142: CALL_OW 247
73146: PUSH
73147: LD_INT 2
73149: EQUAL
73150: PUSH
73151: LD_VAR 0 7
73155: AND
73156: PUSH
73157: LD_VAR 0 4
73161: PPUSH
73162: CALL_OW 264
73166: PUSH
73167: LD_VAR 0 10
73171: IN
73172: NOT
73173: AND
73174: IFFALSE 73213
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
73176: LD_VAR 0 4
73180: PPUSH
73181: LD_VAR 0 7
73185: PUSH
73186: LD_INT 1
73188: ARRAY
73189: PUSH
73190: LD_INT 1
73192: ARRAY
73193: PPUSH
73194: LD_VAR 0 7
73198: PUSH
73199: LD_INT 1
73201: ARRAY
73202: PUSH
73203: LD_INT 2
73205: ARRAY
73206: PPUSH
73207: CALL_OW 116
73211: GO 73502
// if path > tag then
73213: LD_VAR 0 2
73217: PUSH
73218: LD_VAR 0 9
73222: GREATER
73223: IFFALSE 73431
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
73225: LD_ADDR_VAR 0 6
73229: PUSH
73230: LD_VAR 0 5
73234: PPUSH
73235: LD_INT 91
73237: PUSH
73238: LD_VAR 0 4
73242: PUSH
73243: LD_INT 8
73245: PUSH
73246: EMPTY
73247: LIST
73248: LIST
73249: LIST
73250: PPUSH
73251: CALL_OW 72
73255: ST_TO_ADDR
// if nearEnemy then
73256: LD_VAR 0 6
73260: IFFALSE 73329
// begin if GetWeapon ( i ) = ru_time_lapser then
73262: LD_VAR 0 4
73266: PPUSH
73267: CALL_OW 264
73271: PUSH
73272: LD_INT 49
73274: EQUAL
73275: IFFALSE 73303
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
73277: LD_VAR 0 4
73281: PPUSH
73282: LD_VAR 0 6
73286: PPUSH
73287: LD_VAR 0 4
73291: PPUSH
73292: CALL_OW 74
73296: PPUSH
73297: CALL_OW 112
73301: GO 73327
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
73303: LD_VAR 0 4
73307: PPUSH
73308: LD_VAR 0 6
73312: PPUSH
73313: LD_VAR 0 4
73317: PPUSH
73318: CALL_OW 74
73322: PPUSH
73323: CALL_OW 115
// end else
73327: GO 73429
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
73329: LD_VAR 0 4
73333: PPUSH
73334: LD_VAR 0 2
73338: PUSH
73339: LD_VAR 0 9
73343: ARRAY
73344: PUSH
73345: LD_INT 1
73347: ARRAY
73348: PPUSH
73349: LD_VAR 0 2
73353: PUSH
73354: LD_VAR 0 9
73358: ARRAY
73359: PUSH
73360: LD_INT 2
73362: ARRAY
73363: PPUSH
73364: CALL_OW 297
73368: PUSH
73369: LD_INT 6
73371: GREATER
73372: IFFALSE 73415
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
73374: LD_VAR 0 4
73378: PPUSH
73379: LD_VAR 0 2
73383: PUSH
73384: LD_VAR 0 9
73388: ARRAY
73389: PUSH
73390: LD_INT 1
73392: ARRAY
73393: PPUSH
73394: LD_VAR 0 2
73398: PUSH
73399: LD_VAR 0 9
73403: ARRAY
73404: PUSH
73405: LD_INT 2
73407: ARRAY
73408: PPUSH
73409: CALL_OW 114
73413: GO 73429
// SetTag ( i , tag ) ;
73415: LD_VAR 0 4
73419: PPUSH
73420: LD_VAR 0 9
73424: PPUSH
73425: CALL_OW 109
// end else
73429: GO 73502
// if enemy then
73431: LD_VAR 0 5
73435: IFFALSE 73502
// begin if GetWeapon ( i ) = ru_time_lapser then
73437: LD_VAR 0 4
73441: PPUSH
73442: CALL_OW 264
73446: PUSH
73447: LD_INT 49
73449: EQUAL
73450: IFFALSE 73478
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
73452: LD_VAR 0 4
73456: PPUSH
73457: LD_VAR 0 5
73461: PPUSH
73462: LD_VAR 0 4
73466: PPUSH
73467: CALL_OW 74
73471: PPUSH
73472: CALL_OW 112
73476: GO 73502
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
73478: LD_VAR 0 4
73482: PPUSH
73483: LD_VAR 0 5
73487: PPUSH
73488: LD_VAR 0 4
73492: PPUSH
73493: CALL_OW 74
73497: PPUSH
73498: CALL_OW 115
// end ; end ;
73502: GO 73082
73504: POP
73505: POP
// end ;
73506: LD_VAR 0 3
73510: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
73511: LD_INT 0
73513: PPUSH
73514: PPUSH
73515: PPUSH
// if not unit or IsInUnit ( unit ) then
73516: LD_VAR 0 1
73520: NOT
73521: PUSH
73522: LD_VAR 0 1
73526: PPUSH
73527: CALL_OW 310
73531: OR
73532: IFFALSE 73536
// exit ;
73534: GO 73627
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
73536: LD_ADDR_VAR 0 4
73540: PUSH
73541: LD_VAR 0 1
73545: PPUSH
73546: CALL_OW 250
73550: PPUSH
73551: LD_VAR 0 2
73555: PPUSH
73556: LD_INT 1
73558: PPUSH
73559: CALL_OW 272
73563: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
73564: LD_ADDR_VAR 0 5
73568: PUSH
73569: LD_VAR 0 1
73573: PPUSH
73574: CALL_OW 251
73578: PPUSH
73579: LD_VAR 0 2
73583: PPUSH
73584: LD_INT 1
73586: PPUSH
73587: CALL_OW 273
73591: ST_TO_ADDR
// if ValidHex ( x , y ) then
73592: LD_VAR 0 4
73596: PPUSH
73597: LD_VAR 0 5
73601: PPUSH
73602: CALL_OW 488
73606: IFFALSE 73627
// ComTurnXY ( unit , x , y ) ;
73608: LD_VAR 0 1
73612: PPUSH
73613: LD_VAR 0 4
73617: PPUSH
73618: LD_VAR 0 5
73622: PPUSH
73623: CALL_OW 118
// end ;
73627: LD_VAR 0 3
73631: RET
// export function SeeUnits ( side , units ) ; var i ; begin
73632: LD_INT 0
73634: PPUSH
73635: PPUSH
// result := false ;
73636: LD_ADDR_VAR 0 3
73640: PUSH
73641: LD_INT 0
73643: ST_TO_ADDR
// if not units then
73644: LD_VAR 0 2
73648: NOT
73649: IFFALSE 73653
// exit ;
73651: GO 73698
// for i in units do
73653: LD_ADDR_VAR 0 4
73657: PUSH
73658: LD_VAR 0 2
73662: PUSH
73663: FOR_IN
73664: IFFALSE 73696
// if See ( side , i ) then
73666: LD_VAR 0 1
73670: PPUSH
73671: LD_VAR 0 4
73675: PPUSH
73676: CALL_OW 292
73680: IFFALSE 73694
// begin result := true ;
73682: LD_ADDR_VAR 0 3
73686: PUSH
73687: LD_INT 1
73689: ST_TO_ADDR
// exit ;
73690: POP
73691: POP
73692: GO 73698
// end ;
73694: GO 73663
73696: POP
73697: POP
// end ;
73698: LD_VAR 0 3
73702: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
73703: LD_INT 0
73705: PPUSH
73706: PPUSH
73707: PPUSH
73708: PPUSH
// if not unit or not points then
73709: LD_VAR 0 1
73713: NOT
73714: PUSH
73715: LD_VAR 0 2
73719: NOT
73720: OR
73721: IFFALSE 73725
// exit ;
73723: GO 73815
// dist := 99999 ;
73725: LD_ADDR_VAR 0 5
73729: PUSH
73730: LD_INT 99999
73732: ST_TO_ADDR
// for i in points do
73733: LD_ADDR_VAR 0 4
73737: PUSH
73738: LD_VAR 0 2
73742: PUSH
73743: FOR_IN
73744: IFFALSE 73813
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
73746: LD_ADDR_VAR 0 6
73750: PUSH
73751: LD_VAR 0 1
73755: PPUSH
73756: LD_VAR 0 4
73760: PUSH
73761: LD_INT 1
73763: ARRAY
73764: PPUSH
73765: LD_VAR 0 4
73769: PUSH
73770: LD_INT 2
73772: ARRAY
73773: PPUSH
73774: CALL_OW 297
73778: ST_TO_ADDR
// if tmpDist < dist then
73779: LD_VAR 0 6
73783: PUSH
73784: LD_VAR 0 5
73788: LESS
73789: IFFALSE 73811
// begin result := i ;
73791: LD_ADDR_VAR 0 3
73795: PUSH
73796: LD_VAR 0 4
73800: ST_TO_ADDR
// dist := tmpDist ;
73801: LD_ADDR_VAR 0 5
73805: PUSH
73806: LD_VAR 0 6
73810: ST_TO_ADDR
// end ; end ;
73811: GO 73743
73813: POP
73814: POP
// end ;
73815: LD_VAR 0 3
73819: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
73820: LD_INT 0
73822: PPUSH
// uc_side := side ;
73823: LD_ADDR_OWVAR 20
73827: PUSH
73828: LD_VAR 0 1
73832: ST_TO_ADDR
// uc_nation := 3 ;
73833: LD_ADDR_OWVAR 21
73837: PUSH
73838: LD_INT 3
73840: ST_TO_ADDR
// vc_chassis := 25 ;
73841: LD_ADDR_OWVAR 37
73845: PUSH
73846: LD_INT 25
73848: ST_TO_ADDR
// vc_engine := engine_siberite ;
73849: LD_ADDR_OWVAR 39
73853: PUSH
73854: LD_INT 3
73856: ST_TO_ADDR
// vc_control := control_computer ;
73857: LD_ADDR_OWVAR 38
73861: PUSH
73862: LD_INT 3
73864: ST_TO_ADDR
// vc_weapon := 59 ;
73865: LD_ADDR_OWVAR 40
73869: PUSH
73870: LD_INT 59
73872: ST_TO_ADDR
// result := CreateVehicle ;
73873: LD_ADDR_VAR 0 5
73877: PUSH
73878: CALL_OW 45
73882: ST_TO_ADDR
// SetDir ( result , d ) ;
73883: LD_VAR 0 5
73887: PPUSH
73888: LD_VAR 0 4
73892: PPUSH
73893: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
73897: LD_VAR 0 5
73901: PPUSH
73902: LD_VAR 0 2
73906: PPUSH
73907: LD_VAR 0 3
73911: PPUSH
73912: LD_INT 0
73914: PPUSH
73915: CALL_OW 48
// end ;
73919: LD_VAR 0 5
73923: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
73924: LD_INT 0
73926: PPUSH
73927: PPUSH
73928: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
73929: LD_ADDR_VAR 0 2
73933: PUSH
73934: LD_INT 0
73936: PUSH
73937: LD_INT 0
73939: PUSH
73940: LD_INT 0
73942: PUSH
73943: LD_INT 0
73945: PUSH
73946: EMPTY
73947: LIST
73948: LIST
73949: LIST
73950: LIST
73951: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
73952: LD_VAR 0 1
73956: NOT
73957: PUSH
73958: LD_VAR 0 1
73962: PPUSH
73963: CALL_OW 264
73967: PUSH
73968: LD_INT 12
73970: PUSH
73971: LD_INT 51
73973: PUSH
73974: LD_INT 32
73976: PUSH
73977: LD_INT 89
73979: PUSH
73980: EMPTY
73981: LIST
73982: LIST
73983: LIST
73984: LIST
73985: IN
73986: NOT
73987: OR
73988: IFFALSE 73992
// exit ;
73990: GO 74090
// for i := 1 to 3 do
73992: LD_ADDR_VAR 0 3
73996: PUSH
73997: DOUBLE
73998: LD_INT 1
74000: DEC
74001: ST_TO_ADDR
74002: LD_INT 3
74004: PUSH
74005: FOR_TO
74006: IFFALSE 74088
// begin tmp := GetCargo ( cargo , i ) ;
74008: LD_ADDR_VAR 0 4
74012: PUSH
74013: LD_VAR 0 1
74017: PPUSH
74018: LD_VAR 0 3
74022: PPUSH
74023: CALL_OW 289
74027: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
74028: LD_ADDR_VAR 0 2
74032: PUSH
74033: LD_VAR 0 2
74037: PPUSH
74038: LD_VAR 0 3
74042: PPUSH
74043: LD_VAR 0 4
74047: PPUSH
74048: CALL_OW 1
74052: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
74053: LD_ADDR_VAR 0 2
74057: PUSH
74058: LD_VAR 0 2
74062: PPUSH
74063: LD_INT 4
74065: PPUSH
74066: LD_VAR 0 2
74070: PUSH
74071: LD_INT 4
74073: ARRAY
74074: PUSH
74075: LD_VAR 0 4
74079: PLUS
74080: PPUSH
74081: CALL_OW 1
74085: ST_TO_ADDR
// end ;
74086: GO 74005
74088: POP
74089: POP
// end ;
74090: LD_VAR 0 2
74094: RET
// export function Length ( array ) ; begin
74095: LD_INT 0
74097: PPUSH
// result := array + 0 ;
74098: LD_ADDR_VAR 0 2
74102: PUSH
74103: LD_VAR 0 1
74107: PUSH
74108: LD_INT 0
74110: PLUS
74111: ST_TO_ADDR
// end ;
74112: LD_VAR 0 2
74116: RET
// export function PrepareArray ( array ) ; begin
74117: LD_INT 0
74119: PPUSH
// result := array diff 0 ;
74120: LD_ADDR_VAR 0 2
74124: PUSH
74125: LD_VAR 0 1
74129: PUSH
74130: LD_INT 0
74132: DIFF
74133: ST_TO_ADDR
// if not result [ 1 ] then
74134: LD_VAR 0 2
74138: PUSH
74139: LD_INT 1
74141: ARRAY
74142: NOT
74143: IFFALSE 74163
// result := Delete ( result , 1 ) ;
74145: LD_ADDR_VAR 0 2
74149: PUSH
74150: LD_VAR 0 2
74154: PPUSH
74155: LD_INT 1
74157: PPUSH
74158: CALL_OW 3
74162: ST_TO_ADDR
// end ;
74163: LD_VAR 0 2
74167: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
74168: LD_INT 0
74170: PPUSH
74171: PPUSH
74172: PPUSH
74173: PPUSH
// sibRocketRange := 25 ;
74174: LD_ADDR_VAR 0 6
74178: PUSH
74179: LD_INT 25
74181: ST_TO_ADDR
// result := false ;
74182: LD_ADDR_VAR 0 4
74186: PUSH
74187: LD_INT 0
74189: ST_TO_ADDR
// for i := 0 to 5 do
74190: LD_ADDR_VAR 0 5
74194: PUSH
74195: DOUBLE
74196: LD_INT 0
74198: DEC
74199: ST_TO_ADDR
74200: LD_INT 5
74202: PUSH
74203: FOR_TO
74204: IFFALSE 74271
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
74206: LD_VAR 0 1
74210: PPUSH
74211: LD_VAR 0 5
74215: PPUSH
74216: LD_VAR 0 6
74220: PPUSH
74221: CALL_OW 272
74225: PPUSH
74226: LD_VAR 0 2
74230: PPUSH
74231: LD_VAR 0 5
74235: PPUSH
74236: LD_VAR 0 6
74240: PPUSH
74241: CALL_OW 273
74245: PPUSH
74246: LD_VAR 0 3
74250: PPUSH
74251: CALL_OW 309
74255: IFFALSE 74269
// begin result := true ;
74257: LD_ADDR_VAR 0 4
74261: PUSH
74262: LD_INT 1
74264: ST_TO_ADDR
// exit ;
74265: POP
74266: POP
74267: GO 74273
// end ;
74269: GO 74203
74271: POP
74272: POP
// end ;
74273: LD_VAR 0 4
74277: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
74278: LD_INT 0
74280: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
74281: LD_VAR 0 1
74285: PPUSH
74286: LD_VAR 0 2
74290: PPUSH
74291: LD_INT 0
74293: PPUSH
74294: LD_INT 0
74296: PPUSH
74297: LD_INT 1
74299: PPUSH
74300: LD_INT 0
74302: PPUSH
74303: CALL_OW 587
// end ; end_of_file
74307: LD_VAR 0 3
74311: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
74312: LD_VAR 0 1
74316: PUSH
74317: LD_INT 200
74319: DOUBLE
74320: GREATEREQUAL
74321: IFFALSE 74329
74323: LD_INT 299
74325: DOUBLE
74326: LESSEQUAL
74327: IFTRUE 74331
74329: GO 74363
74331: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
74332: LD_VAR 0 1
74336: PPUSH
74337: LD_VAR 0 2
74341: PPUSH
74342: LD_VAR 0 3
74346: PPUSH
74347: LD_VAR 0 4
74351: PPUSH
74352: LD_VAR 0 5
74356: PPUSH
74357: CALL 28978 0 5
74361: GO 74440
74363: LD_INT 300
74365: DOUBLE
74366: GREATEREQUAL
74367: IFFALSE 74375
74369: LD_INT 399
74371: DOUBLE
74372: LESSEQUAL
74373: IFTRUE 74377
74375: GO 74439
74377: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
74378: LD_VAR 0 1
74382: PPUSH
74383: LD_VAR 0 2
74387: PPUSH
74388: LD_VAR 0 3
74392: PPUSH
74393: LD_VAR 0 4
74397: PPUSH
74398: LD_VAR 0 5
74402: PPUSH
74403: LD_VAR 0 6
74407: PPUSH
74408: LD_VAR 0 7
74412: PPUSH
74413: LD_VAR 0 8
74417: PPUSH
74418: LD_VAR 0 9
74422: PPUSH
74423: LD_VAR 0 10
74427: PPUSH
74428: LD_VAR 0 11
74432: PPUSH
74433: CALL 25311 0 11
74437: GO 74440
74439: POP
// end ;
74440: PPOPN 11
74442: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
74443: LD_VAR 0 1
74447: PPUSH
74448: LD_VAR 0 2
74452: PPUSH
74453: LD_VAR 0 3
74457: PPUSH
74458: LD_VAR 0 4
74462: PPUSH
74463: LD_VAR 0 5
74467: PPUSH
74468: CALL 28714 0 5
// end ; end_of_file
74472: PPOPN 5
74474: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
74475: LD_VAR 0 1
74479: PPUSH
74480: LD_VAR 0 2
74484: PPUSH
74485: LD_VAR 0 3
74489: PPUSH
74490: LD_VAR 0 4
74494: PPUSH
74495: LD_VAR 0 5
74499: PPUSH
74500: LD_VAR 0 6
74504: PPUSH
74505: CALL 12963 0 6
// end ;
74509: PPOPN 6
74511: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
74512: LD_INT 0
74514: PPUSH
// begin if not units then
74515: LD_VAR 0 1
74519: NOT
74520: IFFALSE 74524
// exit ;
74522: GO 74524
// end ;
74524: PPOPN 7
74526: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
74527: CALL 12867 0 0
// end ;
74531: PPOPN 1
74533: END
